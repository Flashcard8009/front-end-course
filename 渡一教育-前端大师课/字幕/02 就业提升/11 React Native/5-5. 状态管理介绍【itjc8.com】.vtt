WEBVTT

00:00.430 --> 00:01.830
OK 欢迎回来

00:02.390 --> 00:11.070
然后前面的话 我们花了四节课的时间 我们把这个RN相关的那个第三方库啊 我们讲了一个这个导航

00:11.790 --> 00:19.310
把这个导航啊 大致看了一遍 那基本上的话 就是你平时做开发啊 你要用的导航基本上就差不多了

00:19.750 --> 00:27.190
就那么一些情况 OK 好的 这节课的话 我们来讲一下我们这个第三方库里面另外一个非常重要的东西

00:27.590 --> 00:39.150
那就是关于这个组建的状态管理啊 我们这节课的话 我们先就是花个几分钟时间 我们把这个状态管理啊 什么是状态管理 我们把它简单过一遍

00:39.750 --> 00:48.070
但这个的话 大家在之前学习那个react的时候 肯定也是接触过的 对吧 大家当时的话应该是学的是那个redax

00:48.710 --> 00:54.630
OK 那除了这个redax以外的话 还有哪些比较有名的这个状态管理库呢

00:55.190 --> 01:01.790
好 那我们这边这节课的话 我们把它就是简单的 我们来把它罗列一下啊 把它每一个人 我们看一下它的特点啊之类的

01:02.950 --> 01:10.750
那首先的话 关于这个状态管理 首先你要理解啊 无论是pc端还是这个移动端 那么我们现在流行的是什么

01:11.310 --> 01:13.550
流行的是不是组建化开发

01:14.470 --> 01:19.510
对吧 那组建化开发的话 那有一个非常重要的东西就是状态管理

01:20.230 --> 01:27.590
什么叫做状态管理 所谓状态管理的话 其实就是管理管理你这个组建 它内部它的这个

01:28.390 --> 01:31.630
数据啊 说简单点其实就是数据 对吧

01:32.830 --> 01:39.910
好 然后实际上状态的状态的这个概念非常简单啊 每个组建它自身可以维护一些数据

01:40.750 --> 01:44.390
可不可以啊 这就是状态的这个概念 那接下来

01:44.870 --> 01:52.150
这个状态管理啊 状态管理 那我们究竟要管理什么东西呢 其实的话其实就是对这些数据的这个传递

01:52.910 --> 01:58.150
进行一个管理 好 你看这边的话有一张非常形象的图啊 比如说我们的这个组建

01:58.590 --> 02:05.030
我们的组建的话 它其实和那个多母数很像 它是不是也是这个就是是一个这个数结构

02:05.790 --> 02:12.910
这个存在的 对不对 比如你这个是根组件 根组件下面有两个直组件啊 直组件下面又可以有自己的这个直组件

02:13.470 --> 02:17.550
是不是就和那个多母数的那个结构很像 对不对 它也是一个数结构

02:18.110 --> 02:23.230
那这里的话就会涉及到一个问题 什么问题呢 就是你组件 比如我这个组件

02:24.190 --> 02:29.950
我内部可以有自己的数据 然后这个组件内部有自己的这个数据 也就是我每个组件

02:30.790 --> 02:36.470
我内部都可以有自己的数据 那这里的话就会涉及到一个数据的传递

02:37.190 --> 02:41.390
对吧 啊 比如说我这个组件 我的数据的话我要传递给比如说这个组件

02:42.030 --> 02:50.790
那以前的话 你没有这些状态管理的这个第三方库 那你怎么传递呢 那你是不是就只有一层一层的 对不对 先传这个传给自己的副组件

02:51.350 --> 02:59.550
副组件 副组件好 传到这个最顶端 最顶端 然后又一层一层往下传 啊 传到直组件 直组件

02:59.910 --> 03:00.310
直组件

03:01.110 --> 03:09.110
ok 那你早期的话就只有这个样子 啊 非常非常的这个麻烦 对吧 特别是你这个项目变大之后

03:09.590 --> 03:23.230
啊 然后家组件的这个各数变多之后 那你这样子搞的话 是啊 非常牢火的 对吧 啊 谁说在这个这样的背景下面 啊 所说出现了什么呢 出现了这个状态 这个管理的库

03:24.470 --> 03:31.790
那状态这个管理的库 他的这个核心概念其实非常简单 他就是什么呢 他就是统一有一个仓库

03:32.590 --> 03:35.070
看到没有啊 这里的话有一个这个store

03:35.750 --> 03:40.630
这个仓库统一来管理所有组件的这个状态

03:41.350 --> 03:46.830
那回头我这个组件 我的这个状态变了之后 然后就干嘛呢 我说提交到这个store里面

03:47.510 --> 03:54.510
好 然后store里面 然后接下来的话 你比如说你这个组件 要去拿这个新的状态 也是从哪里去拿 是不是从这个store里面去拿

03:55.470 --> 04:00.670
看到没有啊 这个其实就是他的这个核心概念 其实也是比较简单 对吧

04:01.230 --> 04:10.390
ok 好 然后目前这个市面上比较流行的这个状态 这个管理的库有哪些呢 我这边罗利了一下啊 比较有名的

04:10.750 --> 04:16.070
大致有这么一些有这个flux vix redux more box

04:16.870 --> 04:21.750
ok 可能大家就是只听过这两个 你学vue的时候学过这个vix

04:22.910 --> 04:25.790
学这个react的时候学过这个reducts

04:26.750 --> 04:32.590
对吧啊 那这边其实除了vix redux 这边的话 然后还有就是flux和mobux

04:33.110 --> 04:40.230
啊 我们这边的话 我们这几个课我们简单介绍一下啊 我们不会讲具体的这个使用 我们就是这边简单介绍一下啊 每一种这个

04:40.670 --> 04:43.230
这个状态管理库他的一个特点

04:44.350 --> 04:46.830
好 最早其实这个flux是最早的

04:47.550 --> 04:52.030
ok flux是最早的flux的话 它是在13年这个facebook

04:52.590 --> 04:57.390
他推出这个react的时候 他就跟着推出了这个flux

04:58.190 --> 05:05.870
啊 因为这个facebook他在当时推出这个react 他就认就已经意识到了 因为他那个react他是主键化开发吗

05:06.350 --> 05:13.390
对吧 就已经意识到了我主键和主键之间 他是会有一个这个相互的这个状态的这个传递的

05:13.950 --> 05:19.710
啊 说说这个facebook的话就认为你这个你做react开发啊 你必然会用到这个flux

05:20.270 --> 05:25.790
两者结合在一起啊 才能构建这个大型的这个杰士应用

05:26.590 --> 05:33.150
好 我们来看一下这个整个这个flux 它的组成啊 它的组成的话 首先这边这个view view的话是试图程

05:34.190 --> 05:38.590
然后接下来这边呢 是这个action啊action的话 他就是一个描述

05:39.790 --> 05:45.230
描述你这个状态改变了一个对象 他其实这个action的话就和那个react

05:46.030 --> 05:54.190
里面的那个action是一样的 好 然后既然他比这个react 是他多出了一个什么呢 多出来了一个这个dispatcher

05:55.390 --> 05:59.870
看到没有 多出了一个dispatcher啊 这个的话就是专门接收action

06:00.270 --> 06:04.270
然后发给所有的store 那这个dispatcher有点类似于什么

06:04.670 --> 06:08.830
所以有点类似于那个reducer 我们react里面是不是有个reducer

06:09.470 --> 06:14.830
对吧 好 然后既然这边呢这个store store的话就是这个仓库了啊 这个仓库呢

06:14.910 --> 06:21.470
它和那个reduct的仓库有一点不同的是 它这个仓库里面它是可以有这个改变状态

06:21.870 --> 06:23.870
还有就是更新状态的这个方法的

06:24.750 --> 06:31.310
ok 我们这个reducts的话 他更新这个状态是在哪更新 他更新是不是在这个reducer里面更新

06:32.110 --> 06:37.710
对吧 通过reducer计算出最新的状态 然后加把新的状态分发给这个store

06:38.270 --> 06:44.110
但是这个flux的话 他是在这个store里面 他就有这个更新状态的这个方法

06:45.070 --> 06:49.790
好 然后这个flux它的特点啊 首先的话它是单向数据流

06:50.590 --> 06:55.950
啊 这边呢 就是你这个外界 你在改变了仕图 就你的仕图 然后产生这个

06:56.990 --> 07:00.190
状态的更新之后会派发一个这个action

07:01.070 --> 07:04.030
ok action 然后交给谁呢 交给这个dispatcher

07:04.670 --> 07:09.390
啊dispatcher 然后接下来派发给这个store 那store在处于这个

07:09.950 --> 07:16.510
触发相应的这个方法 更新这个数据和仕图啊 也就是说我最终我更新这个数据我是通过什么呢

07:16.510 --> 07:22.990
通过这个store里面的方法来更新的啊 和reducts不一样 reducts是通过什么 通过reducer

07:23.950 --> 07:26.270
对吧 我通过reducer来更新的

07:27.390 --> 07:34.430
那flux有一个很大的特点就是它的store可以有多个 那这一点的话和这个reducts是不是不一样

07:35.390 --> 07:37.950
对吧reducts的话只能有什么一个参考

07:38.590 --> 07:49.070
ok啊 他store不仅存放数据 还封装了处理数据的方法啊 这就是我刚刚所说的啊 这个也是和这个reducts不同的地方

07:49.790 --> 07:56.030
reducts的话 他那个store 他有没有方法呢 也有方法 但是他的方法不存在那个更新状态的方法

07:56.670 --> 08:00.110
因为他的状态更新是通过reducer来计算来更新的

08:00.670 --> 08:03.150
对吧 他的那个store里面的方法就是一些

08:04.190 --> 08:10.190
就是我获取数据的之类的方法 对不对啊 这是这个flux 最早期推出的

08:10.910 --> 08:14.510
好 然后这个views 这个大家很熟悉了

08:15.630 --> 08:20.750
啊 这个大家在学vue的时候 是不是学过的 就是vue官方这个推出的

08:21.230 --> 08:23.790
他里面的几个核心概念啊这个store

08:25.150 --> 08:29.390
store 是不是就是也是我们的数据倉库 对吧 然后这样还有什么呢 还有getter

08:30.110 --> 08:32.430
然后getter的话 他其实就有点类似于那个

08:34.030 --> 08:39.710
计算属性 是吧 有点类似于这个vue里面的计算属性啊 对这个数据做一个二次计算

08:40.430 --> 08:42.430
好 然后接下来的话 这边这个motation

08:42.990 --> 08:48.430
motation 的话是不是这个views里面 唯一这个修改state的这个图计

08:49.070 --> 08:53.230
对不对 你要修改这个state 你只能通过这个motation

08:53.790 --> 08:56.830
他官方也是建议你只通过这个motation

08:57.790 --> 09:02.670
然后views里面有没有这个action 呢 也有action 但是views里面的action

09:02.990 --> 09:08.030
啊 他是做什么呢 他是做一些易不操作的啊 他这个的话和上面介绍的这个flux

09:08.350 --> 09:10.190
包括后面的这个redux不一样

09:11.230 --> 09:14.910
flux和redux 他里面的action是什么 他是一个对象

09:15.950 --> 09:22.990
对吧 然后这个对象里面描述了我要做的这个操作啊 我这个这个状态如何进行更新

09:23.710 --> 09:25.710
啊 那这个action呢 他是一个

09:26.670 --> 09:32.350
描述性的对象 啊 但是views里面的action 他主要是什么呢 主要是做一些易不的操作啊

09:32.990 --> 09:37.310
啊 当然还有这个marge marge的话就是把你的这个数据称获

09:38.670 --> 09:43.310
不是也不是整个数据称获啊 就是你整个这个views是分成好几块

09:43.950 --> 09:48.030
啊 每一块里面然后有自己的state getter notation action

09:48.510 --> 09:51.310
对吧 但他最终的话会被合并成一个啊

09:53.150 --> 10:02.430
啊 这是views啊 单向数据流 单向数据源啊 只有一个store啊 然后可以直接对state进行一个修改

10:02.990 --> 10:06.030
他可以直接对state进修改 但是官方的话他不建议

10:06.510 --> 10:10.750
官方的话建议你所有的修改还是通过什么呢 还是通过这个motation

10:11.550 --> 10:14.910
对吧 通过这个motation去更新这个state

10:16.830 --> 10:21.470
啊 然后这个redux redux的话这个大家也是接触过的

10:22.030 --> 10:24.990
啊 这个大家应该是在学react的时候接触过的

10:25.550 --> 10:30.910
ok 啊 这个的话是一个最早是一个个人作者啊 叫这个啊 叫这个名字

10:31.230 --> 10:38.110
他在这个15年的时候创建的 他在创建这个创建之初的话 他其实就是受到了什么呢

10:38.110 --> 10:40.990
受到了这个flux架构的这个影响

10:41.790 --> 10:46.110
所以你看整个这个redux他的这个架构和flux

10:46.750 --> 10:50.670
他的这个架构其实是很相似的 说白了他就是在

10:51.470 --> 10:55.150
参考了flux的这个基础上 做了一些更新

10:56.110 --> 11:03.390
做了些什么更新的 我们来看一下啊 这边的话首先这个redux和flux有很多相似的地方

11:04.430 --> 11:10.510
但是不同的是 我们刚说这个flux他可以干嘛 他是不是有多个这个store倉库

11:11.150 --> 11:14.830
对吧 但是redux就不是redux的话只能有一个这个倉库

11:16.110 --> 11:20.750
好 其实这个redux的话他没有这个dispatcher的这个分发器的这个概念

11:21.310 --> 11:25.550
他没有啊 他这边呢是什么呢 他多出来了一个叫做reducer

11:26.430 --> 11:32.590
reducer 然后我数据的状态改变是在哪里改变的呢 是在这个reducer改变的

11:33.070 --> 11:39.710
ok 你看这边store调用这个reducer 通过reducer计算出新的这个state

11:40.350 --> 11:44.430
就和刚才这边不一样了 这边这个flux里面他就是什么

11:45.150 --> 11:53.790
store会触发相应的方法来更新这个数据 对吧 在store里面 他存放了一些这个更新状态的这个方法

11:56.110 --> 12:03.310
啊 这个redux啊redux 然后还有我看其他还有什么 这个其实大家应该很熟悉啊 这边我比如说这个仕图

12:04.270 --> 12:10.270
发生变化啊 然后接下来我会把变化交给什么 是不是交给一个叫做action这个creator

12:10.990 --> 12:12.910
啊 这个action creator 他是一个函数

12:13.550 --> 12:17.470
这个函数专门就是干嘛呢 专门就是生产action的

12:18.190 --> 12:23.710
对不对 生产action对象啊 这个action对象 然后生产完了之后 他就会被派发到哪里去

12:24.270 --> 12:26.350
是不是派发到这个reducer里面去啊

12:27.390 --> 12:34.270
对不对 派发到reducer 然后在reducer里面啊 计算出这个新的状态 计算出新的状态之后

12:34.350 --> 12:41.070
然后接下来给谁 是不给这个store 那store的话 然后接下来进行一个状态的更新

12:42.030 --> 12:51.710
对吧 进行一个状态的更新啊 关于这个redux 整体的话和flux价格很像 但是的话 他就是在这个flux的基础上

12:52.110 --> 12:58.830
做了一些这个修改啊 比如说仓库只能有一个啊 然后去除了之前的那个dispatcher

12:59.230 --> 13:02.510
增加了这个reducer 对吧 然后这个

13:03.710 --> 13:10.750
状态的改变是在reducer里面啊reducer改变了之后 然后派发给这个store okay 这是redux

13:12.190 --> 13:16.670
然后还有一个啊 就近几年的话 出现了一个新的叫做这个mobux

13:17.310 --> 13:22.110
这mobux的话我倒是没用过啊 但是这边让我们可以看一下它一个简单的这个介绍

13:22.910 --> 13:31.310
这个mobux 它是由这几家公司啊 这个什么mendix啊coinbase 还有这个facebook

13:32.270 --> 13:42.190
他们这个开源的这个状态管理这个的一个这个库啊 他背后的哲学是什么呢 任何源自应用状态的东西

13:43.310 --> 13:44.830
都应该自动的

13:45.630 --> 13:51.870
这个获得啊 也就是什么意思呢 也就是说 当这个状态他发生改变的时候

13:52.510 --> 13:59.070
所有应用到状态的地方会自动更新啊 也就是说他的话 他做了

13:59.630 --> 14:08.990
他的这个特点就是把那个响应室啊 把响应室加进去了啊 就是我这边状态一遍啊 你那边的话 就是用到我这个状态的这个仕途

14:09.390 --> 14:13.230
自动的话就更新了啊 那有的同学说 那我这个

14:13.790 --> 14:16.190
之前的vux和redux

14:16.750 --> 14:22.350
他不也是这个状态变了之后 然后自动就更新了吗 其实不是啊 你比如说你这个redux

14:22.750 --> 14:25.230
redux 你里面你的这个状态

14:25.790 --> 14:32.270
发生更新之后 然后是谁来更改这个仕途的 是react来更这个更改仕途的

14:33.070 --> 14:38.670
对吧啊vux里面也一样 vux里面你的这个状态发生改变了之后 然后是we

14:39.230 --> 14:41.150
vue里面的响应室系统

14:42.110 --> 14:44.190
来做的什么呢 来做的这个仕途的更新

14:44.990 --> 14:50.030
也就是说他其实和裤没有太大的关系 就是和这个状态管理的裤没有太大的关系

14:50.830 --> 14:54.910
状态管理的裤只负责什么 只负责管理状态

14:55.630 --> 15:03.390
你所有的组建的状态在我这里管理 然后回头你变了 你跟我说一声 然后这样我这边的话 我的仓库里面的这个状态 我把它变了

15:04.270 --> 15:08.750
对吧 至于我变了之后对应的这个仕途要改变 是由谁来做的

15:08.990 --> 15:10.510
是由vue和react

15:11.230 --> 15:17.870
来做的 但是这个mobux呢 他这边他的哲学就是 他觉得这边这个状态发生改变的时候

15:18.350 --> 15:22.030
那你用到这个状态的地方 那就应该自动更新

15:22.430 --> 15:26.910
也就是说现在的话 我这个状态管理裤我要来做这个更新的这个操作

15:27.710 --> 15:30.030
对吧 他应该的话就是把那个响应室

15:30.510 --> 15:31.070
加进去了

15:31.710 --> 15:38.350
我们这边来看一下啊 你看他这边通过响应室函数 对吧 而来实现状态的存储和管理

15:39.070 --> 15:46.670
好 然后接下来的话 受到面向对象编程和响应室编程的影响 他可以将这个状态包装成可观察对象

15:47.150 --> 15:49.310
然后就要对这个仕途进行那个更新

15:50.030 --> 15:56.190
也就是说你之前的裤 你之前的这个flux vuex redux 他们只做了哪一步呢 他们只做了这一步

15:57.630 --> 15:58.670
他们是不是只做了这一步啊

15:59.550 --> 16:01.230
啊 就这一步嘛 框多了啊

16:01.870 --> 16:08.270
就只做了这一步 怎么了 就是我对这个状态进行一个存储 我对状态进行一个管理

16:09.150 --> 16:15.230
mobux 然后接下来再做到这一步的基础上 他还做到了哪一步 他还做到了这一步

16:16.430 --> 16:20.590
对吧 这一步以前的话是由这个你各自的 比如说vue

16:21.630 --> 16:27.630
vue或者react来做的 但是这边呢 现在这个mobux的话 他这边呢 他是不是就是多了这一步

16:28.510 --> 16:31.070
对不对啊 就这么一个意思 okay

16:32.030 --> 16:37.470
好 然后这边下面的话是他的一些核心的这个概念啊 这个大家下来可以自己看一下

16:38.350 --> 16:47.310
啊 你这边你具体要学习这个mobux的时候啊 你这边再去这个专业他啊 不是说我这边给你介绍了这个社会库

16:47.870 --> 16:54.990
啊 那你这四个的话你都要去学 不是这样子的啊 我经常就是给同学们讲 就是咱们程序员这一行

16:55.470 --> 17:00.830
就是学东西是学不完的啊 一会就出现一个新东西 一会就出现一个新东西

17:01.310 --> 17:07.390
你哪学的过来 对不对 那这边的话 我们程序员的话其实就是要做到什么呢 就是这个东西我不会可以

17:08.030 --> 17:10.350
啊 但是呢 我要知道有这个东西

17:11.470 --> 17:17.470
明白吧啊 我们程序员的话经常你会发现就是越到后面啊 你就是你这个体会越深

17:17.950 --> 17:20.830
就是我们往往不怕就是什么呢 不怕什么东西我不会

17:21.790 --> 17:28.430
ok 就什么东西我不会 我一点都不怕啊 因为现在的话网上各种各样的教程啊 还有就是官网的文档

17:28.990 --> 17:34.750
对吧 我不会的话 我就看他官方的文档 大家看这个网上各种教程 我去学就可以了

17:34.990 --> 17:37.870
我们程序员最怕的是什么呢 最怕的是我不知道这个东西

17:38.750 --> 17:42.510
啊 我要跟我听都没听过我不知道这个东西 这一点是最怕的

17:43.070 --> 17:46.030
是吧 而不是说什么东西 我不会这一点都不可怕

17:46.830 --> 17:51.630
明白吧 啊 说说我经常我讲课的时候我就习惯于就是尽量给你多介绍一点

17:52.110 --> 17:56.270
啊 比如说状态管理库 那我会给你介绍就是市面上还有哪些

17:56.750 --> 18:01.470
状态管理库 对吧 你现在让你不会他没关系 但是你知道有这么一个东西

18:01.950 --> 18:07.630
啊 不至于都是别人一说到的之后 然后你就一脸蒙蔽听都没听过啊 不至于这个样子

18:08.510 --> 18:09.790
没有没有啊 ok

18:10.990 --> 18:16.910
啊 这个mobux啊 这mobux我也没用过啊 这边这个核心概念这些这些就不说了啊 包括他这边特点

18:16.990 --> 18:21.630
他特别的 他这个特点的话 这边这两个啊 首先他是基于这个面向对象的

18:22.750 --> 18:29.230
特别啊 基于面向对象啊 大家他可以有多个这个猖狂 那他就和那个flux一样

18:29.950 --> 18:33.950
flux刚才我们讲的时候 他刚推出的时候是不是也是多个猖狂

18:34.830 --> 18:40.190
对吧啊 那个vux和redux 他们是什么 他们是不是单个猖狂

18:41.310 --> 18:48.510
对吧 好 最后的话 这边总结一下啊 这边flux redux vux 他们都是单向数据流

18:49.470 --> 18:57.550
那也就说这个mobux他不是的 他不是单向数据流 对吧 好 那这个redux和vux他是基于这个flux的

18:58.270 --> 19:05.230
因为flux是最早的这个啊 状态管理的这个裤啊 然后这个redux他叫为范用

19:05.790 --> 19:08.750
啊 这个的话 之前你在听这个redux的课的时候 你应该知道

19:09.390 --> 19:13.790
redux他不是说只能用到react里面 我把它用到vue里面可不可以

19:14.350 --> 19:17.630
也可以 只不过vue他有官方的这个状态管理裤

19:18.110 --> 19:23.470
是吧 所以一般也不会用第三方的啊 我把它用到比如说angline里面可不可以可以

19:24.030 --> 19:26.190
啊 所以这个redux

19:26.990 --> 19:38.110
他是比较范用的啊 然后这个flux和mobux他是有可以有多个猖狂啊 这个redux和vux他们就只能有一个这个猖狂

19:38.830 --> 19:46.830
ok啊 然后redux vux是和大型项目管理啊mobux在大型项目里面可能他的可维护性要差一些

19:47.390 --> 19:49.550
还有些其他的 先来自己看一下

19:50.350 --> 19:58.430
好吧啊 这节课的话我们就简单介绍一下这个关于这个状态管理啊 什么是状态管理 状态管理的概念是什么

19:58.910 --> 20:03.390
啊 以及常见的一些状态管理的这个库有了一些 ok

20:03.950 --> 20:07.550
那我们到时候我们在rn里面我们用什么呢 我们还是用这个

20:08.350 --> 20:10.510
ok 我们还是用这个用这个redux

20:10.990 --> 20:15.470
redux我下来我看了一下啊 和我之前最早接触这个redux的话

20:15.870 --> 20:18.030
他的这个api就又发生改变了

20:18.910 --> 20:22.750
知道吧 又发生改变了啊 所以我们回头让我们把这个redux我们把它看一下

20:23.390 --> 20:27.550
好吧 ok啊 这节课就先到这里啊 再见

