WEBVTT

00:00.180 --> 00:02.180
Hello 大家好啊

00:02.180 --> 00:06.180
这一集我们来说一些特殊的一些情况

00:06.180 --> 00:10.180
昨天上节课我们只说了一个微杠杠扮的一个普通的情况

00:10.180 --> 00:13.180
就是后面直接是这种直的

00:13.180 --> 00:15.180
那我们这一集来说一种复杂的

00:15.180 --> 00:17.180
就是我们这个戴个样式

00:17.180 --> 00:20.180
那我这个戴个样式 这个时候怎么办

00:20.180 --> 00:21.180
戴个样式

00:21.180 --> 00:25.180
那我在这个页面上我写点特殊的吧

00:25.180 --> 00:28.180
我写点特殊的吧 来一个Span

00:29.180 --> 00:33.740
随着咱们这个课程往后

00:35.740 --> 00:37.740
那这个页面上的这个东西也越来越多了

00:37.740 --> 00:38.740
复杂了起来

00:38.740 --> 00:40.740
到现在为止它还是好使的 对吧

00:40.740 --> 00:42.740
来个我的天

00:43.740 --> 00:45.740
我的天

00:45.740 --> 00:46.740
再来一个

00:47.740 --> 00:48.740
我的地

00:54.830 --> 00:55.830
我的地

00:55.830 --> 00:57.830
然后这个我的天我给它绑定一个属性

00:57.830 --> 00:58.830
看好了

00:58.830 --> 01:00.830
这个VGAR BAND

01:00.830 --> 01:02.830
VGAR BAND class

01:05.830 --> 01:06.830
VGAR BAND class

01:06.830 --> 01:07.830
给它绑定个什么的

01:07.830 --> 01:08.830
绑定的那个哈哈

01:09.830 --> 01:11.830
咱们写个样式

01:11.830 --> 01:12.830
写个样式

01:12.830 --> 01:14.830
stale

01:14.830 --> 01:16.830
点哈哈

01:16.830 --> 01:18.830
配点red

01:20.830 --> 01:21.830
color

01:22.830 --> 01:23.830
red

01:23.830 --> 01:25.830
给它设置个字体

01:25.830 --> 01:27.830
然后我们来一个属性

01:31.040 --> 01:33.040
只是red

01:35.990 --> 01:36.990
这个哈哈

01:36.990 --> 01:38.990
我让这个我的天

01:38.990 --> 01:40.990
用我们这个哈哈这个属性

01:40.990 --> 01:42.990
然后这个哈哈的属性

01:42.990 --> 01:43.990
只是红的

01:43.990 --> 01:44.990
我们来看一下

01:44.990 --> 01:46.990
能不能显示的出来

01:46.990 --> 01:48.990
然后这边再添一个VGAR BAND

01:55.010 --> 01:56.010
是吧

01:56.010 --> 01:57.010
我的天是红的

01:57.010 --> 01:59.010
没啥问题是吧

02:00.010 --> 02:01.010
然后再看到这个我的地

02:01.010 --> 02:02.010
我写个复杂点的

02:02.010 --> 02:03.010
咱们玩个复杂点

02:03.010 --> 02:05.010
马上简单就没意思了

02:06.010 --> 02:07.010
VGAR BAND

02:07.010 --> 02:08.010
冒号

02:08.010 --> 02:09.010
class

02:10.010 --> 02:11.010
也不一定有多复杂

02:11.010 --> 02:12.010
就一般的

02:13.010 --> 02:14.010
好了

02:14.010 --> 02:15.010
red对吧

02:15.010 --> 02:16.010
冒号

02:16.010 --> 02:17.010
什么情况下成立呢

02:17.010 --> 02:18.010
ob接点x

02:20.010 --> 02:21.010
小于2

02:24.010 --> 02:26.010
这个复杂了吧

02:26.010 --> 02:27.010
是吧

02:27.010 --> 02:28.010
这个复杂了

02:28.010 --> 02:29.010
这回我这个东西

02:29.010 --> 02:30.010
应该就不好使了

02:30.010 --> 02:31.010
它就猛了

02:31.010 --> 02:32.010
是吧

02:32.010 --> 02:33.010
我刷新了一下

02:33.010 --> 02:34.010
它普通

02:34.010 --> 02:35.010
它不识别这种愚法

02:36.010 --> 02:37.010
它不识别这种愚法

02:37.010 --> 02:38.010
为啥

02:38.010 --> 02:39.010
它也不是个属性值

02:39.010 --> 02:40.010
我去guide value的时候

02:40.010 --> 02:41.010
这种值我也guide不到

02:41.010 --> 02:42.010
对吧

02:42.010 --> 02:43.010
我guide不到

02:43.010 --> 02:44.010
我怎么来执行

02:44.010 --> 02:45.010
是吧

02:45.010 --> 02:46.010
没有办法

02:47.010 --> 02:48.010
我用的这个

02:48.010 --> 02:49.010
得是中文

02:49.010 --> 02:50.010
得是英文

02:50.010 --> 02:51.010
我看是不是英文

02:51.010 --> 02:52.010
我再重新输入一下

02:55.010 --> 02:56.010
那这种时候

02:56.010 --> 02:57.010
我们愚法该怎么写

02:57.010 --> 02:58.010
这种时候

02:58.010 --> 02:59.010
我们代码该怎么写

02:59.010 --> 03:01.010
才能把这个东西给分析出来

03:01.010 --> 03:02.010
这个时候

03:02.010 --> 03:04.010
就稍微会复杂一些

03:05.010 --> 03:06.010
这就要复杂一些了

03:06.010 --> 03:07.010
看

03:07.010 --> 03:08.010
我们这一节课

03:08.010 --> 03:09.010
应该是

03:09.010 --> 03:11.010
一节不好讲完的

03:11.010 --> 03:13.010
我们可能要分几节来讲

03:13.010 --> 03:14.010
首先看这个

03:14.010 --> 03:15.010
微杠办的

03:15.010 --> 03:16.010
我要首先看

03:16.010 --> 03:17.010
它是不是带愚法结构的

03:17.010 --> 03:18.010
如果没有花光号

03:18.010 --> 03:19.010
这种隐着的

03:19.010 --> 03:21.010
它就是去访问一个别量

03:21.010 --> 03:23.010
那我们有花光号隐着的

03:23.010 --> 03:24.010
才特殊

03:24.010 --> 03:25.010
那我们来判断一下花光号

03:27.010 --> 03:28.010
那我们上几个写的

03:28.010 --> 03:29.010
这种数源

03:29.010 --> 03:30.010
是iOS里的这种情况

03:30.010 --> 03:31.010
是吧

03:31.010 --> 03:32.010
不带花光号

03:33.010 --> 03:34.010
带花光号怎么写

03:34.010 --> 03:35.010
郑则呗

03:35.010 --> 03:36.010
对吧

03:36.010 --> 03:37.010
郑则以什么为开始的

03:37.010 --> 03:38.010
以G2为开始的

03:38.010 --> 03:40.010
以什么为结束的

03:42.010 --> 03:43.010
刀刃符

03:43.010 --> 03:45.010
一顿花光号

03:45.010 --> 03:47.010
这就代表用花光号扩着的

03:47.010 --> 03:48.010
这个里面随便

03:49.010 --> 03:52.470
自符

03:52.470 --> 03:53.470
非自符

03:54.470 --> 03:55.470
都可以

03:55.470 --> 03:56.470
多个

03:58.470 --> 03:59.470
这样的

03:59.470 --> 04:00.470
Test

04:00.470 --> 04:01.470
Value

04:01.470 --> 04:02.470
就是有模板的

04:02.470 --> 04:03.470
否则的情况下

04:03.470 --> 04:04.470
就是没有模板的

04:05.470 --> 04:06.470
有模板的怎么办

04:06.470 --> 04:07.470
有模板的怎么办

04:07.470 --> 04:08.470
首先

04:08.470 --> 04:09.470
我要把这里面的内容

04:09.470 --> 04:10.470
先给它弄出来

04:10.470 --> 04:11.470
对吧

04:11.470 --> 04:12.470
我先把它里面的

04:12.470 --> 04:13.470
这个东西给它弄出来

04:15.470 --> 04:16.470
把这个花光号

04:16.470 --> 04:17.470
相当于给它驱掉

04:17.470 --> 04:18.470
Light

04:18.470 --> 04:19.470
一个STR

04:19.470 --> 04:20.470
等于

04:20.470 --> 04:22.470
Value.substream

04:24.470 --> 04:25.470
跳过开头

04:26.470 --> 04:29.100
跳过结尾

04:30.100 --> 04:31.100
最后

04:31.100 --> 04:32.100
大家别忘了

04:32.100 --> 04:33.100
点Trim

04:33.100 --> 04:34.100
为啥

04:34.100 --> 04:35.100
因为它有的时候

04:35.100 --> 04:37.100
这块会写了很多的控制

04:37.100 --> 04:38.100
这样这种地方

04:38.100 --> 04:39.100
它会写控制

04:39.100 --> 04:40.100
看到没有

04:40.100 --> 04:41.100
这块有个控制

04:41.100 --> 04:42.100
不Trim的话

04:42.100 --> 04:43.100
就带着控制

04:43.100 --> 04:44.100
这块

04:44.100 --> 04:45.100
其实不Trim

04:45.100 --> 04:46.100
反正也没什么大问题

04:46.100 --> 04:47.100
但是为了

04:47.100 --> 04:48.100
规范

04:48.100 --> 04:49.100
为了避免一些问题

04:49.100 --> 04:51.100
我们尽量Trim

04:53.100 --> 04:54.100
为了避免一些问题

04:54.100 --> 04:55.100
我们尽量Trim

04:57.100 --> 04:58.100
然后

04:58.100 --> 04:59.100
我们来

04:59.100 --> 05:00.100
试验一下

05:00.100 --> 05:01.100
来看一下

05:01.100 --> 05:02.100
后面的这些东西

05:02.100 --> 05:04.100
如果有两个的话

05:04.100 --> 05:06.100
比如说有两个的话

05:06.100 --> 05:07.100
豆号

05:08.100 --> 05:09.100
Bulu

05:09.100 --> 05:10.100
帽号

05:10.100 --> 05:12.100
OBGA的

05:12.100 --> 05:13.100
X

05:13.100 --> 05:14.100
大圆

05:15.100 --> 05:16.100
是吧

05:16.100 --> 05:18.100
这个比刚才更复杂一点的

05:18.100 --> 05:19.100
咱们就玩这种

05:20.100 --> 05:24.400
Color

05:25.400 --> 05:26.400
Bulu

05:29.400 --> 05:30.400
这样的话

05:30.400 --> 05:31.400
它的颜色会

05:31.400 --> 05:33.400
再变一下

05:33.400 --> 05:34.400
然后看

05:34.400 --> 05:35.400
它变了是吧

05:36.400 --> 05:37.400
Bulu

05:37.400 --> 05:38.400
帽号

05:38.400 --> 05:39.400
然后

05:39.400 --> 05:40.400
各种属性之间

05:40.400 --> 05:41.400
能用的是

05:41.400 --> 05:42.400
豆号隔开是吧

05:42.400 --> 05:44.400
我们现在是在用

05:44.400 --> 05:45.400
豆号隔开

05:46.400 --> 05:47.400
然后我们先用豆号

05:47.400 --> 05:48.400
来进行拆分

05:49.400 --> 05:50.400
它用豆号隔开了

05:50.400 --> 05:51.400
我们就先得用豆号

05:51.400 --> 05:52.400
来进行拆分

05:52.400 --> 05:53.400
light一个

05:55.400 --> 05:56.400
light一个

05:56.400 --> 05:57.400
axi

05:59.400 --> 06:00.400
list

06:02.400 --> 06:03.400
表达是

06:04.400 --> 06:06.400
表达是的一个结合

06:06.400 --> 06:07.400
split

06:07.400 --> 06:08.400
豆号

06:11.930 --> 06:13.930
我们先把它用豆号

06:13.930 --> 06:14.930
给拆分开

06:14.930 --> 06:15.930
先把它用豆号

06:15.930 --> 06:16.930
拆分开

06:16.930 --> 06:17.930
然后

06:17.930 --> 06:19.930
我希望干一件事

06:19.930 --> 06:20.930
就是

06:20.930 --> 06:22.930
解析表达是

06:26.240 --> 06:27.240
annually

06:27.240 --> 06:28.240
says

06:29.240 --> 06:30.240
expressions

06:31.240 --> 06:32.240
annuallysays

06:32.240 --> 06:33.240
expressions

06:33.240 --> 06:34.240
vm

06:34.240 --> 06:35.240
vnode

06:35.240 --> 06:37.240
expressions

06:37.240 --> 06:38.240
list

06:40.240 --> 06:42.240
我们来解析这个表达是

06:42.240 --> 06:43.240
这是个表达是的结合

06:43.240 --> 06:44.240
我们来解析

06:44.240 --> 06:46.240
然后解析了之后

06:46.240 --> 06:47.240
我希望能够

06:47.240 --> 06:48.240
light一个

06:48.240 --> 06:49.240
result

06:49.240 --> 06:50.240
等于

06:50.240 --> 06:51.240
annuallysays

06:53.240 --> 06:54.240
expression

06:54.240 --> 06:55.240
vm

06:55.240 --> 06:56.240
vnode

06:56.240 --> 06:57.240
expression list

06:59.240 --> 07:01.240
这是一个表达是的结合

07:01.240 --> 07:02.240
对吧

07:02.240 --> 07:03.240
然后

07:03.240 --> 07:04.240
vnode

07:04.240 --> 07:05.240
elm

07:07.240 --> 07:08.240
side of tribute

07:10.550 --> 07:11.550
就给它

07:11.550 --> 07:13.550
设置这些属性就得了

07:13.550 --> 07:15.550
它有一堆表达是吧

07:15.550 --> 07:17.550
这个表达是最后会有一个结果

07:17.550 --> 07:19.550
我就给它设置这个结果就得了

07:19.550 --> 07:21.550
一个是key

07:21.550 --> 07:23.550
一个是result

07:23.550 --> 07:25.550
反正我不管

07:25.550 --> 07:27.550
我最后要的就是一个结果

07:27.550 --> 07:29.550
我不管的是这个里面

07:29.550 --> 07:30.550
你后面写了多大串

07:30.550 --> 07:31.550
不管我最后要的

07:31.550 --> 07:33.550
就是我class等于啥

07:33.550 --> 07:35.550
我要的就是class等于啥

07:35.550 --> 07:36.550
对吧

07:38.550 --> 07:39.550
我们result

07:39.550 --> 07:41.550
就希望解析出来的

07:41.550 --> 07:43.550
就是class等于啥

07:43.550 --> 07:44.550
是吧

07:44.550 --> 07:46.550
我们这回就把这个矛头集中在这里

07:46.550 --> 07:48.550
集中在这个方法里

07:48.550 --> 07:49.550
你会发现

07:49.550 --> 07:50.550
我们写这个代码都是

07:50.550 --> 07:52.550
一层解决一个小问题

07:52.550 --> 07:54.550
一层解决一个小问题

07:54.550 --> 07:56.550
层层地进

07:56.550 --> 07:58.550
然后我们最后把这个小问题

07:58.550 --> 08:00.550
一个个的给解决

08:00.550 --> 08:02.550
然后现在我需要

08:02.550 --> 08:04.550
两个东西

08:04.550 --> 08:06.550
你看它这里面在执行

08:06.550 --> 08:07.550
这里面在执行

08:07.550 --> 08:08.550
它用的啥

08:08.550 --> 08:09.550
obg.x

08:09.550 --> 08:10.550
正大的是吧

08:10.550 --> 08:11.550
一个我需要啥

08:11.550 --> 08:13.550
一个时候我需要的是这个变量

08:13.550 --> 08:14.550
是吧

08:14.550 --> 08:15.550
我得要这个变量

08:15.550 --> 08:17.550
把变量给我弄出

08:17.550 --> 08:18.550
把变量给我弄出

08:18.550 --> 08:19.550
因为这个变量

08:19.550 --> 08:21.550
有我这个

08:21.550 --> 08:22.550
全举的

08:22.550 --> 08:24.550
整个这个ve的对象的变量

08:24.550 --> 08:25.550
还有什么

08:25.550 --> 08:26.550
还有如果我这个东西

08:26.550 --> 08:28.550
是在这个least的里面

08:28.550 --> 08:30.550
那还有我当前的这个变量

08:30.550 --> 08:31.550
是吧

08:31.550 --> 08:32.550
我还有可能有当前的变量

08:32.550 --> 08:34.550
那我要把这个变量弄出

08:34.550 --> 08:40.990
获取当前环境的变量

08:40.990 --> 08:42.990
这是第一个

08:42.990 --> 08:44.990
获取出来变量了之后

08:44.990 --> 08:46.990
然后怎么办

08:46.990 --> 08:49.990
你会发现这段是什么

08:49.990 --> 08:51.990
这个是一个成效的是吧

08:51.990 --> 08:53.990
其实就是判断的一个衣服

08:53.990 --> 08:54.990
是吧

08:54.990 --> 08:55.990
其实就是一个衣服条件

08:55.990 --> 08:56.990
是吧

08:56.990 --> 08:57.990
就是一个衣服条件

08:57.990 --> 09:00.990
我要判断这个表达是成不成立

09:00.990 --> 09:01.990
我要判断的是不是

09:01.990 --> 09:03.990
就是这个表达是成不成立

09:03.990 --> 09:05.990
然后我要做一个东西

09:05.990 --> 09:09.990
就是来判断

09:09.990 --> 09:15.990
判断表达是否成立

09:15.990 --> 09:17.990
判断这个表达是否成立

09:17.990 --> 09:20.990
然后我们就可以来怎么样了

09:20.990 --> 09:22.990
来这个

09:22.990 --> 09:23.990
我看一下

09:23.990 --> 09:25.990
扣的

09:25.990 --> 09:30.300
表达是否成立

09:30.300 --> 09:33.300
然后我们就来拼组

09:33.300 --> 09:36.300
拼组

09:36.300 --> 09:38.300
result

09:38.300 --> 09:40.300
然后我们就来拼组这个result

09:40.300 --> 09:42.300
这么三个步骤

09:42.300 --> 09:44.300
其实每一个步骤都挺难

09:44.300 --> 09:46.300
每一个步骤都不是很简单的

09:46.300 --> 09:49.300
那我们挨个来做一下吧

09:49.300 --> 09:51.300
首先来第1个

09:51.300 --> 09:55.300
获取当前环境变量

09:56.300 --> 09:58.300
就相当于是我要用一个对象

09:58.300 --> 10:00.300
我要有这个对象做这个属性

10:00.300 --> 10:01.300
我希望是

10:07.300 --> 10:09.300
然后我只需要给他传进去

10:09.300 --> 10:11.300
我当前的整个的对象

10:11.300 --> 10:13.300
以及当前的节点就可以

10:13.300 --> 10:15.300
我希望通过这个方法能够弄到

10:15.300 --> 10:20.300
然后我建立一个工具吧

10:20.300 --> 10:24.300
我想想在哪儿建比较合适

10:24.300 --> 10:27.300
是在Object有调理

10:31.870 --> 10:33.870
来一个xpart

10:33.870 --> 10:35.870
方个审

10:35.870 --> 10:37.870
一个vm

10:37.870 --> 10:38.870
一个vnode

10:38.870 --> 10:42.870
如何能够把这个变量给它组合起来

10:42.870 --> 10:43.870
其实这个很简单

10:43.870 --> 10:45.870
咱们之前就写了这个方法了

10:45.870 --> 10:48.870
light一个result等于什么

10:48.870 --> 10:50.870
merge ATTR

10:50.870 --> 10:51.870
那么合并

10:51.870 --> 10:53.870
vm的下滑线data

10:53.870 --> 10:57.870
vnode的nv

10:59.870 --> 11:01.870
是不是简单吗

11:01.870 --> 11:04.870
因为之前咱们写过这个merge ATTR

11:04.870 --> 11:06.870
所以这个感觉简单了

11:06.870 --> 11:08.870
然后light一个result

11:09.870 --> 11:12.870
等于merge ATTR

11:12.870 --> 11:14.870
刚才的这个result

11:14.870 --> 11:16.870
这不用再light了

11:17.870 --> 11:19.870
result

11:19.870 --> 11:21.870
vm的下滑线

11:21.870 --> 11:23.870
computed

11:23.870 --> 11:25.870
咱们现在还没有computed

11:25.870 --> 11:26.870
是吧

11:26.870 --> 11:28.870
还没写这些额外的这些属性的

11:28.870 --> 11:30.870
咱们先把这些都给加上

11:30.870 --> 11:32.870
你要需要什么就加

11:32.870 --> 11:33.870
这会meister

11:33.870 --> 11:34.870
computed

11:34.870 --> 11:36.870
你就需要什么你就往上加

11:36.870 --> 11:38.870
然后我就先加这么一个东西

11:38.870 --> 11:43.500
returnresult

11:43.500 --> 11:45.500
return一个result

11:46.500 --> 11:48.500
这样的话这个东西就放在这了

11:48.500 --> 11:49.500
对吧

11:49.500 --> 11:50.500
就放在这

11:51.500 --> 11:52.500
好

11:53.500 --> 11:54.500
这个情况来了之后

11:54.500 --> 11:56.500
然后我们看一下该怎么弄

11:57.500 --> 11:59.500
该的ATTR

11:59.500 --> 12:01.500
把这个东西倒进去

12:01.500 --> 12:05.900
倒号控制

12:05.900 --> 12:06.900
它是个工具

12:06.900 --> 12:07.900
所以在哪东西

12:07.900 --> 12:08.900
这样的话

12:08.900 --> 12:10.900
我们能拿到这个ATTR

12:10.900 --> 12:11.900
是吧

12:11.900 --> 12:13.900
我们就可以拿到这个ATTR

12:13.900 --> 12:14.900
其实我们之后

12:14.900 --> 12:16.900
还会再给最后加上

12:16.900 --> 12:18.900
computed measures

12:18.900 --> 12:20.900
然后可锐的方法

12:20.900 --> 12:22.900
然后这些往里面判断参数的时候

12:22.900 --> 12:24.900
我们现在都没有往上添

12:24.900 --> 12:26.900
之后你需要什么

12:26.900 --> 12:27.900
你往上添什么就行

12:27.900 --> 12:29.900
需要什么往上添什么就行

12:29.900 --> 12:31.900
我们现在先把架子打起来

12:31.900 --> 12:32.900
架子打起来之后

12:32.900 --> 12:33.900
以后需要什么

12:33.900 --> 12:34.900
你就自己往上添

12:34.900 --> 12:35.900
就会变得很容易

12:37.900 --> 12:40.900
然后判断表达是否成立

12:40.900 --> 12:41.900
你说这个怎么判断

12:41.900 --> 12:46.540
判断表达是否成立

12:47.540 --> 12:48.540
你说

12:49.540 --> 12:51.540
我来解析一下中间的符号

12:51.540 --> 12:52.540
鱼还是大鱼号

12:52.540 --> 12:53.540
还是小鱼号

12:54.540 --> 12:55.540
把前面这个

12:55.540 --> 12:57.540
后面这个都把它变成

12:58.540 --> 12:59.540
直是吧

13:00.540 --> 13:01.540
我先把这个直提取出来

13:01.540 --> 13:02.540
再判断这个是大鱼号

13:02.540 --> 13:04.540
还是小鱼号

13:04.540 --> 13:06.540
然后再把后面那个直提取出来

13:07.540 --> 13:08.540
然后有的时候你还得判断

13:08.540 --> 13:09.540
这后面这个是直吗

13:09.540 --> 13:10.540
你看这个

13:10.540 --> 13:11.540
这个二是个直

13:11.540 --> 13:12.540
它什么都不是

13:12.540 --> 13:13.540
是吧

13:13.540 --> 13:14.540
这块还有可能我写给你表达

13:14.540 --> 13:15.540
是

13:15.540 --> 13:16.540
我还给你写个复杂点的

13:16.540 --> 13:17.540
二加一

13:17.540 --> 13:19.540
你就说你怎么判断

13:20.540 --> 13:21.540
不好判断

13:21.540 --> 13:22.540
是吧

13:22.540 --> 13:23.540
根本就不好判断

13:24.540 --> 13:26.540
所以这种情况还怎么办

13:26.540 --> 13:27.540
所以人家才有编译

13:27.540 --> 13:28.540
对吧

13:28.540 --> 13:29.540
人编译院里

13:29.540 --> 13:30.540
它可以识别你的整个GS

13:30.540 --> 13:32.540
可以编译你的GS

13:32.540 --> 13:33.540
然后再执行

13:33.540 --> 13:34.540
是吧

13:34.540 --> 13:35.540
所以他们要写一个

13:35.540 --> 13:36.540
非常复杂的编译器

13:36.540 --> 13:38.540
但是咱们要想不写编译器

13:38.540 --> 13:40.540
用一种简单的方式

13:40.540 --> 13:41.540
给他做出来

13:41.540 --> 13:42.540
怎么做

13:43.540 --> 13:44.540
用一个简单的方式

13:44.540 --> 13:45.540
给他做出来

13:45.540 --> 13:46.540
你看

13:46.540 --> 13:48.540
这一块代码我能取出来

13:49.540 --> 13:50.540
回来

13:50.540 --> 13:52.540
这一块代码我能取出来

13:54.540 --> 13:55.540
站在这

13:55.540 --> 13:56.540
是吧

13:56.540 --> 13:58.540
我给他组成一个执行环境

13:58.540 --> 13:59.540
我给他组成一个执行环境

13:59.540 --> 14:01.540
组成一个什么执行环境呢

14:01.540 --> 14:02.540
就是衣服

14:03.540 --> 14:04.540
这个

14:05.540 --> 14:11.620
return處

14:13.620 --> 14:14.620
是吧

14:15.620 --> 14:16.620
else

14:17.620 --> 14:18.620
return

14:18.620 --> 14:19.620
force

14:19.620 --> 14:20.620
是吧

14:20.620 --> 14:21.620
我给他写好一块代码

14:21.620 --> 14:22.620
然后

14:22.620 --> 14:23.620
这一块代码

14:23.620 --> 14:25.620
然后只有这一块代码

14:25.620 --> 14:26.620
怎么样

14:26.620 --> 14:27.620
我写好一块代码

14:27.620 --> 14:28.620
只有这一块的代码

14:28.620 --> 14:29.620
让人添进来

14:29.620 --> 14:31.620
然后怎么执行

14:31.620 --> 14:33.620
比如说这块是一串代码

14:33.620 --> 14:35.620
这块现在是一串代码

14:46.510 --> 14:48.510
这块现在是一串代码

14:48.510 --> 14:57.710
那你说这串代码怎么执行

15:01.940 --> 15:02.940
这串代码怎么执行

15:02.940 --> 15:03.940
是不是

15:03.940 --> 15:04.940
Evo

15:04.940 --> 15:05.940
就执行了

15:06.940 --> 15:07.940
是吧

15:07.940 --> 15:08.940
Evo就执行了

15:08.940 --> 15:09.940
然后我就能获取到了

15:09.940 --> 15:10.940
是吧

15:10.940 --> 15:12.940
我用这样的类似于这样的方式

15:12.940 --> 15:15.940
我要构建一个执行环境

15:15.940 --> 15:17.940
我要构建一个执行环境

15:17.940 --> 15:19.940
我希望可以有一个方法

15:19.940 --> 15:21.940
我希望可以我们生成一个方法

15:21.940 --> 15:23.940
比如说generate code

15:23.940 --> 15:24.940
light a code

15:24.940 --> 15:27.940
生成一个generate code

15:28.940 --> 15:31.940
generate code的这个方法

15:31.940 --> 15:34.940
把我们 ATTR 传进去

15:34.940 --> 15:36.940
刚才属性传进去

15:36.940 --> 15:39.940
就可以由我们刚才这个环境

15:39.940 --> 15:42.940
就可以由刚才我们以上的部分的环境

15:42.940 --> 15:44.940
然后我们再来

15:45.940 --> 15:47.940
再来搞下面的代码

15:47.940 --> 15:49.940
然后我们再来搞下面的代码

15:50.940 --> 15:52.940
我们来看一下这种东西该怎么写

15:52.940 --> 15:54.940
那我们新建一个

15:59.730 --> 16:00.730
新建一个

16:01.730 --> 16:02.730
code

16:03.730 --> 16:04.730
这个代码最后相当于怎么样的

16:04.730 --> 16:06.730
就像我刚才这样的代码

16:06.730 --> 16:07.730
我在这里面就直接写了

16:07.730 --> 16:08.730
比如说Evo

16:09.730 --> 16:10.730
这个是吧

16:10.730 --> 16:11.730
但是这个时候

16:12.730 --> 16:14.730
比如说我在上面这个

16:19.540 --> 16:20.540
一个什么

16:20.540 --> 16:21.540
bore一个

16:21.540 --> 16:22.540
flag

16:25.490 --> 16:26.490
等于first

16:31.910 --> 16:33.910
然后如果它成立了

16:33.910 --> 16:35.910
我就让flag等于初

16:36.910 --> 16:38.910
如果不成立

16:38.910 --> 16:40.910
我就让flag等于first

16:41.910 --> 16:42.910
是吧

16:42.910 --> 16:44.910
然后最后我就看flag

16:44.910 --> 16:46.910
成不成立就行了

16:46.910 --> 16:48.910
我就看flag成不成立就行了

16:49.910 --> 16:51.910
然后但是这个obgix没有

16:51.910 --> 16:52.910
是吧

16:52.910 --> 16:54.910
所以我前面得构建一些东西是吧

16:54.910 --> 16:57.910
比如说构建一个vore一个obgi

16:57.910 --> 16:58.910
等于什么

16:59.910 --> 17:00.910
我得构建这种东西是吧

17:00.910 --> 17:02.910
那你说这种环境面料哪来呀

17:02.910 --> 17:04.910
这种环境面料哪来呀

17:04.910 --> 17:06.910
我们把这块现在全都注尸掉

17:07.910 --> 17:08.910
这种环境面料

17:10.910 --> 17:11.910
是不是就从这来

17:11.910 --> 17:14.910
就从这个跟我们传进传东西的这个地方来是吧

17:14.910 --> 17:16.910
刚才他拿出来了环境面料

17:16.910 --> 17:19.910
刚才是不是在这个里面取出来的环境面料是吧

17:19.910 --> 17:21.910
给我组装成一个对象

17:21.910 --> 17:23.910
那我现在就要把这个对象给解析开

17:23.910 --> 17:26.910
把它给解析成代码的形式给它写上来

17:26.910 --> 17:28.910
那这个过程如何解析

17:28.910 --> 17:30.910
这是一套这样的算法

17:30.910 --> 17:32.910
我们下一节课来说

17:32.910 --> 17:33.910
下一节课我们来说

17:33.910 --> 17:35.910
扣的这个GS到底该怎么写

17:35.910 --> 17:37.910
如何把它挨个给解析下来

17:37.910 --> 17:39.910
然后如何最后

17:39.910 --> 17:43.910
给它做成一个可以判断这个执行的这个

17:44.910 --> 17:45.910
情况

17:45.910 --> 17:47.910
来执行一下它那段代码

17:47.910 --> 17:49.910
然后我们来看是否能够成立

17:49.910 --> 17:52.910
我们下一节课来讲这个扣的GS

17:52.910 --> 17:54.910
这块还是稍微有点复杂

17:54.910 --> 17:55.910
我们下一节课来说

