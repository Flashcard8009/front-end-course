WEBVTT

00:01.330 --> 00:03.330
hello 大家好

00:03.330 --> 00:06.830
咱们之前写的这个代码还剩一点东西是吧

00:06.830 --> 00:09.330
还剩了一些什么career的方法什么的没有加

00:09.330 --> 00:11.330
咱们这一集就给它加上

00:11.330 --> 00:17.330
比如说我在这个外面定义的时候我定义了一个career的

00:17.330 --> 00:21.900
它是个方的神是吧

00:21.900 --> 00:23.900
比如说我在这个里面

00:23.900 --> 00:25.900
剩一个创建完了

00:25.900 --> 00:29.720
我希望打印这个

00:29.720 --> 00:32.720
但是我们现在这个还没有办法来执行是吧

00:32.720 --> 00:34.720
那其实就是处置化这一块

00:34.720 --> 00:36.720
来处置化这一块

00:36.720 --> 00:39.720
处置化这一块我们要来先定义一下

00:39.720 --> 00:41.720
处置化

00:41.720 --> 00:44.720
还是我得看它定义定义career的方法

00:44.720 --> 00:50.720
if options.career created

00:50.720 --> 00:55.440
如果它有这两个方法

00:55.440 --> 01:02.260
那其实就是vm.created

01:02.260 --> 01:07.260
created等于obstance.created

01:07.260 --> 01:08.260
就完事了

01:08.260 --> 01:09.260
给它复个值

01:09.260 --> 01:11.260
computed这块也是

01:11.260 --> 01:13.260
计算属性我们一直都没输

01:13.260 --> 01:15.260
其实就把计算属性当成一个data就好

01:15.260 --> 01:19.260
你就把计算属性当成一种data就好

01:19.260 --> 01:24.260
当然我们这里也都没有怎么调计算属性

01:24.260 --> 01:27.260
因为它这种你就跟这个data是很像的

01:27.260 --> 01:28.260
它比data还简单

01:28.260 --> 01:32.640
它也不用什么分析你就执行它就行了

01:32.640 --> 01:37.640
obstance.computed

01:37.640 --> 01:39.640
看看它有没有这个属性

01:39.640 --> 01:41.640
如果有这个属性的话

01:41.640 --> 01:47.640
那我们就让vm.created

01:47.640 --> 01:56.780
等于obstance.computed

01:57.780 --> 01:58.780
这样就处置化

01:58.780 --> 01:59.780
然后在什么时候调用呢

01:59.780 --> 02:01.780
你看这个时候

02:01.780 --> 02:03.780
我们在initled之前

02:03.780 --> 02:04.780
initled之后

02:04.780 --> 02:05.780
处置化了之后

02:05.780 --> 02:07.780
我们处置化了之后

02:07.780 --> 02:09.780
在还没有渲染的时候

02:09.780 --> 02:11.780
是不是按照它的生命周期来说

02:11.780 --> 02:13.780
就要来执行created

02:13.780 --> 02:16.780
来执行处置化完成的

02:16.780 --> 02:17.780
对吧

02:17.780 --> 02:18.780
if

02:18.780 --> 02:21.860
在这个位置

02:21.860 --> 02:23.860
上面它就是处置化了

02:23.860 --> 02:26.860
下块线created

02:26.860 --> 02:28.860
不等于空

02:28.860 --> 02:30.860
那我就执行

02:30.860 --> 02:35.860
vm.created

02:35.860 --> 02:36.860
这样的话

02:36.860 --> 02:37.860
才能让它知道

02:37.860 --> 02:38.860
它这里面的vm.created

02:38.860 --> 02:41.860
是指向的是整个due对象

02:41.860 --> 02:43.860
生命周期里面

02:43.860 --> 02:44.860
我们用这个

02:44.860 --> 02:45.860
其实用的最多

02:45.860 --> 02:46.860
其他的东西

02:46.860 --> 02:48.860
我们几乎就可以忽略了

02:48.860 --> 02:49.860
如果有其他的话

02:49.860 --> 02:51.860
你就在不同的时间点上

02:51.860 --> 02:52.860
去data一下就行

02:52.860 --> 02:54.860
其他的生命周期的话

02:54.860 --> 02:55.860
就是在不同的时间点上

02:55.860 --> 02:56.860
去data一下就行

02:56.860 --> 02:58.860
这个就是created这个方法

02:58.860 --> 02:59.860
就像这个

02:59.860 --> 03:00.860
我们来刷新一下

03:00.860 --> 03:01.860
是吧

03:01.860 --> 03:02.860
创建完了

03:02.860 --> 03:04.860
我们在创建完成的时候

03:04.860 --> 03:06.860
就会调用一下created的方法

03:06.860 --> 03:07.860
这样的话

03:07.860 --> 03:08.860
我们基本上这个功能

03:08.860 --> 03:10.860
就大多数的情况下就实现了

03:10.860 --> 03:12.860
基本上大多数的情况下就实现了

03:14.860 --> 03:16.860
这就是一个完整的

03:16.860 --> 03:18.860
一个稍微比较完整的

03:18.860 --> 03:19.860
一个小框架

03:19.860 --> 03:20.860
然后我们可以看一下

03:20.860 --> 03:22.860
引入一下

03:22.860 --> 03:32.260
之前的

03:32.260 --> 03:34.260
在哪来着

03:34.260 --> 03:36.260
是不是在这里给大家演示了

03:36.260 --> 03:38.260
created的

03:38.260 --> 03:40.260
test-doe

03:40.260 --> 03:42.260
no

03:42.260 --> 03:43.260
这个里面

03:43.260 --> 03:44.260
有一个created

03:44.260 --> 03:47.530
还有这个x-source

03:47.530 --> 03:48.530
看好了

03:48.530 --> 03:50.530
我给它都沾过来

03:50.530 --> 03:51.530
x-source

03:51.530 --> 03:52.530
咱们不用管

03:52.530 --> 04:01.410
我把这都close

04:01.410 --> 04:03.410
然后有个test-doe

04:03.410 --> 04:04.410
是吧

04:04.410 --> 04:07.170
这个里面

04:07.170 --> 04:08.170
用的都是doe的对象

04:08.170 --> 04:09.170
没有用的

04:09.170 --> 04:11.170
这个是

04:11.170 --> 04:12.170
doe的对象

04:12.170 --> 04:13.170
是吧

04:13.170 --> 04:14.170
没有用的

04:14.170 --> 04:16.170
没有用

04:16.170 --> 04:17.170
这个voe的东西

04:17.170 --> 04:18.170
是吧

04:18.170 --> 04:19.170
我把voe直接

04:19.170 --> 04:20.170
引入的地方

04:20.170 --> 04:21.170
直接给注掉

04:22.170 --> 04:23.170
这个

04:23.170 --> 04:24.170
test-doe

04:24.170 --> 04:25.170
我把引入

04:25.170 --> 04:26.170
个voe的地方

04:26.170 --> 04:27.170
直接就给注掉

04:27.170 --> 04:29.170
这个是

04:29.170 --> 04:30.170
我看

04:30.170 --> 04:31.170
这个是doe的代码

04:31.170 --> 04:32.170
是吧

04:32.170 --> 04:33.170
用doe的方式写

04:33.170 --> 04:34.170
我们来执行一下

04:34.170 --> 04:43.460
看看行不行

04:43.460 --> 04:45.460
看看会不会报什么错

04:45.460 --> 04:50.970
是吧

04:50.970 --> 04:51.970
它这个x-source

04:51.970 --> 04:52.970
自己能正常的执行

04:52.970 --> 04:53.970
是吧

04:55.970 --> 04:56.970
再一个时候

04:56.970 --> 04:57.970
自己能正常的执行

04:57.970 --> 04:58.970
我们这些请求

04:58.970 --> 04:59.970
也能发的出去

04:59.970 --> 05:00.970
我们这些请求

05:00.970 --> 05:01.970
能发的出去

05:01.970 --> 05:02.970
那下一个

05:02.970 --> 05:03.970
我们就结合这个实际

05:03.970 --> 05:05.970
我们来结合这个实际

05:05.970 --> 05:06.970
我们来看一下

05:06.970 --> 05:07.970
把这个程序调通

05:07.970 --> 05:09.970
让它能够在我们

05:09.970 --> 05:10.970
基于我们之前写的

05:10.970 --> 05:11.970
这些代码上

05:11.970 --> 05:12.970
让它运行起来

05:12.970 --> 05:13.970
好吧

05:13.970 --> 05:14.970
下一个课

05:14.970 --> 05:15.970
我们来调试一下这个

