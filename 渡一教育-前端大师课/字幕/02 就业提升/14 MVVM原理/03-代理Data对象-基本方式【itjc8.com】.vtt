WEBVTT

00:00.880 --> 00:02.880
Hello 大家好

00:02.880 --> 00:06.880
上一集咱们说到了这个程序的入口 是吧

00:06.880 --> 00:08.880
然后我们列了一个小小的目楼

00:08.880 --> 00:12.880
这一集我们来开始来说第一个 初始化Data

00:12.880 --> 00:17.880
首先我们必须得有一些保证 要写一些严谨性的判断

00:17.880 --> 00:19.880
Obsense对象得有 对吧

00:19.880 --> 00:23.880
然后Obsense里得有Data属性 是吧

00:23.880 --> 00:26.880
如果你这个Obsense里面没有Data 我初始化谁呢 是吧

00:26.880 --> 00:28.880
这两个东西必须得有

00:28.880 --> 00:32.880
然后我们希望能把这个东西给它初始化出来

00:32.880 --> 00:35.880
我们也大家之前学这个VUE的时候 你们也知道

00:35.880 --> 00:40.880
就像这个VUE 有一些属性

00:40.880 --> 00:43.880
你只要改了这个属性 页面就变

00:43.880 --> 00:45.880
页面改了这个属性了之后

00:45.880 --> 00:47.880
比如说我这个输入框

00:47.880 --> 00:49.880
而输入框里的值我改变了之后

00:49.880 --> 00:51.880
我这个属性的值也变

00:51.880 --> 00:53.880
这个输入框里的值改变了之后

00:53.880 --> 00:56.880
我的属性的值变了 我还能好说 是吧

00:56.880 --> 00:58.880
我给输入框 添一个事件

00:58.880 --> 01:01.880
比如说on稱之 或者是on提档 是吧

01:01.880 --> 01:04.880
那你说我反过来 我这个属性值变了

01:04.880 --> 01:06.880
我这个页面就会变

01:06.880 --> 01:08.880
这个属性值是怎么

01:08.880 --> 01:10.880
我是怎么知道它变的

01:10.880 --> 01:13.880
这个属性的值我是怎么知道变的

01:13.880 --> 01:15.880
就比如说

01:15.880 --> 01:16.880
我这块有一个对象

01:16.880 --> 01:18.880
我问了一个Data

01:18.880 --> 01:23.880
是一个A 冒号1 倒号B 冒号2

01:23.880 --> 01:25.880
你说我忽然在后面做了一个操作

01:25.880 --> 01:29.880
Data的A等于3

01:29.880 --> 01:32.880
是不是它就直接就执行了

01:32.880 --> 01:35.880
那我怎么知道A的这个值变了呢

01:35.880 --> 01:37.880
我们总不能用一个循环

01:37.880 --> 01:40.880
一直去重复的去调用 是吧

01:40.880 --> 01:43.880
我们是不会去用一个循环去调用的

01:43.880 --> 01:45.880
我们用的方法就是代理

01:45.880 --> 01:46.880
我们会用代理的方式

01:46.880 --> 01:50.880
来把这个东西给它截获出来

01:50.880 --> 01:53.880
你们在学习ES6的时候

01:53.880 --> 01:54.880
是不是应该已经讲过了

01:54.880 --> 01:55.880
四通读也好

01:55.880 --> 01:57.880
还是我上课的时候也好

01:57.880 --> 02:00.880
不知道大家是不是听得我上的课

02:00.880 --> 02:03.880
肯定会给大家来讲的一个功能

02:03.880 --> 02:06.880
叫做Defend property

02:06.880 --> 02:09.880
其实VUE它也是用这个东西来实现的

02:09.880 --> 02:12.880
VUE的主要的代理的功能

02:12.880 --> 02:14.880
也是用这个来实现的

02:14.880 --> 02:18.880
所以我们也建一个代理的GS

02:18.880 --> 02:21.880
咱们也建一个代理

02:21.880 --> 02:23.880
然后我在这个里面写一个

02:23.880 --> 02:25.880
主要的一个方法

02:25.880 --> 02:26.880
写一个主要的方法

02:26.880 --> 02:28.880
就是

02:28.880 --> 02:31.880
构建一个代理

02:31.880 --> 02:33.880
export

02:33.880 --> 02:35.880
function

02:35.880 --> 02:38.880
construct

02:38.880 --> 02:39.880
是吧

02:39.880 --> 02:40.880
proxy

02:40.880 --> 02:42.880
我让外界传过来三样东西

02:42.880 --> 02:44.880
第一个是VM

02:44.880 --> 02:48.880
我要知道给哪个对象来进行代理

02:48.880 --> 02:49.880
是吧

02:49.880 --> 02:51.880
然后

02:51.880 --> 02:53.880
这个是给哪个模板

02:53.880 --> 02:55.880
给哪个VUE对象

02:55.880 --> 02:58.880
或者我们的DUE对象来进行代理

02:58.880 --> 03:02.880
代理的是哪个属性

03:02.880 --> 03:04.880
然后我先写一个这个东西

03:04.880 --> 03:06.880
就在name space

03:06.880 --> 03:09.880
这个我先不给大家来讲

03:09.880 --> 03:11.880
待会我们写的时候你就知道了

03:11.880 --> 03:14.880
我现在这块写上点注释

03:14.880 --> 03:17.880
VM表示

03:17.880 --> 03:20.880
这个DUE对象

03:20.880 --> 03:23.880
然后OB接表示

03:23.880 --> 03:28.880
要进行代理的对象

03:28.880 --> 03:31.880
name space

03:31.880 --> 03:35.880
现在现在给它一个保密

03:35.880 --> 03:38.880
我们后面就会说到这个name space

03:38.880 --> 03:40.880
我现在说你可能也想象不到主要

03:40.880 --> 03:43.880
所以说我们后台能用到它的时候

03:43.880 --> 03:47.880
再给大家来说这个name space的重要性

03:47.880 --> 03:49.880
那好了

03:49.880 --> 03:51.880
我在外面就调用它

03:51.880 --> 03:52.880
对吧

03:52.880 --> 03:54.880
我是不是在这个以内的这一块

03:54.880 --> 03:56.880
我就可以来调用它了

03:56.880 --> 03:59.880
我们来设置一个VM的下滑线

03:59.880 --> 04:01.880
vnode

04:01.880 --> 04:02.880
这个data

04:02.880 --> 04:04.880
下滑线data

04:04.880 --> 04:06.880
我们要让所有的代理的属性都

04:06.880 --> 04:08.880
放在这个data上是吧

04:08.880 --> 04:12.880
然后就construct

04:13.880 --> 04:17.190
proxy

04:17.190 --> 04:18.190
然后它就自动引入了

04:18.190 --> 04:20.190
这是我这个编辑器的功能

04:20.190 --> 04:21.190
我只要调用这个方法

04:21.190 --> 04:22.190
如果它没有引用的话

04:22.190 --> 04:24.190
它就会自动给我引入

04:24.190 --> 04:27.190
但是我还得在后面添个点儿阶S

04:27.190 --> 04:29.190
然后我把这三个属性

04:29.190 --> 04:30.190
给它传出去是吧

04:30.190 --> 04:32.190
VM必须得传

04:32.190 --> 04:34.190
再一个是obstance.data

04:34.190 --> 04:36.190
这个是我要代理的对象是吧

04:36.190 --> 04:37.190
name space

04:37.190 --> 04:39.190
我们最开始传一个空

04:39.190 --> 04:41.190
因为它也没有什么命名空间

04:41.190 --> 04:43.190
它是根基的是吧

04:43.190 --> 04:46.190
它在这个对象的跟路就是想

04:46.190 --> 04:48.190
然后我们来想

04:48.190 --> 04:50.190
这个这样的一个对象

04:50.190 --> 04:53.190
我该如何对它来进行代理

04:53.190 --> 04:54.190
这样的一个对象

04:54.190 --> 04:57.190
我该如何的来对它进行代理

04:57.190 --> 05:01.080
如何的对它来进行代理

05:01.080 --> 05:04.080
我这块会用到一些算法

05:04.080 --> 05:05.080
用到一些算法

05:05.080 --> 05:06.080
人家的一些知识

05:06.080 --> 05:08.080
主要会用到一些地规

05:08.080 --> 05:13.420
如果你去看这个VUE的圆满

05:13.420 --> 05:14.420
那时候你也会发现

05:14.420 --> 05:15.420
它也有很多的地方

05:15.420 --> 05:16.420
会用到的地规

05:16.420 --> 05:17.420
地规这个算法

05:17.420 --> 05:19.420
其实是个不会不行的

05:19.420 --> 05:22.420
如果算法比较薄弱的同学

05:22.420 --> 05:23.420
建议去补一补算法

05:23.420 --> 05:25.420
如果算法比较薄弱的话

05:25.420 --> 05:26.420
建议去比较

05:26.420 --> 05:29.420
建议去补一补算法

05:29.420 --> 05:30.420
那好了

05:30.420 --> 05:31.420
我们来看一下

05:31.420 --> 05:33.420
我们来对一个东西来进行代理

05:33.420 --> 05:34.420
首先我要知道

05:34.420 --> 05:37.420
这个东西是个什么类型

05:37.420 --> 05:39.420
我得知道这个东西

05:39.420 --> 05:41.420
是一个什么类型

05:41.420 --> 05:43.420
首先我不可能对一个

05:43.420 --> 05:44.420
Sydrin来进行代理

05:44.420 --> 05:45.420
是吧

05:45.420 --> 05:47.420
我也不能对一个数字来进行代理

05:47.420 --> 05:48.420
这样都没有意义是吧

05:48.420 --> 05:49.420
我能代理的是啥

05:49.420 --> 05:52.420
我代理的要么是对象

05:52.420 --> 05:54.420
要么是数组

05:54.420 --> 05:55.420
是吧

05:55.420 --> 05:56.420
要么是对象

05:56.420 --> 05:57.420
要么是数组

05:57.420 --> 05:58.420
就像我们

05:58.420 --> 06:00.420
这个页面上传进来的是什么

06:00.420 --> 06:01.420
是不是个对象

06:01.420 --> 06:03.420
这个Date是个对象是吧

06:03.420 --> 06:04.420
有一个Countin的

06:04.420 --> 06:05.420
直Vpander

06:05.420 --> 06:06.420
有一个DateScripsen

06:06.420 --> 06:07.420
直Vpander

06:07.420 --> 06:11.420
所以说我们这会要区分一下

06:11.420 --> 06:14.420
我需要知道

06:14.420 --> 06:19.420
OBG instance of a rim

06:19.420 --> 06:22.420
判断

06:22.420 --> 06:24.420
判断这个对象

06:24.420 --> 06:28.860
是否为数组

06:28.860 --> 06:29.860
else if

06:29.860 --> 06:40.140
OBG instance of object

06:40.140 --> 06:42.140
判断这个对象

06:42.140 --> 06:47.140
是否为对象

06:47.140 --> 06:49.140
再否则

06:49.140 --> 06:50.140
否则我就给它报个错了

06:50.140 --> 06:51.140
是吧

06:51.140 --> 06:54.140
我只接受对象和数组

06:54.140 --> 07:00.220
我只接受对象和数组

07:00.220 --> 07:02.220
然后再回过头来说一下

07:02.220 --> 07:04.220
我们写这个类似的目的是干嘛

07:04.220 --> 07:06.220
别有的同学看着看着就蒙了

07:06.220 --> 07:10.220
不知道我们要干嘛

07:10.220 --> 07:14.220
我们要知道哪个属性

07:14.220 --> 07:17.220
被修改了

07:17.220 --> 07:25.220
我们才能对页面上的内容进行更新

07:25.220 --> 07:38.220
所以我们必须先能够补货修改的这个实践

07:38.220 --> 07:42.600
补货这个实践

07:42.600 --> 07:45.600
但是我们实际上这个GS的时候

07:45.600 --> 07:47.600
我们从来没有见过

07:47.600 --> 07:49.600
哪个实践是对象里的属性修改的

07:49.600 --> 07:50.600
是吧

07:50.600 --> 07:54.600
你见过Unchanged,Unkeydown,Unclick之类的

07:54.600 --> 07:57.600
没有说哪个GS对象修改了之后有个实践的

07:57.600 --> 07:58.600
是吧

07:58.600 --> 08:00.600
所以说

08:00.600 --> 08:06.600
所以我们需要用代理的方式

08:06.600 --> 08:12.600
来实现监听属性修改

08:12.600 --> 08:15.600
我们用代理的方式来监听属性修改

08:15.600 --> 08:18.600
主要会用到define property

08:18.600 --> 08:21.600
那我们先来说一个简单的

08:21.600 --> 08:23.600
如果传进来的是个对象

08:23.600 --> 08:25.600
如果传进来的是个对象

08:25.600 --> 08:37.410
那我先给他let一个proxyobj

08:37.410 --> 08:39.410
大家要知道一个

08:39.410 --> 08:42.410
代理模式的原理是什么

08:42.410 --> 08:45.410
不知道大家当年在学ES6的时候

08:45.410 --> 08:51.340
学的怎么样

08:51.340 --> 08:53.340
代理的原理是啥

08:53.340 --> 08:57.660
比如说你传入了一个数据

08:57.660 --> 09:00.660
这个是我们的data

09:00.660 --> 09:03.660
比如说a等于1

09:03.660 --> 09:08.660
这个b等于2

09:08.660 --> 09:20.140
比如说dataa等于1

09:20.140 --> 09:21.140
b等于2

09:21.140 --> 09:22.140
这样一个对象

09:22.140 --> 09:24.140
然后我们一旦给它代理了之后

09:24.140 --> 09:25.140
是怎么样

09:25.140 --> 09:27.140
创建出来一个新的对象是吧

09:27.140 --> 09:30.140
这个对象我们管的叫proxy

09:30.140 --> 09:33.140
然后它既没有属性1a

09:33.140 --> 09:35.140
也没有属性b

09:35.140 --> 09:37.140
但是它有什么

09:37.140 --> 09:40.140
它有guide a

09:40.140 --> 09:43.140
然后还有side a

09:43.140 --> 09:46.140
然后有guide b

09:46.140 --> 09:49.140
还有side b

09:49.140 --> 09:52.140
你调proxy的guide a的时候

09:52.140 --> 09:55.140
它把它的a的值返回给你

09:55.140 --> 09:57.140
你调它的side a的时候

09:57.140 --> 10:00.140
它把它b的这个值

10:00.140 --> 10:02.140
把这个a的这个值给修改了

10:02.140 --> 10:03.140
你调它guide b的时候

10:03.140 --> 10:05.140
它把data的b的值返回给你

10:05.140 --> 10:08.140
你调它side b的时候

10:08.140 --> 10:10.140
它就修改data的b

10:10.140 --> 10:13.140
然后我们就能拿到

10:13.140 --> 10:16.140
调用它的时候的动作

10:16.140 --> 10:18.140
你调side的就是要修改

10:18.140 --> 10:20.140
我们就可以来干掉别的事

10:20.140 --> 10:23.140
这是代理模式的一个

10:23.140 --> 10:26.140
必然的用的一个结构

10:26.140 --> 10:29.140
这是为了防止很多的同学已经忘了

10:29.140 --> 10:32.140
所以我们来回过头来再稍微说一下

10:32.140 --> 10:35.140
然后我们proxy

10:35.140 --> 10:36.140
obj

10:36.140 --> 10:38.140
我希望调一个方法就完事了

10:38.140 --> 10:40.140
来一个construct

10:41.140 --> 10:44.900
object的吧

10:44.900 --> 10:47.900
对象代理

10:47.900 --> 10:50.900
当然了我现在还没有这个方法

10:50.900 --> 10:52.900
所以我准备来创建一个

10:52.900 --> 10:58.040
方式

10:58.040 --> 11:00.040
把这个对象放进去

11:00.040 --> 11:02.040
还是给它三个属性

11:02.040 --> 11:05.040
vmobj

11:05.040 --> 11:10.540
vmobj

11:10.540 --> 11:13.540
vmobj

11:13.540 --> 11:16.540
三个属性

11:16.540 --> 11:18.540
然后我们来看一下

11:18.540 --> 11:21.540
这个东西该怎么写

11:21.540 --> 11:23.540
我们要代理对象了

11:23.540 --> 11:26.540
这个obj就是我们即将代理的一个对象

11:26.540 --> 11:28.540
首先我们先来创建一个

11:28.540 --> 11:31.540
lightproxyobj

11:31.540 --> 11:36.240
obj

11:36.240 --> 11:39.240
然后我们最后要return

11:39.240 --> 11:41.240
proxyobj

11:41.240 --> 11:44.240
这个就是我们要创建出来的代理对象

11:44.240 --> 11:47.240
传进来的obj

11:47.240 --> 11:49.240
就代表了data

11:49.240 --> 11:52.240
然后我们要给它创建代理

11:52.240 --> 11:55.240
我们要把obj的每一个属性

11:55.240 --> 11:58.240
把obj的每个属性

11:58.240 --> 12:00.240
都要造出来两个方法

12:00.240 --> 12:01.240
一个是guide的方法

12:01.240 --> 12:02.240
一个是side的方法

12:02.240 --> 12:04.240
放到新的对象里

12:04.240 --> 12:06.240
这个a我在这里面有

12:06.240 --> 12:08.240
对应guidea和sidea

12:08.240 --> 12:09.240
这边有b

12:09.240 --> 12:10.240
我在这边要有

12:10.240 --> 12:12.240
对应guidea b和sidea b

12:12.240 --> 12:15.240
所以说我们要便利obj对象

12:16.240 --> 12:18.240
一个for循环

12:18.240 --> 12:21.240
lightproxyobj

12:23.240 --> 12:24.240
这样的方式

12:24.240 --> 12:26.240
我们可以先输出一下

12:26.240 --> 12:30.730
可以看一下

12:30.730 --> 12:37.620
我们来输出一下

12:37.620 --> 12:38.620
是吧

12:38.620 --> 12:39.620
我们能够打印出来

12:39.620 --> 12:40.620
两个属性是吧

12:40.620 --> 12:41.620
一个是content的

12:41.620 --> 12:42.620
一个是description

12:42.620 --> 12:44.620
这个就是我们obj里面

12:44.620 --> 12:46.620
有的两个属性

12:46.620 --> 12:48.620
然后我要对这两个属性

12:48.620 --> 12:49.620
来进行代理

12:49.620 --> 12:52.620
我要对这两个属性来进行代理

12:52.620 --> 12:53.620
obj

12:53.620 --> 12:56.620
点define property

12:56.620 --> 12:58.620
把它代理给哪个对象

12:58.620 --> 12:59.620
proxyobj

12:59.620 --> 13:00.620
是吧

13:00.620 --> 13:01.620
哪个属性

13:01.620 --> 13:03.620
prob这个属性

13:03.620 --> 13:04.620
然后

13:09.450 --> 13:11.450
然后就是一个

13:11.450 --> 13:13.450
好夸了是吧

13:13.450 --> 13:14.450
我们给它传参数

13:14.450 --> 13:16.450
tribute是吧

13:16.450 --> 13:17.450
首先来设置一下

13:17.450 --> 13:20.890
configure

13:21.890 --> 13:22.890
然后我们刚才说了

13:22.890 --> 13:24.890
要在这个里面

13:24.890 --> 13:26.890
给它创建两个方法是吧

13:26.890 --> 13:27.890
一个是guidea方法

13:27.890 --> 13:29.890
一个是sidea方法是吧

13:29.890 --> 13:31.890
那我们先来一个简单的guidea

13:34.390 --> 13:35.390
就直接return

13:35.390 --> 13:37.390
obj的

13:37.390 --> 13:40.770
prob这个属性就ok

13:41.770 --> 13:42.770
是吧

13:42.770 --> 13:43.770
guidea方法

13:43.770 --> 13:44.770
其实没有什么可说的

13:44.770 --> 13:46.770
主要的是sidea方法

13:46.770 --> 13:47.770
主要是sidea方法

13:47.770 --> 13:49.770
当我们需要给它

13:49.770 --> 13:50.770
设置值的时候

13:50.770 --> 13:52.770
是不是这个值就要发生变化

13:52.770 --> 13:54.770
值发生变化了

13:54.770 --> 13:56.770
是不是它对应的

13:56.770 --> 13:58.770
节点也要发生显然的变化

13:58.770 --> 13:59.770
是吧

13:59.770 --> 14:00.770
值发生变化了

14:00.770 --> 14:01.770
我们希望对应的节点

14:01.770 --> 14:03.770
也会发生显然的变化

14:03.770 --> 14:04.770
它对应的这个道目节点

14:04.770 --> 14:05.770
是吧

14:05.770 --> 14:07.770
比如说我这个里面这个值

14:08.770 --> 14:09.770
比如说我这个content的这个值

14:09.770 --> 14:10.770
现在是panel

14:10.770 --> 14:11.770
我希望这个里面

14:11.770 --> 14:13.770
会显示的是panel

14:13.770 --> 14:14.770
对吧

14:14.770 --> 14:15.770
所以说

14:15.770 --> 14:17.770
我们重要的是这个sidea方法

14:17.770 --> 14:18.770
我们要知道

14:18.770 --> 14:21.770
新传进来的这个东西是啥

14:21.770 --> 14:23.770
新传进来的这个东西是啥

14:23.770 --> 14:25.770
所以我们来这样写

14:25.770 --> 14:26.770
sidea才是个方法

14:26.770 --> 14:27.770
方个是

14:27.770 --> 14:29.770
它会新传进来一个value

14:29.770 --> 14:31.770
新传进来一个value

14:31.770 --> 14:32.770
然后我们主要来做的事情

14:32.770 --> 14:33.770
是啥呢

14:33.770 --> 14:35.770
是把obj的这个prp

14:35.770 --> 14:37.770
obj这个对象的这个属性

14:37.770 --> 14:39.770
这种写法大家应该会

14:39.770 --> 14:41.770
给它附上新的值

14:41.770 --> 14:43.770
但是以于此同时

14:43.770 --> 14:45.770
我们要

14:45.770 --> 14:48.770
能够在这块做一些事情

14:48.770 --> 14:50.770
比如说我来打印一下

14:50.770 --> 14:52.770
我修改了哪个属性

14:53.770 --> 14:54.770
是吧

14:54.770 --> 14:55.770
比如说我来打印一下

14:55.770 --> 14:59.420
我修改了哪个属性

14:59.420 --> 15:01.420
我们在这块来return一下

15:01.420 --> 15:02.420
return一下

15:02.420 --> 15:04.420
proxlbj

15:04.420 --> 15:12.940
看一下这个test.data

15:12.940 --> 15:13.940
这个时候

15:13.940 --> 15:14.940
这个data里面

15:14.940 --> 15:16.940
就会有两个参数了是吧

15:16.940 --> 15:17.940
一个是content的

15:17.940 --> 15:18.940
我一点

15:18.940 --> 15:19.940
这是调用了一下

15:19.940 --> 15:20.940
guide的方法是吧

15:20.940 --> 15:22.940
这个discreption

15:22.940 --> 15:23.940
我一点它调用了一下

15:23.940 --> 15:24.940
guide的方法是吧

15:24.940 --> 15:25.940
我也可以修改是吧

15:25.940 --> 15:28.940
test下的data

15:28.940 --> 15:30.940
下的content

15:30.940 --> 15:31.940
之前是pander是吧

15:31.940 --> 15:33.940
我要给它改成monkey

15:34.940 --> 15:35.940
是吧

15:35.940 --> 15:36.940
我一样会车

15:37.940 --> 15:39.940
它就会打印一下自断

15:39.940 --> 15:40.940
是吧

15:40.940 --> 15:42.940
打印一下自断名

15:42.940 --> 15:43.940
也就是说

15:43.940 --> 15:45.940
我们如果想要操作一些事情的话

15:45.940 --> 15:46.940
我可以在这个位置

15:46.940 --> 15:48.940
在console.log这个位置

15:48.940 --> 15:49.940
这一行这会

15:49.940 --> 15:51.940
加上很多的代码

15:51.940 --> 15:53.940
让它再修改了属性的之后

15:53.940 --> 15:55.940
我们会把对应的

15:55.940 --> 15:56.940
级点的值给它渲染

15:56.940 --> 15:58.940
但是我们现在什么都不干

15:58.940 --> 15:59.940
我们现在暂时

15:59.940 --> 16:00.940
现在什么都不干

16:02.940 --> 16:03.940
这个就是一个

16:03.940 --> 16:04.940
最简单的渲染是吧

16:04.940 --> 16:05.940
但是我们都知道

16:05.940 --> 16:07.940
vue在使用的时候

16:07.940 --> 16:08.940
我们在用vue的时候

16:08.940 --> 16:10.940
直接就

16:10.940 --> 16:12.940
比如说test是vue对象

16:12.940 --> 16:15.940
我直接就test的点content就ok的

16:15.940 --> 16:16.940
没有什么时候

16:16.940 --> 16:18.940
我们还得点data是吧

16:18.940 --> 16:20.940
那是因为它做了一个优化是吧

16:20.940 --> 16:23.940
它不但要给proxy来

16:23.940 --> 16:25.940
设置了一个代理

16:25.940 --> 16:27.940
它还往vm上面

16:27.940 --> 16:29.940
也就是往它这个本身方面

16:29.940 --> 16:30.940
设置了一个代理

16:30.940 --> 16:31.940
我们也来写一下

16:34.310 --> 16:35.310
define property

16:35.310 --> 16:36.310
vm

16:43.660 --> 16:44.660
configure

16:46.660 --> 16:47.660
然后

16:47.660 --> 16:48.660
还是

16:48.660 --> 16:49.660
get不变

16:52.030 --> 16:53.030
然后

16:53.030 --> 16:55.030
set其实也不变

16:56.030 --> 16:57.030
主要是

16:57.030 --> 16:59.030
我们要往两个地方来设置值

16:59.030 --> 17:00.030
是吧

17:00.030 --> 17:01.030
一个是

17:03.030 --> 17:05.030
代理对象上

17:05.030 --> 17:06.030
另一个是

17:06.030 --> 17:07.030
我们实体本身

17:07.030 --> 17:08.030
vm本身

17:09.030 --> 17:11.470
这样的话

17:11.470 --> 17:12.470
我们再来刷新一下

17:12.470 --> 17:17.510
test的点content

17:17.510 --> 17:18.510
是吧

17:18.510 --> 17:20.510
我们就已经可以拿到这个内容了

17:20.510 --> 17:22.510
test的点content等于

17:25.510 --> 17:26.510
monkey

17:26.510 --> 17:28.510
我这里面改了之后

17:28.510 --> 17:29.510
test的点

17:29.510 --> 17:31.510
data里的content

17:31.510 --> 17:32.510
是不是也跟它就改了

17:33.510 --> 17:34.510
对吧

17:34.510 --> 17:35.510
所以说这样的话

17:35.510 --> 17:37.510
我们就能实现了一个

17:37.510 --> 17:39.510
基本的一个代理

17:40.510 --> 17:42.510
我们可以实现了一个基本的代理

17:44.510 --> 17:45.510
然后

17:45.510 --> 17:48.510
我们还会有很多一些特殊的情况

17:48.510 --> 17:49.510
特殊的情况

17:49.510 --> 17:51.510
比如说对象里面透对象

17:51.510 --> 17:53.510
再就是比如说数组

17:53.510 --> 17:54.510
数组

17:54.510 --> 17:55.510
你把数组给修改了

17:55.510 --> 17:56.510
实际上

17:56.510 --> 17:57.510
v1也能检测得到的

17:57.510 --> 17:58.510
比如说你调铺式

17:58.510 --> 17:59.510
调泡布方法

17:59.510 --> 18:01.510
v1是能检测得到的

18:01.510 --> 18:04.510
v1是如何来实现这些功能的

18:04.510 --> 18:05.510
咱们下一节课

18:05.510 --> 18:06.510
下一集

18:06.510 --> 18:07.510
一集一集的来讲

