WEBVTT

00:01.070 --> 00:03.070
Hello 大家好

00:03.070 --> 00:06.070
上一集咱们基本上说完了这个代理

00:06.070 --> 00:08.070
我们来看一下

00:08.070 --> 00:13.070
我们可以用proxy 文件里的这些代码

00:13.070 --> 00:16.070
把我们的一个data对象

00:16.070 --> 00:19.070
把我们传进来的Obsense.data对象给代理了

00:19.070 --> 00:22.070
代理了之后一共给它装载到了两个地方

00:22.070 --> 00:26.070
一个是下滑线data里

00:26.070 --> 00:31.960
泰斯的下滑线data

00:31.960 --> 00:35.590
一个是在这里

00:35.590 --> 00:38.590
另外一个是我们直接就给它装配到了

00:38.590 --> 00:40.590
泰斯的DOE对象上 是吧

00:40.590 --> 00:43.590
直接给它装配到了DOE的对象上

00:43.590 --> 00:45.590
给它装了上去

00:45.590 --> 00:49.590
这个是我们上一节课说的proxy

00:49.590 --> 00:53.590
然后这一集我们来说挂载

00:53.590 --> 00:57.590
因为光能够代理这些数据还不行

00:57.590 --> 01:01.590
我们当我们的这个VOE对象也好

01:01.590 --> 01:03.590
还是DOE对象也好

01:03.590 --> 01:08.590
和实际的HTML这一块代码进行关联的时候

01:08.590 --> 01:10.590
实际上和它进行关联的时候

01:10.590 --> 01:13.590
我们必须得能先分析得出来

01:13.590 --> 01:16.590
这一块代码里面都有哪些节点

01:16.590 --> 01:19.590
然后节点之间的这种关系是怎么样 是吧

01:19.590 --> 01:22.590
然后我们才能分析每个节点里面

01:22.590 --> 01:23.590
有没有模板

01:23.590 --> 01:26.590
然后又需不需要给它把模板这一块

01:26.590 --> 01:29.590
给它渲染上我们的数字

01:29.590 --> 01:31.590
或者是我们这些值

01:31.590 --> 01:33.590
所以说这一集我们来说

01:33.590 --> 01:36.590
开始渲染这一部分了 相当于

01:36.590 --> 01:39.590
就是关于这个节点挂载

01:39.590 --> 01:41.590
一提到这个节点挂载

01:41.590 --> 01:44.590
我们必须得提到一个VOE里面

01:44.590 --> 01:46.590
一个非常经典的一个东西

01:46.590 --> 01:48.590
叫做虚拟道木树

01:48.590 --> 01:50.590
这个其实不止VOE里面有

01:50.590 --> 01:52.590
很多的MVM框架里面基本上都有

01:52.590 --> 01:54.590
虚拟道木树

01:54.590 --> 01:56.590
虚拟道木树是用来干嘛的呢

01:56.590 --> 02:00.590
虚拟道木树就是用来模拟标签之间关系的

02:00.590 --> 02:04.590
比如说你看我这个最外层是一个DIV 是吧

02:04.590 --> 02:06.590
那在我们这个虚拟道木树里

02:06.590 --> 02:08.590
它就相当于是一个节点

02:08.590 --> 02:13.590
它会认为我们这个页面形式是什么样的呢

02:13.590 --> 02:15.590
最外层是个包点

02:15.590 --> 02:17.590
好了 咱们最外层是个包点

02:17.590 --> 02:19.590
或者是你们认为一只T2门也行

02:19.590 --> 02:22.590
然后这个包点下可能有几个DIV

02:22.590 --> 02:25.590
这个包点下可能有几个DIV

02:25.590 --> 02:28.590
然后这个某一个DIV下

02:28.590 --> 02:30.590
比如说我们挂载到某一个DIV下

02:30.590 --> 02:32.590
这是我们要挂载的这个点

02:32.590 --> 02:33.590
我给它换个色

02:33.590 --> 02:35.590
挂载到这个点下

02:35.590 --> 02:37.590
这个DIV下可能又有DIV

02:37.590 --> 02:39.590
可能有SPAN

02:39.590 --> 02:41.590
什么的

02:41.590 --> 02:44.590
我们会发现这是一个什么样的结构呢

02:44.590 --> 02:46.590
这是一个数形结构

02:47.590 --> 02:49.590
对吧 这是一个数形结构

02:49.590 --> 02:52.590
好吧 上面这个移得远一点

02:52.590 --> 02:53.590
这是一个数形结构

02:53.590 --> 02:55.590
这个包点有三个X

02:55.590 --> 02:57.590
然后重新这个DIV又有两个X

02:57.590 --> 02:59.590
这是一个数形结构

03:00.590 --> 03:03.590
所以我们这个弄的节点

03:03.590 --> 03:06.590
也是要用我们的弄的节点

03:06.590 --> 03:08.590
来模拟出来一个数形结构

03:08.590 --> 03:11.590
和我们这个道木节点上是一一对应的

03:11.590 --> 03:13.590
然后我们这个道木节点是一一对应的

03:14.590 --> 03:18.590
然后一提到这个用节点来模拟这个数形结构呢

03:18.590 --> 03:20.590
我们就必须得有两个值 是吧

03:22.590 --> 03:24.590
就是我们这个节点里面

03:25.590 --> 03:27.590
所谓的我们的Vnode

03:27.590 --> 03:29.590
我们管的这个V叫water 是吧

03:29.590 --> 03:31.590
这个虚拟的node 虚拟的节点

03:31.590 --> 03:34.590
那它要么想模拟一个数形结构

03:34.590 --> 03:36.590
模拟一个数形结构

03:36.590 --> 03:38.590
它必须得有什么样的

03:38.590 --> 03:40.590
我看看这个格式怎么挑

03:41.590 --> 03:44.590
它必须得有什么样的一个参数

03:44.590 --> 03:47.590
或者是它必须得有什么样的前提

03:48.590 --> 03:49.590
你看啊

03:49.590 --> 03:52.590
这个包得作为一个跟节点 是吧

03:52.590 --> 03:55.590
它会有很多个子节点

03:55.590 --> 03:58.590
是吧 这一层的DIV都是它的直属子节点

03:58.590 --> 04:00.590
是吧 都是它的直属的子节点

04:00.590 --> 04:02.590
但是会有多少个呢

04:02.590 --> 04:04.590
不一定 是吧

04:04.590 --> 04:06.590
所以这可数和二X数不太一样

04:06.590 --> 04:08.590
二X数只有两个X

04:08.590 --> 04:09.590
它的X是固定的

04:09.590 --> 04:10.590
二是固定的

04:10.590 --> 04:12.590
所以你就声明好了一个左一个右就得了

04:12.590 --> 04:14.590
但是这可数不一定

04:14.590 --> 04:17.590
一个节点下可能有多个节点

04:17.590 --> 04:18.590
多个子节点

04:18.590 --> 04:21.590
它这个节点下也有可能没有子节点

04:21.590 --> 04:23.590
是吧 这是不一定的

04:23.590 --> 04:25.590
它可能有多个子节点

04:25.590 --> 04:27.590
也有可能没有子节点

04:27.590 --> 04:29.590
所以说它有没有子节点

04:29.590 --> 04:30.590
我们无法确定

04:30.590 --> 04:32.590
所以说它的子节点

04:32.590 --> 04:34.590
一般我们会有一个东西叫做Q准

04:36.590 --> 04:38.590
会用一个叫做Q准的东西

04:38.590 --> 04:40.590
Q准是一个数组

04:40.590 --> 04:42.590
Q准是一个数组

04:42.590 --> 04:44.590
我们必须得有这个东西

04:44.590 --> 04:47.590
这个用来记录着我都有哪些子节点的

04:47.590 --> 04:49.590
我有哪些子节点的

04:49.590 --> 04:50.590
提到这个虚拟到我们数了

04:50.590 --> 04:52.590
我们就先来创建一个

04:52.590 --> 04:53.590
我们先来创建一个

04:53.590 --> 04:56.590
再靠一下我们来创建一个路径

04:57.590 --> 04:59.590
叫V到

05:00.590 --> 05:02.590
然后我们来创建一个文件

05:02.590 --> 05:04.590
叫做Vnode

05:04.590 --> 05:06.590
Vnode

05:07.590 --> 05:09.590
咱们可以先来想象一下

05:09.590 --> 05:10.590
先来想象一下

05:10.590 --> 05:12.590
这个Vnode到底需要哪一些属性

05:12.590 --> 05:14.590
Vnode需要哪些属性

05:14.590 --> 05:15.590
直接导出

05:15.590 --> 05:16.590
xpart

05:16.590 --> 05:17.590
default

05:17.590 --> 05:18.590
class

05:18.590 --> 05:20.590
vnode

05:21.590 --> 05:23.590
我们直接导出这个类

05:23.590 --> 05:24.590
然后

05:24.590 --> 05:25.590
constructor

05:26.590 --> 05:29.420
tag

05:29.420 --> 05:31.420
tag是什么呢

05:31.420 --> 05:32.420
是我们的类型

05:32.420 --> 05:33.420
标签类型

05:36.420 --> 05:37.420
如果是DIV是啥

05:37.420 --> 05:39.420
DIV就是这个是吧

05:39.420 --> 05:41.420
如果是Span

05:41.420 --> 05:42.420
就是这个是吧

05:42.420 --> 05:44.420
如果你要是经常看

05:44.420 --> 05:46.420
打印的内容的话

05:46.420 --> 05:48.420
你会发现他这个tag打出来的都是大写字

05:48.420 --> 05:50.420
都是大写字

05:50.420 --> 05:51.420
如果是input

05:51.420 --> 05:52.420
就是这个是吧

05:52.420 --> 05:55.420
如果是个文本节点

05:55.420 --> 05:57.420
咱来先来看一下

05:57.420 --> 05:58.420
看一下这个

05:58.420 --> 05:59.420
就这一块带吧

05:59.420 --> 06:01.420
你说有几个节点

06:01.420 --> 06:03.420
咱来查一下

06:03.420 --> 06:04.420
这样一个是吧

06:04.420 --> 06:06.420
外面id

06:06.420 --> 06:08.420
这个type的是一个是吧

06:08.420 --> 06:10.420
然后你看从这

06:10.420 --> 06:11.420
到这

06:11.420 --> 06:13.420
是不是一个节点

06:13.420 --> 06:14.420
也是是吧

06:14.420 --> 06:16.420
这是不是一个文本节点

06:16.420 --> 06:17.420
对吧

06:17.420 --> 06:18.420
这是不是一个文本节点是吧

06:18.420 --> 06:20.420
然后这是一个br

06:20.420 --> 06:21.420
这么一个节点是吧

06:21.420 --> 06:22.420
然后从这

06:22.420 --> 06:23.420
到这

06:23.420 --> 06:25.420
是不是也是一个节点

06:25.420 --> 06:27.420
虽然我这块只有一个换行

06:27.420 --> 06:28.420
但是他也

06:28.420 --> 06:29.420
占了一个字符

06:29.420 --> 06:31.420
虽然我这块只有一个换行

06:31.420 --> 06:32.420
但是他也占了一个字符

06:32.420 --> 06:34.420
这个是不是也是一个文本节点

06:34.420 --> 06:36.420
然后是这个死半标签

06:36.420 --> 06:38.420
这个死半标签之下

06:38.420 --> 06:39.420
还有一个文本节点

06:39.420 --> 06:40.420
然后你看

06:40.420 --> 06:41.420
这个死半标签

06:41.420 --> 06:42.420
到这个div之间

06:42.420 --> 06:44.420
还有个文本节点

06:44.420 --> 06:45.420
所以说这个文本节点

06:45.420 --> 06:47.420
一共是有很多个的

06:47.420 --> 06:48.420
当我们提到了

06:48.420 --> 06:50.420
这种文本节点的时候

06:50.420 --> 06:51.420
这种文本节点的时候

06:51.420 --> 06:53.420
他的tag是什么

06:53.420 --> 06:54.420
他的tag是什么

06:54.420 --> 06:55.420
这种文本节点的时候

06:55.420 --> 06:57.420
他的tag是警号

06:57.420 --> 06:58.420
tags

06:58.420 --> 07:00.420
警号tags

07:00.420 --> 07:01.420
不信的话

07:01.420 --> 07:02.420
你可以去打印一下看看

07:02.420 --> 07:06.050
你可以去打印一下看

07:06.050 --> 07:08.050
第一个参数tag

07:08.050 --> 07:09.050
然后第二个参数

07:09.050 --> 07:11.050
element

07:11.050 --> 07:13.050
我们要记录一下

07:13.050 --> 07:16.050
他对应的真实节点

07:16.050 --> 07:17.050
是吧

07:17.050 --> 07:19.050
既然他虚拟道目数

07:19.050 --> 07:22.050
是和真实的道目是一一对应的

07:22.050 --> 07:23.050
那么每一个节点

07:23.050 --> 07:25.050
就得有他对应的真实节点

07:25.050 --> 07:26.050
对吧

07:26.050 --> 07:28.050
element就是我们对应的真实节点

07:28.050 --> 07:29.050
然后下一个

07:29.050 --> 07:30.050
就是我们

07:30.050 --> 07:31.050
既然是数形结构

07:31.050 --> 07:32.050
就得有数形结构

07:32.050 --> 07:33.050
必然得有的一个字段

07:33.050 --> 07:36.050
就做q准

07:36.050 --> 07:40.050
就是当前节点下的

07:40.050 --> 07:44.050
字节点

07:44.050 --> 07:46.050
当前

07:46.050 --> 07:47.050
当前

07:47.050 --> 07:51.550
当前节点下的字节点

07:51.550 --> 07:52.550
q准

07:52.550 --> 07:54.550
然后tags

07:54.550 --> 07:55.550
tags

07:55.550 --> 07:56.550
如果是文本节点的话

07:56.550 --> 07:57.550
他这里面里有文本

07:57.550 --> 07:58.550
是吧

07:58.550 --> 08:01.550
当前虚拟节点

08:01.550 --> 08:03.550
中的文本

08:03.550 --> 08:05.860
用来存字的

08:05.860 --> 08:06.860
是吧

08:06.860 --> 08:07.860
那你这个节点

08:07.860 --> 08:08.860
如果是这个

08:08.860 --> 08:09.860
spot

08:09.860 --> 08:11.860
那他有文本节点吗

08:11.860 --> 08:12.860
老师有时候说

08:12.860 --> 08:13.860
老师有时候里面

08:13.860 --> 08:14.860
就是他的文本节点吗

08:14.860 --> 08:15.860
不是

08:15.860 --> 08:16.860
这个里面的这个东西

08:16.860 --> 08:18.860
是他的子节点

08:18.860 --> 08:20.860
这个文本节点

08:20.860 --> 08:21.860
是在spot

08:21.860 --> 08:23.860
内部的一个节点

08:23.860 --> 08:24.860
所以是他的子节点

08:24.860 --> 08:25.860
对于spot来说

08:25.860 --> 08:26.860
他没有文本

08:26.860 --> 08:27.860
对于spot来说

08:27.860 --> 08:28.860
他没有文本

08:28.860 --> 08:32.300
tags

08:32.300 --> 08:33.300
tags之后

08:33.300 --> 08:35.300
我们说的是data

08:35.300 --> 08:36.300
data是一个

08:36.300 --> 08:38.300
我们认为它是

08:38.300 --> 08:41.300
vnode

08:41.300 --> 08:42.300
data

08:42.300 --> 08:44.300
但是我们现在暂时保留

08:44.300 --> 08:46.300
暂时保留

08:46.300 --> 08:49.810
暂无意义

08:49.810 --> 08:51.810
留一个用来存放

08:51.810 --> 08:52.810
这个节点的数据

08:52.810 --> 08:53.810
但是用来存放什么

08:53.810 --> 08:54.810
我们现在可以暂时

08:54.810 --> 08:56.810
先来补放

08:56.810 --> 08:57.810
我们现在也暂时

08:57.810 --> 08:59.810
不给它设定一些意义

08:59.810 --> 09:01.810
你们以后在工作中

09:01.810 --> 09:02.810
一般也会声明出来

09:02.810 --> 09:03.810
一些这样的节点

09:03.810 --> 09:05.810
我感觉有用

09:05.810 --> 09:07.810
但是我现在可能还用不着

09:07.810 --> 09:09.810
这种就叫做

09:11.810 --> 09:13.810
这种是经常出现的

09:13.810 --> 09:14.810
以免什么呢

09:14.810 --> 09:15.810
以免万一哪一天

09:15.810 --> 09:17.810
产品提了一个需求

09:17.810 --> 09:19.810
然后我们为了这个需求

09:19.810 --> 09:20.810
要改代码

09:20.810 --> 09:21.810
如果要是大量的改代码

09:21.810 --> 09:22.810
的话这个就会很麻烦

09:22.810 --> 09:24.810
所以会一般的

09:24.810 --> 09:26.810
写出来一些预留字段

09:26.810 --> 09:28.810
就像这个

09:28.810 --> 09:29.810
语言里面

09:29.810 --> 09:31.810
他们也会有保留字

09:31.810 --> 09:33.810
和关键字

09:33.810 --> 09:34.810
关键字是啥意思

09:34.810 --> 09:35.810
就是我们现在正在使用的

09:35.810 --> 09:37.810
这些保留字

09:37.810 --> 09:38.810
还有一些保留字

09:38.810 --> 09:40.810
是我觉得我以后会用

09:40.810 --> 09:42.810
所以我现在就不给你们用

09:42.810 --> 09:43.810
这就是保留字

09:43.810 --> 09:45.810
像我们这个人就是一个保留字段

09:45.810 --> 09:47.810
一个保留字段

09:47.810 --> 09:49.810
我觉得每一个节点

09:49.810 --> 09:50.810
会有它的数据

09:50.810 --> 09:52.810
但是现在可能会有什么数据

09:52.810 --> 09:53.810
我也不知道

09:53.810 --> 09:55.810
所以我先写这么一个data

09:55.810 --> 09:59.250
然后这位来一个parent

09:59.250 --> 10:00.250
parent

10:00.250 --> 10:02.250
这个不用说了是吧

10:02.250 --> 10:04.250
副级节点

10:05.250 --> 10:07.250
我们这个和二查数

10:07.250 --> 10:08.250
这种数据结构

10:08.250 --> 10:10.250
还是有点不一样的是吧

10:10.250 --> 10:12.250
我们不能只找向

10:12.250 --> 10:13.250
自己的孩子

10:13.250 --> 10:14.250
我们也

10:14.250 --> 10:16.250
同时找向我们的副级

10:16.250 --> 10:17.250
这样的话

10:17.250 --> 10:19.250
我们在开发的过程中

10:19.250 --> 10:20.250
会方便一些

10:20.250 --> 10:22.250
会快一些

10:22.250 --> 10:24.250
然后node type

10:24.250 --> 10:25.250
node type

10:25.250 --> 10:27.940
节点类型

10:27.940 --> 10:28.940
你是个标签

10:28.940 --> 10:29.940
还是个注释

10:29.940 --> 10:31.940
还是个什么地

10:31.940 --> 10:33.940
这是node type

10:35.940 --> 10:36.940
先来这么些吧

10:36.940 --> 10:37.940
好吧

10:37.940 --> 10:38.940
先来这么些吧

10:38.940 --> 10:39.940
然后呢

10:39.940 --> 10:40.940
我们给他们复职

10:40.940 --> 10:41.940
z的tag

10:41.940 --> 10:43.940
等于tag

10:44.940 --> 10:47.940
然后z的element

10:48.940 --> 10:50.940
等于element

10:50.940 --> 10:54.090
z的

10:56.090 --> 10:57.090
children

10:57.090 --> 10:58.090
等于

10:58.090 --> 11:00.090
children

11:00.090 --> 11:02.090
z的text

11:02.090 --> 11:04.090
等于text

11:04.090 --> 11:06.090
z的data

11:06.090 --> 11:08.090
等于data

11:08.090 --> 11:11.090
z的parent

11:11.090 --> 11:14.090
等于parent

11:14.090 --> 11:17.090
z的node type

11:17.090 --> 11:21.850
等于node type

11:21.850 --> 11:24.610
然后

11:24.610 --> 11:26.610
我们再来写两个

11:26.610 --> 11:28.610
z的element

11:30.610 --> 11:32.610
element

11:32.610 --> 11:33.610
环境

11:33.610 --> 11:34.610
看好了

11:34.610 --> 11:36.610
这个东西可以有的玩了

11:36.610 --> 11:38.610
这个东西是比较重要的

11:38.610 --> 11:39.610
这个东西

11:39.610 --> 11:40.610
我是一个

11:40.610 --> 11:41.610
我自己设定的

11:41.610 --> 11:42.610
一个技巧

11:42.610 --> 11:43.610
这个呢

11:43.610 --> 11:44.610
因为这种设置

11:44.610 --> 11:45.610
也调研了一下

11:45.610 --> 11:47.610
有很多同学比较好理解

11:47.610 --> 11:48.610
就是

11:48.610 --> 11:49.610
叫做什么呢

11:49.610 --> 11:51.610
叫做环境变量

11:51.610 --> 11:52.610
叫做

11:52.610 --> 11:54.610
当前节点的

11:54.610 --> 11:58.370
环境变量

11:58.370 --> 11:59.370
当前节点的环境变量

11:59.370 --> 12:00.370
这什么意思

12:00.370 --> 12:01.370
来看一下

12:01.370 --> 12:03.370
你看这个道目节点

12:03.370 --> 12:04.370
我们这里面的

12:04.370 --> 12:05.370
每一个节点

12:05.370 --> 12:06.370
我都可以直接

12:06.370 --> 12:07.370
啪这样写一个

12:07.370 --> 12:08.370
代表的是

12:08.370 --> 12:09.370
访问谁的属性

12:09.370 --> 12:10.370
代表访问谁的属性

12:10.370 --> 12:11.370
是不是访问

12:11.370 --> 12:12.370
这个data里的属性

12:12.370 --> 12:13.370
是吧

12:13.370 --> 12:14.370
代表访问data里的属性

12:14.370 --> 12:15.370
但是

12:15.370 --> 12:16.370
有的时候

12:16.370 --> 12:17.370
你们看

12:17.370 --> 12:18.370
会有这种情况

12:18.370 --> 12:19.370
比如说来个li

12:20.370 --> 12:22.370
来个v-form

12:23.370 --> 12:25.370
比如说这个key

12:25.370 --> 12:27.370
in-list

12:29.370 --> 12:30.370
然后这门里面写的一个

12:30.370 --> 12:33.370
key.a

12:33.370 --> 12:35.370
看这种情况

12:35.370 --> 12:36.370
你说这里面

12:36.370 --> 12:37.370
这个key.a

12:37.370 --> 12:38.370
这个key

12:38.370 --> 12:39.370
是哪来的呢

12:40.370 --> 12:41.370
是吧

12:41.370 --> 12:42.370
这个key

12:42.370 --> 12:43.370
肯定不是data里的

12:43.370 --> 12:44.370
是吧

12:44.370 --> 12:46.370
那我们如何能找到这个key

12:46.370 --> 12:47.370
是吧

12:47.370 --> 12:48.370
这就是这个节点

12:48.370 --> 12:50.370
身处在什么环境里

12:50.370 --> 12:51.370
这个节点

12:51.370 --> 12:52.370
身处在什么环境里

12:52.370 --> 12:53.370
你看我在后面

12:53.370 --> 12:54.370
再写一个

12:54.370 --> 12:56.370
再写一个div

12:56.370 --> 12:58.370
我还没缸缝

12:58.370 --> 13:00.370
v缸缝

13:01.370 --> 13:02.370
这个div

13:02.370 --> 13:03.370
我还是没缸缝

13:03.370 --> 13:04.370
这v缸缝

13:04.370 --> 13:05.370
我还是来个

13:05.370 --> 13:06.370
temp

13:06.370 --> 13:08.370
in-list

13:08.370 --> 13:12.640
temp

13:12.640 --> 13:13.640
是吧

13:13.640 --> 13:14.640
我这么写是不是也不违法

13:14.640 --> 13:15.640
是不是合理的

13:15.640 --> 13:16.640
那这个temp

13:16.640 --> 13:17.640
也是哪来的呢

13:17.640 --> 13:19.640
是不是也不是data里的

13:19.640 --> 13:20.640
对吧

13:20.640 --> 13:22.640
那我们每一个节点

13:22.640 --> 13:24.640
他们其实都有自己的

13:24.640 --> 13:25.640
环境辨量

13:25.640 --> 13:27.640
也就是他们的生命周期里的

13:27.640 --> 13:28.640
辨量

13:28.640 --> 13:30.640
生命周期里的辨量

13:31.640 --> 13:32.640
你看

13:32.640 --> 13:33.640
这个节点的生命周期

13:33.640 --> 13:34.640
继承谁的

13:34.640 --> 13:36.640
是不是继承他的外层

13:36.640 --> 13:37.640
是吧

13:37.640 --> 13:38.640
这个temp

13:38.640 --> 13:39.640
对于是在哪儿

13:39.640 --> 13:40.640
创建的相当远

13:40.640 --> 13:41.640
是在div里

13:41.640 --> 13:42.640
创建的

13:42.640 --> 13:43.640
然后

13:43.640 --> 13:45.640
每自己的子节点

13:45.640 --> 13:46.640
自己的所有的子节点

13:46.640 --> 13:48.640
都继承自己的辨量

13:48.640 --> 13:49.640
是吧

13:49.640 --> 13:50.640
当然他们也能

13:50.640 --> 13:51.640
怎么样

13:51.640 --> 13:52.640
他们也能覆盖我的辨量

13:52.640 --> 13:53.640
是吧

13:53.640 --> 13:54.640
他们也可以覆盖

13:54.640 --> 13:55.640
我外层的辨量

13:56.640 --> 13:57.640
所以说

13:57.640 --> 13:58.640
我们每一个节点

13:58.640 --> 13:59.640
这块都得有一个

13:59.640 --> 14:00.640
自己的环境辨量

14:00.640 --> 14:02.640
用来存放自己生命的

14:02.640 --> 14:04.640
用来存放自己生命的

14:04.640 --> 14:05.640
辨量

14:05.640 --> 14:06.640
然后

14:06.640 --> 14:07.640
让所有的子节点

14:07.640 --> 14:08.640
去继承

14:08.640 --> 14:09.640
让所有的子节点

14:09.640 --> 14:10.640
去继承

14:10.640 --> 14:11.640
这个是

14:11.640 --> 14:12.640
语言之后

14:12.640 --> 14:13.640
我们会有用法

14:13.640 --> 14:14.640
然后

14:14.640 --> 14:15.640
下一个

14:15.640 --> 14:22.060
List Instruction

14:22.060 --> 14:24.060
instructions

14:26.060 --> 14:27.060
这个

14:27.060 --> 14:29.060
是用来存放指令的

14:29.060 --> 14:33.270
用来存放指令的

14:33.270 --> 14:34.270
就比如说

14:34.270 --> 14:36.270
我们刚才写的这种

14:36.270 --> 14:38.270
我们刚才写的这种

14:38.270 --> 14:40.270
这其实就是一个指令

14:40.270 --> 14:41.270
是吧

14:41.270 --> 14:42.270
这就是一个指令

14:42.270 --> 14:43.270
然后具体的

14:43.270 --> 14:44.270
这块怎么用

14:44.270 --> 14:45.270
咱们之后来说

14:45.270 --> 14:46.270
咱们之后来说

14:46.270 --> 14:47.270
这个用处

14:47.270 --> 14:48.270
不是特别的大

14:48.270 --> 14:49.270
到了时候

14:49.270 --> 14:50.270
咱们后面写到

14:50.270 --> 14:51.270
如果用到的时候

14:51.270 --> 14:52.270
咱们来具体的来说

14:52.270 --> 14:53.270
然后

14:53.270 --> 14:54.270
最后一个

14:54.270 --> 15:00.340
Z's Template

15:00.340 --> 15:01.340
这个是什么意思

15:01.340 --> 15:02.340
就是

15:02.340 --> 15:04.340
当前这个节点

15:04.340 --> 15:06.340
涉及到的模板

15:06.340 --> 15:07.340
当前这个节点

15:07.340 --> 15:09.340
涉及到的模板

15:09.340 --> 15:10.340
可能用不到

15:10.340 --> 15:12.340
我们也是一个预留的

15:12.340 --> 15:13.340
如果最后用不到的

15:13.340 --> 15:14.340
就给它删了

15:14.340 --> 15:15.340
如果最后用不到

15:15.340 --> 15:16.340
就给它删了

15:16.340 --> 15:20.340
当前节点

15:20.340 --> 15:24.340
涉及到的

15:24.340 --> 15:30.040
涉及到的模板

15:30.040 --> 15:31.040
大概吧

15:31.040 --> 15:32.040
大概我们先定义这么些

15:32.040 --> 15:33.040
是吧

15:33.040 --> 15:34.040
如果不够

15:34.040 --> 15:35.040
我们再加

15:35.040 --> 15:36.040
如果多了

15:36.040 --> 15:37.040
到了时候

15:37.040 --> 15:38.040
我们最后再给它删掉

15:38.040 --> 15:39.040
这时候是我们定义的

15:39.040 --> 15:40.040
一个Vnode

15:40.040 --> 15:41.040
定义的一个Vnode

15:41.040 --> 15:42.040
一个Vnode

15:42.040 --> 15:43.040
是一个虚拟节点

15:43.040 --> 15:44.040
一个虚拟节点

15:44.040 --> 15:46.040
和一个真实节点

15:46.040 --> 15:47.040
相互对应

15:47.040 --> 15:48.040
然后

15:48.040 --> 15:49.040
接下来我们要干什么了

15:49.040 --> 15:50.040
我们就得来

15:50.040 --> 15:52.040
构建一个虚拟道目数

15:52.040 --> 15:53.040
和真实的道目数

15:53.040 --> 15:54.040
一一对应

15:54.040 --> 15:55.040
是吧

15:55.040 --> 15:56.040
我先把这一段剪给删掉

15:56.040 --> 15:57.040
之后咱们再把

15:57.040 --> 15:59.040
粒子之类的给加上了

15:59.040 --> 16:01.040
我要构建一个虚拟道目数

16:01.040 --> 16:04.040
和真实的道目

16:04.040 --> 16:06.040
一一对应

16:06.040 --> 16:08.040
我们怎么来玩

16:08.040 --> 16:09.040
这个时候

16:09.040 --> 16:10.040
我们其实就得

16:10.040 --> 16:11.040
先得有

16:11.040 --> 16:12.040
什么

16:12.040 --> 16:13.040
虚拟节点

16:13.040 --> 16:15.040
先得有虚拟节点

16:15.040 --> 16:22.300
我们来创建一个Mount

16:22.300 --> 16:24.300
我们来创建一个Mount

16:24.300 --> 16:25.300
这个就是一个挂载的意思

16:25.300 --> 16:27.300
就是一个挂载的意思

16:27.300 --> 16:28.300
然后这个Mount里面

16:28.300 --> 16:30.300
我们需要写一些东西

16:30.300 --> 16:32.300
必须得初始化

16:32.300 --> 16:34.300
咱们先不说这三个

16:34.300 --> 16:35.300
咱们先不说这三个

16:35.300 --> 16:38.300
先来一个初始化

16:38.300 --> 16:41.300
Element并挂载

16:41.300 --> 16:43.300
我希望的是

16:43.300 --> 16:44.300
我在这个Mount里面

16:44.300 --> 16:45.300
一掉一个Mount方法

16:45.300 --> 16:46.300
就能挂载了

16:46.300 --> 16:47.300
我希望的是

16:47.300 --> 16:48.300
一掉一个Mount方法

16:48.300 --> 16:49.300
就能挂载了

16:49.300 --> 16:50.300
那这个怎么掉

16:50.300 --> 16:51.300
我先给他导出一下

16:51.300 --> 16:52.300
Expert

16:52.300 --> 16:54.300
方个是

16:54.300 --> 16:56.300
Mount

16:56.300 --> 16:58.300
告诉我哪个对象

16:58.300 --> 17:01.300
告诉我哪个Element

17:01.300 --> 17:09.480
然后我就给他挂载

17:09.480 --> 17:10.480
然后我在这个里面

17:10.480 --> 17:12.480
是不是就只需要

17:12.480 --> 17:13.480
如果我得先判断

17:13.480 --> 17:14.480
人家传来这个属性

17:14.480 --> 17:15.480
是吧

17:15.480 --> 17:16.480
他如果不传

17:16.480 --> 17:18.480
我给人也不能挂是吧

17:19.480 --> 17:21.480
Options

17:21.480 --> 17:23.480
写

17:23.480 --> 17:27.480
Options.el

17:27.480 --> 17:30.480
我们得有这个方法

17:30.480 --> 17:31.480
Light

17:31.480 --> 17:32.480
Root.

17:32.480 --> 17:33.480
是吧

17:33.480 --> 17:34.480
根结点

17:34.480 --> 17:35.480
我们的根结点是什么

17:35.480 --> 17:37.480
Document.getElement.by.id

17:37.480 --> 17:39.480
我们把这个

17:39.480 --> 17:44.240
Options.el传进去

17:44.240 --> 17:46.240
这是我们的真实的

17:46.240 --> 17:47.240
道目的根结点是吧

17:47.240 --> 17:49.240
然后我们用

17:49.240 --> 17:51.240
方法来进行挂载

17:51.240 --> 17:52.240
Mount方法进行挂载

17:52.240 --> 17:53.240
VM

17:53.240 --> 17:57.960
Root.

17:57.960 --> 18:00.960
有时候我再给我打印一下

18:00.960 --> 18:12.570
BeginMount

18:12.570 --> 18:16.570
看一下他会不会这么执行

18:16.570 --> 18:17.570
是吧

18:17.570 --> 18:18.570
BeginMount

18:18.570 --> 18:19.570
开始进行挂载

18:19.570 --> 18:21.570
然后具体的挂载的过程

18:21.570 --> 18:22.570
是什么样的

18:22.570 --> 18:24.570
这里面需要一些算法

18:24.570 --> 18:26.570
起码你得便利道目结点

18:26.570 --> 18:28.570
便利道目结点

18:28.570 --> 18:29.570
这里面

18:29.570 --> 18:31.570
涉及到很多的算法

18:31.570 --> 18:33.570
涉及到一些算法

18:33.570 --> 18:35.570
具体的算法

18:35.570 --> 18:36.570
我们下一节课

18:36.570 --> 18:37.570
详细的来说

