WEBVTT

00:00.940 --> 00:06.140
hello 大家好 这节课咱们来开始来说 咱们这个地邮义

00:06.140 --> 00:10.740
也就是咱们这个MVVM框架是怎么大建起来的

00:10.740 --> 00:16.940
首先我创建了一个项目 一个空的 什么都没有

00:16.940 --> 00:20.740
咱们就用这个空的来开始做 然后一点点把它完善

00:20.740 --> 00:27.140
首先咱先来建一个HTML页面 叫什么呢

00:28.140 --> 00:39.140
Test DOE 来创建了一个HTML的页面

00:39.140 --> 00:46.140
来写个DIV 写了代版 ID等于Test的吧

00:46.140 --> 00:54.480
然后这边写了一个你好

00:54.480 --> 01:01.480
我们用这个模板content 好吧 我们就先用这么一个简单的吧

01:02.480 --> 01:06.480
你好content 然后在下面再来个span

01:06.480 --> 01:19.880
然后再来个描述 这是Caribbean 把它也引上

01:19.880 --> 01:24.880
这样的一个代码就是我们经常看到的VOE的一个非常常见的那种代码

01:24.880 --> 01:26.880
对吧 非常常见的那种代码

01:26.880 --> 01:30.880
然后我们现在没有VOE 我们也不引VOE

01:30.880 --> 01:33.880
我们尝试着来写一个我们自己的框架

01:33.880 --> 01:36.880
然后把这个东西给它展示出来

01:36.880 --> 01:39.880
首先我们先建一个包 模管叫做car

01:39.880 --> 01:41.880
核心的意思 核心包

01:41.880 --> 01:47.880
然后在car下我们来创建一个index.js

01:49.880 --> 01:52.880
这个index.js就相当于是我们的主含数

01:52.880 --> 01:57.880
就相当于是我们整个框架的一个入口

01:57.880 --> 02:01.880
我希望我里面会有一个instance

02:01.880 --> 02:08.320
再创建一个car下 创建一个instance

02:08.320 --> 02:10.320
一个这样的一个实力

02:10.320 --> 02:14.320
然后在这个里面我们要有自己的index

02:17.780 --> 02:20.780
看我们每个路径下都有一个作为所引的

02:20.780 --> 02:25.780
我们这个下面的index就是真真正正的DOE

02:25.780 --> 02:28.780
就是真真正正的DOE 方式DOE

02:28.780 --> 02:31.780
我们可以让人传进来一个options

02:31.780 --> 02:34.780
是吧 大概就是一个这样的一个结果 是吧

02:34.780 --> 02:37.780
然后xpartdefaultDOE

02:37.780 --> 02:41.780
咱们说过这个default不default是不是区别挺大 是吧

02:41.780 --> 02:44.780
default的话我外面就可以随便引 是吧

02:44.780 --> 02:47.780
比如说我在这个里面 在外面这个index里面

02:47.780 --> 02:50.780
我要想引入里面这个可以怎么样

02:50.780 --> 02:53.780
importDOE 是吧 不用写话话

02:53.780 --> 02:57.780
对吧 服用里面的这个路径 是吧

02:57.780 --> 03:03.780
这个下的instance下的index.js

03:04.780 --> 03:07.780
把这个引出来 引出来之后再给它倒出去

03:07.780 --> 03:12.780
xpartdefaultDOE

03:12.780 --> 03:14.780
很多人说 老师你这不是多此一举吗

03:14.780 --> 03:17.780
你直接引这个不行吗 引那个其实也可以

03:17.780 --> 03:20.780
但是我们追求的是要一个

03:20.780 --> 03:23.780
要在外面有一个总的 总的这么个文件

03:23.780 --> 03:26.780
这样的话我们就可以在这里面

03:26.780 --> 03:32.480
有一个总的显得比较正规 是吧

03:33.480 --> 03:36.480
type等于module

03:36.480 --> 03:39.480
这样的话我们就可以在这个ve里面

03:39.480 --> 03:42.480
在这个gs里面就引入它了 对吧

03:42.480 --> 03:46.480
import一个DOE from

03:46.480 --> 03:48.480
我们就先不打包了

03:48.480 --> 03:50.480
我们先用es6的方式写

03:50.480 --> 03:52.480
也用es6的方式用

03:52.480 --> 03:54.480
等到这个最后

03:54.480 --> 03:56.480
如果大家有兴趣想打包的话

03:56.480 --> 03:58.480
可以直接用bubble打一个包

03:58.480 --> 04:00.480
这个用bubble打包就不多说了 是吧

04:01.480 --> 04:04.480
然后在这我们就给它引入了之后

04:04.480 --> 04:06.480
就可以用了 是吧

04:06.480 --> 04:10.480
然后我引入的路径是

04:10.480 --> 04:16.140
call下的

04:16.140 --> 04:19.140
index.js 是吧

04:19.140 --> 04:21.140
然后我们是不是就可以用了

04:21.140 --> 04:24.140
这里有一个小的点

04:24.140 --> 04:27.140
我不知道当年咱们说明说过

04:27.140 --> 04:31.140
比如说light一个type等于new一个DOE

04:32.140 --> 04:33.140
那我问一下大家

04:33.140 --> 04:35.140
这个type的能被访问到吗

04:35.140 --> 04:40.150
这个type的能被访问到吗

04:40.150 --> 04:43.150
我如果现在这块来打印

04:43.150 --> 04:46.150
type的

04:46.150 --> 04:47.150
有

04:47.150 --> 04:55.970
这个type的

04:55.970 --> 04:59.540
能没打印吗

04:59.540 --> 05:04.170
它是给我们返回了id为type的 是吧

05:04.170 --> 05:06.170
但是根本就不是这个对象 是吧

05:06.170 --> 05:08.170
我如果这个叫type2的话

05:08.170 --> 05:11.170
我打印type2你们觉得能打印出来吗

05:12.170 --> 05:14.170
什么都打印不出来 是吧

05:14.170 --> 05:16.170
因为它在scrave的module

05:16.170 --> 05:18.170
这个模块里的东西

05:18.170 --> 05:20.170
都是相当于是局部辨量

05:20.170 --> 05:22.170
它不是全局辨量

05:22.170 --> 05:24.170
所以我如果希望这个东西

05:24.170 --> 05:26.170
可以全局被访问到怎么办

05:26.170 --> 05:29.170
我直接window点typed

05:29.170 --> 05:31.170
我们就先这么写着

05:31.170 --> 05:33.170
因为我们现在还是用了es6

05:33.170 --> 05:35.170
所以我们就先用这种方式

05:35.170 --> 05:36.170
来暂时来写着

05:36.170 --> 05:38.170
之后你们打了包了之后就好了

05:38.170 --> 05:40.170
所以用这种方式来暂时来写

05:40.170 --> 05:42.170
这样的话我们要是想打印一个type

05:42.170 --> 05:44.170
就有doe的对象

05:44.170 --> 05:46.170
就有doe的对象

05:46.170 --> 05:49.170
这个就是一个万物的起源

05:49.170 --> 05:51.170
一个doe的对象

05:51.170 --> 05:53.170
但是我们一般不是拗了一个doe

05:53.170 --> 05:54.170
完事了 是吧

05:54.170 --> 05:56.170
我们那帮里面传参数 是吧

05:56.170 --> 05:57.170
第一个参数一般都是啥

05:57.170 --> 05:59.170
挂载的节点 是吧

05:59.170 --> 06:01.170
我这里就不写警号了

06:01.170 --> 06:03.170
也不用也懒得分析了

06:03.170 --> 06:05.170
我们这里面只允许一种挂载的方式

06:05.170 --> 06:08.170
就是直接用id来挂载 是吧

06:09.170 --> 06:11.170
这种挂载的方式都没有什么多说的

06:11.170 --> 06:13.170
然后第二个就是data

06:14.170 --> 06:16.170
是吧 我这里面又有content

06:17.170 --> 06:19.170
比如说Hello 这个你好 是吧

06:19.170 --> 06:21.170
我这个content是pan.

06:21.170 --> 06:23.170
然后还有个description

06:24.170 --> 06:26.170
又有这个description

06:27.170 --> 06:30.170
这个description我写了一个Hello

06:32.170 --> 06:33.170
pan.sayHello

06:35.170 --> 06:36.170
好吧

06:36.170 --> 06:39.170
就是这样的一个画风

06:42.170 --> 06:45.170
这样的话大概就是刷新一下

06:45.170 --> 06:46.170
就这样 是吧

06:46.170 --> 06:47.170
你好pan.

06:47.170 --> 06:50.170
然后如果这块应该显示出来pan.sayHello

06:50.170 --> 06:51.170
对吧

06:52.170 --> 06:54.170
我们先就这一点吧

06:54.170 --> 06:55.170
就先只有这一点

06:57.170 --> 06:58.170
然后来看

06:58.170 --> 07:00.170
我们传到这个doe 是吧

07:00.170 --> 07:02.170
New了一下子它

07:02.170 --> 07:03.170
然后进到了这里

07:03.170 --> 07:04.170
是吧

07:04.170 --> 07:05.170
是吧

07:05.170 --> 07:07.170
然后进到了这里

07:07.170 --> 07:09.170
然后我们希望怎么样

07:09.170 --> 07:11.170
我们希望对它进行初始化

07:11.170 --> 07:13.170
我们希望对它进行初始化

07:13.170 --> 07:15.170
但是我们到现在为止

07:15.170 --> 07:18.170
还没有写过任何初始化的方法

07:18.170 --> 07:19.170
对吧

07:19.170 --> 07:22.170
我们还没有写过doe的初始化的方法

07:22.170 --> 07:24.170
然后我们可以先来写一个

07:24.170 --> 07:25.170
创建一个

07:26.170 --> 07:27.170
创建一个什么

07:27.170 --> 07:28.170
init.js

07:30.170 --> 07:32.170
创建一个init.js

07:32.170 --> 07:35.170
我们这个init.js里面主要是干什么

07:35.170 --> 07:37.170
给这个doe

07:37.170 --> 07:39.170
添加初始化方法

07:39.170 --> 07:41.170
我希望怎么样

07:41.170 --> 07:43.170
我希望在这里面直接调

07:44.170 --> 07:45.170
一下子

07:45.170 --> 07:48.170
直接调一下z.下画线

07:48.170 --> 07:49.170
init

07:50.170 --> 07:52.170
把这个Obsence传进去

07:53.170 --> 07:54.170
我就完成初始化了

07:54.170 --> 07:56.170
我要尽量保证我这个外界的

07:56.170 --> 07:58.170
这个函数的干净利索 是吧

07:58.170 --> 08:00.170
所以我就得引用一下

08:01.170 --> 08:02.170
init的方法

08:02.170 --> 08:03.170
init的这个文件

08:03.170 --> 08:04.170
inpart

08:05.170 --> 08:06.170
inpart什么呢

08:06.170 --> 08:08.170
我们这里面写一个

08:10.170 --> 08:11.170
起个名

08:11.170 --> 08:12.170
叫

08:14.170 --> 08:15.170
spot function

08:15.170 --> 08:16.170
起个名叫

08:16.170 --> 08:18.170
init mixin

08:18.170 --> 08:19.170
混入

08:20.170 --> 08:22.170
混入一个初始化方法

08:22.170 --> 08:24.170
大概的逻辑就是这样

08:24.170 --> 08:26.170
doe.proauto type

08:26.170 --> 08:28.170
我们往这个圆形上

08:28.170 --> 08:30.170
添加一个init的方法

08:32.540 --> 08:34.540
让它传这个Obsence

08:34.540 --> 08:36.540
我们往这个圆形上添加

08:36.540 --> 08:37.540
往这个圆形上添加

08:37.540 --> 08:39.540
那这样是不是就100%的能

08:40.540 --> 08:42.540
能被这进行调用了 是吧

08:42.540 --> 08:44.540
诶 z4.init就有东西了

08:44.540 --> 08:45.540
对吧

08:45.540 --> 08:47.540
然后我们把它给引出来

08:47.540 --> 08:52.330
init mixin

08:53.330 --> 08:54.330
然后

08:54.330 --> 08:55.330
看

08:55.330 --> 08:57.330
我们这个东西得执行 是吧

08:57.330 --> 08:58.330
我不执行的话

08:58.330 --> 09:00.330
我这个里面的东西混不进去 是吧

09:00.330 --> 09:02.330
我必须得执行这个方法

09:02.330 --> 09:03.330
我才能给它添加

09:03.330 --> 09:04.330
看到了吗

09:04.330 --> 09:06.330
我必须得执行这个方法

09:06.330 --> 09:07.330
我才能给它添加

09:07.330 --> 09:09.330
然后我还得需要一个

09:09.330 --> 09:11.330
这么个东西

09:11.330 --> 09:12.330
我给谁

09:12.330 --> 09:13.330
给哪个对象什么

09:13.330 --> 09:15.330
添加了proauto type

09:15.330 --> 09:16.330
给哪个对象这个圆形上

09:16.330 --> 09:18.330
添加了init的方法

09:18.330 --> 09:19.330
是吧

09:19.330 --> 09:20.330
我得执行一下

09:20.330 --> 09:21.330
怎么来执行呢

09:21.330 --> 09:22.330
就在外面来调一下

09:22.330 --> 09:23.330
是吧

09:23.330 --> 09:25.330
init mixin

09:28.770 --> 09:29.770
完成

09:29.770 --> 09:30.770
这就是我们的一个

09:30.770 --> 09:32.770
最简单的一个处置化的一个调用

09:32.770 --> 09:34.770
最简单的一个处置化的调用

09:34.770 --> 09:36.770
然后我们下一步

09:36.770 --> 09:37.770
是不是就得

09:37.770 --> 09:38.770
就可以来分析

09:38.770 --> 09:39.770
这个absence

09:39.770 --> 09:40.770
我们该怎么玩了

09:40.770 --> 09:41.770
是吧

09:41.770 --> 09:42.770
就可以来分析

09:42.770 --> 09:43.770
这个absence该怎么玩了

09:43.770 --> 09:45.770
我们这一集

09:45.770 --> 09:47.770
主要来说一些基本的

09:47.770 --> 09:49.770
比如说我们先定义一个

09:49.770 --> 09:50.770
const

09:50.770 --> 09:51.770
定义一个vm

09:51.770 --> 09:53.770
vm指向的是this

09:53.770 --> 09:56.770
vm就是Virtual model

09:56.770 --> 09:57.770
就是虚拟接电

09:57.770 --> 09:58.770
大概是这么一个

09:58.770 --> 10:00.770
虚拟模块的一个意思

10:00.770 --> 10:01.770
这个DOE

10:01.770 --> 10:02.770
你看这个VOE也好

10:02.770 --> 10:04.770
还是react也好

10:04.770 --> 10:07.770
它跟真实的节点是一对应的

10:07.770 --> 10:08.770
对吧

10:08.770 --> 10:09.770
我这个DOE

10:09.770 --> 10:10.770
要对应着你这个

10:10.770 --> 10:12.770
真实的某一个节点

10:12.770 --> 10:13.770
是吧

10:13.770 --> 10:14.770
一个DIV也好

10:14.770 --> 10:15.770
一个table也好

10:15.770 --> 10:16.770
一个body也好之类的

10:16.770 --> 10:17.770
是吧

10:17.770 --> 10:18.770
但是所以说

10:18.770 --> 10:19.770
我们这个DOE

10:19.770 --> 10:21.770
就是一个虚拟的模块

10:21.770 --> 10:22.770
是吧

10:22.770 --> 10:23.770
一个虚拟的模块

10:23.770 --> 10:24.770
我们定义这个Vm

10:24.770 --> 10:26.770
等于this

10:27.770 --> 10:28.770
然后我们这个

10:28.770 --> 10:30.770
每一个DOE对象

10:30.770 --> 10:33.770
它其实都有一个ID

10:33.770 --> 10:35.770
这个ID是怎么来的呢

10:35.770 --> 10:36.770
就是

10:36.770 --> 10:38.770
vm.uid

10:40.770 --> 10:43.770
等于uid加价

10:43.770 --> 10:45.770
其实就是给它一个变号

10:45.770 --> 10:47.770
别让它重了

10:47.770 --> 10:51.770
然后vm.asve

10:54.660 --> 10:55.660
有

10:55.660 --> 10:56.660
一不留心

10:56.660 --> 10:58.660
把这个series给换下来

10:58.660 --> 10:59.660
asve

10:59.660 --> 11:00.660
给它处

11:00.660 --> 11:02.660
那我们就asDOE

11:02.660 --> 11:03.660
是吧

11:03.660 --> 11:05.660
我们毕竟是一个DOE

11:05.660 --> 11:06.660
对吧

11:06.660 --> 11:08.660
这就是一个基本的一些属性

11:08.660 --> 11:09.660
基本的一些属性

11:09.660 --> 11:10.660
你看一看

11:10.660 --> 11:11.660
这个时候

11:11.660 --> 11:12.660
我们来刷新一下

11:12.660 --> 11:19.390
哪一块引入啥了

11:19.390 --> 11:25.140
我把这个删掉

11:25.140 --> 11:27.140
这个时候

11:27.140 --> 11:29.140
我们再一输出

11:29.140 --> 11:31.140
这个test

11:31.140 --> 11:32.140
这个东西

11:32.140 --> 11:34.140
就和DOE最开始的时候

11:34.140 --> 11:35.140
就很像了

11:35.140 --> 11:37.140
这是两个必要的基础属性

11:37.140 --> 11:39.140
一个是标志着ID

11:39.140 --> 11:40.140
唯一的一个变号

11:40.140 --> 11:42.140
然后另一个是标志着

11:42.140 --> 11:43.140
这个东西

11:43.140 --> 11:45.140
是不是一个DOE的对象

11:45.140 --> 11:47.140
或者是一个VOE的对象

11:47.140 --> 11:49.140
然后下一步

11:49.140 --> 11:51.140
我们就要开始处置话了

11:51.140 --> 11:53.140
下一步我们就要开始处置话了

11:53.140 --> 11:54.140
处置话

11:54.140 --> 11:55.140
其实我们分成几个步骤

11:55.140 --> 11:57.140
我们先写一个注尸

11:57.140 --> 11:58.140
我们先把注尸写好

11:58.140 --> 12:00.140
然后爱好人来实现

12:00.140 --> 12:02.140
说处置话个什么最简单的

12:02.140 --> 12:04.140
咱们按一个来吧

12:04.140 --> 12:06.140
处置话数据

12:06.140 --> 12:09.770
处置话data

12:09.770 --> 12:11.770
然后呢

12:11.770 --> 12:13.770
处置话

12:13.770 --> 12:17.270
created的方法

12:17.270 --> 12:19.270
因为这个data完事了之后

12:19.270 --> 12:21.270
就可以调这个created了

12:21.270 --> 12:22.270
对吧

12:22.270 --> 12:23.270
然后呢

12:23.270 --> 12:25.270
处置话master

12:27.270 --> 12:28.270
然后呢

12:28.270 --> 12:30.270
处置话computed

12:32.840 --> 12:34.840
处置话computed之后呢

12:34.840 --> 12:35.840
我们再来

12:35.840 --> 12:37.840
处置话

12:37.840 --> 12:39.840
处置话

12:39.840 --> 12:41.840
EL并挂在

12:41.840 --> 12:47.780
我们按照顺序了

12:47.780 --> 12:49.780
我们按照顺序慢慢来

12:49.780 --> 12:51.780
从上到下

12:51.780 --> 12:53.780
我们就相当于这个

12:53.780 --> 12:55.780
用这个注尸写了一个目录

12:55.780 --> 12:57.780
写了一个小的一个目录

12:57.780 --> 12:59.780
后面的几堂课

12:59.780 --> 13:01.780
我们就用基本上

13:01.780 --> 13:03.780
一堂课一个

13:03.780 --> 13:05.780
下面的几个有一些不太难

13:05.780 --> 13:06.780
就像created

13:06.780 --> 13:07.780
master

13:07.780 --> 13:08.780
computed不太难

13:08.780 --> 13:10.780
处置话data比较复杂

13:10.780 --> 13:11.780
处置话data比较复杂

13:11.780 --> 13:12.780
因为呢

13:12.780 --> 13:13.780
我们要用到一些代理

13:13.780 --> 13:14.780
是吧

13:14.780 --> 13:15.780
因为我们要用到一些代理

13:15.780 --> 13:17.780
然后具体这个怎么处置话的过程

13:17.780 --> 13:19.780
我们下一集单独来说

