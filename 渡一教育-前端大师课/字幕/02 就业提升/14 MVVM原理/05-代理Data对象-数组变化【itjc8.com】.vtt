WEBVTT

00:00.880 --> 00:02.880
Hello 大家好

00:02.880 --> 00:04.880
上一集咱们说了代理

00:04.880 --> 00:06.880
对象 千条对象的情况

00:06.880 --> 00:08.880
这一集我们来说如何来

00:08.880 --> 00:10.880
我把另一个给关了吧

00:10.880 --> 00:12.880
它老捣乱

00:12.880 --> 00:14.880
这一集我们来说如何代理一个数组

00:14.880 --> 00:16.880
如何来代理一个数组

00:16.880 --> 00:18.880
比如说我在这里面创建一个数组

00:18.880 --> 00:23.150
叫什么名字

00:23.150 --> 00:26.530
叫List

00:26.530 --> 00:28.530
数组为List

00:28.530 --> 00:30.530
然后给它两个属性

00:30.530 --> 00:32.530
比如说里面是个对象

00:32.530 --> 00:34.530
A对象

00:34.530 --> 00:39.570
B属性

00:39.570 --> 00:41.570
是吧

00:41.570 --> 00:43.570
A代表的是名字

00:43.570 --> 00:45.570
B代表是年龄

00:45.570 --> 00:47.570
然后咱们创建两个

00:47.570 --> 00:49.570
第二个的

00:49.570 --> 00:51.570
A是Monkey

00:51.570 --> 00:53.570
B是

00:53.570 --> 00:55.570
20

00:55.570 --> 00:57.570
Monkey比潘达要

00:57.570 --> 00:59.570
岁数大一点

00:59.570 --> 01:01.570
现在这样的一个对象

01:01.570 --> 01:03.570
我们来看一下代理之后

01:03.570 --> 01:05.570
会变成什么样

01:05.570 --> 01:08.940
代理之后

01:08.940 --> 01:10.940
还是来修改

01:10.940 --> 01:12.940
修改Counten

01:12.940 --> 01:16.450
不变是吧

01:16.450 --> 01:18.450
它还是能够打印出来

01:18.450 --> 01:20.450
我们修改的哪个属性

01:20.450 --> 01:22.450
然后来修改obj.x

01:22.450 --> 01:24.450
等于6

01:24.450 --> 01:26.450
它也能够打印出来这个是吧

01:26.450 --> 01:28.450
这个时候

01:28.450 --> 01:30.450
我们如果

01:30.450 --> 01:32.450
输出一下TestList

01:32.450 --> 01:36.080
是吧

01:36.080 --> 01:38.080
我以前是没有的

01:38.080 --> 01:40.080
为啥呀

01:40.080 --> 01:42.080
因为我压根就没有代理它是吧

01:42.080 --> 01:44.080
当它是

01:44.080 --> 01:46.080
当它是

01:46.080 --> 01:48.080
这个数组的情况的时候

01:48.080 --> 01:50.080
我现在相当于什么都没有做

01:50.080 --> 01:52.080
当它是这个数组情况的时候

01:52.080 --> 01:54.080
我们现在什么都没有做

01:54.080 --> 01:56.080
所以说我们要对这个数组来进行一下代理

01:56.080 --> 01:58.080
我们要对这个数组来进行代理

01:58.080 --> 02:00.080
数组代理主要是代理它的啥

02:00.080 --> 02:02.080
数组代理

02:02.080 --> 02:04.080
主要是代理它的这些方法

02:04.080 --> 02:06.080
比如说pub方法

02:06.080 --> 02:08.080
push方法是吧

02:08.080 --> 02:10.080
因为我们要想

02:10.080 --> 02:12.080
你要想直接通过下比较搜引

02:12.080 --> 02:14.080
来修改对象

02:14.080 --> 02:16.080
我们这种情况下是基本上

02:16.080 --> 02:18.080
无法补货的

02:18.080 --> 02:20.080
但是呢

02:20.080 --> 02:22.080
我们可以补货到一些事件

02:22.080 --> 02:24.080
比如说push事件

02:24.080 --> 02:26.080
pub

02:26.080 --> 02:28.080
然后sift

02:28.080 --> 02:30.080
类似有这样的东西

02:30.080 --> 02:32.080
我们都是可以补货的到的

02:32.080 --> 02:34.080
proxyobj

02:34.080 --> 02:36.080
等于new一个re

02:36.080 --> 02:40.290
然后创建个数组

02:40.290 --> 02:42.290
数组有多长呢

02:42.290 --> 02:44.290
obj的lans

02:44.290 --> 02:46.290
我要用一个数组去代理它

02:46.290 --> 02:48.290
我要用一个数组去代理

02:48.290 --> 02:50.290
然后呢

02:50.290 --> 02:52.290
上面这个是一个一个的节点是吧

02:52.290 --> 02:54.290
那我们下面这个是不是也得是

02:54.290 --> 02:56.290
lans i等于0

02:56.290 --> 02:58.290
i小于obj的lans

02:58.290 --> 03:00.290
i加加

03:00.290 --> 03:02.290
这样的话我们就能便利obj

03:02.290 --> 03:06.290
这个obj里的每一个数组

03:06.290 --> 03:08.290
数组里的每一个元素

03:08.290 --> 03:10.290
都要对应到我代理数组里的每一个元素

03:10.290 --> 03:12.290
对吧

03:12.290 --> 03:14.290
construct aproxy

03:14.290 --> 03:18.290
vmobj

03:18.290 --> 03:20.290
di个

03:20.290 --> 03:22.290
name space

03:22.290 --> 03:24.290
是吧

03:24.290 --> 03:26.290
数组里的每一个元素的修改

03:26.290 --> 03:28.290
我们也得知道是吧

03:28.290 --> 03:30.290
数组里的每一个元素的修改

03:30.290 --> 03:32.290
然后最后呢

03:32.290 --> 03:34.290
这个是数组里的每一个元素的修改

03:34.290 --> 03:36.290
是吧

03:36.290 --> 03:38.290
然后我们要写一个对数组的修改

03:38.290 --> 03:40.290
我们也得能见证到

03:40.290 --> 03:42.290
我们希望proxyobj

03:42.290 --> 03:44.290
等于一个proxy

03:44.290 --> 03:46.290
ar

03:46.290 --> 03:54.270
传入

03:54.270 --> 03:56.270
vmobj

03:56.270 --> 03:58.270
name space

03:58.270 --> 04:00.270
这就是我即将要写的一个

04:00.270 --> 04:02.270
这就是我即将要写的一个

04:02.270 --> 04:04.270
写在哪呢

04:04.270 --> 04:15.260
现在上入吧

04:17.260 --> 04:19.260
传入了这么几个属性

04:19.260 --> 04:21.260
让人去了

04:21.260 --> 04:28.990
传入了这么几个属性

04:28.990 --> 04:30.990
那这个proxyar

04:30.990 --> 04:32.990
是干嘛的

04:32.990 --> 04:34.990
我们就主要是通过这种方式

04:34.990 --> 04:36.990
来重写一个对象

04:36.990 --> 04:38.990
来重写它的代理对象

04:38.990 --> 04:40.990
看好了我写一个代理对象

04:40.990 --> 04:42.990
light aobj

04:42.990 --> 04:44.990
我最后呢就是

04:44.990 --> 04:46.990
用这个东西要来代理的

04:46.990 --> 04:54.280
这个是代表的是

04:54.280 --> 04:56.280
传接来的是个数组

04:56.280 --> 04:58.280
我要用一个对象去代理的

04:58.280 --> 05:00.280
怎么来代理它

05:00.280 --> 05:02.280
看好了

05:02.280 --> 05:06.680
light aobj

05:06.680 --> 05:08.680
我们先来指定一个这个

05:08.680 --> 05:09.680
是ar

05:09.680 --> 05:14.720
然后我们来写一个tosg

05:14.720 --> 05:16.720
先写同一个吧

05:16.720 --> 05:18.720
tosg

05:18.720 --> 05:20.720
数组的tosg

05:20.720 --> 05:22.720
我们希望是怎么样的

05:22.720 --> 05:24.720
是一个一个的a

05:24.720 --> 05:26.720
tosg

05:26.720 --> 05:28.720
这样的打印是吧

05:28.720 --> 05:34.210
一个一个对象这样打印的

05:34.210 --> 05:36.210
那我们来一个result

05:36.210 --> 05:38.210
变例吧

05:38.210 --> 05:40.210
我们不希望打印出来那种对象的形式

05:40.210 --> 05:42.210
tosg

05:42.210 --> 05:44.210
我们希望打印的是一个一个字符串

05:44.210 --> 05:46.210
i等于0

05:46.210 --> 05:48.210
i小于ar.lans

05:50.210 --> 05:52.210
然后result

05:52.210 --> 05:54.210
加等于ari

05:54.210 --> 05:56.210
是吧因为我们变例了这个数组

05:56.210 --> 05:58.210
对吧变例了这个数组

05:58.210 --> 06:00.210
其实这块就干的是啥

06:00.210 --> 06:02.210
这就是拼串对吧

06:02.210 --> 06:04.210
就是拼串

06:04.210 --> 06:06.210
然后我们

06:06.210 --> 06:08.210
return

06:08.210 --> 06:10.210
result

06:10.210 --> 06:12.210
点subsg

06:12.210 --> 06:14.210
解取一下

06:14.210 --> 06:16.210
解取一下

06:18.210 --> 06:20.210
我这块做的是一个

06:20.210 --> 06:22.210
豆耗控制为了美观一点

06:22.210 --> 06:24.210
那就是从地零位解取到哪

06:24.210 --> 06:28.210
解取到result.lans-2

06:28.210 --> 06:30.210
为什么要-2

06:30.210 --> 06:32.210
因为我后面有两位是吧

06:32.210 --> 06:34.210
一个是控制一个是豆耗

06:34.210 --> 06:36.210
我们要把这两位给他去掉

06:36.210 --> 06:38.210
这就是我们的tosg

06:38.210 --> 06:40.210
这个说一个这个就当娱乐了

06:40.210 --> 06:42.210
我们正式的要写的就是

06:42.210 --> 06:44.210
铺式方法

06:44.210 --> 06:53.310
泡布方法

06:53.310 --> 06:55.310
然后save的方法

06:55.310 --> 06:58.750
最后是安save的方法

06:58.750 --> 07:03.540
我要重新代理这几个方法

07:03.540 --> 07:05.540
我要重新代理这几个方法

07:05.540 --> 07:07.540
我要重新代理这几个方法

07:07.540 --> 07:09.540
那我们就挨个添加代理

07:09.540 --> 07:11.540
我来写一个方法

07:11.540 --> 07:13.540
挨个来给他们添加代理

07:13.540 --> 07:15.540
方式

07:15.540 --> 07:17.540
define

07:17.540 --> 07:19.540
array

07:19.540 --> 07:21.540
方式

07:21.540 --> 07:23.540
重新来对他们来进行代理

07:25.540 --> 07:27.540
传入一个obj

07:27.540 --> 07:29.540
传入一个这个

07:29.540 --> 07:31.540
方法

07:31.540 --> 07:33.540
传入一个

07:33.540 --> 07:37.040
这个命名空间

07:37.040 --> 07:39.040
最后把这vm

07:39.040 --> 07:41.040
传进来

07:41.040 --> 07:43.040
我们这个每一个方法里面

07:43.040 --> 07:45.040
传vm要形成一个规范

07:45.040 --> 07:47.040
这个就是我们这个小的

07:47.040 --> 07:49.040
这个项目的一个规范

07:49.040 --> 07:51.040
每个项目里就都尽量有这个vm

07:51.040 --> 07:53.040
这样的话他们时时刻刻都能找到

07:53.040 --> 07:56.540
自己的本体在那

07:56.540 --> 07:58.540
然后我们来这样定义一个

07:58.540 --> 08:00.540
array

08:00.540 --> 08:02.540
proto

08:02.540 --> 08:07.200
图的这个圆形

08:07.200 --> 08:09.200
找到这个数组圆形

08:09.200 --> 08:11.200
看好了我这会要怎么写

08:11.200 --> 08:13.200
比如说我们要重写save的方法

08:13.200 --> 08:15.200
比如说我们要重写save的方法

08:15.200 --> 08:17.200
define array

08:17.200 --> 08:20.700
function

08:20.700 --> 08:22.700
点

08:22.700 --> 08:24.700
因为要有这个类似指向

08:24.700 --> 08:26.700
我们传进去一个vm

08:26.700 --> 08:28.700
obj

08:28.700 --> 08:30.700
这是要是啥

08:30.700 --> 08:32.700
这个是不是就是我们要

08:32.700 --> 08:34.700
代理的这个对象

08:34.700 --> 08:36.700
然后呢哪个方法呢

08:36.700 --> 08:38.700
push

08:38.700 --> 08:40.700
name space

08:40.700 --> 08:42.700
vm

08:42.700 --> 08:46.850
我把这些东西都传进去是吧

08:46.850 --> 08:48.850
我把这些东西都传进去

08:48.850 --> 08:50.850
看好了这会该怎么代理

08:50.850 --> 08:52.850
我直接来写object

08:52.850 --> 08:54.850
点

08:54.850 --> 08:58.800
define property

08:58.800 --> 09:00.800
给哪个对象形代理

09:00.800 --> 09:02.800
给这个对象形代理

09:02.800 --> 09:04.800
给哪个属性形成代理

09:04.800 --> 09:06.800
给这个属性形成代理

09:06.800 --> 09:08.800
代理的是

09:08.800 --> 09:10.800
我先设置两个字

09:10.800 --> 09:12.800
可没举的

09:12.800 --> 09:14.800
然后呢再设置一个可配置

09:14.800 --> 09:16.800
我要代理的是谁呢

09:16.800 --> 09:18.800
我要代理的是value

09:18.800 --> 09:20.800
在当他调用这个

09:20.800 --> 09:22.800
value这个属性的时候

09:22.800 --> 09:24.800
不是这个value这个属性

09:24.800 --> 09:26.800
因为你这个push

09:26.800 --> 09:28.800
我这个是个名字是吧

09:28.800 --> 09:30.800
push是个名字是吧

09:30.800 --> 09:32.800
他的value是那个对象

09:32.800 --> 09:34.800
他的value是那个function

09:34.800 --> 09:36.800
对于obj来说

09:36.800 --> 09:38.800
对于obj这个对象来说

09:38.800 --> 09:40.800
push只是个名字是吧

09:40.800 --> 09:42.800
他对用了这个push的这个值

09:42.800 --> 09:44.800
是个对象他相当于是这么写的是吧

09:44.800 --> 09:46.800
push冒号方式对吧

09:46.800 --> 09:48.800
相当于是这样的

09:48.800 --> 09:50.800
所以说这个push

09:50.800 --> 09:52.800
他只是个名字

09:52.800 --> 09:54.800
我要对这个名字

09:54.800 --> 09:56.800
重新再来

09:56.800 --> 09:58.800
进行一个代理

09:58.800 --> 10:00.800
传入一个function

10:00.800 --> 10:05.200
因为你可以能可能往这个push里面

10:05.200 --> 10:07.200
传入很多的参数嘛

10:07.200 --> 10:09.200
对吧

10:09.200 --> 10:11.200
好了我来获得一个

10:11.200 --> 10:13.200
original

10:13.200 --> 10:17.090
等于

10:17.090 --> 10:19.090
arrayproto

10:19.090 --> 10:21.090
的funk

10:21.090 --> 10:23.090
就像我们来对他进行操作

10:23.090 --> 10:25.090
比如说是push操作

10:25.090 --> 10:27.090
我们最后是不是还是得用的是array的push

10:27.090 --> 10:29.090
只不过我们在中间

10:29.090 --> 10:31.090
可以干点别的事而已

10:31.090 --> 10:33.090
是吧

10:33.090 --> 10:35.090
他之前用的是array的push

10:35.090 --> 10:37.090
我们现在其实也得用array的push

10:37.090 --> 10:42.510
play吧

10:46.510 --> 10:48.510
因为他可以直接

10:48.510 --> 10:50.510
传入一个数组为参数是吧

10:52.510 --> 10:54.510
我们来

10:54.510 --> 10:56.510
const

10:56.510 --> 10:58.510
一个什么呢const的一个result

10:58.510 --> 11:00.510
这就是

11:00.510 --> 11:02.510
进行了这个操作了之后的返回结果

11:02.510 --> 11:04.510
是吧

11:04.510 --> 11:09.740
我们给他return出去

11:09.740 --> 11:11.740
这个操作了之后呢

11:11.740 --> 11:13.740
我们就能在这块

11:13.740 --> 11:17.120
拿到什么了呢

11:17.120 --> 11:19.120
我们就能在这块

11:19.120 --> 11:21.120
拿到了我们操作的是哪一个数组

11:21.120 --> 11:23.120
是吧

11:23.120 --> 11:25.120
我们用这种方式就能获得到

11:25.120 --> 11:27.120
他修改了数组

11:27.120 --> 11:29.120
怎么进行修改的

11:29.120 --> 11:31.120
是push啊还是pub啊之类的

11:31.120 --> 11:33.120
是吧

11:33.120 --> 11:35.120
我们能在这能获得到他是否修改的数组

11:35.120 --> 11:43.360
在这获取到的是否修改的数组

11:43.360 --> 11:45.360
我们再来调一下

11:45.360 --> 11:47.360
name space是什么

11:47.360 --> 11:49.360
这是push方法是吧

11:49.360 --> 11:51.360
我们把这四个I格写一下

11:51.360 --> 11:53.360
那就是

11:53.360 --> 11:57.250
复制

11:57.250 --> 11:59.250
第一个是push,第二个是pub

11:59.250 --> 12:01.250
第三个是shift

12:01.250 --> 12:03.250
第四个是unshift

12:05.250 --> 12:07.250
然后

12:07.250 --> 12:09.250
我要return回去的是啥呀

12:09.250 --> 12:11.250
我要return回去的是这个AR是吧

12:11.250 --> 12:13.250
我把这个数组

12:13.250 --> 12:15.250
代理完了之后我要return回去这个AR

12:15.250 --> 12:17.250
但是我这个时候AR是啥呀

12:17.250 --> 12:19.250
AR还是我原来的那个是吧

12:19.250 --> 12:26.460
我要怎么给它复上去

12:26.460 --> 12:28.460
我让这个AR的这个

12:28.460 --> 12:30.460
proto等于obj

12:30.460 --> 12:32.460
用这样的方式

12:32.460 --> 12:34.460
来对数组来进行代理

12:34.460 --> 12:36.460
用这样的方式来对数组进行代理

12:36.460 --> 12:38.460
这一块稍微比较绕

12:38.460 --> 12:40.460
这块稍微比较绕

12:40.460 --> 12:42.460
尤其是对这个obj代理的这一块

12:42.460 --> 12:44.460
这个

12:44.460 --> 12:46.460
push他只是个名字

12:46.460 --> 12:48.460
你要想象的是obj是个对象

12:48.460 --> 12:50.460
它是个对象

12:50.460 --> 12:52.460
push是个属性

12:52.460 --> 12:54.460
它的值是个方式

12:54.460 --> 12:56.460
所以我们对它的这个值来进行代理

12:56.460 --> 12:58.460
对它的这个值来进行代理

12:58.460 --> 13:00.460
push只是个属性

13:00.460 --> 13:02.460
value是它的值

13:02.460 --> 13:04.460
对它的这个属性来进行代理

13:04.460 --> 13:06.460
如果你调用的是这个属性

13:06.460 --> 13:08.460
那实际上走的是我们这个

13:08.460 --> 13:10.460
我们这个中间就会打印一行这个

13:10.460 --> 13:12.460
我们来试一下运行一下

13:14.460 --> 13:16.460
比如说我要执行test.list

13:18.460 --> 13:20.460
test.push

13:20.460 --> 13:22.460
再来一个

13:22.460 --> 13:24.460
比如说再来一个道

13:24.460 --> 13:26.460
b

13:26.460 --> 13:28.460
21

13:28.460 --> 13:30.460
看 是吧

13:30.460 --> 13:32.460
它会打印出来

13:32.460 --> 13:34.460
我对list的进行了修改

13:34.460 --> 13:36.460
它会打印出来我对list的进行了修改

13:36.460 --> 13:38.460
是吧 这样的话

13:38.460 --> 13:40.460
我们就能坚定到数组的变化

13:40.460 --> 13:42.460
在这我们就能坚定到数组的变化

13:42.460 --> 13:44.460
这块其实就是

13:44.460 --> 13:46.460
而是对数组的一个

13:46.460 --> 13:48.460
方法的代理

13:48.460 --> 13:50.460
vue它本质上它也是这么做的

13:50.460 --> 13:52.460
vue的它本质上也是这么做的

13:52.460 --> 13:54.460
所以大家主要是来了解一下

13:54.460 --> 13:56.460
proxy这一块

13:56.460 --> 13:58.460
proxy这一块除了

13:58.460 --> 14:00.460
有简单的代理一个基本的属性之外

14:00.460 --> 14:02.460
还可以代理属性嵌套

14:02.460 --> 14:04.460
对线嵌套对线

14:04.460 --> 14:06.460
是吧

14:06.460 --> 14:08.460
还能够代理这样的数组

14:08.460 --> 14:10.460
当然了

14:10.460 --> 14:12.460
它还代理了其他的方法

14:12.460 --> 14:14.460
比如说So的方法

14:14.460 --> 14:16.460
在网上写了

14:16.460 --> 14:18.460
其实写法都一样

14:18.460 --> 14:20.460
只要你再这块调用一下就行

14:20.460 --> 14:22.460
所以说咱就不一一网上写了

14:22.460 --> 14:24.460
写四个最基本的就ok了

14:24.460 --> 14:26.460
还有个toastrin的是吧

14:26.460 --> 14:28.460
那这个呢

14:28.460 --> 14:30.460
就是我们代理数组的一块的内容

14:30.460 --> 14:32.460
这一节课后

14:32.460 --> 14:34.460
希望大家能在这块开始

14:34.460 --> 14:36.460
把前三节

14:36.460 --> 14:38.460
我们从第一节的代理

14:38.460 --> 14:40.460
到第二节的代理嵌套对线

14:40.460 --> 14:42.460
到这一节的代理数组

14:42.460 --> 14:44.460
proxy来之后

14:44.460 --> 14:46.460
我们就要来说挂载了

14:46.460 --> 14:48.460
说挂载的时候

14:48.460 --> 14:50.460
就会有虚拟dome了

14:50.460 --> 14:52.460
那一块就是另一个大块的

14:52.460 --> 14:54.460
代理的这一块

14:54.460 --> 14:56.460
主要就这么多

14:56.460 --> 14:58.460
代理的这一块主要是来监听

14:58.460 --> 15:00.460
我们数据对象的变化

15:00.460 --> 15:02.460
监听数据对象的变化

15:02.460 --> 15:04.460
以及我监听的是

15:04.460 --> 15:06.460
哪一个对象发生了变化

15:06.460 --> 15:08.460
是跟目录下的

15:08.460 --> 15:10.460
比如说content发生了变化

15:10.460 --> 15:12.460
这个目录下的对象理的

15:12.460 --> 15:14.460
比如说ob接点x发生了变化

15:16.460 --> 15:18.460
我们现在基本上

15:18.460 --> 15:20.460
已经实现了代理对象的功能

15:20.460 --> 15:22.460
是吧

15:22.460 --> 15:24.460
然后把它复制到了data里

15:24.460 --> 15:26.460
那下一集开始

15:26.460 --> 15:28.460
我们来下一集能说一个简单的是吧

15:28.460 --> 15:30.460
可瑞的方法

15:30.460 --> 15:31.460
可瑞的方法

15:31.460 --> 15:33.460
myser什么的都比较简单

15:33.460 --> 15:35.460
那我们下一集来说

