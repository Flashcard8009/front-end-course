WEBVTT

00:01.520 --> 00:03.520
哈喽 大家好

00:03.520 --> 00:08.520
上一集咱们说了一个简单的内容渲染

00:08.520 --> 00:10.520
是吧 内容渲染

00:10.520 --> 00:15.520
然后这一集我们来说一下现在的问题

00:15.520 --> 00:17.520
看一下

00:17.520 --> 00:20.520
我们还是打开这个页面

00:20.520 --> 00:21.520
我现在刷新了之后

00:21.520 --> 00:24.520
确实我的数值可以被刷新上去了

00:24.520 --> 00:26.520
但是现在还有个问题

00:26.520 --> 00:29.520
比如说我现在掉test.content

00:29.520 --> 00:30.520
应该是panel对吧

00:30.520 --> 00:32.520
我要给它修改一下

00:32.520 --> 00:34.520
我让它等于multi

00:34.520 --> 00:39.520
你会发现我这个值修改 是吧

00:39.520 --> 00:43.520
然后test的data下的content也改成multi

00:43.520 --> 00:45.520
但是页面上的东西不变

00:45.520 --> 00:47.520
但是页面上的东西不变

00:47.520 --> 00:48.520
这是为什么

00:48.520 --> 00:50.520
是不是因为我们proxy这块

00:50.520 --> 00:51.520
虽然修改了

00:51.520 --> 00:53.520
但是我只打印了一下

00:53.520 --> 00:55.520
我只打印了一下

00:55.520 --> 00:57.520
可以看到我们页面上

00:57.520 --> 00:59.520
它应该只打印了一个content

00:59.520 --> 01:03.520
但是它并没有重新渲染

01:03.520 --> 01:05.520
但是它并没有重新渲染

01:05.520 --> 01:07.520
当我们修改的时候

01:07.520 --> 01:08.520
我们能知道什么

01:08.520 --> 01:12.520
我们修改的是哪一个属性值 是吧

01:12.520 --> 01:14.520
我们能知道我们修改的是哪一个属性

01:14.520 --> 01:17.520
所以我们现在需要的是

01:17.520 --> 01:20.520
通过我们属性值

01:20.520 --> 01:25.520
然后来查找到有哪些节点应用的属性

01:25.520 --> 01:26.520
我们来查找

01:26.520 --> 01:28.520
先哪些节点应用的属性

01:28.520 --> 01:33.520
然后重新的去渲染这些节点

01:33.520 --> 01:36.520
Render 我们给提供一个方法

01:36.520 --> 01:38.520
之前我们应该没有

01:38.520 --> 01:41.520
来一个叫做export function

01:41.520 --> 01:43.520
RenderData

01:43.520 --> 01:45.520
传入一个vm

01:45.520 --> 01:49.520
然后传入一个什么

01:49.520 --> 01:52.520
data 或者叫timeplate

01:52.520 --> 01:53.520
data

01:53.520 --> 01:55.520
哪一个数据

01:55.520 --> 01:57.520
比如说

01:57.520 --> 01:59.520
刷新的一个content

01:59.520 --> 02:01.520
这个是个啥

02:01.520 --> 02:03.520
是不是对应了我们这里的模板

02:03.520 --> 02:04.520
对吧

02:04.520 --> 02:06.520
是不是对应了我们这里的模板

02:06.520 --> 02:08.520
我们用这个模板去找

02:08.520 --> 02:10.520
看看能不能找出来使用了

02:10.520 --> 02:14.520
这个模板的Vnode

02:14.520 --> 02:16.520
我们去这里查一下

02:16.520 --> 02:18.520
我们通过timeplate.vnode

02:18.520 --> 02:20.520
去查找一下点guide

02:20.520 --> 02:22.520
传进来的data

02:22.520 --> 02:23.520
来查找一下

02:23.520 --> 02:26.520
不会有一堆的vnode

02:26.520 --> 02:30.520
查出来的肯定多的是数组

02:30.520 --> 02:37.150
如果vnode不等于空

02:37.150 --> 02:40.150
就代表查出来的

02:40.150 --> 02:44.150
我们奉勋完 变定

02:44.150 --> 02:46.150
来的一个i的为0

02:46.150 --> 02:51.150
i小于vnode.lanz i加加

02:52.150 --> 02:55.150
然后这里面的vnode

02:55.150 --> 02:57.150
就是这些阶段 是吧

02:57.150 --> 02:59.150
我们来打印一下

02:59.150 --> 03:04.150
搜了点logvnode

03:04.150 --> 03:07.150
我们来打印一下

03:07.150 --> 03:09.150
然后我们让这块更新了之后

03:09.150 --> 03:11.150
proxy的set更新了之后

03:11.150 --> 03:13.150
我们调用一下

03:13.150 --> 03:16.150
比如说这里面

03:16.150 --> 03:18.150
我们调用一下

03:18.150 --> 03:19.150
run data

03:19.150 --> 03:20.150
传谁

03:20.150 --> 03:22.150
一个是vm 是吧

03:22.150 --> 03:25.680
run data

03:25.680 --> 03:27.680
一个是vm 是吧

03:27.680 --> 03:28.680
另一个呢

03:28.680 --> 03:30.680
get name space 是吧

03:30.680 --> 03:32.680
我们得拿什么

03:32.680 --> 03:34.680
拿到它的命名空间

03:34.680 --> 03:36.680
拿到它的命名空间

03:36.680 --> 03:38.680
比如说我改的是x

03:38.680 --> 03:39.680
那是谁的x

03:39.680 --> 03:41.680
是gundata

03:41.680 --> 03:43.680
跟路径下的x

03:43.680 --> 03:45.680
还是obj的x 是吧

03:45.680 --> 03:48.680
我们得拿上name space

03:48.680 --> 03:50.680
拿上name space

03:53.630 --> 03:55.630
我在这块.js

03:57.630 --> 03:59.630
然后我们有两个地方

03:59.630 --> 04:01.630
有这个set的方法 是吧

04:01.630 --> 04:05.630
一个是给gundata

04:05.630 --> 04:07.630
这块来设置代理的

04:07.630 --> 04:09.630
还有一个是给我们跟路径下来设置代理的

04:09.630 --> 04:10.630
是吧

04:10.630 --> 04:13.630
给我们vio一堆下来设置属性

04:13.630 --> 04:15.630
我给它放到这儿来

04:15.630 --> 04:17.630
写上两个地方

04:17.630 --> 04:20.630
然后这块其实也应该写上

04:20.630 --> 04:24.010
这个是数组的一块

04:24.010 --> 04:27.700
然后我加上这个了之后

04:27.700 --> 04:29.700
我把咱们的打印给删除掉

04:29.700 --> 04:31.700
下面没有打印

04:31.700 --> 04:35.270
好

04:35.270 --> 04:37.270
刷新了之后

04:37.270 --> 04:38.270
内容不变 是吧

04:38.270 --> 04:39.270
然后看一下

04:39.270 --> 04:41.270
我要修改一下

04:41.270 --> 04:43.270
test.content

04:43.270 --> 04:47.270
把它从panda修改成monkey

04:47.270 --> 04:49.270
回车

04:49.270 --> 04:51.270
它会给我打印出来一个节点

04:51.270 --> 04:53.270
来告诉我

04:53.270 --> 04:57.270
这个节点用到了panda

04:57.270 --> 04:59.270
这个节点用到了

04:59.270 --> 05:01.270
刚才我们用的这个模板

05:01.270 --> 05:03.270
我如果改的是另一个

05:03.270 --> 05:07.270
test.description

05:07.270 --> 05:09.270
把它改成abcd

05:09.270 --> 05:11.270
它就得给我打出两个节点

05:11.270 --> 05:12.270
是吧

05:12.270 --> 05:13.270
因为上面这个节点

05:13.270 --> 05:14.270
和下面这个txt

05:14.270 --> 05:16.270
我都用了这个模板

05:16.270 --> 05:19.270
只有这个是用了两个地方

05:19.270 --> 05:21.270
还记得吧

05:21.270 --> 05:23.270
上面这一串文字

05:23.270 --> 05:25.270
包含了两个节点

05:25.270 --> 05:27.270
下面这个串文字包含了一个节点

05:27.270 --> 05:29.270
当我修改content的时候

05:29.270 --> 05:31.270
只有这一串

05:31.270 --> 05:33.270
这一块txt的节点

05:33.270 --> 05:35.270
引用了content

05:35.270 --> 05:37.270
但是当我修改description的时候

05:37.270 --> 05:39.270
就有两个节点

05:39.270 --> 05:41.270
引用了description

05:41.270 --> 05:42.270
所以说

05:42.270 --> 05:44.270
我们现在可以打印出来了

05:44.270 --> 05:45.270
打印出来之后

05:45.270 --> 05:46.270
还不行 是吧

05:46.270 --> 05:47.270
你把这个值给改了

05:47.270 --> 05:49.270
我们上面这个值

05:49.270 --> 05:50.270
把它给改了之后

05:50.270 --> 05:52.270
我们在这怎么改

05:52.270 --> 05:53.270
其实在这一块儿

05:53.270 --> 05:54.270
改就很简单了 是吧

05:54.270 --> 05:55.270
直接就调了

05:55.270 --> 05:57.270
我们现成的random node

05:57.270 --> 05:58.270
是吧

05:58.270 --> 05:59.270
它就擅长干这个

05:59.270 --> 06:01.270
它就是来渲染节点的

06:03.270 --> 06:06.840
vnode

06:06.840 --> 06:07.840
这样就完事了

06:07.840 --> 06:09.840
我们可以用这样的方式

06:09.840 --> 06:10.840
把我们这个节点

06:10.840 --> 06:11.840
给它渲染过来

06:11.840 --> 06:12.840
比如说

06:12.840 --> 06:13.840
我们来试验一下

06:13.840 --> 06:16.840
test.content

06:16.840 --> 06:18.840
等于

06:18.840 --> 06:19.840
monkey

06:19.840 --> 06:20.840
回车了

06:20.840 --> 06:21.840
回车

06:21.840 --> 06:22.840
看到了吧

06:22.840 --> 06:23.840
瞬间就变了

06:23.840 --> 06:25.840
这个就瞬间就变了

06:25.840 --> 06:29.840
然后test.description

06:29.840 --> 06:32.840
等于abcd

06:32.840 --> 06:33.840
回车

06:33.840 --> 06:34.840
是吧

06:34.840 --> 06:36.840
这两个abcd都变了

06:36.840 --> 06:37.840
老头说

06:37.840 --> 06:38.840
这个太简单

06:38.840 --> 06:39.840
老师 这个太简单

06:39.840 --> 06:41.840
对相套对相的这种情况

06:41.840 --> 06:43.840
咱看一下好不好使

06:43.840 --> 06:45.840
对相套对相

06:45.840 --> 06:47.840
咱这不是有OBGM 是吧

06:47.840 --> 06:49.840
我带这块给它放一个放盒吧

06:49.840 --> 06:51.840
br

06:51.840 --> 06:53.840
然后这块输入一个

06:53.840 --> 06:56.840
obg.x

06:56.840 --> 06:58.840
农版字路串是吧

06:58.840 --> 07:00.840
obg.x

07:00.840 --> 07:02.840
这边有一个obg.x

07:02.840 --> 07:04.840
我希望把obg.x

07:04.840 --> 07:05.840
给它打印出来

07:05.840 --> 07:07.840
看一下行不行

07:08.840 --> 07:09.840
是吧

07:09.840 --> 07:10.840
panda say hello

07:10.840 --> 07:11.840
什么的

07:11.840 --> 07:12.840
这个都没有什么问题 是吧

07:12.840 --> 07:14.840
然后

07:14.840 --> 07:15.840
我们来找到

07:15.840 --> 07:16.840
test.obg.x

07:16.840 --> 07:18.840
现在是等于1 是吧

07:18.840 --> 07:19.840
我让它等于6

07:19.840 --> 07:20.840
回车

07:20.840 --> 07:21.840
是吧

07:21.840 --> 07:22.840
瞬间就等于6了

07:22.840 --> 07:23.840
为啥

07:23.840 --> 07:24.840
因为它传过来的

07:24.840 --> 07:25.840
你看吧

07:25.840 --> 07:26.840
它传过来的

07:26.840 --> 07:28.840
是obg.x

07:28.840 --> 07:30.840
我们打印了一下

07:30.840 --> 07:31.840
它这个name-4-8

07:31.840 --> 07:32.840
它传过来的时候

07:32.840 --> 07:33.840
就是obg.x

07:33.840 --> 07:34.840
然后我们这块写的

07:34.840 --> 07:35.840
就是obg.x

07:35.840 --> 07:37.840
它能够认识出来

07:37.840 --> 07:38.840
是吧

07:38.840 --> 07:39.840
你这个obg.x

07:39.840 --> 07:40.840
改了

07:40.840 --> 07:41.840
我们这个obg

07:41.840 --> 07:42.840
我这块也认识这个

07:42.840 --> 07:44.840
所以我这块有个认识

07:44.840 --> 07:45.840
好了

07:45.840 --> 07:46.840
这个就是

07:46.840 --> 07:47.840
我们对象

07:47.840 --> 07:48.840
套对象的这种

07:48.840 --> 07:49.840
在点儿这种情况下的

07:49.840 --> 07:50.840
也OK

07:50.840 --> 07:51.840
不是说直接

07:51.840 --> 07:52.840
某一个值改了

07:52.840 --> 07:53.840
我们改不了

07:53.840 --> 07:54.840
不至于

07:54.840 --> 07:55.840
这样的情况下

07:55.840 --> 07:56.840
我们还都OK

07:59.840 --> 08:00.840
然后

08:00.840 --> 08:02.840
我们再试一下leaf

08:02.840 --> 08:03.840
leaf的

08:03.840 --> 08:04.840
现在应该是不好使的

08:05.840 --> 08:06.840
也不一定

08:06.840 --> 08:07.840
leaf的有了

08:07.840 --> 08:08.840
情况下好使

08:08.840 --> 08:09.840
我看一下

08:09.840 --> 08:10.840
我在这边

08:10.840 --> 08:11.840
这样写

08:11.840 --> 08:12.840
leaf

08:12.840 --> 08:13.840
看到leaf

08:13.840 --> 08:14.840
我写在这了

08:15.840 --> 08:21.160
我刷新

08:22.160 --> 08:23.160
它这个是obg.x

08:23.160 --> 08:24.160
都好

08:24.160 --> 08:25.160
obg.x

08:25.160 --> 08:26.160
它应该是

08:26.160 --> 08:28.160
调用了leaf的图词运

08:28.160 --> 08:30.160
leaf的点儿图词运

08:31.160 --> 08:32.160
不行是吧

08:33.160 --> 08:34.160
我看到

08:35.160 --> 08:36.160
我只是

08:37.160 --> 08:38.160
重写了

08:38.160 --> 08:39.160
它这些方法

08:40.160 --> 08:41.160
显示不出来

08:41.160 --> 08:42.160
现在这块

08:42.160 --> 08:43.160
看下来

08:44.160 --> 08:46.160
其实我们主要是还没有写

08:46.160 --> 08:47.160
wefo这些东西

08:47.160 --> 08:49.160
等着我们之后写了

08:49.160 --> 08:50.160
wefo这些东西

08:50.160 --> 08:51.160
应该就OK

08:51.160 --> 08:52.160
我们先不看leaf

08:52.160 --> 08:54.160
咱们还有很多东西没写

08:54.160 --> 08:56.160
leaf的等到咱们下下集

08:56.160 --> 08:58.160
下下集就应该开始来写

08:58.160 --> 08:59.160
wefo的

08:59.160 --> 09:01.160
咱们来写wefo的时候

09:01.160 --> 09:02.160
咱们再来说leaf的

09:02.160 --> 09:03.160
我还没开始

09:03.160 --> 09:04.160
往这写东西

09:04.160 --> 09:06.160
这块处理leaf的东西太少

09:06.160 --> 09:08.160
咱先不看leaf的

09:08.160 --> 09:10.160
obg.x的这种好写的

09:10.160 --> 09:11.160
咱先不看leaf的

09:12.160 --> 09:13.160
obg.x的这种好写

09:13.160 --> 09:14.160
然后这种好写

09:14.160 --> 09:15.160
这种好写

09:16.160 --> 09:17.160
应该就没有什么了

09:17.160 --> 09:18.160
这块

09:18.160 --> 09:20.160
leaf的会单独处理

09:20.160 --> 09:22.160
咱们后面再说到leaf的相关的时候

09:22.160 --> 09:24.160
咱们再单独处理leaf

09:25.160 --> 09:27.160
我们把leaf的先给干掉

09:31.370 --> 09:33.370
现在有几种情况的

09:33.370 --> 09:34.370
一个是单个的

09:34.370 --> 09:35.370
一个是obg.x

09:35.370 --> 09:36.370
人手签套的

09:36.370 --> 09:37.370
应该还好

09:37.370 --> 09:39.370
现在这些就基本上是够用的

09:39.370 --> 09:41.370
这样的情况下就基本够用

09:42.370 --> 09:44.370
然后咱们下一集来说一个什么

09:44.370 --> 09:46.370
来说一个这种情况

09:46.370 --> 09:50.000
这块我写的input

09:50.000 --> 09:52.310
大家都知道

09:52.310 --> 09:54.310
这个可以双向往定是吧

09:54.310 --> 09:55.310
比如说这块

09:55.310 --> 09:57.310
我希望写一个vmodel

09:59.310 --> 10:01.310
比如说vmodel等于obg.x

10:03.310 --> 10:06.310
我希望我写了vmodel了之后

10:06.310 --> 10:08.310
它就能跟我实现了双向往定

10:08.310 --> 10:09.310
现在肯定是不好使的

10:09.310 --> 10:11.310
我还根本就没有任何地方

10:11.310 --> 10:13.310
来处理vmodel这种东西

10:14.310 --> 10:15.310
也就是说我们之前

10:15.310 --> 10:17.310
识别的都是什么

10:17.310 --> 10:19.310
都是节点里的txt

10:19.310 --> 10:21.310
我们之前识别的都是

10:21.310 --> 10:23.310
节点里的txt

10:23.310 --> 10:25.310
但是我们还从来没有识别过

10:25.310 --> 10:27.310
标签上的属性

10:27.310 --> 10:29.310
比如说我们mount

10:29.310 --> 10:31.310
咱们现在处理的都是什么

10:36.310 --> 10:38.310
这个是mount

10:38.310 --> 10:40.310
挂载prepare

10:41.310 --> 10:44.310
咱们现在识别的

10:44.310 --> 10:46.310
做这种识别的都是

10:46.310 --> 10:48.310
node太过为3的时候

10:48.310 --> 10:50.310
当node太过为1的时候

10:50.310 --> 10:52.310
我就知道只知道往下传

10:52.310 --> 10:54.310
我们还没有什么识别

10:54.310 --> 10:56.310
我们还没有什么识别

10:56.310 --> 10:58.310
所以说在这块现在不行

10:58.310 --> 11:00.310
就像刚才这种

11:00.310 --> 11:02.310
刚才我们建立一个节点

11:02.310 --> 11:04.310
然后夸夸就往下传

11:04.310 --> 11:06.310
然后建立的

11:06.310 --> 11:08.310
虚拟道

11:08.310 --> 11:10.310
然后我们还没有任何

11:10.310 --> 11:12.310
对于属性的分析

11:12.310 --> 11:14.310
我们还没有任何对于属性的分析

11:14.310 --> 11:16.310
那我们下一节就来说

11:16.310 --> 11:18.310
我们标签上的这些属性

11:18.310 --> 11:20.310
如何来解析

11:20.310 --> 11:22.310
我们毕竟有很多的东西

11:22.310 --> 11:24.310
都用到了标签上的属性

11:24.310 --> 11:26.310
比如说vf

11:26.310 --> 11:28.310
相信有很多同学都比较期待

11:28.310 --> 11:30.310
vf

11:30.310 --> 11:32.310
vf

11:32.310 --> 11:34.310
确实是很复杂的一个东西

11:34.310 --> 11:36.310
咱们马上就要说到它了

11:36.310 --> 11:38.310
有很多都是在标签上的

11:38.310 --> 11:40.310
比如说微杠办的

11:40.310 --> 11:44.310
这些咱们都得一个人来写一遍

11:44.310 --> 11:46.310
那我们下一节开始

11:46.310 --> 11:50.310
来开始分析标签上的这些属性

11:50.310 --> 11:52.310
来开始来分析标签上的这些属性

11:52.310 --> 11:54.310
然后修改了直了之后

11:54.310 --> 11:56.310
页面讯长大家别着急

11:56.310 --> 11:58.310
咱们现在没有例子

11:58.310 --> 12:00.310
现在还有很多东西

12:00.310 --> 12:02.310
都没对这个例子进行处理

12:02.310 --> 12:04.310
等了咱们vf写完了之后

12:04.310 --> 12:06.310
这个例子的这一块关于数组

12:06.310 --> 12:08.310
这块认为才能真正的写完

12:08.310 --> 12:10.310
到了时候咱们再演示

12:10.310 --> 12:12.310
咱们一点点来

12:12.310 --> 12:14.310
先不要着急

12:14.310 --> 12:16.310
我们现在处理例子的这块东西比较少

12:16.310 --> 12:18.310
那行那下一节我们先来说

12:18.310 --> 12:20.310
一个微杠模特

12:20.310 --> 12:22.310
我们下一节来说微杠模特

