WEBVTT

00:00.820 --> 00:06.220
好了 同学们 那咱们SSR第一张部分的就剩下最后一个东西了

00:06.220 --> 00:07.220
就是Redox

00:07.720 --> 00:11.520
Redox 这一块呢 相对来说 要稍微复杂一些啊

00:11.520 --> 00:15.320
因为Redox 本身呢 它比较复杂

00:15.320 --> 00:20.220
另外呢 Redox 呢 又加上一个SSR 这一块呢 又比较复杂

00:20.220 --> 00:25.420
另外呢 可能大家学了React 之后呢 到现在呢 可能Redox 这一块都忘了差不多了

00:25.420 --> 00:28.520
啊 不过没有关系 我们一节后呢 时间也不长

00:28.620 --> 00:32.320
我们一步一步稳扎稳打 把它这些问题呢 一次解决掉

00:33.020 --> 00:37.220
那么这些可能 我们先把Redox引入进来啊 先把一个融合进来再说

00:37.720 --> 00:43.120
Redox 如果说 使用它最基本的功能的话 那么它跟SSR的话 是没有任何冲突的

00:43.420 --> 00:47.720
因为服务端炫的时候呢 以 因为Redox 本身呢 它是跟平台无关系的

00:47.920 --> 00:50.620
因为我们之前学过Redox 对吧 它甚至跟那个

00:51.020 --> 00:55.520
跟那个就是React 都没有任何关系 我们是通过另外一个东西 把它融合在一起

00:56.520 --> 00:59.920
所以说它在服务端炫的时候呢 本身是没有遇到什么问题的啊

00:59.920 --> 01:04.120
我们后续呢 才会慢慢发现它有些细节的地方了 需要我们处理

01:04.620 --> 01:09.120
好 咱们呢 一步一步来 这一块呢 我们首先导入这个Redox 我们首先安装

01:11.020 --> 01:18.620
安装两个啊 一个React 一个是Redox 本身一个呢 是React Redox 把这两个安装了

01:19.320 --> 01:25.420
好 让它安装啊 这里边工程里边呢 我们建立一个文件夹 这一块东西呢 跟那个SSR没有任何关系

01:25.520 --> 01:32.120
啊 我们先把这个数据呢 导 数据呢 把这个结构啊 写好 这里边呢 我们建立两个文件夹

01:32.620 --> 01:36.420
还记得吗 我们以前做的啊 我们慢慢回忆一下 一个Actions

01:37.620 --> 01:43.320
就是我们这里的写一些Action创建函数来创建Action的 我们通过触发Action来去改变仓库

01:43.920 --> 01:50.020
然后呢 另外一个是Reducer Reducers呢 它里边就记录了很多Reducer对吧 我们通过 然后呢 通过把它整合起来

01:50.620 --> 01:57.120
好 最后呢 我们建立仓库啊 最后呢 我们在In Store里边in这个设定介绍这里边 建立仓库

01:57.420 --> 02:05.420
好 我们先把这个结构写出来 然后我们慢慢来写 所以Action实例 这里边呢 我们建立两个文件啊 一个的是我们这几颗用于测试的

02:05.820 --> 02:06.820
counter啊

02:07.920 --> 02:11.420
counter叫介绍 就是一个数字的增加和减少

02:12.320 --> 02:19.720
另外一个文件呢 是跟电影相关的啊 电影相关的话 我们后续呢 还要去做一些处理 我们先把它写着Movies叫介绍

02:20.020 --> 02:27.820
好 我们一个个写啊 先写这个counter 就是一个数字的增加和减少 那么它有什么样的Action呢 我们首先导出一个ActionAction的类型

02:28.120 --> 02:37.120
啊 我们知道 我们可以把Action的名字呢 写成一个呃 就是独立的字段啊 然后呢 避免反复的硬编吧 我们这里的导出一个

02:37.720 --> 02:39.520
叫做Action

02:41.220 --> 02:47.920
Types 用哪些Action类型呢 我们一共就两个啊 就是改变数据的只有两种方式 一个是增加一个是减少

02:48.220 --> 02:53.620
好 一个是increase 我们这里呢 写上 该加个秘密空间吧 counter increase

02:54.620 --> 02:58.620
然后呢 一个decrease减少啊 counter decrease

02:59.820 --> 03:06.820
好 这是两个Action的名称 然后呢 我们还要导出一些Action创建函数 比较我们导出第一个函数increase

03:07.920 --> 03:13.620
增加这个Action创建函数呢 我们就简单的返回一个对象 因为我们知道Action就是个对象嘛 对吧 我们边写了边复习

03:14.020 --> 03:17.620
Action就是一个普普通通的一个对象 他有两个属性 一个是内形

03:18.020 --> 03:25.220
内形我们在写到这儿了 对吧 另外一个呢 是他的什么呢 他的payload 负债啊 就是我们要做的一件事需要一些额外的信息

03:25.620 --> 03:33.720
那么我们这个increase呢 只是简单的加一 所以说呢 我们这里不需要负债啊 不需要那个负荷payload的 不需要 我们只需要一个给他一个类型 type

03:35.020 --> 03:42.920
Action types increase 那么这样子一看 我们调用这个函数是不是产生一个完整的Action了 对吧 他主要是在帮助我们产生完整的Action的

03:43.520 --> 03:46.120
好 接下来我们再来啊 然后呢 是一个decrease

03:47.120 --> 03:50.920
那么这里呢 我们该产生一个decrease 对吧

03:52.720 --> 03:58.820
那么这样子一来呢 我们counter这个Action创建函数 以及Action的内形呢 就写好了

03:59.820 --> 04:07.520
然后我们再写这个movies 我这里好像写的有问题 movies 就是关于电影的Action创建函数 那么是一样的 我们首先导出

04:07.920 --> 04:15.120
Action是没有任何负重用的 就是一个普普通通的函数 导出一个const action types 这些都一样的

04:16.120 --> 04:22.760
我们电影的就一个数组 对吧 我们就无非就是设置这个数组 那么Action的内想呢 只有一个就是setdata

04:23.160 --> 04:27.640
data 是啊 我给他给明明空间movies setdata 是

04:29.360 --> 04:34.520
ok 然后呢 我们再导出一个action创建函数setdata 是

04:36.200 --> 04:38.680
好 那么这里有没有负灾呢 当然有

04:39.640 --> 04:45.400
因为我们这个action呢 他是要去设置一个电影数组啊 所以说呢 你得给我一个电影数组

04:45.880 --> 04:52.600
因此呢 你把电影数组给我啊 电影数组给我啊 这里边呢 我就帮你产生一个Action 内想呢 就是

04:53.320 --> 04:58.280
action types啊setdata 内想是这个内想 然后呢 payload 呢 就是

04:59.160 --> 05:05.720
playload 就是个data 是对吧 好 ok 那么这里呢 我们两个Action就写好了啊 只有一个

05:06.440 --> 05:09.720
好 action 写好了之后呢 我们关键点来了 要写这个reducer

05:10.120 --> 05:15.240
reducer 就是来处理Action 然后来更改仓库里边内容 然后你给他给他一个Action

05:15.480 --> 05:20.840
那么他根据这个Action来来更改仓库里边内容 好 咱们来写啊 也是两个 一个是conter

05:22.440 --> 05:24.200
叫js 一个是movies

05:26.120 --> 05:31.800
叫js 我们按下来写先写conter conter 这里呢 我们还是啊导出一个函数

05:33.240 --> 05:35.960
因为我们知道reducer就是一个函数 对吧 就是一个函数

05:37.560 --> 05:41.400
嗯 这个函数呢 他接收一个什么呢 有两个参数 一个是

05:41.960 --> 05:47.880
之前的状态 那么这里呢 我可以给他一个默认值 之前的状态呢 比方说这个数字呢 从10开始

05:48.760 --> 05:51.880
然后第二个参数呢 是他的Action 对吧 是他的Action

05:53.240 --> 05:58.280
第二参数是Action 那么当然呢 我们可以在这里解构 因为Action是一个对象吧 我们解构出来 拿出他的type

05:59.160 --> 06:01.080
啊 一共就两个属性 一个type 一个playload

06:01.560 --> 06:08.040
好 那么一传一个Action过来 你把之前的仓库内容传过来 我给你返回一个新的仓库内容啊 就这么简单

06:08.520 --> 06:12.360
那么这里怎么做呢 我们一般来说是用switch啊 看一下这个type值

06:13.160 --> 06:18.360
看一下一个type值等于什么啊 如果说你等于我们这个把Action的内容导入进来

06:20.040 --> 06:20.360
from

06:21.960 --> 06:28.760
Action counter 这边Action types 那么对比一下啊 如果说你的内容呢 是这个increase

06:29.640 --> 06:37.960
啊 如果说你给我传的Action内容是这个 那么我们的状态是不是要返回 返回什么呢 返回stats加1 对吧 注意啊 这里个函数必须要保持存在

06:38.280 --> 06:44.680
不能有任何副作用啊 你不能用加加啊 然后呢 如果说你给我传递的内容呢 是decrease

06:45.560 --> 06:46.040
decrease

06:47.240 --> 06:55.400
好 那么这里呢 我们返回的状态呢 就是减1 对吧 好 default的话 那我们返回的状态自然是原来状态 啊 跟我没关系

06:56.360 --> 07:04.360
别的意思吧 那么这里呢 我们就导出一个reducer啊来处理这个counter 到时候呢 我们使用仓库的时候就触发Action 对吧

07:04.520 --> 07:14.200
Action啊 来 来 Action呢 就可以通过这个创建函数得到得到Action之后呢 我们把Action的交给啊 去触发触发Action的时候呢 他就会找到啊 相应的reducer

07:14.360 --> 07:19.960
那么来进行处理 那么这个理由对头来处理的时候呢 根据这个类型来做不同的处理啊 改变仓库的值

07:20.600 --> 07:25.400
好 那么movice呢 也一样的啊 我们咱们 咱们把它复制过来 无非呢 这里就把改成movice

07:25.960 --> 07:31.640
对吧 那么状态呢 状态默认值呢 是一个空数组啊 我们电影的默认值是一个空数组

07:31.960 --> 07:37.160
然后呢 你给我传的Action里面呢 除了有Type之外呢 还有一个Payload 对吧 还有一个Payload

07:38.440 --> 07:44.840
啊 因为我们知道啊 movice他得到了还有一个Payload 对吧 还有一个复赞啊 这个复贺呢 里面呢 他有就是电影数组

07:45.560 --> 07:50.760
好 那么这里呢 我们判断一下啊 如果说你的Action的类型的话 等于什么呢 等于setDatas

07:51.160 --> 07:58.040
说明什么呢 说明我要给你啊 得到一个新的数组啊 来覆盖原来的数组 那么这里呢 我们就非常简单的来使用一下payload

07:58.840 --> 08:04.680
啊 非常简单的使用一下啊 就把payload的这个数组的返回去 那么就可以覆盖原来的仓库结果了

08:05.720 --> 08:14.120
ok 那么这里呢 我们就写完了 对吧 就写完了啊 Action写完了 Reducer写完了 但是Reducer现在有多个 我们需要合并 对吧 因为我们创建仓库的时候呢

08:14.360 --> 08:19.800
只需要一个Reducer就行了 所以我们要把Reducer合并 因此呢 我们在Reducer里面建立一个index的介绍

08:20.200 --> 08:28.200
它的作用呢 主要来负 主要是来合并啊 这两个Reducer啊 咱们呢 把这两个Reducer导入进来啊 一个是counter

08:30.120 --> 08:33.240
啊 那么counter 导入进来 一个呢 是那个movies

08:34.760 --> 08:38.600
啊 导入进来 那么怎么来合并呢 我们要使用Reducer里面的一个东西

08:39.240 --> 08:42.200
Reducer里面的一个东西 叫做combinedReducers

08:43.160 --> 08:49.400
combinedReducers 那么它的作用呢 主要是把两个Reducer的合为一个啊 合为一个 那么这里直接导出

08:51.970 --> 08:58.130
啊 导出 通过这个combinedReducers 是不是 把两个Reducer传进去啊 counter一个

08:59.250 --> 09:03.570
counter 一个是movies 是吧 它会这个函数呢 它反回一个

09:05.010 --> 09:09.730
完整的啊 一个合并之后的Reducer Reducer还是个函数嘛 它反回来还是个函数

09:10.290 --> 09:16.690
ok 那么这里呢 搞定了 好 那么我们把合并之后呢 我们呢 怎么来创建仓库呢 我们现在创建仓库了

09:17.010 --> 09:20.050
创建仓库的话 我们要使用Reducers里面的一个东西

09:21.570 --> 09:28.210
Reducers里面有一个叫做createStone 对吧 创建一个仓库 好 那么怎么创建仓库呢

09:28.210 --> 09:35.570
createStone里面 你只需要给它一个Reducer就行了 Reducers哪来 哪来 是不是来自于Reducers

09:36.370 --> 09:39.970
来自于这个Reducers来自于这

09:40.930 --> 09:46.610
渤证会去读这个index.json文件 那么把这个Reducers拿到 放了上 所以创建一个仓库了

09:47.090 --> 09:50.130
好 创建一个仓库之后呢 我们把这个仓库呢 返回即可

09:50.850 --> 09:54.930
export default 把这个仓库返回就完事了

09:55.970 --> 10:00.450
好 那么这样子一来了 我们就把仓库的代码就写好了 是吧 你看这个代码是跟那个

10:01.090 --> 10:03.570
浏览器和服务器都是没有任何关系的

10:04.210 --> 10:08.050
另外呢 这个代码呢 跟那个就是rex也没有任何关系

10:08.370 --> 10:12.050
那么现在呢 我们需要在rex里面把这个仓库使用进去

10:12.610 --> 10:19.330
怎么使用呢 其实非常简单 我们在无论是在server端还是在client端都有一个app.js

10:19.330 --> 10:26.610
x 是吧 就是我们的根组件 我们只需要在根组件的最外层去套一个provider就行了 那么因此呢 我们这要安装一个

10:27.490 --> 10:28.130
rex

10:28.690 --> 10:30.930
Reducers 对吧 来进行结合的

10:31.970 --> 10:37.410
那么它会把我们的仓库里面的所有东西呢 放到一个上下文里面 让后续的组件都可以使用

10:38.130 --> 10:39.410
好 那咱们呢 这里导入

10:41.960 --> 10:50.840
from rex reducers 导入这里呢 有一个provider 对吧 它提供了这么一个组件 就在提供数据的 我们只需要把这个provider的小事

10:52.360 --> 10:52.760
小事

10:54.280 --> 11:00.920
然后呢 给他一个什么呢 给他一个stone 就是仓库 仓库来自于哪呢 来自于我们刚才写好的仓库

11:01.800 --> 11:03.160
stone from

11:04.200 --> 11:08.120
吊鞋杠 来自于哪呢 来自于吊鞋杠 来自于stone

11:08.840 --> 11:12.920
来自于这 他默认会许读index的介绍文件 好 把这东西放这

11:13.400 --> 11:19.960
对吧 那么服务团是不是有了 对吧 有了仓库了 那么服务团在宣扬的时候呢 他就会把仓库加进去来进行宣传

11:20.200 --> 11:26.840
那么后续的组件 如果说用到仓库了的数据的话 那么他会把这个数据呢 最终会说宣传到那里 宣传到这个制服串里面

11:27.400 --> 11:28.360
宣传到这个制服串里面

11:29.240 --> 11:34.360
ok 那么接下来客户端这里也要写 这里呢 我们还是一样 把跟他们复制一下吧

11:36.470 --> 11:44.310
而其实大家观察一下这个app.js啊 客户端跟服务端的话 目前不一样的地方在哪呢 目前不一样的地方就在这 对吧 就在这

11:44.390 --> 11:49.350
所以说呢 这个东西呢 你可以考虑考虑 能不能把它写成合并成一个组件啊 实际上是可以的

11:50.310 --> 11:54.710
我给大家提供一个思路吧 里面自己去做 如果说啊 里面有有兴趣的话 自己去做

11:55.110 --> 12:00.070
你可以把这个东西呢 带单独提一个组件 单独提一个组件呢 根据当前是服务器还是客户端

12:00.870 --> 12:03.830
来判断 哎 到底该宣传哪一个组件

12:04.790 --> 12:08.150
那么怎么来判断到底是服务器还是客户端的 以后我就会说

12:09.350 --> 12:19.030
那么这里呢 我们还是一样啊 把这个provider写这 写这 然后呢 我们把这个store加进去啊 大家可以思考一下 现在会不会有问题的

12:19.910 --> 12:20.550
store放进去

12:21.990 --> 12:27.750
好 保存一下啊 接下来我们来运行一下整个工程 看一下行不行啊 有没有爆错

12:29.030 --> 12:30.230
大家想一下会不会爆错呢

12:31.190 --> 12:35.350
状态 他是不会爆错的啊 是不会爆错的 为什么不会爆错呢 因为

12:35.990 --> 12:44.630
我们目前的这个stone 他本身呢 跟平台没有关系啊 服务端扣端都支持的 所以说呢 没有任何问题 那么大家现在看一下啊 我们看一下访问浏览器

12:45.430 --> 12:48.070
服务端也没有爆错的吧 那么看一下浏览器这一块

12:48.870 --> 12:52.310
检查 看一下控制台也没有爆错 是不是都没有爆错 对吧 都没有爆错

12:52.870 --> 12:58.230
好 那么我们的仓库数据在哪呢 是不是真的挂载上去了呢 其实你可以看一下啊 咱们点击这个

12:58.230 --> 13:03.270
component 我们的组件数 你可以看到最外层一个provider 对吧 那么这里stone 是不是

13:03.830 --> 13:10.950
挂载上去了 是没有问题的啊 是没问题的 只不过呢 我们目前通过这个工具呢 是看不到的组件 看不到仓库里面的数据的

13:11.270 --> 13:15.190
那么怎么来看仓库数据呢 我们可以利用这个Ridax这个插件来看

13:15.670 --> 13:18.710
那么这个浏览器插件你们当相信你们之前也安装过的 对吧

13:19.590 --> 13:24.870
在学习react的时候也安装过的 这功能你们当时的学习的时候 我说过啊 这个插件呢 你要做一些配置的

13:25.350 --> 13:30.550
你说在在单码上面做一些改动的 好 咱们来看一下他有什么样的要求 希望你怎么改动

13:31.110 --> 13:37.990
他实际上是希望这样子啊 因为为了编语在浏览器里边调试啊 主要是为了调试 不说一定一定要这样做啊

13:38.470 --> 13:43.910
让我们看的更加清楚仓库里边的数据变化的话 他建议你使用这个插件 这是一个浏览器插件

13:44.310 --> 13:48.070
那么这个插件怎么来用呢 你需要在单码里面呢 做一点改动 就在这

13:48.710 --> 13:51.750
在你创建仓库的时候呢 加上这么一段话

13:52.150 --> 13:58.470
加上这么一段话就行了 因为这个插件呢 他会往这个文 他会往这个浏览器里边呢 注入一个

13:59.030 --> 14:06.710
注入一个全局的属性 那么咱们咱们这里呢 到这个仓库里边来找到创建仓库的代码 那么在这里加上一句话

14:07.350 --> 14:15.590
大家想一想 现在是没有爆错的 现在是一切正常的 只是我没有使用仓库里边的东西 但是我如果说我加上这一句话会不会有问题

14:16.150 --> 14:22.950
明眼人一看就看明白了 对吧 会不会有问题 那一定会有问题的 为什么会出问题呢

14:24.150 --> 14:28.950
客户端没有任何问题 但服务器是不是爆错了 服务器是window is not defined

14:29.510 --> 14:33.110
他说什么 这个window是不存在的 服务器有没有window 是不是没有

14:33.510 --> 14:38.310
对吧 那么这个里面呢 就给大家要思考了 这个玩意是用来干嘛的

14:38.710 --> 14:44.470
是用来我们在扭烂器里面调试用的 跟服务器有没有关系啊 是不是一点关系都没有

14:44.950 --> 14:47.590
因此我们服务器端是完全不需要这个的

14:48.470 --> 14:51.910
所以说呢 这里就造成了一个问题 就是说我们导出的时候啊

14:53.190 --> 14:56.470
我们导出一个什么 导出一个仓库 那么这个仓库呢

14:57.350 --> 15:02.950
服务器端的创建方式跟客户端的创建方式是不一样的 是有一点点区别的

15:03.190 --> 15:07.990
那么这里呢 我们当然也可以在服务器端写一份 客户端写一份啊 不过呢 这样子太

15:08.950 --> 15:14.550
太恶心了啊 这样的代码结构不像不太好 就像我们刚才说的app.js 这两个app.js差不多 对吧

15:14.630 --> 15:18.230
大家可以抽离一下 那么需要判断到底是服务器还是客户端

15:19.190 --> 15:23.670
那么这里呢 我们就需要判断服务器还是客户端 怎么来判断的 一个非常简单的方式

15:24.070 --> 15:26.790
在模块化里边呢 他有一个全局的

15:27.430 --> 15:34.390
变量 叫做globo 啊无论是客户端还是服务器 他都有的每个东西叫做globo啊 在模块化在马里边

15:35.190 --> 15:42.150
那么这个globo是啥呢 这个globo是这样子啊 如果说你是服务器的话 那么他就是个load.js里面的globo对象

15:43.670 --> 15:46.390
如果说你是浏览器的话 那么他就是温斗对象

15:47.110 --> 15:56.150
那么你怎么判断 你怎么判断 你能不能这样判断啊 是不是等于温斗能不能这样判断的 也不行 因为他读到这个代码的时候呢 他发现没有这个变量 他就爆错了啊

15:56.470 --> 15:59.190
服务器又爆错了 所以说你这里要怎么判断的 你可以这样子

15:59.990 --> 16:00.790
叫document

16:01.990 --> 16:09.350
document这个属性是不是只有浏览器才有的 对吧 那么因此呢 我们通过这个属性来判断 到底是不是浏览器

16:09.590 --> 16:12.790
如果说你是一个浏览器的话 OK 那么我们这里呢

16:13.750 --> 16:15.670
给力复制 用这种方式给力复制

16:16.150 --> 16:20.630
l是 如果说你不是浏览器 是服务器的话 那么这个地方我去掉就行了

16:21.350 --> 16:25.750
啊 你看一下 这样子呢 是不是根据不同的状态来产生不同的势动

16:26.150 --> 16:29.590
这样子服务端运行的时候 就会运行这段话 那么导出这个时供

16:30.230 --> 16:34.230
如果是客户端运行的话 那么就会运行这段话 导出客户端的时供

16:34.710 --> 16:40.870
对吧 因为他们是两份代码 然后分开运行的 OK 那么这样子一改了之后呢 我们来看一下啊

16:44.560 --> 16:49.670
重新运行 运行出来了啊 那咱们这里刷新一下

16:51.590 --> 16:57.110
好 你看 客户端这里是不是出来了 而且服务器是不爆错的 对吧 客户端这里出来了 我们来看一下State

16:57.990 --> 17:04.550
那么这里呢 我看到 诶 我们的客户端这一边啊 我们的状态就全部有了 对吧 全部有了 不会是这个数组也有了

17:05.430 --> 17:12.710
好 那么接下来我们再用一下啊 来顺便回忆一下 目前呢 跟ssr呢 就除了这个点之外呢 都没有什么管什么什么区别

17:13.110 --> 17:18.950
这个点呢 只是为了调试的 好 那么接下来呢 我们在这个client里面呢 在配极式里面

17:19.750 --> 17:26.390
好 我们找到这个是通用的 对吧 通用的服务器端也会用 客户端也会用 那么在这里边呢 我们稍微的处理一下吧

17:27.350 --> 17:34.550
像这些css 我就不需要了吧 把三了啊 这些都不需要了 好了 这边的css不要了啊 这个

17:35.350 --> 17:39.350
图片也不要了啊 这些东西呢 都不要了啊 都不要了

17:40.230 --> 17:47.830
啊 都不要了 好 那么这里呢 我们就也不再使用这个State了啊 我们这里能来自于仓库的数据 就是一个数字 然后呢 一个加 一个解

17:48.470 --> 17:55.430
好 那么 既然是仓库啊 我们 那肯定是这里要通过属性传进来 这是个展示组件 属性有三个 一个是number

17:55.910 --> 18:01.270
一个是呢 两个事件啊 事件要传过来 事件处理函数 increase on decrease

18:02.310 --> 18:09.350
啊 那么把这种传给我 那么我这里呢 人家确然一个组件 好来吧 我们用一个p元数吧 一个button

18:09.910 --> 18:19.430
这个是减 减少啊 减少的话onclick 当点击的时候干嘛呢 当点击的时候我交给这个东西来运行啊 on decrease

18:20.390 --> 18:28.390
然后呢 里边呢 有一个是装 啊 number 把number 确定出来 好 下面呢 有一个button 啊 这是加

18:29.910 --> 18:35.110
啊 onclick 那么做成一个非常纯粹的展示组件啊 on increase

18:35.910 --> 18:41.430
ok 那么这里呢 我们就先不着不着就倒出了啊 这里呢 我们写上一个content吧 有这么一个组件

18:42.470 --> 18:48.790
好 那么接下来呢 我们要往这个组件里边去注入 注入这些属性了 对吧 这些属性呢 都可以来自于仓库里边啊

18:48.870 --> 18:54.470
这个属性来自于仓库里边 好 那么这个我们知道 我们要注入属性的话 需要用到什么呢 需要用到这个connex

18:55.430 --> 19:03.750
react 与当时里边的connex就连接连接仓库和我们的组件 好 这个连接里边要传两个参数啊

19:04.150 --> 19:13.270
connex这里边要传两个参数 一个是呢map tomap state to props 什么意思呢 把仓库里边的状态传给属性

19:13.990 --> 19:19.830
第二个呢 是map啊 第二如果说有的话就写 不没有的话就不写啊map dispatch

19:20.870 --> 19:25.110
to props 什么意思呢 当我们把这些事件的处理

19:25.910 --> 19:34.550
作为属向传给它 对吧 我们进行映射 那么我们这自然而然需要写这么两个函数啊 一个是map state to props 当然呢 用建筒函数写这儿也行

19:35.830 --> 19:36.470
一个呢 是

19:38.310 --> 19:38.870
map

19:38.950 --> 19:40.630
dispatch to props

19:42.070 --> 19:47.590
那么把这两个函数一传给它 然后呢 它会返回一个高阶组件 那么这个高阶组件去包装一下我们的conter

19:48.310 --> 19:49.590
就帮大家复习一下

19:50.070 --> 19:56.390
conter 是不是就产生了一个新的组件了 一个新的组件 我们把新的组件导出就行了 那么这个新的组件呢 就是包装之后的组件

19:57.350 --> 20:02.470
好 就是这样子写的 对吧 好 那么这现在就是这两个函数了啊 一个个写 很简单

20:02.870 --> 20:07.430
第一个函数呢 是它会传 它会自动的给你传入一个仓库 整个仓库的状态

20:08.310 --> 20:13.430
然后呢 让你返回一个对象 这个对象里边呢 它就会把对象呢 映射到这个属性里边去

20:14.070 --> 20:19.670
这个对象里面的属性 就是我们需要传给这个组件的属性 那么我们这里有哪些属性需要传递 就一个number

20:20.390 --> 20:23.670
number来自于哪 来自于这个state里面的movies

20:24.550 --> 20:26.630
conter 对吧 来自于这 counter

20:27.430 --> 20:32.150
好 就写完了 对吧 映射属性了 那么映射事件的了 这一块也是一样

20:32.710 --> 20:38.870
啊 你这里呢 它会给你传一个dispatch进来 用来分发 用来分发什么 分发数据的 对吧 分发数据

20:39.190 --> 20:43.910
好 那么这里呢 我们返回 也是返回一个对象啊 这个对象里边也要把各种事件的处理 等下写好

20:44.310 --> 20:48.950
每个事件处理的自然是尔兰是一个函数啊 啊 它有哪两个事件呢 unincrease

20:50.790 --> 20:54.070
这第一个事件啊 第二个事件呢 是undecrease

20:55.510 --> 21:00.470
啊 undecrease ok 那么 unincrease里边呢 我们要做什么呢 无非就是dispatch

21:00.950 --> 21:07.750
触发 触发哪个x 触发哪个x 触发x呢 我们看一下x是创 我们说通过x的创建函数

21:08.390 --> 21:11.510
来得到x 对吧 来自于哪呢 来自于

21:13.190 --> 21:13.510
stone

21:14.310 --> 21:23.830
x is counter 啊 这里边有个x创建函数 increase decrease 对吧 它掉这些函数呢 它都能够得到一个x 啊 得到一个完整的一个行

21:24.470 --> 21:26.310
unincrease呢 我就调用increase

21:27.270 --> 21:29.990
undecrease呢 我就调用dispatch

21:30.790 --> 21:34.710
increase

21:35.830 --> 21:39.910
ok 那么这两个函数写完了 就写完了 那么就整个就写好了

21:40.710 --> 21:43.670
好 咱们保存一下 这边来 刷新

21:44.550 --> 21:51.510
啊 你看 加减 你看这边是不是可以监控到了每一个x的变化 对吧 每一次你看每一次数据的变化

21:51.830 --> 21:52.870
啊 每一次数据的变化

21:53.430 --> 21:59.750
看到没有 说可以见 监控到了 而且这里可以看def 就哪些数据发生的变化 你看 还要告诉你哪些数据发生的变化

22:00.710 --> 22:07.430
对吧 而且呢 这个插件的好处在于我们这里还能还可以手动的dispatch 而且点这个 点这个啊dispatcher

22:08.310 --> 22:15.430
啊 我们可以手动的dispatch 比方说啊啊 我们到了找到最新的状态啊10 那么我们这里的type 我们就可以写一个

22:15.990 --> 22:21.990
counter啊 但是这里呢就用不到这个什么创建函数了啊 我们这里呢就测试一下increase

22:22.630 --> 22:27.670
好 这里呢dispatch 点击 你看是不是加一了 对吧 那么就非常方便测试

22:28.630 --> 22:30.790
好 这里呢有个有个小一个错误啊 我看一下

22:32.150 --> 22:33.190
好 这里报报了一个错

22:35.190 --> 22:39.110
嗯 这什么home index 了解css 啊 它找不到

22:40.230 --> 22:42.470
啊 我们这里重启一下吧 重启一下

22:44.900 --> 22:50.180
我知道这些这里很老 怎么回事啊 这个power show 老师出这个问题啊 监控不了文件变化

22:50.580 --> 22:53.780
好 那咱们呢 这里刷新一次啊 刷新一次 okay

22:54.980 --> 22:58.740
看一下有没有错误 okay 没有错误了啊 那么是没问题的

22:59.140 --> 23:02.820
好 现在我们来观察一下那个你看 数据也在 对吧 数据也在

23:03.140 --> 23:10.100
我们来观察一下服务器给我们返回来结果 是不是把数据也放进去了呢 点击右键 查看原代嘛 这是服务器响应的结果 你看

23:10.420 --> 23:16.740
服务器是不是也放进去了 对吧 非常自然的 服务器在渲染的时候呢 因为它提供了provider啊 服务器在渲染的时候 你看啊

23:17.380 --> 23:22.180
呃 服务器端渲染的时候 他提供了provider 那么仓库的数据被读出来了 对吧 放进去了

23:22.580 --> 23:30.980
那么服务器在渲染后续的组件的时候 渲染到在哪 渲染到这个哄的时候 服务器端 那么它就会把仓库的数据 因为音色的嘛 对吧 它就会把把仓库的数据放进去

23:31.300 --> 23:35.140
都以以前的 跟以前的组件渲染是完全一样的 对吧 只不过呢

23:35.860 --> 23:41.700
服务器是没法监控变化的 对吧 服务器没监控不了变化 那么后续的到了客户端过后呢 数据要变化呢

23:41.860 --> 23:50.100
是完全靠客户端来进行啊 服务器是监控不到的啊 你这里怎么变化跟服务器没有任何关系的啊 你看 这边服务器还是跟我们返回的是这个东西啊

23:51.060 --> 23:55.860
啊 ok 那么这个东西也不是造成任何问题 本来就后本来扭断期就必须要接管后续的变化

23:56.500 --> 24:03.780
ok 那么这里呢 我们先把这个结构呢 先搭建好啊 ok 那么大家下去呢过后呢就把这个结构写出来啊

