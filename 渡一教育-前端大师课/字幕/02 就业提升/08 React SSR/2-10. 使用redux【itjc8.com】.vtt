WEBVTT

00:00.940 --> 00:05.940
好 这些课咱们来讲一讲在Nex.js里面如何使用Redux

00:05.940 --> 00:11.940
好 谁要跟大家说一下 这些课的内容可能是稍微有那么一丢丢的复杂

00:11.940 --> 00:17.940
因为Nex.js它本身不支持 就是本身没有Redux的容器

00:17.940 --> 00:19.940
因为它觉得它自己做得够简洁的

00:19.940 --> 00:23.940
你可以认为它不需要Redux 实际上它肯定是需要的

00:23.940 --> 00:27.940
因为不同的组件之间要共享数据 那肯定是需要Redux的

00:27.940 --> 00:33.940
另外 由于它没有给你支持当时 所以说你得自己想办法

00:34.940 --> 00:38.940
这个东西跟以前的版本又不一样 如果说你是过去的版本的话

00:38.940 --> 00:41.940
那个办法还有一些第三方库可以帮你解决

00:41.940 --> 00:46.940
那么现在根本就没有什么第三方库来解决这个新版本 全靠自己手动解决

00:46.940 --> 00:49.940
那怎么来解决呢 我自己想了一个办法

00:49.940 --> 00:53.940
然后反复地研究了一下这个办法是可行的 是没有什么问题的

00:53.940 --> 00:56.940
我给大家介绍一下 我自己想了一些思路

00:56.940 --> 01:00.940
可能了之后 未来的版本里面可能会支持的大事

01:00.940 --> 01:04.940
如果说你去查官网 他如果说支持的话 可以不用我这个方式了

01:04.940 --> 01:07.940
我的方式代码倒是不多 就是可能会有一点糟

01:08.940 --> 01:11.940
点击右线 新建个文件讲 我给大家取名为Stone

01:11.940 --> 01:14.940
我们来快速地重构一下Stone代码

01:14.940 --> 01:16.940
或者我们直接把之前的拿过来吧

01:16.940 --> 01:19.940
之前的Stone代码直接拿过来

01:19.940 --> 01:21.940
我们稍微改造一下

01:22.940 --> 01:25.940
拿到这里边 加进来

01:25.940 --> 01:27.940
加进来一些Stone X什么一个来

01:27.940 --> 01:29.940
Movies就去掉了 就去掉了

01:29.940 --> 01:33.940
因为我们Movies就保持默认

01:33.940 --> 01:36.940
我们这里去掉Movies 我们主要是关注康特

01:36.940 --> 01:39.940
我们把康特相调通 因为我们最终的目的是

01:39.940 --> 01:43.940
是要实现登录 要在登录页面去搞定这些问题

01:43.940 --> 01:51.940
所以说我们这里面大概是需要跟登录配合的

01:51.940 --> 02:00.940
所以说我们这一块就先搞定康特数字的增加和减少

02:00.940 --> 02:02.940
搞定这个之后 我们把Redux调通

02:02.940 --> 02:06.940
调通了过后 我们再加入登录的功能

02:06.940 --> 02:10.940
接下来我们看Action types 就是Action类型

02:10.940 --> 02:13.940
我们这里写了两个 再加两个 一步的

02:13.940 --> 02:18.940
一个是Async Increase

02:18.940 --> 02:21.940
这里就是复制一下

02:21.940 --> 02:25.940
这里是Async Decrease

02:25.940 --> 02:30.940
这里Async Decrease

02:30.940 --> 02:32.940
复制一下 多了两个Action

02:32.940 --> 02:34.940
因为我们这里会使用Sunk

02:34.940 --> 02:36.940
首先把安装一下

02:36.940 --> 02:40.940
安装Redux React

02:41.940 --> 02:43.940
这些都要安装的

02:43.940 --> 02:48.940
然后还有Redux Sunk 这些安装了

02:48.940 --> 02:50.940
然后我们这边接着写

02:50.940 --> 02:52.940
现在我们有了Sunk之后

02:52.940 --> 02:55.940
我们这里导出两个Action创建函数

02:55.940 --> 02:57.940
一个是Async Increase

02:57.940 --> 02:58.940
这个创建函数

02:58.940 --> 03:00.940
当然你可以使用Combined Action

03:00.940 --> 03:01.940
这些东西你们自行搞定

03:01.940 --> 03:03.940
我这里尽量写减节一点

03:03.940 --> 03:06.940
不使用一些组合 免得大家看晕了

03:06.940 --> 03:09.940
我这边返回的是一个函数

03:09.940 --> 03:10.940
返回的是一个函数

03:10.940 --> 03:12.940
一步函数 方形

03:12.940 --> 03:15.940
那么这个函数 它的作用是触发Action

03:15.940 --> 03:16.940
上海记得吗

03:16.940 --> 03:18.940
我们这里主要是触发Action

03:18.940 --> 03:20.940
我等一秒钟 既然是一步的

03:20.940 --> 03:21.940
我等一秒钟

03:21.940 --> 03:22.940
等一秒钟的话

03:22.940 --> 03:24.940
我这里可以写一个辅助函数

03:24.940 --> 03:28.380
Delay

03:28.380 --> 03:30.380
Dialation 等待多少时间

03:30.380 --> 03:32.380
这里返回的是一个New Promise

03:32.380 --> 03:34.380
Result

03:34.380 --> 03:36.380
Set Timeout

03:36.380 --> 03:37.380
比方说Dialation

03:37.380 --> 03:38.380
这个时间到了过后了

03:38.380 --> 03:40.380
我去运行一下Result就行了

03:41.380 --> 03:43.380
我们写这么一个辅助函数 Delay

03:43.380 --> 03:45.380
因此我来这边就可以这样子写

03:45.380 --> 03:47.380
Await 等待 Delay

03:47.380 --> 03:49.380
比方说一秒钟

03:49.380 --> 03:52.380
一秒钟之后我们去触发Dispatch

03:52.380 --> 03:54.380
触发什么呢 触发 Increase

03:54.380 --> 03:55.380
对吧 OK

03:55.380 --> 03:57.380
那么这是Async Increase

03:57.380 --> 04:00.380
接下来我们再写一个 Async Decrease

04:00.380 --> 04:02.380
这边我们去触发 Decrease

04:02.380 --> 04:03.380
其他都一样

04:03.380 --> 04:04.380
好 这个没问题吧

04:04.380 --> 04:06.380
这是纯粹的Redux知识

04:06.380 --> 04:07.380
没问题

04:07.380 --> 04:09.380
Reducer里面语蹈是不动

04:09.380 --> 04:12.380
因为Reducer只出了Increase Decrease

04:12.380 --> 04:13.380
不动

04:13.380 --> 04:15.380
那么Increase Reducer

04:15.380 --> 04:17.380
把部位去掉

04:17.380 --> 04:19.380
这边部位去掉

04:19.380 --> 04:21.380
只留下一个Counter

04:21.380 --> 04:22.380
Reducer是不是合并了

04:22.380 --> 04:23.380
对吧 合并出来了

04:23.380 --> 04:25.380
我们之后再加上那个登录用户

04:25.380 --> 04:27.380
好 接下来这个地方合并了

04:27.380 --> 04:28.380
然后我们到Increase里面去

04:28.380 --> 04:29.380
再到这个地方去

04:29.380 --> 04:31.380
这个地方怎么来玩呢

04:31.380 --> 04:33.380
这个地方我们有个上课

04:33.380 --> 04:34.380
倒进来了

04:34.380 --> 04:36.380
然后我们之前是用这种方式

04:36.380 --> 04:39.380
这种方式去加上那个测试

04:39.380 --> 04:41.380
还要去判断是不是浏览器

04:41.380 --> 04:42.380
也挺麻烦的

04:42.380 --> 04:44.380
所以说我们这一块

04:44.380 --> 04:46.380
干脆不怎么复杂吧

04:46.380 --> 04:49.380
干脆我们用一个第三方的一个库

04:49.380 --> 04:51.380
那个库就是邦尼加上

04:51.380 --> 04:53.380
Redux调试插件的

04:53.380 --> 04:55.380
就是邦尼在浏览器里面加调试插件的

04:55.380 --> 04:56.380
那个东西本身就是

04:56.380 --> 04:59.380
它的内部会判断是不是浏览器

04:59.380 --> 05:00.380
所以说我们这里用那个库

05:00.380 --> 05:01.380
更加简洁一点

05:01.380 --> 05:03.380
叫做Redux DevTools

05:03.380 --> 05:04.380
好像我之前讲Redux的时候

05:04.380 --> 05:05.380
也介绍过

05:05.380 --> 05:06.380
一个天性

05:06.380 --> 05:07.380
用这么一个库

05:07.380 --> 05:09.380
行了 咱们安装一下这个库

05:09.380 --> 05:10.380
NPMI

05:10.380 --> 05:13.380
Redux DevTools

05:13.380 --> 05:14.380
安装一下

05:14.380 --> 05:15.380
那么有了这个库之后

05:15.380 --> 05:16.380
我们怎么来用了

05:16.380 --> 05:18.380
你看一下 下面特别简单

05:18.380 --> 05:20.380
你就这里倒入这个库

05:20.380 --> 05:22.380
倒入这个库

05:22.380 --> 05:23.380
倒入之后

05:23.380 --> 05:25.380
我们这里最终是要干嘛呢

05:25.380 --> 05:27.380
最终是要把这个去掉

05:27.380 --> 05:29.380
最终是还是要返回一个函数

05:29.380 --> 05:31.380
为什么不直接返回一个Stone

05:31.380 --> 05:32.380
而要返回一个函数呢

05:32.380 --> 05:33.380
还是一样

05:33.380 --> 05:34.380
因为我们每一个请求

05:34.380 --> 05:36.380
可能会每一个请求

05:36.380 --> 05:37.380
都要用到一个新的仓库

05:37.380 --> 05:39.380
在服务端要创建仓库嘛

05:39.380 --> 05:40.380
我们要针对不同的请求

05:40.380 --> 05:41.380
用不同的仓库

05:41.380 --> 05:42.380
那么静态化也是一样

05:42.380 --> 05:43.380
静态化呢

05:43.380 --> 05:44.380
我们要针对每一个页面

05:44.380 --> 05:45.380
用不同的仓库

05:45.380 --> 05:46.380
对吧

05:46.380 --> 05:47.380
所以说呢

05:47.380 --> 05:48.380
我们这里肯定要写个函数

05:48.380 --> 05:49.380
调用一个函数

05:49.380 --> 05:50.380
产生一个新的仓库

05:50.380 --> 05:51.380
那么导出一个函数

05:51.380 --> 05:52.380
这个函数

05:52.380 --> 05:53.380
你要给我一个

05:53.380 --> 05:54.380
就是初始值

05:54.380 --> 05:55.380
仓库的初始值

05:55.380 --> 05:57.380
InitialState

05:58.380 --> 05:59.380
这个初始

05:59.380 --> 06:01.380
当然可以给Undify

06:01.380 --> 06:03.380
就会使用Reduce里面的默认值

06:03.380 --> 06:04.380
那么这是

06:04.380 --> 06:07.760
创建仓库函数

06:07.760 --> 06:10.760
这是创建仓库的函数

06:10.760 --> 06:15.760
那么这是仓库的初始值

06:15.760 --> 06:17.760
那么这个函数里面怎么来用呢

06:17.760 --> 06:18.760
我们肯定就是

06:18.760 --> 06:19.760
创建一个仓库

06:19.760 --> 06:20.760
就调用这个CreatorStone

06:20.760 --> 06:22.760
来创建这么一个仓库

06:22.760 --> 06:23.760
每一次调用这个函数

06:23.760 --> 06:24.760
它就会调用这个CreatorStone

06:24.760 --> 06:25.760
创建一个仓库

06:25.760 --> 06:26.760
把Reduce传进去

06:26.760 --> 06:27.760
然后把这个InitialState

06:27.760 --> 06:28.760
传进去

06:28.760 --> 06:29.760
当然你给我传Undify也没事

06:29.760 --> 06:30.760
Undify的话

06:30.760 --> 06:32.760
你使用Reduce里面的默认值

06:32.760 --> 06:33.760
UndifyMidware

06:33.760 --> 06:34.760
那么这里

06:35.760 --> 06:36.760
这个东西导致这样

06:36.760 --> 06:37.760
它会根据

06:37.760 --> 06:38.760
你是浏览器

06:38.760 --> 06:39.760
你只是服务器的话

06:39.760 --> 06:40.760
什么都不做

06:40.760 --> 06:41.760
如果说你是浏览器的话

06:41.760 --> 06:42.760
你是浏览器的话

06:42.760 --> 06:43.760
它就会加入

06:43.760 --> 06:45.760
就是浏览器的调试工具

06:45.760 --> 06:46.760
那么这个Midware

06:46.760 --> 06:47.760
是什么呢

06:47.760 --> 06:48.760
就是Sunk

06:48.760 --> 06:49.760
Sunk

06:49.760 --> 06:50.760
是这样鞋的吧

06:50.760 --> 06:51.760
OK

06:51.760 --> 06:52.760
那么现在

06:52.760 --> 06:53.760
我们把这个东西写好了

06:53.760 --> 06:54.760
这个创建仓库函数

06:54.760 --> 06:55.760
是不是就写好了

06:55.760 --> 06:56.760
那么现在

06:56.760 --> 06:58.760
这个地方有一个

06:58.760 --> 07:00.760
小的问题

07:00.760 --> 07:01.760
什么问题呢

07:01.760 --> 07:02.760
就是说

07:02.760 --> 07:04.760
如果说你服务端的话

07:04.760 --> 07:05.760
是不是每次都要

07:05.760 --> 07:06.760
创建一个新的仓库

07:06.760 --> 07:07.760
对吧

07:07.760 --> 07:08.760
服务端要调弄它

07:08.760 --> 07:09.760
每次都要创建一个新的仓库

07:09.760 --> 07:12.760
那如果说你是客户端的话

07:12.760 --> 07:13.760
就是你是浏览器端的话

07:13.760 --> 07:14.760
我需不需要

07:14.760 --> 07:15.760
每一次创建一个仓库

07:15.760 --> 07:17.760
那客户端的话

07:17.760 --> 07:18.760
就浏览器端可能会

07:18.760 --> 07:19.760
也会经常调弄

07:19.760 --> 07:20.760
这个函数来创建仓库

07:20.760 --> 07:21.760
那么

07:21.760 --> 07:22.760
因为我们现在

07:22.760 --> 07:24.760
这个代码是被封装过后的

07:24.760 --> 07:25.760
它不像以前

07:25.760 --> 07:27.760
以前是我们自己写的客户端

07:27.760 --> 07:28.760
只保证创建仓库就完事了

07:28.760 --> 07:30.760
那么现在代码是被封装了

07:30.760 --> 07:32.760
它就可能会调弄多次这个函数

07:32.760 --> 07:34.760
因为服端跟客户端是混合的

07:34.760 --> 07:35.760
混合在一起的

07:35.760 --> 07:36.760
那么它又可能会

07:36.760 --> 07:37.760
调弄多次这个函数

07:37.760 --> 07:38.760
那就导致的客户端

07:38.760 --> 07:39.760
这边可能会产生多个场合

07:39.760 --> 07:41.760
那肯定是不合理的

07:41.760 --> 07:43.760
因此我们要保证

07:43.760 --> 07:44.760
这个函数

07:44.760 --> 07:46.760
该函数要保证

07:46.760 --> 07:48.760
函数保证

07:48.760 --> 07:51.760
如果是服务器端

07:51.760 --> 07:53.760
每一次调用

07:53.760 --> 07:55.760
每一次调用

07:55.760 --> 07:57.760
产生

07:57.760 --> 07:58.760
产生

07:58.760 --> 08:00.760
一个新的仓库

08:00.760 --> 08:02.760
如果是客户端

08:02.760 --> 08:04.760
如果是客户端

08:04.760 --> 08:05.760
每一次调用

08:05.760 --> 08:06.760
它很智能

08:06.760 --> 08:08.760
它知道是客户端还是服务端

08:08.760 --> 08:09.760
服端的话

08:09.760 --> 08:10.760
每次创建一个新的仓库

08:10.760 --> 08:12.760
如果是客户端的话

08:12.760 --> 08:14.760
每一次调用

08:14.760 --> 08:15.760
返回

08:15.760 --> 08:16.760
同一个仓库

08:16.760 --> 08:18.760
那这个东西怎么来做呢

08:18.760 --> 08:19.760
其实也非常简单

08:19.760 --> 08:20.760
我们在这里写上

08:20.760 --> 08:21.760
一个模块

08:21.760 --> 08:22.760
内部的一个变量

08:22.760 --> 08:24.760
写上这么一个变量

08:24.760 --> 08:26.760
那么我们甚至可以

08:26.760 --> 08:27.760
判断一下

08:27.760 --> 08:29.760
如果说你是客户端

08:29.760 --> 08:30.760
那么怎么来判断

08:30.760 --> 08:31.760
是不是客户端呢

08:31.760 --> 08:32.760
input

08:32.760 --> 08:33.760
我们之前写过了

08:33.760 --> 08:35.760
Ease Browser

08:35.760 --> 08:37.760
UTO

08:37.760 --> 08:39.760
Ease Browser

08:39.760 --> 08:43.330
如果说你是客户端

08:43.330 --> 08:45.960
客户端

08:45.960 --> 08:46.960
那么怎么样

08:46.960 --> 08:47.960
我叫判断一下

08:47.960 --> 08:48.960
这个东西有没有值

08:48.960 --> 08:49.960
如果说没有值的话

08:49.960 --> 08:50.960
给它复职

08:50.960 --> 08:51.960
如果说

08:51.960 --> 08:52.960
如果说它有值的话

08:52.960 --> 08:55.960
就直接返回

08:55.960 --> 08:56.960
返回

08:56.960 --> 08:58.960
已有仓库

08:58.960 --> 08:59.960
那么作者每个判断

08:59.960 --> 09:00.960
如果说你是客户端

09:00.960 --> 09:02.960
并且仓库也有值

09:02.960 --> 09:04.960
甚至可以在这里写

09:04.960 --> 09:08.720
返回已有仓库

09:08.720 --> 09:09.720
如果是客户端

09:09.720 --> 09:10.720
仓库已经有了仓库

09:10.720 --> 09:12.720
那么就返回已有仓库

09:12.720 --> 09:13.720
使用同一个仓库

09:13.720 --> 09:15.720
如果说你是服务器端的话

09:15.720 --> 09:16.720
那么如果说其他情况

09:16.720 --> 09:17.720
比如说客户端

09:17.720 --> 09:19.720
但是仓库没有值

09:19.720 --> 09:21.720
那我肯定要给产生新的仓库

09:21.720 --> 09:22.720
或者说你是服务器端

09:22.720 --> 09:23.720
那么我们每次

09:23.720 --> 09:24.720
肯定要产生新的仓库

09:24.720 --> 09:26.720
那么我们把这个地方写好

09:26.720 --> 09:27.720
这个创建石洞就写好了

09:27.720 --> 09:29.720
其实代码也不复杂

09:29.720 --> 09:30.720
我们要稍微照一照

09:30.720 --> 09:31.720
就这个地方

09:31.720 --> 09:32.720
其他地方都一样的

09:32.720 --> 09:33.720
完全一样的

09:33.720 --> 09:35.720
好那么这个地方写好了之后

09:35.720 --> 09:37.720
接下来我们来回到

09:37.720 --> 09:38.720
页面这一块

09:38.720 --> 09:39.720
我们来用一下仓库

09:39.720 --> 09:41.720
我们在页面里边来加一个页面

09:41.720 --> 09:43.720
页面的名字叫Ridax

09:43.720 --> 09:44.720
Ridax

09:44.720 --> 09:46.720
1.5

09:46.720 --> 09:47.720
那么这个页面里边

09:47.720 --> 09:50.720
我们这样子写上这么一个寒树组件

09:50.720 --> 09:52.720
这个寒树组件需要这么一些属性

09:52.720 --> 09:54.720
我们先不管别的

09:54.720 --> 09:55.720
我们就按照我们老的办法写

09:55.720 --> 09:56.720
写的过后

09:56.720 --> 09:57.720
我们来看一下

09:57.720 --> 09:58.720
后面我们的研究下

09:58.720 --> 09:59.720
产生什么问题

09:59.720 --> 10:00.720
我们怎么来去解决

10:00.720 --> 10:01.720
好这边需要一个数字

10:01.720 --> 10:03.720
需要一个increase

10:03.720 --> 10:04.720
需要一个decrease

10:04.720 --> 10:06.720
需要一个async

10:06.720 --> 10:07.720
increase

10:07.720 --> 10:08.720
这些都是事件

10:08.720 --> 10:09.720
async

10:09.720 --> 10:10.720
decrease

10:10.720 --> 10:11.720
那么把这些东西全部传给我

10:11.720 --> 10:13.720
好传给我之后

10:13.720 --> 10:14.720
我来这边

10:14.720 --> 10:15.720
给你返回一个DIV

10:15.720 --> 10:16.720
一起

10:16.720 --> 10:17.720
这里显示一个dumber

10:17.720 --> 10:18.720
数字

10:18.720 --> 10:20.720
然后下面有4个按钮

10:20.720 --> 10:21.720
button

10:21.720 --> 10:23.720
这个是1步减

10:23.720 --> 10:24.720
减少

10:24.720 --> 10:25.720
1步减

10:25.720 --> 10:26.720
然后这个是减

10:26.720 --> 10:28.720
这个是加

10:28.720 --> 10:30.720
这个是1步加

10:30.720 --> 10:31.720
有这么4个按钮

10:31.720 --> 10:32.720
那么这4个按钮

10:32.720 --> 10:34.720
分别就调用这些事件

10:34.720 --> 10:35.720
这是纯粹的一个

10:35.720 --> 10:36.720
寒树是组件

10:36.720 --> 10:37.720
没有什么特别的

10:37.720 --> 10:39.720
unclick

10:39.720 --> 10:40.720
那么这里1步减了

10:40.720 --> 10:41.720
就是async

10:41.720 --> 10:42.720
decrease

10:42.720 --> 10:44.720
那么这里

10:44.720 --> 10:46.720
减了就是unclick

10:46.720 --> 10:48.720
就是decrease

10:48.720 --> 10:50.720
然后加了

10:50.720 --> 10:52.720
unclick

10:52.720 --> 10:55.720
这里就是increase

10:55.720 --> 10:56.720
1步加

10:56.720 --> 10:57.720
unclick

10:57.720 --> 11:00.720
这里就是async

11:00.720 --> 11:01.720
increase

11:01.720 --> 11:02.720
那么这个组件就写好了

11:02.720 --> 11:03.720
接下来要干嘛呢

11:03.720 --> 11:05.720
接下来是不是要连接

11:05.720 --> 11:06.720
是不是要连接

11:06.720 --> 11:07.720
import

11:07.720 --> 11:08.720
连接

11:08.720 --> 11:09.720
from

11:09.720 --> 11:10.720
react

11:10.720 --> 11:12.720
react

11:12.720 --> 11:13.720
reduce

11:13.720 --> 11:14.720
要连接

11:14.720 --> 11:15.720
那么这里有connect

11:15.720 --> 11:16.720
connect里边

11:16.720 --> 11:17.720
它肯定要提供两个函数

11:17.720 --> 11:18.720
一个是mapState to props

11:18.720 --> 11:20.720
一个是mapState of dispatch to props

11:20.720 --> 11:21.720
这个东西

11:21.720 --> 11:22.720
毫无疑问

11:22.720 --> 11:23.720
我们肯定要写上

11:23.720 --> 11:24.720
一个来吧

11:24.720 --> 11:27.720
首先来一个mapState

11:27.720 --> 11:29.720
mapState就够了

11:29.720 --> 11:30.720
然后它把State给我

11:30.720 --> 11:31.720
然后返回一个

11:31.720 --> 11:32.720
它需要的属性

11:32.720 --> 11:33.720
需要不是需要一个number吗

11:33.720 --> 11:34.720
那么哪来

11:34.720 --> 11:36.720
来自于状态里边的

11:36.720 --> 11:37.720
called counter

11:37.720 --> 11:38.720
你看

11:38.720 --> 11:39.720
我们的仓库里边的

11:39.720 --> 11:40.720
reducer里面

11:40.720 --> 11:41.720
和平的reducer

11:41.720 --> 11:42.720
所以一个 counter

11:42.720 --> 11:43.720
来自于这个 counter的

11:43.720 --> 11:45.720
就是 counter 的值

11:45.720 --> 11:46.720
那么这是mapState

11:46.720 --> 11:49.720
然后mapDispatch

11:49.720 --> 11:50.720
这是给我一个dispatch

11:50.720 --> 11:51.720
同样的

11:51.720 --> 11:52.720
那么我返回一个对象

11:52.720 --> 11:53.720
这个对象里边

11:53.720 --> 11:54.720
要提供四个函数

11:54.720 --> 11:55.720
increase Decrease

11:55.720 --> 11:56.720
当然这些东西

11:56.720 --> 11:57.720
你可以用combi reducer

11:57.720 --> 11:58.720
这些东西去做

11:58.720 --> 12:00.720
我们这里就手写了

12:00.720 --> 12:03.720
increase

12:03.720 --> 12:04.720
当我们增加的时候

12:04.720 --> 12:05.720
干嘛呢

12:05.720 --> 12:06.720
dispatch

12:06.720 --> 12:07.720
触发什么

12:07.720 --> 12:08.720
触发增加的x型

12:08.720 --> 12:09.720
那么我们这里要导入

12:09.720 --> 12:11.720
导入x型创建函数

12:11.720 --> 12:13.720
雕像杰纲

12:13.720 --> 12:14.720
stone

12:14.720 --> 12:17.720
x型创建函数

12:17.720 --> 12:18.720
那么接下来

12:18.720 --> 12:19.720
我们这里就是

12:19.720 --> 12:20.720
咱们导入

12:20.720 --> 12:23.160
x形式

12:23.160 --> 12:24.160
好

12:24.160 --> 12:25.160
那么这边就是dispatch

12:25.160 --> 12:26.160
x形式

12:26.160 --> 12:27.160
第二什么呢

12:27.160 --> 12:28.160
increase

12:28.160 --> 12:29.160
ok

12:29.160 --> 12:30.160
好

12:30.160 --> 12:31.160
接下来我们继续写

12:31.160 --> 12:32.160
复制一下吧

12:32.160 --> 12:33.160
一共有四个

12:33.160 --> 12:34.160
三四

12:34.160 --> 12:35.160
这里是

12:35.160 --> 12:38.470
decrease

12:38.470 --> 12:39.470
好

12:39.470 --> 12:40.470
这边是

12:40.470 --> 12:41.470
什么呢

12:41.470 --> 12:42.470
这个是

12:42.470 --> 12:43.470
async

12:43.470 --> 12:44.470
increase

12:44.470 --> 12:46.470
ok

12:46.470 --> 12:47.470
那么这里是

12:47.470 --> 12:48.470
async

12:48.470 --> 12:53.060
decrease

12:53.060 --> 12:54.060
没问题吧

12:54.060 --> 12:55.060
咱们把这些东西写好

12:55.060 --> 12:57.060
现在有了这么两个函数之后

12:57.060 --> 12:58.060
我们干嘛

12:58.060 --> 12:59.060
我们现在就用connect

12:59.060 --> 13:00.060
持续连接

13:00.060 --> 13:01.060
然后导出

13:01.060 --> 13:02.060
导出的主件

13:02.060 --> 13:03.060
就是已经被仓库

13:03.060 --> 13:04.060
连接好的主件了

13:04.060 --> 13:05.060
连接什么

13:05.060 --> 13:06.060
map steps

13:06.060 --> 13:07.060
然后map

13:07.060 --> 13:08.060
dispatch

13:08.060 --> 13:09.060
然后配级

13:09.060 --> 13:10.060
对吧

13:10.060 --> 13:11.060
跟以前的写法

13:11.060 --> 13:12.060
是完全一样的

13:12.060 --> 13:13.060
一点区别都没有

13:13.060 --> 13:14.060
现在

13:14.060 --> 13:15.060
所以一点区别都没有

13:15.060 --> 13:16.060
那么现在能运行吗

13:16.060 --> 13:17.060
这个主件

13:17.060 --> 13:18.060
这个页面能运行吗

13:18.060 --> 13:19.060
页面就是导出的一个

13:19.060 --> 13:20.060
就是高階主件

13:20.060 --> 13:21.060
导出过后的一个主件

13:21.060 --> 13:22.060
比高階比个hoc

13:22.060 --> 13:23.060
导出过后的主件

13:23.060 --> 13:25.060
那么这个主件能运行吗

13:25.060 --> 13:26.060
还是不能运行

13:26.060 --> 13:27.060
为什么呢

13:27.060 --> 13:28.060
因为我们没有加入仓库

13:28.060 --> 13:29.060
对不对

13:29.060 --> 13:30.060
我们没有在页面里面

13:30.060 --> 13:31.060
加入一个provider

13:31.060 --> 13:32.060
对不对

13:32.060 --> 13:33.060
它在商项文里面都没有东西

13:33.060 --> 13:34.060
那怎么办呢

13:34.060 --> 13:35.060
这个时候怎么办呢

13:35.060 --> 13:36.060
这个时候

13:36.060 --> 13:37.060
我们要回到app主件里面

13:37.060 --> 13:38.060
app主件

13:38.060 --> 13:39.060
我们是不是可以把整个东西

13:39.060 --> 13:40.060
放到一个仓库里面

13:40.060 --> 13:41.060
放到一个provider里面

13:41.060 --> 13:42.060
对吧

13:42.060 --> 13:43.060
我们来

13:43.060 --> 13:44.060
好

13:44.060 --> 13:45.060
provider

13:46.060 --> 13:47.060
provider

13:47.060 --> 13:48.060
from

13:48.060 --> 13:50.060
redux

13:50.060 --> 13:51.060
好

13:51.060 --> 13:52.060
那么这里有一个provider

13:52.060 --> 13:53.060
对吧

13:53.060 --> 13:54.060
我们把整个包起来

13:54.060 --> 13:55.060
provider

13:55.060 --> 13:56.060
整个包起来

13:56.060 --> 13:57.060
好

13:57.060 --> 13:58.060
provider里面

13:58.060 --> 13:59.060
它不是要提供这么一个Storm吗

13:59.060 --> 14:00.060
对不对

14:00.060 --> 14:01.060
是不是要提供一个Storm

14:01.060 --> 14:02.060
好

14:02.060 --> 14:03.060
Storm哪来

14:03.060 --> 14:04.060
是不是我们可以创建

14:04.060 --> 14:05.060
import

14:05.060 --> 14:06.060
makeStorm

14:06.060 --> 14:08.060
from

14:08.060 --> 14:09.060
Storm

14:09.060 --> 14:10.060
跟以前的显化其实是一样的

14:10.060 --> 14:11.060
无非就是个Storm来自于

14:11.060 --> 14:12.060
一个函数创建

14:12.060 --> 14:13.060
它不再是直接写的

14:13.060 --> 14:14.060
好

14:14.060 --> 14:15.060
那么大家分析一下

14:15.060 --> 14:16.060
现在呢

14:16.060 --> 14:17.060
是这样子

14:17.060 --> 14:18.060
这个代码的服务端

14:18.060 --> 14:19.060
会不会运行

14:19.060 --> 14:20.060
会运行

14:20.060 --> 14:21.060
对吧

14:21.060 --> 14:22.060
一定会运行这个代码

14:22.060 --> 14:23.060
那么服务端

14:23.060 --> 14:24.060
每一次运行

14:24.060 --> 14:25.060
是不是一个新的仓库

14:25.060 --> 14:26.060
对吧

14:26.060 --> 14:27.060
一个新的仓库

14:27.060 --> 14:28.060
然后呢

14:28.060 --> 14:29.060
传进去

14:29.060 --> 14:30.060
然后呢

14:30.060 --> 14:31.060
然后呢

14:31.060 --> 14:32.060
再来渲染这个页面

14:32.060 --> 14:33.060
对吧

14:33.060 --> 14:34.060
渲染这个页面

14:34.060 --> 14:35.060
好

14:35.060 --> 14:36.060
那么客户端呢

14:36.060 --> 14:37.060
客户端也会不断的

14:37.060 --> 14:38.060
每次切换页面

14:38.060 --> 14:39.060
它也会不断的运行

14:39.060 --> 14:40.060
这个

14:40.060 --> 14:41.060
这个

14:41.060 --> 14:42.060
这个逐渐

14:42.060 --> 14:43.060
那么每次切换页面

14:43.060 --> 14:44.060
运行这个逐渐的时候呢

14:44.060 --> 14:45.060
是不是也是一样的

14:45.060 --> 14:46.060
也会运行这个函数

14:46.060 --> 14:47.060
但是客户端

14:47.060 --> 14:48.060
由于我们这里做了处理

14:48.060 --> 14:49.060
那么就意味着

14:49.060 --> 14:50.060
它自己使用的是

14:50.060 --> 14:51.060
同一个仓库

14:51.060 --> 14:52.060
说客户端服务端

14:52.060 --> 14:53.060
都不会有问题

14:53.060 --> 14:54.060
服务端每次新建一个仓库

14:54.060 --> 14:55.060
客户端每一次用

14:55.060 --> 14:56.060
使用的是同一个仓库

14:56.060 --> 14:57.060
对吧

14:57.060 --> 14:58.060
OK

14:58.060 --> 14:59.060
那么现在呢

14:59.060 --> 15:00.060
我们来看一下

15:00.060 --> 15:01.060
在这

15:01.060 --> 15:02.060
我们运行出来

15:02.060 --> 15:06.530
npm run depth

15:06.530 --> 15:07.530
我们这里呢

15:07.530 --> 15:08.530
顺便等待的时候

15:08.530 --> 15:10.530
就顺便把以前那些

15:10.530 --> 15:11.530
什么这些输出

15:11.530 --> 15:12.530
给它取掉

15:12.530 --> 15:13.530
也拿起八道的输出

15:13.530 --> 15:15.970
给它取掉

15:15.970 --> 15:16.970
OK

15:17.970 --> 15:18.970
我们在这个黑道里面

15:18.970 --> 15:19.970
加一个吧

15:19.970 --> 15:20.970
黑道里面再加一个

15:20.970 --> 15:21.970
这个登录

15:21.970 --> 15:22.970
我们放上面

15:22.970 --> 15:23.970
放上面

15:23.970 --> 15:24.970
那么这是一个

15:24.970 --> 15:25.970
redux测试

15:25.970 --> 15:27.970
redux测试

15:28.970 --> 15:29.970
再挑到redux

15:29.970 --> 15:30.970
对面

15:30.970 --> 15:31.970
好

15:32.970 --> 15:33.970
接下来

15:33.970 --> 15:34.970
我们看一下

15:34.970 --> 15:35.970
localhost 3000

15:36.970 --> 15:38.970
我们到redux测试里边去

15:39.970 --> 15:40.970
这里爆错了

15:40.970 --> 15:41.970
爆错了

15:41.970 --> 15:42.970
看一下

15:42.970 --> 15:43.970
什么错误

15:44.970 --> 15:45.970
它说什么

15:45.970 --> 15:46.970
not found

15:46.970 --> 15:48.970
它说stone actions

15:49.970 --> 15:50.970
找不到stone

15:50.970 --> 15:51.970
明白了

15:51.970 --> 15:52.970
这个地方

15:52.970 --> 15:53.970
我们这里写的

15:53.970 --> 15:54.970
action是里面

15:54.970 --> 15:56.970
还有一个 counter action

15:56.970 --> 15:58.970
它找了个index

15:58.970 --> 15:59.970
找不到

15:59.970 --> 16:01.970
那么现在出来了

16:01.970 --> 16:02.970
现在出来了

16:02.970 --> 16:03.970
默认是实

16:03.970 --> 16:04.970
为什么是实呢

16:04.970 --> 16:06.970
是因为我们这里

16:06.970 --> 16:07.970
就是redux测试里面

16:07.970 --> 16:09.970
counter 加一个默认指使

16:09.970 --> 16:11.970
那么我们现在再来分析一下

16:11.970 --> 16:13.970
再一次来分析一下

16:14.970 --> 16:16.970
现在我们服务器

16:16.970 --> 16:17.970
先运行

16:17.970 --> 16:18.970
先运行服务器

16:18.970 --> 16:19.970
对吧

16:19.970 --> 16:20.970
先运行服务器的时候

16:20.970 --> 16:21.970
服务器是先运行这个app

16:21.970 --> 16:22.970
app组件

16:22.970 --> 16:24.970
那么这个app组件的运行的时候

16:24.970 --> 16:26.970
它就提供了一个provider

16:26.970 --> 16:27.970
在服务器上

16:27.970 --> 16:28.970
就提供了一个provider

16:28.970 --> 16:30.970
然后创建了一个仓库

16:30.970 --> 16:31.970
对不对

16:31.970 --> 16:32.970
那么这个仓库由于

16:32.970 --> 16:33.970
沒有加传默认指

16:33.970 --> 16:34.970
仓库是有一个默认指的

16:34.970 --> 16:35.970
没有加传

16:35.970 --> 16:36.970
是不是undefined

16:36.970 --> 16:37.970
undefined 是不是

16:37.970 --> 16:38.970
使用redux测试里面的指

16:38.970 --> 16:40.970
于是整个仓库就创建好了

16:40.970 --> 16:42.970
并且使用了默认指

16:42.970 --> 16:43.970
就redux测试里面的默认指

16:43.970 --> 16:44.970
对吧

16:44.970 --> 16:45.970
仓库创建好了

16:45.970 --> 16:46.970
然后再进行组建渲染

16:46.970 --> 16:48.970
服务端再进行组建渲染

16:48.970 --> 16:50.970
渲染的过程中

16:50.970 --> 16:51.970
那么这里的组件是什么

16:51.970 --> 16:52.970
这里的组件运行到这儿

16:52.970 --> 16:54.970
是不是我们连接之后的组件

16:54.970 --> 16:56.970
那么它就会把仓库的数据

16:56.970 --> 16:57.970
通过maps data

16:57.970 --> 16:58.970
maps dispatch

16:58.970 --> 16:59.970
分发到这个配级里面

16:59.970 --> 17:00.970
是吧

17:00.970 --> 17:02.970
就是分发到这个配级里面

17:02.970 --> 17:04.970
配级里面有什么

17:04.970 --> 17:06.970
除了这个配级里面

17:06.970 --> 17:07.970
除了有这个东西

17:07.970 --> 17:09.970
除了有这个

17:09.970 --> 17:10.970
注意

17:10.970 --> 17:11.970
现在的component

17:11.970 --> 17:13.970
不是这个配级组件

17:13.970 --> 17:14.970
一定要注意这一点

17:14.970 --> 17:16.970
这个component

17:16.970 --> 17:17.970
就这边那个component

17:17.970 --> 17:18.970
它不是这个配级组件

17:18.970 --> 17:19.970
而是什么呢

17:19.970 --> 17:21.970
而是这个connect之后的组件

17:21.970 --> 17:22.970
是这个组件

17:22.970 --> 17:24.970
我给大家写明白一点

17:24.970 --> 17:28.050
wiper

17:28.050 --> 17:31.050
是这么一个就是包装之后的组件

17:31.050 --> 17:32.050
是吧

17:32.050 --> 17:33.050
那么现在它是这样子

17:33.050 --> 17:34.050
它把这些属性

17:34.050 --> 17:35.050
就是配级proper

17:35.050 --> 17:36.050
当然配级proper里面没东西

17:36.050 --> 17:37.050
是现在是没东西的

17:37.050 --> 17:39.050
你可以看到一个页面上

17:39.050 --> 17:41.050
右键 圆蛋吧

17:41.050 --> 17:42.050
这个配级proper

17:42.050 --> 17:43.050
是不是空的

17:43.050 --> 17:44.050
是没东西的

17:44.050 --> 17:45.050
那么这个配级proper

17:45.050 --> 17:46.050
它传过去

17:46.050 --> 17:47.050
那么传过去传给谁的

17:47.050 --> 17:48.050
传给他的

17:48.050 --> 17:49.050
对吧

17:49.050 --> 17:50.050
传给他的

17:50.050 --> 17:52.050
然后他除了把传过来的属性

17:52.050 --> 17:53.050
再传给他

17:53.050 --> 17:55.050
除了把他传过来的属性

17:55.050 --> 17:57.050
就把这边传过来的东西

17:57.050 --> 17:58.050
当然现在没东西

17:58.050 --> 17:59.050
该传过来的东西

17:59.050 --> 18:00.050
传给他之外

18:00.050 --> 18:01.050
因为我们知道

18:01.050 --> 18:02.050
component他要保留属性

18:02.050 --> 18:03.050
他把传过来的属性

18:03.050 --> 18:04.050
还要传给他

18:04.050 --> 18:06.050
然后再根据我们这里的东西

18:06.050 --> 18:07.050
对吧

18:07.050 --> 18:09.050
然后给他多传一些属性

18:09.050 --> 18:10.050
就多传这么一些属性

18:10.050 --> 18:11.050
传过去了

18:11.050 --> 18:12.050
那么服装现在过后

18:12.050 --> 18:13.050
自然而然可以运行了

18:13.050 --> 18:15.050
服装就渲染出来一个结果

18:15.050 --> 18:16.050
那么看一下服装渲染

18:16.050 --> 18:17.050
结果是什么

18:17.050 --> 18:19.050
一定是没问题的

18:19.050 --> 18:20.050
服装渲染的结果

18:20.050 --> 18:22.050
我们看一下这个数字

18:22.050 --> 18:24.050
数字10对吧

18:24.050 --> 18:25.050
比如说Stone

18:25.050 --> 18:26.050
这个东西本身就在服装

18:26.050 --> 18:28.050
是运行一点问题都没有

18:28.050 --> 18:30.050
本来是没有什么问题的

18:30.050 --> 18:31.050
然后再看客户端这边

18:31.050 --> 18:33.050
客户端这边也是一样

18:33.050 --> 18:34.050
客户端这边

18:34.050 --> 18:38.050
我们这里也是要运行App逐渐

18:38.050 --> 18:40.050
App逐渐这就又掉入函数

18:40.050 --> 18:41.050
对不对

18:41.050 --> 18:44.050
函数是不是又创建了一个

18:44.050 --> 18:46.050
就是客户端的实动

18:46.050 --> 18:47.050
对吧

18:47.050 --> 18:48.050
客户端的实动

18:48.050 --> 18:50.050
那么让客户端的实动

18:50.050 --> 18:51.050
接管后续的处理

18:51.050 --> 18:52.050
好

18:52.050 --> 18:53.050
那么现在的后续的处理

18:53.050 --> 18:54.050
是不是全在客户端

18:54.050 --> 18:55.050
全在客户端

18:55.050 --> 18:57.050
加 减 异部加

18:57.050 --> 19:00.050
异部加 异部减

19:00.050 --> 19:01.050
异部减

19:01.050 --> 19:02.050
什么都没问题

19:02.050 --> 19:03.050
因为客户端

19:03.050 --> 19:04.050
客户端接管了后续处理

19:04.050 --> 19:05.050
然后我们可以看到

19:05.050 --> 19:07.050
这些东西都是正常的

19:07.050 --> 19:08.050
都是没问题的

19:08.050 --> 19:09.050
OK

19:09.050 --> 19:10.050
到现在是没问题的

19:10.050 --> 19:11.050
对吧

19:11.050 --> 19:12.050
接下来

19:12.050 --> 19:14.050
来看一下这种场景

19:14.050 --> 19:15.050
就是服务端

19:15.050 --> 19:17.050
它有可能会出现这种情况

19:17.050 --> 19:18.050
我们之前学习过的

19:18.050 --> 19:21.050
export async

19:21.050 --> 19:22.050
一个方式叫什么

19:22.050 --> 19:26.050
get server-side props

19:26.050 --> 19:27.050
当然也可能包含什么

19:27.050 --> 19:28.050
static props

19:28.050 --> 19:30.050
这些东西都可能不会包含

19:30.050 --> 19:31.050
不管吧

19:31.050 --> 19:32.050
我们先

19:32.050 --> 19:33.050
就是用这个设施是一样的

19:33.050 --> 19:34.050
是一样的

19:34.050 --> 19:35.050
只是时间不一样

19:35.050 --> 19:36.050
这个是每次请求来一次

19:36.050 --> 19:37.050
对吧

19:37.050 --> 19:38.050
那个static props

19:39.050 --> 19:40.050
那么现在如果说服务端

19:40.050 --> 19:41.050
有这个东西

19:41.050 --> 19:43.050
那么这个运行的时间点在什么

19:43.050 --> 19:44.050
什么地方

19:44.050 --> 19:46.050
是不是在渲染组建之前

19:46.050 --> 19:48.050
就在渲染这些组建之前

19:48.050 --> 19:50.050
渲染这些组建之前来运行

19:50.050 --> 19:51.050
那么这个时候

19:51.050 --> 19:53.050
如果说我们这个时候

19:53.050 --> 19:56.050
要向仓库里边加一些数据

19:56.050 --> 19:57.050
就是触发一些exync

19:57.050 --> 19:59.050
先填充一些仓库数据

19:59.050 --> 20:00.050
这是很正常的

20:00.050 --> 20:01.050
比方说我们有些电影

20:01.050 --> 20:02.050
或者这个数字

20:02.050 --> 20:04.050
我们一开始就要加一次

20:04.050 --> 20:06.050
那么这个地方该怎么办

20:07.050 --> 20:08.050
这个地方该怎么办

20:08.050 --> 20:10.050
我要向仓库里边加

20:10.050 --> 20:13.050
我就是说我要向仓库里边加一些数据

20:14.050 --> 20:16.050
要向仓库里边加一些数据

20:16.050 --> 20:17.050
那么这个地方

20:17.050 --> 20:18.050
就涉及到这个问题

20:18.050 --> 20:20.050
仓库在哪呢

20:20.050 --> 20:22.050
我在哪里去拿仓库呢

20:24.050 --> 20:26.050
这个时候与组建有没有渲染

20:26.050 --> 20:27.050
在服务系

20:27.050 --> 20:29.050
现在这个凡数只在服务系运行

20:29.050 --> 20:31.050
比方说我一开始要触发一个增加

20:31.050 --> 20:32.050
那么服务系那边

20:32.050 --> 20:34.050
是不是仓库的数据不是实了

20:34.050 --> 20:35.050
一开始就不是实了

20:35.050 --> 20:36.050
就变成11了

20:36.050 --> 20:37.050
服务系就是11

20:37.050 --> 20:38.050
然后发送到客户端的时候

20:38.050 --> 20:39.050
也必须是11

20:39.050 --> 20:41.050
然后客户端那边还要同步到11

20:41.050 --> 20:43.050
就这么一个效果出来

20:43.050 --> 20:45.050
那么这个该怎么办

20:45.050 --> 20:47.050
我现在在他在组建之前

20:47.050 --> 20:48.050
渲染之前运行

20:48.050 --> 20:50.050
那么这里我怎么拿到仓库

20:50.050 --> 20:51.050
因为我们知道

20:51.050 --> 20:52.050
仓库是哪里建立的

20:52.050 --> 20:53.050
是在这里建立的

20:53.050 --> 20:54.050
这里的建立的仓库

20:54.050 --> 20:56.050
那我这里该怎么办呢

20:56.050 --> 20:58.050
我这里属见都还没有渲染

20:58.050 --> 20:59.050
我拿不到这个仓库

20:59.050 --> 21:00.050
我们可以这样子来

21:00.050 --> 21:01.050
你看着

21:01.050 --> 21:02.050
我们用这种识录

21:03.050 --> 21:05.050
组建渲染前

21:06.050 --> 21:08.050
就是我们渲染这个页面之前

21:08.050 --> 21:10.050
页面组建渲染前

21:10.050 --> 21:12.050
然后我们要干嘛

21:13.050 --> 21:15.050
新建一个仓库

21:15.050 --> 21:16.050
因为我现在确实拿不到

21:16.050 --> 21:17.050
组建里边的仓库

21:17.050 --> 21:18.050
一个组建都还没有

21:18.050 --> 21:19.050
拿不到这个仓库

21:19.050 --> 21:21.050
我们倒是想用这个仓库来处罚

21:21.050 --> 21:22.050
但是拿不到这个仓库

21:22.050 --> 21:24.050
我们就新建一个仓库

21:24.050 --> 21:25.050
那么怎么来新建

21:25.050 --> 21:26.050
特别简单

21:26.050 --> 21:28.050
还是得重新调用一次

21:28.050 --> 21:29.050
新建一个什么仓库

21:29.050 --> 21:31.050
新建一个无状态

21:31.050 --> 21:33.050
无状态的仓库

21:33.050 --> 21:34.050
就是全部

21:34.050 --> 21:36.050
全部都是用默认状态

21:36.050 --> 21:38.050
那么我们来倒入

21:38.050 --> 21:41.260
MixStone

21:41.260 --> 21:42.260
调调鞋杠

21:42.260 --> 21:43.260
Stone

21:43.260 --> 21:44.260
有一个人说

21:44.260 --> 21:45.260
现在如果说我们这里的

21:45.260 --> 21:47.260
去新建一个仓库

21:47.260 --> 21:48.260
Stone

21:48.260 --> 21:49.260
去新建了这么一个仓库

21:49.260 --> 21:50.260
那这个仓库跟这个仓库

21:50.260 --> 21:51.260
是不是一个仓库

21:52.260 --> 21:53.260
你想想

21:53.260 --> 21:54.260
服务器端

21:54.260 --> 21:55.260
现在我们在服务器端

21:55.260 --> 21:56.260
是不是一个仓库

21:56.260 --> 21:57.260
肯定不是一个仓库

21:57.260 --> 21:58.260
对吧

21:58.260 --> 22:00.260
因为我们这里的新建的仓库

22:00.260 --> 22:01.260
因为在服务器端运行

22:01.260 --> 22:02.260
它是一个新的仓库

22:02.260 --> 22:03.260
新建也是一个新的仓库

22:03.260 --> 22:04.260
肯定不是服务器的

22:04.260 --> 22:05.260
肯定不是一个仓库

22:05.260 --> 22:07.260
那怎么办呢

22:07.260 --> 22:08.260
我们看着

22:08.260 --> 22:10.260
我们在创建新的仓库

22:10.260 --> 22:12.260
然后触发X

22:12.260 --> 22:14.260
触发X

22:14.260 --> 22:15.260
然后呢

22:15.260 --> 22:16.260
改动仓库

22:17.260 --> 22:19.260
那么现在我们去触发一个X

22:19.260 --> 22:20.260
Stone

22:20.260 --> 22:21.260
Dispatch

22:21.260 --> 22:22.260
触发什么呢

22:22.260 --> 22:24.260
比方说AsyncIncrease

22:24.260 --> 22:25.260
一步增加

22:25.260 --> 22:26.260
是不是要等一秒钟

22:26.260 --> 22:27.260
一秒钟后才增加

22:27.260 --> 22:28.260
没事

22:28.260 --> 22:29.260
你就等呗

22:29.260 --> 22:30.260
因为这个函数不运行玩

22:30.260 --> 22:31.260
它是不会渲染组件的

22:31.260 --> 22:32.260
它一定要等它运行玩

22:32.260 --> 22:34.260
等它触发完成

22:34.260 --> 22:35.260
运行完成

22:35.260 --> 22:36.260
运行完成过后

22:36.260 --> 22:37.260
仓库里面是不是有值了

22:37.260 --> 22:39.260
代码如果到了这一行

22:39.260 --> 22:41.260
仓库有数据了

22:41.260 --> 22:42.260
但是呢

22:42.260 --> 22:43.260
问题是这个仓库

22:43.260 --> 22:44.260
根本就不是这边的仓库

22:44.260 --> 22:45.260
它有数据有个P用

22:45.260 --> 22:46.260
没用对吧

22:46.260 --> 22:47.260
那么接下来

22:47.260 --> 22:49.260
我用的是这种方式

22:49.260 --> 22:53.260
返回一个特殊的属性

22:53.260 --> 22:56.260
将仓库的属性

22:56.260 --> 22:59.260
将该仓库的属性

22:59.260 --> 23:00.260
写过来

23:03.820 --> 23:07.820
使用服务端

23:07.820 --> 23:11.820
仓库使用流程

23:11.820 --> 23:12.820
在哪个方法呢

23:12.820 --> 23:13.820
在这个就是

23:13.820 --> 23:14.820
在这个方法里面

23:14.820 --> 23:16.820
get static props

23:16.820 --> 23:18.820
get server-side props

23:18.820 --> 23:20.820
那么这里的页面

23:20.820 --> 23:21.820
组件渲染之前在运行

23:21.820 --> 23:22.820
对吧

23:22.820 --> 23:23.820
新建一个无状态的仓库

23:23.820 --> 23:24.820
然后触发X型

23:24.820 --> 23:25.820
改动仓库

23:25.820 --> 23:26.820
改动完了过后

23:26.820 --> 23:28.820
返回将仓库里面的数

23:28.820 --> 23:31.820
将仓库里面的数据

23:32.820 --> 23:35.820
将该仓库的数据返回

23:35.820 --> 23:36.820
对吧

23:36.820 --> 23:38.820
虽然说我不是同一个仓库

23:38.820 --> 23:39.820
但是我没关系

23:39.820 --> 23:40.820
我只要把我这个仓库里面的

23:40.820 --> 23:42.820
有的数据给你返回

23:42.820 --> 23:43.820
就行了

23:43.820 --> 23:44.820
怎么返回呢

23:44.820 --> 23:45.820
我们之前学过的

23:45.820 --> 23:46.820
这个函数里面返回的是

23:46.820 --> 23:47.820
probs

23:47.820 --> 23:48.820
反复了这个东西

23:48.820 --> 23:49.820
那么给它一个特殊的属性

23:49.820 --> 23:50.820
怎么呢

23:50.820 --> 23:51.820
叫做一个下环线

23:51.820 --> 23:53.820
特殊的属性叫initial state

23:53.820 --> 23:54.820
一个特殊的属性

23:54.820 --> 23:56.820
那么这个属性拿来

23:56.820 --> 23:58.820
来自于stone的get state

23:58.820 --> 23:59.820
这样子返回

23:59.820 --> 24:00.820
那么自己想一想

24:00.820 --> 24:01.820
这个函数是不是运行完了

24:01.820 --> 24:02.820
它返回了一个probs

24:02.820 --> 24:04.820
那么这个probs会传给谁

24:04.820 --> 24:05.820
是不是传过来了

24:05.820 --> 24:06.820
传到这边了

24:06.820 --> 24:08.820
传到这边的page props里面去了

24:08.820 --> 24:09.820
是不是传过来了

24:09.820 --> 24:11.820
那么现在传过来了

24:11.820 --> 24:12.820
过后呢

24:12.820 --> 24:13.820
我们是不是从这里面

24:13.820 --> 24:14.820
就可以得到

24:15.820 --> 24:16.820
就可以得到了一个

24:16.820 --> 24:17.820
初始化的数据

24:17.820 --> 24:18.820
initial state

24:18.820 --> 24:20.820
你千万不要把仓库传过去

24:20.820 --> 24:21.820
因为仓库是不能序列化的

24:21.820 --> 24:22.820
它必须要求

24:22.820 --> 24:23.820
这里是序列化的数据

24:23.820 --> 24:24.820
所以说你要把仓库的

24:24.820 --> 24:25.820
状态传过去

24:25.820 --> 24:27.820
虽然说不是同一个仓库

24:27.820 --> 24:28.820
但是我把我这个

24:28.820 --> 24:29.820
仓库里面的状态

24:29.820 --> 24:30.820
我已经处理好了状态

24:30.820 --> 24:31.820
给你传过来

24:31.820 --> 24:32.820
传过来过后了

24:32.820 --> 24:33.820
在这边是不是可以

24:33.820 --> 24:34.820
拿到这个状态

24:34.820 --> 24:35.820
那么我们来解构

24:36.820 --> 24:37.820
initial

24:38.820 --> 24:39.820
叫什么呢

24:40.820 --> 24:41.820
叫initial state

24:41.820 --> 24:42.820
initial state

24:42.820 --> 24:44.820
然后还有一个圣语属性

24:44.820 --> 24:45.820
圣语属性

24:45.820 --> 24:47.820
圣语属性其实都没有了

24:47.820 --> 24:48.820
没有了

24:48.820 --> 24:49.820
因为

24:49.820 --> 24:50.820
这个地方

24:50.820 --> 24:51.820
它可能各个页面都要传过来

24:51.820 --> 24:52.820
不光是我们这个

24:52.820 --> 24:53.820
Ridax的页面

24:53.820 --> 24:54.820
Ridax的页面

24:54.820 --> 24:55.820
还有别的页面

24:55.820 --> 24:56.820
比较说像movey页面

24:56.820 --> 24:58.820
movey页面是不是也要传过来

24:58.820 --> 24:59.820
对吧

24:59.820 --> 25:00.820
也要传过来

25:00.820 --> 25:01.820
movey页面它就没有这个东西

25:01.820 --> 25:02.820
对吧

25:02.820 --> 25:03.820
它解构出来是undefined

25:03.820 --> 25:04.820
没关系

25:04.820 --> 25:05.820
那么总之

25:05.820 --> 25:06.820
它可能还会有些别的

25:06.820 --> 25:07.820
别的属性

25:07.820 --> 25:08.820
我要解构出来

25:08.820 --> 25:09.820
来自于哪呢

25:09.820 --> 25:10.820
来自于PagePulse

25:11.820 --> 25:12.820
原来的意思吧

25:12.820 --> 25:13.820
好

25:13.820 --> 25:14.820
然后呢

25:14.820 --> 25:15.820
看着我这边这个initial state

25:15.820 --> 25:16.820
它有可能是undefined

25:16.820 --> 25:17.820
比方我们访问movey页面

25:17.820 --> 25:18.820
它根本就没有反回这个东西

25:18.820 --> 25:19.820
它有可能是undefined

25:19.820 --> 25:20.820
undefined的话

25:20.820 --> 25:22.820
我就用这个undefined来创建

25:22.820 --> 25:23.820
undefined创建

25:23.820 --> 25:24.820
是不是全部都是Ridax无人值了

25:24.820 --> 25:25.820
好

25:25.820 --> 25:26.820
如果说它有值的话

25:26.820 --> 25:27.820
那么说明说

25:27.820 --> 25:28.820
这个页面

25:28.820 --> 25:29.820
它是肯定是处理过仓库的

25:29.820 --> 25:30.820
给了我一个有值的仓库

25:30.820 --> 25:32.820
那么我就把它使用默认值

25:32.820 --> 25:33.820
放过来

25:33.820 --> 25:34.820
对吧

25:34.820 --> 25:35.820
服务器端

25:35.820 --> 25:36.820
那么在app运行的时候

25:36.820 --> 25:37.820
服务器端在app运行的时候

25:37.820 --> 25:38.820
那么就会

25:39.820 --> 25:40.820
服务器

25:40.820 --> 25:41.820
app运行

25:42.820 --> 25:43.820
运行的时候

25:43.820 --> 25:45.820
就会使用默认值

25:45.820 --> 25:46.820
创建仓库

25:47.820 --> 25:48.820
对吧

25:48.820 --> 25:49.820
它会使用默认值

25:49.820 --> 25:50.820
来创建仓库

25:50.820 --> 25:51.820
好了

25:51.820 --> 25:52.820
那么我们在传列主件的时候

25:52.820 --> 25:53.820
传列主件的时候

25:53.820 --> 25:54.820
我就不需要给它这个东西了

25:54.820 --> 25:55.820
我把这个东西给它就行了

25:58.820 --> 25:59.820
把这个东西给它就行了

25:59.820 --> 26:00.820
主件里边

26:00.820 --> 26:01.820
具体的页面主件里边

26:01.820 --> 26:02.820
它不需要了

26:02.820 --> 26:03.820
它要的数据

26:03.820 --> 26:05.820
全部从那个仓库里边来

26:05.820 --> 26:06.820
是这么个意思

26:06.820 --> 26:07.820
那么我们把这个

26:07.820 --> 26:09.820
剩下的主件传给它就行了

26:09.820 --> 26:10.820
不要那意思吧

26:10.820 --> 26:11.820
好好去理一下

26:11.820 --> 26:12.820
这里特别特别绕

26:12.820 --> 26:13.820
特别特别绕

26:15.820 --> 26:16.820
好

26:16.820 --> 26:17.820
比方我们访问拇贝主件

26:17.820 --> 26:18.820
它给我们返回这些主件

26:18.820 --> 26:19.820
对吧

26:19.820 --> 26:20.820
返回这些主件

26:20.820 --> 26:21.820
那么它没有这个引力秀

26:21.820 --> 26:22.820
没有这个引力秀State

26:22.820 --> 26:23.820
那么这里是undefined

26:23.820 --> 26:25.820
那么创建那个新的仓库

26:25.820 --> 26:26.820
新的仓库里边是没有状态的

26:26.820 --> 26:28.820
然后我们把这个剩余的数据

26:28.820 --> 26:29.820
传给它就行了

26:30.820 --> 26:31.820
好

26:31.820 --> 26:32.820
那么如果说你访问的是

26:32.820 --> 26:33.820
余大克是个主件

26:33.820 --> 26:34.820
它只有一个这个东西

26:34.820 --> 26:35.820
只有一个这个东西

26:35.820 --> 26:36.820
那么App里边

26:36.820 --> 26:37.820
我只创了

26:37.820 --> 26:39.820
用这个初始只创建那个仓库

26:39.820 --> 26:40.820
然后剩余的

26:40.820 --> 26:41.820
剩余的没东西了

26:41.820 --> 26:42.820
我不需要传给页面

26:42.820 --> 26:43.820
不需要传给页面

26:43.820 --> 26:44.820
那么页面这边

26:44.820 --> 26:45.820
页面这边

26:45.820 --> 26:46.820
它使用的是扛那个字

26:46.820 --> 26:47.820
用了仓库里边的数据

26:47.820 --> 26:48.820
传过去的

26:48.820 --> 26:49.820
OK

26:49.820 --> 26:50.820
那么现在就形成了

26:50.820 --> 26:51.820
这么一个效果

26:51.820 --> 26:52.820
好

26:52.820 --> 26:53.820
咱们来看一下

26:53.820 --> 26:54.820
行不行

26:55.820 --> 26:56.820
保存

26:57.820 --> 26:58.820
刷新

26:59.820 --> 27:00.820
这里出问题了

27:00.820 --> 27:02.820
什么is not defined

27:03.820 --> 27:04.820
这里写错了

27:04.820 --> 27:06.820
这里应该是来自于

27:06.820 --> 27:07.820
x

27:07.820 --> 27:08.820
x是

27:08.820 --> 27:09.820
这个

27:09.820 --> 27:10.820
刷新

27:12.820 --> 27:13.820
你看一开始是不是11了

27:13.820 --> 27:14.820
我们点击右键

27:14.820 --> 27:15.820
查看页面元带

27:15.820 --> 27:16.820
还要等一秒钟

27:16.820 --> 27:17.820
因为一秒钟过后才能增加

27:17.820 --> 27:18.820
那么一开始

27:18.820 --> 27:20.820
服务器传过来是不是只一了

27:20.820 --> 27:21.820
而且我们在服务器的

27:21.820 --> 27:22.820
Page Props里面

27:22.820 --> 27:23.820
看到的这么一个东西

27:24.820 --> 27:25.820
对吧

27:25.820 --> 27:26.820
我们的整个仓库的状态

27:26.820 --> 27:27.820
是不是看到了

27:27.820 --> 27:28.820
它给我们传过来了

27:28.820 --> 27:30.820
那么现在的客户端这边

27:30.820 --> 27:31.820
客户端这边

27:31.820 --> 27:32.820
会不会有问题的

27:32.820 --> 27:33.820
没有问题

27:33.820 --> 27:34.820
因为我们知道

27:34.820 --> 27:35.820
客户端这边

27:35.820 --> 27:36.820
也是可以拿到这个东西的

27:36.820 --> 27:37.820
客户端这边

27:37.820 --> 27:38.820
是不是可以拿到这个东西

27:38.820 --> 27:39.820
为什么

27:39.820 --> 27:40.820
因为客户端这边

27:40.820 --> 27:41.820
它是通过这个地方拿的

27:41.820 --> 27:42.820
Page Props里面拿的

27:42.820 --> 27:43.820
客户端这边

27:43.820 --> 27:44.820
你看客户端这边

27:44.820 --> 27:45.820
是不是拿到Page Props

27:45.820 --> 27:47.820
那么它也要运行这个单

27:47.820 --> 27:48.820
从Page Props里面

27:48.820 --> 27:49.820
解构出这个

27:49.820 --> 27:50.820
对吧

27:50.820 --> 27:51.820
是不是一样的客户端这边

27:51.820 --> 27:52.820
解构出这个过后

27:52.820 --> 27:53.820
就用这个东西

27:53.820 --> 27:54.820
作为初始值

27:54.820 --> 27:55.820
来创建仓库

27:55.820 --> 27:56.820
但是客户端只创建一次仓库

27:56.820 --> 27:57.820
不管它运行多少遍

27:57.820 --> 27:58.820
是吧

27:58.820 --> 27:59.820
只创建一次仓库

27:59.820 --> 28:00.820
因为它反复了使用

28:00.820 --> 28:01.820
之前的仓库

28:01.820 --> 28:03.820
只创建了一次

28:03.820 --> 28:04.820
因此

28:04.820 --> 28:05.820
都不会有问题了

28:05.820 --> 28:07.820
都不会有问题

28:07.820 --> 28:08.820
好 咱们来看一下吧

28:08.820 --> 28:09.820
如果说

28:09.820 --> 28:10.820
那么这边

28:10.820 --> 28:11.820
我们后边加

28:11.820 --> 28:12.820
都没问题了

28:12.820 --> 28:13.820
对吧

28:13.820 --> 28:14.820
都没问题了

28:14.820 --> 28:15.820
如果说客户端

28:15.820 --> 28:16.820
一开始访问的是电影页了

28:16.820 --> 28:17.820
比方说刷新

28:17.820 --> 28:18.820
访问的是电影页

28:18.820 --> 28:19.820
访问的是电影页的话

28:19.820 --> 28:20.820
客户端这边

28:20.820 --> 28:21.820
你看

28:21.820 --> 28:22.820
服务器那边

28:22.820 --> 28:23.820
肯定是没有仓库数据的

28:23.820 --> 28:24.820
服务器那边

28:24.820 --> 28:25.820
Page Props

28:25.820 --> 28:26.820
它只有这些数据

28:26.820 --> 28:27.820
它没有仓库数据

28:27.820 --> 28:28.820
那么现在

28:28.820 --> 28:30.820
我们在客户端这边

28:30.820 --> 28:32.820
无刷新跳转到这儿

28:32.820 --> 28:33.820
按理说

28:33.820 --> 28:35.820
是不应该出现

28:35.820 --> 28:37.820
就是不应该出现那个

28:37.820 --> 28:38.820
不应该出现11

28:38.820 --> 28:39.820
对吧

28:39.820 --> 28:40.820
因为是客户端

28:40.820 --> 28:41.820
跟服务器没关系

28:41.820 --> 28:42.820
是客户端这边在处理

28:42.820 --> 28:43.820
正常情况下

28:43.820 --> 28:44.820
应该就是10

28:44.820 --> 28:45.820
我们来看一下

28:47.820 --> 28:49.820
怎么还是11呢

28:49.820 --> 28:50.820
我看一下

28:50.820 --> 28:51.820
为什么还是11

28:51.820 --> 28:53.820
应该是实在对

28:55.820 --> 28:56.820
这里我写错了

28:56.820 --> 28:57.820
这里我写错了

28:57.820 --> 28:58.820
应该是这样子

28:58.820 --> 28:59.820
因为我一个Stone

28:59.820 --> 29:00.820
永远没复制对吧

29:00.820 --> 29:01.820
永远没复制

29:01.820 --> 29:02.820
所以说客户端也是

29:02.820 --> 29:04.820
客户端是永远不可能判断成功的

29:04.820 --> 29:05.820
因为这个Stone

29:05.820 --> 29:06.820
永远都是没有复制的

29:06.820 --> 29:07.820
永远是undefend的

29:07.820 --> 29:08.820
所以说客户端那边

29:08.820 --> 29:09.820
也是每次创现了

29:09.820 --> 29:10.820
一个新的仓库

29:10.820 --> 29:12.820
那么现在我再解释一下

29:12.820 --> 29:13.820
为什么是11

29:13.820 --> 29:14.820
因为我们挑过来的时候

29:14.820 --> 29:16.820
它不是会运行服务器

29:16.820 --> 29:17.820
它会运行

29:17.820 --> 29:18.820
它会用一个阿迦克斯请求

29:18.820 --> 29:21.820
去让服务器去运行这个玩意

29:21.820 --> 29:23.820
会让服务器去运行这个玩意

29:23.820 --> 29:24.820
然后服务器

29:24.820 --> 29:25.820
是不是就重新有数据了

29:25.820 --> 29:26.820
对吧

29:26.820 --> 29:28.820
把这个节省数据传过来

29:28.820 --> 29:29.820
这我们之前讲过的

29:29.820 --> 29:30.820
然后传过来过

29:30.820 --> 29:31.820
和客户端这边

29:31.820 --> 29:32.820
在完成后续渲染

29:32.820 --> 29:33.820
一渲染的时候

29:33.820 --> 29:34.820
它从App渲染走

29:34.820 --> 29:35.820
那么App这边

29:35.820 --> 29:36.820
又是掉了Megastore

29:36.820 --> 29:37.820
就把初始数据拿过来了

29:37.820 --> 29:38.820
对吧

29:38.820 --> 29:39.820
就把服务端那边

29:39.820 --> 29:40.820
初始数据拿过来了

29:40.820 --> 29:41.820
所以说客户端

29:41.820 --> 29:42.820
上面的渲染出来了

29:42.820 --> 29:43.820
也是11

29:43.820 --> 29:44.820
如果说你就希望

29:44.820 --> 29:45.820
拿到这样的效果

29:45.820 --> 29:46.820
那么你客户端

29:46.820 --> 29:47.820
为每一个页面

29:47.820 --> 29:48.820
创建一个仓库

29:48.820 --> 29:50.820
每一个页面有自己的仓库

29:50.820 --> 29:51.820
你可以这样干

29:51.820 --> 29:53.820
如果说你不希望这样子

29:53.820 --> 29:55.820
要保留客户端自己的仓库状态

29:55.820 --> 29:57.820
就是之前页面的仓库状态

29:57.820 --> 29:59.820
那么你不希望这么干的话

29:59.820 --> 30:00.820
那么我建议你

30:00.820 --> 30:01.820
这里最好了

30:01.820 --> 30:03.820
不要用这个写法

30:03.820 --> 30:04.820
这里写法写的有问题

30:04.820 --> 30:05.820
应该是

30:05.820 --> 30:06.820
如果说它是浏览器

30:06.820 --> 30:07.820
再来判断一下

30:07.820 --> 30:09.820
你有仓库吗

30:09.820 --> 30:10.820
还是之前的写法都要的

30:10.820 --> 30:12.820
有仓库我就返回仓库

30:12.820 --> 30:13.820
没有仓库干嘛

30:13.820 --> 30:14.820
我给你创建一个仓库

30:14.820 --> 30:15.820
对吧

30:15.820 --> 30:16.820
给它复制

30:16.820 --> 30:17.820
创建这么一个仓库

30:17.820 --> 30:18.820
那么这个玩意

30:18.820 --> 30:19.820
我们可以写成一个函数

30:19.820 --> 30:21.820
create

30:21.820 --> 30:23.820
return

30:23.820 --> 30:24.820
OK

30:24.820 --> 30:25.820
那么这边我一定要用这个函数

30:25.820 --> 30:27.820
免得重复带嘛

30:27.820 --> 30:28.820
那么给它创建一个仓库

30:28.820 --> 30:29.820
create

30:29.820 --> 30:30.820
返回

30:30.820 --> 30:31.820
stone

30:31.820 --> 30:32.820
对吧

30:32.820 --> 30:33.820
那么这里呢

30:33.820 --> 30:34.820
我们其实可以减化一下带嘛

30:34.820 --> 30:35.820
如果说你没有仓库

30:35.820 --> 30:36.820
OK

30:36.820 --> 30:38.820
我给你创建一个仓库

30:38.820 --> 30:40.820
然后再返回

30:40.820 --> 30:44.220
OK

30:44.220 --> 30:45.220
把客户端写成这个样子

30:45.220 --> 30:47.220
咱们来这里输出一下

30:48.220 --> 30:49.220
在这里

30:49.220 --> 30:50.220
不输出了

30:50.220 --> 30:51.220
那就这样吧

30:51.220 --> 30:52.220
那么我们来见他看一下

30:52.220 --> 30:54.220
客户端那边肯定是只有一个仓库的

30:54.220 --> 30:55.220
好

30:55.220 --> 30:56.220
接下来我们看一下

30:56.220 --> 30:57.220
刷新

30:57.220 --> 30:59.220
initial status is not defined

30:59.220 --> 31:00.220
这边

31:00.220 --> 31:03.750
OK

31:03.750 --> 31:07.190
好 刷新

31:07.190 --> 31:09.190
好 现在是直接访问这个页面

31:09.190 --> 31:10.190
服务器给我们的是11

31:10.190 --> 31:11.190
对吧

31:11.190 --> 31:12.190
客户端接管后去现在

31:12.190 --> 31:14.190
如果说你一开始访问的是电影页了

31:14.190 --> 31:15.190
刷新

31:15.190 --> 31:16.190
一开始访问的是电影页

31:16.190 --> 31:18.190
然后客户端切过去

31:18.190 --> 31:20.190
它就不会使用服务器给我的数据了

31:20.190 --> 31:21.190
还是用的是之前的仓库

31:21.190 --> 31:22.190
对吧

31:22.190 --> 31:23.190
那边就是死

31:23.190 --> 31:24.190
那么这是比较正常的情况

31:24.190 --> 31:25.190
对吧

31:25.190 --> 31:26.190
因为你没有访问服务器

31:26.190 --> 31:28.190
没有访问服务器的肯定是正常的情况

31:28.190 --> 31:30.190
那有人说到客户端这边

31:30.190 --> 31:31.190
也需要那个

31:31.190 --> 31:33.190
也需要就是那个

31:33.190 --> 31:35.190
跟服务器那边保持一样

31:35.190 --> 31:37.190
那么这个资讯就是客户端的代码了

31:37.190 --> 31:39.190
就是纯粹是客户端的代码了

31:39.190 --> 31:40.190
比方说我们在这里

31:40.190 --> 31:41.190
怎么样呢

31:41.190 --> 31:42.190
我们在配级里边

31:42.190 --> 31:43.190
写上一个就是

31:45.190 --> 31:46.190
写上一个什么呢

31:46.190 --> 31:47.190
写上一开始的时候

31:47.190 --> 31:49.190
我们去触发一次

31:49.190 --> 31:50.190
sync increase

31:50.190 --> 31:51.190
对吧

31:51.190 --> 31:52.190
我们可以用什么呢

31:52.190 --> 31:53.190
可以用UseEffects

31:53.190 --> 31:54.190
UseEffects

31:57.190 --> 31:58.190
怎么在这呢

31:58.190 --> 32:02.190
ImportFromReact

32:02.190 --> 32:04.190
这里我们可以使用

32:04.190 --> 32:07.190
ReactUseEffects

32:08.190 --> 32:09.190
这边使用

32:09.190 --> 32:10.190
对吧

32:10.190 --> 32:12.190
那是一样的UseEffects

32:14.190 --> 32:15.190
这边一开始

32:15.190 --> 32:16.190
一开始的时候

32:16.190 --> 32:17.190
我们去触发一次

32:17.190 --> 32:18.190
触发一次这个increase

32:18.190 --> 32:20.190
我们把increase作为一代

32:20.190 --> 32:21.190
一开始触发

32:21.190 --> 32:23.190
sync increase

32:23.190 --> 32:24.190
那么一开始呢

32:24.190 --> 32:26.190
去运行一次

32:26.190 --> 32:27.190
sync increase

32:27.190 --> 32:28.190
有值吗

32:28.190 --> 32:29.190
有值的话

32:29.190 --> 32:31.190
那么我们就

32:31.190 --> 32:32.190
有值的话

32:32.190 --> 32:33.190
我们就

32:33.190 --> 32:34.190
运行

32:34.190 --> 32:36.190
sync increase

32:36.190 --> 32:37.190
对吧

32:37.190 --> 32:38.190
这是客户端自己的事情

32:38.190 --> 32:39.190
好保存

32:39.190 --> 32:40.190
咱们来用来看一下

32:40.190 --> 32:41.190
电样页

32:41.190 --> 32:42.190
刷新

32:42.190 --> 32:44.190
那么到React测试

32:45.190 --> 32:46.190
是不是变了

32:46.190 --> 32:47.190
对吧

32:47.190 --> 32:49.190
这是客户端自己的事情

32:49.190 --> 32:51.190
跟以前里面学的传统的方式

32:51.190 --> 32:52.190
就是一样的

32:52.190 --> 32:53.190
对吧

32:53.190 --> 32:54.190
就是一样的了

32:54.190 --> 32:55.190
当然这有两种模式

32:55.190 --> 32:56.190
还有另外的模式

32:56.190 --> 32:57.190
就是我们刚才说的

32:57.190 --> 32:59.190
不管这个东西

32:59.190 --> 33:01.190
那么全部交给服务端

33:01.190 --> 33:02.190
然后服务端

33:02.190 --> 33:03.190
给我们的返回的数据

33:03.190 --> 33:04.190
我就用了客户端去

33:04.190 --> 33:05.190
那么这样子

33:05.190 --> 33:06.190
你就可以让每一个仓库

33:06.190 --> 33:07.190
都是一个新的仓库

33:07.190 --> 33:09.190
就不要为客户端

33:09.190 --> 33:10.190
客户端也是

33:10.190 --> 33:11.190
跟服务器一样

33:11.190 --> 33:12.190
每一个页面

33:12.190 --> 33:13.190
就是一个新的仓库

33:13.190 --> 33:14.190
每一个页面就是新的仓库

33:14.190 --> 33:16.190
那么就比较像传统的模式

33:16.190 --> 33:18.190
页面的状态是不会保存的

33:18.190 --> 33:19.190
页面的状态是不会保存的

33:19.190 --> 33:21.190
那么看你自己使用哪种模式

33:21.190 --> 33:22.190
比方说

33:22.190 --> 33:23.190
如果说每一个都要用一个新的仓库的话

33:23.190 --> 33:24.190
OK

33:24.190 --> 33:25.190
这个代码就很简单了

33:25.190 --> 33:27.190
就这么一句代码就完成了

33:27.190 --> 33:29.190
那么就是之前的状况

33:29.190 --> 33:30.190
点电影

33:30.190 --> 33:32.190
那么点过来

33:32.190 --> 33:33.190
点过来

33:33.190 --> 33:34.190
就看你要使用哪种模式

33:34.190 --> 33:35.190
总之的

33:35.190 --> 33:37.190
你页面要保留自己的状态

33:37.190 --> 33:38.190
你仓库的状态

33:38.190 --> 33:39.190
希望在客户端

33:39.190 --> 33:40.190
要持久的保留下来

33:40.190 --> 33:42.190
那么就是要使用同一个仓库

33:42.190 --> 33:43.190
如果说你每一个页面

33:43.190 --> 33:45.190
都是一个独立的状态的话

33:45.190 --> 33:46.190
就新创的一个仓库

33:46.190 --> 33:47.190
都可以

33:47.190 --> 33:50.190
看你自己要用哪一种模式

33:50.190 --> 33:51.190
OK

33:51.190 --> 33:52.190
那么现在呢

33:52.190 --> 33:53.190
就搞定了

33:53.190 --> 33:54.190
就搞定了

33:54.190 --> 33:55.190
那么我们这里还是使用

33:55.190 --> 33:57.190
每一个页面有自己的仓库

33:57.190 --> 33:59.190
每个页面有自己的

33:59.190 --> 34:00.190
每个页面有自己的

34:00.190 --> 34:03.190
就是页面是使用的是同一个仓库

34:03.190 --> 34:04.190
怎么呢

34:04.190 --> 34:06.190
Stone is not defined

34:06.190 --> 34:08.190
好 这边

34:08.190 --> 34:10.190
我们还是使用的这种模式

34:10.190 --> 34:11.190
保留页面状态

34:11.190 --> 34:13.190
OK

34:14.190 --> 34:15.190
那么现在呢

34:15.190 --> 34:16.190
就是这个地方就做完了

34:16.190 --> 34:17.190
这个地方就做完了

34:17.190 --> 34:18.190
好

34:18.190 --> 34:19.190
那么大家下去还是把他做一下

34:19.190 --> 34:20.190
因为这个Redux

34:20.190 --> 34:21.190
他跟那个SGS

34:21.190 --> 34:23.190
要靠自己手动鞋带马来结合

34:23.190 --> 34:24.190
我相信以后

34:24.190 --> 34:25.190
肯定会有一些第三方库

34:25.190 --> 34:26.190
来帮助他做这个事情

34:26.190 --> 34:27.190
好

34:27.190 --> 34:28.190
那么这一课

34:28.190 --> 34:29.190
我们把Redux加进去了

34:29.190 --> 34:30.190
好 下一课呢

34:30.190 --> 34:31.190
我就开始来说

34:31.190 --> 34:32.190
登陆功能

34:32.190 --> 34:33.190
就在Redux里面加入登陆

34:33.190 --> 34:34.190
我们把它完整的走一遍

