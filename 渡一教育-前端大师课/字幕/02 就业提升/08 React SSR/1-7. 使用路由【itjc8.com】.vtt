WEBVTT

00:00.370 --> 00:02.370
好 咱们接着上一课讲

00:02.370 --> 00:07.370
有的人说 现在袁老师你为什么不做效果呢

00:07.370 --> 00:11.370
做效果是这样子 他是reaction的事情

00:11.370 --> 00:14.370
我只是呢 这门课呢 我们只是告诉大家

00:14.370 --> 00:18.370
在实现服务端宣展的时候呢 有哪些问题需要考虑

00:18.370 --> 00:20.370
我们把这些问题解决了

00:20.370 --> 00:22.370
要做什么效果呢 你就有兴趣的话 你自己去做

00:22.370 --> 00:24.370
比方说这个home页面里面 你要做啥效果

00:24.370 --> 00:26.370
你自己去做就行了

00:26.370 --> 00:29.370
只是呢 我这门课呢 跟这个效果无关

00:29.370 --> 00:32.370
因为那是reaction的事情 你们做效果跟以前一样的

00:32.370 --> 00:35.370
没有任何区别 比方说你在这里还可以建一些公共的组件 对吧

00:35.370 --> 00:40.370
component 在页面上去引用这些组件

00:40.370 --> 00:43.370
然后呢 要实现什么效果 理智与区实现就行了

00:43.370 --> 00:46.370
随便什么效果都能实现的 跟之前是完全一样的

00:46.370 --> 00:49.370
我只是把这些里边 做效果的过程中

00:49.370 --> 00:52.370
容易遇到的问题给大家解决了

00:52.370 --> 00:55.370
这一刻呢 咱们开始引用 引入那个路由的概念了

00:55.370 --> 00:58.370
因为我们目前呢 只有一个页面 对吧

00:58.370 --> 01:01.370
一个home页面 那么这里呢 我们给他多加几个页面

01:01.370 --> 01:04.370
来实现路由的效果 实际上路由这一块呢

01:04.370 --> 01:07.370
并没有那么复杂 只是呢 有些细节问题需要考虑

01:07.370 --> 01:11.370
跟以前用的路由呢 差不多 我们把一些差异点给大家讲一下

01:11.370 --> 01:15.370
比方说我们这里呢 有一个页面 这里是

01:15.370 --> 01:18.370
什么电影列表吧 movies

01:18.370 --> 01:21.370
OK 那么这里呢 我们建一个

01:21.370 --> 01:24.370
如果说你要写央视的话 你自己去写 跟之前一样的

01:24.370 --> 01:27.370
然后这里呢 是电影列表 写一个

01:27.370 --> 01:31.680
好 电影列表

01:31.680 --> 01:33.680
好 然后呢 这里多了一个页面了 对吧

01:33.680 --> 01:35.680
然后再来一个页面嘛 再来一个not found

01:35.680 --> 01:38.680
就是404页面

01:38.680 --> 01:42.680
新建一个 这个是RFC

01:42.680 --> 01:46.680
404 not found

01:46.680 --> 01:50.680
OK 现在呢 我们把这个有三个页面

01:50.680 --> 01:53.680
对吧 那么我们需要一个路由来进行切换

01:53.680 --> 01:55.680
好 那么这里呢 我们首先安装

01:55.680 --> 01:58.680
我们今天学过路由的 对吧 我们不能说一把路由

01:58.680 --> 02:00.680
又全部重新讲一遍

02:00.680 --> 02:03.680
所以说我们这门课啊 是一个极大程度 啥都会用到

02:03.680 --> 02:07.680
我们这里呢 安装 安装react

02:07.680 --> 02:10.680
rotor 动 对吧 我们之前学路由的时候

02:10.680 --> 02:13.680
安装是这个东西 实际上路由啊

02:13.680 --> 02:16.680
它跟页面是没有什么直接关系的

02:16.680 --> 02:19.680
我们之前讲react的时候 我记得我讲react的时候

02:19.680 --> 02:22.680
我深入的讲过 还分析过原嘛 对吧 它是跟

02:22.680 --> 02:27.680
环境无关的 只有那个少部分组建的跟环境有关系

02:27.680 --> 02:29.680
其实大部分组建跟环境是没有关系的

02:29.680 --> 02:33.680
它就是根据路径 路径哪来的 可能来自于任何地方

02:33.680 --> 02:36.680
甚至可以来自于内存 一个就是路由站

02:36.680 --> 02:39.680
总之 给它一个路径 它就能够炫耐

02:39.680 --> 02:40.680
是这么回事

02:40.680 --> 02:42.680
所以我们这种路由的时候呢

02:42.680 --> 02:45.680
在服务专宣的时候 有些小的问题要注意

02:45.680 --> 02:47.680
那咱们把这个路由安装好了之后呢

02:47.680 --> 02:50.680
我们这里呢 生成一个新建一个文件夹

02:50.680 --> 02:54.680
路由的路由主线 比方说我们这里写个road

02:54.680 --> 02:58.680
这张是公用的 只有这个client文件夹是客户专用的

02:58.680 --> 03:01.680
server文件夹是服务专用的 其他的文件夹都是公用的

03:01.680 --> 03:06.680
好 那么这个road 这里边让我们写上一个就是比方说road app

03:06.680 --> 03:11.680
像这么一个主线 这个主线就完成一些路由的配置

03:11.680 --> 03:16.680
我们这里写上 这里呢我们导入 导入什么呢

03:16.680 --> 03:20.680
导入这个front-react-road 跟以前的写法完全一样

03:20.680 --> 03:23.680
我这里不多说了 做一些路由的配置

03:23.680 --> 03:26.680
然后这里呢 我们有三个主线 一个是home

03:26.680 --> 03:30.680
from 来自于pages-home

03:30.680 --> 03:36.680
一个是movies 一个是not found

03:36.680 --> 03:40.680
found OK 我们这里呢 导入进来

03:40.680 --> 03:42.680
好 那么这里呢 我们就对路由做一些配置

03:42.680 --> 03:46.680
再来一个switch

03:46.680 --> 03:50.680
switch OK 那么这边呢

03:50.680 --> 03:53.680
我们就对路由配置有三个路由 对吧

03:53.680 --> 03:57.680
三个路由 一个一个来 首先pass

03:57.680 --> 04:00.680
如果说访问这个路径 精确匹配 一个react

04:00.680 --> 04:04.680
我们就使用component 使用什么呢

04:04.680 --> 04:06.680
使用home主线

04:06.680 --> 04:10.680
然后这个地方使用movies主线

04:11.680 --> 04:14.680
movies 这个地方使用not found

04:14.680 --> 04:17.680
那么相应的 我们把路形改一下

04:17.680 --> 04:20.680
not found呢 我们就这些东西就不要了

04:20.680 --> 04:23.680
上面都匹配不到的话 我们下面就可以水一匹配了

04:23.680 --> 04:26.680
OK 我们把这个路由稍微配置一下

04:26.680 --> 04:28.680
好 配置了这个路由过后呢 我们之后呢

04:28.680 --> 04:30.680
比方说我们先到客户端 先来解决客户端

04:30.680 --> 04:33.680
客户端大概完全一样 一点区别都没有

04:33.680 --> 04:35.680
好 那么这里呢 我们就把home主线去掉了

04:35.680 --> 04:38.680
这里呢 我们导入

04:38.680 --> 04:42.680
导入这个road app

04:50.500 --> 04:53.500
OK 导入这个 那么我们这里呢

04:53.500 --> 04:56.500
再导入一个 再导入一个路由根主线

04:58.500 --> 05:01.500
我们用了什么呢 平时用的都是browser

05:01.500 --> 05:04.500
Rotor 对吧 那么我们就用这个 browser rotor

05:05.500 --> 05:08.500
然后这里边呢 我们使用这个road app

05:08.500 --> 05:10.500
因为这里边有路由配置 因为路由配置一样

05:10.500 --> 05:12.500
所以说把它提出去了 当然你要在这里重复

05:12.500 --> 05:15.500
以后再服务端写一遍 客户端再写一遍也行

05:15.500 --> 05:17.500
但没必要 我们把它提出去

05:17.500 --> 05:19.500
好 那么这里呢 我们就完成了客户端的配置了

05:19.500 --> 05:23.500
对吧 路由配置 那么客户端那就会根据浏览器的路径

05:23.500 --> 05:27.500
然后渲染相应的组件 对吧 客户端就会做这么一件事

05:27.500 --> 05:30.500
好 接下来我们来看一下 运行

05:30.500 --> 05:34.820
NPM run 對 看一下行不行

05:34.820 --> 05:40.410
好 运行出来了 好 接下来我们打开浏览器

05:41.410 --> 05:45.410
localhost 8080 看一下我们访问这个地址

05:45.410 --> 05:47.410
首页对吧 我们之前做的首页

05:47.410 --> 05:51.410
然后再访问这个地址 movies 看一下电影列表 对吧

05:51.410 --> 05:54.410
好像一切都很好 对吧 然后随便访问一个地址

05:54.410 --> 05:57.410
老实放着 一切都非常好 对吧 顺便进行好

05:57.410 --> 06:00.410
但是实际上现在是有问题的 有问题的

06:00.410 --> 06:03.410
为什么呢 咱们来看一下 首页没问题

06:03.410 --> 06:06.410
然后我们的访问一下 movies 页面

06:06.410 --> 06:08.410
你看 查看右键 原来吧

06:08.410 --> 06:12.910
你会发现 页面上显示倒是没啥问题

06:12.910 --> 06:14.910
但是呢 服务器给我们的结果是啥呀

06:14.910 --> 06:18.910
是不是还是首页的结果 对吧 服务端片段都还是首页的结果

06:18.910 --> 06:20.910
那现在是怎么回事啊 现在是这样子

06:20.910 --> 06:22.910
我来看一下 梳理一下

06:22.910 --> 06:25.910
我们首先请求服务器

06:26.910 --> 06:29.910
服务器给我们什么呢 我们请求这个地址

06:29.910 --> 06:32.910
服务器先看这个 public movie 有没有 movies 文件

06:32.910 --> 06:34.910
对吧 因为有这个文件 发现没有

06:34.910 --> 06:37.910
没有怎么办的服务器 服务器它就会给我们这个东西

06:37.910 --> 06:40.910
它就会给我们这个函数 这个函数券的结果

06:40.910 --> 06:43.910
这个函数给我们什么结果 这个函数就给我们一个

06:43.910 --> 06:47.910
这个 app 组建生成的结果 对吧 app 组建生成的结果

06:47.910 --> 06:51.910
app 组建会给我们什么结果 app 组建会给我们一个 home 组建的结果

06:51.910 --> 06:54.910
所以说你就看到了首页 服务器给我们的首页

06:54.910 --> 06:57.910
然后服务器都到了客户端 之后呢 客户端引用了JS

06:57.910 --> 07:00.910
JS一看 不对呀 我这个录以

07:00.910 --> 07:03.910
我们现在的地址是这个 客户端一看不对

07:03.910 --> 07:05.910
我们地址是这个 它根据路由的配置

07:05.910 --> 07:07.910
因为客户端运行的是这个代码 对吧

07:07.910 --> 07:10.910
它会根据这个地址 然后渲染相应的逐渐

07:10.910 --> 07:12.910
渲染什么逐渐呢 它就匹配到这个逐渐

07:12.910 --> 07:14.910
所以说呢 现在呢 目前是这个情况

07:14.910 --> 07:17.910
服务器呢 给我们首页的代码

07:17.910 --> 07:19.910
但是呢 客户端一看不对

07:19.910 --> 07:21.910
然后呢 我又重新渲染成电影列表

07:21.910 --> 07:24.910
所以说 大家仔细观察 它会散一下 看了没

07:24.910 --> 07:28.910
我不知道这个 我这个争略 大家能不能看得清楚

07:28.910 --> 07:31.910
它会散一下 强制刷新

07:31.910 --> 07:34.910
太快了 太快了 主要是

07:34.910 --> 07:36.910
它会散一下

07:36.910 --> 07:38.910
就是它先渲染服务器这个结构

07:38.910 --> 07:41.910
然后呢 客户端再把它变成这个结构

07:41.910 --> 07:42.910
这是不是我们希望的

07:42.910 --> 07:45.910
我们希望了服务器也会根据路径来渲染不同的逐渐

07:45.910 --> 07:47.910
然后把逐渐的渲染结构直接给我们

07:47.910 --> 07:52.910
达成了服务器跟客户端那就是页面一致

07:52.910 --> 07:53.910
那么这是怎么办呢

07:53.910 --> 07:55.910
也就是说服务器端也要用路由 对吧

07:55.910 --> 07:56.910
就这么个意思

07:56.910 --> 07:59.910
说那我们到服务器端这一块 是不是也要用路由

07:59.910 --> 08:01.910
咱们再服务端再来一次

08:01.910 --> 08:03.910
Import

08:03.910 --> 08:04.910
Rat

08:04.910 --> 08:05.910
Rotetone

08:05.910 --> 08:07.910
我们这里是用 Browser Rotor

08:07.910 --> 08:10.910
这里呢 我们还是一样啊

08:10.910 --> 08:14.910
同样的 我们这里倒入

08:14.910 --> 08:18.910
倒入这个 Road App from

08:18.910 --> 08:21.910
Road App

08:21.910 --> 08:22.910
好 我们把这个放重新

08:22.910 --> 08:24.910
看行不行了 这样子服务端

08:24.910 --> 08:26.910
行不行了 大家想想行不行

08:26.910 --> 08:28.910
好 咱们来渲染一次

08:28.910 --> 08:30.910
就那个东西 现在服务端

08:30.910 --> 08:34.420
报错了 报错了

08:34.420 --> 08:36.420
他这个时空了

08:36.420 --> 08:38.420
Colors Final Road 这写错了

08:38.420 --> 08:41.420
我说不应该报这种错误

08:41.420 --> 08:42.420
好 现在我们改正确

08:42.420 --> 08:43.420
那么现在呢

08:43.420 --> 08:44.420
因为他报了一个错

08:44.420 --> 08:45.420
因为报了一个错

08:45.420 --> 08:49.420
他说 Browser History needs to be done

08:49.420 --> 08:50.420
这个有意思了

08:50.420 --> 08:51.420
这是什么意思呢

08:51.420 --> 08:55.420
就是说我们在服务端用了这个 Browser Rotor

08:55.420 --> 08:56.420
对吧 因为在服务端用了这个东西

08:56.420 --> 08:58.420
这其实就是服务器的错误

08:58.420 --> 08:59.420
这个是个服务器的错误

08:59.420 --> 09:01.420
那么这个服务端用了 Browser Rotor

09:01.420 --> 09:03.420
那 Browser Rotor干嘛呀

09:03.420 --> 09:05.420
这 Browser Rotor 根据浏览器的路径

09:05.420 --> 09:07.420
所以他肯定要用到一些动物对象

09:07.420 --> 09:09.420
用到一些浏览器的 API

09:09.420 --> 09:11.420
来获取这个路径 对吧

09:11.420 --> 09:12.420
来获取这个路径

09:12.420 --> 09:14.420
然后根据这个路径来进行

09:14.420 --> 09:16.420
来进行后续的匹配

09:16.420 --> 09:17.420
那匹配是一样的

09:17.420 --> 09:19.420
匹配是跟那个服务器

09:19.420 --> 09:20.420
还是科普端是无关的

09:20.420 --> 09:21.420
就这一块代码

09:21.420 --> 09:23.420
是跟服务器和科普端无关的

09:23.420 --> 09:24.420
它就是根据路径来匹配嘛

09:24.420 --> 09:25.420
那么路径从哪里来呢

09:25.420 --> 09:27.420
路径我们在科普端的时候

09:27.420 --> 09:29.420
是从浏览器的路径来的

09:29.420 --> 09:31.420
那么服务器哪有浏览器啊

09:31.420 --> 09:33.420
你在服务器上有浏览器嘛

09:33.420 --> 09:34.420
服务器在运行的时候

09:34.420 --> 09:35.420
服务器是发给一个

09:35.420 --> 09:37.420
ATM文档给浏览器

09:37.420 --> 09:39.420
那服务器本身没有浏览器啊

09:39.420 --> 09:40.420
对吧

09:40.420 --> 09:41.420
服务器哪有浏览器

09:41.420 --> 09:43.420
所以说服务器这个东西是用不了的啊

09:43.420 --> 09:44.420
是用不了的

09:44.420 --> 09:45.420
那么服务器用什么呢

09:45.420 --> 09:46.420
有些同学说用哈希

09:46.420 --> 09:47.420
哈希也不行了

09:47.420 --> 09:50.420
哈希也是要根据浏览器的地址啊

09:50.420 --> 09:51.420
那用啥呢

09:51.420 --> 09:52.420
用啥呢

09:52.420 --> 09:53.420
好 这个呢

09:53.420 --> 09:54.420
我们给他介绍一个啊

09:54.420 --> 09:56.420
叫做Static Rotor

09:56.420 --> 09:58.420
这是服务器应该用的

09:58.420 --> 10:00.420
所以说我们要换成它

10:00.420 --> 10:02.420
那么它这个东西啊

10:02.420 --> 10:03.420
它东西啥都没有

10:03.420 --> 10:04.420
就说它就是一个

10:04.420 --> 10:06.420
普普通通的一个站个位置

10:06.420 --> 10:07.420
它这个玩意儿呢

10:07.420 --> 10:09.420
是这样子

10:09.420 --> 10:10.420
使用什么路径

10:10.420 --> 10:11.420
它根本就不知道

10:11.420 --> 10:13.420
它专门在服务器里面用的

10:13.420 --> 10:15.420
那么使用什么路径呢

10:15.420 --> 10:16.420
它根本就不知道

10:16.420 --> 10:18.420
你要告诉它路径从哪里来

10:18.420 --> 10:19.420
路径是啥

10:19.420 --> 10:21.420
你要自己手动告诉它

10:22.420 --> 10:23.420
那么怎么来告诉呢

10:23.420 --> 10:25.420
是通过location来告诉的

10:25.420 --> 10:26.420
比方说我们location

10:26.420 --> 10:28.420
来给它写一个movement

10:28.420 --> 10:29.420
那么就告诉它

10:29.420 --> 10:31.420
我们这一块匹配到了路径的是movement

10:31.420 --> 10:33.420
对吧 是不是这个意思

10:33.420 --> 10:35.420
然后呢你根据movement去匹配

10:35.420 --> 10:36.420
匹配逐渐

10:36.420 --> 10:38.420
你要这么告诉它

10:38.420 --> 10:39.420
这个逐渐呢

10:39.420 --> 10:40.420
其实还有一个属性

10:40.420 --> 10:41.420
现在必须要写上

10:41.420 --> 10:42.420
不写要报错的

10:42.420 --> 10:44.420
这个属性我们以后会用到

10:44.420 --> 10:45.420
目前呢好像

10:45.420 --> 10:46.420
目前是没有什么用的

10:46.420 --> 10:47.420
你给它写个空对象就行了

10:47.420 --> 10:49.420
或者是你这样子

10:49.420 --> 10:50.420
contact

10:50.420 --> 10:51.420
给它写个空对象

10:51.420 --> 10:53.420
你把它传过来就行了

10:53.420 --> 10:55.420
目前给它个空对象就行了

10:55.420 --> 10:56.420
目前没有什么用

10:56.420 --> 10:57.420
但是你必须要写

10:57.420 --> 10:58.420
我们后边会说

10:58.420 --> 10:59.420
它有什么用

10:59.420 --> 11:00.420
它还是有用的

11:00.420 --> 11:01.420
那么这里我们

11:01.420 --> 11:02.420
就告诉它一个路径

11:02.420 --> 11:03.420
比方说我们现在写了过后

11:03.420 --> 11:04.420
我们来看一下

11:04.420 --> 11:05.420
看一下一个神奇的现象

11:05.420 --> 11:06.420
我们这里再刷新

11:08.420 --> 11:09.420
重启一下

11:09.420 --> 11:13.970
重启一下

11:13.970 --> 11:14.970
我这个不知道

11:14.970 --> 11:15.970
控制来怎么回事

11:15.970 --> 11:16.970
它有的时候反应

11:16.970 --> 11:17.970
它没有反应

11:17.970 --> 11:18.970
它监控的文件

11:18.970 --> 11:20.970
它想重新打包

11:20.970 --> 11:22.970
它始终没反应

11:22.970 --> 11:23.970
那么现在看一下

11:23.970 --> 11:25.970
服务器根本的结果是什么

11:25.970 --> 11:26.970
服务器根本就是电影列表

11:26.970 --> 11:28.970
为什么给你电影列表

11:28.970 --> 11:29.970
因为你给它手中告诉它

11:29.970 --> 11:30.970
路径是电影列表

11:30.970 --> 11:31.970
它也不知道路径是啥

11:31.970 --> 11:32.970
你告诉它路径是电影列表

11:32.970 --> 11:33.970
它就给你电影列表

11:33.970 --> 11:34.970
就是客户端

11:34.970 --> 11:35.970
这边根据这个路径

11:35.970 --> 11:36.970
也选上出电影列表

11:36.970 --> 11:37.970
但是如果说

11:37.970 --> 11:39.970
我们访问首页又出问题了

11:39.970 --> 11:40.970
然后首页

11:41.970 --> 11:42.970
首页的时候你看

11:42.970 --> 11:44.970
服务器给你的还是电影列表

11:44.970 --> 11:45.970
客户端一看不对

11:45.970 --> 11:46.970
你这个路径是跟路径

11:46.970 --> 11:47.970
所以说客户端

11:47.970 --> 11:49.970
又给你切换到这个主见了

11:50.970 --> 11:52.970
说到目前出现这么一个问题

11:52.970 --> 11:54.970
也就是说服务器也不能写死

11:54.970 --> 11:56.970
服务器这个地方应该显示什么

11:56.970 --> 11:57.970
应该告诉它什么

11:57.970 --> 11:58.970
是不是动态了

11:59.970 --> 12:01.970
动态的路径从哪里来

12:01.970 --> 12:02.970
从哪里来

12:02.970 --> 12:03.970
服务器

12:03.970 --> 12:04.970
好好想一想

12:04.970 --> 12:05.970
动态的路径应该从哪里来

12:05.970 --> 12:06.970
它没有浏览器

12:06.970 --> 12:07.970
它应该从哪里来

12:07.970 --> 12:11.970
是不是应该从浏览器的访问路径

12:11.970 --> 12:13.970
访问路径里边来

12:13.970 --> 12:14.970
对吧

12:14.970 --> 12:15.970
浏览器访问什么地址

12:15.970 --> 12:16.970
你就给它什么地址

12:16.970 --> 12:17.970
对吧

12:17.970 --> 12:18.970
它没有浏览器

12:18.970 --> 12:20.970
但是它可以获取到浏览器

12:20.970 --> 12:22.970
就是你请求的路径

12:22.970 --> 12:23.970
那么这个请求路径

12:23.970 --> 12:24.970
这里肯定获取不到

12:24.970 --> 12:25.970
应该在哪里获取

12:25.970 --> 12:27.970
是不是应该在这里获取

12:27.970 --> 12:28.970
这里不是有Rick对象吗

12:28.970 --> 12:29.970
对吧

12:29.970 --> 12:30.970
我们也就是可以通过

12:30.970 --> 12:31.970
这个主见的属性

12:31.970 --> 12:32.970
是不是给它传过去

12:32.970 --> 12:33.970
把这个就是Rick对象

12:33.970 --> 12:34.970
给它传过去

12:34.970 --> 12:36.970
就是把它需要的两个东西

12:36.970 --> 12:37.970
给它传过去

12:37.970 --> 12:38.970
所以说我们可以在这里

12:38.970 --> 12:40.970
这个主见可以写一个属性

12:40.970 --> 12:41.970
在服务器上写个属性

12:41.970 --> 12:42.970
给它解构一下

12:42.970 --> 12:44.970
你需要告诉我两个东西

12:44.970 --> 12:45.970
一个是location

12:45.970 --> 12:46.970
一个是context

12:46.970 --> 12:47.970
context我们以后会说

12:47.970 --> 12:48.970
先暂时写到这

12:48.970 --> 12:50.970
那么这里我们直接使用

12:50.970 --> 12:52.970
这边context

12:52.970 --> 12:53.970
location

12:53.970 --> 12:54.970
这边使用context

12:54.970 --> 12:55.970
也就是在这边

12:55.970 --> 12:56.970
在这

12:57.970 --> 12:58.970
Render的时候

12:58.970 --> 12:59.970
是不是要把它传过去

12:59.970 --> 13:00.970
怎么传递

13:00.970 --> 13:01.970
一个是location

13:01.970 --> 13:02.970
传递为什么呢

13:02.970 --> 13:04.970
传递为Rick的pass

13:04.970 --> 13:05.970
对吧

13:05.970 --> 13:06.970
我们请求的路径

13:06.970 --> 13:10.970
另一个我们是context

13:10.970 --> 13:12.970
给它传递什么呢

13:12.970 --> 13:13.970
传递

13:13.970 --> 13:15.970
我们这里写个对象吧

13:15.970 --> 13:16.970
context

13:16.970 --> 13:17.970
写个对象

13:17.970 --> 13:21.540
这里我们给它一个

13:23.540 --> 13:24.540
空对象

13:24.540 --> 13:26.540
给它放过去

13:26.540 --> 13:27.540
给它放过去

13:27.540 --> 13:29.540
没问题吧

13:29.540 --> 13:30.540
没问题

13:30.540 --> 13:31.540
那么就完成了

13:31.540 --> 13:33.540
这个代码好像看起来

13:33.540 --> 13:34.540
有点优种是吧

13:34.540 --> 13:35.540
那么这个atmos

13:35.540 --> 13:36.540
atmos的生成

13:36.540 --> 13:38.540
我们再来写个文件

13:38.540 --> 13:39.540
再来写个模块

13:39.540 --> 13:40.540
稍微改造一下

13:41.540 --> 13:42.540
get

13:42.540 --> 13:43.540
atmos

13:43.540 --> 13:44.540
要解释

13:44.540 --> 13:45.540
再来写个文件

13:45.540 --> 13:46.540
这个文件主要是

13:46.540 --> 13:47.540
给它一个atmos

13:47.540 --> 13:49.540
给它一个atmos

13:49.540 --> 13:50.540
atmos页面

13:50.540 --> 13:51.540
atmos文档

13:51.540 --> 13:53.980
好来吧

13:53.980 --> 13:54.980
我们这里写上一个

13:54.980 --> 13:56.980
写上一个

13:56.980 --> 14:01.180
方向形

14:01.180 --> 14:02.180
为什么

14:02.180 --> 14:04.180
简写打不出来呢

14:05.180 --> 14:06.180
export

14:06.180 --> 14:07.180
d

14:07.180 --> 14:08.180
f

14:08.180 --> 14:10.180
为什么打不出来

14:10.180 --> 14:12.180
我突然忘了这个

14:12.180 --> 14:13.180
就这样手动写吧

14:13.180 --> 14:14.180
突然忘了这个

14:14.180 --> 14:16.180
快捷键式了

14:17.180 --> 14:18.180
这边我们就把这个代码

14:18.180 --> 14:19.180
复制过来

14:19.180 --> 14:20.180
把这个代码复制过来

14:22.180 --> 14:23.180
最后来返回

14:24.180 --> 14:25.180
render

14:25.180 --> 14:26.180
给它返回

14:27.180 --> 14:28.180
这里

14:28.180 --> 14:29.180
因为这里边

14:29.180 --> 14:30.180
要用到一些东西

14:30.180 --> 14:31.180
要用到这些东西

14:31.180 --> 14:32.180
我们复制一下

14:34.180 --> 14:35.180
复制一下

14:35.180 --> 14:36.180
用到这些东西

14:36.180 --> 14:37.180
还有这个东西

14:37.180 --> 14:38.180
这个东西我们要生成

14:38.180 --> 14:39.180
这个东西

14:39.180 --> 14:40.180
我们要使用

14:41.180 --> 14:42.180
给它传过来

14:42.180 --> 14:43.180
给它传过来

14:43.180 --> 14:44.180
component

14:44.180 --> 14:45.180
atmos

14:45.180 --> 14:46.180
给它传过来

14:46.180 --> 14:47.180
那么这样子

14:47.180 --> 14:48.180
我们来帮它生成

14:48.180 --> 14:50.180
一个atmos文档

14:50.180 --> 14:52.180
那么这个有了之后

14:52.180 --> 14:53.180
我们在render的时候

14:53.180 --> 14:54.180
我们就可以使用这个

14:54.180 --> 14:56.180
我们这一部分就不要了

14:56.180 --> 14:57.180
这个atmos就可以来自于这

14:58.180 --> 14:59.180
我就稍微把它

14:59.180 --> 15:00.180
改造一下

15:00.180 --> 15:01.180
getatmos

15:02.180 --> 15:03.180
掉线杠

15:03.180 --> 15:04.180
getatmos

15:08.710 --> 15:09.710
getatmos

15:09.710 --> 15:10.710
把这个component

15:11.710 --> 15:12.710
传进去

15:12.710 --> 15:14.710
这样子就把它简化一下

15:14.710 --> 15:15.710
好了

15:15.710 --> 15:16.710
那么现在我们给app

15:16.710 --> 15:17.710
组件传递的

15:17.710 --> 15:18.710
就是每一次请求的时候

15:18.710 --> 15:19.710
对吧

15:19.710 --> 15:21.710
我再把请求路径传给它

15:21.710 --> 15:22.710
这个东西我们先放着吧

15:22.710 --> 15:24.710
然后这个玩意

15:24.710 --> 15:25.710
它是不是收到结果了

15:25.710 --> 15:26.710
收到结果过了

15:26.710 --> 15:27.710
它就会把这个路径放这

15:27.710 --> 15:28.710
那么就说在服务形态

15:28.710 --> 15:30.710
根据你不同的请求地址

15:30.710 --> 15:32.710
我来选择不同的组件

15:32.710 --> 15:34.710
客户端根据浏览器的地址

15:34.710 --> 15:35.710
来选择组件

15:35.710 --> 15:36.710
那么是不是双方一致的

15:36.710 --> 15:37.710
咱们来看一下

15:37.710 --> 15:38.710
刷新

15:38.710 --> 15:39.710
看一下首页

15:40.710 --> 15:41.710
元代

15:41.710 --> 15:42.710
是不是首页

15:42.710 --> 15:43.710
对吧

15:43.710 --> 15:45.710
然后我们看一下Movies

15:46.710 --> 15:47.710
Movies

15:47.710 --> 15:48.710
然后点击右键

15:48.710 --> 15:49.710
看看元代

15:49.710 --> 15:50.710
那么这里也是Movies

15:50.710 --> 15:51.710
服务端跟客户端是不是一致的

15:51.710 --> 15:52.710
对吧

15:52.710 --> 15:53.710
就完全一致了

15:53.710 --> 15:54.710
这是这一块

15:54.710 --> 15:56.710
最基本的服务端处理的

15:56.710 --> 15:57.710
都有了这种方式

15:57.710 --> 15:58.710
好

15:58.710 --> 15:59.710
这下下面接下来

15:59.710 --> 16:00.710
我们稍微把它完善一下

16:00.710 --> 16:01.710
给它加一个导航栏

16:01.710 --> 16:03.710
加一些超链接

16:03.710 --> 16:04.710
那么超链接其实都是一样的

16:04.710 --> 16:05.710
因为这个组件

16:05.710 --> 16:07.710
就是整成一个A元素

16:07.710 --> 16:08.710
那么服务端

16:08.710 --> 16:09.710
它就会把它

16:09.710 --> 16:11.710
服务端经过这个东西

16:11.710 --> 16:12.710
服务端经过这个东西

16:12.710 --> 16:13.710
是不是把它

16:13.710 --> 16:14.710
把这个A元素渲染出来

16:14.710 --> 16:15.710
渲染成最终

16:15.710 --> 16:16.710
包含这个置物串里边

16:16.710 --> 16:17.710
然后想一个客户端

16:17.710 --> 16:18.710
那么客户端那边

16:18.710 --> 16:20.710
就可以直接使用了

16:20.710 --> 16:21.710
所以说这个

16:21.710 --> 16:22.710
其他都是一样的

16:22.710 --> 16:23.710
我们这里来写一下吧

16:23.710 --> 16:24.710
写一个公共的

16:24.710 --> 16:26.710
公共的组件库

16:26.710 --> 16:28.710
这一边我们写上一个Header

16:28.710 --> 16:31.790
Header

16:31.790 --> 16:33.790
这里来加一个Index

16:33.790 --> 16:34.790
叫JS

16:34.790 --> 16:35.790
JSX

16:40.170 --> 16:42.170
这里我们写上一个

16:42.170 --> 16:43.170
导航栏

16:43.170 --> 16:44.170
导航栏的话

16:44.170 --> 16:45.170
我们还是给它一个样式

16:45.170 --> 16:46.170
给它一个样式

16:46.170 --> 16:48.170
Index CSS

16:48.170 --> 16:50.170
Header

16:50.170 --> 16:51.170
Background

16:51.170 --> 16:53.170
给它写一个深色

16:53.170 --> 16:54.170
然后Color

16:54.170 --> 16:55.170
白色

16:55.170 --> 16:57.170
然后Plation

16:57.170 --> 16:59.170
Fixed

16:59.170 --> 17:00.170
高度

17:00.170 --> 17:01.170
高度40个相处

17:01.170 --> 17:02.170
Line Height

17:02.170 --> 17:03.170
40个相处

17:03.170 --> 17:04.170
OK

17:05.170 --> 17:06.170
然后Display

17:06.170 --> 17:07.170
Flex

17:08.170 --> 17:09.170
弹性盒

17:09.170 --> 17:10.170
然后想想

17:11.170 --> 17:12.170
宽度

17:12.170 --> 17:13.170
百分之百

17:14.170 --> 17:15.170
OK

17:15.170 --> 17:16.170
没问题吧

17:18.170 --> 17:19.170
好

17:19.170 --> 17:21.170
这里就写上这么一个Header

17:21.170 --> 17:23.170
所以我刚才也不用决定位了

17:23.170 --> 17:24.170
不用决定位了吧

17:24.170 --> 17:25.170
也不用决定位

17:25.170 --> 17:26.170
主要是担心的

17:26.170 --> 17:28.170
我们之前写过了一个

17:28.170 --> 17:29.170
写过了一个Body

17:29.170 --> 17:30.170
一个Pending

17:30.170 --> 17:31.170
一个Pending

17:31.170 --> 17:32.170
我们把Pending去掉

17:32.170 --> 17:33.170
Martin社为0

17:33.170 --> 17:34.170
Martin社为0

17:34.170 --> 17:35.170
OK

17:35.170 --> 17:37.170
那么这里我们在Header里边

17:37.170 --> 17:39.170
Header里边我们写一下

17:40.170 --> 17:41.170
导入这个CSS

17:42.170 --> 17:43.170
Styles

17:44.170 --> 17:45.170
因为这些东西都是我们以前

17:45.170 --> 17:47.170
就已经处理好的CSS

17:47.170 --> 17:48.170
Class Name

17:49.170 --> 17:50.170
等于什么呢

17:50.170 --> 17:51.170
Styles Header

17:51.170 --> 17:53.170
这里边有一些A元数

17:53.170 --> 17:54.170
A元数的话

17:54.170 --> 17:55.170
我们肯定要用Link

17:55.170 --> 17:56.170
对吧

17:57.170 --> 17:59.170
from a redstone

17:59.170 --> 18:01.170
这里我们肯定要用Link

18:03.170 --> 18:04.170
好

18:04.170 --> 18:05.170
那么这里我们Header里边

18:05.170 --> 18:08.170
写上两个Link

18:08.170 --> 18:11.540
一个Link是首页

18:12.540 --> 18:13.540
to

18:14.540 --> 18:15.540
到了

18:16.540 --> 18:17.540
到这个

18:17.540 --> 18:18.540
好

18:18.540 --> 18:20.860
另外一个

18:20.860 --> 18:21.860
另外一个是

18:21.860 --> 18:22.860
电影列表

18:23.860 --> 18:24.860
到这个Movies

18:25.860 --> 18:26.860
OK

18:26.860 --> 18:27.860
我们来看一下吧

18:27.860 --> 18:28.860
然后再调整

18:28.860 --> 18:29.860
刷新

18:29.860 --> 18:30.860
还没用

18:30.860 --> 18:31.860
还没用这个Header

18:31.860 --> 18:32.860
还没用的话

18:32.860 --> 18:33.860
我们在这里

18:33.860 --> 18:35.860
在App里边去使用

18:35.860 --> 18:37.860
在App里边去使用这个Header

18:37.860 --> 18:39.860
或者我们在这里去也行

18:39.860 --> 18:40.860
在这里也行

18:40.860 --> 18:42.860
我们在Root里边

18:42.860 --> 18:44.860
RootApp里边也行

18:44.860 --> 18:46.860
在这里我们写上一个Header

18:46.860 --> 18:47.860
因为是功用的

18:47.860 --> 18:48.860
Header

18:48.860 --> 18:49.860
我们导入

18:50.860 --> 18:51.860
import

18:51.860 --> 18:52.860
Header

18:52.860 --> 18:53.860
from

18:55.860 --> 18:57.860
来自于Component

18:58.860 --> 18:59.860
Header

19:05.090 --> 19:06.090
把写照

19:06.090 --> 19:08.090
外面再套一个DIV

19:08.090 --> 19:09.090
写照

19:09.090 --> 19:11.980
这个写照

19:12.980 --> 19:13.980
OK

19:13.980 --> 19:14.980
好

19:14.980 --> 19:15.980
那么这样子

19:15.980 --> 19:16.980
每个页面都有Header

19:16.980 --> 19:17.980
对吧

19:17.980 --> 19:18.980
每个页面都有Header

19:18.980 --> 19:19.980
刷新

19:19.980 --> 19:20.980
包错了

19:20.980 --> 19:21.980
应该

19:21.980 --> 19:22.980
他们呢

19:22.980 --> 19:23.980
找不到

19:23.980 --> 19:24.980
那么我们这里

19:24.980 --> 19:25.980
没错了

19:25.980 --> 19:26.980
这里

19:26.980 --> 19:27.980
保存

19:27.980 --> 19:28.980
过来

19:28.980 --> 19:29.980
刷新

19:29.980 --> 19:30.980
是不是出来了

19:30.980 --> 19:31.980
Header出来了

19:31.980 --> 19:32.980
然后这里边

19:32.980 --> 19:33.980
这里边的东西

19:33.980 --> 19:34.980
我们再套一个DIV

19:34.980 --> 19:36.980
再套一个DIV

19:36.980 --> 19:38.980
稍微处理一下

19:38.980 --> 19:39.980
这个东西写到哪儿

19:39.980 --> 19:40.980
其实不是固定的

19:40.980 --> 19:41.980
你可以写到App里边

19:41.980 --> 19:42.980
也可以写到这儿

19:42.980 --> 19:44.980
我们这里写上一个

19:45.980 --> 19:46.980
写上一个

19:46.980 --> 19:47.980
Pending

19:47.980 --> 19:49.980
50个相处

19:50.980 --> 19:51.980
刷新

19:52.980 --> 19:53.980
什么

19:55.980 --> 19:56.980
让我们写成一个对象

19:56.980 --> 19:57.980
OK

19:57.980 --> 20:01.350
Pending 50

20:01.350 --> 20:05.140
好

20:05.140 --> 20:06.140
那么这里边

20:06.140 --> 20:07.140
部分搞定了

20:07.140 --> 20:08.140
那么上面的Header

20:08.140 --> 20:09.140
Header呢

20:09.140 --> 20:10.140
我们稍微的

20:10.140 --> 20:11.140
控制一下样式

20:11.140 --> 20:12.140
Header里边

20:12.140 --> 20:14.140
下面的A元素

20:14.140 --> 20:15.140
然后Color

20:15.140 --> 20:16.140
Biter

20:16.140 --> 20:17.140
Inherit

20:17.140 --> 20:18.140
继承复元素

20:18.140 --> 20:20.140
然后Tex Decoration

20:20.140 --> 20:21.140
No

20:21.140 --> 20:23.770
OK

20:23.770 --> 20:24.770
然后再写上一个

20:24.770 --> 20:25.770
Martin

20:25.770 --> 20:26.770
Martin Left

20:27.770 --> 20:29.770
50个相处

20:29.770 --> 20:32.210
OK

20:32.210 --> 20:33.210
那么现在点击

20:33.210 --> 20:34.210
你看是不是切换了

20:34.210 --> 20:35.210
好大家注意

20:35.210 --> 20:36.210
现在的切换

20:36.210 --> 20:38.210
我要好好旅一下

20:38.210 --> 20:41.210
现在的切换跟服务系有没有关系

20:41.210 --> 20:42.210
是没有关系

20:42.210 --> 20:43.210
比我们切换到首页

20:43.210 --> 20:44.210
切换到首页你看

20:44.210 --> 20:45.210
是不是

20:45.210 --> 20:46.210
这是首页地址

20:46.210 --> 20:47.210
切换到电影页

20:47.210 --> 20:48.210
我们来看一下

20:48.210 --> 20:50.210
是不是还是首页的结果

20:50.210 --> 20:51.210
也是说这是问题

20:51.210 --> 20:52.210
要解决

20:52.210 --> 20:53.210
不是问题

20:53.210 --> 20:54.210
这不是问题

20:54.210 --> 20:55.210
为什么呢

20:55.210 --> 20:56.210
因为你现在目前的切换

20:56.210 --> 20:57.210
是已经被客户端接管了

20:57.210 --> 20:59.210
你是在切换组建

20:59.210 --> 21:00.210
你看有没有刷新浏览器

21:00.210 --> 21:01.210
是没有刷新浏览器的

21:01.210 --> 21:02.210
对吧

21:02.210 --> 21:03.210
没有刷新浏览器的

21:03.210 --> 21:04.210
现在不是问题

21:04.210 --> 21:05.210
大家记住

21:05.210 --> 21:06.210
现在不是问题

21:06.210 --> 21:07.210
为什么不是问题呢

21:07.210 --> 21:08.210
因为我们服务端现在

21:08.210 --> 21:09.210
只要搞定SEO和白屏

21:09.210 --> 21:10.210
现在已经给力了

21:10.210 --> 21:11.210
对吧

21:11.210 --> 21:12.210
一边有已经给力的

21:12.210 --> 21:13.210
不会白屏的

21:13.210 --> 21:14.210
已经不会白屏的

21:14.210 --> 21:15.210
你不需要管了

21:15.210 --> 21:16.210
那么SEO

21:16.210 --> 21:17.210
SEO

21:17.210 --> 21:18.210
如果说你直接去请求这个地址

21:18.210 --> 21:20.210
就是刷新这个地址的话

21:20.210 --> 21:22.210
那么服务器会给力电影页

21:22.210 --> 21:23.210
电影列表

21:23.210 --> 21:24.210
服务器会给力电影列表

21:24.210 --> 21:25.210
但是你给了

21:25.210 --> 21:26.210
一边给了你过后了

21:26.210 --> 21:29.210
后续的操作就是客户端接管了

21:29.210 --> 21:30.210
客户端在这里说

21:30.210 --> 21:31.210
在这里接管了

21:31.210 --> 21:32.210
就是不刷新的

21:32.210 --> 21:34.210
如果说你这个强制又去刷新

21:34.210 --> 21:35.210
那么服务端

21:35.210 --> 21:37.210
又会给力渲染的到首页

21:37.210 --> 21:39.210
渲染到这个首页的结果

21:39.210 --> 21:40.210
就是首页的结果

21:40.210 --> 21:41.210
对吧

21:41.210 --> 21:42.210
现在不是问题

21:42.210 --> 21:43.210
就是服务器

21:43.210 --> 21:45.210
我们用SSR

21:45.210 --> 21:47.210
这是请求服务器的时候

21:47.210 --> 21:48.210
服务器应该给力一个

21:48.210 --> 21:49.210
正确的渲染结果

21:49.210 --> 21:50.210
那么现在服务器

21:50.210 --> 21:51.210
已经能办到了

21:51.210 --> 21:52.210
服务器给力的结果

21:52.210 --> 21:54.210
后续的过程就交给扭烂器了

21:54.210 --> 21:55.210
因为我们做单应用程序

21:55.210 --> 21:57.210
就是要提高用户体验

21:57.210 --> 21:58.210
不希望刷新

21:58.210 --> 21:59.210
尽量不刷新

21:59.210 --> 22:00.210
把它变成一个

22:00.210 --> 22:01.210
本地应用一样

22:01.210 --> 22:03.210
这样子活得更好的用户体验

22:03.210 --> 22:04.210
就是不希望它刷新

22:04.210 --> 22:05.210
后边的东西

22:05.210 --> 22:06.210
就客户端接管了

22:06.210 --> 22:07.210
因为客户端那边也用路由

22:07.210 --> 22:08.210
它点击过后

22:08.210 --> 22:10.210
它会切换这个逐渐

22:10.210 --> 22:11.210
OK

22:11.210 --> 22:12.210
那么现在就是

22:12.210 --> 22:13.210
是不是这里的搞进了

22:13.210 --> 22:14.210
对吧

22:14.210 --> 22:15.210
OK

22:15.210 --> 22:16.210
那么这一块

22:16.210 --> 22:21.210
是关于路由的做法

