WEBVTT

00:00.940 --> 00:05.940
好 这节课应该是咱们这个章节的最后一章了

00:06.940 --> 00:11.940
这个新版本的那个社稷也确实有面临了很多的细节章的挑战

00:12.940 --> 00:17.940
不过它也 首先有一说一 它肯定是比旧版本要好得多

00:17.940 --> 00:21.940
毕竟它那个就是智能优化器做得非常非常好

00:22.940 --> 00:26.940
怎么说呢 新的东西出来我们肯定是要拥抱它

00:26.940 --> 00:30.940
尽管它有一些问题咱们所谓的开发者帮助它一起完善吧

00:30.940 --> 00:35.940
而且我相信它以后还会去修复这些问题 肯定是一个大趋势

00:35.940 --> 00:40.940
之后无密接驶估计也会跟上 像那个静态的话确实是一个好东西

00:40.940 --> 00:43.940
我相信我个人 当然都是我个人的愿望

00:43.940 --> 00:46.940
希望无密接驶也能跟上吧

00:47.940 --> 00:51.940
另外我们再看一下这个 接下来我们把一个登录就做完

00:51.940 --> 00:54.940
接下来 设备已经搞定了 已经完成搞定了

00:54.940 --> 00:59.940
接下来我们就是写Stone 写这个就是接口

00:59.940 --> 01:01.940
这个Stone这个就是仓库

01:01.940 --> 01:04.940
我们首先建Action 给大家一个Login

01:05.940 --> 01:07.940
Login.js

01:07.940 --> 01:09.940
好 来吧 我们就按照这个写一遍

01:10.940 --> 01:16.940
一个来 首先是有哪些Action 首先是setLogin user

01:17.940 --> 01:19.940
设置登录的用户

01:20.940 --> 01:22.940
setLogin user 这是一个

01:23.940 --> 01:26.940
然后还有什么Action 还有一些副作用的Action

01:26.940 --> 01:29.940
比方说像那個Who am I?Login

01:29.940 --> 01:31.940
首先Login吧

01:32.940 --> 01:35.940
还有一个就是Who am I?

01:36.940 --> 01:38.940
Who am I?

01:39.940 --> 01:41.940
还有一个就是Login out

01:41.940 --> 01:45.940
有三个这个就是有这么几个副作用处理

01:47.940 --> 01:48.940
换一下

01:49.940 --> 01:51.940
这是Login out

01:51.940 --> 01:53.940
行了 那咱们一个个写Action

01:53.940 --> 01:56.940
一个Action是setLogin user

01:56.940 --> 01:58.940
那么这个地方我们很简单

01:58.940 --> 02:00.940
就是你给我一个什么呢

02:00.940 --> 02:02.940
你给我一个就是用户

02:02.940 --> 02:04.940
就已经登录的用户

02:04.940 --> 02:06.940
OK 那我这里就给它设置进去完成了

02:06.940 --> 02:07.940
非常简单

02:07.940 --> 02:09.940
好 来吧 来吧

02:09.940 --> 02:11.940
一个是 user

02:11.940 --> 02:13.940
就是那个什么

02:14.940 --> 02:15.940
User

02:15.940 --> 02:17.940
User 那么我这里呢就返回

02:17.940 --> 02:18.940
Type

02:18.940 --> 02:19.940
为什么呢

02:19.940 --> 02:20.940
Action types

02:20.940 --> 02:22.940
setLogin user

02:22.940 --> 02:23.940
Payload的呢

02:23.940 --> 02:25.940
就是User

02:25.940 --> 02:27.940
你把用户给我 那么我就设置进去

02:27.940 --> 02:29.940
一个是Login

02:29.940 --> 02:30.940
一个是Login

02:30.940 --> 02:31.940
那么这个是个副作用

02:31.940 --> 02:33.940
副作用肯定是要返回一个异步函数

02:34.940 --> 02:35.940
返回一个异步函数

02:36.940 --> 02:37.940
这个异步函数呢它是这样

02:37.940 --> 02:40.940
登录的时候呢你要告诉

02:40.940 --> 02:42.940
你要告诉我什么呢

02:42.940 --> 02:44.940
要告诉我帐号密码

02:44.940 --> 02:46.940
是吧 你是不是要告诉我帐号密码

02:46.940 --> 02:47.940
OK 那么这个地方呢

02:47.940 --> 02:49.940
你要告诉我Login ID

02:49.940 --> 02:50.940
Login password

02:50.940 --> 02:51.940
你要告诉我这两个东西

02:51.940 --> 02:52.940
帐号密码

02:52.940 --> 02:54.940
帐号密码告诉我了之后呢

02:54.940 --> 02:55.940
我使用那个

02:55.940 --> 02:57.940
我们之前写的那个就是

02:57.940 --> 03:00.580
Service

03:00.580 --> 03:01.580
Service is

03:01.580 --> 03:02.580
Login service

03:02.580 --> 03:03.580
那么这里边

03:03.580 --> 03:04.580
我们有个Login

03:04.580 --> 03:05.580
把这导进来吧

03:05.580 --> 03:06.580
互爱吗

03:06.580 --> 03:07.580
已经到Login out

03:07.580 --> 03:08.580
都导进来

03:09.580 --> 03:10.580
OK

03:10.580 --> 03:11.580
那么这里呢

03:11.580 --> 03:12.580
我们登录的时候呢

03:12.580 --> 03:13.580
肯定是

03:13.580 --> 03:14.580
刚才用这个

03:14.580 --> 03:15.580
用个Login

03:15.580 --> 03:16.580
这样子

03:16.580 --> 03:18.580
Login service

03:18.580 --> 03:20.580
Service

03:20.580 --> 03:21.580
OK

03:21.580 --> 03:22.580
那么这里

03:22.580 --> 03:24.580
我们是用Login service

03:24.580 --> 03:25.580
点Login

03:25.580 --> 03:26.580
登录

03:26.580 --> 03:28.580
登录呢你把帐号传进去

03:28.580 --> 03:29.580
Login ID

03:29.580 --> 03:30.580
密码传进去

03:30.580 --> 03:31.580
Login password

03:31.580 --> 03:32.580
这些都传进去

03:32.580 --> 03:34.580
传进去了之后呢

03:34.580 --> 03:35.580
它是不是会返回

03:35.580 --> 03:36.580
一个结果

03:36.580 --> 03:38.580
对吧 会返回一个结果

03:39.580 --> 03:40.580
返回一个结果

03:40.580 --> 03:41.580
那么这个结果呢

03:41.580 --> 03:42.580
它首先要判断一下

03:42.580 --> 03:43.580
有没有登录成功

03:43.580 --> 03:45.580
有没有登录成功

03:45.580 --> 03:46.580
如果说

03:46.580 --> 03:47.580
如果说

03:47.580 --> 03:49.580
登录成功了

03:49.580 --> 03:51.580
data有值

03:51.580 --> 03:52.580
表示登录成功了

03:52.580 --> 03:53.580
对吧

03:53.580 --> 03:56.340
登录成功

03:56.340 --> 03:57.340
登录成功之后呢

03:57.340 --> 03:58.340
我们干嘛呢

03:58.340 --> 03:59.340
我们是不是把这个数据

03:59.340 --> 04:01.340
又设置到Login user里面

04:01.340 --> 04:02.340
对吧 是不是设置进去

04:02.340 --> 04:03.340
这个dispatch

04:03.340 --> 04:04.340
parch

04:04.340 --> 04:05.340
那么我们这里触发

04:05.340 --> 04:06.340
dispatch

04:08.340 --> 04:10.340
一个新Types

04:10.340 --> 04:11.340
这里直接用

04:11.340 --> 04:12.340
setsLogin user

04:12.340 --> 04:13.340
setsLogin user

04:14.340 --> 04:16.340
那么它要把拥护传进去

04:16.340 --> 04:17.340
拥护传进去

04:17.340 --> 04:18.340
对吧 就设置完了

04:18.340 --> 04:19.340
然后我们这里

04:19.340 --> 04:20.340
干脆返回一个处

04:20.340 --> 04:21.340
表示登录成功

04:21.340 --> 04:22.340
ls

04:22.340 --> 04:23.340
ls登录失败

04:23.340 --> 04:24.340
登录失败的话

04:24.340 --> 04:25.340
我们这里呢

04:25.340 --> 04:26.340
就反

04:26.340 --> 04:28.340
就是dispatch

04:28.340 --> 04:29.340
登录失败

04:29.340 --> 04:32.340
我们就dispatch

04:33.340 --> 04:34.340
就表示我们把

04:34.340 --> 04:35.340
用户设置为

04:35.340 --> 04:36.340
登录失败

04:36.340 --> 04:37.340
登录失败的话

04:37.340 --> 04:39.340
我们返回一个force

04:40.340 --> 04:41.340
那么这个副作用处理

04:41.340 --> 04:42.340
是不是写完了

04:42.340 --> 04:43.340
用上课来处理

04:44.340 --> 04:45.340
登录失败了

04:45.340 --> 04:46.340
互安麦

04:46.340 --> 04:47.340
又来

04:47.340 --> 04:48.340
自己复制一下吧

04:48.340 --> 04:53.980
把这个下面去掉

04:53.980 --> 04:55.980
这是互安麦

04:56.980 --> 04:57.980
互安麦就是

04:57.980 --> 04:58.980
你要给我传一个什么呢

04:58.980 --> 04:59.980
互安麦这里要注意

04:59.980 --> 05:00.980
你要不仅

05:00.980 --> 05:01.980
你不是说没有参数

05:01.980 --> 05:03.980
你还是要给我传一个东西的

05:03.980 --> 05:04.980
传一个什么呢

05:04.980 --> 05:05.980
传一个request对象

05:06.980 --> 05:07.980
为什么呢

05:07.980 --> 05:08.980
因为我们知道互安麦

05:08.980 --> 05:09.980
它有可能在服务端

05:09.980 --> 05:10.980
因为登录了

05:10.980 --> 05:11.980
肯定是在客户端

05:11.980 --> 05:12.980
点击按钮过后完成了

05:12.980 --> 05:13.980
对吧

05:13.980 --> 05:14.980
那互安麦

05:14.980 --> 05:15.980
它是要在服务端去运行的

05:15.980 --> 05:16.980
所以说你要给我传一个

05:16.980 --> 05:17.980
就是

05:17.980 --> 05:18.980
一个小时

05:18.980 --> 05:19.980
一个小时的实力

05:19.980 --> 05:20.980
你要给我传一个

05:20.980 --> 05:21.980
一个小时的实力

05:21.980 --> 05:23.980
要把这个东西给我传进来

05:23.980 --> 05:24.980
那么这里

05:25.980 --> 05:26.980
接下来

05:26.980 --> 05:27.980
那么来处理副作用

05:27.980 --> 05:28.980
这里我们就调用

05:28.980 --> 05:29.980
互安麦

05:30.980 --> 05:31.980
互安麦

05:31.980 --> 05:32.980
那么就把这个

05:32.980 --> 05:33.980
一个小时传进来

05:34.980 --> 05:35.980
传进来

05:35.980 --> 05:36.980
一个小时

05:36.980 --> 05:37.980
传进来过后

05:37.980 --> 05:38.980
然后得到一个结果

05:38.980 --> 05:39.980
这个要结果

05:41.980 --> 05:42.980
如果说它有值

05:42.980 --> 05:43.980
有值的话说明什么

05:43.980 --> 05:44.980
说明就是

05:44.980 --> 05:45.980
有权限

05:45.980 --> 05:46.980
对吧

05:46.980 --> 05:48.980
就是有权限

05:48.980 --> 05:49.980
有权限的话

05:49.980 --> 05:50.980
我们还是要设置

05:50.980 --> 05:51.980
locking u字

05:51.980 --> 05:52.980
把设置进去

05:52.980 --> 05:53.980
因为之前有可能登录过了

05:53.980 --> 05:54.980
所以说

05:54.980 --> 05:55.980
我们只需要用那个

05:55.980 --> 05:56.980
就是token

05:56.980 --> 05:57.980
去换取我们的用户就行了

05:57.980 --> 05:58.980
换取了用户之后

05:58.980 --> 05:59.980
把用户设置进去

05:59.980 --> 06:00.980
返回一个处

06:00.980 --> 06:01.980
如果说

06:01.980 --> 06:02.980
没有权限

06:02.980 --> 06:03.980
就是之前没有登录过

06:03.980 --> 06:04.980
没有登录过的话

06:04.980 --> 06:05.980
我们设置为now

06:05.980 --> 06:06.980
返回为force

06:06.980 --> 06:07.980
这是互安麦

06:07.980 --> 06:08.980
这个很简单

06:08.980 --> 06:09.980
接下来

06:09.980 --> 06:10.980
我们再来一个

06:10.980 --> 06:11.980
再来就是locking out

06:11.980 --> 06:12.980
locking out

06:13.980 --> 06:14.980
locking out

06:15.980 --> 06:16.980
登出

06:16.980 --> 06:17.980
登出的话就不需要

06:17.980 --> 06:18.980
给我任何东西了

06:18.980 --> 06:19.980
登出的话

06:19.980 --> 06:20.980
我们就是

06:20.980 --> 06:21.980
首先

06:21.980 --> 06:22.980
我们这里

06:22.980 --> 06:23.980
设置

06:23.980 --> 06:24.980
设置登录用户

06:25.980 --> 06:26.980
设置登录用户为now

06:27.980 --> 06:28.980
然后去调用

06:28.980 --> 06:29.980
调用什么呢

06:29.980 --> 06:30.980
调用那个就是

06:31.980 --> 06:32.980
locking service

06:33.980 --> 06:34.980
locking out

06:35.980 --> 06:36.980
OK

06:36.980 --> 06:37.980
好

06:37.980 --> 06:38.980
那么就完了

06:38.980 --> 06:39.980
它甚至都可以

06:39.980 --> 06:40.980
不用是一个异步函数

06:40.980 --> 06:41.980
甚至都可以

06:41.980 --> 06:42.980
不用是一个异步函数

06:42.980 --> 06:43.980
OK

06:43.980 --> 06:44.980
那么现在我们就把

06:44.980 --> 06:45.980
x型写完了

06:45.980 --> 06:46.980
然后接下来

06:46.980 --> 06:47.980
我们来写reducer

06:48.980 --> 06:49.980
我们这里还是复制一个

06:50.980 --> 06:51.980
复制一个

06:51.980 --> 06:52.980
这里是locking

06:53.980 --> 06:54.980
来吧

06:54.980 --> 06:55.980
x型types

06:55.980 --> 06:56.980
from那个什么呢

06:56.980 --> 06:57.980
locking

06:58.980 --> 06:59.980
一个是

06:59.980 --> 07:00.980
它的状态

07:00.980 --> 07:01.980
它的默论状态

07:01.980 --> 07:02.980
就是一个用户

07:02.980 --> 07:03.980
一个用户

07:03.980 --> 07:04.980
登录用户

07:04.980 --> 07:05.980
登录用户为now

07:05.980 --> 07:06.980
表示登录用户为now

07:06.980 --> 07:07.980
当然你还可以

07:07.980 --> 07:08.980
加上一些什么

07:08.980 --> 07:09.980
一字nodein

07:09.980 --> 07:10.980
如果说

07:10.980 --> 07:11.980
登录中这些东西的话

07:11.980 --> 07:12.980
那么你还可以

07:12.980 --> 07:13.980
丰富一下

07:13.980 --> 07:14.980
还加一个x型

07:14.980 --> 07:15.980
设置一字nodein

07:15.980 --> 07:16.980
那么这里呢

07:16.980 --> 07:17.980
我就简单一点

07:17.980 --> 07:18.980
登录用户一开始为now

07:19.980 --> 07:20.980
然后你给我的

07:20.980 --> 07:21.980
就是x型

07:21.980 --> 07:22.980
我把类型分析出来

07:22.980 --> 07:23.980
看一下有哪些类型

07:23.980 --> 07:24.980
一个是那个什么

07:25.980 --> 07:26.980
sit

07:26.980 --> 07:27.980
只有一个是吧

07:27.980 --> 07:28.980
sitnodein用户

07:28.980 --> 07:29.980
只有一个

07:29.980 --> 07:30.980
设置登录用户

07:30.980 --> 07:31.980
只有一个

07:31.980 --> 07:32.980
只有一个的话

07:32.980 --> 07:33.980
我们怎么办呢

07:33.980 --> 07:34.980
我们就直接返回一个

07:34.980 --> 07:35.980
就是配load

07:35.980 --> 07:36.980
直接返回配load

07:36.980 --> 07:41.510
直接返回配load就完了

07:42.510 --> 07:44.510
这个东西我不想解释了

07:44.510 --> 07:46.510
这是Redux里边的东西

07:46.510 --> 07:47.510
然后呢

07:47.510 --> 07:48.510
我们在Redux里面

07:48.510 --> 07:49.510
打入它

07:49.510 --> 07:50.510
一个是

07:50.510 --> 07:51.510
这是什么呢

07:51.510 --> 07:52.510
nodein

07:52.510 --> 07:54.510
打入nodein user

07:54.510 --> 07:55.510
nodein user

07:55.510 --> 07:58.400
OK

07:59.400 --> 08:00.400
好 放进来

08:00.400 --> 08:01.400
那么我们Redux

08:01.400 --> 08:02.400
是不是多了一个了

08:02.400 --> 08:03.400
多了一个了

08:03.400 --> 08:04.400
好 那么Redux

08:04.400 --> 08:05.400
就写完了

08:05.400 --> 08:06.400
接下来

08:06.400 --> 08:07.400
我们到页面上

08:07.400 --> 08:08.400
比方说

08:08.400 --> 08:09.400
我们建立一个

08:09.400 --> 08:11.400
建立一个就是nodein

08:11.400 --> 08:12.400
nodein这个页面

08:12.400 --> 08:13.400
nodein一个页面

08:13.400 --> 08:14.400
先搞定吧

08:14.400 --> 08:15.400
这一去了

08:15.400 --> 08:16.400
nodein这个页面

08:16.400 --> 08:17.400
其实就是

08:17.400 --> 08:18.400
两个文门框

08:20.400 --> 08:21.400
一个是

08:21.400 --> 08:22.400
一个是

08:22.400 --> 08:23.400
账号

08:24.400 --> 08:25.400
一个input

08:25.400 --> 08:26.400
对吧

08:26.400 --> 08:27.400
一个文门框

08:27.400 --> 08:28.400
然后呢

08:28.400 --> 08:29.400
一个密码

08:29.400 --> 08:30.400
密码

08:30.400 --> 08:31.400
input

08:31.400 --> 08:32.400
是什么

08:32.400 --> 08:33.400
password

08:34.400 --> 08:35.400
什么

08:37.400 --> 08:38.400
这样写吧

08:38.400 --> 08:39.400
password

08:39.400 --> 08:40.400
我又忘了

08:40.400 --> 08:41.400
好

08:41.400 --> 08:42.400
浪费一个密码

08:42.400 --> 08:43.400
下面的一个按钮

08:43.400 --> 08:44.400
登录

08:44.400 --> 08:45.400
登录

08:45.400 --> 08:46.400
行了 就写了

08:46.400 --> 08:47.400
好 接下来

08:47.400 --> 08:48.400
我们来实现一个登录功能

08:48.400 --> 08:49.400
或者是

08:49.400 --> 08:51.400
我们再建立一个foam

08:51.400 --> 08:52.400
建立一个foam

08:52.400 --> 08:53.400
建立一个foam的

08:54.400 --> 08:55.400
就是nodein

08:55.400 --> 08:56.400
foam

08:57.400 --> 08:59.400
这里建立一个

08:59.400 --> 09:00.400
in这个是

09:00.400 --> 09:01.400
gss

09:01.400 --> 09:05.030
我们把这个拿过来

09:05.030 --> 09:06.030
好 来吧

09:07.030 --> 09:08.030
账号

09:08.030 --> 09:09.030
我看一下

09:09.030 --> 09:11.030
这个要返回上级目录

09:11.030 --> 09:12.030
再返回上级目录

09:12.030 --> 09:13.030
这些东西

09:13.030 --> 09:14.030
我们好像都不需要了

09:14.030 --> 09:15.030
是吧

09:15.030 --> 09:16.030
都不需要了

09:16.030 --> 09:17.030
这些东西也不需要了

09:17.030 --> 09:18.030
也不需要了

09:18.030 --> 09:19.030
账号

09:19.030 --> 09:20.030
账号的话

09:20.030 --> 09:22.030
我们这里呢

09:22.030 --> 09:23.030
看一下

09:23.030 --> 09:25.030
我们这里肯定有些事件

09:25.030 --> 09:27.030
un-sub-met

09:27.030 --> 09:28.030
un-sub-met

09:28.030 --> 09:30.030
就sub-met这个事件

09:30.030 --> 09:32.030
或者叫un-sub-met

09:33.030 --> 09:34.030
然后呢

09:34.030 --> 09:35.030
这里边

09:35.030 --> 09:37.030
我们要写上一个

09:37.030 --> 09:38.030
就是

09:38.030 --> 09:39.030
状态

09:39.030 --> 09:40.030
还要写成状态

09:43.030 --> 09:44.030
就是

09:44.030 --> 09:45.030
use-state

09:46.030 --> 09:47.030
来吧

09:47.030 --> 09:48.030
use-state

09:50.030 --> 09:51.030
use-state

09:51.030 --> 09:53.030
我反正整个这个过程

09:53.030 --> 09:54.030
都用的是

09:54.030 --> 09:55.030
hook

09:55.030 --> 09:56.030
含述式组件

09:56.030 --> 09:57.030
如果说你们喜欢的是

09:57.030 --> 09:58.030
内组件的话

09:58.030 --> 09:59.030
那么你们可以去用内组件

09:59.030 --> 10:00.030
都是一样的

10:00.030 --> 10:01.030
这边呢

10:01.030 --> 10:02.030
我们写上

10:02.030 --> 10:03.030
一开始呢

10:03.030 --> 10:04.030
就无非就是

10:05.030 --> 10:06.030
就是

10:06.030 --> 10:07.030
form-data吧

10:08.030 --> 10:09.030
一开始的初始字呢

10:09.030 --> 10:10.030
初始字是两个

10:10.030 --> 10:11.030
一个是

10:13.030 --> 10:14.030
一个是什么呢

10:14.030 --> 10:15.030
一个是那个

10:16.030 --> 10:17.030
账号

10:17.030 --> 10:18.030
locking id

10:18.030 --> 10:19.030
账号

10:20.030 --> 10:22.030
一个是locking password

10:22.030 --> 10:23.030
密码

10:23.030 --> 10:24.030
就这么两个

10:24.030 --> 10:25.030
locking id就绑明到这儿

10:25.030 --> 10:26.030
把它变成个收控组件

10:26.030 --> 10:27.030
对吧

10:27.030 --> 10:28.030
value

10:28.030 --> 10:29.030
等于什么呢

10:29.030 --> 10:31.030
就是form-data的

10:31.030 --> 10:32.030
locking id

10:33.030 --> 10:34.030
然后呢

10:34.030 --> 10:35.030
un-change

10:36.030 --> 10:37.030
当改变的时候呢

10:37.030 --> 10:38.030
我们是不是要重新设置

10:38.030 --> 10:39.030
对吧

10:39.030 --> 10:41.030
改变的时候要重新设置

10:41.030 --> 10:43.030
就是setform-data

10:43.030 --> 10:44.030
setform-data

10:44.030 --> 10:45.030
然后呢

10:45.030 --> 10:46.030
得到一个新的值

10:46.030 --> 10:47.030
得到一个新的值

10:47.030 --> 10:48.030
新的值是什么呢

10:48.030 --> 10:49.030
新的值呢

10:49.030 --> 10:50.030
我们就用个对相吧

10:50.030 --> 10:52.030
先把这个form-data展开

10:53.030 --> 10:54.030
form-data展开

10:54.030 --> 10:55.030
然后呢

10:55.030 --> 10:56.030
把locking id

10:56.030 --> 10:57.030
是不是改变

10:57.030 --> 10:58.030
locking id改变

10:58.030 --> 10:59.030
改变成什么呢

10:59.030 --> 11:00.030
改变成

11:00.030 --> 11:01.030
原来的

11:01.030 --> 11:02.030
就是

11:02.030 --> 11:03.030
改变成

11:03.030 --> 11:04.030
原来的

11:04.030 --> 11:05.030
改变成个就是

11:05.030 --> 11:06.030
4件参数

11:06.030 --> 11:08.030
1.talkit.value

11:08.030 --> 11:09.030
对吧

11:09.030 --> 11:10.030
这是我们之前学过的

11:10.030 --> 11:11.030
这是这一块

11:11.030 --> 11:12.030
那么下面那一样的

11:12.030 --> 11:13.030
密码这一块一样的

11:14.030 --> 11:15.030
form-data

11:15.030 --> 11:17.030
这个榜林是locking password的

11:17.030 --> 11:18.030
这边呢

11:18.030 --> 11:20.030
把locking password改一下

11:20.030 --> 11:21.030
OK

11:21.030 --> 11:22.030
那么现在账号密码

11:22.030 --> 11:24.030
好点击登录的时候呢

11:24.030 --> 11:25.030
我们是干嘛呢

11:25.030 --> 11:26.030
就是

11:27.030 --> 11:29.030
点击登录的时候

11:29.030 --> 11:31.030
我们要运行什么呢

11:31.030 --> 11:32.030
运行这个事件

11:32.030 --> 11:33.030
这个事件

11:33.030 --> 11:35.030
我们把我们的数据给他

11:35.030 --> 11:36.030
把我们的数据给他

11:37.030 --> 11:38.030
看一下有没有值

11:38.030 --> 11:39.030
如果有值的话

11:39.030 --> 11:40.030
我们把这个form-data

11:41.030 --> 11:42.030
form-data给他

11:42.030 --> 11:43.030
让他去处理

11:43.030 --> 11:44.030
对吧

11:44.030 --> 11:45.030
OK

11:45.030 --> 11:46.030
那么现在呢

11:46.030 --> 11:47.030
我们就把登录的

11:47.030 --> 11:48.030
就是这个

11:49.030 --> 11:50.030
组件写好了

11:50.030 --> 11:51.030
写好了之后呢

11:51.030 --> 11:52.030
我们到locking里边来

11:52.030 --> 11:53.030
到locking里边来

11:53.030 --> 11:54.030
我们这边呢

11:54.030 --> 11:55.030
就很简单了

11:57.030 --> 11:58.030
导入

11:58.030 --> 11:59.030
导入什么呢

11:59.030 --> 12:00.030
locking phone

12:01.030 --> 12:02.030
双

12:02.030 --> 12:03.030
点写纲

12:03.030 --> 12:04.030
component

12:04.030 --> 12:05.030
locking phone

12:06.030 --> 12:07.030
这边呢

12:07.030 --> 12:09.030
我们就直接使用这个组件

12:09.030 --> 12:10.030
locking phone

12:10.030 --> 12:11.030
这个组件

12:11.030 --> 12:12.030
不是只有一个事件

12:12.030 --> 12:13.030
对吧

12:15.030 --> 12:17.030
当我们登录的时候呢

12:17.030 --> 12:18.030
他会给我们一个

12:18.030 --> 12:19.030
就是登录的数据

12:19.030 --> 12:20.030
登录的数据

12:20.030 --> 12:21.030
会给我们

12:21.030 --> 12:22.030
form-data

12:22.030 --> 12:23.030
会给我们

12:23.030 --> 12:24.030
给我们之后呢

12:24.030 --> 12:25.030
我们拿他干嘛呢

12:25.030 --> 12:26.030
拿他不就要登录吗

12:26.030 --> 12:27.030
对不对

12:27.030 --> 12:28.030
那么这个时候呢

12:28.030 --> 12:29.030
是不是要用仓库了

12:29.030 --> 12:30.030
对不对

12:30.030 --> 12:31.030
是不是要用仓库

12:31.030 --> 12:32.030
要用仓库来处理

12:32.030 --> 12:34.030
那么要用仓库来处理的话

12:34.030 --> 12:35.030
无非就是给他

12:35.030 --> 12:36.030
一个事件

12:36.030 --> 12:37.030
当我们登录的时候

12:37.030 --> 12:38.030
我们到底要干嘛

12:38.030 --> 12:40.030
是不是该加这么一个事件

12:40.030 --> 12:41.030
因此呢

12:41.030 --> 12:42.030
这一块呢

12:42.030 --> 12:43.030
我们完全可以这样做

12:43.030 --> 12:44.030
我们的组件呢

12:44.030 --> 12:45.030
是

12:45.030 --> 12:46.030
locking phone

12:46.030 --> 12:47.030
这个组件对吧

12:47.030 --> 12:48.030
我给他connect

12:48.030 --> 12:49.030
就这里呢

12:49.030 --> 12:50.030
我都没有自己的组件

12:50.030 --> 12:51.030
我就给他connect

12:51.030 --> 12:53.410
说导入

12:53.410 --> 12:54.410
不要把以前的

12:54.410 --> 12:55.410
那个东西

12:55.410 --> 12:56.410
react

12:56.410 --> 12:57.410
react

12:57.410 --> 12:59.410
react

12:59.410 --> 13:00.410
react

13:00.410 --> 13:01.410
react

13:02.410 --> 13:03.410
来吧

13:03.410 --> 13:04.410
两个函数

13:04.410 --> 13:05.410
一个smap

13:05.410 --> 13:08.410
probs

13:08.410 --> 13:09.410
mapsdata

13:09.410 --> 13:10.410
就简单一点

13:10.410 --> 13:12.410
一个state

13:12.410 --> 13:13.410
他没有

13:13.410 --> 13:14.410
没有mapsdata

13:14.410 --> 13:15.410
只用一个mapsdata

13:15.410 --> 13:16.410
只有一个事件

13:16.410 --> 13:17.410
data

13:17.410 --> 13:21.100
这些错了

13:21.100 --> 13:22.100
好

13:22.100 --> 13:23.100
返回的是一个什么呢

13:23.100 --> 13:24.100
返回一个对象

13:24.100 --> 13:25.100
他不是需要

13:25.100 --> 13:26.100
不是需要一个submit

13:26.100 --> 13:27.100
submit

13:27.100 --> 13:28.100
submit

13:28.100 --> 13:29.100
ok

13:29.100 --> 13:30.100
那么我再写一下

13:30.100 --> 13:31.100
submit

13:31.100 --> 13:32.100
他给我一个formdata

13:32.100 --> 13:33.100
那么这里边呢

13:33.100 --> 13:34.100
我们要干嘛呢

13:34.100 --> 13:35.100
我们其实就是

13:35.100 --> 13:36.100
要data

13:36.100 --> 13:37.100
去触发

13:37.100 --> 13:38.100
触发什么呢

13:38.100 --> 13:39.100
触发一个x

13:39.100 --> 13:40.100
触发一个x

13:40.100 --> 13:41.100
那么这个x呢

13:41.100 --> 13:42.100
来自于

13:43.100 --> 13:44.100
来吧

13:44.100 --> 13:46.100
触发一个x

13:46.100 --> 13:48.100
来自于哪呢

13:48.100 --> 13:50.100
来自于我想想

13:51.100 --> 13:54.100
这里我们可以

13:54.100 --> 13:56.100
导入那个

13:56.100 --> 13:58.100
这里 from actions

13:58.100 --> 13:59.100
store

13:59.100 --> 14:00.100
actions

14:00.100 --> 14:02.100
logging

14:02.100 --> 14:04.100
action types

14:05.100 --> 14:06.100
就是那个logging

14:06.100 --> 14:07.100
我们要登录的action

14:07.100 --> 14:08.100
对吧

14:08.100 --> 14:09.100
我们dispatch

14:09.100 --> 14:10.100
logging

14:10.100 --> 14:11.100
然后action

14:11.100 --> 14:12.100
创进来

14:12.100 --> 14:13.100
logging id

14:13.100 --> 14:14.100
logging id等于什么呢

14:14.100 --> 14:15.100
formdata.

14:15.100 --> 14:16.100
logging id

14:16.100 --> 14:18.100
然后formdata.

14:18.100 --> 14:19.100
logging

14:19.100 --> 14:20.100
taskword

14:20.100 --> 14:21.100
咱们快速写了

14:21.100 --> 14:22.100
写了过后呢

14:22.100 --> 14:24.100
我们通过config

14:25.100 --> 14:26.100
然后第1个

14:26.100 --> 14:28.100
mapsdata without

14:28.100 --> 14:29.100
然后mapsdispatch

14:29.100 --> 14:31.100
然后把我们的logging

14:31.100 --> 14:32.100
foam

14:32.100 --> 14:33.100
OK

14:33.100 --> 14:34.100
我们就形成了一个页面

14:34.100 --> 14:35.100
对吧

14:35.100 --> 14:36.100
登录页面

14:36.100 --> 14:38.100
我们就直接把它包装一下

14:38.100 --> 14:39.100
它不是需要一个dispatch吗

14:39.100 --> 14:40.100
我们就需要个事件

14:40.100 --> 14:41.100
把事件给它

14:41.100 --> 14:42.100
就完事了

14:42.100 --> 14:43.100
好

14:43.100 --> 14:44.100
行了

14:44.100 --> 14:45.100
咱们来看一下

14:45.100 --> 14:47.100
能不能实现登录成功呢

14:47.100 --> 14:48.100
咱们来看一下

14:48.100 --> 14:51.740
mpm装

14:51.740 --> 14:52.740
对

14:52.740 --> 14:56.580
当然这个地方

14:56.580 --> 14:57.580
肯定还是一细脚

14:57.580 --> 14:58.580
改进

14:58.580 --> 14:59.580
不到底

14:59.580 --> 15:00.580
慢慢来

15:00.580 --> 15:02.580
localhost

15:02.580 --> 15:10.340
3000

15:10.340 --> 15:11.340
稍等

15:12.340 --> 15:14.340
要变异一下

15:14.340 --> 15:15.340
OK 变异好了

15:15.340 --> 15:16.340
点击登录

15:16.340 --> 15:19.740
打开

15:19.740 --> 15:20.740
打开这里

15:20.740 --> 15:21.740
好 刷新

15:21.740 --> 15:22.740
登录

15:22.740 --> 15:23.740
登录过后呢

15:23.740 --> 15:24.740
我们这里呢

15:24.740 --> 15:25.740
随便输个账号吧

15:25.740 --> 15:26.740
账号随便输入一个密码

15:26.740 --> 15:27.740
随便输入一个

15:27.740 --> 15:28.740
我们主要是观察Ridax

15:28.740 --> 15:29.740
现在只是在客户端运行

15:29.740 --> 15:30.740
对吧

15:30.740 --> 15:31.740
只是在客户端运行

15:31.740 --> 15:32.740
那么现在呢

15:32.740 --> 15:33.740
我们来试一下

15:33.740 --> 15:35.740
点击登录

15:35.740 --> 15:36.740
点击登录

15:36.740 --> 15:37.740
你看

15:37.740 --> 15:39.740
是不是有个sysnoking优质

15:39.740 --> 15:40.740
对吧

15:40.740 --> 15:41.740
那么我们看一下

15:41.740 --> 15:42.740
这个设置的时候

15:42.740 --> 15:43.740
状态是什么呢

15:43.740 --> 15:44.740
状态是nokinu的伪浪

15:44.740 --> 15:45.740
对吧

15:45.740 --> 15:46.740
是登录失败

15:46.740 --> 15:47.740
对不对

15:47.740 --> 15:48.740
登录失败

15:48.740 --> 15:49.740
然后我们登录成功呢

15:49.740 --> 15:50.740
1 2 3

15:50.740 --> 15:51.740
1 2 3 4

15:51.740 --> 15:52.740
1 2 3 4

15:52.740 --> 15:53.740
好

15:53.740 --> 15:54.740
然后我们在这里

15:54.740 --> 15:56.740
设置一个密码是1 2 3

15:56.740 --> 15:57.740
1 2 3

15:57.740 --> 15:58.740
点登录

15:58.740 --> 15:59.740
你看

15:59.740 --> 16:00.740
登录是不是成功了

16:00.740 --> 16:01.740
对不对

16:01.740 --> 16:02.740
OK

16:02.740 --> 16:03.740
那么登录成功过后

16:03.740 --> 16:04.740
自然Cookie里面就有值了

16:04.740 --> 16:05.740
肯定是有值的

16:05.740 --> 16:06.740
Token

16:06.740 --> 16:07.740
你看

16:07.740 --> 16:08.740
肯定是有值的

16:08.740 --> 16:09.740
对吧

16:09.740 --> 16:10.740
我们之前都做好的

16:10.740 --> 16:11.740
那么现在呢

16:11.740 --> 16:12.740
登录失败的时候

16:12.740 --> 16:13.740
要提示

16:13.740 --> 16:14.740
登录成功过后要跳转

16:14.740 --> 16:15.740
要跳转

16:15.740 --> 16:16.740
咱们怎么来呢

16:16.740 --> 16:17.740
这样吧

16:17.740 --> 16:18.740
我们这个foam里面

16:18.740 --> 16:19.740
在这里面

16:19.740 --> 16:20.740
在这里面直接处理得了

16:20.740 --> 16:22.740
我们这里是这样子

16:22.740 --> 16:23.740
我们到登录里面来

16:23.740 --> 16:25.740
我们把它做成一个异步函数

16:25.740 --> 16:26.740
sync

16:26.740 --> 16:27.740
那么这边呢

16:27.740 --> 16:29.740
我们return a weight

16:29.740 --> 16:30.740
就是把这个dispatch的结果

16:30.740 --> 16:31.740
来返回

16:31.740 --> 16:32.740
把dispatch的结果返回

16:32.740 --> 16:33.740
好

16:33.740 --> 16:34.740
那么这边来

16:34.740 --> 16:35.740
到我们的foam里面来

16:35.740 --> 16:36.740
我们是不是可以

16:36.740 --> 16:38.740
拿到这个dispatch的结果

16:38.740 --> 16:39.740
是不是

16:39.740 --> 16:40.740
就是拿到

16:40.740 --> 16:41.740
是不

16:41.740 --> 16:42.740
onclick的时候

16:42.740 --> 16:43.740
我们可以拿到

16:43.740 --> 16:44.740
这个sabamex的结果

16:44.740 --> 16:45.740
对吧

16:45.740 --> 16:46.740
拿到它的结果

16:46.740 --> 16:47.740
我们根据这个结果

16:47.740 --> 16:48.740
来再来自行进行处理

16:48.740 --> 16:49.740
比方说我们保存一下吧

16:49.740 --> 16:50.740
我们这个

16:50.740 --> 16:51.740
sync一下

16:51.740 --> 16:53.740
把它变成一个异步函数

16:53.740 --> 16:54.740
这样子

16:54.740 --> 16:55.740
判断一下

16:55.740 --> 16:56.740
如果说

16:56.740 --> 16:57.740
onSabamex有值

16:57.740 --> 16:58.740
好

16:58.740 --> 16:59.740
那怎么办呢

16:59.740 --> 17:00.740
我们就a weight

17:00.740 --> 17:01.740
onSabamex

17:01.740 --> 17:02.740
去出发它

17:02.740 --> 17:03.740
对吧

17:03.740 --> 17:04.740
把foamdata传进去

17:04.740 --> 17:05.740
传进去过后

17:05.740 --> 17:06.740
它是不是可以

17:06.740 --> 17:07.740
拿到一个结果

17:07.740 --> 17:08.740
对吧

17:09.740 --> 17:12.110
保存

17:12.110 --> 17:13.110
再来

17:13.110 --> 17:15.110
12345678

17:16.110 --> 17:17.110
还有7

17:18.110 --> 17:19.110
1234

17:19.110 --> 17:20.110
123123

17:20.110 --> 17:21.110
把它复制一下吧

17:21.110 --> 17:22.110
好

17:22.110 --> 17:23.110
主要看控制台

17:23.110 --> 17:24.110
点击单路

17:24.110 --> 17:25.110
说出

17:25.110 --> 17:26.110
然后我们加一个

17:26.110 --> 17:27.110
点击

17:27.110 --> 17:28.110
是不是force

17:28.110 --> 17:29.110
对吧

17:29.110 --> 17:30.110
好

17:30.110 --> 17:31.110
那么这里

17:31.110 --> 17:32.110
我们就可以根据这个结果

17:32.110 --> 17:33.110
判断一下

17:33.110 --> 17:34.110
如果说results为处的话

17:34.110 --> 17:35.110
那么我们是不是跳转

17:35.110 --> 17:36.110
跳转该怎么办

17:36.110 --> 17:37.110
跳转该怎么办

17:37.110 --> 17:38.110
是不是我们要用

17:38.110 --> 17:39.110
from

17:40.110 --> 17:41.110
next

17:41.110 --> 17:42.110
rotor

17:42.110 --> 17:43.110
这边

17:43.110 --> 17:46.870
我们是用useRotor

17:46.870 --> 17:47.870
好

17:47.870 --> 17:48.870
来吧

17:48.870 --> 17:49.870
这里呢

17:49.870 --> 17:50.870
Rotor

17:50.870 --> 17:51.870
useRotor

17:51.870 --> 17:52.870
好

17:52.870 --> 17:53.870
这边

17:53.870 --> 17:54.870
我们来跳转

17:54.870 --> 17:55.870
如果说登成功

17:55.870 --> 17:56.870
Rotor push

17:56.870 --> 17:57.870
跳转到哪呢

17:57.870 --> 17:58.870
跳转手艺吧

17:58.870 --> 17:59.870
跳转手艺

17:59.870 --> 18:00.870
else

18:00.870 --> 18:02.870
我们就adult

18:02.870 --> 18:04.870
账号密码错误

18:04.870 --> 18:06.870
或密码错误

18:06.870 --> 18:07.870
对吧

18:08.870 --> 18:09.870
来吧

18:09.870 --> 18:12.760
点击

18:12.760 --> 18:13.760
账号密码错误

18:13.760 --> 18:14.760
对吧

18:14.760 --> 18:16.760
1234

18:16.760 --> 18:17.760
1234

18:17.760 --> 18:18.760
1234

18:18.760 --> 18:19.760
点击

18:19.760 --> 18:20.760
是不到手艺来了

18:20.760 --> 18:21.760
对吧

18:21.760 --> 18:22.760
登入成功了

18:22.760 --> 18:23.760
没问题吧

18:23.760 --> 18:24.760
OK

18:24.760 --> 18:25.760
应该没问题

18:26.760 --> 18:27.760
接下来我们再来

18:29.760 --> 18:31.760
现在我们还要做这么件事

18:31.760 --> 18:33.760
就是有一个页面

18:33.760 --> 18:35.760
它必须要登入成功之后

18:35.760 --> 18:36.760
才能访问

18:36.760 --> 18:38.760
比方说我们这里配置

18:38.760 --> 18:39.760
里面有一个页面

18:39.760 --> 18:41.760
叫做private

18:41.760 --> 18:42.760
private.jsx

18:45.760 --> 18:46.760
发挥

18:46.760 --> 18:51.760
就是必须登入成功后

18:51.760 --> 18:54.760
就是必须登入

18:54.760 --> 18:56.760
登入状态

18:56.760 --> 18:57.760
才能访问

18:57.760 --> 18:59.760
就这么一个私有页面

18:59.760 --> 19:01.760
只有登入状态的时候才能访问

19:01.760 --> 19:02.760
好

19:02.760 --> 19:03.760
那么现在我们在这里边加一个

19:03.760 --> 19:04.760
黑道里边加一个

19:04.760 --> 19:06.760
加个链接

19:06.760 --> 19:07.760
在这里边加一个链接

19:09.760 --> 19:12.760
就是私有页面

19:12.760 --> 19:14.760
就是受保护的页面

19:15.760 --> 19:16.760
那么到哪呢

19:16.760 --> 19:18.760
到这个private

19:18.760 --> 19:19.760
private

19:19.760 --> 19:20.760
我们这里小写吧

19:21.760 --> 19:22.760
private

19:22.760 --> 19:23.760
OK

19:23.760 --> 19:24.760
那么现在我们把这里写好了

19:24.760 --> 19:26.760
加它们来看一下

19:26.760 --> 19:27.760
点击受保护的页面

19:27.760 --> 19:28.760
点击

19:28.760 --> 19:29.760
比如说这个页面

19:29.760 --> 19:30.760
必须要登入状态才能访问

19:30.760 --> 19:31.760
对吧

19:31.760 --> 19:32.760
那么现在它目前

19:32.760 --> 19:33.760
是随便的

19:33.760 --> 19:34.760
怎么样都可以访问的

19:34.760 --> 19:35.760
对吧

19:35.760 --> 19:36.760
哪怕是没有登入都可以访问

19:36.760 --> 19:37.760
那么我们把个Cookie去掉

19:37.760 --> 19:39.760
Cookie去掉

19:39.760 --> 19:40.760
因为看一下有没有登入主要

19:40.760 --> 19:41.760
主要是看Cookie

19:41.760 --> 19:42.760
主要是看Cookie

19:42.760 --> 19:43.760
我们把Cookie去掉

19:43.760 --> 19:44.760
那么现在这个页面

19:44.760 --> 19:45.760
肯定还是能够访问的

19:45.760 --> 19:47.760
那么我们希望这个页面

19:47.760 --> 19:48.760
无论是在服务器端

19:48.760 --> 19:49.760
还是在客户端

19:49.760 --> 19:51.760
它必须要登入之后才能访问

19:51.760 --> 19:52.760
那怎么办呢

19:52.760 --> 19:54.760
我们就完全可以利用服务端确的

19:54.760 --> 19:56.760
完全可以利用服务端确的

19:56.760 --> 19:58.760
怎么个意思呢

19:58.760 --> 19:59.760
就是我们服务端

19:59.760 --> 20:01.760
这里导出一个函数

20:01.760 --> 20:02.760
当然是个异布函数

20:02.760 --> 20:03.760
导出一个函数

20:03.760 --> 20:05.760
这个函数叫做Gate

20:05.760 --> 20:08.760
什么Server Side Crops

20:08.760 --> 20:09.760
对吧 有这么一个函数

20:09.760 --> 20:10.760
这个函数干嘛

20:10.760 --> 20:12.760
这个函数要去触发仓库

20:12.760 --> 20:14.760
触发仓库

20:14.760 --> 20:15.760
然后呢就是

20:15.760 --> 20:16.760
触发仓库什么呢

20:16.760 --> 20:18.760
触发仓库的

20:18.760 --> 20:20.760
互MI

20:20.760 --> 20:21.760
X

20:21.760 --> 20:22.760
去触发它

20:22.760 --> 20:23.760
然后拿到我是谁

20:23.760 --> 20:24.760
对吧

20:24.760 --> 20:26.760
拿到我是谁

20:26.760 --> 20:27.760
我是谁

20:27.760 --> 20:28.760
是不是

20:28.760 --> 20:30.760
把那个仓库里面的数据填充了

20:30.760 --> 20:31.760
那么填充之后

20:31.760 --> 20:32.760
我再看一下仓库里面

20:32.760 --> 20:34.760
到底有没有 just login user

20:34.760 --> 20:35.760
如果说有的话

20:35.760 --> 20:36.760
那么表示的是

20:36.760 --> 20:37.760
登录有已经成功了

20:37.760 --> 20:38.760
如果说没有的话

20:38.760 --> 20:40.760
那么就表示没有登录过

20:40.760 --> 20:41.760
对吧

20:41.760 --> 20:43.760
因为我们毕竟是触发这个互MI

20:43.760 --> 20:44.760
他就他就能够判断

20:44.760 --> 20:45.760
有没有登录

20:45.760 --> 20:46.760
因此这里呢

20:46.760 --> 20:47.760
我们肯定要去触发仓库

20:47.760 --> 20:48.760
那么还记得吗

20:48.760 --> 20:49.760
我们之前触发仓库怎么玩的

20:49.760 --> 20:50.760
对吧

20:50.760 --> 20:51.760
怎么玩的

20:51.760 --> 20:52.760
不就是用这种方式吗

20:52.760 --> 20:53.760
对吧

20:53.760 --> 20:54.760
用这种方式

20:54.760 --> 20:55.760
那么这种方式呢

20:55.760 --> 20:56.760
由于它重复代码

20:56.760 --> 20:57.760
比较多

20:57.760 --> 20:58.760
像什么makeStore

20:58.760 --> 20:59.760
都是需要的

20:59.760 --> 21:00.760
然后呢

21:00.760 --> 21:02.760
还有就是那个

21:02.760 --> 21:03.760
还有后边的返回

21:03.760 --> 21:04.760
是吧

21:04.760 --> 21:05.760
都是差不多的格式

21:05.760 --> 21:06.760
因此呢

21:06.760 --> 21:07.760
我们这里呢

21:07.760 --> 21:08.760
完全可以把提出来

21:08.760 --> 21:09.760
提出了一个高隶函数

21:09.760 --> 21:10.760
就是你给我一个函数

21:10.760 --> 21:11.760
然后呢

21:11.760 --> 21:12.760
我给你返回一个函数

21:12.760 --> 21:13.760
好

21:13.760 --> 21:14.760
那么这里呢

21:14.760 --> 21:15.760
我们写个youtube

21:15.760 --> 21:16.760
就是把这个相同的代码

21:16.760 --> 21:17.760
就这个代码的

21:17.760 --> 21:18.760
这个代码的

21:18.760 --> 21:19.760
封装一下

21:19.760 --> 21:20.760
好来吧

21:20.760 --> 21:21.760
我们写一个

21:21.760 --> 21:23.760
就是with

21:23.760 --> 21:25.760
server side props

21:25.760 --> 21:26.760
写上这么一个介绍

21:26.760 --> 21:27.760
在youtube里面

21:27.760 --> 21:28.760
写上这么一个介绍

21:28.760 --> 21:30.760
他就提供一个高隶函数

21:30.760 --> 21:32.760
default

21:32.760 --> 21:33.760
这些东西呢

21:33.760 --> 21:35.760
你们可以自行去处理

21:35.760 --> 21:36.760
自行去封装处理

21:36.760 --> 21:37.760
你给我传一个什么函数

21:37.760 --> 21:38.760
你给我传一个函数进来

21:38.760 --> 21:40.760
就是说你给我传一个这样的函数

21:40.760 --> 21:42.760
你给我传一个这样的函数进来

21:42.760 --> 21:43.760
我

21:43.760 --> 21:44.760
我本身的是一个assign

21:44.760 --> 21:46.760
那么我给你返回一个新

21:46.760 --> 21:48.760
我给你返回一个新的函数

21:48.760 --> 21:50.760
给你返回一个assign

21:50.760 --> 21:51.760
新的函数

21:51.760 --> 21:52.760
那么这个新的函数

21:52.760 --> 21:54.760
就是你需要导出的

21:54.760 --> 21:55.760
返回这个新的函数

21:55.760 --> 21:56.760
就是你要导出的是

21:56.760 --> 21:57.760
不是这个函数

21:57.760 --> 21:59.760
导出的是我们的新的函数

21:59.760 --> 22:00.760
新的函数

22:00.760 --> 22:01.760
那么是什么呢

22:01.760 --> 22:04.760
就是导出一个新的函数

22:04.760 --> 22:05.760
这个新的函数

22:05.760 --> 22:06.760
是不是会接受一些参数

22:06.760 --> 22:07.760
你看

22:07.760 --> 22:09.760
这里是不是会接受一些参数

22:09.760 --> 22:10.760
对不对

22:10.760 --> 22:11.760
接受一些参数

22:11.760 --> 22:13.760
那么我把这些参数拿到

22:13.760 --> 22:14.760
拿到

22:14.760 --> 22:15.760
然后我这里

22:15.760 --> 22:16.760
我这里干嘛呢

22:16.760 --> 22:18.760
我这里是不是用之前的做法

22:18.760 --> 22:19.760
就在这里

22:19.760 --> 22:20.760
我们就用这里的

22:20.760 --> 22:21.760
就是makeStore

22:21.760 --> 22:22.760
我们手

22:22.760 --> 22:23.760
这个新的函数里边

22:23.760 --> 22:25.760
我们首先返回

22:25.760 --> 22:26.760
首先返回这个

22:26.760 --> 22:28.760
把这个代码封装一下

22:28.760 --> 22:30.760
把这个拿过来

22:30.760 --> 22:31.760
makeStore

22:31.760 --> 22:32.760
创建了仓库

22:32.760 --> 22:34.760
然后干嘛呢

22:34.760 --> 22:35.760
我把这个probs里边

22:35.760 --> 22:37.760
给它加上一个store

22:37.760 --> 22:40.760
probs里边加上一个store

22:40.760 --> 22:41.760
store加上

22:41.760 --> 22:42.760
那么这样

22:42.760 --> 22:43.760
就是这个函数

22:43.760 --> 22:44.760
我们再说一次

22:44.760 --> 22:45.760
这个函数就是你到时候要导出的

22:45.760 --> 22:46.760
就这个玩意

22:46.760 --> 22:47.760
就导出了

22:47.760 --> 22:48.760
导出它

22:48.760 --> 22:50.760
导出就是你雕用这个函数

22:50.760 --> 22:51.760
然后得到一个新的函数

22:51.760 --> 22:53.760
把这个新的函数导出

22:53.760 --> 22:54.760
那么这个新的函数

22:54.760 --> 22:55.760
它接受一些参数进来

22:55.760 --> 22:56.760
对吧

22:56.760 --> 22:57.760
什么Rake

22:57.760 --> 22:58.760
Risk

22:58.760 --> 22:59.760
还有什么Rotor

22:59.760 --> 23:00.760
Query

23:00.760 --> 23:01.760
这些东西

23:01.760 --> 23:02.760
那么都可以拿到

23:02.760 --> 23:03.760
那么这里

23:03.760 --> 23:06.760
你可以通过这种方式来导出

23:06.760 --> 23:07.760
导出的时候

23:07.760 --> 23:08.760
就导出这个函数

23:08.760 --> 23:09.760
这个函数肯定是个异步的

23:09.760 --> 23:12.760
因为这边需要导出一个异步函数

23:12.760 --> 23:13.760
导出一个异步的

23:13.760 --> 23:14.760
那么这个函数里边

23:14.760 --> 23:17.760
我们有些同用的做法

23:17.760 --> 23:20.760
withStore

23:20.760 --> 23:22.760
withStore

23:22.760 --> 23:23.760
那么这边

23:23.760 --> 23:25.760
我们首先创建一个仓库

23:25.760 --> 23:26.760
创建一个仓库过后

23:26.760 --> 23:27.760
我们把夹到的属性里边

23:27.760 --> 23:29.760
然后我们去调用你这个函数

23:29.760 --> 23:30.760
去调用你这个函数

23:30.760 --> 23:31.760
把Propos传进去

23:31.760 --> 23:33.760
Propos是不是把仓库传进来了

23:33.760 --> 23:34.760
而且你

23:34.760 --> 23:36.760
就是你到时候有一个包装的函数

23:36.760 --> 23:37.760
肯定也是个异步的

23:37.760 --> 23:38.760
我等待你

23:38.760 --> 23:40.760
等待你完成

23:40.760 --> 23:41.760
等待你完成

23:41.760 --> 23:43.760
可能会给我一个结果

23:43.760 --> 23:44.760
会给我一个结果

23:44.760 --> 23:45.760
那么我把这个结果

23:45.760 --> 23:46.760
就是你返回的结果

23:46.760 --> 23:47.760
肯定是个对象

23:47.760 --> 23:48.760
对吧

23:48.760 --> 23:49.760
肯定是个对象

23:49.760 --> 23:50.760
然后我再返回我自己的结果

23:50.760 --> 23:51.760
我返回什么

23:51.760 --> 23:53.760
我返回是不是这种格式

23:53.760 --> 23:57.710
我返回这种格式

23:57.710 --> 23:58.710
好

23:58.710 --> 24:01.710
那么加上一个InitialProposState

24:01.710 --> 24:03.710
把这个StonesGetState

24:03.710 --> 24:04.710
夹进去

24:04.710 --> 24:05.710
对吧

24:05.710 --> 24:06.710
夹进去

24:06.710 --> 24:07.710
然后我再把你返回到Results

24:07.710 --> 24:08.710
再夹进去

24:08.710 --> 24:09.710
对吧

24:09.710 --> 24:10.710
我们就写成这么一个高解函数

24:10.710 --> 24:11.710
有了这个高解函数

24:11.710 --> 24:12.710
我后来到这边来

24:12.710 --> 24:14.710
到这边来就简单了

24:14.710 --> 24:15.710
到这边来

24:15.710 --> 24:16.710
我们就

24:17.710 --> 24:18.710
这里一个函数

24:19.710 --> 24:20.710
叫做

24:21.710 --> 24:22.710
gets

24:22.710 --> 24:23.710
就要这个吧

24:23.710 --> 24:24.710
就要这个

24:24.710 --> 24:25.710
一个funk

24:25.710 --> 24:26.710
sync

24:26.710 --> 24:27.710
funk

24:27.710 --> 24:28.710
funksync

24:28.710 --> 24:29.710
那么这个函数

24:30.710 --> 24:32.710
它里边就会传进了一个store

24:32.710 --> 24:33.710
就会传进一个store

24:33.710 --> 24:35.710
然后我们只需要把这个地方

24:35.710 --> 24:36.710
store

24:36.710 --> 24:37.710
dispatch一下就完事了

24:37.710 --> 24:38.710
对吧

24:38.710 --> 24:39.710
我们返回了

24:39.710 --> 24:40.710
返回一个空对象

24:40.710 --> 24:41.710
返回空对象

24:41.710 --> 24:42.710
或者我们在这边判断一下

24:42.710 --> 24:43.710
如果说

24:43.710 --> 24:45.710
如果说Results有值

24:46.710 --> 24:47.710
如果说Results

24:47.710 --> 24:48.710
Results没有值的话

24:48.710 --> 24:49.710
我们就给它一个空对象

24:49.710 --> 24:50.710
那么它就可以不返回了

24:50.710 --> 24:51.710
对吧

24:51.710 --> 24:52.710
就可以不返回了

24:52.710 --> 24:53.710
那么我们这里

24:53.710 --> 24:54.710
这个函数只是触发一个仓库

24:54.710 --> 24:55.710
就简单很多了

24:55.710 --> 24:56.710
然后我们导出什么

24:56.710 --> 24:57.710
导出这个

24:58.710 --> 24:59.710
我们导出这个

24:59.710 --> 25:01.710
导出一个getserver problems

25:03.710 --> 25:04.710
getserver problems

25:04.710 --> 25:05.710
等于什么

25:05.710 --> 25:06.710
我们来

25:06.710 --> 25:07.710
把刚才的高階函数

25:07.710 --> 25:08.710
导进了

25:08.710 --> 25:09.710
import

25:09.710 --> 25:10.710
高階函数

25:10.710 --> 25:11.710
叫做

25:11.710 --> 25:13.710
withstore

25:14.710 --> 25:15.710
这个函数导进了

25:15.710 --> 25:16.710
from

25:17.710 --> 25:18.710
Ut

25:20.710 --> 25:21.710
withstore

25:21.710 --> 25:22.710
把这个函数导进来

25:22.710 --> 25:23.710
这一块可能

25:23.710 --> 25:24.710
大家一打回来

25:24.710 --> 25:25.710
听起来也糟

25:25.710 --> 25:27.710
毕竟是你的高階函数

25:28.710 --> 25:29.710
放进去

25:29.710 --> 25:30.710
对吧

25:30.710 --> 25:31.710
那么这个函数返回的结果

25:31.710 --> 25:33.710
是不是一个异部函数

25:33.710 --> 25:34.710
返回的结果

25:34.710 --> 25:35.710
是不是一个异部函数

25:35.710 --> 25:36.710
那么把异部函数命个名字

25:36.710 --> 25:37.710
导出就完成了

25:37.710 --> 25:38.710
对吧

25:38.710 --> 25:39.710
说导出就完成了

25:39.710 --> 25:40.710
那么实际上这里导出的是什么

25:40.710 --> 25:41.710
导出的是这个函数

25:41.710 --> 25:42.710
对吧

25:42.710 --> 25:43.710
这个函数的创建仓库

25:43.710 --> 25:44.710
创建仓库完了过后

25:44.710 --> 25:45.710
加拿大属性里边

25:45.710 --> 25:46.710
然后呢

25:46.710 --> 25:47.710
调用我们给它的函数

25:47.710 --> 25:48.710
我们给它的什么函数

25:48.710 --> 25:49.710
我们给它的这个函数

25:49.710 --> 25:50.710
对吧

25:50.710 --> 25:51.710
你说我们导出的函数

25:51.710 --> 25:52.710
内部呢

25:52.710 --> 25:54.710
这个函数就很简单了

25:54.710 --> 25:55.710
它只是去触发这个

25:55.710 --> 25:56.710
Stone就完成了

25:56.710 --> 25:57.710
对吧

25:57.710 --> 25:58.710
去触发Stone

25:58.710 --> 25:59.710
触发完了过后了

25:59.710 --> 26:00.710
这边

26:00.710 --> 26:01.710
如果说你有返回值

26:01.710 --> 26:02.710
那么我就把返回值

26:02.710 --> 26:03.710
给你加入到probs里边

26:03.710 --> 26:04.710
如果说你没有返回值的话

26:04.710 --> 26:05.710
那么我只是给

26:05.710 --> 26:06.710
肯定要额外加一个

26:06.710 --> 26:07.710
InitialState

26:07.710 --> 26:08.710
对吧

26:08.710 --> 26:09.710
我们把它写成这样子

26:09.710 --> 26:10.710
这样子的话

26:10.710 --> 26:12.710
后续的处理那就比较简单了

26:12.710 --> 26:13.710
后续的处理就比较简单了

26:13.710 --> 26:14.710
我们来看一下吧

26:15.710 --> 26:16.710
看一下

26:17.710 --> 26:18.710
到底是什么

26:18.710 --> 26:19.710
被大尔测试的

26:20.710 --> 26:21.710
刷新

26:22.710 --> 26:23.710
你看一开始是不是11

26:23.710 --> 26:24.710
对吧

26:24.710 --> 26:25.710
是一样的

26:25.710 --> 26:26.710
一开始就是11

26:26.710 --> 26:27.710
ok

26:27.710 --> 26:28.710
那么这个地方搞定了

26:28.710 --> 26:30.710
那么这边也是一样

26:30.710 --> 26:31.710
也是一样

26:31.710 --> 26:32.710
我们到这里呢

26:32.710 --> 26:33.710
把这个withStone拿过来

26:33.710 --> 26:38.050
withStone拿过来

26:38.050 --> 26:39.050
这边呢

26:39.050 --> 26:41.050
我们写上这么一个函数

26:41.050 --> 26:43.050
funk

26:43.050 --> 26:44.050
stink

26:44.050 --> 26:45.050
放个信

26:45.050 --> 26:46.050
放个信

26:49.680 --> 26:50.680
来吧

26:50.680 --> 26:51.680
它这边是不是

26:51.680 --> 26:52.680
会给我一个仓库

26:52.680 --> 26:53.680
对吧

26:53.680 --> 26:54.680
Stone

26:54.680 --> 26:55.680
那么这个Stone呢

26:56.680 --> 26:57.680
去处罚什么

26:57.680 --> 26:59.680
处罚那个就是互外卖

26:59.680 --> 27:00.680
我们导入

27:00.680 --> 27:01.680
Stone

27:01.680 --> 27:02.680
里边的Action

27:02.680 --> 27:03.680
Locking

27:03.680 --> 27:05.680
这里边不是有一个互外卖吗

27:05.680 --> 27:06.680
对吧

27:06.680 --> 27:07.680
好

27:07.680 --> 27:08.680
我们这里呢

27:08.680 --> 27:09.680
调一个互外卖

27:09.680 --> 27:10.680
好 互外卖

27:10.680 --> 27:11.680
里边是不是要传递一个rig

27:11.680 --> 27:12.680
对吧

27:12.680 --> 27:13.680
传递一个rig

27:13.680 --> 27:14.680
request

27:14.680 --> 27:15.680
那么像这些东西

27:15.680 --> 27:16.680
我都可以把它加到

27:16.680 --> 27:17.680
加到这里边去

27:17.680 --> 27:18.680
对吧

27:18.680 --> 27:19.680
加到这里边去

27:19.680 --> 27:20.680
来吧

27:20.680 --> 27:21.680
我们直接在这里处理的

27:21.680 --> 27:22.680
那么就尽量让这边少处理一些

27:22.680 --> 27:23.680
这边呢

27:23.680 --> 27:24.680
我们导入

27:24.680 --> 27:25.680
to services

27:25.680 --> 27:26.680
request

27:28.680 --> 27:29.680
这边有一个什么呢

27:29.680 --> 27:31.680
get server instance

27:32.680 --> 27:33.680
get server instance

27:33.680 --> 27:34.680
好

27:34.680 --> 27:35.680
那么这边

27:35.680 --> 27:36.680
props里边有个configure rig

27:36.680 --> 27:37.680
对吧

27:37.680 --> 27:38.680
configure rig

27:38.680 --> 27:39.680
我们这里呢

27:39.680 --> 27:40.680
得到

27:40.680 --> 27:41.680
access

27:41.680 --> 27:43.680
等于

27:43.680 --> 27:45.680
access

27:45.680 --> 27:47.680
等于get server instance

27:47.680 --> 27:48.680
把props里边的

27:48.680 --> 27:50.680
props

27:50.680 --> 27:52.680
里边的rig传进去

27:52.680 --> 27:53.680
这个可能

27:53.680 --> 27:54.680
相信啊

27:54.680 --> 27:55.680
这可能有些同学就听不懂了

27:55.680 --> 27:57.680
因为这需要很扎实

27:57.680 --> 27:58.680
很扎实的基本功才行

27:58.680 --> 28:00.680
因为这必须要设理到高階函数了

28:00.680 --> 28:02.680
反正是设理到高階函数

28:02.680 --> 28:03.680
什么主件

28:03.680 --> 28:04.680
就听起来有点烧了

28:04.680 --> 28:05.680
那么access呢

28:05.680 --> 28:07.680
我也把它加入到props里边去

28:07.680 --> 28:08.680
props

28:08.680 --> 28:09.680
access

28:09.680 --> 28:10.680
对吧

28:10.680 --> 28:11.680
也加入进去

28:11.680 --> 28:12.680
access

28:12.680 --> 28:13.680
对吧

28:13.680 --> 28:14.680
也把它加入进去

28:14.680 --> 28:15.680
好 那么这边

28:15.680 --> 28:16.680
调用这个函数的时候

28:16.680 --> 28:17.680
是不是就多了一个属性了

28:17.680 --> 28:18.680
access

28:18.680 --> 28:19.680
那么我们这边就越来越简单了

28:19.680 --> 28:20.680
对吧

28:20.680 --> 28:21.680
那么这里就不需要rig了

28:21.680 --> 28:22.680
就access

28:22.680 --> 28:23.680
好

28:23.680 --> 28:24.680
who am I

28:24.680 --> 28:25.680
对吧

28:25.680 --> 28:26.680
把一个小时传进去

28:26.680 --> 28:27.680
ok

28:27.680 --> 28:28.680
那么这样子是不是触发了

28:28.680 --> 28:29.680
对吧

28:29.680 --> 28:30.680
等它触发完成

28:30.680 --> 28:31.680
触发完成过后呢

28:31.680 --> 28:33.680
那么仓库里边肯定有这个数据了

28:33.680 --> 28:34.680
对吧

28:34.680 --> 28:35.680
肯定有这个数据了

28:35.680 --> 28:36.680
好 那么咱们

28:36.680 --> 28:37.680
导出的时候呢

28:37.680 --> 28:38.680
只需要包装一下

28:38.680 --> 28:39.680
只需要包装一下就行了

28:39.680 --> 28:40.680
好

28:40.680 --> 28:41.680
方

28:41.680 --> 28:42.680
access

28:42.680 --> 28:43.680
导出一个

28:43.680 --> 28:44.680
叫做get

28:44.680 --> 28:45.680
server

28:45.680 --> 28:46.680
side

28:46.680 --> 28:47.680
props

28:47.680 --> 28:48.680
等于什么呢

28:48.680 --> 28:49.680
等于

28:49.680 --> 28:52.570
with

28:52.570 --> 28:53.570
放个传进去

28:53.570 --> 28:55.570
传进去完成了

28:55.570 --> 28:56.570
好

28:56.570 --> 28:57.570
咱们来访问一下

28:57.570 --> 28:59.570
访问一下这个时候保护的页面

28:59.570 --> 29:00.570
刷新

29:00.570 --> 29:01.570
好 接下来

29:01.570 --> 29:02.570
我们来看一下它的元代码

29:02.570 --> 29:03.570
页面元代码里边

29:03.570 --> 29:04.570
就肯定包含了

29:04.570 --> 29:05.570
login u字

29:05.570 --> 29:06.570
对吧

29:06.570 --> 29:07.570
肯定是包含了login u字

29:07.570 --> 29:08.570
login u是不是拿好

29:08.570 --> 29:09.570
对不对

29:09.570 --> 29:10.570
是不是拿好

29:10.570 --> 29:11.570
好 那么咱们来登录一下

29:11.570 --> 29:12.570
我们登录一下 试一下

29:12.570 --> 29:13.570
看登录之后呢

29:13.570 --> 29:14.570
看login u是不是拿好

29:14.570 --> 29:15.570
1 2 3

29:15.570 --> 29:16.570
1 2 3 4

29:16.570 --> 29:17.570
1 2 3 4

29:17.570 --> 29:18.570
1 2 3

29:18.570 --> 29:21.200
1 2 3

29:21.200 --> 29:22.200
登录

29:22.200 --> 29:23.200
好 首页

29:23.200 --> 29:24.200
保护的页面再看一下

29:24.200 --> 29:25.200
刷新

29:25.200 --> 29:26.200
这边刷新

29:26.200 --> 29:27.200
好 你看

29:27.200 --> 29:28.200
是保护的页面

29:28.200 --> 29:29.200
它是不是告诉我

29:29.200 --> 29:30.200
我当前登录的用户了

29:30.200 --> 29:31.200
对吧

29:31.200 --> 29:32.200
是不是在仓库里面

29:32.200 --> 29:33.200
服务器那边

29:33.200 --> 29:34.200
你把仓库里面的数据处理好了

29:34.200 --> 29:35.200
对吧

29:35.200 --> 29:36.200
而且这样的数据

29:36.200 --> 29:37.200
是不是可以传给页面

29:37.200 --> 29:38.200
对吧

29:38.200 --> 29:39.200
它可以通

29:39.200 --> 29:40.200
那么仓库里面是不是就有了

29:40.200 --> 29:41.200
对吧 是不是有了

29:41.200 --> 29:42.200
不是传给页面

29:42.200 --> 29:43.200
仓库里面的数据是不是有了

29:43.200 --> 29:44.200
那么有了数据过后

29:44.200 --> 29:46.200
这边是不是仓库

29:46.200 --> 29:47.200
这里的组件

29:47.200 --> 29:48.200
我们就可以这样来写

29:48.200 --> 29:49.200
那么到底

29:49.200 --> 29:50.200
就是login u字

29:50.200 --> 29:51.200
大家把login u字传给我

29:51.200 --> 29:53.200
当前登录的用户传给我

29:53.200 --> 29:54.200
我判断一下

29:54.200 --> 29:56.200
如果说login u字有值

29:56.200 --> 29:57.200
有值的话

29:57.200 --> 29:58.200
那么我们就返回这个

29:58.200 --> 30:00.200
是吧 是不是返回这个

30:00.200 --> 30:01.200
好 如果说你没有值呢

30:01.200 --> 30:02.200
没有值

30:02.200 --> 30:04.200
我就给你返回这个

30:04.200 --> 30:06.200
我就给你返回

30:06.200 --> 30:07.200
一个空的

30:07.200 --> 30:08.200
一个空的

30:08.200 --> 30:09.200
一个烙

30:09.200 --> 30:10.200
返回一个烙

30:10.200 --> 30:11.200
那么不仅要返回烙

30:11.200 --> 30:13.200
而且我还要干嘛呢

30:13.200 --> 30:14.200
我还要就是

30:14.200 --> 30:17.200
让它回到登录页

30:17.200 --> 30:19.200
我还要让它回到登录页

30:19.200 --> 30:20.200
我怎么办呢

30:20.200 --> 30:21.200
我完全可以利用路由

30:21.200 --> 30:22.200
对吧

30:22.200 --> 30:23.200
那么这些姿势

30:23.200 --> 30:24.200
就可以完全串起来

30:24.200 --> 30:25.200
就是next

30:25.200 --> 30:26.200
rotor

30:26.200 --> 30:27.200
是不是这里有一个

30:27.200 --> 30:29.200
u字rotor

30:29.200 --> 30:31.200
是不是有这么一个东西

30:31.200 --> 30:33.200
那么u字rotor

30:33.200 --> 30:36.200
这里我们rotor

30:36.200 --> 30:38.200
其实这里挑转路由

30:38.200 --> 30:39.200
还有很多种处理方式

30:39.200 --> 30:40.200
比方说在服务端挑转

30:40.200 --> 30:41.200
服务端这里不是有个

30:41.200 --> 30:42.200
Race推销吗

30:42.200 --> 30:43.200
在这里直接返回一个302

30:43.200 --> 30:44.200
对吧 重进销

30:44.200 --> 30:45.200
也可以

30:45.200 --> 30:46.200
那么我们这里

30:46.200 --> 30:48.200
还是用这种方式挑转吧

30:48.200 --> 30:49.200
注意啊

30:49.200 --> 30:50.200
这个地方服务器

30:50.200 --> 30:52.200
这边是没有这个实力的

30:52.200 --> 30:53.200
你不能用去这里

30:53.200 --> 30:54.200
因为这个主线

30:54.200 --> 30:55.200
这个主线是服端要运行

30:55.200 --> 30:56.200
客户端也要运行的

30:56.200 --> 30:58.200
服务端是没有这个实力的

30:58.200 --> 30:59.200
是没有这个实力的

30:59.200 --> 31:01.200
所以说我这里最好判断一下

31:01.200 --> 31:03.200
如果说rotor

31:03.200 --> 31:04.200
poosh

31:04.200 --> 31:05.200
有值

31:05.200 --> 31:06.200
如果说有值的话

31:06.200 --> 31:08.200
判断在这里判断一下

31:08.200 --> 31:10.200
如果说有值的话

31:10.200 --> 31:11.200
有值的话怎么办呢

31:11.200 --> 31:12.200
有值的话我就rotor

31:12.200 --> 31:13.200
poosh

31:13.200 --> 31:14.200
到哪呢

31:14.200 --> 31:16.200
到mogin登录页

31:16.200 --> 31:17.200
对吧

31:17.200 --> 31:18.200
那么判断一下

31:18.200 --> 31:19.200
因为服务器这个东西

31:19.200 --> 31:20.200
是没有值的

31:20.200 --> 31:21.200
没有值的

31:21.200 --> 31:22.200
保存

31:22.200 --> 31:23.200
接下来我们来看一下

31:23.200 --> 31:24.200
private

31:26.200 --> 31:27.200
诶 怎么了

31:27.200 --> 31:29.200
norotor instant

31:30.200 --> 31:31.200
是吧

31:31.200 --> 31:33.200
norotor instant is found

31:33.200 --> 31:35.200
you should only see the note inside

31:35.200 --> 31:37.200
the client of your

31:37.200 --> 31:38.200
还是这个问题

31:38.200 --> 31:39.200
还是这个问题

31:39.200 --> 31:42.200
服端倒是这个有值

31:42.200 --> 31:43.200
服端倒是这个有值

31:43.200 --> 31:44.200
但是他用不了

31:44.200 --> 31:45.200
这个

31:45.200 --> 31:46.200
他用不了

31:46.200 --> 31:47.200
那这样吧

31:47.200 --> 31:48.200
我们没事

31:48.200 --> 31:49.200
这样子

31:49.200 --> 31:50.200
我们这里用user effect

31:50.200 --> 31:52.200
也是官方推荐的用法

31:52.200 --> 31:53.200
from red

31:53.200 --> 31:54.200
那么

31:54.200 --> 31:55.200
因为我们知道user effect

31:55.200 --> 31:56.200
里面的东西

31:56.200 --> 31:57.200
就附中里面的东西

31:57.200 --> 31:58.200
它只在刻铺端运行

31:58.200 --> 31:59.200
对吧

31:59.200 --> 32:00.200
它只在刻铺端运行

32:00.200 --> 32:02.200
所以说我们这里用user effect

32:08.090 --> 32:10.090
一开始运行是就行了

32:10.090 --> 32:11.090
判断一下

32:11.090 --> 32:12.090
还是判断一下

32:12.090 --> 32:13.090
noting user 有没有值

32:13.090 --> 32:14.090
有没有值

32:14.090 --> 32:15.090
如果说没有值的话

32:15.090 --> 32:16.090
没有值的话不管

32:16.090 --> 32:17.090
没有值的话

32:17.090 --> 32:19.090
我们就rotor push

32:19.090 --> 32:20.090
push

32:20.090 --> 32:21.090
noting

32:21.090 --> 32:22.090
对吧

32:22.090 --> 32:23.090
ok

32:23.090 --> 32:24.090
好 保存

32:24.090 --> 32:25.090
刷新

32:26.090 --> 32:27.090
好 你看

32:27.090 --> 32:28.090
是不是跳到灯路线了

32:28.090 --> 32:29.090
对吧

32:29.090 --> 32:30.090
我们现在肯定是过不去的

32:30.090 --> 32:31.090
肯定是过不去的

32:31.090 --> 32:32.090
点这边过不去

32:32.090 --> 32:33.090
直接访问private

32:33.090 --> 32:35.090
也过不去

32:35.090 --> 32:36.090
倒是能过去

32:36.090 --> 32:38.090
但是它返回了一个loud

32:38.090 --> 32:39.090
服务端那边

32:39.090 --> 32:40.090
它得不到这个值

32:40.090 --> 32:41.090
东西返回了一个loud

32:41.090 --> 32:42.090
返回了loud的话

32:42.090 --> 32:43.090
刻铺端那边就挑转到了

32:43.090 --> 32:44.090
这边了

32:44.090 --> 32:45.090
现在挑转的是刻铺端完成的

32:45.090 --> 32:46.090
如果说希望在服务端

32:46.090 --> 32:47.090
那么在这里

32:47.090 --> 32:49.090
用race返回个302

32:49.090 --> 32:51.090
这边是有race对象的

32:51.090 --> 32:53.090
你返回个302就完成了

32:53.090 --> 32:54.090
好 那么现在的问题是

32:54.090 --> 32:55.090
我已经登录了

32:55.090 --> 32:56.090
它凭什么还要挑转呢

32:56.090 --> 32:58.090
我这么有Cookie吗

32:58.090 --> 33:00.090
已经登录了

33:00.090 --> 33:02.090
我有Cookie吗

33:02.090 --> 33:03.090
为什么要挑转呢

33:03.090 --> 33:05.090
你没有给它传东西

33:05.090 --> 33:06.090
你没有给它传东西

33:06.090 --> 33:07.090
所以说你现在还在

33:07.090 --> 33:09.090
还在扛那个车

33:09.090 --> 33:10.090
现在是一个组件

33:10.090 --> 33:11.090
对吧

33:11.090 --> 33:12.090
是一个组件

33:12.090 --> 33:13.090
就是配级组件

33:13.090 --> 33:14.090
它需要传递一个locking

33:14.090 --> 33:15.090
有点是不是

33:15.090 --> 33:16.090
这里面刚扛那个车进去

33:16.090 --> 33:17.090
所以说我们这里

33:17.090 --> 33:19.090
导出扛那个车

33:19.090 --> 33:21.090
这边来吧

33:21.090 --> 33:22.090
import

33:22.090 --> 33:23.090
扛那个车

33:23.090 --> 33:25.090
from

33:25.090 --> 33:28.090
react redounce

33:28.090 --> 33:30.090
好 那么这边是不是要传两个

33:30.090 --> 33:32.090
一个是mapState to props

33:32.090 --> 33:33.090
然后把这个配级放进去

33:33.090 --> 33:34.090
对吧

33:34.090 --> 33:36.090
好 那么现在有个mapState to props

33:36.090 --> 33:38.090
那么这边我就直接写了

33:38.090 --> 33:39.090
还是一个函数吧

33:39.090 --> 33:42.090
还是标准格式那些

33:42.090 --> 33:44.090
方式

33:44.090 --> 33:47.090
mapState

33:47.090 --> 33:48.090
好 返回的是什么呢

33:48.090 --> 33:50.090
返回了一个locking user

33:50.090 --> 33:51.090
对吧

33:51.090 --> 33:53.090
locking user就是State里面的locking user

33:53.090 --> 33:54.090
不就这个玩意吧

33:54.090 --> 33:55.090
对吧

33:55.090 --> 33:56.090
mapState传进去

33:56.090 --> 33:57.090
好 保存

33:57.090 --> 33:59.090
好 现在我们到那个

33:59.090 --> 34:01.090
是保护的页面

34:01.090 --> 34:04.490
稍等

34:04.490 --> 34:06.490
现在还要跳过来 是吧

34:06.490 --> 34:07.490
还要跳过来

34:07.490 --> 34:08.490
说明有问题

34:08.490 --> 34:09.490
说明有问题

34:09.490 --> 34:10.490
我们这里打印一下locking user

34:10.490 --> 34:11.490
还是说我们还在检查一下

34:11.490 --> 34:13.490
检查一下这边的react

34:13.490 --> 34:15.490
react

34:15.490 --> 34:16.490
但是

34:16.490 --> 34:19.490
我们直接跳转到private

34:19.490 --> 34:20.490
现在可以访问了

34:20.490 --> 34:22.490
刚才有没有刷新

34:22.490 --> 34:23.490
没刷新

34:23.490 --> 34:24.490
那么现在可以访问了

34:24.490 --> 34:26.490
对吧 是不是可以访问了

34:26.490 --> 34:27.490
没问题吧

34:27.490 --> 34:28.490
OK

34:28.490 --> 34:29.490
但是现在还有个问题

34:29.490 --> 34:30.490
还有一些问题

34:30.490 --> 34:31.490
什么问题呢

34:31.490 --> 34:33.490
就是不要点首页

34:34.490 --> 34:35.490
点首页的时候

34:35.490 --> 34:36.490
你会看到

34:36.490 --> 34:38.490
就是我们这边

34:38.490 --> 34:40.490
首页运行完了过后

34:40.490 --> 34:41.490
因为我们没有运行

34:41.490 --> 34:42.490
是保护的页面

34:42.490 --> 34:43.490
没有运行是保护的页面

34:43.490 --> 34:44.490
就是没有运行这个

34:45.490 --> 34:46.490
是不是没有运行这个

34:46.490 --> 34:48.490
没有运行这个

34:48.490 --> 34:50.490
没有运行出发这个互外卖

34:50.490 --> 34:51.490
是不是没有运行

34:51.490 --> 34:52.490
如果

34:52.490 --> 34:53.490
因为我们跳转到首页

34:53.490 --> 34:54.490
它是没有运行的

34:54.490 --> 34:55.490
没有运行的

34:55.490 --> 34:56.490
因此

34:56.490 --> 34:57.490
就导致了

34:57.490 --> 34:58.490
这个时候

34:58.490 --> 34:59.490
我们是不是没有

34:59.490 --> 35:00.490
那个

35:00.490 --> 35:01.490
没有那个就是什么

35:01.490 --> 35:03.490
没有那个就是数据

35:03.490 --> 35:05.490
我们互外卖是没有数据的

35:05.490 --> 35:06.490
因此我们一开始访问的是首页

35:06.490 --> 35:07.490
由于服务端

35:07.490 --> 35:08.490
没有去出发那个互外卖

35:08.490 --> 35:09.490
所以说这个时候

35:09.490 --> 35:10.490
我们到遮保护页面

35:10.490 --> 35:11.490
还是到不了

35:11.490 --> 35:12.490
但是实际上

35:13.490 --> 35:14.490
在客户端这边

35:14.490 --> 35:16.490
在客户端这边

35:16.490 --> 35:18.490
我们要在这个app里边

35:18.490 --> 35:19.490
在客户端这边

35:19.490 --> 35:21.490
专门来处理处理一下

35:21.490 --> 35:23.490
就是对任何的页面

35:23.490 --> 35:25.490
客户端里面都要去触发一次

35:25.490 --> 35:26.490
触发一次这个x

35:26.490 --> 35:29.490
都要去触发一次这个x

35:29.490 --> 35:30.490
这样的意思

35:31.490 --> 35:34.490
那么这一边怎么来处理呢

35:34.490 --> 35:35.490
这边怎么来处理呢

35:35.490 --> 35:36.490
我们就可以利用一些

35:36.490 --> 35:38.490
标准你可以专门来写个组件

35:38.490 --> 35:39.490
这个组件就专门来做这个事

35:39.490 --> 35:41.490
它只是来触发

35:41.490 --> 35:43.490
触发就是权限的

35:43.490 --> 35:44.490
我是谁那个权限的

35:44.490 --> 35:45.490
专门来写个组件

35:45.490 --> 35:47.490
紧针对客户端

35:47.490 --> 35:49.490
因为像服务器那边的话

35:49.490 --> 35:50.490
服务器那边的话

35:50.490 --> 35:51.490
只针对具体的页面

35:51.490 --> 35:53.490
就哪些面是必须要

35:53.490 --> 35:54.490
登陆过后才能防蚊的

35:54.490 --> 35:55.490
只针对具体的页面

35:55.490 --> 35:56.490
那客户端那的话

35:56.490 --> 35:57.490
是每一个页面都要做的

35:57.490 --> 35:58.490
对吧

35:58.490 --> 35:59.490
那么我们这里

35:59.490 --> 36:00.490
就可以在这里

36:00.490 --> 36:01.490
新建个文件夹

36:01.490 --> 36:02.490
叫做

36:03.490 --> 36:04.490
一个组件吧

36:04.490 --> 36:05.490
叫什么呢

36:05.490 --> 36:06.490
叫

36:06.490 --> 36:07.490
呼

36:07.490 --> 36:08.490
爱吗

36:08.490 --> 36:09.490
就这么一个组件

36:12.490 --> 36:13.490
什么

36:13.490 --> 36:14.490
建一个index

36:18.490 --> 36:20.490
这个组件它其实没有什么东西

36:20.490 --> 36:21.490
没有什么东西

36:22.490 --> 36:23.490
它没有正好界面

36:23.490 --> 36:25.490
它只是来处理仓库的

36:25.490 --> 36:27.490
只是来处理仓库的

36:27.490 --> 36:28.490
明白了意思吗

36:28.490 --> 36:29.490
只是来处理仓库

36:29.490 --> 36:30.490
只是处理仓库的话

36:30.490 --> 36:31.490
那么它也就是说

36:31.490 --> 36:33.490
它里边有一个事件

36:33.490 --> 36:34.490
就是

36:37.490 --> 36:38.490
触发

36:38.490 --> 36:39.490
触发我是谁

36:39.490 --> 36:40.490
触发我是谁

36:40.490 --> 36:41.490
互

36:41.490 --> 36:42.490
爱吗

36:42.490 --> 36:43.490
触发我是谁

36:43.490 --> 36:44.490
那么我们这里

36:45.490 --> 36:46.490
你用一个

36:46.490 --> 36:47.490
Use

36:47.490 --> 36:48.490
Effect

36:49.490 --> 36:50.490
from

36:50.490 --> 36:52.490
Rat

36:52.490 --> 36:53.490
这边

36:53.490 --> 36:54.490
Use

36:54.490 --> 36:55.490
Effect

36:55.490 --> 36:56.490
这边

36:56.490 --> 36:57.490
我们只是

36:57.490 --> 36:58.490
互

36:58.490 --> 36:59.490
爱吗

36:59.490 --> 37:00.490
如果有值的话

37:00.490 --> 37:01.490
我们去调容一次

37:01.490 --> 37:02.490
互

37:02.490 --> 37:03.490
爱吗

37:03.490 --> 37:04.490
触发

37:04.490 --> 37:05.490
去调容一次就完事了

37:05.490 --> 37:06.490
对吧

37:06.490 --> 37:07.490
OK

37:07.490 --> 37:08.490
那么这里

37:08.490 --> 37:09.490
我们只是去触发这个时间

37:09.490 --> 37:10.490
那么现在我们这个

37:10.490 --> 37:11.490
组件写好了

37:11.490 --> 37:12.490
组件写好了

37:12.490 --> 37:13.490
Comp

37:13.490 --> 37:15.490
那么现在我们是不是要连接

37:15.490 --> 37:16.490
方式

37:16.490 --> 37:19.800
Map Dispatch

37:19.800 --> 37:20.800
有点糟

37:20.800 --> 37:21.800
确实有点糟

37:21.800 --> 37:22.800
这个没办法

37:22.800 --> 37:23.800
Return

37:23.800 --> 37:24.800
那么这边

37:24.800 --> 37:26.800
要传一个互MI进去

37:26.800 --> 37:27.800
这个时间里边

37:27.800 --> 37:29.800
也不需要任何参数

37:29.800 --> 37:30.800
也不需要任何参数

37:30.800 --> 37:31.800
那么我们仅仅是在

37:31.800 --> 37:32.800
客户单去触发

37:32.800 --> 37:33.800
互MI的时候

37:33.800 --> 37:34.800
我们干嘛呢

37:34.800 --> 37:35.800
我们就是用Dispatch

37:35.800 --> 37:36.800
去触发一个Action

37:36.800 --> 37:37.800
触发怎么Action呢

37:37.800 --> 37:39.800
就是触发互MI的IP

37:39.800 --> 37:40.800
Dispatch

37:40.800 --> 37:41.800
用Dispatch

37:41.800 --> 37:44.180
触发

37:44.180 --> 37:45.180
触发

37:45.180 --> 37:46.180
我们就这样

37:46.180 --> 37:47.180
这样

37:47.180 --> 37:49.180
Action

37:49.180 --> 37:50.180
触发

37:50.180 --> 37:51.180
哪里呢

37:51.180 --> 37:52.180
Store

37:52.180 --> 37:53.180
Action

37:53.180 --> 37:54.180
Lock

37:54.180 --> 37:55.180
这边有个触发

37:55.180 --> 37:57.180
触发Action

37:57.180 --> 37:59.180
哪个互MI

37:59.180 --> 38:00.180
互MI

38:00.180 --> 38:01.180
这个Action

38:01.180 --> 38:02.180
你不要传Action

38:02.180 --> 38:03.180
不传

38:03.180 --> 38:04.180
但是有默认的

38:04.180 --> 38:05.180
因为是客户单

38:05.180 --> 38:06.180
对吧

38:06.180 --> 38:07.180
然后我们导出

38:07.180 --> 38:08.180
Export

38:08.180 --> 38:09.180
Defort

38:09.180 --> 38:10.180
Connect

38:10.180 --> 38:11.180
Connect

38:11.180 --> 38:12.180
才没导入

38:12.180 --> 38:14.180
Import

38:14.180 --> 38:15.180
From

38:15.180 --> 38:16.180
React

38:16.180 --> 38:17.180
React

38:18.180 --> 38:20.180
这边是React

38:20.180 --> 38:22.180
这边是Connect

38:22.180 --> 38:24.180
导入

38:24.180 --> 38:26.180
然后第一个是Now

38:26.180 --> 38:27.180
没有数据

38:27.180 --> 38:28.180
它只有一个事件

38:28.180 --> 38:29.180
Dispatch

38:29.180 --> 38:30.180
那么这个东西

38:30.180 --> 38:31.180
专门来针对客户端的

38:31.180 --> 38:32.180
客户端每一次运行

38:32.180 --> 38:33.180
就只要你使用那个组件

38:33.180 --> 38:34.180
这个组件一开始

38:34.180 --> 38:35.180
它就会去触发一次这个东西

38:35.180 --> 38:37.180
MapDispatch

38:37.180 --> 38:38.180
然后Connect

38:38.180 --> 38:39.180
Comp

38:39.180 --> 38:40.180
是不是去触发它

38:40.180 --> 38:41.180
对不对

38:41.180 --> 38:42.180
是不是触发它

38:42.180 --> 38:43.180
没问题吧

38:43.180 --> 38:44.180
好

38:44.180 --> 38:45.180
然后这个Connect

38:45.180 --> 38:47.180
我们就把它

38:47.180 --> 38:48.180
然后这个组件

38:48.180 --> 38:49.180
就把它放到哪里

38:49.180 --> 38:50.180
就放到App里边

38:50.180 --> 38:51.180
把它放到App里边

38:51.180 --> 38:53.180
它也不产生任何的

38:53.180 --> 38:54.180
任何的就是输出

38:54.180 --> 38:55.180
互MI

38:55.180 --> 38:56.180
I

38:56.180 --> 38:57.180
From

38:58.180 --> 38:59.180
返回上进目录

38:59.180 --> 39:00.180
Component

39:00.180 --> 39:01.180
互MI

39:01.180 --> 39:02.180
好

39:02.180 --> 39:03.180
这个组件随便放任何一个位置

39:03.180 --> 39:04.180
随便放任何一个位置

39:04.180 --> 39:06.180
反正它也没有任何输出的

39:06.180 --> 39:08.180
好 接下来我们来看一下

39:08.180 --> 39:09.180
我们访问

39:09.180 --> 39:11.180
说互MI is not function

39:11.180 --> 39:13.180
我看一下

39:13.180 --> 39:14.180
它说

39:14.180 --> 39:15.180
它说我们的组件里面

39:15.180 --> 39:17.180
在组件里面出了问题

39:17.180 --> 39:18.180
我们的组件里面出了问题

39:18.180 --> 39:22.180
它说互MI is not function

39:22.180 --> 39:23.180
MapDispatch

39:23.180 --> 39:25.180
Comp

39:25.180 --> 39:26.180
互MI它怎么不是一个方式呢

39:26.180 --> 39:27.180
我们输出一下

39:27.180 --> 39:30.180
互MI

39:30.180 --> 39:36.050
它怎么就不是一个方式呢

39:36.050 --> 39:37.050
哦 这个要解构

39:37.050 --> 39:39.050
要解构

39:39.050 --> 39:41.620
好

39:41.620 --> 39:42.620
OK

39:42.620 --> 39:43.620
现在我们来看一下

39:43.620 --> 39:45.620
先把一个输出去掉吧

39:45.620 --> 39:46.620
输出去掉了

39:46.620 --> 39:48.620
再来看一下

39:48.620 --> 39:49.620
好 现在我们看一下

39:49.620 --> 39:50.620
瑞大格式里面

39:50.620 --> 39:51.620
它是不是一开始就出发了

39:51.620 --> 39:52.620
City Login user

39:52.620 --> 39:53.620
那么现在我们来看一下

39:53.620 --> 39:55.620
我们的状态是不是有优质的

39:55.620 --> 39:57.620
那么现在我们去搜保护的页面

39:57.620 --> 39:59.620
是不是可以了

39:59.620 --> 40:00.620
是不是可以了

40:00.620 --> 40:01.620
那么现在是登录状态

40:01.620 --> 40:02.620
对吧

40:02.620 --> 40:04.620
因为它是登录状态

40:04.620 --> 40:05.620
所以说就没问题了

40:05.620 --> 40:06.620
对不对

40:06.620 --> 40:07.620
没问题吧

40:07.620 --> 40:08.620
OK

40:08.620 --> 40:10.620
那么现在我们看一下

40:10.620 --> 40:12.620
一开始运行首页

40:12.620 --> 40:13.620
对吧 运行首页

40:13.620 --> 40:14.620
然后再去搜保护的页面

40:14.620 --> 40:15.620
那些都没问题了

40:15.620 --> 40:16.620
对吧

40:16.620 --> 40:17.620
直接运行搜保护的页面

40:17.620 --> 40:18.620
也没问题

40:18.620 --> 40:19.620
对吧

40:19.620 --> 40:20.620
登录

40:20.620 --> 40:21.620
那么接着我们来继续往上

40:21.620 --> 40:22.620
比方说我们这里呢

40:22.620 --> 40:24.620
这里的这个小按钮

40:24.620 --> 40:25.620
我们放后边去

40:25.620 --> 40:26.620
放后边去

40:26.620 --> 40:27.620
如果说你已经登录了

40:27.620 --> 40:29.620
那么我就显示助销

40:29.620 --> 40:30.620
如果说你没有登录的话

40:30.620 --> 40:32.620
我就显示一个登录按钮

40:32.620 --> 40:33.620
对吧

40:33.620 --> 40:34.620
好 来吧

40:34.620 --> 40:36.620
我们在header里边

40:36.620 --> 40:38.620
看着这些东西都可以做的

40:38.620 --> 40:40.620
这里header

40:40.620 --> 40:41.620
那么这里边

40:41.620 --> 40:43.620
你肯定要给我传一个属性进来

40:43.620 --> 40:44.620
传什么属性呢

40:44.620 --> 40:45.620
这也不要了

40:45.620 --> 40:47.620
不要这个东西了

40:47.620 --> 40:49.620
还是要

40:49.620 --> 40:51.620
以后我们还要用的

40:51.620 --> 40:52.620
传什么属性呢

40:52.620 --> 40:53.620
就是locking user

40:53.620 --> 40:55.620
locking user

40:55.620 --> 40:56.620
要给我传进来

40:56.620 --> 40:58.620
有这么一个逐渐

40:58.620 --> 40:59.620
locking user里边

40:59.620 --> 41:00.620
我们这里呢

41:00.620 --> 41:02.620
到底要显示登录

41:02.620 --> 41:04.620
还是要显示什么玩意儿

41:04.620 --> 41:05.620
我们是不是要判断

41:05.620 --> 41:06.620
对吧

41:06.620 --> 41:07.620
到底要显示啥

41:07.620 --> 41:09.620
如果说locking user有值

41:09.620 --> 41:10.620
有值吗

41:10.620 --> 41:11.620
如果说他有值的话

41:11.620 --> 41:12.620
那么我就显示什么呢

41:12.620 --> 41:15.620
我就显示的是

41:15.620 --> 41:17.620
显示的是

41:17.620 --> 41:18.620
就不是一个超链接了

41:18.620 --> 41:19.620
就不是个超链接了

41:19.620 --> 41:20.620
然后呢没有值的话

41:20.620 --> 41:22.620
就显示一个登录

41:22.620 --> 41:23.620
没有值的话就显示个登录

41:23.620 --> 41:24.620
如果说有值

41:24.620 --> 41:25.620
那么我就显示

41:25.620 --> 41:26.620
显示什么呢

41:26.620 --> 41:28.620
显示一个使命元素

41:28.620 --> 41:29.620
使命元素

41:29.620 --> 41:30.620
我们这里显示一个

41:30.620 --> 41:32.620
当前登录的用户

41:32.620 --> 41:36.760
当前登录的用户

41:36.760 --> 41:38.760
locking user

41:38.760 --> 41:39.760
第二什么呢

41:41.760 --> 41:42.760
看一下这边

41:42.760 --> 41:46.580
我看一下

41:46.580 --> 41:47.580
从仓库里边的数据

41:49.580 --> 41:51.580
name显示个name

41:51.580 --> 41:52.580
没有意思吧

41:52.580 --> 41:53.580
我就显示这个

41:53.580 --> 41:54.580
如果说你

41:54.580 --> 41:56.580
然后后面加个按钮吧

41:56.580 --> 41:57.580
加个按钮

41:57.580 --> 41:58.580
助销

41:58.580 --> 41:59.580
助销

42:00.580 --> 42:01.580
那么以后再写

42:01.580 --> 42:02.580
好

42:02.580 --> 42:03.580
那么这里呢

42:03.580 --> 42:04.580
如果说你没有登录的话

42:04.580 --> 42:05.580
我就显示一个登录

42:05.580 --> 42:06.580
显示一个登录

42:06.580 --> 42:08.580
那么下面就把登录去了

42:08.580 --> 42:09.580
对吧

42:09.580 --> 42:10.580
我们根据情况

42:10.580 --> 42:11.580
来进行处理

42:11.580 --> 42:12.580
对不对

42:12.580 --> 42:13.580
ok

42:13.580 --> 42:14.580
那么现在呢

42:15.580 --> 42:16.580
怎么了

42:17.580 --> 42:18.580
没有导出

42:18.580 --> 42:19.580
没有导出对吧

42:19.580 --> 42:20.580
那么我们这里呢

42:20.580 --> 42:21.580
肯定要连接

42:25.580 --> 42:26.580
那么跟之前的写法

42:26.580 --> 42:27.580
就是一样的

42:28.580 --> 42:29.580
连接

42:29.580 --> 42:30.580
来吧

42:30.580 --> 42:31.580
我们是不是又要写一个

42:31.580 --> 42:32.580
map state

42:32.580 --> 42:33.580
等于什么呢

42:33.580 --> 42:34.580
state

42:35.580 --> 42:36.580
这个喊数

42:36.580 --> 42:37.580
返回

42:38.580 --> 42:39.580
locking user

42:39.580 --> 42:40.580
来自于哪呢

42:40.580 --> 42:41.580
来自于state

42:41.580 --> 42:42.580
对吧

42:42.580 --> 42:43.580
是一样的

42:43.580 --> 42:44.580
方形map

42:44.580 --> 42:45.580
dispatch

42:45.580 --> 42:46.580
以后还要助销嘛

42:46.580 --> 42:47.580
对吧

42:47.580 --> 42:48.580
dispatch

42:48.580 --> 42:49.580
dispatch

42:50.580 --> 42:51.580
好

42:51.580 --> 42:52.580
返回的是什么呢

42:52.580 --> 42:53.580
我们再加一个

42:53.580 --> 42:54.580
加个事件

42:54.580 --> 42:55.580
就是locking out

42:55.580 --> 42:56.580
out

42:56.580 --> 42:57.580
那么这里呢

42:57.580 --> 42:58.580
我们就返回一个

42:58.580 --> 43:00.960
locking out

43:00.960 --> 43:01.960
locking out

43:01.960 --> 43:02.960
然后就dispatch

43:03.960 --> 43:04.960
这都是在

43:04.960 --> 43:06.960
这事件肯定在客户端运行

43:06.960 --> 43:07.960
然后dispatch

43:07.960 --> 43:08.960
什么呢

43:08.960 --> 43:09.960
我们呢

43:09.960 --> 43:10.960
导入了一个action

43:11.960 --> 43:12.960
from

43:13.960 --> 43:14.960
调整鞋杠

43:14.960 --> 43:15.960
调整鞋杠

43:15.960 --> 43:16.960
store

43:16.960 --> 43:17.960
action

43:17.960 --> 43:18.960
locking

43:18.960 --> 43:19.960
好

43:19.960 --> 43:20.960
这边

43:20.960 --> 43:21.960
就是locking out

43:21.960 --> 43:22.960
就出发拉就行了

43:22.960 --> 43:23.960
dispatch

43:23.960 --> 43:24.960
locking out

43:24.960 --> 43:25.960
就有同名了

43:25.960 --> 43:26.960
对吧

43:26.960 --> 43:27.960
倒是没有同名

43:27.960 --> 43:28.960
这是个喊数属性而已

43:28.960 --> 43:29.960
这是个

43:29.960 --> 43:30.960
对象属性而已

43:30.960 --> 43:31.960
然后default

43:31.960 --> 43:32.960
导出

43:32.960 --> 43:33.960
connect

43:33.960 --> 43:34.960
map state

43:35.960 --> 43:36.960
dispatch

43:36.960 --> 43:37.960
com

43:37.960 --> 43:38.960
header

43:41.400 --> 43:42.400
header

43:42.400 --> 43:43.400
ok

43:43.400 --> 43:44.400
好

43:44.400 --> 43:45.400
那么这边呢

43:45.400 --> 43:46.400
我们就干脆把个事件写上吧

43:46.400 --> 43:47.400
就把它写上

43:48.400 --> 43:49.400
在哪

43:49.400 --> 43:50.400
在这

43:50.400 --> 43:51.400
助销点击的时候

43:51.400 --> 43:52.400
unclick

43:53.400 --> 43:54.400
点击的时候干嘛呢

43:54.400 --> 43:56.400
我们就出发这个时间

43:56.400 --> 43:57.400
就是locking out

43:57.400 --> 43:58.400
有没有指

43:58.400 --> 43:59.400
如果说有指的话

43:59.400 --> 44:00.400
我们就调用这个locking out

44:00.400 --> 44:01.400
去出发这个时间

44:01.400 --> 44:02.400
然后呢

44:02.400 --> 44:03.400
我们就用rotor push

44:03.400 --> 44:04.400
到登录页

44:04.400 --> 44:05.400
locking

44:05.400 --> 44:06.400
对吧

44:06.400 --> 44:07.400
ok

44:07.400 --> 44:08.400
那么现在就写好了

44:09.400 --> 44:10.400
接下来你看

44:10.400 --> 44:11.400
我们目前是管理员

44:11.400 --> 44:12.400
对吧

44:12.400 --> 44:13.400
当然这些东西都在客户端旋的

44:13.400 --> 44:14.400
都是在客户端完成的

44:14.400 --> 44:15.400
看没

44:15.400 --> 44:16.400
都是在客户端完成的

44:16.400 --> 44:18.400
因为我一开始刷新页面

44:18.400 --> 44:19.400
是这样子

44:19.400 --> 44:20.400
我一开始刷新页面

44:20.400 --> 44:21.400
因为我现在是在登录页

44:21.400 --> 44:23.400
不要那么带手页吧

44:23.400 --> 44:24.400
也是也是一样的

44:24.400 --> 44:25.400
我们刷新的

44:25.400 --> 44:26.400
你看先变成登录

44:26.400 --> 44:27.400
再变成管理员

44:27.400 --> 44:28.400
对吧

44:28.400 --> 44:29.400
对不对

44:29.400 --> 44:30.400
是不是这么个逻辑

44:30.400 --> 44:31.400
先变成登录

44:31.400 --> 44:32.400
再变成一个管理员

44:32.400 --> 44:33.400
那是因为是这样子

44:33.400 --> 44:34.400
因为我们目前

44:34.400 --> 44:37.400
是在首页

44:37.400 --> 44:38.400
首页的话

44:38.400 --> 44:39.400
服务端是没有去触发

44:39.400 --> 44:40.400
那个仓库的

44:40.400 --> 44:41.400
是没有去触发

44:41.400 --> 44:42.400
我们的仓库

44:42.400 --> 44:43.400
因此仓库里边

44:43.400 --> 44:44.400
locking new is now

44:44.400 --> 44:45.400
到了客户端这边

44:45.400 --> 44:46.400
因为我们刚才的

44:46.400 --> 44:47.400
主见存在

44:47.400 --> 44:48.400
到了客户端这边

44:48.400 --> 44:49.400
我们这个主见的存在

44:49.400 --> 44:50.400
说客户端那边

44:50.400 --> 44:51.400
去触发了仓库

44:51.400 --> 44:52.400
这客户端触发的

44:52.400 --> 44:53.400
然后再把它变成管理员

44:53.400 --> 44:54.400
仓库一触发

44:54.400 --> 44:55.400
是不是这个东西就变了

44:55.400 --> 44:56.400
对吧

44:56.400 --> 44:57.400
这就是你们

44:57.400 --> 44:58.400
平时上网的时候

44:58.400 --> 44:59.400
看到很多网站

44:59.400 --> 45:00.400
你刚进去的时候

45:00.400 --> 45:01.400
那个地方显示登录

45:02.400 --> 45:03.400
你之前登录过的东西

45:03.400 --> 45:04.400
就显示出来了

45:04.400 --> 45:06.400
或者有些页面是

45:06.400 --> 45:07.400
一进去的时候

45:07.400 --> 45:08.400
这个区域是根本不显示的

45:08.400 --> 45:09.400
那它是怎么做的呢

45:09.400 --> 45:11.400
那么它可以在仓库里边

45:11.400 --> 45:12.400
加个状态

45:12.400 --> 45:14.400
到底有没有判断过

45:14.400 --> 45:15.400
如果说没有判断过的话

45:15.400 --> 45:17.400
那个地方先不显示

45:17.400 --> 45:18.400
等你判断过了过后

45:18.400 --> 45:19.400
然后我再把它显示出来

45:19.400 --> 45:20.400
到底该登录还是

45:20.400 --> 45:21.400
该是管理员

45:21.400 --> 45:22.400
大家有兴趣的话

45:22.400 --> 45:23.400
自己去做

45:23.400 --> 45:24.400
那么现在我们就是管理员了

45:24.400 --> 45:25.400
对吧

45:25.400 --> 45:27.400
然后我们现在点注销

45:27.400 --> 45:28.400
你看这仓库的数据

45:28.400 --> 45:29.400
是不是变了

45:29.400 --> 45:30.400
注销变成烂了

45:30.400 --> 45:32.400
然后我们再刷新一次

45:32.400 --> 45:33.400
因为它已经注销了

45:33.400 --> 45:34.400
Cookie没有了

45:34.400 --> 45:35.400
所以说现在是烂了

45:35.400 --> 45:36.400
那么现在我们去

45:36.400 --> 45:37.400
受保护的一面是不是去不了了

45:37.400 --> 45:38.400
对吧

45:38.400 --> 45:39.400
仓库没数据

45:39.400 --> 45:40.400
所以就去不了了

45:40.400 --> 45:41.400
OK

45:41.400 --> 45:42.400
那么现在我们登录一下

45:42.400 --> 45:43.400
111

45:43.400 --> 45:44.400
1234

45:44.400 --> 45:45.400
5678

45:45.400 --> 45:46.400
123

45:46.400 --> 45:47.400
123

45:47.400 --> 45:48.400
再去保护的一面

45:48.400 --> 45:49.400
是不是可以访问的

45:49.400 --> 45:50.400
这就是整个的登录流程

45:50.400 --> 45:51.400
包括服务端现在的

45:51.400 --> 45:53.400
整个登录流程

45:53.400 --> 45:54.400
当然

45:54.400 --> 45:56.400
很多同学觉得登录简单

45:56.400 --> 45:57.400
你觉得简单吗

45:57.400 --> 45:58.400
我觉得登录简单都简单

45:58.400 --> 45:59.400
登录其实

45:59.400 --> 46:00.400
特别是对初学者

46:00.400 --> 46:02.400
应该说是最复杂的

46:02.400 --> 46:03.400
而且你

46:03.400 --> 46:04.400
后面越学越多

46:04.400 --> 46:05.400
你会发现登录

46:05.400 --> 46:06.400
还有很多很多事情要做

46:06.400 --> 46:08.400
登录是绝对不简单的

46:08.400 --> 46:09.400
你千万不要

46:09.400 --> 46:10.400
出现幻觉了

46:10.400 --> 46:11.400
登录

46:11.400 --> 46:12.400
如果说你觉得

46:12.400 --> 46:13.400
云是非常非常正常的

46:13.400 --> 46:14.400
登录绝对不简单

46:14.400 --> 46:15.400
它绝对不至就是

46:15.400 --> 46:16.400
不是说一个

46:16.400 --> 46:18.400
框框在那里

46:18.400 --> 46:19.400
登录就完事了

46:19.400 --> 46:20.400
登录里边

46:20.400 --> 46:21.400
它包含很多东西

46:21.400 --> 46:22.400
包含全线验证

46:22.400 --> 46:23.400
一些受保护的一面

46:23.400 --> 46:24.400
你怎么来判断

46:24.400 --> 46:25.400
有没有登录

46:25.400 --> 46:26.400
之前有没有登录过

46:26.400 --> 46:27.400
那么怎么来管理

46:27.400 --> 46:28.400
这个状态

46:28.400 --> 46:30.400
以前的那些受保护的一面

46:30.400 --> 46:31.400
怎么来根据不同的

46:31.400 --> 46:32.400
登录状态来显示

46:32.400 --> 46:34.400
一大堆问题

46:34.400 --> 46:36.400
那么这就是登录

46:36.400 --> 46:37.400
因此咱们

46:37.400 --> 46:38.400
那个时候的GS

46:38.400 --> 46:39.400
就学习完了

46:39.400 --> 46:40.400
基本上

46:40.400 --> 46:41.400
它有的功能

46:41.400 --> 46:42.400
我们都把解释过了

46:42.400 --> 46:43.400
其实解释

46:43.400 --> 46:44.400
里边的API功能的话

46:44.400 --> 46:46.400
倒是用不了这么多时间

46:46.400 --> 46:47.400
只是我要把这些功能

46:47.400 --> 46:48.400
做出来

46:48.400 --> 46:49.400
给它做出一个效果

46:49.400 --> 46:50.400
给大家看一下

46:51.400 --> 46:52.400
讲东西是讲不完的

46:52.400 --> 46:53.400
永远讲不完的

46:53.400 --> 46:54.400
那么之后

46:54.400 --> 46:55.400
那个时候的GS

46:55.400 --> 46:56.400
还会更新

46:56.400 --> 46:57.400
你看一些技术

46:57.400 --> 46:58.400
像吴密歇斯

46:58.400 --> 47:00.400
我之前讲的是2.0版本

47:00.400 --> 47:01.400
很快又更新了

47:01.400 --> 47:02.400
我后边肯定

47:02.400 --> 47:03.400
还要找时间

47:03.400 --> 47:05.400
再去录一些新版本

47:05.400 --> 47:06.400
但是这个

47:06.400 --> 47:07.400
可能要排得比较厚一点

47:07.400 --> 47:08.400
因为现在

47:08.400 --> 47:09.400
还有很多重要的课程

47:09.400 --> 47:11.400
我还要把它更新了

47:11.400 --> 47:13.400
还要讲补上

47:13.400 --> 47:14.400
后边

47:14.400 --> 47:15.400
不论是出现

47:15.400 --> 47:16.400
多少次新版本

47:16.400 --> 47:17.400
我希望大家

47:17.400 --> 47:18.400
能够尽量的

47:18.400 --> 47:19.400
多去看文档

47:19.400 --> 47:21.400
因为你早晚

47:21.400 --> 47:23.400
要养成看文档的习惯

47:23.400 --> 47:24.400
文档里边还能得到

47:24.400 --> 47:26.400
最新的一手资料

47:26.400 --> 47:27.400
比如说之前有同学

47:27.400 --> 47:28.400
就在问我

47:28.400 --> 47:29.400
吴密歇斯现在

47:29.400 --> 47:30.400
为什么有些地方

47:30.400 --> 47:31.400
你写的没问题

47:31.400 --> 47:32.400
你运行的出来没问题

47:32.400 --> 47:33.400
但为什么我写出来

47:33.400 --> 47:34.400
就爆错了

47:34.400 --> 47:35.400
其实他一看文档

47:35.400 --> 47:36.400
就明白了

47:36.400 --> 47:37.400
因为他版本更新了

47:37.400 --> 47:38.400
他有些接口不愿的

47:38.400 --> 47:40.400
那些也不复杂

47:40.400 --> 47:41.400
有些文档是中文的

47:41.400 --> 47:42.400
有中文的

47:42.400 --> 47:43.400
有些文档是英文的

47:43.400 --> 47:44.400
其实绝大部分文档

47:44.400 --> 47:45.400
都有对应中文的

47:45.400 --> 47:47.400
只不过不是官方中文

47:47.400 --> 47:48.400
是民间中文

47:48.400 --> 47:50.400
是民间中文版

47:50.400 --> 47:51.400
民间中文版

47:51.400 --> 47:52.400
他也能看

47:52.400 --> 47:53.400
不过

47:53.400 --> 47:54.400
他可能稍微稚厚一点

47:54.400 --> 47:55.400
比方说

47:55.400 --> 47:56.400
我介绍的民间中文

47:56.400 --> 47:58.400
他就是之前的版本

47:58.400 --> 47:59.400
不是新版本的

47:59.400 --> 48:01.400
而且他少了一些东西

48:01.400 --> 48:02.400
因此我建议大家

48:02.400 --> 48:04.400
能够看英文版

48:04.400 --> 48:06.400
就尽量的看英文版

48:06.400 --> 48:07.400
怎么说呢

48:07.400 --> 48:09.400
咱们国家还没有那么强大

48:09.400 --> 48:11.400
特别是在咱们技术领域

48:11.400 --> 48:13.400
还没有赶上美国

48:13.400 --> 48:15.400
虽然差距在不断地说小

48:15.400 --> 48:16.400
但是还没有赶上

48:16.400 --> 48:17.400
我倒是希望有一天

48:17.400 --> 48:18.400
美国人过去中文

48:18.400 --> 48:20.400
看我们的中文文的

48:20.400 --> 48:22.400
那是最好的

48:22.400 --> 48:24.400
但是现在还做不到

48:24.400 --> 48:25.400
第一次

48:25.400 --> 48:27.400
如果说你要得到最前面的技术

48:27.400 --> 48:30.400
那么你肯定要去看英文文档

48:30.400 --> 48:32.400
就是我之前英文也很差的

48:32.400 --> 48:34.400
不过

48:34.400 --> 48:36.400
有的时候没办法

48:36.400 --> 48:37.400
比方说我给大家举个例子

48:37.400 --> 48:38.400
比方说

48:38.400 --> 48:39.400
我就像张正门客

48:39.400 --> 48:40.400
正门客出了新版本了

48:40.400 --> 48:41.400
他没有中文

48:41.400 --> 48:42.400
那我怎么办

48:42.400 --> 48:43.400
你告诉我怎么办

48:43.400 --> 48:44.400
我只能去看英文

48:44.400 --> 48:46.400
这个时候是逼出来了

48:46.400 --> 48:48.400
你现在不逼自己一下

48:48.400 --> 48:49.400
你后来公司里边

48:49.400 --> 48:50.400
公司也会逼你

48:50.400 --> 48:52.400
多多不说了

48:52.400 --> 48:53.400
这些东西

48:53.400 --> 48:54.400
可以拿到直播课里面

48:54.400 --> 48:56.400
去给大家聊吧

48:56.400 --> 48:59.400
那么这一张解就结束了

48:59.400 --> 49:01.400
下面还有一节课

49:01.400 --> 49:02.400
我打算用一节课

49:02.400 --> 49:04.400
来给大家讲一讲Privates

49:04.400 --> 49:06.400
因为我们目前讲的都是SSR

49:06.400 --> 49:07.400
对吧

49:07.400 --> 49:09.400
那么其实来处理SEO的问题

49:09.400 --> 49:10.400
还有一种方案

49:10.400 --> 49:11.400
叫做Privates

49:11.400 --> 49:13.400
咱们后边拿一节课来讲一讲

49:13.400 --> 49:14.400
给大家知道

49:14.400 --> 49:15.400
有这么一个东西就行了

49:15.400 --> 49:16.400
因为他

49:16.400 --> 49:18.400
要真正把用起来的话

49:18.400 --> 49:19.400
还有一点麻烦

49:19.400 --> 49:20.400
因为他其实不麻烦

49:20.400 --> 49:22.400
主要是还少一些知识

49:22.400 --> 49:23.400
就是服务器部署的知识

49:23.400 --> 49:25.400
我不知道大家学过没有

49:25.400 --> 49:26.400
所以这一块

49:26.400 --> 49:28.400
我到时候给他补充进来吧

49:28.400 --> 49:29.400
因为如果说你有服务器

49:29.400 --> 49:30.400
部署的知识的话

49:30.400 --> 49:31.400
那一块也很简单的

49:31.400 --> 49:32.400
OK

49:32.400 --> 49:33.400
那么这一张

49:33.400 --> 49:34.400
咱们就到这里了

49:34.400 --> 49:35.400
拜拜

