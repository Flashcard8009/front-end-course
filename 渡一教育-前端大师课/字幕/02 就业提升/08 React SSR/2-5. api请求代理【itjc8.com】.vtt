WEBVTT

00:00.690 --> 00:03.690
接下来我们来讲这个SSG

00:03.690 --> 00:05.450
就是Server Static Generator

00:05.450 --> 00:07.690
经济台华的两种方式一动是纯净耐化

00:07.690 --> 00:09.290
咱们上节课已经看到了

00:09.290 --> 00:12.090
一个空心的圆圈表示纯净耐化

00:12.090 --> 00:13.890
那么这个SSG是什么意思呢

00:13.890 --> 00:15.790
它要分成两节课来讲

00:15.790 --> 00:16.990
是一个非常重要的概念

00:16.990 --> 00:20.290
这是在这个新版本里面做的最大的改动

00:20.290 --> 00:21.690
就是这个东西了

00:21.690 --> 00:23.290
那么我们要分成两节课来讲

00:23.290 --> 00:25.090
这里可能先做准备

00:25.090 --> 00:27.890
举个例子 比方说我们的电影列表页

00:27.890 --> 00:30.090
那么这个地方要显示一个电影列表

00:30.690 --> 00:32.990
那么我们这里肯定要去设计到请求服务器

00:32.990 --> 00:33.890
因为无论如何

00:35.190 --> 00:36.690
我们的客户端也好

00:36.690 --> 00:37.890
还是我们的服务器也好

00:37.890 --> 00:39.390
服务器只是个代理

00:39.390 --> 00:41.590
我们还有一个真正的数据服务器

00:41.590 --> 00:43.390
我们要从真正的数据服务器

00:43.390 --> 00:44.990
去拿这个数据

00:44.990 --> 00:47.890
所以说我们这里先要搞定请求

00:47.890 --> 00:50.490
来吧 我们来搞定请求

00:50.490 --> 00:55.090
这边我们把之前的Server Static Generator

00:55.090 --> 00:57.390
把Server Static Generator的两个文件放过来

00:57.490 --> 00:59.390
我们这里的新建设文件夹

00:59.390 --> 01:02.980
Server Static Generator

01:02.980 --> 01:05.380
那么把Server Static Generator两个文件夹拿过来

01:05.380 --> 01:07.280
两个文件拿过来

01:07.280 --> 01:10.180
先搞定这个请求再说

01:10.180 --> 01:12.580
这边我们放到这

01:12.580 --> 01:13.980
不变 代码都不变

01:13.980 --> 01:15.580
所以我们以前的

01:15.580 --> 01:18.380
浏览器服务器端要加上Bass UIL

01:18.380 --> 01:20.480
浏览器就什么都不加

01:20.480 --> 01:21.680
这么都不加

01:21.680 --> 01:23.380
那么我们Movie Request

01:23.380 --> 01:24.080
getMovies

01:24.080 --> 01:25.580
那么这个是我们的一个方法

01:25.580 --> 01:27.580
客户端可以用 服务端也可以用

01:27.580 --> 01:28.780
因为我们用的是X-S

01:28.780 --> 01:31.080
我这里肯定要安装一下X-S

01:31.080 --> 01:33.680
安装X-S

01:33.680 --> 01:34.680
好 行了

01:34.680 --> 01:36.880
那咱们把这个东西准备好了之后

01:36.880 --> 01:39.080
首先服务端要能够请求

01:39.080 --> 01:41.680
然后客户端也要能够请求

01:41.680 --> 01:42.780
咱们来看一下

01:42.780 --> 01:44.880
服务端 首先服务端能不能请求

01:44.880 --> 01:46.680
我们先不说什么静态话

01:46.680 --> 01:47.880
这些东西我们下期可以来说

01:47.880 --> 01:49.280
我们先把它准备一下

01:49.280 --> 01:50.480
服务端能不能请求呢

01:50.480 --> 01:52.080
我们再到随便倒一个页面

01:52.080 --> 01:53.180
就比较Movies页面

01:53.180 --> 01:55.380
那么我们来请求一下 试一下

01:55.380 --> 01:57.080
Import 叫什么呢

01:59.080 --> 02:02.980
Floor 第二段鞋杠

02:02.980 --> 02:05.880
Surface is Movies Service

02:05.880 --> 02:07.680
那么这里要GetMovies

02:07.680 --> 02:08.580
那么我们来看一下

02:08.580 --> 02:10.380
服端能不能请求呢

02:10.380 --> 02:11.180
GetMovies

02:11.180 --> 02:15.080
那么我们配级Limit 默认嘛Z

02:15.080 --> 02:16.880
看一下能不能拿到请求结果

02:16.880 --> 02:18.380
输出这个Risp

02:18.380 --> 02:19.580
那么这个代码是服务端

02:19.580 --> 02:20.780
客户端都要运行的 对吧

02:20.780 --> 02:21.380
都要运行的

02:21.380 --> 02:22.780
我们来看一下服务端有没有输出

02:22.780 --> 02:25.180
客户端有没有输出

02:26.180 --> 02:27.180
来吧 看一下

02:27.180 --> 02:31.000
运行出来

02:31.000 --> 02:33.000
然后我们在客户端去请求它

02:33.000 --> 02:37.000
请求它然后导致服务器去渲染那个组件

02:37.000 --> 02:39.000
那么看一下服务器现在有没有运行

02:39.000 --> 02:41.000
好像又卡住了

02:41.000 --> 02:43.000
这里刷新

02:43.000 --> 02:45.000
Nokohors刷新

02:45.000 --> 02:47.000
这里好像又卡住了

02:51.400 --> 02:58.500
还在编译

02:58.500 --> 03:01.500
那么现在我们来看一下电影业

03:01.500 --> 03:03.500
主要是看电影业

03:03.500 --> 03:04.500
接下来我们来看电影

03:04.500 --> 03:06.500
这里点击

03:06.500 --> 03:09.520
到电影业

03:09.520 --> 03:11.520
到电影业过后来我们来看一下

03:11.520 --> 03:13.520
客户端这边呢

03:13.520 --> 03:16.520
刷新

03:16.520 --> 03:18.520
那么现在我们可以看到

03:18.520 --> 03:19.520
它告诉你

03:19.520 --> 03:21.520
客户端这边请求是有问题的

03:21.520 --> 03:23.520
它得到一个404

03:23.520 --> 03:24.520
好 咱们来看服务器这边

03:24.520 --> 03:26.520
服务器现在是不是正常得到了

03:26.520 --> 03:27.520
因为服务器这边是没有问题的

03:27.520 --> 03:28.520
对吧 能够正常输出

03:28.520 --> 03:30.520
当然它肯定不参与渲染

03:30.520 --> 03:31.520
没法确认的渲染

03:31.520 --> 03:33.520
因为当我们这个人运行的时候

03:33.520 --> 03:35.520
它早就渲染完成了

03:35.520 --> 03:37.520
但是客户端这边

03:37.520 --> 03:38.520
但是服务端是能请求的

03:38.520 --> 03:39.520
对吧 我先把客户端

03:39.520 --> 03:40.520
不能请求的一个问题

03:40.520 --> 03:41.520
先解决了

03:41.520 --> 03:43.520
客户端甚至是没法请求的

03:43.520 --> 03:44.520
那怎么回事呢 是这样子

03:44.520 --> 03:46.520
因为客户端那边请求的是吗

03:46.520 --> 03:47.520
Nokohors 3000

03:47.520 --> 03:49.520
请求的是本地服务器

03:49.520 --> 03:51.520
对吧 而不是我们那个地址

03:51.520 --> 03:52.520
因为我们请求我们的地址

03:52.520 --> 03:53.520
可能受到话语

03:53.520 --> 03:54.520
所以说我们这里呢

03:54.520 --> 03:56.520
需要把我们的前端服务器

03:56.520 --> 03:57.520
无论使用哪种模式

03:57.520 --> 03:58.520
它都要有个代理功能

03:58.520 --> 03:59.520
那么这个地方

03:59.520 --> 04:00.520
怎么来代理的问题是

04:00.520 --> 04:01.520
它怎么来代理呢

04:01.520 --> 04:02.520
你不能说

04:02.520 --> 04:04.520
你用什么Dev身份的开发服务器

04:04.520 --> 04:05.520
对吧

04:05.520 --> 04:06.520
那你生产环境不管了

04:06.520 --> 04:07.520
对吧 它怎么来代理呢

04:07.520 --> 04:08.520
因为这个服务器

04:08.520 --> 04:09.520
不是我们自己写的

04:09.520 --> 04:11.520
是他跟我们做的

04:11.520 --> 04:12.520
所以说呢

04:12.520 --> 04:13.520
这个代理是一个问题

04:13.520 --> 04:14.520
那么我这里说一下

04:14.520 --> 04:17.520
这有史新版本跟旧版本的不同

04:17.520 --> 04:18.520
旧版本的话

04:18.520 --> 04:19.520
那么这个代理呢

04:19.520 --> 04:20.520
不好意思

04:20.520 --> 04:22.520
你就不能用它那个服务器了

04:22.520 --> 04:23.520
你再自己写服务器

04:23.520 --> 04:24.520
手动写服务器

04:24.520 --> 04:25.520
以后我给大家说一下

04:25.520 --> 04:27.520
怎么去手动写服务器

04:27.520 --> 04:28.520
也并不复杂

04:28.520 --> 04:29.520
但是呢

04:29.520 --> 04:31.520
会丢失一些功能

04:31.520 --> 04:32.520
但是呢

04:32.520 --> 04:33.520
不建议大家这样做了

04:33.520 --> 04:34.520
因为现在呢

04:34.520 --> 04:35.520
除了新版本过后了

04:35.520 --> 04:36.520
它解决这个问题

04:36.520 --> 04:37.520
怎么解决

04:37.520 --> 04:38.520
怎么来解决的

04:38.520 --> 04:39.520
它是这样子

04:39.520 --> 04:40.520
如果说你的项目

04:40.520 --> 04:41.520
跟目录下面有一个

04:41.520 --> 04:42.520
这么一个文件夹

04:42.520 --> 04:43.520
叫API

04:43.520 --> 04:44.520
那么这个文件夹里边

04:44.520 --> 04:45.520
就是在

04:45.520 --> 04:46.520
这个文件夹里边的

04:46.520 --> 04:47.520
介石文件的

04:47.520 --> 04:49.520
就是在服务端运行的

04:49.520 --> 04:50.520
请求处理文件

04:50.520 --> 04:51.520
什么意思呢

04:51.520 --> 04:52.520
比方说举个例子

04:52.520 --> 04:53.520
我如果说

04:53.520 --> 04:54.520
在这里边写上一个

04:54.520 --> 04:56.520
Adder介石

04:56.520 --> 04:57.520
那么这个地方

04:57.520 --> 04:58.520
导出

04:58.520 --> 04:59.520
Default

04:59.520 --> 05:00.520
Rig

05:00.520 --> 05:01.520
Ris

05:01.520 --> 05:02.520
你看一下这个玩意是啥

05:02.520 --> 05:04.520
这个玩意不就是那个

05:04.520 --> 05:06.520
Express的处理函数嘛

05:06.520 --> 05:07.520
Synd

05:07.520 --> 05:08.520
比如说我们看一下吧

05:08.520 --> 05:09.520
随便看一下

05:09.520 --> 05:10.520
A等于1

05:10.520 --> 05:11.520
B等于2

05:14.520 --> 05:15.520
咱们来看一下

05:15.520 --> 05:16.520
来看一下

05:16.520 --> 05:18.520
那么这样子写了之后

05:18.520 --> 05:19.520
我们在瀏覽区里边

05:19.520 --> 05:20.520
去访问一下

05:20.520 --> 05:21.520
当我们去访问

05:21.520 --> 05:24.520
这样的地址的时候

05:24.520 --> 05:25.520
就是本地服务器

05:25.520 --> 05:26.520
就是我们这个服务器

05:26.520 --> 05:27.520
当我们去访问这个

05:27.520 --> 05:28.520
写钢API

05:28.520 --> 05:29.520
然后呢

05:29.520 --> 05:30.520
什么呢

05:30.520 --> 05:31.520
Adder时候

05:31.520 --> 05:32.520
它就会

05:32.520 --> 05:33.520
它就会访问到这

05:33.520 --> 05:34.520
它就不会去访问页面了

05:34.520 --> 05:36.520
它就不会从页面里面去找

05:36.520 --> 05:37.520
配计是API文件

05:37.520 --> 05:38.520
夹里面的Adder介石

05:38.520 --> 05:39.520
不会的

05:39.520 --> 05:40.520
一凡是以API开头的

05:40.520 --> 05:42.520
它就会从API里面去找

05:42.520 --> 05:43.520
所以它做这么一个功能

05:43.520 --> 05:44.520
咱们来去请求一下

05:44.520 --> 05:46.520
去请求

05:46.520 --> 05:47.520
然后我们这里写

05:47.520 --> 05:48.520
API

05:48.520 --> 05:52.690
A

05:52.690 --> 05:53.690
你看

05:53.690 --> 05:55.690
怎么了

05:55.690 --> 05:57.690
是不是要重新运行一下

05:59.690 --> 06:00.690
可能要重新运行一下

06:00.690 --> 06:02.690
我们这个文件结构好像变了

06:02.690 --> 06:03.690
它要重新运行

06:03.690 --> 06:05.690
因为像这些

06:05.690 --> 06:06.690
这些属于是中间键

06:06.690 --> 06:07.690
对吧

06:07.690 --> 06:08.690
相当于是中间键

06:08.690 --> 06:11.690
因此它要在这里进行

06:11.690 --> 06:13.690
它要重新去注册一次

06:13.690 --> 06:15.690
咱们来重新运行一下吧

06:15.690 --> 06:16.690
因为这也是新功能

06:16.690 --> 06:17.690
我们的

06:17.690 --> 06:18.690
大家都是新手

06:18.690 --> 06:22.000
这里我们刷新一次

06:22.000 --> 06:24.000
这里好像还有问题

06:24.000 --> 06:25.000
还有一些问题

06:25.000 --> 06:26.000
那咱们来看一下吧

06:26.000 --> 06:28.000
那就看一下官网

06:28.000 --> 06:30.000
看一下官网

06:30.000 --> 06:32.000
它怎么说的

06:32.000 --> 06:34.000
Docs

06:34.000 --> 06:35.000
这边

06:35.000 --> 06:37.000
API Road

06:37.000 --> 06:38.000
那么它就说

06:38.000 --> 06:39.000
如果说你在

06:39.000 --> 06:41.000
以请求的路径

06:41.000 --> 06:44.440
你放到

06:44.440 --> 06:45.440
Inside

06:45.440 --> 06:46.440
它是要放到

06:46.440 --> 06:48.440
Page是下面

06:48.440 --> 06:49.440
它要放到Page是下面

06:49.440 --> 06:50.440
还不能乱放

06:50.440 --> 06:51.440
放到这

06:51.440 --> 06:52.440
放到这

06:52.440 --> 06:54.440
记错了

06:54.440 --> 06:55.440
那么现在我们来看一下

06:55.440 --> 06:59.610
刷新

06:59.610 --> 07:00.610
有点重新运行

07:00.610 --> 07:01.610
你看

07:01.610 --> 07:02.610
那么现在请求API

07:02.610 --> 07:03.610
那么它就会

07:03.610 --> 07:04.610
硬收到Page是下面的

07:04.610 --> 07:05.610
API

07:05.610 --> 07:06.610
对吧

07:06.610 --> 07:07.610
会硬收到这

07:07.610 --> 07:08.610
对不对

07:08.610 --> 07:09.610
那么这是get请求

07:09.610 --> 07:10.610
有没有其他请求

07:10.610 --> 07:11.610
我们来看一下

07:11.610 --> 07:12.610
请求的方法

07:12.610 --> 07:14.610
get请求

07:14.610 --> 07:15.610
那么这里

07:15.610 --> 07:16.610
你要自行判断了

07:16.610 --> 07:17.610
你要自行判断了

07:17.610 --> 07:18.610
它所有的

07:18.610 --> 07:19.610
所有的都会硬收过来

07:19.610 --> 07:20.610
那么你要自行判断

07:20.610 --> 07:21.610
那么这个东西

07:21.610 --> 07:22.610
代理有什么关系呢

07:22.610 --> 07:23.610
你不能说

07:23.610 --> 07:24.610
把我们的API

07:24.610 --> 07:25.610
放到这个服务

07:25.610 --> 07:26.610
肯定不行

07:26.610 --> 07:27.610
我们要做代理

07:27.610 --> 07:28.610
那就简单了

07:28.610 --> 07:29.610
这个玩意不就是

07:29.610 --> 07:31.610
一个中间键吗

07:31.610 --> 07:32.610
就是这么一个函数吗

07:32.610 --> 07:33.610
对吧

07:33.610 --> 07:34.610
所以说我们直接使用那个

07:34.610 --> 07:35.610
什么

07:35.610 --> 07:37.610
我们之前用过的中间键

07:37.610 --> 07:38.610
叫做

07:38.610 --> 07:39.610
addp

07:39.610 --> 07:40.610
addp

07:40.610 --> 07:41.610
什么呢

07:41.610 --> 07:42.610
proxy

07:42.610 --> 07:43.610
medware

07:43.610 --> 07:44.610
是不是直接使用它就完事了

07:44.610 --> 07:45.610
对吧

07:45.610 --> 07:46.610
直接使用它就完事了

07:46.610 --> 07:47.610
ok

07:47.610 --> 07:48.610
那么它这里呢

07:48.610 --> 07:49.610
其实也说到了

07:49.610 --> 07:50.610
怎么来使用中间键

07:50.610 --> 07:52.610
怎么来使用中间键

07:52.610 --> 07:54.610
它中间键

07:54.610 --> 07:55.610
它告诉你在这里呢

07:55.610 --> 07:56.610
它自己有内置的

07:56.610 --> 07:57.610
一些中间键

07:57.610 --> 07:59.610
有内置的一些中间键

07:59.610 --> 08:00.610
那么除了内置的

08:00.610 --> 08:01.610
中间键

08:01.610 --> 08:02.610
大家可能要用这种方式了

08:02.610 --> 08:03.610
好

08:03.610 --> 08:04.610
那么这里呢

08:04.610 --> 08:05.610
是我们刚才用了一个a

08:05.610 --> 08:06.610
对吧

08:06.610 --> 08:07.610
那这个东西跟页面一样

08:07.610 --> 08:08.610
它也可以是动态匹配

08:08.610 --> 08:09.610
比方说

08:09.610 --> 08:11.610
我们这里写上这么一个东西

08:11.610 --> 08:13.610
写上这么一个

08:13.610 --> 08:14.610
调调点

08:14.610 --> 08:16.610
argue

08:16.610 --> 08:17.610
匹配这个

08:17.610 --> 08:18.610
那么它是不是可以匹配

08:18.610 --> 08:19.610
所有的东西

08:19.610 --> 08:20.610
abc

08:20.610 --> 08:21.610
是不是匹配到它

08:21.610 --> 08:22.610
那么我们一匹配的话

08:22.610 --> 08:23.610
那么我们这里

08:23.610 --> 08:24.610
是不是可以拿到所有东西了

08:24.610 --> 08:25.610
对吧

08:25.610 --> 08:26.610
是一样的

08:26.610 --> 08:27.610
它这里也有说

08:27.610 --> 08:28.610
动态的API路由

08:28.610 --> 08:29.610
动态的API路由

08:29.610 --> 08:30.610
那么这里呢

08:30.610 --> 08:31.610
你看

08:31.610 --> 08:32.610
它是

08:33.610 --> 08:34.610
它是可以

08:34.610 --> 08:35.610
它是可以

08:35.610 --> 08:36.610
所有的东西都可以匹配的

08:36.610 --> 08:37.610
对吧

08:37.610 --> 08:38.610
那么我们这里呢

08:38.610 --> 08:39.610
怎么来获取呢

08:39.610 --> 08:40.610
看一下吧

08:40.610 --> 08:41.610
我们来看一下

08:41.610 --> 08:42.610
怎么来获取

08:42.610 --> 08:43.610
下面应该有代码

08:45.610 --> 08:47.610
通过還是通过query

08:47.610 --> 08:48.610
通过query来获取

08:48.610 --> 08:49.610
是吧

08:49.610 --> 08:50.610
那么这就是

08:50.610 --> 08:51.610
它可以匹配所有的

08:51.610 --> 08:52.610
那么我们只要把

08:52.610 --> 08:53.610
所有的请求

08:53.610 --> 08:55.610
交给这个中间键

08:55.610 --> 08:56.610
去完成就行了

08:56.610 --> 08:57.610
对吧

08:57.610 --> 08:58.610
那么这些东西

08:58.610 --> 08:59.610
通过组合

08:59.610 --> 09:00.610
咱们再看一下

09:00.610 --> 09:01.610
这里呢

09:01.610 --> 09:02.610
刷新A没问题

09:02.610 --> 09:03.610
对吧

09:03.610 --> 09:04.610
B没问题

09:04.610 --> 09:05.610
然后呢

09:05.610 --> 09:06.610
Movies

09:06.610 --> 09:07.610
对吧

09:07.610 --> 09:08.610
是不是也没问题

09:08.610 --> 09:09.610
对吧

09:09.610 --> 09:10.610
我们只需要

09:10.610 --> 09:11.610
把交给中间键就完成了

09:11.610 --> 09:12.610
好

09:12.610 --> 09:13.610
那么我们安装一下

09:13.610 --> 09:14.610
这个中间键

09:14.610 --> 09:15.610
NPMI

09:15.610 --> 09:16.610
其实很多时候呢

09:16.610 --> 09:17.610
你学到知识

09:17.610 --> 09:18.610
它不会告诉你那么多

09:18.610 --> 09:19.610
那么你需要

09:19.610 --> 09:20.610
自己去联合组装

09:20.610 --> 09:21.610
因为你知道

09:21.610 --> 09:22.610
我们这里呢

09:22.610 --> 09:23.610
能够接受到

09:23.610 --> 09:24.610
所谓的API请求

09:24.610 --> 09:25.610
到到这

09:25.610 --> 09:26.610
那么到这了过后

09:26.610 --> 09:27.610
我就把这个请求

09:27.610 --> 09:28.610
交给他来处理

09:28.610 --> 09:29.610
因为他无非就是

09:29.610 --> 09:30.610
提供这么一个函数

09:30.610 --> 09:31.610
OK

09:31.610 --> 09:32.610
那么安装好了过后了

09:32.610 --> 09:33.610
他怎么来用了

09:33.610 --> 09:34.610
他用法就没有什么use

09:34.610 --> 09:35.610
没有什么use

09:35.610 --> 09:36.610
他直接就是

09:36.610 --> 09:37.610
调整这个东西

09:37.610 --> 09:38.610
生成一个函数就完成了

09:38.610 --> 09:39.610
对吧

09:39.610 --> 09:40.610
OK

09:40.610 --> 09:41.610
那么我们这里呢

09:41.610 --> 09:42.610
把这个复制一下

09:42.610 --> 09:43.610
倒入进来

09:43.610 --> 09:44.610
返回就这么一个函数

09:44.610 --> 09:45.610
他不就是返回一个函数

09:45.610 --> 09:46.610
对吧

09:46.610 --> 09:47.610
产生的就是个函数

09:47.610 --> 09:48.610
好

09:48.610 --> 09:49.610
那么我们这里有代理

09:49.610 --> 09:50.610
代理就是我们的

09:50.610 --> 09:51.610
代理到哪呢

09:51.610 --> 09:52.610
到我们我的网站

09:52.610 --> 09:53.610
编辑

09:53.610 --> 09:54.610
点

09:54.610 --> 09:55.610
tag

09:55.610 --> 09:56.610
那么005

09:56.610 --> 09:57.610
OK

09:57.610 --> 09:58.610
那么现在呢

09:58.610 --> 09:59.610
我们再把那个

09:59.610 --> 10:00.610
再把那个这个东西

10:00.610 --> 10:01.610
加上

10:01.610 --> 10:02.610
把这个倒入进来

10:02.610 --> 10:03.610
倒入进来

10:03.610 --> 10:04.610
其他东西我不要了

10:04.610 --> 10:05.610
好

10:05.610 --> 10:06.610
咱们来现在看一下

10:06.610 --> 10:07.610
那么现在我们

10:07.610 --> 10:08.610
有代理了过后呢

10:08.610 --> 10:12.180
这里重新运行

10:12.180 --> 10:13.180
对

10:13.180 --> 10:14.180
我们先把这个API打通

10:14.180 --> 10:15.180
那么这里呢

10:15.180 --> 10:17.180
就通过这种简单的方式

10:17.180 --> 10:18.180
来实现了一个代理

10:18.180 --> 10:19.180
对吧

10:19.180 --> 10:20.180
好

10:20.180 --> 10:21.180
接下来我们来看一下

10:21.180 --> 10:22.180
我们请求

10:22.180 --> 10:23.180
我们自己的服务器的

10:23.180 --> 10:25.740
APM位置

10:25.740 --> 10:26.740
看一下能不能得到结果

10:26.740 --> 10:27.740
这里呢估计有卡住了

10:28.740 --> 10:29.740
同学在编译

10:29.740 --> 10:30.740
稍等一下

10:30.740 --> 10:33.760
OK

10:33.760 --> 10:34.760
咦

10:34.760 --> 10:35.760
他说什么呢

10:35.760 --> 10:37.760
他说

10:37.760 --> 10:39.760
不应该啊

10:39.760 --> 10:40.760
这个错误倒是

10:40.760 --> 10:42.760
像我那边服务器爆的

10:42.760 --> 10:43.760
不像我现在的服务器爆的

10:43.760 --> 10:45.760
是我那边服务器爆的

10:45.760 --> 10:46.760
express的服务器爆的

10:46.760 --> 10:47.760
哦

10:47.760 --> 10:48.760
这个地方

10:48.760 --> 10:49.760
是这个

10:49.760 --> 10:50.760
多了一个s

10:50.760 --> 10:51.760
OK

10:51.760 --> 10:52.760
那么现在拿到了

10:52.760 --> 10:53.760
对吧

10:53.760 --> 10:54.760
那么就请成代理了

10:54.760 --> 10:55.760
那么现在我们再看一下

10:55.760 --> 10:56.760
这边

10:56.760 --> 10:57.760
刷新

10:57.760 --> 10:58.760
你看

10:58.760 --> 10:59.760
请求到了

10:59.760 --> 11:00.760
对吧

11:00.760 --> 11:01.760
能请求到

11:01.760 --> 11:02.760
然后呢

11:02.760 --> 11:03.760
我们这里呢

11:03.760 --> 11:04.760
你看

11:04.760 --> 11:05.760
客户端也请求到了

11:05.760 --> 11:06.760
那么就请成了

11:06.760 --> 11:07.760
那么一个代理服务器

11:07.760 --> 11:08.760
那么现在我们

11:08.760 --> 11:09.760
先把那个服务端

11:09.760 --> 11:10.760
和客户端

11:10.760 --> 11:11.760
他们的

11:11.760 --> 11:12.760
那个请求先打通

11:12.760 --> 11:13.760
打通了之后

11:13.760 --> 11:14.760
我们再来说

11:14.760 --> 11:16.760
怎么来搞定这件事

11:16.760 --> 11:17.760
怎么来搞定一个

11:17.760 --> 11:18.760
就是来读取

11:18.760 --> 11:19.760
所有的电影

11:19.760 --> 11:20.760
对吧

11:20.760 --> 11:21.760
好

11:21.760 --> 11:22.760
那比方说

11:22.760 --> 11:23.760
我们现在来做一下吧

11:23.760 --> 11:24.760
然后如果说

11:24.760 --> 11:25.760
我们这里怎么弄呢

11:25.760 --> 11:26.760
你发现怎么弄都不好

11:26.760 --> 11:27.760
怎么弄都不好

11:27.760 --> 11:28.760
到这吧

11:28.760 --> 11:29.760
服务端它搞不定

11:29.760 --> 11:30.760
服务端它不会运行

11:30.760 --> 11:31.760
这个玩意

11:31.760 --> 11:32.760
这个玩意它不会运行的

11:32.760 --> 11:33.760
对吧

11:33.760 --> 11:34.760
所以从来这个地方

11:34.760 --> 11:35.760
还不好搞

11:35.760 --> 11:36.760
那怎么办呢

11:36.760 --> 11:37.760
如果说我们强心写

11:37.760 --> 11:38.760
比方说我们用UserFix

11:39.760 --> 11:41.760
比方说我们用UserFix强心写

11:41.760 --> 11:42.760
我不写了

11:42.760 --> 11:43.760
你们都懂的

11:43.760 --> 11:44.760
那么服务端是搞不定的

11:44.760 --> 11:45.760
对吧

11:45.760 --> 11:46.760
客户端能够渲染出来

11:46.760 --> 11:47.760
客户端能够拿到数据

11:47.760 --> 11:48.760
然后呢

11:48.760 --> 11:49.760
重新

11:49.760 --> 11:50.760
重新更改的一个状态

11:50.760 --> 11:51.760
然后呢

11:51.760 --> 11:52.760
把它渲染出来

11:52.760 --> 11:53.760
但是那服务端是搞不定的

11:53.760 --> 11:54.760
好

11:54.760 --> 11:55.760
咱们下一个来说

11:56.760 --> 11:57.760
OK

11:57.760 --> 11:58.760
那么下期和他说

