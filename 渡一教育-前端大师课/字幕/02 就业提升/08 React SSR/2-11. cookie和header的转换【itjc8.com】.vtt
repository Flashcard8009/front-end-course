WEBVTT

00:01.200 --> 00:04.020
这里呢 大家告诉大家一个好消息啊

00:04.520 --> 00:08.360
就是个代理能用了 官方已经回复了 他代理能用了

00:08.620 --> 00:11.700
他说这样子 赶紧解释一下啊 之前的代理呢

00:11.960 --> 00:14.000
为什么Pose的请求用不了

00:14.520 --> 00:15.800
这里给大家解释一下

00:16.300 --> 00:18.600
是因为他这里我刚刚先打开官网

00:20.140 --> 00:21.160
虽然这个原因

00:21.680 --> 00:26.540
他那个那个时候服务器呢 他会做这么一件事啊 那个是要解释的API

00:26.800 --> 00:28.080
API接口

00:28.600 --> 00:30.380
因为我们API接口在哪呢 是在这

00:31.360 --> 00:37.080
是在这个API文件下面 对吧 那么这个接口呢 还会自动绑的帮你做一件事 就是解析

00:37.600 --> 00:40.160
自动解析那个body

00:41.440 --> 00:46.560
你们学过load服务器 其实很多啊 其实咱们SSR并不复杂

00:46.820 --> 00:48.100
他就是细节比较多

00:48.360 --> 00:51.680
而处理这些细节的时候呢 就需要大家有深厚的

00:51.940 --> 00:53.980
就是之前的知识的基础

00:54.240 --> 00:58.600
如果说你之前的知识掌握不老的话 你很难理解这些东西到底是怎么发生的

00:59.360 --> 01:01.160
这里我给大家解释一下

01:01.400 --> 01:08.320
这个API接口呢 他首先会自动的解析body 这是我以前不知道的 因为这是个新版本里面新出来的

01:08.580 --> 01:10.360
他会自动解析body

01:10.620 --> 01:12.920
那么就会造成这个问题 什么意思呢

01:13.440 --> 01:16.520
他自动解析body 我们知道学过load接识的人都知道啊

01:16.780 --> 01:17.800
body是一个什么呀

01:18.060 --> 01:19.080
是不是一个流啊

01:19.580 --> 01:25.720
对吧 客户端请求过来 咱们客户端 我们流量期去请求服务器 也就请求到我们这儿对吧 请求到这儿

01:25.980 --> 01:30.600
那么他传过的是一个什么呢 传过的是一个流数据啊 就是个load里边的stream

01:31.420 --> 01:34.900
是一个流数据 那么这个流呢 他是不是只能读一次

01:35.460 --> 01:38.900
对吧 读了一次他就不能再读了啊 他是个只读流 他只能读一次

01:39.500 --> 01:44.060
而如果说他要解析body的话 他就把这个流啊给他读掉了 就给他消费掉了

01:44.740 --> 01:48.740
消费掉了过后呢 再来去处理这个 再来去用这个就是

01:49.160 --> 01:50.120
呃

01:50.320 --> 01:53.900
担你的时候呢 他也要去读这个流 结果呢他就读不到这个流

01:54.200 --> 01:58.680
他这个流里边读不出来东西 读不出来东西的话 他就没有办法把我们请求

01:59.120 --> 02:02.560
就流量期请求到我们担你服务器 不是会传一个body吗

02:02.800 --> 02:04.520
我给他画个图啊 他是这样子

02:05.280 --> 02:06.540
我们的流量期

02:08.960 --> 02:12.600
流量期 我们请求服务器的时候呢 就担你服务器

02:13.240 --> 02:15.520
也就是那个世界接识啊 担你服务器

02:17.700 --> 02:20.380
那个世界接识他是传过来的一个请求

02:20.380 --> 02:22.940
那么这个请求里面是不是包含body

02:22.940 --> 02:25.760
对吧 是不是包含body

02:25.760 --> 02:27.540
那么这个body是一个牛

02:28.320 --> 02:29.600
是一个牛

02:29.600 --> 02:32.660
本来呢 如果说它不做处理的话就没事

02:32.660 --> 02:33.960
这个body传过来了 过后了

02:33.960 --> 02:36.500
它就会把这个牛读出来 这个代理服务器呢

02:36.500 --> 02:40.860
它这个模块叫addpproxymedware

02:40.860 --> 02:43.180
这个模块呢 它就会把这个body的牛啊

02:43.180 --> 02:45.720
stun读出来 读出来发送给了谁呢

02:45.720 --> 02:47.520
发送给我们指定的

02:47.520 --> 02:50.340
这个应该5109

02:50.380 --> 02:52.140
因为现在改了啊 改了端口了

02:52.140 --> 02:55.200
应该发送给我们指定的数据服务器 对吧

02:55.200 --> 02:59.040
它发送给这个数据服务器

02:59.040 --> 03:00.580
数据服务器

03:00.580 --> 03:03.140
那么它的发送方式呢 它的请求体呢

03:03.140 --> 03:04.680
它是把这个牛读出来发送的

03:04.680 --> 03:07.500
所以说就保证了我们的请求体是什么

03:07.500 --> 03:09.800
那么它发送到数据服务器的请求体是什么

03:09.800 --> 03:11.340
它保证了请求体不变

03:11.340 --> 03:13.380
它是通过读牛的方式

03:13.380 --> 03:14.660
但是呢 现在有一个问题就是

03:14.660 --> 03:17.480
那个时候的GS呢 它给你做了一个处理

03:17.500 --> 03:21.320
它就在我们的浏览器去请求我们在代理服务器的时候呢

03:21.320 --> 03:23.620
它给你加了这么一个

03:23.620 --> 03:26.440
就是在我们收到这个请求之前

03:26.440 --> 03:27.720
它给你加了一个牛

03:27.720 --> 03:29.780
就是body跑这儿

03:29.780 --> 03:32.320
它将你去加了这么一个东西

03:32.320 --> 03:36.680
body跑这儿

03:36.680 --> 03:40.020
那么这个玩意呢 这个就是我们的请求体会先交给它

03:40.020 --> 03:42.320
但这个玩意呢 它就把我们的牛

03:42.320 --> 03:44.620
就是个body牛啊 给我消费掉了

03:44.620 --> 03:45.520
消费掉了过后呢

03:45.520 --> 03:47.560
后边的代理服务器读不到这个body的

03:47.560 --> 03:48.600
就读不出来了

03:48.600 --> 03:50.120
它只能 那个body消费掉了过后

03:50.120 --> 03:51.160
它就变成了什么呢

03:51.160 --> 03:53.200
就跟我们的那个express一样

03:53.200 --> 03:56.520
它就变成了这个Rake对象里面的一个body属性了

03:56.520 --> 03:58.580
它就变成这个玩意了 它就不是一个牛了

03:58.580 --> 04:00.620
所以说 导致它读不到 读不到

04:00.620 --> 04:03.960
那么读不到的话 它就没有办法把这个body发送给我们的数据服务器

04:03.960 --> 04:06.000
它就一直在那里读牛 读不读

04:06.000 --> 04:07.020
读不到结尾

04:07.020 --> 04:09.840
所以导致一直卡在那 造成了这么一个问题

04:09.840 --> 04:11.640
我说怎么产生的

04:11.640 --> 04:12.660
后来是这么一个问题

04:12.660 --> 04:14.200
那么这问题怎么解决呢

04:14.200 --> 04:17.220
其实很简单啊 你知道那问题过后呢 要寻求解决

04:17.220 --> 04:18.160
其实就很简单

04:18.160 --> 04:19.760
你就说你不要给我解决了

04:19.760 --> 04:21.960
不要给我用body puzzle解决就完事了

04:21.960 --> 04:23.880
那么这里呢 我们稳当就下去查出来了

04:23.880 --> 04:26.880
API Rose里面一个API middleware

04:26.880 --> 04:28.440
那么这里呢 它就告诉你

04:28.440 --> 04:30.360
可以把这个body puzzle来禁用

04:30.360 --> 04:31.520
一个社会force

04:31.520 --> 04:32.520
那么它就禁用了

04:32.520 --> 04:34.680
社会force过后呢 它就是

04:34.680 --> 04:35.840
那么你就可以

04:35.840 --> 04:37.440
把它当成一个流略处理的

04:37.440 --> 04:40.320
把整个寻求体当成流略处理

04:40.320 --> 04:42.480
那么后续的我们这个ATP

04:42.480 --> 04:43.400
proxy middleware呢

04:43.440 --> 04:44.600
它就可以正常处理的

04:44.600 --> 04:45.640
就这么个原因

04:45.640 --> 04:47.800
所以说呢 既然能够使用代理服务器

04:47.800 --> 04:49.640
那么我们肯定要使用代理服务器

04:49.640 --> 04:52.080
那么接下来 我要把我们工程稍微改造一下

04:52.080 --> 04:53.960
改造成使用代理服务器

04:53.960 --> 04:55.400
毕竟这里是新东西嘛

04:55.400 --> 04:57.600
所以说大家都还要都在摩索

04:57.600 --> 05:00.760
那么现在呢 我们用export导出

05:00.760 --> 05:01.320
导出什么呢

05:01.320 --> 05:03.960
它这里呢 要求你在这里边导出一个这个东西

05:05.880 --> 05:08.400
导出这个东西就关于这个API的配置

05:08.400 --> 05:08.880
配置的话

05:08.880 --> 05:09.480
那么这里呢

05:09.480 --> 05:11.800
我们就不再使用这个body puzzle

05:11.800 --> 05:13.160
把社会force

05:13.160 --> 05:15.160
那么这样子呢 就可以代理了

05:15.160 --> 05:17.400
好 接下来我们来处理一下代理

05:17.400 --> 05:18.320
好 处理的时候呢

05:18.320 --> 05:19.560
我们到service里边

05:19.560 --> 05:21.400
我们首先更改这个request

05:21.400 --> 05:22.760
浏览器这一块

05:22.760 --> 05:24.480
浏览器这一块我们就不要了

05:24.480 --> 05:25.680
对吧 就不要了

05:25.680 --> 05:27.560
让它请求我们的代理服务器就行了

05:27.560 --> 05:29.640
服务器呢 当然还是要请求这个

05:29.640 --> 05:30.640
根据服务器

05:30.640 --> 05:32.680
或者还是客户端来进行处理

05:32.680 --> 05:34.560
好 那么现在我们到loginservice里边

05:34.560 --> 05:35.920
那么这些东西就全部不要了

05:35.920 --> 05:37.880
就全部不要了

05:37.880 --> 05:40.000
现在我们要做成什么样子呢

05:40.000 --> 05:40.840
是这样

05:40.840 --> 05:42.640
现在呢 我们要做成这个样子

05:43.160 --> 05:46.130
再给他画一个图

05:46.130 --> 05:50.620
那么我们就按照代理服务起来了

05:50.620 --> 05:53.620
就是我们登录的这一块

05:53.620 --> 05:54.500
登录的这一块呢

05:54.500 --> 05:57.340
我们跟我们的真实的服务器

05:57.340 --> 06:00.060
就跟我们的数据服务器之间的交互了

06:00.060 --> 06:03.100
来传递那个就是投稿信息

06:03.100 --> 06:03.780
是用什么呢

06:03.780 --> 06:05.180
是用header来传递的

06:05.180 --> 06:06.180
对吧 是用header

06:06.180 --> 06:07.060
我们之前做过

06:07.060 --> 06:09.660
在header里边传递那个登录信息

06:09.660 --> 06:11.180
比方说我们请求这个接口

06:11.180 --> 06:12.260
什么互mi接口

06:12.260 --> 06:14.380
是不是要放到一个header里边

06:14.380 --> 06:14.820
对吧

06:14.860 --> 06:16.940
而且他那边logging完了过后

06:16.940 --> 06:18.740
服务器给我们也会有个header

06:18.740 --> 06:20.180
但是有了代理服务器过后

06:20.180 --> 06:21.620
我们通常会做这么一件事

06:21.620 --> 06:23.140
我就尽量按照你们以后

06:23.140 --> 06:25.300
在公司里面的常见常进来

06:25.300 --> 06:26.020
有了代理服务器

06:26.020 --> 06:27.860
他通常会做这么一件事

06:27.860 --> 06:29.060
我们的数据服务器

06:29.060 --> 06:30.980
他往往给你传递的是header

06:30.980 --> 06:32.060
而我们的代理服务器

06:32.060 --> 06:35.220
跟扭烂器之间传递的是cookie

06:35.220 --> 06:35.820
为什么呢

06:35.820 --> 06:36.820
我给他解释一下

06:36.820 --> 06:37.580
为什么

06:37.580 --> 06:38.860
因为我们数据服务器

06:38.860 --> 06:41.100
他面向的很广

06:41.100 --> 06:42.340
他面向的范围很广

06:42.340 --> 06:43.620
他不仅要面向什么

06:43.620 --> 06:45.660
面向那个我们的扭烂器

06:45.660 --> 06:47.340
还要面向各种场景

06:47.340 --> 06:49.060
还要面向什么手机端

06:49.060 --> 06:49.740
就移动端

06:49.740 --> 06:50.780
还要面向

06:50.780 --> 06:52.420
可能还要面向桌面应用程序

06:52.420 --> 06:53.620
可能还要车载系统

06:53.620 --> 06:54.540
他都要面向

06:54.540 --> 06:57.500
所以说有些系统是根本没有Cookie这个东西的

06:57.500 --> 06:58.620
他就必须要用header

06:58.620 --> 06:59.060
对吧

06:59.060 --> 07:00.820
数据服务器通常都会这么处理

07:00.820 --> 07:03.220
他是跟客户端无关的

07:03.220 --> 07:04.580
那么现在我们代理服务器

07:04.580 --> 07:06.220
我们知道我们的代理服务器

07:06.220 --> 07:07.820
他只是面向扭烂器

07:07.820 --> 07:09.540
而扭烂器每一次请求

07:09.540 --> 07:10.540
因为他一个特性

07:10.540 --> 07:13.340
他会自动附带Cookie

07:13.380 --> 07:14.380
那么这样子

07:14.380 --> 07:16.860
因为我们目前用RJK10的时候

07:16.860 --> 07:18.500
才去手动给他加上一个header

07:18.500 --> 07:18.900
对吧

07:18.900 --> 07:19.780
但是如果说扭烂器

07:19.780 --> 07:21.700
我们直接在地址栏里面数地址

07:21.700 --> 07:23.500
去请求我们的代理服务器

07:23.500 --> 07:24.980
去请求我们代理服务器的时候

07:24.980 --> 07:27.260
那么我们那个时候就没有附带那个header

07:27.260 --> 07:29.660
那么是不是就没有把我们的身份信息传过去

07:29.660 --> 07:31.300
而Cookie他会自动传过去的

07:31.300 --> 07:33.820
说扭烂器当然还是最好使用Cookie

07:33.820 --> 07:35.660
那么刚才之前没有代理服务器

07:35.660 --> 07:37.140
我确实是没办法

07:37.140 --> 07:37.980
我确实是没办法

07:37.980 --> 07:39.620
那现在有代理服务器

07:39.620 --> 07:39.980
服务器过后

07:39.980 --> 07:42.460
我们就把它改造成这种格式

07:42.540 --> 07:43.260
这样的意思吧

07:43.260 --> 07:45.500
所以说我们这里的什么跟Local Storage

07:45.500 --> 07:46.620
就没什么关系了

07:46.620 --> 07:48.500
我们这里就非常简单的

07:48.500 --> 07:49.220
去请求

07:49.220 --> 07:50.620
请求拿到结果

07:50.620 --> 07:52.500
然后互外面也是去请求

07:53.700 --> 07:55.620
这里什么都没了

07:55.620 --> 07:56.340
都没了

07:56.340 --> 07:57.340
去请求

07:57.340 --> 07:57.940
去请求

07:57.940 --> 08:00.220
因为他会自动的附带Cookie

08:00.220 --> 08:01.900
然后header也不要了

08:01.900 --> 08:02.540
把这些都删掉

08:04.940 --> 08:05.820
我在想

08:05.820 --> 08:07.060
我还在想这个东西

08:07.060 --> 08:08.220
如果说不解

08:08.220 --> 08:09.900
后面的东西还真不好讲

08:09.900 --> 08:11.020
那么这里Nokia Awesome

08:11.020 --> 08:12.180
我就直接把Cookie清空

08:12.220 --> 08:13.820
我去这里就非常粗暴一点

08:13.820 --> 08:14.220
粗暴一点

08:14.220 --> 08:15.740
该清空就完事了

08:15.740 --> 08:16.380
OK

08:16.380 --> 08:16.940
那么这样子

08:16.940 --> 08:19.140
我们就把Locking Service改造了

08:19.140 --> 08:20.860
接下来我们来也看一下

08:20.860 --> 08:22.500
首先看一下Locking

08:22.500 --> 08:24.260
能不能正常的请求

08:24.260 --> 08:25.500
能不能正常的请求

08:25.500 --> 08:26.700
首先看一下

08:26.700 --> 08:28.700
那么咱们这里找到这个Locking

08:30.500 --> 08:31.540
我们这里把注射料

08:33.540 --> 08:35.260
这个地方注射料

08:35.260 --> 08:35.540
好

08:35.540 --> 08:37.140
接下来我们在这里运行

08:37.140 --> 08:37.900
NPM组装

08:37.900 --> 08:38.780
大家想一想

08:38.780 --> 08:41.580
能不能正常的拿到呢

08:43.180 --> 08:47.820
我们这里请求Nokia Awesome 3000

08:47.820 --> 08:49.660
那么请求过来吧

08:49.660 --> 08:50.820
先请求过来来说

08:52.100 --> 08:53.140
看是这么格式

08:53.140 --> 08:54.180
是这么一种格式

08:54.180 --> 08:56.140
浏览器跟代理服务器之间

08:56.140 --> 08:59.020
那就不是用header的方式来传递

08:59.020 --> 09:00.180
身份信息了

09:00.180 --> 09:02.180
而是通过Cookie的方式来传递

09:03.020 --> 09:05.180
而代理服务器跟数据服务器之间

09:05.180 --> 09:06.100
那是用header来传递

09:06.100 --> 09:07.420
因为数据服务器需要用header

09:07.420 --> 09:08.500
它不认Cookie的

09:08.500 --> 09:09.700
它认header

09:09.700 --> 09:10.660
咱们来看一下

09:10.700 --> 09:11.580
现在我们点灯录

09:16.260 --> 09:17.900
这里灯录液

09:18.780 --> 09:19.300
刷新

09:20.820 --> 09:21.820
大家可以看到

09:21.820 --> 09:23.180
我们这里是不是拿到了

09:23.180 --> 09:24.820
拿到服务器的响应结果了

09:24.820 --> 09:25.380
对吧

09:25.380 --> 09:27.300
而且这个服务器响应结果是谁给我的

09:27.300 --> 09:28.500
是代理服务器给我的

09:28.500 --> 09:28.900
你看一下

09:28.900 --> 09:29.380
阿迪克斯

09:29.380 --> 09:30.620
我们找到阿迪克斯

09:30.620 --> 09:31.340
Locking

09:31.340 --> 09:32.940
那么这里是代理服务器给我的

09:32.940 --> 09:34.300
看我们请求的是3000

09:34.300 --> 09:35.620
代理服务器给我的结果

09:36.580 --> 09:37.980
然后我们再看服务器端

09:37.980 --> 09:39.380
服务器端是不是也拿到结果了

09:39.380 --> 09:39.660
对吧

09:39.660 --> 09:42.060
因为一样的都是一样的

09:42.060 --> 09:43.380
那么现在我们来一个个研究

09:43.460 --> 09:45.180
首先我们看服务器端那边的请求

09:45.180 --> 09:46.340
会不会有问题

09:46.340 --> 09:47.700
那么服务器端这种有点请求

09:47.700 --> 09:49.740
locking结果是不是不会有问题

09:49.740 --> 09:50.260
对吧

09:50.260 --> 09:51.100
locking结果

09:51.100 --> 09:53.260
咱们locking结果去请求数据服务器

09:53.260 --> 09:54.260
直接请求

09:54.260 --> 09:55.500
是直接请求

09:55.500 --> 09:56.460
我们的数据服务器

09:56.460 --> 09:57.460
那么这种是什么情况

09:57.460 --> 09:59.660
这种就是我们请求的是液面

09:59.660 --> 10:01.180
就浏览器请求的是这个液面

10:01.180 --> 10:02.020
那么这个液面

10:02.020 --> 10:04.540
在加载过程中去请求服务器

10:04.540 --> 10:05.700
它不是阿迪克斯

10:05.700 --> 10:06.660
它不是代理

10:06.660 --> 10:08.420
它这个部分不是代理

10:08.420 --> 10:09.460
大家搞清楚

10:09.460 --> 10:10.700
就是这里有两种场景

10:10.700 --> 10:11.780
我大家来画一下

10:11.860 --> 10:12.780
有两种场景

10:13.580 --> 10:16.140
一个是我们的自己的那个是服务器

10:16.140 --> 10:17.500
那个是点服务器

10:17.500 --> 10:19.460
第一种场景是浏览器

10:19.460 --> 10:21.460
浏览器去请求液面

10:21.460 --> 10:23.660
像现在那种请求液面

10:23.660 --> 10:25.060
那么请求液面的时候

10:25.060 --> 10:26.060
它要运行液面

10:26.060 --> 10:27.420
在液面的运行过程中

10:27.420 --> 10:29.220
你看在液面的运行过程中

10:29.220 --> 10:31.220
是不是请求了数据服务器

10:31.220 --> 10:32.460
它是这种情况

10:32.460 --> 10:33.860
那么这个时候有没有用到什么

10:33.860 --> 10:34.420
这个东西

10:34.420 --> 10:35.500
有没有用到我们的代理

10:35.500 --> 10:36.820
根本就跟代理没关系

10:36.820 --> 10:39.020
是请求液面服务器自主的

10:39.020 --> 10:41.340
自主的去发出一个请求

10:41.340 --> 10:42.500
到数据服务器

10:42.500 --> 10:44.340
而另一种场景是这个

10:44.340 --> 10:45.020
那么这个东西

10:45.020 --> 10:46.620
我们叫做服务端去请求服务器

10:46.620 --> 10:47.100
对吧

10:47.100 --> 10:48.700
另一个场景是流量器发送一个

10:48.700 --> 10:50.860
阿迦克斯到我们的服务器

10:50.860 --> 10:51.460
到哪个地址

10:51.460 --> 10:53.260
那么这个就会被它来解获

10:53.260 --> 10:53.820
对吧

10:53.820 --> 10:55.220
它会解获我们的阿迦克斯

10:55.220 --> 10:56.940
那么它那就会启动我们的

10:56.940 --> 11:00.020
ADDP ProxyMiddleware

11:00.020 --> 11:00.700
对吧

11:00.700 --> 11:01.540
那么请求它

11:01.540 --> 11:03.020
那么它去代理我们的请求

11:03.020 --> 11:04.020
到数据服务器

11:04.020 --> 11:04.340
对吧

11:04.340 --> 11:05.180
那么这里就颜色

11:05.180 --> 11:06.140
这两种场景

11:06.140 --> 11:07.340
我们这里看到的结果

11:07.340 --> 11:08.260
是这种场景

11:08.260 --> 11:09.380
是这里的结果

11:09.460 --> 11:10.940
就是我们这里刷新页面

11:10.940 --> 11:12.140
去请求登录页

11:12.140 --> 11:13.420
请求的是页面对吧

11:13.420 --> 11:14.820
请求到页面的时候

11:14.820 --> 11:17.180
那么这里拿到数据服务器的结果

11:17.180 --> 11:18.180
然后打印出来

11:18.180 --> 11:18.460
对吧

11:18.460 --> 11:20.620
这一部分肯定是没问题的

11:20.620 --> 11:21.380
当然这个服务器

11:21.380 --> 11:22.580
还发送了一个黑的到这

11:22.580 --> 11:23.340
对吧

11:23.340 --> 11:25.580
然后另一个部分是流烂器

11:25.580 --> 11:27.460
因为流烂器也要运行这个代码

11:27.460 --> 11:29.020
这代码流烂器也要运行

11:29.020 --> 11:30.900
运行这个代码的时候

11:30.900 --> 11:32.140
它发送一个阿迦克斯请求

11:32.140 --> 11:33.060
到我们的服务器

11:33.060 --> 11:34.060
那么这个时候服务器

11:34.060 --> 11:35.940
又转发我们的请求到数据服务器

11:35.940 --> 11:36.380
对吧

11:36.380 --> 11:37.980
那么流烂器这边

11:38.060 --> 11:40.220
就获得了这个响应结果

11:40.220 --> 11:41.340
这就是代理的响应结果

11:41.340 --> 11:42.700
这里有两个部分

11:42.700 --> 11:43.980
一个是服务器自身

11:43.980 --> 11:45.660
主动的发送的请求

11:45.660 --> 11:47.780
是这个代码服务器运行的

11:47.780 --> 11:49.580
另一个是客户端这里运行的

11:49.580 --> 11:51.740
客户端这里运行的这个代码

11:51.740 --> 11:52.940
那么它会请求到这

11:52.940 --> 11:53.260
对吧

11:53.260 --> 11:56.260
然后服务器转发请求到数据服务器

11:56.260 --> 11:57.660
数据服务器完成响应

11:57.660 --> 11:59.660
这个服务器又给流烂器完成响应

11:59.660 --> 12:01.100
这是两种场景

12:02.380 --> 12:04.700
SSR还就是这些细节地方

12:04.700 --> 12:06.300
需要深厚的基础

12:06.340 --> 12:08.220
那么你才能理解这些东西

12:08.220 --> 12:09.420
不然的话你肯定要遭晕

12:10.580 --> 12:10.740
好

12:10.740 --> 12:12.220
那么这个部分是没问题的

12:12.220 --> 12:13.740
虽然这个部分是肯定是没问题的

12:13.740 --> 12:15.220
那么现在我们探讨一下这个部分

12:15.220 --> 12:16.980
这个部分是有点问题的

12:16.980 --> 12:17.580
有什么问题的

12:17.580 --> 12:18.540
大家看一下

12:18.540 --> 12:20.620
我们看一下这个Alex请求

12:20.620 --> 12:22.180
请求的时候你看

12:22.180 --> 12:25.020
他只是完成一个简单的转发请求

12:25.020 --> 12:27.060
然后他还是把authorization

12:27.060 --> 12:28.820
把我们的身份信息放到token里边了

12:28.820 --> 12:29.380
对吧

12:29.380 --> 12:30.940
也就说什么呢

12:30.940 --> 12:32.300
就这个情况

12:32.300 --> 12:34.580
我们的数据服务器给他的是header

12:34.580 --> 12:35.980
他没有做任何处理

12:36.020 --> 12:37.580
给流烂器的还是header

12:37.580 --> 12:38.620
那么就看这边

12:38.620 --> 12:40.020
数据服务器给他的是header

12:40.020 --> 12:41.260
那么他没有做任何处理

12:41.260 --> 12:42.780
给流烂器的还是header

12:42.780 --> 12:44.380
这个是我们不希望的

12:44.380 --> 12:45.900
我们希望我们代理服务器

12:45.900 --> 12:48.500
要把这个header转换成Cookie

12:48.500 --> 12:49.860
要转换成Cookie

12:49.860 --> 12:51.260
那么这个东西怎么做呢

12:51.260 --> 12:54.300
这个东西我们首先你要知道方向

12:54.300 --> 12:57.580
有的时候你有些地方API肯定会忘

12:57.580 --> 13:00.060
但是你要为什么说理解原理很重要呢

13:00.060 --> 13:03.140
理解原理过后你要知道解决问题的方向

13:03.140 --> 13:04.740
我们解决问题的方向是什么呢

13:04.780 --> 13:06.980
我们希望这个代理服务器

13:07.620 --> 13:09.820
他能够把拿到响应结果之后

13:09.820 --> 13:11.340
能够自行的处理

13:11.340 --> 13:13.220
把header变成Cookie

13:13.220 --> 13:14.620
那么我们应该去怎么查

13:14.620 --> 13:16.820
查那个时候的解决师还是查他

13:17.820 --> 13:19.780
是不是肯定是查这个模块

13:19.780 --> 13:21.060
ADP PROCED INVIDUAL

13:21.060 --> 13:21.460
对吧

13:21.460 --> 13:22.580
他在完成转发

13:22.580 --> 13:23.420
然后转发完了过后

13:23.420 --> 13:25.100
我们能不能手动处理一下

13:25.100 --> 13:26.300
把header转换成Cookie

13:26.300 --> 13:26.580
好

13:26.580 --> 13:27.300
咱们来看一下

13:28.380 --> 13:30.180
咱们找到这个npm

13:31.500 --> 13:33.500
因为你们听到这个课的话

13:33.540 --> 13:35.740
估计你们你毕业可能就不远了

13:35.740 --> 13:37.700
所以说我尽量的交代大家

13:37.700 --> 13:39.260
就怎么来解决这些问题

13:39.260 --> 13:41.820
因为你们以后工作肯定要遇到无数的问题的

13:41.820 --> 13:44.580
这些问题老师不可能跟大家讲完的

13:44.580 --> 13:46.620
我也不知道你们以后公司遇到什么问题

13:46.620 --> 13:49.140
但是你有了这种原理的思想过后

13:49.140 --> 13:51.100
你深刻的理解的原理过后

13:51.100 --> 13:52.100
你来解决这些问题

13:52.100 --> 13:53.460
你至少有方向了

13:53.460 --> 13:55.540
那么我们可以参考这个文档

13:55.540 --> 13:57.340
这个文档里边他说到了

13:57.340 --> 14:00.420
他里边有哪些方式处理的文档也不多

14:00.420 --> 14:01.620
大概浏览一下

14:01.660 --> 14:02.780
都知道了

14:02.780 --> 14:04.300
我们往下面找一找

14:05.300 --> 14:06.620
那么这里有些事件

14:06.620 --> 14:06.900
对吧

14:06.900 --> 14:09.100
ADP Proxy Event就触发的事件

14:09.100 --> 14:11.620
就是在单理的每一个阶段可以做一些事

14:11.620 --> 14:13.300
那么我们需要的

14:13.300 --> 14:14.620
那么我们看到这

14:14.620 --> 14:16.500
proxy res

14:16.500 --> 14:18.020
它是配置为一个方形

14:18.020 --> 14:18.900
也就是什么意思呢

14:18.900 --> 14:20.900
因为在这里你可以配置为一个方形

14:21.900 --> 14:23.260
叫做我们写一下吧

14:24.620 --> 14:25.140
方形

14:26.020 --> 14:28.460
那么这个方形它会在什么时候运行呢

14:28.460 --> 14:30.180
它就在这个时候

14:30.220 --> 14:33.180
当我们的数据服务器拿到了数据

14:33.180 --> 14:34.580
就是这个单理服务器

14:34.580 --> 14:36.500
它拿到了数据服务器的响应

14:36.500 --> 14:37.460
我们看着吧

14:37.460 --> 14:38.900
这个单理服务器

14:38.900 --> 14:41.060
拿到了数据服务器的响应

14:41.060 --> 14:41.940
那么这里

14:41.940 --> 14:43.820
我们刚刚说

14:45.100 --> 14:47.900
这个单理服务器拿到数据服务器的响应

14:47.900 --> 14:49.060
响应的时候呢

14:49.060 --> 14:53.060
拿到它即将发送给我们的浏览器

14:53.060 --> 14:54.260
那么这个时候呢

14:54.260 --> 14:55.660
它会拿到这个事件

14:55.660 --> 14:56.980
proxy res

14:56.980 --> 14:58.300
当我们的单理服务器

14:58.340 --> 14:59.140
即将

14:59.820 --> 15:01.380
响应的时候会拿到这个

15:02.260 --> 15:03.380
那么这里有三个阐述

15:03.380 --> 15:04.740
分别是什么意思呢

15:04.740 --> 15:06.260
你读一下这个单词

15:06.260 --> 15:07.260
你都不用去看文档

15:07.260 --> 15:09.460
读下一个单词就大概明白了

15:09.460 --> 15:10.500
proxy res

15:10.500 --> 15:11.340
什么意思啊

15:11.340 --> 15:13.060
表示代理的响应

15:13.060 --> 15:14.060
什么意思呢

15:14.060 --> 15:14.940
这个东西

15:14.940 --> 15:15.780
这个对象

15:15.780 --> 15:17.900
它指的是数据服务器

15:17.900 --> 15:20.220
给我们代理服务器的响应

15:20.220 --> 15:21.660
那么是不是包含head

15:21.660 --> 15:22.300
对吧

15:22.300 --> 15:24.500
那么后边的reak res有什么意思呢

15:24.500 --> 15:25.500
它指的是

15:25.500 --> 15:28.140
浏览器发送到这个的请求

15:28.140 --> 15:31.580
和它即将发送到浏览器的响应

15:31.580 --> 15:32.060
对吧

15:32.060 --> 15:33.420
浏览器发送它请求嘛

15:33.420 --> 15:35.020
然后它产生一个代理

15:35.020 --> 15:36.500
用代理去请求服务器

15:36.500 --> 15:38.580
然后服务器拿到一个代理的响应结果

15:38.580 --> 15:39.660
代理的响应结果在哪

15:39.660 --> 15:40.620
是不是在这

15:40.620 --> 15:41.500
然后呢

15:41.500 --> 15:43.300
它还要用自己的就是res

15:43.300 --> 15:44.780
然后来响应给浏览器

15:44.780 --> 15:45.460
对吧

15:45.460 --> 15:45.940
所以说呢

15:45.940 --> 15:47.140
我们要做的是什么呢

15:47.140 --> 15:49.460
无非就是从这里边

15:49.460 --> 15:52.940
是不是从这里边给它加上一些

15:52.940 --> 15:54.500
在这里边去拿到什么

15:54.500 --> 15:55.340
拿到header

15:55.340 --> 15:56.060
对吧

15:56.100 --> 15:56.780
拿到header

15:56.780 --> 15:57.300
加到哪

15:57.300 --> 15:58.180
加到这里边

15:58.180 --> 15:58.500
其实呢

15:58.500 --> 15:59.260
它这个例子呢

15:59.260 --> 16:00.340
也在告诉你

16:00.340 --> 16:02.100
其实你没有必要去加到这里边

16:02.100 --> 16:03.420
你只要加到它这里边

16:03.420 --> 16:05.340
它会自动给你往这里边加

16:05.340 --> 16:05.940
你看

16:05.940 --> 16:08.860
它这里写了proxy res headers

16:08.860 --> 16:10.540
给它给它加一个header

16:10.540 --> 16:11.260
加了一个header了

16:11.260 --> 16:11.740
过后呢

16:11.740 --> 16:13.020
它到时候会自动的把这个

16:13.020 --> 16:14.380
这里边的header放到这里边

16:14.380 --> 16:14.700
然后呢

16:14.700 --> 16:16.500
浏览器可以想象到这个header了

16:16.500 --> 16:17.820
并且它可以通过这种方式

16:17.820 --> 16:18.940
来删除一些header

16:18.940 --> 16:19.700
对吧

16:19.700 --> 16:20.620
所以说那么这样子呢

16:20.620 --> 16:21.580
我们就知道了

16:21.580 --> 16:22.780
这里该怎么写呢

16:22.780 --> 16:24.780
我们首先从拿到一个代理

16:24.820 --> 16:26.780
代理服务器的header

16:26.780 --> 16:28.340
拿到这个authorization

16:28.340 --> 16:28.540
对吧

16:28.540 --> 16:30.100
它不是想用了一个这个东西吗

16:30.100 --> 16:30.340
对吧

16:30.340 --> 16:31.460
authorization

16:31.460 --> 16:32.380
拿到这个

16:32.380 --> 16:33.380
拿到这个过后呢

16:33.380 --> 16:35.100
它是不是拿到一个token

16:37.100 --> 16:38.420
拿到一个token

16:38.420 --> 16:39.820
那么当然这个是

16:39.820 --> 16:41.660
这个是仅有登录的时候

16:41.660 --> 16:42.380
拿到的token

16:42.380 --> 16:44.100
其他的请求是不是也要经过它

16:44.100 --> 16:45.500
其他的请求是拿不到token的

16:45.500 --> 16:46.340
是没有token的

16:46.340 --> 16:47.860
那么我们判断一下

16:47.860 --> 16:49.300
如果说token有值

16:49.300 --> 16:50.380
说明说明什么呢

16:50.420 --> 16:53.060
说明数据服务器

16:53.060 --> 16:56.060
给我想用了token

16:56.060 --> 16:57.900
那么这个时候我要干嘛呢

16:57.900 --> 17:04.460
我要将header中的token放到

17:04.460 --> 17:05.020
放到哪儿呢

17:05.020 --> 17:06.420
放到cokie中

17:07.420 --> 17:08.180
那怎么办呢

17:08.180 --> 17:09.460
怎么来放到cokie中

17:10.940 --> 17:11.580
怎么放了

17:11.580 --> 17:13.260
我们首先把token已经挠到了

17:13.260 --> 17:13.460
对吧

17:13.460 --> 17:14.820
我们现在先删除

17:16.220 --> 17:17.420
先删除这个header

17:18.300 --> 17:19.580
先删除

17:19.620 --> 17:20.300
删除

17:20.820 --> 17:21.540
想用

17:22.020 --> 17:23.020
头中的header

17:23.020 --> 17:23.660
为什么呢

17:23.660 --> 17:25.500
因为我到时候想用的时候

17:25.500 --> 17:27.540
是不会想用给浏览器这个header

17:27.540 --> 17:28.860
我们只会想用cokie

17:28.860 --> 17:30.380
然后再添加cokie

17:30.380 --> 17:31.060
怎么添加呢

17:31.060 --> 17:32.460
这里已经告诉你了怎么添加了

17:32.460 --> 17:33.180
添加header

17:33.180 --> 17:34.660
因为cokie无非就是个header

17:34.660 --> 17:35.260
对吧

17:35.260 --> 17:36.860
那么这里能用setcokie

17:36.860 --> 17:37.260
对吧

17:37.260 --> 17:38.340
是不是用setcokie

17:38.340 --> 17:39.500
好setcokie准备显了

17:39.500 --> 17:41.060
当然你也可以用一些第三方库

17:41.060 --> 17:41.980
来完成这个cokie

17:41.980 --> 17:43.060
其实也不用了

17:43.060 --> 17:43.900
很简单

17:43.900 --> 17:44.980
cokie的名字

17:44.980 --> 17:45.940
我们就用个token

17:45.940 --> 17:46.820
cokie的名字

17:46.820 --> 17:48.180
cokie的值是什么

17:48.180 --> 17:49.100
cokie的值

17:49.860 --> 17:50.780
或者cokie的名字

17:50.780 --> 17:51.900
我们把它写出去吧

17:54.060 --> 17:54.620
cokie

17:55.140 --> 17:55.660
内

17:56.260 --> 17:57.220
就是token

17:58.900 --> 17:59.620
然后呢

18:00.460 --> 18:01.780
我们这里就用cokie内

18:04.330 --> 18:05.250
这个字乎算

18:06.370 --> 18:07.090
cokie

18:07.090 --> 18:07.570
内

18:07.570 --> 18:07.930
好

18:07.930 --> 18:08.970
cokie的值

18:08.970 --> 18:10.250
cokie的值是不是这个token

18:10.250 --> 18:10.610
对吧

18:10.610 --> 18:11.370
cokie的值

18:11.370 --> 18:13.490
然后我们该设一些过期时间

18:13.730 --> 18:14.570
max age

18:14.970 --> 18:15.930
max age

18:15.930 --> 18:18.770
max age我们还在这里配置一下

18:19.290 --> 18:20.970
就是cokie的过期时间

18:21.010 --> 18:21.890
过期时间的话

18:21.890 --> 18:23.530
秒多少秒之后

18:23.770 --> 18:24.930
我们就一天之后

18:24.930 --> 18:25.410
好吧

18:25.410 --> 18:26.530
一天之后过期

18:26.970 --> 18:30.090
这里我们使用24小时

18:30.650 --> 18:31.530
每个小时

18:31.690 --> 18:32.530
60分钟

18:32.530 --> 18:33.610
每分钟60秒

18:33.690 --> 18:34.130
OK

18:34.130 --> 18:36.450
那么这次是一天的表述

18:37.570 --> 18:38.010
好

18:38.010 --> 18:40.050
然后再加上一个pass

18:41.290 --> 18:42.410
就是不然的话

18:42.410 --> 18:43.490
他就按不然的话

18:43.490 --> 18:44.250
你们学过了

18:44.410 --> 18:45.170
我就不再解释了

18:45.290 --> 18:46.370
学过了也不再解释了

18:46.370 --> 18:46.850
不然的话

18:46.850 --> 18:48.130
比方说这个页面请求的话

18:48.130 --> 18:49.970
那么比方请求的是API

18:50.690 --> 18:52.850
那么他就会把cokie加到API

18:52.850 --> 18:53.610
UserLogin里边

18:53.610 --> 18:54.290
那么其他的一面

18:54.290 --> 18:55.530
他不会附带cokie的

18:55.530 --> 18:57.090
我们把它设为跟路径

18:57.450 --> 18:59.130
那么这一块是不是就搞定了

18:59.330 --> 19:00.690
那么现在我们来看一下

19:00.690 --> 19:01.770
这个写好了之后

19:03.770 --> 19:04.610
写好了之后

19:04.610 --> 19:05.890
这一部分是不会影响的

19:05.890 --> 19:07.090
这一部分是不会影响的

19:07.090 --> 19:08.970
就是他主动发动请求到数据服务

19:08.970 --> 19:09.890
其实不会影响的

19:09.890 --> 19:10.770
主要是浏览器

19:10.770 --> 19:11.930
阿迦克斯的时候

19:12.170 --> 19:13.370
那么会影响

19:13.370 --> 19:15.130
他要回发给浏览器

19:15.130 --> 19:15.290
对吧

19:15.290 --> 19:17.050
我们带礼模块会回发给浏览器

19:17.050 --> 19:18.450
那么这个时候他就不会

19:19.050 --> 19:20.050
使用header

19:20.050 --> 19:20.970
而使用的是什么呢

19:20.970 --> 19:21.890
使用的是cokie

19:21.890 --> 19:23.050
你看一下login

19:24.050 --> 19:25.050
有header吗

19:25.250 --> 19:25.650
没有

19:25.650 --> 19:27.130
有那个australization header吗

19:27.130 --> 19:27.450
没有

19:27.450 --> 19:28.450
他变成了cokie

19:28.650 --> 19:29.210
对吧

19:29.210 --> 19:31.130
这是我们带礼服务器给我们转发的

19:31.130 --> 19:34.010
把数据服务器的header变成了cokie

19:34.010 --> 19:34.450
是吧

19:34.450 --> 19:35.290
变成cokie

19:35.530 --> 19:35.850
好

19:35.850 --> 19:36.570
咱们来看一下

19:36.570 --> 19:38.930
咱们的浏览器里边有没有cokie呢

19:41.160 --> 19:41.640
token

19:41.640 --> 19:42.800
你看这边有cokie了

19:43.040 --> 19:45.320
域名的客号是内容就是我们的token

19:46.320 --> 19:47.760
然后路径

19:47.760 --> 19:48.680
pass

19:48.680 --> 19:49.760
跟路径

19:50.080 --> 19:51.120
创建时间呢

19:51.120 --> 19:52.200
就是刚才创建的

19:52.200 --> 19:53.520
到期时间是明天

19:53.680 --> 19:55.080
明天同一个时候到期

19:55.280 --> 19:55.720
对吧

19:55.720 --> 19:57.600
那么现在就完成了cokie的创建了

19:58.320 --> 19:58.600
好

19:58.600 --> 20:00.120
那么这一部分是不是完事了

20:00.240 --> 20:00.600
对吧

20:00.600 --> 20:01.680
这一部分是完事了

20:01.680 --> 20:01.960
好

20:01.960 --> 20:03.320
接下来我们来看另一部分

20:03.320 --> 20:04.360
另一部分是什么呢

20:04.360 --> 20:05.440
就是who am i

20:06.520 --> 20:07.320
就这

20:08.000 --> 20:08.840
login已经完事了

20:08.840 --> 20:09.200
对吧

20:09.200 --> 20:10.800
那么现在我们来看一下who am i

20:11.920 --> 20:14.880
那么我们能不能得到我们的当前拥护是谁呢

20:14.920 --> 20:15.920
我们来看一下

20:16.240 --> 20:17.720
这个又有什么样的问题

20:17.800 --> 20:18.440
刷新

20:18.920 --> 20:21.200
你会看到了这里的data能升到

20:21.560 --> 20:22.280
表示什么意思呢

20:22.280 --> 20:24.440
表示服务器说你没有登录

20:24.640 --> 20:25.520
数据服务器说的

20:25.520 --> 20:26.840
那么这里的转发过来了

20:27.200 --> 20:28.200
他说你没登录

20:28.520 --> 20:29.600
但是我们实际上登录了

20:29.960 --> 20:31.320
他为什么变成奈了

20:31.320 --> 20:32.440
接下来我们来看请求

20:33.560 --> 20:34.320
来看我们的请求

20:34.320 --> 20:34.920
who am i

20:35.640 --> 20:35.840
好

20:35.840 --> 20:36.640
这个请求里面

20:36.640 --> 20:37.440
你会看到

20:38.120 --> 20:41.160
我们用这个阿加克斯去请求的

20:41.160 --> 20:42.800
阿加克斯去请求的时候

20:43.040 --> 20:44.440
有没有附带header

20:44.680 --> 20:46.800
有没有附带这个authorization header

20:46.880 --> 20:47.360
没有

20:47.360 --> 20:47.840
对吧

20:48.000 --> 20:49.040
那么这个地方

20:49.040 --> 20:50.440
他转发请求很简单

20:50.440 --> 20:52.120
他就直接把我们请求扔过去了

20:52.520 --> 20:53.800
而这边是没有header的

20:53.800 --> 20:54.040
对吧

20:54.040 --> 20:54.640
是没有header的

20:54.640 --> 20:55.600
所以数据服务器看

20:55.760 --> 20:57.080
从header里面读不到什么

20:57.080 --> 20:58.480
读不到这个authorization

20:58.480 --> 21:00.120
所以说他就认为里面没有登录

21:00.120 --> 21:02.160
给你返回一个data为闹

21:02.160 --> 21:03.480
那么他就直接转发回来了

21:03.600 --> 21:04.080
对吧

21:04.960 --> 21:05.760
所以说现在

21:05.760 --> 21:07.520
刚才我们解决了想用的问题

21:07.520 --> 21:09.120
就是数据服务器根本想用了

21:09.120 --> 21:10.400
一个header里面有token

21:10.400 --> 21:12.040
我把token变成cookie

21:12.560 --> 21:13.400
放到浏览器

21:13.400 --> 21:15.120
那么现在要解决请求的问题

21:15.120 --> 21:16.960
就浏览器给我们的代理服务器

21:17.040 --> 21:18.880
它是一个Cookie

21:18.880 --> 21:19.840
那么代理服务器

21:19.840 --> 21:21.400
要把它转换成header

21:21.400 --> 21:22.760
发送给数据服务器

21:22.960 --> 21:23.440
对吧

21:23.440 --> 21:25.760
一来一回都要完成这个功能

21:25.760 --> 21:26.680
所以说我们到这边

21:26.680 --> 21:28.240
代理服务器还要做一件事

21:28.240 --> 21:30.080
我们刚才的只是解决了想用

21:30.080 --> 21:31.480
服务器那边给我了header

21:31.480 --> 21:32.720
那么我把它变成cookie

21:32.720 --> 21:34.240
那么客户端里面给我的cookie

21:34.240 --> 21:35.400
我要把它变成header

21:35.400 --> 21:35.880
对吧

21:36.440 --> 21:38.000
所以说我们要解决英文问题

21:38.400 --> 21:39.160
那么同样的方式

21:39.160 --> 21:40.040
我们这里可以查一查

21:40.040 --> 21:41.760
叫做umproxy

21:42.920 --> 21:43.560
还有一个rig

21:43.560 --> 21:43.920
对吧

21:43.920 --> 21:44.400
rig

21:45.120 --> 21:45.440
好

21:45.440 --> 21:46.280
咱们来写一下

21:47.000 --> 21:48.280
就当请求的时候

21:48.280 --> 21:49.720
上面我没有用到rig

21:49.720 --> 21:50.880
所以我们就可以去掉

21:51.200 --> 21:53.600
当请求的时候服务端给我们请求对象

21:53.600 --> 21:55.520
然后我们就要响应给服务端的请求

21:55.520 --> 21:56.280
响应对象

21:56.280 --> 21:57.440
这是我们代理的请求

21:57.440 --> 21:57.760
对吧

21:57.760 --> 21:58.800
刚才是代理的响应

21:58.800 --> 21:59.920
这是代理的请求

22:00.520 --> 22:01.400
我们现在要干嘛

22:01.720 --> 22:03.520
是不是要在请求里面设置header

22:03.520 --> 22:04.520
他告诉你怎么去设置

22:04.520 --> 22:04.840
对吧

22:04.840 --> 22:05.760
非常简单

22:05.760 --> 22:06.680
设置什么header

22:06.920 --> 22:08.200
authorization

22:08.440 --> 22:08.640
对吧

22:08.640 --> 22:09.440
是不是这个header

22:09.760 --> 22:11.440
我们要把这个header设置为什么

22:11.440 --> 22:13.160
设置为那个cookie

22:13.160 --> 22:15.800
就是通过rig里面来的cookie

22:15.840 --> 22:18.640
所以说我们这里首先从rig里面得到这个cookie

22:18.640 --> 22:19.480
怎么得到呢

22:20.240 --> 22:21.240
他是这样子

22:21.600 --> 22:22.640
得到这个cookie的话

22:22.640 --> 22:23.360
他这里告诉你

22:24.720 --> 22:25.840
他里边有了

22:26.120 --> 22:28.680
他给你自动的安装了一些中间线

22:28.680 --> 22:30.360
就是包括了个cookie poster

22:30.720 --> 22:31.680
包括cookie poster

22:31.680 --> 22:33.480
所以说你可以直接在cookie室里面

22:33.920 --> 22:35.000
拿到这个cookie

22:35.280 --> 22:36.360
我们拿个cookie

22:36.480 --> 22:37.880
就是cookie key

22:38.080 --> 22:38.680
cookie net

22:38.680 --> 22:38.960
对吧

22:38.960 --> 22:40.480
是不是通通他来拿到cookie

22:40.840 --> 22:41.920
拿到cookie之后

22:42.320 --> 22:44.080
我们是不是就拿到这个token了

22:44.080 --> 22:44.680
当然

22:45.080 --> 22:46.040
有可能他没有登录

22:46.040 --> 22:46.520
对吧

22:46.520 --> 22:47.600
有可能他没有登录

22:47.600 --> 22:48.480
如果他没有登录

22:48.480 --> 22:49.800
只有他登录了过后

22:50.360 --> 22:52.160
那么我才给他附加这个header

22:53.200 --> 22:54.160
附加这个header

22:55.640 --> 22:57.040
因为他有可能没有这个cookie

22:57.680 --> 22:58.640
如果说有cookie的话

22:58.640 --> 22:59.720
那么我们把这个cookie

22:59.720 --> 23:00.800
放到这个header里面

23:02.280 --> 23:03.440
我们来这样子看一下

23:03.880 --> 23:04.360
保存

23:05.040 --> 23:06.320
这边我们再来刷新

23:06.720 --> 23:07.200
刷新

23:09.080 --> 23:09.640
你看

23:09.760 --> 23:10.800
现在说明拿到数据了

23:11.160 --> 23:13.960
尽管我们客户端给我们的代理服务器

23:13.960 --> 23:14.640
发送的是什么

23:14.760 --> 23:15.720
发送的是cookie

23:15.880 --> 23:17.000
那么代理服务器

23:17.280 --> 23:19.240
仍然可以把这个cookie

23:19.240 --> 23:20.480
转换成header

23:20.480 --> 23:22.160
发送到我们的真实的数据服务器

23:22.160 --> 23:23.040
数据服务器拿到结果

23:23.040 --> 23:24.080
想给他

23:24.080 --> 23:25.200
他就想一个浏览器

23:25.400 --> 23:25.840
对吧

23:26.040 --> 23:27.560
那么这样子的好处在于什么呢

23:27.560 --> 23:29.360
因为cookie对浏览器的好处在于

23:29.360 --> 23:30.440
我随便什么请求

23:30.440 --> 23:31.520
不管是阿迦克斯也好

23:31.520 --> 23:32.680
还是在这里请求

23:32.680 --> 23:33.640
他都会发送cookie

23:33.640 --> 23:35.240
你看我们在这里请求

23:35.960 --> 23:37.240
我们看一下页面

23:38.200 --> 23:39.360
我们这里请求logging页面

23:39.360 --> 23:41.440
你看他是不是也会把这个cookie发送出去

23:41.440 --> 23:41.880
对吧

23:41.880 --> 23:43.240
那么时刻他会

23:43.240 --> 23:44.280
他会时时刻刻的

23:44.320 --> 23:45.440
把我们的身份信息

23:45.440 --> 23:46.680
发送给我们的服务器

23:47.160 --> 23:47.920
那是吧

23:48.240 --> 23:49.880
那么这个的问题就搞定了

23:50.080 --> 23:50.640
当然了

23:50.640 --> 23:51.680
助销也很简单

23:51.680 --> 23:52.720
助销很简单

23:52.720 --> 23:54.360
助销的话我就非常暴力的

23:55.160 --> 23:55.680
你看吧

23:55.680 --> 23:56.520
来

23:56.520 --> 23:57.600
我来玩助销吧

23:58.200 --> 23:59.360
助销叫logging out

24:01.720 --> 24:02.960
我用的是很暴力的方式

24:04.680 --> 24:05.560
logging out

24:08.390 --> 24:08.950
运行

24:08.950 --> 24:09.510
助销

24:11.390 --> 24:12.550
这个服务器要爆错

24:12.550 --> 24:12.990
对吧

24:12.990 --> 24:13.710
服务器要爆错

24:13.710 --> 24:14.590
因为服务器这边

24:14.870 --> 24:17.710
服务器这边是没有这个document的

24:18.070 --> 24:19.430
所以说我们这里还是判断一下

24:19.950 --> 24:21.270
判断一下是不是服务器

24:22.870 --> 24:23.550
import

24:23.830 --> 24:25.270
就是ease browser

24:27.870 --> 24:28.390
from

24:29.350 --> 24:30.510
uqt

24:30.830 --> 24:31.510
ease browser

24:33.030 --> 24:33.830
这里判断一下

24:34.390 --> 24:35.750
如果说ease browser

24:35.750 --> 24:37.150
是浏览器的情况下

24:37.150 --> 24:38.750
我们才这样子做

24:39.990 --> 24:40.710
服务器不管了

24:42.310 --> 24:44.190
那么现在我们来看一下浏览器里面cookie

24:46.790 --> 24:47.350
cookie

24:48.870 --> 24:50.230
好像不行了

24:51.990 --> 24:52.550
好像不行

24:54.950 --> 24:57.470
这里好像还真不行

24:58.070 --> 24:59.750
那我们还是用那个

25:01.150 --> 25:03.470
cookie等于空制服务器

25:04.070 --> 25:04.430
小心

25:05.110 --> 25:05.390
再来

25:06.910 --> 25:08.550
他给我加了一个空的cookie了

25:08.550 --> 25:09.950
他给我加了一个空的cookie了

25:09.950 --> 25:10.670
那是不行的

25:10.670 --> 25:12.190
那我解说了

25:12.390 --> 25:14.310
那么这个地方我们干脆用一个第三方库

25:14.430 --> 25:16.430
不然的话数据前也挺麻烦的

25:16.830 --> 25:17.750
我们使用一个第三方库

25:18.750 --> 25:19.470
叫做cookie

25:19.630 --> 25:22.030
这个反正这个库以后我们还会用到

25:22.030 --> 25:23.310
我们问题都还没有解决完

25:24.030 --> 25:25.150
还有一个小问题

25:34.360 --> 25:34.880
cookie

25:36.960 --> 25:37.600
用这个库

25:38.280 --> 25:40.840
那么这个库来帮助我们来处理这个cookie

25:41.720 --> 25:42.600
这里我们来看一下

25:42.600 --> 25:43.360
这个库怎么做

25:43.360 --> 25:44.160
首先我们安装

25:45.000 --> 25:46.120
首先我们安装这个库

25:46.400 --> 25:47.640
npm i cookie

25:47.960 --> 25:49.120
这个库安装起来

25:49.280 --> 25:50.000
然后看一下怎么用

25:50.000 --> 25:51.360
他可以帮我们post

25:51.480 --> 25:52.640
把一个cookie制服串

25:52.640 --> 25:53.960
把一个cookie制服串

25:53.960 --> 25:55.800
只解析为一个cookie的对象

25:56.080 --> 25:56.960
他可以做这么一件事

25:56.960 --> 25:58.280
这个是这件事很用用的

25:58.560 --> 26:00.320
我们一会儿都还之后都还要用

26:01.360 --> 26:02.760
另外我们来看一下

26:04.040 --> 26:04.840
还有什么

26:08.020 --> 26:08.780
我看一下

26:10.620 --> 26:11.660
这里cookie

26:11.860 --> 26:14.220
他可以就是蓄裂化

26:14.220 --> 26:15.860
把它蓄裂化成一个cookie的

26:15.860 --> 26:17.900
就是一个一条语句

26:18.340 --> 26:19.660
蓄裂化成一条语句

26:20.780 --> 26:22.460
然后cookie serialize

26:22.860 --> 26:23.580
serialize

26:23.900 --> 26:24.820
那么这里

26:25.380 --> 26:26.540
key value值

26:26.540 --> 26:26.820
对吧

26:26.820 --> 26:27.660
key value值

26:27.940 --> 26:29.660
那么这里的第三个是option

26:29.660 --> 26:30.380
明白了

26:30.380 --> 26:30.820
行了

26:30.820 --> 26:31.700
那我们这里

26:31.820 --> 26:33.100
清空cookie非常简单

26:33.100 --> 26:33.620
就用什么呢

26:33.620 --> 26:34.340
就导入这个

26:34.340 --> 26:35.300
导入这个库

26:35.980 --> 26:36.620
import

26:37.060 --> 26:37.780
这个什么库

26:37.780 --> 26:38.580
叫做

26:38.980 --> 26:39.540
cookie

26:40.020 --> 26:40.660
cookie

26:40.940 --> 26:41.300
from

26:41.780 --> 26:42.260
cookie

26:43.020 --> 26:44.780
那么这里边还提供了一些方法

26:45.980 --> 26:46.540
cookie

26:47.180 --> 26:47.980
serialize

26:49.060 --> 26:49.940
这个名字

26:49.940 --> 26:50.580
名字就是hoken

26:50.580 --> 26:50.780
对吧

26:50.780 --> 26:52.580
我们要解决token的那个cookie

26:52.580 --> 26:53.500
那么值

26:53.500 --> 26:54.820
值就把它设为一个空的值

26:55.460 --> 26:56.780
把它设成一个空的值

26:57.380 --> 26:57.940
好

26:57.940 --> 26:58.900
那么option是

26:58.900 --> 26:59.780
后面是个对象

26:59.780 --> 27:00.900
option是就配置

27:00.900 --> 27:02.580
那么我们无非就是把这个什么了

27:02.580 --> 27:04.540
把那个max age设为0

27:04.860 --> 27:05.180
对吧

27:05.180 --> 27:06.580
把max age设为0

27:07.340 --> 27:08.180
是不是就完事了

27:08.180 --> 27:09.380
把设为0是不是就

27:09.580 --> 27:11.380
相当于是让它立即过期了

27:11.620 --> 27:11.980
对吧

27:11.980 --> 27:12.900
让它立即过期了

27:12.900 --> 27:13.180
好

27:13.180 --> 27:14.180
咱们来试一下

27:14.180 --> 27:14.900
现在我们来

27:14.900 --> 27:15.660
来运行

27:15.660 --> 27:16.460
跟平行的装

27:16.460 --> 27:16.980
对吧

27:21.280 --> 27:22.080
运行

27:22.280 --> 27:23.320
接下来我们来刷新

27:25.000 --> 27:25.600
刷新

27:27.600 --> 27:28.320
刷新一下

27:33.440 --> 27:34.120
刷新之后

27:34.120 --> 27:35.120
我们来看一下cookie

27:36.840 --> 27:37.520
token

27:37.880 --> 27:38.840
token的那个cookie呢

27:39.240 --> 27:41.760
那种还没有更新是吧

27:42.240 --> 27:43.640
这里来我看一下

27:43.640 --> 27:44.120
为什么

27:44.400 --> 27:45.000
logging

27:46.200 --> 27:47.080
logging out

27:48.320 --> 27:49.480
cookie serialize

27:49.800 --> 27:50.440
token

27:54.230 --> 27:55.030
明白了

27:55.030 --> 27:56.750
它是返回一个支付串

27:56.750 --> 27:57.910
它是返回一个支付串

27:57.910 --> 27:58.470
result

27:59.150 --> 28:01.030
然后你自己要去用这个支付串

28:01.030 --> 28:02.710
直接用这个支付串去设置

28:02.710 --> 28:03.430
我们来看一下

28:03.710 --> 28:04.150
你看

28:04.150 --> 28:05.470
所以把它变成这个东西

28:05.630 --> 28:06.750
那么我们来设置一下

28:06.750 --> 28:07.470
document

28:08.910 --> 28:09.390
cookie

28:10.150 --> 28:11.030
document result

28:11.790 --> 28:12.470
保存

28:12.710 --> 28:13.150
刷新

28:14.350 --> 28:14.550
好

28:14.550 --> 28:15.550
现在我们来看一下cookie

28:17.690 --> 28:18.170
token

28:18.170 --> 28:20.050
你看那种是不是消除掉了

28:20.170 --> 28:20.850
那种消除掉了

28:20.850 --> 28:23.810
然后到期时间是不是已经立即过期了

28:24.050 --> 28:24.210
好

28:24.210 --> 28:25.850
那么现在我们来刷新流量器

28:25.850 --> 28:26.370
刷新流量器

28:26.370 --> 28:28.410
看它还会不会附带这个cookie过去

28:30.330 --> 28:31.850
看一下会不会附带cookie

28:32.770 --> 28:33.770
因为它过期的流量器

28:33.770 --> 28:35.170
肯定不会附带cookie过去了

28:35.170 --> 28:35.610
你看

28:35.690 --> 28:37.490
我们刚才的cookie就不会附带过去了

28:37.490 --> 28:37.850
对吧

28:37.850 --> 28:38.770
不会发生到服务器了

28:39.650 --> 28:41.490
当然你自己要手动写也可以

28:42.090 --> 28:42.370
OK

28:42.370 --> 28:44.730
那么现在我们这个注销就搞定了

28:45.450 --> 28:46.410
这个注销就搞定了

28:46.810 --> 28:47.010
好

28:47.010 --> 28:47.770
接下来还有个问题

28:48.610 --> 28:49.370
还有什么问题

28:49.370 --> 28:50.210
接下来我们来看

28:51.370 --> 28:55.170
如果说我们这里要进行一个服务端券上

28:56.850 --> 28:57.490
export

28:57.850 --> 28:58.370
sync

28:59.570 --> 29:00.170
放个信

29:00.170 --> 29:01.330
这个问题解决就没了

29:01.930 --> 29:03.690
不要get server-side

29:04.410 --> 29:04.930
probs

29:05.810 --> 29:07.490
要进行一个服务端渲染

29:07.490 --> 29:08.890
那么服务端的时候

29:08.890 --> 29:10.170
服务端会去请求

29:10.170 --> 29:11.130
我当前登录没有

29:11.650 --> 29:12.450
有可能没有登录

29:12.450 --> 29:13.370
我要跳转页面

29:13.370 --> 29:13.650
对吧

29:13.650 --> 29:15.050
我要做一些别的事情

29:15.050 --> 29:17.370
就是完全是在服务端操作的

29:17.810 --> 29:18.610
跟客户端这边

29:18.610 --> 29:20.250
阿加克是请求没有什么关系

29:20.250 --> 29:21.210
也就是这样子

29:21.210 --> 29:23.290
浏览区请求服务器一个页面

29:23.290 --> 29:26.010
服务器这个时候要跟数据服务器打交道

29:26.890 --> 29:27.850
刚才不是正常的吗

29:27.850 --> 29:29.570
你看一下有些特殊的情况就不正常了

29:30.570 --> 29:32.570
服务器要跟直接跟数据服务器打交道

29:32.570 --> 29:34.410
那么我要问一下我现在登录没有

29:34.410 --> 29:35.410
你看一下就出问题了

29:36.610 --> 29:36.930
好

29:36.930 --> 29:37.610
咱们来看一下

29:38.130 --> 29:39.650
我们这里能用互MI

29:40.410 --> 29:41.410
我们先来登录

29:41.730 --> 29:42.490
先来登录

29:43.690 --> 29:44.210
先来登录

29:44.210 --> 29:45.730
那么这个地方我先返回一个

29:45.730 --> 29:46.690
先返回一个空的

29:47.170 --> 29:47.850
这个必须要返回

29:47.850 --> 29:48.730
不返回要爆出的

29:49.570 --> 29:50.330
这样我们看

29:51.250 --> 29:51.890
先登录

29:51.890 --> 29:52.610
先登录再说

29:53.330 --> 29:53.490
好

29:53.490 --> 29:54.210
现在登录了

29:54.210 --> 29:54.730
你看着

29:54.730 --> 29:55.410
现在登录了

29:55.410 --> 29:56.090
已经登录了

29:56.490 --> 29:57.490
那么现在我们来看一下

29:57.490 --> 29:58.610
这边再来看一次

29:58.610 --> 29:59.810
互MI有没有东西

29:59.810 --> 30:00.570
那肯定有了

30:01.530 --> 30:02.490
在这里是没问题的

30:03.530 --> 30:04.970
互MI实际上有了

30:04.970 --> 30:05.410
对吧

30:06.210 --> 30:07.730
但是你会发现服务器没有

30:09.210 --> 30:10.730
你看这是服务器的相应结果

30:10.730 --> 30:11.970
服务器是没有的

30:11.970 --> 30:13.290
客户端是有的

30:13.290 --> 30:14.130
服务器是没有

30:14.890 --> 30:16.090
为什么要举这个例子

30:16.090 --> 30:17.490
就是我们要专门的服务端

30:17.490 --> 30:18.930
来看一下这个问题

30:18.930 --> 30:20.250
服务端是会出问题的

30:20.250 --> 30:21.210
这里互MI

30:22.850 --> 30:23.130
好

30:23.130 --> 30:24.010
保存

30:24.010 --> 30:24.330
刷新

30:25.410 --> 30:25.690
你看

30:27.050 --> 30:27.850
看服务器

30:27.850 --> 30:28.370
是不是闹了

30:29.570 --> 30:31.530
为什么客户端他能得到

30:31.530 --> 30:32.370
服务器得到呢

30:33.130 --> 30:33.250
好

30:33.250 --> 30:33.770
想一想

30:36.040 --> 30:37.640
因为客户端能得到

30:37.640 --> 30:39.960
是因为客户端在浏览器里边

30:39.960 --> 30:41.360
通过阿迦克斯请求

30:41.360 --> 30:42.720
是不是把Cookie带过去了

30:43.400 --> 30:44.800
把Cookie带给服务器了

30:45.320 --> 30:46.200
那么服务器

30:46.200 --> 30:47.560
他把它转换成Header

30:48.240 --> 30:49.120
放到服务器服务器

30:49.120 --> 30:50.440
数据服务器哪黑的一看

30:50.440 --> 30:51.280
确实登录过了

30:51.280 --> 30:53.040
然后就反悔给他一个数据了

30:53.040 --> 30:53.480
对吧

30:53.480 --> 30:54.400
他在给浏览器

30:54.400 --> 30:55.560
所以浏览器达到了数据了

30:56.120 --> 30:56.600
对不对

30:56.600 --> 30:57.320
说客户端

30:57.320 --> 30:58.560
阿迦克斯请求是能得到的

30:59.120 --> 31:00.320
那这里为什么得不到呢

31:00.320 --> 31:00.920
有没有东西说不对

31:00.920 --> 31:02.960
那这里不是也会给他Cookie吗

31:04.120 --> 31:04.840
但是你要注意

31:05.080 --> 31:06.640
这种请求的话

31:06.640 --> 31:08.160
他会不会经过这个中间见

31:08.480 --> 31:08.960
不会

31:08.960 --> 31:10.200
他是直接请求的页面

31:10.200 --> 31:11.920
他是运行的页面的这个地方

31:12.400 --> 31:15.040
因此他虽然说浏览器给了他Cookie

31:15.040 --> 31:16.440
浏览器给了他Cookie

31:16.720 --> 31:17.720
请求页面的时候

31:18.520 --> 31:19.800
他这个时候是这种情况

31:20.440 --> 31:22.080
他请求了页面的时候

31:22.760 --> 31:23.920
那么他给了他Cookie没有

31:23.920 --> 31:24.320
给了

31:24.840 --> 31:25.880
你看Cookie给他的

31:25.880 --> 31:26.560
Token

31:27.000 --> 31:29.520
但是这个地方有没有用这个Cookie

31:29.520 --> 31:30.200
没有

31:30.200 --> 31:32.360
他是直接请求的数据服务器

31:32.360 --> 31:34.120
那么这个时候请求户安卖

31:34.120 --> 31:34.920
用的是什么呢

31:34.920 --> 31:36.600
你看着他用的是这个

31:37.240 --> 31:38.120
用的是这个康飞

31:38.120 --> 31:39.960
他只是改变了Bass UIL

31:39.960 --> 31:40.600
对吧

31:40.600 --> 31:41.920
只是改变了这个

31:41.920 --> 31:45.240
因此他没有把Headers里面加进去

31:46.000 --> 31:46.520
对吧

31:46.520 --> 31:48.360
所以说我们对于浏览器而言

31:48.360 --> 31:50.600
是不是还要去手动的加一个Headers

31:51.360 --> 31:53.600
是不是要加一个Headers

31:54.000 --> 31:57.120
Headers里面是不是要加一个Otherization

31:57.240 --> 31:58.840
Otherization

31:58.960 --> 31:59.600
对吧

31:59.600 --> 32:00.400
是不是要把

32:00.440 --> 32:02.840
那么这个地方是不是要把Cookie中的

32:03.120 --> 32:05.680
Cookie中的Token加到这

32:06.040 --> 32:06.600
对不对

32:07.400 --> 32:09.760
那问题是这里怎么来得到Cookie中的Token的

32:11.080 --> 32:13.720
Cookie中的Token是不是从这里请求带过来的

32:13.720 --> 32:14.400
这里特别绕

32:15.720 --> 32:18.280
考验大家就是基本功的时候到了

32:18.720 --> 32:20.240
这个地方是不是来自于请求

32:20.240 --> 32:21.240
因为这是服务端旋转

32:21.280 --> 32:24.400
每一次请求都要到这个函数

32:24.400 --> 32:24.680
对吧

32:24.680 --> 32:26.000
每一次请求都会到这个函数

32:26.120 --> 32:28.280
那么这里边是不是来到一个请求

32:28.560 --> 32:28.880
对吧

32:28.880 --> 32:31.000
是不是来到一个Request这个对象

32:31.000 --> 32:31.840
一个请求

32:32.160 --> 32:32.680
对不对

32:32.960 --> 32:33.680
来这个请求

32:33.680 --> 32:35.480
这个请求里边是不是含有Cookie

32:35.760 --> 32:37.120
那么我们现在要做的是

32:37.720 --> 32:40.200
要把这个请求里边的Cookie

32:40.840 --> 32:43.360
当它发送请求的时候

32:43.360 --> 32:44.800
当它用一个小时发送请求的时候

32:44.800 --> 32:46.160
要放到它的Header里面

32:46.880 --> 32:47.960
所以要做这么一个处理

32:48.680 --> 32:49.760
那这个地方怎么办呢

32:50.600 --> 32:51.360
这个地方怎么办呢

32:51.360 --> 32:52.880
你在这个HooMI里面

32:52.880 --> 32:55.440
你又得不到这个请求对象

32:56.160 --> 32:57.120
所以都只能传递

32:57.720 --> 32:58.240
只能传递

32:58.240 --> 32:59.440
我们可以这样改造一下

32:59.440 --> 32:59.920
看着

33:00.400 --> 33:01.440
我们可以这样改造一下

33:01.720 --> 33:03.080
把这个Request改造一下

33:03.640 --> 33:04.440
改造成什么呢

33:05.440 --> 33:07.520
我们这里单独导出一个方法

33:08.240 --> 33:11.720
叫做GetServer服务端的Request

33:13.400 --> 33:14.840
它不是要创建一个Instance吗

33:14.840 --> 33:16.480
不是要创建一个XS实力吗

33:16.480 --> 33:16.960
对吧

33:16.960 --> 33:18.600
GetServerInstance

33:19.120 --> 33:19.760
Instance

33:21.680 --> 33:23.600
专门来得到一个服务端Instance

33:23.600 --> 33:24.360
那么这个时候

33:24.360 --> 33:25.960
你要把一个请求对象传给我

33:27.000 --> 33:28.440
我根据你这个请求对象

33:28.560 --> 33:29.680
来得到一个

33:29.840 --> 33:34.240
专门用于服务器端的XS实力

33:34.600 --> 33:35.920
那么这里我把它写过来

33:36.800 --> 33:37.880
首先这个地方

33:39.320 --> 33:40.240
这个BSUIO

33:40.240 --> 33:42.160
在这里写BSUIO

33:42.880 --> 33:43.480
等于这个

33:45.040 --> 33:45.320
好

33:45.320 --> 33:46.280
Header等于什么呢

33:46.280 --> 33:47.960
Header我们要从这个Cookie里面来

33:47.960 --> 33:48.840
它不一定有Cookie

33:48.840 --> 33:49.840
所以说我们要看一下

33:49.840 --> 33:51.040
到底有没有Cookie

33:51.400 --> 33:52.240
到底有没有Cookie

33:52.240 --> 33:52.960
我们要看一下

33:53.800 --> 33:54.600
这里怎么看呢

33:55.400 --> 33:55.760
看着

33:57.040 --> 33:58.280
如果说Rake

33:58.760 --> 34:00.520
这里边怎么来得到Cookie

34:00.520 --> 34:01.960
由于它不是API

34:01.960 --> 34:03.480
API里面得到的Cookie

34:03.480 --> 34:04.200
直接用Cookie

34:04.200 --> 34:04.880
它不是API

34:04.880 --> 34:06.080
所以说它没有解析

34:06.080 --> 34:08.360
你在自己通过头里边来得到

34:08.720 --> 34:10.000
通过个头里边来得到

34:10.000 --> 34:11.560
那么这里我们可以用Rake

34:11.560 --> 34:12.440
Header

34:12.800 --> 34:13.800
GetHeader

34:14.840 --> 34:15.760
GetHeader

34:15.760 --> 34:17.080
那么这个请求对象

34:17.080 --> 34:19.080
相当于是原始的ATTP

34:19.080 --> 34:20.000
Request对象

34:20.000 --> 34:20.840
得到Header

34:20.840 --> 34:21.960
Header里面来自于哪呢

34:21.960 --> 34:23.280
来自于Cookie

34:23.280 --> 34:23.720
对吧

34:23.720 --> 34:24.480
来自于这

34:25.160 --> 34:25.800
Cookie

34:27.400 --> 34:28.080
来自于这

34:29.080 --> 34:30.840
拿到这个Cookie之后

34:30.840 --> 34:31.760
是不是拿到一个Cookie

34:31.760 --> 34:32.640
它里边有很多Cookie

34:32.640 --> 34:33.120
对吧

34:33.120 --> 34:34.160
所有的Cookie都在这里边

34:34.160 --> 34:35.000
然后来解析

34:35.000 --> 34:35.920
是不是来解析

34:36.360 --> 34:37.360
解析这个Cookie

34:37.360 --> 34:38.520
那么用什么来解析

34:38.520 --> 34:40.600
是不是我们刚才安装了一个Cookie

34:41.840 --> 34:43.040
用这个Cookie可以解析

34:45.640 --> 34:46.200
Cookie

34:46.680 --> 34:47.360
Pose

34:47.880 --> 34:48.520
Cookie

34:49.080 --> 34:49.440
对吧

34:49.440 --> 34:50.280
是不是来解析

34:50.600 --> 34:52.000
那么来得到

34:54.520 --> 34:56.400
就是Cookie

34:57.320 --> 34:58.040
OBG

34:58.360 --> 34:59.280
来得到这个对象

34:59.480 --> 35:00.360
拿到对象里面

35:00.360 --> 35:01.680
对象里面是不是可以拿到

35:01.680 --> 35:02.600
给他看一下

35:02.600 --> 35:03.280
这个文档

35:04.640 --> 35:05.240
Pose

35:06.920 --> 35:07.240
你看

35:07.240 --> 35:09.080
是不是把这种格式的Cookie

35:09.080 --> 35:10.400
转发成对象了

35:10.400 --> 35:11.280
我们看一下对象里面

35:11.280 --> 35:12.200
有没有token属性

35:12.200 --> 35:12.720
对吧

35:12.720 --> 35:13.560
判断一下

35:14.320 --> 35:15.000
Cookie

35:15.000 --> 35:17.160
OBG里面有没有token属性

35:17.160 --> 35:19.320
如果说有这个token属性的话

35:19.320 --> 35:20.120
那怎么办呢

35:20.120 --> 35:22.760
是不是我们要config里面加一个Headers

35:23.880 --> 35:24.800
Headers它的什么

35:24.800 --> 35:26.960
Orcerization

35:26.960 --> 35:27.880
应该等于什么

35:27.880 --> 35:28.560
Cookie

35:28.560 --> 35:29.240
OBG

35:29.360 --> 35:29.960
token

35:29.960 --> 35:30.480
对吧

35:30.480 --> 35:31.680
所以加上一个Headers

35:31.680 --> 35:32.840
那么我们请求的时候

35:32.840 --> 35:33.960
如果说客户端

35:33.960 --> 35:35.040
客户端那边的请求

35:35.040 --> 35:36.520
给我传过来了Cookie

35:36.520 --> 35:37.440
那么我就把这个Cookie

35:37.440 --> 35:38.920
附带到头里面

35:38.920 --> 35:40.240
附带到头里面

35:40.720 --> 35:40.920
好

35:40.920 --> 35:41.720
那么最后呢

35:41.720 --> 35:42.640
我创建一个

35:42.640 --> 35:43.520
通过Return

35:43.520 --> 35:44.800
创建一个什么Axious

35:44.800 --> 35:45.680
Create

35:45.680 --> 35:46.760
config传进去

35:46.760 --> 35:48.480
那么这就为单独为服务器

35:48.480 --> 35:49.400
来创建了一个

35:49.400 --> 35:51.520
一个就是Axious的Instance

35:52.320 --> 35:52.880
对吧

35:53.080 --> 35:53.280
好

35:53.280 --> 35:54.400
那么这里

35:54.400 --> 35:55.120
那么这里呢

35:55.120 --> 35:57.040
如果说你要得到单个实力的话

35:57.240 --> 35:59.160
如果说你不根据Rake来请求的话

35:59.200 --> 36:00.760
那么我们这里还可以判断一下

36:00.760 --> 36:03.040
这个Rake请求Rake到底有没有值

36:03.040 --> 36:04.520
如果说Rake有值的情况下

36:04.520 --> 36:05.280
我才这么做

36:06.760 --> 36:07.840
Rake有值的情况下

36:07.840 --> 36:08.440
我才这么做

36:08.440 --> 36:09.640
Rake没有值的话

36:09.640 --> 36:11.560
也说你给我传ND犯的话

36:11.560 --> 36:13.640
那么我只是加一个BassURL就行了

36:13.760 --> 36:15.040
所以说这个部分

36:15.040 --> 36:16.400
我们就可以改造一下了

36:17.000 --> 36:18.440
如果说你是服务器端

36:18.720 --> 36:19.560
如果说你什么

36:19.560 --> 36:21.400
你像直接得到这个实力的话

36:21.640 --> 36:23.160
那么我就这里呢

36:23.160 --> 36:24.440
我就可以用这种方式

36:25.440 --> 36:26.360
Instance

36:30.040 --> 36:31.040
Instance

36:32.040 --> 36:33.720
GasServerInstance

36:33.720 --> 36:34.840
那么这里我不传D

36:34.840 --> 36:35.200
对吧

36:35.200 --> 36:35.840
不传D

36:35.840 --> 36:37.000
不传D这个Rake对象

36:37.000 --> 36:38.760
不传D这个Rake对象是不是拿到一个

36:38.760 --> 36:40.120
就是普通通的Instance

36:40.120 --> 36:41.520
它只是改变了BassURL

36:41.520 --> 36:41.760
对吧

36:41.760 --> 36:42.560
其他都没变

36:43.360 --> 36:45.080
当然如果说你传D的Rake对象的话

36:45.080 --> 36:45.680
那么OK

36:45.680 --> 36:47.320
那就会变成什么

36:47.320 --> 36:48.520
变成那个就是

36:50.440 --> 36:52.640
变成那个就是加了这个Header的

36:52.640 --> 36:53.000
对吧

36:53.000 --> 36:54.680
还要根据Cookie的情况来加Header

36:55.120 --> 36:55.640
对不对

36:56.120 --> 36:56.680
OK

36:56.680 --> 36:57.760
那么这一块呢

36:57.760 --> 36:58.680
我们是不是

36:59.120 --> 36:59.640
那么

37:00.280 --> 37:01.120
这是服务器

37:01.120 --> 37:02.120
那么客户端呢

37:02.120 --> 37:02.680
客户端

37:02.680 --> 37:03.600
客户端还要处理

37:03.600 --> 37:05.040
客户端的话就是Instance

37:05.640 --> 37:07.320
AxiousCreat

37:07.960 --> 37:08.920
没有任何东西

37:09.080 --> 37:10.040
没有任何配置

37:10.320 --> 37:11.440
这一部分不要了

37:11.440 --> 37:12.600
这里反过Instance

37:12.600 --> 37:13.040
于是呢

37:13.040 --> 37:14.480
这个模块还倒出了两个

37:14.480 --> 37:15.560
一个是单粒

37:15.560 --> 37:16.280
单粒模式

37:16.280 --> 37:17.240
只有一个实力

37:17.240 --> 37:18.480
服务端有一个

37:18.480 --> 37:19.400
客户端有一个

37:19.400 --> 37:19.720
对吧

37:19.720 --> 37:20.440
只创建一次

37:20.440 --> 37:21.320
因为这个东西是模块

37:21.320 --> 37:22.760
内部代码只行一次

37:23.240 --> 37:24.400
所以它只创建一个

37:24.400 --> 37:25.240
另一关要一个呢

37:25.240 --> 37:27.640
是根据请求的具体情况来创建

37:27.640 --> 37:27.880
对吧

37:27.920 --> 37:29.560
这是在专门用于服务端的

37:29.560 --> 37:30.960
那么两个都可以用了

37:30.960 --> 37:31.200
好

37:31.200 --> 37:32.880
那么这个地方写完了之后

37:33.600 --> 37:34.960
这个地方写完了之后

37:35.360 --> 37:37.400
我们到这个service里面

37:37.400 --> 37:38.480
我们稍微改造一下

37:38.480 --> 37:40.200
给service里面加上一个参数

37:40.200 --> 37:41.000
最后一个参数

37:41.000 --> 37:42.520
多加个参数就是Axious

37:43.760 --> 37:44.480
Axious

37:46.440 --> 37:47.280
它默认值呢

37:47.280 --> 37:48.400
就等于这个request

37:48.520 --> 37:49.280
就是这个单粒

37:49.280 --> 37:50.720
当然你可以给我传过来

37:50.720 --> 37:51.120
对吧

37:51.120 --> 37:52.640
你是不是可以给我传过来

37:54.120 --> 37:54.600
这里

37:55.200 --> 37:56.400
下面没有请求

37:57.040 --> 37:57.720
加进去

38:00.470 --> 38:00.790
也就是说

38:00.830 --> 38:02.350
它会多一个参数

38:02.350 --> 38:03.870
每个请求后面会多一个参数

38:03.870 --> 38:05.830
就是你可以把request对象

38:06.150 --> 38:07.350
就是Axious的实力

38:07.350 --> 38:08.390
手动给我传过来

38:08.390 --> 38:09.670
如果说你不传递的话

38:09.670 --> 38:10.710
就像我们之前都没有传递

38:10.710 --> 38:11.150
对吧

38:11.350 --> 38:12.670
如果说你不传递的话

38:12.670 --> 38:13.350
不传递的话

38:13.350 --> 38:14.870
那么我就默认使用

38:15.710 --> 38:16.990
就是之前的那种情况

38:16.990 --> 38:17.990
默认使用这个

38:18.630 --> 38:20.270
所以不影响之前的代码

38:21.030 --> 38:22.470
那么如果说你传递的话

38:22.470 --> 38:24.310
我就用你新传递给我的

38:25.430 --> 38:25.710
好

38:25.710 --> 38:26.630
那么这里改了

38:26.630 --> 38:28.150
mv service里面也改一下

38:29.940 --> 38:30.660
Axious

38:30.660 --> 38:31.780
request

38:34.420 --> 38:34.780
好

38:34.780 --> 38:35.820
这里是Axious

38:35.820 --> 38:36.900
这里也是

38:36.900 --> 38:37.500
Axious

38:37.500 --> 38:38.380
request

38:40.380 --> 38:42.500
不能影响之前的内容

38:42.500 --> 38:43.980
是不能影响之前的内容的

38:44.580 --> 38:45.220
咱们来看一下

38:46.220 --> 38:47.660
之前的都不会受到影响

38:48.540 --> 38:48.980
刷新

38:50.380 --> 38:50.780
电影

38:52.580 --> 38:53.020
你看

38:53.020 --> 38:54.420
是不是之前的都不会受影响

38:57.540 --> 38:58.740
之前的都不会受影响

38:59.140 --> 38:59.540
登录

39:00.260 --> 39:00.620
电影

39:01.820 --> 39:03.060
这里为什么会刷新呢

39:03.980 --> 39:05.180
顺便把一个问题解决了

39:05.180 --> 39:06.260
为什么会刷新呢

39:06.260 --> 39:06.660
我看一下

39:07.780 --> 39:08.380
poohi

39:09.180 --> 39:09.860
movie

39:09.860 --> 39:10.700
不是这

39:10.700 --> 39:11.420
这是分页

39:11.420 --> 39:12.300
这是分页

39:12.820 --> 39:15.220
然后我这里用了A元素

39:15.580 --> 39:16.060
A元素

39:16.060 --> 39:16.740
没有用link

39:16.740 --> 39:17.140
对吧

39:17.140 --> 39:18.260
没有用link元素

39:18.820 --> 39:19.220
没事

39:19.740 --> 39:20.700
大家要不刷新的话

39:20.700 --> 39:21.740
就用link元素就行了

39:23.180 --> 39:23.980
那么到登录页

39:23.980 --> 39:24.700
这些都没问题

39:24.700 --> 39:25.540
都没问题

39:25.540 --> 39:26.940
那么现在我们到登录页里面

39:26.940 --> 39:28.060
来测试一下

39:28.060 --> 39:29.700
纯服务端的代码

39:29.700 --> 39:31.060
我要得到互MI

39:31.420 --> 39:32.260
那么这个时候

39:32.500 --> 39:33.540
我是不是要把

39:33.540 --> 39:35.820
我们是不是要去创建一个request

39:36.300 --> 39:36.700
对吧

39:36.700 --> 39:36.900
是吧

39:36.900 --> 39:37.740
创建一个request

39:37.740 --> 39:39.620
通过req对象来创建一个request

39:39.620 --> 39:40.340
来导入

39:42.400 --> 39:42.880
from

39:43.240 --> 39:43.920
对 来写刚

39:44.400 --> 39:45.200
services

39:45.200 --> 39:45.920
request

39:45.920 --> 39:47.960
那么这边有一个之前写的

39:47.960 --> 39:49.360
get server instance

39:52.280 --> 39:53.960
那么这里把req对象传进去

39:53.960 --> 39:54.400
是吧

39:54.400 --> 39:55.880
把我们的request传进去

39:55.880 --> 39:57.040
因为这是我们科普端

39:57.040 --> 39:58.840
请求页面给我们传递的request

39:58.840 --> 40:00.240
那么这里边是不是很有cookie

40:00.240 --> 40:00.480
对吧

40:00.480 --> 40:01.880
有可能会很有cookie

40:01.880 --> 40:03.440
那么我们通过这个req对象

40:03.480 --> 40:05.200
来创建一个request

40:05.200 --> 40:06.520
然后调用互MI的时候

40:06.800 --> 40:08.160
把这个request传进去

40:08.480 --> 40:10.320
那么请你使用我这个request

40:10.320 --> 40:12.560
这个request里面是包含了请求头的

40:13.400 --> 40:14.760
它是根据我们的请求对象

40:14.760 --> 40:15.920
是加了请求头的

40:16.240 --> 40:16.760
那么这样子

40:16.760 --> 40:17.800
去请服务端

40:17.800 --> 40:19.040
我们的代理服务器

40:19.400 --> 40:20.560
去请求我们的数据服务器

40:20.560 --> 40:21.800
是去附带了请求头

40:21.800 --> 40:22.160
对吧

40:22.160 --> 40:23.560
因为我们浏览器

40:24.080 --> 40:25.600
请求我们的next.js

40:25.600 --> 40:27.240
给我们的一个啥

40:27.240 --> 40:28.040
给我们的一个req

40:28.040 --> 40:28.400
对吧

40:28.400 --> 40:29.560
给我们的一个这个玩意儿

40:29.720 --> 40:31.120
那么它在根据这个req

40:31.120 --> 40:32.400
创建了一个request

40:32.440 --> 40:33.600
是包含请求头的

40:33.600 --> 40:35.440
然后再去发送这个请求的时候

40:35.440 --> 40:36.920
是把请求头包含进去了

40:37.360 --> 40:37.560
好了

40:37.560 --> 40:39.000
那么这样子才能得到

40:39.120 --> 40:39.840
我到底是谁

40:39.840 --> 40:40.080
对吧

40:40.080 --> 40:41.200
服务端才能得到

40:41.400 --> 40:42.160
保存

40:42.280 --> 40:43.200
我们这里刷新

40:43.880 --> 40:44.080
好

40:44.080 --> 40:44.640
这里保存

40:44.640 --> 40:45.200
保一个方法

40:45.200 --> 40:46.080
说保存

40:46.080 --> 40:46.480
保错了

40:46.480 --> 40:46.880
对吧

40:47.080 --> 40:47.720
还有什么

40:49.040 --> 40:52.400
get header is not a function

40:53.240 --> 40:54.880
它说get header

40:56.000 --> 40:56.920
都还不存在

40:58.000 --> 40:58.880
我看一下

40:59.480 --> 41:01.400
它说get header还不存在

41:02.960 --> 41:04.320
那么我们看一下header是呢

41:05.600 --> 41:06.160
header

41:10.480 --> 41:10.800
好

41:10.800 --> 41:11.280
保存

41:11.280 --> 41:11.800
再来看

41:12.840 --> 41:13.440
再来发音

41:14.000 --> 41:15.040
arguments

41:15.040 --> 41:16.320
那么这个东西存在了

41:16.320 --> 41:16.720
对吧

41:16.720 --> 41:19.440
它说什么arguments str must be stream

41:19.440 --> 41:20.400
那么这个东西是啥

41:22.770 --> 41:23.250
输出一下

41:23.250 --> 41:23.810
可可意思

41:24.010 --> 41:24.970
那这个东西到底是啥

41:27.450 --> 41:27.890
我看一下

41:29.530 --> 41:30.130
undefined

41:30.530 --> 41:31.650
it loss undefined

41:32.170 --> 41:33.210
那么小写的c呢

41:36.220 --> 41:37.220
小写的c就对了

41:37.220 --> 41:38.300
小写的c就对了

41:38.460 --> 41:38.780
OK

41:38.780 --> 41:39.980
那我就打写了

41:40.500 --> 41:40.780
好

41:40.780 --> 41:41.420
那么现在呢

41:41.460 --> 41:42.060
我们来看一下

41:43.340 --> 41:43.740
刷新

41:43.740 --> 41:44.300
再来刷新

41:44.300 --> 41:46.580
那么现在是存服务端那边在处理

41:46.580 --> 41:46.980
你看

41:47.580 --> 41:48.540
服务端是不是拿到

41:48.540 --> 41:49.340
我是谁了

41:49.620 --> 41:50.540
我是管理员

41:51.100 --> 41:53.140
我们先把这个整个流程走通

41:53.820 --> 41:54.700
整个流程怎么通通的

41:54.700 --> 41:55.660
好好去想

41:55.660 --> 41:56.900
脑袋里面好好去想了一下

41:56.900 --> 41:58.300
我们各种请求场景

41:58.300 --> 42:00.180
一种是浏览区息请求页面

42:00.180 --> 42:02.460
页面本身要发送请求到数据服务器

42:02.460 --> 42:03.100
该怎么办

42:03.220 --> 42:04.140
它要附带header

42:04.300 --> 42:06.380
我们浏览区是给它的cookie 对吧

42:06.500 --> 42:08.460
那么这个你要发送header

42:09.100 --> 42:09.780
那怎么办

42:09.780 --> 42:10.660
就用这种方式

42:11.980 --> 42:13.140
我们把请求的时候

42:13.140 --> 42:13.780
附带在cookie

42:14.300 --> 42:16.780
想办法加到header里边

42:17.580 --> 42:18.060
那看

42:18.780 --> 42:19.980
想办法加到header里边

42:20.500 --> 42:20.740
好

42:20.740 --> 42:21.700
另一种模式

42:21.820 --> 42:23.860
是浏览器用阿迦克斯请求

42:23.860 --> 42:24.860
去请求服务器

42:24.860 --> 42:26.700
服务器通过这个模后来代理

42:26.860 --> 42:27.100
对吧

42:27.100 --> 42:27.700
在代理

42:27.700 --> 42:29.580
那么那产生了这个效果

42:29.740 --> 42:31.100
其实这里边很多问题解决

42:31.220 --> 42:32.020
都是因为服务器

42:32.020 --> 42:33.140
它要求的是header

42:33.300 --> 42:34.980
而我们浏览器的要求的是cookie

42:34.980 --> 42:36.220
如果说服务器

42:36.580 --> 42:37.780
本身就是cookie

42:38.460 --> 42:39.420
本身就是cookie

42:40.060 --> 42:42.180
那还是得处理

42:42.180 --> 42:43.180
也不可能不处理

42:43.180 --> 42:44.460
因为浏览器比较请求

42:44.460 --> 42:45.540
页面的时候给它cookie

42:45.540 --> 42:45.900
对吧

42:45.900 --> 42:47.300
但它用X小时请求的时候

42:47.300 --> 42:48.380
根本没有附带cookie

42:48.380 --> 42:49.420
服务器哪有什么cookie

42:49.420 --> 42:51.420
服务器端本来也没有cookie

42:51.420 --> 42:52.900
所以说你还是得点把

42:52.900 --> 42:53.580
浏览器的cookie

42:53.580 --> 42:55.420
放到X小时的请求头里边

42:55.420 --> 42:56.620
这个地方还是要处理

42:56.740 --> 42:57.980
那么这里可以不处理的

42:57.980 --> 42:58.260
对吧

42:58.260 --> 42:59.420
这里是可以不用处理的

43:01.420 --> 43:02.540
但是

43:03.500 --> 43:05.100
很多时候服务器那边

43:05.140 --> 43:06.420
一般都是给你的header

43:06.780 --> 43:08.940
还要考虑各种端的情况

43:09.460 --> 43:11.540
当然一些小的项目可能直接要求你

43:11.540 --> 43:12.780
直接可以给你cookie

43:12.780 --> 43:15.140
但是那大的项目一般都是给你header的

43:15.660 --> 43:16.700
我这里给他说一下

43:17.060 --> 43:17.300
好

43:17.300 --> 43:18.740
我们先把这个问题打通

43:18.740 --> 43:19.460
打通了过后

43:19.460 --> 43:20.700
下一课我们就一起

43:21.620 --> 43:23.700
把登录功能就全部做了

