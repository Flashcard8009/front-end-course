WEBVTT

00:00.500 --> 00:04.000
好了 本章的最后一个指示点

00:04.000 --> 00:06.500
就是关于咱们之前挖的一个坑

00:06.500 --> 00:09.200
对吧 这里啊 这儿大家还记得不

00:10.100 --> 00:12.300
这个地方 哎 在哪儿 在这

00:12.600 --> 00:13.600
就这个玩意儿

00:14.660 --> 00:17.500
我们再回归一下啊 这个玩意儿是一个对象

00:17.500 --> 00:20.000
然后呢 我把它传到app组件 对吧

00:20.000 --> 00:22.000
一个对象传过去了 引用地址

00:22.000 --> 00:24.000
然后呢 那个app组件里边呢

00:24.000 --> 00:26.000
呃 它用到的对象

00:26.000 --> 00:28.800
对象传给谁呢 传给这个static

00:29.000 --> 00:30.500
rotr 啊 传给它了

00:31.500 --> 00:33.000
那么这个对象有什么用呢

00:34.100 --> 00:35.600
首先呢 我们来知道

00:35.600 --> 00:38.200
这个对象呢 它传给这个static rotr之后呢

00:38.700 --> 00:40.000
它会把它放到一个

00:40.400 --> 00:43.400
上下文里边 然后呢 传递给后续的组件

00:44.200 --> 00:47.700
好 那么咱们来看一下后续的路由宣出来的组件啊

00:47.700 --> 00:50.700
服务端宣的路由的宣出来的组件呢

00:50.700 --> 00:53.200
它的属性 你看一下是什么

00:53.200 --> 00:55.800
我们到page里边去啊 页面里边去

00:56.800 --> 00:58.300
然后呢 随便找一个地方吧

00:58.300 --> 01:01.300
比方说找到这个rotr 啊 这个位置

01:01.300 --> 01:03.900
咱们呢 在这里呢 输出一下啊 它的属性里边

01:03.900 --> 01:06.800
看一下有什么东西 输出一下属性

01:06.800 --> 01:09.800
ok 那么咱们呢 运行一下 npm 装

01:12.460 --> 01:14.360
你会发现呢 我们刚才那个对象呢

01:14.360 --> 01:17.560
它就会依次传递给这些这些啊

01:17.960 --> 01:18.860
页面组件

01:19.460 --> 01:20.560
好 那么现在运行出来了

01:20.560 --> 01:22.860
对吧 那现在为什么没有打印出来了

01:22.860 --> 01:24.860
因为我们现在呢 还没有运行这个页面

01:24.860 --> 01:26.660
对吧 那么现在呢 我们打开浏览器

01:27.460 --> 01:28.660
运行一下这个页面

01:28.660 --> 01:29.560
localhost

01:32.260 --> 01:32.960
哪个位置

01:34.860 --> 01:35.860
8080 是吧

01:36.460 --> 01:39.560
ok 8080 咱们随便输个地址吧

01:39.560 --> 01:40.560
然后not found

01:41.360 --> 01:43.360
not found 接下来我们看这里

01:43.860 --> 01:45.260
你看一下我们的页面里边

01:45.260 --> 01:46.960
实际上传的一些属性过来的

01:47.260 --> 01:49.260
对吧 还有什么呢 有这个

01:49.260 --> 01:52.160
History Location 就服务端啊

01:52.160 --> 01:54.160
在服务端运行过这个主线 渲染过的

01:54.360 --> 01:55.160
然后呢 March

01:55.160 --> 01:56.960
对吧 这些都是我们以知晓的

01:57.160 --> 01:59.760
然后呢 接下来还有一个叫做Static Context

02:00.460 --> 02:01.860
那么这个玩意儿是什么呢

02:01.860 --> 02:04.460
这个玩意儿就是我们通过这里

02:05.860 --> 02:07.160
哎 通过

02:07.960 --> 02:10.060
通过这个地方 传过来这个对象

02:10.660 --> 02:12.460
那么我们来看一下页面这里呢

02:12.560 --> 02:14.160
页面这里有没有这个东西呢

02:14.760 --> 02:15.860
看一下页面这里

02:17.460 --> 02:18.460
好 这里呢

02:19.660 --> 02:21.060
哎 我们再发现一次

02:22.560 --> 02:23.460
怎么又卡住了

02:24.060 --> 02:26.360
那么页面这里呢 你会看到这个contact

02:26.560 --> 02:28.560
Static Context对于undefend

02:28.960 --> 02:29.760
有没有呢 有

02:29.760 --> 02:30.960
但是呢 他是undefend

02:30.960 --> 02:33.360
为什么呢 因为我们在页面上呢

02:33.360 --> 02:34.560
是没有传递这个东西的

02:34.560 --> 02:36.260
对吧 我们客户端是没有传递

02:36.360 --> 02:38.160
只有在服务期端才传递了

02:38.760 --> 02:40.060
那这个东西有什么用呢

02:40.060 --> 02:41.560
它只是一个普通对象

02:41.660 --> 02:42.960
它就有机会呢

02:42.960 --> 02:44.960
让我们在主线内部

02:45.160 --> 02:47.060
往这个对象里边加东西

02:47.460 --> 02:48.760
啊 这不是个对象吗

02:48.860 --> 02:50.660
那么同样是一个对象地址对吧

02:50.660 --> 02:51.460
那么我们在这里

02:51.460 --> 02:52.960
是不是可以往它里边加东西

02:53.060 --> 02:54.660
那加东西有起什么作用呢

02:54.760 --> 02:55.760
我给大家举个例子

02:56.260 --> 02:59.060
比方说 我们这里这个404页面啊

02:59.160 --> 03:01.060
你看一下 我们目前的network

03:01.260 --> 03:02.260
传输的时候呢

03:02.460 --> 03:03.460
我们刷新一次啊

03:05.460 --> 03:06.760
怎么又卡住了啊

03:07.460 --> 03:08.360
好 我们传

03:08.560 --> 03:09.560
传输的时候呢

03:09.860 --> 03:10.460
再刷新

03:10.560 --> 03:12.360
这里是304 应该是一个

03:12.460 --> 03:14.060
应该是一个就是200

03:14.060 --> 03:15.660
因为它目前的有缓存

03:15.860 --> 03:16.760
服务期有缓存

03:17.260 --> 03:17.760
就是说

03:18.860 --> 03:20.560
服务期的那边没有改变对吧

03:20.560 --> 03:22.860
那种没改变 所以它是一个304

03:23.360 --> 03:23.960
那么这里呢

03:23.960 --> 03:26.460
我们再重新换个地址吧

03:27.460 --> 03:28.160
好 你看

03:28.960 --> 03:30.460
我们这个404页面啊

03:30.460 --> 03:31.860
它给我们的消息头呢

03:32.760 --> 03:33.960
就是享用码呢

03:34.160 --> 03:34.860
是200

03:35.760 --> 03:37.960
哎 如果说我们有这么一个需求

03:38.060 --> 03:40.460
我们希望了给他一个404的享用

03:40.460 --> 03:41.660
就是个消息码

03:41.760 --> 03:42.760
那么怎么办呢

03:43.060 --> 03:44.460
那有些人说很简单啊

03:44.460 --> 03:45.560
我们就在server里边

03:45.560 --> 03:46.660
不是跟服务期相关吗

03:46.660 --> 03:47.160
对吧

03:47.160 --> 03:49.160
我们就在server里边在这个位置

03:49.660 --> 03:50.660
哎 在这个位置呢

03:50.660 --> 03:52.560
我们就给他设置一个

03:52.960 --> 03:53.560
就在这里

03:54.560 --> 03:55.360
Standers

03:55.560 --> 03:55.960
对吧

03:56.460 --> 03:57.060
Code

03:57.760 --> 03:58.960
完了 我也忘了

03:58.960 --> 03:59.860
我已经忘了啊

04:00.660 --> 04:01.260
Synd

04:02.160 --> 04:03.860
Synd它里边是有一个

04:04.760 --> 04:05.260
是一个什么呢

04:05.260 --> 04:06.460
好像就是Standers啊

04:06.460 --> 04:07.760
我来这边试一下啊

04:08.360 --> 04:09.160
有点忘了

04:10.460 --> 04:11.160
你看这个

04:12.260 --> 04:14.260
有段时间不用的话就有点忘了

04:15.060 --> 04:16.160
我们在这里写一个吧

04:19.260 --> 04:20.560
叫做Stand

04:21.660 --> 04:22.860
Standers

04:22.860 --> 04:23.660
对 就是这个

04:23.760 --> 04:24.360
就这个

04:24.360 --> 04:25.160
想一个消息嘛

04:25.160 --> 04:25.560
对吧

04:25.860 --> 04:27.260
ok 那么我们在这边写

04:28.060 --> 04:29.760
好 在这边写Standers

04:29.860 --> 04:30.560
那么这里呢

04:30.560 --> 04:32.260
我能不能直接写个404呢

04:32.260 --> 04:32.960
也不行

04:33.360 --> 04:34.160
因为这样子的话

04:34.160 --> 04:36.060
正常页面也是404的

04:36.160 --> 04:36.560
对吧

04:36.960 --> 04:38.260
那么我们需要

04:38.260 --> 04:40.060
当他渲染到这个

04:40.860 --> 04:42.460
那方的这个组件的时候呢

04:42.460 --> 04:43.960
我们才需要404

04:44.260 --> 04:45.460
那我们这里怎么知道

04:45.460 --> 04:47.360
还有没有渲染到这方的组件呢

04:47.860 --> 04:49.460
当然也有一些另外的办法

04:49.460 --> 04:50.760
比方说匹配路由 对吧

04:50.860 --> 04:51.360
那么现在呢

04:51.360 --> 04:52.760
我们知道这个context之后呢

04:52.860 --> 04:53.560
我们就想到了

04:53.560 --> 04:55.060
有一种比较合适的方案

04:55.360 --> 04:57.060
因为我们这个组件内部啊

04:57.060 --> 04:57.960
他只要一宣的

04:57.960 --> 04:59.360
是不是一定会运行这个函数

04:59.560 --> 05:00.560
那么我们就在这里

05:00.560 --> 05:01.660
这个函数里边

05:01.660 --> 05:03.160
我们这里做这么一个事情

05:03.560 --> 05:04.260
什么事情呢

05:04.360 --> 05:06.360
我们看一下Static Context

05:06.360 --> 05:07.160
是不是存在

05:07.260 --> 05:08.560
因为刻铺端也要运行吗

05:08.560 --> 05:10.460
刻铺端到底是不存在的对吧

05:10.560 --> 05:11.860
如果它存在的话

05:11.860 --> 05:15.160
我们往这个Static Context里边加一个属性

05:15.560 --> 05:16.260
叫做

05:17.560 --> 05:18.160
code的吧

05:18.360 --> 05:18.960
code的

05:19.360 --> 05:20.460
叫做Risk Code

05:20.660 --> 05:21.360
Risk Code

05:21.360 --> 05:22.260
等于404

05:22.960 --> 05:23.360
对吧

05:23.460 --> 05:24.660
Risk Code等于404

05:24.660 --> 05:24.860
对吧

05:24.860 --> 05:25.560
做这么一个处理

05:25.560 --> 05:26.060
把

05:26.560 --> 05:27.060
扩起来

05:27.060 --> 05:28.060
这是个表达式

05:28.760 --> 05:30.460
当然你用衣服判断也是可以的

05:31.260 --> 05:31.460
好

05:31.460 --> 05:33.360
那么现在这样子设置了之后呢

05:33.360 --> 05:34.860
我们到了Render的时候

05:35.060 --> 05:35.760
那你看啊

05:35.760 --> 05:38.060
我们Static Context是不是有了

05:38.060 --> 05:38.260
对吧

05:38.260 --> 05:38.960
有数据了

05:38.960 --> 05:40.860
我们在这个时候去输出这个context

05:41.360 --> 05:42.560
因为我们是把它喘进去了

05:42.560 --> 05:42.960
对吧

05:43.360 --> 05:43.760
这里呢

05:43.760 --> 05:44.660
咱们双信一次

05:45.660 --> 05:47.560
你看服务器端是不是Risk Code

05:47.560 --> 05:47.860
对吧

05:47.860 --> 05:48.360
就有了

05:48.360 --> 05:49.360
有了这么一个结果了

05:49.660 --> 05:49.860
好

05:49.860 --> 05:50.360
那么现在呢

05:50.360 --> 05:51.360
我们就很简单了

05:51.360 --> 05:52.160
我们怎么样呢

05:52.260 --> 05:52.860
我们就

05:53.760 --> 05:54.260
判断

05:54.260 --> 05:55.060
判断一下

05:55.260 --> 05:58.260
如果说这个context里边有这个Risk Code

05:58.760 --> 05:59.760
发送的这个code

05:59.760 --> 06:00.960
如果说存在的话

06:00.960 --> 06:02.560
那么我们这里的就是Risk

06:02.960 --> 06:03.660
Status

06:03.960 --> 06:05.560
Risk Context

06:06.160 --> 06:06.860
Risk Code

06:07.060 --> 06:07.760
把它加进去

06:08.260 --> 06:08.860
这样子呢

06:08.860 --> 06:10.160
就形成了一种模式

06:10.160 --> 06:11.660
就是在组件里边

06:12.360 --> 06:14.360
可以通知我们的

06:14.860 --> 06:15.860
服务器响应

06:15.860 --> 06:17.660
就是服务器响应的对象

06:17.960 --> 06:18.560
就是可以

06:18.760 --> 06:19.860
给服务器

06:19.860 --> 06:21.460
请求处理这个函数呢

06:21.460 --> 06:22.160
请通知

06:22.160 --> 06:23.160
通过这个context

06:24.060 --> 06:25.560
就晚上这么一个通信了

06:25.760 --> 06:25.860
好

06:25.860 --> 06:27.460
那么接下来我们来看一下

06:27.860 --> 06:29.460
我们这里随便再输个地址

06:32.220 --> 06:33.020
又卡住了

06:33.920 --> 06:34.320
ok

06:34.320 --> 06:34.820
那么现在呢

06:34.820 --> 06:35.420
我们来看一下

06:36.020 --> 06:37.120
这是在刷新

06:39.830 --> 06:40.330
你看

06:40.430 --> 06:41.630
现在我们得到了页面了

06:41.630 --> 06:42.330
同样得到页面

06:42.330 --> 06:43.430
但是给我们的消息码

06:43.430 --> 06:44.130
就是视频式

06:44.130 --> 06:44.830
那是放的

06:45.030 --> 06:46.630
页面还是显示出来了

06:47.130 --> 06:47.730
没问题吧

06:47.830 --> 06:48.130
ok

06:48.130 --> 06:49.930
那么这就是我们这一块的

06:50.130 --> 06:50.930
做的方式

06:51.030 --> 06:51.630
当然这个东西呢

06:51.630 --> 06:53.130
不仅是可以用于这个处理

06:53.130 --> 06:54.430
还可以用于很多的处理

06:54.630 --> 06:56.730
只要你涉及到组件内部

06:57.130 --> 06:58.630
需要告诉我们的

06:58.630 --> 07:00.230
这个响应函数的一些东西的话

07:00.230 --> 07:01.830
都可以用这个context来处理

07:02.430 --> 07:03.730
比方说再来一个例子吧

07:04.830 --> 07:06.130
我们现在又有一个页面

07:06.130 --> 07:07.430
我们再配置一下路由

07:09.330 --> 07:10.230
路由里面呢

07:10.230 --> 07:11.530
还有一种情况

07:11.530 --> 07:14.530
比方说我们随便举个例子

07:15.030 --> 07:16.030
随便举个例子

07:16.830 --> 07:17.530
在这里呢

07:17.530 --> 07:18.430
我们再来一个

07:18.430 --> 07:19.330
再来一个组件

07:21.430 --> 07:21.930
key

07:23.230 --> 07:23.930
movies

07:25.230 --> 07:26.230
就是那个

07:26.730 --> 07:27.230
temp

07:27.630 --> 07:28.730
有这么一个地址

07:29.030 --> 07:30.430
然后pass

07:32.230 --> 07:32.630
temp

07:34.630 --> 07:35.230
exact

07:38.440 --> 07:39.840
这里我们要做什么组件呢

07:39.840 --> 07:40.940
我们要做这个组件

07:41.240 --> 07:42.740
就是让它跳转

07:42.940 --> 07:44.440
就是我们这个地址呢

07:44.440 --> 07:45.540
可能已经被移走了

07:45.540 --> 07:46.740
移动到另外一个页面了

07:46.740 --> 07:48.140
比方说移动到电影页了

07:48.440 --> 07:48.640
好

07:48.640 --> 07:50.240
那么如果说你访问这个地址

07:50.240 --> 07:52.240
那么我要跳转到电影页

07:52.640 --> 07:52.840
好了

07:52.840 --> 07:53.740
这么怎么做呢

07:53.740 --> 07:54.640
我们可以利用

07:55.640 --> 07:57.640
可以利用这个

07:58.640 --> 07:59.640
react

07:59.640 --> 08:00.640
react

08:00.640 --> 08:01.640
react

08:01.640 --> 08:02.640
react

08:02.640 --> 08:04.640
它这里边有个这个东西还记得吗

08:04.640 --> 08:05.640
react

08:05.640 --> 08:06.640
有这么一个组件

08:06.640 --> 08:07.140
对吧

08:07.140 --> 08:09.640
那么我们只需要把这个组件给加上

08:09.640 --> 08:11.640
把这个组件给加上

08:11.640 --> 08:12.640
那么这里我们写个函数

08:12.640 --> 08:13.640
做个函数是组件

08:13.640 --> 08:14.640
我们这里能返回

08:15.640 --> 08:17.640
当然你可以写个页面

08:17.640 --> 08:19.640
你专门写个页面组件也可以

08:19.640 --> 08:20.640
你去把页面加上

08:20.640 --> 08:22.640
在页面组件里面返回这个东西也可以

08:22.640 --> 08:23.640
都一样

08:23.640 --> 08:24.640
简单一点吧

08:24.640 --> 08:25.640
这不就是一个组件吗

08:25.640 --> 08:26.640
对吧

08:26.640 --> 08:27.640
react里面的组件就是函数

08:27.640 --> 08:28.640
react

08:28.640 --> 08:30.640
然后有个什么数字

08:30.640 --> 08:31.640
对吧

08:31.640 --> 08:32.640
我们把它跳到哪里

08:32.640 --> 08:34.640
跳到这个movies

08:34.640 --> 08:36.640
那么我们就做出来这么一个react

08:36.640 --> 08:37.640
组件

08:37.640 --> 08:38.640
好

08:38.640 --> 08:39.640
接下来我们来看一下

08:39.640 --> 08:41.640
我们到这个rinter里面去

08:41.640 --> 08:43.640
再来输出一下的context

08:43.640 --> 08:44.640
好

08:44.640 --> 08:45.640
保存

08:45.640 --> 08:46.640
保存

08:46.640 --> 08:48.640
重新再运行吧

08:48.640 --> 08:50.640
接下来我们来看一下

08:50.640 --> 08:52.640
我们的路由呢

08:52.640 --> 08:53.640
它有这么一个处理

08:53.640 --> 08:55.640
如果说你在整个渲染的过程中

08:55.640 --> 08:57.640
返回了一个redirect的组件的话

08:57.640 --> 08:59.640
它会自动的往这个context里面

08:59.640 --> 09:00.640
加一个东西

09:00.640 --> 09:01.640
咱们来看一下吧

09:01.640 --> 09:06.170
我们现在去访问这个temp

09:06.170 --> 09:07.170
抱错了

09:07.170 --> 09:08.170
react

09:08.170 --> 09:10.170
react

09:10.170 --> 09:12.170
我们这里要去

09:12.170 --> 09:13.170
加入一个react

09:13.170 --> 09:14.170
react

09:14.170 --> 09:15.170
react

09:16.170 --> 09:17.170
react

09:17.170 --> 09:18.170
好

09:18.170 --> 09:19.170
加入一下

09:20.170 --> 09:21.170
OK

09:21.170 --> 09:22.170
那么你看一下

09:23.170 --> 09:25.170
这里输出了一个

09:25.170 --> 09:26.170
就是对象

09:26.170 --> 09:27.170
对象里面

09:27.170 --> 09:28.170
它可以多了一个东西

09:28.170 --> 09:29.170
一个action

09:29.170 --> 09:30.170
一个location

09:30.170 --> 09:31.170
一个url

09:31.170 --> 09:32.170
就是当我们

09:32.170 --> 09:33.170
这是它自动帮你处理的

09:33.170 --> 09:34.170
也就是说

09:34.170 --> 09:36.170
如果说我们使用了路由组件

09:36.170 --> 09:38.170
就是在服务端使用了staticrotor

09:38.170 --> 09:40.170
这个样的一个组件

09:40.170 --> 09:41.170
那么

09:41.170 --> 09:42.170
当它在宣衡的过程中

09:42.170 --> 09:44.170
如果说遇到了一个redirect

09:44.170 --> 09:46.170
就是重进项

09:46.170 --> 09:48.170
那么它会自动的往这个context里面

09:48.170 --> 09:49.170
加东西

09:49.170 --> 09:50.170
当然我们刚才也试过

09:50.170 --> 09:51.170
自己的手动加

09:51.170 --> 09:53.170
当遇到redirect的时候

09:53.170 --> 09:54.170
它会自动给你加

09:54.170 --> 09:55.170
加什么东西呢

09:55.170 --> 09:56.170
就加这些属性

09:56.170 --> 09:57.170
就加这些属性

09:57.170 --> 09:58.170
看没

09:58.170 --> 09:59.170
有同学说

09:59.170 --> 10:00.170
现在不跳转了吗

10:00.170 --> 10:01.170
不是已经好了吗

10:01.170 --> 10:02.170
不是的

10:02.170 --> 10:04.170
现在是客户端跳转的

10:04.170 --> 10:06.170
现在是客户端跳转的

10:06.170 --> 10:07.170
你看一下

10:07.170 --> 10:08.170
你看服务器

10:08.170 --> 10:09.170
根本返回的结果

10:09.170 --> 10:10.170
是不是还是这个

10:10.170 --> 10:11.170
你看我们的header

10:11.170 --> 10:12.170
响应头

10:12.170 --> 10:13.170
是不是还是

10:13.170 --> 10:14.170
响应码还是两百

10:14.170 --> 10:15.170
是客户端跳转的

10:15.170 --> 10:16.170
客户端那边

10:16.170 --> 10:17.170
以运行react

10:17.170 --> 10:19.170
发现了一匹配路由

10:19.170 --> 10:20.170
发现一个redirect

10:20.170 --> 10:21.170
比如是客户端

10:21.170 --> 10:22.170
根本跳转到这儿了

10:22.170 --> 10:23.170
实际上我们访问的

10:23.170 --> 10:25.170
还是那个temp

10:25.170 --> 10:26.170
还是那个temp

10:26.170 --> 10:27.170
原来的意思吧

10:27.170 --> 10:29.170
比方说我们这里

10:29.170 --> 10:31.170
看一下把这个temp

10:31.170 --> 10:32.170
响应结果

10:32.170 --> 10:34.170
你看这个响应结果里面

10:34.170 --> 10:35.170
并没有电影数据

10:35.170 --> 10:36.170
所以说它不是

10:36.170 --> 10:37.170
访问的电影页

10:37.170 --> 10:39.170
好 那么现在如果说

10:39.170 --> 10:41.170
如果说我们服务器端

10:41.170 --> 10:43.170
要进行跳转

10:43.170 --> 10:44.170
因为我们知道

10:44.170 --> 10:45.170
服务器端应该

10:45.170 --> 10:46.170
响应一个301

10:46.170 --> 10:47.170
对吧

10:47.170 --> 10:48.170
301或者是302

10:48.170 --> 10:49.170
来进行跳转

10:49.170 --> 10:50.170
服务器端要进行跳转的话

10:50.170 --> 10:51.170
我们就可以

10:51.170 --> 10:52.170
就必须要知道

10:52.170 --> 10:53.170
它有没有跳转

10:53.170 --> 10:54.170
怎么知道呢

10:54.170 --> 10:55.170
它就在context里边

10:55.170 --> 10:56.170
你可以判断这个东西

10:56.170 --> 10:57.170
就行了

10:57.170 --> 10:58.170
比如x 你可以判断一下

10:58.170 --> 10:59.170
或者是一个url

10:59.170 --> 11:00.170
可以判断一下

11:00.170 --> 11:01.170
那么我们判断一下

11:01.170 --> 11:02.170
如果说

11:03.170 --> 11:05.170
如果说context

11:05.170 --> 11:06.170
就是什么

11:06.170 --> 11:08.170
那个url有值

11:08.170 --> 11:09.170
说明了要跳转

11:09.170 --> 11:10.170
这个时候我们怎么办

11:10.170 --> 11:11.170
race

11:11.170 --> 11:13.170
然后redirect

11:14.170 --> 11:16.170
好 我们这里就301

11:16.170 --> 11:17.170
或者是让它自动设置

11:17.170 --> 11:18.170
设置那个小一码也可以

11:18.170 --> 11:20.170
好 地址就是context

11:20.170 --> 11:21.170
一个url

11:21.170 --> 11:22.170
对吧

11:22.170 --> 11:23.170
ok 那么现在呢

11:23.170 --> 11:24.170
我们就race

11:24.170 --> 11:25.170
就return了

11:25.170 --> 11:26.170
就结束了

11:26.170 --> 11:27.170
好 咱们来试一下

11:27.170 --> 11:28.170
试一下

11:28.170 --> 11:29.170
那么现在呢

11:29.170 --> 11:30.170
我们设置好了之后

11:30.170 --> 11:31.170
我们现在再运行

11:31.170 --> 11:32.170
ok 那么现在

11:32.170 --> 11:33.170
我们这里刷新

11:34.170 --> 11:36.170
这里我们访问这个temp

11:36.170 --> 11:37.170
访问这个地址

11:38.170 --> 11:39.170
你看 这里显示

11:39.170 --> 11:40.170
不需要加点数据

11:40.170 --> 11:41.170
什么意思呢

11:41.170 --> 11:42.170
我们来看一下

11:42.170 --> 11:43.170
整个页面的

11:43.170 --> 11:44.170
我们把这个地方temp看一下

11:44.170 --> 11:45.170
打开看一下

11:45.170 --> 11:46.170
你看它的header

11:46.170 --> 11:47.170
是不是301

11:47.170 --> 11:48.170
301重新向

11:48.170 --> 11:49.170
好 那么这里呢

11:49.170 --> 11:50.170
我们重新向它的地址在哪呢

11:50.170 --> 11:51.170
你看

11:51.170 --> 11:52.170
那个response header

11:53.170 --> 11:54.170
跑到去了

11:55.170 --> 11:57.170
跑到去了

11:57.170 --> 11:58.170
这个header

11:58.170 --> 11:59.170
location

11:59.170 --> 12:00.170
location

12:00.170 --> 12:01.170
movice

12:01.170 --> 12:02.170
所以跳到这个地址

12:02.170 --> 12:03.170
于是呢

12:03.170 --> 12:04.170
客户端就会去重新请求

12:04.170 --> 12:05.170
movice页面

12:05.170 --> 12:06.170
对吧

12:06.170 --> 12:07.170
那么就实现了

12:07.170 --> 12:09.170
服务器端的301重新向

12:09.170 --> 12:11.170
就通过这种模式实现的

12:11.170 --> 12:12.170
总之呢你以后

12:13.170 --> 12:14.170
凡是要在

12:14.170 --> 12:16.170
某个组建某个页面里边

12:17.170 --> 12:19.170
去向我们的处理函数

12:19.170 --> 12:20.170
服务器处理函数

12:20.170 --> 12:21.170
做发出一个通知

12:21.170 --> 12:23.170
那么就可以利用这个contact

12:24.170 --> 12:26.170
OK 我们自此呢

12:26.170 --> 12:28.170
从零开始搭建整个

12:28.170 --> 12:30.170
SSR工程

12:30.170 --> 12:32.170
基本上所有的问题啊

12:32.170 --> 12:33.170
主要的问题都解决了

12:33.170 --> 12:34.170
那么以后呢

12:34.170 --> 12:35.170
大家遇到肯定要遇到

12:35.170 --> 12:36.170
更加不同的问题

12:36.170 --> 12:37.170
一些细节问题

12:37.170 --> 12:38.170
那么都可以利用

12:38.170 --> 12:39.170
我们学过的知识

12:39.170 --> 12:40.170
来进行灵活处理

12:41.170 --> 12:42.170
好 那么我们现在

12:42.170 --> 12:44.170
手动的搭建工程完了之后呢

12:44.170 --> 12:45.170
当然我们以后开发的时候呢

12:45.170 --> 12:47.170
不太会去手动搭建工程

12:47.170 --> 12:49.170
一般会使用一些

12:49.170 --> 12:51.170
脚手架或者是一些框架

12:51.170 --> 12:52.170
那么咱们下一个章节呢

12:52.170 --> 12:53.170
就来学习一个框架

12:53.170 --> 12:55.170
来搭建整个工程

12:55.170 --> 12:56.170
好吧

12:56.170 --> 12:57.170
OK 那么这一章

12:57.170 --> 12:58.170
咱们到此结束了

12:58.170 --> 12:59.170
拜拜

