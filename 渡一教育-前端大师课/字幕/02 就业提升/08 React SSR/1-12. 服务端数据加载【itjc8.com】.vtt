WEBVTT

00:00.820 --> 00:04.420
这节课咱们就跟SSR有关系了

00:04.420 --> 00:08.620
前两节课只是做了一些通用的东西

00:08.620 --> 00:10.420
窗户嘛 对吧 请求嘛

00:10.420 --> 00:13.420
调了一些跟服务器和扣端之间的结构

00:13.420 --> 00:14.620
就这种结构

00:14.620 --> 00:17.820
那么这节课我们现在要把仓库里边的数据

00:17.820 --> 00:20.620
应用到我们的页面里边去了

00:20.620 --> 00:22.620
咱们来应用一次试一下

00:22.620 --> 00:24.620
比方说我们拿到一个页面Movies

00:24.620 --> 00:26.420
就这个页面电容列表

00:26.420 --> 00:29.020
这是个函数式组件嘛 对吧

00:29.420 --> 00:31.620
那么现在我们要用仓库里边的数据

00:31.620 --> 00:34.020
并且要把电影列表夹带出来

00:34.020 --> 00:35.820
那怎么办 我们现在这样子

00:37.220 --> 00:38.620
把分开来写

00:38.620 --> 00:41.700
export

00:43.500 --> 00:45.500
这里把写成配件

00:45.500 --> 00:47.500
那么现在这个组件里边

00:47.500 --> 00:49.100
我们要用电影列表的数据

00:49.100 --> 00:51.900
那么下面我们写上一个ULI元素

00:51.900 --> 00:55.700
这个LI肯定是来自于一个数组

00:55.700 --> 00:56.900
这个数组来自于哪呢

00:56.900 --> 00:59.700
我们把它这里解构一下

00:59.700 --> 01:03.100
这里我们给它一个Movies

01:03.100 --> 01:04.700
一个Movies电影

01:04.700 --> 01:05.900
然后还有一个什么呢

01:05.900 --> 01:07.300
还有一个就是

01:09.900 --> 01:12.500
loadMovies

01:12.500 --> 01:14.500
这是一个函数

01:14.500 --> 01:16.500
就是一开始要夹带电影

01:16.500 --> 01:18.300
那么这个是电影数组

01:18.300 --> 01:20.500
我们这个组件里边有两个东西

01:20.500 --> 01:22.300
那么这个数组里边

01:22.300 --> 01:27.470
我们首先把它渲染一下MoviesMap

01:27.470 --> 01:30.270
每一个电影生成一个LI

01:30.470 --> 01:32.070
生成一个LI

01:32.070 --> 01:35.270
每个LI里边得到电影的名字

01:35.270 --> 01:37.270
M.Nate

01:37.270 --> 01:40.670
LI它有个key

01:40.670 --> 01:42.270
等于电影的ID

01:42.270 --> 01:43.470
下方有ID

01:43.470 --> 01:45.070
那么现在就写好了

01:45.070 --> 01:46.870
就这么一个电影

01:46.870 --> 01:49.270
那么现在电影数组有了

01:49.270 --> 01:51.270
那么现在就是loadMovies

01:51.270 --> 01:53.370
我们要夹带电影

01:53.370 --> 01:55.870
但是这里我们最好给它一个默认值

01:55.870 --> 01:57.070
给它一个默认值

01:57.070 --> 01:58.870
如果说你没有传

01:58.870 --> 01:59.870
算了 不给默认值

02:00.270 --> 02:01.870
给什么默认值

02:01.870 --> 02:02.870
比如我们仓库里边

02:02.870 --> 02:03.870
来自于仓库的数据

02:03.870 --> 02:05.670
仓库的数据本身一个默认值

02:05.670 --> 02:06.670
loadMovies

02:06.670 --> 02:08.270
那么这个地方我们就是一个函数

02:08.270 --> 02:09.270
一个事件

02:09.270 --> 02:10.170
什么时候运行呢

02:10.170 --> 02:12.270
是不是这个组件一开始要运行

02:12.270 --> 02:13.470
那么我们这里

02:13.470 --> 02:14.870
当然你可以把一些内组件

02:14.870 --> 02:16.870
一些内组件是完全没问题的

02:16.870 --> 02:18.570
在什么在component

02:18.570 --> 02:20.870
如果说是内组件的话

02:20.870 --> 02:23.270
那么应该在component

02:23.270 --> 02:24.670
dedMount

02:24.670 --> 02:26.470
这个时候运行

02:26.470 --> 02:27.670
运行函数

02:27.670 --> 02:29.270
运行事件

02:29.270 --> 02:30.570
那么这里我们是函数组件

02:30.570 --> 02:31.570
我们就用函数组件

02:31.570 --> 02:32.970
我们就用一个hook

02:32.970 --> 02:34.470
叫做useEffect

02:34.470 --> 02:36.270
对吧 还记得吗

02:36.270 --> 02:38.070
我们用它

02:38.070 --> 02:39.170
这个useEffect

02:39.170 --> 02:40.270
我们这里写一下

02:40.270 --> 02:40.870
useEffect

02:40.870 --> 02:42.070
生成一下

02:42.070 --> 02:43.470
这里我们写成空数组

02:43.470 --> 02:45.070
就表示它不依赖任何东西

02:45.070 --> 02:46.970
只是一开始运行一次

02:46.970 --> 02:49.670
好 这里表达我们先什么都不写

02:49.670 --> 02:51.070
我们先输出一句话

02:53.270 --> 02:54.070
abc

02:54.070 --> 02:54.770
先输出一句话

02:56.670 --> 02:58.070
我们输出这么一句话

02:58.070 --> 03:00.770
我们这里Movies可能要爆错

03:00.770 --> 03:01.970
因为我们还是给它一个

03:01.970 --> 03:03.070
给它一个默认值

03:03.070 --> 03:04.370
免得它爆错

03:04.370 --> 03:06.370
那么现在我们现在不做任何事情

03:06.370 --> 03:06.770
看一下

03:06.770 --> 03:08.770
主要是看一下这句话

03:08.770 --> 03:11.270
服务器端会不会运行

03:11.270 --> 03:13.170
好 咱们来看一下

03:13.170 --> 03:15.570
这里我们打开NPM状

03:15.570 --> 03:16.170
对

03:16.170 --> 03:19.370
因为这受到组件的生命周期

03:19.370 --> 03:21.070
函数组件它又受到一个component

03:21.070 --> 03:21.670
dedMount

03:21.670 --> 03:23.070
这么一个生命周期视线

03:23.070 --> 03:24.870
那么内组件

03:24.870 --> 03:26.470
函数组件它有Effect

03:26.470 --> 03:27.570
就副作用处理

03:27.570 --> 03:28.870
那么服务器会不会运行

03:28.870 --> 03:29.970
你看这个abc

03:29.970 --> 03:30.970
服务器有没有

03:30.970 --> 03:32.170
是没有的

03:32.170 --> 03:34.470
好 咱们来看科普端有没有运行

03:34.470 --> 03:36.470
localhost

03:36.470 --> 03:38.570
这里我们回车

03:38.570 --> 03:40.070
你看

03:40.070 --> 03:40.670
科普端

03:40.670 --> 03:41.670
有人说同学说

03:41.670 --> 03:43.070
我们没有访问Movies页面

03:43.070 --> 03:43.470
那行吗

03:43.470 --> 03:44.870
我们访问Movies页面

03:44.870 --> 03:46.370
这里点一点表页

03:46.370 --> 03:47.970
你看科普端是不是运行的

03:47.970 --> 03:48.970
对吧 我刷新一次

03:48.970 --> 03:49.770
科普端运行的

03:49.770 --> 03:51.070
你看一下服务器端

03:51.070 --> 03:51.970
有没有运行

03:51.970 --> 03:53.170
是没有运行

03:53.170 --> 03:53.870
对吧

03:53.870 --> 03:55.470
哎 服务端为什么不运行这个东西

03:55.470 --> 03:56.970
那么我们在这里写一个

03:57.070 --> 03:58.270
Render

03:58.270 --> 04:00.770
那么这里能没写成Effect

04:00.770 --> 04:01.770
当然

04:01.770 --> 04:03.270
这个ComponentDMount是一样的

04:03.270 --> 04:04.370
迷惑解释

04:04.370 --> 04:05.770
好 这里我们再刷新

04:05.770 --> 04:06.870
你看 是不是两个都运行了

04:06.870 --> 04:08.270
RenderEffect

04:08.270 --> 04:09.170
而服务器端

04:09.170 --> 04:11.370
它只运行到Render

04:11.370 --> 04:12.370
说明什么呢

04:12.370 --> 04:14.070
说明这些副作用

04:14.070 --> 04:15.270
他们是异步的

04:15.270 --> 04:16.470
我们以前说过

04:16.470 --> 04:17.770
也就是这些副作用函数

04:17.770 --> 04:19.470
实际上比方这个东西也好

04:19.470 --> 04:20.470
这个东西也好

04:20.470 --> 04:24.170
他们都是在组件渲染完成之后

04:24.170 --> 04:25.570
再去运行

04:25.570 --> 04:29.370
而我们服务器只关心组件渲染本身

04:29.370 --> 04:30.770
那么后续的事情

04:30.770 --> 04:32.870
渲染完了过后续什么事件

04:32.870 --> 04:33.770
生命组织函数

04:33.770 --> 04:35.770
它都不会运行的

04:35.770 --> 04:37.370
都不会运行的

04:37.370 --> 04:38.670
但是我要说一点

04:38.670 --> 04:39.870
如果说内组件的话

04:39.870 --> 04:41.470
这个东西要运行的

04:41.470 --> 04:43.470
内组件这个东西要运行的

04:43.470 --> 04:45.170
在什么Component

04:45.170 --> 04:47.070
WheelMount是要运行的

04:47.070 --> 04:48.870
因为它是要运行

04:48.870 --> 04:51.070
服务端运行

04:51.070 --> 04:53.070
但是ComponentDMount

04:53.070 --> 04:54.870
服务端不运行

04:54.870 --> 04:57.870
服务端不运行

04:57.870 --> 04:58.270
为什么呢

04:58.270 --> 04:59.570
因为这个东西在渲染完成之后了

04:59.570 --> 05:01.070
这个东西在渲染完成之前

05:01.070 --> 05:01.870
因为我们服务器

05:01.870 --> 05:02.670
哪里看这里

05:02.670 --> 05:04.670
我们当时写服务器

05:04.670 --> 05:05.170
这里

05:05.170 --> 05:07.070
在Render

05:07.070 --> 05:07.870
在这里

05:07.870 --> 05:08.770
我们Render的时候

05:08.770 --> 05:10.470
是不是就生成一个字幕串

05:10.470 --> 05:12.870
那么渲染成字幕串就发送给客户端了

05:12.870 --> 05:14.170
后续的东西它就不管了

05:14.170 --> 05:15.370
它就不运行了

05:15.370 --> 05:17.070
所以说这个东西是有差异的

05:17.070 --> 05:18.670
服端和客户端是有差异的

05:18.670 --> 05:21.370
这个地方的服端是不运行的

05:21.370 --> 05:22.370
那么我们现在如果说

05:22.370 --> 05:23.170
按照以前的写法

05:23.170 --> 05:24.270
我们来继续写的话

05:24.270 --> 05:24.970
我们应该怎么写的

05:24.970 --> 05:26.570
是不是这个地方去调用什么

05:26.570 --> 05:27.770
load movies

05:27.770 --> 05:28.570
所以调用它

05:28.570 --> 05:29.470
调用这个函数

05:29.470 --> 05:30.770
来帮助完成什么了

05:30.770 --> 05:31.770
我们可以判断一下

05:31.770 --> 05:32.770
如果说有的话

05:32.770 --> 05:34.770
load movies

05:34.770 --> 05:38.070
来帮助去获取电影数据

05:38.070 --> 05:38.170
好

05:38.170 --> 05:39.170
那么获取电影数据

05:39.170 --> 05:40.470
那么这里有两个属性

05:40.470 --> 05:43.770
那是不是要用跟仓库进行连接

05:43.770 --> 05:45.270
我们之前学过的

05:45.270 --> 05:46.270
导入

05:46.270 --> 05:48.370
from Redux

05:48.370 --> 05:51.170
react Redux

05:51.170 --> 05:52.770
导入什么Connect

05:52.770 --> 05:53.770
连接

05:53.770 --> 05:54.770
连接的时候

05:54.770 --> 05:56.770
我们是不是要传两个东西

05:56.770 --> 05:58.570
传两个函数

05:58.570 --> 06:02.870
一个函数是MapStats

06:02.870 --> 06:04.070
就跟我们之前写的一样

06:04.070 --> 06:05.470
刚刚之前在哪里写过

06:05.470 --> 06:07.070
在Home里面写过的

06:07.070 --> 06:07.970
拿过来

06:10.470 --> 06:13.070
一个是MapStats to props

06:13.070 --> 06:14.570
把状态给我

06:14.570 --> 06:17.270
然后我给你返回一些我们需要的属性

06:17.270 --> 06:18.070
movies

06:18.070 --> 06:19.470
就需要这个东西

06:19.470 --> 06:21.070
Stats,movies

06:21.070 --> 06:22.770
把个电影数据给它

06:22.770 --> 06:24.570
然后MapStats to props

06:24.570 --> 06:25.970
那么这里有个事件

06:25.970 --> 06:27.570
load of movies

06:27.570 --> 06:28.570
有这么一个事件

06:28.570 --> 06:29.770
那么调整这个事件的时候

06:29.770 --> 06:31.870
我们实际上是要dispatch一个action

06:31.870 --> 06:32.870
那么这个action哪来呢

06:32.870 --> 06:35.770
我们导入,导入action

06:35.770 --> 06:38.270
from来自于

06:38.270 --> 06:41.570
上边的再上边的store

06:41.570 --> 06:43.670
actions,movies

06:43.670 --> 06:46.670
那么这里边我们导入一个就是fetch movies

06:46.670 --> 06:48.170
我们要得到这个action

06:48.170 --> 06:50.070
那么这个action

06:50.070 --> 06:51.870
dispatch,这个action调用一下

06:53.670 --> 06:55.370
它要传夜码和夜容量

06:55.370 --> 06:57.170
我们不传它使用默认值

06:57.170 --> 06:59.470
那么这里我们是不是触发这个action

06:59.470 --> 07:01.170
那么这里我们的这两个还都写完了

07:01.170 --> 07:03.470
接下来我们用connect

07:03.470 --> 07:06.270
连接MapStats to props

07:06.270 --> 07:07.870
MapDispatch to props

07:07.870 --> 07:10.470
然后连接配级组件

07:10.470 --> 07:11.770
好,甭管怎么连接

07:11.770 --> 07:12.670
甭管怎么连接

07:12.670 --> 07:14.770
我们这里

07:14.770 --> 07:16.370
这个东西只在刻不断运行

07:16.370 --> 07:17.770
好,咱们来看一下吧

07:17.770 --> 07:21.340
好,刷新

07:21.340 --> 07:24.570
又爆错了

07:24.570 --> 07:26.570
这里又没有重新写的

07:26.570 --> 07:27.570
重新打爆

07:27.570 --> 07:30.270
OK,那么现在呢,刷新一次

07:30.270 --> 07:30.970
好,你看

07:30.970 --> 07:31.870
电影是不是出来了

07:31.870 --> 07:33.870
对吧,电影数据

07:33.870 --> 07:34.870
电影数据就出来了

07:34.870 --> 07:35.770
看没

07:35.770 --> 07:37.370
出来了

07:37.370 --> 07:38.370
好,那么出来之后呢

07:38.370 --> 07:39.570
我们看一下

07:39.570 --> 07:40.670
客户端是没有问题的

07:40.670 --> 07:42.070
你看,首页电影列表

07:42.070 --> 07:44.270
对吧,首页电影列表都没有问题

07:44.270 --> 07:45.270
那么现在呢,我们看一下

07:45.270 --> 07:47.170
右界页面原代码

07:47.170 --> 07:49.270
有时候服务器跟我们返回的数据里边

07:49.270 --> 07:50.570
有没有电影列表

07:50.570 --> 07:51.970
有没有,是没有

07:51.970 --> 07:52.770
为什么没有

07:52.770 --> 07:54.170
因为服务端这个位置

07:54.170 --> 07:55.370
是不是没有运行

07:55.370 --> 07:57.970
没有运行是不是就意味着

07:57.970 --> 07:59.570
它不会渲染这些东西

07:59.570 --> 08:00.470
它是个空速组

08:00.470 --> 08:01.970
对吧,它不会渲染

08:01.970 --> 08:03.870
那么这个东西怎么办呢

08:03.870 --> 08:05.170
你没有办法说

08:05.170 --> 08:06.770
让服务器一定要运行这种东西

08:06.770 --> 08:07.570
它没法运行

08:07.570 --> 08:09.570
因为它这个东西是在渲染之后运行的

08:09.570 --> 08:10.670
服务器不管

08:10.670 --> 08:11.670
那怎么办呢

08:11.670 --> 08:14.470
那我就必须要找到一种办法

08:14.470 --> 08:17.970
让服务器在渲染这个组件之前

08:17.970 --> 08:19.770
就在这

08:19.770 --> 08:21.070
所以在这里渲染组件

08:21.070 --> 08:22.570
对吧,接下来渲染组件

08:22.670 --> 08:24.970
渲染组件

08:24.970 --> 08:26.770
在渲染之前

08:26.770 --> 08:28.370
我们就要做一些事

08:28.370 --> 08:31.270
渲染之前要夹载数据

08:31.270 --> 08:32.670
比如说跟组件没关系了

08:32.670 --> 08:34.370
这个时候就跟组件本身没关系了

08:34.370 --> 08:35.670
就不去渲染组件了

08:35.670 --> 08:37.370
渲染之前我要把数据夹载

08:37.370 --> 08:38.970
夹载到了,夹载到仓库

08:38.970 --> 08:42.270
夹载数据到仓库

08:42.270 --> 08:44.070
那么这个时候怎么办呢

08:44.070 --> 08:45.470
这个时候怎么办呢

08:45.470 --> 08:48.970
那么这个时候有一个比较巧妙的办法

08:48.970 --> 08:49.970
什么巧妙的办法呢

08:49.970 --> 08:51.670
我们这样子来

08:52.570 --> 08:55.670
我们给这个组件加一个静态方法

08:57.170 --> 08:58.070
配级

08:58.070 --> 08:59.270
它无非就是个函数

08:59.270 --> 08:59.770
对吧

08:59.770 --> 09:00.770
就是无非就是函数

09:00.770 --> 09:01.870
加一个静态首先

09:01.870 --> 09:03.570
一个方法叫loadData

09:04.370 --> 09:05.670
loadData方法

09:05.670 --> 09:07.070
那么这个方法里边

09:07.070 --> 09:07.570
去

09:08.370 --> 09:10.270
去那个就是夹载

09:10.270 --> 09:11.170
去夹载数据

09:12.270 --> 09:13.570
这个里边是夹载数据

09:13.570 --> 09:14.270
那么这个方法

09:14.270 --> 09:15.870
它接收一个Stone

09:15.870 --> 09:17.870
一个仓库对象

09:17.870 --> 09:19.170
那么在仓库对象里面干嘛呢

09:19.170 --> 09:20.270
我们就触发X

09:20.270 --> 09:20.670
对吧

09:20.670 --> 09:22.070
dispatch触发一个X形

09:22.070 --> 09:22.870
什么X形

09:22.870 --> 09:24.670
叫create

09:25.970 --> 09:27.370
叫做fakeMovies对吧

09:27.370 --> 09:28.370
在这里触发X形

09:28.370 --> 09:30.370
那么这样子一触发仓库里边是不是有数据了

09:30.370 --> 09:31.670
当然这里一得等待

09:31.670 --> 09:33.470
等待它完成

09:34.270 --> 09:34.570
对吧

09:34.570 --> 09:36.070
等待它完成

09:36.070 --> 09:37.170
那么这个地方呢

09:37.170 --> 09:38.970
就是就完成了

09:38.970 --> 09:39.270
对吧

09:39.270 --> 09:40.370
就完成了

09:40.370 --> 09:40.670
或者呢

09:40.670 --> 09:42.070
你把这个dispatch返回

09:42.070 --> 09:43.570
因为dispatch返回的结果呢

09:43.570 --> 09:44.470
就是这个函数的结果

09:44.470 --> 09:45.170
这个函数的结果呢

09:45.170 --> 09:46.670
就是一个Promise

09:46.670 --> 09:47.370
那么把它返回来

09:47.370 --> 09:48.470
也就是一个Promise

09:48.470 --> 09:49.270
对吧

09:50.770 --> 09:51.970
当然这样子的话

09:51.970 --> 09:53.570
就不用去写这个Essink了

09:53.570 --> 09:54.970
那么这就要返回一个Promise

09:56.270 --> 09:56.370
好

09:56.370 --> 09:58.170
那么最好我还是把Essink写上吧

09:58.170 --> 09:59.570
这样大家看得明白一点

09:59.570 --> 10:00.770
表示这个是一步的

10:00.770 --> 10:01.970
因为触发这个X形

10:01.970 --> 10:03.270
它是要经过一段时间

10:03.270 --> 10:05.170
才能把仓库的数据拿到

10:05.170 --> 10:05.370
对吧

10:05.370 --> 10:06.270
才能拿到数据

10:06.270 --> 10:07.370
然后呢去完成

10:07.370 --> 10:08.370
完成加载

10:08.370 --> 10:10.570
那么这是需要经过一段时间的

10:10.570 --> 10:11.070
总之呢

10:11.070 --> 10:11.770
我们在这里呢

10:11.770 --> 10:13.770
是不是又通过这种模式

10:13.770 --> 10:15.770
来去让仓库里边去

10:15.770 --> 10:16.570
添加数据

10:16.570 --> 10:17.370
但是这个函数

10:17.370 --> 10:18.270
只是写了一个函数

10:18.270 --> 10:19.670
它并没有调用啊

10:19.770 --> 10:20.870
也就是说我们现在呢

10:20.870 --> 10:21.670
在这边

10:21.670 --> 10:23.270
到了这边

10:23.270 --> 10:25.370
是不是要调用

10:25.370 --> 10:26.170
什么

10:26.170 --> 10:27.570
调用那个

10:27.570 --> 10:28.970
loaddata

10:28.970 --> 10:31.170
对应主键的

10:31.170 --> 10:33.370
loaddata

10:33.370 --> 10:34.570
那么现在问题又来了

10:36.570 --> 10:37.170
有一个同学说

10:37.170 --> 10:37.870
我在这里呢

10:37.870 --> 10:39.470
去导入一个

10:39.470 --> 10:40.270
导入一个什么呢

10:40.270 --> 10:41.370
Movie主键

10:41.370 --> 10:42.270
Movies主键

10:42.270 --> 10:43.470
从哪里导入呢

10:43.470 --> 10:45.570
从那个Component

10:46.270 --> 10:47.570
Pages

10:47.570 --> 10:48.870
Pages

10:48.870 --> 10:49.970
Movies

10:49.970 --> 10:50.770
能不能这样做呢

10:50.770 --> 10:51.870
在这里去调用

10:51.870 --> 10:52.770
Movies

10:52.770 --> 10:53.970
loaddata

10:53.970 --> 10:55.470
当然这样子肯定是没问题的

10:55.470 --> 10:56.670
肯定是没问题的

10:56.670 --> 10:58.670
那能不能这样做呢

10:58.670 --> 11:00.270
能不能这样做呢

11:00.270 --> 11:00.970
这样做呢

11:00.970 --> 11:02.770
是不是很好

11:02.770 --> 11:03.570
不是很好

11:03.570 --> 11:05.970
为什么不是很好呢

11:05.970 --> 11:07.070
是因为我们这里呢

11:07.070 --> 11:07.870
不能确定

11:07.870 --> 11:09.770
它一定要选择这个主键

11:09.770 --> 11:10.570
比方说呢

11:10.570 --> 11:12.770
我们来看

11:12.770 --> 11:14.270
如果说我们访问这个页面

11:14.270 --> 11:14.970
首页

11:14.970 --> 11:16.970
首页需不需要宣展电影

11:16.970 --> 11:17.970
所以不需要

11:17.970 --> 11:18.370
对吧

11:18.370 --> 11:18.870
只有电

11:18.870 --> 11:19.670
我们去访问

11:19.670 --> 11:20.270
从服务器

11:20.270 --> 11:22.270
直接访问服务器的电影列表页

11:22.270 --> 11:23.170
那么这个时候呢

11:23.170 --> 11:23.970
才需要宣传

11:23.970 --> 11:25.570
服务器才宣传电影列表

11:25.570 --> 11:26.570
点击首页的时候呢

11:26.570 --> 11:28.870
服务器是不需要宣传电影列表的

11:28.870 --> 11:30.370
没了意思吧

11:30.370 --> 11:30.570
好

11:30.570 --> 11:31.570
那么这就意味着

11:31.570 --> 11:33.670
我这里不是要调用所有主键

11:33.670 --> 11:35.270
因为到时候主键可能很多

11:35.270 --> 11:35.970
我们可能

11:35.970 --> 11:38.070
其他的主键也需要有这个loaddata

11:38.070 --> 11:40.270
也需要预加载函数

11:40.270 --> 11:41.570
就是

11:41.570 --> 11:43.170
在主键

11:43.270 --> 11:47.470
宣传之前需要运行的函数

11:47.470 --> 11:48.770
在服务端

11:48.770 --> 11:49.870
主键

11:49.870 --> 11:52.470
服务端宣传之前需要运行的函数

11:52.470 --> 11:53.870
可能很多主键都需要

11:53.870 --> 11:55.070
那么到底是要

11:55.070 --> 11:57.570
调用哪个主键的loaddata呢

11:57.570 --> 12:00.270
那么这个东西是不是跟路由有关系

12:00.270 --> 12:00.770
你看一下

12:00.770 --> 12:03.370
我们的路由里边匹配到哪个主键

12:03.370 --> 12:05.170
那么我们就去调用哪个主键

12:05.170 --> 12:06.070
没了意思吧

12:06.070 --> 12:07.370
我们路由里边匹配到哪个主键

12:07.370 --> 12:08.870
没有匹配到匹配到什么

12:08.870 --> 12:10.370
匹配到这个Home主键了

12:10.370 --> 12:10.670
OK

12:10.670 --> 12:13.170
那么我们就要调用Home主键的loaddata

12:13.170 --> 12:13.470
对吧

12:13.470 --> 12:14.470
要调用它

12:14.470 --> 12:15.670
如果说匹配到这个

12:15.670 --> 12:18.370
就是Movies主键了

12:18.370 --> 12:20.370
是不是要调用Movies主键的loaddata

12:20.370 --> 12:20.570
对吧

12:20.570 --> 12:21.570
要调用它

12:21.570 --> 12:23.970
所以我们要去根据主键来匹配

12:23.970 --> 12:27.170
那么现在问题又转化成这样子了

12:27.170 --> 12:28.570
调用什么叫对应主键

12:28.570 --> 12:34.770
就是根据路由匹配到的主键

12:34.770 --> 12:35.670
匹配到的主键

12:35.670 --> 12:36.970
那么但是路由匹配到的主键

12:36.970 --> 12:38.170
有可能有多个

12:38.170 --> 12:39.170
那么怎么去匹配

12:39.170 --> 12:40.670
因为它比方说

12:40.670 --> 12:41.570
我们匹配到Movies

12:41.570 --> 12:42.470
是不是匹配到两个主键

12:42.470 --> 12:43.470
一个是Movies本身

12:43.470 --> 12:44.670
一个是它的副主键

12:44.670 --> 12:45.470
Front

12:45.470 --> 12:46.170
对吧

12:46.170 --> 12:46.970
是不是有多个

12:46.970 --> 12:49.070
那么Front里面如果说也有的data

12:49.070 --> 12:50.270
那是不是也要调用

12:50.270 --> 12:50.570
对吧

12:50.570 --> 12:51.370
也要调用

12:51.370 --> 12:52.170
那么凡是匹配到了

12:52.170 --> 12:53.170
我们都要调用

12:53.170 --> 12:54.770
那么这要就是涉及到另外一个问题

12:54.770 --> 12:57.470
怎么来匹配到对应的主键的问题

12:57.470 --> 12:59.970
那么怎么来匹配对应的主键呢

12:59.970 --> 13:00.470
OK

13:00.470 --> 13:02.470
那么这里我们在server端

13:02.470 --> 13:03.670
又写一个文件

13:03.670 --> 13:04.570
又写一个文件

13:04.570 --> 13:06.570
叫做就该取名为loaddata

13:06.570 --> 13:08.870
loaddata

13:08.970 --> 13:09.570
这个主键呢

13:09.570 --> 13:10.970
我们这个主键导出

13:10.970 --> 13:11.770
不是个主键

13:11.770 --> 13:12.470
这是个函数

13:12.470 --> 13:15.940
导出一个异部函数

13:15.940 --> 13:17.140
导出一个异部函数

13:17.140 --> 13:18.740
那么这个异部函数呢

13:18.740 --> 13:22.340
我们把这个放过去

13:22.340 --> 13:23.740
导出一个异部函数

13:23.740 --> 13:25.040
这边来用

13:25.040 --> 13:26.540
import

13:26.540 --> 13:28.040
loaddata

13:28.040 --> 13:29.140
Front

13:29.140 --> 13:30.240
loaddata

13:30.240 --> 13:31.740
那么这个地方就是个函数

13:31.740 --> 13:32.140
对吧

13:32.140 --> 13:33.940
而且是一个异部函数

13:33.940 --> 13:34.740
那么这个异部函数

13:34.740 --> 13:36.240
它主要是负责什么呢

13:36.240 --> 13:37.940
负责

13:37.940 --> 13:40.140
负责

13:41.140 --> 13:45.440
负责渲染前的夹战

13:45.440 --> 13:45.640
对吧

13:45.640 --> 13:47.740
要负责负责渲染前的夹战

13:47.740 --> 13:48.840
那么它肯定是个异部的

13:48.840 --> 13:50.240
还需要经过一段时间

13:50.240 --> 13:51.940
YouTube还要网络请求

13:51.940 --> 13:53.040
所以说到这一边呢

13:53.040 --> 13:54.540
我们这里肯定要等待它

13:54.540 --> 13:57.240
等待它完成之后

13:57.240 --> 13:58.640
这把一些异部函数

13:58.640 --> 14:00.240
等待它完成之后呢

14:00.240 --> 14:01.740
我们再去渲染这个东西

14:01.740 --> 14:03.040
渲染后面的主键

14:03.040 --> 14:03.740
对吧

14:03.740 --> 14:03.840
好

14:03.840 --> 14:05.840
那么现在问题又集中在这了

14:05.840 --> 14:06.840
loaddata

14:06.840 --> 14:08.440
那么这边怎么来做呢

14:08.440 --> 14:09.740
我们肯定要刚才分析的

14:09.740 --> 14:11.340
我们肯定要去匹配这个东西

14:11.340 --> 14:11.540
对吧

14:11.540 --> 14:12.640
匹配这个东西

14:12.640 --> 14:14.240
那么怎么来匹配呢

14:14.240 --> 14:14.440
好

14:14.440 --> 14:15.040
这个时候呢

14:15.040 --> 14:15.840
我们就要利用

14:15.840 --> 14:18.040
我们之前安装过的一个

14:19.240 --> 14:19.940
第三方库

14:21.340 --> 14:22.240
在哪呢

14:22.240 --> 14:22.840
我看一下啊

14:24.640 --> 14:28.440
在这react rotor config

14:28.440 --> 14:29.840
这么一个第三方库

14:29.840 --> 14:31.440
那么这个第三方库有什么作用呢

14:31.440 --> 14:35.120
我们来看一下

14:35.120 --> 14:35.720
from

14:35.720 --> 14:36.120
这个地方

14:36.120 --> 14:37.920
它三方库里边提供了一个函数

14:37.920 --> 14:39.720
叫marge roads

14:39.720 --> 14:40.120
这个函数

14:40.120 --> 14:41.720
它这个第三方库就提供两个东西

14:41.720 --> 14:42.620
一个是render roads

14:42.620 --> 14:43.320
我们之前用过了

14:43.320 --> 14:44.120
是吧

14:44.120 --> 14:45.020
血涨路由

14:45.020 --> 14:45.620
另外一个呢

14:45.620 --> 14:47.020
是marge roads

14:47.020 --> 14:47.520
marge roads

14:47.520 --> 14:48.420
它就是跟路

14:48.420 --> 14:49.820
跟这个主键没有什么关系

14:49.820 --> 14:50.520
它的作用呢

14:50.520 --> 14:52.520
主要是根据一个配置

14:52.520 --> 14:55.120
来匹配我们的

14:55.120 --> 14:57.820
就是来匹配我们匹配到的主键

14:57.820 --> 14:58.720
我们来调用一下

14:58.720 --> 14:59.420
试一下吧

14:59.420 --> 14:59.820
来看一下

14:59.820 --> 15:00.720
就是知道了

15:00.720 --> 15:00.820
啊

15:00.820 --> 15:02.420
这个东西都是在服务端运行的啊

15:02.420 --> 15:04.020
跟扣端没有一毛钱关系

15:04.020 --> 15:04.120
好

15:04.120 --> 15:05.020
那么这里边呢

15:05.020 --> 15:07.120
首先要把它传一个road config

15:07.120 --> 15:07.920
就这个东西

15:07.920 --> 15:08.220
是吧

15:08.220 --> 15:09.920
把我们的路由配置给它传进去

15:09.920 --> 15:10.520
这就是为什么

15:10.520 --> 15:12.820
我们之前要写成路由配置的这种模式

15:12.820 --> 15:13.620
导致进来啊

15:15.820 --> 15:17.820
road config

15:17.820 --> 15:21.520
from road config

15:21.520 --> 15:22.120
导致进来

15:22.120 --> 15:23.520
第一个把它传进去

15:23.520 --> 15:23.920
第二个呢

15:23.920 --> 15:25.520
是我们的路径啊

15:25.520 --> 15:26.620
比方说吧

15:26.620 --> 15:27.620
我们举个例子啊

15:27.620 --> 15:29.520
比方说我们访问的是mov's路径

15:29.520 --> 15:30.820
看它跟我们返回的是什么

15:32.820 --> 15:33.820
result

15:33.820 --> 15:34.820
就是marge

15:36.020 --> 15:37.120
输出marge

15:38.320 --> 15:39.120
保存啊

15:41.020 --> 15:41.220
好

15:41.220 --> 15:42.920
接下来我们来看一下啊

15:42.920 --> 15:44.820
它跟我们返回的是什么呢

15:44.820 --> 15:45.320
这里呢

15:45.320 --> 15:46.020
我们刷新吗

15:47.820 --> 15:48.620
刷新

15:48.620 --> 15:48.820
好

15:48.820 --> 15:49.720
你看

15:49.720 --> 15:50.920
它跟我们返回了一个输组

15:50.920 --> 15:53.020
这个输组里边是不是有两项

15:53.020 --> 15:54.920
每一项就是它匹配到的路由

15:54.920 --> 15:55.920
一看匹配到哪个

15:55.920 --> 15:57.020
就匹配到front

15:57.020 --> 15:57.420
对吧

15:57.420 --> 15:59.320
front就是我们刚才我们给它传的是

15:59.320 --> 16:00.720
我们访问的路径是mov's

16:00.720 --> 16:01.420
对吧

16:01.420 --> 16:03.020
那么给它传的是什么呢

16:03.020 --> 16:03.520
mov's

16:03.520 --> 16:04.420
那么它匹配到什么呢

16:04.420 --> 16:05.320
匹配到这个

16:05.320 --> 16:06.520
匹配到这个组件啊

16:06.520 --> 16:07.420
这个

16:07.420 --> 16:08.320
然后再匹配到什么呢

16:08.320 --> 16:09.320
它的指路由

16:09.320 --> 16:10.520
匹配到这个mov's

16:10.520 --> 16:10.720
对吧

16:10.720 --> 16:12.220
是不是匹配到两个

16:12.220 --> 16:12.420
好

16:12.420 --> 16:13.420
来看一下啊

16:13.420 --> 16:14.120
那么你看

16:14.120 --> 16:14.720
roads

16:14.720 --> 16:15.620
是不是匹配到了

16:15.620 --> 16:16.520
对不对

16:16.520 --> 16:17.620
还有marge

16:17.620 --> 16:19.120
匹配到了结果

16:19.120 --> 16:19.720
然后呢

16:19.720 --> 16:20.220
roads

16:20.220 --> 16:21.420
是不是匹配到了啊

16:21.420 --> 16:22.320
这个东西mov's

16:22.320 --> 16:22.920
也匹配到了

16:22.920 --> 16:24.620
那么匹配到匹配到了结果

16:24.620 --> 16:25.620
对吧

16:25.620 --> 16:25.820
好

16:25.820 --> 16:26.920
那么这两个东西是不是匹配到

16:26.920 --> 16:29.020
而且它可以注入了一些匹配的结果

16:29.020 --> 16:29.320
对吧

16:30.420 --> 16:31.120
好

16:31.120 --> 16:31.820
那么接下来

16:31.820 --> 16:33.020
那我们来考虑一下

16:33.020 --> 16:33.520
我们这里呢

16:33.520 --> 16:34.220
肯定是不

16:34.220 --> 16:35.420
这样的写肯定是不行的

16:35.420 --> 16:37.120
因为我把它写实了

16:37.120 --> 16:38.220
它是不是要动它的

16:38.220 --> 16:39.220
动它的放过来

16:39.220 --> 16:39.920
对吧

16:39.920 --> 16:40.720
那么这个

16:40.720 --> 16:43.120
这个这个东西匹配的结果

16:43.120 --> 16:44.520
应该动态的

16:44.520 --> 16:45.620
动态的放过来

16:45.620 --> 16:46.620
要根据我们的什么

16:46.620 --> 16:48.220
根据我们的请求路径

16:48.220 --> 16:51.220
就是浏览器去请求服务器的时候

16:51.220 --> 16:52.220
给它的路径

16:52.220 --> 16:53.920
什么根据这个路径来匹配

16:53.920 --> 16:54.120
好

16:54.120 --> 16:56.120
那么这个路径我怎么来传呢

16:56.120 --> 16:57.220
那么这里肯定

16:57.220 --> 16:58.120
肯定是获取不到

16:58.120 --> 17:00.220
那么我们在这边是不是很容易获取到

17:00.220 --> 17:00.620
怎么获取

17:00.620 --> 17:01.220
是不是这个

17:01.220 --> 17:02.020
req

17:02.020 --> 17:02.520
对吧

17:02.520 --> 17:03.720
什么passname

17:03.720 --> 17:03.920
对吧

17:03.920 --> 17:05.220
是不是这个东西获取到了

17:05.220 --> 17:06.220
所以说那我们这里是不是把

17:06.220 --> 17:08.120
把它传过去就好了

17:08.120 --> 17:09.920
我们把它passname传过去就好了

17:09.920 --> 17:10.420
那么这边呢

17:10.420 --> 17:12.720
我们把passname写进来

17:12.720 --> 17:13.720
好看一下啊

17:13.720 --> 17:14.320
那么这里呢

17:14.320 --> 17:15.320
我们就使用passname

17:15.320 --> 17:16.620
你看匹配到的结果

17:16.620 --> 17:17.720
好保存

17:17.720 --> 17:21.150
接下来我们来刷新

17:21.150 --> 17:22.150
诶

17:22.150 --> 17:23.550
这边

17:23.550 --> 17:24.850
好出现在

17:24.850 --> 17:26.050
好刷新

17:26.050 --> 17:26.850
好你看

17:26.850 --> 17:27.950
这边

17:27.950 --> 17:29.550
匹配到的是一个空速组

17:29.550 --> 17:29.750
诶

17:29.750 --> 17:31.150
我看一下啊

17:31.150 --> 17:34.050
匹配到的是一个空速组

17:34.050 --> 17:40.520
电影列表刷新

17:40.520 --> 17:42.120
这里应该是有问题啊

17:42.120 --> 17:43.920
这个passname应该是有问题

17:43.920 --> 17:44.720
我们把这个

17:44.720 --> 17:46.220
把这个req打印出来一下啊

17:46.220 --> 17:47.320
req passname

17:47.320 --> 17:48.020
是pass

17:48.020 --> 17:50.020
好像是pass还是passname

17:50.020 --> 17:51.020
我看一下吧

17:51.020 --> 17:52.520
好像是pass

17:52.520 --> 17:57.260
req passname

17:57.260 --> 18:00.600
再看看一下啊刷新

18:00.600 --> 18:01.900
哦是pass

18:01.900 --> 18:02.900
不是passname

18:02.900 --> 18:04.800
把pass给他传进去

18:04.800 --> 18:05.200
ok

18:05.200 --> 18:05.800
再来看啊

18:05.800 --> 18:07.000
再来看

18:07.000 --> 18:07.500
刷新

18:07.500 --> 18:08.700
电影业

18:08.700 --> 18:10.100
那么现在匹配到两个对吧

18:10.100 --> 18:11.300
front movies

18:11.300 --> 18:12.300
然后那么看首页啊

18:12.300 --> 18:12.800
这里刷新

18:12.800 --> 18:16.500
请求服务器

18:16.500 --> 18:18.100
这又卡住了啊

18:18.100 --> 18:19.100
然后服务器是不是匹配到了

18:19.100 --> 18:19.400
对吧

18:19.400 --> 18:20.300
匹配到了两个

18:20.400 --> 18:21.100
一个是front

18:21.100 --> 18:21.900
一个是home

18:21.900 --> 18:22.300
对吧

18:22.300 --> 18:23.600
那么通过这个方法

18:23.600 --> 18:25.400
我们是不是可以拿到服务器的玩匹配

18:25.400 --> 18:27.800
根据你的请求路径匹配到了

18:27.800 --> 18:28.400
配置

18:28.400 --> 18:29.000
对吧

18:29.000 --> 18:30.300
那么从配置文件

18:30.300 --> 18:31.200
这个数组里边

18:31.200 --> 18:32.100
每一个配置里边

18:32.100 --> 18:33.200
是不是你看一下啊

18:33.200 --> 18:33.900
每一个配置里边

18:33.900 --> 18:35.300
是不是一个component

18:35.300 --> 18:36.200
那么这个component

18:36.200 --> 18:37.900
是不是我们对应的逐渐

18:37.900 --> 18:38.200
对吧

18:38.200 --> 18:39.500
那就那就简单了对吧

18:39.500 --> 18:40.400
那么我们这里该怎么

18:40.400 --> 18:41.100
该怎么做啊

18:41.100 --> 18:41.660
for

18:41.660 --> 18:42.400
循环

18:42.400 --> 18:44.500
march

18:44.500 --> 18:46.900
marches

18:46.900 --> 18:48.300
每一次匹配的话

18:48.300 --> 18:49.300
那么这个march里边

18:49.300 --> 18:50.700
是不是一个component

18:50.700 --> 18:50.900
对吧

18:50.900 --> 18:51.800
这个component

18:51.800 --> 18:52.800
那么这个配置

18:52.800 --> 18:53.800
那么这个配置的话

18:53.800 --> 18:55.500
我们是不是可以拿到对应的组件了

18:55.500 --> 18:56.600
他匹配到的组件

18:56.600 --> 18:57.100
对吧

18:57.100 --> 18:59.900
那么只需要看一下这个组件里边有没有

18:59.900 --> 19:00.800
有没有什么呢

19:00.800 --> 19:02.000
有没有这个东西

19:02.000 --> 19:02.800
叫做

19:04.100 --> 19:04.600
loaddata

19:04.600 --> 19:04.900
对吧

19:04.900 --> 19:06.000
有没有这个loaddata

19:06.000 --> 19:06.200
好

19:06.200 --> 19:07.200
如果说有的话

19:07.200 --> 19:08.000
loaddata

19:11.990 --> 19:12.290
注意啊

19:12.290 --> 19:13.690
这里可能会匹配到多个

19:13.690 --> 19:15.890
因为他成组件之间是有线套的

19:15.890 --> 19:17.390
如果说有这个loaddata

19:17.390 --> 19:18.690
那怎么办呢

19:18.690 --> 19:19.590
怎么办

19:19.590 --> 19:21.990
我们是不是要去调用这个loaddata啊

19:22.090 --> 19:23.090
march

19:23.090 --> 19:24.290
component

19:24.290 --> 19:25.490
调用这个loaddata

19:25.490 --> 19:25.890
对吧

19:26.890 --> 19:27.190
好

19:27.190 --> 19:27.990
那么调的时候

19:27.990 --> 19:29.790
他是不是要传递一个东西进去

19:29.790 --> 19:30.690
传递什么呢

19:30.690 --> 19:31.290
诶

19:31.290 --> 19:31.890
传递什么呢

19:31.890 --> 19:32.690
传递一个仓库

19:32.690 --> 19:33.690
那么仓库很简单

19:33.690 --> 19:35.190
我们这里倒入进来

19:35.190 --> 19:35.990
Stone

19:35.990 --> 19:36.390
是吧

19:37.490 --> 19:38.290
Stone

19:38.290 --> 19:38.790
倒入进来

19:38.790 --> 19:40.190
把这个仓库给他就行了

19:40.190 --> 19:40.490
对吧

19:40.490 --> 19:41.990
因为仓库都是唯一的一个

19:42.990 --> 19:43.090
好

19:43.090 --> 19:43.790
那么这样子是吧

19:43.790 --> 19:44.690
把仓库给他了

19:45.590 --> 19:46.090
注意哦

19:46.090 --> 19:47.190
这个东西是一步的

19:47.190 --> 19:47.490
对吧

19:47.490 --> 19:48.190
是一步的

19:49.690 --> 19:50.490
那么这里呢

19:50.490 --> 19:51.390
就有一个问题

19:51.490 --> 19:53.590
他有可能有多个匹配到了

19:53.590 --> 19:54.990
匹配到了逐渐

19:54.990 --> 19:55.890
是不是有多个匹配到逐渐

19:55.890 --> 19:58.590
而且每一个逐渐可能都有loaddata

19:58.590 --> 19:59.590
那我是不是要等他

19:59.590 --> 20:01.790
这些loaddata全部加载完了过后

20:01.790 --> 20:03.390
这个函数才结束啊

20:03.390 --> 20:03.890
对吧

20:03.890 --> 20:05.690
我们要等能够等这个loaddata

20:05.690 --> 20:07.090
全部加载完成之后

20:07.090 --> 20:08.290
这个函数才结束

20:08.290 --> 20:08.590
所以说呢

20:08.590 --> 20:09.490
我们这里呢

20:09.490 --> 20:10.190
需要用到什么呢

20:10.190 --> 20:11.390
需要用到一个promise数数

20:13.390 --> 20:15.900
promise

20:15.900 --> 20:16.700
promise数数

20:18.500 --> 20:20.600
每调用一次是不是得到一个promise

20:20.600 --> 20:21.100
对吧

20:21.100 --> 20:22.400
每调用一次得到一个promise

20:22.400 --> 20:23.400
那么我们这里呢

20:23.400 --> 20:24.200
就promise

20:27.000 --> 20:28.200
push

20:28.200 --> 20:30.000
每调用一次得到一个promise

20:30.000 --> 20:31.100
我们这里呢

20:31.100 --> 20:35.100
用一个promise result

20:35.100 --> 20:36.700
把这个传进去

20:36.700 --> 20:37.600
我们什么意思呢

20:37.600 --> 20:38.100
就是说

20:38.100 --> 20:38.700
万一呢

20:38.700 --> 20:39.900
他返回的不是promise

20:39.900 --> 20:40.800
我们通过result5

20:40.800 --> 20:42.300
把它转换成promise

20:42.300 --> 20:43.800
如果它是一个promise

20:43.800 --> 20:45.600
因为我们result5这个函数的特殊性

20:45.600 --> 20:47.800
它就保留这个promise

20:47.800 --> 20:48.500
就这么个意思

20:48.500 --> 20:50.700
保证它一定要是一个promise

20:50.700 --> 20:51.300
好那么这样子呢

20:51.300 --> 20:52.700
我们就循环完成之后

20:52.700 --> 20:54.000
是不是得到一个promise的数数

20:54.000 --> 20:54.800
接下来我们就等待

20:54.800 --> 20:56.300
这个所有的promise完成

20:56.300 --> 20:57.000
怎么等待呢

20:57.000 --> 20:57.700
promise

20:59.700 --> 21:00.900
等待这个promise完成

21:00.900 --> 21:01.700
这个or这个函数

21:01.700 --> 21:03.200
它会返回一个新的promise

21:03.200 --> 21:04.200
新的promise完成

21:04.200 --> 21:04.700
什么时候

21:04.700 --> 21:05.900
就它所有的完成

21:05.900 --> 21:06.300
对吧

21:06.300 --> 21:07.600
那么这里能不能返回

21:08.500 --> 21:09.000
好这样子

21:09.000 --> 21:10.400
我就这里都甚至可以不用

21:10.400 --> 21:11.100
sync

21:11.100 --> 21:12.200
都可以不用了

21:12.200 --> 21:12.800
好那么这样子呢

21:12.800 --> 21:13.200
这个函数

21:13.200 --> 21:14.800
返回一个promise

21:14.800 --> 21:16.900
等待它这些所有的promise完成之后

21:16.900 --> 21:17.700
才行

21:17.700 --> 21:18.400
好保存

21:18.400 --> 21:18.800
接下来

21:18.800 --> 21:20.000
神奇的事情就出现了

21:20.000 --> 21:21.200
其实一点都不神奇

21:21.800 --> 21:22.000
好

21:22.000 --> 21:22.600
咱们来看一下

21:23.700 --> 21:23.800
好

21:23.800 --> 21:25.600
接下来我们刷新手页

21:27.800 --> 21:28.600
这又卡住了

21:28.600 --> 21:28.900
诶

21:28.900 --> 21:30.100
这冒错了啊

21:30.100 --> 21:30.600
config

21:30.600 --> 21:32.500
config not read a property

21:32.500 --> 21:33.800
no data on defend

21:35.700 --> 21:36.300
哦

21:36.300 --> 21:37.500
我看一下啊

21:37.500 --> 21:40.000
它说有些component

21:40.000 --> 21:40.200
哦

21:40.200 --> 21:41.900
这里写错了是吧

21:41.900 --> 21:42.900
写错没有啊

21:42.900 --> 21:43.900
我看一下config

21:44.800 --> 21:48.920
component

21:48.920 --> 21:49.220
诶

21:49.220 --> 21:49.820
写对了对啊

21:51.820 --> 21:56.470
哪个地方出了问题

21:56.570 --> 21:57.570
他再再看一下

21:57.570 --> 21:58.570
再看一下这个错误

21:59.570 --> 21:59.970
呃

21:59.970 --> 22:03.270
他说不能读取属性no data of on defend

22:03.270 --> 22:04.570
他说有个东西是on defend

22:05.370 --> 22:05.570
啊

22:05.570 --> 22:06.670
有个东西是on defend

22:08.370 --> 22:08.570
诶

22:08.570 --> 22:09.370
我们打印一下呢

22:09.370 --> 22:10.770
他怎么可能是on defend的呢

22:11.470 --> 22:12.670
不太可能是on defend的呀

22:13.470 --> 22:13.870
嗯

22:13.870 --> 22:14.670
打印一下吧

22:14.670 --> 22:15.770
打印一下marge

22:16.470 --> 22:17.470
叫component

22:17.970 --> 22:18.370
marge

22:18.370 --> 22:18.470
啊

22:18.470 --> 22:19.270
去打印marge

22:19.670 --> 22:19.970
好

22:19.970 --> 22:20.370
保存

22:21.470 --> 22:21.770
停止

22:21.770 --> 22:22.470
重新来一次

22:26.400 --> 22:26.800
好

22:27.400 --> 22:27.800
刷新

22:30.030 --> 22:30.230
好

22:30.230 --> 22:30.830
看一下啊

22:31.230 --> 22:32.130
打印出来的

22:32.130 --> 22:32.430
诶

22:33.930 --> 22:34.930
打印出来的结果

22:36.030 --> 22:36.530
呃

22:36.530 --> 22:37.730
循环每一个对象

22:37.730 --> 22:38.030
哦

22:38.030 --> 22:38.930
roach里边的吧

22:38.930 --> 22:40.730
他的roach里边的component啊

22:40.730 --> 22:41.230
他在这

22:42.130 --> 22:42.830
啊marge

22:43.330 --> 22:44.030
your road

22:45.130 --> 22:47.730
那么这里解构解构就不解构了啊

22:47.730 --> 22:48.130
road

22:48.830 --> 22:49.430
那么这里呢

22:49.430 --> 22:51.030
我们要用这个方式啊

22:51.030 --> 22:51.430
road

22:52.830 --> 22:53.230
ok

22:53.630 --> 22:54.830
那么这样没问题了啊

22:54.830 --> 22:55.230
保存

22:59.290 --> 22:59.490
好

22:59.490 --> 23:00.090
这里刷新

23:01.190 --> 23:01.290
好

23:01.290 --> 23:02.390
现在我们来看一下啊

23:03.190 --> 23:04.090
看一下首页

23:04.490 --> 23:05.590
首页这一块呢

23:05.590 --> 23:05.990
呃

23:05.990 --> 23:07.490
因为他没有没有这个loaded data

23:07.490 --> 23:07.690
对吧

23:07.690 --> 23:08.790
我们来看一下电影业

23:08.890 --> 23:09.990
把电影业刷新

23:11.190 --> 23:11.290
好

23:11.290 --> 23:12.690
接下来我们看一下右键元代吧

23:12.990 --> 23:13.390
你看

23:13.690 --> 23:14.590
服务端给我们的结果

23:14.590 --> 23:15.990
是不是就已经把填充进来了

23:16.090 --> 23:16.790
怎么回事呢

23:16.990 --> 23:19.590
因为服务端运行的时候会先经过这个方法

23:19.890 --> 23:21.790
他就一步一步去找匹配的主键

23:21.890 --> 23:22.990
如果说匹配到的主键的话

23:22.990 --> 23:23.990
还会掉入loaded data

23:23.990 --> 23:24.390
对吧

23:24.390 --> 23:25.590
掉入loaded data过后呢

23:25.590 --> 23:27.590
等他全部掉入完成之后

23:27.590 --> 23:28.690
我们才进行渲染

23:28.690 --> 23:30.090
说这当我们在渲染的时候

23:30.090 --> 23:32.190
是不是已经是掉入完成了

23:32.290 --> 23:32.690
对吧

23:32.690 --> 23:34.890
已经是把仓库里边的数据加在完成了

23:35.090 --> 23:35.390
对吧

23:35.390 --> 23:36.090
就完成了

23:36.690 --> 23:36.890
好

23:36.890 --> 23:38.690
这就是服务端运行要处理的事情

23:38.890 --> 23:39.090
好

23:39.090 --> 23:40.590
那么接下来我们继续看啊

23:40.590 --> 23:41.890
如果说我们点首页

23:42.990 --> 23:43.790
点首页的话

23:43.790 --> 23:45.190
会我们刷新啊

23:45.190 --> 23:46.490
如果说直接请求首页的话

23:46.490 --> 23:47.590
会不会有电影列表

23:47.990 --> 23:48.990
会不会有这个数据

23:48.990 --> 23:49.890
那肯定是没有

23:49.890 --> 23:50.090
对吧

23:50.090 --> 23:50.890
肯定是没有

23:50.890 --> 23:51.290
为什么呢

23:51.290 --> 23:53.490
因为他没有匹配到这个movement主键

23:53.490 --> 23:56.390
那么自然不会去掉入movement主键里边的方法

23:56.490 --> 23:57.690
自然不会去掉用

23:58.390 --> 23:58.890
ok

23:58.890 --> 24:00.890
那么这就是这一块的处理方式

24:01.590 --> 24:01.890
好

24:01.890 --> 24:03.690
那么这里处理好了之后呢

24:03.690 --> 24:04.690
接下来我们再来看啊

24:04.690 --> 24:05.290
还有问题

24:05.890 --> 24:07.090
点击电影列表之后

24:07.290 --> 24:07.990
咱们刷新

24:08.690 --> 24:10.390
我们看一下有客户团检查

24:11.090 --> 24:11.990
客户团检查

24:12.590 --> 24:13.690
一会发现一个

24:14.490 --> 24:15.690
有手机的现象啊

24:16.590 --> 24:17.090
什么

24:17.390 --> 24:19.690
一辈子server intimate content

24:20.490 --> 24:21.190
没关系啊

24:21.190 --> 24:22.190
我们这里来看一下啊

24:22.190 --> 24:23.190
看一下这里的问题

24:23.590 --> 24:24.490
什么问题呢

24:27.090 --> 24:28.690
哪个哪个就是

24:31.190 --> 24:32.290
哪个地方写的有问题吗

24:32.490 --> 24:33.190
没问题啊

24:33.990 --> 24:34.990
那么这里什么问题呢

24:34.990 --> 24:35.490
就是在这

24:35.890 --> 24:36.690
看一下regardx

24:40.240 --> 24:41.140
你会发现

24:41.640 --> 24:42.940
服务器做到这件事

24:42.940 --> 24:43.740
刺行之后呢

24:43.740 --> 24:45.540
客户团又要去做一次

24:45.540 --> 24:47.940
你看客户团是不是也掉入了movementdata

24:48.140 --> 24:48.540
对吧

24:48.840 --> 24:49.740
出发这个x

24:49.840 --> 24:51.440
是不是也要去做一次

24:52.040 --> 24:54.640
那么也就是说服务团运行的一次过后呢

24:54.640 --> 24:57.040
客户团到这里是不是又要运行一次

24:57.840 --> 24:58.540
啊在这

24:59.340 --> 25:00.340
是不是又要运行一次

25:00.540 --> 25:02.340
那如果说客户团不运行的话

25:02.340 --> 25:03.040
那么假设啊

25:03.040 --> 25:04.340
我们在这里把这个去掉

25:06.040 --> 25:06.640
啊假设吧

25:06.640 --> 25:07.440
把去去掉

25:07.640 --> 25:09.140
去掉客户团不运行的话

25:09.340 --> 25:09.840
那么

25:10.340 --> 25:12.240
就会导致一个结果又没了

25:12.440 --> 25:13.440
东西又没了

25:13.540 --> 25:15.340
刚才的错误就是个就是这个问题

25:15.640 --> 25:17.440
就是说客户团这边呢

25:17.540 --> 25:18.640
他得到了仓库啊

25:18.640 --> 25:20.040
你看他得到了仓库

25:21.950 --> 25:23.050
是没有数据的

25:23.850 --> 25:25.350
而服务器给我们的

25:25.550 --> 25:27.450
服务器的仓库那边是有数据的

25:27.450 --> 25:27.850
对吧

25:27.950 --> 25:30.750
表示了服务器的仓库跟客户团的仓库呢

25:30.750 --> 25:31.750
不一致了

25:32.450 --> 25:33.150
没了意思吧

25:33.550 --> 25:36.450
服务器的仓库跟客户团的仓库已经不一致了

25:36.950 --> 25:38.250
因此的导致呢

25:38.250 --> 25:39.950
这里就出现这个问题啊

25:40.050 --> 25:41.450
那么客户团这边的结构

25:41.450 --> 25:42.150
ACM结构

25:42.150 --> 25:44.250
因为结构是跟数据宣传出来的吧

25:44.450 --> 25:46.550
所以说这个结构了跟服务器又不一致了

25:46.650 --> 25:47.950
那么这个问题要解决

25:48.450 --> 25:49.450
服务器那边有仓库

25:49.450 --> 25:50.550
客户团这边不知道啊

25:50.550 --> 25:51.750
不知道服务器那边有仓库

25:51.750 --> 25:52.750
客户团的仓库也

25:52.750 --> 25:54.250
他是自己的一个仓库啊

25:54.250 --> 25:55.350
在自己的内存里边

25:55.450 --> 25:57.750
因此的客户团仓库一定是从零开始的

25:58.150 --> 25:58.950
那么这个时候呢

25:59.350 --> 26:00.150
涉及到一个问题

26:00.150 --> 26:03.250
我们服务器端如何把已经得到了仓库

26:03.750 --> 26:04.750
告诉客户团

26:05.750 --> 26:07.350
我们把这个过程叫做脱水

26:07.350 --> 26:09.150
就把服务器这端的东西呢

26:09.350 --> 26:11.150
把这个数据的甩出去

26:11.550 --> 26:12.350
甩给客户团

26:12.950 --> 26:13.950
那么客户端那边呢

26:13.950 --> 26:14.750
把这个数据呢

26:14.750 --> 26:17.550
又加入到客户端里边叫做注水

26:17.750 --> 26:18.850
服务器脱水

26:18.950 --> 26:19.850
客户端注水

26:20.350 --> 26:21.150
就这么个意思

26:21.550 --> 26:21.750
好了

26:21.750 --> 26:22.450
那也就是说

26:23.850 --> 26:25.250
我们在宣传组建的时候

26:25.550 --> 26:26.550
还要做一件事

26:26.750 --> 26:28.550
要把这个数据呢告诉客户端

26:28.750 --> 26:29.550
怎么告诉呢

26:29.650 --> 26:30.050
你看啊

26:30.050 --> 26:31.350
这里我们可以这样处理

26:31.650 --> 26:32.350
这里有个函数

26:32.350 --> 26:32.850
get item

26:32.850 --> 26:33.850
我们之前写过的

26:34.450 --> 26:37.050
我们只需要在这个函数里边做这么一件事

26:39.260 --> 26:41.460
给他的window里边加上一个东西

26:42.160 --> 26:42.960
window里边

26:43.760 --> 26:46.060
比方说我们把它叫做配data

26:47.460 --> 26:49.060
加上一个东西

26:49.260 --> 26:49.760
这个东西呢

26:49.760 --> 26:50.560
它是一个啥呀

26:50.560 --> 26:52.460
它是一个节省格式的置物串

26:54.060 --> 26:54.460
或者是呢

26:54.460 --> 26:55.560
就是一个完整的对象

26:55.560 --> 26:56.960
就一个节省格式的置物串

26:57.260 --> 26:58.960
我们就用一个节省格式的置物串

26:59.260 --> 27:01.560
我们把这个节省格式的置物串呢放这

27:02.160 --> 27:03.460
这个节省格式的置物串是什么呢

27:03.560 --> 27:05.060
就是我们服务器端

27:05.060 --> 27:06.560
因为我们这里是在服务器端宣传吧

27:06.560 --> 27:06.960
对吧

27:06.960 --> 27:07.460
宣传的时候呢

27:07.460 --> 27:09.360
就顺便把服装的仓库呢

27:09.360 --> 27:10.660
全部给它加进去

27:11.160 --> 27:11.260
好

27:11.260 --> 27:12.160
那么怎么办呢

27:12.160 --> 27:12.960
导入仓库对象

27:17.160 --> 27:18.360
那么仓库里面我们知道

27:18.360 --> 27:19.360
有这么一个属性

27:20.560 --> 27:22.060
还有一个函数叫get state

27:22.060 --> 27:22.360
对吧

27:22.860 --> 27:23.960
得到它的所谓状态

27:23.960 --> 27:25.460
整个整个仓库的状态

27:25.660 --> 27:26.160
然后呢

27:26.160 --> 27:26.860
我们怎么样呢

27:26.860 --> 27:28.860
我们把这个状态转换成节省格式

27:29.360 --> 27:29.760
节省

27:30.560 --> 27:30.960
啊

27:30.960 --> 27:31.560
StringDV

27:33.630 --> 27:33.830
好

27:33.830 --> 27:34.630
接下来看一下啊

27:35.730 --> 27:35.930
好

27:35.930 --> 27:36.430
保存

27:36.430 --> 27:38.030
接下来我们访运刷新电影页

27:39.030 --> 27:39.230
好

27:39.230 --> 27:39.430
然后呢

27:39.430 --> 27:41.130
我们看一下服务端得到了结果

27:41.230 --> 27:41.830
你会看到

27:43.810 --> 27:45.810
服务端是不是把我们的数据加进来了

27:46.210 --> 27:46.610
看

27:46.810 --> 27:47.910
是不是把数据加进来了

27:48.310 --> 27:49.210
加到这里边去了

27:49.510 --> 27:49.910
对吧

27:50.010 --> 27:51.410
整个仓库的

27:51.610 --> 27:53.010
整个仓库的对象

27:53.310 --> 27:55.010
整个仓库的所有数据加进来了

27:55.110 --> 27:57.010
这是服务端得到了仓库数据

27:57.210 --> 27:58.910
那么我们只需要让这个数据呢

27:58.910 --> 28:00.410
跟客户端保持一次就行了

28:00.410 --> 28:01.310
怎么保持一次呢

28:01.410 --> 28:02.510
因为到了客户端这边

28:02.510 --> 28:03.910
客户端在运行它的介式

28:03.910 --> 28:05.310
是不是要运行它的仓库

28:05.310 --> 28:05.610
对吧

28:05.810 --> 28:06.810
初始化它的仓库

28:07.010 --> 28:08.810
在客户端初始化仓库的时候

28:08.810 --> 28:10.010
这是个权具变量

28:10.010 --> 28:11.310
我们只需要把这个权具变量

28:11.310 --> 28:14.410
作为默正的仓库状态加进去就行了

28:14.710 --> 28:15.010
好

28:15.010 --> 28:16.910
咱们找到客户端仓库代码

28:17.910 --> 28:18.610
仓库在这

28:19.310 --> 28:20.010
啊在这

28:20.410 --> 28:21.310
这是不是仓库代码

28:21.310 --> 28:21.510
对吧

28:21.510 --> 28:22.510
在第二个参数

28:22.510 --> 28:24.310
我们是不是可以使用window第二

28:24.710 --> 28:25.910
PageDatas

28:26.210 --> 28:26.610
对吧

28:26.610 --> 28:27.410
是不是使用这个

28:27.610 --> 28:31.010
那么把它作为整个客户端仓仓库的初始状态

28:31.510 --> 28:32.310
好保存

28:33.310 --> 28:34.510
接下来我们再来刷新

28:35.510 --> 28:37.010
好你看客户端是不是有了

28:37.010 --> 28:37.510
我把

28:37.810 --> 28:40.010
你看我客户端这里是把这个注射掉的

28:40.010 --> 28:40.910
注射掉的

28:41.110 --> 28:42.810
那么客户端这边仓库也有了

28:42.910 --> 28:44.710
那么这样子的就跟服务器保持一次

28:44.710 --> 28:46.110
你看这个错误也消失了

28:46.910 --> 28:47.510
没问题吧

28:48.310 --> 28:48.710
好

28:49.010 --> 28:51.110
那么现在又遇到另外一个问题

28:51.510 --> 28:52.810
问题一步一步解决

28:53.710 --> 28:55.310
那客户端现在这个问题

28:55.310 --> 28:56.210
就是这个地方

28:57.410 --> 28:59.110
到底有没有必要

28:59.910 --> 29:01.710
有没有必要去使用这个呢

29:02.510 --> 29:03.910
使用这个有没有必要

29:04.610 --> 29:05.610
还是有必要的

29:06.110 --> 29:07.110
还是有必要的

29:07.610 --> 29:08.310
什么必要

29:08.810 --> 29:10.110
为什么必要

29:10.110 --> 29:11.110
是因为这个样子

29:11.210 --> 29:12.610
如果说你这里不使用这个

29:12.610 --> 29:14.010
你看接下来有一个

29:14.510 --> 29:15.310
神奇的现象

29:15.510 --> 29:17.210
我们客户端访问首页

29:18.010 --> 29:19.110
访问首页的时候

29:19.110 --> 29:20.710
服务端要不要有仓库数据

29:21.110 --> 29:21.910
我们来看一下吧

29:22.410 --> 29:23.310
就是有没有仓库数据

29:23.310 --> 29:23.910
肯定有

29:24.110 --> 29:24.610
肯定有

29:26.910 --> 29:27.310
不对

29:27.510 --> 29:28.510
首页怎么会有这个

29:28.710 --> 29:29.010
刷新

29:29.910 --> 29:30.910
首页是不能有这个的

29:32.210 --> 29:33.710
首页是不会有这个的

29:34.710 --> 29:35.510
明白了明白了

29:35.710 --> 29:36.910
这里还有个问题还没解决

29:37.110 --> 29:38.110
还有个问题没解决

29:38.410 --> 29:39.110
比如说服务器

29:39.910 --> 29:41.410
它是不会断的

29:41.710 --> 29:42.910
服务器它是不会断的

29:43.210 --> 29:44.610
这就导致了一个问题

29:45.410 --> 29:46.810
服务器不断的话

29:47.010 --> 29:48.510
那么就导致了一个什么问题呢

29:49.010 --> 29:51.710
就是说每一个人访问了服务器的仓库

29:51.710 --> 29:52.410
都是一样的

29:52.910 --> 29:53.910
那是这样子不合理

29:54.510 --> 29:56.110
服务器它不断的话

29:56.110 --> 29:57.810
导致每一个人访问的服务器

29:57.810 --> 29:58.910
仓库都完全一致

29:59.610 --> 30:01.610
那么这样子是要出问题的

30:01.610 --> 30:02.710
这个问题我们下节可解决

30:02.910 --> 30:03.710
下节可解决

30:03.910 --> 30:05.310
那么这里可能我们专注于解决

30:05.310 --> 30:06.610
第一个我们刚才的问题

30:06.610 --> 30:07.910
那么这里我们重启服务器

30:10.600 --> 30:11.600
下节课我们解决这个问题

30:13.600 --> 30:15.800
就是SSR Shared里边还是有不少问题的

30:16.400 --> 30:18.200
这样我们再捞首页

30:19.100 --> 30:19.800
首页出来了

30:19.800 --> 30:20.500
咱们来看一下

30:20.600 --> 30:21.800
我们重启了服务器过后

30:21.800 --> 30:23.200
我们如果说请求首页

30:23.200 --> 30:24.200
是不是没有电影列表

30:24.700 --> 30:25.800
是没有电影列表

30:26.000 --> 30:26.700
那么这个时候

30:26.700 --> 30:28.400
科武端去访问电影列表页

30:28.400 --> 30:29.100
是不是什么都没有

30:29.600 --> 30:30.300
所以说这个单码

30:30.300 --> 30:31.300
你还不能去

30:31.300 --> 30:31.600
对吧

30:31.600 --> 30:32.100
不能去

30:32.100 --> 30:33.500
我们刚才看到的问题是

30:33.500 --> 30:37.100
因为之前访问过服务器的电影列表页

30:37.500 --> 30:39.900
所以说服务器端记录了仓库

30:40.300 --> 30:40.900
仓库器对下来

30:40.900 --> 30:41.700
它不会停的

30:41.700 --> 30:42.700
它不会停的

30:42.700 --> 30:44.300
它不是根据每一次请求

30:45.300 --> 30:46.300
得到不同的仓库

30:46.300 --> 30:46.900
它不是的

30:46.900 --> 30:49.600
它是所有的请求都用同一个仓库

30:49.600 --> 30:50.900
这个东西显然不好的

30:51.300 --> 30:53.100
比方说有些跟用户相关的数据

30:53.100 --> 30:54.100
是要出问题的

30:54.100 --> 30:54.900
这样子不好的

30:55.300 --> 30:57.300
那么这里我们下节课再解决这个问题

30:57.500 --> 30:59.500
应该是根据每一次请求

30:59.600 --> 31:00.700
得到不同的仓库

31:01.300 --> 31:02.500
这个问题让我们下节课解决

31:02.800 --> 31:02.900
好

31:02.900 --> 31:03.800
那么现在这个问题的

31:03.800 --> 31:05.100
我们现在把这个问题解决了

31:05.500 --> 31:06.300
就说如果说

31:06.900 --> 31:08.300
它一开始访问的是首页

31:08.900 --> 31:10.500
没有通过服务器访问电影列

31:10.700 --> 31:12.900
那么服务器它是不会触发电影的

31:13.100 --> 31:13.860
电影列的

31:14.100 --> 31:14.700
漏Data

31:14.900 --> 31:16.900
就导致了服务器的仓库里面没有电影

31:17.900 --> 31:19.100
那么给科武端的数据

31:19.100 --> 31:20.100
咱们再看一下

31:22.660 --> 31:23.660
给科武端的数据

31:23.660 --> 31:24.660
它就没有电影

31:24.660 --> 31:25.860
你看电影是空的

31:26.460 --> 31:26.860
放大一点

31:27.060 --> 31:27.660
电影是空的

31:28.460 --> 31:30.660
那么科武端到了科武端这边

31:31.060 --> 31:32.660
如果说直接切换了电影来的话

31:33.060 --> 31:34.860
因为它这里是没有再访问服务器的

31:34.860 --> 31:36.260
是没有再访问服务器的

31:36.260 --> 31:37.960
所以说科武端这边是没有电影列表的

31:37.960 --> 31:39.460
需要让科武端来加载

31:39.660 --> 31:40.660
说这个东西还不能去

31:40.860 --> 31:43.060
说这个地方我们以为这么一个方式

31:43.060 --> 31:43.660
就是说

31:44.560 --> 31:45.060
如果

31:46.460 --> 31:48.460
如果服务器有

31:48.760 --> 31:49.260
就是

31:49.660 --> 31:50.360
处理了

31:50.760 --> 31:51.860
处理了数据

31:52.460 --> 31:54.060
则什么也不做

31:56.560 --> 31:59.660
如果服务器没有处理数据

32:01.060 --> 32:01.460
则

32:02.260 --> 32:02.760
则什么呢

32:03.060 --> 32:03.960
则就是

32:07.420 --> 32:09.020
需要加载数据

32:09.220 --> 32:09.620
对吧

32:09.920 --> 32:12.220
那么现在问题就是我们怎么知道

32:12.220 --> 32:14.320
服务器有没有处理数据呢

32:16.120 --> 32:18.520
我们怎么知道服务器有没有处理数据呢

32:19.420 --> 32:20.620
那么这个时候呢

32:20.820 --> 32:21.920
我们可以利用

32:22.120 --> 32:22.520
在

32:22.920 --> 32:24.520
生成到科武端的时候

32:25.020 --> 32:26.320
再给它加一个数项

32:26.820 --> 32:27.920
就是高速

32:28.220 --> 32:30.220
高速科武端我有没有处理

32:30.220 --> 32:32.020
哪些数据我是处理过的

32:32.120 --> 32:33.020
就是我访问

32:33.020 --> 32:36.120
就是我访问哪个页面的数据是处理过的

32:36.520 --> 32:37.520
好怎么来告诉呢

32:37.520 --> 32:38.720
我们可以用这个这种方式

32:38.720 --> 32:40.020
但是这里有很多办法

32:40.720 --> 32:41.620
有很多办法的

32:41.920 --> 32:42.920
比方说我们这里呢

32:43.020 --> 32:44.120
就是request

32:44.820 --> 32:46.120
request pass

32:47.420 --> 32:48.220
来自于哪呢

32:48.320 --> 32:49.120
来自于

32:49.820 --> 32:50.520
就是

32:51.620 --> 32:52.620
请求的

32:52.920 --> 32:53.820
请求的路径

32:54.520 --> 32:55.320
请求的路径

32:55.720 --> 32:57.120
那么这里是没有请求对象的

32:57.120 --> 32:57.320
对吧

32:57.320 --> 32:58.120
没有请求对象

32:58.120 --> 32:58.520
那么

32:58.820 --> 33:00.320
你需要给我传一个参数过来

33:00.820 --> 33:02.020
我们之前只有一个参数

33:02.020 --> 33:03.320
那么还需要给我传一个参数过来

33:03.320 --> 33:03.820
pass

33:03.920 --> 33:05.120
就是你请求的路径

33:05.220 --> 33:06.020
好那么这边呢

33:06.020 --> 33:06.920
在Render的时候呢

33:06.920 --> 33:08.020
我们需要给它传一个参数

33:08.220 --> 33:09.220
request.pass

33:10.220 --> 33:10.920
传进去

33:11.120 --> 33:11.920
那么这样子呢

33:11.920 --> 33:13.020
它在生成一天半的时候呢

33:13.020 --> 33:14.520
它就会把这种东西告诉科武端

33:14.620 --> 33:15.620
那么我之前

33:15.920 --> 33:17.120
请求服务器的时候

33:17.120 --> 33:18.220
请求的是哪个路径

33:19.020 --> 33:19.820
是这么一个路径

33:19.820 --> 33:20.620
好咱们来看一下

33:21.720 --> 33:22.120
这里

33:22.920 --> 33:23.420
回到手里

33:23.420 --> 33:24.020
刷新

33:29.220 --> 33:29.820
刷新

33:30.820 --> 33:32.020
这里要给那个

33:32.020 --> 33:33.520
要给一个双引号

33:34.520 --> 33:35.120
这支不错嘛

33:35.120 --> 33:35.520
对吧

33:35.920 --> 33:36.520
刷新

33:37.120 --> 33:37.720
这里刷新

33:38.520 --> 33:39.920
右键看元丹马

33:40.120 --> 33:42.120
元丹马里边是不是告诉了他这个东西

33:42.320 --> 33:42.720
对吧

33:42.720 --> 33:43.820
就告诉了他这个东西

33:44.320 --> 33:45.120
好那么接下来呢

33:45.120 --> 33:46.320
我们在科武端这边处理的时候

33:46.320 --> 33:47.120
就这样处理

33:47.720 --> 33:48.320
你看啊

33:48.920 --> 33:50.220
我们这里不是电影业吗

33:50.220 --> 33:50.620
对吧

33:50.620 --> 33:51.620
如果说

33:52.120 --> 33:53.520
我们这里通过window点

33:53.520 --> 33:55.020
因为这个东西肯定是在科武端运行

33:55.020 --> 33:56.120
服务端是不运行的

33:56.220 --> 33:57.520
那么window点什么呢

33:57.520 --> 33:59.420
window点request.pass

34:00.920 --> 34:02.020
如果说等于了

34:02.220 --> 34:02.820
movie

34:03.420 --> 34:04.320
等于那movie

34:04.520 --> 34:05.120
ok

34:05.120 --> 34:06.220
那么说明了什么呢

34:06.520 --> 34:09.720
我们就是科武端浏览器请求的

34:09.720 --> 34:11.320
就直接是请求了这个movie

34:11.320 --> 34:11.720
对吧

34:12.120 --> 34:13.520
请求的直接是这个movie

34:13.820 --> 34:15.120
那么这样子一来了

34:15.120 --> 34:16.020
我们就要干嘛呢

34:16.020 --> 34:18.020
我们就不需要加载数据了

34:18.020 --> 34:19.620
不需要加载数据

34:20.520 --> 34:21.020
为什么呢

34:21.020 --> 34:23.420
因为你科武端请求的本身就是这个东西

34:23.420 --> 34:24.820
服务已经把数据加载过了

34:24.820 --> 34:26.620
不需要再重新加载了

34:26.620 --> 34:27.720
所以说我们这里return

34:28.220 --> 34:28.920
else

34:29.320 --> 34:30.220
如果说你

34:30.720 --> 34:32.320
科武端请求的地址不是这个地址

34:32.320 --> 34:33.820
那么电影的数据是不是要加载

34:33.920 --> 34:34.320
对吧

34:34.320 --> 34:34.820
不要加载

34:34.820 --> 34:36.120
那么我们在这里再加载

34:36.920 --> 34:37.320
ok

34:37.320 --> 34:38.620
那么就形成了这么一个效果

34:39.220 --> 34:39.420
好

34:39.420 --> 34:40.820
现在咱们再看一下

34:41.220 --> 34:42.020
再看一下

34:42.820 --> 34:44.420
我们在首页刷新

34:46.360 --> 34:47.460
我们这里输出一下吧

34:47.460 --> 34:48.460
给大家看不清楚

34:48.460 --> 34:49.260
输出一下

34:49.360 --> 34:51.260
不需要加载数据

34:51.660 --> 34:51.860
好

34:51.860 --> 34:52.760
这里输出一下

34:53.860 --> 34:54.960
加载数据

34:56.060 --> 34:56.260
好

34:56.260 --> 34:56.860
保存

34:57.160 --> 34:57.460
好

34:57.460 --> 34:58.760
首页我们刷新

34:58.760 --> 34:59.360
你看啊

34:59.360 --> 34:59.860
服务端

34:59.860 --> 35:01.360
再看看服务端给我们的结果

35:01.660 --> 35:02.560
还是这个东西

35:02.560 --> 35:02.960
对吧

35:03.060 --> 35:04.460
然后让我们到电影列表页

35:04.460 --> 35:05.660
现在不会访问服务器了

35:05.660 --> 35:06.860
都是无刷新跳转

35:06.860 --> 35:07.860
到电影列表页

35:08.060 --> 35:09.360
然后你看是不是加载数据了

35:09.560 --> 35:09.960
对吧

35:09.960 --> 35:10.760
加载数据了

35:11.360 --> 35:11.560
好

35:11.560 --> 35:11.960
你看

35:12.260 --> 35:12.860
那么这边呢

35:12.860 --> 35:14.260
因为服务器这边还是这个鞋杠

35:14.260 --> 35:14.460
对吧

35:14.460 --> 35:15.660
因为没有刷新页面

35:15.660 --> 35:16.260
还是个鞋杠

35:16.260 --> 35:16.860
那么一看

35:16.860 --> 35:18.860
服务器没有访问过电影列表页

35:18.860 --> 35:19.160
ok

35:19.160 --> 35:19.960
再加载数据

35:20.360 --> 35:20.560
好

35:20.560 --> 35:22.360
如果说我们直接访问电影列表页呢

35:24.560 --> 35:25.360
直接访问了

35:25.560 --> 35:26.560
怎么还是加载了

35:26.760 --> 35:27.260
我看一下

35:27.660 --> 35:28.960
直接访问电影列表页

35:30.060 --> 35:30.660
看一下

35:31.060 --> 35:31.860
movies

35:32.060 --> 35:32.660
这里写错了

35:33.260 --> 35:34.560
movies加个s

35:35.360 --> 35:35.560
好

35:35.560 --> 35:36.560
那么这里再来

35:37.260 --> 35:38.260
所以不需要加点数据

35:38.260 --> 35:38.960
那么这个时候

35:38.960 --> 35:39.860
你看一下仓库

35:40.760 --> 35:41.360
仓库

35:41.560 --> 35:43.060
它就没有触发别的X型了

35:43.060 --> 35:43.360
对吧

35:43.360 --> 35:44.560
就没有触发别的X型了

35:44.560 --> 35:45.760
它保持服务器

35:45.760 --> 35:47.060
就是默认的仓库数据

35:47.460 --> 35:47.960
对吧

35:48.260 --> 35:48.760
ok

35:48.760 --> 35:50.560
那么就是数据是从服务器来的

35:51.160 --> 35:51.360
好

35:51.360 --> 35:52.160
那么这样子呢

35:52.260 --> 35:54.160
就实现了在数据层面

35:54.360 --> 35:56.260
服务器跟客户端之间的

35:56.360 --> 35:56.860
统购

35:56.860 --> 35:58.160
当然这里还有一些问题

35:58.160 --> 35:59.160
就刚才我们看到问题

35:59.160 --> 36:00.360
这个仓库是共享的

36:00.360 --> 36:01.360
这个问题是不好的

36:01.360 --> 36:02.160
之前没注意

36:02.260 --> 36:02.560
好了

36:02.560 --> 36:04.060
那么下去可能咱们来解决

36:04.060 --> 36:05.360
一个仓库共享的问题

