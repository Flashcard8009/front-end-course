WEBVTT

00:00.620 --> 00:02.620
好 我们接着上几个讲

00:03.620 --> 00:05.620
现在呢 我们来解决一个问题啊

00:05.620 --> 00:09.620
因为我们的页面呢 是在服务器端旋转出来的啊

00:09.620 --> 00:12.620
那么我们现在解决一个问题就是 我们先把启动起来再说

00:12.620 --> 00:14.620
先启动起来

00:14.620 --> 00:16.620
PowerShell

00:16.620 --> 00:19.620
NPMRoundDev

00:19.620 --> 00:21.620
启动起来

00:21.620 --> 00:25.620
这是咱们用localhost8080来访问

00:25.620 --> 00:27.620
OK

00:27.620 --> 00:29.620
现在呢 我们到页面里边去

00:29.620 --> 00:31.620
这次有服务器端旋转的页面 对吧

00:31.620 --> 00:33.620
我们这里来改一下

00:33.620 --> 00:36.620
改成这种啊 下面加一个按钮

00:37.620 --> 00:40.620
这个按钮呢 我们就写个点击嘛 点击

00:40.620 --> 00:43.620
好 点击之后呢 干脆这样吧

00:43.620 --> 00:46.620
我把它做成一个RideHook组件

00:46.620 --> 00:50.620
OK 我们把这样子做一下啊 稍微做的像样的一样的

00:51.620 --> 00:53.620
RC

00:53.620 --> 00:55.620
对 叫啥呢

00:55.620 --> 00:57.620
RideState

00:57.620 --> 00:59.620
好 那么这边呢 我们UseState

00:59.620 --> 01:01.620
UseState

01:01.620 --> 01:07.620
好像就是UseState

01:07.620 --> 01:09.620
OK 这里来一个N

01:09.620 --> 01:11.620
或者是Number

01:11.620 --> 01:13.940
Number

01:13.940 --> 01:15.940
那么一开始是0

01:15.940 --> 01:17.940
我们这里边呢 显示一个Number

01:17.940 --> 01:19.940
在这里显示N

01:19.940 --> 01:20.940
Number

01:20.940 --> 01:22.940
然后点击的时候我干嘛呢

01:22.940 --> 01:24.940
点击的时候啊 我们给它写一个unclick

01:25.940 --> 01:28.940
点击的时候呢 我要把这个n增加

01:28.940 --> 01:29.940
要把这个n增加

01:29.940 --> 01:31.940
那么我们就用setNumber

01:31.940 --> 01:33.940
就Number加1

01:34.940 --> 01:35.940
OK

01:36.940 --> 01:40.940
好 行了啊 那咱们写成这么一种格式

01:40.940 --> 01:42.940
无效的制服

01:42.940 --> 01:46.500
OK 好 写这么一种格式

01:46.500 --> 01:47.500
那么现在呢 我们来看一下啊

01:47.500 --> 01:48.500
因为它们刷新

01:48.500 --> 01:49.500
有这么一个按钮了

01:49.500 --> 01:50.500
那么我们点击之后

01:50.500 --> 01:52.500
按钮这个数字会不会增加呢

01:52.500 --> 01:54.500
因为我们知道这个是正确的一个RideState嘛

01:54.500 --> 01:55.500
对吧 非常简单

01:55.500 --> 01:56.500
我们点击之后呢

01:56.500 --> 01:58.500
按你说啊 它要重新选择这个主线

01:58.500 --> 02:00.500
那么这个数字肯定要加1的

02:00.500 --> 02:02.500
那么我们点击一下看一下

02:02.500 --> 02:03.500
有没有增加啊

02:03.500 --> 02:04.500
没有增加

02:04.500 --> 02:05.500
哎呀 当然不信邪

02:05.500 --> 02:07.500
那我们这里再简单做一下呢

02:07.500 --> 02:09.500
我们这里输出啊 输出一个Hello

02:09.500 --> 02:11.500
看一下能不能输出呢

02:11.500 --> 02:12.500
好 这里呢

02:12.500 --> 02:14.500
外面的敲啊 不用管它

02:14.500 --> 02:15.500
我们这里的刷新

02:15.500 --> 02:18.500
然后点击之后 有没有输出

02:18.500 --> 02:19.500
是不是没有输出

02:20.500 --> 02:21.500
为什么呢

02:21.500 --> 02:23.500
为什么会出现这样的问题呢

02:24.500 --> 02:25.500
这个问题呢

02:25.500 --> 02:26.500
我们来看一下

02:26.500 --> 02:27.500
它到底是怎么导致的

02:27.500 --> 02:29.500
我们这里的点击右键

02:29.500 --> 02:30.500
查看网页元代嘛

02:30.500 --> 02:31.500
你看一下

02:31.500 --> 02:32.500
这是服务器给我们的东西

02:32.500 --> 02:33.500
看呗

02:33.500 --> 02:35.500
这是服务器给我们的东西

02:35.500 --> 02:37.500
好 那么这个服务器给我们的东西啊

02:37.500 --> 02:38.500
在这儿

02:39.500 --> 02:42.500
那么这里边有没有去引用什么GS啊

02:43.500 --> 02:44.500
所以完全没有

02:44.500 --> 02:45.500
也就是说服务器给我们一个

02:45.500 --> 02:48.500
非常非常干净单纯的这么一个页面

02:48.500 --> 02:49.500
一个A7元

02:49.500 --> 02:50.500
所以一个8吋元

02:50.500 --> 02:51.500
说这服务器都要圈然的

02:51.500 --> 02:53.500
那么这东西到了客户端到了浏览器

02:53.500 --> 02:54.500
有时间吗

02:54.500 --> 02:56.500
这个8吋元 有点击时间吗

02:56.500 --> 02:57.500
并没有

02:58.500 --> 03:01.500
那我们注册的点击时间跑到耳区了呢

03:01.500 --> 03:02.500
它是这样子

03:02.500 --> 03:04.500
我给大家梳理一下啊

03:04.500 --> 03:05.500
咱们首先呢

03:05.500 --> 03:07.500
是客户端去访问浏览器啊

03:07.500 --> 03:08.500
去请求

03:08.500 --> 03:09.500
请求什么呢

03:09.500 --> 03:10.500
请求这个地址

03:10.500 --> 03:11.500
对吧

03:11.500 --> 03:12.500
请求这个地址

03:12.500 --> 03:13.500
你看路径是这个

03:13.500 --> 03:14.500
就是一个

03:14.500 --> 03:15.500
就是一个跟路径

03:15.500 --> 03:17.500
好去请求这个地址的时候呢

03:17.500 --> 03:18.500
服务端想应

03:18.500 --> 03:19.500
想应

03:20.500 --> 03:21.500
想应

03:21.500 --> 03:22.500
一个A7秒

03:22.500 --> 03:23.500
想应什么A7秒呢

03:23.500 --> 03:24.500
想应这个A7秒

03:25.500 --> 03:27.500
这边没有任何解释

03:27.500 --> 03:28.500
好那么服务器

03:28.500 --> 03:30.500
那么也就说我们这个事件呢

03:30.500 --> 03:31.500
好像是在服务器端来渲染的

03:31.500 --> 03:33.500
那么为什么没有把事件渲染出来了

03:33.500 --> 03:34.500
是这样子啊

03:34.500 --> 03:36.500
因为我们之前学过rex

03:36.500 --> 03:38.500
rex注册事件是用事件委托注册的

03:38.500 --> 03:39.500
对吧

03:39.500 --> 03:40.500
它是给整个达会面试的

03:40.500 --> 03:41.500
根结点去注册事件的啊

03:41.500 --> 03:43.500
就相当于是用add

03:43.500 --> 03:44.500
adnessal来注册事件的

03:44.500 --> 03:47.500
它自然不会生成到元素里面写上onclick

03:47.500 --> 03:49.500
它自然不会生成到这样子的方式

03:49.500 --> 03:50.500
我们以前学过rex

03:50.500 --> 03:52.500
那么服务器端有没有注册事件呢

03:52.500 --> 03:54.500
服务器端根本就注册不了

03:54.500 --> 03:55.500
为啥呢

03:55.500 --> 03:58.500
因为服务器端注册根本就没有文档啊

03:58.500 --> 03:59.500
它没有页面啊

03:59.500 --> 04:01.500
服务器端这个东西是个制服串

04:01.500 --> 04:02.500
你看没

04:02.500 --> 04:03.500
你看这啊

04:03.500 --> 04:04.500
这个东西是不是就直接想应个制服串

04:04.500 --> 04:05.500
它根本就不存在页面

04:05.500 --> 04:07.500
它怎么去注册事件呢

04:07.500 --> 04:09.500
因为注册事件是不是要获取到页面的根结点

04:09.500 --> 04:11.500
要用dome的API

04:11.500 --> 04:13.500
那么服务器端连dome都没有

04:13.500 --> 04:14.500
啥都没有

04:14.500 --> 04:15.500
只有一个制服串给你想应过来

04:15.500 --> 04:17.500
所以它没法注册事件

04:17.500 --> 04:19.500
因此服务器端想应的是什么呢

04:19.500 --> 04:21.500
它渲染的时候就是它最初的效果

04:21.500 --> 04:23.500
这个组件最初的渲染效果

04:23.500 --> 04:25.500
那么后边的什么事件啊

04:25.500 --> 04:29.500
后续的就是渲染出来过后的一些生命周期函数啊

04:29.500 --> 04:30.500
都不能运行的

04:30.500 --> 04:31.500
是都不能运行的

04:31.500 --> 04:33.500
比方说你写一个class组件啊

04:33.500 --> 04:35.500
就是给它写个生命周期函数

04:35.500 --> 04:37.500
就是挂在完成之后的生命周期函数

04:37.500 --> 04:39.500
只要它渲染出来了

04:39.500 --> 04:40.500
那么后边的东西都不会运行的

04:40.500 --> 04:41.500
没法运行

04:41.500 --> 04:43.500
它只能在这一刻看着啊

04:43.500 --> 04:45.500
只能在这一刻

04:45.500 --> 04:46.500
把这一刻最初的状态

04:46.500 --> 04:47.500
选择成一个atme

04:47.500 --> 04:48.500
然后发送给客户端

04:48.500 --> 04:49.500
那么后续的东西呢

04:49.500 --> 04:51.500
是没法运行的啊

04:51.500 --> 04:52.500
服端本来也不会没法运行

04:52.500 --> 04:53.500
而且从逻辑上来说

04:53.500 --> 04:54.500
这个点击事件

04:54.500 --> 04:56.500
是不是要在浏览器端运行

04:56.500 --> 04:57.500
对吧

04:57.500 --> 04:58.500
它注册的时候也是在浏览器端注册

04:58.500 --> 04:59.500
是点击事件的

04:59.500 --> 05:00.500
用dome api

05:00.500 --> 05:01.500
因此呢

05:01.500 --> 05:02.500
现在就出现一个问题

05:02.500 --> 05:04.500
我们需要在浏览器端

05:04.500 --> 05:05.500
是不是也要运行一段

05:05.500 --> 05:06.500
既也是

05:06.500 --> 05:08.500
来完成事件的注册

05:08.500 --> 05:10.500
来做后续的处理

05:10.500 --> 05:11.500
就像我们最开始讲

05:12.500 --> 05:14.500
我们服务器端交给

05:14.500 --> 05:16.500
这个客户端一个完整的页面之后

05:16.500 --> 05:17.500
呢

05:17.500 --> 05:18.500
后续需要客户端

05:18.500 --> 05:20.500
也就是需要浏览器来接管

05:20.500 --> 05:21.500
这个页面

05:21.500 --> 05:22.500
因为后续用法有很多操作

05:22.500 --> 05:24.500
那么后续的操作呢

05:24.500 --> 05:25.500
就跟服务器没有关系的

05:25.500 --> 05:26.500
就需要浏览器

05:26.500 --> 05:28.500
用rex来接管后面的东西了

05:28.500 --> 05:29.500
因此呢

05:29.500 --> 05:30.500
我们最终来看一下

05:30.500 --> 05:31.500
这个我们课件里边的

05:31.500 --> 05:34.500
我们最终要形成的一个原理图

05:34.500 --> 05:36.500
就是我们要形成这么一种结构

05:36.500 --> 05:38.500
浏览器的第一步去请求服务器

05:38.500 --> 05:40.500
请求一个根地址

05:40.500 --> 05:41.500
根路径

05:41.500 --> 05:42.500
然后服务器呢

05:42.500 --> 05:43.500
很简单

05:43.500 --> 05:44.500
渲染

05:44.500 --> 05:45.500
这个rex主件

05:45.500 --> 05:46.500
渲染完了过后

05:46.500 --> 05:47.500
组装一个页面

05:47.500 --> 05:48.500
给他响应给客户端

05:48.500 --> 05:50.500
那么客户端响应的就是个完整页面

05:50.500 --> 05:51.500
但是呢

05:51.500 --> 05:52.500
现在要多一个东西

05:52.500 --> 05:54.500
就是服务器端要包含一个script

05:54.500 --> 05:55.500
包含一个标签

05:55.500 --> 05:56.500
包含一个

05:56.500 --> 05:57.500
脚本

05:57.500 --> 05:59.500
那么让客户端去引用

05:59.500 --> 06:00.500
那么这个脚本呢

06:00.500 --> 06:01.500
拿到了

06:01.500 --> 06:02.500
到了浏览器端

06:02.500 --> 06:03.500
浏览器端一渲染

06:03.500 --> 06:04.500
是不是把按钮渲染出来了

06:04.500 --> 06:06.500
按钮渲染出来了

06:06.500 --> 06:07.500
渲染出来还不够

06:07.500 --> 06:10.500
因为这个页面里边还包含一个脚本

06:10.500 --> 06:12.500
那么浏览器是不是又要去请求服务器

06:12.500 --> 06:14.500
去请求这个GS文件

06:14.500 --> 06:16.500
那么这些东西我们现在都没有

06:16.500 --> 06:17.500
你看现在都没有

06:17.500 --> 06:18.500
那么现在呢

06:18.500 --> 06:19.500
去请求这个GS文件

06:19.500 --> 06:20.500
服务器呢

06:20.500 --> 06:21.500
就会响应给他一个GS

06:21.500 --> 06:23.500
那么就都是我们这几刻要做了

06:23.500 --> 06:25.500
那么这个GS里边记录上了

06:25.500 --> 06:26.500
就记录的是

06:26.500 --> 06:28.500
就是浏览器

06:28.500 --> 06:29.500
应该去怎么接管

06:29.500 --> 06:30.500
就在浏览器端运行的GS

06:30.500 --> 06:33.500
应该去怎么去接管页面

06:33.500 --> 06:35.500
浏览器端拿到这个GS过后运行

06:35.500 --> 06:36.500
运行

06:36.500 --> 06:38.500
我们后边再说

06:38.500 --> 06:40.500
那么我们现在要做成这么一种结构

06:40.500 --> 06:42.500
也就是说浏览器端还需要运行一些GS

06:42.500 --> 06:43.500
那么现在呢

06:43.500 --> 06:45.500
我们只有服务器的GS

06:45.500 --> 06:46.500
看不看

06:46.500 --> 06:47.500
目前只有在服务器端

06:47.500 --> 06:48.500
你看就最终生成了

06:48.500 --> 06:50.500
这个电视目录下面的server.GS

06:50.500 --> 06:52.500
也是在服务器端运行的

06:52.500 --> 06:54.500
目前是没有需要

06:54.500 --> 06:56.500
没有给那个浏览器运行的GS

06:56.500 --> 06:57.500
那么现在呢

06:57.500 --> 06:59.500
我们就在这里建立一个目录

06:59.500 --> 07:01.500
我们要写一个client

07:01.500 --> 07:03.500
表示这里边的GS呢

07:03.500 --> 07:05.500
是要交给浏览器运行的

07:05.500 --> 07:06.500
那么这边呢

07:06.500 --> 07:07.500
我们还是一样的

07:07.500 --> 07:09.500
写上一个index

07:10.500 --> 07:12.500
那么特别的GS写啥呢

07:12.500 --> 07:13.500
其实很简单

07:13.500 --> 07:14.500
这边的GS

07:14.500 --> 07:15.500
这边的GS呢

07:15.500 --> 07:17.500
跟我们之前的写的

07:17.500 --> 07:19.500
Rathe的写法是一样的

07:19.500 --> 07:21.500
就是以前最早的时候

07:21.500 --> 07:22.500
你们学习Rathe的时候

07:22.500 --> 07:24.500
那么他利用的GS运行

07:24.500 --> 07:26.500
就是你的GS代码就在这里写

07:26.500 --> 07:27.500
那怎么写呢

07:27.500 --> 07:28.500
比方说

07:28.500 --> 07:29.500
那咱们就完全可以一样的

07:29.500 --> 07:31.500
首先建立一个app主件

07:31.500 --> 07:32.500
这个

07:32.500 --> 07:33.500
有的人说

07:33.500 --> 07:35.500
这个app主件怎么能通用呢

07:35.500 --> 07:36.500
目前是一样的

07:36.500 --> 07:37.500
目前是一样的

07:37.500 --> 07:38.500
那之后呢

07:38.500 --> 07:39.500
会有所区别

07:39.500 --> 07:40.500
我们还是把它分开写

07:40.500 --> 07:42.500
那么这里引用Home主件

07:42.500 --> 07:43.500
Home主件吧

07:43.500 --> 07:44.500
引用进来

07:44.500 --> 07:45.500
这是app主件

07:45.500 --> 07:46.500
我们的跟主件

07:46.500 --> 07:47.500
也就是我们要在客户端

07:47.500 --> 07:49.500
在浏览器端运行的GS呢

07:49.500 --> 07:50.500
它渲染的主件结构呢

07:50.500 --> 07:52.500
要跟服务器端保持一致

07:52.500 --> 07:53.500
完全一致

07:53.500 --> 07:54.500
那么这个东西呢

07:54.500 --> 07:55.500
其实我们把它叫做铜构

07:55.500 --> 07:56.500
就是保持服务器端

07:56.500 --> 07:58.500
跟客户端渲染的一致

07:58.500 --> 07:59.500
好

07:59.500 --> 08:00.500
那么现在呢

08:00.500 --> 08:01.500
我们把这个app主件写好了

08:01.500 --> 08:02.500
在index里边怎么写呢

08:02.500 --> 08:04.500
我们首先导入reacts

08:04.500 --> 08:06.500
然后导入reacts.

08:06.500 --> 08:09.500
导入reacts.

08:09.500 --> 08:12.500
接下来我们用reacts.

08:12.500 --> 08:13.500
我们以前怎么写的

08:13.500 --> 08:14.500
rinder对吧

08:14.500 --> 08:16.500
然后home app主件

08:16.500 --> 08:18.500
import app

08:18.500 --> 08:20.940
好

08:20.940 --> 08:21.940
那么这里呢

08:21.940 --> 08:22.940
把app主件渲染出来

08:22.940 --> 08:23.940
那么渲染到哪呢

08:23.940 --> 08:24.940
你看

08:24.940 --> 08:25.940
服务器端给我们的

08:25.940 --> 08:26.940
给我们的代码

08:26.940 --> 08:27.940
现在注意啊

08:27.940 --> 08:28.940
我们现在写的是客户端

08:28.940 --> 08:30.940
有的人就特别容易晕在这里

08:30.940 --> 08:31.940
因为

08:31.940 --> 08:32.940
你分不清楚

08:32.940 --> 08:33.940
他在服务器端运行

08:33.940 --> 08:34.940
哪个代码的客户端运行

08:34.940 --> 08:35.940
这个文件夹里边代码

08:35.940 --> 08:36.940
在客户端运行

08:36.940 --> 08:37.940
这个文件夹里边代码

08:37.940 --> 08:38.940
在服务器端运行

08:38.940 --> 08:39.940
那么这个文件夹里边代码

08:39.940 --> 08:40.940
是通用的

08:40.940 --> 08:41.940
是通用的

08:41.940 --> 08:42.940
你看

08:42.940 --> 08:43.940
客户端也使用这个

08:43.940 --> 08:44.940
也使用这个home

08:44.940 --> 08:45.940
对吧

08:45.940 --> 08:46.940
也会使用这个home

08:46.940 --> 08:47.940
服务器端也会使用home

08:47.940 --> 08:48.940
但是

08:48.940 --> 08:49.940
这个文件夹里边

08:49.940 --> 08:50.940
只在客户端运行

08:50.940 --> 08:51.940
好

08:51.940 --> 08:52.940
那么这里呢

08:52.940 --> 08:53.940
我们用document

08:53.940 --> 08:54.940
get elements by id

08:54.940 --> 08:55.940
入者

08:55.940 --> 08:56.940
你看一下

08:56.940 --> 08:57.940
理下这个逻辑

08:57.940 --> 08:58.940
那么这个代码

08:58.940 --> 08:59.940
浏览器端运行的

08:59.940 --> 09:00.940
那么浏览器端

09:00.940 --> 09:01.940
是不是有个div id

09:01.940 --> 09:02.940
为入者

09:02.940 --> 09:03.940
那么这个入程

09:03.940 --> 09:04.940
需要有react

09:04.940 --> 09:05.940
就是客户端的react

09:05.940 --> 09:06.940
来接管

09:06.940 --> 09:07.940
那么接管他的宣展

09:07.940 --> 09:08.940
服务器端宣展的仪式

09:08.940 --> 09:09.940
发过来了

09:09.940 --> 09:10.940
那么客户端

09:10.940 --> 09:11.940
还要接管后续的宣展

09:11.940 --> 09:12.940
就这么个仪式

09:12.940 --> 09:13.940
但是这个

09:13.940 --> 09:14.940
这个地方

09:14.940 --> 09:15.940
以前我们是这样子写的

09:15.940 --> 09:16.940
对吧

09:16.940 --> 09:17.940
那么这个地方

09:17.940 --> 09:18.940
我们现在要换一种写法

09:18.940 --> 09:19.940
换一种写法

09:19.940 --> 09:20.940
换什么写法

09:20.940 --> 09:23.940
我们要把它换成

09:23.940 --> 09:24.940
这个

09:24.940 --> 09:25.940
Hydrate

09:25.940 --> 09:26.940
Hydrate

09:26.940 --> 09:27.940
这什么意思

09:28.940 --> 09:29.940
什么叫注水

09:29.940 --> 09:30.940
我们运行出来了

09:30.940 --> 09:31.940
给他解释一下

09:31.940 --> 09:32.940
给他解释一下

09:32.940 --> 09:33.940
他有什么样的区别

09:33.940 --> 09:35.940
这里我们把它写出来

09:35.940 --> 09:36.940
写出来过后

09:36.940 --> 09:37.940
后面我们再解释一下

09:37.940 --> 09:39.940
我们先按照这样子写

09:39.940 --> 09:40.940
那么这个代码

09:40.940 --> 09:41.940
是在客户端运行的

09:41.940 --> 09:43.940
那怎么运行的问题

09:43.940 --> 09:45.940
他肯定要生成一个GS

09:45.940 --> 09:46.940
对吧

09:46.940 --> 09:47.940
我们看个原理图

09:47.940 --> 09:48.940
我们客户端的代码

09:48.940 --> 09:49.940
一定要生成一个GS

09:49.940 --> 09:50.940
那么通过

09:50.940 --> 09:52.940
通过这个scripps元素来引用

09:52.940 --> 09:54.940
那么这个GS文件在哪呢

09:54.940 --> 09:56.940
你不能说这个GS

09:56.940 --> 09:58.940
你看他是这种格式代码

09:58.940 --> 10:00.940
我们需要打包

10:00.940 --> 10:01.940
打包到哪呢

10:01.940 --> 10:02.940
打不到public目录

10:02.940 --> 10:04.940
你想是不是有个逻辑

10:04.940 --> 10:06.940
因为只有public目录里面

10:06.940 --> 10:07.940
还是静态资源

10:07.940 --> 10:08.940
那么浏览器

10:08.940 --> 10:09.940
他引用这样的资源

10:09.940 --> 10:10.940
才能引用得到

10:10.940 --> 10:12.940
所以说我们要把这个GS

10:12.940 --> 10:13.940
就

10:13.940 --> 10:14.940
以这个地方为入口

10:14.940 --> 10:15.940
来打包

10:15.940 --> 10:16.940
打包到这里面

10:16.940 --> 10:18.940
而且他跟load module

10:18.940 --> 10:19.940
没有任何关系

10:19.940 --> 10:20.940
打包之后是跟没有任何关系的

10:20.940 --> 10:21.940
那么该怎么办

10:21.940 --> 10:22.940
是不是要用vipack

10:22.940 --> 10:24.940
vipack以这个东西为入口

10:24.940 --> 10:25.940
来打包客户端运行的

10:25.940 --> 10:26.940
GS

10:26.940 --> 10:27.940
把它放到这里面

10:27.940 --> 10:29.940
具有完整功能的GS

10:29.940 --> 10:30.940
那么我们现在是不是

10:30.940 --> 10:31.940
又要建立一个

10:31.940 --> 10:33.940
新建一个vipack config

10:33.940 --> 10:36.940
我们该重新取个名字

10:36.940 --> 10:39.940
叫client.config.GS

10:39.940 --> 10:41.940
或者就是

10:41.940 --> 10:43.940
client.GS

10:43.940 --> 10:45.940
那么这里我们把它换成

10:45.940 --> 10:46.940
server.GS

10:46.940 --> 10:47.940
文件名换了之后

10:47.940 --> 10:49.940
我们之前的地方要改一改

10:49.940 --> 10:51.940
就这个地方的vipack

10:51.940 --> 10:52.940
我们要指定

10:52.940 --> 10:54.940
指定之前这个是服务器端的

10:54.940 --> 10:56.940
server.GS

10:56.940 --> 10:57.940
要指定一下

10:57.940 --> 10:58.940
那么我们还要再写一个

10:58.940 --> 10:59.940
还要再写个命令

10:59.940 --> 11:01.940
就dev

11:01.940 --> 11:03.940
这个是服务端的构建

11:03.940 --> 11:04.940
对吧

11:04.940 --> 11:05.940
我们用server

11:05.940 --> 11:06.940
build

11:06.940 --> 11:08.940
或者是build server

11:08.940 --> 11:09.940
server

11:09.940 --> 11:10.940
那么这里有多个

11:10.940 --> 11:11.940
多个冒号了

11:11.940 --> 11:13.940
这个东西相当于是冥冥空间

11:13.940 --> 11:14.940
其实也没上冥冥空间了

11:14.940 --> 11:15.940
就是一个制服串而已

11:15.940 --> 11:16.940
那么这里

11:16.940 --> 11:18.940
我们可以写两个信号

11:18.940 --> 11:19.940
两个信号就匹配

11:19.940 --> 11:20.940
后面所有的断

11:20.940 --> 11:21.940
匹配后面所有的断

11:21.940 --> 11:22.940
也就是说

11:22.940 --> 11:23.940
无论有多少断

11:23.940 --> 11:24.940
那么build

11:24.940 --> 11:25.940
多少个命名空间

11:25.940 --> 11:27.940
那么我们都可以把它匹配到

11:27.940 --> 11:28.940
那么到时候我们通过这个

11:28.940 --> 11:29.940
一个命令

11:29.940 --> 11:30.940
就可以运行start

11:30.940 --> 11:31.940
服端启动

11:31.940 --> 11:32.940
对吧

11:32.940 --> 11:33.940
服端构建

11:33.940 --> 11:34.940
然后还有个客户端构建

11:34.940 --> 11:35.940
都把它运行出来

11:35.940 --> 11:36.940
client

11:36.940 --> 11:37.940
那么这个地方

11:37.940 --> 11:39.940
我们使用vipack config

11:39.940 --> 11:40.940
vipack

11:40.940 --> 11:42.940
client.GS

11:42.940 --> 11:43.940
好

11:43.940 --> 11:45.940
我们先把这个结构给大家处理一下

11:45.940 --> 11:47.940
接下来我们在client里面

11:47.940 --> 11:48.940
把复制一下

11:48.940 --> 11:50.940
复制一下

11:50.940 --> 11:53.940
我们稍微的控制一下

11:53.940 --> 11:54.940
那么这个时候

11:54.940 --> 11:55.940
我们可以开启source map

11:55.940 --> 11:58.940
可以开启source map

11:58.940 --> 12:00.940
那么这里边

12:00.940 --> 12:01.940
intr

12:01.940 --> 12:02.940
intr是哪儿呢

12:02.940 --> 12:04.940
是src下面的client

12:04.940 --> 12:05.940
直接的目录就行了

12:05.940 --> 12:06.940
因为它默认会读音

12:06.940 --> 12:08.940
这个时候的结构文件

12:08.940 --> 12:09.940
intr

12:09.940 --> 12:10.940
然后output

12:10.940 --> 12:11.940
我们稍微写一下

12:11.940 --> 12:13.940
output

12:13.940 --> 12:15.940
我们把它打爆到哪儿呢

12:15.940 --> 12:16.940
打不到就是

12:16.940 --> 12:19.940
我们这里用一个pys

12:19.940 --> 12:21.940
打爆到目录换一下

12:21.940 --> 12:23.940
不再是电视目录了

12:23.940 --> 12:25.940
我们这里边是浮起运行的GS

12:25.940 --> 12:26.940
浮起打爆的文件

12:26.940 --> 12:28.940
我们要把客户的文件打爆到这

12:28.940 --> 12:30.940
pysresult

12:30.940 --> 12:32.940
dln

12:32.940 --> 12:34.940
然后放到public下面的哪儿呢

12:34.940 --> 12:36.940
放到GS吧

12:36.940 --> 12:38.940
GS这个目录下面

12:38.940 --> 12:40.940
OK

12:40.940 --> 12:41.940
打爆到这

12:41.940 --> 12:43.940
或者是我们就放到public吧

12:43.940 --> 12:46.940
我们把这个file name再配置一下

12:46.940 --> 12:47.940
file name

12:47.940 --> 12:50.940
放到GS目录下面的哪个地方呢

12:50.940 --> 12:53.940
放到那个bundle.GS

12:53.940 --> 12:54.940
OK

12:54.940 --> 12:56.940
当然你学过微pig之后

12:56.940 --> 12:57.940
学过微pig

12:57.940 --> 12:58.940
那么你这里还可以进行分包啊

12:58.940 --> 12:59.940
那些乱七八糟的玩意

12:59.940 --> 13:01.940
你要怎么做你自己去做

13:01.940 --> 13:02.940
我们这里做简单一点

13:02.940 --> 13:03.940
那么这里呢

13:03.940 --> 13:04.940
我们就把它写好了

13:04.940 --> 13:05.940
watch to

13:05.940 --> 13:08.940
加上output这里去撂了

13:08.940 --> 13:09.940
Target成了就不要了

13:09.940 --> 13:10.940
就是浏览器

13:10.940 --> 13:12.940
现在就是浏览器运行的环境

13:12.940 --> 13:13.940
resolve加上

13:13.940 --> 13:14.940
extension加上

13:14.940 --> 13:16.940
extrnals这个东西不要了

13:16.940 --> 13:17.940
因为我们现在

13:17.940 --> 13:18.940
必须要包含loadmarch

13:18.940 --> 13:19.940
就是目录

13:19.940 --> 13:20.940
因为到时候客户端

13:20.940 --> 13:21.940
拿到这个GS的时候

13:21.940 --> 13:22.940
必须要是一个

13:22.940 --> 13:23.940
完整功能的GS

13:23.940 --> 13:24.940
因为客户端那边是没有

13:24.940 --> 13:25.940
loadmarch

13:25.940 --> 13:26.940
在浏览器环境里面

13:26.940 --> 13:27.940
是没有这个玩意的

13:27.940 --> 13:28.940
好

13:28.940 --> 13:29.940
其他的不变了

13:29.940 --> 13:30.940
其他不变了

13:30.940 --> 13:31.940
OK

13:31.940 --> 13:32.940
那么现在呢

13:32.940 --> 13:33.940
我们来试一下

13:33.940 --> 13:34.940
来试一下

13:34.940 --> 13:36.940
看行不行

13:36.940 --> 13:38.940
停止

13:38.940 --> 13:40.940
我们用运行npmrun

13:40.940 --> 13:41.940
什么呢

13:41.940 --> 13:42.940
我们单独来运行一下吧

13:42.940 --> 13:43.940
单独来运行一下

13:43.940 --> 13:46.940
就是dev build

13:46.940 --> 13:48.940
client

13:48.940 --> 13:49.940
单独来运行一下

13:49.940 --> 13:52.320
好

13:52.320 --> 13:53.320
打包完成了

13:53.320 --> 13:54.320
对吧

13:54.320 --> 13:55.320
打包完成你看

13:55.320 --> 13:56.320
是不是打不到这儿了

13:56.320 --> 13:57.320
打不到这个bundle.GS的

13:57.320 --> 13:58.320
对吧

13:58.320 --> 13:59.320
那么打不到之后

13:59.320 --> 14:00.320
我们服务器端

14:00.320 --> 14:02.320
你看现在有了GS的

14:02.320 --> 14:03.320
那么这个GS应该怎么访问

14:03.320 --> 14:04.320
如果说我们要

14:04.320 --> 14:05.320
访问这个GS的话

14:05.320 --> 14:07.320
比方说我们这里启动前

14:07.320 --> 14:12.620
dev启动前

14:12.620 --> 14:14.620
把所有的东西都运行起来

14:14.620 --> 14:15.620
好

14:15.620 --> 14:16.620
那么现在我们该怎么来

14:16.620 --> 14:17.620
访问这个GS呢

14:18.620 --> 14:20.620
你看客服端打包完成

14:20.620 --> 14:21.620
访问这个GS很简单

14:21.620 --> 14:22.620
我们只需要去这样访问

14:22.620 --> 14:24.620
localhost8080

14:24.620 --> 14:26.620
然后GS文件讲下面的

14:26.620 --> 14:28.620
bundle.GS

14:28.620 --> 14:29.620
你看是不是就访问到了

14:29.620 --> 14:30.620
就是我们客服端代码

14:30.620 --> 14:31.620
对吧

14:31.620 --> 14:32.620
你看这里面是包含了

14:32.620 --> 14:33.620
所有的react代码

14:33.620 --> 14:34.620
以及react多目代码

14:34.620 --> 14:35.620
以及我们自己的代码

14:35.620 --> 14:36.620
是吧

14:36.620 --> 14:37.620
那么这是不是一个

14:37.620 --> 14:38.620
完整功能的GS

14:38.620 --> 14:39.620
全部包含进来了

14:39.620 --> 14:40.620
好

14:40.620 --> 14:41.620
那么这个GS呢

14:41.620 --> 14:42.620
我们就需要

14:42.620 --> 14:43.620
我们看这个图

14:43.620 --> 14:45.620
我们第一步请求

14:45.620 --> 14:46.620
第二步

14:46.620 --> 14:47.620
旧旧端渲染完毕之后

14:47.620 --> 14:48.620
我们是不是在页面上

14:48.620 --> 14:49.620
包含一个script

14:49.620 --> 14:50.620
因为现在的浏览器

14:50.620 --> 14:51.620
还是同样的问题

14:51.620 --> 14:52.620
如果说我们访问

14:52.620 --> 14:53.620
这个浏览器首页

14:53.620 --> 14:54.620
刷新

14:54.620 --> 14:55.620
还是不行

14:55.620 --> 14:56.620
为什么不行呢

14:56.620 --> 14:57.620
你看一下网页圆

14:57.620 --> 14:58.620
还是这个东西

14:58.620 --> 14:59.620
它没有GS文件的引用

14:59.620 --> 15:00.620
对吧

15:00.620 --> 15:01.620
所以说服务器

15:01.620 --> 15:02.620
给它响应的页面的时候

15:02.620 --> 15:03.620
就把这个script

15:03.620 --> 15:04.620
元素给加上

15:04.620 --> 15:05.620
好

15:05.620 --> 15:06.620
那么我们在服务端

15:06.620 --> 15:07.620
在响应的时候

15:07.620 --> 15:08.620
在这

15:08.620 --> 15:09.620
我们就把元素加上

15:09.620 --> 15:10.620
在这里加

15:11.620 --> 15:12.620
那么引用哪呢

15:12.620 --> 15:15.620
引用GS下面的

15:15.620 --> 15:17.620
GS下面的那个就是

15:17.620 --> 15:19.620
邦斗

15:19.620 --> 15:20.620
叫GS

15:20.620 --> 15:21.620
保存

15:21.620 --> 15:22.620
好

15:22.620 --> 15:23.620
这里我们再看一下

15:23.620 --> 15:25.620
这里刷新

15:25.620 --> 15:26.620
看元旦吧

15:26.620 --> 15:27.620
你看现在是不是

15:27.620 --> 15:28.620
引用了个邦斗的GS

15:28.620 --> 15:29.620
那么以访问这个

15:29.620 --> 15:30.620
是不是就访问到了

15:30.620 --> 15:31.620
我们刚才的GS了

15:31.620 --> 15:32.620
对吧

15:32.620 --> 15:33.620
访问服务器

15:33.620 --> 15:34.620
这个东西又会交给服务器

15:34.620 --> 15:35.620
你看

15:35.620 --> 15:36.620
那么浏览器

15:36.620 --> 15:38.620
就像现在按钮出来了

15:38.620 --> 15:40.620
然后由于它有这个script元素

15:40.620 --> 15:41.620
因此浏览器

15:41.620 --> 15:42.620
又会去请求服务器

15:42.620 --> 15:43.620
找这个GS

15:43.620 --> 15:44.620
服务器一看

15:44.620 --> 15:45.620
你请求的是这个地址

15:45.620 --> 15:47.620
你请求了GS

15:50.620 --> 15:52.620
你请求的GS是这个地址

15:52.620 --> 15:54.620
那么服务器一看

15:54.620 --> 15:55.620
服务器我们之前写过的

15:55.620 --> 15:56.620
对吧

15:56.620 --> 15:57.620
一看

15:57.620 --> 15:58.620
那么它在public目录下面

15:58.620 --> 15:59.620
已经找到了这个GS了

15:59.620 --> 16:01.620
那么它就会把这个GS内容给力

16:01.620 --> 16:02.620
给力

16:02.620 --> 16:03.620
那么给我之后

16:03.620 --> 16:04.620
你看这里

16:04.620 --> 16:06.620
浏览器是不是可以执行GS的

16:06.620 --> 16:08.620
执行GS

16:08.620 --> 16:09.620
运行这个GS

16:09.620 --> 16:10.620
那么就会

16:10.620 --> 16:12.620
相当于是用regs

16:12.620 --> 16:13.620
在渲染一面

16:13.620 --> 16:15.620
就是科普端又在渲染一面

16:15.620 --> 16:17.620
就形成了这么一种模式

16:17.620 --> 16:18.620
好吧

16:18.620 --> 16:19.620
那么现在

16:20.620 --> 16:21.620
写到这儿

16:21.620 --> 16:23.620
有一个小的问题

16:23.620 --> 16:24.620
我们点击一下

16:24.620 --> 16:25.620
其实已经可以运行了

16:25.620 --> 16:26.620
因为科普端

16:26.620 --> 16:27.620
现在已经可以运行GS代码

16:27.620 --> 16:28.620
那么目前

16:28.620 --> 16:30.620
跟服务器就没有什么关系了

16:30.620 --> 16:31.620
那么这里边有一个小的问题

16:31.620 --> 16:32.620
什么问题呢

16:32.620 --> 16:33.620
就是

16:33.620 --> 16:34.620
它觉得科普端的渲染

16:34.620 --> 16:36.620
跟服务器是不一致的

16:36.620 --> 16:38.620
那怎么就不一致呢

16:38.620 --> 16:39.620
不挺好的吗

16:39.620 --> 16:40.620
为什么就不一致呢

16:40.620 --> 16:41.620
是这样子

16:41.620 --> 16:42.620
这个小的问题

16:42.620 --> 16:44.620
你服务端现在渲染的时候

16:44.620 --> 16:45.620
它是多了这么一个东西

16:45.620 --> 16:47.620
它这里有个换行

16:47.620 --> 16:49.620
而科普端渲染的时候

16:49.620 --> 16:50.620
因为这个DIV里面

16:50.620 --> 16:52.620
它是完全给你接管了这个DIV

16:52.620 --> 16:53.620
它是没有换行的

16:53.620 --> 16:55.620
所以它就认为这个地方不一致

16:55.620 --> 16:57.620
所以说你要把这个换行去掉就行了

16:57.620 --> 16:58.620
那么现在呢

16:58.620 --> 16:59.620
我们保存一下

16:59.620 --> 17:00.620
保存一下

17:00.620 --> 17:01.620
然后这里刷新

17:01.620 --> 17:02.620
你看是不是就没有了

17:02.620 --> 17:03.620
那么现在呢

17:03.620 --> 17:04.620
科普端就接管了这个东西了

17:04.620 --> 17:05.620
对吧

17:06.620 --> 17:07.620
好那么接下来

17:07.620 --> 17:09.620
我再来讲一讲这个

17:09.620 --> 17:10.620
这个东西

17:11.620 --> 17:13.620
为什么要用Head Rate

17:13.620 --> 17:14.620
用Render行不行呢

17:14.620 --> 17:15.620
我们保存一下

17:15.620 --> 17:17.620
用Render行不行呢

17:17.620 --> 17:19.620
好我既然来刷新一下

17:19.620 --> 17:20.620
好这里呢

17:20.620 --> 17:22.620
完全是没问题的

17:22.620 --> 17:23.620
完全是没问题的

17:23.620 --> 17:24.620
但是它给你报了一个警告

17:24.620 --> 17:26.620
它建议你不要用Render

17:26.620 --> 17:27.620
为什么呢

17:27.620 --> 17:29.620
它是这样子

17:29.620 --> 17:32.620
如果你说你用Render的话

17:32.620 --> 17:33.620
那么还比较暴力

17:33.620 --> 17:35.620
因为Render我们知道

17:35.620 --> 17:36.620
它会在科普端运行对吧

17:36.620 --> 17:38.620
这个代码会在科普端运行

17:38.620 --> 17:39.620
那么这个代码运行的时候

17:39.620 --> 17:40.620
是不是要渲染一遍

17:40.620 --> 17:41.620
把渲染到

17:41.620 --> 17:43.620
是不是渲染到这个DIV里面去

17:43.620 --> 17:45.620
就渲染到这个DIV对吧

17:45.620 --> 17:46.620
把它渲染一遍

17:46.620 --> 17:47.620
但是呢

17:47.620 --> 17:48.620
由于这个东西服务器

17:48.620 --> 17:50.620
是不是已经渲染给我们了

17:50.620 --> 17:51.620
我们科普端还第一次

17:51.620 --> 17:53.620
还有必要再渲染一遍吗

17:53.620 --> 17:54.620
是没有必要了

17:54.620 --> 17:55.620
科普端只需要

17:55.620 --> 17:57.620
把这些事件给它加上流行了

17:57.620 --> 17:58.620
对吧

17:58.620 --> 17:59.620
因为服务器没法加事件

17:59.620 --> 18:00.620
那么这个时候

18:00.620 --> 18:01.620
事件需要在浏览器环境里边加

18:01.620 --> 18:02.620
因此呢

18:02.620 --> 18:03.620
科普端只需要

18:03.620 --> 18:04.620
把事件那些东西给它加上流行了

18:04.620 --> 18:07.620
所以它没有必要再去运行一遍了

18:07.620 --> 18:09.620
没有必要再去渲染一遍了

18:09.620 --> 18:10.620
就是把这个渲染成真实的动物

18:10.620 --> 18:12.620
没有必要再去渲染一遍了

18:12.620 --> 18:13.620
因此呢

18:13.620 --> 18:14.620
利用Windows的话

18:14.620 --> 18:15.620
是得不尝失的

18:15.620 --> 18:16.620
因为服务器已经给你渲染了

18:16.620 --> 18:17.620
你科普端再去渲染一遍

18:17.620 --> 18:18.620
就是没有必要的

18:18.620 --> 18:19.620
因此呢

18:19.620 --> 18:20.620
这里呢

18:20.620 --> 18:22.620
它建议你用这个Head Rate

18:22.620 --> 18:23.620
Head Rate

18:23.620 --> 18:24.620
Head Rate是这个东西

18:24.620 --> 18:25.620
它就不会渲染

18:25.620 --> 18:26.620
它就不会再重新渲染

18:26.620 --> 18:28.620
它只是把事件给它加上

18:28.620 --> 18:30.620
然后接管它的后续流程

18:30.620 --> 18:32.620
它要不要渲染徐力动物

18:32.620 --> 18:33.620
徐力动物是要生存的

18:33.620 --> 18:34.620
生存徐力动物是必须要要的

18:34.620 --> 18:35.620
因为它后面要对比

18:35.620 --> 18:36.620
对吧

18:36.620 --> 18:37.620
要编动要对比

18:37.620 --> 18:39.620
但是它不会再渲染成真实的动物元素

18:39.620 --> 18:40.620
没有意思吧

18:40.620 --> 18:42.620
因此我们看一下

18:42.620 --> 18:43.620
看一下这个流程

18:43.620 --> 18:46.620
当我们在浏览器运行这个介石的时候

18:46.620 --> 18:47.620
它会做

18:47.620 --> 18:48.620
如果说我们用Head Rate

18:48.620 --> 18:51.620
它仅仅是生存徐力动物

18:51.620 --> 18:52.620
然后不会渲染成真实的动物

18:52.620 --> 18:54.620
因为真实动物已经有了

18:54.620 --> 18:55.620
那么它只是

18:55.620 --> 18:56.620
做这么一件事

18:56.620 --> 18:58.620
第一个就是注水

18:58.620 --> 19:00.620
以及接管后续的处理

19:00.620 --> 19:01.620
什么叫注水呢

19:01.620 --> 19:03.620
注水有的又叫做保湿

19:03.620 --> 19:05.620
这个Head Rate就表示吸水的意思

19:05.620 --> 19:07.620
也叫做保湿

19:07.620 --> 19:10.620
这个挺有意思的

19:10.620 --> 19:11.620
什么意思呢

19:11.620 --> 19:12.620
就说这个安柳

19:12.620 --> 19:14.620
这是安柳是浮浮器生存的

19:14.620 --> 19:16.620
浮浮器生存的安柳是干憋憋的

19:16.620 --> 19:18.620
它只有一个元素

19:18.620 --> 19:19.620
它其他啥都没有

19:19.620 --> 19:21.620
那么这个客户乱的介石

19:21.620 --> 19:23.620
要向它注入一些事件

19:23.620 --> 19:25.620
让它功能变得丰富起来

19:25.620 --> 19:27.620
我们把它形象的称之为注水

19:27.620 --> 19:28.620
就是向浮

19:28.620 --> 19:30.620
给浮浮器生存的元素里边

19:30.620 --> 19:32.620
去注入一些功能性的东西

19:32.620 --> 19:33.620
我们把它叫做注水

19:33.620 --> 19:34.620
也叫做保湿

19:34.620 --> 19:35.620
就这么个意思

19:35.620 --> 19:37.620
那么注水之后

19:37.620 --> 19:38.620
它自然而然

19:38.620 --> 19:39.620
剩下的这些操作

19:39.620 --> 19:41.620
就全部由浏浪器来完成了

19:41.620 --> 19:43.620
后面跟浮浮器没有什么关系了

19:43.620 --> 19:44.620
除非你刷新页面浮浮器

19:44.620 --> 19:45.620
再给它一次

19:45.620 --> 19:46.620
是这么个意思

19:46.620 --> 19:48.620
所以说我们这里一定要用Head Rate

19:48.620 --> 19:49.620
Head Rate

19:49.620 --> 19:51.620
那么单码我们写到这呢

19:51.620 --> 19:53.620
其实就已经差不多了

19:53.620 --> 19:54.620
已经差不多了

19:54.620 --> 19:55.620
我们把原理梳理一遍

19:55.620 --> 19:57.620
再来看一遍

19:57.620 --> 20:00.620
请求浮浮器给我一个完整的页面

20:00.620 --> 20:01.620
给我一个完整的页面

20:01.620 --> 20:03.620
但是页面里面包含了一个JS

20:03.620 --> 20:04.620
这个JS

20:04.620 --> 20:05.620
我们就会去请求这个JS

20:05.620 --> 20:07.620
这个JS是由客户端打包出来的

20:07.620 --> 20:09.620
打包出来之后浮浮器给我们JS

20:09.620 --> 20:11.620
给我们JS浏浪器也运行这个JS

20:11.620 --> 20:12.620
是浏浪器在运行

20:12.620 --> 20:15.620
那么它形成了一模一样的组件

20:15.620 --> 20:16.620
结构

20:16.620 --> 20:18.620
然后它不会再重新宣展成真实的动物

20:18.620 --> 20:19.620
因为已经有了

20:19.620 --> 20:21.620
那么客户端怎么知道它有了

20:21.620 --> 20:23.620
因为它根据这个来判断的

20:23.620 --> 20:24.620
你看浮浮器跟我们宣展的

20:24.620 --> 20:26.620
DIV里面有个Data Reactive Root

20:26.620 --> 20:29.620
表示浮浮器宣展的根组件

20:29.620 --> 20:31.620
那么当我们客户端宣展的时候

20:31.620 --> 20:32.620
它也有一个根组件

20:32.620 --> 20:33.620
根组件就是这个玩意儿

20:33.620 --> 20:34.620
那么一对比

20:34.620 --> 20:35.620
哦 就是这个玩意儿

20:35.620 --> 20:37.620
那么两个人是一样的

20:37.620 --> 20:38.620
那一看

20:38.620 --> 20:39.620
那行了

20:39.620 --> 20:40.620
浮浮器已经给我们了

20:40.620 --> 20:42.620
那我就不用再重新宣展了

20:42.620 --> 20:43.620
是这么个意思

20:43.620 --> 20:45.620
那么后边就交给客户端

20:45.620 --> 20:47.620
来进行后续的实行的接管

20:47.620 --> 20:49.620
通过注水的模式

20:49.620 --> 20:51.620
那么接下来我们就是

20:51.620 --> 20:53.620
优化一下这个代码就行了

20:53.620 --> 20:54.620
怎么来优化呢

20:54.620 --> 20:55.620
我们来看一下

20:55.620 --> 20:57.620
首先是这一部分

20:57.620 --> 20:58.620
这两个配置文件

20:58.620 --> 21:00.620
你会发现有很多地方都是相同的

21:00.620 --> 21:02.620
那么我们没有必要

21:02.620 --> 21:05.620
就是没有必要就是把它

21:05.620 --> 21:07.620
全部重新写一遍

21:07.620 --> 21:09.620
我们可以去新建一个文件

21:09.620 --> 21:12.620
叫做Webpack Best.js

21:12.620 --> 21:14.620
就是基本的配置

21:14.620 --> 21:15.620
复制一下吧

21:15.620 --> 21:17.620
我们把相同的配置写到这里边

21:17.620 --> 21:18.620
相同的配置有哪些呢

21:18.620 --> 21:20.620
比方说Mode Development

21:20.620 --> 21:21.620
对吧

21:21.620 --> 21:24.620
还有这个Dev2好像不相同

21:24.620 --> 21:26.620
有差异的我们把它去掉

21:26.620 --> 21:28.620
N去

21:28.620 --> 21:30.620
入口入口也不一样

21:30.620 --> 21:32.620
output也不一样

21:32.620 --> 21:34.620
那么watch是一样的

21:34.620 --> 21:35.620
resolve是一样的

21:35.620 --> 21:36.620
marge是一样的

21:36.620 --> 21:37.620
这些东西都是一样的

21:37.620 --> 21:38.620
没问题吧

21:38.620 --> 21:39.620
我们把bass写好

21:39.620 --> 21:40.620
那么client这边

21:40.620 --> 21:42.620
我们只需要去合并就行了

21:42.620 --> 21:43.620
那么合并这一块

21:43.620 --> 21:44.620
我们有一个库

21:44.620 --> 21:46.620
有一个库叫做

21:46.620 --> 21:48.620
叫做

21:48.620 --> 21:51.620
好像叫Webpack Merge

21:51.620 --> 21:52.620
我收一下

21:52.620 --> 21:56.080
忘了

21:56.080 --> 21:58.080
Webpack Merge

21:58.080 --> 21:59.080
这个库

21:59.080 --> 22:01.080
对 就是这个库

22:01.080 --> 22:03.080
那么它主要是来合并配置文件的

22:03.080 --> 22:05.080
其实我们如果说用那个

22:05.080 --> 22:07.080
用那个就是对象混合的话

22:07.080 --> 22:08.080
也可以

22:08.080 --> 22:09.080
对象混合的比较简单一点

22:09.080 --> 22:11.080
它可以进行深层次的合并

22:11.080 --> 22:12.080
有兴趣的东西

22:12.080 --> 22:13.080
可以看一下文章

22:13.080 --> 22:14.080
它功能还是蛮丰富的

22:14.080 --> 22:15.080
而且它还可以自定义

22:15.080 --> 22:17.080
那么这里我们安装一下

22:17.080 --> 22:19.080
Webpack Merge

22:19.080 --> 22:21.080
那么有了这个东西的过后

22:21.080 --> 22:22.080
我们在用的时候

22:22.080 --> 22:24.080
client这里我们就可以

22:24.080 --> 22:26.080
先导入基本配置

22:26.080 --> 22:28.080
Base Config

22:28.080 --> 22:30.080
Require

22:30.080 --> 22:31.080
Base

22:31.080 --> 22:32.080
Webpack Base

22:32.080 --> 22:34.080
然后再来一个

22:34.080 --> 22:37.080
Client Config

22:37.080 --> 22:38.080
有两个对象

22:38.080 --> 22:40.080
这是一个基础的配置对象

22:40.080 --> 22:41.080
那么这又是个对象

22:41.080 --> 22:44.080
我们把它复制一下

22:44.080 --> 22:46.080
那么把这个枪桶的部分删掉

22:46.080 --> 22:47.080
删掉

22:47.080 --> 22:48.080
那么Extension是删掉

22:48.080 --> 22:49.080
Watch to删掉

22:49.080 --> 22:51.080
加上一个Entry和Output就行了

22:51.080 --> 22:52.080
Dev2保留

22:52.080 --> 22:53.080
Model删掉

22:53.080 --> 22:54.080
那么我们只需要

22:54.080 --> 22:55.080
把这两个对象混合就行了

22:55.080 --> 22:56.080
那么怎么来混合呢

22:56.080 --> 22:57.080
我们就可以利用

22:57.080 --> 23:00.080
那个就是

23:00.080 --> 23:02.080
Merge

23:02.080 --> 23:03.080
导入进来

23:03.080 --> 23:05.080
Merge

23:05.080 --> 23:07.080
Require

23:07.080 --> 23:09.080
Webpack Merge

23:09.080 --> 23:11.080
那么这里边我导出的时候

23:11.080 --> 23:13.080
我就用这种方式来导出

23:13.080 --> 23:14.080
Merge

23:14.080 --> 23:16.080
把这个Base Config

23:16.080 --> 23:17.080
传进来

23:17.080 --> 23:18.080
Base Config

23:18.080 --> 23:19.080
然后Client Config

23:19.080 --> 23:20.080
传进来

23:20.080 --> 23:22.080
然后用它来覆盖它

23:22.080 --> 23:23.080
如果说有相同的话

23:23.080 --> 23:24.080
就进行覆盖

23:24.080 --> 23:25.080
那么它后边

23:25.080 --> 23:26.080
可以传很多的参数

23:26.080 --> 23:27.080
就是后边覆盖前面的

23:27.080 --> 23:28.080
就这么简单

23:28.080 --> 23:29.080
那么同样的道理

23:29.080 --> 23:31.080
我们在服务器端

23:31.080 --> 23:32.080
也可以这样子写

23:32.080 --> 23:33.080
也可以这样子写

23:33.080 --> 23:34.080
然后服务器端

23:34.080 --> 23:35.080
我们稍微改一下

23:35.080 --> 23:36.080
Dev2

23:36.080 --> 23:38.650
我们把设为浪

23:38.650 --> 23:39.650
Entry

23:39.650 --> 23:40.650
把它改一下

23:40.650 --> 23:41.650
Entry是这个

23:41.650 --> 23:46.430
Output File Name

23:46.430 --> 23:47.430
File Name的话

23:47.430 --> 23:50.430
是server.js

23:50.430 --> 23:51.430
那么这里

23:51.430 --> 23:53.430
server.js

23:53.430 --> 23:55.430
那么这个就是第十步路

23:55.430 --> 23:57.430
OK

23:57.430 --> 23:59.430
那这里我们设置一下

23:59.430 --> 24:01.430
Base Config

24:01.430 --> 24:03.430
那么这是server.config

24:03.430 --> 24:08.280
那么下面的Export就删掉了

24:08.280 --> 24:10.280
这样子我们就把

24:10.280 --> 24:12.280
配置文件稍微优化了一点

24:12.280 --> 24:13.280
设置好了之后

24:13.280 --> 24:14.280
我们再重新运行

24:14.280 --> 24:15.280
看行不行

24:15.280 --> 24:18.280
NPMZoneDev

24:18.280 --> 24:20.280
运行

24:20.280 --> 24:21.280
这里出来了

24:21.280 --> 24:23.280
我们这里刷新一次

24:23.280 --> 24:24.280
刷新

24:24.280 --> 24:25.280
点击

24:25.280 --> 24:26.280
没问题

24:26.280 --> 24:27.280
对吧没问题

24:27.280 --> 24:29.280
那么现在把配置文件优化了一下

24:29.280 --> 24:31.280
然后接下来我们再来做一些优化

24:31.280 --> 24:33.280
因为我们客户端这一块

24:33.280 --> 24:34.280
可能会有这么一个需求

24:34.280 --> 24:35.280
因为怕浏览器缓存

24:35.280 --> 24:37.280
服务器那边不存在缓存

24:37.280 --> 24:38.280
就是固定的文件运行了

24:38.280 --> 24:40.280
客户端这边可能会怕缓存

24:40.280 --> 24:42.280
因此我们很有可能会加上这么一个东西

24:42.280 --> 24:43.280
哈希

24:43.280 --> 24:45.280
可能会加上一些哈希纸

24:45.280 --> 24:47.280
而且以后我们可能要做分包

24:47.280 --> 24:50.280
分包的话会导入更多的解释文件

24:50.280 --> 24:51.280
是这个意思吧

24:51.280 --> 24:53.280
因此我们这里需要进行处理

24:53.280 --> 24:55.280
怎么处理呢

24:55.280 --> 24:57.280
就是现在的一个问题就是

24:57.280 --> 25:00.280
我们客户端这边打包出来的文件运行是不一定的

25:00.280 --> 25:02.280
哈哈哈

25:02.280 --> 25:03.280
来吧

25:03.280 --> 25:04.280
运行

25:04.280 --> 25:06.280
你看现在就要出问题了

25:06.280 --> 25:07.280
啊

25:07.280 --> 25:08.280
诶

25:08.280 --> 25:09.280
怎么了

25:09.280 --> 25:10.280
要什么来源

25:10.280 --> 25:12.280
等一下来啊

25:12.280 --> 25:14.280
Cannot found a module

25:14.280 --> 25:15.280
fs

25:15.280 --> 25:18.810
诶

25:18.810 --> 25:19.810
什么意思

25:19.810 --> 25:22.810
他为什么找不到一个 module呢

25:22.810 --> 25:23.810
等一下啊

25:23.810 --> 25:25.810
我这里写的是 client

25:25.810 --> 25:27.810
啊 client 这一块

25:27.810 --> 25:28.810
没问题的

25:28.810 --> 25:30.810
没问题啊

25:30.810 --> 25:32.810
好再来

25:32.810 --> 25:33.810
再打包一次

25:33.810 --> 25:37.980
诶

25:37.980 --> 25:38.980
这里出问题了

25:38.980 --> 25:40.980
他说 server 诶

25:40.980 --> 25:41.980
上面啊

25:41.980 --> 25:43.980
找一找问题在哪儿

25:43.980 --> 25:45.980
他说 server 叫 gs

25:45.980 --> 25:47.980
里面出现了一个

25:47.980 --> 25:48.980
一个错误啊

25:48.980 --> 25:49.980
找不到 module

25:49.980 --> 25:50.980
fs

25:50.980 --> 25:55.570
怎么可能找不到fs呢

25:55.570 --> 25:56.570
我们看一下啊

25:56.570 --> 25:57.570
fs

25:57.570 --> 25:58.570
诶

25:58.570 --> 26:04.890
没有没有没有找fs啊

26:04.890 --> 26:08.260
我看一下

26:09.260 --> 26:10.260
哦这里

26:10.260 --> 26:11.260
Cannot found a module

26:11.260 --> 26:12.260
fs

26:12.260 --> 26:16.860
哦对对对

26:16.860 --> 26:17.860
我忘了啊

26:17.860 --> 26:18.860
服务器端这里还有一个配置

26:18.860 --> 26:19.860
叫 target

26:19.860 --> 26:21.860
啊 target 是配置 load

26:21.860 --> 26:22.860
啊 load 环境

26:22.860 --> 26:23.860
不然的话还没有打包 module

26:23.860 --> 26:24.860
fs

26:24.860 --> 26:26.860
他 module fs 打包不了

26:26.860 --> 26:27.860
好

26:27.860 --> 26:32.510
然后再运行

26:32.510 --> 26:34.510
诶这里还有错误

26:34.510 --> 26:35.510
还有错误

26:35.510 --> 26:39.490
应该是没问题了吧

26:39.490 --> 26:41.490
我再来重新来一次

26:41.490 --> 26:44.570
应该是没问题了啊

26:44.570 --> 26:46.570
因为我一把设置能 load

26:46.570 --> 26:47.570
load 环境了

26:48.570 --> 26:50.570
OK应该是没问题的啊

26:50.570 --> 26:52.570
好那么现在打包出来啊刷新

26:52.570 --> 26:54.570
没问题的啊没问题的

26:54.570 --> 26:56.570
好那么现在呢我们有一个问题

26:56.570 --> 26:58.570
就是在这边啊在这边

26:58.570 --> 27:00.570
我们那个文件呢他生成出来了

27:00.570 --> 27:01.570
他是不一定的对吧

27:01.570 --> 27:02.570
我们甚至还可以安装这个

27:02.570 --> 27:03.570
我们把它做完善一点啊

27:03.570 --> 27:05.570
尽量做完善一点

27:05.570 --> 27:06.570
还可以安装一个 clean

27:06.570 --> 27:07.570
webpack

27:07.570 --> 27:08.570
plugging

27:08.570 --> 27:09.570
对吧

27:09.570 --> 27:10.570
我们还可以安装这么一个插件啊

27:10.570 --> 27:11.570
npm i

27:11.570 --> 27:12.570
很刚的 clean

27:12.570 --> 27:14.570
webpack

27:14.570 --> 27:15.570
plugging

27:15.570 --> 27:16.570
好那么这里边

27:16.570 --> 27:18.570
我们可以在客户端这边

27:18.570 --> 27:20.570
client 这边去倒入

27:20.570 --> 27:24.200
clean

27:24.200 --> 27:26.200
webpack

27:26.200 --> 27:27.200
plugging

27:27.200 --> 27:28.200
require

27:29.200 --> 27:32.540
clean

27:32.540 --> 27:33.540
webpack

27:33.540 --> 27:34.540
plugging

27:35.540 --> 27:36.540
好那么这里呢

27:36.540 --> 27:38.540
我们把它设置到插件里边

27:38.540 --> 27:39.540
plugging

27:41.540 --> 27:43.540
new一个clean

27:43.540 --> 27:44.540
plugging

27:44.540 --> 27:46.540
把这个地方清空一下

27:46.540 --> 27:47.540
清空一下

27:47.540 --> 27:49.540
但是呢我不希望他清空这个

27:49.540 --> 27:50.540
我不希望他清空这个

27:50.540 --> 27:52.540
那么我们这里来配置一下

27:52.540 --> 27:53.540
配置一下

27:53.540 --> 27:54.540
有一个配置叫做什么呢

27:54.540 --> 27:55.540
在clean

27:55.540 --> 27:56.540
webpack

27:56.540 --> 27:57.540
plugging里边

27:57.540 --> 27:58.540
有点忘了

27:58.540 --> 27:59.540
就是他可以

27:59.540 --> 28:00.540
可以驱除掉某一些

28:00.540 --> 28:01.540
某一些文件啊

28:01.540 --> 28:02.540
某些文件不要

28:02.540 --> 28:03.540
不要删除

28:03.540 --> 28:04.540
像这个文件就不要删除了

28:04.540 --> 28:05.540
我要看一下啊

28:05.540 --> 28:06.540
clean

28:06.540 --> 28:07.540
webpack

28:07.540 --> 28:08.540
plugging

28:08.540 --> 28:09.540
clean

28:09.540 --> 28:10.540
webpack

28:10.540 --> 28:11.540
plugging

28:12.540 --> 28:13.540
他清空的时候

28:13.540 --> 28:14.540
不然他会把整个目录给我清空

28:14.540 --> 28:15.540
全部清空

28:15.540 --> 28:16.540
所以说我们要

28:16.540 --> 28:17.540
移除掉一个

28:17.540 --> 28:18.540
移除掉一个

28:18.540 --> 28:19.540
ok 那么就用

28:19.540 --> 28:20.540
就这个

28:20.540 --> 28:21.540
就这个

28:23.540 --> 28:24.540
清空所有文件

28:24.540 --> 28:25.540
但是呢要排除掉

28:25.540 --> 28:26.540
什么文件啊

28:26.540 --> 28:27.540
排除掉这个文件

28:27.540 --> 28:29.540
排除掉5

28:29.540 --> 28:30.540
icon

28:30.540 --> 28:31.540
排除掉这个文件

28:31.540 --> 28:32.540
不然的话整个

28:32.540 --> 28:33.540
整个给我清空了

28:33.540 --> 28:34.540
好 那么现在呢

28:34.540 --> 28:35.540
我们配置好了之后呢

28:35.540 --> 28:36.540
我们再来

28:36.540 --> 28:41.900
运行

28:41.900 --> 28:42.900
好 服务端

28:42.900 --> 28:44.900
诶 这里又爆出了

28:45.900 --> 28:46.900
然后什么呢

28:46.900 --> 28:47.900
clean webpack

28:47.900 --> 28:48.900
plugging

28:48.900 --> 28:50.900
这个东西要这样子引入

28:50.900 --> 28:51.900
ok 再来

28:51.900 --> 28:55.420
运行

28:55.420 --> 28:59.080
没问题

28:59.080 --> 29:01.080
这里都没问题

29:01.080 --> 29:02.080
没问题

29:02.080 --> 29:03.080
你看

29:03.080 --> 29:04.080
所以把其他的删除了

29:04.080 --> 29:05.080
只留下GS了

29:05.080 --> 29:06.080
好 那么我们把GS变成

29:06.080 --> 29:07.080
这种模式过后呢

29:07.080 --> 29:09.080
又出现一个新的问题了

29:09.080 --> 29:10.080
服务端怎么办呢

29:10.080 --> 29:12.080
服务端他引用的GS是啥呢

29:12.080 --> 29:13.080
服务端这里

29:13.080 --> 29:15.080
就是在Render的时候

29:15.080 --> 29:16.080
那么这里是要引用GS

29:16.080 --> 29:18.080
这个GS文件名是啥呢

29:18.080 --> 29:19.080
你怎么知道他的文件名是啥

29:19.080 --> 29:21.080
每次大爆出来可能都不一样

29:21.080 --> 29:22.080
对吧

29:22.080 --> 29:23.080
那么也就说

29:23.080 --> 29:24.080
这个文件名是不要

29:24.080 --> 29:25.080
这个GS这个元素

29:25.080 --> 29:26.080
叫动态生成

29:26.080 --> 29:28.080
动态生成这些GS元素

29:28.080 --> 29:30.080
好 那这个东西怎么办呢

29:30.080 --> 29:31.080
这个东西呢

29:31.080 --> 29:32.080
我们可以单独来写个模块

29:32.080 --> 29:33.080
给它叫做

29:33.080 --> 29:35.080
就是 import

29:35.080 --> 29:37.080
就是 get script

29:37.080 --> 29:39.080
叫GS

29:39.080 --> 29:40.080
那么这个模块呢

29:40.080 --> 29:41.080
会可以导出一个函数

29:41.080 --> 29:42.080
这个函数运行之后呢

29:42.080 --> 29:44.080
就可以动态的来过去

29:44.080 --> 29:46.080
这个目录下面的

29:46.080 --> 29:47.080
所谓的GS文件

29:47.080 --> 29:49.080
好 那么这个GS怎么写呢

29:49.080 --> 29:50.080
这个GS其实很好写

29:50.080 --> 29:51.080
注意啊

29:51.080 --> 29:52.080
这是运行带服务端的

29:52.080 --> 29:54.080
因为服务端在发送期

29:54.080 --> 29:56.080
就是想印这个结果的时候呢

29:56.080 --> 29:57.080
它要动态的

29:57.080 --> 29:58.080
给它这个GS文件的内容

29:58.080 --> 29:59.080
对吧

29:59.080 --> 30:00.080
要动态的给它

30:00.080 --> 30:01.080
那么这里呢

30:01.080 --> 30:02.080
我们要去找

30:02.080 --> 30:03.080
那么目标就是

30:03.080 --> 30:04.080
找一下这个文件夹里边

30:04.080 --> 30:06.080
有哪些GS文件

30:06.080 --> 30:07.080
有哪些GS文件

30:07.080 --> 30:08.080
找到了之后呢

30:08.080 --> 30:10.080
我们就把这个GS文件的路径呢

30:10.080 --> 30:11.080
就生成了路径

30:11.080 --> 30:12.080
生成一个路径

30:12.080 --> 30:13.080
然后生成一个script元素

30:13.080 --> 30:14.080
返回就行了

30:14.080 --> 30:15.080
好 那么这里呢

30:15.080 --> 30:16.080
我们就简单写一下

30:16.080 --> 30:17.080
我们首先呢

30:17.080 --> 30:20.080
可以利用fs模块

30:20.080 --> 30:22.080
当然我们也可以用 import

30:22.080 --> 30:23.080
来导入

30:23.080 --> 30:25.080
因为现在都会被微拍打包

30:25.080 --> 30:26.080
from

30:26.080 --> 30:27.080
vfs

30:27.080 --> 30:29.080
好 那么这个模块里边呢

30:29.080 --> 30:30.080
有一个这么一个函数

30:30.080 --> 30:32.080
叫read

30:32.080 --> 30:33.080
dir think

30:33.080 --> 30:36.080
同步的读取某一个文件夹里边的内容

30:36.080 --> 30:37.080
对吧

30:37.080 --> 30:38.080
那么读了哪个文件夹呢

30:38.080 --> 30:40.080
public目标下面的

30:40.080 --> 30:42.080
GS这个目标下面的东西

30:42.080 --> 30:43.080
好 咱们来看一下

30:43.080 --> 30:44.080
返回一个结果

30:44.080 --> 30:45.080
result

30:45.080 --> 30:46.080
咱们来输出一下

30:46.080 --> 30:47.080
result

30:47.080 --> 30:51.580
好 我们在代码里边

30:51.580 --> 30:52.580
load

30:52.580 --> 30:53.580
直接运行

30:53.580 --> 30:56.580
load src目录下边的

30:56.580 --> 30:58.580
server目录下边的

30:58.580 --> 31:00.580
get script

31:00.580 --> 31:02.580
好 运行一下

31:02.580 --> 31:04.580
我现在不能用这种方式来运行

31:04.580 --> 31:05.580
因为这里没有打包

31:05.580 --> 31:06.580
没有打包

31:06.580 --> 31:07.580
require嘛

31:07.580 --> 31:08.580
我们先用require

31:08.580 --> 31:09.580
以后让它打包之后呢

31:09.580 --> 31:10.580
在

31:10.580 --> 31:12.580
因为我们现在是直接运行的

31:12.580 --> 31:14.580
Face

31:14.580 --> 31:16.580
好 运行一下

31:16.580 --> 31:17.580
那你看

31:17.580 --> 31:18.580
是不是得到这两个文件了

31:18.580 --> 31:19.580
得到一个数组

31:19.580 --> 31:20.580
对吧

31:20.580 --> 31:21.580
是不是这两个文件

31:21.580 --> 31:22.580
好 那么这里呢

31:22.580 --> 31:23.580
map这个文件我们不需要

31:23.580 --> 31:24.580
对吧

31:24.580 --> 31:25.580
因此我们用

31:25.580 --> 31:26.580
这里得到结果之后呢

31:26.580 --> 31:28.580
我们来map一下

31:28.580 --> 31:29.580
map一下

31:29.580 --> 31:32.580
把那个文件

31:32.580 --> 31:33.580
值保留什么呢

31:33.580 --> 31:36.580
值保留这个文件名

31:36.580 --> 31:38.580
nzwis

31:38.580 --> 31:39.580
del.js

31:39.580 --> 31:41.580
就是以del.js结尾的文件

31:41.580 --> 31:42.580
我们才保留

31:42.580 --> 31:43.580
del.map结尾的文件

31:43.580 --> 31:44.580
我们不要了

31:44.580 --> 31:45.580
不要了

31:45.580 --> 31:46.580
上传出来

31:46.580 --> 31:47.580
接下来我们再看

31:49.580 --> 31:50.580
用filter

31:50.580 --> 31:51.580
不是map

31:51.580 --> 31:52.580
filter

31:52.580 --> 31:53.580
好 这样子

31:53.580 --> 31:54.580
一过滤

31:54.580 --> 31:55.580
是不是只过滤到

31:55.580 --> 31:56.580
del.js文件了

31:56.580 --> 31:57.580
不管你这边文件生成多少个

31:57.580 --> 31:58.580
对吧

31:58.580 --> 31:59.580
我们可以过滤出

31:59.580 --> 32:00.580
del.js文件

32:00.580 --> 32:02.580
好 然后我们再来

32:02.580 --> 32:03.580
你看

32:03.580 --> 32:04.580
map

32:04.580 --> 32:05.580
我们把filter就是去掉了

32:05.580 --> 32:06.580
这些

32:06.580 --> 32:07.580
后续名不是

32:07.580 --> 32:08.580
js的文件

32:08.580 --> 32:09.580
去掉了之后呢

32:09.580 --> 32:10.580
我们再来

32:10.580 --> 32:11.580
继续用map

32:14.580 --> 32:15.580
继续用map

32:15.580 --> 32:17.580
然后再映射

32:17.580 --> 32:18.580
把每一个文件

32:18.580 --> 32:19.580
你看

32:19.580 --> 32:20.580
每一个文件

32:20.580 --> 32:21.580
是一个文件名

32:21.580 --> 32:22.580
对吧

32:22.580 --> 32:23.580
一个文件名

32:23.580 --> 32:24.580
映射成一个什么呢

32:24.580 --> 32:25.580
映射成这么一个东西

32:25.580 --> 32:26.580
一个scripps元素

32:28.580 --> 32:29.580
scripps元素

32:31.580 --> 32:32.580
scripps元素

32:32.580 --> 32:33.580
每个scripps元素里边

32:33.580 --> 32:34.580
一个src

32:34.580 --> 32:35.580
src的路径是什么呢

32:35.580 --> 32:36.580
路径是

32:37.580 --> 32:39.580
js目录下面的

32:39.580 --> 32:40.580
你看这边的路径

32:40.580 --> 32:41.580
对吧

32:41.580 --> 32:42.580
js目录下面

32:42.580 --> 32:43.580
无非就是个文件名

32:43.580 --> 32:44.580
不知道吗

32:44.580 --> 32:45.580
我们把文件名是不是放这

32:45.580 --> 32:46.580
就完了

32:46.580 --> 32:50.110
好 我们再来看一下

32:50.110 --> 32:51.110
对吧

32:51.110 --> 32:52.110
你看

32:52.110 --> 32:53.110
现在就没问题了

32:53.110 --> 32:54.110
对吧

32:54.110 --> 32:55.110
没问题了

32:55.110 --> 32:56.110
好 那么现在的

32:56.110 --> 32:57.110
scripps元素

32:57.110 --> 32:58.110
是不是就生成出来了

32:58.110 --> 32:59.110
那么这个代码

32:59.110 --> 33:00.110
我们就直接把它

33:00.110 --> 33:01.110
导出一个函数

33:01.110 --> 33:02.110
export

33:02.110 --> 33:03.110
default

33:03.110 --> 33:04.110
方形

33:04.110 --> 33:05.110
导出这么一个函数

33:05.110 --> 33:06.110
这个函数

33:06.110 --> 33:08.110
我们通过这样的方式

33:08.110 --> 33:10.110
生成一个scripps的数组

33:10.110 --> 33:11.110
然后呢

33:11.110 --> 33:12.110
我们返回

33:12.110 --> 33:13.110
result

33:13.110 --> 33:14.110
这个数组呢

33:14.110 --> 33:15.110
我们用交印

33:15.110 --> 33:16.110
对吧

33:16.110 --> 33:17.110
这是个数组吗

33:17.110 --> 33:18.110
你看

33:18.110 --> 33:19.110
每个数组

33:19.110 --> 33:20.110
每一项用交印

33:20.110 --> 33:21.110
一个席杠

33:21.110 --> 33:22.110
来进行连接

33:22.110 --> 33:23.110
好 那么就返回一个

33:23.110 --> 33:24.110
完整的scripps支付串了

33:24.110 --> 33:25.110
对吧

33:25.110 --> 33:26.110
好 那么这个函数

33:26.110 --> 33:27.110
我们就写好了

33:27.110 --> 33:28.110
我们现在再把这个东西

33:28.110 --> 33:29.110
改成s6的形式

33:29.110 --> 33:30.110
因为我们要用

33:30.110 --> 33:31.110
微拍打包

33:32.110 --> 33:33.110
好 那么这边呢

33:33.110 --> 33:34.110
我们就可以

33:34.110 --> 33:35.110
导入

33:36.110 --> 33:37.110
getscripps

33:37.110 --> 33:38.110
那么对于以后呢

33:38.110 --> 33:40.110
什么css文件夹

33:40.110 --> 33:41.110
所以也可以用

33:41.110 --> 33:42.110
类似的方式

33:42.110 --> 33:43.110
from

33:44.110 --> 33:45.110
第二鞋杠getscripps

33:45.110 --> 33:46.110
那么这边呢

33:46.110 --> 33:47.110
我们就可以

33:47.110 --> 33:48.110
把这个位置呢

33:48.110 --> 33:50.110
使用getscripps的调用

33:50.110 --> 33:51.110
就可以得到

33:51.110 --> 33:52.110
这个脚笨了

33:52.110 --> 33:53.110
就放了这个位置

33:53.110 --> 33:54.110
对吧

33:54.110 --> 33:55.110
脸上的操作

33:55.110 --> 33:56.110
就是为了去实现

33:56.110 --> 33:57.110
它的哈希值是不一样的

33:58.110 --> 33:59.110
好 接下来

33:59.110 --> 34:00.110
我们来看一下吧

34:00.110 --> 34:01.110
看一下效果

34:02.110 --> 34:04.940
NPMROUNDEV

34:05.940 --> 34:06.940
运行出来

34:08.940 --> 34:09.940
运行出来过后呢

34:09.940 --> 34:10.940
我们在这边

34:10.940 --> 34:11.940
来刷新一下

34:11.940 --> 34:13.940
看一下我们的元代码

34:13.940 --> 34:15.940
元代码是5143A

34:15.940 --> 34:16.940
对吧

34:16.940 --> 34:17.940
它自动程程出来的

34:17.940 --> 34:18.940
所以说呢

34:18.940 --> 34:19.940
一个get是能找到的

34:19.940 --> 34:20.940
没问题

34:20.940 --> 34:21.940
改动一下

34:21.940 --> 34:22.940
比方说我们把这个配件

34:22.940 --> 34:23.940
里边改一下

34:24.940 --> 34:25.940
改成一个

34:26.940 --> 34:27.940
首页

34:27.940 --> 34:28.940
帽号

34:28.940 --> 34:29.940
然后呢

34:29.940 --> 34:30.940
这边刷新

34:30.940 --> 34:31.940
变成首页了

34:31.940 --> 34:32.940
对吧

34:32.940 --> 34:33.940
那么一看一下

34:33.940 --> 34:34.940
是不是还是可以运行

34:34.940 --> 34:35.940
然后我们再看元代吧

34:35.940 --> 34:36.940
5888

34:36.940 --> 34:37.940
那么跟这边

34:37.940 --> 34:38.940
是不是不一样的

34:38.940 --> 34:39.940
对吧

34:39.940 --> 34:40.940
因为它刷新了

34:40.940 --> 34:41.940
它一个就是

34:41.940 --> 34:42.940
再去请求服务器的时候

34:42.940 --> 34:43.940
服务器会给它一个新的

34:43.940 --> 34:44.940
gets路径

34:44.940 --> 34:45.940
那么就避免了

34:45.940 --> 34:46.940
代码更改之后

34:46.940 --> 34:47.940
浏览器又缓存

34:47.940 --> 34:48.940
然后大家先去

34:48.940 --> 34:49.940
把做一遍

34:49.940 --> 34:50.940
这里边比较绕

34:50.940 --> 34:51.940
就这一边比较绕

34:51.940 --> 34:52.940
看那个图

34:52.940 --> 34:53.940
把它梳理一遍

34:54.940 --> 34:55.940
然后看一下

34:55.940 --> 34:56.940
还有什么事情没有做没有

34:56.940 --> 34:57.940
没有了

34:57.940 --> 34:58.940
没有了

34:58.940 --> 34:59.940
OK

34:59.940 --> 35:00.940
那么先把它做成这个样子

