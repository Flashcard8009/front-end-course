WEBVTT

00:00.620 --> 00:06.020
好 其实到现在 这个next已经讲了差不多了

00:06.020 --> 00:08.220
基本上它的功能我们都讲到了

00:08.220 --> 00:13.220
但是可能你们以后在实际的工作中

00:13.220 --> 00:16.620
在开发的时候 可能还会遇到一些问题

00:16.620 --> 00:19.420
那么剩下的时间 后边这几节课

00:19.420 --> 00:22.020
我们就把这些细节的问题给大家讲了

00:22.020 --> 00:24.020
也是为了让大家以后在工作中

00:24.020 --> 00:28.020
尽量更少的避免一些特殊的问题

00:28.020 --> 00:30.420
那么这些问题 你们以后在工作中

00:30.420 --> 00:33.420
遇到了可能不是那么好解决

00:33.420 --> 00:36.420
所以我给大家讲一下 其实主要就是

00:36.420 --> 00:39.420
这个next 如何去接合Redux

00:39.420 --> 00:41.420
如何跟Redux结合

00:41.420 --> 00:44.420
因为这个next 本身跟Redux就没什么关系

00:44.420 --> 00:47.420
它里面也不像无密结石里面类似的什么的吧

00:47.420 --> 00:49.420
整合了一个Redux框架 它没有

00:49.420 --> 00:51.420
它比较好的间接

00:51.420 --> 00:54.420
所以说Redux得自己去实现

00:54.420 --> 00:56.420
而且在实现的Redux当过程中

00:56.420 --> 00:58.420
会遇到一些细节问题

00:58.420 --> 01:01.420
这么几节课 我就给大家讲一个登录功能

01:01.420 --> 01:03.420
登录和权限

01:03.420 --> 01:06.420
那么这一部分一讲过后 基本上你就能够解决这些问题了

01:06.420 --> 01:08.420
怎么去用 Redux 大个使

01:08.420 --> 01:10.420
怎么来做重进项等等等等

01:10.420 --> 01:13.420
我们就可以很从中地应对这些问题了

01:13.420 --> 01:15.420
那么这节课我们一定能来

01:15.420 --> 01:18.420
不能说一节课就能做完 肯定是不行的

01:18.420 --> 01:20.420
咱们还稍慢慢来

01:20.420 --> 01:23.420
这节课我们主要的目的是实现登录接口

01:23.420 --> 01:25.420
登录 註销登录 这东西

01:25.420 --> 01:27.420
实现了 在接口实现了

01:27.420 --> 01:29.420
在实现之前 给大家讲一个事

01:29.420 --> 01:33.420
Redux的节课不是出了新版本吗

01:33.420 --> 01:35.420
我们目前的版本是这个版本

01:35.420 --> 01:37.420
9.3.0 这个版本

01:37.420 --> 01:40.420
那么这个版本它是有一些bug的

01:40.420 --> 01:43.420
前两天我看到有一个bug就是

01:43.420 --> 01:46.420
在首页这一块

01:46.420 --> 01:49.420
在静态化的时候出了一些问题

01:49.420 --> 01:51.420
首页不是我们有SSG 对吧

01:51.420 --> 01:54.420
静态化 它也有存静态化

01:54.420 --> 01:56.420
那么我当我把首页

01:56.420 --> 01:58.420
使用SSG来进行静态化的时候

01:58.420 --> 02:00.420
也说给它加一个

02:00.420 --> 02:03.420
Gate Static Props那个方法

02:03.420 --> 02:06.420
比方说我们就像这样子

02:06.420 --> 02:08.420
像这样子 加上这么一个东西

02:08.420 --> 02:10.420
那么它就变成一个SSG了 对吧

02:10.420 --> 02:12.420
那么其他页面都没有问题

02:12.420 --> 02:13.420
就是首页出问题

02:13.420 --> 02:15.420
首页的话 它每一次请求

02:15.420 --> 02:16.420
后续的每一次请求

02:16.420 --> 02:17.420
它都还要运行这个方法

02:17.420 --> 02:18.420
因为这个方法

02:18.420 --> 02:20.420
实际上只在build的时候运行

02:20.420 --> 02:23.420
这个方法只在build的时候运行

02:23.420 --> 02:24.420
但是它的首页

02:24.420 --> 02:26.420
它每一次请求都会运行

02:26.420 --> 02:28.420
所以说这个是一个bug

02:28.420 --> 02:29.420
因为当时我也不能确定

02:29.420 --> 02:30.420
到底是不是bug

02:30.420 --> 02:32.420
所以说我当时也挺犹豫的

02:32.420 --> 02:34.420
最后我还是给它提交了一个bug

02:34.420 --> 02:35.420
还是不错的

02:35.420 --> 02:36.420
两个小时就修复了

02:36.420 --> 02:37.420
但是它修复了

02:37.420 --> 02:39.420
没有在正式的版本里面

02:39.420 --> 02:42.420
它是在另外一个版本里面进行修复的

02:42.420 --> 02:43.420
它修复到那个版本

02:43.420 --> 02:44.420
叫做 给它说一下

02:44.420 --> 02:46.420
就这个版本

02:46.420 --> 02:47.420
那个是Cannery

02:47.420 --> 02:48.420
Cannery什么意思呢

02:48.420 --> 02:49.420
给大家讲一讲

02:49.420 --> 02:51.420
Cannery表示的是那个

02:51.420 --> 02:54.420
金丝雀 这个单词叫做金丝雀

02:54.420 --> 02:56.420
金丝雀版本在我们软件行业里面

02:56.420 --> 03:01.420
有这么一个约定俗诚的这么一个说法

03:01.420 --> 03:05.420
就是说当里发布了一些bug的修复

03:05.420 --> 03:08.420
或者是一些比较激进的功能

03:08.420 --> 03:09.420
那么这些功能

03:09.420 --> 03:12.420
我还不敢不太敢把它发布到正式版本

03:12.420 --> 03:14.420
因为它可能有些不是那么稳定

03:14.420 --> 03:16.420
那么这个金丝雀版版本

03:16.420 --> 03:18.420
主要是面向技术人员

03:18.420 --> 03:20.420
就是面向一些技术测试人员

03:20.420 --> 03:23.420
或者是一些爱好者给他们发布的

03:23.420 --> 03:24.420
它使用人数比较少

03:24.420 --> 03:25.420
那么当我们

03:25.420 --> 03:27.420
它不断的测试bug

03:27.420 --> 03:29.420
如果说确定了没有什么问题了

03:29.420 --> 03:30.420
然后再把它

03:30.420 --> 03:33.420
就是迁移到正式的版本

03:33.420 --> 03:34.420
它是做这么一件事

03:34.420 --> 03:35.420
所以说呢

03:35.420 --> 03:38.420
如果说大家比较在乎这个index

03:38.420 --> 03:39.420
这个问题的话

03:39.420 --> 03:40.420
那么你目前的

03:40.420 --> 03:43.420
就是如果说你的版本是9.3.0

03:43.420 --> 03:46.420
那我建议你就安装金丝雀版本

03:46.420 --> 03:48.420
当然 如果说你的版本是高于这个的

03:48.420 --> 03:50.420
因为我这个课程是路播课程

03:50.420 --> 03:52.420
我也不知道你们什么时候看的

03:52.420 --> 03:54.420
如果说你的版本是高于这个版本的话

03:54.420 --> 03:56.420
那么它10-89都已经修复了

03:56.420 --> 03:57.420
这个bug就已经修复了

03:57.420 --> 03:58.420
所以说你就不用管了

03:58.420 --> 03:59.420
如果说你是这个版本的话

03:59.420 --> 04:02.420
你安装一下这个next-cannery这个版本

04:02.420 --> 04:03.420
那么怎么安装呢

04:03.420 --> 04:04.420
非常简单

04:04.420 --> 04:10.500
就是npmnxt-cannery

04:10.500 --> 04:11.500
ok

04:11.500 --> 04:12.500
安装就行了

04:12.500 --> 04:14.500
把它升级成为金丝雀版本

04:14.500 --> 04:15.500
这是第一个

04:15.500 --> 04:18.500
修复这个手机的就是静态化的bug

04:18.500 --> 04:19.500
另外它还有一些bug

04:19.500 --> 04:21.500
我刚刚刚给大家提交

04:21.500 --> 04:23.500
它现在还没有回卧

04:23.500 --> 04:25.500
需要可能等一段时间

04:25.500 --> 04:27.500
其实我也不能确定它是不是bug

04:27.500 --> 04:28.500
因为它官方

04:28.500 --> 04:30.500
按照它官方网站里边的说法的话

04:30.500 --> 04:31.500
它就确实是一个bug

04:31.500 --> 04:33.500
那么第二个bug是什么呢

04:33.500 --> 04:34.500
是这个问题

04:34.500 --> 04:37.500
就那个我们的不是这里有代理吗

04:37.500 --> 04:38.500
对吧 有代理

04:38.500 --> 04:39.500
那么这个代理呢

04:39.500 --> 04:40.500
它只能代理接着请求

04:40.500 --> 04:42.500
抛射请求是代理不了的

04:42.500 --> 04:43.500
反复的测试

04:43.500 --> 04:44.500
抛射请求代理不了

04:44.500 --> 04:45.500
而且呢

04:45.500 --> 04:46.500
不光是抛射请求

04:46.500 --> 04:48.500
只要点请求

04:48.500 --> 04:50.500
只要有理由请求

04:50.500 --> 04:51.500
那么都无法代理

04:51.500 --> 04:52.500
所以说呢

04:52.500 --> 04:53.500
会遇到这么一个问题

04:53.500 --> 04:54.500
所以说

04:54.500 --> 04:55.500
那么这里呢

04:55.500 --> 04:56.500
它由于

04:56.500 --> 04:58.500
由于它还没有给我处理

04:58.500 --> 04:59.500
所以说呢

04:59.500 --> 05:00.500
我们目前呢

05:00.500 --> 05:01.500
可能要用一个折腾的解决办法

05:01.500 --> 05:02.500
这是一个

05:02.500 --> 05:03.500
有人说

05:03.500 --> 05:04.500
那个手机

05:04.500 --> 05:05.500
介绍怎么这么多bug

05:05.500 --> 05:07.500
实际上是这样子的

05:07.500 --> 05:08.500
这个bug的多少呢

05:08.500 --> 05:10.500
并不能决定一个库的好坏

05:10.500 --> 05:12.500
每一个库都有bug

05:12.500 --> 05:14.500
我不是为谁开拓

05:14.500 --> 05:15.500
是每一个库确实都有bug

05:15.500 --> 05:16.500
而且呢

05:16.500 --> 05:18.500
大家会发现一个非常神奇的现象

05:18.500 --> 05:20.500
就这个库用的人越多

05:20.500 --> 05:21.500
他越流行

05:21.500 --> 05:22.500
他的bug就越多

05:22.500 --> 05:24.500
李某鑫你去github上看

05:24.500 --> 05:26.500
凡是那个

05:26.500 --> 05:27.500
比较流行的库

05:27.500 --> 05:29.500
他的github上有个医术

05:29.500 --> 05:31.500
医术就表示

05:31.500 --> 05:32.500
遇到了问题

05:32.500 --> 05:33.500
那么你就会发现

05:33.500 --> 05:35.500
那个问题就特别特别多

05:35.500 --> 05:36.500
这是很正常的

05:36.500 --> 05:38.500
那么哪个库没有bug呢

05:38.500 --> 05:40.500
就是那些没有人用的库

05:40.500 --> 05:41.500
没有人用的库的话

05:41.500 --> 05:42.500
他就没有bug

05:42.500 --> 05:43.500
不是说他没有bug

05:43.500 --> 05:45.500
根本就没有人发现

05:46.500 --> 05:48.500
这就有点像什么

05:48.500 --> 05:49.500
最近不是闹那个

05:49.500 --> 05:51.500
新冠病毒肺炎

05:51.500 --> 05:52.500
美国

05:52.500 --> 05:53.500
肺炎人数就少

05:53.500 --> 05:54.500
为什么呢

05:54.500 --> 05:55.500
他不测

05:55.500 --> 05:56.500
他不测他肯定就少

05:56.500 --> 05:57.500
我觉得美国

05:57.500 --> 05:59.500
他的肺炎人数是处于一种

05:59.500 --> 06:01.500
量子叠加状态

06:01.500 --> 06:02.500
他到底有多少

06:02.500 --> 06:04.500
去由于怎么去观测他

06:04.500 --> 06:06.500
挺有意思

06:06.500 --> 06:07.500
所以说这里

06:07.500 --> 06:09.500
由于目前这个bug存在

06:09.500 --> 06:10.500
所以说我们目前

06:10.500 --> 06:11.500
不能再使用代理了

06:11.500 --> 06:12.500
因为这个代理代理不了

06:12.500 --> 06:13.500
透射请求

06:13.500 --> 06:14.500
我们登陆的话

06:14.500 --> 06:16.500
是一定要用透射请求的

06:16.500 --> 06:17.500
因此这里没法用代理了

06:17.500 --> 06:18.500
但是不用

06:18.500 --> 06:19.500
那么后面如果他修复了

06:19.500 --> 06:21.500
我给大家说一下

06:21.500 --> 06:23.500
那么现在怎么办呢

06:23.500 --> 06:24.500
因此我要

06:24.500 --> 06:25.500
一个是安装金色圈盘

06:25.500 --> 06:26.500
还在安装

06:26.500 --> 06:28.500
一直安装这个

06:28.500 --> 06:29.500
另外一个是

06:29.500 --> 06:30.500
我们要修改一下

06:30.500 --> 06:32.500
这个axx的基础路径

06:32.500 --> 06:33.500
就在这儿

06:33.500 --> 06:34.500
就不能再使用代理了

06:34.500 --> 06:35.500
因为我们现在透射请求

06:35.500 --> 06:37.500
他到时候请求不了就麻烦了

06:37.500 --> 06:38.500
因为亏是这里

06:38.500 --> 06:39.500
我们就暂时的

06:39.500 --> 06:40.500
这样子来处理一下

06:40.500 --> 06:41.500
再加上

06:41.500 --> 06:42.500
刘亮奇这段

06:42.500 --> 06:43.500
也该加上这个基路径

06:43.500 --> 06:44.500
到时候了

06:44.500 --> 06:45.500
如果他修复了bug

06:45.500 --> 06:46.500
我再把他就去掉

06:46.500 --> 06:47.500
然后使用代理

06:47.500 --> 06:48.500
那么这样子一来的话

06:48.500 --> 06:50.500
无论是服务器端

06:50.500 --> 06:51.500
还是浏览器端

06:51.500 --> 06:52.500
他们都是直接

06:52.500 --> 06:53.500
请求的数据服务器

06:53.500 --> 06:55.500
本来应该是这种结构的

06:55.500 --> 06:57.500
本来应该是我们浏览器

06:57.500 --> 06:59.500
去请求谁呢

06:59.500 --> 07:00.500
请求那个

07:00.500 --> 07:01.500
我们自己的中间城

07:01.500 --> 07:02.500
对吧

07:02.500 --> 07:03.500
就是那个时候的介石

07:03.500 --> 07:04.500
然后那个时候的介石

07:04.500 --> 07:06.500
去请求数据服务器

07:06.500 --> 07:07.500
那么那个时候的介石

07:07.500 --> 07:09.500
它是充当一个代理的角色

07:09.500 --> 07:11.500
那么现在呢

07:11.500 --> 07:12.500
当然还有一个模式

07:12.500 --> 07:13.500
就是类似的介石

07:13.500 --> 07:14.500
直接请求数据服务器

07:14.500 --> 07:16.500
这个东西是不变的

07:16.500 --> 07:18.500
它做服务端圈了嘛

07:18.500 --> 07:19.500
那么现在呢

07:19.500 --> 07:20.500
我们只能用这个模式了

07:20.500 --> 07:22.500
刘亮奇也去直接

07:22.500 --> 07:23.500
请求数据服务器

07:23.500 --> 07:25.500
当然这会遇到跨域的问题

07:25.500 --> 07:26.500
不过我这个服务器

07:26.500 --> 07:27.500
给大家解决了跨域

07:27.500 --> 07:28.500
所以说大家需要

07:28.500 --> 07:29.500
把我的服务器

07:29.500 --> 07:30.500
地址修改一下

07:30.500 --> 07:31.500
我单独处理一下

07:31.500 --> 07:32.500
解决跨域

07:32.500 --> 07:34.500
以及解决登入的一些问题

07:34.500 --> 07:36.500
把它变成5100

07:36.500 --> 07:37.500
把关口

07:37.500 --> 07:39.500
从5505变成5100

07:39.500 --> 07:40.500
OK

07:40.500 --> 07:41.500
那么这里呢

07:41.500 --> 07:42.500
我们把修改一下

07:42.500 --> 07:43.500
碰到的话到时候要出问题的

07:43.500 --> 07:44.500
那么这个代理呢

07:44.500 --> 07:45.500
就可以删掉

07:45.500 --> 07:46.500
也可以把留在这

07:46.500 --> 07:47.500
留在这吧

07:47.500 --> 07:48.500
我们到时候如果说修复了

07:48.500 --> 07:49.500
我就把这句话去掉

07:49.500 --> 07:50.500
然后继续使用代理

07:50.500 --> 07:51.500
OK

07:51.500 --> 07:52.500
那么这是第一步

07:52.500 --> 07:53.500
更改一些bug

07:53.500 --> 07:54.500
那么第二步呢

07:54.500 --> 07:55.500
我们就要准备接口

07:55.500 --> 07:57.500
并完成一些测试了

07:57.500 --> 07:59.500
那么我们这些可能

07:59.500 --> 08:00.500
就做一件很简单的事

08:00.500 --> 08:01.500
就准备一些接口

08:01.500 --> 08:03.500
那么咱们来准备准备一下

08:03.500 --> 08:05.500
login service

08:05.500 --> 08:07.500
我们这个登入接口里边

08:07.500 --> 08:09.500
我把这个稍微复制一下

08:09.500 --> 08:10.500
登入接口里边呢

08:10.500 --> 08:12.500
我们其实要导出几个方法

08:12.500 --> 08:14.500
导出几个一步方法

08:14.500 --> 08:15.500
一个是登入

08:15.500 --> 08:16.500
登入你肯定要给我

08:16.500 --> 08:17.500
传以两个东西

08:17.500 --> 08:18.500
一个是login ID

08:18.500 --> 08:19.500
登入账号

08:19.500 --> 08:20.500
登入密码

08:20.500 --> 08:23.500
我们把这类的代码写一下吧

08:23.500 --> 08:24.500
就是一个请求

08:24.500 --> 08:25.500
请求用poser请求

08:25.500 --> 08:26.500
请求这个地址

08:26.500 --> 08:27.500
基地址呢

08:27.500 --> 08:28.500
就是我们刚才那个

08:28.500 --> 08:29.500
就这个地址

08:29.500 --> 08:30.500
基地址就这个地址

08:30.500 --> 08:31.500
然后请求的话

08:31.500 --> 08:32.500
我们请求

08:32.500 --> 08:36.500
API user login

08:36.500 --> 08:37.500
然后传的数据呢

08:37.500 --> 08:38.500
就两个

08:38.500 --> 08:39.500
一个是login ID

08:39.500 --> 08:41.500
一个是login password

08:41.500 --> 08:42.500
那么这里呢

08:42.500 --> 08:43.500
我给大家看一下

08:43.500 --> 08:44.500
他到底会得到一个

08:44.500 --> 08:45.500
什么样的结果

08:45.500 --> 08:48.500
await

08:48.500 --> 08:50.500
这里我们返回

08:50.500 --> 08:52.500
返回服务器的响应结果

08:52.500 --> 08:53.500
行了

08:53.500 --> 08:54.500
那咱们来测试一下

08:54.500 --> 08:55.500
登入这个方法

08:55.500 --> 08:56.500
他会给我们一个

08:56.500 --> 08:57.500
什么样的结果呢

08:57.500 --> 08:58.500
这里呢

08:58.500 --> 09:00.500
我这里在pages里边

09:00.500 --> 09:02.500
新加一个页面

09:02.500 --> 09:03.500
右键新加一个login

09:03.500 --> 09:05.500
就是gsax

09:05.500 --> 09:06.500
新加这么一个页面

09:06.500 --> 09:08.500
然后我在这里呢

09:08.500 --> 09:09.500
写上一个

09:09.500 --> 09:10.500
主键

09:10.500 --> 09:11.500
返回一个登录页

09:11.500 --> 09:12.500
登录页

09:12.500 --> 09:14.500
当然我现在还不会去

09:14.500 --> 09:15.500
完整的做他

09:15.500 --> 09:16.500
现在呢

09:16.500 --> 09:17.500
我们在这里呢

09:17.500 --> 09:19.500
一开始就去登录一下

09:19.500 --> 09:20.500
测试一下这个结果

09:20.500 --> 09:24.500
from services

09:24.500 --> 09:26.500
login

09:29.500 --> 09:30.500
这里呢

09:30.500 --> 09:31.500
login

09:31.500 --> 09:33.500
login

09:33.500 --> 09:34.500
我这里呢

09:34.500 --> 09:35.500
我这里呢

09:35.500 --> 09:36.500
再把那个

09:36.500 --> 09:37.500
导航蓝

09:37.500 --> 09:38.500
这东西去去了

09:38.500 --> 09:39.500
然后呢

09:39.500 --> 09:41.500
加上一个登录页

09:41.500 --> 09:42.500
登录

09:42.500 --> 09:45.070
这里

09:45.070 --> 09:47.070
到了个login

09:47.070 --> 09:48.070
OK

09:48.070 --> 09:49.070
登录页这里呢

09:49.070 --> 09:50.070
我们去测试一下

09:50.070 --> 09:51.070
这个结果

09:51.070 --> 09:53.960
login

09:53.960 --> 09:54.960
账号的话

09:54.960 --> 09:55.960
正确账号是这样子

09:55.960 --> 09:56.960
正确账号的话

09:56.960 --> 09:57.960
是11个1

09:57.960 --> 09:58.960
手机号

09:58.960 --> 09:59.960
11个1

09:59.960 --> 10:00.960
做测试的

10:00.960 --> 10:02.960
123456789

10:02.960 --> 10:03.960
这个多少呢

10:03.960 --> 10:05.960
11个1

10:05.960 --> 10:06.960
password

10:06.960 --> 10:07.960
123123

10:07.960 --> 10:08.960
就是正确的账号密码

10:08.960 --> 10:09.960
好然后来

10:09.960 --> 10:11.960
我们看一下他响应结果

10:11.960 --> 10:12.960
输出

10:12.960 --> 10:13.960
响应结果

10:13.960 --> 10:14.960
好行了

10:14.960 --> 10:15.960
那么这个组件呢

10:15.960 --> 10:16.960
是在服务端也要运行

10:16.960 --> 10:17.960
客户端也要运行的

10:17.960 --> 10:18.960
对吧

10:18.960 --> 10:19.960
因为他这个组件

10:19.960 --> 10:20.960
他会静态化

10:20.960 --> 10:21.960
但是在开发模式里边

10:21.960 --> 10:22.960
他是每一次都是服务端

10:22.960 --> 10:23.960
要运行一次

10:23.960 --> 10:24.960
客户端要运行一次

10:24.960 --> 10:26.960
那么在那个

10:26.960 --> 10:27.960
生产环境里面

10:27.960 --> 10:28.960
就是构建的时候呢

10:28.960 --> 10:29.960
他会把它做成个静态组件

10:29.960 --> 10:30.960
OK

10:30.960 --> 10:31.960
那么现在呢

10:31.960 --> 10:32.960
我们把这个写好了

10:32.960 --> 10:33.960
写好了

10:33.960 --> 10:34.960
我们来测试一下吧

10:35.960 --> 10:36.960
印出来

10:36.960 --> 10:37.960
看一下

10:37.960 --> 10:38.960
他到底给我们返回一个

10:38.960 --> 10:39.960
什么样的结构

10:43.680 --> 10:44.680
localhost

10:45.680 --> 10:46.680
localhost

10:46.680 --> 10:47.680
3000

10:48.680 --> 10:50.680
现在我们就没有用代理了

10:50.680 --> 10:51.680
就直接请求我们的

10:51.680 --> 10:52.680
自己的服务器了

10:52.680 --> 10:53.680
好点击登录

10:53.680 --> 10:54.680
他等一下

10:54.680 --> 10:55.680
因为他这个服务端

10:55.680 --> 10:56.680
要变

10:56.680 --> 10:57.680
这个要变异

10:57.680 --> 10:58.680
因为是开发模式

10:58.680 --> 10:59.680
到登录页

10:59.680 --> 11:00.680
然后我们检查一下控制台

11:00.680 --> 11:01.680
好

11:01.680 --> 11:02.680
控制台里边你看

11:02.680 --> 11:03.680
是不是拿到服务器的结果了

11:03.680 --> 11:04.680
对吧

11:04.680 --> 11:05.680
拿到服务器结果

11:05.680 --> 11:06.680
然后他给我们这个格式

11:06.680 --> 11:07.680
扣的为你

11:07.680 --> 11:09.680
表示没有错误

11:09.680 --> 11:10.680
没什么错误消息

11:10.680 --> 11:11.680
没有的话就空的

11:11.680 --> 11:12.680
然后下面data

11:12.680 --> 11:14.680
就表示登录的结果

11:14.680 --> 11:16.680
然后用户的名字

11:16.680 --> 11:17.680
然后登录的账号

11:17.680 --> 11:18.680
然后他用户的ID

11:18.680 --> 11:20.680
那么这些都拿到了

11:20.680 --> 11:21.680
就这么一回事

11:21.680 --> 11:22.680
然后呢

11:22.680 --> 11:23.680
不仅如此呢

11:23.680 --> 11:25.680
他还给我一个什么东西呢

11:25.680 --> 11:27.680
那次我们再刷新看一下

11:27.680 --> 11:28.680
刷新

11:28.680 --> 11:29.680
好

11:29.680 --> 11:30.680
然后我们看一下这个login

11:30.680 --> 11:31.680
在客户端这边请求的时候

11:31.680 --> 11:32.680
请求的是这个例子

11:32.680 --> 11:33.680
对吧

11:33.680 --> 11:34.680
这夸余请求的

11:34.680 --> 11:35.680
然后服务器

11:35.680 --> 11:36.680
这个东西

11:36.680 --> 11:37.680
他的响应头里边

11:37.680 --> 11:39.680
会给我一个authorization

11:39.680 --> 11:41.680
会给我这么一个响应头

11:41.680 --> 11:43.680
这个响应头里边就是我们的身份信息

11:43.680 --> 11:44.680
就在这里边

11:44.680 --> 11:45.680
也就是说这个东西

11:45.680 --> 11:46.680
你可以保存

11:46.680 --> 11:48.680
你在客户端里边可以保存

11:48.680 --> 11:49.680
那么这里我给他说一下

11:49.680 --> 11:50.680
这个登录呢

11:50.680 --> 11:53.680
主要是有两种做法

11:53.680 --> 11:55.680
就是个身份信息

11:55.680 --> 11:56.680
他会给你两种

11:56.680 --> 11:58.680
一种是在cookie里边

11:58.680 --> 11:59.680
他直接发送一个set cookie

11:59.680 --> 12:00.680
对吧

12:00.680 --> 12:02.680
另外一种是在

12:02.680 --> 12:03.680
响应头里边

12:03.680 --> 12:04.680
因为我想的是

12:04.680 --> 12:05.680
大家cookie呢

12:05.680 --> 12:06.680
可能之前都做过了

12:06.680 --> 12:07.680
所以说给大家看一下

12:07.680 --> 12:08.680
这种模式

12:08.680 --> 12:10.680
authorization就是响应头的模式

12:10.680 --> 12:11.680
就这种模式

12:11.680 --> 12:12.680
他不会给你什么set cookie

12:12.680 --> 12:13.680
因为为什么呢

12:13.680 --> 12:14.680
他可能会这样的考虑

12:14.680 --> 12:15.680
特别是一大公司

12:15.680 --> 12:16.680
他会这样的考虑

12:16.680 --> 12:17.680
他就说

12:17.680 --> 12:19.680
因为我这个数据服务器

12:19.680 --> 12:21.680
他要应付所有的端

12:21.680 --> 12:22.680
中端

12:22.680 --> 12:23.680
他不一定是浏览器

12:23.680 --> 12:24.680
对吧

12:24.680 --> 12:25.680
我们知道浏览器才一 cookie

12:25.680 --> 12:26.680
那就如果说那些是移动端

12:26.680 --> 12:27.680
移动端哪有什么 cookie

12:27.680 --> 12:28.680
对吧

12:28.680 --> 12:29.680
所以说

12:29.680 --> 12:30.680
他要考虑这种情况

12:30.680 --> 12:31.680
因此呢

12:31.680 --> 12:32.680
他让你自行处理

12:32.680 --> 12:33.680
就你拿到这个authorization过后

12:33.680 --> 12:35.680
你科物端是不是可以操作 cookie

12:35.680 --> 12:37.680
你可以把自己把它放到 cookie 里边

12:37.680 --> 12:38.680
也可以呢

12:38.680 --> 12:39.680
把它放到 local storage 里边

12:39.680 --> 12:40.680
就看你要放到哪里

12:40.680 --> 12:41.680
你自己去放

12:41.680 --> 12:42.680
我不管你了

12:42.680 --> 12:43.680
他说一说

12:43.680 --> 12:44.680
他给你也附带一个响应头

12:44.680 --> 12:46.680
他可以把你个身份信息给你

12:46.680 --> 12:47.680
好

12:47.680 --> 12:48.680
那么这个authorization

12:48.680 --> 12:49.680
我们就可以拿到

12:49.680 --> 12:50.680
如果说登录成功就拿到

12:50.680 --> 12:51.680
那如果说登录不成功

12:51.680 --> 12:53.680
比方说我们这里写的错误的密码

12:53.680 --> 12:55.680
好保存

12:55.680 --> 12:56.680
好

12:56.680 --> 12:57.680
再给大家说一下

12:57.680 --> 12:58.680
服务器这边也会请求的

12:58.680 --> 12:59.680
服务器这边也会请求的

12:59.680 --> 13:00.680
也一样的

13:00.680 --> 13:02.680
服务器那边也会收到响应头

13:02.680 --> 13:03.680
好

13:03.680 --> 13:04.680
比方说我们这里刷新

13:04.680 --> 13:05.680
刷新过后登录

13:05.680 --> 13:06.680
你看

13:06.680 --> 13:07.680
登录就不成功了

13:07.680 --> 13:08.680
对吧

13:08.680 --> 13:11.060
不成功了

13:11.060 --> 13:12.060
有这

13:12.060 --> 13:16.060
可以响应结果了

13:16.060 --> 13:18.060
这里出了问题了

13:18.060 --> 13:24.840
刷新一次

13:24.840 --> 13:25.840
这个是卡住了吗

13:25.840 --> 13:27.840
还是什么回事

13:27.840 --> 13:30.840
这里好像出问题了

13:30.840 --> 13:32.840
登录失败的时候

13:32.840 --> 13:33.840
好像出问题了

13:33.840 --> 13:37.410
我这里刷新

13:37.410 --> 13:38.410
好

13:38.410 --> 13:40.410
那么这边真的我暂时点开视频

13:40.410 --> 13:41.410
我到服务器那边去改一下

13:41.410 --> 13:45.410
看一下到底是哪里出了问题

13:45.410 --> 13:46.410
好了

13:46.410 --> 13:47.410
服务器那边问题解决了

13:47.410 --> 13:48.410
因为我刚刚写的登录

13:48.410 --> 13:50.410
就写得很长处

13:50.410 --> 13:51.410
然后再我们再刷新一次

13:51.410 --> 13:52.410
刷新

13:52.410 --> 13:53.410
你看

13:53.410 --> 13:54.410
如果说你是错误的话

13:54.410 --> 13:55.410
那么他就会给你一个

13:55.410 --> 13:56.410
扣的一

13:56.410 --> 13:57.410
message账号密码错误

13:57.410 --> 13:58.410
那么现在没有data了

13:58.410 --> 13:59.410
对吧

13:59.410 --> 14:00.410
我们再来看登录成功

14:00.410 --> 14:02.410
123

14:02.410 --> 14:03.410
好

14:03.410 --> 14:05.410
这里我们再来刷新

14:05.410 --> 14:06.410
那么这里就有data

14:06.410 --> 14:07.410
扣的为0

14:07.410 --> 14:09.410
然后登录错误

14:09.410 --> 14:10.410
好再来

14:10.410 --> 14:12.410
那么这里就是这个情况

14:12.410 --> 14:14.410
服务器那边也是这个

14:14.410 --> 14:15.410
服务器那边也是这个情况

14:15.410 --> 14:17.410
所以说我们这里边

14:17.410 --> 14:19.410
在这里是不是可以判断什么呢

14:19.410 --> 14:20.410
判断resper

14:20.410 --> 14:21.410
调data

14:21.410 --> 14:22.410
扣的

14:22.410 --> 14:24.410
扣的是不是等于1

14:24.410 --> 14:25.410
对吧

14:25.410 --> 14:26.410
是不是等于1

14:26.410 --> 14:27.410
或者是扣的是不是不为0

14:27.410 --> 14:28.410
那么来表示

14:28.410 --> 14:29.410
是不是登录成功

14:29.410 --> 14:30.410
那么如果说扣的等于0

14:30.410 --> 14:31.410
那么说明什么呢

14:31.410 --> 14:32.410
登录成功

14:32.410 --> 14:33.410
登录成功

14:33.410 --> 14:34.410
好

14:34.410 --> 14:35.410
登录成功

14:35.410 --> 14:36.410
登录成功了

14:36.410 --> 14:38.410
他不是给了你这么一个东西吗

14:38.410 --> 14:39.410
我们再来看

14:39.410 --> 14:40.410
登录成功

14:40.410 --> 14:42.410
他不是给了你一个

14:42.410 --> 14:43.410
响应头吗

14:43.410 --> 14:45.410
你看

14:45.410 --> 14:47.410
他又给了你一个响应头

14:47.410 --> 14:48.410
offeration

14:48.410 --> 14:49.410
当然登录失败

14:49.410 --> 14:50.410
他是不会给你这个东西的

14:50.410 --> 14:51.410
这是身份信息

14:51.410 --> 14:53.410
那么这个就相当于是一个cookie

14:53.410 --> 14:55.410
你可以把它保存到cookie里边

14:55.410 --> 14:56.410
也可以把它保存到local storage里边

14:56.410 --> 14:57.410
你随便保存

14:57.410 --> 14:58.410
都行

14:58.410 --> 14:59.410
然后local storage

14:59.410 --> 15:00.410
你还可以给他设定一个期限

15:00.410 --> 15:01.410
对吧

15:01.410 --> 15:02.410
这些都可以

15:02.410 --> 15:04.410
local storage怎么设定期限

15:04.410 --> 15:06.410
你该构建一个接受格式的对象

15:06.410 --> 15:07.410
一个是投稿

15:07.410 --> 15:08.410
一个是过期时间

15:08.410 --> 15:09.410
对吧

15:09.410 --> 15:10.410
那么都可以

15:10.410 --> 15:11.410
实际上服务器那边

15:11.410 --> 15:12.410
也会给你这个期限

15:12.410 --> 15:14.410
我那个服务器做的简单

15:14.410 --> 15:15.410
主要是在测试的

15:15.410 --> 15:18.410
所以说他没有过期的时间

15:18.410 --> 15:20.410
那么现在我们来看一下

15:20.410 --> 15:21.410
我们这里怎么办

15:21.410 --> 15:22.410
登录成功之后

15:22.410 --> 15:23.410
登录成功之后

15:23.410 --> 15:24.410
我们就把它保存到

15:24.410 --> 15:26.410
把那个header拿到

15:26.410 --> 15:28.410
他一定会有一个header

15:30.410 --> 15:33.410
这个header是名字叫做offerization

15:33.410 --> 15:34.410
我们把它写到这儿吧

15:34.410 --> 15:35.410
写成一个长量

15:35.410 --> 15:36.410
off

15:37.410 --> 15:38.410
等于

15:38.410 --> 15:40.410
这个名字叫做offerization

15:40.410 --> 15:42.410
那就认证信息

15:42.410 --> 15:44.410
我们把这个header拿到

15:44.410 --> 15:45.410
拿到这个header过程

15:45.410 --> 15:46.410
我们把它保存到哪

15:46.410 --> 15:47.410
把它保存到

15:47.410 --> 15:48.410
这个是token

15:49.410 --> 15:51.410
把它保存到local storage里边

15:51.410 --> 15:52.410
local storage

15:52.410 --> 15:53.410
sysitem

15:53.410 --> 15:54.410
token

15:54.410 --> 15:56.410
我们这里就不去做其他事情了

15:56.410 --> 15:57.410
直接把它保存起来

15:57.410 --> 15:59.410
当然也可以保存到cookie

15:59.410 --> 16:00.410
都可以

16:00.410 --> 16:01.410
好

16:01.410 --> 16:02.410
接下来我们来刷新

16:03.410 --> 16:04.410
拿到数据了

16:04.410 --> 16:05.410
拿到数据了

16:05.410 --> 16:07.410
咱们来看一下我们的

16:07.410 --> 16:08.410
token

16:08.410 --> 16:09.410
我们的认证信息

16:09.410 --> 16:11.410
有没有放到local storage里边

16:11.410 --> 16:13.410
我们到application里面去看一下

16:13.410 --> 16:14.410
咱们来local storage里边

16:14.410 --> 16:15.410
你看

16:15.410 --> 16:16.410
这个token是不是有已经有了

16:16.410 --> 16:17.410
有这个数据了

16:17.410 --> 16:18.410
好

16:18.410 --> 16:19.410
那么这个token有什么意义呢

16:19.410 --> 16:21.410
你没说我登录应该懂的

16:21.410 --> 16:22.410
token有什么意义

16:22.410 --> 16:23.410
它是这样子

16:23.410 --> 16:25.410
你登录了

16:25.410 --> 16:26.410
是不是一次登录过后

16:26.410 --> 16:29.410
我们可能会保持登录状态

16:29.410 --> 16:30.410
那怎么来保持呢

16:30.410 --> 16:32.410
因为我们浏览器会关闭掉

16:32.410 --> 16:33.410
对吧

16:33.410 --> 16:35.410
你像你这个用户的信息

16:35.410 --> 16:36.410
那么它的内存里边

16:36.410 --> 16:37.410
它可能会关闭掉

16:37.410 --> 16:39.410
浏览器关闭的内存是不是没了

16:39.410 --> 16:41.410
那下一次我浏览器怎么

16:41.410 --> 16:43.410
就是服务器我怎么知道

16:43.410 --> 16:44.410
你之前已经登录了

16:44.410 --> 16:46.410
就要靠这个token信息

16:46.410 --> 16:48.410
到时候你要把它重新发给服务器

16:48.410 --> 16:49.410
那么服务器就知道了

16:49.410 --> 16:50.410
你原来登录过了

16:50.410 --> 16:52.410
我就不需要让你登录了

16:52.410 --> 16:53.410
是这么个意思

16:54.410 --> 16:55.410
当然了如果说你登录失败

16:55.410 --> 16:56.410
登录失败的话

16:56.410 --> 16:58.410
我不管你什么情况

16:58.410 --> 16:59.410
我把它清空

17:00.410 --> 17:02.410
remove item

17:02.410 --> 17:03.410
那么之前哪怕你有

17:03.410 --> 17:04.410
我都给你清空

17:04.410 --> 17:05.410
你登录失败了

17:05.410 --> 17:06.410
remove item

17:06.410 --> 17:08.410
token要去掉

17:10.410 --> 17:12.410
好那么这是这一块

17:12.410 --> 17:13.410
那么我们现在登录失败

17:13.410 --> 17:15.410
试一试登录失败试一试

17:15.410 --> 17:16.410
好这里刷新

17:17.410 --> 17:18.410
登录失败你看这个token是没了

17:18.410 --> 17:19.410
对吧

17:19.410 --> 17:20.410
好那么这就是logging

17:20.410 --> 17:21.410
这里的写法

17:22.410 --> 17:24.410
好接下来我们来写好logging之后

17:24.410 --> 17:26.410
我们现在还要导出一个方法

17:27.410 --> 17:29.410
就是who am I

17:29.410 --> 17:30.410
这是什么意思呢

17:30.410 --> 17:32.410
这个方法它是这样子

17:32.410 --> 17:33.410
就是你登录之后

17:33.410 --> 17:34.410
如果说你关到瀏覽器

17:34.410 --> 17:35.410
关到瀏覽器

17:35.410 --> 17:36.410
下一次我们再进入

17:36.410 --> 17:37.410
我们的网站的时候

17:37.410 --> 17:38.410
我可能要知道

17:38.410 --> 17:39.410
我之前有没有登录过

17:39.410 --> 17:40.410
那怎么来看呢

17:40.410 --> 17:42.410
就看这个token有没有

17:42.410 --> 17:43.410
如果说有这个token的话

17:43.410 --> 17:44.410
我们发到服务器

17:44.410 --> 17:46.410
我们把它发送到服务器

17:46.410 --> 17:47.410
怎么发送呢

17:47.410 --> 17:48.410
发到服务器的时候

17:48.410 --> 17:50.410
我们要给他附带一个

17:50.410 --> 17:52.410
给他附带一个就是header

17:52.410 --> 17:54.410
给他附带这么一个header

17:54.410 --> 17:55.410
给他发过去

17:55.410 --> 17:56.410
所以说这里的怎么办呢

17:56.410 --> 17:57.410
我们request

17:58.410 --> 18:00.410
那么他这里边

18:00.410 --> 18:01.410
我们给他使用get请求

18:01.410 --> 18:02.410
请求服务器

18:02.410 --> 18:03.410
请求哪个地址

18:03.410 --> 18:04.410
API who am I

18:04.410 --> 18:05.410
请求这个地址

18:06.410 --> 18:07.410
请求的时候

18:07.410 --> 18:09.410
我们给他附带一个header

18:09.410 --> 18:11.410
不知道你可以配置header是吗

18:11.410 --> 18:13.410
对吧给他附带一个header

18:13.410 --> 18:14.410
header的名字就是这个

18:14.410 --> 18:15.410
就这个名字

18:15.410 --> 18:16.410
我们请求的时候

18:16.410 --> 18:17.410
给他附带一个

18:17.410 --> 18:18.410
这么一个header

18:19.410 --> 18:20.410
加进去内容是什么呢

18:20.410 --> 18:22.410
内容就来自于我们的local storage

18:22.410 --> 18:23.410
对吧

18:23.410 --> 18:24.410
我们来自于这

18:24.410 --> 18:25.410
local storage

18:25.410 --> 18:26.410
好我们这里来获取

18:26.410 --> 18:27.410
local storage

18:27.410 --> 18:28.410
get item

18:29.410 --> 18:31.410
把这个token获取出来

18:31.410 --> 18:32.410
当然如果说

18:32.410 --> 18:33.410
你存在cookie里面的

18:33.410 --> 18:34.410
要从cookie里面获取

18:34.410 --> 18:35.410
token

18:35.410 --> 18:37.410
获取出来过后呢

18:37.410 --> 18:38.410
判断一下

18:38.410 --> 18:39.410
token有没有

18:39.410 --> 18:40.410
你有没有token

18:40.410 --> 18:42.410
如果说浏览器根本就没有token

18:42.410 --> 18:43.410
那不用发到服务器了

18:43.410 --> 18:44.410
根本就不用发到服务器了

18:44.410 --> 18:46.410
你肯定是登陆失败的

18:46.410 --> 18:47.410
肯定是登陆失败的

18:47.410 --> 18:48.410
那么返回了结果

18:48.410 --> 18:49.410
我们就返回这么一个结果

18:49.410 --> 18:50.410
跟服务器保持统一

18:50.410 --> 18:52.410
返回一个code等于0

18:52.410 --> 18:54.410
message等于空之不串

18:54.410 --> 18:55.410
然后data为null

18:55.410 --> 18:57.410
表示的你根本就没有这个用户

18:57.410 --> 18:58.410
没有这个用户

18:58.410 --> 18:59.410
好如果说

18:59.410 --> 19:01.410
如果说你有这个token

19:01.410 --> 19:02.410
这就是没有

19:02.410 --> 19:03.410
没有这个token

19:03.410 --> 19:04.410
如果说你有这个token的话

19:04.410 --> 19:05.410
OK

19:05.410 --> 19:06.410
我把这个token发送到服务器

19:06.410 --> 19:07.410
那么服务器会告诉我

19:07.410 --> 19:08.410
我到底是谁

19:08.410 --> 19:10.410
好那么这里呢

19:10.410 --> 19:12.410
我们来得到

19:12.410 --> 19:14.410
得到服务器的响应结果

19:15.410 --> 19:16.410
好返回

19:16.410 --> 19:17.410
OK

19:17.410 --> 19:19.410
那么现在我们来看一下

19:19.410 --> 19:20.410
我们现在登陆成功

19:20.410 --> 19:21.410
现在登陆成功

19:22.410 --> 19:23.410
刷新

19:24.410 --> 19:25.410
好这边我们看到token了

19:25.410 --> 19:26.410
对吧

19:26.410 --> 19:27.410
那么拿到服务器的结果了

19:27.410 --> 19:28.410
保存起来了

19:28.410 --> 19:29.410
好那么后续呢

19:29.410 --> 19:31.410
我们就把这个改一下

19:31.410 --> 19:32.410
把这个注释掉

19:32.410 --> 19:34.410
然后我们来发送一个互MI

19:34.410 --> 19:35.410
互MI

19:35.410 --> 19:37.410
那么互MI的时候呢

19:37.410 --> 19:39.410
我们判断就是直接互MI

19:39.410 --> 19:41.410
然后调用

19:41.410 --> 19:43.410
看一下服务器的响应结果

19:43.410 --> 19:45.410
输出risp

19:46.410 --> 19:48.410
好这边返回的是risp

19:48.410 --> 19:49.410
要调调

19:50.410 --> 19:51.410
OK

19:51.410 --> 19:52.410
那么现在我们来看一下

19:52.410 --> 19:53.410
刷新

19:54.410 --> 19:56.410
这里

19:56.410 --> 19:57.410
请求地址有问题

19:57.410 --> 19:59.410
请求地址是API user

19:59.410 --> 20:00.410
互MI

20:00.410 --> 20:02.410
好刷新

20:02.410 --> 20:03.410
那服务器会告诉我

20:03.410 --> 20:04.410
你看是不是这个

20:04.410 --> 20:06.410
我的用户是谁

20:06.410 --> 20:07.410
哪怕我的浏览器关闭了

20:07.410 --> 20:08.410
关闭了过后

20:08.410 --> 20:09.410
我们再打开

20:09.410 --> 20:10.410
都可以

20:10.410 --> 20:11.410
因为我们的local storage

20:11.410 --> 20:12.410
是在的

20:12.410 --> 20:13.410
我们local storage

20:13.410 --> 20:14.410
是在的

20:14.410 --> 20:15.410
所以说他能够得到

20:15.410 --> 20:16.410
得到这个结果

20:16.410 --> 20:17.410
OK

20:17.410 --> 20:18.410
那么我们来看一下

20:21.740 --> 20:22.740
这里

20:22.740 --> 20:23.740
刷新

20:23.740 --> 20:24.740
这里边

20:24.740 --> 20:25.740
我们来看一下

20:25.740 --> 20:26.740
看一下这个输拿到了

20:26.740 --> 20:27.740
拿到我们服务器响应的结果

20:27.740 --> 20:28.740
然后我们看一下这个请求

20:28.740 --> 20:29.740
供外卖

20:29.740 --> 20:30.740
请求的时候

20:30.740 --> 20:31.740
我在请求头里边

20:31.740 --> 20:32.740
我就把这个

20:32.740 --> 20:33.740
australization

20:33.740 --> 20:34.740
你看请求头

20:34.740 --> 20:35.740
我就把australization带过去了

20:35.740 --> 20:36.740
那么服务器

20:36.740 --> 20:37.740
以解析这个australization

20:37.740 --> 20:38.740
发现是正确的

20:38.740 --> 20:39.740
没问题

20:39.740 --> 20:40.740
当然这个australization

20:40.740 --> 20:41.740
你是不能篡改的

20:41.740 --> 20:42.740
你篡改了服务器

20:42.740 --> 20:43.740
它就无法给力结果了

20:43.740 --> 20:44.740
也就是服务器

20:44.740 --> 20:45.740
它也有可能会给力

20:45.740 --> 20:46.740
也就是这里

20:46.740 --> 20:47.740
服务器

20:47.740 --> 20:48.740
它也有可能会给力一个

20:48.740 --> 20:49.740
就是

20:49.740 --> 20:50.740
没有这个用户

20:50.740 --> 20:51.740
这么一种响应

20:51.740 --> 20:52.740
就是服务器

20:52.740 --> 20:53.740
可能会给力一个null

20:53.740 --> 20:54.740
也就是说服务器

20:54.740 --> 20:55.740
它这边响应的结果

20:55.740 --> 20:56.740
可能是扣等于0

20:56.740 --> 20:58.740
mesc等于空置不出来

20:58.740 --> 20:59.740
然后data等于null

20:59.740 --> 21:00.740
它也有可能

21:00.740 --> 21:01.740
会出现这种情况

21:01.740 --> 21:02.740
比方说

21:02.740 --> 21:04.740
我们就自己随便给它一个token

21:04.740 --> 21:05.740
自己随便给它一个token

21:05.740 --> 21:06.740
你看一下

21:07.740 --> 21:08.740
刷新

21:09.740 --> 21:10.740
这样子不行

21:10.740 --> 21:11.740
这样子服务器

21:11.740 --> 21:12.740
那边爆错了

21:12.740 --> 21:13.740
服务器那边

21:13.740 --> 21:15.740
没有这个错误处理

21:15.740 --> 21:16.740
没有这个错误处理

21:16.740 --> 21:17.740
总之这里

21:17.740 --> 21:18.740
如果说服务器解析不出来

21:18.740 --> 21:19.740
解析不出来

21:19.740 --> 21:20.740
解析不出来

21:20.740 --> 21:21.740
它可能会给力一个null

21:21.740 --> 21:22.740
可能会给力一个null

21:23.740 --> 21:24.740
所以说这一边

21:24.740 --> 21:26.740
如果说我们要玩这么的代码

21:26.740 --> 21:27.740
做好的话

21:27.740 --> 21:28.740
我们这里还要判断一下

21:28.740 --> 21:29.740
服务器的响应结果

21:29.740 --> 21:31.740
响应结果里边

21:31.740 --> 21:33.740
有没有那个token

21:34.740 --> 21:35.740
有没有这个data

21:36.740 --> 21:37.740
这是服务器的响应结果

21:37.740 --> 21:38.740
对吧

21:38.740 --> 21:39.740
就响应的body

21:39.740 --> 21:40.740
那么在body里边

21:40.740 --> 21:41.740
有没有这个data

21:41.740 --> 21:42.740
如果说有的话

21:42.740 --> 21:43.740
如果说没有的话

21:43.740 --> 21:44.740
没有的话

21:44.740 --> 21:45.740
是不是我们那个认证失败

21:45.740 --> 21:47.740
比方说服务器过期了

21:47.740 --> 21:48.740
虽然说我那边服务器

21:48.740 --> 21:49.740
为了非常简单

21:49.740 --> 21:50.740
就是做测试的

21:50.740 --> 21:51.740
所以说没有去测试

21:51.740 --> 21:52.740
什么过期时间

21:52.740 --> 21:53.740
但是实际上是有可能

21:53.740 --> 21:54.740
会过期的

21:54.740 --> 21:55.740
因为一个token不能存在太久

21:55.740 --> 21:57.740
如果说服务器过期了

21:57.740 --> 21:58.740
过期了怎么办呢

21:58.740 --> 22:00.740
过期了它就会给力一个null

22:00.740 --> 22:01.740
这个地方会给力一个null

22:01.740 --> 22:02.740
如果说你没有这个data的话

22:02.740 --> 22:03.740
我怎么办

22:03.740 --> 22:04.740
那么说明你个token

22:04.740 --> 22:05.740
已经不能用了

22:05.740 --> 22:06.740
已经不能用了

22:06.740 --> 22:08.740
那么我这里就把这个

22:08.740 --> 22:09.740
用来云木一丝

22:09.740 --> 22:10.740
这个token已经不能用了

22:10.740 --> 22:11.740
就把它移除掉

22:11.740 --> 22:13.740
最后我们还是把它返回

22:13.740 --> 22:14.740
那么返回的结果里面

22:14.740 --> 22:15.740
这个data

22:15.740 --> 22:17.740
这里面的data有可能是null

22:17.740 --> 22:19.740
这个就是一个whomi

22:19.740 --> 22:21.740
这个函数

22:21.740 --> 22:23.740
那么这里就是locking whomi

22:23.740 --> 22:24.740
还有一个什么呢

22:24.740 --> 22:25.740
还有一个就是

22:26.740 --> 22:27.740
还有一个就是注销

22:27.740 --> 22:29.740
注销其实特别简单

22:30.740 --> 22:32.740
注销其实特别简单

22:32.740 --> 22:33.740
放个信

22:33.740 --> 22:34.740
locking out

22:34.740 --> 22:35.740
注销我们这句非常简单的

22:35.740 --> 22:36.740
处理一下

22:36.740 --> 22:39.740
就是local storage

22:39.740 --> 22:41.740
remove item

22:41.740 --> 22:42.740
remove item

22:42.740 --> 22:43.740
什么呢

22:43.740 --> 22:44.740
token

22:44.740 --> 22:45.740
把它移除掉

22:45.740 --> 22:46.740
从local storage里面移除掉

22:46.740 --> 22:48.740
它都不需要async

22:48.740 --> 22:49.740
那么这里咱们

22:49.740 --> 22:50.740
三个方法就写好了

22:50.740 --> 22:51.740
好 写好之后

22:51.740 --> 22:52.740
我们看一下服务器

22:52.740 --> 22:53.740
因为这些函数是要

22:53.740 --> 22:54.740
服务器运行的

22:54.740 --> 22:55.740
服务器到处来爆出

22:55.740 --> 22:56.740
为什么呢

22:56.740 --> 22:57.740
因为服务器

22:57.740 --> 22:59.740
它是根本就没有这个local storage的

22:59.740 --> 23:01.740
根本就没有这个local storage的

23:01.740 --> 23:02.740
你还记得是吧

23:02.740 --> 23:04.740
所以说服务器怎么办呢

23:04.740 --> 23:05.740
我们这里的local storage

23:05.740 --> 23:07.740
我们这里要控制一下

23:07.740 --> 23:09.740
一个是我们把它设置成

23:09.740 --> 23:10.740
三个函数

23:10.740 --> 23:11.740
sets item

23:12.740 --> 23:13.740
一个key value

23:13.740 --> 23:14.740
key value

23:16.740 --> 23:17.740
我们到时候

23:17.740 --> 23:19.740
设置local storage的时候

23:19.740 --> 23:21.740
我们调用sets item去设置

23:22.740 --> 23:24.740
然后remove item

23:25.740 --> 23:27.740
remove item

23:28.740 --> 23:29.740
key

23:29.740 --> 23:33.820
我们去调用remove item来设置

23:33.820 --> 23:35.820
然后还get item

23:35.820 --> 23:36.820
调用这个三个方法

23:36.820 --> 23:37.820
因为我们要判断一下

23:37.820 --> 23:39.820
是不是服务器断

23:39.820 --> 23:41.820
get item key

23:41.820 --> 23:43.820
local storage去掉

23:43.820 --> 23:45.820
我们找一张local storage

23:45.820 --> 23:46.820
就这两个了

23:46.820 --> 23:47.820
去掉

23:47.820 --> 23:49.820
我们要考虑服务器断

23:49.820 --> 23:51.820
那么现在的服务器断怎么办呢

23:51.820 --> 23:52.820
服务器断是这样子

23:52.820 --> 23:53.820
服务器断的话

23:53.820 --> 23:55.820
我们不是有一种方法可以判断

23:55.820 --> 23:56.820
是不是服务器断

23:56.820 --> 23:57.820
我们写这么一个函数吧

23:57.820 --> 23:58.820
is browser

23:58.820 --> 23:59.820
是不是浏览器

24:01.820 --> 24:02.820
return

24:02.820 --> 24:03.820
type

24:04.820 --> 24:06.820
是不是type window

24:07.820 --> 24:09.820
当然我们也可以把它做成一个

24:09.820 --> 24:10.820
做成一个UTO

24:10.820 --> 24:11.820
做成一个工具

24:11.820 --> 24:12.820
来吧

24:12.820 --> 24:13.820
做成一个UTO

24:13.820 --> 24:16.330
这边

24:17.330 --> 24:19.330
导出一个is browser

24:19.330 --> 24:20.330
get

24:20.330 --> 24:21.330
我们这里导出

24:21.330 --> 24:22.330
default

24:22.330 --> 24:23.330
一个函数

24:24.330 --> 24:25.330
就返回到什么了

24:25.330 --> 24:27.330
返回type window

24:27.330 --> 24:28.330
是不是不等于

24:28.330 --> 24:29.330
undefend

24:30.330 --> 24:31.330
是不是不等于undefend

24:31.330 --> 24:32.330
如果说不等于undefend

24:32.330 --> 24:33.330
那么它就是浏览器

24:33.330 --> 24:34.330
对吧

24:34.330 --> 24:35.330
ok

24:35.330 --> 24:36.330
那么这里呢

24:36.330 --> 24:37.330
is browser

24:37.330 --> 24:38.330
我们这里导入

24:38.330 --> 24:39.330
import

24:40.330 --> 24:41.330
is browser

24:42.330 --> 24:45.470
from

24:45.470 --> 24:46.470
UTO

24:47.470 --> 24:50.550
is browser

24:50.550 --> 24:51.550
ok

24:51.550 --> 24:52.550
那么现在

24:52.550 --> 24:53.550
sets item的时候

24:53.550 --> 24:54.550
我们就判断一下

24:54.550 --> 24:56.550
如果说你是一个浏览器的话

24:56.550 --> 24:58.550
我才去做什么local storage

24:58.550 --> 24:59.550
sets item

25:00.550 --> 25:01.550
key value

25:01.550 --> 25:02.550
对吧

25:02.550 --> 25:03.550
我们再做这么一件事

25:03.550 --> 25:04.550
如果说

25:04.550 --> 25:05.550
这里下面也是一样

25:06.550 --> 25:07.550
如果说你是浏览器的话

25:07.550 --> 25:08.550
我们才移除

25:08.550 --> 25:09.550
remove item

25:11.550 --> 25:13.550
remove item

25:13.550 --> 25:14.550
key

25:14.550 --> 25:15.550
key

25:15.550 --> 25:16.550
传进去

25:16.550 --> 25:18.550
如果说你是浏览器的话

25:18.550 --> 25:20.550
我们才去调local storage

25:20.550 --> 25:22.550
服务器我现在没法调用

25:22.550 --> 25:23.550
没法调用

25:23.550 --> 25:27.180
那么这边get item

25:27.180 --> 25:28.180
key

25:28.180 --> 25:29.180
没问题吧

25:29.180 --> 25:30.180
好

25:30.180 --> 25:31.180
这里我们就把它

25:31.180 --> 25:32.180
服务器端的错误

25:32.180 --> 25:33.180
给它解决了

25:33.180 --> 25:34.180
服务器端不会再爆错了

25:34.180 --> 25:35.180
我们再刷新一次

25:35.180 --> 25:36.180
刷新

25:36.180 --> 25:37.180
你看

25:37.180 --> 25:38.180
服务器端能够达到结果

25:38.180 --> 25:39.180
但是它没法存处

25:39.180 --> 25:40.180
对吧

25:40.180 --> 25:41.180
没法存处

25:41.180 --> 25:42.180
服务器端

25:42.180 --> 25:44.180
这是local storage

25:44.180 --> 25:45.180
这里呢

25:45.180 --> 25:46.180
得到low了

25:46.180 --> 25:47.180
看一下

25:48.180 --> 25:49.180
那个storage token

25:49.180 --> 25:50.180
怎么是low呢

25:51.180 --> 25:52.180
我这里看一下

25:52.180 --> 25:54.180
这里使用的是who am I

25:54.180 --> 25:55.180
对吧

25:55.180 --> 25:56.180
使用的是who am I

25:56.180 --> 25:57.180
那么这个data应该怎么

25:57.180 --> 25:58.180
怎么会是low呢

25:58.180 --> 26:00.180
我看一下

26:01.180 --> 26:03.180
这边noggin service

26:04.180 --> 26:05.180
who am I

26:05.180 --> 26:06.180
get item

26:06.180 --> 26:08.180
那么服务器这边是肯定拿不到的

26:08.180 --> 26:09.180
对吧

26:09.180 --> 26:10.180
服务器拿到的肯定是undefend的

26:10.180 --> 26:11.180
那么服务器是undefend的

26:11.180 --> 26:12.180
我们这里输出一下

26:12.180 --> 26:13.180
输出一下token

26:15.750 --> 26:16.750
刷新

26:16.750 --> 26:17.750
客户端也是undefend的

26:17.750 --> 26:19.750
那说明我们这里判断有问题

26:19.750 --> 26:20.750
判断有问题

26:20.750 --> 26:22.750
type of window

26:22.750 --> 26:24.750
不等于undefend

26:24.750 --> 26:26.750
那么ease browser

26:26.750 --> 26:27.750
就为

26:27.750 --> 26:28.750
我看一下

26:28.750 --> 26:30.750
ease browser

26:31.750 --> 26:32.750
我们这里输出一下

26:32.750 --> 26:34.750
输出一下ease browser

26:36.750 --> 26:37.750
这里判断

26:38.750 --> 26:39.750
这是浏览器

26:39.750 --> 26:40.750
对吧

26:40.750 --> 26:41.750
然后服务端获取

26:41.750 --> 26:42.750
服务端获取是force

26:42.750 --> 26:43.750
不是浏览器

26:43.750 --> 26:44.750
好

26:44.750 --> 26:45.750
是浏览器的话

26:45.750 --> 26:46.750
我们这里用什么

26:46.750 --> 26:47.750
用get item

26:47.750 --> 26:48.750
get item

26:48.750 --> 26:50.750
没问题的

26:50.750 --> 26:53.750
那这里为什么会得到undefend的呢

26:53.750 --> 26:54.750
我来这里看一下

26:54.750 --> 26:55.750
这里ease browser

26:55.750 --> 26:57.750
肯定是为trude

26:57.750 --> 26:58.750
浏览器端肯定是为trude

26:58.750 --> 26:59.750
那么local storage

26:59.750 --> 27:00.750
get item

27:00.750 --> 27:01.750
我们把key输出一下

27:01.750 --> 27:05.150
key

27:05.150 --> 27:06.150
token

27:06.150 --> 27:07.150
没问题的

27:07.150 --> 27:08.150
没问题的

27:08.150 --> 27:10.150
然后服务器那边是不会输出的

27:11.150 --> 27:12.150
那么

27:12.150 --> 27:14.150
这里我用local storage

27:14.150 --> 27:15.150
get item token

27:15.150 --> 27:16.150
为什么拿不到

27:16.150 --> 27:17.150
现在有这么一个问题

27:17.150 --> 27:19.720
为什么拿不到

27:19.720 --> 27:20.720
我没返回是吧

27:20.720 --> 27:21.720
哎

27:21.720 --> 27:23.720
没返回

27:23.720 --> 27:24.720
那么remove item

27:24.720 --> 27:25.720
这些不要返回

27:25.720 --> 27:26.720
不需要返回

27:26.720 --> 27:27.720
ok 现在我们再看

27:29.720 --> 27:30.720
那么服务器端

27:30.720 --> 27:31.720
你看

27:31.720 --> 27:32.720
科普端是不是拿到数据了

27:32.720 --> 27:33.720
对吧

27:33.720 --> 27:34.720
但是服务器端那是拿不到的

27:34.720 --> 27:35.720
拿不到的

27:35.720 --> 27:36.720
服务器端因为它没有存

27:36.720 --> 27:37.720
所以拿不到的

27:37.720 --> 27:38.720
ok

27:38.720 --> 27:39.720
那么这里我们搞定了

27:39.720 --> 27:41.720
整个我们的local storage

27:41.720 --> 27:42.720
就把它搞定了

27:42.720 --> 27:44.720
把你console取掉

27:45.720 --> 27:46.720
local storage搞定了

27:46.720 --> 27:47.720
现在我们能登录

27:47.720 --> 27:49.720
也能够获取到目前的

27:49.720 --> 27:50.720
一些登录信息

27:50.720 --> 27:52.720
也能够服务器那边也不会爆错

27:52.720 --> 27:54.720
我们把它做成这么一种结构

27:54.720 --> 27:55.720
先把这些接口

27:55.720 --> 27:56.720
这些东西先准备好

27:56.720 --> 27:57.720
准备好了之后

27:57.720 --> 27:59.720
我们再来考虑后续的过程

27:59.720 --> 28:00.720
好吧

28:00.720 --> 28:01.720
大家下去了过后

28:01.720 --> 28:03.720
把这个页面夹一下

28:03.720 --> 28:04.720
把导航栏里面夹个local

28:04.720 --> 28:06.720
然后再把这些接口准备好

