WEBVTT

00:00.370 --> 00:03.810
好 咱们来看一下那个下一个问题

00:03.810 --> 00:05.370
就Get Static Passage

00:05.370 --> 00:07.210
那么这个是来解决什么问题呢

00:07.210 --> 00:09.490
解决动态路由的问题

00:09.490 --> 00:11.010
它的运行时间也是一样

00:11.010 --> 00:14.010
在这种组建宣展之前会运行

00:14.010 --> 00:16.330
那么它是解决动态路由的问题

00:16.330 --> 00:18.250
动态路由

00:18.250 --> 00:22.910
动态路由

00:22.910 --> 00:23.990
好 比方说吧

00:23.990 --> 00:27.190
我们这里有个电影详情页

00:27.190 --> 00:29.310
ID

00:29.310 --> 00:31.630
我们详情页一般都是通过那个

00:31.630 --> 00:33.830
就是那个列表页挑转过来的

00:33.830 --> 00:34.430
对吧

00:35.430 --> 00:37.870
好 比方说咱们这里的列表页

00:37.870 --> 00:39.430
我们这里的该加一个A元数

00:39.430 --> 00:40.590
我们不用link

00:40.590 --> 00:42.310
因为A元数可以导致刷新

00:42.310 --> 00:43.750
可以导致它刷新

00:43.750 --> 00:45.150
那么我经常拿它刷新

00:45.150 --> 00:46.750
刷新的我们可以看得很清楚

00:46.750 --> 00:48.670
用link的话是无刷新跳转

00:48.670 --> 00:49.110
对吧

00:49.110 --> 00:50.590
我们这里的先用这个A元数

00:50.590 --> 00:52.710
我们再把最后的把它改造成link

00:52.710 --> 00:54.510
比方说我们这里跳转到哪呢

00:54.510 --> 00:55.510
跳转到这

00:55.510 --> 00:58.270
movice后边给它一个ID

00:58.270 --> 01:00.190
ID我们就写上

01:00.270 --> 01:01.190
m.id

01:03.750 --> 01:04.910
写上这个东西

01:04.910 --> 01:05.710
那么接下来

01:05.710 --> 01:07.310
我们就会跳转到电影详情页

01:07.310 --> 01:07.870
对吧

01:07.870 --> 01:09.910
那么电影详情页就问起来了

01:09.910 --> 01:12.150
我这里要做服务端宣展

01:12.150 --> 01:12.990
要做静态化

01:12.990 --> 01:14.230
我们要做静态化

01:14.230 --> 01:16.190
那问题是每一个电影是不一样的

01:16.190 --> 01:16.430
对吧

01:16.430 --> 01:17.470
它这个里面

01:17.470 --> 01:19.950
它这个主件要渲染不同的电影

01:19.950 --> 01:21.630
每个电影都有详情页

01:21.630 --> 01:22.910
那问题是我这里给它数据

01:22.910 --> 01:23.710
该怎么给呢

01:23.710 --> 01:24.630
问题是比方说吧

01:24.630 --> 01:26.190
我们这里先随便写一点

01:26.190 --> 01:28.070
写点类似的

01:28.150 --> 01:29.510
电影详情页

01:29.510 --> 01:30.790
首先显示电影名称

01:30.790 --> 01:32.030
你肯定要给我个电影

01:32.030 --> 01:33.430
那是毫无疑问的

01:33.430 --> 01:34.030
movice

01:34.030 --> 01:34.990
要给我个电影

01:34.990 --> 01:37.310
那么我们这里来显示电影的名称

01:37.310 --> 01:38.310
然后呢

01:38.310 --> 01:39.750
还有什么电影的英文名

01:39.750 --> 01:40.990
英文名

01:40.990 --> 01:42.910
我们就显示这两个就够了吧

01:42.910 --> 01:43.630
movice

01:43.630 --> 01:44.390
第二

01:44.390 --> 01:45.190
iname

01:45.190 --> 01:46.790
我们的数据里面其实很多的

01:46.790 --> 01:48.430
到时候我们请求这个结果

01:48.430 --> 01:49.790
我给大家看一下

01:49.790 --> 01:51.630
我们到时候请求这个结果

01:52.150 --> 01:53.710
localhost

01:53.710 --> 01:55.790
然后movice

01:56.790 --> 01:58.070
movice

01:58.070 --> 01:59.070
API

01:59.070 --> 02:00.270
不不不不

02:01.270 --> 02:02.270
这个

02:02.270 --> 02:05.870
5005

02:05.870 --> 02:07.390
然后

02:07.390 --> 02:08.950
API

02:08.950 --> 02:10.190
然后

02:10.190 --> 02:11.230
这里是movice

02:11.230 --> 02:12.510
然后后面跟电影ID

02:12.510 --> 02:14.310
后面跟电影的ID来显示

02:14.310 --> 02:15.510
然后这个地方

02:15.510 --> 02:16.230
它没有这个ID

02:16.230 --> 02:17.470
它查不到

02:17.470 --> 02:19.670
那么现在我们这里

02:19.670 --> 02:20.750
应该是

02:20.750 --> 02:22.390
把ID给它

02:22.390 --> 02:23.310
ID给过来

02:23.310 --> 02:24.750
然后我得到电影

02:24.750 --> 02:25.430
然后来选择

02:25.430 --> 02:25.910
对吧

02:25.950 --> 02:27.590
那么现在我们要做服务端渲染

02:27.590 --> 02:28.750
做服务端静态的话

02:28.750 --> 02:30.030
我们肯定要写这个东西

02:30.030 --> 02:30.910
毫无疑问的

02:30.910 --> 02:31.430
export

02:31.430 --> 02:32.550
我们上一课学的东西

02:32.550 --> 02:33.230
方可信

02:33.230 --> 02:34.950
getStatic

02:34.950 --> 02:35.470
probs

02:35.470 --> 02:36.350
这个东西肯定要写

02:36.350 --> 02:36.590
对吧

02:36.590 --> 02:37.510
因为我要给它数据

02:37.510 --> 02:38.990
我把数据给它

02:38.990 --> 02:40.550
那么我们要怎么给它数据呢

02:40.550 --> 02:41.510
现在问题是

02:41.510 --> 02:43.150
我怎么去获取电影

02:43.150 --> 02:44.430
那么我们这里先写一下吧

02:44.430 --> 02:46.630
我们在movice里面再加一个

02:46.630 --> 02:48.110
加一个service

02:48.110 --> 02:49.950
叫做getmov

02:49.950 --> 02:51.750
他给我一个电影ID就行了

02:51.750 --> 02:52.790
那么这个ID放哪呢

02:52.790 --> 02:53.790
放这

02:53.790 --> 02:54.910
apmv

02:54.990 --> 02:56.350
后边跟上一个ID

02:56.350 --> 02:58.150
后边就不需要什么这些东西了

02:58.150 --> 02:59.150
ok

02:59.150 --> 03:00.750
我先写上这个

03:00.750 --> 03:02.310
那么这个东西肯定要在服务端运行

03:02.310 --> 03:02.510
对吧

03:02.510 --> 03:03.550
服务端也会运行

03:03.550 --> 03:05.230
课不断的它也会运行

03:06.230 --> 03:07.950
那么现在我们在服务端渲染的时候

03:09.830 --> 03:11.310
这个地方是不是要调用这个函数

03:12.430 --> 03:13.230
import

03:13.230 --> 03:14.230
倒进来

03:14.230 --> 03:16.190
from

03:16.190 --> 03:17.470
service

03:17.470 --> 03:18.270
movice

03:18.270 --> 03:21.070
然后这里写上getmov

03:21.070 --> 03:23.070
我们这里要写上

03:23.070 --> 03:23.950
await

03:23.990 --> 03:25.070
等待getmov

03:25.070 --> 03:26.150
要把ID传进去

03:26.150 --> 03:27.310
ID我写啥

03:27.310 --> 03:27.870
问题是

03:29.150 --> 03:29.910
问题是写啥

03:31.110 --> 03:32.150
await

03:32.150 --> 03:32.470
没有

03:32.470 --> 03:33.990
就是来自于

03:34.750 --> 03:35.630
return

03:35.630 --> 03:36.910
probs

03:36.910 --> 03:37.550
mov

03:37.550 --> 03:38.470
不少给他这个属性

03:38.790 --> 03:39.790
来自于Respect Data

03:40.990 --> 03:42.190
那么我们好好研究一下

03:43.190 --> 03:44.350
那么这个ID写啥呢

03:44.350 --> 03:45.830
有的人说这个ID不简单吗

03:45.830 --> 03:47.350
我们写着路由

03:47.350 --> 03:49.070
我们这里用路由的

03:49.070 --> 03:49.710
什么呢

03:49.710 --> 03:51.310
路由的ID

03:51.470 --> 03:52.630
路由里边的

03:52.630 --> 03:54.350
就是query.id

03:54.350 --> 03:57.230
但是问题是你现在根本就获取不到query

03:58.110 --> 03:59.390
根本就获取不到

03:59.390 --> 03:59.830
为什么

04:00.710 --> 04:01.710
不要忘了

04:01.710 --> 04:03.630
这个函数是什么时候运行的

04:03.630 --> 04:07.590
是请求的时候运行的吗

04:07.590 --> 04:07.950
不是

04:07.950 --> 04:09.510
它是在勾件的时候运行

04:09.510 --> 04:11.470
勾件的时候有请求吗

04:11.470 --> 04:12.670
你根本就没有浏览器

04:12.670 --> 04:13.990
没有任何人请求你

04:13.990 --> 04:16.110
哪里鬼知道你的ID是啥了

04:16.110 --> 04:18.030
它说根本就获取不到这个query的

04:18.030 --> 04:19.670
这个时间太早了

04:19.670 --> 04:23.550
所以说这个时候你不能确定ID是啥

04:23.550 --> 04:24.670
那怎么办呢

04:24.670 --> 04:27.070
这个时候就需要用到这个了

04:27.070 --> 04:28.150
Static Passage

04:28.150 --> 04:29.750
那么你需要再导出一个函数

04:33.020 --> 04:34.780
它仍然是一个SSG

04:34.780 --> 04:37.380
只要它发现了这个函数或者是这个函数

04:37.380 --> 04:39.300
那么它就会认为它是SSG

04:39.300 --> 04:40.580
当然以写的这个函数

04:40.580 --> 04:42.500
它一定要写这个函数

04:42.500 --> 04:43.660
一定要写这个函数

04:43.660 --> 04:45.380
我们来说一下它怎么来运作的

04:45.380 --> 04:47.260
Gate of Static Passage

04:48.340 --> 04:49.580
这个函数它干嘛的呢

04:49.620 --> 04:51.580
这个函数它是在返回

04:51.580 --> 04:53.580
它要返回这么一种格式

04:53.580 --> 04:56.140
Parrance

04:56.140 --> 04:58.900
Parrance是一个数字

04:58.900 --> 04:59.740
对不对

04:59.740 --> 05:00.660
它是那个叫啥

05:00.660 --> 05:01.420
我一定忘了

05:01.420 --> 05:02.580
我们看一下官网

05:04.460 --> 05:05.580
这是它的新的API

05:05.580 --> 05:07.340
其实我也是第一次看到

05:07.340 --> 05:08.580
我是看那个文档

05:09.700 --> 05:12.300
Gate of Static Passage

05:17.140 --> 05:18.580
OK 它返回这个东西

05:18.620 --> 05:19.540
要返回这个

05:22.720 --> 05:24.760
返回这么一种格式

05:25.760 --> 05:27.000
那么这里我说一下

05:27.920 --> 05:28.800
我们这个Forbike

05:28.800 --> 05:29.800
我们以之后再说

05:29.800 --> 05:31.000
Forbike有用的

05:31.000 --> 05:32.320
之后再说我们把它作为Force

05:34.120 --> 05:35.160
那么牵上这个Parrance

05:35.160 --> 05:36.120
它是一个数组

05:36.120 --> 05:38.080
就是说这个函数在干嘛的呢

05:38.080 --> 05:38.760
该函数

05:39.960 --> 05:46.560
该函数用于得到有哪些可能出现的

05:48.720 --> 05:50.440
动态

05:50.840 --> 05:52.200
就是出现的Parrance

05:53.200 --> 05:54.040
这Parrance什么意思

05:54.040 --> 05:55.080
就是这个ID

05:55.080 --> 05:55.920
因为我们这里是ID

05:55.920 --> 05:57.680
那么这里就相当于是哪些可能

05:57.680 --> 05:58.560
会出现的ID

05:59.160 --> 05:59.960
就这么个意思

06:01.080 --> 06:01.960
也就是这个函数

06:01.960 --> 06:02.760
它会先运行

06:02.760 --> 06:03.560
在构建的时候

06:03.560 --> 06:04.480
会先运行这个函数

06:04.480 --> 06:05.480
它发现有这个函数

06:05.480 --> 06:06.680
它会先运行这个函数

06:06.680 --> 06:08.920
来得到有哪些可能的ID

06:08.920 --> 06:10.400
然后针对每一个ID

06:10.400 --> 06:11.800
在运行这个函数

06:11.800 --> 06:12.560
你要这意思吧

06:12.560 --> 06:13.960
它是这么来处理的

06:13.960 --> 06:14.880
所以说这里

06:14.880 --> 06:16.200
这个Parsage里面怎么显呢

06:16.200 --> 06:17.000
它是个数组

06:17.000 --> 06:17.680
每个数组里面

06:17.680 --> 06:19.040
每一个是个对象

06:19.040 --> 06:20.440
对象里面只有一个出现

06:21.320 --> 06:22.040
Parrance里面

06:22.040 --> 06:22.960
就各种Parrance

06:22.960 --> 06:24.280
因为我们这里只有一个ID

06:24.280 --> 06:24.640
对吧

06:24.640 --> 06:26.000
就是你把ID传过去

06:26.000 --> 06:28.000
那如果说你这里写到什么

06:28.000 --> 06:28.920
ABC

06:28.920 --> 06:29.600
各种东西

06:29.600 --> 06:30.600
那你依次传

06:30.600 --> 06:31.520
依次传

06:31.520 --> 06:32.760
是这么一个意思

06:32.760 --> 06:34.800
那么这里我们ID传过去

06:34.800 --> 06:36.360
传过去ID是什么呢

06:36.360 --> 06:37.200
那么有哪些ID

06:37.200 --> 06:38.520
我们就可以用这种方式

06:38.520 --> 06:39.840
它不是有很多电影吗

06:39.840 --> 06:40.160
对吧

06:40.160 --> 06:40.920
GateMovies

06:40.920 --> 06:41.680
那么我们这里

06:41.680 --> 06:42.680
它也是个一步函数

06:42.680 --> 06:44.600
所以说我们这里可以用Width

06:44.600 --> 06:45.800
GateMovies

06:45.800 --> 06:47.280
我就把第一页的电影

06:47.280 --> 06:48.880
第一页的所有ID达到

06:49.880 --> 06:51.880
MovieRispect

06:52.880 --> 06:53.840
那么Rispect

06:53.840 --> 06:54.880
Data是不是所有电影

06:54.880 --> 06:55.960
把一个电影输入

06:55.960 --> 06:57.040
那么我们通过Map

06:57.040 --> 06:58.080
是不是可以拿到它所谓的

06:58.080 --> 06:59.040
电影的ID

06:59.040 --> 07:00.960
我们把每一个电影

07:00.960 --> 07:02.200
是不是生成一个这个东西

07:02.200 --> 07:03.800
一个电影生成一个这个东西

07:03.800 --> 07:05.560
那么我们来生成一下

07:05.560 --> 07:07.800
每一个电影就生成一个对象

07:07.800 --> 07:10.640
这个对象里面有一个Parrance

07:10.640 --> 07:12.240
ID为什么呢

07:12.240 --> 07:13.640
ID就等于M.ID

07:13.640 --> 07:17.240
ID就等于M.ID

07:17.240 --> 07:18.280
就这么个意思

07:18.400 --> 07:19.000
那么这样子

07:19.000 --> 07:20.480
硬设是不是拿到一个数组

07:20.480 --> 07:21.880
拿到一个Passes数组

07:21.880 --> 07:23.000
Passes数组

07:23.000 --> 07:25.320
我们把Passes数组放在这里玩一圈

07:25.320 --> 07:25.760
对吧

07:25.760 --> 07:27.920
这Passes数组里面就是有很多Parrance

07:27.920 --> 07:28.040
好

07:28.040 --> 07:29.640
我们这里把输出一下吧

07:29.640 --> 07:30.560
输出一下

07:30.560 --> 07:32.800
Passes输出一下

07:34.440 --> 07:37.040
表示我们这里运行到StaticPasses

07:37.040 --> 07:37.880
运行到这个方法

07:37.880 --> 07:38.680
我们再写到前面

07:40.160 --> 07:41.280
把这个方法写到前面

07:41.280 --> 07:43.880
表示运行到这个方法

07:43.880 --> 07:46.600
然后把Passes就加进去了

07:46.600 --> 07:47.480
对吧

07:47.560 --> 07:48.560
就把输出了

07:48.560 --> 07:49.920
那么这个还说会运行

07:49.920 --> 07:50.840
运行完了过后

07:52.280 --> 07:53.880
它会把这个东西

07:53.880 --> 07:54.800
我们先看一下吧

07:54.800 --> 07:55.520
先看一下

07:55.520 --> 07:56.520
我们先把这个东西去掉

07:58.560 --> 07:59.920
这里放回一个空的

07:59.920 --> 08:01.120
放回一个空的

08:01.120 --> 08:02.120
Vis

08:02.120 --> 08:03.080
Vis

08:03.080 --> 08:04.160
随便写一个

08:06.160 --> 08:07.640
这个就是

08:07.640 --> 08:09.480
这个什么呢

08:09.480 --> 08:10.920
还有一个ename

08:10.920 --> 08:12.360
我先随便写一个

08:12.360 --> 08:15.680
我们这里输出一个StaticProps

08:15.680 --> 08:17.440
我们来看一下运行过程是什么样子

08:18.120 --> 08:21.180
接下来我们打包

08:21.940 --> 08:23.180
Rombute

08:23.180 --> 08:24.180
你看一下

08:24.180 --> 08:25.700
它在我们打包的时候

08:25.700 --> 08:27.900
如果说它发现了这个函数

08:27.900 --> 08:29.940
那么它会先运行这个函数

08:29.940 --> 08:30.780
那干嘛呢

08:30.780 --> 08:32.260
来得到所有的

08:32.260 --> 08:34.060
有可能会出现的动态路由

08:35.860 --> 08:36.380
稍等一下

08:37.380 --> 08:39.180
你看是不是先运行这个函数

08:39.180 --> 08:39.900
看一下

08:39.900 --> 08:40.700
先运行这个函数

08:40.700 --> 08:41.940
它会得到所有的东西

08:41.940 --> 08:42.660
对吧

08:42.660 --> 08:43.460
这个函数里边

08:43.460 --> 08:45.300
我们拿到了什么所有的Passes

08:45.300 --> 08:45.580
对吧

08:45.580 --> 08:46.580
然后我们把构建出来

08:46.580 --> 08:48.020
构建成这个样子

08:48.020 --> 08:48.620
好

08:48.620 --> 08:49.460
然后过后呢

08:49.460 --> 08:51.180
我们它再去运行什么呢

08:51.180 --> 08:52.940
再去运行这个StaticProps

08:52.940 --> 08:54.220
那为什么运行的两

08:54.220 --> 08:55.420
为什么这里呢

08:55.420 --> 08:57.060
运行的这么多次呢

08:57.060 --> 08:58.020
是因为这样子

08:58.020 --> 08:59.420
它们针对每一个ID

08:59.420 --> 08:59.820
你看啊

08:59.820 --> 09:01.780
这里针对每一个ID

09:01.780 --> 09:03.100
针对每一个排练式

09:03.100 --> 09:04.900
那么它都会运行一次这个函数

09:04.900 --> 09:06.940
让每一次它生成一个

09:06.940 --> 09:07.780
生成一个数据

09:07.780 --> 09:09.100
每一次生成一个数据

09:09.100 --> 09:10.820
然后对每一次生成的数据

09:10.820 --> 09:11.940
再去进行渲染

09:11.940 --> 09:13.900
然后再把渲染成静态页面

09:13.900 --> 09:15.180
那么我们来看一下那个是里边

09:15.500 --> 09:19.780
你看我们的静态页面啊

09:19.780 --> 09:20.940
Movies

09:20.940 --> 09:22.860
是不是有很多啊

09:22.860 --> 09:23.660
对吧

09:23.660 --> 09:25.100
是不是真的很多的静态页面

09:25.100 --> 09:25.580
对吧

09:25.580 --> 09:27.260
它会针对每一个动态度

09:27.260 --> 09:28.380
有生成一个静态页面

09:28.380 --> 09:30.100
是它的这种静态方式

09:30.100 --> 09:32.220
对针对动态度有的静态方式

09:32.220 --> 09:33.020
那么这里呢

09:33.020 --> 09:33.500
关键是

09:33.500 --> 09:34.380
那么也就是说

09:34.380 --> 09:36.140
针对每一个Passes

09:36.140 --> 09:36.700
Passes

09:36.700 --> 09:37.900
针对每一个这个东西

09:37.900 --> 09:38.940
那么它会怎么样呢

09:38.940 --> 09:40.060
它会运行一次这个

09:40.060 --> 09:41.500
那么这里边是不是每一次

09:41.500 --> 09:43.420
可以拿到它其中一次的ID

09:43.420 --> 09:43.900
对吧

09:44.060 --> 09:45.500
可以拿到它其中一次的ID

09:45.500 --> 09:46.780
那么这里怎么拿呢

09:46.780 --> 09:48.460
它这个它传了一个对象进来

09:48.460 --> 09:49.500
对象里边有个属性

09:49.500 --> 09:49.980
叫Pirons

09:49.980 --> 09:51.100
怎么可以解构

09:51.100 --> 09:53.180
那么这个解Pirons里边是不是一个ID

09:53.180 --> 09:53.900
对吧

09:53.900 --> 09:54.220
所以说呢

09:54.220 --> 09:55.580
我们这里怎么写

09:55.580 --> 09:56.540
啊

09:56.540 --> 09:57.500
是不是在这里

09:57.500 --> 09:59.340
Pirons

09:59.340 --> 10:00.700
叫ID是不是可以拿到了

10:00.700 --> 10:00.940
对吧

10:00.940 --> 10:01.180
这边

10:01.180 --> 10:03.180
因为这边给我传过来了

10:03.180 --> 10:03.660
好

10:03.660 --> 10:05.100
那针对每一个ID

10:05.100 --> 10:06.460
我们是不是可以拿到一个电影

10:06.460 --> 10:06.620
好

10:06.620 --> 10:08.060
然后每一个电影的数据

10:08.060 --> 10:08.860
是不是可以拿到

10:08.860 --> 10:10.300
我们直接返回就完事了

10:10.300 --> 10:11.580
那么针对每一个电影的

10:11.580 --> 10:12.620
这边来进行渲染

10:12.620 --> 10:13.980
那是不是可以渲染出来了

10:13.980 --> 10:14.220
好

10:14.220 --> 10:15.180
咱们来看一下吧

10:15.180 --> 10:16.140
好来看一下

10:17.020 --> 10:17.180
好

10:17.180 --> 10:18.780
既然我们在那运行啊

10:18.780 --> 10:19.100
这里呢

10:19.100 --> 10:19.820
我就简单一点

10:19.820 --> 10:20.700
把这个地方

10:20.700 --> 10:21.660
写成这个

10:21.660 --> 10:22.220
这个地方呢

10:22.220 --> 10:25.320
写成这个

10:25.320 --> 10:25.800
这个地方

10:25.800 --> 10:27.800
我们再写个Render

10:27.800 --> 10:28.200
Render

10:29.080 --> 10:29.400
好

10:29.400 --> 10:30.040
我们再来打包

10:31.240 --> 10:31.560
你看啊

10:31.560 --> 10:32.360
这个MoviesID

10:32.360 --> 10:33.720
它仍然是一个SG

10:33.720 --> 10:35.000
而且它生成了很多的页面

10:35.000 --> 10:35.800
它说还有七个

10:35.800 --> 10:36.040
对吧

10:36.040 --> 10:36.680
它显示不完了

10:38.440 --> 10:40.440
那么这里NPM装必有的

10:41.480 --> 10:42.440
它做静态化的目的

10:42.440 --> 10:44.280
就是为了提高渲染效率

10:44.280 --> 10:45.800
服装就直接给它扔进它一边了

10:45.800 --> 10:46.520
就非常非常快

10:49.450 --> 10:49.930
打包

10:49.930 --> 10:51.210
因为它这个打包的时间

10:51.210 --> 10:52.090
肯定要比较长一点

10:52.090 --> 10:53.130
因为它生成进它一边了

10:53.130 --> 10:53.610
一边嘛

10:53.610 --> 10:53.770
对吧

10:54.890 --> 10:55.130
OK

10:56.250 --> 10:58.410
你看运行给StandigoPasses

10:58.410 --> 10:59.210
要运行很多次

11:01.050 --> 11:02.010
我就写错了吗

11:02.010 --> 11:02.890
我这里写错了

11:02.890 --> 11:04.490
应该是StandigoProps

11:04.490 --> 11:04.890
写错了

11:07.290 --> 11:08.170
这个是Passes

11:08.170 --> 11:08.970
这个是Props

11:08.970 --> 11:09.290
再来

11:19.740 --> 11:21.820
多次生成Passes

11:21.820 --> 11:23.660
一式生成Passes

11:23.740 --> 11:25.180
把可能出现的ID都挠到

11:25.900 --> 11:28.380
然后再来生成给StandigoProps

11:28.380 --> 11:29.180
再来生成这个

11:30.300 --> 11:30.860
是这么一回事

11:31.660 --> 11:31.980
OK

11:31.980 --> 11:32.380
再来看

11:33.020 --> 11:34.620
StandigoPasses运行一次

11:34.620 --> 11:36.540
然后后面就全部是运行它了

11:36.540 --> 11:36.780
对吧

11:37.500 --> 11:38.220
全部运行它了

11:39.260 --> 11:41.500
那么Render它是一起混合运行的

11:41.500 --> 11:42.460
因为都是一部马铃铺

11:42.460 --> 11:43.660
只要时间对列

11:43.660 --> 11:44.620
它是一起运行的

11:44.620 --> 11:46.380
而且它可能会开启多线程

11:46.380 --> 11:47.420
来处理这个事情

11:48.060 --> 11:49.260
所以说它混合运行的

11:49.260 --> 11:51.500
就是它得到一个StandigoProps

11:51.500 --> 11:52.380
得到数据之后

11:52.380 --> 11:53.500
它就可能会运行运的了

11:54.380 --> 11:54.620
OK

11:55.740 --> 11:55.980
好

11:55.980 --> 11:57.580
那么现在我们来看一下静态页面

12:00.760 --> 12:01.480
到底是哪一个

12:02.360 --> 12:02.840
看一下

12:03.240 --> 12:04.120
静态页面

12:04.120 --> 12:05.160
静态页面里边

12:05.160 --> 12:06.040
你可以看到

12:06.040 --> 12:07.320
我们这里的电影的

12:07.960 --> 12:08.760
英文名

12:08.760 --> 12:09.800
中文名

12:09.800 --> 12:11.320
英文名是不是就都出来了

12:11.320 --> 12:11.560
对吧

12:11.560 --> 12:12.360
每一个页面

12:12.360 --> 12:14.200
不同的ID都出来了

12:14.200 --> 12:15.320
那么到时候我们访问的时候

12:15.320 --> 12:16.600
是访问的是静态页面

12:16.600 --> 12:17.000
对吧

12:17.000 --> 12:18.520
根据不同的ID的访问静态页面

12:18.520 --> 12:19.560
因为我的ID比较长

12:20.600 --> 12:20.680
好

12:20.680 --> 12:21.320
OK

12:21.320 --> 12:22.760
那么现在我们运行出来看一下

12:23.160 --> 12:23.880
MPM Start

12:25.800 --> 12:26.840
好运出来了

12:26.840 --> 12:28.280
那么现在我们来看一下

12:28.280 --> 12:28.840
电影页

12:28.840 --> 12:30.440
我们这里电影页刷新

12:30.440 --> 12:31.640
得到是静态页面

12:31.640 --> 12:33.400
然后这里是什么

12:34.200 --> 12:34.760
A元数

12:34.760 --> 12:34.920
对吧

12:34.920 --> 12:36.360
挑转到电影页

12:36.360 --> 12:37.320
你看挑转到

12:37.320 --> 12:38.440
这就是静态页面

12:38.440 --> 12:39.400
都是静态页面的

12:40.200 --> 12:41.880
你看静态页面的

12:42.840 --> 12:43.400
没问题的

12:44.920 --> 12:45.320
电影

12:45.960 --> 12:46.360
挑转

12:47.080 --> 12:47.880
都是没问题的

12:48.680 --> 12:49.480
好吧

12:49.480 --> 12:51.160
那么这里就动态度

12:51.160 --> 12:52.120
有生存电影ID

12:52.600 --> 12:52.920
好

12:52.920 --> 12:54.120
那就是生存静态页面

12:54.520 --> 12:56.120
然后现在还有个问题没解决

12:57.720 --> 12:58.920
你不能说在这里

12:58.920 --> 13:00.520
能够考虑到所有的

13:01.800 --> 13:03.400
动态的就是路由部分

13:03.400 --> 13:03.800
ID

13:03.800 --> 13:05.640
你不能说所有的电影都能拿得到

13:05.640 --> 13:07.720
比方说电影有100万个

13:07.720 --> 13:09.800
你在这里不可能把所有电影的ID全部拿到

13:09.800 --> 13:10.600
这个太恐怖了

13:10.600 --> 13:11.800
构建时间要立天了

13:12.440 --> 13:13.640
我们的数据非常大

13:14.440 --> 13:15.080
还有一种情况

13:15.080 --> 13:15.400
就是

13:16.280 --> 13:17.480
我们的数据呢

13:17.480 --> 13:18.440
虽然不多

13:18.440 --> 13:18.920
但是呢

13:18.920 --> 13:20.120
它经常会变化

13:20.120 --> 13:20.440
对吧

13:20.440 --> 13:21.640
经常会增加

13:21.640 --> 13:23.000
那么这个时候怎么办呢

13:24.200 --> 13:24.680
两种情况

13:25.480 --> 13:26.600
很多很多的电影

13:26.600 --> 13:28.360
100万个100万条电影

13:28.840 --> 13:30.840
你不能说一把所有的全部拿到

13:30.840 --> 13:32.840
我们只是生存最近的

13:32.840 --> 13:34.760
比较热门的生存一个静态页面

13:34.760 --> 13:36.520
这往往都是这样做的

13:36.520 --> 13:38.360
有一些比较很早的一些电影了

13:38.360 --> 13:39.800
或者是不热门的

13:40.680 --> 13:41.720
关注点没有那么多的

13:41.720 --> 13:42.760
我们就不生存静态页面

13:42.760 --> 13:44.120
因为生存静态页面的目的

13:44.760 --> 13:46.520
是为了提高渲染效率

13:46.520 --> 13:48.760
提高提高就是响应速度

13:48.760 --> 13:49.080
那么

13:49.640 --> 13:50.920
我们只有去最近的东西

13:50.920 --> 13:52.120
才一般还点的比较多

13:52.120 --> 13:52.360
对吧

13:52.440 --> 13:54.120
也很早期的新闻啊电影了

13:54.120 --> 13:55.000
就点了很少

13:55.000 --> 13:56.120
几乎是没人点

13:56.120 --> 13:58.760
那么这个是没有必要去生存静态页面的

13:58.760 --> 13:59.320
对不对

13:59.320 --> 14:00.760
那么这个时候怎么办呢

14:00.760 --> 14:01.320
它是这样子

14:02.040 --> 14:03.000
就要靠这个的

14:03.000 --> 14:03.800
Fourback

14:03.800 --> 14:05.880
Fourback还专门来处理

14:05.880 --> 14:07.080
当没有

14:07.080 --> 14:09.560
没有就是匹配到了静态页面的时候怎么办

14:10.440 --> 14:11.160
就是我们看这个图

14:12.360 --> 14:13.640
它如果说有静态页面

14:13.640 --> 14:15.560
它就直接扔静态页面给力了

14:15.560 --> 14:17.080
它什么都不管了后续

14:17.080 --> 14:19.080
它如果说没有静态页面呢

14:19.080 --> 14:20.600
如果说这个有了这个东西

14:20.600 --> 14:21.480
动态路由

14:21.480 --> 14:22.600
没有静态页面怎么办呢

14:22.600 --> 14:23.720
就靠这个Fourback

14:23.720 --> 14:25.800
当Fourback为Force的时候

14:25.800 --> 14:26.680
我们这里记彼

14:27.800 --> 14:29.320
当Fourback为Force的时候

14:31.000 --> 14:31.560
Fourback

14:32.920 --> 14:34.440
如果说为Force

14:34.440 --> 14:35.080
那么表示

14:36.440 --> 14:37.800
表示什么意思呢

14:37.800 --> 14:38.680
什么都不做

14:38.680 --> 14:39.240
什么都不做

14:41.000 --> 14:42.440
如果没有静态页面

14:43.240 --> 14:44.360
静态页面怎么样了

14:44.360 --> 14:45.240
返回404

14:45.960 --> 14:46.600
返回找不到

14:47.240 --> 14:48.760
尽管你有这个ID都找不到

14:48.760 --> 14:49.960
那么我们怎么来测试呢

14:49.960 --> 14:50.760
我们这样子

14:50.840 --> 14:52.120
这个电影列表页

14:52.120 --> 14:53.800
我给它加20条电影

14:53.800 --> 14:55.160
不是10个电影了

14:55.160 --> 14:56.360
第一页的20条电影

14:58.840 --> 14:59.560
好 咱们来看一下

14:59.560 --> 15:01.160
那么有些电影肯定是

15:01.160 --> 15:02.360
因为这边只加了10条

15:02.920 --> 15:03.960
只生成了10条电影

15:03.960 --> 15:05.080
那么这边有20条

15:05.080 --> 15:06.520
那么有些电影肯定是没有的

15:06.520 --> 15:07.160
好 咱们来看一下

15:09.320 --> 15:10.280
NPM装Beauty

15:23.270 --> 15:23.990
好 运行出来了

15:25.510 --> 15:26.230
NPM Start

15:28.630 --> 15:29.910
好 接下来我们来刷新鲜

15:30.870 --> 15:32.150
那么现在是20条电影了

15:32.310 --> 15:33.190
我们往后边点

15:33.190 --> 15:35.190
比方说这个50怪兽

15:35.190 --> 15:35.590
点一下

15:36.390 --> 15:37.110
是不是404

15:37.590 --> 15:38.310
它找不到

15:38.310 --> 15:40.070
而它看服务端运行没有

15:40.070 --> 15:42.070
运行又重新运行这个没有

15:42.070 --> 15:42.870
都没有运行

15:42.870 --> 15:43.430
都没有运行

15:43.430 --> 15:44.550
它找不到 点不到电影

15:44.550 --> 15:44.950
对吧

15:44.950 --> 15:45.670
这是Forebike

15:45.670 --> 15:46.390
它非常粗暴

15:47.110 --> 15:49.350
知道这个东西不是我们希望看到的

15:49.350 --> 15:50.550
不是我们希望看到的

15:50.550 --> 15:51.830
我们更加希望看到的是

15:52.710 --> 15:54.870
它能够还是能够跟正常给我显示出来

15:54.870 --> 15:56.470
因为我这里毕竟有ID

15:56.470 --> 15:57.430
ID是正确的

15:57.430 --> 15:58.150
那怎么办呢

15:58.150 --> 15:59.190
你要把这个Forebike加上

16:00.070 --> 16:00.230
好

16:00.230 --> 16:01.270
那么现在现在出

16:01.430 --> 16:02.630
它进入了这么一种逻辑

16:03.990 --> 16:04.950
Forebike是什么呢

16:04.950 --> 16:06.790
就表示又重新来一次

16:06.790 --> 16:07.670
重新来一次

16:07.670 --> 16:08.550
你可以简单这么理解

16:09.190 --> 16:11.270
当你把Forebike设为True的时候

16:12.150 --> 16:12.870
这个时候

16:12.870 --> 16:14.070
它会做这么一件事

16:15.510 --> 16:17.990
那么它会给你另外

16:17.990 --> 16:20.070
就是会给你另外一个页面

16:20.070 --> 16:21.430
就当Forebike为True的时候

16:21.430 --> 16:22.710
它就不是给你404的

16:25.430 --> 16:27.110
那么会给你什么页面呢

16:27.110 --> 16:29.270
会给给什么页面呢

16:29.270 --> 16:30.470
会给这个页面

16:30.550 --> 16:32.470
ID.atm

16:32.470 --> 16:34.870
当然你根据你的动态路由来

16:34.870 --> 16:35.910
它会给这个页面

16:35.910 --> 16:37.510
那么有没有这个页面呢

16:37.510 --> 16:38.550
目前是没有的

16:39.270 --> 16:40.230
目前是没有的

16:40.870 --> 16:41.670
你看

16:41.670 --> 16:43.270
目前我们在这个Static里面

16:43.270 --> 16:44.070
你是找不到什么

16:44.870 --> 16:45.430
Movies里面

16:45.430 --> 16:46.710
你只有ID.js

16:46.710 --> 16:47.030
对吧

16:47.030 --> 16:48.390
你没有ID.atm

16:48.390 --> 16:49.190
它没有这个页面

16:49.910 --> 16:51.430
那么这个页面哪来呢

16:51.430 --> 16:53.190
只要你把Forebike设为True

16:53.750 --> 16:55.270
那么它在渲染

16:55.270 --> 16:56.550
它在渲染这个组件的时候

16:56.550 --> 16:58.230
它会额外渲染一个组件

16:58.310 --> 17:01.190
叫做ID.atm

17:01.190 --> 17:02.230
它会额外渲染一次

17:03.510 --> 17:04.630
那么我们来看一下

17:04.630 --> 17:05.430
它怎么来额外

17:05.430 --> 17:07.030
它会不会额外渲染一次

17:10.520 --> 17:11.160
我们这里

17:11.160 --> 17:12.600
把这些东西删除掉

17:12.600 --> 17:13.720
把那个删除掉

17:13.720 --> 17:14.520
然后重新打一次

17:14.520 --> 17:15.160
因为太多了

17:18.140 --> 17:18.540
必有

17:25.030 --> 17:25.830
我们一点点来

17:25.830 --> 17:27.270
这里稍微绕一点

17:27.270 --> 17:28.310
这个Forebike为True的时候

17:28.310 --> 17:28.950
稍微绕一点

17:31.990 --> 17:32.230
OK

17:33.350 --> 17:33.830
稍等一下

17:36.470 --> 17:38.070
这个打包时间肯定会增加

17:38.070 --> 17:38.790
这个跑不掉的

17:40.470 --> 17:41.430
那么现在完了

17:41.430 --> 17:41.750
没了

17:42.470 --> 17:43.190
现在看一下

17:43.910 --> 17:45.270
它这里多了这么一个东西

17:45.270 --> 17:45.670
对吧

17:45.670 --> 17:46.150
ID

17:46.150 --> 17:46.790
我们来看一下

17:46.790 --> 17:47.110
这里

17:47.990 --> 17:49.030
server static

17:49.750 --> 17:50.230
movice

17:53.500 --> 17:54.540
Forebike为True

17:56.940 --> 17:57.740
我没保存

17:57.740 --> 17:58.060
我晕

17:58.620 --> 17:59.420
我说怎么回事

17:59.420 --> 18:00.140
这应该有的

18:01.660 --> 18:01.980
漂亮

18:01.980 --> 18:02.460
再来一次

18:07.080 --> 18:08.440
录屏有这个好处

18:08.440 --> 18:10.040
你们这个时间就可以挑过了

18:10.040 --> 18:11.400
直接挑过了

18:11.400 --> 18:12.680
我快进一点就行了

18:13.720 --> 18:14.360
OK

18:14.360 --> 18:15.160
现在正常出来了

18:15.960 --> 18:16.520
爆错了

18:16.520 --> 18:17.160
爆错了

18:17.320 --> 18:17.800
什么意思

18:22.360 --> 18:22.760
什么意思

18:23.560 --> 18:24.040
明白了

18:24.040 --> 18:24.680
明白了

18:25.960 --> 18:26.520
它是这样子

18:28.820 --> 18:29.620
当我们

18:29.620 --> 18:32.100
它这里的Forebike为True了过后

18:32.900 --> 18:34.260
它要渲染主流的时候

18:34.260 --> 18:35.700
它会额外渲染一次

18:35.700 --> 18:36.420
多渲染一次

18:36.420 --> 18:38.020
它当然它会把ID全部拿到

18:38.020 --> 18:38.420
对吧

18:38.420 --> 18:39.140
每个ID拿到

18:39.140 --> 18:39.940
然后运行这个

18:39.940 --> 18:41.220
每个这个东西运行一次

18:41.220 --> 18:41.700
这个Render

18:42.260 --> 18:43.300
运行一个Render

18:43.300 --> 18:44.900
但它会额外运行一次

18:44.900 --> 18:45.860
我们来数一下

18:45.860 --> 18:46.820
要不然来数一下

18:46.820 --> 18:48.260
Render它出现了次数

18:49.140 --> 18:49.700
第一次

18:49.700 --> 18:50.100
对吧

18:50.100 --> 18:51.460
第一次Render

18:51.460 --> 18:52.020
第二次

18:52.020 --> 18:52.500
第三次

18:52.500 --> 18:53.060
第四次

18:54.180 --> 18:54.740
第五次

18:54.740 --> 18:55.780
第六次

18:55.780 --> 18:56.500
第七次

18:56.500 --> 18:56.980
第八次

18:56.980 --> 18:57.540
第九次

18:58.180 --> 18:58.980
第四次

18:58.980 --> 18:59.940
第十一次

18:59.940 --> 19:01.060
这两个没数

19:01.060 --> 19:02.020
所以运行到十一次

19:02.020 --> 19:03.460
本来只有十次的

19:03.460 --> 19:04.500
运行到十一次

19:04.500 --> 19:05.860
它会额外运行一次

19:05.860 --> 19:07.380
那么额外运行这一次

19:07.380 --> 19:08.980
它是没有电影数据的

19:08.980 --> 19:09.940
它不是根据这里的

19:09.940 --> 19:10.580
电影数据来的

19:10.580 --> 19:11.460
因为它没有电影数据

19:11.460 --> 19:12.740
那哪有ID

19:12.740 --> 19:13.620
没有额外的

19:13.620 --> 19:14.580
它额外多了一次

19:14.580 --> 19:14.900
对吧

19:14.900 --> 19:15.300
多了一次

19:15.300 --> 19:16.740
它是没有这个数据的

19:16.740 --> 19:17.380
没有这个数据的

19:17.380 --> 19:18.180
所以说会出问题

19:18.260 --> 19:18.980
那么这里呢

19:18.980 --> 19:19.940
就是NOW

19:19.940 --> 19:20.900
Undefined

19:20.900 --> 19:21.540
Undefined

19:21.540 --> 19:22.340
那么这里表面

19:22.340 --> 19:23.620
它会出这个问题

19:23.620 --> 19:25.380
所以它会遇到这么一个问题

19:25.380 --> 19:27.060
那么现在额外的这一次

19:27.060 --> 19:28.660
为了这样

19:28.660 --> 19:29.300
为了方便

19:29.300 --> 19:31.300
我这里判断一下有没有Movie

19:31.300 --> 19:32.420
如果说有Movie的话

19:32.420 --> 19:33.220
我给你返回这个

19:34.740 --> 19:35.460
没有Movie的话

19:35.460 --> 19:36.340
我给你返回另外一个

19:39.180 --> 19:39.900
返回另外一个

19:40.540 --> 19:40.940
楼顶嘛

19:43.100 --> 19:44.140
比方说再来

19:51.240 --> 19:51.640
好 稍等

20:00.100 --> 20:00.660
OK

20:00.660 --> 20:01.380
那么现在出来了

20:01.540 --> 20:01.940
正常了

20:02.740 --> 20:03.540
现在我们来看一下

20:06.220 --> 20:06.860
新生成的

20:06.860 --> 20:07.420
哪一个呢

20:09.340 --> 20:09.580
这里

20:10.700 --> 20:11.900
你看是不是多了一个ID

20:11.900 --> 20:12.540
也提没有

20:12.540 --> 20:13.660
那么ID也提没有里面

20:13.660 --> 20:14.140
你看一下

20:14.140 --> 20:16.140
它的是不是确认出了HE

20:16.140 --> 20:16.700
对吧

20:16.700 --> 20:17.900
确认了这个东西

20:17.900 --> 20:18.140
对吧

20:18.140 --> 20:19.180
它会多生成一个意变

20:19.180 --> 20:19.980
这个意变有什么用

20:19.980 --> 20:20.620
我们一会再说

20:21.980 --> 20:23.020
那么这里边

20:23.020 --> 20:24.780
我们用这种方式来判断可以

20:24.780 --> 20:26.540
但是它建议你用另外一种方式

20:27.100 --> 20:28.860
它官网建议你用另外一种方式

20:28.860 --> 20:29.420
来判断了

20:29.420 --> 20:30.780
更加合适一点

20:30.860 --> 20:32.540
当FolkBike維促的时候

20:32.540 --> 20:35.500
它会在额外的那一次渲染的时候

20:35.500 --> 20:36.660
它会往组建里面

20:36.660 --> 20:39.740
传递一个就是数据过来

20:39.740 --> 20:43.580
就是Rotor里面给你加上一个EaseFolkBike

20:43.580 --> 20:45.260
那么这里你可以使用Rotor

20:45.260 --> 20:47.340
虽然你没获取不到什么地址栏

20:47.340 --> 20:48.300
说是肯定获取不到

20:48.300 --> 20:50.140
地址栏就因为没有请求嘛

20:50.140 --> 20:50.940
所以说

20:50.940 --> 20:53.660
但是你可以获取到额外属性

20:53.660 --> 20:55.180
叫做那个是里面

20:55.180 --> 20:55.900
Rotor里面

20:55.900 --> 20:57.260
导入UzRotor

20:58.380 --> 20:59.260
UzRotor

20:59.580 --> 21:01.420
那么这里我们使用Rotor

21:02.300 --> 21:03.420
UzRotor

21:03.420 --> 21:04.540
就自定应Folk

21:04.540 --> 21:06.460
那么这个自定应Folk里边

21:06.460 --> 21:07.740
它就有这么一个东西

21:10.220 --> 21:13.020
EaseFolkBike

21:13.020 --> 21:14.780
当它维促的时候

21:14.780 --> 21:16.540
就是那额外的一次渲染

21:17.980 --> 21:19.340
那么在Build的时候

21:19.340 --> 21:20.540
那额外一次渲染

21:20.540 --> 21:21.740
是这么一个意思

21:21.740 --> 21:23.100
那么当它维促的时候

21:23.100 --> 21:24.380
我们就返回这个

21:24.380 --> 21:25.580
然后剩下的情况

21:25.580 --> 21:26.620
我们返回是正常的

21:26.620 --> 21:27.420
对吧

21:27.420 --> 21:28.540
当它维促的时候

21:28.620 --> 21:29.420
那么它会进行

21:29.420 --> 21:30.940
就是额外的那一次渲染

21:30.940 --> 21:31.580
服务端的

21:31.580 --> 21:32.700
这都是服务端的

21:32.700 --> 21:34.060
客户端是没有这个东西的

21:34.060 --> 21:35.340
是没有这个东西的

21:35.340 --> 21:35.580
好

21:35.580 --> 21:36.220
那么现在呢

21:36.220 --> 21:38.950
我们来看一下

21:38.950 --> 21:39.190
好

21:39.190 --> 21:39.830
那么现在呢

21:39.830 --> 21:40.630
我们在这里

21:41.510 --> 21:42.070
再来运行

21:42.630 --> 21:43.190
然后Build

21:47.860 --> 21:49.300
就打包时间肯定要长一点

21:50.020 --> 21:50.900
有套精彩花嘛

21:55.080 --> 21:55.320
好

21:55.320 --> 21:55.640
出来了

22:01.160 --> 22:01.400
好

22:01.400 --> 22:01.880
看一下这边

22:02.920 --> 22:03.320
ID

22:03.320 --> 22:03.880
AD没有

22:03.880 --> 22:05.160
然后这里有点RODY

22:05.160 --> 22:05.560
对吧

22:05.560 --> 22:07.000
那么这就是额外的一些渲染

22:07.000 --> 22:07.880
那么剩下的ID

22:07.880 --> 22:08.680
在正常的ID

22:08.680 --> 22:10.040
它就是渲染正常结果

22:10.600 --> 22:10.840
好

22:10.840 --> 22:11.320
那么现在呢

22:11.320 --> 22:12.040
我们这里

22:12.040 --> 22:13.720
夺了这么一个静态一面了

22:13.720 --> 22:15.000
接下来怎么玩呢

22:15.000 --> 22:16.360
就是我们刚才说的RODY

22:17.000 --> 22:18.360
当你访问

22:18.360 --> 22:19.640
当你访问到就是

22:20.360 --> 22:21.720
不存在的路由的时候

22:22.520 --> 22:23.640
可以要使用Fallback

22:24.280 --> 22:25.800
那么它就会给力

22:25.800 --> 22:26.680
当它萎出的时候

22:26.680 --> 22:27.720
它就会给力这个东西

22:27.720 --> 22:29.240
服务就会把这个东西给力

22:29.240 --> 22:31.080
而不会给力士林寺

22:31.080 --> 22:31.320
好

22:31.320 --> 22:31.800
咱们来看一下

22:33.480 --> 22:34.280
npmstart

22:37.300 --> 22:38.420
它会给力这个东西

22:38.420 --> 22:39.540
会给力这个东西

22:39.540 --> 22:40.180
给这个一面

22:40.900 --> 22:41.860
然后来我们来看一下

22:43.140 --> 22:44.500
这里的速度可能比较快

22:44.500 --> 22:45.860
我要想一下

22:45.860 --> 22:46.580
这里该怎么来

22:47.460 --> 22:48.180
点击右键

22:48.180 --> 22:48.900
查看元代吧

22:50.020 --> 22:51.700
那么我们还是访问那个地址

22:51.700 --> 22:52.340
查看元代吧

22:53.620 --> 22:53.940
你看

22:54.900 --> 22:56.100
我们这里刷新一次

22:57.060 --> 22:57.620
刷新一次

22:57.620 --> 22:57.940
你看

22:58.580 --> 22:59.060
元代吧

22:59.060 --> 23:00.340
里面是不是给你返回了RODY

23:00.900 --> 23:02.180
它给你返回了这个东西

23:02.180 --> 23:02.900
对吧

23:02.900 --> 23:04.180
返回了这个东西

23:04.180 --> 23:05.620
然后我们再来刷新一次

23:05.620 --> 23:05.940
看一下

23:07.380 --> 23:07.940
有东西

23:07.940 --> 23:08.740
有了

23:08.740 --> 23:09.700
它就有东西了

23:10.580 --> 23:11.300
好神奇啊

23:11.300 --> 23:12.180
怎么回事了

23:12.180 --> 23:12.820
它是这样子

23:14.260 --> 23:16.100
当你访问到不存在的页面的时候

23:16.100 --> 23:18.180
它会给力ID1.8TML

23:18.180 --> 23:19.860
然后服务端马上启动

23:20.660 --> 23:21.940
Static Props

23:21.940 --> 23:23.780
这个时候启动Static Props

23:23.780 --> 23:26.100
它会自动的把新的路由给你传过来

23:26.660 --> 23:27.540
它会自动的把这个

23:28.180 --> 23:29.460
它会自动的把这个新的

23:29.460 --> 23:30.980
Pirons给你传过来

23:30.980 --> 23:32.260
然后它不会运行这个

23:32.260 --> 23:33.220
这个是不会运行的

23:33.220 --> 23:34.820
它会把新的ID给你传过来

23:34.820 --> 23:37.140
然后再在服务端给你删成这个

23:37.140 --> 23:37.700
我们来看一下

23:38.260 --> 23:40.100
我们整个流程它有点绕

23:40.180 --> 23:43.380
当访问到不存在的时候

23:43.380 --> 23:46.180
不存在的ID页面时

23:47.140 --> 23:48.980
那么服务器拿到这个寝球

23:48.980 --> 23:49.460
是吧

23:49.460 --> 23:50.980
服务器第一

23:50.980 --> 23:52.020
首先想用

23:52.500 --> 23:53.060
想用什么呢

23:53.060 --> 23:53.540
ID

23:55.220 --> 23:55.860
8TML

23:56.820 --> 23:57.300
想用这个

23:57.300 --> 23:58.020
因为你要

23:58.660 --> 24:00.740
希望让客户能尽快的过去页面

24:00.740 --> 24:01.380
尽快

24:01.380 --> 24:03.540
你不能说等我把这个数据夹在网上过来

24:03.540 --> 24:03.940
再给你

24:03.940 --> 24:04.660
那是太慢了

24:05.220 --> 24:07.700
因为这个静态化的目的就是要快速想用

24:08.100 --> 24:09.380
想应该ID这个静态页面

24:09.460 --> 24:10.660
所以说这个页面里边

24:10.660 --> 24:12.420
我们往往就写上一个loading

24:12.420 --> 24:13.940
表示正在夹载中

24:13.940 --> 24:15.460
让客户能等一下

24:15.460 --> 24:16.340
马上就完了

24:16.820 --> 24:18.100
然后第二步

24:18.900 --> 24:19.940
第二步干嘛呢

24:20.260 --> 24:21.460
那么这个所已先响应了

24:21.460 --> 24:21.620
对吧

24:21.620 --> 24:22.660
客户能已经看到消火了

24:22.660 --> 24:25.380
那么服务器悄悄地在后台运行

24:25.380 --> 24:28.020
然后重新运行

24:28.500 --> 24:29.060
运行什么了

24:29.060 --> 24:30.180
重新运行这个函数

24:31.060 --> 24:32.260
重新运行这个函数

24:34.820 --> 24:39.300
并将新的ID传过去

24:40.260 --> 24:41.540
那么新的ID传过去

24:41.540 --> 24:42.420
这个函数运行完了

24:42.420 --> 24:43.380
我是不是拿到一个数据

24:43.380 --> 24:43.620
对吧

24:43.620 --> 24:44.740
这个函数拿到数据

24:44.740 --> 24:46.500
然后再重新渲染组件

24:47.860 --> 24:49.300
重新渲染组件

24:50.100 --> 24:51.540
那么把渲染的结果

24:51.540 --> 24:52.820
把渲染的结果

24:52.820 --> 24:53.300
那么这一次

24:53.300 --> 24:54.500
渲染组件是不是有数据了

24:54.500 --> 24:55.940
把这些数据给他了

24:55.940 --> 24:57.700
在服务端都在服务端运行的

24:57.700 --> 24:58.500
把数据给他了

24:58.500 --> 25:00.420
那么这个组件是不是把渲染的结果

25:00.420 --> 25:04.580
生成到一个新的

25:04.580 --> 25:05.220
也挺慢种

25:06.420 --> 25:07.300
之前不是没有吗

25:07.300 --> 25:08.660
那么现在给你新生成

25:08.740 --> 25:09.620
你看

25:09.620 --> 25:11.700
那么这个叫做好多

25:11.700 --> 25:13.380
5C25滴滴

25:13.380 --> 25:14.580
5C25滴滴

25:14.580 --> 25:15.460
你看一下现在又有

25:19.910 --> 25:21.430
现在的5C

25:21.430 --> 25:22.150
都是开头的

25:22.150 --> 25:22.710
这个开头的

25:22.710 --> 25:23.190
对吧

25:23.190 --> 25:24.390
那么看尾数吧

25:24.390 --> 25:26.230
看尾数是10第一

25:27.190 --> 25:29.190
10第一

25:29.190 --> 25:30.230
你看是不是现在是不是有了

25:31.990 --> 25:32.470
这是结成

25:33.510 --> 25:34.150
现在是不是有了

25:35.350 --> 25:36.230
叫50怪手

25:36.230 --> 25:37.030
是不是有了

25:37.030 --> 25:37.910
好那么现在的

25:37.910 --> 25:39.190
这里可以重新来点

25:39.190 --> 25:40.310
但是问题是

25:40.390 --> 25:41.590
可不端还是想用这个

25:41.590 --> 25:43.590
可不端还得显示楼顶

25:43.590 --> 25:44.390
不着急

25:44.390 --> 25:45.830
因为它生成了ATM过后

25:45.830 --> 25:48.710
同时还会生成

25:49.350 --> 25:52.550
同时生成结成

25:53.430 --> 25:54.470
那么这个结成

25:54.470 --> 25:56.070
它会收到可不端的

25:56.070 --> 25:57.590
可不端会请求

25:58.230 --> 25:59.030
那么可不端的

25:59.030 --> 25:59.910
达到一面的时候

25:59.910 --> 26:00.950
它会去请求结成

26:01.510 --> 26:02.710
讲一个结成

26:02.710 --> 26:05.430
页面中会请求结成

26:05.430 --> 26:06.150
那么服务端

26:06.150 --> 26:07.190
结成生成出来之前

26:07.190 --> 26:08.870
不要结成生成要10分钟

26:08.950 --> 26:10.870
拿十个数据要10分钟等着

26:10.870 --> 26:13.110
那么服务端就会一直挂起

26:13.110 --> 26:14.630
就一直不给它想用

26:14.630 --> 26:16.070
可以认为就是一直

26:16.070 --> 26:17.830
不进行response end

26:17.830 --> 26:19.110
response end不进行

26:19.110 --> 26:21.030
那么它就一直等着

26:21.030 --> 26:22.630
那么生成了结成过后

26:22.630 --> 26:25.350
那么就把结成数据给它发过去

26:25.350 --> 26:27.190
那么可不端就可以完成想用了

26:27.190 --> 26:27.430
对吧

26:27.430 --> 26:28.070
同时

26:28.070 --> 26:29.510
而且下一次访问的时候

26:29.510 --> 26:30.470
就有ATM了

26:30.470 --> 26:31.990
就已经有进一面了

26:31.990 --> 26:34.630
它就不会再重新来这个流程了

26:34.630 --> 26:36.070
是用这个方式来做的

26:36.070 --> 26:37.270
非常非常漂亮

26:37.270 --> 26:38.710
这种方式解决了

26:38.710 --> 26:39.910
因为说我们在来

26:39.910 --> 26:40.710
对于客户端来说

26:40.710 --> 26:41.830
它就看到这么一个流程

26:41.830 --> 26:42.710
我访问这个页面

26:42.710 --> 26:44.310
说一下子就拿到一个楼顶

26:44.310 --> 26:45.590
正在夹载中

26:45.590 --> 26:46.950
那么等一会

26:46.950 --> 26:47.350
等了一会

26:47.350 --> 26:48.390
我也不知道在那边在干嘛

26:48.390 --> 26:49.830
然后突然就可以显示页面了

26:49.830 --> 26:51.110
所以说我们来看一下客户端这边

26:52.790 --> 26:53.030
电影

26:54.310 --> 26:54.870
给我们看

26:54.870 --> 26:57.030
比方说中国合伙人点击

26:57.030 --> 26:57.510
可以拿到

26:57.510 --> 26:58.310
看到这个

26:58.310 --> 26:59.430
但是这个速度很快

26:59.430 --> 27:00.870
因为这个请求的速度很快

27:00.870 --> 27:01.350
所以说我们

27:01.350 --> 27:02.470
它其实有一个楼顶的

27:02.470 --> 27:03.590
有一个楼顶的

27:04.390 --> 27:06.390
我们这里能够看到这个效果

27:06.390 --> 27:07.110
我们这里

27:07.830 --> 27:08.710
要不然把这个

27:10.150 --> 27:10.710
movie

27:10.710 --> 27:11.430
改动一下

27:11.430 --> 27:12.070
看到这个效果

27:12.790 --> 27:13.430
改动一下

27:14.870 --> 27:15.910
new

27:16.550 --> 27:17.030
promise

27:17.910 --> 27:18.550
它这样子

27:19.190 --> 27:19.750
这样子的

27:19.750 --> 27:20.950
build的速度就很慢了

27:22.230 --> 27:22.870
set timeout

27:23.670 --> 27:24.150
一秒钟

27:25.190 --> 27:26.150
一秒钟拿到数据

27:28.180 --> 27:29.380
这个变成async

27:30.020 --> 27:30.740
那么这里呢

27:30.740 --> 27:31.540
我们用result

27:32.100 --> 27:32.500
result

27:34.020 --> 27:34.260
ok

27:34.980 --> 27:36.020
一秒钟

27:36.020 --> 27:36.740
稍微改一下

27:36.740 --> 27:37.620
那么我们再看一下吧

27:37.700 --> 27:39.060
这样子看的效果很明显

27:41.780 --> 27:42.580
要重新build

27:42.980 --> 27:43.940
np 双build

27:45.620 --> 27:46.740
这样打包就比较慢了

27:46.740 --> 27:48.100
因为每次要等一秒钟

27:48.100 --> 27:48.900
还要等一秒钟

27:48.900 --> 27:50.260
打包就比较慢了

27:54.490 --> 27:55.770
要多等一秒钟

27:56.330 --> 27:56.650
多等吧

27:56.650 --> 27:57.050
多等吧

28:00.860 --> 28:01.180
ok

28:01.980 --> 28:02.300
好

28:02.300 --> 28:02.780
那么现在呢

28:02.780 --> 28:03.420
我们再运行

28:03.980 --> 28:05.580
npm start

28:07.670 --> 28:07.910
好

28:07.910 --> 28:08.550
接下来我来看

28:09.670 --> 28:09.990
电影

28:11.750 --> 28:12.710
这些有心态一面的

28:12.710 --> 28:13.030
对吧

28:13.030 --> 28:13.350
很快

28:13.350 --> 28:14.310
一下就出来了

28:14.310 --> 28:15.430
那没有静态一面的了

28:15.430 --> 28:16.150
我们看一下

28:16.150 --> 28:17.190
这个点击

28:17.190 --> 28:18.470
你看是不是现在漏定

28:18.470 --> 28:18.950
然后呢

28:18.950 --> 28:19.750
拿到结果了

28:20.390 --> 28:21.270
再看一下这个过程

28:21.750 --> 28:22.390
客户端

28:22.390 --> 28:23.350
马上拿到这个页面

28:23.350 --> 28:24.230
显示漏定对吧

28:24.230 --> 28:25.190
然后拿去请求节省

28:26.070 --> 28:26.870
那么服务器那边

28:26.870 --> 28:28.230
只要是节省一秒钟过后

28:28.230 --> 28:28.870
生成的节省

28:28.870 --> 28:30.310
是不是就响应过来了

28:30.310 --> 28:31.030
那么客户端就

28:31.510 --> 28:32.550
就交给客户端宣展了

28:32.550 --> 28:32.790
对吧

28:32.790 --> 28:33.430
客户端宪宣展

28:33.430 --> 28:34.470
就是不这个样子

28:34.470 --> 28:35.510
那么后续请求

28:35.510 --> 28:36.710
登对这个页面的后续请求

28:36.710 --> 28:37.910
是全是静态化的

28:37.910 --> 28:39.110
你看后续请求

28:39.270 --> 28:40.070
是不是没有漏定

28:40.070 --> 28:40.310
对吧

28:40.310 --> 28:41.190
直接拿这个页面的

28:41.190 --> 28:42.550
拿了个静态一面就完成了

28:42.550 --> 28:44.230
非常非常好的处理

28:44.230 --> 28:44.710
所以说呢

28:44.710 --> 28:45.270
以前呢

28:45.270 --> 28:46.630
他有没有这个那个时间呢

28:46.630 --> 28:47.350
有没有静态化呢

28:47.350 --> 28:47.750
有

28:47.750 --> 28:49.990
但是我们基本上不太用那个东西了

28:49.990 --> 28:51.030
跟玩具一样

28:51.030 --> 28:52.310
那么这个新版本里边

28:53.350 --> 28:54.550
做的还是不错的

28:54.550 --> 28:56.150
静态化做的是非常不错的

28:56.150 --> 28:56.550
OK

28:56.550 --> 28:57.110
那么这里呢

28:57.110 --> 28:58.870
就是它的整个静态化

28:58.870 --> 29:00.230
它的处理方式

29:00.230 --> 29:01.510
有存静态化

29:01.510 --> 29:02.870
那么有SSG

29:02.870 --> 29:04.390
那么谁在决定

29:04.390 --> 29:06.310
就是那个自动优化器来决定

29:06.310 --> 29:07.190
他发现一个组件

29:07.190 --> 29:08.070
就是一个普通组件

29:09.030 --> 29:10.230
当发现一个组件

29:10.230 --> 29:11.350
它里边有这个

29:11.350 --> 29:12.070
这两个函数

29:12.070 --> 29:13.430
那么这个函数

29:13.430 --> 29:14.550
关键是这个函数

29:14.550 --> 29:16.390
那么它就会是SSG

29:16.390 --> 29:17.110
那么静态化

29:17.110 --> 29:18.310
我们什么时候会用呢

29:20.390 --> 29:22.390
和什么时候

29:22.390 --> 29:25.110
会要使用静态化

29:26.790 --> 29:28.230
那么它官方的建议

29:28.230 --> 29:29.910
它的静态化确实做的不错

29:29.910 --> 29:30.790
有意说一

29:30.790 --> 29:32.070
那么官方建议你呢

29:32.070 --> 29:34.150
就是尽可能的使用静态化

29:34.150 --> 29:35.510
就你只要能够

29:36.310 --> 29:37.270
静态化的时候呢

29:37.350 --> 29:39.510
就尽量能够静态化

29:39.510 --> 29:41.510
静态化速度确实太快了

29:41.510 --> 29:43.510
那么什么时候呢

29:43.510 --> 29:45.510
简单的有这么一个原则

29:45.510 --> 29:47.510
就是如果

29:49.510 --> 29:51.990
如果你的页面

29:51.990 --> 29:56.310
不是根据不同的请求

29:56.310 --> 29:58.550
而不同

29:58.550 --> 30:01.750
则建议

30:01.750 --> 30:03.110
则推荐

30:03.110 --> 30:04.710
使用静态化

30:07.510 --> 30:09.030
就推荐使用静态化

30:09.030 --> 30:10.310
是这么个意思

30:11.830 --> 30:12.790
比方说吧

30:12.790 --> 30:13.350
什么那个

30:14.710 --> 30:16.230
关于我们这种页面

30:16.950 --> 30:18.630
招聘 启示

30:18.630 --> 30:20.150
所有的用户看到都是一样的

30:20.150 --> 30:21.110
不存在说

30:21.110 --> 30:22.230
你这个用户看到的不一样

30:22.230 --> 30:23.510
那个用户看到的不一样

30:23.510 --> 30:24.070
对吧

30:24.070 --> 30:25.270
那么都是一样的

30:25.270 --> 30:25.990
那么这个时候呢

30:25.990 --> 30:27.670
就是可以静态化

30:27.670 --> 30:29.430
比方说什么那个电影

30:29.430 --> 30:31.110
一个一篇文章的详情

30:31.110 --> 30:31.510
对吧

30:31.510 --> 30:33.190
都可以静态化的

30:33.190 --> 30:34.390
比方说那个什么呢

30:35.110 --> 30:37.670
那个

30:37.670 --> 30:39.750
公司的地址

30:39.750 --> 30:41.910
还有一些文档的说明

30:41.910 --> 30:42.710
那么这些东西

30:42.710 --> 30:44.230
都非常非常推荐用静态化

30:44.230 --> 30:46.230
那么有些同学

30:46.230 --> 30:48.230
可能有一些担心

30:48.230 --> 30:49.270
就静态化过程里

30:49.270 --> 30:50.310
变成个静态一面了

30:50.310 --> 30:50.710
对吧

30:50.710 --> 30:51.830
那么这个静态一面呢

30:51.830 --> 30:52.950
如果说我要修改内容

30:52.950 --> 30:53.510
怎么办呢

30:53.510 --> 30:54.550
比方说我在后台里面

30:54.550 --> 30:55.190
把数据编了

30:55.190 --> 30:56.550
但是之前的内容

30:56.550 --> 30:58.070
还是还是原来的内容

30:58.070 --> 30:58.710
怎么办呢

30:58.710 --> 30:59.510
那么这个东西呢

30:59.510 --> 31:00.550
可以利用一些

31:00.550 --> 31:02.710
比方可以利用一些

31:02.710 --> 31:03.830
其他方式来解决

31:03.910 --> 31:05.590
比方说你重新打包

31:05.590 --> 31:07.670
你可以用一些工具

31:07.670 --> 31:09.430
然后那个自动重新打包

31:09.430 --> 31:10.630
可以一面上点一下

31:10.630 --> 31:12.150
可以自动重新打包

31:12.150 --> 31:13.430
这是一种方式

31:13.430 --> 31:14.390
另外一种方式呢

31:14.390 --> 31:15.590
就是你可以通过一些

31:17.990 --> 31:19.590
代码或者是工具

31:19.590 --> 31:21.190
把那个静态一面给它删掉

31:21.190 --> 31:22.310
删掉是不是没有了

31:22.310 --> 31:22.790
对吧

31:22.790 --> 31:24.470
这个文章详情没有了

31:24.470 --> 31:24.950
没有的话

31:24.950 --> 31:26.550
它是不是会重新来运行

31:26.550 --> 31:26.790
对吧

31:26.790 --> 31:28.070
会重新出发运行

31:28.070 --> 31:29.510
是这么个意思

31:29.510 --> 31:30.150
那么这里呢

31:30.150 --> 31:32.550
就是它的这种使用方式

31:33.510 --> 31:33.910
OK

31:34.870 --> 31:35.750
好那么

31:35.750 --> 31:36.630
这是静态化

31:36.630 --> 31:37.270
我们就讲完了

31:37.270 --> 31:38.550
当然肯定不是说

31:38.550 --> 31:40.230
静态化就能解决所有问题

31:40.230 --> 31:40.710
有的时候

31:40.710 --> 31:42.950
那么肯定还是要进行服务端宣展

31:42.950 --> 31:44.470
就是根据每一次请求

31:44.470 --> 31:45.590
什么是服务端宣展

31:45.590 --> 31:46.630
就是我们之前讲的

31:46.630 --> 31:48.790
根据每一次请求

31:48.790 --> 31:50.150
当然这个效率肯定要低很多

31:50.150 --> 31:51.590
但是有的时候也没办法

31:51.590 --> 31:57.110
每一次请求拿获取数据

31:58.710 --> 31:59.750
然后进行宣展

32:01.110 --> 32:02.230
那么这种情况

32:02.470 --> 32:03.190
比如比方说吧

32:03.190 --> 32:05.110
就是数据变动比较频繁

32:05.110 --> 32:06.870
比方说我们的电影列表页

32:06.870 --> 32:08.390
这个列表页假设

32:08.950 --> 32:10.550
它的数据变动非常非常频繁

32:10.550 --> 32:11.750
你不能说

32:11.750 --> 32:13.590
你直接过程成一个列表就完事了

32:13.590 --> 32:14.310
就永远不变了

32:14.310 --> 32:15.990
它变动非常非常频繁

32:15.990 --> 32:17.990
而且要不断的分业对吧

32:17.990 --> 32:19.910
而且我们电影

32:19.910 --> 32:21.990
可能每天都要出很多电影

32:21.990 --> 32:22.310
所以说呢

32:22.310 --> 32:23.430
我们要根据每一次请求

32:23.430 --> 32:24.950
实时的去拿数个数据

32:24.950 --> 32:25.910
那么这个时候呢

32:25.910 --> 32:27.190
我们可以进行服务端宣展

32:27.190 --> 32:28.070
实际上能不能静态化

32:28.070 --> 32:29.110
它也能静态化

32:29.110 --> 32:30.470
就是我们要找个平衡

32:30.470 --> 32:31.750
它也怎么来静态化

32:31.750 --> 32:33.670
我把静态化了过后

32:33.670 --> 32:34.790
你不是电影变了吗

32:34.790 --> 32:36.390
电影变了我重新重新构建

32:36.390 --> 32:36.710
对吧

32:36.710 --> 32:38.790
用一些自动化工具重新构建

32:38.790 --> 32:40.790
或者是我们把之前的静态一面杀了

32:40.790 --> 32:41.190
对吧

32:41.190 --> 32:42.310
那麽都可以

32:42.310 --> 32:43.510
都可以

32:43.510 --> 32:43.990
对不对

32:43.990 --> 32:44.230
ok

32:44.230 --> 32:46.390
那麽这里呢是关于这个静态化

32:46.390 --> 32:48.390
我们下节课来的讲服务端宣展

32:48.390 --> 32:49.990
那麽如何来实现服务端宣展

