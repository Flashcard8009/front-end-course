WEBVTT

00:00.880 --> 00:06.600
好的同学们 刚才我们已经了解了整个静态网页它的一个请求的权流称

00:06.600 --> 00:11.720
包括我们知道的服务器端究竟是怎么去处理我们对于网页的请求的

00:11.720 --> 00:17.560
那么这边其实就是当浏览器有请求发送到 但是网页请求发送到服务器之后

00:17.560 --> 00:23.120
这个请求是由ngix来做处理的 因为它在监听我们这个请求

00:23.120 --> 00:27.200
那么请求来了之后ngix接收到 接收到之后对请求做分析看你要的是什么

00:27.200 --> 00:31.400
然后去我们网站跟目录里面找到你要的这个文件

00:31.400 --> 00:35.000
然后返回给我们浏览器 那么浏览器拿到网页之后

00:35.000 --> 00:36.800
接下来就可以做宣讯处理了

00:37.800 --> 00:42.200
那么现在有个问题 就是当浏览器拿到我们网页之后

00:42.200 --> 00:48.320
假设现在网页里面有一个阿甲克斯请求要去服务庄获取数据

00:48.320 --> 00:51.600
那么这个时候我们是不是应该有接口服务了

00:51.600 --> 00:55.360
如果没有接口服务的话 就是数据接口服务的话

00:55.480 --> 01:00.080
那这个时候呢 你给阿甲克斯或者说给这个服务器端发送请求

01:00.080 --> 01:01.800
那没用了 它没有数据

01:01.800 --> 01:07.360
所以呢 接下来我们要了解的就是服务器端是怎么对于我们的这种

01:07.360 --> 01:11.280
阿甲克斯类型的数据接口请求做处理的 好嘞

01:11.280 --> 01:12.640
那我们来看一下下张图

01:13.440 --> 01:19.600
那为了能够处理服务器端 在这个服务器端去处理我们浏览器端的这个数据接口请求

01:19.600 --> 01:23.640
我们这边需要多两个软件出来 服务器端需要安装另外两个软件

01:23.640 --> 01:29.480
一个叫nodecs 另外一个是mycircle mycircle很简单是用来提供数据服务的

01:29.480 --> 01:33.840
比如说呢 我们的接口一般都是要么是数据的增产改查嘛

01:33.840 --> 01:37.160
对不对 很简单 那么数据的增产改查全都在数据库里面进行的

01:37.160 --> 01:40.720
所以就是得有个数据库 那么这个数据库除了mycircle之外呢

01:40.720 --> 01:46.960
你还可以是别的 比如说你可以是mscircleoroco 或者说mongodb之类的数据库

01:46.960 --> 01:47.960
都可以呀 没问题

01:48.640 --> 01:51.920
然后呢 另外一个还有一个就是nodecs 那么nodecs呢

01:51.920 --> 01:56.520
我们可以把它理解为对这个mycircle进行操作的一个东西

01:56.520 --> 01:59.680
那这里面呢 可以要可能要放一些业务逻辑代码啊

01:59.680 --> 02:04.360
比如说啊 我们要去接收到用户的一个小字段

02:04.360 --> 02:07.320
比如说你给一个id 然后通过id去的里面查

02:07.320 --> 02:09.560
那么这边拿到id之后呢 要通过id去查数据

02:09.560 --> 02:12.560
所以呢 nodecs也必须有啊 也必须有

02:12.560 --> 02:14.160
当然除了nodecs之外呢

02:14.200 --> 02:20.240
我们后端的这个夫妻程序啊 可以是java也可以是php等等的都行啊

02:20.240 --> 02:24.600
那因为我们这节课里面 可能同学们都对nodecs会比较熟悉一些

02:24.600 --> 02:27.720
或者说比较亲切一些 因为它属于前端的内容啊

02:27.720 --> 02:30.240
这就是我们这边就nodecs来做举例啊

02:31.520 --> 02:35.640
那么有了nodecs之后呢 接下来我们来看一下

02:35.640 --> 02:38.840
整个的数据型球过程是什么样子的啊

02:38.840 --> 02:39.760
来 看下一张图

02:40.760 --> 02:49.000
也就是说呢 首先我们的浏览器通过这个3w.ilovef1.com

02:49.000 --> 02:52.200
向服务器端发送了一个网页请求

02:52.200 --> 02:55.960
那这个时候呢 nodecs呢 接收到了这个请求

02:55.960 --> 03:00.880
然后呢 去我们网站根目录里面 拿到了对应的hma文件

03:00.880 --> 03:03.240
然后呢 返回给了浏览器

03:03.240 --> 03:06.240
那么浏览器在解析完毕 执行js代码的时候呢

03:06.240 --> 03:08.880
发现A有阿甲克斯请求

03:08.920 --> 03:13.680
那么这个时候呢 阿甲克斯请求就要发送到服务器去了

03:13.680 --> 03:16.760
那么这个时候发到服务器之后啊 大家要注意

03:16.760 --> 03:19.760
我们这个请求不是由nodecs在做处理了

03:19.760 --> 03:23.240
而是由谁做处理了 是要由nodecs做处理的

03:23.240 --> 03:27.280
也就是说呢 这个请求要发给nodecs 那怎么发给nodecs呢

03:27.280 --> 03:31.760
他怎么区分 究竟是发给nodecs还是发送给nodecs呢

03:31.760 --> 03:33.240
来 大家要注意啊

03:33.240 --> 03:36.480
我们服务器呢 有一些虚拟的端口

03:36.480 --> 03:40.360
那么nodecs默认监听的是80和443端口

03:40.360 --> 03:43.880
80就是我们的这个http协议的端口

03:43.880 --> 03:47.560
443呢 是https协议的端口

03:47.560 --> 03:49.920
然后呢 nodecs监听的端口呢

03:49.920 --> 03:53.160
我们可以自己去进行定义 比如说3000

03:53.160 --> 03:56.720
那么要注意啊 两个程序不可能同时监听一个端口的

03:56.720 --> 03:59.120
这要注意 他是独占的 是独占的

03:59.120 --> 04:02.200
所以呢 nodecs是用来处理网页请求的

04:02.200 --> 04:04.480
所以呢 他就监听80和443去

04:04.480 --> 04:08.000
然后呢 nodecs呢 要监听数据接口 数据接口的请求

04:08.000 --> 04:10.680
所以呢 我们给他一个特殊的端口号

04:10.680 --> 04:14.240
比如说3000也好 你8000也好 8888也好 都行

04:14.240 --> 04:16.040
这个可以自己定义的

04:16.040 --> 04:19.560
那这个时候呢 我们的这个网页解析完毕之后呢

04:19.560 --> 04:23.280
JS代码在运行的过程当中发生一个阿甲克斯请求

04:23.280 --> 04:25.600
那么阿甲克斯请求呢 就要通过这个地址

04:25.600 --> 04:29.680
http帽号双骑纲 3w.i livefe.com

04:29.680 --> 04:32.440
帽号3000指定一个端口号

04:32.480 --> 04:35.360
然后呢 把这个请求发送给nodecs

04:35.360 --> 04:37.760
那么nodecs刚好在今天这个端口嘛

04:37.760 --> 04:40.040
所以呢 他接收到了我们的数据请求

04:40.040 --> 04:42.080
那么接到数据请求之后呢 做一件处理

04:42.080 --> 04:45.280
然后呢 从我们mycircle数据库里面

04:45.280 --> 04:47.680
拿回来数据啊 拿到数据之后呢

04:47.680 --> 04:49.800
再通过这个网络

04:49.800 --> 04:52.600
然后呢 返回给我们的这个浏览器

04:52.600 --> 04:56.840
那么这时候呢 浏览器里面就拿到了我们的这个数据了

04:56.840 --> 05:00.040
也就是阿甲克斯请求整个流程就跑完了

05:00.040 --> 05:02.760
所以我们会发现在整个接口请求里面

05:02.760 --> 05:05.680
呃 负责处理我们接口请求的就俩软件

05:05.680 --> 05:08.080
一个是nodecs 一个是mycircle

05:08.080 --> 05:09.640
一个是mycircle啊

05:09.640 --> 05:11.760
那这里面有个特殊情况 让大家去注意一下

05:11.760 --> 05:13.120
就是

05:13.120 --> 05:14.760
我们发现请求网页的时候

05:14.760 --> 05:18.040
我这边用的是3w.i livefe.com

05:18.040 --> 05:20.120
然后呢 这边我做接口请求的时候呢

05:20.120 --> 05:21.600
我同样的请求都是同一预名

05:21.600 --> 05:24.120
但是端口号不一样了

05:24.120 --> 05:26.000
细心的同学可能已经注意到了

05:26.000 --> 05:28.640
这其实是一个跨域操作啊 跨域操作

05:28.640 --> 05:31.720
也就是你当前请求的网页和你的接口请求的地址

05:31.720 --> 05:34.000
它端口号不一样了 所以跨域了

05:34.000 --> 05:36.880
所以呢 要么我们要处理这个跨域

05:36.880 --> 05:38.360
让这个跨域能智商进行的话

05:38.360 --> 05:40.120
我们要有两种

05:40.120 --> 05:41.840
就目前来说在这个方案里面

05:41.840 --> 05:42.560
我们有两种啊

05:42.560 --> 05:46.840
就是第一种就是让nodecs返回这个CORS

05:46.840 --> 05:49.440
也就是说呢 在请求头里面去

05:49.440 --> 05:51.640
呃允许我们的跨域请求就ok了

05:51.640 --> 05:54.440
nodecs代码名去写 让它允许就ok了

05:54.440 --> 05:56.440
要么第二种呢 就是用CNP

05:56.440 --> 05:58.080
有Nodecs在返回数据的时候呢

05:58.080 --> 05:59.520
我们用JSNP的方式返回

05:59.520 --> 06:01.200
然后前端在请求数据的时候呢

06:01.200 --> 06:03.400
用JSNP的方式去请求

06:03.400 --> 06:04.920
所以这是比较原始的方案啊

06:04.920 --> 06:06.040
给大家了解一下

06:06.040 --> 06:07.600
也就是说呢现在有跨域了

06:07.600 --> 06:09.040
然后跨域的情况下

06:09.040 --> 06:10.520
我们这个情况啊

06:10.520 --> 06:12.360
这个服务器端的

06:12.360 --> 06:14.360
呃数据请求是怎么处理的啊

06:14.360 --> 06:15.880
这个大家知道一下

06:15.880 --> 06:19.000
好 那关于这个跨域的情况下

06:19.000 --> 06:22.640
我们服务器端怎么处理数据接口请求的啊

06:22.640 --> 06:24.120
这些课我们就先到这里

