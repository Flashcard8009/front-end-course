WEBVTT

00:00.940 --> 00:03.940
好的同学们 刚才我们已经了解过了

00:03.940 --> 00:06.940
整个在跨域的情况下

00:06.940 --> 00:09.940
我们的接口请求是怎么发送到服务器

00:09.940 --> 00:11.940
以及NodeJS是怎么处理的

00:11.940 --> 00:14.940
是这样的 就是当我们网页里面有阿扎克子请求

00:14.940 --> 00:17.940
然后发送给服务器的时候 要注意这边的

00:17.940 --> 00:19.940
域名 或者说地址 URO地址

00:19.940 --> 00:21.940
我们后面的端口会变成3000

00:21.940 --> 00:23.940
因为它要指定发给NodeJS

00:23.940 --> 00:26.940
NodeJS接听到我们这个请求之后

00:26.940 --> 00:29.940
接下来我们NodeJS就会去

00:29.940 --> 00:31.940
就你们拿数据 拿到数据之后

00:31.940 --> 00:33.940
返回给瀏覽器 瀏覽器就拿到数据了

00:33.940 --> 00:35.940
所以这是一个完全的流程

00:35.940 --> 00:37.940
但是这种情况下我们刚才说了

00:37.940 --> 00:40.940
它需要 要么是你用JSNP的方式做处理

00:40.940 --> 00:44.940
要么你要用CORS这样的想用头

00:44.940 --> 00:47.940
我们知道JSNP对于前后端都有要求

00:47.940 --> 00:50.940
前端首先在瀏覽器里面你发送

00:50.940 --> 00:53.940
阿扎克子请求的时候 你得用JSNP的方式去发送

00:53.940 --> 00:55.940
而且后端你需要做这件事

00:55.940 --> 00:58.940
就是你返回的数据格式 必须是JSNP格式的

00:58.940 --> 01:01.940
所以这种方式对于前后端要求都比较多

01:01.940 --> 01:04.940
我们逐渐已经抛弃了 逐渐已经抛弃了

01:04.940 --> 01:08.940
那么第二种就是用CORS的方式做处理

01:08.940 --> 01:12.940
也就是说我们在起NodeJS这个接口程序的时候

01:12.940 --> 01:16.940
在想用头里面去加上允许跨域的这样的想用头

01:16.940 --> 01:19.940
这种方式可不可行 可行当然可以用

01:19.940 --> 01:21.940
而且前端不需要做任何操作

01:21.940 --> 01:23.940
只需要后端加一个想用头就行了

01:23.940 --> 01:26.940
但是这种方式有个问题 就是安全问题

01:26.940 --> 01:30.940
它可能会导致一些不明的一些安全攻击

01:30.940 --> 01:34.940
所以这种方式目前开发当中用的也特别少

01:34.940 --> 01:35.940
用的也特别少

01:35.940 --> 01:37.940
那有同学可能就会有疑问了

01:37.940 --> 01:40.940
老师你说这两种JSNP不能用 CORS不能用

01:40.940 --> 01:43.940
那我们这种方案不就废了吧

01:43.940 --> 01:46.940
那现在开发当中到底用什么呢

01:46.940 --> 01:49.940
所以这节课我们要给大家讲的就是

01:49.940 --> 01:52.940
第三种处理这个跨域的方案就是

01:52.940 --> 01:54.940
我们的反向代理

01:54.940 --> 01:56.940
包括我们后面的这个施操课程

01:56.940 --> 01:58.940
要去做的也是做反向代理

01:58.940 --> 01:59.940
这样的配置

01:59.940 --> 02:01.940
来看一下这样的图

02:01.940 --> 02:03.940
好 我们来看

02:03.940 --> 02:06.940
这边同样的 我们还是先看一下网页请求

02:06.940 --> 02:08.940
刘兰棋里面出了预名

02:08.940 --> 02:11.940
预名找到DNS-DNS返回的IP地址

02:11.940 --> 02:13.940
返回IP地址之后

02:13.940 --> 02:16.940
我们的这个刘兰棋通过IP地址找到服务器

02:16.940 --> 02:19.940
然后服务器NJX接受到网页请求

02:19.940 --> 02:22.940
去网站跟目录里面找到对面的文件

02:22.940 --> 02:25.940
返回给NJXNJX的把文件交给刘兰棋

02:25.940 --> 02:27.940
OK 那么刘兰棋就拿到网页了

02:27.940 --> 02:29.940
然后这个时候呢

02:29.940 --> 02:32.940
网页里面产生了一个阿甲克斯请求

02:32.940 --> 02:34.940
那么产生阿甲克斯请求之后呢

02:34.940 --> 02:35.940
我们这边是怎么做的呢

02:35.940 --> 02:37.940
来大家看一下

02:37.940 --> 02:39.940
这里的阿甲克斯请求地址

02:39.940 --> 02:43.940
我们换成了http冒号双鞋杠3w

02:43.940 --> 02:47.940
Ilovefe.com-api

02:47.940 --> 02:48.940
这边呢

02:48.940 --> 02:51.940
同样也是3wIlovefe.com

02:51.940 --> 02:53.940
如果我们细心观察这两个域名

02:53.940 --> 02:55.940
你会发现它不再跨域了

02:55.940 --> 02:58.940
因为域名 协议 还有端口号

02:58.940 --> 03:01.940
这三部分完全一样

03:01.940 --> 03:02.940
有人说那些后面API

03:02.940 --> 03:04.940
这不是我们跨域要考虑的部分吗

03:04.940 --> 03:05.940
OK啊

03:05.940 --> 03:06.940
然后呢

03:06.940 --> 03:07.940
我们这个请求呢

03:07.940 --> 03:08.940
就发给了这个地址

03:08.940 --> 03:09.940
那么发给这个地址之后

03:09.940 --> 03:10.940
我们知道

03:10.940 --> 03:11.940
这边如果你不指定端口

03:11.940 --> 03:13.940
是不是默认端口就是80

03:13.940 --> 03:14.940
所以呢

03:14.940 --> 03:15.940
80端口我们之前说过

03:15.940 --> 03:16.940
是由NJX来监听的

03:16.940 --> 03:17.940
所以呢

03:17.940 --> 03:20.940
是NJX接收到了我们这个数据请求

03:20.940 --> 03:21.940
那么这个时候呢

03:21.940 --> 03:22.940
在NJX里面

03:22.940 --> 03:24.940
我们做一个简单的配置

03:24.940 --> 03:26.940
做什么配置呢

03:26.940 --> 03:30.940
所有的路径开头是API

03:30.940 --> 03:33.940
这三个字母的请求啊

03:33.940 --> 03:35.940
我全转发给note.js

03:35.940 --> 03:36.940
有时候呢

03:36.940 --> 03:40.940
NJX在这里就做了一个代理的角色

03:40.940 --> 03:41.940
有时候呢

03:41.940 --> 03:42.940
你的接口请求

03:42.940 --> 03:43.940
你不用直接发给note.js了

03:43.940 --> 03:44.940
你发给我

03:44.940 --> 03:45.940
你发给我

03:45.940 --> 03:46.940
那这样的话

03:46.940 --> 03:48.940
我就可以让你们前端

03:48.940 --> 03:50.940
感受不到跨域的这样操作了

03:50.940 --> 03:51.940
所以呢

03:51.940 --> 03:52.940
接口请求发给他之后呢

03:52.940 --> 03:54.940
他对这个域名里面的

03:54.940 --> 03:56.940
就我们ur地址里面的这个

03:56.940 --> 03:58.940
路径部分啊

03:58.940 --> 03:59.940
做一个判断

03:59.940 --> 04:00.940
是不是API开头的

04:00.940 --> 04:02.940
如果是API开头的

04:02.940 --> 04:03.940
好的

04:03.940 --> 04:04.940
那接下来

04:04.940 --> 04:05.940
我把这个请求

04:05.940 --> 04:06.940
转发给note.js

04:06.940 --> 04:07.940
那么note.js就拿到了

04:07.940 --> 04:08.940
我们这个请求

04:08.940 --> 04:09.940
然后note.js

04:09.940 --> 04:11.940
就会去mycoco里面

04:11.940 --> 04:12.940
取数据

04:12.940 --> 04:13.940
取到数据之后呢

04:13.940 --> 04:14.940
接下来

04:14.940 --> 04:15.940
给njx

04:15.940 --> 04:16.940
那么njx

04:16.940 --> 04:17.940
远路返回

04:17.940 --> 04:18.940
给浏览器

04:18.940 --> 04:19.940
那么浏览器

04:19.940 --> 04:20.940
就拿到了

04:20.940 --> 04:21.940
我们整个的

04:21.940 --> 04:22.940
接口数据请求的一个结果

04:22.940 --> 04:23.940
所以呢

04:23.940 --> 04:24.940
这边大家会发现

04:24.940 --> 04:25.940
跟上面不一样的

04:25.940 --> 04:27.940
跟我们第二张图不一样的

04:27.940 --> 04:28.940
我们这边呢

04:28.940 --> 04:30.940
网页的请求是发给njx的

04:30.940 --> 04:32.940
而数据接口的请求

04:32.940 --> 04:33.940
是发给note.js的

04:33.940 --> 04:34.940
他们两个呢

04:34.940 --> 04:35.940
是有个跨域的

04:35.940 --> 04:37.940
而在下面这张图里面呢

04:37.940 --> 04:39.940
我们不论是你的网页请求

04:39.940 --> 04:41.940
还是数据接口请求

04:41.940 --> 04:43.940
我都发给njx的

04:43.940 --> 04:44.940
所以呢

04:44.940 --> 04:45.940
这边不存在

04:45.940 --> 04:46.940
跨域的问题存在啊

04:46.940 --> 04:47.940
所以呢

04:47.940 --> 04:48.940
呃

04:48.940 --> 04:49.940
我们这边

04:49.940 --> 04:50.940
要注意的一个核心点

04:50.940 --> 04:51.940
那么njx怎么知道

04:51.940 --> 04:52.940
你这边请求的是

04:52.940 --> 04:54.940
接口还是网页呢

04:54.940 --> 04:55.940
要注意

04:55.940 --> 04:56.940
就是我们需要在njx里面

04:56.940 --> 04:58.940
做一个简单的配置

04:58.940 --> 05:00.940
让所有的这个

05:00.940 --> 05:02.940
URL地址里面的这个什么呢

05:02.940 --> 05:04.940
路径是以API开头的

05:04.940 --> 05:06.940
都转发给note.js

05:06.940 --> 05:07.940
就好了

05:07.940 --> 05:08.940
所以这是我们

05:08.940 --> 05:09.940
关于

05:09.940 --> 05:10.940
反向代理

05:10.940 --> 05:11.940
它的一个请求

05:11.940 --> 05:13.940
我们的一个说明啊

05:13.940 --> 05:14.940
好那么这些课呢

05:14.940 --> 05:15.940
同学们

05:15.940 --> 05:16.940
仔细去评一下

05:16.940 --> 05:18.940
我们就先到这儿啊

