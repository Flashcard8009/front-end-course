WEBVTT

00:00.240 --> 00:04.240
OK 这节课 这门课 说一下这个Redis

00:05.240 --> 00:09.240
它是一个数据库 在我们讲漏的监视的时候也提到过 对吧

00:10.240 --> 00:13.240
咱们关系型数据库学的是mysuckle

00:13.240 --> 00:16.240
非关系型数据库呢 就是low收口数据库呢

00:16.240 --> 00:19.240
我们学了mongoDB 也不知道大家看了没有

00:19.240 --> 00:21.240
反正都是选修课程

00:21.240 --> 00:25.240
Redis呢 它也是一个选修课程 它也是属于low收口数据库的一种

00:26.240 --> 00:32.240
这些数据库啊 大家作为前端呢 在一开始的时候没有必要过于去生纠

00:32.240 --> 00:35.240
因为呢 它毕竟是非常非常偏向后端的

00:36.240 --> 00:38.240
因此大家作为了解就行了

00:38.240 --> 00:41.240
如果说不了解的话 其实问题也不大 问题也不大

00:41.240 --> 00:43.240
有增进也就是增加一下眼界

00:43.240 --> 00:45.240
另外呢 Redis

00:45.240 --> 00:47.240
它作为前端开发者的话

00:47.240 --> 00:51.240
我们学习的东西呢 就算要了解也学习的非常非常简单

00:51.240 --> 00:53.240
这个玩意主要是用来做缓存的

00:53.240 --> 00:54.240
所以我们来看一下吧

00:54.240 --> 00:56.240
Redis这个东西到底是个什么东西

00:56.240 --> 00:58.240
首先呢 它去看一下它的官网

00:58.240 --> 01:01.240
有两个官网 一个是民间中文网

01:01.240 --> 01:06.190
就是这个官网 官网里边可以去下载Redis

01:06.190 --> 01:07.190
我们先不着急

01:07.190 --> 01:09.190
那么我来认识一下 它是一个什么玩意呢

01:09.190 --> 01:11.190
它是一个兼职队数据库

01:11.190 --> 01:13.190
它是属于low收口数据库的一种

01:13.190 --> 01:15.190
low收口数据库我们之前

01:15.190 --> 01:16.190
如果说你学了mongoDB的话

01:16.190 --> 01:19.190
就知道mongoDB呢 它是属于文档型的

01:19.190 --> 01:21.190
Redis呢 它是属于兼职队

01:22.190 --> 01:24.190
兼职队大家都了解吧 就是一个字

01:24.190 --> 01:26.190
像Cokey啊 或者兼职队

01:26.190 --> 01:28.190
像Jesson的时候也是兼职队

01:28.190 --> 01:30.190
就是兼职队就可以你认为是属性名属性值

01:30.190 --> 01:32.190
它就是这么一种数据库

01:32.190 --> 01:34.190
结构非常非常简单

01:34.190 --> 01:36.190
它的存储结构就是兼职队

01:36.190 --> 01:38.190
Redis呢 它是一个开源系统

01:38.190 --> 01:40.190
开源大家都知道吧 就是免费的

01:40.190 --> 01:42.190
原代码是公开的

01:42.190 --> 01:44.190
它遵守的是BSD开源协议

01:44.190 --> 01:46.190
这些东西都是了解就行了

01:46.190 --> 01:48.190
BSD呢 这个开源协议呢

01:48.190 --> 01:50.190
是比较灵活的 比较开放的

01:50.190 --> 01:52.190
就是说 它开源了过后 甚至允许你

01:52.190 --> 01:54.190
改它的原代码

01:54.190 --> 01:56.190
它的原代码你都可以允许你修改

01:56.190 --> 01:58.190
然后再重新开源就行了

01:58.190 --> 01:59.190
它是个开源系统

01:59.190 --> 02:01.190
另外呢 它是个建制队数据库

02:01.190 --> 02:02.190
既然是建制队数据库

02:02.190 --> 02:04.190
它建的自然是不能重复的

02:04.190 --> 02:06.190
就跟那个Map一样

02:06.190 --> 02:07.190
T是不能重复的

02:07.190 --> 02:09.190
那它值呢 值是可以重复的

02:09.190 --> 02:11.190
而且值呢 可以是下面一些内行

02:11.190 --> 02:13.190
Redis呢 它支持下面这些内行

02:13.190 --> 02:14.190
一个是字不算

02:14.190 --> 02:16.190
字不算是最常用的内行

02:16.190 --> 02:17.190
像我们如果说

02:17.190 --> 02:19.190
就算是去使用这个Redis的话

02:19.190 --> 02:22.190
存的一般 绝大部分情况都是字不算

02:22.190 --> 02:23.190
要对象怎么办

02:23.190 --> 02:25.190
对象你把转换成节省格式去存出

02:25.190 --> 02:26.190
就完事了

02:26.190 --> 02:28.190
另外一个呢 是哈希

02:28.190 --> 02:31.190
哈希这个结构呢

02:31.190 --> 02:33.190
那就是有点像真正的一个对象

02:33.190 --> 02:34.190
哈希这个结构呢

02:34.190 --> 02:36.190
可以在这个结构里面加属性

02:36.190 --> 02:39.190
再加一些建制队的景区都可以

02:39.190 --> 02:40.190
哈希

02:40.190 --> 02:41.190
但是呢我们一般来说

02:41.190 --> 02:42.190
存对象的话

02:42.190 --> 02:44.190
就是把它节省转换成字不算来存

02:44.190 --> 02:45.190
然后呢 列表

02:45.190 --> 02:47.190
列表就相当于是一个数组

02:47.190 --> 02:48.190
就像那个数组

02:48.190 --> 02:50.190
就相当于是GS里面的set

02:50.190 --> 02:51.190
set

02:51.190 --> 02:53.190
那么什么叫有序结构呢

02:53.190 --> 02:54.190
有序结构呢

02:54.190 --> 02:55.190
GS里面呢

02:55.190 --> 02:58.190
没有明确的说

02:58.190 --> 02:59.190
其实在加瓦里面

02:59.190 --> 03:01.190
你学过加瓦的话就很清楚了

03:01.190 --> 03:02.190
加瓦里面有set

03:02.190 --> 03:04.190
无序结构和有序结构

03:04.190 --> 03:05.190
这是无序结构

03:05.190 --> 03:06.190
有序结构呢

03:06.190 --> 03:07.190
就是说

03:07.190 --> 03:08.190
set里面还不能重复嘛

03:08.190 --> 03:09.190
对不对

03:09.190 --> 03:10.190
只不能重复

03:10.190 --> 03:11.190
而有序结构呢

03:11.190 --> 03:12.190
里面呢

03:12.190 --> 03:13.190
它是不重复的排序

03:13.190 --> 03:15.190
它是可以有排序的

03:15.190 --> 03:16.190
这是关于这个

03:16.190 --> 03:18.190
它里边的支持的建设对内销

03:18.190 --> 03:19.190
值得内销

03:19.190 --> 03:20.190
我们只需要了解

03:20.190 --> 03:21.190
字不算就行了

03:21.190 --> 03:22.190
后边我们可以看一下其他的吧

03:22.190 --> 03:23.190
看一下简单聊一下

03:23.190 --> 03:25.190
简单聊一下就行了

03:25.190 --> 03:26.190
然后呢 下面

03:26.190 --> 03:28.190
有别于其他数据库

03:28.190 --> 03:30.190
Redis对数据库的操作

03:30.190 --> 03:31.190
它跟其他数据库有很大的区别

03:31.190 --> 03:33.190
它是在内存里面完成的

03:33.190 --> 03:35.190
你看前面我们学过的

03:35.190 --> 03:36.190
MySQL也好

03:36.190 --> 03:37.190
Mango DB也好

03:37.190 --> 03:39.190
是不是都要去使用内存

03:39.190 --> 03:40.190
使用硬盘

03:40.190 --> 03:41.190
对不对

03:41.190 --> 03:42.190
使用磁盘

03:42.190 --> 03:43.190
磁盘的速度是不是比较慢

03:43.190 --> 03:44.190
而Redis呢

03:44.190 --> 03:46.190
追求非常高的存取效率

03:46.190 --> 03:48.190
就是它的内存里面存数据

03:48.190 --> 03:50.190
那就奇了怪了对吧

03:50.190 --> 03:51.190
内存里面存数据

03:51.190 --> 03:52.190
不是容易丢失吗

03:52.190 --> 03:53.190
不着急

03:53.190 --> 03:55.190
它可以解决这个问题的

03:55.190 --> 03:56.190
由于它在操作

03:56.190 --> 03:57.190
数据的时候

03:57.190 --> 03:58.190
是在内存里面完成的

03:58.190 --> 03:59.190
因此它有这么两个特点

03:59.190 --> 04:02.190
一个是超高的独协效率

04:02.190 --> 04:03.190
磁盘的独协效率

04:03.190 --> 04:05.190
要比硬盘

04:05.190 --> 04:06.190
内存的独协效率

04:06.190 --> 04:07.190
要比磁盘

04:07.190 --> 04:08.190
要快一个几十倍

04:08.190 --> 04:10.190
甚至是几百倍

04:10.190 --> 04:11.190
Redis呢

04:11.190 --> 04:12.190
由于它在内存里面

04:12.190 --> 04:14.190
因此它独协效率很高

04:14.190 --> 04:15.190
但是同样的

04:15.190 --> 04:16.190
它有它的缺陷

04:16.190 --> 04:18.190
因为内存是比较

04:18.190 --> 04:19.190
成本是比较高的

04:19.190 --> 04:21.190
而且是量比较少

04:21.190 --> 04:22.190
而Redis把数据

04:22.190 --> 04:23.190
再放在内存里面

04:23.190 --> 04:25.190
它会消耗大量的内存

04:25.190 --> 04:26.190
因此王望我们

04:26.190 --> 04:27.190
如果说

04:27.190 --> 04:29.190
要搭建Redis服务器的话

04:29.190 --> 04:31.190
王望是需要一个服务器集群

04:31.190 --> 04:32.190
要提供大量的内存

04:32.190 --> 04:34.190
成本是非常非常高的

04:34.190 --> 04:36.190
但是它得到的效果

04:36.190 --> 04:37.190
也是非常好的

04:37.190 --> 04:40.190
正是因为它的特点

04:40.190 --> 04:41.190
它有这么两个

04:41.190 --> 04:42.190
就是因为它在内存里面

04:42.190 --> 04:43.190
操作数据

04:43.190 --> 04:45.190
因此它有这么两个特点

04:45.190 --> 04:46.190
那么但是

04:46.190 --> 04:47.190
它还是一个问题还是要解决

04:47.190 --> 04:48.190
就是如果说

04:48.190 --> 04:50.190
这个程序崩掉了

04:50.190 --> 04:51.190
或者是电脑断电了

04:51.190 --> 04:52.190
重启了

04:52.190 --> 04:53.190
那内存咋办

04:53.190 --> 04:54.190
数据没了

04:54.190 --> 04:55.190
对不对

04:55.190 --> 04:56.190
所以说它的处理方式

04:56.190 --> 04:57.190
是虽然说

04:57.190 --> 04:58.190
你的操作数据

04:58.190 --> 04:59.190
是在内存里面完成的

04:59.190 --> 05:01.190
但是它提供了持久化的功能

05:01.190 --> 05:02.190
我们说持久化

05:02.190 --> 05:03.190
持久化就是

05:03.190 --> 05:05.190
把数据写到磁盘里面

05:05.190 --> 05:06.190
在陌生的情况下

05:06.190 --> 05:07.190
它有很多种方式

05:07.190 --> 05:08.190
在陌生的情况下

05:08.190 --> 05:10.190
它使用异步的方式

05:10.190 --> 05:12.190
将数据写到磁盘

05:12.190 --> 05:13.190
以便重启之后

05:13.190 --> 05:14.190
比方程序重启

05:14.190 --> 05:16.190
比方说服务器重启等等

05:16.190 --> 05:18.190
它会把从磁盘比较恢复

05:18.190 --> 05:19.190
数据到内存

05:19.190 --> 05:21.190
但最终还是在内存里边读写

05:21.190 --> 05:23.190
就这么个仪式

05:23.190 --> 05:24.190
末论情况下

05:24.190 --> 05:25.190
它是隔一段时间

05:25.190 --> 05:26.190
同步仪式

05:26.190 --> 05:27.190
隔一段时间同步仪式

05:27.190 --> 05:28.190
才没张图

05:28.190 --> 05:29.190
给大家大概了解一下

05:29.190 --> 05:30.190
比方说咱们Redis

05:30.190 --> 05:32.190
启动起来过后

05:32.190 --> 05:34.190
我们写数据是写到哪里的

05:34.190 --> 05:35.190
写到内存里面的

05:35.190 --> 05:36.190
无论你写多少字

05:36.190 --> 05:37.190
都是在内存

05:37.190 --> 05:38.190
而且读数据的时候

05:38.190 --> 05:39.190
也是在内存

05:40.190 --> 05:41.190
非常快

05:41.190 --> 05:42.190
但是隔一会

05:42.190 --> 05:43.190
还会把内存的数据

05:43.190 --> 05:44.190
同步到磁盘

05:44.190 --> 05:46.190
隔一会会同步到磁盘

05:46.190 --> 05:48.190
它不一定是立即同步

05:48.190 --> 05:49.190
末论情况下

05:49.190 --> 05:50.190
是隔一段时间同步

05:50.190 --> 05:51.190
那么这种情况

05:51.190 --> 05:53.190
是不是容易造成

05:53.190 --> 05:54.190
数据有丢失

05:54.190 --> 05:55.190
对不对

05:55.190 --> 05:56.190
所以容易造成数据丢失

05:56.190 --> 05:58.190
比方说你写了一次数据

05:58.190 --> 05:59.190
突然断电了

05:59.190 --> 06:00.190
电脑化掉了

06:00.190 --> 06:01.190
那么这个时候

06:01.190 --> 06:02.190
还没有同步到磁盘

06:02.190 --> 06:03.190
是不是数据有丢失了

06:03.190 --> 06:04.190
下一次启动

06:04.190 --> 06:05.190
那么这个数据没了

06:05.190 --> 06:06.190
对不对

06:06.190 --> 06:07.190
这是Redis的特点

06:07.190 --> 06:08.190
它是它的问题

06:08.190 --> 06:09.190
但是我们可以

06:09.190 --> 06:12.190
充分的发扬它的优势

06:12.190 --> 06:15.190
尽量的避开它的劣势

06:15.190 --> 06:16.190
然后如果说

06:16.190 --> 06:17.190
比方说这里程序停止了

06:17.190 --> 06:18.190
内存是不是消失了

06:18.190 --> 06:20.190
但是磁盘里面的数据是不是还有

06:20.190 --> 06:21.190
于是下一次程序启动的时候

06:21.190 --> 06:23.190
它会从磁盘里面恢复数据

06:23.190 --> 06:25.190
然后再写数据

06:25.190 --> 06:26.190
再读数据

06:26.190 --> 06:27.190
又在内存里面读了

06:27.190 --> 06:29.190
它把数据恢复到内存里面去了

06:29.190 --> 06:31.190
然后后面它又同步

06:31.190 --> 06:32.190
然后又写

06:32.190 --> 06:33.190
又写又同步

06:33.190 --> 06:35.190
就这么一个过程

06:35.190 --> 06:37.190
基于它的这么一种特点

06:37.190 --> 06:38.190
它的数据容易丢失

06:38.190 --> 06:40.190
有可能会丢失

06:40.190 --> 06:42.190
因为它的内存内存的空间

06:42.190 --> 06:43.190
也毕竟是有限的

06:43.190 --> 06:45.190
如果说它超过了内存

06:45.190 --> 06:46.190
允许的空间

06:46.190 --> 06:48.190
那么它的数据非常容易丢失的

06:48.190 --> 06:50.190
有些数据它就不能要了

06:50.190 --> 06:51.190
不能保留着了

06:51.190 --> 06:52.190
它只能扔掉

06:52.190 --> 06:53.190
所以说它基于这个特点

06:53.190 --> 06:54.190
它的数据容易丢失

06:54.190 --> 06:57.190
它的存取速度非常非常快

06:57.190 --> 06:59.190
而且它占用的内存比较高

06:59.190 --> 07:01.190
那么这种情况下

07:01.190 --> 07:02.190
它适用于做什么

07:02.190 --> 07:04.190
一般用于它做缓存

07:04.190 --> 07:06.190
缓存的目的是

07:06.190 --> 07:07.190
就是要提高效率

07:07.190 --> 07:08.190
对不对

07:08.190 --> 07:09.190
那Redis它就是

07:09.190 --> 07:11.190
它投起效率是非常非常高的

07:11.190 --> 07:13.190
那比MongoDB都还要高几十倍

07:13.190 --> 07:14.190
上百倍

07:14.190 --> 07:16.190
它不是在尺法里面

07:16.190 --> 07:17.190
它是在内存里面

07:17.190 --> 07:19.190
所以说缓存就是有这么个特点

07:19.190 --> 07:20.190
缓存就是什么呢

07:20.190 --> 07:21.190
我不在乎

07:21.190 --> 07:22.190
就是有的是

07:22.190 --> 07:24.190
我其中一个缓存丢失了

07:24.190 --> 07:25.190
我再去

07:25.190 --> 07:26.190
那数据还有

07:26.190 --> 07:27.190
我数据存在麦色后

07:27.190 --> 07:28.190
存在MongoDB里面了

07:28.190 --> 07:30.190
我重新去拿就行了

07:30.190 --> 07:32.190
然后重新缓存

07:32.190 --> 07:33.190
那数据丢失

07:33.190 --> 07:35.190
不会造成太大的影响

07:35.190 --> 07:38.190
而且它对数据的要求是非常高的

07:38.190 --> 07:41.190
所以Redis非常适合用来做缓存

07:41.190 --> 07:42.190
99%的情况

07:42.190 --> 07:44.190
Redis都是用来做缓存的

07:44.190 --> 07:46.190
因此我们通常用Redis来做缓存

07:46.190 --> 07:47.190
那么缓存的时候

07:47.190 --> 07:48.190
我们应该是一个

07:48.190 --> 07:49.190
怎么样的逻辑

07:49.190 --> 07:50.190
就变成这样的逻辑了

07:50.190 --> 07:51.190
比较这么客户端

07:51.190 --> 07:52.190
一个浏览器

07:52.190 --> 07:53.190
请求服务器

07:53.190 --> 07:55.190
服务器那边就先经过Redis

07:55.190 --> 07:57.190
就在服务器和数据库之间

07:57.190 --> 07:58.190
搭了一层Redis

07:58.190 --> 08:00.190
如果说你用Express来搭服务器的话

08:00.190 --> 08:02.190
就相当于是写来个中间键

08:02.190 --> 08:03.190
先让这个中间键处理

08:03.190 --> 08:04.190
这个中间键一看

08:04.190 --> 08:06.190
Redis里面有没有缓存的

08:06.190 --> 08:07.190
如果说没有缓存

08:07.190 --> 08:08.190
往后继续处理

08:08.190 --> 08:10.190
从数据库里面拿数据库

08:10.190 --> 08:11.190
比方说是mango DB

08:11.190 --> 08:12.190
或者是买捨口都行

08:12.190 --> 08:14.190
从数据库里面拿数据库

08:14.190 --> 08:15.190
拿数据过后是吧

08:15.190 --> 08:16.190
把它缓存起来

08:16.190 --> 08:18.190
然后再想一个客户端

08:18.190 --> 08:19.190
那么下一次请求的时候

08:19.190 --> 08:21.190
有些数据是不是缓存

08:21.190 --> 08:22.190
就有缓存了

08:22.190 --> 08:23.190
缓存命中了

08:23.190 --> 08:24.190
我只直接给你缓存结果

08:24.190 --> 08:25.190
这就在服务器端

08:25.190 --> 08:27.190
这种缓存就是在服务器端缓存

08:27.190 --> 08:29.190
Redis是不是搭电在服务器上的

08:29.190 --> 08:31.190
缓存物在服务器上

08:31.190 --> 08:33.190
我们以前讲漏了接受的时候

08:33.190 --> 08:35.190
是不是说过ATDP缓存

08:35.190 --> 08:37.190
ATDP缓存的是在哪

08:37.190 --> 08:38.190
是在客户端的

08:38.190 --> 08:40.190
它根本就不请求服务器

08:40.190 --> 08:42.190
服务器都拿着请求了

08:42.190 --> 08:44.190
效率最高的一定是客户端的缓存

08:44.190 --> 08:46.190
那么为什么还要服务器缓存呢

08:46.190 --> 08:48.190
大家在头脑里面想一想

08:48.190 --> 08:50.190
你想想这么一个场景

08:50.190 --> 08:52.190
我是一个门户网站

08:52.190 --> 08:55.190
我一天会收到极意是请求

08:55.190 --> 08:57.190
划脏一点

08:57.190 --> 08:58.190
来赌一篇新闻

08:58.190 --> 09:00.190
比方最近拿了一篇新闻

09:00.190 --> 09:01.190
美国又暴动了

09:01.190 --> 09:02.190
那么这种新闻可能

09:02.190 --> 09:04.190
阅读的人很多

09:04.190 --> 09:06.190
如果说没有服务器缓存的话

09:06.190 --> 09:08.190
有一一个请求过来

09:08.190 --> 09:10.190
每个客户端都要缓存

09:10.190 --> 09:11.190
服务器是不是要从数据户

09:11.190 --> 09:13.190
拿一亿次

09:13.190 --> 09:15.190
因为第一个客户端

09:15.190 --> 09:16.190
他没有缓存过

09:16.190 --> 09:17.190
客户端没有缓存过

09:17.190 --> 09:18.190
服务器拿到过后

09:18.190 --> 09:19.190
他从数据户拿人给客户端

09:19.190 --> 09:20.190
要客户端缓存

09:20.190 --> 09:21.190
那么这个客户端

09:21.190 --> 09:22.190
下一次他就不会

09:22.190 --> 09:23.190
发动请求到服务器了

09:23.190 --> 09:24.190
但是其他客户端还要

09:24.190 --> 09:25.190
他没有

09:25.190 --> 09:26.190
其他客户端是不是

09:26.190 --> 09:27.190
还是要请求服务器

09:27.190 --> 09:28.190
服务器还是要从数据户拿

09:28.190 --> 09:29.190
对不对

09:29.190 --> 09:30.190
服务器是不是要

09:30.190 --> 09:32.190
从数据户拿很多很多次

09:32.190 --> 09:33.190
但是这一天之内

09:33.190 --> 09:35.190
服务器的新闻是不是没有变

09:35.190 --> 09:36.190
新闻基本上没有变的

09:36.190 --> 09:37.190
那么我们就可以

09:37.190 --> 09:39.190
把这个新闻存到Redis里面

09:39.190 --> 09:40.190
那么服务器是不是

09:40.190 --> 09:41.190
从数据户里面只需要

09:41.190 --> 09:42.190
拿一次放到Redis里面

09:42.190 --> 09:43.190
那么后续的

09:43.190 --> 09:44.190
我直接存在Redis

09:44.190 --> 09:46.190
直接扔给客户端就完事了

09:46.190 --> 09:48.190
然后再配合客户端的缓存

09:48.190 --> 09:49.190
客户端你自己把它缓存起来

09:49.190 --> 09:51.190
下一次连Redis都不要启动了

09:51.190 --> 09:53.190
下一次你不要你再问我了

09:53.190 --> 09:56.190
直接用你客户端缓存有缓存

09:56.190 --> 09:57.190
那么其他的客户端

09:57.190 --> 09:58.190
没有缓存的

09:58.190 --> 09:59.190
那我就从Redis里面拿

09:59.190 --> 10:00.190
那么这样子是不是

10:00.190 --> 10:01.190
服务器有缓存

10:01.190 --> 10:02.190
客户端有缓存

10:02.190 --> 10:03.190
是不是效率更高

10:03.190 --> 10:04.190
它就是这么一个模具

10:04.190 --> 10:07.190
服务器它也需要缓存的

10:07.190 --> 10:09.190
这是这么一个结构

10:09.190 --> 10:11.190
来看一下很容易明白

10:11.190 --> 10:12.190
然后我们再说一下

10:12.190 --> 10:14.190
这个服务器结构

10:14.190 --> 10:17.190
就是我们在跟我们的前端来说

10:17.190 --> 10:19.190
已经你们在公司里面

10:19.190 --> 10:21.190
十至八九要跟后端开发的人配合

10:21.190 --> 10:22.190
对不对

10:22.190 --> 10:23.190
那么我们Redis一般在哪呢

10:23.190 --> 10:25.190
一般跟我们前端没什么关系

10:25.190 --> 10:26.190
它是这样子

10:26.190 --> 10:28.190
就是咱们浏览器请求服务器

10:28.190 --> 10:29.190
请求的是我们前端服务器

10:29.190 --> 10:31.190
漏的服务器一个中间服务器

10:31.190 --> 10:32.190
对不对

10:32.190 --> 10:33.190
这个服务器一般来充当一个代理

10:33.190 --> 10:35.190
那么这个服务器作为代理去请求谁

10:35.190 --> 10:36.190
请求后端服务器

10:36.190 --> 10:38.190
而Redis在后端服务器上

10:38.190 --> 10:39.190
后端服务器一看

10:39.190 --> 10:40.190
我有缓存没有

10:40.190 --> 10:41.190
有缓存直接扔隔离

10:41.190 --> 10:42.190
然后我们漏的服务器

10:42.190 --> 10:43.190
有缓存没有

10:43.190 --> 10:44.190
有缓存直接扔隔离

10:44.190 --> 10:45.190
然后我们漏的服务器

10:45.190 --> 10:46.190
有缓存没有

10:47.190 --> 10:49.190
但是有后端服务器决定的

10:49.190 --> 10:51.190
如果说后端服务器没有缓存

10:51.190 --> 10:53.190
那么它从数据科里来拿

10:53.190 --> 10:54.190
拿到数据过后

10:54.190 --> 10:55.190
扔隔离的服务器

10:55.190 --> 10:57.190
那么过程是不是要相对慢一点

10:57.190 --> 10:59.190
所以说Redis对Redis的操作

10:59.190 --> 11:00.190
往往是后端服务器

11:00.190 --> 11:01.190
就写夹吧

11:01.190 --> 11:02.190
PGP

11:02.190 --> 11:04.190
这些开发人员来做的事情

11:04.190 --> 11:06.190
跟前端开发者一般来说

11:06.190 --> 11:07.190
没什么关系

11:07.190 --> 11:09.190
但为什么还讲这些课呢

11:09.190 --> 11:11.190
就是一是开放大家的视野

11:11.190 --> 11:12.190
直到后端服务器

11:12.190 --> 11:14.190
有多了一个东西的缓存

11:14.190 --> 11:16.190
另外一个是

11:16.190 --> 11:18.190
万一你们到公司里面去

11:18.190 --> 11:20.190
公司希望把Redis

11:20.190 --> 11:21.190
放到node服务器来

11:21.190 --> 11:22.190
就是请求过来过来

11:22.190 --> 11:23.190
node服务器来

11:23.190 --> 11:24.190
自己来看一下有没有缓存

11:24.190 --> 11:25.190
有缓存直接扔过去

11:25.190 --> 11:27.190
就不要去请求后端服务器来

11:27.190 --> 11:28.190
node服务器如果说没有缓存

11:28.190 --> 11:29.190
从后端服务器拿数据

11:29.190 --> 11:30.190
后端服务器不缓存了

11:30.190 --> 11:32.190
然后有node服务器来缓存

11:32.190 --> 11:33.190
万一遇到这种情况

11:33.190 --> 11:34.190
一般不会

11:34.190 --> 11:36.190
因为我们很多后端的

11:36.190 --> 11:38.190
就是架构里边

11:38.190 --> 11:39.190
框架里边

11:39.190 --> 11:41.190
可以非常

11:41.190 --> 11:44.190
方便的去融入Redis

11:44.190 --> 11:45.190
他们一般就会做了

11:45.190 --> 11:47.190
把这些事情

11:47.190 --> 11:48.190
但是有可能

11:48.190 --> 11:49.190
万一放到这儿

11:49.190 --> 11:50.190
大家要了解

11:50.190 --> 11:52.190
至少了解它怎么回事

11:52.190 --> 11:53.190
所以说我们

11:53.190 --> 11:55.190
跟前端有一没有多少关系

11:55.190 --> 11:56.190
所以这个是个选修课程

11:56.190 --> 11:58.190
我们讲的也不会讲得太深

11:58.190 --> 12:00.190
就讲一下使用层面就行了

12:00.190 --> 12:02.190
把一些基本的概念搞清楚

12:02.190 --> 12:03.190
接下来就是安装了

12:03.190 --> 12:04.190
安装就是我们

12:04.190 --> 12:06.190
首先看一下在Windows里边

12:06.190 --> 12:07.190
安装Redis

12:07.190 --> 12:09.190
Windows实际上是这样

12:09.190 --> 12:10.190
它的官网

12:10.190 --> 12:11.190
它可以支持下载

12:11.190 --> 12:12.190
但下载的

12:12.190 --> 12:13.190
它只支持零那个时候

12:13.190 --> 12:15.190
麦克也是

12:15.190 --> 12:16.190
现在有这个技术上的

12:16.190 --> 12:17.190
对不对

12:17.190 --> 12:19.190
Windows还不支持

12:19.190 --> 12:20.190
所以说

12:20.190 --> 12:22.190
当时能不能在Windows上安

12:22.190 --> 12:23.190
是可以的

12:23.190 --> 12:25.190
需要把它的代码

12:25.190 --> 12:27.190
做一些打包

12:27.190 --> 12:28.190
就非常麻烦

12:28.190 --> 12:29.190
总之非常麻烦就行了

12:29.190 --> 12:30.190
清新的是

12:30.190 --> 12:31.190
微软的

12:31.190 --> 12:34.190
给我们发布的一些安装包

12:34.190 --> 12:36.190
Redis的安装包

12:36.190 --> 12:37.190
不是官方发布的

12:37.190 --> 12:38.190
是微软发布的

12:38.190 --> 12:39.190
所以说你就下载就行了

12:39.190 --> 12:41.190
进入这个地址

12:42.190 --> 12:44.190
下载都是

12:44.190 --> 12:46.190
Github上面的Redis

12:46.190 --> 12:47.190
就发布版本

12:47.190 --> 12:50.190
那么目前下载3.2

12:52.190 --> 12:54.190
下载点进去

12:54.190 --> 12:55.190
那么下载哪一个呢

12:55.190 --> 12:56.190
下载MSI

12:56.190 --> 12:58.190
就是一个安装程序

12:58.190 --> 12:59.190
只有5.8兆

12:59.190 --> 13:01.190
二镜子的安装程序

13:01.190 --> 13:02.190
如果说下载这个东西的话

13:02.190 --> 13:04.190
就是安装包的原码

13:04.190 --> 13:05.190
还要做一些配置

13:05.190 --> 13:06.190
比较麻烦一点

13:06.190 --> 13:08.190
下载这个东西是最简单的

13:08.190 --> 13:10.190
那么这是在Windows上面的安装

13:10.190 --> 13:11.190
咱们看一下

13:11.190 --> 13:13.190
那么下完了过后

13:13.190 --> 13:14.190
就双击安装就行了

13:14.190 --> 13:16.190
咱们来看一下安装过程

13:16.190 --> 13:18.190
这边我们把双击打开

13:18.190 --> 13:19.190
这个Redis

13:19.190 --> 13:20.190
点进下一步

13:20.190 --> 13:21.190
然后同意这个协议

13:21.190 --> 13:22.190
下一步

13:22.190 --> 13:23.190
然后问安装哪

13:23.190 --> 13:24.190
安装哪的话

13:24.190 --> 13:25.190
我们就安装到这

13:25.190 --> 13:26.190
就安装到这

13:26.190 --> 13:27.190
无所谓的

13:27.190 --> 13:28.190
然后这里他问你

13:28.190 --> 13:30.190
要不要把安装的路径

13:30.190 --> 13:31.190
设置到环境面量里面

13:31.190 --> 13:33.190
设置到环境面量有什么好处的

13:33.190 --> 13:34.190
是不是可以使用命令

13:34.190 --> 13:35.190
对不对

13:35.190 --> 13:36.190
那么咱们勾选上

13:36.190 --> 13:37.190
点进下一步

13:37.190 --> 13:38.190
那么这里问你

13:38.190 --> 13:40.190
他的Redis运行的端口号

13:40.190 --> 13:41.190
一般我们数据户来些

13:41.190 --> 13:42.190
都有端口号

13:42.190 --> 13:43.190
对吧

13:43.190 --> 13:45.190
那么我们Redis的端口号

13:45.190 --> 13:46.190
是6379

13:46.190 --> 13:47.190
默认端口

13:47.190 --> 13:48.190
当然你可以感一下

13:48.190 --> 13:50.190
这里来问你要不要

13:50.190 --> 13:51.190
在Windows防火墙

13:51.190 --> 13:53.190
因为Windows它有个防火墙

13:53.190 --> 13:54.190
当然知道对吧

13:54.190 --> 13:55.190
有一些

13:55.190 --> 13:57.190
针对某一些端口的请求

13:57.190 --> 13:59.190
针对某一些端口的通信

13:59.190 --> 14:00.190
可能被防火墙屏蔽

14:00.190 --> 14:02.190
那么他一直把这个东西勾选上

14:02.190 --> 14:04.190
万一你关闭了防火墙

14:04.190 --> 14:05.190
无所谓

14:05.190 --> 14:06.190
如果说你开启了防火墙的话

14:06.190 --> 14:08.190
那么他会设置一个

14:08.190 --> 14:10.190
叫做什么排除规则

14:10.190 --> 14:12.190
就是把这个端口排除在外

14:12.190 --> 14:14.190
你不要去拦截

14:14.190 --> 14:15.190
点下一步

14:15.190 --> 14:17.190
问题就是设置最大的内存

14:17.190 --> 14:18.190
因为我们知道

14:18.190 --> 14:20.190
Redis是放了内存里面了

14:20.190 --> 14:21.190
内存里面

14:21.190 --> 14:22.190
因为内存毕竟

14:22.190 --> 14:24.190
每台计算率都是非常有限的

14:24.190 --> 14:25.190
对不对

14:25.190 --> 14:26.190
它让你去设置一下

14:26.190 --> 14:27.190
最大的内存就是多少

14:27.190 --> 14:29.190
就是这个设置的是什么

14:29.190 --> 14:30.190
就是设置的

14:30.190 --> 14:33.190
最多Redis可以用多少内存

14:33.190 --> 14:35.190
如果说不设置的话

14:35.190 --> 14:37.190
好像默认只是1GB

14:37.190 --> 14:38.190
还是2GB

14:38.190 --> 14:39.190
我忘了

14:39.190 --> 14:40.190
可以自于设置

14:40.190 --> 14:41.190
无所谓

14:41.190 --> 14:43.190
点一下一步

14:43.190 --> 14:44.190
然后点击安装

14:44.190 --> 14:46.190
就非常简单

14:46.190 --> 14:48.190
安装就完了

14:48.190 --> 14:49.190
就安装完了

14:49.190 --> 14:50.190
安装完了过后

14:50.190 --> 14:51.190
我们可以看一下

14:51.190 --> 14:54.190
它在Windows里面安装了一个服务

14:54.190 --> 14:56.190
就是打开密利航

14:56.190 --> 14:59.190
Services.msc

14:59.190 --> 15:03.570
然后我们这里找一下

15:03.570 --> 15:05.570
找一下

15:05.570 --> 15:08.570
找一下叫做Redis

15:08.570 --> 15:10.570
顺便有个服务

15:10.570 --> 15:11.570
服务是不是已经启动起来了

15:11.570 --> 15:13.570
而且是自动启动的

15:13.570 --> 15:14.570
开机自动启动的

15:14.570 --> 15:15.570
那就好了

15:15.570 --> 15:16.570
服务启动起来过后

15:16.570 --> 15:17.570
我们怎么来用呢

15:17.570 --> 15:20.570
打开CMD

15:20.570 --> 15:23.570
那么这里我们可以输入Redis

15:23.570 --> 15:26.570
Cleanse

15:26.570 --> 15:28.570
Redis CD

15:28.570 --> 15:30.570
然后我们这里写个Version

15:30.570 --> 15:31.570
看一下它的版本

15:31.570 --> 15:34.570
我们这里是3.2.1

15:34.570 --> 15:36.570
说明Redis安装成功了

15:36.570 --> 15:38.570
我们下面可能再讲一些

15:38.570 --> 15:39.570
常见的Redis命令

15:39.570 --> 15:41.570
怎么来操作这个数据库

15:41.570 --> 15:42.570
好就完事了

15:42.570 --> 15:44.570
那么这是Windows里面安装

15:44.570 --> 15:45.570
是不是非常简单

15:45.570 --> 15:46.570
那么接下来是

15:46.570 --> 15:47.570
Micron安装Redis

15:47.570 --> 15:49.570
Micron安装野地非常简单

15:49.570 --> 15:51.570
稍微麻烦一点

15:51.570 --> 15:52.570
就是你要安装一个不入

15:52.570 --> 15:53.570
如果说你安装的不入

15:53.570 --> 15:54.570
就非常简单了

15:54.570 --> 15:55.570
安装好了不入

15:55.570 --> 15:56.570
但是怎么安装不入

15:56.570 --> 15:57.570
你们去百度查一下

15:57.570 --> 15:59.570
然后InstallRedis

15:59.570 --> 16:00.570
我都已经安装了

16:00.570 --> 16:02.570
然后就安装完了

16:02.570 --> 16:04.570
然后就是启动Redis服务

16:04.570 --> 16:05.570
如果说你要停滞的话

16:05.570 --> 16:07.570
就是StopRedis服务

16:07.570 --> 16:09.570
如果重新的话就RestartRedis服务

16:09.570 --> 16:10.570
就完了

16:10.570 --> 16:11.570
然后呢

16:11.570 --> 16:12.570
你安装完了过后呢

16:12.570 --> 16:14.570
你可以看一下在麦克里边

16:14.570 --> 16:17.570
我们也可以用RedisCleanse CD

16:17.570 --> 16:18.570
Version

16:18.570 --> 16:20.570
那么这里是6.0.3

16:20.570 --> 16:22.570
版本不一样对不对

16:22.570 --> 16:23.570
没办法

16:23.570 --> 16:24.570
Windows的版本来稍微低一点

16:24.570 --> 16:26.570
不过用法都差不多的

16:26.570 --> 16:27.570
没关系

16:27.570 --> 16:28.570
学习显没有什么障碍

16:28.570 --> 16:30.570
好那么这就是Redis的

16:31.570 --> 16:33.570
它的就是安装

16:33.570 --> 16:34.570
不用再说安装

16:34.570 --> 16:35.570
麦克安装

16:35.570 --> 16:36.570
然后可视化工具

16:36.570 --> 16:38.570
因为我们知道数据库里边

16:38.570 --> 16:40.570
像麦克斯库有什么Levcate

16:40.570 --> 16:41.570
Levcate对不对

16:41.570 --> 16:43.570
有个可视化工具

16:43.570 --> 16:45.570
MangoDB有什么

16:45.570 --> 16:48.570
有RoboMango

16:48.570 --> 16:50.570
或者叫Robo3T

16:50.570 --> 16:51.570
对不对

16:51.570 --> 16:52.570
有个可视化工具

16:52.570 --> 16:53.570
那么Redis呢

16:53.570 --> 16:55.570
其实它不需要什么可视化工具

16:55.570 --> 16:57.570
它的用用一些命令非常方便

16:57.570 --> 16:59.570
而且这个数据库结构非常简单

16:59.570 --> 17:01.570
基本上不需要什么可视化工具

17:01.570 --> 17:03.570
如果说你要安装一个可视化工具

17:03.570 --> 17:04.570
一定要去看到的话

17:04.570 --> 17:05.570
我建议大家可以安装这个

17:05.570 --> 17:07.570
VSCode里面一个插件叫Redis

17:07.570 --> 17:09.570
打开这个碗

17:09.570 --> 17:10.570
你看这里

17:10.570 --> 17:11.570
去安装一个搜一下

17:11.570 --> 17:13.570
叫做Redis

17:13.570 --> 17:14.570
这个插件

17:17.570 --> 17:19.570
你倒是出来呀

17:19.570 --> 17:24.740
哎呀这个网络真的是

17:25.740 --> 17:26.740
等一下吧

17:27.740 --> 17:28.740
就名字就叫Redis

17:28.740 --> 17:29.740
你把安装就完成了

17:29.740 --> 17:31.740
安装完了过后

17:31.740 --> 17:32.740
你这边你左边

17:32.740 --> 17:33.740
你会出现一个

17:33.740 --> 17:34.740
点击右键

17:34.740 --> 17:36.740
你会出现一个叫Redis Explorer

17:36.740 --> 17:37.740
就这玩意

17:38.740 --> 17:39.740
要安装一下就完成了

17:39.740 --> 17:40.740
安装完了过后

17:40.740 --> 17:41.740
左边你会

17:41.740 --> 17:42.740
它会自动出现这个东西

17:42.740 --> 17:43.740
我这里把关掉了

17:43.740 --> 17:44.740
把这个构线上

17:44.740 --> 17:45.740
Redis Explorer

17:45.740 --> 17:46.740
就是Redis的窗口

17:46.740 --> 17:48.740
那么你们这边一开始

17:48.740 --> 17:49.740
应该是没有的

17:49.740 --> 17:50.740
然后这里点击加号

17:50.740 --> 17:51.740
可以打开

17:51.740 --> 17:52.740
可以进行一个连接

17:52.740 --> 17:53.740
连接本机

17:53.740 --> 17:54.740
本机的端口号是这个

17:54.740 --> 17:55.740
那么有没有密码呢

17:55.740 --> 17:57.740
Redis它可以设置密码的

17:57.740 --> 17:59.740
但是我们一般也不用去设置密码

17:59.740 --> 18:00.740
原因跟MangoDB一样

18:00.740 --> 18:02.740
我们后边可以说一说

18:02.740 --> 18:03.740
为什么呢

18:03.740 --> 18:04.740
因为我们往往是这样子

18:04.740 --> 18:05.740
给它说一下

18:05.740 --> 18:06.740
它往往可以不用设置密码

18:06.740 --> 18:08.740
因为Redis往往在这

18:08.740 --> 18:09.740
看到没

18:09.740 --> 18:10.740
后端服务去连它

18:10.740 --> 18:12.740
那么整个后端服务器是屏蔽的

18:12.740 --> 18:14.740
只能是我们的前端服务器去连

18:14.740 --> 18:16.740
它是有限制的

18:16.740 --> 18:18.740
我们的客户端是不可能去连这个服务器的

18:18.740 --> 18:19.740
是连不到的

18:19.740 --> 18:21.740
因此Redis即便没有密码

18:21.740 --> 18:22.740
它也不会包住给外面

18:22.740 --> 18:23.740
外面也是连不到它的

18:23.740 --> 18:24.740
所以说那也没关系

18:24.740 --> 18:25.740
因为我们的服务器

18:25.740 --> 18:27.740
往往会有一些安全设置

18:27.740 --> 18:28.740
包括MangoDB也好

18:28.740 --> 18:29.740
Mango Redis也好

18:29.740 --> 18:30.740
都可以这样做

18:30.740 --> 18:31.740
都可以不用去设密码

18:31.740 --> 18:33.740
不用去设这个权限

18:33.740 --> 18:35.740
这里是

18:35.740 --> 18:36.740
咦

18:36.740 --> 18:37.740
我把它戳到哪了

18:37.740 --> 18:38.740
Basecode

18:38.740 --> 18:40.740
那么这里我们点连接就完事了

18:40.740 --> 18:41.740
它说连接就上了

18:41.740 --> 18:42.740
那么这里服务器展开

18:42.740 --> 18:43.740
这就是它的数据库

18:43.740 --> 18:45.740
它默认有16个

18:45.740 --> 18:47.740
默认有16个

18:47.740 --> 18:49.740
16个库在这里边

18:49.740 --> 18:50.740
那么它的用法

18:50.740 --> 18:52.740
就你不用去管

18:52.740 --> 18:53.740
它的数据是

18:53.740 --> 18:54.740
到底是存在哪个库的

18:54.740 --> 18:55.740
无所谓

18:55.740 --> 18:56.740
随便存到哪个数据库

18:56.740 --> 18:58.740
无所谓它自己管理

18:58.740 --> 18:59.740
只需要把数据扔进去

18:59.740 --> 19:01.740
知道怎么把数据扔进去

19:01.740 --> 19:02.740
怎么把数据存出来

19:02.740 --> 19:03.740
你看我这里是不是有两个

19:03.740 --> 19:04.740
两个

19:04.740 --> 19:05.740
两条数据

19:05.740 --> 19:06.740
一条数据的

19:06.740 --> 19:07.740
键是什么呢

19:07.740 --> 19:08.740
Name

19:08.740 --> 19:09.740
值呢

19:09.740 --> 19:10.740
一条数据的键是什么呢

19:10.740 --> 19:11.740
键是A级

19:11.740 --> 19:12.740
值是1011

19:12.740 --> 19:13.740
它可能存到这里

19:13.740 --> 19:14.740
可能存到这里

19:14.740 --> 19:15.740
它存到哪里

19:15.740 --> 19:16.740
不用管

19:16.740 --> 19:17.740
它自行管理的

19:17.740 --> 19:18.740
你不用去在意它到底存到吗

19:18.740 --> 19:19.740
我们只需要把键存

19:19.740 --> 19:20.740
键值队扔进去

19:20.740 --> 19:21.740
然后在任何时候

19:21.740 --> 19:22.740
把键值队存出来

19:22.740 --> 19:23.740
取出来就完事了

19:23.740 --> 19:24.740
所以它跟其他的

19:24.740 --> 19:25.740
像麦生贺数据库

19:25.740 --> 19:26.740
麦国地匿数据库不太一样

19:26.740 --> 19:27.740
麦国地匿数据库

19:27.740 --> 19:28.740
我们要自己手动去

19:28.740 --> 19:29.740
兼顾兼表

19:29.740 --> 19:30.740
这些东西都没有

19:30.740 --> 19:31.740
在Redis里面都没有

19:31.740 --> 19:32.740
它只有键值队

19:32.740 --> 19:33.740
键值队扔进去取出来

19:33.740 --> 19:34.740
就完事了

19:34.740 --> 19:37.740
这就是Redis的安装

19:37.740 --> 19:39.740
以它的一些基本概念

19:39.740 --> 19:40.740
说一下

19:40.740 --> 19:41.740
完了

