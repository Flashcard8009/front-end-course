WEBVTT

00:00.050 --> 00:08.050
好 拿回去 之前学数据库 是不是学了安装完了过后就开始学习如何来原生操作

00:08.050 --> 00:13.050
对吧 直接对数据库定义操作 蛮够地币如此 卖色库如此 那么Redis仍然如此

00:13.050 --> 00:17.050
咱们这一刻来学习 直接操作这个Redis数据库 不通过任何程序

00:17.050 --> 00:24.050
那么怎么来直接操作 里边非常简单 Redis应该说是咱们这几个数据库里边学起来最简单的

00:25.050 --> 00:30.050
首先你要进入命令交互模式 就像卖色库里要输入一个卖色库命令 对吧

00:30.050 --> 00:34.050
猫狗地币 你要输入一个就是猫狗命令 这里Redis也是一样

00:34.050 --> 00:41.050
Redis呢 它要输入的命令叫做Redis City 就是命令行模式 进入它的交互模式

00:41.050 --> 00:48.050
一回它就进入了 就这么简单 默认的连接的主机呢 是本机 端口号呢 就是默认的端口号

00:49.050 --> 00:55.050
完了 对吧 没了 那么如果说你要连别的主机的话 加个横杆也起 连别的主机

00:55.050 --> 00:59.050
如果说端口号有变动的话 那么加上一个横杆屁 连端口号

00:59.050 --> 01:02.050
如果说不变的话就是这样子 那么这里就可以写了

01:02.050 --> 01:09.050
我们先写个简单命令吧 就拼 拼 心思上就是看一下连通没有

01:09.050 --> 01:15.050
它给你一个拼一个胖 拼胖嘛 然后它表示连通 就玩笑了

01:16.050 --> 01:20.050
那么如果说你要退出的话 按康处加C 或者是康处加D都可以退出

01:20.050 --> 01:24.050
这就是进入的交互模式 那么这种模式是没有认证的

01:24.050 --> 01:29.050
也就是说我不需要输入任何的密码就可以 就是正常的使用了

01:29.050 --> 01:34.050
那如果说你需要输入密码怎么办呢 就顺便说一下 认证模式非常非常简单

01:34.050 --> 01:39.050
Redis里面的认证特别特别简单 怎么做呢 你首先进入它的交互式命令

01:39.050 --> 01:43.050
进入之后我们可以去设置config set 可以设置它的一个配置

01:43.050 --> 01:50.050
其中一个配置叫做require pass 就是需要密码 需要password的缩写密码

01:50.050 --> 01:57.050
那密码是什么呢 set 我们设置需要的密码 密码呢 比方说我们设置成123 123

01:57.050 --> 02:04.050
一回车 回车之后我们来看检查一下 检查一下咱们的密码设置有没有通过呢

02:04.050 --> 02:11.050
setgetrequirepass 就是得到这个配置一回车 那么你看一下 我们的配置是不是已经设置好了

02:11.050 --> 02:15.050
对不对 它其实就是一个配置文件 配置设置 通过命令去设置有完事了

02:15.050 --> 02:21.050
设置它的就是密码为123 123 好 设置完了过后我们现在退出 检查我们再来看

02:21.050 --> 02:25.050
那么现在是不是有密码了 有密码过后我们再进入这个命令

02:25.050 --> 02:33.050
然后我们再来拼 那么它告诉你出了问题了 没有认证 必须要认证

02:33.050 --> 02:36.050
那么也就是说你需要输入密码 不然的话你啥事都做不了

02:36.050 --> 02:40.050
你能不能进去 能进去 但是你啥事都做不了 那怎么来输入密码呢

02:40.050 --> 02:46.050
也非常简单 OS OS就是表示认证 我给它一个密码 123 123

02:46.050 --> 02:49.050
如果说你输入错误的话 那它不会告诉你密码错误

02:49.050 --> 02:57.420
然后我们这里输入 OS 123 123 一回车 表示ok ok 过后呢 我现在就可以了

02:57.420 --> 03:03.420
你看评 是没有问题了 对不对 好 那如果说你要把密码去掉

03:03.420 --> 03:06.420
因为我们一般来说也不需要这个密码 对吧 我们把密码去掉

03:06.420 --> 03:13.420
好 那怎么来去呢 还是一样的config set require pass 为什么 空置无窍

03:13.420 --> 03:20.420
两个双一号 两个单一号都可以 好 一回车 那么现在我们来看一下config get require pass

03:20.420 --> 03:25.420
所以变成空置无窍了 那么现在我们退出 注意啊 现在退出过后呢

03:25.420 --> 03:30.420
你把密码修盖为空置后 你需要重启服务 那么Windows上重启服务

03:31.420 --> 03:39.420
到服务里边 右键 重新启动 那么在Mac上面重启服务呢 就可以用brew services restore

03:39.420 --> 03:48.420
重新启动一下服务 那么去一下就把密码去掉了 就完事了 你看一下吧

03:48.420 --> 03:53.420
设置认证密码 使用认证密码进入 先进入这个交控模式

03:53.420 --> 03:58.420
然后用OS来输入密码 好 那么现在我们来试一下

03:59.420 --> 04:01.420
Redis city

04:01.420 --> 04:05.420
好 我来拼一下 没问题了 对吧 不需要密码了

04:05.420 --> 04:08.420
好 那么这就是如何来进入Redis的命令交控模式

04:08.420 --> 04:11.420
好 接着接下来就说 进入交控模式如何我们可以干吗

04:11.420 --> 04:13.420
无非就是操作建筑队吗

04:13.420 --> 04:17.420
好 那么我这里为了后边学习啊

04:17.420 --> 04:21.420
我们为了学习这些命令 这些命令全部都不用备 千万不要去备

04:21.420 --> 04:24.420
我们到时候呢 需要用到什么就来查去就行了 这些东西我也备不住

04:24.420 --> 04:27.420
那么我们为了让你们学 更加顺利的学习啊

04:27.420 --> 04:32.420
我这里先说两个命令 一个命令呢 是keys 信号

04:32.420 --> 04:37.420
这是什么意思呢 这是得到所有的啊 你看这 得到满足条件的

04:37.420 --> 04:40.420
后边是一个就是有点类似于郑德表达式

04:40.420 --> 04:44.420
就有点类似于路径的那种书写方式 就是Express的路径书写方式

04:44.420 --> 04:48.420
那么得到满足条件的所有的keys

04:48.420 --> 04:51.420
因为它不是建设队数据控吗 那么它里边有哪些key一回车

04:52.420 --> 04:56.420
那么它这里给你写了一个amity array 什么意思 就是我这个数据库里边啥都没有

04:56.420 --> 05:00.420
是空的 你看一下 我把轻空了 之前好像有两个我把轻空了

05:00.420 --> 05:04.420
那么点击 点击 好的呀 是不是轻空了

05:04.420 --> 05:08.420
其实我们都不用在这里看啊 这个命令你以后相信它 它一定是没问题的

05:08.420 --> 05:12.420
得到了得到了所有的keys 接下来再看啊

05:12.420 --> 05:16.420
那如果说我们现在我们往里边加一些建置队呢 怎么加呢

05:16.420 --> 05:22.420
地方说我们这里简单加一个set keys 比方说a等于1

05:22.420 --> 05:26.420
然后再来一个set b等于2

05:26.420 --> 05:30.420
所以说有两个进队 对吧 a等于1 b等于2 那么现在我们来看一下keys

05:30.420 --> 05:34.420
是不是有两个 对不对 B和A 那么这个数据

05:34.420 --> 05:38.420
你不能想当然的认为就是按照你设置的数据来 不一定的

05:38.420 --> 05:42.420
这个不一定的 建置队嘛 对吧 它是没有数据的

05:42.420 --> 05:46.420
好 那么这里呢 就设置好了啊 我们可以到这边看一下这个地方

05:46.420 --> 05:51.420
我们应该可以在这里刷新一下 是吧 出现了B和A对吧

05:51.420 --> 05:55.420
出现B和A 然后这个数字好像没有给你更新啊 它这个UI

05:55.420 --> 06:00.420
做的还是有点问题 不过没关系 因为Redis能够一般不太依赖这个UI

06:00.420 --> 06:04.420
不太依赖这个就是可实化工具 好 接下来我们继续来

06:04.420 --> 06:08.420
那么接下来我们来看一下这个下面这个命令 Exist表示的是

06:08.420 --> 06:12.420
判断有一些key是不是存在 那么我们可以怎么来写呢 Exist

06:12.420 --> 06:16.420
好 那么它的后面可以跟多个key 比方说跟一个A 它告诉你

06:16.420 --> 06:21.420
我跟那个key存在几个呢 存在一个 它那个key是唯一的对吧 肯定是只有一个

06:21.420 --> 06:26.420
那如果说有些个A和B存在几个呢 是不是这样写的两个key

06:26.420 --> 06:29.420
那么这两个key中存在两个 就这么个意思

06:29.420 --> 06:32.420
如果说你给A B C 那存在几个呢 是不是还是两个 对吧

06:32.420 --> 06:35.420
一共只有A和B两个 好 这是一个Z

06:35.420 --> 06:39.420
这个东西不用备啊 就是体验一下 它有这么一些功能

06:39.420 --> 06:43.420
然后呢 将来如果说你要用到 那你可以再进行查询

06:43.420 --> 06:48.420
好 接下来我们来看下面这个 得到一个key的类型 Type T

06:48.420 --> 06:52.420
那么Type A 看一下A的类型是啥 如果说你给了一个不存在的key

06:52.420 --> 06:55.420
那么它就告诉你这个类型没有 因为它根本就不存在

06:55.420 --> 06:59.420
好 那如果说我写一个Type A 它得到的类型是实均

06:59.420 --> 07:02.420
得到的类型是实均 没问题吧

07:02.420 --> 07:05.420
这个都是实均 它里边是不存在什么integer

07:05.420 --> 07:08.420
不存在什么数字的 它都是支付串

07:08.420 --> 07:11.420
好 接下来再看下面这个 DB Size

07:11.420 --> 07:14.420
这个呢 是得到key的数量 直接回车

07:14.420 --> 07:17.420
你看 它告诉有两个key 对吧 得到key的数量

07:17.420 --> 07:21.420
好 接下来再看这个 T TL A 会不会有更个key子

07:21.420 --> 07:24.420
这个是什么呢 得到的是key的过期时间

07:24.420 --> 07:28.420
那么这个过期时间得到的是-1 这个-1啥意思呢

07:28.420 --> 07:31.420
-1 表示这个key 这个数据它永不过期

07:31.420 --> 07:34.420
当时我们设置了A等于1 对不对

07:34.420 --> 07:37.420
表示它永不过期 就这么个意思

07:37.420 --> 07:40.420
能力啊 那么-1 表示永不过期

07:40.420 --> 07:43.420
那如果说你给了一次一个不存在的key呢

07:43.420 --> 07:46.420
那么这个时候表示-2 表示的是它不存在

07:46.420 --> 07:48.420
这个key子是根本是不存在的

07:48.420 --> 07:51.420
一样的意思吧 好 再来

07:51.420 --> 07:54.420
那如果说我们要设置过期时间怎么设置呢

07:54.420 --> 07:56.420
expire 通过这个方式来设置

07:56.420 --> 07:58.420
比方说我们通过 expire key

07:58.420 --> 08:01.420
key我们设置A 不是等于1吗

08:01.420 --> 08:04.420
我给它设置一个过期时间 我给它设置20秒

08:04.420 --> 08:08.420
它单位是秒 20秒钟过后

08:08.420 --> 08:11.420
它这个key子会过期 过期会怎么样呢

08:11.420 --> 08:14.420
它就会把它删除 好 咱们回收

08:14.420 --> 08:16.420
那么接下来我们再用T TL A 你看

08:16.420 --> 08:20.420
还有18秒 还有17秒 还有15秒 对吧

08:20.420 --> 08:24.420
等它变成0过后了 它就会给你删除了过期

08:25.420 --> 08:27.420
对吧 非常简单

08:27.420 --> 08:31.060
再来看看 稍等一下

08:31.060 --> 08:33.060
3

08:33.060 --> 08:34.060
1

08:34.060 --> 08:35.060
0

08:35.060 --> 08:37.060
好 富二了 富二是什么意思

08:37.060 --> 08:38.060
富二是不是不存在了

08:38.060 --> 08:41.060
然后我们来用keys 新号得到所有的key

08:41.060 --> 08:43.060
来看一下 这就只有一个b了

08:43.060 --> 08:45.060
对吧 就这么简单

08:45.060 --> 08:47.060
它在电子堆里边可以设置过期时间

08:47.060 --> 08:49.060
那么这一点是不是跟其他数据库有很大的区别

08:49.060 --> 08:51.060
那么跟缓存结合是不是非常好

08:51.060 --> 08:54.060
而缓存是不是广望都会有过期时间 对不对

08:54.060 --> 08:56.060
当然如果说你不需要它过期的话

08:56.060 --> 08:59.060
它默认就是富一 永远不过期

08:59.060 --> 09:00.060
好 接下来下一个

09:00.060 --> 09:01.060
rename

09:01.060 --> 09:04.060
rename是把一个q的key重新命名为一个新的key

09:04.060 --> 09:06.060
把名字给它改一下

09:06.060 --> 09:08.060
刚才里边不是有一个b等于2吗

09:08.060 --> 09:10.060
对不对 是个b等于2

09:10.060 --> 09:12.060
好 我们再看这边

09:13.060 --> 09:15.060
有个b等于2 对吧

09:15.060 --> 09:17.060
那么现在我们接下来要做的事情

09:17.060 --> 09:21.060
把b改成c 那么我们可以用rename bc

09:21.060 --> 09:23.060
好 这里我们刷新一下

09:23.060 --> 09:25.060
这变成c了 就这么简单

09:25.060 --> 09:27.060
这么简单 非常简单

09:27.060 --> 09:29.060
接下来我们继续

09:29.060 --> 09:33.060
dale 这里是三除指定的key

09:33.060 --> 09:34.060
三除指定的key

09:34.060 --> 09:36.060
来吧 删除一下

09:36.060 --> 09:37.060
比方说我们现在用dale

09:37.060 --> 09:38.060
三除哪个key呢

09:38.060 --> 09:40.060
三除b

09:40.060 --> 09:41.060
后面可以写多个

09:41.060 --> 09:43.060
三除b、c、d 这个key

09:43.060 --> 09:44.060
根据key指去删除

09:44.060 --> 09:46.060
好 删除完了过后来我们来看一下

09:48.060 --> 09:49.060
这边呢

09:49.060 --> 09:50.060
刷新

09:51.060 --> 09:53.060
这里是c的 必没有了

09:53.060 --> 09:56.060
这里的结构就是它删除了数量

09:56.060 --> 09:57.060
我们这里三除c

09:57.060 --> 09:58.060
它告诉你删除了一个

09:58.060 --> 09:59.060
接下来我们用key指

09:59.060 --> 10:01.060
信号 是不是都没有了

10:01.060 --> 10:02.060
这边刷新也没有了

10:02.060 --> 10:03.060
其实我们不用看这边

10:03.060 --> 10:04.060
不用去看这边

10:06.060 --> 10:07.060
这是通用的

10:07.060 --> 10:09.060
无论因为我们知道

10:09.060 --> 10:10.060
简子堆里边

10:10.060 --> 10:12.060
简都是一个固定的简

10:12.060 --> 10:14.060
纸呢 它可以是字无串

10:14.060 --> 10:15.060
可以是列舌 可以是哈希

10:15.060 --> 10:16.060
可以是很多东西

10:16.060 --> 10:18.060
但是我们平常用的最多的

10:18.060 --> 10:19.060
就是字无串

10:19.060 --> 10:21.060
无论你是什么类型

10:21.060 --> 10:22.060
它有一些通用的命令

10:22.060 --> 10:23.060
我们现在讲的是通用的命令

10:23.060 --> 10:25.060
就这些东西是通用的

10:25.060 --> 10:26.060
接下来我们来看一下

10:26.060 --> 10:28.060
还有哪些通用的命令呢

10:28.060 --> 10:29.060
就是关于数据库

10:29.060 --> 10:30.060
之前我们也看到了

10:30.060 --> 10:31.060
Redis里边

10:31.060 --> 10:33.060
它给我们默正建立了

10:33.060 --> 10:35.060
16个数据库

10:35.060 --> 10:36.060
我们当时说

10:36.060 --> 10:37.060
这16个数据库

10:37.060 --> 10:38.060
你不用自己去新建

10:38.060 --> 10:39.060
跟你没有什么关系

10:39.060 --> 10:40.060
那么这些数据库

10:40.060 --> 10:41.060
默正情况下

10:41.060 --> 10:42.060
MangoDB

10:42.060 --> 10:43.060
Redis

10:43.060 --> 10:44.060
它都会自己处理

10:44.060 --> 10:45.060
它怎么处理呢

10:45.060 --> 10:46.060
默正情况下

10:46.060 --> 10:48.060
它会给你建16个数据库

10:49.060 --> 10:50.060
那么默正情况下

10:50.060 --> 10:51.060
它会把建置会放哪呢

10:51.060 --> 10:53.060
放到第1个数据库里边去

10:53.060 --> 10:54.060
每个数据库

10:54.060 --> 10:55.060
它相对是独立的

10:55.060 --> 10:56.060
相互不干扰的

10:56.060 --> 10:58.060
就第1个数据库里边的建

10:58.060 --> 11:00.060
和第2个数据库里边的建

11:00.060 --> 11:01.060
是可以相同的

11:01.060 --> 11:02.060
相互不干扰的

11:02.060 --> 11:03.060
它是独立的空间

11:03.060 --> 11:04.060
那么这一点

11:04.060 --> 11:05.060
我们通常建议

11:05.060 --> 11:06.060
没有必要去管

11:06.060 --> 11:07.060
如果说我们有些

11:07.060 --> 11:08.060
长期相当还可以

11:08.060 --> 11:09.060
可以用一下

11:09.060 --> 11:10.060
比方说

11:10.060 --> 11:12.060
我们缓存什么呢

11:12.060 --> 11:13.060
缓存

11:13.060 --> 11:15.060
用户的缓存就放到这

11:15.060 --> 11:16.060
新闻的缓存

11:16.060 --> 11:17.060
我就放到这个地方

11:17.060 --> 11:20.060
什么一页面的缓存就放到这

11:20.060 --> 11:21.060
别的意思吧

11:21.060 --> 11:23.060
我们可以用不同的数据库

11:23.060 --> 11:24.060
缓存不同的东西

11:24.060 --> 11:25.060
那么我们怎么来切换

11:25.060 --> 11:26.060
这个数据库呢

11:26.060 --> 11:27.060
切换数据库呢

11:27.060 --> 11:28.060
非常简单

11:28.060 --> 11:30.060
默认情况下使用的是滴笔铃

11:30.060 --> 11:31.060
这个数据

11:31.060 --> 11:33.060
铃枪那是数据库的下标

11:33.060 --> 11:34.060
那么我们要换数据库

11:34.060 --> 11:35.060
就直接使用深耐克车

11:35.060 --> 11:36.060
比方说要换到

11:36.060 --> 11:38.060
下标为2的数据库

11:38.060 --> 11:39.060
所以那个是2

11:39.060 --> 11:40.060
那么我们

11:40.060 --> 11:41.060
目前换到

11:41.060 --> 11:42.060
这有第二个数据库了

11:42.060 --> 11:43.060
那么现在我们来看一下

11:43.060 --> 11:44.060
前面的提示服

11:44.060 --> 11:45.060
是不是都有个2了

11:45.060 --> 11:47.060
然后我们有一个name

11:47.060 --> 11:48.060
比方说凳哥

11:48.060 --> 11:49.060
设置一个数据

11:49.060 --> 11:51.060
那么2里边我们来刷新一下

11:51.060 --> 11:53.060
它里边说一个name了

11:53.060 --> 11:54.060
对不对

11:54.060 --> 11:55.060
就这么个意思

11:55.060 --> 11:56.060
就这么个意思

11:56.060 --> 11:58.060
这是切换数据库

11:58.060 --> 12:00.060
一般来说我们也不用去切换它

12:00.060 --> 12:02.060
然后接下来的是flashDB

12:02.060 --> 12:03.060
这啥意思呢

12:03.060 --> 12:06.060
删除当前数据库的所有的key

12:06.060 --> 12:08.060
删除当前数据库里边

12:08.060 --> 12:10.060
所有的key

12:11.060 --> 12:13.060
比方说要flashDB

12:13.060 --> 12:14.060
那么它会删除哪一个呢

12:14.060 --> 12:15.060
目前用的是

12:15.060 --> 12:17.060
第二个就是下标为2的数据库

12:17.060 --> 12:19.060
还会把下标为2的数据库里边的

12:19.060 --> 12:21.060
所有键子都全部给上完

12:22.060 --> 12:23.060
这样子上完

12:23.060 --> 12:25.060
上完过后你看一下key

12:25.060 --> 12:27.060
是没了对不对

12:27.060 --> 12:29.060
那如果说你用flash all

12:29.060 --> 12:31.060
不管你现在再哪个下标

12:31.060 --> 12:32.060
它就把整个数据库

12:32.060 --> 12:33.060
所有的东西全部给上了

12:33.060 --> 12:35.060
哪怕别的数据库里边有东西

12:35.060 --> 12:36.060
全部给上了

12:36.060 --> 12:38.060
就这么个意思

12:38.060 --> 12:39.060
能力非常好

12:39.060 --> 12:40.060
非常简单

12:40.060 --> 12:42.060
那么这些都是通用的命令

12:42.060 --> 12:43.060
好学管的通用命令

12:43.060 --> 12:45.060
我们现在切回去

12:45.060 --> 12:47.060
切回去过后了就没有前面的提示了

12:47.060 --> 12:48.060
没有下标

12:48.060 --> 12:49.060
默认为您在下标了

12:49.060 --> 12:50.060
它就没有给你提示了

12:50.060 --> 12:51.060
现在我们来看

12:51.060 --> 12:53.060
主要是看自不错的操作

12:53.060 --> 12:55.060
操作也特别特别简单

12:55.060 --> 12:56.060
那么怎么来操作呢

12:56.060 --> 12:57.060
无非就是设置一个值

12:57.060 --> 12:58.060
得到一个值

12:58.060 --> 12:59.060
删除一个值

12:59.060 --> 13:00.060
我们不就是这些东西吗

13:00.060 --> 13:01.060
好比方说

13:01.060 --> 13:02.060
我们要设置一个值

13:02.060 --> 13:03.060
怎么设置呢

13:03.060 --> 13:04.060
我们就用set

13:04.060 --> 13:05.060
刚才学的命令

13:05.060 --> 13:07.060
比方说我们设置一个name

13:07.060 --> 13:09.060
为

13:09.060 --> 13:10.060
我们就a等于1

13:10.060 --> 13:11.060
简单一点

13:11.060 --> 13:13.060
那么后边可以是可选的

13:13.060 --> 13:16.060
就是要不要去设置过期时间

13:16.060 --> 13:18.060
如果说你要设置的话

13:18.060 --> 13:19.060
那么你就直接写

13:19.060 --> 13:22.060
比方说我要10秒钟过期

13:22.060 --> 13:23.060
10秒钟过期

13:23.060 --> 13:25.060
咱们来看一下

13:26.060 --> 13:28.060
咱也写错了

13:30.060 --> 13:32.060
这里应该写错了

13:32.060 --> 13:34.060
设置秒钟应该是

13:34.060 --> 13:36.060
expire过期时间

13:36.060 --> 13:39.060
那么后边设置一个10

13:39.060 --> 13:41.060
那么现在我们ttl看一下

13:41.060 --> 13:42.060
是不是还有8秒

13:42.060 --> 13:43.060
还有7秒

13:43.060 --> 13:44.060
还有6秒

13:44.060 --> 13:45.060
t是

13:45.060 --> 13:46.060
是不是还有个a

13:46.060 --> 13:47.060
那等一会

13:47.060 --> 13:48.060
等一会了过后

13:48.060 --> 13:49.060
我们来看一下

13:49.060 --> 13:50.060
那么现在是没了

13:50.060 --> 13:51.060
10秒钟过期

13:51.060 --> 13:53.060
如果说你不设置过期时间的话

13:53.060 --> 13:55.060
那么它就是永不过期

13:55.060 --> 13:58.060
过期时间可以设置为秒

13:58.060 --> 13:59.060
也可以设置为毫秒

13:59.060 --> 14:00.060
关于这些细节

14:00.060 --> 14:01.060
你们可以去

14:01.060 --> 14:03.060
反而是设置到细节的地方

14:03.060 --> 14:05.060
你就可以去看官网文道

14:06.060 --> 14:07.060
因为是扣成那边

14:07.060 --> 14:08.060
讲得太细了

14:08.060 --> 14:09.060
在过后就把扣成那场了

14:09.060 --> 14:11.060
没有什么多套意义

14:11.060 --> 14:12.060
看一下document

14:12.060 --> 14:14.060
document里边有一个

14:14.060 --> 14:16.060
full list of command

14:16.060 --> 14:18.060
整个mini的列表

14:18.060 --> 14:19.060
那么让你去搜一下

14:19.060 --> 14:22.060
搜一下我们就搜set吧

14:22.060 --> 14:24.060
setmini

14:27.060 --> 14:31.160
set

14:31.160 --> 14:33.160
set

14:34.160 --> 14:35.160
setmini

14:35.160 --> 14:39.750
还要找一找

14:39.750 --> 14:40.750
set

14:40.750 --> 14:44.260
点进去看一下

14:44.260 --> 14:45.260
现在告诉你

14:45.260 --> 14:46.260
下面其实也有例子

14:46.260 --> 14:48.260
你如果说前面英文看不懂的话

14:48.260 --> 14:49.260
你看一下下面的例子也知道了

14:49.260 --> 14:50.260
set

14:50.260 --> 14:51.260
不求全大了

14:51.260 --> 14:52.260
set keys

14:52.260 --> 14:54.260
建置对

14:54.260 --> 14:56.260
然后set

14:56.260 --> 14:57.260
建值

14:57.260 --> 14:58.260
然后后面跟上

14:58.260 --> 15:00.260
ex 60表示秒数

15:00.260 --> 15:01.260
那么它告诉你

15:01.260 --> 15:03.260
可以设置ex就表示秒数

15:03.260 --> 15:05.260
px表示毫秒数

15:05.260 --> 15:07.260
nx表示什么意思呢

15:07.260 --> 15:08.260
表示如果说它不存在的话

15:08.260 --> 15:09.260
我才设置

15:09.260 --> 15:11.260
exx表示

15:11.260 --> 15:13.260
它存在的时候我才设置

15:13.260 --> 15:14.260
默认情况下是什么呢

15:14.260 --> 15:15.260
默认情况下就是

15:15.260 --> 15:16.260
它不存在就设置

15:16.260 --> 15:17.260
就该添加一个键

15:17.260 --> 15:18.260
如果说存在的话

15:18.260 --> 15:19.260
那么就给它覆盖掉

15:19.260 --> 15:20.260
对不对

15:20.260 --> 15:21.260
就这么个意思

15:21.260 --> 15:23.260
好这是

15:23.260 --> 15:24.260
设置值

15:24.260 --> 15:25.260
非常简单

15:25.260 --> 15:26.260
我再来设置一下

15:26.260 --> 15:27.260
a等于1

15:27.260 --> 15:29.260
然后b等于2

15:29.260 --> 15:31.260
c等于3

15:31.260 --> 15:32.260
好那么现在有三个值的

15:32.260 --> 15:33.260
对不对

15:33.260 --> 15:35.260
有三个值的

15:35.260 --> 15:37.260
好然后我继续看

15:37.260 --> 15:38.260
那么现在我们如何来

15:38.260 --> 15:39.260
获取某一个值呢

15:39.260 --> 15:40.260
因为现在对数就够嘛

15:40.260 --> 15:41.260
那么我们获取个键

15:41.260 --> 15:42.260
非常简单

15:42.260 --> 15:43.260
键的名字

15:43.260 --> 15:44.260
a就得到1

15:44.260 --> 15:45.260
对吧

15:45.260 --> 15:46.260
gezb是不是得到2

15:46.260 --> 15:47.260
gezc是不是得到3

15:47.260 --> 15:48.260
对吧

15:48.260 --> 15:49.260
gezd没有

15:49.260 --> 15:50.260
对吧没有就利用

15:50.260 --> 15:51.260
利用一空之争

15:51.260 --> 15:53.260
好那么下面这个

15:53.260 --> 15:56.260
mgez表示可以获取多个值

15:56.260 --> 15:58.260
获取多个t的值

15:58.260 --> 15:59.260
比方说mgez

15:59.260 --> 16:01.260
当然这些命令我写不完

16:01.260 --> 16:02.260
命令太多了

16:02.260 --> 16:03.260
但是我们平时用的

16:03.260 --> 16:04.260
也就这么一些了

16:04.260 --> 16:05.260
比方说我们这里

16:05.260 --> 16:06.260
可以写多个t

16:06.260 --> 16:07.260
abc

16:07.260 --> 16:08.260
那么是不是把

16:08.260 --> 16:09.260
三个值全部给我了

16:09.260 --> 16:10.260
对不对

16:10.260 --> 16:11.260
非常简单

16:11.260 --> 16:12.260
好那么而且呢

16:12.260 --> 16:14.260
我们可以通过这个increase

16:14.260 --> 16:15.260
increase

16:15.260 --> 16:16.260
说写increase

16:16.260 --> 16:17.260
把某一个键呢

16:17.260 --> 16:18.260
它的值就自征1

16:18.260 --> 16:20.260
比方说我们的看一下

16:20.260 --> 16:21.260
把a自征1

16:21.260 --> 16:22.260
你看告诉我

16:22.260 --> 16:23.260
自征过后就变成2了

16:23.260 --> 16:24.260
现在我们来gez a

16:24.260 --> 16:25.260
就变成2了

16:25.260 --> 16:26.260
就这么简单

16:26.260 --> 16:27.260
但是前提条件

16:27.260 --> 16:28.260
前提条件ab需要是一个

16:28.260 --> 16:29.260
它虽然是致富创意义

16:29.260 --> 16:30.260
但是它里面

16:30.260 --> 16:31.260
纯都要是一个数字

16:31.260 --> 16:32.260
如果说不是数字的话

16:32.260 --> 16:33.260
比方说没有cez a

16:33.260 --> 16:36.260
cez a那个abc

16:36.260 --> 16:37.260
那么gez a看一下

16:37.260 --> 16:38.260
它是abc

16:38.260 --> 16:39.260
当然现在我们能自征

16:39.260 --> 16:40.260
那肯定是不能自征

16:41.260 --> 16:43.260
如果说你要自征的时候呢

16:43.260 --> 16:44.260
你想自征

16:44.260 --> 16:45.260
指定的比方

16:45.260 --> 16:46.260
聊加5

16:46.260 --> 16:47.260
聊加个5

16:47.260 --> 16:48.260
其实这些啊

16:48.260 --> 16:49.260
以后我们在

16:49.260 --> 16:50.260
之后我们在程序里面

16:50.260 --> 16:51.260
就是可以操作

16:51.260 --> 16:52.260
把值打套

16:52.260 --> 16:53.260
然后通过介绍操作完了

16:53.260 --> 16:54.260
再让存进去玩玩

16:54.260 --> 16:55.260
对不对

16:55.260 --> 16:56.260
那么这些呢

16:56.260 --> 16:57.260
都可以不用这些命令来做

16:57.260 --> 16:59.260
比方说我们可以用一个数

16:59.260 --> 17:00.260
但是它也提供了

17:01.260 --> 17:02.260
增加多少呢

17:02.260 --> 17:04.260
把b增加10

17:04.260 --> 17:05.260
告诉你12

17:05.260 --> 17:06.260
之前的b是多少

17:06.260 --> 17:07.260
之前的b是2

17:07.260 --> 17:08.260
对吧

17:08.260 --> 17:09.260
增加10过后变成12

17:09.260 --> 17:10.260
就这么简单

17:10.260 --> 17:11.260
啊

17:11.260 --> 17:12.260
同样的下面是

17:12.260 --> 17:13.260
自减和

17:13.260 --> 17:14.260
指定减少的数量

17:14.260 --> 17:15.260
就完事了

17:15.260 --> 17:16.260
对吧

17:16.260 --> 17:17.260
这就是制服事

17:17.260 --> 17:18.260
制服事要处理

17:18.260 --> 17:19.260
那么对于我们而言

17:19.260 --> 17:20.260
对于前端还把这儿而言啊

17:20.260 --> 17:22.260
包括后端开发者

17:22.260 --> 17:23.260
大部分情况下

17:23.260 --> 17:25.260
制服事够用了

17:25.260 --> 17:26.260
你想啊

17:26.260 --> 17:27.260
不管你的多么复杂

17:27.260 --> 17:28.260
我都可以把它

17:28.260 --> 17:29.260
转换成节省

17:29.260 --> 17:30.260
给你存进去

17:30.260 --> 17:31.260
对吧

17:31.260 --> 17:32.260
存进去过后呢

17:32.260 --> 17:33.260
我要改的话

17:33.260 --> 17:34.260
我再用

17:34.260 --> 17:35.260
用节省转回来

17:35.260 --> 17:36.260
转回来改了

17:36.260 --> 17:37.260
完了过后

17:37.260 --> 17:38.260
再又转成

17:39.260 --> 17:40.260
所以说呢

17:40.260 --> 17:41.260
我们制服错了

17:41.260 --> 17:42.260
往往都够用了

17:42.260 --> 17:43.260
那么下边的了解就行了

17:43.260 --> 17:44.260
下边其实还有别的

17:44.260 --> 17:45.260
那些还有sets

17:45.260 --> 17:46.260
还有order sets

17:46.260 --> 17:47.260
这些东西我们就不说了

17:47.260 --> 17:48.260
就说一下

17:48.260 --> 17:49.260
NES和哈希就行了

17:49.260 --> 17:51.260
Redis里面的NES

17:51.260 --> 17:52.260
是一种从左到右的

17:52.260 --> 17:53.260
练表结构

17:53.260 --> 17:54.260
里面学的

17:54.260 --> 17:55.260
那个算法

17:55.260 --> 17:56.260
应该知道练表就是

17:56.260 --> 17:57.260
有个指针啊

17:57.260 --> 17:58.260
前面指向

17:58.260 --> 17:59.260
后面指向

17:59.260 --> 18:00.260
后面指向

18:00.260 --> 18:01.260
后面

18:01.260 --> 18:02.260
左边就是练表的头部

18:02.260 --> 18:03.260
右边就是练表的尾部

18:03.260 --> 18:04.260
就这么简单

18:04.260 --> 18:05.260
那么这个练表

18:05.260 --> 18:06.260
了解就行了

18:06.260 --> 18:07.260
这些东西

18:07.260 --> 18:08.260
我后边举例子

18:08.260 --> 18:09.260
全是用字母串

18:09.260 --> 18:11.260
练表里面怎么来操作呢

18:11.260 --> 18:12.260
比如说随便来一个吧

18:14.260 --> 18:15.260
R push

18:15.260 --> 18:16.260
R什么意思呢

18:16.260 --> 18:17.260
right

18:17.260 --> 18:19.260
向右边加入一个东西

18:19.260 --> 18:20.260
向右边是不是

18:20.260 --> 18:21.260
练表尾部

18:21.260 --> 18:22.260
尾部加入一个东西

18:22.260 --> 18:23.260
R push

18:23.260 --> 18:25.260
比方说没有一个

18:25.260 --> 18:26.260
ARR

18:26.260 --> 18:27.260
加一个什么呢

18:27.260 --> 18:29.260
加一个

18:29.260 --> 18:30.260
加一个什么呢

18:30.260 --> 18:32.260
加一个1

18:32.260 --> 18:34.260
加一过后呢

18:34.260 --> 18:35.260
这个练表里面

18:35.260 --> 18:36.260
就有东西了

18:36.260 --> 18:37.260
它获取这个练表的东西呢

18:37.260 --> 18:39.260
我们可以用这个

18:39.260 --> 18:41.260
LN

18:41.260 --> 18:42.260
ARR

18:42.260 --> 18:43.260
对吧

18:43.260 --> 18:44.260
它的key的名字是ARR

18:44.260 --> 18:45.260
那么ARR里面

18:45.260 --> 18:46.260
我们看一下

18:46.260 --> 18:47.260
一个练表里面

18:47.260 --> 18:48.260
有长度是多少

18:48.260 --> 18:49.260
长度是不是1

18:49.260 --> 18:50.260
对不对

18:50.260 --> 18:51.260
我们可以在这边

18:51.260 --> 18:52.260
可以看一下

18:52.260 --> 18:53.260
刷新一下

18:53.260 --> 18:55.260
那么这个ARR里面

18:55.260 --> 18:56.260
这里面

18:56.260 --> 18:58.260
它直接不给你显示了

18:58.260 --> 19:01.260
这个做的还是挺low的

19:01.260 --> 19:02.260
这个

19:02.260 --> 19:03.260
可实话界面没什么意义

19:03.260 --> 19:05.260
这个radius没什么意义

19:05.260 --> 19:06.260
这里面没有显示了

19:06.260 --> 19:07.260
对吧

19:07.260 --> 19:08.260
那么表示这个练表里面

19:08.260 --> 19:09.260
反正总之

19:09.260 --> 19:10.260
这是个练表

19:10.260 --> 19:11.260
它是个dist

19:11.260 --> 19:12.260
它的key是ARR

19:12.260 --> 19:13.260
那么这里面

19:13.260 --> 19:14.260
可以存多个数据

19:14.260 --> 19:15.260
好

19:15.260 --> 19:16.260
那么我们现在存了一个1

19:16.260 --> 19:17.260
对不对

19:17.260 --> 19:18.260
那么表示这个练表的长度

19:18.260 --> 19:19.260
是1

19:19.260 --> 19:20.260
通过这个东西

19:20.260 --> 19:21.260
获取练表的长度

19:21.260 --> 19:22.260
然后接下来再来看

19:24.260 --> 19:26.260
把这个玩意儿打开了

19:26.260 --> 19:28.260
如果说你要往左边

19:28.260 --> 19:29.260
往练表头

19:29.260 --> 19:30.260
加一个东西

19:30.260 --> 19:31.260
我们可以用air push

19:31.260 --> 19:33.260
就是left push

19:33.260 --> 19:35.260
ARR头里面加入一个3

19:35.260 --> 19:36.260
那么现在练表的顺序

19:36.260 --> 19:38.260
是不是3 1

19:38.260 --> 19:39.260
对不对

19:39.260 --> 19:41.260
那么练表的长度

19:41.260 --> 19:42.260
现在我们看一下

19:42.260 --> 19:43.260
练表的长度

19:43.260 --> 19:44.260
是2

19:44.260 --> 19:45.260
好

19:45.260 --> 19:46.260
那么如果说我要得到

19:46.260 --> 19:47.260
练表某一个区域的值

19:47.260 --> 19:49.260
我们可以用air range

19:49.260 --> 19:50.260
air range

19:50.260 --> 19:51.260
那么我们把练表

19:51.260 --> 19:53.260
拿个练表ARR

19:53.260 --> 19:54.260
从哪个位置开始

19:54.260 --> 19:55.260
从左边开始

19:55.260 --> 19:57.260
你看用air表示从左边开始

19:57.260 --> 19:58.260
左边开始

19:58.260 --> 19:59.260
那么这个没有从右边开始的

19:59.260 --> 20:01.260
只有从左边开始的

20:01.260 --> 20:02.260
左边的下标

20:02.260 --> 20:03.260
是0

20:03.260 --> 20:05.260
我们要得到0到多少呢

20:05.260 --> 20:07.260
0到下标

20:07.260 --> 20:08.260
下标10

20:08.260 --> 20:09.260
当然没有下标10

20:09.260 --> 20:11.260
目前下标最多的就是1

20:11.260 --> 20:12.260
0d嘛

20:12.260 --> 20:13.260
但是如果他取不到的话

20:13.260 --> 20:15.260
就把整个练表给你的

20:15.260 --> 20:17.260
你看得到是不是3 1

20:17.260 --> 20:19.260
练表的顺序

20:19.260 --> 20:21.260
是不是3 1

20:21.260 --> 20:22.260
这是目前的练表的值

20:22.260 --> 20:23.260
对吧

20:23.260 --> 20:24.260
就这么简单

20:24.260 --> 20:25.260
那么这个air index

20:25.260 --> 20:27.260
表示返回的是

20:27.260 --> 20:29.260
练表其中一个逐印的值

20:29.260 --> 20:30.260
比较练表的

20:30.260 --> 20:32.260
第一个位置的值3

20:32.260 --> 20:33.260
练表的

20:33.260 --> 20:34.260
第二个位置的值1

20:34.260 --> 20:35.260
对吧

20:35.260 --> 20:36.260
后边的就是你懂的

20:36.260 --> 20:37.260
利用

20:38.260 --> 20:40.260
这是air index

20:40.260 --> 20:41.260
air sets

20:41.260 --> 20:43.260
就设置练表的值

20:43.260 --> 20:45.260
设置这个练表ARR

20:45.260 --> 20:47.260
哪个下标呢

20:47.260 --> 20:48.260
比方说

20:48.260 --> 20:49.260
第一个位置呢

20:49.260 --> 20:50.260
我把设置成5

20:50.260 --> 20:51.260
对吧

20:51.260 --> 20:52.260
然后我们现在再来看一下

20:52.260 --> 20:54.260
air range

20:54.260 --> 20:55.260
是不是5 1

20:55.260 --> 20:56.260
对不对

20:56.260 --> 20:58.260
如果说你要3除的话

20:58.260 --> 20:59.260
air index

20:59.260 --> 21:00.260
这些东西都很简单

21:00.260 --> 21:01.260
你先把读

21:01.260 --> 21:02.260
如果说用介式的话

21:02.260 --> 21:03.260
先把读出来

21:03.260 --> 21:04.260
它在重新设置完

21:04.260 --> 21:05.260
继续完事了

21:05.260 --> 21:06.260
R R E M

21:06.260 --> 21:07.260
那么key呢

21:07.260 --> 21:09.260
ARR

21:09.260 --> 21:10.260
3除的数量

21:10.260 --> 21:12.260
3除一个

21:12.260 --> 21:13.260
3除的值呢

21:13.260 --> 21:14.260
我要把53除掉

21:14.260 --> 21:15.260
如果说这里边有

21:15.260 --> 21:16.260
50个5

21:16.260 --> 21:18.260
那么我也只3除一个

21:18.260 --> 21:19.260
就这么个意思

21:19.260 --> 21:20.260
那么这样子

21:20.260 --> 21:21.260
它告诉你3除了一个

21:21.260 --> 21:22.260
3除了一个

21:22.260 --> 21:23.260
过后我们来看一下

21:23.260 --> 21:24.260
air range

21:24.260 --> 21:25.260
air index

21:25.260 --> 21:26.260
那么是不是只有一个了

21:26.260 --> 21:27.260
对吧

21:27.260 --> 21:28.260
就是3除

21:28.260 --> 21:30.260
3除列表的手元数l

21:30.260 --> 21:31.260
这就写错了

21:31.260 --> 21:32.260
R po

21:32.260 --> 21:33.260
3除列表的尾元数

21:33.260 --> 21:34.260
nav

21:34.260 --> 21:35.260
就是左边移除掉

21:35.260 --> 21:37.260
R就是右边移除掉

21:37.260 --> 21:38.260
对吧

21:38.260 --> 21:39.260
很简单

21:39.260 --> 21:40.260
了解就行了

21:40.260 --> 21:41.260
那么哈希呢

21:41.260 --> 21:42.260
哈希就相当于是个对象了

21:42.260 --> 21:43.260
你看

21:43.260 --> 21:44.260
刚才是一个列表air

21:44.260 --> 21:46.260
那么哈希的相当于是个对象了

21:46.260 --> 21:48.260
对象里面可以存很多的建设对

21:48.260 --> 21:49.260
这是哈希

21:49.260 --> 21:50.260
实际上

21:50.260 --> 21:51.260
为什么叫哈希呢

21:51.260 --> 21:52.260
其实就是一张哈希表

21:52.260 --> 21:53.260
哈希表呢

21:53.260 --> 21:55.260
里边记录了两个字段

21:55.260 --> 21:56.260
一个是键

21:56.260 --> 21:57.260
一个是纸

21:57.260 --> 21:58.260
哈希表

21:58.260 --> 21:59.260
其实咱们

21:59.260 --> 22:00.260
GS里面的对象

22:00.260 --> 22:01.260
它的底层

22:01.260 --> 22:02.260
就是一个哈希表

22:02.260 --> 22:04.260
用C语言写的一个哈希表

22:04.260 --> 22:05.260
就这么个意思

22:05.260 --> 22:07.260
那么现在不用去生纠

22:07.260 --> 22:09.260
就是哈希可以把它看出一个对象

22:09.260 --> 22:10.260
那么怎么来操作呢

22:10.260 --> 22:11.260
还是这样的操作

22:11.260 --> 22:12.260
set

22:12.260 --> 22:13.260
hs

22:13.260 --> 22:14.260
hs

22:14.260 --> 22:15.260
key

22:15.260 --> 22:16.260
表示对象的名字

22:16.260 --> 22:18.260
也相当于是ready是里面的key

22:18.260 --> 22:19.260
相当于是这里的key

22:19.260 --> 22:21.260
ready是里面的对象key是什么呢

22:21.260 --> 22:22.260
表示我们用个ob

22:22.260 --> 22:24.260
或者是prt

22:24.260 --> 22:26.260
一个人

22:26.260 --> 22:27.260
然后呢

22:27.260 --> 22:28.260
后面就是键对了

22:28.260 --> 22:29.260
哈希里面的键呢

22:29.260 --> 22:31.260
比方说我们的姓名

22:31.260 --> 22:33.260
姓名为邓格

22:33.260 --> 22:35.260
一回车就完成了

22:35.260 --> 22:36.260
好 接下来我们来看一下

22:36.260 --> 22:37.260
这里刷新

22:37.260 --> 22:39.260
刷新

22:39.260 --> 22:40.260
person

22:40.260 --> 22:41.260
你看 这里有一个lame属性

22:41.260 --> 22:42.260
邓格

22:42.260 --> 22:48.260
对吧

22:48.260 --> 22:49.260
没问题吧

22:49.260 --> 22:50.260
这个显示真的是

22:50.260 --> 22:51.260
放小一点呢

22:51.260 --> 22:52.260
放小一点

22:52.260 --> 22:54.260
我是吧 放大了

22:54.260 --> 22:55.260
放小了

22:55.260 --> 22:56.260
放小了也没看不见

22:56.260 --> 22:57.260
就这样吧

22:57.260 --> 22:58.260
是不是有一个属性的

22:58.260 --> 22:59.260
哈希吧

22:59.260 --> 23:00.260
哈希表吗

23:00.260 --> 23:01.260
lame 邓格

23:01.260 --> 23:02.260
好 接下来

23:02.260 --> 23:03.260
接下来

23:03.260 --> 23:04.260
那么这里呢

23:04.260 --> 23:05.260
hs

23:05.260 --> 23:06.260
就是可以得到

23:06.260 --> 23:07.260
hs

23:07.260 --> 23:08.260
person

23:08.260 --> 23:09.260
得到这个键里面的什么呢

23:09.260 --> 23:10.260
key

23:10.260 --> 23:11.260
lame

23:11.260 --> 23:12.260
邓格

23:12.260 --> 23:13.260
没问题吧

23:13.260 --> 23:14.260
hs

23:14.260 --> 23:15.260
然后再来设置一个吧

23:15.260 --> 23:16.260
hs

23:16.260 --> 23:17.260
person

23:17.260 --> 23:18.260
ag

23:18.260 --> 23:19.260
15岁

23:19.260 --> 23:20.260
好 那么现在咱们来看一下

23:20.260 --> 23:21.260
hs

23:21.260 --> 23:24.260
得到的是哈希表里面的所有的键

23:24.260 --> 23:25.260
哈希表

23:25.260 --> 23:26.260
哪张的哈希表

23:26.260 --> 23:27.260
person 这张哈希表

23:27.260 --> 23:28.260
我们来看一下这里

23:28.260 --> 23:29.260
放心

23:29.260 --> 23:31.260
好 你看

23:31.260 --> 23:32.260
什么两个

23:32.260 --> 23:33.260
哈希表里面有两个了

23:33.260 --> 23:34.260
对吧

23:34.260 --> 23:36.260
Redis里面的key 叫person

23:36.260 --> 23:37.260
那么这个person是一张

23:37.260 --> 23:38.260
哈希表

23:38.260 --> 23:39.260
哈希表里面有两个key

23:39.260 --> 23:40.260
好 咱们来看一下

23:40.260 --> 23:41.260
person

23:41.260 --> 23:42.260
那么得到什么两key

23:42.260 --> 23:43.260
lame

23:43.260 --> 23:44.260
对不对

23:44.260 --> 23:45.260
好 接下来再去

23:45.260 --> 23:46.260
hs

23:46.260 --> 23:47.260
vars

23:47.260 --> 23:48.260
得到什么呢

23:48.260 --> 23:49.260
得到的是所有的纸

23:49.260 --> 23:50.260
person

23:50.260 --> 23:51.260
所有的纸

23:51.260 --> 23:52.260
邓格

23:52.260 --> 23:53.260
失误

23:53.260 --> 23:54.260
那要得到所有的键字对呢

23:54.260 --> 23:55.260
hs

23:55.260 --> 23:56.260
person

23:56.260 --> 23:57.260
那么就是

23:57.260 --> 23:58.260
键字

23:58.260 --> 23:59.260
键

23:59.260 --> 24:00.260
键字

24:00.260 --> 24:01.260
对吧

24:01.260 --> 24:02.260
很简单

24:02.260 --> 24:03.260
然后呢

24:03.260 --> 24:04.260
hs

24:04.260 --> 24:07.260
就是看一下这里面

24:07.260 --> 24:08.260
这个哈希表里面

24:08.260 --> 24:09.260
有没有对应的字段

24:09.260 --> 24:10.260
有没有对应的属性

24:10.260 --> 24:11.260
那么比方说

24:11.260 --> 24:13.260
有没有这个属性

24:13.260 --> 24:14.260
6

24:14.260 --> 24:15.260
有没有新别的属性呢

24:15.260 --> 24:16.260
告诉你

24:16.260 --> 24:17.260
没有 数量是明个

24:17.260 --> 24:19.260
有没有这个A级属性呢

24:19.260 --> 24:20.260
有 数量是一个

24:20.260 --> 24:21.260
对吧

24:21.260 --> 24:22.260
就这么简单

24:22.260 --> 24:23.260
然后呢

24:23.260 --> 24:24.260
hs

24:25.260 --> 24:28.260
三处对象里面的属性

24:28.260 --> 24:30.260
就是相当于是对象里面的字段

24:30.260 --> 24:32.260
三处这个对象里面的A级之段

24:32.260 --> 24:33.260
那么三处过后呢

24:33.260 --> 24:34.260
我们来看一下

24:34.260 --> 24:35.260
hs

24:35.260 --> 24:36.260
get

24:36.260 --> 24:37.260
get

24:37.260 --> 24:38.260
get all

24:38.260 --> 24:39.260
person

24:39.260 --> 24:41.260
是不是只有一个name之段呢

24:41.260 --> 24:42.260
对不对

24:42.260 --> 24:43.260
好 那么下面

24:43.260 --> 24:44.260
下面还有

24:44.260 --> 24:45.260
hs

24:45.260 --> 24:46.260
得到的是一个

24:46.260 --> 24:47.260
就是

24:47.260 --> 24:50.260
哈希表里面有多少个

24:50.260 --> 24:51.260
t值

24:51.260 --> 24:53.260
所以目前只有一个了

24:53.260 --> 24:54.260
因为只有一个name属性呢

24:54.260 --> 24:55.260
没有啊

24:55.260 --> 24:57.260
我们平时用了也就这么一些了

24:57.260 --> 24:58.260
其实我们平时用的话

24:58.260 --> 24:59.260
连这些

24:59.260 --> 25:01.260
呃呃呃

25:01.260 --> 25:03.260
亏策也可以停止

25:03.260 --> 25:04.260
其实呢

25:04.260 --> 25:05.260
我们平时用的呢

25:05.260 --> 25:06.260
也就是支付串

25:06.260 --> 25:08.260
这两个呢都用的很少很少

25:08.260 --> 25:10.260
这就是我们直接通过命令

25:10.260 --> 25:11.260
去操作这个radius

25:11.260 --> 25:12.260
特别简单

25:12.260 --> 25:13.260
对吧

25:13.260 --> 25:14.260
下期课我们再来说

25:14.260 --> 25:15.260
在load解释里面如何操作

