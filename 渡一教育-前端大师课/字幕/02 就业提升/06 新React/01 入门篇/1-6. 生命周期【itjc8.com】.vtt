WEBVTT

00:00.240 --> 00:02.240
OK 欢迎回来

00:02.240 --> 00:04.240
好 咱们继续

00:04.240 --> 00:07.240
上节课的话给大家介绍了这个表达

00:07.240 --> 00:11.240
表达里面的话分为这个受控组建和非受控组建

00:11.240 --> 00:13.240
这个就不多说了

00:13.240 --> 00:15.240
上节课讲了一个多小时

00:15.240 --> 00:18.240
让上节课说漏了就是这里

00:18.240 --> 00:20.240
这个非受控组建这边

00:20.240 --> 00:22.240
这边给大家贴了一篇文章

00:22.240 --> 00:25.240
这篇文章其实它也是这个官方

00:25.240 --> 00:28.240
官方我看是在哪个位置

00:28.240 --> 00:31.240
官方其实就是官方的那篇文章

00:31.240 --> 00:33.240
但是英文的

00:33.240 --> 00:35.240
react

00:35.240 --> 00:39.240
我记得是在这个受控组建这个位置

00:39.240 --> 00:40.240
dux

00:40.240 --> 00:42.240
然后这边

00:42.240 --> 00:44.240
at-1t的

00:44.240 --> 00:46.240
然后uncontrolled component

00:46.240 --> 00:50.240
然后我看它官方推荐了一篇文章

00:50.240 --> 00:51.240
我看一下

00:51.240 --> 00:53.240
就这个就这个

00:53.240 --> 00:55.240
this article uncontrolled

00:55.240 --> 00:56.240
这个

00:56.240 --> 00:58.240
看一下

00:58.240 --> 00:59.240
对就这个

00:59.240 --> 01:01.240
就这篇文章

01:01.240 --> 01:04.240
这篇文章的话是官方推荐的一篇文章

01:04.240 --> 01:06.240
这篇文章的话就详细写了

01:06.240 --> 01:08.240
就什么时候用受控组建

01:08.240 --> 01:10.240
什么时候用这个非受控组建

01:10.240 --> 01:12.240
controlled就是受控

01:12.240 --> 01:14.240
uncontrolled就是非受控

01:14.240 --> 01:15.240
OK

01:15.240 --> 01:17.240
大家下来的话可以把这篇文章

01:17.240 --> 01:19.240
好好把它看一下

01:19.240 --> 01:20.240
OK

01:20.240 --> 01:21.240
这边re-uncontrolled

01:21.240 --> 01:23.240
非受控的

01:23.240 --> 01:25.240
然后这边re-controlled

01:25.240 --> 01:26.240
re-controlled

01:26.240 --> 01:27.240
这个是受控的

01:27.240 --> 01:28.240
OK

01:28.240 --> 01:30.240
这个文章的话这个地址的话

01:30.240 --> 01:31.240
我也放在这里的

01:31.240 --> 01:33.240
也放在这里了

01:33.240 --> 01:35.240
这个就不多说了

01:35.240 --> 01:38.240
这节课咱们来看这个

01:38.240 --> 01:41.240
来看这个生命周期

01:41.240 --> 01:43.240
OK生命周期

01:43.240 --> 01:46.240
生命周期这个概念的话

01:46.240 --> 01:48.240
对于大家来讲的话也不是新概念

01:48.240 --> 01:49.240
对吧

01:49.240 --> 01:51.240
大家学那个view的时候

01:51.240 --> 01:53.240
就接触过这个生命周期

01:53.240 --> 01:55.240
什么叫做生命周期

01:55.240 --> 01:57.240
所谓生命周期

01:57.240 --> 01:59.240
就是指的是组建从什么

01:59.240 --> 02:02.240
从诞生到销毁

02:02.240 --> 02:04.240
它整个一个这个

02:04.240 --> 02:06.240
时间过程

02:06.240 --> 02:08.240
这个过程就叫做生命周期

02:08.240 --> 02:10.240
然后它在整个这个

02:10.240 --> 02:12.240
从诞生到销毁

02:12.240 --> 02:13.240
这个过程里面

02:13.240 --> 02:15.240
它给你设计了几个

02:15.240 --> 02:17.240
这个特殊的时间点

02:17.240 --> 02:18.240
对吧

02:18.240 --> 02:20.240
那这些特殊的时间点的话

02:20.240 --> 02:22.240
就可以编写一些这个函数

02:22.240 --> 02:25.240
来做一些特殊的这个事情

02:25.240 --> 02:27.240
也就是我们这边开发者

02:27.240 --> 02:29.240
可以在某个特定的这个时间点

02:29.240 --> 02:32.240
来注入我们的这个代码

02:32.240 --> 02:33.240
它有点类似于什么呢

02:33.240 --> 02:34.240
有点类似于事件

02:34.240 --> 02:35.240
对吧

02:35.240 --> 02:37.240
事件比如说你绑定个点击事件

02:37.240 --> 02:38.240
那点击事件的话

02:38.240 --> 02:39.240
那就什么时候出发

02:39.240 --> 02:42.240
是不是点击的时候出发

02:42.240 --> 02:43.240
对吧

02:43.240 --> 02:44.240
那这个生命周期的话

02:44.240 --> 02:45.240
比如说你

02:45.240 --> 02:46.240
我们拿view来举例

02:46.240 --> 02:47.240
view的话

02:47.240 --> 02:49.240
你写了一个这个monty的

02:49.240 --> 02:51.240
monty的是这个挂载之后

02:51.240 --> 02:52.240
对吧

02:52.240 --> 02:53.240
然后接下来的话进行这个出发

02:53.240 --> 02:55.240
有点类似于事件

02:55.240 --> 02:56.240
好

02:56.240 --> 02:58.240
然后生命周期这个要说一下

02:58.240 --> 03:00.240
生命周期这个勾字函数

03:00.240 --> 03:02.240
它是属于类组件

03:02.240 --> 03:04.240
独有的东西

03:04.240 --> 03:07.240
我把这个给你加粗

03:07.240 --> 03:09.240
它是属于类组件独有的

03:09.240 --> 03:10.240
就在函数组件里面

03:10.240 --> 03:13.240
并没有这个生命周期这个勾字函数

03:13.240 --> 03:16.240
然后从这个react16.8

03:16.240 --> 03:18.240
推出这个hooks以来

03:18.240 --> 03:20.240
现在的话整体来讲的话

03:20.240 --> 03:22.240
都是以函数组件为主了

03:22.240 --> 03:23.240
ok

03:23.240 --> 03:25.240
就包括我们后面写整个项目

03:25.240 --> 03:27.240
我们都是用函数组件

03:27.240 --> 03:29.240
基本就不会用这个类组件了

03:29.240 --> 03:30.240
而且你基本上

03:30.240 --> 03:32.240
你从这个第三方的这个cool

03:32.240 --> 03:34.240
你也可以看出这种风向

03:34.240 --> 03:37.240
你去看无论是react router也好

03:37.240 --> 03:40.240
还是这个最新版的react redux也好

03:40.240 --> 03:42.240
这种第三方的cool

03:42.240 --> 03:44.240
也慢慢开始转向hook

03:44.240 --> 03:46.240
都是用这个函数组件

03:46.240 --> 03:48.240
也就是以后类组件的话

03:48.240 --> 03:50.240
会用的越来越少

03:50.240 --> 03:52.240
基本现在可以

03:52.240 --> 03:54.240
可以告别类组件了

03:54.240 --> 03:56.240
基本上用不到类组件了

03:56.240 --> 03:57.240
所以这边的话

03:57.240 --> 03:58.240
这个生命周期的话

03:58.240 --> 04:00.240
就是属于一个比较尴尬的东西

04:00.240 --> 04:02.240
你看这个它官网

04:02.240 --> 04:03.240
官网实际上

04:03.240 --> 04:05.240
它在介绍生命周期的时候

04:05.240 --> 04:07.240
它在把它切成中文

04:07.240 --> 04:09.240
把它切成中文

04:09.240 --> 04:11.240
原来官网它在介绍的时候

04:11.240 --> 04:13.240
它实际上也就

04:13.240 --> 04:14.240
在核心概念里面

04:14.240 --> 04:16.240
其实也就在这个位置

04:16.240 --> 04:18.240
它在介绍这个state的时候

04:18.240 --> 04:21.240
顺带就介绍了一下生命周期

04:21.240 --> 04:22.240
看到没有

04:22.240 --> 04:25.240
就这边state and生命周期

04:25.240 --> 04:27.240
它介绍state的时候

04:27.240 --> 04:28.240
因为state的话

04:28.240 --> 04:29.240
它这边介绍的state

04:29.240 --> 04:31.240
介绍的是类组件的state

04:31.240 --> 04:34.240
它就顺带介绍了一些生命周期

04:34.240 --> 04:35.240
勾字函数

04:35.240 --> 04:36.240
它介绍了几个呢

04:36.240 --> 04:38.240
介绍了好像也就两个吧

04:38.240 --> 04:40.240
这边将生命周期方法

04:40.240 --> 04:42.240
添到class里面

04:42.240 --> 04:43.240
它这边

04:43.240 --> 04:44.240
一个是dead mount

04:44.240 --> 04:46.240
一个是vail mount

04:46.240 --> 04:47.240
看到没有

04:47.240 --> 04:48.240
就介绍了这两个

04:48.240 --> 04:49.240
这两个完了之后

04:49.240 --> 04:52.240
我看有没有介绍其他的

04:52.240 --> 04:54.240
好像就没了

04:54.240 --> 04:55.240
好像就没了

04:55.240 --> 04:58.240
你看后面就是正确的使用state

04:58.240 --> 05:00.240
也就是它官网的话

05:00.240 --> 05:03.240
它现在慢慢也在淡化这一块

05:03.240 --> 05:04.240
也在淡化这一块

05:04.240 --> 05:05.240
因为它现在

05:05.240 --> 05:08.240
主力都是往函数组件转

05:08.240 --> 05:10.240
就在进行转型了

05:10.240 --> 05:11.240
对吧

05:12.240 --> 05:14.240
说说我们这边的话

05:14.240 --> 05:16.240
我们介绍的话

05:16.240 --> 05:19.240
也就介绍常用的生命周期勾字函数

05:19.240 --> 05:21.240
如果就是之前听过

05:21.240 --> 05:23.240
袁老师讲的react

05:23.240 --> 05:26.240
袁老师之前还讲过什么

05:26.240 --> 05:28.240
讲过整个生命周期勾字函数

05:28.240 --> 05:30.240
还分为两版

05:30.240 --> 05:31.240
一个是旧版

05:31.240 --> 05:32.240
一个是新版

05:32.240 --> 05:34.240
旧版的话有哪些勾字函数

05:34.240 --> 05:36.240
新版的话有哪些勾字函数

05:36.240 --> 05:39.240
每一个都给同学们介绍了

05:39.240 --> 05:40.240
我们这边的话

05:40.240 --> 05:41.240
我想了想

05:41.240 --> 05:43.240
我觉得这个没有太大的必要

05:43.240 --> 05:45.240
没有太大的必要

05:45.240 --> 05:48.240
至少的话在入门篇没有必要

05:48.240 --> 05:50.240
入门篇讲究的就是快

05:50.240 --> 05:51.240
对吧

05:51.240 --> 05:53.240
就是快速的进行入门

05:53.240 --> 05:55.240
所以说如果就是你们想要

05:55.240 --> 05:57.240
听就是

05:57.240 --> 05:58.240
就是以前比如说

05:58.240 --> 05:59.240
还是想听一下

05:59.240 --> 06:00.240
旧版是怎么样子的

06:00.240 --> 06:02.240
新版具体有哪些

06:02.240 --> 06:03.240
那如果你们想听的话

06:03.240 --> 06:05.240
到时候你们反馈给我

06:05.240 --> 06:07.240
我到时候的话在旧也篇

06:07.240 --> 06:09.240
在旧也篇我把它加进去

06:09.240 --> 06:11.240
但我大概旅行我掐指一算

06:11.240 --> 06:13.240
大家应该觉得

06:13.240 --> 06:15.240
应该是没有太大必要的

06:17.240 --> 06:19.240
然后完整的生命周期图谱

06:19.240 --> 06:21.240
可以参与官网

06:21.240 --> 06:23.240
这边把官网打开

06:23.240 --> 06:25.240
这是官网

06:25.240 --> 06:28.240
官网提供了完整的图谱

06:28.240 --> 06:29.240
它这边它分为什么

06:29.240 --> 06:31.240
分为挂载石

06:31.240 --> 06:33.240
更新石和卸载石

06:33.240 --> 06:35.240
你看它官网这边都是

06:35.240 --> 06:38.240
给你分成的常用和不常用

06:38.240 --> 06:40.240
比如你把这个钩把它展开

06:40.240 --> 06:41.240
展开的话你看这边

06:41.240 --> 06:43.240
就会东西更多一些

06:43.240 --> 06:44.240
这边有一个

06:44.240 --> 06:48.240
get derived data from props

06:48.240 --> 06:50.240
get snapshot before update

06:50.240 --> 06:51.240
有这些

06:51.240 --> 06:54.240
而且你把它折起来

06:54.240 --> 06:56.240
折起来的话常用的其实就是什么

06:56.240 --> 06:57.240
常用的其实就这几个

06:57.240 --> 06:59.240
constructor

06:59.240 --> 07:00.240
Render

07:00.240 --> 07:02.240
OK Render是你必须要写的

07:02.240 --> 07:03.240
对吧 Render

07:03.240 --> 07:05.240
因为就是你究竟

07:05.240 --> 07:07.240
要选择什么样的ges

07:07.240 --> 07:09.240
这个是必须要写的

07:09.240 --> 07:11.240
这个就是唯一一个必须

07:11.240 --> 07:13.240
要写的这个钩子

07:13.240 --> 07:15.240
其他的像什么constructor

07:15.240 --> 07:16.240
dead mount

07:16.240 --> 07:17.240
dead update

07:17.240 --> 07:18.240
villumount

07:18.240 --> 07:20.240
这些都是可选的

07:20.240 --> 07:22.240
这都是根据你具体的

07:22.240 --> 07:24.240
业务

07:24.240 --> 07:25.240
好像在左边

07:25.240 --> 07:26.240
左边你这边可以看到

07:26.240 --> 07:28.240
这边的话有一个Render阶段

07:28.240 --> 07:30.240
和commit阶段

07:30.240 --> 07:31.240
这个的话实际上是

07:31.240 --> 07:34.240
我们整个react运行的时候

07:34.240 --> 07:36.240
它会分为那么几个阶段

07:36.240 --> 07:39.240
这个我们到时候在就业片的时候

07:39.240 --> 07:40.240
我们会给大家讲

07:40.240 --> 07:42.240
整个react它的原码

07:42.240 --> 07:44.240
它的一个执行流程

07:44.240 --> 07:46.240
究竟是什么样子的

07:46.240 --> 07:49.240
里面还会设计到比如什么是fiber

07:49.240 --> 07:50.240
对吧

07:50.240 --> 07:53.240
然后它还有这个conceal

07:53.240 --> 07:55.240
就是那个解析器

07:55.240 --> 07:56.240
究竟是什么

07:56.240 --> 07:58.240
这些我们都放在就业片

07:58.240 --> 07:59.240
好吧

08:00.240 --> 08:02.240
回到我们这边

08:02.240 --> 08:03.240
说说我们这边的话

08:03.240 --> 08:05.240
我们就介绍一些

08:05.240 --> 08:07.240
常用的生命周期勾字函数

08:07.240 --> 08:08.240
就差不多了

08:08.240 --> 08:10.240
然后有关生命周期勾字函数的话

08:10.240 --> 08:12.240
你可以参与这个官网

08:12.240 --> 08:14.240
官网的话在这个位置

08:14.240 --> 08:16.240
它是放在

08:16.240 --> 08:17.240
放在这边的

08:17.240 --> 08:19.240
就API reference

08:19.240 --> 08:20.240
这个位置

08:20.240 --> 08:21.240
这个位置的话

08:21.240 --> 08:23.240
然后在这里

08:23.240 --> 08:25.240
组建的生命周期

08:25.240 --> 08:27.240
这个图谱

08:27.240 --> 08:29.240
图谱就是刚才打开的这张图

08:29.240 --> 08:30.240
就这张图

08:30.240 --> 08:31.240
里面的话

08:31.240 --> 08:33.240
它这边就介绍了一些

08:33.240 --> 08:34.240
constructor

08:34.240 --> 08:35.240
常用的render

08:35.240 --> 08:37.240
deadmount

08:37.240 --> 08:39.240
还有就是deadupdate

08:39.240 --> 08:41.240
这些介绍了一下

08:41.240 --> 08:43.240
你这边就是

08:43.240 --> 08:44.240
它这边只是一个列表

08:44.240 --> 08:45.240
你这边要看的话

08:45.240 --> 08:46.240
你还得点进去

08:46.240 --> 08:47.240
它这边

08:47.240 --> 08:48.240
上面是列表

08:48.240 --> 08:49.240
上面是列表

08:49.240 --> 08:50.240
看一下

08:50.240 --> 08:51.240
对对对

08:51.240 --> 08:52.240
上面是列表

08:52.240 --> 08:53.240
你点了之后

08:53.240 --> 08:54.240
它会跳到具体的下面

08:54.240 --> 08:56.240
下面它就针对这个方法

08:56.240 --> 09:00.240
每个都有一个介绍

09:00.240 --> 09:02.240
我们这边一个一个来看一下

09:02.240 --> 09:04.240
我们就把常用的看一下

09:04.240 --> 09:06.240
我们这边来看一下

09:06.240 --> 09:08.240
官网中在介绍

09:08.240 --> 09:10.240
这些勾字函数时

09:10.240 --> 09:12.240
分为了常用和不常用

09:12.240 --> 09:14.240
刚才是不是已经说过了

09:14.240 --> 09:16.240
分为常用和不常用

09:16.240 --> 09:18.240
我们这边就把常用的

09:18.240 --> 09:20.240
我们把它说一下

09:20.240 --> 09:21.240
首先第一个

09:21.240 --> 09:23.240
我们按照它的直行顺序来讲的话

09:23.240 --> 09:25.240
首先第一个是constructor

09:25.240 --> 09:27.240
constructor

09:27.240 --> 09:29.240
你找到官网的constructor

09:29.240 --> 09:31.240
在这里

09:31.240 --> 09:33.240
constructor是用来干什么的呢

09:33.240 --> 09:34.240
constructor的话

09:34.240 --> 09:37.240
它是用来做初始化操作的

09:37.240 --> 09:38.240
主要

09:38.240 --> 09:39.240
它是用来做初始化操作

09:39.240 --> 09:41.240
那比如说我们这边

09:41.240 --> 09:43.240
接收到probs

09:43.240 --> 09:45.240
probs的话要传给负类

09:45.240 --> 09:46.240
对吧

09:46.240 --> 09:48.240
那就是在constructor里面

09:48.240 --> 09:51.240
还有经常我们初始化这个状态

09:51.240 --> 09:53.240
组建的这个状态

09:53.240 --> 09:55.240
在constructor里面

09:55.240 --> 09:57.240
好然后你注意

09:57.240 --> 09:59.240
不要在constructor

09:59.240 --> 10:00.240
这个函数中

10:00.240 --> 10:03.240
你不要去调用set state

10:03.240 --> 10:05.240
不要去调用

10:05.240 --> 10:07.240
因为你现在的话整个

10:07.240 --> 10:10.240
多么都还没有初始化好

10:10.240 --> 10:13.240
所以它这边不要调用

10:13.240 --> 10:14.240
那有东西说

10:14.240 --> 10:16.240
之前为什么你举例子的话调用了

10:16.240 --> 10:18.240
因为我们之前的话写的是异步的

10:18.240 --> 10:20.240
你如果不是异步的话

10:20.240 --> 10:21.240
你调set state

10:21.240 --> 10:23.240
它是会包错的

10:23.240 --> 10:25.240
比如说我们这边我们来看一下

10:25.240 --> 10:27.240
这个是上级课的代码

10:27.240 --> 10:29.240
上级课代码我就把它干掉了

10:29.240 --> 10:31.240
上级课代码我给大家放到笔记里面了

10:31.240 --> 10:33.240
我看一下笔记里面放没有

10:33.240 --> 10:35.240
我记得是放了的

10:35.240 --> 10:37.240
表单非受控

10:37.240 --> 10:39.240
放了的

10:39.240 --> 10:41.240
这个最后一个代码

10:41.240 --> 10:43.240
好然后我们这边的话

10:43.240 --> 10:45.240
我们把这边把这些就把它干掉

10:45.240 --> 10:47.240
我们先来看一下这个constructor

10:47.240 --> 10:49.240
这些都不要了

10:50.240 --> 10:52.240
扔点是必须要的

10:52.240 --> 10:54.240
至少返回一个空的DIV吗

10:57.240 --> 10:59.240
constructor里面

10:59.240 --> 11:01.240
constructor里面主要

11:01.240 --> 11:05.240
主要做一些初始化

11:05.240 --> 11:07.240
操作

11:07.240 --> 11:08.240
例如什么呢

11:08.240 --> 11:10.240
例如该组建的

11:10.240 --> 11:12.240
状态

11:12.240 --> 11:13.240
表面这边

11:13.240 --> 11:15.240
this.state

11:15.240 --> 11:17.240
对吧等于一个对象

11:17.240 --> 11:19.240
对象里面

11:19.240 --> 11:21.240
value

11:21.240 --> 11:23.240
这边怎么了

11:23.240 --> 11:25.240
这边的话应该是

11:25.240 --> 11:27.240
没有用super吗

11:27.240 --> 11:29.240
果然是

11:29.240 --> 11:31.240
这边的话要super

11:31.240 --> 11:33.240
super

11:35.240 --> 11:37.240
这边就是做一些初始化的操作

11:37.240 --> 11:39.240
那你记住不要在这里

11:39.240 --> 11:41.240
不要在这里

11:41.240 --> 11:43.240
例如你这边

11:43.240 --> 11:45.240
this.state

11:45.240 --> 11:47.240
然后加这边value

11:47.240 --> 11:48.240
把它改成e

11:48.240 --> 11:50.240
这里的话它这边

11:50.240 --> 11:51.240
编译的话不会爆错

11:51.240 --> 11:53.240
但是你回头的话你看一下

11:53.240 --> 11:57.190
回头你这边看一下

11:57.190 --> 11:58.190
这里

11:58.190 --> 12:00.190
实际上它是会给你爆错的

12:00.190 --> 12:01.190
你看一下这个错误

12:01.190 --> 12:02.190
我们来读一下这个错误

12:02.190 --> 12:04.190
can't call set state

12:04.190 --> 12:06.190
unopponent

12:06.190 --> 12:08.190
that is not yet mounted

12:08.190 --> 12:10.190
它是不是还没有挂在

12:10.190 --> 12:11.190
对不对

12:11.190 --> 12:12.190
is not yet mounted

12:12.190 --> 12:13.190
还没有挂在

12:13.190 --> 12:15.190
所以这个时候你不要去掉

12:15.190 --> 12:16.190
set state

12:16.190 --> 12:17.190
OK

12:17.190 --> 12:19.190
这里的话它可能会

12:19.190 --> 12:21.190
but it made

12:21.190 --> 12:22.190
indicate a bug

12:22.190 --> 12:24.190
in your application

12:24.190 --> 12:26.190
就它可能会引起一些

12:26.190 --> 12:28.190
影视的一些bug

12:28.190 --> 12:29.190
OK

12:29.190 --> 12:31.190
不要在这里面掉

12:31.190 --> 12:32.190
所以我们在这里

12:32.190 --> 12:34.190
这里写了

12:34.190 --> 12:35.190
在构造函数中

12:35.190 --> 12:37.190
严禁使用set state

12:37.190 --> 12:39.190
那为什么之前我们没有爆错

12:39.190 --> 12:41.190
没有爆错是因为我们这边写的是

12:41.190 --> 12:42.190
e不的

12:42.190 --> 12:44.190
比方你把这个改成e不的

12:44.190 --> 12:47.630
set timeout

12:47.630 --> 12:51.070
set timeout

12:51.070 --> 12:52.070
然后这边领秒

12:52.070 --> 12:53.070
它现在这个是不是

12:53.070 --> 12:54.070
就是一个e不的代码

12:54.070 --> 12:55.070
对吧

12:55.070 --> 12:56.070
你可以看到

12:56.070 --> 12:57.070
现在的话这个错误

12:57.070 --> 12:59.070
它就没有了

12:59.070 --> 13:00.070
没有了

13:00.070 --> 13:01.070
但是

13:01.070 --> 13:03.070
我们这边的话就应该遵守什么

13:03.070 --> 13:05.070
遵守官方的规定

13:05.070 --> 13:07.070
官方的规定说的就是什么

13:07.070 --> 13:09.070
说的就是

13:09.070 --> 13:12.070
在哪来着

13:12.070 --> 13:14.070
在哪来着

13:14.070 --> 13:15.070
找一下

13:15.070 --> 13:17.070
官方反正就是让你不要在这里面

13:17.070 --> 13:19.070
掉用set

13:19.070 --> 13:20.070
这里

13:20.070 --> 13:22.070
不要在这个constructor还是中

13:22.070 --> 13:24.070
不要去掉用set state

13:24.070 --> 13:25.070
OK

13:25.070 --> 13:26.070
所以我们这边遵守

13:26.070 --> 13:28.070
官方的这个规定

13:28.070 --> 13:30.070
不管是同步还是异步

13:30.070 --> 13:31.070
我们这边的话

13:31.070 --> 13:33.070
都严禁使用

13:33.070 --> 13:34.070
OK

13:34.070 --> 13:35.070
严禁使用

13:35.070 --> 13:36.070
constructor

13:36.070 --> 13:38.070
同一个组建对象

13:38.070 --> 13:39.070
它只会什么

13:39.070 --> 13:41.070
只会创建一次

13:41.070 --> 13:42.070
它只会创建一次

13:42.070 --> 13:44.070
也就是整个constructor

13:44.070 --> 13:45.070
只会掉用一次

13:45.070 --> 13:46.070
比如我们这边

13:46.070 --> 13:47.070
我们来看一下

13:47.070 --> 13:48.070
我们来看个例子

13:48.070 --> 13:49.070
好

13:49.070 --> 13:50.070
比如说我这里

13:50.070 --> 13:53.070
我这里的话

13:53.070 --> 13:54.070
然后写一个

13:54.070 --> 13:55.070
比较组建

13:55.070 --> 13:57.070
创建了

13:57.070 --> 13:58.070
组建

13:58.070 --> 13:59.070
创建了

13:59.070 --> 14:00.070
我们就写constructor嘛

14:00.070 --> 14:01.070
对吧

14:01.070 --> 14:03.070
就直接写这个

14:03.070 --> 14:04.070
constructor

14:04.070 --> 14:05.070
好

14:05.070 --> 14:06.070
然后接下来

14:06.070 --> 14:07.070
我们这边

14:07.070 --> 14:08.070
我们这样子

14:08.070 --> 14:09.070
我们把这边

14:09.070 --> 14:10.070
稍微把它改一下

14:10.070 --> 14:11.070
我们改个技术器

14:11.070 --> 14:12.070
出来

14:12.070 --> 14:13.070
这边1

14:13.070 --> 14:14.070
这边的话

14:14.070 --> 14:16.070
div

14:16.070 --> 14:17.070
这边

14:17.070 --> 14:22.070
this.stat.value

14:22.070 --> 14:23.070
好

14:23.070 --> 14:24.070
我们这边

14:24.070 --> 14:25.070
给个parton

14:25.070 --> 14:26.070
parton然后加1

14:26.070 --> 14:27.070
好

14:27.070 --> 14:28.070
然后再这边

14:28.070 --> 14:30.070
on click

14:30.070 --> 14:31.070
等于一个

14:31.070 --> 14:36.070
this.clickhandle

14:36.070 --> 14:37.070
对吧

14:37.070 --> 14:38.070
好

14:38.070 --> 14:39.070
然后再这边

14:39.070 --> 14:40.070
clickhandle

14:40.070 --> 14:42.070
等于

14:42.070 --> 14:44.070
给个箭头还说

14:44.070 --> 14:45.070
好

14:45.070 --> 14:47.070
this.stat.stat

14:47.070 --> 14:48.070
然后这边的话

14:48.070 --> 14:49.070
这个value

14:49.070 --> 14:50.070
value的话

14:50.070 --> 14:51.070
这边

14:51.070 --> 14:54.070
this.stat.value

14:54.070 --> 14:55.070
加一个1

14:55.070 --> 14:56.070
OK

14:56.070 --> 14:57.070
你不要在这写加加

14:57.070 --> 14:58.070
我们之前

14:58.070 --> 14:59.070
讲过这个问题了

14:59.070 --> 15:00.070
不要在这写加加

15:00.070 --> 15:01.070
写加加的话

15:01.070 --> 15:02.070
相当于干嘛

15:02.070 --> 15:03.070
所以直接去修改

15:03.070 --> 15:04.070
这个值了

15:04.070 --> 15:05.070
对不对

15:05.070 --> 15:06.070
我们这边在react里面

15:06.070 --> 15:07.070
它是什么

15:07.070 --> 15:08.070
是不是拿一个新的值

15:08.070 --> 15:09.070
去覆盖旧的值

15:09.070 --> 15:10.070
你不要直接在

15:10.070 --> 15:11.070
之前的基础上

15:11.070 --> 15:12.070
做更改

15:12.070 --> 15:13.070
好

15:13.070 --> 15:14.070
我们这边加一个1

15:14.070 --> 15:15.070
好

15:15.070 --> 15:16.070
保存

15:16.070 --> 15:17.070
保存之后

15:17.070 --> 15:18.070
然后加我们这边

15:18.070 --> 15:19.070
我们来看一下

15:19.070 --> 15:21.070
首先第一次

15:21.070 --> 15:22.070
第一次的话

15:22.070 --> 15:23.070
这边这个constructor

15:23.070 --> 15:24.070
是不是答应出来了

15:24.070 --> 15:25.070
对不对

15:25.070 --> 15:26.070
然后接下来

15:26.070 --> 15:27.070
你这边点击加1

15:27.070 --> 15:28.070
加1的话这边变成2

15:28.070 --> 15:29.070
但是你可以看到

15:29.070 --> 15:30.070
整个constructor方法

15:30.070 --> 15:31.070
把它执行什么

15:31.070 --> 15:32.070
是不是只执行一次

15:32.070 --> 15:33.070
对吧

15:33.070 --> 15:34.070
只执行一次

15:34.070 --> 15:37.070
这是关于这个constructor

15:37.070 --> 15:38.070
好

15:38.070 --> 15:39.070
然后下一个

15:39.070 --> 15:40.070
下一个是Render

15:40.070 --> 15:43.070
Render的话是必须要有的

15:43.070 --> 15:44.070
OK

15:44.070 --> 15:45.070
这边写一下

15:45.070 --> 15:46.070
Render

15:47.070 --> 15:49.070
Render是

15:50.070 --> 15:53.380
整个类组建筑

15:53.380 --> 15:54.380
类组建筑

15:55.380 --> 15:56.380
必须

15:57.380 --> 15:58.380
要书写

15:59.380 --> 16:01.380
书写的生命周期方法

16:02.380 --> 16:05.400
OK

16:05.400 --> 16:06.400
你可以没有那个

16:06.400 --> 16:08.400
可以没有这个constructor

16:08.400 --> 16:09.400
可以的

16:09.400 --> 16:11.400
不用我这边让我不要constructor

16:11.400 --> 16:13.400
不要把这个注射掉

16:14.400 --> 16:15.400
把这个

16:15.400 --> 16:16.400
这些都注射掉

16:17.400 --> 16:18.400
OK

16:18.400 --> 16:19.400
就Render必须要有

16:19.400 --> 16:20.400
你看这个代码

16:20.400 --> 16:21.400
它是不会爆出的

16:21.400 --> 16:22.400
刷新一下

16:22.400 --> 16:23.400
对不对

16:23.400 --> 16:24.400
不会爆出

16:24.400 --> 16:25.400
你这边你

16:25.400 --> 16:26.400
不用我这边就选了

16:26.400 --> 16:28.400
一个一些内容出来

16:28.400 --> 16:29.400
是不是OK的

16:29.400 --> 16:30.400
对不对

16:30.400 --> 16:31.400
constructor

16:31.400 --> 16:32.400
其实的话

16:32.400 --> 16:34.400
它这边是有一个默认的

16:34.400 --> 16:36.400
它会生成一个默认的constructor

16:36.400 --> 16:37.400
所以你这边

16:37.400 --> 16:38.400
你没写

16:38.400 --> 16:39.400
它就会生成一个默认的

16:39.400 --> 16:40.400
OK

16:40.400 --> 16:41.400
但是这个Render

16:41.400 --> 16:42.400
Render你必须要写

16:42.400 --> 16:43.400
你如果Render都没有

16:43.400 --> 16:44.400
它就会爆出了

16:44.400 --> 16:45.400
比我们这边

16:45.400 --> 16:46.400
连Render都没有

16:46.400 --> 16:47.400
Render都没有

16:47.400 --> 16:48.400
你这个是不是就空的

16:48.400 --> 16:49.400
空了

16:49.400 --> 16:50.400
你看这边

16:50.400 --> 16:51.400
就爆出了

16:51.400 --> 16:52.400
爆的就是

16:52.400 --> 16:54.400
noRenderMessage to found

16:54.400 --> 16:55.400
对不对

16:55.400 --> 16:56.400
on the return

16:56.400 --> 16:57.400
component instance

16:58.400 --> 16:59.400
OK

16:59.400 --> 17:00.400
它说你这些

17:00.400 --> 17:01.400
组建实力上面

17:01.400 --> 17:03.400
找不到这个Render方法

17:03.400 --> 17:04.400
所以我们这边

17:04.400 --> 17:06.400
Render是必须要有的

17:07.400 --> 17:08.400
Render的话

17:08.400 --> 17:09.400
我们来看一下

17:09.400 --> 17:10.400
Render的话

17:10.400 --> 17:12.400
它返回一个虚拟动物

17:12.400 --> 17:13.400
这个虚拟动物的话

17:13.400 --> 17:14.400
会被挂载到

17:14.400 --> 17:15.400
虚拟动物树中

17:15.400 --> 17:18.400
最终渲染成真实的这个动物

17:18.400 --> 17:19.400
也就是你这边的话

17:19.400 --> 17:20.400
你得

17:20.400 --> 17:21.400
就是你这边

17:21.400 --> 17:22.400
你这个有Render

17:22.400 --> 17:23.400
你没有这个return

17:23.400 --> 17:24.400
行不行

17:24.400 --> 17:25.400
行不行

17:25.400 --> 17:26.400
你看这边你移上来

17:26.400 --> 17:27.400
看到没有

17:27.400 --> 17:28.400
yourRenderMessage

17:28.400 --> 17:30.400
should have a return statement

17:30.400 --> 17:31.400
是不是人家这边

17:31.400 --> 17:32.400
已经提示你了

17:32.400 --> 17:33.400
对不对

17:33.400 --> 17:34.400
这边return

17:34.400 --> 17:35.400
OK

17:35.400 --> 17:36.400
return什么呢

17:36.400 --> 17:37.400
一般来讲

17:37.400 --> 17:38.400
我们就是返回一段

17:38.400 --> 17:39.400
JSX

17:39.400 --> 17:40.400
比较像这个

17:40.400 --> 17:41.400
这个时候就是一段JSX

17:41.400 --> 17:42.400
对吧

17:42.400 --> 17:43.400
返回一段JSX

17:43.400 --> 17:45.400
他才知道你这个组件

17:45.400 --> 17:47.400
是不是长什么样子

17:47.400 --> 17:48.400
对吧

17:48.400 --> 17:49.400
OK

17:49.400 --> 17:52.400
Render可能不只运行一次

17:52.400 --> 17:54.400
那只要重新渲染

17:54.400 --> 17:56.400
他就会重新运行

17:56.400 --> 17:58.400
比如说我们看刚才的那个

17:58.400 --> 18:00.400
我们把刚才那个

18:00.400 --> 18:01.400
把这个租掉

18:03.400 --> 18:04.400
把这个打开

18:04.400 --> 18:05.400
打开之后

18:05.400 --> 18:06.400
然后接下来把这个

18:06.400 --> 18:07.400
把这些都打开

18:08.400 --> 18:09.400
这些都打开

18:09.400 --> 18:11.400
constructor是只运行一次

18:11.400 --> 18:12.400
好

18:12.400 --> 18:13.400
Render里面

18:13.400 --> 18:14.400
这样我们这边

18:14.400 --> 18:15.400
我们打印一下

18:15.400 --> 18:16.400
就打印个Render

18:16.400 --> 18:17.400
OK

18:17.400 --> 18:18.400
保存

18:18.400 --> 18:19.400
保存之后

18:19.400 --> 18:20.400
然后加这边刷新

18:20.400 --> 18:21.400
好

18:21.400 --> 18:22.400
第一次的话

18:22.400 --> 18:24.400
先执行的是constructor

18:24.400 --> 18:26.400
然后接下来执行的是什么

18:26.400 --> 18:27.400
就执行的是Render

18:27.400 --> 18:28.400
对吧

18:28.400 --> 18:29.400
好

18:29.400 --> 18:30.400
这样我这边加1

18:30.400 --> 18:31.400
加1的话必然会

18:31.400 --> 18:32.400
涉及到什么

18:32.400 --> 18:33.400
是不是整个这个

18:33.400 --> 18:34.400
试图的改变

18:34.400 --> 18:35.400
对吧

18:35.400 --> 18:36.400
所以他这边

18:36.400 --> 18:38.400
重新调用Render

18:38.400 --> 18:40.400
我这边只要点击

18:40.400 --> 18:42.400
他这边就会重新调用

18:42.400 --> 18:44.400
Render方法

18:44.400 --> 18:45.400
OK

18:45.400 --> 18:47.400
关于Render

18:47.400 --> 18:48.400
好

18:48.400 --> 18:50.400
然后严禁使用setState

18:50.400 --> 18:52.400
因为可能会导致

18:52.400 --> 18:53.400
无限地规渲染

18:53.400 --> 18:54.400
这个的话

18:54.400 --> 18:55.400
应该也很好理解吧

18:55.400 --> 18:57.400
你如果在这里面来setState

18:57.400 --> 18:58.400
本来的话

18:58.400 --> 18:59.400
我们这边

18:59.400 --> 19:00.400
我们这个Render

19:00.400 --> 19:01.400
他就是什么

19:01.400 --> 19:03.400
是不检测到你的State发生改变

19:03.400 --> 19:05.400
然后重新进行调用

19:05.400 --> 19:06.400
对不对

19:06.400 --> 19:07.400
你调用了之后

19:07.400 --> 19:08.400
你在这里面

19:08.400 --> 19:09.400
如果又重新设置

19:09.400 --> 19:11.400
就是重新setState的话

19:11.400 --> 19:12.400
他这边又重新调用他

19:12.400 --> 19:13.400
调用他

19:13.400 --> 19:14.400
他又重新设置了

19:14.400 --> 19:15.400
他又调用他

19:15.400 --> 19:17.400
那这个就是一个无限的地规了

19:17.400 --> 19:18.400
比如说

19:18.400 --> 19:19.400
我们这边

19:19.400 --> 19:21.400
我把这个放到这里面来

19:21.400 --> 19:22.400
放到这里面来

19:22.400 --> 19:23.400
你保存

19:23.400 --> 19:25.400
保存他肯定会爆出

19:25.400 --> 19:26.400
看了没有

19:26.400 --> 19:27.400
肯定会爆出

19:27.400 --> 19:28.400
这边不停的

19:28.400 --> 19:30.400
不停的这个渲染

19:30.400 --> 19:31.400
看了没有

19:31.400 --> 19:33.400
这样肯定是不对的

19:34.400 --> 19:36.400
重新刷新一下

19:36.400 --> 19:38.400
哎呦哎呦糟了

19:39.400 --> 19:40.400
完了

19:40.400 --> 19:42.400
被卡死了

19:42.400 --> 19:44.400
你看被卡死了

19:44.400 --> 19:46.400
这把他关了

19:46.400 --> 19:48.400
这边好像还开了一个

19:48.400 --> 19:51.400
重新刷新一下这个

19:51.400 --> 19:52.400
是不是3000

19:52.400 --> 19:54.400
我看一下

19:54.400 --> 19:56.400
我看一下我这边代码

19:56.400 --> 19:58.400
这边代码已经改回去了

19:58.400 --> 19:59.400
是吧

19:59.400 --> 20:00.400
改回去了

20:00.400 --> 20:01.400
把这个也关了吧

20:01.400 --> 20:02.400
再复制一下

20:04.400 --> 20:06.400
啊退出

20:06.400 --> 20:07.400
崩溃了

20:09.400 --> 20:12.900
重新开一个吧

20:12.900 --> 20:15.220
OK

20:15.220 --> 20:17.220
所以不要在那里面掉

20:17.220 --> 20:18.220
一般也不会有人做这种事

20:18.220 --> 20:19.220
是吧

20:19.220 --> 20:20.220
在这个扔凳里面掉

20:20.220 --> 20:21.220
OK

20:21.220 --> 20:22.220
这是关于扔凳

20:22.220 --> 20:24.220
扔凳这边的话

20:24.220 --> 20:25.220
就没什么了

20:25.220 --> 20:26.220
你看他

20:26.220 --> 20:27.220
再把那个官网

20:27.220 --> 20:29.220
再把官网的那个扔凳相关

20:29.220 --> 20:30.220
你再把它看一下

20:30.220 --> 20:31.220
就回头的话

20:31.220 --> 20:32.220
这几个下来

20:32.220 --> 20:33.220
这几个下来

20:33.220 --> 20:35.220
把这个整个这个网页

20:35.220 --> 20:37.220
我看我这个写没写

20:37.220 --> 20:39.220
写了的在这

20:39.220 --> 20:42.220
把这个就是整个官网

20:42.220 --> 20:44.220
这篇文档把它看一下

20:44.220 --> 20:46.220
这个刚才的话是constructor

20:46.220 --> 20:47.220
你把这看一下

20:47.220 --> 20:49.220
然后还有是什么呢

20:49.220 --> 20:51.220
还有就是关于

20:51.220 --> 20:53.220
Render

20:53.220 --> 20:54.220
OK

20:54.220 --> 20:55.220
把这下去看一下

20:55.220 --> 20:57.220
我们看到官网还说了什么

20:57.220 --> 20:59.220
Render被调用时

20:59.220 --> 21:00.220
他会检查

21:01.220 --> 21:03.220
他变化

21:03.220 --> 21:04.220
然后返回的话

21:04.220 --> 21:08.220
他这边可以返回的是react元素

21:08.220 --> 21:10.220
还记得react元素吗

21:10.220 --> 21:11.220
我们这边说的这个名词

21:11.220 --> 21:12.220
还记不记得

21:12.220 --> 21:14.220
就是你通过那个

21:14.220 --> 21:15.220
create

21:15.220 --> 21:17.220
react.createElement

21:17.220 --> 21:18.220
调那个方法

21:18.220 --> 21:20.220
他说最终返回的是一个对象

21:20.220 --> 21:21.220
对那个对象

21:21.220 --> 21:22.220
我们就说

21:22.220 --> 21:23.220
那个对象就是虚拟动物

21:23.220 --> 21:25.220
那那个东西都要

21:25.220 --> 21:26.220
在官网里面

21:26.220 --> 21:28.220
它就称之为是react元素

21:28.220 --> 21:29.220
或者是什么

21:29.220 --> 21:30.220
或者是数组

21:30.220 --> 21:32.220
或者fragment

21:32.220 --> 21:34.220
或者是一些这个

21:34.220 --> 21:35.220
可以渲染指

21:35.220 --> 21:37.220
节点到不同的指数中

21:37.220 --> 21:38.220
Portals

21:38.220 --> 21:39.220
这个我们后面再说

21:39.220 --> 21:40.220
自付串

21:40.220 --> 21:42.220
然后数值

21:42.220 --> 21:44.220
或者是布尔类型这些

21:44.220 --> 21:45.220
你这边的话

21:45.220 --> 21:46.220
你返回

21:46.220 --> 21:47.220
如果你什么都不渲染的话

21:47.220 --> 21:48.220
你就返回一个null

21:48.220 --> 21:49.220
它就不渲染

21:49.220 --> 21:51.220
比如我们在这里

21:51.220 --> 21:52.220
在这里

21:52.220 --> 21:55.220
这里你如果返回一个null

21:55.220 --> 21:56.220
OK

21:56.220 --> 21:59.910
它就什么都不渲染

21:59.910 --> 22:00.910
看到没有

22:00.910 --> 22:01.910
什么都不渲染

22:03.910 --> 22:04.910
OK

22:04.910 --> 22:06.910
我们把这个还是添加到笔记里面吧

22:06.910 --> 22:08.910
把这个还是添加到笔记里面

22:08.910 --> 22:10.910
放到这个Render

22:14.380 --> 22:15.380
这是关于Render

22:17.380 --> 22:18.380
react

22:19.380 --> 22:20.380
放到这里

22:22.380 --> 22:24.380
刚才那个constructor

22:24.380 --> 22:26.380
constructor的话就是

22:29.380 --> 22:31.380
把这里放一个吧

22:32.380 --> 22:33.380
react

22:35.380 --> 22:37.380
constructor的话

22:39.380 --> 22:41.380
这个也不用放就是吧

22:41.380 --> 22:43.380
constructor就和那个Render差不多的

22:43.380 --> 22:44.380
我把这个伸了

22:45.380 --> 22:46.380
这个也不需要

22:47.380 --> 22:48.380
OK

22:50.750 --> 22:52.750
这是constructor render

22:52.750 --> 22:53.750
下一个

22:53.750 --> 22:55.750
下一个的话是component

22:55.750 --> 22:56.750
didmount

22:56.750 --> 22:58.750
这个的话也非常常用

22:58.750 --> 23:00.750
这个其实就类似于那个view里面的

23:01.750 --> 23:03.750
这边说一下

23:03.750 --> 23:04.750
类似于

23:12.910 --> 23:14.910
类似于这个view

23:15.910 --> 23:16.910
里面的

23:16.910 --> 23:17.910
这个mount

23:19.910 --> 23:20.910
OK类似于这个

23:20.910 --> 23:21.910
那mount的话

23:21.910 --> 23:22.910
是不是在这个

23:22.910 --> 23:25.910
整个训练动物挂载之后

23:25.910 --> 23:27.910
是不是会调用这个mount的

23:27.910 --> 23:28.910
代表是不是已经挂载了

23:28.910 --> 23:29.910
对吧

23:29.910 --> 23:31.910
然后我们一般会在mount里面干什么

23:31.910 --> 23:33.910
所以我们一般会在mount里面

23:33.910 --> 23:35.910
做一些这个网络请求啊

23:35.910 --> 23:37.910
或者一些其他的额外的一些事情啊

23:37.910 --> 23:40.910
比如你这个启动计时器啊之类的

23:40.910 --> 23:41.910
那通常情况下的话

23:41.910 --> 23:43.910
这部分操作都是写在

23:43.910 --> 23:44.910
component didmount

23:44.910 --> 23:46.910
这个didmount里面

23:46.910 --> 23:47.910
OK那这个的话

23:47.910 --> 23:49.910
你就可以使用set state了

23:49.910 --> 23:50.910
因为一般的话

23:50.910 --> 23:52.910
你的数据是通过发送

23:52.910 --> 23:53.910
这个阿加克斯请求

23:53.910 --> 23:54.910
请求回来的

23:54.910 --> 23:55.910
对吧

23:55.910 --> 23:56.910
请求回来之后

23:56.910 --> 23:58.910
再这边让我们通过这个set state

23:58.910 --> 23:59.910
把这个数据

23:59.910 --> 24:00.910
把他拉到

24:00.910 --> 24:01.910
OK

24:02.910 --> 24:04.910
这是component didmount

24:04.910 --> 24:05.910
我们来看一下吧

24:05.910 --> 24:06.910
来看一下

24:06.910 --> 24:07.910
我们这边的话

24:07.910 --> 24:09.910
component

24:11.910 --> 24:13.910
component didmount

24:13.910 --> 24:14.910
这个

24:15.910 --> 24:16.910
OK

24:16.910 --> 24:18.910
我们这边我们来打印一下

24:18.910 --> 24:19.910
比如说就打印这个

24:19.910 --> 24:21.910
我们先看一下他的执行顺序

24:22.910 --> 24:26.740
这边来看一下刷新

24:26.740 --> 24:27.740
你看

24:27.740 --> 24:28.740
首先的话是constructor

24:28.740 --> 24:29.740
对吧

24:29.740 --> 24:31.740
这个是最早的时候

24:31.740 --> 24:33.740
创建组建的时候

24:33.740 --> 24:34.740
然后接下来的话

24:34.740 --> 24:35.740
他开始什么

24:35.740 --> 24:36.740
调用render

24:36.740 --> 24:37.740
render的话就干嘛

24:37.740 --> 24:39.740
render的话是不是就是做渲染

24:39.740 --> 24:41.740
把你的虚拟道目

24:41.740 --> 24:43.740
大家渲染到真实道目里面

24:43.740 --> 24:45.740
也就是说你整个这个仕图

24:45.740 --> 24:46.740
已经OK了

24:46.740 --> 24:47.740
已经OK了

24:47.740 --> 24:48.740
OK了之后

24:48.740 --> 24:50.740
然后加这边component didmount

24:50.740 --> 24:51.740
你看这个

24:51.740 --> 24:52.740
这个是过去时

24:52.740 --> 24:53.740
对吧

24:53.740 --> 24:54.740
did

24:54.740 --> 24:56.740
就他已经mount了

24:56.740 --> 24:57.740
已经挂载了

24:57.740 --> 24:59.740
整个这个组建已经挂载上去了

24:59.740 --> 25:00.740
挂载上去之后

25:00.740 --> 25:01.740
然后接下来

25:01.740 --> 25:03.740
你就可以在这边

25:03.740 --> 25:04.740
你就可以来

25:04.740 --> 25:06.740
书写一些这个

25:06.740 --> 25:08.740
就是发送一些阿甲克斯请求

25:08.740 --> 25:10.740
接下来

25:10.740 --> 25:15.740
接下来就可以在这里

25:15.740 --> 25:17.740
发送一些

25:17.740 --> 25:19.740
就发送阿甲克斯请求

25:19.740 --> 25:21.740
阿甲克斯请求

25:21.740 --> 25:23.740
或者

25:23.740 --> 25:24.740
或者干嘛呢

25:24.740 --> 25:26.740
或者这个

25:26.740 --> 25:28.740
绑定计时器之类的

25:30.740 --> 25:34.740
绑定计时器之类的操作

25:34.740 --> 25:36.740
OK

25:36.740 --> 25:37.740
我们这边的话

25:37.740 --> 25:39.740
可以看一下这个官网

25:39.740 --> 25:40.740
官网在这边

25:40.740 --> 25:42.740
component didmount

25:42.740 --> 25:45.740
他会在组建挂载后

25:45.740 --> 25:46.740
也就是说

25:46.740 --> 25:47.740
插入多么树中

25:47.740 --> 25:49.740
立即被调用

25:49.740 --> 25:50.740
他一般就干嘛

25:50.740 --> 25:51.740
一般就是适合添加

25:51.740 --> 25:52.740
订阅的地方

25:52.740 --> 25:54.740
比如说你可以在这边

25:54.740 --> 25:55.740
比如这边

25:55.740 --> 25:57.740
比如说可以通过网络请求来

25:57.740 --> 25:58.740
获取数据

25:58.740 --> 25:59.740
对吧

25:59.740 --> 26:00.740
一般的话就是

26:00.740 --> 26:02.740
你比如说要发阿甲克斯的话

26:02.740 --> 26:04.740
一般就是在这个位置

26:04.740 --> 26:06.740
就在component didmount

26:06.740 --> 26:07.740
看这边的话

26:07.740 --> 26:09.740
我给大家举个例子吧

26:09.740 --> 26:10.740
举个什么例子呢

26:10.740 --> 26:13.740
这边要发阿甲克斯请求

26:13.740 --> 26:15.740
阿甲克斯请求

26:15.740 --> 26:16.740
然后我还得去装一个

26:16.740 --> 26:17.740
actual school

26:17.740 --> 26:18.740
算了

26:18.740 --> 26:20.740
太麻烦了

26:20.740 --> 26:22.740
这样子

26:25.740 --> 26:27.740
我想一想

26:29.740 --> 26:31.740
我们在后面吧

26:31.740 --> 26:33.740
后面我们讲那个rotor的时候

26:33.740 --> 26:36.740
当时我们会做一个学生管理系统

26:36.740 --> 26:37.740
那个时候的话

26:37.740 --> 26:39.740
就会涉及到发送请求

26:39.740 --> 26:40.740
到时候的话

26:40.740 --> 26:41.740
我给大家演示一下

26:41.740 --> 26:44.740
就在component didmount里面

26:44.740 --> 26:45.740
你在这边的话

26:45.740 --> 26:47.740
发送这个阿甲克斯请求

26:47.740 --> 26:48.740
我现在的话

26:48.740 --> 26:50.740
我还得去找哪有数据

26:50.740 --> 26:51.740
拿到数据

26:51.740 --> 26:52.740
拿到数据之后

26:52.740 --> 26:54.740
然后还得装个actual school

26:54.740 --> 26:55.740
有点麻烦

26:55.740 --> 26:56.740
反正你总之你记住

26:56.740 --> 26:57.740
就是我们这个

26:57.740 --> 26:58.740
如果是内组建

26:58.740 --> 26:59.740
内组建的话

26:59.740 --> 27:01.740
一般发这个阿甲克斯请求什么的

27:01.740 --> 27:02.740
都是在这个

27:02.740 --> 27:05.740
在这个component didmount里面

27:07.740 --> 27:09.740
然后这边

27:09.740 --> 27:11.740
component didmount

27:11.740 --> 27:12.740
然后接下来的话

27:12.740 --> 27:14.740
这个component will amount

27:14.740 --> 27:15.740
这个的话

27:15.740 --> 27:17.740
就是主建销汇的时候

27:17.740 --> 27:18.740
主建销汇的时候

27:18.740 --> 27:20.740
会调用这个

27:20.740 --> 27:22.740
component will amount

27:22.740 --> 27:23.740
我们这边来看一下

27:23.740 --> 27:26.740
比如说我在这里

27:26.740 --> 27:27.740
这里的话

27:27.740 --> 27:32.740
component will amount

27:32.740 --> 27:34.740
就这个

27:34.740 --> 27:37.740
这个是在主建销汇的时候

27:37.740 --> 27:41.740
在主建销汇的时候

27:41.740 --> 27:43.740
会调用

27:43.740 --> 27:46.740
会调用

27:46.740 --> 27:49.740
该生命周期

27:49.740 --> 27:51.740
勾字函数

27:51.740 --> 27:52.740
OK

27:52.740 --> 27:54.740
我们这边我们来看一下

27:54.740 --> 28:00.430
我们这边就写一个component will amount

28:00.430 --> 28:01.430
OK

28:01.430 --> 28:02.430
我们如何让它消费呢

28:02.430 --> 28:03.430
我们这样子

28:03.430 --> 28:05.430
我们这边的话

28:05.430 --> 28:06.430
把这个值

28:06.430 --> 28:08.430
我们这边这个值是加一是吧

28:08.430 --> 28:10.430
加一的话

28:10.430 --> 28:12.430
我们再搞一个直主线

28:12.430 --> 28:15.430
再搞个直主线

28:15.430 --> 28:16.430
比如说这里

28:16.430 --> 28:18.430
这里我们之前写了一些直主线是吧

28:18.430 --> 28:19.430
我们找一些

28:19.430 --> 28:21.430
这个是Hello

28:21.430 --> 28:23.430
这个是Barton

28:23.430 --> 28:26.430
有没有干净一点的

28:26.430 --> 28:27.430
干净点

28:27.430 --> 28:29.430
我们再创建一个

28:29.430 --> 28:32.430
创建一个child.js

28:32.430 --> 28:35.430
我们这边就用这个

28:35.430 --> 28:36.430
函数主线

28:36.430 --> 28:39.430
比较这是

28:39.430 --> 28:41.430
这是直主线

28:41.430 --> 28:42.430
OK

28:42.430 --> 28:43.430
在这里

28:43.430 --> 28:44.430
在这里的话

28:44.430 --> 28:46.430
我们引入这个直主线

28:46.430 --> 28:47.430
import

28:47.430 --> 28:49.430
然后child

28:49.430 --> 28:51.430
from

28:51.430 --> 28:54.430
component 下面的child

28:54.430 --> 28:55.430
OK

28:55.430 --> 28:56.430
好

28:56.430 --> 28:58.430
接下来我们在这里

28:58.430 --> 29:01.430
在这里我们来展示这个直主线

29:01.430 --> 29:03.430
展示这个直主线的话

29:03.430 --> 29:04.430
我们这边的话

29:04.430 --> 29:06.430
如果要直接展示的话

29:06.430 --> 29:08.430
这边是不是就直接child

29:08.430 --> 29:10.430
直接这样子是不是就OK了

29:10.430 --> 29:11.430
对吧

29:11.430 --> 29:12.430
你这样子

29:12.430 --> 29:15.430
那个直主线就出来了

29:15.430 --> 29:17.430
在这里

29:17.430 --> 29:19.430
这边

29:19.430 --> 29:20.430
直主线就出来了

29:20.430 --> 29:21.430
好

29:21.430 --> 29:22.430
我们现在做什么事情

29:22.430 --> 29:23.430
我们现在做的话

29:23.430 --> 29:24.430
我们这边

29:24.430 --> 29:25.430
如果是偶数

29:25.430 --> 29:26.430
它出来

29:26.430 --> 29:27.430
或者击数的时候

29:27.430 --> 29:28.430
它出来

29:28.430 --> 29:30.430
偶数的话它就不展示

29:30.430 --> 29:31.430
那这个怎么做

29:31.430 --> 29:32.430
这个的话

29:32.430 --> 29:33.430
我们就可以这样子

29:33.430 --> 29:35.430
我们来依赖于什么呢

29:35.430 --> 29:39.430
依赖于this.stat.value

29:39.430 --> 29:40.430
对吧

29:40.430 --> 29:42.430
如果它对2取

29:42.430 --> 29:45.430
全等于0

29:45.430 --> 29:46.430
这个的话

29:46.430 --> 29:48.430
就说明它当前是个偶数

29:48.430 --> 29:49.430
就说我们让它不展示

29:49.430 --> 29:50.430
我们就是一个null

29:50.430 --> 29:51.430
否则的话

29:51.430 --> 29:52.430
我们就干嘛呢

29:52.430 --> 29:53.430
我们就让它展示出来

29:53.430 --> 29:54.430
可不可以啊

29:54.430 --> 29:55.430
所以击数展示

29:55.430 --> 29:56.430
偶数不展示

29:56.430 --> 29:58.430
那这边就会涉及到什么

29:58.430 --> 30:00.430
涉及到这个直主线的销毁

30:00.430 --> 30:01.430
对吧

30:01.430 --> 30:02.430
然后我们在这

30:02.430 --> 30:03.430
我们这边还不能写

30:03.430 --> 30:04.430
还不能写那个

30:04.430 --> 30:06.430
函数主线

30:06.430 --> 30:07.430
我们这边还要写成内主线

30:07.430 --> 30:08.430
因为我们要把这个方法

30:08.430 --> 30:10.430
我们要把这个方法放到哪里

30:10.430 --> 30:11.430
是不是放到直主线里面

30:11.430 --> 30:12.430
对吧

30:12.430 --> 30:14.430
把重新写一下

30:14.430 --> 30:15.430
这边的话

30:16.430 --> 30:17.430
是什么来着

30:21.430 --> 30:25.430
rccontact

30:25.430 --> 30:28.430
ccr

30:28.430 --> 30:31.430
ccs

30:31.430 --> 30:33.430
ccs

30:33.430 --> 30:35.430
好

30:35.430 --> 30:37.430
它每次要给我少一句

30:37.430 --> 30:38.430
回头再找一下

30:38.430 --> 30:39.430
看一下

30:39.430 --> 30:41.430
应该是有其他的

30:41.430 --> 30:43.430
找一下换一个

30:43.430 --> 30:44.430
这个它每次会给我少一句

30:44.430 --> 30:46.430
我还要自己敲一下

30:46.430 --> 30:47.430
有点麻烦

30:47.430 --> 30:48.430
好

30:48.430 --> 30:49.430
然后这里

30:49.430 --> 30:50.430
这里的话

30:50.430 --> 30:52.430
我们这边就返回一个div

30:52.430 --> 30:53.430
div里面

30:53.430 --> 30:55.430
这是直主键

30:55.430 --> 30:56.430
对吧

30:56.430 --> 30:57.430
这State

30:57.430 --> 30:58.430
State我们不需要

30:58.430 --> 30:59.430
好

30:59.430 --> 31:00.430
然后接下来的话

31:00.430 --> 31:01.430
这里

31:01.430 --> 31:02.430
把这句话

31:02.430 --> 31:03.430
把拿过来

31:03.430 --> 31:05.430
放到这

31:05.430 --> 31:06.430
OK

31:06.430 --> 31:08.430
这边的话就写个什么呢

31:08.430 --> 31:09.430
直主键

31:09.430 --> 31:11.430
直主键

31:11.430 --> 31:13.430
直主键

31:13.430 --> 31:14.430
销毁

31:14.430 --> 31:15.430
好

31:15.430 --> 31:17.430
然后我们这边再写个constructor

31:17.430 --> 31:24.220
再写个constructor

31:24.220 --> 31:26.220
constructor

31:26.220 --> 31:28.220
我们这边就输出一句话

31:28.220 --> 31:29.220
这边就是

31:29.220 --> 31:30.220
直主键

31:30.220 --> 31:32.220
就是创建直主键

31:34.220 --> 31:35.220
OK

31:35.220 --> 31:36.220
一个是创建的时候

31:36.220 --> 31:37.220
一个是销毁的时候

31:37.220 --> 31:38.220
好

31:38.220 --> 31:40.220
然后我们这边来看一下

31:40.220 --> 31:42.220
这边刷新一下

31:42.220 --> 31:43.220
这边报错了

31:43.220 --> 31:45.220
我看一下

31:45.220 --> 31:48.850
还是super

31:48.850 --> 31:49.850
super

31:51.850 --> 31:52.850
OK

31:52.850 --> 31:54.850
首先第一次constructor render

31:54.850 --> 31:56.850
创建直主键

31:56.850 --> 31:57.850
然后did mount

31:57.850 --> 31:58.850
这些都是

31:58.850 --> 32:00.850
我们这个

32:00.850 --> 32:02.850
APP这个主键

32:02.850 --> 32:03.850
对吧

32:03.850 --> 32:05.850
都是APP这个主键

32:05.850 --> 32:06.850
好

32:06.850 --> 32:07.850
然后

32:07.850 --> 32:08.850
创建直主键

32:08.850 --> 32:09.850
创建直主键

32:09.850 --> 32:10.850
这句话是这里

32:10.850 --> 32:11.850
是不是直主键

32:11.850 --> 32:12.850
对吧

32:12.850 --> 32:13.850
好

32:13.850 --> 32:14.850
我们把这个

32:14.850 --> 32:15.850
把它消除之后

32:15.850 --> 32:17.850
然后再让我们这边点一下加一

32:17.850 --> 32:18.850
你看

32:18.850 --> 32:19.850
这边的话

32:19.850 --> 32:20.850
首先我们这个副主键

32:20.850 --> 32:21.850
要重新 render

32:21.850 --> 32:22.850
这个是没问题的

32:22.850 --> 32:24.850
大家这边是不是直主键销毁

32:24.850 --> 32:25.850
对不对

32:25.850 --> 32:26.850
说明什么

32:26.850 --> 32:27.850
说明这边的话

32:27.850 --> 32:28.850
它调用了什么

32:28.850 --> 32:29.850
component

32:29.850 --> 32:30.850
vio mount

32:30.850 --> 32:31.850
对吧

32:31.850 --> 32:33.850
在你直主键销毁的时候

32:33.850 --> 32:34.850
好

32:34.850 --> 32:35.850
大家这边

32:35.850 --> 32:36.850
把它清除掉

32:36.850 --> 32:38.850
再加一

32:38.850 --> 32:39.850
它就出来了

32:39.850 --> 32:40.850
出来的话

32:40.850 --> 32:41.850
这边是创建直主键

32:41.850 --> 32:42.850
可能没有

32:42.850 --> 32:44.850
这个就是关于

32:44.850 --> 32:45.850
component

32:45.850 --> 32:46.850
vio mount

32:46.850 --> 32:48.850
在主键销毁的时候会调用

32:48.850 --> 32:50.850
那这个生命周期

32:50.850 --> 32:52.850
勾着方法一般做什么呢

32:52.850 --> 32:53.850
一般的话

32:53.850 --> 32:54.850
就是我们这边

32:54.850 --> 32:55.850
销毁一些

32:55.850 --> 32:57.850
这个主键依赖的资源

32:57.850 --> 33:00.850
特别是比如说技时器

33:00.850 --> 33:01.850
一般来讲的话

33:01.850 --> 33:02.850
你在那个

33:02.850 --> 33:07.080
在那个

33:07.080 --> 33:08.080
刚才我们说的那个

33:08.080 --> 33:09.080
component

33:09.080 --> 33:10.080
dint mount里面

33:10.080 --> 33:12.080
你如果设置了技时器的话

33:12.080 --> 33:13.080
比如 you set interval

33:13.080 --> 33:14.080
对吧

33:14.080 --> 33:15.080
设置技时器

33:15.080 --> 33:17.080
技时器人既然你主键销毁了

33:17.080 --> 33:19.080
技时器是不是还在

33:19.080 --> 33:20.080
对不对

33:20.080 --> 33:22.080
你如果不把技时器清除了的话

33:22.080 --> 33:24.080
你这样子就会有bug

33:24.080 --> 33:26.080
技时器是一直存在的

33:26.080 --> 33:27.080
它一直在set interval

33:27.080 --> 33:29.080
一直在反复的调用

33:29.080 --> 33:31.080
你设置的那个函数

33:31.080 --> 33:33.080
所以我们一般在这个主键

33:33.080 --> 33:34.080
销毁这个主键的时候

33:34.080 --> 33:35.080
我们会把技时器

33:35.080 --> 33:36.080
这些

33:36.080 --> 33:37.080
也把它清空一下

33:37.080 --> 33:38.080
就放在这边

33:38.080 --> 33:39.080
就放在这个

33:39.080 --> 33:41.080
勾字函数里面

33:41.080 --> 33:42.080
OK

33:42.080 --> 33:44.080
这是关于component

33:44.080 --> 33:45.080
dint mount

33:45.080 --> 33:47.080
而其他的话

33:47.080 --> 33:49.080
就没什么了

33:49.080 --> 33:50.080
这个是dint mount

33:50.080 --> 33:52.080
这边还有一个dint update

33:52.080 --> 33:54.080
这个是在更新的时候

33:54.080 --> 33:56.080
在更新的时候

33:56.080 --> 33:57.080
我们看一下吧

33:57.080 --> 33:58.080
这边

33:58.080 --> 34:00.080
component dint update

34:00.080 --> 34:02.080
它会在更新后立即调用

34:02.080 --> 34:04.080
这个的话我倒是

34:04.080 --> 34:05.080
用的比较少

34:05.080 --> 34:06.080
这个一般就是什么呢

34:06.080 --> 34:07.080
一般就是

34:07.080 --> 34:09.080
你可以在主键更新后

34:09.080 --> 34:11.080
你可以对这个dorm

34:11.080 --> 34:12.080
提醒一些操作

34:12.080 --> 34:13.080
OK

34:13.080 --> 34:14.080
来我们这边

34:14.080 --> 34:15.080
我们来看一下吧

34:15.080 --> 34:17.080
比如说我们这边

34:17.080 --> 34:19.080
写个component

34:19.080 --> 34:24.080
component dint update

34:24.080 --> 34:29.860
这是更新后调用

34:29.860 --> 34:32.860
更新后调用

34:32.860 --> 34:34.860
zrg

34:34.860 --> 34:38.860
component dint update

34:38.860 --> 34:41.370
OK

34:41.370 --> 34:42.370
我们这边

34:42.370 --> 34:43.370
我们来看一下

34:43.370 --> 34:45.740
这边

34:45.740 --> 34:46.240
刷新

34:46.240 --> 34:48.240
第一次的话是不会调用的

34:48.240 --> 34:49.240
第一次并没有

34:49.240 --> 34:50.240
我们把它消除掉

34:50.240 --> 34:52.240
消除掉之后再加我们点加一

34:52.240 --> 34:54.240
点加一的话意味着什么

34:54.240 --> 34:56.240
意味着你整个主键是不要

34:56.240 --> 34:57.240
重新更新

34:57.240 --> 34:59.240
重新更新到我们这边加一

34:59.240 --> 35:00.240
加一的话你会看到这边

35:00.240 --> 35:02.240
首先这个Render

35:02.240 --> 35:03.240
它会先

35:03.240 --> 35:05.240
它是在Render之后

35:05.240 --> 35:06.240
Render之后

35:06.240 --> 35:08.240
首先的话这边调用这个Render

35:08.240 --> 35:09.240
直主键销毁

35:09.240 --> 35:11.240
这个是来自于直主键

35:11.240 --> 35:12.240
大家这边

35:12.240 --> 35:15.240
component dint update

35:15.240 --> 35:17.240
OK就调用这个

35:17.240 --> 35:19.240
这个的话它是有参数的

35:19.240 --> 35:21.240
我们来看一下

35:21.240 --> 35:23.240
它这边是有参数的

35:23.240 --> 35:24.240
它这边的话有三个参数

35:24.240 --> 35:27.240
一个是上一次的props

35:27.240 --> 35:29.240
另外一个的话是上一次的state

35:29.240 --> 35:32.240
还有一个的话是快照

35:32.240 --> 35:34.240
快照是什么意思呢

35:34.240 --> 35:36.240
快照的话是和另外一个

35:36.240 --> 35:38.240
和另外一个就这个

35:38.240 --> 35:39.240
这个不常用的这个

35:39.240 --> 35:41.240
这个叫做get a slap shot

35:41.240 --> 35:43.240
before update

35:43.240 --> 35:44.240
和这个生命周期

35:44.240 --> 35:46.240
格子函数有关系

35:46.240 --> 35:47.240
就你在这个生命周期

35:47.240 --> 35:49.240
格子函数里面

35:49.240 --> 35:50.240
你去返回一个值

35:50.240 --> 35:51.240
返回一个值的话

35:51.240 --> 35:52.240
它会传入到什么呢

35:52.240 --> 35:53.240
它会作为第三个参数

35:53.240 --> 35:56.240
传给component dint update

35:56.240 --> 35:58.240
但这玩意的话真的不常用

35:58.240 --> 35:59.240
真的不常用

35:59.240 --> 36:01.240
我这边的话就不掩饰了

36:01.240 --> 36:03.240
你其实整个生命周期

36:03.240 --> 36:04.240
现在都不常用了

36:04.240 --> 36:05.240
对不对

36:05.240 --> 36:07.240
整个生命周期都不常用了

36:07.240 --> 36:10.240
这个大家作为了解嘛

36:10.240 --> 36:12.240
component dint update

36:13.240 --> 36:16.240
其他的话就没什么了

36:16.240 --> 36:18.240
把整个这个生命周期的话

36:18.240 --> 36:20.240
就没什么要特别说明的

36:20.240 --> 36:21.240
其实实际上就

36:21.240 --> 36:23.240
如果你要掌握生命周期的话

36:23.240 --> 36:25.240
你就把这几个constructor

36:25.240 --> 36:26.240
render

36:26.240 --> 36:28.240
还有就是dead mount

36:28.240 --> 36:29.240
villain mount

36:29.240 --> 36:30.240
其实就这四个

36:30.240 --> 36:31.240
就这四个

36:31.240 --> 36:33.240
把这四个大致看一下

36:33.240 --> 36:35.240
其他的话都用的很少

36:35.240 --> 36:36.240
一般都用的很少

36:36.240 --> 36:39.240
现在整个这个内足键都用的少了

36:39.240 --> 36:40.240
对不对

36:40.240 --> 36:41.240
所以这个生命周期的话

36:41.240 --> 36:43.240
这个也就作为了解

36:43.240 --> 36:46.240
我这边的话也就不过多的

36:46.240 --> 36:47.240
去介绍他了

36:47.240 --> 36:49.240
如果就是大家有需求

36:49.240 --> 36:51.240
后期的话这个课程出来之后

36:51.240 --> 36:52.240
大家看了之后

36:52.240 --> 36:53.240
大家可以跟我反馈

36:53.240 --> 36:56.240
就如果你想要具体的了解一下

36:56.240 --> 36:57.240
比如说生命周期

36:57.240 --> 36:59.240
包括还有旧版的

36:59.240 --> 37:00.240
旧版的生命周期

37:00.240 --> 37:01.240
想了解一下

37:01.240 --> 37:02.240
新版的

37:02.240 --> 37:04.240
每一个想要详细了解一下

37:04.240 --> 37:05.240
那我到时候的话

37:05.240 --> 37:08.240
把单独录一个在这个就业片

37:08.240 --> 37:10.240
就业片单独录一个

37:10.240 --> 37:11.240
OK

37:11.240 --> 37:13.240
但我觉得大家应该是没有这种需求的

37:13.240 --> 37:16.240
因为后面大家都是用函数组件

37:16.240 --> 37:17.240
对吧

37:17.240 --> 37:18.240
OK

37:18.240 --> 37:22.240
而这就是关于这个react里面的生命周期

37:22.240 --> 37:23.240
也不是什么新知识

37:23.240 --> 37:24.240
对吧

37:24.240 --> 37:25.240
你学view的时候

37:25.240 --> 37:26.240
你就知道这个生命周期

37:26.240 --> 37:27.240
这我这边的话

37:27.240 --> 37:29.240
相当于就是换了一下名字

37:29.240 --> 37:30.240
对吧

37:30.240 --> 37:31.240
你就大致看一下

37:31.240 --> 37:33.240
就是哪些时间点

37:33.240 --> 37:35.240
他有哪些时间点

37:35.240 --> 37:36.240
然后我们经常要做的一些事情

37:36.240 --> 37:38.240
比如说发请求

37:38.240 --> 37:39.240
还就是销毁的时候

37:39.240 --> 37:42.240
一般他对应的函数是什么

37:42.240 --> 37:43.240
就OK了

37:43.240 --> 37:44.240
OK

37:44.240 --> 37:46.240
好这节课就到这里吧

37:46.240 --> 37:47.240
我们下节课再见

37:47.240 --> 37:48.240
拜拜

