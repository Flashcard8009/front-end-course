WEBVTT

00:00.370 --> 00:02.370
OK 咱们继续

00:03.370 --> 00:11.370
好 这节课的话 咱们来看一下react中 组建的这个状态 以及这个数据的这个传递

00:12.370 --> 00:19.370
主要就包含就是我们一个组建里面 我如何维护我自身的状态 以及就是别人的那个就是

00:20.370 --> 00:24.370
比如我的副组建给我传递了这个数据 我如何获取到

00:25.370 --> 00:29.370
OK 好 我们一个一个来看啊 好 首先的话 关于这个组建的这个状态

00:30.370 --> 00:36.370
这个的话 对于大家来讲的话 其实也不是陌生的 啊 大家回忆一下 大家在学那个view的时候

00:37.370 --> 00:46.370
view里面我一个组建的话 我组建内部是不是可以有这个自身的这个数据 对不对 我们就称之为在react里面啊 他称之为这个状态

00:47.370 --> 00:50.370
啊 在view里面他是怎么维护呢 他通过这个data

00:51.370 --> 00:57.370
还记得吧 对吧 data对应一个对象啊 里面就写上你这个组建对应的这个一些数据

00:57.370 --> 01:02.370
好 那在这个react里面react里面的话 他是通过这个state

01:03.370 --> 01:10.370
啊 因为他叫状态嘛 对吧 state这state的话有两种设置方式 一种的话是设置在这个构造函数里面

01:11.370 --> 01:17.370
啊 另外一种的话就是你像这样子直接写 ok啊 顺便要说一下啊 就是你的这个state

01:18.370 --> 01:22.370
设置这个状态只能是什么呢 只能是在内组建里面

01:23.370 --> 01:28.370
啊 所以说我就是我们上几颗说 早期的话函数组建被称之为无状态组建

01:29.370 --> 01:37.370
而那个内组建被称之为有状态组建还记得吧 对吧 但现在的话这个函数组建可以设置了

01:38.370 --> 01:42.370
啊 这个我们后面讲hook的时候我们会说啊 那我们这边让我们来看一下如何来进行设置

01:43.370 --> 01:49.370
好 我们这边呢 打开我们之前的这个项目啊 我把这些就全部清空了 现在就是一个干干净净的

01:49.370 --> 01:59.370
干干净净的 对吧 好 然后接下来的话 我这边我想给我的这个内组建 我想给他设置一个状态啊 怎么做呢 我可以来到这个constructor

02:01.370 --> 02:08.370
constructor ok 这个是我们的这个构造器 好 然后现在这边的话 首先这个super放在第一行

02:09.370 --> 02:16.370
好 然后完事之后这边是什么 unless啊 这个然后我们这边设置一个this.stat

02:17.370 --> 02:25.370
等于好 我们这边呢 给一个number 1 ok 那你看 现在我们这个app组建

02:25.970 --> 02:35.370
组建内部的话 他就有他自身的这个数据 叫做statstat对应是个对象 对象里面 然后就要有个这个nam对应的是1

02:36.770 --> 02:43.770
好 那回头的话 我想显示这个数据 怎么显示 我们把这儿改一下啊 这边的话 我们这样子 我们在上面

02:44.370 --> 02:49.970
上面的话 我们来显示这个状态的数据 怎么写呢 通过this.stat

02:50.770 --> 02:56.770
this.stat访问到这个状态啊 这个状态里面内部的点nam

02:57.770 --> 03:05.770
ok 保存一下 保存了之后让我们过来看一下 你看这边 把这放大一点点啊 ok 你看这边

03:06.370 --> 03:13.410
一一是不是就出来了 对吧 好 然后接下来的话 我们这边的话 除了这种这种写法以外 你还可以干嘛呢

03:13.410 --> 03:14.610
还可以直接这样子写

03:16.410 --> 03:22.810
啊 这边的直接stat等于大家这边nam对应一个e

03:23.610 --> 03:26.850
这种的话是这种简写 简写就你不用放在这个

03:27.850 --> 03:34.250
constructor里面 啊 但这个的话其实不是不是属于这个react的东西啊 这个是属于js

03:34.650 --> 03:40.210
js里面就是提供的一种这个新的语法啊 好 然后接下来我们这边我们看一下

03:41.210 --> 03:50.410
是不是同样确认出来了 对吧 啊 说说你这边的话 你想在一个内逐件里面 想要围护自己的这个数据状态

03:51.010 --> 03:59.210
你可以通过这么两种方式啊 好 然后接下来的话 我们这边的话 我们来尝试着啊 比如说我想要修改这个状态

03:59.890 --> 04:02.210
修改这个状态的话 我们这边啊 给个barter

04:03.210 --> 04:11.530
啊 比如这边呢 是一个加一 好 那这边呢 是不是设计到要绑定这个事件 对吧 啊 说为什么上节课的话 先把这个事件讲了

04:12.210 --> 04:13.410
好 这边让我们click

04:14.530 --> 04:17.410
好 这边让我们写个click handle

04:20.410 --> 04:22.250
啊 这边应该是什么 这边应该是z啊

04:23.170 --> 04:32.170
z点click handle啊 好 然后接下来在这里 这里的话我就把它写成一个箭头函数啊 方便就是到时候那个z的指向

04:32.970 --> 04:41.690
修正那个z的指向 否则它是一个undefine 对吧 好在这里 这里的话照理来讲的话啊 是不是这边我们z是点

04:42.850 --> 04:43.730
这个state

04:44.570 --> 04:48.530
点nam 我说拿到它之前的这个状态啊 然后接下来的话加加

04:49.370 --> 04:52.570
理论上来讲的话 就是你第一反应就是想到的是这样子的

04:53.410 --> 04:57.610
对不对啊 我这边我修改他的这个状态 修改了之后的状态一遍

04:58.050 --> 05:00.170
react的话 他会自动把这边

05:00.770 --> 05:05.050
啊 就这个jsx这边的这个这个这个试图 自动的进行更新

05:05.770 --> 05:10.850
就和我们的这个view一样的 对吧 你data一遍啊 然后view的那个template

05:11.450 --> 05:16.650
他渲染的东西就变了 理论上来讲的话是这样子的 但是呢 你不能直接这样修改

05:17.650 --> 05:20.170
ok 你这边你把鼠标移上去 你看一下

05:20.930 --> 05:27.130
do not mutate 就不要去改变state directly 不要去直接的修改state

05:27.850 --> 05:30.810
他让你干嘛 让你使用state state

05:31.930 --> 05:38.610
啊 在react内部的话 你需要 就是你如果要修改这个state状态 你需要使用这个state state

05:39.370 --> 05:45.650
啊 这个的话在官网也是有说的啊 大家可以 就是要随时来看这个官网啊 随时看这个官网

05:46.210 --> 05:48.090
官网的话 我看是在哪里

05:49.450 --> 05:53.770
嗯 我看这边是不是state啊 是state 是state 然后

05:54.730 --> 05:59.290
啊 添加state 然后这边我看一下他修改修改

06:01.210 --> 06:02.970
嗯 这边都是生命周期了

06:04.250 --> 06:10.490
好 这里 这里 看到没有 使用这10点state state来更新组建的state

06:11.130 --> 06:16.570
我记得他有专门说 就是不要使用 不要直接去改啊 这里啊 在这里 看到没有

06:17.210 --> 06:23.050
正确的使用state 啊 这边有三件事 你需要了解 首先第一件事情就是什么呢

06:23.450 --> 06:25.610
不要直接修改state

06:26.490 --> 06:31.210
因为你直接这样子修改state的话 你直接这样子 我们这边这里是不是直接修改state

06:31.770 --> 06:38.730
你直接修改state的话react内部 他并不知道这里 就是这里发生了这个修改 因为他是个对象啊

06:39.850 --> 06:42.730
对 他是个对象 对象的话 他那个地址是没变的

06:43.690 --> 06:51.210
对不对 皆是的这个基础姿势啊 地址是没变的 没变的话 他并不知道这个地址内部是怎么变化的 他并不知道

06:51.930 --> 06:57.690
那他不知道他改变了 那他就没办法干嘛 是没有办法重新去渲染这个仕图

06:58.810 --> 07:03.770
对不对啊 所以你不能直接这样子修改啊 那怎么办呢 让你使用这个

07:04.490 --> 07:10.330
state state啊 你看这边 例如时代嘛 不会重新渲染组建 就你这样子来写

07:10.730 --> 07:14.730
而应该通过什么呢 而应该通过这10点state state

07:15.450 --> 07:20.810
好 那回到我们的代码 那我们这边的话啊 这边我们就把这个给干掉

07:21.450 --> 07:26.490
好 那这里怎么写 这里的话就应该是使用这10点state

07:28.170 --> 07:33.690
看没有 调用这个方法啊 所以为什么我们这边要写成这个箭头函数啊 你这边要修正这个这一次

07:34.010 --> 07:37.770
否则这个这一次是undefine 这是上级可的知识 对吧

07:38.250 --> 07:41.850
好 然后接下来的话 这边给他传入一个新的对象

07:42.730 --> 07:48.010
啊 这个新的对象 他到时候的话这个react内部 他就会把这个新的对象

07:48.650 --> 07:52.250
和你之前的这个state 进行一个合并

07:52.970 --> 07:56.170
啊 他内部的话其实就是用的是object点assign

07:57.210 --> 08:02.970
object点assign那个方法来进行两个对象的进行合并啊 好 然后接下来的话 你在这边

08:03.450 --> 08:10.250
你给他设置新的这个nam字 那么只的话 这边就 this点state点nam

08:10.810 --> 08:12.010
然后加一

08:12.730 --> 08:21.050
看了没有啊 this点statenam得到的是不这边是一 对不对 这样我让他这个加个一 加个一的话 然后加这个nam得到值就是二

08:21.530 --> 08:27.210
啊 然后这样我再把这个新的这个对象和之前的那个对象进行一个合并

08:28.010 --> 08:35.450
合并得到最终的这个状态值 那状态值啊 他检测到这边啊 就是你整个对象都变了嘛 对吧

08:35.850 --> 08:38.730
好 然后接下来他这边试图会进行一个更新

08:39.610 --> 08:41.690
ok 好 那我们保存一下 我们来看一下

08:43.690 --> 08:44.810
好 这里

08:46.810 --> 08:49.130
哦 我们这边的话加一个div啊

08:50.570 --> 08:55.930
啊 我这边的话我把它改成接式差了啊 因为那个接式确实不方便 对吧 让我这样子可以直接

08:56.650 --> 08:58.250
直接table键 要方便一些

08:59.530 --> 09:01.130
好 然后加这里的话来看一下

09:01.690 --> 09:08.170
你看 这边让他这边你这边加一这边是不是试图会发生改变 对吧 随着你的那个状态发生改变

09:08.570 --> 09:13.450
这边的话也会发生改变 ok 这是首先第一个啊 关于这个

09:14.410 --> 09:18.650
主件内部的这个状态你可以使用这个state ok

09:20.330 --> 09:24.330
好 然后这边不要直接去改啊好 那接下来下面

09:25.450 --> 09:30.730
set state他对状态的改变可能是一步的

09:31.690 --> 09:35.850
可能注意这边的话这两个字很关键可能是一步的

09:36.810 --> 09:42.490
就他有可能是同步的有可能是一步的 ok 这个的话在他的官网这边也有说

09:42.890 --> 09:44.170
你看他的第二点就是这个

09:45.530 --> 09:45.930
看到没有

09:46.970 --> 09:52.010
state的更新可能是一步的啊 出于这个性能考虑

09:52.570 --> 09:58.330
rekt会把多个这个set state调用合并成一个调用

09:58.970 --> 10:01.690
ok 比如说这边举个例子啊 我们来举个例子

10:02.410 --> 10:07.530
好 我这边的话我就把这个写到这吧 就把这个写到这把这个注射掉 ok

10:08.010 --> 10:13.770
好 比如说我这里我这里的话这个namrth.state加一对吧 好像这样我调用三次

10:16.380 --> 10:17.100
调用三次

10:18.620 --> 10:23.100
调用三次之后理论上这个平直觉的话你这边的话首先的话这边

10:23.420 --> 10:29.340
你最开始是一一的话这边这个加一变成二对吧 这里是二 这边是三 这边是四

10:29.900 --> 10:31.900
啊 那这个的话是同步的方式

10:32.780 --> 10:35.900
对吧 同步的方式 但实际上你这边你看一下

10:36.860 --> 10:40.060
好 我们这边重新刷新一下啊 当我点击之后走

10:40.860 --> 10:44.780
你看他最终会变成什么呢 最终他只会加一次

10:45.900 --> 10:51.660
最终他只会加一次 为什么 原因就是因为他这边的话他是一步的

10:52.380 --> 10:55.180
一步的话这边啊 怎么说 就是你这边的话

10:55.580 --> 11:01.020
rkt.state 然后接下来这边再设置 设置的话他这边要直啊 他拿到了其实是多少

11:01.340 --> 11:04.060
拿到了其实是你刚开始的一

11:05.660 --> 11:10.460
ok 刚开始的一啊 但是现在的话他还没有立即设置这个state

11:11.020 --> 11:14.780
啊 因为我们说了这个state一变 那你的这个

11:15.660 --> 11:21.420
试图是不需要这个重新更新 对不对 但是他现在的话还没有立即的这个就是设置

11:21.900 --> 11:23.180
ok 那接下来他下面

11:23.900 --> 11:28.940
下面的话 然后接下来他继续他查就是发现你这边的话再就是也在调用

11:29.340 --> 11:37.420
statestate啊 而且这次当前由于你上面的操作他是一步的 说这边的这个值的话还是多少呢 还是最初的

11:39.020 --> 11:43.100
ok 然后接下来的话 这里啊 这里也同理 这里的话 仍然是

11:44.380 --> 11:51.020
ok 也就是说你这边虽然是调用了三次 但是每一次其实拿到的都是什么 拿到的都是最初的这个值

11:52.140 --> 11:55.900
ok 最初的这个值啊 好 最后的话这个react

11:56.860 --> 11:59.900
他把它进行一个合并啊 合并调用

12:00.380 --> 12:05.100
所以最终的话你这边你会发现他这边啊就只有增加一次

12:05.900 --> 12:09.740
就只增加了一次啊 包括你这边你这边的话你可以就是

12:10.860 --> 12:14.540
在这里我们这边扔点方法是吧 扔点方法你这边你可以打印一下

12:15.900 --> 12:17.980
打印一下比如说我这边扔点

12:20.140 --> 12:23.740
啊 我们这边保存保存了之后的下我们这边我们来看一下啊 小心

12:24.700 --> 12:31.340
好 第一次他肯定要渲染嘛 对吧 第一次你把这个仕图渲染出来 这边要扔点一下 好 大家这边我点击

12:31.900 --> 12:35.100
然后保存没有那边 保存了的 好 大家这边我点击加印

12:36.140 --> 12:39.900
ok 你会发现这边最终扔点是不是也是 只扔点一次

12:40.940 --> 12:46.220
对吧 只扔点一次啊 这边是这个 注意啊 注意

12:47.180 --> 12:48.220
把他还原回去

12:49.180 --> 12:53.740
这个扔点我们让他保留在这嘛 我们之后随时要看的

12:55.500 --> 12:58.380
这是点 state 点浪

12:59.260 --> 13:01.500
ok 好 这两次就删了啊

13:03.180 --> 13:07.980
ok 好 然后接下来的话 这边要强调一个问题 就是他可能是一步

13:09.100 --> 13:13.820
我们刚是不是说他可能是一步 也就是说他有些时候是一步 有些时候不是一步

13:14.780 --> 13:20.300
这点就很奇怪了 对吧 你要么就是一步 要么就不是一步 为什么说他可能是一步呢

13:21.100 --> 13:28.780
因为他事实上他确实是这样子的 就是在ranked 他原码内部 他会把什么处理 当成一步呢 你看这里

13:29.980 --> 13:34.300
啊 他这个官网没说 但是这边的话 你去看他的这个原码 你就会知道

13:34.700 --> 13:41.740
他这里的话就是 如果你改变状态的代码 处于某个HTML元素的事件中

13:42.700 --> 13:51.180
那在这个react 内部的话 他采用的就是一步 否则的话他就是同步啊 这个怎么理解呢 我们这边我们来看一下

13:52.540 --> 13:58.220
比如说我这边我举个例子 我现在的话 你看我这边是不是给bottom绑了一个事件

13:59.100 --> 14:03.100
对这个是一个点击事件 这个是我点击事件的事件处理函数

14:03.580 --> 14:09.100
那我如果我是在一个事件里面啊 就我这边HTML的一个事件里面

14:09.580 --> 14:17.100
我来修改这个State啊 通过这个setState来修改这个State那么他这里就是一个一步的操作

14:17.740 --> 14:22.460
啊 你这边让你通过这样子也可以证明 然后这边让cancel.log直接打印

14:23.500 --> 14:25.660
res 点这个state

14:27.580 --> 14:32.940
state 点nam okay 好后面加一个那个吧

14:33.900 --> 14:38.620
这边加一个nam okay 保存 保存之后 然后现在我们这边我们来看一下

14:39.260 --> 14:39.580
刷新

14:40.860 --> 14:45.340
首先第一次 第一次呢 是不是要扔点里车 对吧 好 大家我这边点击加一

14:46.460 --> 14:54.380
ok 点击加一你会发现这边变成了二 但是这里这里打印的时候仍然是多少 仍然是一

14:55.580 --> 14:59.180
对不对 仍然是一啊 那这边的话就足以说明什么呀

14:59.740 --> 15:06.460
这边你对到的代码来看 足以说明什么 你这边的话是不是在设置这个修改这个state

15:06.940 --> 15:10.380
对不对 修改state之后 如果是同步 那这里就应该打印出多少

15:11.180 --> 15:16.620
这里是不是就应该打印出二 对不对啊 但不是啊 这里的话它是一步

15:17.580 --> 15:21.260
它是一步啊 说说这边的话 让它先执行第二十行代码

15:21.740 --> 15:24.220
因为第二十行代码的话 它是这个同步

15:25.020 --> 15:29.900
对吧 它是同步啊 先执行 执行的话 让它打印出来的是上一次的这个状态

15:30.460 --> 15:32.700
啊 然后同步代码执行完了之后

15:33.660 --> 15:38.860
才执行什么 是不是才执行这个义不代码 它背后的话是有一个这个事件对列

15:39.180 --> 15:44.140
它会把它加到这个事件对列里面 这个是属于那个JS里面的知识了

15:45.340 --> 15:46.700
ok 好

15:47.820 --> 15:48.700
回到我们这边

15:49.900 --> 15:54.700
啊 然后你这这种方式的话 它是一步的啊 你这里如果是在事件里面

15:55.020 --> 15:58.620
它是一步的 那什么时候是同步的啊 比如说我给他写个例子

15:59.180 --> 16:04.460
比如你如果不是在事件 不是在这个事件里面啊 比如说我们在这里

16:06.380 --> 16:11.100
啊 这里的话我们写个Z4.timer等于一个set integral

16:13.740 --> 16:14.620
set integral

16:15.180 --> 16:18.060
ok 我们让它每个一秒调用一次

16:18.860 --> 16:24.300
ok 我们这边呢 是不是写了一个G17喊说 那这这里的话它就是啊 同步的

16:24.940 --> 16:28.700
啊 它就是同步的 那比如说我们在这里 这里的话我们每次来设置

16:29.660 --> 16:31.820
Z4.set state

16:32.380 --> 16:35.580
然后我们把它设置为这个NUM 然后

16:36.300 --> 16:40.780
Z4.set.NUM啊 然后就加一个E

16:41.100 --> 16:47.820
啊 你不要写加加啊 注意同学们 不要写加加 为什么啊 加加的话 其实就还是刚才讲的那个问题

16:48.220 --> 16:54.380
你把鼠标E上去 你会发现干嘛 是不是你加加的话 相当于是直接在修改之前的这个状态

16:55.420 --> 16:57.820
对不对 是不是直接在修改之前的这个状态

16:58.300 --> 16:59.340
让它这个增加

17:00.060 --> 17:06.620
所以你这边加加和这个加一是不一样的啊 你这边的话加一加一的话是拿之前的值

17:07.020 --> 17:12.380
是不是加了个E 然后复制给他 对吧 那你加加加加加的话 相当于就是直接在修改

17:12.700 --> 17:15.740
是不是之前的这个状态值了 这样子的话是不行的

17:16.460 --> 17:18.700
我们说过不能直接修改之前的状态值

17:19.420 --> 17:20.780
对不对 注意啊

17:22.300 --> 17:25.180
加一加一完了之后 然后加你在这边你来答应

17:25.980 --> 17:27.340
我们这边就还是这句话

17:28.540 --> 17:28.860
答应

17:29.740 --> 17:33.580
ok 答应之后 然后加你这边你看一下 把这个Render

17:33.980 --> 17:39.180
Render它是肯定会有可能会影响我们的这个观察 我们刷新一下

17:40.620 --> 17:41.500
ok 你看这里

17:42.780 --> 17:47.180
这里 每次打印的时候 它这边是不是都是跟着变化了的

17:48.060 --> 17:52.540
对不对 跟着变化了的 那就说明什么 说明你这里是不是同步

17:53.100 --> 17:58.540
我们这边让它停止一下 比如你这边可以写一个E

17:59.980 --> 18:05.020
E4 z10.stat.nam 全等于一个10

18:05.820 --> 18:07.980
好 大家这边clear interval

18:08.540 --> 18:13.500
那z.timer 把停止掉 对吧 好 我们把这个Render先注释一下

18:14.220 --> 18:17.500
好 我们这边让我们保存一下 保存了之后让我们重新来

18:18.620 --> 18:21.580
好 你看1 2 3 你对照着代码

18:22.140 --> 18:27.260
你看 它这里的话 就这里的话 是不是它就是在同步进行执行

18:28.300 --> 18:35.180
对吧 先停止了 ok 说你这边你要注意 为什么它官网说的是可能是异部

18:36.140 --> 18:37.900
具体是什么原因 它官网没说

18:38.540 --> 18:44.220
这个的话 你要去看react的原码 你才知道 原因就是什么呢 原因就是这里

18:44.940 --> 18:51.900
啊 就你如果是这个事件里面 在就是某一个事件的处理函数里面

18:52.700 --> 18:56.860
去调用这个set state 它就是异部 否则的话就是同步

18:57.580 --> 19:03.340
它为什么这么设计呢 为什么要这么设计呢 原因很简单 因为这个react它考虑到

19:03.820 --> 19:11.340
就我如果我这边是一个事件 对吧 事件里面 然后接下来的话要设计到这个状态的改变

19:11.740 --> 19:15.740
那我的一个事件的话 往往里面要做的事情是很多的

19:16.700 --> 19:21.100
有可能你在事件里面啊 你要做就123456729是可能要做实践事情

19:21.500 --> 19:26.220
那你做实践事情的话 这样你不同的事情可能就是封装在不同的函数里面

19:27.100 --> 19:33.420
函数和函数之间又是独立的 然后函数内部的话 这样修改了这个你的这个状态

19:34.140 --> 19:41.100
那你在这里的话 如果这个你做这10件事情都修改了这个状态 那你这边就会涉及到什么呢 涉及到这边要渲染10次

19:41.500 --> 19:43.260
那这样子的话效率是比较低下的

19:44.060 --> 19:52.540
说这个react的话 他考虑到这一点啊 说在这个事件处理函数里面的set state 他就把它设计就是设计成这个异部

19:53.420 --> 19:59.820
到时候的话 他会有个对列 对列在对列里面排队啊 然后加最终计算出你的这个最终值

20:00.700 --> 20:05.820
计算你最终的值啊 然后接下来的话再再就是一次渲染就完事了

20:06.460 --> 20:08.860
ok 这个注意啊

20:10.460 --> 20:16.860
好 然后还有就是那我如果就是我在世界里面啊 如果在如果在

20:19.100 --> 20:27.340
在世界处理函数里边啊 我想要拿到这个set state 执行后的数据

20:28.140 --> 20:33.260
那怎么拿呢 这边的话有一个技巧就是你可以提前拿一个变量来存储计算结果

20:33.820 --> 20:35.740
ok 比如说我们这边的话可以这样子

20:37.340 --> 20:39.500
啊 把这个就注射掉了啊 这就不要了

20:40.380 --> 20:45.180
啊 你这边你可以怎么做 你这边可以这样子来做 你这边的话你就

20:46.380 --> 20:51.020
net一个new num 等于个什么 等于个这个

20:53.180 --> 20:54.940
对吧 好 然后再这边你把这个

20:55.820 --> 20:58.140
这个new num 设置为这个值

20:59.020 --> 21:03.660
ok 然后接下来这边你要获取这个最新的值 你这边就打印谁啊 说打印这个new num

21:04.380 --> 21:07.820
这样子就ok了 对吧 好 然后我们这边我们来看一下

21:08.940 --> 21:14.220
好 你这边 刷新一下 好 我这边呢我加一加一的话这边会变成什么 是变成二

21:14.380 --> 21:18.780
那刚才的话我们下面打印的是多少 是不是打印的是一 对吧 但这一次那就不一样了

21:19.340 --> 21:23.100
啊 这一次你看 状态变了 然后这边呢我们是不是也拿到了最新的值

21:23.900 --> 21:27.900
对不对啊 这个是一个小技巧啊 但其实还有一种方式

21:28.540 --> 21:31.820
这个只是其中一种方式啊 还有一种方式

21:33.100 --> 21:38.140
还有一种方式什么呢 我这边仍然是这是叠啊 就把这个拿过来

21:41.020 --> 21:47.340
ok 还有一种方式的话是这个set state的话 他给你提供了第二个参数

21:48.540 --> 21:52.620
第二个参数是一个回调函数 ok 我们就直接写箭头函数

21:53.500 --> 21:57.820
那你在这个回调函数里面 你就可以拿到这个最新的这个状态值

21:58.220 --> 21:58.940
好 我们这边走

22:00.700 --> 22:03.740
呃 这是点这个 state

22:04.460 --> 22:10.860
点 num ok 我们保存 保存了之后 然后下我们这边 我们来看一下 这边还是加个支付创啊

22:11.660 --> 22:13.020
nam 走

22:14.220 --> 22:19.900
好 刷新 刷新之后 然后加这边加一 你看 这边呢是二 然后加这里 这里的话 他是

22:20.220 --> 22:25.340
我们的第二个参数 是不是回调函数 对不对 回调函数里面 我们去访问这个nam

22:25.420 --> 22:29.740
那这里的话 他就会得到什么呢 得到了就是你最终的这个状态值

22:30.620 --> 22:35.260
ok 这是这种方式啊 回到我们的这个文档

22:36.380 --> 22:42.060
看一下啊 如果想要拿到set state 执行后的数据 可以提前拿一个变量来存储

22:42.700 --> 22:49.100
或者使用什么呢 或者使用set state的第二个参数

22:49.820 --> 22:55.820
啊 他是一个函数 这个函数的话会在state更新后被调用 这我们干是不是掩饰了

22:56.780 --> 23:03.500
对吧 好 最后的话 我们来看一下关于这个set state的 就是关于整个这个state啊

23:04.220 --> 23:09.900
啊 这边的一些最佳实践 而这边的话罗列了4条啊 我们一条一条来看

23:10.620 --> 23:16.300
首先第一条 把所有的这个set state 当作异部

23:17.260 --> 23:21.660
ok 什么意思 就我们刚说了 你set state的这个操作

23:22.060 --> 23:28.700
它根据你这个调用的场合 在有些场合它是同步 有些场合它是异部

23:29.260 --> 23:34.140
那我们这边的话 我们就统一都把它干嘛 统一都把它当成异部的

23:35.180 --> 23:38.700
ok 啊 其实第一点和第二点 其实说的是一个事情

23:39.420 --> 23:46.300
啊 统一把它当成异部的 永远不要去相信set state调用之后的状态

23:46.860 --> 23:49.100
啊 比如说就像我们刚才所说的 你在这里

23:50.620 --> 23:56.780
你在这里啊 你可能你现在的话 你分不清楚 它现在是同步还是异部啊 你在这边的话

23:57.180 --> 24:00.940
你直接去访问这个this.state.numb

24:01.420 --> 24:08.220
对吧 这个是你调用了set state之后 然后访问它的这个状态 永远不要去信任这个状态

24:08.220 --> 24:13.660
因为你分不清楚 这个状态究竟是就是它更新之前的值还是更新之后的值

24:14.060 --> 24:18.700
所以我们这边的话 异律干嘛呢 异律把它当成是异部的

24:20.220 --> 24:22.540
ok 异律当成是异部

24:23.420 --> 24:29.980
那么一旦异律当成异部的话 那我们要获取这个更新后的状态 那我们就使用什么

24:30.300 --> 24:39.180
所以我们就使用回调函数 对不对 我们就使用回调函数 通过回调函数来获取它这个最新的这个状态

24:40.300 --> 24:45.180
ok 好 那比如说我们这边回到我们刚才的那个例子 比如说我们这边

24:46.780 --> 24:49.660
这边的话 我们来解决刚才那个需求 哇 这些就删了

24:51.020 --> 24:57.260
好 我们来解决刚才那个需求 这边 我们刚才需求是什么 刚才的需求是你这边的话调用三次

24:57.740 --> 25:03.980
第一次加一 加一之后我们期望它变成二 变成二则 这边再加一变成三 这边再加一变成四

25:04.940 --> 25:09.820
对不对 也就是说我们这边就是要调用多次set state每一次

25:10.700 --> 25:13.420
要利用到什么呢 要利用到之前的状态值

25:14.940 --> 25:16.380
就外货就是每一次

25:17.500 --> 25:21.500
每一次调用set state

25:22.300 --> 25:26.780
都需要使用到上一次

25:27.420 --> 25:29.180
这个set值

25:29.820 --> 25:35.340
或者说就是最新的使用到最新的set值

25:36.620 --> 25:41.980
对吧 那怎么办呢 我们刚才已经知道你这样子是不好使的 这样子的话最终它就只加一次

25:42.780 --> 25:44.940
对吧 最终就只加一次 ok

25:45.500 --> 25:51.660
好 那怎么办呢 有人说不是有回掉函数吗 对没错 你这边的话你可以这样子来写

25:52.700 --> 25:55.100
啊 可以这样子来写 把这个放进去

25:55.580 --> 26:01.020
对吧 放进去之后 然后接下来放你这里 又把它放进去

26:01.740 --> 26:05.660
又来一个回掉函数 再把这一块又把它放进去

26:06.300 --> 26:10.780
可不可以这样子写 当然是可以的 我们这边我们来看一下 我们这边保存

26:12.140 --> 26:16.300
保存之后刷新一下 走 这边是变成了四

26:17.180 --> 26:22.780
对不对 变成四 这样子写是没问题的 但这样写的话会遇到一个什么问题

26:23.740 --> 26:29.820
说你会遇到这个回掉地狱啊 对不对 会遇到回掉地狱 那怎么办呢

26:30.460 --> 26:34.460
其实这个官方的话还给我们提供了一种方式 好来看文档

26:35.900 --> 26:40.540
嗯 文档我看一下在哪个位置啊 文档在哪个位置

26:43.020 --> 26:45.180
哎呦 我网络好像掉线了

26:45.820 --> 26:48.700
但幸好我是在录视频 是吧 没有用到这个网络

26:49.660 --> 26:52.540
用到网络了 是吧 我这边就在用网络 没关系啊

26:53.340 --> 26:55.260
啊 然后我看一下 看一下

26:57.180 --> 27:03.660
啊 这里 这里 看到没有 要解决这个问题 可以让这个set state

27:03.980 --> 27:10.300
接收一个函数 而不是一个对象啊 这个函数的话 他就会用上一个的state

27:11.020 --> 27:12.460
作为第一个参数

27:13.100 --> 27:17.740
ok 他这边还有第二个参数 第二个参数是这个props pop 是我们一会儿再说啊

27:17.820 --> 27:20.380
一会儿再说 你看这边的话就是这个state

27:21.180 --> 27:24.860
啊 就上一次最新的这个state 来我们这边 我们来试一下啊

27:25.500 --> 27:27.500
来试一下 我们把这个就注射掉

27:28.780 --> 27:31.740
我们就不用这种方式啊 或者把这个删了嘛 删了

27:32.700 --> 27:37.020
不用这种方式啊 这种方式太恶心了 对吧 我们这边怎么做 我们这样子来做

27:37.660 --> 27:39.580
z是点set state

27:40.220 --> 27:45.500
ok 我们刚才的话是不是直接传入一个对象 对吧 那你现在就不要是对象而是什么呢

27:45.660 --> 27:46.780
而是一个函数

27:47.580 --> 27:50.140
ok 通过函数去反回一个对象

27:51.100 --> 27:52.380
啊 这代码看得懂吧 各位

27:52.860 --> 27:57.980
这边是一个减头函数 减头函数 我这边我要反回一个对象 反回一个对象你这边必须要加扩号

27:58.380 --> 28:00.460
不然他以为是这个函数的那个大扩号

28:01.020 --> 28:03.820
面包啊 这里的话代表就是我的反回值是一个对象

28:04.300 --> 28:08.460
好 然后这样我通过这边我可以拿到就是上一次的这个state

28:09.340 --> 28:13.740
拿到上一次的state之后 然后接下来的话 我这边返回了这个对象

28:14.220 --> 28:17.740
对象里面啊 我这边啊 设置

28:18.700 --> 28:21.500
他的这个nam对应的是cur

28:21.900 --> 28:24.220
cur是什么 cur就是你上次的这个state

28:24.220 --> 28:26.220
cur就等价于这个state

28:26.940 --> 28:28.380
ok 等价于state

28:28.380 --> 28:29.580
好 大家这个cur

28:30.220 --> 28:33.100
点nam加一个e

28:34.540 --> 28:38.460
可以吗 好 你通过这种方式 然后这样我们这边来调用三次

28:39.820 --> 28:43.580
调用三次 那接下来的话这边第一次 第一次呢 这边是1对吧

28:43.740 --> 28:47.740
1 然后接下来这边1加1得到2 好 接下来再调用第二次的时候

28:47.740 --> 28:51.340
他这里传的值会等待什么呢 会等待上一次

28:51.980 --> 28:53.820
上一次你的值改变之后

28:55.100 --> 28:57.100
改变之后 然后再这边再传进来

28:57.660 --> 29:00.780
ok 那这边传进来的这个状态值实际上就变成2了

29:00.780 --> 29:02.060
这里就是2加1

29:02.460 --> 29:04.780
那这里同理这里就是什么 3加1

29:05.340 --> 29:08.060
这边我们来看一下 效果的话和刚才是一样的

29:09.420 --> 29:09.900
走

29:10.860 --> 29:12.780
是不是搞定了 对不对

29:12.780 --> 29:17.020
就搞定了 这边就是这里 就这里

29:17.020 --> 29:20.620
如果新的状态要根据之前的状态进行运算

29:20.620 --> 29:23.340
使用什么呢 使用函数的方式

29:24.460 --> 29:26.540
ok 使用函数的方式来改变

29:27.180 --> 29:29.900
就你的第一个函数就变成了一个函数

29:30.380 --> 29:31.580
而不再是一个对象

29:33.180 --> 29:35.900
最后就是什么呢 最后就是react

29:35.900 --> 29:39.420
会对一步的这个set state进行一个优化

29:39.900 --> 29:42.540
将多次set state进行一个合并

29:42.540 --> 29:44.540
这个的话其实刚才是不是已经看到了

29:45.580 --> 29:47.740
这个在一开始的时候是不是就看到了

29:48.700 --> 29:50.060
在这里 对吧

29:50.060 --> 29:54.540
react它会把多个set state调用 合并成一个调用

29:55.100 --> 29:58.060
ok 包括这里 包括这里我举个例子

29:58.620 --> 30:00.540
比如我们这边这边是不是三次调用

30:00.540 --> 30:02.700
三次调用 然后我们说了这个是不是会接收

30:03.420 --> 30:04.140
第二个参数

30:06.380 --> 30:08.220
对不对 接收第二个参数

30:08.300 --> 30:10.780
第二个参数的话可以打印出它最新的这个状态字

30:12.060 --> 30:15.260
我们这边来打印一下 this.set.num

30:17.340 --> 30:19.100
那这里的字是多少

30:20.140 --> 30:23.580
是多少 有同学说 这里的话应该是你这边1加1

30:23.580 --> 30:26.380
这边的话应该是2啊 这里应该是2啊

30:26.860 --> 30:30.220
但其实不是的 他这边的话会把你所有的这个

30:30.220 --> 30:31.660
你这边的这个异步更新

30:32.220 --> 30:34.540
全部执行 执行了之后 然后合并

30:34.540 --> 30:37.500
然后这里的话打印的话 其实是打印的是最新的字

30:38.380 --> 30:41.420
ok 打印的是最新的字 我们这边我们来看一下

30:43.340 --> 30:48.540
ok 走 你看这里的话最终打印的是多少 打印的是4

30:49.420 --> 30:53.260
对不对 打印的是4 它这样子的话效率会更高一些

30:53.260 --> 30:55.660
你看这个Render 看这边这个Render

30:57.740 --> 31:00.620
我们这边刷新一下 首先第一次执行一次是吧

31:00.620 --> 31:03.740
好 走 你看Render 它最终只会执行什么

31:03.740 --> 31:05.020
是不是只会执行一次

31:05.980 --> 31:09.420
对不对 也就是说它重新渲染了一次 为什么

31:09.420 --> 31:13.260
其实就是为了出于这个性能考虑

31:13.260 --> 31:16.460
它把这个多次的set state 雕用 合并了

31:17.180 --> 31:17.980
把它合并了

31:18.700 --> 31:22.860
ok 这是关于这个组件内部的这个状态

31:23.580 --> 31:24.940
注意这些细节问题

31:25.500 --> 31:28.860
就这个内部状态的话 我相信这个大家其实很好理解了

31:28.860 --> 31:31.500
因为你就把它类比成这个voe的这个data

31:32.140 --> 31:34.380
对吧 voe组件里面是有这个data的

31:35.180 --> 31:37.660
这边的话 咱们这个react里面就叫做State

31:38.220 --> 31:41.260
主要就是你这边主要要注意的就是这些这些细节

31:42.140 --> 31:45.500
细节方面的东西 这些是新的知识 对不对

31:45.900 --> 31:50.140
ok 下一个 下一个是probs

31:50.780 --> 31:53.340
这个的话和voe是一样的

31:53.340 --> 31:56.540
所以这个的话我不需要就是做过多的这个讲解

31:56.540 --> 31:58.860
probs 这个和voe一样

31:58.860 --> 32:02.300
就是我们组件内部可以维护我们自身的数据

32:02.300 --> 32:04.620
除了维护自身的数据以外 我还可以干吗

32:05.100 --> 32:08.860
是不是副组件向我这个直组件 你给我传递数据过来

32:09.580 --> 32:12.780
对不对 然后将我副组件向直组件传递这个数据

32:12.780 --> 32:16.220
那我接下来我直组件要获取这个数据段就通过什么了

32:16.220 --> 32:18.540
通过这个probs来进行获取

32:19.100 --> 32:24.060
ok 你看我这边乱我写的就是韩束组件和那个内组件

32:24.620 --> 32:27.100
韩束组件的话这个probs就作为一个参数

32:27.580 --> 32:30.380
把它传进来 传进来让你在这边你用就可以了

32:30.940 --> 32:33.020
如果是内组件 内组件的话

32:33.020 --> 32:35.820
你需要通过这个这边constructor接收

32:35.820 --> 32:38.540
接收了之后传给什么呢 传给那个负类

32:38.540 --> 32:41.740
也就是传给这个react.component这个类

32:41.740 --> 32:44.140
然后加你这边使用的话通过什么呢

32:44.140 --> 32:48.300
通过z.probs.name通过这种方式来使用

32:48.300 --> 32:49.660
好 来我们来看一下吧

32:50.940 --> 32:53.100
来看一下回到我们这里

32:53.740 --> 32:56.540
好 我们这边的话我们就创建两个直组件

32:56.540 --> 32:58.540
我们之前是不是这边建了一个这个Hello

32:59.020 --> 33:01.180
啊 这个是一个韩束组件 是吧

33:01.340 --> 33:04.060
好 我们这边的话再来创建一个 再来创建一个world

33:05.180 --> 33:06.380
一个Hello 一个world

33:07.420 --> 33:10.220
ok 这个world的话我们就让它是一个内组件

33:11.580 --> 33:13.900
内组件的话好像是rcc

33:14.860 --> 33:17.100
它现在这个改了吗

33:17.660 --> 33:19.340
可能我下载的那个不一样啊

33:20.140 --> 33:22.300
之前的话是直接rcc就可以了

33:23.500 --> 33:25.740
我这个快捷键 我得去看一下

33:26.620 --> 33:27.100
r

33:28.060 --> 33:30.700
我看一下 之前的话是rsf

33:30.700 --> 33:31.980
这个rsc呢

33:33.340 --> 33:34.620
rsc没有

33:35.420 --> 33:37.340
这个我得看一下 我看一下

33:37.340 --> 33:37.900
稍等

33:38.940 --> 33:40.460
看一下它的快捷键是多少

33:43.260 --> 33:43.900
react

33:44.460 --> 33:45.820
react 这里 是吧

33:45.820 --> 33:46.700
这个是我装的

33:47.260 --> 33:49.020
它肯定是有的 有肯定是有

33:50.540 --> 33:51.580
这个是导入

33:52.140 --> 33:53.900
导入 我要看创建

33:53.900 --> 33:55.420
这个是rct

33:57.740 --> 34:00.620
啊 这边ccs

34:01.260 --> 34:01.980
ccs

34:03.180 --> 34:05.100
你不同的插件它这个不一样

34:05.820 --> 34:07.180
ok 这边是不是出来了

34:07.740 --> 34:11.900
还有还有这个什么ccsf

34:12.860 --> 34:14.620
啊 这个是without

34:14.620 --> 34:16.220
啊 它这边有预览

34:16.220 --> 34:17.660
看到没有 这边有预览

34:18.620 --> 34:20.460
啊 这个 这个呢是state

34:21.020 --> 34:21.980
ccs

34:22.620 --> 34:24.540
啊 这种更符合我们的要求是吧

34:24.540 --> 34:25.900
ok 要这个吧

34:27.820 --> 34:31.100
好 那这边的话你得还是得引入一下

34:31.100 --> 34:33.500
引入一下react from

34:34.460 --> 34:35.260
react

34:35.260 --> 34:38.380
ok 这边呢你得是这个react.component

34:39.900 --> 34:41.260
ok 各式化一下

34:42.380 --> 34:44.140
好 我们这边呢就两个

34:44.940 --> 34:47.100
一个是hello 一个是world

34:47.660 --> 34:49.260
这边呢 我没有内部的状态

34:49.260 --> 34:52.220
好 大家这边的话我们来使用这两个

34:52.220 --> 34:54.380
我们这边呢就导入下这两个逐渐

34:54.380 --> 34:55.100
import

34:55.580 --> 34:56.860
一个是hello

34:58.540 --> 35:00.300
hello from

35:00.300 --> 35:02.540
当前目录下面的component

35:02.540 --> 35:04.540
下面的hello这个组件

35:04.540 --> 35:05.580
另外一个是什么呢

35:05.580 --> 35:07.420
另外一个是world

35:09.800 --> 35:11.240
对吧 world

35:11.240 --> 35:12.680
好 然后接下来的话在这里

35:12.680 --> 35:13.720
这里的话我们就

35:15.480 --> 35:17.880
我们这边我自身维护一组数据

35:19.080 --> 35:20.520
好吧 这些的话我就把它

35:21.560 --> 35:24.760
啊 这些的话就把它注射掉吧

35:25.880 --> 35:29.320
ok 注射掉 然后我在这边我重新来写一个

35:29.320 --> 35:31.800
res.stat等于一个

35:31.800 --> 35:33.320
我这边呢给个name

35:33.320 --> 35:35.320
name的话 写解

35:36.840 --> 35:39.320
the edge对应是18

35:40.120 --> 35:43.560
ok 或者我这边内部不维护数据也可以

35:43.560 --> 35:44.760
啊 也可以

35:44.760 --> 35:47.640
这个看你 你这边的话就是我们一会儿传的时候

35:47.640 --> 35:50.280
那你这边就把这个数据传给值组件

35:50.280 --> 35:53.000
啊 或者你在写调用值组件的时候

35:53.000 --> 35:54.760
就我们这边你在调用值组件的时候

35:54.840 --> 35:55.560
比如这个Hello

35:58.170 --> 36:01.850
Hello 你在这边的话你可以传数据都一样的

36:01.850 --> 36:03.450
ok 好来我们这边呢

36:03.450 --> 36:05.370
我们就给他来传一个这个数据

36:05.370 --> 36:08.650
那这边呢就是stu info等于什么呢

36:08.650 --> 36:11.050
等于res.stat

36:12.010 --> 36:13.850
res.stat ok

36:14.570 --> 36:15.850
这边把它传递过去

36:15.850 --> 36:17.850
好 大家这边呢我们再来一个world

36:19.930 --> 36:22.010
把这个数据把它传递过去

36:22.010 --> 36:23.130
啊 传递过去之后

36:23.130 --> 36:24.410
然后接下来我们这边Hello

36:24.970 --> 36:26.490
Hello 这边接收到对吧

36:26.490 --> 36:27.530
接收到之后

36:28.970 --> 36:29.770
嗯 这里

36:31.770 --> 36:34.330
这里的话我们就写一个ur

36:35.050 --> 36:36.090
ur 下面里

36:36.650 --> 36:38.090
乘一个2啊

36:38.090 --> 36:38.970
然后接下来在这里

36:38.970 --> 36:40.490
这里的话我们写个比较姓名

36:41.850 --> 36:42.250
姓名

36:42.810 --> 36:44.250
然后接下来这里的话你怎么用呢

36:44.250 --> 36:45.690
这里你就通过这个props

36:47.690 --> 36:48.170
props

36:48.890 --> 36:51.210
props的话他接收到的是整个

36:51.770 --> 36:54.090
整个你这个stat这个对象

36:54.090 --> 36:55.610
让你这边这个props

36:55.610 --> 36:58.330
然后这里点name

36:59.050 --> 36:59.770
拿到什么

36:59.770 --> 37:00.650
拿到你这边

37:01.050 --> 37:02.650
这边传的这个name值

37:03.370 --> 37:03.850
对吧

37:03.850 --> 37:04.970
好 同理的话这里

37:05.690 --> 37:06.090
年龄

37:08.650 --> 37:08.970
年龄

37:09.850 --> 37:13.770
这边的话props.ag

37:15.130 --> 37:16.650
好 然后在这边

37:16.650 --> 37:18.170
这边的话我们也是

37:18.170 --> 37:19.130
这里没有返回去

37:19.130 --> 37:20.490
他说他标凤啊

37:20.490 --> 37:21.770
我们就直接把这拿过来

37:22.730 --> 37:24.570
这边把他拿过来

37:25.210 --> 37:26.330
然后放这里

37:27.690 --> 37:28.410
放这里

37:28.410 --> 37:29.530
放这里的话你这边

37:29.530 --> 37:30.810
你这个要访问啊

37:30.810 --> 37:31.610
这个props

37:31.610 --> 37:32.650
你这边在通过什么

37:32.650 --> 37:33.450
通过this

37:33.450 --> 37:33.850
点

37:34.650 --> 37:35.370
大家这边

37:36.090 --> 37:36.650
this

37:36.650 --> 37:37.050
点

37:37.850 --> 37:38.090
OK

37:38.730 --> 37:39.850
好了这边为什么还

37:40.570 --> 37:41.050
OK

37:41.050 --> 37:42.810
useness constructor

37:44.090 --> 37:44.730
props

37:45.450 --> 37:46.010
world

37:47.130 --> 37:47.690
看一下啊

37:48.490 --> 37:49.370
这边的话

37:50.330 --> 37:50.890
props

37:50.890 --> 37:51.850
我们接收到

37:53.770 --> 37:54.250
嗯

37:56.820 --> 37:58.020
这边的话

37:58.020 --> 37:59.460
他其实是那个

38:00.580 --> 38:01.380
yeslint

38:01.940 --> 38:03.460
yeslint提示的

38:03.460 --> 38:05.380
你这边可以查看这个问题

38:05.380 --> 38:06.500
然后现在这边的话

38:06.500 --> 38:07.620
你点过去

38:07.620 --> 38:08.420
这边打开

38:09.060 --> 38:10.020
打开的话你看这边

38:10.020 --> 38:12.260
其实是yeslint里面的一个规则

38:12.820 --> 38:13.780
yeslint我们说了

38:13.780 --> 38:16.420
他是做代码的这个规范的这个检查的

38:16.980 --> 38:17.460
对吧

38:17.460 --> 38:20.420
让这边provide default class constructor

38:20.420 --> 38:21.620
if one is not

38:21.700 --> 38:23.380
这个special fit

38:23.940 --> 38:25.780
sarch is unnecessary

38:25.780 --> 38:29.460
就没有必要去提供一个空的constructor

38:29.460 --> 38:31.460
啊就像这种写法是不需要的

38:32.180 --> 38:32.820
啊大家

38:32.820 --> 38:33.860
这这里下面

38:33.860 --> 38:34.420
下面呢

38:34.420 --> 38:37.700
他会有一些这个具体的一些细节

38:38.500 --> 38:38.740
OK

38:39.460 --> 38:40.180
具体的细节

38:40.180 --> 38:41.860
但我们这个也没有触发什么呀

38:43.060 --> 38:43.860
没有触发什么

38:44.820 --> 38:45.380
OK

38:45.380 --> 38:47.620
好我把这个我把这个我把它干掉呢

38:48.980 --> 38:49.940
好这个

38:49.940 --> 38:51.300
我们这个不要这个constructor

38:52.180 --> 38:52.580
OK

38:53.140 --> 38:54.500
好啊这会的话

38:54.500 --> 38:56.180
那个yeslint没有提示错误了

38:56.180 --> 38:58.100
哈好大家我们这边让我们来看一下

38:59.060 --> 38:59.780
在这里

39:00.500 --> 39:01.860
呃这边没出来是吧

39:01.860 --> 39:03.380
没出来我看一下这里

39:04.340 --> 39:06.260
呃这里的话

39:06.980 --> 39:08.260
我们这边的话是

39:09.620 --> 39:10.420
传过来

39:10.420 --> 39:11.620
哦哦哦这里

39:11.620 --> 39:13.380
这里的话我们是不是stu info

39:14.020 --> 39:15.220
对不对stm

39:15.220 --> 39:17.940
stu info啊等于你这个字

39:17.940 --> 39:18.740
那这边的话

39:18.740 --> 39:19.460
其实应该是怎么了

39:19.460 --> 39:23.940
这边应该是props.stuinfo

39:24.500 --> 39:26.580
啊stuinfo.name

39:26.580 --> 39:30.180
stu这个props.stuinfo对应的才是什么

39:30.180 --> 39:31.860
才是对应的是这个对象

39:32.980 --> 39:34.340
好人家这边也是一样

39:34.340 --> 39:37.860
这边的话stuinfo.ag

39:37.860 --> 39:38.740
包括这边也是

39:39.300 --> 39:41.540
这边的话stuinfo

39:43.140 --> 39:45.940
然后这里stuinfo

39:46.660 --> 39:48.020
OK啊保存一下

39:48.660 --> 39:49.460
保存了之后

39:49.460 --> 39:50.420
然后现在这里看一下

39:50.900 --> 39:51.620
这就出来了

39:52.340 --> 39:54.900
对吧啊这是关于这个props

39:55.460 --> 39:57.140
这些东西大家应该很好理解

39:57.140 --> 39:58.420
哈你学过这个view的话

39:58.420 --> 40:00.340
我只要稍微给你提一下

40:00.340 --> 40:01.300
你就可以理解

40:01.300 --> 40:03.460
因为view里面是不是也名字都一模一样是吧

40:04.020 --> 40:06.660
好像我记得view里面也叫props对吧

40:06.660 --> 40:07.700
它里面有两个

40:07.700 --> 40:08.580
一个是数组

40:08.580 --> 40:09.300
一个是对象

40:09.860 --> 40:12.900
数组的话你就把你的props挪裂出来

40:12.900 --> 40:13.540
对象的话

40:13.540 --> 40:15.780
它可以对你传入的那个props

40:15.780 --> 40:17.780
进行一个验证对不对

40:17.780 --> 40:20.340
说到验证有了同学就会问了

40:20.340 --> 40:22.260
那你这个react里面

40:22.260 --> 40:25.060
我这边如何对传入的props

40:25.060 --> 40:26.740
如何进行验证呢

40:26.740 --> 40:27.940
好来我们来看一下

40:30.820 --> 40:32.100
这边我后面写的有

40:32.660 --> 40:33.700
我们一个一个来看

40:33.700 --> 40:35.940
这边一会儿就会讲

40:35.940 --> 40:37.540
关于props的验证

40:37.540 --> 40:38.500
我们先来看这个

40:39.460 --> 40:42.100
通过props.ch Children

40:42.100 --> 40:44.260
就可以实现类似于

40:44.580 --> 40:45.300
这边

40:45.300 --> 40:45.860
类似

40:48.180 --> 40:51.140
类似于view中插槽的功能

40:51.140 --> 40:52.820
不知道大家还记不记得那个插槽

40:53.700 --> 40:56.100
view里面为什么会使用插槽

40:56.100 --> 40:58.420
或者说这个插槽的使用场景是什么

40:59.460 --> 41:03.380
插槽的使用场景往往是我在定义组建的时候

41:03.380 --> 41:05.540
我不知道你里面的内容传入什么

41:06.260 --> 41:06.980
对不对

41:06.980 --> 41:07.780
比如说我们这边

41:09.140 --> 41:11.380
我们把这边我们再来定义一个

41:11.380 --> 41:13.780
再来定义一个比如说一个barter这个组建

41:15.140 --> 41:16.260
barter.js

41:18.260 --> 41:19.460
我们这边就写

41:21.460 --> 41:22.580
我们就写一个这个

41:23.540 --> 41:24.260
函数组建

41:24.900 --> 41:25.860
好那下这边的话

41:25.860 --> 41:26.900
我要返回一个什么呢

41:26.900 --> 41:28.980
我这边的话我就返回一个barter

41:30.740 --> 41:31.300
对吧

41:31.300 --> 41:32.100
返回一个barter

41:32.100 --> 41:32.900
那将我上面的话

41:32.900 --> 41:34.340
可能挂了一些这个样式

41:35.060 --> 41:35.860
好那下

41:35.860 --> 41:36.500
关键是这里

41:37.540 --> 41:39.780
这里写什么我是问我并不知道呀

41:40.580 --> 41:41.140
对不对

41:41.140 --> 41:42.500
这里写什么我并不知道

41:42.500 --> 41:42.980
这里的话

41:43.060 --> 41:43.780
我期望什么

41:43.780 --> 41:46.020
期望你外界在使用的时候

41:46.020 --> 41:46.980
你传入给我

41:48.020 --> 41:49.220
OK那我这边的话

41:49.220 --> 41:50.820
我可不可以这样子来写呢

41:50.820 --> 41:51.700
比我们这边引入

41:53.140 --> 41:54.100
引入这个barter

41:55.140 --> 41:55.940
大家这边

41:55.940 --> 41:57.380
引入这个barter这个组建

41:58.020 --> 41:58.980
引入barter之后

41:58.980 --> 42:00.420
然后接下来我们在这里

42:00.420 --> 42:01.460
我们能不能这样子呢

42:02.020 --> 42:03.140
就这边这样子barter

42:05.140 --> 42:06.900
对吧大家我们这边要传入

42:06.900 --> 42:07.860
对应的这个值

42:08.900 --> 42:10.420
比较对应的这个内容content

42:11.140 --> 42:13.700
比如说对应的是一个

42:13.700 --> 42:14.900
添加按钮

42:15.700 --> 42:16.580
添加按钮

42:16.580 --> 42:18.580
通过这种方式行不行

42:18.580 --> 42:19.700
也可以

42:19.700 --> 42:20.100
对吧

42:20.100 --> 42:21.300
我们学过这个props

42:21.300 --> 42:22.420
那既然那你这边的话

42:22.420 --> 42:23.060
你就是什么

42:23.860 --> 42:25.380
这边的话是不是应该是

42:25.940 --> 42:29.060
props.content

42:31.460 --> 42:32.020
对不对

42:32.020 --> 42:33.220
props.content

42:33.220 --> 42:33.940
我们来看一下

42:35.380 --> 42:36.340
是不是可以的

42:36.340 --> 42:38.340
但你这种使用方式

42:38.420 --> 42:40.740
符不符合我们正常使用组建的方式

42:41.780 --> 42:43.300
你回忆一下你在vue里面

42:43.300 --> 42:44.740
你使用组建的时候

42:44.740 --> 42:46.340
你使用那个barter的时候

42:46.340 --> 42:47.220
你那个barter

42:47.220 --> 42:49.380
你那个具体显示什么文字

42:49.380 --> 42:51.140
你是通过这样子的方式来指定的吗

42:52.020 --> 42:52.820
不是吧

42:52.820 --> 42:53.380
对吧

42:53.380 --> 42:54.900
你在使用vue的时候

42:54.900 --> 42:55.700
你更多的时候

42:56.260 --> 42:57.460
vue的那个组建库

42:57.460 --> 42:58.180
大家回忆一下

42:58.740 --> 42:59.620
你是不是这样子的

43:00.660 --> 43:02.580
bu tton

43:03.220 --> 43:04.180
大家这里

43:04.180 --> 43:05.220
是不是添加

43:10.940 --> 43:12.620
把这伸了

43:13.420 --> 43:13.580
好

43:13.580 --> 43:17.020
这边添加按钮

43:17.020 --> 43:18.780
你更多是不是这样子来写

43:19.740 --> 43:20.300
对不对

43:20.300 --> 43:21.020
那这个的话

43:21.020 --> 43:22.060
你在vue里面的话

43:22.060 --> 43:23.420
你再把这部分内容

43:23.420 --> 43:25.180
是不是就会把它插入到

43:25.180 --> 43:26.940
你组建的插槽里面

43:27.500 --> 43:28.060
对不对

43:28.060 --> 43:28.300
好

43:28.300 --> 43:29.900
那你在react里面

43:30.300 --> 43:31.500
react里面怎么做呢

43:31.500 --> 43:34.860
react里面它就是通过props.chidron

43:36.860 --> 43:37.100
OK

43:37.660 --> 43:39.260
通过props.chidron

43:39.340 --> 43:40.780
就可以获取到

43:40.780 --> 43:42.940
你使用组建的时候

43:42.940 --> 43:44.220
你这个位置的内容

43:44.940 --> 43:45.500
OK

43:45.500 --> 43:47.020
那我们这边来看一下

43:47.020 --> 43:47.980
效果是一样的

43:49.100 --> 43:49.980
对不对

43:49.980 --> 43:50.940
效果是一样的

43:51.580 --> 43:51.820
好

43:51.820 --> 43:52.300
我这边让我

43:52.300 --> 43:53.420
比如说我可以在barter里面

43:53.420 --> 43:55.180
不用我多插入一些内容

43:55.180 --> 43:56.300
在这边是一个div

43:57.740 --> 43:58.060
一

43:58.860 --> 43:59.180
二

43:59.820 --> 44:00.140
三

44:01.580 --> 44:02.140
OK

44:02.140 --> 44:03.020
你看这边

44:03.020 --> 44:03.980
这边一二三

44:05.260 --> 44:06.060
对不对

44:06.060 --> 44:06.460
OK

44:07.100 --> 44:09.100
就是在react里面

44:09.100 --> 44:09.740
这个插槽

44:09.740 --> 44:10.220
插槽的话

44:10.220 --> 44:12.700
它就直接通过props.chidron

44:12.700 --> 44:14.140
就可以实现这个

44:14.140 --> 44:15.660
类似于这个view的

44:15.660 --> 44:17.260
这个插槽的这个功能

44:17.260 --> 44:18.780
但view的那个插槽的话

44:18.780 --> 44:20.540
它功能更丰富一些

44:20.540 --> 44:21.260
它是不是我记得

44:21.260 --> 44:22.060
还有那个什么

44:22.060 --> 44:23.340
居民插槽

44:23.340 --> 44:23.740
对不对

44:23.740 --> 44:25.500
还有那个插槽作用域

44:25.500 --> 44:27.420
它更加丰富一些

44:27.420 --> 44:28.220
我可以指定

44:28.220 --> 44:29.980
比如说我这部分内容

44:29.980 --> 44:31.420
插入到哪个插槽

44:31.420 --> 44:32.380
这个部分内容

44:32.380 --> 44:33.740
插入到哪个插槽

44:33.740 --> 44:34.380
react的话

44:34.380 --> 44:35.420
它就没有

44:35.420 --> 44:36.460
它就没有

44:37.180 --> 44:37.580
OK

44:38.540 --> 44:40.460
这是关于这个props

44:41.180 --> 44:41.900
props的话

44:41.900 --> 44:42.780
我想想还有什么

44:43.500 --> 44:44.300
还有什么

44:44.300 --> 44:44.780
还有一个

44:44.780 --> 44:45.500
就是你传

44:45.500 --> 44:46.860
如果是传其他类型

44:47.580 --> 44:48.540
这里还有个东西

44:48.540 --> 44:49.500
要说一下

44:49.500 --> 44:50.300
就我比如说

44:51.820 --> 44:53.340
我比如说我这个Hello

44:53.340 --> 44:53.820
Hello的话

44:53.820 --> 44:55.980
我们刚才这边是不是传的是zins data

44:55.980 --> 44:56.220
好

44:56.220 --> 44:56.780
然后这样我这边

44:56.780 --> 44:58.060
我给它传点额外的

44:58.060 --> 44:59.580
比如说这边的content

44:59.580 --> 45:00.300
等于一个

45:00.300 --> 45:01.660
比如说这个制服穿

45:01.660 --> 45:02.460
比如说Hello

45:03.580 --> 45:04.140
OK

45:04.140 --> 45:04.460
好

45:04.460 --> 45:05.020
然后下这边的话

45:05.020 --> 45:06.940
我在这里要获取的话

45:07.020 --> 45:07.900
我这边的话就是

45:09.260 --> 45:10.140
比如说content

45:11.340 --> 45:12.620
这边就是props

45:13.340 --> 45:15.660
点content

45:16.940 --> 45:17.980
是不是通过这种方式

45:19.660 --> 45:20.060
这里

45:21.020 --> 45:22.060
是不是可以获取的

45:22.060 --> 45:22.620
对吧

45:22.620 --> 45:22.940
好

45:22.940 --> 45:24.540
这个是制服穿的情况

45:24.540 --> 45:24.700
好

45:24.700 --> 45:26.380
如果我想传一个数字呢

45:27.420 --> 45:27.980
比如说我这边

45:27.980 --> 45:29.660
我想传一个number

45:29.660 --> 45:31.180
它是个数字

45:31.180 --> 45:32.300
或者是个布尔兹

45:33.100 --> 45:33.820
就是其他类型

45:33.820 --> 45:35.100
反正不是制服穿

45:35.180 --> 45:36.940
制服穿的话是不是直接这样子写

45:37.500 --> 45:37.900
对不对

45:37.900 --> 45:38.780
就像写属性一样

45:38.780 --> 45:39.740
这边直接这样子写

45:39.740 --> 45:40.300
写了之后

45:40.300 --> 45:42.140
然后再在你的直主键里面

45:42.140 --> 45:44.380
通过props来获取

45:44.380 --> 45:45.580
如果是其他的字

45:45.580 --> 45:46.860
其他类型的字

45:46.860 --> 45:47.900
其他类型的字的话

45:47.900 --> 45:49.340
你这边获取是不变的

45:50.220 --> 45:50.780
获取的话

45:50.780 --> 45:53.900
你这边还是就是通过props

45:53.900 --> 45:54.860
你获取就可以了

45:56.300 --> 45:56.780
就这里

45:58.860 --> 45:59.180
OK

46:00.780 --> 46:02.060
直接获取就可以了

46:02.060 --> 46:03.420
就传的时候你要小心

46:03.420 --> 46:03.980
传的时候

46:03.980 --> 46:05.260
你就不能再这样子写

46:05.260 --> 46:06.540
你这样子的话

46:06.540 --> 46:07.820
传过去是一个什么

46:07.820 --> 46:09.100
传过去是个制服穿

46:09.100 --> 46:10.940
那这这里怎么办呢

46:10.940 --> 46:11.580
这里的话

46:11.580 --> 46:14.060
这边你对花扩湖

46:14.060 --> 46:14.620
对不对

46:14.620 --> 46:16.540
大家里面你传个1

46:16.540 --> 46:17.260
那这样子的话

46:17.260 --> 46:19.260
它传过去的就是数字

46:21.260 --> 46:22.140
这边看一下

46:22.140 --> 46:23.660
传递过来的这里

46:23.660 --> 46:24.940
这里就是数字

46:24.940 --> 46:25.580
包括什么呢

46:25.580 --> 46:26.780
包括你的布尔兹

46:26.780 --> 46:28.780
比如你这边想传一个布尔兹

46:28.780 --> 46:29.900
你不能这样子写

46:30.460 --> 46:31.180
再上强调

46:31.180 --> 46:32.140
不能这样子写

46:32.140 --> 46:32.780
这样子写的话

46:32.780 --> 46:33.740
那这边传过了

46:33.740 --> 46:36.300
传过去的是一个制服穿的这个处

46:36.300 --> 46:38.700
你这边如果是想传个布尔兹的话

46:38.700 --> 46:39.980
你这边应该是

46:39.980 --> 46:41.820
这边是一个表达式

46:41.820 --> 46:43.020
写个花扩湖

46:43.020 --> 46:44.140
这边这个处

46:44.140 --> 46:44.940
传过去的话

46:44.940 --> 46:46.380
它就是一个布尔兹

46:47.820 --> 46:49.260
布尔兹它怎么没显示呢

46:50.860 --> 46:51.260
处

46:56.380 --> 46:56.940
我看一下

46:58.460 --> 46:59.420
那么处

47:03.180 --> 47:04.540
这里它怎么没显示呢

47:04.620 --> 47:05.260
我看一下

47:06.380 --> 47:07.900
那这边是布尔兹吗

47:07.900 --> 47:08.460
对了

47:08.460 --> 47:09.740
你布尔兹对的

47:09.740 --> 47:10.700
你这边是布尔兹

47:10.700 --> 47:12.220
布尔兹你让人家怎么显示呢

47:12.220 --> 47:12.460
对吧

47:12.460 --> 47:13.660
你布尔兹你只能干嘛

47:13.660 --> 47:15.100
只能是不是这边做一个判断

47:15.100 --> 47:15.420
对不对

47:15.420 --> 47:17.180
如果这边是真

47:17.180 --> 47:19.260
我这边的话就显示这个处

47:19.260 --> 47:20.780
否则的话这边显示

47:20.780 --> 47:21.580
force

47:21.580 --> 47:22.380
这边是这样子

47:22.940 --> 47:23.260
对吧

47:23.980 --> 47:24.380
OK

47:24.380 --> 47:25.020
这里是不是处

47:26.860 --> 47:28.540
这里的话是不是从而有印证呢

47:28.540 --> 47:30.140
它传递过去的是一个布尔兹

47:31.020 --> 47:31.420
对不对

47:32.380 --> 47:34.140
这是关于这个props

47:35.820 --> 47:35.980
好

47:35.980 --> 47:39.580
接下来的话要说一下关于这个props的这个验证

47:40.220 --> 47:42.140
这个其实就是刚才提到的

47:42.140 --> 47:44.220
我们说在那个view里

47:44.220 --> 47:45.020
这个view里面

47:45.660 --> 47:49.260
view里面的话你这个prop

47:49.260 --> 47:51.020
你可以是一个数主

47:51.020 --> 47:52.140
可以是个对象

47:52.140 --> 47:53.340
那什么时候写对象

47:53.340 --> 47:56.060
就是我需要对传入的这个props

47:56.060 --> 47:58.300
进行一个验证的时候

47:59.100 --> 48:01.180
那我这边的话可以是一个这个对象

48:01.580 --> 48:02.140
对吧

48:02.140 --> 48:03.260
那我们这边的话

48:03.260 --> 48:06.060
如果想对这个props进行一个验证

48:06.700 --> 48:07.580
怎么做呢

48:07.580 --> 48:09.740
我们来看一下这个react里面怎么做

48:12.780 --> 48:13.980
你这边验证的话

48:13.980 --> 48:15.260
无非其实就两个事情

48:16.060 --> 48:18.380
你想想这个view里面就两个事情

48:18.380 --> 48:21.020
第一个的话就是给它设置这个默认字

48:21.020 --> 48:21.260
对吧

48:21.260 --> 48:22.060
你如果没有传

48:22.060 --> 48:24.220
没有传的话你就使用默认字

48:24.220 --> 48:25.020
那第二个就是什么

48:25.020 --> 48:26.380
第二个就是验证

48:26.380 --> 48:28.460
你符不符合我写的这个类型

48:29.020 --> 48:29.660
对吧

48:29.660 --> 48:29.820
好

48:29.820 --> 48:32.140
那在这个react里面

48:32.220 --> 48:33.340
我们一个一个来看

48:33.340 --> 48:35.580
那首先的话是关于这个默认字

48:35.580 --> 48:39.340
默认字的话可以通过这个default props

48:39.340 --> 48:40.540
来进行一个设定

48:41.420 --> 48:42.860
你看这边这个代码

48:42.860 --> 48:45.260
首先的话它这边的话是一个组件

48:45.260 --> 48:45.660
对吧

48:45.660 --> 48:47.340
组件的话它接收这个props

48:48.140 --> 48:48.860
接收了之后

48:48.860 --> 48:51.340
这边它解构把这个解构出来

48:51.340 --> 48:52.140
那既然这里的话

48:52.140 --> 48:53.500
它就设置了一个默认字

48:53.500 --> 48:54.220
看到没有

48:54.220 --> 48:57.100
这个grating.default props

48:57.100 --> 48:59.420
这个的话相当于是一个静态属性

49:00.220 --> 49:00.860
静态属性

49:00.940 --> 49:02.620
把它这里就可以设置

49:03.500 --> 49:04.220
那我们来试一下

49:05.020 --> 49:06.220
比如说我在这里

49:06.220 --> 49:06.780
这里的话

49:06.780 --> 49:09.260
让我设置一个props的默认字

49:11.340 --> 49:15.260
设置props的默认字

49:16.140 --> 49:18.540
那这边的话就Hello

49:19.820 --> 49:22.460
点这个default props

49:24.140 --> 49:24.860
对吧

49:24.860 --> 49:25.500
OK

49:25.500 --> 49:25.740
好

49:25.740 --> 49:26.860
那现在这边我们就来写

49:27.740 --> 49:28.700
写一个比如说

49:28.700 --> 49:29.420
默认的这个

49:30.140 --> 49:31.260
content

49:33.610 --> 49:35.450
content对应的是一个

49:36.330 --> 49:38.090
对应的是一个数字100

49:38.810 --> 49:39.610
OK

49:39.610 --> 49:40.650
这里怎么报错了

49:41.930 --> 49:43.930
type in static class

49:46.490 --> 49:50.330
这个是寒宿组件

49:50.330 --> 49:51.290
寒宿组件对的

49:53.370 --> 49:54.010
我看一下

49:54.010 --> 49:55.050
寒宿组件这边

49:56.010 --> 49:57.210
是不是这个名字写错了

49:58.090 --> 49:58.490
看一下

50:00.330 --> 50:01.290
那个名字错了

50:02.010 --> 50:02.650
好这边

50:02.650 --> 50:03.450
这边呢

50:03.450 --> 50:03.930
这里

50:03.930 --> 50:04.570
我这边呢

50:04.570 --> 50:06.170
这个content100对吧

50:06.170 --> 50:08.010
然后像我这边是不是用到了这个content

50:08.010 --> 50:09.050
这边用到了content

50:09.050 --> 50:09.770
然后接下来的话

50:09.770 --> 50:10.810
我在这里

50:10.810 --> 50:12.170
我在这里的时候

50:12.170 --> 50:13.210
我不给你传递

50:14.650 --> 50:15.930
我如果传递了

50:15.930 --> 50:17.210
传递了就使用什么

50:17.210 --> 50:19.370
说传递了就使用了我传递了

50:19.370 --> 50:19.770
对吧

50:19.770 --> 50:21.050
传递了这个Hello

50:21.050 --> 50:22.170
如果我没有传递

50:24.170 --> 50:25.130
这边没有传递

50:25.130 --> 50:25.850
没有传递的话

50:25.850 --> 50:26.890
它就使用什么

50:26.890 --> 50:29.130
所以就使用这个默认字100

50:29.770 --> 50:30.730
这些都很简单

50:32.010 --> 50:32.970
快速的过一下

50:34.490 --> 50:34.650
好

50:34.650 --> 50:36.490
这是关于这个寒宿组件

50:37.130 --> 50:39.290
如果是内组件

50:39.290 --> 50:40.090
内组件的话

50:40.090 --> 50:42.010
你这边可以相同的形式

50:42.010 --> 50:43.130
就直接在这个内

50:43.130 --> 50:44.010
内名这边

50:44.010 --> 50:45.290
default props

50:45.290 --> 50:46.490
比我们这边来看一下

50:47.050 --> 50:48.330
看一下这个world

50:48.330 --> 50:48.890
world

50:48.890 --> 50:50.410
然后像我们这边给它设置一个

50:52.330 --> 50:54.170
设置一个default props

50:55.290 --> 50:55.930
对吧

50:55.930 --> 50:57.130
好我们这边的话

50:57.130 --> 50:57.450
我们

50:58.250 --> 50:58.970
我们这边这样

50:58.970 --> 50:59.930
怎么把它改造一下

51:00.490 --> 51:01.290
我们这边的话

51:01.290 --> 51:02.090
就给它传

51:02.810 --> 51:03.610
比如说name

51:05.290 --> 51:06.410
对应的是一个

51:07.130 --> 51:07.930
解结

51:07.930 --> 51:08.490
ok

51:08.490 --> 51:08.730
好

51:08.730 --> 51:09.930
然后对应的这个

51:09.930 --> 51:10.570
age

51:10.570 --> 51:11.050
这边呢

51:11.050 --> 51:12.570
就是应该是name

51:14.090 --> 51:14.410
对吧

51:15.290 --> 51:16.090
或者的话

51:16.090 --> 51:17.530
我想想就直接

51:17.530 --> 51:18.650
或者你不改造的话

51:18.650 --> 51:19.450
也可以

51:19.450 --> 51:20.650
你这边的话就直接

51:21.690 --> 51:23.050
我们这边是个stuinfo

51:23.050 --> 51:23.690
对吧

51:23.690 --> 51:24.570
stuinfo

51:24.570 --> 51:24.970
然后这样

51:24.970 --> 51:26.090
我们这边的话就直接

51:26.730 --> 51:28.250
stuinfo

51:28.250 --> 51:29.850
就再给它设置成一个对象

51:30.810 --> 51:31.450
对吧

51:31.450 --> 51:32.490
这个对象里面

51:32.490 --> 51:33.050
然后name

51:34.010 --> 51:34.730
比较解结

51:35.690 --> 51:37.210
然后 age

51:38.010 --> 51:39.530
对应的是一个18

51:40.250 --> 51:40.970
ok

51:40.970 --> 51:41.370
好

51:41.370 --> 51:42.090
然后你这边的话

51:42.090 --> 51:42.970
你如果传了

51:44.730 --> 51:45.450
这边也是一样的

51:45.450 --> 51:46.010
是吧

51:46.010 --> 51:47.210
这边我把它改一下

51:47.210 --> 51:48.010
不要改成张三

51:50.330 --> 51:50.810
张三

51:54.170 --> 51:55.050
张三

51:55.050 --> 51:56.010
张三20岁

51:56.570 --> 51:57.370
ok

51:57.370 --> 51:57.530
好

51:57.530 --> 51:58.090
你这边呢

51:58.090 --> 51:59.210
如果就是传了

51:59.210 --> 52:00.810
传了它就用你的这个默认值

52:01.930 --> 52:02.330
对吧

52:02.330 --> 52:03.050
张三

52:03.050 --> 52:03.370
好

52:03.370 --> 52:04.090
然后这样你这边呢

52:04.090 --> 52:04.970
你如果没有传

52:04.970 --> 52:06.010
比较这个world

52:06.010 --> 52:06.810
什么都没有传

52:08.330 --> 52:08.890
不配

52:08.890 --> 52:10.010
我刚才在说什么

52:10.010 --> 52:10.570
传了的话

52:10.570 --> 52:11.770
是不是使用你传了的字

52:12.330 --> 52:12.970
对不对

52:12.970 --> 52:14.330
传了使用你传了字

52:14.330 --> 52:14.490
好

52:14.490 --> 52:15.610
如果你没有传

52:15.610 --> 52:16.170
没有传的话

52:16.170 --> 52:17.530
是不是就是使用默认值

52:18.490 --> 52:19.130
对不对

52:19.130 --> 52:20.010
默认值

52:20.010 --> 52:20.970
ok

52:20.970 --> 52:22.490
它除了这种协法以外

52:22.490 --> 52:22.970
你注意

52:22.970 --> 52:23.850
它除了这种协法

52:23.850 --> 52:24.810
它还可以干嘛呢

52:24.810 --> 52:27.130
就是把你的这个默认的props

52:27.130 --> 52:28.570
写成一个静态属性

52:29.210 --> 52:30.730
就这边 static

52:30.730 --> 52:31.770
defaultprops

52:31.930 --> 52:34.010
这样效果的话是一样的

52:34.010 --> 52:34.570
ok

52:35.370 --> 52:36.010
这边的话

52:36.010 --> 52:36.970
比如说我们把这个

52:38.090 --> 52:39.130
这个我们把它注射掉

52:39.850 --> 52:40.970
我们写到哪个位置呢

52:40.970 --> 52:41.850
写在这里

52:41.850 --> 52:42.410
我们这边呢

52:42.410 --> 52:42.970
static

52:44.810 --> 52:46.170
static

52:46.170 --> 52:47.210
然后接下来这边

52:47.850 --> 52:48.250
props

52:49.930 --> 52:50.250
好

52:50.250 --> 52:50.730
拿过来

52:54.070 --> 52:54.390
ok

52:55.110 --> 52:55.430
好

52:55.430 --> 52:56.710
让大家这边保存一下

52:56.710 --> 52:57.590
保存了之后过来

52:58.630 --> 52:59.910
过来看一下

52:59.910 --> 53:01.030
是不是一样的

53:01.030 --> 53:01.350
对吧

53:01.350 --> 53:02.310
刷新

53:02.310 --> 53:03.430
是不是一样的

53:03.430 --> 53:03.830
ok

53:04.470 --> 53:06.870
这是关于这个默认值的这个设置

53:06.870 --> 53:07.670
好

53:07.670 --> 53:08.870
那默认值搞定了

53:08.870 --> 53:11.910
那接下来如何做这个类型检查呢

53:11.910 --> 53:13.030
类型检查的话

53:13.030 --> 53:14.870
它现在已经把它提出去了

53:15.670 --> 53:17.030
已经把它提出去了

53:17.030 --> 53:17.830
你看在这里

53:18.390 --> 53:20.550
关于props的类型检查

53:20.550 --> 53:21.750
从这个react

53:22.390 --> 53:24.870
v15.5版本开始

53:24.870 --> 53:26.310
移到了这个库

53:26.310 --> 53:27.510
你这边你可以点过去

53:28.790 --> 53:30.870
点过去它是一个npm

53:30.870 --> 53:32.630
npm这边一个库

53:33.110 --> 53:35.030
那你在这边让你可以看一下

53:35.030 --> 53:35.750
就这个库

53:37.830 --> 53:38.470
什么情况

53:40.790 --> 53:43.350
这边我记得我昨天来都不是这样子的

53:46.310 --> 53:47.030
看一下这里呢

53:49.880 --> 53:50.440
嘿

53:50.440 --> 53:51.320
这里

53:51.320 --> 53:52.760
它对应的这个文档

53:52.760 --> 53:55.080
对应的文档在这个地方

53:55.080 --> 53:56.120
高级指引这里

53:56.600 --> 53:57.960
高级指引的

54:00.120 --> 54:01.240
类型检查

54:01.240 --> 54:01.720
好看

54:05.460 --> 54:06.580
应该是哪个呢

54:06.580 --> 54:07.140
看一下

54:07.140 --> 54:07.780
props

54:09.380 --> 54:10.180
不是这个

54:14.490 --> 54:15.770
它这边是

54:15.770 --> 54:16.250
我找

54:16.250 --> 54:17.850
这里这里这里

54:17.850 --> 54:21.850
使用这个prop types进行这个类型检查

54:21.850 --> 54:23.690
它这边让你使用这个库

54:23.690 --> 54:25.370
我昨天进来都都不是这样子的

54:27.960 --> 54:28.360
嘿

54:29.240 --> 54:31.560
昨天进来这这边都是有用法的

54:31.560 --> 54:32.760
我们这边我们进那个吧

54:32.760 --> 54:34.680
到到这个get hub去看一下

54:35.480 --> 54:37.000
get hub肯定是有用法的

54:39.190 --> 54:40.470
我们这边把它打开一下

54:41.030 --> 54:41.350
ok

54:42.150 --> 54:43.110
这里就有了

54:43.110 --> 54:43.750
看了没有

54:43.750 --> 54:45.910
这里就有这个用法

54:45.910 --> 54:47.430
把这用法也很简单

54:47.430 --> 54:47.750
对吧

54:47.750 --> 54:48.870
你这边大致可以看一下

54:49.430 --> 54:50.870
首先它是不是让你安装

54:50.870 --> 54:53.110
npmon install让你安装

54:53.110 --> 54:53.910
安装了之后

54:53.910 --> 54:55.510
然后加在这边是不是通过

54:55.510 --> 54:56.790
这个import引入

54:57.590 --> 54:58.150
对吧

54:58.150 --> 54:59.430
这边引入

54:59.430 --> 54:59.750
好

54:59.750 --> 55:00.310
引入了之后

55:00.310 --> 55:02.310
让我们来看一下这边u熱机

55:02.310 --> 55:03.830
u热机就是使用的意思

55:04.630 --> 55:04.790
好

55:04.790 --> 55:05.990
你看一下它这边是怎么用的

55:06.630 --> 55:07.270
它这边呢

55:07.270 --> 55:09.190
举的例子是内组件

55:10.150 --> 55:10.950
内组件

55:10.950 --> 55:11.750
然后接下来的话

55:11.750 --> 55:12.550
它这里

55:12.550 --> 55:13.670
这里的话在内上面

55:13.670 --> 55:14.710
然后就有一个什么

55:14.710 --> 55:15.990
叫做prop types

55:16.950 --> 55:17.670
对吧

55:17.670 --> 55:19.190
和刚才那个其实是对应者的

55:19.190 --> 55:19.910
我们刚才那个

55:20.870 --> 55:21.590
叫什么

55:21.590 --> 55:23.270
我们刚才那个的话是叫做

55:23.270 --> 55:24.470
就是你内组件上面

55:24.470 --> 55:25.830
default props

55:25.830 --> 55:26.230
对吧

55:26.230 --> 55:28.230
它这个的话就是prop types

55:28.950 --> 55:29.990
有一个prop types

55:30.550 --> 55:31.030
ok

55:31.030 --> 55:32.550
那你在这里面就可以指定

55:32.550 --> 55:34.790
就是各种各样的这个类型

55:34.790 --> 55:34.950
好

55:34.950 --> 55:35.990
来我们这边我们来试一下

55:36.790 --> 55:37.590
好吧

55:37.590 --> 55:38.230
来试一下

55:38.950 --> 55:39.190
好

55:39.190 --> 55:40.070
我们这边的话

55:40.070 --> 55:41.510
我们给它指定一个

55:42.790 --> 55:43.430
指定一个

55:43.430 --> 55:44.710
我们首先要装是吧

55:44.710 --> 55:45.590
首先要把这个裤

55:45.590 --> 55:46.310
我们把它装一下

55:47.350 --> 55:49.270
我们这边把它装一装

55:50.550 --> 55:50.870
这里

55:51.830 --> 55:52.070
复制

55:52.630 --> 55:53.350
复制了之后

55:53.350 --> 55:54.470
然后加这边

55:54.470 --> 55:54.870
走

55:55.830 --> 55:55.990
好

55:55.990 --> 55:56.870
这边等它装吧

55:56.870 --> 55:58.310
应该不会有太大的问题

55:58.310 --> 55:58.550
好

55:58.550 --> 55:59.110
人家这边

55:59.110 --> 56:00.230
这边是不是把它引入

56:01.030 --> 56:01.830
已经装完了

56:01.830 --> 56:03.270
还是挺快的

56:03.270 --> 56:03.590
好

56:03.590 --> 56:04.390
然后加这边的话

56:04.390 --> 56:05.110
把它引入

56:06.230 --> 56:06.870
对吧

56:06.870 --> 56:07.590
引入了之后

56:07.670 --> 56:08.550
然后加在这里

56:09.670 --> 56:10.950
这里的话我们就来设置

56:11.830 --> 56:13.750
这是刚才设置的默认值

56:13.750 --> 56:14.950
把这个就注释掉

56:16.070 --> 56:16.950
这边的话这里

56:16.950 --> 56:18.230
这里上面是默认值

56:19.590 --> 56:21.270
props的

56:24.220 --> 56:25.580
这期课是不是有点长了呀

56:27.420 --> 56:28.060
默认值

56:28.860 --> 56:29.340
好

56:29.340 --> 56:31.340
然后加这里的话是一个props

56:32.620 --> 56:35.100
的类型检测

56:35.660 --> 56:35.820
好

56:35.820 --> 56:37.420
我们这期课就稍微长一点

56:37.980 --> 56:38.460
好吧

56:38.540 --> 56:40.140
我把这所有的这个知识点

56:40.140 --> 56:41.020
把它讲完

56:41.020 --> 56:42.300
这个验证讲完了之后

56:42.300 --> 56:43.820
再讲一个状态提升

56:43.820 --> 56:45.580
这就是整个这个组建的这个状态

56:45.580 --> 56:46.620
和数据传递

56:46.620 --> 56:48.540
然后就一节一刻把它讲完

56:48.540 --> 56:49.020
啊

56:49.020 --> 56:50.700
讲完了你多休息一下嘛

56:50.700 --> 56:51.020
OK

56:51.980 --> 56:52.300
好

56:52.300 --> 56:53.020
或者你累了

56:53.020 --> 56:54.060
你按个暂停嘛

56:54.060 --> 56:54.780
你按个暂停

56:54.780 --> 56:56.220
你去抽个烟啊

56:56.220 --> 56:57.180
或者去喝个水啊

56:57.180 --> 56:57.980
上个厕所呀

56:57.980 --> 56:58.860
回来再继续停

56:59.420 --> 57:00.140
好吧

57:00.140 --> 57:00.460
好

57:00.460 --> 57:01.260
我这边把它讲完

57:02.460 --> 57:02.700
好

57:02.700 --> 57:03.100
这边的话

57:03.100 --> 57:03.980
这个类型检测啊

57:03.980 --> 57:04.620
类型检测的话

57:04.620 --> 57:05.580
这边是不是就是这个

57:05.580 --> 57:06.060
world

57:07.020 --> 57:08.940
world点什么

57:08.940 --> 57:10.220
你就跟着它文档走

57:10.220 --> 57:11.420
多去看文档

57:11.420 --> 57:12.860
养成看文档的习惯

57:13.660 --> 57:14.380
知道吧

57:14.380 --> 57:15.740
养成看文档的习惯

57:16.540 --> 57:17.180
这边什么

57:17.180 --> 57:18.860
是pop types等于

57:20.140 --> 57:21.100
好回到我们这边

57:21.820 --> 57:23.340
我们这边拿过来

57:23.340 --> 57:24.620
拿过来再跟着写呗

57:25.260 --> 57:26.140
pop types

57:26.780 --> 57:27.340
等于

57:28.060 --> 57:28.780
啊人家这里

57:28.780 --> 57:30.380
这里是不是就是应该是你的属性

57:30.380 --> 57:31.660
比如说我们这边有个content

57:32.220 --> 57:33.740
content我们让它是一个什么呢

57:33.740 --> 57:35.660
我们让它是一个制服串

57:35.740 --> 57:36.460
那制服串的话

57:36.460 --> 57:36.780
这边

57:37.740 --> 57:38.380
所以就是这里

57:39.340 --> 57:39.740
对不对

57:40.380 --> 57:40.940
OK

57:40.940 --> 57:42.380
那我们这个就加上了

57:42.380 --> 57:43.180
好加上了之后

57:43.180 --> 57:44.380
然后先我们这边来试一下

57:44.380 --> 57:45.100
哈

57:45.100 --> 57:46.380
我们这边的话

57:46.380 --> 57:47.260
写个content

57:48.780 --> 57:50.140
写个content

57:50.780 --> 57:51.900
content等于z

57:51.900 --> 57:52.780
点pops

57:52.780 --> 57:55.180
点content

57:55.900 --> 57:56.220
OK

57:56.780 --> 57:57.820
好人家在这里

57:57.820 --> 57:59.020
这边使用的时候

57:59.020 --> 57:59.660
我们这边的话

57:59.660 --> 58:01.820
给它传一个content

58:01.820 --> 58:03.260
我们这边先传一个制服串

58:04.060 --> 58:04.940
比如说这个是一个

58:05.500 --> 58:06.140
world

58:06.700 --> 58:07.340
好保存

58:08.220 --> 58:08.940
保存了之后

58:08.940 --> 58:10.300
然后先下这边来看一下

58:12.540 --> 58:13.420
这边world

58:13.420 --> 58:14.460
没有任何问题

58:14.460 --> 58:15.100
对吧

58:15.100 --> 58:16.060
好人家这边的话

58:16.060 --> 58:18.380
我们来回到副主见

58:18.380 --> 58:19.580
这里就在副主见

58:19.580 --> 58:21.180
好我们这边让我们给它传一个

58:21.180 --> 58:21.820
这个数字

58:21.820 --> 58:22.700
比如传一个100

58:23.580 --> 58:24.460
传个100之后

58:24.460 --> 58:25.820
人家这边来看一下

58:25.820 --> 58:27.820
哎是不是这边就出现提示了

58:27.820 --> 58:28.620
对不对

58:28.620 --> 58:29.500
看一下这个提示

58:29.500 --> 58:30.620
把这些句子读一下

58:31.580 --> 58:32.620
world

58:32.620 --> 58:33.580
警告

58:33.580 --> 58:34.220
failed

58:34.220 --> 58:34.620
pops

58:34.620 --> 58:35.260
type

58:35.260 --> 58:37.180
是不是失败的这个pops

58:37.180 --> 58:38.140
type

58:38.140 --> 58:40.140
in widely的pops content

58:40.140 --> 58:41.180
of type number

58:41.900 --> 58:42.220
对吧

58:42.220 --> 58:44.380
你这边是一个非法的pops

58:44.380 --> 58:45.900
就是content属性

58:46.540 --> 58:47.740
它的type是什么

58:47.740 --> 58:49.180
type是number

58:49.820 --> 58:51.500
然后expected

58:51.500 --> 58:52.700
期望是一个什么

58:52.700 --> 58:53.740
期望是一个stream

58:54.460 --> 58:55.340
哎是不是就达到了

58:55.340 --> 58:57.180
那个就是pops的这个

58:57.180 --> 58:58.300
类型检测的目的

58:59.020 --> 58:59.820
对不对

58:59.900 --> 59:01.420
所以这个的话也是可以做的

59:02.380 --> 59:02.940
可以做的

59:03.900 --> 59:06.540
好然后回到这边

59:06.540 --> 59:07.660
回到我们这边文档

59:08.700 --> 59:10.380
回到他那个文档

59:10.380 --> 59:12.700
这个的话就是类主见

59:12.700 --> 59:13.980
他这边是类主见

59:13.980 --> 59:14.940
那函数主见呢

59:15.660 --> 59:17.020
函数主见也一样

59:17.020 --> 59:18.780
我看他有没有函数主见的例子

59:20.380 --> 59:22.700
函数主见他好像没写例子

59:23.820 --> 59:24.940
我看他写没写

59:24.940 --> 59:25.420
他没写

59:25.420 --> 59:27.260
我记得我的文档里面好像记录了

59:28.220 --> 59:29.900
就就一样的

59:30.460 --> 59:31.500
就一样的

59:31.500 --> 59:33.820
这边那就是pops type

59:33.820 --> 59:35.420
你相赖自己试一下吧

59:35.980 --> 59:36.540
好吧

59:36.540 --> 59:37.980
我就不花时间了

59:37.980 --> 59:38.860
就一样的嘛

59:38.860 --> 59:39.660
对不对

59:39.660 --> 59:40.060
OK

59:41.420 --> 59:43.980
这是关于这个pops的这个验证

59:43.980 --> 59:45.020
分两个

59:45.020 --> 59:46.220
一个是默认值

59:46.220 --> 59:47.580
一个是类型的验证

59:48.220 --> 59:50.140
这节课的话最后一个知识点

59:50.140 --> 59:51.820
最后一个知识点的话

59:51.820 --> 59:53.900
叫做状态提升

59:54.620 --> 59:55.980
什么叫做状态提升

59:57.340 --> 59:58.540
就是我们这边的话

59:58.540 --> 01:00:00.620
我们现在目前来讲的话

01:00:00.620 --> 01:00:02.220
我们的数据都是什么

01:00:02.220 --> 01:00:03.740
是不是从副组件

01:00:03.740 --> 01:00:04.780
这边画个图

01:00:08.040 --> 01:00:09.000
从副组件

01:00:09.000 --> 01:00:11.000
这个是我的app跟组件

01:00:11.800 --> 01:00:12.440
对不对

01:00:12.440 --> 01:00:13.800
也是我们的副组件

01:00:13.800 --> 01:00:14.760
这是app

01:00:15.880 --> 01:00:16.200
好

01:00:16.200 --> 01:00:16.920
然后接下来

01:00:16.920 --> 01:00:18.360
他下面是不是有两个组件

01:00:19.160 --> 01:00:19.800
对不对

01:00:19.800 --> 01:00:20.840
一个是Hello

01:00:21.480 --> 01:00:22.760
一个是world

01:00:23.400 --> 01:00:25.320
然后这样我这个app这个组件

01:00:25.320 --> 01:00:26.760
我的这个数据可以干嘛

01:00:26.760 --> 01:00:27.640
是不是留下

01:00:28.440 --> 01:00:28.840
下面

01:00:29.480 --> 01:00:30.120
对不对

01:00:30.120 --> 01:00:31.240
留下下面

01:00:31.800 --> 01:00:32.920
这是我们刚才

01:00:32.920 --> 01:00:34.680
我们写代码的时候就这么写的

01:00:34.680 --> 01:00:35.320
还记得吧

01:00:35.320 --> 01:00:35.800
我这边

01:00:36.360 --> 01:00:38.200
这边这个z.state

01:00:38.680 --> 01:00:41.320
我app资深的这个数据状态

01:00:41.320 --> 01:00:42.840
要将我往下传

01:00:42.840 --> 01:00:43.400
对不对

01:00:43.400 --> 01:00:45.000
传给这个组件

01:00:45.560 --> 01:00:46.280
传给这个组件

01:00:47.000 --> 01:00:47.640
OK

01:00:47.640 --> 01:00:49.480
那我能不能就是这个组件

01:00:49.480 --> 01:00:50.040
我比如说

01:00:50.920 --> 01:00:55.320
我反馈一些信息给我的这个副组件呢

01:00:56.040 --> 01:00:56.920
可不可以呢

01:00:56.920 --> 01:00:57.320
可以

01:00:57.960 --> 01:00:58.280
可以

01:00:59.000 --> 01:01:00.280
而且他用的方式

01:01:00.280 --> 01:01:01.720
其实和那个voe

01:01:02.520 --> 01:01:03.480
基本就是一样的

01:01:04.280 --> 01:01:06.520
回顾一下voe里面是怎么做的

01:01:07.400 --> 01:01:08.280
voe的话

01:01:08.280 --> 01:01:09.240
是不是就是我比如说

01:01:09.240 --> 01:01:10.040
我这边

01:01:10.040 --> 01:01:11.400
我的组组件

01:01:11.400 --> 01:01:13.400
想要改变这个副组件的

01:01:13.400 --> 01:01:15.560
这个你传递过来的这个数据

01:01:15.560 --> 01:01:15.960
对不对

01:01:15.960 --> 01:01:16.840
我怎么做

01:01:16.840 --> 01:01:18.600
你副组件往往还要传递

01:01:18.600 --> 01:01:19.320
传一个什么

01:01:19.320 --> 01:01:21.320
是传一个这个函数给我

01:01:21.320 --> 01:01:21.800
然后接下来

01:01:21.800 --> 01:01:23.160
我在我的组组件里面

01:01:23.160 --> 01:01:26.040
是不是来触发你这个制定义的这个函数

01:01:27.160 --> 01:01:27.880
对不对

01:01:27.880 --> 01:01:29.800
触发你制定义的函数

01:01:29.800 --> 01:01:30.920
从而实现什么呢

01:01:30.920 --> 01:01:31.960
从而实现就是

01:01:32.600 --> 01:01:35.320
其实就是他去调用了他的这个函数

01:01:35.320 --> 01:01:37.320
从而去修改你的这个状态

01:01:38.600 --> 01:01:40.120
那在这个react里面的话

01:01:40.120 --> 01:01:41.400
它是一模一样的

01:01:42.360 --> 01:01:43.000
OK

01:01:43.000 --> 01:01:43.800
一模一样

01:01:43.800 --> 01:01:46.600
这边让它是叫做状态提升

01:01:47.320 --> 01:01:48.520
在这里

01:01:49.720 --> 01:01:50.920
在核心概念这边

01:01:51.640 --> 01:01:52.600
状态提升

01:01:53.640 --> 01:01:55.480
它是被称之为状态提升

01:01:55.480 --> 01:01:56.600
其实就是什么

01:01:56.680 --> 01:01:58.840
就是那个view里面的那个emit

01:01:59.640 --> 01:02:00.040
对不对

01:02:00.040 --> 01:02:01.800
经常大家练得很熟的

01:02:02.600 --> 01:02:05.000
副传指pops指传副emit

01:02:05.640 --> 01:02:05.960
对不对

01:02:05.960 --> 01:02:07.720
那这边的话在react里面

01:02:07.720 --> 01:02:09.720
它就是它称之为状态提升

01:02:09.720 --> 01:02:11.480
但你仔细你去看他这个文档

01:02:12.360 --> 01:02:13.080
看他这个文档

01:02:13.080 --> 01:02:13.800
其实就是什么

01:02:13.800 --> 01:02:15.720
其实就是把你这个组织件的这个

01:02:16.520 --> 01:02:19.640
就是通过组织件去触发副组件

01:02:19.640 --> 01:02:21.720
传递过来的这个方法

01:02:22.360 --> 01:02:22.920
OK

01:02:22.920 --> 01:02:24.440
来我们这边我们来写一下

01:02:24.440 --> 01:02:25.240
好吧

01:02:25.240 --> 01:02:25.960
我们来写一下

01:02:27.560 --> 01:02:28.280
嗯

01:02:29.480 --> 01:02:31.240
把这个把这个先把他关掉

01:02:32.520 --> 01:02:33.480
关掉之后

01:02:33.480 --> 01:02:34.280
然后我想想

01:02:34.280 --> 01:02:35.080
哈我们这边的话

01:02:35.080 --> 01:02:36.680
我们来写一个例子

01:02:38.840 --> 01:02:39.880
我们在这里

01:02:39.880 --> 01:02:40.440
这里的话

01:02:40.440 --> 01:02:41.800
我们就再写一个函数

01:02:43.640 --> 01:02:44.520
再写个函数

01:02:46.680 --> 01:02:46.840
好

01:02:46.840 --> 01:02:47.400
比如这里

01:02:47.400 --> 01:02:49.400
这里我们给它取一个名字

01:02:49.960 --> 01:02:50.760
取个啥名呢

01:02:51.640 --> 01:02:52.360
就叫做

01:02:54.120 --> 01:02:55.160
changestat

01:02:57.320 --> 01:02:58.680
changestathandle

01:02:59.960 --> 01:03:00.760
OK

01:03:00.760 --> 01:03:01.960
好这个函数的话

01:03:01.960 --> 01:03:04.520
回头我们是要传给组织件的

01:03:04.520 --> 01:03:04.680
好

01:03:04.680 --> 01:03:05.320
这边写一下

01:03:06.120 --> 01:03:07.240
就是该方法

01:03:08.600 --> 01:03:09.800
该方法

01:03:10.920 --> 01:03:13.320
会通过什么呢

01:03:13.320 --> 01:03:15.800
通过pops的形式

01:03:17.320 --> 01:03:18.120
传递给

01:03:18.760 --> 01:03:20.680
传递给组织件

01:03:21.320 --> 01:03:21.720
OK

01:03:21.720 --> 01:03:22.520
我们一步一步来

01:03:23.160 --> 01:03:23.320
好

01:03:23.320 --> 01:03:23.880
我们在这边的话

01:03:23.880 --> 01:03:25.000
我们就先来打印一个

01:03:25.960 --> 01:03:26.840
打印一个

01:03:26.840 --> 01:03:27.800
这个清积

01:03:28.520 --> 01:03:29.480
statthandle

01:03:30.440 --> 01:03:31.000
出发了

01:03:32.520 --> 01:03:33.320
OK

01:03:33.320 --> 01:03:33.640
好

01:03:33.640 --> 01:03:34.200
然后接下来

01:03:34.200 --> 01:03:35.320
我们在这个

01:03:35.320 --> 01:03:36.200
我看哪个是

01:03:37.240 --> 01:03:38.200
我们就就用这个

01:03:38.200 --> 01:03:39.480
就用这个函数组织件

01:03:39.480 --> 01:03:41.080
内组织件也是一样的

01:03:41.080 --> 01:03:41.640
OK

01:03:41.640 --> 01:03:42.680
也是一样的

01:03:42.680 --> 01:03:44.440
我们用这个函数组织件

01:03:44.440 --> 01:03:45.480
是Hello是吧

01:03:45.480 --> 01:03:46.520
好在这边

01:03:46.520 --> 01:03:47.160
这边的话

01:03:47.160 --> 01:03:48.680
我们就把它传递过去

01:03:49.400 --> 01:03:49.880
OK

01:03:49.880 --> 01:03:50.520
我们这边呢

01:03:50.520 --> 01:03:52.520
我们就是清积statthandle

01:03:53.320 --> 01:03:53.880
等于

01:03:55.480 --> 01:03:56.600
清积statthandle

01:04:00.120 --> 01:04:02.040
我们这个是内组织件

01:04:02.040 --> 01:04:02.600
是吧

01:04:02.600 --> 01:04:03.560
这个得这样子写

01:04:04.360 --> 01:04:05.400
等于这个z

01:04:06.200 --> 01:04:08.520
z点这个清积statthandle

01:04:09.080 --> 01:04:10.120
这个看得懂吧

01:04:10.120 --> 01:04:11.960
就我这边的话有个属性

01:04:11.960 --> 01:04:13.160
属性名对应

01:04:13.160 --> 01:04:13.720
直交

01:04:13.720 --> 01:04:15.080
就是属性名叫做

01:04:15.080 --> 01:04:16.200
清积statthandle

01:04:16.760 --> 01:04:17.160
对不对

01:04:17.160 --> 01:04:17.800
回头的话

01:04:17.800 --> 01:04:19.080
我在我的直组件

01:04:19.080 --> 01:04:20.200
直组件我就通

01:04:20.200 --> 01:04:21.080
可以通过什么

01:04:21.080 --> 01:04:22.600
通过pops

01:04:22.600 --> 01:04:22.920
点

01:04:23.880 --> 01:04:25.640
清积statthandle

01:04:25.640 --> 01:04:27.320
什么拿到这个函数

01:04:28.600 --> 01:04:29.160
对不对

01:04:29.160 --> 01:04:29.960
拿到这个函数

01:04:29.960 --> 01:04:30.600
拿到这个函数

01:04:30.600 --> 01:04:31.960
这样我就可以触发它

01:04:32.760 --> 01:04:33.880
比如来到这边

01:04:33.880 --> 01:04:34.760
来到这边之后

01:04:34.760 --> 01:04:35.880
这样我写个button

01:04:36.920 --> 01:04:38.120
写个button

01:04:38.120 --> 01:04:38.680
随便写个

01:04:38.680 --> 01:04:39.320
比如触发

01:04:40.520 --> 01:04:41.080
触发

01:04:45.480 --> 01:04:46.200
触发

01:04:46.840 --> 01:04:48.520
副组织件

01:04:48.520 --> 01:04:50.680
传递过来的

01:04:51.400 --> 01:04:52.440
这个函数

01:04:53.320 --> 01:04:53.880
OK

01:04:53.880 --> 01:04:54.120
好

01:04:54.120 --> 01:04:54.520
我们这边

01:04:54.520 --> 01:04:56.120
我们给它绑定一个点击式件

01:04:56.680 --> 01:04:57.480
click

01:04:57.480 --> 01:04:58.840
等于一个

01:04:58.840 --> 01:05:00.520
click handle

01:05:01.960 --> 01:05:02.280
好

01:05:02.280 --> 01:05:02.920
然后接下来

01:05:02.920 --> 01:05:03.720
我们在这边

01:05:03.720 --> 01:05:04.600
我们给它写一个

01:05:04.600 --> 01:05:05.320
时间处理

01:05:05.320 --> 01:05:06.520
这个回掉

01:05:06.520 --> 01:05:07.800
就时间处理函数

01:05:07.800 --> 01:05:08.600
click handle

01:05:09.720 --> 01:05:09.960
好

01:05:09.960 --> 01:05:10.760
理论上来讲的话

01:05:10.760 --> 01:05:12.520
你这边你点击这个button

01:05:12.520 --> 01:05:14.520
它是不是就会执行这个函数

01:05:14.520 --> 01:05:15.160
对不对

01:05:15.160 --> 01:05:15.320
好

01:05:15.320 --> 01:05:16.440
我们在这个函数里面

01:05:16.440 --> 01:05:17.720
我们做什么呢

01:05:17.720 --> 01:05:18.920
我们做什么呢

01:05:18.920 --> 01:05:20.360
我们就来触发

01:05:21.240 --> 01:05:22.120
副组件

01:05:22.120 --> 01:05:23.320
传递给我们的

01:05:23.320 --> 01:05:25.320
我们是不是可以通过props接收

01:05:25.320 --> 01:05:25.960
对不对

01:05:25.960 --> 01:05:26.600
我们刚才的话

01:05:26.600 --> 01:05:28.280
这些是不是都是通过props接收的

01:05:28.280 --> 01:05:29.080
那你同样的话

01:05:29.080 --> 01:05:30.040
这个东西

01:05:30.040 --> 01:05:32.680
是不是也可以通过props接收到

01:05:32.680 --> 01:05:33.320
对不对

01:05:33.320 --> 01:05:35.000
接收到它是一个什么

01:05:35.000 --> 01:05:36.280
它说它是个函数

01:05:36.280 --> 01:05:36.760
函数的话

01:05:36.760 --> 01:05:38.360
那我们这边就可以干嘛

01:05:38.360 --> 01:05:39.320
我们是不是就可以调用

01:05:40.120 --> 01:05:40.760
对不对

01:05:40.760 --> 01:05:41.560
就可以调用

01:05:41.560 --> 01:05:41.800
好

01:05:41.800 --> 01:05:42.760
来我们这边保存一下

01:05:43.480 --> 01:05:44.200
保存了之后

01:05:44.200 --> 01:05:45.400
然后将我们这边我们来看一下

01:05:48.460 --> 01:05:49.180
我们把那个

01:05:51.180 --> 01:05:52.620
我们把把把那个

01:05:52.700 --> 01:05:54.700
我们刚才写的那个验证是吧

01:05:54.700 --> 01:05:55.820
验证写到哪呢

01:05:56.620 --> 01:05:57.740
写到这里的是吧

01:05:57.740 --> 01:05:58.540
这边是stream

01:05:58.540 --> 01:05:58.780
stream

01:05:58.780 --> 01:06:01.260
然后我们传的是一个数字

01:06:01.260 --> 01:06:02.460
我们这个把改回去

01:06:03.180 --> 01:06:03.980
免得它那个

01:06:04.540 --> 01:06:05.740
那有个这个警告

01:06:06.620 --> 01:06:07.740
这边就world

01:06:08.860 --> 01:06:09.100
OK

01:06:09.820 --> 01:06:10.220
好

01:06:10.220 --> 01:06:10.700
回到这里

01:06:11.820 --> 01:06:12.860
回到这边

01:06:12.860 --> 01:06:13.100
好吧

01:06:13.100 --> 01:06:13.900
这个放到右边吧

01:06:14.700 --> 01:06:15.260
放到右边

01:06:16.540 --> 01:06:16.860
OK

01:06:17.500 --> 01:06:17.900
好

01:06:17.900 --> 01:06:18.700
那现在这个

01:06:18.700 --> 01:06:20.860
这个是我的那个哈喽那个组件

01:06:21.500 --> 01:06:24.140
然后其实这个是哈喽组件里面的那个按钮

01:06:24.140 --> 01:06:25.420
就是对应的是

01:06:25.420 --> 01:06:27.660
哈喽组件里面的这个按钮

01:06:27.660 --> 01:06:28.540
点击之后

01:06:28.540 --> 01:06:29.820
它是不是会触发

01:06:29.820 --> 01:06:30.780
副组件

01:06:31.580 --> 01:06:32.300
给我传

01:06:32.300 --> 01:06:33.500
传递过来的方法

01:06:33.500 --> 01:06:34.140
哪个方法

01:06:34.860 --> 01:06:35.580
说这个方法

01:06:36.220 --> 01:06:36.940
对不对

01:06:36.940 --> 01:06:37.500
OK

01:06:37.500 --> 01:06:38.620
好来我们来试一下

01:06:38.620 --> 01:06:39.020
好不好

01:06:39.020 --> 01:06:39.500
是

01:06:39.500 --> 01:06:39.740
走

01:06:40.620 --> 01:06:41.260
说好死

01:06:41.820 --> 01:06:42.300
对不对

01:06:42.300 --> 01:06:43.020
好死

01:06:43.020 --> 01:06:43.340
OK

01:06:43.900 --> 01:06:45.180
那好死的话

01:06:45.180 --> 01:06:47.180
那这里的话就OK了

01:06:47.180 --> 01:06:47.980
那我这边的话

01:06:47.980 --> 01:06:48.860
我在触发

01:06:49.580 --> 01:06:52.220
我在触发副组件的这个

01:06:52.220 --> 01:06:54.220
给我传递过来的方法的时候

01:06:54.220 --> 01:06:56.860
我这边是不是就可以和副组件通信了

01:06:56.860 --> 01:06:59.100
我是不可以传递一定的数据

01:06:59.100 --> 01:06:59.900
给副组件

01:07:00.540 --> 01:07:01.420
对不对

01:07:01.420 --> 01:07:02.460
比如说我在这里

01:07:03.820 --> 01:07:05.260
我现在用的是

01:07:05.260 --> 01:07:06.780
用的是韩束组件是吧

01:07:06.780 --> 01:07:09.100
韩束组件还没有学那个互可

01:07:09.100 --> 01:07:09.820
没关系

01:07:09.820 --> 01:07:11.580
让我们这边就传个固定值

01:07:12.300 --> 01:07:12.860
传个3

01:07:13.660 --> 01:07:14.220
OK

01:07:14.220 --> 01:07:15.020
传个3

01:07:15.020 --> 01:07:15.980
那你看你这边

01:07:15.980 --> 01:07:17.420
这边是不是就是直组件

01:07:17.980 --> 01:07:20.460
再向副组件传递数据了

01:07:21.580 --> 01:07:22.300
对不对

01:07:22.300 --> 01:07:25.100
是不是和那个view是一模一样的

01:07:25.100 --> 01:07:27.340
view的话是通过这个emit嘛

01:07:27.340 --> 01:07:28.700
view是不是通过这个

01:07:28.700 --> 01:07:30.700
我记得是downer emit

01:07:30.700 --> 01:07:32.780
所以通过这个去触发那个

01:07:32.780 --> 01:07:35.100
副组件传递过来的这个方法

01:07:35.100 --> 01:07:35.660
对不对

01:07:35.660 --> 01:07:38.060
他这边的话相当于就直接调用

01:07:38.060 --> 01:07:39.740
直接调用这边props

01:07:39.740 --> 01:07:40.620
直接调用

01:07:40.620 --> 01:07:41.260
调用的话

01:07:41.260 --> 01:07:42.300
然后将我在这里

01:07:42.300 --> 01:07:44.060
这边我是不就可以接收到呀

01:07:45.020 --> 01:07:45.660
对不对

01:07:45.660 --> 01:07:45.980
啊

01:07:45.980 --> 01:07:46.940
Lumber

01:07:47.020 --> 01:07:47.260
好

01:07:47.260 --> 01:07:48.540
让家这边把这改一下

01:07:48.540 --> 01:07:49.100
哈

01:07:49.100 --> 01:07:49.500
改一下

01:07:50.940 --> 01:07:51.900
我是

01:07:51.900 --> 01:07:52.700
直组件

01:07:53.500 --> 01:07:56.300
传递过来的数据

01:07:57.740 --> 01:07:57.980
OK

01:07:59.740 --> 01:08:01.420
这边对应了Lumber

01:08:02.300 --> 01:08:02.620
好

01:08:02.620 --> 01:08:03.500
保存

01:08:03.500 --> 01:08:04.140
保存之后

01:08:04.140 --> 01:08:05.260
让家我们这边来看一下

01:08:07.260 --> 01:08:07.580
走

01:08:08.300 --> 01:08:08.940
是不是拿到了

01:08:09.740 --> 01:08:10.620
对不对

01:08:10.620 --> 01:08:11.580
就拿到了

01:08:11.580 --> 01:08:11.900
OK

01:08:11.900 --> 01:08:12.780
那拿到了之后

01:08:12.780 --> 01:08:13.420
那接下来的话

01:08:13.420 --> 01:08:14.140
你这边

01:08:14.140 --> 01:08:15.340
你这个副组件

01:08:15.340 --> 01:08:15.820
副组件

01:08:15.820 --> 01:08:18.540
然后将你要改变什么这个State

01:08:18.540 --> 01:08:19.660
啊这些值啊什么的

01:08:19.660 --> 01:08:20.300
是不是都可以

01:08:20.940 --> 01:08:21.740
对不对

01:08:21.740 --> 01:08:22.220
都可以

01:08:23.180 --> 01:08:24.860
这个其实就是他这边

01:08:24.860 --> 01:08:25.820
所谓的

01:08:25.820 --> 01:08:26.540
状

01:08:26.540 --> 01:08:27.260
在这里

01:08:27.260 --> 01:08:28.060
所谓的

01:08:28.060 --> 01:08:29.580
状态提升

01:08:30.540 --> 01:08:31.100
OK

01:08:31.100 --> 01:08:32.540
这就是他所谓的状态提升

01:08:33.980 --> 01:08:34.140
好

01:08:34.140 --> 01:08:34.700
这些课的话

01:08:34.700 --> 01:08:35.820
稍微有点长了

01:08:35.820 --> 01:08:37.100
一个多小时了

01:08:37.100 --> 01:08:37.580
这样子

01:08:37.580 --> 01:08:38.620
我本来我这边的话

01:08:38.620 --> 01:08:40.460
是打算写一个例子的

01:08:40.460 --> 01:08:43.180
写一个这个汇率转换的这个案例

01:08:43.180 --> 01:08:44.060
那这个案例的话

01:08:44.140 --> 01:08:46.220
我们就放到下几课来写

01:08:46.220 --> 01:08:47.340
好吧

01:08:47.340 --> 01:08:47.900
下几课

01:08:47.900 --> 01:08:51.100
下几课咱们把这个汇率转换的这个

01:08:51.100 --> 01:08:52.140
这个例子

01:08:52.140 --> 01:08:53.340
我们把它写一下

01:08:53.340 --> 01:08:53.900
写完之后

01:08:53.900 --> 01:08:55.740
然后现在我们再写一下那个

01:08:55.740 --> 01:08:57.340
再把那个表单讲一下

01:08:57.340 --> 01:08:57.820
啊

01:08:57.820 --> 01:08:58.620
你看现在的话

01:08:58.620 --> 01:08:59.980
基本上就这里啊

01:08:59.980 --> 01:09:01.580
这个核心概念这边

01:09:01.580 --> 01:09:02.700
啊这这讲了

01:09:02.700 --> 01:09:03.180
对吧

01:09:03.180 --> 01:09:05.260
啊这边组件props state

01:09:05.260 --> 01:09:06.780
这是不是就这几课讲的那种

01:09:06.780 --> 01:09:07.180
对不对

01:09:07.180 --> 01:09:08.540
还有个生命周期没讲

01:09:08.540 --> 01:09:08.780
好

01:09:08.780 --> 01:09:09.900
然后事件处理

01:09:09.900 --> 01:09:10.620
讲了

01:09:10.620 --> 01:09:10.860
好

01:09:10.860 --> 01:09:12.780
然后这个条件渲染和这个列表

01:09:12.780 --> 01:09:14.700
这个是不用讲的

01:09:14.700 --> 01:09:15.660
ok这个的话下去

01:09:15.660 --> 01:09:16.620
大家自己看一下

01:09:16.620 --> 01:09:17.980
啊

01:09:17.980 --> 01:09:19.100
这个的话其实就是什么

01:09:19.100 --> 01:09:20.620
就是杰斯

01:09:20.620 --> 01:09:21.820
这个到时候我写的时候

01:09:21.820 --> 01:09:22.380
我用一下

01:09:22.380 --> 01:09:23.180
你就知道了

01:09:23.180 --> 01:09:26.060
这个不需要单独开一节课来讲

01:09:26.060 --> 01:09:26.380
ok

01:09:26.380 --> 01:09:27.900
这个就是杰斯啊

01:09:27.900 --> 01:09:28.620
杰斯里面

01:09:28.620 --> 01:09:29.340
你杰斯里面

01:09:29.340 --> 01:09:30.620
e4l是怎么写的

01:09:30.620 --> 01:09:32.060
他这里面就这么写

01:09:32.060 --> 01:09:33.020
ok

01:09:33.020 --> 01:09:33.420
好了

01:09:33.420 --> 01:09:35.580
下几课我们把那个表单讲一下

01:09:35.580 --> 01:09:35.820
啊

01:09:35.820 --> 01:09:37.020
这个状态提升的话

01:09:37.020 --> 01:09:37.980
我们该已经说了

01:09:37.980 --> 01:09:38.540
下来的话

01:09:38.540 --> 01:09:40.140
大家把这一节

01:09:40.140 --> 01:09:41.260
第十节

01:09:41.260 --> 01:09:41.980
还有就是什么呢

01:09:41.980 --> 01:09:43.660
还有就是这边第四节

01:09:43.660 --> 01:09:46.140
第四节和这个第五节的这个state

01:09:46.140 --> 01:09:48.380
把这些的话把它看一下

01:09:48.380 --> 01:09:49.180
ok

01:09:49.180 --> 01:09:49.580
好

01:09:49.580 --> 01:09:51.580
这节课的话就先到这里

01:09:51.580 --> 01:09:52.220
啊

01:09:52.220 --> 01:09:52.940
好

01:09:52.940 --> 01:09:53.820
下期课再见

01:09:53.820 --> 01:09:55.500
拜拜

