WEBVTT

00:00.000 --> 00:06.400
好 咱们上节课的话 咱们把这个react rotor v6版本

00:06.660 --> 00:09.720
咱们做了一个学生管理系统 对吧

00:09.980 --> 00:15.360
好 然后上节课 然后有一点忘记说了 这边的话有一个v5版本的

00:15.620 --> 00:19.960
如果就是想要了解v5的同学的话 我这边做了一个v5版本的

00:20.220 --> 00:21.760
这边大家可以看一下

00:22.020 --> 00:23.300
在这里

00:24.320 --> 00:28.680
在这 你看v5的话 它用的是什么 它用的是switch

00:28.880 --> 00:31.680
ok 那这里面这里面它是用的是component

00:32.220 --> 00:34.020
我们v6的话 这边是不是element

00:34.780 --> 00:40.920
对吧 然后接下来的话 然后其他区别的话 也还好

00:41.680 --> 00:47.920
啊 也还好 就你把v6 你v6掌握了之后 你回头看这个v5的话 你是能够看得懂的

00:48.180 --> 00:53.660
啊 比如他这边呢 获取这个参数 获取参数啊 这边是通过probs.match.promise

00:54.340 --> 00:58.140
啊 他这个probs.match 这个是个对象 对象上面的话有一个这个promise

00:58.600 --> 01:00.400
可以获取这个动态属性

01:00.660 --> 01:06.800
ok 啊 这边的话 你如果就是想要了解v5 这个v5的话 你可以把这个v5版本的

01:07.060 --> 01:09.860
就我们写的这个啊 用户管理系统

01:10.380 --> 01:14.740
啊 我们写的是 就之前我们写的是学生管理系统嘛 这边用户管理系统 但实际上都长一样

01:15.240 --> 01:19.080
对吧 换了个名字而已 你可以把它看一下 啊 功能的话都是一样的

01:19.840 --> 01:23.960
ok 功能的话就和我们上级课写的那个学生管理系统

01:24.720 --> 01:25.240
是一样的

01:26.100 --> 01:26.600
看不看

01:27.420 --> 01:31.060
啊 这边 关于我们啊 大家这边听一下用户

01:32.140 --> 01:38.500
ok 啊 这是关于这个 这个的话我到时候我就把它放在哪儿呢 好吧 这个我就把停了啊

01:39.740 --> 01:47.450
我停了 好 那这个的话我就把它放到放到我们的那个我们的那个胶案

01:48.490 --> 01:53.010
好 回到这个胶案的话是会上传给大家的 咱们入门片第二张

01:53.790 --> 02:02.310
我就放到这个收官这吧 收官这 然后客厂代码 客厂代码 然后加这边再多一个啊 user 这个系统

02:03.270 --> 02:07.150
好吧啊 这个的话 打个备注啊 使用

02:08.430 --> 02:09.070
rector

02:10.110 --> 02:10.550
rotor

02:11.070 --> 02:11.470
v5

02:13.750 --> 02:13.990
v5

02:15.630 --> 02:16.350
把前面删了

02:17.310 --> 02:17.710
就这样子

02:19.150 --> 02:22.910
好 然后我把那个把依赖删了 你到时候自己装下依赖啊

02:23.310 --> 02:25.910
自己把依赖装一下 依赖就不放进去

02:27.990 --> 02:33.550
ok 这是关于上级课的那种啊 上级课咱们把这个整个reactor rotor咱们把它过完了

02:34.190 --> 02:40.790
好 这些课的话咱们就要进入到这些课的这个重点了啊 这些课开始的话咱们就要讲这个东西了

02:41.830 --> 02:48.670
关于这个reactor redux 啊 也就是说咱们的这个状态管理的这个库

02:49.670 --> 02:58.490
ok 啊 这些课主要包含这么三个点啊 首先第一个呢 就是什么是状态管理啊 然后既然是一个redux的一个核心思想

02:59.010 --> 03:07.050
以及这个reactor redux啊 这边慢慢来讲嘛 慢慢来讲 这些课注定也是比较长的一些课啊 慢慢讲

03:08.370 --> 03:15.090
啊 首先第一个 第一个呢 是什么是状态管理啊 状态管理的话 这个其实大家不陌生

03:15.910 --> 03:22.910
对吧 你之前的话 你学过什么 你学过这个view view里面有什么view里面是不是会有一个这个vulx

03:23.590 --> 03:27.150
那那个vulx的话 是不是就是拿来做这个状态管理的这个库

03:28.390 --> 03:34.910
对吧 啊 说到这个状态管理的话 其实对于大家来讲的话 这个不是说什么新概念之类的 你之前用过的

03:35.670 --> 03:43.830
ok 啊 说说我这边的话 我不需要就是再给你解释啊 什么是状态管理 我们简单来复习一下嘛 啊 这一块它其实算是复习了

03:44.650 --> 03:51.810
啊 什么叫做状态管理呢 所谓状态管理 指的是把组建之间需要共享的状态

03:52.570 --> 04:02.050
啊 我需要共享的状态 把它这个抽取出来 你这个的话你不要迷恋 这个学了这个就是状态管理的库之后 你不要这个迷恋这个状态管理

04:02.610 --> 04:10.410
对吧 什么都往那个这个仓库里面放啊 之前的话有同学学这个vulx就是 学了vulx之后 然后什么都往vulx里面放

04:10.910 --> 04:16.190
你这边的话 你是要需要共享的 你才放进去 你不需要共享的时候 是不就不需要放进去

04:16.670 --> 04:21.670
对的 比如说我这边的话 我这个组建 我这个组建的话 有一个这个属性 我不需要和其他组建进行共享

04:22.070 --> 04:25.110
那我这个是不是就放在我的这个组建里面 是不就ok了

04:25.950 --> 04:34.630
对吧 那是将这个需要共享的状态把它抽取出来 啊 然后接下来的话 遵定这个遵循特定的这个约定

04:35.090 --> 04:38.650
统一来管理 啊 主要就是什么了 统一管理

04:39.850 --> 04:44.250
统一管理 让状态的这个变化可以预测 ok

04:45.090 --> 04:53.970
而我们组建之间的话 经常会有一些就是需要共享的这个状态 那你如果没有这个就是状态管理的库 那我们之前

04:54.730 --> 04:56.610
组建和组建之间进行这个

04:57.490 --> 05:01.650
状态的一个共享的时候 或者说数据的共享的时候是怎么做的

05:02.230 --> 05:10.350
一般来讲的话 是不是就是提升到副组建的这个props里面 对不对 由谁来管理 是不是由这个副组建

05:11.230 --> 05:12.030
统一来管理

05:12.990 --> 05:19.310
对不对啊 我们一般我们知道啊 副这个副组建向直组建传递这个状态使用props

05:19.710 --> 05:27.870
那直组建向副组建传递状态 或者说传递数据通过什么 是触发副组建传递给我的这个制定寒朔

05:28.850 --> 05:34.570
对吧啊 这一点的话 其实view和react都是一样的啊 我们之前学过那个状态提升

05:35.370 --> 05:39.930
和view的那个emit downer emit 对吧 是不是一样的

05:40.650 --> 05:40.850
ok

05:42.170 --> 05:44.730
好 然后这样子呢 它会导致两个问题

05:45.610 --> 05:51.690
那两个问题呢 首先第一个 你需要共享的状态 你需要提升至公共的这个副组建

05:52.410 --> 05:55.490
那我如果没有公共的副组建呢 比如说我现在就是两个平极的

05:56.050 --> 05:57.650
对吧 这两个平极的这个组建

05:58.130 --> 06:01.650
那我现在为了就是达到这两个组建 状态共享着 将我这边上会

06:02.930 --> 06:07.810
创建一个公共的这个副组建 公共的副组建 然后包含这两个制度建

06:08.690 --> 06:13.170
对吧 你往往需要自行的构造一个 然后这个问题其实都还好

06:14.010 --> 06:17.970
都还好 这个问题的话也不算太大 最关键是这个

06:18.810 --> 06:26.770
这个其实是最严重的 就是我状态的话 我这边在进行传递的时候 如果组建的成绩过多

06:27.510 --> 06:31.150
那我数据的这个传递 它就会非常的什么的 非常的融杂

06:31.990 --> 06:33.630
怎么意思 那比如你看这边

06:35.110 --> 06:42.270
这里边是我的一个组建树 说过这个组建 组建的成绩的话 其实就和那个动物树一样 对吧 它会形成一个

06:42.670 --> 06:45.670
数结构 好 那接下来 比如说我这个组建

06:46.270 --> 06:55.870
我有数据 想传递给这个组建 那怎么办 那你就 那你就麻烦了 你需要一级一级的先传到这儿 对吧

06:56.210 --> 07:02.970
好 然后接下来再传到这儿 然后接下来再传到这儿 先提升到副组建 然后副组建在一层

07:03.690 --> 07:08.690
一层一层下来 我们这儿的话 都也拆几层吗 也拆四层吗

07:09.170 --> 07:12.970
对吧 那我真是开发中大型项目的话 那我这成绩可能非常非常多

07:13.770 --> 07:19.530
那你整个这个数据的这个传递的话 就会显得非常非常的凌乱

07:20.350 --> 07:26.510
ok 那所以这个时候的话 我们就需要一个什么呢 需要一个统一的这个仓库

07:27.310 --> 07:33.830
啊 来对这个组建的这个状态进行管理 那这个统一的仓库的话 大致就是这个样子的

07:34.630 --> 07:36.630
啊 所以你这边其实看这张图 其实就

07:37.430 --> 07:42.070
所以一眼就可以看出来 哦 原来这个数据仓库啊 是这样子的 确确实实实

07:42.070 --> 07:45.870
是不是我这边后期我再控想这个状态的时候 就会很方便

07:46.650 --> 07:50.810
对不对 我要拿什么数据都去哪去拿 是不是从这个仓库里面去拿

07:51.810 --> 07:57.050
对不对 好 然后这样我这个组建比如更新了 更新的话 然后我把这个数据提交给什么 提交给仓库

07:57.810 --> 08:04.730
对吧 然后加这个仓库的数据 然后加一个传递给他 传递给他之后 然后只要回头我这边变了 他是不是自动就更新了

08:06.090 --> 08:10.730
对不对啊 你对比一下这两张图啊 这两张图其实是非常形象的

08:11.650 --> 08:13.770
啊 你哪怕以前你学了一个vx

08:14.350 --> 08:20.070
哪怕你以前学了个vx 啊 学的这个某某懂懂的 你这边让你看这张图

08:20.670 --> 08:28.150
啊 应该一下子就能看出来啊 他这边就是没有使用状态管理库之前和这个使用了状态管理库之后

08:28.870 --> 08:30.270
他们两者之间的区别

08:31.110 --> 08:36.550
ok 你仔细想一想啊 你现在看到这两张图之后 你再回忆一下那个vx

08:37.270 --> 08:38.550
这不采用的就是这种模式啊

08:39.410 --> 08:47.090
对不对 统一的话 然后这个vx来帮你管理这个组件的这个数据啊 回头的话 我这边组件统一都是从什么

08:47.170 --> 08:55.010
是不是从这个vx里面 就共享的数据啊 我真的是共享的数据 就如果就是要获取共享的数据的话 统一是不是都是通过这个vx

08:55.370 --> 09:00.450
这个仓库是不去拿到 vx里面那个那个叫好像store是吧 我记得

09:02.770 --> 09:07.690
啊 统一通过这个store来拿到 好 大家我要改变store里面的数据 通过什么

09:07.870 --> 09:15.110
是multi形 对不对 通过一个multi形啊 去这个改变啊 如果是一步一步的话 通过什么呢 通过action

09:16.110 --> 09:20.790
通过action 对吧 ok 啊 本质上其实和那个vx是一样的

09:22.630 --> 09:30.470
好 让我们来看一下这个和这个react搭配的啊 和react搭配的这个东西呢叫做redux

09:31.150 --> 09:36.910
叫做redux啊 我们来看一下redux的这个核心思想 这个的话它很重要

09:37.410 --> 09:45.250
这个的话 它和就是咱们之前学的这个vx其实还是有一些区别 ok 有一些区别啊 所以咱们这边要看一下啊

09:46.050 --> 09:51.250
好 早期的时候的话react官方提供的是什么 提供的是这个flex

09:52.410 --> 09:59.490
啊 这个是duflex还是flux 啊 反正就是提供的是这个方案 ok 啊 这个方案的话 它有一些特点

10:00.170 --> 10:03.050
啊 它的特点的话就是首先它是单向数据流

10:03.830 --> 10:11.710
然后试图事件或者外部啊 再发出一个action 这个action的话 通过一个叫做dispatcher

10:12.430 --> 10:18.350
派发给这个store 那store的话在这个触发相应的方法 啊 更新你的这个数据

10:19.110 --> 10:24.430
更新试图 这是它首先第一个特点 好的 第二个的话 它的这个store可以有多个

10:25.670 --> 10:32.350
store就是我们的数据仓库啊 这里的话 咱们这个vx里面是不是也是有store 对吧 这边它也是一样的啊

10:32.410 --> 10:39.490
就是数据仓库 它是可以有多个的啊 好 大家这边这个store store的话不仅存放这个数据

10:39.810 --> 10:45.770
它还封装了处理数据的这个方法 这是这个flex 它的这个特点

10:46.410 --> 10:56.210
ok 但这个flex呢 现在用的不多了啊flex 在flex之后啊 在2015年的时候啊 我们称之为单省啊 这边有张单省的这个照片

10:56.950 --> 11:04.750
单省啊 真的帅啊 确实长的帅 ok 啊 这个单省 它推出了什么呢 它推出了这个redux

11:05.510 --> 11:18.670
啊 当时它推出了这个redux 就席卷了整个这个react社区 ok 那这个redux的话 它本质是什么 本质上其实就是在react官方所推出了这个flex的基础上

11:19.170 --> 11:29.570
它做了一些更新啊 就一些些许的更新 比如说你看这边store可以有多个 它更新成什么 更新成这个单一数据员啊 你只能有这个

11:30.210 --> 11:38.930
一个store ok 那这边那采用的也是什么呢 采用的也是单项数据流啊 由vue发起这个action

11:39.910 --> 11:50.110
ok 由试图 试图的话 我们派发一个action 派发这个action 这个action会到达这个store store的调用reduxer来计算出这个新的state

11:50.750 --> 12:02.910
啊 新的state 计算出来之后 然后接下来的话 重新渲染你整个这个view啊 这里说的view指的是试图啊 不是vue那个view啊 这边是这个试图这个view ok

12:03.890 --> 12:06.690
好 然后接下来这边呢 还有就是这个没有dispatcher

12:07.730 --> 12:14.650
你看我们之前的这个flex 这边说精油dispatcher 派发给store 对吧 它这边它没有dispatcher

12:15.130 --> 12:25.610
而是干嘛呢 而是在这个store里面集成了一个disparch的这个方法啊 通过store.disparch派发这个action

12:26.550 --> 12:29.110
啊 还有就是什么呢 还有就是支持这个中间键

12:30.230 --> 12:35.030
啊 你可以使用一些中间键啊 使用中间键来管理你的这个一部数据流

12:35.750 --> 12:41.590
这个就是整个redux 它的一些这个核心的一些特点啊 核心的特点

12:42.510 --> 12:47.190
ok 啊 这边的话是关于这个redux的官网 你这边可以打开看一下

12:48.190 --> 12:53.010
这边是这个redux啊redux的话 人家这边的话会有一个getting started

12:53.650 --> 12:59.810
getting started 然后他现在官方推出了一个工具啊 叫做这个redux js2kit

13:00.450 --> 13:09.570
啊 这个我们一会再来 一会我们讲那个reactredux的时候 我们再来使用啊 我们这里的话先干嘛呢 先使用一下就是最原始的

13:10.450 --> 13:13.490
最朴实无华的这种方式 我们来试验一下

13:14.190 --> 13:20.790
好吧 来试验一下啊 你看他这边有一个这个call concepts 就是他的核心概念

13:21.390 --> 13:25.310
他的核心概念的话其实就这么几个 首先这个是你的数据

13:27.030 --> 13:31.910
看没有 这里是你的数据 好 人家这边这边的话是你的我看一下啊

13:33.070 --> 13:34.550
啊 这个是数据 这个呢

13:35.870 --> 13:43.230
imagine your app state is described as a plane object for example 假是你的应用里面的这个状态

13:43.630 --> 13:45.110
是通过这种方式来描述的

13:46.030 --> 13:50.030
好 接下来here are few example actions 这个的话是action

13:50.750 --> 13:54.670
这个是action ok 好 接下来他这边的话这个就是reducer

13:55.590 --> 13:59.110
看到没有 reducer长什么样子 reducer的话他其实就是一个存函数

14:00.070 --> 14:04.230
他就是个存函数 说起来存函数我上节课有没有给大家介绍过存函数

14:05.790 --> 14:10.910
好像介绍过吧 之前介绍这个react的时候 介绍户口的时候应该讲过存函数吧

14:11.730 --> 14:14.330
啊 这边就不说了啊 他这边他是个存函数

14:14.970 --> 14:21.130
ok 说为什么他这边的话叫做可预测的 你看一下这里 为什么你看这边 他这边副标题

14:21.850 --> 14:29.650
这个praydictable statecontainer for这个js apps 他是一个这个状态可预测的这个容器

14:30.130 --> 14:33.770
为什么说他可预测 因为他这边的话使用的是存函数

14:34.750 --> 14:41.310
我们说过存函数有个特点是什么 是不是你固定的数值 他会得到固定的是一个输出值

14:41.910 --> 14:45.990
是不是他没有额外的情况 对不对 他里面是没有副作用的 ok

14:47.070 --> 14:52.950
啊 所以他这边可预测的啊 这个的话就是reducer啊 一个这个存函数 让他在这里面

14:53.590 --> 14:56.070
对这个state 进行个更改

14:57.430 --> 15:02.070
好 然后下面这个这里面其实就是他的一些核心概念

15:02.930 --> 15:09.930
ok 就是他有些核心概念啊 我们这边回到我们的这个笔记啊 我们来看一下整个redux的一个数据流

15:10.410 --> 15:17.210
啊 但如果从来没接触过这块同学啊 到目前为止觉得是有点抽象啊 我们一会我们写个例子

15:17.970 --> 15:21.570
你就明白了 ok 我们写个实例 写个实例你就懂了

15:22.170 --> 15:25.970
好 我们先来看一下这个redux的一个数据流 他的数据流是这样子的

15:26.950 --> 15:31.910
就首先我这边有一个store 啊 这个的话存出了我公共的这个数据

15:32.390 --> 15:39.270
好 大家这个是我的这个仕图 对吧 让我的仕图从哪去获取这些公共的数据呢 从你的这个store里面

15:40.230 --> 15:46.470
你store里面大家可以把这个公共的这些共享的状态给我 那假设我现在的话有更新

15:46.990 --> 15:51.270
有更新怎么办呢 有更新我这边的话就会派发一个action

15:52.250 --> 15:59.290
啊 通过这个dispatcher啊dispatcher这里指的是这个啊 指的是这个store的这个dispatch这个方法

15:59.890 --> 16:05.290
啊 通过这边这边派发一个action 到哪里呢 到这个store里面

16:06.330 --> 16:14.530
啊 然后这个action他是什么呢 他其实是一个描述对象啊 你回头在在这里看一下action 在这边可不可以啊 首先他是个对象

16:15.390 --> 16:20.070
对吧 他这个对象 那这个对象的话我们称之为描述对象

16:20.990 --> 16:23.950
他描述描述什么呢 描述我要做什么

16:24.910 --> 16:32.230
啊 我这边让我要做做什么 我这边要做比如说增加操作切换操作啊 什么什么样的操作我要做什么

16:32.630 --> 16:37.750
好 大家这边后期后面的话 第二个属性就后面的属性 一般就是带过去的这个数据

16:38.530 --> 16:45.930
ok 啊 比如说我这边我要做这件事情啊 大家这边的话 我带过去的数据啊 我要做这件事情 我带过去的数据

16:46.330 --> 16:50.290
回头这个action的话 就会派发到哪里呢 就会派发到这个reducer里面

16:51.370 --> 16:57.850
reducer 人家根据啊 你比如说第一个 第一个呢 你是做这件事情啊 这边那是否匹配上了 匹配上了之后人家向我这边的话

16:58.690 --> 17:00.210
就更新我的这个state

17:01.010 --> 17:05.810
可不可以 更新我这个仓库里面的这个数据啊 这个是不是仓库数据 这个不是啊

17:06.510 --> 17:11.510
就是这边啊 更新我这个仓库里面的数据啊 我们一会儿写个例子你就明白了

17:12.150 --> 17:14.830
ok 现在的话你可能觉得比较抽象啊

17:15.670 --> 17:19.950
好 那我们这边我们来写个例子吧 我们来写一个这个啊 to do list

17:20.710 --> 17:24.550
to do list的例子啊 我们这边呢 先把这个to do list的这个例子 我们先来看一下

17:26.510 --> 17:36.370
好 把它用viscode打开 打开之后 然后接下来我们这边 我们来把这个例子写一下 我们先来看他长什么样子

17:38.250 --> 17:40.250
分别梦

17:41.250 --> 17:49.140
starks 啊 把它打开

17:50.780 --> 18:00.660
啊 这边看一下啊 啊 这很简单的 对吧 这边有个代办事项 代办事项 然后加在这里的话 你这边可以输入啊 比如你要干什么 比如说学习

18:02.420 --> 18:03.580
学习这个

18:04.260 --> 18:10.900
redux 啊 点击提交 提交之后人家这一块是不是就过来了 对不对啊 比如这件事情我做完了 我可以把它画掉

18:11.400 --> 18:17.320
啊 可以把它画掉 ok 代表做完了 那我也可以干完了 我可以把它删掉啊 不要这边 我可以把它删掉

18:18.600 --> 18:30.320
可不可以啊 让我这边 我们这边一个小小的势力里面啊 就包含了增加和删除 对不对 还有就是修改啊 还有就修改啊 我们就通过这个例子 我们来看一下

18:31.080 --> 18:36.110
好吧 把这个关掉 把这个关掉

18:37.150 --> 18:40.670
好 我们这边的话 我们来新创建一个吧

18:41.650 --> 18:43.010
来新创建一个项目

18:44.690 --> 18:45.250
好吧 这个

18:46.690 --> 18:50.130
好 或者我们这边把之前之前我们这边的话

18:51.050 --> 18:53.850
第一张 然后比如这个hooks

18:54.730 --> 18:56.370
客舱代码 我们就懒得那个了

18:57.410 --> 19:00.650
就懒得这个重新拉项目了 是吧 我们直接把这个拿过来

19:01.610 --> 19:03.610
拿过来之后 然后这样我们这边把它打开

19:10.720 --> 19:15.680
ok 好 打开之后 然后接下来 我们这边首先第一步 你需要安装这个redux

19:15.900 --> 19:23.420
所以我这边的话 npm i redux 你看我这边的话就只安装redux ok 回车

19:24.740 --> 19:25.820
好 这边等他安装吧

19:27.060 --> 19:28.780
好 这边的话应该是差不多了

19:29.780 --> 19:31.740
好 然后接下来的话 咱们这边

19:33.140 --> 19:36.940
他说redux应该他会帮我把其他的 因为我们这个依赖包是删了的

19:37.460 --> 19:41.140
他这边应该是会把我把其他的这个依赖包都装上啊 等他装吧

19:41.980 --> 19:45.060
好 然后我们这边我们看一下这个应用 能够启动吧

19:45.740 --> 19:47.940
npm on start

19:52.140 --> 19:55.980
啊 等他启动啊 啊 这是我们之前讲户客的时候写的东西了 是吧

19:57.700 --> 19:57.860
啊

19:59.380 --> 20:00.660
啊 这边启动起来了

20:03.470 --> 20:09.110
啊 ok 啊 启动起来了 好 然后回头呢 我们这边把这些东西我们把它干掉 这些就不要了啊

20:10.150 --> 20:13.830
这个不要了 那app app这边啊 这些不要了

20:16.070 --> 20:17.070
这不要了啊

20:18.350 --> 20:19.470
那这个这个也不要了

20:20.150 --> 20:21.630
好 这边随便随便写点东西

20:23.270 --> 20:29.470
ok 好 现在呢 是不是一个干干净净的应用 好好 然后接下来的话 咱们这边来使用这个redux

20:29.550 --> 20:32.230
redux呢 刚才已经装上了啊 在

20:34.710 --> 20:41.750
哎 在哪里呢 在这里啊 这边4.2.0 好 那我们现在的话 我们来使用一下这个最原始的这个

20:41.910 --> 20:42.430
redux

20:43.070 --> 20:43.310
ok

20:45.900 --> 20:48.740
好 我们首先这边 这边的话 我们刚才的那个

20:49.720 --> 20:57.080
代变事项啊 我们来到这个app这边啊 我们这边的话 首先的话div.container

20:58.480 --> 21:00.080
啊 这个是最外层的这个容器

21:00.880 --> 21:07.120
啊 我们就直接在这写就可以了 在这里对吧 class name 等于一个container

21:07.520 --> 21:13.680
啊 这边还要说一下 就是我们这边的话会用到那个boardstrap啊 因为我们这边会有一些这个样式

21:14.100 --> 21:22.780
所以我们这边呢 需要去那个bootcdn里面 把这个bootstrap啊 把他拿过来 那我这边呢 我就直接啊 把那个链接复制过来啊

21:23.420 --> 21:24.220
啊 我就放在这里

21:25.580 --> 21:32.900
ok 我们这边就使用他的样式啊 也不会涉及到什么js 我们这边就引一个这个bootstrap css就ok了

21:34.260 --> 21:37.300
好 然后在这里 这里的话 这个是我们最外层的容器

21:38.140 --> 21:39.140
最外层

21:40.080 --> 21:44.840
容器啊 好 然后里面有什么呢 里面是不是分成两块

21:45.440 --> 21:53.360
一个是什么 一个是你的那个输入框啊 你要做什么事情 一个是什么 一个是就下面啊 默认我们有一些这个

21:53.960 --> 21:59.640
代办事项的一个列表 对吧 ok 好 那我们这边 我们还是给个标题啊 首先这边

22:00.840 --> 22:01.920
h1 这个是

22:02.600 --> 22:04.480
代办事项

22:05.340 --> 22:12.620
好 这边h1的话 我们这边给他一个class name 这边的对应的是lead 这个是在bootstrap里面都是写好了的

22:13.420 --> 22:16.780
好 我们这边呢 单独给他一个style 让他

22:18.860 --> 22:24.560
给他一个这个margin margin bottom

22:25.800 --> 22:26.880
啊 给个30

22:27.960 --> 22:32.920
30相处 ok 好 那接下来的话 我们这边就创建一个component

22:34.360 --> 22:37.160
component 啊 这里面的话 两个逐渐

22:37.440 --> 22:39.640
一个是什么呢 一个是你的input

22:40.720 --> 22:45.320
点jst啊 这个的话是你输入新的这个代办事项

22:46.000 --> 22:51.200
好 人家这边呢 会有一个list 点jst啊 这个的话就是你的这个

22:51.960 --> 22:56.240
罗列出来的一条一条的那个代办事项 ok 我们这边

22:56.960 --> 23:00.080
rsf 这边呢 是input

23:01.120 --> 23:04.960
这边rsf 这边呢 是list

23:05.620 --> 23:11.780
ok 好 在app 这边 app 这边的话 我们就把这个引入对吧 这边input

23:12.580 --> 23:15.460
这个input from

23:16.300 --> 23:20.220
当前摸落下面的component 下面的input

23:22.020 --> 23:24.300
好 还有就是这个list

23:26.380 --> 23:27.300
啊 这边的引入

23:28.540 --> 23:32.900
list 好 然后加这边的话就可以使用一下啊 这边

23:33.800 --> 23:35.920
嗯 上面是input

23:37.440 --> 23:39.880
上面是input 啊 这边一个单标签就可以了

23:41.480 --> 23:48.560
好 那就下面 下面的话是一个list ok 那基本上 咱们这个的话就成型了 咱们这边来看一下

23:49.960 --> 23:54.640
vst有了 对啊 有了之后人家这边的话 我们会涉及到一些

23:55.720 --> 24:00.680
啊 这边的话会有一些样式啊 我把这个样式我就直接拿过来了啊 我在这边新建一个

24:01.180 --> 24:03.700
新建一个css

24:04.700 --> 24:10.220
好 这边的设计app.css 好 把那个css我就直接拿过来啊

24:11.260 --> 24:14.020
啊 这css也不多 就这么挤行

24:15.180 --> 24:20.860
对吧 这么一点点 好吧 拿过来 拿过来之后 然后你需要引入一下 所以我们去这个

24:21.780 --> 24:24.420
这边的话 我们在这个app这边 我们把它引入一下

24:25.860 --> 24:29.260
input 然后app 应该是

24:31.420 --> 24:35.780
css 目录下面的app.css ok

24:37.180 --> 24:42.300
ok 到点中间来了 对吧 好 然后接下来咱们这边来看这个input

24:42.780 --> 24:48.020
输入框 那输入框这边这边的话也很简单 这边呢 就是首先的话 你有一个这个input

24:51.900 --> 24:57.020
有一个input 有个输入框啊 输入框完了之后 人家这边会有个什么会有个button

24:57.700 --> 24:59.820
button的话是一个什么 提交

