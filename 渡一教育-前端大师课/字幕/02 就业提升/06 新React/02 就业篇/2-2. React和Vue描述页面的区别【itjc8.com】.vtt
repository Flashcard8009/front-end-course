WEBVTT

00:00.110 --> 00:03.470
ok 这节目的话 我们来看一下这道题

00:03.470 --> 00:06.990
react和view 描述页面的区别

00:06.990 --> 00:08.750
而题目是这样子的

00:08.750 --> 00:13.470
react和view 他们是如何描述UI界面的

00:13.470 --> 00:16.030
而有一些什么样的区别

00:16.030 --> 00:20.910
你可以看到在这边的话 我已经写了一个标准的答案了

00:20.910 --> 00:26.030
而react中使用的是js2来描述界面

00:26.030 --> 00:28.030
在view中的话使用的是什么呢

00:28.030 --> 00:30.030
使用的是模板来描述界面

00:30.030 --> 00:32.030
那么这个答案对不对呢

00:32.030 --> 00:34.030
这个答案肯定是对的

00:34.030 --> 00:36.030
对不对 但是这个答案的话

00:36.030 --> 00:38.030
虽然很对 但是你这边的话

00:38.030 --> 00:40.030
什么一句话就说完了

00:40.030 --> 00:42.030
对不对 我们面试的时候

00:42.030 --> 00:44.030
实际上我们希望同学们

00:44.030 --> 00:48.030
就是能够尽量能够多说一点就多说一点

00:48.030 --> 00:50.030
而不是说面试官他问一个问题

00:50.030 --> 00:52.030
他问一个问题说完之后

00:52.030 --> 00:54.030
让你只花了几秒钟

00:54.030 --> 00:56.030
也就把这个问题就回答完了

00:56.030 --> 00:58.030
那你这样子的回答你是不出彩的

00:58.030 --> 01:00.030
不能给这个面试官留下

01:00.030 --> 01:02.030
这个非常深的这个印象

01:02.030 --> 01:04.030
明白吧

01:04.030 --> 01:06.030
所以这个答案的话他虽然是对

01:06.030 --> 01:08.030
你看我这边写的是

01:08.030 --> 01:10.030
标准且浅浅的回答

01:10.030 --> 01:12.030
虽然是对的

01:12.030 --> 01:14.030
但是呢就是太短了

01:14.030 --> 01:16.030
就这么一句话就完了

01:16.030 --> 01:18.030
也无法给这个面试官留下

01:18.030 --> 01:20.030
这个很深刻的这个印象

01:20.030 --> 01:22.030
所以我们这几课的话

01:22.030 --> 01:24.030
我们就来看一下

01:24.030 --> 01:26.030
他们描述页面

01:26.030 --> 01:28.030
他们具体的一个这个区别

01:28.030 --> 01:30.030
这里的话我们还是从这个历史的

01:30.030 --> 01:32.030
这个角度去看

01:32.030 --> 01:34.030
好吧

01:34.030 --> 01:36.030
好那么我们这个前端

01:36.030 --> 01:38.030
前端领域

01:38.030 --> 01:40.030
然后接下来经过这个

01:40.030 --> 01:44.030
经过这个长期的这个发展

01:44.030 --> 01:46.030
那么目前

01:46.030 --> 01:48.030
目前有两种

01:48.030 --> 01:52.030
有两种主流的

01:52.030 --> 01:54.030
这个描述页面的

01:54.030 --> 01:56.030
应该叫做描述UI

01:56.030 --> 01:58.030
描述UI的这个方案

01:58.030 --> 02:00.030
一种是什么呢

02:00.030 --> 02:02.030
一种就是JSX

02:02.030 --> 02:04.030
另外一种是模板

02:04.030 --> 02:06.030
好那我们这边让我们分别来看一下

02:06.030 --> 02:08.030
这两种这种就是方案

02:08.030 --> 02:10.030
它的一个历史来源

02:10.030 --> 02:14.030
首先第一个是JSX的历史来源

02:14.030 --> 02:18.240
另外一个是这个模板

02:18.240 --> 02:20.240
模板的历史来源

02:20.240 --> 02:22.240
它是怎么来的

02:22.240 --> 02:24.240
有些时候的话

02:24.240 --> 02:26.240
其实你知道它背后的历史之后

02:26.240 --> 02:28.240
你就可以就是说出来的东西

02:28.240 --> 02:30.240
会更加深刻一些

02:30.240 --> 02:32.240
而不是这个浮于表面

02:32.240 --> 02:33.240
OK

02:33.240 --> 02:35.240
我们首先来看一下这个JSX

02:35.240 --> 02:37.240
JSX的话它起源于什么呢

02:37.240 --> 02:39.240
起源于这个RAG的团队

02:39.240 --> 02:42.240
他们所提供的一种内这个

02:42.240 --> 02:44.240
插Mird语法的一种

02:44.240 --> 02:46.240
也是语法堂

02:46.240 --> 02:49.240
JSX最早起源语

02:49.240 --> 02:53.550
最早起源语

02:53.550 --> 02:56.550
这个RAG团队

02:56.550 --> 02:58.550
RAG团队

02:58.550 --> 03:00.550
在什么呢

03:00.550 --> 03:02.550
在这个RAG中

03:02.550 --> 03:06.550
RAG中所提供的一种

03:06.550 --> 03:08.550
类似于

03:08.550 --> 03:11.550
类似于插Mird的这个

03:11.550 --> 03:13.550
JS语法堂

03:13.550 --> 03:14.550
你要注意

03:14.550 --> 03:16.550
它首先它是一个语法堂

03:16.550 --> 03:18.550
比如说我们这边的话

03:19.550 --> 03:21.550
比如说我这边

03:21.550 --> 03:23.550
Const一个Element

03:23.550 --> 03:25.550
等于一个

03:25.550 --> 03:29.250
比如这边HE

03:29.250 --> 03:31.250
这边是JSX

03:31.250 --> 03:32.250
好

03:32.250 --> 03:34.250
这边HE

03:34.250 --> 03:36.250
比如这边一个Hello

03:36.250 --> 03:38.250
这个看上去像一个什么

03:38.250 --> 03:40.250
看上去像一个这个HTML

03:40.250 --> 03:41.250
对不对

03:41.250 --> 03:44.750
但是它经过

03:44.750 --> 03:46.750
经过这个Bevel

03:46.750 --> 03:49.750
这个编译之后

03:49.750 --> 03:51.750
就会什么呢

03:51.750 --> 03:53.750
就会变成这个样子

03:53.750 --> 03:56.750
这边我直接拿过来

03:56.750 --> 03:57.750
这边

03:57.750 --> 03:59.750
它就会变成这个样子

03:59.750 --> 04:01.750
这个REACT

04:01.750 --> 04:03.750
17版本之前和17版本之后

04:03.750 --> 04:05.750
稍微还有一些区别

04:05.750 --> 04:06.750
17版本之前的话

04:06.750 --> 04:08.750
它变异之后就直接是

04:08.750 --> 04:10.750
REACT.CREATEELEMENT的方法

04:10.750 --> 04:12.750
17版本之后

04:12.750 --> 04:14.750
它这边是JSX runtime

04:14.750 --> 04:16.750
首先引入这个

04:16.750 --> 04:17.750
引入这个之后

04:17.750 --> 04:19.750
调这个JSX runtime的

04:19.750 --> 04:21.750
JSX方法

04:21.750 --> 04:23.750
但是你不管是前面这个

04:23.750 --> 04:24.750
还是后面这个

04:24.750 --> 04:26.750
你执行之后最终

04:26.750 --> 04:28.750
会得到一个对象

04:28.750 --> 04:34.180
无论

04:34.180 --> 04:36.180
是这个17

04:36.180 --> 04:38.180
之前

04:38.180 --> 04:41.180
还是17之后

04:41.180 --> 04:44.180
然后执行了代码

04:44.180 --> 04:47.180
执行了代码后

04:47.180 --> 04:49.180
会什么呢

04:49.180 --> 04:51.180
得到一个对象

04:51.180 --> 04:53.180
这个对象大字长什么样子呢

04:53.180 --> 04:55.180
大字长这个样子的

04:55.180 --> 04:58.940
把这个对象把它拿过来

04:58.940 --> 05:00.940
大字就是长这个样子的

05:00.940 --> 05:01.940
这个是什么呢

05:01.940 --> 05:02.940
这个实际上就是

05:02.940 --> 05:04.940
大名鼎鼎的虚拟动物

05:04.940 --> 05:05.940
我们后面的话

05:05.940 --> 05:06.940
会专门花一节课

05:06.940 --> 05:08.940
来讲这个虚拟动物

05:08.940 --> 05:10.940
我们这边暂时记一笔

05:10.940 --> 05:12.940
这个

05:12.940 --> 05:14.940
这个其实就是

05:14.940 --> 05:17.940
大名鼎鼎的虚拟动物

05:17.940 --> 05:19.940
OK

05:19.940 --> 05:21.940
然后这个req团队

05:21.940 --> 05:23.940
他们当时他们所认为

05:23.940 --> 05:25.940
Ui的本质

05:25.940 --> 05:26.940
它本质上的话

05:26.940 --> 05:28.940
实际上和这个逻辑

05:28.940 --> 05:29.940
就是和ges

05:29.940 --> 05:31.940
它是存在这个偶和部分的

05:31.940 --> 05:32.940
比如什么呢

05:32.940 --> 05:33.940
比如说你在Ui上面

05:33.940 --> 05:35.940
你比如说绑定事件

05:35.940 --> 05:36.940
对不对

05:36.940 --> 05:37.940
你本来Ui

05:37.940 --> 05:38.940
就是它是描述

05:38.940 --> 05:41.940
就是你的页面长什么样子的

05:41.940 --> 05:42.940
但是我要绑事件

05:42.940 --> 05:43.940
绑事件的话

05:43.940 --> 05:45.940
是不是就是属于这个逻辑部分

05:45.940 --> 05:46.940
对不对

05:46.940 --> 05:47.940
还有就是什么呢

05:47.940 --> 05:48.940
还有就是你数据变化后

05:48.940 --> 05:50.940
你需要通过这个ges

05:50.940 --> 05:51.940
去改变这个Ui的样式

05:51.940 --> 05:53.940
或者这个结构

05:53.940 --> 05:54.940
OK

05:54.940 --> 05:56.940
说作为这个前端工程师的话

05:56.940 --> 05:58.940
这个ges实际上

05:58.940 --> 05:59.940
用的是最多的

05:59.940 --> 06:01.940
我们这边我们记一下

06:01.940 --> 06:03.940
就是req团队

06:03.940 --> 06:06.940
req团队

06:06.940 --> 06:09.940
认为Ui

06:09.940 --> 06:11.940
本质上

06:11.940 --> 06:13.940
本质上和什么呢

06:13.940 --> 06:15.940
和逻辑

06:15.940 --> 06:16.940
是有什么呢

06:16.940 --> 06:19.940
是有偶和部分的

06:19.940 --> 06:21.940
偶和部分的

06:21.940 --> 06:22.940
比如说我们刚才所说的

06:22.940 --> 06:25.940
在这个Ui上面

06:25.940 --> 06:26.940
绑定事件

06:26.940 --> 06:27.940
对吧

06:27.940 --> 06:28.940
还有就是什么呢

06:28.940 --> 06:31.940
还有就是数据变化后

06:31.940 --> 06:33.940
通过这个ges

06:33.940 --> 06:38.940
去改变这个Ui的这个样式

06:38.940 --> 06:40.940
或者这个结构

06:40.940 --> 06:41.940
OK

06:41.940 --> 06:42.940
说当时的话

06:42.940 --> 06:44.940
这个req团队他们就思考

06:44.940 --> 06:47.940
那么作为一个前端工程师

06:47.940 --> 06:51.940
作为一个前端工程师

06:51.940 --> 06:54.940
ges是用的最多的

06:54.940 --> 06:57.890
对吧

06:57.890 --> 06:59.890
ges是用的最多的

06:59.890 --> 07:00.890
那么我们能不能就是

07:00.890 --> 07:02.890
屏蔽HTML

07:02.890 --> 07:04.890
我们就专注于使用ges

07:04.890 --> 07:06.890
来描述Ui呢

07:06.890 --> 07:08.890
因为你如果使用ges

07:08.890 --> 07:09.890
来描述Ui的话

07:09.890 --> 07:12.890
你可以让Ui和逻辑的配合

07:12.890 --> 07:14.890
更加的密切

07:15.890 --> 07:17.890
所以最终req团队

07:17.890 --> 07:20.890
他们设计出来的解决方案

07:20.890 --> 07:24.890
就是内插违尔形式的ges

07:24.890 --> 07:26.890
OK

07:26.890 --> 07:27.890
作为一个前端工程师

07:27.890 --> 07:29.890
ges用的最多

07:29.890 --> 07:32.890
所以req团队

07:32.890 --> 07:33.890
他们思考什么呢

07:33.890 --> 07:38.890
思考就是屏蔽HTML

07:38.890 --> 07:41.890
整个都用什么呢

07:41.890 --> 07:46.890
都用ges来描述Ui

07:46.890 --> 07:48.890
因为这样子做的话

07:48.890 --> 07:51.890
因为这样做的话

07:51.890 --> 07:52.890
可以什么呢

07:52.890 --> 07:58.890
可以让Ui和逻辑配合的

07:58.890 --> 07:59.890
更加紧密

07:59.890 --> 08:03.890
配合的更加紧密

08:03.890 --> 08:04.890
OK

08:04.890 --> 08:05.890
因为Ui其实也是ges嘛

08:05.890 --> 08:06.890
对不对

08:06.890 --> 08:07.890
你用ges来描述Ui

08:07.890 --> 08:09.890
所以Ui也是ges

08:09.890 --> 08:10.890
逻辑这边是不是也是ges

08:10.890 --> 08:11.890
对不对

08:11.890 --> 08:13.890
所以整个其实都是ges

08:13.890 --> 08:15.890
所以配合的更加紧密

08:15.890 --> 08:17.890
所以最终

08:17.890 --> 08:20.890
所以最终设计出来了

08:20.890 --> 08:28.890
内插违尔形式的gesUi法堂

08:28.890 --> 08:30.890
就是像这种

08:30.890 --> 08:31.890
就是像这种

08:31.890 --> 08:33.890
为什么不是就是

08:33.890 --> 08:34.890
通过这种方式来写呢

08:34.890 --> 08:36.890
这种方式来写的话

08:36.890 --> 08:38.890
首先它本身是ges

08:38.890 --> 08:39.890
对吧

08:39.890 --> 08:41.890
这种方式你写出来的话

08:41.890 --> 08:42.890
会非常的累

08:42.890 --> 08:43.890
对不对

08:43.890 --> 08:44.890
咱们前段工程是的话

08:44.890 --> 08:46.890
实际上更加熟悉这个html

08:46.890 --> 08:47.890
说这边的话

08:47.890 --> 08:48.890
我提供什么呢

08:48.890 --> 08:50.890
提供这种方式

08:50.890 --> 08:51.890
那你写的话

08:51.890 --> 08:52.890
还是按照以前的这种方式来写

08:52.890 --> 08:53.890
这种方式

08:53.890 --> 08:55.890
到时候我会进行编译

08:55.890 --> 08:56.890
我编译成什么呢

08:56.890 --> 08:58.890
编译成这个ges

08:58.890 --> 08:59.890
OK

08:59.890 --> 09:01.890
设计出来这个gesUi法堂

09:01.890 --> 09:03.890
OK

09:03.890 --> 09:04.890
好

09:04.890 --> 09:05.890
然后由于什么呢

09:05.890 --> 09:10.610
由于

09:10.610 --> 09:11.610
由于

09:11.610 --> 09:13.610
由于这个ges

09:13.610 --> 09:15.610
是什么

09:15.610 --> 09:18.610
是这个ges的Ui法堂

09:18.610 --> 09:21.920
Ui法堂

09:21.920 --> 09:23.920
也就是说本字

09:23.920 --> 09:25.920
本字上就是什么

09:25.920 --> 09:27.920
就是ges

09:27.920 --> 09:28.920
对不对

09:28.920 --> 09:30.920
因此

09:30.920 --> 09:32.920
因此可以什么呢

09:32.920 --> 09:35.920
因此可以非常灵活的

09:35.920 --> 09:36.920
和什么

09:36.920 --> 09:38.920
和gesUi法

09:38.920 --> 09:40.920
这个组合使用

09:41.920 --> 09:43.920
因为两个都是ges

09:43.920 --> 09:44.920
对不对

09:44.920 --> 09:45.920
两个都是ges

09:45.920 --> 09:46.920
那自然而然

09:46.920 --> 09:47.920
他们就可以非常灵活的这个组合

09:47.920 --> 09:48.920
进行一个使用

09:48.920 --> 09:49.920
比如说什么呢

09:49.920 --> 09:50.920
不要举个例子

09:50.920 --> 09:51.920
不要

09:51.920 --> 09:54.920
你可以在这个义父中

09:54.920 --> 09:56.920
义父或者这个for

09:56.920 --> 09:58.920
当中

09:58.920 --> 10:00.920
使用这个ges叉

10:00.920 --> 10:01.920
有没有问题

10:01.920 --> 10:02.920
没问题

10:02.920 --> 10:03.920
因为本身就是ges

10:03.920 --> 10:04.920
对不对

10:04.920 --> 10:05.920
可以什么呢

10:05.920 --> 10:07.920
可以将这个ges叉

10:07.920 --> 10:09.920
复制给变量

10:09.920 --> 10:10.920
可不可以

10:10.920 --> 10:11.920
可以吗

10:11.920 --> 10:12.920
ges里面可以复制吗

10:12.920 --> 10:13.920
对不对

10:13.920 --> 10:15.920
可以将这个ges叉

10:15.920 --> 10:16.920
当做什么呢

10:16.920 --> 10:18.920
当做这个参数

10:18.920 --> 10:20.920
来传递

10:20.920 --> 10:21.920
来传递

10:21.920 --> 10:22.920
当然

10:22.920 --> 10:25.920
也可以在一个

10:25.920 --> 10:28.920
函数中返回

10:28.920 --> 10:30.920
一段ges叉

10:30.920 --> 10:32.920
这些就都可以做到了

10:32.920 --> 10:33.920
对不对

10:33.920 --> 10:34.920
都可以做到

10:34.920 --> 10:35.920
因为你本质就是在用ges

10:35.920 --> 10:36.920
来描述这个Ui

10:36.920 --> 10:38.920
你本质就是ges

10:38.920 --> 10:39.920
那我在ges里面

10:39.920 --> 10:41.920
做这些事情是不就非常正常了

10:41.920 --> 10:42.920
对不对

10:42.920 --> 10:43.920
比如说这个代码

10:43.920 --> 10:45.920
我们这边举一段代码

10:45.920 --> 10:47.920
这边function

10:47.920 --> 10:49.920
app

10:49.920 --> 10:50.920
我这边接收一个

10:50.920 --> 10:52.920
不用这边解构

10:52.920 --> 10:54.920
接收一个isloading

10:54.920 --> 10:55.920
接收这么一个参数

10:55.920 --> 10:57.920
我这边做一个判断

10:57.920 --> 11:00.920
如果isloading

11:00.920 --> 11:01.920
那我这边干嘛呢

11:01.920 --> 11:02.920
我这边上return

11:02.920 --> 11:04.920
一段ges叉

11:04.920 --> 11:06.920
he

11:06.920 --> 11:08.920
把这个改成ges叉

11:08.920 --> 11:12.940
好这边比较loading

11:12.940 --> 11:14.940
对吧

11:14.940 --> 11:16.940
如果没有进上面的衣服

11:16.940 --> 11:17.940
我这边就return

11:17.940 --> 11:19.940
比如这边仍然是he

11:19.940 --> 11:23.310
好这边那就是一个

11:23.310 --> 11:25.310
Hello world

11:25.310 --> 11:27.310
Hello world

11:27.310 --> 11:28.310
可不可以

11:28.310 --> 11:29.310
可以

11:29.310 --> 11:30.310
对不对

11:30.310 --> 11:31.310
完全没问题

11:31.310 --> 11:32.310
并且我们之前

11:32.310 --> 11:34.310
在写react的时候

11:34.310 --> 11:35.310
我们是不是经常有这样子的

11:35.310 --> 11:36.310
这种写法

11:36.310 --> 11:37.310
对不对完全没问题

11:37.310 --> 11:38.310
为什么

11:38.310 --> 11:39.310
因为它本身是一个ges

11:39.310 --> 11:40.310
你在ges里面

11:40.310 --> 11:41.310
做这种事情

11:41.310 --> 11:42.310
是不是就非常自然了

11:42.310 --> 11:43.310
对不对

11:43.310 --> 11:44.310
OK

11:44.310 --> 11:45.310
说这种灵活性的话

11:45.310 --> 11:46.310
就使得什么呢

11:46.310 --> 11:47.310
使得这个ges叉

11:47.310 --> 11:49.310
它可以轻松的描述

11:49.310 --> 11:51.310
复杂的这个UI

11:51.310 --> 11:52.310
你如果就是

11:52.310 --> 11:53.310
与这个逻辑配合

11:53.310 --> 11:55.310
你是不是就可以描述什么

11:55.310 --> 11:57.310
复杂的这个UI变化

11:57.310 --> 11:58.310
对不对

11:58.310 --> 12:00.310
这种灵活性

12:00.310 --> 12:03.310
这种灵活性

12:03.310 --> 12:06.310
就使得

12:06.310 --> 12:09.310
使得这个ges叉

12:09.310 --> 12:10.310
ges叉

12:10.310 --> 12:11.310
可以什么呢

12:11.310 --> 12:14.310
可以轻松的描述

12:14.310 --> 12:17.310
复杂的这个UI

12:17.310 --> 12:19.310
然后如果和什么呢

12:19.310 --> 12:21.310
和这个逻辑配合

12:21.310 --> 12:22.310
还可以什么呢

12:22.310 --> 12:25.310
还可以描述出

12:25.310 --> 12:30.310
这个复杂UI的这个变化

12:30.310 --> 12:31.310
OK

12:31.310 --> 12:33.310
说在早期的时候

12:33.310 --> 12:34.310
就很多这种用户

12:34.310 --> 12:36.310
他就使用这个RECT

12:36.310 --> 12:38.310
来实现各种各样

12:38.310 --> 12:40.310
这个复杂的这个基础库

12:40.310 --> 12:41.310
好慢慢慢慢的话

12:41.310 --> 12:43.310
他的这个社区的这个生态

12:43.310 --> 12:45.310
也就慢慢慢慢越来越丰富

12:45.310 --> 12:47.310
那社区的这个生态

12:47.310 --> 12:48.310
越来越丰富

12:48.310 --> 12:49.310
慢慢慢慢就有

12:49.310 --> 12:51.310
越来越多的这个RECT开发者

12:51.310 --> 12:54.310
来参与这个社区的这个建设

12:54.310 --> 12:55.310
最终的话

12:55.310 --> 12:56.310
就是源源不断的

12:56.310 --> 12:58.310
形成了一个正反馈

12:58.310 --> 12:59.310
明白没有

12:59.310 --> 13:00.310
说最终的话

13:00.310 --> 13:01.310
促使这个RECT

13:01.310 --> 13:03.310
长期占领

13:03.310 --> 13:04.310
各大工程师

13:04.310 --> 13:06.310
最愿意使用的

13:06.310 --> 13:08.310
这个前端框架绑手

13:08.310 --> 13:09.310
这个的话

13:09.310 --> 13:11.310
你可能在国内看不出来

13:11.310 --> 13:13.310
但实际上在国外

13:13.310 --> 13:14.310
国外的话

13:14.310 --> 13:15.310
实际上用RECT的比例

13:15.310 --> 13:17.310
其实是要高于这个view的

13:17.310 --> 13:18.310
国内的话

13:18.310 --> 13:20.310
可能用view的要多一些

13:20.310 --> 13:21.310
因为毕竟这个view是

13:21.310 --> 13:22.310
咱们国人开发的

13:22.310 --> 13:23.310
对不对

13:23.310 --> 13:24.310
还有view的话

13:24.310 --> 13:25.310
毕竟也要简单一些

13:25.310 --> 13:26.310
相比这个RECT

13:26.310 --> 13:27.310
但是在国外

13:27.310 --> 13:28.310
国外的话

13:28.310 --> 13:29.310
其实更多的

13:29.310 --> 13:30.310
这个开发人员

13:30.310 --> 13:31.310
实际上

13:31.310 --> 13:33.310
更多的是愿意使用这个RECT

13:33.310 --> 13:34.310
就是这个原因

13:34.310 --> 13:35.310
OK

13:35.310 --> 13:36.310
它慢慢随着你这个

13:36.310 --> 13:37.310
社区的生态

13:37.310 --> 13:38.310
越来越丰富

13:38.310 --> 13:40.310
那慢慢就会有更多的人

13:40.310 --> 13:42.310
来加入这个社区

13:42.310 --> 13:43.310
让慢慢

13:43.310 --> 13:45.310
大家都在加入你这个社区

13:45.310 --> 13:46.310
来建设这个生态

13:46.310 --> 13:47.310
它就形成了一个

13:47.310 --> 13:49.310
这个正反馈

13:49.310 --> 13:51.310
这个对于一个

13:51.310 --> 13:53.310
前端框架的选型

13:53.310 --> 13:55.310
我们这边说一个题外话

13:55.310 --> 13:56.310
就是我们这边

13:56.310 --> 13:58.310
再做一个前端框架选型的时候

13:58.310 --> 14:00.310
其实有一个非常重要的

14:00.310 --> 14:01.310
考量点

14:01.310 --> 14:02.310
就是什么

14:02.310 --> 14:04.310
就是你的这个社区生态

14:04.310 --> 14:06.310
是否繁荣

14:06.310 --> 14:07.310
你比如说你日常

14:07.310 --> 14:09.310
你的这个一个业务开发

14:09.310 --> 14:11.310
你能否在社区里面

14:11.310 --> 14:14.310
找到这个成熟的这个解决方案

14:14.310 --> 14:15.310
对不对

14:15.310 --> 14:16.310
这个是很重要的

14:16.310 --> 14:18.310
不是说你这个技术越好

14:18.310 --> 14:20.310
越新我就采用你这个技术

14:20.310 --> 14:22.310
而是要看整个这个生态

14:22.310 --> 14:24.310
因为你这个项目

14:24.310 --> 14:25.310
一旦你确定了这个

14:25.310 --> 14:27.310
就是技术的选型之后

14:27.310 --> 14:29.310
你中途想要再去切换

14:29.310 --> 14:30.310
这个技术战

14:30.310 --> 14:31.310
实际上你要付出的这个

14:31.310 --> 14:34.310
成本的这个代价是比较高的

14:34.310 --> 14:35.310
没有吧

14:35.310 --> 14:37.310
比较高的

14:37.310 --> 14:39.310
我们回到这边

14:39.310 --> 14:40.310
这种灵活性

14:40.310 --> 14:41.310
他这边的话可以

14:41.310 --> 14:43.310
描述复杂的这个UI变化

14:43.310 --> 14:44.310
对吧

14:44.310 --> 14:46.310
然后死的

14:46.310 --> 14:48.310
死的这个react

14:48.310 --> 14:50.310
社区

14:50.310 --> 14:52.310
的这个早期用户

14:52.310 --> 14:55.310
的早期用户

14:55.310 --> 14:57.310
可以快速什么

14:57.310 --> 14:59.310
快速实现各种

14:59.310 --> 15:01.310
复杂的

15:01.310 --> 15:03.310
复杂的这个技术库

15:03.310 --> 15:05.310
然后丰富

15:05.310 --> 15:08.310
丰富社区生态

15:08.310 --> 15:10.310
而又犹豫什么呢

15:10.310 --> 15:11.310
又犹豫

15:11.310 --> 15:13.310
又犹豫

15:13.310 --> 15:19.880
又犹豫生态的这个丰富

15:19.880 --> 15:22.880
生态的丰富

15:22.880 --> 15:24.880
慢慢吸引了

15:24.880 --> 15:26.880
更多的人

15:26.880 --> 15:27.880
更多的人

15:27.880 --> 15:29.880
来这个

15:29.880 --> 15:33.880
来参与这个社区的建设

15:33.880 --> 15:35.880
从而什么呢

15:35.880 --> 15:38.880
从而源源不断的形成了

15:38.880 --> 15:40.880
一个

15:40.880 --> 15:43.880
形成了一个

15:43.880 --> 15:47.380
正反馈对吧

15:47.380 --> 15:49.380
最终的话你这个react

15:49.380 --> 15:51.380
他长期占领这个就是

15:51.380 --> 15:53.380
最愿意使用的前端框架的这个

15:53.380 --> 15:54.380
绑手

15:54.380 --> 15:55.380
OK就这么来的

15:55.380 --> 15:57.380
这是关于这个接触

15:57.380 --> 15:59.380
好那接下来看完接触之后

15:59.380 --> 16:01.380
然后接下来看一下这个模板

16:01.380 --> 16:03.380
看一下这个模板

16:03.380 --> 16:05.380
他的这个历史来源

16:05.380 --> 16:07.380
那相较于这个接触

16:07.380 --> 16:09.380
接触的话他基本就是

16:09.380 --> 16:11.380
可以看出就是为前端而生

16:11.380 --> 16:12.380
对不对

16:12.380 --> 16:13.380
那这个模板

16:13.380 --> 16:15.380
模板的历史的话就要从

16:15.380 --> 16:17.380
后端开始说起了

16:17.380 --> 16:19.380
模板的历史

16:19.380 --> 16:22.380
就要从后端说起了

16:22.380 --> 16:28.260
就要从后端说起

16:29.260 --> 16:31.260
在早期就是前后端

16:31.260 --> 16:33.260
没有分离的这个时期

16:33.260 --> 16:35.260
有一个非常流行的方案就是什么呢

16:35.260 --> 16:38.260
就是使用这个模板引擎

16:38.260 --> 16:39.260
那个时候的话咱们的这个

16:39.260 --> 16:40.260
微博开发

16:40.260 --> 16:41.260
两个端

16:41.260 --> 16:42.260
一个是客户端

16:42.260 --> 16:43.260
一个是服务器端

16:43.260 --> 16:44.260
那那个时候服务器端

16:44.260 --> 16:46.260
基本上都需要使用什么呢

16:46.260 --> 16:48.260
都需要使用模板引擎

16:48.260 --> 16:50.260
使用模板引擎之后

16:50.260 --> 16:51.260
然后接下那个模板引擎

16:51.260 --> 16:53.260
回头会把那个数据

16:53.260 --> 16:55.260
塞到那个模板里面

16:55.260 --> 16:56.260
然后回头的话

16:56.260 --> 16:57.260
承承这个页面

16:57.260 --> 16:59.260
返回给客户端

16:59.260 --> 17:02.260
这个的话是早期的一种开发模式

17:02.260 --> 17:04.260
在早期

17:04.260 --> 17:07.260
在早期这个前后端

17:07.260 --> 17:10.630
为分离的时候

17:10.630 --> 17:13.630
为分离的时候

17:13.630 --> 17:15.630
最流行的方案

17:15.630 --> 17:17.630
最流行的方案

17:17.630 --> 17:19.630
就是使用什么呢

17:19.630 --> 17:21.630
使用模板引擎

17:22.630 --> 17:24.630
模板引擎

17:24.630 --> 17:26.630
模板引擎

17:26.630 --> 17:28.630
可以看作什么

17:28.630 --> 17:30.630
看作是

17:31.630 --> 17:33.630
在这个正常

17:33.630 --> 17:35.630
正常的这个html

17:35.630 --> 17:37.630
上面进行什么呢

17:37.630 --> 17:38.630
进行挖坑

17:38.630 --> 17:40.630
所以那个时候我们称之为挖坑

17:40.630 --> 17:42.630
但不同的这个模板引擎

17:42.630 --> 17:43.630
与法不一样

17:43.630 --> 17:45.630
不同的模板引擎

17:45.630 --> 17:49.260
这个与法不一样

17:50.260 --> 17:51.260
那挖了坑之后

17:51.260 --> 17:52.260
然后接下来干嘛呢

17:52.260 --> 17:54.260
接下来的话这个服务器端

17:54.260 --> 17:55.260
挖了坑之后

17:56.260 --> 17:58.260
然后服务器端

17:58.260 --> 18:00.260
会将什么呢

18:00.260 --> 18:02.260
会将这个数据

18:02.260 --> 18:04.260
填充到什么呢

18:04.260 --> 18:06.260
填充到挖了坑的模板里面

18:08.260 --> 18:10.260
挖了坑的模板里面

18:10.260 --> 18:12.260
然后生成什么呢

18:12.260 --> 18:14.260
生成对应的html

18:14.260 --> 18:16.260
页面

18:16.260 --> 18:18.260
返回给客户端

18:20.260 --> 18:22.260
这个的话实际上就是

18:22.260 --> 18:24.260
最早期的一个开发方式

18:24.260 --> 18:26.260
好这边有个图

18:26.260 --> 18:27.260
我把这个图拉过来

18:27.260 --> 18:31.280
稍等这边卡住了

18:32.280 --> 18:34.280
好我把这个图拉过来

18:34.280 --> 18:40.280
稍等稍等

18:40.280 --> 18:41.280
这边

18:41.280 --> 18:42.280
这个图

18:42.280 --> 18:44.280
我把它拿过来

18:44.280 --> 18:46.280
ok 这里

18:46.280 --> 18:47.280
看没有

18:47.280 --> 18:48.280
这边客户端

18:48.280 --> 18:50.280
客户端然后接下来后端

18:50.280 --> 18:51.280
后端当时流行的

18:51.280 --> 18:53.280
这边gsp php asp

18:53.280 --> 18:55.280
这边从这个数据库里面

18:55.280 --> 18:56.280
拿这个数据

18:56.280 --> 18:58.280
接下来填充到里面

18:58.280 --> 19:00.280
填充到里面之后

19:00.280 --> 19:02.280
然后接下来生成对应的html页面

19:02.280 --> 19:04.280
返回给什么呢

19:04.280 --> 19:06.280
返回给客户端

19:06.280 --> 19:08.280
说那个时候

19:08.280 --> 19:10.280
那个时候咱们前端

19:10.280 --> 19:12.280
那个时候咱们前端人员

19:12.280 --> 19:14.280
其实主要就是负责什么呢

19:14.280 --> 19:16.280
主要就是负责html和css的书写

19:16.280 --> 19:18.280
gss的话实际上是写一些什么呢

19:18.280 --> 19:20.280
写一些简单的动画效果

19:20.280 --> 19:22.280
什么轮波图之类的

19:22.280 --> 19:24.280
写一些这些

19:24.280 --> 19:26.280
那写好的之后

19:26.280 --> 19:28.280
那接下来你需要干嘛呢

19:28.280 --> 19:30.280
你需要把你的这个

19:30.280 --> 19:32.280
就是页面改成什么呢

19:32.280 --> 19:34.280
改成这个对应的这个

19:34.280 --> 19:36.280
模板引擎对应的这个语法

19:36.280 --> 19:38.280
所以在那个时候

19:38.280 --> 19:40.280
那个

19:40.280 --> 19:42.280
那个时期

19:42.280 --> 19:44.280
前端人员的工作

19:44.280 --> 19:46.280
前端人员的工作

19:46.280 --> 19:48.280
主要是什么呢

19:48.280 --> 19:50.280
主要是html css和什么呢

19:50.280 --> 19:52.280
和这个一些

19:52.280 --> 19:54.280
简单的这个gss特效

19:54.280 --> 19:56.280
这个的话就是指什么呢

19:56.280 --> 19:58.280
指的就是比如说轮波图啊

19:58.280 --> 20:00.280
然后百叶窗啊

20:00.280 --> 20:02.280
就这些

20:02.280 --> 20:04.280
主要就是写这些效果

20:04.280 --> 20:06.280
那你写好的这个html你是不能直接用的

20:06.280 --> 20:08.280
写好的

20:08.280 --> 20:10.280
html是不能直接用的

20:10.280 --> 20:13.780
你需要干嘛呢

20:13.780 --> 20:15.780
你需要去问后端用的是哪个模板

20:15.780 --> 20:17.780
需要和后端

20:17.780 --> 20:19.780
确定

20:19.780 --> 20:21.780
确定

20:21.780 --> 20:25.740
用的

20:25.740 --> 20:27.740
用的是哪一个

20:27.740 --> 20:29.740
模板引擎

20:29.740 --> 20:31.740
然后接下来

20:31.740 --> 20:33.740
将自己

20:33.740 --> 20:35.740
写好的这个html

20:35.740 --> 20:37.740
修改为什么呢

20:37.740 --> 20:39.740
修改为对应

20:39.740 --> 20:41.740
模板引擎的这个

20:41.740 --> 20:43.740
语法

20:43.740 --> 20:45.740
就将你自己写好的这个html

20:45.740 --> 20:47.740
就应该说按照

20:47.740 --> 20:49.740
按照

20:49.740 --> 20:51.740
按照对应的模板引擎的语法

20:51.740 --> 20:53.740
进行这个

20:53.740 --> 20:55.740
挖坑

20:55.740 --> 20:57.740
OK

20:57.740 --> 20:59.740
这边有个图

20:59.740 --> 21:03.110
挖着图拉过来

21:03.110 --> 21:05.110
你这边开发的html

21:05.110 --> 21:07.110
这边不能直接用

21:07.110 --> 21:09.110
接下来你需要根据什么呢

21:09.110 --> 21:11.110
需要根据这个模板引擎的这个语法

21:11.110 --> 21:13.110
进行挖坑

21:13.110 --> 21:15.110
挖坑之后加交给后端

21:15.110 --> 21:17.110
后端就直接用

21:17.110 --> 21:19.110
用了之后把这个数据填充到你的模板里面

21:19.110 --> 21:21.110
最终生成这个对应的一面

21:21.110 --> 21:23.110
但那个时候其实有一点

21:23.110 --> 21:25.110
比较苦的是什么呢

21:25.110 --> 21:27.110
就是你不同的后台技术的话

21:27.110 --> 21:29.110
它有不同的这个对应的这个

21:29.110 --> 21:31.110
模板引擎

21:31.110 --> 21:33.110
不同的这个后端技术

21:33.110 --> 21:35.110
你后端技术有很多嘛

21:35.110 --> 21:37.110
对吧有java

21:37.110 --> 21:39.110
有php

21:39.110 --> 21:41.110
有这个asp对不对

21:41.110 --> 21:43.110
不同的这个后端技术

21:43.110 --> 21:45.110
对应了什么呢

21:45.110 --> 21:47.110
对应的有这个不同的

21:47.110 --> 21:49.110
模板引擎

21:49.110 --> 21:51.110
甚至什么呢甚至

21:51.110 --> 21:53.110
后端技术

21:53.110 --> 21:55.110
也会什么呢

21:55.110 --> 21:57.110
也会对应

21:57.110 --> 21:59.110
很多种

21:59.110 --> 22:01.110
很多种

22:01.110 --> 22:03.110
模板引擎

22:03.110 --> 22:05.110
比如说我这边我这边

22:05.110 --> 22:07.110
我直接拿过来

22:07.110 --> 22:09.110
这边有个列表

22:09.110 --> 22:12.940
例如

22:12.940 --> 22:14.940
比如你看这里

22:14.940 --> 22:16.940
比如像java

22:16.940 --> 22:18.940
java的话你看这边对应的模板引擎

22:18.940 --> 22:20.940
我这边只是列举了一部分php就更多了

22:20.940 --> 22:22.940
php就更多了

22:22.940 --> 22:24.940
包括python

22:24.940 --> 22:26.940
包括漏的js也有

22:26.940 --> 22:28.940
漏的js最早期出来的时候

22:28.940 --> 22:30.940
它是作为一个服务期段

22:30.940 --> 22:32.940
就是打算用什么呢

22:32.940 --> 22:34.940
用js来开发这个服务期段的

22:34.940 --> 22:36.940
说最早期这个漏的走的这个路线

22:36.940 --> 22:38.940
就是什么呢就是你java有那些东西

22:38.940 --> 22:40.940
漏的的话他也有那些东西

22:40.940 --> 22:42.940
比如你java有这些对应的这个模板引擎对吧

22:42.940 --> 22:44.940
php有对应的这些模板引擎

22:44.940 --> 22:46.940
所以漏的的话他也有

22:46.940 --> 22:48.940
也有比如什么jade

22:48.940 --> 22:50.940
这些模板引擎

22:50.940 --> 22:52.940
我们这边我们可以看一下

22:52.940 --> 22:54.940
可以看一下就是几个模板引擎的代码片段

22:54.940 --> 22:56.940
大家可以感受一下

22:56.940 --> 22:58.940
这边我就直接拿过来了

22:58.940 --> 23:00.940
我就直接从这个笔记里面拿过来了

23:00.940 --> 23:04.890
下面

23:04.890 --> 23:06.890
下面是

23:06.890 --> 23:08.890
这边直接沾过来吧

23:08.890 --> 23:10.890
这里这边列举

23:10.890 --> 23:12.890
几个模板引擎的代码片段

23:12.890 --> 23:14.890
你看这个的话是这个

23:14.890 --> 23:16.890
这个模板引擎

23:16.890 --> 23:18.890
你看他在这个模板里面可以使用一些什么

23:18.890 --> 23:20.890
可以使用一些jade的语法

23:20.890 --> 23:22.890
对不对

23:22.890 --> 23:24.890
这个的话是另外一个

23:24.890 --> 23:26.890
一个叫做blender的模板引擎

23:26.890 --> 23:28.890
包括这边

23:28.890 --> 23:30.890
是ejs的模板引擎

23:30.890 --> 23:32.890
你可以看到就是

23:32.890 --> 23:34.890
这个模板引擎里面的这种语法

23:34.890 --> 23:36.890
和view里面的这个模板

23:36.890 --> 23:38.890
就非常相似

23:38.890 --> 23:40.890
对不对

23:40.890 --> 23:42.890
这些模板引擎

23:42.890 --> 23:44.890
对应的这个模板语法

23:44.890 --> 23:46.890
就什么呢

23:46.890 --> 23:48.890
就和view

23:48.890 --> 23:50.890
里面的这个模板

23:50.890 --> 23:52.890
非常的

23:52.890 --> 23:54.890
相似

23:54.890 --> 23:56.890
对不对

23:56.890 --> 23:58.890
说那个时候的这个前端开发人员

23:58.890 --> 24:00.890
有一个任务就是什么呢

24:00.890 --> 24:02.890
有一个任务就是要学习这个

24:02.890 --> 24:04.890
不同的语言所对应的这个模板引擎的语法

24:04.890 --> 24:06.890
这个本身其实是该后端做的

24:06.890 --> 24:08.890
咱们前端的话

24:08.890 --> 24:10.890
其实那个时候

24:10.890 --> 24:12.890
那个时候的前端其实本身就只需要做

24:12.890 --> 24:14.890
html css

24:14.890 --> 24:16.890
只要写一些特效就可以了

24:16.890 --> 24:18.890
这个它本身是属于这个后端的东西

24:18.890 --> 24:20.890
该后端写的

24:20.890 --> 24:22.890
但那个时候后端就会觉得这个也没什么技术难度

24:22.890 --> 24:24.890
就会扔给这个前端

24:24.890 --> 24:26.890
让前端来挖坑

24:26.890 --> 24:28.890
所以那个时候就会造成一个局面

24:28.890 --> 24:30.890
就是前端的话你也需要什么呢

24:30.890 --> 24:32.890
也需要就是需要学习

24:32.890 --> 24:34.890
就是不同语言对应了这个模板引擎的这个语法

24:34.890 --> 24:36.890
非常烦

24:36.890 --> 24:38.890
你换一家公司

24:38.890 --> 24:40.890
比如上一家公司用的是java

24:40.890 --> 24:42.890
换一家公司用的是PHP了

24:42.890 --> 24:44.890
他这个语法是什么

24:44.890 --> 24:46.890
或者比如说上一家公司是PHP

24:46.890 --> 24:48.890
这家公司也是PHP

24:48.890 --> 24:50.890
但是他们用的模板引擎不一样

24:50.890 --> 24:52.890
你也得需要去看一下

24:52.890 --> 24:54.890
虽然说不难对吧

24:54.890 --> 24:56.890
你这边你看一下这个几个模板引擎的这个语法

24:56.890 --> 24:58.890
虽然说不难

24:58.890 --> 25:00.890
但是你始终的话你需要去看一下

25:00.890 --> 25:02.890
对需要看一下有些什么样的这个不同点

25:02.890 --> 25:04.890
OK

25:04.890 --> 25:06.890
但现在的话这种开发模式已经就是

25:06.890 --> 25:08.890
就已经在没有在用这个模板

25:08.890 --> 25:10.890
这个模板引擎了

25:10.890 --> 25:12.890
随着这个前后端

25:12.890 --> 25:14.890
分离

25:14.890 --> 25:16.890
开发的这个流行

25:16.890 --> 25:18.890
已经什么了

25:18.890 --> 25:20.890
已经没有在用

25:20.890 --> 25:22.890
在用这个模板引擎的模式了

25:22.890 --> 25:24.890
模板引擎的

25:24.890 --> 25:26.890
模式了

25:26.890 --> 25:28.890
后端只需要什么

25:28.890 --> 25:30.890
后端开发人员

25:30.890 --> 25:32.890
只需要

25:32.890 --> 25:34.890
这个书写

25:34.890 --> 25:36.890
书写

25:36.890 --> 25:38.890
数据

25:38.890 --> 25:40.890
即可

25:40.890 --> 25:42.890
对不对

25:42.890 --> 25:44.890
但是如果你让

25:44.890 --> 25:46.890
但是如果让一个这个

25:46.890 --> 25:48.890
后端人员

25:48.890 --> 25:50.890
后端人员

25:50.890 --> 25:52.890
来开发什么呢

25:52.890 --> 25:56.330
来开发这个前端的代码

25:56.330 --> 25:58.330
前端的代码

25:58.330 --> 26:00.330
那么这个模板语法

26:00.330 --> 26:02.330
view的这个模板语法

26:02.330 --> 26:04.330
很明显

26:04.330 --> 26:06.330
很明显

26:06.330 --> 26:08.330
很明显

26:08.330 --> 26:10.330
对于

26:10.330 --> 26:12.330
这个后端

26:12.330 --> 26:14.330
开发人员来讲

26:14.330 --> 26:16.330
人员来讲

26:16.330 --> 26:18.330
要什么呢 要更加清切一些

26:18.330 --> 26:20.330
对吧 毕竟它是模板语法嘛

26:20.330 --> 26:22.330
更加

26:22.330 --> 26:24.330
清切一些

26:24.330 --> 26:26.330
ok

26:26.330 --> 26:28.330
最后我们做一个这个总结

26:28.330 --> 26:30.330
最后

26:30.330 --> 26:32.330
我们做一个总结

26:32.330 --> 26:34.330
就虽然

26:34.330 --> 26:36.330
现在这个前端

26:36.330 --> 26:38.330
存在两种方式

26:38.330 --> 26:40.330
存在两种

26:40.330 --> 26:42.330
方式

26:42.330 --> 26:44.330
一种是结式和什么呢

26:44.330 --> 26:46.330
和这种模板

26:46.330 --> 26:48.330
和模板的这种形式

26:48.330 --> 26:50.330
但是两者的这个

26:50.330 --> 26:52.330
出发点是不同的

26:52.330 --> 26:54.330
这两种形式都可以

26:54.330 --> 26:56.330
都可以描述UI

26:56.330 --> 26:58.330
但是出发点

26:58.330 --> 27:00.330
是不同的

27:00.330 --> 27:02.330
ok

27:02.330 --> 27:04.330
模板语法它的出发点是什么

27:04.330 --> 27:06.330
模板语法

27:06.330 --> 27:08.330
模板语法的这个出发点

27:08.330 --> 27:10.330
它的出发点是什么呢

27:10.330 --> 27:12.330
既然你前端框架使用HTML来描述UI

27:12.330 --> 27:14.330
那么我们就

27:14.330 --> 27:16.330
扩展HTML语法

27:16.330 --> 27:18.330
它这边实际上就是什么

27:18.330 --> 27:20.330
实际上就是针对HTML语法的这个扩展

27:20.330 --> 27:22.330
对不对

27:22.330 --> 27:24.330
让HTML里面可以去描述什么呢

27:24.330 --> 27:26.330
描述一部分逻辑

27:26.330 --> 27:28.330
模板语法的出发点是

27:28.330 --> 27:30.330
既然

27:30.330 --> 27:32.330
前端框架

27:32.330 --> 27:35.960
使用HTML来描述UI

27:35.960 --> 27:37.960
那么

27:37.960 --> 27:39.960
我们就干嘛

27:39.960 --> 27:41.960
我们就扩展HTML

27:41.960 --> 27:43.960
对不对

27:43.960 --> 27:45.960
让HTML中

27:45.960 --> 27:47.960
中能够

27:47.960 --> 27:49.960
什么呢

27:49.960 --> 27:51.960
能够描述一定

27:51.960 --> 27:53.960
程度的逻辑

27:53.960 --> 27:55.960
也就是什么呢

27:55.960 --> 27:57.960
也就是从UI出发

27:57.960 --> 27:59.960
从UI出发

27:59.960 --> 28:01.960
然后扩展

28:01.960 --> 28:03.960
然后扩展

28:03.960 --> 28:05.960
UI

28:05.960 --> 28:07.960
在UI中

28:07.960 --> 28:09.960
在UI中

28:09.960 --> 28:13.460
能够

28:13.460 --> 28:15.460
描述逻辑

28:15.460 --> 28:17.460
而这个JSX

28:17.460 --> 28:19.460
JSX的这个出发点

28:19.460 --> 28:21.460
刚好就是反折的

28:21.460 --> 28:23.460
对不对

28:23.460 --> 28:25.460
它的出发点是什么呢

28:25.460 --> 28:27.460
既然前端使用什么

28:27.460 --> 28:29.460
使用JS来

28:29.460 --> 28:31.460
描述逻辑

28:31.460 --> 28:33.460
那么就什么呢

28:33.460 --> 28:35.460
就扩展JS

28:35.460 --> 28:37.460
对吧

28:37.460 --> 28:39.460
扩展JS

28:39.460 --> 28:41.460
让JS也能

28:41.460 --> 28:43.460
描述什么呢

28:43.460 --> 28:45.460
描述UI

28:45.460 --> 28:47.460
也就是什么呢

28:47.460 --> 28:49.460
也就是从什么呢

28:49.460 --> 28:51.460
从逻辑出发

28:51.460 --> 28:53.460
从逻辑出发

28:53.460 --> 28:55.460
扩展什么

28:55.460 --> 28:57.460
扩展逻辑

28:57.460 --> 28:59.460
描述UI

28:59.460 --> 29:01.460
你可以看到这两者的话

29:01.460 --> 29:03.460
虽然达到了同样的目的

29:03.460 --> 29:05.460
但是这两者

29:05.460 --> 29:07.460
它的这个思路是完全不一样的

29:07.460 --> 29:09.460
这两者

29:09.460 --> 29:11.460
虽然都可以

29:11.460 --> 29:13.460
都

29:13.460 --> 29:15.460
都可以

29:15.460 --> 29:17.460
描述UI

29:17.460 --> 29:19.460
但是什么呢

29:19.460 --> 29:21.460
但是这个思路是完全不同的

29:21.460 --> 29:23.460
思路

29:23.460 --> 29:25.460
或者说

29:25.460 --> 29:27.460
或者说方向

29:27.460 --> 29:29.460
是

29:29.460 --> 29:31.460
完全不同的

29:31.460 --> 29:33.460
从而造成什么

29:33.460 --> 29:35.460
从而造成了

29:35.460 --> 29:37.460
整体

29:37.460 --> 29:39.460
框架

29:39.460 --> 29:41.460
架构上面

29:41.460 --> 29:43.460
也是不一样的

29:43.460 --> 29:45.460
对不对

29:45.460 --> 29:47.460
日后就是你要处理的这些点

29:47.460 --> 29:49.460
技术它里面存在的一些点

29:49.460 --> 29:51.460
要处理的点是完全不一样的

29:51.460 --> 29:53.460
对不对

29:53.460 --> 29:55.460
这个的话其实就是从这个历史的角度

29:55.460 --> 29:57.460
我们来看一下

29:57.460 --> 29:59.460
就是JSX

29:59.460 --> 30:01.460
JSX它是怎么来的

30:01.460 --> 30:03.460
它的一个设计的思路是什么

30:03.460 --> 30:05.460
接下来模板

30:05.460 --> 30:07.460
模板又是怎么来的

30:07.460 --> 30:09.460
对不对

30:09.460 --> 30:11.460
模板的历史其实比JSX更久一些

30:11.460 --> 30:13.460
很早就用模板

30:13.460 --> 30:15.460
好然后最后的话

30:15.460 --> 30:17.460
我们来看一下这个整体解答

30:17.460 --> 30:19.460
你听了就是我这边这节课之后

30:19.460 --> 30:21.460
那你现在这个整体解答的话

30:21.460 --> 30:23.460
你是不是能说出来的东西就更多一些了

30:23.460 --> 30:25.460
好那我们这边我给一个这个参考答案

30:25.460 --> 30:27.460
里面大家可以看一下

30:27.460 --> 30:29.460
把这个参考答案我直接把人拿过来

30:29.460 --> 30:31.460
放到这里

30:31.460 --> 30:33.460
好

30:33.460 --> 30:35.460
这边在react中使用JSX来描述UI

30:35.460 --> 30:37.460
因为react团队

30:37.460 --> 30:39.460
认为UI本质上

30:39.460 --> 30:41.460
与逻辑存在偶和部分

30:41.460 --> 30:43.460
在react中使用JSX来描述UI

30:43.460 --> 30:45.460
因为react团队

30:45.460 --> 30:47.460
认为UI本质上

30:47.460 --> 30:49.460
与逻辑存在偶和部分

30:49.460 --> 30:51.460
在react中使用JSX来描述UI

30:51.460 --> 30:53.460
与逻辑存在偶和部分

30:53.460 --> 30:55.460
对吧那作为这个前轮工程是

30:55.460 --> 30:57.460
JS用的是最多的

30:57.460 --> 30:59.460
那我们就用什么就用JS来描述UI

30:59.460 --> 31:01.460
那用JS描述UI的话

31:01.460 --> 31:03.460
有点些好处可以打一下

31:03.460 --> 31:05.460
对不对第一条第二条第三条

31:05.460 --> 31:07.460
把罗列出来好

31:07.460 --> 31:09.460
然后加这个模板语言他的这个历史

31:09.460 --> 31:11.460
他是从后段说起的对不对

31:11.460 --> 31:13.460
然后加之前用的是这个模板引擎

31:13.460 --> 31:15.460
模板引擎你可以

31:15.460 --> 31:17.460
简单的这个说一下

31:17.460 --> 31:19.460
说完之后然后加这边总结

31:19.460 --> 31:21.460
这个模板语法的出发点就是什么

31:21.460 --> 31:23.460
说扩展HTML语法

31:23.460 --> 31:25.460
而JSX的这个出发点是什么

31:25.460 --> 31:27.460
说扩展JS语法

31:27.460 --> 31:29.460
对不对你看你这样子回答的话

31:29.460 --> 31:31.460
整个这个答案是不就非常丰满了

31:31.460 --> 31:33.460
对不对非常丰满了

31:33.460 --> 31:35.460
ok

31:35.460 --> 31:37.460
这就是关于这节课react和UI

31:37.460 --> 31:39.460
描述页面有些什么样的这个区别

31:39.460 --> 31:41.460
这个大家下来可以自己再

31:41.460 --> 31:43.460
想一想这个问题

31:43.460 --> 31:45.460
ok好这节课就到这里

31:45.460 --> 31:47.460
再见

