WEBVTT

00:00.000 --> 00:06.800
好 这节课的话 咱们来看一下这个主键 宣人的时候的一个这个性能的这个优化

00:07.840 --> 00:14.160
我们上一节课的话 讲了那个错误边界 那那个错误边界的话 其实也可以看作是一种优化

00:14.680 --> 00:20.120
只不过它是在这个出错的时候 对吧 出错的时候 咱们设置了一个这个边界

00:20.680 --> 00:26.520
设置了边界之后 然后接下来你这个指数 渲染不出来 我可以渲染一些这个降级的这个UI

00:27.040 --> 00:35.160
他也可以看作是一种这个优化的这个措施 对吧 好 那我们这节课要看了这个性能优化的话 会涉及到这么一些东西

00:35.800 --> 00:39.960
一个是shoulder component update 然后这个pure component

00:40.920 --> 00:50.600
react memo use memo use callback 东西的话还是蛮多的 但是不难啊 不难 这边跟着这个解老师的思路一个一个走

00:51.320 --> 00:54.760
没有问题的 ok 好 我们首先的话先来看第一个

00:55.360 --> 01:06.400
第一个的话 这个叫做shoulder component update 啊 与这个pure component 而这两个的话 其实可以放到一起讲 因为这两个的话 其实可以看作是一组

01:06.880 --> 01:13.320
你只要把这个shoulder component update 只要把这个搞懂了 那这个pure component的话 其实也就搞懂了

01:13.680 --> 01:16.200
因为这个pure component 背后其实就是用的是这个

01:17.160 --> 01:19.680
就是用了这个 好 那我们一个一个看吧

01:20.840 --> 01:27.640
我们首先的话 先来看这个shoulder component update 他要解决什么样的这个问题 好 我们这边的话

01:28.680 --> 01:30.720
我们来写一个啊 我这边的话就是一个

01:32.480 --> 01:40.760
新的项目啊 我把这个就是其他的这些东西都去除干净了 好 我们这边来写个什么呢 我们这边来写一个这个技术器

01:41.480 --> 01:49.680
我们这边先写这个内主键啊 先写内主键 因为这个shoulder component update 它是一个生命周期勾字函数

01:50.360 --> 01:54.280
好 然后接下来我们在这里 这里的话 我们来写一个状态

01:54.800 --> 01:58.320
stat 他等于一个什么呢 他等于一个conventer

01:59.120 --> 02:03.280
对应的是1啊 好 然后接下来这里 这里这个是

02:04.240 --> 02:08.380
app 主键啊 这是app

02:09.500 --> 02:12.300
app 主键 好 这边的话 给个div

02:13.260 --> 02:15.580
div 然后接下来 这边还有一个conventer

02:17.180 --> 02:19.500
conventer对应是z 点

02:20.060 --> 02:21.740
stat 点

02:21.740 --> 02:22.300
conventer

02:22.940 --> 02:26.780
ok 好 然后接下来 这边这边 我们再给个barton

02:27.340 --> 02:30.940
barton的话 然后他是做这个加一啊 这边他做加一

02:31.660 --> 02:37.170
这个也给个div 好 然后接下来 这边要绑定个点击世界

02:37.890 --> 02:39.090
对吧 unclick

02:39.890 --> 02:43.810
unclick 这边啊 这边的话 他要做的这个事情就是什么呢

02:44.370 --> 02:46.050
z 点 set

02:47.250 --> 02:47.650
stat

02:48.610 --> 02:53.250
啊 这边传入一个对象 对象里面的这个conventer对应的是z

02:54.450 --> 02:57.170
stat 点这个conventer加一

02:57.890 --> 03:02.610
这个代码的话 非常简单 这个就是一个简单的什么 简单了一个技术器

03:03.330 --> 03:07.250
对不对 好 我每次的话 我这边修改这个stat

03:07.650 --> 03:09.810
修改stat 你这边调用这个statstat

03:10.130 --> 03:15.090
对吧 你每次调用这个statstat的时候 他就会干嘛呢 他就会重新进行一个

03:15.250 --> 03:17.090
人的啊 我们这边 我们打印一下

03:18.210 --> 03:22.770
打一下你就知道了 好 比如说我们这边 app 主键

03:23.890 --> 03:28.370
渲染了 okay 好 保存 好吧 这个拉到下面去吧

03:29.810 --> 03:35.170
好 来 我们这边 我们来看一下 在这边啊 这里把这个控制台打开

03:37.170 --> 03:43.250
啊 一开始的话 这边是不是显示 app 主键渲染了啊 因为你第一次这边 他要把它渲染出来嘛

03:43.650 --> 03:46.930
对吧 好 然后然后接下来我这边点击一下加一

03:47.890 --> 03:49.890
点击加一之后 这边技术器 是不是

03:50.770 --> 03:56.130
增加 对吧 增加的话 你会发现整个app 主键他渲染了 这个是没问题的

03:56.610 --> 04:00.130
对不对 你本来就应该重新渲染嘛 因为我这边只是已经就变了嘛

04:01.010 --> 04:06.930
对不对啊 所以我这边啊 每次加一一次啊 这个app 主键 他就要重新渲染一次

04:07.570 --> 04:11.570
但是你看现在 现在我把这个代码稍微修改一下

04:12.210 --> 04:15.010
怎么改呢 我这边的话 我就设置

04:15.570 --> 04:17.170
conventer 他是一

04:18.690 --> 04:23.650
也就是说我这边的话干嘛 我的这个conventer的这个值是没有变

04:24.210 --> 04:30.130
对不对 你之前是一 我这边通过这个set state来设置你的时候 仍然是一

04:31.010 --> 04:33.490
仍然是一 好 来我们来看一下会有什么样的现象

04:34.210 --> 04:37.010
好 我们这边刷新一下 好 我这边的话点击加一

04:37.730 --> 04:42.610
点击加一的话 你看我这边一直在点啊 一直在点 你会发现这边是没有变化的

04:43.170 --> 04:45.810
这边没有变化很好理解 因为你设置是不是就是设置成一

04:46.290 --> 04:51.730
好 然后接下来这边这个app 主键 你看他是不是会不停的重复渲染

04:52.530 --> 04:57.730
对不对 不停的重复渲染 也就是说你这边的话 你只要掉了这个set state

04:58.530 --> 05:03.010
只要掉了他 那你这个主键他就会重新渲染

05:03.650 --> 05:07.330
ok 就会重新渲染 好 那这个的话本身是没问题的

05:07.730 --> 05:15.410
但是呢 我们会觉得你这边啊 就本身你这个如果是像刚才这样子写啊 刚才这样子写 你这边的话就是本身是没有问题的

05:15.970 --> 05:20.850
对不对 我这边直变了啊 你这边重新渲染 这个是没问题的 但是现在的话我们这里

05:22.210 --> 05:23.410
我们只没有变啊

05:24.370 --> 05:29.090
对吧 我们只没有变的话 那我们觉得他的这个渲染有没有必要

05:30.050 --> 05:34.210
有没有必要 是没有必要 对不对 没有必要

05:34.770 --> 05:37.650
那怎么办呢 哎 我们这边就可以使用这个

05:38.610 --> 05:42.290
可以使用这个叫做should component update

05:42.850 --> 05:47.810
他是一个什么呢 他是一个生命周期购置函数啊 这边这个文档的地址

05:48.290 --> 05:49.410
给大家放到这里了

05:50.450 --> 05:53.730
在这边可不可以啊 should component update

05:54.290 --> 05:55.650
他这边的话接收两个

05:56.450 --> 05:57.650
一个叫做next

05:58.210 --> 06:03.330
这个props 就是你这个下一次的这个属性值 一个是什么呢 一个是next

06:03.890 --> 06:07.410
这个state 就是你最新的这个状态值啊

06:07.890 --> 06:14.530
好 然后接下来他会根据什么呢 根据这个你这个should component update 根据他的这个返回值

06:15.330 --> 06:17.730
他的返回值是什么 他返回值的话是个布尔

06:18.210 --> 06:24.450
啊 是个布尔啊 如果是q 如果是q的话 那接下来就干嘛呢 属见重新渲染

06:25.170 --> 06:30.210
如果是foss 如果是foss 那主见的话就不重新渲染

06:30.770 --> 06:32.930
他默认是什么呢 默认是q

06:33.490 --> 06:39.250
也就是说你这个不写不写的话 他其实默认是什么呢 默认是默认是q啊 所以说我们这边

06:40.610 --> 06:46.610
每次这个点击的时候 他主见都会重新渲染 ok好 来我们这边我们来尝试一下

06:47.330 --> 06:52.770
比如说我们这边回到我们的代码 我们在这边写一个哈 他这个名字叫做

06:53.730 --> 06:55.330
should component update

06:56.690 --> 06:58.210
啊 是个生命周期勾字函数

06:59.330 --> 07:03.330
ok 好 我们这边的话 我们直接返回什么呢 直接返回foss

07:04.610 --> 07:10.690
直接返回foss啊 我什么都不写 我就返回foss foss代表什么 是不是就是不重新渲染

07:11.410 --> 07:13.010
对不对啊 来我们这边我们来看一下

07:14.850 --> 07:19.970
放心啊 刷新之后大家这边点击加一 你看我这边再点啊 我这边不停的再点

07:20.690 --> 07:23.410
你会发现的话 你看这边主见 他从不重新渲染

07:24.050 --> 07:32.290
是不是就不重新渲染 对不对 哪怕你这个状态发生变化啊 可能有的同学会误解 因为这边这个状态只没变嘛 哪怕你这边发生变化

07:33.010 --> 07:39.810
这是点state 点conventer加一 对吧 好 然后加这边 重新刷新一下

07:40.210 --> 07:46.930
好 这边点击 你看 哪怕你状态发生变化 哎 只要我这边的话 返回的是foss

07:47.410 --> 07:52.770
让我整个主见的话 他就不重新渲染 ok 好 来 我们这边记一下啊

07:54.530 --> 08:01.410
就是这边 should component update 会根据什么呢 会根据

08:02.610 --> 08:07.250
这个返回值来决定 是否

08:08.130 --> 08:12.530
重新渲染啊 默认什么了 默认实处

08:13.250 --> 08:15.810
默认实处 是不是要重新渲染

08:16.690 --> 08:20.850
要重新渲染啊 那如果返回foss

08:21.810 --> 08:23.970
如果返回foss

08:25.890 --> 08:29.170
则不会重新渲染

08:30.130 --> 08:33.010
对吧 啊 但你这样子写的话 肯定也有问题啊

08:33.730 --> 08:39.410
啊 你不能直接跟我写死喽 对吧 你直接跟我return force 当我这边 你看我像这边 我状态都改变了

08:39.890 --> 08:45.410
啊 这边的话也也干嘛 是不是也也也没办法这个重新渲染 这样子肯定是不对的

08:45.810 --> 08:51.010
所以说我们在这里这个生命周期勾字函数里面 我们是要做一些判断的

08:51.970 --> 08:57.330
啊 我们是要做些判断的 我们这边的话要做什么判断的啊 我们这边的话 你让他是不是有两个参数

08:58.770 --> 09:01.570
让他这边 是不是两个参数啊 一个叫做next

09:02.130 --> 09:04.450
pops 一个叫做next state

09:05.810 --> 09:07.090
有这么两个参数

09:07.810 --> 09:08.930
这两个参数是什么呢

09:11.090 --> 09:13.730
啊 这两个参数一个是什么呢 一个是新的pops

09:15.410 --> 09:20.050
新的pops 一个是什么呢 一个是新的state

09:21.330 --> 09:28.530
那么我们一般来讲的话 我们这边就需要做什么 我们在这个shoulder component update里面 我们就需要

09:28.850 --> 09:37.250
我们就需要将什么呢 将当前的pops和这个state

09:38.210 --> 09:40.610
与啊 与这个新的

09:41.730 --> 09:42.610
与新的

09:44.450 --> 09:47.570
新的这个pops和这个state

09:48.850 --> 09:51.170
进行一个比较

09:52.130 --> 09:53.250
哎 进行个比较

09:53.730 --> 10:00.290
如果这个新旧pops以及新旧这个state都是一模一样的 你有没有必要选择

10:00.930 --> 10:05.010
是不是就没有必要选择 对不对 如果新旧

10:05.810 --> 10:08.610
这个pops和这个state

10:09.730 --> 10:10.690
都是相同的

10:11.250 --> 10:12.610
都是相同的

10:13.170 --> 10:15.890
那么就干嘛 就返回

10:17.570 --> 10:21.010
force 对吧 不需要重新

10:22.130 --> 10:22.530
shoulder

10:23.410 --> 10:23.650
ok

10:25.410 --> 10:31.490
好 那么我们这边的话啊 接下来的任务就是要进行一个新旧pops和state的一个比较

10:32.130 --> 10:37.170
对不对 好 那我们这边 我们首先来看一下啊 我们先来看一下 我们这边打印一下

10:37.890 --> 10:40.130
这边的话 next props

10:41.410 --> 10:44.930
好 然后加这边的一个next state

10:45.650 --> 10:50.290
对吧 好 保存一下 保存了之后 然后接下来我们这边 我们来看一下

10:52.700 --> 11:00.060
刷新 刷新之后 然后点击加一 你看 他这边的话next props和next state 他是一个什么 是不是对象

11:00.700 --> 11:03.420
对不对 那这边这个对象我们叫和这个舅的

11:03.900 --> 11:07.340
舅的这个pops和舅的state进行一个比较

11:07.820 --> 11:10.300
好 来我们这边呢 我们就来写一个辅助函数

11:10.860 --> 11:12.300
我们来到我们的这个tools

11:12.780 --> 11:17.500
tools这个是之前写的这个格式化这个时间戳的 我们把它折起来

11:17.980 --> 11:20.300
好 我们在下面 下面来写一个

11:20.940 --> 11:23.500
好 下面写一个这个是什么呢 这个是对两个

11:24.620 --> 11:29.820
对两个对象进行一个前比较

11:31.900 --> 11:35.340
前比较 okay 看是否

11:36.060 --> 11:42.940
相等 什么叫做前比较 你注意哦 他这边的话这个官方他这边做的是什么呢 做的是前比较

11:43.660 --> 11:44.700
啊 我看在哪个位置

11:45.660 --> 11:50.860
呃 我看这边 这里看到没有 这个pure component

11:51.340 --> 11:55.660
会对这个props和state进行一个前程比较

11:56.380 --> 12:01.900
那有人说你不是在讲这个舅的component update吗 怎么又跳到这个pure component了

12:02.140 --> 12:04.700
pure component内部其实就是用的是他

12:05.340 --> 12:06.940
那我提前给你跳过去看一下吧

12:08.220 --> 12:14.300
提前给你跳过去 你看这边react.pure component和react.component很相似

12:14.860 --> 12:17.100
react.component是什么 就是

12:17.900 --> 12:18.540
说就这个

12:19.340 --> 12:26.300
说就这个 对不对 就这个啊 非常相似 区别在于什么呢 区别就在于这个react.component

12:26.540 --> 12:28.140
他内部没有实现这个

12:28.940 --> 12:32.460
shoulder component update 而你这个pure component

12:32.940 --> 12:38.300
他就实现了 实现了这个 然后里面用了什么呢 里面用的是前程对比

12:39.100 --> 12:41.820
前程对比 okay 什么叫做前程对比

12:42.780 --> 12:47.260
啊 这边什么叫做前程对比 是这样子的 比如说我这边的话 我有两个对象

12:49.340 --> 12:52.060
啊 这边内部内部对应的是一个卸节

12:52.620 --> 12:59.020
好 edge edge对应的是一个18 对吧 好 然后接下来的话 我这边还有一些其他的这些信息

12:59.340 --> 13:01.340
其他的信息他对应的又是一个对象了

13:02.060 --> 13:06.700
啊 又是一个对象或者又是一个数组啊 比如这边对应了a a对应的是1

13:07.340 --> 13:09.980
啊 大家这边这个b b对应的是2

13:10.700 --> 13:17.980
好 然后回头的话 我这个对象变成了什么呢 变成了这个啊 让内部没变 edge没变 对不对 然后加这边 这边这个值变了

13:19.420 --> 13:26.460
这个值 这个值变成10啊 这个值变成20 那这边在进行前程比较的时候 他就会认为这两个对象

13:27.260 --> 13:28.540
是相等还是不相等

13:29.420 --> 13:30.460
哎 是相等

13:31.020 --> 13:36.940
是相等 为什么呢 因为他这边这个内部啊 内部的话他去比较值 对吧 比较值 也值是相等的

13:37.340 --> 13:45.580
edge 去比较值啊 18 18是相等的 好到了这个info的时候 info他是一个什么 是不是 他是个对象啊

13:46.380 --> 13:52.460
对不对 他是个对象 对象的话他就会干嘛呢 他就会去比较这个对象的这个地址

13:53.020 --> 13:58.140
而不是说跑了这个对象里面去比你这个值改没改 不会 你那个就叫做生成比较了

13:59.020 --> 14:03.260
知道吧 那个就叫做生成比较了啊 前程比较的话 他这边就是比较这个地址

14:03.580 --> 14:06.460
看地址变没变 你这边发现地址什么没变

14:06.940 --> 14:10.460
对不对 所以他就会认为整个这个对象没有发生改变

14:11.260 --> 14:14.540
ok 没有发生改变啊 这是前程比较啊

14:16.220 --> 14:20.700
好 这边 这样子吧 这样子好看些 是吧

14:22.540 --> 14:27.580
这样子 ok 好来我们这边来写啊 那这边的话他接受什么呢 接受两个参数

14:28.140 --> 14:34.860
一个是obj1 这是你的第一个对象obj2啊 大家这边的话返回什么呢 返回

14:36.980 --> 14:41.140
返回这个布尔滋啊 布尔滋 你如果是这个q

14:42.820 --> 14:46.500
q代表两个对象

14:47.380 --> 14:51.940
相等 对吧 大家这边的force force代表不相等

14:53.380 --> 14:56.980
不相等啊 好 大家我们这边export

14:57.940 --> 15:03.780
function 啊 这边我们就叫做object is object equal

15:06.140 --> 15:10.380
啊 我们这边的obj1 接受两个对象obj2

15:11.180 --> 15:16.380
对吧 好 然后接下来换我 这边的话我就干嘛呢 我去便利啊 通过 for in

15:17.740 --> 15:22.700
net 拿到什么呢 拿到这个属性 in这个obj1

15:23.260 --> 15:31.900
你看他这边上是不是就会去拿到这个这个对象就第一个对象 他每一个属性对不对 比较这边那么 edge info

15:32.220 --> 15:37.500
是不是拿到 拿到之后然后接下来我就和什么呢 我就和这个obj2

15:38.140 --> 15:44.380
这个prop 对吧objprop 以及这边这个obj1

15:44.940 --> 15:49.180
这边这个prop 啊 因为我这个prop拿的是什么 是不是拿到的是你的见名

15:49.740 --> 15:54.620
对不对 拿到见名 好 那接下来的话我这两个东西 是不是要进行个比较

15:55.260 --> 15:59.820
对不对 进行比较的话 那我们这边就可以干嘛 那我们这边就可以用这个他那个

16:00.860 --> 16:03.660
js 类制的啊 这边object

16:04.380 --> 16:05.420
点 is

16:06.620 --> 16:09.260
ok 好 大家这边把这两个传进去

16:11.180 --> 16:13.660
传进去啊 这边两个参数

16:14.300 --> 16:19.820
ok 两个参数 然后接下来这边传进去 这边怎么包错了啊 这边是prop

16:20.540 --> 16:23.900
prop好 传进去 传进去 然后接下来这边的话 衣服判断

16:26.720 --> 16:30.160
衣服 衣服你这两个的话 你这边返回的是force

16:31.200 --> 16:35.920
啊 返回的force 那我们这边就干嘛 就这两个啊 这两个就是说明什么 是不是直不相等

16:36.640 --> 16:42.000
对不对 直不相等啊 这边force force的取反是不是就是去啊 对不对啊 那进入此衣服

16:42.880 --> 16:49.200
进入此衣服 说明什么 说明就是有属性值

16:49.920 --> 16:53.200
是不相等 对不对 只要有一个不相等

16:54.240 --> 16:56.240
啊 只要

16:56.240 --> 17:00.000
有一个不相等 那么我们就应该干嘛

17:00.480 --> 17:06.000
是个return force 对不对啊 那么就应该

17:07.120 --> 17:10.400
判定两个对象是不等

17:11.360 --> 17:17.040
对吧 但这个也仅仅至于就是什么 是这个浅城的啊 浅城的就是这边这边

17:17.440 --> 17:20.080
比如这个info info的话 他就是比较的是地址了

17:20.640 --> 17:21.920
比较的是地址 okay

17:22.480 --> 17:25.440
好 然后如果整个这个 FOR 循环都跑完了

17:26.320 --> 17:30.320
你整个 FOR 循环都跑完了 都没有进入这个衣服 说明什么

17:30.800 --> 17:36.800
说明两个对象的话 是不是就是相等的 对不对 相等的 那我们这边就返回什么呢 返回

17:36.880 --> 17:37.680
去

17:38.320 --> 17:44.000
克兰表返回去啊 这边呢 我们就是书写了这么一个辅助函数

17:45.840 --> 17:49.920
好 这个辅助函数写好了之后呢 回到我们这边 回到我们这边

17:50.320 --> 17:55.360
好 这边的话 咱们就把那个辅助函数 把它引进来啊 这边应该是通过结构的方式

17:56.080 --> 17:58.320
对吧 把这个object equal

17:59.440 --> 18:00.480
把它引进来

18:01.440 --> 18:03.280
引进来 然后接下来这边 from

18:03.840 --> 18:07.040
当前目楼下面的utils 下面的tools

18:07.600 --> 18:09.200
各式画一下 okay

18:09.520 --> 18:14.000
好 然后接下来我们在这边 在这边你就不能无脑的 是不是 直接返回force

18:14.480 --> 18:16.560
对不对 你直接返回force 那谁都不要更新

18:17.040 --> 18:21.920
对吧 那我们这边呢 就需要做这个判断了 怎么判断啊 这边呢 我们就是

18:22.560 --> 18:28.720
object equal啊 首先的话对属性进行判断啊 但我们这边这个app不存在属性啊

18:29.120 --> 18:33.760
啊 但你也可以写也可以写啊 就是这边通用的啊 相当于这边这个写法是通用的

18:34.080 --> 18:36.800
这边就是什么呢 z 是点这个probs

18:37.680 --> 18:41.600
是不是当前的这个属性以及什么 是不是你的新属性

18:42.800 --> 18:48.240
对不对 首先进行一个对比啊 然后接下来这边 它必须是要q and and

18:48.960 --> 18:50.320
什么呢 object

18:51.120 --> 18:53.840
这边啊 z state

18:54.800 --> 18:56.560
z state

18:56.560 --> 18:59.360
把这个删了 z 点 state

18:59.360 --> 19:05.680
对你当前的状态和你这个最新的状态 两个如果都相等啊 这边if

19:07.360 --> 19:14.000
两个如果都相等 说明什么 说明是不是你这个新旧都是相同的

19:14.960 --> 19:19.120
对不对 把这句拿过来 okay

19:20.480 --> 19:25.520
新旧的这个probs和state都是相同 相同的那就干嘛

19:26.080 --> 19:27.120
是retar false

19:28.400 --> 19:32.560
对不对 那否则的话干嘛呢 否则的话retar true

19:33.920 --> 19:39.760
可不可以啊 否则的话retar true okay 就写完了 就写完了啊 所以我们这个app

19:40.320 --> 19:46.400
呃 不存在这个probs啊 但这边上你这个的话其实是一个通用的写法啊 你在其他组件里面也可以这么写

19:47.440 --> 19:51.680
啊 早期的话我们这边就需要这样子来写 知道吧 我们先来看一下效果吧

19:52.400 --> 19:55.920
先看看效果好不好使 好 我这边的话我是

19:57.200 --> 20:02.560
rest点state点container啊 加一是吧 那我这边我想想我怎么让他就是

20:02.960 --> 20:08.320
有些时候更新有些时候就和这个相同 我们这样子 我们这边的话我们取个这个随机值

20:09.520 --> 20:15.120
好吧 这边 mass 点pro 我们让他取什么呢 我们让他取一到三之间的随机值

20:15.840 --> 20:18.480
啊 三三种情况加一个一

20:19.280 --> 20:27.200
ok 那我这边在设置conventer的时候 他就是一到三之间的随机数 那可能就会出现什么情况 是不是你之前是一

20:28.080 --> 20:35.040
我这一次又摇到什么 是不是又摇到一了 又摇到一的话 那接下来根据我们这边写的这个 他是不是就不会重新宣传

20:36.080 --> 20:37.680
对不对 好 来我们来看一下效果

20:39.950 --> 20:42.030
好 来看一下效果啊 这边说新

20:42.830 --> 20:45.310
好 现在的话这边是一 对吧 我们这边点击一下

20:46.270 --> 20:50.990
点击 你看这边 有没有重新宣传 没有 我们把这个这个打印把它

20:52.030 --> 20:55.390
删了 这个有点影响视觉 我们这边重新看一下

20:56.030 --> 21:01.230
好 这边走 你看这一次变成三了 对吧 这次随机数是三 从一到三

21:02.030 --> 21:08.030
从一到三的话 你这个是不是需要重新宣传啊 这边再点击点击啊 这边是一再点击

21:08.910 --> 21:12.350
啊 这是二再点击 你看这次这次呢 是不是又是二

21:13.070 --> 21:15.070
对不对 又是二 又是二 他会不会重新宣传

21:15.470 --> 21:18.270
他就不会重新宣传啊 这边再来再来看嘛

21:19.070 --> 21:23.230
走啊 这个是三 对吧 好 大家这边走啊 二

21:24.030 --> 21:25.950
然后走 哎 三

21:26.670 --> 21:30.990
好 反正只要这数值变化了啊 他就会重新宣传 走 你看

21:31.390 --> 21:36.030
这次是三 三的话他这个和之前是相同的 是不是他就不会重新宣传

21:36.990 --> 21:40.430
对不对 哎 你看这个就是一种优化方式

21:41.070 --> 21:43.230
should component update

21:44.190 --> 21:49.070
明白没有啊 应该很好懂吧 对吧 应该很好懂啊

21:49.550 --> 21:54.030
好 之前的话这个should component啊 就是should component update

21:54.430 --> 21:56.190
这个是需要你自己来写的

21:56.910 --> 22:03.230
需要你自己来写啊 后来的话他就推出了一个什么呢 他就推出了一个这个pure component

22:04.190 --> 22:10.190
他怎么样啊 这边他这个此方法仅作为性能优化的方式而存在

22:10.350 --> 22:13.390
他这个此方法用指的是什么呢 指的就是这个

22:14.110 --> 22:20.590
啊 指的是这个 ok 那既然他这边告诉你 你应该考虑使用类制的这个pure component

22:21.230 --> 22:25.950
而不是手动编写should component update

22:26.670 --> 22:32.750
ok 但其实这个pure component 他内部他的实现其实就是干嘛呢 其实就是我们刚才所写的这个代码

22:33.790 --> 22:38.590
啊 就是我们刚所写的这个代码 我们来看一下这个pure component 刚才其实已经看过了

22:39.150 --> 22:41.470
啊 这边呢 就是他们两者的区别

22:42.350 --> 22:50.750
react component 并未实现should component update 而你这个pure component他就干嘛 他是不是实现了 而且他是什么

22:50.990 --> 22:51.870
浅成对比

22:52.670 --> 22:57.950
对吧 啊 这边也写的有 紧做对象的浅成比较 好 那我们这边

22:58.750 --> 23:02.510
来试一试 然后把这个的话 整个这个我们把它注射掉

23:03.630 --> 23:07.870
注射掉 好 注射掉了之后 然后接下来的话 把这边也注射掉

23:08.270 --> 23:12.190
注射掉之后 然后接下来我们把他换成什么呢 换成pure component

23:12.910 --> 23:16.750
pure component 然后加在这里 这里的话就是应该是extend

23:17.150 --> 23:18.270
pure component

23:19.230 --> 23:25.790
存主件 存主件 保存 保存了之后来看一下 效果其实是一样的

23:26.430 --> 23:31.870
啊 这边加1 重新选择 对吧 啊 这边走 你看这次是3

23:32.510 --> 23:36.510
啊 他是不是没有重新选择 对不对 走 又是3

23:36.990 --> 23:41.710
啊 走啊 这次是2 对吧 走啊 这次是1

23:42.350 --> 23:44.110
然后走啊 这次又是1

23:44.670 --> 23:54.270
OK 效果是一样的啊 而这边的话反复强调啊 反复强调 他做的是浅成比较

23:55.230 --> 24:01.150
浅成比较啊 所以你这边的话 你一定要干嘛呢 一定要这个注意啊 这边他说的有

24:01.630 --> 24:04.670
如果你的对象包含复杂的这个数据结构

24:05.310 --> 24:10.510
则有可能 因为什么呢 无法检查这个深层的差别 产生错误的这个比对结果

24:10.990 --> 24:16.590
说你这边的话 你仅仅在什么呢 仅仅在你的这个props和state 较为简单的时候

24:17.390 --> 24:19.230
才使用这个pure component

24:20.030 --> 24:22.110
OK 好 那我们这边 我们来看个例子

24:23.150 --> 24:23.710
看个例子

24:24.590 --> 24:27.870
好 比如说我们这边 我们这边还是pure component

24:28.750 --> 24:31.710
啊 我这边的话 我这个state 我这边不写这个conventer

24:32.190 --> 24:35.550
不写这个了 我这边写个什么呢 我这边写个stu

24:36.590 --> 24:37.230
一个学生

24:38.270 --> 24:42.590
学生的话 这边对应有两个学生啊 一个是张三

24:43.550 --> 24:44.190
一个是

24:45.150 --> 24:50.750
李四啊 两个学生 两个学生 然后接下来我这边把这两个学生我把它宣传出来

24:51.310 --> 24:53.390
好 我把这边 这边我把它改一下啊

24:54.830 --> 24:57.870
这边把它改一下 这边呢 我是一个ur

24:58.830 --> 25:05.470
啊 ur 然后接下来这边 这边的话 我们把这个list const list 等于一个

25:07.150 --> 25:11.870
z 点state 点stu 点什么 map

25:12.750 --> 25:19.390
对吧 好 然后这边 这边呢 是拿到it 拿到它的每一项啊 那拿到它的index

25:20.110 --> 25:23.390
好 然后接下来 这边呢 返回返回这个力

25:25.680 --> 25:31.360
返回这个力 力的话 然后我们给它一个key key的话对应的是index

25:32.000 --> 25:33.680
好 这边这边对应的是it

25:34.400 --> 25:36.400
ok 好 然后加这边的这个list

25:38.240 --> 25:38.640
这边

25:40.000 --> 25:40.400
list

25:41.280 --> 25:43.680
ok 首先来看一下效果啊 看一下效果

25:45.280 --> 25:47.920
好 这边是不是宣传出来了 对不对 张三 李四

25:48.400 --> 25:51.440
好 然后回头的话 我们这边 我们这边给它添加一个按钮

25:52.240 --> 25:56.560
这边添加一个button 啊 这边呢 叫做什么呢 叫做添加学生

25:57.200 --> 26:00.800
好 这边呢 给它一个点击视线 按click

26:02.480 --> 26:07.360
按click 等于一个 这边click handle

26:08.000 --> 26:13.920
好 click handle 然后接下来的话 我们就在这写吧 这边click handle 等于

26:17.140 --> 26:23.300
ok 好 在这边干嘛呢 在这边的话 我们来添加学生 但是我这边添加学生的话 你看我这边 我这样子来写

26:23.860 --> 26:28.180
z 点state 点stu 点push

26:28.660 --> 26:36.500
哎 我这边干嘛呀 我在原来的数组的基础上 我去这个往里面push 对吧 比如往5

26:37.780 --> 26:42.260
对吧 我在原来这个你这个state 这个数组的基础上 我往里面push

26:42.420 --> 26:46.420
push完了之后 然后加我们这边z 点set state

26:47.700 --> 26:50.900
好 这边呢 设置什么呢 设置stu stu对应什么呢

26:51.620 --> 26:52.820
z 点state

26:53.780 --> 26:55.300
点这个stu

26:56.260 --> 27:02.420
ok 你看一下这样子能不能行 这边报了个错 哦 这边这边应该是z

27:03.700 --> 27:04.980
z 因为它是内主键

27:06.020 --> 27:11.940
ok 你看下这样子能不能行 好 我们这边刷新一下 好点击添加学生添加学生

27:12.820 --> 27:14.660
能不能行 你看不行

27:15.380 --> 27:18.340
看到没有 你会发现这个仕途并没有更新

27:19.060 --> 27:22.820
并没有更新 啊 但是它这边这个状态其实是添加进去了

27:23.620 --> 27:28.500
看到没有 啊 刚才我点击了很多 状态的话其实是更新了的 但是我们会发现什么呢

27:28.580 --> 27:32.500
我们会发现这个仕途并没有更新 为什么

27:33.220 --> 27:36.100
为什么 原因很简单 就是因为这里

27:36.820 --> 27:40.420
啊 它这边做的是什么呢 做的是浅尘比较

27:41.140 --> 27:43.620
哎 这个是经常同学们会遇到的一个bug

27:44.100 --> 27:47.460
啊 就是自身自身所写的一个bug ok

27:48.100 --> 27:51.460
这边它是做的浅尘比较 浅尘比较的话 它这边会认为什么呀

27:52.180 --> 27:57.780
会认为你这边你这个stu 你之前是什么 之前你这边是不是这个stu对应了是不是这个数组

27:58.340 --> 28:03.460
对不对 你现在的话设置了这个z点state stu 是不是又是这个数组 地址变没变

28:04.020 --> 28:05.540
地址没有变

28:06.180 --> 28:12.340
没有变啊 没有变的话说它这边干嘛 它这边的话就是不会给你重新选择

28:13.380 --> 28:17.220
明白没啊 不会给你重新选择啊 因为你地址没有变

28:17.780 --> 28:18.820
那这边怎么办呢

28:19.620 --> 28:23.060
怎么办呢啊 你这边呢要么你就干嘛 要么你就用component

28:24.660 --> 28:28.340
要么就用component啊 你这边改成component 它是没有问题的

28:28.900 --> 28:36.190
好 我这边来看一下啊 这边看一下 刷新啊 这边添加学生对不对

28:36.510 --> 28:40.910
component 没有问题 但是你这边的话 其实你这个写法其实就不正规

28:41.710 --> 28:49.070
对不对 我们之前在讲这个react的时候 我们就说过 你这边要改啊 比如说我这边要改这个数组或者要改这个对象

28:49.470 --> 28:51.310
你不应该干嘛 不应该

28:52.030 --> 29:00.590
在之前的数组或者对象身上去直接去修改它 而是干嘛 而是创建一个新的数组或者新的对象

29:01.310 --> 29:07.310
对不对 在新的数组和新的对象的这个基础上 再去进行一个修改

29:08.030 --> 29:12.990
之前是不是说过 对不对 为什么啊 其实就是有这些原因在里面

29:13.470 --> 29:19.870
ok 说这边的话 其实更正规的这个做法啊 或者说更好的这个做法 不是说我这边pure component

29:20.590 --> 29:28.270
这边不得行 我就不用这个pure component啊 不是啊 你这边其实用还是应该用这个pure component 毕竟它有这个

29:29.230 --> 29:33.230
性能优化在里面 对吧 那你这边 实际上你是你这边的问题

29:33.710 --> 29:36.110
这边你应该改成什么 这边你应该改成这个样子

29:36.990 --> 29:38.110
首先const

29:38.110 --> 29:44.990
我创建一个新数组 对不对 this.stat.stu

29:46.430 --> 29:49.870
创建一个新数组 然后将我往这个新数组里面干嘛

29:50.750 --> 29:59.150
新数组里面是不是 推入这个数据 好 然后加这边的话 我 this.stat.的时候 我把这个stu设置为新数组

29:59.790 --> 30:03.150
设置为新数组的时候 他这边检测到 你这个数组的这个地址

30:03.710 --> 30:11.230
是不一样 对不对 不一样的话 他这边就会干嘛 就会重新进行一个渲染啊 保存一下 保存之后再重新来看

30:12.750 --> 30:19.390
走 是没问题啊 对不对 没问题 okay啊 这就是关于这个

30:20.750 --> 30:24.430
shooter component update 以及这个pure

30:24.990 --> 30:32.350
这个component pure component 这两个啊 这边呢 大家下去了 可以把它写一下啊 把它写一下

30:32.910 --> 30:33.950
我看还没什么知识点

30:35.950 --> 30:42.510
呃 就没什么知识点了 就没什么知识点了 对 就没什么知识点了 okay

30:43.070 --> 30:48.110
那这边的话 其实可以把这个视频暂停啊 这边已经已经也讲了半个小时了

30:48.510 --> 30:52.590
也可以把这个视频暂停啊 先把这两个先写一下啊 先理一理

30:53.230 --> 30:57.550
ok 好 然后接下来咱们这边继续啊

30:58.510 --> 31:02.190
接下来的话是什么 接下来的话是这个rept memo

31:03.150 --> 31:07.630
rept memo 我们前面所讲的这个shooter component update

31:08.190 --> 31:13.230
以及这个pure component 他主要是什么呢 他主要是优化这个类组件

31:14.350 --> 31:18.750
对不对 类组件 那如果我是韩束组件该怎么办了

31:19.870 --> 31:24.750
对吧 现在的话基本上是这个韩束组件大型其道啊 你之前的话你这个

31:25.470 --> 31:29.390
shooter component update 他是类组件的一个生命周期这个方法

31:29.790 --> 31:33.070
啊 这个pure component啊 其实也是在类组件里面用的

31:33.470 --> 31:38.990
对吧 那如果我是韩束组件 我们首先先看一下韩束组件会不会存在那个问题

31:39.950 --> 31:44.350
呃 这个的话我看这个笔记里面 笔记里面 笔记里面都有啊

31:45.230 --> 31:47.310
看这边啊 笔记这边都有

31:47.950 --> 31:52.270
ok 那我就把这个删了啊 这笔记就除了这个注释 注释没有

31:52.910 --> 31:58.000
把这个这个把它翻过去吧 把这个翻过去

31:58.960 --> 32:02.160
这边shooter 把这个改一下

32:03.280 --> 32:05.760
ok 这边把注释拿过去 好

32:06.400 --> 32:13.600
然后我们这边这边这个代码咱们就不要了 好 然后下咱们咱们这边的话改成什么呢 改成韩束组件

32:14.560 --> 32:17.360
改成韩束组件之后 然后将我们这边我们定一个状态

32:17.760 --> 32:25.520
UserState好 然后加我们这边 我们这边还是一样 我们写一个什么呢 写一个这个技术器

32:26.560 --> 32:27.120
const

32:28.400 --> 32:30.480
conventer 然后set

32:31.360 --> 32:31.840
conventer

32:32.960 --> 32:34.400
等于一个UserState

32:35.920 --> 32:36.160
1

32:37.200 --> 32:44.880
对吧 好 人家这边这边的话div app 组件好 这边的话有一个这个button

32:45.840 --> 32:51.840
button是做这个加1操作对吧 然后加这边 click

32:52.640 --> 32:53.040
等于

32:54.240 --> 32:58.480
这边这边就是应该是调这个setconventer setconventer 然后加这边是什么

32:59.040 --> 33:00.560
conventer加1

33:01.280 --> 33:08.560
对吧 好 然后加这边下面 下面的话就是什么 下面就是conventer对应的是conventer

33:10.080 --> 33:13.600
ok 好 来我们这边来看一下 首先我们写了一个这个技术器

33:14.320 --> 33:19.840
啊 这边加1加1加1 对吧 没问题 好 我们这边呢 我们在这边 我们还是打印一句话

33:20.800 --> 33:26.140
打印什么呢 这个app 组件渲染了 app 组件

33:27.100 --> 33:27.660
渲染了

33:28.780 --> 33:38.540
ok 保存 保存之后这边来看一下啊 加1加1加1啊 这边呢 这边的话这个app 组件渲染了 说明什么 说明这边呢 它是重新

33:39.100 --> 33:44.700
执行了整个渲染 这个的话是没问题的 对吧 本来你这个state变了 你就该重新渲染

33:45.260 --> 33:48.220
好 然后接下来我们这边看一下存不存在刚才那个情况

33:49.580 --> 33:53.980
啊 我们这边直接设置成一 直接设置成一 我们这边保存

33:54.700 --> 33:57.580
保存之后 然后接下来这边让我们这边点击这个加1

33:58.300 --> 34:04.620
哎 你看 这边的话 内组件的话 实际上它这个在state上面 它是不存在那个

34:05.340 --> 34:12.860
就函数组件啊 说错了 就函数组件的话 它这边的话啊 实际上是不存在什么 是不存在刚才那个内组件

34:13.260 --> 34:19.740
那个问题啊 对不对 你看我这边不停的点加1 你看它这边的话 并没有把这个整个组件重新渲染

34:20.540 --> 34:23.820
啊 这个的话 实际上和它这个护科的这个机制有关系

34:24.460 --> 34:30.060
这个我们后面的话 我们讲那个fiber的时候 我们讲那个圆码 圆码的话会涉及到这个fiber

34:30.460 --> 34:37.580
讲fiber的时候 我们会讨论到这个问题 ok 那你现在的话 你首先就记住 就是这边的话 就是这个函数组件

34:38.060 --> 34:39.580
函数组件的话 它这个state

34:40.220 --> 34:44.620
在这个state方面 它这边的话就不会出现像内组件那样的问题

34:45.340 --> 34:50.860
ok 但是呢 它这边的话会涉及到一个什么呢 会涉及到一个就是我如果是这个props

34:51.740 --> 34:52.380
相同的话

34:53.180 --> 34:56.220
如果我这个props相同的话 我这个组件

34:56.940 --> 34:59.900
它会 它也会干嘛呢 也会重复的这个渲染

35:00.540 --> 35:02.380
就state没有问题 但是props

35:03.020 --> 35:08.060
会有一些问题 ok 好来 我们这边 我们来写个例子啊 写个例子给大家看一下

35:08.700 --> 35:10.380
然后在这边的话 我新建一个

35:11.660 --> 35:14.540
新建一个叫做chall.com.json

35:15.100 --> 35:17.260
啊 这个是什么呢 这个是一个指主键

35:17.900 --> 35:20.060
对吧 我们这边chall.com

35:20.620 --> 35:23.020
啊 这边 第二位chall.com

35:23.660 --> 35:26.300
好 然后接下来 我们这边还是打印一句话

35:29.410 --> 35:30.370
chall.com

35:30.370 --> 35:30.930
渲染了

35:32.130 --> 35:32.610
渲染了

35:33.330 --> 35:39.010
ok 好 然后接下来在这边 这边的话 它会使用到什么呢 会使用到副组件

35:39.650 --> 35:41.970
跟我传递过来的这个conventer

35:42.530 --> 35:44.130
啊 所以我们这边的话是props

35:45.330 --> 35:49.970
props.conventer啊 也就是我们这边的话 接受这个副组件跟我传递过来

35:50.530 --> 35:51.810
好 在副组件这边

35:52.530 --> 35:58.290
副组件这边 我们这边定义两个状态 一个是conventer1 一个是conventer2

35:58.850 --> 36:00.130
啊 这边conventer

36:00.130 --> 36:01.170
这个set

36:01.170 --> 36:02.370
conventer1

36:02.370 --> 36:03.650
setconventer2

36:04.770 --> 36:05.570
conventer啊

36:05.570 --> 36:06.050
conventer

36:07.810 --> 36:08.690
啊 我读的啥呀

36:08.690 --> 36:09.330
conventer

36:10.290 --> 36:13.570
啊 读了这么久都没反应过来啊 这边是conventer啊

36:13.570 --> 36:14.130
conventer

36:15.570 --> 36:17.010
啊 这边conventer1

36:17.010 --> 36:18.050
conventer2

36:18.050 --> 36:19.170
setconventer1

36:19.170 --> 36:21.010
setconventer2

36:21.010 --> 36:21.730
ok

36:21.730 --> 36:24.770
好 然后接下来这边这边做一下说明

36:24.770 --> 36:26.370
这个conventer1是什么呢

36:26.370 --> 36:28.690
conventer1的话是就是我app组件

36:29.570 --> 36:31.650
app组件啊 自己用

36:32.770 --> 36:34.610
自己用的这个状态

36:35.170 --> 36:36.930
啊 这个conventer2

36:38.130 --> 36:40.450
conventer2是什么呢 是传递点

36:41.410 --> 36:43.090
传递给这个值组件

36:44.530 --> 36:46.050
就是我们的那个choudcon

36:46.770 --> 36:49.010
传递给值组件使用的

36:50.050 --> 36:50.530
ok

36:50.530 --> 36:52.770
好 我们这边把这个值组件把引向啊

36:52.770 --> 36:53.730
这边import

36:54.610 --> 36:57.250
choudconfront

36:58.450 --> 37:01.250
呃 当前目录下面的components

37:01.250 --> 37:02.290
下面的choudcon

37:02.850 --> 37:03.490
对吧

37:03.490 --> 37:05.490
好 然后加我们这边我们再使用一下

37:08.400 --> 37:08.960
ok

37:08.960 --> 37:11.360
然后加这边的话把这个conventer

37:11.360 --> 37:12.800
把它传递过去

37:13.920 --> 37:15.760
嘿 我刚才读了那么久的conventer

37:15.760 --> 37:16.160
我都没

37:17.200 --> 37:18.480
都没反应过来啊

37:19.280 --> 37:20.800
好 这边的话setconventer

37:22.080 --> 37:25.920
然后等于一个setconventer2

37:27.440 --> 37:28.960
对不对

37:28.960 --> 37:31.520
我就把这两个东西传递给我值组件了

37:31.520 --> 37:32.640
好 这边这边的话就是

37:33.200 --> 37:34.640
这边的话就是你这个副组件

37:34.640 --> 37:36.640
你自己用啊 副组件

37:36.640 --> 37:37.760
这边是值组件

37:39.200 --> 37:40.960
这边写下注射

37:40.960 --> 37:42.000
这边是值组件

37:42.960 --> 37:45.520
使用这个conventer2

37:46.640 --> 37:47.280
这个状态

37:50.130 --> 37:51.170
这个状态

37:51.250 --> 37:53.730
啊 这边这边呢是这个呃该组件

37:54.370 --> 37:55.010
对不对

37:55.010 --> 37:59.090
该组件使用自己的这个状态

37:59.650 --> 38:00.530
那个状态

38:00.530 --> 38:01.250
conventer1

38:02.530 --> 38:03.010
对吧

38:03.010 --> 38:04.690
使用自己的这个conventer1

38:04.690 --> 38:05.970
这个conventer1

38:06.370 --> 38:06.930
这个状态

38:08.880 --> 38:09.120
ok

38:09.680 --> 38:11.760
好 这边这边就应该是conventer1

38:11.760 --> 38:13.920
这边也应该是setconventer1

38:14.560 --> 38:14.880
对吧

38:14.880 --> 38:15.840
好 我们这边呢就是

38:16.400 --> 38:18.960
conventer1加一个e

38:19.440 --> 38:19.760
ok

38:19.760 --> 38:20.560
它是个技术器

38:21.360 --> 38:21.680
好

38:21.760 --> 38:23.600
然后接下来我们这边来看一下啊

38:23.600 --> 38:24.160
来看一下

38:24.880 --> 38:26.560
接下来你在这边你会看到

38:27.920 --> 38:28.720
我这边的话

38:29.760 --> 38:30.400
呃 我们这样子

38:30.400 --> 38:31.440
我们在值组件这边

38:31.440 --> 38:32.400
我们也写个button

38:33.680 --> 38:34.720
也写个button

38:35.280 --> 38:36.080
啊 这边加e

38:37.520 --> 38:39.440
加e之后这边onclick

38:40.160 --> 38:41.600
等于一个啊

38:41.600 --> 38:42.560
这边使用什么呢

38:42.560 --> 38:44.800
使用这个副组件

38:45.920 --> 38:46.960
给我们传递的这个

38:47.600 --> 38:48.480
setcontroller

38:51.150 --> 38:51.950
setcontroller

38:52.910 --> 38:55.470
啊 大家这边呢是props

38:57.700 --> 38:59.140
点controller加e

38:59.700 --> 39:00.980
啊 突然有点打格啊

39:02.580 --> 39:03.700
好 我们这边为了区分

39:03.700 --> 39:05.540
我们这边给大家加个边框

39:06.180 --> 39:07.060
方便我们看到

39:09.010 --> 39:09.410
ok

39:09.730 --> 39:10.450
好 保存一下

39:11.010 --> 39:11.810
好 保存了之后

39:11.810 --> 39:12.850
然后加这边来看一下

39:15.260 --> 39:16.700
首先的话 这是外层

39:16.700 --> 39:18.860
外层的话是这个APP组件

39:19.260 --> 39:19.660
对吧

39:19.660 --> 39:20.620
整个APP组件

39:20.620 --> 39:21.580
啊 这个的话是什么

39:21.580 --> 39:22.700
这个是我的值组件

39:23.180 --> 39:23.900
啊 值组件

39:23.900 --> 39:24.540
好 我们这边呢

39:24.540 --> 39:26.060
首先第一次第一次都要选择

39:26.140 --> 39:26.780
这个没问题

39:27.580 --> 39:28.620
好 然后接下来的话

39:28.620 --> 39:29.660
我这边我点击加e

39:30.220 --> 39:31.020
点击加e的话

39:31.020 --> 39:31.980
你会发现这边的话

39:31.980 --> 39:34.860
就是副组件和值组件都选人了

39:35.820 --> 39:37.900
这个实际上也是没有问题的

39:38.460 --> 39:39.180
为什么

39:39.180 --> 39:40.780
因为你这边值组件

39:40.780 --> 39:41.980
你这边在改什么呀

39:41.980 --> 39:44.220
你是不是在改这个副组件的状态

39:44.780 --> 39:46.060
你知道controller哪来的

39:46.700 --> 39:47.420
哪来的

39:47.420 --> 39:49.180
是副组件给你传递过来的

39:49.660 --> 39:49.900
对不对

39:49.900 --> 39:52.140
那既然是副组件给你传递过来的呢

39:52.140 --> 39:53.500
你这边改是不是改的是

39:53.500 --> 39:54.780
副组件的这个状态

39:55.340 --> 39:56.940
那副组件的状态一修改

39:56.940 --> 39:59.340
它整个副组件应不应该重新渲染

40:00.140 --> 40:00.620
应该吧

40:01.260 --> 40:02.780
副组件一重新渲染

40:02.780 --> 40:04.220
值组件要不要重新渲染

40:04.220 --> 40:05.100
要吧

40:05.100 --> 40:05.660
对不对

40:05.660 --> 40:06.300
说这边呢

40:06.300 --> 40:07.180
其实是正常的

40:08.300 --> 40:09.260
其实是正常的

40:09.260 --> 40:10.140
而这边的话哪里

40:10.780 --> 40:11.900
哪里可以优化呢

40:11.900 --> 40:12.540
你看我这边

40:13.340 --> 40:14.540
我这边的话

40:14.540 --> 40:17.180
我去修改这个副组件的这个状态

40:17.980 --> 40:18.620
你看

40:18.620 --> 40:20.060
我修改副组件的状态

40:20.060 --> 40:20.940
我修改的是哪个

40:21.500 --> 40:23.500
我修改的是controller1

40:24.940 --> 40:26.140
修改的是controller1

40:26.700 --> 40:27.180
而这个

40:28.220 --> 40:30.860
传递给值组件的这个controller2

40:31.420 --> 40:32.700
有没有发生变化

40:33.980 --> 40:34.860
有没有

40:34.860 --> 40:35.340
没有

40:36.220 --> 40:37.660
它没有发生变化

40:38.300 --> 40:38.860
对不对

40:38.860 --> 40:41.260
你之前这边传递下去的是1

40:41.260 --> 40:42.060
那这一次呢

40:42.060 --> 40:44.140
它传递下去的还是1

40:44.140 --> 40:44.860
但是呢

40:44.860 --> 40:47.820
由于你整个APP组件重新渲染了

40:47.820 --> 40:48.700
所以我这边的话

40:48.700 --> 40:50.300
我不得不干嘛呢

40:50.300 --> 40:52.460
不得不也重新渲染

40:53.020 --> 40:54.300
所以这边的话

40:54.300 --> 40:56.700
会涉及到一个性能的优化点

40:57.340 --> 40:58.300
怎么优化点呢

40:58.300 --> 40:59.180
我们这边的话

40:59.180 --> 41:00.540
就可以使用什么呢

41:00.540 --> 41:03.340
可以使用这个react memo

41:03.900 --> 41:05.180
来我们这边来看一下

41:06.300 --> 41:07.740
react memo

41:08.700 --> 41:10.220
好react memo的话

41:10.220 --> 41:12.140
它是一个高階组件

41:13.020 --> 41:14.780
高階组件我们之前是不是讲过了

41:15.420 --> 41:15.900
对不对

41:15.900 --> 41:17.020
什么是高階组件

41:17.020 --> 41:18.140
我们之前说过的

41:18.140 --> 41:19.900
高階组件它就是一个函数

41:20.460 --> 41:21.660
它接受一个组件

41:21.660 --> 41:23.180
然后既然给你返回一个什么

41:23.180 --> 41:24.380
是返回一个新组件

41:24.940 --> 41:25.660
对不对

41:25.660 --> 41:27.980
好这个react memo它可以干嘛呢

41:27.980 --> 41:31.740
它可以在你相同的这个props的这个情况下

41:32.540 --> 41:35.180
渲染相同的这个结果

41:36.460 --> 41:37.020
看不看不看

41:37.020 --> 41:38.620
也就是意味着你这边这个props

41:39.260 --> 41:40.620
这个代码里面

41:40.620 --> 41:42.540
你这边这个APP

41:42.540 --> 41:44.540
APP你这边再点击这个加1的时候

41:44.540 --> 41:45.340
改的是谁

41:45.340 --> 41:46.700
是不是改的是continental 1

41:47.260 --> 41:47.740
对不对

41:47.740 --> 41:49.100
continental 2也没有改

41:49.100 --> 41:50.540
continental 2没有改

41:50.540 --> 41:51.340
continental 2

41:51.420 --> 41:52.300
一直是

41:52.300 --> 41:53.100
是不是一直是1

41:53.740 --> 41:54.300
对不对

41:54.300 --> 41:55.260
一直是1

41:55.260 --> 41:57.580
好那么我这边的话我就可以干嘛呢

41:57.580 --> 41:59.900
我这边的话因为我这个传递给这个

41:59.900 --> 42:01.020
植组件的这个props

42:01.660 --> 42:02.380
一直都是1

42:02.380 --> 42:03.660
一直都是相等的

42:03.660 --> 42:06.780
那么我这边的话我就不需要它重新渲染

42:07.580 --> 42:09.500
那不需要它重新渲染这边怎么办

42:09.500 --> 42:12.700
好这边就可以使用react memo

42:12.700 --> 42:13.820
用法很简单

42:14.620 --> 42:16.860
你这边react点memo

42:17.420 --> 42:18.460
把它包一下

42:18.460 --> 42:19.100
它是一个什么

42:19.100 --> 42:20.540
它是一个高階组件

42:20.620 --> 42:21.820
好你这边把它把你的这个

42:22.540 --> 42:24.620
把你的敲的com传进去

42:24.620 --> 42:26.300
好整个这个它会干嘛

42:26.300 --> 42:27.980
它会返回一个新组件

42:28.620 --> 42:29.260
对不对

42:29.260 --> 42:30.300
返回一个新组件

42:30.300 --> 42:31.420
这个组件会干嘛

42:31.420 --> 42:32.060
这个组件

42:33.100 --> 42:34.140
返回了新组件

42:37.150 --> 42:39.390
返回的新组件

42:39.390 --> 42:40.510
会在什么呢

42:40.510 --> 42:43.950
会在这个props相同的时候

42:45.230 --> 42:45.870
对不对

42:45.870 --> 42:46.830
然后就是

42:46.830 --> 42:49.710
就是返回的新组件

42:49.710 --> 42:51.790
在props相同的时候

42:51.870 --> 42:54.030
不会重新去

42:54.750 --> 42:55.230
渲染

42:56.110 --> 42:56.750
ok

42:56.750 --> 42:57.950
那我们这边来看一下

42:57.950 --> 42:59.150
能不能得到优化

43:00.190 --> 43:01.310
好这边刷新

43:01.310 --> 43:03.150
第一次啊第一次的渲染

43:03.150 --> 43:04.430
好这边我们点击这个加一

43:05.790 --> 43:08.190
你看现在的话只有什么

43:08.190 --> 43:09.390
是不是只有这个

43:10.270 --> 43:11.710
副组件对不对

43:11.710 --> 43:13.070
就app这个组件

43:13.070 --> 43:14.110
它重新渲染了

43:14.110 --> 43:15.630
但是对于直组件来讲

43:15.630 --> 43:16.350
直组件的话

43:16.350 --> 43:18.670
你这边传入的这个container2

43:19.630 --> 43:20.910
这个值是不是一直都是一样的

43:20.990 --> 43:22.510
包括这个setcontainer2

43:22.510 --> 43:25.070
所以这个值是一直都是一样的

43:25.710 --> 43:26.350
对不对

43:26.350 --> 43:27.310
所以说我这边的话

43:27.310 --> 43:28.750
这个相当于就是这边

43:28.750 --> 43:29.790
传进来的这个props

43:30.750 --> 43:32.030
一直是没变的

43:32.030 --> 43:32.590
没变的话

43:32.590 --> 43:34.430
那我这边就不会重新学了

43:35.550 --> 43:36.270
看到没有

43:36.270 --> 43:37.070
哎这边呢

43:37.070 --> 43:39.070
就是关于这个react memo

43:39.710 --> 43:42.350
非常常用的一个高阶主线

43:43.550 --> 43:44.830
包括我们后面讲那个

43:45.390 --> 43:46.750
包括我们后面讲这个

43:47.390 --> 43:48.430
usecallback

43:48.430 --> 43:49.390
use memo

43:49.390 --> 43:50.590
还会用到它

43:50.670 --> 43:51.310
还会用到它

43:52.350 --> 43:52.670
OK

43:53.470 --> 43:55.310
这是关于这个react memo

43:55.870 --> 43:56.910
react memo的话

43:56.910 --> 43:57.230
这边

43:58.350 --> 43:59.710
我看要有没有什么注意点

44:01.710 --> 44:03.230
这边这边刚刚讲的

44:03.230 --> 44:05.390
这个直组件更新是没有必要的

44:05.390 --> 44:07.070
这边这边

44:07.070 --> 44:09.790
这边你仍然需要注意的是什么呢

44:09.790 --> 44:11.470
就默认情况下

44:11.470 --> 44:13.710
它只会对复杂对象

44:13.710 --> 44:15.870
做一个浅层对比

44:17.070 --> 44:17.710
OK

44:17.710 --> 44:20.110
它只会进行一个浅层对比

44:20.270 --> 44:21.310
那这边意味着什么

44:21.950 --> 44:22.750
意味着比如说

44:24.030 --> 44:25.150
我们这边来写个例子

44:25.710 --> 44:26.750
比如说我这边的话

44:26.750 --> 44:27.710
我传的是一个什么呢

44:27.710 --> 44:28.830
我这边不是conventer的

44:30.510 --> 44:31.710
我们这边复制一份

44:32.430 --> 44:34.030
这边的话不是conventer

44:34.030 --> 44:34.990
这边传的是一个什么呢

44:34.990 --> 44:36.190
传的是一个数组

44:38.270 --> 44:39.550
诶传的是个数组

44:39.550 --> 44:40.190
数组这边

44:40.190 --> 44:41.630
就这边写就可以了

44:42.270 --> 44:42.910
数组

44:42.910 --> 44:44.030
数组的话这边是什么呢

44:44.030 --> 44:45.710
这边是这个学生的名字

44:46.270 --> 44:46.990
比如这个张三

44:50.900 --> 44:51.300
张三

44:52.340 --> 44:53.300
在这边理事

44:53.860 --> 44:55.860
这边对应的是stu

44:56.820 --> 44:59.860
这边set stu

45:00.820 --> 45:01.460
OK

45:01.460 --> 45:02.660
好人家这边这边呢

45:02.660 --> 45:03.860
就是stu

45:04.740 --> 45:06.820
对应这边stu

45:07.460 --> 45:08.740
那set stu

45:10.420 --> 45:12.260
对应set stu

45:12.900 --> 45:14.500
这边使用stu这个状态

45:15.220 --> 45:15.780
OK

45:15.780 --> 45:17.140
好这边拿到

45:17.140 --> 45:17.780
拿到之后

45:17.780 --> 45:18.740
然后将我们这边

45:19.940 --> 45:22.100
这边咱们还是拿一个这个ul嘛

45:23.300 --> 45:24.340
拿一个ul

45:26.260 --> 45:26.820
ul

45:26.820 --> 45:27.540
然后加这边呢

45:27.540 --> 45:28.260
是这个li

45:29.460 --> 45:29.780
不不

45:29.780 --> 45:31.300
这个li應該是干嘛

45:31.300 --> 45:32.660
这边应该是算出来的

45:32.660 --> 45:33.540
对吧

45:33.540 --> 45:35.220
这边const一个lis

45:35.860 --> 45:37.700
等于一个props

45:37.700 --> 45:38.980
点stu

45:38.980 --> 45:39.700
点map

45:41.220 --> 45:43.540
这边的话it index

45:46.270 --> 45:48.110
这边呢是li

45:48.110 --> 45:48.750
对吧

45:48.750 --> 45:49.390
这边key

45:50.270 --> 45:53.150
key对应这个index

45:54.110 --> 45:55.550
啊这边呢是it

45:56.350 --> 45:56.910
ok

45:56.910 --> 45:58.110
啊这边呢是这个lis

46:00.030 --> 46:01.310
啊首先先把它渲染出来

46:02.190 --> 46:03.390
啊这边这边的话

46:04.110 --> 46:05.390
这个函数这个函数

46:05.390 --> 46:06.910
那我们这边先把它那个吧

46:08.190 --> 46:10.990
先把它先把这个这个整个这个

46:10.990 --> 46:11.710
就把删掉

46:12.190 --> 46:12.750
好保存

46:13.470 --> 46:13.790
保存

46:14.510 --> 46:15.870
啊这边说信一下

46:16.590 --> 46:18.670
啊这边这边的话现在这个直主键

46:18.670 --> 46:19.630
直主键的话这个

46:20.190 --> 46:21.550
这个的话是从哪儿接受的

46:21.550 --> 46:22.750
是不是从这个副主键

46:23.310 --> 46:23.710
接受的

46:24.350 --> 46:24.990
对不对

46:24.990 --> 46:26.350
从副主键接受的

46:26.350 --> 46:26.670
好

46:26.670 --> 46:28.030
然后接下来的话我这里

46:30.130 --> 46:30.850
我这边

46:30.850 --> 46:32.210
我在app主键这边

46:32.210 --> 46:33.490
app主键这边的话

46:33.490 --> 46:35.490
我这边再新增一个这个button

46:36.770 --> 46:37.650
在这边

46:37.650 --> 46:39.010
新增一个button

46:39.010 --> 46:39.890
啊这个叫做什么呢

46:39.890 --> 46:40.930
这个叫做添加

46:41.730 --> 46:42.130
学生

46:43.010 --> 46:43.970
啊这边的话

46:43.970 --> 46:46.370
unclick

46:47.170 --> 46:48.050
等于一个

46:49.330 --> 46:51.250
这边我们叫做andstu

46:52.290 --> 46:52.770
handle

46:53.490 --> 46:53.890
好

46:53.890 --> 46:55.650
然后加这边我们写一个这个方形

46:58.580 --> 46:59.060
方形

46:59.780 --> 47:01.460
andstu handle

47:01.460 --> 47:01.940
ok

47:01.940 --> 47:02.180
好

47:02.180 --> 47:03.300
我在这边怎么做

47:03.300 --> 47:04.100
我在这边的话

47:04.100 --> 47:06.260
我直接在这个stu里面

47:07.780 --> 47:08.740
stu里面

47:08.740 --> 47:10.020
我们这边呢这个push

47:11.380 --> 47:11.780
ok

47:11.780 --> 47:12.740
push一个

47:12.740 --> 47:13.380
往5

47:15.780 --> 47:16.100
好

47:16.100 --> 47:16.900
然后加这边的话

47:16.900 --> 47:18.740
我们这边set一下stu

47:19.460 --> 47:19.940
ok

47:19.940 --> 47:21.060
啊这边set stu

47:21.060 --> 47:23.460
然后把这个stu重新拿过去

47:23.460 --> 47:24.500
你看这边是不是就是

47:24.500 --> 47:26.180
又是犯了之前的错误

47:27.460 --> 47:27.780
对不对

47:28.020 --> 47:29.300
又是犯了之前的错误

47:29.300 --> 47:30.020
什么错误

47:30.020 --> 47:32.660
就你这边呢是直接在这个stu上面

47:33.220 --> 47:34.180
是做了这个修改

47:34.740 --> 47:35.620
做了这个修改的话

47:35.620 --> 47:36.500
他会认为什么

47:36.500 --> 47:37.700
你这边地址有没有变

47:38.340 --> 47:40.260
整个这个数组的地址有没有变

47:40.260 --> 47:41.140
是没有变

47:41.780 --> 47:42.180
对不对

47:42.180 --> 47:42.980
没有变的话

47:42.980 --> 47:44.340
他这边就会认为什么

47:44.340 --> 47:45.380
他这边呢就会认为

47:45.380 --> 47:47.780
你这边呢是相同的这个数组

47:47.780 --> 47:49.220
啊他这边的话就是

47:49.220 --> 47:49.620
干嘛呢

47:49.620 --> 47:50.900
他这边也就不会更新

47:51.540 --> 47:52.420
那这边我们来看一下

47:53.700 --> 47:54.820
添加你看

47:54.820 --> 47:55.940
有没有效果

47:55.940 --> 47:56.580
没有效果

47:57.300 --> 47:58.340
没有效果

47:58.340 --> 48:00.180
正确的做法应该是什么

48:00.180 --> 48:01.700
正确的做法是不是

48:01.700 --> 48:03.860
啊刚才是实际上已经说过了

48:03.860 --> 48:04.260
对吧

48:04.260 --> 48:06.500
你这边新建一个数组

48:06.500 --> 48:08.980
啊这边点点点stu

48:09.620 --> 48:10.180
对不对

48:10.180 --> 48:10.500
好

48:10.500 --> 48:11.140
然后回头的话

48:11.140 --> 48:12.260
这边在做修改的时候

48:12.260 --> 48:13.300
这边针对什么

48:13.300 --> 48:14.500
针对这个ar

48:15.460 --> 48:16.660
新的这个数组

48:16.660 --> 48:17.860
来做这个修改

48:17.860 --> 48:19.060
啊包括对象也是一样的

48:19.060 --> 48:19.940
哈你如果是个对象

48:19.940 --> 48:21.060
这边是不是点点点

48:21.060 --> 48:22.660
就是应该是把这个对象展开

48:23.220 --> 48:23.540
对不对

48:23.540 --> 48:24.340
就复制一份嘛

48:24.340 --> 48:25.460
就复制一份那个对象

48:26.020 --> 48:26.340
对不对

48:26.500 --> 48:28.020
然后加这边在这个新对象上面

48:28.500 --> 48:29.220
做这个修改

48:30.180 --> 48:30.900
明白吧

48:30.900 --> 48:31.220
好

48:31.220 --> 48:31.860
然后加这边

48:32.580 --> 48:32.980
设置

48:33.380 --> 48:34.820
设置成新的数组

48:34.820 --> 48:35.380
那这个时候

48:35.380 --> 48:36.180
他检测到的话

48:36.180 --> 48:37.060
他就会发现什么

48:37.060 --> 48:38.020
他就会发现这个

48:39.060 --> 48:39.460
地址

48:40.020 --> 48:40.740
发生了变化

48:41.860 --> 48:42.020
好

48:42.020 --> 48:42.660
这边我们来看一下

48:43.220 --> 48:43.540
小心

48:44.980 --> 48:45.540
是不是OK了

48:46.260 --> 48:46.980
对不对

48:46.980 --> 48:47.460
就OK了

48:49.140 --> 48:49.700
OK

48:49.700 --> 48:51.940
这是关于这个react memo

48:52.740 --> 48:53.380
react memo

48:54.740 --> 48:55.140
啊

48:55.140 --> 48:55.940
react memo

48:55.940 --> 48:57.140
我看一下还有没有其他的

48:57.140 --> 48:58.820
啊这这边还有个支持点

48:59.300 --> 49:00.020
还有个支持点

49:00.580 --> 49:01.460
啊我看一下这边

49:01.460 --> 49:02.180
啊这边的话就是

49:02.180 --> 49:03.540
实际上这个react memo

49:03.540 --> 49:04.260
它的原码

49:04.740 --> 49:06.340
它实际上就是返回一个这个

49:06.340 --> 49:07.300
pure component

49:08.100 --> 49:08.420
OK

49:09.140 --> 49:09.780
啊这边这边

49:09.780 --> 49:11.140
我们把这个稍微调一下

49:11.860 --> 49:12.500
调一下

49:12.500 --> 49:12.740
OK

49:13.380 --> 49:15.060
啊这边这边还得再调一下

49:15.060 --> 49:16.180
那这边它是return

49:16.820 --> 49:17.540
应该是这样子

49:18.500 --> 49:19.060
这样子

49:19.060 --> 49:19.460
OK

49:19.780 --> 49:20.900
啊让他这边这个 memo

49:20.900 --> 49:21.860
memo 他实际上

49:22.340 --> 49:23.300
他这边就是干嘛

49:24.260 --> 49:26.740
就是返回一个这个pure component

49:27.300 --> 49:27.460
啊

49:27.460 --> 49:28.820
那在这边接收你的这个

49:28.820 --> 49:29.460
函数逐渐

49:29.460 --> 49:30.340
那让我这边的话

49:30.340 --> 49:31.620
用这个pure component

49:31.620 --> 49:32.420
给你包一层

49:33.060 --> 49:33.220
啊

49:33.220 --> 49:34.180
这个是它的这个原码

49:34.660 --> 49:35.860
一点也不难啊

49:35.860 --> 49:38.020
特别是你学了那个pure component之后

49:38.500 --> 49:38.820
对吧

49:38.820 --> 49:39.940
你就知道他在做什么

49:41.220 --> 49:41.540
好

49:41.540 --> 49:43.220
然后这边还有最后一个要说的

49:43.780 --> 49:45.380
最后一个要说的就是什么呢

49:45.380 --> 49:46.820
就这个react memo

49:46.820 --> 49:47.940
他还支持什么呢

49:47.940 --> 49:49.300
还支持就是啊

49:49.300 --> 49:50.100
第二个参数

49:50.900 --> 49:51.780
啊第二个参数的话

49:51.940 --> 49:53.940
你这边可以自定义这个比较

49:54.820 --> 49:56.260
自定义比较啊

49:56.260 --> 49:57.700
比较的这个函数

49:57.700 --> 49:58.260
OK

49:58.260 --> 49:59.220
来我们这边来看一下

50:00.660 --> 50:01.460
给我们这边

50:01.460 --> 50:02.660
这边我们刚才说了

50:02.660 --> 50:04.100
你这边这个react memo

50:04.100 --> 50:04.660
它是什么

50:04.660 --> 50:05.700
是不是在这个pops

50:05.700 --> 50:06.740
相同的时候

50:06.740 --> 50:08.100
它就不会重新确展

50:08.820 --> 50:09.380
对不对

50:09.380 --> 50:10.740
好那这边这个pops

50:10.740 --> 50:12.020
的这个比比较规则

50:13.540 --> 50:13.780
啊

50:15.220 --> 50:15.940
这个关于

50:17.780 --> 50:19.140
关于这个pops

50:19.860 --> 50:21.780
的比较规则

50:22.420 --> 50:23.460
我们可以什么呢

50:23.460 --> 50:25.780
可以自定义函数

50:26.580 --> 50:26.980
OK

50:26.980 --> 50:27.540
自定义函数

50:27.540 --> 50:29.300
比如说我这边让我随便写一个

50:29.300 --> 50:30.500
我这边easy equal

50:32.580 --> 50:33.140
对吧

50:33.140 --> 50:33.460
好

50:33.460 --> 50:34.340
然后加在这边

50:34.340 --> 50:35.140
这边让我们这边

50:36.420 --> 50:36.820
function

50:37.780 --> 50:38.420
easy equal

50:39.780 --> 50:40.340
它这边的话

50:40.340 --> 50:41.380
它是有参数的

50:41.380 --> 50:41.540
好

50:41.540 --> 50:42.660
我们这边来看一下它的参数

50:43.460 --> 50:44.100
这在这

50:44.100 --> 50:45.780
它是有介绍的啊

50:45.780 --> 50:46.900
react memo

50:46.900 --> 50:47.700
应该就在这下面

50:48.660 --> 50:50.740
再看一下

50:52.100 --> 50:52.980
在这里

50:52.980 --> 50:53.460
在这里

50:54.260 --> 50:54.340
啊

50:54.340 --> 50:54.900
这边啊

50:54.900 --> 50:56.020
它这边接收

50:56.020 --> 50:56.100
啊

50:56.100 --> 50:57.540
这个就是它之前的pops

50:57.540 --> 50:58.820
这个就是新的pops

50:58.820 --> 50:58.900
好

50:58.900 --> 50:59.220
来

50:59.220 --> 51:00.100
我们这边来看一下嘛

51:01.380 --> 51:02.100
先来看一下

51:03.140 --> 51:04.900
这边接收这两个

51:04.900 --> 51:06.100
然后把它打印出来

51:06.820 --> 51:08.980
一个是prev props

51:12.050 --> 51:13.170
prev props

51:13.170 --> 51:14.290
一个是next

51:15.970 --> 51:16.850
next props

51:18.130 --> 51:18.290
啊

51:18.290 --> 51:19.170
我们打印出来看一下

51:20.930 --> 51:21.170
好

51:21.170 --> 51:22.210
我们这边刷新

51:23.010 --> 51:23.730
刷新之后

51:23.730 --> 51:24.850
然后加在这边

51:24.850 --> 51:25.570
添加学生

51:26.610 --> 51:27.330
你看

51:27.330 --> 51:27.970
prev props

51:27.970 --> 51:28.690
这边already

51:28.690 --> 51:29.410
长度是不是2

51:29.970 --> 51:31.090
然后next props

51:31.090 --> 51:31.810
这边是不是3

51:32.370 --> 51:32.770
对不对

51:32.770 --> 51:33.410
它这边的话

51:33.410 --> 51:34.930
其实就是可以接收到

51:34.930 --> 51:36.530
你新就的这个pops

51:37.090 --> 51:37.250
好

51:37.250 --> 51:38.050
接收到之后

51:38.050 --> 51:39.010
然后加你在这边

51:39.010 --> 51:39.810
你就可以干嘛了

51:39.810 --> 51:41.090
你就可以来自定义

51:41.090 --> 51:41.970
你的比较规则

51:43.090 --> 51:43.810
自定义

51:49.550 --> 51:53.390
自定义你的比较规则

51:54.430 --> 51:54.750
OK

51:55.310 --> 51:56.590
但是这里你一定要注意

51:56.590 --> 51:57.310
它这边的话

51:57.310 --> 52:00.030
和那个should component update

52:00.670 --> 52:01.790
它有个区别

52:01.790 --> 52:03.790
就它刚好是和那个

52:03.790 --> 52:05.150
should component update

52:05.150 --> 52:06.430
它刚好是相反的

52:06.990 --> 52:07.950
它这边是怎么呢

52:07.950 --> 52:09.230
就是如果你比较了

52:09.230 --> 52:10.430
这个结果一致

52:11.470 --> 52:12.430
结果一致

52:12.430 --> 52:13.230
结果一致的话

52:13.230 --> 52:14.590
你这边就返回处

52:15.150 --> 52:16.430
返回处它就干完了

52:16.430 --> 52:17.630
它就不渲染

52:18.190 --> 52:19.150
因为它觉得你这个

52:19.150 --> 52:21.310
新就的这个pops是相等的嘛

52:21.310 --> 52:21.790
对不对

52:21.790 --> 52:23.150
所以它这边就是返回处

52:24.430 --> 52:25.550
如果你返回处

52:26.430 --> 52:27.470
比较完成后

52:31.490 --> 52:35.170
如果你返回处

52:36.610 --> 52:38.050
则表示什么呢

52:38.050 --> 52:38.930
则表示

52:40.770 --> 52:43.490
新就的这个pops

52:44.130 --> 52:44.610
相等

52:45.330 --> 52:46.610
那么则什么呢

52:46.610 --> 52:47.890
则不渲染

52:48.690 --> 52:49.330
OK

52:49.330 --> 52:50.530
那相对应的

52:50.530 --> 52:51.570
如果你返回

52:52.370 --> 52:54.370
如果你返回

52:55.410 --> 52:55.890
force

52:56.850 --> 52:57.890
则代表什么呢

52:57.890 --> 52:59.090
则代表

52:59.090 --> 53:01.970
新就的这个pops

53:02.610 --> 53:03.570
不相等

53:04.530 --> 53:06.450
那么就渲染

53:07.330 --> 53:07.810
OK

53:07.810 --> 53:08.690
好比如说我们这边

53:08.690 --> 53:10.770
这边我们返回这个force

53:11.490 --> 53:13.410
是不是新就的这个pops不相等

53:13.410 --> 53:14.050
不相等的话

53:14.050 --> 53:14.930
我们这边我们来看一下

53:16.050 --> 53:17.810
我们这边添加学生

53:17.810 --> 53:18.850
是没问题

53:18.850 --> 53:19.330
对不对

53:19.330 --> 53:19.890
好我这边

53:19.890 --> 53:21.010
我如果返回这个处

53:22.050 --> 53:22.930
返回处

53:22.930 --> 53:23.730
返回处之后

53:23.730 --> 53:24.690
然后加这边

53:24.770 --> 53:25.730
我们来看一下

53:25.730 --> 53:26.930
你看我这边点击添加

53:27.730 --> 53:28.290
OK

53:28.290 --> 53:29.890
这边的话是变了

53:29.890 --> 53:30.290
对不对

53:30.290 --> 53:30.850
这边是变了

53:30.850 --> 53:31.890
但是他有没有冲击学的

53:32.450 --> 53:33.330
没有冲击学的

53:34.290 --> 53:34.770
你要注意

53:34.770 --> 53:37.090
他刚好和修的component

53:37.090 --> 53:38.290
他是返的

53:38.290 --> 53:40.130
修的component update

53:40.130 --> 53:40.770
他是什么

53:40.770 --> 53:41.970
返回处代表什么

53:41.970 --> 53:43.090
是不是代表渲染

53:43.090 --> 53:44.370
然后返回force代表

53:44.370 --> 53:45.170
是不渲染

53:46.210 --> 53:46.930
对不对

53:46.930 --> 53:48.210
这边他官方写的有

53:49.010 --> 53:49.410
在这里

53:50.290 --> 53:52.050
于class逐渐中的这个

53:52.050 --> 53:53.570
修的component update

53:53.570 --> 53:55.010
方法不同的是

53:55.010 --> 53:56.290
如果props相等

53:56.850 --> 53:57.570
返回什么呢

53:57.570 --> 53:58.690
返回处

53:58.690 --> 53:59.730
如果这个不相等

53:59.730 --> 54:00.450
不相等的话

54:00.450 --> 54:02.050
你需要返回force

54:02.050 --> 54:04.530
这个和这个修的component update

54:04.530 --> 54:05.330
刚好是什么

54:05.330 --> 54:07.170
刚好是相反的

54:08.050 --> 54:08.690
OK

54:08.690 --> 54:09.890
刚好是相反的

54:09.890 --> 54:10.930
这点一定要注意

54:13.090 --> 54:14.210
这是关于这个

54:15.170 --> 54:16.370
react memo

54:17.250 --> 54:17.970
react memo

54:19.570 --> 54:20.850
其他的话就没什么了

54:20.850 --> 54:22.850
他主要就是根据你的这个props

54:22.930 --> 54:23.890
判断这个props

54:23.890 --> 54:25.890
和上一次的这个之前的props

54:25.890 --> 54:26.770
是否相等

54:26.770 --> 54:27.890
相等我就

54:27.890 --> 54:29.650
我就直接使用这个缓存

54:29.650 --> 54:29.970
对吧

54:29.970 --> 54:31.250
相当其实你就把这个

54:31.250 --> 54:32.450
理解成缓存

54:32.450 --> 54:33.730
我就直接用缓存

54:33.730 --> 54:34.690
我就不渲染

54:35.330 --> 54:35.650
OK

54:37.740 --> 54:37.980
好

54:37.980 --> 54:40.220
这是关于这个react memo

54:40.220 --> 54:40.460
好

54:40.460 --> 54:41.420
接下来

54:41.420 --> 54:43.580
接下来的话是两个hook

54:44.540 --> 54:45.660
两个hook

54:45.660 --> 54:47.660
一个叫做use callback

54:48.300 --> 54:50.700
另外一个叫做use memo

54:50.700 --> 54:51.500
这个的话都是

54:52.460 --> 54:54.460
就是当时那个hook是

54:54.460 --> 54:55.740
出来的时候

54:55.740 --> 54:58.220
推出了这个dep hook

54:58.220 --> 55:00.460
他这个的话也是做这个性能优化的

55:01.100 --> 55:02.860
我们这边我们首先来看一下

55:03.500 --> 55:04.140
看一下

55:04.140 --> 55:06.540
首先我们来先来看这个use callback

55:07.260 --> 55:08.220
use callback

55:08.220 --> 55:09.900
我这边我举了个例子

55:09.900 --> 55:10.620
举个例子

55:10.620 --> 55:11.580
我们这边来看一下

55:12.940 --> 55:13.500
这边的话

55:13.500 --> 55:16.060
我先就直接把这个样式就拿过来了

55:16.060 --> 55:17.660
样式就不带着敲了

55:17.660 --> 55:19.580
这边有个css

55:19.820 --> 55:20.540
css

55:20.540 --> 55:22.140
然后接下来这边的话有一个这个

55:23.340 --> 55:28.320
新建一个app.model.css

55:28.880 --> 55:29.120
好

55:29.120 --> 55:30.800
把这个样式的话我们把它拿过来

55:33.760 --> 55:35.200
样式把它拿过来

55:35.200 --> 55:36.320
各式画一下

55:36.320 --> 55:36.960
OK

55:36.960 --> 55:37.280
好

55:37.280 --> 55:39.520
然后接下来这边的话是我的这个app组件

55:40.320 --> 55:40.480
好

55:40.480 --> 55:42.320
这app组件我就把这个删了

55:42.320 --> 55:43.360
这笔记里面都有的

55:44.000 --> 55:45.120
笔记里面都有的

55:45.120 --> 55:46.000
我把删了

55:47.760 --> 55:48.160
好

55:48.160 --> 55:49.600
让一下这边的话rsf

55:50.640 --> 55:50.880
好

55:50.880 --> 55:52.560
这边这边这个app

55:52.560 --> 55:53.040
好

55:53.040 --> 55:53.920
然后接下来

55:53.920 --> 55:55.920
这边这边我还需要两个指数件

55:55.920 --> 55:57.040
所以我这边改一下名字

55:57.600 --> 55:58.960
叫做敲的com1

55:59.840 --> 56:00.160
好

56:00.160 --> 56:01.680
然后加这边再新建一个

56:02.880 --> 56:05.760
敲的com2.css

56:07.120 --> 56:07.840
OK

56:07.840 --> 56:09.600
我们这边来看一下这个敲的com1

56:10.720 --> 56:12.640
敲的com1的话这边很简单

56:13.440 --> 56:14.080
拿过来

56:15.520 --> 56:16.320
直接拿过来

56:17.280 --> 56:17.840
拿过来

56:17.840 --> 56:19.120
然后加这边放到这边

56:19.120 --> 56:20.320
这边我也就删了

56:20.320 --> 56:21.440
这笔记里面也是有的

56:24.050 --> 56:24.290
好

56:24.290 --> 56:24.530
这里

56:25.330 --> 56:27.010
这里的话我们来看一下这个敲的com1

56:27.010 --> 56:28.130
敲的com1的话

56:28.130 --> 56:29.090
这边干嘛

56:29.090 --> 56:30.370
是不是该指组件

56:31.970 --> 56:33.250
该指组件

56:33.250 --> 56:35.410
所以维护了一个

56:35.410 --> 56:37.330
自己的这个状态

56:38.210 --> 56:38.610
对不对

56:38.610 --> 56:39.250
自己的状态

56:39.250 --> 56:40.450
大家这边让我这个

56:41.330 --> 56:42.210
点击加1

56:42.210 --> 56:42.770
加1的话

56:42.770 --> 56:43.970
再加上我这个状态

56:43.970 --> 56:44.930
所以发生改变

56:44.930 --> 56:45.650
发生改变的话

56:45.650 --> 56:46.930
让我加整个组件

56:46.930 --> 56:48.290
这边应该重新删了

56:48.290 --> 56:48.770
对不对

56:48.770 --> 56:49.570
这个很简单

56:50.690 --> 56:51.650
就是一个技术器

56:52.290 --> 56:52.530
好

56:52.610 --> 56:53.810
这边这个child com2

56:54.530 --> 56:55.330
也是一样的

56:56.130 --> 56:56.690
也是一样的

56:56.690 --> 56:57.730
这边把名字改一下

56:58.370 --> 56:59.250
这边是2

56:59.970 --> 57:01.490
然后加这边是2

57:02.370 --> 57:02.770
ok

57:02.770 --> 57:04.530
这边首先两个指组件

57:04.530 --> 57:04.770
好

57:04.770 --> 57:05.810
来到这个app

57:07.410 --> 57:08.450
app这边

57:08.450 --> 57:09.250
app这边的话

57:09.250 --> 57:09.890
我们首先的话

57:09.890 --> 57:11.570
我们这边引入这两个指组件

57:12.770 --> 57:13.410
import

57:15.090 --> 57:16.770
child com1

57:17.810 --> 57:18.210
from

57:20.750 --> 57:21.230
ok

57:22.270 --> 57:24.270
当前目录下的components

57:24.830 --> 57:26.670
下面的child com1

57:27.230 --> 57:28.430
以及这个child com2

57:30.270 --> 57:30.990
ok

57:30.990 --> 57:31.390
好

57:31.390 --> 57:32.670
然后接下来在这里

57:32.670 --> 57:33.310
这里的话

57:33.310 --> 57:34.910
我这边有一个这个div

57:36.110 --> 57:36.350
好

57:36.350 --> 57:37.950
我这边把这个样式把引入

57:39.070 --> 57:39.950
这边 import

57:40.750 --> 57:42.190
import styles

57:43.150 --> 57:43.470
from

57:44.030 --> 57:46.030
当前目录下面的css

57:46.830 --> 57:47.710
下面的这个样式

57:48.270 --> 57:48.510
好

57:48.670 --> 57:50.110
这边这边class name

57:53.150 --> 57:54.270
class name

57:54.270 --> 57:56.030
然后这边是styles

57:56.670 --> 57:57.950
点这个child

57:58.670 --> 57:58.990
这边

57:59.710 --> 58:01.390
叫做child come container

58:03.470 --> 58:05.550
child come container

58:05.550 --> 58:07.550
而里面里面的话就使用什么呢

58:07.550 --> 58:08.830
使用这个child com1

58:10.510 --> 58:12.270
child com1

58:12.270 --> 58:13.390
以及child com2

58:14.910 --> 58:15.390
对吧

58:15.390 --> 58:15.870
使用

58:16.510 --> 58:16.750
好

58:16.750 --> 58:19.230
然后加这边在我的这个app这个组件里面

58:19.230 --> 58:20.030
我这边的话

58:20.030 --> 58:22.030
我自己的话也维护了一个状态

58:22.430 --> 58:23.550
所以我这边呢就是

58:26.510 --> 58:27.470
user state

58:28.190 --> 58:28.510
对吧

58:28.510 --> 58:29.630
把state拿过来

58:29.630 --> 58:30.190
我这边的话

58:30.190 --> 58:32.430
我自身也维护了一个这个状态

58:34.030 --> 58:34.430
好

58:34.430 --> 58:35.470
const

58:35.470 --> 58:36.910
这边container

58:37.790 --> 58:38.910
然后set

58:39.710 --> 58:40.270
container

58:41.390 --> 58:43.870
等于一个user state

58:44.910 --> 58:45.070
1

58:46.030 --> 58:46.510
ok

58:46.510 --> 58:46.990
这个的话

58:47.710 --> 58:49.470
这是app

58:50.030 --> 58:50.990
组件

58:50.990 --> 58:54.510
自身维护的状态

58:55.390 --> 58:56.190
然后加在这边

58:56.190 --> 58:56.670
这边的话

58:56.670 --> 58:57.550
我这个app这边

58:57.550 --> 58:57.950
这边的话

58:57.950 --> 58:58.590
我自身的话

58:58.590 --> 59:00.110
我写一个这个G17

59:01.070 --> 59:01.310
好

59:01.310 --> 59:02.350
这边这边把这个

59:03.870 --> 59:05.070
这个类名给一下

59:08.100 --> 59:09.460
这边是styles

59:10.020 --> 59:11.460
点这个container

59:12.100 --> 59:12.420
好

59:12.420 --> 59:13.060
这边

59:13.060 --> 59:14.500
下面的话是使用植组件

59:15.380 --> 59:16.900
这边是使用植组件

59:18.660 --> 59:19.140
ok

59:19.140 --> 59:20.020
上面的话是什么呢

59:20.020 --> 59:21.060
上面是我这个自身

59:21.780 --> 59:23.300
自身的这个技术器

59:25.060 --> 59:26.020
自身的技术器

59:26.580 --> 59:26.820
好

59:26.820 --> 59:27.300
在这边

59:27.300 --> 59:27.700
这边呢

59:27.700 --> 59:28.980
我们就是一个div

59:31.470 --> 59:32.910
class name

59:33.790 --> 59:34.350
这边呢

59:34.350 --> 59:36.430
是styles

59:36.430 --> 59:36.830
点

59:38.030 --> 59:39.550
这边有个btncontainer

59:42.690 --> 59:42.930
好

59:42.930 --> 59:43.570
在这里面

59:44.210 --> 59:44.930
这里面的话

59:44.930 --> 59:46.130
然后加这边div

59:46.690 --> 59:48.370
这边container

59:49.490 --> 59:51.570
对应的是一个container

59:52.210 --> 59:52.530
好

59:52.530 --> 59:53.890
然后加这边有个button

59:54.050 --> 59:55.410
button我这边就直接拿过来

59:56.130 --> 59:56.770
这边就这个

59:59.150 --> 59:59.390
ok

01:00:00.110 --> 01:00:00.670
好了

01:00:00.670 --> 01:00:01.310
格式化一下

01:00:01.950 --> 01:00:02.190
好

01:00:02.190 --> 01:00:02.590
保存

01:00:03.230 --> 01:00:03.950
保存了之后

01:00:03.950 --> 01:00:04.670
然后加这边

01:00:04.670 --> 01:00:05.790
我们来看一下效果

01:00:07.150 --> 01:00:07.870
效果的话

01:00:07.870 --> 01:00:08.750
目前来讲的话

01:00:08.750 --> 01:00:09.790
是这个样子的

01:00:09.790 --> 01:00:10.350
双新一下

01:00:11.150 --> 01:00:11.470
效果

01:00:11.470 --> 01:00:12.990
我们这边把那个app的

01:00:12.990 --> 01:00:13.390
也加上

01:00:14.350 --> 01:00:14.830
这边

01:00:14.830 --> 01:00:15.230
打印

01:00:16.110 --> 01:00:16.750
app

01:00:17.710 --> 01:00:18.110
组件

01:00:18.990 --> 01:00:19.950
渲染了

01:00:19.950 --> 01:00:20.350
保存

01:00:21.630 --> 01:00:21.870
好

01:00:21.870 --> 01:00:22.750
目前来讲的话

01:00:22.750 --> 01:00:23.870
是这样子的

01:00:23.870 --> 01:00:24.590
这个结构的话

01:00:24.590 --> 01:00:25.310
有非常简单

01:00:26.430 --> 01:00:26.910
对吧

01:00:26.910 --> 01:00:28.990
整个这个是一个app组件

01:00:28.990 --> 01:00:30.510
app组件这边是不是

01:00:30.510 --> 01:00:31.870
它自身有个状态

01:00:31.870 --> 01:00:32.750
自身有个状态

01:00:32.750 --> 01:00:33.470
这边有个什么

01:00:33.470 --> 01:00:34.430
有个加一

01:00:34.430 --> 01:00:34.750
好

01:00:34.750 --> 01:00:35.230
这边的话

01:00:35.230 --> 01:00:36.270
有两个直组件

01:00:37.550 --> 01:00:38.510
两个直组件的话

01:00:38.510 --> 01:00:39.230
这边是什么

01:00:39.230 --> 01:00:40.110
是个直组件

01:00:40.110 --> 01:00:41.230
各自维护的状态

01:00:41.790 --> 01:00:42.990
这个这个状态的话

01:00:42.990 --> 01:00:44.990
不是说你这个副组件给我的

01:00:44.990 --> 01:00:45.310
对吧

01:00:45.310 --> 01:00:45.950
是我这个组件

01:00:45.950 --> 01:00:46.830
我自身维护的

01:00:47.710 --> 01:00:47.870
好

01:00:47.870 --> 01:00:49.150
那么这边我们来看一下

01:00:49.150 --> 01:00:50.430
首先我点这个

01:00:50.430 --> 01:00:51.070
这个加一

01:00:51.790 --> 01:00:52.830
点这个加一

01:00:52.830 --> 01:00:53.630
当我点击

01:00:53.630 --> 01:00:54.430
把这个清楚

01:00:55.390 --> 01:00:57.470
当我点击这个加一的时候

01:00:57.470 --> 01:00:58.270
显示

01:00:58.670 --> 01:01:00.510
app组件渲染了

01:01:00.510 --> 01:01:02.350
悄的抗拇一渲染了

01:01:02.350 --> 01:01:03.470
悄的抗

01:01:04.270 --> 01:01:05.790
这边应该是这边没改

01:01:05.790 --> 01:01:07.310
这边应该是悄的抗拇二

01:01:09.390 --> 01:01:09.870
重新来

01:01:12.850 --> 01:01:13.650
这边

01:01:13.650 --> 01:01:14.450
让它显示

01:01:14.450 --> 01:01:16.050
app组件渲染了

01:01:16.050 --> 01:01:17.330
悄的抗拇一渲染了

01:01:17.330 --> 01:01:18.930
悄的抗拇二渲染了

01:01:18.930 --> 01:01:20.130
这个的话是不是没有问题

01:01:21.330 --> 01:01:22.130
对不对

01:01:22.130 --> 01:01:22.690
没有问题

01:01:23.250 --> 01:01:24.130
因为你这边的话

01:01:24.130 --> 01:01:24.930
你这个app

01:01:25.650 --> 01:01:27.170
就是你这个跟组件

01:01:27.170 --> 01:01:28.930
或者说他们的副组件

01:01:28.930 --> 01:01:30.210
状态一修改

01:01:30.210 --> 01:01:31.650
必然会涉及到什么了

01:01:31.650 --> 01:01:33.730
必然会涉及到这个副组件

01:01:33.730 --> 01:01:34.770
重新渲染

01:01:34.770 --> 01:01:36.770
那你副组件重新渲染之后

01:01:36.770 --> 01:01:38.370
你两个直组件

01:01:38.370 --> 01:01:39.410
要不要重新渲染

01:01:39.410 --> 01:01:41.010
是不是肯定也要重新渲染

01:01:41.010 --> 01:01:41.490
对不对

01:01:41.490 --> 01:01:42.290
没问题

01:01:42.290 --> 01:01:42.610
好

01:01:42.610 --> 01:01:43.410
然后加这边的话

01:01:43.410 --> 01:01:44.530
我们这边我们来更新什么了

01:01:44.530 --> 01:01:45.650
我们来更新这个

01:01:45.650 --> 01:01:46.610
直组件的状态

01:01:46.610 --> 01:01:47.250
不用我们这边

01:01:48.530 --> 01:01:49.490
你会发现更新

01:01:49.490 --> 01:01:50.770
直组件状态的时候

01:01:50.770 --> 01:01:53.410
由于这个状态是谁维护的

01:01:53.570 --> 01:01:55.810
是不是就是我这个直组件维护的

01:01:55.810 --> 01:01:56.370
对不对

01:01:56.370 --> 01:01:58.770
他会不会去影响他的副组件

01:01:58.770 --> 01:01:59.570
不会

01:01:59.570 --> 01:02:00.530
会不会去影响

01:02:00.530 --> 01:02:01.570
比如这个组件

01:02:01.570 --> 01:02:02.610
更不会

01:02:02.610 --> 01:02:03.090
对不对

01:02:03.090 --> 01:02:04.050
他这边的话更新了

01:02:04.050 --> 01:02:04.850
只有更新什么

01:02:04.850 --> 01:02:06.610
是不是只有更新他自己这个组件

01:02:07.410 --> 01:02:08.130
对不对

01:02:08.130 --> 01:02:08.930
包括这边也是

01:02:09.890 --> 01:02:10.450
这边也是

01:02:11.650 --> 01:02:12.210
看到没有

01:02:12.210 --> 01:02:13.330
他只会影响

01:02:13.330 --> 01:02:14.130
这边这个组件

01:02:14.770 --> 01:02:15.490
OK

01:02:15.490 --> 01:02:15.890
好

01:02:15.890 --> 01:02:16.610
然后接下来

01:02:16.610 --> 01:02:17.890
我们把这个代码

01:02:17.890 --> 01:02:19.010
稍作修改

01:02:19.570 --> 01:02:20.530
怎么修改呢

01:02:20.530 --> 01:02:22.290
我们把这个状态

01:02:22.290 --> 01:02:24.610
提升到副组件这边

01:02:25.490 --> 01:02:25.730
OK

01:02:25.730 --> 01:02:26.690
也就是说我直组件

01:02:26.690 --> 01:02:28.130
不再维护这个数据了

01:02:28.130 --> 01:02:28.690
而是什么呢

01:02:28.690 --> 01:02:30.290
而是副组件来维护

01:02:30.290 --> 01:02:31.010
维护了之后

01:02:31.010 --> 01:02:32.690
你通过这个pops

01:02:32.690 --> 01:02:33.570
传递给我

01:02:34.850 --> 01:02:36.290
通过pops传递给我

01:02:36.290 --> 01:02:36.530
好

01:02:36.530 --> 01:02:37.650
把这个稍微改一下

01:02:38.850 --> 01:02:39.650
来到这边

01:02:39.650 --> 01:02:41.410
这边的话我就再维护

01:02:41.410 --> 01:02:42.690
再维护两个

01:02:42.690 --> 01:02:44.130
这边那是container1

01:02:44.130 --> 01:02:45.650
这边是container2

01:02:46.290 --> 01:02:47.570
setcontainer1

01:02:48.290 --> 01:02:49.570
setcontainer2

01:02:50.290 --> 01:02:50.610
OK

01:02:50.610 --> 01:02:51.330
这边是什么呢

01:02:51.410 --> 01:02:52.290
这个是

01:02:52.290 --> 01:02:53.410
这是要传递给

01:02:54.210 --> 01:02:57.010
这是要传递给

01:02:57.650 --> 01:02:58.050
这个

01:02:58.610 --> 01:02:59.170
choud

01:03:00.770 --> 01:03:01.410
com1

01:03:02.210 --> 01:03:03.650
组件的数据

01:03:04.850 --> 01:03:05.490
对吧

01:03:05.490 --> 01:03:05.890
好

01:03:05.890 --> 01:03:06.210
下面

01:03:06.210 --> 01:03:07.810
下面那是传递给这个choud

01:03:07.810 --> 01:03:08.130
com2

01:03:09.090 --> 01:03:10.210
组件的这个数据

01:03:11.090 --> 01:03:11.650
OK

01:03:11.650 --> 01:03:11.890
好

01:03:11.890 --> 01:03:12.290
这边

01:03:12.290 --> 01:03:12.690
这边的话

01:03:12.690 --> 01:03:14.930
你就是应该是container

01:03:14.930 --> 01:03:15.810
等于一个

01:03:17.810 --> 01:03:18.690
什么container1

01:03:19.490 --> 01:03:19.890
对不对

01:03:19.970 --> 01:03:22.850
那叫这边是setcontainer

01:03:23.410 --> 01:03:24.210
等于一个

01:03:24.850 --> 01:03:30.050
setcontainer1

01:03:30.770 --> 01:03:31.250
对吧

01:03:31.250 --> 01:03:31.490
好

01:03:31.490 --> 01:03:31.890
这边

01:03:31.890 --> 01:03:32.370
复制一下

01:03:34.910 --> 01:03:35.070
好

01:03:35.070 --> 01:03:36.270
这边那是2

01:03:36.670 --> 01:03:38.110
这边是2

01:03:38.910 --> 01:03:39.390
OK

01:03:39.390 --> 01:03:40.030
现在的话

01:03:40.030 --> 01:03:40.510
我这边

01:03:41.390 --> 01:03:43.550
组件不再维护数据

01:03:43.550 --> 01:03:44.430
而是有什么呢

01:03:44.430 --> 01:03:45.710
有复组件

01:03:45.710 --> 01:03:47.070
你给我传递过来

01:03:47.870 --> 01:03:48.110
好

01:03:48.110 --> 01:03:48.590
那接下来

01:03:48.590 --> 01:03:49.950
来到我的组织件

01:03:49.950 --> 01:03:50.750
组织件这边

01:03:50.750 --> 01:03:52.190
这边我就不需要再维护状态了

01:03:52.750 --> 01:03:52.990
好

01:03:52.990 --> 01:03:54.430
这边不需要维护状态了

01:03:54.430 --> 01:03:55.390
我这边应该是什么呢

01:03:55.390 --> 01:03:55.790
这边的话

01:03:55.790 --> 01:03:57.470
应该是一个props

01:03:58.350 --> 01:03:59.150
好props

01:03:59.150 --> 01:03:59.790
然后接下来

01:03:59.790 --> 01:04:00.270
这边

01:04:00.270 --> 01:04:00.670
这边呢

01:04:00.670 --> 01:04:04.350
就是这个props.container

01:04:04.350 --> 01:04:04.750
这边呢

01:04:04.750 --> 01:04:06.990
是props.setcontainer

01:04:06.990 --> 01:04:07.470
对吧

01:04:07.470 --> 01:04:08.190
那props

01:04:08.830 --> 01:04:09.310
OK

01:04:09.310 --> 01:04:10.030
这边也一样

01:04:11.310 --> 01:04:12.510
这边也一样

01:04:13.150 --> 01:04:13.710
把这个删了

01:04:15.310 --> 01:04:15.790
这边呢

01:04:15.790 --> 01:04:19.070
是props

01:04:19.070 --> 01:04:23.840
props.container

01:04:23.920 --> 01:04:24.800
然后props

01:04:25.920 --> 01:04:26.640
包括这边

01:04:27.680 --> 01:04:28.080
props

01:04:28.640 --> 01:04:29.120
OK

01:04:29.120 --> 01:04:29.280
好

01:04:29.280 --> 01:04:29.760
来看一下

01:04:31.200 --> 01:04:31.760
首先这边

01:04:31.760 --> 01:04:32.880
来看一下这个应用

01:04:32.880 --> 01:04:33.360
刷新

01:04:34.240 --> 01:04:34.640
这边呢

01:04:34.640 --> 01:04:35.520
一样出来对吧

01:04:35.520 --> 01:04:35.760
好

01:04:35.760 --> 01:04:37.280
我首先点击这个加一

01:04:37.280 --> 01:04:37.840
这个的话

01:04:37.840 --> 01:04:38.720
是三个都要宣展

01:04:39.280 --> 01:04:39.920
没问题

01:04:39.920 --> 01:04:40.640
对不对

01:04:40.640 --> 01:04:40.880
好

01:04:40.880 --> 01:04:41.440
然后接下来

01:04:41.440 --> 01:04:42.080
我这边的话

01:04:43.040 --> 01:04:43.920
我点击这个

01:04:44.720 --> 01:04:45.600
点击这个

01:04:45.600 --> 01:04:46.960
直组件1的这个加一

01:04:46.960 --> 01:04:48.560
你注意这个数据是哪来的

01:04:48.560 --> 01:04:50.400
这个数据是副组件

01:04:50.400 --> 01:04:51.360
传递给我的

01:04:51.360 --> 01:04:51.520
好

01:04:51.520 --> 01:04:52.400
我这边点击加一

01:04:53.120 --> 01:04:54.400
当我点击加一之后

01:04:54.400 --> 01:04:55.200
你会发现

01:04:55.200 --> 01:04:56.560
我重新渲染了

01:04:56.560 --> 01:04:58.080
副组件也重新渲染了

01:04:58.080 --> 01:04:59.600
包括这边这个直组件

01:04:59.600 --> 01:05:00.480
也重新渲染了

01:05:01.200 --> 01:05:01.600
为什么

01:05:02.640 --> 01:05:03.040
为什么

01:05:03.840 --> 01:05:04.640
原因很简单

01:05:04.640 --> 01:05:06.320
原因其实刚才已经讲过了

01:05:06.320 --> 01:05:08.880
你改的这个状态来自于哪里

01:05:08.880 --> 01:05:10.240
来自于副组件

01:05:10.800 --> 01:05:11.440
对不对

01:05:11.440 --> 01:05:13.360
是副组件的状态

01:05:13.360 --> 01:05:15.280
副组件的状态一遍

01:05:15.280 --> 01:05:17.280
副组件要不要重新渲染

01:05:18.080 --> 01:05:19.760
你副组件肯定要重新渲染

01:05:20.800 --> 01:05:21.520
对不对

01:05:21.600 --> 01:05:22.560
肯定要重新渲染

01:05:22.560 --> 01:05:24.160
那副组件一重新渲染

01:05:24.160 --> 01:05:25.200
那你两个直组件

01:05:25.840 --> 01:05:26.640
要不要重新渲染

01:05:27.200 --> 01:05:28.400
是不是肯定要重新渲染

01:05:28.960 --> 01:05:29.440
对不对

01:05:29.440 --> 01:05:30.640
肯定会有这样的现象

01:05:31.760 --> 01:05:32.880
那如何解决呢

01:05:33.760 --> 01:05:34.720
如何解决呢

01:05:34.720 --> 01:05:36.560
那我们自然而然会想到什么

01:05:36.560 --> 01:05:39.600
是不是会想到刚才所学的那个react memo

01:05:40.640 --> 01:05:41.120
对不对

01:05:41.120 --> 01:05:43.120
react memo就是来解决这个问题的

01:05:43.120 --> 01:05:44.080
react memo的话

01:05:44.080 --> 01:05:46.080
你这边每次传的这个状态

01:05:46.080 --> 01:05:47.200
是相同的的话

01:05:47.200 --> 01:05:49.040
那我另外一个他就不会重新渲染

01:05:49.840 --> 01:05:50.800
那我们这边来看一下吧

01:05:54.000 --> 01:05:55.520
不是传的状态是传的pops

01:05:57.520 --> 01:05:59.680
from 这边react

01:06:00.880 --> 01:06:01.600
好这边

01:06:01.600 --> 01:06:03.200
这边呢就是react memo

01:06:04.160 --> 01:06:06.400
react.memo

01:06:09.380 --> 01:06:10.260
好这边也是一样

01:06:10.820 --> 01:06:11.780
不要把父子过来吧

01:06:14.770 --> 01:06:15.490
好这边

01:06:15.490 --> 01:06:18.850
这边呢是react.memo

01:06:21.060 --> 01:06:21.620
OK

01:06:21.620 --> 01:06:22.180
保存一下

01:06:22.820 --> 01:06:23.540
保存一下之后

01:06:24.100 --> 01:06:25.140
然后加这边来看一下

01:06:26.260 --> 01:06:27.380
首先这边

01:06:27.380 --> 01:06:28.900
所有都重新渲染了

01:06:28.900 --> 01:06:29.300
对吧

01:06:29.620 --> 01:06:29.940
好

01:06:29.940 --> 01:06:31.460
然后加这边我点击加1

01:06:32.900 --> 01:06:33.860
啊点击加1

01:06:33.860 --> 01:06:34.100
走

01:06:34.740 --> 01:06:35.860
你会发现什么

01:06:35.860 --> 01:06:37.540
是不是app组建重新渲染

01:06:37.540 --> 01:06:38.740
child.com1渲染了

01:06:38.740 --> 01:06:40.340
但是这个child.com2

01:06:41.380 --> 01:06:42.020
影不影响

01:06:43.060 --> 01:06:43.700
是不影响

01:06:44.260 --> 01:06:44.660
对不对

01:06:44.660 --> 01:06:45.140
不影响

01:06:45.140 --> 01:06:45.700
为什么

01:06:45.700 --> 01:06:47.780
因为针对于这个child.com2来讲

01:06:48.580 --> 01:06:49.940
你这边你这个又没变

01:06:50.900 --> 01:06:53.300
你这个controller2没变

01:06:53.300 --> 01:06:53.620
对不对

01:06:53.620 --> 01:06:55.460
我这边是依赖于这个controller2

01:06:56.180 --> 01:06:57.540
以及这个setcontroller2

01:06:58.260 --> 01:06:59.940
你这边的话刚才改的是什么

01:06:59.940 --> 01:07:01.140
是不是改的是controller1

01:07:01.780 --> 01:07:02.020
对不对

01:07:02.020 --> 01:07:03.300
你改了这个controller1

01:07:03.300 --> 01:07:05.460
你整个副组件重新渲染

01:07:05.460 --> 01:07:06.500
这个是没问题

01:07:06.500 --> 01:07:08.660
你这个组件child.com1重新渲染

01:07:08.660 --> 01:07:09.220
没问题

01:07:09.220 --> 01:07:11.380
但这个controller2这个值是没有变的

01:07:12.020 --> 01:07:12.500
对不对

01:07:12.500 --> 01:07:14.020
这两个值是没有变的

01:07:14.020 --> 01:07:14.980
啊说实话我这边的话

01:07:14.980 --> 01:07:16.500
我这个react.memo

01:07:16.500 --> 01:07:17.380
它就会使用什么

01:07:17.380 --> 01:07:18.660
是不是会使用这个缓存

01:07:19.380 --> 01:07:20.020
对不对

01:07:20.020 --> 01:07:20.900
会使用缓存

01:07:20.900 --> 01:07:21.700
啊这边

01:07:21.700 --> 01:07:22.420
再来看一下啊

01:07:23.220 --> 01:07:23.620
这边

01:07:23.620 --> 01:07:24.900
首先你这个这边

01:07:26.100 --> 01:07:27.060
嗯啊这里

01:07:27.220 --> 01:07:28.340
啊这里也是一个更新

01:07:28.340 --> 01:07:29.220
啊你看这边

01:07:29.220 --> 01:07:31.540
这边的话我在点击这个加1的时候

01:07:31.540 --> 01:07:32.820
说副直改什么

01:07:32.820 --> 01:07:33.940
是不是只改这个副组件

01:07:34.580 --> 01:07:36.100
值组件就不会再干嘛了

01:07:36.100 --> 01:07:38.980
是不是两个值组件就不会再重新渲染了

01:07:38.980 --> 01:07:39.380
对不对

01:07:39.380 --> 01:07:40.260
因为你这边的话

01:07:41.300 --> 01:07:43.300
这里这个controller1和controller2

01:07:43.300 --> 01:07:44.100
是不是都没变的

01:07:44.980 --> 01:07:45.380
对不对

01:07:45.940 --> 01:07:46.980
啊你看这边

01:07:46.980 --> 01:07:49.220
它就指挥这个副组件渲染

01:07:49.220 --> 01:07:50.820
好这边这边就指挥什么了

01:07:50.820 --> 01:07:51.220
好吧

01:07:51.220 --> 01:07:51.860
清空

01:07:51.860 --> 01:07:55.540
这边的话就指挥这个副组件和这个child.com1渲染

01:07:56.260 --> 01:07:56.900
好这边

01:07:56.900 --> 01:07:58.180
这边呢就指挥什么了

01:07:58.180 --> 01:07:59.860
就是这个副组件

01:07:59.860 --> 01:08:01.060
啊APP组件

01:08:01.060 --> 01:08:03.300
和这个child.com2渲染

01:08:04.020 --> 01:08:04.580
特别啊

01:08:04.980 --> 01:08:05.620
啊没问题

01:08:06.180 --> 01:08:09.300
哎讲了半天好像还没讲到我们的这个use callback

01:08:10.100 --> 01:08:10.740
对不对

01:08:10.740 --> 01:08:12.500
还没讲到我们的use callback

01:08:12.500 --> 01:08:13.620
好不要着急

01:08:13.620 --> 01:08:15.940
接下来的话咱们这边这个use callback

01:08:16.340 --> 01:08:17.060
就会出现了

01:08:17.540 --> 01:08:19.220
好假设我现在的话

01:08:19.220 --> 01:08:21.220
我在我的这个APP组件这边

01:08:22.660 --> 01:08:25.460
我这边的话我再来定义一个什么了

01:08:25.540 --> 01:08:27.380
再来定义一个函数

01:08:28.660 --> 01:08:31.060
啊我要把这个前因后果先给你讲清楚

01:08:31.940 --> 01:08:32.740
对不对

01:08:32.740 --> 01:08:33.940
啊先给你讲清楚

01:08:33.940 --> 01:08:35.540
比如我这边还有一个函数

01:08:35.540 --> 01:08:37.300
这个函数的话这边就打印一个

01:08:38.020 --> 01:08:38.660
啊这边

01:08:38.660 --> 01:08:39.460
test

01:08:40.420 --> 01:08:40.980
触发了

01:08:43.250 --> 01:08:44.050
test触发

01:08:44.850 --> 01:08:46.770
ok好这个函数的话

01:08:46.770 --> 01:08:47.650
他要干嘛呢

01:08:47.650 --> 01:08:49.810
他也要传递给指组件

01:08:51.010 --> 01:08:51.730
这边test

01:08:52.370 --> 01:08:53.250
等于一个

01:08:54.770 --> 01:08:55.490
呃test

01:08:56.450 --> 01:08:58.850
对吧啊这边传递给这个指组件

01:09:00.530 --> 01:09:00.930
ok

01:09:00.930 --> 01:09:02.530
然后在指组件里面我可以干嘛呢

01:09:02.530 --> 01:09:03.490
我可以调用啊

01:09:03.490 --> 01:09:04.770
比如我这边有个这个button

01:09:05.890 --> 01:09:06.770
有个button

01:09:06.770 --> 01:09:07.650
这边这个test

01:09:08.290 --> 01:09:09.330
好这边呢是

01:09:10.610 --> 01:09:11.170
click

01:09:12.050 --> 01:09:12.530
等于

01:09:13.570 --> 01:09:16.290
啊这边这边就是调用这个props

01:09:17.090 --> 01:09:18.370
props.test

01:09:19.890 --> 01:09:20.290
ok

01:09:20.290 --> 01:09:21.810
调用你传递过来这个函数

01:09:22.850 --> 01:09:24.130
啊包括这边也是一样

01:09:25.090 --> 01:09:26.610
好这边保存

01:09:26.610 --> 01:09:27.490
保存了之后

01:09:27.490 --> 01:09:29.330
然后下这边咱们来看一下啊

01:09:29.330 --> 01:09:31.170
来看一下现在的这个现象是什么

01:09:31.730 --> 01:09:34.210
好当我这边点击加一的时候

01:09:34.770 --> 01:09:38.610
你会发现所有的这个指组件重新渲染

01:09:39.250 --> 01:09:41.010
啊首先这个test的这个方法是没问题的

01:09:41.010 --> 01:09:42.290
对吧这个是触发了

01:09:42.290 --> 01:09:43.410
啊这个是触发了

01:09:43.410 --> 01:09:44.610
啊这个是没问题

01:09:44.610 --> 01:09:46.850
好当我这边点击这个加一的时候

01:09:47.570 --> 01:09:49.330
所有的重新渲染

01:09:49.330 --> 01:09:50.690
啊这边也是一样

01:09:50.690 --> 01:09:51.970
所有的重新渲染

01:09:52.930 --> 01:09:54.850
哎这个就奇怪了

01:09:56.210 --> 01:09:57.570
对吧这个就奇怪了

01:09:57.570 --> 01:09:59.330
刚才不都还好好的吗

01:10:00.130 --> 01:10:02.290
怎么现在感觉又不好死呢呢

01:10:03.410 --> 01:10:05.010
这问题出在哪里呢

01:10:05.570 --> 01:10:08.050
哎这个问题就出在这边

01:10:09.090 --> 01:10:11.250
就出在这个test这边

01:10:12.850 --> 01:10:13.730
因为你这边

01:10:14.610 --> 01:10:16.690
你这边点击这个加一的时候

01:10:16.690 --> 01:10:18.690
啊比如说我们以这个指组件为例嘛

01:10:18.690 --> 01:10:20.370
你这边点击加一的时候

01:10:20.530 --> 01:10:22.370
是不是去修改了这个副组件

01:10:22.850 --> 01:10:24.930
对不对修改了这个副组件的这个状态

01:10:25.410 --> 01:10:27.170
副组件的状态一变

01:10:27.170 --> 01:10:29.810
整个副组件是不是要重新渲染

01:10:30.610 --> 01:10:31.570
重新渲染的话

01:10:31.570 --> 01:10:33.490
这边的话它就会生成一个什么呢

01:10:33.490 --> 01:10:35.410
生成一个新的test

01:10:36.290 --> 01:10:41.810
ok每次重新渲染的时候

01:10:42.450 --> 01:10:47.650
就会生成一个全新的test

01:10:48.370 --> 01:10:51.810
那既然是全新的test的函数

01:10:51.810 --> 01:10:53.970
你这边这个test的函数是要作为什么

01:10:53.970 --> 01:10:56.370
是不是作为这个pop传给指组件的

01:10:56.370 --> 01:10:59.970
那么自然而然这个指组件接收到的这个pops

01:10:59.970 --> 01:11:02.130
是不是也和刚才就不一样了

01:11:03.490 --> 01:11:03.970
对不对

01:11:04.530 --> 01:11:06.130
也就和刚才不一样了

01:11:06.130 --> 01:11:07.250
那和刚才不一样的话

01:11:07.250 --> 01:11:08.690
那你指组件要不要重新渲染

01:11:09.330 --> 01:11:10.530
肯定要重新渲染嘛

01:11:11.090 --> 01:11:11.410
对不对

01:11:11.410 --> 01:11:12.370
包括你这边也是

01:11:13.090 --> 01:11:13.810
这边也是

01:11:13.810 --> 01:11:14.370
啊我这边

01:11:15.330 --> 01:11:17.890
修改这个副组件的这个状态

01:11:17.890 --> 01:11:18.930
对面点加一

01:11:18.930 --> 01:11:20.290
你会发现两个指组件

01:11:21.090 --> 01:11:22.450
也重新这个渲染了

01:11:22.450 --> 01:11:23.090
为什么

01:11:23.090 --> 01:11:24.290
原因也是一样的

01:11:24.290 --> 01:11:25.890
你这边这个状态一变

01:11:25.890 --> 01:11:27.010
状态一变的话

01:11:27.010 --> 01:11:29.090
整个副组件重新渲染

01:11:29.090 --> 01:11:29.970
重新渲染的话

01:11:29.970 --> 01:11:30.450
这边的话

01:11:30.450 --> 01:11:32.690
它会生成一个全新的这个test函数

01:11:34.370 --> 01:11:34.690
好了

01:11:34.690 --> 01:11:36.290
这边相当于就是传递给这个

01:11:36.290 --> 01:11:37.410
指组件的这个test

01:11:38.210 --> 01:11:39.410
它就不一样了

01:11:39.410 --> 01:11:41.170
不一样就意味着pops不一样

01:11:41.170 --> 01:11:41.970
pops不一样

01:11:42.690 --> 01:11:44.610
那我还能不能用之前的缓穿

01:11:44.610 --> 01:11:45.330
我就不能用

01:11:45.890 --> 01:11:46.290
对不对

01:11:46.290 --> 01:11:47.810
我这边的话两个指组件

01:11:47.810 --> 01:11:49.730
就都会重新渲染

01:11:50.450 --> 01:11:51.570
好了怎么办呢

01:11:51.570 --> 01:11:52.450
哎这边的话

01:11:52.450 --> 01:11:53.970
我们就可以使用什么呢

01:11:53.970 --> 01:11:55.170
就可以使用这个

01:11:55.170 --> 01:11:55.970
use call back

01:11:57.250 --> 01:11:58.130
好看看在哪里

01:11:58.130 --> 01:11:58.290
哈

01:12:00.770 --> 01:12:01.170
在这里

01:12:02.450 --> 01:12:03.970
这个时候我们就可以使用

01:12:03.970 --> 01:12:04.930
use call back

01:12:05.650 --> 01:12:06.770
来解决这个问题

01:12:07.330 --> 01:12:08.210
啊这个use call back

01:12:08.210 --> 01:12:08.930
它是个hook

01:12:09.650 --> 01:12:10.210
是个hook

01:12:10.770 --> 01:12:13.490
它这边它的作用是什么呢

01:12:13.490 --> 01:12:16.210
它的作用其实就是缓存一个函数

01:12:17.010 --> 01:12:18.210
你让它接受两个函数

01:12:18.210 --> 01:12:20.530
第一个就是你要缓存的函数

01:12:20.530 --> 01:12:21.330
第二个是什么呢

01:12:21.330 --> 01:12:22.290
第二个是你的依赖

01:12:22.930 --> 01:12:24.930
啊就是比如在这个a或者这个b

01:12:25.490 --> 01:12:26.850
啊这两个依赖变了之后

01:12:26.850 --> 01:12:28.930
我重新生成一份缓存

01:12:29.810 --> 01:12:31.890
ok重新生成一份缓存

01:12:31.890 --> 01:12:33.730
好那接下来我们这边我们来试一下

01:12:34.610 --> 01:12:35.570
我们这边的话

01:12:35.570 --> 01:12:36.610
use call back

01:12:38.980 --> 01:12:40.820
use call back

01:12:42.660 --> 01:12:43.700
ok好

01:12:43.700 --> 01:12:45.860
人家这边的话使用use call back

01:12:47.700 --> 01:12:48.980
使用use call back

01:12:48.980 --> 01:12:50.420
好使用这个use call back

01:12:50.420 --> 01:12:53.540
人家这边把我们这个要缓存的这个函数

01:12:54.180 --> 01:12:54.980
我们把它干嘛

01:12:54.980 --> 01:12:55.860
把它放进去

01:12:57.060 --> 01:12:57.620
对不对

01:12:57.620 --> 01:12:58.420
把它放进去

01:12:59.140 --> 01:13:00.020
啊这边是什么

01:13:00.820 --> 01:13:03.860
那这does nothing when called only one

01:13:04.500 --> 01:13:05.860
啊这边的话就是你的依赖

01:13:06.900 --> 01:13:07.780
啊这边没有依赖

01:13:07.780 --> 01:13:10.020
没有依赖你这边就放一个这个空数组

01:13:10.020 --> 01:13:10.980
ok好

01:13:11.060 --> 01:13:12.420
然后再这边我们生成一个

01:13:12.900 --> 01:13:14.420
这边叫做new test

01:13:15.940 --> 01:13:18.020
ok那这个new test的就是什么

01:13:18.020 --> 01:13:19.300
这个的话就是一个缓存

01:13:20.180 --> 01:13:23.140
啊使用了

01:13:25.540 --> 01:13:26.900
使用了这个

01:13:27.780 --> 01:13:29.300
use call back之后

01:13:30.660 --> 01:13:32.500
call back之后

01:13:33.220 --> 01:13:35.380
我们针对什么呢

01:13:35.380 --> 01:13:37.780
针对这个test函数

01:13:38.500 --> 01:13:40.980
做了一个这个缓存

01:13:42.100 --> 01:13:43.140
做了一个缓存

01:13:43.220 --> 01:13:44.180
啊这个缓存的话

01:13:44.180 --> 01:13:45.940
这边的话它是没有什么依赖的

01:13:45.940 --> 01:13:47.380
啊但你如果有这个依赖

01:13:47.380 --> 01:13:49.220
啊比如这边它依赖于比较conventer

01:13:49.220 --> 01:13:50.340
依conventer一变了

01:13:50.340 --> 01:13:52.820
它这边就要重新这个生成一份新的

01:13:52.820 --> 01:13:53.700
啊这边也可以

01:13:53.700 --> 01:13:55.940
你就把你的依赖写到这个数组里面就

01:13:55.940 --> 01:13:56.980
去就可以了

01:13:56.980 --> 01:13:57.620
ok

01:13:57.620 --> 01:13:59.540
而做了这个缓存什么意思呢

01:13:59.540 --> 01:14:01.300
当你做了这个缓存之后

01:14:01.300 --> 01:14:02.500
好我们这边

01:14:02.500 --> 01:14:05.220
我们这个啊传给这个直途键了

01:14:05.220 --> 01:14:07.620
这边传的就是这个new test

01:14:08.420 --> 01:14:09.460
啊new test

01:14:09.460 --> 01:14:11.540
好我们首先先看一下这个效果

01:14:12.420 --> 01:14:13.860
先看一下问题有没有解决

01:14:14.500 --> 01:14:16.980
好这边第一次第一次都要重新选择对吧

01:14:16.980 --> 01:14:17.940
这个没问题

01:14:17.940 --> 01:14:19.380
好这边让我点击这个加一

01:14:20.660 --> 01:14:21.220
解决了吧

01:14:22.260 --> 01:14:23.540
没问题了吧对不对

01:14:23.540 --> 01:14:24.420
这边点击加一

01:14:25.700 --> 01:14:26.820
没问题吧对不对

01:14:26.820 --> 01:14:28.820
你这个chot.com2没有重新选择

01:14:28.820 --> 01:14:30.340
啊这边点击这边加一

01:14:30.900 --> 01:14:33.140
所以chot.com1没有重新选择对不对

01:14:33.140 --> 01:14:34.420
这个test仍然是好死的

01:14:35.380 --> 01:14:37.140
仍然是好死的对不对

01:14:37.140 --> 01:14:39.380
什么原因啊原因很简单

01:14:39.380 --> 01:14:41.380
比如说我们这边刚才在点击这个的时候

01:14:41.700 --> 01:14:44.020
点击这个的时候是不是它发生变化

01:14:45.140 --> 01:14:45.780
对不对

01:14:45.780 --> 01:14:47.380
这个content.er发生变化

01:14:47.380 --> 01:14:49.140
content.er发生变化之后

01:14:49.140 --> 01:14:51.300
整个组件重新渲染

01:14:51.860 --> 01:14:53.140
整个组件重新渲染

01:14:53.140 --> 01:14:53.860
按照刚才的话

01:14:53.860 --> 01:14:56.420
你这个test是不是要生成一份新的

01:14:56.420 --> 01:14:58.580
但是我这边使用这个use callback

01:14:58.580 --> 01:14:59.780
我把它缓存了

01:15:00.500 --> 01:15:01.380
缓存了的话

01:15:01.380 --> 01:15:04.660
它就不会生成一份全新的这个函数

01:15:05.780 --> 01:15:07.620
不会生成这个全新的函数

01:15:07.620 --> 01:15:08.180
除非什么呢

01:15:08.180 --> 01:15:09.380
除非你这边依赖变了

01:15:10.020 --> 01:15:12.020
我这边要不要生成新的这个缓存

01:15:12.020 --> 01:15:13.620
只取决于我这边的依赖

01:15:14.660 --> 01:15:15.300
明白吧

01:15:15.300 --> 01:15:17.620
那我这边的话就不会生成全新的

01:15:17.620 --> 01:15:19.700
那不会生成全新的就意味着什么

01:15:19.700 --> 01:15:22.340
我这边传递给这个指主件的时候

01:15:22.340 --> 01:15:24.420
所以意味着这一次的这个pops

01:15:24.420 --> 01:15:26.820
和之前的这个pops是一样的

01:15:27.860 --> 01:15:28.420
对不对

01:15:28.420 --> 01:15:29.860
那既然是一样的话

01:15:29.860 --> 01:15:30.980
那这边的话它就干嘛

01:15:30.980 --> 01:15:33.060
它这边是不是就是你两个指主件

01:15:33.700 --> 01:15:34.580
两个指主件

01:15:34.580 --> 01:15:36.580
所以就不会重新渲染

01:15:37.540 --> 01:15:38.500
没有没有

01:15:38.500 --> 01:15:40.900
这个就是use callback

01:15:41.780 --> 01:15:43.700
这个就是use callback

01:15:43.700 --> 01:15:44.900
搞懂没有

01:15:44.900 --> 01:15:46.980
它的主要就是什么

01:15:46.980 --> 01:15:49.380
主要就是缓存函数

01:15:49.380 --> 01:15:50.980
就是做这个事情的

01:15:52.980 --> 01:15:54.100
好好看我这边写的有没有

01:15:54.100 --> 01:15:56.500
这边使用use callback进行优化

01:15:56.500 --> 01:15:58.260
这边这边刚才说了

01:15:58.260 --> 01:16:00.020
它主要就是什么呢

01:16:00.020 --> 01:16:01.700
主要就是对函数做函数

01:16:01.700 --> 01:16:03.300
这边给你记一下

01:16:04.180 --> 01:16:05.700
use callback

01:16:08.750 --> 01:16:10.830
主要记住

01:16:12.030 --> 01:16:14.030
记住use callback

01:16:14.030 --> 01:16:16.190
主要就是对什么呢

01:16:16.190 --> 01:16:20.510
对函数进行缓存

01:16:22.860 --> 01:16:23.740
没有没有

01:16:23.740 --> 01:16:25.820
哎对函数进行缓存

01:16:25.820 --> 01:16:26.620
好给你加出

01:16:27.340 --> 01:16:28.300
加一个香花线

01:16:29.100 --> 01:16:29.340
OK

01:16:29.980 --> 01:16:31.260
好与之相对的

01:16:31.260 --> 01:16:32.380
还有一个什么呢

01:16:32.380 --> 01:16:34.060
还有一个use memo

01:16:34.780 --> 01:16:35.500
坚持一下

01:16:35.500 --> 01:16:35.980
坚持一下

01:16:35.980 --> 01:16:37.180
最后一个知识点了

01:16:37.260 --> 01:16:39.420
虽然我知道已经讲了一个多小时了

01:16:39.420 --> 01:16:40.860
马上最后一个知识点

01:16:40.860 --> 01:16:41.980
讲完我们就下课

01:16:42.860 --> 01:16:45.180
好最后一个是这个use memo

01:16:45.500 --> 01:16:46.380
use memo的话

01:16:46.380 --> 01:16:49.580
它基本上其实和那个use callback

01:16:49.580 --> 01:16:50.540
其实很相似

01:16:51.260 --> 01:16:52.380
非常相似

01:16:52.380 --> 01:16:53.340
它主要是什么呢

01:16:53.340 --> 01:16:55.100
它主要是缓存函

01:16:55.100 --> 01:16:56.380
刚才我们这个是什么

01:16:56.380 --> 01:16:57.740
我们刚才那个use callback

01:16:57.740 --> 01:16:59.340
是缓存函数

01:17:00.060 --> 01:17:00.780
对不对

01:17:00.780 --> 01:17:02.940
主要是这个缓存函数

01:17:02.940 --> 01:17:04.300
它的缓它是主要是什么呢

01:17:04.300 --> 01:17:05.900
它是缓存这个函

01:17:06.220 --> 01:17:07.980
好来我们这边还是给来看个例子吧

01:17:08.940 --> 01:17:09.980
看这么一个例子

01:17:11.100 --> 01:17:12.860
好把这边就还是把它删了

01:17:13.420 --> 01:17:14.140
这边把它删了

01:17:14.140 --> 01:17:15.500
这个在笔记里面是有的

01:17:16.700 --> 01:17:17.740
在在在

01:17:19.260 --> 01:17:20.220
就在这边

01:17:20.220 --> 01:17:22.060
只不过我这边省略了一些

01:17:22.060 --> 01:17:23.180
有些人我就没写了

01:17:23.900 --> 01:17:25.100
我把它拿过来吧

01:17:25.100 --> 01:17:26.140
把整个把它拿过来

01:17:27.260 --> 01:17:28.300
把它放到这里

01:17:30.700 --> 01:17:31.580
放到这边

01:17:32.140 --> 01:17:32.460
OK

01:17:33.980 --> 01:17:35.580
好这边我就把它删了

01:17:39.330 --> 01:17:40.610
好 rsf

01:17:41.090 --> 01:17:41.730
重新来

01:17:42.290 --> 01:17:43.890
好这边这边APP

01:17:43.890 --> 01:17:44.770
好我在这边

01:17:44.770 --> 01:17:46.370
这边的话我写两个状态

01:17:49.730 --> 01:17:50.530
一个是

01:17:50.530 --> 01:17:51.970
啊这边use state

01:17:51.970 --> 01:17:53.170
首先把这个use state

01:17:53.970 --> 01:17:55.090
把它放进来

01:17:55.090 --> 01:17:56.930
好我这边呢我维护两个状态

01:17:58.370 --> 01:18:00.850
维护两个状态

01:18:02.210 --> 01:18:03.010
分别是什么呢

01:18:03.010 --> 01:18:05.890
分别首先一个是container

01:18:06.610 --> 01:18:08.130
setcontainer

01:18:08.690 --> 01:18:09.890
这个是我们的技术器

01:18:12.320 --> 01:18:13.680
啊这个是我们的技术器

01:18:14.240 --> 01:18:14.880
OK

01:18:14.880 --> 01:18:17.120
好然后加这边再拿一个什么呢

01:18:17.120 --> 01:18:17.920
再来一个这个

01:18:18.880 --> 01:18:20.160
这个是就是可控

01:18:20.160 --> 01:18:20.880
受控组件

01:18:21.440 --> 01:18:23.200
啊就我一会会写一个输入框

01:18:23.200 --> 01:18:24.080
输入框的话

01:18:24.080 --> 01:18:25.920
我们一般是不要把它写成这个受控的

01:18:26.480 --> 01:18:27.120
对吧

01:18:27.120 --> 01:18:28.400
啊这边呢就是set

01:18:29.120 --> 01:18:29.520
where

01:18:30.400 --> 01:18:32.640
等于一个use state

01:18:33.200 --> 01:18:34.400
一开始是控制圈

01:18:36.320 --> 01:18:37.040
OK

01:18:37.040 --> 01:18:37.840
好在我这边

01:18:38.400 --> 01:18:39.280
在我这边的话

01:18:39.280 --> 01:18:40.160
我这边div

01:18:40.160 --> 01:18:42.240
div里面这边有个he

01:18:43.840 --> 01:18:45.840
he的话这边有一个container

01:18:47.440 --> 01:18:49.040
对应对应的这个值

01:18:49.040 --> 01:18:50.240
这个值的话倒不是说

01:18:50.240 --> 01:18:52.080
这边直接是container

01:18:52.080 --> 01:18:52.880
而是什么呢

01:18:52.880 --> 01:18:54.000
通过一个这个函数

01:18:56.110 --> 01:18:57.630
啊这边通过一个函数

01:18:57.630 --> 01:18:59.790
这边叫做get count

01:19:01.790 --> 01:19:02.430
get count

01:19:02.830 --> 01:19:04.510
而这个get count的话

01:19:04.510 --> 01:19:05.710
这边的话我们会return

01:19:06.430 --> 01:19:07.070
return什么呢

01:19:07.070 --> 01:19:09.470
return这个container

01:19:09.470 --> 01:19:10.670
加上一个100

01:19:11.230 --> 01:19:13.150
也就是说在之前的状态的基础上

01:19:13.150 --> 01:19:14.110
做一个20计算

01:19:14.670 --> 01:19:15.150
啊这边

01:19:17.360 --> 01:19:18.000
在之前

01:19:21.730 --> 01:19:25.570
在之前的状态的基础上

01:19:26.290 --> 01:19:27.090
做一个

01:19:27.810 --> 01:19:29.650
二次计算

01:19:30.210 --> 01:19:30.530
对吧

01:19:30.530 --> 01:19:31.170
你这边是1

01:19:31.170 --> 01:19:32.610
我这边的话给你加个100

01:19:32.610 --> 01:19:33.810
做个20计算

01:19:33.810 --> 01:19:34.290
好这边呢

01:19:34.290 --> 01:19:34.850
我们就是什么呢

01:19:34.850 --> 01:19:35.090
这边呢

01:19:35.090 --> 01:19:36.450
我们就是调用这个函数

01:19:39.250 --> 01:19:39.730
怎么样

01:19:39.730 --> 01:19:40.850
调用这个函数

01:19:40.850 --> 01:19:41.730
得到这个值

01:19:41.730 --> 01:19:42.930
那这边我们换个名字嘛

01:19:42.930 --> 01:19:43.570
叫做组数

01:19:45.490 --> 01:19:45.730
OK

01:19:46.290 --> 01:19:46.610
好

01:19:46.610 --> 01:19:47.410
然后接下来的话

01:19:47.410 --> 01:19:47.970
这边下面

01:19:47.970 --> 01:19:49.090
下面有个这个div

01:19:50.930 --> 01:19:52.050
下面首先有个but

01:19:53.570 --> 01:19:54.210
有个but

01:19:54.210 --> 01:19:55.730
but的话是加1

01:19:55.730 --> 01:19:56.930
加1的话这边

01:19:56.930 --> 01:19:57.890
unclick

01:19:59.570 --> 01:20:00.930
这边肯定是什么

01:20:00.930 --> 01:20:01.810
这边是不是就是

01:20:03.010 --> 01:20:04.690
setcontainer

01:20:05.410 --> 01:20:06.530
这边是什么

01:20:06.530 --> 01:20:08.210
是container加1

01:20:09.410 --> 01:20:09.970
对不对

01:20:09.970 --> 01:20:10.930
container加1

01:20:10.930 --> 01:20:12.050
修改这个字

01:20:12.050 --> 01:20:12.370
好

01:20:12.370 --> 01:20:13.010
然后接下来

01:20:13.010 --> 01:20:14.130
我们下面再干嘛呢

01:20:14.130 --> 01:20:15.330
我们再写一个这个

01:20:15.330 --> 01:20:16.210
文本输入框

01:20:18.610 --> 01:20:20.690
说个写个文本输入框

01:20:20.690 --> 01:20:22.290
它是一个受控主线

01:20:23.410 --> 01:20:24.210
受控主线

01:20:24.210 --> 01:20:24.770
这边的话

01:20:24.770 --> 01:20:26.210
unchange

01:20:27.890 --> 01:20:29.010
还记得受控主线吧

01:20:29.970 --> 01:20:30.930
不要忘了

01:20:31.570 --> 01:20:31.730
好

01:20:31.730 --> 01:20:32.050
这边呢

01:20:32.050 --> 01:20:32.530
就是e

01:20:33.090 --> 01:20:33.490
对吧

01:20:33.490 --> 01:20:34.850
拿到这个时间对象

01:20:34.850 --> 01:20:34.930
好

01:20:34.930 --> 01:20:35.250
这边呢

01:20:35.250 --> 01:20:36.050
就是set

01:20:36.770 --> 01:20:37.890
这个vl

01:20:38.690 --> 01:20:39.570
那加这边把什么

01:20:39.570 --> 01:20:40.450
传进去呀

01:20:40.450 --> 01:20:42.050
1点target

01:20:42.610 --> 01:20:43.730
点value

01:20:44.530 --> 01:20:45.090
对吧

01:20:45.090 --> 01:20:45.890
把这个传过去

01:20:46.690 --> 01:20:46.850
好

01:20:46.850 --> 01:20:47.890
我们这边先来看一下

01:20:47.890 --> 01:20:48.130
啊

01:20:48.130 --> 01:20:49.410
先来看一下这边

01:20:49.570 --> 01:20:50.610
然后这边vv

01:20:50.610 --> 01:20:53.170
这个vl这个没有用吗

01:20:53.170 --> 01:20:53.410
好

01:20:53.410 --> 01:20:53.730
看一下

01:20:55.010 --> 01:20:55.170
哦

01:20:55.170 --> 01:20:55.570
这里啊

01:20:55.570 --> 01:20:56.450
它是受控主线

01:20:56.450 --> 01:20:56.930
受控主线

01:20:56.930 --> 01:20:58.050
你这边要给个什么

01:20:58.050 --> 01:20:58.770
给个value

01:20:59.570 --> 01:20:59.970
对不对

01:20:59.970 --> 01:21:00.690
value等于

01:21:00.690 --> 01:21:01.170
vl

01:21:02.370 --> 01:21:02.610
啊

01:21:02.610 --> 01:21:03.170
这pops

01:21:03.170 --> 01:21:03.890
pops没有啊

01:21:04.850 --> 01:21:05.090
好

01:21:05.090 --> 01:21:05.490
我们这边

01:21:05.490 --> 01:21:06.050
我们来看一下

01:21:06.850 --> 01:21:07.410
来看一下

01:21:08.050 --> 01:21:08.690
这边刷新

01:21:09.570 --> 01:21:10.130
刷新的话

01:21:10.130 --> 01:21:11.410
这边这个总数

01:21:11.410 --> 01:21:12.050
101

01:21:12.050 --> 01:21:13.170
我这边加1

01:21:13.170 --> 01:21:14.130
这边变成102

01:21:14.850 --> 01:21:15.410
对吧

01:21:15.410 --> 01:21:16.370
哎没什么问题

01:21:16.370 --> 01:21:16.530
啊

01:21:16.530 --> 01:21:17.570
这边我正常的输入

01:21:18.370 --> 01:21:18.530
哎

01:21:18.530 --> 01:21:19.490
感觉没什么问题

01:21:20.050 --> 01:21:20.610
对吧

01:21:20.610 --> 01:21:21.730
感觉没什么问题

01:21:21.730 --> 01:21:23.330
但这个问题出在哪里呢

01:21:23.330 --> 01:21:24.690
这个问题出在这边

01:21:25.330 --> 01:21:26.610
就是你这个函数

01:21:26.610 --> 01:21:28.450
这个函数是不是做20集团的

01:21:28.450 --> 01:21:28.850
对不对

01:21:28.850 --> 01:21:29.490
我们来看一下

01:21:30.050 --> 01:21:31.490
我们这边的话打印一句话

01:21:32.050 --> 01:21:32.370
啊

01:21:32.370 --> 01:21:33.890
打印比如说这个get counter

01:21:35.980 --> 01:21:36.380
函数

01:21:37.100 --> 01:21:37.420
调用

01:21:39.180 --> 01:21:39.900
OK

01:21:39.900 --> 01:21:40.140
好

01:21:40.140 --> 01:21:41.020
我们这边刷新

01:21:41.580 --> 01:21:42.220
刷新之后

01:21:42.220 --> 01:21:42.780
我这边的话

01:21:42.780 --> 01:21:43.500
我第一次

01:21:43.500 --> 01:21:44.860
第一次它肯定要调用嘛

01:21:44.860 --> 01:21:45.180
对不对

01:21:45.180 --> 01:21:46.700
你第一次你这边肯定要调用

01:21:46.700 --> 01:21:48.860
调用这边计算出新的值

01:21:48.860 --> 01:21:49.180
好

01:21:49.180 --> 01:21:50.540
然后加这边我们点击加1

01:21:51.100 --> 01:21:52.220
点击加1之后

01:21:52.220 --> 01:21:53.100
这边变化

01:21:53.100 --> 01:21:54.540
这边重新调用

01:21:55.340 --> 01:21:56.460
这个能不能理解

01:21:57.180 --> 01:21:57.660
没问题

01:21:58.300 --> 01:21:58.700
对不对

01:21:58.700 --> 01:21:59.260
也没问题

01:21:59.260 --> 01:22:01.100
因为你这边你加1加1的话

01:22:01.100 --> 01:22:02.780
你这个 counter那边了

01:22:02.780 --> 01:22:03.900
counter那边了是吧

01:22:04.620 --> 01:22:06.380
就应该重新调这个函数

01:22:06.380 --> 01:22:07.740
是不是重新去计算这个值啊

01:22:08.380 --> 01:22:08.940
对不对

01:22:08.940 --> 01:22:09.180
啊

01:22:09.180 --> 01:22:10.140
这个也是没问题的

01:22:10.140 --> 01:22:10.300
啊

01:22:10.300 --> 01:22:11.900
所以我这边点击加1的时候

01:22:11.900 --> 01:22:13.420
你这边调用这个函数

01:22:13.420 --> 01:22:14.300
没有问题

01:22:14.300 --> 01:22:14.860
OK

01:22:14.860 --> 01:22:15.020
好

01:22:15.020 --> 01:22:15.980
关键是我这边

01:22:16.700 --> 01:22:17.580
你看

01:22:17.580 --> 01:22:18.140
看出来没有

01:22:19.180 --> 01:22:21.260
我这边在这个输入框

01:22:21.260 --> 01:22:22.620
输入值的时候

01:22:22.620 --> 01:22:24.460
他也干嘛了呀

01:22:24.460 --> 01:22:26.860
是不是也去重新去调用这个

01:22:26.860 --> 01:22:27.660
get counter

01:22:28.300 --> 01:22:29.020
这个函数了

01:22:30.060 --> 01:22:30.940
对不对

01:22:30.940 --> 01:22:32.700
也重新调用了

01:22:32.700 --> 01:22:33.180
为什么

01:22:33.980 --> 01:22:34.860
为什么

01:22:34.860 --> 01:22:35.980
原因很简单

01:22:35.980 --> 01:22:38.540
你这边再进行一个输入的时候

01:22:39.740 --> 01:22:41.180
再进行一个输入的时候

01:22:41.180 --> 01:22:43.020
整个他这个是不是要重新渲染

01:22:43.980 --> 01:22:45.660
整个他这个要重新渲染的话

01:22:45.660 --> 01:22:47.900
那这边他是不是就会重新调用这个函数

01:22:48.540 --> 01:22:48.860
对不对

01:22:49.180 --> 01:22:50.380
你这边写的吗

01:22:50.380 --> 01:22:52.540
你这边是不是写的get counter调用函数

01:22:53.100 --> 01:22:54.780
你每一次重新渲染一次

01:22:54.780 --> 01:22:56.860
这边是不是要整个这个要重新渲染

01:22:56.860 --> 01:22:57.500
重新渲染的话

01:22:57.500 --> 01:22:58.380
你这边

01:22:58.380 --> 01:23:00.220
是不是他就是会去调这个函数

01:23:00.940 --> 01:23:01.420
对不对

01:23:01.420 --> 01:23:03.020
说这边的话就会造成一个现象

01:23:03.580 --> 01:23:04.940
人家其实就是按照什么呢

01:23:04.940 --> 01:23:06.460
按照你这边写的这样子来的

01:23:07.020 --> 01:23:07.420
对不对

01:23:07.420 --> 01:23:08.860
因为你这边每输一个

01:23:08.860 --> 01:23:10.700
你整个这个叫重新渲染一次

01:23:10.700 --> 01:23:11.740
重新渲染一次

01:23:11.740 --> 01:23:14.140
让我这个函数叫重新调用一次

01:23:15.020 --> 01:23:15.820
对不对

01:23:15.820 --> 01:23:16.780
那你可以发现

01:23:16.780 --> 01:23:17.580
这个函数

01:23:17.580 --> 01:23:18.780
这边这个调用的话

01:23:18.940 --> 01:23:20.220
这边也是多余的

01:23:20.860 --> 01:23:22.860
这边也是可以优化的地方

01:23:23.820 --> 01:23:24.540
对不对

01:23:24.540 --> 01:23:25.580
也是可以优化的地方

01:23:26.540 --> 01:23:27.500
那有同学说

01:23:27.500 --> 01:23:28.460
哎这个优化好办啊

01:23:28.460 --> 01:23:29.180
刚才我们不是

01:23:29.740 --> 01:23:31.340
讲了这个use callback吗

01:23:32.540 --> 01:23:34.940
直接用这个use callback就优化就可以了

01:23:35.500 --> 01:23:36.860
你看一下这个use callback

01:23:36.860 --> 01:23:37.980
能不能解决这个问题

01:23:40.800 --> 01:23:41.440
如果不能

01:23:41.440 --> 01:23:42.400
然后你再思考一下

01:23:42.400 --> 01:23:43.040
为什么不能

01:23:44.640 --> 01:23:46.000
比方我们这边use callback

01:23:47.680 --> 01:23:48.240
对吧

01:23:48.240 --> 01:23:50.240
好我们把这边我们这个缓存的这个

01:23:50.240 --> 01:23:51.680
函数把拿过去

01:23:53.900 --> 01:23:54.780
拿过去

01:23:54.780 --> 01:23:57.340
这边它这个依赖依赖于这个container

01:23:57.980 --> 01:23:58.780
对吧

01:23:58.780 --> 01:24:00.300
好这边这边把它干掉

01:24:00.940 --> 01:24:01.820
好这边这边呢

01:24:01.820 --> 01:24:02.780
就是const

01:24:03.340 --> 01:24:06.620
const一个new get count

01:24:08.540 --> 01:24:09.180
ok

01:24:09.180 --> 01:24:10.300
好那这边就该干嘛

01:24:10.300 --> 01:24:10.860
这边是不是

01:24:10.860 --> 01:24:12.540
应该是调用这个new get count

01:24:13.580 --> 01:24:14.220
对不对

01:24:14.220 --> 01:24:15.980
好你看一下能不能解决问题

01:24:15.980 --> 01:24:17.180
先看一下能不能解决问题

01:24:17.980 --> 01:24:19.420
好这边说调用

01:24:19.420 --> 01:24:19.900
好这边

01:24:20.700 --> 01:24:22.220
是不是仍然会调用

01:24:23.660 --> 01:24:24.540
仍然会调用

01:24:25.820 --> 01:24:27.260
为什么不起作用

01:24:27.260 --> 01:24:28.380
你可以先思考一下

01:24:29.500 --> 01:24:30.460
思考一下

01:24:30.460 --> 01:24:31.660
为什么不起作用

01:24:32.620 --> 01:24:33.740
原因很简单

01:24:33.740 --> 01:24:35.580
你这边函数它缓存没有

01:24:35.580 --> 01:24:36.700
它缓存了

01:24:36.700 --> 01:24:38.460
它确确实实是缓存了

01:24:38.460 --> 01:24:40.780
但是你这边每次重新渲染了之后

01:24:40.780 --> 01:24:41.740
我会去干嘛呀

01:24:41.740 --> 01:24:43.660
我会去调用这个函数

01:24:44.460 --> 01:24:44.780
对不对

01:24:44.780 --> 01:24:47.020
我调用这个函数的这个事实

01:24:47.020 --> 01:24:47.900
它是不变的

01:24:48.700 --> 01:24:49.260
对不对

01:24:49.580 --> 01:24:52.700
你这边确确实实到是缓存了这个函数

01:24:52.700 --> 01:24:53.980
缓存了这个函数之后

01:24:53.980 --> 01:24:55.820
这个函数倒是没有变化

01:24:55.820 --> 01:24:57.820
但是你这边每次重新渲染的时候

01:24:57.820 --> 01:24:59.180
你这边是每次渲染一次

01:24:59.180 --> 01:25:00.300
你就会去调用一次

01:25:01.260 --> 01:25:01.580
对不对

01:25:02.460 --> 01:25:04.060
所以说你这个usical back

01:25:04.700 --> 01:25:06.700
是没有这个效果的

01:25:07.260 --> 01:25:09.660
我们这边其实是想缓存什么呢

01:25:09.660 --> 01:25:12.140
其实是想缓存它的这个值

01:25:13.340 --> 01:25:13.980
知道吧

01:25:13.980 --> 01:25:15.260
而不是说缓存这个

01:25:17.420 --> 01:25:18.300
不是说想缓

01:25:19.340 --> 01:25:20.140
sorry sorry

01:25:21.100 --> 01:25:22.540
你下指鼻子有点不舒服

01:25:23.340 --> 01:25:26.220
这边呢不是说想缓存整个函数

01:25:26.220 --> 01:25:27.580
而是想缓存什么呢

01:25:27.580 --> 01:25:30.380
缓存这个函数它的这么一个值

01:25:31.340 --> 01:25:31.820
对不对

01:25:31.820 --> 01:25:32.620
那回头的话

01:25:32.620 --> 01:25:35.180
我这边呢就直接使用这个缓存的值

01:25:35.180 --> 01:25:37.180
就不用再每次渲染的时候

01:25:37.180 --> 01:25:38.780
再去调用这个函数了

01:25:39.340 --> 01:25:40.540
那这边怎么办

01:25:40.540 --> 01:25:43.180
这边的话你就可以使用use memo

01:25:43.820 --> 01:25:44.780
我们这边把它改一下

01:25:46.300 --> 01:25:47.580
改成use memo

01:25:48.060 --> 01:25:50.460
ok use memo的这个用法基本是一样的

01:25:51.020 --> 01:25:52.780
这边你就改成这个use memo

01:25:55.070 --> 01:25:56.430
ok那第二个函数

01:25:56.430 --> 01:25:57.630
第二个函数也是什么呢

01:25:57.630 --> 01:25:59.230
也是这个依赖项

01:25:59.230 --> 01:26:01.150
好那接下这边的话就会拿到一个什么呢

01:26:01.150 --> 01:26:04.270
拿到一个这个counter number

01:26:05.070 --> 01:26:06.270
那我们这边就就相当于

01:26:06.270 --> 01:26:07.710
它这边就会给你缓存一个值

01:26:08.190 --> 01:26:09.870
ok啊这边写一下嘛

01:26:10.430 --> 01:26:10.910
返回

01:26:12.430 --> 01:26:14.910
返回一个缓存值

01:26:16.110 --> 01:26:17.790
ok这个缓存值的话只有什么

01:26:17.950 --> 01:26:18.990
只有在这个counter呢

01:26:19.870 --> 01:26:20.990
它发生变化的时候

01:26:20.990 --> 01:26:22.670
我在重新调用这个函数

01:26:23.710 --> 01:26:24.190
知道吧

01:26:24.190 --> 01:26:25.150
重新调用这个函数

01:26:25.150 --> 01:26:25.950
重新干嘛呢

01:26:25.950 --> 01:26:27.550
重新这个更新这个缓存值

01:26:28.110 --> 01:26:29.310
如果它不变化

01:26:29.310 --> 01:26:30.750
那我这边就使用什么呢

01:26:30.750 --> 01:26:32.350
就使用之前的缓存值

01:26:32.350 --> 01:26:34.510
好这边这边就不需要再调函数了

01:26:34.510 --> 01:26:35.470
这边使用什么

01:26:35.470 --> 01:26:37.230
这边使用这个缓存值

01:26:38.270 --> 01:26:39.870
可不可以使用这个缓存值

01:26:40.350 --> 01:26:41.390
好来我们这边保存

01:26:41.390 --> 01:26:42.030
我们来看一下

01:26:43.950 --> 01:26:45.550
好这边呢点击加1

01:26:45.550 --> 01:26:47.550
点击加1的话这个是没问题的

01:26:47.710 --> 01:26:48.990
对不对它要重新调用

01:26:48.990 --> 01:26:50.510
好然后加这边我输入

01:26:51.630 --> 01:26:52.110
解决没有

01:26:53.150 --> 01:26:53.710
解决了吧

01:26:54.590 --> 01:26:55.710
是不是就解决了

01:26:55.710 --> 01:26:57.230
啊你这边输入输入的话

01:26:57.230 --> 01:26:58.430
我这边重新渲染

01:26:58.430 --> 01:26:58.990
重新渲染的话

01:26:58.990 --> 01:27:00.110
我这边使用的是什么

01:27:00.110 --> 01:27:01.950
这使用的是你的缓存值

01:27:02.750 --> 01:27:04.830
对不对缓存值只有什么时候才会更新

01:27:04.830 --> 01:27:06.030
这你的这个counter

01:27:06.590 --> 01:27:07.550
发生变化的时候

01:27:07.550 --> 01:27:09.550
我才会去重新去更新这个

01:27:10.110 --> 01:27:10.670
缓存值

01:27:11.390 --> 01:27:13.630
这个就是UserMemo

01:27:14.430 --> 01:27:15.310
UserMemo

01:27:15.310 --> 01:27:16.190
整体来讲的话

01:27:16.270 --> 01:27:18.430
其实和这个UserCoreBack很相似

01:27:19.070 --> 01:27:20.270
很多同学分不清楚

01:27:20.750 --> 01:27:21.790
但其实很简单

01:27:22.270 --> 01:27:23.710
一个是缓存这个函数

01:27:24.270 --> 01:27:25.950
另外一个是缓存值

01:27:26.670 --> 01:27:27.070
对不对

01:27:27.630 --> 01:27:27.870
ok

01:27:29.470 --> 01:27:31.070
好这是关于UserMemo

01:27:31.070 --> 01:27:32.350
这个粒子的话也放在这里

01:27:33.470 --> 01:27:35.790
而最后的话是一个面试题

01:27:36.590 --> 01:27:37.790
这边一道面试题

01:27:38.350 --> 01:27:39.870
啊这面试题的话这边说的是

01:27:40.750 --> 01:27:43.070
UserMemo和这个UserCoreBack

01:27:43.390 --> 01:27:44.510
它的这个区别

01:27:45.070 --> 01:27:46.830
以及一个使用场景

01:27:47.790 --> 01:27:48.830
那这个就很简单了

01:27:49.230 --> 01:27:51.950
啊只要你刚才把这个UserCoreBack和UserMemo

01:27:52.270 --> 01:27:53.390
你如果听懂了的话

01:27:53.950 --> 01:27:54.830
那这个就很简单

01:27:55.230 --> 01:27:55.710
对吧

01:27:55.710 --> 01:27:56.670
啊这边来看一下吧

01:27:57.550 --> 01:28:00.750
UserMemo和UserCoreBack接收的参数都是一样的

01:28:00.750 --> 01:28:02.430
第一个是什么第一个是回调

01:28:03.150 --> 01:28:03.950
啊第二个什么

01:28:03.950 --> 01:28:06.030
第二个是你要依赖的这个数据

01:28:06.030 --> 01:28:07.790
对吧共同的作用是什么

01:28:07.790 --> 01:28:10.750
共的作用就是依赖数据发生变化的时候

01:28:10.750 --> 01:28:12.990
才会去重新去计算这个结果

01:28:12.990 --> 01:28:14.190
或者说才会干嘛呢

01:28:14.270 --> 01:28:15.790
才会去更新缓存

01:28:16.750 --> 01:28:19.710
才会去更新缓存

01:28:20.510 --> 01:28:21.870
而两者的区别是什么

01:28:21.870 --> 01:28:22.990
两者的区别就是

01:28:23.790 --> 01:28:25.230
UserMemo它是缓存什么

01:28:25.230 --> 01:28:27.710
是缓存一个这个计算结果的这个值

01:28:28.350 --> 01:28:28.750
对不对

01:28:28.750 --> 01:28:30.830
比如你需要这个做这个二次计算的时候

01:28:31.150 --> 01:28:32.270
啊它会缓存这个值

01:28:32.830 --> 01:28:34.270
而UserCoreBack

01:28:34.910 --> 01:28:35.950
它的话它是什么

01:28:35.950 --> 01:28:37.870
它是缓存这个函数

01:28:38.590 --> 01:28:38.910
对不对

01:28:38.910 --> 01:28:41.870
它的应用场景的话就是需要这个缓存函数的时候

01:28:42.510 --> 01:28:43.070
啊

01:28:43.230 --> 01:28:46.270
做就是可以使用到这个UserCoreBack

01:28:47.310 --> 01:28:47.870
好吧

01:28:47.870 --> 01:28:50.590
这就是这两者之间的这个区别

01:28:51.070 --> 01:28:51.390
啊

01:28:52.110 --> 01:28:54.750
啊这就是这节课给大家介绍的这个

01:28:55.230 --> 01:28:57.470
组建渲染这个性能优化

01:28:58.030 --> 01:29:00.110
那内容的话还是有那么一点点多

01:29:00.750 --> 01:29:01.630
希望就是

01:29:01.630 --> 01:29:04.830
大家下来的话就是我们课堂上讲的每一个例子

01:29:05.390 --> 01:29:06.670
大家去把它敲一下

01:29:07.310 --> 01:29:07.790
ok

01:29:07.790 --> 01:29:10.030
你敲一下比你就是坐在那光看

01:29:10.430 --> 01:29:12.750
这个效果的话其实是要好得多

01:29:13.550 --> 01:29:14.350
还要好得多

01:29:14.990 --> 01:29:15.310
ok

01:29:16.030 --> 01:29:16.270
好

01:29:16.270 --> 01:29:18.430
然后还要说一下就是关于我们这边

01:29:19.390 --> 01:29:21.710
关于我们这个高级指引这边

01:29:22.430 --> 01:29:24.990
高级指引这边的话基本上就讲完了

01:29:25.470 --> 01:29:25.630
啊

01:29:25.630 --> 01:29:26.590
我们讲了八节课

01:29:27.070 --> 01:29:27.470
对吧

01:29:27.470 --> 01:29:28.430
讲了八节课

01:29:28.430 --> 01:29:29.630
基本上就讲完了

01:29:29.630 --> 01:29:30.030
啊

01:29:30.030 --> 01:29:30.830
比如你看这边

01:29:31.230 --> 01:29:32.910
context错误边界

01:29:33.390 --> 01:29:33.710
对吧

01:29:33.710 --> 01:29:35.950
让Refs转发这个高階组建

01:29:36.430 --> 01:29:38.030
大家这边这个新的优化

01:29:38.030 --> 01:29:38.670
Portraits

01:29:39.310 --> 01:29:39.550
啊

01:29:39.550 --> 01:29:41.230
然后还有这边RefsDOM

01:29:41.230 --> 01:29:42.350
Render这个Props

01:29:42.830 --> 01:29:43.630
然后还有什么呢

01:29:43.630 --> 01:29:44.910
还有这个Portotype

01:29:45.150 --> 01:29:46.190
内心检查

01:29:46.190 --> 01:29:47.630
这个非收红组建的话

01:29:47.630 --> 01:29:48.750
这个在入门篇就讲过

01:29:49.390 --> 01:29:50.030
ok

01:29:50.030 --> 01:29:50.350
好

01:29:50.350 --> 01:29:52.030
剩下的那些东西的话我就

01:29:53.070 --> 01:29:53.710
没有讲了

01:29:54.190 --> 01:29:54.830
比如说什么呢

01:29:54.830 --> 01:29:55.390
比如说这个

01:29:56.750 --> 01:29:57.470
严格模式

01:29:58.110 --> 01:29:58.510
对吧

01:29:58.510 --> 01:29:59.470
严格模式

01:29:59.470 --> 01:29:59.950
比如这个

01:30:00.510 --> 01:30:01.070
Fragments

01:30:01.790 --> 01:30:03.310
这个的话我就没有讲了

01:30:03.310 --> 01:30:04.590
我为什么不讲

01:30:04.590 --> 01:30:07.230
是因为我觉得这些东西的话没有必要讲

01:30:07.230 --> 01:30:09.790
这些比如像这个Fragments

01:30:09.790 --> 01:30:10.830
有什么好讲的吗

01:30:10.830 --> 01:30:11.150
对吧

01:30:11.150 --> 01:30:12.110
你点进去把这个文档

01:30:12.190 --> 01:30:13.070
你把它看一遍

01:30:13.710 --> 01:30:14.750
你也就知道了

01:30:14.750 --> 01:30:16.830
包括就是我们讲过的这些内容

01:30:16.830 --> 01:30:19.310
我们讲过的这些什么context

01:30:19.310 --> 01:30:20.830
错误边界这些

01:30:20.830 --> 01:30:21.630
我们讲过的

01:30:21.630 --> 01:30:22.590
你都应该干嘛

01:30:22.590 --> 01:30:24.430
都应该把他的这个文档

01:30:24.430 --> 01:30:25.950
从头到尾看一遍

01:30:25.950 --> 01:30:26.830
ok

01:30:26.830 --> 01:30:28.430
那像这些这些没讲的

01:30:28.430 --> 01:30:30.590
没讲的话是因为我觉得这个

01:30:30.590 --> 01:30:33.310
你把这个文档点进去看一下

01:30:33.310 --> 01:30:35.230
其实就应该是没有问题的

01:30:35.230 --> 01:30:37.950
也就是说没有必要单独开一节课来讲

01:30:38.910 --> 01:30:39.550
知道吧

01:30:39.550 --> 01:30:40.270
没有必要

01:30:40.270 --> 01:30:41.710
包括这个严格模式也是

01:30:42.030 --> 01:30:43.230
这边严格模式

01:30:43.230 --> 01:30:45.230
没有必要单独开一节课来讲

01:30:45.230 --> 01:30:47.070
你自己点进去把这个文档看一下

01:30:47.630 --> 01:30:48.510
其实就明白了

01:30:49.070 --> 01:30:49.710
知道吧

01:30:49.710 --> 01:30:50.430
说你不能说

01:30:50.430 --> 01:30:52.190
哎这个东西因为老师没讲过

01:30:52.190 --> 01:30:53.070
所以我不会

01:30:54.670 --> 01:30:55.870
你这个是比较可笑的

01:30:56.670 --> 01:30:57.070
知道吧

01:30:57.710 --> 01:30:58.750
这边的话没讲只

01:30:58.750 --> 01:31:00.990
因为我觉得这个不值得单独开一节课

01:31:00.990 --> 01:31:02.510
这个的话你自己看一下文档

01:31:03.230 --> 01:31:04.430
应该就是没有问题的

01:31:04.910 --> 01:31:05.630
好吧

01:31:05.630 --> 01:31:08.190
那这边的话就是截止到目前

01:31:08.190 --> 01:31:10.190
我们整个这个高级指引

01:31:10.910 --> 01:31:12.110
我们也就结束了

01:31:12.670 --> 01:31:14.270
我们回头的话就是下一张

01:31:14.270 --> 01:31:15.310
我们的第二张

01:31:15.310 --> 01:31:16.430
第二张的话就会

01:31:17.550 --> 01:31:19.310
进入到就是这个react

01:31:20.110 --> 01:31:21.710
看到一个圆满的这个剖析

01:31:22.350 --> 01:31:23.310
整个这个react

01:31:23.310 --> 01:31:24.750
它的一个执行流程啊

01:31:25.470 --> 01:31:26.510
什么是fiber啊

01:31:26.990 --> 01:31:27.390
对不对

01:31:27.390 --> 01:31:29.390
它的这个commit阶段做了些什么事

01:31:29.390 --> 01:31:30.670
扔的阶段做了什么事

01:31:31.070 --> 01:31:33.710
我们就会进行一个这个圆满的一些这个分析

01:31:34.270 --> 01:31:34.750
ok

01:31:34.750 --> 01:31:36.430
这个是我们下一张的这个内容

01:31:37.470 --> 01:31:39.950
好希望在进入到这个下一张之前

01:31:40.030 --> 01:31:41.470
大家先把这个第一张

01:31:42.030 --> 01:31:43.950
先把这些指使先把它掌握

01:31:44.670 --> 01:31:45.390
好吧

01:31:45.390 --> 01:31:46.190
ok

01:31:46.190 --> 01:31:48.270
好这期课的话就到这里

01:31:49.870 --> 01:31:51.070
这期课的话就到这里

01:31:51.070 --> 01:31:53.070
拜拜

