WEBVTT

00:00.000 --> 00:03.600
我们这节课来看一下req中的这个事件

00:03.600 --> 00:06.400
好 这边的话有道面试题

00:06.400 --> 00:08.600
它让你减速一下req中

00:08.600 --> 00:11.000
它的这个事件是如何处理的

00:11.000 --> 00:14.600
包括这个req中它有一些这个合成事件

00:14.600 --> 00:16.400
对吧 什么是合成事件

00:16.400 --> 00:19.200
一般面试题它会问一下

00:19.200 --> 00:21.200
那我们这边的话我们首先要知道

00:21.200 --> 00:25.400
在req中的话它是有一套自己的事件系统

00:25.400 --> 00:29.400
在req中有一套

00:29.600 --> 00:32.600
自己的事件系统

00:32.600 --> 00:36.600
如果说就是req中它使用这个fiber-tree

00:36.600 --> 00:40.000
使用这种数据结构来描述UI的话

00:40.000 --> 00:43.200
那么这个事件系统它描述的就是什么

00:43.200 --> 00:45.800
它描述的就是基于fiber-tree

00:45.800 --> 00:49.600
描述的就是与UI之间的一个交互

00:49.600 --> 00:56.200
如果说req中的fiber-tree

00:56.200 --> 00:57.800
fiber-tree我们之前学过的

00:57.800 --> 01:02.400
对吧fiber-tree这个数据结构

01:02.400 --> 01:08.000
数据结构是用来描述UI的

01:08.000 --> 01:13.800
那么req里面的这个事件系统

01:13.800 --> 01:17.800
就是用来描述什么呢

01:17.800 --> 01:25.800
描述这个fiber-tree和UI之间的这个交互的

01:25.800 --> 01:28.200
好然后接下来关于这个事件系统的话

01:28.200 --> 01:30.400
它这个不同的这个数据

01:30.400 --> 01:32.600
它可能的话会有一些这个区别

01:32.600 --> 01:34.800
那我们这边的话以这个

01:34.800 --> 01:37.000
就是咱们最熟悉的这个dorm

01:37.000 --> 01:38.200
就是这个浏览器

01:38.200 --> 01:41.200
浏览器的话它用的是这个req-dorm

01:41.200 --> 01:47.400
对吧这边的话对于这个req-dorm环境

01:47.400 --> 01:48.200
数据环境

01:50.200 --> 01:52.000
然后这套事件系统

01:52.000 --> 01:54.500
这套事件系统

01:54.500 --> 01:59.840
然后有两个部分组成两个部分

01:59.840 --> 02:00.940
哪两个部分呢

02:00.940 --> 02:05.910
而一个的话是合成事件对象

02:05.910 --> 02:07.110
合成事件对象

02:08.810 --> 02:09.910
另外一个是什么呢

02:09.910 --> 02:12.510
另外一个的话就是关于这个模拟

02:12.510 --> 02:16.310
模拟实现这个事件传播

02:17.710 --> 02:22.400
传播机制机制

02:22.400 --> 02:25.200
OK啊整个这个是这个事件系统

02:25.200 --> 02:26.500
你整个来分的话

02:26.500 --> 02:28.200
它其实就是这两大部分

02:28.200 --> 02:30.400
一个是关于这个合成事件对象

02:30.400 --> 02:31.800
另外一个的话是这个

02:31.800 --> 02:34.700
它需要模拟事件的这个传播机制

02:34.700 --> 02:36.500
我们如果学过原生dorm的话

02:36.500 --> 02:38.300
我们知道它的整个事件的话

02:38.300 --> 02:40.900
它也会有一个这个传播机制在里面

02:40.900 --> 02:42.600
对吧对应的这个帽炮

02:42.600 --> 02:45.800
对应的是这个补货对不对

02:45.800 --> 02:47.100
先补货再帽炮

02:47.100 --> 02:49.300
它会有这么一个传播的机制

02:49.300 --> 02:50.400
那你这边的话

02:50.400 --> 02:53.100
你既然自己要实现这套这个

02:53.100 --> 02:55.300
就你自己的话有这么一个事件系统

02:55.300 --> 02:55.900
那你这边的话

02:55.900 --> 02:58.700
你也要去模拟实现这个传播的这个机制

02:58.700 --> 02:59.500
OK

02:59.500 --> 03:00.700
好来我们一个一个来看

03:00.700 --> 03:03.300
我们首先先来看一下这个合成事件对象

03:03.300 --> 03:04.200
合成事件对象的话

03:04.200 --> 03:06.700
它这边叫做这个syntatic

03:06.700 --> 03:09.400
syntatic event

03:09.400 --> 03:10.200
它是对什么

03:10.200 --> 03:15.000
它是对浏览器原生事件对象的一层封装

03:15.000 --> 03:19.500
这个是对这个syntatic event

03:19.500 --> 03:20.500
这个就是合成

03:21.800 --> 03:23.900
合成事件对象

03:23.900 --> 03:25.000
这个的话

03:25.000 --> 03:27.700
这个是对浏览器

03:27.700 --> 03:35.010
浏览器原生事件对象的一层封装

03:35.010 --> 03:36.410
它兼容了什么

03:36.410 --> 03:39.410
兼容了主流的浏览器

03:39.410 --> 03:44.410
兼容了主流的浏览器

03:44.410 --> 03:45.810
浏览器

03:45.810 --> 03:48.010
同时拥有什么呢

03:48.010 --> 03:53.910
拥有和这个浏览器原生API

03:53.910 --> 03:55.310
就原生事件

03:55.310 --> 03:59.610
原生事件相同的API

03:59.610 --> 04:03.310
比如我们知道就是浏览器原生事件里面有些什么API

04:03.310 --> 04:05.810
比如说我们原生里面有什么

04:05.810 --> 04:07.010
stop

04:07.010 --> 04:08.610
这个propagation

04:08.610 --> 04:09.610
对不对

04:09.610 --> 04:12.310
propagation

04:12.310 --> 04:14.210
这个是这个阻止冒泡的

04:14.210 --> 04:15.710
还有什么

04:15.710 --> 04:18.510
和这个比如说prevents

04:18.510 --> 04:20.810
prevents default

04:20.810 --> 04:21.410
对不对

04:21.510 --> 04:22.110
这些的话

04:22.110 --> 04:24.610
他在这个你在这个合成事件对象里面

04:24.610 --> 04:27.510
你也需要提供这些API

04:27.510 --> 04:28.110
明白吧

04:28.110 --> 04:30.310
也需要提供这些API

04:30.310 --> 04:30.610
好

04:30.610 --> 04:32.710
那这个syntallic event

04:32.710 --> 04:34.410
他的话他存在的目的

04:34.410 --> 04:35.610
就为什么这个react

04:35.610 --> 04:38.610
要单独把这个浏览器原生事件对象

04:38.610 --> 04:40.310
再做一次封装呢

04:40.310 --> 04:42.710
他这个存在的目的

04:42.710 --> 04:43.910
存在的目的

04:43.910 --> 04:45.410
就是为了什么呢

04:45.410 --> 04:49.710
就是为了消除不同浏览器

04:49.710 --> 04:54.010
在这个事件对象

04:54.010 --> 04:57.310
上面的一个差异

04:57.310 --> 04:58.210
明白吧

04:58.210 --> 04:59.810
主要是为了这个目的

04:59.810 --> 05:02.910
说他这边单独封装了一个合成事件对象

05:02.910 --> 05:04.510
这是首先第一点

05:04.510 --> 05:05.410
第二点

05:05.410 --> 05:06.010
第二点的话

05:06.010 --> 05:08.810
就是你这个你自己的这个事件系统

05:08.810 --> 05:09.410
那你这边的话

05:09.410 --> 05:12.810
也需要模拟这个事件传播的这个机制

05:12.810 --> 05:13.610
对不对

05:13.610 --> 05:13.710
好

05:13.710 --> 05:14.110
这边的话

05:14.110 --> 05:18.210
他会利用这个事件委托的原理

05:18.210 --> 05:21.610
利用事件委托的这个原理

05:21.610 --> 05:22.510
事件委托的话

05:22.510 --> 05:25.110
我们之前在最早学那个多目编程的时候

05:25.110 --> 05:26.610
我们是不是就讲过了

05:26.610 --> 05:27.210
对不对

05:27.210 --> 05:28.010
说他这边的话

05:28.010 --> 05:30.010
也会利用这个事件委托的原理

05:30.010 --> 05:30.610
然后react

05:30.610 --> 05:32.010
这个react

05:32.010 --> 05:32.710
他会什么呢

05:32.710 --> 05:35.110
他会基于这个fiber tray

05:35.110 --> 05:36.710
他就不是多么吹了

05:36.710 --> 05:39.310
他这边的话是基于这个fiber tray

05:39.310 --> 05:40.610
基于fiber tray

05:40.610 --> 05:42.810
来实现了什么呢

05:42.810 --> 05:46.510
实现了事件的补货

05:46.510 --> 05:48.110
然后这个目标

05:48.510 --> 05:51.010
以及这个冒泡的过程

05:51.010 --> 05:52.910
冒泡的过程

05:52.910 --> 05:54.710
就类似于什么呢

05:54.710 --> 05:58.410
就类似于原生动物

05:58.410 --> 06:01.610
原生动物的这个元素

06:01.610 --> 06:08.490
的就是原生动物的这个事件传递过程

06:08.490 --> 06:10.190
ok就类似于这个

06:10.190 --> 06:10.990
那并且的话

06:10.990 --> 06:14.190
他在这个就这一套事件传播机制里面

06:14.190 --> 06:17.390
他还加入了一些新的特性

06:17.490 --> 06:22.590
并且在自己实现的这一套

06:22.590 --> 06:26.790
这个事件传播机制中

06:26.790 --> 06:29.290
传播机制中

06:29.290 --> 06:33.990
还加入了加入了许多

06:33.990 --> 06:38.730
这个许多新的特性

06:38.730 --> 06:39.930
新的特性

06:39.930 --> 06:44.400
比如说有点些呢

06:44.400 --> 06:45.700
他这边的话

06:45.700 --> 06:47.800
就是不同的事件

06:47.800 --> 06:50.200
不同的事件

06:50.200 --> 06:54.200
对应了不同的优先级

06:54.200 --> 06:55.400
这个非常好理解

06:55.400 --> 06:55.700
对吧

06:55.700 --> 06:57.000
关于优先级这个问题

06:57.000 --> 06:58.900
我们之前已经说过很多次了

06:58.900 --> 07:00.000
那既然这个react

07:00.000 --> 07:03.000
他内部自己实现一套这个事件系统

07:03.000 --> 07:04.400
那他这边的肯定是

07:04.400 --> 07:07.000
把这个优先级加进去了

07:07.000 --> 07:08.700
你不同的这个事件

07:08.700 --> 07:09.500
对应的这个优先级

07:09.500 --> 07:10.500
他是不一样的

07:10.500 --> 07:11.000
对吧

07:11.000 --> 07:12.600
这个我们之前讲过很多次了

07:12.600 --> 07:13.200
那他这边的话

07:13.200 --> 07:13.700
还可以就是什么

07:13.700 --> 07:15.300
还可以定制

07:15.300 --> 07:17.600
定制事件名

07:17.600 --> 07:18.800
比如说

07:18.800 --> 07:21.800
比如在react中

07:21.800 --> 07:23.300
在react中

07:23.300 --> 07:25.300
这个统一

07:25.300 --> 07:26.300
统一

07:26.300 --> 07:27.000
采用什么呢

07:27.000 --> 07:28.400
采用这个on

07:28.400 --> 07:30.000
然后叉叉叉

07:30.000 --> 07:32.000
的这个陀峰写法

07:32.000 --> 07:33.300
陀峰写法

07:33.300 --> 07:35.700
来绑定事件

07:35.700 --> 07:36.500
对不对

07:36.500 --> 07:39.000
你这个第一次学这个react的同学

07:39.000 --> 07:39.900
你当时有没有觉得

07:39.900 --> 07:40.000
哎

07:40.000 --> 07:42.400
这个为什么他这边是这个陀峰写法

07:42.400 --> 07:42.600
对吧

07:42.600 --> 07:43.400
你正常情况下

07:43.400 --> 07:44.500
你这个动物里面

07:44.500 --> 07:45.100
绑事件是吧

07:45.100 --> 07:47.500
on click

07:47.500 --> 07:48.100
正常情况下

07:48.100 --> 07:49.300
你在这个动物里面

07:49.300 --> 07:49.600
对不对

07:49.600 --> 07:50.400
但是在react里面

07:50.400 --> 07:51.400
他是怎么写的

07:51.400 --> 07:53.000
他是这样子写的

07:53.000 --> 07:53.300
对不对

07:53.300 --> 07:54.400
当时你学到这的时候

07:54.400 --> 07:55.500
你又没有觉得很奇怪

07:55.500 --> 07:55.600
哎

07:55.600 --> 07:56.400
为什么他这边的话

07:56.400 --> 07:57.300
是这样子写的

07:57.300 --> 07:59.400
和这个正常的动物不一样

07:59.400 --> 08:00.700
原因就是他这边的话

08:00.700 --> 08:03.800
他内部有一套自己的这个事件系统

08:03.800 --> 08:05.200
他内部的事件系统的话

08:05.200 --> 08:05.700
他这边的话

08:05.700 --> 08:08.400
是定制了这个绑定的方式的

08:08.400 --> 08:10.100
定制了绑定的方式的

08:10.100 --> 08:11.600
OK

08:11.600 --> 08:12.400
那还有什么呢

08:12.400 --> 08:14.500
还有就是比如他还会定制

08:14.500 --> 08:17.500
定制这个事件的这个行为

08:17.500 --> 08:19.000
比如说

08:19.000 --> 08:21.200
例如这个on click

08:21.200 --> 08:24.500
on click的这个默认行为

08:24.500 --> 08:26.400
默认行为

08:26.400 --> 08:28.200
与这个原生

08:28.200 --> 08:30.800
原生的这个on input

08:30.800 --> 08:32.500
是相同的

08:32.500 --> 08:34.800
OK

08:34.800 --> 08:36.800
这个的话就是他内部这个事件系统

08:36.800 --> 08:39.000
他可以自己定位这个定义

08:39.000 --> 08:40.200
比如我这个事件

08:40.200 --> 08:41.700
他有哪些默认行为

08:41.700 --> 08:42.800
OK

08:43.500 --> 08:46.300
这是这个基本上这个是这个react

08:46.300 --> 08:48.000
他内部这个事件系统

08:48.000 --> 08:49.000
主要就是这边

08:49.000 --> 08:51.300
就是这两大部分

08:51.300 --> 08:53.500
那这个react他这个事件系统的话

08:53.500 --> 08:57.700
他需要考虑到非常多的这个边界情况

08:57.700 --> 08:59.500
非常非常多的边界情况

08:59.500 --> 09:01.100
说他的这个代码量的话

09:01.100 --> 09:03.000
是非常非常大的

09:03.000 --> 09:03.800
OK

09:03.800 --> 09:05.100
说我们这边怎么办呢

09:05.100 --> 09:06.000
我们这边的话

09:06.000 --> 09:09.800
我们就通过实现一个简易版的这个事件系统

09:09.800 --> 09:11.100
我们来大致来

09:11.100 --> 09:12.200
就是看一下

09:12.200 --> 09:16.000
整个react他的这个事件系统的一个原理

09:16.000 --> 09:17.700
OK

09:17.700 --> 09:21.500
react事件系统

09:21.500 --> 09:27.000
需要考虑到很多这个边界情况

09:27.000 --> 09:29.700
因此代码量

09:29.700 --> 09:33.800
代码量是非常大的

09:33.800 --> 09:40.000
然后我们这里通过书写

09:40.000 --> 09:41.600
书写一个什么呢

09:41.600 --> 09:43.900
一个这个简易版

09:43.900 --> 09:46.900
简易版的事件系统

09:46.900 --> 09:54.800
来学习这个react事件系统的这个原理

09:54.800 --> 09:55.800
OK

09:55.800 --> 09:55.900
好

09:55.900 --> 09:57.400
我们这边让我们首先先看一下

09:57.400 --> 09:58.700
就是假设我们现在的话

09:58.700 --> 10:01.200
有这么一段GIS插带码

10:01.200 --> 10:03.400
假设

10:03.400 --> 10:04.700
假设

10:04.700 --> 10:08.200
现在我们有

10:08.200 --> 10:15.520
有如下这一段这个GIS插带码

10:15.520 --> 10:16.120
OK

10:16.120 --> 10:18.520
我们这边我这个项目是跑起来的

10:18.520 --> 10:21.020
这边这边大家可以看一下在这里

10:21.020 --> 10:23.120
这里的话就是一个很简单的这个项目

10:23.120 --> 10:24.820
他这边的话渲染一个什么呢

10:24.820 --> 10:27.120
渲染一个这个APP这个组件

10:27.120 --> 10:27.320
对吧

10:27.320 --> 10:29.720
APP组件的话这里面啥都没有

10:29.720 --> 10:31.120
就是一个函数组件

10:31.120 --> 10:31.720
OK

10:31.720 --> 10:32.520
那目前来讲的话

10:32.520 --> 10:34.720
我们这边渲染出来的效果的话是

10:34.720 --> 10:36.220
这个样子的

10:36.220 --> 10:36.520
好

10:36.520 --> 10:38.720
然后接下来来到这边

10:38.720 --> 10:39.520
来到这边

10:39.520 --> 10:42.020
这边的话我来到index.js

10:42.020 --> 10:45.220
这边的话我们就让他不渲染APP了

10:45.220 --> 10:46.520
不渲染APP渲染什么的

10:46.520 --> 10:51.580
我们这边的话拿一段这个GIS插过来

10:51.580 --> 10:54.480
这边随便拿一段这个GIS插

10:54.480 --> 10:55.180
啊

10:55.180 --> 10:56.280
拿一段过来之后

10:56.280 --> 10:58.180
然后接下来的话

10:58.180 --> 10:59.080
你这里这里的话

10:59.080 --> 11:01.980
是不是就是渲染那个GIS插

11:01.980 --> 11:02.580
对不对

11:02.580 --> 11:03.180
渲染这个GIS插

11:03.180 --> 11:03.280
好

11:03.280 --> 11:04.580
我们保存

11:04.580 --> 11:05.780
保存了之后

11:05.780 --> 11:07.580
稍微等一下啊

11:07.580 --> 11:08.280
保存了之后

11:08.280 --> 11:08.980
然后没有包错

11:08.980 --> 11:10.080
我们这边来看一下

11:10.080 --> 11:12.080
这边是不是就是有一个按钮

11:12.080 --> 11:12.580
对不对

11:12.580 --> 11:12.880
好

11:12.880 --> 11:16.920
然后再让我们这边点击一下

11:16.920 --> 11:18.820
我们这边点击一下

11:18.820 --> 11:19.720
点击

11:19.720 --> 11:21.820
这边是不是click button

11:21.820 --> 11:22.320
对不对

11:22.320 --> 11:23.220
click button

11:23.220 --> 11:23.420
好

11:23.420 --> 11:23.920
然后接下来

11:23.920 --> 11:26.020
我们这边回头再来看一下这个代码

11:26.020 --> 11:27.120
这个代码是什么样子的

11:27.120 --> 11:28.720
这个代码是这样子的

11:28.720 --> 11:29.320
首先的话

11:29.320 --> 11:31.320
这边有一个section

11:31.320 --> 11:32.920
或者你改成DIV也可以

11:32.920 --> 11:34.620
这边大家比较熟悉DIV

11:34.620 --> 11:35.720
这边改成DIV

11:35.720 --> 11:37.220
这边click

11:37.220 --> 11:38.120
DIV

11:38.120 --> 11:38.720
OK

11:38.720 --> 11:38.820
好

11:38.820 --> 11:39.920
这边有个DIV

11:39.920 --> 11:41.620
然后这边的话有个H3

11:41.620 --> 11:43.220
然后再有个button

11:43.220 --> 11:43.920
看到没有

11:43.920 --> 11:44.120
好

11:44.120 --> 11:44.720
然后这个button

11:44.720 --> 11:45.720
我绑定了一个什么

11:45.720 --> 11:47.420
说绑定了个点击世界

11:47.420 --> 11:47.620
好

11:47.620 --> 11:49.920
然后加这个DIV也绑定了一个什么

11:49.920 --> 11:52.520
是不是也绑定了一个点击世界

11:52.520 --> 11:53.220
对不对

11:53.220 --> 11:53.420
好

11:53.420 --> 11:54.320
然后再这个button

11:54.320 --> 11:55.020
button这边的话

11:55.020 --> 11:57.420
我这边是阻止了世界冒泡的

11:57.420 --> 11:58.620
所以说我们刚才点击的话

11:58.620 --> 11:59.820
它只会打印出什么呢

11:59.820 --> 12:02.320
只会打印出click button

12:02.320 --> 12:02.920
对不对

12:02.920 --> 12:03.920
这边再来看一下

12:03.920 --> 12:05.620
点击点击点击

12:05.620 --> 12:07.820
所以只会打印出click button

12:10.420 --> 12:12.120
我把这个注射掉

12:12.120 --> 12:13.120
注射掉之后

12:13.120 --> 12:13.920
然后接下来的话

12:13.920 --> 12:15.120
我们这边点击

12:15.120 --> 12:16.920
你看这边是不是就是会click button

12:16.920 --> 12:18.320
clickDIV

12:18.320 --> 12:20.420
做很明显这个世界冒泡了

12:20.420 --> 12:21.020
对不对

12:21.020 --> 12:22.420
世界冒泡了

12:22.420 --> 12:22.620
好

12:22.620 --> 12:25.120
这个的话就是它这个reactor里面

12:25.120 --> 12:27.420
它类似的这个世界系统

12:27.420 --> 12:29.320
实现了这些功能

12:29.320 --> 12:29.920
对不对

12:29.920 --> 12:31.620
比如说这个世界冒泡的功能

12:31.620 --> 12:34.320
那接下来这边这个阻止冒泡的这个功能

12:34.320 --> 12:35.920
它类似不实现了

12:35.920 --> 12:36.620
对不对

12:36.620 --> 12:36.820
好

12:36.820 --> 12:37.620
那接下来的话

12:37.620 --> 12:38.420
我们这边

12:38.420 --> 12:39.120
我们就要干嘛

12:39.120 --> 12:40.920
我们这边我们就要自己来写一套

12:40.920 --> 12:42.720
这种简易版的世界系统

12:42.720 --> 12:45.120
我们也来实现这样的功能

12:45.120 --> 12:45.820
然后实现了

12:45.820 --> 12:47.120
同时我们把有些

12:47.120 --> 12:48.420
比如说我们可以用

12:48.420 --> 12:49.420
比如说

12:49.420 --> 12:49.920
比如说

12:49.920 --> 12:51.120
比如说为了就是显示

12:51.120 --> 12:52.220
是我们自己实现的

12:52.220 --> 12:53.720
我们把这个绑世界的地方

12:53.720 --> 12:55.120
我们把它改一下

12:55.120 --> 12:55.720
比如说我回头

12:55.720 --> 12:57.820
我会改成这样子来绑定世界

12:57.820 --> 12:59.320
比较棒的

12:59.320 --> 12:59.820
棒的

12:59.820 --> 13:03.620
然后加这边click click

13:03.620 --> 13:05.720
我会改成这样子

13:05.720 --> 13:06.720
就定制

13:06.720 --> 13:08.120
定制我们的这个世界

13:08.120 --> 13:09.720
绑定了这种名称

13:09.720 --> 13:09.920
ok

13:09.920 --> 13:10.820
但现在是不行的

13:10.820 --> 13:11.820
现在我们还没写

13:11.820 --> 13:12.320
你这边的话

13:12.320 --> 13:13.920
他这边是会包错的

13:13.920 --> 13:14.720
对不对

13:14.720 --> 13:16.820
现在先不要改

13:16.820 --> 13:17.420
把这个的话

13:17.420 --> 13:19.420
先记录到这里

13:19.420 --> 13:22.120
记录到笔记里面

13:22.120 --> 13:25.420
假设我们现在有这么一段接差代码

13:25.420 --> 13:28.120
那么在上面的代码中

13:28.120 --> 13:30.620
在上面的代码中

13:30.620 --> 13:32.320
我们为什么呢

13:32.320 --> 13:35.720
为这个div就外层

13:35.720 --> 13:38.520
外层的div

13:38.520 --> 13:40.720
以及内部的这个bar

13:40.720 --> 13:43.520
都绑定了

13:43.520 --> 13:46.320
是不是点击世界

13:46.320 --> 13:47.120
对不对

13:47.120 --> 13:49.420
默认情况下

13:49.420 --> 13:52.520
默认情况下

13:52.520 --> 13:54.720
点击bar

13:54.720 --> 13:57.520
会打印出

13:57.520 --> 13:58.220
打印出什么呢

13:58.220 --> 14:00.320
打印出click bar

14:00.320 --> 14:03.920
以及这个click div

14:03.920 --> 14:04.720
对不对

14:04.720 --> 14:08.020
然后如果打开打开什么呢

14:08.020 --> 14:11.480
打开这行代吗

14:11.480 --> 14:12.880
打开这行代吗

14:12.880 --> 14:18.480
那么就会阻止这个世界冒泡

14:18.480 --> 14:20.380
然后只打印出什么呢

14:20.380 --> 14:24.780
只打印出click bar

14:24.780 --> 14:26.480
然后可以看出

14:26.480 --> 14:30.480
可以看出react这个内部

14:30.480 --> 14:32.780
内部的这个事件系统

14:32.780 --> 14:34.380
是不是实现了什么

14:34.380 --> 14:35.980
实现了这个

14:35.980 --> 14:40.380
就是模拟事件传播的机制

14:40.380 --> 14:40.980
对不对

14:40.980 --> 14:45.080
实现了这个模拟事件传播的这个机制

14:45.080 --> 14:45.380
好

14:45.380 --> 14:47.180
然后接下来

14:47.180 --> 14:51.580
接下来我们自己来写一套

14:51.580 --> 14:54.180
自己来写一套

14:54.180 --> 14:55.480
减一半

14:55.480 --> 14:57.280
事件系统

14:57.280 --> 15:02.480
然后绑定世界的这种方式

15:02.480 --> 15:03.380
改为什么呢

15:03.380 --> 15:05.880
改为这种棒的

15:05.880 --> 15:06.380
棒的

15:06.380 --> 15:07.580
然后叉叉叉

15:07.580 --> 15:09.180
改成这种方式

15:09.180 --> 15:10.280
好

15:10.280 --> 15:11.980
那我们这边一步一步来做

15:11.980 --> 15:12.180
好

15:12.180 --> 15:12.680
首先的话

15:12.680 --> 15:13.880
我们这边的话需要什么呢

15:13.880 --> 15:17.180
需要这个实现

15:17.180 --> 15:20.680
实现这个syntallic event

15:20.680 --> 15:25.050
实现这个合成实现对象

15:25.050 --> 15:28.650
实现这个syntallic event

15:28.650 --> 15:30.750
这个syntallic event的话

15:30.750 --> 15:31.650
它指的是什么呢

15:31.650 --> 15:33.550
是指的是合成实现对象

15:33.550 --> 15:34.350
对吧

15:34.350 --> 15:40.750
指的指的是合成世界对象

15:40.750 --> 15:43.150
那么在这个react中

15:43.150 --> 15:45.750
在react中的这个syntallic

15:45.750 --> 15:46.650
这个event

15:46.650 --> 15:47.350
它会什么呢

15:47.350 --> 15:53.550
会包含很多的这个属性和方法

15:53.550 --> 15:54.050
然后接下来

15:54.050 --> 15:55.850
这边我们出于这个掩饰目的

15:55.850 --> 15:57.450
我们这边就只实现

15:57.450 --> 15:58.850
这个一个方法就可以了

15:58.850 --> 16:00.650
就是煮什么泡

16:00.750 --> 16:05.450
这里我们出于这个掩饰的目的

16:05.450 --> 16:07.350
掩饰的目的

16:07.350 --> 16:10.450
我们只实现一个

16:10.450 --> 16:13.350
实现一个这个阻止

16:13.350 --> 16:14.750
阻止泡泡

16:14.750 --> 16:15.450
OK

16:15.450 --> 16:15.650
好

16:15.650 --> 16:18.450
然后来到我们这边

16:18.450 --> 16:19.650
来到我们这边

16:19.650 --> 16:20.250
这边的话

16:20.250 --> 16:22.150
我们就新建一个

16:22.150 --> 16:24.050
我们在这边src下面

16:24.050 --> 16:25.250
我们新建一个

16:25.250 --> 16:30.420
新建一个比如说叫做myevent

16:30.420 --> 16:32.220
myevent.js

16:32.220 --> 16:32.520
好

16:32.520 --> 16:33.220
然后这里

16:33.220 --> 16:33.620
这里的话

16:33.620 --> 16:34.820
我们就class

16:34.820 --> 16:37.620
class一个syntallic event

16:37.620 --> 16:38.420
我们这边的话

16:38.420 --> 16:39.520
创建一个什么呢

16:39.520 --> 16:40.420
创建一个

16:40.420 --> 16:44.920
这个叫做合成世界对象的这个类

16:44.920 --> 16:45.620
对吧

16:45.620 --> 16:48.920
这个是合成世界

16:48.920 --> 16:51.520
合成世界对象

16:51.520 --> 16:52.720
这个类

16:52.720 --> 16:53.420
然后回头的话

16:53.420 --> 16:54.920
外部通过new这个

16:54.920 --> 16:55.820
是不是就可以得到一个

16:55.820 --> 16:57.320
合成世界的这个对象

16:57.320 --> 16:57.920
对不对

16:57.920 --> 16:58.020
好

16:58.020 --> 17:00.120
那接下来在这里

17:00.120 --> 17:03.870
constructor

17:04.770 --> 17:05.470
首先的话

17:05.470 --> 17:06.570
这边我接受什么呢

17:06.570 --> 17:09.670
接受这个原生的世界对象

17:09.670 --> 17:10.170
然后接下来

17:10.170 --> 17:12.570
我把这个原生的世界对象保存到什么呢

17:12.570 --> 17:14.170
保存到这里

17:14.170 --> 17:16.770
叫做lative event

17:16.770 --> 17:17.570
OK

17:17.570 --> 17:22.290
这边是保存

17:22.290 --> 17:27.590
保存原生的世界对象

17:27.590 --> 17:27.990
OK

17:27.990 --> 17:29.590
这首先这一步

17:29.590 --> 17:29.790
好

17:29.790 --> 17:30.390
然后接下来的话

17:30.390 --> 17:33.890
你这个世界对象上面有什么方法

17:33.890 --> 17:35.490
世界对象上面有什么方法

17:35.490 --> 17:36.390
你看看这里

17:36.390 --> 17:37.490
这里的话在用什么

17:37.490 --> 17:38.390
是不是这边的话

17:38.390 --> 17:38.790
这里的话

17:38.790 --> 17:40.190
实际上拿到了就是这个

17:40.190 --> 17:43.190
拿到了就是那个合成世界对象

17:43.190 --> 17:44.190
那合成世界对象的话

17:44.190 --> 17:47.190
我们这边要让这个开发者是不感知不到

17:47.190 --> 17:47.590
对不对

17:47.590 --> 17:49.190
我们让开发者尽量的感知不到

17:49.190 --> 17:49.790
所以这边的话

17:49.790 --> 17:52.990
就是保留你以前动物开发的这个习惯

17:52.990 --> 17:53.590
所以这边呢

17:53.590 --> 17:56.490
就是你这边调用这个stop

17:56.490 --> 17:57.390
propagation

17:57.390 --> 17:59.690
你感觉像是就是原生动物的方法

17:59.690 --> 18:01.390
但实际上不是

18:01.390 --> 18:02.190
对不对

18:02.190 --> 18:04.090
这边是我们这个合成世界对象

18:04.090 --> 18:05.390
给你提供的

18:05.790 --> 18:06.190
看到没有

18:06.190 --> 18:08.490
所以我们这边需要提供这么一个

18:08.490 --> 18:09.690
阻止冒泡的方法

18:11.290 --> 18:12.490
合成世界对象

18:13.890 --> 18:16.490
合成世界对象

18:16.490 --> 18:19.890
需要提供一个

18:19.890 --> 18:25.290
这个和原生动物

18:25.290 --> 18:25.890
同名的

18:27.790 --> 18:29.890
同名的这个阻止冒泡

18:31.290 --> 18:34.290
阻止冒泡的这个方法

18:35.490 --> 18:37.790
okstoppropagation

18:37.790 --> 18:39.090
好然后接下来话在这里

18:39.090 --> 18:39.590
这里的话

18:39.590 --> 18:41.590
我首先在这个对象上面

18:41.590 --> 18:43.290
我这边的话给他挂一个属性

18:43.290 --> 18:47.790
这个属性的话叫做下滑线stoppropagation

18:47.790 --> 18:48.990
如果你调这个方法

18:48.990 --> 18:51.590
我首先将这个属性设置为处

18:52.890 --> 18:53.890
ok

18:53.890 --> 18:54.590
当开发者

18:55.590 --> 18:57.790
当开发者调用

18:58.890 --> 19:00.590
这个stoppropagation的时候

19:02.390 --> 19:02.990
写到上面吧

19:03.990 --> 19:07.190
当开发者调用这个stoppropagation

19:07.190 --> 19:08.190
方法的时候

19:08.190 --> 19:09.590
将什么呢

19:09.590 --> 19:10.590
将该对象

19:11.190 --> 19:12.790
该合成世界

19:13.990 --> 19:16.990
合成世界对象的这个下滑线

19:19.190 --> 19:20.190
这个这个设置为处

19:20.190 --> 19:21.390
这个我们回头会用到的

19:21.390 --> 19:23.690
我们内部的话会根据这个作为判断

19:23.690 --> 19:25.190
就看他有没有阻止冒泡

19:26.190 --> 19:28.290
将这个设置为处

19:29.790 --> 19:30.890
设置为处

19:30.890 --> 19:31.890
好

19:31.890 --> 19:32.890
然后完事之后

19:32.890 --> 19:34.190
然后我们这边

19:34.190 --> 19:34.790
义父

19:36.790 --> 19:37.590
义父什么呢

19:37.590 --> 19:38.190
义父

19:40.190 --> 19:41.790
这个lative event

19:41.790 --> 19:43.290
这是不是原生的这个

19:43.290 --> 19:44.590
原生的世界对象

19:44.590 --> 19:45.190
对不对

19:45.190 --> 19:46.890
如果你原生的世界对象

19:46.890 --> 19:49.790
这边他有这个stoppropagation

19:49.790 --> 19:49.890
好

19:49.890 --> 19:50.790
那我们这边就干嘛呢

19:50.790 --> 19:51.890
我们这边就调用

19:51.890 --> 19:53.190
rst

19:53.190 --> 19:54.390
lative

19:54.390 --> 19:55.790
stoppropagation

19:55.790 --> 19:56.790
这边就是调用

19:59.900 --> 20:01.000
调用

20:01.000 --> 20:02.600
原生

20:02.700 --> 20:03.700
世界对象

20:04.700 --> 20:06.300
的这个stoppropagation

20:06.300 --> 20:06.700
方法

20:08.900 --> 20:11.800
方法来阻止冒泡

20:12.800 --> 20:13.300
对吧

20:13.300 --> 20:13.600
好

20:13.600 --> 20:13.900
这个呢

20:13.900 --> 20:15.700
就是我们的这个合成世界

20:15.700 --> 20:15.900
啊

20:15.900 --> 20:16.900
当你这个

20:17.000 --> 20:17.700
react里面的话

20:17.700 --> 20:19.200
他其实还有很多属性啊

20:19.200 --> 20:20.000
还有很多属性

20:20.000 --> 20:20.700
我们这边呢

20:20.700 --> 20:21.300
简易版

20:21.300 --> 20:21.700
简易版

20:21.700 --> 20:22.200
我们这边呢

20:22.200 --> 20:24.900
就是只写这一个stoppropagation

20:25.400 --> 20:25.900
ok

20:25.900 --> 20:26.100
好

20:26.100 --> 20:27.400
把这个放到笔记里面

20:30.190 --> 20:30.490
好

20:30.490 --> 20:30.890
这里

20:31.890 --> 20:33.090
啊

20:33.090 --> 20:35.190
首先的话是这个啊

20:35.190 --> 20:35.790
好

20:35.790 --> 20:36.990
在上面的代码中

20:38.090 --> 20:38.690
在

20:40.390 --> 20:42.790
上面的代码中啊

20:42.790 --> 20:43.490
我们

20:44.790 --> 20:47.390
我们创建了一个什么

20:47.390 --> 20:48.990
说创建了一个这个

20:48.990 --> 20:50.590
synthetic event

20:51.690 --> 20:53.790
这个类对不对啊

20:53.790 --> 20:54.490
这个类

20:55.490 --> 20:56.290
这个类

20:57.390 --> 20:58.090
这个类

20:58.390 --> 21:01.690
可以用来生产什么啊

21:01.690 --> 21:02.690
或者说创建

21:02.990 --> 21:04.690
创建这个合成世界对象

21:07.180 --> 21:07.580
对不对

21:07.980 --> 21:08.280
好

21:08.280 --> 21:09.080
然后内部

21:09.780 --> 21:11.580
内部保存了

21:12.280 --> 21:15.180
原生的世界对象

21:15.880 --> 21:16.380
对不对

21:16.380 --> 21:18.280
然后还提供了一个什么呢

21:18.280 --> 21:21.380
提供了一个和原生

21:23.520 --> 21:25.420
原生这个dorm

21:26.120 --> 21:28.220
原生dorm的这个世界对象

21:29.220 --> 21:32.220
世界对象同名的

21:33.020 --> 21:34.520
同名的这个

21:34.820 --> 21:35.920
阻止冒泡的方法

21:36.820 --> 21:39.520
阻止冒泡的这个方法

21:40.120 --> 21:40.520
对不对

21:40.520 --> 21:42.420
也叫做这个stoppropagation

21:42.620 --> 21:43.420
你会发现的话

21:43.420 --> 21:44.920
就是这边框架的时候

21:44.920 --> 21:46.420
他尽量他在命名的时候

21:46.420 --> 21:48.720
尽量都是保持原有的命名

21:49.120 --> 21:51.620
我不知道大家有没有学过那个view

21:51.820 --> 21:52.620
应该是学过了

21:52.620 --> 21:53.420
我这边是

21:53.420 --> 21:54.720
假设大家学过view的

21:54.920 --> 21:55.720
那学view的时候

21:55.720 --> 21:56.820
大家的话想一想

21:57.020 --> 21:58.120
就是你当时在学到

21:58.120 --> 22:00.020
那个view里面的那个宿主的时候

22:00.220 --> 22:01.420
他里面是不是提供了什么

22:01.420 --> 22:03.420
铺写prop

22:03.720 --> 22:04.820
是不是提供了这些方法

22:05.120 --> 22:07.220
那这些方法是原生的dorm方法吗

22:07.720 --> 22:08.220
不是的

22:08.720 --> 22:12.220
他是view内部自己实现的铺写prop

22:13.020 --> 22:13.420
对不对

22:13.820 --> 22:15.520
所以一般这个框架在设计的时候

22:15.520 --> 22:16.520
他们都会采用

22:16.520 --> 22:18.520
就是和原生的这个dorm

22:18.720 --> 22:19.920
比如同名的这个方法

22:20.220 --> 22:21.220
他尽量让你什么

22:21.220 --> 22:22.520
尽量让你感知不到

22:23.020 --> 22:24.720
就以前你这个用dorm开发

22:24.720 --> 22:25.920
你是怎么做的

22:26.020 --> 22:27.220
那现在你用我这个框架

22:27.220 --> 22:28.220
你就还是怎么做

22:28.620 --> 22:29.920
就尽量就是

22:30.320 --> 22:32.120
尽量小的给这个用户

22:32.220 --> 22:33.120
就开发者

22:33.220 --> 22:34.720
带来这种新制负担

22:35.320 --> 22:35.820
怎么样吧

22:36.520 --> 22:38.020
说他这边一般都是这种同名的

22:38.320 --> 22:39.520
stopprop

22:40.220 --> 22:40.620
ok

22:40.720 --> 22:42.220
提供了这么一个方法

22:43.020 --> 22:44.120
而这是首先第一步

22:44.320 --> 22:46.020
实现这个syntallic event

22:46.120 --> 22:47.320
这个合成世界对象

22:47.820 --> 22:49.420
好然后接下来的话这边

22:50.520 --> 22:51.020
下一步

22:51.320 --> 22:52.020
下一步的话

22:52.020 --> 22:53.720
我们这边就需要来实现

22:54.320 --> 22:57.920
实现世界的这个传播机制

22:59.720 --> 23:00.120
对吧

23:00.220 --> 23:01.020
实现这个

23:01.620 --> 23:02.420
好那这边的话

23:02.420 --> 23:04.520
对于这个可以冒泡的这个世界

23:04.720 --> 23:07.120
整个世界传播机制的话

23:07.120 --> 23:08.420
他有这么一些步骤

23:09.620 --> 23:14.420
对于可以冒泡的这个世界

23:14.920 --> 23:18.520
整个世界的传播机制

23:19.120 --> 23:20.420
传播机制

23:20.920 --> 23:22.520
实现步骤

23:23.020 --> 23:23.520
主下

23:24.220 --> 23:24.720
ok

23:25.020 --> 23:27.020
好我把这个这些步骤就把拿过来

23:31.160 --> 23:32.360
啊这把拿过来

23:33.360 --> 23:34.560
这里来看一下

23:34.760 --> 23:36.260
首先的话是在什么呢

23:36.260 --> 23:37.960
首先是在根元素

23:38.760 --> 23:42.360
在根元素绑定这个对应世界类型

23:42.560 --> 23:44.060
对应的这个世界回掉

23:44.760 --> 23:49.360
然后所有这个子孙元素触发该类世界时

23:49.360 --> 23:52.660
最终会委托给这个根元素的世界

23:52.860 --> 23:54.260
回掉喊数来进行处理

23:54.760 --> 23:55.960
这个其实就是什么

23:55.960 --> 23:58.960
这个实现就是这个世界委托的原理

23:59.860 --> 24:00.260
对不对

24:00.260 --> 24:01.560
你以前在学习多么的时候

24:01.560 --> 24:03.260
你一定学过这个世界委托

24:03.460 --> 24:05.060
世界委托的原理就是什么

24:05.160 --> 24:07.360
是绑定在他的这个复原书上面

24:07.660 --> 24:07.960
对不对

24:07.960 --> 24:08.660
只不过他这边的话

24:08.660 --> 24:10.460
就直接绑定在根元素上面

24:11.260 --> 24:13.260
啊直接绑定在根元素上面啊

24:13.760 --> 24:13.960
好

24:13.960 --> 24:14.560
然后第二步

24:14.560 --> 24:15.060
第二步的话

24:15.060 --> 24:18.060
就是寻找触发世界的这个多么元素

24:18.260 --> 24:21.060
找到对应的这个fiber load

24:21.460 --> 24:22.760
找到这个对应的fiber

24:23.460 --> 24:23.660
好

24:23.660 --> 24:24.460
然后第三步

24:24.660 --> 24:27.160
搜集从当前的这个fiber load

24:27.460 --> 24:29.660
到这个hosted root fiber之间

24:29.760 --> 24:32.960
所有注册了这种事件的这个回掉喊数

24:33.260 --> 24:34.060
比如说我这边呢

24:34.060 --> 24:36.160
绑定的是一个clic点击事件

24:36.360 --> 24:37.660
让我这边就会搜集

24:37.960 --> 24:39.860
当前的这个fiber节点

24:39.960 --> 24:42.060
一直到这个hosted root fiber

24:42.460 --> 24:45.360
所有这个注册了这个clic这个事件的

24:45.360 --> 24:46.560
这个回掉喊数

24:46.660 --> 24:48.060
我就会把它收集起来

24:48.760 --> 24:49.860
收集起来之后

24:49.860 --> 24:51.060
然后接下来这边的话

24:51.260 --> 24:52.560
首先反向便利

24:52.960 --> 24:55.260
反向便利并执行一遍

24:55.260 --> 24:58.060
就是所有收集的这个回掉喊数里面

24:58.160 --> 25:00.160
他到时候他会收集到一个数组里面

25:00.560 --> 25:03.260
就所有这个所有节点他的这个

25:03.360 --> 25:05.260
绑定的这种点击事件

25:05.360 --> 25:07.160
他会统一的放到一个数组里面

25:07.360 --> 25:07.560
好

25:07.560 --> 25:09.460
然后接下来他这边就反向便利

25:09.760 --> 25:11.060
便利的时候要同时什么呢

25:11.060 --> 25:12.260
同时这个执行

25:12.960 --> 25:13.360
ok

25:13.460 --> 25:14.660
他这边就是模拟什么呢

25:14.660 --> 25:16.260
模拟这个补货阶段

25:16.360 --> 25:17.260
啊好

25:17.260 --> 25:19.060
然后这样如果你要模拟这个帽炮

25:19.360 --> 25:20.060
模拟帽炮的话

25:20.060 --> 25:21.360
他这边就正向便利

25:22.260 --> 25:23.560
正向便利那个数组

25:23.560 --> 25:25.160
然后接下来执行一遍

25:25.760 --> 25:26.260
ok

25:26.560 --> 25:26.760
好

25:26.760 --> 25:28.060
来我们一点点来写吧

25:28.260 --> 25:29.560
带着大家一点点写一点

25:30.260 --> 25:30.460
好

25:30.460 --> 25:31.860
回到我们的这个代码这边

25:32.460 --> 25:33.560
这个先保存一下

25:33.960 --> 25:34.760
回到这边

25:35.660 --> 25:35.860
啊

25:35.860 --> 25:37.660
这个app点击是这个可以删了啊

25:37.660 --> 25:39.160
这个我们可以不要了啊

25:39.160 --> 25:40.560
这个是一个组件吗

25:40.660 --> 25:41.660
留在这吧留在这

25:42.360 --> 25:42.660
好

25:42.660 --> 25:43.660
然后这边

25:45.360 --> 25:46.560
这边的话怎么做呢

25:46.660 --> 25:48.060
啊啊先在这边

25:48.360 --> 25:49.760
这边的话我们

25:50.660 --> 25:51.560
我们这边的话

25:51.560 --> 25:52.660
我们写一个

25:52.660 --> 25:53.660
const

25:53.660 --> 25:55.760
一个叫做 and event

25:56.660 --> 25:57.360
ok

25:57.360 --> 25:58.660
他是一个函数

26:00.460 --> 26:01.260
他这个函数

26:01.260 --> 26:02.960
然后接下来我们把这个函数的话

26:02.960 --> 26:04.560
我们把他导出出去

26:05.260 --> 26:06.460
啊把他导出出去

26:06.660 --> 26:07.560
导出出去之后

26:07.560 --> 26:09.760
然后接下来他这边接受两个参数

26:09.860 --> 26:10.660
一个是怎么呢

26:10.660 --> 26:12.560
一个是你的容器

26:12.660 --> 26:14.560
一个是你事件的类型

26:14.760 --> 26:15.860
啊我们这边写一下

26:17.060 --> 26:18.060
啊该方法

26:18.060 --> 26:19.660
该方法用于绑定事件

26:20.760 --> 26:22.360
该方法

26:23.260 --> 26:25.260
该方法用于

26:25.660 --> 26:26.260
给什么呢

26:26.260 --> 26:27.460
给根元素

26:28.060 --> 26:28.960
根元素

26:29.460 --> 26:31.060
绑定事件

26:31.660 --> 26:31.960
ok

26:31.960 --> 26:33.960
这边传入的也是这个根结点啊

26:33.960 --> 26:34.660
container

26:34.660 --> 26:36.460
那这个的话是这个根元素

26:38.660 --> 26:39.860
根元素啊

26:39.860 --> 26:40.360
这个是什么呢

26:40.360 --> 26:42.260
这个是你绑定的事件类型

26:43.360 --> 26:43.860
ok

26:44.060 --> 26:44.360
好

26:44.360 --> 26:45.460
然后接下来在这里

26:45.760 --> 26:46.560
在这里的话

26:46.560 --> 26:48.560
我们这边就直接给这个container

26:50.560 --> 26:51.760
直接给container

26:51.860 --> 26:53.760
点and event listener

26:54.460 --> 26:55.860
啊我们给他绑定事件

26:56.060 --> 26:57.160
绑定什么事件啊

26:57.160 --> 26:58.460
你这边传的是什么type

26:58.460 --> 27:00.260
我们这边就绑定什么样的事件

27:00.260 --> 27:00.760
对吧

27:00.760 --> 27:02.560
那接下来触发这个事件之后

27:02.560 --> 27:04.060
然后接下来你要做什么

27:04.360 --> 27:05.260
我要做什么呢

27:05.260 --> 27:06.760
啊我这边的话我需要

27:07.060 --> 27:09.260
进行一个这个事件的这个收集

27:09.760 --> 27:11.560
啊进行事件的收集

27:13.560 --> 27:15.560
进行事件

27:17.060 --> 27:19.360
事件的收集

27:20.660 --> 27:21.260
ok

27:21.260 --> 27:23.260
啊这边让我回头的话会有一个叫做

27:23.760 --> 27:24.660
dispatch

27:25.260 --> 27:26.860
dispatch event

27:28.460 --> 27:30.560
ok啊这个的话我们一会再写啊

27:30.560 --> 27:32.560
这边我们回头这边会有一个

27:32.860 --> 27:33.560
const

27:34.060 --> 27:35.360
dispatch event

27:36.260 --> 27:37.560
他对呢也是个函数

27:38.260 --> 27:39.660
啊他是负责收集的

27:39.960 --> 27:40.460
ok

27:40.660 --> 27:43.060
好那我们这边就把这个and event

27:43.560 --> 27:44.660
把他导出出去了

27:44.860 --> 27:46.260
对吧导出出去了之后

27:46.260 --> 27:48.360
然后接下来在你的这个index这边

27:48.460 --> 27:49.560
你可以把他引入

27:51.980 --> 27:53.380
可以把他引入在这边

27:53.580 --> 27:55.780
我把他引入一下 import

27:56.980 --> 27:57.980
and event

27:58.480 --> 27:59.080
from

28:01.280 --> 28:03.480
from当前目录下面的什么呢

28:03.580 --> 28:05.480
这个my event

28:06.380 --> 28:07.880
对吧好引入了之后

28:07.880 --> 28:09.180
然后接下来在这边

28:10.380 --> 28:11.580
这边让我就调用什么呢

28:11.580 --> 28:12.880
调用and event

28:13.180 --> 28:14.180
那这边进行什么呢

28:14.180 --> 28:15.980
是不是进行根元素的事件绑定

28:16.880 --> 28:20.580
进行根元素的这个事件

28:21.080 --> 28:22.880
绑定啊换句话说

28:24.680 --> 28:27.280
啊换句话说哎

28:30.560 --> 28:31.560
换句话说

28:34.380 --> 28:38.780
换句话说就是使用我们自己的

28:38.880 --> 28:40.180
这个事件系统

28:41.880 --> 28:43.680
对不对是我们自己的事件系统

28:43.880 --> 28:45.780
好这边那是需要齐收参数的

28:45.780 --> 28:47.180
那我们这边那首先container

28:47.180 --> 28:48.580
container的话就应该是什么

28:48.680 --> 28:49.580
是不是就是这个

28:50.580 --> 28:51.280
这边是他

28:52.780 --> 28:54.680
对不对好绑定什么事件

28:54.680 --> 28:56.380
我们这边现在我们就把写死

28:56.380 --> 28:58.180
我们这种简易版的我们就把写死

28:58.280 --> 29:00.080
这边的话是点击事件

29:00.780 --> 29:02.980
ok好这边完了之后

29:02.980 --> 29:04.980
然后接下来回到我们这边

29:05.880 --> 29:08.280
回到这边好这边的话下一步

29:08.580 --> 29:09.980
下一步的话就应该干嘛呢

29:09.980 --> 29:12.580
这边是不是应该是做一个这个收集了

29:12.880 --> 29:14.080
啊这边就是dispatch

29:14.080 --> 29:15.180
啊这边是派发

29:15.180 --> 29:17.880
这边是事件的进行事件的这个派发

29:21.860 --> 29:23.560
事件的派发

29:26.440 --> 29:28.440
好然后接下来这边这边的话

29:28.440 --> 29:32.040
你这边在绑定这个这种类型的这种事件

29:32.140 --> 29:33.340
对吧然后既然这边的话

29:33.340 --> 29:35.440
他会接收一个事件对象

29:35.440 --> 29:36.740
注意这个事件对象是什么

29:36.740 --> 29:39.240
这个事件对象是原生的这个

29:39.540 --> 29:42.140
dorm里面啊dorm里面的这个事件对象

29:42.440 --> 29:43.140
啊然后接下来

29:43.140 --> 29:44.540
我把这个事件对象

29:44.840 --> 29:46.040
我把它传过去

29:46.340 --> 29:47.140
这边这个e

29:47.540 --> 29:48.340
好然后接下来

29:48.340 --> 29:49.540
我这边再传一个什么呢

29:49.540 --> 29:51.140
再传一个这个type

29:53.050 --> 29:53.950
再把这个type

29:54.250 --> 29:55.950
把它传递过去啊

29:57.550 --> 29:58.950
好这边type在传的时候

29:58.950 --> 30:00.150
这个type是事件类

30:00.150 --> 30:01.450
这个事件类型吗

30:01.450 --> 30:02.750
对吧就是你这边

30:03.350 --> 30:05.150
这边对应了这个click

30:05.350 --> 30:06.250
对吧事件类型

30:06.250 --> 30:07.450
好这边在传递的时候

30:07.450 --> 30:08.150
我就把它干嘛呢

30:08.150 --> 30:09.650
我就把它全部转成大写

30:10.150 --> 30:11.450
to 他是个制服创

30:11.450 --> 30:13.650
然后接下来我这边to这个opercase

30:14.750 --> 30:15.550
opercase

30:15.950 --> 30:17.550
OK把它转成这个大写

30:17.850 --> 30:19.550
好那接下来来到这边

30:19.850 --> 30:21.850
这边的话就应该接受这两个参数

30:21.850 --> 30:23.250
对吧首先一个是e

30:23.550 --> 30:24.250
一个是什么呢

30:24.250 --> 30:25.850
一个是你的这个type

30:26.250 --> 30:27.350
好我们这边记录一下

30:28.450 --> 30:30.050
这边dispatch event

30:30.150 --> 30:31.950
这个e的话是原生

30:33.050 --> 30:34.250
原生的事件对象

30:35.150 --> 30:37.850
原生的事件对象

30:38.050 --> 30:39.850
好这个的话是事件类型

30:40.850 --> 30:42.450
事件类型啊

30:42.450 --> 30:46.150
已经全部转为了什么呢

30:46.150 --> 30:47.350
转为了大写

30:48.050 --> 30:51.550
对不对啊比如这里传递

30:52.150 --> 30:53.850
过来的是什么呢

30:53.850 --> 30:54.850
是click

30:56.150 --> 30:57.250
对吧click

30:57.850 --> 30:59.750
好然后接下来在这里面

30:59.850 --> 31:00.550
在这里面的话

31:00.550 --> 31:01.550
我们首先第一步

31:01.550 --> 31:03.450
第一步的话我们首先就是

31:03.950 --> 31:05.050
实力化一个

31:05.750 --> 31:06.650
实力化

31:07.750 --> 31:09.650
一个合成事件对象

31:11.650 --> 31:13.350
怎么实力化一个合成事件对象

31:13.650 --> 31:14.250
非常简单

31:14.250 --> 31:15.850
你刚才这边什么类都写好了

31:16.450 --> 31:17.850
对不对你这边只需要干嘛

31:17.850 --> 31:18.950
只需要是不是new一下

31:19.750 --> 31:20.450
new一下他

31:21.050 --> 31:21.950
对不对new他

31:21.950 --> 31:22.750
然后接下来把什么呢

31:22.750 --> 31:24.550
把这个原生的这个事件对象

31:24.750 --> 31:25.350
把他传过去

31:25.350 --> 31:25.850
传过去之后

31:25.850 --> 31:27.850
他这边constructor这边接收到

31:27.850 --> 31:28.750
人家这边他就

31:28.950 --> 31:31.050
保存到这个lative event里面

31:31.450 --> 31:31.750
对不对

31:31.750 --> 31:33.850
整个这边这条线是不是就通了

31:34.550 --> 31:35.650
对不对好

31:35.650 --> 31:37.350
然后接下来我们这边保存一下

31:37.550 --> 31:38.350
const

31:38.650 --> 31:40.650
一个合成事件对象叫se

31:42.050 --> 31:42.550
ok

31:42.850 --> 31:44.450
好然后接下来的话拿到什么呢

31:44.450 --> 31:46.750
拿到这个就是触发事件的元素

31:49.830 --> 31:54.730
拿到触发事件的这个元素

31:55.130 --> 31:55.730
怎么拿

31:55.730 --> 31:57.230
你这边是不是可以通过e

31:57.230 --> 31:58.230
注意这里的e的话

31:58.230 --> 31:59.130
仍然是这个e

31:59.130 --> 32:00.030
这个e仍然是什么

32:00.030 --> 32:01.330
是不是原生的事件对象

32:01.730 --> 32:02.730
原生的事件对象

32:02.730 --> 32:03.430
他这边有个什么

32:03.430 --> 32:04.230
是不是e点

32:04.730 --> 32:05.430
target

32:06.430 --> 32:06.930
对不对

32:06.930 --> 32:08.030
通过这个可以拿到

32:08.030 --> 32:09.230
我们这边保存一下

32:09.730 --> 32:10.530
const

32:11.130 --> 32:11.730
ali

32:13.230 --> 32:13.930
保存一下

32:14.230 --> 32:15.330
好保存一下之后

32:15.330 --> 32:16.930
然后接下来我们这边要开始找

32:16.930 --> 32:18.130
这个fiber节点了

32:18.630 --> 32:20.630
这边let一个fiber

32:22.030 --> 32:23.430
好然后接下来通过什么呢

32:23.430 --> 32:24.530
通过for循环

32:25.930 --> 32:27.830
let这个prop

32:28.230 --> 32:29.730
应这个ali

32:30.730 --> 32:32.430
ok通过这个for循环

32:32.430 --> 32:33.430
我们这边要干嘛呢

32:33.430 --> 32:34.030
我们这边呢

32:34.030 --> 32:35.830
要通过这个动物元素

32:35.830 --> 32:38.030
找到对应的fiber load

32:39.130 --> 32:39.830
通过

32:41.740 --> 32:44.640
通过这个动物元素

32:45.040 --> 32:49.240
找到对应的这个fiber load

32:50.340 --> 32:52.740
ok好那接下来这边就是e

32:54.340 --> 32:55.440
你这边是在便利

32:55.440 --> 32:57.640
你这个是拿到的是这个动物元素吗

32:57.740 --> 32:58.440
动物元素

32:58.440 --> 32:59.440
人家这边在便利什么

32:59.440 --> 33:00.840
什么在便利他的属性吗

33:01.340 --> 33:01.640
对不对

33:01.640 --> 33:03.340
你动物元素上面绑定的属性

33:03.340 --> 33:05.540
好那接下来如果你的这个属性

33:05.840 --> 33:07.040
如果你这个prop

33:07.540 --> 33:09.940
然后点to这个local case

33:11.740 --> 33:13.040
如果你的这个属性

33:13.040 --> 33:16.040
然后接下来这边点incrude

33:18.080 --> 33:20.580
如果包含这个fiber

33:21.480 --> 33:23.680
让我这边让我这个fiber

33:24.180 --> 33:25.180
就等于什么呢

33:25.180 --> 33:26.280
等于ali

33:26.680 --> 33:27.580
那这个prop

33:30.310 --> 33:31.910
ok啊通过这个for循环

33:31.910 --> 33:33.110
是不是就拿到了

33:33.310 --> 33:33.610
对不对

33:33.610 --> 33:35.310
找到对应的这个fiber load

33:35.610 --> 33:37.010
好找到fiber load之后

33:37.010 --> 33:37.710
然后接下来

33:37.710 --> 33:39.210
然后我们需要收集

33:39.610 --> 33:42.110
收集这个对应的这个fiber load

33:42.210 --> 33:44.110
整个对应的这个路径上面

33:44.110 --> 33:46.410
所有的事件毁掉喊数

33:47.710 --> 33:48.310
接下来

33:50.480 --> 33:51.880
接下来就找到

33:52.880 --> 33:58.280
找到对应的这个fiber load之后

33:58.780 --> 34:01.480
接下来我们需要什么呢

34:01.480 --> 34:02.680
需要收集

34:03.080 --> 34:04.980
收集路径中

34:05.480 --> 34:06.780
就是该事件

34:07.680 --> 34:09.880
该事件类型

34:10.180 --> 34:13.480
所对应的所有的

34:13.780 --> 34:14.680
毁掉喊数

34:16.970 --> 34:17.470
ok

34:17.670 --> 34:18.370
好那这边的话

34:18.370 --> 34:19.770
我们会封装一个

34:20.070 --> 34:22.070
这边叫做collect

34:22.970 --> 34:25.470
collect收集collect pass

34:25.970 --> 34:27.570
我们一会会写这么一个方法

34:27.870 --> 34:28.570
这么一个方法

34:28.570 --> 34:29.970
然后接下来这边把什么呢

34:30.170 --> 34:31.370
把你的这个type

34:31.970 --> 34:32.570
传过去

34:32.670 --> 34:34.770
再把你找到的这个fiber节点

34:35.370 --> 34:35.970
传过去

34:36.270 --> 34:36.770
回头的话

34:36.770 --> 34:38.370
他会给我返回一个数组

34:39.570 --> 34:41.070
他会给我返回一个这个数组

34:41.070 --> 34:43.770
这个数组里面就存放了整个这个fiber

34:43.970 --> 34:44.870
一直到什么呢

34:44.870 --> 34:46.670
一直到这个就是根元数

34:46.870 --> 34:48.970
所有绑定了这个对应类型

34:49.370 --> 34:50.770
比如说你这个是click世界

34:50.770 --> 34:51.670
对吧点击世界

34:51.770 --> 34:54.270
所有绑定了这个点击世界的

34:54.570 --> 34:55.770
这个毁掉喊数

34:55.770 --> 34:58.070
就全部收集到这个数组里面

34:58.970 --> 34:59.370
ok

34:59.970 --> 35:01.770
好把这个这个上面写下

35:02.370 --> 35:03.570
collect pass

35:05.880 --> 35:06.780
const

35:06.880 --> 35:08.280
一个collect pass

35:10.880 --> 35:11.380
ok

35:11.680 --> 35:13.080
好那这个collect pass

35:13.080 --> 35:14.780
他这边就接收两个

35:15.180 --> 35:16.180
首先第一个是什么呢

35:16.180 --> 35:17.380
第一个是这个type

35:18.780 --> 35:19.480
第二个是什么呢

35:19.480 --> 35:20.580
第二个是你的fiber节点

35:20.580 --> 35:22.180
我们这边叫做begin

35:22.380 --> 35:23.580
我们这边记录一下

35:24.480 --> 35:25.880
这个collect pass

35:26.280 --> 35:27.180
该喊数

35:28.780 --> 35:29.780
或者说该方法

35:30.380 --> 35:32.480
该方法用于什么呢

35:32.480 --> 35:35.380
用于收集路径中

35:35.780 --> 35:37.680
这个路径中

35:37.680 --> 35:39.880
所有该类型

35:40.480 --> 35:42.880
就所有这个type类型

35:44.880 --> 35:48.380
所有type类型的世界

35:48.680 --> 35:49.580
毁掉喊数

35:51.380 --> 35:52.580
毁掉喊数

35:52.880 --> 35:53.380
ok

35:53.380 --> 35:55.280
全部把它收集到一个数组里面

35:56.180 --> 35:58.280
这是对应的世界类型

35:59.180 --> 36:01.180
这个是对应的这个fiber load

36:02.480 --> 36:02.980
ok

36:03.380 --> 36:03.680
好

36:03.680 --> 36:05.280
那接下来我们来看一下这个

36:05.580 --> 36:06.880
collect pass

36:08.780 --> 36:10.280
好这个collect pass

36:10.280 --> 36:10.780
我们刚才说了

36:10.780 --> 36:11.480
他最终的话

36:11.480 --> 36:14.580
他把这个收集到的这些世界毁掉喊数

36:14.680 --> 36:15.480
他放到一个什么呢

36:15.480 --> 36:16.780
放到一个数组里面

36:16.980 --> 36:17.280
对吧

36:17.280 --> 36:18.180
所以我们这边首先

36:18.180 --> 36:20.080
const一个pass

36:20.280 --> 36:21.880
他对应的是一个数组

36:22.080 --> 36:23.480
那这个数组拿来干嘛呢

36:23.480 --> 36:24.480
存放

36:26.080 --> 36:28.480
存放收集到的

36:28.880 --> 36:31.280
收集到的所有的这个

36:31.780 --> 36:32.580
毁掉喊数

36:34.280 --> 36:35.880
所有的这个世界

36:36.380 --> 36:37.180
毁掉喊数

36:37.280 --> 36:38.580
收集到这个数组里面

36:38.780 --> 36:40.680
好人家这边做一个这个while

36:41.180 --> 36:41.980
while循环

36:42.180 --> 36:43.780
而只要你这个begin

36:44.980 --> 36:46.680
begin就是你的那个fiber load嘛

36:46.680 --> 36:47.080
对吧

36:47.080 --> 36:47.880
那他有个什么

36:47.880 --> 36:49.080
他有个这个target

36:49.480 --> 36:50.880
他如果不等于3

36:52.480 --> 36:53.680
不等于3

36:54.280 --> 36:55.280
啊这边说明什么呢

36:55.280 --> 36:56.180
说明就是你这边

36:56.180 --> 36:59.280
如果不是这个host root fiber

36:59.780 --> 37:00.280
对吧

37:00.480 --> 37:01.080
如果

37:02.380 --> 37:04.180
不是这个host

37:04.980 --> 37:06.980
host root fiber

37:08.180 --> 37:08.880
那我就干嘛呢

37:08.880 --> 37:11.880
就一直往上便利

37:13.860 --> 37:14.260
ok

37:14.760 --> 37:14.960
好

37:14.960 --> 37:15.860
往上便利之后

37:15.860 --> 37:16.560
然后接下来

37:16.560 --> 37:18.460
我从这个当前的这个

37:18.760 --> 37:19.960
节点啊

37:19.960 --> 37:21.760
当前的这个fiber节点上面

37:21.860 --> 37:23.160
我这边拿到什么呢

37:23.260 --> 37:24.360
拿到你的这个

37:24.560 --> 37:25.160
memo

37:26.760 --> 37:28.560
memo memo日啊

37:28.560 --> 37:30.160
这个叫做memo的prose

37:30.860 --> 37:31.460
memo日

37:32.660 --> 37:33.260
prose

37:34.460 --> 37:35.460
ok以及什么呢

37:35.460 --> 37:36.860
以及你的这个target

37:37.660 --> 37:38.760
拿到这两个东西

37:40.160 --> 37:42.060
好然后接下来这边做个判断

37:42.160 --> 37:44.560
if你的这个target

37:44.960 --> 37:46.360
如果全等于什么呢

37:46.460 --> 37:47.460
全等于5

37:49.360 --> 37:50.960
全等于5说明什么

37:51.260 --> 37:52.460
说明你这边的话

37:52.460 --> 37:53.860
这个5代表就是

37:53.960 --> 37:56.460
动物元素对应的这个fiber load

37:56.860 --> 37:57.360
对不对

37:57.560 --> 37:58.160
如果

37:59.660 --> 38:01.160
如果target

38:01.560 --> 38:02.960
对应的值

38:03.460 --> 38:04.060
为什么呢

38:04.060 --> 38:06.260
为5说明是

38:06.760 --> 38:07.760
动物元素

38:09.060 --> 38:11.060
对应的这个fiber load

38:11.560 --> 38:13.560
好那既然是这个动物元素

38:13.560 --> 38:14.560
那动物元素的话

38:14.560 --> 38:15.760
那接下来换我们这边

38:16.560 --> 38:18.760
我们就来给他构建一个

38:19.760 --> 38:22.360
const一个event

38:22.360 --> 38:23.060
memo

38:23.060 --> 38:24.160
我们这边改成什么

38:24.160 --> 38:26.160
改成我们自己的棒的

38:26.760 --> 38:27.760
加上一个什么呢

38:27.760 --> 38:29.560
加上一个这个type

38:31.670 --> 38:32.670
加上一个type

38:32.870 --> 38:33.470
回头的话

38:33.470 --> 38:34.870
你构建出来是什么样子

38:35.070 --> 38:36.870
回头你构建出来是不是就这样子的

38:37.970 --> 38:38.370
对不对

38:38.370 --> 38:39.970
这个就是你绑定这个事件

38:40.170 --> 38:40.970
这个名字

38:41.170 --> 38:42.070
好然后接下来

38:42.070 --> 38:42.870
我们来看什么

38:42.870 --> 38:44.670
我们来看当前的这个

38:45.670 --> 38:47.170
就你当前的这个节点

38:47.170 --> 38:48.070
有没有

38:49.070 --> 38:50.270
接下来

38:51.870 --> 38:54.070
接下来我们来看

38:54.870 --> 38:55.670
当前

38:57.470 --> 38:59.070
当前的这个节点

39:00.270 --> 39:00.670
节点

39:01.570 --> 39:02.670
当前的节点

39:03.170 --> 39:05.470
是否有绑定

39:06.470 --> 39:07.670
有绑定事件

39:10.850 --> 39:12.550
ok好这边就是ef

39:13.550 --> 39:14.150
ef什么呢

39:14.150 --> 39:16.350
ef这个memo的processor

39:16.950 --> 39:17.550
and

39:18.150 --> 39:19.650
你这个object key

39:21.150 --> 39:22.750
object keys

39:22.750 --> 39:24.950
然后接下来这边这个memo

39:25.150 --> 39:26.750
memo的processor

39:26.950 --> 39:28.750
然后他这边的话include

39:30.350 --> 39:31.350
include

39:31.750 --> 39:32.550
包含什么呢

39:32.550 --> 39:34.350
包含这个event name

39:35.350 --> 39:37.550
如果进入这个衣服说明什么

39:39.150 --> 39:40.350
进入这个衣服说明什么

39:40.550 --> 39:42.550
说明你这边是否绑定了事件的

39:42.950 --> 39:43.450
对不对

39:44.150 --> 39:44.850
如果

39:45.850 --> 39:50.050
如果进入该event

39:50.450 --> 39:54.050
说明啊当前这个节点

39:55.050 --> 39:58.850
节点绑定了对应类型的事件

40:00.050 --> 40:03.650
对应类型的事件

40:04.050 --> 40:04.350
对不对

40:04.350 --> 40:06.650
就是通过这种方式绑定了事件的

40:06.850 --> 40:07.050
好

40:07.050 --> 40:07.950
那接下来回头的话

40:07.950 --> 40:09.050
我们这边就需要干嘛

40:09.050 --> 40:10.250
需要进行收集

40:10.850 --> 40:13.150
需要进行收集

40:13.350 --> 40:14.750
收集到哪里

40:14.750 --> 40:16.550
是不是收集到这个pass

40:17.050 --> 40:17.850
数组里面

40:19.450 --> 40:19.950
对不对

40:20.150 --> 40:20.350
好

40:20.350 --> 40:21.550
那我们这边const

40:21.950 --> 40:23.850
const一个passnode

40:24.250 --> 40:25.750
首先他是一个空对象

40:26.750 --> 40:27.550
空对象之后

40:27.550 --> 40:28.950
然后叫这边这个passnode

40:30.350 --> 40:31.150
passnode

40:31.150 --> 40:33.250
然后接下来他这边这个type

40:34.450 --> 40:35.950
然后等于一个什么呢

40:36.250 --> 40:38.750
等于一个这个memo的processor

40:39.150 --> 40:40.550
然后event name

40:43.400 --> 40:43.900
ok

40:44.100 --> 40:44.300
好

40:44.300 --> 40:46.600
然后回头的话把这个passnode

40:46.700 --> 40:48.700
推入到这个pass这个数组里面

40:50.200 --> 40:51.700
点这个push

40:52.700 --> 40:53.900
把这个passnode

40:54.700 --> 40:55.600
把它推进去

40:56.200 --> 40:56.700
ok

40:56.900 --> 40:57.900
这边是不是就收集完了

40:58.000 --> 40:58.900
收集完了之后

40:58.900 --> 41:00.100
然后退出这个衣服之后

41:00.100 --> 41:01.900
然后接下来这边就该收集什么

41:01.900 --> 41:03.000
所以收集下一个

41:03.100 --> 41:06.200
说这边begin等于一个begin点return

41:08.430 --> 41:08.930
return

41:09.030 --> 41:10.630
是不是找他的上一期fiber节点

41:10.730 --> 41:12.430
所以这个begin是fiber节点啊

41:12.830 --> 41:14.330
传过来的是一个fiber节点

41:14.930 --> 41:15.330
ok

41:15.630 --> 41:15.830
好

41:15.830 --> 41:17.830
那整个如果他退出这个wile

41:18.030 --> 41:19.430
退出这个wile的话说明是不是

41:19.430 --> 41:20.630
就是已经收集完了

41:20.930 --> 41:21.230
对不对

41:21.230 --> 41:22.630
那接下来我们这边return

41:23.130 --> 41:25.130
return这个pass

41:26.930 --> 41:28.630
他返回这么一个数组

41:29.530 --> 41:30.030
ok

41:30.330 --> 41:31.230
返回这么个数组

41:31.330 --> 41:32.730
这个数组到时候长什么样子

41:32.730 --> 41:34.430
这个数组到时候就是长这个样子的

41:35.030 --> 41:36.030
这边这个return

41:38.030 --> 41:40.230
return到时候这边return

41:40.530 --> 41:42.130
这边到时候返回的数组是

41:42.130 --> 41:43.730
他这边返回的首先是个数组

41:43.730 --> 41:46.130
数组的话他这边就是一个一个的对象

41:47.030 --> 41:47.430
ok

41:47.530 --> 41:48.730
里面就是一个一个对象

41:48.830 --> 41:50.330
然后每个对象长什么样子的

41:50.430 --> 41:52.530
每个对象的话大致就是长这个样子的

41:52.830 --> 41:54.930
你这边的话就就是这个对象吗

41:55.030 --> 41:55.230
对吧

41:55.230 --> 41:57.430
数组里面就是一个一个这个pass note的这个对象

41:57.630 --> 41:58.730
pass note的对象里面的话

41:58.730 --> 41:59.730
他这边他就是

42:00.830 --> 42:01.430
click

42:02.530 --> 42:04.430
这边他就是这个bump我看一下

42:05.230 --> 42:06.130
这边他是type

42:06.130 --> 42:07.630
这边就是应该是click

42:07.930 --> 42:08.830
然后对应什么呢

42:08.830 --> 42:09.730
对应你这边

42:10.130 --> 42:12.330
memo的这个prop是even to name

42:12.530 --> 42:13.630
这个这个对应的是什么

42:13.630 --> 42:15.030
说对应的是一个这个

42:15.330 --> 42:16.030
回掉函数

42:16.530 --> 42:17.030
对不对

42:17.030 --> 42:18.530
对应的是一个回掉函数

42:19.330 --> 42:19.830
ok

42:19.830 --> 42:21.430
说你到时候你整个数组的话

42:21.430 --> 42:22.630
他收集起来的话

42:22.630 --> 42:24.230
就是长这个样子的click

42:24.630 --> 42:27.230
然后对应的是这么一个回掉函数

42:29.130 --> 42:29.730
点点点

42:32.090 --> 42:32.690
点点点

42:32.890 --> 42:33.390
ok

42:33.490 --> 42:35.590
你看我们这样子的话通过这种方式

42:35.590 --> 42:36.890
是不是就把所有的

42:37.190 --> 42:38.390
沿着这条路径

42:38.490 --> 42:39.790
从这个fiber load

42:39.890 --> 42:41.490
就当前的这个fiber load

42:41.590 --> 42:42.790
一直往上面

42:42.790 --> 42:45.190
是把所有这个该类型的这个

42:45.290 --> 42:46.290
事件回掉函数

42:46.390 --> 42:47.890
是不是全部就收集起来了

42:48.590 --> 42:49.090
对不对

42:49.290 --> 42:50.090
收集起来了

42:51.290 --> 42:52.390
这边这个收集了

42:52.690 --> 42:53.590
收集了之后

42:53.590 --> 42:55.090
然后接下来下一步

42:56.390 --> 42:57.090
下一步的话

42:57.090 --> 42:57.690
我们就干嘛呢

42:57.690 --> 42:58.690
我们就模拟

43:00.590 --> 43:02.290
模拟这个补货

43:03.090 --> 43:04.890
补货的实现

43:05.190 --> 43:06.190
先补货对吧

43:06.190 --> 43:07.690
先这样子先补货

43:07.690 --> 43:08.790
然后接下来再干嘛

43:08.790 --> 43:10.290
再冒泡是不往上

43:10.790 --> 43:11.190
对不对

43:11.490 --> 43:13.390
模拟这个补货的实现

43:13.490 --> 43:14.290
那再去什么呢

43:14.290 --> 43:15.190
再去模拟

43:15.390 --> 43:16.390
冒泡的实现

43:16.890 --> 43:17.790
啊模拟

43:18.090 --> 43:18.990
冒泡的实现

43:23.180 --> 43:25.280
冒泡的实现

43:26.180 --> 43:27.080
ok好

43:27.080 --> 43:28.780
这个模拟补货和冒泡

43:28.780 --> 43:30.280
实际上一个方法就搞定了

43:30.780 --> 43:32.680
啊直接一个方法就搞定了

43:32.980 --> 43:33.480
为什么

43:33.880 --> 43:34.680
因为他这边的话

43:34.680 --> 43:35.980
其实补货和冒泡

43:35.980 --> 43:37.280
实际上就是一个反向

43:37.380 --> 43:37.980
对不对啊

43:37.980 --> 43:39.580
一个正向一个反向啊

43:39.580 --> 43:40.080
说这边呢

43:40.080 --> 43:41.080
我们写一个方法

43:41.280 --> 43:42.080
这边叫做什么呢

43:42.080 --> 43:43.080
叫做这个trigger

43:46.380 --> 43:47.780
我们这边叫做trigger

43:47.980 --> 43:49.580
啊trigger event

43:50.580 --> 43:51.980
event flow

43:53.280 --> 43:54.980
ok好

43:54.980 --> 43:55.280
这边呢

43:55.280 --> 43:55.880
我们把什么呢

43:55.880 --> 43:58.480
把搜集到的这个试镜回调函数

43:58.480 --> 43:59.780
这个数组把它传过去

44:00.180 --> 44:00.980
好这边的话

44:00.980 --> 44:01.780
然后传一个什么呢

44:01.780 --> 44:02.780
传一个这个

44:02.980 --> 44:03.480
Type

44:05.920 --> 44:06.520
Type

44:06.520 --> 44:08.920
然后加上一个这个catcher

44:11.160 --> 44:12.460
Cpt

44:13.260 --> 44:13.960
ure

44:14.360 --> 44:15.560
啊啊

44:15.560 --> 44:16.660
然后接下来再把什么呢

44:16.660 --> 44:18.360
再把这个合成实现对象

44:18.960 --> 44:19.760
把它传过去

44:20.260 --> 44:22.160
ok啊稍等我看一下啊

44:23.760 --> 44:24.260
啊对了

44:24.260 --> 44:25.760
咱们就传这三个就可以了

44:25.860 --> 44:27.360
好那接下来在这上面

44:27.860 --> 44:28.260
啊

44:28.360 --> 44:30.060
这个是刚才这个搜集这个是吧

44:30.060 --> 44:30.860
把折起来

44:30.960 --> 44:31.860
啊在这上面

44:32.160 --> 44:32.660
在上面的话

44:32.660 --> 44:34.860
我们这边就再来写一个counter

44:35.160 --> 44:37.460
啊这个trigger event flow

44:39.460 --> 44:40.060
他这边的话

44:40.060 --> 44:42.360
接收那么三个参数啊

44:42.360 --> 44:44.160
首先是一个你的pass

44:44.460 --> 44:46.860
那接下来是你的时间类型Type

44:46.860 --> 44:47.660
那一个

44:47.960 --> 44:49.260
这个合成实现对象

44:51.360 --> 44:51.960
对吧啊

44:51.960 --> 44:53.460
这个的话是搜集到的

44:54.660 --> 44:57.360
搜集到的这个世界

44:58.460 --> 44:59.460
回调函数

44:59.860 --> 45:01.160
回调函数的

45:01.660 --> 45:02.860
这个数组

45:03.360 --> 45:04.160
对吧这个是什么

45:04.160 --> 45:05.360
这个是时间类型

45:06.060 --> 45:07.760
啊这个是合成实现对象

45:10.440 --> 45:10.940
ok

45:11.240 --> 45:12.540
好了接下来在这里面

45:13.240 --> 45:14.740
在这里面我们要做的是什么

45:14.840 --> 45:17.040
啊我们在这里面要做的事情就很简单

45:17.040 --> 45:18.840
就挨着便利这个数组

45:18.840 --> 45:21.440
然后接下来的话去执行回调函数就可以了

45:21.740 --> 45:22.140
啊

45:22.640 --> 45:23.840
挨着挨着

45:24.540 --> 45:26.240
便利这个数组

45:27.340 --> 45:29.540
啊然后执行什么呢

45:30.040 --> 45:32.040
执行这个回调函数

45:34.320 --> 45:36.620
回调函数即可啊

45:36.620 --> 45:37.620
你注意这边的话

45:37.620 --> 45:39.220
因为我们是在模拟什么呢

45:39.220 --> 45:40.420
我们是在模拟

45:41.020 --> 45:42.820
模拟这个补货阶段

45:43.820 --> 45:46.120
补货阶段的这个实现啊

45:46.120 --> 45:46.820
所以

45:48.120 --> 45:50.120
所以需要什么呢

45:51.320 --> 45:52.520
那这边是所以

45:53.020 --> 45:56.020
所以需要就是从后往前

45:57.020 --> 46:01.120
从后往前便利这个数组啊

46:01.120 --> 46:03.220
并什么呢并执行

46:03.820 --> 46:04.420
回调

46:05.020 --> 46:05.420
ok

46:05.420 --> 46:06.920
所以我们这边护循环

46:08.320 --> 46:08.820
呃

46:08.820 --> 46:09.520
nate

46:09.820 --> 46:11.620
nate这个i等于一个什么呢

46:11.620 --> 46:13.020
等于一个pass

46:13.420 --> 46:14.620
pass点认识

46:14.920 --> 46:16.020
然后i紧解

46:17.720 --> 46:20.920
ok这边的话从后往前进行一个便利

46:21.120 --> 46:21.920
好便利之后

46:21.920 --> 46:25.020
然后首先的话这边const一个pass node

46:26.320 --> 46:28.220
等于一个pass i

46:28.720 --> 46:30.020
啊这边的话是拿到什么呢

46:30.020 --> 46:31.620
拿到一个当前的那个对象

46:31.820 --> 46:32.720
就是这个对象

46:33.320 --> 46:35.020
对不对啊他拿到这个对象

46:35.220 --> 46:36.520
拿到这个对象之后

46:36.520 --> 46:37.720
然后接下来拿到什么呢

46:37.720 --> 46:39.020
拿到这个callback

46:40.120 --> 46:42.020
const一个callback

46:44.390 --> 46:45.090
等于一个什么呢

46:45.090 --> 46:46.190
等于一个pass node

46:47.290 --> 46:47.990
pass node

46:47.990 --> 46:49.290
然后接下来这个type

46:52.590 --> 46:53.690
ok啊这个type

46:53.690 --> 46:55.690
你注意这个type他是加了什么的

46:55.690 --> 46:56.490
你这边注意

46:56.490 --> 46:58.390
这个type他是加了这个capture的

46:58.990 --> 47:00.890
也就是你后面的话是加了capture的

47:00.990 --> 47:02.890
代表什么是不代表捕获阶段是

47:02.990 --> 47:03.890
这个执行

47:04.590 --> 47:07.390
对不对啊你注意这边是加了这个capture的啊

47:08.290 --> 47:10.990
啊然后接下来这边拿到这个

47:11.990 --> 47:13.890
拿到这个啊拿到这个之后

47:13.890 --> 47:15.190
然后接下来的话

47:15.190 --> 47:16.190
这边e4

47:17.790 --> 47:19.190
e4 callback

47:20.490 --> 47:21.490
那这这边就干嘛

47:21.490 --> 47:23.390
这边就callback就执行呗

47:23.490 --> 47:25.290
对面大家这边调用这个call

47:26.790 --> 47:27.590
调用这个call

47:27.690 --> 47:29.090
啊大家这边是闹

47:29.490 --> 47:30.790
然后接下来传入什么呢

47:30.790 --> 47:32.590
传入这个合成事件对象

47:33.290 --> 47:35.490
对面啊这边呢就是执行

47:36.390 --> 47:38.090
存在回调函数

47:38.790 --> 47:43.090
存在回调函数啊执行

47:44.190 --> 47:45.290
该回调

47:47.660 --> 47:49.160
对吧执行该回调

47:49.360 --> 47:51.460
好然后接下来啊这边还有件事情

47:51.760 --> 47:53.060
这边你还要注意

47:53.060 --> 47:54.760
这边的话你做个e4判断

47:54.960 --> 47:56.460
e4怎么呢e4

47:56.760 --> 47:57.760
你这边这个

47:57.760 --> 47:59.060
这个是合成事件对象

47:59.260 --> 48:01.760
对合成事件对象如果他的这个

48:02.860 --> 48:04.860
你执行完了之后人家这边你会发现

48:04.860 --> 48:06.760
他这里面如果这个设置为处了

48:07.560 --> 48:08.260
说明什么

48:08.560 --> 48:10.160
这个设置为处的话说明开发者

48:10.160 --> 48:11.460
这边是不是调用了这个

48:11.560 --> 48:14.260
就我在执行你这个回调函数的时候

48:14.760 --> 48:16.760
那这个回调函数里面这边干嘛呢

48:16.960 --> 48:18.960
这边是不是啊写了这么一句话

48:19.560 --> 48:20.560
stop propagating

48:21.360 --> 48:24.160
对不对就首先我先执行你这个回调函数

48:24.260 --> 48:26.060
执行你这个回调函数的途中

48:26.060 --> 48:28.160
那接下来我这边的话执行了这一句

48:28.260 --> 48:30.360
执行了这一句的话那这边就会干嘛

48:30.560 --> 48:32.560
他这边是不是就会把下滑线stop

48:32.560 --> 48:34.360
publication设置为处啊

48:35.160 --> 48:37.260
对不对说这边的如果这个

48:38.360 --> 48:41.160
这个如果为真说明什么啊

48:41.560 --> 48:42.160
说明

48:43.760 --> 48:49.860
说明在当前的事件回调函数中

48:50.360 --> 48:51.460
啊然后开发者

48:52.160 --> 48:53.460
啊阻止了冒泡

48:53.760 --> 48:57.260
阻止了继续往上冒泡

48:58.760 --> 49:01.160
冒泡

49:01.660 --> 49:04.260
对吧那他阻止了冒泡的话那我这边就干嘛

49:04.360 --> 49:05.960
我还需不要执行这个否讯换

49:06.160 --> 49:07.860
还需不需要把这个数组便利完

49:08.060 --> 49:08.860
不需要了吗

49:08.860 --> 49:10.060
对不对直接break

49:10.860 --> 49:13.160
是不是直接跳出

49:14.260 --> 49:16.460
对不对直接跳出啊

49:17.560 --> 49:19.760
ok 这个就是关于这个triggered

49:20.060 --> 49:22.060
这个trigger event flow

49:22.360 --> 49:24.860
啊这边呢是模拟这个

49:25.260 --> 49:29.260
在这里这里是模拟这个补货的这个实现啊

49:29.560 --> 49:32.060
好然后接下来你这边呢就是模拟这个冒泡

49:33.360 --> 49:35.260
模拟冒泡我们看看冒泡怎么做

49:37.160 --> 49:39.060
冒泡这边呢你首先先判断一下

49:39.060 --> 49:42.560
意义符什么意义符你这个se点下滑线stop

49:42.560 --> 49:45.560
publication啊这个属性呢他不不委屈

49:46.060 --> 49:48.560
对吧没有阻止冒泡啊没有阻止冒泡的话

49:48.560 --> 49:51.360
那接下来我们这边trigger event flow

49:51.860 --> 49:53.560
好然后接下来我们这边只需要干嘛

49:53.560 --> 49:54.960
只需要把这个pass

49:56.360 --> 49:58.560
啊只需要干嘛什么给他reverse一下

50:00.470 --> 50:01.870
对不对给他reverse一下

50:01.870 --> 50:03.070
大家这边传这个type

50:03.070 --> 50:05.870
这只type的话后面就不需要再拼接这个capture了

50:06.170 --> 50:08.370
啊这边直接把这个type传过去

50:08.570 --> 50:11.570
然后把什么把这个合成事件对象传过去

50:12.170 --> 50:15.370
是不是就ok了对不对啊关于这个冒泡的实现

50:15.570 --> 50:16.170
首先

50:18.070 --> 50:23.770
首先需要判断啊判断这个是否阻止冒泡

50:24.070 --> 50:27.970
是否阻止了冒泡啊如果没有

50:28.770 --> 50:35.370
如果没有那么我们只需要将什么将这个pass

50:35.770 --> 50:36.870
是不是进行反向

50:38.070 --> 50:42.970
进行反向是吧再便利再便利

50:43.570 --> 50:46.170
执行一次即可

50:47.570 --> 50:50.370
对不对我们只需要做这样的事情就可以了啊

50:50.470 --> 50:52.970
好那我们整个这个dispatch event

50:53.070 --> 50:54.870
整个这个步骤就完成了

50:55.270 --> 50:58.170
你仔细理一下啊这边实际上就这么几个步骤

50:58.570 --> 51:01.070
首先把这边找到对应了这个fiber load

51:01.570 --> 51:04.670
找到对应了fiber load之后然家这边收集对不对

51:04.970 --> 51:08.170
收集这个从当前的这个fiber load一直往上

51:08.370 --> 51:12.270
一直到这个根源数啊这边所有绑定了该类型的

51:12.270 --> 51:14.770
这个事件的回调函数好然家这边

51:15.270 --> 51:18.170
补货对吧补货实现然家这边这个冒泡实现

51:18.670 --> 51:21.670
整体来讲什么就是这么些步骤对不对

51:21.970 --> 51:23.170
好我们这边保存一下

51:23.470 --> 51:26.670
保存了之后然后来到这边啊这边我们来看一下

51:26.670 --> 51:29.270
我们这边成不成功啊我们把这边这边

51:29.270 --> 51:30.970
我们就不是onclick了

51:31.370 --> 51:32.970
我们这边就改成我们自己的

51:33.570 --> 51:35.470
bond click

51:36.870 --> 51:38.570
对啊包括这边也是

51:39.170 --> 51:40.470
这边我们就不是onclick

51:40.470 --> 51:42.770
我们用我们自己的bond click

51:43.070 --> 51:45.270
我们看一下啊首先这边没有爆错

51:45.270 --> 51:46.870
没有爆错之后到这边来

51:47.470 --> 51:49.470
好这边他给的是一个warring

51:49.570 --> 51:50.970
这个你不用管他啊

51:50.970 --> 51:52.670
他这边说的就是react

51:52.670 --> 51:55.670
does not recognize the bound click proper

51:55.670 --> 51:57.370
就他这边不认识这个东西

51:57.470 --> 52:00.370
这是他这个来自于这个react内部的一个警告

52:00.570 --> 52:02.370
我们主要看事件有没有出发

52:02.870 --> 52:04.470
对不对主要看事件有没有出发

52:04.470 --> 52:05.370
我们这边点击

52:05.770 --> 52:06.470
你看这边

52:06.770 --> 52:08.470
click button click diy

52:09.070 --> 52:10.470
对吧让家我们把这个

52:11.070 --> 52:11.870
这个打开

52:12.370 --> 52:14.470
打开之后然后接下来这边走

52:14.870 --> 52:15.670
click button

52:16.270 --> 52:17.070
是不是ok的

52:17.770 --> 52:19.270
对不对ok的啊

52:19.270 --> 52:20.670
你这边可以进一步验证啊

52:20.770 --> 52:21.870
比如说我这边的话

52:22.270 --> 52:23.370
因为这个是我们自己写的吗

52:23.370 --> 52:24.570
我们这边的话比如说

52:25.270 --> 52:26.170
我们不做这一步

52:27.370 --> 52:28.070
不做这一步

52:28.570 --> 52:29.670
啊不做这一步的话呢

52:29.670 --> 52:31.570
这边用户你即使这边调用了

52:31.570 --> 52:33.070
这个stop publication

52:33.170 --> 52:34.270
他是不是还是会冒泡

52:35.270 --> 52:35.770
对吧

52:36.370 --> 52:36.870
走

52:37.170 --> 52:38.170
是不是仍然会冒泡

52:38.570 --> 52:40.570
对不对就你这边即使你这边写了

52:40.570 --> 52:41.870
一点stop publication

52:42.070 --> 52:43.070
啊他仍然会冒泡

52:43.670 --> 52:44.370
对不对啊

52:44.370 --> 52:45.970
所以你这边的话需要把这里

52:46.470 --> 52:48.270
需要把这边打开

52:48.470 --> 52:49.870
打开的话用户如果

52:50.170 --> 52:53.070
调用了这个调用了这个stop publication

52:53.270 --> 52:56.570
啊他这边在执行当前的这个回调函数的时候

52:56.570 --> 52:57.570
他就会把这个

52:58.070 --> 52:59.870
就会把这个属性设置为处

52:59.870 --> 53:00.870
设置为处的话呢

53:00.870 --> 53:02.470
我这边就不再往后面便利了

53:02.870 --> 53:04.770
对不对啊通过这这里的话

53:04.870 --> 53:06.170
也可以说明就是现在的话

53:06.170 --> 53:07.570
确确实实运行的是什么

53:07.570 --> 53:09.070
就运行的是我们的这个

53:09.170 --> 53:10.070
简易的版本

53:10.870 --> 53:11.370
对不对

53:11.770 --> 53:12.270
ok

53:13.070 --> 53:15.370
好然后我们这边把笔记记下吧

53:15.870 --> 53:17.570
回到我们这个笔记这边

53:18.570 --> 53:21.470
记一下啊这边实现事件的这个传播机制

53:21.870 --> 53:23.270
呃首先

53:25.980 --> 53:28.580
首先我们通过什么通过

53:28.580 --> 53:29.280
and

53:29.880 --> 53:30.580
event

53:31.080 --> 53:32.880
来绑定

53:33.380 --> 53:34.380
就是来给

53:35.480 --> 53:37.280
来给这个根元数

53:37.680 --> 53:38.680
是绑定事件

53:39.180 --> 53:41.880
对不对啊目的是为了

53:41.980 --> 53:44.580
就是使用这个事件委托

53:46.680 --> 53:48.280
啊目的是为了使用这个

53:48.680 --> 53:49.980
然后把对应的这个代码

53:50.380 --> 53:51.180
把他过来

53:51.980 --> 53:53.280
这边对应的是

53:54.080 --> 53:54.580
这一块

53:57.820 --> 54:00.520
对吧啊首先的话这边通过andevent

54:00.620 --> 54:02.820
来给这个根元数绑定事件

54:03.120 --> 54:05.120
好绑定事件之后然后接下来

54:07.020 --> 54:10.120
接下来再什么呢在这个入口处

54:11.520 --> 54:12.420
入口处

54:13.520 --> 54:15.320
通过什么通过调用

54:16.120 --> 54:18.420
调用这个andevent

54:18.820 --> 54:20.320
啊来绑定事件

54:21.320 --> 54:23.820
啊然后如下

54:26.700 --> 54:28.500
这边对应的是这里

54:29.400 --> 54:32.300
这里啊我们通过这里andevent

54:33.100 --> 54:37.200
调用andevent来给这个根元数做这个事件绑定

54:37.400 --> 54:39.500
绑定我们自己的这个事件系统

54:39.900 --> 54:42.800
对吧好那接下来在这个andevent里面

54:45.260 --> 54:49.660
在andevent里面啊这里面的话

54:49.660 --> 54:51.460
然后接下来干嘛呢这里面的话

54:51.460 --> 54:54.960
我们就调用这个dispatch

54:57.520 --> 54:59.520
调用这个dispatchevent

55:00.420 --> 55:02.420
啊做这个事件的派发

55:03.420 --> 55:05.220
事件的派发

55:06.220 --> 55:07.320
啊对应的这边

55:08.620 --> 55:09.620
对应的就是这里

55:12.690 --> 55:14.390
事件的派发啊这里

55:18.810 --> 55:20.610
ok啊这个事件派发的话

55:20.610 --> 55:23.710
对应有如下的这么几个步骤啊dispatch

55:25.410 --> 55:26.410
dispatch

55:27.310 --> 55:27.910
方法

55:29.010 --> 55:30.610
方法啊对应

55:31.610 --> 55:33.710
有如下的

55:34.410 --> 55:34.910
步骤

55:35.610 --> 55:38.810
哪些步骤呢啊首先第一个是不是实力化

55:40.610 --> 55:43.110
实力化一个合成事件

55:43.810 --> 55:45.010
合成事件对象

55:46.010 --> 55:48.110
对不对好然后接下来干嘛

55:48.410 --> 55:50.110
接下来的话是不是找到

55:50.810 --> 55:53.310
呃对应的这个fiber load

55:54.410 --> 55:56.210
对不对找到对应的fiber load

55:56.410 --> 55:58.310
好然后接下来的话收集

55:58.710 --> 56:03.810
收集从当前的这个fiber load的啊一直往上

56:05.410 --> 56:06.410
一直往上

56:06.810 --> 56:12.310
然后所有的所有的该事件类型的

56:12.510 --> 56:14.010
什么回调函数

56:15.710 --> 56:19.010
对不对啊最后的话就是模拟捕获的实现

56:19.810 --> 56:21.110
捕获的实现

56:21.210 --> 56:22.010
然后模拟

56:22.710 --> 56:23.510
冒泡的实现

56:26.140 --> 56:28.440
啊是不是就是这些对不对好

56:28.440 --> 56:29.740
那接下来啊这边下一个

56:30.840 --> 56:32.440
下个我们来看一下这个收集

56:33.240 --> 56:35.540
收集啊路径中

56:36.240 --> 56:36.840
对应

56:38.540 --> 56:41.640
对应的世界处理函数

56:44.910 --> 56:46.410
啊这边的话对应的就是吗

56:47.210 --> 56:48.710
这边对应的就是啊

56:50.010 --> 56:50.810
啊这个

56:51.810 --> 56:53.410
这个collect pass

56:56.990 --> 56:59.290
对吧对应的就是这个collect pass

56:59.690 --> 57:02.190
啊这边实现了这个思路是什么啊

57:02.190 --> 57:03.190
实现了思路

57:04.190 --> 57:11.390
实现的思路啊就是从当前的这个fiber load

57:11.790 --> 57:14.890
然后一直向上便利

57:15.890 --> 57:18.990
对吧然后直到什么呢直到这个host

57:19.690 --> 57:20.190
root

57:20.790 --> 57:23.690
fiber啊说明已经到这个根源数了啊

57:23.690 --> 57:24.890
然后收集什么呢

57:25.090 --> 57:27.990
收集便利过程中

57:28.790 --> 57:31.990
这个fiber load点这个memort

57:34.090 --> 57:35.290
memort props

57:35.990 --> 57:37.090
然后属性

57:37.690 --> 57:44.090
说保存的这个对应的这个世界处理函数

57:45.690 --> 57:47.190
对不对啊最终

57:48.290 --> 57:51.490
最终返回的这个pass

57:51.890 --> 57:55.490
数组啊保存的这个结构

57:56.090 --> 57:57.090
保存的结构

57:57.490 --> 57:59.390
大致如下

58:00.390 --> 58:03.690
啊到时候这边返回的是不是就这样子的

58:06.630 --> 58:08.230
对不对返回的就这样子的

58:09.830 --> 58:11.230
啊把这稍微调一下

58:12.230 --> 58:12.730
哎

58:13.430 --> 58:17.830
ok啊这是这一步啊收集这个路径中对应的世界处理函数

58:18.330 --> 58:21.130
好然后完事之后就是关于这个补货

58:23.940 --> 58:27.840
补货和冒泡的这个实现

58:28.340 --> 58:29.740
啊你补货和冒泡

58:29.940 --> 58:31.840
因为我们是从目标

58:32.140 --> 58:35.040
这个目标的这个fiber load是不是向上便利的

58:35.640 --> 58:37.440
对不对由于我们

58:38.640 --> 58:39.840
是从目标

58:40.840 --> 58:43.640
目标元素的这个fiber load啊

58:43.640 --> 58:47.140
然后接下来向上便利的啊

58:47.140 --> 58:47.840
因此

58:48.640 --> 58:50.840
收集到的这个顺序

58:50.840 --> 58:54.840
就这个数组啊数组里面收集到的这个顺序是什么样子的

58:54.840 --> 58:56.140
收集到顺序是这样子的

58:56.140 --> 58:57.340
就是你目标元素

58:57.940 --> 59:00.140
目标元素的这个回调

59:00.940 --> 59:03.340
目标元素的事件回调

59:03.740 --> 59:06.940
好完了之后是什么呢啊某个主先

59:07.340 --> 59:11.040
对吧主先元素的这个事件回调

59:12.140 --> 59:15.340
好然后接下来哈某个更上层

59:16.440 --> 59:18.640
更上层的这个主先

59:20.740 --> 59:22.440
主先元素

59:24.240 --> 59:26.540
元素的这个事件回调

59:27.340 --> 59:30.040
对吧你收集出来的这个顺序是这样子的

59:30.840 --> 59:33.240
啊那我们这边要模拟这个补货的话

59:33.640 --> 59:35.440
补货这边的话你就怎么做

59:35.440 --> 59:37.240
这边是不是就从后往前便利

59:37.940 --> 59:39.340
对不对因此

59:40.340 --> 59:43.540
因此要模拟补货

59:44.640 --> 59:47.840
要模拟补货阶段的这个实现

59:48.440 --> 59:51.440
我们就需要从后

59:52.140 --> 59:56.740
往前进行便利啊并执行

59:57.840 --> 59:59.840
对不对啊对呢这个代码

01:00:01.140 --> 01:00:03.140
对呢代码在这里

01:00:08.710 --> 01:00:10.410
ok啊这是补货阶段

01:00:10.810 --> 01:00:13.010
好那如果是什么呢如果是这个

01:00:13.810 --> 01:00:16.410
啊冒泡阶段啊如果是

01:00:18.010 --> 01:00:21.210
如果是模拟冒泡阶段

01:00:22.010 --> 01:00:24.210
那你模拟冒泡阶段的话就只需要干嘛

01:00:24.210 --> 01:00:26.010
是不是只需要将这个pass返向

01:00:27.010 --> 01:00:31.510
只需要将pass进行这个返向

01:00:32.510 --> 01:00:36.810
然后再便利再便利一次

01:00:36.810 --> 01:00:41.310
然后并并执行即可

01:00:42.310 --> 01:00:44.310
对不对啊我们这边这个冒泡

01:00:45.210 --> 01:00:46.810
冒泡的话对应的是

01:00:47.810 --> 01:00:49.910
这边对应的这里

01:00:50.810 --> 01:00:56.110
啊ok这是关于这个冒泡啊

01:00:56.510 --> 01:00:58.510
啊另外要说一下就是关于在这里

01:00:58.510 --> 01:01:02.410
这里面执行的时候啊这里面这个在执行事件的时候啊

01:01:03.410 --> 01:01:04.010
在

01:01:05.710 --> 01:01:10.410
执行这个事件的回调的时候

01:01:11.010 --> 01:01:17.210
每一次执行每一次执行需要什么呢需要检验

01:01:17.310 --> 01:01:17.810
这个

01:01:18.810 --> 01:01:21.110
下滑线这个stop

01:01:21.710 --> 01:01:22.810
propagation属性

01:01:24.010 --> 01:01:26.610
是否为什么呢是否为确

01:01:27.210 --> 01:01:29.210
如果为确

01:01:30.510 --> 01:01:32.110
如果为确说明什么

01:01:32.610 --> 01:01:37.610
说明当前的事件回调函数中

01:01:37.810 --> 01:01:39.110
是不是阻止了

01:01:40.710 --> 01:01:43.210
阻止了事件冒泡呀

01:01:44.410 --> 01:01:47.710
对不对啊因此我们应当

01:01:49.210 --> 01:01:51.110
我们应当就是什么呢停止

01:01:52.110 --> 01:01:54.010
停止后续的便利

01:01:56.110 --> 01:01:58.410
对不对应该停止后续的便利

01:01:59.010 --> 01:02:01.810
ok好这就是关于整个这个

01:02:02.310 --> 01:02:06.210
简易的啊简易版的这个react事件系统的这个实现

01:02:07.110 --> 01:02:11.310
支持我们就实现了一个

01:02:12.310 --> 01:02:14.410
实现了一个简易版的

01:02:15.110 --> 01:02:17.310
简易版的这个react

01:02:18.110 --> 01:02:18.810
事件系统

01:02:20.510 --> 01:02:20.910
ok

01:02:22.110 --> 01:02:25.610
好这是关于这个简易版的实现啊

01:02:25.710 --> 01:02:28.810
然后最后的话我们来看一下关于这个整体解答啊

01:02:28.810 --> 01:02:31.310
你这边呢都已经实现了一个简易版了啊

01:02:31.310 --> 01:02:33.510
这边就是让你减速一下react中

01:02:33.610 --> 01:02:35.410
事件是如何处理的啊

01:02:35.410 --> 01:02:38.710
包括这个react中什么是这个合成事件对象

01:02:38.810 --> 01:02:40.110
那这个的话你回答的话

01:02:40.110 --> 01:02:41.510
应该是没有太大的问题了

01:02:42.410 --> 01:02:42.810
对不对

01:02:43.510 --> 01:02:46.710
好这边那就直接把这个参考答案我就把他拿过来了啊

01:02:49.300 --> 01:02:50.500
好这边把他拿过来

01:02:53.000 --> 01:02:53.500
啊哎

01:02:54.200 --> 01:02:55.900
稍等这边好像复制多了

01:02:56.700 --> 01:02:57.300
稍等啊

01:02:59.820 --> 01:03:01.220
好我把他拿过来

01:03:03.690 --> 01:03:07.990
ok好在react中有一套自己的这个事件系统

01:03:08.290 --> 01:03:08.790
啊

01:03:09.290 --> 01:03:12.790
这边react他用这个fabric tree描述了这个ui

01:03:12.790 --> 01:03:16.090
那事件系统的话他描述的就是和ui之间的这个交互

01:03:16.190 --> 01:03:18.190
就fabric tree和ui之间的这个交互

01:03:19.190 --> 01:03:22.290
那么对于这个react dorm数据环境而言啊

01:03:22.290 --> 01:03:24.490
这套事件系统的话有这么两个部分

01:03:24.690 --> 01:03:26.990
就是比较重要的一个是合成事件对象

01:03:27.290 --> 01:03:30.590
另外一个是如何模拟这个事件传播的这个机制

01:03:31.190 --> 01:03:31.990
对吧好

01:03:31.990 --> 01:03:34.190
然后每个的话你把它展开稍微说一下就可以了

01:03:34.690 --> 01:03:35.090
ok

01:03:35.690 --> 01:03:39.190
啊这就是关于整个这个react中的这个事件

01:03:39.490 --> 01:03:42.090
啊大家下来的话可以把我们这些课讲的内容

01:03:42.090 --> 01:03:43.590
自己再看一下啊

01:03:43.590 --> 01:03:46.390
把这个简易版的这个事件系统自己写一写

01:03:47.090 --> 01:03:47.590
好吧

01:03:47.990 --> 01:03:50.990
ok好这些课的话就到这里啊再见

