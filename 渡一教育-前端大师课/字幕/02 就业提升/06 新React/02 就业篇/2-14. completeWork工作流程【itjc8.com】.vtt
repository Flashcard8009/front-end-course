WEBVTT

00:00.050 --> 00:05.770
OK 上级课的话 我们看了关于这个Pikinwork的这个流程

00:05.770 --> 00:09.850
那我们这几课 这几课的话 我们来看一下关于这个Completework

00:09.850 --> 00:13.050
这边标条写错了 这边是Completework

00:13.050 --> 00:15.530
好 这边的话有道面试题

00:15.530 --> 00:20.330
Completework 它主要做一些什么样的这个工作

00:20.330 --> 00:23.450
整体的流程是什么样子的 OK

00:23.450 --> 00:25.690
好 那我们这几课我们来介绍一下

00:25.690 --> 00:29.050
好 那上级课所介绍的这个Pikinwork

00:29.250 --> 00:30.850
它实际上它是属于什么呢

00:30.850 --> 00:35.930
它是属于这个地规中的这个地的这个阶段 对不对

00:35.930 --> 00:43.540
前面所介绍的这个Pikinwork

00:43.540 --> 00:50.820
它是属于什么呢 是属于这个地的这个阶段

00:50.820 --> 00:55.020
好 然后地的这个阶段里面的这个工作处理完成之后

00:55.020 --> 01:00.180
该阶段的这个工作处理完成后

01:00.180 --> 01:03.380
就会进入到什么呢

01:03.380 --> 01:07.660
进入到这个Completework

01:07.660 --> 01:10.260
这个是属于什么呢

01:10.260 --> 01:14.580
这个是属于什么 是不是属于规

01:14.580 --> 01:16.980
对不对 属于规的阶段

01:16.980 --> 01:19.420
这个的话实际上我们在最早讲那个react

01:19.420 --> 01:23.140
虽然流程的时候我们是不是接过这个介绍过

01:23.140 --> 01:25.620
对吧 整个这个reconcealer

01:25.620 --> 01:27.260
它在reconceal的时候

01:27.300 --> 01:29.620
它会分成这个地和规

01:29.620 --> 01:32.060
ok 好 那接下来它这边的话

01:32.060 --> 01:34.380
就是关于这个Completework

01:34.380 --> 01:36.940
它和这个Pikinwork类似的

01:36.940 --> 01:39.500
它也会根据这个WebTag

01:39.500 --> 01:42.140
根据这个不同的这个Tag的类型

01:42.140 --> 01:44.220
然后进行一个这个不同的这个工作

01:45.980 --> 01:51.940
于Pikinwork类似这个Completework

01:52.900 --> 01:55.940
也会根据什么呢

01:55.940 --> 01:57.300
根据WebTag

01:57.300 --> 02:01.220
我说这个WebTag 这个应该听得懂吧

02:01.220 --> 02:03.060
前面都说了这么多次了

02:03.060 --> 02:04.660
这个Web就是指的是什么

02:04.660 --> 02:08.020
这不指的就是那个WebFiberLoad

02:08.020 --> 02:10.260
对不对 类传里面的FiberLoad

02:10.260 --> 02:12.820
这个它是它的那个标签Tag

02:12.820 --> 02:17.380
根据这个Tag 然后区分对待

02:17.380 --> 02:19.460
ok 流程上面

02:20.180 --> 02:23.220
流程上面主要包括什么呢

02:23.220 --> 02:24.420
包括两个步骤

02:24.420 --> 02:28.540
那两个步骤呢

02:28.540 --> 02:30.620
首先第一个就是创建元素

02:30.620 --> 02:36.460
创建元素或者标记元素的更新

02:36.460 --> 02:39.960
另外一个什么呢

02:39.960 --> 02:42.840
另外一个就是flex 帽炮

02:42.840 --> 02:45.480
主要就是这两个步骤

02:45.480 --> 02:47.080
好 这边的话我有个图

02:47.080 --> 02:49.160
我把这个图把它过来

02:49.160 --> 02:50.440
稍等啊

02:52.600 --> 02:59.880
好 整体流程图入下

03:01.400 --> 03:02.280
在这里

03:02.280 --> 03:05.960
这个是我们的CompleteWalk

03:05.960 --> 03:09.560
首先过来的话根据你的WebTag

03:09.560 --> 03:11.080
不同的Tag

03:11.080 --> 03:13.000
它这边的话会做不同的事情

03:13.000 --> 03:14.440
大家这边过来

03:14.440 --> 03:17.480
过来之后 看你是Mount还是Update

03:17.480 --> 03:20.040
如果是Mount的话 它就会走这些步骤

03:20.600 --> 03:22.600
它会创建动物元素

03:22.600 --> 03:26.200
大家对这个Quality 执行up and child

03:26.200 --> 03:29.480
但我们这边是以hoster component为例

03:29.480 --> 03:32.040
还记得什么是hoster component吧

03:32.040 --> 03:36.040
所谓hoster component是不是指的是原生的那些组件

03:36.040 --> 03:38.760
DIV, P, SPAN

03:38.760 --> 03:39.640
对不对

03:39.640 --> 03:43.560
好 最后是设置动物元素的属性

03:43.560 --> 03:45.240
如果是update

03:45.240 --> 03:48.760
update的话 它执行update,hoster component

03:48.920 --> 03:53.240
这边会判断是否有属性变化

03:53.240 --> 03:56.840
有的话就把变化的属性找出来

03:56.840 --> 03:57.800
标记什么呢

03:57.800 --> 03:59.640
标记flag

03:59.640 --> 04:02.360
我们说了reconcile阶段

04:02.360 --> 04:03.080
它主要是什么

04:03.080 --> 04:04.920
是不是主要是做标记

04:04.920 --> 04:05.560
对不对

04:05.560 --> 04:07.080
真正修改的话

04:07.080 --> 04:08.040
它是在后面

04:08.040 --> 04:09.400
commit阶段

04:09.400 --> 04:12.280
好 最后的话这边做一个什么呢

04:12.280 --> 04:14.360
做一个flags的冒泡

04:14.360 --> 04:15.880
最后无论你是Mount

04:15.880 --> 04:16.680
这个Mount也好

04:16.680 --> 04:18.040
还是update也好

04:18.040 --> 04:19.160
这边它会

04:19.160 --> 04:21.960
最终的话它会执行一个flag冒泡

04:21.960 --> 04:22.600
OK

04:22.600 --> 04:25.320
整体流程的话就是像这个样子的

04:25.320 --> 04:25.640
好

04:25.640 --> 04:27.720
来 我们这边我们一个一个看

04:28.920 --> 04:29.880
那我们这一节课的话

04:29.880 --> 04:31.960
我们这边就分成这么几个

04:31.960 --> 04:34.760
首先第一个是Mount阶段

04:34.760 --> 04:35.080
对吧

04:35.080 --> 04:36.760
我们首先看它这个流程

04:36.760 --> 04:37.480
这边

04:37.480 --> 04:37.720
好

04:37.720 --> 04:42.710
然后接下来这边是update阶段

04:42.710 --> 04:42.950
好

04:42.950 --> 04:43.910
然后接下来什么呢

04:43.910 --> 04:48.950
接下来是flags冒泡

04:48.950 --> 04:49.830
冒泡

04:50.950 --> 04:51.910
OK

04:51.910 --> 04:54.230
我们主要分成这三个点去讲

04:54.230 --> 04:57.020
好

04:57.020 --> 04:59.660
那我们这边看一下这个关于Mount

04:59.660 --> 05:01.900
Mount的话在这个Mount流程

05:01.900 --> 05:02.540
我们看一下

05:02.540 --> 05:03.340
Mount流程的话

05:03.340 --> 05:04.860
那这边首先会执行什么

05:04.860 --> 05:07.740
是不是会执行这个creator instance

05:07.740 --> 05:09.260
这个方法是用来干什么的呢

05:09.260 --> 05:09.980
这个方法的话

05:09.980 --> 05:12.380
它是用来创建fiber load的

05:12.380 --> 05:14.620
所对应的这个动物元素

05:14.620 --> 05:19.500
在Mount流程中

05:19.500 --> 05:24.300
首先会创建

05:24.300 --> 05:30.380
会通过这个creator instance

05:30.380 --> 05:31.740
然后创建什么呢

05:31.740 --> 05:38.460
创建这个fiber load所对应的这个动物元素

05:38.460 --> 05:39.100
OK

05:39.100 --> 05:39.340
好

05:39.340 --> 05:40.220
那我们这边我们来看一下

05:40.220 --> 05:42.540
它的这个原码片段

05:42.540 --> 05:46.760
把它过来

05:46.760 --> 05:47.560
这里

05:47.560 --> 05:50.520
你看这边通过这个creator instance

05:50.520 --> 05:51.480
这边判断一下

05:51.480 --> 05:53.800
看你如果是stream或者是lumber

05:53.800 --> 05:56.360
左边做一些这个其他的处理

05:56.360 --> 05:56.680
好

05:56.680 --> 05:57.400
然后接下来这边

05:57.400 --> 05:58.760
它内部会调用一个什么

05:58.760 --> 06:01.320
是不是会调用一个这个create element

06:01.320 --> 06:04.280
这个的话就是在创建这个动物元素了

06:04.280 --> 06:05.000
可不可以啊

06:05.000 --> 06:05.560
创建了之后

06:05.560 --> 06:06.440
它最后它这个方法

06:06.440 --> 06:10.440
然后会返回所创建的这个动物元素

06:10.440 --> 06:11.480
好

06:11.480 --> 06:12.360
然后接下来的话

06:12.360 --> 06:13.240
它会执行什么呢

06:13.240 --> 06:18.520
接下来它会执行这个appuntor children

06:18.520 --> 06:25.160
接下来会执行这个appuntor children

06:25.160 --> 06:28.520
执行这个方法

06:28.520 --> 06:30.360
这个方法的作用啊

06:30.360 --> 06:33.640
该方法的作用是将什么呢

06:33.640 --> 06:39.560
是将下一层下一层这个动物元素

06:39.560 --> 06:44.840
插入到这个就是通过通过这个creator instance

06:47.100 --> 06:53.980
然后方法所创建的这个动物元素中

06:53.980 --> 06:54.540
ok

06:54.540 --> 06:56.620
你这边创建了个动物元素嘛

06:56.620 --> 06:57.020
对

06:57.020 --> 06:58.220
创建了个动物元素之后

06:58.220 --> 07:00.940
然后接下来这个appuntor children

07:00.940 --> 07:01.980
实际就是创建什么呢

07:01.980 --> 07:03.340
创建它的指元素

07:03.340 --> 07:04.380
那就是动物元素

07:04.380 --> 07:07.500
创建它的这个指的这个动物元素

07:07.500 --> 07:11.100
然后插入到你这边所创建的这个动物元素里面

07:11.100 --> 07:11.820
ok

07:11.820 --> 07:12.140
好

07:12.140 --> 07:14.860
具体的逻辑如下

07:15.020 --> 07:18.780
好

07:18.780 --> 07:19.420
这边的话

07:19.420 --> 07:21.660
然后我把这个

07:21.660 --> 07:24.060
我先把这个逻辑拿过来吧

07:24.060 --> 07:29.340
先看一下这个逻辑

07:29.340 --> 07:30.460
这里

07:30.460 --> 07:30.700
好

07:30.700 --> 07:34.460
首先的话对当前的这个fiber load的

07:34.460 --> 07:36.140
向下边的对吧

07:36.140 --> 07:37.740
我们说了深度优先

07:37.740 --> 07:37.980
好

07:37.980 --> 07:41.580
然后将变略到第一层的这个动物元素类型

07:41.580 --> 07:44.780
比如你这个host component或者host text

07:44.780 --> 07:46.460
通过这个appuntor child

07:46.540 --> 07:48.620
插入到这个part mode

07:48.620 --> 07:48.860
好

07:48.860 --> 07:50.220
然后接下的话再对什么呢

07:50.220 --> 07:52.860
再对兄弟的这个fiber load

07:52.860 --> 07:53.980
执行步骤一

07:53.980 --> 07:55.420
也执行这个步骤

07:55.420 --> 07:57.100
如果没有这个兄弟的话

07:57.100 --> 07:57.900
那就干嘛呢

07:57.900 --> 07:59.660
就是对这个复元素

07:59.660 --> 08:00.860
复元素的兄弟

08:00.860 --> 08:02.060
执行步骤一

08:02.060 --> 08:02.300
好

08:02.300 --> 08:05.340
然后当这个变略流程回到最初执行步骤一

08:05.340 --> 08:06.460
所在的城

08:06.460 --> 08:08.300
或者这个partment所在城

08:08.300 --> 08:09.660
那么就终止

08:09.660 --> 08:11.420
它整个流程的话是这个样子的

08:11.420 --> 08:12.620
其实也就是一个什么

08:12.620 --> 08:14.220
什么深度优先

08:14.220 --> 08:15.020
对吧

08:15.020 --> 08:15.260
好

08:15.260 --> 08:16.460
这边的话相关的代码

08:18.460 --> 08:20.220
相关的代码

08:20.220 --> 08:20.700
如下

08:24.730 --> 08:24.970
好

08:24.970 --> 08:26.650
我把这边代码片段把拿过来

08:32.090 --> 08:32.250
啊

08:32.250 --> 08:33.450
这边你看一下

08:33.450 --> 08:33.610
啊

08:33.610 --> 08:36.650
这边while load不等于这个空啊

08:36.650 --> 08:38.250
这个load这个load是什么

08:38.250 --> 08:39.210
这个load的话是不是就是

08:40.010 --> 08:42.170
这个walking progress点翘的

08:42.170 --> 08:43.210
实际上就是拿到什么

08:43.210 --> 08:45.690
是不是拿到它的这个fiber load啊

08:45.690 --> 08:47.690
你walking progress是fiber load嘛

08:47.690 --> 08:48.010
对不对

08:48.010 --> 08:49.130
拿到它的指元素

08:49.130 --> 08:50.650
拿到当前的这个元素

08:50.650 --> 08:52.570
那判断它是否不为空

08:52.650 --> 08:54.330
只要不为空就一直在这个while里面

08:55.130 --> 08:55.850
对不对

08:55.850 --> 08:57.050
在这个while里面里面

08:57.050 --> 08:58.730
然后接下来首先的话

08:58.730 --> 08:59.930
向下便利

08:59.930 --> 09:01.370
向下便利执行

09:01.370 --> 09:01.610
好

09:01.610 --> 09:02.730
然后接下来否则的话就

09:04.090 --> 09:05.050
这边

09:05.050 --> 09:05.850
我看一下啊

09:07.770 --> 09:10.490
这边上面的这边是对这个第一层

09:10.490 --> 09:12.010
对第一层的这个动物元素

09:12.010 --> 09:13.610
执行这个opened敲的

09:13.610 --> 09:15.210
下面这个lc一幅

09:15.210 --> 09:16.570
它是就是再往下一层

09:16.570 --> 09:17.770
你看这的代码吗

09:17.770 --> 09:19.450
这个是不是当前的这个节点

09:19.450 --> 09:19.770
对不对

09:19.770 --> 09:20.490
当前的节点

09:20.490 --> 09:21.770
负责给这个

09:21.770 --> 09:24.730
当前节点的这个指元素点return

09:24.730 --> 09:26.650
我们说return指向负元素吗

09:26.650 --> 09:27.050
对不对

09:27.050 --> 09:30.010
那当前这个节点作为它指元素的这个负元素

09:30.010 --> 09:31.690
那接下来这边把这个

09:31.690 --> 09:34.730
指元素负责给这个当前的这个节点

09:34.730 --> 09:35.050
对不对

09:35.050 --> 09:37.210
这个这个是不是就是往下走了一层

09:37.210 --> 09:38.170
对吧

09:38.170 --> 09:38.490
好

09:38.490 --> 09:39.930
人家这边如果no的

09:39.930 --> 09:42.250
全等于这个walking progress

09:42.250 --> 09:42.890
那这边呢

09:42.890 --> 09:44.090
它就结束

09:44.090 --> 09:45.770
人家这边下面这个while

09:45.770 --> 09:46.650
下面这个while的话

09:46.650 --> 09:48.170
这边是我看一下

09:48.170 --> 09:50.170
这边是看这个兄弟节点

09:50.250 --> 09:51.690
如果没有兄弟节点

09:51.690 --> 09:52.970
那接下来就往上

09:52.970 --> 09:54.010
往上

09:54.010 --> 09:55.290
这边

09:55.290 --> 09:56.410
然后最后最后这边

09:56.410 --> 09:57.610
这边那就是

09:57.610 --> 09:59.370
对这个兄弟节点

09:59.370 --> 10:01.050
执行这个步骤一

10:01.050 --> 10:01.690
对不对

10:01.690 --> 10:03.210
它整个这个逻辑的话是这样子的

10:03.210 --> 10:05.530
其实其实就是这边总结出来的逻辑

10:05.530 --> 10:06.410
好吧

10:06.410 --> 10:09.460
OK

10:09.460 --> 10:11.140
好我们这边总结一下

10:11.140 --> 10:13.220
那么整个这个

10:13.220 --> 10:15.220
append all children

10:16.500 --> 10:19.060
方法

10:19.060 --> 10:20.340
实际上

10:20.340 --> 10:21.620
就是在干嘛

10:21.700 --> 10:23.540
就是在这个处理

10:23.540 --> 10:25.860
是不是下一级

10:25.860 --> 10:27.780
下一级

10:27.780 --> 10:30.340
到这个动物研说

10:30.340 --> 10:30.900
对不对

10:30.900 --> 10:33.140
它主要就是在做这个事情

10:33.140 --> 10:33.860
而且它的话

10:33.860 --> 10:35.380
它的整个这个便利过程的话

10:35.380 --> 10:37.940
实际上会更复杂一些

10:37.940 --> 10:40.340
而且在这个append

10:40.340 --> 10:44.340
append all children

10:44.340 --> 10:47.220
里面的这个便利过程

10:47.220 --> 10:48.900
便利过程

10:48.900 --> 10:51.540
会更复杂一些

10:52.180 --> 10:55.880
会多一些判断

10:55.880 --> 10:57.640
多一些什么判断呢

10:57.640 --> 10:58.680
你想想

10:58.680 --> 10:59.480
你这边的话

10:59.480 --> 11:01.880
你这个fiber load的这个成绩

11:01.880 --> 11:04.040
和真实动物的这个成绩

11:04.040 --> 11:06.120
是不是一对应的

11:06.120 --> 11:07.080
有同学说

11:07.080 --> 11:08.440
应该是一对应的

11:08.440 --> 11:10.200
但是其实不见的

11:10.200 --> 11:11.240
不见的

11:11.240 --> 11:12.280
OK

11:12.280 --> 11:16.360
因为这个fiber load

11:16.360 --> 11:20.200
最终形成的

11:20.760 --> 11:24.040
形成的这个fiber tree

11:24.040 --> 11:25.320
对吧

11:25.320 --> 11:26.600
到这个程式

11:26.600 --> 11:28.120
和什么呢

11:28.120 --> 11:31.080
和最终这个dorm

11:31.080 --> 11:33.000
dorm tree

11:33.000 --> 11:35.560
dorm tree的这个程式

11:35.560 --> 11:39.400
可能是有这个区别的

11:39.400 --> 11:42.680
对吧

11:42.680 --> 11:43.720
比如举个例子

11:43.720 --> 11:45.640
比如你看这边

11:45.640 --> 11:46.280
这边的话

11:46.280 --> 11:47.560
我有一个这个方形

11:47.560 --> 11:48.840
方形

11:48.840 --> 11:50.120
比如这个world

11:50.120 --> 11:51.640
比如有这么一个组件

11:51.960 --> 11:52.920
这个组件的话

11:52.920 --> 11:53.720
然后返回什么呢

11:53.720 --> 11:57.910
返回一个spam

11:57.910 --> 12:00.470
返回这边写gis

12:00.470 --> 12:01.990
返回一个spam

12:01.990 --> 12:04.470
这边就写个比如world

12:04.470 --> 12:05.990
这是有一个组件

12:05.990 --> 12:06.550
对不对

12:06.550 --> 12:06.870
好

12:06.870 --> 12:07.590
然后这样这边

12:07.590 --> 12:08.870
我使用这个组件

12:08.870 --> 12:12.410
这边div

12:12.410 --> 12:13.130
好

12:13.130 --> 12:15.770
然后接下来这边比如说Hello

12:15.770 --> 12:20.360
然后接下来这边world

12:20.360 --> 12:21.240
你看

12:21.240 --> 12:22.040
你这边的话

12:22.040 --> 12:24.440
如果从这个fiber load的角度来看的话

12:24.440 --> 12:26.840
你这个Hello和这个world

12:27.000 --> 12:29.080
是不是这个同级的

12:29.080 --> 12:29.640
对不对

12:29.640 --> 12:32.120
但是你最终渲染出来的这个dorm

12:32.120 --> 12:33.160
渲染出dorm的话

12:33.160 --> 12:34.120
这个Hello的话

12:34.120 --> 12:35.320
它实际上和什么

12:35.320 --> 12:38.440
它是不是和这个spam是同级的

12:38.440 --> 12:39.000
对不对

12:39.000 --> 12:40.760
说这边就会涉及到一个问题

12:40.760 --> 12:41.560
什么问题呢

12:41.560 --> 12:44.280
就是你这个fiber load

12:44.280 --> 12:45.400
你这边可能需要

12:45.400 --> 12:47.640
就是在查找这个load

12:47.640 --> 12:49.480
查找了一个dorm元素的时候

12:49.480 --> 12:52.280
可能会涉及到跨层级

12:52.280 --> 12:55.320
这也是为什么这个opened or chosen

12:55.400 --> 12:56.280
它在便利的时候

12:56.280 --> 12:58.280
它会多一些这个判断

12:58.280 --> 12:58.520
ok

13:00.360 --> 13:00.840
好

13:00.840 --> 13:06.200
在上面在上面的代码中

13:06.200 --> 13:08.360
如果从这个fiber

13:09.400 --> 13:13.880
fiber load的这个角度来看

13:13.880 --> 13:16.760
这个Hello和什么呢

13:16.760 --> 13:19.160
和这个world是不是同级的

13:20.360 --> 13:21.160
对不对

13:21.160 --> 13:22.120
是同级的

13:23.080 --> 13:26.360
但是如果从这个dorm

13:27.400 --> 13:30.040
从dorm元素的这个角度来看

13:30.920 --> 13:33.080
那这个Hello就和什么

13:34.360 --> 13:37.320
就和这个spam是不是同级的

13:38.040 --> 13:38.760
对不对

13:38.760 --> 13:40.040
是同级别的

13:41.640 --> 13:44.280
所以你这边让你这个fiber吹成是

13:44.280 --> 13:46.040
和最终的dorm吹成是

13:46.040 --> 13:48.040
它是可能是有区别的

13:48.040 --> 13:51.720
而且这种区别的话是经常存在的

13:51.800 --> 13:52.280
对不对

13:52.280 --> 13:53.720
还不是说偶尔存在

13:53.720 --> 13:54.760
是经常存在的

13:55.880 --> 13:56.120
好

13:56.120 --> 13:56.520
因此

13:58.760 --> 13:59.480
因此

13:59.480 --> 14:01.960
从这个fiber load

14:02.840 --> 14:05.240
fiber load中查找

14:06.040 --> 14:07.320
查找这个同级

14:08.680 --> 14:12.200
同级的这个dorm元素的时候

14:13.400 --> 14:13.880
经常

14:15.640 --> 14:18.520
经常会涉及到什么呢

14:18.520 --> 14:19.640
涉及到这个跨

14:19.960 --> 14:22.840
画这个fiber load

14:22.840 --> 14:23.960
成绩

14:25.240 --> 14:26.520
进行这个查找

14:28.360 --> 14:28.680
ok

14:29.560 --> 14:29.720
好

14:29.720 --> 14:30.600
这是关于这个

14:31.800 --> 14:33.240
opened or children

14:33.240 --> 14:34.600
它主要就是找什么呢

14:34.600 --> 14:36.040
主要就是找这个下一集

14:36.040 --> 14:37.240
主要就是

14:37.240 --> 14:39.800
就是处理这个下一集的这个dorm元素

14:40.360 --> 14:40.600
ok

14:43.590 --> 14:43.910
好

14:43.910 --> 14:48.150
然后这个opened or children这个方法

14:48.150 --> 14:49.910
这个方法执行完了之后

14:49.990 --> 14:51.590
然后接下来的话

14:51.590 --> 14:52.550
你看一下

14:52.550 --> 14:54.390
接下来的话是不是就是这个方法

14:55.110 --> 14:55.830
对不对

14:55.830 --> 14:56.790
这个是final

14:58.150 --> 15:00.790
final initial children

15:00.790 --> 15:01.750
名字很长

15:01.750 --> 15:03.590
但是大致意识你猜得到

15:03.590 --> 15:05.030
这个的话就是最后的意思

15:05.030 --> 15:06.630
这个就是初始化的意思

15:06.630 --> 15:07.030
对不对

15:07.030 --> 15:08.710
初始化它的这个指元素

15:08.710 --> 15:10.550
它这边实际上在干嘛呢

15:10.550 --> 15:13.030
它这边实际上是在设置这个

15:13.030 --> 15:14.150
dorm元素的属性

15:14.710 --> 15:15.030
ok

15:16.550 --> 15:16.870
好

15:16.870 --> 15:17.270
接下来

15:17.590 --> 15:21.430
接下来这个complete work

15:23.190 --> 15:25.190
然后会执行什么呢

15:25.190 --> 15:28.070
会执行这个final

15:29.430 --> 15:30.470
这个final

15:31.350 --> 15:32.470
然后就这个

15:32.470 --> 15:35.270
然后initial it

15:36.870 --> 15:37.190
然后

15:40.630 --> 15:41.510
这是不initial

15:41.510 --> 15:42.870
好像不练initial

15:42.870 --> 15:43.830
这个下来查一下

15:44.550 --> 15:45.030
ok

15:45.030 --> 15:46.550
反正会执行这个方法

15:47.430 --> 15:48.230
执行这个方法

15:48.230 --> 15:49.910
然后接下来完成什么呢

15:49.910 --> 15:52.550
完成这个属性的初始化

15:54.310 --> 15:55.510
那它主要包含什么呢

15:55.510 --> 15:57.510
主要包含就下面几类属性

15:59.030 --> 16:01.030
主要包含以下

16:01.910 --> 16:02.710
几类属性

16:03.670 --> 16:04.150
ok

16:04.150 --> 16:04.390
好

16:04.390 --> 16:05.350
这边我就把它拉过来

16:10.380 --> 16:11.580
主要包含这几类

16:11.580 --> 16:13.180
首先是这个styles

16:13.820 --> 16:15.020
它对应的方法是什么呢

16:15.020 --> 16:17.420
对应的方法是这个set value for styles

16:17.980 --> 16:19.820
还有就是inner html

16:19.900 --> 16:22.540
对应的方法就是set inner html

16:22.540 --> 16:25.420
然后还有就是这个文本类型的这个求认

16:25.420 --> 16:28.140
对应的是set text content

16:28.140 --> 16:30.380
然后还有一些就是世界

16:30.380 --> 16:31.020
ok

16:32.380 --> 16:34.380
主要就是这些属性

16:34.380 --> 16:36.380
进行一个初始化的工作

16:36.380 --> 16:38.140
然后最后最后的话进行什么呢

16:38.140 --> 16:40.060
最后进行这个flex帽炮

16:41.980 --> 16:45.340
该方法执行完后

16:47.020 --> 16:47.500
执行

16:48.220 --> 16:49.820
完毕后

16:49.820 --> 16:52.140
然后最后进行什么呢

16:52.140 --> 16:55.100
进行这个flex的这个帽炮

16:55.100 --> 16:55.820
对吧

16:55.820 --> 16:56.940
你看一下这个流程图

16:56.940 --> 16:58.220
看这个流程图

16:58.220 --> 16:58.940
对不对

16:58.940 --> 17:00.300
首先create instance

17:00.300 --> 17:01.980
那append all children

17:01.980 --> 17:05.260
然后再这边这个finals and initial children

17:05.260 --> 17:05.820
对吧

17:05.820 --> 17:06.780
然后最后什么呢

17:06.780 --> 17:08.300
最后进行一个这个帽炮

17:08.300 --> 17:09.100
ok

17:09.100 --> 17:09.580
啊

17:09.580 --> 17:11.580
说说我们这边我们可以总结一下

17:11.580 --> 17:14.410
总结一下

17:14.410 --> 17:16.410
这个complete work

17:16.410 --> 17:18.410
complete work

17:18.810 --> 17:22.810
在这个mount阶段

17:22.810 --> 17:24.810
在mount阶段

17:24.810 --> 17:28.410
然后执行的这个工作

17:28.410 --> 17:29.610
流程

17:29.610 --> 17:31.210
如下

17:31.210 --> 17:32.010
ok

17:32.010 --> 17:34.010
好把这个流程我把拿过来

17:34.010 --> 17:38.280
好

17:38.280 --> 17:39.400
这边来看一下

17:39.400 --> 17:40.520
首先第一步

17:40.520 --> 17:42.520
根据wipetag

17:42.520 --> 17:45.320
进入到这个不同的这个处理分支

17:45.320 --> 17:47.320
然后接下来如果是这边

17:47.320 --> 17:50.120
接下来的话你第二步就是判断什么

17:50.360 --> 17:51.400
接下来判断的就是

17:51.400 --> 17:54.360
你这边究竟是mount还是update

17:54.360 --> 17:55.080
对不对

17:55.080 --> 17:55.400
好

17:55.400 --> 17:56.600
然后再如果是mount

17:56.600 --> 17:57.400
如果是mount的话

17:57.400 --> 17:57.880
这边的话

17:57.880 --> 17:59.880
我是以这个host component

17:59.880 --> 18:01.480
就是原生的组件为例

18:01.480 --> 18:03.880
就比较di v啊span啊这些为例

18:03.880 --> 18:05.960
那么他首先会执行什么呢

18:05.960 --> 18:08.440
首先会执行这个create instance

18:08.440 --> 18:11.320
来创建对应的这个动物元素

18:11.320 --> 18:11.640
好

18:11.640 --> 18:12.840
然后接下来执行什么呢

18:12.840 --> 18:14.600
执行append all children

18:14.600 --> 18:17.520
把下一级动物元素挂载到上一

18:17.520 --> 18:18.360
就是上一步

18:18.440 --> 18:20.680
所创建的这个动物元素下

18:20.680 --> 18:21.160
好

18:21.160 --> 18:22.440
然后接下来执行什么呢

18:22.440 --> 18:23.800
执行这个

18:23.800 --> 18:26.680
刚刚在initial children

18:26.680 --> 18:29.320
完成这个属性的初始化

18:29.320 --> 18:31.480
然后加最后最后的话执行这个冒泡

18:31.480 --> 18:31.960
冒泡的话

18:31.960 --> 18:33.720
我们一会在这再来看

18:33.720 --> 18:34.680
怎么样

18:34.680 --> 18:38.280
这个的话就是整个mount的这个流程

18:38.280 --> 18:39.320
OK

18:39.320 --> 18:39.720
好

18:39.720 --> 18:41.000
这是关于mount

18:41.000 --> 18:41.240
好

18:41.240 --> 18:41.800
接下来的话

18:41.800 --> 18:43.960
我们来看一下关于这个update

18:44.920 --> 18:48.040
上面我们所说的这个mount流程

18:48.040 --> 18:51.160
他完成的是属性的初始化对吧

18:51.160 --> 18:54.200
上面的mount流程

18:54.200 --> 18:59.320
完成的是属性的初始化

18:59.320 --> 19:01.880
那么这个update

19:01.880 --> 19:04.200
update流程

19:04.200 --> 19:06.200
完成的就是什么呢

19:06.200 --> 19:10.840
就是属性更新的这个标记

19:10.840 --> 19:13.400
他主要是就是对这个属性的更新

19:14.120 --> 19:15.160
做一个标记

19:15.160 --> 19:17.400
因为你是这边你本身就是update流程

19:17.400 --> 19:19.000
本身就是更新这个流程

19:19.000 --> 19:20.920
所以他会针对这个属性更新

19:20.920 --> 19:22.040
做一个这个标记

19:22.040 --> 19:22.840
那还是注意

19:22.840 --> 19:24.200
他不是说直接去更新

19:24.200 --> 19:25.000
他是做标记

19:25.800 --> 19:26.440
最终的话

19:26.440 --> 19:27.560
同意在哪个地方

19:27.560 --> 19:29.320
是不是在那个commit的阶段

19:29.320 --> 19:30.200
同意进行处理

19:30.760 --> 19:31.080
对不对

19:31.800 --> 19:32.360
好

19:32.360 --> 19:33.320
那既然我们这边呢

19:33.320 --> 19:34.040
还是以什么呢

19:34.040 --> 19:35.720
还是以这个host component

19:36.680 --> 19:38.440
以这个host component为例

19:38.440 --> 19:39.880
那host component的话

19:39.880 --> 19:42.520
他这边会对你有一个叫做update

19:43.560 --> 19:45.240
host component

19:46.200 --> 19:47.640
会对你这么一个方法

19:47.640 --> 19:48.360
这个方法的话

19:48.360 --> 19:50.520
它里面有一段主要逻辑是在什么呢

19:50.520 --> 19:52.840
是在这个def property上面

19:54.760 --> 20:02.460
主要逻辑是在这个def property

20:04.460 --> 20:05.340
poperty

20:07.960 --> 20:08.520
方法里面

20:10.040 --> 20:10.680
OK

20:10.680 --> 20:10.920
好

20:10.920 --> 20:11.640
这个方法的话

20:11.640 --> 20:13.240
它会包含两次便利

20:14.280 --> 20:18.520
这个方法会包含两次便利

20:18.920 --> 20:19.720
那两次呢

20:19.720 --> 20:21.480
首先第一次它便利的话

20:21.480 --> 20:24.920
它主要是标记这个更新前有

20:24.920 --> 20:26.280
更新后没有的属性

20:27.320 --> 20:29.400
第一次便利

20:30.920 --> 20:31.800
便利

20:31.800 --> 20:35.480
主要是标记更新前

20:36.680 --> 20:37.560
更新前有

20:38.600 --> 20:41.560
更新后没有的属性

20:42.360 --> 20:42.840
实际上

20:43.720 --> 20:45.160
实际上也就是什么

20:45.160 --> 20:46.280
是不是删除了的属性

20:48.040 --> 20:48.520
对不对

20:48.600 --> 20:49.000
说白了

20:49.000 --> 20:49.880
就是标记

20:49.880 --> 20:53.880
实际上也就是标记删除了的属性

20:54.440 --> 20:54.760
好

20:54.760 --> 20:56.280
然后接下来第二次便利

20:58.040 --> 20:59.160
第二次便利的话

20:59.160 --> 21:01.080
它主要是标记什么呢

21:01.080 --> 21:06.920
主要是标记更新前后有变化的属性

21:08.920 --> 21:09.480
实际上

21:10.760 --> 21:13.880
实际上也就是标记什么

21:13.880 --> 21:15.640
是标记这个更新的属性

21:16.600 --> 21:18.760
更新后的属性

21:19.800 --> 21:20.360
怎么样

21:20.360 --> 21:22.120
它这边会有两次这个便利

21:22.120 --> 21:23.320
我们这边可以来看一下

21:23.320 --> 21:24.200
这个相关的代码

21:25.000 --> 21:26.200
相关代码

21:26.200 --> 21:30.040
这边的话

21:30.040 --> 21:32.440
我把它相关的这个原码片段

21:32.440 --> 21:33.240
我把它拿过来

21:37.140 --> 21:37.380
好

21:37.380 --> 21:38.580
这边大家可以看一下

21:38.580 --> 21:38.820
好

21:38.820 --> 21:39.380
这边的话

21:39.380 --> 21:40.420
这个是地府

21:40.420 --> 21:42.340
PoperDIS这个方法

21:42.340 --> 21:43.060
这个方法的话

21:43.060 --> 21:44.180
你看它这边有一个

21:44.180 --> 21:46.100
Net Update Payload

21:46.100 --> 21:48.100
这个是保存变化属性的

21:48.100 --> 21:49.060
Key和Value

21:49.620 --> 21:51.380
就是你变化的Key和Value

21:51.380 --> 21:52.660
回头保存在这里

21:52.660 --> 21:54.660
那接下来更新前的属性

21:54.660 --> 21:56.660
是nuster props

21:56.660 --> 21:57.780
更新后的属性

21:57.780 --> 21:59.380
这个是next props

22:00.020 --> 22:00.260
好

22:00.260 --> 22:00.980
然后接下来的话

22:00.980 --> 22:01.620
主要就是什么

22:01.620 --> 22:03.060
主要就是这两个 for 循环

22:03.060 --> 22:04.740
你看这边是不是有个for 循环

22:04.740 --> 22:05.700
大家这边

22:05.700 --> 22:07.860
这边是不是又有个for 循环

22:07.860 --> 22:08.420
对不对

22:08.420 --> 22:08.740
好

22:08.740 --> 22:09.860
第一个for 循环是什么呢

22:09.860 --> 22:11.700
第一个for 循环它就是标记什么呢

22:11.700 --> 22:13.940
标记这个删除的属性

22:13.940 --> 22:15.380
就是更新前有

22:15.380 --> 22:16.580
更新后没有

22:16.580 --> 22:17.300
实际上就是什么

22:17.300 --> 22:18.580
是不是就删除了的

22:18.660 --> 22:19.140
对

22:19.140 --> 22:20.260
删除了的属性

22:20.260 --> 22:22.180
那这是第一个for 循环

22:22.180 --> 22:23.860
而这个第二个for 循环

22:24.900 --> 22:25.860
第二个for 循环的话

22:25.860 --> 22:26.900
主要就是标记什么呢

22:26.900 --> 22:29.140
主要就是标记这个更新前后

22:29.140 --> 22:30.820
发生了改变了这个属性

22:31.380 --> 22:31.620
ok

22:32.340 --> 22:32.580
好

22:32.580 --> 22:33.700
然后接下来它这边

22:33.700 --> 22:34.660
它的这个更新

22:35.220 --> 22:36.020
所有这个

22:36.580 --> 22:37.940
就是更新了的属性

22:37.940 --> 22:39.620
它的这个Key和Value

22:39.620 --> 22:43.300
它会保存在这个fiberload的这个update

22:43.300 --> 22:43.860
Q里面

22:45.700 --> 22:46.020
所有

22:46.980 --> 22:51.140
所有更新了的属性的这个key

22:51.140 --> 22:52.420
和Value

22:52.420 --> 22:54.980
会什么呢

22:54.980 --> 22:58.820
会保存在

22:58.820 --> 23:01.380
当前fiberload的

23:01.380 --> 23:05.220
就当前fiber节点的这个update

23:05.220 --> 23:06.260
Q

23:06.260 --> 23:07.780
保存在这里面

23:07.780 --> 23:09.060
ok

23:09.060 --> 23:10.340
然后这个数据

23:10.340 --> 23:14.540
数据的话是以什么呢

23:14.540 --> 23:15.820
是以

23:15.820 --> 23:16.540
什么呢

23:16.540 --> 23:19.420
是以这个key

23:19.420 --> 23:20.700
Value

23:20.700 --> 23:22.700
作为这个数组

23:22.700 --> 23:25.500
数组相邻的这个两项

23:26.620 --> 23:28.300
两项的这个形式

23:29.740 --> 23:30.700
形式

23:30.700 --> 23:32.060
进行保存的

23:33.020 --> 23:33.660
比如说我们这边

23:33.660 --> 23:34.700
我们看这么一个代码

23:35.500 --> 23:36.140
比如说这边

23:38.740 --> 23:39.140
看这个

23:42.040 --> 23:42.920
比如说我们这边

23:42.920 --> 23:44.920
这边有这么一个代码片段

23:44.920 --> 23:45.880
这是gsta

23:47.080 --> 23:47.720
ok

23:47.720 --> 23:48.040
好

23:48.040 --> 23:48.920
你看这边有个diy

23:48.920 --> 23:49.960
然后你点击的时候

23:49.960 --> 23:50.520
点击的时候

23:50.520 --> 23:51.800
然后加这边这个number

23:51.800 --> 23:52.680
什么加1

23:52.680 --> 23:53.480
一开始是0

23:53.480 --> 23:54.280
这边加1

23:54.280 --> 23:55.080
加1之后

23:55.080 --> 23:56.520
然后加这个title

23:56.520 --> 23:58.280
这个属性是不是会发生变化

23:58.280 --> 23:59.480
然后这个style

23:59.480 --> 24:01.240
style是不是也会发生变化

24:01.240 --> 24:02.840
一开始这边是00

24:02.840 --> 24:03.160
对吧

24:03.160 --> 24:04.040
然后加你加1之后

24:04.040 --> 24:05.400
这边变成11

24:05.400 --> 24:06.600
那这边就是style

24:06.600 --> 24:07.480
会发生变化

24:07.480 --> 24:08.040
title的话

24:08.040 --> 24:10.200
一开始是这个nam

24:10.200 --> 24:10.600
nam

24:10.600 --> 24:11.400
然后接下来是

24:12.120 --> 24:13.480
那么一开始是0嘛

24:13.480 --> 24:15.000
所以title一开始是0

24:15.000 --> 24:15.240
好

24:15.240 --> 24:15.880
然后接下来的话

24:15.880 --> 24:16.440
这边加1

24:16.440 --> 24:16.840
加1之后

24:16.840 --> 24:18.200
这边是不是就变成1

24:18.200 --> 24:18.760
对不对

24:18.760 --> 24:19.800
好那接下来它保存

24:19.800 --> 24:21.000
它是怎么保存的呢

24:21.000 --> 24:22.120
好

24:22.120 --> 24:24.680
这边点击diy

24:26.200 --> 24:27.160
diy

24:27.160 --> 24:27.640
元素

24:29.320 --> 24:30.440
然后触发更新

24:35.270 --> 24:36.150
那么这个时候

24:38.070 --> 24:39.350
这个时候

24:39.350 --> 24:41.110
style和什么

24:41.110 --> 24:43.030
和title属性

24:43.030 --> 24:43.990
是不是会发生变化

24:44.550 --> 24:45.430
会发生

24:46.790 --> 24:49.030
会发生变化

24:49.030 --> 24:49.590
对吧

24:49.590 --> 24:50.790
好那接下来发生的变化

24:50.790 --> 24:51.750
它会保存在什么

24:51.830 --> 24:53.910
会保存在这个update queue里面

24:54.710 --> 24:55.030
对不对

24:55.030 --> 24:58.630
然后加这边变化的这个数据

24:59.590 --> 25:03.750
会保存在这个里面

25:03.750 --> 25:05.110
update queue里面

25:05.110 --> 25:05.990
然后以什么呢

25:05.990 --> 25:06.870
以下面的形式

25:08.310 --> 25:09.190
我们这边先写吧

25:09.990 --> 25:14.950
变化的数据会以下面的形式

25:16.710 --> 25:19.670
保存在fiber load update queue里面

25:19.670 --> 25:20.390
什么形式呢

25:20.390 --> 25:21.430
是不是就刚刚我们所说的

25:21.830 --> 25:23.030
这个key value

25:23.030 --> 25:24.150
这种数组的形式

25:25.110 --> 25:25.750
对吧

25:25.750 --> 25:27.350
它最终把它保存出来的话

25:27.350 --> 25:30.200
就是这个样子的

25:30.200 --> 25:32.120
最终就是这个样子的

25:33.400 --> 25:33.960
看到没有

25:33.960 --> 25:35.720
它就是这个key value的形式

25:35.720 --> 25:36.440
这个是key

25:36.440 --> 25:37.160
这个是value

25:37.160 --> 25:37.720
这个是key

25:37.720 --> 25:38.680
这个是value

25:38.680 --> 25:39.240
对吧

25:39.240 --> 25:39.400
啊

25:39.400 --> 25:40.200
以这种形式

25:41.000 --> 25:42.200
而并且的话这个

25:43.400 --> 25:43.880
并且

25:45.480 --> 25:46.040
并且

25:46.760 --> 25:49.240
当前的这个fiber load

25:50.360 --> 25:52.520
然后会标记

25:53.000 --> 25:53.800
这个update

25:54.760 --> 25:56.600
它会做一个update这个标记

25:56.600 --> 25:57.480
那这个标记的话

25:57.480 --> 25:58.600
就是我们之前所说的

25:59.160 --> 26:01.560
这边就是直接通过那个位运算

26:01.560 --> 26:04.520
给它把flex做成标记就可以了

26:04.520 --> 26:05.160
就像这样子

26:05.720 --> 26:06.120
看到没有

26:06.120 --> 26:07.880
这个之前我们讲位运算是不是讲过的

26:08.520 --> 26:09.000
对不对

26:09.000 --> 26:11.480
它这边的话就是给当前的这个fiber load

26:11.480 --> 26:13.080
这个是当前的fiber load嘛

26:13.080 --> 26:13.400
对不对

26:13.400 --> 26:16.360
给它的flex加上一个update标记

26:17.320 --> 26:17.560
ok

26:18.200 --> 26:20.440
这个的话就是它这个更新的流程

26:21.160 --> 26:21.800
更新流程呢

26:21.800 --> 26:22.680
主要就是说像这里

26:23.160 --> 26:25.320
这个df properties里面

26:26.120 --> 26:28.040
它这边的话是有两次

26:28.040 --> 26:31.240
第一次获循环的话标记的是三除的属性

26:31.240 --> 26:32.280
第二次获循环

26:32.920 --> 26:35.320
标记的是这个更新了的属性

26:36.280 --> 26:38.600
你到时候说的时候把这些给人家说清楚

26:39.080 --> 26:39.880
对吧

26:39.880 --> 26:40.200
ok

26:40.760 --> 26:41.080
好

26:41.080 --> 26:42.520
然后接下来我们这边来看一下

26:43.560 --> 26:44.680
更新完

26:44.680 --> 26:45.880
这边更新完了之后

26:45.880 --> 26:47.800
然后接下来这边是不是也会到这个

26:48.520 --> 26:49.640
bubble properties

26:49.640 --> 26:51.080
就flex冒泡

26:51.080 --> 26:51.400
对吧

26:51.400 --> 26:52.760
你无论是mount也好

26:52.760 --> 26:54.360
还是这个update也好

26:54.360 --> 26:56.760
这边是不是都会到这个flex冒泡

26:57.320 --> 26:57.960
对不对

26:57.960 --> 26:58.200
啊

26:58.200 --> 26:59.320
因此我们最后的话

26:59.320 --> 27:00.360
我们来看一下

27:00.360 --> 27:03.640
关于这个flex冒泡啊

27:05.080 --> 27:05.240
啊

27:05.240 --> 27:07.880
什么是这个flex冒泡呢

27:07.880 --> 27:08.040
啊

27:08.040 --> 27:08.520
我们知道

27:08.520 --> 27:10.280
当整个这个reconcealer

27:10.840 --> 27:10.920
啊

27:10.920 --> 27:12.200
它完成工作之后

27:12.200 --> 27:14.600
我们会得到一颗完整的这个web

27:15.240 --> 27:16.440
fiber tree对不对

27:17.160 --> 27:17.560
啊

27:18.280 --> 27:18.520
啊

27:18.520 --> 27:19.080
我们知道

27:20.120 --> 27:22.760
当整个这个reconcealer

27:24.600 --> 27:26.600
reconcealer

27:28.200 --> 27:29.880
完成工作后

27:31.400 --> 27:35.800
会得到一颗完整的

27:35.800 --> 27:37.080
什么是web

27:38.040 --> 27:39.000
这个fiber tree

27:42.970 --> 27:43.690
对不对

27:43.690 --> 27:43.930
好

27:43.930 --> 27:46.250
那接下来你这个webfiber tree是有什么

27:46.250 --> 27:48.250
是不是由一个一个的fiber load组成的

27:48.890 --> 27:49.370
对不对

27:49.450 --> 27:49.930
这颗

27:51.290 --> 27:59.180
这个webfiber tree是由

27:59.980 --> 28:05.100
一颗一颗这个fiber node组成的

28:05.900 --> 28:06.460
没问题吧

28:07.020 --> 28:07.500
对吧

28:07.500 --> 28:07.740
好

28:07.740 --> 28:10.540
那你这个一个一个每个这个fiber load

28:10.540 --> 28:14.300
是不是有些标记了这个flex啊

28:14.300 --> 28:17.500
这些fiber node中

28:18.220 --> 28:22.300
有一些标记了这个flex

28:22.300 --> 28:23.340
就他要做什么事情

28:23.980 --> 28:25.260
啊有一些没有标记

28:26.540 --> 28:29.180
有一些没有标记

28:30.220 --> 28:30.700
对吧

28:30.700 --> 28:32.220
那现在的话就会存在一个问题

28:32.940 --> 28:35.420
现在就存在一个问题

28:35.980 --> 28:37.020
怎么问题呢

28:37.020 --> 28:37.180
啊

28:37.180 --> 28:42.140
我们如何高效的找到啊

28:42.140 --> 28:42.940
散落在

28:44.060 --> 28:45.180
散落在这个

28:46.060 --> 28:47.660
这颗fiber tree

28:50.220 --> 28:51.100
fiber tree

28:52.060 --> 28:53.020
中啊

28:53.020 --> 28:58.380
然后由flex标记的这个fiber node

28:59.980 --> 29:01.340
为什么要找这些fiber load

29:01.340 --> 29:02.540
因为你commit阶段

29:02.540 --> 29:03.740
你要针对这些fiber load

29:03.740 --> 29:06.060
是不是做出这个相应的一些动作

29:06.540 --> 29:06.940
对不对

29:06.940 --> 29:07.900
你标记了三除

29:07.900 --> 29:08.540
那就三除

29:08.540 --> 29:10.700
你标记了这个更新就更新

29:11.420 --> 29:11.660
啊

29:11.660 --> 29:12.940
那我们这边我们要把他这个

29:13.420 --> 29:15.420
就高效的能够找到啊

29:15.420 --> 29:17.580
就好比你这个一棵树上面啊

29:17.580 --> 29:18.540
有一些黄叶子

29:18.540 --> 29:19.900
有些绿色的叶子

29:19.900 --> 29:21.420
那现在我需要高效的找到

29:21.420 --> 29:23.580
这棵树上所有的这个黄色的这个叶子

29:24.380 --> 29:25.100
对不对

29:25.100 --> 29:26.060
那怎么办呢

29:26.060 --> 29:26.300
啊

29:26.300 --> 29:28.700
这这里就可以通过这个flex帽炮

29:30.140 --> 29:35.740
那么此时就可以通过flex

29:37.930 --> 29:39.450
flex帽炮

29:41.480 --> 29:42.280
OK

29:42.280 --> 29:44.840
我们知道整个这个commit work

29:44.840 --> 29:45.800
它是属于什么呢

29:45.800 --> 29:47.160
它是属于这个归

29:47.160 --> 29:47.480
对吧

29:47.480 --> 29:48.600
归这个阶段

29:48.600 --> 29:51.320
那它的这个叶子元素的话

29:51.320 --> 29:53.480
它整体的话是自相而上的

29:54.200 --> 29:55.080
对不对

29:55.080 --> 29:55.320
啊

29:55.320 --> 29:55.880
我们知道

29:57.080 --> 29:57.880
这个complete

29:58.920 --> 30:00.520
complete work

30:00.520 --> 30:02.760
是属于这个归

30:04.680 --> 30:06.200
归的这个阶段

30:06.200 --> 30:07.080
那整体流程

30:08.120 --> 30:10.440
整体流程是自相

30:11.480 --> 30:11.880
往上

30:14.070 --> 30:14.710
自相

30:15.430 --> 30:16.230
往上的

30:18.440 --> 30:19.160
对不对

30:19.160 --> 30:19.240
啊

30:19.240 --> 30:20.520
那么就非常用来

30:20.520 --> 30:22.360
就非常适合啊

30:22.360 --> 30:24.920
就非常适合

30:25.560 --> 30:27.640
用来收集副作用

30:29.820 --> 30:32.060
收集副作用

30:32.860 --> 30:33.420
OK

30:33.420 --> 30:35.420
那它这边具体是怎么收集的呢

30:35.420 --> 30:35.580
啊

30:35.580 --> 30:35.980
这边

30:35.980 --> 30:37.420
收集的相关代码如下

30:38.700 --> 30:41.900
收集的相关代码如下

30:47.370 --> 30:47.530
好

30:47.530 --> 30:48.170
我们把这个

30:48.170 --> 30:49.050
我们把他拿过来

30:53.320 --> 30:54.040
这边

30:54.040 --> 30:54.520
你看

30:54.520 --> 30:55.560
他是通过一个什么呢

30:55.560 --> 30:58.120
他是通过一个subtreeflex

30:58.840 --> 30:59.080
啊

30:59.080 --> 31:00.200
subtreeflex

31:00.200 --> 31:01.480
首先收集什么呢

31:01.480 --> 31:03.880
收集它的这个子孙fiber load的

31:03.960 --> 31:05.640
标记了这个flex的

31:05.640 --> 31:06.200
看到没有

31:06.200 --> 31:06.280
啊

31:06.280 --> 31:08.120
这边同样是通过微云算

31:08.120 --> 31:08.440
啊

31:08.440 --> 31:09.480
说在这个react里面

31:09.480 --> 31:10.120
大量的

31:10.120 --> 31:12.440
大量的使用到了这个微云算

31:12.440 --> 31:12.840
对吧

31:12.840 --> 31:13.800
一个是链表

31:13.800 --> 31:14.120
啊

31:14.120 --> 31:15.320
大量的使用到了链表

31:15.320 --> 31:16.440
第二个就是微云算

31:16.440 --> 31:16.600
啊

31:16.600 --> 31:17.400
你看它这边收集了

31:17.400 --> 31:18.920
就通过这种方式

31:18.920 --> 31:19.480
对不对

31:19.480 --> 31:19.640
啊

31:19.640 --> 31:21.000
你如果不会那个微云算的话

31:21.000 --> 31:21.560
你看这个代码

31:21.560 --> 31:23.000
你看的看不懂

31:23.000 --> 31:23.400
对不对

31:24.040 --> 31:24.200
啊

31:24.200 --> 31:24.600
这边呢

31:24.600 --> 31:25.800
首先这边收集

31:25.800 --> 31:26.040
啊

31:26.040 --> 31:26.440
收集

31:26.440 --> 31:27.480
然后接下再收集什么呢

31:27.480 --> 31:29.160
再收集这个啊

31:29.160 --> 31:29.880
当前这个

31:29.880 --> 31:31.640
子fiber load的标记了这个

31:32.600 --> 31:33.400
这个flex

31:34.360 --> 31:34.600
啊

31:34.600 --> 31:35.880
大家最终在干嘛呢

31:35.880 --> 31:37.880
再把这个所有的这个flex

31:37.880 --> 31:38.600
然后接下来的话

31:38.600 --> 31:39.400
这个收集到什么

31:39.400 --> 31:40.040
收集到这个

31:40.040 --> 31:40.920
当前的这个

31:40.920 --> 31:42.040
注意这个complete work

31:42.040 --> 31:42.520
这个的话

31:42.520 --> 31:43.640
它是指的是那个

31:43.640 --> 31:45.240
是指的是当前的fiber节点

31:46.200 --> 31:46.440
啊

31:46.440 --> 31:47.320
这个的话也是经常

31:47.320 --> 31:48.520
你去看原码的时候

31:48.520 --> 31:49.240
会让你

31:49.240 --> 31:50.280
疑惑的一个地方

31:50.920 --> 31:51.080
啊

31:51.080 --> 31:51.640
很多地方

31:51.640 --> 31:53.160
他用的是同名的变量

31:53.720 --> 31:55.320
但是他的意识完全不一样

31:55.800 --> 31:55.960
啊

31:55.960 --> 31:56.840
比如complete work

31:56.840 --> 31:58.600
我们这边讲的这个complete work

31:58.600 --> 31:59.640
是不是属于一个方法

32:00.440 --> 32:00.760
对不对

32:00.760 --> 32:01.480
beginwork

32:01.480 --> 32:02.280
complete work

32:02.280 --> 32:03.480
而这个代码

32:03.560 --> 32:04.680
原码里面的这个地方

32:04.680 --> 32:05.240
这个地方呢

32:05.240 --> 32:06.520
他这个complete work

32:06.520 --> 32:07.560
而不是指的是那个

32:07.560 --> 32:08.120
那个方法

32:08.120 --> 32:08.680
指的是什么

32:08.680 --> 32:09.960
指的是这个fiber节点

32:10.840 --> 32:11.080
啊

32:11.080 --> 32:12.520
他这边用的是这个complete work

32:13.080 --> 32:13.480
ok

32:13.480 --> 32:14.600
说这个的话是指的是

32:14.600 --> 32:15.800
当前的这个fiber load

32:16.360 --> 32:17.240
当前的fiber load

32:17.240 --> 32:17.800
然后在这边

32:17.800 --> 32:19.480
你看这个subtray flag

32:19.480 --> 32:21.160
等于刚才所收集到的

32:21.160 --> 32:22.040
subtray flex

32:22.600 --> 32:23.880
这个subtray flex

32:23.880 --> 32:25.000
是不是就刚才这边

32:25.000 --> 32:25.880
是不收集到的

32:26.440 --> 32:28.280
子孙的这个flex啊

32:28.280 --> 32:28.680
对不对

32:28.680 --> 32:29.480
那接下来

32:29.480 --> 32:30.440
把他放到这个

32:30.440 --> 32:31.560
当前fiber load的

32:31.560 --> 32:33.080
这个subtray flex上面

32:33.800 --> 32:35.080
通过这种方式

32:35.080 --> 32:36.760
来进行这个收集的

32:36.760 --> 32:37.240
啊

32:38.440 --> 32:40.280
那这样的这种收集方式的话

32:40.280 --> 32:41.080
有个好处

32:41.960 --> 32:43.160
这样的收集方式

32:46.180 --> 32:48.820
这样的收集方式

32:49.540 --> 32:51.300
有一个好处

32:51.300 --> 32:52.100
什么好处呢

32:52.100 --> 32:52.980
就是在渲染

32:53.540 --> 32:54.740
在渲染阶段

32:56.020 --> 32:56.900
渲染阶段

32:57.460 --> 33:00.660
通过任意一级

33:02.660 --> 33:04.900
通过任意一级的这个fiber load

33:06.020 --> 33:08.580
fiber load的点这个subtray

33:10.020 --> 33:11.620
subtray flex

33:12.500 --> 33:13.940
啊都可以什么呢

33:13.940 --> 33:14.900
都可以

33:16.100 --> 33:20.020
都可以快速确定

33:20.740 --> 33:23.060
这个该fiber load的

33:23.860 --> 33:26.100
以及这个指数

33:27.780 --> 33:28.900
啊就他自己包含

33:28.900 --> 33:30.420
他自己的这个指数

33:30.420 --> 33:32.020
然后是否存在副作用

33:32.900 --> 33:35.460
是否存在副作用

33:36.020 --> 33:37.140
啊然后接下来的话

33:37.140 --> 33:39.620
如果存在就可以进行一些操作

33:39.620 --> 33:40.980
对吧啊这边就是

33:40.980 --> 33:42.980
确定他的这个指数

33:42.980 --> 33:44.500
你让我任何一个fiber load的

33:44.500 --> 33:45.700
我通过什么通过这个

33:46.260 --> 33:47.380
subtray flex

33:48.020 --> 33:49.700
是不是就可以看我的这个指数

33:50.260 --> 33:52.660
对来是否存在这个副作用啊

33:52.660 --> 33:54.500
从而判断

33:56.100 --> 34:00.820
是否需要执行和副作用

34:00.820 --> 34:02.660
相关的操作

34:04.180 --> 34:04.900
对吧

34:04.980 --> 34:05.380
ok

34:07.850 --> 34:10.010
啊然后还有一个需要说的就是

34:10.810 --> 34:13.050
早期的时候啊早期的时候

34:13.050 --> 34:14.730
实际上那个react里面

34:14.730 --> 34:16.650
并没有使用这个subtray flag

34:17.130 --> 34:18.730
啊就是做这个flex的帽泡

34:19.610 --> 34:24.730
早期早期的时候react中

34:25.370 --> 34:30.090
实际上并没有使用这个subtray

34:31.610 --> 34:35.290
subtray flex啊来做什么呢

34:35.370 --> 34:38.330
来做这个flex帽泡

34:38.330 --> 34:42.890
啊就是来通过来通过flex帽泡

34:43.450 --> 34:45.050
收集这个副作用

34:45.530 --> 34:47.050
而是使用了什么呢

34:47.050 --> 34:51.210
而是使用的这个effect list

34:52.010 --> 34:53.370
那这玩意是一个什么呢

34:53.370 --> 34:54.490
这玩意是个链表

34:55.850 --> 34:56.490
看不看

34:56.490 --> 34:57.530
它是个链表

34:57.530 --> 34:59.930
啊它是使用的是effect list

35:00.730 --> 35:03.290
来收集的副作用

35:04.250 --> 35:05.370
啊但它现在的话

35:05.370 --> 35:07.770
它这边就改成了这个subtray flex

35:07.770 --> 35:08.250
为什么

35:08.250 --> 35:10.810
因为subtray flex有个好处啊

35:11.530 --> 35:12.970
使用这个subtray

35:14.090 --> 35:14.970
这个flex

35:15.690 --> 35:16.570
有一个好处

35:17.370 --> 35:18.410
有个好处

35:18.410 --> 35:24.090
就是能够确定某一个这个fiber load

35:26.040 --> 35:27.000
它的什么呢

35:27.000 --> 35:29.560
它的就是它的这个指数

35:30.920 --> 35:34.040
指数的副作用对不对

35:34.120 --> 35:35.480
而你这个链表链表的话

35:35.480 --> 35:36.520
相当于就是所有的

35:37.320 --> 35:38.680
所有的这个副作用

35:38.680 --> 35:40.680
是不是都收集在一个链表上面

35:40.680 --> 35:43.480
我没有办法确定就是某一个fiber load

35:44.040 --> 35:46.120
啊它以及它下面的那些指数

35:46.760 --> 35:48.680
哪些副作用是属于这个fiber load

35:48.680 --> 35:50.280
这个我是没办法确定的

35:50.280 --> 35:50.840
ok

35:50.840 --> 35:53.240
说新的这个就是react react18

35:53.240 --> 35:53.880
它这边的话

35:53.880 --> 35:55.960
它就已经把这种方式就已经变了

35:55.960 --> 35:58.440
已经变成这种通过这种subtray flex

35:59.080 --> 36:01.480
通过这种方式去收集了

36:01.560 --> 36:04.280
而不再是使用以前的这种链表的形式了

36:04.840 --> 36:05.960
这点的话一定要注意

36:06.520 --> 36:08.920
你如果现在你去网上看一些这个

36:09.480 --> 36:11.720
网上看一些别人的博客呀之类的

36:11.720 --> 36:12.920
可能别人还会给你说

36:12.920 --> 36:14.600
就是收集副作用的时候

36:14.600 --> 36:16.360
使用的是这个effect list

36:17.160 --> 36:18.920
早期的时候确实是这样子的

36:18.920 --> 36:20.280
但是现在的话已经没有了

36:20.840 --> 36:21.480
明白吧

36:21.480 --> 36:22.600
你想想吗

36:22.600 --> 36:23.400
你想想这个道理吧

36:23.400 --> 36:25.160
你这个effect list

36:25.160 --> 36:25.720
它是个什么吗

36:25.720 --> 36:26.920
它是个链表吗

36:26.920 --> 36:27.640
对链表的话

36:27.640 --> 36:28.440
它是不是就直接这样

36:28.440 --> 36:29.480
这样串在一起的

36:30.040 --> 36:31.000
对来串在一起的

36:31.000 --> 36:32.440
我要确定某一颗

36:32.440 --> 36:33.960
就是这个树里面

36:33.960 --> 36:35.560
某一个纸节点

36:35.560 --> 36:38.360
和它下面的这些纸元树的这个副作用

36:38.360 --> 36:39.880
我这边我是没办法找到的

36:40.600 --> 36:41.080
对不对

36:41.080 --> 36:43.880
但是你看这种方式的话就非常非常方便

36:44.520 --> 36:45.880
我任意一个纸节点

36:46.440 --> 36:47.400
啊任意一个纸节点

36:47.400 --> 36:49.400
我通过这个subtray flex

36:49.400 --> 36:50.600
我都可以找到它

36:50.600 --> 36:53.160
以及它指数的这个这个flex

36:54.120 --> 36:54.520
对不对

36:55.160 --> 36:55.480
OK

36:56.040 --> 36:58.440
好这是关于这个flex抹泡

36:59.000 --> 36:59.160
啊

37:00.200 --> 37:02.040
好最后我们来看一下关于这个

37:02.040 --> 37:02.680
整体解答

37:03.400 --> 37:04.360
complete walk

37:04.360 --> 37:05.800
主要做一些什么工作

37:06.360 --> 37:08.840
整体的流程是怎样的

37:08.840 --> 37:09.400
那这个呢

37:09.400 --> 37:10.920
实际上你只要根据这个

37:11.720 --> 37:13.320
根据这个流程图去回答

37:13.880 --> 37:14.760
是不是OK了

37:14.760 --> 37:15.160
对吧

37:15.160 --> 37:18.040
首先的话根据这个进行区别对待

37:18.040 --> 37:18.280
好

37:18.280 --> 37:19.880
然后接下来这边mount

37:19.880 --> 37:21.240
这边要做什么样的东西

37:21.960 --> 37:22.760
然后update

37:23.320 --> 37:24.200
这边要做什么

37:24.200 --> 37:26.200
那最后的话这边flagmop

37:26.200 --> 37:27.320
做在做什么

37:27.320 --> 37:27.800
对吧

37:27.880 --> 37:29.800
把这几个把它回答清楚就OK了

37:31.240 --> 37:33.480
好这是关于这个complete walk

37:33.480 --> 37:35.080
我把这个参考答案

37:35.080 --> 37:36.120
我把拿过来

37:38.570 --> 37:39.130
好这边

37:39.770 --> 37:40.410
参考答案

37:44.060 --> 37:44.300
OK

37:44.860 --> 37:46.460
好这个complete walk

37:46.460 --> 37:49.020
首先会根据这个viptar

37:49.020 --> 37:51.020
进行一个区分对待

37:51.020 --> 37:53.020
大致的流程包含这两步

37:53.500 --> 37:53.980
对不对

37:53.980 --> 37:55.820
好然后加这边mount阶段

37:55.820 --> 37:56.860
它会做什么

37:56.860 --> 37:58.140
会做这么一些事情

37:58.620 --> 38:00.700
好然后加这边update阶段

38:00.700 --> 38:01.260
update

38:01.340 --> 38:02.540
这个update阶段

38:02.540 --> 38:03.580
它会做什么事情

38:03.580 --> 38:05.340
这边会包含两次便利

38:05.900 --> 38:06.380
对吧

38:06.380 --> 38:07.420
好最后一个是什么呢

38:07.420 --> 38:09.580
最后一个是关于这个flagmop

38:09.580 --> 38:10.460
这个mop

38:11.180 --> 38:11.820
对不对

38:11.820 --> 38:12.780
flagmop

38:13.180 --> 38:15.100
这是关于这个complete walk

38:15.500 --> 38:18.940
它的一个工作流程的一个参考答案

38:19.340 --> 38:21.740
大家下来可以自己再把这一块看一下

38:22.380 --> 38:22.780
好吧

38:23.340 --> 38:23.900
OK

38:23.900 --> 38:25.340
这就是关于这节课

38:25.340 --> 38:27.420
介绍这个complete walk的工作流程

38:27.900 --> 38:29.420
好这节课就到这里

38:29.420 --> 38:30.220
再见

