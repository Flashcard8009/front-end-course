WEBVTT

00:00.180 --> 00:06.180
上节课的话 咱们看了关于这个hooks 它内部的一个原理啊

00:06.180 --> 00:15.180
好 接下来的话 咱们就一组一组这个hook 咱们一起来看一下啊 看一下它每一组这个hook 它内部那个mount和update

00:15.180 --> 00:22.180
它究竟做了些什么样的事情 我们这边的话首先来看这个use state和use reducer

00:22.180 --> 00:28.180
啊 同样的话 这边的话 有一道面试题 他问你use state和use reducer

00:28.180 --> 00:38.180
啊 有什么样的这个区别 ok 好 那这边的话 我们首先的话 我们先去回顾一下啊 首先回顾一下就是基本的用法

00:40.180 --> 00:50.180
啊 关于这个use state和use reducer use reducer好像之前没讲过 是不是啊 好像之前一直没讲过啊 所以我们这边呢 首先重点是把这个use reducer

00:50.180 --> 00:58.180
它的一个基础的用法 把它看一下 好 然后接下来就是看一下它们各自的这个mount阶段

00:58.180 --> 01:07.180
啊 以及各自的这个update阶段 ok 大致是从这么三个方向啊 去看

01:07.180 --> 01:16.180
好 首先的话 我们这边的话 我们来看一下 关于这个use state use state的话 这边 其中我们已经很熟悉了 对不对

01:16.180 --> 01:20.180
啊 我这边呢 我就直接可以这边写一个 比如这边 我们这边是gst啊

01:22.180 --> 01:30.810
啊 比如这边方形啊 我们这边一个app 好 然后接下来我这边const一个什么呢 const一个

01:30.810 --> 01:35.810
比如说number 然后一个set number 等于一个use state

01:37.810 --> 01:45.810
啊 然后再这边也传一个什么呢 传一个初始值进去 进去之后 然后接下来这边return啊 我们返回一段

01:46.810 --> 01:55.810
我们这边呢 就返回返回一个di位 返回一个di位 返回一个di位 然后加这边显示的是number

01:56.810 --> 01:59.810
好 然后加这边onclick 等于一个

02:01.810 --> 02:12.630
这边叫set number 对吧 然后number加1 要么一个最简单的这个use state 它的这个基本用法 是不就这样子的

02:12.630 --> 02:21.390
是不是就这样子的 对不对啊 然后把这个代码我们把它放到 放到这边 放到这边我们来看一下啊

02:22.390 --> 02:25.390
啊 这边你要影一下 或者你这边直接react点

02:27.390 --> 02:30.390
这边影一下吧 import 啊 这边是我看一下

02:33.390 --> 02:39.390
嗯 import 啊对的 我们把它影一下use state 然后from the react

02:39.390 --> 02:43.390
react 啊 然后这里

02:45.390 --> 02:55.390
保存 保存了之后 然后加这边来看一下啊 在这里啊 在这边啊 是不OK的 对点 点击之后 它这边会这个有一个自征的效果

02:55.390 --> 03:05.390
啊 这个就是一个use state 啊 最简单的这个用法 ok 好 然后接下来的话 我们这边主要来看一下这个use this reducer啊

03:06.390 --> 03:10.390
use state 我们已经非常熟悉了

03:13.390 --> 03:19.020
把这个放到 放到这上面吧 放到这儿 如下

03:21.020 --> 03:26.020
接下来 我们来看一下这个use reducer

03:28.020 --> 03:36.020
use reducer的话 如果你就是会这个reducts reducts我们之前是不讲过的 对不对啊 如果你会这个reducts

03:37.020 --> 03:43.020
那么这个use reducer啊对你来讲

03:45.020 --> 03:46.020
对你来讲

03:48.020 --> 03:57.020
是非常熟悉的 你回一下这个reductsreducts里面有些什么reducts里面首先是不是就是有一个reducer

03:58.020 --> 04:06.020
它是个存函数 它接收一个什么 是不是接收一个action action 是什么 action 是个对这个数据变化的这个

04:07.020 --> 04:17.020
描述 对不对啊 接收action之后 然后通过reducer 然后计算出最新的这个状态 然后再去干嘛 是不是再去更新这个存库

04:18.020 --> 04:28.020
对不对 这是我们之前这个reducts的这个流程啊 那么这边这个use reducer的话基本上就是类似的啊 这边话是关于这个use reducer

04:28.020 --> 04:31.020
它的一个语法 完了过来

04:33.020 --> 04:42.020
啊 这边看一下 use reducer 它相比这个use state 它接收的话就是三个参数了 哪三个呢 首先这边的话是你的reducer

04:43.020 --> 04:48.020
然后接下来的话 这边是你的一个初始化的这个字 这个的话其实就相当于这边

04:49.020 --> 04:55.020
就相当于这边初始化的字 那这边的话还有一个init啊init的话是一个初始化的这个函数

04:55.020 --> 05:07.590
可以做一些额外的一些初始化的这个工作啊 好来我们这边我们来看个例子啊 接下来我们来看一个技术器的例子

05:12.210 --> 05:14.210
ok 好来到这边

05:15.210 --> 05:17.210
嗯 这里的话我们首先

05:18.210 --> 05:22.210
我们在外面啊 外面的话我们先定义一个初始化的状态

05:24.780 --> 05:29.780
定义一个初始化的状态啊 比如说我们这边const

05:29.780 --> 05:31.780
const一个initio

05:33.780 --> 05:35.780
initio state

05:38.980 --> 05:42.980
好 这边对应什么呢 这边对应一个const啊 比如说对应的是0

05:43.980 --> 05:46.980
好 然后接下来我们再来写个什么呢 再来写个reducer

05:48.980 --> 05:52.980
再来写个reducer 这个reducer的话 然后加这边function

05:53.980 --> 05:55.980
然后一个比如说叫做controller

05:56.980 --> 05:58.980
接收一个什么呢 接收一个state

05:59.980 --> 06:02.980
叫你之前的状态值 还有一个什么呢 还有一个action

06:05.420 --> 06:10.420
看到没有啊 这样子我这边的话写一个文档级别的注射

06:11.420 --> 06:13.420
啊 这边呢是我们的reducer

06:17.460 --> 06:25.290
这个是什么呢 这个是状态 这个是状态啊 这个action action就是什么 是不是这个数据变化的描述

06:26.290 --> 06:34.290
数据变化的描述对象 对不对 好在这里面 这里面的话我们就通过这个switch

06:35.290 --> 06:40.290
我们发现就和那个redux一样的啊 你如果这个熟悉redux的话 这边基本就是一模一样

06:41.290 --> 06:46.290
啊 根据你的这个type啊 比如说你这边这个type的话 你传的是一个这个increment

06:48.290 --> 06:52.290
cre increment啊 我这个风扇突然转起来了

06:54.730 --> 06:57.730
increment的话 我们这边就干嘛呢 我们这边就return

06:58.730 --> 07:04.730
返回一个对象啊 这个对象的话就是新的数据对象 新的数据对象的话你这边是不counter

07:04.730 --> 07:13.730
对呀 所以我这边的话也应该有counter 这counter它就等于什么 等于你原来这个state啊 就你这个这个对象 这个对象里面有什么

07:14.730 --> 07:18.730
这边有counter 加上一个什么 加上一个action点playload

07:20.730 --> 07:24.730
ok 你看 是不是就和之前一模一样 对吧 这边报这么多黄色吗

07:25.730 --> 07:31.730
数据变化对象expectdefault case啊 这个这个一会我们再写啊 好 这是increment

07:32.730 --> 07:41.730
还有case 如果你是 decrement decrement的话 我们这边就是什么 我们是不是就是解啊 对吧 这边就是解

07:42.730 --> 07:49.730
好 然后接下来这边是什么呢 这边是default啊 default的话 我们这边就return什么呢 return这个state

07:50.730 --> 07:57.730
默认返回的就是state啊 那我们的这个reducer也就写好了 好 写好了之后 然后接下来到我们这边

07:58.730 --> 08:04.730
我们这边的话 我们就不用这个use state了啊 你这边可以多做一个对比啊 我们这边的话就是

08:05.730 --> 08:07.730
use reducer

08:08.730 --> 08:18.730
好 把use reducer 把他过来 use reducer 他就不再像刚才一样啊 接收一个就是出使值就一个参数 他这边就是三个参数

08:19.730 --> 08:21.730
三个参数呢啊 首先的话这边是你的这个

08:22.730 --> 08:27.730
我看一下 首先这边是reducer啊 首先是reducer 所以你把这个controller

08:29.730 --> 08:37.730
传过去 好 然后接下第二个参数 第二个参数才是你的出使值啊 比如我们这边刚才的出使值是0 我们现在出使值是不是就这么这么一个对象

08:38.730 --> 08:44.730
对吧 这么一个对象 ok啊 这个这个返回的接参我们一会再写啊

08:45.730 --> 08:52.730
我们一会再写 ok 然后第三个 第三个的话是可选的这个参数 第三个是可选参数 我们先不传

08:53.730 --> 08:58.130
好 然后接下来这边const

08:59.130 --> 09:00.130
好 这边的话就是一样的

09:01.130 --> 09:08.130
明白吧 这边那就是一样的 这边那就是abulado state 以及一个什么呢 以及一个dispatch

09:09.130 --> 09:14.130
实际上你以前这个set number 他其实就是一个什么 就是一个dispatch

09:15.130 --> 09:20.130
ok 那number 这边的number 这个这个第一个参数啊 第一个参数他是一个什么呢 他是个出使值

09:21.130 --> 09:23.130
啊 他是个出使值 ok

09:24.130 --> 09:30.130
好 然后接下来拿到之后 拿到之后 然后接下来我们这边啊 这边我把那个这段ges叉我就把拿过来

09:31.130 --> 09:37.140
我们拿过来这边大家看一下 这段ges叉很简单

09:38.140 --> 09:43.140
呃 这边有一个ref 看一下啊 哦 这边我们还得use the ref

09:45.580 --> 09:49.580
use ref use ref 之后然后将我们这边创建个ref

09:51.580 --> 09:57.580
const 一个ref 等于一个use ref 啊 创建个ref

09:58.580 --> 10:02.580
好 然后接下来这这边这边他是一个什么呢 他是一个下拉列表

10:03.580 --> 10:06.580
下拉列表这边你可以选你是要加1还是加2还是加3

10:06.580 --> 10:10.580
啊 然后接下来他这边对应对应啊 这边有对应的这个实践

10:11.580 --> 10:14.580
好 那接下来这边这个实践 我们在这边来写

10:17.090 --> 10:20.090
const 啊 我们写一个就好了 这边increment

10:22.720 --> 10:27.720
好 那这边就该干嘛 这边是不是该做相应的这个啊 就是你这边是increment嘛 是不是

10:28.720 --> 10:31.720
应该是做这个之真 对不对 做自真操作

10:33.720 --> 10:37.720
好 那做自真操作我们这边分成两个步骤 首先的话 是不是你要增加多少

10:37.720 --> 10:42.720
增加多少 对不对 你要增加多少

10:45.100 --> 10:47.100
啊 因为我们这边的话是有一个下拉列表的

10:48.100 --> 10:49.100
诶

10:50.100 --> 10:53.100
我的笔刷稍等啊 我的笔刷突然就

10:54.100 --> 10:55.100
看突然就不好用了

10:57.100 --> 10:58.100
稍等啊

10:59.100 --> 11:00.100
马上马上

11:01.100 --> 11:02.100
enter ghost

11:03.100 --> 11:08.100
啊 可以了 好 你这边那你是有个什么 你这边的话是不是有个下拉列表的

11:09.100 --> 11:13.100
ok 我需要获取到你这下拉列表的这个值 那说我这边const

11:14.100 --> 11:16.100
const一个none 等于一个什么呢

11:17.100 --> 11:20.100
ser ref 点这个current 点这个value

11:21.100 --> 11:25.100
ok 好 这边你如果是致富错的话 你这边最好再把它转一下

11:26.100 --> 11:28.100
这边把它转成这个数字 保证它一定是数字

11:29.100 --> 11:32.100
或者你用什么puzzle int啊这些都可以啊 把它转一下

11:33.100 --> 11:35.100
转了之后然后接下第二步 第二步是关键的

11:36.100 --> 11:37.100
以前的话我们这边的话就直接干嘛

11:37.100 --> 11:40.100
以前的话是不是就直接set那么

11:42.790 --> 11:43.790
就是以前你如果用的是这个

11:44.790 --> 11:47.790
use state的话 对不对 让家把什么把新的这个那么

11:48.790 --> 11:51.790
把它传过去 对不对 你以前是这样子用的 但现在

11:52.790 --> 11:55.790
现在的话你就应该用什么呢 用这边返回的dispatch

11:56.790 --> 12:00.790
dispatch这边接收一个什么呢 接收一个action

12:01.790 --> 12:04.790
接收一个action action 里面让家这边有type

12:05.790 --> 12:07.790
type对呢 是什么呢 type对呢 就是这个

12:09.790 --> 12:12.810
increase

12:13.810 --> 12:15.810
好 然后家有什么呢 有我们的payload

12:16.810 --> 12:18.810
payload对呢 就是什么呢 对呢就是什么呢

12:19.810 --> 12:24.810
你看和之前的那个redux 是不是基本上就是一模一样

12:25.810 --> 12:29.810
对不对 一模一样 这个实际上就是redux那个作者

12:30.810 --> 12:33.810
还记不记得 我之前讲那个

12:34.810 --> 12:36.810
就是讲react入门片的时候 讲到redux的时候

12:37.810 --> 12:38.810
我介绍了那个作者的

12:38.810 --> 12:40.810
我还放了一张截图 对不对 很帅的一个人

12:41.810 --> 12:44.810
其实就是他 他加入了这个react团队之后

12:45.810 --> 12:48.810
他把这个redux的思想直接就融入到这个react里面了

12:49.810 --> 12:51.810
所以你看现在这个react里面 他这边就支持这个

12:52.810 --> 12:55.810
use reducer 希望就是来自于这个redux的思想

12:56.810 --> 12:59.810
ok 好 剩下几个的话我就直接拿过来了

13:00.810 --> 13:02.810
剩下几个 我看这边剩几个

13:03.810 --> 13:05.810
有一个old 直接拿过来

13:05.810 --> 13:11.180
剩下的话基本就是都是一样的 你只要把一个搞懂了

13:12.180 --> 13:14.180
把一个搞懂了 其他都是一样的

13:15.180 --> 13:17.180
保存一下 保存了之后 然后加这边来看一下

13:18.180 --> 13:22.180
这边加 对不对 这边比如说我这边要增加两个

13:23.180 --> 13:25.180
这不就两个 对不对 这个是减

13:26.180 --> 13:30.180
这个是整数 这个是old old是基数 是吧 基数

13:31.180 --> 13:35.180
比如说我们这边的话 现在加一个e

13:35.180 --> 13:40.180
加一个e 基数 基数的话再加这边 加3 走 现在是可以加

13:41.180 --> 13:44.180
但是你再加加不动了 因为你现在是什么 我说 对不对

13:45.180 --> 13:46.180
这个是一步的增加

13:47.180 --> 13:51.180
ok 好 那这个的话就是我们这边这个use reducer

13:52.180 --> 13:55.180
其实代码并不难 你主要其实你关注的重点主要在哪里呢

13:56.180 --> 13:58.180
主要是在这一块 主要是这一块

13:59.180 --> 14:01.180
这一块让他这个use reducer 接受哪些参数

14:01.180 --> 14:05.180
他首先第一个是接受一个什么 接受一个这个reducer

14:06.180 --> 14:10.180
对不对 这个是第一个参数 第二个参数是什么 第二个参数是不是你的初始值

14:11.180 --> 14:15.180
对不对 好 那既然返回这个初始状态和一个dispatch

14:16.180 --> 14:20.180
然后后期要改的时候都是通过什么 都是通过dispatch 那进修改

14:21.180 --> 14:27.180
后期 后期要修改值的时候

14:27.180 --> 14:35.180
都是通过什么 通过dispatch来进行修改

14:36.180 --> 14:39.180
ok 好 我把这个例子 我把它放到我们的笔记里面

14:41.180 --> 14:44.180
放到笔记里面 这个例子你是可以直接跑起来的

14:45.180 --> 14:48.180
直接创建一个react这个新的项目 把它跑起来就可以了

14:49.180 --> 14:51.180
这是首先这个关于这个reducer

14:52.180 --> 14:54.180
use reducer 它的一个基本的使用

14:54.180 --> 14:57.180
那它还接收第三个参数 对不对

14:58.180 --> 15:06.180
这个use reducer 还接收什么 还接收第三个参数

15:08.180 --> 15:12.180
它这个第三个参数是什么 第三个参数的话是一个

15:12.180 --> 15:24.820
惰性初始化函数 第三个参数是一个惰性初始化函数

15:27.190 --> 15:38.190
就是你可以做额外的初始化 简单理解 就是可以做额外的初始化工作

15:39.190 --> 15:42.190
比如说我们这边我们举个例子 比如说还是回到我们这边

15:42.190 --> 15:45.190
回到我们这边 这边的话 这个是我们的初始状态

15:46.190 --> 15:48.190
这个是我们的reducer 然后这样我们这边再来写一个我们的这个惰性

15:49.190 --> 15:52.190
惰性初始化函数

15:53.190 --> 15:57.190
那比如说我这边写一个function

15:58.190 --> 16:00.190
对吧 那首先是个函数 这个函数然后接下来你这边就可以

16:01.190 --> 16:05.190
把这个函数做为这个use reducer的这个第三个参数

16:06.190 --> 16:10.190
对不对 好 这个参数的话 它这边就接收一个什么

16:10.190 --> 16:12.190
接收一个你这边的这个初始值

16:13.190 --> 16:14.190
initial state

16:15.190 --> 16:19.190
接收 接收了之后在这边你可以返回什么呢 重新返回新的初始化状态

16:21.190 --> 16:27.190
重新返回新的初始化状态 就本来我们初始化状态是什么

16:28.190 --> 16:31.190
抗的对的值是零 对不对 好 那现在的话我这边

16:32.190 --> 16:37.190
我给你返回一个新的状态 新的状态在这边抗着我初始值是什么呢 初始值是一百

16:38.190 --> 16:39.190
我们这边看一下

16:40.190 --> 16:45.190
一开始是不是就从一百开始了 对不对 那有同学说那你这个有啥意义呢

16:46.190 --> 16:50.190
那你还不如就一开始就把它设置成一百 不是这样子的 就有些时候我们这边

16:51.190 --> 16:55.190
你初始化状态是这个样子 好 然后接下来的话我这边比如说基于你的这个初始化状态

16:56.190 --> 17:03.590
我做一些操作 对不对 有些时候有些时候我们需要

17:03.590 --> 17:09.590
基于什么呢 基于之前的初始化状态

17:10.590 --> 17:14.590
初始化 初始化状态

17:15.590 --> 17:18.590
然后做一些 做一些操作

17:19.590 --> 17:22.590
然后返回什么呢 返回新的初始化值

17:24.590 --> 17:28.590
那就处理后的 新的处理后的初始化值

17:28.590 --> 17:32.590
初始化值 比如说我这个我这个是基于什么呢 基于之前的这个

17:33.590 --> 17:37.590
initial state 对吧 它里面有个什么 它里面有个count

17:38.590 --> 17:44.590
它里面有个count 成一个是对不对 基于之前的刷新一下

17:46.590 --> 17:47.590
好 这边

17:48.590 --> 17:53.590
这边count 我这边是零 我这边把它设置成一

17:54.590 --> 18:00.590
设置成一 你看这边什么就是实 对不对 就是啊 这就是关于这个init

18:01.590 --> 18:04.590
好 把这个放到 我就放到笔记里面啊

18:09.720 --> 18:13.720
好 这边你可以写这么一个多新化初始化函数

18:14.720 --> 18:21.720
然后接下来 接下来再使用UserReducer的时候

18:21.720 --> 18:27.720
这个函数就可以作为什么 是不是第三个参数

18:28.720 --> 18:31.720
传入 对不对 就像我们这边一样

18:32.720 --> 18:35.720
作为第三个参数 传入

18:36.720 --> 18:42.720
好 这是关于这个整个基本用法 主要介绍一下这个关于UserReducer

18:43.720 --> 18:48.720
它该怎么用 基本上就和之前的那个Redux思想是一样的

18:49.720 --> 18:54.720
但凡你理解了这个Redux的思想 你用这个的话一点问题都没有 好不好

18:55.720 --> 19:03.720
好 然后这个了解了之后 然后接下来我们就来看一下啊 来看一下各自他们的这个mount阶段和这个update阶段

19:04.720 --> 19:08.720
他们在做什么 好 我们首先的话来看一下什么呢 首先来看一下UserState

19:09.720 --> 19:12.720
UserState的这个mount阶段

19:12.720 --> 19:13.720
mount阶段

19:14.720 --> 19:19.720
这UserState的mount阶段我们之前是不是已经看过了 我上节课是不是就看过了

19:20.720 --> 19:24.720
对上节课我们就是拿这个UserState举的例子 这边我们再把它拿过来看一下吧

19:27.610 --> 19:32.610
好 这个是mount阶段 mount阶段首先这里拿到什么 是不是拿到hook对象

19:33.610 --> 19:36.610
对不对 让它这边判断什么 判断你这边传的是否是函数

19:37.610 --> 19:40.610
可不可以啊 他会判断你是否传的是函数 如果是函数的话他会执行这个函数

19:40.610 --> 19:45.610
执行这个函数之后拿到什么 拿到你初始化的这个状态 对不对

19:46.610 --> 19:53.610
好 然后接下来这边这边呢就是初始化这个hook对象 初始化他的这个memoState以及他的这个q

19:54.610 --> 19:59.610
ok 最后的话这边返回什么呢 返回hook的memoState以及这个dispatch

20:00.610 --> 20:01.610
dispatch就是什么呢 dispatch就是你这边

20:02.610 --> 20:05.610
dispatch就是你这边这个函数

20:06.610 --> 20:07.610
怎么样啊 这个dispatch

20:08.610 --> 20:09.610
dispatch就是修改

20:10.610 --> 20:14.240
dispatch就是

20:16.240 --> 20:20.240
就是用来修改什么呢 修改这个状态

20:21.240 --> 20:23.240
状态的这个方法

20:24.240 --> 20:29.240
ok 你让他这边作为第二个参数 把它返回 第一个参数是hook.memoState

20:30.240 --> 20:34.240
hook.memoState来自于哪里 来自于这个initialState 是不是就这里

20:35.240 --> 20:39.240
对 就你传入的这个字 这个就是整个mount的这个原码

20:40.240 --> 20:41.240
就mount state的原码

20:42.240 --> 20:47.240
ok 这是user state还是比较简单啊 这个还是比较简单

20:48.240 --> 20:51.240
然后接下来我们来看一下这个user reducer

20:53.240 --> 20:55.240
reducer的这个mount阶段

21:00.860 --> 21:02.860
好 我们这边呢把这个user reducer

21:03.860 --> 21:04.860
mount阶段把它拿过来

21:05.860 --> 21:10.540
看一下

21:11.540 --> 21:13.540
首先的话 这边拿到这个hook对象

21:13.540 --> 21:18.540
拿到之后 然后接下来这边 这边判断什么呢 判断你的这个init 有没有

21:19.540 --> 21:24.540
如果这个init有的话 会把什么 会把它传给这个init

21:25.540 --> 21:30.540
然后加计算出什么 计算出这个出使这个字 和刚才介绍的时候就一样的

21:31.540 --> 21:35.540
对不对 好 如果没有没有的话 那接下来就直接他等于这个出使的这个字

21:36.540 --> 21:40.540
ok 那后面的话基本上都和什么 后面基本上就和那个

21:40.540 --> 21:43.540
那个那个那个那个那个user state

21:44.540 --> 21:49.540
mount state 基本上就和mount state是不一样的啊 这边是一个q 那就这边dispatch

21:50.540 --> 21:54.540
对不对 好 首先我们这边呢 我们对比这个总结一下啊 总结一下

21:55.540 --> 22:06.750
总结一下 这个mount state和什么呢 和mount

22:07.750 --> 22:09.750
叫mount什么 mount reducer

22:10.750 --> 22:11.750
mount reducer

22:12.750 --> 22:14.750
reducer的这个大体

22:16.750 --> 22:23.750
大体流程是一样的 对不对 那他们有没有这个不一样的地方呢

22:24.750 --> 22:26.750
这边的实际上有啊 有 你看这里

22:28.750 --> 22:32.750
这里的话 他这边在进行一个更新的时候 你看他这边这个q

22:33.750 --> 22:34.750
这个这个是mount state

22:35.750 --> 22:38.750
mount state 这边的这个last render render的这个reducer

22:39.750 --> 22:42.750
对呢 是什么 对呢 是这个basical state reducer

22:43.750 --> 22:51.750
而你这边 这边这个last render reducer对呢 是什么 对应的是用户传入的reducer

22:52.750 --> 22:57.750
对不对啊 但是有一个区别 但是有一个区别

22:58.750 --> 23:02.750
在于什么呢 就是你的mount state的这个q

23:03.750 --> 23:07.750
里面的什么的这个last

23:10.130 --> 23:16.130
这个last render的reducer对应的是什么 是不是有一个叫做basical

23:17.130 --> 23:18.130
basical state reducer

23:20.570 --> 23:27.570
而而这个mount这个reducer的这个q

23:28.570 --> 23:38.200
里面的什么这个last render的reducer对应的是什么呢 对应的是

23:38.200 --> 23:45.200
这个开发者 自己传入的reducer

23:46.200 --> 23:50.200
对不对 那说明了一个什么问题 想想说明了什么问题

23:51.200 --> 23:56.200
说明user state他的本质就是什么 就是user reducer

23:57.200 --> 24:02.200
对不对啊 这里说明了一个问题 什么呢

24:02.200 --> 24:09.200
就你user state的本质就是user reducer

24:10.200 --> 24:23.200
只不过在这个user state内部 会有一个什么 会有一个内置的内置的这个reducer

24:24.200 --> 24:27.200
对不对 他就不像你这个user reducer

24:28.200 --> 24:29.200
你这边因为你第一个参数传的就是reducer

24:29.200 --> 24:33.200
对不对 如何进行这个计算 取决于你传入的这个reducer

24:34.200 --> 24:38.200
而这边这边用的是什么 用的是这个basical

24:39.200 --> 24:44.200
这个state reducer 用的是这个对不对 OK

24:45.200 --> 24:52.200
好 那这个这个这个basical state reducer他对应了代码如下

24:52.200 --> 25:01.460
对应的代码如下 他这个很简单 他这边其实也就一个

25:02.460 --> 25:09.930
对应的是这个代码 这边接受state action 然后将这边进行一个这个处理

25:11.930 --> 25:14.930
但他这边这个这个参数啊 这个参数呢 后期在用的时候

25:15.930 --> 25:19.930
他这边会传入他的这个状态 以及这个action 他会有一个默认的

25:20.930 --> 25:24.930
会有一个默认的这个字 OK 总之你这边的话 你这边就能够看出

25:24.930 --> 25:27.930
这边就能够看出 就是你的这个user state

25:28.930 --> 25:31.930
他这边的话 这边 他是默认用一个这个reducer

25:32.930 --> 25:35.930
而这边的话 他是什么 用的是你这个开发者传入的reducer

25:36.930 --> 25:39.930
说本质两个东西实际上是一样的 你可以这么说

25:40.930 --> 25:49.500
可以说这个user state 本质就是user reducer的一个什么呢 简化版

25:51.500 --> 25:54.500
没有没有 他本质就是user reducer的一个简化版

25:55.500 --> 26:01.500
好 这是关于这个mount阶段 好 接下来的话 我们来看一下这个update这个update阶段

26:02.500 --> 26:09.500
update阶段我们这边也是啊 同样的 这边的话是这个user state的这个update阶段

26:10.500 --> 26:22.600
以及什么呢 以及这个user reducer的这个update阶段啊 这两个

26:23.600 --> 26:27.600
好 我们首先的话 先来看这个user state

26:28.600 --> 26:32.600
user state的话 那他这边就更省事了 就更省事了

26:33.600 --> 26:38.600
他直接就是调什么 是不是直接就是调这个update reducer

26:39.600 --> 26:45.600
是不是直接调他的呀 对不对 他的这个update state 实际上就是调的什么update reducer

26:46.600 --> 26:52.600
所以之前的话 我说他是他的这个user state 本质就是这个user reducer的一个这个简化版

26:53.600 --> 26:58.600
啊 如果你还抱有怀疑的话 那你看这儿的话 你就基本就一点都不怀疑了 对不对

26:59.600 --> 27:03.600
他内部其实就是调的什么 这个调的就是这个update reducer

27:04.600 --> 27:09.600
好 然后接下来我们来看这个啊 来看这个user reducer

27:10.600 --> 27:16.600
他的这个update update阶段 那他对呢就是什么 他对呢就是应该是update reducer

27:17.600 --> 27:28.150
对不对啊 把这个拿过来啊 你看这里 这里拿了首先拿到什么呢 拿到对应的这个hook对象

27:29.150 --> 27:33.150
啊 拿到最对应的这个更新对立啊 这个是拿到对应的更新对立

27:34.150 --> 27:40.530
拿到对应的对应的更新对立

27:40.530 --> 27:43.530
更新对立 更新对立

27:44.530 --> 27:47.530
啊 这边是拿到什么 是吧 拿到你的这个reducer

27:48.530 --> 27:54.530
对 拿到reducer 好 然后接下来这边 这边他会根据这个update列表去计算这个state的这个值

27:55.530 --> 27:56.530
啊 会计算这个新的

27:58.530 --> 28:04.530
新的这个state值啊 这边的话这个代码量比较多啊 这不是说我简单就省略了一两句

28:05.530 --> 28:08.530
这这边呢 其实代码量是比较多的啊 这里有一套

28:09.530 --> 28:14.530
完整的关于update的计算流程

28:15.530 --> 28:21.530
啊 这个的话我们会后面 后面我们会这个专门有一些课 讲他的这个update

28:22.530 --> 28:25.530
他如何进行这个批量的这个进行修改的 ok

28:26.530 --> 28:31.530
我们这边先把它省略了 省略了之后 然后假设这一步完了之后 他就把这个新的这个state

28:32.530 --> 28:36.530
已经计算出来了 计算出来之后 让大家这边干嘛 这边是不是返回

28:37.530 --> 28:39.530
对不对 这边返回 ok

28:40.530 --> 28:44.530
好 这是关于这个update reducer ok

28:45.530 --> 28:49.530
好 然后完事之后 然后下我们这边来看一下这个整体解答啊 这边是题目

28:51.530 --> 28:56.530
use state和use reducer有什么样的这个区别 你现在是不是自己都可以总结出来了

28:57.530 --> 29:03.530
对不对 use state它本质上就是什么 就是use reducer的一个解化版本

29:03.530 --> 29:08.530
对不对 好 我这边让我把这个参考答案 把它过来

29:12.180 --> 29:13.180
好 放到这里

29:14.180 --> 29:19.180
啊 你看 use state本质上就是一个简化版的use reducer

29:20.180 --> 29:25.180
啊 再加上你这边可以从什么呢 可以从mount阶段和update阶段分别去说一下

29:26.180 --> 29:32.180
啊 mount阶段的话这个use state它的这个nust rendered reducer 它是这个basical state reducer

29:32.180 --> 29:39.180
然后这个use reducer它的这个nust rendered reducer 它对呢就是用户传入的

29:40.180 --> 29:42.180
对不对 传入的这个reducer啊

29:43.180 --> 29:49.180
好 让update阶段update阶段的话 你这个update state直接调用了就什么

29:50.180 --> 29:55.180
直接调用的就是update reducer ok 这是关于两者的这个区别

29:56.180 --> 30:00.180
啊 这就是关于这个use state和use reducer

30:00.180 --> 30:06.180
大家下来可以自己再看一下 好吧 好 这期课的话就先到这里啊 再见

