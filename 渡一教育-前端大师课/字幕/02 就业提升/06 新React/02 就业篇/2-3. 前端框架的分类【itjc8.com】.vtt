WEBVTT

00:00.180 --> 00:03.180
ok 这节课的话 我们来看一下这道题

00:04.540 --> 00:11.100
现在前端框架的话 它不仅仅是reactview 目前的话还出现了什么呢 出现了像这个sweat

00:11.580 --> 00:20.260
solid 啊 之类的这种前端框架 那么你觉得这些新框架相比这个react和view 它有什么样的这个区别

00:21.540 --> 00:26.620
像这样 就这种面试题啊 实际上它的这个答案是比较宽泛的

00:27.140 --> 00:35.620
它没有说有一个这个确定的这个答案啊 你回答的时候是可生可浅的 对不对啊 这个就完全是看你自己

00:36.020 --> 00:43.380
自身对这个整个这个框架的一个理解啊 说像这种题的话 实际上也是最容易出彩的

00:43.740 --> 00:46.820
就如果你回答的好的话 是非常容易出彩的

00:47.380 --> 00:53.020
ok 而说这节课的话 然后谢老师尝试用 就是从其中的一个角度

00:53.540 --> 01:00.740
来尝试来讲解 就是现代前端框架 啊 包括现在出现了这么一些这个新框架啊 究竟有什么样的这个区别

01:01.300 --> 01:06.220
以及有 现在有这么多这个前端框架啊 如何进行一个分类

01:06.820 --> 01:14.500
ok 好 首先的话 我们这边我要讲一个概念 什么概念呢 这个概念的话 实际上是之前这个初中的时候

01:15.020 --> 01:18.340
学的一个这个代数的一个知识 这个叫做自变量

01:19.660 --> 01:20.820
和音变量

01:21.820 --> 01:30.220
ok 啊 为什么要讲这个呢 原因很简单 就是我们现代前端框架 他有一个非常重要的特点

01:30.620 --> 01:36.140
就是什么呢 就是基于状态的生灵史学这个渲染啊 现代

01:36.940 --> 01:37.740
前端框架

01:38.660 --> 01:41.260
有一个非常重要的特点

01:42.140 --> 01:50.780
这个我们之前在讲那个第一节课的时候也说过对吧 那就是基于什么呢 基于状态

01:51.540 --> 01:52.860
的这个生灵史学

01:55.580 --> 01:58.500
啊 那你这边如果要概括的话啊 如果

02:00.100 --> 02:05.500
如果要概括的话 可以使用一个公式

02:06.820 --> 02:10.860
什么公式呢 那就是ui 等于这个f

02:12.220 --> 02:13.820
f 然后state

02:16.290 --> 02:18.370
ok 那这个state

02:19.410 --> 02:23.650
state是什么 state很明显是不是就是当前这个试图的一个状态

02:24.930 --> 02:29.770
当前试图的一个状态啊 然后f

02:30.650 --> 02:33.170
f代表什么呢 f代表框架

02:34.490 --> 02:36.890
内部的一个运行机制

02:38.570 --> 02:43.370
好 那最终最终这个ui UI的话代表了什么呢 代表的就是数组环境

02:44.610 --> 02:46.650
数组环境的试图描述

02:48.170 --> 02:53.090
ok 那我这边的话 我把我的这个状态传到这个f里面

02:53.810 --> 03:01.090
传到这个f里面之后 人家最终的话 他就会给我计算一个什么呢 计算出一个最新的一个试图的一个描述

03:01.650 --> 03:09.250
一个ui的描述 那么我们这边的话 实际上这个的话就和初中的一个数学知识啊 非常的相似

03:10.770 --> 03:15.930
啊 这里和初中初中的一个这个数学

03:16.730 --> 03:22.320
代数知识 代数啊 数学代数知识

03:23.040 --> 03:31.620
非常的相似啊 实际上我们之前的话 我没讲过 什么呢 就现在的话 整个react

03:32.140 --> 03:39.580
他是不是就从以前这种面向对象的一种这种变成模式 慢慢转入了什么 是不是转入了这种含书式的这种变成的模式

03:40.140 --> 03:47.300
对不对 你看这里 这里的话ui等于f state 这里其实就是什么 实际上就是数学里面这个代数

03:47.980 --> 03:53.340
他里面的一个这个概念 他和这个数学这个数学里面的这个代数是非常相似的

03:54.580 --> 03:58.500
那比如说我们这边啊 比如说你考虑这边 有这么一个等式

03:59.620 --> 04:06.660
2x加1等于y啊 比方你考虑这个等式 那这里的话x的变化

04:08.020 --> 04:13.300
x的变化会导致什么 会导致 y的变化

04:14.820 --> 04:20.300
对不对啊 然后这个x就被称之为自变量

04:21.300 --> 04:26.180
而这个y就被称之为什么的 隐变量

04:28.330 --> 04:31.610
对不对 你看和这儿是不是一样的 那这边的话 我们的这个state

04:32.210 --> 04:35.130
他就是一个什么 他是不是就是一个自变量

04:35.930 --> 04:41.770
而这个uiui的话 你state一变 那你这个ui最终计算出来的ui是不会也会发生变化

04:42.170 --> 04:45.490
那ui是不是就是一个隐变量 对不对啊 内比

04:46.490 --> 04:52.610
内比上面ui的公式ui的这个公式

04:53.610 --> 04:56.690
state就是什么 就是自变量

04:58.410 --> 05:04.330
state的变化会导致什么 会导致最终

05:05.530 --> 05:14.610
计算出来的ui发生变化ui在这里就是什么 隐变量

05:15.770 --> 05:20.050
对不对ui就是隐变量啊 那么在我们的这个react里面

05:20.370 --> 05:25.530
react里面的话 他这个从 我看是react好像是16版本开始

05:26.290 --> 05:28.010
是不是提供了这个很多的这个hook

05:29.250 --> 05:32.450
对不对啊 目前在这个react中

05:33.370 --> 05:36.890
react中有很多这个hook

05:37.650 --> 05:47.890
例如 例如比如说这个const x set x等于一个这个UserState

05:49.930 --> 05:51.730
比如这边这个初始字0

05:52.850 --> 05:58.210
ok 那这边的话 实际上也是什么呢 也是涉及到了这个 这里的这个概念

06:00.920 --> 06:05.880
好 比如说上面这个hook 上面这个hook我们就是定义那个什么呢 我们就是定义那个自变量

06:06.880 --> 06:07.880
比如上面的代码

06:08.920 --> 06:13.680
比如上面的代码 我们就是定义了

06:15.160 --> 06:17.640
定义了一个自变量

06:18.520 --> 06:25.280
对不对 好 我们把这个代码的话 我们再把它放到什么呢 再把它放到那个就是主键里面啊 比如这边方形

06:26.080 --> 06:26.440
app

06:28.360 --> 06:30.240
ok 好 把这个我们把拿过来

06:31.240 --> 06:37.360
来 拿过来之后 然后接下来我们这边return return一段这个gsx 这个div

06:39.280 --> 06:43.800
好 然后在这里这里的话是x 好 然后在这边的话给他一个

06:45.080 --> 06:49.000
点击事件 啊 点击事件之后 然后这边点击之后 我们这边

06:50.000 --> 06:54.360
执行这个set x 啊 这边的x 加一

06:55.200 --> 07:01.480
那你看这边 这边的话 我们使用的这个user state 他实际上就是什么 他就其实就是一个自变量

07:01.960 --> 07:04.560
而他的改变是不会导致这个ui 的这个变化

07:05.320 --> 07:10.120
对比方把这个x一变 那你这个ui 是不会就会发生变化 那你这边这一块是不是就是这个

07:10.520 --> 07:15.460
音变量 对不对啊 上面的

07:17.420 --> 07:21.380
上面的user state啊 这个hook

07:22.380 --> 07:29.540
可以看作是定义了一个自变量 好 要自变量

07:30.460 --> 07:31.060
一变化

07:32.620 --> 07:37.060
就会导致 导致什么呢 就是依赖

07:38.260 --> 07:40.900
他的这个音变量

07:42.140 --> 07:42.900
音变量

07:44.060 --> 07:44.660
发生变化

07:46.180 --> 07:47.380
那么在上面的例子中

07:48.260 --> 07:51.900
在上面的例子中 这个返回的ges差

07:53.140 --> 07:54.260
返回的ges差

07:56.020 --> 08:01.500
ges差所描述的这个ui 就是什么 是不是就是音变量

08:02.980 --> 08:08.060
对不对 我回头我这边x一变 那接下来你这个ui 你需要重新的去描述

08:09.580 --> 08:14.900
好 接下来的话 我们来看一下这个音变量

08:15.420 --> 08:18.380
音变量的话 实际上这边的话 又可以分成两类

08:19.980 --> 08:20.780
音变量

08:21.500 --> 08:27.500
又可以分为两类 哪两类呢 一个是没有副作用

08:28.740 --> 08:35.940
没有副作用的音变量 另外一个是有副作用的音变量

08:36.860 --> 08:41.140
ok 好 比如说举个例子 我们先来看一下这个没有副作用的音变量

08:43.820 --> 08:47.500
好 没有副作用的音变量 比如说什么呢 比如说这个user memo

08:48.500 --> 08:49.500
在react中

08:56.620 --> 08:57.820
这个user memo

08:59.220 --> 09:02.620
user memo我们之前是不讲过的 对不对 user memo就是

09:03.620 --> 09:04.180
定义

09:05.020 --> 09:12.220
定义一个没有副作用 没有副作用的音变量

09:13.100 --> 09:18.300
比如说我们这边我们来回顾一下 比如说你user memo比我们这边const一个比较y

09:18.940 --> 09:20.620
等于一个user memo

09:21.620 --> 09:24.420
好 这边第一个是接受一个函数

09:26.020 --> 09:33.100
啊 这边呢这个x 成一个2 加一个1 然后加这边依赖像是这个x

09:33.900 --> 09:39.220
ok 你看比如这边 这边的话我们使用什么呢 使用这个user memo

09:39.700 --> 09:42.940
就定义了一个什么呢 定义了一个没有副作用的音变量y

09:45.140 --> 09:46.140
在上面的代码中

09:47.140 --> 09:52.300
上面的代码中 我们使用什么呢 使用user memo

09:53.820 --> 09:56.580
定义了一个没有副作用

09:58.460 --> 10:00.940
没有副作用的这个音变量 y

10:02.100 --> 10:08.900
对不对啊 y 的值 y 的值取决于什么 是不是取决于x的值

10:09.660 --> 10:10.900
对不对 x 是值

10:11.940 --> 10:12.940
x 是的值

10:13.740 --> 10:19.900
一变化 是不是 y 的值 y 的值也会跟着变化

10:21.660 --> 10:27.220
对不对 所以y很明显是一个什么 是不是很明显是个音变量 x 是一个什么 x 是不是是一个质别量

10:27.900 --> 10:32.620
对不对啊 这是没有副作用的音变量 好那接下来还有什么呢 还有就是有副作用

10:33.780 --> 10:37.980
有副作用的音变量 这个的话其实咱们也学过的

10:38.980 --> 10:41.740
什么呢 就是你这个user effect

10:43.140 --> 10:47.980
direct可以使用user effect

10:49.100 --> 10:49.900
来定义

10:51.660 --> 10:56.100
来定义一个有副作用的这个音变量

10:57.460 --> 10:59.300
ok 那比如说我们这边还是举个例子

11:01.220 --> 11:05.180
比如这边 这边的话你这里user effect

11:06.180 --> 11:13.180
啊 比如这边 这边的话是他做什么事情呢 他把这个 document 点这个title

11:14.980 --> 11:21.500
点这个点title改成一个x 啊 这边依赖于什么呢 依赖于x的值

11:22.580 --> 11:27.580
ok 那你看上面的代码 上面的代码他就是一个有副作用的这个音变量

11:28.900 --> 11:37.510
啊 上面的代码 上面的代码他依赖于什么 依赖于

11:38.390 --> 11:40.630
自变量x的变化

11:42.270 --> 11:44.710
对不对 当这个x

11:45.830 --> 11:54.830
发生变化的时候 会干嘛 会修改页面的是标题啊 这个是不是就是一个副作用操作

11:55.390 --> 11:59.790
对不对 这就是一个副作用操作

12:00.590 --> 12:06.750
ok x同样是自变量 那x的变化会导致什么呢 会导致你这边这个副作用

12:07.310 --> 12:15.270
啊 这边这个 执行这个函数 那执行这个函数他就是一个副作用的这个操作 所以他是一个有副作用的这个音变量

12:17.310 --> 12:23.870
好 那么接下来的话 我们来总结一下哈 那么接下来 我们来总结一下

12:25.670 --> 12:34.590
总结一下什么呢 就是自变量的这个变化 我们前面讲了 自这个自变量的变化会导致什么 是不是会导致这个音变量

12:34.990 --> 12:42.910
对不对 x是自变量 自变量的变化会导致这个音变量发生变化 好 那接下来的话 我们这边的话讲了两种啊 这边

12:43.430 --> 12:51.630
没有副作用的音变量 有副作用的音变量 那回头你这边总结一下 整个这个自变量的变化会导致什么

12:51.950 --> 12:53.750
所以会导致有这么三种情况

12:55.270 --> 12:58.150
会导致就是三种情况

12:59.830 --> 13:01.870
三种情况的这个音变量

13:02.870 --> 13:04.550
音变量发生改变

13:06.920 --> 13:14.200
发生改变 哪三种呢 首先第一 第一个是自变量的这个变化

13:15.200 --> 13:17.840
导致什么呢 导致ui音变量

13:18.960 --> 13:19.440
是变化

13:20.600 --> 13:24.040
对不对 第二个是什么呢 第二个是自变量的

13:24.920 --> 13:28.320
变化 导致什么 导致这个无副作用

13:30.000 --> 13:32.400
无副作用

13:33.360 --> 13:34.280
的这个音变量

13:35.280 --> 13:36.160
音变量

13:37.120 --> 13:46.540
发生变化 对不对 好 最后一个自变量的这个变化

13:47.340 --> 13:49.340
导致什么呢 导致有副作用

13:50.780 --> 13:53.020
有副作用的音变量

13:54.060 --> 13:56.620
发生变化 是不是就这三种情况

13:57.540 --> 14:01.580
对不对 你回头你再看一下啊 你把前面这些看一下 是不是就这三种情况

14:02.460 --> 14:05.260
对不对 好 那这三种情况呢 我再分别来取个例子吧

14:06.260 --> 14:12.060
好吧 这边我准备好了这个代码 拿过来啊 首先这边第一个 自变量的变化导致ui的变化

14:12.580 --> 14:15.740
啊 这个其实就是刚才那个例子了 这就前面这个例子

14:16.940 --> 14:18.860
对不对啊 你这边这个自变量

14:20.180 --> 14:25.900
这个纳姆 它的变化会导致什么呢 会导致整个ui 你这边这个音变量就是ui 对不对

14:26.420 --> 14:34.780
好 然后接下来的话 这里无副作用啊 没有副作用就是什么 是不是 use memo

14:36.260 --> 14:37.500
对不对 就刚才取了例子

14:37.820 --> 14:43.660
啊 use memo 啊 比如这边 这边你这个纳姆纳姆的变化会导致什么 是不是导致这个fixed

14:43.820 --> 14:49.220
纳姆 会导致这个变化 对不对 这个是音变量啊 这个的变化又会导致什么

14:50.020 --> 14:54.740
所以ui这个音变量的这个变化 对不对 你看它是一层啊 一层扣一层的

14:55.540 --> 14:59.860
对不对 你这边这个fixed纳姆 这个音变量一变化了 那接下来我的这个ui

15:00.660 --> 15:01.620
是不是也会发生变化

15:02.580 --> 15:05.580
对不对 好 然后接下来这边这边是这个

15:06.020 --> 15:11.020
呃 有副作用的 有副作用的话 这边呢 我们就是以这个use effect来举例

15:12.740 --> 15:19.860
ok 啊 比较use effect 比方我这边这个nam 这个是自变量啊 这个自变量一发生改变了 那接下来我这个的话

15:20.340 --> 15:23.260
这要重新执行 这个就是一个副作用的一个操作

15:24.020 --> 15:29.900
ok 好 首先呢 大家的话 把这个自变量和音变量 这个音变量啊

15:30.380 --> 15:36.500
啊 先把这个概念啊 我这边的话我建议你可以把这个视频暂停一下啊 可以把这边看一下

15:37.460 --> 15:44.060
ok 看一下这个可能对于有些同学来讲是一个全新的概念啊 之前从来没听过什么自变量和音变量

15:44.860 --> 15:46.460
但这个的话实际上你早就学过了

15:47.420 --> 15:52.620
以上初中的时候你学数学的时候其实就学过了 对不对 你这边这个代数的这个姿势

15:53.100 --> 15:56.500
ex的变化就会导致y的变化 你看和这边是不是一模一样

15:57.380 --> 15:59.900
对不对 state的变化会导致与外的变化

16:01.060 --> 16:09.140
ok 那么为什么要讲这个呢 为什么要讲这个呢 原因很简单 因为回头我们这边要讲的这个框架的分类

16:09.940 --> 16:10.860
就是基于这个

16:12.220 --> 16:18.180
框架的分类啊 我们其实就是基于这个自变量和音变量

16:18.780 --> 16:27.210
ok 好 上面我们介绍了这个自变量和音变量

16:27.850 --> 16:32.010
啊 那这个state实际上就是什么 是不是自变量

16:33.370 --> 16:36.730
对不对 然后自变量的这个变化

16:37.410 --> 16:42.090
直接或者间接的什么 是不是改变了ui

16:44.390 --> 16:48.710
改变了ui 为什么说有可能间接呢 比如你看这种方式

16:49.430 --> 16:54.550
这种方式的话 你这个自变的变化实际上是导致了什么 是不是导致了这个fixed num

16:55.430 --> 17:01.910
就这个音变量是发生变化 对不对 但这个音变量的变化又间接导致了什么 是不是导致了ui的变化

17:02.710 --> 17:08.630
对不对 说它这边它直接或者间接的导致了这个ui的这个变化啊

17:09.350 --> 17:14.950
好 那你这个被改变了ui 实际上是什么呢 实际上它只是对这个

17:15.670 --> 17:20.870
你真实的这个ui的一个描述 它并非就是实际渲染出来的ui 这个要讲清楚

17:21.830 --> 17:28.870
好 然后接下来这边你自变的变化导致了这个ui的变化 那我们整个这个公式啊 它这边实际上可以分成两个步骤

17:30.390 --> 17:33.750
上面的公式 哪个公式就指的是这个公式

17:34.630 --> 17:39.030
这个公式这个公式的话 实际上还可以分成两个步骤

17:40.630 --> 17:46.070
上面的公式实际上还可以分为两个步骤

17:47.030 --> 17:51.430
哪两个步骤呢 首先第一个根据自变量

17:52.390 --> 17:54.870
stat 计算出

17:55.910 --> 17:58.150
计算出ui的变化

17:59.430 --> 18:03.190
第二步 根据ui的这个变化

18:03.750 --> 18:10.550
然后接下来执行具体的这个数组环境的这个api

18:11.270 --> 18:19.270
ok 这个刚说了啊 就你这边这边你f这个stat 传进去对吧 通过这个f 让人家这边计算出这个ui

18:19.510 --> 18:20.710
这个的话它只是什么呢

18:21.510 --> 18:26.150
只是一个试图的描述 不是说真实渲染出来的那个那个ui

18:26.710 --> 18:30.950
只是对这个试图的描述 接下来的话你这边实际上还需要第二步

18:31.270 --> 18:33.350
第二步的话才是根据你这个数组环境

18:34.070 --> 18:38.310
你究竟是什么样的这个数组环境去执行什么样的这个api

18:38.950 --> 18:46.310
ok 好 那你这边的话比如说啊 比如说举个例子 比如说以我们最熟悉的这个浏览器为例啊

18:48.070 --> 18:48.950
前段工程师

18:49.910 --> 18:55.750
工程师最熟悉的浏览器啊 为例

18:57.430 --> 18:59.670
为例啊 那么第二个步骤

19:00.550 --> 19:07.750
第二个步骤就是执行什么 执行动物相关 api

19:09.270 --> 19:15.030
对不对啊 那比如说你的什么啊 喷的敲的呀啊 比如说你的这个remove敲的呀

19:15.750 --> 19:23.350
是不是主要就是这个步骤对不对啊 那对于这个步骤来讲 其实不同的框架实现基本上是一样的

19:24.550 --> 19:28.950
对于这个步骤来讲不同的框架

19:30.710 --> 19:33.670
实际上实际上实现

19:34.870 --> 19:35.910
基本是相同的

19:36.870 --> 19:38.870
是相同的

19:39.510 --> 19:46.470
ok 无论你什么框架 无论你是react也好 还是view也好啊 还是新出的那些啊 什么solid啊swit这些

19:46.950 --> 19:48.150
你最终的话 你要干嘛

19:49.030 --> 19:55.750
你是不要操作这个多么相关的这个api 对不对啊 比如这个opener敲的啊 然后insert before

19:56.230 --> 19:57.910
remove敲的 你要执行这些api

19:58.390 --> 20:01.110
所以这个就是不同的框架 这一步基本是相同的

20:01.590 --> 20:04.790
差别的话 主要是什么呢 主要是体现在步骤1上面

20:05.590 --> 20:07.670
没有没有啊 这个步骤

20:09.110 --> 20:09.590
不能

20:11.030 --> 20:15.590
作为什么呢 不能作为框架分类的这个依据

20:16.550 --> 20:18.390
ok 然后接下来差别

20:19.270 --> 20:23.110
主要体现在这个步骤1上面

20:25.660 --> 20:31.980
ok 主要体现在这个步骤 就我这个不同的这个框架 它是如何计算出ui的这个

20:32.620 --> 20:33.660
这个变化的

20:34.620 --> 20:40.780
它的这个计算的方式不同 从而就是我们这边的话 可以对它进行一个这个分类

20:44.330 --> 20:50.330
好 这个也是啊 这个也是就指的是步骤1啊 这边指的是步骤1

20:51.370 --> 20:53.770
啊 这个也是什么呢 也是就是针对

20:54.570 --> 20:56.570
目前各打框架

20:57.690 --> 21:01.690
各打框架的一个分类的依据

21:02.650 --> 21:08.170
对不对 你第二个的话是没什么差别的啊 各个框架的话 大致实现都是一样的 主要是第一个

21:08.650 --> 21:12.890
你如何来计算这个变化的 好 那接下来的话 我们来看一个这个势力

21:14.570 --> 21:18.810
啊 接下来我们来看一个这个应用的这个势力

21:20.090 --> 21:26.090
ok 好 比如说我这边 我这个应用的话 它是由这个三个组件组成啊 该应用

21:26.970 --> 21:28.490
该应用

21:30.820 --> 21:32.420
由这个三个组件

21:33.540 --> 21:37.860
组成啊 那我们一个一个来看 首先的话 这边这个是a 组件

21:39.380 --> 21:43.860
我把这个a 组件我把它过来啊 稍等 这边又卡住了

21:45.460 --> 21:49.140
啊 我把这个a 组件每次他要卡一下

21:50.420 --> 21:54.820
啊 我把这个a 组件把它过来啊 你看我这边有个组件

21:55.940 --> 21:59.780
啊 这个a 组件它是什么呢 它是整个应用的这个根组件

22:00.420 --> 22:05.220
那在这个组件里面 这边有个a 这a是什么呢 这个a就是一个自变量

22:06.100 --> 22:10.740
对不对 这个a的变化会导致什么呢 会导致你整个这个ui 是不是重新渲染

22:11.620 --> 22:18.180
对不对 啊 a 组件是整个应用的根组件

22:19.700 --> 22:23.220
啊 在这个在这个根组件中

22:24.180 --> 22:27.380
然后有一个自变量a

22:28.420 --> 22:37.020
然后a的变化会导致会导致ui的重新渲染

22:38.780 --> 22:44.540
对不对 啊 这是关于这个a组件 好 然后接下来的话 我们加入什么呢 加入b 组件

22:45.180 --> 22:45.980
好 砍图

22:47.100 --> 22:51.580
b 组件 好 b 组件的话 你看 它是嵌套在这个a 组件里面的

22:52.220 --> 22:56.220
啊 好 然后接下来我们这边新增了一个什么

22:57.260 --> 23:00.540
新增了一个b 这个b的话就是一个音变量

23:01.260 --> 23:06.780
你这边a这个自变量的变化会导致什么呢 会导致这个音变量b

23:07.580 --> 23:13.100
发生变化 而你这个音变量这个b 它又作为什么 它是不是又作为这个pops

23:13.660 --> 23:15.340
传给了这个b这个组件

23:16.540 --> 23:21.500
对不对 传给了这个b这个组件啊 这边传递过来啊 说说你这边b的变化

23:22.060 --> 23:25.020
是不是 同样会导致这个b 组件发生变化

23:25.660 --> 23:29.500
同时在这个b 组件里面还有什么呢 还有一个这个自变量c

23:30.860 --> 23:34.540
还有一个自变量c啊 然后最终的话 这边是b加c

23:35.180 --> 23:39.820
啊 就是这个c的话是你b 组件里面内部的一个自变量 然后加这边这个b

23:40.140 --> 23:47.020
啊 这个b 这个b的话是从什么呢 是从你这个a 组件传递过来的啊 在ui里面渲染这个b加c

23:47.500 --> 23:48.860
ok 好

23:49.820 --> 23:51.500
嗯 上图

23:52.620 --> 23:57.340
表示表示什么呢 在这个a 在a 组件中

23:58.860 --> 24:04.220
a 组件中引入了一个音变量b

24:05.420 --> 24:07.260
对吧 好 然后a 组件

24:08.620 --> 24:14.060
a 组件中的自变量a 的这个改变

24:14.780 --> 24:17.740
会导致音变量

24:19.260 --> 24:19.980
b 的改变

24:20.940 --> 24:24.860
对不对 而这个音变量

24:26.140 --> 24:29.420
音变量b 又作为什么

24:32.170 --> 24:32.410
又

24:34.090 --> 24:36.330
作为什么 是不是又作为这个props

24:38.250 --> 24:42.890
props 传递到了这个自组件

24:43.930 --> 24:44.810
自组件

24:46.010 --> 24:51.670
这个b 当中对不对 好 然后接下来b 组件

24:52.630 --> 24:57.510
b 组件中 然后也有一个自变量

24:58.150 --> 24:59.030
什么 是不是c

25:00.310 --> 25:03.910
对不对 好 然后接下来在b 组件中 然后接收

25:05.670 --> 25:11.110
在该组件中还接收从副组件

25:11.990 --> 25:17.830
副组件a 传递过来的props b

25:18.630 --> 25:24.230
最终在ui中渲染什么的b加c

25:25.430 --> 25:27.670
好 看一下 看一下我这边写的这个描述

25:28.310 --> 25:33.030
没问题吧 是这样子的吧 对不对 啊 这边的话这个是自变量

25:33.750 --> 25:34.870
这个是音变量

25:35.590 --> 25:39.110
这边的话这个是自变量 这边的话它是传递过来的

25:39.110 --> 25:41.750
传递过来的话 这边的话实际上它也变成了一个什么

25:41.750 --> 25:45.590
就变成了个自变量 对不对 变成了个自变量啊

25:46.470 --> 25:47.830
然后这是这个b这个组件

25:48.470 --> 25:52.630
ok 好 然后接下来我们这边再加入这个c这个组件

25:53.350 --> 25:56.230
继续看图啊 这边我们再来

25:57.430 --> 25:59.990
接下来的话 我们又加入了这个c这个组件

26:01.190 --> 26:05.510
看到没有 这边要加入c啊 在在这里b组件这边

26:06.310 --> 26:09.110
加入了c组件 c组件是这个样子的

26:09.750 --> 26:12.950
在c组件里面它有个什么 它这边它有一个这个a

26:13.750 --> 26:17.670
这个a是什么呢 这个a的话是从这个a组件这边

26:18.310 --> 26:23.940
传递过来的啊 就是你这边这边啊 你看这个c组件

26:23.940 --> 26:27.460
c组件这边是没有a 对不对 这个a 这个a的话不是它内部的

26:27.460 --> 26:30.980
而是什么呢 而是从这个a组件直接传递过来的

26:30.980 --> 26:34.500
啊 它比如说跨成级啊之类的 使用那个context

26:34.500 --> 26:38.420
都可以跨成级了传递这个数据过来 对吧

26:39.380 --> 26:46.660
在组件组件c组啊 接收什么呢 接收从跟组件

26:48.100 --> 26:59.620
跟组件a传递过来的这个数据a啊 从而变成啊 就是你这个a啊 a

27:01.620 --> 27:04.260
a变成c组件

27:05.220 --> 27:08.580
c组件的一个自变量

27:09.940 --> 27:17.060
对吧 ok 好 那接下来我们现在的话这个应用的话就有这么一样的一个结构啊 这边a

27:18.180 --> 27:23.060
b这个c 好 那接下来我们来总结一下啊 接下来

27:24.100 --> 27:26.180
接下来我们来总结一下

27:26.900 --> 27:28.500
就是各个组件

27:29.540 --> 27:36.740
各个组件中所包含的自变量和音变量

27:38.020 --> 27:43.220
ok 好 大字的话是什么样的关系呢 大字是这样子的关系 我就直接拿过来了啊

27:44.260 --> 27:45.460
大字的话是这样子的

27:46.900 --> 27:52.020
你看 首先我们来看这个a a组件 a组件它是不是它有一个什么 是不是自变量a

27:52.820 --> 27:55.860
对不对 然后接下来有个音变量音变量的话就是这个b

27:56.900 --> 28:00.340
对不对 好 这叫这个b组件 b组件的话 这边首先你这个

28:01.060 --> 28:03.860
他接收这个a组件 传过来的这个b

28:04.420 --> 28:08.820
可能 这边接收传过来的这个b 那这个b的话就作为什么 作为一个自变量

28:09.380 --> 28:13.300
啊 然后接下来这边还有一个这个自变量c 这边是所包含的自变量

28:15.780 --> 28:20.180
ok 好 然后接下来你这个c组件 c组件就是什么 c组件是不是就是这个a

28:20.580 --> 28:23.540
这个a是从哪儿出来的 是不是从这个a组件传进过来的

28:24.020 --> 28:27.140
对不对 作为我这个c内部的一个这个自变量

28:27.780 --> 28:31.860
好 那现在的话 各个组件里面的这个自变量 我们就理清楚了

28:32.340 --> 28:36.660
理清楚了之后 然后接下来我们就可以从三个维度

28:37.220 --> 28:42.260
去考虑啊 这个自变量和这个不同维度的之间的这个关系

28:44.020 --> 28:44.660
理清楚

28:46.500 --> 28:48.740
理清楚这个自变量之后

28:50.180 --> 28:54.020
我们就可以从什么呢 从三个维度

28:54.420 --> 28:57.220
去整理

28:58.340 --> 29:00.180
啊 去整理自变量

29:01.140 --> 29:06.420
自变量和不同维度之间的这个关系

29:07.060 --> 29:12.020
ok 稍微有点抽象啊 稍微有点抽象啊 这边的话你尝试着啊去听一下

29:12.580 --> 29:15.940
ok 哪三个维度呢 首先第一个是自变量

29:16.580 --> 29:19.460
与ui 的这个对应关系

29:22.920 --> 29:25.240
啊 第二个维度 第二个维度是自变量

29:26.200 --> 29:27.720
与这个组件

29:28.680 --> 29:30.280
的这个对应关系

29:31.720 --> 29:33.640
好 第三个 第三个是自变量

29:34.440 --> 29:36.120
与什么呢 与这个应用

29:37.320 --> 29:38.920
的这个对应关系

29:40.200 --> 29:42.280
ok啊 我们这边一个一个来看一下

29:44.420 --> 29:45.380
啊 把这个加错

29:46.740 --> 29:51.380
好 首先第一个 第一个的话是这个自变量与ui 的这个对应关系

29:51.780 --> 29:55.300
好了 接下来我们看一下自变量的变化会导致

29:55.860 --> 29:59.220
呃ui 的啊 就是哪些方面的这个变化

29:59.700 --> 30:01.780
就从ui 层面去考虑啊

30:02.820 --> 30:06.020
从ui 层面去考虑

30:06.820 --> 30:10.260
的话自变量的这个变化

30:10.820 --> 30:12.180
会导致

30:13.380 --> 30:17.060
哪些ui啊 发生变化

30:19.510 --> 30:20.950
ok 哪些

30:21.590 --> 30:25.910
好 我这边的话 这边总结出来 总共的话就是这么五条

30:28.260 --> 30:33.860
看一下 首先 a 的变化会导致a 组件ui 中a的变化

30:34.260 --> 30:39.060
看一下 a 的变化会导致ui 就a 组件啊

30:39.060 --> 30:42.820
a 组件ui 中啊 这个a的变化

30:43.700 --> 30:45.060
对了吧 ok

30:45.540 --> 30:47.860
好 我们把这个放到这 往这边结个图

30:49.460 --> 30:52.180
结个图啊 这边把它放到这里来

30:53.780 --> 30:55.620
放到这里来 那你来一条一条对比一下

30:56.260 --> 31:00.500
a 的变化会导致aui 中aui 中a的变化

31:00.820 --> 31:04.820
没问题吧 好 a 的变化会导致什么呢 会导致音变量 b

31:05.460 --> 31:08.820
b 发生变化 从而导致因为你这个b发生变化了

31:08.820 --> 31:10.580
所以这边它b加c发生变化

31:11.540 --> 31:14.900
对不对 好 a 的变化会导致什么呢 会导致这个 c

31:15.940 --> 31:17.940
c 这个ui 里面的这个a 的变化

31:18.740 --> 31:22.820
对不对 好 a 的变化会导致 cui 中 就是你这边

31:23.780 --> 31:26.820
这边这个 a 点 to fixed 发生变化

31:27.460 --> 31:29.540
好 然后接下来的话 你这个 c 的变化

31:30.340 --> 31:34.900
c 的变化会导致什么呢 b 的ui 中啊 就这边 b 加 c 发生变化

31:35.620 --> 31:40.580
总共的话 这边这个梳理出来的这个路径 是不是有五条

31:41.380 --> 31:42.900
对不对啊 总共

31:45.700 --> 31:48.020
总共我们梳理

31:48.980 --> 31:50.820
出来的ui

31:51.540 --> 31:54.820
变化路径有什么呢 有五条

31:55.380 --> 31:57.940
ok 好 那接下来

31:58.660 --> 32:01.220
接下来我们要做的事情

32:02.420 --> 32:06.100
就是什么 就是根据梳理出来的

32:07.300 --> 32:09.540
梳理出来的这个变化路径

32:10.660 --> 32:16.420
变化路径 执行具体的这个动物操作

32:17.300 --> 32:21.700
即可对不对 我们要做的这个

32:22.420 --> 32:25.940
接下来要做的事情是不是就这样子啊 对不对 一步一步的去

32:26.420 --> 32:31.140
你这边的话这个ui 这边会发生变化 那就让我执行这个具体的动物操作

32:31.540 --> 32:32.660
啊 大家针对这一条

32:33.460 --> 32:37.220
执行这个具体的动物操作啊 那一条一条的执行就可以了

32:37.940 --> 32:41.620
啊 这个的话是就是自变量于ui 的一个对应关系

32:42.100 --> 32:47.140
ok 那接下来的话 我们如果从这个组件的层面去考虑的话

32:49.240 --> 32:54.200
从组件的层面去考虑

32:55.000 --> 33:00.040
考虑的话 啊 让自变量的这个变化

33:01.240 --> 33:02.520
啊 这边是ui

33:05.000 --> 33:10.520
会导致哪些组件发生变化呢

33:12.460 --> 33:17.020
注意哦 我们这边考虑的这个维度就不一样了 我们现在整理的是这个自变量和组件

33:17.740 --> 33:20.540
那你整理下来的话 大致就是这个样子

33:24.040 --> 33:25.080
大致就是这样子

33:25.960 --> 33:31.400
哎 你会发现这个整体的这个路径 是不是从五条变成这个四条了

33:32.440 --> 33:34.280
对不对啊 来 我们这边 我们把这个还是

33:35.400 --> 33:35.720
把它

33:37.560 --> 33:41.000
嗯 弄一个图定好 让我们这边来看一下啊

33:41.640 --> 33:44.920
首先a的变化会导致什么呢 会导致这个a组件

33:45.720 --> 33:50.280
这发生变化啊 a的变化导致b发生变化 b发生变化的下 b组件

33:50.680 --> 33:51.400
这发生变化

33:51.960 --> 33:53.400
然后a的变化会导致什么

33:54.360 --> 33:56.280
是不是会导致c的组件发生变化

33:57.240 --> 34:03.000
对不对 好 然后这样这个c c的变化会导致什么 是不是会导致这个b啊 组件b的这个ui

34:03.400 --> 34:04.040
发生变化

34:04.760 --> 34:06.760
对不对 哎 你看从这个组件

34:07.480 --> 34:10.040
组件的角度啊 组件的这个

34:10.760 --> 34:15.480
呃 这个角度去考虑的话 它的路径就从五条变成了四条

34:16.440 --> 34:17.400
啊 相较于

34:18.360 --> 34:21.240
上面的这个自变量

34:21.800 --> 34:24.920
与ui的这个对应关系

34:26.680 --> 34:27.320
当我们

34:28.200 --> 34:30.360
考虑什么呢 考虑自变量

34:30.920 --> 34:32.280
与组件

34:33.080 --> 34:35.000
之间的关系是

34:36.040 --> 34:37.080
这个路径

34:37.880 --> 34:38.440
梳理

34:39.000 --> 34:40.600
出来的路径

34:41.240 --> 34:48.630
从五条变成了变成了四条

34:49.830 --> 34:51.830
对不对 变成了四条

34:52.470 --> 34:54.470
但是呢 虽然你这个路径减少了

34:55.030 --> 34:56.790
啊 虽然路径

34:57.510 --> 35:00.710
减少了 但是在运行的时候

35:02.550 --> 35:03.430
呃 需要

35:04.070 --> 35:06.070
进行额外的操作

35:07.270 --> 35:09.430
对不对 就是那这个额外的操作是什么呢

35:09.910 --> 35:11.910
额外的操作就是确定

35:12.630 --> 35:14.230
某一个组件

35:14.790 --> 35:16.950
发生变化时

35:17.670 --> 35:21.510
内部的这个组件内部

35:22.310 --> 35:25.510
组件内部的这个ui

35:26.390 --> 35:27.830
需要发生

35:28.470 --> 35:31.030
发生这个变化的部分

35:32.070 --> 35:32.870
是不是这个道理啊

35:33.270 --> 35:34.870
对不对 就比如说你这边的话

35:34.870 --> 35:36.470
你这个确定比如说这个组件b

35:37.030 --> 35:38.310
啊 组件b要发生变化

35:38.310 --> 35:40.390
那接下来你还要确定这个组件b里面

35:40.390 --> 35:41.670
具体的这个ui

35:42.310 --> 35:43.990
它发生这个哪些变化

35:44.470 --> 35:44.870
OK

35:45.590 --> 35:47.670
啊 例如

35:48.150 --> 35:50.630
呃 通过路径式

35:51.270 --> 35:53.590
啊 通过路径式只能

35:54.150 --> 35:55.990
明确什么呢 只能明确这个

35:56.630 --> 35:57.430
b组件

35:57.990 --> 36:01.190
b组件发生了变化

36:01.670 --> 36:05.670
但是具体发生了什么变化

36:06.150 --> 36:09.190
还需要什么 还需要组件内部

36:09.750 --> 36:11.910
进行进一步的确定

36:14.280 --> 36:16.680
妙妙 虽然你路径变少了

36:16.680 --> 36:18.760
但是实际上你每一步里面的话

36:18.760 --> 36:20.840
时间还是要做一些额外的事情

36:21.480 --> 36:21.800
OK

36:22.440 --> 36:23.560
好了 接下来最后

36:23.960 --> 36:25.960
最后的话就是 最后

36:26.600 --> 36:26.920
我们

36:28.520 --> 36:29.560
啊 考虑什么呢

36:31.080 --> 36:32.760
我们考虑自变量

36:33.640 --> 36:34.760
和这个应用

36:35.640 --> 36:36.840
啊 之间的这个关系

36:38.040 --> 36:40.200
应用之间的这个关系

36:40.760 --> 36:43.880
啊 那么路径就变成了

36:44.520 --> 36:46.040
变成什么呢 变成这个样子

36:47.560 --> 36:49.160
好 这边我把他拿过来

36:52.470 --> 36:54.150
你看 就变成了这个样子

36:54.630 --> 36:56.950
a的变化会导致bi变化

36:57.270 --> 36:59.350
c的变化会导致bi变化

36:59.590 --> 37:02.390
你会发现这个 整个这个路径就从4条

37:02.710 --> 37:04.790
减成了什么 减成了2条

37:05.350 --> 37:05.830
对不对

37:06.470 --> 37:07.750
整体路径

37:08.310 --> 37:09.590
从4条

37:10.550 --> 37:11.350
减少为了

37:12.310 --> 37:14.150
减少为了2条

37:15.750 --> 37:17.750
但是聪明的同学已经注意到了

37:17.750 --> 37:19.590
虽然你路径减少了

37:19.590 --> 37:22.630
但是你要做的额外的工作是不是更多了

37:22.630 --> 37:23.350
对不对

37:23.830 --> 37:27.030
虽然路径减少了

37:27.510 --> 37:31.590
但是要做的额外的工作

37:33.430 --> 37:33.990
更多了

37:34.950 --> 37:35.510
比如

37:36.230 --> 37:37.350
这个a的变化

37:37.990 --> 37:40.470
a的变化会导致

37:42.310 --> 37:44.870
应用中的ui

37:46.710 --> 37:47.270
ui

37:47.910 --> 37:49.350
发生变化

37:49.910 --> 37:52.070
那么究竟是

37:52.710 --> 37:53.590
呃

37:53.590 --> 37:54.550
哪一部分的ui

37:57.480 --> 38:01.160
对不对啊 这些需要进行什么

38:01.160 --> 38:03.400
需要进行这个额外的啊

38:03.400 --> 38:04.040
这些需要

38:04.920 --> 38:06.200
这些需要额外的

38:07.720 --> 38:09.320
额外的进行什么

38:09.320 --> 38:09.880
是确定

38:11.320 --> 38:12.200
对不对啊

38:12.200 --> 38:13.320
需要额外的进行确定

38:13.880 --> 38:14.680
所以我们这边的话

38:14.680 --> 38:15.800
我们可以总结一下

38:15.800 --> 38:17.320
啊就是一般啊

38:17.320 --> 38:19.320
你这边总结的这个规律啊

38:19.320 --> 38:19.640
最后

38:21.940 --> 38:22.260
最后

38:24.020 --> 38:25.860
我们可以总结一下

38:28.330 --> 38:29.130
总结一下

38:29.130 --> 38:29.850
就什么呢

38:29.850 --> 38:31.610
就是你这个前端框架

38:33.130 --> 38:35.930
前端框架需要关注什么呢

38:35.930 --> 38:37.450
关注这个质变量

38:38.410 --> 38:41.290
和这个x的对应关系

38:42.330 --> 38:43.770
啊这个x就是指的什么呢

38:43.770 --> 38:45.290
这个x就是指的上面的

38:45.290 --> 38:46.890
就是你这边比如ui

38:49.210 --> 38:49.610
ui

38:50.250 --> 38:53.370
主件应用啊指的就是这个啊

38:53.370 --> 38:55.450
需要考虑和x的这个对应关系

38:56.090 --> 38:56.810
好

38:56.810 --> 38:57.290
随着

38:58.570 --> 39:00.170
呃随着你这个x

39:01.050 --> 39:02.650
的这个抽象成绩

39:03.930 --> 39:04.970
抽象成绩

39:05.530 --> 39:07.370
不断下降

39:08.170 --> 39:09.530
啊那接下来自变量

39:12.470 --> 39:13.430
自变量

39:14.150 --> 39:14.710
呃到

39:15.670 --> 39:16.070
ui

39:16.870 --> 39:18.470
变化的这个路径

39:19.350 --> 39:20.310
路径调数

39:21.590 --> 39:22.870
就会什么就会增多

39:23.510 --> 39:25.510
来看一下这句话啊看一下这句话

39:25.510 --> 39:28.310
就随着你x抽象成绩不断下降

39:28.310 --> 39:30.710
比如你这边的话和应用应用是不是最抽象的

39:31.670 --> 39:34.470
对不对啊那接下来他这个路径是最少的

39:35.030 --> 39:37.350
好那接下来你这个抽象成绩往下降一低

39:37.830 --> 39:38.550
变到主件

39:39.110 --> 39:40.870
主件的话呢他的路径是不是就增多了

39:41.430 --> 39:43.430
对不对那你抽象成绩再往下降

39:43.430 --> 39:45.030
直接就是降到什么降到ui

39:45.430 --> 39:47.590
ui层面那这个路径是不是就最多了

39:48.550 --> 39:48.870
对不对

39:49.430 --> 39:53.030
好那你这边的话这个随着抽象成绩不断下降

39:53.030 --> 39:55.190
那自变量到ui变化的这个路径

39:55.750 --> 39:57.190
调数就会增多

39:57.590 --> 39:59.510
OK好路径越多

40:01.620 --> 40:02.420
路径越多

40:03.060 --> 40:05.700
则意味着意味着什么呢

40:05.700 --> 40:07.540
意味着前端框架

40:08.660 --> 40:10.340
在运行时

40:11.140 --> 40:13.220
啊然后消耗在

40:14.500 --> 40:16.020
消耗在什么呢就是寻找

40:16.980 --> 40:19.380
寻找这个自变量

40:20.340 --> 40:21.140
自变量

40:21.700 --> 40:24.740
与ui这个对应关系

40:25.620 --> 40:28.820
对应关系啊上面的时间

40:29.860 --> 40:30.340
越少

40:31.540 --> 40:34.340
OK啊他就有这样子的这个含义

40:34.660 --> 40:37.780
OK说最终的话我们根据这一特点啊

40:37.780 --> 40:41.940
我们就可以对现代的这个前端框架啊分成三内

40:42.900 --> 40:45.940
根据上面的这个特点

40:46.500 --> 40:48.020
我们就可以

40:48.740 --> 40:49.300
针对

40:50.020 --> 40:50.580
现代

40:51.460 --> 40:52.260
前端框架

40:53.940 --> 40:55.780
分为什么呢分为三大内

40:58.380 --> 41:01.100
哪三大内呢分别是元素级

41:02.300 --> 41:02.700
框架

41:03.820 --> 41:04.460
组件

41:05.420 --> 41:06.460
级框架

41:08.060 --> 41:09.660
啊以及什么呢应用级

41:11.180 --> 41:11.900
应用级

41:14.140 --> 41:17.660
OK那讲到这里的话实际上大家应该已经看出来了

41:18.540 --> 41:21.100
那比如说我们以常见的这个前端框架为例

41:22.300 --> 41:23.580
以常见的

41:24.300 --> 41:27.420
这个前端框架为例

41:28.300 --> 41:29.260
那比如说react

41:30.220 --> 41:33.420
react它是属于什么它是属于应用级

41:34.700 --> 41:35.660
应用级框架

41:36.940 --> 41:40.780
因为在react中它每次什么每次只要我这边这个state

41:41.660 --> 41:45.980
发生这个变化我就需要去干嘛是不是state的变化就会导致什么

41:45.980 --> 41:46.940
是不是UI的变化

41:47.900 --> 41:49.900
具体这个UI哪个部分变化

41:49.900 --> 41:52.780
它这边让它需要干嘛需要内部是不是去寻找

41:53.420 --> 41:55.660
它里面的话有一个这个虚拟墮膜

41:55.660 --> 41:56.620
然后做这个地府

41:57.500 --> 41:58.060
对不对

41:58.060 --> 41:59.660
它是属于这个应用级别的

42:00.940 --> 42:02.380
好然后接下来这个view

42:03.420 --> 42:04.860
view的话属于什么

42:05.580 --> 42:07.420
view属于组件级的

42:10.650 --> 42:12.010
属于组件级别的框架

42:12.490 --> 42:12.970
比如view

42:12.970 --> 42:16.170
view的话我们的这个状态在发生变化的时候

42:16.170 --> 42:18.890
它这边可以确定到什么呢可以确定到组件

42:20.490 --> 42:22.010
因为它这边让它是做了那个

42:22.730 --> 42:23.770
响应式的那个绑定

42:23.770 --> 42:25.370
它可以确定到这个组件级别

42:25.850 --> 42:28.330
但组件内部究竟哪些发生了变化

42:28.330 --> 42:31.130
它还需要再一步进行这个确定

42:31.450 --> 42:32.890
说它组件内部用的是什么呢

42:32.890 --> 42:35.530
组件内部它在确定的时候用的是虚拟墮膜

42:36.490 --> 42:37.530
用的是虚拟墮膜

42:38.010 --> 42:40.330
所以view的话它是属于组件级的

42:41.290 --> 42:41.930
而什么呢

42:41.930 --> 42:44.570
而这个新的这个swilt

42:46.950 --> 42:49.190
swilt包括这个solid

42:50.150 --> 42:51.030
solid的阶屎

42:51.670 --> 42:52.470
属于什么呢

42:52.470 --> 42:53.990
属于这个元素级的

42:55.430 --> 42:56.150
元素级

42:58.230 --> 42:58.790
看了没有

42:59.270 --> 43:02.150
你这边呢要针对这个现代框架进行分类

43:02.150 --> 43:05.030
那你这边的话就可以进行这样子的这个分类

43:05.030 --> 43:06.310
是不是有理有据的

43:07.030 --> 43:07.670
对不对

43:07.670 --> 43:08.950
有理有据的

43:08.950 --> 43:10.550
而且你这样子回答的话

43:10.550 --> 43:14.790
实际上可以给这个面试官留下这个非常深刻的一个印象

43:15.750 --> 43:16.310
对不对

43:16.310 --> 43:18.870
所以为什么我开始我就说像这样的题

43:19.350 --> 43:20.950
你回答的话可生可浅

43:21.510 --> 43:24.630
然后这样的题的话实际上是最容易出彩的

43:25.510 --> 43:26.390
最容易出彩

43:26.390 --> 43:27.430
最容易出效果的

43:29.110 --> 43:31.670
好最后的话我把这个参考答案

43:31.670 --> 43:33.270
参考答案我就直接把它贴过来了

43:34.630 --> 43:37.670
参考答案的话就是针对我们这一节课的这个总结

43:38.550 --> 43:39.270
我放到这里

43:40.550 --> 43:43.510
所有的现代前端框架都有一个非常重要的特点

43:43.510 --> 43:45.910
就是基于状态的声明式渲染

43:45.910 --> 43:47.590
换成成公式的话就是这个

43:48.230 --> 43:48.630
对不对

43:48.790 --> 43:52.790
它有点类似于初中数学的质变量和音变量之间的这个关系

43:53.350 --> 43:55.030
那么你这个State就是质变量

43:55.910 --> 43:59.750
State的变化导致UI这个音变量发生变化

44:00.550 --> 44:01.110
对吧

44:01.110 --> 44:02.550
好你这个不同的框架

44:02.950 --> 44:06.550
它根据这个质变量的变化计算出UI变化这个步骤

44:06.550 --> 44:07.830
它是有所区别的

44:08.310 --> 44:08.870
ok

44:08.870 --> 44:10.470
那接下来根据这个区别

44:10.470 --> 44:12.950
你最终的话就是可以进行个分类

44:12.950 --> 44:13.990
分成这三类

44:13.990 --> 44:14.790
元素级

44:14.790 --> 44:16.390
逐渐级和应用级

44:16.390 --> 44:18.070
然后最后的话你再说一下

44:18.150 --> 44:20.390
比如react它是属于哪一类

44:20.390 --> 44:21.910
view是属于哪一类

44:21.910 --> 44:23.110
那比如svelte

44:23.110 --> 44:23.670
sully的

44:23.670 --> 44:25.110
它又是属于哪一类

44:25.910 --> 44:26.230
ok

44:27.030 --> 44:28.790
这是关于这个这道题

44:29.670 --> 44:31.670
这个的话大家下来的话可以再看一下

44:32.310 --> 44:32.630
好吧

44:33.270 --> 44:33.510
ok

44:34.230 --> 44:35.430
好这期课的话就到这里

44:36.070 --> 44:36.630
再见

