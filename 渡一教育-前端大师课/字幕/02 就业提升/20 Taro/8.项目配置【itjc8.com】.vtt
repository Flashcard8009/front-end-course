WEBVTT

00:00.000 --> 00:03.000
好 我们继续给大家讲解Tarot的一个系列课程

00:03.000 --> 00:06.000
这列课呢 给大家讲解一下项目配置

00:06.000 --> 00:09.000
这部分内容呢 相对而言还是比较简单啊

00:09.000 --> 00:13.000
首先我们说到项目配置 我们在不同的生态圈也好

00:13.000 --> 00:16.000
小程序也好 或者说是我们的页面中

00:16.000 --> 00:20.000
我们的程序中 都会有项目配置的这样一个内容

00:20.000 --> 00:24.000
有些是对于框架的配置 有些是对于我们程序的配置

00:24.000 --> 00:27.000
那么我们来看一下 在Tarot中呢 我们说

00:27.000 --> 00:30.000
它是有各种配置程序存在

00:30.000 --> 00:32.000
这个倒比较有意思啊

00:32.000 --> 00:35.000
因为在原来的我们很多的一些框架里面的话呢

00:35.000 --> 00:39.000
它要不就针对于某些内容进行项目配置

00:39.000 --> 00:42.000
你比如说我们在微信小程序的MPV

00:42.000 --> 00:44.000
这样的一个框架里面的话呢

00:44.000 --> 00:47.000
它会针对于当前的这个框架

00:47.000 --> 00:50.000
实现我们的一个项目配置

00:50.000 --> 00:52.000
再加上微信配置

00:52.000 --> 00:56.000
那么对于Tarot来讲 它不单单是做微信小程序

00:56.000 --> 00:59.000
我们说过Tarot是作为叫做一次编码

00:59.000 --> 01:02.000
多段运行的讲一种框架

01:02.000 --> 01:04.000
所以呢 它本身来讲

01:04.000 --> 01:06.000
在最后完成代码以后

01:06.000 --> 01:09.000
它可以生成多种的我们的原生代码

01:09.000 --> 01:12.000
也就是我们所谓的无论是支付宝小程序啊

01:12.000 --> 01:15.000
微信小程序啊 还是属于那个

01:15.000 --> 01:17.000
各种小程序白度啊

01:17.000 --> 01:19.000
那么它怎么做到这一块内容呢

01:19.000 --> 01:22.000
我们在刚开始讲解说我们就说到了

01:22.000 --> 01:25.000
它其实在编译的时候使用了不同的命令

01:25.000 --> 01:27.000
那么这就意味着不同的命令

01:27.000 --> 01:30.000
会对应到不同的配置文件

01:30.000 --> 01:32.000
所以我们BBT这块内容呢

01:32.000 --> 01:34.000
简单介绍一下说各类小程序

01:34.000 --> 01:36.000
它其实都有各自的一个配置文件

01:36.000 --> 01:39.000
你比如我们微信小程序的话呢

01:39.000 --> 01:41.000
它会有Project Configure in JSON

01:41.000 --> 01:42.000
而白度小程序呢

01:42.000 --> 01:45.000
它是有Project Swim in JSON

01:45.000 --> 01:46.000
这样的阁程

01:46.000 --> 01:48.000
那么我们其实还有好多其他的

01:48.000 --> 01:52.000
那么为了适应各个小程序平台的话呢

01:52.000 --> 01:54.000
我们满足不同小程序文件的配置

01:54.000 --> 01:56.000
我们需要在Taro中啊

01:56.000 --> 01:59.000
有些你Taro会提供给我们

01:59.000 --> 02:00.000
有些呢

02:00.000 --> 02:04.000
我们需要自动的去完成当前这一个

02:04.000 --> 02:06.000
我们生态的小程序的一个

02:06.000 --> 02:10.000
所谓的文件配置文件的创建

02:10.000 --> 02:12.000
我们来看一下官网

02:12.000 --> 02:17.910
官网在项目配置这一块里面呢

02:17.910 --> 02:20.910
它的说法也是比较清晰的

02:20.910 --> 02:24.910
它所谓的就是各种程序呢

02:24.910 --> 02:25.910
这边写出来了

02:25.910 --> 02:28.910
小程序 Project Configure JSON

02:28.910 --> 02:29.910
白度程序呢

02:29.910 --> 02:31.910
14万还有头条

02:31.910 --> 02:33.910
头条有个Project Configure JSON

02:33.910 --> 02:34.910
这部分内容呢

02:34.910 --> 02:35.910
它说没有

02:35.910 --> 02:36.910
那么就是说

02:36.910 --> 02:38.910
它其实和小程序是一样的

02:38.910 --> 02:39.910
还有就是支付宝

02:39.910 --> 02:41.910
它说暂无发现

02:41.910 --> 02:43.910
就表示支付宝这个文件

02:43.910 --> 02:44.910
没有这个配置文件存在

02:44.910 --> 02:45.910
快应用

02:45.910 --> 02:47.910
man first

02:47.910 --> 02:49.910
QQ小程序也暂时没有

02:49.910 --> 02:50.910
那么所以我们讲

02:50.910 --> 02:52.910
一般性我们现在程序中呢

02:52.910 --> 02:54.910
我们一般都会有一个

02:54.910 --> 02:55.910
主要的咱们看到

02:55.910 --> 02:56.910
要不就是没有

02:56.910 --> 02:58.910
要不就Project Configure JSON

02:58.910 --> 03:00.910
好那么我们看到下面这句话

03:00.910 --> 03:03.910
为了能够适配到各个小程序平台

03:03.910 --> 03:05.910
那么我们需要各自去做

03:05.910 --> 03:08.910
我们看一下系统默认生成的时候

03:08.910 --> 03:09.910
系统默认在生成的时候

03:09.910 --> 03:12.910
它就帮我们做了一个这个文件

03:12.910 --> 03:13.910
Project Configure JSON

03:13.910 --> 03:15.910
那么这个是什么识别呢

03:15.910 --> 03:16.910
刚才我们看到了

03:16.910 --> 03:18.910
它其实就是小程序

03:18.910 --> 03:19.910
和我们头条

03:19.910 --> 03:22.910
那么都可以用这个 Configure来完成

03:22.910 --> 03:25.910
那么我们打开看一下

03:25.910 --> 03:27.910
它里面是一个JSON对象对吧

03:27.910 --> 03:29.910
因为这边后坠是JSON嘛

03:29.910 --> 03:31.910
那么如果你之前

03:31.910 --> 03:33.910
开发过小程序的原生写法

03:33.910 --> 03:36.910
你应该在根目录下就能见到这个

03:36.910 --> 03:38.910
当然如果你见过小程序的

03:38.910 --> 03:40.910
NP View的整个框架的话

03:40.910 --> 03:41.910
你应该也见过

03:41.910 --> 03:43.910
这个Project Configure JSON

03:43.910 --> 03:45.910
那么在里面呢

03:45.910 --> 03:47.910
我们可以做很多的一些配置

03:47.910 --> 03:49.910
像这边你看到的好几项

03:49.910 --> 03:51.910
那么具体的话呢

03:51.910 --> 03:53.910
我们可以看这个文档

03:53.910 --> 03:55.910
你可以通过小程序的这个点击

03:55.910 --> 03:57.910
然后去到小程序的

03:57.910 --> 03:59.910
我们的配置文件项目

03:59.910 --> 04:00.910
这个位置

04:00.910 --> 04:01.910
你可以来看一下

04:01.910 --> 04:03.910
首先我们大家可以通过

04:03.910 --> 04:05.910
先不用从这儿看

04:05.910 --> 04:08.910
我们先从我们的配置文件来看

04:08.910 --> 04:10.910
这边有一个叫

04:10.910 --> 04:12.910
MiniProgram Root

04:12.910 --> 04:13.910
那么代表的叫做

04:13.910 --> 04:15.910
小程序的根文件很简单

04:15.910 --> 04:17.910
它指向的就是我们

04:17.910 --> 04:19.910
编译以后所生成的Dister

04:19.910 --> 04:20.910
那么我们讲

04:20.910 --> 04:23.910
如果你是用框架

04:23.910 --> 04:25.910
来进行开发小程序的话

04:25.910 --> 04:27.910
就一定会出现

04:27.910 --> 04:29.910
这个叫MiniProgram Root

04:29.910 --> 04:31.910
因为框架本身自己

04:31.910 --> 04:34.910
并非是小程序的原码编程

04:34.910 --> 04:36.910
那么它需要在编译的时候

04:36.910 --> 04:38.910
把整个的

04:38.910 --> 04:40.910
里面的原码进行转换

04:40.910 --> 04:42.910
转换成我们的

04:42.910 --> 04:44.910
微信小程序所拥有的

04:44.910 --> 04:45.910
或者能够支持的

04:45.910 --> 04:47.910
比如说WXML的结构

04:47.910 --> 04:49.910
那么这样的转换过程

04:49.910 --> 04:50.910
一定它会放置到

04:50.910 --> 04:52.910
它的一个叫Dister目录下面

04:52.910 --> 04:54.910
那么我们就需要

04:54.910 --> 04:56.910
告知我们现在的微信

04:56.910 --> 04:58.910
你的微信

04:58.910 --> 04:59.910
你在编译的时候

04:59.910 --> 05:01.910
你要去找到Dister下面的

05:01.910 --> 05:03.910
因为微信在编译的过程中

05:03.910 --> 05:05.910
首先要找的一个文件

05:05.910 --> 05:06.910
就是它

05:06.910 --> 05:07.910
APP.json

05:07.910 --> 05:09.910
这是微信的起始编译文件

05:09.910 --> 05:11.910
它会通过这个文件

05:11.910 --> 05:13.910
去开展

05:13.910 --> 05:15.910
去发现你现在

05:15.910 --> 05:17.910
的位置起始文件配置

05:17.910 --> 05:18.910
情况

05:18.910 --> 05:19.910
以及它在座后面的

05:19.910 --> 05:21.910
比如说APP.js

05:21.910 --> 05:22.910
这个文件

05:22.910 --> 05:24.910
这里是被编译过的

05:24.910 --> 05:25.910
那么原生的写法

05:25.910 --> 05:26.910
可能就是一个

05:26.910 --> 05:28.910
js的格式

05:28.910 --> 05:29.910
那么这里面

05:29.910 --> 05:30.910
我们就不用去改它

05:30.910 --> 05:32.910
我们也不能去改它

05:32.910 --> 05:34.910
那么我们本身来讲

05:34.910 --> 05:35.910
就应该是

05:35.910 --> 05:36.910
需要你自行

05:36.910 --> 05:38.910
设定好这个以后

05:38.910 --> 05:39.910
就可以了

05:39.910 --> 05:41.910
编译器会帮我们做

05:41.910 --> 05:42.910
第二个

05:42.910 --> 05:44.910
projectnet

05:44.910 --> 05:46.910
这是项目名称

05:46.910 --> 05:47.910
那么我们可以通过

05:47.910 --> 05:49.910
我们刚刚所看到的

05:49.910 --> 05:50.910
这里面来看

05:50.910 --> 05:51.910
我们往下

05:51.910 --> 05:52.910
我们可以找

05:52.910 --> 05:53.910
项目名称

05:53.910 --> 05:55.910
只在新建项目的时候

05:55.910 --> 05:56.910
起作用

05:56.910 --> 05:58.910
所以我们打开微信的时候

05:58.910 --> 05:59.910
我们会看见

05:59.910 --> 06:01.910
上面写着MyAPP1

06:01.910 --> 06:03.910
其实就是这个名称

06:03.910 --> 06:04.910
对吧

06:04.910 --> 06:06.910
那么我们这边是告知你

06:06.910 --> 06:08.910
如果你在这边要改的话

06:08.910 --> 06:10.910
我们不建议在这边

06:10.910 --> 06:11.910
去改

06:11.910 --> 06:12.910
你比如说

06:12.910 --> 06:13.910
你这边改的话

06:13.910 --> 06:15.910
就是对你整个的项目来讲

06:15.910 --> 06:17.910
其实是有一定的

06:17.910 --> 06:19.910
破坏的

06:19.910 --> 06:21.910
所以我们强调建议的

06:21.910 --> 06:22.910
你这里改了

06:22.910 --> 06:23.910
你去做保存的话

06:23.910 --> 06:25.910
它其实也不会去

06:25.910 --> 06:26.910
做所谓的编译

06:26.910 --> 06:27.910
因为我们讲一下

06:27.910 --> 06:29.910
就是对于

06:29.910 --> 06:31.910
项目配置文件的修改

06:31.910 --> 06:32.910
我们应该是

06:32.910 --> 06:33.910
在创建的时候

06:33.910 --> 06:34.910
就完成了

06:34.910 --> 06:35.910
它不会根据你

06:35.910 --> 06:37.910
现在的内容的修改

06:37.910 --> 06:39.910
在程序中进行二次操作

06:39.910 --> 06:40.910
同时

06:40.910 --> 06:42.910
这边我们有个description

06:42.910 --> 06:43.910
要数

06:43.910 --> 06:44.910
你这个可写可不写

06:44.910 --> 06:45.910
你代表着

06:45.910 --> 06:46.910
这个东西是一个

06:46.910 --> 06:47.910
什么样的东能

06:47.910 --> 06:48.910
APPID

06:48.910 --> 06:50.910
我们这边用了没有用

06:50.910 --> 06:51.910
也就意味着

06:51.910 --> 06:52.910
我们现在只是

06:52.910 --> 06:53.910
给了一个测试的

06:53.910 --> 06:54.910
对吧

06:54.910 --> 06:55.910
那么咱们可以看到

06:55.910 --> 06:57.910
这边是没有给出以后

06:57.910 --> 06:58.910
我打开了

06:58.910 --> 07:00.910
我们的微信小程序

07:00.910 --> 07:02.910
通详情里面来看

07:02.910 --> 07:03.910
你在这边你能看到

07:03.910 --> 07:05.910
我们这边给出的

07:05.910 --> 07:07.910
是我之前给出了一个

07:07.910 --> 07:08.910
我们的测试号

07:08.910 --> 07:10.910
我的测试号

07:10.910 --> 07:11.910
如果说

07:11.910 --> 07:12.910
给出具体的

07:12.910 --> 07:13.910
你比如说

07:13.910 --> 07:14.910
你是一个什么1234

07:14.910 --> 07:15.910
你已经申请完了

07:15.910 --> 07:16.910
那么

07:16.910 --> 07:17.910
它就会形成申请号

07:17.910 --> 07:18.910
申请号和测试号

07:18.910 --> 07:20.910
对于我们的taro mpv

07:20.910 --> 07:21.910
类似于这种框架来讲

07:21.910 --> 07:22.910
它无所谓

07:22.910 --> 07:23.910
当然对于

07:23.910 --> 07:25.910
现在的小程序的运行

07:25.910 --> 07:26.910
它是有所谓的

07:26.910 --> 07:27.910
它的有所谓

07:27.910 --> 07:28.910
在于

07:28.910 --> 07:29.910
首先

07:29.910 --> 07:30.910
你如果用测试号

07:30.910 --> 07:31.910
你这边的云开发

07:31.910 --> 07:32.910
你是肯定用不上的

07:32.910 --> 07:33.910
第二的话

07:33.910 --> 07:35.910
你这边的上传发布

07:35.910 --> 07:36.910
你是不可能用的

07:36.910 --> 07:37.910
那么小程序允许

07:37.910 --> 07:39.910
你在这边进行修改

07:39.910 --> 07:40.910
当然

07:40.910 --> 07:41.910
我们应该是

07:41.910 --> 07:42.910
一

07:42.910 --> 07:43.910
你在创建的时候

07:43.910 --> 07:45.910
如果已经需要用到

07:45.910 --> 07:46.910
我们的云开发

07:46.910 --> 07:47.910
你就直接做

07:47.910 --> 07:48.910
如果你现在在中间

07:48.910 --> 07:49.910
要改的话

07:49.910 --> 07:50.910
那么你在这边

07:50.910 --> 07:51.910
我们同时

07:51.910 --> 07:52.910
也希望大家在

07:52.910 --> 07:53.910
创建之前

07:53.910 --> 07:54.910
就已经想好

07:54.910 --> 07:55.910
不能说中间

07:55.910 --> 07:56.910
再来进去修改

07:56.910 --> 07:57.910
这个是

07:57.910 --> 07:58.910
紧接着

07:58.910 --> 08:00.910
我们再来往下看

08:00.910 --> 08:01.910
我们先看这个

08:01.910 --> 08:02.910
那么其他几个的话

08:02.910 --> 08:03.910
其实

08:03.910 --> 08:04.910
如果你要的话

08:04.910 --> 08:05.910
你可以参照

08:05.910 --> 08:06.910
这两个去做

08:06.910 --> 08:07.910
因为这两个去打开的话

08:07.910 --> 08:09.910
它也是会有一些文档的

08:09.910 --> 08:12.910
你需要自行去建立这个文档

08:12.910 --> 08:13.910
那么当然

08:13.910 --> 08:14.910
我们在深沉

08:14.910 --> 08:16.910
这个百度小程序以后

08:16.910 --> 08:17.910
如果说

08:17.910 --> 08:18.910
你利用了我们的

08:18.910 --> 08:19.910
Taro的深沉

08:19.910 --> 08:20.910
百度小程序的

08:20.910 --> 08:21.910
Rend EV的方式

08:21.910 --> 08:23.910
它也会帮你完成

08:23.910 --> 08:24.910
这个深沉

08:24.910 --> 08:25.910
OK

08:25.910 --> 08:26.910
那我们继续往下

08:26.910 --> 08:28.910
那么这边还有好多

08:28.910 --> 08:29.910
我们继续往下来看

08:29.910 --> 08:30.910
这边有一个

08:30.910 --> 08:31.910
叫做Setting

08:31.910 --> 08:32.910
这边有个Setting

08:32.910 --> 08:34.910
Setting是一个

08:34.910 --> 08:35.910
JSON对象

08:35.910 --> 08:36.910
它是什么

08:36.910 --> 08:37.910
这个里面的几个值

08:37.910 --> 08:40.910
咱们非得知道

08:40.910 --> 08:41.910
我们来看

08:41.910 --> 08:42.910
这边有一个Setting

08:42.910 --> 08:44.910
它叫做项目配置

08:44.910 --> 08:45.910
项目配置

08:45.910 --> 08:46.910
我们来看下面

08:46.910 --> 08:47.910
它对于每一个

08:47.910 --> 08:50.910
都有一个简单的列表

08:50.910 --> 08:51.910
Setting

08:51.910 --> 08:52.910
它指的是什么呢

08:52.910 --> 08:53.910
注意一下

08:53.910 --> 08:54.910
ES6

08:54.910 --> 08:55.910
它指的是

08:55.910 --> 08:57.910
我们启用ES6转ES5

08:57.910 --> 08:59.910
那么我们来对照一下

08:59.910 --> 09:00.910
首先你来看这里边

09:00.910 --> 09:02.910
首先我们这里面的

09:02.910 --> 09:03.910
1 2 3项

09:03.910 --> 09:04.910
注意了

09:04.910 --> 09:06.910
这个是你非得要知道的

09:06.910 --> 09:07.910
就是

09:07.910 --> 09:08.910
我们在做微信小证据

09:08.910 --> 09:10.910
原生开发的时候

09:10.910 --> 09:12.910
这三项其实你是都被打开的

09:12.910 --> 09:14.910
但是你现在

09:14.910 --> 09:15.910
如果你是用的是

09:15.910 --> 09:16.910
我们Taro来做的话

09:16.910 --> 09:18.910
这三项必须关闭

09:18.910 --> 09:19.910
必须关闭

09:19.910 --> 09:21.910
那么这三项在哪里呢

09:21.910 --> 09:22.910
在这

09:22.910 --> 09:26.310
在这

09:26.310 --> 09:28.310
这边你能看到

09:28.310 --> 09:30.310
我们来解释一下这些

09:30.310 --> 09:32.310
在这边里面都有选项

09:32.310 --> 09:35.310
这个选项就是改变这个Setting的

09:36.310 --> 09:37.310
首先

09:37.310 --> 09:38.310
ES6转ES5

09:38.310 --> 09:39.310
这个

09:39.310 --> 09:41.310
是不可以在Taro中进行设定的

09:43.310 --> 09:44.310
原因是

09:44.310 --> 09:46.310
我们现在的里面的代码

09:46.310 --> 09:47.310
我们在Taro中

09:47.310 --> 09:49.310
它有一些激励的继承

09:49.310 --> 09:51.310
这里面的一些写法

09:51.310 --> 09:52.310
你要转换的话

09:52.310 --> 09:53.310
自动转换

09:53.310 --> 09:55.310
有可能会形成一个

09:55.310 --> 09:57.310
不可预知的效果

09:57.310 --> 09:58.310
那么所以

09:58.310 --> 09:59.310
我们说

09:59.310 --> 10:00.310
在做Taro格式的时候

10:00.310 --> 10:02.310
我们不能让它进行转换

10:02.310 --> 10:03.310
凡是自动操作

10:03.310 --> 10:04.310
都禁止

10:04.310 --> 10:05.310
第二个

10:05.310 --> 10:06.310
是这个

10:06.310 --> 10:08.310
Post CSS

10:08.310 --> 10:10.310
Post CSS

10:10.310 --> 10:12.310
Post CSS在这

10:12.310 --> 10:13.310
它指的是

10:13.310 --> 10:15.310
上传代码时样式

10:15.310 --> 10:17.310
是否自动补权

10:17.310 --> 10:19.310
还是一种自动操作

10:19.310 --> 10:21.310
我们有时候样式写的

10:21.310 --> 10:22.310
不是特别规范

10:22.310 --> 10:23.310
或者称之为

10:23.310 --> 10:25.310
我们需要用的减写方式

10:25.310 --> 10:26.310
这种时候的话

10:26.310 --> 10:29.310
你就不能让系统去做补权操作

10:29.310 --> 10:32.310
因为它并非是我们的原生开发

10:33.310 --> 10:34.310
原生开发过程中

10:34.310 --> 10:36.310
它只有一种模式

10:36.310 --> 10:37.310
但是你现在

10:37.310 --> 10:39.310
你在制作这个过程中

10:39.310 --> 10:40.310
我们需要的是

10:40.310 --> 10:42.310
可能就是这样一种格式

10:42.310 --> 10:43.310
在编译以后

10:43.310 --> 10:44.310
它会自动完成转换

10:44.310 --> 10:45.310
而你给它补权了

10:45.310 --> 10:47.310
它可能就没法进转了

10:47.310 --> 10:48.310
所以这个

10:48.310 --> 10:50.310
又是一个自动格式

10:50.310 --> 10:51.310
禁止

10:51.310 --> 10:53.310
我们再来

10:54.310 --> 10:55.310
第三个

10:55.310 --> 10:57.310
Many field

10:57.310 --> 10:59.310
Many field

10:59.310 --> 11:01.310
那么我们继续来看一下

11:01.310 --> 11:03.310
Many field是第三项

11:03.310 --> 11:05.310
上传代码是否

11:05.310 --> 11:06.310
自动压缩

11:06.310 --> 11:08.310
这个也可以关掉

11:08.310 --> 11:09.310
这三项

11:09.310 --> 11:10.310
记住了

11:10.310 --> 11:12.310
这三项必须关掉

11:12.310 --> 11:13.310
不是说

11:13.310 --> 11:15.310
可关可不关

11:15.310 --> 11:16.310
紧接着

11:16.310 --> 11:17.310
我们继续往下来看

11:17.310 --> 11:18.310
在我们的系统里面的话

11:18.310 --> 11:19.310
它就给了这几个

11:19.310 --> 11:21.310
还有一个URL checker

11:21.310 --> 11:23.310
URL checker

11:23.310 --> 11:24.310
这个是什么呢

11:24.310 --> 11:25.310
就看下面这一项

11:25.310 --> 11:26.310
它是否检查

11:26.310 --> 11:28.310
我们的

11:28.310 --> 11:29.310
安全性

11:29.310 --> 11:30.310
我们的域名安全

11:30.310 --> 11:32.310
这项在哪里的

11:32.310 --> 11:34.310
这项在这

11:34.310 --> 11:36.310
我们平时里面

11:36.310 --> 11:38.310
这边会有一个

11:38.310 --> 11:39.310
我们的不讲验

11:39.310 --> 11:40.310
是在微信中的

11:40.310 --> 11:42.310
但是我们其实

11:42.310 --> 11:43.310
我们在系统中

11:43.310 --> 11:44.310
我们说

11:44.310 --> 11:45.310
安全性的讲验

11:45.310 --> 11:46.310
你这边打Q

11:46.310 --> 11:48.310
然后在我们那边的话

11:48.310 --> 11:49.310
我们说

11:49.310 --> 11:50.310
肯定是不打勾的

11:50.310 --> 11:52.310
微信的整个

11:52.310 --> 11:54.310
逻辑是

11:54.310 --> 11:56.310
它只要你里边

11:56.310 --> 11:58.310
书写了一个网址

11:58.310 --> 12:00.310
就必须在微信的

12:00.310 --> 12:01.310
公众平台上面

12:01.310 --> 12:03.310
设定它的白名单

12:03.310 --> 12:04.310
因为

12:04.310 --> 12:06.310
微信小程序的个人开发

12:06.310 --> 12:08.310
我们很难去控制

12:08.310 --> 12:09.310
从微信角度来讲

12:09.310 --> 12:10.310
它很难控制

12:10.310 --> 12:12.310
你把它连到了一个

12:12.310 --> 12:14.310
钓鱼网站

12:14.310 --> 12:15.310
甲网站上面去

12:15.310 --> 12:18.310
那么怎么样能够防止这件事情呢

12:18.310 --> 12:20.310
所以它必须要去做一个脚印

12:20.310 --> 12:21.310
这个脚印就是

12:21.310 --> 12:22.310
它会去

12:22.310 --> 12:23.310
在你发布的

12:23.310 --> 12:25.310
或者说是在你运行的过程中

12:25.310 --> 12:27.310
它会去到你的

12:27.310 --> 12:28.310
对应的

12:28.310 --> 12:29.310
我们的微信公众平台

12:29.310 --> 12:30.310
看一下

12:30.310 --> 12:32.310
当前你所写的这个网址

12:32.310 --> 12:33.310
是不是已经被

12:33.310 --> 12:34.310
纳入到了

12:34.310 --> 12:36.310
我们的微信白名单里面

12:36.310 --> 12:37.310
白名单就是

12:37.310 --> 12:39.310
那个信任名单

12:39.310 --> 12:40.310
如果你已经被纳入

12:40.310 --> 12:42.310
代表你是属于一个

12:42.310 --> 12:43.310
主动行为

12:43.310 --> 12:45.310
那么这时候就OK的

12:45.310 --> 12:47.310
是这个逻辑

12:47.310 --> 12:48.310
如果说你现在

12:48.310 --> 12:49.310
没有纳入

12:49.310 --> 12:50.310
那么微信会给你报一个错

12:50.310 --> 12:51.310
当然

12:51.310 --> 12:52.310
我们在测试的过程中

12:52.310 --> 12:53.310
我们其实

12:53.310 --> 12:55.310
我们并不需要说

12:55.310 --> 12:57.310
也都要去做这样的白名单操作

12:57.310 --> 12:58.310
只要呢

12:58.310 --> 12:59.310
把在

12:59.310 --> 13:01.310
开发的时候

13:01.310 --> 13:02.310
我们把

13:02.310 --> 13:03.310
详情里面的这个勾

13:03.310 --> 13:05.310
不剿印合法预明

13:05.310 --> 13:06.310
这个勾上

13:06.310 --> 13:07.310
那这样的话呢

13:07.310 --> 13:08.310
至少在测试的时候

13:08.310 --> 13:10.310
我们可以很方便的

13:10.310 --> 13:12.310
通过这样的一个网址

13:12.310 --> 13:13.310
获取到数据

13:13.310 --> 13:14.310
这是我们

13:14.310 --> 13:15.310
在配置项里面

13:15.310 --> 13:17.310
大家是要知道的位置

13:17.310 --> 13:19.310
你这三项里面

13:19.310 --> 13:21.310
Chug & Force是影响到

13:21.310 --> 13:23.310
微信本身的

13:23.310 --> 13:24.310
详情里面

13:24.310 --> 13:26.310
勾选与否的

13:26.310 --> 13:27.310
这个是指导一下

13:27.310 --> 13:28.310
Setting

13:28.310 --> 13:30.310
那么紧接着来看

13:30.310 --> 13:32.310
这个APP ID我们说过了

13:32.310 --> 13:33.310
这个

13:33.310 --> 13:35.310
Complaint Type

13:35.310 --> 13:36.310
Complaint Type

13:36.310 --> 13:38.310
它主要是在这边指向的是

13:38.310 --> 13:39.310
编译类型

13:39.310 --> 13:40.310
我往上看

13:40.310 --> 13:41.310
看到吗

13:41.310 --> 13:42.310
Complaint Type

13:42.310 --> 13:43.310
编译类型

13:43.310 --> 13:44.310
主要是

13:44.310 --> 13:46.310
当前普通的小程序

13:46.310 --> 13:47.310
小程序

13:47.310 --> 13:48.310
我们说

13:48.310 --> 13:49.310
制作有两种情况

13:49.310 --> 13:50.310
第一种

13:50.310 --> 13:52.310
是制作我们的主程序

13:52.310 --> 13:54.310
也就是我们所谓的普通小程序

13:54.310 --> 13:55.310
Mini Program

13:55.310 --> 13:56.310
而第二种

13:56.310 --> 13:57.310
是我们有些时候

13:57.310 --> 13:59.310
制作小程序的插件项目

13:59.310 --> 14:00.310
小程序插件

14:00.310 --> 14:02.310
不是一个完整的项目

14:02.310 --> 14:04.310
它可以制作一些

14:04.310 --> 14:05.310
小程序功能化的节点

14:05.310 --> 14:06.310
那么这种

14:06.310 --> 14:07.310
我们写成Plugging

14:07.310 --> 14:08.310
一般性

14:08.310 --> 14:10.310
我们现在都会做的是Mini Program

14:10.310 --> 14:12.310
Program里面

14:12.310 --> 14:14.310
我们也可以去自行定义

14:14.310 --> 14:15.310
一些逐渐格式

14:15.310 --> 14:17.310
这样的方式也存在

14:17.310 --> 14:18.310
OK

14:18.310 --> 14:19.310
那么我们说

14:19.310 --> 14:20.310
我们现在就完成了

14:20.310 --> 14:22.310
现在的一个系统

14:22.310 --> 14:23.310
所给到我们的

14:23.310 --> 14:25.310
一个Program

14:25.310 --> 14:26.310
Jason的格式

14:26.310 --> 14:27.310
好

14:27.310 --> 14:28.310
那么系统给了这个格式以后

14:28.310 --> 14:30.310
我们大家要看一下

14:30.310 --> 14:31.310
它是否

14:31.310 --> 14:32.310
这个是一模一样

14:32.310 --> 14:34.310
在我们已经生成的微信之里边

14:34.310 --> 14:35.310
看到吗

14:35.310 --> 14:36.310
这边也有一个

14:36.310 --> 14:38.310
我们把它打开来看一下

14:38.310 --> 14:39.310
你看一下

14:39.310 --> 14:40.310
它里面的内容

14:40.310 --> 14:42.310
其实和我们刚才所看到的

14:42.310 --> 14:44.310
不止

14:44.310 --> 14:45.310
还有多 是吧

14:45.310 --> 14:46.310
你看到这边

14:46.310 --> 14:48.310
这边上面都是一样的

14:48.310 --> 14:51.310
它这边多了一个这个

14:51.310 --> 14:54.310
Simular Type

14:54.310 --> 14:55.310
多了一个Simular Plugging

14:55.310 --> 14:56.310
这两项

14:56.310 --> 14:57.310
它是没有放空

14:57.310 --> 14:58.310
是没有

14:58.310 --> 14:59.310
那我们来看一下

14:59.310 --> 15:00.310
我们就把

15:00.310 --> 15:01.310
当前的小程序

15:01.310 --> 15:03.310
这里边的几项给看一下

15:03.310 --> 15:05.620
除了前面

15:05.620 --> 15:07.620
我们看到的几项以外的话

15:07.620 --> 15:08.620
包括

15:08.620 --> 15:09.620
你看项目名称

15:09.620 --> 15:10.620
包括是这个

15:10.620 --> 15:11.620
打包的时候

15:11.620 --> 15:14.620
打包当前还不会去做我们

15:14.620 --> 15:15.620
小程序的打包

15:15.620 --> 15:18.620
其实就是上传的时候的选项

15:18.620 --> 15:19.620
上传的时候的话

15:19.620 --> 15:21.620
需要你的这写的

15:21.620 --> 15:22.620
你只要是

15:22.620 --> 15:23.620
你到时候

15:23.620 --> 15:24.620
应用了一个

15:24.620 --> 15:25.620
我们的真实的AVID

15:25.620 --> 15:26.620
这边的上传按钮

15:26.620 --> 15:27.620
你点下去以后

15:27.620 --> 15:29.620
它会有一个表单的形式

15:29.620 --> 15:30.620
让你写

15:30.620 --> 15:31.620
写好以后点提交

15:31.620 --> 15:32.620
那就可以了

15:32.620 --> 15:34.620
它会帮你自己配进去的

15:34.620 --> 15:35.620
紧接着

15:35.620 --> 15:36.620
我们再来看一下

15:36.620 --> 15:41.110
再往下的话

15:41.110 --> 15:43.110
那么我们往下看

15:43.110 --> 15:45.110
这是Setting

15:45.110 --> 15:49.470
Packing的话

15:49.470 --> 15:50.470
是用于我们的

15:50.470 --> 15:51.470
打包过程中的选项

15:51.470 --> 15:52.470
打包过程

15:52.470 --> 15:53.470
现在不用去管

15:53.470 --> 15:54.470
因为本身来讲

15:54.470 --> 15:55.470
刚才说了

15:55.470 --> 15:56.470
它是一个自动过程

15:56.470 --> 15:57.470
可以手写

15:57.470 --> 15:58.470
也可以

15:58.470 --> 15:59.470
Debug

15:59.470 --> 16:00.470
Options

16:00.470 --> 16:01.470
它是指在配置项目中

16:01.470 --> 16:02.470
调适手的选项

16:02.470 --> 16:03.470
这个的话

16:03.470 --> 16:05.470
我们也不自己去写的

16:05.470 --> 16:07.470
这是什么东西呢

16:07.470 --> 16:08.470
Simulator

16:08.470 --> 16:09.470
Simulator Type

16:09.470 --> 16:10.470
Simulator是什么东西

16:10.470 --> 16:11.470
叫模拟器

16:11.470 --> 16:13.470
它指的是这个

16:13.470 --> 16:14.470
这个是什么

16:14.470 --> 16:15.470
是用什么东西来模拟

16:15.470 --> 16:16.470
那指的是WeChat

16:16.470 --> 16:17.470
微信模拟器

16:17.470 --> 16:19.470
这个东西有版本吗

16:19.470 --> 16:20.470
没有

16:20.470 --> 16:21.470
那么这边的话

16:21.470 --> 16:23.470
主要是指

16:23.470 --> 16:25.470
利用现在的

16:25.470 --> 16:27.470
我们利用现在的Taro

16:27.470 --> 16:28.470
在生成的时候

16:28.470 --> 16:30.470
Taro本身自己

16:30.470 --> 16:32.470
我们说生成其他的一些

16:32.470 --> 16:34.470
我们的代码的时候

16:34.470 --> 16:37.470
我们可以用一些指定的模拟器

16:37.470 --> 16:38.470
比如说

16:38.470 --> 16:40.470
比如说有一些

16:40.470 --> 16:42.470
如果你比如生成的是一些

16:42.470 --> 16:43.470
H5页面

16:43.470 --> 16:45.470
然后套了一个安卓的一个框架的话

16:45.470 --> 16:47.470
你就可以用夜神模拟器

16:47.470 --> 16:48.470
对吧

16:48.470 --> 16:49.470
然后iOS模拟器

16:49.470 --> 16:50.470
线上也有好多

16:50.470 --> 16:52.470
那么你这个是模拟器的版本

16:52.470 --> 16:53.470
就是微信本身自己

16:53.470 --> 16:55.470
它只能用微信浏览器来看

16:55.470 --> 16:57.470
也就是在我们Web开发工具里面

16:57.470 --> 16:59.470
所以它这个模拟器

16:59.470 --> 17:01.470
就给你自动加上了

17:01.470 --> 17:02.470
就是

17:02.470 --> 17:03.470
好了

17:03.470 --> 17:05.470
那么这个是微信所给到的

17:05.470 --> 17:06.470
一个配置文件

17:06.470 --> 17:08.470
那么我们只要是

17:08.470 --> 17:10.470
了解这里面的几个配置项

17:10.470 --> 17:11.470
之后

17:11.470 --> 17:13.470
如果说你需要去查看

17:13.470 --> 17:15.470
或者说你要定位的话

17:15.470 --> 17:17.470
你都可以到这边来进行操作

17:17.470 --> 17:18.470
但是还是一点

17:18.470 --> 17:20.470
尽量不要在这里去改代

17:20.470 --> 17:21.470
因为你的所有的改代

17:21.470 --> 17:23.470
它是不会进行编译的

17:23.470 --> 17:26.470
这个是它的一个配置文件

17:26.470 --> 17:28.470
所要给到我们的一个讯息

17:28.470 --> 17:29.470
我们回过头来

17:29.470 --> 17:31.470
那么这下面有几项

17:31.470 --> 17:32.470
我们看到了

17:32.470 --> 17:33.470
它都会有

17:33.470 --> 17:35.470
但是如果说你现在

17:35.470 --> 17:37.470
需要去做百度小程序的话

17:37.470 --> 17:39.470
那么它会自行安照

17:39.470 --> 17:41.470
这个文件的配置

17:41.470 --> 17:43.470
进行转换

17:43.470 --> 17:44.470
在编译的时候

17:44.470 --> 17:45.470
完成百度小程序的

17:45.470 --> 17:47.470
这个文件的创建

17:47.470 --> 17:48.470
因为我们讲过

17:48.470 --> 17:49.470
在编译的时候

17:49.470 --> 17:51.470
我们往前翻一下

17:51.470 --> 17:53.470
在安装和使用的时候

17:53.470 --> 17:56.040
我们往下

17:56.040 --> 17:57.040
咱们看到

17:57.040 --> 17:58.040
不同的小程序

17:58.040 --> 17:59.040
在开发过程中

17:59.040 --> 18:01.040
它这边都会有不同的

18:01.040 --> 18:02.040
编译过程对不对

18:02.040 --> 18:04.040
有编译路径和编译的方法

18:04.040 --> 18:05.040
那么这种时候

18:05.040 --> 18:07.040
它就会去生成

18:07.040 --> 18:08.040
我们刚才看到的

18:08.040 --> 18:09.040
这个格式

18:09.040 --> 18:10.040
ok

18:10.040 --> 18:11.040
那么这就是

18:11.040 --> 18:13.040
它的一个编译文件

18:13.040 --> 18:14.040
其实编译文件

18:14.040 --> 18:15.040
我们只做了解

18:15.040 --> 18:16.040
我们不去做

18:16.040 --> 18:17.040
它的过多的

18:17.040 --> 18:19.040
它不能去做改动

18:19.040 --> 18:21.040
这个项目的配置文件

18:21.040 --> 18:22.040
不是编译

18:22.040 --> 18:23.040
是配置文件

18:23.040 --> 18:24.040
好了

18:24.040 --> 18:25.040
那配置文件的了解

18:25.040 --> 18:26.040
就先到这了

