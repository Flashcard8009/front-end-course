WEBVTT

00:00.000 --> 00:03.000
好 我们继续讲解我们的Tarot的系列课程

00:03.000 --> 00:07.000
这些课呢 给大家讲解一下Tarot中的刷新

00:07.000 --> 00:09.000
那么对于刷新来讲呢

00:09.000 --> 00:11.000
Tarot依然有几个接口可以讲解

00:11.000 --> 00:15.000
比如说Tarot呢 它结合我们的小程序

00:15.000 --> 00:18.000
它是本身自带一个系统函数

00:18.000 --> 00:19.000
能够进行刷新

00:19.000 --> 00:22.000
同时呢 它自己还有两个接口

00:22.000 --> 00:25.000
开始刷新和停止刷新

00:25.000 --> 00:30.810
那么我们来把它写一下

00:30.810 --> 00:31.810
Tarot的刷新

00:31.810 --> 00:34.820
Tarot有个接口

00:34.820 --> 00:36.820
这个接口呢 我们说

00:36.820 --> 00:38.820
首先 它是可以开始刷新

00:38.820 --> 00:41.820
叫做Start

00:41.820 --> 00:42.820
Pour

00:42.820 --> 00:43.820
Down

00:43.820 --> 00:46.840
Fresh

00:46.840 --> 00:49.840
同时它还有一个停止刷新

00:49.840 --> 00:51.840
那么其实就是Stop

00:51.840 --> 00:52.840
Pour

00:52.840 --> 00:53.840
Down

00:53.840 --> 00:54.840
Refresh

00:54.840 --> 01:00.540
但是小程序呢 本身自己还有一个刷新动作

01:00.540 --> 01:10.220
它是在我们的那个配置文件中完成的

01:10.220 --> 01:13.220
所以呢 从这个角度来讲的话呢

01:13.220 --> 01:15.220
我们刷新是有两种形式

01:15.220 --> 01:22.600
那么这些课呢 我把两种形式都给大家讲一下

01:22.600 --> 01:25.600
那么大家呢 平时可以利用各种的

01:25.600 --> 01:28.600
你根据情况 利用任何一种刷新方式

01:28.600 --> 01:30.600
都可以来完成

01:30.600 --> 01:31.600
这个功能

01:31.600 --> 01:32.600
好 我们开始

01:32.600 --> 01:37.040
我们在SRC的配置里面

01:37.040 --> 01:41.630
我们Refresh

01:41.630 --> 01:43.630
创建一个Refresh出来

01:43.630 --> 01:45.630
然后呢

01:45.630 --> 01:47.630
Refresh

01:47.630 --> 01:49.630
e.jxs

01:49.630 --> 01:54.420
我们写一下它的基本结构

01:54.420 --> 02:00.130
Import

02:00.130 --> 02:01.130
Terror

02:01.130 --> 02:05.630
Component

02:05.630 --> 02:08.580
From

02:08.580 --> 02:09.580
Terror

02:09.580 --> 02:12.470
Import

02:12.470 --> 02:22.340
Component

02:22.340 --> 02:23.340
Expert

02:23.340 --> 02:25.340
Default

02:25.340 --> 02:32.200
Class

02:32.200 --> 02:33.200
Extend

02:33.200 --> 02:34.200
Component

02:34.200 --> 02:39.430
Rendle

02:39.430 --> 02:52.280
Return

02:52.280 --> 02:54.280
Refresh

02:54.280 --> 02:57.280
我们把这个写到我们的

02:57.280 --> 02:59.280
JXX里面去

02:59.280 --> 03:19.740
等一下见面

03:19.740 --> 03:20.740
让它先走一下

03:20.740 --> 03:22.740
咱们再去打开啊

03:22.740 --> 03:24.740
微信呢 本身自己是

03:24.740 --> 03:26.740
当你这边刷新在完成以后

03:26.740 --> 03:29.740
它那边才开始进行我们的更新

03:29.740 --> 03:30.740
所以呢

03:30.740 --> 03:32.740
这种时候 你如果一下子把它打开

03:32.740 --> 03:33.740
它在刷新的过程中

03:33.740 --> 03:34.740
你会发现

03:34.740 --> 03:36.740
它有可能会报各种错误出现

03:36.740 --> 03:37.740
所以我们就慢一点

03:37.740 --> 03:39.740
等它这边进行生成

03:39.740 --> 03:41.740
编译完成以后 再去打开

03:41.740 --> 03:43.740
我们刚才看到了

03:43.740 --> 03:45.740
我们现在页面已经出现了Refresh

03:45.740 --> 03:46.740
那我们现在

03:46.740 --> 03:49.740
就可以开始第一种刷新模式

03:49.740 --> 03:50.740
第一种刷新模式呢

03:50.740 --> 03:52.740
我们其实

03:52.740 --> 03:53.740
是要借助于

03:53.740 --> 03:56.740
我们微信本身的有一个功能

03:56.740 --> 03:58.740
就是我们借助于

03:58.740 --> 04:00.740
就先用我们现在的那个

04:00.740 --> 04:02.740
微信或者说

04:02.740 --> 04:04.740
Terror的一个

04:04.740 --> 04:05.740
事件操作吧

04:05.740 --> 04:07.740
就是我们的API

04:07.740 --> 04:09.740
首先 先做界面

04:09.740 --> 04:10.740
我们

04:10.740 --> 04:12.740
做一个非常简单的界面结构

04:12.740 --> 04:17.080
我们做一个

04:17.080 --> 04:19.390
图片

04:19.390 --> 04:21.390
我们做一个图片

04:21.390 --> 04:25.150
class name

04:25.150 --> 04:26.150
container

04:26.150 --> 04:29.550
view

04:29.550 --> 04:36.060
pater section

04:36.060 --> 04:43.020
emater

04:43.020 --> 04:49.430
注册声明

04:49.430 --> 04:51.430
src

04:51.430 --> 04:53.430
图片来自于

04:53.430 --> 04:55.430
首先 这张图片来自于

04:55.430 --> 04:57.430
我们的distance data

04:57.430 --> 04:59.430
里边的有一个emater

04:59.430 --> 05:01.430
我们自个人在外写一下url

05:01.430 --> 05:12.740
当时咱们写出来

05:12.740 --> 05:14.740
然后图片下面咱们给一个文本

05:14.740 --> 05:20.100
注册声明

05:20.100 --> 05:25.230
放大一点

05:25.230 --> 05:31.580
然后在这边写上

05:31.580 --> 05:32.580
图片的名称

05:32.580 --> 05:41.140
distance data.emater title

05:41.140 --> 05:50.380
我们把上面的这两个加一下

05:50.380 --> 05:51.380
首先

05:51.380 --> 05:53.380
我们的第一个title

05:53.380 --> 05:54.380
我们直接写点文字

05:54.380 --> 05:57.380
和给一张图片

05:57.380 --> 06:00.380
我们给个计算机的

06:01.380 --> 06:03.380
计算机的

06:03.380 --> 06:05.380
发展式

06:05.380 --> 06:06.380
然后上面图片呢

06:06.380 --> 06:08.380
我们从网上随便去拿一张

06:08.380 --> 06:10.380
计算机的老图片

06:10.380 --> 06:14.710
这样一张图片出来

06:14.710 --> 06:22.310
好 我们来看一下页面

06:22.310 --> 06:23.310
排在一起了对吧

06:23.310 --> 06:25.310
我们把样式简单设置一下

06:25.310 --> 06:28.620
再建一个页面

06:28.620 --> 06:37.760
样式结构

06:37.760 --> 06:47.280
导入进来

06:47.280 --> 06:48.280
样式里面

06:48.280 --> 06:50.280
我们只对这个pater section

06:50.280 --> 06:58.420
做一下

06:58.420 --> 06:59.420
display

06:59.420 --> 07:02.050
flex

07:02.050 --> 07:05.050
flex direction

07:05.050 --> 07:11.240
just a contender

07:11.240 --> 07:14.240
center

07:14.240 --> 07:16.240
light

07:16.240 --> 07:18.240
center

07:18.240 --> 07:20.620
hi

07:20.620 --> 07:22.620
我们给它一个1600upx

07:22.620 --> 07:31.910
再看一下界面

07:31.910 --> 07:33.910
在中间位置

07:33.910 --> 07:42.790
太高了

07:42.790 --> 07:43.790
800

07:43.790 --> 07:46.790
好了 图片在中间已经出来了

07:46.790 --> 07:47.790
紧接着呢

07:47.790 --> 07:50.790
我们要采取让它进行刷新的动作

07:50.790 --> 07:52.790
那么它的刷新呢

07:52.790 --> 07:53.790
我们要看一下

07:53.790 --> 07:54.790
本身在页面中

07:54.790 --> 07:56.790
我们没有做过任何

07:56.790 --> 07:58.790
刷新的一个功能

07:58.790 --> 07:59.790
那么此时呢

07:59.790 --> 08:01.790
我们就需要去到哪儿

08:01.790 --> 08:03.790
需要去到我们的配置文件

08:03.790 --> 08:04.790
配置文件呢

08:04.790 --> 08:05.790
在我们的

08:05.790 --> 08:10.360
app.jx里面

08:10.360 --> 08:12.360
在它里面的话

08:12.360 --> 08:14.360
我们找到window

08:14.360 --> 08:16.360
找到window对象

08:16.360 --> 08:17.360
window对象本身里面

08:17.360 --> 08:19.360
就有一个值存在

08:19.360 --> 08:20.360
那么我们呢

08:20.360 --> 08:22.360
我们先把这个值打出来

08:22.360 --> 08:25.360
它有个enable

08:25.360 --> 08:28.820
我们看一下

08:28.820 --> 08:33.670
pulldown refresh

08:33.670 --> 08:35.670
它有这个值在

08:35.670 --> 08:37.670
我们一旦设它为q的话

08:37.670 --> 08:38.670
不要保存

08:38.670 --> 08:40.670
我们一旦设它为q的时候

08:40.670 --> 08:41.670
那么代表着

08:41.670 --> 08:42.670
所有页面

08:42.670 --> 08:43.670
都可以进行

08:43.670 --> 08:45.670
下拉刷新这个动作

08:45.670 --> 08:46.670
但是如果说

08:46.670 --> 08:48.670
我仅需要当前页面

08:48.670 --> 08:50.670
进行这部分操作的话

08:50.670 --> 08:51.670
那我们就可以把

08:51.670 --> 08:52.670
这行代码

08:52.670 --> 08:54.670
直接从app.jx里面

08:54.670 --> 08:56.670
写到我们当前页面中

08:56.670 --> 08:57.670
而当前页面中

08:57.670 --> 08:59.670
如果你要写这样一个格式的话

08:59.670 --> 09:01.670
你就要创建它的一个叫做什么

09:01.670 --> 09:08.310
configure

09:08.310 --> 09:10.310
同时当前页面中呢

09:10.310 --> 09:11.310
我们还可以改变一下

09:11.310 --> 09:13.310
它的一个标题名称

09:13.310 --> 09:16.690
我们改成叫做

09:16.690 --> 09:18.690
刷新操作

09:18.690 --> 09:21.060
好保存

09:21.060 --> 09:30.070
现在你再来看一下

09:30.070 --> 09:31.070
图片出来了

09:31.070 --> 09:33.070
当前页面就有这个刷新动作了

09:33.070 --> 09:35.070
刷新以后的这个

09:35.070 --> 09:36.070
说明一下

09:36.070 --> 09:38.070
刷新本身后面的这个点

09:38.070 --> 09:39.070
包括这个灰色

09:39.070 --> 09:41.070
都不是我本身在

09:41.070 --> 09:42.070
当前页面中设定的

09:42.070 --> 09:44.070
而在jxx里面

09:44.070 --> 09:45.070
在这边设定的

09:45.070 --> 09:46.070
这个白色

09:46.070 --> 09:48.070
这样的一个颜色配置

09:48.070 --> 09:49.070
所以你呢

09:49.070 --> 09:50.070
如果单独你要改的话

09:50.070 --> 09:52.070
你单独写在configure里面进行修改

09:52.070 --> 09:55.070
然后把这部分完成以后的话

09:55.070 --> 09:56.070
那么我们说

09:56.070 --> 09:58.070
当前页面就有了一个能够

09:58.070 --> 10:00.070
刷新的动作

10:00.070 --> 10:01.070
当前页面有了一个

10:01.070 --> 10:02.070
刷新的动作

10:02.070 --> 10:03.070
但是呢

10:03.070 --> 10:04.070
它并不是

10:04.070 --> 10:07.070
我们真正刷新的位置

10:07.070 --> 10:09.070
那么真正的刷新的动作呢

10:09.070 --> 10:11.070
是叫做enable pull down refresh

10:11.070 --> 10:13.070
它要去激发一个

10:13.070 --> 10:16.070
我们本身在当前小程序中

10:16.070 --> 10:19.070
有的一个系统函数

10:19.070 --> 10:20.070
这个系统函数呢

10:20.070 --> 10:22.070
我们叫做on

10:22.070 --> 10:23.070
打出来

10:23.070 --> 10:24.070
on

10:24.070 --> 10:25.070
看

10:25.070 --> 10:26.070
它会给你一个提示

10:26.070 --> 10:28.070
on pull down refresh

10:28.070 --> 10:29.070
这个就是

10:29.070 --> 10:31.070
一旦你执行了

10:31.070 --> 10:34.070
我们现在下刷新的这个动作以后

10:34.070 --> 10:37.070
它会自动的完成on pull down refresh

10:37.070 --> 10:39.070
这个事件的操作

10:39.070 --> 10:40.070
系统

10:40.070 --> 10:41.070
事件

10:41.070 --> 10:43.700
当

10:43.700 --> 10:49.680
enable pull down refresh

10:49.680 --> 10:51.680
设置为

10:51.680 --> 10:55.820
q的时候

10:55.820 --> 10:56.820
直接

10:56.820 --> 10:57.820
触发

10:57.820 --> 11:00.260
所以在这里面呢

11:00.260 --> 11:02.260
我们大家就可以去写

11:02.260 --> 11:04.260
我们所需要的一些功能了

11:04.260 --> 11:05.260
第一个

11:05.260 --> 11:08.260
我们这边可以去做一个

11:08.260 --> 11:09.260
设定

11:09.260 --> 11:10.260
比如说

11:10.260 --> 11:11.260
我们把

11:11.260 --> 11:12.260
现在的图片

11:12.260 --> 11:13.260
改成

11:13.260 --> 11:14.260
另一张

11:14.260 --> 11:16.260
我们来做

11:16.260 --> 11:19.260
当前的setter stator

11:19.260 --> 11:21.260
里面的

11:21.260 --> 11:22.260
图片

11:22.260 --> 11:25.260
img

11:25.260 --> 11:27.260
url

11:27.260 --> 11:29.260
然后你去改成另一张图片

11:29.260 --> 11:30.260
那我从网上

11:30.260 --> 11:32.260
随便再拿一张图片下来

11:32.260 --> 11:36.340
这也是另一张计算机图片

11:36.340 --> 11:41.870
img title

11:41.870 --> 11:45.440
我叫做

11:45.440 --> 11:47.440
旧照片的记忆

11:47.440 --> 11:52.800
这样拿好以后呢

11:52.800 --> 11:53.800
它页面

11:53.800 --> 11:55.800
就会完成这个刷新

11:55.800 --> 11:57.800
千万不要拿同样的图片

11:57.800 --> 11:58.800
拿过来

11:58.800 --> 11:59.800
原因很简单

11:59.800 --> 12:00.800
Taro本身自己

12:00.800 --> 12:02.800
在对数据没有更新的

12:02.800 --> 12:04.800
或者说没有变化的时候

12:04.800 --> 12:06.800
它是不会进行渲染的

12:06.800 --> 12:07.800
所以这样做

12:07.800 --> 12:08.800
我们就可以完成

12:08.800 --> 12:10.800
它的一个刷新动作

12:10.800 --> 12:13.300
我们来看啊

12:13.300 --> 12:14.300
打开

12:14.300 --> 12:15.300
下拉

12:15.300 --> 12:16.300
放

12:16.300 --> 12:17.300
是不是变了

12:17.300 --> 12:18.300
是不是一看到

12:18.300 --> 12:19.300
图片换了

12:19.300 --> 12:21.300
文本也换了

12:21.300 --> 12:22.300
那么

12:22.300 --> 12:23.300
这样就构建出了

12:23.300 --> 12:26.300
我们现在的一个基本刷新功能

12:26.300 --> 12:29.680
你在没有进行下拉的时候

12:29.680 --> 12:30.680
它所呈现的

12:30.680 --> 12:32.680
是我们初始数据

12:32.680 --> 12:33.680
在你进行下拉以后

12:33.680 --> 12:34.680
只要你一放

12:34.680 --> 12:36.680
它立马会更新为

12:36.680 --> 12:37.680
我们的

12:37.680 --> 12:38.680
事件里的

12:38.680 --> 12:40.680
这个图片和文本

12:40.680 --> 12:41.680
但是这里面

12:41.680 --> 12:42.680
也有几个点

12:42.680 --> 12:44.680
我们需要说明的是

12:44.680 --> 12:46.680
我们还没有完成说好

12:46.680 --> 12:47.680
首先

12:47.680 --> 12:49.680
正常情况下

12:49.680 --> 12:50.680
应该是

12:50.680 --> 12:52.680
我加载完数据了

12:52.680 --> 12:53.680
那么这时候呢

12:53.680 --> 12:54.680
整个这上面的

12:54.680 --> 12:55.680
下拉刷新这功能

12:55.680 --> 12:56.680
应该就结束了

12:56.680 --> 12:57.680
但你看到

12:57.680 --> 12:58.680
我图片更新了

12:58.680 --> 12:59.680
这个文本

12:59.680 --> 13:00.680
还在那边操作

13:00.680 --> 13:02.680
这就是我们要去使用

13:02.680 --> 13:03.680
我们的一个接口

13:03.680 --> 13:04.680
也就是说

13:04.680 --> 13:06.680
整个这个功能

13:06.680 --> 13:08.680
它本身有一个默认

13:08.680 --> 13:09.680
时间在那边

13:09.680 --> 13:10.680
所以呢

13:10.680 --> 13:11.680
我们一旦更新完

13:11.680 --> 13:12.680
这个操作

13:12.680 --> 13:14.680
我们就应该掉一下

13:14.680 --> 13:16.680
我们叫做停止事件

13:16.680 --> 13:17.680
呃

13:17.680 --> 13:18.680
那个

13:18.680 --> 13:19.680
更新

13:19.680 --> 13:20.680
下拉更新的

13:20.680 --> 13:25.420
这样的一个接口

13:25.420 --> 13:26.420
调用

13:26.420 --> 13:27.420
停止

13:27.420 --> 13:28.420
事件

13:28.420 --> 13:32.440
更新的

13:32.440 --> 13:33.440
下拉

13:33.440 --> 13:34.440
接口

13:34.440 --> 13:35.440
那就是

13:35.440 --> 13:36.440
Taro

13:36.440 --> 13:37.440
就是我们刚刚说的这个

13:37.440 --> 13:39.440
Stop

13:39.440 --> 13:41.440
Pull down refresh

13:41.440 --> 13:43.440
给出这个了

13:43.440 --> 13:44.440
它的开始

13:44.440 --> 13:46.440
是系统自动完成的

13:46.440 --> 13:47.440
当然

13:47.440 --> 13:48.440
我们也可以

13:48.440 --> 13:49.440
去做我们

13:49.440 --> 13:51.440
现在的一个开始事件

13:51.440 --> 13:53.440
但是由于系统已经做了

13:53.440 --> 13:54.440
所以呢

13:54.440 --> 13:56.440
我们不需要再去加那个时间出来

13:56.440 --> 13:57.440
ok吧

13:57.440 --> 13:58.440
好

13:58.440 --> 13:59.440
紧接着我们再来看

13:59.440 --> 14:01.440
当你这样做好以后的话

14:01.440 --> 14:03.440
我们在一起刷新界面

14:03.440 --> 14:04.440
你会发现

14:04.440 --> 14:05.440
一刷新

14:05.440 --> 14:07.440
只要这边更新了

14:07.440 --> 14:09.440
它立马上面这个操作

14:09.440 --> 14:10.440
就被回收了

14:10.440 --> 14:11.440
也就是说

14:11.440 --> 14:12.440
消失了

14:12.440 --> 14:13.440
那么

14:13.440 --> 14:14.440
我们如果说

14:14.440 --> 14:15.440
想做的

14:15.440 --> 14:16.440
再

14:16.440 --> 14:17.440
像我们正常的一些情况

14:17.440 --> 14:18.440
因为这个数据呢

14:18.440 --> 14:19.440
是我

14:19.440 --> 14:20.440
写死的

14:20.440 --> 14:21.440
如果说我们从网上

14:21.440 --> 14:22.440
或者是从云端

14:22.440 --> 14:24.440
去获取数据的话

14:24.440 --> 14:25.440
一定会存在一个概念

14:25.440 --> 14:26.440
就是有一个

14:26.440 --> 14:27.440
周期性

14:27.440 --> 14:28.440
所以呢

14:28.440 --> 14:29.440
我们在前面

14:29.440 --> 14:31.440
你可以先做一个

14:31.440 --> 14:33.440
那个Louding操作

14:33.440 --> 14:35.440
我们来看啊

14:35.440 --> 14:36.440
我们在这边

14:36.440 --> 14:38.440
我们可以先做

14:38.440 --> 14:40.940
Louding

14:40.940 --> 14:42.940
Louding还记得吗

14:42.940 --> 14:46.830
Taro

14:46.830 --> 14:48.830
修Louding

14:48.830 --> 14:52.830
修Louding有一个

14:52.830 --> 14:58.830
直接这样打就可以

14:58.830 --> 14:59.830
直接这样打就可以

14:59.830 --> 15:00.830
我们

15:00.830 --> 15:02.830
依然是可以给它里面

15:02.830 --> 15:03.830
加一参数

15:03.830 --> 15:05.830
就是Louding的时候

15:05.830 --> 15:06.830
显示文本

15:06.830 --> 15:07.830
我们称之为

15:07.830 --> 15:09.830
正在

15:09.830 --> 15:11.830
加载

15:11.830 --> 15:13.830
做一个简单提示

15:13.830 --> 15:14.830
那么

15:14.830 --> 15:15.830
这个功能呢

15:15.830 --> 15:16.830
我们这边呢

15:16.830 --> 15:20.830
再做一个简单的

15:20.830 --> 15:24.270
set time out

15:24.270 --> 15:25.270
我们做一个set time out

15:25.270 --> 15:26.270
让它过一些时间

15:26.270 --> 15:27.270
让我们看到

15:27.270 --> 15:28.270
上面这个功能

15:28.270 --> 15:30.270
先显示正在加载

15:30.270 --> 15:31.270
是吧

15:31.270 --> 15:32.270
所以呢

15:32.270 --> 15:33.270
我们这边做一个set time out

15:33.270 --> 15:37.860
这是模拟

15:37.860 --> 15:38.860
我们给出一个时间

15:38.860 --> 15:43.940
一秒钟

15:43.940 --> 15:45.940
把整个这套内容

15:45.940 --> 15:49.570
全部放进去

15:49.570 --> 15:50.570
把整个这套内容

15:50.570 --> 15:52.570
全部放进去

15:52.570 --> 15:54.570
当你这样建好以后的话

15:54.570 --> 15:56.570
那我们系统一旦刷新以后

15:56.570 --> 15:58.570
它立马会呈现正在加载

15:58.570 --> 16:00.570
然后一秒钟以后

16:00.570 --> 16:02.570
停止整个这个操作

16:02.570 --> 16:05.570
并且已经完成更新

16:05.570 --> 16:06.570
再来看一下

16:06.570 --> 16:07.570
下拉

16:07.570 --> 16:08.570
放

16:08.570 --> 16:09.570
正在加载

16:09.570 --> 16:10.570
上去

16:10.570 --> 16:11.570
是不是

16:11.570 --> 16:14.570
最后我们把它给关了

16:14.570 --> 16:19.310
在这

16:19.310 --> 16:23.220
停止

16:23.220 --> 16:24.220
楼顶

16:24.220 --> 16:28.540
terror点

16:28.540 --> 16:30.540
嗯

16:30.540 --> 16:31.540
hit

16:31.540 --> 16:32.540
楼顶

16:32.540 --> 16:35.170
好

16:35.170 --> 16:36.170
现在再来看一下

16:36.170 --> 16:43.920
操作

16:43.920 --> 16:45.920
下放

16:45.920 --> 16:46.920
刷新

16:46.920 --> 16:47.920
完成

16:47.920 --> 16:48.920
对吧

16:48.920 --> 16:49.920
这样呢

16:49.920 --> 16:51.920
就符合我们现在开发的一些

16:51.920 --> 16:54.920
基本的一个显示情况了

16:54.920 --> 16:56.920
刷新应该不是那么快

16:56.920 --> 16:58.920
但是中间也有一个过渡

16:58.920 --> 16:59.920
正在加载

16:59.920 --> 17:00.920
对吧

17:00.920 --> 17:01.920
完成

17:01.920 --> 17:03.920
那么这种刷新呢

17:03.920 --> 17:05.920
它是借助于我们事件

17:05.920 --> 17:08.920
所做的一个on pull down refresh

17:08.920 --> 17:09.920
同时呢

17:09.920 --> 17:11.920
它用到了我们现在的一些

17:11.920 --> 17:13.920
停止事件的一些接口

17:13.920 --> 17:15.920
这个就是我们前面说到的

17:15.920 --> 17:17.920
停止下拉事件

17:17.920 --> 17:20.920
你并不需要在这边再去做一个

17:20.920 --> 17:23.920
on start pull down refresh

17:23.920 --> 17:25.920
因为系统的这个值

17:25.920 --> 17:26.920
是系统自动完成的

17:26.920 --> 17:28.920
如果系统没有这个值

17:28.920 --> 17:29.920
那么你需要去做刷新

17:29.920 --> 17:30.920
其实

17:30.920 --> 17:32.920
我们的所有事件

17:32.920 --> 17:33.920
包括是在这里面

17:33.920 --> 17:35.920
只要有触发这个功能的话

17:35.920 --> 17:36.920
也就是说

17:36.920 --> 17:38.920
我们下面不是有一个

17:38.920 --> 17:39.920
enable pull down refresh嘛

17:39.920 --> 17:41.920
只要有触发源的话

17:41.920 --> 17:43.920
我们就没有必要去做

17:43.920 --> 17:44.920
start pull down refresh

17:44.920 --> 17:46.920
如果没有触发源

17:46.920 --> 17:47.920
你这时候就想刷新

17:47.920 --> 17:48.920
那么必须做这个事

17:48.920 --> 17:49.920
我们举例

17:49.920 --> 17:50.920
当前页面

17:50.920 --> 17:53.920
每五分钟自动刷新一次

17:53.920 --> 17:55.920
这种时候是没有任何操作

17:55.920 --> 17:57.920
到那个时间了

17:57.920 --> 17:58.920
你要刷新

17:58.920 --> 18:00.920
那你就得做我们刚才所谓的

18:00.920 --> 18:02.920
on start pull down refresh

18:02.920 --> 18:03.920
OK吧

18:03.920 --> 18:04.920
这是

18:04.920 --> 18:05.920
第一种功能

18:05.920 --> 18:06.920
也就是

18:06.920 --> 18:08.920
借助于系统来做的

18:08.920 --> 18:09.920
那么我们开始讲

18:09.920 --> 18:10.920
第二种

18:10.920 --> 18:11.920
就是

18:11.920 --> 18:13.920
当你整个页面

18:13.920 --> 18:15.920
我们并非是上面

18:15.920 --> 18:17.920
这个所谓的点点点的

18:17.920 --> 18:18.920
拉动

18:18.920 --> 18:20.920
而是我拖到底部

18:20.920 --> 18:22.920
由底部完成

18:22.920 --> 18:23.920
夹载刷新

18:23.920 --> 18:25.920
这样的一个动作

18:25.920 --> 18:26.920
由底部完成

18:26.920 --> 18:28.920
夹载刷新这个动作

18:28.920 --> 18:29.920
那么这样的话

18:29.920 --> 18:30.920
我们来做这个样的

18:30.920 --> 18:32.920
一个格式了

18:32.920 --> 18:33.920
我们

18:33.920 --> 18:35.920
再创建一个界面出来

18:35.920 --> 18:36.920
叫

18:36.920 --> 18:38.920
refresh to

18:38.920 --> 18:59.410
我们同样

18:59.410 --> 19:00.410
把refresh to

19:00.410 --> 19:01.410
里面的内容

19:01.410 --> 19:02.410
从E里面

19:02.410 --> 19:03.410
过来一下

19:03.410 --> 19:05.910
修改一下

19:05.910 --> 19:07.910
这个夹载的是2页面

19:07.910 --> 19:09.910
然后这边完成

19:09.910 --> 19:11.910
refresh to的

19:11.910 --> 19:12.910
类的

19:12.910 --> 19:14.910
格式

19:14.910 --> 19:16.910
然后里边

19:16.910 --> 19:17.910
我们这边写的是

19:17.910 --> 19:38.280
random view

19:38.280 --> 19:42.170
refresh to

19:42.170 --> 19:43.170
这两个暂时没用

19:43.170 --> 19:44.170
先删掉

19:44.170 --> 19:45.170
待会用了

19:45.170 --> 19:46.170
咱们再往上夹

19:46.170 --> 19:48.170
写出这个内容来

19:48.170 --> 19:50.170
然后我们把它夹到我们的

19:50.170 --> 19:52.170
不是global

19:52.170 --> 19:53.170
我们的

19:53.170 --> 19:55.480
没打开

19:55.480 --> 19:56.480
我们的

19:56.480 --> 19:58.480
app.jx里面

19:58.480 --> 20:11.930
好

20:11.930 --> 20:13.930
处已经夹载出来了

20:13.930 --> 20:14.930
紧接着

20:14.930 --> 20:15.930
我们这边再来

20:15.930 --> 20:16.930
我们这边

20:16.930 --> 20:18.930
我们可以把整个

20:18.930 --> 20:19.930
这个内容

20:19.930 --> 20:20.930
完成

20:20.930 --> 20:21.930
一个简单的界面

20:21.930 --> 20:23.930
我们做一个

20:23.930 --> 20:25.930
新闻列表

20:25.930 --> 20:27.930
我们做一个新闻的简单列表

20:27.930 --> 20:28.930
然后

20:28.930 --> 20:29.930
让它在不断的

20:29.930 --> 20:30.930
向下滚动过程中

20:30.930 --> 20:32.930
继续夹载

20:32.930 --> 20:33.930
形成这个效果

20:33.930 --> 20:35.930
简单做一个界面

20:35.930 --> 20:39.780
container

20:39.780 --> 20:47.700
pader

20:47.700 --> 20:48.700
section

20:48.700 --> 20:52.070
那么我里边的话

20:52.070 --> 20:54.070
我就写一个

20:54.070 --> 20:55.070
写两

20:55.070 --> 20:56.070
写一个复制一下

20:56.070 --> 20:57.070
待会我们之后

20:57.070 --> 20:58.070
可以采取我们中间

20:58.070 --> 20:59.070
这部分内容

20:59.070 --> 21:00.070
让它进行循环

21:00.070 --> 21:02.070
用map 形式来做

21:02.070 --> 21:03.070
循环的结构

21:03.070 --> 21:05.070
我们写一个

21:05.070 --> 21:06.070
class

21:06.070 --> 21:07.070
咱们叫做

21:07.070 --> 21:09.070
news

21:09.070 --> 21:11.070
luster

21:11.070 --> 21:12.070
item

21:12.070 --> 21:13.070
title

21:15.770 --> 21:17.770
在这个里面

21:17.770 --> 21:19.770
我们给出

21:19.770 --> 21:21.770
比如说标题

21:21.770 --> 21:26.230
学习是一件

21:26.230 --> 21:36.230
思想

21:36.230 --> 21:37.230
工作

21:37.230 --> 21:39.230
随便写一个新闻标题

21:39.230 --> 21:41.230
然后

21:41.230 --> 21:43.230
我们把它呢

21:43.230 --> 21:46.930
在下面

21:46.930 --> 21:48.930
我们在旁边再写一个

21:48.930 --> 21:54.310
我们的

21:54.310 --> 21:56.310
再写个view出来

21:56.310 --> 21:58.310
把它含在里面

21:58.310 --> 22:00.310
写个tester吧

22:00.310 --> 22:08.270
把它放进去

22:08.270 --> 22:11.740
那我们把它的title

22:11.740 --> 22:20.170
我们往里放

22:20.170 --> 22:22.170
我们title往里放

22:22.170 --> 22:23.170
然后呢

22:23.170 --> 22:25.170
给它定为一个item吧

22:25.170 --> 22:31.260
text

22:31.260 --> 22:33.260
注册声明一下

22:33.260 --> 22:41.520
在学习是一件

22:41.520 --> 22:42.520
这个字体

22:42.520 --> 22:43.520
显示以后的话呢

22:43.520 --> 22:45.520
我们这边给一个

22:45.520 --> 22:46.520
箭头

22:46.520 --> 22:50.150
这边咱们给一个class

22:50.150 --> 22:56.920
咱们叫flag

22:56.920 --> 22:57.920
简单的

22:57.920 --> 22:59.920
把它样式定一下

22:59.920 --> 23:01.920
它没有几个

23:01.920 --> 23:03.920
歌词可以

23:03.920 --> 23:04.920
多定的

23:04.920 --> 23:05.920
我们只要定几个样式

23:05.920 --> 23:09.320
就可以

23:09.320 --> 23:12.660
section

23:12.660 --> 23:13.660
宽度

23:13.660 --> 23:14.660
95%

23:14.660 --> 23:19.890
background

23:19.890 --> 23:22.890
white

23:22.890 --> 23:23.890
news

23:23.890 --> 23:24.890
lister

23:24.890 --> 23:25.890
item

23:25.890 --> 23:34.280
merge

23:34.280 --> 23:35.280
10rpx

23:35.280 --> 23:36.280
0

23:36.280 --> 23:41.580
news

23:41.580 --> 23:43.580
lister

23:43.580 --> 23:45.580
item的title

23:45.580 --> 23:48.340
font

23:48.340 --> 23:49.340
size

23:49.340 --> 23:57.380
我们给的是5个vw

23:57.380 --> 23:58.380
merge

23:58.380 --> 24:00.380
10rpx

24:00.380 --> 24:01.380
0

24:01.380 --> 24:08.600
再来给一个flag

24:08.600 --> 24:09.600
floor

24:09.600 --> 24:14.410
right

24:14.410 --> 24:15.410
right

24:15.410 --> 24:17.410
30rpx

24:17.410 --> 24:18.410
好了

24:18.410 --> 24:19.410
要是我们就这样写好

24:19.410 --> 24:20.410
看一下页面的结构

24:20.410 --> 24:27.820
就这么一条

24:27.820 --> 24:28.820
好

24:28.820 --> 24:30.820
那我们把它底色

24:30.820 --> 24:31.820
明显一点

24:31.820 --> 24:33.820
它的底色应该是

24:33.820 --> 24:35.820
section

24:35.820 --> 24:37.820
应该是它

24:37.820 --> 24:39.820
它的底色应该是这个item

24:39.820 --> 24:42.900
listitem

24:42.900 --> 24:50.050
background color

24:50.050 --> 24:58.760
dd

24:58.760 --> 25:03.120
出来了

25:03.120 --> 25:04.120
不用它也可以

25:04.120 --> 25:05.120
我们就是

25:05.120 --> 25:06.120
我们就这样来吧

25:06.120 --> 25:07.120
然后我复制一下出来

25:07.120 --> 25:08.120
咱们看

25:08.120 --> 25:11.120
我复制这个section

25:11.120 --> 25:16.140
我们到时候进行循环的时候

25:16.140 --> 25:19.140
我们采用的是item循环

25:19.140 --> 25:22.450
我们把item进行循环

25:22.450 --> 25:23.450
所以复制两个

25:23.450 --> 25:32.330
看一下两个的拍板

25:32.330 --> 25:33.330
就这样吧

25:33.330 --> 25:34.330
好

25:34.330 --> 25:35.330
那我数据很多

25:35.330 --> 25:37.330
就可以在这里面不断的让它形成

25:37.330 --> 25:39.330
所需要的一个

25:39.330 --> 25:43.600
map操作

25:43.600 --> 25:44.600
首先

25:44.600 --> 25:46.600
我们先把这个结构放置

25:46.600 --> 25:48.600
样式也好了

25:48.600 --> 25:50.600
然后我们得去到它内部

25:50.600 --> 25:54.600
我们去先定义几个数据出来

25:54.600 --> 25:56.600
先定义几个数据

25:56.600 --> 25:58.600
然后把几个数据

25:58.600 --> 26:00.600
让页面中能够进行

26:00.600 --> 26:02.600
循环显示

26:02.600 --> 26:04.600
我们就直接定在我们的

26:04.600 --> 26:06.600
status里面

26:06.600 --> 26:10.870
我们定的是叫做

26:10.870 --> 26:12.870
咱们定一个news

26:12.870 --> 26:15.250
list

26:15.250 --> 26:17.250
数组

26:17.250 --> 26:19.250
我们写上

26:20.250 --> 26:25.740
parallel学习

26:25.740 --> 26:26.740
是

26:26.740 --> 26:29.110
需要

26:29.110 --> 26:30.110
认真

26:30.110 --> 26:32.110
对待的

26:32.110 --> 26:34.110
第一个标题

26:34.110 --> 26:35.110
第二个标题

26:35.110 --> 26:38.380
学习

26:38.380 --> 26:49.820
没有接近

26:49.820 --> 26:58.380
才能成功

26:58.380 --> 27:00.380
就写这两句

27:00.380 --> 27:02.380
然后我把它复制一下吧

27:02.380 --> 27:04.380
最后加个

27:04.380 --> 27:06.380
前面咱们加个逗号

27:06.380 --> 27:14.370
然后这样子我们进行复制

27:14.370 --> 27:16.370
我复制了五次

27:16.370 --> 27:20.370
就把前面逗号给删了

27:20.370 --> 27:22.370
然后有这样的一个数据

27:22.370 --> 27:23.370
出来了

27:23.370 --> 27:24.370
那么这个数据的话

27:24.370 --> 27:26.370
我们就可以在这边

27:26.370 --> 27:28.370
让它进行循环

27:28.370 --> 27:29.370
循环的话

27:29.370 --> 27:31.370
我们采取的是map循环结构

27:31.370 --> 27:33.370
把整个这一段

27:33.370 --> 27:36.370
放在一个jxtar的表达室里面

27:36.370 --> 27:39.370
然后针对当前的status

27:39.370 --> 27:41.370
它里边的news list

27:41.370 --> 27:43.370
我们做map

27:43.370 --> 27:44.370
循环的时候

27:44.370 --> 27:46.370
我们里边拿出它的item

27:46.370 --> 27:47.370
每一项

27:47.370 --> 27:49.370
同时可以拿出它index

27:49.370 --> 27:50.370
然后我们这里面

27:50.370 --> 27:53.370
以大过号方式做return

27:53.370 --> 27:55.370
return用一个小过号

27:55.370 --> 27:57.370
把你刚才的整个jxtar的原码

27:57.370 --> 28:01.640
放进来

28:01.640 --> 28:02.640
放进来

28:02.640 --> 28:04.640
然后我们修改一下

28:04.640 --> 28:06.640
我们把当前的这个文本

28:06.640 --> 28:08.640
给它改一改

28:08.640 --> 28:11.640
接成item

28:11.640 --> 28:13.640
这把item相拿出来

28:13.640 --> 28:15.640
但是整个在这上面的话

28:15.640 --> 28:18.640
我们再加一个tarrow key

28:18.640 --> 28:23.980
等于我们的index

28:23.980 --> 28:25.980
这样去这样

28:25.980 --> 28:26.980
保存一下

28:26.980 --> 28:28.980
来看一下界面

28:28.980 --> 28:37.150
触距出来了吧

28:37.150 --> 28:39.150
至少现在咱们看到

28:39.150 --> 28:41.150
我可以有一个滚轴出现

28:41.150 --> 28:43.150
就意味着我可以到底部

28:43.150 --> 28:45.150
我可以触碰底部

28:45.150 --> 28:47.150
这个逻辑通吧

28:47.150 --> 28:48.150
ok的

28:48.150 --> 28:50.150
紧接着我们继续往下

28:50.150 --> 28:52.150
那么触碰底部

28:52.150 --> 28:55.150
又有一个微信的事件

28:55.150 --> 28:57.150
触碰底部又有一个

28:57.150 --> 28:59.150
微信的事件可以去做

28:59.150 --> 29:01.150
我们首先来想一下

29:01.150 --> 29:04.150
系统的本身给出的一个事件

29:04.150 --> 29:06.150
我们在之前也说过

29:06.150 --> 29:08.150
系统函数事件有两种

29:08.150 --> 29:10.150
一种是称之为生命周期钩子

29:10.150 --> 29:12.150
我们可以让它在固定的时间

29:12.150 --> 29:13.150
去执行

29:13.150 --> 29:15.150
我们的一个

29:15.150 --> 29:16.150
特定操作

29:16.150 --> 29:17.150
而第二种呢

29:17.150 --> 29:18.150
成为系统函数

29:18.150 --> 29:21.150
系统函数包括是下拉刷新

29:21.150 --> 29:24.150
触底的一个触发

29:24.150 --> 29:26.150
包括是转发

29:26.150 --> 29:28.150
这种功能我们都称之为叫

29:28.150 --> 29:29.150
系统函数

29:29.150 --> 29:31.150
或者成为系统事件

29:31.150 --> 29:32.150
都可以

29:32.150 --> 29:33.150
那么这里面就包含

29:33.150 --> 29:35.150
我们现在要说的一个就是

29:35.150 --> 29:40.150
触底的上拉触底事件

29:40.150 --> 29:42.150
我们在Stator的

29:42.150 --> 29:44.150
后面我们在这写

29:44.150 --> 29:47.150
Stator前面我们一般只写一个

29:47.150 --> 29:49.150
我们如果说没有数据的话

29:49.150 --> 29:51.150
我们其实在这也可以把它写全

29:51.150 --> 29:53.150
它只要写一个

29:53.150 --> 29:57.870
Constructor

29:57.870 --> 29:58.870
你这样的结构写

29:58.870 --> 30:01.870
然后生命周期在Stator后面写

30:01.870 --> 30:02.870
我们写上

30:02.870 --> 30:04.870
Un注意

30:04.870 --> 30:06.870
是哪个按钮呢

30:06.870 --> 30:08.870
刚才我们前面做的这个

30:08.870 --> 30:09.870
我们知道了

30:09.870 --> 30:11.870
这个叫做一面滚动

30:11.870 --> 30:13.870
这个叫下拉刷新

30:13.870 --> 30:15.870
而是这个

30:15.870 --> 30:17.870
Reach Button

30:17.870 --> 30:19.870
它指的是

30:19.870 --> 30:21.870
页面触底以后的

30:21.870 --> 30:25.180
这是系统函数

30:25.180 --> 30:30.570
系统事件

30:30.570 --> 30:33.570
滚动到页面

30:33.570 --> 30:38.610
底部的时候的

30:38.610 --> 30:40.610
自动触发

30:40.610 --> 30:45.560
它可以有这样的一个操作

30:45.560 --> 30:47.560
所以我们这边就可以

30:47.560 --> 30:50.560
给它做一个简单的提示了

30:50.560 --> 30:52.560
首先我们现在先看一下

30:52.560 --> 30:54.560
这个事件是否在我们Teller中

30:54.560 --> 30:56.560
能够正常启用

30:56.560 --> 30:59.560
滚动到页面底部

30:59.560 --> 31:01.560
一旦我使用这个事件以后

31:01.560 --> 31:03.560
应该在页面底部

31:03.560 --> 31:06.560
它就会出现这样的一个文本

31:06.560 --> 31:08.560
刚开始的时候是没有的

31:08.560 --> 31:10.560
没有对吧

31:10.560 --> 31:11.560
滚动一点点

31:11.560 --> 31:13.560
一旦你看我到底部了

31:13.560 --> 31:14.560
你看我现在再往下

31:14.560 --> 31:15.560
没有了对吧

31:15.560 --> 31:16.560
我回上去

31:16.560 --> 31:17.560
再往下滚

31:17.560 --> 31:18.560
触底看到吗

31:18.560 --> 31:19.560
滚到页面底部

31:19.560 --> 31:21.560
又呈现出来

31:21.560 --> 31:22.560
说明这个事件

31:22.560 --> 31:24.560
至少现在是起作用的

31:24.560 --> 31:27.560
然后我们现在再来

31:27.560 --> 31:30.560
Stator里面去设置一个变量

31:30.560 --> 31:32.560
我们想让它在滚动的时候

31:32.560 --> 31:34.560
只要到这个变量值

31:34.560 --> 31:36.560
我们做个模拟值

31:36.560 --> 31:37.560
它就会自动完成

31:37.560 --> 31:38.560
告诉你

31:38.560 --> 31:40.560
已经加载完毕

31:40.560 --> 31:41.560
我们首先

31:41.560 --> 31:43.560
我们这边定一个

31:43.560 --> 31:45.560
就是

31:45.560 --> 31:47.560
刷新

31:47.560 --> 31:49.560
就是加载

31:49.560 --> 31:51.560
reload

31:51.560 --> 31:52.560
number

31:52.560 --> 31:54.560
我们做个reload number

31:54.560 --> 31:56.560
给一个值是0

31:56.560 --> 31:57.560
紧接着

31:57.560 --> 31:59.560
我们往下

31:59.560 --> 32:01.560
在你整个操作过程中

32:01.560 --> 32:02.560
我们加载多少次呢

32:02.560 --> 32:04.560
三次我们就

32:04.560 --> 32:06.560
自行估计一个三次

32:06.560 --> 32:07.560
如果三次已经到了

32:07.560 --> 32:08.560
提示用户

32:08.560 --> 32:10.560
加载完成

32:10.560 --> 32:11.560
加载已经

32:11.560 --> 32:12.560
数据加载完毕了

32:12.560 --> 32:13.560
所有数据

32:13.560 --> 32:14.560
如果没有到

32:14.560 --> 32:15.560
那我们就可以

32:15.560 --> 32:17.560
再次的去加载

32:17.560 --> 32:19.560
当前的这个标签

32:19.560 --> 32:20.560
同时呢

32:20.560 --> 32:21.560
把数据

32:21.560 --> 32:23.560
直接放置到

32:23.560 --> 32:25.560
我们这个news list的后面

32:25.560 --> 32:27.560
再来

32:27.560 --> 32:28.560
我们这么干

32:28.560 --> 32:29.560
首先

32:29.560 --> 32:30.560
我们做个判别

32:30.560 --> 32:32.560
我们注释加一下

32:32.560 --> 32:34.560
判断

32:34.560 --> 32:39.790
是否

32:39.790 --> 32:41.790
所有数据

32:41.790 --> 32:43.790
加载完毕

32:43.790 --> 32:45.790
这个主要是什么呢

32:45.790 --> 32:47.790
这个主要的是

32:47.790 --> 32:50.870
模拟一个

32:50.870 --> 32:51.870
变量

32:51.870 --> 32:55.820
可以备

32:55.820 --> 32:57.820
加载三次

32:57.820 --> 33:00.460
所以

33:00.460 --> 33:01.460
this点

33:01.460 --> 33:02.460
stater点

33:02.460 --> 33:04.460
reload the number

33:04.460 --> 33:05.460
如果这个值

33:05.460 --> 33:06.460
小于3

33:06.460 --> 33:07.460
012嘛

33:07.460 --> 33:08.460
三次嘛

33:08.460 --> 33:10.460
如果小于3

33:10.460 --> 33:11.460
或者说

33:11.460 --> 33:12.460
不是小于3

33:12.460 --> 33:14.460
它正好是等于3了

33:14.460 --> 33:16.460
它等于3了

33:16.460 --> 33:17.460
那么这时候呢

33:17.460 --> 33:18.460
就是

33:18.460 --> 33:20.460
已经

33:20.460 --> 33:22.460
加载完毕

33:22.460 --> 33:34.760
用户提示

33:34.760 --> 33:36.760
terror点

33:36.760 --> 33:37.760
show

33:37.760 --> 33:44.940
toast

33:44.940 --> 33:46.940
已经

33:46.940 --> 33:53.510
加载完毕

33:53.510 --> 33:54.510
icon

33:54.510 --> 33:56.510
没有图标

33:56.510 --> 33:57.510
duration

33:57.510 --> 33:58.510
1500默认

33:58.510 --> 33:59.510
这个时候

33:59.510 --> 34:01.510
我们做一个return

34:01.510 --> 34:05.080
这边额外说一下

34:05.080 --> 34:07.080
当

34:07.080 --> 34:13.780
事件中

34:13.780 --> 34:14.780
返回

34:14.780 --> 34:16.780
return

34:16.780 --> 34:18.780
即表示

34:18.780 --> 34:20.780
终止

34:20.780 --> 34:22.780
渲染

34:22.780 --> 34:25.780
下面你不用再做下面的任何操作了

34:25.780 --> 34:38.700
这边就做return返回了

34:38.700 --> 34:43.030
不然

34:43.030 --> 34:45.030
我们做的什么呢

34:45.030 --> 34:46.030
修改

34:46.030 --> 34:48.030
这个叫做

34:48.030 --> 34:50.030
reload the number这个值

34:50.030 --> 34:52.030
this点

34:52.030 --> 34:53.030
set

34:53.030 --> 34:54.030
stater

34:54.030 --> 34:55.030
点

34:55.030 --> 35:01.480
reload the number

35:01.480 --> 35:02.480
修改这个值

35:02.480 --> 35:03.480
干嘛呢

35:03.480 --> 35:05.480
加加

35:05.480 --> 35:07.480
把这个值做加加处理

35:07.480 --> 35:10.920
再往下

35:10.920 --> 35:13.920
当你这个值已经做好以后的话

35:13.920 --> 35:16.920
那我接下去的正式的更新在这

35:16.920 --> 35:23.880
那么这边的话呢

35:23.880 --> 35:24.880
我们

35:24.880 --> 35:25.880
先显示一下

35:25.880 --> 35:28.880
我们把这个console点log

35:28.880 --> 35:33.430
我们说

35:33.430 --> 35:38.450
追加数据

35:38.450 --> 35:42.020
后面给出这个值来

35:42.020 --> 35:43.020
this点

35:43.020 --> 35:45.020
stater点

35:45.020 --> 35:46.020
remember

35:46.020 --> 35:48.020
追加数据次数

35:48.020 --> 36:00.260
给我们给出这个值来

36:00.260 --> 36:02.260
紧接着我们继续

36:02.260 --> 36:04.260
这个里边是

36:04.260 --> 36:11.600
他报的一个

36:11.600 --> 36:16.000
console点log

36:16.000 --> 36:18.000
他指的不是这个是这

36:18.000 --> 36:20.000
那我们就直接用于最

36:20.000 --> 36:22.000
那个基础的方式来

36:22.000 --> 36:24.000
就是this点

36:24.000 --> 36:26.000
stater点

36:26.000 --> 36:30.660
reloader拿出来加一

36:30.660 --> 36:32.660
ok啊这样去做

36:32.660 --> 36:36.350
当然不是等号嘛

36:36.350 --> 36:38.350
那么现在呢

36:38.350 --> 36:39.350
我们可以操作一下

36:39.350 --> 36:40.350
先看一下

36:40.350 --> 36:41.350
当他每次刷新的时候

36:41.350 --> 36:42.350
这个值会变

36:42.350 --> 36:44.350
一旦变到3的时候呢

36:44.350 --> 36:45.350
这个值就会

36:45.350 --> 36:46.350
上面就会呈现出

36:46.350 --> 36:48.350
加在完毕

36:48.350 --> 36:49.350
想下拉

36:49.350 --> 36:50.350
看到吗

36:50.350 --> 36:51.350
追加次数1

36:51.350 --> 36:52.350
收回

36:52.350 --> 36:53.350
再拉

36:53.350 --> 36:54.350
追加次数2

36:54.350 --> 36:55.350
再收回

36:55.350 --> 36:56.350
追加次数3

36:56.350 --> 36:57.350
再来一次

36:57.350 --> 36:59.350
已经加在完毕

36:59.350 --> 37:00.350
看到吗

37:00.350 --> 37:01.350
这边就没有了

37:01.350 --> 37:02.350
所以呢我们讲

37:02.350 --> 37:03.350
整个这个操作

37:03.350 --> 37:05.350
是你在下拉的过程中

37:05.350 --> 37:06.350
on rich button

37:06.350 --> 37:07.350
来完成的

37:07.350 --> 37:09.350
那么一旦你现在

37:09.350 --> 37:10.350
已经完成了一个

37:10.350 --> 37:11.350
可以进行数据

37:11.350 --> 37:12.350
加载的过程

37:12.350 --> 37:13.350
那我们直接往里面

37:13.350 --> 37:14.350
加内容了

37:14.350 --> 37:16.350
我们就在当前的

37:16.350 --> 37:18.350
这个数据位置上面

37:18.350 --> 37:19.350
给它加载内容

37:19.350 --> 37:20.350
那么我们不去

37:20.350 --> 37:22.350
从外部拿数据了

37:22.350 --> 37:23.350
我们外部数据的话呢

37:23.350 --> 37:25.350
还是简单的

37:25.350 --> 37:26.350
从这里面拿

37:26.350 --> 37:28.350
我们就给一个

37:28.350 --> 37:31.350
叫做news

37:31.350 --> 37:34.860
新的data

37:34.860 --> 37:35.860
数据

37:35.860 --> 37:39.740
我们拿一个新的data数据

37:39.740 --> 37:41.740
我们就直接在这里边

37:41.740 --> 37:43.740
我就先给一个最简单的

37:43.740 --> 37:45.740
就叫做

37:45.740 --> 37:47.740
新加载的数据

37:47.740 --> 37:49.740
我们就好比说

37:49.740 --> 37:50.740
这个数据呢

37:50.740 --> 37:52.740
是从随便从哪来的

37:52.740 --> 37:53.740
比如说网络上啊

37:53.740 --> 37:54.740
或者说是

37:54.740 --> 37:55.740
缓存啊

37:55.740 --> 37:56.740
或者说是

37:56.740 --> 37:57.740
云端啊

37:57.740 --> 37:58.740
都可以

37:58.740 --> 38:00.740
newdata

38:00.740 --> 38:03.250
在这改

38:03.250 --> 38:05.250
在我们的data里面

38:05.250 --> 38:07.250
有一个news list

38:07.250 --> 38:08.250
news list

38:08.250 --> 38:09.250
news list里面

38:09.250 --> 38:11.250
我们要追加数据进去

38:11.250 --> 38:13.250
那么追加数据的方式

38:13.250 --> 38:15.250
我们说一下

38:15.250 --> 38:17.250
它其实里面放的就是

38:17.250 --> 38:19.250
当前的

38:19.250 --> 38:20.250
你看啊

38:20.250 --> 38:21.250
有同学会这么做

38:21.250 --> 38:22.250
他说不是属于

38:22.250 --> 38:23.250
数组吗

38:23.250 --> 38:25.250
所以数组不是有一个

38:25.250 --> 38:26.250
proxy吗

38:26.250 --> 38:27.250
我们往里加对吧

38:27.250 --> 38:28.250
加什么呢

38:28.250 --> 38:30.250
加就是当前的

38:30.250 --> 38:32.250
status

38:32.250 --> 38:33.250
里面的

38:33.250 --> 38:38.740
我们的

38:38.740 --> 38:39.740
news data

38:39.740 --> 38:42.690
把news data拿出来

38:42.690 --> 38:44.690
但是它是有数据的

38:44.690 --> 38:46.690
所以我们这样加

38:46.690 --> 38:48.690
这边有个逗号

38:48.690 --> 38:51.960
好

38:51.960 --> 38:55.040
我们来看一下

38:55.040 --> 39:02.410
刷新

39:02.410 --> 39:04.410
又满了啊

39:04.410 --> 39:06.410
拉一步

39:06.410 --> 39:07.410
你会发现它什么样的

39:07.410 --> 39:09.410
它零一二三四六七八

39:09.410 --> 39:11.410
再拉一步就抱错了

39:11.410 --> 39:12.410
说明这样的加法

39:12.410 --> 39:13.410
是有问题的

39:13.410 --> 39:15.410
这样的加法是有问题的

39:15.410 --> 39:16.410
那么这时候

39:16.410 --> 39:17.410
你来看一下

39:17.410 --> 39:18.410
它的问题在哪

39:18.410 --> 39:19.410
这个问题

39:19.410 --> 39:20.410
其实你是一个

39:20.410 --> 39:21.410
绕圈问题

39:21.410 --> 39:22.410
也就是说

39:22.410 --> 39:25.410
你想修改这里面的值

39:25.410 --> 39:28.410
但是你先把这个值往里放

39:28.410 --> 39:29.410
放完以后

39:29.410 --> 39:31.410
这个其实就是一个修改

39:31.410 --> 39:32.410
对吗

39:32.410 --> 39:33.410
正常情况

39:33.410 --> 39:34.410
同学怎么想到

39:34.410 --> 39:36.410
把里面的值追加好以后

39:36.410 --> 39:37.410
再放进去

39:37.410 --> 39:38.410
但是这个追加点

39:38.410 --> 39:40.410
不应该是在你当前的

39:40.410 --> 39:42.410
就是在status里面

39:42.410 --> 39:43.410
所以

39:43.410 --> 39:44.410
要做这个操作时候

39:44.410 --> 39:45.410
这行

39:45.410 --> 39:46.410
你要修改它

39:46.410 --> 39:47.410
本身你说

39:47.410 --> 39:48.410
不能改自己

39:48.410 --> 39:49.410
但是你后面

39:49.410 --> 39:50.410
又改了一次自己

39:50.410 --> 39:52.410
所以我们应该做法是

39:52.410 --> 39:54.410
把这个数据先取出来

39:54.410 --> 39:57.410
在status的外部

39:57.410 --> 39:58.410
把它push加完

39:58.410 --> 39:59.410
再往里面放

39:59.410 --> 40:00.410
理解吗

40:00.410 --> 40:01.410
所以我们这边

40:01.410 --> 40:03.410
我们可以定一个变量

40:03.410 --> 40:06.410
咱们称之为叫newstater

40:06.410 --> 40:08.410
定一个变量出来

40:08.410 --> 40:09.410
然后呢

40:09.410 --> 40:10.410
对着这个变量

40:10.410 --> 40:11.410
我们来执行

40:11.410 --> 40:17.060
我们现在的push数据加载

40:17.060 --> 40:26.780
push数据加载

40:26.780 --> 40:27.780
这时候你后面的

40:27.780 --> 40:28.780
这部操作

40:28.780 --> 40:29.780
其实是一种取职

40:29.780 --> 40:31.780
取职是没有关系的

40:31.780 --> 40:34.730
对吧

40:34.730 --> 40:35.730
取职

40:35.730 --> 40:36.730
当你把这个职

40:36.730 --> 40:37.730
取完以后

40:37.730 --> 40:38.730
push加在进去

40:38.730 --> 40:39.730
那么这个news list里面

40:39.730 --> 40:40.730
应该就有个新职了

40:40.730 --> 40:41.730
对吧

40:41.730 --> 40:42.730
所以我们把后面的

40:42.730 --> 40:43.730
整个这一段

40:43.730 --> 40:44.730
你把它删了

40:44.730 --> 40:46.730
然后把这个加进来

40:46.730 --> 40:49.170
OK吧

40:49.170 --> 40:50.170
理解这逻辑吧

40:50.170 --> 40:52.170
你不能在内部说

40:52.170 --> 40:53.170
我修改自己职

40:53.170 --> 40:54.170
先把自己的职

40:54.170 --> 40:55.170
添加1

40:55.170 --> 40:56.170
再把整个数据结构

40:56.170 --> 40:57.170
付给自己

40:57.170 --> 40:59.170
这个逻辑是不对的

40:59.170 --> 41:01.170
所以这样完成以后的话

41:01.170 --> 41:04.170
我们再来看一下页面

41:04.170 --> 41:05.170
刷新

41:05.170 --> 41:10.080
看追加

41:10.080 --> 41:12.080
发现吗

41:12.080 --> 41:13.080
它这边有一个push

41:13.080 --> 41:14.080
它告诉你说

41:14.080 --> 41:15.080
不能读取

41:15.080 --> 41:17.080
push里面是空职

41:17.080 --> 41:18.080
前面的这一次

41:18.080 --> 41:19.080
已经执行成功了

41:19.080 --> 41:20.080
那第二次会失败

41:20.080 --> 41:23.080
再来看什么原因

41:23.080 --> 41:26.080
没原因吗

41:26.080 --> 41:27.080
如果你现在

41:27.080 --> 41:28.080
还没看到的话

41:28.080 --> 41:29.080
那就表示

41:29.080 --> 41:30.080
你其实对这个代码

41:30.080 --> 41:31.080
还不熟

41:31.080 --> 41:32.080
那么你看到

41:32.080 --> 41:33.080
我们把这个职拿出来

41:33.080 --> 41:34.080
这边肯定没问题的

41:34.080 --> 41:35.080
然后这个是0

41:35.080 --> 41:36.080
也就是news list里面

41:36.080 --> 41:38.080
这两个名称肯定不一样

41:38.080 --> 41:39.080
这边有一下发现

41:39.080 --> 41:40.080
然后news list里面

41:40.080 --> 41:41.080
拿0的话

41:41.080 --> 41:42.080
这个职也是没问题的

41:42.080 --> 41:43.080
肯定可以拿到的

41:43.080 --> 41:45.080
它的问题出在哪呢

41:45.080 --> 41:46.080
仔细看

41:46.080 --> 41:49.670
在这

41:49.670 --> 41:50.670
这边我没有个this

41:50.670 --> 41:53.670
你在当前的对象中

41:53.670 --> 41:54.670
去定义了

41:54.670 --> 41:56.670
我们现在的一个变量的时候

41:56.670 --> 41:58.670
你或者称为元素对象的时候

41:58.670 --> 42:00.670
你不需要用this来表述

42:00.670 --> 42:01.670
this表示的是

42:01.670 --> 42:04.670
当前的整个类的对象

42:04.670 --> 42:06.670
所以你在获取这个纸的时候

42:06.670 --> 42:07.670
你不需要这样做

42:07.670 --> 42:09.670
你只要拿到它的变量名

42:09.670 --> 42:11.670
这时候你再来看这个呈现

42:11.670 --> 42:14.690
第一次拉

42:14.690 --> 42:15.690
看到吗

42:15.690 --> 42:16.690
新数据加载了

42:16.690 --> 42:19.690
表示第一次已经成功拉早

42:19.690 --> 42:21.690
第二次成功拉到

42:21.690 --> 42:22.690
看到吗

42:22.690 --> 42:24.690
我就是没拖到底

42:24.690 --> 42:26.690
我们再来看一下

42:26.690 --> 42:34.950
拉

42:34.950 --> 42:35.950
第一次拉到了

42:35.950 --> 42:37.950
回上去

42:37.950 --> 42:38.950
第二次往下滚

42:38.950 --> 42:39.950
其实你自己看

42:39.950 --> 42:41.950
它下面已经有数据了

42:41.950 --> 42:42.950
其实

42:42.950 --> 42:43.950
看到吗

42:43.950 --> 42:44.950
第三次再滚

42:44.950 --> 42:45.950
又有数据了

42:45.950 --> 42:47.950
所以这样讲的话

42:47.950 --> 42:48.950
我们再拉一次的话

42:48.950 --> 42:50.950
由于它进入到了3这个判断

42:50.950 --> 42:52.950
所以它只是告诉你说

42:52.950 --> 42:53.950
页面已经加载完毕了

42:53.950 --> 42:54.950
没数据了

42:54.950 --> 42:55.950
是不是

42:55.950 --> 42:56.950
那么所以我们讲

42:56.950 --> 42:57.950
我们本身来讲

42:57.950 --> 42:59.950
这个数据结构就非常的简化了

42:59.950 --> 43:01.950
我们可以看到

43:01.950 --> 43:03.950
除了你现在直接在上面

43:03.950 --> 43:04.950
当前页面

43:04.950 --> 43:06.950
我没法进行上下拖拽的拉

43:06.950 --> 43:07.950
没有拖拽的刷形

43:07.950 --> 43:10.950
你还可以在下面进行我们的

43:10.950 --> 43:11.950
这种叫做

43:11.950 --> 43:12.950
底部的加载

43:12.950 --> 43:13.950
而底部加载

43:13.950 --> 43:15.950
主要是靠的是两个东西

43:15.950 --> 43:16.950
第一个

43:16.950 --> 43:18.950
就是我们现在有一个事件

43:18.950 --> 43:20.950
叫做on rich button

43:20.950 --> 43:22.950
on rich button

43:22.950 --> 43:23.950
第二个事情

43:23.950 --> 43:24.950
是你加载

43:24.950 --> 43:27.950
其实是往你现在的一个数组里面

43:27.950 --> 43:29.950
进行posh

43:29.950 --> 43:31.950
posh操作完以后

43:31.950 --> 43:32.950
再把这个数据

43:32.950 --> 43:34.950
加载到当前的这个数据结构

43:34.950 --> 43:36.950
那么我们的数据结构

43:36.950 --> 43:38.950
一旦发现内容改变

43:38.950 --> 43:40.950
它就可以做我们的所谓的

43:40.950 --> 43:42.950
重新宣传

43:42.950 --> 43:43.950
对吧

43:43.950 --> 43:44.950
这个事情大家应该

43:44.950 --> 43:46.950
OK 现在能够理解的

43:46.950 --> 43:48.950
就讲解了两种刷新

43:48.950 --> 43:50.950
第一种是通过微信本身

43:50.950 --> 43:52.950
有一个enable port down refresh来做

43:52.950 --> 43:54.950
第二个是我们通过

43:54.950 --> 43:55.950
现在你看到的

43:55.950 --> 43:58.950
我们自行有一个叫做on rich button

43:58.950 --> 43:59.950
碰到底部的事件

43:59.950 --> 44:01.950
那碰到底部的事件

44:01.950 --> 44:02.950
其实除了这个以外

44:02.950 --> 44:04.950
还有一个事件

44:04.950 --> 44:05.950
或者说还有个组件

44:05.950 --> 44:07.950
我这边再介绍一下

44:07.950 --> 44:11.780
我们来看一下

44:11.780 --> 44:12.780
其实啊

44:12.780 --> 44:13.780
我们在底部的时候

44:13.780 --> 44:14.780
会有一个就是

44:14.780 --> 44:16.780
我们之前讲过的一个组件

44:16.780 --> 44:17.780
叫什么

44:17.780 --> 44:18.780
微信有一个

44:18.780 --> 44:19.780
或者称之为

44:19.780 --> 44:21.780
taro也有

44:21.780 --> 44:23.780
taro有个组件

44:23.780 --> 44:32.420
这个组件叫做scolar view

44:32.420 --> 44:33.420
在微信

44:33.420 --> 44:34.420
在taro里面的话

44:34.420 --> 44:41.350
就叫做scolar view组件

44:41.350 --> 44:42.350
这个组件

44:42.350 --> 44:46.350
它也可以

44:46.350 --> 44:55.850
完成滚动

44:55.850 --> 44:57.850
到

44:57.850 --> 44:58.850
顶部

44:58.850 --> 45:01.850
或滚动到

45:01.850 --> 45:06.290
底部的出发

45:06.290 --> 45:07.290
这该怎么做呢

45:07.290 --> 45:08.290
这边给大家做一个

45:08.290 --> 45:09.290
非常简单的演示

45:09.290 --> 45:12.290
它有两个属性可以玩的

45:12.290 --> 45:14.290
我们在

45:14.290 --> 45:16.290
我单切一个页面吧

45:16.290 --> 45:17.290
给大家那个简单看一下

45:17.290 --> 45:18.290
如果用一个组件

45:18.290 --> 45:21.290
来做这样的功能

45:21.290 --> 45:23.290
这页面它会往下沉

45:23.290 --> 45:24.290
不断的往下加载

45:24.290 --> 45:26.290
我们写第三个吧

45:26.290 --> 45:58.250
我们把这个页面的几个

45:58.250 --> 46:00.250
配置文件先拿进来

46:00.250 --> 46:09.960
配置文件先进来

46:09.960 --> 46:13.590
constructor

46:13.590 --> 46:22.020
proper

46:22.020 --> 46:23.020
后面标准的

46:23.020 --> 46:25.020
应该是我们的stater

46:25.020 --> 46:31.000
在后面什么的configure

46:31.000 --> 46:35.270
在后面是我们的

46:35.270 --> 46:37.270
生命周期这边应该是

46:37.270 --> 46:41.710
在后面是我们的

46:41.710 --> 46:45.220
实践函数

46:45.220 --> 46:47.220
最后是我们的

46:47.220 --> 46:48.220
random

46:48.220 --> 47:03.240
然后在里面我们写上

47:03.240 --> 47:04.240
3

47:04.240 --> 47:07.680
这个我们就演示一下

47:07.680 --> 47:08.680
就可以了

47:08.680 --> 47:09.680
这个简简单

47:09.680 --> 47:10.680
它的操作

47:10.680 --> 47:11.680
其实它是借助于

47:11.680 --> 47:13.680
我们刚才所谓的那个

47:13.680 --> 47:14.680
叫scolar view

47:14.680 --> 47:35.460
借助于这个

47:35.460 --> 47:41.550
scolar view

47:41.550 --> 47:42.550
scolar view里面

47:42.550 --> 47:44.550
我们大家都知道

47:44.550 --> 47:46.550
它是可以做横向滚动

47:46.550 --> 47:48.550
和垂直滚动的

47:48.550 --> 47:50.550
一个称之为叫

47:50.550 --> 47:51.550
可滚动

47:51.550 --> 47:53.550
试图区域scolar view

47:53.550 --> 47:55.550
但是它有一个属性

47:55.550 --> 47:56.550
或者称之为两个属性

47:56.550 --> 47:58.550
来决定着这个值

47:58.550 --> 48:00.550
是否是怎么样的一个触碰

48:00.550 --> 48:02.550
如果说你这边

48:02.550 --> 48:05.550
设置的是scolar x

48:05.550 --> 48:07.550
那代表的是

48:07.550 --> 48:09.550
你可以水平

48:09.550 --> 48:10.550
横向滚动

48:10.550 --> 48:11.550
scolar x嘛

48:11.550 --> 48:12.550
x走的嘛

48:12.550 --> 48:14.550
x走是水平的嘛

48:14.550 --> 48:15.550
所以

48:15.550 --> 48:17.550
现在我们所触发的

48:17.550 --> 48:18.550
两个点

48:18.550 --> 48:20.550
应该是左边和右边

48:20.550 --> 48:22.550
因为滚动只可以在左右

48:22.550 --> 48:24.550
如果你出左点结束

48:24.550 --> 48:26.550
如果出右点结束的话

48:26.550 --> 48:28.550
那么右边还能继续加载

48:28.550 --> 48:30.550
第二种是属于

48:30.550 --> 48:31.550
你这边直接给的是y

48:31.550 --> 48:33.550
那么这就是上下

48:33.550 --> 48:35.550
如果你碰到上

48:35.550 --> 48:36.550
也有一个时间

48:36.550 --> 48:37.550
如果你碰到下

48:37.550 --> 48:38.550
也有个时间

48:38.550 --> 48:39.550
只不过

48:39.550 --> 48:40.550
这个时候

48:40.550 --> 48:41.550
我们讲的是

48:41.550 --> 48:43.550
在y或者x里面

48:43.550 --> 48:45.550
针对一个方向的

48:45.550 --> 48:46.550
我们都称之为叫

48:46.550 --> 48:47.550
起始点

48:47.550 --> 48:48.550
start点

48:48.550 --> 48:49.550
那么它是一个属性

48:50.550 --> 48:52.550
这边设定scolar y

48:52.550 --> 48:53.550
它可以上下动

48:53.550 --> 48:55.550
那么一旦设定scolar y的话

48:55.550 --> 48:57.550
我就需要在它外层

48:57.550 --> 48:59.550
咱们去定一个

48:59.550 --> 49:02.310
框架出来

49:02.310 --> 49:04.310
来封住这个

49:04.310 --> 49:08.840
这框架就是一个样式

49:08.840 --> 49:09.840
高宽嘛

49:09.840 --> 49:10.840
这个呢

49:10.840 --> 49:11.840
我们简单定一下

49:11.840 --> 49:12.840
它的样

49:12.840 --> 49:13.840
名称就叫做

49:15.840 --> 49:19.280
scolar style

49:19.280 --> 49:24.660
scolar style

49:24.660 --> 49:26.660
我们把它放在

49:27.660 --> 49:29.660
3的样式里面

49:29.660 --> 49:32.870
3我们样式引入了吗

49:32.870 --> 49:33.870
引入了

49:33.870 --> 49:35.870
我们把3的样式写一下

49:35.870 --> 49:39.630
它其实我们只要指定

49:39.630 --> 49:41.630
它首先它的宽度

49:41.630 --> 49:42.630
是肯定没问题的

49:42.630 --> 49:44.630
我们来百分百呗

49:44.630 --> 49:46.630
它的高度我们设定一下

49:46.630 --> 49:48.630
它的高度是做在

49:52.630 --> 49:54.630
400像素

49:54.630 --> 49:56.630
然后给它一个背景

49:56.630 --> 50:01.990
我们给个绿色

50:01.990 --> 50:02.990
我们来看一下它

50:11.190 --> 50:15.530
这么一个高度

50:15.530 --> 50:17.530
这是这个DIV的

50:17.530 --> 50:19.530
然后我们给里面

50:19.530 --> 50:21.900
scolar view

50:21.900 --> 50:30.740
样式

50:30.740 --> 50:36.490
SV我们写上

50:36.490 --> 50:37.490
Apple和内部

50:37.490 --> 50:38.490
就是这个view

50:38.490 --> 50:40.490
定成我们的400

50:40.490 --> 50:41.490
它已经400

50:41.490 --> 50:42.490
但是它内部呢

50:42.490 --> 50:45.930
我们再做一个

50:45.930 --> 50:46.930
它400都是属于

50:46.930 --> 50:47.930
撑满了

50:47.930 --> 50:48.930
撑好了

50:48.930 --> 50:49.930
它内部一旦加大的话

50:49.930 --> 50:50.930
那就一定会在它里面

50:50.930 --> 50:56.540
形成滚轴了

50:56.540 --> 50:57.540
我们写Inner

50:57.540 --> 51:01.500
Tarrow我们写上

51:01.500 --> 51:02.500
针对这Inner

51:02.500 --> 51:04.500
我们做一个小样式

51:04.500 --> 51:06.500
它的高度比它们

51:06.500 --> 51:10.190
高

51:10.190 --> 51:12.190
宽度

51:12.190 --> 51:14.190
100100

51:14.190 --> 51:15.190
高度

51:15.190 --> 51:20.100
我们给它是800

51:20.100 --> 51:21.100
那我们来看一下

51:21.100 --> 51:36.960
它是高度是800

51:36.960 --> 51:40.780
它们都是400

51:40.780 --> 51:41.780
是吧

51:41.780 --> 51:43.780
那应该在它内部

51:43.780 --> 51:52.430
看到吗

51:52.430 --> 51:54.430
这一块内容在这

51:54.430 --> 51:55.430
Tarrow往上拖

51:55.430 --> 51:57.430
它是可以滚动的

51:57.430 --> 51:58.430
理解吧

51:58.430 --> 52:00.430
它可以滚动的这里边

52:00.430 --> 52:01.430
所以这里边

52:01.430 --> 52:02.430
我们一

52:02.430 --> 52:03.430
二

52:03.430 --> 52:04.430
我们就

52:04.430 --> 52:05.430
你可以去写上

52:05.430 --> 52:16.420
你现在的不同内容

52:16.420 --> 52:17.420
View

52:17.420 --> 52:18.420
11

52:19.420 --> 52:21.420
223344

52:21.420 --> 52:32.450
这样做

52:32.450 --> 52:33.450
你随便怎么打没关系

52:33.450 --> 52:35.450
因为它是在内部的

52:35.450 --> 52:36.450
对吧

52:36.450 --> 52:37.450
所以你看到吗

52:37.450 --> 52:38.450
我给你看几个

52:38.450 --> 52:39.450
表示它能够滚动

52:39.450 --> 52:41.450
一旦它有这个滚动

52:41.450 --> 52:42.450
效果出来了

52:42.450 --> 52:44.450
那它一定会触底和顶部

52:44.450 --> 52:45.450
这时候我们就开始

52:45.450 --> 52:47.450
做我们的事件

52:47.450 --> 52:48.450
它的事件是

52:48.450 --> 52:50.450
这个组件自带的

52:50.450 --> 52:52.450
那么这个功能的好处

52:52.450 --> 52:53.450
它其实是

52:53.450 --> 52:54.450
并不需要你

52:54.450 --> 52:56.450
用整个页面来执行

52:56.450 --> 52:58.450
它只要在这个工程中

52:58.450 --> 53:00.450
然后触发以后

53:00.450 --> 53:01.450
你可以做一些

53:01.450 --> 53:02.450
其他的事情

53:02.450 --> 53:03.450
我们不需要到

53:03.450 --> 53:04.450
页面的底部

53:04.450 --> 53:05.450
页面不单单页面

53:05.450 --> 53:06.450
我们也不需要下拉

53:06.450 --> 53:07.450
对吧

53:07.450 --> 53:08.450
在这个里面做

53:08.450 --> 53:09.450
好

53:09.450 --> 53:10.450
我们来看一下

53:10.450 --> 53:12.450
首先我们在这个

53:12.450 --> 53:13.450
叫做

53:13.450 --> 53:15.450
scolar view里面

53:15.450 --> 53:16.450
我们接触一个

53:16.450 --> 53:17.450
叫做

53:17.450 --> 53:18.450
写上一个

53:18.450 --> 53:19.450
on

53:19.450 --> 53:20.450
开头

53:20.450 --> 53:21.450
有一个scolar

53:21.450 --> 53:22.450
看到吗

53:22.450 --> 53:23.450
有两个

53:23.450 --> 53:24.450
scolar up

53:24.450 --> 53:25.450
scolar up

53:25.450 --> 53:26.450
up的话

53:26.450 --> 53:28.450
就是我们所谓的

53:28.450 --> 53:30.450
到底部

53:30.450 --> 53:31.450
lower顶部

53:31.450 --> 53:32.450
先做第1个

53:32.450 --> 53:33.450
up

53:33.450 --> 53:34.450
到底部

53:34.450 --> 53:35.450
我们触发一个

53:35.450 --> 53:36.450
底部事件

53:36.450 --> 53:38.450
一旦到底部是触发

53:38.450 --> 53:39.450
所以我们写上

53:39.450 --> 53:40.450
this.

53:40.450 --> 53:41.450
那个

53:41.450 --> 53:44.080
up

53:44.080 --> 53:45.080
to up

53:45.080 --> 53:48.740
to up

53:48.740 --> 54:04.620
事件

54:04.620 --> 54:05.620
滚动到

54:05.620 --> 54:07.620
底部

54:07.620 --> 54:08.620
触发

54:08.620 --> 54:12.340
先写上

54:12.340 --> 54:13.340
先看一下

54:13.340 --> 54:15.340
是否真的到底部了

54:15.340 --> 54:22.490
底部触发

54:22.490 --> 54:24.490
再把第2个写上

54:24.490 --> 54:27.890
on

54:27.890 --> 54:28.890
scolar

54:28.890 --> 54:29.890
lower

54:29.890 --> 54:31.890
lower是什么呢

54:31.890 --> 54:33.890
lower是底部

54:33.890 --> 54:35.890
这个up是顶部

54:35.890 --> 54:36.890
这个次

54:36.890 --> 54:39.520
顶部

54:39.520 --> 54:41.520
lower是底部

54:41.520 --> 54:48.260
当前的

54:48.260 --> 54:51.020
to

54:51.020 --> 54:52.020
lower

54:52.020 --> 55:04.760
bound

55:04.760 --> 55:07.840
this

55:07.840 --> 55:19.250
scolar

55:19.250 --> 55:20.250
底部触发

55:20.250 --> 55:22.250
这是顶部

55:22.250 --> 55:24.880
好

55:24.880 --> 55:25.880
我们来看一下

55:25.880 --> 55:28.880
这个功能是否能够正常出现了

55:28.880 --> 55:35.860
看到吗

55:35.860 --> 55:36.860
底部碰到了

55:36.860 --> 55:38.860
再往上滚滚滚

55:39.860 --> 55:40.860
顶部

55:41.860 --> 55:43.860
我托动就可以了

55:43.860 --> 55:44.860
托到底部

55:44.860 --> 55:45.860
往上

55:45.860 --> 55:46.860
托到顶部

55:46.860 --> 55:47.860
是不是

55:47.860 --> 55:49.860
所以在这个前提下面

55:49.860 --> 55:50.860
我们修来看

55:50.860 --> 55:51.860
它里面能修改的

55:51.860 --> 55:52.860
比如说

55:52.860 --> 55:55.860
我对这里边的内容进行修改

55:55.860 --> 55:57.860
或者你对外部进行修改也可以

55:57.860 --> 55:58.860
所以

55:58.860 --> 56:00.860
它并没有规定说

56:00.860 --> 56:02.860
一定要修改内部的事件

56:02.860 --> 56:04.860
但它可以直接修改

56:04.860 --> 56:05.860
我们的外部事件

56:05.860 --> 56:06.860
这里看到吗

56:06.860 --> 56:07.860
这是我们第1个

56:07.860 --> 56:08.860
然后

56:08.860 --> 56:09.860
我们同时外部

56:09.860 --> 56:12.860
可以简单做一个简单的效果

56:12.860 --> 56:13.860
比如说

56:13.860 --> 56:15.860
我在scolarview的外面

56:15.860 --> 56:21.460
我们在这边就写一个view

56:21.460 --> 56:23.460
里面写一个this.

56:24.460 --> 56:27.830
stater.show

56:27.830 --> 56:36.900
未改动

56:37.900 --> 56:39.900
你这时候就对它已经改动就可以了

56:39.900 --> 56:50.830
我们做show

56:50.830 --> 56:56.220
当前

56:56.220 --> 57:10.740
顶部出发

57:10.740 --> 57:11.740
当前

57:11.740 --> 57:12.740
底部出发

57:12.740 --> 57:16.370
我完全可以对外部任何操作

57:16.370 --> 57:20.370
因为事件和事件处理程序之间

57:20.370 --> 57:22.370
是没有这个关系层的

57:22.370 --> 57:23.370
也就意味着

57:23.370 --> 57:25.370
我们不存在于当前的这个事件

57:25.370 --> 57:30.370
一定只能处理当前这个事件源的东西

57:30.370 --> 57:31.370
理解了吧

57:31.370 --> 57:32.370
所以这样的话

57:32.370 --> 57:34.370
我们就可以做出

57:34.370 --> 57:35.370
注意

57:35.370 --> 57:36.370
上下滚动

57:36.370 --> 57:37.370
那么同时

57:37.370 --> 57:39.370
我们沿用这个效果

57:39.370 --> 57:40.370
我们下面再写一个

57:40.370 --> 57:42.370
我们是左右滚动

57:42.370 --> 57:43.370
依然是这两个

57:43.370 --> 57:45.370
那么在这种滚动上面

57:45.370 --> 57:46.370
就要看一下

57:46.370 --> 57:50.370
这个值的改变和它内部的一个写法了

57:51.370 --> 57:53.370
稍微有一点点小不同

57:53.370 --> 57:55.370
我们说

57:55.370 --> 58:01.110
左右滚动出发

58:01.110 --> 58:13.450
依然使用这个scolarview

58:13.450 --> 58:15.450
依然使用这个scolarview

58:15.450 --> 58:16.450
然后的话

58:16.450 --> 58:22.620
我们这边给出一个scolar

58:22.620 --> 58:24.620
x

58:24.620 --> 58:26.620
给出一个x出来

58:26.620 --> 58:28.620
然后这个x给出以后

58:28.620 --> 58:32.620
我们这边去直接放入我们的内容

58:32.620 --> 58:36.620
这边我们给出一个样式

58:36.620 --> 58:41.720
我们称之为scolarx

58:41.720 --> 58:46.440
样式

58:46.440 --> 58:51.350
我们里面直接给一个view

58:51.350 --> 58:52.350
我们里面直接给个view

58:52.350 --> 58:55.350
view里面我们给一个

58:55.350 --> 58:57.350
navigator

58:57.350 --> 58:59.350
这是导航

58:59.350 --> 59:09.900
导航用的是url

59:09.900 --> 59:16.610
这边称之为导航1

59:16.610 --> 59:22.380
2

59:22.380 --> 59:23.380
3

59:23.380 --> 59:24.380
1

59:24.380 --> 59:25.380
2

59:25.380 --> 59:33.190
3

59:33.190 --> 59:34.190
这边做一样式

59:34.190 --> 59:39.850
scolarx

59:39.850 --> 59:40.850
item list

59:40.850 --> 59:44.120
好

59:44.120 --> 59:45.120
我们首先来

59:45.120 --> 59:47.120
我们先把它给做一下

59:47.120 --> 59:55.210
它的宽度定为100%

59:55.210 --> 01:00:01.100
高度定为我们做一个简单的100项

01:00:01.100 --> 01:00:02.100
不用100了

01:00:02.100 --> 01:00:03.100
我们小一点

01:00:03.100 --> 01:00:06.100
80 70相处

01:00:06.100 --> 01:00:15.320
到这边来

01:00:15.320 --> 01:00:17.320
这边我们给的就是

01:00:17.320 --> 01:00:19.320
tash display

01:00:19.320 --> 01:00:20.320
我们首先定它

01:00:20.320 --> 01:00:22.320
先定wise吧

01:00:22.320 --> 01:00:24.320
wise是100%

01:00:24.320 --> 01:00:31.480
然后它的高度

01:00:31.480 --> 01:00:34.790
我们也设置为70

01:00:34.790 --> 01:00:36.790
或者说你根本不用说它高度

01:00:36.790 --> 01:00:38.790
我们只要设它的display

01:00:38.790 --> 01:00:42.360
the flex

01:00:42.360 --> 01:00:45.360
然后flex direction

01:00:45.360 --> 01:00:48.360
我们做它的column

01:00:48.360 --> 01:00:50.360
肉

01:00:50.360 --> 01:00:52.360
以航来做

01:00:52.360 --> 01:00:55.570
它以航完成了

01:00:55.570 --> 01:00:57.570
它现在的整个的布局

01:00:57.570 --> 01:00:59.570
然后完成它里面

01:00:59.570 --> 01:01:00.570
每一个的

01:01:00.570 --> 01:01:03.880
每一个的空开一点

01:01:03.880 --> 01:01:07.320
里面每一个navigator

01:01:07.320 --> 01:01:15.690
merge

01:01:15.690 --> 01:01:17.690
上下

01:01:17.690 --> 01:01:19.690
离开5个像素

01:01:19.690 --> 01:01:21.690
左右离开10个像素

01:01:21.690 --> 01:01:33.980
不够

01:01:33.980 --> 01:01:55.060
一定要看到它自动有一个幻航处理

01:01:55.060 --> 01:01:57.060
这时候你才够

01:01:57.060 --> 01:01:58.060
它自动幻航

01:01:58.060 --> 01:01:59.060
一出来以后的话

01:01:59.060 --> 01:02:01.060
我们这边就直接给上

01:02:01.060 --> 01:02:03.060
我们在这个里边

01:02:03.060 --> 01:02:04.060
我们给上

01:02:04.060 --> 01:02:08.210
wide space no wrapper

01:02:08.210 --> 01:02:19.040
那稍等一下

01:02:19.040 --> 01:02:20.040
出来了

01:02:20.040 --> 01:02:21.040
wide space no wrapper

01:02:21.040 --> 01:02:22.040
能够横向托动

01:02:22.040 --> 01:02:23.040
对吧

01:02:23.040 --> 01:02:29.170
你再可以加一两个出来

01:02:29.170 --> 01:02:30.170
好

01:02:30.170 --> 01:02:31.170
此时你加好以后

01:02:31.170 --> 01:02:36.780
那么继续完成我们两个事件

01:02:36.780 --> 01:02:38.780
继续完成这两个事件

01:02:38.780 --> 01:02:45.300
把这两个事件一起拿过来

01:02:45.300 --> 01:02:46.300
我们

01:02:46.300 --> 01:02:48.300
事件里面我没有做其他的一些

01:02:48.300 --> 01:02:50.300
关于垂直和滚动的事情

01:02:50.300 --> 01:02:53.300
所以这上面依然是可以使用

01:02:53.300 --> 01:02:54.300
只不过

01:02:54.300 --> 01:02:56.300
它的底是哪里

01:02:56.300 --> 01:02:58.300
它的顶是哪里

01:02:58.300 --> 01:03:00.300
我们自己来看一下

01:03:00.300 --> 01:03:02.300
往后滚

01:03:02.300 --> 01:03:03.300
滚到底部以后

01:03:03.300 --> 01:03:05.300
也就是它的右边

01:03:05.300 --> 01:03:07.300
它触发了

01:03:07.300 --> 01:03:09.300
底部事件

01:03:09.300 --> 01:03:10.300
再往左滚

01:03:10.300 --> 01:03:12.300
滚动到顶以后的话

01:03:12.300 --> 01:03:14.300
它触发了顶部事件

01:03:14.300 --> 01:03:16.300
理解吧

01:03:16.300 --> 01:03:18.300
所以垂直滚动

01:03:18.300 --> 01:03:20.300
和水平滚动

01:03:20.300 --> 01:03:22.300
对于这个事件来讲

01:03:22.300 --> 01:03:24.300
或者说这个组件来讲

01:03:24.300 --> 01:03:27.300
它都能继续我们的触发

01:03:27.300 --> 01:03:29.300
这种效果

01:03:29.300 --> 01:03:31.300
就能够坐在局部

01:03:31.300 --> 01:03:32.300
事件里面

01:03:32.300 --> 01:03:35.300
完成一些功能的开发

01:03:35.300 --> 01:03:37.300
而刚才我们前面讲的两种

01:03:37.300 --> 01:03:38.300
主要的是

01:03:38.300 --> 01:03:40.300
我们在顶部

01:03:40.300 --> 01:03:42.300
我们有一个系统级的

01:03:42.300 --> 01:03:44.300
同时系统也给了一个API的

01:03:44.300 --> 01:03:46.300
那么这上面去做的

01:03:46.300 --> 01:03:47.300
OK吧

01:03:47.300 --> 01:03:48.300
这是我们设计到的

01:03:48.300 --> 01:03:51.300
因为我们一旦设计到了我们的

01:03:51.300 --> 01:03:54.300
滚动事件加触发事件的话

01:03:54.300 --> 01:03:56.300
我们把系统中有几个触发事件

01:03:56.300 --> 01:03:58.300
放在一起讲

01:03:58.300 --> 01:04:00.300
这样大家看起来

01:04:00.300 --> 01:04:02.300
操作起来

01:04:02.300 --> 01:04:04.300
会更有一定的比较性

01:04:04.300 --> 01:04:06.300
或者更好去理解

01:04:06.300 --> 01:04:08.300
这是我们这期课要给大家讲解的

01:04:08.300 --> 01:04:10.300
三个内容

01:04:10.300 --> 01:04:12.300
由于下拉刷新

01:04:12.300 --> 01:04:14.300
所引起的

01:04:14.300 --> 01:04:16.300
三种操作

01:04:16.300 --> 01:04:18.300
三种预出组件

01:04:18.300 --> 01:04:20.300
然后调用接口

01:04:20.300 --> 01:04:22.300
API接口

01:04:22.300 --> 01:04:24.300
再调用我们现在微信自己

01:04:24.300 --> 01:04:26.300
或者说Taro给出的

01:04:26.300 --> 01:04:28.300
我们的一些事件系统含处

01:04:28.300 --> 01:04:30.300
完成这样的三个的操作

01:04:30.300 --> 01:04:31.300
OK

01:04:31.300 --> 01:04:32.300
大家的话可以拿着这个代码

01:04:32.300 --> 01:04:34.300
自己去研究一下

01:04:34.300 --> 01:04:36.300
或者把里面的一些关键部分

01:04:36.300 --> 01:04:38.300
自己再打一打

