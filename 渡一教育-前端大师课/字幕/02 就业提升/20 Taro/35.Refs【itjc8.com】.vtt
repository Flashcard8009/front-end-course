WEBVTT

00:00.050 --> 00:02.450
好 我们继续讲解一下Terror系列课程

00:02.450 --> 00:05.550
这里可以给大家讲解一下我们的Raps

00:06.050 --> 00:08.850
Raps 对于我们很多同学来讲

00:08.850 --> 00:10.750
有时候应该不是一个陌生内容

00:10.750 --> 00:13.550
因为在我们的Rap中也有提及

00:13.550 --> 00:15.750
我们在Raps里面

00:15.750 --> 00:19.850
我们主要是介绍的是我们的Purpose这个组件

00:19.850 --> 00:23.150
我们基本上是可以获取到从副组件

00:23.150 --> 00:25.850
向自主点进行数据传递的一种方式

00:25.850 --> 00:29.850
但是这种方式我们其实可以利用Raps的方式

00:29.850 --> 00:31.650
来得到更多的一些数值

00:31.650 --> 00:35.150
比如说当前的Terror组件的一些实力

00:35.150 --> 00:37.450
你可以用这样的方式去获取到

00:37.450 --> 00:40.850
同时我们还可以说Raps的方式

00:40.850 --> 00:45.350
可以更多的改变我们现在的一些编码的习惯

00:45.350 --> 00:48.250
或者说更多的一种我们的操作

00:48.250 --> 00:49.650
是这样的一个结构

00:49.650 --> 00:53.150
然后我们看一下Raps有两种模式

00:53.150 --> 00:55.450
第一种称之为叫自付串模式

00:55.450 --> 00:57.650
第二种称之为就是寒树的模式

00:57.650 --> 00:59.750
那么寒树里面还分两种

00:59.750 --> 01:01.950
我们现在先来介绍一下给大家

01:01.950 --> 01:03.650
首先我们来看一下

01:03.650 --> 01:05.650
我们做一个简单的界面

01:05.650 --> 01:09.050
MyRaps它基本上就是一个这个没有

01:09.050 --> 01:11.150
它基本上就是一个空的界面结构

01:11.150 --> 01:12.550
里面什么都没有

01:12.550 --> 01:15.450
接下去我们建一个简单的文件出来

01:15.450 --> 01:20.790
在这边我们写一个

01:20.790 --> 01:22.090
我们写一个最简单的

01:22.090 --> 01:25.290
比如说Import

01:25.290 --> 01:27.290
我们写一个Import出来

01:27.290 --> 01:29.990
然后这个Import的话

01:29.990 --> 01:36.420
我们就可以不要这个View了

01:36.420 --> 01:38.320
我们就作为根文件存在

01:38.320 --> 01:40.820
然后我们写个ref

01:40.820 --> 01:43.720
代表它要做一次引用处理

01:43.720 --> 01:44.720
它要做一整引用

01:44.720 --> 01:46.920
也就是给我们内部去调用关系

01:46.920 --> 01:48.520
我们写个Import

01:48.520 --> 01:51.020
你就直接这样写就行了

01:51.020 --> 01:54.320
那么代表的我内部可以使用某一个名称

01:54.320 --> 01:56.520
代表着Import可以使用备

01:56.520 --> 02:00.720
然后紧接着我们跑到我们当前的项目中

02:00.720 --> 02:03.320
然后这边我们暂时可以不用

02:03.320 --> 02:06.220
暂时我们可以不用这样的一个方法

02:06.220 --> 02:08.120
待会再来用它

02:08.120 --> 02:15.800
我们可以用一个ComponentDataMount

02:15.800 --> 02:18.200
那么作为我们现在的

02:18.200 --> 02:19.200
请注意一下

02:19.200 --> 02:20.800
这个我是介绍一下第一种

02:20.800 --> 02:27.700
称之为我们的字符串

02:27.700 --> 02:31.200
字符串的绑定形式

02:31.200 --> 02:33.800
字符串的绑定形式在这上面

02:33.800 --> 02:36.400
然后我们在这上面我们要说的是

02:36.400 --> 02:37.800
我们的绑定形式

02:37.800 --> 02:41.600
我们可以在ComponentDataMount上面

02:41.600 --> 02:43.200
我们先把它获取到

02:43.200 --> 02:45.700
然后并且我们要做个判断的

02:45.700 --> 02:49.000
在这里面你需要判断一下

02:49.000 --> 02:58.280
判断当前的环境是否是小程序

02:58.280 --> 03:00.480
还是H5

03:00.480 --> 03:02.580
你需要做这个判断的

03:02.580 --> 03:07.780
因为之后我们对于RF的一个引用的话

03:07.780 --> 03:10.280
它本身会分不同的写法

03:10.280 --> 03:14.180
所以我们这边我们来看一下

03:14.180 --> 03:15.880
我们做一个if

03:15.880 --> 03:16.980
我们后面会说到

03:16.980 --> 03:20.640
但是现在给大家讲一下

03:20.640 --> 03:22.140
Perses

03:22.140 --> 03:24.340
Perses的话我们主要的是

03:24.340 --> 03:27.640
能够反馈出当前的一个线程

03:27.640 --> 03:30.040
ENV当前的环境

03:30.040 --> 03:43.810
Taro的ENV

03:43.810 --> 03:44.610
它有两种

03:44.610 --> 03:50.210
第一种是称之为叫VAPP

03:50.210 --> 03:52.210
就是属于微信小程序

03:52.210 --> 03:54.310
而第二种

03:54.310 --> 03:57.210
那么它就是做在H5端的

03:57.210 --> 04:12.640
我们称为PersesENV.TaroENV等于H5

04:12.640 --> 04:14.940
那么这两种情况我们来看一下

04:14.940 --> 04:21.020
当前它会进到哪个里面

04:21.020 --> 04:26.460
这边我们写上VAPP

04:26.460 --> 04:31.200
这边我们写上H5

04:31.200 --> 04:31.900
好

04:31.900 --> 04:32.900
当你这样写好以后

04:32.900 --> 04:35.900
我们来看一下页面

04:35.900 --> 04:36.700
看

04:36.700 --> 04:38.800
它给我反馈出来的是VAPP

04:38.800 --> 04:40.700
代表的是微信小程序的

04:40.700 --> 04:42.900
它会进到这个里面的结构题

04:42.900 --> 04:44.700
所以我们在这边

04:44.700 --> 04:46.600
你就可以去获取

04:46.600 --> 04:48.700
我们先打印一下看一下

04:48.700 --> 04:49.300
这个的话

04:49.300 --> 04:52.100
后面写法上是基本上和原生是一样的

04:52.100 --> 04:54.100
所以我们只要获取到它

04:54.100 --> 04:59.100
当你现在直接完成了一个判断环境以后

04:59.100 --> 05:02.200
我们通过当前的RF

05:02.200 --> 05:04.500
然后获得到当前的Import

05:04.500 --> 05:08.400
注意这个Import是你现在下面写的RF的名称

05:08.400 --> 05:10.800
所以这样的话我们其实可以得到对象了

05:10.800 --> 05:13.400
对象以后的操作是一样的

05:13.400 --> 05:14.400
你看到吗

05:14.400 --> 05:16.800
这是不是一个对象出来了

05:16.800 --> 05:19.300
那么这个对象就是我们所谓的

05:19.300 --> 05:21.200
当前的这样的一个对象结构

05:21.200 --> 05:23.200
那么你通过这个对象结构

05:23.200 --> 05:25.600
你可以后面的去做各种的操作

05:25.600 --> 05:26.800
这种方式

05:26.800 --> 05:29.600
就是我们通过RF给出一个名称

05:29.600 --> 05:31.600
哪怕你说我给一个换一个

05:31.600 --> 05:33.800
你说MyImport

05:33.800 --> 05:36.200
没有关系的

05:36.200 --> 05:37.200
放这

05:37.200 --> 05:37.800
是一样的

05:37.800 --> 05:41.620
我们再来看一下页面

05:41.620 --> 05:42.420
看到吧

05:42.420 --> 05:44.620
这边是依然可以出这个对象来

05:44.620 --> 05:45.820
所以我们讲

05:45.820 --> 05:48.020
你现在通过RF的方式

05:48.020 --> 05:51.020
能够完成对到现在的一个

05:51.020 --> 05:52.620
我们称之为另命名

05:52.620 --> 05:53.620
重命名

05:53.620 --> 05:54.620
但是这个命名

05:54.620 --> 05:57.520
你只要通过引用的方式来获取到的

05:57.520 --> 05:59.620
那么引用或者当前的对象

05:59.620 --> 06:03.020
对象以后你可以做其他的一些事情

06:03.020 --> 06:04.620
那么如果是H5的话

06:04.620 --> 06:05.620
依然是获取这个

06:05.620 --> 06:09.220
只不过它们两者获取以后的对象结构不一样

06:09.220 --> 06:11.120
我这边述试一下

06:11.120 --> 06:22.200
就是作为微信小程序获取到的对象

06:22.200 --> 06:27.000
它是为微信点

06:27.000 --> 06:32.590
create selector query

06:32.590 --> 06:38.290
它是通过这个对象获得原生小程序的

06:38.290 --> 06:48.660
它是取到小程序的原生组件

06:48.660 --> 06:50.560
是通过这个取到的

06:50.560 --> 06:54.560
那么如果说你是要听到下面出来的话

06:54.560 --> 06:56.060
那么这里是

06:56.060 --> 07:08.230
它是访问到的是

07:08.230 --> 07:17.850
components的import组件实力

07:17.850 --> 07:20.150
它们两者访问的组件实力不一样

07:20.150 --> 07:21.750
这边我们就说明一下

07:21.750 --> 07:23.550
上面我们就拿到组件实力了

07:23.550 --> 07:24.550
那么接下去

07:24.550 --> 07:25.550
这个组件

07:25.550 --> 07:26.550
你import的该怎么操作

07:26.550 --> 07:28.150
你就怎么操作就行了

07:28.150 --> 07:29.150
OK吧

07:29.150 --> 07:31.350
这是第一个自付串绑定形式

07:31.350 --> 07:35.150
或者称之为自付串的REF形式

07:35.150 --> 07:36.550
那么第二我们再来说

07:36.550 --> 07:39.650
我们有一个叫做函数的形式

07:39.650 --> 07:40.350
那么接下去

07:40.350 --> 07:44.650
我们这边把函数形式也做一下

07:44.650 --> 07:48.550
我们REF的函数我们写一个出来

07:48.550 --> 07:49.850
我们在配置里面

07:49.850 --> 08:07.210
我们写一个叫做REF的function

08:07.210 --> 08:09.710
REF的function

08:09.710 --> 08:12.310
那么这个function其实很简单

08:12.310 --> 08:15.110
我们里面把我们之前的其他几个内容

08:15.110 --> 08:19.890
全部给它放过来

08:19.890 --> 08:20.390
对吧

08:20.390 --> 08:21.490
这一套

08:21.490 --> 08:23.090
这个的话我们也不需要现在

08:23.090 --> 08:31.980
但是我们先有个基础结构来写

08:31.980 --> 08:39.380
我们把这个拿过来

08:39.380 --> 08:45.260
写了大扩号

08:45.260 --> 08:55.840
基本结构

08:55.840 --> 08:57.440
这是主页的一部分内容

08:57.440 --> 08:58.640
那么主页里面

08:58.640 --> 09:00.740
我们主要的事情是在这

09:00.740 --> 09:04.040
我们去完成一个分业的

09:04.040 --> 09:07.240
或者称之为走建的调用

09:07.240 --> 09:08.540
我们这样来

09:08.540 --> 09:10.640
我们调CAT

09:10.640 --> 09:11.940
REF

09:11.940 --> 09:14.040
等于注意

09:14.040 --> 09:17.770
这边我们去写一个

09:17.770 --> 09:19.870
这个点REF

09:19.870 --> 09:24.340
CAT

09:24.340 --> 09:25.340
调用

09:25.340 --> 09:26.340
但请记住

09:26.340 --> 09:27.740
这个调用

09:27.740 --> 09:29.140
待会我们来引入

09:29.140 --> 09:41.170
我们引入CAT进来就可以

09:41.170 --> 09:43.070
改一改CAT

09:43.070 --> 09:44.070
然后请记住

09:44.070 --> 09:47.770
这个操作里面的REFCAT

09:47.770 --> 09:49.770
它不是一个简单的变量

09:49.770 --> 09:51.670
它也不是一个简单的

09:51.670 --> 09:52.770
一个函数体

09:52.770 --> 09:54.870
我们把它写成一个这样的结构

09:54.870 --> 10:00.800
你看啊

10:00.800 --> 10:02.300
CAT

10:02.300 --> 10:04.880
函数

10:04.880 --> 10:08.160
NOTER

10:08.160 --> 10:09.060
This点

10:09.060 --> 10:10.460
CATTER

10:10.460 --> 10:11.760
NOTER

10:11.760 --> 10:14.660
我们把它写成了这样一个函数内容

10:14.660 --> 10:17.160
然后后面我们写上的是什么

10:17.160 --> 10:18.460
告诉大家

10:18.460 --> 10:20.560
This点CAT

10:20.560 --> 10:25.850
它会变成CAT

10:25.850 --> 10:27.950
组建

10:27.950 --> 10:32.440
实力的引用

10:32.440 --> 10:34.440
这个逻辑是这样解释的

10:34.440 --> 10:35.440
就是说

10:35.440 --> 10:38.340
我们现在调用了CAT

10:38.340 --> 10:40.840
我们后面写了一个REFCAT

10:40.840 --> 10:41.740
然后呢

10:41.740 --> 10:42.940
我们之后

10:42.940 --> 10:45.940
我们一旦引用了这个元素以后的话

10:45.940 --> 10:47.640
那么当前的这个CAT

10:47.640 --> 10:48.340
请记住啊

10:48.340 --> 10:49.340
我这句话

10:49.340 --> 10:51.140
当前的这个CAT

10:51.140 --> 10:55.440
会作为我的这个REFCAT

10:55.440 --> 10:57.340
所指向函数的

10:57.340 --> 10:59.240
第一个参数

10:59.240 --> 11:00.440
也就是说

11:00.440 --> 11:01.440
CAT实力

11:01.440 --> 11:03.340
CAT当前的这个实力

11:03.340 --> 11:07.240
它直接会放到作为NOTER的一个

11:07.240 --> 11:07.840
变量

11:07.840 --> 11:09.440
作为NOTER的一个变量存储

11:09.440 --> 11:11.040
然后NOTER进去以后

11:11.040 --> 11:14.440
就把CAT实力存入到了This点CAT中

11:14.440 --> 11:16.040
所以This点CAT

11:16.040 --> 11:19.640
它将变成我们现在的CAT实力

11:19.640 --> 11:20.240
那么

11:20.240 --> 11:22.240
一旦它变成CAT实力了

11:22.240 --> 11:25.040
那我CAT中的所有的方法和属性

11:25.040 --> 11:26.840
它都能够调取了

11:26.840 --> 11:27.740
理解吧

11:27.740 --> 11:28.540
那么这样的话呢

11:28.540 --> 11:30.140
我们这边写一个

11:30.140 --> 11:30.740
比如说

11:35.140 --> 11:36.140
Handle了

11:36.140 --> 11:40.280
Click

11:40.280 --> 11:41.580
我们来写

11:41.580 --> 11:44.480
当前的CAT

11:44.480 --> 11:47.480
就是当前的这个大CAT的实力

11:47.480 --> 11:49.880
我们里面依然是那个猫叫

11:49.880 --> 11:53.580
喵的这样的一个方法去调用

11:53.580 --> 11:54.280
那此时呢

11:54.280 --> 11:56.480
我们得跑到CAT里面

11:56.480 --> 12:03.970
去看这个喵是否定义了

12:03.970 --> 12:04.770
有吧

12:04.770 --> 12:05.970
这个喵是有的

12:05.970 --> 12:06.970
这边有123

12:06.970 --> 12:08.170
那没关系

12:08.170 --> 12:11.070
我们把它作为我们的一个

12:11.070 --> 12:12.070
函数的

12:12.070 --> 12:20.340
作为我们的一个启动页写出来

12:20.340 --> 12:33.680
我们写出RF Function

12:33.680 --> 12:33.880
好

12:33.880 --> 12:35.680
我们来看一下啊

12:35.680 --> 12:36.480
黑页面

12:36.480 --> 12:37.780
咱们能看到123

12:37.780 --> 12:38.880
123是什么

12:38.880 --> 12:40.280
是我CAT里面的呈现

12:40.280 --> 12:42.080
说明CAT部分

12:42.080 --> 12:46.780
在当前的这个RF Function里面

12:46.780 --> 12:48.180
已经呈现出来了

12:48.180 --> 12:48.880
那么紧接着

12:48.880 --> 12:51.680
我们就需要开始调取一个按钮

12:51.680 --> 12:53.580
这边123已经呈现出来了

12:53.580 --> 12:53.980
紧接着

12:53.980 --> 12:55.480
我们要去触发这个按钮

12:55.480 --> 12:56.680
那么这个按钮的话呢

12:56.680 --> 13:07.980
我们在这下面写

13:07.980 --> 13:09.180
Button

13:09.180 --> 13:10.080
然后在这边

13:10.080 --> 13:13.580
我们去写上

13:13.580 --> 13:22.780
Unclick

13:22.780 --> 13:37.390
我们前后定一个View出来

13:37.390 --> 13:40.390
把Button上面

13:40.390 --> 13:45.700
注册声明一下

13:45.700 --> 13:50.160
此时我们去换起

13:50.160 --> 13:51.160
你可以直接写

13:51.160 --> 13:52.460
This点

13:52.460 --> 13:53.560
Handle Click

13:53.560 --> 13:59.630
点Bound This

13:59.630 --> 14:02.670
让我们来看一下效果

14:02.670 --> 14:03.870
看到吗

14:03.870 --> 14:05.470
是不是在我们的

14:05.470 --> 14:07.370
控制台里面

14:07.370 --> 14:08.470
答应出了

14:08.470 --> 14:11.070
自组键里面的一个方法

14:11.070 --> 14:13.670
那么这就是RF函数的调用

14:13.670 --> 14:15.070
我们再来看一下

14:15.070 --> 14:16.470
RF的函数调用

14:16.470 --> 14:17.870
它是指的是

14:17.870 --> 14:19.770
它把我们当前的

14:19.770 --> 14:20.970
只要你RF后面

14:20.970 --> 14:22.670
引用了一个函数体

14:22.670 --> 14:25.170
这个函数是一个匿名函数结构的话

14:25.170 --> 14:27.470
那么它就会把当前的cat实力

14:27.470 --> 14:29.370
它把当前的cat实力

14:29.370 --> 14:31.270
作为你现在node

14:31.270 --> 14:33.170
就是说cat对象

14:33.170 --> 14:34.770
传给了node

14:34.770 --> 14:36.470
node把cat对象

14:36.470 --> 14:38.170
附给了distant cat

14:38.170 --> 14:39.870
所以在当前这个程序中

14:39.870 --> 14:42.570
distant cat就是cat对象

14:42.570 --> 14:44.470
而cat对象本身自己内部

14:44.470 --> 14:45.770
有一个方法

14:45.770 --> 14:46.970
叫做喵

14:46.970 --> 14:48.070
那这样的话呢

14:48.070 --> 14:50.070
我只需要去触发

14:50.070 --> 14:52.070
当前程序下的

14:52.170 --> 14:53.470
handleclick

14:53.470 --> 14:54.870
那么它就触发了

14:54.870 --> 14:57.270
我们cat对象下面的描

14:57.270 --> 14:58.870
所以你在屏幕上

14:58.870 --> 15:01.570
你就能看到这个的打印

15:01.570 --> 15:03.270
是不是这个就很简单

15:03.270 --> 15:04.370
所以从这个逻辑上

15:04.370 --> 15:05.570
我们也能看到的是

15:05.570 --> 15:07.570
我们通过这样的方式

15:07.570 --> 15:09.770
能够创建出

15:09.770 --> 15:11.070
当前的一个函数体

15:11.070 --> 15:12.070
或者称之为

15:12.070 --> 15:15.570
我们获取它的一个实力对象

15:15.570 --> 15:17.570
这是自动的这一步要记住

15:17.570 --> 15:21.340
我们把这一步的中文写一下

15:21.340 --> 15:22.240
这一步一定要知道

15:22.240 --> 15:24.340
因为它不在整个程序上面

15:24.340 --> 15:25.140
有展示

15:25.140 --> 15:33.440
但它内部就是这么做的

15:33.440 --> 15:40.370
cat实力

15:40.370 --> 15:41.770
或者这么写

15:41.770 --> 15:45.570
distantifcat

15:45.570 --> 15:48.570
是获取了

15:48.570 --> 15:54.810
当前cat实力对象

15:54.810 --> 15:59.390
并传送

15:59.390 --> 16:01.290
当前这个cat实力对象

16:01.290 --> 16:05.390
给了notar

16:05.390 --> 16:16.270
然后notar再复制给了distantcat

16:16.270 --> 16:21.350
这是它现在所要操的一个方向

16:21.350 --> 16:26.650
这是它现在所要操的一个方向

16:26.650 --> 16:29.150
那么紧接着我们来看一下

16:29.150 --> 16:30.350
这是属于

16:30.350 --> 16:31.950
至于这里面的案例操作的话

16:31.950 --> 16:33.350
我们可以有很多对吧

16:33.350 --> 16:34.950
但是我们现在举了一个简单的

16:34.950 --> 16:38.150
就是我通过复元素

16:38.150 --> 16:40.550
直接拿到当前的紫元素的内容

16:40.550 --> 16:44.050
然后直接换起它现在里面的一个方法

16:44.050 --> 16:46.450
就可以看到整个这个效果

16:46.450 --> 16:47.750
那么我们紧接着

16:47.750 --> 16:48.850
还有什么呢

16:48.850 --> 16:50.550
我们其实前面说了

16:50.550 --> 16:51.950
除了自幅串

16:51.950 --> 16:55.050
我们前面说的自幅串的一种方式以外

16:55.050 --> 16:57.050
这是函数的一种方式

16:57.050 --> 16:58.650
那么函数还有一种

16:58.650 --> 17:00.250
那么更确切的讲

17:00.250 --> 17:02.050
它应该是创建

17:02.050 --> 17:03.750
它应该是一种创建

17:03.750 --> 17:04.250
好

17:04.250 --> 17:08.650
我们把当前的这个结构再修改一下

17:08.650 --> 17:10.950
我们把当前的结构再修改一下

17:10.950 --> 17:20.320
首先我们在当前结构下面

17:20.320 --> 17:22.320
把这个名称我们得改一下

17:22.320 --> 17:25.410
我们招称

17:25.410 --> 17:34.740
这个对吧

17:34.740 --> 17:40.310
RF Function

17:40.310 --> 17:41.910
RF Function

17:41.910 --> 17:43.810
首先我们在这个RF Function下面

17:43.810 --> 17:46.410
我们先做一个操作

17:46.510 --> 17:48.710
当前的Cat

17:48.710 --> 17:51.810
等于Tarot

17:51.810 --> 17:57.150
的Crate

17:57.150 --> 17:58.350
RF

17:59.650 --> 18:03.320
我通过我们写一下

18:03.320 --> 18:13.700
通过我们的

18:13.700 --> 18:22.210
来创建Cat对象

18:22.210 --> 18:22.510
好

18:22.510 --> 18:24.410
第一步先这样做好

18:24.410 --> 18:25.610
第二步没有关系

18:25.610 --> 18:28.410
因为我们之后依然会去调取

18:28.410 --> 18:29.310
那么第三步

18:29.310 --> 18:30.310
我们在这上面

18:30.310 --> 18:31.210
我们就改一下了

18:31.210 --> 18:31.810
改写了

18:31.810 --> 18:35.080
我们把它注释掉了

18:35.080 --> 18:36.280
然后在这上面

18:36.280 --> 18:38.080
我们依然进行改写

18:38.080 --> 18:39.680
我们做的是

18:39.680 --> 18:41.580
diss.ref.cat

18:41.580 --> 18:43.480
我们把它给

18:43.480 --> 18:47.600
注掉

18:47.600 --> 18:48.300
cat

18:48.300 --> 18:51.400
然后我们写的是ref等于

18:51.400 --> 18:57.650
直接是diss.cat

18:57.650 --> 19:03.100
直接diss.cat

19:03.100 --> 19:04.900
那我们来看一下

19:04.900 --> 19:07.300
这个两个之间的关系是什么

19:07.300 --> 19:11.200
首先我创建了一个叫做RF的引用

19:11.200 --> 19:14.300
把它付给了当前的diss.cat

19:14.300 --> 19:15.700
把它付给了

19:15.800 --> 19:18.400
然后当前的diss.cat操作

19:18.400 --> 19:21.900
我们直接把它和谁管绑定呢

19:21.900 --> 19:23.900
和现在的cat绑定

19:23.900 --> 19:27.300
所以这两句话合在一起就是

19:27.300 --> 19:29.000
创建了一个引用

19:29.000 --> 19:32.600
并且把这个引用绑在了cat上面

19:32.600 --> 19:35.500
所以cat就形成了我们的一个

19:35.500 --> 19:38.900
diss.cat的一个双起作用

19:38.900 --> 19:40.900
这个引用diss.cat我知道了

19:40.900 --> 19:41.800
有这东西

19:41.800 --> 19:44.100
但它真正意上指向谁呢

19:44.100 --> 19:45.900
那是由它来指定的

19:45.900 --> 19:46.800
那么这样的话

19:46.800 --> 19:48.800
我再去调取我们现在方法的时候

19:48.800 --> 19:49.700
diss.cat

19:49.700 --> 19:50.600
它就知道了

19:50.600 --> 19:52.100
它指向的是cat

19:52.100 --> 19:54.400
并且调用cat里面的妙

19:54.400 --> 19:56.400
是这个逻辑

19:56.400 --> 19:59.300
现在看到如果它只抱了一个错的话

19:59.300 --> 20:00.500
就意味着这句话

20:00.500 --> 20:03.900
我们要把它放在constructor里面

20:03.900 --> 20:05.200
放在构造函数里面

20:05.200 --> 20:06.900
因为它本身是一个类的话

20:06.900 --> 20:09.300
我们把它直接放在类中

20:09.300 --> 20:10.500
它其实不是属性

20:10.500 --> 20:11.300
也不是方法

20:11.300 --> 20:14.700
也不是属于一个常量值

20:14.700 --> 20:23.860
所以我们把它放在constructor里面

20:23.860 --> 20:24.760
好 进来了

20:24.760 --> 20:26.860
进来以后咱们再看一下语法结构

20:26.860 --> 20:28.960
其实这时候是没有错的

20:28.960 --> 20:29.660
对吧

20:29.660 --> 20:30.860
下面这些是没有错的

20:30.860 --> 20:31.560
OK

20:31.560 --> 20:33.260
那么现在我们来看一下

20:33.260 --> 20:35.060
从逻辑上来看的话

20:35.060 --> 20:36.260
我们是这边是

20:36.260 --> 20:37.060
1

20:37.060 --> 20:38.660
我现在在构造的时候

20:38.660 --> 20:40.960
我创建了现在的一个叫做

20:40.960 --> 20:43.860
creator reference的这样的一个对象

20:43.860 --> 20:45.960
然后把它直接附给了diss.cat

20:45.960 --> 20:47.960
diss.cat和谁绑定呢

20:47.960 --> 20:48.960
在我们21行

20:48.960 --> 20:51.260
它和我们当前的cat实力绑定

20:51.260 --> 20:53.260
此时你对我们现在当前按钮

20:53.260 --> 20:54.460
进行点击的时候

20:54.460 --> 20:56.260
它会去触发diss.cat

20:56.260 --> 20:58.460
然后diss.cat就是我们当前的这样的

20:58.460 --> 21:00.260
一个cat实力

21:00.260 --> 21:01.660
然后它点击它的meow

21:01.660 --> 21:02.360
那么这样的话

21:02.360 --> 21:05.460
在它里面这个meowmeow的几个文本

21:05.460 --> 21:06.660
就能显示出来

21:06.660 --> 21:07.660
是这个逻辑吧

21:07.660 --> 21:08.860
然后先再来看一下

21:08.860 --> 21:11.360
点击一下我们的按钮

21:11.360 --> 21:12.460
它给你抱了一个错

21:12.460 --> 21:16.160
它说diss.cat meow is没有这个函数

21:16.160 --> 21:18.160
那就是说在这里会有问题

21:18.160 --> 21:19.960
那么这里我要说明一下

21:19.960 --> 21:21.360
这个错是正常的

21:21.360 --> 21:23.160
这个错的意味着就是

21:23.160 --> 21:26.460
我们刚才所谓的这样的模型

21:26.460 --> 21:28.360
和你现在所需要

21:28.360 --> 21:30.360
自动创建一个模型出来

21:30.360 --> 21:33.160
它们里面差了一个属性

21:33.160 --> 21:34.460
差了一个属性

21:34.460 --> 21:35.460
什么意思呢

21:35.460 --> 21:38.160
就是当前的diss.cat

21:38.160 --> 21:40.160
它由于你每次在程序中

21:40.160 --> 21:41.560
都可以单独创建

21:41.560 --> 21:43.060
current to reference

21:43.060 --> 21:44.360
可以多次创建

21:44.360 --> 21:46.360
所以它需要带一个属性

21:46.360 --> 21:48.360
叫什么current

21:48.360 --> 21:49.860
当前

21:49.860 --> 21:53.760
当前的这个meow是哪一个

21:53.760 --> 21:55.160
那么你如果说

21:55.160 --> 21:57.260
你是用的是我们前面这种结构

21:57.260 --> 21:58.260
diss.cat model

21:58.260 --> 22:00.360
也就是我们的函数结构来做的话

22:00.360 --> 22:01.460
那么你就不需要这个

22:01.460 --> 22:03.160
你只是diss.cat就可以

22:03.160 --> 22:04.360
因为它会知道

22:04.360 --> 22:08.060
当前你只是返回了一个所谓的cat对象

22:08.060 --> 22:11.460
但对于你现在的整个reference来说

22:11.660 --> 22:13.460
它并不知道你里面到底

22:13.460 --> 22:14.860
什么时候你还会有这个

22:14.860 --> 22:16.660
并且你现在针对的是哪一个

22:16.660 --> 22:18.060
它这里面不清楚

22:18.060 --> 22:20.460
所以你是要多加一个属性

22:20.460 --> 22:22.460
叫做current

22:22.460 --> 22:24.060
这个你就要记住一下

22:24.060 --> 22:25.760
great reference

22:25.760 --> 22:27.560
自己创建出来的一个对象

22:27.560 --> 22:28.860
要加个current

22:28.860 --> 22:31.360
加好以后我们再来看运行

22:31.360 --> 22:33.560
是不是就出来了

22:33.560 --> 22:35.360
所以这两个函数的写法

22:35.360 --> 22:36.560
我们把它画呢

22:36.560 --> 22:37.760
把原理全抛开

22:37.760 --> 22:41.360
我们只讲它的一个使用方式

22:41.660 --> 22:44.460
用函数结构直接返回当前的

22:44.460 --> 22:45.660
这样的diss.cat

22:45.660 --> 22:47.960
然后直接调用它里面的方法

22:47.960 --> 22:50.360
如果用create.ref的话

22:50.360 --> 22:51.960
你需要在diss.cat后面

22:51.960 --> 22:54.360
任何的显示操作的过程中

22:54.360 --> 22:56.260
你在调用方法的模型下面

22:56.260 --> 22:59.160
前面都跟上一个current当前

22:59.160 --> 23:01.060
这样就可以了

23:01.060 --> 23:02.460
所以我们把这两种方式

23:02.460 --> 23:03.860
都给大家讲了一下

23:03.860 --> 23:08.060
一种是用create.ref的方式创建

23:08.060 --> 23:09.860
一个是我们直接利用

23:09.860 --> 23:11.860
我们的函数体的方式创建

23:11.860 --> 23:13.260
函数体的特点是在于

23:13.260 --> 23:15.960
你第一个所谓的cat的实力对象

23:15.960 --> 23:16.960
就会被传入进去

23:16.960 --> 23:18.060
变成第一个noder

23:18.060 --> 23:20.960
而对于我们的自行创建的create

23:20.960 --> 23:22.460
reference来讲

23:22.460 --> 23:23.560
它每次操作的时候

23:23.560 --> 23:25.960
都必须要跟上一个current

23:25.960 --> 23:27.760
其他的基本上就一样了

23:27.760 --> 23:30.960
那么这个是我们说到的IEF的引用

23:30.960 --> 23:32.660
再回过头来讲一下

23:32.660 --> 23:35.060
IEF的引用我们在官网上面

23:35.060 --> 23:38.860
或者说在我们的整个的操作过程中

23:38.860 --> 23:43.260
我们说尽量避免过渡使用IEF

23:43.260 --> 23:45.060
会有这样一个说法

23:45.060 --> 23:47.260
所以方法交给大家

23:47.260 --> 23:49.460
但是这边有一个注释需要写一下

23:49.460 --> 24:05.660
就是尽量避免去使用这个

24:05.660 --> 24:07.160
那么我们讲

24:07.160 --> 24:09.060
因为这个方法里面

24:09.060 --> 24:13.860
我们更多的想更新现在的一些组建的话

24:13.860 --> 24:16.060
我们的做法很多时候

24:16.060 --> 24:19.660
我们都可以使用状态值

24:19.760 --> 24:25.060
状态值的写法比起我们现在的IEF来讲

24:25.060 --> 24:27.060
它更有意义

24:27.060 --> 24:30.260
或者说更有一个清晰度

24:30.260 --> 24:35.360
因为我如果写在函数内的一些方法和属性

24:35.360 --> 24:38.260
直接被你外部去调取到了

24:38.260 --> 24:39.260
那么这样的话

24:39.260 --> 24:40.160
其实有点乱

24:40.160 --> 24:41.560
也就是对于外部来讲

24:41.560 --> 24:45.060
它既要管理函数组建内部的事情

24:45.060 --> 24:46.860
它又要管理它自己的事情

24:46.860 --> 24:47.560
是吧

24:47.560 --> 24:49.460
但是如果说我都放在一起的话

24:49.460 --> 24:51.260
那么他们怎么样进通讯呢

24:51.260 --> 24:52.260
他们之间的通讯

24:52.260 --> 24:55.360
我可以在组建内部建立一个Stator

24:55.360 --> 24:57.060
所有的数据都往Stator里放

24:57.060 --> 24:59.060
所有的数据都往Stator里取

24:59.060 --> 24:59.960
这样的话

24:59.960 --> 25:02.260
我们的页面就安全度

25:02.260 --> 25:05.760
或者说是整理度更清晰

25:05.760 --> 25:07.860
这点你需要了解到

25:07.860 --> 25:09.460
所以在系统上面的说法

25:09.460 --> 25:12.060
就是尽量避免使用这个

25:12.060 --> 25:27.670
或者称之为不要过度使用

25:27.670 --> 25:28.470
OK吧

25:28.570 --> 25:30.070
这是我们说到的

25:30.070 --> 25:33.370
一个raffs的一个写法概念

25:33.370 --> 25:34.670
一个自负创引用

25:34.670 --> 25:36.070
两个函数引用

25:36.070 --> 25:38.470
但是我们系统说不要过度

25:38.470 --> 25:39.270
不要进

25:39.270 --> 25:41.370
我们就不对它进行扩展

25:41.370 --> 25:42.370
只是知道一下

25:42.370 --> 25:44.370
在Taro中怎么写就可以了

