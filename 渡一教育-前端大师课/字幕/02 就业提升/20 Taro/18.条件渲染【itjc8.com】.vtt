WEBVTT

00:00.240 --> 00:03.520
好 我们继续讲解我们的泰瑞希勒克城

00:03.520 --> 00:05.800
希勒克内给大家讲解一下条件宣染

00:05.800 --> 00:09.200
对于条件宣染很多同学都不是陌生的

00:09.200 --> 00:10.720
都会非常的熟悉

00:10.720 --> 00:13.160
那么在这里面我们还是需要讲解

00:13.160 --> 00:16.640
在泰瑞中我们怎么样去利用条件宣染

00:16.640 --> 00:18.680
制作一些我们页面的

00:18.680 --> 00:21.360
并不是简单的逻辑处理

00:21.360 --> 00:23.360
而是属于宣染操作

00:23.360 --> 00:25.760
我们一直讲条件宣染 条件宣染

00:25.760 --> 00:29.840
其实有时候我们一直会把它理解成好像是一个F判断

00:30.000 --> 00:33.760
但是更多的我们在泰瑞中要体现出

00:33.760 --> 00:35.840
怎么样去做一次宣染

00:35.840 --> 00:38.480
利用条件完成这样的一个操作

00:38.480 --> 00:42.680
现在大家先来看一下我们的PPT的解释

00:42.680 --> 00:45.440
他说在泰瑞中你可以创建不同的组件

00:45.440 --> 00:47.600
来封装各自你需要的行为

00:47.600 --> 00:50.360
那么这其实就是组件的意义

00:50.360 --> 00:54.040
然后你还可以根据应用的状态变化

00:54.040 --> 00:56.240
只宣染其中一部分

00:56.240 --> 00:59.720
那么我们可以把你现在所需要的所有的内容

00:59.720 --> 01:03.160
全部给做在一个主页面中

01:03.160 --> 01:06.800
但是并不是所有的内容都需要呈现

01:06.800 --> 01:08.240
那有时候比如说

01:09.680 --> 01:12.000
我的这样的一个页面

01:12.000 --> 01:14.120
如果说你现在正式登陆状态

01:14.120 --> 01:16.560
那你进去应该看到我的个人中心

01:16.560 --> 01:18.960
但如果说你现在非登陆状态

01:18.960 --> 01:20.280
那你应该进去以后

01:20.280 --> 01:22.640
你应该是看到有个登陆界面

01:22.640 --> 01:24.960
那么对于我们整个页面来讲的话

01:24.960 --> 01:27.280
它其实只是一个页面

01:27.280 --> 01:29.160
但是它怎么去判断这个呢

01:29.160 --> 01:33.600
我们说你就可以通过一些所谓的辩量的方式

01:33.600 --> 01:36.400
那么通过条件宣染的方式

01:36.400 --> 01:37.640
你去观察一下

01:37.640 --> 01:41.880
它现在究竟应该把哪一块内容给你呈现出来

01:41.880 --> 01:44.640
这就是我们说的只宣染其中一部分

01:44.640 --> 01:45.720
是这个逻辑

01:45.720 --> 01:47.760
再来咱们继续往下看

01:47.760 --> 01:49.760
这边有个title中的条件宣染

01:49.760 --> 01:51.800
和just agree中的基本一致

01:51.800 --> 01:53.600
那么这个基本一致呢

01:53.600 --> 01:55.160
主要的特点是在于

01:55.160 --> 01:58.120
它的写法上不会有特别多的一说

01:58.120 --> 01:59.480
新型规范

01:59.480 --> 02:01.280
使用title的操作服

02:01.280 --> 02:03.640
if和条件运算服

02:03.640 --> 02:05.440
来创建表的

02:05.440 --> 02:06.840
来创建

02:06.840 --> 02:08.320
表示当前状态的元素

02:08.320 --> 02:12.120
然后让title根据他们来更新UL

02:12.120 --> 02:14.120
其实这个概念和上面是一样

02:14.120 --> 02:16.600
都是部分的更新操作

02:16.600 --> 02:17.800
接下去我们来看

02:17.800 --> 02:20.440
我们一般有这四种形式

02:20.440 --> 02:21.920
第一种是元素辩量

02:21.920 --> 02:22.680
第二种呢

02:22.680 --> 02:24.160
是叫做那个元素辩量

02:24.160 --> 02:26.840
其实就是我们有一个辩量来控制

02:26.840 --> 02:28.880
你现在哪一块内容的呈现

02:28.880 --> 02:29.520
第二块呢

02:29.520 --> 02:30.640
逻辑运算服

02:30.640 --> 02:31.480
逻辑运算服呢

02:31.480 --> 02:32.480
我们其实大家知道

02:32.480 --> 02:35.280
基本上我们用的比较多的是鱼

02:35.280 --> 02:37.040
逻辑鱼

02:37.040 --> 02:39.640
就是两个我们的大括号

02:39.640 --> 02:41.600
那不是两个我们的鱼

02:41.600 --> 02:42.800
这样的符号对吧

02:42.800 --> 02:44.640
应该对大家来讲不陌生

02:44.640 --> 02:46.520
这样的符号

02:46.520 --> 02:47.440
逻辑鱼

02:47.440 --> 02:49.760
我们利用逻辑鱼的惰性原理啊

02:49.760 --> 02:53.360
就是如果说前面的返回是q

02:53.360 --> 02:55.680
那么它后面的一定会执行

02:55.680 --> 02:57.400
如果前面返回是force

02:57.400 --> 02:59.120
那后面一定是不执行

02:59.120 --> 03:01.040
它称之为它的剁性原理

03:01.040 --> 03:02.920
然后三元运算服

03:02.920 --> 03:03.800
那么这个呢

03:03.800 --> 03:06.360
就是我们所谓的条件运算服的表达是

03:06.360 --> 03:08.000
我们可以直接利用它

03:08.000 --> 03:09.960
来完成现在页面中

03:09.960 --> 03:14.880
一些简短的小型的一些条件渲染操作

03:14.880 --> 03:15.240
最后呢

03:15.240 --> 03:16.400
有个美举条件

03:16.400 --> 03:17.200
那么其实呢

03:17.200 --> 03:20.320
美举是多于两折以上的

03:20.320 --> 03:23.040
那么我们可以使用美举的方式来做操作

03:23.040 --> 03:23.520
好了

03:23.520 --> 03:24.600
那么我们现在呢

03:24.600 --> 03:26.040
先给大家来看一下

03:26.040 --> 03:27.640
我们的条件渲染

03:27.640 --> 03:29.680
它本身在我们代码中

03:29.680 --> 03:31.720
可以有什么样的一些操作

03:31.720 --> 03:37.910
我们打开我们的原码

03:37.910 --> 03:40.310
打开我们的原码

03:40.310 --> 03:43.110
原码还是非常简单的一个基本结构

03:43.110 --> 03:44.430
里面有我们的

03:44.430 --> 03:46.390
可以创建一个component的文件家

03:46.390 --> 03:47.470
可以有个majors

03:47.470 --> 03:49.830
可以这边有我们的pagers

03:49.830 --> 03:50.670
对不对

03:50.670 --> 03:51.150
这个

03:51.150 --> 03:51.990
然后的话呢

03:51.990 --> 03:53.310
我们来制作一下

03:53.350 --> 03:55.470
我们把原有的一些

03:55.470 --> 03:57.230
我们清空掉

03:57.230 --> 03:59.070
比如说这里边有一些内容

03:59.070 --> 04:03.410
我们把它给清掉

04:03.410 --> 04:07.210
我们里面只完成一个最简单的部分

04:07.210 --> 04:09.210
那就是这个

04:09.210 --> 04:10.730
这是最简单了

04:10.730 --> 04:11.130
然后呢

04:11.130 --> 04:14.210
我们把我们的

04:14.210 --> 04:17.770
看一下外面是否有原生的那些文件存在

04:17.770 --> 04:19.050
app.css里面

04:19.050 --> 04:20.050
没有

04:20.050 --> 04:21.330
这个没关系

04:21.330 --> 04:22.850
然后对这个里面有没有

04:22.850 --> 04:24.210
这个里面我们也清掉

04:24.210 --> 04:26.090
但是一样是不是我们所需要的

04:26.090 --> 04:28.290
待会我们要用的和我们在家

04:28.290 --> 04:30.210
那么这里面打开页面

04:30.210 --> 04:32.250
看到的就是一张空白

04:32.250 --> 04:33.050
啥都没有

04:33.050 --> 04:33.490
对吧

04:33.490 --> 04:35.570
这是我们所需要的部分

04:35.570 --> 04:36.530
紧接着

04:36.530 --> 04:38.530
我们开始制作一下

04:38.530 --> 04:41.650
我们里面去导入一个loggingstater

04:41.650 --> 04:43.970
成为登录状态的

04:43.970 --> 04:47.090
一个我们的逐进

04:47.090 --> 04:47.330
好

04:47.330 --> 04:48.810
我们先写一下

04:48.810 --> 04:52.180
等会我们到那边去写

04:52.180 --> 04:53.460
import

04:53.460 --> 05:01.540
我们写上loggingstatersfrom

05:01.540 --> 05:08.260
我们完成loggingstater

05:08.260 --> 05:09.620
我们把这个

05:09.620 --> 05:11.020
我们在哪里做呢

05:11.020 --> 05:14.100
我们就在当前页面

05:14.100 --> 05:16.140
当前页面里面

05:16.140 --> 05:18.580
我们还是放到component里面去吧

05:18.580 --> 05:20.020
看到component里面去

05:20.020 --> 05:20.780
所以点点杠

05:20.780 --> 05:21.740
点点杠

05:21.740 --> 05:25.940
然后找到component里边

05:25.940 --> 05:27.940
我们去建立文件家

05:27.940 --> 05:29.380
叫loggingstater

05:29.380 --> 05:35.460
在里面放上一个loggingstaters

05:35.460 --> 05:36.980
去做一个这部分

05:36.980 --> 05:43.430
然后我们把它在这边直接运行一下

05:43.430 --> 05:45.870
然后我们需要传一个参数进去

05:45.870 --> 05:54.390
我们传一个是否登录log

05:54.390 --> 05:56.750
那我们给大家一个参数

05:56.790 --> 05:59.750
然后这边我们给一个this点

05:59.750 --> 06:01.190
我们在外部定一下

06:01.190 --> 06:02.550
this点

06:02.550 --> 06:07.380
stater

06:07.380 --> 06:10.780
点

06:10.780 --> 06:11.980
flag

06:11.980 --> 06:13.620
然后我们在constrator里面

06:13.620 --> 06:15.500
我们写上

06:15.500 --> 06:32.180
stater

06:32.180 --> 06:33.900
给它一个true

06:33.900 --> 06:34.580
好

06:34.580 --> 06:36.100
紧接着我们去完成

06:36.100 --> 06:39.140
在它里面的loggingstater的一个

06:39.140 --> 06:44.420
组件的创建

06:44.420 --> 06:47.450
loggingstater

06:47.450 --> 06:50.090
jxx

06:50.090 --> 06:51.690
那么我们其实它的结构

06:51.690 --> 06:52.650
和它是一样的

06:52.650 --> 06:54.250
我们把这个搬过来

06:54.250 --> 06:55.130
然后修改

06:55.130 --> 06:57.610
首先它导入这个没问题

06:57.610 --> 06:58.250
导入这个

06:58.250 --> 06:59.610
然后css不需要

06:59.610 --> 07:02.490
然后它也没有自行完成组件的导入

07:02.490 --> 07:04.170
然后把这个名称改一下

07:04.170 --> 07:08.890
它叫做loggingstaters

07:10.530 --> 07:11.770
完成这个

07:11.770 --> 07:13.690
然后它没有这个

07:13.690 --> 07:16.490
然后它可以有一个super

07:16.490 --> 07:17.970
调取复原素

07:17.970 --> 07:19.770
然后构造函数

07:19.770 --> 07:21.570
暂时生命周期

07:21.570 --> 07:22.450
然后里边的话

07:22.450 --> 07:23.050
做输出

07:23.050 --> 07:25.530
它不是调用

07:25.530 --> 07:26.770
在这个过程中

07:26.770 --> 07:28.170
那么我们已经到这里了

07:28.170 --> 07:29.130
那么注意

07:29.130 --> 07:30.650
我们通过它的render

07:30.650 --> 07:32.130
render在返回之前

07:32.130 --> 07:34.650
这边可以干一些事儿

07:34.650 --> 07:37.210
我们首先第一点

07:37.210 --> 07:42.130
接收用户的属性

07:42.130 --> 07:45.190
传直

07:45.190 --> 07:47.590
我们在这边constater

07:47.590 --> 07:49.590
这个只始终保持不动

07:49.590 --> 07:51.550
is

07:51.550 --> 07:52.990
logging

07:53.750 --> 07:55.310
等于

07:55.310 --> 07:59.750
当前的property.属性交

07:59.750 --> 08:01.390
is

08:01.390 --> 08:03.070
我们看一下

08:03.070 --> 08:03.790
在这

08:03.790 --> 08:05.070
is

08:05.070 --> 08:07.270
logging

08:07.270 --> 08:09.750
islogging

08:09.750 --> 08:11.270
我们把它拿进来

08:11.270 --> 08:14.990
第二步

08:14.990 --> 08:15.590
第二步

08:15.590 --> 08:19.430
我们做一个简单的辩量

08:19.430 --> 08:21.710
叫做

08:21.710 --> 08:24.390
我们的

08:24.390 --> 08:26.350
jessar

08:26.350 --> 08:31.980
显示辩量

08:31.980 --> 08:34.460
let

08:34.460 --> 08:36.220
show

08:36.220 --> 08:42.900
content

08:42.900 --> 08:44.620
进接着再来

08:44.620 --> 08:46.340
那么在我们的return

08:46.340 --> 08:48.140
这下面view里面的话

08:48.140 --> 08:49.620
我们写上

08:49.620 --> 08:50.740
我们在这做判断

08:50.740 --> 08:52.220
判断里面再来我做

08:52.220 --> 08:58.890
然后判断

08:58.890 --> 09:02.090
是否已经登录

09:02.090 --> 09:03.610
我们先用这样的方式来

09:03.610 --> 09:06.050
先做一个辩量级的

09:06.050 --> 09:08.370
如果

09:08.370 --> 09:09.810
is

09:10.570 --> 09:11.770
logging的印

09:11.770 --> 09:14.290
它是属于已经登录了

09:14.290 --> 09:16.090
所以它会接到的是一个

09:16.090 --> 09:17.570
然后此时呢

09:17.570 --> 09:18.570
我们这边就来

09:18.570 --> 09:25.230
我们做一个show content

09:25.230 --> 09:27.590
然后我们把现在的页面中

09:27.590 --> 09:33.580
一些标签给它

09:33.580 --> 09:36.850
view

09:36.850 --> 09:38.410
view

09:38.410 --> 09:39.690
然后告诉它

09:39.690 --> 09:42.450
现在是

09:42.450 --> 09:44.570
paster

09:44.570 --> 09:47.350
已经登录

09:47.350 --> 09:50.590
欢迎

09:50.670 --> 09:51.750
明的

09:51.750 --> 09:54.670
光灵

09:54.670 --> 09:56.510
我们这样写

09:56.510 --> 10:00.350
不然

10:00.350 --> 10:02.950
show content

10:02.950 --> 10:08.440
然后view

10:08.440 --> 10:09.880
然后呢

10:09.880 --> 10:22.370
注意啊这边应该是test

10:22.370 --> 10:23.490
不然的话就不是

10:23.490 --> 10:26.820
test的写上就是

10:26.820 --> 10:30.700
请先登录

10:30.700 --> 10:39.870
然后我们做一个按钮

10:39.870 --> 10:42.670
然后按钮里面现在暂时先不写东西

10:42.670 --> 10:43.830
然后我们这样

10:43.870 --> 10:45.510
然后这样做完以后呢

10:45.510 --> 10:47.830
它一定会有个show content

10:47.830 --> 10:48.870
里面有直了

10:48.870 --> 10:49.630
对吧

10:49.630 --> 10:51.110
这里边肯定有直了

10:51.110 --> 10:52.390
那么有直以后的话呢

10:52.390 --> 10:53.830
我们就把它

10:53.830 --> 10:55.550
作为我们的

10:55.550 --> 10:58.370
最后

10:58.370 --> 11:03.800
跟文件中的输出内容

11:03.800 --> 11:04.400
好

11:04.400 --> 11:05.760
那我回过头来

11:05.760 --> 11:07.640
我这边传什么直进去

11:07.640 --> 11:08.440
导致的是

11:08.440 --> 11:11.640
我现在应该呈现什么样的页面

11:11.640 --> 11:12.840
请先登录

11:12.840 --> 11:13.840
是不是

11:13.840 --> 11:14.400
我们来看

11:14.400 --> 11:15.840
为什么显示这个

11:15.880 --> 11:19.880
我这边给他传了一个q进去

11:19.880 --> 11:22.240
这边接到q以后

11:22.240 --> 11:24.560
他为什么会是显示登录

11:24.560 --> 11:27.280
我们来查一下原因了

11:27.280 --> 11:28.640
is

11:28.640 --> 11:30.440
login的应

11:30.440 --> 11:31.120
跑这来

11:31.120 --> 11:34.680
首先我们把他的直给打印一下看一下

11:34.680 --> 11:39.550
我们把他的直打印一下看一下

11:39.550 --> 11:40.430
is

11:40.430 --> 11:48.660
login的应

11:48.660 --> 11:49.220
看

11:49.220 --> 11:51.220
他什么都没拿到

11:51.220 --> 11:51.900
看一下

11:51.900 --> 11:54.420
这是什么原因

11:54.420 --> 11:57.980
这是什么原因

11:57.980 --> 12:00.820
我们检查一下整个的操作

12:00.820 --> 12:01.260
注意

12:01.260 --> 12:03.380
这种时候是有一个坑的

12:03.380 --> 12:04.540
这坑当然

12:04.540 --> 12:05.740
不是属于真的坑

12:05.740 --> 12:07.420
他其实是个尾坑

12:07.420 --> 12:09.460
你发现这边的直没有传进来

12:09.460 --> 12:11.980
首先他完成了这一个的显示

12:11.980 --> 12:15.140
代表这样的一个组件已经被调用了

12:15.140 --> 12:15.740
此时

12:15.740 --> 12:16.580
你回到这里来

12:16.580 --> 12:18.180
是不是这直没有传进去呢

12:18.180 --> 12:19.500
或者说这个没有拿到呢

12:19.500 --> 12:21.260
你直接这边写个q

12:21.260 --> 12:22.180
你来看

12:22.180 --> 12:23.140
如果你这样写

12:23.140 --> 12:24.300
他还没拿到的话

12:24.300 --> 12:24.900
就代表着

12:24.900 --> 12:26.540
他真的不是外面传植的问题

12:26.540 --> 12:27.660
有没有发现

12:27.660 --> 12:28.940
前面那个先不用看啊

12:28.940 --> 12:29.700
看这个

12:29.700 --> 12:31.980
他真的这边还没有拿到

12:31.980 --> 12:33.100
那么这边就意味着

12:33.100 --> 12:35.100
他不是这个传植的问题了

12:35.100 --> 12:36.740
这传植这边是没有问题的

12:36.740 --> 12:37.860
进来以后

12:37.860 --> 12:38.740
这边在接收

12:38.740 --> 12:39.260
接收的时候

12:39.260 --> 12:41.620
我们直接把这个直拿下来

12:41.620 --> 12:42.500
直接拿下来以后

12:42.500 --> 12:43.820
你发现这边刚才显示的

12:43.820 --> 12:44.740
也是n5

12:44.740 --> 12:47.060
他表示这个直没有

12:47.060 --> 12:50.340
那么这里就有一个试点了

12:50.340 --> 12:53.380
我们讲属性里面在接收直的时候的话

12:53.380 --> 12:54.860
perpertice可以直接拿到

12:54.860 --> 12:56.500
你现在算免小定义的直

12:56.500 --> 12:57.900
但是我这边随便怎么定义

12:57.900 --> 12:59.740
他这边始终拿不到

12:59.740 --> 13:01.060
这个原因是在于

13:01.060 --> 13:04.140
不是这也不是调用的时候

13:04.140 --> 13:08.060
而是在这

13:08.060 --> 13:09.340
super

13:09.340 --> 13:10.700
如果你指实

13:10.700 --> 13:12.740
你不写constructor

13:12.740 --> 13:17.430
你这时候来看

13:17.430 --> 13:17.830
two

13:17.830 --> 13:19.430
拿到了吧

13:19.430 --> 13:22.910
如果你要写这个contractor直的话

13:22.910 --> 13:23.870
你注意

13:23.870 --> 13:25.710
super是直

13:25.710 --> 13:28.470
把你现在所需要拿过来

13:28.470 --> 13:31.310
也就是perperce里面所有的参数

13:31.310 --> 13:34.310
一并的需要先调用给积累

13:34.310 --> 13:37.830
然后由他完成我们的复制操作

13:37.830 --> 13:40.390
但是你现在先给空

13:40.390 --> 13:41.590
那就意味着

13:41.590 --> 13:43.590
你这时候是屏蔽掉了

13:43.590 --> 13:45.830
现在所传输进来的所有的参数

13:47.430 --> 13:48.030
这样的话

13:48.030 --> 13:51.230
积累就不再作为复制条件所使用

13:51.230 --> 13:51.670
这样的话

13:51.670 --> 13:53.750
你就没有办法取得这些直

13:53.750 --> 13:54.630
你要不你说

13:54.630 --> 13:55.870
那老师我得写这个

13:55.870 --> 13:59.480
那你写一个这个东西出来

13:59.480 --> 14:00.520
arguments

14:02.280 --> 14:02.920
你看一下

14:04.720 --> 14:05.640
有了吧

14:05.640 --> 14:06.520
看这个

14:06.520 --> 14:07.320
欢迎您的光临

14:07.320 --> 14:09.320
是不是也跳转页面了

14:09.320 --> 14:10.080
那就说

14:10.080 --> 14:12.560
如果我现在并不知道有任何参数

14:12.560 --> 14:14.120
或者我根本就没有参数

14:14.120 --> 14:16.600
但是我这样的constructor和super

14:16.600 --> 14:18.640
我又得写在那边的话

14:18.640 --> 14:20.320
那么你的做法就很简单

14:20.320 --> 14:23.400
你就在super里面写上一个解析服

14:23.400 --> 14:24.000
三个点

14:24.040 --> 14:26.400
后面跟上arguments

14:26.400 --> 14:27.320
这样写

14:27.320 --> 14:28.160
那这样的话

14:28.160 --> 14:29.040
系统就是指

14:29.040 --> 14:31.560
你传进来的所有的内容

14:31.560 --> 14:34.320
你都会直接先给到components去

14:34.320 --> 14:36.000
然后不影响你现在

14:36.000 --> 14:37.520
perperty的数据接收

14:38.600 --> 14:40.560
这样就完成了我们现在的结构

14:40.560 --> 14:41.480
看到了吗

14:41.480 --> 14:43.000
那么这样我就接到了这个指

14:43.000 --> 14:43.360
好了

14:43.360 --> 14:46.640
这是一个我们称为影视坑

14:46.640 --> 14:48.920
只要你了解super这个词的意义

14:48.920 --> 14:49.240
就可以

14:49.240 --> 14:50.440
并不是我随便写在这

14:50.440 --> 14:51.600
写一个空

14:51.600 --> 14:52.640
你在下面查了半天

14:52.640 --> 14:53.440
你会发现

14:53.440 --> 14:55.000
其实没有错

14:55.000 --> 14:55.560
ok

14:55.560 --> 14:56.640
我们继续往下来看

14:57.840 --> 15:00.760
我们把这个拿走

15:00.760 --> 15:01.800
console的拿走

15:01.800 --> 15:03.840
我们不要在这边看了

15:03.840 --> 15:04.840
首先我们进来看

15:04.840 --> 15:06.120
他已经拿到chew了

15:06.120 --> 15:06.800
chew的话

15:06.800 --> 15:08.160
他进入到if判断

15:08.160 --> 15:10.360
然后完成了这句话的呈现

15:10.360 --> 15:14.320
这句话就是我们现在作为一个已经登录以后的呈现

15:14.320 --> 15:15.760
然后show content

15:15.760 --> 15:17.440
这里面其实是个JXX格式

15:17.440 --> 15:19.440
然后我们利用JXX的表达式

15:19.440 --> 15:20.640
把它内容输出

15:21.880 --> 15:22.720
输出在哪

15:22.720 --> 15:24.360
输出在我们前端页面

15:24.360 --> 15:27.360
有一个叫logging stator的这个位置上面

15:27.360 --> 15:27.880
这样的话

15:27.880 --> 15:29.640
我们页面大概刚才就看到了

15:29.640 --> 15:34.690
我们现在呈现出的就是

15:34.690 --> 15:36.410
欢迎您的光临

15:36.410 --> 15:38.730
而此时如果你没有进行登录

15:38.730 --> 15:40.210
那么也就意味着此时

15:40.210 --> 15:43.330
你可能是作为刚刚开始进来的

15:43.330 --> 15:46.250
我们这地方可能就是force

15:46.250 --> 15:51.190
这时候你保存

15:51.190 --> 15:53.150
你所看到的就是请先登录

15:53.150 --> 15:54.030
这有个按钮

15:54.030 --> 15:54.710
是不是

15:54.710 --> 15:55.870
那就这就说明了

15:55.870 --> 15:59.110
我们现在条件宣染并不是简简单单

15:59.110 --> 16:02.350
做我们的F判断

16:02.350 --> 16:04.190
它可以进行里面

16:04.190 --> 16:05.950
根据你宣染的部分

16:05.950 --> 16:08.510
根据你现在条件的true and false

16:08.510 --> 16:12.390
显示宣染不同的JXX的页面结构

16:13.390 --> 16:14.230
这是在组件中

16:14.230 --> 16:15.670
我们可以这样去使用

16:15.670 --> 16:17.590
这是我们说到的第一项

16:17.590 --> 16:18.710
这是我们说到的第一项

16:18.710 --> 16:20.590
就是元素变量

16:20.590 --> 16:21.190
元素变量

16:21.190 --> 16:22.030
你现在理解

16:22.030 --> 16:23.910
它并不是自己是宣染

16:23.910 --> 16:27.270
而是它可以控制你宣染内容

16:27.270 --> 16:28.390
咱们感觉

16:28.390 --> 16:30.670
这个写法相对而言

16:30.670 --> 16:34.150
应该讲不是特别的省力省事

16:34.150 --> 16:36.710
因为它本身还会有一点

16:36.710 --> 16:38.230
这样的F的大判断

16:38.230 --> 16:39.750
ALS在

16:39.750 --> 16:42.350
那么我们就接入到第二个写法

16:42.350 --> 16:44.790
叫做逻辑运算符

16:44.790 --> 16:46.990
进入到逻辑运算符

16:46.990 --> 16:48.590
首先元素变量

16:48.590 --> 16:51.190
它是把你现在的F语句

16:51.190 --> 16:53.110
和我们的显示

16:53.110 --> 16:54.630
进行了分离

16:54.630 --> 16:57.190
它F是判断进入哪一个执行语句

16:57.190 --> 16:58.190
而显示内容

16:58.190 --> 17:00.310
在另一个叫修content的变量中

17:01.310 --> 17:02.150
是这个

17:02.150 --> 17:03.630
那么现在我们来想一下

17:03.630 --> 17:05.790
逻辑运算符的概念

17:05.790 --> 17:06.990
逻辑运算符

17:06.990 --> 17:08.830
在我们平时的学习过程中

17:08.830 --> 17:11.630
我们是作为一种条件判断所存在的

17:11.630 --> 17:12.910
何为逻辑运算

17:12.910 --> 17:14.910
就是前面和后面

17:14.910 --> 17:17.350
都会有一个不而类型的结果

17:17.350 --> 17:18.750
我们根据这两个结果

17:18.750 --> 17:23.070
来返回你现在最终的一个结果值

17:23.150 --> 17:25.150
如果左右两边结果

17:25.150 --> 17:26.830
都是真的情况下

17:26.830 --> 17:28.350
那它才会返回真

17:28.350 --> 17:30.550
如果两边有一边是假

17:30.550 --> 17:31.870
那么它最终的结果

17:31.870 --> 17:32.390
也是假

17:34.150 --> 17:35.270
那么我们来说一下

17:35.270 --> 17:43.390
什么叫做逻辑运算符的惰性原理

17:43.390 --> 17:44.470
惰性原理是指

17:44.470 --> 17:45.870
我们刚才说了

17:45.870 --> 17:48.830
如果它两边有一边是假的话

17:48.830 --> 17:50.750
那它最终永远返回假

17:50.750 --> 17:52.510
那问题在这里来了

17:52.510 --> 17:54.830
如果你前面一个不而值

17:54.830 --> 17:56.350
已经返回了假

17:56.350 --> 17:57.950
那么后面这段代

17:57.990 --> 17:59.110
无论你怎么做

17:59.110 --> 18:01.190
它永远最后的结果还是假

18:01.190 --> 18:02.070
是不是

18:02.070 --> 18:03.190
那么就意味着

18:03.190 --> 18:05.790
只要看到前面结果是false的话

18:05.790 --> 18:10.790
那整个语的结果就已经出来了

18:10.790 --> 18:12.110
在这种情况下

18:12.110 --> 18:14.030
我们的逻辑语的操作

18:14.030 --> 18:16.950
就是它不再执行后面的命令

18:16.950 --> 18:17.990
是这个意思

18:17.990 --> 18:20.150
如果说你前面是真

18:20.150 --> 18:21.870
那么逻辑语的话

18:21.870 --> 18:23.110
它还要去计算一下

18:23.110 --> 18:25.470
后面你返回真和假

18:25.470 --> 18:27.190
那这样它才能判断出结果

18:27.190 --> 18:28.110
所以你前面真

18:28.110 --> 18:29.310
它还不能得出结果

18:29.310 --> 18:30.990
它才会做

18:30.990 --> 18:31.950
那么这种

18:31.950 --> 18:33.910
如果是false就不做的情况

18:33.910 --> 18:35.710
我们成为惰性

18:35.710 --> 18:36.910
那么我们来说

18:36.910 --> 18:38.950
我们借助于惰性原理

18:38.950 --> 18:40.550
我们来做渲染

18:40.550 --> 18:43.550
所以我们会对这段代码进行修改

18:43.550 --> 18:45.390
我们把上面的这一块内容

18:45.390 --> 18:49.500
我们在下面这里再写一半

18:49.500 --> 18:51.140
我们把它注尸写一下

18:51.140 --> 18:52.140
这个称之为

18:53.780 --> 18:56.780
逻辑运算浮的操作

18:57.780 --> 18:59.860
逻辑运算浮的操作

18:59.860 --> 19:01.740
我们在这边写上

19:01.740 --> 19:05.580
首先你去做一个修contenter

19:05.580 --> 19:07.300
然后我们不需要这个变量了

19:07.300 --> 19:08.220
我们只需要它

19:08.220 --> 19:08.980
为什么

19:08.980 --> 19:10.940
它只要真就显示这一段

19:10.940 --> 19:12.660
它只要假就显示这一段

19:12.660 --> 19:13.420
是不是

19:13.420 --> 19:14.580
那我们来写

19:14.580 --> 19:16.540
首先把这个代码

19:16.540 --> 19:19.760
我们把它全拿下来

19:19.760 --> 19:23.510
把这一段也拿下来

19:23.510 --> 19:25.910
我们把两段前写在下面

19:25.910 --> 19:26.870
紧接着

19:26.870 --> 19:28.750
我们要让它是否显示

19:28.830 --> 19:30.350
那就一定得前后

19:30.350 --> 19:33.510
带上我们的DSR的表达式浮

19:33.510 --> 19:37.060
也就是一个大括号

19:37.060 --> 19:38.900
带上这样的大括号以后

19:38.900 --> 19:41.380
我们可以用一个逻辑语言

19:41.380 --> 19:44.910
在前面打上

19:44.910 --> 19:46.270
这个写法是

19:46.270 --> 19:48.430
我们前面再带上

19:48.430 --> 19:50.630
我们把整个后面的输出

19:50.630 --> 19:52.710
作为一个条件判断存在

19:52.710 --> 19:54.270
由于它是输出

19:54.270 --> 19:55.950
所以我们后面

19:55.950 --> 19:59.190
就是刚刚大家看到的整个这个写法上

19:59.190 --> 20:01.550
这一块永远是Q

20:01.550 --> 20:03.390
因为它不存在判断

20:03.390 --> 20:04.470
它只是输出

20:04.470 --> 20:05.630
对于输出来讲

20:05.630 --> 20:06.870
就是Q

20:06.870 --> 20:09.230
然后我们把前面这个控制住

20:09.230 --> 20:11.030
前面这个真和假

20:11.030 --> 20:12.470
我就利用这个A字

20:12.470 --> 20:14.670
login的硬来做操作

20:14.670 --> 20:17.470
我就直接把这个辩量往前放

20:17.470 --> 20:18.750
我们来看一下

20:18.750 --> 20:20.350
如果这个辩量

20:20.350 --> 20:21.830
我们这里写一下

20:21.830 --> 20:23.910
如果这个辩量为真

20:23.910 --> 20:25.630
那么它就会显示这一段

20:25.630 --> 20:26.630
对不对

20:26.630 --> 20:28.510
如果这辩量为假

20:28.510 --> 20:31.270
那么这一段永远是不会显示

20:31.270 --> 20:32.590
那么下面这个

20:32.590 --> 20:34.270
我想给它取反

20:34.270 --> 20:36.310
所以你前面可以带上一个

20:36.310 --> 20:37.190
什么

20:37.190 --> 20:38.950
这是我们的

20:38.950 --> 20:39.910
取反操作服务

20:39.910 --> 20:40.670
对不对

20:40.670 --> 20:41.830
如果是真

20:41.830 --> 20:43.470
那么这个为真的话

20:43.470 --> 20:45.030
那么它需要做后面一段

20:45.030 --> 20:45.910
刚才我们讲了

20:45.910 --> 20:46.990
由于后面是输出

20:46.990 --> 20:48.630
所以它永远返回真

20:48.630 --> 20:49.910
如果是假的话

20:49.910 --> 20:52.750
那么首先25行后面的这个就不做了

20:52.750 --> 20:54.750
26行假取反为真

20:54.750 --> 20:56.310
它再做后面的输出

20:56.310 --> 20:57.830
这样的话就可以了

20:57.830 --> 20:59.590
我们保存编译

20:59.590 --> 21:03.180
然后我们来看一下页面效果

21:03.180 --> 21:04.620
现在是假

21:04.620 --> 21:08.420
所以前面这个我用的是元素辩量

21:08.420 --> 21:11.100
后面这个我用的是螺筋算服

21:12.620 --> 21:14.180
咱们再来看

21:14.180 --> 21:15.780
现在我回到页面中

21:15.780 --> 21:19.020
我把它改成真

21:19.020 --> 21:22.860
再来看一下

21:22.860 --> 21:24.660
是不是出来了

21:24.660 --> 21:24.980
好

21:24.980 --> 21:28.420
现在对比两种写法

21:28.420 --> 21:29.860
先对比我们下两种写法

21:31.820 --> 21:33.900
对于上面的这种写法来讲

21:33.900 --> 21:35.740
它其实是把你的代码

21:35.740 --> 21:37.460
或者称之为JXX

21:37.460 --> 21:39.260
作为自付串的一部分

21:39.260 --> 21:40.300
作为条件

21:40.300 --> 21:43.940
逻辑运算判断的一个结果的自付串存储

21:43.940 --> 21:45.660
然后在后面的JXX的时候

21:45.660 --> 21:47.020
进行操作

21:47.020 --> 21:49.100
而我的第二轮写法

21:49.100 --> 21:52.660
是直接把我们的所有需要显示和

21:52.660 --> 21:54.020
有可能隐藏的

21:54.020 --> 21:57.340
所以JXX代码全写在了最后return里面

21:57.340 --> 22:00.780
只不过利用我们的一个逻辑语的方式

22:00.780 --> 22:02.700
来判断哪个呈现

22:02.700 --> 22:03.980
是不是这个感觉起来

22:04.020 --> 22:06.220
就这个更舒服一点

22:06.220 --> 22:06.780
对吧

22:06.780 --> 22:07.140
好

22:07.140 --> 22:08.740
那这就是我们所谓的

22:08.740 --> 22:11.340
就是利用我们的逻辑语

22:11.340 --> 22:14.900
我们来做的一个逻辑运算浮的显示

22:14.900 --> 22:15.780
记住

22:15.780 --> 22:17.820
这边有同学老干这事

22:17.820 --> 22:21.270
他把这个带上

22:21.270 --> 22:22.710
你就问我行不行

22:22.710 --> 22:25.190
他认为他整个这一串

22:25.190 --> 22:27.950
都是在整个区间内

22:27.950 --> 22:31.310
并且他想输出到页面中处理

22:31.310 --> 22:32.030
那我们看一下

22:32.030 --> 22:37.680
我把这个写上一下

22:37.680 --> 22:38.240
你看一下

22:39.800 --> 22:41.360
对于逻辑语来讲

22:41.360 --> 22:42.480
他并不是

22:42.480 --> 22:46.960
主要这个所谓的我们的JXX表达是

22:46.960 --> 22:49.520
他虽然是有计算功能

22:49.520 --> 22:51.640
但是对于逻辑语来讲

22:51.640 --> 22:56.440
他本身所关心的就是左右两边的内容

22:56.440 --> 22:59.520
如果你只要加上你现在的单引号

22:59.520 --> 23:02.080
他就会直接把这个内容判断为

23:02.080 --> 23:03.400
这是个自服串

23:03.400 --> 23:06.560
而自服串他认为你在逻辑语的过程中

23:06.560 --> 23:08.840
你是想把自服串进行输出

23:08.880 --> 23:11.400
那么他就完成了刚刚你看到的

23:11.400 --> 23:13.040
一旦你前面为真

23:13.040 --> 23:14.960
那么后面是自服串输出

23:14.960 --> 23:16.880
那就把自服串输出出来

23:16.880 --> 23:18.040
形成了这样的一个结构

23:18.040 --> 23:19.400
所以请记住

23:19.400 --> 23:21.280
凡是你在做任何

23:21.280 --> 23:25.520
无论是在我们的JXX的表达是

23:25.520 --> 23:26.640
大过号里面

23:26.640 --> 23:29.920
还是在我们的代码的逻辑判断里面

23:29.920 --> 23:31.440
只要你想写JXX

23:31.440 --> 23:33.800
千万别带引号

23:33.800 --> 23:34.800
你带引号

23:34.800 --> 23:37.440
那么他就变成的是一个自服串了

23:37.440 --> 23:38.720
这是我们说到第二个点

23:38.720 --> 23:39.720
逻辑营算服

23:40.720 --> 23:41.600
第三个点

23:41.600 --> 23:43.400
三元营算服

23:43.400 --> 23:45.520
那么在这个前提上面

23:45.520 --> 23:49.240
我们还能不能再做另外一种显法

23:49.240 --> 23:52.960
三元

23:52.960 --> 23:55.600
有些地方也叫他叫三木营算服

23:56.600 --> 23:59.400
这个是一样的

23:59.400 --> 24:01.600
因为我们原是从数学上来的

24:01.600 --> 24:04.440
木是从围棋上来的

24:04.440 --> 24:06.080
围棋叫营木两木

24:06.080 --> 24:08.280
原就是一原两次方程

24:08.280 --> 24:09.280
二原对吧

24:09.280 --> 24:10.560
二原二次方程

24:11.560 --> 24:13.920
那么我们今天来看一下

24:13.920 --> 24:15.920
我们要用三元营算服

24:15.920 --> 24:18.760
也就是我们俗称的问号冒号

24:18.760 --> 24:20.680
那么他该怎么呈现

24:20.680 --> 24:22.760
他把上面的这两部内容

24:22.760 --> 24:25.040
再一次的合成

24:26.720 --> 24:29.240
因为我们在做这个过程的时候

24:29.240 --> 24:30.880
我们写了两遍

24:30.880 --> 24:34.560
因为我们要让他下面再取反False的时候

24:34.560 --> 24:35.240
能够呈现

24:35.240 --> 24:37.040
所以我们加了一个感叹好

24:37.040 --> 24:37.960
而三元算

24:37.960 --> 24:40.520
我们在这边就用一个来完成

24:40.680 --> 24:43.080
首先我们把上面这辩量拿下来

24:44.240 --> 24:47.760
然后我们在这里写上问号

24:48.800 --> 24:50.000
你后面跟上

24:50.000 --> 24:51.680
如果说是成功状态

24:51.680 --> 24:54.720
我们就把后面的这一串内容给他呈现

24:55.600 --> 24:57.240
紧接着冒号

24:57.680 --> 24:58.520
也就意味着

24:58.520 --> 25:02.080
如果是islogging为False情况下

25:02.080 --> 25:03.840
我们给出第二段内容

25:07.250 --> 25:08.490
我们给出第二段内容

25:09.010 --> 25:09.770
这样操作

25:10.450 --> 25:12.210
那么这样我们再来看一下

25:12.250 --> 25:14.330
他的显示是不是和我们前面是一样

25:14.330 --> 25:14.890
第三行

25:15.490 --> 25:16.650
欢迎您的光临

25:16.650 --> 25:17.530
对不对

25:17.530 --> 25:19.170
紧接着我们再来看

25:19.170 --> 25:20.610
我把这行内容

25:21.890 --> 25:23.130
在最前面的时候

25:23.130 --> 25:24.930
我改成False

25:30.680 --> 25:31.120
是不是

25:31.120 --> 25:32.040
请先登录

25:32.040 --> 25:33.320
这块内容也出来了

25:34.760 --> 25:35.360
看一下

25:35.360 --> 25:38.800
三元算浮比起我前面两种方式来说

25:38.800 --> 25:40.400
只要是双者判断

25:40.400 --> 25:41.400
就是不是这个

25:41.400 --> 25:42.400
就是那个

25:42.400 --> 25:44.200
他会比我们前面更神事

25:45.120 --> 25:46.200
对于我前面来讲

25:46.200 --> 25:48.240
我比起我现在的F语剧

25:48.240 --> 25:49.120
我已经审了

25:49.120 --> 25:50.800
因为我把代码已经放到了

25:50.800 --> 25:52.040
JSR的语剧上面来

25:52.040 --> 25:53.840
并且我也不要大过号要死了

25:54.120 --> 25:55.640
但是他要输出两遍

25:55.640 --> 25:57.080
向后面一些代码的话

25:57.080 --> 25:58.560
像这种语号还要做

25:58.920 --> 26:00.720
但是我现在只要写在一个里面

26:00.720 --> 26:02.160
然后完成我们前面

26:02.160 --> 26:03.160
只要定个辩量

26:03.320 --> 26:04.560
这辩量就理解成

26:04.560 --> 26:05.880
你把这样的一个语剧

26:05.880 --> 26:06.400
三元算浮

26:06.400 --> 26:09.280
其实是针对于F语剧的一个简写形式

26:09.760 --> 26:12.000
我们把语剧全部往后堆叠

26:12.000 --> 26:12.560
这样的话

26:12.560 --> 26:13.400
你看你的呈现

26:13.400 --> 26:15.400
就会非常的简单

26:15.640 --> 26:16.360
OK吧

26:16.360 --> 26:18.080
那么这就是三元运算

26:18.080 --> 26:19.240
那么同时注意

26:19.240 --> 26:21.120
同时我们再说一下

26:21.320 --> 26:24.160
JSR的这种表达是大过号

26:24.160 --> 26:26.400
它里面是不可以出现

26:26.400 --> 26:28.880
逻辑判断逻辑运算的

26:29.480 --> 26:30.160
注意一下

26:30.160 --> 26:33.720
就是你现在的这种F语剧

26:33.720 --> 26:36.320
还有我们属于列表渲染语剧

26:36.320 --> 26:38.680
这种都是在逻辑运算上面

26:38.680 --> 26:39.880
所用到的符号

26:40.120 --> 26:41.560
我们在三运算上面

26:41.560 --> 26:44.280
我们只有三者内容可以写

26:44.280 --> 26:45.080
第一者

26:45.240 --> 26:46.520
直接是元素变量

26:46.800 --> 26:47.600
也就是说

26:47.600 --> 26:48.800
它就是一个变量

26:48.800 --> 26:50.960
注意这变量里面到底是什么东西

26:50.960 --> 26:51.880
那我不管

26:51.880 --> 26:52.640
我只管

26:52.640 --> 26:53.680
你可以写一变量

26:53.680 --> 26:54.200
记得吧

26:54.200 --> 26:55.800
这个是JSR的一部分

26:55.800 --> 26:56.720
第二部分

26:56.720 --> 27:00.080
我们看到现在有一个 is logging the in

27:00.080 --> 27:01.400
这就是我们所谓的

27:01.720 --> 27:03.360
叫做逻辑运算浮

27:03.360 --> 27:04.920
它可以把逻辑运算浮写进来

27:04.920 --> 27:05.560
为什么

27:05.560 --> 27:07.480
因为逻辑运算浮最后返回的

27:07.480 --> 27:08.760
永远是一个单指

27:08.760 --> 27:09.720
q false

27:09.720 --> 27:10.520
以及fals

27:10.520 --> 27:12.520
q所对应到的一个内容

27:13.400 --> 27:14.280
第二种

27:14.400 --> 27:15.320
第三种

27:15.320 --> 27:17.720
它可以写一个三运运算浮

27:18.360 --> 27:20.880
做一个简单的判别

27:21.480 --> 27:22.760
除这三者以外

27:23.720 --> 27:25.480
它不能把你的什么一幅

27:25.480 --> 27:26.960
4全部往里供

27:27.520 --> 27:28.320
你没有见过

27:28.320 --> 27:29.120
从来也没见过

27:29.120 --> 27:30.200
也不能去这么近

27:30.200 --> 27:31.520
就是在这里边去写上

27:31.520 --> 27:32.280
一幅语句

27:32.280 --> 27:33.520
你把上面那段往这放

27:33.960 --> 27:35.240
抱错了一塌糊涂

27:35.560 --> 27:36.480
是这个意思

27:37.360 --> 27:37.960
ok

27:38.760 --> 27:39.240
等一下

27:39.240 --> 27:41.280
美举是怎么样制作的

27:41.280 --> 27:42.360
所谓的美举

27:42.360 --> 27:45.120
其实是我外部传入值的时候

27:45.120 --> 27:46.800
可能有几种情况

27:47.160 --> 27:48.440
那么每一种情况

27:48.560 --> 27:50.960
我都把它的形式写在这里边

27:51.360 --> 27:52.160
那么这样的话

27:52.280 --> 27:53.440
我传入哪一种

27:53.440 --> 27:56.280
它就直接可以显示哪一种情况出现

27:56.800 --> 27:57.720
我们来看一下

27:57.720 --> 27:58.480
首先

27:58.600 --> 28:01.360
我们依然打一个js表达式

28:01.720 --> 28:03.440
我们把我们的外部的这种情况

28:03.440 --> 28:04.240
全写出来

28:04.240 --> 28:06.080
比如说我需要夹仔

28:08.250 --> 28:09.290
我们这边写上

28:09.610 --> 28:10.250
老领

28:10.570 --> 28:11.850
这边是我的一个夹仔

28:12.450 --> 28:13.330
然后这个夹仔

28:13.530 --> 28:16.410
我们后面要写上的是一个辩量

28:17.850 --> 28:18.610
老领

28:19.050 --> 28:19.770
tester

28:20.410 --> 28:21.570
那我们把这辩量

28:21.570 --> 28:23.570
我就直接定在我们的

28:24.530 --> 28:25.370
random里面

28:25.490 --> 28:26.530
咱们叫做

28:28.290 --> 28:28.970
老领

28:29.090 --> 28:29.770
tester

28:32.480 --> 28:33.240
正在

28:33.680 --> 28:34.360
夹仔

28:36.410 --> 28:37.170
这样写好

28:38.010 --> 28:39.370
紧接着我们继续

28:40.650 --> 28:41.290
逗号

28:44.940 --> 28:45.540
逗号

28:46.060 --> 28:48.100
然后我们写上第二个

28:49.100 --> 28:50.420
情况

28:50.420 --> 28:53.620
我们它是作为一个file

28:53.860 --> 28:55.060
成为夹仔失败

28:55.220 --> 28:57.260
但是它的形式是一个

28:59.060 --> 29:00.100
js表达式

29:04.590 --> 29:05.590
夹仔失败

29:07.500 --> 29:09.140
点击重视

29:11.020 --> 29:11.940
这样的情况

29:13.620 --> 29:14.100
来

29:15.460 --> 29:17.260
第三种是no more

29:17.380 --> 29:17.940
表示

29:18.420 --> 29:19.620
是个纯字服串

29:19.620 --> 29:20.220
叫做

29:20.820 --> 29:21.460
没有

29:22.100 --> 29:22.940
更多了

29:25.510 --> 29:25.870
好

29:25.870 --> 29:27.390
以这三种形式写好

29:27.670 --> 29:29.270
那我现在在判断的时候

29:29.790 --> 29:30.590
我们写上

29:30.830 --> 29:33.150
你现在需要通过后面的一个

29:33.150 --> 29:34.430
中国号里的

29:34.670 --> 29:35.390
到底

29:35.510 --> 29:36.990
哪一种形式

29:36.990 --> 29:38.190
是或者状态

29:38.190 --> 29:39.510
是这三个里面一种

29:39.910 --> 29:41.030
我们就写上一个辩量

29:41.310 --> 29:41.910
叫做

29:43.110 --> 29:44.430
logging stator

29:46.190 --> 29:47.590
logging stator

29:48.030 --> 29:48.830
这个辩量

29:48.830 --> 29:50.470
如果里面存储的是

29:50.470 --> 29:51.030
logging

29:51.030 --> 29:52.230
那么它就会呈现

29:52.230 --> 29:53.550
logging tested的内容

29:53.870 --> 29:55.430
如果这辩量里面是file

29:55.430 --> 29:57.350
它将把这一段内容呈现

29:57.350 --> 29:58.470
如果里面是normal

29:58.470 --> 29:59.710
它将显示这个部分

30:00.150 --> 30:01.910
所以我们要做的是

30:01.910 --> 30:04.190
针对于这个辩量的复制

30:05.590 --> 30:06.190
当然

30:06.590 --> 30:07.510
如果说

30:07.510 --> 30:08.270
你发现

30:08.750 --> 30:09.390
现在

30:09.390 --> 30:11.070
在我们的view里面

30:11.350 --> 30:12.670
出现了这样的语句

30:12.670 --> 30:14.630
并且它前面有这样一堆的话

30:14.630 --> 30:15.870
那么每一句要求

30:16.590 --> 30:18.670
把你的整个这个logging stator

30:18.990 --> 30:19.870
一起

30:19.870 --> 30:22.230
包含在一个js表达式种

30:22.670 --> 30:24.630
所以你这边还得再写一个

30:31.330 --> 30:32.530
以这样的方式写

30:33.610 --> 30:35.610
写一个大的js表达式

30:35.610 --> 30:36.610
然后里面

30:36.610 --> 30:37.770
前后面的这个

30:37.770 --> 30:41.010
是指的是我们每一句内容

30:41.010 --> 30:42.850
然后后面跟上一个logging stator

30:43.570 --> 30:44.290
这个是

30:45.890 --> 30:46.970
大概报了一个错

30:46.970 --> 30:47.930
我们看一下

30:48.290 --> 30:49.610
它报的是

30:49.810 --> 30:50.330
逗号

30:51.210 --> 30:52.170
这边没逗号

30:58.180 --> 30:59.380
我们把这个

30:59.380 --> 31:02.180
那么一旦你现在完成了

31:02.180 --> 31:03.460
一个logging stator

31:03.460 --> 31:04.820
这样的一个没据以后

31:05.100 --> 31:06.340
那我们的属性

31:06.340 --> 31:07.700
就要去到外部

31:07.700 --> 31:09.580
去拿一个logging stator进来

31:10.380 --> 31:10.900
对吧

31:10.900 --> 31:11.500
logging stator

31:11.500 --> 31:12.860
我们应该是外部拿过来

31:12.860 --> 31:14.340
所以我们在上面

31:14.780 --> 31:15.860
再定义一个

31:16.820 --> 31:17.540
Lat

31:19.100 --> 31:21.060
logging stator

31:21.340 --> 31:22.260
它等于

31:22.260 --> 31:23.300
当前的

31:24.420 --> 31:25.740
purpose里面的

31:26.380 --> 31:28.940
logging stator

31:29.460 --> 31:30.620
定义这个字

31:32.180 --> 31:32.740
好

31:32.820 --> 31:34.940
我们把这个logging stator

31:34.940 --> 31:37.140
在我们的页面上面

31:37.140 --> 31:39.500
在我们调用位置上的属性里面给

31:39.940 --> 31:41.260
它是一个什么内容

31:41.260 --> 31:42.100
我们注意一下

31:42.100 --> 31:45.300
一定它是属于我们这三者里面的

31:45.300 --> 31:46.780
比如说我给的是logging

31:49.210 --> 31:50.130
给的是logging

31:50.450 --> 31:52.170
那么logging给了以后的话

31:52.170 --> 31:55.250
你看它这边输出的是属于logging test

31:55.250 --> 31:57.610
我们logging在上面写说正在加载

31:57.810 --> 31:58.650
看一下页面

31:58.650 --> 31:59.850
正在加载

31:59.850 --> 32:01.250
是不是这几个字就出来了

32:02.770 --> 32:03.530
第二个

32:03.570 --> 32:05.250
如果说我们改一改

32:05.250 --> 32:08.610
我们把这个输入的内容是发

32:11.760 --> 32:14.520
那么它的呈现就变成是第二块内容

32:14.520 --> 32:16.760
就是我们的加载失败

32:17.320 --> 32:17.880
对吗

32:17.880 --> 32:18.480
这块

32:18.480 --> 32:19.280
仔细看一下

32:19.280 --> 32:21.360
我们打开它的圆码

32:22.800 --> 32:23.800
是不是一个view

32:25.200 --> 32:25.680
对吧

32:25.680 --> 32:28.840
view应该就是我这边所给到它的view

32:29.960 --> 32:31.280
第三块normal

32:31.520 --> 32:32.440
那么这个的话

32:32.960 --> 32:34.920
你就必须是一个

32:35.480 --> 32:37.440
没有更多的一个文字显示

32:40.320 --> 32:40.880
对吧

32:41.160 --> 32:41.640
好

32:41.720 --> 32:42.880
那么大家来看一下

32:43.240 --> 32:44.360
这里边有一点

32:44.360 --> 32:47.920
如果你在跟我一样做的过程中发现有些问题了

32:48.160 --> 32:50.800
特别是你在这上面代码跟我一样情况下

32:50.800 --> 32:51.360
请注意

32:51.360 --> 32:53.960
你这个大括号是否写了

32:54.240 --> 32:55.240
如果没写

32:55.240 --> 32:56.200
你看它的情况

32:56.920 --> 32:58.600
保存这边报了一个错误

32:58.600 --> 33:00.320
它报的指向于哪里呢

33:00.320 --> 33:00.680
你看

33:01.120 --> 33:03.680
它指向于logging里面的贸号

33:03.680 --> 33:05.280
它指向是这个地方有错

33:05.720 --> 33:07.680
所以一旦你使用美举

33:07.680 --> 33:11.040
它指向到你现在里面冒耗地方有问题的话

33:11.040 --> 33:13.520
那你第一脑中需要想到的是

33:13.520 --> 33:14.320
不是它

33:14.320 --> 33:15.320
是它外部

33:16.520 --> 33:17.520
少了一个

33:20.820 --> 33:21.660
少了一个

33:22.660 --> 33:23.660
js表达是

33:24.100 --> 33:24.940
是这个意图

33:25.420 --> 33:26.340
所以这样的话

33:26.340 --> 33:27.500
我们就完成了

33:27.500 --> 33:29.180
现在大家所看到的

33:29.300 --> 33:32.260
我们又可以用原来的四种

33:32.660 --> 33:34.860
那个叫做调整宣染

33:34.860 --> 33:35.700
四种调整宣染

33:35.700 --> 33:37.060
我们这边全又给出来

33:37.540 --> 33:38.260
回顾一下

33:38.260 --> 33:40.100
四种调整宣染是什么样的情况

33:40.660 --> 33:42.020
第一种调整宣染

33:42.020 --> 33:43.460
称之为叫元素

33:43.900 --> 33:44.820
元素变量

33:44.820 --> 33:46.900
元素变量主要的是

33:47.020 --> 33:50.980
我们利用现在的一个真正的意义上的变量

33:51.260 --> 33:52.980
来获取你用户

33:52.980 --> 33:56.260
通过属性方式传送给组建的一个参数

33:56.540 --> 33:58.100
根据它来判断

33:58.100 --> 34:00.740
你现在需要显示哪一部分的内容

34:00.940 --> 34:05.260
把我们的另一个变量中存入js插了语句

34:05.660 --> 34:07.180
然后在显示的时候

34:07.180 --> 34:10.300
直接把我们存入语句的这部分显示

34:10.460 --> 34:13.100
所以在js它最终显示的return语句中

34:13.100 --> 34:14.260
不做任何判断

34:14.460 --> 34:17.420
只是显示一个伺服串里面所存储的内容

34:17.580 --> 34:19.980
而判断内容放在我们的业务逻辑中

34:19.980 --> 34:21.020
这是元素变量

34:21.500 --> 34:24.940
第二种称之为叫做逻辑算浮操作

34:24.940 --> 34:26.260
逻辑算浮操作

34:26.420 --> 34:27.700
它主要的就是

34:27.900 --> 34:30.780
帮助我们利用逻辑语的方式

34:30.780 --> 34:31.900
来进行格式化

34:31.900 --> 34:32.500
此显示

34:32.740 --> 34:34.940
如果前面返回的是真

34:35.060 --> 34:37.260
那么它后面就会把这样的一个

34:37.500 --> 34:39.580
js的解析编译一下

34:39.580 --> 34:40.500
进行显示

34:40.740 --> 34:42.580
如果前面返回的是否

34:42.660 --> 34:44.180
那么它后面就不会再做了

34:44.180 --> 34:46.180
也就是不会再进行编译显示

34:46.540 --> 34:49.140
那么我们如果两者都要做的话

34:49.260 --> 34:49.940
你们看到了

34:49.940 --> 34:51.180
我们可以用一个

34:51.340 --> 34:54.260
我们所谓的取反浮来操作

34:54.700 --> 34:57.380
紧接着我们下面想到的是三元运算浮

34:57.380 --> 35:00.300
三元算浮是两者里面避显其一

35:00.580 --> 35:01.820
避显示其一

35:01.900 --> 35:05.820
然后我们把它坐在一个js表达式的里面

35:05.980 --> 35:08.180
用问号帽号的方式来表述

35:08.420 --> 35:09.420
那么这边注意

35:09.420 --> 35:13.460
一般性我们大家如果使用前面这种逻辑语操作的话

35:13.580 --> 35:15.060
我们一般只给一个

35:16.060 --> 35:17.820
就一块内容是否要显示

35:18.220 --> 35:21.860
对于我们的整个三摸运算浮来讲的话

35:21.860 --> 35:24.500
三元它必须显示两个

35:25.460 --> 35:27.740
显示一个用前面的语方式

35:27.860 --> 35:29.180
显示而不显示

35:29.300 --> 35:31.140
两个里面认显示一个

35:31.260 --> 35:34.020
那我们就用的是我们现在的三摸运算浮来做

35:34.580 --> 35:35.380
第三种

35:35.660 --> 35:38.940
如果有多次显示多次操作的情况下

35:39.140 --> 35:41.100
那我们这边就可以用一个叫美举

35:41.380 --> 35:42.420
美举的方式

35:42.660 --> 35:45.740
是把你要显示的不同的这样的关键字

35:45.980 --> 35:47.820
写在一个所谓的大库号的

35:47.820 --> 35:49.180
就是这个杰森格式里面

35:49.620 --> 35:50.980
但注意这个杰森格式

35:50.980 --> 35:52.460
并不是我外面最外面的

35:52.460 --> 35:53.380
杰森表达式

35:53.380 --> 35:55.060
杰森表达式在最外层

35:55.460 --> 35:58.620
这个是一个美举的一个定义

35:58.900 --> 36:00.980
我们美举定义最后中的变量

36:01.020 --> 36:03.220
是在错面的叫做中国号里面

36:03.620 --> 36:04.660
那么这个值

36:04.740 --> 36:06.460
我们可以通过前端

36:06.700 --> 36:08.740
进行属性的方式进行传入

36:09.260 --> 36:10.100
传入以后

36:10.300 --> 36:12.340
我们看这个值是否和里面

36:12.340 --> 36:14.260
任何一个关键字相同

36:14.660 --> 36:15.540
相同的话

36:15.700 --> 36:17.180
它后面的加载情况

36:17.180 --> 36:18.700
你就可以自行来做操作了

36:19.060 --> 36:19.900
可以是变量

36:20.180 --> 36:22.980
可以是我们现在的一个表达式

36:23.060 --> 36:26.180
或者称之为我们Jaxx的一个

36:26.180 --> 36:28.340
或者是我们微信的任何一个表达式

36:28.620 --> 36:29.500
也可以是自付串

36:31.460 --> 36:32.660
这是我们说到的

36:32.740 --> 36:34.260
一个美举的一个情况

36:34.460 --> 36:35.020
对吧

36:35.140 --> 36:36.380
那么我们看到

36:36.380 --> 36:39.020
现在这种情况你都可以进行使用

36:39.620 --> 36:40.860
这里的话一定注意

36:41.380 --> 36:43.660
不能说是你自己完完全全

36:43.660 --> 36:44.540
全部掌握

36:44.660 --> 36:46.980
但是在我们做运行的时候

36:46.980 --> 36:49.660
也可以去进行各种尝试

36:49.940 --> 36:51.820
看一下哪一种比较合适

36:51.820 --> 36:52.620
哪一种的话

36:52.780 --> 36:56.660
更多的是你需要有更多的一些操作的

36:56.940 --> 36:58.660
刚才我已经讲了两种方式

36:58.660 --> 36:59.220
对吧

36:59.460 --> 37:00.420
那么我们讲

37:00.620 --> 37:03.260
作为我们的条件语句

37:03.260 --> 37:04.460
在其他语句中

37:04.460 --> 37:06.740
那么都会有一个除了一副以外

37:06.740 --> 37:07.700
还有个什么

37:08.100 --> 37:08.940
switch

37:09.220 --> 37:09.700
对吧

37:09.700 --> 37:12.220
react里面本身也有switch存在

37:12.420 --> 37:13.420
那我们看一下

37:13.500 --> 37:15.580
switch能不能在这上面进行使用

37:19.620 --> 37:20.860
我们省上switch

37:21.860 --> 37:24.220
这个时候你要完成switch的话

37:24.220 --> 37:25.140
我们来看一下

37:26.020 --> 37:26.780
先说一下

37:26.780 --> 37:29.620
switch本身自己在Taro中可以用

37:29.620 --> 37:30.660
但在微信小程序中

37:31.180 --> 37:32.380
它转化是有问题的

37:32.860 --> 37:34.900
我们来看一下它的整个结构体

37:35.500 --> 37:36.580
它的写法

37:36.780 --> 37:38.100
所以这个是一个

37:39.100 --> 37:41.020
并不是完全通用的一个写法

37:41.140 --> 37:44.380
但是如果你用Taro做其他的一些

37:44.620 --> 37:45.740
那么这个是可以写的

37:46.660 --> 37:47.700
switch你看

37:47.900 --> 37:49.540
我直接把switch写出来

37:49.540 --> 37:51.500
然后首先这边我们做一个

37:51.500 --> 37:53.140
props.number

37:53.500 --> 37:54.780
我们把数据传进来

37:54.780 --> 37:55.940
我们把下面先擦掉

37:56.740 --> 37:58.300
我们先把数据传进来

37:58.540 --> 37:59.140
这个情况

37:59.140 --> 38:00.620
那么这个number的话

38:00.700 --> 38:01.420
我们在前面

38:01.460 --> 38:03.100
我们就给它传一个1 2 3 4

38:03.100 --> 38:04.500
这样一个数值就可以了

38:05.900 --> 38:07.700
然后接到数值以后的话

38:07.780 --> 38:10.300
我们下面来做case

38:10.700 --> 38:12.420
如果是1的话

38:12.860 --> 38:13.660
冒号

38:14.860 --> 38:15.420
注意

38:16.780 --> 38:18.860
你在这边去做任何的

38:19.980 --> 38:21.420
比如说view

38:22.700 --> 38:23.420
输出

38:24.740 --> 38:26.220
this is e

38:27.140 --> 38:28.100
这样的写法

38:28.420 --> 38:30.740
然后我们一般都有break

38:30.740 --> 38:31.220
对吧

38:33.920 --> 38:35.040
2 3

38:37.760 --> 38:38.920
2 3

38:39.840 --> 38:40.840
然后这边写上

38:41.120 --> 38:42.360
2 3

38:43.000 --> 38:43.360
2

38:44.480 --> 38:45.760
我们以这样的格式来写

38:46.520 --> 38:47.800
当你这样写好以后

38:47.800 --> 38:49.000
你已经保存

38:49.000 --> 38:49.800
它会爆错

38:50.440 --> 38:51.200
它会爆错

38:51.720 --> 38:53.400
它爆错的原因是在于

38:53.400 --> 38:54.880
我们本身来讲

38:55.320 --> 38:56.800
我们需要它外层

38:56.800 --> 38:57.600
还有一个

38:57.600 --> 38:59.440
你不能单独在里面去这么写

38:59.440 --> 39:01.240
你的外层还要再加上一个

39:02.000 --> 39:03.360
我们的扩号

39:04.360 --> 39:06.640
把你整个这个给扩进来

39:08.240 --> 39:10.160
那么扩号所对应到的

39:10.160 --> 39:10.880
就是一个

39:12.080 --> 39:13.080
this表达是

39:14.640 --> 39:16.240
把大家给收缩一下

39:16.240 --> 39:17.720
我们把这两个写在一起

39:19.120 --> 39:20.520
把这两个写在一起

39:24.290 --> 39:24.690
好

39:25.050 --> 39:26.370
此时你再来看

39:26.610 --> 39:27.850
它还会有个警告

39:28.370 --> 39:29.810
那么这个警告呢

39:29.810 --> 39:30.730
你发现没有

39:30.730 --> 39:32.690
它是告诉你case与去这边

39:33.170 --> 39:34.810
case一边这边有警告

39:35.530 --> 39:37.570
那么这是什么原因呢

39:37.890 --> 39:39.050
原因就在于

39:39.370 --> 39:39.890
注意

39:39.890 --> 39:42.250
它在写这个语句的时候

39:42.650 --> 39:44.290
它在写这个语句的时候

39:44.490 --> 39:47.250
一定要求你做一步操作

39:47.850 --> 39:50.130
你把后面的这一串内容

39:50.130 --> 39:52.490
全部把它封装到

39:52.730 --> 39:53.930
我们的每一个

39:53.930 --> 39:54.770
json的

39:56.010 --> 39:56.770
扩号里面

39:56.770 --> 39:57.250
不是json

39:57.250 --> 39:59.050
就是我们的json的扩号里面

39:59.050 --> 40:00.490
所以你需要这样去写

40:02.980 --> 40:04.180
你需要这样去写

40:06.340 --> 40:08.340
当然我们以最简单的方式

40:08.340 --> 40:09.900
我们就输出a

40:15.160 --> 40:15.760
bb

40:16.280 --> 40:17.520
就看它是哪一块

40:21.680 --> 40:22.280
cc

40:23.880 --> 40:26.080
以这样的方式来给它标注

40:28.280 --> 40:28.840
我们

40:29.760 --> 40:30.760
先编一下

40:32.000 --> 40:34.320
警告代表本身当前页面

40:35.120 --> 40:36.040
网上走一下

40:36.040 --> 40:36.480
看一下

40:36.920 --> 40:38.960
它告诉你switch的这个位置

40:41.300 --> 40:43.740
我们这边还要有一个

40:43.860 --> 40:45.580
我们这边有一个json

40:52.510 --> 40:53.230
你看一下

40:53.590 --> 40:54.430
从这开始

40:54.470 --> 40:55.670
我们操作一下

40:55.670 --> 40:56.870
是不是没有错误了

40:57.470 --> 40:58.950
从编译角度来讲

40:58.950 --> 41:01.510
从我们的整个这个语法结构来讲

41:01.710 --> 41:03.350
它这个语法就ok了

41:03.870 --> 41:04.630
你会发现

41:04.830 --> 41:06.830
它是属于里面是个switch

41:06.830 --> 41:08.590
接收一个数值进来

41:08.870 --> 41:10.350
然后判断123

41:10.350 --> 41:11.150
然后注意哦

41:11.150 --> 41:12.630
你这边如果没有的话

41:12.630 --> 41:13.670
这边会有问题的

41:14.110 --> 41:15.470
我们正常的语法里面

41:15.470 --> 41:17.510
经常的这边我们老带上一个return

41:17.510 --> 41:18.030
对吧

41:18.230 --> 41:19.390
我们正常是这么干的

41:21.190 --> 41:21.670
你看啊

41:21.670 --> 41:22.750
我这样给你写上

41:23.710 --> 41:24.990
我把它给这个存了

41:27.120 --> 41:27.680
你看到吗

41:27.680 --> 41:28.640
它就给你抱错

41:29.040 --> 41:29.960
就给你抱错

41:30.560 --> 41:31.760
所以我们说一下

41:31.760 --> 41:34.720
一定要把我们的这个扩号给它带上

41:37.000 --> 41:38.720
一定把这个扩号给它带上

41:40.480 --> 41:41.360
然后的话呢

41:41.360 --> 41:43.040
我们到前面页面

41:43.840 --> 41:44.720
进行保存

41:44.720 --> 41:45.840
这时候你会发现

41:46.160 --> 41:47.160
这里边的话

41:50.660 --> 41:51.620
就不会有问题了

41:55.050 --> 41:55.490
好

41:56.010 --> 41:57.450
那我们清一下

41:57.450 --> 41:58.370
我们来看一下

41:59.170 --> 41:59.890
保存

42:02.400 --> 42:03.160
保存

42:03.480 --> 42:04.120
是不是

42:04.120 --> 42:05.280
这上面没有抱错

42:05.560 --> 42:06.160
ok

42:06.400 --> 42:07.440
这种时候呢

42:07.440 --> 42:08.520
你现在输1

42:08.520 --> 42:10.400
那么它在接到1的情况下

42:10.400 --> 42:12.320
会把你这个1给呈现出来

42:12.320 --> 42:13.440
注意它的结构

42:13.880 --> 42:16.160
外面是一个我们的

42:16.160 --> 42:17.400
节省表达式

42:17.400 --> 42:18.400
从这开始

42:18.400 --> 42:19.840
这就是它的一个

42:19.840 --> 42:20.960
匿名函数

42:20.960 --> 42:21.640
我们称之为

42:21.640 --> 42:22.160
对吧

42:22.160 --> 42:23.360
匿名函数内部

42:23.360 --> 42:25.200
我们做了一个switch的操作

42:25.480 --> 42:26.480
那我们来看看

42:26.480 --> 42:27.280
这个结构

42:27.920 --> 42:28.520
你看

42:30.400 --> 42:31.640
taro没有抱错

42:31.640 --> 42:32.920
但是你跑到小程序来

42:32.920 --> 42:34.480
小程序这边会抱一个错

42:34.720 --> 42:36.040
我们看它里面的结构

42:36.040 --> 42:36.960
它写成什么了

42:36.960 --> 42:37.400
就是

42:38.920 --> 42:41.200
我们打开来看一下

42:55.270 --> 42:56.390
我们从这就能看到

42:56.390 --> 42:58.270
我们就不用在一层层往下跑了

42:58.950 --> 43:00.510
你会注意到的是什么

43:00.990 --> 43:04.310
它在整个这个匿名函数里面

43:04.310 --> 43:05.310
做了一个switch

43:05.310 --> 43:05.990
它把它

43:06.350 --> 43:07.590
says break case

43:07.590 --> 43:08.470
这样的输出

43:08.470 --> 43:09.310
这样一句一句

43:09.310 --> 43:10.390
把它写在这边以后

43:10.830 --> 43:12.230
最后这个位置

43:12.470 --> 43:14.870
我们现在的wxml的编译

43:14.870 --> 43:15.790
它是抱错的

43:16.670 --> 43:17.150
注意

43:18.070 --> 43:20.710
现在是在我们的taro中

43:20.950 --> 43:22.590
你进行编译的时候

43:22.590 --> 43:24.590
这个语法是可以的

43:24.990 --> 43:26.230
这样就满足了

43:26.230 --> 43:29.190
我们无论是regnative还是h5

43:29.190 --> 43:30.510
这样的一些

43:31.590 --> 43:32.870
运行编译程序

43:33.190 --> 43:36.150
但是你如果把它运行在小程序里面的话

43:36.310 --> 43:37.510
它的小程序里面

43:37.510 --> 43:38.630
特别是微信小程序

43:38.630 --> 43:39.830
wxml里面

43:39.990 --> 43:41.750
它是不接受这种写法的

43:42.150 --> 43:43.990
所以我们说明一切

43:44.110 --> 43:49.090
就是这种写法taro

43:57.750 --> 43:58.710
编译通过

44:00.310 --> 44:01.110
中文

44:01.950 --> 44:03.310
我们看一下中文

44:09.270 --> 44:10.470
编译通过

44:11.670 --> 44:15.830
但在小程序无法运行

44:16.910 --> 44:19.510
wxml无此余法

44:23.490 --> 44:24.850
所以这点需要明确

44:24.850 --> 44:26.450
因为我们一直讲

44:26.450 --> 44:27.530
taro不是说

44:27.530 --> 44:29.290
专门针对于微信小程序的

44:29.530 --> 44:32.170
它是针对于小程序生态圈

44:32.450 --> 44:34.130
小程序生态圈还含百度

44:34.130 --> 44:34.890
还含其他的

44:34.890 --> 44:36.890
同时它还可以做h5的结构

44:37.170 --> 44:38.490
所以在这个前提上面

44:38.490 --> 44:40.210
我们所看到的形式

44:40.370 --> 44:42.690
有时候就是我们所谓的二次编译

44:43.010 --> 44:45.290
第一次编译符合taro余法

44:45.890 --> 44:49.050
第二次编译是要符合各个平台的

44:49.490 --> 44:52.450
我们这边操作是符合taro余法的

44:52.810 --> 44:54.770
那么各个平台上面的一部分

44:55.010 --> 44:57.210
需要你到当前平台运行才能可以

44:57.210 --> 44:58.410
所以咱们看到了

44:58.650 --> 45:00.530
这边的操作taro过了

45:00.530 --> 45:01.850
taro也是可以的

45:01.930 --> 45:03.370
但是到小程序端

45:03.370 --> 45:04.810
它就可以你报成了错了

45:05.090 --> 45:07.610
形成的是你不可以在block语句中

45:07.610 --> 45:08.890
形成这样的写法

45:09.930 --> 45:11.290
OK 那我们就明确了

45:11.570 --> 45:13.690
所以我们这个我就没有在

45:13.690 --> 45:15.690
PPT上给大家去显示出来

45:15.690 --> 45:16.770
原因就很简单

45:16.770 --> 45:20.210
因为我们现在主要是针对于微信程序

45:20.210 --> 45:21.090
框架的开发

45:21.290 --> 45:23.450
当然我们也在里面去说到了

45:23.450 --> 45:25.650
我们各个其他的一些坑

45:25.850 --> 45:28.050
或者是其他的一些开发的一些场景

45:28.810 --> 45:31.330
这个就是我们说条件渲染

45:31.450 --> 45:33.530
所需要给大家带到的一些部分内容

45:34.010 --> 45:36.250
虽然说我们条件渲染这概念

45:36.250 --> 45:38.290
大家一直听说或者说一直看到

45:38.450 --> 45:39.530
但是是不是

45:39.650 --> 45:41.810
至少在我们的课程以后

45:41.930 --> 45:44.410
你对于在taro中使用条件渲染

45:44.410 --> 45:46.530
还是有非常多的一些模糊

45:46.530 --> 45:47.690
或者说运用的地方

45:48.290 --> 45:49.090
如果不清楚

45:49.090 --> 45:50.850
你可以自己再去查看一下

45:50.930 --> 45:52.170
这里边的一些内容

45:52.410 --> 45:52.810
好吧

45:52.810 --> 45:54.850
好 我们包括前面的一些视频

45:54.970 --> 45:58.050
包括是这里的一些我们的解析

45:58.250 --> 46:00.050
包括是前面的一些调用关系

46:00.290 --> 46:02.090
都可以自行的查看以后

46:02.090 --> 46:03.050
一定要自己练

46:03.250 --> 46:03.650
好

46:03.650 --> 46:05.250
那么条件渲染的课程

46:05.250 --> 46:06.050
那就先上到这

