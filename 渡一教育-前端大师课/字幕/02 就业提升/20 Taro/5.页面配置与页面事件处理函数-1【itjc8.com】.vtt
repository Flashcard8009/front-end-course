WEBVTT

00:00.000 --> 00:02.560
好 我们继续讲解Tairo系列课程

00:02.560 --> 00:04.360
这些课呢 给大家讲解一下

00:04.360 --> 00:07.920
页面配置与页面时间处理函数的一些使用

00:08.700 --> 00:13.720
那么之前呢 我们讲到了生命周期和Gate一些的用法

00:13.720 --> 00:16.120
并并且呢 我也给大家演示了

00:16.120 --> 00:21.760
如果手动创建一个所谓的Global Data数据存储的一个方式

00:22.020 --> 00:26.880
然后呢 同时在引入我们两个定名的一个Gate Set的操作

00:27.000 --> 00:32.000
那么这些呢 包括是在我们全局配置中和我们普通页面中

00:32.260 --> 00:38.400
所用到的一些共性的 比如说Mount, Shoe, Header这样的一些生命周期

00:38.920 --> 00:44.800
但是本身页面呢 我们讲它是属于专门是和我们的一些性能

00:44.800 --> 00:47.620
或者说功能性的操作是有关的

00:47.880 --> 00:51.200
所以它的一些开发呢 应该讲还是有一些

00:51.960 --> 00:55.800
更多的部分比起我们的全局生命周期来讲

00:56.260 --> 00:59.840
所以在这个部分呢 我们还要给大家继续讲解一下这部分的操作

01:00.100 --> 01:04.200
同时呢 我们也看到页面上面 我们显示给大家的一段文字

01:04.720 --> 01:09.840
Talo的话呢 它的页面是同样是继承制Component这样的一个组件积累的

01:10.080 --> 01:16.480
所以呢 它里面的我们的配置也依然书写在我们的Configure里面

01:17.000 --> 01:19.560
好 这是在我们之前已经见过了大家

01:19.820 --> 01:23.660
那么针对页面 我们可以对它进行一定的配置

01:24.340 --> 01:27.940
这是我们在之前见过 我们待会再细看一下

01:28.300 --> 01:33.740
我们不在这上面花时间去做 因为在我们的全局配置上很多东西都是一样的

01:34.340 --> 01:41.580
那么配置文件呢 我们注意一下 页面的配置文件Configure配置以后 在编译后它就会生成我们注意

01:42.220 --> 01:45.500
是全局配置文件的App.json部分

01:46.020 --> 01:51.900
那么同样它也会出现在我们现在的每个页面的App.json里面

01:52.060 --> 01:53.620
这两个部分它都会有

01:54.700 --> 02:01.420
同时呢 我们看下面 所谓的生命周期呢 它除了现在的微信所给到的这些以外

02:01.980 --> 02:07.260
还有的就是我们现在的这个新的 它的有一些 我这边举了两个

02:07.660 --> 02:13.140
待会我们还会有一些看到 比如说ComponentUpdate, WellUpdate, DidUpdate

02:13.580 --> 02:19.780
这些都是属于页面在更新时候它所用到的一些生命周期的函数

02:20.260 --> 02:25.780
我们也可以通过This.Router.Paramise的方式来获取它之间的数据传递

02:26.380 --> 02:31.740
This.Router.Paramise用一下 看一下怎么样进行数据接收和传递的操作

02:32.540 --> 02:37.780
同时我们再来看一下 说到了我们的生命周期以外的话呢 页面除了

02:39.140 --> 02:47.460
生命周期还有一个 就是页面的事件处理函数 注意 它不是用户的 就是表示你进行了什么输入啊

02:47.860 --> 02:54.500
然后光标的一个操作点击啊 它是指页面的 页面所有的生命周期的话呢 我们看一下

02:54.900 --> 03:02.820
它会有Unplugged and Refresh 表示的是它是一个下拉的 包括是ReachButton 表示处理的

03:03.460 --> 03:16.500
Scoller 表示是滑动的Share 表示的是分享转发的Resize 表示的是它是一个重新进行所谓的转向的还有Tap等

03:16.900 --> 03:21.940
这些都是在它现在的一个页面的事件处理函数里面所用到的

03:22.340 --> 03:26.980
那么这些呢 在我们的全局里面是没有 它也不是属于我们单机事件

03:27.380 --> 03:34.020
所以我们需要对它做一个简单的了解 因为有一些呢 本身在微信里面是不存在的

03:34.340 --> 03:39.380
但是在我们的tela中啊 它需要用这样的方式 同时这里有大家注意一下

03:40.340 --> 03:47.700
微信里面我们同样使用Ung 在我们的这里 它也使用Ung 作为我们的事件函数的一个骑士服

03:48.260 --> 03:49.780
好 我们就一个个来讲

03:51.460 --> 03:59.460
打开我们的项目 我们呢 一边看我们的官方文档 一边我们来制作这方面的一个开发

04:00.100 --> 04:02.180
首先我们把官方文档继续打开

04:03.380 --> 04:07.300
因为系统给到的 特别是tela给到的这官网呢

04:07.780 --> 04:11.380
基本上说的还比较全 但是有些东西呢 它并没有案例

04:11.620 --> 04:14.900
所以我给大家一边说 一边来讲解这部分的操作

04:15.460 --> 04:21.220
我们首先从页面开始 页面的话呢 它一般都是放在padres下面 注意啊 它说的是一般

04:21.780 --> 04:28.180
并没有说我们的所有页面一定要放在padres下 因为我们可以设定当前的一个

04:28.580 --> 04:34.180
我们页面的路径 但是为了统一和我们基本上和框架保持一致

04:34.500 --> 04:36.020
我们都会放在padres下

04:36.500 --> 04:42.660
那么一个页面呢 我们基本会包含一个js 以及css或css的一个

04:43.380 --> 04:44.260
那个预加载包

04:44.820 --> 04:51.060
然后呢 我们以什么样的组织形式呢 我们是创建一个我们的index的页面或者说目录

04:51.300 --> 04:53.220
然后里面来放置这两个文件

04:53.700 --> 04:56.340
那么我们看一下 我们本身就是这么干的 对吧

04:56.660 --> 05:02.420
我们首先padres里面 我们有一个index放了两个文件 我们有一个about 我们也放了两个文件

05:02.740 --> 05:03.700
是吧 这个结构

05:04.180 --> 05:09.300
同时呢 我们继续往下看 在padres下我们新建目录啊 这个我们刚才已经新建过了

05:09.620 --> 05:12.660
包括是我们刚才那个about 就是通过这个方式出来的

05:13.140 --> 05:19.140
我们再看一下 我就不见了啊 首先你建了一个目录 然后建了一个css建了一个gxs

05:19.700 --> 05:24.500
css里面其实你不用写 待会我们可以简单的书写几个样式看一下效果

05:24.900 --> 05:27.540
第二个的话呢 我们在那个js差里面

05:27.940 --> 05:31.060
js差里面的话呢 我们一定要做到的是第一步

05:31.540 --> 05:34.500
这一步是必须要干的 后面两步到不一定要

05:34.500 --> 05:39.540
因为样式如果没有 或者你页面中没有使用到我们的微信的component组件的话

05:39.780 --> 05:40.900
那你就可以不用这一步

05:41.380 --> 05:45.060
第一步的话呢 你一定要去导入我们的一个叫做js

05:45.780 --> 05:48.020
talo jstalo这样的一个文件

05:48.420 --> 05:52.100
然后呢 你需要完成把talo这个字拿过来以及component

05:52.500 --> 05:56.660
为什么component定名呢 因为这里面肯定会书写到component这样的一个组件名

05:57.140 --> 05:59.780
然后需要用它干嘛呢 我们本身来讲

06:00.020 --> 06:02.820
当前的页面就继承自component的这个组件

06:03.700 --> 06:07.700
一旦继承了这个组件 那我们必须去写一个randle

06:07.860 --> 06:10.420
好 我们来看 在我们的这个

06:11.220 --> 06:15.620
在我们的这个命名中 在我们的文档中它也说到了这一步操作

06:16.180 --> 06:17.380
首先我们往下来看啊

06:17.860 --> 06:22.820
页面创建好后的话 我们需要在入口文件中configure the page文中进行指定

06:23.300 --> 06:28.100
那么指定的意义就在于我们需要让系统在运行之前知道

06:28.500 --> 06:33.060
当前程序有多少个页面以及页面的路径位置

06:33.460 --> 06:38.900
这是在我们的component里面 在我们的那个页面中我们一定会需要知道的

06:39.060 --> 06:42.820
我们之前不是已经看过吗 我们在哪里 app 点这个里面

06:43.140 --> 06:49.160
往上跑 在我们的打开一下

06:50.360 --> 06:52.840
啊 我收起来了啊 打开看到这里啊

06:53.240 --> 06:56.280
我们这边有一个pagers 对吧 我们一定要去指定一下

06:56.600 --> 06:58.440
你自己在做页面生成的时候

06:58.520 --> 07:01.800
其实这两块是不会让你自动完成的 它不像微信

07:02.200 --> 07:06.280
微信本身你自己建立一个页面以后的话 它会自动帮你把这个

07:06.520 --> 07:11.480
app.json里面啊pagers里面完成这个的一个配置啊 自己把它写

07:11.880 --> 07:14.360
但是我们这个不会 所以你一定要把它写上去

07:14.680 --> 07:18.440
至少让微信 因为我们说了 微信在编译的时候 它是读取

07:18.920 --> 07:19.960
dister里面的内容

07:20.280 --> 07:22.040
而dister里面的app.json

07:22.360 --> 07:26.520
它就需要去知道你现在的有几个页面的结构和路径

07:26.680 --> 07:27.800
它需要在这边知道

07:28.600 --> 07:30.040
好 紧接着 我们再来看

07:32.560 --> 07:34.480
它需要告知这个以后的话呢

07:34.480 --> 07:37.200
那么你就可以自行在里面编写 第二点

07:38.000 --> 07:41.280
例如上面的这部分代码很简单 我们需要给它指定

07:41.280 --> 07:44.880
注意 在写这个路径的时候 我们不要去代js

07:45.200 --> 07:48.560
因为很简单 微信在做这个操作的时候

07:48.560 --> 07:51.600
它会去自行的识别 四个文件

07:52.000 --> 07:54.640
wxmlwxssjson和js文件

07:54.960 --> 07:57.360
所以我们不能去指定你到底是哪一个

07:57.360 --> 08:00.240
因为这四个文件最后渲染时候会形成一个页面

08:00.880 --> 08:04.320
好 代码的话 刚才我们也看到了 基本保持这个结构 对吧

08:04.480 --> 08:07.040
我们也没有过多的去进行改变

08:07.040 --> 08:09.360
注意啊 你还是强调这一点

08:09.840 --> 08:12.960
这边你用了view and text 你这边就要写上

08:13.360 --> 08:17.600
如果你这边用的是html标签 比如说div那那种的话都不需要

08:17.920 --> 08:20.480
如果你比如说你还想用 比如说微信的button

08:20.640 --> 08:23.520
那么你在这边还要把那个微信的button给放进来

08:23.920 --> 08:26.080
和这个逻辑 紧接着往下走

08:26.800 --> 08:29.040
页面配置 页面配置结构呢

08:29.200 --> 08:32.160
其实我们说到了 它既然基层字compote

08:32.480 --> 08:35.440
所以它里面的很多元素也和compote是保持一致

08:35.840 --> 08:39.520
那么它最后也会生成这个叫做configure的这样一个文件

08:39.920 --> 08:42.400
这样的一个对象 我们在这里面写

08:42.800 --> 08:47.040
在我们在介绍我们的app.jsx的时候 我们其实说过

08:47.360 --> 08:51.680
像这些内容只能去放置我们window里面的部分数据

08:52.080 --> 08:55.520
我们不能去放置全局配置 因为当前的这个操作

08:55.520 --> 08:57.840
它只针对于当前index的页面

08:58.000 --> 09:00.000
理解吧 它是在这个里面 你看到吗

09:00.240 --> 09:02.960
页面配置只能放置windows部分的内容

09:03.760 --> 09:08.240
那么页面中你的这部分放置会去覆盖全局中的设置项

09:08.720 --> 09:11.840
覆盖的概念是指 如果说就像我现在一样

09:11.840 --> 09:13.520
我在全局中 我们看一下

09:14.160 --> 09:17.360
我在我的全局文件中我设定了talo操作

09:17.760 --> 09:22.000
但是在我的index页面中 我这边写上了一个我们的首页

09:22.400 --> 09:24.720
它的两个名称是一样的title texture

09:25.040 --> 09:26.160
看这 title texture

09:26.480 --> 09:31.040
所以当前页面在呈现的时候 它就会拿这个首页呈现出来

09:31.600 --> 09:36.400
但是我们同时做了它的背景色是黑色和白字

09:36.720 --> 09:39.920
这个时候由于在我现在页面中没有写室

09:40.160 --> 09:43.280
所以它还会显示成我们需要的全局配置

09:43.440 --> 09:44.880
看到了 OK 继续

09:47.330 --> 09:50.210
我们在这上面的话 我们书写格式的时候

09:50.210 --> 09:52.130
除了这些它还有一些其他的

09:52.450 --> 09:54.770
我们来看一下 有些我们可以显得配一下

09:55.490 --> 09:57.570
比如说我们这几个 我们就不看了

09:57.970 --> 09:59.410
这几个的话其实很简单

09:59.410 --> 10:01.170
这几个都是我们刚才设定过的

10:01.730 --> 10:05.490
这个导航样式 这个导航仅支持一下

10:05.490 --> 10:06.610
default默认样式

10:06.610 --> 10:09.730
customer's定型结构及保留的右上角胶囊

10:10.290 --> 10:14.690
这个样式的话 其实指的就是我们微信上的这个

10:15.490 --> 10:17.410
这个样式 一般这个样式

10:17.410 --> 10:20.210
我们不去做额外设定哪存在着这个黑色

10:20.210 --> 10:21.650
然后把它改成其他格式

10:22.370 --> 10:24.290
这个一般我们不去做更多的设置

10:24.930 --> 10:27.170
它仅仅是在default默认下的样式

10:28.290 --> 10:30.290
那么不做这个事情

10:30.610 --> 10:34.050
那么你要改的话 你可以去改成你自定义的一个格式

10:34.530 --> 10:36.290
然后同时我们来看这部分

10:36.770 --> 10:39.250
这部分内容 这部分内容也是我们平时

10:39.250 --> 10:43.890
刚刚在前面我们讲全局的我们的一个APP点

10:43.890 --> 10:45.490
JSX的时候我们讲过

10:45.890 --> 10:47.730
主要我们看它下面有个不同的几个内容

10:48.290 --> 10:50.690
包括是这个 Enable Portable Refresh 注意了

10:51.330 --> 10:54.050
我们之前在全局上面定义过 对吧

10:54.370 --> 10:56.050
我们在全局怎么再来看一下

10:56.530 --> 10:58.290
我们在全局上定义过这个词

10:58.850 --> 11:02.370
但是我们正确的或者更多的抓捉

11:02.370 --> 11:03.730
它其实不在全局定义

11:04.370 --> 11:06.530
它其实不在全局 我们把它给拿走的

11:06.930 --> 11:09.730
或者你直接在全局上面设定为 first

11:10.370 --> 11:14.930
那么你需要到某些页面中来定义这个值

11:16.050 --> 11:17.650
你跑到页面中 为什么呢

11:17.970 --> 11:21.970
因为我们不是所有的页面都可以进行下拉刷新的

11:22.690 --> 11:23.490
这点你需要了解

11:23.810 --> 11:26.210
如果你在全局去定义了这个值以后的话

11:26.530 --> 11:29.410
那有可能你不需要这个页面进行下拉

11:29.410 --> 11:30.850
它也会出现这个动作

11:31.570 --> 11:33.410
对吧 但是这个动作出现以后

11:33.810 --> 11:36.850
你在当前那个页面又没有配合上

11:36.850 --> 11:38.610
它的下拉刷新的行为

11:39.090 --> 11:43.010
注意啊 我们这边所设置的 Enable Portable Refresh

11:43.010 --> 11:44.930
它是一个样式动作

11:45.890 --> 11:47.490
你比如你看 我们这边打开

11:48.530 --> 11:50.770
在当前这页面它的确可以下拉

11:50.770 --> 11:52.690
它形成了这个样式和动作

11:53.010 --> 11:55.730
但是具体下拉以后到底刷新什么

11:55.730 --> 11:56.690
做什么事情

11:57.090 --> 11:58.450
即使这是一个行为

11:58.850 --> 12:00.450
行为需要后期来配置

12:00.930 --> 12:03.170
如果你当前页面本身就不需要刷新

12:03.170 --> 12:06.290
但是你在全局页面中又定义了这样的一个东西

12:06.290 --> 12:08.690
那你的问题就在于这个就是一个假东西

12:09.250 --> 12:12.050
假的话给用户感觉起来好傻对吧

12:12.050 --> 12:13.650
有刷新看到效果

12:13.650 --> 12:15.330
但是又没有刷新功能

12:15.330 --> 12:17.330
它会认为这个不好

12:17.810 --> 12:18.690
所以我们说

12:18.690 --> 12:21.490
我们一般性就会直接定义在

12:21.490 --> 12:25.090
我们当前你要刷新的页面的 Configure

12:25.090 --> 12:27.090
里面做一个 Enable Portable Refresh

12:27.650 --> 12:28.370
不用的时候

12:28.370 --> 12:29.010
我们就不用

12:29.490 --> 12:30.450
不要去设置

12:30.450 --> 12:32.370
全局上面我们也不设这个内容

12:32.370 --> 12:34.690
除非说我现在就三个页面

12:34.690 --> 12:36.530
这三个页面全都得刷

12:36.530 --> 12:37.810
首页显示广告

12:37.810 --> 12:39.090
二页显示列表

12:39.090 --> 12:40.210
三页显示新闻

12:40.210 --> 12:40.930
没了

12:40.930 --> 12:42.290
这三个我都可以刷

12:42.290 --> 12:44.050
那你就得去做这个事情

12:44.050 --> 12:44.610
理解吧

12:44.610 --> 12:46.210
你就与其在每个上面做

12:46.210 --> 12:48.130
还不如在AP上面做

12:48.130 --> 12:48.610
OK

12:48.610 --> 12:49.970
这是我们说到的一点

12:50.690 --> 12:52.770
一般我们都在单页面做

12:52.770 --> 12:54.130
那么这个做好以后

12:54.130 --> 12:55.090
我们说了

12:55.090 --> 12:57.730
我们在 Enable Portable Refresh

12:57.730 --> 12:59.250
前面我们也介绍了

12:59.250 --> 13:00.130
刷新的时候

13:00.130 --> 13:01.970
它是要一个行为的

13:01.970 --> 13:03.570
这个行为其实

13:03.570 --> 13:05.410
我们要在后面的页面

13:05.410 --> 13:07.170
事件处理程序里面

13:07.170 --> 13:09.170
完成它的一个刷新动作

13:09.650 --> 13:11.090
这个是我们待会来讲到

13:11.090 --> 13:11.890
我们先看到

13:11.890 --> 13:13.490
它需要给单独设定

13:13.490 --> 13:15.330
第二个有一个这个指

13:15.330 --> 13:18.450
On Reach Bottom Distance

13:18.530 --> 13:20.290
On Reach Bottom Distance

13:20.290 --> 13:23.730
它是指向拉上拉触底

13:23.730 --> 13:24.210
注意

13:24.210 --> 13:25.810
它其实就是触底

13:25.810 --> 13:28.050
当你碰到页面往下拉拉拉

13:28.050 --> 13:29.570
拉到底部的时候

13:29.570 --> 13:31.810
那么它应该会触发一个事件

13:31.810 --> 13:33.490
我们经常能看到

13:33.490 --> 13:34.850
很多的程序

13:34.850 --> 13:36.210
拉到底部以后

13:36.210 --> 13:38.290
它会出现继续加载

13:38.290 --> 13:38.930
理解吧

13:39.570 --> 13:41.250
那么这个继续加载动作

13:41.250 --> 13:42.290
它会出来一句话

13:42.290 --> 13:44.450
说系统正在加载对吧

13:44.450 --> 13:45.010
过一会

13:45.650 --> 13:47.010
下面的内容就出来了

13:47.010 --> 13:47.810
比如说列表

13:47.970 --> 13:49.890
它下面就把列表重新加载出来

13:49.890 --> 13:52.770
然后那个继续加载那几个字就没了

13:52.770 --> 13:54.290
那么这种操作呢

13:54.290 --> 13:55.970
我们除了用插件

13:55.970 --> 13:57.090
除了自行写以外

13:57.090 --> 13:59.250
系统给了我们最好的一个方法

13:59.250 --> 14:01.010
就是你会有一个系统

14:01.010 --> 14:03.090
给到的一个向拉触底事件

14:03.090 --> 14:04.290
但是这个事件呢

14:04.290 --> 14:06.370
依然在我们的

14:06.370 --> 14:08.050
叫做我们的页面事件

14:08.050 --> 14:09.330
处理程序里面有

14:09.330 --> 14:10.690
那么这个是干嘛呢

14:10.690 --> 14:12.210
这个我们刚才讲掉了

14:12.210 --> 14:14.610
它是一个向速单位

14:14.610 --> 14:16.210
它是告知我们

14:16.210 --> 14:17.970
你下拉的时候

14:17.970 --> 14:21.170
离底部还有多少向速

14:21.170 --> 14:21.970
我就可以触发

14:23.730 --> 14:26.130
这是一个比较合理的逻辑

14:26.130 --> 14:27.890
就是我们不是说

14:27.890 --> 14:30.770
每次页面都得拉到最底部以后

14:30.770 --> 14:31.650
碰到底了

14:31.650 --> 14:33.410
然后你这时候才下载

14:33.410 --> 14:35.250
而是我离底部可能还有

14:35.250 --> 14:37.330
50向速或者是更少

14:37.330 --> 14:38.370
30向速

14:38.370 --> 14:39.490
快到底部的时候

14:39.490 --> 14:40.770
你再滚轴滚一下

14:40.770 --> 14:41.810
可能到底部了

14:41.810 --> 14:43.810
这种时候我们会去触发

14:43.810 --> 14:44.450
这下面

14:44.450 --> 14:45.810
也就让用户感觉

14:45.810 --> 14:46.770
我还没到底

14:46.770 --> 14:48.610
它下面已经开始加载了

14:48.610 --> 14:50.610
这是一个用户非常好的体验

14:50.610 --> 14:51.170
所以呢

14:51.170 --> 14:52.850
我们把它设置一下

14:54.770 --> 14:55.970
待会我们来做这个事情

14:57.570 --> 14:59.010
你设置默认50

14:59.010 --> 15:00.370
那我们就可以改成40

15:01.810 --> 15:03.570
我们改成40

15:03.570 --> 15:04.770
紧接着我们再来看

15:07.110 --> 15:08.390
紧接着我们再来看

15:08.390 --> 15:09.910
它还有就要做

15:09.910 --> 15:10.790
这个

15:10.790 --> 15:13.030
pader orientation

15:13.030 --> 15:14.950
pader orientation

15:14.950 --> 15:17.030
它叫屏幕旋转设置

15:17.030 --> 15:20.070
你是让它支持哪一种旋转

15:20.070 --> 15:21.110
这个的话

15:21.110 --> 15:23.190
我们下面待会会讲到

15:23.190 --> 15:24.710
它的话

15:24.710 --> 15:25.750
主要是

15:25.750 --> 15:28.550
你如果在我们的pad上面

15:28.550 --> 15:29.830
那么你的旋转

15:29.830 --> 15:32.390
我们大家来看一下微信的设置

15:32.390 --> 15:34.310
这是要看一下微信的了

15:34.310 --> 15:35.510
它有三个值

15:35.510 --> 15:37.750
首先我把它微信的拖出来

15:37.750 --> 15:39.270
它有三个值

15:39.270 --> 15:40.790
是在这

15:40.790 --> 15:41.990
all two

15:41.990 --> 15:44.150
然后这是水平

15:44.150 --> 15:46.230
这是垂直水平

15:46.310 --> 15:47.670
它会有这三个操作

15:47.670 --> 15:48.790
我们看一下

15:48.790 --> 15:51.830
在手机屏幕上支持旋转

15:51.830 --> 15:54.390
那么你需要去设定这个值

15:54.390 --> 15:57.270
你需要在我们单个页面的json里面

15:57.270 --> 15:59.670
那么微信的单个页面json

15:59.670 --> 16:01.430
就是我们这边说到的

16:01.430 --> 16:03.750
当前的json里面

16:03.750 --> 16:05.270
这个config里面

16:05.270 --> 16:07.590
然后它需要设定这样一个内容

16:07.590 --> 16:09.990
我们如果是pader orientation的话

16:09.990 --> 16:11.110
设成all two

16:11.110 --> 16:13.350
它会根据你屏幕的情况

16:13.350 --> 16:14.470
自行完成

16:14.470 --> 16:15.190
同时呢

16:15.190 --> 16:16.710
你看到它也说

16:16.710 --> 16:19.910
从小程序2.5.0版本以后

16:19.910 --> 16:23.270
你可以固定被它设成landescaper

16:23.270 --> 16:24.070
landescaper

16:24.070 --> 16:27.110
它表示你可以固定它横平

16:27.110 --> 16:28.710
形成这样一个效果

16:28.710 --> 16:29.750
那我们看一下

16:29.750 --> 16:31.030
现在我们的小程序

16:31.030 --> 16:32.310
如果你在运行期间

16:32.310 --> 16:35.030
你想观察它的一个版本库的话

16:35.030 --> 16:36.310
点开详情

16:36.310 --> 16:37.510
点开详情

16:37.510 --> 16:42.230
那么在我们的基本设置里面

16:42.230 --> 16:43.430
我们在这

16:43.430 --> 16:44.630
就是本地设置里面

16:45.350 --> 16:46.470
这边会有什么

16:46.470 --> 16:48.870
会有一个2.8.3

16:48.870 --> 16:50.790
已经完全超过它了

16:50.790 --> 16:52.070
并且我们能看到

16:52.070 --> 16:54.870
2.8.3现在是88.51%

16:54.870 --> 16:57.430
这是表示使用的人还是比较多的

16:57.430 --> 16:59.270
下面还有一些版本呢

16:59.270 --> 17:00.870
像这种可以忽略不计

17:00.870 --> 17:01.830
为什么你说

17:01.830 --> 17:03.270
有些同学一直会说

17:03.270 --> 17:04.630
为什么还有人在用

17:04.630 --> 17:06.870
你比如说2.6.6版本

17:06.870 --> 17:10.950
为什么还有人甚至连这个2.4.4还会用到

17:10.950 --> 17:12.390
那我可以讲一下

17:12.470 --> 17:14.790
就是一个比较特别的一个点

17:14.790 --> 17:17.190
就是你有时候可能会发现

17:17.190 --> 17:18.470
有一些老人

17:18.470 --> 17:21.270
他在使用微信现在已经非常普及了

17:21.270 --> 17:24.550
他们之间的一个退休以后的交动和互动

17:24.550 --> 17:27.110
但他们很少去升级

17:27.110 --> 17:29.430
他们很多时候都是看到升级取消

17:29.430 --> 17:30.390
看到升级取消

17:30.390 --> 17:32.390
然后有升级提示不干

17:32.390 --> 17:33.830
他们觉得这样的操作

17:33.830 --> 17:34.550
他们也不会

17:34.550 --> 17:35.190
他们也

17:35.190 --> 17:37.590
所以他们会有这样的一些

17:38.710 --> 17:40.390
老版本在使用

17:40.390 --> 17:42.070
所以我个人建议是

17:42.070 --> 17:44.550
如果你见到了一些父母的话

17:44.550 --> 17:47.990
为了让他能够在微信上能够更好的体验的话

17:47.990 --> 17:48.790
跟他说一下

17:48.790 --> 17:50.150
让他升个级

17:50.150 --> 17:51.910
有时候他发现问题了

17:51.910 --> 17:52.390
还在问你

17:52.390 --> 17:53.430
我这个怎么这样

17:53.430 --> 17:54.550
如果说玩一些游戏

17:54.550 --> 17:55.190
对吧

17:55.190 --> 17:56.950
然后他和你想进行互动

17:56.950 --> 18:01.030
但是他始终没法跟你进行交数据互传

18:01.030 --> 18:02.150
你也看不到他

18:02.150 --> 18:04.790
其实这个原因就在于他的版本问题

18:04.790 --> 18:05.350
OK

18:05.350 --> 18:06.310
这个是要知道一下

18:07.590 --> 18:08.310
我们现在版本

18:08.310 --> 18:10.230
其实我们大家都在用的是最新版本

18:10.230 --> 18:11.190
最高版本的话

18:11.270 --> 18:13.110
其实已经够了2.8.3

18:13.110 --> 18:14.070
然后他的话

18:14.070 --> 18:15.030
已经告诉我们

18:15.030 --> 18:16.310
我们打开

18:16.310 --> 18:18.070
他告诉我们的是2.4以上

18:18.070 --> 18:18.630
OK

18:18.630 --> 18:19.270
所以

18:19.270 --> 18:20.950
pater orientation

18:20.950 --> 18:21.510
我们说

18:21.510 --> 18:22.870
我们可以给一个

18:22.870 --> 18:24.870
一般我们都给一个all to

18:24.870 --> 18:26.950
除非你做的这个内容

18:26.950 --> 18:28.950
它是非得横平玩的

18:28.950 --> 18:29.830
我们举例

18:29.830 --> 18:31.270
我小程去打开一个

18:31.270 --> 18:32.550
我想看一下

18:32.550 --> 18:34.710
那个一个3D效果

18:34.710 --> 18:36.390
就是你手机

18:36.390 --> 18:38.470
随着你的VR AR这种效果

18:38.470 --> 18:39.830
想左右转动

18:39.830 --> 18:40.870
然后看里面的

18:40.870 --> 18:42.870
除了调查件一些技术功能以外

18:42.870 --> 18:44.790
它竖起来可能看不方便

18:44.790 --> 18:46.870
所以它设定了一个横相比

18:46.870 --> 18:47.670
所以这样的话

18:47.670 --> 18:50.550
我们才会去做这样的一个landescaper

18:50.550 --> 18:51.190
设定

18:51.190 --> 18:53.110
我们一般性的默认状态下

18:53.110 --> 18:55.590
我们都会在当前的页面中

18:55.590 --> 18:57.110
给它完成一个

18:57.110 --> 19:00.870
叫做pater orientation

19:00.870 --> 19:02.630
all to

19:02.630 --> 19:05.600
这个格式

19:05.600 --> 19:07.280
紧接着我们继续往下看

19:07.280 --> 19:09.920
这几个是在全局里面是没有的

19:09.920 --> 19:11.280
我们回到回过头来

19:11.280 --> 19:12.160
再来

19:12.160 --> 19:16.480
我们看到还有一个disabled scaler

19:16.480 --> 19:19.040
那么这个主要是设置当前页面

19:19.040 --> 19:20.640
你是否允许它

19:20.640 --> 19:23.600
页面整体不能上下滚动

19:23.600 --> 19:26.400
不能上下滚动

19:26.400 --> 19:28.960
这个是一个强制设定

19:28.960 --> 19:30.960
那么一般性我们的程序

19:30.960 --> 19:32.720
我们的页面

19:32.720 --> 19:33.280
你看

19:33.280 --> 19:37.040
如果它本身没有超过它的高度的话

19:37.040 --> 19:40.080
它其实在页面中是不能上下滚的

19:40.080 --> 19:42.800
但是一旦你超过它的高度以后

19:42.800 --> 19:44.480
它是可以在页面中我们都知道

19:44.480 --> 19:45.360
可以滚动

19:45.360 --> 19:47.040
但是一旦超过以后

19:47.040 --> 19:48.720
你是否让它滚动

19:48.720 --> 19:51.920
其实我们就是通过这个值来设置的

19:51.920 --> 19:53.600
不让它滚动

19:53.600 --> 19:57.760
这个有这功能

19:57.760 --> 19:58.960
我们说

19:58.960 --> 20:01.680
但是具体实现效果和场景的话

20:01.680 --> 20:04.480
其实我还没有特别多的想到

20:04.480 --> 20:05.600
但是功能存在

20:05.600 --> 20:06.000
注意

20:06.000 --> 20:07.200
它要求了一点

20:07.200 --> 20:07.920
是说

20:07.920 --> 20:09.680
如果你设在全局里面

20:09.680 --> 20:11.120
它说的是app.json

20:11.120 --> 20:14.000
其实它这边应该写成的是app.什么

20:14.000 --> 20:16.240
我们刚才看到的app.jsX

20:16.240 --> 20:16.800
对吧

20:16.800 --> 20:17.840
在这个里面

20:17.840 --> 20:18.880
你去设置的话

20:18.880 --> 20:20.240
其实是无效的

20:20.240 --> 20:21.360
因为本身来讲

20:21.360 --> 20:22.560
它还没有页面

20:22.560 --> 20:23.840
你何来的滚动

20:23.840 --> 20:24.640
对吧

20:24.640 --> 20:29.200
然后还有静止又滑手势的返回

20:29.200 --> 20:31.360
那么这个主要的是

20:31.360 --> 20:32.560
我们当前页面

20:32.560 --> 20:33.920
有很多情况下

20:33.920 --> 20:37.120
是来源于第二个页面的跳转

20:37.120 --> 20:38.320
第二个页面的跳转

20:38.320 --> 20:39.840
那么跳转以后

20:39.840 --> 20:41.520
如果说你要回去

20:41.520 --> 20:43.680
一般我们都会在左上角点

20:43.680 --> 20:45.520
去点那个所谓的

20:45.520 --> 20:46.640
一个按钮

20:46.640 --> 20:47.120
对吧

20:47.120 --> 20:48.880
就是剑头浮

20:48.880 --> 20:50.880
我们如果开启这个

20:50.880 --> 20:54.000
disable swapper back

20:54.000 --> 20:54.960
那么它的话

20:54.960 --> 20:59.360
就是我们只要右手指放在左边

20:59.360 --> 21:00.160
往右滑

21:00.160 --> 21:02.240
那么它就可以直接回来

21:02.240 --> 21:03.440
这样的效果

21:03.440 --> 21:05.200
那么一般我们是静止

21:05.200 --> 21:06.160
为什么呢

21:06.160 --> 21:07.680
因为在页面中

21:07.680 --> 21:09.280
其实我们右滑

21:09.280 --> 21:11.440
并不一定真的需要回来

21:11.440 --> 21:12.960
有时候我无意识的

21:12.960 --> 21:15.200
可能我在选某个页面上下拉的时候

21:15.200 --> 21:17.680
我无意识的形成了一个右滑效果

21:17.680 --> 21:19.040
这时候的话

21:19.040 --> 21:19.840
你回来了

21:19.840 --> 21:21.120
这时候我还得再进去

21:21.120 --> 21:21.840
对吧

21:21.840 --> 21:23.680
但是除非是碰到几种情况

21:23.680 --> 21:24.560
比如说

21:24.560 --> 21:26.640
我自己在做的是一个图库

21:26.640 --> 21:27.920
我做的一个图库

21:27.920 --> 21:30.880
现在我页面中呈现出了

21:30.880 --> 21:32.480
比如说一张图片

21:32.480 --> 21:33.280
图片列表

21:33.280 --> 21:34.880
点击一个图片列表进去以后

21:34.880 --> 21:36.800
里面只有一张图

21:36.800 --> 21:37.840
我打开了一张图

21:37.840 --> 21:39.680
虽然我不做预览效果

21:39.680 --> 21:41.680
那么它也不存在上下左右拉

21:41.680 --> 21:42.720
就给你看一张图

21:42.720 --> 21:43.840
这种完成以后

21:43.840 --> 21:45.920
那么你就可以开启这个叫

21:45.920 --> 21:47.840
disable the swapper back

21:47.840 --> 21:49.040
让它形成右滑

21:49.040 --> 21:49.760
我就回来

21:49.760 --> 21:51.360
我就不需要看每张图的时候

21:51.360 --> 21:54.000
都去点左上角的回推键

21:54.000 --> 21:55.120
是这个逻辑

21:55.120 --> 21:59.520
然后还有的就是using components

21:59.520 --> 22:02.080
在我们的原始的app.json里面

22:02.080 --> 22:03.600
原始的app.json的

22:03.600 --> 22:04.960
我们每个页面中

22:04.960 --> 22:07.680
其实我们都可以有一个using components

22:07.680 --> 22:08.400
你看到吗

22:08.400 --> 22:09.840
它这边会给你加上

22:09.840 --> 22:10.960
它是干嘛用的

22:10.960 --> 22:13.200
我们还记得原生小程序书写的时候

22:13.200 --> 22:15.760
我们可以自行去定义component

22:15.760 --> 22:17.200
我们的自定义组件

22:17.200 --> 22:19.120
然后自定义组件需要使用的时候

22:19.120 --> 22:21.920
我们就需要在这里面去指定

22:21.920 --> 22:22.800
指定好以后

22:22.800 --> 22:24.160
页面中才能进行使用

22:24.160 --> 22:25.520
所以这个值

22:25.520 --> 22:28.640
它会自动帮你在放在这里

22:28.640 --> 22:30.880
这是我们说到的几个操作

22:30.880 --> 22:32.720
那么有些我们在后面

22:32.720 --> 22:33.920
讲到生命周期的时候

22:33.920 --> 22:35.680
或者我们做页面跳转的时候

22:35.680 --> 22:37.840
我们把它一起来演示一下

22:37.840 --> 22:39.200
那么现在先看一下

22:39.200 --> 22:40.800
现在这几个势力中

22:40.800 --> 22:42.640
我们看到基本上

22:42.640 --> 22:45.280
首先微信小程序和百度小程序

22:45.280 --> 22:46.800
它们基本上都支持

22:46.800 --> 22:49.200
因为我们主要的telo的话

22:49.200 --> 22:51.920
它是以微信小程序作为它的基准

22:51.920 --> 22:54.000
所以它都支持微信小程序

22:54.000 --> 22:55.280
而其他的话

22:55.280 --> 22:58.400
由于受到它各自生态圈的影响

22:58.400 --> 23:00.560
所以它可能有些内容不支持

23:00.560 --> 23:02.000
最不支持的或者说

23:02.000 --> 23:04.560
最支持很少的

23:04.560 --> 23:05.840
其实就是支付宝

23:05.840 --> 23:07.760
支付宝本身自己小程序

23:07.760 --> 23:09.120
大家如果不知道的话

23:09.120 --> 23:10.240
你可以打开支付宝

23:10.240 --> 23:12.720
去看一下里面也有个小程序

23:12.720 --> 23:15.360
它为了去维护它当前的

23:15.360 --> 23:18.400
这样的一个和支付宝统一的一个形式

23:18.400 --> 23:20.240
你不能说大家随意自己开发

23:20.240 --> 23:20.720
对吧

23:20.720 --> 23:21.680
开发完成以后的话

23:21.680 --> 23:22.800
各自各个字的

23:22.800 --> 23:26.480
所以它会要求有一些它自行的设定

23:26.480 --> 23:28.800
但是它不允许你额外的做

23:28.800 --> 23:30.480
这个是

23:30.480 --> 23:31.840
凡是还是属于

23:31.840 --> 23:33.840
它应该讲比较简单吧

23:33.840 --> 23:35.920
或者说没有那么多的设定

23:35.920 --> 23:38.320
而我们现在主要针对的是微信来做

23:38.320 --> 23:39.600
那么额外说一下

23:39.600 --> 23:41.360
如果你现在设定了

23:41.360 --> 23:41.840
你说老师

23:41.840 --> 23:44.240
在支付宝上面会出现什么样的状态呢

23:44.240 --> 23:45.760
它不只行

23:45.760 --> 23:49.200
它形成就是忽略这些内容

23:49.200 --> 23:49.920
理解吧

23:49.920 --> 23:50.880
并不是错

23:50.880 --> 23:52.800
也因为是忽略

23:52.800 --> 23:54.000
怎么样的忽略呢

23:54.000 --> 23:55.760
那就是编译呗

23:55.760 --> 23:57.440
我们写好一端的

23:57.440 --> 23:58.400
写好所有代码

23:58.400 --> 23:59.520
以微信小程序写

23:59.520 --> 24:00.800
反正都支持

24:00.800 --> 24:02.080
你在编译的时候

24:02.080 --> 24:05.120
你直接把它以支付宝小程序的方式进行编译

24:05.120 --> 24:07.040
那么这样出来的页面

24:07.040 --> 24:10.240
它自行会把里面某一些内容过滤掉

24:10.240 --> 24:11.680
如果说没有过滤

24:11.680 --> 24:13.680
或者说做配置文件存在的话

24:13.680 --> 24:15.360
那它运行支付宝小程序的时候

24:15.360 --> 24:17.840
它就会忽略这些内容的存在

24:17.840 --> 24:20.160
这个是我们需要知道一下

24:20.160 --> 24:21.280
并不是说

24:21.280 --> 24:23.120
你开发微信小程支付宝的时候

24:23.120 --> 24:24.400
你说你先开发了微信

24:24.400 --> 24:25.200
然后突然说

24:25.200 --> 24:26.880
这个不支持你再回去删

24:26.880 --> 24:28.400
不是这个逻辑

24:28.400 --> 24:29.680
这也就是我们的telo

24:29.680 --> 24:32.240
为什么好处再叫做一次编码

24:32.240 --> 24:33.360
多端运行

24:33.360 --> 24:34.640
所谓的一次编码

24:34.640 --> 24:36.560
就是你以微信小程序的方式

24:36.560 --> 24:38.480
把它前写全了

24:38.480 --> 24:40.720
你自己编译支付宝小程序

24:40.720 --> 24:42.960
那这个的话是OK的

24:42.960 --> 24:44.160
不会报错的

24:44.160 --> 24:45.760
OK 这个咱们知道

24:45.760 --> 24:46.320
好了

24:46.320 --> 24:49.280
那么我们看一下页面说明

24:49.280 --> 24:50.400
页面说明里面的话

24:50.400 --> 24:51.440
我们强调一点

24:51.440 --> 24:53.760
就是说它同样采取的是

24:53.760 --> 24:56.960
我们页面中会用到任何的GS文件

24:56.960 --> 24:57.760
包括是我们前面

24:57.760 --> 24:58.960
其实已经给大家讲到了

24:58.960 --> 24:59.760
我们自己写了

24:59.760 --> 25:01.120
global.js对吧

25:01.120 --> 25:03.600
你通过ES6的Import的方式进行引入

25:03.600 --> 25:04.960
我们引入进来了

25:04.960 --> 25:06.720
那么它同样支持预处理器

25:06.720 --> 25:08.160
lessass的格式

25:08.160 --> 25:09.360
那么同样的话

25:09.360 --> 25:12.080
我们也支持普通的CSS行程

25:12.080 --> 25:12.720
对吧

25:12.720 --> 25:13.680
那么我们讲

25:13.680 --> 25:16.160
我们在页面中注意这边词

25:16.160 --> 25:17.600
必须有一个Random

25:17.600 --> 25:19.280
因为它是计程制

25:19.280 --> 25:21.280
component的机类的

25:21.280 --> 25:23.280
所以我们需要一个Random

25:23.280 --> 25:25.680
它返回一个GSX的代码

25:25.680 --> 25:27.200
具体GSX的话

25:27.200 --> 25:28.880
如果学过React同学已经OK

25:28.880 --> 25:31.120
如果没有学过同学或者已经忘了同学

25:31.120 --> 25:32.160
你可以去看一下

25:32.160 --> 25:34.800
待会我们在后面讲解GSX的时候的话

25:34.800 --> 25:36.480
我们也会带一下给大家

25:36.480 --> 25:38.240
因为这个可能是在React里面

25:38.240 --> 25:40.560
大家已经讲解过了

25:40.560 --> 25:41.280
请接着

25:41.280 --> 25:42.160
我莫兰一下

25:42.160 --> 25:43.040
上面有些内容

25:43.040 --> 25:43.520
我们要讲到

25:43.520 --> 25:45.040
页面 声明 周期 寒树的

25:45.040 --> 25:45.920
页面

25:45.920 --> 25:47.200
那个事件寒树的时候

25:47.200 --> 25:48.320
我们再来对它操作

25:48.320 --> 25:50.960
包括是刷新 底部

25:50.960 --> 25:53.680
包括是进职滑动

25:53.680 --> 25:54.480
我们滑动效果

25:54.480 --> 25:56.080
待会都可以演示一下

25:56.080 --> 25:58.320
然后请接着我们说一下声明周期

25:58.320 --> 26:00.080
页面的声明周期

26:00.080 --> 26:02.080
在全局过程中我们已经讲解过了

26:02.080 --> 26:02.960
很多都一样

26:02.960 --> 26:03.760
我们不讲了

26:03.760 --> 26:04.480
包括是这个

26:04.480 --> 26:06.480
well mount data mount对吧

26:06.480 --> 26:08.160
我们说有几个部一样的

26:08.160 --> 26:09.440
比如说像这个

26:09.440 --> 26:12.400
它说页面是否需要更新

26:12.400 --> 26:14.480
那么如果返回Force

26:14.480 --> 26:15.600
它不断

26:15.600 --> 26:16.720
返回Force

26:16.720 --> 26:18.160
它不断进行更新否则

26:18.160 --> 26:21.200
它会更新流程

26:21.200 --> 26:21.840
注意一下

26:21.840 --> 26:22.720
它指的是

26:22.720 --> 26:24.000
你现在页面

26:24.000 --> 26:25.200
如果要完成

26:25.200 --> 26:26.560
什么叫更新呢

26:26.560 --> 26:28.080
就是我里面的数据

26:28.080 --> 26:30.240
如果从1变成2的时候

26:30.240 --> 26:32.800
那么它会去完成这种更新的操作

26:32.800 --> 26:34.000
那么这种变化

26:34.000 --> 26:34.960
就意味着

26:34.960 --> 26:36.560
你需要去实现

26:36.560 --> 26:38.880
它的数据的改变

26:38.880 --> 26:40.720
我们的数据一般会存储

26:40.720 --> 26:42.640
在我们的Stator这个结构中

26:42.640 --> 26:46.000
或者你直接作为我们的一个属性绑定

26:46.000 --> 26:48.320
但是我们现在还是希望

26:48.320 --> 26:50.880
在绑定的时候有一定的改变

26:50.880 --> 26:51.520
那么这种时候

26:51.520 --> 26:53.120
我们就会写上这个

26:53.120 --> 26:53.840
当然

26:53.840 --> 26:55.360
这个是指

26:55.360 --> 26:56.480
你现在是否有刷新

26:56.480 --> 26:58.560
这个是指在刷新前

26:58.560 --> 26:59.760
刷新后

26:59.760 --> 27:00.720
有的部分

27:00.720 --> 27:01.440
所以我们

27:01.440 --> 27:03.440
你可以把它给写出来

27:03.440 --> 27:05.200
那么在后面讲到绑定的时候

27:05.200 --> 27:07.280
我们可以跟它里面写一下

27:07.280 --> 27:08.960
运行一下

27:08.960 --> 27:10.480
把app.js关掉

27:10.480 --> 27:12.000
我们在index里边

27:12.000 --> 27:12.960
然后这边的话

27:12.960 --> 27:13.680
我们看一下

27:13.680 --> 27:15.440
这是我们之前写到的

27:15.440 --> 27:17.840
我们里面会有不同的这样的一个格式

27:17.840 --> 27:18.560
对吧

27:18.560 --> 27:19.840
然后我们这边

27:19.840 --> 27:20.480
但你注意

27:20.480 --> 27:21.120
我们这里面

27:21.120 --> 27:24.480
这种是没有默认给出updata的

27:24.480 --> 27:27.520
我们这边可以给出updata

27:27.520 --> 27:28.320
我们可以给出

27:28.320 --> 27:30.720
它叫做

27:30.720 --> 27:40.720
页面更新前的操作

27:40.720 --> 27:43.590
再给这个

27:43.590 --> 27:44.550
它叫做

27:44.550 --> 27:55.800
页面更新完毕的操作

27:55.800 --> 27:58.600
一下就是这个的操作点在哪里

27:58.600 --> 28:00.680
它需要Staters的改变

28:00.680 --> 28:01.800
首先我们这样

28:01.800 --> 28:04.040
我们把这个给删掉

28:04.040 --> 28:07.880
然后我们在里面去运用我们的一个button

28:07.880 --> 28:09.800
我们写个button出来

28:09.800 --> 28:13.960
让button里面我们写一个单击事件

28:13.960 --> 28:15.400
我们写个单击事件

28:15.400 --> 28:19.880
它去调用我们现在的双引号表

28:19.880 --> 28:21.800
它去调用我们现在的this

28:21.800 --> 28:24.040
这里边我们取个名称待会

28:24.040 --> 28:28.040
叫handler click

28:28.040 --> 28:29.960
它去调用我们的handler click

28:29.960 --> 28:32.200
handler click是我们前面定义的一个方法

28:32.200 --> 28:33.640
我们可以在这边

28:33.640 --> 28:35.800
它是一个事件处理

28:35.800 --> 28:37.640
然后在这个里面

28:37.640 --> 28:40.360
我们就写上

28:40.360 --> 28:44.880
简单的

28:44.880 --> 28:51.200
当前状态为this点

28:51.200 --> 28:53.880
stater点

28:53.880 --> 28:58.320
我们写上一个switch

28:58.320 --> 29:00.640
我们写上一个switch

29:00.640 --> 29:02.480
当前状态一打开的时候

29:02.480 --> 29:04.320
这个值肯定是没有的

29:04.320 --> 29:06.720
然后我们需要点击这个按钮的时候

29:06.720 --> 29:08.400
在这进行变化

29:08.400 --> 29:12.320
当前的setter

29:12.320 --> 29:14.080
里边

29:14.080 --> 29:25.520
我们把switch值做成取反

29:25.520 --> 29:26.480
没有取反

29:26.480 --> 29:30.230
那就是真

29:30.230 --> 29:32.790
没有取反应该就是真

29:32.790 --> 29:33.910
那么这样做

29:33.910 --> 29:35.830
那么这个button要说明一下

29:35.830 --> 29:36.870
button的话

29:36.870 --> 29:38.070
你现在直接运行

29:38.070 --> 29:39.430
你来看

29:39.430 --> 29:42.630
当前状态为endified

29:42.630 --> 29:43.430
点击一下

29:44.150 --> 29:44.790
对吧

29:44.790 --> 29:45.030
好

29:45.030 --> 29:45.990
我们来看

29:45.990 --> 29:47.350
此时操作的时候

29:47.350 --> 29:51.750
我们这边可以去做一个监听

29:51.750 --> 29:54.950
就是我们页面更新前和更新后

29:54.950 --> 29:56.230
我们这边写一个

29:56.230 --> 30:02.930
它是well update

30:02.930 --> 30:09.090
然后我们把nexus data给它显示一下

30:09.090 --> 30:10.130
现在来看一下效果

30:10.130 --> 30:12.760
继续

30:12.760 --> 30:15.960
现在打开默认的switch是空

30:15.960 --> 30:17.160
一点击

30:17.160 --> 30:17.800
它是q

30:17.800 --> 30:18.600
看到吗

30:18.600 --> 30:19.560
它这边告诉你了

30:19.560 --> 30:21.480
已经触发了well update了

30:21.480 --> 30:23.240
然后完成说你更新

30:23.240 --> 30:24.840
它是在更新前

30:24.840 --> 30:25.640
更新前

30:25.640 --> 30:28.520
你要更新的数据switch为q

30:28.520 --> 30:29.880
是不是这个逻辑

30:29.880 --> 30:31.640
那么这个是什么呢

30:31.640 --> 30:33.080
你来看一下

30:33.080 --> 30:33.800
这个呢

30:33.800 --> 30:36.360
其实我们在页面说明文档中

30:36.360 --> 30:37.640
它这边没有出来

30:37.640 --> 30:40.120
它是更新前的属性

30:40.120 --> 30:41.560
它是更新前的属性

30:41.560 --> 30:43.720
我们把它打印一下

30:43.720 --> 30:48.400
一个是更新后

30:48.480 --> 30:52.040
我们因为没有那个值

30:52.040 --> 30:57.000
所以它的出现

30:57.000 --> 30:59.320
我们就看一下吧

30:59.320 --> 31:00.520
因为刚才的话

31:00.520 --> 31:05.830
我们没有初始化定义这个内容

31:05.830 --> 31:08.790
在这点击一下

31:08.790 --> 31:11.110
初始化状态下没有

31:11.110 --> 31:12.790
然后后期更新的过程中

31:12.790 --> 31:14.390
就会有这个q

31:14.390 --> 31:15.110
所以这样的话

31:15.110 --> 31:16.150
它就拿到了

31:16.150 --> 31:21.270
它是在我们的well update里面

31:21.270 --> 31:22.950
这是我们给大家一演示一下

31:22.950 --> 31:24.070
那么下面的话

31:24.070 --> 31:26.470
其实就是我们非常简单的

31:26.470 --> 31:29.190
一个事件处理函数的调用规则

31:29.190 --> 31:29.830
之后的话

31:29.830 --> 31:30.630
我们也会讲解

31:30.630 --> 31:31.750
当然这个的话

31:31.750 --> 31:33.190
如果react同学学过的话

31:33.190 --> 31:34.070
其实也很简单

31:34.070 --> 31:34.790
对吧

31:34.790 --> 31:37.030
它利用了我们的jscar的这样的

31:37.030 --> 31:39.110
我们调用当前的一个handle的

31:39.110 --> 31:41.270
click的一个函数处理事件

31:41.270 --> 31:42.230
然后里面呢

31:42.230 --> 31:44.870
修改我们的状态值Stator

31:44.870 --> 31:47.030
Stator值就好比

31:47.030 --> 31:48.790
我们在微信中那个data

31:48.790 --> 31:50.790
好比微信中那个data数据

31:50.790 --> 31:51.430
对吧

31:51.430 --> 31:52.390
然后里边的话

31:52.390 --> 31:54.150
修改方式微信叫什么

31:54.150 --> 31:55.110
还记得吗

31:55.110 --> 31:56.870
微信叫setdata

31:56.870 --> 31:58.310
所以修改方式

31:58.310 --> 32:00.790
它其实微信很多时候都是

32:00.790 --> 32:02.390
特别少程序这段

32:02.390 --> 32:04.790
它是沿用了我们的angler的

32:04.790 --> 32:05.830
级由部分机制

32:05.830 --> 32:07.510
也用了view的机制

32:07.510 --> 32:10.230
形成了它自己的这一套模式

32:10.230 --> 32:12.390
那么我们这边就用的是setdata

32:12.390 --> 32:13.830
修改里面的switch

32:13.830 --> 32:14.950
本身是没有的

32:14.950 --> 32:15.830
这边是没有的

32:15.830 --> 32:19.030
这个值空取反就是q

32:19.030 --> 32:19.510
对吧

32:19.510 --> 32:20.390
这样的话

32:20.390 --> 32:21.990
我们把这个click

32:22.070 --> 32:23.590
就可以呈现在当前了

32:23.590 --> 32:25.190
因为它是属于绑定

32:25.190 --> 32:27.590
所以你修改了Stator里面的switch

32:27.590 --> 32:29.990
那么这边就直接可以看到效果

32:29.990 --> 32:31.990
而你整个这个操作过程中

32:31.990 --> 32:33.590
你亚哥就没有管过

32:33.590 --> 32:35.510
我们的生命周期扣子函数

32:35.510 --> 32:37.110
而这个函数的话呢

32:37.110 --> 32:39.990
它就可以帮助我们来识别

32:39.990 --> 32:42.310
你现在具体改过什么

32:42.310 --> 32:43.350
那么咱们来看

32:43.350 --> 32:44.950
这上面也是一样

32:44.950 --> 32:46.950
这更新完毕的操作也是一样

32:46.950 --> 32:47.750
这个是

32:47.750 --> 32:49.510
它是Stator状态跟perperty

32:49.510 --> 32:51.350
你有没有参数传进来

32:51.350 --> 32:52.470
如果你有参数的话

32:52.470 --> 32:54.230
你依然可以在这边进行操作

32:54.230 --> 32:55.350
这是属性

32:55.990 --> 32:56.550
好了

32:56.550 --> 32:57.750
那么这是属于

32:57.750 --> 32:59.750
演示了一个我们的updater

32:59.750 --> 33:01.590
这样的一个生命周期函数

33:01.590 --> 33:05.270
它究竟在哪个点上能够进行触发

33:05.270 --> 33:06.470
我们继续往下来看

33:07.670 --> 33:08.950
updater对吧

33:08.950 --> 33:09.750
然后的话

33:09.750 --> 33:11.270
shuheater我们就不演示了

33:11.270 --> 33:12.950
因为之前我们对它已经做过

33:12.950 --> 33:15.270
非常详细的说明

33:15.670 --> 33:18.550
那么在我们的页面的生命周期里面

33:18.550 --> 33:22.630
它相对比起我们的全局的生命周期

33:22.630 --> 33:23.910
会多很多

33:23.910 --> 33:25.590
这是这点上面要说到的

33:25.590 --> 33:27.990
同时我们看一下传直

33:27.990 --> 33:28.710
对吧

33:28.710 --> 33:30.870
两个页面之间的传直

33:30.870 --> 33:33.910
以上所有生命周期都可以通过这个来得到

33:33.910 --> 33:34.790
那我们看一下

33:34.790 --> 33:37.510
传直究竟该怎么样去获取呢

33:37.510 --> 33:40.070
首先我们得跑到一个页面

33:40.070 --> 33:43.190
给它进行数据的传递

33:43.190 --> 33:44.550
我们这样

33:44.550 --> 33:48.150
我们先去到现在的首页

33:48.230 --> 33:48.790
对吧

33:48.790 --> 33:50.070
我们在首页里面

33:50.070 --> 33:51.830
这边我们不做修改了

33:51.830 --> 33:53.910
我们直接依然点击按钮以后

33:53.910 --> 33:56.390
我们让它进行跳转

33:56.390 --> 33:57.990
让它进行跳转

33:57.990 --> 34:00.550
下我们tallow

34:00.550 --> 34:01.590
点

34:01.590 --> 34:03.670
我们写never get true

34:03.670 --> 34:10.340
让它进行跳转

34:10.340 --> 34:11.700
UIL

34:11.700 --> 34:13.220
我们写上

34:13.220 --> 34:16.180
paters下面的about

34:16.180 --> 34:17.860
下的about

34:17.860 --> 34:18.900
这样跳

34:18.900 --> 34:21.780
然后给它参数id等于2

34:21.780 --> 34:23.940
再传上一个type

34:23.940 --> 34:24.820
等于taxter

34:24.820 --> 34:27.460
一个文本

34:27.460 --> 34:28.660
这样的两传内容

34:28.660 --> 34:30.740
我想让它跳过去

34:30.740 --> 34:31.860
此时保存一下

34:31.860 --> 34:34.980
我们来看一下页面的跳转方式

34:34.980 --> 34:37.540
点击按钮以后立马爆错

34:37.540 --> 34:38.900
你看一下它的错显是什么

34:38.900 --> 34:42.020
它说never get true file 失败

34:42.020 --> 34:42.900
cannot

34:42.900 --> 34:44.180
never get true

34:44.180 --> 34:45.700
tabber bar pater

34:45.700 --> 34:47.300
你不能去

34:47.300 --> 34:48.900
never get true的这种方式

34:48.900 --> 34:51.700
去跳转一个tabber bar的页面

34:51.700 --> 34:53.700
我们之前说过

34:53.700 --> 34:55.860
我们在做tabber bar的时候我们讲过

34:55.860 --> 34:59.060
如果这个页面已经完成了

34:59.060 --> 35:01.540
我们现在的tabber bar的功能

35:01.540 --> 35:02.580
也就是说

35:02.580 --> 35:06.740
它已经书写到了我们的tabber bar的整个

35:06.740 --> 35:08.260
pater path里面了

35:08.260 --> 35:11.300
那你就不能再用我们原先所谓的

35:11.300 --> 35:12.500
never get true

35:12.500 --> 35:13.620
redirected to

35:13.620 --> 35:14.980
这种跳转了

35:14.980 --> 35:17.220
tabber bar有一个专门的跳转方式

35:17.220 --> 35:18.260
叫做什么

35:18.260 --> 35:20.660
switch tabber

35:20.660 --> 35:22.580
它有一个这个

35:22.580 --> 35:24.820
那么利用这个进行跳转的话

35:24.820 --> 35:25.780
它就能过去

35:25.780 --> 35:27.380
现在我们继续来看

35:27.380 --> 35:29.220
这里边的东西有坑

35:29.220 --> 35:32.260
但是希望大家跟着这一步一步走

35:32.260 --> 35:34.580
看到坑 填坑

35:34.580 --> 35:35.700
点击

35:35.700 --> 35:36.820
咱们仔细看

35:36.820 --> 35:39.220
它到关于来了1234出来了

35:39.220 --> 35:41.460
咱们仔细看1234在哪

35:41.460 --> 35:42.500
在我about里面

35:42.500 --> 35:45.060
是不是这个页面上面有一个1234

35:45.060 --> 35:47.140
代表我已经出现了

35:47.140 --> 35:48.420
那么表示能不能过来

35:48.420 --> 35:49.700
好像能够过来了 对吧

35:49.780 --> 35:51.220
好 我们在这个页面

35:51.220 --> 35:52.820
我们需要去接收

35:52.820 --> 35:53.860
系统说了

35:53.860 --> 35:56.180
在我们的整个生命周期上面

35:56.180 --> 35:57.220
咱们都可以

35:57.220 --> 35:58.500
所以我们就拿它

35:58.500 --> 36:02.200
well amount

36:02.200 --> 36:05.680
well mount来做这个事

36:05.680 --> 36:07.040
在well mount上面

36:07.040 --> 36:12.080
我们这一边写上的是接收 对吧

36:12.080 --> 36:12.720
接收的话呢

36:12.720 --> 36:13.600
我们直接打印

36:13.600 --> 36:14.640
看一下这个部分

36:14.640 --> 36:16.400
接收其实挺简单

36:16.400 --> 36:18.960
conceler

36:19.920 --> 36:22.240
conceler

36:22.320 --> 36:27.240
点log

36:27.240 --> 36:28.520
那么接收语句呢

36:28.520 --> 36:29.560
我们刚才说了

36:29.560 --> 36:33.720
它是直接是可以通过我们的this点

36:33.720 --> 36:35.160
我们的router点

36:35.160 --> 36:36.520
我们的

36:36.520 --> 36:37.560
叫做什么

36:37.560 --> 36:39.560
paramise来完成的

36:39.560 --> 36:44.320
所以this点

36:44.320 --> 36:46.720
路由的params

36:46.720 --> 36:48.400
可以直接获取到的

36:48.400 --> 36:49.760
为了让它看清的话

36:49.760 --> 36:52.320
我们前面加一个文本提示

36:52.320 --> 36:54.080
它叫做paramise

36:54.080 --> 36:55.360
帽号

36:55.360 --> 36:56.240
这样写

36:56.240 --> 36:57.040
ok吧

36:57.040 --> 36:57.440
好

36:57.440 --> 36:58.880
当你这样写好以后的话

36:58.880 --> 37:00.240
我们继续回来

37:00.240 --> 37:01.600
我们看一下页面

37:01.600 --> 37:02.480
回到我前面

37:02.480 --> 37:04.000
咱们先不关心这个值

37:04.000 --> 37:05.040
我们关心它跳转

37:05.040 --> 37:06.800
能不能传直过去

37:06.800 --> 37:08.240
首先它已经过来了

37:08.240 --> 37:10.320
1234出来了

37:10.320 --> 37:11.920
咦

37:11.920 --> 37:13.280
没有吧

37:13.280 --> 37:15.600
这边没有去传这个值吧

37:15.600 --> 37:17.520
没有显示 对吧

37:17.520 --> 37:18.960
我们再回来看一下

37:18.960 --> 37:20.880
语法上这边没有爆错

37:20.880 --> 37:22.480
我们来看

37:22.480 --> 37:23.280
这边的话

37:23.280 --> 37:24.880
component well

37:24.880 --> 37:26.320
我们写mount

37:26.320 --> 37:30.400
不是卸载

37:30.400 --> 37:33.040
我们把它做在mount上面

37:33.040 --> 37:39.460
做在这个上面

37:39.460 --> 37:40.020
卸载

37:40.020 --> 37:41.700
当然现在它还没有卸载吧

37:41.700 --> 37:41.940
对吧

37:41.940 --> 37:42.500
我们看一下

37:42.500 --> 37:44.180
再来看一下

37:44.180 --> 37:46.340
点击跳过来了

37:46.340 --> 37:47.860
下面已经转换了

37:47.860 --> 37:48.580
看到吗

37:48.580 --> 37:50.340
params已经出来了

37:50.340 --> 37:51.220
但是呢

37:51.220 --> 37:53.300
它后面是一个空

37:53.300 --> 37:54.580
它后面是个空

37:54.580 --> 37:55.940
这是意味着什么

37:55.940 --> 37:58.340
意味着这个程序执行了

37:58.340 --> 38:00.340
这个生命周期也运行了

38:00.340 --> 38:03.460
但是没听到师父出职

38:03.460 --> 38:04.180
不对呀

38:04.260 --> 38:06.660
我们逻辑上是说能够接到的

38:06.660 --> 38:08.900
那为什么这样接不到呢

38:08.900 --> 38:09.780
我们注意

38:09.780 --> 38:12.020
这边我刻意搞大家

38:12.020 --> 38:16.580
这是一个不算大的隐藏坑

38:16.580 --> 38:18.340
是一个隐藏坑

38:18.340 --> 38:19.540
隐藏坑是什么概念

38:19.540 --> 38:21.860
是指它语法不会爆错

38:21.860 --> 38:23.220
从逻辑上来讲

38:23.220 --> 38:24.500
它也应该成立

38:24.500 --> 38:26.580
但它就没有这种效果

38:26.580 --> 38:28.180
那么说一下

38:28.180 --> 38:31.380
就是我们代参传书

38:31.380 --> 38:35.920
我们特别是通过这种叫做

38:36.000 --> 38:37.680
代路径的

38:37.680 --> 38:39.360
我们称之为查询字伏串

38:39.360 --> 38:41.760
英文叫做christine

38:41.760 --> 38:43.200
查询字伏串

38:43.200 --> 38:45.200
让它进行传说的时候

38:45.200 --> 38:46.480
要发生一个问题

38:46.480 --> 38:48.560
就是switch tabber

38:48.560 --> 38:51.440
在tab鍵之间切换的话

38:51.440 --> 38:56.080
它是无法进行数据传递的

38:56.080 --> 38:58.000
它不是页面的跳转

38:58.000 --> 38:59.040
刚才为什么我们说

38:59.040 --> 39:00.560
never get a trigger redirect trigger

39:00.560 --> 39:01.600
它都不能用

39:01.600 --> 39:03.760
因为对于底部来讲

39:03.840 --> 39:06.480
它并非是两个页面的跳转

39:06.480 --> 39:09.200
而是直接去打开这个页面

39:09.200 --> 39:10.960
你这个逻辑理解吗

39:10.960 --> 39:12.560
如果是跳转的话

39:12.560 --> 39:14.640
它为什么不能用never get a trigger

39:14.640 --> 39:17.280
它不存在于这种跳转的逻辑

39:17.280 --> 39:19.120
和内部的处理模型

39:19.120 --> 39:21.520
所以我们只能换成switch tabber

39:21.520 --> 39:22.800
而一换以后

39:22.800 --> 39:25.280
它只能够打开这个页面

39:25.280 --> 39:27.120
而不做任何的其他处理

39:27.120 --> 39:28.320
所以它就没有办法

39:28.320 --> 39:30.320
把后面ID2和type texture

39:30.320 --> 39:31.760
进传输过去

39:31.760 --> 39:34.000
那么这点就要确认一步操作了

39:34.000 --> 39:35.760
就是我们如果说

39:35.760 --> 39:37.760
现在你想完成这个功能的话

39:37.760 --> 39:41.360
你有两个实现方式

39:41.360 --> 39:42.320
第一种

39:42.320 --> 39:45.120
你把现在的tabba bar先删掉

39:45.120 --> 39:48.880
然后把现在的61行switch tabber

39:48.880 --> 39:51.600
你把它换成never get a trigger

39:51.600 --> 39:53.120
你来做数据传递

39:53.120 --> 39:56.400
这是我们页面中不用tabba bar的操作

39:56.400 --> 39:57.680
那么第二个方式

39:57.680 --> 39:59.520
你再见一个页面

39:59.520 --> 40:00.480
这个页面呢

40:00.480 --> 40:02.960
我们不放在现在的

40:02.960 --> 40:05.760
就是那个tabba bar的text pass里面

40:05.760 --> 40:06.480
也就是说

40:06.480 --> 40:08.720
它不能进行这方面的一个

40:08.720 --> 40:10.320
直接的页面转换

40:10.320 --> 40:11.440
那么这样就可以

40:11.440 --> 40:11.680
好

40:11.680 --> 40:12.720
我们给大家演示一下

40:12.720 --> 40:14.080
这两种方式都很快

40:14.080 --> 40:15.120
一会就好

40:15.120 --> 40:16.720
首先第一种方式

40:16.720 --> 40:19.280
我们直接把这个tabba bar给删了

40:19.280 --> 40:20.880
我们先改回来

40:20.880 --> 40:24.500
叫做never get a trigger

40:24.500 --> 40:25.540
然后保存掉

40:25.540 --> 40:26.340
第二步呢

40:26.340 --> 40:27.780
我们把这个tabba bar呢

40:27.780 --> 40:30.180
先删除它

40:30.180 --> 40:32.100
到这

40:32.100 --> 40:33.380
删除

40:33.380 --> 40:34.580
保存

40:34.580 --> 40:38.320
此时我们再来看

40:38.320 --> 40:39.760
打开

40:39.760 --> 40:40.640
下面是不是没有了

40:40.640 --> 40:42.000
tabba bar

40:42.000 --> 40:43.600
点击

40:43.600 --> 40:45.040
等我们的跳转

40:45.040 --> 40:46.080
看

40:46.080 --> 40:49.280
pyramus里面是不是接到纸了

40:49.280 --> 40:51.360
作为never get to

40:51.360 --> 40:54.000
它是一个重新打开的操作

40:54.000 --> 40:56.160
你能够接到这个纸

40:56.160 --> 40:57.280
那我们同时来

40:57.360 --> 40:58.480
一点返回的话

40:58.480 --> 41:00.000
当然它会掉起

41:00.000 --> 41:03.040
我们前一个页面的did a show

41:03.040 --> 41:05.120
同时我们再来看一下

41:05.120 --> 41:12.210
我们把它换成redirected to

41:12.210 --> 41:13.170
它是指

41:13.170 --> 41:14.850
当前页面的重定向

41:14.850 --> 41:21.220
而不是重新打开

41:21.220 --> 41:22.500
是不是也接到了

41:22.500 --> 41:24.100
所以这两种方式

41:24.100 --> 41:26.260
虽然是一种

41:26.260 --> 41:27.300
我们说

41:27.300 --> 41:28.500
最后的形式不一样

41:28.500 --> 41:30.980
但是它的确是做到了

41:30.980 --> 41:33.300
数据的页面跳转

41:33.300 --> 41:35.220
请记住switch tabber

41:35.220 --> 41:36.580
也就是我们的tabba bar

41:36.580 --> 41:39.940
它并非是我们所谓的页面打开

41:39.940 --> 41:43.140
而是直接是两个页面的切换

41:43.140 --> 41:44.740
是这个逻辑

41:44.740 --> 41:47.780
切换概念就不存在传直操作

41:47.780 --> 41:48.340
ok

41:48.340 --> 41:49.780
那么这边是说到了

41:49.780 --> 41:50.580
紧接着的话

41:50.580 --> 41:51.540
我们来注意

41:51.540 --> 41:52.740
那么如果你直接

41:52.740 --> 41:55.620
你说我非得用switch tabber

41:55.620 --> 41:56.900
在这个页面上有

41:56.900 --> 41:58.420
我还得进行跳转

41:58.420 --> 42:03.590
那么我们说never get to

42:03.590 --> 42:09.160
我们给它一个center

42:09.160 --> 42:09.960
对吧

42:09.960 --> 42:11.640
单独来到这边

42:11.640 --> 42:16.040
咱们在这个src的pader里面

42:16.040 --> 42:18.680
咱们在右键

42:18.680 --> 42:22.760
咱们创建一个center文件加出来

42:22.760 --> 42:24.840
然后在里面创建

42:24.840 --> 42:25.560
第一个

42:25.560 --> 42:28.760
我们的center.css

42:28.760 --> 42:34.610
第二个center里面再创建

42:34.610 --> 42:36.770
center.jsx

42:36.770 --> 42:38.370
创建这两个出来

42:38.370 --> 42:38.930
对吧

42:38.930 --> 42:40.370
然后前面做法

42:40.370 --> 42:41.730
css先不管

42:41.730 --> 42:43.010
然后这个做法是什么

42:43.010 --> 42:43.810
还记得吗

42:43.810 --> 42:45.410
我们自行来想

42:45.410 --> 42:46.290
我们讲过

42:46.290 --> 42:48.530
它里面最重要的一点是什么

42:48.530 --> 42:50.610
需要通过引入

42:50.610 --> 42:51.410
什么呢

42:51.410 --> 42:56.950
我们的tarrow和component

42:56.950 --> 42:59.670
因为我们根据我们的讲解

42:59.670 --> 43:01.510
和我们的官方文档

43:01.510 --> 43:02.710
都说明了

43:02.710 --> 43:04.230
每一个字页面

43:04.230 --> 43:06.870
本身都是一个我们修的

43:06.870 --> 43:09.270
tarrow的一个component的积累

43:09.270 --> 43:11.270
完成的一个字类对象

43:11.270 --> 43:12.790
完成这一步

43:12.790 --> 43:13.670
那么第二步呢

43:13.670 --> 43:15.030
我们说引入

43:15.030 --> 43:16.150
impart

43:16.150 --> 43:20.230
我们现在的取名

43:20.230 --> 43:22.070
我们直接是它叫做

43:22.070 --> 43:27.560
当前目录下的center.css

43:27.560 --> 43:29.960
你把这个引进来

43:29.960 --> 43:31.400
对吧

43:31.400 --> 43:36.320
然后我们需要完成

43:36.320 --> 43:38.080
对外接口的

43:38.080 --> 43:39.200
暴露

43:39.200 --> 43:40.240
是一个什么

43:40.240 --> 43:42.960
lay

43:42.960 --> 43:48.850
center

43:48.850 --> 43:51.330
component

43:51.330 --> 43:52.210
如果有同学

43:52.210 --> 43:53.490
不理解继承的话

43:53.490 --> 43:54.770
待会我给简单说一下

43:54.770 --> 43:57.330
因为这是面向对象的一个概念

43:57.330 --> 43:59.650
简单的理解为继承嘛

43:59.650 --> 44:01.650
由继承就是有父有子嘛

44:01.650 --> 44:02.290
对吧

44:02.290 --> 44:04.930
然后这里边你就是书写你的结构代码了

44:04.930 --> 44:06.530
那么主要的有哪些内容呢

44:06.530 --> 44:08.610
我们说这个是不能少

44:08.610 --> 44:09.490
对吧

44:09.490 --> 44:11.970
这个是不能少

44:11.970 --> 44:12.850
return

44:12.850 --> 44:14.290
然后里边你写上你的

44:14.290 --> 44:17.490
因为我没有引入我们的tarrow component

44:17.490 --> 44:17.890
所以呢

44:17.890 --> 44:21.090
我们这边就写个div

44:21.170 --> 44:24.130
里面写上abcd

44:24.130 --> 44:27.650
保存

44:27.650 --> 44:30.050
它有一个警告说是

44:30.050 --> 44:35.400
那个center.js没有被引用到

44:35.400 --> 44:36.280
没保存

44:36.280 --> 44:37.800
刚才这边是没有保存

44:37.800 --> 44:38.280
好了

44:38.280 --> 44:39.000
看

44:39.000 --> 44:40.360
正常情况有了

44:40.360 --> 44:41.400
现在的话呢

44:41.400 --> 44:42.440
我们来看一下

44:42.440 --> 44:44.120
如果它过来是abcd.e

44:44.120 --> 44:45.240
呈现出来的话

44:45.240 --> 44:46.200
那表示ok

44:46.200 --> 44:48.920
同时我们这边把刚才的那个复制过来

44:48.920 --> 44:49.160
好

44:49.160 --> 44:50.120
我们看一下

44:50.120 --> 44:51.960
现在是已经存在着

44:51.960 --> 44:53.720
章前的这个tabba

44:53.720 --> 44:58.160
我们对它进行点击

44:58.160 --> 44:58.720
嗯

44:58.720 --> 45:00.320
这边有一个

45:00.320 --> 45:03.360
它说没有找到center这个页面

45:03.360 --> 45:04.000
对吧

45:04.000 --> 45:06.400
我们来看一下

45:06.400 --> 45:10.770
它说center这个页面没找到

45:10.770 --> 45:13.010
我们进来看一下

45:13.010 --> 45:15.650
我们的位置

45:15.650 --> 45:17.970
center

45:17.970 --> 45:19.650
pader下面

45:19.650 --> 45:20.450
center对吧

45:20.450 --> 45:21.170
啊

45:21.170 --> 45:21.970
啥原因

45:21.970 --> 45:23.090
想起来了吧

45:23.090 --> 45:24.610
页面建立了

45:24.610 --> 45:27.330
然后我们现在的

45:27.490 --> 45:27.970
这是什么

45:27.970 --> 45:29.810
js插写好了

45:29.810 --> 45:32.850
但是微信是怎么样来识别

45:32.850 --> 45:35.570
这个位置的呢

45:35.570 --> 45:37.570
它是通过它来的

45:37.570 --> 45:38.690
通过js来的

45:38.690 --> 45:40.050
我们是不是在这没写

45:40.050 --> 45:41.250
对吧

45:41.250 --> 45:44.870
我们把它写一下

45:44.870 --> 45:47.190
它首先先从这来看

45:47.190 --> 45:50.290
你有没有这页面

45:50.290 --> 45:51.490
center

45:51.490 --> 45:51.810
哦

45:51.810 --> 45:52.050
你看

45:52.050 --> 45:52.530
哦

45:52.530 --> 45:54.530
一编译了一堆东西

45:54.530 --> 45:56.610
现在我们继续来看一下

45:56.610 --> 45:59.880
点击

45:59.880 --> 46:00.440
看到吗

46:00.440 --> 46:01.560
abcd.e出来了

46:01.560 --> 46:02.760
下面也没有了

46:02.760 --> 46:05.160
代表它现在的确完成了

46:05.160 --> 46:07.800
非tabba所指定页面的跳转

46:07.800 --> 46:09.240
那么接下去我们来看一下

46:09.240 --> 46:11.400
它是否可以获取到我们的值

46:11.400 --> 46:12.680
那么它的值得获取呢

46:12.680 --> 46:13.800
我们也一样

46:13.800 --> 46:16.920
我们直接通过我们的

46:16.920 --> 46:18.600
在我们的center.js里面

46:18.600 --> 46:21.000
去书写一下

46:21.000 --> 46:22.200
顺便就写了一个

46:22.200 --> 46:24.440
component

46:24.440 --> 46:32.960
component well mount

46:33.040 --> 46:36.400
然后console log

46:36.400 --> 46:37.840
我们写上

46:37.840 --> 46:39.760
这个是哪个页面

46:39.760 --> 46:43.760
center mount

46:43.760 --> 46:46.480
这样写center mount

46:46.480 --> 46:49.720
params

46:49.720 --> 46:50.600
好后面

46:50.600 --> 46:51.400
豆腐

46:51.400 --> 46:52.520
第四点

46:52.520 --> 46:53.800
怎么写

46:53.800 --> 46:57.080
rotor.params

46:57.080 --> 46:57.960
接收

46:57.960 --> 46:58.600
对吧

46:58.600 --> 47:02.680
我们再来看一下效果

47:02.680 --> 47:05.440
点击

47:05.440 --> 47:06.560
跳转过来了

47:06.560 --> 47:07.680
是否这边接收到了

47:07.680 --> 47:10.480
center mount params接收到效果数据了

47:10.480 --> 47:11.040
好

47:11.040 --> 47:12.080
那么这样的话呢

47:12.080 --> 47:13.280
我们就意味着

47:13.280 --> 47:15.360
我们通过现在的

47:15.360 --> 47:16.320
这个叫做

47:16.320 --> 47:18.240
this.rotor.params的方式

47:18.240 --> 47:19.280
就能直接

47:19.280 --> 47:20.880
接收到我们现在

47:20.880 --> 47:22.880
用户所在页面之间

47:22.880 --> 47:23.680
进行

47:23.680 --> 47:26.080
这种所谓的cresting的

47:26.080 --> 47:28.880
地址连接式的数据传递

47:28.880 --> 47:29.520
对吧

47:29.520 --> 47:31.280
我们回到我们的

47:31.280 --> 47:33.440
整个这一块上面来

47:33.440 --> 47:34.320
index里面

47:34.320 --> 47:36.240
这种拼接式的

47:36.400 --> 47:37.920
那么拼接式的特点呢

47:37.920 --> 47:39.040
我们说是

47:39.040 --> 47:40.880
接收起来比较方便

47:40.880 --> 47:42.960
但是这个数据不是写死的呗

47:42.960 --> 47:45.760
所以有时候我们是通过参数的方式

47:45.760 --> 47:47.440
或者全局的方式

47:47.440 --> 47:48.720
通过它传入

47:48.720 --> 47:50.400
然后进行拼接

47:50.400 --> 47:50.800
对吧

47:50.800 --> 47:52.960
让它进行拼接这样出来的

47:52.960 --> 47:53.520
当然

47:53.520 --> 47:54.560
我们有时候

47:54.560 --> 47:57.680
我们也会直接把这个值存储到

47:57.680 --> 47:58.480
我们双页面

47:58.480 --> 48:00.960
我们页面之间的数据传递有几种方式

48:00.960 --> 48:01.680
想想起来吗

48:01.680 --> 48:02.640
微信里面

48:02.640 --> 48:03.440
微信里面有几种

48:03.440 --> 48:04.000
第一种的话

48:04.000 --> 48:05.520
是通过我们刚才所写的这种

48:05.520 --> 48:07.520
叫做christin的方式来写的

48:07.520 --> 48:09.760
就是属于地址栏后面拼接

48:09.760 --> 48:10.720
第二种方式

48:10.720 --> 48:12.320
存入到全局对象

48:12.320 --> 48:13.280
global data里面

48:13.280 --> 48:14.560
然后global data存进去以后

48:14.560 --> 48:15.760
到另一个页面拿

48:15.760 --> 48:17.040
这样也是可以

48:17.040 --> 48:18.320
当然第三种方式

48:18.320 --> 48:19.600
如果我们有云数据的话

48:19.600 --> 48:20.720
我们把云里面存

48:20.720 --> 48:23.120
然后第二个页面从云里面去取

48:23.120 --> 48:23.840
对吧

48:23.840 --> 48:26.560
还有本地缓存

48:26.560 --> 48:27.920
我们还有本地缓存

48:27.920 --> 48:29.440
我们可以存到本地缓存中

48:29.440 --> 48:31.840
然后第二个页面从缓存中去取

48:31.840 --> 48:34.480
这样的方式都可以

48:34.560 --> 48:36.880
但是我们大家一定得掌握

48:36.880 --> 48:37.360
比如说

48:37.360 --> 48:39.680
因为这种方式是最常用

48:39.680 --> 48:41.600
也最简单

48:41.600 --> 48:43.680
那么我们在讲解这个过程中

48:43.680 --> 48:45.600
我们刚才一直言示的是

48:45.600 --> 48:46.960
如果说你出现了

48:46.960 --> 48:48.080
我们的switch tab

48:48.080 --> 48:49.440
这样一个概念的话

48:49.440 --> 48:51.360
那么它主要的是完成了

48:51.360 --> 48:55.040
所页面的显示跳转

48:55.040 --> 48:57.600
而不存在于页面的这样的过渡

48:57.600 --> 48:59.760
这种所谓的连接跳转过渡的话

48:59.760 --> 49:00.640
可以带参

49:00.640 --> 49:02.400
但switch tab带不了

49:02.400 --> 49:03.040
OK吧

49:03.120 --> 49:04.880
这个是我们刚才演示下来

49:04.880 --> 49:07.040
大家都应该看到的一个效果

49:07.040 --> 49:07.440
OK

49:07.440 --> 49:08.400
我们继续往下走

49:10.160 --> 49:10.720
注意

49:10.720 --> 49:13.040
我这边给大家讲完了这些东西

49:13.040 --> 49:14.960
你一定要在后期的时候

49:14.960 --> 49:16.320
去自己再演示一遍

49:16.320 --> 49:16.960
你别看我

49:16.960 --> 49:18.080
看好了

49:18.080 --> 49:19.360
然后你就知道了

49:19.360 --> 49:20.960
其实你在你写的过程中

49:20.960 --> 49:23.120
有可能你还会踩到其他的坑

49:23.120 --> 49:24.560
所以从这个角度来讲

49:24.560 --> 49:26.960
大家一定要去做一下

49:26.960 --> 49:29.680
不能说是直接看一下就可以了

49:29.680 --> 49:30.160
对吧

49:30.160 --> 49:30.400
好

49:30.400 --> 49:31.920
我们继续回来

49:31.920 --> 49:35.600
然后我们开始讲这页面的时间处理函数

49:35.600 --> 49:39.120
首先我们讲到的是unportable refresh

49:39.120 --> 49:40.320
unportable refresh

49:40.320 --> 49:42.160
它其实就是完成我们的

49:42.160 --> 49:44.400
用户下拉事件刷新的功能

49:44.400 --> 49:46.400
那么我们在做微信的

49:46.400 --> 49:47.840
刚才前面讲到过

49:47.840 --> 49:50.480
我们在我们的configure里面

49:50.480 --> 49:52.400
我们可以配置一个enable

49:52.400 --> 49:54.320
portable refresh下拉刷新

49:54.320 --> 49:55.440
但是这个下拉刷新

49:55.440 --> 49:57.520
它没有办法做到行为

49:57.520 --> 49:59.360
它只能是有样式

49:59.360 --> 50:00.800
它能给你看得挺漂亮

50:00.800 --> 50:01.840
要进行下拉

50:01.840 --> 50:02.320
对吧

50:02.320 --> 50:03.680
我们再回去

50:03.680 --> 50:05.360
它可以很漂亮的下拉

50:05.360 --> 50:07.280
但是里面啥都不会进行刷新

50:07.280 --> 50:08.960
而这个刷新动作

50:08.960 --> 50:10.880
就是我们刚刚大家所看到的

50:10.880 --> 50:13.840
它需要做在当前页面的一个叫做

50:13.840 --> 50:16.480
unportable refresh这个事件里面

50:16.480 --> 50:16.800
好

50:16.800 --> 50:19.360
我们把这个拿过来

50:19.360 --> 50:23.810
我们在这边运行一下

50:23.810 --> 50:25.410
放出来

50:25.410 --> 50:27.650
写注式

50:27.650 --> 50:35.060
就是下拉刷新的动作

50:35.380 --> 50:39.960
行为事件

50:39.960 --> 50:42.760
下拉刷新的动作行为事件

50:42.760 --> 50:43.320
好

50:43.320 --> 50:44.680
那么这边的话

50:44.680 --> 50:47.800
我们先做一个简单的告知

50:47.800 --> 50:50.120
它会在什么点上触发

50:50.120 --> 50:50.760
好吧

50:50.760 --> 50:51.800
我们在这里面写上

50:51.800 --> 50:52.680
比如说

50:52.680 --> 50:58.150
这是一个portable refresh

50:58.150 --> 50:59.510
begin

50:59.510 --> 51:00.550
已经触发了

51:00.550 --> 51:04.020
开始了

51:04.020 --> 51:04.260
好

51:04.260 --> 51:07.640
我们来看一下

51:07.640 --> 51:10.600
我们打开一下

51:10.600 --> 51:11.240
当前页面

51:11.240 --> 51:11.960
下拉

51:11.960 --> 51:12.520
看着

51:12.520 --> 51:13.400
下拉还没有

51:13.400 --> 51:14.120
鼠标还没放

51:14.120 --> 51:15.000
我这个鼠标没放

51:15.000 --> 51:16.520
我一放

51:16.520 --> 51:18.120
它立马就会出现这句话

51:18.120 --> 51:18.760
所以

51:18.760 --> 51:21.640
它是做在我手往下

51:21.640 --> 51:23.400
托的放以后

51:23.400 --> 51:25.800
这个放开的动作上面的事件

51:25.800 --> 51:27.640
它就出现了这句话

51:27.640 --> 51:28.840
是这个逻辑

51:28.840 --> 51:30.280
那么这个的话

51:30.280 --> 51:31.160
那么请大家注意

51:31.160 --> 51:33.320
我每次下拉的放开以后

51:33.320 --> 51:36.520
它都会触发这句

51:36.520 --> 51:37.880
那么我们看到

51:37.880 --> 51:38.520
这样的话

51:38.520 --> 51:40.920
我下拉在这边就会有效果了

51:40.920 --> 51:41.480
是吧

51:41.480 --> 51:43.320
我下拉以后就会有效果了

51:43.400 --> 51:44.680
我们已经把它下拉下来

51:44.680 --> 51:46.040
但是这里面有一点

51:46.040 --> 51:47.320
这里面很有意思

51:47.320 --> 51:48.760
也就是说

51:48.760 --> 51:50.120
它其实

51:50.120 --> 51:54.200
你的下拉的显示动作

51:54.200 --> 51:56.440
你下拉的显示动作

51:56.440 --> 51:57.800
和你现在

51:57.800 --> 52:00.360
你所看到的文字的显示

52:00.360 --> 52:02.840
它两之间没啥关系

52:02.840 --> 52:03.720
理解吧

52:03.720 --> 52:06.120
我这边下拉以后放掉

52:06.120 --> 52:07.080
它已经显示完了

52:07.080 --> 52:08.840
这边还在刷

52:08.840 --> 52:11.400
因为这个显示是独立的

52:11.400 --> 52:14.440
这个呈现的事件也是独立执行的

52:14.440 --> 52:17.880
他们只是我触发了这个功能的操作

52:17.880 --> 52:19.560
那么我们事件的话

52:19.560 --> 52:21.000
我们经常会发现

52:21.000 --> 52:22.680
我们在正常的开发过程中

52:22.680 --> 52:24.520
应该是下拉

52:24.520 --> 52:26.120
它会不断地加载

52:26.120 --> 52:26.680
对吧

52:26.680 --> 52:28.360
一旦加载成功了

52:28.360 --> 52:30.120
那么它立马这个应该是

52:30.120 --> 52:31.720
自己回收上去

52:31.720 --> 52:33.320
应该会回收上去

52:33.320 --> 52:34.200
那这种时候

52:34.200 --> 52:37.880
我们就应该主动地让它进行消失

52:37.880 --> 52:38.520
那么这里

52:38.520 --> 52:41.160
我们就可以打一行代码

52:41.160 --> 52:46.840
就是当它里面内容已经完成了

52:46.840 --> 52:50.120
那我们就应该在这边打上一个Stop

52:50.120 --> 52:51.080
注意

52:51.080 --> 52:54.120
在我们的Telo代码中

52:54.120 --> 52:55.320
我们的Telo中

52:55.320 --> 52:59.000
我们也可以直接使用微信的结构

52:59.000 --> 53:02.200
之前我们在这边用到的跳转语句

53:02.200 --> 53:03.720
我们就是Telo.Navigate

53:03.720 --> 53:04.040
对吧

53:04.040 --> 53:07.720
Telo.DirectTo

53:07.720 --> 53:09.400
那么我们如果要关闭

53:09.400 --> 53:11.000
我们其实是微信

53:11.000 --> 53:18.020
本身自己有一个叫做Stop

53:18.020 --> 53:19.220
虽然没有提示

53:19.220 --> 53:25.700
你可以打PullDownRefresh

53:25.700 --> 53:28.740
叫做停止你现在的

53:28.740 --> 53:32.100
我们的下拉刷新功能

53:32.100 --> 53:32.660
保存

53:32.660 --> 53:33.140
你看

53:33.140 --> 53:35.220
它是不会爆错的

53:35.220 --> 53:37.780
所以我这样的话就变成的是

53:37.780 --> 53:41.060
我现在只要一刷新下拉一放

53:41.060 --> 53:42.820
它把这句话一显示完

53:42.820 --> 53:43.620
立马

53:43.620 --> 53:45.700
你上面那个灰色的加的点

53:45.700 --> 53:47.460
它就收上去了

53:47.460 --> 53:48.580
是这个逻辑

53:48.580 --> 53:50.820
咱们来看一下

53:50.820 --> 53:52.420
一放

53:52.420 --> 53:53.220
哎呦

53:53.220 --> 53:54.820
它爆一个错对吧

53:54.820 --> 54:01.220
我们来解决一下

54:01.220 --> 54:05.760
我们这边微信点

54:05.760 --> 54:07.760
我们看一下是否有拼写错误

54:09.760 --> 54:10.640
Stop

54:10.640 --> 54:16.420
PullDownRefresh

54:16.420 --> 54:17.860
Shop

54:18.820 --> 54:21.540
我们打成了

54:21.540 --> 54:22.740
需要PullDown对吧

54:22.740 --> 54:25.140
到商店里去卖了

54:25.140 --> 54:25.860
再来看一下

54:25.860 --> 54:26.980
一拉

54:26.980 --> 54:27.780
一放

54:27.780 --> 54:29.140
它立马收上去了

54:29.140 --> 54:29.860
为什么呢

54:29.860 --> 54:32.420
因为它执行了这句显示以后

54:32.420 --> 54:33.460
关闭对吧

54:33.460 --> 54:34.580
看一放

54:34.580 --> 54:35.620
就收上去了

54:35.620 --> 54:37.700
表示它的刷新已经完成了

54:37.700 --> 54:38.740
所以这点注意

54:38.740 --> 54:40.020
我们这边也写上

54:40.020 --> 54:48.480
就是可以直接在Tarot代码中

54:48.560 --> 54:50.640
调用

54:50.640 --> 54:54.420
微信对象

54:54.420 --> 54:55.060
OK

54:55.060 --> 54:56.820
这是我们这边看到的

54:56.820 --> 54:59.780
然后我们这边实行了一个下拉刷新

54:59.780 --> 55:01.140
那么它的三套事件

55:01.140 --> 55:04.020
这边已经全部在写出来了

55:04.020 --> 55:05.540
这边EnablePullDownRefresh

55:05.540 --> 55:06.020
We true

55:06.020 --> 55:08.900
这边是UnpullDownRefresh的一个事件

55:08.900 --> 55:10.980
这边一个StopPullDownRefresh

55:10.980 --> 55:11.700
OK

55:11.700 --> 55:13.940
这是我们讲到的下拉刷新

55:13.940 --> 55:16.020
这是第一个的我们的

55:16.020 --> 55:18.820
叫做页面事件处理函数

55:18.900 --> 55:20.660
紧接着我们再往下看

55:20.660 --> 55:22.580
这边的Reach

55:22.580 --> 55:24.980
这边的UnreachButton

55:24.980 --> 55:28.180
UnreachButton就是上拉触底

55:28.180 --> 55:29.860
这个说法挺很有意思

55:29.860 --> 55:33.300
上拉其实就是页面往上滚

55:33.300 --> 55:36.580
触底就是喷到下面

55:36.580 --> 55:42.440
我们把它给写出来

55:42.440 --> 55:43.480
我们其实

55:43.480 --> 55:45.480
有些同学这个上面认识起来

55:45.480 --> 55:47.480
这个堵起来有点绕

55:47.480 --> 55:51.000
其实我们就把它写成为触底

55:51.080 --> 56:01.350
页面触底行为事件

56:01.350 --> 56:03.350
那么你需要做它的话

56:03.350 --> 56:05.350
一定我们前面有一个值得设定

56:05.350 --> 56:06.950
就是我们12行的

56:06.950 --> 56:09.270
UnreachButtonDistance

56:09.270 --> 56:11.750
Distance是距离Distance

56:11.750 --> 56:13.990
40是指的是px

56:13.990 --> 56:15.270
指的是向速

56:15.270 --> 56:16.390
那么它离底部

56:16.390 --> 56:18.150
只要你像我现在下拉

56:18.150 --> 56:21.190
下拉的话滚轴往下滚动的话

56:21.190 --> 56:23.110
屏幕往上成为向拉

56:23.110 --> 56:24.950
那碰到底部还有40

56:24.950 --> 56:26.230
我们的向速

56:26.230 --> 56:28.230
或者称之为距离的时候

56:28.230 --> 56:30.070
它就会触发我们现在

56:30.070 --> 56:31.510
这边所谓的一个事件

56:31.510 --> 56:33.110
就是触底事件

56:33.110 --> 56:39.270
我们看一下

56:39.270 --> 56:43.270
我们写上这个就是ReachButton

56:43.270 --> 56:47.430
我们就可以用它来完成下拉的下载操作

56:47.430 --> 56:50.310
或者称之为我们的一个加载操作

56:50.310 --> 56:52.070
这个都是OK的

56:52.070 --> 56:53.510
但是现在有个问题

56:53.510 --> 56:55.110
现在你没法拉

56:55.110 --> 56:57.270
你现在上面这个拉不算

56:57.270 --> 56:58.550
它是页面里面没法

56:58.550 --> 57:00.070
因为它高度不够

57:00.070 --> 57:01.590
所以我们看一下

57:01.590 --> 57:03.510
是不是我们在页面中你发现吗

57:03.510 --> 57:05.990
我们这边系统我们给了一个index

57:05.990 --> 57:08.390
但是你去到它的样式结构里面

57:08.390 --> 57:09.590
它又没有定义

57:09.590 --> 57:14.550
所以我们对它进行一个样式定义

57:14.550 --> 57:16.070
我们给它一高度

57:16.070 --> 57:17.030
行吧

57:17.030 --> 57:19.350
给它一个1400个rpx

57:19.350 --> 57:20.630
1400除2

57:20.630 --> 57:21.990
700个px向速高度

57:21.990 --> 57:23.110
肯定够了

57:23.110 --> 57:24.390
然后我们给它一个

57:24.390 --> 57:25.670
用大家能看得清的话

57:25.670 --> 57:27.590
我们给它一个background color

57:27.590 --> 57:28.310
背顶色

57:28.310 --> 57:30.230
我们就给一个红色

57:30.230 --> 57:31.590
非常明显

57:31.590 --> 57:33.910
大家能看到和白色区分

57:33.910 --> 57:34.790
保存掉

57:34.790 --> 57:39.040
然后的话我们再从页面来看

57:39.040 --> 57:39.840
对吧

57:39.840 --> 57:41.440
很长这个页面

57:41.440 --> 57:43.520
然后我们至少滚轴

57:43.520 --> 57:44.160
看到吗

57:44.160 --> 57:45.280
这边有滚轴出来了

57:45.280 --> 57:46.640
往下滚

57:46.640 --> 57:51.360
当它滚到下面离40的距离的时候

57:51.360 --> 57:52.480
它会去触发这个

57:52.480 --> 57:53.040
看到吗

57:53.040 --> 57:53.520
已经出来了

57:53.520 --> 57:54.080
再来看一下

57:54.080 --> 57:55.520
删掉

57:55.520 --> 57:57.440
往下滚

57:57.440 --> 57:58.080
一旦滚下去

57:58.080 --> 57:59.120
马上就出来

57:59.120 --> 57:59.760
对吧

57:59.760 --> 58:01.600
再滚一次就又出来了

58:01.600 --> 58:03.520
所以这样的话就意味着

58:03.520 --> 58:06.320
我只要滚动过程中接近于底部

58:06.320 --> 58:08.720
我就可以实现一个叫做

58:08.720 --> 58:10.640
我们的rich button的操作

58:10.640 --> 58:12.320
同时我们可以完成

58:12.320 --> 58:14.400
我们的一些刷新啊

58:14.400 --> 58:17.360
或者加载的一些概念

58:17.360 --> 58:17.760
对吧

58:17.760 --> 58:18.800
这样的过程

58:18.800 --> 58:19.200
OK

58:19.200 --> 58:24.050
我们就可以直接在这里面去输写

58:24.050 --> 58:28.610
我们并不需要在这边直接完成conceler

58:28.610 --> 58:29.410
铺的效果

58:29.410 --> 58:30.610
大家能看得清一下

58:30.610 --> 58:31.970
首先呢

58:31.970 --> 58:34.130
比如说正在加载中这样的一个效果

58:34.130 --> 58:36.290
首先我们在这上面

58:36.290 --> 58:38.770
我们写一个view

58:38.770 --> 58:43.890
我们底部做一个简单的view

58:43.890 --> 58:44.450
然后呢

58:44.450 --> 58:45.250
我们定一个

58:45.250 --> 58:46.370
注意哦

58:46.370 --> 58:48.530
在我们现在tarrow中的话呢

58:48.530 --> 58:51.250
你的类名一定要写成是class name

58:51.250 --> 58:52.290
你不能写class

58:52.290 --> 58:53.170
原因很简单

58:53.170 --> 58:57.060
class它自己是保留字

58:57.060 --> 58:59.880
fixed the button

58:59.880 --> 59:00.760
它是保留字

59:00.760 --> 59:02.680
你所以要写class name

59:02.680 --> 59:03.400
然后这边呢

59:03.400 --> 59:04.280
我们写上

59:04.280 --> 59:08.580
this.stater.loading

59:09.540 --> 59:11.380
就写上这样一个内容

59:11.380 --> 59:12.580
down

59:12.580 --> 59:14.100
在微信里面是双

59:14.100 --> 59:16.100
在它这边是down

59:16.100 --> 59:16.820
然后的话呢

59:16.820 --> 59:17.540
这样写好

59:17.540 --> 59:19.060
然后第二步呢

59:19.060 --> 59:28.230
我们去到当前的stater出来

59:28.230 --> 59:31.320
stater

59:31.320 --> 59:35.990
咱们写出loading

59:35.990 --> 59:37.910
还有内容

59:37.910 --> 59:40.310
就下面让它呈现

59:40.310 --> 59:41.190
然后此时呢

59:41.190 --> 59:44.310
我们一旦现在让它进行

59:44.310 --> 59:46.070
一旦碰到这个部分的时候

59:46.070 --> 59:48.150
让它直接把这个改掉

59:48.150 --> 59:49.270
当前的

59:51.430 --> 59:56.390
set stater

59:56.390 --> 59:57.190
loading

59:57.190 --> 59:57.670
显示

59:59.350 --> 01:00:03.920
加载中

01:00:03.920 --> 01:00:04.720
这样是可以了

01:00:04.720 --> 01:00:05.200
但是呢

01:00:05.200 --> 01:00:06.480
样式我们简单的

01:00:06.480 --> 01:00:07.920
稍微给一给啊

01:00:07.920 --> 01:00:09.120
不给样式的话

01:00:09.120 --> 01:00:10.000
这个

01:00:10.000 --> 01:00:11.920
我们希望它在中间

01:00:11.920 --> 01:00:12.880
位置上

01:00:12.880 --> 01:00:15.680
首先我们要固定它在底部

01:00:15.680 --> 01:00:16.240
所以呢

01:00:16.240 --> 01:00:18.400
我们给它一个fixed

01:00:18.400 --> 01:00:20.960
然后底部离底部多少距离呢

01:00:20.960 --> 01:00:22.560
零

01:00:22.560 --> 01:00:23.520
再往下

01:00:23.520 --> 01:00:24.400
它的宽度

01:00:24.400 --> 01:00:26.560
我们给它的是百分百

01:00:26.560 --> 01:00:27.520
然后高度呢

01:00:27.520 --> 01:00:30.480
我们给它一个50rpx吧

01:00:30.480 --> 01:00:31.760
就是25的高度

01:00:31.760 --> 01:00:32.400
对吧

01:00:32.400 --> 01:00:33.040
然后呢

01:00:33.040 --> 01:00:35.120
我们背景色给它一个白色

01:00:35.120 --> 01:00:35.840
因为我的

01:00:35.840 --> 01:00:37.040
其他的背景色是一个

01:00:38.080 --> 01:00:38.880
红色对吧

01:00:38.880 --> 01:00:40.160
必须让它看得见

01:00:40.160 --> 01:00:41.040
然后字体呢

01:00:42.800 --> 01:00:44.720
我们给它一个gray

01:00:45.600 --> 01:00:46.160
然后呢

01:00:46.160 --> 01:00:47.360
我们给一个文本

01:00:47.360 --> 01:00:48.000
让它聚中

01:00:48.000 --> 01:00:48.560
就可以了

01:00:49.680 --> 01:00:50.000
好了

01:00:50.160 --> 01:00:51.600
样式就这样写好

01:00:51.600 --> 01:00:52.800
那我们来看一下页面啊

01:00:54.160 --> 01:00:54.560
刷新

01:00:55.360 --> 01:00:56.160
出现在中间

01:00:56.160 --> 01:00:57.120
还有内容

01:00:57.120 --> 01:00:57.840
对吧

01:00:57.840 --> 01:00:58.640
然后往下拉

01:00:58.640 --> 01:00:59.360
往下拉

01:00:59.360 --> 01:01:01.520
当它碰到40触发这个事件

01:01:01.520 --> 01:01:02.560
这里冒出那个

01:01:02.560 --> 01:01:04.080
叫做自己的时候

01:01:04.080 --> 01:01:05.120
它的一码这个会变

01:01:05.760 --> 01:01:06.560
对吧

01:01:06.560 --> 01:01:07.680
冒出来了

01:01:07.680 --> 01:01:10.160
就是这个这个reach button

01:01:10.160 --> 01:01:11.040
然后它告诉你

01:01:11.040 --> 01:01:13.280
现在老顶就变成的是加载中

01:01:13.920 --> 01:01:14.560
是不是

01:01:14.560 --> 01:01:16.160
这个加载中就出来了

01:01:16.160 --> 01:01:17.440
并且你会发现

01:01:17.440 --> 01:01:19.040
will uploader

01:01:19.040 --> 01:01:19.760
代表什么呢

01:01:20.080 --> 01:01:22.000
它是一个我们的变化

01:01:22.000 --> 01:01:23.120
一旦变化过程中

01:01:23.120 --> 01:01:24.320
有加载中就出来了

01:01:26.000 --> 01:01:26.400
是吧

01:01:26.400 --> 01:01:27.040
这样的话呢

01:01:27.040 --> 01:01:27.760
是不是说

01:01:27.760 --> 01:01:28.960
我们这块内容

01:01:28.960 --> 01:01:31.760
它只要你下面加载完成了

01:01:31.760 --> 01:01:33.200
我们就可以在它里面

01:01:33.200 --> 01:01:35.200
再对它进行一个所谓的隐藏

01:01:35.920 --> 01:01:37.520
对它进行隐藏就可以了

01:01:38.880 --> 01:01:40.800
是不是这样的一个功能就实现了

01:01:40.800 --> 01:01:42.800
我们现在的一个简单的

01:01:42.800 --> 01:01:44.160
就是下拉的

01:01:44.160 --> 01:01:45.760
我们借助于什么呢

01:01:45.760 --> 01:01:48.160
借助于它当前的一个事件

01:01:48.160 --> 01:01:49.280
页面事件

01:01:49.280 --> 01:01:50.880
叫做reach button

01:01:51.840 --> 01:01:52.480
好

01:01:52.480 --> 01:01:53.040
紧接着

01:01:53.040 --> 01:01:53.840
我们继续往下看

01:01:55.940 --> 01:01:56.580
下面还有

01:01:57.140 --> 01:01:58.660
那么我们先休息一下

01:01:58.660 --> 01:01:59.860
我们待会继续开始

01:01:59.860 --> 01:02:00.820
我们的on-scholar

