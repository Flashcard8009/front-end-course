WEBVTT

00:00.000 --> 00:02.000
好 我们进去讲解Tarot series的课程

00:02.000 --> 00:05.000
这对课呢 给大家讲解一下Render Purpose

00:05.000 --> 00:08.000
Render Purpose呢 对于我们很多的同学来讲呢

00:08.000 --> 00:13.000
首先看到Render 它是一个我们的JSA的数据反回结构

00:13.000 --> 00:15.000
然后有个Purpose 那么这样的话呢

00:15.000 --> 00:17.000
Purpose是一个属性 对吧

00:17.000 --> 00:20.000
那么它其实呢 是一种结合

00:20.000 --> 00:21.000
我们来看一下

00:21.000 --> 00:24.000
它其实用一句话就能解释它的内容

00:24.000 --> 00:27.000
Render Purpose呢 是指在一个Tarot组件之间

00:27.000 --> 00:30.000
它使用了一个值 注意一下

00:30.000 --> 00:33.000
它是为什么呢 它是一种函数

00:33.000 --> 00:35.000
我们的Purpose 本身自己呢

00:35.000 --> 00:38.000
应该原来是一个简单的一个数类型

00:38.000 --> 00:40.000
但是它呢 使用了一个函数

00:40.000 --> 00:42.000
这种函数呢 它的特点是可以

00:42.000 --> 00:45.000
让我们的一些代码 或者称之为

00:45.000 --> 00:48.000
我们的一些数据

00:48.000 --> 00:52.000
能够在 比如说 两个组件

00:52.000 --> 00:54.000
它可以在两个组件之间

00:54.000 --> 00:57.000
共享这个数据

00:57.000 --> 00:59.000
A组件有这个数据

00:59.000 --> 01:02.000
它可以把这个数据共享给B组件

01:02.000 --> 01:05.000
这种结构 我们称之为叫Render Purpose

01:05.000 --> 01:07.000
那么同时呢 我们讲

01:07.000 --> 01:10.000
它会反回 同时它接收的

01:10.000 --> 01:13.000
注意一下 就是我们一般性的Purpose

01:13.000 --> 01:14.000
就是我们刚才说的

01:14.000 --> 01:16.000
它是一个简单的自付串

01:16.000 --> 01:18.000
或者说是一个数值

01:18.000 --> 01:19.000
或者是布尔类型的等价

01:19.000 --> 01:20.000
与简单数据类型

01:20.000 --> 01:22.000
它接收一个函数

01:22.000 --> 01:25.000
所以我们在写这样的标签的时候

01:25.000 --> 01:30.910
比如说 我们写Dialogue

01:30.910 --> 01:33.910
你后面所给的 比如说PROP简单的举名

01:33.910 --> 01:36.910
它后面等于后面的这一串内容

01:36.910 --> 01:40.350
它是一个函数

01:40.350 --> 01:42.350
所以这种函数结构的话

01:42.350 --> 01:44.350
我们就可以把它作为一种

01:44.350 --> 01:46.350
共享代码基础来实现

01:46.350 --> 01:48.350
那么 干函数它反回的

01:48.350 --> 01:51.350
它并非是直接是一个值

01:51.350 --> 01:53.350
而是可以直接完成另一个

01:53.350 --> 01:55.350
自己的逻辑业务处理的函数题

01:55.350 --> 01:57.350
那么这样的话

01:57.350 --> 01:59.350
就可以帮助我们完成

01:59.350 --> 02:01.350
不同的组件之间的

02:01.350 --> 02:03.350
数据的操作

02:03.350 --> 02:05.350
那么这个操逻辑上听起来

02:05.350 --> 02:06.350
好像有点绕

02:06.350 --> 02:08.350
但是其实你只要把代码

02:08.350 --> 02:09.350
打出来的话

02:09.350 --> 02:10.350
大家一看代码

02:10.350 --> 02:11.350
你就会非常明确

02:11.350 --> 02:12.350
它是一个什么样的结构

02:12.350 --> 02:14.350
并且在Taro中

02:14.350 --> 02:15.350
它的实现

02:15.350 --> 02:17.350
依然是用我们的类组件的方式

02:17.350 --> 02:18.350
来做

02:18.350 --> 02:20.350
这个也是比较方便的一种结构

02:20.350 --> 02:21.350
好了 我们现在

02:21.350 --> 02:22.350
给大家来演示一下

02:22.350 --> 02:24.350
什么叫做Render Purpose

02:24.350 --> 02:25.350
那么并且呢

02:25.350 --> 02:27.350
告诉大家怎么在我们的

02:27.350 --> 02:28.350
propert

02:28.350 --> 02:30.350
就是我们的组件里面

02:30.350 --> 02:32.350
去形成我们的一个

02:32.350 --> 02:34.350
非常有意思的

02:34.350 --> 02:36.350
函数式写法

02:36.350 --> 02:38.350
首先我们建立一个

02:38.350 --> 02:40.350
主文件

02:40.350 --> 02:44.240
我们在里面建立一个

02:44.240 --> 02:48.510
mouse

02:48.510 --> 02:50.510
truck

02:50.510 --> 02:52.510
鼠标的一个移动

02:52.510 --> 02:53.510
抓取

02:53.510 --> 02:54.510
我们想做的就是

02:54.510 --> 02:56.510
当你鼠标在移动

02:56.510 --> 02:57.510
我们可以得出它的

02:57.510 --> 02:59.510
x轴和y轴的这样一个功能

02:59.510 --> 03:00.510
所以呢

03:00.510 --> 03:01.510
我们给出一个

03:01.510 --> 03:02.510
mouse track

03:02.510 --> 03:03.510
综技嘛

03:03.510 --> 03:07.040
来

03:07.040 --> 03:10.540
mouse tracker

03:10.540 --> 03:13.540
我们这边给一个后坠

03:13.540 --> 03:20.660
我们给一个后坠

03:20.660 --> 03:21.660
然后呢

03:21.660 --> 03:22.660
我们在里面

03:22.660 --> 03:24.660
把结构打出来

03:24.660 --> 03:25.660
import

03:25.660 --> 03:26.660
taro

03:26.660 --> 03:39.530
import

03:39.530 --> 03:42.030
view

03:42.030 --> 03:49.310
component

03:49.310 --> 03:53.480
expert

03:53.480 --> 03:55.480
default

03:55.480 --> 03:57.480
class

03:57.480 --> 04:04.250
mouse trace

04:04.250 --> 04:05.250
然后我们后面

04:05.250 --> 04:06.250
跟上的是

04:06.250 --> 04:07.250
component

04:07.250 --> 04:16.670
random

04:16.670 --> 04:23.530
return

04:23.530 --> 04:25.530
view

04:25.530 --> 04:26.530
大结构

04:26.530 --> 04:28.530
这是一个最简单的

04:28.530 --> 04:29.530
mouse trace

04:29.530 --> 04:30.530
然后我们简单的

04:30.530 --> 04:43.890
把名称写一下

04:43.890 --> 04:45.890
mouse trace

04:45.890 --> 05:02.960
我们把它引用一下

05:02.960 --> 05:08.260
mouse trace

05:08.260 --> 05:09.260
好

05:09.260 --> 05:13.910
看一下界面

05:13.910 --> 05:14.910
mouse trace的

05:14.910 --> 05:16.910
主页面出来了

05:16.910 --> 05:17.910
接着

05:17.910 --> 05:19.910
我们想对它去使用

05:19.910 --> 05:20.910
第一个

05:20.910 --> 05:22.910
我们建立一个mouse的

05:22.910 --> 05:23.910
组建

05:23.910 --> 05:31.220
mouse

05:31.220 --> 05:38.210
创建mouse文件

05:38.210 --> 05:39.210
在mouse组建里面

05:39.210 --> 05:42.210
依然把我们刚才的前面的两本

05:42.210 --> 05:43.210
import一句

05:43.210 --> 05:44.210
两行

05:44.210 --> 05:50.300
拿过来

05:50.300 --> 05:51.300
然后呢

05:51.300 --> 05:52.300
在这里面

05:52.300 --> 05:53.300
我们去

05:53.300 --> 05:55.300
继续创建我们的

05:55.300 --> 05:56.300
component的集合

05:56.300 --> 05:57.300
我们把整个这个

05:57.300 --> 05:59.300
也搬过来修改

05:59.300 --> 06:01.300
把这个改一下

06:01.300 --> 06:05.270
然后

06:05.270 --> 06:12.490
这边是mouse

06:12.490 --> 06:13.490
OK

06:13.490 --> 06:14.490
那么

06:14.490 --> 06:16.490
在这个基础上面呢

06:16.490 --> 06:19.930
我们这边需要额外加

06:19.930 --> 06:21.930
constructure

06:21.930 --> 06:23.930
它接收所有参数

06:23.930 --> 06:31.490
super

06:31.490 --> 06:35.930
把所有参数给到我们的

06:35.930 --> 06:37.930
复累

06:37.930 --> 06:38.930
进接着

06:38.930 --> 06:43.300
我们在当前的数据里面

06:43.300 --> 06:45.300
咱们建一个stator

06:45.300 --> 06:50.830
先给它一个初始值

06:50.830 --> 06:52.830
比如说x等于0

06:52.830 --> 06:54.830
y等于0

06:54.830 --> 06:55.830
这样写

06:55.830 --> 07:01.620
然后你把数值给好以后的话

07:01.620 --> 07:02.620
那么进接着

07:02.620 --> 07:03.620
我们就可以去写

07:03.620 --> 07:07.950
你现在的一个展示页面

07:07.950 --> 07:09.950
它的展示页面呢

07:09.950 --> 07:10.950
我们是这样做

07:10.950 --> 07:11.950
首先呢

07:11.950 --> 07:13.950
我们这边给出它的一个

07:13.950 --> 07:14.950
样式

07:14.950 --> 07:16.950
我们直接在这里面写

07:16.950 --> 07:17.950
那么写的方式呢

07:17.950 --> 07:22.670
我们就直接使用

07:22.670 --> 07:33.410
height

07:33.410 --> 07:34.410
我们

07:34.410 --> 07:36.410
hidheight

07:37.410 --> 07:38.410
100%

07:38.410 --> 07:42.550
同时

07:42.550 --> 07:45.550
它有一个单击事件

07:45.550 --> 07:46.550
这个单击事件呢

07:46.550 --> 07:51.120
我们给它一个当前的

07:51.120 --> 07:53.120
写一个click

07:53.120 --> 07:56.120
我们在上面补权一个click

07:56.120 --> 08:02.700
传参进入

08:02.700 --> 08:05.260
当然

08:05.260 --> 08:06.260
我们如果这样的话

08:06.260 --> 08:07.260
标准的结构

08:07.260 --> 08:08.260
我们可以在这边

08:08.260 --> 08:11.260
给它做一个disk的绑定定义

08:11.260 --> 08:15.640
disk.handle

08:16.640 --> 08:17.640
click

08:17.640 --> 08:36.060
我们写一个

08:36.060 --> 08:38.060
我们把这个写好

08:38.060 --> 08:39.060
然后呢

08:39.060 --> 08:40.060
我们现在

08:40.060 --> 08:41.060
请注意

08:41.060 --> 08:42.060
我们现在的话呢

08:42.060 --> 08:44.060
我们在这里边

08:44.060 --> 08:46.060
就是我们在呈现在这里边

08:46.060 --> 08:48.060
我们要写一个内容

08:48.060 --> 08:49.060
这个内容是什么

08:49.060 --> 08:50.060
这个内容其实是

08:50.060 --> 08:51.060
我现在

08:51.060 --> 08:53.060
在主调里面

08:53.060 --> 08:55.060
所需要给出的

08:55.060 --> 08:56.060
一个所谓的

08:56.060 --> 08:58.060
函数体结构

08:58.060 --> 08:59.060
是在主调里面

08:59.060 --> 09:01.060
所给出的一个函数体结构

09:01.060 --> 09:02.060
是这样的

09:02.060 --> 09:04.060
我现在需要把它引入进来

09:04.060 --> 09:05.060
也就是我这里边

09:05.060 --> 09:06.060
你可以写一个

09:06.060 --> 09:07.060
随便写一个什么东西

09:07.060 --> 09:08.060
然后呢

09:08.060 --> 09:09.060
你看着

09:09.060 --> 09:11.060
我需要把当前的这个组件

09:11.060 --> 09:13.060
放置到当前的

09:13.060 --> 09:15.060
这个引用上面来

09:15.060 --> 09:17.060
但是在这个组件里面

09:17.060 --> 09:19.060
我们需要单写一个函数

09:19.060 --> 09:20.060
我们先引进来

09:20.060 --> 09:27.250
mouse

09:27.250 --> 09:28.250
点点杠点点杠

09:28.250 --> 09:29.250
component下面的

09:29.250 --> 09:32.250
我们的叫做

09:32.250 --> 09:34.560
mouse

09:34.560 --> 09:36.560
下面的mouse

09:36.560 --> 09:39.560
然后我就把这mouse写在这

09:39.560 --> 09:41.560
mouse

09:41.560 --> 09:44.560
这个mouse的话呢

09:44.560 --> 09:47.560
我们写一个属性

09:47.560 --> 09:48.560
叫做

09:48.560 --> 09:50.560
randocat

09:50.560 --> 09:51.560
请注意

09:51.560 --> 09:53.560
这个randocat

09:53.560 --> 09:54.560
是一个属性

09:54.560 --> 09:55.560
我们在后面

09:55.560 --> 09:57.560
我们要给它一个

09:57.560 --> 09:59.560
匿名函数体

09:59.560 --> 10:01.940
主要

10:01.940 --> 10:02.940
我们这个匿名函数

10:02.940 --> 10:04.940
它接收一个参数

10:05.940 --> 10:06.940
mouse

10:06.940 --> 10:09.760
它的

10:09.760 --> 10:10.760
方法体

10:10.760 --> 10:13.970
是一个

10:13.970 --> 10:15.970
DXX表达式

10:15.970 --> 10:16.970
而这个DXX

10:16.970 --> 10:17.970
其实

10:17.970 --> 10:19.970
它是另一个

10:19.970 --> 10:20.970
组件

10:20.970 --> 10:29.910
它是另一个组件

10:29.910 --> 10:31.910
形成一个什么结构呢

10:31.910 --> 10:32.910
mouse

10:32.910 --> 10:33.910
我看等会儿写

10:33.910 --> 10:34.910
就是

10:34.910 --> 10:35.910
我现在要用

10:35.910 --> 10:36.910
它当前的这个

10:36.910 --> 10:37.910
randocat属性的时候

10:37.910 --> 10:38.910
它其实

10:38.910 --> 10:40.910
完完整整是这么一套

10:40.910 --> 10:42.910
它是这么一套

10:42.910 --> 10:44.910
它要传一个mouse过来

10:44.910 --> 10:46.910
这个mouse需要作为

10:46.910 --> 10:48.910
数据传进来以后

10:48.910 --> 10:49.910
作为

10:49.910 --> 10:50.910
第二个组件的

10:50.910 --> 10:52.910
第二个组件的参数

10:52.910 --> 10:54.910
再传进去

10:54.910 --> 10:55.910
这样的结构

10:55.910 --> 10:57.910
那么这样的话呢

10:57.910 --> 10:58.910
我们就需要

10:58.910 --> 11:00.910
来做一个事情了

11:00.910 --> 11:02.910
首先

11:02.910 --> 11:03.910
你如果说

11:03.910 --> 11:05.910
是形成这样的一个

11:05.910 --> 11:06.910
结构体的话

11:06.910 --> 11:08.910
那么我在我

11:08.910 --> 11:10.910
组件内部

11:10.910 --> 11:11.910
需要调用

11:11.910 --> 11:13.910
当前的这个操作的时候

11:13.910 --> 11:15.910
直接可以完成

11:15.910 --> 11:17.910
像寒树体一样的调用

11:17.910 --> 11:19.910
请进来看

11:19.910 --> 11:20.910
首先mouse里面

11:20.910 --> 11:21.910
randocat

11:21.910 --> 11:23.910
用它的时候怎么玩

11:23.910 --> 11:25.910
我们到这边来

11:25.910 --> 11:29.930
我们到这个mouse里面来

11:29.930 --> 11:31.930
当前的froppers

11:31.930 --> 11:32.930
这个没有问题

11:32.930 --> 11:33.930
点

11:33.930 --> 11:34.930
后面的这个

11:34.930 --> 11:35.930
也就是它能跑到

11:35.930 --> 11:36.930
我们当前的这个

11:36.930 --> 11:37.930
它得到的是什么

11:37.930 --> 11:38.930
它得到的完完整整

11:38.930 --> 11:39.930
是这个寒树

11:39.930 --> 11:41.930
它得到这个寒树的时候

11:41.930 --> 11:42.930
其实

11:42.930 --> 11:43.930
我们可以通过

11:43.930 --> 11:44.930
我们的randocat

11:44.930 --> 11:45.930
一个写法

11:45.930 --> 11:46.930
就是小过号

11:46.930 --> 11:48.930
寒树调用体结构

11:48.930 --> 11:50.930
然后完成整个

11:50.930 --> 11:51.930
这个寒树的

11:51.930 --> 11:52.930
这个mouse的

11:52.930 --> 11:53.930
值的载入

11:53.930 --> 11:55.930
而这个mouse的值呢

11:55.930 --> 11:56.930
我们就把当前的

11:56.930 --> 11:58.930
这个distanceStator值

11:58.930 --> 11:59.930
全部放进去

11:59.930 --> 12:00.930
distance

12:00.930 --> 12:02.930
state

12:02.930 --> 12:04.930
这样写

12:04.930 --> 12:05.930
你就这样写

12:05.930 --> 12:07.930
这样的好处是值

12:07.930 --> 12:08.930
我现在从我们

12:08.930 --> 12:09.930
这段代码来看

12:09.930 --> 12:10.930
你的感觉就是

12:10.930 --> 12:12.930
我去调用了一个

12:12.930 --> 12:14.930
叫做randocat的寒树

12:14.930 --> 12:15.930
这个寒树传入了

12:15.930 --> 12:17.930
一个叫distanceStator

12:17.930 --> 12:18.930
这样的一个

12:18.930 --> 12:19.930
参数

12:19.930 --> 12:20.930
是吧

12:20.930 --> 12:21.930
然后呢

12:21.930 --> 12:22.930
我们回到页面中

12:22.930 --> 12:23.930
页面中呢

12:23.930 --> 12:24.930
一旦你把这个

12:24.930 --> 12:25.930
参数传入以后

12:25.930 --> 12:27.930
或者是给到以后的话

12:27.930 --> 12:28.930
那randocat

12:28.930 --> 12:29.930
它指向的

12:29.930 --> 12:31.930
就是当前这个寒树

12:31.930 --> 12:33.930
所以你给的distanceStator

12:33.930 --> 12:34.930
它就会把

12:34.930 --> 12:36.930
作为这个mouse对象来接收

12:36.930 --> 12:37.930
而mouse对象

12:37.930 --> 12:39.930
又会把这个distanceStator

12:39.930 --> 12:40.930
里面的所有值

12:40.930 --> 12:42.930
给到cat的这个mouse属性

12:42.930 --> 12:43.930
对吧

12:43.930 --> 12:44.930
那么接下去

12:44.930 --> 12:45.930
你就要看

12:45.930 --> 12:46.930
这个cat

12:46.930 --> 12:48.930
里面做什么事情了

12:48.930 --> 12:49.930
理解吧这逻辑

12:49.930 --> 12:50.930
好

12:50.930 --> 12:51.930
那我们来看一下

12:51.930 --> 12:58.380
我们再建一个

12:58.380 --> 13:01.650
cat

13:01.650 --> 13:02.650
新建

13:03.650 --> 13:04.650
cat

13:04.650 --> 13:10.420
taro

13:10.420 --> 13:15.070
把前面的拿过来

13:15.070 --> 13:33.770
改一改

13:33.770 --> 13:39.730
接下去

13:39.730 --> 13:40.730
我们来做里面

13:40.730 --> 13:42.730
首先

13:42.730 --> 13:43.730
鼠标

13:43.730 --> 13:44.730
本身自己的一个

13:44.730 --> 13:46.730
xy走的mouse值

13:46.730 --> 13:47.730
我们可以对它

13:47.730 --> 13:48.730
进行一个

13:48.730 --> 13:50.730
default properties

13:50.730 --> 13:56.860
default properties

13:56.860 --> 13:57.860
是一个

13:57.860 --> 13:59.860
默认值的设定

13:59.860 --> 14:00.860
mouse

14:00.860 --> 14:01.860
我们给出

14:01.860 --> 14:02.860
它里面两个值

14:02.860 --> 14:04.860
x等于0

14:04.860 --> 14:06.860
y等于0

14:06.860 --> 14:07.860
这是默认值

14:07.860 --> 14:08.860
第2个

14:08.860 --> 14:13.200
randar

14:13.200 --> 14:14.200
第2个randar

14:14.200 --> 14:17.200
conster

14:17.200 --> 14:18.200
mouse

14:18.200 --> 14:19.200
等于

14:19.200 --> 14:22.200
当前的prepare

14:22.200 --> 14:26.150
首先我们把当前

14:26.150 --> 14:27.150
你一旦要调用的

14:27.150 --> 14:28.150
所有的prepare

14:28.150 --> 14:29.150
这个prepare

14:29.150 --> 14:30.150
是指谁

14:30.150 --> 14:31.150
我们待会儿

14:31.150 --> 14:32.150
注释写一下

14:32.150 --> 14:33.150
它是指的是

14:33.150 --> 14:34.150
这个mouse

14:34.150 --> 14:36.150
和它这里面的xy值

14:36.150 --> 14:38.150
全部接进来

14:38.150 --> 14:39.150
只不过

14:39.150 --> 14:41.150
我们用了一个定名

14:41.150 --> 14:42.150
也就是说

14:42.150 --> 14:43.150
我只要它里面的mouse

14:43.150 --> 14:44.150
所以就是

14:44.150 --> 14:45.150
这个部分内容

14:45.150 --> 14:46.150
是不是进来了

14:46.150 --> 14:47.150
这部分

14:47.150 --> 14:48.150
是不是我前面

14:48.150 --> 14:49.150
所传输的一个

14:49.150 --> 14:50.150
xy

14:50.150 --> 14:52.150
这样的stater的一个内容

14:52.150 --> 14:54.150
当你接进来以后的话

14:54.150 --> 14:55.150
那我就在内部

14:55.150 --> 14:56.150
我就可以做一个

14:56.150 --> 14:57.150
简单的呈现

14:57.150 --> 14:58.150
比如说

14:58.150 --> 15:00.150
我在这里面

15:00.150 --> 15:12.170
做一张图片的呈现

15:12.170 --> 15:13.170
那我把imager

15:13.170 --> 15:27.740
怎么放到上面去

15:27.740 --> 15:28.740
OK

15:28.740 --> 15:29.740
然后呢

15:29.740 --> 15:32.740
此时我们在这里面src

15:32.740 --> 15:34.740
我们给一张图片

15:34.740 --> 15:35.740
这张图片呢

15:35.740 --> 15:36.740
我们就定在

15:36.740 --> 15:44.380
当前的staters里面

15:44.380 --> 15:45.380
我们给一个

15:45.380 --> 15:46.380
叫做

15:46.380 --> 15:54.340
imager pass

15:54.340 --> 15:55.340
路径

15:55.340 --> 15:56.340
我们从网上随便

15:56.340 --> 16:04.000
拿一张水果图片

16:04.000 --> 16:09.740
我们拿一张水果图片

16:09.740 --> 16:11.740
就拿个小

16:11.740 --> 16:12.740
就拿一个这个吧

16:12.740 --> 16:14.740
草莓

16:14.740 --> 16:16.740
拿个草莓图片过来

16:16.740 --> 16:24.940
紧接着

16:24.940 --> 16:26.940
我们把这个staters这个值

16:26.940 --> 16:34.780
放在我们当前的src里面

16:34.780 --> 16:35.780
继续往下

16:35.780 --> 16:36.780
那么我们接下去呢

16:36.780 --> 16:37.780
我们要设定一下

16:37.780 --> 16:39.780
我传xy的时候呢

16:39.780 --> 16:40.780
我们就可以看到

16:40.780 --> 16:41.780
它的一个大小

16:41.780 --> 16:42.780
我们可以改变

16:42.780 --> 16:44.780
我们在这边来

16:44.780 --> 16:45.780
我们来做一下

16:45.780 --> 16:46.780
style

16:46.780 --> 16:54.440
等于

16:54.440 --> 16:55.440
position

16:55.440 --> 16:59.100
absolute

16:59.100 --> 17:02.660
left

17:02.660 --> 17:04.660
mouse

17:04.660 --> 17:06.660
点x

17:06.660 --> 17:09.170
mouse是来自于

17:09.170 --> 17:10.170
我们上面定义的

17:10.170 --> 17:11.170
这个conster

17:11.170 --> 17:12.170
mouse值

17:12.170 --> 17:13.170
从property里面

17:13.170 --> 17:14.170
拿过来的

17:14.170 --> 17:17.740
doha

17:17.740 --> 17:18.740
top

17:18.740 --> 17:21.180
mouse

17:21.180 --> 17:23.180
点y

17:23.180 --> 17:25.180
你可以拿到这个值

17:25.180 --> 17:26.180
那么这样的话呢

17:26.180 --> 17:28.180
我们把整个这个

17:28.180 --> 17:29.180
数据结构

17:29.180 --> 17:31.180
我们现在就打好了

17:31.180 --> 17:32.180
紧接着

17:32.180 --> 17:34.180
我们再要做的是

17:34.180 --> 17:36.180
它需要去引入cat

17:36.180 --> 17:47.100
component

17:47.100 --> 17:48.100
cat

17:48.100 --> 17:50.100
cat

17:50.100 --> 17:52.100
需要做这层引入

17:52.100 --> 17:53.100
这一块

17:53.100 --> 17:54.100
那就是说

17:54.100 --> 17:55.100
对它单击的时候

17:55.100 --> 17:57.100
我们要去处理一下

17:57.100 --> 17:59.100
它的一个x

17:59.100 --> 18:01.100
y值的改变

18:01.100 --> 18:03.100
conster

18:03.100 --> 18:06.760
x

18:06.760 --> 18:07.760
x

18:07.760 --> 18:08.760
y

18:08.760 --> 18:09.760
等于

18:09.760 --> 18:17.520
e.detail

18:17.520 --> 18:19.520
我们从这里面拿下来

18:19.520 --> 18:20.520
我们先来看一下

18:20.520 --> 18:21.520
我单击以后

18:21.520 --> 18:22.520
是否这两个值

18:22.520 --> 18:24.520
会变化

18:24.520 --> 18:26.520
就从e.detail

18:26.520 --> 18:33.030
里面拿下来

18:33.030 --> 18:34.030
有一张图片

18:34.030 --> 18:37.110
单击

18:37.110 --> 18:38.110
是不是

18:38.110 --> 18:40.110
会得到一个值

18:40.110 --> 18:41.110
ok

18:41.110 --> 18:42.110
那么此时呢

18:42.110 --> 18:43.110
我就把这个值

18:43.110 --> 18:47.000
设置到当前的

18:47.000 --> 18:51.660
stater里面去

18:51.660 --> 18:52.660
我们做x

18:52.660 --> 18:53.660
y的设定

18:53.660 --> 18:57.990
那这样的话呢就是

18:57.990 --> 19:00.990
当我现在对着这个view

19:00.990 --> 19:01.990
默认里面是零零

19:01.990 --> 19:02.990
当我对着它

19:02.990 --> 19:04.990
进行一次单击的时候

19:04.990 --> 19:05.990
它会把当前的

19:05.990 --> 19:06.990
你的作标

19:06.990 --> 19:09.990
作为x和y的两个属性值

19:09.990 --> 19:10.990
给付进去

19:10.990 --> 19:11.990
然后呢

19:11.990 --> 19:12.990
它会把这个status

19:12.990 --> 19:14.990
传给我们的一个

19:14.990 --> 19:16.990
那个prepare to render

19:16.990 --> 19:18.990
在prepare to render里面的话呢

19:18.990 --> 19:20.990
我们把这个内容

19:20.990 --> 19:21.990
stater

19:21.990 --> 19:24.990
直接给到了我们现在的

19:25.990 --> 19:26.990
cat里面

19:26.990 --> 19:28.990
cat里面通过我们的

19:28.990 --> 19:29.990
就是这边吧

19:29.990 --> 19:30.990
它通过这个给到cat里面

19:30.990 --> 19:32.990
cat里面给进去以后的话

19:32.990 --> 19:34.990
通过purpose的方式拿到

19:34.990 --> 19:36.990
它把它直接拿出mouse来

19:36.990 --> 19:38.990
然后mouse拿出来以后的话

19:38.990 --> 19:40.990
它直接作为我们的lifter

19:40.990 --> 19:42.990
跟top格式呈现

19:42.990 --> 19:43.990
对吧

19:43.990 --> 19:44.990
就这样的一个格式

19:44.990 --> 19:45.990
ok

19:45.990 --> 19:47.990
那么mouse里面的话呢

19:47.990 --> 19:49.990
我们这边的有个mouse

19:49.990 --> 19:51.990
这是属于一个属性的呈现

19:51.990 --> 19:53.990
那么cat里面的话呢

19:53.990 --> 19:54.990
我们这边也有

19:54.990 --> 19:56.990
除了图片以外的话呢

19:56.990 --> 19:58.990
那么我们也可以有一个

19:58.990 --> 20:00.990
特别是在这边啊

20:00.990 --> 20:01.990
在它里面也有一个

20:01.990 --> 20:02.990
所以呢

20:02.990 --> 20:04.990
我们本身就可以通过

20:04.990 --> 20:05.990
点击

20:05.990 --> 20:07.990
来看一下最后的效果了

20:07.990 --> 20:09.990
首先出一张图片

20:09.990 --> 20:11.990
我们现在简单看一看这张图片

20:11.990 --> 20:20.040
我们打开这张图片

20:20.040 --> 20:29.520
咱们看

20:29.520 --> 20:31.520
现在它是00

20:31.520 --> 20:32.520
看到吗

20:32.520 --> 20:33.520
lifter跟top是00

20:34.520 --> 20:37.960
此时我们来做

20:37.960 --> 20:38.960
我们把它收掉

20:38.960 --> 20:42.980
点击一下

20:42.980 --> 20:44.980
我们对它点击一下以后的话

20:44.980 --> 20:46.980
我们先刷一下啊

20:46.980 --> 20:47.980
我们现在啊

20:47.980 --> 20:52.570
我再刷一下啊

20:52.570 --> 20:58.890
从圆码里面来看

20:58.890 --> 21:00.890
我们打开

21:00.890 --> 21:02.890
当前是00还是一样

21:02.890 --> 21:03.890
对它进行点击

21:03.890 --> 21:05.890
它会把上面两个呈现出来

21:05.890 --> 21:06.890
此时呢

21:06.890 --> 21:10.970
我们来看一下它的结构

21:10.970 --> 21:12.970
它是不是改变了那两个值

21:12.970 --> 21:17.750
是不是

21:17.750 --> 21:18.750
这时候它就改变了

21:18.750 --> 21:20.750
现在的lifter跟top

21:21.750 --> 21:23.750
那么这两个值的改变

21:23.750 --> 21:24.750
这就意味着

21:24.750 --> 21:25.750
其实是我通过

21:25.750 --> 21:27.750
外部的一个

21:27.750 --> 21:28.750
我们的

21:28.750 --> 21:30.750
Render Preparedness的结构

21:30.750 --> 21:32.750
改变了xy的轴

21:32.750 --> 21:34.750
然后给它传入到你内部

21:34.750 --> 21:35.750
内部改变了这个结构

21:35.750 --> 21:36.750
是吧

21:36.750 --> 21:38.750
这个逻辑的一清了吧

21:38.750 --> 21:40.750
效果就是我们说

21:40.750 --> 21:41.750
当我点击外面图片的时候

21:41.750 --> 21:43.750
内部会进行改变

21:43.750 --> 21:44.750
内部的改变

21:44.750 --> 21:45.750
是通过我们

21:45.750 --> 21:47.750
现在刚刚写的这个叫做

21:47.750 --> 21:49.750
我们的

21:49.750 --> 21:51.750
Render Preparedness的方式来写的

21:51.750 --> 21:52.750
当然

21:52.750 --> 21:53.750
它也得遵循的是

21:53.750 --> 21:55.750
以Render开头代表的是

21:55.750 --> 21:57.750
后面是一个Preparedness的

21:57.750 --> 21:58.750
一个函数体

21:58.750 --> 22:00.750
是这样的一个结构

22:00.750 --> 22:01.750
我们再来过一下

22:01.750 --> 22:02.750
整个这个逻辑

22:02.750 --> 22:04.750
咱们来看一下

22:04.750 --> 22:06.750
首先我们有一个主文件

22:06.750 --> 22:08.750
在主文件上面的话

22:08.750 --> 22:10.750
我们这边写了一个

22:10.750 --> 22:12.750
我们的

22:12.750 --> 22:13.750
Mouth Trick

22:13.750 --> 22:15.750
这样的一个功能

22:15.750 --> 22:16.750
它主要的是

22:16.750 --> 22:17.750
我们这里边有一个

22:17.750 --> 22:19.750
它载入两个

22:19.750 --> 22:20.750
一个是Mouth

22:20.750 --> 22:21.750
一个是Cat

22:21.750 --> 22:22.750
Mouth

22:22.750 --> 22:25.750
它里面有一个属性叫Rendocat

22:25.750 --> 22:26.750
Rendocat

22:26.750 --> 22:27.750
以Rendocat

22:27.750 --> 22:29.750
我们把它都称为Render Preparedness

22:29.750 --> 22:30.750
也就是说

22:30.750 --> 22:31.750
它后面

22:31.750 --> 22:33.750
整个这个属性值

22:33.750 --> 22:35.750
是一个函数体

22:35.750 --> 22:36.750
整个这个属性值

22:36.750 --> 22:38.750
是一个函数体

22:38.750 --> 22:39.750
然后呢

22:39.750 --> 22:41.750
它需要接收一个参数

22:41.750 --> 22:42.750
那么这个参数

22:42.750 --> 22:43.750
参数呢

22:43.750 --> 22:44.750
就是

22:44.750 --> 22:46.750
我们在使用这个函数时

22:46.750 --> 22:47.750
所给的参数

22:47.750 --> 22:49.750
在使用这个属性时

22:49.750 --> 22:50.750
所给的参数

22:50.750 --> 22:51.750
那我回来

22:51.750 --> 22:52.750
在Mouth里面

22:52.750 --> 22:54.750
你需要去接收

22:54.750 --> 22:55.750
这样的一个

22:55.750 --> 22:56.750
来看一下

22:56.750 --> 22:57.750
Mouth里面

22:57.750 --> 22:59.750
你需要去接收

22:59.750 --> 23:00.750
这样一个数据

23:00.750 --> 23:02.750
你接收数据的方式

23:02.750 --> 23:03.750
依然通过

23:03.750 --> 23:06.750
This.Preparedness.Rendocat

23:06.750 --> 23:08.750
和平时我们接收

23:08.750 --> 23:09.750
普通属性一样

23:09.750 --> 23:10.750
只不过

23:10.750 --> 23:11.750
它接收到以后

23:11.750 --> 23:13.750
由于它内部是一个函数

23:13.750 --> 23:16.750
所以它可以直接用小库号的方式

23:16.750 --> 23:19.750
给这个函数进行传直

23:19.750 --> 23:21.750
你在Rendocat

23:21.750 --> 23:23.750
后面小库号里写的内容

23:23.750 --> 23:25.750
就会传输到

23:25.750 --> 23:28.750
我们现在定义它的Mouth位置上

23:28.750 --> 23:30.750
Mouth在接收到这个数据以后

23:30.750 --> 23:32.750
它就会把这个数据

23:32.750 --> 23:34.750
直接给到它后面的方法体

23:34.750 --> 23:36.750
而方法体里面

23:36.750 --> 23:37.750
我们又写了

23:37.750 --> 23:38.750
第二个

23:38.750 --> 23:39.750
我们的

23:39.750 --> 23:41.750
称之为的组件

23:41.750 --> 23:43.750
所以它形成什么结构呢

23:43.750 --> 23:44.750
就是我现在的

23:44.750 --> 23:46.750
复元素上面

23:46.750 --> 23:49.750
调用的第一个组件里面的内容

23:49.750 --> 23:51.750
通过这样的方式

23:51.750 --> 23:52.750
通过复元素

23:52.750 --> 23:54.750
第一个里面的xy

23:54.750 --> 23:58.750
共享给了我第二个Cat里面的数据

23:58.750 --> 23:59.750
对吧

23:59.750 --> 24:00.750
共享给了

24:00.750 --> 24:02.750
第二个Cat里面的数据

24:02.750 --> 24:03.750
此时

24:03.750 --> 24:04.750
我们得到的

24:04.750 --> 24:07.750
Stator的xy的时候

24:07.750 --> 24:08.750
把这个值

24:08.750 --> 24:09.750
直接给到了

24:09.750 --> 24:11.750
第二个Cat的Mouth属性

24:11.750 --> 24:14.750
那我们到第二个Mouth属性再来看

24:14.750 --> 24:16.750
在第二个Mouth属性里面

24:16.750 --> 24:18.750
我们直接获取

24:18.750 --> 24:20.750
当前Mouth属性的内容

24:20.750 --> 24:21.750
然后呢

24:21.750 --> 24:23.750
我们直接把这个属性的值

24:23.750 --> 24:24.750
作为后期的一个

24:24.750 --> 24:25.750
业务逻辑也好

24:25.750 --> 24:26.750
呈现也好的使用

24:26.750 --> 24:28.750
那么对于最内部的

24:28.750 --> 24:29.750
这个

24:29.750 --> 24:30.750
所谓的

24:30.750 --> 24:32.750
我们的Cat属性来讲的话

24:32.750 --> 24:33.750
组件来讲的话

24:33.750 --> 24:34.750
它其实很简单

24:34.750 --> 24:36.750
它就像普通的方法

24:36.750 --> 24:37.750
一样去获取值

24:37.750 --> 24:38.750
只是对于

24:38.750 --> 24:39.750
我第一层的

24:39.750 --> 24:40.750
我们来讲的话

24:40.750 --> 24:41.750
它需要一个

24:41.750 --> 24:42.750
Distant

24:42.750 --> 24:43.750
Proportistant

24:43.750 --> 24:44.750
Rendocat

24:44.750 --> 24:45.750
也就是说

24:45.750 --> 24:46.750
它需要去

24:46.750 --> 24:47.750
函数的方式

24:47.750 --> 24:49.750
调取我们现在的

24:49.750 --> 24:51.750
一个属性函数

24:51.750 --> 24:53.750
调取一个属性函数

24:53.750 --> 24:55.750
属性函数的值

24:55.750 --> 24:57.750
就是你现在所写的

24:57.750 --> 24:59.750
调取方法时候

24:59.750 --> 25:01.750
所给的参数

25:01.750 --> 25:02.750
OK吧

25:02.750 --> 25:03.750
那么这个是我们

25:03.750 --> 25:05.750
这边要给它介绍的

25:05.750 --> 25:07.750
这是我们所谓的

25:07.750 --> 25:09.750
RenderProportist

25:09.750 --> 25:10.750
它是可以

25:10.750 --> 25:12.750
那么它的好处是什么

25:12.750 --> 25:13.750
它的好处是

25:13.750 --> 25:15.750
它没有帮助我们

25:15.750 --> 25:16.750
不是

25:16.750 --> 25:18.750
它是没有把我们

25:18.750 --> 25:20.750
现在的这个组件写死

25:20.750 --> 25:22.750
它没有把这个组件写死

25:22.750 --> 25:23.750
它是非常灵活的

25:23.750 --> 25:25.750
它没有强制约束

25:25.750 --> 25:26.750
如果说

25:26.750 --> 25:27.750
你现在

25:27.750 --> 25:28.750
在前面

25:28.750 --> 25:29.750
这边写了一个内容

25:29.750 --> 25:31.750
然后Mouse里面写死了

25:31.750 --> 25:32.750
那么这时候

25:32.750 --> 25:33.750
你传参是没有问题

25:33.750 --> 25:35.750
但是你一旦要修改Mouse里面

25:35.750 --> 25:36.750
数据的时候

25:36.750 --> 25:38.750
Mouse得重写

25:38.750 --> 25:39.750
但现在的话

25:39.750 --> 25:41.750
我们只需要把这个数据传过去

25:41.750 --> 25:43.750
那么这边到底维护

25:43.750 --> 25:44.750
做哪一个

25:44.750 --> 25:46.750
你只要把这个改掉就可以了

25:46.750 --> 25:47.750
理解吧

25:47.750 --> 25:48.750
好

25:48.750 --> 25:50.750
这个就是我们的叫做

25:50.750 --> 25:52.750
我们的RenderProportist

25:52.750 --> 25:54.750
那么请记住

25:54.750 --> 25:57.750
它是可以作为一个数据的

25:57.750 --> 25:59.750
我们的属性

25:59.750 --> 26:01.750
作为函数的方式进行传送的

26:01.750 --> 26:02.750
OK

26:02.750 --> 26:05.750
那么RenderProportist的结构和讲法

