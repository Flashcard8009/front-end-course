WEBVTT

00:00.180 --> 00:03.580
好 我们继续讲解Tarot的系列课程

00:03.580 --> 00:06.780
这些课呢 给大家讲解一下全局生命周期

00:06.780 --> 00:10.680
全局生命周期对于我们的很多的框架来讲

00:10.680 --> 00:13.480
生命周期都是一个比较重要

00:13.480 --> 00:16.980
也是比较基础的一个环节

00:16.980 --> 00:20.480
那么对于我们的Tarot的生命周期呢

00:20.480 --> 00:25.580
其实它更多的和我们的Reactor有很大的相似处

00:25.580 --> 00:29.380
但是呢 它由于它继承了Component机类

00:29.380 --> 00:33.180
它的生命周期由于它最后要生成我们的小程序

00:33.180 --> 00:35.280
它又有一些特殊的地方

00:35.280 --> 00:39.380
所以相同点不同点 我们都给大家作为一个讲解

00:39.380 --> 00:42.180
首先 生命周期我们称之为钩子函数

00:42.180 --> 00:48.680
也就意味着它本身是在特定的时间自己会完成它的一个执行

00:48.680 --> 00:53.680
我们就可以在它里面在特定的点上去书写我们要的一些代码

00:53.680 --> 00:56.180
我们看一下 在官方上面的话呢

00:56.380 --> 00:57.980
我们先把几个知道一下

00:57.980 --> 01:02.680
所有的生命周期都是以这样的结构进行编写

01:02.680 --> 01:07.180
名称叫做Component 后面是给出了一个

01:07.180 --> 01:08.380
这边还挺有意思

01:08.380 --> 01:12.280
这边给的是一个Welded这样的一个称呼

01:12.280 --> 01:14.080
它是一个英文的称呼 对吧

01:14.080 --> 01:18.180
我们以前的话呢 都比如说Amounted

01:18.180 --> 01:20.380
对吧 VUE的话叫Amounted

01:20.380 --> 01:23.880
对吧 在微信上面的话是以on开头的

01:23.880 --> 01:27.880
但是对于我们的tarrow来讲呢 它的英文编写

01:27.880 --> 01:30.680
Weld 也就是将要发生 对吧

01:30.680 --> 01:34.780
它就是在某一件事的前面 就是我们称之为之前

01:34.780 --> 01:37.180
Dead的话呢 就表示已经发生

01:37.180 --> 01:40.180
所以它是在某一个事件的之后

01:40.180 --> 01:42.680
我们看到后面有个Amount

01:42.680 --> 01:46.080
它其实称之为挂载 挂载前和挂载后

01:46.080 --> 01:48.280
还有两个 一个shoken header

01:48.280 --> 01:51.180
这两个其实你在其他的一些

01:51.180 --> 01:53.880
包括是react的语法里面是见不到的

01:53.880 --> 01:57.380
那么这两个主要是给了我们小程序所使用的

01:57.380 --> 02:00.380
小程序本身是有一个shoken header

02:00.380 --> 02:02.980
在我们原生里面叫on show on header

02:02.980 --> 02:05.880
那么在这边呢 我们就称之为Deader show

02:05.880 --> 02:07.280
Deader header

02:07.280 --> 02:12.380
它是在小程序激活和从隐藏

02:12.380 --> 02:15.780
或者是为激活的时候 进行转换的时候

02:15.780 --> 02:18.780
所触发的两个生命周期函数

02:18.780 --> 02:22.380
再往下我们看到有一个Deader catch error

02:22.380 --> 02:24.780
代表的是捕获错误

02:24.780 --> 02:28.180
和我们的not found

02:28.180 --> 02:29.980
代表的是没有找到

02:29.980 --> 02:33.180
那么这个呢 待会我们看一下我们的官方文档

02:33.180 --> 02:35.680
我们对它一次的进行编写一下

02:35.680 --> 02:39.080
看一下它的执行期 执行点

02:39.080 --> 02:40.280
第二个的话呢

02:40.280 --> 02:44.780
我们在微信中经常会用到一个叫做get apper

02:44.780 --> 02:46.680
get apper的话呢 主要是

02:46.780 --> 02:49.880
我们可以定一些全局的一些变量

02:49.880 --> 02:51.080
那么在之后的话呢

02:51.080 --> 02:55.480
我们可以给它做一些所谓的直接调取

02:55.480 --> 02:56.380
这样的格式

02:56.380 --> 02:57.980
并非需要在单页面中

02:57.980 --> 02:59.580
每个页面如果同样的东西

02:59.580 --> 03:02.680
比如说我们想访问一个网址

03:02.680 --> 03:07.380
或者说我们需要去拿到一个共性的变量

03:07.380 --> 03:10.680
那么我们就可以把它设置在我们的

03:10.680 --> 03:13.180
一个get apper所能取得的地方

03:13.180 --> 03:14.880
我在PPT上写给大家的呢

03:14.880 --> 03:16.880
就是它的调用方式是

03:19.280 --> 03:20.680
那么在以小程序里面呢

03:20.680 --> 03:22.280
我们叫做什么

03:22.280 --> 03:22.980
我们是

03:24.580 --> 03:25.080
然后呢

03:25.080 --> 03:27.280
同时我们后面还有就是告诉你

03:27.280 --> 03:29.280
它其实要写在我们的

03:29.280 --> 03:31.780
APP的全局文件中

03:31.780 --> 03:32.880
我们叫做

03:34.080 --> 03:35.780
那么在小程序里面呢

03:35.780 --> 03:36.480
它是写在

03:38.580 --> 03:40.680
我们小程序中默认会有一个

03:40.680 --> 03:41.980
global呈现

03:41.980 --> 03:42.680
对吧

03:42.680 --> 03:43.880
然后页面中需要直接调用

03:43.880 --> 03:46.480
那么它的写法和小程序还真不一样

03:46.480 --> 03:48.680
所以那待会我们也会来演示一下

03:48.680 --> 03:49.180
好

03:49.180 --> 03:49.880
现在的话呢

03:49.880 --> 03:52.680
我们大家来看一下官方文档

03:52.680 --> 03:54.480
在官方文档上面的话呢

03:54.480 --> 03:55.580
从生命周期开始

03:55.580 --> 03:57.080
我们往下看一下

03:57.080 --> 03:57.880
生命周期

03:57.880 --> 04:01.380
它说是全部继承制component机类的

04:01.380 --> 04:03.780
那么这个机类里面的生命周期呢

04:03.780 --> 04:05.180
它并不完整

04:05.180 --> 04:06.380
它的生命周期不完整

04:06.380 --> 04:08.380
因为它是有个入口的特殊性

04:08.380 --> 04:09.080
这个入口呢

04:09.080 --> 04:11.480
主要的是分你现在的小程序

04:11.480 --> 04:13.980
还属于h5我这样的一些结构

04:13.980 --> 04:15.480
因为最初的reactor

04:15.480 --> 04:16.880
它其实针对于h5

04:16.880 --> 04:18.380
那个h5页面的

04:18.380 --> 04:19.280
但是这边的话呢

04:19.280 --> 04:21.080
有些能用有些就不能用

04:21.080 --> 04:22.180
我们来看一下

04:22.180 --> 04:22.880
比如说

04:22.880 --> 04:23.680
well amount

04:23.680 --> 04:24.980
well amount

04:24.980 --> 04:26.480
它主要是看这边

04:26.480 --> 04:29.380
它是指监听程序初始化的时候

04:29.380 --> 04:30.180
那么注意啊

04:30.180 --> 04:31.780
全局只能使用一次

04:31.780 --> 04:34.380
也就是程序刚加载的时候

04:34.380 --> 04:37.480
需要完成所有监听操作之前

04:37.480 --> 04:38.780
那么它会做一次

04:38.780 --> 04:41.380
初始化的一个操作

04:41.380 --> 04:42.080
注意一下啊

04:42.080 --> 04:43.080
在它里面

04:43.080 --> 04:45.180
你不能去对它进行

04:45.180 --> 04:46.680
所谓的逻辑处理

04:46.680 --> 04:49.080
或者一些变量的操作

04:49.080 --> 04:51.080
因为它还没有去进行

04:51.080 --> 04:53.280
监听初始化的加载过程呢

04:53.280 --> 04:54.080
注意一下啊

04:54.080 --> 04:56.780
那么此生命周期可以通过这些

04:56.780 --> 04:57.280
注意一下

04:57.280 --> 05:00.280
它可以通过dis.router.paramise

05:00.280 --> 05:01.480
访问到初始程序

05:01.480 --> 05:02.480
什么意思

05:02.480 --> 05:04.280
就是我们如果有页面

05:04.280 --> 05:06.280
进行数据传递的话

05:06.280 --> 05:08.980
那么它可以通过这样的

05:08.980 --> 05:10.180
router是什么

05:10.180 --> 05:12.280
路由 路由的参数

05:12.280 --> 05:14.080
可以访问到程序的

05:14.080 --> 05:15.580
初始化参数值

05:15.580 --> 05:20.480
这是它所给到的一个操作

05:20.480 --> 05:21.880
就像我们大家以前

05:21.880 --> 05:22.680
我们还记得吗

05:22.680 --> 05:24.480
在微信中是在哪个

05:24.480 --> 05:25.680
我们在unload里面

05:25.680 --> 05:27.280
是不是有个options

05:27.280 --> 05:27.680
对吧

05:27.680 --> 05:31.480
options可以获得我们的初始化的参数

05:31.480 --> 05:33.180
那么它的参数结构呢

05:33.180 --> 05:34.280
我们可以看一下

05:34.280 --> 05:36.780
它下面这边给出了几个

05:36.780 --> 05:39.580
比如说pass启动小程序的路径

05:39.680 --> 05:41.280
还有sense场景值

05:41.280 --> 05:44.880
query启动小程序的参数

05:44.880 --> 05:46.680
以及我们可以看到

05:46.680 --> 05:48.480
这边有一个share tick

05:48.480 --> 05:50.680
以及我们的信息来源

05:50.680 --> 05:51.680
这些的话

05:51.680 --> 05:54.080
都可以作为它的参数格式

05:54.080 --> 05:56.480
通过这里面去获取到

05:56.480 --> 05:58.180
然后我们可以看一下

05:58.180 --> 05:59.280
在场景中

05:59.280 --> 06:00.580
场景我们现在的话

06:00.580 --> 06:02.580
其实没有得多的去设计

06:02.580 --> 06:04.280
因为场景分的是

06:04.280 --> 06:05.680
小程序和百度

06:05.680 --> 06:08.280
这两个本身里面会有存在区别

06:08.280 --> 06:10.280
那么我们可以得到的是什么呢

06:10.280 --> 06:12.080
我们可以去得到的来源于

06:12.080 --> 06:13.380
app id

06:13.380 --> 06:14.880
特殊的数据

06:14.880 --> 06:16.980
以及我们现在所给的插件

06:16.980 --> 06:18.480
这些可以获取到

06:18.480 --> 06:21.780
那么我们在创建页面的时候

06:21.780 --> 06:23.580
系统在创建页面的时候

06:23.580 --> 06:25.180
这个是没有的

06:25.180 --> 06:26.080
也就是说

06:26.080 --> 06:27.280
默认系统给你的

06:27.280 --> 06:28.980
就这些

06:28.980 --> 06:29.980
那么我们要的话

06:29.980 --> 06:32.480
我们自行可以加一个这个出来

06:32.480 --> 06:33.980
你可以加一个这个出来

06:33.980 --> 06:35.380
首先第一步操作

06:35.380 --> 06:37.980
我们先写一下

06:37.980 --> 06:43.940
这是初始化操作

06:43.940 --> 06:45.040
初始化操作

06:45.040 --> 06:45.440
然后呢

06:45.440 --> 06:48.740
我们直接先打印一下

06:48.740 --> 06:51.440
先看一下他的操作点

06:51.440 --> 06:51.840
然后呢

06:51.840 --> 06:54.040
我们把整个这个

06:54.040 --> 06:56.240
后面的文本写在这

06:56.240 --> 06:57.740
那么由于我们页面中啊

06:57.740 --> 06:59.840
我们用过那个叫做

06:59.840 --> 07:01.540
呃

07:01.540 --> 07:02.440
点8个点2

07:02.440 --> 07:04.140
他爆出的时候会非常多

07:04.140 --> 07:06.940
所以我这时候在app.js里面

07:06.940 --> 07:09.040
我们把它改成force

07:09.040 --> 07:10.740
就是让他先不要显示

07:10.740 --> 07:14.140
他其他的一些那个运行程序

07:14.140 --> 07:16.040
然后我们只是完成现在的

07:16.040 --> 07:17.340
这个操作啊

07:17.340 --> 07:19.840
他看他是否是呈现一次

07:19.840 --> 07:22.240
再来看

07:22.240 --> 07:23.340
先往下

07:23.340 --> 07:24.040
咱们看到后面

07:24.040 --> 07:26.140
还有一个did mount

07:26.140 --> 07:27.240
did mount是指

07:27.240 --> 07:29.540
监听程序完成以后

07:29.540 --> 07:30.840
他会进行触发的

07:30.840 --> 07:31.840
那么这个

07:31.840 --> 07:34.340
我们可以和他什么对比呢

07:34.340 --> 07:35.840
就是呃

07:35.840 --> 07:38.140
我们可以和完成以后的话呢

07:38.140 --> 07:38.840
是属于

07:38.840 --> 07:39.440
你看这边啊

07:39.440 --> 07:41.040
百度小程序生命周期方法

07:41.040 --> 07:42.940
对应app的unlaunch

07:42.940 --> 07:44.740
他是指unlaunch的结构

07:44.740 --> 07:46.640
那么在unlaunch里面的话呢

07:46.640 --> 07:48.540
我们也是执行一次

07:48.540 --> 07:49.640
那个微信里面

07:49.640 --> 07:50.340
是不是

07:50.340 --> 07:52.340
所以我们把他也拿出来

07:52.340 --> 07:54.540
他是加载的一部分

07:54.540 --> 07:55.040
所以呢

07:55.040 --> 08:03.500
我们里面也完成我们现在的

08:03.500 --> 08:05.700
一般我们大家在写小程序的时候

08:05.700 --> 08:08.700
我们很少在unlaunch里面去书写

08:08.700 --> 08:09.200
对吧

08:09.200 --> 08:10.400
因为很多时候的话

08:10.400 --> 08:12.400
我们希望的是这些数据

08:12.400 --> 08:14.300
直接是当前页面操作

08:14.300 --> 08:16.700
或者说在当前的

08:16.700 --> 08:18.600
呃页那个

08:18.600 --> 08:20.200
显示或者是隐藏的

08:20.200 --> 08:22.900
这样的一些功能上面操作

08:22.900 --> 08:25.300
除非说是你现在这个数据

08:25.300 --> 08:26.700
非得是程序

08:26.700 --> 08:28.600
整个程序在运行前

08:28.600 --> 08:30.100
一定要加入进来的

08:30.100 --> 08:31.500
那我们一般性

08:31.500 --> 08:34.200
在我们的did mount里面进行操作

08:34.200 --> 08:35.300
是这个啊

08:35.300 --> 08:38.000
再来看

08:38.000 --> 08:39.200
我们有个did show

08:39.200 --> 08:40.100
注意一下啊

08:40.100 --> 08:43.000
这个是支持对应到的是unshow概念

08:43.000 --> 08:44.600
他对应到unshow概念

08:44.600 --> 08:46.200
那么在这上面的话呢

08:46.200 --> 08:47.300
我们依然啊

08:47.300 --> 08:48.600
通过此生命周期

08:48.600 --> 08:50.000
我们可以访问参数

08:50.000 --> 08:52.300
他也能去拿到这个参数值

08:52.300 --> 08:54.700
他也能拿到这个参数值啊

08:54.700 --> 08:56.000
所以我们讲的是

08:56.000 --> 08:56.300
呃

08:56.300 --> 08:57.600
但是这个参数值

08:57.600 --> 08:59.500
在我们的unshow上面的话

08:59.500 --> 09:01.200
他是可以操作的

09:01.200 --> 09:03.000
他们两者区别在哪

09:03.000 --> 09:04.900
我们刚刚其实已经说到了

09:04.900 --> 09:06.800
他只触发一次

09:06.800 --> 09:08.900
在你整个页面加载的时候

09:08.900 --> 09:10.400
他会触发这个

09:10.400 --> 09:11.600
但是我页面之间

09:11.600 --> 09:13.500
如果形成跳转

09:13.500 --> 09:15.600
或者回跳的过程中

09:15.600 --> 09:18.500
其实我们上面的这个叫做well mount

09:18.500 --> 09:20.300
他是无法进行触发的

09:20.300 --> 09:21.400
那么在这种时候

09:21.400 --> 09:23.200
你想再次拿这个值的话

09:23.200 --> 09:24.100
比如说

09:24.100 --> 09:25.800
我现在有一个新文列表页面

09:25.800 --> 09:28.500
我点击一个新闻的某一个标题的话

09:28.500 --> 09:31.700
我使让他跳转到一个新的位置去

09:31.700 --> 09:33.200
新的一个详情页面

09:33.200 --> 09:33.700
这种时候

09:33.700 --> 09:35.200
其实你的程序已经启动了

09:35.200 --> 09:36.900
在新页面的过程中呢

09:36.900 --> 09:40.500
那么其实我们都会完成这个叫做unshow

09:40.700 --> 09:41.700
这样的操作

09:41.700 --> 09:43.400
让他显示的时候去做

09:43.400 --> 09:44.200
拿餐

09:44.200 --> 09:45.300
拿以这个方式

09:46.600 --> 09:47.100
好

09:47.100 --> 09:48.600
我们继续来看一下

09:48.600 --> 09:50.200
那么还有的就是

09:52.200 --> 09:53.600
hitter 隐藏

09:53.600 --> 09:58.880
我们把这两个也标注一下

09:58.880 --> 10:03.360
这个是

10:03.360 --> 10:09.460
监听

10:09.460 --> 10:13.710
挂在后

10:13.710 --> 10:22.380
我先写他

10:22.380 --> 10:23.580
监听

10:23.580 --> 10:24.780
监听

10:25.980 --> 10:27.180
挂在

10:27.180 --> 10:31.200
我喜欢用sogo

10:31.200 --> 10:32.600
监听

10:32.700 --> 10:33.700
显示

10:33.700 --> 10:34.100
好

10:35.200 --> 10:37.500
或者显示显示另外一个词叫做

10:38.100 --> 10:38.900
激活

10:38.900 --> 10:39.400
好

10:40.600 --> 10:41.500
那这个呢

10:41.500 --> 10:42.100
就是

10:43.700 --> 10:46.340
监听

10:46.340 --> 10:47.340
隐藏

10:47.340 --> 10:48.340
或者称之为

10:49.740 --> 10:50.840
未激活

10:52.540 --> 10:53.540
非激活

10:54.940 --> 10:55.340
好

10:55.940 --> 10:59.440
这两项其实之间是进行切换的

11:00.240 --> 11:02.040
我们打开a页面的时候

11:02.040 --> 11:03.640
a页面就是一个

11:03.640 --> 11:05.340
给的秀的可以执行

11:05.340 --> 11:07.240
当你打开b页面的时候

11:07.240 --> 11:08.140
那么a页面

11:08.140 --> 11:09.040
他会执行

11:09.040 --> 11:09.940
hitter

11:09.940 --> 11:11.140
进行隐藏

11:11.140 --> 11:12.740
然后b页面会执行

11:12.740 --> 11:13.640
给的秀

11:13.640 --> 11:14.440
理解吧

11:14.440 --> 11:14.940
但是你

11:14.940 --> 11:15.540
b页面

11:15.540 --> 11:17.140
如果你减回跳

11:17.140 --> 11:17.940
回来了

11:17.940 --> 11:19.140
那么a页面的

11:19.140 --> 11:20.140
秀又会运行

11:21.740 --> 11:23.740
这就是平时大家经常在网页上

11:23.740 --> 11:24.940
或者手机上面

11:24.940 --> 11:26.140
看到的一种效果

11:26.140 --> 11:26.740
就是你啊

11:26.740 --> 11:27.740
没有退出

11:27.740 --> 11:29.240
苹果手机或者是按照手机

11:29.240 --> 11:31.140
你进到进程对列上面

11:31.140 --> 11:32.640
你看到那个

11:32.640 --> 11:34.440
界面你重新点击的时候

11:34.440 --> 11:35.140
你会发现

11:35.140 --> 11:35.640
哎

11:35.640 --> 11:37.440
他是不是又进行了一次加载

11:37.440 --> 11:39.840
他那个加载的那个

11:39.840 --> 11:40.240
banner

11:40.240 --> 11:42.240
也又会重新出现一次

11:42.240 --> 11:43.140
原因就在这

11:43.140 --> 11:44.540
他其实是类似于这样的

11:44.540 --> 11:45.340
on show

11:45.340 --> 11:49.870
上面去做的

11:49.870 --> 11:53.280
我们把它也拿过来

11:53.280 --> 11:54.280
放这

11:54.280 --> 11:54.780
好

11:54.780 --> 11:56.180
这是这两个部分

11:56.180 --> 12:00.510
紧接着我们再来看

12:00.510 --> 12:01.710
这边还有一个

12:01.710 --> 12:03.110
就是我们刚才说的

12:03.110 --> 12:06.410
当他如果脚本发生错误或者API

12:06.410 --> 12:08.110
调用爆错时

12:08.110 --> 12:09.910
完成这个程序的操作

12:09.910 --> 12:13.310
那么我们可以使用terror on error的方式

12:13.310 --> 12:14.310
来监听

12:14.310 --> 12:16.010
那么错误以后的话呢

12:16.010 --> 12:18.510
那么这部分内容就是防止

12:18.510 --> 12:19.210
注意啊

12:19.210 --> 12:22.710
他其实就是针对于我们微信里面的on error

12:22.710 --> 12:25.510
他防止用户直接看到这个错误

12:25.510 --> 12:27.410
你可以对他进行一个防御

12:27.410 --> 12:30.810
或者称之为给他一个友好的用户提示

12:30.810 --> 12:32.310
是这样的一个效果

12:32.310 --> 12:33.510
那么我们看

12:33.510 --> 12:36.310
系统默认所给出的里面是没有这个的

12:36.310 --> 12:37.910
那我们就要手写一下

12:37.910 --> 12:45.630
我们把它复制过来吧

12:45.630 --> 12:46.930
但是你现在写了以后呢

12:46.930 --> 12:48.430
其实他也不会呈现

12:48.430 --> 12:52.130
因为我们现在没有错误出现

12:52.130 --> 12:56.360
我们先写一下

12:56.360 --> 13:03.340
catch error

13:03.340 --> 13:07.920
错误出现后的

13:07.920 --> 13:10.020
监听操作

13:10.020 --> 13:10.720
哎

13:10.720 --> 13:15.190
操作啊

13:15.190 --> 13:17.090
咱们再来

13:17.090 --> 13:17.890
还有

13:17.890 --> 13:21.490
这是属于我们还有一个叫做did not finder

13:21.490 --> 13:23.890
因为我们有时候做页面的时候啊

13:23.890 --> 13:25.390
页面有时候我们建立了

13:25.390 --> 13:28.090
但是呢这个页面在某种情况下

13:28.090 --> 13:29.390
要不我们没有配

13:29.390 --> 13:29.790
要不呢

13:29.790 --> 13:32.590
在运行过程中这文件啊

13:32.590 --> 13:34.790
以各种原因的方式

13:34.790 --> 13:35.890
找不到了

13:35.890 --> 13:36.590
这种时候的话

13:36.590 --> 13:37.590
你点给用户以后

13:37.590 --> 13:39.590
用户会是始终加载啊

13:39.590 --> 13:41.490
他始终出不来或者是抱错

13:41.490 --> 13:43.190
那么还是属于同样的概念

13:43.190 --> 13:45.190
我们给用户一个友好的提示

13:45.190 --> 13:47.690
我们使用的是这样的一个告诉你

13:47.690 --> 13:48.690
当前面没有哦

13:48.690 --> 13:50.390
或者说给一个提示以后

13:50.390 --> 13:52.690
我们去到一个新的页面

13:52.690 --> 13:57.670
是这个意思

13:57.670 --> 14:16.750
我们先把这个写出来

14:16.750 --> 14:21.120
did not finder

14:21.120 --> 14:23.320
好

14:23.320 --> 14:23.520
好

14:23.520 --> 14:25.620
你看到他也就有些参数

14:25.620 --> 14:26.920
那么这个的话呢

14:26.920 --> 14:30.720
就基本上满足了我们现在的一个

14:30.720 --> 14:33.220
程序的整个的开发的

14:33.220 --> 14:35.320
生命周期的全局操作

14:35.320 --> 14:36.320
我们打开

14:36.320 --> 14:37.520
首先看一下

14:37.520 --> 14:38.620
在编译过程中

14:38.620 --> 14:41.120
他不会有任何的一些抱错

14:41.120 --> 14:41.520
然后呢

14:41.520 --> 14:43.820
只是我们打开我们现在的

14:43.820 --> 14:45.420
整个程序发现吗

14:45.420 --> 14:47.420
well mount先执行了

14:47.420 --> 14:48.820
他执行了did show

14:48.820 --> 14:49.420
对吧

14:49.420 --> 14:50.520
就意味着

14:50.520 --> 14:52.720
他完成了well mount这个操作以后

14:52.720 --> 14:54.820
did show就表示他在呈现

14:54.820 --> 14:56.220
然后did show完成以后

14:56.220 --> 14:59.420
你注意他再做的是did mount

14:59.420 --> 15:00.420
这两者顺序

15:00.420 --> 15:01.820
请注意他的位置

15:01.820 --> 15:04.220
并不是well mount结束做did mount

15:04.220 --> 15:05.320
well mount结束以后

15:05.320 --> 15:07.020
他会做did show

15:07.020 --> 15:07.520
然后呢

15:07.520 --> 15:08.420
此时你刷新以后

15:08.420 --> 15:11.870
你再来看

15:11.870 --> 15:12.670
看到吗

15:12.670 --> 15:14.670
这顺序不是属于随机的

15:14.670 --> 15:16.870
他就是围绕着这样的一个

15:16.870 --> 15:17.870
mount结束以后

15:17.870 --> 15:19.870
did show在did mount

15:19.870 --> 15:21.070
这个过程来的

15:21.070 --> 15:21.770
所以呢

15:21.770 --> 15:22.670
我们讲

15:22.670 --> 15:24.970
我们在show里面去取值的时候

15:24.970 --> 15:25.670
都是ok的

15:25.670 --> 15:27.470
你能够拿到所有的值

15:27.470 --> 15:30.370
我们切到其他页面

15:30.370 --> 15:31.170
你看

15:31.170 --> 15:33.770
我们本身会有一个

15:33.770 --> 15:35.370
did header是谁啊

15:35.370 --> 15:36.670
我们在关于的这个页面

15:36.670 --> 15:38.170
压根什么都没做过

15:38.170 --> 15:40.470
他其实是我们的首页的

15:40.470 --> 15:42.870
这个叫做index页面的

15:42.870 --> 15:44.170
did header启动了

15:44.170 --> 15:45.070
再回来

15:45.070 --> 15:46.470
是不是他的did show

15:46.470 --> 15:48.570
又被执行一次

15:48.570 --> 15:49.570
这个的话

15:49.570 --> 15:50.470
就是我们说到的

15:50.470 --> 15:52.970
但well mount和我们的

15:52.970 --> 15:54.470
这个叫做did mount

15:54.470 --> 15:56.070
对于mount来讲的话

15:56.070 --> 15:57.570
他只执行一次

15:57.570 --> 15:59.270
咱们这边就看到这个效果了

15:59.270 --> 16:00.070
对吧

16:00.070 --> 16:00.570
好

16:00.570 --> 16:01.970
我们再来演示一下

16:01.970 --> 16:02.770
就是

16:02.770 --> 16:05.670
我们现在是把它做在页面中

16:05.670 --> 16:07.070
那么这些生命周期

16:07.070 --> 16:09.870
同样适合于我们全局的开发

16:09.870 --> 16:12.270
其实全局和我们的

16:12.270 --> 16:13.770
页面级的生命周期

16:13.770 --> 16:14.970
基本保持一致

16:14.970 --> 16:15.870
它可以是

16:15.870 --> 16:17.670
所以包括是这种

16:17.670 --> 16:18.870
所谓的shooting header

16:18.870 --> 16:20.670
是指的是本页面的

16:20.670 --> 16:21.670
包括其他的几个

16:21.670 --> 16:23.770
你到全局里面来看

16:23.770 --> 16:25.770
这个的话是不用

16:25.770 --> 16:26.670
全局里面的话

16:26.670 --> 16:28.270
你看did mount

16:28.270 --> 16:29.570
did show

16:31.570 --> 16:32.470
did header

16:32.470 --> 16:34.370
跟did catch error

16:34.370 --> 16:35.870
是一样的这里面

16:35.870 --> 16:37.270
所以我们讲

16:37.270 --> 16:38.570
无论是全局

16:38.570 --> 16:40.070
还是我们页面

16:40.070 --> 16:42.670
对于生命周期的一个使用点

16:42.670 --> 16:45.570
基本上都保持同样的一个节奏

16:45.670 --> 16:46.970
是这样的逻辑

16:46.970 --> 16:48.570
同时我们再说一下

16:48.570 --> 16:50.270
这里面我们没有放对吧

16:50.270 --> 16:53.800
我们把这个也放一个

16:53.800 --> 16:55.200
同时我们说上的是

16:55.200 --> 16:58.700
那么如果说你在你各自的里面

16:58.700 --> 16:59.800
没有去做的话

16:59.800 --> 17:02.200
那么我们全局上面的这一项

17:02.200 --> 17:04.000
它其实就会实现

17:04.000 --> 17:05.900
全局生命周期的使用

17:05.900 --> 17:07.600
如果你各自的生命周期

17:07.600 --> 17:09.200
就是每页面中已经定义了

17:09.200 --> 17:10.200
那么它就会使用你

17:10.200 --> 17:13.000
每页面自行的定义的生命周期

17:13.000 --> 17:14.200
是这个逻辑

17:14.200 --> 17:14.800
OK

17:14.800 --> 17:17.100
这是我们说到的生命周期的一个点

17:17.100 --> 17:19.100
那么如果这个点大家有问题的话

17:19.100 --> 17:21.200
你可以去参照Reactor

17:21.200 --> 17:22.800
Reactor里面的详细

17:22.800 --> 17:27.300
对它里面再做一个简单的介绍吧

17:27.300 --> 17:29.900
我们这边开始讲第二部分

17:29.900 --> 17:32.100
Get APP

17:32.100 --> 17:33.300
对于Get APP

17:33.300 --> 17:37.200
其实很多的一些微信的小程序里面

17:37.200 --> 17:39.100
特别是小程序的一些使用里面

17:39.100 --> 17:41.400
都会去用到Get APP

17:41.400 --> 17:44.500
我们作为一种全局辩量的存储

17:44.500 --> 17:46.000
在我们的生活中

17:46.000 --> 17:48.600
或者说是我们经常会有一些值

17:48.600 --> 17:51.000
是在运行期间始终不变的

17:51.000 --> 17:52.100
那么这种时候

17:52.100 --> 17:55.200
为了减少每个页面都自己开批空间

17:55.200 --> 17:57.400
去做一个长量存储的话

17:57.400 --> 17:59.800
我们就把它直接存在一个App里面

17:59.800 --> 18:00.800
在小程序

18:00.800 --> 18:03.000
特别是微信小程序的里面

18:03.000 --> 18:05.000
我们把这样的一个App

18:05.000 --> 18:08.400
我们存储在的是叫做App.gs里面

18:08.400 --> 18:11.800
它里面会自带有一个叫Global的一个方法

18:11.800 --> 18:13.300
一个对象

18:13.300 --> 18:14.500
我们只要存进去以后

18:14.500 --> 18:15.500
那么在页面中

18:15.500 --> 18:17.900
我们就可以用Get APP的方式

18:17.900 --> 18:21.000
来使用到这样的App的Global

18:21.000 --> 18:23.300
我们写法是app.global.

18:23.300 --> 18:25.700
然后里边的值这个结构

18:25.700 --> 18:29.300
那么在我们的Taro中

18:29.300 --> 18:30.300
它也能用

18:30.300 --> 18:32.200
同时这边说了一句话

18:32.200 --> 18:34.500
叫做各端都可以实现

18:34.500 --> 18:36.300
但是它实现方式

18:36.300 --> 18:38.100
有同学会有一些屋区

18:38.100 --> 18:39.300
或者写起来的话

18:39.300 --> 18:42.500
经常会做一些入坑的事情

18:42.500 --> 18:44.500
那么这边我先说一下

18:44.500 --> 18:47.000
首先我们到

18:47.000 --> 18:49.700
因为在整个的Taro中

18:49.700 --> 18:52.100
我们只有一个App.gs差

18:52.100 --> 18:55.200
所以我们在这里面写

18:55.200 --> 18:57.200
我们看一下它的整个结构

18:57.200 --> 18:59.900
它是一个我们的类

18:59.900 --> 19:01.200
类里面有个类名

19:01.200 --> 19:02.900
继承字Component

19:02.900 --> 19:04.800
然后这是我们的一个初始化

19:04.800 --> 19:06.000
参数设定

19:06.000 --> 19:07.300
我们把它收掉

19:07.300 --> 19:09.200
然后下面是生命周期

19:09.200 --> 19:10.200
生命周期

19:10.200 --> 19:11.300
主要是针对于

19:11.300 --> 19:13.100
我们现在的加载

19:13.100 --> 19:15.100
或者说是某一个出发点的

19:15.100 --> 19:16.800
我们把它隐藏好

19:16.800 --> 19:18.800
紧接着下面就是个Random

19:18.800 --> 19:20.500
把我们现在里面的内容

19:20.500 --> 19:21.900
进行实际的输出

19:21.900 --> 19:22.700
你看到吗

19:22.700 --> 19:23.500
它这边说了

19:23.500 --> 19:25.200
不要去修改此函数

19:25.200 --> 19:27.600
这里面不去做业务逻辑和数据处理

19:27.600 --> 19:30.100
最后是作为一个渲染操作

19:30.100 --> 19:32.300
那么我们怎么样去做呢

19:32.300 --> 19:33.300
那么这边

19:33.300 --> 19:34.100
额外说一下

19:34.100 --> 19:36.200
有些同学会有一些

19:36.200 --> 19:38.300
简单的想法

19:38.300 --> 19:40.300
它会这么做

19:40.300 --> 19:43.300
它会在地的里面去创建一个有色对象

19:44.500 --> 19:45.900
我见过

19:45.900 --> 19:48.700
它这边写上NAND

19:48.700 --> 19:49.600
然后这里面写上

19:49.600 --> 19:51.500
比如说TOM

19:51.500 --> 19:53.300
这样写上一个变量值

19:53.300 --> 19:54.500
Countress保存

19:54.500 --> 19:55.100
保存以后

19:55.100 --> 19:56.600
它这里没有变化

19:56.600 --> 19:57.400
第二步呢

19:57.400 --> 19:58.900
它说我去读取这个值

19:58.900 --> 19:59.900
它说这样的话

19:59.900 --> 20:00.700
这个变量

20:00.700 --> 20:02.100
也就所谓的属性

20:02.100 --> 20:03.500
是属于APP的

20:03.500 --> 20:04.700
然后它到这边来

20:04.700 --> 20:06.100
到页面中来

20:06.100 --> 20:07.100
首先页面中

20:07.100 --> 20:09.300
我们要去使用

20:09.300 --> 20:10.900
当前的这个

20:10.900 --> 20:12.100
叫做APP

20:12.100 --> 20:13.100
怎么办呢

20:13.100 --> 20:14.300
我们注意

20:14.300 --> 20:17.500
我们需要在当前类的外面

20:17.500 --> 20:20.100
我们需要在当前类的外面

20:20.100 --> 20:22.400
去先做一个

20:22.400 --> 20:23.900
引用

20:23.900 --> 20:25.700
Constar APP

20:25.700 --> 20:27.500
等于

20:27.500 --> 20:31.200
它是terror.getAPP

20:31.200 --> 20:32.700
有这个值在

20:32.700 --> 20:33.900
用这部分内容

20:33.900 --> 20:35.000
先把这APP拿进来

20:35.000 --> 20:35.900
注意这个红线

20:35.900 --> 20:36.900
它不是爆错

20:36.900 --> 20:38.700
爆错肯定会有语法

20:38.700 --> 20:39.400
这样的提示了

20:39.400 --> 20:41.200
它是指没人用

20:41.200 --> 20:42.900
当前没人用它

20:42.900 --> 20:44.200
我们下面只要用了以后

20:44.200 --> 20:45.900
它就这个红线就没了

20:45.900 --> 20:47.300
然后先做一个

20:47.300 --> 20:49.100
terror.getAPP的引入

20:49.100 --> 20:50.700
然后引入以后

20:50.700 --> 20:53.300
我们到下面来对它进行使用

20:53.300 --> 20:54.500
那么使用的时候

20:54.500 --> 20:55.600
我把它放在哪

20:55.600 --> 20:57.000
因为我把它放在构造里面

20:57.000 --> 20:58.100
我要amount

20:58.100 --> 20:58.900
我们前面会看到

20:58.900 --> 21:00.400
我要amount会出来

21:00.400 --> 21:03.000
所以我们就在这边用一下

21:03.000 --> 21:04.900
我们来接收一下这个值

21:04.900 --> 21:10.660
那么我们做一个输出

21:10.660 --> 21:11.460
你看一下

21:11.560 --> 21:13.260
我们这边做法是

21:13.260 --> 21:15.860
你看APP点

21:15.860 --> 21:18.060
然后我们后面去做

21:18.060 --> 21:19.660
它说这边有一个user

21:19.660 --> 21:21.460
它是属APP的属性

21:21.460 --> 21:23.560
所以它直接是user

21:23.560 --> 21:24.760
这样去操作

21:24.760 --> 21:26.560
理论上现在应该给我返回

21:26.560 --> 21:27.960
是一个json对象

21:27.960 --> 21:28.560
对吧

21:28.560 --> 21:29.960
我们为了看到这个效果

21:29.960 --> 21:31.760
我们前面给它一个

21:31.760 --> 21:34.760
APP.user的自付串显示

21:34.760 --> 21:35.360
好

21:35.360 --> 21:36.160
生成了

21:36.160 --> 21:39.500
现在我们来看代码

21:39.500 --> 21:40.800
咱们看到这边

21:40.800 --> 21:42.600
APP.user首先

21:42.600 --> 21:44.300
我们两端都没有爆错

21:44.300 --> 21:45.700
我们两端都没有爆错

21:45.700 --> 21:47.000
在这边没有问题

21:47.000 --> 21:50.400
在我们的terror的VSCode中

21:50.400 --> 21:51.400
也没有爆错

21:51.400 --> 21:53.000
但是它后面给你呈现的是一个

21:53.000 --> 21:54.000
undefined

21:54.000 --> 21:57.400
它表示没办法去读到这个值

21:57.400 --> 22:00.000
这一点需要说明的是

22:00.000 --> 22:02.500
如果说我们在js中

22:02.500 --> 22:04.400
我们的内中disk.user

22:04.400 --> 22:06.600
作为属性这样存储的话

22:06.600 --> 22:07.900
在我们的terror中

22:07.900 --> 22:10.600
它是无法直接获取这个值的

22:10.600 --> 22:12.100
无法直接获取它的属性的

22:12.100 --> 22:13.700
你说老师这不是累吗

22:13.700 --> 22:15.600
这不是当前的属性吗

22:15.600 --> 22:16.500
不行

22:16.500 --> 22:19.000
你需要额外的在这边

22:19.000 --> 22:20.700
在我们的APP里面

22:20.700 --> 22:23.600
去定义一个对象

22:23.600 --> 22:24.800
去定义一个对象

22:24.800 --> 22:28.300
你把你现在的值往对象里去放置

22:28.300 --> 22:29.500
是这个意思

22:29.500 --> 22:32.900
那么我们参照微信本身原生的概念

22:32.900 --> 22:37.700
定义一个Global Data

22:37.700 --> 22:39.700
我们是定义这个内容

22:39.700 --> 22:43.100
然后我们把你需要用到的值放进去

22:43.100 --> 22:44.900
比如说NAME

22:44.900 --> 22:45.500
帽号

22:45.500 --> 22:47.400
我们给出TOM

22:47.400 --> 22:51.800
同时我们也可以给出其他的类型

22:51.800 --> 22:57.900
比如说我们给出的是用户信息

22:57.900 --> 23:00.900
你可以再给JSON对象

23:00.900 --> 23:04.500
它是属于Gender

23:04.500 --> 23:06.300
我们给E

23:06.300 --> 23:10.700
然后PASS是否通过了True

23:10.700 --> 23:12.400
给出这样的信息来

23:12.400 --> 23:14.100
那么这个是用不到的

23:14.100 --> 23:17.800
不能直接用DIS的方式去给类定义属性的

23:17.800 --> 23:20.900
我们只能单独的去定义一个对象出来

23:20.900 --> 23:24.200
然后在对象内部我们去做这个事情

23:24.200 --> 23:25.400
是这个逻辑

23:25.400 --> 23:27.400
那么这边它说读取读取不到了

23:27.400 --> 23:28.100
当然了

23:28.100 --> 23:30.500
我现在把它给删了

23:30.500 --> 23:31.900
它下面可以了

23:31.900 --> 23:34.500
那么现在我完成了这个操作以后的话

23:34.500 --> 23:37.100
那我APP我在引用的时候

23:37.100 --> 23:39.600
我要去调用这个Global

23:39.600 --> 23:46.100
作为一个APP里边的一个值得直接使用

23:46.100 --> 23:53.000
APP点GlobalData点

23:53.000 --> 23:54.000
用它的点

23:54.000 --> 23:56.500
你看它点的时候的话

23:56.500 --> 23:58.400
我们就能去取到这个NAME

23:58.400 --> 24:01.100
我们来看一下

24:01.100 --> 24:01.800
下面不用管

24:01.800 --> 24:02.600
你不要回车

24:02.600 --> 24:04.400
你一回车的话会打上这个了

24:04.500 --> 24:05.200
你直接把NAME

24:05.200 --> 24:08.900
因为它没法感知你现在自行定义的这个辩量

24:08.900 --> 24:09.800
我们仔细保存

24:09.800 --> 24:12.200
我们看前面这个改一下吧

24:12.200 --> 24:15.740
我们改成GlobalNAME

24:15.740 --> 24:16.540
这是自服串

24:16.540 --> 24:17.340
对吧

24:17.340 --> 24:17.640
好

24:17.640 --> 24:21.600
再来看一下

24:21.600 --> 24:22.000
哦

24:22.000 --> 24:23.200
这边有一个NAME

24:23.200 --> 24:25.200
它说NAME没有定义

24:25.200 --> 24:30.110
我们来查找一下

24:30.110 --> 24:33.410
我们是GlobalData

24:33.410 --> 24:36.410
GlobalData点NAME

24:36.410 --> 24:40.110
我们看一下它的问题在哪里

24:40.210 --> 24:41.210
查了一下

24:41.210 --> 24:43.010
原因主要是这个NAME

24:43.010 --> 24:44.110
它是在Global

24:44.110 --> 24:46.710
在我们的APP点GlobalData里面

24:46.710 --> 24:48.610
它形成了一个保留字

24:48.610 --> 24:49.610
所以的话

24:49.610 --> 24:51.410
我们不能去直接使用NAME

24:51.410 --> 24:53.410
改个名字就可以了

24:53.410 --> 24:53.910
我们写上

24:53.910 --> 24:56.810
比如说LoginType登入类型

24:56.810 --> 24:58.610
这么改个名字

24:58.610 --> 24:59.810
你不能直接修NAME

24:59.810 --> 25:02.710
就是改这个LoginType

25:02.710 --> 25:06.890
然后你来看

25:06.890 --> 25:07.990
看到吗

25:07.990 --> 25:09.690
前面这个我们打自服串

25:09.690 --> 25:11.190
我们把这个看起来

25:11.190 --> 25:12.290
才会觉得这也很像

25:12.290 --> 25:13.090
对吧

25:13.090 --> 25:16.290
这是content内容

25:16.290 --> 25:19.590
我们写上APPContent内容

25:19.590 --> 25:23.890
然后把后面这个打出来

25:23.890 --> 25:24.490
看到吗

25:24.490 --> 25:25.090
出来了

25:25.090 --> 25:25.790
Tom

25:25.790 --> 25:26.290
对吧

25:26.290 --> 25:28.290
所以这样的话是可以取得

25:28.290 --> 25:29.090
不要去用念念

25:29.090 --> 25:29.990
我们再来看一下

25:29.990 --> 25:31.790
以对象的方式

25:31.790 --> 25:38.770
UserInfo改一下

25:38.770 --> 25:39.370
对吧

25:39.370 --> 25:41.470
我们这个对象也被读取到了

25:41.470 --> 25:41.870
好

25:41.870 --> 25:43.170
这样就证明的是

25:43.170 --> 25:45.170
我们现在可以通过

25:45.170 --> 25:46.670
现在的这样的写法

25:46.670 --> 25:48.070
Global的方式来做

25:48.170 --> 25:48.970
注意哦

25:48.970 --> 25:50.570
一定要去完成

25:50.570 --> 25:52.770
你现在的一个这样的定义

25:52.770 --> 25:53.470
那老师

25:53.470 --> 25:54.570
这个词能改吗

25:54.570 --> 25:56.570
比如说我改ABC

25:56.570 --> 25:57.170
然后你是老师

25:57.170 --> 25:58.270
我这边改ABC

25:58.270 --> 25:58.770
可以吗

25:58.770 --> 25:59.970
还是固定的Global

25:59.970 --> 26:04.560
看一下

26:04.560 --> 26:05.560
出来了吧

26:05.560 --> 26:06.760
我刚才说了

26:06.760 --> 26:08.560
我们为了去仿照

26:08.560 --> 26:10.960
和原生小证据一样的概念

26:10.960 --> 26:13.960
也给大家在之后维护代码的时候

26:13.960 --> 26:15.160
不做任何起义

26:15.160 --> 26:17.560
所以我们去定了一个GlobalData

26:17.560 --> 26:18.460
并不是说

26:18.460 --> 26:19.860
这是语法规定

26:19.860 --> 26:21.260
所以我们改其他语法

26:21.360 --> 26:23.060
内容依然是可以的

26:23.060 --> 26:23.560
对吧

26:23.560 --> 26:25.160
所以我们这边要知道

26:25.160 --> 26:27.360
因为在我们GS中的话

26:27.360 --> 26:29.460
我们其实只要在这里面定义

26:29.460 --> 26:30.360
this点

26:30.360 --> 26:31.960
某某某值的话

26:31.960 --> 26:33.260
它就是一个属性

26:33.260 --> 26:34.760
但是由于它使用了

26:34.760 --> 26:36.160
component结构

26:36.160 --> 26:37.260
它是一个类

26:37.260 --> 26:38.260
它是一个强的

26:38.260 --> 26:40.060
强类型的结构出现

26:40.060 --> 26:41.460
那么所以我们讲的是

26:41.460 --> 26:42.560
类的写法

26:42.560 --> 26:43.560
就要求

26:43.560 --> 26:47.360
你单独在类中去定义这个属性

26:47.360 --> 26:48.660
这是它的一个要求

26:48.660 --> 26:49.760
所以我们这么讲

26:49.760 --> 26:51.860
你就直接形成这样的写法

26:51.860 --> 26:52.660
当然

26:52.660 --> 26:54.960
对于我们的tarrow来讲的话

26:54.960 --> 26:58.160
全局操作不限于使用这样的方式

26:58.160 --> 27:00.160
还有其他的格式存在

27:00.160 --> 27:01.060
包括是

27:01.060 --> 27:03.260
我们还可以自行定义一个

27:03.260 --> 27:05.660
global.js的这样的一个

27:06.860 --> 27:07.860
辨量

27:07.860 --> 27:08.660
这个辨量的话

27:08.660 --> 27:12.160
我们还可以自行的给它传直和使用

27:12.160 --> 27:13.660
扩展一种

27:13.660 --> 27:16.260
除了使用我们现在

27:16.260 --> 27:19.260
在app.js中去定义GlobalData

27:19.260 --> 27:21.460
完成这样的一个

27:21.460 --> 27:23.460
全局对象操作的

27:23.460 --> 27:25.960
还可以自行定义一个出来

27:25.960 --> 27:26.860
怎么做呢

27:26.860 --> 27:27.960
先这样

27:27.960 --> 27:29.660
在src下面

27:29.660 --> 27:31.260
咱们右键

27:31.260 --> 27:33.760
你先创建一个js文件出来

27:33.760 --> 27:38.060
咱们就称之为Global.js

27:38.060 --> 27:40.360
你先创建一个全局文件

27:40.360 --> 27:42.060
也就是我们之后的每个页面

27:42.060 --> 27:43.260
都能用到的

27:43.260 --> 27:45.860
在我们的src原码目录下

27:45.860 --> 27:49.160
我们在里面定义一个ConstarGlobal

27:50.970 --> 27:53.480
Data文件

27:54.480 --> 27:56.780
定义一个空的

27:56.780 --> 27:59.180
然后我们做expert

27:59.180 --> 28:00.480
做两个

28:00.480 --> 28:01.880
我们的方法

28:01.880 --> 28:03.180
也就是我们的一个set

28:03.180 --> 28:04.680
一个get

28:04.680 --> 28:06.480
expert

28:06.480 --> 28:07.780
function

28:07.780 --> 28:08.780
在外部

28:08.780 --> 28:09.880
就是暴露接口

28:09.880 --> 28:12.080
直接暴露一个我们的

28:12.080 --> 28:14.380
函数接口

28:14.380 --> 28:16.880
设置GlobalData

28:16.880 --> 28:17.680
设置的时候

28:17.680 --> 28:21.080
我们一般要一个key

28:21.580 --> 28:23.780
我们要两个值

28:23.780 --> 28:26.380
然后我们来写

28:26.380 --> 28:28.780
直接GlobalData里面

28:28.780 --> 28:30.580
我们把key

28:30.580 --> 28:32.480
作为中国号放进

28:32.480 --> 28:34.180
把value放进去

28:34.180 --> 28:35.080
这是属于

28:35.080 --> 28:35.980
第一个

28:35.980 --> 28:39.380
我们的存储方式

28:39.380 --> 28:40.880
就是往里存set

28:40.880 --> 28:42.380
第二个我们再来写一个

28:42.380 --> 28:44.280
要取

28:44.280 --> 28:45.480
我们写expert

28:45.480 --> 28:46.980
同样写个function

28:46.980 --> 28:52.860
我们getGlobalData

28:52.860 --> 28:54.260
我们做个key

28:54.260 --> 28:55.960
它是可以取值

28:55.960 --> 28:57.460
我们写上return

28:57.460 --> 29:00.060
注意要set的时候是没有return的

29:00.060 --> 29:01.360
那么key的话

29:01.360 --> 29:02.460
作为get来讲

29:02.460 --> 29:09.500
它需要返回GlobalData

29:09.500 --> 29:11.500
中国号key

29:11.500 --> 29:12.600
这样取

29:12.600 --> 29:13.300
注意要

29:13.300 --> 29:15.300
由于我现在是单定义了

29:15.300 --> 29:16.900
一个Global.js

29:16.900 --> 29:18.600
所以我在这里面

29:18.600 --> 29:20.000
你如果单写function

29:20.000 --> 29:21.800
是无法被外面获取的

29:21.800 --> 29:23.600
你一定要写个expert

29:23.600 --> 29:25.500
代表我们把这个函数

29:25.500 --> 29:27.100
明暴露出去

29:27.100 --> 29:28.200
暴露出去以后

29:28.200 --> 29:30.400
你只要需要使用的页面

29:30.400 --> 29:31.900
引入这个内容

29:31.900 --> 29:35.800
它就自行可以直接使用get and set

29:35.800 --> 29:37.000
是这个逻辑

29:37.000 --> 29:38.100
那么我们来看

29:38.100 --> 29:39.000
现在我把这些好了

29:39.000 --> 29:40.100
我不关它了

29:40.100 --> 29:42.300
然后我们到需要使用的页面

29:42.300 --> 29:45.400
我们到index.js

29:45.400 --> 29:46.300
就是当前页面

29:46.300 --> 29:48.700
我想对它取合复

29:48.700 --> 29:50.200
在做这个之前的话

29:50.200 --> 29:53.810
首先你得把它引进来

29:53.810 --> 29:55.510
引入

29:55.510 --> 29:57.010
impart

29:57.010 --> 30:01.520
然后这边我们要写上的是

30:01.520 --> 30:03.020
我们直接来

30:03.020 --> 30:05.920
我们把这个

30:05.920 --> 30:10.420
同名的文件拿出来

30:10.420 --> 30:12.220
先做set

30:12.220 --> 30:15.660
from

30:15.660 --> 30:16.760
它的位置在哪里

30:16.760 --> 30:17.660
我们看一下

30:17.660 --> 30:20.060
它的上一层index的

30:20.060 --> 30:23.560
再上一层pader

30:23.560 --> 30:25.560
再和它pader同级下面

30:25.560 --> 30:26.160
是不是

30:26.160 --> 30:27.360
pader同级下面的Global

30:27.460 --> 30:30.460
所以它要退两层

30:30.460 --> 30:30.960
看到吗

30:30.960 --> 30:31.560
有提示

30:31.560 --> 30:32.060
告诉你

30:32.060 --> 30:33.460
这边有Global

30:33.460 --> 30:35.560
注意没有GS的后追

30:35.560 --> 30:37.560
然后设置的话

30:37.560 --> 30:39.960
既然我以我的

30:39.960 --> 30:41.260
中国号的

30:41.260 --> 30:43.160
就是定名的方式

30:43.160 --> 30:44.360
确定名称的方式

30:44.360 --> 30:45.260
拿到它

30:45.260 --> 30:47.660
然后此时我们就到下面来

30:47.660 --> 30:49.260
我们刚才看到的是

30:49.260 --> 30:50.160
well amount

30:50.160 --> 30:50.960
先执行

30:50.960 --> 30:52.660
然后后面是属于

30:52.660 --> 30:53.360
后面的

30:53.360 --> 30:54.560
比如说get and show

30:54.560 --> 30:55.160
get and mount

30:55.160 --> 30:56.960
最后会执行的是get and mount

30:56.960 --> 30:59.060
所以我们就拿这两项

30:59.060 --> 30:59.960
来做测试

30:59.960 --> 31:00.660
刚开始

31:00.660 --> 31:02.660
肯定是进入到well amount

31:02.660 --> 31:03.760
那么既然我这边

31:03.760 --> 31:05.860
已经完成了set global data

31:05.860 --> 31:07.160
所以我在well amount

31:07.160 --> 31:08.960
里面就直接使用了

31:08.960 --> 31:10.060
你是可以的

31:10.060 --> 31:10.760
然后

31:10.760 --> 31:11.360
这边

31:11.360 --> 31:13.660
我们给它来设定一下

31:13.660 --> 31:14.660
里面是什么

31:14.660 --> 31:15.860
我们注意

31:15.860 --> 31:17.160
我们要用它的话

31:17.160 --> 31:18.560
我们要用一个key

31:18.560 --> 31:19.560
一个value

31:19.560 --> 31:20.660
所以我们第一个

31:20.660 --> 31:21.460
我们给出的是

31:21.460 --> 31:21.960
比如说

31:21.960 --> 31:23.060
我们就给

31:23.060 --> 31:24.660
login登录类型

31:24.660 --> 31:25.660
然后

31:25.660 --> 31:26.460
逗号

31:26.460 --> 31:27.160
第二个参数

31:27.160 --> 31:28.160
我们给一个

31:28.960 --> 31:30.960
就这样直接这样设置

31:30.960 --> 31:32.960
那么我们还需要在

31:32.960 --> 31:35.260
get amount里面去取它

31:35.260 --> 31:36.860
首先这样你运行以后的话

31:36.860 --> 31:38.260
它肯定不会爆错

31:38.260 --> 31:38.960
这是

31:38.960 --> 31:39.960
然后意味着

31:39.960 --> 31:41.360
语法是可以的

31:41.360 --> 31:41.960
第二

31:41.960 --> 31:43.360
我们要使用get

31:43.360 --> 31:44.760
你这边用get的话

31:44.760 --> 31:45.360
请注意

31:45.360 --> 31:46.860
这里面有一点

31:46.860 --> 31:51.120
你不能这样写

31:51.120 --> 31:53.220
你不能这样写

31:53.220 --> 31:53.920
你这样写

31:53.920 --> 31:54.520
保存以后

31:54.520 --> 31:55.620
它有一个爆错

31:55.620 --> 31:56.220
你爆错

31:56.220 --> 31:57.620
看它的提示

31:57.620 --> 31:58.620
它告诉你说

31:58.620 --> 32:00.420
无法在同意文件中

32:00.420 --> 32:02.220
import相同的包

32:02.220 --> 32:03.620
虽然你完成了两个

32:03.620 --> 32:04.520
不同的定名

32:04.520 --> 32:05.420
但是问题是

32:05.420 --> 32:06.920
你导入相同包

32:06.920 --> 32:07.920
那怎么办呢

32:07.920 --> 32:08.720
很简单

32:08.720 --> 32:09.620
你把它写在一句话上

32:09.620 --> 32:10.020
就行了

32:10.020 --> 32:12.220
你把它写这

32:12.220 --> 32:12.820
对吧

32:12.820 --> 32:15.020
你在导一个文件出来的时候的话

32:15.020 --> 32:16.420
你给它以中国号的

32:16.420 --> 32:17.920
以逗号的方式

32:17.920 --> 32:19.020
完成两个定名

32:20.220 --> 32:20.520
对吧

32:20.520 --> 32:20.920
这样的话

32:20.920 --> 32:22.220
是不是就可以了

32:22.220 --> 32:23.520
然后你再保存一下

32:23.520 --> 32:24.620
我们看下面

32:24.620 --> 32:25.620
没有问题了吧

32:25.620 --> 32:26.020
ok

32:26.020 --> 32:28.020
继续推他行李使用

32:28.020 --> 32:29.520
我们对他在data

32:29.520 --> 32:30.220
mount里面

32:30.220 --> 32:30.620
注意啊

32:30.620 --> 32:31.420
你的顺序啊

32:31.420 --> 32:32.520
你不能反过来

32:32.520 --> 32:32.920
反过来

32:32.920 --> 32:34.520
他肯定你们没值

32:34.520 --> 32:36.220
他需要去取这个值

32:36.220 --> 32:38.720
所以我们把这个login type

32:38.720 --> 32:39.820
这样的key给他

32:41.220 --> 32:42.720
然后取出的值

32:42.720 --> 32:44.720
他一定是作为我们看到了

32:44.720 --> 32:45.920
他是作为return

32:45.920 --> 32:47.120
一定返回的

32:47.120 --> 32:47.720
所以我这边

32:47.720 --> 32:49.520
也不做任何的其他的操作

32:49.520 --> 32:50.620
先看一下

32:50.620 --> 32:52.820
是否可以取得这个值

32:52.820 --> 32:54.520
然后为了显示成功

32:54.520 --> 32:55.820
我们需要在前面

32:55.820 --> 32:57.220
我们定一个简单的

32:57.220 --> 32:58.020
告诉他

32:58.020 --> 33:01.520
这是login type冒号

33:01.520 --> 33:02.120
好吧

33:02.120 --> 33:03.420
这样显示一下

33:03.420 --> 33:04.320
根据S保存

33:04.320 --> 33:05.720
我们来打开页面

33:05.720 --> 33:06.320
看一下

33:07.920 --> 33:08.620
看到吗

33:08.620 --> 33:09.320
这一下

33:09.320 --> 33:12.520
这个是我们存储在我们AV.js里面的

33:12.520 --> 33:13.220
那么这个呢

33:13.220 --> 33:13.920
login type

33:13.920 --> 33:15.220
他是本身自己

33:15.220 --> 33:17.420
我们定义了一个

33:17.420 --> 33:19.420
全局的一个

33:19.420 --> 33:20.520
GS文件

33:20.520 --> 33:22.520
然后让他来进行存储

33:22.520 --> 33:23.920
那么这样的方式呢

33:23.920 --> 33:25.020
对于我们的操作

33:25.020 --> 33:26.120
也算比较简单的

33:26.120 --> 33:28.120
因为我们不需要在这里面

33:28.120 --> 33:29.120
再去完成

33:29.120 --> 33:30.520
这样的Global的定义

33:30.520 --> 33:31.720
这两种方式呢

33:31.720 --> 33:32.620
对你来讲

33:32.620 --> 33:34.220
都可以操作

33:34.220 --> 33:34.620
对吧

33:34.620 --> 33:36.520
这样的方式都可以操作

33:36.520 --> 33:37.320
ok

33:37.320 --> 33:38.920
那么小程序本身自己呢

33:38.920 --> 33:40.920
其实如果你是react的话

33:40.920 --> 33:43.220
你是那个redux

33:43.220 --> 33:44.220
这个其实也能

33:44.220 --> 33:45.120
但是对于他来讲

33:45.120 --> 33:46.420
太重了

33:46.420 --> 33:47.220
太重了

33:47.220 --> 33:48.520
所以这两项操作

33:48.520 --> 33:49.620
这两个方式的话

33:49.620 --> 33:51.620
其实对于倾量级小程序来讲的话

33:51.620 --> 33:53.120
已经足够

33:53.120 --> 33:53.820
那么当然

33:53.820 --> 33:55.020
如果我们在后面

33:55.020 --> 33:56.820
还用到其他的方式的话

33:56.820 --> 33:58.720
包括是有数据固存储的话

33:58.720 --> 33:59.720
云端存储

33:59.720 --> 34:01.420
这种也可以

34:01.420 --> 34:02.220
是吧

34:02.220 --> 34:04.020
那么记住这两个方式的操作

34:04.020 --> 34:04.520
与法

34:04.520 --> 34:06.520
包括是我们定名的

34:06.520 --> 34:08.020
不同的

34:08.020 --> 34:08.820
我们的函数

34:08.820 --> 34:11.220
只能用一个引入进来

34:11.220 --> 34:11.720
ok

34:11.720 --> 34:13.020
那么这就是我们这边

34:13.020 --> 34:14.220
所设计到的

34:14.220 --> 34:15.620
我们的get

34:15.620 --> 34:16.420
app

34:16.420 --> 34:19.020
直接用原生getapp的写法

34:19.020 --> 34:21.320
和我们自行定义一个

34:21.320 --> 34:22.920
完成getapp的这样的

34:22.920 --> 34:24.620
一个全局的文件的操作的

34:24.620 --> 34:26.920
两个写法都给大家展示的

34:26.920 --> 34:28.020
那么希望大家

34:28.020 --> 34:28.820
去看一下

34:28.820 --> 34:30.720
然后自行的再操作一下

34:30.720 --> 34:32.120
特别是对一些

34:32.120 --> 34:33.220
不可运行的

34:33.220 --> 34:35.020
或者说错误也不报

34:35.020 --> 34:36.220
但是就是没有结果的

34:36.220 --> 34:37.620
像这种类型的

34:37.620 --> 34:38.820
特别注意

34:38.820 --> 34:39.320
好吧

34:39.320 --> 34:39.720
好

34:39.720 --> 34:40.320
那么这些课呢

34:40.320 --> 34:40.820
就先上到这

