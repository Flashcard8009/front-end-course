WEBVTT

00:00.370 --> 00:07.370
本堂课开始 我们就来说一下webgl如何绘制图形的

00:07.370 --> 00:15.370
我上一堂课也说了说webgl它能绘制的基本图形 基本的图圆只有三种

00:15.370 --> 00:20.370
一种是点 第二种是线段 第三种是三要形

00:20.370 --> 00:25.370
那我们先从最简单的一个图形来开始说 就是我们的点

00:25.370 --> 00:30.370
那在webgl里面绘制图形的时候要有这么几步

00:30.370 --> 00:34.370
那首先我们要获取到这个webgl会图上下文

00:34.370 --> 00:39.370
那webgl它是h5出来的嘛 对吧

00:39.370 --> 00:45.370
那这个会图上下文我们就需要依靠cowards元素

00:45.370 --> 00:50.370
那理解吧 因为我们这个webgl它也是用于会图的

00:50.370 --> 00:54.370
所以它是需要依赖于cowards元素的

00:54.370 --> 00:59.370
那在我们学cowards的时候它是不是有一个上下文对象

00:59.370 --> 01:02.370
那我们那时候是怎么获取的上下文对象

01:02.370 --> 01:05.370
是不是通过获取到cowards元素之后

01:05.370 --> 01:13.370
然后去获取cowards身上的 去运用cowards身上的一个guide context

01:13.370 --> 01:18.370
方法来获取上下文对象 对吧

01:18.370 --> 01:22.370
我们webgl也是一样的 那我们边说边来写

01:22.370 --> 01:29.020
可以吧 我们现在边说边来写 帮我们代码打开

01:29.020 --> 01:33.020
里面什么都没有 来 先生成一个html结构

01:33.020 --> 01:40.360
来写个标题吧 这块 会质点

01:40.360 --> 01:48.450
ok 然后我们来cowards对吧

01:48.450 --> 01:54.450
它要依附于cowards的话我们就需要写一个cowards

01:54.450 --> 01:58.450
然后我们给它加一个宽度和高度 对吧

01:58.450 --> 02:03.450
cowards画布的一个大小 对不对 电影一下

02:03.450 --> 02:06.450
接下来呢 是不是要给这个cowards加个id

02:06.450 --> 02:13.820
以便于我们去获取它 以便于我们用gs去获取它 对不对

02:13.820 --> 02:17.820
大家都知道cowards画布 cowards会图的话

02:17.820 --> 02:21.820
一般是通过gs代码进行一个会设的 对吧

02:21.820 --> 02:25.820
所以我们都需要在这来 我们webgl也是一样的

02:25.820 --> 02:29.820
好 我们首先获取到cowards这个元素

02:29.820 --> 02:33.820
到q们的点 get element by d

02:33.820 --> 02:38.820
ok吧 获取完元素之后 我们获取上下文对象

02:38.820 --> 02:41.820
那这个上下文对象就是在cowards身上

02:41.820 --> 02:44.820
有get context方法

02:44.820 --> 02:49.820
那我们在cowards的时候 说会图对象

02:49.820 --> 02:53.820
我们用到的是2d 对吧 这里传的是一个2d

02:53.820 --> 02:55.820
在我们webgl里面呢

02:55.820 --> 02:58.820
我们传递的就是webgl了

02:58.820 --> 03:00.820
不上2d了

03:00.820 --> 03:03.820
ok 那还有一点 就是我们这个

03:03.820 --> 03:07.820
webgl它是H5里面新增的

03:07.820 --> 03:10.820
所以有一些浏览器它是不兼容的

03:10.820 --> 03:12.820
像i18之前都是不兼容的

03:12.820 --> 03:15.820
所以我们在用webgl的时候

03:15.820 --> 03:17.820
你必须要做一个判断

03:18.820 --> 03:20.820
你要做一个判断 对吧

03:20.820 --> 03:22.820
判断一下我们这浏览器到底有没有

03:22.820 --> 03:25.820
如果有的话 它会反复给你的对象

03:25.820 --> 03:27.820
如果没有的话

03:27.820 --> 03:30.820
它就是一个na

03:30.820 --> 03:33.820
它就是一个na之 那联系吧

03:33.820 --> 03:35.820
那我们这块就可以判断一下

03:35.820 --> 03:37.820
判断它是不是存在的

03:37.820 --> 03:41.820
如果不存在 我让它弹出一个团框

03:41.820 --> 03:44.820
我先告诉你 浏览器

03:44.820 --> 03:49.820
浏览器不支持webgl

03:49.820 --> 03:55.160
ok 然后接下来

03:55.160 --> 03:57.160
接着往下来

03:57.160 --> 04:00.160
现在我们这个 获取webgl

04:00.160 --> 04:03.160
会图上下文已经写完了

04:03.160 --> 04:06.160
接下来我们来初始化着色器

04:06.160 --> 04:09.160
那下一步初始化着色器是什么意思呢

04:09.160 --> 04:12.160
我们上一趟可以讲过着色器什么

04:12.160 --> 04:15.160
这个着色器就是用jrsr

04:15.160 --> 04:18.160
来实现的一个着色的代码 对不对

04:18.160 --> 04:21.160
它是作用在我们这个GPU上的 对吧

04:21.160 --> 04:24.160
是通过GPU进行计算的

04:24.160 --> 04:28.160
那这个着色器在我们前端页面里面

04:28.160 --> 04:31.160
如何来使用呢

04:31.160 --> 04:33.160
如何来声明呢

04:33.160 --> 04:36.160
我们在写着色器语言的时候

04:36.160 --> 04:38.160
有两种方式

04:38.160 --> 04:41.160
一种是我们可以用自乌串的形式

04:41.160 --> 04:43.160
来借s代码里

04:43.160 --> 04:45.160
就是我们这个javascript代码里面

04:45.160 --> 04:48.160
就是像这样我再写一个自乌串

04:48.160 --> 04:51.160
然后自乌串里面我们就可以来写

04:51.160 --> 04:53.160
我们的这个着色器代码了

04:53.160 --> 04:54.160
着色器程序了

04:54.160 --> 04:55.160
可以吧

04:55.160 --> 04:58.160
那还有一种比较方便的一种方式

04:58.160 --> 04:59.160
怎么来写呢

04:59.160 --> 05:01.160
我们可以写在screw标签里面

05:01.160 --> 05:04.160
但是写在screw标签里面的话

05:04.160 --> 05:06.160
它会以直接这样来写的话

05:06.160 --> 05:10.160
它会以javascript代码进行一个解析之行

05:10.160 --> 05:11.160
对不对

05:11.160 --> 05:12.160
但是我们的着色器语言

05:12.160 --> 05:14.160
与javascript语言是有区别的

05:14.160 --> 05:17.160
它们的区别是什么样的

05:17.160 --> 05:19.160
一会我们看到这个着色器语言

05:19.160 --> 05:20.160
大家就知道了

05:20.160 --> 05:24.160
那我们不想让它以javascript的语言

05:24.160 --> 05:26.160
进行一个解析的话

05:26.160 --> 05:27.160
怎么办呢

05:27.160 --> 05:29.160
我们只需要在screw的身上

05:29.160 --> 05:31.160
加一个type值

05:31.160 --> 05:32.160
这个type值

05:32.160 --> 05:34.160
它只要不是javascript的

05:34.160 --> 05:36.160
其他的值都可以

05:36.160 --> 05:37.160
可以吧

05:37.160 --> 05:39.160
例如我来个note.js

05:39.160 --> 05:42.160
它不是一个ds代码

05:42.160 --> 05:43.160
对吧

05:43.160 --> 05:45.160
然后我们的着色器

05:45.160 --> 05:47.160
还分成两种着色器

05:47.160 --> 05:48.160
现在说出实话

05:48.160 --> 05:49.160
着色器

05:49.160 --> 05:50.160
我们接着往下来看

05:50.160 --> 05:53.160
着色器还分成两种着色器

05:53.160 --> 05:55.160
一种叫顶点着色器

05:55.160 --> 05:58.160
还有一种叫片源着色器

05:58.160 --> 05:59.160
那顶点着色器

05:59.160 --> 06:01.160
它做的事就是

06:01.160 --> 06:04.160
来存储一些顶点信息的

06:04.160 --> 06:07.160
来绘制一些顶点信息的

06:07.160 --> 06:08.160
片源着色器

06:08.160 --> 06:12.160
它是进行偏冲颜色的

06:12.160 --> 06:13.160
能理解吧

06:13.160 --> 06:14.160
偏冲样式

06:14.160 --> 06:16.160
偏冲颜色的

06:16.160 --> 06:18.160
这是这两种着色器

06:18.160 --> 06:19.160
然后看一下简单

06:19.160 --> 06:20.160
看一下它俩的一个代码

06:20.160 --> 06:22.160
是什么样子的

06:22.160 --> 06:26.160
在着色器语言里面

06:26.160 --> 06:29.160
它里面也是有声明的

06:29.160 --> 06:31.160
那这个声明的一种方式

06:31.160 --> 06:32.160
看一下下面这一部分

06:32.160 --> 06:34.160
它的声明方式

06:34.160 --> 06:36.160
是通过三个关键词

06:36.160 --> 06:37.160
一个是这个

06:37.160 --> 06:38.160
两个关键词

06:38.160 --> 06:40.160
后面一个变量名称

06:40.160 --> 06:42.160
第一个关键词代表什么意思

06:42.160 --> 06:44.160
它代表的是存储运算符

06:44.160 --> 06:45.160
就是这个 attribute

06:45.160 --> 06:47.160
这一块有

06:47.160 --> 06:48.160
在这里

06:48.160 --> 06:50.160
变量的一个声明

06:50.160 --> 06:52.160
它分成这三部分

06:52.160 --> 06:54.160
第一部分是存储限定符

06:54.160 --> 06:55.160
那这个存储限定符

06:55.160 --> 06:57.160
保存的是什么呢

06:57.160 --> 06:58.160
就是说

06:58.160 --> 07:00.160
我的这个变量

07:00.160 --> 07:02.160
我对变量的一个描述

07:02.160 --> 07:03.160
我认为这个变量

07:03.160 --> 07:05.160
应该是什么类型的一个变量

07:05.160 --> 07:07.160
它并不是说数据类型

07:07.160 --> 07:09.160
而是这个变量的类型

07:09.160 --> 07:10.160
可以吧

07:10.160 --> 07:12.160
就是我存储这个变量这个位置

07:12.160 --> 07:14.160
它应该是什么变量

07:14.160 --> 07:16.160
它是一个

07:16.160 --> 07:18.160
与定列相关的变量

07:18.160 --> 07:19.160
还是

07:19.160 --> 07:21.160
还是一个可变变量

07:21.160 --> 07:23.160
还是一个全举变量

07:23.160 --> 07:24.160
对吧

07:24.160 --> 07:25.160
我们都是通过

07:25.160 --> 07:27.160
存储限定符来限定的

07:27.160 --> 07:28.160
然后第二个值

07:28.160 --> 07:31.160
是这个数据类型了

07:31.160 --> 07:32.160
那你再把

07:32.160 --> 07:33.160
第二个值

07:33.160 --> 07:35.160
变量的一个类型

07:35.160 --> 07:37.160
变量的一个数据类型

07:37.160 --> 07:38.160
那

07:38.160 --> 07:40.160
变量数据类型有几种

07:40.160 --> 07:41.160
一会我们再来说

07:41.160 --> 07:42.160
可以吧

07:42.160 --> 07:43.160
第三个

07:43.160 --> 07:44.160
才是变量名称

07:44.160 --> 07:45.160
那这是在我们

07:45.160 --> 07:47.160
jrsr中

07:47.160 --> 07:49.160
声明变量的方法

07:49.160 --> 07:51.160
然后我们再先来看一下

07:51.160 --> 07:52.160
存储限定符

07:52.160 --> 07:54.160
它分为哪些种

07:54.160 --> 07:55.160
存储限定符呢

07:55.160 --> 07:56.160
有这么四种

07:56.160 --> 07:58.160
第一种是 attribute

07:58.160 --> 07:59.160
就是我们刚才看到

07:59.160 --> 08:00.160
粒子里面的一个

08:00.160 --> 08:02.160
它代表的是

08:02.160 --> 08:05.160
这个变量与顶点相关

08:05.160 --> 08:06.160
能理解吧

08:06.160 --> 08:09.160
这个数据是与顶点相关的

08:09.160 --> 08:11.160
然后uniform这个变量

08:11.160 --> 08:13.160
它代表的是什么呢

08:13.160 --> 08:16.160
它代表的是一个全举变量

08:16.160 --> 08:18.160
它是与所有的顶点都相关

08:18.160 --> 08:20.160
上面这个 attribute

08:20.160 --> 08:22.160
只是自己

08:22.160 --> 08:24.160
相关每一个顶点

08:24.160 --> 08:26.160
与每一个顶点相关

08:26.160 --> 08:27.160
并不是说

08:27.160 --> 08:28.160
所有的顶点都相关

08:28.160 --> 08:31.160
而是单独的一个顶点

08:31.160 --> 08:32.160
这个uniform

08:32.160 --> 08:33.160
它声明的一个变量

08:33.160 --> 08:34.160
它还是

08:34.160 --> 08:36.160
与所有的顶点都相关的

08:36.160 --> 08:38.160
就相当于一个全举变量了

08:38.160 --> 08:40.160
可以吧

08:40.160 --> 08:41.160
然后texture

08:41.160 --> 08:42.160
它这个变量

08:42.160 --> 08:44.160
声明的是一个文理作标

08:44.160 --> 08:46.160
文理变量

08:46.160 --> 08:47.160
这个文理代表什么意思

08:47.160 --> 08:48.160
其实就相当于

08:48.160 --> 08:51.160
给一个物体

08:51.160 --> 08:52.160
给一个物体

08:52.160 --> 08:53.160
或者给一个人物

08:53.160 --> 08:55.160
现在皮肤的一个

08:55.160 --> 08:56.160
一个作用

08:56.160 --> 08:57.160
能理解吧

08:57.160 --> 08:59.160
它就相当于一个皮肤

08:59.160 --> 09:01.160
那这个皮肤

09:01.160 --> 09:02.160
我们拿过来的

09:02.160 --> 09:03.160
应该是一个

09:03.160 --> 09:05.160
这个皮肤的一个数据

09:05.160 --> 09:07.160
这里面是一个数据

09:07.160 --> 09:09.160
然后具体

09:09.160 --> 09:10.160
它到底怎么来用

09:10.160 --> 09:11.160
我们

09:11.160 --> 09:13.160
后面还有一堂课

09:13.160 --> 09:15.160
在讲文理的时候

09:15.160 --> 09:17.160
会带着大家来说

09:17.160 --> 09:18.160
可以吧

09:18.160 --> 09:19.160
然后第四个变量

09:19.160 --> 09:20.160
是 wiring

09:20.160 --> 09:21.160
代表的是可变变量

09:21.160 --> 09:23.160
这个可变变量有什么用呢

09:23.160 --> 09:26.160
它是在我们的

09:26.160 --> 09:28.160
顶点着色器和着色

09:28.160 --> 09:30.160
和片源着色器之间

09:30.160 --> 09:32.160
可以进行一个

09:32.160 --> 09:35.160
传递的一个变量

09:35.160 --> 09:36.160
可以吧

09:36.160 --> 09:37.160
这是 wiring 变量

09:37.160 --> 09:38.160
代表是可变变量

09:38.160 --> 09:39.160
也就是说

09:39.160 --> 09:41.160
我在顶点着色器里面

09:41.160 --> 09:43.160
如果把这个变

09:43.160 --> 09:45.160
把这个变量进行一个变化

09:45.160 --> 09:46.160
变化的话

09:46.160 --> 09:47.160
我们在

09:47.160 --> 09:49.160
片源着色器里面

09:49.160 --> 09:51.160
你是可以接收到这个变化的

09:51.160 --> 09:52.160
可以吧

09:52.160 --> 09:54.160
那这是这四种

09:54.160 --> 09:56.160
存储限定幅

09:56.160 --> 09:58.160
我们再来看一下

09:58.160 --> 10:00.160
变量的类型

10:00.160 --> 10:02.160
变量类型有这么两大类

10:02.160 --> 10:03.160
一类是使量

10:03.160 --> 10:05.160
一类是举证

10:05.160 --> 10:06.160
一类是使量

10:06.160 --> 10:07.160
一类是举证

10:07.160 --> 10:09.160
那使量

10:09.160 --> 10:10.160
使量不用多说

10:10.160 --> 10:11.160
对不对

10:11.160 --> 10:12.160
它就是一个

10:12.160 --> 10:13.160
有方向的

10:13.160 --> 10:14.160
一个坐标

10:14.160 --> 10:15.160
对不对

10:15.160 --> 10:16.160
有方向的一个坐标

10:16.160 --> 10:17.160
由原心

10:17.160 --> 10:18.160
指向这一点

10:18.160 --> 10:19.160
坐标

10:19.160 --> 10:20.160
对吧

10:20.160 --> 10:21.160
这个点坐标

10:21.160 --> 10:23.160
我们可以分成这么多种

10:23.160 --> 10:24.160
是二维的

10:24.160 --> 10:25.160
三维的

10:25.160 --> 10:26.160
还是四维的

10:26.160 --> 10:27.160
可以吧

10:27.160 --> 10:28.160
是

10:28.160 --> 10:29.160
然后

10:29.160 --> 10:31.160
通过这么多种

10:31.160 --> 10:32.160
就二四类

10:32.160 --> 10:33.160
三维四维

10:33.160 --> 10:35.160
来分成这个数据类型

10:35.160 --> 10:37.160
有这么几种

10:37.160 --> 10:39.160
一种是

10:39.160 --> 10:40.160
一类

10:40.160 --> 10:41.160
这是一类

10:41.160 --> 10:42.160
一类是这个

10:42.160 --> 10:43.160
由二三四个

10:43.160 --> 10:45.160
伏电数组成的这个使量

10:46.160 --> 10:47.160
这个使量

10:47.160 --> 10:48.160
其实你就可以理解为

10:48.160 --> 10:50.160
它就是一个坐标

10:50.160 --> 10:51.160
它就是一个坐标

10:51.160 --> 10:52.160
那这个二三四维

10:52.160 --> 10:53.160
伏电型

10:53.160 --> 10:54.160
就是相当于这个坐标的

10:54.160 --> 10:55.160
每一位

10:55.160 --> 10:56.160
每一位

10:56.160 --> 10:58.160
它都是一个伏电数

10:58.160 --> 10:59.160
可以吧

10:59.160 --> 11:00.160
每一位都是一个伏电数

11:02.160 --> 11:03.160
然后我们再接着

11:03.160 --> 11:04.160
下面这个

11:04.160 --> 11:05.160
IVEC2

11:05.160 --> 11:06.160
IVEC3

11:06.160 --> 11:07.160
IVEC4

11:07.160 --> 11:08.160
它代表是

11:08.160 --> 11:12.160
二三四个整形元素

11:12.160 --> 11:15.160
由二三四个整形元素

11:15.160 --> 11:16.160
组成的一个使量

11:16.160 --> 11:17.160
就相当于

11:17.160 --> 11:18.160
它的坐标里面

11:18.160 --> 11:19.160
是二三四维的

11:19.160 --> 11:20.160
分别都是

11:20.160 --> 11:21.160
二三四维的

11:22.160 --> 11:23.160
它们每一个

11:23.160 --> 11:24.160
都是一个类型

11:24.160 --> 11:26.160
并不是组合的

11:26.160 --> 11:27.160
它们每一个

11:27.160 --> 11:28.160
是一个类型的

11:30.160 --> 11:31.160
然后它存储的

11:31.160 --> 11:32.160
上面这个存储

11:32.160 --> 11:33.160
是伏电型

11:33.160 --> 11:35.160
下面这个存储的是整形的

11:35.160 --> 11:36.160
然后BVEC2

11:36.160 --> 11:37.160
BVEC3

11:37.160 --> 11:38.160
BVEC4

11:38.160 --> 11:40.160
它是存储的是

11:40.160 --> 11:41.160
二三四个

11:41.160 --> 11:42.160
博尔

11:42.160 --> 11:44.160
博尔值的元素的使量

11:45.160 --> 11:46.160
可以吧

11:46.160 --> 11:47.160
就是博尔类型的了

11:48.160 --> 11:49.160
然后再接着

11:49.160 --> 11:50.160
举证

11:50.160 --> 11:51.160
第二个类别

11:51.160 --> 11:52.160
举证

11:53.160 --> 11:55.160
这个举证用来做什么呢

11:56.160 --> 11:57.160
举证一般是

11:57.160 --> 11:58.160
用来做一些

11:58.160 --> 12:00.160
复杂的计算的

12:01.160 --> 12:02.160
像如果我想

12:02.160 --> 12:03.160
让一个元素

12:03.160 --> 12:04.160
进行一个旋转

12:04.160 --> 12:05.160
平移

12:05.160 --> 12:06.160
这样的一个操作

12:06.160 --> 12:07.160
或者是

12:08.160 --> 12:09.160
我要改变我的

12:09.160 --> 12:10.160
视角的一个旋转

12:10.160 --> 12:11.160
在改变我这个

12:12.160 --> 12:13.160
在改变我的

12:14.160 --> 12:15.160
这个图形的一个旋转

12:15.160 --> 12:16.160
那这样的话

12:16.160 --> 12:17.160
计算起来

12:17.160 --> 12:18.160
会比较繁琐

12:18.160 --> 12:19.160
对吧

12:19.160 --> 12:20.160
那一般这种

12:20.160 --> 12:21.160
繁琐的计算

12:21.160 --> 12:22.160
我们会通过

12:22.160 --> 12:23.160
举证来使用

12:23.160 --> 12:24.160
可以吧

12:24.160 --> 12:26.160
一般会通过举证

12:26.160 --> 12:27.160
然后举证的类型

12:27.160 --> 12:28.160
有这么多种

12:28.160 --> 12:31.160
有MAT2 MAT3 MAT4

12:31.160 --> 12:32.160
分别代表的是

12:32.160 --> 12:33.160
2×2的举证

12:33.160 --> 12:34.160
3×3的举证

12:34.160 --> 12:35.160
4×4的举证

12:35.160 --> 12:36.160
可以吧

12:38.160 --> 12:39.160
那2×2 3×3 4×4

12:39.160 --> 12:40.160
都代表什么意思

12:40.160 --> 12:41.160
其实你就可以

12:41.160 --> 12:42.160
给它理解为

12:42.160 --> 12:43.160
一个二维数组

12:44.160 --> 12:45.160
可以吧

12:45.160 --> 12:47.860
二维数组

12:47.860 --> 12:48.860
然后

12:48.860 --> 12:49.860
我们再接着往下

12:49.860 --> 12:50.860
这就是我们

12:50.860 --> 12:52.860
这些数据变量

12:52.860 --> 12:53.860
数据类型

12:53.860 --> 12:55.860
变量的一个类型

12:56.860 --> 12:57.860
那好

12:57.860 --> 12:58.860
我们现在

12:58.860 --> 13:00.860
先来初始化一下

13:00.860 --> 13:01.860
这个注册器

13:01.860 --> 13:02.860
可以吧

13:02.860 --> 13:03.860
因为我们现在

13:03.860 --> 13:04.860
接下来要写

13:04.860 --> 13:05.860
初始化注册器

13:05.860 --> 13:06.860
那初始化注册器

13:06.860 --> 13:07.860
我们首先

13:07.860 --> 13:09.860
我们首先需要

13:09.860 --> 13:10.860
需要的是

13:10.860 --> 13:11.860
生命一个变量

13:11.860 --> 13:12.860
对吧

13:12.860 --> 13:13.860
有的人会问老师

13:13.860 --> 13:14.860
我生命的变量

13:14.860 --> 13:15.860
有什么用呢

13:15.860 --> 13:17.860
再写一个点的时候

13:17.860 --> 13:19.860
我们再写一个点的时候

13:19.860 --> 13:20.860
如果你确定

13:20.860 --> 13:21.860
只写一个点了

13:21.860 --> 13:22.860
那我们

13:22.860 --> 13:23.860
完全全不需要

13:23.860 --> 13:24.860
再去生命了

13:25.860 --> 13:26.860
那怎么来写呢

13:26.860 --> 13:27.860
我们先写一个

13:27.860 --> 13:28.860
确定的一个点

13:28.860 --> 13:29.860
那我这里给它起个ID

13:29.860 --> 13:30.860
因为我们

13:30.860 --> 13:31.860
着色器

13:31.860 --> 13:32.860
分成两种着色器

13:32.860 --> 13:33.860
对不对

13:33.860 --> 13:34.860
一个是片源

13:34.860 --> 13:35.860
一个是顶点

13:35.860 --> 13:36.860
它俩必须是分开的

13:36.860 --> 13:38.860
它俩不能是在一起的

13:38.860 --> 13:39.860
那这个

13:39.860 --> 13:40.860
顶点着色器

13:40.860 --> 13:41.860
我给它起名

13:41.860 --> 13:42.860
叫WallTags

13:43.860 --> 13:44.860
可以吧

13:44.860 --> 13:45.860
然后里面

13:45.860 --> 13:47.860
我就直接来个Wall

13:47.860 --> 13:48.860
慢

13:48.860 --> 13:49.860
我这是为什么要写

13:49.860 --> 13:50.860
Wall慢

13:50.860 --> 13:52.860
在我们JRS

13:52.860 --> 13:53.860
除了

13:53.860 --> 13:56.860
JRS

13:56.860 --> 13:59.860
是JRS

13:59.860 --> 14:00.860
是这么读的

14:00.860 --> 14:01.860
我看看

14:02.860 --> 14:03.860
JRSL

14:03.860 --> 14:04.860
JRSL

14:04.860 --> 14:05.860
这个着色器

14:05.860 --> 14:07.860
语言之外

14:08.860 --> 14:10.860
除了我们JRS的语言

14:10.860 --> 14:13.860
除了JRS的语言之外

14:13.860 --> 14:15.860
几乎所有的

14:15.860 --> 14:18.860
几乎所有的语言里面

14:18.860 --> 14:20.860
在写

14:20.860 --> 14:21.860
在写代码的时候

14:21.860 --> 14:23.860
它都需要一个主函数

14:23.860 --> 14:25.860
它最后执行的是

14:25.860 --> 14:26.860
一个主函数

14:26.860 --> 14:27.860
可以吧

14:27.860 --> 14:29.860
并且它的主函数

14:29.860 --> 14:31.860
几乎都是需要有

14:31.860 --> 14:33.860
一个返回类型的

14:33.860 --> 14:35.860
它的返回类型在哪儿写呢

14:35.860 --> 14:36.860
是在

14:36.860 --> 14:38.860
主函数的前边

14:38.860 --> 14:40.860
前边来写下

14:40.860 --> 14:42.860
这个函数的一个返回类型

14:43.860 --> 14:44.860
OK

14:44.860 --> 14:45.860
然后

14:45.860 --> 14:48.860
如果你要是没有任何的返回类型的话

14:48.860 --> 14:50.860
我们可以给它写一个

14:50.860 --> 14:52.860
Voy的代表是空类型的

14:52.860 --> 14:53.860
可以吧

14:53.860 --> 14:55.860
就是没有返回类型的类型

14:55.860 --> 14:56.860
OK吧

14:56.860 --> 14:57.860
然后我们接下来

14:57.860 --> 15:00.860
怎么来写这个顶点着色器呢

15:00.860 --> 15:01.860
顶点着色器里面

15:01.860 --> 15:02.860
我们是要

15:02.860 --> 15:04.860
复顶点做标的

15:04.860 --> 15:05.860
对不对

15:05.860 --> 15:07.860
因为我们这个顶点

15:07.860 --> 15:08.860
着色器里面

15:08.860 --> 15:11.860
就是用来存储顶点信息的

15:11.860 --> 15:13.860
但是存储顶点信息最主要的

15:13.860 --> 15:15.860
就是我们的顶点做标

15:15.860 --> 15:16.860
可以吧

15:16.860 --> 15:17.860
我们在5GL里面

15:17.860 --> 15:18.860
在绘图的时候

15:18.860 --> 15:20.860
分成这两个着色器

15:20.860 --> 15:22.860
我们就一个着色器控制顶点

15:22.860 --> 15:24.860
一个着色器控制颜色对不对

15:24.860 --> 15:25.860
是这样的

15:25.860 --> 15:27.860
所以这个顶点着色器

15:27.860 --> 15:30.860
它主要就是来控制顶点的

15:30.860 --> 15:31.860
那控制顶点什么呢

15:31.860 --> 15:33.860
最主要的就是

15:33.860 --> 15:35.860
JR Position

15:35.860 --> 15:37.860
就是JR Position

15:37.860 --> 15:38.860
这个变量

15:38.860 --> 15:40.860
我们来看一下这里

15:40.860 --> 15:42.860
顶点着色器里面

15:42.860 --> 15:43.860
有几个内置变量

15:43.860 --> 15:44.860
这几个内置变量呢

15:44.860 --> 15:46.860
是我不需要声明

15:46.860 --> 15:48.860
就可以用的

15:48.860 --> 15:49.860
我们可以看一下

15:49.860 --> 15:51.860
它都有哪些

15:51.860 --> 15:52.860
就两个对吧

15:52.860 --> 15:53.860
顶点着色器里面

15:53.860 --> 15:54.860
就两个

15:54.860 --> 15:55.860
一个是JR Position

15:55.860 --> 15:58.860
还有一个是JR Pond size

15:58.860 --> 16:01.860
JR Position代表的是顶点位置

16:01.860 --> 16:02.860
我们可以看一下

16:02.860 --> 16:04.860
这个变量的一个类型

16:04.860 --> 16:05.860
它是VEC4的

16:05.860 --> 16:06.860
代表4位浮电型

16:06.860 --> 16:09.860
组成的一个使量对吧

16:09.860 --> 16:13.860
然后第二个是Float浮电型的

16:13.860 --> 16:16.860
它代表的是JR Pond size对吧

16:16.860 --> 16:19.860
它代表是点的尺寸

16:19.860 --> 16:20.860
然后它注意一点

16:20.860 --> 16:21.860
看一下

16:21.860 --> 16:24.860
注意JR Position是这个变量

16:24.860 --> 16:26.860
必须要被复制的

16:26.860 --> 16:27.860
如果你不复制

16:27.860 --> 16:29.860
你这个图是画不出来的

16:29.860 --> 16:31.860
可以吧

16:31.860 --> 16:33.860
然后JR Pond size

16:33.860 --> 16:35.860
并不是必须的

16:35.860 --> 16:36.860
为什么JR Pond size

16:36.860 --> 16:38.860
它不是必须的

16:38.860 --> 16:39.860
JR Pond size

16:39.860 --> 16:41.860
它是表示一个点的坐标

16:41.860 --> 16:42.860
对吧

16:42.860 --> 16:44.860
它是表示的一个点的坐标

16:44.860 --> 16:47.860
那我如果会指的是一个图形的话

16:47.860 --> 16:48.860
那我点的

16:48.860 --> 16:50.860
这个JR Pond size

16:50.860 --> 16:51.860
它表示的是这样

16:51.860 --> 16:52.860
点的尺寸

16:52.860 --> 16:53.860
看着点的尺寸

16:53.860 --> 16:55.860
说点坐标了

16:55.860 --> 16:56.860
嘴都飘了

16:58.860 --> 17:00.860
这个JR Pond size

17:00.860 --> 17:01.860
它是点的尺寸

17:01.860 --> 17:03.860
那我如果会指一个图形的时候

17:03.860 --> 17:04.860
我点的尺寸

17:04.860 --> 17:05.860
我是不是不需要知道

17:05.860 --> 17:06.860
我只需要会的

17:06.860 --> 17:08.860
指的是我这个图形

17:08.860 --> 17:09.860
对不对

17:09.860 --> 17:10.860
是这样的

17:10.860 --> 17:11.860
然后如果你要是

17:11.860 --> 17:13.860
不会是这个JR

17:13.860 --> 17:15.860
不复制JR Pond size的话

17:15.860 --> 17:16.860
它默认的这个

17:16.860 --> 17:18.860
值是1.0

17:18.860 --> 17:19.860
可以吧

17:19.860 --> 17:20.860
1.0

17:20.860 --> 17:22.860
然后再来说一下

17:22.860 --> 17:24.860
这个JR position

17:24.860 --> 17:25.860
再来说一下

17:25.860 --> 17:27.860
这个JR position

17:27.860 --> 17:28.860
JR position

17:28.860 --> 17:29.860
它是点点的一个位置

17:29.860 --> 17:30.860
对不对

17:30.860 --> 17:31.860
那我们就需要给它

17:31.860 --> 17:33.860
复制点点的一个坐标

17:33.860 --> 17:34.860
对吧

17:34.860 --> 17:35.860
那我这块写一下

17:35.860 --> 17:37.860
是JR position

17:37.860 --> 17:38.860
PO

17:38.860 --> 17:39.860
SIT

17:39.860 --> 17:40.860
TI1

17:40.860 --> 17:42.860
VEC

17:42.860 --> 17:44.860
它是VEC4类型

17:44.860 --> 17:45.860
所以我们必须要

17:45.860 --> 17:46.860
给它包裹一层

17:46.860 --> 17:48.860
这个是VEC4

17:48.860 --> 17:49.860
这个函数

17:49.860 --> 17:51.860
代表是强制类型转换的

17:51.860 --> 17:53.860
把里面的一个坐标

17:53.860 --> 17:54.860
转换成这个类型

17:54.860 --> 17:55.860
可以吧

17:55.860 --> 17:56.860
那我们就在

17:56.860 --> 17:58.860
0.0的这一点

17:58.860 --> 17:59.860
会指

17:59.860 --> 18:00.860
可以吧

18:00.860 --> 18:02.860
0.0

18:02.860 --> 18:03.860
我们这块

18:03.860 --> 18:04.860
0.0

18:04.860 --> 18:05.860
看能不能会指出来

18:05.860 --> 18:06.860
然后我们再来一个

18:06.860 --> 18:07.860
JR

18:07.860 --> 18:09.860
PO

18:09.860 --> 18:10.860
因为我们现在要

18:10.860 --> 18:11.860
会指点

18:11.860 --> 18:12.860
对不对

18:12.860 --> 18:13.860
PO

18:13.860 --> 18:14.860
SIT

18:14.860 --> 18:15.860
我给它设置一个

18:15.860 --> 18:16.860
PO

18:16.860 --> 18:17.860
SIT

18:17.860 --> 18:18.860
10.0

18:18.860 --> 18:19.860
OK吧

18:19.860 --> 18:20.860
然后我们点点

18:20.860 --> 18:21.860
组册器

18:21.860 --> 18:22.860
是不是就写完了

18:22.860 --> 18:23.860
那写完了之后

18:23.860 --> 18:24.860
我们再来写一个

18:24.860 --> 18:25.860
片源组册器

18:25.860 --> 18:26.860
片源组册器

18:26.860 --> 18:27.860
也是一样的

18:27.860 --> 18:28.860
也是一样的

18:28.860 --> 18:29.860
这块就是来个

18:29.860 --> 18:31.860
FRAGMENT

18:31.860 --> 18:32.860
FRAGMENT

18:32.860 --> 18:33.860
然后里面

18:33.860 --> 18:34.860
片源组册器里面

18:34.860 --> 18:36.860
它也有需要你

18:36.860 --> 18:37.860
去复职的

18:37.860 --> 18:38.860
那个质变量

18:38.860 --> 18:40.860
就是这个JR FRAGMENT

18:40.860 --> 18:41.860
COLOR

18:41.860 --> 18:42.860
JR FRAGMENT

18:42.860 --> 18:43.860
COLOR

18:43.860 --> 18:44.860
它也是

18:44.860 --> 18:45.860
片源组册器里面的

18:45.860 --> 18:46.860
那一支变量

18:48.860 --> 18:49.860
然后它的类型是

18:49.860 --> 18:50.860
VEC4的

18:50.860 --> 18:52.860
四位浮电型的

18:52.860 --> 18:53.860
那这四位浮电型

18:53.860 --> 18:55.860
分别代表什么呢

18:55.860 --> 18:56.860
它其实就相当于

18:56.860 --> 18:58.860
代表它的一个RGBH

18:58.860 --> 18:59.860
可以吧

18:59.860 --> 19:01.860
颜色的RGBH

19:01.860 --> 19:02.860
那我们先复职一个呗

19:02.860 --> 19:03.860
看一下

19:04.860 --> 19:05.860
这块都可以删掉

19:05.860 --> 19:06.860
然后我们来个

19:06.860 --> 19:07.860
JR FRAGMENT

19:08.860 --> 19:09.860
FRAGMENT

19:09.860 --> 19:10.860
COLOR

19:10.860 --> 19:11.860
JR FRAGMENT

19:11.860 --> 19:12.860
COLOR

19:12.860 --> 19:13.860
JR FRAGMENT

19:13.860 --> 19:14.860
VEC4

19:15.860 --> 19:17.860
零零零

19:17.860 --> 19:18.860
可以吧

19:18.860 --> 19:19.860
代表是黑色

19:19.860 --> 19:20.860
对不对

19:20.860 --> 19:21.860
OK吧

19:21.860 --> 19:23.860
然后我们先在这个

19:23.860 --> 19:24.860
灼色器

19:24.860 --> 19:25.860
是不是已经

19:25.860 --> 19:26.860
已经

19:26.860 --> 19:27.860
初始化完成了

19:27.860 --> 19:28.860
对吧

19:28.860 --> 19:30.860
已经初始化完成了

19:30.860 --> 19:31.860
那初始化完成之后

19:31.860 --> 19:33.860
它应该没有任何的作用

19:33.860 --> 19:34.860
因为我们现在是

19:34.860 --> 19:36.860
它们都是分开的

19:36.860 --> 19:37.860
对不对

19:37.860 --> 19:38.860
灼色器都是分开的

19:38.860 --> 19:40.860
并没有给它连在一起

19:41.860 --> 19:42.860
然后我们接下来

19:42.860 --> 19:43.860
再来了解一下

19:43.860 --> 19:44.860
我们下一步

19:44.860 --> 19:45.860
应该做什么了

19:45.860 --> 19:46.860
下一步

19:47.860 --> 19:48.860
下一步应该开始

19:49.860 --> 19:50.860
来

19:50.860 --> 19:51.860
再来看

19:51.860 --> 19:52.860
这里

19:52.860 --> 19:53.860
下一步开始

19:53.860 --> 19:54.860
设置我们的点的

19:54.860 --> 19:55.860
做标了

19:55.860 --> 19:56.860
对不对

19:56.860 --> 19:57.860
看一下设置点

19:57.860 --> 19:58.860
做标

19:58.860 --> 19:59.860
没到这呢

19:59.860 --> 20:00.860
还没有到这

20:00.860 --> 20:01.860
我们现在只是

20:01.860 --> 20:02.860
初始化完成

20:02.860 --> 20:03.860
灼色器了对吧

20:04.860 --> 20:05.860
那我们接下来

20:05.860 --> 20:06.860
初始化灼色器

20:06.860 --> 20:07.860
还没有完成

20:07.860 --> 20:08.860
我们现在只是

20:08.860 --> 20:09.860
把灼色器语言写完了

20:09.860 --> 20:10.860
对不对

20:11.860 --> 20:12.860
把灼色器语言写完了

20:12.860 --> 20:13.860
我们再往下来

20:16.230 --> 20:18.230
那是片语

20:19.230 --> 20:20.230
然后大家可以

20:20.230 --> 20:21.230
先了解一下

20:21.230 --> 20:22.230
先了解一下

20:22.230 --> 20:23.230
灼色器的一个行为

20:23.230 --> 20:24.230
灼色器行为

20:24.230 --> 20:25.230
是什么样子

20:25.230 --> 20:26.230
我们再写

20:26.230 --> 20:27.230
点点灼色器

20:27.230 --> 20:28.230
还有片语

20:28.230 --> 20:29.230
灼色器之后

20:29.230 --> 20:30.230
我们需要把他们

20:30.230 --> 20:31.230
到我们的

20:31.230 --> 20:32.230
WebJR系统当中去

20:32.230 --> 20:33.230
看到了吧

20:33.230 --> 20:34.230
加入到

20:34.230 --> 20:36.230
WebJR系统当中去之后

20:36.230 --> 20:38.230
在WebJR

20:38.230 --> 20:39.230
这个系统里面

20:39.230 --> 20:40.230
去识别这样的

20:40.230 --> 20:41.230
一个代码

20:41.230 --> 20:42.230
识别完了之后

20:42.230 --> 20:43.230
它才会去找

20:43.230 --> 20:44.230
找到一些

20:44.230 --> 20:45.230
关键的

20:45.230 --> 20:46.230
内置变量

20:46.230 --> 20:47.230
对吧

20:48.230 --> 20:49.230
找到内置的变量

20:49.230 --> 20:50.230
就是上

20:50.230 --> 20:51.230
JR Pond Size

20:51.230 --> 20:52.230
JR Position

20:52.230 --> 20:53.230
对不对

20:53.230 --> 20:54.230
然后在

20:54.230 --> 20:55.230
顶点着册器里面

20:55.230 --> 20:56.230
我们会

20:56.230 --> 20:57.230
逐顶点的

20:57.230 --> 20:59.230
进行一个操作

20:59.230 --> 21:00.230
通过在

21:00.230 --> 21:01.230
GS里面

21:01.230 --> 21:02.230
我们设置

21:02.230 --> 21:03.230
这个

21:03.230 --> 21:04.230
图形

21:04.230 --> 21:05.230
设置图形的

21:05.230 --> 21:06.230
一个做标

21:06.230 --> 21:07.230
对不对

21:07.230 --> 21:08.230
然后传入到

21:08.230 --> 21:09.230
我们的

21:09.230 --> 21:10.230
顶点着册器当中

21:10.230 --> 21:11.230
拿到这些

21:11.230 --> 21:12.230
信息数据之后

21:12.230 --> 21:13.230
它会进行一个

21:13.230 --> 21:14.230
复职

21:14.230 --> 21:15.230
对吧

21:15.230 --> 21:16.230
像这个

21:16.230 --> 21:17.230
JR Pond Size

21:17.230 --> 21:18.230
JR Position

21:18.230 --> 21:19.230
都会进行复职

21:19.230 --> 21:20.230
复职完了之后

21:20.230 --> 21:21.230
把我们最终的

21:21.230 --> 21:22.230
一个结果

21:22.230 --> 21:23.230
就是JR Position

21:23.230 --> 21:24.230
还有JR Pond Size

21:24.230 --> 21:25.230
再传入到

21:25.230 --> 21:26.230
我们这个

21:26.230 --> 21:27.230
片源着色器

21:27.230 --> 21:28.230
当中去

21:29.230 --> 21:30.230
然后传入到

21:30.230 --> 21:31.230
片源着色器当中

21:31.230 --> 21:32.230
去之后

21:32.230 --> 21:33.230
片源着色器

21:33.230 --> 21:34.230
它们没有用到

21:34.230 --> 21:35.230
对吧

21:35.230 --> 21:36.230
然后片源着色器

21:36.230 --> 21:37.230
里面

21:37.230 --> 21:38.230
我们开始复职

21:38.230 --> 21:39.230
颜色

21:39.230 --> 21:40.230
看到了吗

21:40.230 --> 21:41.230
复职颜色

21:41.230 --> 21:42.230
然后最终

21:42.230 --> 21:43.230
显示在

21:43.230 --> 21:44.230
这个

21:44.230 --> 21:45.230
颜色缓中区当中去

21:45.230 --> 21:46.230
我们现在

21:46.230 --> 21:47.230
复职完了之后

21:47.230 --> 21:48.230
它并不是

21:48.230 --> 21:49.230
直接渲染到

21:49.230 --> 21:50.230
我们屏幕上

21:50.230 --> 21:51.230
而是

21:51.230 --> 21:52.230
把我们的这个

21:52.230 --> 21:53.230
Color

21:53.230 --> 21:54.230
放到了颜色缓中区当中

21:54.230 --> 21:55.230
可以吧

21:56.230 --> 21:57.230
然后最终

21:57.230 --> 21:58.230
颜色缓中区当中的

21:58.230 --> 21:59.230
一个样式

21:59.230 --> 22:00.230
渲染到

22:00.230 --> 22:01.230
我们的

22:01.230 --> 22:02.230
浏览器上

22:02.230 --> 22:03.230
这是

22:03.230 --> 22:04.230
这是我们的这个

22:05.230 --> 22:07.230
着色器的一个行为

22:07.230 --> 22:08.230
然后我们再接下来

22:08.230 --> 22:09.230
再来

22:09.230 --> 22:10.230
我们还

22:10.230 --> 22:11.230
还没说完

22:11.230 --> 22:12.230
这个着色器

22:12.230 --> 22:13.230
对不对

22:13.230 --> 22:14.230
说着色器

22:14.230 --> 22:15.230
在复职化的时候

22:15.230 --> 22:16.230
还有一部分

22:16.230 --> 22:17.230
没有讲

22:17.230 --> 22:18.230
我们现在只是

22:18.230 --> 22:19.230
把着色器

22:19.230 --> 22:20.230
预言这一部分

22:20.230 --> 22:21.230
已经复职化完了

22:21.230 --> 22:22.230
对吧

22:22.230 --> 22:23.230
接下来

22:23.230 --> 22:24.230
我们来

22:24.230 --> 22:25.230
复职化一下

22:25.230 --> 22:26.230
这个着色器

22:26.230 --> 22:27.230
我们需要

22:27.230 --> 22:28.230
创建一个

22:28.230 --> 22:29.230
着色器

22:29.230 --> 22:30.230
通过GS来

22:30.230 --> 22:31.230
创建

22:31.230 --> 22:32.230
我们现在的

22:32.230 --> 22:33.230
这一部分

22:33.230 --> 22:34.230
看我们写的

22:34.230 --> 22:35.230
这个着色器

22:35.230 --> 22:36.230
预言

22:36.230 --> 22:37.230
它其实只是一个

22:37.230 --> 22:38.230
自雾创

22:38.230 --> 22:39.230
并没有太大的

22:39.230 --> 22:40.230
一个意思

22:40.230 --> 22:41.230
浏览器

22:41.230 --> 22:42.230
是不能

22:42.230 --> 22:43.230
直接识别

22:43.230 --> 22:44.230
说你这个

22:44.230 --> 22:45.230
就是一个

22:45.230 --> 22:46.230
着色器预言的

22:46.230 --> 22:47.230
可以吧

22:47.230 --> 22:48.230
它认为的

22:48.230 --> 22:49.230
这个

22:49.230 --> 22:50.230
预言

22:50.230 --> 22:51.230
就是一个

22:51.230 --> 22:52.230
GS的

22:52.230 --> 22:53.230
一个自雾创

22:53.230 --> 22:54.230
可以吧

22:54.230 --> 22:55.230
那好

22:55.230 --> 22:57.230
创建着色器

22:57.230 --> 22:59.230
创建着色器

22:59.230 --> 23:00.230
我们是不是需要

23:00.230 --> 23:01.230
创建两种着色器

23:01.230 --> 23:02.230
一种是

23:02.230 --> 23:03.230
顶点着色器

23:03.230 --> 23:04.230
一种是

23:04.230 --> 23:05.230
片源着色器

23:05.230 --> 23:06.230
对吧

23:06.230 --> 23:07.230
那我们就需要

23:07.230 --> 23:08.230
我们都给它

23:08.230 --> 23:09.230
提出来来写

23:09.230 --> 23:10.230
可以吧

23:10.230 --> 23:11.230
我们来

23:11.230 --> 23:12.230
封装一个

23:12.230 --> 23:13.230
公共的一个喊数

23:13.230 --> 23:14.230
因为他们的一个

23:14.230 --> 23:15.230
过程都是一样的

23:15.230 --> 23:16.230
创建着色器

23:16.230 --> 23:21.870
然后

23:21.870 --> 23:22.870
创建着色器

23:22.870 --> 23:23.870
我们发现是有

23:23.870 --> 23:24.870
两种着色器

23:24.870 --> 23:25.870
一种顶点着色器

23:25.870 --> 23:26.870
一种是

23:26.870 --> 23:27.870
片源着色器

23:27.870 --> 23:28.870
对吧

23:28.870 --> 23:29.870
可以吧

23:29.870 --> 23:31.870
然后第二个值呢

23:31.870 --> 23:32.870
第二个值

23:32.870 --> 23:33.870
我们每一个着色器

23:33.870 --> 23:34.870
每一个着色器

23:34.870 --> 23:35.870
它的一个

23:35.870 --> 23:36.870
里面的资源

23:36.870 --> 23:37.870
数据语言是不是不一样

23:37.870 --> 23:38.870
就是

23:38.870 --> 23:39.870
我们里面的代码

23:39.870 --> 23:40.870
倒是不一样的

23:40.870 --> 23:41.870
对吧

23:41.870 --> 23:42.870
所以我们需要

23:42.870 --> 23:43.870
把这里面的代码

23:43.870 --> 23:44.870
都需要传进去

23:44.870 --> 23:45.870
对不对

23:45.870 --> 23:46.870
所以

23:46.870 --> 23:47.870
再来一个Source

23:47.870 --> 23:48.870
可以吧

23:48.870 --> 23:49.870
再来一个Source

23:49.870 --> 23:50.870
这是

23:50.870 --> 23:51.870
这两种着色器

23:51.870 --> 23:52.870
那我们这里

23:52.870 --> 23:53.870
是不是就可以

23:53.870 --> 23:54.870
开始

23:54.870 --> 23:55.870
创建我们的着色器了

23:55.870 --> 23:56.870
那这样

23:56.870 --> 23:57.870
为了

23:57.870 --> 23:58.870
这个函数

23:58.870 --> 23:59.870
与

23:59.870 --> 24:00.870
与外面的代码

24:00.870 --> 24:02.870
它是相互独立的

24:02.870 --> 24:03.870
它是独立的

24:03.870 --> 24:04.870
那怎么办呢

24:04.870 --> 24:05.870
我们可以把JR

24:05.870 --> 24:06.870
也传进来

24:06.870 --> 24:08.870
把JR也传进来

24:08.870 --> 24:09.870
那我们先来

24:09.870 --> 24:10.870
再来看一下

24:10.870 --> 24:11.870
创建着色器

24:11.870 --> 24:13.870
需要用到的一些

24:13.870 --> 24:15.870
WebJR里面的方法

24:15.870 --> 24:16.870
首先

24:16.870 --> 24:17.870
第一个方法

24:17.870 --> 24:18.870
是Create Shader

24:18.870 --> 24:19.870
它代表的是

24:19.870 --> 24:20.870
创建着色器

24:20.870 --> 24:21.870
对吧

24:21.870 --> 24:22.870
那着色器

24:22.870 --> 24:23.870
它有一些类型

24:23.870 --> 24:24.870
着色器类型

24:24.870 --> 24:25.870
它是固定的

24:25.870 --> 24:26.870
一个是

24:26.870 --> 24:27.870
Tax Shader

24:27.870 --> 24:28.870
代表是定点着色器

24:28.870 --> 24:29.870
还有一个是

24:29.870 --> 24:30.870
Fragment Shader

24:30.870 --> 24:31.870
代表是

24:31.870 --> 24:32.870
片源着色器

24:32.870 --> 24:33.870
那我们就可以

24:33.870 --> 24:34.870
先创建一个

24:34.870 --> 24:35.870
对吧

24:35.870 --> 24:36.870
那我们希望的是

24:36.870 --> 24:37.870
把这个类型

24:37.870 --> 24:38.870
传进来的

24:38.870 --> 24:39.870
对不对

24:39.870 --> 24:40.870
因为我们就有

24:40.870 --> 24:41.870
两个着色器

24:41.870 --> 24:42.870
我要给它单独提出

24:42.870 --> 24:43.870
一个公用的

24:43.870 --> 24:44.870
一个函数的话

24:44.870 --> 24:45.870
我们就需要

24:45.870 --> 24:46.870
给它提出来

24:46.870 --> 24:47.870
对吧

24:47.870 --> 24:48.870
那我这会来

24:48.870 --> 24:49.870
创建一个Shader

24:49.870 --> 24:50.870
等于JR.

24:50.870 --> 24:51.870
JR.

24:51.870 --> 24:52.870
什么

24:52.870 --> 24:53.870
它的一个Type值

24:53.870 --> 24:54.870
对不对

24:54.870 --> 24:55.870
Create Shader

24:55.870 --> 24:56.870
JR.

24:56.870 --> 24:57.870
Create Shader

24:57.870 --> 24:58.870
JR.

24:58.870 --> 24:59.870
EAT

24:59.870 --> 25:00.870
Create Shader

25:00.870 --> 25:01.870
然后里面

25:01.870 --> 25:02.870
传的应该是Type

25:02.870 --> 25:03.870
对吧

25:03.870 --> 25:04.870
那我们现在

25:04.870 --> 25:05.870
创建完这个

25:05.870 --> 25:06.870
着色器了

25:06.870 --> 25:07.870
对不对

25:07.870 --> 25:08.870
我们接下来

25:08.870 --> 25:09.870
应该往里添加资源了

25:09.870 --> 25:10.870
对不对

25:10.870 --> 25:11.870
就是添加我们

25:11.870 --> 25:12.870
着色器的

25:12.870 --> 25:13.870
一个代码了

25:13.870 --> 25:14.870
对吧

25:14.870 --> 25:15.870
那怎么添加呢

25:15.870 --> 25:16.870
我们还是通过

25:16.870 --> 25:17.870
一个方法

25:17.870 --> 25:18.870
叫Shader Sauce

25:18.870 --> 25:19.870
这个方法

25:19.870 --> 25:20.870
这个Shader Sauce

25:20.870 --> 25:21.870
这个方法

25:21.870 --> 25:22.870
需要我们传进

25:22.870 --> 25:23.870
两个参数

25:23.870 --> 25:24.870
第一个参数

25:25.870 --> 25:26.870
可以吧

25:26.870 --> 25:27.870
第一个参数

25:27.870 --> 25:28.870
就是我们这个Shader

25:28.870 --> 25:29.870
着色器

25:29.870 --> 25:30.870
第二参数呢

25:30.870 --> 25:32.870
是我们的数据语言

25:32.870 --> 25:33.870
也就是我们这个

25:33.870 --> 25:35.870
着色器的一个语言

25:35.870 --> 25:36.870
它是一个字符创

25:36.870 --> 25:38.870
这是一个字符创

25:38.870 --> 25:39.870
ok

25:39.870 --> 25:40.870
那我们接下来

25:40.870 --> 25:42.870
来调用一下JR.

25:42.870 --> 25:43.870
这叫什么

25:43.870 --> 25:44.870
Shader Sauce

25:44.870 --> 25:45.870
对不对

25:45.870 --> 25:46.870
它也是D1

25:46.870 --> 25:48.870
SOURC

25:48.870 --> 25:49.870
Shader Sauce

25:49.870 --> 25:50.870
然后第一个参数

25:50.870 --> 25:51.870
传递的

25:51.870 --> 25:53.870
应该是我们这个Shader

25:53.870 --> 25:54.870
第二个参数

25:54.870 --> 25:56.870
传递的是SOURC

25:56.870 --> 25:57.870
对不对

25:57.870 --> 25:58.870
这个SOURC

25:58.870 --> 26:00.870
是一会儿我们传过来的

26:00.870 --> 26:01.870
ok

26:01.870 --> 26:02.870
我们现在是不是已经

26:02.870 --> 26:04.870
像这个着色器里面

26:04.870 --> 26:06.870
添加资源了对不对

26:06.870 --> 26:07.870
那添加完资源之后

26:07.870 --> 26:08.870
我们添加进去的是

26:08.870 --> 26:10.870
一个字符创了对吧

26:10.870 --> 26:11.870
那我们想要

26:11.870 --> 26:12.870
把它

26:12.870 --> 26:13.870
以我们这个

26:13.870 --> 26:15.870
着色器语言

26:15.870 --> 26:17.870
进行一个识别的话

26:17.870 --> 26:18.870
我们就需要先

26:18.870 --> 26:19.870
编译我们这个

26:19.870 --> 26:20.870
着色器

26:20.870 --> 26:21.870
可以吧

26:21.870 --> 26:22.870
编译里面的代码

26:22.870 --> 26:23.870
然后我们这里

26:23.870 --> 26:24.870
就需要

26:24.870 --> 26:25.870
下一个方法叫

26:25.870 --> 26:26.870
Compile Shader

26:26.870 --> 26:27.870
可以吧

26:27.870 --> 26:29.870
jr.compile Shader

26:29.870 --> 26:30.870
那我们调一下

26:30.870 --> 26:32.870
然后它里面

26:32.870 --> 26:33.870
传递的是

26:33.870 --> 26:34.870
compile

26:34.870 --> 26:35.870
怎么拼了

26:35.870 --> 26:36.870
pile

26:36.870 --> 26:37.870
re

26:37.870 --> 26:38.870
把这个copy过来吧

26:38.870 --> 26:39.870
可以吧

26:39.870 --> 26:40.870
compile Shader

26:40.870 --> 26:41.870
里面传的

26:41.870 --> 26:43.870
就是一个shader

26:43.870 --> 26:45.870
我要编译的一个

26:45.870 --> 26:46.870
这个

26:46.870 --> 26:47.870
我要编译的

26:47.870 --> 26:48.870
一个着色器

26:48.870 --> 26:51.440
对吧

26:51.440 --> 26:53.440
那就是第三步

26:54.440 --> 26:55.440
然后我编译

26:55.440 --> 26:56.440
成功的话

26:56.440 --> 26:58.440
我编译成功的话

26:58.440 --> 26:59.440
我让它

27:00.440 --> 27:01.440
我直接让它

27:01.440 --> 27:02.440
返回这个shader

27:02.440 --> 27:03.440
对吧

27:03.440 --> 27:04.440
我直接让它返回这个shader

27:07.440 --> 27:08.440
那我如何知道

27:08.440 --> 27:09.440
我是不是编译

27:09.440 --> 27:10.440
成功的一个状态

27:10.440 --> 27:11.440
过一个方法

27:11.440 --> 27:13.440
进行一个判断

27:13.440 --> 27:14.440
那这个方法

27:14.440 --> 27:15.440
叫什么呢

27:15.440 --> 27:16.440
叫这个

27:16.440 --> 27:17.440
jr.get

27:19.440 --> 27:20.440
get

27:20.440 --> 27:21.440
shader

27:21.440 --> 27:22.440
get a shader

27:22.440 --> 27:23.440
get a shader

27:23.440 --> 27:26.940
shader program

27:26.940 --> 27:27.940
pro

27:27.940 --> 27:28.940
param

27:28.940 --> 27:29.940
param

27:29.940 --> 27:31.940
jr.metr

27:31.940 --> 27:33.940
parameter

27:33.940 --> 27:34.940
然后这个里面

27:34.940 --> 27:35.940
我们需要传递的

27:35.940 --> 27:36.940
有两个值

27:36.940 --> 27:37.940
第一个值

27:37.940 --> 27:38.940
是shader

27:38.940 --> 27:40.940
是我们这个

27:40.940 --> 27:41.940
这个

27:41.940 --> 27:43.940
着色器

27:43.940 --> 27:44.940
然后第二个值

27:44.940 --> 27:45.940
叫

27:45.940 --> 27:47.940
完成时的一个状态

27:47.940 --> 27:49.940
叫jr.complete

27:49.940 --> 27:52.940
c-o-r-p-r-e-t

27:52.940 --> 27:54.940
complete letters

27:54.940 --> 27:56.940
f-t-a-t-u-s

27:56.940 --> 27:57.940
可以吧

27:58.940 --> 28:00.940
那它会返回一个

28:00.940 --> 28:01.940
值

28:01.940 --> 28:02.940
它会返回一个值

28:02.940 --> 28:03.940
它是返回的是

28:03.940 --> 28:04.940
一个布尔值

28:04.940 --> 28:05.940
我们

28:05.940 --> 28:06.940
可以接收一下

28:06.940 --> 28:07.940
这个布尔值

28:10.580 --> 28:11.580
可以接收一下

28:11.580 --> 28:12.580
这个布尔值

28:12.580 --> 28:15.080
OK吧

28:15.080 --> 28:16.080
然后我们可以

28:16.080 --> 28:17.080
判断一下这个布尔值

28:17.080 --> 28:18.080
如果

28:18.080 --> 28:19.080
它要是处的话

28:19.080 --> 28:20.080
我让它直接返回

28:20.080 --> 28:21.080
我们这个shader

28:21.080 --> 28:22.080
对吧

28:22.080 --> 28:23.080
如果是false

28:23.080 --> 28:25.080
如果要是false

28:27.080 --> 28:28.080
如果要是false的话

28:28.080 --> 28:30.080
我们就接着往下来写

28:30.080 --> 28:31.080
对吧

28:31.080 --> 28:32.080
直接让它打印一下

28:32.080 --> 28:33.080
错误的一个信息

28:33.080 --> 28:34.080
可以吧

28:34.080 --> 28:35.080
打印错误信息

28:35.080 --> 28:36.080
那错误信息

28:36.080 --> 28:37.080
也是需要通过一个方法

28:37.080 --> 28:38.080
获取来的

28:38.080 --> 28:39.080
叫

28:39.080 --> 28:41.080
getshaderinfo

28:41.080 --> 28:44.460
info

28:44.460 --> 28:45.460
log

28:45.460 --> 28:47.460
打印它的一个字

28:47.460 --> 28:48.460
shader

28:49.460 --> 28:50.460
可以吧

28:50.460 --> 28:51.460
那这样

28:51.460 --> 28:52.460
我们的这个

28:52.460 --> 28:53.460
这件拙色器

28:53.460 --> 28:54.460
还数就写完了

28:54.460 --> 28:55.460
那

28:55.460 --> 28:56.460
拙色器

28:56.460 --> 28:57.460
创建完成之后

28:57.460 --> 28:58.460
我们来调用一下

28:58.460 --> 28:59.460
对吧

28:59.460 --> 29:00.460
来

29:00.460 --> 29:01.460
那我们要调用的时候

29:01.460 --> 29:02.460
我们必须要

29:02.460 --> 29:03.460
把这个sars

29:03.460 --> 29:04.460
获取来

29:04.460 --> 29:05.460
对吧

29:05.460 --> 29:06.460
就是这两个拙色器

29:06.460 --> 29:07.460
语言获取来

29:07.460 --> 29:09.460
那么我有一个fragment

29:09.460 --> 29:11.460
我有一个vortice

29:11.460 --> 29:12.460
st2

29:12.460 --> 29:14.460
等于document

29:14.460 --> 29:15.460
第2

29:15.460 --> 29:16.460
getelement

29:16.460 --> 29:17.460
byd

29:18.460 --> 29:19.460
然后我们把

29:19.460 --> 29:20.460
v1,2,t1,x

29:20.460 --> 29:21.460
传进去

29:21.460 --> 29:23.460
然后我有一个fragment

29:24.460 --> 29:25.460
st2

29:25.460 --> 29:26.460
等于

29:26.460 --> 29:27.460
document

29:27.460 --> 29:28.460
第2

29:28.460 --> 29:29.460
getelement

29:29.460 --> 29:30.460
byd

29:32.460 --> 29:33.460
然后我们把这个

29:33.460 --> 29:34.460
fragment

29:35.460 --> 29:36.460
也放进去

29:36.460 --> 29:37.460
那这样获取来的

29:37.460 --> 29:38.460
是不是都是一个

29:38.460 --> 29:39.460
dumb元素

29:39.460 --> 29:40.460
那我想获取的是

29:40.460 --> 29:41.460
里面的这个文本

29:41.460 --> 29:42.460
对不对

29:42.460 --> 29:43.460
那我们就可以通过

29:43.460 --> 29:44.460
再第2

29:44.460 --> 29:45.460
接着往后来

29:45.460 --> 29:46.460
第2

29:46.460 --> 29:47.460
inner text

29:47.460 --> 29:48.460
来获取

29:48.460 --> 29:49.460
可以吧

29:49.460 --> 29:50.460
第2

29:51.460 --> 29:52.460
inner text

29:52.460 --> 29:53.460
可以获取来

29:53.460 --> 29:54.460
好吧

29:54.460 --> 29:55.460
我们可以先打印一下

29:55.460 --> 29:57.460
看能不能拿过来

29:57.460 --> 29:59.460
vortice

30:00.460 --> 30:01.460
v

30:01.460 --> 30:02.460
e

30:02.460 --> 30:03.460
txt

30:03.460 --> 30:04.460
t2

30:04.460 --> 30:05.460
ok

30:06.460 --> 30:07.460
fragment

30:07.460 --> 30:08.460
st2

30:08.460 --> 30:09.460
我们来看一下

30:09.460 --> 30:13.110
先

30:13.110 --> 30:14.110
来

30:14.110 --> 30:15.110
这里我们获取到了

30:15.110 --> 30:16.110
对吧

30:16.110 --> 30:17.110
已经获取到了

30:17.110 --> 30:18.110
这两个

30:18.110 --> 30:19.110
ok

30:20.110 --> 30:21.110
那获取到了之后

30:21.110 --> 30:22.110
我们再接着往下呗

30:22.110 --> 30:23.110
对不对

30:23.110 --> 30:24.110
我们现在

30:24.110 --> 30:25.110
两个卓斯器

30:25.110 --> 30:26.110
它俩已经

30:26.110 --> 30:27.110
生成了

30:27.110 --> 30:28.110
对吧

30:28.110 --> 30:29.110
并且

30:29.110 --> 30:30.110
它俩好像

30:30.110 --> 30:32.110
现在是相互独立的

30:32.110 --> 30:33.110
对不对

30:33.110 --> 30:34.110
相互独立的吧

30:35.110 --> 30:36.110
我还没有

30:36.110 --> 30:37.110
没有生成这个卓斯器

30:37.110 --> 30:38.110
对吧

30:38.110 --> 30:39.110
没有用那函数呢

30:39.110 --> 30:40.110
来一个

30:40.110 --> 30:41.110
vortice

30:41.110 --> 30:42.110
shader

30:42.110 --> 30:43.110
vortice

30:43.110 --> 30:44.110
shader

30:45.110 --> 30:46.110
调一下

30:46.110 --> 30:47.110
crate

30:47.110 --> 30:48.110
shader

30:48.110 --> 30:49.110
这样传进去

30:49.110 --> 30:50.110
第2

30:50.110 --> 30:51.110
太不值

30:51.110 --> 30:52.110
太不值

30:52.110 --> 30:53.110
是不是刚才看到了

30:53.110 --> 30:54.110
那个都那些

30:54.110 --> 30:55.110
vortice

30:55.110 --> 30:56.110
shader

30:56.110 --> 30:57.110
对吧

30:57.110 --> 30:58.110
大写的全都是

30:58.110 --> 30:59.110
对吧

30:59.110 --> 31:00.110
v1r

31:00.110 --> 31:01.110
t1x

31:01.110 --> 31:02.110
d2

31:02.110 --> 31:04.110
然后第三个参数

31:04.110 --> 31:05.110
是我们这个

31:05.110 --> 31:06.110
t1xs

31:06.110 --> 31:07.110
t2

31:07.110 --> 31:09.490
一个字幕创

31:09.490 --> 31:10.490
对吧

31:10.490 --> 31:11.490
然后再接着

31:11.490 --> 31:12.490
我一个

31:12.490 --> 31:13.490
fragment

31:13.490 --> 31:15.490
fragment

31:15.490 --> 31:16.490
shader

31:17.490 --> 31:18.490
crate

31:18.490 --> 31:19.490
shader

31:19.490 --> 31:20.490
创建一个

31:21.490 --> 31:25.950
jr传进去

31:25.950 --> 31:26.950
然后jr.

31:26.950 --> 31:27.950
fragment

31:27.950 --> 31:28.950
对吧

31:28.950 --> 31:29.950
fragment

31:29.950 --> 31:30.950
shader

31:31.950 --> 31:32.950
然后第三个参数

31:32.950 --> 31:33.950
fragment

31:33.950 --> 31:34.950
st2

31:36.950 --> 31:37.950
可以吧

31:37.950 --> 31:38.950
那现在我们这两个卓斯器

31:38.950 --> 31:41.780
传建完了吧

31:41.780 --> 31:42.780
可以对吧

31:42.780 --> 31:43.780
传建完了

31:43.780 --> 31:44.780
创建完成之后

31:44.780 --> 31:45.780
我们接下来

31:45.780 --> 31:46.780
接下来

31:46.780 --> 31:47.780
要让它俩

31:47.780 --> 31:48.780
有一个联系了

31:48.780 --> 31:50.780
如何让它俩有联系呢

31:50.780 --> 31:51.780
我们就需要

31:51.780 --> 31:52.780
创建一个程序了

31:52.780 --> 31:53.780
一起吧

31:53.780 --> 31:54.780
我们就需要

31:54.780 --> 31:55.780
创建一个程序

31:55.780 --> 31:56.780
将这两个卓斯器

31:56.780 --> 31:57.780
连接起来

31:58.780 --> 31:59.780
然后创建程序

31:59.780 --> 32:00.780
我们也给它

32:00.780 --> 32:01.780
单独封装吧

32:01.780 --> 32:02.780
可以吧

32:02.780 --> 32:03.780
因为程序

32:03.780 --> 32:04.780
我们可能

32:04.780 --> 32:05.780
可能一个

32:05.780 --> 32:06.780
页面上

32:06.780 --> 32:07.780
有很多的程序

32:07.780 --> 32:08.780
对不对

32:08.780 --> 32:09.780
都是可能的

32:11.780 --> 32:12.780
我们就先给它

32:12.780 --> 32:13.780
创建一下

32:13.780 --> 32:14.780
program

32:15.780 --> 32:16.780
里面传一个jr

32:16.780 --> 32:17.780
然后第二个

32:17.780 --> 32:18.780
是两个shader

32:18.780 --> 32:19.780
对吧

32:19.780 --> 32:21.780
传递两个shader

32:22.780 --> 32:24.780
还有一个是fragmentshader

32:25.780 --> 32:26.780
可以吧

32:26.780 --> 32:27.780
然后我们创建程序的话

32:27.780 --> 32:28.780
也是通过

32:28.780 --> 32:29.780
第一个方法

32:29.780 --> 32:32.780
叫create program

32:32.780 --> 32:33.780
创建程序

32:33.780 --> 32:36.780
它会创建一个空的程序

32:36.780 --> 32:37.780
来

32:37.780 --> 32:38.780
先写一下

32:38.780 --> 32:39.780
我一个program

32:41.780 --> 32:44.780
jr.create program

32:45.780 --> 32:46.780
可以吧

32:46.780 --> 32:47.780
然后创建完

32:47.780 --> 32:48.780
这个空的程序之后

32:48.780 --> 32:49.780
我们需要把

32:49.780 --> 32:50.780
这两个shader

32:50.780 --> 32:51.780
连进去

32:51.780 --> 32:52.780
如何绑定呢

32:52.780 --> 32:54.780
就是这个touchshader

32:54.780 --> 32:55.780
touchshader

32:55.780 --> 32:56.780
绑定我们这个

32:56.780 --> 32:57.780
灼色器程序

32:57.780 --> 32:58.780
那我们

32:58.780 --> 32:59.780
这个touchshader里面

32:59.780 --> 33:01.780
会传入两个参数

33:01.780 --> 33:02.780
第一个是program

33:02.780 --> 33:04.780
代表的是这个程序

33:04.780 --> 33:05.780
第二个是shader

33:05.780 --> 33:07.780
代表的是你这个

33:07.780 --> 33:08.780
灼色器

33:08.780 --> 33:09.780
与它

33:09.780 --> 33:10.780
要连接到

33:10.780 --> 33:11.780
我们程序里面的

33:11.780 --> 33:12.780
这个灼色器

33:12.780 --> 33:13.780
那是不是两个灼色器

33:13.780 --> 33:14.780
对吧

33:14.780 --> 33:15.780
两个灼色器

33:15.780 --> 33:16.780
你要写两遍

33:16.780 --> 33:19.780
这样点touchshader

33:19.780 --> 33:20.780
对吧

33:20.780 --> 33:21.780
然后第一个

33:21.780 --> 33:22.780
program

33:22.780 --> 33:23.780
第二个

33:23.780 --> 33:25.780
wordtouchshader

33:25.780 --> 33:26.780
然后再接着

33:26.780 --> 33:29.780
jr.touchshader

33:29.780 --> 33:31.780
program

33:31.780 --> 33:33.780
等好

33:33.780 --> 33:37.540
然后fragmentshader

33:37.540 --> 33:38.540
可以吧

33:38.540 --> 33:39.540
那我们现在已经

33:39.540 --> 33:41.540
把它俩连接完了之后

33:41.540 --> 33:42.540
连接完了之后

33:42.540 --> 33:43.540
现在

33:43.540 --> 33:44.540
已经都绑定在

33:44.540 --> 33:46.540
一个程序里面了

33:46.540 --> 33:47.540
对吧

33:47.540 --> 33:48.540
一个程序里面了

33:48.540 --> 33:49.540
那它俩还是相互独立的

33:49.540 --> 33:50.540
虽然你已经

33:50.540 --> 33:51.540
到一个程序里了

33:51.540 --> 33:52.540
但是它俩还是相互独立的

33:52.540 --> 33:53.540
那你想让它俩

33:53.540 --> 33:54.540
有个连接

33:54.540 --> 33:55.540
怎么办呢

33:55.540 --> 33:56.540
我们就需要

33:56.540 --> 33:57.540
调下一个方法

33:57.540 --> 34:01.100
叫linkprogram

34:01.100 --> 34:02.100
叫linkprogram

34:02.100 --> 34:03.100
那我们这里面

34:03.100 --> 34:04.100
传入

34:04.100 --> 34:05.100
我们的program

34:05.100 --> 34:06.100
就可以了

34:06.100 --> 34:07.100
它就会

34:07.100 --> 34:09.100
把两段程序拼接

34:09.100 --> 34:10.100
可以吧

34:10.100 --> 34:12.100
两段程序拼接

34:12.100 --> 34:13.100
连接了

34:13.100 --> 34:14.100
这就是

34:14.100 --> 34:16.100
两段程序的连接

34:16.100 --> 34:17.100
那现在

34:17.100 --> 34:18.100
到现在为止

34:18.100 --> 34:19.100
我们这个

34:19.100 --> 34:20.100
初始化工作

34:20.100 --> 34:21.100
才完成

34:21.100 --> 34:22.100
我们来调用一下

34:22.100 --> 34:23.100
这个program

34:23.100 --> 34:24.100
先创建一个程序

34:24.100 --> 34:25.100
可以吧

34:25.100 --> 34:26.100
握一个program

34:26.100 --> 34:28.100
把我们的拙刺器

34:28.100 --> 34:29.100
创建

34:29.100 --> 34:30.100
把我的拙刺器

34:30.100 --> 34:31.100
都放在

34:31.100 --> 34:32.100
我们的程序里面去

34:32.100 --> 34:34.480
可以吧

34:34.480 --> 34:35.480
等好

34:35.480 --> 34:36.480
我Tax Shader

34:36.480 --> 34:38.480
Fragment Shader

34:38.480 --> 34:39.480
OK吧

34:39.480 --> 34:41.480
那我们创建完程序了

34:41.480 --> 34:43.480
我们接下来

34:43.480 --> 34:44.480
要使用它

34:44.480 --> 34:45.480
我们还需要

34:45.480 --> 34:46.480
调用一下

34:46.480 --> 34:47.480
Use这个方法

34:47.480 --> 34:48.480
Use

34:48.480 --> 34:50.480
Program

34:51.480 --> 34:52.480
然后把program

34:52.480 --> 34:53.480
传进去

34:53.480 --> 34:55.980
可以吧

34:55.980 --> 34:56.980
我们使用一下

34:56.980 --> 34:57.980
这个程序

34:57.980 --> 34:58.980
也就是我们下面

34:58.980 --> 34:59.980
接下来汇制的时候

34:59.980 --> 35:00.980
都是使用的

35:00.980 --> 35:01.980
是这个程序

35:01.980 --> 35:02.980
可以吧

35:03.980 --> 35:04.980
那么接下来

35:04.980 --> 35:05.980
就开始来汇制了

35:05.980 --> 35:06.980
对不对

35:06.980 --> 35:07.980
我们现在

35:07.980 --> 35:08.980
初始化工作

35:08.980 --> 35:09.980
已经都做完了

35:09.980 --> 35:10.980
那前面这一部分

35:10.980 --> 35:11.980
是所有

35:11.980 --> 35:12.980
我们在画图的时候

35:12.980 --> 35:13.980
都需要

35:13.980 --> 35:14.980
做的一个工作

35:14.980 --> 35:15.980
可以吧

35:15.980 --> 35:16.980
就是初始化

35:17.980 --> 35:18.980
有的又会说了

35:18.980 --> 35:20.980
初始化这么麻烦呢

35:20.980 --> 35:22.980
那我们为什么还要使它呢

35:22.980 --> 35:24.980
它能做很强大的一个功能

35:24.980 --> 35:25.980
对不对

35:25.980 --> 35:26.980
你现在觉得有点麻烦

35:26.980 --> 35:28.980
但是你写习惯了之后

35:28.980 --> 35:29.980
你就会觉得

35:29.980 --> 35:30.980
它并不是很麻烦

35:30.980 --> 35:31.980
它的逻辑

35:31.980 --> 35:33.980
很清晰的对不对

35:33.980 --> 35:35.980
一环套着一环的

35:35.980 --> 35:36.980
对吧

35:36.980 --> 35:38.980
是不是特别像一个

35:38.980 --> 35:41.980
这个生产线的一个

35:41.980 --> 35:42.980
流水线对吧

35:42.980 --> 35:44.980
我这一部分

35:44.980 --> 35:46.980
我每一部分都是用

35:46.980 --> 35:48.980
上一部分的一个结果

35:48.980 --> 35:49.980
对不对

35:49.980 --> 35:50.980
这样的结果

35:50.980 --> 35:52.980
再给下一阶段

35:52.980 --> 35:53.980
来去执行

35:53.980 --> 35:54.980
对不对

35:54.980 --> 35:55.980
是这样的

35:56.980 --> 35:57.980
那现在我们已经

35:57.980 --> 35:58.980
创建完这个程序了

35:58.980 --> 35:59.980
接下来来

35:59.980 --> 36:00.980
绘制图形了对吧

36:00.980 --> 36:02.980
那我们绘制图形的时候

36:02.980 --> 36:03.980
我们就需要

36:03.980 --> 36:04.980
传递一些数据

36:04.980 --> 36:05.980
那传递数据

36:05.980 --> 36:06.980
应该往哪里传呢

36:06.980 --> 36:07.980
我们就需要

36:07.980 --> 36:08.980
往我们存处的

36:08.980 --> 36:09.980
一个位置上传

36:09.980 --> 36:10.980
对吧

36:10.980 --> 36:11.980
那我们现在

36:11.980 --> 36:12.980
现在大家可以看到

36:12.980 --> 36:13.980
我们不需要

36:13.980 --> 36:14.980
或许任何的位置

36:14.980 --> 36:15.980
因为我们这个里头

36:15.980 --> 36:16.980
已经写死了对不对

36:16.980 --> 36:18.980
已经写死了

36:18.980 --> 36:20.980
我应该

36:20.980 --> 36:21.980
这个位置在哪

36:21.980 --> 36:22.980
对吧

36:22.980 --> 36:23.980
大小多少

36:23.980 --> 36:24.980
我是不是都写死了

36:24.980 --> 36:26.980
接下来

36:26.980 --> 36:27.980
接下来

36:27.980 --> 36:28.980
我们开始绘制了

36:28.980 --> 36:30.980
那我们直接来绘制

36:30.980 --> 36:31.980
绘制的时候

36:31.980 --> 36:32.980
我们可以先做一个

36:32.980 --> 36:35.980
画布的一个处理话

36:35.980 --> 36:36.980
就是我们可以

36:36.980 --> 36:38.980
先清空一下画布

36:38.980 --> 36:39.980
清空画布

36:39.980 --> 36:40.980
我们只需要通过

36:40.980 --> 36:42.980
Clear Color就可以了

36:42.980 --> 36:43.980
Clear Color

36:43.980 --> 36:44.980
其实它字面上

36:44.980 --> 36:45.980
意思是清空颜色

36:45.980 --> 36:46.980
对不对

36:46.980 --> 36:48.980
然后天冲那个颜色

36:48.980 --> 36:49.980
清空画布

36:49.980 --> 36:50.980
天冲那个颜色

36:50.980 --> 36:52.980
那我们可以用这个黑色

36:52.980 --> 36:53.980
先给

36:53.980 --> 36:54.980
不用黑色吧

36:54.980 --> 36:55.980
我用一个

36:55.980 --> 36:57.980
蓝色可以吗

36:57.980 --> 36:58.980
红预蓝色

36:58.980 --> 37:00.980
来天冲这个颜色

37:00.980 --> 37:02.980
可以吧

37:02.980 --> 37:04.980
然后我们再接下来

37:04.980 --> 37:06.980
你要清空一下

37:06.980 --> 37:08.980
这个颜色的缓冲区

37:08.980 --> 37:12.620
颜色缓冲区

37:12.620 --> 37:13.620
那好

37:13.620 --> 37:14.620
怎么来清冲颜色缓冲区呢

37:14.620 --> 37:16.620
我们通过Clear这个方法

37:16.620 --> 37:17.620
这个方法里面

37:17.620 --> 37:19.620
我们只需要传递一个

37:19.620 --> 37:20.620
固定的一个词就行了

37:20.620 --> 37:21.620
叫这个

37:21.620 --> 37:22.620
JR点

37:22.620 --> 37:23.620
ColorBit

37:23.620 --> 37:25.620
C-O-R-O-R

37:25.620 --> 37:26.620
ColorGun

37:26.620 --> 37:28.620
BufferBit

37:31.180 --> 37:32.180
它就是

37:32.180 --> 37:34.180
清空的颜色缓冲区

37:34.180 --> 37:35.180
可以吧

37:35.180 --> 37:37.180
说完了就是我们清空画布

37:37.180 --> 37:38.180
然后再接下来

37:38.180 --> 37:39.180
我们就要绘制点了

37:39.180 --> 37:40.180
对不对

37:40.180 --> 37:41.180
如何绘制点呢

37:41.180 --> 37:42.180
我们只需要通过

37:42.180 --> 37:44.180
调用JR身上的

37:44.180 --> 37:45.180
照这个方法

37:45.180 --> 37:46.180
我们就

37:46.180 --> 37:47.180
照Rid这个方法

37:47.180 --> 37:48.180
Rid

37:48.180 --> 37:49.180
这个方法

37:49.180 --> 37:50.180
我们就可以来绘制了

37:50.180 --> 37:51.180
那绘制点

37:51.180 --> 37:52.180
我们可以看一下

37:52.180 --> 37:53.180
这个方法

37:53.180 --> 37:54.180
它有哪些

37:54.180 --> 37:55.180
参数

37:55.180 --> 37:56.180
再往下

37:56.180 --> 38:02.310
再往下

38:05.310 --> 38:06.310
在这对吧

38:06.310 --> 38:07.310
这个照Rid

38:07.310 --> 38:09.310
它有三个参数

38:09.310 --> 38:11.310
这个方法是做什么

38:11.310 --> 38:13.310
它是执行顶链着色器

38:13.310 --> 38:14.310
它是让你执行

38:14.310 --> 38:15.310
顶链着色器

38:15.310 --> 38:16.310
进行一个绘制的

38:16.310 --> 38:18.310
然后它会

38:18.310 --> 38:19.310
这个按照Mode

38:19.310 --> 38:20.310
Mode参数

38:20.310 --> 38:21.310
指定的方式

38:21.310 --> 38:22.310
会指图形

38:22.310 --> 38:23.310
那这个Mode的方式

38:23.310 --> 38:24.310
就是我们要

38:24.310 --> 38:26.310
绘制的一些基本的图圆

38:26.310 --> 38:27.310
就是我们

38:27.310 --> 38:28.310
上级课所说的

38:28.310 --> 38:30.310
基本图圆图形

38:30.310 --> 38:31.310
那是不是分成

38:31.310 --> 38:32.310
三种一种点

38:32.310 --> 38:33.310
线还有三条形

38:33.310 --> 38:34.310
对吧

38:34.310 --> 38:35.310
那我们可以看一下

38:35.310 --> 38:37.310
它可以接收的一些纸

38:37.310 --> 38:38.310
它可以接收这么多纸

38:38.310 --> 38:40.310
看JR点Ponts

38:40.310 --> 38:42.310
JR点Ponts

38:42.310 --> 38:43.310
代表是点

38:43.310 --> 38:44.310
我们可以试一下

38:45.310 --> 38:47.310
JR点P

38:47.310 --> 38:48.310
ITS

38:48.310 --> 38:49.310
它是一个点

38:49.310 --> 38:50.310
然后

38:50.310 --> 38:51.310
第二个材数

38:51.310 --> 38:52.310
我们先来看一下

38:52.310 --> 38:53.310
第二个材数

38:53.310 --> 38:54.310
第二个材数代表是

38:54.310 --> 38:55.310
从指定

38:55.310 --> 38:56.310
从哪个点

38:56.310 --> 38:57.310
开始会指

38:57.310 --> 38:58.310
对不对

38:58.310 --> 38:59.310
那我们

38:59.310 --> 39:00.310
不需要再指定了吧

39:00.310 --> 39:01.310
因为我们这已经写了

39:01.310 --> 39:02.310
对不对

39:02.310 --> 39:03.310
你可以指定0个

39:03.310 --> 39:04.310
对不对

39:04.310 --> 39:06.310
从0号点开始会指

39:06.310 --> 39:07.310
然后第二个呢

39:07.310 --> 39:08.310
然后

39:08.310 --> 39:09.310
第三个材数

39:09.310 --> 39:10.310
第三个材数是

39:10.310 --> 39:11.310
会指这个图形

39:11.310 --> 39:13.310
你要用多少个顶点

39:13.310 --> 39:14.310
我们现在这边

39:14.310 --> 39:15.310
只需要用到一个

39:15.310 --> 39:16.310
我们现在会指点

39:16.310 --> 39:17.310
对吧

39:17.310 --> 39:18.310
我们只需要传一个

39:18.310 --> 39:19.310
就可以了

39:19.310 --> 39:20.310
现在来看一下

39:20.310 --> 39:21.310
我们在这个

39:21.310 --> 39:22.310
页面

39:22.310 --> 39:23.310
出没出来

39:24.310 --> 39:25.310
好像报错了

39:25.310 --> 39:26.310
对吧

39:26.310 --> 39:27.310
它报了一个

39:29.310 --> 39:30.310
需要传递

39:30.310 --> 39:31.310
两个材数

39:31.310 --> 39:32.310
对吧

39:32.310 --> 39:33.310
我们看一下

39:33.310 --> 39:35.310
我传少了

39:35.310 --> 39:36.310
看一下

39:36.310 --> 39:37.310
它传递

39:37.310 --> 39:38.310
它需要传递什么的

39:38.310 --> 39:39.310
这里

39:39.310 --> 39:40.310
第一个是

39:40.310 --> 39:41.310
Program

39:41.310 --> 39:42.310
第二个shader

39:42.310 --> 39:43.310
对不对

39:43.310 --> 39:44.310
然后我们这里呢

39:44.310 --> 39:45.310
它shader

39:45.310 --> 39:46.310
传递两个

39:46.310 --> 39:47.310
没有问题

39:47.310 --> 39:48.310
行

39:48.310 --> 39:49.310
我这话是

39:49.310 --> 39:50.310
那两个

39:50.310 --> 39:51.310
但是它

39:51.310 --> 39:53.310
说报错了对吧

39:53.310 --> 39:55.310
那这个错是怎么回事呢

39:55.310 --> 39:56.310
我们再来看一下

39:56.310 --> 39:57.310
上面

39:57.310 --> 39:58.310
上面说

39:58.310 --> 39:59.310
上面是不是

39:59.310 --> 40:00.310
报了两个警告

40:00.310 --> 40:01.310
对不对

40:01.310 --> 40:02.310
就说这两个警告里面

40:02.310 --> 40:04.310
这两个警告出现问题了

40:04.310 --> 40:05.310
可以吧

40:05.310 --> 40:06.310
是这两个警告影响

40:06.310 --> 40:07.310
那我们下面这个的

40:07.310 --> 40:08.310
因为这两个警告

40:08.310 --> 40:09.310
它使我们

40:09.310 --> 40:10.310
shader

40:10.310 --> 40:11.310
没有正常的

40:11.310 --> 40:13.310
获取到

40:13.310 --> 40:14.310
可以吧

40:14.310 --> 40:15.310
它没有正常的

40:15.310 --> 40:16.310
获取到

40:16.310 --> 40:17.310
我们这个shader

40:17.310 --> 40:19.310
它并没有正常的生成

40:19.310 --> 40:20.310
所以我们这里传的

40:20.310 --> 40:22.310
到了这个attach

40:22.310 --> 40:23.310
shader

40:23.310 --> 40:24.310
这里传入的

40:24.310 --> 40:25.310
它就不是一个

40:25.310 --> 40:26.310
有值的了

40:26.310 --> 40:27.310
它就是一个空的

40:27.310 --> 40:28.310
可以吧

40:28.310 --> 40:29.310
所以我们看一下

40:29.310 --> 40:30.310
我们的shader里面

40:30.310 --> 40:31.310
shader里面

40:31.310 --> 40:32.310
它报的是什么错误

40:32.310 --> 40:35.310
它说这个parameter

40:35.310 --> 40:36.310
parameter

40:36.310 --> 40:37.310
非法的名称

40:37.310 --> 40:38.310
是不是

40:38.310 --> 40:41.140
我是不是写错了

40:41.140 --> 40:42.140
我们看一下

40:42.140 --> 40:45.140
complete

40:45.140 --> 40:47.140
shader meter

40:48.140 --> 40:53.140
shader

40:53.140 --> 40:57.140
parameter

40:57.140 --> 40:58.140
应该没有什么问题

40:58.140 --> 40:59.140
对吧

40:59.140 --> 41:00.140
然后我们里面呢

41:00.140 --> 41:01.140
里面这个

41:01.140 --> 41:03.140
不是complete

41:03.140 --> 41:04.140
这是compal

41:04.140 --> 41:05.140
compal

41:05.140 --> 41:06.140
compal

41:06.140 --> 41:07.140
compal

41:07.140 --> 41:08.140
compal

41:08.140 --> 41:09.140
compal

41:09.140 --> 41:11.140
compal

41:11.140 --> 41:14.140
我们再来看一下

41:14.140 --> 41:15.140
说新

41:15.140 --> 41:16.140
这个是不是可以了

41:16.140 --> 41:17.140
然后它说

41:17.140 --> 41:18.140
program

41:18.140 --> 41:19.140
我这拼错了

41:19.140 --> 41:20.140
pro

41:20.140 --> 41:21.140
use

41:21.140 --> 41:22.140
pro

41:22.140 --> 41:23.140
jrm

41:23.140 --> 41:24.140
pro

41:24.140 --> 41:25.140
jrm

41:25.140 --> 41:26.140
这回来看一下

41:26.140 --> 41:27.140
刷新

41:27.140 --> 41:28.140
是不是可以了

41:28.140 --> 41:29.140
对吧

41:29.140 --> 41:30.140
然后它又报了一个错

41:30.140 --> 41:31.140
说shoris

41:31.140 --> 41:32.140
shader programs

41:32.140 --> 41:34.140
use

41:34.140 --> 41:36.140
说没有shader程序

41:36.140 --> 41:37.140
是不是

41:37.140 --> 41:38.140
被用了

41:38.140 --> 41:39.140
我们看一下

41:39.140 --> 41:40.140
为什么没有shader程序

41:40.140 --> 41:42.140
因为我们这个program

41:42.140 --> 41:43.140
没有返回对不对

41:43.140 --> 41:46.140
最终应该返回我们这个program

41:46.140 --> 41:49.640
我们没有用到程序嘛

41:49.640 --> 41:50.640
然后这回呢

41:50.640 --> 41:51.640
好像没有画出来

41:51.640 --> 41:52.640
是吧

41:52.640 --> 41:54.640
我们看一下这里

41:54.640 --> 41:55.640
我是不是program

41:55.640 --> 41:56.640
有问题

41:56.640 --> 41:58.640
打印一下

41:58.640 --> 42:01.020
pro

42:01.020 --> 42:02.020
jrm

42:02.020 --> 42:05.970
来看一下啊

42:05.970 --> 42:06.970
刷新

42:06.970 --> 42:09.970
它返回给我了是吧

42:09.970 --> 42:11.970
它有这个program

42:11.970 --> 42:13.970
我们来看一下啊

42:13.970 --> 42:14.970
这里

42:14.970 --> 42:16.970
应该没有问题有吗

42:16.970 --> 42:19.970
那我这块也做一个判断吧

42:19.970 --> 42:20.970
因为我们program

42:20.970 --> 42:21.970
它这块也有

42:21.970 --> 42:22.970
可以判断几个

42:22.970 --> 42:25.970
到底有没有正常的返回啊

42:25.970 --> 42:30.560
我们这里

42:30.560 --> 42:31.560
给它来一个

42:31.560 --> 42:33.560
也来一个这个

42:33.560 --> 42:35.560
pro.jrm

42:35.560 --> 42:36.560
可以吧

42:36.560 --> 42:38.560
然后这个pro.jrm

42:38.560 --> 42:39.560
然后这里

42:39.560 --> 42:41.560
变成了get.program

42:41.560 --> 42:44.560
pro.jrm

42:44.560 --> 42:48.190
可以吧

42:48.190 --> 42:50.190
然后我们再来看啊

42:50.190 --> 42:52.190
然后这里我们就变了

42:52.190 --> 42:53.190
这里面不是precompile

42:53.190 --> 42:54.190
因为我们这块

42:54.190 --> 42:56.190
要的是编译的一个

42:56.190 --> 42:57.190
状态对不对

42:57.190 --> 42:58.190
编译完成的一个

42:58.190 --> 42:59.190
成功的一个状态

42:59.190 --> 43:01.190
它叫compile status

43:01.190 --> 43:02.190
然后这里呢

43:02.190 --> 43:03.190
我们要的应该是

43:03.190 --> 43:05.190
连接完成的一个状态

43:05.190 --> 43:06.190
就叫link

43:06.190 --> 43:08.190
link status

43:08.190 --> 43:09.190
OK吧

43:09.190 --> 43:10.190
然后我们把这块

43:10.190 --> 43:11.190
删一删

43:11.190 --> 43:13.190
然后这块打印的是

43:13.190 --> 43:14.190
get.program

43:14.190 --> 43:15.190
info

43:15.190 --> 43:16.190
pro.jrm

43:16.190 --> 43:18.190
info.log

43:18.190 --> 43:19.190
这回来看一下

43:19.190 --> 43:20.190
我们刷新

43:20.190 --> 43:22.190
没有问题是不是

43:22.190 --> 43:25.190
好像我们的

43:25.190 --> 43:28.190
这个位置有点问题对吧

43:28.190 --> 43:29.190
位置为什么有问题

43:29.190 --> 43:30.190
你看这

43:30.190 --> 43:31.190
我刷一个一

43:31.190 --> 43:32.190
看一下

43:32.190 --> 43:34.190
它出来了对吧

43:34.190 --> 43:35.190
大家能看到吗

43:35.190 --> 43:36.190
我说一下

43:36.190 --> 43:38.190
这为什么会这样啊

43:38.190 --> 43:40.190
我们这块说是四个分量对吧

43:40.190 --> 43:42.190
四个分量它会

43:42.190 --> 43:43.190
它会怎么做呢

43:43.190 --> 43:44.190
拿到这个分量之后

43:44.190 --> 43:45.190
它还会做一个处理

43:45.190 --> 43:47.190
就是每一个值

43:47.190 --> 43:48.190
前三个值

43:48.190 --> 43:49.190
都会把

43:49.190 --> 43:50.190
处理一个最后一个值

43:50.190 --> 43:53.190
那让他们的每一项

43:53.190 --> 43:54.190
让他们的每一项

43:54.190 --> 43:55.190
这四个分量

43:55.190 --> 43:57.190
都在负一到一之间

43:57.190 --> 43:59.190
那这就是根据

43:59.190 --> 44:00.190
我们的这个

44:00.190 --> 44:01.190
webgr的一个

44:01.190 --> 44:02.190
做标系统

44:02.190 --> 44:04.190
它来定的

44:04.190 --> 44:06.190
那我们先来了解一下

44:06.190 --> 44:07.190
这个webgr

44:07.190 --> 44:09.190
它的一个做标系统

44:09.190 --> 44:11.190
我们看到我设置的是

44:11.190 --> 44:12.190
001

44:12.190 --> 44:13.190
对不对

44:13.190 --> 44:14.190
那这个001

44:14.190 --> 44:15.190
你发现在中间

44:15.190 --> 44:16.190
对不对

44:16.190 --> 44:17.190
也就是说

44:17.190 --> 44:18.190
我们这个webgr

44:18.190 --> 44:19.190
做标系统

44:19.190 --> 44:20.190
再看一下

44:20.190 --> 44:22.190
webgr这样的做标系统

44:22.190 --> 44:24.190
它与我们真正

44:24.190 --> 44:25.190
页面上的一个

44:25.190 --> 44:26.190
做标系统

44:26.190 --> 44:27.190
它是不一样的

44:27.190 --> 44:28.190
因为我们的

44:28.190 --> 44:29.190
commerce的做标系统

44:29.190 --> 44:30.190
也是不一样的

44:30.190 --> 44:31.190
那它的做标系统

44:31.190 --> 44:32.190
就是

44:32.190 --> 44:33.190
中间

44:33.190 --> 44:35.190
是为00点

44:35.190 --> 44:36.190
然后两边

44:36.190 --> 44:37.190
这边

44:37.190 --> 44:38.190
左边是负一点

44:38.190 --> 44:40.190
右边是一点

44:40.190 --> 44:41.190
上边是

44:41.190 --> 44:42.190
一点

44:42.190 --> 44:43.190
下面是负一点

44:43.190 --> 44:44.190
是这样的

44:44.190 --> 44:45.190
可以吧

44:45.190 --> 44:47.190
是这样的

44:47.190 --> 44:48.190
那大家

44:48.190 --> 44:49.190
把它理解为一个

44:49.190 --> 44:50.190
右手做标系

44:50.190 --> 44:51.190
对不对

44:51.190 --> 44:52.190
右手的一个做标系

44:54.190 --> 44:55.190
那这是

44:55.190 --> 44:57.190
这个webgr的做标系统

44:57.190 --> 44:58.190
然后我们可以看一下

44:58.190 --> 44:59.190
这个commerce和webgr的

44:59.190 --> 45:00.190
一个做标系统

45:00.190 --> 45:02.190
它俩的一个关系

45:02.190 --> 45:03.190
你看commerce的做标系统

45:03.190 --> 45:04.190
是不是从左上角

45:04.190 --> 45:05.190
这点为00

45:05.190 --> 45:06.190
对吧

45:06.190 --> 45:07.190
那我们webgr

45:07.190 --> 45:08.190
是中间这一点

45:08.190 --> 45:09.190
也就是让它平移了

45:09.190 --> 45:10.190
对吧

45:10.190 --> 45:11.190
把做标桌平移了

45:11.190 --> 45:12.190
并且单位长度变了

45:12.190 --> 45:13.190
对吧

45:13.190 --> 45:14.190
我们正常commerce的

45:14.190 --> 45:15.190
这个做标系

45:15.190 --> 45:16.190
它的单位长度

45:16.190 --> 45:17.190
就是一个像素

45:17.190 --> 45:18.190
那我们这个呢

45:18.190 --> 45:20.190
webgr的做标

45:20.190 --> 45:22.190
这个单位长度

45:22.190 --> 45:23.190
是根据你的commerce的

45:23.190 --> 45:25.190
一个大小来定的

45:25.190 --> 45:26.190
对不对

45:26.190 --> 45:27.190
因为它的

45:27.190 --> 45:28.190
最左边是负一

45:28.190 --> 45:29.190
最右边是一

45:29.190 --> 45:30.190
它的区间

45:30.190 --> 45:32.190
就是负一到一之间的

45:32.190 --> 45:33.190
它会把你的一个

45:33.190 --> 45:34.190
commerce画布

45:34.190 --> 45:36.190
它的一个宽度

45:36.190 --> 45:38.190
置为负一到一之间

45:38.190 --> 45:39.190
可以吧

45:40.190 --> 45:41.190
置为负一到一之间

45:43.190 --> 45:44.190
然后这就是

45:45.190 --> 45:46.190
这就是我们这个

45:46.190 --> 45:47.190
webgr的一个

45:47.190 --> 45:48.190
做标系统

45:48.190 --> 45:49.190
那后面我还是会

45:49.190 --> 45:51.190
带着大家再

45:51.190 --> 45:52.190
再来说的

45:52.190 --> 45:54.190
因为在webgr里面

45:54.190 --> 45:56.190
在webgr里面

45:56.190 --> 45:57.190
它的做标系统

45:57.190 --> 45:58.190
是一个很重要的

45:58.190 --> 45:59.190
一个点

45:59.190 --> 46:01.190
大家必须要理解

46:01.190 --> 46:02.190
它的一个做标系统

46:02.190 --> 46:04.190
才能很好的

46:04.190 --> 46:05.190
去理解

46:05.190 --> 46:07.190
我们会图的一些

46:07.190 --> 46:08.190
位置的一些信息

46:08.190 --> 46:09.190
可以吧

46:10.190 --> 46:11.190
那好

46:11.190 --> 46:12.190
那我们这个点

46:12.190 --> 46:13.190
是不是已经实现了

46:13.190 --> 46:14.190
对吧

46:14.190 --> 46:15.190
点已经实现了

46:16.190 --> 46:17.190
那我们接下来

46:17.190 --> 46:19.190
来实现一个就是

46:19.190 --> 46:20.190
点

46:20.190 --> 46:21.190
鼠标点击的一个点

46:21.190 --> 46:22.190
可以吧

46:22.190 --> 46:23.190
鼠标点击的一个点

46:23.190 --> 46:25.190
我们现在只画了一个点

46:25.190 --> 46:26.190
对吧

46:27.190 --> 46:28.190
我们接下来

46:28.190 --> 46:30.190
会这一个动态的一个

46:30.190 --> 46:31.190
点

46:31.190 --> 46:33.190
就是我希望的是

46:33.190 --> 46:34.190
我鼠标点击哪

46:34.190 --> 46:35.190
它就给我画在那

46:35.190 --> 46:36.190
可以吧

46:36.190 --> 46:37.190
那这样的点怎么办呢

46:37.190 --> 46:39.190
我是不是这个位置

46:39.190 --> 46:40.190
就需要传递了

46:40.190 --> 46:41.190
对不对

46:41.190 --> 46:42.190
位置就需要传递了

46:42.190 --> 46:44.190
那传递的话

46:45.190 --> 46:46.190
传递的话

46:46.190 --> 46:47.190
是不是就传递一个做标

46:47.190 --> 46:48.190
对吧

46:48.190 --> 46:49.190
传递的是一个做标啊

46:49.190 --> 46:50.190
那我们

46:51.190 --> 46:53.190
最常用的这个做标

46:53.190 --> 46:54.190
是不是就是我们鼠标

46:54.190 --> 46:55.190
点击的某一个位置

46:55.190 --> 46:57.190
那我们点击的一个做标

46:57.190 --> 46:58.190
最常见的是

46:58.190 --> 47:00.190
相对于我Carors画布的

47:00.190 --> 47:01.190
对吧

47:01.190 --> 47:02.190
那这样的话

47:02.190 --> 47:04.190
我们点击的一般都是Carors

47:05.190 --> 47:06.190
画布的这个

47:06.190 --> 47:07.190
Carors的做标系统

47:07.190 --> 47:08.190
对吧

47:08.190 --> 47:10.190
那我们就需要做一个准换

47:10.190 --> 47:11.190
也就是说

47:11.190 --> 47:12.190
我们如果要是

47:12.190 --> 47:14.190
传过来的是一个

47:14.190 --> 47:16.190
Carors画布的一个做标

47:16.190 --> 47:18.190
例如我这画来一个变量

47:18.190 --> 47:21.190
就是我要传进来的一个做标

47:21.190 --> 47:22.190
可以吧

47:22.190 --> 47:23.190
VEC2

47:24.190 --> 47:25.190
代表是

47:25.190 --> 47:26.190
代表是我这是两

47:26.190 --> 47:27.190
二维的

47:27.190 --> 47:28.190
可以吧

47:28.190 --> 47:29.190
二维的

47:29.190 --> 47:30.190
来一个A-position

47:32.190 --> 47:33.190
可以吧

47:34.190 --> 47:36.190
那我怎么进行一个转换呢

47:36.190 --> 47:37.190
我就需要啊

47:37.190 --> 47:38.190
在这里

47:39.190 --> 47:43.720
我再声明一个变量

47:43.720 --> 47:44.720
VEC2

47:46.720 --> 47:48.720
或者是Float都可以

47:48.720 --> 47:49.720
来一个Position

47:49.720 --> 47:50.720
我要怎么转换呢

47:50.720 --> 47:53.220
大家可以看一下啊

47:53.220 --> 47:54.220
看一下这个图

47:56.220 --> 47:57.220
我画一个图啊

47:57.220 --> 47:58.220
我在这里

47:58.220 --> 47:59.220
他们进行一个

47:59.220 --> 48:05.260
如何的转换呢

48:10.660 --> 48:11.660
画一个图

48:11.660 --> 48:12.660
OK吧

48:12.660 --> 48:18.860
然后我们画一个举行

48:18.860 --> 48:19.860
大概是这样的

48:19.860 --> 48:20.860
对吧

48:20.860 --> 48:27.330
把这个颜色

48:27.330 --> 48:28.330
黄颜色

48:29.330 --> 48:30.330
换成黑色

48:31.330 --> 48:32.330
让它浮

48:33.330 --> 48:34.330
至于顶层

48:34.330 --> 48:38.180
可以吧

48:39.180 --> 48:40.180
它也至于顶层

48:41.180 --> 48:42.180
至于顶层

48:42.180 --> 48:45.770
OK吧

48:45.770 --> 48:46.770
那这是我们这个

48:46.770 --> 48:50.780
WebVR的一个作标系统

48:50.780 --> 48:51.780
对不对

48:51.780 --> 48:52.780
然后我们正常的作标

48:52.780 --> 48:53.780
我们

48:53.780 --> 48:55.780
我们能获取来的一个作标

48:55.780 --> 48:56.780
是不是相对于最左上角

48:56.780 --> 48:57.780
这个点的

48:57.780 --> 48:58.780
这一块啊

48:58.780 --> 48:59.780
这个蓝色区域

48:59.780 --> 49:00.780
它是我们这个

49:00.780 --> 49:01.780
画布的一个区域

49:01.780 --> 49:02.780
可以吧

49:02.780 --> 49:06.780
写的有点

49:06.780 --> 49:07.780
OK

49:07.780 --> 49:08.780
然后我们再写一下

49:08.780 --> 49:09.780
这个位置

49:09.780 --> 49:11.780
应该是我们这个零

49:11.780 --> 49:12.780
对吧

49:12.780 --> 49:13.780
这是我们Kavers画布的零

49:13.780 --> 49:14.780
OK

49:14.780 --> 49:15.780
CVS

49:15.780 --> 49:16.780
Kavers

49:16.780 --> 49:25.070
Kavers画布的零

49:25.070 --> 49:27.070
Kavers画布的零零点

49:27.070 --> 49:29.830
对吧

49:29.830 --> 49:30.830
这是这里

49:30.830 --> 49:31.830
然后

49:31.830 --> 49:32.830
这里呢

49:32.830 --> 49:33.830
这里呢

49:33.830 --> 49:34.830
这里是不是就是我们

49:34.830 --> 49:35.830
Kavers画布的这个

49:35.830 --> 49:36.830
CVS

49:36.830 --> 49:37.830
Kavers画布的

49:37.830 --> 49:38.830
Kavers画布的

49:38.830 --> 49:39.830
宽度

49:39.830 --> 49:40.830
Wise

49:41.830 --> 49:42.830
还有零

49:42.830 --> 49:43.830
这一点

49:43.830 --> 49:46.530
对吧

49:46.530 --> 49:47.530
但是这一点

49:47.530 --> 49:48.530
这一点

49:48.530 --> 49:49.530
在我们这个

49:49.530 --> 49:50.530
WebJR里面

49:50.530 --> 49:52.530
这一点作标是多少

49:52.530 --> 49:53.530
这一点作标

49:53.530 --> 49:54.530
是不是应该是11

49:54.530 --> 49:55.530
对吧

49:55.530 --> 49:56.530
这是WebJR

49:56.530 --> 49:57.530
作标系统

49:58.530 --> 49:59.530
他的

49:59.530 --> 50:00.530
作标是11

50:00.530 --> 50:01.530
都好11

50:01.530 --> 50:02.530
对吧

50:02.530 --> 50:03.530
那也就是说

50:03.530 --> 50:04.530
我要转化了

50:04.530 --> 50:05.530
对不对

50:05.530 --> 50:06.530
如何进行一个转化呢

50:06.530 --> 50:07.530
看啊

50:07.530 --> 50:08.530
我这个随便一点

50:08.530 --> 50:10.530
我现在就要随便一点

50:10.530 --> 50:13.420
换个颜色

50:13.420 --> 50:14.420
这就是我们那点

50:15.420 --> 50:16.420
这就是我这一点

50:16.420 --> 50:17.420
可以吧

50:17.420 --> 50:18.420
这一点作标

50:18.420 --> 50:19.420
我们获取来的是

50:19.420 --> 50:20.420
Kavers的

50:20.420 --> 50:22.420
Kavers的这个作标

50:22.420 --> 50:23.420
那这个作标

50:23.420 --> 50:25.420
应该是这个XY对吧

50:25.420 --> 50:26.420
都好

50:26.420 --> 50:27.420
Y

50:28.420 --> 50:29.420
我们就管它叫XY

50:29.420 --> 50:30.420
可以吧

50:30.420 --> 50:31.420
那这个XY

50:31.420 --> 50:32.420
也就是我们

50:32.420 --> 50:33.420
这个长度

50:33.420 --> 50:34.420
和上面这一部分长度

50:34.420 --> 50:35.420
对吧

50:36.420 --> 50:37.420
来写一下

50:37.420 --> 50:39.420
是这一部分长度

50:39.420 --> 50:42.300
是X

50:42.300 --> 50:47.150
然后再来

50:47.150 --> 50:48.150
这一部分

50:48.150 --> 50:50.910
是Y

50:50.910 --> 50:53.610
对吧

50:53.610 --> 50:54.610
这一部分X

50:54.610 --> 50:55.610
这一部分Y

50:55.610 --> 50:56.610
换个颜色吧

50:56.610 --> 50:58.610
这个颜色是不是都重了

50:59.610 --> 51:00.610
黄色

51:00.610 --> 51:01.610
可以吗

51:01.610 --> 51:02.610
眨眼一点

51:03.610 --> 51:04.610
OK

51:04.610 --> 51:05.610
这个区间是X

51:05.610 --> 51:07.610
这个区间是Y对吧

51:07.610 --> 51:08.610
那我们想

51:08.610 --> 51:09.610
相对于

51:09.610 --> 51:10.610
这个作标系的话

51:10.610 --> 51:11.610
WebJR作标系的话

51:11.610 --> 51:12.610
他的作标是怎么算

51:12.610 --> 51:13.610
我是不是就可以

51:13.610 --> 51:15.610
通过比例进行一个计算

51:15.610 --> 51:16.610
对吧

51:16.610 --> 51:18.610
这个X

51:18.610 --> 51:19.610
它的比例是不变的

51:19.610 --> 51:20.610
对吧

51:20.610 --> 51:21.610
那你就是说

51:21.610 --> 51:22.610
我这一部分

51:22.610 --> 51:24.610
比上我整个的这一部分

51:24.610 --> 51:26.610
它的比例是固定的

51:26.610 --> 51:27.610
对不对

51:27.610 --> 51:28.610
也就是我的X

51:28.610 --> 51:29.610
这一部分

51:29.610 --> 51:30.610
应该是

51:30.610 --> 51:31.610
我的这个X

51:31.610 --> 51:33.610
比上我的Y

51:33.610 --> 51:34.610
对吧

51:34.610 --> 51:35.610
这块来写一下

51:36.610 --> 51:37.610
X

51:37.610 --> 51:38.610
比上

51:38.610 --> 51:39.610
Y

51:40.610 --> 51:42.610
它应该等于

51:42.610 --> 51:43.610
等于什么

51:43.610 --> 51:44.610
是不是

51:44.610 --> 51:45.610
也是

51:45.610 --> 51:46.610
Y对吧

51:46.610 --> 51:47.610
WebJR里面

51:47.610 --> 51:48.610
这是1加上

51:48.610 --> 51:49.610
我这一部分

51:49.610 --> 51:50.610
XPR

51:50.610 --> 51:51.610
我号

51:51.610 --> 51:52.610
1加上

51:52.610 --> 51:53.610
XPR

51:54.610 --> 51:55.610
对吧

51:55.610 --> 51:56.610
1加上XPR

51:56.610 --> 51:57.610
比上

51:57.610 --> 51:58.610
谁

51:58.610 --> 51:59.610
比上2

51:59.610 --> 52:00.610
因为这一部分

52:00.610 --> 52:01.610
是-1

52:01.610 --> 52:02.610
到这是-1

52:02.610 --> 52:03.610
这是1

52:03.610 --> 52:04.610
那是不是就是2

52:04.610 --> 52:05.610
对不对

52:05.610 --> 52:06.610
那它俩是相等的

52:06.610 --> 52:07.610
那我们再倒一下子

52:07.610 --> 52:08.610
你这块

52:08.610 --> 52:09.610
再倒一下

52:09.610 --> 52:10.610
XPR

52:10.610 --> 52:11.610
应该等什么

52:11.610 --> 52:12.610
XPR

52:12.610 --> 52:13.610
是不是等于

52:13.610 --> 52:14.610
2倍的

52:15.610 --> 52:16.610
2

52:16.610 --> 52:17.610
乘以

52:17.610 --> 52:18.610
X

52:18.610 --> 52:19.610
除以

52:19.610 --> 52:20.610
Y

52:20.610 --> 52:21.610
对吧

52:21.610 --> 52:23.610
然后再减去一个1

52:23.610 --> 52:24.610
对不对

52:24.610 --> 52:25.610
是这样的吧

52:25.610 --> 52:27.610
这是我们最终

52:27.610 --> 52:28.610
算出来的

52:29.610 --> 52:31.610
计算完的

52:31.610 --> 52:32.610
这个点

52:32.610 --> 52:33.610
对吧

52:33.610 --> 52:34.610
那Y呢

52:34.610 --> 52:35.610
相对于Y

52:35.610 --> 52:36.610
Y是不是一样的

52:36.610 --> 52:37.610
Y是

52:37.610 --> 52:38.610
Y比上

52:38.610 --> 52:40.610
这个高度

52:40.610 --> 52:41.610
Y比上高度

52:41.610 --> 52:42.610
等于什么

52:43.610 --> 52:44.610
是不是等于

52:44.610 --> 52:45.610
我的这个

52:45.610 --> 52:46.610
YPR

52:46.610 --> 52:47.610
YPR是不是这一部分

52:47.610 --> 52:48.610
对吧

52:48.610 --> 52:49.610
这一部分

52:50.610 --> 52:52.610
就是1减去YPR

52:52.610 --> 52:53.610
对不对

52:53.610 --> 52:54.610
1减去YPR

52:54.610 --> 52:57.180
对吧

52:57.180 --> 52:58.180
然后再比上啥

52:58.180 --> 53:00.180
1减YPR

53:01.180 --> 53:03.180
再比上2

53:03.180 --> 53:04.180
对吧

53:04.180 --> 53:05.180
所以这样一来

53:05.180 --> 53:06.180
YPR一计算

53:06.180 --> 53:08.180
它应该等于什么

53:08.180 --> 53:10.180
YPR是不是应该等于

53:10.180 --> 53:12.180
再来看一下

53:12.180 --> 53:13.180
YPR等于

53:14.180 --> 53:15.180
1

53:15.180 --> 53:16.180
2Y

53:16.180 --> 53:17.180
2

53:17.180 --> 53:18.180
1

53:18.180 --> 53:19.180
1

53:19.180 --> 53:20.180
1

53:20.180 --> 53:21.180
1

53:21.180 --> 53:22.180
对吧

53:22.180 --> 53:23.180
然后被1减

53:23.180 --> 53:24.180
对不对

53:24.180 --> 53:25.180
1减去它

53:25.180 --> 53:26.180
对吧

53:26.180 --> 53:27.180
可以吗

53:27.180 --> 53:28.180
到这为止

53:28.180 --> 53:29.180
大家都能理解

53:29.180 --> 53:30.180
对不对

53:31.180 --> 53:32.180
那是P

53:32.180 --> 53:33.180
现在我们这个

53:33.180 --> 53:34.180
XY

53:34.180 --> 53:35.180
是不是都已经做

53:35.180 --> 53:36.180
计算出来了

53:36.180 --> 53:37.180
那我们只需要

53:37.180 --> 53:38.180
把这写一下

53:38.180 --> 53:39.180
就可以了

53:39.180 --> 53:40.180
那我们发现

53:40.180 --> 53:41.180
它俩是有一定的

53:41.180 --> 53:42.180
相

53:42.180 --> 53:43.180
有点相反的

53:43.180 --> 53:44.180
相反数的

53:44.180 --> 53:45.180
你看这个

53:45.180 --> 53:46.180
一个是1减

53:46.180 --> 53:47.180
一个是减1

53:47.180 --> 53:48.180
对吧

53:51.180 --> 53:52.180
这块有头有不明白吗

53:52.180 --> 53:53.180
为什么这块是

53:54.180 --> 53:55.180
1减吗

53:56.180 --> 53:57.180
1减是什么

53:57.180 --> 53:58.180
这一部分是1

53:58.180 --> 53:59.180
对吧

53:59.180 --> 54:00.180
1减去

54:00.180 --> 54:01.180
这一部分Y

54:01.180 --> 54:02.180
对不对

54:02.180 --> 54:03.180
我要计算是

54:03.180 --> 54:04.180
这一部分Y

54:04.180 --> 54:05.180
OK

54:05.180 --> 54:06.180
那我们接着往下来

54:07.180 --> 54:08.180
那我这块

54:08.180 --> 54:09.180
就应该分开来写了

54:09.180 --> 54:10.180
因为两个都不一样

54:10.180 --> 54:11.180
FLOAT

54:12.180 --> 54:13.180
X

54:13.180 --> 54:14.180
等于什么

54:14.180 --> 54:15.180
是不是应该等于

54:15.180 --> 54:17.180
AGUN POSITION的X

54:17.180 --> 54:18.180
它的X

54:18.180 --> 54:19.180
我们可以这样来写

54:19.180 --> 54:20.180
可以吧

54:20.180 --> 54:22.180
它的X

54:22.180 --> 54:25.180
乘以2除以Y

54:25.180 --> 54:26.180
对吧

54:26.180 --> 54:27.180
乘以2

54:27.180 --> 54:30.180
乘以2除以一个Y

54:30.180 --> 54:31.180
除以一个Y

54:31.180 --> 54:32.180
那这个宽度

54:32.180 --> 54:33.180
是不是也需要

54:33.180 --> 54:34.180
给它传过去

54:35.180 --> 54:37.180
这个宽度也需要传

54:39.180 --> 54:40.180
那我们传进去

54:40.180 --> 54:41.180
来

54:42.180 --> 54:43.180
传进去

54:43.180 --> 54:44.180
那这样的话

54:44.180 --> 54:45.180
这个宽度是不是谁都能用

54:45.180 --> 54:46.180
对吧

54:46.180 --> 54:47.180
谁都能用

54:47.180 --> 54:48.180
谁都能用的话

54:48.180 --> 54:49.180
我们直接来个UNIFON

54:49.180 --> 54:51.180
UNIFORM

54:52.180 --> 54:54.180
来一个VCR

54:56.180 --> 54:57.180
这个sprint

54:59.180 --> 55:00.180
sprint size

55:00.180 --> 55:01.180
可以吧

55:02.180 --> 55:03.180
sprint size

55:03.180 --> 55:04.180
OK

55:04.180 --> 55:05.180
然后比上这个

55:05.180 --> 55:07.180
sprint size的X

55:07.180 --> 55:08.180
可以吧

55:08.180 --> 55:09.180
它的X其实就是

55:09.180 --> 55:10.180
Y值

55:12.180 --> 55:14.180
然后最后再减去一个1.0

55:14.180 --> 55:15.180
对不对

55:15.180 --> 55:16.180
我这为什么减1.0

55:16.180 --> 55:17.180
因为我们这是浮点型

55:17.180 --> 55:18.180
所以你这块

55:19.180 --> 55:20.180
所以你这块必须要

55:20.180 --> 55:22.180
用一个浮点数

55:22.180 --> 55:23.180
因为在我们这个

55:23.180 --> 55:24.180
JLSL

55:24.180 --> 55:26.180
它是一个强类型语言

55:26.180 --> 55:29.180
它是一种强类型语言

55:29.180 --> 55:31.180
所以它的一个类型

55:31.180 --> 55:32.180
必须是1.1对应的

55:32.180 --> 55:33.180
可以吧

55:33.180 --> 55:35.180
它的类型必须是1.1对应的

55:35.180 --> 55:37.180
再接着FLOATY

55:37.180 --> 55:38.180
等于什么

55:38.180 --> 55:39.180
A-POSITION

55:39.180 --> 55:41.180
应该是1.0减

55:41.180 --> 55:42.180
对吧

55:42.180 --> 55:44.180
减去A-POSITION

55:44.180 --> 55:47.060
2

55:47.060 --> 55:49.060
A-POSITION.Y

55:49.060 --> 55:52.460
1.Y

55:53.460 --> 55:54.460
乘一个2

55:54.460 --> 55:57.460
说一个sprint size.Y

55:58.460 --> 55:59.460
对吧

55:59.460 --> 56:00.460
是不是就这样

56:00.460 --> 56:01.460
然后这块加

56:02.460 --> 56:03.460
不需要加过号

56:03.460 --> 56:04.460
对不对

56:04.460 --> 56:05.460
你这块可以给它加啥

56:05.460 --> 56:06.460
因为可以不给它加

56:06.460 --> 56:07.460
都一样

56:07.460 --> 56:08.460
因为它的预算顺序

56:09.460 --> 56:11.460
优先级是乘除先

56:11.460 --> 56:12.460
加减

56:12.460 --> 56:13.460
对吧

56:13.460 --> 56:14.460
后加减先称除

56:14.460 --> 56:15.460
然后我们在这里

56:15.460 --> 56:16.460
传递的时候

56:16.460 --> 56:17.460
我们是不是就需要

56:17.460 --> 56:19.460
把这两个纸都传进去

56:19.460 --> 56:20.460
对吧

56:20.460 --> 56:21.460
然后第三个纸

56:21.460 --> 56:22.460
你可以自己传

56:22.460 --> 56:24.460
然后最后一个纸传个1

56:24.460 --> 56:25.460
可以吧

56:26.460 --> 56:27.460
然后我们接下来

56:27.460 --> 56:28.460
就要传递这两个坐标了

56:28.460 --> 56:29.460
对不对

56:29.460 --> 56:30.460
这两个坐标我刚才说

56:30.460 --> 56:31.460
怎么传

56:31.460 --> 56:32.460
我是不是说

56:32.460 --> 56:33.460
我点击某个位置

56:33.460 --> 56:35.460
然后让它进行一个传递

56:35.460 --> 56:36.460
对吧

56:36.460 --> 56:37.460
那点击某个位置的话

56:37.460 --> 56:38.460
我就需要

56:38.460 --> 56:39.460
给我们这个converse身上

56:39.460 --> 56:40.460
添加一个点击事件

56:40.460 --> 56:41.460
对吧

56:41.460 --> 56:42.460
来个function吧

56:43.460 --> 56:44.460
fund event

56:44.460 --> 56:46.780
来

56:46.780 --> 56:48.780
给all colors身上

56:49.780 --> 56:51.780
点击almost

56:53.780 --> 56:54.780
可以吧

56:55.780 --> 56:56.780
然后我们后续到

56:56.780 --> 56:57.780
这一点坐标呗

56:57.780 --> 56:58.780
我一个x了

56:58.780 --> 56:59.780
什么

56:59.780 --> 57:01.780
1点offside x

57:01.780 --> 57:02.780
对吧

57:02.780 --> 57:03.780
我一个y等于

57:03.780 --> 57:05.780
1点offside y

57:05.780 --> 57:06.780
对吧

57:06.780 --> 57:09.340
可以吧

57:10.340 --> 57:11.340
然后我们接下来

57:11.340 --> 57:12.340
是不是就应该传递

57:12.340 --> 57:13.340
这个值

57:13.340 --> 57:14.340
对不对

57:14.340 --> 57:15.340
传递这个值

57:15.340 --> 57:16.340
如何传递

57:16.340 --> 57:17.340
我们再来看

57:17.340 --> 57:18.340
接下来要传递了

57:18.340 --> 57:19.340
传递的话

57:19.340 --> 57:20.340
我们就需要

57:20.340 --> 57:21.340
给它传递到

57:21.340 --> 57:22.340
我们这个存储位置上去

57:22.340 --> 57:23.340
对吧

57:23.340 --> 57:24.340
这个

57:24.340 --> 57:25.340
a-position

57:25.340 --> 57:26.340
这个存储位置上去

57:26.340 --> 57:28.340
那我们就需要

57:28.340 --> 57:29.340
先获取一下

57:29.340 --> 57:30.340
这个position的位置

57:30.340 --> 57:31.340
可以吧

57:31.340 --> 57:32.340
我一个

57:32.340 --> 57:33.340
a-position

57:33.340 --> 57:34.340
我们如何获取

57:34.340 --> 57:36.340
这个position的位置呢

57:36.340 --> 57:37.340
我们通过

57:37.340 --> 57:39.340
gr身上的方法来获取

57:39.340 --> 57:40.340
是gr身上的

57:40.340 --> 57:41.340
get attribute location

57:42.340 --> 57:43.340
为什么这块是

57:43.340 --> 57:44.340
attribute

57:44.340 --> 57:45.340
就是因为我们

57:45.340 --> 57:47.340
获取的这个数据

57:47.340 --> 57:49.340
它的一个存储类型

57:49.340 --> 57:50.340
它是这个 attribute

57:50.340 --> 57:51.340
所以我们这块

57:51.340 --> 57:52.340
写的是

57:52.340 --> 57:53.340
get attribute

57:53.340 --> 57:54.340
那这个下面是

57:54.340 --> 57:55.340
uniform

57:55.340 --> 57:56.340
我们就需要写的是

57:56.340 --> 57:57.340
get uniform location

57:57.340 --> 57:59.340
所以这是有区别的

57:59.340 --> 58:00.340
大家要注意一下

58:00.340 --> 58:01.340
主要2点

58:01.340 --> 58:03.340
get attribute

58:03.340 --> 58:04.340
RATT

58:04.340 --> 58:05.340
TTRIB

58:05.340 --> 58:06.340
然后注意

58:06.340 --> 58:07.340
这个 attribute

58:07.340 --> 58:08.340
它没有后面的ut

58:08.340 --> 58:09.340
ut

58:09.340 --> 58:10.340
它只是直接倒B

58:10.340 --> 58:12.340
我们后面来个location

58:12.340 --> 58:14.340
然后这个方法里面

58:14.340 --> 58:16.340
需要你传递两参数

58:16.340 --> 58:17.340
第一个参数呢

58:17.340 --> 58:19.340
就是这个程序

58:19.340 --> 58:20.340
Program

58:20.340 --> 58:21.340
这个程序

58:21.340 --> 58:22.340
第二个参数是

58:22.340 --> 58:23.340
你要获取到的

58:23.340 --> 58:24.340
这个程序里面的

58:24.340 --> 58:25.340
一个变量

58:25.340 --> 58:26.340
可以吧

58:26.340 --> 58:27.340
那我们来

58:27.340 --> 58:28.340
Program

58:28.340 --> 58:29.340
我们这是

58:29.340 --> 58:30.340
也叫Program

58:30.340 --> 58:31.340
对吧

58:31.340 --> 58:32.340
然后第二个是

58:32.340 --> 58:33.340
我们要获取到的

58:33.340 --> 58:34.340
这个变量

58:34.340 --> 58:35.340
变量名

58:35.340 --> 58:36.340
我是不是就想获取

58:36.340 --> 58:37.340
这个a-position

58:37.340 --> 58:38.340
对不对

58:38.340 --> 58:39.340
直接拿过来

58:39.340 --> 58:40.340
那个uniform

58:40.340 --> 58:41.340
也需要传

58:41.340 --> 58:42.340
对吧

58:42.340 --> 58:43.340
所以我们这个uniform

58:43.340 --> 58:44.340
也给它拿过来

58:44.340 --> 58:45.340
uniform

58:45.340 --> 58:47.340
这个screen size

58:47.340 --> 58:49.340
screen size

58:49.340 --> 58:51.340
get

58:51.340 --> 58:52.340
uniform

58:52.340 --> 58:54.340
uniform

58:54.340 --> 58:56.340
location

58:56.340 --> 58:57.340
对吧

58:57.340 --> 58:58.340
来个Program

58:58.340 --> 59:00.340
的号

59:00.340 --> 59:04.340
这个screen size

59:04.340 --> 59:05.340
对吧

59:05.340 --> 59:06.340
screen size

59:06.340 --> 59:07.340
OK吧

59:07.340 --> 59:08.340
然后接下来

59:08.340 --> 59:10.340
怎么来传递呢

59:10.340 --> 59:11.340
这是不是说完了

59:11.340 --> 59:12.340
对吧

59:12.340 --> 59:13.340
然后我们再来

59:13.340 --> 59:14.340
怎么来传递

59:14.340 --> 59:16.340
像atribute复制的话

59:16.340 --> 59:17.340
atribute变量复制的话

59:17.340 --> 59:18.340
我们需要通过这个方法

59:18.340 --> 59:22.340
叫jr.wordtaxatribute3f

59:22.340 --> 59:23.340
这个3f

59:23.340 --> 59:25.340
你可以改成什么

59:25.340 --> 59:27.340
2f

59:27.340 --> 59:28.340
2f

59:28.340 --> 59:29.340
或者4f

59:29.340 --> 59:30.340
代表什么意思

59:30.340 --> 59:32.340
代表是有几个分量组成的

59:32.340 --> 59:33.340
比如说这个数据

59:33.340 --> 59:35.340
是有几个分量组成的

59:35.340 --> 59:37.340
它是有x,y,z组成的

59:37.340 --> 59:38.340
还是有x,y组成的

59:38.340 --> 59:41.340
还是有x,y,z,w组成的

59:41.340 --> 59:43.340
它是有几个分量

59:43.340 --> 59:45.340
可以吧

59:45.340 --> 59:47.340
然后可以看一下

59:47.340 --> 59:48.340
这块

59:48.340 --> 59:50.340
有我们这个webjr

59:50.340 --> 59:51.340
里面

59:51.340 --> 59:52.340
它的一个命名规范

59:52.340 --> 59:53.340
命名规范

59:53.340 --> 59:57.340
它是前边这个jr.wordtaxatribute

59:57.340 --> 59:58.340
到这

59:58.340 --> 01:00:00.340
是基础的寒数名

01:00:00.340 --> 01:00:01.340
然后这个3

01:00:01.340 --> 01:00:02.340
代表是一个参数的一个个数

01:00:02.340 --> 01:00:05.340
这个f代表是参数的这个类型

01:00:05.340 --> 01:00:06.340
可以吧

01:00:06.340 --> 01:00:08.340
f代表是浮电型

01:00:08.340 --> 01:00:10.340
然后i代表是整形

01:00:10.340 --> 01:00:11.340
能理解吧

01:00:11.340 --> 01:00:13.340
那这是这两个

01:00:13.340 --> 01:00:15.340
然后我们就可以往里传参了

01:00:15.340 --> 01:00:16.340
对吧

01:00:16.340 --> 01:00:17.340
我们可以往里传参了

01:00:17.340 --> 01:00:19.340
接着来传一下吧

01:00:19.340 --> 01:00:20.340
通过调用这个方法

01:00:20.340 --> 01:00:21.340
这个方法叫什么了

01:00:21.340 --> 01:00:23.340
wordtaxatribute3f对吧

01:00:23.340 --> 01:00:25.340
在这里

01:00:25.340 --> 01:00:27.340
jr.wordtaxat

01:00:28.340 --> 01:00:32.340
wordtaxatributea

01:00:32.340 --> 01:00:35.340
ptrib

01:00:36.340 --> 01:00:37.340
3f对吧

01:00:37.340 --> 01:00:39.340
那这个你可以传

01:00:39.340 --> 01:00:40.340
这个

01:00:40.340 --> 01:00:41.340
第一个参数

01:00:41.340 --> 01:00:42.340
这个方法

01:00:42.340 --> 01:00:43.340
第一个参数我们再来看一下

01:00:43.340 --> 01:00:45.340
第一个参数是你这个location

01:00:45.340 --> 01:00:46.340
你要传到的一个位置

01:00:46.340 --> 01:00:47.340
就是我们刚才获取了

01:00:47.340 --> 01:00:48.340
i的那个位置

01:00:48.340 --> 01:00:49.340
对吧

01:00:49.340 --> 01:00:50.340
a-position那个位置

01:00:50.340 --> 01:00:52.340
然后后面的是你负的一个值

01:00:52.340 --> 01:00:54.340
比如我这块lag

01:00:54.340 --> 01:00:56.340
a-position

01:00:56.340 --> 01:00:58.340
然后负的值应该是

01:00:58.340 --> 01:00:59.340
x都好

01:00:59.340 --> 01:01:00.340
y都好

01:01:00.340 --> 01:01:01.340
然后

01:01:03.340 --> 01:01:04.340
lag0吧

01:01:04.340 --> 01:01:05.340
ok吧

01:01:05.340 --> 01:01:06.340
在那里

01:01:07.340 --> 01:01:08.340
然后再接下来

01:01:08.340 --> 01:01:10.340
我们现在已经付完值了对不对

01:01:10.340 --> 01:01:11.340
还有一个

01:01:11.340 --> 01:01:13.340
还有一个值没复制对吧

01:01:13.340 --> 01:01:15.340
还有这个screen size也没有复制

01:01:15.340 --> 01:01:16.340
那这个

01:01:16.340 --> 01:01:17.340
它是uniform的对不对

01:01:17.340 --> 01:01:19.340
uniform的话有专门

01:01:19.340 --> 01:01:20.340
uniform的一个

01:01:21.340 --> 01:01:22.340
变量复制

01:01:22.340 --> 01:01:24.340
就直接用uniform

01:01:24.340 --> 01:01:25.340
4f或者4f都可以

01:01:25.340 --> 01:01:26.340
可以吧

01:01:26.340 --> 01:01:28.340
那我们这块来写一下

01:01:28.340 --> 01:01:29.340
我写个2f呢

01:01:29.340 --> 01:01:30.340
看一下

01:01:30.340 --> 01:01:31.340
会不会没错

01:01:31.340 --> 01:01:32.340
这样子

01:01:32.340 --> 01:01:33.340
uniform

01:01:34.340 --> 01:01:35.340
uniform

01:01:35.340 --> 01:01:36.340
2f

01:01:37.340 --> 01:01:38.340
然后里面

01:01:38.340 --> 01:01:39.340
screen size

01:01:39.340 --> 01:01:40.340
也是一样的

01:01:40.340 --> 01:01:41.340
跟我们刚才的adribute

01:01:41.340 --> 01:01:42.340
两个值

01:01:42.340 --> 01:01:43.340
第一个

01:01:43.340 --> 01:01:45.340
应该两个都是500吧

01:01:45.340 --> 01:01:47.340
那我直接传course点

01:01:47.340 --> 01:01:48.340
course的宽度

01:01:48.340 --> 01:01:49.340
course的高度

01:01:49.340 --> 01:01:50.340
可以吧

01:01:50.340 --> 01:01:51.340
怎么又出

01:01:51.340 --> 01:01:53.340
广告了

01:01:53.340 --> 01:01:55.340
cnds

01:01:55.340 --> 01:01:57.340
course的宽度

01:01:57.340 --> 01:01:59.340
course的

01:01:59.340 --> 01:02:00.340
高度

01:02:00.340 --> 01:02:04.040
可以吧

01:02:04.040 --> 01:02:05.040
那我现在付完值了

01:02:05.040 --> 01:02:06.040
对不对

01:02:06.040 --> 01:02:07.040
付完值了

01:02:07.040 --> 01:02:08.040
接下来呢

01:02:08.040 --> 01:02:09.040
再往下

01:02:09.040 --> 01:02:11.040
并不是说付完值之后

01:02:11.040 --> 01:02:13.040
我们就可以用了

01:02:13.040 --> 01:02:14.040
我们看一下

01:02:14.040 --> 01:02:15.040
付完值之后

01:02:15.040 --> 01:02:17.040
我们到底能不能汇制呢

01:02:17.040 --> 01:02:19.040
来

01:02:19.040 --> 01:02:20.040
直接拿过来

01:02:20.040 --> 01:02:21.040
汇制一下

01:02:21.040 --> 01:02:23.040
这个course

01:02:23.040 --> 01:02:24.040
拿过来

01:02:24.040 --> 01:02:25.040
放在这

01:02:25.040 --> 01:02:26.040
可以吧

01:02:27.040 --> 01:02:28.040
来

01:02:28.040 --> 01:02:29.040
我们看一下

01:02:29.040 --> 01:02:30.040
我刷新

01:02:30.040 --> 01:02:31.040
爆错了

01:02:31.040 --> 01:02:32.040
对吧

01:02:32.040 --> 01:02:33.040
它说uniform

01:02:33.040 --> 01:02:34.040
错了

01:02:34.040 --> 01:02:35.040
uniform

01:02:36.040 --> 01:02:38.040
哪里的uniform写错了

01:02:38.040 --> 01:02:43.500
灼色器里面的uniform写错了

01:02:43.500 --> 01:02:46.500
uniform

01:02:47.500 --> 01:02:48.500
刷新

01:02:49.500 --> 01:02:52.500
uniform

01:02:52.500 --> 01:02:53.500
刷新

01:02:53.500 --> 01:02:54.500
这回呢

01:02:54.500 --> 01:02:55.500
又错了

01:02:56.500 --> 01:02:58.500
它告诉我这个成

01:02:58.500 --> 01:02:59.500
成简

01:03:00.500 --> 01:03:01.500
它说我这个里面

01:03:01.500 --> 01:03:03.500
数据类型不对

01:03:03.500 --> 01:03:04.500
我哪里

01:03:04.500 --> 01:03:05.500
成的数据类型不对

01:03:05.500 --> 01:03:06.500
看到了吗

01:03:06.500 --> 01:03:07.500
因为我这块是一个浮电型

01:03:07.500 --> 01:03:08.500
所以我们这里面

01:03:08.500 --> 01:03:10.500
所有的都应该是一个浮电型

01:03:11.500 --> 01:03:13.500
这块都是浮电型

01:03:14.500 --> 01:03:15.500
这回呢

01:03:15.500 --> 01:03:16.500
我们再来看一下

01:03:16.500 --> 01:03:17.500
刷新

01:03:17.500 --> 01:03:18.500
是不是可以

01:03:18.500 --> 01:03:19.500
但是好像

01:03:19.500 --> 01:03:20.500
包拾

01:03:20.500 --> 01:03:21.500
这回来看一下

01:03:21.500 --> 01:03:22.500
我是不是没有执行

01:03:22.500 --> 01:03:23.500
厉害数

01:03:23.500 --> 01:03:24.500
没有执行band event

01:03:24.500 --> 01:03:26.500
我执行一下band event

01:03:26.500 --> 01:03:27.500
然后我们在这里

01:03:27.500 --> 01:03:32.610
打印一下我的xy做标

01:03:32.610 --> 01:03:33.610
可以吧

01:03:33.610 --> 01:03:34.610
然后我们来看一下

01:03:34.610 --> 01:03:35.610
刷新点击

01:03:35.610 --> 01:03:36.610
又爆错了

01:03:37.610 --> 01:03:38.610
I tribute

01:03:38.610 --> 01:03:39.610
我看一下

01:03:39.610 --> 01:03:40.610
我是不是函数名

01:03:40.610 --> 01:03:41.610
写错了

01:03:41.610 --> 01:03:45.180
or tax attribute

01:03:45.180 --> 01:03:47.180
ver tex

01:03:47.180 --> 01:03:48.180
tex

01:03:48.180 --> 01:03:49.180
又写错了

01:03:49.180 --> 01:03:50.180
写错了

01:03:50.180 --> 01:03:52.180
刷新点击

01:03:52.180 --> 01:03:53.180
没问题

01:03:53.180 --> 01:03:54.180
但是你发现

01:03:54.180 --> 01:03:55.180
我这个color是不是变了

01:03:55.180 --> 01:03:56.180
对吧

01:03:56.180 --> 01:03:57.180
这是因为我没有

01:03:57.180 --> 01:03:58.180
清空我的这个

01:03:58.180 --> 01:03:59.180
颜色

01:03:59.180 --> 01:04:00.180
颜色混成区

01:04:00.180 --> 01:04:01.180
可以吧

01:04:01.180 --> 01:04:02.180
我每次点的时候

01:04:02.180 --> 01:04:03.180
它是不是都

01:04:03.180 --> 01:04:05.180
到一个位置上去

01:04:05.180 --> 01:04:06.180
看到了吧

01:04:07.180 --> 01:04:08.180
那我们现在是不是

01:04:08.180 --> 01:04:09.180
就实现了

01:04:09.180 --> 01:04:10.180
一个动态的去

01:04:10.180 --> 01:04:11.180
添加一个

01:04:11.180 --> 01:04:12.180
顶点的一个

01:04:12.180 --> 01:04:13.180
做标的一个问题

01:04:13.180 --> 01:04:14.180
对吧

01:04:14.180 --> 01:04:15.180
那我们如果想要

01:04:15.180 --> 01:04:16.180
把所有的顶点

01:04:16.180 --> 01:04:17.180
都留下呢

01:04:17.180 --> 01:04:18.180
怎么办

01:04:18.180 --> 01:04:19.180
我是不是

01:04:19.180 --> 01:04:20.180
就可以把顶点的

01:04:20.180 --> 01:04:21.180
做标

01:04:21.180 --> 01:04:22.180
保存到一个

01:04:22.180 --> 01:04:23.180
数组里面去

01:04:23.180 --> 01:04:24.180
对吧

01:04:24.180 --> 01:04:25.180
我可以在前面

01:04:25.180 --> 01:04:26.180
or一个

01:04:26.180 --> 01:04:27.180
pont

01:04:27.180 --> 01:04:28.180
对吧

01:04:28.180 --> 01:04:29.180
等一个数组

01:04:29.180 --> 01:04:30.180
然后

01:04:30.180 --> 01:04:32.180
我在这的时候

01:04:32.180 --> 01:04:33.180
这里

01:04:33.180 --> 01:04:35.180
我这个pont

01:04:35.180 --> 01:04:36.180
push

01:04:37.180 --> 01:04:38.180
可以吧

01:04:38.180 --> 01:04:39.180
我push一个

01:04:39.180 --> 01:04:40.180
x

01:04:40.180 --> 01:04:41.180
的号

01:04:41.180 --> 01:04:42.180
x

01:04:42.180 --> 01:04:43.180
的号y

01:04:44.180 --> 01:04:45.180
可以吧

01:04:45.180 --> 01:04:47.180
把xy都push进去

01:04:47.180 --> 01:04:48.180
然后接下来呢

01:04:48.180 --> 01:04:49.180
我在这块

01:04:49.180 --> 01:04:50.180
绘制的时候

01:04:50.180 --> 01:04:51.180
我只需要

01:04:52.180 --> 01:04:53.180
这个

01:04:53.180 --> 01:04:54.180
循环调用什么

01:04:54.180 --> 01:04:55.180
就好了

01:04:55.180 --> 01:04:56.180
对吧

01:04:56.180 --> 01:04:57.180
循环调用就好了

01:04:59.550 --> 01:05:01.550
for 循环一下

01:05:02.550 --> 01:05:03.550
for

01:05:03.550 --> 01:05:04.550
or一个

01:05:04.550 --> 01:05:05.550
i等于

01:05:05.550 --> 01:05:06.550
i小语

01:05:07.550 --> 01:05:08.550
i小语一个

01:05:08.550 --> 01:05:09.550
pont

01:05:09.550 --> 01:05:10.550
pu

01:05:10.550 --> 01:05:11.550
ants

01:05:11.550 --> 01:05:13.550
pont plus

01:05:14.550 --> 01:05:15.550
i加加

01:05:17.550 --> 01:05:18.550
可以吧

01:05:18.550 --> 01:05:19.550
然后

01:05:20.550 --> 01:05:21.550
这里

01:05:21.550 --> 01:05:22.550
这里

01:05:22.550 --> 01:05:23.550
再接着往下

01:05:24.550 --> 01:05:25.550
再接着往下

01:05:25.550 --> 01:05:26.550
我是不是

01:05:26.550 --> 01:05:27.550
就应该

01:05:27.550 --> 01:05:28.550
调用一下这个方法

01:05:28.550 --> 01:05:29.550
对吧

01:05:29.550 --> 01:05:30.550
然后里面传的

01:05:30.550 --> 01:05:31.550
应该是

01:05:31.550 --> 01:05:32.550
pont

01:05:33.550 --> 01:05:34.550
ponts的

01:05:34.550 --> 01:05:35.550
i小语

01:05:35.550 --> 01:05:36.550
对吧

01:05:36.550 --> 01:05:40.700
然后ponts的

01:05:40.700 --> 01:05:42.700
i小语

01:05:42.700 --> 01:05:45.780
对不对

01:05:45.780 --> 01:05:46.780
然后这块

01:05:46.780 --> 01:05:47.780
你可以传

01:05:47.780 --> 01:05:48.780
第三个材数

01:05:48.780 --> 01:05:49.780
如果你先麻烦的话

01:05:49.780 --> 01:05:50.780
你可以不用传

01:05:50.780 --> 01:05:51.780
你这块直接写个2f

01:05:51.780 --> 01:05:52.780
就可以了

01:05:52.780 --> 01:05:53.780
可以吧

01:05:53.780 --> 01:05:57.180
然后绘制

01:05:57.180 --> 01:05:59.680
绘制

01:05:59.680 --> 01:06:00.680
也放在这

01:06:00.680 --> 01:06:01.680
可以吧

01:06:01.680 --> 01:06:02.680
然后我们现在来看一下

01:06:02.680 --> 01:06:03.680
我说新

01:06:03.680 --> 01:06:04.680
点击

01:06:04.680 --> 01:06:05.680
点击

01:06:05.680 --> 01:06:06.680
是不是又出来了

01:06:06.680 --> 01:06:07.680
对吧

01:06:07.680 --> 01:06:08.680
这是我循环绘制的

01:06:08.680 --> 01:06:09.680
可以吧

01:06:09.680 --> 01:06:10.680
我如果现在想要

01:06:10.680 --> 01:06:11.680
改变我这个颜色

01:06:11.680 --> 01:06:12.680
每个顶点的颜色

01:06:12.680 --> 01:06:13.680
怎么办呢

01:06:13.680 --> 01:06:14.680
我们也就是说

01:06:14.680 --> 01:06:15.680
我们的颜色

01:06:15.680 --> 01:06:16.680
也需要传进去

01:06:16.680 --> 01:06:17.680
对不对

01:06:17.680 --> 01:06:18.680
那我们就需要

01:06:18.680 --> 01:06:19.680
把这里面的颜色

01:06:19.680 --> 01:06:20.680
再重新的

01:06:20.680 --> 01:06:21.680
去声明一个变量

01:06:21.680 --> 01:06:22.680
对吧

01:06:22.680 --> 01:06:23.680
那这个变量叫什么呢

01:06:23.680 --> 01:06:25.680
这个变量

01:06:25.680 --> 01:06:26.680
color

01:06:26.680 --> 01:06:27.680
对不对

01:06:27.680 --> 01:06:28.680
这个color

01:06:28.680 --> 01:06:29.680
每一个都不一样

01:06:29.680 --> 01:06:30.680
那我们应该

01:06:30.680 --> 01:06:31.680
声明什么类型

01:06:31.680 --> 01:06:32.680
那个变量的

01:06:32.680 --> 01:06:33.680
这个color

01:06:33.680 --> 01:06:34.680
我们需要传过来对吧

01:06:34.680 --> 01:06:35.680
color

01:06:35.680 --> 01:06:36.680
颜色

01:06:36.680 --> 01:06:37.680
是不是也属于

01:06:37.680 --> 01:06:38.680
每个顶点的

01:06:38.680 --> 01:06:39.680
那我们每个

01:06:39.680 --> 01:06:40.680
顶点的特点

01:06:40.680 --> 01:06:41.680
我们就需要

01:06:41.680 --> 01:06:42.680
也需要传递到

01:06:42.680 --> 01:06:43.680
我们这个

01:06:43.680 --> 01:06:44.680
顶点组色器里面去

01:06:44.680 --> 01:06:45.680
可以吧

01:06:45.680 --> 01:06:46.680
所有的数据

01:06:46.680 --> 01:06:47.680
都是需要

01:06:47.680 --> 01:06:48.680
经过顶点组色器的

01:06:48.680 --> 01:06:49.680
等你解了

01:06:49.680 --> 01:06:50.680
那我们在这里

01:06:50.680 --> 01:06:51.680
如果要想

01:06:51.680 --> 01:06:52.680
再来一个变量的话

01:06:52.680 --> 01:06:53.680
我们就需要用

01:06:53.680 --> 01:06:54.680
vary

01:06:54.680 --> 01:06:55.680
这个变

01:06:55.680 --> 01:06:56.680
这个声明方式

01:06:56.680 --> 01:06:57.680
就是可变变量

01:06:57.680 --> 01:06:59.680
来个vec4

01:06:59.680 --> 01:07:01.680
等于一个a-color

01:07:02.680 --> 01:07:03.680
f-color

01:07:03.680 --> 01:07:04.680
或者v-color

01:07:04.680 --> 01:07:05.680
可以吧

01:07:05.680 --> 01:07:06.680
然后我们这里面

01:07:06.680 --> 01:07:07.680
就可以传递

01:07:07.680 --> 01:07:08.680
f-color

01:07:08.680 --> 01:07:09.680
可以吧

01:07:09.680 --> 01:07:10.680
每一个颜色都不一样

01:07:10.680 --> 01:07:11.680
然后这个v-color

01:07:11.680 --> 01:07:12.680
我们是不是需要

01:07:12.680 --> 01:07:13.680
在顶点组色器里面

01:07:13.680 --> 01:07:14.680
也声明一下

01:07:14.680 --> 01:07:15.680
因为它是

01:07:15.680 --> 01:07:16.680
需要通过

01:07:16.680 --> 01:07:17.680
顶点组色器里面

01:07:17.680 --> 01:07:18.680
传过来的

01:07:18.680 --> 01:07:20.680
vc4

01:07:22.680 --> 01:07:23.680
color

01:07:23.680 --> 01:07:25.680
然后这个color

01:07:25.680 --> 01:07:26.680
怎么来

01:07:26.680 --> 01:07:27.680
怎么来

01:07:27.680 --> 01:07:28.680
让我们复职呢

01:07:28.680 --> 01:07:29.680
这个color

01:07:29.680 --> 01:07:30.680
我们不能直接复职

01:07:30.680 --> 01:07:31.680
我们这个color

01:07:31.680 --> 01:07:32.680
只能再通过

01:07:32.680 --> 01:07:33.680
另一个变量

01:07:33.680 --> 01:07:35.680
来进行一个复职

01:07:35.680 --> 01:07:36.680
那另一个变量

01:07:36.680 --> 01:07:37.680
就是我们

01:07:37.680 --> 01:07:38.680
顶点的一个信息了

01:07:38.680 --> 01:07:39.680
那每一个顶点

01:07:39.680 --> 01:07:40.680
它是不一样的

01:07:40.680 --> 01:07:41.680
我们就需要

01:07:41.680 --> 01:07:42.680
再订一个

01:07:42.680 --> 01:07:43.680
i-tribute

01:07:43.680 --> 01:07:44.680
vec4

01:07:45.680 --> 01:07:46.680
a-color

01:07:47.680 --> 01:07:48.680
然后我们在这里

01:07:48.680 --> 01:07:49.680
在我们顶点组色器里面

01:07:49.680 --> 01:07:50.680
对其

01:07:50.680 --> 01:07:51.680
对这个

01:07:51.680 --> 01:07:52.680
v-color

01:07:52.680 --> 01:07:53.680
进行一个复职

01:07:53.680 --> 01:07:55.680
复职a-color

01:07:55.680 --> 01:07:56.680
可以吧

01:07:56.680 --> 01:07:57.680
然后我们只需要传递

01:07:57.680 --> 01:07:58.680
这个a-color

01:07:58.680 --> 01:07:59.680
就可以了

01:07:59.680 --> 01:08:00.680
好吧

01:08:00.680 --> 01:08:01.680
然后我们在那里传递

01:08:01.680 --> 01:08:02.680
那我这样

01:08:02.680 --> 01:08:03.680
每次点击的时候

01:08:03.680 --> 01:08:04.680
我让这个color

01:08:04.680 --> 01:08:05.680
我也误了一个color

01:08:06.680 --> 01:08:07.680
然后这个color

01:08:07.680 --> 01:08:08.680
等于什么呢

01:08:08.680 --> 01:08:10.680
color是

01:08:10.680 --> 01:08:11.680
三

01:08:11.680 --> 01:08:12.680
四位的

01:08:12.680 --> 01:08:13.680
对吧

01:08:13.680 --> 01:08:14.680
四位的rgba

01:08:14.680 --> 01:08:15.680
那四位的

01:08:15.680 --> 01:08:16.680
每一位

01:08:16.680 --> 01:08:17.680
我都让他

01:08:17.680 --> 01:08:18.680
这个

01:08:19.680 --> 01:08:20.680
叫什么了

01:08:21.680 --> 01:08:22.680
随机产生

01:08:22.680 --> 01:08:23.680
对吧

01:08:23.680 --> 01:08:24.680
每一位都随机产生

01:08:24.680 --> 01:08:25.680
然后注意

01:08:25.680 --> 01:08:26.680
我们要在这里

01:08:26.680 --> 01:08:27.680
用到的这个

01:08:27.680 --> 01:08:28.680
rgba

01:08:28.680 --> 01:08:29.680
这个颜色纸

01:08:29.680 --> 01:08:31.680
它都是从0到1之间的

01:08:31.680 --> 01:08:32.680
可以吧

01:08:32.680 --> 01:08:34.680
都是从0到1之间的

01:08:35.680 --> 01:08:36.680
master

01:08:36.680 --> 01:08:37.680
不然就

01:08:37.680 --> 01:08:38.680
它就不是

01:08:38.680 --> 01:08:40.680
从0到25了

01:08:40.680 --> 01:08:42.680
它是0到1之间的

01:08:43.680 --> 01:08:44.680
所以我们直接

01:08:44.680 --> 01:08:45.680
全都是master

01:08:45.680 --> 01:08:46.680
不然就

01:08:46.680 --> 01:08:49.700
可以吧

01:08:49.700 --> 01:08:52.390
OK吧

01:08:53.390 --> 01:08:55.390
这是这样的一个值

01:08:55.390 --> 01:08:57.390
我也需要拼接

01:08:57.390 --> 01:08:58.390
对吧

01:08:58.390 --> 01:09:02.820
它是一个字路串

01:09:02.820 --> 01:09:03.820
再来

01:09:03.820 --> 01:09:04.820
加上

01:09:04.820 --> 01:09:07.260
都好

01:09:07.260 --> 01:09:08.260
或者这块

01:09:08.260 --> 01:09:09.260
我们可以这样

01:09:09.260 --> 01:09:10.260
对不对

01:09:10.260 --> 01:09:11.260
这块不用写这么多

01:09:11.260 --> 01:09:12.260
这个color

01:09:12.260 --> 01:09:13.260
可以不用声明

01:09:13.260 --> 01:09:14.260
我直接把这个

01:09:14.260 --> 01:09:15.260
master random

01:09:15.260 --> 01:09:16.260
直接传是不是可以

01:09:16.260 --> 01:09:17.260
对吧

01:09:17.260 --> 01:09:18.260
如何传呢

01:09:18.260 --> 01:09:19.260
我直接把这个color

01:09:19.260 --> 01:09:20.260
传进去吧

01:09:21.260 --> 01:09:23.260
color是一个做标

01:09:27.570 --> 01:09:30.460
来

01:09:31.460 --> 01:09:32.460
color

01:09:34.460 --> 01:09:35.460
每一个

01:09:35.460 --> 01:09:36.460
它都不一样

01:09:36.460 --> 01:09:38.460
它都是由四位组成的

01:09:38.460 --> 01:09:39.460
四位

01:09:39.460 --> 01:09:40.460
我给它这样

01:09:40.460 --> 01:09:41.460
再来一个函数

01:09:41.460 --> 01:09:42.460
就来让它

01:09:42.460 --> 01:09:43.460
随机产生

01:09:43.460 --> 01:09:44.460
random

01:09:44.460 --> 01:09:45.460
color

01:09:45.460 --> 01:09:46.460
可以把随机产生

01:09:46.460 --> 01:09:47.460
我的color值的

01:09:48.460 --> 01:09:49.460
我一个

01:09:49.460 --> 01:09:50.460
r值

01:09:50.460 --> 01:09:51.460
等于random

01:09:51.460 --> 01:09:54.960
等于master random

01:09:54.960 --> 01:10:00.060
random

01:10:02.060 --> 01:10:03.060
我一个b

01:10:03.060 --> 01:10:04.060
rg

01:10:05.060 --> 01:10:07.060
master random

01:10:07.060 --> 01:10:11.850
我一个a值

01:10:11.850 --> 01:10:12.850
rgb

01:10:12.850 --> 01:10:14.850
b值

01:10:14.850 --> 01:10:16.850
master random

01:10:17.850 --> 01:10:18.850
然后a值

01:10:18.850 --> 01:10:19.850
我就让它

01:10:19.850 --> 01:10:21.850
在0.5-1之间

01:10:21.850 --> 01:10:22.850
可以吧

01:10:22.850 --> 01:10:23.850
他们a-t-h

01:10:24.850 --> 01:10:26.850
0.5

01:10:26.850 --> 01:10:28.850
0.5-1之间的话

01:10:28.850 --> 01:10:29.850
我应该怎么来做呢

01:10:29.850 --> 01:10:31.850
0.1之间

01:10:31.850 --> 01:10:33.850
0.1之间

01:10:33.850 --> 01:10:35.850
那就是0.5

01:10:35.850 --> 01:10:36.850
加上

01:10:36.850 --> 01:10:38.850
master random

01:10:38.850 --> 01:10:39.850
乘以

01:10:39.850 --> 01:10:43.860
乘以一个0.5

01:10:43.860 --> 01:10:49.060
对吧

01:10:49.060 --> 01:10:50.060
对吧是加上

01:10:50.060 --> 01:10:51.060
没问题对吧

01:10:51.060 --> 01:10:52.060
然后我们最后

01:10:52.060 --> 01:10:54.060
return一个

01:10:55.060 --> 01:10:56.060
扣号

01:10:57.060 --> 01:10:58.060
扣号

01:10:58.060 --> 01:10:59.060
加上

01:10:59.060 --> 01:11:00.060
r加上

01:11:00.060 --> 01:11:01.060
都号

01:11:01.060 --> 01:11:02.060
加上

01:11:02.060 --> 01:11:03.060
g加上

01:11:03.060 --> 01:11:04.060
都号

01:11:04.060 --> 01:11:05.060
加上

01:11:05.060 --> 01:11:06.060
b

01:11:06.060 --> 01:11:07.060
加上

01:11:07.060 --> 01:11:09.880
b

01:11:09.880 --> 01:11:10.880
a

01:11:10.880 --> 01:11:11.880
加上

01:11:12.880 --> 01:11:13.880
都号

01:11:13.880 --> 01:11:16.830
都号

01:11:16.830 --> 01:11:17.830
再加上

01:11:17.830 --> 01:11:18.830
一个a

01:11:18.830 --> 01:11:19.830
再加上一个

01:11:19.830 --> 01:11:20.830
扣回

01:11:20.830 --> 01:11:21.830
对吧

01:11:22.830 --> 01:11:23.830
然后我们这块

01:11:23.830 --> 01:11:24.830
随机产生

01:11:24.830 --> 01:11:29.100
把这个color拿过来

01:11:29.100 --> 01:11:31.540
可以吧

01:11:31.540 --> 01:11:32.540
然后我们这铺式进去的时候

01:11:32.540 --> 01:11:33.540
也有个color

01:11:34.540 --> 01:11:38.390
可以吧

01:11:38.390 --> 01:11:39.390
然后我们这里

01:11:39.390 --> 01:11:40.390
在复制的时候

01:11:40.390 --> 01:11:41.390
是不是也需要给这个color复制

01:11:41.390 --> 01:11:42.390
对吧

01:11:42.390 --> 01:11:43.390
那我们需要獲取到

01:11:43.390 --> 01:11:44.390
color的一个存储位置

01:11:44.390 --> 01:11:46.390
握一个a-color

01:11:46.390 --> 01:11:48.770
color

01:11:48.770 --> 01:11:49.770
等于

01:11:49.770 --> 01:11:52.770
jr.get attribute

01:11:52.770 --> 01:11:53.770
location

01:11:53.770 --> 01:11:54.770
program

01:11:55.770 --> 01:11:56.770
a-color

01:11:59.270 --> 01:12:00.270
可以吧

01:12:00.270 --> 01:12:01.270
然后我们要往这个color里面

01:12:01.270 --> 01:12:02.270
也传

01:12:03.270 --> 01:12:05.270
jr.or tax attribute

01:12:06.270 --> 01:12:07.270
这应该是

01:12:13.660 --> 01:12:15.660
这是四位浮电型

01:12:17.660 --> 01:12:18.660
那这样吧

01:12:18.660 --> 01:12:19.660
它既然就是

01:12:19.660 --> 01:12:20.660
要传递

01:12:20.660 --> 01:12:21.660
每一个

01:12:21.660 --> 01:12:23.660
分量的一个坐标对不对

01:12:23.660 --> 01:12:24.660
那我这块传四位

01:12:24.660 --> 01:12:26.660
那我这块就不需要拼接了对吧

01:12:26.660 --> 01:12:27.660
这块我就直接给它

01:12:27.660 --> 01:12:28.660
返回

01:12:28.660 --> 01:12:32.660
r.g.b.a

01:12:32.660 --> 01:12:33.660
是不是可以了

01:12:33.660 --> 01:12:34.660
对吧

01:12:34.660 --> 01:12:36.660
都返回我去就可以了

01:12:36.660 --> 01:12:38.660
那我这里里面传的

01:12:38.660 --> 01:12:39.660
就是

01:12:39.660 --> 01:12:41.660
a-color

01:12:41.660 --> 01:12:42.660
号

01:12:42.660 --> 01:12:44.660
point

01:12:44.660 --> 01:12:45.660
次

01:12:45.660 --> 01:12:46.660
di向

01:12:46.660 --> 01:12:47.660
它的r

01:12:47.660 --> 01:12:49.660
di向color的

01:12:50.660 --> 01:12:51.660
i值

01:12:51.660 --> 01:12:52.660
对吧

01:12:52.660 --> 01:12:53.660
然后这里

01:12:53.660 --> 01:12:55.660
我们也可以怎么做

01:12:55.660 --> 01:12:58.660
我们也可以把这个color

01:12:58.660 --> 01:13:00.660
给这个color

01:13:00.660 --> 01:13:02.660
传递一个数组

01:13:02.660 --> 01:13:03.660
对吧

01:13:03.660 --> 01:13:04.660
把这个color

01:13:04.660 --> 01:13:05.660
用一个数组的形式

01:13:05.660 --> 01:13:06.660
然后直接放进去

01:13:06.660 --> 01:13:07.660
都可以

01:13:07.660 --> 01:13:08.660
这样来写

01:13:08.660 --> 01:13:11.660
r.point

01:13:11.660 --> 01:13:13.660
di向

01:13:13.660 --> 01:13:16.660
color

01:13:16.660 --> 01:13:17.660
我这样写

01:13:17.660 --> 01:13:18.660
是不是每次都需要

01:13:18.660 --> 01:13:19.660
调用一下它

01:13:19.660 --> 01:13:20.660
那我给它拿出声明

01:13:20.660 --> 01:13:21.660
可以吗

01:13:21.660 --> 01:13:23.660
握一个color

01:13:23.660 --> 01:13:25.660
等于

01:13:25.660 --> 01:13:28.660
rv

01:13:28.660 --> 01:13:30.660
item.color

01:13:30.660 --> 01:13:31.660
它

01:13:31.660 --> 01:13:32.660
然后直接

01:13:32.660 --> 01:13:34.660
item.color.tata

01:13:34.660 --> 01:13:36.660
item.color.r.

01:13:37.660 --> 01:13:38.660
rg

01:13:38.660 --> 01:13:39.660
对吧

01:13:39.660 --> 01:13:43.660
item.color.ab

01:13:43.660 --> 01:13:48.660
item.color.a

01:13:48.660 --> 01:13:51.660
可以吧

01:13:51.660 --> 01:13:52.660
我们现在是不是

01:13:52.660 --> 01:13:53.660
也就写完了

01:13:53.660 --> 01:13:54.660
我们现在来看一下

01:13:54.660 --> 01:13:55.660
刷新

01:13:55.660 --> 01:13:56.660
抱错了

01:13:56.660 --> 01:13:57.660
我写错了

01:13:57.660 --> 01:13:59.660
vryng

01:13:59.660 --> 01:14:01.660
vryng

01:14:01.660 --> 01:14:03.660
刷一个i

01:14:03.660 --> 01:14:04.660
这块也是

01:14:04.660 --> 01:14:06.660
刷一个y

01:14:07.660 --> 01:14:08.660
刷新

01:14:08.660 --> 01:14:09.660
诶

01:14:09.660 --> 01:14:10.660
抱错了

01:14:10.660 --> 01:14:11.660
vloat

01:14:11.660 --> 01:14:12.660
49

01:14:12.660 --> 01:14:13.660
vloat

01:14:13.660 --> 01:14:14.660
这里

01:14:14.660 --> 01:14:15.660
这里

01:14:15.660 --> 01:14:18.970
我是不是又写错了

01:14:18.970 --> 01:14:19.970
哪里是vloat

01:14:19.970 --> 01:14:20.970
否点型的呢

01:14:20.970 --> 01:14:25.560
再来看一下

01:14:25.560 --> 01:14:27.560
vloat有空

01:14:28.560 --> 01:14:30.560
我是没有

01:14:30.560 --> 01:14:32.560
引号吗

01:14:32.560 --> 01:14:33.560
都有

01:14:33.560 --> 01:14:34.560
这里是吧

01:14:34.560 --> 01:14:35.560
没有什么问题

01:14:35.560 --> 01:14:39.020
这是怎么回事

01:14:39.020 --> 01:14:41.020
它说这个精度的一个问题

01:14:41.020 --> 01:14:42.020
它说没有默认的一个精度

01:14:42.020 --> 01:14:43.020
看到我们对于

01:14:43.020 --> 01:14:44.020
否点型的一个数据

01:14:44.020 --> 01:14:45.020
那我们这样给它

01:14:45.020 --> 01:14:46.020
加一个精度

01:14:46.020 --> 01:14:47.020
对不对

01:14:47.020 --> 01:14:48.020
在我们这个

01:14:48.020 --> 01:14:49.020
片源着色器里面

01:14:49.020 --> 01:14:50.020
因为片源着色器里面

01:14:50.020 --> 01:14:51.020
是没有精度的

01:14:51.020 --> 01:14:52.020
所以我们就需要

01:14:52.020 --> 01:14:53.020
给它加一个

01:14:53.020 --> 01:14:54.020
默认的一个精度

01:14:54.020 --> 01:14:55.020
默认精度

01:14:55.020 --> 01:14:56.020
前面这块有

01:14:56.020 --> 01:14:57.020
你可以看一下

01:14:57.020 --> 01:14:58.020
默认精度

01:14:58.020 --> 01:14:59.020
它有这么几种

01:14:59.020 --> 01:15:00.020
精度的先进字

01:15:00.020 --> 01:15:01.020
有这么几种

01:15:01.020 --> 01:15:02.020
高精度

01:15:02.020 --> 01:15:03.020
中精度

01:15:03.020 --> 01:15:04.020
低精度

01:15:04.020 --> 01:15:05.020
然后简单了解一下

01:15:05.020 --> 01:15:06.020
就可以了

01:15:06.020 --> 01:15:07.020
高精度

01:15:07.020 --> 01:15:08.020
它是

01:15:08.020 --> 01:15:09.020
顶点着色器里面

01:15:09.020 --> 01:15:10.020
最低的一个精度

01:15:10.020 --> 01:15:11.020
中精度是

01:15:11.020 --> 01:15:12.020
介于高精度

01:15:12.020 --> 01:15:13.020
和低精度之间

01:15:13.020 --> 01:15:14.020
它是

01:15:14.020 --> 01:15:15.020
片源着色器

01:15:15.020 --> 01:15:16.020
最低的一个精度

01:15:16.020 --> 01:15:17.020
然后低精度

01:15:17.020 --> 01:15:18.020
它是

01:15:18.020 --> 01:15:20.020
低于中精度的

01:15:20.020 --> 01:15:21.020
表示

01:15:21.020 --> 01:15:23.020
可以表示

01:15:23.020 --> 01:15:24.020
所有颜色

01:15:24.020 --> 01:15:25.020
那我们就给它

01:15:25.020 --> 01:15:26.020
设置一个安排

01:15:26.020 --> 01:15:27.020
怎么来设置呢

01:15:27.020 --> 01:15:28.020
怎么来设置

01:15:28.020 --> 01:15:29.020
默认的一个精度呢

01:15:29.020 --> 01:15:30.020
我们只需要

01:15:30.020 --> 01:15:31.020
用关键字

01:15:31.020 --> 01:15:32.020
Precision

01:15:32.020 --> 01:15:33.020
Precision

01:15:33.020 --> 01:15:35.020
PRECISI1

01:15:35.020 --> 01:15:39.020
PRECISI1

01:15:39.020 --> 01:15:40.020
可以吧

01:15:40.020 --> 01:15:41.020
然后加上一个精度

01:15:41.020 --> 01:15:42.020
直

01:15:42.020 --> 01:15:43.020
那我们就加一个

01:15:43.020 --> 01:15:44.020
默认的一个

01:15:44.020 --> 01:15:45.020
中精度

01:15:45.020 --> 01:15:46.020
可以吧

01:15:46.020 --> 01:15:47.020
我让它用中精度

01:15:47.020 --> 01:15:49.020
MEDM

01:15:49.020 --> 01:15:50.020
MEDM

01:15:50.020 --> 01:15:51.020
怎么拼的来这

01:15:51.020 --> 01:15:52.020
看一下

01:15:53.020 --> 01:15:54.020
在这对吧

01:15:54.020 --> 01:15:56.020
MEDIUNP

01:15:56.020 --> 01:16:00.020
MEDIUNP

01:16:00.020 --> 01:16:01.020
然后FLOAT

01:16:01.020 --> 01:16:02.020
给FLOAT浮电

01:16:02.020 --> 01:16:03.020
设置一个

01:16:03.020 --> 01:16:04.020
对吧

01:16:04.020 --> 01:16:05.020
这个来看一下

01:16:05.020 --> 01:16:06.020
刷新

01:16:06.020 --> 01:16:07.020
是不是可以了

01:16:07.020 --> 01:16:08.020
又保错了

01:16:08.020 --> 01:16:09.020
MEDOM

01:16:09.020 --> 01:16:10.020
拼错了吗

01:16:10.020 --> 01:16:11.020
哪里

01:16:11.020 --> 01:16:12.020
这儿呢

01:16:12.020 --> 01:16:13.020
READ

01:16:13.020 --> 01:16:15.020
REAN

01:16:15.020 --> 01:16:16.020
REANDOM

01:16:16.020 --> 01:16:17.020
对吧

01:16:17.020 --> 01:16:18.020
刷新

01:16:18.020 --> 01:16:19.020
这回

01:16:19.020 --> 01:16:20.020
这回时候不一样了

01:16:20.020 --> 01:16:21.020
对吧

01:16:21.020 --> 01:16:22.020
然后你看这个背景颜色

01:16:22.020 --> 01:16:23.020
如果你想要

01:16:23.020 --> 01:16:24.020
这个背景颜色的话

01:16:24.020 --> 01:16:25.020
我们只需要把

01:16:25.020 --> 01:16:26.020
这个

01:16:26.020 --> 01:16:27.020
触触画这一部分

01:16:28.020 --> 01:16:29.020
放到我们的

01:16:29.020 --> 01:16:31.020
点击时间里面去

01:16:31.020 --> 01:16:32.020
看一下

01:16:32.020 --> 01:16:33.020
这回应该

01:16:33.020 --> 01:16:34.020
它只能点击

01:16:34.020 --> 01:16:35.020
一个点吧

01:16:35.020 --> 01:16:36.020
我们看一下

01:16:36.020 --> 01:16:37.020
也是可以的

01:16:37.020 --> 01:16:38.020
对吧

01:16:38.020 --> 01:16:39.020
点击很多个点

01:16:40.020 --> 01:16:42.020
毕竟这是循环

01:16:42.020 --> 01:16:43.020
去

01:16:43.020 --> 01:16:44.020
去绘制的

01:16:44.020 --> 01:16:45.020
对不对

01:16:45.020 --> 01:16:46.020
这样的话我们是不是

01:16:46.020 --> 01:16:47.020
可以了

01:16:47.020 --> 01:16:48.020
看到了吗

01:16:48.020 --> 01:16:49.020
可以吧

01:16:49.020 --> 01:16:50.020
点击哪里哪里

01:16:50.020 --> 01:16:51.020
出来

01:16:51.020 --> 01:16:52.020
这块没有问题吧

01:16:52.020 --> 01:16:53.020
那好

01:16:53.020 --> 01:16:54.020
今天咱们这一堂课

01:16:54.020 --> 01:16:55.020
主要就是带大家

01:16:55.020 --> 01:16:56.020
来

01:16:56.020 --> 01:16:58.020
实现一下

01:16:58.020 --> 01:16:59.020
绘制点

01:16:59.020 --> 01:17:00.020
对吧

01:17:00.020 --> 01:17:01.020
绘制点

01:17:01.020 --> 01:17:02.020
绘制每个点

01:17:03.020 --> 01:17:04.020
并且还教了大家

01:17:04.020 --> 01:17:05.020
如何动态的

01:17:05.020 --> 01:17:06.020
去添加点

01:17:06.020 --> 01:17:07.020
对不对

01:17:07.020 --> 01:17:08.020
那我不知道大家

01:17:08.020 --> 01:17:09.020
掌握的怎么样

01:17:09.020 --> 01:17:11.020
在上完本堂课之后

01:17:11.020 --> 01:17:12.020
希望大家可以

01:17:12.020 --> 01:17:13.020
自己回去

01:17:13.020 --> 01:17:15.020
履下这个流程

01:17:15.020 --> 01:17:16.020
可以吧

01:17:16.020 --> 01:17:17.020
履下这个流程

01:17:17.020 --> 01:17:18.020
可能很多同学都说

01:17:18.020 --> 01:17:19.020
老叔

01:17:19.020 --> 01:17:20.020
这个

01:17:20.020 --> 01:17:21.020
绘制的这些方法

01:17:21.020 --> 01:17:22.020
我记不住怎么办

01:17:23.020 --> 01:17:24.020
你只需要把

01:17:24.020 --> 01:17:25.020
这个流程记住就行了

01:17:25.020 --> 01:17:26.020
然后这些方法

01:17:26.020 --> 01:17:27.020
我们到时候

01:17:27.020 --> 01:17:29.020
就是你用到的时候

01:17:29.020 --> 01:17:31.020
再去查它就可以了

01:17:31.020 --> 01:17:32.020
可以吧

01:17:32.020 --> 01:17:33.020
那好

01:17:33.020 --> 01:17:34.020
本堂课

01:17:34.020 --> 01:17:35.020
咱们就到这

01:17:35.020 --> 01:17:36.020
咱们下一堂课

01:17:36.020 --> 01:17:37.020
再见

