WEBVTT

00:00.180 --> 00:03.040
好 我们继续讲解MPVU的希利克

00:03.040 --> 00:07.180
希利克呢 给大家简单介绍一下我们的事件处理器

00:07.180 --> 00:11.480
在我们学VU和小程区过程中也是大家能够见到的

00:11.480 --> 00:15.680
所以呢 这边呢 不对它做相应的原理的检测

00:15.680 --> 00:19.680
啊 只是对它里面的一些相同点 不同点

00:19.680 --> 00:24.180
以及它有一些特别的 或者讲在MPVU中的简单运用

00:24.180 --> 00:26.180
做一个小展示就可以了

00:26.180 --> 00:28.180
那么我们讲事件处理的话呢

00:28.180 --> 00:30.180
本身对于MPVU来讲的话呢

00:30.180 --> 00:34.180
它也引入了我们的VU的虚拟洞的概念

00:34.180 --> 00:35.180
那么这是第一个概念

00:35.180 --> 00:38.180
第二呢 就是说我们在compine里面

00:38.180 --> 00:41.180
也就是编音器上面 引用了小程区的事件

00:41.180 --> 00:43.180
并且做了相应的印设

00:43.180 --> 00:45.180
在编译的过程中呢 我们知道

00:45.180 --> 00:49.180
MPVU已经会把你现在的所有的一些元素

00:49.180 --> 00:53.180
比如说template里面的所有的标签 属性啊

00:53.180 --> 00:56.180
都会转换成我们现有的微信小程区所拥有的

00:56.180 --> 00:59.180
或者说能解析的那些标签

00:59.180 --> 01:01.180
但对于现在的小程区事件来讲

01:01.180 --> 01:04.180
它同样可以完成这样的印设解析

01:04.180 --> 01:11.180
你比如 你在我们的整个的template的模板里面

01:11.180 --> 01:14.180
你去做了一个所谓的click

01:14.180 --> 01:16.180
那么它最后会变成tab

01:16.180 --> 01:19.180
你做了个longtab 它也会变成longtab

01:19.180 --> 01:21.180
同时呢 你现在比如说

01:21.180 --> 01:25.180
你如果在taxter 或者说那个import text area

01:25.180 --> 01:28.180
或者import上面 你做了一个changer事件

01:28.180 --> 01:31.180
那么它最后会变成blower 移调事件

01:31.180 --> 01:35.180
因为它本身来讲view的话呢

01:35.180 --> 01:39.180
它主要是可以在我们的页面上

01:39.180 --> 01:41.180
pc端可以制作更多的东西

01:41.180 --> 01:43.180
但是小程区本身是移动端的

01:43.180 --> 01:46.180
移动端本身来讲 它有很多的所谓的

01:46.180 --> 01:49.180
不存在 或者说根本就没有这样的事件

01:49.180 --> 01:55.180
所以有些它本身是没有办法进行所谓的执行的

01:55.180 --> 01:57.180
这个事件的第一概念

01:57.180 --> 01:59.180
那么注意试相里面 我们就说到了

01:59.180 --> 02:02.180
首先 我们先看最后两项字

02:02.180 --> 02:05.180
它是无键盘事件的 也没有鼠标的按钮

02:05.180 --> 02:10.180
所以在view中所设计到的键盘和鼠标的一些操作的话

02:10.180 --> 02:14.180
那么小程区 特别是在mpview中一概无效

02:14.180 --> 02:15.180
不能用

02:15.180 --> 02:18.180
第二呢 就是我们在做绑定的时候

02:18.180 --> 02:20.180
小程区里面我们强调过

02:20.180 --> 02:24.180
bond和touch两个的事件的绑定的区别

02:24.180 --> 02:25.180
对吧

02:25.180 --> 02:27.180
那么bond呢 主要的就是

02:27.180 --> 02:30.180
它可以有所谓的事件的传递概念

02:30.180 --> 02:32.180
也就是我们俗称的冒泡

02:32.180 --> 02:35.180
当然catch的话 它可以终止这一层的操作

02:35.180 --> 02:37.180
那么在小程区中我们说

02:37.180 --> 02:40.180
如果说 特别是在mpview里面写的时候

02:40.180 --> 02:42.180
我们的bond和touch

02:42.180 --> 02:44.180
如果同时绑定一个事件的话

02:44.180 --> 02:47.180
它只会出发的是bond

02:47.180 --> 02:49.180
那么catch它是不会出发

02:49.180 --> 02:52.180
这种情况是比较特别

02:52.180 --> 02:56.180
因为我们很少在一个元素上面去做这个动作

02:56.180 --> 02:58.180
但是你真的实现了

02:58.180 --> 03:00.180
那么它只会做bond的 需要知道一下

03:00.180 --> 03:03.180
第二呢 就是我们在讲事件的时候

03:03.180 --> 03:06.180
我们会设计到一个叫做事件修饰符

03:07.180 --> 03:09.180
在做修饰符的时候呢

03:09.180 --> 03:10.180
我们很多的修饰符

03:10.180 --> 03:13.180
我们基本上原理大家都知道怎么用法

03:13.180 --> 03:15.180
但是呢 这边我们要强调几个

03:15.180 --> 03:17.180
1 Stop

03:17.180 --> 03:19.180
它是逐指事件冒泡

03:19.180 --> 03:21.180
这个元素上呢 我们说是ok

03:21.180 --> 03:22.180
可以有 对吧

03:22.180 --> 03:24.180
然后呢 我们有一个

03:24.180 --> 03:26.180
注意 它会如果

03:26.180 --> 03:28.180
但是同时绑定到一个上面的时候

03:28.180 --> 03:30.180
它会示向 我们刚才前面已经说到了

03:30.180 --> 03:32.180
第二个的话呢 Prevent

03:32.180 --> 03:35.180
这个的话呢 因为我们讲

03:35.180 --> 03:38.180
看到吗 因为小程区里面是没有什么默认事件的

03:38.180 --> 03:40.180
比如三面的 它是不会已经跳转的

03:40.180 --> 03:44.180
所以我们说默认的 它的一个自动的事件格式

03:44.180 --> 03:47.180
prevent 这个的话呢 我们就可以直接没有了

03:48.180 --> 03:51.180
好 紧接着 我们向 self 这个的话

03:51.180 --> 03:53.180
它是没有可以判别的标识的

03:53.180 --> 03:55.180
所以这个也是不存在的

03:55.180 --> 03:57.180
那个 once 它也是不能做的

03:57.180 --> 03:59.180
问题在我们说

03:59.180 --> 04:00.180
本身不优雅

04:00.180 --> 04:02.180
而且呢 本身在里面直接会

04:02.180 --> 04:04.180
进行handle per secret的处理

04:04.180 --> 04:07.180
所以呢 我们在事件修饰符上面的时候

04:07.180 --> 04:10.180
一般 我们在 NPV 中是不采取

04:10.180 --> 04:12.180
这样的使用方式

04:12.180 --> 04:14.180
那 因为小程区本身自己有特别多的

04:14.180 --> 04:16.180
一些特性存在

04:16.180 --> 04:18.180
好吧 好 我们说到这里的话呢

04:18.180 --> 04:20.180
我们就给它做一些小演示

04:20.180 --> 04:26.690
我们打开

04:26.690 --> 04:27.690
演示一下

04:27.690 --> 04:28.690
首先我们在里面

04:28.690 --> 04:30.690
我们不去改原有的

04:30.690 --> 04:32.690
我们创建一个新页面出来

04:32.690 --> 04:34.690
它记得吗 我们在 pages 上面

04:34.690 --> 04:35.690
我们

04:35.690 --> 04:37.690
完成一个目录

04:37.690 --> 04:40.690
我们称之为 event 文件加

04:40.690 --> 04:42.690
然后呢 我们在里面

04:42.690 --> 04:44.690
创建我们 new file

04:44.690 --> 04:46.690
先 第一个

04:46.690 --> 04:48.690
mandin.js

04:48.690 --> 04:50.690
第二个 我们创建一个 index

04:50.690 --> 04:56.500
view

04:56.500 --> 04:57.500
两个

04:57.500 --> 04:59.500
index 里面 我们首先

04:59.500 --> 05:01.500
把它 view 给写出来

05:01.500 --> 05:05.090
然后

05:05.090 --> 05:07.090
mandin.js 把我们刚才

05:07.090 --> 05:09.090
之前所需要的那几个文件

05:09.090 --> 05:10.090
给倒进来

05:10.090 --> 05:14.170
import

05:14.170 --> 05:16.170
你肯定把 view 给拿进来吗

05:16.170 --> 05:21.400
import

05:21.400 --> 05:22.400
当前页面

05:22.400 --> 05:24.400
你跑到当前页面下面

05:24.400 --> 05:26.400
当前页面的 index

05:26.400 --> 05:27.400
这哪个 是它

05:27.400 --> 05:29.400
把它给倒进来

05:29.400 --> 05:30.400
再接下来

05:30.400 --> 05:31.400
conster

05:31.400 --> 05:33.400
app

05:33.400 --> 05:35.400
我们给出一个 new

05:35.400 --> 05:39.290
new 创建我们的一个

05:39.290 --> 05:40.290
view 对象

05:40.290 --> 05:42.290
然后把当前的 app 给它

05:42.290 --> 05:44.290
最后完成一个我们的

05:44.290 --> 05:48.370
加载

05:48.370 --> 05:49.370
整个这过程

05:49.370 --> 05:54.300
保存

05:54.300 --> 05:55.300
OK

05:55.300 --> 05:56.300
那么紧接着

05:56.300 --> 05:57.300
第二步的话呢

05:57.300 --> 05:58.300
我们把这个页面

05:58.300 --> 06:00.300
需要显示出来

06:00.300 --> 06:03.300
所以我们找到 app.json

06:04.300 --> 06:06.300
在它的最上面

06:06.300 --> 06:07.300
我们写上

06:07.300 --> 06:09.300
paders 下面的

06:09.300 --> 06:11.300
event 下的

06:11.300 --> 06:12.300
man

06:13.300 --> 06:14.300
保存

06:14.300 --> 06:15.300
此时

06:15.300 --> 06:20.340
打开页面

06:20.340 --> 06:22.340
由于你是新建了一个页面

06:22.340 --> 06:23.340
咱们看到吗

06:23.340 --> 06:24.340
所以这边的话

06:24.340 --> 06:25.340
我们 tester

06:25.340 --> 06:27.340
event man 就会出来了

06:27.340 --> 06:28.340
OK

06:28.340 --> 06:29.340
那么接下去

06:29.340 --> 06:30.340
我们就可以在它里面

06:30.340 --> 06:32.340
去做我们事件的一些

06:32.340 --> 06:34.340
简单的显示

06:34.340 --> 06:35.340
是

06:35.340 --> 06:36.340
我们在里面

06:36.340 --> 06:38.340
做一个 button 按钮

06:38.340 --> 06:39.340
前面我们设计到过

06:39.340 --> 06:41.340
那么最简单的

06:41.340 --> 06:42.340
你如果可以用这样的标签

06:42.340 --> 06:43.340
当然

06:43.340 --> 06:44.340
我们现在更多的

06:44.340 --> 06:45.340
我们使用的是

06:45.340 --> 06:49.420
click 结构

06:49.420 --> 06:50.420
然后呢

06:50.420 --> 06:52.420
我们可以直接在这里边

06:52.420 --> 06:53.420
我们说

06:53.420 --> 06:55.420
写上我们的

06:55.420 --> 07:01.020
直接写我们的结构内容

07:01.020 --> 07:02.020
咱们称之为

07:02.020 --> 07:05.840
添加一个元素

07:05.840 --> 07:06.840
p标签

07:06.840 --> 07:07.840
然后我们里面

07:07.840 --> 07:08.840
把你这个元素

07:08.840 --> 07:09.840
直接拿出来

07:09.840 --> 07:14.750
直接这样写

07:14.750 --> 07:16.750
直接这样写

07:16.750 --> 07:17.750
我们在

07:17.750 --> 07:19.750
下边完成一个

07:19.750 --> 07:28.500
data 数据的操作

07:28.500 --> 07:29.500
我们看到

07:29.500 --> 07:31.500
我们加一个

07:31.500 --> 07:33.500
更标签

07:33.500 --> 07:35.500
加一个更标签

07:35.500 --> 07:37.500
然后它便意完成

07:37.500 --> 07:38.500
但到这边

07:38.500 --> 07:39.500
我们发现

07:39.500 --> 07:40.500
它报了一个

07:40.500 --> 07:41.500
preparatist的错误

07:41.500 --> 07:42.500
那么一般报

07:42.500 --> 07:43.500
这种错误的话

07:43.500 --> 07:44.500
一问题

07:44.500 --> 07:45.500
就不在这边

07:45.500 --> 07:46.500
一般都会在

07:46.500 --> 07:47.500
mandant.js 里面

07:47.500 --> 07:48.500
我们会发现

07:48.500 --> 07:49.500
这条颜色比较浅

07:49.500 --> 07:51.500
然后原因就在于

07:51.500 --> 07:53.500
这个是给了一个

07:53.500 --> 07:55.500
那个大写的

07:55.500 --> 07:57.500
此时你再来看一下

07:57.500 --> 07:58.500
看到了吗

07:58.500 --> 07:59.500
它现在就呈现出来了

07:59.500 --> 08:00.500
所以注意一下

08:00.500 --> 08:02.500
这里有个小小的那个点

08:02.500 --> 08:04.500
就是如果说

08:04.500 --> 08:06.500
你在这边便意成功了

08:06.500 --> 08:08.500
那么你此时在里面

08:08.500 --> 08:09.500
出现了preparatist

08:09.500 --> 08:10.500
那个puppus

08:10.500 --> 08:12.500
p-r-o-p-s 的问题的话

08:12.500 --> 08:13.500
那一般都会在

08:13.500 --> 08:14.500
mandant.js 中

08:14.500 --> 08:17.500
你没有引入到这个index

08:17.500 --> 08:18.500
是这个逻辑

08:18.500 --> 08:19.500
ok 我们简单看一下以后

08:19.500 --> 08:21.500
就回到这里来

08:21.500 --> 08:22.500
这边首先我们在

08:22.500 --> 08:23.500
click 里面

08:23.500 --> 08:24.500
我们以这样的方式

08:24.500 --> 08:25.500
我们同样

08:25.500 --> 08:27.500
可以把它写成这样的格式

08:27.500 --> 08:28.500
那么这样的

08:28.500 --> 08:29.500
我们大家就看到

08:29.500 --> 08:30.500
我在这边的点击

08:30.500 --> 08:32.500
这边会直接进行操作

08:32.500 --> 08:33.500
123的添加

08:33.500 --> 08:34.500
这意味着

08:34.500 --> 08:35.500
我在click 里面

08:35.500 --> 08:36.500
可以直接写上

08:36.500 --> 08:39.500
我现有的一个执行程序

08:39.500 --> 08:40.500
那么这是第一种

08:40.500 --> 08:41.500
最简单最简单的

08:41.500 --> 08:42.500
那第二种方式

08:42.500 --> 08:43.500
就是我们现在

08:43.500 --> 08:45.500
如果把它写成一个方法

08:45.500 --> 08:46.500
也就是我们成为

08:46.500 --> 08:47.500
事件处理方法的话

08:47.500 --> 08:48.500
那么对它来讲

08:48.500 --> 08:50.500
也是属于一个正常

08:50.500 --> 08:51.500
或者说常规的写法

08:51.500 --> 08:53.500
比如说我们叫 adder

08:53.500 --> 08:54.500
adder 对吧

08:54.500 --> 08:56.500
然后我们在下面去写

08:56.500 --> 09:00.480
message

09:00.480 --> 09:07.720
中文的

09:07.720 --> 09:11.950
message

09:11.950 --> 09:13.950
然后在这个message

09:13.950 --> 09:14.950
中文我们写上 adder

09:14.950 --> 09:15.950
我们写上 adder

09:15.950 --> 09:16.950
我们写上 adder 方法

09:16.950 --> 09:17.950
我们写上 adder 方法

09:17.950 --> 09:19.950
然后在这里边

09:19.950 --> 09:21.950
我们去给它进行

09:21.950 --> 09:22.950
一定的修改

09:22.950 --> 09:24.950
我们把这个至今修改

09:24.950 --> 09:26.950
this.counter

09:26.950 --> 09:27.950
对吧

09:27.950 --> 09:29.950
让它进行加等一

09:29.950 --> 09:31.950
加等二吧

09:31.950 --> 09:33.950
这样的结构

09:33.950 --> 09:34.950
保存一下

09:34.950 --> 09:35.950
然后到这边来看

09:35.950 --> 09:38.260
看到吗

09:38.260 --> 09:39.260
现在效果没有

09:39.260 --> 09:40.260
我们看一下

09:40.260 --> 09:42.260
adder 调用到它

09:42.260 --> 09:43.260
ok

09:43.260 --> 09:44.260
这边

09:44.260 --> 09:46.260
s加一下

09:46.260 --> 09:47.260
ok

09:47.260 --> 09:48.260
那我们保存一下

09:48.260 --> 09:50.260
然后我们再到页面来看一下

09:50.260 --> 09:51.260
页面现在

09:51.260 --> 09:52.260
这边文字不改了

09:52.260 --> 09:53.260
二 四

09:53.260 --> 09:54.260
对不对

09:54.260 --> 09:55.260
有效果了

09:55.260 --> 09:56.260
这就证明的是

09:56.260 --> 09:57.260
我现在利用

09:57.260 --> 09:58.260
我们现在的这个事件

09:58.260 --> 09:59.260
然后完成了

09:59.260 --> 10:01.260
事件处理方法的编写

10:01.260 --> 10:03.260
这个也是属于比较简单的

10:03.260 --> 10:05.260
同时你可以传参

10:05.260 --> 10:06.260
然后这边你想

10:06.260 --> 10:07.260
几一数字

10:07.260 --> 10:08.260
比如说我想三

10:08.260 --> 10:10.260
然后你把三传进来

10:10.260 --> 10:11.260
这边的话

10:11.260 --> 10:12.260
我们就接收number

10:12.260 --> 10:14.260
然后把这个写在这

10:14.260 --> 10:15.260
number

10:15.260 --> 10:16.260
所以呢

10:16.260 --> 10:17.260
我们这边

10:17.260 --> 10:18.260
我们把这个次改掉

10:18.260 --> 10:19.260
我们不要是一

10:19.260 --> 10:21.260
就是直接是 adder

10:21.260 --> 10:22.260
那么此时

10:23.260 --> 10:24.260
对吧

10:24.260 --> 10:25.260
369

10:25.260 --> 10:26.260
整个这个操作

10:26.260 --> 10:28.260
完全有我们这个数值

10:28.260 --> 10:29.260
来控制

10:29.260 --> 10:30.260
你全部可以往里进行

10:30.260 --> 10:31.260
数据的传送

10:31.260 --> 10:32.260
同时呢

10:32.260 --> 10:33.260
我们现在

10:33.260 --> 10:34.260
如果你有两个

10:34.260 --> 10:35.260
并且我们能做

10:35.260 --> 10:37.260
我们的弹框

10:37.260 --> 10:38.260
或者说我们现在

10:38.260 --> 10:39.260
有同学说

10:39.260 --> 10:40.260
老师我现在在

10:40.260 --> 10:41.260
原有的结构上面

10:41.260 --> 10:42.260
就是在view上面

10:42.260 --> 10:43.260
是有一种

10:43.260 --> 10:44.260
比如说

10:44.260 --> 10:45.260
我调取它以后

10:45.260 --> 10:46.260
这边里面

10:46.260 --> 10:47.260
我们直接可以

10:47.260 --> 10:48.260
做一个弹框处理

10:48.260 --> 10:49.260
它可以原来的

10:49.260 --> 10:50.260
gs可以这么做的

10:50.260 --> 10:51.260
那你来看

10:51.260 --> 10:52.260
行不行

10:52.260 --> 10:54.260
我们把这数字弹出来

10:54.260 --> 10:55.260
我们把这数字弹出来

10:55.260 --> 11:00.180
你来看一下

11:00.180 --> 11:01.180
你看到啊

11:01.180 --> 11:02.180
它这个

11:02.180 --> 11:03.180
就会有问题了

11:03.180 --> 11:04.180
注意一下

11:04.180 --> 11:05.180
它这边告诉我

11:05.180 --> 11:07.180
你是 alert and not a function

11:07.180 --> 11:08.180
所以

11:08.180 --> 11:10.180
在我们的view中

11:10.180 --> 11:11.180
这点我也是

11:11.180 --> 11:12.180
这边需要去说到的

11:14.180 --> 11:18.130
在mpview一中

11:18.130 --> 11:19.130
是

11:19.130 --> 11:21.130
不能直接

11:21.130 --> 11:22.130
使用

11:23.130 --> 11:25.570
我们的

11:25.570 --> 11:26.570
window对象的

11:26.570 --> 11:30.670
任何

11:32.670 --> 11:33.670
方法

11:34.670 --> 11:36.670
因为你如果在view中的时候的话

11:36.670 --> 11:39.670
你本身运行的是在浏览器

11:39.670 --> 11:40.670
而浏览器本身

11:40.670 --> 11:41.670
是有window对象的

11:41.670 --> 11:43.670
所以你直接通过这个方式

11:43.670 --> 11:45.670
对于gs来讲

11:45.670 --> 11:46.670
它就能识别到

11:46.670 --> 11:47.670
你现在 alert 的操作

11:48.670 --> 11:49.670
但是由于你现在的

11:49.670 --> 11:50.670
mpview的话

11:50.670 --> 11:52.670
它是运用在微信程序段

11:52.670 --> 11:54.670
所以整个这个的操作

11:54.670 --> 11:55.670
对于windows的

11:55.670 --> 11:56.670
特别是针对于

11:56.670 --> 11:57.670
小程序来讲

11:57.670 --> 11:58.670
它是没有window对象的

11:58.670 --> 11:59.670
所以这时候

11:59.670 --> 12:01.670
你是不能去这么做的

12:01.670 --> 12:02.670
理解吧

12:02.670 --> 12:03.670
那么所以

12:03.670 --> 12:04.670
我们一旦需要

12:04.670 --> 12:06.670
使用这样的弹框操作的话

12:06.670 --> 12:07.670
你肯定需要

12:07.670 --> 12:09.670
上面单独去写一个

12:09.670 --> 12:10.670
我们所谓的

12:10.670 --> 12:12.670
微信的一个弹框结构

12:12.670 --> 12:13.670
那么做呢

12:13.670 --> 12:14.670
比如说

12:14.670 --> 12:16.670
我想提示用户一个

12:16.670 --> 12:17.670
操作成功

12:17.670 --> 12:19.670
有这样一个 success 的提示

12:19.670 --> 12:21.670
那么这种时候的话

12:21.670 --> 12:22.670
我们注意了

12:22.670 --> 12:24.670
你上面这部分内容

12:24.670 --> 12:25.670
进行在做

12:25.670 --> 12:26.670
转换的时候

12:26.670 --> 12:28.670
它会被转换成

12:28.670 --> 12:29.670
我们所谓的

12:29.670 --> 12:30.670
一个就是button的

12:30.670 --> 12:31.670
一个

12:31.670 --> 12:32.670
tap 事件

12:32.670 --> 12:34.670
但是它所触发的

12:34.670 --> 12:35.670
它所调用到的

12:35.670 --> 12:37.670
这个事件方法

12:37.670 --> 12:38.670
依然是会被

12:38.670 --> 12:39.670
转换成

12:39.670 --> 12:40.670
你还记得吗

12:40.670 --> 12:41.670
我们说

12:41.670 --> 12:42.670
message 会转成 gs

12:42.670 --> 12:44.670
而微信的弹框的

12:44.670 --> 12:45.670
gs 操作

12:45.670 --> 12:46.670
该是怎么做的

12:47.670 --> 12:48.670
我们把它给

12:48.670 --> 12:49.670
助销掉

12:49.670 --> 12:50.670
说它不可以

12:50.670 --> 12:51.670
微信的弹框的 gs

12:51.670 --> 12:53.670
你需要做的方式

12:53.670 --> 12:54.670
有几种

12:54.670 --> 12:56.670
原声的微信的写法

12:56.670 --> 12:58.670
我们就告诉大家

12:58.670 --> 13:00.670
你如果原声记得的话

13:00.670 --> 13:02.670
原声微信

13:02.670 --> 13:03.670
写法

13:03.670 --> 13:04.670
弹框

13:04.670 --> 13:09.260
或者说是提示框

13:09.260 --> 13:11.260
我们是利用微信的对象

13:11.260 --> 13:15.260
去点一个 show toast

13:15.260 --> 13:17.260
你是这么做的

13:17.260 --> 13:20.770
你是这么做的

13:20.770 --> 13:21.770
那么在这个里面

13:21.770 --> 13:23.770
你需要给它参数

13:23.770 --> 13:24.770
第一个 title

13:24.770 --> 13:25.770
你给它比如说

13:25.770 --> 13:27.770
成功二字

13:27.770 --> 13:28.770
第二呢

13:28.770 --> 13:30.770
我们给一个 icon

13:31.770 --> 13:32.770
icon的话

13:32.770 --> 13:37.910
我们给的是 success

13:37.910 --> 13:38.910
代表

13:38.910 --> 13:39.910
成功的图标

13:39.910 --> 13:41.910
就内勾

13:41.910 --> 13:45.500
duration

13:45.500 --> 13:47.500
显示多少时间

13:47.500 --> 13:49.500
2000毫秒

13:49.500 --> 13:51.500
以微信小程序的

13:51.500 --> 13:53.500
这样的原声写法

13:53.500 --> 13:54.500
我们写在

13:54.500 --> 13:57.500
我们当前的 mpview 里面

13:57.500 --> 13:58.500
那么此时呢

13:58.500 --> 13:59.500
它最后解析的时候

13:59.500 --> 14:00.500
虽然看上去

14:00.500 --> 14:02.500
这个好像不轮不累

14:02.500 --> 14:03.500
但是它解析的时候

14:03.500 --> 14:04.500
会把这部分内容

14:04.500 --> 14:06.500
解析成微信

14:06.500 --> 14:08.500
本身自己的那个 gs

14:08.500 --> 14:09.500
但是我们说

14:09.500 --> 14:10.500
原声写微信的时候

14:10.500 --> 14:11.500
我们这部分内容

14:11.500 --> 14:13.500
就是写在 gs 中的

14:13.500 --> 14:15.500
所以按照这个逻辑

14:15.500 --> 14:17.500
它应该是可以被执行的

14:17.500 --> 14:19.500
我们来看一下

14:19.500 --> 14:23.260
出来了吧

14:23.260 --> 14:24.260
是不是出来了

14:24.260 --> 14:25.260
所以

14:25.260 --> 14:27.260
第一种最简单的办法

14:27.260 --> 14:28.260
就是说

14:28.260 --> 14:30.260
如果你需要执行的部分内容

14:30.260 --> 14:32.260
你想一下原声是怎么写的

14:32.260 --> 14:34.260
在 gs 中

14:34.260 --> 14:35.260
在我们的那个

14:35.260 --> 14:37.260
事件处理方法中

14:37.260 --> 14:39.260
那么你可以把这部分内容

14:39.260 --> 14:41.260
直接先写在我们当前的

14:41.260 --> 14:43.260
我们的 message 中

14:43.260 --> 14:44.260
原因很简单

14:44.260 --> 14:47.260
你脑中第一要反馈出的是

14:47.260 --> 14:49.260
最后这个 messenger

14:49.260 --> 14:51.260
它是执行在我们当前的

14:51.260 --> 14:52.260
gs 文件中

14:52.260 --> 14:54.260
微信小程序的 gs 文件中

14:54.260 --> 14:56.260
所以在这个前提下面的话

14:56.260 --> 14:58.260
你 gs 中可以怎么写的

14:58.260 --> 15:00.260
你这边都可以写

15:00.260 --> 15:02.260
是这个逻辑

15:02.260 --> 15:03.260
当然我们说

15:03.260 --> 15:04.260
如果说

15:04.260 --> 15:05.260
mpview 或者 view 本身

15:05.260 --> 15:06.260
自己能够识别

15:06.260 --> 15:07.260
或者能够做的

15:07.260 --> 15:09.260
那我们当然是用 view 的

15:09.260 --> 15:10.260
像我们刚才看到的 alert

15:10.260 --> 15:13.260
它本身无法在这里面执行

15:13.260 --> 15:14.260
那么这种情况下

15:14.260 --> 15:17.260
你就可以直接先写原声的格式

15:17.260 --> 15:19.260
我给它举了一个简单试例以后

15:19.260 --> 15:21.260
大家看到就爆出来了

15:21.260 --> 15:22.260
ok

15:22.260 --> 15:24.260
那么这就是它里面的一个坑

15:24.260 --> 15:25.260
或者称之为

15:25.260 --> 15:27.260
它的一种处理方法

15:27.260 --> 15:28.260
在事件上面的

15:28.260 --> 15:30.260
并不是说所有的事件

15:30.260 --> 15:32.260
它这上面都可以干

15:32.260 --> 15:33.260
这是这事

15:33.260 --> 15:35.260
因为有些是 window 对象的

15:35.260 --> 15:36.260
ok 紧接着

15:36.260 --> 15:37.260
我们再来看一下

15:37.260 --> 15:40.260
所谓的一个 stop 的事件修饰服

15:40.260 --> 15:41.260
就是阻止冒泡的

15:41.260 --> 15:43.260
我们把这个

15:43.260 --> 15:44.260
不管它我们

15:44.260 --> 15:45.260
我们直接往下写

15:45.260 --> 15:48.260
首先这个就是

15:48.260 --> 15:50.260
区别我们写上

15:50.260 --> 15:54.600
区别

15:54.600 --> 15:55.600
window 对象

15:55.600 --> 15:59.600
操作和小程序

15:59.600 --> 16:01.600
事件的

16:01.600 --> 16:03.600
写法

16:03.600 --> 16:05.600
刚才是做这个

16:05.600 --> 16:06.600
那么紧接着

16:06.600 --> 16:08.600
我们再来写的就是

16:08.600 --> 16:10.600
在我们

16:10.600 --> 16:11.600
基本上

16:11.600 --> 16:13.600
所有都可以在 view 中使用

16:13.600 --> 16:14.600
但是在 np view 中

16:14.600 --> 16:15.600
我们只能使用

16:15.600 --> 16:16.600
一到两个的

16:16.600 --> 16:18.600
这样的事件修饰服

16:18.600 --> 16:21.600
事件修饰服

16:21.600 --> 16:24.600
在 np view 中的

16:24.600 --> 16:26.600
使用

16:26.600 --> 16:27.600
我们来看一下

16:27.600 --> 16:29.600
首先

16:29.600 --> 16:30.600
我们说的是

16:30.600 --> 16:31.600
点 stop

16:31.600 --> 16:32.600
就这个

16:32.600 --> 16:34.600
我们应该进去

16:34.600 --> 16:36.600
直接显示这些内容

16:36.600 --> 16:37.600
然后我们看到

16:37.600 --> 16:39.600
我们先把它写出来

16:39.600 --> 16:42.600
我们写两层 对吧

16:42.600 --> 16:43.600
第一个

16:43.600 --> 16:45.600
是一个 diy

16:45.600 --> 16:47.600
我们这里边写上

16:47.600 --> 16:49.600
这是有一个事件

16:49.600 --> 16:51.600
我们称之为

16:51.600 --> 16:53.600
外层的

16:53.600 --> 16:54.600
事件

16:54.600 --> 16:56.600
然后我们再来一个 diy

16:56.600 --> 17:04.110
我们做一个内层的

17:04.110 --> 17:06.110
事件

17:06.110 --> 17:07.110
外层事件

17:07.110 --> 17:08.110
我们在这边写上

17:08.110 --> 17:11.110
外层事件的方法

17:11.110 --> 17:13.110
我们写上最简单的

17:13.110 --> 17:16.110
我们做个 console.log

17:16.110 --> 17:18.110
我们称之为

17:18.110 --> 17:19.110
外层

17:19.110 --> 17:20.110
事件

17:20.110 --> 17:25.090
message的方法

17:25.090 --> 17:28.780
再来

17:28.780 --> 17:29.780
in the

17:29.780 --> 17:36.700
事件

17:36.700 --> 17:43.020
console.log

17:43.020 --> 17:44.020
in the

17:44.020 --> 17:46.020
事件的

17:46.020 --> 17:47.020
方法

17:47.020 --> 17:50.910
然后把两个

17:50.910 --> 17:51.910
我们

17:51.910 --> 17:52.910
直接让它运行一下

17:52.910 --> 17:54.910
我们在内部写上一下

17:54.910 --> 17:56.910
in the

17:56.910 --> 17:58.910
这是属于

17:58.910 --> 17:59.910
outer

17:59.910 --> 18:04.340
现在我们已经

18:04.340 --> 18:05.340
编一好了

18:05.340 --> 18:06.340
对吧 两个

18:06.340 --> 18:07.340
outer 跟 in the

18:07.340 --> 18:08.340
然后这边是

18:08.340 --> 18:10.340
内层和外层

18:10.340 --> 18:11.340
打开以后

18:11.340 --> 18:12.340
首先我们点 in the

18:12.340 --> 18:13.340
点 in the 以后

18:13.340 --> 18:14.340
我们会发现

18:14.340 --> 18:15.340
两个同时被运行

18:15.340 --> 18:16.340
对吧

18:16.340 --> 18:17.340
点 outer

18:17.340 --> 18:19.340
表示只运行了一个

18:19.340 --> 18:20.340
outer

18:20.340 --> 18:21.340
所以呢

18:21.340 --> 18:22.340
这个是属于

18:22.340 --> 18:23.340
冒泡事件

18:23.340 --> 18:24.340
产生了

18:24.340 --> 18:25.340
我们在内部

18:25.340 --> 18:27.340
去做一个 stop

18:27.340 --> 18:29.340
做完以后的话

18:29.340 --> 18:30.340
我们再来看一下

18:30.340 --> 18:32.340
我们的微信程序

18:32.340 --> 18:33.340
点内部

18:33.340 --> 18:34.340
只运行了一个

18:34.340 --> 18:35.340
点外部

18:35.340 --> 18:36.340
也只运行了一个

18:36.340 --> 18:37.340
所以

18:37.340 --> 18:38.340
这个的操作

18:38.340 --> 18:39.340
是没问题的

18:39.340 --> 18:41.340
我们在 ppt 上也说到了

18:41.340 --> 18:42.340
对吧

18:42.340 --> 18:43.340
我们说 stop

18:43.340 --> 18:44.340
它会阻止冒泡

18:44.340 --> 18:45.340
同一时间

18:45.340 --> 18:46.340
如果非冒泡存在的话

18:46.340 --> 18:48.340
那么它本身也是会失常

18:48.340 --> 18:49.340
所以我们一般都是

18:49.340 --> 18:50.340
在一个事件上

18:50.340 --> 18:51.340
或者成为一个

18:51.340 --> 18:52.340
那个元素上

18:52.340 --> 18:53.340
只会使用一个

18:53.340 --> 18:54.340
我们比如说

18:54.340 --> 18:55.340
就用阻止冒泡

18:55.340 --> 18:57.340
这样的结构

18:57.340 --> 18:58.340
那么其他的话

18:58.340 --> 18:59.340
我们说

18:59.340 --> 19:00.340
都是至少来说

19:00.340 --> 19:01.340
现在还不能说

19:01.340 --> 19:02.340
是完全使用的

19:02.340 --> 19:03.340
或者说用上去

19:03.340 --> 19:04.340
是没有效果的

19:04.340 --> 19:06.340
因为它本身的结构

19:06.340 --> 19:08.340
和我们现有的一些

19:08.340 --> 19:10.340
我们的 pc 班

19:10.340 --> 19:11.340
是不一样的

19:11.340 --> 19:12.340
所以这点的话

19:12.340 --> 19:13.340
我们大家需要注意

19:13.340 --> 19:15.340
对于事件来讲的话

19:15.340 --> 19:16.340
我们更多的

19:16.340 --> 19:17.340
需要的是

19:17.340 --> 19:18.340
我们在执行过程中

19:18.340 --> 19:20.340
怎么样让把这些内容

19:20.340 --> 19:21.340
能够很好的进行

19:21.340 --> 19:23.340
和用户交互以后

19:23.340 --> 19:24.340
数据传递

19:24.340 --> 19:25.340
并且让用户

19:25.340 --> 19:26.340
能够很好的在微信端

19:26.340 --> 19:27.340
感受到

19:27.340 --> 19:28.340
这是我们事件

19:28.340 --> 19:30.340
最重要做的事情

19:30.340 --> 19:32.340
那么具体的事件的愚法

19:32.340 --> 19:33.340
应该说

19:33.340 --> 19:34.340
我们就做一个简单的

19:34.340 --> 19:35.340
这样的复习

19:35.340 --> 19:36.340
我们不去对它

19:36.340 --> 19:38.340
做过多的那个

19:38.340 --> 19:39.340
细致的讲解

19:39.340 --> 19:40.340
因为相信大家

19:40.340 --> 19:41.340
之前已经学过

19:41.340 --> 19:43.340
好 时间的简单介绍

