WEBVTT

00:00.050 --> 00:02.850
好 我们就讲解MPV的系列课程

00:02.850 --> 00:06.050
这些课呢 给大家讲解一下MPV的生命周期

00:06.050 --> 00:10.250
说起生命周期呢 其实对MPV来讲它比较特殊

00:10.250 --> 00:14.050
因为它是需要既要有view的结构

00:14.050 --> 00:15.650
又要有小程序的结构

00:15.650 --> 00:19.450
所以呢 对于两者来讲它都有生命周期存在

00:19.450 --> 00:21.650
所以我们现在所讲解的时候说

00:21.650 --> 00:25.250
MPV它既接收view的生命周期构子函数

00:25.250 --> 00:28.850
又可以去输写小程序的生命周期构子函数

00:29.050 --> 00:32.050
我们看到 现在BBT上 我已经列出来了

00:32.050 --> 00:36.850
两个 我们分别是小程序和view的生命周期的一个列表

00:36.850 --> 00:39.850
对于view来讲呢 它是before create

00:39.850 --> 00:41.850
这几个内容我就不读了

00:41.850 --> 00:45.050
那么主要的呢 我们有几个内容可以知道的是

00:45.050 --> 00:48.850
我们比较重点式的是它

00:48.850 --> 00:50.850
amounted

00:50.850 --> 00:51.850
amounted

00:51.850 --> 00:55.650
这个呢 主要是在我们已经完成挂载

00:55.650 --> 00:57.050
它是初始化 对吧

00:57.050 --> 00:59.450
然后它是挂载前 挂载后

00:59.450 --> 01:01.050
然后这是更新

01:01.050 --> 01:03.250
这个是激活 这是销毁

01:03.250 --> 01:06.050
主要很多的都会在挂载后

01:06.050 --> 01:08.250
也就是初始化的时候去做的事情

01:08.250 --> 01:09.250
这个比较多

01:09.250 --> 01:10.850
对于小程序来讲呢

01:10.850 --> 01:12.250
我们小程序里面呢

01:12.250 --> 01:15.050
主要的有几件事做的比较多的呢

01:15.050 --> 01:18.050
我们有时候会在这一步

01:18.050 --> 01:22.850
ready和show这一步里面去继续做

01:22.850 --> 01:26.050
另外 我们讲ready是表示初始化完成

01:26.050 --> 01:28.050
而show表示是显示

01:28.050 --> 01:30.050
这两个区别是在于ready呢

01:30.050 --> 01:32.050
我只要这页面的进程不关掉

01:32.050 --> 01:34.050
它永远是只剩一次的

01:34.050 --> 01:36.050
但show它其实和我们的

01:36.050 --> 01:39.050
还有一个叫做header进行切换的

01:39.050 --> 01:42.050
如果是前后台的激活 未激活状态的切换

01:42.050 --> 01:45.050
那么都是属于show和header里面出来的

01:45.050 --> 01:47.050
所以大家有时候会看到

01:47.050 --> 01:49.050
包括是这两个也是

01:49.050 --> 01:51.050
那么我们所谓的

01:51.050 --> 01:53.050
大家如果把一个程序

01:53.050 --> 01:55.050
没有关闭切换到手机后台

01:55.050 --> 01:58.050
再打开的时候是不是还有加在页面

01:58.050 --> 02:01.050
这种过程其实都是属于show激活状态

02:01.050 --> 02:02.050
所需要做的

02:02.050 --> 02:04.050
那么其他的话都是一些额外的

02:04.050 --> 02:07.050
比如说下拉触底用户的一些分享

02:07.050 --> 02:10.050
这都是其他的一些简单的事件结构

02:10.050 --> 02:13.050
那么对于mpview来讲的话

02:13.050 --> 02:15.050
这两个都可以写

02:15.050 --> 02:18.050
但是我们没有必要全都写上去

02:18.050 --> 02:20.050
那么同时我们个人

02:20.050 --> 02:23.050
或者说官方都是有一个建议

02:23.050 --> 02:25.050
就是如果说你特别

02:25.050 --> 02:27.050
对于某一个小程序

02:27.050 --> 02:30.050
或者view中的一个生命周期

02:30.050 --> 02:32.050
有特殊的一个使用点

02:32.050 --> 02:35.050
或者说对于用view的小程序上面

02:35.050 --> 02:37.050
很难去达到这个点实现的

02:37.050 --> 02:39.050
那么你可以去两者混用

02:39.050 --> 02:44.050
我们有时候称为混合生命周期

02:44.050 --> 02:48.050
但是如果你本身只是做一些复职

02:48.050 --> 02:50.050
或者是初始化工作的话

02:50.050 --> 02:53.050
那么此时我们更多的情况下

02:53.050 --> 02:56.050
一般都会去使用的是view

02:56.050 --> 02:57.050
请记住

02:57.050 --> 02:58.050
不是说只能用view

02:58.050 --> 03:01.050
我们两者一样相比之下用view

03:01.050 --> 03:02.050
如果两者不一样

03:02.050 --> 03:05.050
功能上面和你需要的时间点上不一样

03:05.050 --> 03:09.050
那么谁更贴切就用谁

03:09.050 --> 03:11.050
这是我们说到的第一点

03:11.050 --> 03:12.050
这是第一点

03:12.050 --> 03:14.050
第二点我们可以看到有一张图

03:14.050 --> 03:17.050
这张图非常的小

03:17.050 --> 03:18.050
那么我在这边

03:18.050 --> 03:20.050
我们把官网的有一张图

03:20.050 --> 03:21.050
给大家拿过来看一下

03:21.050 --> 03:23.050
这是我官网上结下来的

03:23.050 --> 03:25.050
官网我把它放大一点

03:25.050 --> 03:28.550
我们简单来看一下

03:28.550 --> 03:30.550
这个叫做顺序图生命周期的

03:30.550 --> 03:32.550
它是两者结合以后

03:32.550 --> 03:35.550
你所能够看到的一个结果

03:35.550 --> 03:38.550
我们简单的从上往下

03:38.550 --> 03:39.550
过一遍就可以了

03:39.550 --> 03:41.550
首先我们做new

03:41.550 --> 03:43.550
我们做一个创建

03:43.550 --> 03:46.550
现在的view的一个实力

03:46.550 --> 03:48.550
初始化事件的时候

03:48.550 --> 03:50.550
我们在创建create之前

03:50.550 --> 03:53.550
我们会看到before create里面走一圈

03:53.550 --> 03:55.550
那么做了这样的一个生命以后

03:55.550 --> 03:56.550
它初始化完成

03:56.550 --> 03:57.550
初始化完成以后

03:57.550 --> 04:00.550
我们就直接再进入到了我们的created

04:00.550 --> 04:01.550
然后此时

04:01.550 --> 04:02.550
一旦刚初始化完成

04:02.550 --> 04:04.550
它会问你有没有el

04:04.550 --> 04:05.550
el是什么

04:05.550 --> 04:06.550
el是element

04:06.550 --> 04:08.550
针对的某一个对象

04:08.550 --> 04:09.550
有这样的参数没有

04:09.550 --> 04:11.550
如果有这参数在问你

04:11.550 --> 04:13.550
你现在有没有页面的component

04:13.550 --> 04:14.550
有没有组件

04:15.550 --> 04:16.550
如果有的话

04:16.550 --> 04:18.550
那么它再往下进行

04:18.550 --> 04:19.550
那么看到

04:19.550 --> 04:22.550
这下面有一个壁环

04:22.550 --> 04:24.550
同时这边也有出口

04:24.550 --> 04:26.550
那么这个壁环里面

04:26.550 --> 04:29.550
就是针对于微信小程序的一块操作了

04:29.550 --> 04:31.550
前面我们的view这里已经完成了

04:31.550 --> 04:33.550
它无论是组件的操作

04:33.550 --> 04:34.550
还是元素的

04:34.550 --> 04:37.550
还是属于我们的生命周期

04:37.550 --> 04:39.550
created的操作

04:39.550 --> 04:40.550
一旦进到这里

04:40.550 --> 04:42.550
它初始化小程序开始

04:42.550 --> 04:44.550
那么小程序的生命周期就开始运行

04:48.550 --> 04:49.550
当它运行完了

04:49.550 --> 04:51.550
这个页面也被创建出来了

04:51.550 --> 04:52.550
那么此时呢

04:52.550 --> 04:54.550
你就可以继续往下走

04:54.550 --> 04:55.550
这边还有个圈

04:55.550 --> 04:56.550
意图就是在于

04:56.550 --> 04:57.550
如果这个页面

04:57.550 --> 04:58.550
你现在正在运行

04:58.550 --> 04:59.550
在看没有关系

04:59.550 --> 05:01.550
如果你把它隐藏了

05:01.550 --> 05:02.550
或者卸载了

05:02.550 --> 05:03.550
它一定会执行到

05:03.550 --> 05:06.550
它内部的一个虚拟洞的结构上面

05:06.550 --> 05:07.550
你会看到

05:07.550 --> 05:08.550
这边它会执行一个hitter

05:08.550 --> 05:10.550
或者enloader

05:10.550 --> 05:12.550
在我们内部的这样的一个

05:12.550 --> 05:14.550
事件激发的时候

05:14.550 --> 05:16.550
虚拟洞会完成整个这个的操作

05:16.550 --> 05:17.550
同时呢

05:17.550 --> 05:19.550
在这个内部环节中

05:19.550 --> 05:21.550
它本身还有一些特殊的

05:21.550 --> 05:23.550
我们的一些事件

05:23.550 --> 05:24.550
比如说下拉

05:24.550 --> 05:26.550
比如说分享

05:26.550 --> 05:27.550
比如说滚动

05:27.550 --> 05:28.550
那么这些事件

05:28.550 --> 05:30.550
都会在这个过程中执行

05:30.550 --> 05:32.550
它不和你现在页面

05:32.550 --> 05:33.550
创建的一条路是

05:33.550 --> 05:35.550
它形成在这个里面的一个

05:35.550 --> 05:36.550
循环

05:36.550 --> 05:38.550
或者称之为避环操作

05:38.550 --> 05:40.550
当你页面执行完成以后的话

05:40.550 --> 05:41.550
注意

05:41.550 --> 05:43.550
这只是一个页面完成了

05:43.550 --> 05:44.550
不代表它能显示

05:44.550 --> 05:45.550
所以你往下走

05:45.550 --> 05:46.550
看到吗

05:46.550 --> 05:47.550
我们要形成挂载

05:47.550 --> 05:49.550
没有一本身自己的页面

05:49.550 --> 05:51.550
需要把它挂载到

05:51.550 --> 05:53.550
我们现在所能够看到的

05:53.550 --> 05:54.550
这个角落架上面

05:54.550 --> 05:55.550
所以呢

05:55.550 --> 05:56.550
我们看到

05:56.550 --> 05:57.550
我们在挂载之前

05:57.550 --> 05:59.550
会运行我们的before amount

05:59.550 --> 06:00.550
然后往下

06:00.550 --> 06:01.550
我们再看到

06:01.550 --> 06:02.550
这边有个before amount

06:02.550 --> 06:04.550
这是属于挂载之后

06:04.550 --> 06:06.550
当它全挂载完了

06:06.550 --> 06:07.550
那么此时

06:07.550 --> 06:09.550
这边又有一个小循环体

06:09.550 --> 06:11.550
它是指你是否有变化

06:11.550 --> 06:12.550
如果有变化的话

06:12.550 --> 06:13.550
你在变化之前

06:13.550 --> 06:15.550
你会运行before updater

06:15.550 --> 06:16.550
那么进入虚拟洞

06:16.550 --> 06:18.550
重新进行它的一个编译

06:18.550 --> 06:19.550
同时呢

06:19.550 --> 06:20.550
在完成以后

06:20.550 --> 06:22.550
你再会做一个updated

06:22.550 --> 06:23.550
代表你的编译完成

06:23.550 --> 06:25.550
或者说更新完成的

06:25.550 --> 06:26.550
一个所谓的

06:26.550 --> 06:27.550
生命周期函数

06:27.550 --> 06:28.550
在你最后

06:28.550 --> 06:30.550
这个挂载好了以后

06:30.550 --> 06:32.550
那么我们当你要发起一个

06:32.550 --> 06:33.550
微信的

06:33.550 --> 06:35.550
虚拟洞的一个destroy的时候

06:35.550 --> 06:36.550
也就是什么

06:36.550 --> 06:37.550
叫做销毁的时候

06:37.550 --> 06:38.550
那么销毁之前

06:38.550 --> 06:41.550
它可以有个beforedestroy的运行

06:41.550 --> 06:42.550
那么当你证实的

06:42.550 --> 06:43.550
你告诉它

06:43.550 --> 06:45.550
现在有没有指节点

06:45.550 --> 06:46.550
有没有就是

06:46.550 --> 06:48.550
我们的一个

06:48.550 --> 06:49.550
紫元素啊

06:49.550 --> 06:50.550
包括是这些内容

06:50.550 --> 06:52.550
如果这些都通过了

06:52.550 --> 06:53.550
它的执行操作以后

06:53.550 --> 06:55.550
那么它会把当前页面进行销毁

06:55.550 --> 06:56.550
而销毁以后

06:56.550 --> 06:59.550
最终执行的就是destroy的

06:59.550 --> 07:00.550
销毁后的

07:00.550 --> 07:01.550
所以我们大家

07:01.550 --> 07:03.550
从整体上来看的话

07:03.550 --> 07:05.550
这个在你开发过程中的话

07:05.550 --> 07:07.550
不会说是让你每一个都去做

07:07.550 --> 07:09.550
我们主要要看到的是

07:09.550 --> 07:11.550
我们的view操作

07:11.550 --> 07:14.550
是在前面和后面

07:14.550 --> 07:16.550
我们的小程序

07:16.550 --> 07:18.550
是在中间进行运行

07:18.550 --> 07:20.550
而这个中间

07:20.550 --> 07:21.550
其实就是我们的destroy

07:21.550 --> 07:22.550
对不对

07:22.550 --> 07:23.550
那么前后的话

07:23.550 --> 07:24.550
都是我们view的

07:24.550 --> 07:26.550
那么它综合起来

07:26.550 --> 07:27.550
就形成了我们的

07:27.550 --> 07:28.550
npview的生命周期

07:28.550 --> 07:30.550
这是一个认识

07:30.550 --> 07:32.550
紧接着

07:32.550 --> 07:33.550
那么在这个认识以后

07:33.550 --> 07:34.550
我们刚才强调了一点

07:34.550 --> 07:36.550
并不是说你所有的页面

07:36.550 --> 07:37.550
所有的内容

07:37.550 --> 07:38.550
全都得用上

07:38.550 --> 07:40.550
也不是说你一部分用

07:40.550 --> 07:42.550
没有一部分有小程序

07:42.550 --> 07:43.550
那我们可以

07:43.550 --> 07:44.550
可以混合使用

07:44.550 --> 07:45.550
但是混合使用

07:45.550 --> 07:47.550
有混合使用的前提就是

07:47.550 --> 07:49.550
如果两者之间

07:49.550 --> 07:50.550
没有说这个也能用

07:50.550 --> 07:51.550
那个也能用的话

07:51.550 --> 07:52.550
那么你必须用

07:52.550 --> 07:53.550
你现在当前这个节点

07:53.550 --> 07:55.550
比如说我就是要在小程序的

07:55.550 --> 07:56.550
这个节点上用

07:56.550 --> 07:58.550
那么其他地方都是用不上的

07:58.550 --> 08:00.550
比如说我就是小程序的滚动

08:00.550 --> 08:01.550
或者触底的时候用

08:01.550 --> 08:02.550
其他地方用不上的

08:02.550 --> 08:04.550
那你可以这边使用

08:04.550 --> 08:05.550
如果你都是初始化

08:05.550 --> 08:06.550
那么这时候的话

08:06.550 --> 08:08.550
我们没必要两个一起用

08:08.550 --> 08:09.550
理解吧

08:09.550 --> 08:10.550
是这个逻辑

08:10.550 --> 08:12.550
同时我们这边再来说一下

08:12.550 --> 08:15.550
那么我们现在的执行的

08:15.550 --> 08:17.550
初始顺序

08:17.550 --> 08:19.550
它究竟看好这个以后的话

08:19.550 --> 08:20.550
我们对页面来讲

08:20.550 --> 08:22.550
这是它整个一个操作

08:22.550 --> 08:23.550
那我们从页面来讲

08:23.550 --> 08:25.550
我们就要写代码了

08:26.550 --> 08:27.550
我们可以通过代码的方式

08:27.550 --> 08:28.550
来认识

08:28.550 --> 08:29.550
首先我们还是打开

08:29.550 --> 08:31.550
原先我们刚才的

08:31.550 --> 08:34.550
这个界面

08:34.550 --> 08:35.550
或者程序

08:35.550 --> 08:37.550
我们在这个程序中

08:37.550 --> 08:39.550
我们去完成

08:39.550 --> 08:42.550
我们对于两个src里面的pader

08:42.550 --> 08:44.550
你们index跟logs

08:44.550 --> 08:48.550
分别写上它的我们的生命途期

08:48.550 --> 08:49.550
我们来看一下

08:49.550 --> 08:51.550
它们之间的执行顺序

08:51.550 --> 08:52.550
刚才我们是读

08:52.550 --> 08:54.550
和语法的学习

08:54.550 --> 08:57.550
打开index vue

08:57.550 --> 08:59.550
对你来讲index vue的这个结构

08:59.550 --> 09:01.550
你的vue应该很熟的

09:01.550 --> 09:02.550
所以我们讲

09:02.550 --> 09:04.550
我们的生命途期的所有部分

09:04.550 --> 09:07.930
都会写在message里面

09:07.930 --> 09:08.930
生命途期的所有部分

09:08.930 --> 09:12.240
我们都会写在message里面

09:12.240 --> 09:13.240
我们这边来

09:13.240 --> 09:15.240
我们写几个出来

09:15.240 --> 09:19.320
比如说created

09:19.320 --> 09:22.320
我们created写出来

09:22.320 --> 09:24.320
这边用doh

09:24.320 --> 09:27.320
那为了演示最粗暴的方式

09:27.320 --> 09:30.320
就是pader

09:30.320 --> 09:32.320
就是console.log

09:32.320 --> 09:38.870
我把当前的对象给打出来

09:38.870 --> 09:39.870
我们这边写一个

09:39.870 --> 09:42.870
然后把这个内容复制过去

09:42.870 --> 09:48.270
我们后面有一个mountain的

09:48.270 --> 09:51.970
然后console.log

09:51.970 --> 10:01.320
我们写上mountain的this

10:01.320 --> 10:03.320
再来

10:03.320 --> 10:07.910
unloader

10:07.910 --> 10:08.910
console

10:08.910 --> 10:10.910
我们写上pader

10:10.910 --> 10:15.910
index的unloader

10:15.910 --> 10:17.910
this

10:17.910 --> 10:19.910
再来

10:19.910 --> 10:21.910
unready

10:21.910 --> 10:27.140
console.log

10:27.140 --> 10:29.140
我们写上pader

10:29.140 --> 10:33.140
index unready

10:33.140 --> 10:35.140
this

10:35.140 --> 10:38.520
这边有doh

10:38.520 --> 10:39.520
这是ready的对吧

10:39.520 --> 10:40.520
我们再来

10:40.520 --> 10:41.520
我们随便写几个

10:41.520 --> 10:43.520
还有的就是show

10:43.520 --> 10:44.520
对吧

10:44.520 --> 10:47.150
我们还有show

10:47.150 --> 10:48.150
首先看是否能执行

10:48.150 --> 10:49.150
第二个执行前后顺序

10:49.150 --> 10:50.150
不是说你写成这样

10:50.150 --> 10:51.150
就是结合顺序是这样

10:51.150 --> 10:53.150
它要看它的执行点

10:53.150 --> 10:55.460
show

10:55.460 --> 10:57.460
我们写上这个是在哪儿

10:57.460 --> 10:58.460
这个是pader

10:58.460 --> 11:00.460
index的show

11:00.460 --> 11:04.630
再来

11:04.630 --> 11:06.630
unloader

11:06.630 --> 11:10.650
console.log

11:10.650 --> 11:14.280
pader

11:14.280 --> 11:15.280
index

11:15.280 --> 11:18.280
unloader

11:18.280 --> 11:21.910
我们写上

11:21.910 --> 11:22.910
再来

11:22.910 --> 11:24.910
unheader

11:24.910 --> 11:25.910
差不多

11:25.910 --> 11:36.110
unheader

11:36.110 --> 11:37.110
this

11:37.110 --> 11:39.870
好

11:39.870 --> 11:41.870
我们把这个写好以后的话

11:41.870 --> 11:42.870
我们把它复制一下

11:42.870 --> 11:44.870
我们把它全盘的复制到

11:44.870 --> 11:46.870
我们的第二个系统页面

11:46.870 --> 11:47.870
哪个呢

11:47.870 --> 11:48.870
是我们的logs

11:48.870 --> 11:51.310
这里边

11:51.310 --> 11:52.310
对吧

11:52.310 --> 11:53.310
这里边其实我们这边

11:53.310 --> 11:55.310
也能再放一组

11:55.310 --> 11:56.310
把这个字改一下

11:56.310 --> 12:06.790
我们改成logs

12:06.790 --> 12:07.790
OK

12:07.790 --> 12:08.790
现在已经重新编译了

12:08.790 --> 12:09.790
那我们到页面中

12:09.790 --> 12:14.380
我们来刷一下

12:14.380 --> 12:16.380
他是create

12:16.380 --> 12:19.380
我们重新的在这边刷一下

12:19.380 --> 12:20.380
我们看一下

12:20.380 --> 12:21.380
我们需要这两个页面

12:21.380 --> 12:22.380
在编译的时候

12:22.380 --> 12:24.380
都显示出数据来

12:24.380 --> 12:34.540
我们到index中

12:34.540 --> 12:35.540
create

12:35.540 --> 12:36.540
create出来了

12:36.540 --> 12:40.300
我们看一下下面的

12:40.300 --> 12:41.300
那我们看一下

12:41.300 --> 12:42.300
我们把它拿出来

12:42.300 --> 12:44.300
我们放在位置

12:44.300 --> 12:45.300
我们把它得放在

12:45.300 --> 12:48.300
我们的message的外面

12:48.300 --> 12:49.300
所以我们这边

12:49.300 --> 12:50.300
把message给收掉

12:50.300 --> 12:51.300
然后下面

12:51.300 --> 12:54.260
我们

12:54.260 --> 12:55.260
把它直接从里面

12:55.260 --> 12:56.260
拿出来就可以了

12:56.260 --> 12:59.980
拿出来

12:59.980 --> 13:01.980
拿在message外面

13:01.980 --> 13:02.980
位置不对

13:02.980 --> 13:03.980
好了

13:03.980 --> 13:04.980
我们把它放在这

13:04.980 --> 13:05.980
同时

13:05.980 --> 13:08.980
我们在viewe里面

13:08.980 --> 13:09.980
我们也拿出来

13:09.980 --> 13:11.980
我们在logs里面

13:11.980 --> 13:12.980
我们在这边

13:12.980 --> 13:13.980
viewe

13:13.980 --> 13:16.980
我们这边也放置一个

13:16.980 --> 13:37.020
然后我们写上log

13:37.020 --> 13:38.020
我们来看一下

13:38.020 --> 13:42.680
上面就去运行了

13:42.680 --> 13:44.680
那我们看到的效果是

13:44.680 --> 13:45.680
首先

13:45.680 --> 13:47.680
我们的两个created

13:47.680 --> 13:50.680
它运行于我们unload之前

13:50.680 --> 13:52.680
它运行unload之前

13:52.680 --> 13:53.680
unload完成以后

13:53.680 --> 13:54.680
unshow

13:54.680 --> 13:56.680
下面的unready

13:56.680 --> 13:57.680
amounted

13:57.680 --> 13:58.680
那么看到了

13:58.680 --> 13:59.680
我们的刚才

13:59.680 --> 14:00.680
我们那张图示

14:00.680 --> 14:01.680
你也看到了

14:01.680 --> 14:03.680
我们before created

14:03.680 --> 14:05.680
和我们的created

14:05.680 --> 14:06.680
都是在我们的

14:06.680 --> 14:07.680
之前先运行

14:07.680 --> 14:08.680
对吗

14:08.680 --> 14:09.680
然后后期的话

14:09.680 --> 14:10.680
我们这边运行的是

14:10.680 --> 14:11.680
我们unloader

14:11.680 --> 14:13.680
unshow小程序的那一套

14:13.680 --> 14:14.680
然后最后

14:14.680 --> 14:15.680
我们下面是挂载

14:15.680 --> 14:16.680
所以

14:16.680 --> 14:18.680
它的整个顺序结构

14:18.680 --> 14:20.680
是按照这个结构来的

14:20.680 --> 14:22.680
它的整个顺序结构

14:22.680 --> 14:23.680
是按照这样的结构

14:23.680 --> 14:26.680
和我们刚才图纸是一样的

14:26.680 --> 14:27.680
同时我们后面

14:27.680 --> 14:30.680
打入了我们现在的this

14:30.680 --> 14:32.680
那么我们可以看到一个情况

14:32.680 --> 14:34.680
就是它这个this

14:34.680 --> 14:35.680
view3的实力

14:35.680 --> 14:36.680
已经被创建了

14:36.680 --> 14:37.680
也就是说

14:37.680 --> 14:40.680
我们在没有unloader之前

14:40.680 --> 14:42.680
小程序页面还没有加在之前

14:42.680 --> 14:44.680
我们现在的

14:44.680 --> 14:46.680
所有的一些view的

14:46.680 --> 14:47.680
实力对象

14:47.680 --> 14:49.680
已经出来了

14:49.680 --> 14:50.680
这点需要大家明确

14:50.680 --> 14:51.680
你打开

14:51.680 --> 14:52.680
可以看到里面的

14:52.680 --> 14:53.680
整个这个结构

14:53.680 --> 14:55.680
那么它的结构对象是哪个

14:55.680 --> 14:56.680
我们在这能看到

14:56.680 --> 14:57.680
这个np

14:57.680 --> 14:58.680
np type

14:58.680 --> 15:00.680
当前是pager对象

15:00.680 --> 15:02.680
这边你是可以看到的

15:02.680 --> 15:03.680
同时我们打开

15:03.680 --> 15:04.680
这个你也能看到

15:04.680 --> 15:06.680
那么对于我们当前的

15:06.680 --> 15:07.680
实力来讲的

15:07.680 --> 15:08.680
我们在np

15:08.680 --> 15:10.680
这是属于在view中没有

15:10.680 --> 15:11.680
但是对于

15:11.680 --> 15:12.680
我们现在的npview来讲

15:12.680 --> 15:14.680
它是特别新增的一个

15:14.680 --> 15:16.680
它可以直接看出

15:16.680 --> 15:18.680
你当前这个实力对象

15:18.680 --> 15:20.680
是谁的

15:20.680 --> 15:21.680
在这边np里面

15:21.680 --> 15:22.680
我设定出来

15:22.680 --> 15:23.680
ok

15:23.680 --> 15:24.680
那这样的话

15:24.680 --> 15:27.680
我们顺便周期的这样的一个顺序

15:27.680 --> 15:28.680
和它执行的点

15:28.680 --> 15:30.680
就在这边有了

15:30.680 --> 15:31.680
还是那句话

15:31.680 --> 15:32.680
并不是不能

15:32.680 --> 15:34.680
我们所谓的全盘的执行

15:34.680 --> 15:35.680
而是

15:35.680 --> 15:37.680
我们需要在它里面

15:37.680 --> 15:38.680
少出我们现在

15:38.680 --> 15:40.680
特别的那些

15:40.680 --> 15:41.680
如果像小程序

15:41.680 --> 15:43.680
本身自有的那种

15:43.680 --> 15:44.680
所谓的

15:44.680 --> 15:45.680
我们的下载

15:45.680 --> 15:46.680
那个

15:47.680 --> 15:49.680
下拉刷新

15:49.680 --> 15:50.680
分享

15:50.680 --> 15:51.680
我们可以单写

15:51.680 --> 15:52.680
但比如说像这个

15:52.680 --> 15:54.680
像created amount

15:54.680 --> 15:56.680
这种amount on louder

15:56.680 --> 15:58.680
那么除非你有特别的一个定义

15:58.680 --> 16:00.680
一般我们都可以使用amount

16:00.680 --> 16:01.680
来完成

16:01.680 --> 16:02.680
加载

16:02.680 --> 16:04.680
完成我们的初始化的动作

16:04.680 --> 16:07.680
这个都是可以在这边执行的

16:07.680 --> 16:08.680
我们本身

16:08.680 --> 16:10.680
就可以去写各种的

16:10.680 --> 16:11.680
生命周期的位置

16:11.680 --> 16:13.680
我们完成页面的初始化

16:13.680 --> 16:14.680
那么注意

16:14.680 --> 16:15.680
页面在完成

16:15.680 --> 16:17.680
这样的一个生命周期的时候

16:17.680 --> 16:19.680
它会自动完成编译

16:19.680 --> 16:20.680
所以你在我们的

16:20.680 --> 16:21.680
这个小程序工具中

16:21.680 --> 16:23.680
你可以直接看到

16:23.680 --> 16:24.680
它的生命周期的

16:24.680 --> 16:25.680
一个运行效果

16:25.680 --> 16:27.680
刚才我们没有做重新编译

16:27.680 --> 16:28.680
那么什么时候

16:28.680 --> 16:29.680
你需要做重新编译呢

16:29.680 --> 16:31.680
那么这里说明一下

16:31.680 --> 16:34.680
一你如果修改的是配置文件

16:34.680 --> 16:36.680
你如果修改的是配置文件

16:36.680 --> 16:38.680
那系统不会去做编译的

16:38.680 --> 16:40.680
第二你如果新建了页面

16:40.680 --> 16:42.680
那么系统也不会去做编译的

16:42.680 --> 16:44.680
就在这两种情况下

16:44.680 --> 16:46.680
你才可能需要去做

16:46.680 --> 16:47.680
我们的新编译

16:47.680 --> 16:48.680
新编译方式

16:48.680 --> 16:49.680
Ctrl C

16:49.680 --> 16:50.680
终止掉它

16:50.680 --> 16:52.680
然后再执行NPN star

16:52.680 --> 16:53.680
这就可以了

16:53.680 --> 16:54.680
这是我们说到的

16:54.680 --> 16:56.680
现在的一个生命周期的

16:56.680 --> 16:58.680
一个简单的逻辑

16:58.680 --> 16:59.680
因为生命周期

16:59.680 --> 17:00.680
本身自己呢

17:00.680 --> 17:02.680
和我们的view

17:02.680 --> 17:03.680
有个最大的区别

17:03.680 --> 17:04.680
因为它添加了小程序

17:04.680 --> 17:05.680
对吧

17:05.680 --> 17:06.680
好

17:06.680 --> 17:07.680
那么生命周期的语法呢

17:07.680 --> 17:08.680
就先讲到这

17:08.680 --> 17:10.680
然后呢我们开始

