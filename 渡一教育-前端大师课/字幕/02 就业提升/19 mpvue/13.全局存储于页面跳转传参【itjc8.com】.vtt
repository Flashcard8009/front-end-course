WEBVTT

00:00.000 --> 00:02.760
好 我们继续讲解MPVU的系列课程

00:02.760 --> 00:08.560
这些课呢 给大家讲解一下全局存储和页面间的跳转并传植

00:10.440 --> 00:11.720
那么 这是两块内容

00:11.720 --> 00:13.320
第一块呢 全局存储

00:13.320 --> 00:15.640
对于我们的MPVU来讲的话呢

00:15.640 --> 00:17.800
它的全局存储其实指的是

00:17.800 --> 00:22.920
我们能够把一个数据存储在我们的某一个地方以后

00:22.920 --> 00:26.920
那么它呢 能够在整个项目中全盘能够被使用到

00:26.920 --> 00:29.760
那么这种呢 咱们称之为全局存储

00:31.280 --> 00:35.080
那么以前的话呢 我们本身在各个的

00:36.040 --> 00:40.920
我们的两者 因为这里涉及到的是view和小程序

00:40.920 --> 00:43.600
这两者之间呢 都会有一相应的区别

00:43.600 --> 00:46.400
比如说global 我们在小程序里面

00:46.400 --> 00:48.600
我们会用到global.data

00:48.600 --> 00:52.560
这是我们全局的global的一个数据存储位

00:52.560 --> 00:54.640
那么我们只要把数据存在里面

00:54.680 --> 00:57.520
那么我们通过任何的app的方式

00:57.520 --> 01:01.080
就可以去app.global 啊 去得到这个数据

01:01.080 --> 01:03.680
第二个呢 我们在view1里面的话呢

01:03.680 --> 01:05.960
我们经常会用到是viewx

01:05.960 --> 01:07.560
view1x

01:07.560 --> 01:11.200
它的话呢 是一个数据存储变量 全局的 对吧

01:11.200 --> 01:12.560
那么它可以去控制

01:12.560 --> 01:15.840
无论是mountain, action, scatter

01:15.840 --> 01:18.240
还有那个stater

01:18.240 --> 01:22.920
这些都是可以对我们的数据进行stop 进行控制

01:22.920 --> 01:25.200
那么也可以在全局进行操作

01:25.200 --> 01:27.320
那么在今天的这一块里面的话呢

01:27.320 --> 01:29.240
那么首先在view里面

01:29.240 --> 01:33.040
我们先讲解在这边global.data的一个数据操作

01:33.040 --> 01:37.080
那么我们之后会来再讲解view的格式

01:37.080 --> 01:41.240
那么就是 等会我们会讲解全局的global.data的存储结构

01:41.240 --> 01:42.520
那么第二个内容呢

01:42.520 --> 01:46.160
这些可以讲解的是所谓的跳转页面

01:46.160 --> 01:47.800
那么页面的跳转呢

01:47.800 --> 01:51.520
对于我们的程序来讲是一个比较常见的操作

01:51.520 --> 01:53.760
但是呢 对于现在的

01:53.760 --> 01:56.760
它本身是两种语法的混合来讲

01:56.760 --> 01:58.520
它究竟该怎么样完成

01:58.520 --> 02:00.600
并且呢 简单的跳转

02:00.600 --> 02:03.600
其实还没有特别大的一个问题

02:03.600 --> 02:05.920
因为本身能够进行转换

02:05.920 --> 02:08.760
但是一旦涉及到数据传递的话

02:08.760 --> 02:10.640
那么它就会出现问题了

02:10.640 --> 02:13.200
那么因为两种语法的本质

02:13.200 --> 02:15.240
它在传递和属性

02:15.240 --> 02:19.040
就是我们程序为的标签属性上面的comply

02:19.040 --> 02:21.360
解析编译的时候是不一样的

02:21.360 --> 02:25.200
所以呢 它的数据传递会有一定的要求

02:25.200 --> 02:28.840
并且呢 它会有一定的那个写法

02:28.840 --> 02:29.600
那么这些可以呢

02:29.600 --> 02:33.200
给大家来做这方面的一个讲解和演示

02:33.200 --> 02:34.480
特别是在哪里呢

02:34.480 --> 02:35.800
特别在传参这一块

02:35.800 --> 02:37.200
我们有两种方式

02:37.200 --> 02:38.960
一种是静态参数

02:38.960 --> 02:41.960
当然你可以使用christian的模型来写

02:41.960 --> 02:42.520
第二种呢

02:42.520 --> 02:45.520
是微信的一种动态传参

02:45.520 --> 02:46.880
那么微信的话呢

02:46.880 --> 02:51.000
你就会用到我们的微信的wx对象

02:51.000 --> 02:51.640
这样的话呢

02:51.640 --> 02:56.840
我们就需要通过我们的试镜来完成这样的一个存在了

02:56.840 --> 02:57.440
ok

02:57.440 --> 02:59.320
那我们的一个一个来讲

03:00.360 --> 03:01.720
首先我们打开啊

03:01.720 --> 03:03.720
任一个简单的项目

03:03.720 --> 03:04.520
这个项目呢

03:04.520 --> 03:06.560
其实啥都没有是个空白的啊

03:06.560 --> 03:10.240
这边就是我们的系统所给到的一个空白页面

03:10.240 --> 03:11.880
我们把这些都给删掉

03:13.000 --> 03:21.980
删成了就是最简单的一个结构了

03:21.980 --> 03:22.540
对吧

03:22.540 --> 03:26.340
这里简单的就一个简单的图片和一个nv了

03:26.340 --> 03:26.940
ok

03:26.940 --> 03:28.460
那么紧接着下去的话呢

03:28.460 --> 03:32.980
我们想来第一步做我们的一个全聚存储

03:33.940 --> 03:35.020
那么正要说一下

03:36.020 --> 03:39.260
全聚存储在我们的微信小程序里面

03:39.260 --> 03:40.380
在微信小程序里面

03:40.380 --> 03:43.700
我们先看一下它的全聚存储应该是啊

03:43.700 --> 03:47.860
这个是我们里面那个叫什么npv的项目结构

03:47.860 --> 03:49.660
我们的全聚存储你还记得的话

03:49.660 --> 03:51.740
我们其实是在我们这下面

03:51.740 --> 03:54.300
我们有一个叫做什么

03:54.300 --> 03:58.140
我们有一个叫做app.gs

03:58.140 --> 03:59.020
是不是

03:59.020 --> 03:59.860
你如果还记得的话

03:59.860 --> 04:01.820
我们有个app.gs

04:01.820 --> 04:04.460
那我们把那个数据都存在那个里面

04:04.460 --> 04:06.100
那么我们要用的时候呢

04:06.100 --> 04:08.060
我们在程序中写上

04:08.060 --> 04:09.140
getapp

04:09.140 --> 04:11.020
然后你返回个app来

04:11.020 --> 04:14.420
然后你可以用app.globaldata的方式

04:14.420 --> 04:17.780
去获取我们里面所写好的全聚对象

04:17.780 --> 04:18.820
那个方式的话

04:18.820 --> 04:20.420
那么大家还记得的话

04:20.420 --> 04:21.260
那么去看一下

04:21.740 --> 04:22.420
好

04:23.140 --> 04:24.820
进的一个官网

04:24.820 --> 04:26.220
我们来看一下

04:26.220 --> 04:28.380
在它注册小程序的这一块

04:28.380 --> 04:31.660
也就是我们所谓的app.gs里面

04:31.660 --> 04:34.020
我们能看到这边有个globaldata

04:34.020 --> 04:36.140
这里面是有我们的数据的

04:36.140 --> 04:38.980
那么你要使用这个数据的方式很简单

04:38.980 --> 04:41.220
首先你在页面中去完成app

04:41.220 --> 04:44.100
那个叫做getapp

04:44.100 --> 04:45.140
返回一个对象

04:45.140 --> 04:47.700
由这个对象直接去点击

04:47.700 --> 04:49.940
我们的里面的这个方法globaldata

04:49.940 --> 04:51.300
就可以取出来了

04:51.300 --> 04:52.420
那么存在这里面的

04:52.420 --> 04:54.340
我们都称之为全聚对操作

04:54.340 --> 04:55.660
全聚变量

04:55.660 --> 04:56.260
ok

04:56.260 --> 04:59.140
那包括是里面还有一些我们的

04:59.140 --> 05:00.140
证明周期函数

05:00.140 --> 05:02.340
这里就先不去多说了

05:02.340 --> 05:05.020
那么我们想使用这个模型

05:05.020 --> 05:08.900
我们来做这方面的一个mpview的设置

05:08.900 --> 05:09.980
可不可以

05:09.980 --> 05:11.460
那么说一下

05:11.460 --> 05:14.900
逻辑上和操作上都是可行的

05:14.900 --> 05:15.620
但是它呢

05:15.620 --> 05:18.100
有几个特点需要去注意的

05:18.100 --> 05:18.940
注意特点以后

05:18.940 --> 05:19.820
你再写起来

05:19.820 --> 05:22.260
你会有一些事办公备

05:22.260 --> 05:24.580
首先你得打开它的全局

05:24.580 --> 05:27.940
也就是它的一个manding.js这个文件

05:27.940 --> 05:29.260
这个文件的话呢

05:29.260 --> 05:33.940
我们需要在这里面完成我们现在的一个数据的获取

05:33.940 --> 05:38.190
或者说我们的一个注册

05:38.190 --> 05:41.510
我们一般性在做view注册的时候

05:41.510 --> 05:44.590
我们基本上都是在生成view对象

05:44.590 --> 05:45.870
或者挂在之前

05:45.870 --> 05:51.730
我们经常会在这去做一个property

05:51.730 --> 05:53.130
property type

05:53.130 --> 05:54.090
然后就给上

05:54.090 --> 05:55.410
我们打上个dollaf

05:55.410 --> 05:57.370
然后我们随便给上一个名称

05:57.370 --> 05:57.890
对吧

05:57.890 --> 05:58.690
我们给上名称

05:58.690 --> 06:00.690
然后等于某一个值

06:00.690 --> 06:01.250
OK

06:01.250 --> 06:02.490
那么一般性是这样的

06:02.490 --> 06:03.370
或者一个对象

06:03.370 --> 06:04.250
这种方式都行

06:05.490 --> 06:06.730
但是问题是

06:06.730 --> 06:08.250
我们要想一下

06:08.250 --> 06:12.730
如果说你要在这去使用微信的东西的话

06:12.730 --> 06:16.410
你是不是应该是让微信本身自己

06:16.410 --> 06:18.010
或者说像mpview

06:18.010 --> 06:20.810
全部进行加在完成以后

06:20.850 --> 06:22.250
你才能去做这个事情

06:24.090 --> 06:25.250
你听我懂我意思吗

06:25.250 --> 06:27.850
就是我们的因为的操作

06:27.850 --> 06:28.730
mpview

06:28.730 --> 06:32.130
你需要让它把所有的生命周期

06:32.130 --> 06:35.130
特别是在全局刚起步的时候

06:35.130 --> 06:37.610
你全部让它执行完毕以后

06:37.610 --> 06:39.770
你后面再去在它原型上

06:39.770 --> 06:42.250
去追加一个我们的global

06:42.250 --> 06:44.650
所以这句话的意图就是

06:44.650 --> 06:47.130
我们以前的所有的生命都在这

06:47.130 --> 06:49.490
但是现在的我们要在后面

06:49.530 --> 06:50.810
我们要在这生命

06:52.570 --> 06:57.170
view.propertype

06:58.570 --> 07:00.210
在这我们写上

07:00.210 --> 07:01.730
注意这个写法

07:02.810 --> 07:03.530
后面

07:03.530 --> 07:06.290
你可以跟上一个变量名

07:06.290 --> 07:07.210
这个变量名

07:07.210 --> 07:09.250
其实我已经注册在原型上

07:09.250 --> 07:11.730
一旦注册在view的原型上

07:11.730 --> 07:13.690
你就可以在不同的页面的

07:13.690 --> 07:16.410
到处直接使用这个全局数据了

07:17.330 --> 07:21.370
那么我们由于想和微信保持同步

07:21.370 --> 07:22.330
或者名称的

07:23.050 --> 07:24.370
我们称global data

07:25.130 --> 07:26.650
我们以这个名称起出

07:27.250 --> 07:28.650
那么后面的话

07:28.650 --> 07:31.450
一旦你现在需要进行

07:31.450 --> 07:34.170
我们的App的操作

07:34.170 --> 07:35.610
你必须让它先把它

07:35.610 --> 07:39.210
转换成我们的微信程序以后

07:39.210 --> 07:39.930
你才能做

07:39.930 --> 07:42.730
所以我们直接可以写上App

07:43.690 --> 07:44.850
这个是谁的

07:44.850 --> 07:46.090
这个是微信的

07:46.770 --> 07:48.170
我们让它转换完以后

07:48.170 --> 07:50.370
微信就自动认识了这个getApp

07:51.570 --> 07:52.370
我们再说一遍

07:52.370 --> 07:56.010
我们的这个viewe

07:56.010 --> 07:58.050
我们在注册原型的时候

07:58.050 --> 08:00.610
我们说我们用propertype

08:00.610 --> 08:03.570
然后我们后面的这个变量名

08:03.570 --> 08:06.650
它其实是我们可以在程序的

08:06.650 --> 08:08.770
任何的位置页面上面

08:08.770 --> 08:13.380
都可以使用的一个全局数据名称

08:13.380 --> 08:16.540
然后后面是我们现在的getApp

08:16.540 --> 08:19.420
这个getApp其实是我们微信的

08:19.420 --> 08:23.700
然后我们直接利用它的global data

08:25.620 --> 08:27.500
你可以去这样写

08:27.500 --> 08:28.940
我们就标注一下

08:28.940 --> 08:49.700
这是指在使用微信的getApp的global方法

08:49.700 --> 08:59.820
注册在viewe的原型上

08:59.820 --> 09:04.940
需要注意

09:04.940 --> 09:21.920
一定要放在App的挂载之后

09:21.920 --> 09:22.280
好了

09:22.280 --> 09:24.680
我们先把它放在这了

09:24.680 --> 09:27.280
那么紧接着我们要开始使用了

09:27.280 --> 09:30.800
使用就是直接用这个名称global data

09:30.800 --> 09:32.040
那我们去哪里用呢

09:32.040 --> 09:34.080
我们首先最简单的方式

09:34.080 --> 09:36.200
我们去到第一个页面

09:36.240 --> 09:39.160
就是我们刚刚大家看到的这个页面

09:39.160 --> 09:40.000
这个页面呢

09:40.000 --> 09:41.240
我们在这边

09:41.240 --> 09:42.880
我们不在页面做

09:42.880 --> 09:45.080
我们去到它的一个

09:45.080 --> 09:46.280
构造函数里面

09:46.280 --> 09:48.560
也就是生命周期的函数里面

09:48.560 --> 09:49.960
那么生命周期函数里面

09:49.960 --> 09:52.440
我们可以直接给它进行一个复职

09:52.440 --> 09:54.880
然后在当前页面再给它取职

09:54.880 --> 09:56.640
这样的格式来看一下

09:56.640 --> 09:59.200
首先我想拿这个值出来的话

09:59.200 --> 10:00.640
这边是global

10:00.640 --> 10:01.680
所以的话呢

10:01.680 --> 10:03.080
我们就可以第四

10:04.280 --> 10:07.920
当前的全局的global data

10:07.920 --> 10:08.560
然后呢

10:08.560 --> 10:10.840
它里面我们可以看到

10:10.840 --> 10:13.520
它直接返回给我的global对象

10:13.520 --> 10:15.880
所以我这边可以直接设定一个变量

10:15.880 --> 10:17.160
比如说

10:17.160 --> 10:18.040
UserInfo

10:19.800 --> 10:20.480
用户信息

10:22.040 --> 10:23.560
给它一个对象

10:23.560 --> 10:24.200
咱们就要做

10:26.360 --> 10:27.120
这样的存储

10:28.640 --> 10:28.920
好

10:28.920 --> 10:29.880
保存

10:29.880 --> 10:31.280
没问题

10:31.280 --> 10:32.640
页面刷新

10:32.640 --> 10:33.920
看有没有错误出现

10:34.680 --> 10:35.080
没有

10:36.520 --> 10:37.600
紧接着

10:37.600 --> 10:39.440
在同页面的同位置上面

10:39.440 --> 10:41.320
我把它显示出来

10:41.320 --> 10:42.360
刚存进去

10:42.360 --> 10:43.360
我们拿出来

10:43.360 --> 10:43.920
第四点

10:45.280 --> 10:47.520
global data.userinfo

10:48.480 --> 10:49.920
我们把它拿出来看一下

10:49.920 --> 10:51.000
是

10:51.000 --> 10:54.670
这个应该还要点练

10:54.670 --> 10:58.460
我们来看一下这个值是什么

10:58.460 --> 11:00.340
是不是它们出来了

11:00.340 --> 11:01.460
代表的是

11:01.460 --> 11:05.780
它的确完成了我们的这个注册挂载

11:05.780 --> 11:06.660
同时

11:06.660 --> 11:09.980
这个app.global也起到了作用

11:09.980 --> 11:13.900
然后我们通过现在的这个global对象

11:13.900 --> 11:17.220
完成了你现在里面的一个本地化的

11:17.220 --> 11:19.060
一个keyvalue的存储

11:19.060 --> 11:21.740
我们可以把key写在global的后面

11:21.740 --> 11:24.180
然后把value作为我们的对象也好

11:24.180 --> 11:25.900
作为我们的任何一个值

11:25.900 --> 11:27.740
放在等于的右边

11:27.740 --> 11:29.060
这样的话就存进去了

11:29.060 --> 11:31.700
那么在我们取的时候也是一样

11:31.700 --> 11:32.300
好

11:32.300 --> 11:34.100
那么我们现在

11:34.100 --> 11:36.620
在这边是取到了

11:36.620 --> 11:37.580
我们像

11:37.580 --> 11:40.260
如果是称之为叫全局辩量的话

11:40.260 --> 11:42.340
全局的一个存储的话

11:42.340 --> 11:44.500
应该是在当前页面

11:44.500 --> 11:47.180
我们做了一个简单的存储以后

11:47.180 --> 11:49.980
我们应该在其他页面上也能获得

11:49.980 --> 11:50.260
是吗

11:52.260 --> 11:53.660
那么我们就做了

11:53.660 --> 11:55.260
本来他就有第二个页面

11:55.260 --> 11:56.580
logs对不对

11:56.580 --> 11:58.220
那么我们的做法就是

11:58.220 --> 12:00.540
我们把这行代码

12:00.540 --> 12:01.500
我们放到

12:02.860 --> 12:05.340
第二个logs页面上去

12:05.340 --> 12:07.380
那么logs页面请注意了

12:07.380 --> 12:08.060
我们

12:08.060 --> 12:09.300
有时候同学说

12:09.300 --> 12:11.100
我logs页面中

12:11.100 --> 12:13.780
我能不能去放在我们所谓的

12:13.780 --> 12:15.460
a mountain的里面

12:15.460 --> 12:15.700
好

12:15.700 --> 12:16.500
你来看一下

12:17.580 --> 12:19.260
获取值的方式

12:19.260 --> 12:21.660
就是直接通过我们的

12:23.420 --> 12:24.900
这行代码得到

12:25.700 --> 12:25.940
好

12:27.020 --> 12:27.740
我们这样做

12:29.780 --> 12:32.920
把这个搬过来

12:32.920 --> 12:38.250
然后把这句话放进去

12:38.250 --> 12:39.610
页面跳过来以后

12:39.610 --> 12:42.010
看一下这个值是否会显示

12:42.010 --> 12:43.530
为了以示正式的进入

12:43.530 --> 12:44.370
万一没有的话

12:44.370 --> 12:48.140
正式进入我们这边写一个

12:48.140 --> 12:49.060
amounted

12:49.060 --> 12:49.540
对不对

12:49.540 --> 12:53.380
我们给一个自付串吧

12:53.380 --> 12:54.660
首先打开这页面

12:56.700 --> 12:57.620
一打开

12:57.620 --> 12:59.300
这值肯定存好了

12:59.300 --> 12:59.980
点击头像

13:00.980 --> 13:01.580
咱们看这

13:02.540 --> 13:03.260
有吗

13:03.260 --> 13:04.260
趟过来了

13:04.260 --> 13:05.060
趟能显示

13:05.060 --> 13:06.540
amounted出现了

13:06.540 --> 13:09.300
代表进入了这样的一个生命中期

13:09.300 --> 13:11.500
所以这里面我们是可以得到的

13:11.500 --> 13:12.300
对吧

13:12.300 --> 13:19.350
然后我们给它换一个位置

13:19.350 --> 13:22.350
看一下这里

13:22.350 --> 13:23.510
得到全局过程中

13:23.510 --> 13:25.390
是不是和我们的所谓的

13:25.390 --> 13:27.430
构造函数有关呢

13:27.430 --> 13:28.590
没有关系

13:28.590 --> 13:30.230
依然可以得到

13:30.230 --> 13:31.350
所以

13:31.350 --> 13:32.870
你别认为这是多嘴

13:32.870 --> 13:34.390
待会我会告诉你为什么

13:34.390 --> 13:37.270
因为刚待会的内容就有关了

13:37.270 --> 13:37.710
好

13:37.710 --> 13:38.670
你看到的是

13:38.670 --> 13:43.270
现在我们只需要在这边进行一个简单的设置

13:43.270 --> 13:46.630
我们在页面中就可以对它直接进行复制

13:46.630 --> 13:47.270
同时呢

13:47.270 --> 13:50.470
我们也能够在其他页面中直接获取

13:50.470 --> 13:53.950
那么这个是不是我们前面所谓的

13:53.950 --> 13:58.030
一种数据传递的方式之一

13:58.030 --> 14:00.830
是不是我们所谓的数据传递方式之一

14:00.830 --> 14:01.350
对吧

14:01.350 --> 14:06.030
我在当前的这个页面已经做了一个数据存储了

14:06.070 --> 14:08.390
存储在我们的global data中

14:08.390 --> 14:08.990
然后呢

14:08.990 --> 14:12.550
我们在这个订单里面或者称之为其他一个页面中

14:12.550 --> 14:14.630
我又能获取到你这个值

14:14.630 --> 14:15.630
那这样的话

14:15.630 --> 14:20.230
是不是这个在前一个页面的操作值就被传送过来了

14:20.230 --> 14:22.750
所以这种传送值的第一种方式

14:22.750 --> 14:25.070
是借助于我们的全局

14:25.070 --> 14:25.830
全局变量

14:25.830 --> 14:28.910
全局数据global data

14:28.910 --> 14:29.270
注意啊

14:29.270 --> 14:31.910
那么同学老师能放前面的话会怎么样

14:31.910 --> 14:33.110
你来看啊

14:33.110 --> 14:34.710
我把这句话直接放在前面

14:36.150 --> 14:36.710
或保存

14:38.830 --> 14:40.110
你来看一下

14:40.110 --> 14:40.710
他告诉你

14:40.710 --> 14:42.950
他会找不到这个global data的

14:44.030 --> 14:45.470
他会找不到这个的

14:45.470 --> 14:46.390
为什么

14:46.390 --> 14:47.830
因为get apps

14:47.830 --> 14:49.910
他本身不是属于mpview的

14:49.910 --> 14:56.630
他不能在你对象生成之前先获取或者感知到这是什么东西

14:56.630 --> 14:58.350
所以放后面

14:59.390 --> 14:59.870
看到了吗

15:01.030 --> 15:02.150
错了也没关系

15:02.150 --> 15:04.910
那因为提示本身就会告知你

15:04.950 --> 15:08.710
这是我们说到的全局数据存储的一个概念

15:08.710 --> 15:10.630
同理我们继续往下讲

15:10.630 --> 15:13.150
刚才我们讲到啊传直

15:13.150 --> 15:13.750
传直的话

15:13.750 --> 15:14.550
刚才说的这个

15:14.550 --> 15:16.070
不在这两个范围之内啊

15:16.070 --> 15:17.390
它是一个全局传直

15:17.390 --> 15:18.230
我再写一下吧

15:19.550 --> 15:20.190
全局

15:21.270 --> 15:24.090
变量

15:24.090 --> 15:26.790
传直

15:26.790 --> 15:27.390
对不对

15:27.390 --> 15:29.710
刚才说的其实是这种结构

15:29.710 --> 15:31.390
那么这边两个还没提到

15:31.390 --> 15:32.390
那么页面跳转

15:32.390 --> 15:33.830
我们再来说一下

15:33.830 --> 15:35.390
所谓的页面跳转

15:35.390 --> 15:36.790
其实就是一个页面

15:36.790 --> 15:38.750
到另一个页面的百度

15:38.750 --> 15:41.510
我们刚才其实系统给到我们的demo过程中

15:41.510 --> 15:42.790
点击这个图标

15:42.790 --> 15:44.510
就已经完成了一个页面跳转

15:45.990 --> 15:46.470
对吧

15:46.470 --> 15:47.310
那我们来看一下

15:47.310 --> 15:52.060
系统所给到我们的他做了什么事情

15:52.060 --> 15:53.500
回到index上面来

15:53.500 --> 15:54.020
然后呢

15:54.020 --> 15:55.740
首先我们看到

15:55.740 --> 15:58.380
这边他给了一个div

15:58.380 --> 15:59.740
div后面有个click

15:59.740 --> 16:02.620
有一个bound view tap

16:02.620 --> 16:04.900
有个bound view tap的事件往下找

16:05.860 --> 16:08.740
在他下面会有这个事件存在

16:08.740 --> 16:09.380
然后呢

16:09.380 --> 16:09.980
紧接着

16:09.980 --> 16:11.620
我们往下看一下

16:11.620 --> 16:12.820
这个事件里面

16:12.820 --> 16:14.500
我们这边用到了

16:14.500 --> 16:15.460
你看到吗

16:15.460 --> 16:18.180
用到了一个npview switch tab

16:18.180 --> 16:19.460
一个npview

16:19.460 --> 16:20.820
never get to

16:20.820 --> 16:22.220
两种模型

16:22.220 --> 16:23.300
那么你注意

16:23.300 --> 16:24.540
如果他问你的事

16:24.540 --> 16:25.940
看这边啊

16:25.940 --> 16:26.620
他问你的事

16:26.620 --> 16:29.020
你现在的这个平台

16:29.020 --> 16:31.700
npview的平台是不是微信

16:31.700 --> 16:32.740
如果是微信的话

16:32.740 --> 16:34.140
那你用这个跳

16:34.140 --> 16:35.060
如果不是的话

16:35.060 --> 16:36.300
你用这个

16:36.300 --> 16:37.340
那么这两个的

16:37.340 --> 16:39.540
这个东西的区别在哪里呢

16:39.540 --> 16:40.740
那么你注意一下

16:40.740 --> 16:43.300
switch tab和npview

16:43.300 --> 16:46.020
首先从微信本身的小程序上面

16:46.020 --> 16:48.260
我们就能区别出这两个名字

16:48.260 --> 16:50.060
就是你在跳转的时候

16:50.060 --> 16:51.860
你到底是真实的

16:51.860 --> 16:53.460
我们两个页面跳转

16:53.460 --> 16:55.660
还是这个

16:55.660 --> 16:57.140
所谓的切换

16:57.140 --> 16:59.980
这下面的tab2的切换跳转

16:59.980 --> 17:02.860
switch tab就是切换跳转

17:02.900 --> 17:04.140
而tab的话呢

17:04.140 --> 17:05.860
就是真实的进行跳转

17:05.860 --> 17:07.300
这两种方式

17:07.300 --> 17:07.940
ok

17:07.940 --> 17:09.260
那我们来看一下

17:09.260 --> 17:11.580
我们就拿这个值拿过来

17:11.580 --> 17:12.940
我们把它打开

17:12.940 --> 17:14.220
我们先看系统级的

17:15.540 --> 17:16.780
拿它吧

17:16.780 --> 17:19.950
拿它看一下

17:19.950 --> 17:21.510
看一下系统这边过来的

17:21.510 --> 17:23.550
这个npview platform

17:23.550 --> 17:27.300
它是一个什么值

17:27.300 --> 17:28.220
点上去

17:28.220 --> 17:29.500
wx看到吗

17:29.500 --> 17:31.540
它是一个wx

17:31.540 --> 17:34.500
那么这个值是哪里被设定的呢

17:34.500 --> 17:37.530
我们可以找一下

17:37.530 --> 17:38.530
你可以看一下

17:38.530 --> 17:41.850
它其实是在这个vendor里面

17:41.850 --> 17:44.930
它在这边判断这个wx的类型

17:44.930 --> 17:48.650
如果这类型不等于是end file为空的话

17:48.650 --> 17:51.650
那么就把这个类型付给我们的npview全局的

17:51.650 --> 17:53.090
并且针对于它

17:53.090 --> 17:55.330
我们给它一个字符告诉它

17:55.330 --> 17:58.850
这是一个微信的平台

17:58.850 --> 18:01.490
在我们的vendor.js里面

18:01.490 --> 18:02.010
ok

18:02.010 --> 18:03.610
这是它内部的一个操作了

18:03.610 --> 18:04.890
那么总之我们大家

18:04.890 --> 18:06.850
如果你不用去看细致的话

18:06.850 --> 18:08.170
你就理解一点

18:08.170 --> 18:10.250
就是我们整个这部分内容

18:10.250 --> 18:13.210
它只需要作为我们的一个

18:13.210 --> 18:15.050
内部的或者称之为

18:15.050 --> 18:16.210
它本身微信上面

18:16.210 --> 18:18.610
它就是一个wx结构

18:18.610 --> 18:21.050
然后你这边完成的是

18:21.050 --> 18:23.050
我们通过npview

18:23.050 --> 18:26.730
我们这边给出一个switch tab

18:26.730 --> 18:28.370
这边有两个跳转模型

18:28.370 --> 18:28.930
对吧

18:28.930 --> 18:29.890
那这个的话

18:29.890 --> 18:34.410
就直接可以完成我们的一个switch tab

18:34.530 --> 18:35.570
我们称之为

18:35.570 --> 18:37.690
底部触摸栏的调转

18:37.690 --> 18:41.170
而第二个是navigator2代表的是

18:41.170 --> 18:43.770
它是一个直接练紧的跳转

18:43.770 --> 18:46.650
那么咱们看

18:46.650 --> 18:47.530
npview1

18:49.330 --> 18:51.850
它可以点出很多

18:51.850 --> 18:53.250
像我们有些的话

18:53.250 --> 18:58.300
比如说

18:58.300 --> 18:59.300
像跳转模型

18:59.300 --> 19:01.060
我们这边其实都可以用的

19:01.060 --> 19:02.300
包括url啊

19:02.300 --> 19:04.060
包括是console啊

19:04.060 --> 19:05.420
那么都属于我们平时

19:05.420 --> 19:08.140
这边打的是console

19:08.140 --> 19:11.100
它其实也是我们的npview1的对象

19:13.220 --> 19:15.380
然后你打上switch tab

19:15.380 --> 19:16.500
直接给出这个来

19:16.500 --> 19:18.220
其实也可以

19:18.220 --> 19:20.460
就说明我们的跳转模型

19:20.460 --> 19:21.340
第一种方式

19:21.340 --> 19:23.580
我们直接可以使用npview的

19:23.580 --> 19:24.780
我们的switch tab

19:24.780 --> 19:26.460
或者是用我们的navigator2

19:26.460 --> 19:27.980
这样的结构来写

19:27.980 --> 19:28.540
注意

19:28.540 --> 19:32.940
我们里面要跟的是你现在的一个json对象

19:32.940 --> 19:35.220
然后完成json对象的url的格式

19:35.220 --> 19:37.220
这样的话就可以了

19:37.260 --> 19:40.580
这是我们说的第一种的跳转模型

19:40.580 --> 19:41.700
第二种模型呢

19:41.700 --> 19:44.980
我们可以借助于微信的方式来进行跳转

19:44.980 --> 19:46.500
当然这种跳转呢

19:46.500 --> 19:49.460
也可以用我们的原生结构

19:49.460 --> 19:51.980
两种模式相互相乘

19:51.980 --> 19:53.980
首先我们回到页面中

19:53.980 --> 19:55.540
页面中的话呢

19:55.540 --> 19:58.940
你的跳转你可以在这边单独去做一个

20:00.540 --> 20:02.900
我们说过的就是超链接

20:02.900 --> 20:05.860
你都可以直接写超链接

20:05.900 --> 20:07.580
你把它往后调

20:07.580 --> 20:08.580
后面的页面呢

20:08.580 --> 20:09.540
我们只有一个

20:09.540 --> 20:12.020
我们用系统测试页面来走

20:12.020 --> 20:13.060
系统测试页面呢

20:13.060 --> 20:14.580
这边我们做的是点

20:15.980 --> 20:17.620
从根目录下

20:17.620 --> 20:24.020
paders

20:24.020 --> 20:27.100
我们从当前位置出发吧

20:27.100 --> 20:28.100
当前位置的话

20:28.100 --> 20:31.340
我们往上走一级点点杠

20:31.340 --> 20:32.380
然后上面的话

20:33.820 --> 20:34.420
logs

20:36.180 --> 20:38.980
往上走一级点点杠logs下的man

20:45.370 --> 20:47.010
的跳转

20:47.010 --> 20:48.330
你写个A超链接

20:48.330 --> 20:52.260
我们来看一下

20:52.260 --> 20:53.620
跳转点击一下

20:56.550 --> 20:57.790
我们从过这来看

20:57.790 --> 20:59.670
你点击这样的一个

20:59.670 --> 21:01.430
寻到它的内容

21:01.430 --> 21:03.750
它的确转成了navigator

21:03.750 --> 21:05.870
而logs下面的man

21:05.870 --> 21:07.590
我们往这个页面进行跳转

21:07.590 --> 21:10.950
我们看一下它现在是否路径正确

21:10.950 --> 21:13.260
对吧

21:13.260 --> 21:16.100
它的上一层的logs的man

21:17.660 --> 21:19.580
到我这边写好以后的话

21:19.620 --> 21:20.700
我在页面中

21:20.700 --> 21:21.700
我去点它

21:22.900 --> 21:24.820
这边有一条叫click handle

21:24.820 --> 21:25.580
被触发了

21:25.580 --> 21:26.980
但它始终没有跳转

21:26.980 --> 21:28.100
是不是

21:28.100 --> 21:29.660
那么这里面有两个点

21:29.660 --> 21:31.540
我们需要解释一下

21:31.540 --> 21:32.700
第一个点

21:32.700 --> 21:35.260
就是A连接的跳转

21:35.260 --> 21:37.660
最后它会把它转换成什么

21:37.660 --> 21:39.300
我们刚才看到的

21:39.300 --> 21:39.980
navigator

21:41.780 --> 21:42.300
对吧

21:42.300 --> 21:44.460
我们会把它转换成navigator

21:44.460 --> 21:48.100
而navigator跳转是不可以跳我们的

21:48.100 --> 21:49.020
switch tab

21:50.260 --> 21:51.980
navigator是不可以跳switch tab的

21:53.100 --> 21:54.100
隐况是

21:54.100 --> 21:57.020
我们现在无法完成它的跳转

21:57.020 --> 21:58.740
当初你在做微信小程序的时候

21:58.740 --> 22:00.140
其实你也见过这个事

22:00.140 --> 22:01.060
navigator

22:01.060 --> 22:03.220
一旦现在你所跳转的这个页面

22:04.180 --> 22:05.620
你所跳转的这个页面

22:05.620 --> 22:08.380
已经被纳入到了我们的tab8里面

22:08.380 --> 22:10.580
你就无法用这个来跳转了

22:10.580 --> 22:10.940
理解吧

22:10.940 --> 22:11.820
这个

22:11.820 --> 22:14.740
那么你可以直接再新建一个页面

22:14.740 --> 22:15.380
来做跳转

22:16.260 --> 22:17.020
一个页面

22:17.020 --> 22:17.900
那我们来看一下

22:17.900 --> 22:21.580
我们新建一个

22:21.580 --> 22:22.740
我们在patres里面

22:22.740 --> 22:23.580
新建一个

22:24.780 --> 22:25.420
about

22:27.020 --> 22:28.540
然后在这里面

22:29.740 --> 22:30.900
缅点js

22:31.660 --> 22:34.380
然后同时生成一个index.ve

22:41.020 --> 22:41.300
好

22:41.300 --> 22:41.780
先放

22:42.940 --> 22:43.980
然后里面写上

22:43.980 --> 22:44.900
这是属于

22:45.900 --> 22:47.300
about下的

22:48.260 --> 22:48.860
index

22:50.500 --> 22:51.660
然后这边继续来

22:52.420 --> 22:53.220
我们写上

22:53.220 --> 22:58.820
这边我们把我们的结构写上

22:58.820 --> 22:59.380
return

22:59.380 --> 22:59.700
对吧

23:02.850 --> 23:03.770
然后这边呢

23:05.370 --> 23:06.050
message

23:08.810 --> 23:09.730
ok

23:09.730 --> 23:10.970
这是about index

23:12.170 --> 23:15.330
然后我们希望往这个页面进行挑战

23:15.330 --> 23:16.050
所以呢

23:16.050 --> 23:17.130
你在这上面

23:17.130 --> 23:18.170
我们就写上

23:18.170 --> 23:18.850
about

23:22.030 --> 23:22.990
about

23:22.990 --> 23:25.150
但是这不一定能够跳

23:25.150 --> 23:26.390
原因是

23:26.390 --> 23:27.510
我们的解析

23:27.510 --> 23:29.030
它是应该不会生成

23:29.030 --> 23:30.070
我们看到这里面

23:30.070 --> 23:30.910
我们点上去

23:31.950 --> 23:33.910
我们这里面是没有

23:33.910 --> 23:35.470
这个about

23:35.470 --> 23:36.710
这边我们能看到对吧

23:36.710 --> 23:38.950
它的解析直接会过来了

23:38.950 --> 23:41.270
我们about已经有这个页面了

23:41.270 --> 23:43.510
那我们现在来过一下啊

23:43.510 --> 23:44.190
咱们看

23:44.190 --> 23:46.150
他说about面没有啊

23:46.150 --> 23:47.710
原因很简单

23:47.710 --> 23:48.790
我们这边

23:50.430 --> 23:51.390
没复制呗

23:51.390 --> 23:51.990
我们把

23:52.670 --> 23:59.410
logs里面的这一套内容复制过来

23:59.410 --> 23:59.930
对吧

23:59.930 --> 24:01.130
然后我们这边呢

24:01.130 --> 24:04.170
直接看一下

24:04.170 --> 24:04.690
点一下

24:06.010 --> 24:07.610
about面没有发现

24:08.610 --> 24:11.050
我们要进行重新编译一下

24:11.770 --> 24:14.210
about面我们存出好了

24:14.210 --> 24:20.220
还是没有的原因就在于

24:20.220 --> 24:22.580
我们需要重新的让它操作一下

24:22.580 --> 24:24.140
因为现在的话呢

24:24.140 --> 24:26.380
它里面这个文件

24:26.380 --> 24:30.550
它说啊

24:31.550 --> 24:32.390
呃

24:32.390 --> 24:34.870
我们这边见了这边见了啊

24:34.870 --> 24:35.510
我们知道了

24:35.510 --> 24:37.070
我们的原因是在这

24:38.070 --> 24:39.790
我们这没有给他声明

24:39.790 --> 24:42.390
也就是说他在他的微信的

24:42.390 --> 24:43.910
那个app.json中

24:43.950 --> 24:45.270
没有看到这个文件

24:46.270 --> 24:47.830
所以我们写一下

24:47.830 --> 24:55.150
这边写上about面

24:55.150 --> 24:56.230
保存

24:56.230 --> 25:05.820
这时候你再来看

25:05.820 --> 25:08.550
点击

25:08.550 --> 25:10.110
是不是跳过来了

25:10.110 --> 25:11.590
所以讲的是啊

25:11.590 --> 25:13.110
这种页面的跳转

25:13.110 --> 25:15.310
他有几个旋击在这边

25:15.310 --> 25:16.910
如果说你点上去

25:16.910 --> 25:18.430
你的语法都对

25:18.430 --> 25:20.510
但是你无法跳转的话

25:20.510 --> 25:21.830
那么你要去注意一下

25:21.830 --> 25:23.390
你的跳转链接

25:23.390 --> 25:26.950
是否已经存在于我们下面的这个调做

25:26.950 --> 25:28.590
那个tab bar里面

25:28.590 --> 25:30.390
然后这个原因

25:30.390 --> 25:32.430
也就是系统为什么要去做

25:32.430 --> 25:34.470
我们刚才看到的那个区分

25:35.510 --> 25:37.470
系统为什么要去做区分

25:37.470 --> 25:38.990
如果系统不做区分的话

25:38.990 --> 25:41.670
本身来讲这两种跳转模式

25:41.670 --> 25:44.550
如果是在switch里面的

25:44.550 --> 25:46.670
你用我们的never get to 去跳转的话

25:46.670 --> 25:48.310
那肯定是不行的

25:48.310 --> 25:49.710
去跳转不到的

25:49.710 --> 25:50.750
这点大家是要理解

25:51.870 --> 25:52.830
同时呢

25:52.830 --> 25:54.310
我们讲到的是

25:54.310 --> 25:57.950
那你如果用一个alien接完成跳转的话

25:57.950 --> 26:00.550
那么这是一种静态跳转模型

26:00.550 --> 26:02.030
他本身来讲的话呢

26:02.030 --> 26:04.150
能够非常的简单

26:04.150 --> 26:05.990
就是类似于我们卫星中的

26:05.990 --> 26:06.590
never geter

26:07.910 --> 26:08.670
ok

26:08.670 --> 26:10.790
那么这是我们现在说的一种跳转

26:10.790 --> 26:12.310
当然你可不可以说

26:12.310 --> 26:16.140
老师我这边直接用never get

26:16.140 --> 26:24.380
你直接用

26:24.380 --> 26:25.780
never get里面是什么

26:25.780 --> 26:26.340
uile

26:28.100 --> 26:30.100
你把这个拿过来

26:30.100 --> 26:33.690
我写上

26:33.690 --> 26:34.130
跳转

26:35.330 --> 26:36.130
你觉得有问题吗

26:38.050 --> 26:38.730
不要去猜

26:40.610 --> 26:43.450
你想alien接最后在跳转的时候

26:43.450 --> 26:45.570
他也会转成never get

26:45.570 --> 26:46.810
那我现在这个never get

26:46.810 --> 26:48.210
就根本不让他转

26:48.210 --> 26:49.850
直接让他跳

26:49.850 --> 26:51.050
那么这会有什么问题呢

26:52.170 --> 26:53.810
肯定能够过去啊

26:53.810 --> 26:54.210
这个事儿

26:55.970 --> 26:56.970
你发现吗

26:56.970 --> 26:59.610
这两个的确出现了不同的点

26:59.610 --> 27:02.130
你刚才的逻辑发生了一个天赋地

27:02.130 --> 27:04.490
那个天婚电案的变化

27:04.490 --> 27:05.330
老师

27:05.330 --> 27:06.650
你再来看一下

27:06.650 --> 27:07.410
注意啊

27:07.410 --> 27:08.530
这是我们还来第二个坑

27:10.490 --> 27:13.610
前面第一个坑是他和他之间的

27:13.610 --> 27:14.850
第二是他之间的

27:16.410 --> 27:17.530
老师你来看

27:17.530 --> 27:19.770
他的确是一个never get

27:19.770 --> 27:21.210
那么他本身是never get

27:21.210 --> 27:22.530
他就能够跳转

27:22.530 --> 27:24.890
那么对他来讲的话呢

27:24.890 --> 27:26.770
他我们不是uile也设定好

27:26.770 --> 27:28.490
路径和他一样吧

27:28.490 --> 27:29.930
那么他能不能就跳转呢

27:29.930 --> 27:31.570
我们刚才看了

27:31.570 --> 27:33.130
点下去以后

27:33.130 --> 27:34.410
我们重新刷一下

27:38.870 --> 27:40.790
因为这里边有坑啊

27:40.790 --> 27:42.630
你点下去以后

27:42.630 --> 27:44.150
你会发现的是

27:44.150 --> 27:47.660
这一行被出发了

27:47.660 --> 27:48.420
但他没跳转

27:49.620 --> 27:51.220
当你点上面A的时候

27:51.220 --> 27:52.980
这行虽然被出发了

27:52.980 --> 27:53.860
但他跳转了

27:55.020 --> 27:55.700
ok

27:55.700 --> 27:57.020
那我讲一下啊

27:57.020 --> 27:59.500
首先这行代码在哪里

27:59.500 --> 28:01.580
他其实是这个

28:01.580 --> 28:03.820
叫做click handler

28:03.820 --> 28:08.620
在我们的method中有一些方法是作为事件处理方法

28:08.620 --> 28:10.340
就比如像上面这个

28:10.340 --> 28:13.180
只有你点击绑定以后才会出发

28:13.180 --> 28:14.940
那么有一些方法呢

28:14.940 --> 28:18.660
有一些是属于一个被动出发事件

28:18.660 --> 28:19.860
被动出发就是

28:19.860 --> 28:21.940
当这件事已经完成的时候

28:21.940 --> 28:24.020
他会和他没什么关系

28:24.020 --> 28:26.700
那么他会在这件事完成之后

28:26.700 --> 28:28.380
自动的运行一遍

28:28.380 --> 28:30.220
那这种我称之为叫被动出发

28:30.220 --> 28:32.740
因为在整个这事情过程中

28:32.740 --> 28:34.580
就像我A链接近跳转过程中

28:34.580 --> 28:37.940
压根我就没有去用到我现在的事件

28:37.940 --> 28:39.060
理解吧

28:39.060 --> 28:40.060
那么这样的话呢

28:40.060 --> 28:42.580
我现在做了一个简单的

28:42.580 --> 28:43.780
click handler

28:43.780 --> 28:47.100
就意味着凡是我所有的click操作

28:47.100 --> 28:49.460
我都会去激发这个handle

28:49.460 --> 28:51.500
咱们称之为巨饼的函数

28:53.140 --> 28:54.980
这是他的一个特点

28:54.980 --> 28:57.020
那么我们再来看一下

28:57.020 --> 28:58.580
那么这是第一个解释啊

28:58.580 --> 29:00.820
你点上去这边都能出发

29:00.820 --> 29:01.940
第二个的话呢

29:01.940 --> 29:03.500
你点A链接合点他

29:03.500 --> 29:04.700
我们仔细来看一下

29:04.700 --> 29:07.260
这两者有区别吗

29:07.260 --> 29:08.420
你看一下上下

29:09.620 --> 29:12.980
上面A链接他本身我们转换完以后的话

29:12.980 --> 29:15.140
他的url里面是带有的

29:15.140 --> 29:15.980
对吧

29:15.980 --> 29:20.400
那么你来看这边

29:20.400 --> 29:21.840
这个拉过曲链

29:23.640 --> 29:24.400
你来看这里

29:26.000 --> 29:28.880
这里我url的确是写了呀

29:28.880 --> 29:30.200
写了呀

29:30.200 --> 29:32.000
contrast我已经保存了呀

29:32.000 --> 29:33.360
我把这个字为了写

29:33.360 --> 29:34.720
表明我不是

29:34.720 --> 29:36.240
其他页面跳转1

29:36.240 --> 29:37.720
你来看一下

29:37.720 --> 29:39.560
这边是不是显示跳转1

29:39.560 --> 29:40.400
是不是跳转1

29:40.400 --> 29:41.640
是的

29:41.640 --> 29:43.920
然后这时候你把它拿上去

29:43.920 --> 29:46.400
你会发现他还是没有

29:46.400 --> 29:48.520
所以这点我们要说明一下

29:48.520 --> 29:49.440
就是说

29:49.440 --> 29:52.320
如果你现在在npve里面

29:52.320 --> 29:55.080
你用navigator来完成一个跳转的话

29:55.080 --> 29:56.200
特别是url的话

29:56.200 --> 30:00.120
那么这url是不能被进行转化的

30:00.120 --> 30:02.120
这个url是不能被进行转化的

30:02.120 --> 30:04.720
这点我们需要明确一下

30:04.720 --> 30:07.120
你觉得标签都可以通用的话呢

30:07.120 --> 30:07.960
那么你会发现

30:07.960 --> 30:10.400
刚才我们的演示势力里面就出来了

30:10.400 --> 30:11.560
alien接的话呢

30:11.560 --> 30:12.920
他会把它转成url

30:12.920 --> 30:15.600
href会转成我们的

30:15.600 --> 30:17.680
alien接会转成navigator

30:17.680 --> 30:21.560
href half会转成我们现在的url

30:21.560 --> 30:23.240
但是你的确写url的时候

30:23.240 --> 30:24.160
他就不会

30:24.160 --> 30:25.960
这又是第二个坑

30:25.960 --> 30:27.240
大家知道一下

30:27.240 --> 30:29.440
因为npve最大的特点就是

30:29.440 --> 30:30.760
它既有vue的余法

30:30.760 --> 30:32.920
又能使用微信小程序的东西

30:32.920 --> 30:34.320
所以在这个上面的话呢

30:34.320 --> 30:36.880
我们要特别的当心

30:36.920 --> 30:37.880
然后我们知道了

30:37.880 --> 30:40.160
原来这样就可以进行跳转

30:40.160 --> 30:40.720
然后呢

30:40.720 --> 30:42.200
我们再来做一个

30:42.200 --> 30:44.200
就是跳转的过程中

30:44.200 --> 30:45.880
如果说我这幅

30:45.880 --> 30:47.520
这个我们说不行了啊

30:47.520 --> 30:48.600
如果在这上面

30:48.600 --> 30:51.880
我们要让他进行带参传送的话

30:51.880 --> 30:53.560
那肯定我们可以这样了

30:53.560 --> 30:55.000
静态参数传递的话

30:55.000 --> 30:57.200
我们可以在这边传一个

30:57.200 --> 30:58.080
10

30:58.080 --> 30:59.960
然后去到我们的新页面

30:59.960 --> 31:00.800
新页面呢

31:00.800 --> 31:02.160
我们去取这个值

31:04.040 --> 31:05.600
然后叫新页面以后

31:05.600 --> 31:06.560
我们看一下啊

31:06.560 --> 31:07.840
新页面是About面

31:09.400 --> 31:10.920
在这个页面中哪儿取呢

31:12.320 --> 31:13.360
你要想象啊

31:13.360 --> 31:15.160
他传送过来的时候

31:15.160 --> 31:18.360
是作为我们的微信传送

31:18.360 --> 31:20.720
所以他应该是在onload里面

31:21.600 --> 31:21.960
对吧

31:21.960 --> 31:23.280
他应该是在这个里面

31:23.280 --> 31:24.560
我们把e写出来

31:24.560 --> 31:25.160
然后呢

31:25.160 --> 31:30.380
我们这边打印一下这个e

31:30.380 --> 31:36.140
我们来看一下效果

31:36.140 --> 31:37.340
上面点击以后

31:38.420 --> 31:39.620
他会带参传送

31:41.420 --> 31:42.260
带参传送

31:43.180 --> 31:44.260
然后的话呢

31:44.260 --> 31:45.260
到新页面以后

31:45.260 --> 31:46.780
我们可以去接收参数

31:48.660 --> 31:49.860
我们来看onload

31:50.860 --> 31:51.220
哎

31:51.220 --> 31:53.380
我们发现他数据没有传过来

31:53.380 --> 31:55.740
我们看一下他的问题在哪里呢

31:57.140 --> 32:00.420
那么可能我这个程序上有什么

32:00.420 --> 32:02.420
我一旦起名叫About

32:02.420 --> 32:04.740
他就会不解析

32:04.740 --> 32:06.980
我们改一个名字叫做Tester

32:06.980 --> 32:08.540
那么他就可以了

32:08.540 --> 32:11.380
我们来看一下整个页面的结构是这样的

32:11.380 --> 32:13.140
和回到刚才的界面上面

32:13.140 --> 32:14.620
我们在index上面呢

32:14.620 --> 32:15.980
我们做了一个链接

32:15.980 --> 32:17.500
是a超链接

32:17.500 --> 32:18.020
然后呢

32:18.020 --> 32:19.100
我们在这边呢

32:19.100 --> 32:21.580
我们用一个id等于10

32:21.580 --> 32:23.140
做一个直连

32:23.140 --> 32:25.780
也就是我们称之为的静态传递

32:25.780 --> 32:28.340
我们用了一个query stream的方式

32:28.340 --> 32:30.780
我们用了个query stream的方式

32:30.780 --> 32:32.820
查询自服穿的模型

32:32.820 --> 32:33.380
然后呢

32:33.380 --> 32:36.380
我们调整到新的页面以后

32:36.380 --> 32:37.620
在新页面中

32:37.660 --> 32:38.940
我们来看一下

32:38.940 --> 32:39.860
我这边呢

32:39.860 --> 32:43.900
我们在新页面是在我们的tester里面啊

32:43.900 --> 32:45.020
我们完成了两个

32:45.020 --> 32:46.820
一个是叫做unloader

32:46.820 --> 32:48.700
一个是mounted

32:48.700 --> 32:51.420
那么这两个都是可以拿e来接收参数

32:51.420 --> 32:54.700
我们看在哪个上面能够看到这个数值

32:54.700 --> 32:55.700
我们看一下

32:55.700 --> 32:57.580
当我现在进行跳转的时候

32:57.580 --> 32:59.300
你看这边的数据

32:59.300 --> 33:00.460
在unloader上面

33:00.460 --> 33:01.780
你能接到这个时

33:01.780 --> 33:03.180
那么在mounted上面

33:03.180 --> 33:04.540
你是接不到的

33:04.540 --> 33:06.700
所以我们讲解的是

33:06.700 --> 33:08.260
如果是微信小程序

33:08.260 --> 33:10.820
作为这种静态数据传直的话

33:10.820 --> 33:13.940
那么它只能在后级页面上面的unloader

33:13.940 --> 33:15.620
接收到这个数据

33:15.620 --> 33:16.300
ok

33:16.300 --> 33:17.820
是这个逻辑

33:17.820 --> 33:18.220
ok

33:18.220 --> 33:19.540
那我们啊

33:19.540 --> 33:20.740
再讲一下

33:20.740 --> 33:22.820
那么跳转模型上面的话呢

33:22.820 --> 33:24.020
这是属于静态的

33:24.020 --> 33:26.860
那么动态的有几种的两种模型

33:26.860 --> 33:30.940
第一种是我们的npview的自带的这样的一种格式

33:30.940 --> 33:32.300
那么第二种模型呢

33:32.300 --> 33:33.540
是我们微信的啊

33:33.540 --> 33:36.580
微信的模型也可以进行跳转

33:36.580 --> 33:39.340
比如说我们讲微信模型中啊

33:39.340 --> 33:41.140
大家说熟知的那种啊

33:41.140 --> 33:44.840
比如说我这边就用的是

33:44.840 --> 33:46.400
那比如说我用div

33:47.920 --> 33:53.540
div的话我们称之为叫微信调转

33:53.540 --> 33:55.180
然后我们写上什么

33:55.180 --> 33:58.300
click用这样的模式啊

33:58.300 --> 34:03.430
go to test

34:03.430 --> 34:11.750
然后把它写下来

34:11.750 --> 34:12.710
把go to test 写下来

34:12.710 --> 34:14.630
那么这里边我们就采取的是

34:15.750 --> 34:20.890
never

34:20.890 --> 34:23.570
never get to用这样的模型来走

34:25.290 --> 34:27.690
你里面应该写的是url

34:27.690 --> 34:34.250
然后跳转到你现在要的这个页面去

34:34.250 --> 34:38.130
页面上面我们可以在这边传植啊

34:38.130 --> 34:41.170
你可以在这边给出年等于

34:41.170 --> 34:43.650
那么此时你可以去给变量的

34:43.650 --> 34:45.930
此时你可以去给变量的啊

34:45.930 --> 34:48.570
这个变量你可以在这里面先定义的变量

34:48.570 --> 34:53.050
比如说或者你外部传进来这个植吧

34:53.090 --> 34:57.050
我们讲这边会有一个

34:57.050 --> 34:58.090
这边或者给id吧

34:59.530 --> 35:03.370
这边就拿的是我们称为go to id

35:06.120 --> 35:07.920
拿到这边两方杖

35:07.920 --> 35:09.760
那么传这个操作的时候

35:09.760 --> 35:12.760
我们这边就能够传这个植进来

35:12.760 --> 35:13.600
比如说是

35:15.080 --> 35:15.640
对吧

35:15.640 --> 35:16.920
这样传进来

35:16.920 --> 35:17.880
那我们来看一下

35:17.880 --> 35:23.900
我用这样的方式进行调转

35:23.900 --> 35:24.700
点击上面

35:26.660 --> 35:30.500
我们这个看一下啊

35:30.540 --> 35:31.620
按道的是这边

35:31.620 --> 35:33.300
我们刚才是做了一个大写

35:34.180 --> 35:36.500
现在我们把它做成小写

35:36.500 --> 35:37.060
然后呢

35:37.060 --> 35:38.420
这个是不能跳的

35:38.420 --> 35:40.060
因为这个我们讲过

35:40.060 --> 35:41.980
你要用switch tab 来跳

35:41.980 --> 35:44.620
因为它是属于下面tabba所有的

35:44.620 --> 35:46.500
所以我们切成text

35:47.580 --> 35:48.740
然后后面跟上id

35:48.740 --> 35:49.420
我们id呢

35:49.420 --> 35:51.340
也是区别之前我们传了10了

35:51.340 --> 35:52.940
这次我们传一个100

35:52.940 --> 35:54.340
并且名称我们改一下

35:54.340 --> 35:55.140
咱们不叫id

35:55.140 --> 35:57.140
咱们叫新闻id好吧

35:57.140 --> 35:58.700
这样的方式

35:58.700 --> 35:59.660
然后我们来看一下

35:59.660 --> 36:01.180
页面的方式啊

36:01.180 --> 36:02.900
微信调转点击一下

36:02.900 --> 36:03.980
本身键头出现

36:03.980 --> 36:04.820
调转过来

36:04.820 --> 36:07.020
依然在我们的onload中

36:07.020 --> 36:07.980
有一个news id

36:07.980 --> 36:09.740
为100获取到了

36:09.740 --> 36:10.900
所以这个方式呢

36:10.900 --> 36:12.380
也可以啊

36:12.380 --> 36:14.620
这种是属于微信的调转

36:14.620 --> 36:15.260
这个呢

36:15.260 --> 36:16.220
是我们在拿

36:16.220 --> 36:16.980
我们说老师呢

36:16.980 --> 36:21.980
你再切换一个

36:21.980 --> 36:34.980
你来npvue.negget2

36:34.980 --> 36:41.540
然后我们把这个给它放进去

36:41.540 --> 36:42.540
最好的方式是

36:42.540 --> 36:44.220
我们在前面

36:44.220 --> 36:56.340
做一个url

36:56.340 --> 37:00.480
把它放进去

37:00.480 --> 37:00.720
好

37:00.720 --> 37:05.050
你来看一下

37:05.050 --> 37:06.290
也可以调对吧

37:06.290 --> 37:07.410
所以这种的话呢

37:07.410 --> 37:09.490
我们称之为动态调转

37:09.490 --> 37:12.210
动态跳转的特点是在于往地址栏

37:12.210 --> 37:13.370
后面拼接的时候

37:13.370 --> 37:15.570
是比较容易一点

37:15.570 --> 37:16.850
但你的页面中的话呢

37:16.850 --> 37:19.530
你呈现出的其实是一个按钮

37:19.530 --> 37:20.530
ok吧

37:20.530 --> 37:21.050
好

37:21.050 --> 37:22.330
那么这种情况呢

37:22.330 --> 37:24.050
我们说也可以了

37:24.050 --> 37:25.090
还有一种

37:25.090 --> 37:26.930
就是我们如果说

37:26.930 --> 37:28.530
这边这个值

37:28.530 --> 37:30.450
你这次你看着啊

37:30.450 --> 37:37.740
我们想变成这样

37:37.740 --> 37:40.460
这个是100

37:40.460 --> 37:42.300
这个是101

37:42.300 --> 37:44.500
这是102

37:44.500 --> 37:46.780
它有各自的值载

37:46.780 --> 37:48.140
我们有三个按钮

37:48.140 --> 37:49.700
长相基本上一模一样

37:49.700 --> 37:50.860
我们跳他的时候

37:50.860 --> 37:52.580
他传了100过去

37:52.580 --> 37:53.420
跳他的时候

37:53.420 --> 37:55.140
他传200

37:55.140 --> 37:57.100
那个那个101过去

37:57.100 --> 37:58.220
那么你注意了

37:58.220 --> 37:59.940
像这种结构上面的话

37:59.940 --> 38:01.700
我们一定会考虑的是

38:01.700 --> 38:02.820
我们的渲染列表

38:02.820 --> 38:04.340
也就是循环概念

38:04.340 --> 38:05.460
但是问题是

38:05.460 --> 38:07.140
你怎么去写循环

38:07.140 --> 38:09.140
你在这个环节中是没有办法

38:09.140 --> 38:11.060
在这里面去写一个变量

38:11.060 --> 38:13.060
你用这样的方式去定变

38:13.060 --> 38:14.740
你肯定不行

38:14.740 --> 38:16.060
你写上是id

38:16.060 --> 38:18.060
因为我们的vue

38:18.060 --> 38:19.460
他不认这样一个编辑

38:19.460 --> 38:20.820
不认这个

38:20.820 --> 38:22.180
那么你去怎么样

38:22.180 --> 38:24.500
你在这上面再去打这个

38:24.500 --> 38:25.820
那也不对

38:25.820 --> 38:27.060
所以这种

38:27.060 --> 38:29.380
如果说作为动态传指的话

38:29.380 --> 38:31.460
他有一些特点

38:31.460 --> 38:34.380
动态传指进行微信

38:34.380 --> 38:38.620
或者说内部进行组合式的跳转的话

38:38.620 --> 38:42.780
他需要的是你微信和你现在的div

38:42.780 --> 38:44.020
进行结合

38:44.020 --> 38:46.300
他需要你进行结合式的跳转

38:46.300 --> 38:47.340
什么意思呢

38:47.340 --> 38:52.090
就是我们这个地方不传指

38:52.090 --> 38:54.610
这里我们不传指

38:54.610 --> 38:56.690
我们传指的方式像微信一样

38:56.690 --> 38:58.570
我们用data方式传指

38:58.570 --> 39:00.890
这个名称我们遗然起乘

39:00.890 --> 39:03.840
news id

39:03.840 --> 39:05.040
这个位置上

39:05.040 --> 39:07.080
我们如果直接给辨量的话

39:07.080 --> 39:08.000
他是可以的

39:08.000 --> 39:08.720
对吧

39:08.720 --> 39:11.240
我们写上的是news id

39:12.480 --> 39:15.280
然后我们前面给出一个

39:16.120 --> 39:19.240
帽号把news id我定义到data中来

39:21.080 --> 39:23.000
咱们定义是1001

39:23.000 --> 39:23.440
好吧

39:23.440 --> 39:25.880
我们给一个1000位的一个数值

39:25.880 --> 39:28.000
千位置1001

39:28.000 --> 39:29.400
然后给好以后的话

39:29.400 --> 39:31.280
我们到这个位置

39:31.280 --> 39:33.600
也就是那个go to test

39:33.640 --> 39:35.640
他要跳转的那个位置来

39:36.440 --> 39:36.600
好

39:36.600 --> 39:37.400
我们来看啊

39:37.400 --> 39:38.880
我们go to test的里面

39:38.880 --> 39:40.520
由于你前面已经给了

39:40.520 --> 39:42.360
我们找找到这儿

39:42.360 --> 39:43.640
我们来看一下

39:43.640 --> 39:52.820
这个值是否可以被拿到

39:52.820 --> 39:54.140
go to id

39:54.140 --> 40:01.440
我们先不跳

40:01.440 --> 40:02.160
你来看一下

40:02.160 --> 40:03.880
这个值是否可以被拿到

40:03.880 --> 40:07.800
点击上面

40:07.800 --> 40:09.120
这个是下面的啊

40:09.120 --> 40:09.960
我们来看

40:09.960 --> 40:12.680
这个值我们应该把它写的更清晰一点

40:14.280 --> 40:16.440
不然我们不上哪个啊

40:16.440 --> 40:21.600
这个是go to test

40:21.600 --> 40:22.920
当你现在点下去以后

40:22.920 --> 40:25.360
go to test里面现在显示无止

40:25.360 --> 40:26.240
为什么呢

40:26.240 --> 40:31.640
那么这是属于两者并发所操作过程中的一个结构

40:31.640 --> 40:33.440
一个结构一个结构问题

40:33.440 --> 40:35.240
这个结构是这样的

40:35.240 --> 40:39.360
如果说我们现在需要去获取这个值的时候

40:39.360 --> 40:42.480
特别特别是在我们对于他的变量的

40:42.480 --> 40:43.960
函数方法的调动的时候

40:45.080 --> 40:47.920
这个扩号打与不打

40:47.920 --> 40:50.680
在没有后面delta news id的情况下

40:50.680 --> 40:51.400
无所谓

40:52.720 --> 40:56.000
但是如果说你后面有一个属性传指的话

40:56.000 --> 40:58.720
你注意这个扩号是不能打的

40:59.920 --> 41:00.960
打了以后的话

41:00.960 --> 41:04.960
他会忽略后面的属性直接以扩号传指来考虑

41:04.960 --> 41:06.800
像我现在如果不打的话

41:06.800 --> 41:08.280
我们点击第一个按钮

41:08.280 --> 41:08.760
你来看

41:09.720 --> 41:12.720
点击以后他后面就会传直进来了

41:12.720 --> 41:14.080
然后我们打开以后

41:14.080 --> 41:17.160
在这个current id后面是不是有这个值

41:17.160 --> 41:19.160
news id 1001能传进来

41:20.160 --> 41:23.040
因为我们看到这边后面的news id是写着

41:23.040 --> 41:25.120
这边写了个news id的大写的i

41:25.120 --> 41:27.440
然后这边是1001的传指

41:27.440 --> 41:29.600
但如果你把这扩号打上去的话

41:29.600 --> 41:31.640
你这边随便写一个1002

41:32.800 --> 41:37.260
你会看到的效果就完全不一样了

41:37.260 --> 41:38.260
对吧

41:38.260 --> 41:43.660
他会先按照你扩号类的东西完成你这个所谓的go to id

41:43.660 --> 41:46.300
因为这边只有一个变量来接受

41:46.300 --> 41:47.700
但如果说你没有扩号

41:47.700 --> 41:51.020
他会接受你整个属性里面所传输过来的一种

41:51.020 --> 41:52.780
所以这点需要你理解

41:52.780 --> 41:54.660
就让你知道

41:54.660 --> 41:55.660
跳转的过程中

41:55.660 --> 41:59.380
你用微信的这种跳转方式来解决这个问题

41:59.380 --> 42:00.380
同样的

42:00.380 --> 42:01.860
如果你现在发觉的是

42:01.860 --> 42:03.980
你还是有一点困惑的话

42:03.980 --> 42:06.300
我们把它进行了总结一

42:06.300 --> 42:08.620
这边的跳转里面有好几个坑

42:08.620 --> 42:11.180
希望大家在这堂课结束以后

42:11.180 --> 42:13.020
多少能够

42:13.020 --> 42:14.380
不能说完全跳吧

42:14.380 --> 42:15.220
不能说避过吧

42:15.220 --> 42:17.420
至少来说全部能看到

42:18.100 --> 42:19.820
你如果用navigate来跳转的话

42:19.820 --> 42:22.500
这个方式至少现在看起来是不行的

42:22.500 --> 42:23.780
但是你用alien接是可以

42:23.780 --> 42:25.740
但是跳传辑的话

42:25.740 --> 42:28.660
你在后面alien接只能做静态传辑

42:28.660 --> 42:32.100
如果你现在要做完整的一个动态跳转的话

42:32.100 --> 42:35.420
你可以用一个div的click单击事件触发

42:35.420 --> 42:36.620
在触发以后的话

42:36.620 --> 42:40.220
你能看到有两种触发模式或者成为跳转模式

42:40.220 --> 42:43.420
第一种的话是以我们的mpview的方式switch tab

42:43.420 --> 42:45.660
或者navigate2的方式进行跳转

42:45.700 --> 42:46.780
而第二种方式呢

42:46.780 --> 42:50.260
就是属于我们直接用我们的微信的方式

42:50.260 --> 42:51.180
微信的方式呢

42:51.180 --> 42:54.180
就是我们直接在里面去书写我们的

42:54.180 --> 42:57.550
在我们的

42:57.550 --> 42:58.550
这儿

42:58.550 --> 43:01.710
在我们的微信navigate2的方式进行跳转

43:01.710 --> 43:02.710
那么这种跳转呢

43:02.710 --> 43:04.950
好处是在于我后面可以拼接

43:04.950 --> 43:07.870
我们可以做一个拼接自服串的处理

43:07.870 --> 43:09.430
那么这种拼接模型呢

43:09.430 --> 43:10.590
我们完完全全

43:10.590 --> 43:12.830
你也可以使用这样的结构去拼接

43:12.830 --> 43:13.750
OK

43:13.750 --> 43:16.710
我们可以把你现在传辑进来的值

43:16.710 --> 43:20.350
作为你现在的一个新闻编号进行传辑过去

43:20.350 --> 43:21.150
第二的话呢

43:21.150 --> 43:23.150
我们还可以的方式是

43:23.150 --> 43:23.750
注意

43:23.750 --> 43:26.710
如果你现在完成了一个我们的data

43:26.710 --> 43:27.150
gum

43:27.150 --> 43:29.550
也就是微信里面这种写法的话

43:29.550 --> 43:31.910
那么我们前面的这个click

43:31.910 --> 43:34.510
你是不能去带上我们的小过号的啊

43:34.510 --> 43:37.110
这里我们刚才是已经验证过了

43:37.110 --> 43:37.750
OK

43:37.750 --> 43:38.750
那么这样的话呢

43:38.750 --> 43:40.710
我们把它几个跳转模型

43:40.710 --> 43:41.670
那么传直

43:41.670 --> 43:43.630
你可以从这个页面这样传

43:43.630 --> 43:45.030
包括我们前面所谓的

43:45.030 --> 43:46.310
就是那个global

43:46.310 --> 43:47.910
那个global data

43:47.910 --> 43:50.230
他也可以从某种意义上来讲

43:50.230 --> 43:51.350
不单是存储

43:51.350 --> 43:53.510
也可以进行数据传递

43:53.510 --> 43:54.030
好了

43:54.030 --> 43:54.910
那么这样的话呢

43:54.910 --> 43:58.230
就满足了我们现在大家所看到的

43:58.230 --> 43:58.990
1

43:58.990 --> 44:00.230
我可以全聚存储

44:00.230 --> 44:02.550
我也可以做全聚存储数据传递

44:02.550 --> 44:04.230
我可以做静态数据传递

44:04.230 --> 44:07.310
我也可以做微信的数据传递方式

44:07.310 --> 44:08.550
这两种方式都可以

44:08.550 --> 44:10.110
我可以进行

44:10.110 --> 44:12.870
这种是可以进行循环的数据传递方式

44:12.870 --> 44:13.990
那么他主要的呢

44:14.030 --> 44:15.190
是我们的微信

44:15.190 --> 44:18.390
和我们现在你所看到的

44:18.390 --> 44:20.950
就是Click的MView的写法

44:20.950 --> 44:22.670
组合混合使用

44:22.670 --> 44:24.070
这样都行

44:24.070 --> 44:24.710
17

44:24.710 --> 44:26.670
我们能够把我们所需要内容

44:26.670 --> 44:29.270
无论是在宣传列表

44:29.270 --> 44:31.510
还是在我们的静态页面

44:31.510 --> 44:34.830
还是在我们的MPView的

44:34.830 --> 44:36.750
单击实践Click里面

44:36.750 --> 44:38.750
都可以进行数据传递

44:38.750 --> 44:40.710
和我们页面调整

44:40.710 --> 44:41.270
好吧

44:41.270 --> 44:41.710
好

44:41.710 --> 44:42.350
那么这些呢

44:42.350 --> 44:43.030
需要大家呢

44:43.030 --> 44:44.590
再去认真的去看一下

44:44.590 --> 44:45.470
我们这些课呢

44:45.470 --> 44:46.230
那就先到这了

