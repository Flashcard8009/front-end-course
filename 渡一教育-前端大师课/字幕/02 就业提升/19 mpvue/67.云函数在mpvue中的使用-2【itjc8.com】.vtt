WEBVTT

00:00.050 --> 00:04.050
好 我们继续讲解我们的在npview中

00:04.050 --> 00:07.050
怎么运行我们的云含数的操作

00:07.050 --> 00:09.050
那么云含数呢 在之前呢

00:09.050 --> 00:12.050
我们已经讲到了我们的一个OpenID的获取

00:12.050 --> 00:14.050
那么这些课呢 我们讲解一下

00:14.050 --> 00:17.050
我们如果做一个数据库的更新

00:17.050 --> 00:20.050
那么这应该去做一个多值更新的操作

00:20.050 --> 00:24.050
那么首先我们看一下官方的文档

00:24.050 --> 00:26.050
官方文档在这边呢 他说了一个

00:26.050 --> 00:29.050
如果说你需要多数据更新的话

00:29.050 --> 00:31.050
你需要到云端操作

00:31.050 --> 00:34.050
那么在云端中呢 在5WI语剧后面

00:34.050 --> 00:36.050
同样使用Update命令就可以了

00:36.050 --> 00:38.050
你比如你看他这边操作啊

00:38.050 --> 00:40.050
前面很简单 调用SDK

00:40.050 --> 00:42.050
然后database 然后的话

00:42.050 --> 00:44.050
commander 再其实用了一个下杠

00:44.050 --> 00:46.050
我们其实可以不用这个

00:46.050 --> 00:48.050
我们直接更新就可以

00:48.050 --> 00:49.050
然后呢

00:49.050 --> 00:52.050
announce 这是他的主含数入口程序

00:52.050 --> 00:54.050
里边呢 注意这个await

00:54.050 --> 00:57.050
倒而解释一下 先看后面

00:57.050 --> 01:00.050
db.glection

01:00.050 --> 01:02.050
给出我们的数据库名

01:02.050 --> 01:04.050
为了你要更新的条件

01:04.050 --> 01:06.050
update 进行更新

01:06.050 --> 01:08.050
然后呢 更新的内容是

01:08.050 --> 01:10.050
把这个进行一个所谓的

01:10.050 --> 01:13.050
增加10%的一个操作

01:13.050 --> 01:16.050
然后呢 做一个trycatch包含

01:16.050 --> 01:17.050
那么这边呢 注意一下

01:17.050 --> 01:19.050
首先 介绍几个东西

01:19.050 --> 01:21.050
d trycatch

01:21.050 --> 01:24.050
如果之前学过我们的一部处理

01:24.050 --> 01:26.050
一部一长的一个处理的话

01:26.050 --> 01:28.050
叫做一长处理程序

01:28.050 --> 01:30.050
那你就会非常简单了解

01:30.050 --> 01:31.050
什么叫做trycatch

01:31.050 --> 01:33.050
trycatch 是指

01:33.050 --> 01:36.050
我们一旦有发生任何异常操作

01:36.050 --> 01:38.050
或者说错误情况的话

01:38.050 --> 01:41.050
我们只需要把它包含在try里面

01:41.050 --> 01:43.050
它会自动进行补货

01:43.050 --> 01:46.050
补货的内容会在catch中进行呈现

01:46.050 --> 01:50.050
这个e 其实就是补货的事件的对象

01:50.050 --> 01:51.050
我们可以在这里面

01:51.050 --> 01:54.050
返回你的事件对象到底是错在哪里

01:54.050 --> 01:57.050
而不会直接抱错给用户

01:57.050 --> 02:00.050
这是属于trycatch所给到的一个操作

02:00.050 --> 02:02.050
第二呢 我们这边有个return

02:02.050 --> 02:04.050
return我们强调过

02:04.050 --> 02:05.050
在云端的操作

02:05.050 --> 02:08.050
我们都是以return的方式进行返回

02:08.050 --> 02:10.050
那么这边有一个await

02:10.050 --> 02:12.050
await是什么

02:12.050 --> 02:13.050
从我们的解释来说

02:13.050 --> 02:15.050
它叫做等待 对吧

02:15.050 --> 02:18.050
那么它是一个什么样的概念

02:18.050 --> 02:19.050
主要的是在于

02:19.050 --> 02:21.050
我们在云端

02:21.050 --> 02:24.050
实现了所谓的异部操作

02:24.050 --> 02:26.050
云端的异部操作

02:26.050 --> 02:28.050
那么我们输想一下

02:28.050 --> 02:29.050
我们本地

02:29.050 --> 02:30.050
也就是我们的微信小程序

02:30.050 --> 02:32.050
调取云端以后

02:32.050 --> 02:34.050
在云端如果说

02:34.050 --> 02:37.050
你的数据也存在着异部格式的话

02:37.050 --> 02:39.050
因为本地调取就是异部

02:39.050 --> 02:41.050
而云端再起异部的话

02:41.050 --> 02:43.050
那么云端的数据返回的时间

02:43.050 --> 02:44.050
和本地的时间

02:44.050 --> 02:46.050
它是不一致的

02:46.050 --> 02:47.050
对吧 你想一下

02:47.050 --> 02:50.050
我本地去换起这个云端的操作

02:50.050 --> 02:51.050
比如说

02:51.050 --> 02:55.050
我想让云端返回给我一个外部连接

02:55.050 --> 02:56.050
外部的话

02:56.050 --> 02:58.050
它需要有一个异部的

02:58.050 --> 03:00.050
比如说任何的

03:00.050 --> 03:01.050
无论是success

03:01.050 --> 03:02.050
success

03:02.050 --> 03:04.050
or then的这样的操作

03:04.050 --> 03:06.050
那么它都需要花等待时间

03:06.050 --> 03:07.050
它需要等待时间

03:07.050 --> 03:08.050
那么这种等待时间

03:08.050 --> 03:10.050
我们云端如果没有停止

03:10.050 --> 03:12.050
它直接回给你客户端

03:12.050 --> 03:14.050
比如说是个空

03:14.050 --> 03:15.050
那你客户端一定会

03:15.050 --> 03:17.050
以一个错误方式进行处理

03:17.050 --> 03:18.050
那么所以

03:18.050 --> 03:21.050
为了让我们云端实现这个功能

03:21.050 --> 03:23.050
说的是await

03:23.050 --> 03:25.050
它是让我们能够很简单的完成

03:25.050 --> 03:29.050
在服务器端的一个等待

03:29.050 --> 03:31.050
让它进行同步出去处理

03:32.050 --> 03:35.050
我们首先在它的

03:35.050 --> 03:38.050
我们首先我们就在做一个按钮

03:38.050 --> 03:40.050
点击按钮以后

03:40.050 --> 03:43.050
触发服务器端的一个事件

03:43.050 --> 03:45.050
我把所有的

03:45.050 --> 03:48.050
数据库3里面的表的数据

03:48.050 --> 03:50.050
明年都改一下

03:50.050 --> 03:52.050
我们做一个同步修改

03:52.050 --> 03:56.620
多数据的

03:56.620 --> 03:58.620
修改

03:58.620 --> 04:07.500
云函数

04:07.500 --> 04:08.500
click

04:08.500 --> 04:11.700
update

04:11.700 --> 04:12.700
order

04:12.700 --> 04:27.470
多数据的修改

04:27.470 --> 04:31.850
要到云端去书写这样一个函数

04:31.850 --> 04:33.850
我们到云端

04:33.850 --> 04:35.850
那么我们就直接借用

04:35.850 --> 04:37.850
我们刚才前面做过的那个

04:37.850 --> 04:39.850
在获得个个人数据的这个上面

04:39.850 --> 04:41.850
我们把它给注释掉

04:41.850 --> 04:43.850
然后我们来写

04:43.850 --> 04:45.850
我们现在的这个结构

04:45.850 --> 04:47.850
我们整个这个的话

04:47.850 --> 04:49.850
我们从return

04:49.850 --> 04:51.850
包括是这一块

04:51.850 --> 04:53.850
我们也都可以注释掉

04:53.850 --> 04:55.850
从这开始

04:55.850 --> 04:57.850
我们注释一下

04:57.850 --> 04:59.850
我们到这

04:59.850 --> 05:03.540
这是系统自动生成的

05:03.540 --> 05:05.540
所以我们这边的话

05:05.540 --> 05:07.540
都可以注释一下

05:07.540 --> 05:09.540
所以我们这边的话

05:09.540 --> 05:11.540
都可以之后大家生成以后

05:11.540 --> 05:13.540
都会看到这个数据

05:13.540 --> 05:15.540
然后我们在这边

05:15.540 --> 05:17.540
完成这个编写

05:17.540 --> 05:19.540
首先我们去做的是return

05:19.540 --> 05:28.520
await

05:28.520 --> 05:30.520
collection

05:30.520 --> 05:32.520
做dbcollection

05:32.520 --> 05:36.020
先写上数据库3

05:36.020 --> 05:38.020
那么db的话

05:38.020 --> 05:41.660
我需要在外部对它进行一个定义

05:41.660 --> 05:43.660
conster

05:43.660 --> 05:45.660
db

05:45.660 --> 05:47.660
db

05:47.660 --> 05:54.550
然后我们这时候

05:54.550 --> 05:56.550
我们对于它来讲

05:56.550 --> 05:58.550
我们需要的是update

05:58.550 --> 06:00.550
它需要有一个update

06:00.550 --> 06:02.550
更新

06:02.550 --> 06:04.550
如果你需要ware的话

06:04.550 --> 06:06.550
你可以加上ware

06:06.550 --> 06:08.550
我现在是所有更新

06:08.550 --> 06:10.550
所以我直接写上去

06:10.550 --> 06:14.250
我们打什么呢

06:14.250 --> 06:16.250
打data

06:16.250 --> 06:18.250
数据

06:18.250 --> 06:23.380
我把所有的念都改成的是

06:23.380 --> 06:25.380
所有都改一下

06:25.380 --> 06:27.380
我们做一个简单的实例

06:27.380 --> 06:29.380
然后一旦你这边改了以后的话

06:29.380 --> 06:31.380
那么我们下面

06:31.380 --> 06:33.380
就可以做一个dan

06:33.380 --> 06:35.380
res

06:35.380 --> 06:39.080
这个是在云端的

06:39.080 --> 06:46.040
输出

06:46.040 --> 06:52.100
我们就写一个catch

06:52.100 --> 06:55.420
error

06:55.420 --> 06:57.420
看到吗

06:57.420 --> 06:59.420
我们写上这样一个

06:59.420 --> 07:01.420
它是一个return

07:01.420 --> 07:03.420
await

07:03.420 --> 07:05.420
所以我们在上面

07:05.420 --> 07:07.420
我们申请了database

07:07.420 --> 07:09.420
那么database代表云端的

07:09.420 --> 07:11.420
一个数据操作

07:11.420 --> 07:13.420
对象

07:13.420 --> 07:15.420
然后我们利用它的update来更新数据

07:15.420 --> 07:17.420
update里面我们说

07:17.420 --> 07:19.420
我要更新所有的数据

07:19.420 --> 07:21.420
所以我们这边

07:21.420 --> 07:23.420
如果你要的话

07:23.420 --> 07:25.420
你这边可以写ware

07:25.420 --> 07:27.420
更新哪几条

07:27.420 --> 07:29.420
那么我们现在就更新所有的

07:29.420 --> 07:31.420
所以我这边写上data

07:31.420 --> 07:33.420
扣了log

07:33.420 --> 07:35.420
然后再写上我们的

07:35.420 --> 07:37.420
一旦有错以后的catch

07:37.420 --> 07:40.860
下面注释掉了

07:40.860 --> 07:44.300
我们把这个代码再一次的

07:44.300 --> 07:47.740
我们进行

07:47.740 --> 07:49.740
右键

07:49.740 --> 07:56.920
上传文件

07:56.920 --> 07:58.920
这个sdk我们就不传了

07:58.920 --> 08:00.920
上传云函数在

08:00.920 --> 08:02.920
同样云安端

08:02.920 --> 08:04.920
更新

08:04.920 --> 08:06.920
全线

08:06.920 --> 08:08.920
那么当这两部做好以后的话

08:08.920 --> 08:10.920
整个代码

08:10.920 --> 08:12.920
已经在云端了

08:12.920 --> 08:17.700
那我需要本地的调用

08:17.700 --> 08:19.700
本地调用云端的这个方法

08:19.700 --> 08:21.700
然后让它去实现

08:21.700 --> 08:23.700
我们现在的这个

08:23.700 --> 08:25.700
操作

08:25.700 --> 08:27.700
所以我们直接把它给拿过来

08:27.700 --> 08:29.700
只不过把下面的这个给删掉

08:29.700 --> 08:33.590
云端调用

08:33.590 --> 08:35.590
好我们来看一下

08:35.590 --> 08:37.590
点击按钮以后

08:37.590 --> 08:39.590
它竟然出发uos info

08:39.590 --> 08:41.590
然后uos info里面

08:41.590 --> 08:43.590
就是数据

08:43.590 --> 08:45.590
我们打开微信小程序

08:45.590 --> 08:47.590
先看一下云端的数据

08:47.590 --> 08:49.590
在我们的

08:49.590 --> 08:51.590
数据库打开

08:51.590 --> 08:54.900
数据库3里面

08:54.900 --> 08:56.900
我们有两条obid是自己的

08:56.900 --> 08:58.900
有一条是不是自己的

08:58.900 --> 09:00.900
它的全线是

09:00.900 --> 09:02.900
所有用户可读仅创建这颗血

09:02.900 --> 09:04.900
名称

09:04.900 --> 09:06.900
看

09:06.900 --> 09:08.900
是不是

09:08.900 --> 09:10.900
这个都更新了

09:10.900 --> 09:12.900
很简单

09:12.900 --> 09:14.900
因为我们在一个里面

09:14.900 --> 09:16.900
而我们同样的代码的话

09:16.900 --> 09:18.900
它其实我们在londel里面

09:18.900 --> 09:20.900
就已经执行过了

09:20.900 --> 09:22.900
它这边已经执行过了

09:22.900 --> 09:24.900
所以它直接可以完成这个操作

09:24.900 --> 09:26.900
那么

09:26.900 --> 09:28.900
如果说你本地还想对它

09:28.900 --> 09:30.900
进行更新的话

09:30.900 --> 09:32.900
那我们可以传直上去

09:32.900 --> 09:34.900
把数据传上去

09:34.900 --> 09:36.900
在这

09:36.900 --> 09:38.900
调我们的函数的时候

09:38.900 --> 09:40.900
冒号

09:40.900 --> 09:42.900
给它一个杰森格式

09:42.900 --> 09:44.900
这个杰森

09:44.900 --> 09:46.900
主要就是你针对里面的

09:46.900 --> 09:48.900
传上去的一个值

09:48.900 --> 09:50.900
比如说我叫念

09:50.900 --> 09:52.900
我传一个什么呢

09:52.900 --> 09:54.900
我传一个叫做jack上去

09:54.900 --> 09:56.900
同样的方式

09:56.900 --> 09:58.900
我把它写在上面

09:58.900 --> 10:00.900
那我刚进来的时候

10:00.900 --> 10:02.900
把所有的名称就改套

10:02.900 --> 10:04.900
然后紧接着下去

10:04.900 --> 10:06.900
我可以把名称改成我们的jack

10:06.900 --> 10:08.900
没有规定一定要是念

10:08.900 --> 10:10.900
保存好

10:10.900 --> 10:12.900
紧接着第二步

10:12.900 --> 10:14.900
我们去到我们的微信小程序端

10:14.900 --> 10:16.900
微信小程序这里边的话

10:16.900 --> 10:18.900
那么它本来这边的话

10:18.900 --> 10:20.900
是我们的jackson

10:20.900 --> 10:22.900
我们不要用这个了

10:22.900 --> 10:24.900
然后我们通过event的方式来接

10:24.900 --> 10:26.900
你所传上来的念

10:26.900 --> 10:28.900
是在dash它里面

10:28.900 --> 10:30.900
在这个event里面

10:30.900 --> 10:32.900
event.net里面

10:32.900 --> 10:34.900
这样的话它就能接到

10:34.900 --> 10:36.900
那么我页面保存掉它

10:36.900 --> 10:38.900
然后我对它进行一个

10:38.900 --> 10:44.070
发布所有文件

10:44.070 --> 10:48.600
依赖

10:48.600 --> 10:50.600
好 传完

10:50.600 --> 10:52.600
此时我们再来看一下

10:52.600 --> 10:54.600
我们编译

10:54.600 --> 11:02.140
编译好以后

11:02.140 --> 11:04.140
应该它有一个文件已经运行了

11:04.140 --> 11:06.140
那么此时我们来看一下

11:06.140 --> 11:08.140
数据库

11:08.140 --> 11:10.140
刷新

11:10.140 --> 11:12.140
看 是不是都是tom

11:12.140 --> 11:14.140
这个tom是哪来的

11:14.140 --> 11:16.140
这tom是我在unload的时候传进去的

11:16.140 --> 11:18.140
此时我如果去点

11:18.140 --> 11:20.140
我们的更新按钮

11:20.140 --> 11:22.140
它里面应该全部都会变成jack

11:22.140 --> 11:24.140
那么来看

11:24.140 --> 11:26.140
这个按钮

11:26.140 --> 11:28.140
修改 一点下去

11:28.140 --> 11:30.140
此时再看一下云数据

11:30.140 --> 11:32.140
原来tom

11:32.140 --> 11:34.140
一刷新 是不是都是jack

11:34.140 --> 11:36.140
那就代表着

11:36.140 --> 11:38.140
服务器的多更新操作

11:38.140 --> 11:40.140
已经实现了

11:40.140 --> 11:42.140
所以这边我们额外在说到的是

11:42.140 --> 11:44.140
小程序客户端

11:44.140 --> 11:46.140
由于它是给

11:46.140 --> 11:48.140
单个我们的用户使用的

11:48.140 --> 11:50.140
所以单个用户是没有

11:50.140 --> 11:52.140
完全做多数据

11:52.140 --> 11:54.140
处理的这个功能

11:54.140 --> 11:56.140
但是你需要写这单嘛

11:56.140 --> 11:58.140
你需要到云端来写

11:58.140 --> 12:00.140
而云端写好以后

12:00.140 --> 12:02.140
小程序可以调起云端的函数

12:02.140 --> 12:04.140
完成你现在传直

12:04.140 --> 12:06.140
包括是你想修改什么记录

12:06.140 --> 12:08.140
你都用这样的方式传

12:08.140 --> 12:10.140
传完以后

12:10.140 --> 12:12.140
在云端结构里面进行修改

12:12.140 --> 12:14.140
这方式比如说

12:14.140 --> 12:16.140
我拿到了判断的

12:16.140 --> 12:19.700
拿到了它的ware条件

12:19.700 --> 12:21.700
都可以

12:21.700 --> 12:23.700
这样的话我们就能完成

12:23.700 --> 12:25.700
现在的一个多值操作

12:25.700 --> 12:27.700
那么这样的话

12:27.700 --> 12:29.700
我们也完成了

12:29.700 --> 12:31.700
云函数的介绍

12:31.700 --> 12:33.700
云函数本身自己

12:33.700 --> 12:35.700
不会作为我们的一个

12:35.700 --> 12:37.700
特别重点的东西

12:37.700 --> 12:39.700
但是一旦碰到我们

12:39.700 --> 12:41.700
必须要云函数操作时候

12:41.700 --> 12:43.700
那你就需要对它进行

12:43.700 --> 12:45.700
这方面的一个操作了

12:45.700 --> 12:47.700
操作方式

12:47.700 --> 12:49.700
如果在原生上面

12:49.700 --> 12:51.700
如果大家还想继续了解的话

12:51.700 --> 12:53.700
那么我们在之前的

12:53.700 --> 12:55.700
微信与原生视频上面就有

12:55.700 --> 12:57.700
但如果大家想完成

12:57.700 --> 12:59.700
我们现在的mpview的

12:59.700 --> 13:01.700
那么这节课的实例

13:01.700 --> 13:03.700
包括上节课的

13:03.700 --> 13:05.700
我们也给大家做这方面的演示了

13:05.700 --> 13:07.700
好那么这是云函数的操作

13:07.700 --> 13:09.700
我们来讲解一下

13:09.700 --> 13:11.700
云存储

13:11.700 --> 13:13.700
云存储

13:13.700 --> 13:15.700
那么云函数的讲解

