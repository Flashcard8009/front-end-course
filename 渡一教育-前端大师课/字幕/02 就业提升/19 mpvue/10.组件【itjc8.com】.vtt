WEBVTT

00:00.300 --> 00:04.300
好 我们这些课可以继续讲讲MPVU的一些课程

00:04.300 --> 00:07.300
这些课我们将设计到的是组件

00:07.300 --> 00:09.300
设计到组件的话

00:09.300 --> 00:13.300
我们在之前学习VUE的时候

00:13.300 --> 00:15.300
我们组件设计得非常多

00:15.300 --> 00:18.300
组件也是作为VUE的重要的一部分

00:18.300 --> 00:20.300
同时我们在讲微信小程序

00:20.300 --> 00:23.300
我们也设计到了Component自定义组件的使用

00:23.300 --> 00:27.300
那么我们在讲到现在MVU的组件的时候

00:27.300 --> 00:29.300
我们要强调一下几个特点

00:29.300 --> 00:33.300
第一 组件本身对于VUE和小程序来讲

00:33.300 --> 00:36.300
都是可以使用 可以进行配置的

00:36.300 --> 00:39.300
所以MVU的话肯定是可以使用组件的

00:39.300 --> 00:42.300
第二 MVU的组件机制

00:42.300 --> 00:47.300
我们先是以VUE的组件机制保持一致

00:47.300 --> 00:49.300
那么为什么我们先这样说呢

00:49.300 --> 00:52.300
大家需要去了解VUE的组件机制

00:52.300 --> 00:55.300
就是我们的VUE的一个文件

00:55.300 --> 01:00.300
然后内部会有这样的一个3块的区域的调用 对吗

01:00.300 --> 01:03.300
但是微信小程序的组件它不一样

01:03.300 --> 01:05.300
它虽然也是一个Component

01:05.300 --> 01:08.300
但是它里面的结构和你创建配置页面是一样的

01:08.300 --> 01:13.300
它依然会有WXML,WXSS,JS和JSON四大文件

01:13.300 --> 01:16.300
所以做一个组件也就意味着是

01:16.300 --> 01:18.300
像一个页面一样创造

01:18.300 --> 01:20.300
外乎就是组件之间的关系

01:20.300 --> 01:23.300
组件父子之间的调用和这些内容上

01:23.300 --> 01:27.300
你才能看得出它是一个完全的封装的组件

01:27.300 --> 01:30.300
用的是MPVUE的结构的话

01:30.300 --> 01:34.300
那么我们讲我们一定会使用到的就是VUE的组件形式

01:34.300 --> 01:37.300
但是这里又要说明的是

01:37.300 --> 01:39.300
VUE本身自己在做组件的时候

01:39.300 --> 01:41.300
它所呈现出来的

01:41.300 --> 01:44.300
那就是一个纯粹的VUE

01:44.300 --> 01:49.300
但是MPVUE是用VUE的语法来制作小程序

01:49.300 --> 01:52.300
那就意味着很多的一些格式和操作

01:52.300 --> 01:54.300
都要符合小程序的特点

01:54.300 --> 01:57.300
所以它会有非常多的一些

01:57.300 --> 02:00.300
不支持的一些组件的使用

02:00.300 --> 02:01.300
我们先看一下

02:01.300 --> 02:03.300
我们说当前的微信小程序

02:03.300 --> 02:07.300
它只支持我们的单文件组件

02:07.300 --> 02:12.300
也就是只有一个点VUE的一个组件结构文件

02:12.300 --> 02:13.300
这是属于官网

02:13.300 --> 02:16.300
给到我们的强烈的一个文字说明

02:16.300 --> 02:17.300
官网还说明的是

02:17.300 --> 02:19.300
我们不支持以下形式

02:19.300 --> 02:21.300
比如说动态组件

02:21.300 --> 02:22.300
自定义Render

02:22.300 --> 02:24.300
还有在组件引用的时候

02:24.300 --> 02:26.300
我们上面不能去写Click

02:26.300 --> 02:27.300
原生的这个

02:27.300 --> 02:28.300
包括是VSU

02:28.300 --> 02:30.300
包括是ClassStyle

02:30.300 --> 02:32.300
这些都不能写

02:32.300 --> 02:33.300
包括是Slot

02:33.300 --> 02:35.300
这个就是一个插槽

02:35.300 --> 02:37.300
我们也会称之为

02:37.300 --> 02:39.300
就是我们的组件的内部引用

02:39.300 --> 02:41.300
然后我们也可以

02:41.300 --> 02:44.300
在我们原生上面倒可以用VIF

02:44.300 --> 02:46.300
E不组件和InlineTemplate等

02:46.300 --> 02:48.300
这些都不能用

02:48.300 --> 02:50.300
所以我们讲

02:50.300 --> 02:52.300
虽然VUE的组件的功能

02:52.300 --> 02:53.300
会非常的强大

02:53.300 --> 02:55.300
但是它最后

02:55.300 --> 02:56.300
还是要转换成

02:56.300 --> 02:58.300
或是要程序的结构

02:58.300 --> 03:00.300
而小程序是要分页面呈现的

03:00.300 --> 03:03.300
所以它的结构只能说是

03:03.300 --> 03:04.300
有单文件

03:04.300 --> 03:05.300
让我们的编译器

03:05.300 --> 03:06.300
做分页面处理

03:06.300 --> 03:07.300
是这个逻辑

03:07.300 --> 03:08.300
OK

03:08.300 --> 03:10.300
我们简单来看一下

03:10.300 --> 03:11.300
里面的几个内容

03:11.300 --> 03:13.300
我们把它再讲深一点

03:13.300 --> 03:14.300
第一我们看一下

03:14.300 --> 03:15.300
单文件支持

03:15.300 --> 03:17.300
系统是给了案例

03:17.300 --> 03:18.300
我们自己再做一个

03:18.300 --> 03:19.300
第二

03:19.300 --> 03:20.300
我们看一下

03:20.300 --> 03:22.300
如果直接使用

03:22.300 --> 03:23.300
下面这种不支持的

03:23.300 --> 03:24.300
会有什么反应

03:24.300 --> 03:25.300
第三

03:25.300 --> 03:27.300
如果我现在

03:27.300 --> 03:29.300
利用我们的VUE的组件结构

03:29.300 --> 03:31.300
去配合我们小程序的

03:31.300 --> 03:32.300
所谓的那些

03:32.300 --> 03:34.300
组件的一些操作的话

03:34.300 --> 03:36.300
那么又有什么样的结果呢

03:36.300 --> 03:38.300
是否和我们前面

03:38.300 --> 03:39.300
前面说的表单组件

03:39.300 --> 03:40.300
一样可以混用呢

03:40.300 --> 03:41.300
这些都是我们在

03:41.300 --> 03:42.300
组件这上面

03:42.300 --> 03:44.300
需要给大家产名的

03:44.300 --> 03:45.300
好了

03:45.300 --> 03:47.300
开始进行编码

03:47.300 --> 03:49.300
把前面的代码关一下

03:49.300 --> 03:50.300
我们里面

03:50.300 --> 03:52.300
创建出我们的一个新的

03:52.300 --> 03:54.300
自己的一个页面

03:54.300 --> 03:55.300
我们

03:55.300 --> 03:57.300
SSC中创建目录

03:57.300 --> 03:59.300
我们称之为

03:59.300 --> 04:00.300
这是

04:00.300 --> 04:03.640
我们

04:03.640 --> 04:07.980
Component

04:07.980 --> 04:08.980
Use

04:08.980 --> 04:15.360
那我们去ComponentUse

04:15.360 --> 04:19.020
使用

04:19.020 --> 04:20.020
然后呢

04:20.020 --> 04:21.020
我们在这里边

04:21.020 --> 04:22.020
我们去

04:22.020 --> 04:24.020
我们把它放在Peters里面

04:24.020 --> 04:26.020
我们称为Peters里面

04:26.020 --> 04:27.020
然后的话呢

04:27.020 --> 04:29.020
我们在里面新建

04:31.020 --> 04:33.020
Mand and JS

04:33.020 --> 04:35.020
新建我们的Index

04:37.020 --> 04:38.020
VUE

04:38.020 --> 04:39.020
然后

04:39.020 --> 04:40.020
首先

04:41.020 --> 04:42.020
VUE

04:42.020 --> 04:44.020
写上一个简单的结构

04:45.020 --> 04:46.020
然后这里边呢

04:46.020 --> 04:47.020
我们写上

04:47.020 --> 04:48.020
两个标准的

04:50.020 --> 04:51.020
Data

04:51.020 --> 05:06.580
好

05:06.580 --> 05:07.580
进接着

05:07.580 --> 05:08.580
回到这里边

05:08.580 --> 05:10.580
这里边我们就直接把以前的

05:10.580 --> 05:12.580
这部分给复制过来就可以了

05:12.580 --> 05:16.660
因为我们的名称

05:16.660 --> 05:18.660
依然是Index

05:18.660 --> 05:19.660
好

05:19.660 --> 05:20.660
再有的呢

05:20.660 --> 05:22.660
就是我们现在需要在

05:22.660 --> 05:23.660
app.json中

05:23.660 --> 05:25.660
把这个文件

05:25.660 --> 05:26.660
夹在出来

05:26.660 --> 05:28.660
让它作为我的首页的

05:28.660 --> 05:29.660
显示

05:29.660 --> 05:30.660
这是

05:31.660 --> 05:33.660
ComponentUse

05:34.660 --> 05:39.950
下面的Mand

05:39.950 --> 05:40.950
好

05:40.950 --> 05:41.950
把页面关一下

05:41.950 --> 05:42.950
然后呢

05:42.950 --> 05:44.950
自己这边进行重启

05:48.480 --> 05:49.480
那因为为什么

05:49.480 --> 05:50.480
我们说一下

05:50.480 --> 05:51.480
就是说你现在正在

05:51.480 --> 05:53.480
把如果把它进行重启

05:53.480 --> 05:54.480
而我们的微信端

05:54.480 --> 05:55.480
如果你不关闭的话

05:55.480 --> 05:57.480
其实微信端会有一个

05:57.480 --> 05:58.480
轮型

05:58.480 --> 06:00.480
也就是它会去看你前一个

06:00.480 --> 06:02.480
是否在正常操作

06:02.480 --> 06:03.480
如果你前一个关了

06:03.480 --> 06:05.480
那么它会形成一个死机状态

06:05.480 --> 06:06.480
就是死掉的微信

06:06.480 --> 06:07.480
这部分

06:07.480 --> 06:09.480
那我们把它关一下以后的话呢

06:09.480 --> 06:10.480
这边进行我们的

06:10.480 --> 06:11.480
这样的操作以后

06:11.480 --> 06:12.480
我们

06:12.480 --> 06:13.480
启动以后

06:13.480 --> 06:15.480
我们再去打开微信

06:15.480 --> 06:16.480
这样的话呢

06:16.480 --> 06:17.480
至少那边的话

06:17.480 --> 06:25.660
是一个正常状态

06:25.660 --> 06:27.660
我们把名字简单一点

06:27.660 --> 06:28.660
叫Use

06:28.660 --> 06:29.660
我们不要太长了

06:29.660 --> 06:30.660
然后只是你再打开

06:30.660 --> 06:32.660
我们的微信小程序

06:32.660 --> 06:34.660
你让它放在那边就开着

06:34.660 --> 06:35.660
它就不会死机

06:35.660 --> 06:36.660
接下去

06:36.660 --> 06:38.660
我们来看

06:38.660 --> 06:39.660
我们首先看一下

06:39.660 --> 06:40.660
系统所给到

06:40.660 --> 06:42.660
我们的一些案例

06:42.660 --> 06:43.660
系统在给到我们

06:43.660 --> 06:45.660
快速启动的时候

06:45.660 --> 06:47.660
在index的view里面

06:47.660 --> 06:48.660
它做了一个

06:48.660 --> 06:49.660
所谓的component

06:49.660 --> 06:50.660
所以我们看到

06:50.660 --> 06:52.660
这边有个component的文件家

06:52.660 --> 06:54.660
打开里面有一个单文件

06:54.660 --> 06:56.660
叫做card.view

06:56.660 --> 06:57.660
然后呢

06:57.660 --> 06:58.660
我们先看

06:58.660 --> 06:59.660
它的调用点在哪里

06:59.660 --> 07:01.660
它的调用点是在我们

07:01.660 --> 07:02.660
当前的

07:02.660 --> 07:05.660
就是要用到的index下面

07:05.660 --> 07:06.660
首先我们看

07:06.660 --> 07:07.660
它的第一步操作

07:07.660 --> 07:09.660
我们得跑到我们的script

07:09.660 --> 07:10.660
第一句话

07:10.660 --> 07:12.660
你做一个input的操作

07:12.660 --> 07:13.660
导入

07:13.660 --> 07:14.660
你把它作为一个

07:14.660 --> 07:15.660
你发现吗

07:15.660 --> 07:17.660
它做了一个from

07:17.660 --> 07:19.660
后面是我们的一个导入

07:19.660 --> 07:20.660
导入以后

07:20.660 --> 07:22.660
我们这边写上一个card

07:22.660 --> 07:24.660
代表这是导入以后

07:24.660 --> 07:25.660
内部的标签

07:25.660 --> 07:26.660
那么第二步操作

07:26.660 --> 07:28.660
那么注意一下

07:28.660 --> 07:29.660
我们需要在这边

07:29.660 --> 07:31.660
进行全局化的一个声明

07:31.660 --> 07:32.660
这是我们之前

07:32.660 --> 07:33.660
在viewe上面

07:33.660 --> 07:35.660
经常做的component

07:35.660 --> 07:36.660
一旦声明以后的话

07:36.660 --> 07:38.660
我们就可以在页面中

07:38.660 --> 07:39.660
去使用了

07:39.660 --> 07:40.660
对不对

07:40.660 --> 07:41.660
那么注意

07:41.660 --> 07:42.660
微信的操作

07:42.660 --> 07:43.660
你还记得吗

07:43.660 --> 07:44.660
微信的小程序的操作

07:44.660 --> 07:46.660
你需要在json

07:46.660 --> 07:48.660
在那个json里面

07:48.660 --> 07:50.660
去完成一个叫use components

07:50.660 --> 07:51.660
一个操作

07:51.660 --> 07:53.660
然后你再把这个标签

07:53.660 --> 07:55.660
再用在我们的wxma面中

07:55.660 --> 07:56.660
是这样的

07:56.660 --> 07:57.660
所以它两者不一样

07:57.660 --> 07:58.660
这个符合

07:58.660 --> 08:00.660
我们现在view的结构

08:00.660 --> 08:01.660
紧接着

08:01.660 --> 08:02.660
我们拿到了这个

08:02.660 --> 08:03.660
以后我们来看一下

08:03.660 --> 08:05.660
这个card里面的结构

08:05.660 --> 08:06.660
一看

08:06.660 --> 08:07.660
非常简单

08:07.660 --> 08:08.660
三部分

08:08.660 --> 08:10.660
template script style

08:10.660 --> 08:12.660
首先看template里面

08:12.660 --> 08:13.660
很简单

08:13.660 --> 08:14.660
一个跟文件下面

08:14.660 --> 08:17.660
完成了一个非常直白的

08:17.660 --> 08:18.660
一个我们的

08:18.660 --> 08:20.660
txt的文字的显示

08:20.660 --> 08:22.660
然后这边是一个简单的

08:22.660 --> 08:24.660
一个样式结构

08:24.660 --> 08:25.660
第二

08:25.660 --> 08:26.660
txt的内容从哪来

08:26.660 --> 08:27.660
我们看到

08:27.660 --> 08:28.660
在screw脚本中

08:28.660 --> 08:29.660
expert default

08:29.660 --> 08:30.660
表示的是

08:30.660 --> 08:31.660
我们现在里面

08:31.660 --> 08:33.660
应该定义一个属性

08:33.660 --> 08:34.660
注意一下

08:34.660 --> 08:36.660
那么在我们的这里边

08:36.660 --> 08:38.660
我们可以有属性

08:38.660 --> 08:40.660
属性代表的意思是什么

08:40.660 --> 08:41.660
是这个txt

08:41.660 --> 08:42.660
我们可以通过

08:42.660 --> 08:44.660
它调用点的方式进入

08:44.660 --> 08:45.660
进行传入

08:45.660 --> 08:46.660
是这个逻辑

08:46.660 --> 08:47.660
所以呢

08:47.660 --> 08:49.660
我们打开到我们的代入点

08:49.660 --> 08:50.660
我们看到

08:50.660 --> 08:52.660
在代入点上面的时候

08:52.660 --> 08:53.660
这边就有一个帽号

08:53.660 --> 08:54.660
tester

08:54.660 --> 08:55.660
你可以把这个传入

08:55.660 --> 08:57.660
为什么写帽号呢

08:57.660 --> 08:58.660
原因是在于

08:58.660 --> 08:59.660
这个是变量

08:59.660 --> 09:01.660
就我调用点来说

09:01.660 --> 09:02.660
我的motor是变量

09:02.660 --> 09:03.660
所以这边

09:03.660 --> 09:04.660
我就写了一个

09:04.660 --> 09:06.660
Hello program

09:06.660 --> 09:07.660
这样的一个结构

09:07.660 --> 09:08.660
所以你页面中

09:08.660 --> 09:10.660
只要你看到motor的位置

09:10.660 --> 09:11.660
其实它的呈现

09:11.660 --> 09:12.660
不是文本的呈现

09:12.660 --> 09:13.660
而是它是利用了

09:13.660 --> 09:14.660
一个我们的

09:14.660 --> 09:16.660
组建方式的出现

09:16.660 --> 09:17.660
好

09:17.660 --> 09:18.660
这是系统给到我们的

09:18.660 --> 09:19.660
我们大家其实一看

09:19.660 --> 09:20.660
也明确

09:20.660 --> 09:21.660
那么现在呢

09:21.660 --> 09:22.660
这边的话

09:22.660 --> 09:24.660
它说没有use对吧

09:24.660 --> 09:25.660
那我们只要重启一下

09:25.660 --> 09:27.660
我们只要重新编一下

09:27.660 --> 09:32.380
我们对它重新编一下

09:32.380 --> 09:33.380
因为本身来讲的话

09:33.380 --> 09:35.380
我们是新建页面

09:35.380 --> 09:36.380
所以呢

09:36.380 --> 09:37.380
我们需要是

09:37.380 --> 09:38.380
这边重启一下

09:38.380 --> 09:40.380
我把它关一下

09:40.380 --> 09:41.380
再启一下

09:41.380 --> 09:47.310
我们看到

09:47.310 --> 09:48.310
现在在这里边

09:48.310 --> 09:50.310
我们本身写了一个

09:50.310 --> 09:52.310
use

09:52.310 --> 09:54.310
use

09:54.310 --> 09:55.310
我们看到

09:55.310 --> 09:56.310
这里边

09:56.310 --> 09:57.310
我们是有这样一个结构的

09:57.310 --> 09:58.310
同时

09:58.310 --> 09:59.310
这里的话呢

09:59.310 --> 10:00.310
vue index导入

10:00.310 --> 10:01.310
也没问题

10:01.310 --> 10:03.310
再有的就是app.json

10:03.310 --> 10:04.310
这里边的话呢

10:04.310 --> 10:06.310
pager use man

10:06.310 --> 10:07.310
这也是ok的

10:07.310 --> 10:08.310
然后打开

10:08.310 --> 10:12.800
接下来我们呢

10:12.800 --> 10:13.800
在打开过程中

10:13.800 --> 10:14.800
我们说一下

10:14.800 --> 10:15.800
我们将自己

10:15.800 --> 10:16.800
再建立一个我们的

10:16.800 --> 10:18.800
这样的一个vue的

10:18.800 --> 10:19.800
或者称之为

10:19.800 --> 10:20.800
组建的部分

10:20.800 --> 10:21.800
让我们现在的

10:21.800 --> 10:22.800
见面中的操作

10:22.800 --> 10:23.800
和它之间

10:23.800 --> 10:24.800
可以相互进行通讯

10:24.800 --> 10:26.800
我从外部传指给它

10:26.800 --> 10:27.800
然后呢

10:27.800 --> 10:28.800
我们也可以利用它

10:28.800 --> 10:30.800
完成我们现在的

10:30.800 --> 10:32.800
一个数据的传出

10:32.800 --> 10:35.300
这个逻辑

10:35.300 --> 10:37.300
我们刷一下

10:37.300 --> 10:39.300
它这边没呈现

10:39.300 --> 10:40.300
我们看一下

10:40.300 --> 10:42.300
我们man use

10:42.300 --> 10:43.300
我们多了一个2

10:43.300 --> 10:45.300
我们把它给删掉

10:45.300 --> 10:47.300
我们写user

10:47.300 --> 10:49.300
这边有出来了

10:49.300 --> 10:50.300
好了

10:50.300 --> 10:51.300
接下去呢

10:51.300 --> 10:52.300
我们在这里边

10:52.300 --> 10:53.300
我们去写一个

10:53.300 --> 10:54.300
自己定义的组建结构

10:54.300 --> 10:55.300
出来

10:55.300 --> 10:56.300
自己啊

10:56.300 --> 10:57.300
做一个我们自己的

10:57.300 --> 10:58.300
组建

10:58.300 --> 10:59.300
首先我们看一下

10:59.300 --> 11:00.300
在component里面

11:00.300 --> 11:01.300
咱们先创建一个

11:01.300 --> 11:02.300
新文件

11:02.300 --> 11:07.980
咱们叫做my import

11:07.980 --> 11:08.980
叫my import

11:08.980 --> 11:09.980
然后这边呢

11:09.980 --> 11:11.980
我们用vue

11:11.980 --> 11:12.980
然后给它定义

11:12.980 --> 11:13.980
一个简单的

11:13.980 --> 11:14.980
跟文件

11:14.980 --> 11:15.980
然后呢

11:15.980 --> 11:16.980
在这边

11:16.980 --> 11:17.980
我们写上

11:17.980 --> 11:24.200
两个

11:24.200 --> 11:25.200
第一个

11:26.200 --> 11:29.730
第二个

11:29.730 --> 11:30.730
对吧

11:30.730 --> 11:31.730
写上这两个

11:31.730 --> 11:33.730
这是属于基础结构

11:33.730 --> 11:34.730
然后呢

11:34.730 --> 11:35.730
这是属于我们

11:35.730 --> 11:36.730
组建内的啊

11:36.730 --> 11:37.730
这就是一个组建

11:37.730 --> 11:38.730
你会发现

11:38.730 --> 11:39.730
它的写法和我们外面

11:39.730 --> 11:40.730
基本一样

11:40.730 --> 11:41.730
第二步操作呢

11:41.730 --> 11:42.730
我们把这个

11:42.730 --> 11:43.730
组建内部定义一下

11:43.730 --> 11:45.730
然后我们想做一个label

11:45.730 --> 11:47.730
上面呈现一下

11:47.730 --> 11:48.730
我们比如说

11:48.730 --> 11:49.730
这个样式

11:49.730 --> 11:50.730
我们给它叫做

11:57.010 --> 11:59.010
label tag

11:59.010 --> 12:00.010
标签

12:00.010 --> 12:03.450
那么这里面的标签

12:03.450 --> 12:05.450
我们不是简单定

12:05.450 --> 12:06.450
我们先定死

12:06.450 --> 12:07.450
把它拿出来

12:07.450 --> 12:10.850
就叫做

12:10.850 --> 12:11.850
用户姓名

12:11.850 --> 12:12.850
然后咱们改一下

12:12.850 --> 12:13.850
的话就是

12:13.850 --> 12:14.850
然后这边呢

12:14.850 --> 12:16.850
我们给一个inpart

12:16.850 --> 12:17.850
inpart

12:17.850 --> 12:18.850
然后的话呢

12:18.850 --> 12:20.850
我们就给一个placeholder

12:20.850 --> 12:21.850
这里面

12:21.850 --> 12:23.850
你可以做输入对吧

12:23.850 --> 12:25.850
然后这边的话就是

12:25.850 --> 12:27.850
请输入

12:27.850 --> 12:29.850
用户名

12:31.850 --> 12:32.850
简单结构

12:32.850 --> 12:34.850
然后在这里面呢

12:34.850 --> 12:35.850
其他东西

12:35.850 --> 12:37.850
我们想把这个显示出来

12:37.850 --> 12:38.850
第二步呢

12:38.850 --> 12:39.850
我们把它放在

12:39.850 --> 12:40.850
我们页面中

12:40.850 --> 12:41.850
找到我们的use

12:41.850 --> 12:42.850
进来以后

12:42.850 --> 12:44.850
第一步做一个导入

12:44.850 --> 12:45.850
inpart

12:45.850 --> 12:47.850
我自己起名叫my

12:47.850 --> 12:48.850
inpart

12:48.850 --> 12:49.850
输入框

12:49.850 --> 12:50.850
from

12:50.850 --> 12:51.850
来自于

12:51.850 --> 12:54.850
我们的components

12:54.850 --> 12:56.850
下面的

12:56.850 --> 12:57.850
my

12:57.850 --> 13:04.940
inpart.view

13:04.940 --> 13:09.940
from

13:09.940 --> 13:10.940
导入以后

13:10.940 --> 13:12.940
那么我们就可以把这个

13:12.940 --> 13:13.940
放在哪呢

13:13.940 --> 13:16.940
放在我们的components

13:16.940 --> 13:20.270
里面

13:20.270 --> 13:23.580
放在我们components

13:23.580 --> 13:24.580
里面

13:24.580 --> 13:25.580
全局

13:25.580 --> 13:26.580
最后

13:26.580 --> 13:27.580
把这个

13:27.580 --> 13:28.580
我们可以使用到

13:28.580 --> 13:29.580
我们的页面中

13:29.580 --> 13:36.540
自定义

13:36.540 --> 13:37.540
表单

13:37.540 --> 13:38.540
组件

13:39.540 --> 13:47.440
这里先写一个div

13:47.440 --> 13:48.440
把后面的咱们

13:48.440 --> 13:49.440
放进去

13:49.440 --> 13:50.440
然后把组件内容

13:50.440 --> 13:54.100
往这一割

13:54.100 --> 13:55.100
对吧

13:55.100 --> 13:58.100
然后咱们取出来叫

13:58.100 --> 13:59.100
my import

13:59.100 --> 14:06.080
好

14:06.080 --> 14:07.080
保存

14:07.080 --> 14:08.080
然后此时

14:08.080 --> 14:09.080
我们来看一下页面

14:09.080 --> 14:10.080
是不是

14:10.080 --> 14:11.080
用户名

14:11.080 --> 14:12.080
那个叫什么

14:12.080 --> 14:13.080
请输入内容

14:13.080 --> 14:14.080
这边都有

14:14.080 --> 14:15.080
那么此时

14:15.080 --> 14:17.080
我想把这个内容

14:17.080 --> 14:18.080
做得活一点

14:18.080 --> 14:19.080
就是一直是这套东西

14:19.080 --> 14:21.080
我会不断的往下

14:21.080 --> 14:22.080
所以呢

14:22.080 --> 14:23.080
我们进行修改

14:23.080 --> 14:25.080
首先把这个用户名

14:25.080 --> 14:26.080
做成一个

14:26.080 --> 14:28.080
特别简单的

14:28.080 --> 14:30.080
我们的标签

14:30.080 --> 14:32.080
咱们称之为labernan

14:32.080 --> 14:33.080
lab title

14:33.080 --> 14:34.080
这位

14:34.080 --> 14:36.080
或者就叫我们的

14:36.080 --> 14:37.080
风

14:38.080 --> 14:39.080
labber

14:39.080 --> 14:41.780
title

14:43.780 --> 14:44.780
风lab title

14:44.780 --> 14:45.780
对吧

14:45.780 --> 14:46.780
然后此时

14:46.780 --> 14:48.780
我们把这个

14:48.780 --> 14:50.780
作为一个属性存在

14:50.780 --> 14:52.780
在我们的里面

14:52.780 --> 14:53.780
p-r-o-p

14:53.780 --> 14:56.540
还记得吗

14:56.540 --> 14:57.540
p-r-o-p

14:57.540 --> 15:00.040
属性

15:00.040 --> 15:02.040
我们把这个拿进来

15:02.040 --> 15:06.590
利用属性的方式

15:06.590 --> 15:07.590
把它进行追加

15:07.590 --> 15:08.590
然后此时呢

15:08.590 --> 15:10.590
我们把这个属性

15:10.590 --> 15:11.590
然后你钱

15:11.590 --> 15:12.590
它要用的时候

15:12.590 --> 15:14.590
营用的时候拿过来

15:14.590 --> 15:15.590
有东西说

15:15.590 --> 15:17.590
直接把这个属性往这放

15:17.590 --> 15:19.590
然后往这里面放直

15:19.590 --> 15:20.590
你看啊

15:20.590 --> 15:22.590
我这边说

15:24.590 --> 15:26.590
用户年龄

15:26.590 --> 15:28.590
我们就换一个词

15:28.590 --> 15:30.590
这样直接绑定

15:30.590 --> 15:32.590
你来看页面

15:32.590 --> 15:33.590
看到吗

15:33.590 --> 15:34.590
这样直接绑定

15:34.590 --> 15:36.590
它是可以显示的

15:36.590 --> 15:37.590
再强调一下

15:37.590 --> 15:38.590
这样直接绑定

15:38.590 --> 15:39.590
是可以显示的

15:39.590 --> 15:40.590
在我这点

15:40.590 --> 15:41.590
是要区别

15:41.590 --> 15:42.590
与我们小程序的

15:42.590 --> 15:44.590
这个组建的

15:44.590 --> 15:45.590
我们的整个的view

15:45.590 --> 15:46.590
里面的话呢

15:46.590 --> 15:47.590
这个是没有问题的

15:47.590 --> 15:49.590
它能够看到这个

15:49.590 --> 15:50.590
能够使用

15:50.590 --> 15:51.590
在小程序里面

15:51.590 --> 15:52.590
我们还记得吗

15:52.590 --> 15:53.590
如果你还记得

15:53.590 --> 15:55.590
自定义组建的使用的话

15:55.590 --> 15:56.590
你会知道

15:56.590 --> 15:58.590
我们在组建里面的

15:58.590 --> 15:59.590
p-r-o-p

15:59.590 --> 16:00.590
这样途风命名

16:00.590 --> 16:01.590
然后在我们

16:01.590 --> 16:02.590
拧用的时候

16:02.590 --> 16:04.590
一定要把它拆成中钢的

16:04.590 --> 16:05.590
那么此时呢

16:05.590 --> 16:06.590
我们大家来看一下

16:06.590 --> 16:08.590
我们在这个时候

16:08.590 --> 16:10.590
我们把它的

16:10.590 --> 16:11.590
打出来

16:11.590 --> 16:12.590
拿出来看一下

16:14.590 --> 16:15.590
原码

16:15.590 --> 16:21.870
原码你看

16:21.870 --> 16:22.870
用户年龄

16:22.870 --> 16:23.870
它依然这边

16:23.870 --> 16:24.870
是可以呈现出来的

16:24.870 --> 16:25.870
对吧

16:25.870 --> 16:26.870
这边是没有问题的

16:26.870 --> 16:27.870
所以呢

16:27.870 --> 16:29.870
我们继续来对它进行操作

16:29.870 --> 16:30.870
我们再改

16:30.870 --> 16:31.870
既然是这个的话

16:31.870 --> 16:33.870
那我不可能下面这个

16:33.870 --> 16:34.870
play holder

16:34.870 --> 16:36.870
也说这个操作

16:36.870 --> 16:37.870
所以我把里面

16:37.870 --> 16:38.870
这个给改掉

16:38.870 --> 16:39.870
我前面说用户年龄

16:39.870 --> 16:40.870
下面说

16:40.870 --> 16:41.870
请输入

16:41.870 --> 16:42.870
后面空开

16:42.870 --> 16:43.870
有的时候说

16:43.870 --> 16:44.870
这样行不行

16:44.870 --> 16:45.870
对吧

16:45.870 --> 16:47.870
我先定义我们现在的一个

16:47.870 --> 16:52.490
风

16:53.490 --> 16:54.490
我们的

16:54.490 --> 16:55.490
impart

16:56.490 --> 16:58.860
impart

16:59.860 --> 17:00.860
play holder

17:01.860 --> 17:02.860
我们这样写

17:03.860 --> 17:04.860
然后这个的话呢

17:04.860 --> 17:05.860
你要放这

17:05.860 --> 17:06.860
你要放这

17:06.860 --> 17:07.860
同学说是这样写

17:07.860 --> 17:09.860
然后戴上你现在的

17:09.860 --> 17:10.860
这样

17:12.860 --> 17:13.860
你觉得这样可以吗

17:14.860 --> 17:15.860
如果你不知道的话

17:15.860 --> 17:16.860
我们看来看一下

17:16.860 --> 17:18.860
如果我直接没有它

17:18.860 --> 17:19.860
请输入

17:19.860 --> 17:21.860
我们是这样的方式来

17:21.860 --> 17:23.860
我们把它放在我们的

17:23.860 --> 17:25.860
引用位

17:25.860 --> 17:39.540
如果你是这样打的话

17:39.540 --> 17:42.180
请输入户年龄

17:42.180 --> 17:43.180
你是可以的对吧

17:43.180 --> 17:45.180
但如果说你像我刚才一样

17:45.180 --> 17:47.180
你直接去做一个

17:47.180 --> 17:51.540
这样

17:52.540 --> 17:53.540
你来看一下

17:53.540 --> 17:54.540
我们把这个请

17:54.540 --> 17:55.540
输拿走

17:55.540 --> 17:57.980
把这个抱存

17:57.980 --> 18:01.120
你看到吗

18:01.120 --> 18:03.120
它的语法一定会给你抱错的

18:03.120 --> 18:04.120
因为

18:04.120 --> 18:05.120
它会一旦你做了

18:05.120 --> 18:07.120
强解析以后的话

18:07.120 --> 18:09.120
它会把整个这段东西

18:09.120 --> 18:11.120
都去做解析

18:11.120 --> 18:12.120
都去做解析

18:12.120 --> 18:13.120
所以这样的话

18:13.120 --> 18:14.120
它是不可以的

18:14.120 --> 18:16.120
你直接把这部分拿出来

18:16.120 --> 18:17.120
在外面写

18:17.120 --> 18:18.120
请输入

18:19.120 --> 18:20.120
是不是

18:20.120 --> 18:21.120
这样的话是不是就会

18:21.120 --> 18:22.120
所以记住

18:22.120 --> 18:23.120
它不是说

18:23.120 --> 18:24.120
你现在里面

18:24.120 --> 18:25.120
因为以前我们做的时候

18:25.120 --> 18:26.120
有时候我们是可以

18:26.120 --> 18:27.120
做自不穿连接

18:27.120 --> 18:28.120
对不对

18:29.120 --> 18:30.120
请输入

18:30.120 --> 18:33.710
这样出来了

18:33.710 --> 18:34.710
那么

18:34.710 --> 18:35.710
组建的多次使用

18:35.710 --> 18:37.710
我们再放一个

18:37.710 --> 18:39.710
这边是用户的姓名

18:40.710 --> 18:42.710
请输入用户姓名

18:42.710 --> 18:51.780
是不是这样就出来了

18:51.780 --> 18:53.780
我们把现有的

18:53.780 --> 18:54.780
以两个组

18:54.780 --> 18:56.780
两个元素

18:56.780 --> 18:58.780
绑定成一个自定义组建

18:58.780 --> 18:59.780
但这样的话

18:59.780 --> 19:00.780
我们看

19:00.780 --> 19:01.780
效果就有了

19:01.780 --> 19:03.780
紧接着我们继续

19:03.780 --> 19:04.780
刚才我们的做法

19:04.780 --> 19:06.780
是我们通过引用的方式

19:06.780 --> 19:08.780
把直传入到组建内部

19:08.780 --> 19:09.780
接下去

19:09.780 --> 19:11.780
组建内部需要进行

19:11.780 --> 19:12.780
事件激发

19:12.780 --> 19:13.780
然后把直

19:13.780 --> 19:15.780
返回给我的副组建

19:15.780 --> 19:17.780
返回给我的副组建

19:17.780 --> 19:19.780
因为刚才随便你怎么做

19:19.780 --> 19:20.780
你永远是一个展示

19:20.780 --> 19:21.780
对吧

19:21.780 --> 19:22.780
用户姓名

19:22.780 --> 19:23.780
用户年龄

19:23.780 --> 19:24.780
但是我需要取得你的直

19:24.780 --> 19:26.780
但是当我输内容以后的话

19:26.780 --> 19:27.780
我的页面中

19:27.780 --> 19:28.780
有事件能接到这个直

19:28.780 --> 19:30.780
那么这个操作

19:30.780 --> 19:31.780
是从事件里面

19:31.780 --> 19:32.780
从组建里面

19:32.780 --> 19:33.780
把这个内容

19:33.780 --> 19:34.780
通过事件的方式

19:34.780 --> 19:35.780
印射出来

19:35.780 --> 19:36.780
那么这个做法

19:36.780 --> 19:37.780
其实也不难

19:37.780 --> 19:38.780
首先我们第一步

19:38.780 --> 19:40.780
我们需要到组建里面

19:40.780 --> 19:41.780
组建里面的话

19:41.780 --> 19:42.780
我们首先对它

19:42.780 --> 19:44.780
进行一个单击事件的操作

19:44.780 --> 19:46.780
我们先绑定一个

19:46.780 --> 19:47.780
对着按钮

19:47.780 --> 19:49.780
这它需要有一个事件

19:49.780 --> 19:50.780
我们称为changer

19:50.780 --> 19:52.780
比如说鼠标一开事件

19:52.780 --> 19:53.780
当事件一开以后

19:53.780 --> 19:55.780
我们出发它的一个get

19:55.780 --> 19:57.780
就是in part

19:57.780 --> 19:59.780
value这样一个事情

19:59.780 --> 20:01.780
然后把它写在

20:01.780 --> 20:03.780
我们的message里面

20:03.780 --> 20:04.780
把它写在message中

20:04.780 --> 20:05.780
我们message

20:05.780 --> 20:07.780
去获得这个直

20:07.780 --> 20:09.780
那么获得这个直的时候

20:09.780 --> 20:10.780
我们注意

20:10.780 --> 20:12.780
我们这边写一个vmodel

20:12.780 --> 20:13.780
vmodel

20:13.780 --> 20:14.780
我们把这个直

20:14.780 --> 20:16.780
我们直接获取到以后

20:16.780 --> 20:18.780
把它存储到vmodel中就可以

20:18.780 --> 20:20.780
那么vmodel

20:20.780 --> 20:21.780
本身自己

20:21.780 --> 20:22.780
这时候如果说

20:22.780 --> 20:23.780
我们在复制以后

20:23.780 --> 20:24.780
它自己会拿到

20:24.780 --> 20:25.780
所以这边

20:25.780 --> 20:26.780
我们做一个触发

20:26.780 --> 20:27.780
什么意思呢

20:27.780 --> 20:32.100
就是我们本身有一个emit

20:32.100 --> 20:34.100
我们有个触发

20:34.100 --> 20:40.800
我们会换起

20:40.800 --> 20:41.800
我们去换起

20:41.800 --> 20:43.800
我们现在的页面中

20:43.800 --> 20:45.800
所有的一个内容

20:45.800 --> 20:46.800
就是我们的一个

20:46.800 --> 20:47.800
事件的映射

20:47.800 --> 20:50.800
所以我们写上去就是in part value

20:50.800 --> 20:54.300
后面是你要传给它的直

20:54.300 --> 20:55.300
所以我们直接

20:55.300 --> 20:57.300
this.in part value

20:57.300 --> 20:59.300
就是我们现在的这个内容

20:59.300 --> 21:00.300
我们把这个名字

21:00.300 --> 21:04.300
改一下我们称之为get import value

21:04.300 --> 21:05.300
这样写

21:05.300 --> 21:06.300
当你现在点击以后

21:06.300 --> 21:07.300
我们就出发了

21:07.300 --> 21:09.300
这样的一个外部引用事件

21:09.300 --> 21:10.300
外部引用事件

21:10.300 --> 21:11.300
需要到外部

21:11.300 --> 21:13.300
进行事件绑定格式的书写

21:13.300 --> 21:14.300
到外部来

21:14.300 --> 21:16.300
然后在我们第一个按钮上面

21:16.300 --> 21:18.300
我们去做一个事件绑定格式

21:18.300 --> 21:20.300
用at 方式来对照

21:20.300 --> 21:23.300
映射出你外部的一个事件

21:23.300 --> 21:25.300
我们外部事件就叫做

21:27.300 --> 21:29.300
in part value

21:29.300 --> 21:32.300
就是我们拿这个事件

21:32.300 --> 21:37.980
我们写一下

21:37.980 --> 21:39.980
当你外部拿到这个事件以后

21:39.980 --> 21:41.980
我们依然是可以通过它的参数方式

21:41.980 --> 21:42.980
获取到你里面

21:42.980 --> 21:44.980
所传出来的内容

21:44.980 --> 21:45.980
我们这样放置

21:45.980 --> 21:46.980
我们看一下效果

21:46.980 --> 21:49.980
现在我们内部有一个changer事件

21:49.980 --> 21:51.980
当我光标一该货的内容

21:51.980 --> 21:52.980
改变的时候

21:52.980 --> 21:55.980
它会触发一个叫做get import value

21:55.980 --> 21:57.980
内部的get import value

21:57.980 --> 22:00.980
去激发我外部的一个叫get import value

22:00.980 --> 22:02.980
所对应到的一个事件

22:02.980 --> 22:03.980
然后同时传给它

22:03.980 --> 22:05.980
当前你所改变的这个值

22:05.980 --> 22:07.980
那么get import value的话

22:07.980 --> 22:08.980
我们在外部

22:08.980 --> 22:10.980
我们在这边有一个定义

22:11.980 --> 22:12.980
这是我们现在

22:12.980 --> 22:13.980
对应设到我们的

22:13.980 --> 22:15.980
in part value的外部格式上面

22:15.980 --> 22:17.980
外部格式有一个message的操作

22:17.980 --> 22:19.980
然后这边就形成一个打印

22:19.980 --> 22:20.980
回过头来

22:20.980 --> 22:22.980
首先我在这里边说123

22:22.980 --> 22:23.980
然后过

22:23.980 --> 22:24.980
然后此时的话

22:24.980 --> 22:25.980
我们说

22:25.980 --> 22:26.980
下面和上面不一样

22:26.980 --> 22:28.980
上面的话我输完以后

22:28.980 --> 22:29.980
这边应该呈现对吧

22:29.980 --> 22:30.980
它没有出来

22:30.980 --> 22:32.980
我们来看一看原因

22:33.980 --> 22:34.980
是我们刚才在这个页面

22:34.980 --> 22:35.980
没有刷新吗

22:35.980 --> 22:36.980
我们现在的话

22:36.980 --> 22:37.980
什么代码都没改

22:37.980 --> 22:38.980
然后的话

22:38.980 --> 22:39.980
我们重新刷新一下

22:39.980 --> 22:40.980
123

22:40.980 --> 22:41.980
对吧

22:41.980 --> 22:42.980
123这边就拿到了

22:42.980 --> 22:43.980
我们再来看一下

22:43.980 --> 22:44.980
这里边的话

22:44.980 --> 22:45.980
你看

22:45.980 --> 22:49.980
这边是一个触发内部事件

22:49.980 --> 22:50.980
内部事件

22:50.980 --> 22:53.980
调用触发外部的get import value

22:53.980 --> 22:55.980
外部的get import value

22:55.980 --> 22:58.980
在上面触发了inport value

22:58.980 --> 22:59.980
inport value在这

22:59.980 --> 23:00.980
直接做个打印

23:00.980 --> 23:01.980
应该是这边

23:01.980 --> 23:02.980
刚才我没有去做

23:02.980 --> 23:03.980
它的一个刷新

23:03.980 --> 23:04.980
好了

23:04.980 --> 23:05.980
现在你看到了

23:05.980 --> 23:06.980
我首先

23:06.980 --> 23:07.980
我的用户名和年龄

23:07.980 --> 23:08.980
这几个内容

23:08.980 --> 23:09.980
这几个词

23:09.980 --> 23:10.980
都是由我进行

23:10.980 --> 23:11.980
外部传入的

23:11.980 --> 23:13.980
然后有内部传出的话

23:13.980 --> 23:15.980
我们就通过事件的方式

23:15.980 --> 23:17.980
Emitter的方式出来了

23:17.980 --> 23:18.980
那么这样

23:18.980 --> 23:20.980
我对于这个调用页面来讲

23:20.980 --> 23:22.980
我就可以直接输入

23:22.980 --> 23:23.980
得到你现在所给到

23:23.980 --> 23:24.980
我的这个内容了

23:24.980 --> 23:25.980
对吧

23:25.980 --> 23:26.980
那么我现在

23:26.980 --> 23:27.980
如果说我这边

23:27.980 --> 23:28.980
有变量设定的话

23:28.980 --> 23:29.980
我只要把你

23:29.980 --> 23:30.980
承诺到我现在变量中

23:30.980 --> 23:31.980
然后当你上面

23:31.980 --> 23:32.980
所有数完以后

23:32.980 --> 23:34.980
我下面做一个提交按钮

23:34.980 --> 23:35.980
对吧

23:35.980 --> 23:36.980
这提交按钮

23:36.980 --> 23:37.980
我就可以直接获取

23:37.980 --> 23:39.980
内部的data数据中的所有值

23:39.980 --> 23:40.980
然后我就可以操作了

23:40.980 --> 23:41.980
但是这个布局的话

23:41.980 --> 23:43.980
我不需要额外部

23:43.980 --> 23:44.980
我只需要你现在

23:44.980 --> 23:46.980
有这样的一个操作就可以

23:46.980 --> 23:47.980
我们调取到

23:47.980 --> 23:48.980
get得到这个值

23:48.980 --> 23:49.980
就行了

23:49.980 --> 23:50.980
这个是不是很简单的

23:50.980 --> 23:51.980
这个结构

23:51.980 --> 23:52.980
OK

23:52.980 --> 23:56.980
那么这是我们的一个

23:56.980 --> 23:57.980
自定义组

23:57.980 --> 23:58.980
我们称之为组件

23:58.980 --> 23:59.980
我们自定义的一个组件

23:59.980 --> 24:00.980
在我们的

24:00.980 --> 24:02.980
MPView中的运用

24:02.980 --> 24:03.980
我们会注意到的是

24:03.980 --> 24:05.980
它本身的结构

24:05.980 --> 24:07.980
就是符合我们现在的

24:09.980 --> 24:10.980
View

24:10.980 --> 24:12.980
传统的View

24:12.980 --> 24:13.980
这样的一个结构

24:13.980 --> 24:14.980
这是我们说到的

24:14.980 --> 24:15.980
那么同时

24:15.980 --> 24:16.980
我们再说一下

24:16.980 --> 24:18.980
就是微信的自定义组件

24:18.980 --> 24:19.980
你没法在这儿写

24:19.980 --> 24:20.980
为什么呢

24:20.980 --> 24:21.980
微信的自定义组件

24:21.980 --> 24:22.980
本身它是一个

24:22.980 --> 24:24.980
你会从这里来看

24:24.980 --> 24:26.980
这个你现在没打开

24:26.980 --> 24:27.980
看不见的

24:27.980 --> 24:28.980
如果你还记得

24:28.980 --> 24:29.980
我们当初原来建的时候

24:29.980 --> 24:30.980
我们在这边

24:30.980 --> 24:31.980
去新建我们的

24:31.980 --> 24:32.980
component的时候

24:32.980 --> 24:34.980
它其实出来的是

24:34.980 --> 24:36.980
四个文件

24:36.980 --> 24:37.980
它其实已经出来

24:37.980 --> 24:38.980
四个文件了

24:38.980 --> 24:39.980
它没有办法

24:39.980 --> 24:40.980
形成所谓的

24:40.980 --> 24:42.980
把它压缩成View

24:42.980 --> 24:43.980
它本身就是一个

24:43.980 --> 24:45.980
四文件的操作

24:45.980 --> 24:46.980
你看我这边

24:46.980 --> 24:56.310
component

24:56.310 --> 24:57.310
然后的话

24:57.310 --> 24:58.310
我在上面

24:58.310 --> 25:03.900
创建一个customer

25:03.900 --> 25:04.900
你看到吗

25:04.900 --> 25:05.900
它是四文件的出现

25:05.900 --> 25:07.900
所以本身

25:07.900 --> 25:08.900
它只能在

25:08.900 --> 25:09.900
微信小程序的工具中

25:09.900 --> 25:10.900
去单独使用

25:10.900 --> 25:11.900
或者称之为

25:11.900 --> 25:12.900
单独编译操作

25:12.900 --> 25:13.900
它无法在这儿

25:13.900 --> 25:15.900
进行我们的隔手

25:15.900 --> 25:16.900
因为本身来讲

25:16.900 --> 25:17.900
这里面的东西

25:17.900 --> 25:19.900
我们本身就不应该去

25:19.900 --> 25:20.900
进行所谓的

25:20.900 --> 25:22.900
原生开发的结构了

25:22.900 --> 25:23.900
对不对

25:23.900 --> 25:24.900
好

25:24.900 --> 25:25.900
那么这个我只是

25:25.900 --> 25:26.900
这边提一下

25:26.900 --> 25:27.900
第二就是

25:27.900 --> 25:28.900
我们原生的

25:28.900 --> 25:29.900
所以原生这个东西

25:29.900 --> 25:30.900
不能在这儿用

25:30.900 --> 25:31.900
第二的话

25:31.900 --> 25:32.900
我们再想一下

25:32.900 --> 25:34.900
原生本身结构里面

25:34.900 --> 25:35.900
我们属性中

25:35.900 --> 25:36.900
还有哪些东西

25:36.900 --> 25:38.900
和我们这个有所区别

25:38.900 --> 25:39.900
首先

25:39.900 --> 25:40.900
我们看一下

25:40.900 --> 25:42.900
原生的自定义

25:42.900 --> 25:44.900
组建的文档

25:44.900 --> 25:49.940
文档进去

25:49.940 --> 25:50.940
我们看一下

25:50.940 --> 25:51.940
自定义组建

25:51.940 --> 25:52.940
它在里面

25:52.940 --> 25:53.940
它的模板样式

25:53.940 --> 25:54.940
这块内容

25:54.940 --> 25:55.940
和我们刚刚

25:55.940 --> 25:56.940
大家所看到的

25:56.940 --> 25:58.940
在我们的页面中的这块

25:58.940 --> 25:59.940
基本一样

25:59.940 --> 26:00.940
只不过就是

26:00.940 --> 26:01.940
外传内内传内

26:01.940 --> 26:02.940
这种写法上的

26:02.940 --> 26:03.940
要符合VOE的结构

26:03.940 --> 26:04.940
对吧

26:04.940 --> 26:05.940
还有就是slot

26:05.940 --> 26:06.940
这个写法的话

26:06.940 --> 26:07.940
我们刚才看到

26:07.940 --> 26:08.940
官网要求

26:08.940 --> 26:09.940
就说是

26:09.940 --> 26:10.940
这个已经才说

26:10.940 --> 26:11.940
不支持这部分

26:11.940 --> 26:12.940
那我们呢

26:12.940 --> 26:13.940
你可以试一下

26:13.940 --> 26:14.940
你说我非得

26:14.940 --> 26:15.940
这些东西

26:15.940 --> 26:16.940
可不可以

26:16.940 --> 26:17.940
你非得用的话

26:17.940 --> 26:18.940
咱们试一下就行了

26:18.940 --> 26:21.940
我们把这个元素

26:21.940 --> 26:23.940
在这边

26:23.940 --> 26:25.940
我们再加一个出来

26:25.940 --> 26:30.860
加一个slot

26:30.860 --> 26:36.920
你加一个slot出来

26:36.920 --> 26:37.920
然后呢

26:37.920 --> 26:39.920
我们在使用点上

26:39.920 --> 26:40.920
我们在使用点上

26:40.920 --> 26:42.920
我们不要把它做成

26:42.920 --> 26:43.920
开始关

26:43.920 --> 26:44.920
单标签

26:44.920 --> 26:46.920
我们做多标签处理

26:46.920 --> 26:52.340
我们往里面放内容

26:52.340 --> 26:53.340
div

26:53.340 --> 26:54.340
我们说出

26:55.340 --> 27:01.000
这是slot

27:01.000 --> 27:02.000
插入的

27:02.000 --> 27:04.000
标签

27:04.000 --> 27:05.000
保存

27:06.000 --> 27:08.000
是没有任何的问题的

27:08.000 --> 27:09.000
我们看效果

27:09.000 --> 27:10.000
你看到吗

27:10.000 --> 27:12.000
见面中压根不理你

27:12.000 --> 27:13.000
也就意味着

27:13.000 --> 27:15.000
见面中根本就没有这个

27:15.000 --> 27:17.000
文字的显示

27:17.000 --> 27:18.000
按照正常的话

27:18.000 --> 27:19.000
应该是

27:19.000 --> 27:21.000
这边你说完以后的话

27:21.000 --> 27:22.000
应该你直接

27:22.000 --> 27:25.000
会被插入在组件的里面

27:25.000 --> 27:26.000
会插入在slot里面

27:26.000 --> 27:27.000
对吧

27:27.000 --> 27:28.000
我们看官网的

27:28.000 --> 27:31.000
那个微信小程序官网的结构

27:31.000 --> 27:32.000
slot

27:32.000 --> 27:34.000
首先你看在官网上面

27:34.000 --> 27:36.000
我们这边可以定义一个slot的标签

27:36.000 --> 27:37.000
然后的话

27:37.000 --> 27:39.000
你直接可以把你组件的内容

27:39.000 --> 27:41.000
往这个里面倒

27:41.000 --> 27:42.000
你组件里面写什么东西

27:42.000 --> 27:44.000
你就可以直接把它插入到

27:44.000 --> 27:45.000
这个slot标签中

27:45.000 --> 27:47.000
但是刚才我们看到没像

27:47.000 --> 27:48.000
所以这点呢

27:48.000 --> 27:49.000
就是我们符合了

27:49.000 --> 27:50.000
我们现在mv

27:50.000 --> 27:51.000
官网上面所要求的

27:51.000 --> 27:53.000
这个词无效结构

27:53.000 --> 27:54.000
所以这个不能用

27:54.000 --> 27:55.000
再往下的话

27:55.000 --> 27:57.000
组件样式的话

27:57.000 --> 27:58.000
结构

27:58.000 --> 27:59.000
css结构的话

27:59.000 --> 28:00.000
那么对于那边来说

28:00.000 --> 28:01.000
肯定是没有问题的了

28:01.000 --> 28:03.000
我们大家都可以去编译一下

28:03.000 --> 28:04.000
那个样式结构

28:04.000 --> 28:07.000
我在这就不再花时间去写了

28:07.000 --> 28:08.000
再往下的话

28:08.000 --> 28:10.000
就是我们组件的隔离

28:10.000 --> 28:11.000
那么这一点的话

28:11.000 --> 28:13.000
我们无论是view上面

28:13.000 --> 28:15.000
还是属于微信上面

28:15.000 --> 28:17.000
本身就是一个组件隔离机制

28:17.000 --> 28:19.000
它每一个之间都不会

28:19.000 --> 28:21.000
进行相互的影响

28:21.000 --> 28:22.000
这个就是

28:22.000 --> 28:24.000
那么再往下说的

28:24.000 --> 28:25.000
样式

28:25.000 --> 28:26.000
外部样式

28:26.000 --> 28:28.000
你可以把外部样式引入进来

28:28.000 --> 28:31.000
其实我们从正式开发的角度来讲

28:31.000 --> 28:32.000
外部样式的引入

28:32.000 --> 28:34.000
其实没有多大的意义

28:34.000 --> 28:36.000
我们收过微信小程序

28:36.000 --> 28:37.000
有三种样式结构

28:37.000 --> 28:38.000
第一种是内部样式

28:38.000 --> 28:40.000
第二种是属于全局样式

28:40.000 --> 28:42.000
在vv.wxss里面的

28:42.000 --> 28:43.000
第三种样式呢

28:43.000 --> 28:45.000
就是它本身的负极样式

28:45.000 --> 28:46.000
给到它自己的使用

28:46.000 --> 28:49.000
就是用这个extent class

28:49.000 --> 28:51.000
那么我们看一下

28:51.000 --> 28:53.000
如果说我们这边需要使用到的

28:53.000 --> 28:55.000
都是一个所谓的

28:55.000 --> 28:56.000
比如说我们把所有

28:56.000 --> 28:58.000
把import元素内容

28:58.000 --> 29:00.000
里面的字体都改成的是

29:00.000 --> 29:01.000
红色

29:01.000 --> 29:02.000
那我们在app

29:02.000 --> 29:04.000
我们的最高层的里面

29:04.000 --> 29:05.000
能不能去设计

29:05.000 --> 29:06.000
你还记得吗

29:06.000 --> 29:07.000
我们原来说的是

29:07.000 --> 29:09.000
整个这个

29:09.000 --> 29:11.000
它里面所有的样式在哪

29:11.000 --> 29:13.000
是不是在这

29:13.000 --> 29:15.000
是不是在app.view里面

29:15.000 --> 29:16.000
那我们在这

29:16.000 --> 29:17.000
如果你去设这个指的话

29:17.000 --> 29:18.000
有效果吗

29:18.000 --> 29:19.000
我们来看一下

29:19.000 --> 29:22.500
import元素

29:22.500 --> 29:23.500
我们里面做

29:23.500 --> 29:24.500
Color

29:24.500 --> 29:26.500
指标红色

29:26.500 --> 29:28.500
我们来看一下

29:28.500 --> 29:31.200
有吗

29:32.200 --> 29:33.200
是不是没什么效果

29:33.200 --> 29:35.200
所以它对于整个

29:35.200 --> 29:36.200
这个操作

29:36.200 --> 29:37.200
我们可以看一下

29:37.200 --> 29:39.200
它最后解释出来的

29:39.200 --> 29:40.200
有没有

29:40.200 --> 29:42.200
我们打开它的

29:42.200 --> 29:44.200
就是app.json那个文件

29:44.200 --> 29:49.020
app.wxss那个文件

29:49.020 --> 29:53.940
那个文件的话

29:53.940 --> 29:55.940
它本身就是在我们的app.view里面

29:55.940 --> 29:57.940
所以你这样去

29:57.940 --> 29:59.940
直接定义import元素

29:59.940 --> 30:00.940
你会发现

30:00.940 --> 30:01.940
即使你现在在

30:01.940 --> 30:02.940
组件里面的话

30:02.940 --> 30:03.940
它依然是不生效的

30:03.940 --> 30:04.940
那么这一点

30:04.940 --> 30:05.940
和微信小程序

30:05.940 --> 30:07.940
本质上有一个小区别的

30:07.940 --> 30:09.940
那么我们微信小程序

30:09.940 --> 30:11.940
那个app.view里面的

30:11.940 --> 30:12.940
如果你要对它生效的话

30:12.940 --> 30:13.940
那你只能是单独

30:13.940 --> 30:15.940
在它里面使用

30:15.940 --> 30:16.940
你在这上面对吧

30:16.940 --> 30:17.940
你当然使用

30:17.940 --> 30:19.940
或者说我们直接在这边

30:19.940 --> 30:21.940
单独去定义它的样式

30:21.940 --> 30:22.940
就可以了

30:22.940 --> 30:23.940
我们如果你要

30:23.940 --> 30:24.940
设置的话

30:24.940 --> 30:25.940
你就可以在单页面中

30:25.940 --> 30:27.940
我们在这边单独设置一下

30:27.940 --> 30:29.940
比如说我们在这边

30:29.940 --> 30:31.940
设为import

30:31.940 --> 30:32.940
然后的话

30:32.940 --> 30:37.850
开了我们给的颜色

30:37.850 --> 30:39.850
是比如说绿色

30:39.850 --> 30:41.850
然后我们再给一个

30:41.850 --> 30:43.850
那么这边有个placeholder

30:43.850 --> 30:44.850
对不对

30:44.850 --> 30:45.850
我们有没有

30:45.850 --> 30:52.230
之前就是placeholder

30:52.230 --> 30:53.230
class

30:53.230 --> 30:54.230
有这种东西吗

30:54.230 --> 30:55.230
如果说

30:55.230 --> 30:56.230
大家看一下

30:56.230 --> 30:57.230
如果有的话

30:57.230 --> 30:58.230
它本身自己

30:58.230 --> 30:59.230
也可以定义设置过来

30:59.230 --> 31:00.230
对吧

31:00.230 --> 31:02.230
我们在这边设置一下

31:02.230 --> 31:03.230
class

31:03.230 --> 31:04.230
那么这边我们称之为

31:06.230 --> 31:07.230
font

31:08.230 --> 31:09.230
red

31:09.230 --> 31:10.230
然后

31:10.230 --> 31:11.230
开了

31:11.230 --> 31:12.230
red

31:12.230 --> 31:13.230
然后我们把

31:13.230 --> 31:15.230
这一部分的内容

31:16.230 --> 31:17.230
它是class

31:17.230 --> 31:19.230
我们直接把它写到这来

31:19.230 --> 31:22.120
对吧

31:22.120 --> 31:23.120
写在样式内

31:23.120 --> 31:24.120
我们再来看一下

31:24.120 --> 31:25.120
看到了吗

31:25.120 --> 31:27.120
请输入

31:27.120 --> 31:28.120
请输入这结构

31:28.120 --> 31:29.120
就出来了

31:29.120 --> 31:30.120
对吧

31:30.120 --> 31:57.010
ok

31:57.010 --> 31:58.010
那我们也看到了

31:58.010 --> 31:59.010
那么在我们的

31:59.010 --> 32:01.010
整个组建结构中

32:01.010 --> 32:03.010
我们的整个的组建

32:03.010 --> 32:04.010
包括是我们说

32:04.010 --> 32:05.010
它的外部结构

32:05.010 --> 32:07.010
我们说一般性

32:07.010 --> 32:09.010
现实开发是这样的

32:09.010 --> 32:10.010
一般性的我们的

32:10.010 --> 32:11.010
整个页面中的

32:11.010 --> 32:12.010
特定的一个

32:12.010 --> 32:13.010
组建的样式

32:13.010 --> 32:14.010
在它内部定义

32:14.010 --> 32:17.010
如果有一些集中性的东西的话

32:17.010 --> 32:18.010
有一些集中式的

32:18.010 --> 32:20.010
那我们一般性都会在

32:20.010 --> 32:22.010
外部app.wxss

32:22.010 --> 32:23.010
或者说是我们

32:23.010 --> 32:24.010
称之为全局样式的

32:24.010 --> 32:25.010
表里面

32:25.010 --> 32:26.010
请定义

32:26.010 --> 32:27.010
那么那个里面

32:27.010 --> 32:28.010
有部分是可以的

32:28.010 --> 32:29.010
再有的话

32:29.010 --> 32:31.010
就是我们可以去完成

32:31.010 --> 32:32.010
像父子之间的

32:32.010 --> 32:33.010
这种数据传递

32:33.010 --> 32:35.010
一般在开发过程中

32:35.010 --> 32:37.010
用的不多

32:37.010 --> 32:39.010
因为并不是自己有的

32:39.010 --> 32:40.010
但是外部没有

32:40.010 --> 32:41.010
但是又需要有

32:41.010 --> 32:43.010
我们的复列定传入的

32:43.010 --> 32:44.010
这种的

32:44.010 --> 32:45.010
语法上是存在着

32:45.010 --> 32:47.010
并且我们view上面的话

32:48.010 --> 32:49.010
个人也不建议

32:49.010 --> 32:50.010
大家在这上面

32:50.010 --> 32:51.010
npview的方式上

32:51.010 --> 32:52.010
多用这样的

32:52.010 --> 32:53.010
就是外部

32:53.010 --> 32:54.010
把样式传到

32:54.010 --> 32:55.010
组建内部使用

32:55.010 --> 32:56.010
要不你就全局

32:56.010 --> 32:57.010
要不你就是

32:57.010 --> 32:59.010
组建内部自己完成

32:59.010 --> 33:00.010
ok

33:00.010 --> 33:01.010
那么这样讲好以后

33:01.010 --> 33:02.010
我们来看到的是

33:02.010 --> 33:04.010
综合我们前面讲的

33:04.010 --> 33:06.010
npview在使用

33:06.010 --> 33:07.010
组建的时候

33:07.010 --> 33:09.010
它其实是

33:09.010 --> 33:11.010
我们说只使用了view的

33:11.010 --> 33:13.010
一部分组建的能力

33:13.010 --> 33:15.010
view的组建能力

33:15.010 --> 33:16.010
非常强大

33:16.010 --> 33:17.010
但是为什么用一部分

33:17.010 --> 33:18.010
因为最后

33:18.010 --> 33:20.010
它要去编一层

33:20.010 --> 33:22.010
微信的组建操作

33:22.010 --> 33:23.010
所以这种

33:23.010 --> 33:24.010
转换过程

33:24.010 --> 33:26.010
导致我们很多的view的

33:26.010 --> 33:27.010
本身的特点

33:27.010 --> 33:28.010
或者说

33:28.010 --> 33:29.010
view的很多组建的

33:29.010 --> 33:31.010
一些更多的一些特性

33:31.010 --> 33:32.010
无法在这边使用

33:32.010 --> 33:33.010
那么这一点上面

33:33.010 --> 33:35.010
我们也只能说

33:35.010 --> 33:37.010
它是借助于view的愚法

33:37.010 --> 33:38.010
来做微信的开发

33:38.010 --> 33:40.010
而不是纯粹的view开发

33:40.010 --> 33:42.010
是这个逻辑

33:42.010 --> 33:43.010
ok

33:43.010 --> 33:45.010
那么这是属于view级的

33:45.010 --> 33:46.010
那么同时

33:46.010 --> 33:47.010
微信小成型组建的话

33:47.010 --> 33:49.010
我们还可以给大家去做一个

33:49.010 --> 33:50.010
更详细的

33:50.010 --> 33:51.010
在旁边的

33:51.010 --> 33:52.010
或者是下一节课

33:52.010 --> 33:54.010
给大家再讲一个部分出来

33:54.010 --> 33:56.010
我们现在把view的组建

33:56.010 --> 33:57.010
运用了一下

33:57.010 --> 33:58.010
并且我们自己也能够

33:58.010 --> 34:00.010
进行这方面的一个操作了

34:00.010 --> 34:02.010
千万注意

34:02.010 --> 34:03.010
那么写法上面

34:03.010 --> 34:05.010
一定是放在components里面

34:05.010 --> 34:07.010
然后完成我们现在的

34:07.010 --> 34:08.010
这样的一个

34:08.010 --> 34:10.010
非常简单的一个

34:10.010 --> 34:12.010
定义和操作

34:12.010 --> 34:13.010
如果你外部

34:13.010 --> 34:14.010
还需要再去调用的话

34:14.010 --> 34:15.010
我们说

34:15.010 --> 34:18.010
那么你emitter进行回传

34:18.010 --> 34:19.010
ok

34:19.010 --> 34:20.010
那么这就是我们一个

34:20.010 --> 34:21.010
自定义组建

34:21.010 --> 34:23.010
特别是view的组建的一种使用

34:23.010 --> 34:25.010
然后下一节课

34:25.010 --> 34:26.010
给大家再讲一下

34:26.010 --> 34:28.010
我们微信小成型组建

34:28.010 --> 34:29.010
如果说

34:29.010 --> 34:30.010
你真的要用的话

34:30.010 --> 34:31.010
那么有什么特点

34:31.010 --> 34:32.010
方法

34:32.010 --> 34:33.010
再做一个补充介绍

34:33.010 --> 34:34.010
那么这节课

