WEBVTT

00:01.580 --> 00:07.580
哈喽 大家好 这一集我们来说一个非常出名的一个题目

00:07.580 --> 00:11.580
叫做链表的逆致

00:11.580 --> 00:15.580
添加一张新的幻灯片

00:15.580 --> 00:20.580
之前我们也画过链表 这样的链表

00:20.580 --> 00:22.580
这样的一个链表

00:22.580 --> 00:25.580
现在比如说我给每个链表付一个值

00:25.580 --> 00:29.900
二 三 四 五

00:29.900 --> 00:32.900
那什么叫做逆致呢

00:32.900 --> 00:35.900
什么叫做逆致呢

00:35.900 --> 00:38.900
我们说这个经典的问题叫什么 链表的逆致是吧

00:38.900 --> 00:41.900
链表的逆致

00:41.900 --> 00:43.900
那什么叫逆致呢

00:43.900 --> 00:47.900
现在我们是一指向二指向三指向四指向五对吧

00:47.900 --> 00:49.900
我要让它倒过来

00:49.900 --> 00:52.900
五指向四指向三指向二指向一

00:52.900 --> 00:55.900
我要让它倒过来

00:55.900 --> 00:58.900
那你说这个东西怎么解决

00:58.900 --> 01:01.900
我们先找到先让二指向一

01:01.900 --> 01:04.900
因为我们传入的时候肯定传入的都是一是吧

01:04.900 --> 01:08.900
链表传入的时候永远传入的就是跟接点

01:08.900 --> 01:09.900
传入的是一

01:09.900 --> 01:13.900
那我先让二指向一能行吗

01:13.900 --> 01:17.900
我先让二指向一那是肯定不行的对吧

01:17.900 --> 01:20.900
如果你让二直接指向一了

01:20.900 --> 01:22.900
会出现一个什么情况呢

01:22.900 --> 01:25.900
因为链表里面只有一个nix的值是吧

01:25.900 --> 01:27.900
链表里面是不是只有一个nix的值

01:27.900 --> 01:29.900
二如果指向一了

01:29.900 --> 01:31.900
二就不能指向三了是吧

01:31.900 --> 01:33.900
二如果指向一了

01:33.900 --> 01:37.900
二就只能变到这个位置来

01:37.900 --> 01:40.900
我看这个旋转那哪有

01:40.900 --> 01:41.900
我看

01:41.900 --> 01:43.900
排列

01:43.900 --> 01:45.900
旋转

01:45.900 --> 01:49.900
如果二要是指向一了

01:49.900 --> 01:51.900
二和三就断了是吧

01:51.900 --> 01:52.900
然后二的nix是一

01:52.900 --> 01:53.900
一的nix是二

01:53.900 --> 01:54.900
二的nix一

01:54.900 --> 01:55.900
一的nix是二

01:55.900 --> 01:57.900
就再也找不到三了

01:57.900 --> 01:58.900
对吧

01:58.900 --> 01:59.900
这个链接就断开

01:59.900 --> 02:01.900
这个链接就断开

02:01.900 --> 02:05.900
那么链表逆致的突破点在哪

02:05.900 --> 02:10.900
其实就是中间任意一个接点都不能直接进行旋转

02:10.900 --> 02:12.900
这个东西

02:12.900 --> 02:14.900
这个图里面有一个隐藏的地方

02:14.900 --> 02:15.900
没有画

02:15.900 --> 02:16.900
是什么呢

02:16.900 --> 02:18.900
就是五其实也有一个

02:18.900 --> 02:20.900
之针

02:20.900 --> 02:21.900
他后面也有个箭头

02:21.900 --> 02:22.900
他也有个nix

02:22.900 --> 02:24.900
只不过他的nix

02:24.900 --> 02:26.900
指向了空

02:26.900 --> 02:28.900
我们应该怎么样呢

02:28.900 --> 02:29.900
用这个是吧

02:29.900 --> 02:31.900
只有这个是可以来回灵活的

02:31.900 --> 02:32.900
对吧

02:32.900 --> 02:34.900
我们可以让他先指向

02:34.900 --> 02:37.900
四

02:37.900 --> 02:42.900
然后让四指向空

02:42.900 --> 02:45.900
让四指向空

02:45.900 --> 02:46.900
是吧

02:46.900 --> 02:47.900
这回每一个点

02:47.900 --> 02:48.900
还都是连着的

02:48.900 --> 02:49.900
是吧

02:49.900 --> 02:52.900
然后让四指向三

02:52.900 --> 02:54.900
然后三指向空

02:54.900 --> 02:55.900
二

02:55.900 --> 03:00.400
然后让三指向二

03:00.400 --> 03:03.400
然后二指向空

03:03.400 --> 03:06.400
然后二指向一

03:06.400 --> 03:08.400
一指向空

03:08.400 --> 03:12.350
这样的一个过程

03:12.350 --> 03:13.350
然后一指向空

03:13.350 --> 03:15.350
最后必须要一要指空

03:15.350 --> 03:17.350
一如果要是不指空的话

03:17.350 --> 03:19.350
这个链表就会形成这样的

03:19.350 --> 03:20.350
这个链表会怎么样呢

03:20.350 --> 03:21.350
你如果编练链表的话

03:21.350 --> 03:22.350
五

03:22.350 --> 03:23.350
下一个是四

03:23.350 --> 03:24.350
四的下一个是三

03:24.350 --> 03:25.350
三的下一个是二

03:25.350 --> 03:26.350
二的下一个是一

03:26.350 --> 03:27.350
一的下一个是二

03:27.350 --> 03:28.350
二的下一个是一

03:28.350 --> 03:29.350
就死循环了是吧

03:29.350 --> 03:32.350
所以说一的Nex的必须得重新的

03:32.350 --> 03:33.350
置为空

03:33.350 --> 03:35.350
一得指向这一

03:35.350 --> 03:37.350
指向一个没有的地方去

03:37.350 --> 03:38.350
这样的话

03:38.350 --> 03:41.350
我们才能完成一个链表的逆致

03:41.350 --> 03:43.350
所以链表的逆致的突破点

03:43.350 --> 03:44.350
在于什么

03:44.350 --> 03:47.350
先找到最后一个节点

03:47.350 --> 03:49.350
链表的逆致在于

03:49.350 --> 03:52.350
先找到最后一个节点

03:52.350 --> 03:54.350
然后我们让最后一个节点

03:54.350 --> 03:55.350
就像倒数第二个节点

03:55.350 --> 03:56.350
好了

03:56.350 --> 03:58.350
我们写个代码来写一下

03:58.350 --> 04:05.120
如果你现在感觉

04:05.120 --> 04:07.120
要是看不懂算法的话

04:07.120 --> 04:09.120
就证明基础太弱

04:09.120 --> 04:13.120
先把编程练得熟悉了之后

04:13.120 --> 04:15.120
再来看算吧

04:15.120 --> 04:17.120
先把编程练得熟悉了之后

04:17.120 --> 04:19.120
再来看算法

04:19.120 --> 04:21.120
如果你感觉看不懂这些逻辑的话

04:21.120 --> 04:23.120
那就证明基础实在是太弱了

04:23.120 --> 04:25.120
所以说先练逻辑

04:25.120 --> 04:28.120
然后再理解

04:28.120 --> 04:29.120
怎么样调试

04:29.120 --> 04:31.120
然后能看得懂别人的代码

04:31.120 --> 04:33.120
然后再来看算法

04:33.120 --> 04:35.120
算法必须得学

04:35.120 --> 04:36.120
重要成功

04:36.120 --> 04:38.120
咱可能头一课的时候就说了

04:38.120 --> 04:40.120
你想去一个好点的公司

04:40.120 --> 04:42.120
就必须得看算法

04:42.120 --> 04:44.120
然后链表的逆致

04:44.120 --> 04:47.120
链表的逆致是链表的入门体

04:47.120 --> 04:49.120
一个最入门最入门最入门的体了

04:49.120 --> 04:51.120
没有更入门的的

04:51.120 --> 04:53.120
因为考算法不会靠你便利的

04:53.120 --> 04:55.120
考算法绝对不会靠你便利的

04:55.120 --> 04:57.120
没有意义

04:57.120 --> 04:59.120
所以说链表的逆致

04:59.120 --> 05:01.120
属于是链表的整个算法体里面

05:01.120 --> 05:03.120
最简单的体了

05:05.120 --> 05:07.690
放个圣

05:10.690 --> 05:13.690
我稍微小一点

05:13.690 --> 05:16.690
这次y6等于y6

05:16.690 --> 05:19.690
然后这次的next

05:20.690 --> 05:24.130
等于next

05:24.130 --> 05:26.130
这次的next等于空

05:26.130 --> 05:31.210
然后来创建五个节点

05:31.210 --> 05:33.210
ver一个node1

05:33.210 --> 05:35.210
等于

05:35.210 --> 05:37.210
ny6一个node1

05:37.210 --> 05:39.210
ny6一个node

05:39.210 --> 05:42.970
二三四五

05:42.970 --> 05:46.970
一二三四五

05:46.970 --> 05:49.970
一二三四

05:51.970 --> 05:53.970
五个节点对吧

05:53.970 --> 05:56.970
然后node1的next等于node2

05:56.970 --> 06:00.970
node2的next等于node3

06:01.970 --> 06:04.970
node3的next等于node4

06:04.970 --> 06:07.970
node4的next等于node5

06:11.970 --> 06:13.970
node一二三四五

06:13.970 --> 06:14.970
一共有五个节点

06:14.970 --> 06:17.970
我们需要的是一传二传三传四传五

06:17.970 --> 06:19.970
然后来给的逆致

06:19.970 --> 06:23.970
我们来进行一个逆致

06:24.970 --> 06:26.970
传入一个node

06:26.970 --> 06:28.970
传入一个链表的逆致

06:28.970 --> 06:30.970
我得返回回去一个东西对吧

06:30.970 --> 06:31.970
我得返回去一个东西

06:31.970 --> 06:33.970
首先咱们刚才说了

06:33.970 --> 06:35.970
哪一个点是突破坑

06:35.970 --> 06:37.970
链表的最后一个元素对吧

06:37.970 --> 06:39.970
链表的最后一个元素是突破坑

06:39.970 --> 06:40.970
我们必须得看

06:40.970 --> 06:42.970
e4

06:42.970 --> 06:45.970
route的next

06:45.970 --> 06:48.970
怎么判断它是不是最后一个元素

06:48.970 --> 06:50.970
最后一个元素的特点

06:50.970 --> 06:52.970
是不是route的next等于空

06:52.970 --> 06:54.970
对吧

06:54.970 --> 06:56.970
如果e4的route的next

06:56.970 --> 06:58.970
next的不等于空

06:58.970 --> 07:01.970
那就继续逆致

07:01.970 --> 07:04.970
route的next

07:04.970 --> 07:11.240
这种情况下我们返回的一定是

07:11.240 --> 07:12.240
这种情况下

07:12.240 --> 07:15.240
我们返回的一定是最后一个节点对吧

07:15.240 --> 07:16.240
我们来打印一下

07:16.240 --> 07:18.240
cancel了点log

07:18.240 --> 07:20.240
逆致

07:20.240 --> 07:22.240
传入一个node一

07:30.420 --> 07:32.420
如果next的不等于空

07:32.420 --> 07:37.420
我们就继续的逆致下去对吧

07:37.420 --> 07:40.420
然后我们最后要怎么样

07:40.420 --> 07:44.420
要return这个是吧

07:44.420 --> 07:49.420
一会来码就能找到这个位元素是吧

07:49.420 --> 07:50.420
就能找到这个末尾的界限

07:50.420 --> 07:51.420
我看一下

07:51.420 --> 07:53.420
如果next的不等于空

07:53.420 --> 08:01.510
我们就让它怎么样

08:01.510 --> 08:03.510
如果next的不等于空

08:03.510 --> 08:06.510
我就要继续传是吧

08:08.510 --> 08:10.510
route的next

08:10.510 --> 08:12.510
一旦等于空了

08:12.510 --> 08:14.510
我们就return了是吧

08:14.510 --> 08:15.510
一旦等于空了

08:15.510 --> 08:16.510
我们就return了是吧

08:16.510 --> 08:18.510
所以说

08:22.510 --> 08:25.510
如果next的等于空了

08:25.510 --> 08:27.510
我们要return什么

08:27.510 --> 08:29.510
returnroute

08:29.510 --> 08:30.510
是吧

08:30.510 --> 08:31.510
这是它的出口

08:31.510 --> 08:32.510
是吧

08:32.510 --> 08:38.550
然后我们return的是这个东西

08:38.550 --> 08:39.550
这样的话

08:39.550 --> 08:41.550
我们就能拿到最后一个阶点

08:41.550 --> 08:42.550
对吧

08:42.550 --> 08:43.550
拿到最后一个阶点

08:43.550 --> 08:44.550
也就是说

08:44.550 --> 08:48.550
我们想找到一个链表的最后一个阶点

08:48.550 --> 08:51.550
简写的方式的话只需要两行

08:59.640 --> 09:00.640
e files

09:00.640 --> 09:01.640
这种写法是允许的

09:01.640 --> 09:02.640
如果你的e files

09:02.640 --> 09:03.640
或者i files里面

09:03.640 --> 09:04.640
只有一行买卖的话

09:04.640 --> 09:05.640
是可以这样写的

09:05.640 --> 09:06.640
可以省去划划号

09:06.640 --> 09:09.640
也是负荷规则的

09:09.640 --> 09:10.640
这就是e files是吧

09:10.640 --> 09:12.640
如果你的下一个部位空

09:12.640 --> 09:13.640
我就继续调

09:13.640 --> 09:14.640
是吧

09:14.640 --> 09:16.640
然后我要return你给我返回的结果

09:16.640 --> 09:18.640
如果你的下一个是微空了

09:18.640 --> 09:20.640
我就直接return当前的阶点

09:20.640 --> 09:22.640
这就是我的最后一个阶点

09:22.640 --> 09:24.640
这就是我的最后一个阶点

09:24.640 --> 09:26.640
整个函数的出口才能在那

09:26.640 --> 09:28.640
因为地规了

09:28.640 --> 09:30.640
我们就会有函数出口

09:30.640 --> 09:31.640
是吧

09:31.640 --> 09:32.640
函数的出口

09:32.640 --> 09:34.640
是不是就是e files return

09:34.640 --> 09:36.640
如果走到这就结束了

09:36.640 --> 09:38.640
就不会再向下地规了

09:38.640 --> 09:40.640
我们先能找到一个最后一个阶点

09:40.640 --> 09:41.640
然后呢

09:41.640 --> 09:43.640
你说找到了最后一个阶点了

09:43.640 --> 09:44.640
我们现在这个i files

09:44.640 --> 09:45.640
这里面这个root

09:45.640 --> 09:46.640
就是一个最后一个阶点

09:46.640 --> 09:48.640
我能用它来干嘛呀

09:48.640 --> 09:50.640
我能用它来干嘛

09:51.640 --> 09:52.640
我最后一个阶点

09:52.640 --> 09:53.640
我希望能什么

09:53.640 --> 09:54.640
最后一个阶点

09:54.640 --> 09:56.640
只想到这两个阶点是吧

09:56.640 --> 09:59.640
但是由于我们之前说过一个性质是吧

09:59.640 --> 10:00.640
每一个阶点

10:00.640 --> 10:02.640
都觉得自己是跟阶点

10:02.640 --> 10:03.640
是吧

10:03.640 --> 10:04.640
即使这个5

10:04.640 --> 10:05.640
它没有下一个了

10:05.640 --> 10:06.640
它都觉得我是一个练秒

10:06.640 --> 10:07.640
只不过我这个练秒里面

10:07.640 --> 10:09.640
只有我这一个阶点

10:10.640 --> 10:12.640
能明白这个意思吗

10:12.640 --> 10:14.640
即使它只有一个阶点

10:14.640 --> 10:15.640
它的下一个微空

10:15.640 --> 10:18.640
它也不会认为自己是墨尾阶点

10:18.640 --> 10:20.640
它也会认为我是跟阶点

10:20.640 --> 10:21.640
只不过我这个练秒

10:21.640 --> 10:23.640
只有我一个元素

10:23.640 --> 10:24.640
所以说

10:24.640 --> 10:25.640
这倒数第一个阶点

10:25.640 --> 10:27.640
根本就找不到倒数第二个阶点

10:27.640 --> 10:28.640
因为它没有任何的引用

10:28.640 --> 10:30.640
会指向倒数第二个阶点

10:30.640 --> 10:31.640
所以

10:31.640 --> 10:33.640
我们在判断的时候

10:33.640 --> 10:36.640
不是要判断的是它的next微空

10:36.640 --> 10:39.640
那我们要判断的是什么呢

10:39.640 --> 10:41.640
它的next

10:41.640 --> 10:43.640
的next

10:46.640 --> 10:48.640
我要判断的是这种情况

10:48.640 --> 10:49.640
这种情况

10:49.640 --> 10:51.640
root的next的next微空

10:51.640 --> 10:53.640
这个是以后你们在

10:53.640 --> 10:55.640
做数据结构算法提的时候

10:55.640 --> 10:57.640
经常遇到的

10:57.640 --> 10:58.640
无限的各种next

10:58.640 --> 10:59.640
多个next的点上去

10:59.640 --> 11:00.640
看这个

11:00.640 --> 11:02.640
next的next微空代表什么

11:02.640 --> 11:03.640
代表我当前的阶点

11:03.640 --> 11:05.640
是倒数第二个阶点

11:05.640 --> 11:09.140
代表

11:09.140 --> 11:11.140
当前阶点

11:11.140 --> 11:15.140
是倒数第二个阶点

11:15.140 --> 11:17.140
这没有什么问题

11:17.140 --> 11:18.140
如果next的

11:18.140 --> 11:19.140
下一个的下一个是空

11:19.140 --> 11:21.140
那当前是倒数第二个阶点

11:21.140 --> 11:22.140
下一个是最后一个阶点

11:22.140 --> 11:23.140
是吧

11:23.140 --> 11:24.140
如果当前是倒数第二个阶点

11:24.140 --> 11:25.140
怎么样

11:25.140 --> 11:27.140
让下一个指向我是吧

11:27.140 --> 11:29.140
让下一个指向我是吧

11:29.140 --> 11:30.140
下一个是谁

11:30.140 --> 11:31.140
下一个是next

11:31.140 --> 11:33.140
下一个的指向是谁

11:33.140 --> 11:35.140
是next的

11:35.140 --> 11:36.140
对吧

11:36.140 --> 11:37.140
等于谁

11:37.140 --> 11:39.140
我当前是吧

11:39.140 --> 11:41.140
志强入图

11:41.140 --> 11:49.350
让最后一个阶点指向自己

11:49.350 --> 11:58.090
自己也就是倒数第二个阶点

11:58.090 --> 12:00.090
next的next等于入图

12:00.090 --> 12:04.090
下一个的下一个指向自己

12:04.090 --> 12:05.090
对吧

12:05.090 --> 12:08.090
如果不是倒数第二个怎么办

12:08.090 --> 12:10.720
不是倒数第二个

12:10.720 --> 12:11.720
那就可能是倒数第三了

12:11.720 --> 12:12.720
是吧

12:12.720 --> 12:13.720
因为咱们不会走到倒数第一个

12:13.720 --> 12:14.720
是吧

12:14.720 --> 12:15.720
倒数第一个没有意义是吧

12:15.720 --> 12:16.720
不是倒数第二个

12:16.720 --> 12:18.720
就是倒数第三了是吧

12:18.720 --> 12:20.720
不管是第几个

12:20.720 --> 12:24.720
总之你得让入图的next

12:24.720 --> 12:27.720
的next就是让自己的下一个的指向

12:27.720 --> 12:29.720
指向自己

12:29.720 --> 12:34.290
然后让自己的next

12:34.290 --> 12:36.290
指向空

12:36.290 --> 12:37.290
还记得为什么吗

12:37.290 --> 12:38.290
如果第一个

12:38.290 --> 12:40.290
一直这个自己不指向空的话

12:40.290 --> 12:42.290
第一个他也不会指向空

12:42.290 --> 12:43.290
他如果不指向空的话

12:43.290 --> 12:44.290
这就毁了

12:45.290 --> 12:47.290
二和一就会形成循环

12:47.290 --> 12:50.290
所以他必须得让自己的next等于空

12:50.290 --> 12:53.290
必须得让自己的next等于空

12:53.290 --> 12:57.290
然后我们最后return入图

12:57.290 --> 13:01.620
return是什么呢

13:01.620 --> 13:04.620
我们要最后return是谁

13:04.620 --> 13:06.620
return是不是要新的节点

13:06.620 --> 13:08.620
新的链表的根节点

13:08.620 --> 13:09.620
对吧

13:09.620 --> 13:10.620
我们要return是谁

13:10.620 --> 13:11.620
我们return是不是

13:11.620 --> 13:12.620
应该是这个node5

13:12.620 --> 13:13.620
是吧

13:13.620 --> 13:14.620
只有这个理由

13:14.620 --> 13:16.620
我们才能找得到node5

13:16.620 --> 13:17.620
对吧

13:17.620 --> 13:19.620
我们要return谁

13:19.620 --> 13:26.900
return root的next

13:26.900 --> 13:27.900
对吧

13:27.900 --> 13:30.900
因为我们要return是最后一个节点

13:30.900 --> 13:32.900
最后一个节点就是root的next

13:32.900 --> 13:33.900
对吧

13:33.900 --> 13:36.900
然后我们

13:36.900 --> 13:38.900
在这些位置的时候

13:38.900 --> 13:40.900
我们都会拿到一个结果

13:40.900 --> 13:41.900
拿到一个什么结果呢

13:41.900 --> 13:44.900
就是在这里调一致

13:44.900 --> 13:45.900
root的next

13:46.900 --> 13:48.900
往下面在这里面进行地规

13:48.900 --> 13:50.900
然后能拿到一个结果

13:52.900 --> 13:53.900
拿到结果了之后

13:53.900 --> 13:54.900
我先不动

13:54.900 --> 13:56.900
然后先把他们给

13:56.900 --> 13:58.900
这个指向给它转过来

13:58.900 --> 13:59.900
然后我们再return

14:04.900 --> 14:05.900
这样的话

14:05.900 --> 14:06.900
就这么七八行耐马

14:06.900 --> 14:08.900
就能实现一个逆致

14:08.900 --> 14:10.900
在这里进行地规

14:10.900 --> 14:12.900
相当于这是地规的出口

14:12.900 --> 14:13.900
你会发现

14:13.900 --> 14:15.900
很多的地规都是倒着的

14:15.900 --> 14:16.900
它很难理解

14:16.900 --> 14:18.900
就在于先写出口

14:18.900 --> 14:19.900
我居然没写地规

14:19.900 --> 14:21.900
我就要先写出口

14:21.900 --> 14:23.900
这就是地规的一个特点

14:23.900 --> 14:26.900
任何的地规程序先想出口

14:26.900 --> 14:28.900
任何的地规程序先想出口

14:28.900 --> 14:31.900
想完了出口之后再地规

14:31.900 --> 14:32.900
先写出口

14:32.900 --> 14:34.900
然后再往下地规

14:34.900 --> 14:37.900
和很多同学的思路是

14:37.900 --> 14:38.900
不太吻合的

14:38.900 --> 14:39.900
对吧

14:39.900 --> 14:40.900
因为正常人的思路

14:40.900 --> 14:41.900
不是这么写的

14:41.900 --> 14:42.900
是吧

14:43.900 --> 14:44.900
在那停了

14:44.900 --> 14:45.900
我到时候再说

14:45.900 --> 14:46.900
不是这样

14:46.900 --> 14:48.900
这不是一个正确的思路

14:48.900 --> 14:49.900
地规的正确思路

14:49.900 --> 14:52.900
就是我先找地规出口

14:52.900 --> 14:53.900
记住

14:53.900 --> 14:54.900
这是必须的

14:54.900 --> 14:57.900
千万不要觉得先往下地规没事

14:57.900 --> 14:59.900
以后没法决

14:59.900 --> 15:01.900
非常非常地重要

15:01.900 --> 15:03.900
必须先找地规出口

15:03.900 --> 15:05.900
必须先找地规出口

15:06.900 --> 15:08.900
然后再往下地规

15:08.900 --> 15:09.900
先找地规出口

15:09.900 --> 15:11.900
再往下地规

15:11.900 --> 15:12.900
再想好了

15:12.900 --> 15:14.900
大概是怎样先先进行往下地规

15:14.900 --> 15:16.900
然后先写地规出口

15:16.900 --> 15:18.900
先找出来地规出口

15:18.900 --> 15:19.900
好了

15:19.900 --> 15:21.900
这是 where 一个 result

15:21.900 --> 15:22.900
一个逆致

15:22.900 --> 15:27.490
我们来看一下

15:27.490 --> 15:29.490
我们 where 一个

15:29.490 --> 15:32.490
用入几

15:32.490 --> 15:34.490
等于逆致

15:34.490 --> 15:37.490
将 note 1 链表的逆致

15:37.490 --> 15:40.800
我就能得到一个新的链表了

15:40.800 --> 15:41.800
是吧

15:41.800 --> 15:42.800
我们来便利它

15:42.800 --> 15:49.950
我们来便利它

15:49.950 --> 15:50.950
我们用地规便利

15:50.950 --> 15:51.950
好吧

15:51.950 --> 15:57.950
if root 等于空

15:57.950 --> 15:58.950
rechant

15:58.950 --> 16:00.950
否则的话

16:00.950 --> 16:03.950
输出 root 的 value

16:03.950 --> 16:10.390
然后便利 link root the next

16:10.390 --> 16:16.860
然后我们便利 new root

16:16.860 --> 16:19.860
看逆致了之后它的顺序

16:19.860 --> 16:20.860
逆致之前是12345

16:20.860 --> 16:22.860
逆致了之后就是543

16:23.860 --> 16:25.860
我们能够通过这个

16:25.860 --> 16:26.860
拿到新的节点

16:26.860 --> 16:28.860
能通过这个拿到新的节点

16:28.860 --> 16:30.860
然后这个东西

16:30.860 --> 16:34.860
课后需要大家非常多变的练习

16:34.860 --> 16:35.860
10 变以上

16:35.860 --> 16:37.860
10 变以上

16:37.860 --> 16:38.860
就这个东西

16:38.860 --> 16:40.860
10 变以上都是少的

16:40.860 --> 16:42.860
如果你出学算法的话

16:42.860 --> 16:43.860
看不懂这个的话

16:43.860 --> 16:45.860
练个几十遍

16:45.860 --> 16:46.860
去想个几十遍

16:46.860 --> 16:47.860
只有这一个算法

16:47.860 --> 16:49.860
想了两三天都正常

16:49.860 --> 16:51.860
逆致这一关不过

16:51.860 --> 16:53.860
整个算法体系

16:53.860 --> 16:55.860
后面绝大多数都没法学

16:55.860 --> 16:57.860
逆致

16:57.860 --> 16:59.860
然后还有这个地规

16:59.860 --> 17:00.860
这块的逻辑

17:00.860 --> 17:01.860
如果不过

17:01.860 --> 17:02.860
整个算法体系

17:02.860 --> 17:04.860
后面全都依赖于这个

17:04.860 --> 17:05.860
如果你这块听不懂

17:05.860 --> 17:06.860
你可以用两天

17:06.860 --> 17:07.860
三天

17:07.860 --> 17:09.860
甚至一个星期的时间

17:09.860 --> 17:11.860
来思考这块的逻辑

17:11.860 --> 17:13.860
一直要想清楚为止

17:13.860 --> 17:14.860
不然的话

17:14.860 --> 17:15.860
后面的绝大多数的体

17:15.860 --> 17:17.860
都做不了

17:17.860 --> 17:19.860
这块必须要搞得定

17:19.860 --> 17:20.860
它只是一个思想的一个问题

17:20.860 --> 17:22.860
自己多画两遍图

17:22.860 --> 17:23.860
就像PPT一样

17:23.860 --> 17:24.860
多画几遍图

17:24.860 --> 17:27.860
把它给白了明白

17:27.860 --> 17:28.860
然后你要有其他的想法

17:28.860 --> 17:30.860
你可以尽情的去世

17:30.860 --> 17:32.860
很多的时候都会碰壁

17:32.860 --> 17:34.860
记住你一定要用

17:34.860 --> 17:35.860
地规的方式去世

17:35.860 --> 17:38.860
不要用循环的方式去世

17:38.860 --> 17:39.860
因为以后的

17:39.860 --> 17:41.860
很多很多的算法

17:41.860 --> 17:43.860
都是依赖于这样的地规

17:43.860 --> 17:44.860
这样的思想

17:44.860 --> 17:45.860
非常的重要

17:45.860 --> 17:46.860
我们必须得

17:46.860 --> 17:47.860
现在这一节来之后

17:47.860 --> 17:48.860
先搞定它

17:48.860 --> 17:50.860
然后再取后面的东西

17:50.860 --> 17:51.860
好

17:51.860 --> 17:52.860
这就是我们这一节的内容

