WEBVTT

00:00.560 --> 00:03.560
上节课呢咱们介绍了bibol

00:03.560 --> 00:06.560
那么这节课我们来看一下bibol里边的预设

00:06.560 --> 00:09.560
因为用预设的话比较方便一些啊

00:09.560 --> 00:11.560
就不用去一个一个去按插件啊

00:11.560 --> 00:15.560
按一大堆插件管理起来了配置起来都挺麻烦的

00:15.560 --> 00:18.560
你按一个预设随时就安装很多的插件了

00:18.560 --> 00:22.560
bibol里边呢他提供了一些官方的预设

00:22.560 --> 00:25.560
当然还有一些民间的啊一些第三方的预设

00:25.560 --> 00:27.560
不过呢用的比较少

00:27.560 --> 00:29.560
而官方的预设呢他提供了好几个

00:29.560 --> 00:33.560
只不过呢我们用的最多的就其中一个啊

00:33.560 --> 00:35.560
那么其他的到底是啥呀

00:35.560 --> 00:38.560
其他的是转换的是一些别的语法

00:38.560 --> 00:41.560
比方说你们后边要学习这个语法

00:41.560 --> 00:44.560
啊jsx语法

00:44.560 --> 00:48.560
那么他就可以使用其中一个官方预设来进行解析啊

00:48.560 --> 00:50.560
你们后边会学啊现在还没学

00:50.560 --> 00:53.560
就是他已经不是借不是一个纯正的js语言了

00:53.560 --> 00:57.560
然后呢你们以后呢还会学习这个type script

00:57.560 --> 01:00.560
我之前也讲过这个课啊把讲完了的

01:00.560 --> 01:04.560
那么这个里边的语法呢也可以通过他的官方的

01:04.560 --> 01:07.560
另外一个预设来进行解析啊

01:07.560 --> 01:09.560
不过呢我们这些东西呢目前都预不到

01:09.560 --> 01:12.560
所以说我们目前呢仅仅是解析

01:12.560 --> 01:16.560
皆是语法啊仅仅是解析他那么解析他的话

01:16.560 --> 01:20.560
那么只需要使用其中一个预设啊一个预设就可以了

01:20.560 --> 01:23.560
那么那么这个预设是什么呢名字就叫做啊

01:24.560 --> 01:27.560
然后呢他的名字叫做PresentM

01:27.560 --> 01:29.560
是不是很熟悉

01:29.560 --> 01:32.560
Pose CSS里边就用了star对吧

01:32.560 --> 01:34.560
好来吧我们来安装一下啊

01:34.560 --> 01:38.700
我们这里先安装再说

01:40.700 --> 01:43.700
来一个npm i 横杠地

01:43.700 --> 01:46.700
横杠地然后呢安装一个就叫做

01:46.700 --> 01:48.700
Present

01:48.700 --> 01:51.700
Present就表示预设的意思啊

01:51.700 --> 01:54.700
预设环境好安装一下

01:55.700 --> 01:57.700
安装好了之后呢他可以让你做什么呢

01:57.700 --> 01:59.700
那你可以使用最新的JS 语法

01:59.700 --> 02:01.700
不用去考虑兼容性啊

02:01.700 --> 02:03.700
像我像我以前讲课的时候

02:03.700 --> 02:05.700
我说你兼容性你不用考虑

02:05.700 --> 02:07.700
因为后面有工具可以帮你解决

02:07.700 --> 02:09.700
那就是靠这些东西解决的啊

02:09.700 --> 02:11.700
所以说你大胆的去使用最新语法就可以了

02:11.700 --> 02:13.700
那么他会真那么这样子呢

02:13.700 --> 02:15.700
用了预设之后呢你就不用去

02:15.700 --> 02:17.700
为每一种语法去设置插件了

02:17.700 --> 02:18.700
什么意思呢

02:18.700 --> 02:20.700
就说如果你不用预设的话

02:20.700 --> 02:22.700
那就安装很多的插件比方说

02:23.700 --> 02:25.700
你得安装一个

02:25.700 --> 02:27.700
转换箭头函数的插件

02:27.700 --> 02:28.700
比方说常量啊

02:28.700 --> 02:30.700
常量你需要把它

02:30.700 --> 02:32.700
转换成普通的 var

02:32.700 --> 02:34.700
那么也需要安装一个插件

02:34.700 --> 02:35.700
这不同的插件呢

02:35.700 --> 02:36.700
转换不同的语法

02:36.700 --> 02:38.700
但是你安装了这个预设之后呢

02:38.700 --> 02:40.700
就全部给你转换完了

02:40.700 --> 02:42.700
好安装好了之后呢你怎么配置呢

02:42.700 --> 02:43.700
我们之前说过啊

02:43.700 --> 02:45.700
你得写个配置文件啊

02:45.700 --> 02:47.700
这个配置文件呢我们加一个啊

02:47.700 --> 02:48.700
叫做什么呢

02:48.700 --> 02:51.700
RC

02:51.700 --> 02:53.700
ok 那么这里边配置的是一个

02:53.700 --> 02:56.700
节省对象啊预设啊配置预设Present

02:56.700 --> 02:58.700
预设是一个数组对吧

02:58.700 --> 03:00.700
它里边可以配置多个预设啊

03:00.700 --> 03:01.700
这里顺便说一下吧

03:01.700 --> 03:03.700
如果说你配置的多个预设啊

03:03.700 --> 03:05.700
比方说预设1预设2

03:05.700 --> 03:06.700
那么他到时候呢

03:06.700 --> 03:07.700
编译的时候呢

03:07.700 --> 03:09.700
他是从后向前的啊

03:09.700 --> 03:11.700
其实这个东西呢了解一下就行了啊

03:11.700 --> 03:13.700
也跟我们没多少关系啊

03:13.700 --> 03:15.700
平时用的时候呢也不会影响什么

03:15.700 --> 03:17.700
他就说他先交给这个预设

03:17.700 --> 03:19.700
再交给这个预设啊

03:19.700 --> 03:20.700
依次来进行转换啊

03:20.700 --> 03:21.700
当然我们这里呢

03:21.700 --> 03:23.700
只配置一个就可以了啊

03:23.700 --> 03:25.700
配置一个名字叫啥呢

03:25.700 --> 03:27.700
名字叫做啊

03:27.700 --> 03:29.700
Present

03:29.700 --> 03:30.700
那么就相当于是

03:30.700 --> 03:31.700
他给他配置了过后呢

03:31.700 --> 03:32.700
他就到时候呢

03:32.700 --> 03:33.700
就会用require

03:33.700 --> 03:34.700
把这个预设导入进来

03:34.700 --> 03:36.700
然后呢他就去使用预设里面的功能

03:36.700 --> 03:37.700
再进行转换

03:37.700 --> 03:38.700
没了

03:38.700 --> 03:39.700
没了

03:39.700 --> 03:40.700
好了

03:40.700 --> 03:41.700
用了过后呢

03:41.700 --> 03:42.700
用了过后呢

03:42.700 --> 03:44.700
他就可以进行转换了

03:44.700 --> 03:46.700
好 那么怎么来转换呢

03:46.700 --> 03:47.700
试一下吧

03:47.700 --> 03:48.700
我们这里呢

03:48.700 --> 03:49.700
新建个文件夹啊

03:49.700 --> 03:50.700
给他一个GS

03:50.700 --> 03:51.700
哎

03:51.700 --> 03:52.700
我们这里呢

03:52.700 --> 03:53.700
写上一个GS吧

03:53.700 --> 03:54.700
写上一个

03:54.700 --> 03:55.700
就一个index的GS

03:55.700 --> 03:56.700
好

03:56.700 --> 03:57.700
然后呢

03:57.700 --> 03:58.700
这里边写上一个代码啊

03:58.700 --> 03:59.700
Constatum1

03:59.700 --> 04:00.700
对吧

04:00.700 --> 04:01.700
是不是使用了es6的新语法

04:01.700 --> 04:02.700
对不对

04:02.700 --> 04:03.700
好

04:03.700 --> 04:04.700
接下来我们在npm那边

04:04.700 --> 04:05.700
在这里边

04:05.700 --> 04:07.700
给他写上一个

04:07.700 --> 04:08.700
要啥呀

04:08.700 --> 04:09.700
要bill的吧

04:09.700 --> 04:10.700
啊

04:10.700 --> 04:11.700
好

04:11.700 --> 04:12.700
然后这里边

04:12.700 --> 04:14.700
我们使用bibll

04:14.700 --> 04:15.700
路径

04:15.700 --> 04:16.700
GS文件夹

04:16.700 --> 04:17.700
然后呢

04:17.700 --> 04:18.700
横杠D

04:18.700 --> 04:19.700
表示我们输出的文件夹呢

04:19.700 --> 04:20.700
是desd

04:20.700 --> 04:21.700
OK

04:21.700 --> 04:22.700
那么接下来

04:22.700 --> 04:23.700
让他转换一下吧

04:23.700 --> 04:25.700
再加一个监控

04:25.700 --> 04:26.700
横杠W

04:26.700 --> 04:27.700
监控

04:27.700 --> 04:29.700
监控文件的变化

04:29.700 --> 04:30.700
好 来吧

04:30.700 --> 04:33.700
npm run build

04:33.700 --> 04:34.700
好

04:34.700 --> 04:35.700
那么转换完了

04:35.700 --> 04:36.700
你看转换了

04:36.700 --> 04:37.700
结果是变成二了

04:37.700 --> 04:38.700
对吧

04:38.700 --> 04:39.700
他给你加入了

04:39.700 --> 04:40.700
研究模式

04:40.700 --> 04:41.700
变成二了

04:41.700 --> 04:42.700
就这么简单

04:42.700 --> 04:43.700
比方说箭头函数

04:43.700 --> 04:44.700
来吧

04:45.700 --> 04:46.700
来一个箭头函数

04:46.700 --> 04:47.700
来一个箭头函数

04:47.700 --> 04:48.700
嗯

04:48.700 --> 04:49.700
箭头函数

04:49.700 --> 04:50.700
我们这里输出一个b

04:50.700 --> 04:51.700
啊

04:51.700 --> 04:52.700
输出一个b

04:52.700 --> 04:53.700
好 看一下他转换的结果

04:53.700 --> 04:55.700
就转换了这样的结果了

04:55.700 --> 04:56.700
对吧

04:56.700 --> 04:57.700
他就自动给你转换了

04:57.700 --> 04:58.700
把箭头函数

04:58.700 --> 04:59.700
转换成了普通的方式

04:59.700 --> 05:00.700
哎

05:00.700 --> 05:01.700
那有一个人说

05:01.700 --> 05:02.700
那箭头函数里面的Z是咋办啊

05:02.700 --> 05:03.700
Z是咋办

05:03.700 --> 05:04.700
那我们看一下吧

05:04.700 --> 05:05.700
随便写个

05:05.700 --> 05:06.700
够早啊

05:06.700 --> 05:07.700
随便写个函数吧

05:07.700 --> 05:08.700
啊

05:08.700 --> 05:09.700
一个没色的

05:09.700 --> 05:10.700
一个函数

05:10.700 --> 05:11.700
这个函数里边呢

05:11.700 --> 05:12.700
我们使用一个变量

05:12.700 --> 05:13.700
C

05:13.700 --> 05:14.700
箭头函数

05:14.700 --> 05:15.700
啊

05:15.700 --> 05:16.700
箭头函数

05:16.700 --> 05:17.700
我们这里输出Z

05:17.700 --> 05:18.700
那看一下他Z是怎么转换的呢

05:18.700 --> 05:19.700
啊

05:19.700 --> 05:20.700
保存啊

05:20.700 --> 05:21.700
你看这边

05:21.700 --> 05:22.700
Z是怎么转换的

05:22.700 --> 05:23.700
是不是用以前的老办法

05:23.700 --> 05:24.700
对吧

05:24.700 --> 05:25.700
先把Z保存一下啊

05:25.700 --> 05:27.700
然后在箭头函数里边呢

05:27.700 --> 05:29.700
使用这个变量就可以了

05:29.700 --> 05:30.700
没了意思吧

05:30.700 --> 05:31.700
OK

05:31.700 --> 05:33.700
他就是通过这种类似的方式

05:33.700 --> 05:34.700
来进行转换

05:34.700 --> 05:35.700
好

05:35.700 --> 05:36.700
这就是啊

05:36.700 --> 05:37.700
这个预设

05:37.700 --> 05:39.700
那么这个预设里边呢

05:39.700 --> 05:40.700
我们来看一看啊

05:40.700 --> 05:41.700
他除了配置啊

05:41.700 --> 05:42.700
怎么配置就这样配置

05:42.700 --> 05:43.700
然后呢

05:43.700 --> 05:44.700
再看一下一些别的东西

05:44.700 --> 05:45.700
就是第一个呢

05:45.700 --> 05:46.700
就是兼容的浏览器

05:46.700 --> 05:48.700
就这个预设呢

05:48.700 --> 05:49.700
他

05:49.700 --> 05:50.700
他

05:50.700 --> 05:51.700
他把它转换

05:51.700 --> 05:52.700
转换了过后

05:52.700 --> 05:53.700
他兼容哪些浏览器

05:53.700 --> 05:54.700
是不是有个浏览器范围

05:54.700 --> 05:56.700
你兼容的浏览器范围越广了

05:56.700 --> 05:59.700
和兼容的浏览器范围越窄

05:59.700 --> 06:01.700
那么都会影响他的

06:01.700 --> 06:02.700
转换啊

06:02.700 --> 06:03.700
那么这个预设呢

06:03.700 --> 06:04.700
他怎么来

06:04.700 --> 06:05.700
告诉他

06:05.700 --> 06:06.700
兼容的浏览器呢

06:06.700 --> 06:08.700
跟那个PoseCSS是一样的

06:08.700 --> 06:09.700
所以说我们之前推荐

06:09.700 --> 06:11.700
大家使用这个东西对吧

06:11.700 --> 06:14.700
是一个标准的浏览器的一个配置

06:14.700 --> 06:16.700
就是解析范围的配置文件

06:16.700 --> 06:17.700
那么这个配置文件

06:17.700 --> 06:19.700
他可以被他来读取

06:19.700 --> 06:20.700
也可以被这个

06:20.700 --> 06:21.700
白宝来读取

06:21.700 --> 06:23.700
所以说我们再新建个这个文件

06:23.700 --> 06:25.700
来告诉他解析的浏览器范围

06:25.700 --> 06:26.700
这是我们通常的做法

06:26.700 --> 06:28.700
他当然还有他的默认值啊

06:28.700 --> 06:30.700
我们就用之前的值嘛

06:30.700 --> 06:31.700
写这儿

06:31.700 --> 06:32.700
写这儿

06:32.700 --> 06:33.700
那么这个东西呢

06:33.700 --> 06:34.700
就会被他读取到

06:34.700 --> 06:35.700
但目前来看的话

06:35.700 --> 06:36.700
解析也没有什么影响

06:36.700 --> 06:38.700
也没有什么变化

06:38.700 --> 06:39.700
就这么回事

06:39.700 --> 06:41.700
总之他会读取这个文件

06:41.700 --> 06:43.700
来对这个文件里边

06:43.700 --> 06:46.700
所包含的浏览器范围来进行解析

06:46.700 --> 06:48.700
我们通常的都会建立这么一个文件

06:48.700 --> 06:49.700
ok

06:49.700 --> 06:51.700
这是他兼容的浏览器

06:51.700 --> 06:52.700
好

06:52.700 --> 06:53.700
然后我们再来看一下

06:53.700 --> 06:56.700
他其实自身还有一些配置

06:56.700 --> 06:57.700
也就是说

06:57.700 --> 06:58.700
我们呢

06:58.700 --> 06:59.700
现在目前呢

06:59.700 --> 07:00.700
只是告诉白宝

07:00.700 --> 07:01.700
要使用这个预设

07:01.700 --> 07:03.700
那么这个预设在解析的过程中

07:03.700 --> 07:06.700
他具体的某一些解析过程

07:06.700 --> 07:08.700
可以对他进行配置

07:08.700 --> 07:10.700
那么对他来怎么来配置呢

07:10.700 --> 07:11.700
配置的方式呢

07:11.700 --> 07:12.700
是这样子的

07:12.700 --> 07:14.700
你这个地方就不能直接写个字不串了

07:14.700 --> 07:15.700
你写个字不串了

07:15.700 --> 07:16.700
那配置写哪了

07:16.700 --> 07:18.700
对他的配置就不知道怎么写了

07:18.700 --> 07:19.700
那么这里呢

07:19.700 --> 07:21.700
我们把它写成一个数组

07:21.700 --> 07:22.700
就把它写成一个数组

07:22.700 --> 07:24.700
输出的第一项是

07:24.700 --> 07:25.700
预设的名称

07:25.700 --> 07:27.700
就是我们要使用哪个预设

07:27.700 --> 07:28.700
预设的名称

07:28.700 --> 07:29.700
输出的第二项

07:29.700 --> 07:30.700
就是他的配置对象

07:30.700 --> 07:32.700
一个配置对象

07:32.700 --> 07:33.700
那么他里边有哪些配置呢

07:33.700 --> 07:36.700
可以针对他来进行配置呢

07:37.700 --> 07:40.700
这里呢有一个网页

07:40.700 --> 07:41.700
上的官方文档

07:41.700 --> 07:42.700
不是官方文档

07:42.700 --> 07:43.700
中文文档

07:43.700 --> 07:44.700
中文文档里边

07:44.700 --> 07:46.700
他这里虽然没有翻译过来

07:46.700 --> 07:47.700
他里边有哪些配置

07:47.700 --> 07:48.700
你看这边

07:48.700 --> 07:51.700
Target,Spec,Doos,Modules,Debug等等

07:51.700 --> 07:52.700
他有一些配置

07:52.700 --> 07:53.700
不过呢

07:53.700 --> 07:54.700
这些配置呢

07:54.700 --> 07:55.700
大部分呢

07:55.700 --> 07:56.700
我们都不太用得到

07:56.700 --> 07:57.700
我们用的

07:57.700 --> 07:58.700
如果说要对他配置的话

07:58.700 --> 07:59.700
一般会用这个

07:59.700 --> 08:01.700
叫做UseBuildings

08:01.700 --> 08:02.700
这什么意思呢

08:02.700 --> 08:03.700
他配置的方式

08:03.700 --> 08:05.700
就是在这里写个对象

08:06.700 --> 08:08.700
而我们平时用的呢

08:08.700 --> 08:09.700
就是这个

08:09.700 --> 08:10.700
他里边有这么一个配置

08:10.700 --> 08:11.700
叫Build

08:11.700 --> 08:13.700
叫什么名字

08:13.700 --> 08:14.700
复制一下

08:14.700 --> 08:16.700
就配置他

08:16.700 --> 08:17.700
配置他

08:17.700 --> 08:18.700
那么配置他

08:18.700 --> 08:19.700
是什么意思呢

08:19.700 --> 08:20.700
看一下这边

08:20.700 --> 08:21.700
他的默认值呢

08:21.700 --> 08:23.700
这个配置的默认值是Force

08:23.700 --> 08:25.700
那么他有什么用呢

08:25.700 --> 08:27.700
因为我们这个PresenceM

08:27.700 --> 08:29.700
就是这个预设啊

08:29.700 --> 08:31.700
它仅仅是转换新的语法

08:31.700 --> 08:33.700
它不处理新的API

08:33.700 --> 08:34.700
这啥意思

08:34.700 --> 08:36.700
比方说我们这里有这么一个API

08:36.700 --> 08:38.700
我们这里先不写吧

08:38.700 --> 08:39.700
先不写

08:39.700 --> 08:40.700
比方说我们看这

08:40.700 --> 08:41.700
我们写了这么一个API

08:41.700 --> 08:42.700
对吧

08:42.700 --> 08:44.700
这是ES6里面的提供了新的API

08:44.700 --> 08:45.700
对不对

08:45.700 --> 08:46.700
因为我们知道ES6里面

08:46.700 --> 08:47.700
它提供了一些新的API

08:47.700 --> 08:48.700
同时呢

08:48.700 --> 08:50.700
提供一些新的语法

08:50.700 --> 08:51.700
你们能知道

08:51.700 --> 08:53.700
语法和API的区别吗

08:53.700 --> 08:55.700
什么叫语法

08:55.700 --> 08:57.700
比较像这种

08:57.700 --> 08:58.700
就叫新的语法

08:58.700 --> 08:59.700
是不是多了一个关键字

08:59.700 --> 09:01.700
以前是从来没有这个关键字的

09:01.700 --> 09:02.700
对吧

09:02.700 --> 09:03.700
多了一个关键字

09:03.700 --> 09:04.700
这叫语法

09:04.700 --> 09:05.700
比方说吧

09:05.700 --> 09:06.700
我们还有这个

09:06.700 --> 09:07.700
还有这个就是

09:07.700 --> 09:08.700
2

09:08.700 --> 09:09.700
2

09:09.700 --> 09:10.700
2个新号3

09:10.700 --> 09:11.700
对吧

09:11.700 --> 09:12.700
这也是ES6的

09:12.700 --> 09:13.700
表示2的3次房

09:13.700 --> 09:14.700
这都是新的语法

09:14.700 --> 09:15.700
那么你会看到

09:15.700 --> 09:17.700
新的语法

09:17.700 --> 09:18.700
新的语法

09:18.700 --> 09:19.700
它可以解析

09:19.700 --> 09:20.700
你看是吧

09:20.700 --> 09:21.700
把语法解析了

09:21.700 --> 09:22.700
把Count变成Var了

09:22.700 --> 09:23.700
对吧

09:23.700 --> 09:24.700
把2的3次房变成MassPow

09:24.700 --> 09:25.700
对吧

09:25.700 --> 09:26.700
用这种方式来

09:26.700 --> 09:27.700
实现2的3次房

09:27.700 --> 09:28.700
但是呢

09:28.700 --> 09:29.700
新的API

09:29.700 --> 09:30.700
是不是没有解决

09:30.700 --> 09:31.700
什么叫新的API

09:31.700 --> 09:32.700
就是多了一些对象

09:32.700 --> 09:33.700
它不是什么新语法

09:33.700 --> 09:35.700
还是用以前的语法

09:35.700 --> 09:36.700
新建个

09:36.700 --> 09:37.700
创建一个对象

09:37.700 --> 09:38.700
是不是还是以前的语法

09:38.700 --> 09:39.700
只不过了

09:39.700 --> 09:40.700
它多了一个构造函数

09:40.700 --> 09:41.700
是不是

09:41.700 --> 09:42.700
这就是新的API

09:42.700 --> 09:43.700
多了一些函数

09:43.700 --> 09:44.700
多了一些对象

09:44.700 --> 09:46.700
那么像这些东西

09:46.700 --> 09:48.700
这个预设是不去处理的

09:48.700 --> 09:49.700
也不该它处理

09:49.700 --> 09:51.700
它就是来转换新的语法

09:51.700 --> 09:52.700
你看新的

09:52.700 --> 09:53.700
新的那个就是

09:53.700 --> 09:55.700
对比一下吧

09:55.700 --> 09:57.700
新的那个API

09:57.700 --> 09:59.700
它是不做任何处理的

09:59.700 --> 10:00.700
是不是

10:00.700 --> 10:01.700
还是以前的

10:01.700 --> 10:02.700
你写的是什么

10:02.700 --> 10:03.700
它可以转换什么

10:03.700 --> 10:04.700
它无非的转换的语法

10:04.700 --> 10:06.700
就是把箭头函数给你转换了

10:06.700 --> 10:07.700
它这个东西

10:07.700 --> 10:08.700
并没有给你实现

10:08.700 --> 10:10.700
那么遇到一些老的浏览器

10:10.700 --> 10:11.700
它浏览器里面

10:11.700 --> 10:12.700
本身就没有这个东西

10:12.700 --> 10:13.700
没有这个Promise对象

10:13.700 --> 10:14.700
那怎么办

10:14.700 --> 10:17.700
那你是不是得自己去写一个

10:17.700 --> 10:19.700
方形Promise

10:19.700 --> 10:21.700
写一个这么一个构造函数出来

10:21.700 --> 10:22.700
对不对

10:22.700 --> 10:23.700
你自己得去构建这么一个

10:23.700 --> 10:24.700
构造函数出来

10:24.700 --> 10:25.700
那么当然你自己手动构建的话

10:25.700 --> 10:26.700
也可以

10:26.700 --> 10:28.700
但是只不过太麻烦了

10:28.700 --> 10:29.700
那么这个东西

10:29.700 --> 10:30.700
为了解决这个问题的话

10:30.700 --> 10:32.700
那么它就可以使用这个配置箱

10:32.700 --> 10:33.700
叫Use Built-ins

10:33.700 --> 10:35.700
它默认的方式就是Force

10:35.700 --> 10:36.700
Force什么意思呢

10:36.700 --> 10:37.700
它默认情况下

10:39.700 --> 10:41.700
它默认情况下

10:41.700 --> 10:42.700
它为Force

10:42.700 --> 10:44.700
不会注入任何新的API

10:44.700 --> 10:45.700
就是我不会给你手动的

10:45.700 --> 10:47.700
去构建一些API

10:48.700 --> 10:50.700
如果说你把它设置为UZG

10:50.700 --> 10:51.700
就不一样了

10:51.700 --> 10:52.700
比方说

10:52.700 --> 10:56.400
咱们把它设置为UZG

10:56.400 --> 10:57.400
看一下

10:57.400 --> 11:01.420
把这个东西设置成

11:01.420 --> 11:02.420
这个叫做

11:02.420 --> 11:03.420
叫做

11:04.420 --> 11:06.420
Use Built-ins

11:06.420 --> 11:08.420
把它设置为UZG

11:08.420 --> 11:10.420
把它设置为UZG

11:10.420 --> 11:12.420
设置为UZG之后

11:12.420 --> 11:14.420
那么就表示的是

11:14.420 --> 11:16.420
按照你按虚

11:16.420 --> 11:18.420
按虚给你构建新的API

11:18.420 --> 11:19.420
什么叫按虚构建新的API

11:19.420 --> 11:20.420
你看一下

11:20.420 --> 11:21.420
就这边

11:21.420 --> 11:22.420
我们使用了Promise

11:22.420 --> 11:23.420
对吧

11:23.420 --> 11:24.420
是不是使用了一些新的API

11:24.420 --> 11:25.420
那么这边

11:25.420 --> 11:26.420
它就会构建新的API

11:26.420 --> 11:28.420
就这么个意思

11:28.420 --> 11:29.420
那么这里

11:29.420 --> 11:33.620
再运行一次

11:33.620 --> 11:35.620
没变化了

11:35.620 --> 11:36.620
等一下

11:36.620 --> 11:37.620
我们看一下

11:37.620 --> 11:38.620
哪里写错了

11:39.620 --> 11:41.620
Use Built-ins

11:41.620 --> 11:43.620
看一下

11:43.620 --> 11:44.620
这里有大写

11:44.620 --> 11:46.620
这是个陀峰迷迷迷法

11:46.620 --> 11:48.620
Use Built-ins

11:48.620 --> 11:49.620
它都包错了

11:49.620 --> 11:51.620
配置向无效

11:53.620 --> 11:54.620
那么现在看一下

11:54.620 --> 11:56.620
我们的元代码是这样子

11:56.620 --> 11:58.620
新语法是不是转换了

11:58.620 --> 11:59.620
新语法转换了

11:59.620 --> 12:01.620
我们把新语法删掉

12:01.620 --> 12:02.620
那么我们使用了Promise之后

12:02.620 --> 12:03.620
这是一个新的API

12:03.620 --> 12:04.620
它转换的时候

12:04.620 --> 12:05.620
它干了什么事

12:05.620 --> 12:06.620
你看一下

12:06.620 --> 12:07.620
它转换之后

12:07.620 --> 12:08.620
由于呢

12:08.620 --> 12:09.620
这是一个新的API

12:09.620 --> 12:10.620
那么这个新的API

12:10.620 --> 12:11.620
它自己呢

12:11.620 --> 12:12.620
不去给你构建

12:12.620 --> 12:13.620
它认为呢

12:13.620 --> 12:14.620
它会使用另外一个酷

12:14.620 --> 12:15.620
叫做core.js

12:15.620 --> 12:17.620
它会使用这个酷

12:17.620 --> 12:19.620
它会去从这个酷里面

12:19.620 --> 12:21.620
去读新的API

12:21.620 --> 12:22.620
这个酷是什么东西呢

12:22.620 --> 12:23.620
这个酷

12:23.620 --> 12:24.620
这个core.js

12:24.620 --> 12:25.620
是什么东西呢

12:25.620 --> 12:26.620
这个酷啊

12:26.620 --> 12:27.620
它里面就包含了

12:27.620 --> 12:29.620
所有的新的API

12:29.620 --> 12:31.620
里面的具体实现

12:31.620 --> 12:32.620
就是一些脑子里面

12:32.620 --> 12:33.620
其实它可能不支持

12:33.620 --> 12:34.620
一些新的API

12:34.620 --> 12:35.620
那么这个酷

12:35.620 --> 12:36.620
利用这个酷

12:36.620 --> 12:37.620
它里面就包含了

12:37.620 --> 12:39.620
这些新的API的实现

12:39.620 --> 12:40.620
比方说我们再来写一个

12:40.620 --> 12:43.620
什么ArrayOf

12:43.620 --> 12:44.620
对吧

12:44.620 --> 12:45.620
那么这个地方

12:45.620 --> 12:47.620
来写这么一个东西

12:47.620 --> 12:48.620
这是不是新的API

12:48.620 --> 12:49.620
包存

12:49.620 --> 12:50.620
你看是不是多了一个

12:50.620 --> 12:51.620
ES6ArrayOf

12:51.620 --> 12:52.620
对不对

12:52.620 --> 12:53.620
那么这个酷里边

12:53.620 --> 12:55.620
这个酷

12:55.620 --> 12:56.620
里边它会包含

12:56.620 --> 12:58.620
那个就是新的API

12:58.620 --> 12:59.620
所以说

12:59.620 --> 13:00.620
这个预设

13:00.620 --> 13:01.620
它是用这么一种

13:01.620 --> 13:02.620
实想来实现的

13:02.620 --> 13:03.620
就是说

13:03.620 --> 13:05.620
如果说你是新的API的话

13:05.620 --> 13:06.620
我一般默认情况下

13:06.620 --> 13:07.620
不给你进行

13:07.620 --> 13:08.620
任何处理

13:08.620 --> 13:09.620
但是如果说

13:09.620 --> 13:11.620
你配置为UZ几之后呢

13:11.620 --> 13:12.620
你配置为UZ几之后呢

13:12.620 --> 13:14.620
我会使用另外一个酷

13:14.620 --> 13:15.620
叫core.js

13:15.620 --> 13:16.620
它自己不处理

13:16.620 --> 13:17.620
我会从另外一个

13:17.620 --> 13:19.620
酷里边去导入它的实现

13:19.620 --> 13:20.620
它就加入了这么一个东西

13:20.620 --> 13:21.620
对吧

13:21.620 --> 13:22.620
你不是用了Promise吗

13:22.620 --> 13:23.620
Promise导入新的

13:23.620 --> 13:24.620
对不对

13:24.620 --> 13:26.620
你不是用了ArrayOf吗

13:26.620 --> 13:27.620
导入新的

13:27.620 --> 13:28.620
这个东西

13:28.620 --> 13:30.620
好像是它们两个里边的一带

13:30.620 --> 13:32.620
它们两个里边的一带

13:32.620 --> 13:33.620
OK

13:33.620 --> 13:34.620
那么它就会把这些东西

13:34.620 --> 13:35.620
你说

13:35.620 --> 13:37.620
你需要的新的API

13:37.620 --> 13:38.620
在这些酷里边

13:38.620 --> 13:39.620
给导入新的

13:39.620 --> 13:40.620
所以说

13:40.620 --> 13:41.620
如果说我们要运行

13:41.620 --> 13:42.620
再让代码能运行吗

13:42.620 --> 13:43.620
现在

13:43.620 --> 13:44.620
能运行吗

13:44.620 --> 13:45.620
是不能运行

13:45.620 --> 13:46.620
对吧

13:46.620 --> 13:47.620
不能运行

13:47.620 --> 13:48.620
它告诉你

13:48.620 --> 13:49.620
core.js是不存在的

13:49.620 --> 13:51.620
它找不到这个酷

13:51.620 --> 13:52.620
对吧

13:52.620 --> 13:53.620
找不到

13:53.620 --> 13:54.620
那你说明啥

13:54.620 --> 13:55.620
说明你是不是得安装

13:55.620 --> 13:56.620
对吧

13:56.620 --> 13:57.620
得安装的core.js

13:57.620 --> 13:58.620
它只

13:58.620 --> 13:59.620
我们这个预设

13:59.620 --> 14:00.620
它只是帮你转换成

14:00.620 --> 14:01.620
这种代码格式

14:01.620 --> 14:02.620
但是

14:02.620 --> 14:03.620
这个代码格式最终的代码

14:03.620 --> 14:04.620
要运行

14:04.620 --> 14:05.620
是不是还得依赖这个core.js

14:05.620 --> 14:06.620
对吧

14:06.620 --> 14:07.620
要依赖这个酷

14:07.620 --> 14:08.620
所以说

14:08.620 --> 14:09.620
我们还要去安装这个

14:09.620 --> 14:11.620
NPNI

14:11.620 --> 14:12.620
NANDI

14:12.620 --> 14:13.620
core.js

14:13.620 --> 14:14.620
core.js

14:14.620 --> 14:15.620
所以

14:15.620 --> 14:17.620
这里我们就不是开发依赖了

14:17.620 --> 14:20.620
就是普通依赖了

14:20.620 --> 14:21.620
为什么

14:21.620 --> 14:22.620
什么叫普通依赖

14:22.620 --> 14:23.620
就是我们注意中

14:23.620 --> 14:24.620
要运行的代码

14:24.620 --> 14:25.620
它需要依赖的东西

14:25.620 --> 14:26.620
我们最重要运行的代码

14:26.620 --> 14:27.620
是不是要依赖core.js

14:27.620 --> 14:28.620
那么它就不再是

14:28.620 --> 14:30.620
不再是开发依赖了

14:30.620 --> 14:31.620
开发依赖是什么意思

14:31.620 --> 14:32.620
我只是在开发阶段

14:32.620 --> 14:33.620
我注意中运行

14:33.620 --> 14:34.620
我不需要它

14:34.620 --> 14:35.620
像这个bible

14:35.620 --> 14:36.620
最终运行去不需要bible

14:36.620 --> 14:37.620
不需要

14:37.620 --> 14:38.620
我们bible只是

14:38.620 --> 14:39.620
把我们的原代码

14:39.620 --> 14:41.620
编印成最终需要运行的代码

14:41.620 --> 14:42.620
所以说

14:42.620 --> 14:43.620
这个地方

14:43.620 --> 14:44.620
不再是开发依赖了

14:44.620 --> 14:45.620
其实

14:45.620 --> 14:47.620
如果说

14:47.620 --> 14:49.620
你写的东西

14:49.620 --> 14:50.620
不是要把它

14:50.620 --> 14:51.620
打成一个包

14:51.620 --> 14:53.620
发布到NPNI上面去

14:53.620 --> 14:55.620
就是你自己去写

14:55.620 --> 14:56.620
一个第三方库

14:56.620 --> 14:57.620
给别人用

14:57.620 --> 14:58.620
如果说你不是

14:58.620 --> 14:59.620
这种情况的话

14:59.620 --> 15:00.620
什么开发依赖

15:00.620 --> 15:01.620
什么普通依赖

15:01.620 --> 15:02.620
都无所谓

15:02.620 --> 15:03.620
都无所谓的

15:03.620 --> 15:04.620
那个东西

15:04.620 --> 15:05.620
我之前讲

15:05.620 --> 15:06.620
包管理系也说过

15:06.620 --> 15:07.620
其实就是

15:07.620 --> 15:09.620
你发布包的时候有意义

15:09.620 --> 15:10.620
那么这里

15:10.620 --> 15:12.620
就把core.js安装好了

15:12.620 --> 15:13.620
但是

15:13.620 --> 15:14.620
现在还是有一个问题

15:14.620 --> 15:15.620
你看一下

15:15.620 --> 15:16.620
现在我们运行

15:16.620 --> 15:19.620
是不是还是出问题的

15:19.620 --> 15:20.620
它说

15:20.620 --> 15:21.620
还是找不到

15:21.620 --> 15:22.620
你看是不是还是找不到

15:23.620 --> 15:24.620
再来一次

15:24.620 --> 15:25.620
是不是还是找不到

15:25.620 --> 15:26.620
这是为什么

15:26.620 --> 15:28.620
它的原因是

15:28.620 --> 15:31.620
我们目前安装的core.js

15:31.620 --> 15:33.620
我们目前安装的core.js

15:33.620 --> 15:34.620
版本是3

15:34.620 --> 15:36.620
主版本是3

15:36.620 --> 15:37.620
但是这个预设

15:37.620 --> 15:39.620
它使用的是

15:39.620 --> 15:41.620
core.js的版本是2

15:41.620 --> 15:42.620
它使用的版本是2

15:42.620 --> 15:44.620
默认值是2

15:44.620 --> 15:45.620
那么怎么来告诉他

15:45.620 --> 15:46.620
要使用最新版本

15:46.620 --> 15:47.620
就是3个版本的

15:47.620 --> 15:49.620
那么就可以通过这个

15:49.620 --> 15:51.620
配合来告诉他

15:51.620 --> 15:53.620
我们通过他来告诉他

15:53.620 --> 15:54.620
因为他之前

15:54.620 --> 15:55.620
编写这个库的时候

15:55.620 --> 15:56.620
他的版本

15:56.620 --> 15:57.620
core.js的版本是2

15:57.620 --> 15:59.620
也是个比较经典的版本

15:59.620 --> 16:00.620
那么现在变成3了之后

16:00.620 --> 16:02.620
它的一些模块路径变了

16:02.620 --> 16:03.620
所以说

16:03.620 --> 16:04.620
你要告诉他

16:04.620 --> 16:05.620
你编译过后

16:05.620 --> 16:06.620
你使用的core.js的版本

16:06.620 --> 16:07.620
是3

16:07.620 --> 16:08.620
这个版本

16:08.620 --> 16:09.620
那么这样子一来

16:12.620 --> 16:14.620
这样子一来一编译

16:14.620 --> 16:15.620
那么一看

16:15.620 --> 16:16.620
是不是路径

16:16.620 --> 16:18.620
会发生协取的变化

16:18.620 --> 16:20.620
路径会发生协取的变化

16:20.620 --> 16:21.620
那么这样子

16:21.620 --> 16:22.620
我们再来看运行

16:24.620 --> 16:25.620
行动

16:25.620 --> 16:26.620
运行

16:26.620 --> 16:27.620
是不是没爆错了

16:27.620 --> 16:28.620
对吧 正常运行

16:28.620 --> 16:29.620
对吧

16:29.620 --> 16:30.620
因为像这些Promise

16:30.620 --> 16:32.620
在这些库里边都存在

16:32.620 --> 16:34.620
都存在

16:34.620 --> 16:36.620
提供了ArrayOf的协法

16:36.620 --> 16:37.620
提供了Promise的协合

16:37.620 --> 16:38.620
API

16:38.620 --> 16:39.620
对不对

16:39.620 --> 16:40.620
OK

16:40.620 --> 16:41.620
那么这就是

16:41.620 --> 16:43.620
我们预设的他的作用

16:43.620 --> 16:44.620
就没了

16:44.620 --> 16:45.620
这就是这几颗讲的东西

16:45.620 --> 16:46.620
有了这个预设之后

16:46.620 --> 16:47.620
你会大胆的

16:47.620 --> 16:48.620
在原代码里边

16:48.620 --> 16:49.620
去使用一些新的API

16:49.620 --> 16:51.620
使用一些新的语法

16:51.620 --> 16:52.620
都可以

16:52.620 --> 16:53.620
比方说我们再来看一下

16:53.620 --> 16:55.620
看一下我们这里写个

16:55.620 --> 16:56.620
写个数组

16:56.620 --> 16:57.620
我们这里

16:57.620 --> 16:59.620
看成了转换

16:59.620 --> 17:01.620
写个数组

17:01.620 --> 17:02.620
1,2,3,4,5

17:02.620 --> 17:07.980
然后我们这里使用

17:07.980 --> 17:08.980
FOR25循环

17:08.980 --> 17:09.980
因为FOR25循环

17:09.980 --> 17:10.980
是一个新的语法

17:10.980 --> 17:11.980
它肯定要进行转换的

17:11.980 --> 17:13.980
使用FOR25循环

17:13.980 --> 17:14.980
你看它给你转换出来

17:14.980 --> 17:15.980
是一个什么样的结果

17:15.980 --> 17:16.980
大家有兴趣的话

17:16.980 --> 17:18.980
下一个可以用一些

17:18.980 --> 17:19.980
新的语法

17:19.980 --> 17:20.980
看它到底是

17:20.980 --> 17:21.980
转换出来的一个

17:21.980 --> 17:22.980
保存的话

17:22.980 --> 17:23.980
那么我们看一下

17:23.980 --> 17:24.980
最多的结果

17:24.980 --> 17:26.980
这个地方变成了VAR

17:26.980 --> 17:27.980
变成了VAR

17:27.980 --> 17:28.980
是一个普通的数组

17:28.980 --> 17:31.980
然后它把我们的FOR25循环

17:31.980 --> 17:32.980
转换成了什么呢

17:32.980 --> 17:34.980
转换成了一个普通的FOR25循环

17:34.980 --> 17:35.980
它怎么做的呢

17:35.980 --> 17:36.980
用一个下标

17:36.980 --> 17:37.980
对不对

17:37.980 --> 17:38.980
然后把这个数组

17:38.980 --> 17:39.980
放到这个里边

17:39.980 --> 17:41.980
放到这个边疆里边

17:41.980 --> 17:43.980
然后循环它

17:43.980 --> 17:45.980
是不是一式取出数组的

17:45.980 --> 17:46.980
每一项

17:46.980 --> 17:47.980
取出数组的每一项

17:47.980 --> 17:48.980
来进行转换

17:48.980 --> 17:49.980
这些东西

17:49.980 --> 17:50.980
你们可以自己去发掘

17:50.980 --> 17:51.980
比方说

17:51.980 --> 17:52.980
我们这里可以使用

17:52.980 --> 17:53.980
还可以使用解构

17:53.980 --> 17:54.980
对不对

17:54.980 --> 17:55.980
还可以使用解构

17:55.980 --> 17:56.980
OB戒

17:56.980 --> 17:57.980
A等于1

17:57.980 --> 17:58.980
就是有兴趣的同学

17:58.980 --> 17:59.980
下来可以多去试一下

17:59.980 --> 18:01.980
我们ES6里边的一些新语法

18:01.980 --> 18:03.980
看它到底是怎么来玩的

18:03.980 --> 18:04.980
这里的解构

18:04.980 --> 18:05.980
什么呢

18:05.980 --> 18:08.980
AB等于OB戒

18:08.980 --> 18:09.980
对吧

18:09.980 --> 18:10.980
这些是新语法

18:10.980 --> 18:11.980
看一下准解构出来

18:11.980 --> 18:12.980
是变成这样子的

18:12.980 --> 18:13.980
对吧

18:13.980 --> 18:15.980
你可以自己去试验一下

18:15.980 --> 18:16.980
自己去试验一下

18:16.980 --> 18:17.980
比方说我们再写个内

18:17.980 --> 18:19.980
AB写个内

18:19.980 --> 18:21.980
Person

18:21.980 --> 18:22.980
写个内

18:22.980 --> 18:23.980
它转换出来是什么呢

18:23.980 --> 18:24.980
是不是一个构造函数

18:24.980 --> 18:25.980
对吧

18:25.980 --> 18:26.980
一个构造函数

18:26.980 --> 18:27.980
那么构造函数里边

18:27.980 --> 18:29.980
它首先检查了一下

18:29.980 --> 18:31.980
你是不是用6的方式来调用的

18:31.980 --> 18:32.980
那么过去的语法里面

18:32.980 --> 18:33.980
怎么来检测

18:33.980 --> 18:35.980
是不是用6的方式来调用的呢

18:35.980 --> 18:36.980
它就用这种方式来检测的

18:36.980 --> 18:38.980
它这里写了一个函数

18:38.980 --> 18:39.980
这个函数

18:39.980 --> 18:40.980
它做一个判断

18:40.980 --> 18:41.980
你看一下

18:41.980 --> 18:42.980
其实这个代码也很简单

18:42.980 --> 18:47.450
这么特别简单

18:47.450 --> 18:48.450
它说什么意思呢

18:48.450 --> 18:49.450
就是说

18:49.450 --> 18:50.450
如果说

18:50.450 --> 18:51.450
如果说你在这里

18:51.450 --> 18:52.450
用这种方式来调用函数

18:52.450 --> 18:53.450
因为我们知道

18:53.450 --> 18:54.450
在ES6里边

18:54.450 --> 18:55.450
这个class是不能用这种方式来调用的

18:55.450 --> 18:56.450
对吧

18:56.450 --> 18:57.450
是不能用这种方式来调用的

18:57.450 --> 18:59.450
那么它是怎么做的呢

18:59.450 --> 19:00.450
它就是

19:00.450 --> 19:02.450
给你做一个函数来检测这样的

19:02.450 --> 19:03.450
把类似传进去

19:03.450 --> 19:04.450
把这个构造函数传进去

19:04.450 --> 19:05.450
对吧

19:05.450 --> 19:06.450
如果说发现Race

19:06.450 --> 19:07.450
它不是这个构造函数

19:07.450 --> 19:08.450
创建出来的

19:08.450 --> 19:09.450
就是Race

19:09.450 --> 19:10.450
它不是用构造函数

19:10.450 --> 19:11.450
创建出来的

19:11.450 --> 19:12.450
用Instance的判断

19:12.450 --> 19:14.450
那么还可以抛出一个错误

19:14.450 --> 19:16.450
它就是用这种类似的方式来解决

19:16.450 --> 19:17.450
一样的意思

19:17.450 --> 19:19.450
你可以自行去试一下

19:21.450 --> 19:23.450
过多的去做这些解释

19:23.450 --> 19:24.450
OK

19:24.450 --> 19:25.450
那么这里呢

19:25.450 --> 19:26.450
就是关于

19:26.450 --> 19:28.450
这个bible

19:28.450 --> 19:30.450
PresentM

19:30.450 --> 19:31.450
它的使用方式

19:31.450 --> 19:33.760
以及它的作用

19:33.760 --> 19:34.760
等一下

19:34.760 --> 19:35.760
我还要补充一个东西

19:35.760 --> 19:36.760
我差点忘了

19:36.760 --> 19:38.760
还要补充一个东西

19:38.760 --> 19:39.760
就是

19:39.760 --> 19:41.760
如果说你使用这样的语法

19:41.760 --> 19:43.760
就是有些语法

19:43.760 --> 19:45.760
它不是靠

19:45.760 --> 19:47.760
它不是靠语法转换

19:47.760 --> 19:48.760
就能搞定的

19:48.760 --> 19:50.760
比方说像这样的语法

19:51.760 --> 19:53.760
像这样的一个语法

19:53.760 --> 19:54.760
那么这样的语法

19:54.760 --> 19:56.760
它并不是靠一个普通的转换

19:56.760 --> 19:57.760
就能搞定的

19:57.760 --> 19:58.760
不能说你把这个东西

19:58.760 --> 19:59.760
变成另外一个语法

19:59.760 --> 20:00.760
你能变吗

20:00.760 --> 20:03.760
这个是一个非常全新的语法

20:03.760 --> 20:04.760
你没法变

20:04.760 --> 20:05.760
这个东西

20:05.760 --> 20:06.760
那么这个东西

20:06.760 --> 20:09.760
你需要用一个API来模拟

20:09.760 --> 20:10.760
来模拟这样的语法

20:10.760 --> 20:11.760
是不是要用一个

20:11.760 --> 20:13.760
API来模拟的这样的语法

20:13.760 --> 20:15.760
你看一下它转换的结果是什么

20:15.760 --> 20:16.760
转换的结果

20:16.760 --> 20:17.760
你不用去看

20:17.760 --> 20:19.760
这下面具体的写法

20:19.760 --> 20:20.760
你不用去看

20:20.760 --> 20:21.760
你看它前边

20:21.760 --> 20:23.760
导入了这么一个库

20:23.760 --> 20:25.760
叫做Generator runtime

20:25.760 --> 20:26.760
这么一个库

20:26.760 --> 20:27.760
这个库

20:27.760 --> 20:29.760
它里边就能实现

20:29.760 --> 20:31.760
某些特殊语法

20:31.760 --> 20:33.760
对一些某些特殊语法的

20:33.760 --> 20:35.760
进行转换

20:35.760 --> 20:37.760
包括什么Async

20:37.760 --> 20:38.760
Away 这些东西

20:38.760 --> 20:39.760
对一些特殊语法

20:39.760 --> 20:41.760
把它转变成API的形式

20:41.760 --> 20:42.760
所以说你光安装

20:42.760 --> 20:44.760
core接式还不行

20:44.760 --> 20:45.760
你还得去安装什么

20:45.760 --> 20:46.760
Generator runtime

20:46.760 --> 20:47.760
还得去安装它

20:47.760 --> 20:48.760
不然的话

20:48.760 --> 20:49.760
你这里运行肯定要

20:49.760 --> 20:50.760
还是要保存

20:50.760 --> 20:52.760
又少了一个Generator runtime

20:52.760 --> 20:53.760
总之那里看一下

20:53.760 --> 20:54.760
它的编译结果

20:54.760 --> 20:55.760
你就知道它需要

20:55.760 --> 20:56.760
最终的运行

20:56.760 --> 20:57.760
它需要什么样的库

20:57.760 --> 20:58.760
来进行支持

20:58.760 --> 20:59.760
总之那

20:59.760 --> 21:00.760
它最后的实现其实

21:00.760 --> 21:01.760
这个东西

21:01.760 --> 21:02.760
代码还是蛮复杂的

21:02.760 --> 21:03.760
它实现的是用

21:03.760 --> 21:04.760
状态机的方式实现的

21:04.760 --> 21:06.760
有点类似于

21:06.760 --> 21:09.760
生成器那一块的实现方式

21:09.760 --> 21:10.760
OK

21:10.760 --> 21:11.760
那么这里呢

21:11.760 --> 21:12.760
我们看一下吧

21:12.760 --> 21:13.760
安装一下

21:13.760 --> 21:14.760
NPMI

21:14.760 --> 21:17.760
叫做Generator runtime

21:17.760 --> 21:21.350
安装一下

21:21.350 --> 21:25.560
安装好了之后

21:25.560 --> 21:26.560
它自然可以运行

21:26.560 --> 21:29.700
安装好了

21:29.700 --> 21:30.700
安装好了

21:30.700 --> 21:32.700
我们看一下运行的个带吧

21:32.700 --> 21:33.700
清楚出出

21:33.700 --> 21:34.700
运行

21:34.700 --> 21:35.700
你看是不是正常运行

21:35.700 --> 21:36.700
对不对

21:36.700 --> 21:37.700
正常运行

21:37.700 --> 21:38.700
OK

21:38.700 --> 21:39.700
那么这就是

21:39.700 --> 21:40.700
对这种特殊余法

21:40.700 --> 21:41.700
你可能还要去

21:41.700 --> 21:42.700
单独做一下处理

21:42.700 --> 21:43.700
总之很简单

21:43.700 --> 21:45.700
你要使用这个库

21:45.700 --> 21:46.700
你要使用这个预设

21:46.700 --> 21:47.700
那么安装啥

21:47.700 --> 21:48.700
除了安装这个预设

21:48.700 --> 21:49.700
本身

21:49.700 --> 21:50.700
它是来转换余法的

21:50.700 --> 21:51.700
那么你还要

21:51.700 --> 21:52.700
但是有些API

21:52.700 --> 21:53.700
它搞不定

21:53.700 --> 21:54.700
还要安装两个库

21:54.700 --> 21:56.700
一个是core.js

21:56.700 --> 21:58.700
一个是core.js

21:58.700 --> 22:01.700
一个是叫做Generator runtime

22:01.700 --> 22:02.700
这两个库呢

22:02.700 --> 22:04.700
可以帮助你提供API的不足

22:04.700 --> 22:05.700
这个呢

22:05.700 --> 22:06.700
主要是对先有的

22:06.700 --> 22:07.700
就是新的API

22:07.700 --> 22:10.700
像什么Promise

22:10.700 --> 22:12.700
像什么一些

22:12.700 --> 22:14.700
输足里面的新的函数

22:14.700 --> 22:15.700
这些东西

22:15.700 --> 22:17.700
它提供这些新的API

22:17.700 --> 22:18.700
那么这个库呢

22:18.700 --> 22:19.700
它是来搞定什么呢

22:19.700 --> 22:20.700
搞定一些新的余法

22:20.700 --> 22:22.700
把它变成一个API实现

22:22.700 --> 22:24.700
它是来搞定这件事情

22:24.700 --> 22:26.700
那么这是这两个库

22:26.700 --> 22:27.700
通过这两个库的支援

22:27.700 --> 22:30.700
就可以自如的去使用这个预设

22:30.700 --> 22:31.700
OK

22:31.700 --> 22:33.700
现在应该就没什么东西了

22:33.700 --> 22:35.700
这是这个预设

