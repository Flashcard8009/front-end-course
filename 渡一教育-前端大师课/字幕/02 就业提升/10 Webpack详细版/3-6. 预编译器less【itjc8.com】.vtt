WEBVTT

00:00.430 --> 00:03.430
好 咱们这一课呢要解决另外一个问题了啊

00:03.430 --> 00:08.430
之前呢 咱们解决了那个文件西分用什么呢 用微派对吧

00:08.430 --> 00:11.430
然后呢 我又解决了这个内名冲突

00:11.430 --> 00:14.430
内名冲突的话 我们有三种方式命名约定啊

00:14.430 --> 00:18.430
回顾一下啊 cssngs 这是最牛活的方式了

00:18.430 --> 00:22.430
这种方式呢 哎呀 太大胆了啊 太激进了

00:22.430 --> 00:24.430
所以说 写起来呢 不太习惯

00:24.430 --> 00:27.430
然后呢 刚才还还有一些别的问题啊

00:27.430 --> 00:29.430
咱们在当时的一课都讲到了

00:29.430 --> 00:32.430
然后呢 还有一个 我们上一课学的 css module

00:32.430 --> 00:34.430
那么这种方式呢 是比较折中的一种方案啊

00:34.430 --> 00:36.430
也是非常不错的一种方案

00:36.430 --> 00:41.430
他们这三个方式呢 都是用于解决内名冲突的

00:41.430 --> 00:44.430
好 那么解决内名冲突这一块 我们是不是已经结束了

00:44.430 --> 00:45.430
对 已经结束了

00:45.430 --> 00:47.430
好 那么接下来呢 我们看另外一个问题

00:47.430 --> 00:52.430
就剩下最后一个问题了 就是解决重复样式值的问题

00:52.430 --> 00:55.430
这是什么问题呢 我举个例子吧

00:55.430 --> 00:57.430
我之前好像也举过这么一个例子

00:57.430 --> 01:00.430
比方说咱们网站里边呢 有一种颜色

01:00.430 --> 01:03.430
这种颜色呢 我们经常用到

01:03.430 --> 01:06.430
比方说什么颜色呢 比方说我们有个颜色叫F40

01:06.430 --> 01:08.430
F40

01:08.430 --> 01:11.430
然后有这么一种颜色 我们经常会用到

01:11.430 --> 01:15.430
那么我们在 css里边有没有办法

01:15.430 --> 01:18.430
解决掉这种重复代码呢

01:18.430 --> 01:20.430
好像是挺难的 对吧 挺难的

01:20.430 --> 01:23.430
比方说有的时候呢 我们写一个样式啊

01:23.430 --> 01:27.430
然后它的背景颜色 background 是这个F40

01:27.430 --> 01:31.430
有的时候呢 我们写一个另外一个样式

01:31.430 --> 01:35.430
那么它的文字颜色呢 是F40

01:35.430 --> 01:37.430
有的时候呢 又是边框颜色 你看

01:37.430 --> 01:40.430
这种颜色的重复 这种值的重复是不是很难解决

01:40.430 --> 01:42.430
对吧 是根本解决不了的

01:42.430 --> 01:45.430
那么这种问题呢 不光是颜色

01:45.430 --> 01:47.430
还有什么样呢 还有什么尺寸啊

01:47.430 --> 01:50.430
这些东西都会有可能会出现重复的代码

01:50.430 --> 01:52.430
那么我们为了解决这样的代码呢

01:52.430 --> 01:54.430
又产生了一些方式

01:54.430 --> 01:57.430
好 那么我们怎么来解决呢 有两种方案

01:57.430 --> 01:59.430
第一种方案呢 就是我们之前学习过的

01:59.430 --> 02:01.430
CSS and GS

02:01.430 --> 02:04.430
就是完全不去写什么样式表

02:04.430 --> 02:07.430
全部用一个对象来 用一个GS对象

02:07.430 --> 02:09.430
来表达一个样式

02:09.430 --> 02:11.430
那么这种情况下 肯定是能够解决

02:11.430 --> 02:13.430
重复样式值的问题 为什么呢

02:13.430 --> 02:16.430
因为你都是变成了GS代码了 还不能解决吗

02:16.430 --> 02:18.430
你看我怎么解决啊 各种玩法的可以

02:18.430 --> 02:20.430
因为这种方式是最灵活的方式

02:20.430 --> 02:22.430
比方说不是有重复样式吗

02:22.430 --> 02:24.430
来 我写个模块

02:24.430 --> 02:28.430
模块 哪个模块呢 比方说colors.js

02:28.430 --> 02:30.430
有这么一个模块

02:30.430 --> 02:32.430
那么这个模块的表 我就导出呗

02:32.430 --> 02:34.430
导出啊 比方说我们有两个颜色对吧

02:34.430 --> 02:38.430
导出一个颜色 导出一个就是red

02:38.430 --> 02:39.430
或者叫danger

02:39.430 --> 02:42.430
我们的就是可以给用户的感知

02:42.430 --> 02:45.430
算是比较危险的这么一种颜色

02:45.430 --> 02:47.430
就要说错误颜色之类的东西

02:47.430 --> 02:50.430
danger 那么颜色呢 我们给它写一个f40

02:50.430 --> 02:52.430
导出一个面量就完事了

02:52.430 --> 02:54.430
各种玩法都可以玩出来

02:54.430 --> 02:57.430
还有一个就是比方说成功的颜色

02:57.430 --> 03:00.430
成功的颜色呢 我们给它导出一个grim

03:00.430 --> 03:03.430
我们完全可以写个模块

03:03.430 --> 03:05.430
把它变成面量

03:05.430 --> 03:07.430
那么另外一个模块要写央式的时候

03:07.430 --> 03:10.430
比方说我们可以这样写模块

03:10.430 --> 03:13.430
模块比方说styles

03:13.430 --> 03:15.430
好 我们这里不是一个对象吗

03:15.430 --> 03:17.430
我们在ges里面

03:17.430 --> 03:19.430
就是用一个对象来表示一样 是对吧

03:19.430 --> 03:22.430
我们都得导出const

03:22.430 --> 03:24.430
style1嘛 我们就随便写一个

03:24.430 --> 03:26.430
style1 好 它这里面要用到颜色

03:26.430 --> 03:28.430
对吧 用的颜色是不是把个模块

03:28.430 --> 03:29.430
导入进来就完事了

03:29.430 --> 03:32.430
import 导入模块danger

03:32.430 --> 03:34.430
然后success

03:34.430 --> 03:36.430
我这里没有在文件里面写

03:36.430 --> 03:37.430
没有代码着色

03:37.430 --> 03:39.430
大家应该看得懂

03:39.430 --> 03:41.430
colors

03:41.430 --> 03:43.430
对吧

03:43.430 --> 03:45.430
这里面是不是可以用

03:45.430 --> 03:47.430
叫做dinger

03:47.430 --> 03:49.430
这里面就可以用dinger

03:49.430 --> 03:51.430
是不是可以解决样式值得重复

03:51.430 --> 03:53.430
对不对 很容易解决

03:53.430 --> 03:55.430
当然这里要这样写

03:55.430 --> 03:57.430
style2

03:57.430 --> 03:59.430
因为它变成ges代码了

03:59.430 --> 04:01.430
所以说根本就不存在这样的问题了

04:01.430 --> 04:03.430
那么除了这种方式

04:03.430 --> 04:05.430
因为这种方式太过于激进

04:05.430 --> 04:07.430
那么还以为有没有别的方式呢

04:07.430 --> 04:09.430
当然有 别的方式就是

04:09.430 --> 04:11.430
我们这几课要学习的预编一期

04:11.430 --> 04:13.430
你首先要知道

04:13.430 --> 04:15.430
它是来解决什么样的问题的

04:15.430 --> 04:17.430
解决什么样的问题呢

04:17.430 --> 04:19.430
解决的是

04:19.430 --> 04:21.430
央式值重复的问题

04:21.430 --> 04:23.430
当然它不仅仅可以解决这样的问题

04:23.430 --> 04:25.430
还可以解决更多的问题

04:25.430 --> 04:27.430
好 咱们来看一下预编一期

04:27.430 --> 04:29.430
我们一部分来了解

04:29.430 --> 04:31.430
这几课的东西会比较多

04:31.430 --> 04:33.430
不过大家不用担心

04:33.430 --> 04:35.430
你只需要了解它的基本原理

04:35.430 --> 04:37.430
就可以了

04:37.430 --> 04:39.430
那么剩下的什么使用

04:39.430 --> 04:41.430
怎么去使用

04:41.430 --> 04:43.430
我后边会给大家一个文档

04:43.430 --> 04:45.430
如果说你们以后忘记了

04:45.430 --> 04:47.430
可以翻一翻文档就完事了

04:47.430 --> 04:49.430
你们一定会忘记的 百分之百会忘记的

04:49.430 --> 04:51.430
就比方说你们学到现在

04:51.430 --> 04:53.430
你们应该学习过解query

04:53.430 --> 04:55.430
解query已经学完了

04:55.430 --> 04:57.430
那么有没有同学能够把解query里边的

04:57.430 --> 04:59.430
所有的API自己写出

04:59.430 --> 05:01.430
写一遍

05:01.430 --> 05:03.430
自己用一遍

05:03.430 --> 05:05.430
就是你们能不能记得住所有的API

05:05.430 --> 05:07.430
我相信你肯定记不住

05:07.430 --> 05:09.430
不会影响你编写代码的

05:09.430 --> 05:11.430
它不会影响

05:11.430 --> 05:13.430
因为你编写代码的时候一定是把文档打开

05:13.430 --> 05:15.430
要用到什么的时候去查阅一下就完事了

05:15.430 --> 05:17.430
当然我们这几课学习的预编一期

05:17.430 --> 05:19.430
也是这样子

05:19.430 --> 05:21.430
它相当于是一门新的语言

05:21.430 --> 05:25.430
因此里边东西还是蛮多的

05:25.430 --> 05:27.430
所以说你们忘记了也没关系

05:27.430 --> 05:29.430
你们以后如果说要使用

05:29.430 --> 05:31.430
当然不用的话就无所谓

05:31.430 --> 05:33.430
如果说你们要使用它的时候

05:33.430 --> 05:35.430
翻阅一下相关的文档就可以了

05:35.430 --> 05:39.320
好来吧

05:39.320 --> 05:41.320
首先看它的基本原理

05:41.320 --> 05:43.320
这是最重要的

05:43.320 --> 05:45.320
这个东西是不能忘的

05:45.320 --> 05:47.320
忘不掉它非常简单

05:47.320 --> 05:49.320
我们在编写CSS的时候

05:49.320 --> 05:51.320
由于CSS语言

05:51.320 --> 05:53.320
本身功能比较弱

05:53.320 --> 05:55.320
所以说难以处理一些问题

05:55.320 --> 05:56.320
什么问题呢

05:56.320 --> 05:57.320
比如说第一个

05:57.320 --> 05:59.320
重复的样式值

05:59.320 --> 06:01.320
我们刚才举的例子

06:01.320 --> 06:03.320
什么颜色的重复

06:03.320 --> 06:05.320
还有什么尺寸的重复之类的

06:05.320 --> 06:07.320
不太容易解决

06:07.320 --> 06:09.320
另一个问题是重复的代码段

06:09.320 --> 06:11.320
比方说像什么绝对定位居中

06:11.320 --> 06:13.320
你看一下我们都写过很多次了

06:13.320 --> 06:15.320
绝对定位居中该怎么写

06:15.320 --> 06:17.320
怎么写啊 绝对定位居中

06:17.320 --> 06:19.320
首先来一个plation

06:19.320 --> 06:21.320
然后呢 absolute

06:21.320 --> 06:23.320
绝对定位嘛

06:23.320 --> 06:25.320
然后呢还有个什么呢

06:25.320 --> 06:27.320
还有一个就是

06:27.320 --> 06:29.320
neft

06:29.320 --> 06:31.320
50%对吧

06:31.320 --> 06:33.320
还有一个就是trans form

06:33.320 --> 06:35.320
然后trans net

06:35.320 --> 06:37.320
复的50%

06:37.320 --> 06:39.320
复的50%

06:39.320 --> 06:41.320
还有一个就是top

06:41.320 --> 06:43.320
50%对吧

06:43.320 --> 06:45.320
是不是绝对定位居中

06:45.320 --> 06:47.320
那么像这一块代码是不固定的

06:47.320 --> 06:49.320
基本上是固定的 特别是这三行

06:49.320 --> 06:51.320
对吧 是不是

06:51.320 --> 06:53.320
基本上是固定的

06:53.320 --> 06:55.320
因此你每一次搞绝对定位居中的时候

06:55.320 --> 06:57.320
都要来一次 就特别麻烦

06:57.320 --> 06:59.320
因此呢我们可以想起办法呢

06:59.320 --> 07:01.320
让它不要去写这些重复代码

07:01.320 --> 07:03.320
通过这个预编意气

07:03.320 --> 07:05.320
就可以解决

07:05.320 --> 07:07.320
关于这个问题

07:07.320 --> 07:09.320
还有什么呢 重复的

07:09.320 --> 07:11.320
嵌套书写 这就是什么回双呢

07:11.320 --> 07:13.320
比方说咱们的样式里面的

07:13.320 --> 07:15.320
经常会写这样的代码

07:15.320 --> 07:17.320
为了避免内民冲突对吧

07:17.320 --> 07:19.320
虽然说我们内民冲突已经有办法解决了

07:19.320 --> 07:21.320
如果说我们不考虑什么内民冲突的问题

07:21.320 --> 07:23.320
我们还是用原式的方式来写的话

07:23.320 --> 07:25.320
那么可能会写出这样的代码

07:25.320 --> 07:27.320
比方说这个内民下面

07:27.320 --> 07:29.320
这个内民 下面的某一个内民

07:29.320 --> 07:31.320
然后下面的一个H1元素

07:31.320 --> 07:33.320
对吧 是不是有可能写出这样的代码

07:33.320 --> 07:35.320
比方说我们就把它写完嘛

07:35.320 --> 07:39.320
N内下面的B内下面的C内下面的H1

07:39.320 --> 07:41.320
给它写一些样式 对吧

07:41.320 --> 07:43.320
在这里写一些样式 就不写了

07:45.320 --> 07:47.320
好 以后我们是不是又要写一个

07:47.320 --> 07:51.320
比方说N下面的B下面的C下面的一个P元素

07:51.320 --> 07:53.320
是不是又得写一个 对吧

07:53.320 --> 07:55.320
那么你看一下这两段代码里边

07:55.320 --> 07:57.320
是不是这一部分重复了

07:57.320 --> 07:59.320
对不对 那么以后呢

07:59.320 --> 08:01.320
如果说了修改的话 也特别麻烦

08:01.320 --> 08:03.320
所以说这一块也是一个重复的问题

08:03.320 --> 08:05.320
就是重复的嵌套书写

08:05.320 --> 08:07.320
那么这些问题呢

08:07.320 --> 08:09.320
CSS本身能不能解决呢

08:09.320 --> 08:13.320
CSS本身语言它并不能解决这个问题

08:13.320 --> 08:15.320
就是由于官方它此时

08:15.320 --> 08:17.320
没有去解决这些问题

08:17.320 --> 08:19.320
因此一些第三方的机构

08:19.320 --> 08:21.320
开始想一些办法来解决这些问题

08:21.320 --> 08:23.320
所以说我们这节课学习的

08:23.320 --> 08:25.320
这些解决办法都是一些

08:25.320 --> 08:27.320
第三方的机构想出来的

08:27.320 --> 08:29.320
那么其中一种方案

08:29.320 --> 08:31.320
当然除了CSS INJS之外

08:31.320 --> 08:33.320
其中一种方案就是预编意气

08:33.320 --> 08:37.320
那么这个预编意气到底是什么玩意呢

08:37.320 --> 08:39.320
它的原理特别简单

08:39.320 --> 08:41.320
就是它让你呢 就是说

08:41.320 --> 08:43.320
你这个CSS本身的语言呢

08:43.320 --> 08:45.320
就原本的语言了 太恶心了

08:45.320 --> 08:47.320
确实搞不定这些问题

08:47.320 --> 08:49.320
那么我们就用一种更加优雅的方式

08:49.320 --> 08:51.320
来书写样式代码

08:51.320 --> 08:53.320
就是它给你招出一门语言

08:53.320 --> 08:55.320
来书写CSS代码

08:55.320 --> 08:57.320
只不过这个语言跟CSS代码的编写了

08:57.320 --> 08:59.320
差不多 可能改进了一些东西

08:59.320 --> 09:01.320
但是这样的代码呢

09:01.320 --> 09:03.320
是并不能交给流量器执行的

09:03.320 --> 09:05.320
流量器不认识

09:05.320 --> 09:07.320
那么这个时候呢

09:07.320 --> 09:09.320
你可以通过一个编意气

09:09.320 --> 09:11.320
把这个代码转换成为

09:11.320 --> 09:13.320
流量器能够识别的CSS代码

09:13.320 --> 09:15.320
下面一张图一看就明白了

09:15.320 --> 09:17.320
左边呢 就是我们自己编写的代码

09:17.320 --> 09:19.320
什么代码呢 就是

09:19.320 --> 09:21.320
非常优雅的样式代码

09:21.320 --> 09:23.320
那么这样的代码呢

09:23.320 --> 09:25.320
是无法被流量器识别的

09:25.320 --> 09:27.320
它是不认识

09:27.320 --> 09:29.320
这样的代码它可以解决上面的三个问题

09:29.320 --> 09:31.320
但是它一个问题就是

09:31.320 --> 09:33.320
流量器根本不能执行

09:33.320 --> 09:35.320
它无法旋转

09:35.320 --> 09:37.320
但是我们可以把这样的代码交给一个

09:37.320 --> 09:39.320
预编意气

09:39.320 --> 09:41.320
它来把这个代码进行编译

09:41.320 --> 09:43.320
编译完了过后就变成了一个

09:43.320 --> 09:45.320
普普通通的CSS代码

09:45.320 --> 09:47.320
那么就可以被流量器执行了

09:47.320 --> 09:49.320
原来的意思吧

09:49.320 --> 09:51.320
预编意气呢 就两种

09:51.320 --> 09:53.320
一个是NAS 一个是SARS

09:53.320 --> 09:55.320
那么这两种呢 因为它特别相似

09:55.320 --> 09:57.320
其实NAS这个

09:57.320 --> 09:59.320
预编意气

09:59.320 --> 10:01.320
它的开发团队呢

10:01.320 --> 10:03.320
有一部分就是从SARS里面出来的

10:03.320 --> 10:05.320
SARS先出现

10:05.320 --> 10:07.320
后来出现的是NAS

10:07.320 --> 10:09.320
因此这两个呢 特别特别的相似

10:09.320 --> 10:11.320
所以说我们也没有必要两个都学

10:11.320 --> 10:13.320
只学一个就可以了

10:13.320 --> 10:15.320
如果说你要学习另外一个的话

10:15.320 --> 10:17.320
下面我一会儿给大家一些文档

10:17.320 --> 10:19.320
进去的同学呢 可以自己去看一下

10:19.320 --> 10:21.320
而且呢

10:21.320 --> 10:23.320
为什么我们要学习NAS呢

10:23.320 --> 10:25.320
是因为你们后边要学习一个技术叫做View

10:25.320 --> 10:27.320
要学习这个技术

10:27.320 --> 10:29.320
那么这个技术呢

10:29.320 --> 10:31.320
往往啊 不是说一定的

10:31.320 --> 10:33.320
往往的公司里面呢

10:33.320 --> 10:35.320
可能用NAS的比较多一点

10:35.320 --> 10:37.320
用NAS的比较多一点 算是咱们学习NAS

10:37.320 --> 10:39.320
好 那么下面

10:39.320 --> 10:41.320
两张图看一下

10:41.320 --> 10:43.320
就是上面这张图的演化

10:43.320 --> 10:45.320
就是说我们平时写的时候呢

10:45.320 --> 10:47.320
用什么语言写呢 就可以用

10:47.320 --> 10:49.320
NAS语言来编写样式

10:49.320 --> 10:51.320
而不是用传统的CSS语言了

10:51.320 --> 10:53.320
那么这样的东西写出来的代码呢

10:53.320 --> 10:55.320
浏览器没法使编

10:55.320 --> 10:57.320
怎么办呢 交给NAS编译器

10:57.320 --> 10:59.320
让它把它转换成为普通的

10:59.320 --> 11:01.320
CSS代码

11:01.320 --> 11:03.320
就可以被浏览器使编了

11:03.320 --> 11:05.320
但是SARS也是一样啊

11:05.320 --> 11:07.320
我们用SARS语言输写样式

11:07.320 --> 11:09.320
然后呢 交给SARS编译器变成普通的CSS代码

11:09.320 --> 11:11.320
都一样

11:11.320 --> 11:13.320
好 这是它的基本原理啊

11:13.320 --> 11:15.320
基本原理

11:15.320 --> 11:17.320
就已经达到了我们这几课

11:17.320 --> 11:19.320
学习到目的了

11:19.320 --> 11:21.320
后边呢 就是简单的对它认识一下

11:21.320 --> 11:23.320
如果说你们以后进到工作中

11:23.320 --> 11:25.320
要用到NAS 要用到SARS

11:25.320 --> 11:27.320
OK 回过头来 查阅就可以了

11:27.320 --> 11:29.320
下面呢 我有一些就是

11:29.320 --> 11:31.320
链接

11:31.320 --> 11:33.320
分别是关于NAS的官网

11:33.320 --> 11:35.320
官网是英文的 可能大家看着

11:35.320 --> 11:37.320
看着呢 比较牢火一点

11:37.320 --> 11:39.320
它有没有中文网呢 没有

11:39.320 --> 11:41.320
它没有官方的中文网

11:41.320 --> 11:43.320
中间的一些中文文档

11:43.320 --> 11:45.320
可以去看一下啊

11:45.320 --> 11:47.320
这两个都是啊 这两个都是

11:47.320 --> 11:49.320
SARS也是一样 它官方网站

11:49.320 --> 11:51.320
有一些中文文档

11:51.320 --> 11:53.320
如果说你们以后要查阅

11:53.320 --> 11:55.320
就可以在这里查阅

11:55.320 --> 11:57.320
好 那么基本原理 我解释完了

11:57.320 --> 12:03.320
今天有人口渴啊 口渴水

12:03.320 --> 12:05.320
好 第二部分

12:05.320 --> 12:07.320
关于NAS的安装和使用

12:07.320 --> 12:09.320
我们刚才能讲的

12:09.320 --> 12:11.320
原理

12:11.320 --> 12:13.320
就说我要使用NAS的话

12:13.320 --> 12:15.320
需要安装什么东西

12:15.320 --> 12:17.320
是不是需要一个NAS的编译器啊

12:17.320 --> 12:19.320
所以说呢 我们要安装

12:19.320 --> 12:21.320
NAS编译器

12:21.320 --> 12:23.320
怎么安装呢

12:23.320 --> 12:25.320
NAS编译器呢 它是基于Low的开发的

12:25.320 --> 12:27.320
所以说呢

12:27.320 --> 12:29.320
你要安装 你是不是可以通过

12:29.320 --> 12:31.320
NPM下载安装 对吧

12:31.320 --> 12:33.320
好 OK 那么我们这里安装一下

12:33.320 --> 12:35.320
我这里已经安装好了

12:35.320 --> 12:37.320
所以说我这里呢

12:37.320 --> 12:39.320
我这里使用的是开发一带

12:39.320 --> 12:41.320
安装好了

12:41.320 --> 12:43.320
因为拍了没有一毛钱关系

12:43.320 --> 12:45.320
安装好了之后

12:45.320 --> 12:47.320
安装好了之后呢

12:47.320 --> 12:49.320
它会给你提供一个C理工具

12:49.320 --> 12:51.320
就是个命令行工具

12:51.320 --> 12:53.320
命令行的名称叫做NAS-C

12:53.320 --> 12:55.320
这个C是什么意思

12:55.320 --> 12:59.460
这个C叫做Compile

12:59.460 --> 13:01.460
什么意思 就是编译的意思

13:01.460 --> 13:03.460
编译什么意思

13:03.460 --> 13:05.460
就是把一个代码

13:05.460 --> 13:07.460
转换成另一个代码

13:07.460 --> 13:09.460
就是编译

13:09.460 --> 13:11.460
好 那么这个就是

13:11.460 --> 13:13.460
编译 那怎么来编译呢

13:13.460 --> 13:15.460
NAS-C

13:15.460 --> 13:17.460
编译 空格

13:17.460 --> 13:19.460
后边写上两个东西

13:19.460 --> 13:21.460
第一个东西呢 就是

13:21.460 --> 13:23.460
你使用的是NAS代码编写的文件

13:23.460 --> 13:25.460
比方说你看上面的图

13:25.460 --> 13:27.460
我这里是不是NAS代码编写的文件

13:27.460 --> 13:29.460
对吧 那么经过NAS编译期

13:29.460 --> 13:31.460
是不是会产生一个新的

13:31.460 --> 13:33.460
普通的CS代码文件

13:33.460 --> 13:35.460
普通的CS代码文件是什么呢

13:35.460 --> 13:37.460
就写到后边 对吧

13:37.460 --> 13:39.460
好 现在来试一下 光说没用

13:39.460 --> 13:41.460
比方说我们这里

13:41.460 --> 13:43.460
建一个NAS文件

13:43.460 --> 13:45.460
因为我们写NAS代码的话

13:45.460 --> 13:47.460
一般情况下 不说一定的

13:47.460 --> 13:49.460
那文件后维名是无所谓的

13:49.460 --> 13:51.460
一般情况下我们会使用NAS

13:51.460 --> 13:53.460
作为文件后维名

13:53.460 --> 13:55.460
好 接下来我们在这里

13:55.460 --> 13:57.460
去建一个文件牙

13:57.460 --> 13:59.460
然后来在这里边

13:59.460 --> 14:01.460
新建一个文件

14:01.460 --> 14:03.460
IN这个是NAS

14:03.460 --> 14:05.460
当然文件名字 后维名是什么

14:05.460 --> 14:07.460
无所谓的

14:07.460 --> 14:09.460
我们可以写一些NAS代码

14:09.460 --> 14:10.460
那什么叫NAS代码呢

14:10.460 --> 14:11.460
我们随便写

14:11.460 --> 14:13.460
比方说我们就把它复制一下

14:13.460 --> 14:15.460
你看

14:15.460 --> 14:17.460
这就是一个典型的NAS代码

14:17.460 --> 14:19.460
你看 这不是一个普通的CS代码

14:19.460 --> 14:21.460
你看 这个东西

14:21.460 --> 14:23.460
好像有点像CS代码

14:23.460 --> 14:25.460
但是这个玩意是咋的

14:25.460 --> 14:27.460
所以CS代码肯定是不能识别的

14:27.460 --> 14:29.460
这个玩意是咋的

14:29.460 --> 14:31.460
所以不能识别

14:31.460 --> 14:33.460
CS代码里面有双鞋杠注释吗

14:33.460 --> 14:35.460
虽然也没有

14:35.460 --> 14:37.460
这些代码CS代码

14:37.460 --> 14:39.460
是都不能识别的

14:39.460 --> 14:41.460
这就是一个普通的NAS代码

14:41.460 --> 14:43.460
但是它是一个合法的NAS代码

14:43.460 --> 14:45.460
那么像这样代码

14:45.460 --> 14:47.460
浏览器能运行吗 能渲染吗

14:47.460 --> 14:49.460
肯定是不行的

14:49.460 --> 14:51.460
所以说我们现在需要一个工具

14:51.460 --> 14:53.460
就是编译器

14:53.460 --> 14:55.460
把它编译成为浏览器

14:55.460 --> 14:57.460
能够识别的普普通通的CS代码

14:57.460 --> 14:59.460
好 来吧 怎么来编译呢

14:59.460 --> 15:01.460
我们在这里

15:01.460 --> 15:03.460
进入这个文件牙

15:03.460 --> 15:05.460
打开

15:05.460 --> 15:07.460
右键

15:07.460 --> 15:09.460
打开命令行

15:09.460 --> 15:11.460
然后进入到这个文件牙之后

15:11.460 --> 15:13.460
我们可以使用一个命令就是NAS-C

15:13.460 --> 15:14.460
当然这个命令

15:14.460 --> 15:15.460
由于我们是局部安装

15:15.460 --> 15:16.460
并非全聚安装

15:16.460 --> 15:18.460
所以我们要使用NPX

15:18.460 --> 15:20.460
NAS-C

15:20.460 --> 15:21.460
然后后边跟上什么呢

15:21.460 --> 15:22.460
两个东西

15:22.460 --> 15:24.460
第一个 你要编译的元代码

15:24.460 --> 15:26.460
就是要把NAS代码的文件在哪儿

15:26.460 --> 15:27.460
在哪儿呢

15:27.460 --> 15:29.460
因这个事点NAS

15:29.460 --> 15:30.460
对吧

15:30.460 --> 15:31.460
然后还有一个就是

15:31.460 --> 15:32.460
你编译的结果

15:32.460 --> 15:33.460
要放到哪个文件里边

15:33.460 --> 15:36.460
我们放到NAS-CS

15:36.460 --> 15:37.460
那么这样子一回车

15:37.460 --> 15:39.460
它就会把这个文件的代码

15:39.460 --> 15:40.460
读出来 进行编译

15:40.460 --> 15:41.460
编译完了结果

15:41.460 --> 15:42.460
放到这个文件里边

15:42.460 --> 15:44.460
一回车 你看一下

15:44.460 --> 15:46.460
运行完了 没爆错

15:46.460 --> 15:48.460
没爆错 运行完了之后

15:48.460 --> 15:49.460
你看这里是不是多了一个文件

15:49.460 --> 15:51.460
NAS-CS

15:51.460 --> 15:53.460
一点开 你看

15:53.460 --> 15:56.460
是不是变成那个普普通通的CS代码

15:56.460 --> 15:57.460
就它的运作原理

15:57.460 --> 15:59.460
特别简单

16:00.460 --> 16:02.460
那么这一块安装和使用

16:02.460 --> 16:03.460
完了 没了

16:03.460 --> 16:04.460
那么最后呢

16:04.460 --> 16:06.460
就是这一刻剩下的时间

16:06.460 --> 16:07.460
可能内容比较长

16:07.460 --> 16:09.460
那么就是关于NAS

16:09.460 --> 16:11.460
如何去使用

16:11.460 --> 16:12.460
也就是说

16:12.460 --> 16:13.460
我们这边的代码

16:13.460 --> 16:15.460
到底该怎么写

16:15.460 --> 16:17.460
NAS支持哪些东西

16:17.460 --> 16:18.460
用来解决什么样的问题

16:18.460 --> 16:20.460
接下来我们来研究一下

16:20.460 --> 16:21.460
当然了

16:21.460 --> 16:23.460
NAS里面的功能其实蛮多的

16:23.460 --> 16:25.460
因此我们这里也没有必要

16:25.460 --> 16:27.460
具其无疑的一个一个讲

16:27.460 --> 16:28.460
没有必要

16:28.460 --> 16:30.460
大概了解一下它能够做什么事情

16:30.460 --> 16:32.460
然后以后你们遇到类似的问题

16:32.460 --> 16:34.460
可以回来查阅一下就行了

16:34.460 --> 16:36.460
接下来我们看NAS基本使用

16:38.460 --> 16:39.460
这里有个文档

16:39.460 --> 16:41.460
就是NAS的中文文档

16:41.460 --> 16:42.460
当然它不是官方文档

16:42.460 --> 16:43.460
官方文档是全英文的

16:43.460 --> 16:44.460
你们看着也比较牢火

16:44.460 --> 16:46.460
我们平时用NAS的时候

16:46.460 --> 16:48.460
一般来说就用这么一些东西

16:48.460 --> 16:49.460
就够了

16:49.460 --> 16:51.460
这东西全部能够在这个文档里面

16:51.460 --> 16:52.460
找到

16:52.460 --> 16:53.460
点进去

16:54.460 --> 16:57.460
这里有一个快速入门

16:58.460 --> 16:59.460
你看这里

16:59.460 --> 17:00.460
这个东西全在这

17:00.460 --> 17:01.460
咱们来看一下吧

17:01.460 --> 17:03.460
首先看变量

17:03.460 --> 17:04.460
啥意思呢

17:04.460 --> 17:06.460
顾名思义就是说

17:06.460 --> 17:07.460
在NAS里面

17:07.460 --> 17:10.460
我们可以把一些常用的值

17:10.460 --> 17:12.460
保存到变量里面

17:12.460 --> 17:14.460
然后我们到时候就可以使用这个变量了

17:14.460 --> 17:15.460
把它放大一点

17:15.460 --> 17:16.460
看一下吧

17:16.460 --> 17:17.460
特别简单

17:17.460 --> 17:18.460
它都不给你解释了

17:18.460 --> 17:20.460
看代码一目了然

17:20.460 --> 17:21.460
你看这个代码

17:21.460 --> 17:22.460
这是NAS代码

17:22.460 --> 17:23.460
这就是个变量

17:23.460 --> 17:26.460
定义一个变量名字叫做位置

17:26.460 --> 17:28.460
给它的值是什么呢

17:28.460 --> 17:29.460
十个相书

17:29.460 --> 17:31.460
变量的名字必须A打开头

17:31.460 --> 17:33.460
再定义一个变量

17:33.460 --> 17:34.460
Height

17:34.460 --> 17:35.460
它的值是什么呢

17:35.460 --> 17:36.460
使这个变量的值

17:36.460 --> 17:37.460
也说它可以运算的

17:37.460 --> 17:38.460
它可以运算的

17:38.460 --> 17:40.460
加上十个相书

17:40.460 --> 17:41.460
那么是多少

17:41.460 --> 17:42.460
就是二十个相书了

17:42.460 --> 17:43.460
把它复制过来

17:43.460 --> 17:46.290
复制过来

17:46.290 --> 17:47.290
你看

17:47.290 --> 17:48.290
就这么个意思

17:48.290 --> 17:49.290
定义两个变量

17:49.290 --> 17:51.290
那么这个变量怎么来读呢

17:51.290 --> 17:52.290
凡是你

17:52.290 --> 17:53.290
后边的就按照

17:53.290 --> 17:54.290
正常的方式去

17:54.290 --> 17:56.290
书写CS代码就可以了

17:56.290 --> 17:57.290
写的过程中

17:57.290 --> 17:59.290
凡是要用到变量的地方

17:59.290 --> 18:00.290
你就把变量放在这

18:00.290 --> 18:01.290
你看

18:01.290 --> 18:02.290
相当于是在这里放了一个

18:02.290 --> 18:03.290
什么

18:03.290 --> 18:04.290
放了一个十个相书

18:04.290 --> 18:05.290
相当于在这里放了一个

18:05.290 --> 18:06.290
什么

18:06.290 --> 18:07.290
放了一个二十个相书

18:07.290 --> 18:08.290
就这么简单

18:08.290 --> 18:09.290
咱们来试一下

18:09.290 --> 18:10.290
变义来试一下

18:10.290 --> 18:12.290
好 变义

18:12.290 --> 18:14.290
我们把这个

18:14.290 --> 18:15.290
分屏

18:15.290 --> 18:16.290
分个屏

18:17.290 --> 18:18.290
好

18:18.290 --> 18:19.290
变义完了过后你看

18:19.290 --> 18:20.290
是不是这样的结果

18:20.290 --> 18:21.290
对吧

18:21.290 --> 18:22.290
那么这些东西是不是全没了

18:22.290 --> 18:23.290
对不对

18:23.290 --> 18:24.290
就这么简单

18:24.290 --> 18:25.290
所以我们浏览器

18:25.290 --> 18:26.290
页面上用的是

18:26.290 --> 18:27.290
页面上用的是不这个东西

18:27.290 --> 18:28.290
对吧

18:28.290 --> 18:30.290
页面上实际上用的是这个东西

18:30.290 --> 18:31.290
OK

18:31.290 --> 18:32.290
这是关于变量

18:32.290 --> 18:34.290
变量

18:34.290 --> 18:35.290
好 还有啥呢

18:35.290 --> 18:36.290
没了

18:36.290 --> 18:37.290
没了

18:37.290 --> 18:38.290
我们往下看

18:38.290 --> 18:39.290
下面

18:39.290 --> 18:41.290
混合

18:41.290 --> 18:42.290
我看一下

18:42.290 --> 18:43.290
这里 第二个

18:43.290 --> 18:44.290
混合

18:44.290 --> 18:46.290
混合是什么意思呢

18:46.290 --> 18:47.290
咱们来看一下

18:47.290 --> 18:48.290
看一下就明白了

18:48.290 --> 18:49.290
也就是说

18:49.290 --> 18:51.290
它可以把一组的属像

18:51.290 --> 18:53.290
放到一个规则级里边

18:53.290 --> 18:55.290
在另一个规则里边

18:55.290 --> 18:57.290
我们可以用这个规则级

18:57.290 --> 18:58.290
什么意思

18:58.290 --> 18:59.290
它这里举了个例子

18:59.290 --> 19:01.290
比方说这里一个border

19:01.290 --> 19:02.290
这么一个样式

19:02.290 --> 19:03.290
这个样式

19:03.290 --> 19:06.790
把它复制过来

19:06.790 --> 19:07.790
放过来

19:07.790 --> 19:08.790
border有一个样式

19:08.790 --> 19:09.790
一个内样式

19:09.790 --> 19:10.790
那么这个内样式

19:10.790 --> 19:12.790
我们可以在别的地方

19:12.790 --> 19:14.790
可以去使用它

19:14.790 --> 19:15.790
去使用它

19:15.790 --> 19:16.790
看一下

19:16.790 --> 19:17.790
你看

19:17.790 --> 19:19.790
我在这个样式里边

19:19.790 --> 19:21.790
是不是去使用了这个内样式

19:21.790 --> 19:23.790
这里要加两个小货号

19:23.790 --> 19:24.790
加上两个小货号

19:24.790 --> 19:25.790
表示的是

19:25.790 --> 19:27.790
我这一块要去使用这个内样式

19:27.790 --> 19:29.790
那么它什么意思呢

19:29.790 --> 19:30.790
就有点像我们介绍的

19:30.790 --> 19:32.790
介绍的对象混入一样

19:32.790 --> 19:34.790
对象混合一样

19:34.790 --> 19:36.790
它相当于是把这个内样式里边的

19:36.790 --> 19:37.790
这些代码

19:37.790 --> 19:40.790
就直接放到这个位置了

19:40.790 --> 19:41.790
然后这里也是一样

19:41.790 --> 19:43.790
相当于是把这个内样式代码

19:43.790 --> 19:45.790
就直接放到这个位置了

19:45.790 --> 19:47.790
好 咱们边一看一下吧

19:47.790 --> 19:48.790
运行

19:48.790 --> 19:50.790
你看吧

19:50.790 --> 19:51.790
你看

19:51.790 --> 19:52.790
是不是把这个内样式代码

19:52.790 --> 19:53.790
就直接放到这个位置了

19:53.790 --> 19:54.790
对吧

19:54.790 --> 19:55.790
这个内样式代码

19:55.790 --> 19:56.790
是不是直接放到这个位置了

19:56.790 --> 19:57.790
对吧

19:57.790 --> 19:58.790
就是它的边移结果

19:58.790 --> 19:59.790
这就是混入

19:59.790 --> 20:00.790
是不是这样子可以减少

20:00.790 --> 20:03.790
大量的重复代码

20:03.790 --> 20:04.790
对吧

20:04.790 --> 20:05.790
比方说举个例子

20:05.790 --> 20:06.790
我们刚才不是说

20:06.790 --> 20:08.790
像什么绝对定位居中

20:08.790 --> 20:09.790
对不对

20:09.790 --> 20:10.790
绝对定位居中

20:10.790 --> 20:11.790
我们就可以用这种方式

20:11.790 --> 20:12.790
比方说

20:12.790 --> 20:14.790
我们这里可以写上一个

20:14.790 --> 20:15.790
Pration

20:15.790 --> 20:18.790
对不对

20:18.790 --> 20:20.790
Center

20:20.790 --> 20:21.790
居中

20:21.790 --> 20:22.790
那么这里呢

20:22.790 --> 20:23.790
我们就可以写上

20:23.790 --> 20:24.790
Pration

20:24.790 --> 20:25.790
为什么呢

20:25.790 --> 20:27.790
Absolute

20:27.790 --> 20:29.790
Net 50%

20:29.790 --> 20:32.790
Top 50%

20:32.790 --> 20:34.790
Transform

20:34.790 --> 20:36.790
Transnet

20:36.790 --> 20:39.790
Food 50%

20:39.790 --> 20:40.790
你看看

20:40.790 --> 20:41.790
我们是不是可以这样玩

20:41.790 --> 20:42.790
然后比方说

20:42.790 --> 20:43.790
其中有一个元素

20:43.790 --> 20:44.790
我们要使用居中

20:44.790 --> 20:46.790
它有自己的别的样式

20:46.790 --> 20:48.790
然后可以使用Center

20:48.790 --> 20:49.790
是不是可以居中

20:49.790 --> 20:51.790
这里也可以使用Center

20:51.790 --> 20:52.790
是不是可以居中

20:52.790 --> 20:53.790
对吧

20:53.790 --> 20:54.790
就这么个意思

20:54.790 --> 20:55.790
好

20:55.790 --> 20:58.170
编译一下

20:58.170 --> 20:59.170
编译完了

20:59.170 --> 21:00.170
你看是不是变这样子

21:00.170 --> 21:01.170
对吧

21:01.170 --> 21:03.170
虽然说结果里面有重复代码

21:03.170 --> 21:05.170
但是我们写的元代码里面

21:05.170 --> 21:06.170
是不是没有重复代码

21:06.170 --> 21:07.170
对不对

21:07.170 --> 21:09.170
而且这个混入里面

21:09.170 --> 21:10.170
它其实还有不少的东西

21:10.170 --> 21:12.170
它说了解更多的

21:12.170 --> 21:13.170
关于混入的信息

21:13.170 --> 21:15.170
我们点击就可以看到

21:15.170 --> 21:17.170
不过了

21:17.170 --> 21:19.170
这就是英文了

21:19.170 --> 21:20.170
就是英文了

21:20.170 --> 21:21.170
也无所谓

21:21.170 --> 21:22.170
你看一下这些例子

21:22.170 --> 21:24.170
你也能明白

21:24.170 --> 21:26.170
比方说我这里给他举些例子

21:26.170 --> 21:28.170
它还有什么别的用法呢

21:28.170 --> 21:30.170
比方说我们不希望在结果里面

21:30.170 --> 21:32.170
生成这个东西

21:32.170 --> 21:33.170
我们不希望在结果里面

21:33.170 --> 21:35.170
就是这个东西是纯粹用来混入的

21:35.170 --> 21:37.170
它纯粹是用来混入的

21:37.170 --> 21:38.170
混入到别的样式里面

21:38.170 --> 21:40.170
我们不希望在结果里面

21:40.170 --> 21:41.170
去用到这个东西

21:41.170 --> 21:43.170
也就是说我本身的结果里面

21:43.170 --> 21:45.170
是并不包含一个内样式Center的

21:45.170 --> 21:46.170
这个Center的出现

21:46.170 --> 21:47.170
只是为了混入到其他样式

21:47.170 --> 21:48.170
那怎么办

21:48.170 --> 21:49.170
非常简单

21:49.170 --> 21:51.170
在这里可以给两个小握号

21:51.170 --> 21:53.170
给他两个小握号之后

21:53.170 --> 21:54.170
这个内样式

21:54.170 --> 21:56.170
它是不会生成到结果的

21:56.170 --> 21:58.170
我们再来看

21:58.170 --> 22:00.170
有点像函数的意思

22:00.170 --> 22:01.170
它实际上不是函数

22:01.170 --> 22:02.170
叫做混入

22:02.170 --> 22:03.170
运行

22:03.170 --> 22:04.170
你看

22:04.170 --> 22:05.170
别意完成过后

22:05.170 --> 22:06.170
是不是只有这两个样式

22:06.170 --> 22:07.170
对不对

22:07.170 --> 22:08.170
这个样式

22:08.170 --> 22:09.170
它是并没有生成到结果里面的

22:09.170 --> 22:10.170
因此我们最终要使用

22:10.170 --> 22:11.170
样式的时候

22:11.170 --> 22:12.170
可以使用它

22:12.170 --> 22:13.170
可以使用它

22:13.170 --> 22:15.170
但是并没有这个东西存在

22:15.170 --> 22:16.170
这个东西只是我们为了

22:16.170 --> 22:18.170
减少重复代码而出现的东西

22:19.170 --> 22:20.170
甚至呢

22:20.170 --> 22:21.170
我们还可以玩出很多花样出来

22:21.170 --> 22:23.170
比方说

22:23.170 --> 22:25.170
真的可以把它当成函数的

22:25.170 --> 22:26.170
这样子来处理

22:26.170 --> 22:27.170
虽然它不是函数

22:28.170 --> 22:29.170
我们怎么处理呢

22:29.170 --> 22:30.170
比方说这里可以写参数

22:31.170 --> 22:32.170
参数什么意思

22:32.170 --> 22:33.170
参数的意思就是说

22:33.170 --> 22:34.170
我这里有一些地方

22:34.170 --> 22:35.170
我并不知道

22:35.170 --> 22:37.170
比方说我到底定位是

22:37.170 --> 22:38.170
绝对定位还是fix的

22:38.170 --> 22:39.170
是不是两个都可以

22:39.170 --> 22:40.170
对吧

22:40.170 --> 22:41.170
这两个是不是都可以实现局中

22:41.170 --> 22:42.170
对不对

22:42.170 --> 22:43.170
那么这个地方是不一定的

22:43.170 --> 22:44.170
因此呢

22:44.170 --> 22:46.170
可以让你传一个东西给我

22:46.170 --> 22:47.170
比方说type

22:47.170 --> 22:49.170
传一个定位方式

22:49.170 --> 22:50.170
定位方式

22:50.170 --> 22:52.170
比方说我们这里写上一个

22:52.170 --> 22:53.170
把个变量

22:53.170 --> 22:54.170
强调把这个参数

22:54.170 --> 22:55.170
是不是写到这

22:55.170 --> 22:56.170
对吧

22:56.170 --> 22:57.170
那么调的时候

22:57.170 --> 22:58.170
是不是可以传递

22:58.170 --> 23:00.170
我这里传一个什么absolute

23:00.170 --> 23:01.170
absolute

23:01.170 --> 23:02.170
传进来

23:02.170 --> 23:03.170
那么这个呢

23:03.170 --> 23:04.170
传一个fixed

23:04.170 --> 23:05.170
你看一下

23:05.170 --> 23:07.800
运行

23:08.800 --> 23:09.800
你看

23:09.800 --> 23:10.800
这个地方是fixed

23:10.800 --> 23:11.800
这个地方是absolute

23:11.800 --> 23:12.800
对吧

23:12.800 --> 23:14.800
它可以达到这种灵活的处理

23:14.800 --> 23:16.800
而且它甚至还可以给一个默认值

23:16.800 --> 23:17.800
可以给一个默认值

23:17.800 --> 23:19.800
默认为absolute

23:19.800 --> 23:20.800
给默认值

23:20.800 --> 23:21.800
默认值是咋写的

23:21.800 --> 23:22.800
冒号

23:22.800 --> 23:23.800
对吧

23:23.800 --> 23:24.800
给默认值

23:24.800 --> 23:25.800
就是如果说你不传的话

23:25.800 --> 23:26.800
就是absolute

23:26.800 --> 23:27.800
那么这里我是不是可以

23:27.800 --> 23:28.800
不传了

23:28.800 --> 23:31.240
试一下

23:31.240 --> 23:32.240
看一下

23:32.240 --> 23:33.240
那么你看

23:33.240 --> 23:34.240
是不是一样的

23:34.240 --> 23:35.240
对吧

23:35.240 --> 23:36.240
就可以不传递了

23:36.240 --> 23:37.240
就这么个意思

23:37.240 --> 23:39.240
当然还可以给多个参数

23:39.240 --> 23:40.240
如果说可以的话

23:40.240 --> 23:42.240
你还可以给多个参数

23:42.240 --> 23:44.240
这就是贡入

23:44.240 --> 23:45.240
特别有意思

23:46.240 --> 23:47.240
好

23:47.240 --> 23:48.240
接下来我们继续看

23:49.240 --> 23:51.240
混入差不多了

23:51.240 --> 23:52.240
混合

23:52.240 --> 23:53.240
还可以签套

23:53.240 --> 23:55.240
这个东西是非常常见的

23:55.240 --> 23:56.240
签套

23:56.240 --> 23:57.240
什么意思

23:57.240 --> 23:59.240
它这里举个例子就已经非常明显了

23:59.240 --> 24:01.240
就是我们平时写

24:01.240 --> 24:02.240
CS的时候

24:02.240 --> 24:05.240
写起来特别是写签套的位置

24:05.240 --> 24:06.240
就特别恶心

24:06.240 --> 24:07.240
你看

24:07.240 --> 24:09.240
我这个ID选择器

24:09.240 --> 24:10.240
有一个样式

24:10.240 --> 24:11.240
ID选择器里边

24:11.240 --> 24:12.240
后边的

24:12.240 --> 24:14.240
后代元素

24:14.240 --> 24:15.240
有一个样式

24:15.240 --> 24:16.240
然后它的后代元素

24:16.240 --> 24:17.240
log

24:17.240 --> 24:18.240
是不是有一个样式

24:18.240 --> 24:20.240
如果说这个地方签套的层次多了

24:20.240 --> 24:22.240
每次都要写一大堆

24:22.240 --> 24:23.240
是不是特别麻烦

24:23.240 --> 24:24.240
对不对

24:24.240 --> 24:25.240
好

24:25.240 --> 24:26.240
那么这个时候

24:26.240 --> 24:28.240
你看在ness里面怎么写

24:28.240 --> 24:29.240
你看

24:29.240 --> 24:31.240
ness里面我们直接复制过来

24:31.240 --> 24:32.240
就这样子写

24:32.240 --> 24:34.240
是不是特别清楚明了

24:35.240 --> 24:36.240
我这个ID选择器

24:36.240 --> 24:38.240
header他自己有一些样式

24:38.240 --> 24:40.240
他有一些后代元素

24:40.240 --> 24:41.240
相当于是个

24:41.240 --> 24:43.240
有点像那个介石语言

24:43.240 --> 24:44.240
一层套一层

24:44.240 --> 24:45.240
寒树里面套寒树

24:45.240 --> 24:48.240
那么这个地方有一个样式

24:48.240 --> 24:50.240
相当于对象的签套了

24:50.240 --> 24:51.240
它的后代元素

24:51.240 --> 24:52.240
lifeguessing有一个样式

24:52.240 --> 24:54.240
它的后代元素log

24:54.240 --> 24:55.240
是不是有一个样式

24:55.240 --> 24:56.240
把签套在里面

24:56.240 --> 24:58.240
是不是就不允许写这种

24:58.240 --> 24:59.240
复杂的关系了

24:59.240 --> 25:00.240
咱们来看一下

25:00.240 --> 25:01.240
生成出来

25:02.240 --> 25:03.240
看一下

25:03.240 --> 25:04.240
你看

25:04.240 --> 25:05.240
它这种生成的结果

25:05.240 --> 25:06.240
是不是就是一个普普通通的

25:06.240 --> 25:07.240
事业在在

25:07.240 --> 25:08.240
但是我们写的时候

25:08.240 --> 25:09.240
是不是就没有那么恶心了

25:09.240 --> 25:11.240
如果说还要签套ABC

25:11.240 --> 25:12.240
这个内

25:12.240 --> 25:13.240
比方说我随便写一个

25:14.240 --> 25:15.240
还要签套

25:15.240 --> 25:17.240
是不是又可以继续签套

25:17.240 --> 25:18.240
看一下吧

25:18.240 --> 25:19.240
生成

25:19.240 --> 25:20.240
你看

25:21.240 --> 25:22.240
对比一下

25:22.240 --> 25:23.240
你对比一下

25:23.240 --> 25:24.240
一下就明白了

25:24.240 --> 25:25.240
对不对

25:26.240 --> 25:27.240
有些人说

25:27.240 --> 25:28.240
那我这个位置

25:28.240 --> 25:31.240
我可能不希望它是后代元素

25:31.240 --> 25:33.240
我可能希望它是指元素

25:33.240 --> 25:34.240
它是个大语符号

25:34.240 --> 25:35.240
可不可以

25:35.240 --> 25:36.240
可以

25:36.240 --> 25:37.240
你这样写就行了

25:37.240 --> 25:38.240
你看

25:40.240 --> 25:42.870
运行

25:42.870 --> 25:43.870
编译

25:43.870 --> 25:44.870
你看

25:44.870 --> 25:45.870
就变成一个大语

25:45.870 --> 25:46.870
变成一个大语符号了

25:47.870 --> 25:48.870
就这么简单

25:48.870 --> 25:49.870
你直接写就行了

25:50.870 --> 25:51.870
那有的人说

25:51.870 --> 25:52.870
我还有一种情况

25:52.870 --> 25:53.870
就是说这个黑档

25:53.870 --> 25:55.870
它可能有一些尾内样式

25:55.870 --> 25:56.870
有些尾内

25:56.870 --> 25:57.870
啥意思呢

25:57.870 --> 25:58.870
就是说

25:58.870 --> 25:59.870
我可能以前

25:59.870 --> 26:00.870
以前的传统的写法

26:00.870 --> 26:01.870
怎么写

26:01.870 --> 26:02.870
是不是要这样的写

26:02.870 --> 26:03.870
要重新开一个

26:03.870 --> 26:04.870
块来写

26:04.870 --> 26:05.870
可能有些尾内

26:05.870 --> 26:06.870
尾内里边有些样式

26:06.870 --> 26:08.870
那么这种情况怎么办呢

26:08.870 --> 26:09.870
也就说

26:09.870 --> 26:10.870
你希望你的样式

26:10.870 --> 26:12.870
是接着这个黑档写的

26:12.870 --> 26:13.870
那么怎么办呢

26:13.870 --> 26:14.870
你可以用这种符号

26:15.870 --> 26:16.870
叫做and

26:16.870 --> 26:17.870
and是什么

26:17.870 --> 26:18.870
就是并且

26:18.870 --> 26:19.870
除了要选中它之外

26:19.870 --> 26:20.870
要接着它

26:20.870 --> 26:22.870
要给它选中一些样式

26:22.870 --> 26:23.870
是不是可以写个尾内

26:23.870 --> 26:25.870
比方说

26:25.870 --> 26:26.870
content

26:26.870 --> 26:27.870
你们随便写个吧

26:27.870 --> 26:28.870
随便写个

26:28.870 --> 26:29.870
display

26:29.870 --> 26:30.870
vlog

26:30.870 --> 26:32.870
看一下生存的结果

26:32.870 --> 26:33.870
一下就明白了

26:34.870 --> 26:35.870
生存完了

26:35.870 --> 26:36.870
你看

26:43.230 --> 26:45.230
它这里没有重新要显示出来

26:45.230 --> 26:46.230
把它重新打开

26:46.230 --> 26:47.230
CSS

26:47.230 --> 26:50.570
OK

26:50.570 --> 26:51.570
你看一下

26:51.570 --> 26:52.570
生存的

26:52.570 --> 26:53.570
header before

26:53.570 --> 26:54.570
一样的

26:54.570 --> 26:56.570
比方说你还要写after

26:56.570 --> 26:57.570
after

26:57.570 --> 26:59.570
那么这里

26:59.570 --> 27:00.570
随便写吧

27:00.570 --> 27:01.570
display flex

27:01.570 --> 27:02.570
随便写

27:02.570 --> 27:05.330
生存

27:05.330 --> 27:06.330
你看

27:06.330 --> 27:07.330
是不是有多了个after

27:07.330 --> 27:08.330
特别简单

27:09.330 --> 27:10.330
能力点吧

27:10.330 --> 27:11.330
应该没问题

27:13.330 --> 27:14.330
好

27:14.330 --> 27:15.330
那么这种情况

27:15.330 --> 27:16.330
就经常会比较适用于什么

27:16.330 --> 27:17.330
比方说

27:17.330 --> 27:18.330
我们这下面

27:18.330 --> 27:19.330
我们举个例子

27:20.330 --> 27:21.330
比方说

27:21.330 --> 27:22.330
header有一些样式

27:22.330 --> 27:24.330
它下面有一个li

27:24.330 --> 27:25.330
li有一些样式

27:25.330 --> 27:27.330
比方说有个margin

27:27.330 --> 27:28.330
什么相数

27:28.330 --> 27:29.330
然后

27:29.330 --> 27:30.330
有一个li

27:30.330 --> 27:32.330
它可能有一些特别的样式

27:32.330 --> 27:33.330
比方说激活的样式

27:33.330 --> 27:34.330
就是被选中的样式

27:34.330 --> 27:35.330
对吧

27:35.330 --> 27:36.330
我们通常会怎么写

27:36.330 --> 27:37.330
通常会这样子写

27:37.330 --> 27:39.330
header下面的li

27:39.330 --> 27:40.330
active

27:40.330 --> 27:41.330
或者是selected

27:41.330 --> 27:42.330
对吧

27:42.330 --> 27:43.330
这是不是经常写的

27:43.330 --> 27:44.330
被选中了的样式

27:44.330 --> 27:45.330
那么这种样式

27:45.330 --> 27:46.330
这种写法怎么办呢

27:46.330 --> 27:47.330
又可以在这里

27:47.330 --> 27:48.330
可以写个and符号

27:48.330 --> 27:49.330
del

27:49.330 --> 27:50.330
selected

27:50.330 --> 27:51.330
一定要加上and符号

27:51.330 --> 27:52.330
你不加and符号

27:52.330 --> 27:53.330
相当于是

27:53.330 --> 27:54.330
相当于是这样子

27:54.330 --> 27:55.330
加一个空格了

27:55.330 --> 27:56.330
如果说你不加and的话

27:56.330 --> 27:57.330
就相当于是加一个空格了

27:57.330 --> 27:58.330
所以你加上and的话

27:58.330 --> 28:00.330
它中间就没有任何建格

28:00.330 --> 28:01.330
就直接接着写了

28:01.330 --> 28:02.330
那么这样子

28:02.330 --> 28:03.330
比方说

28:03.330 --> 28:04.330
我们这里的collect

28:04.330 --> 28:05.330
给它设置一个

28:05.330 --> 28:06.330
比方说

28:06.330 --> 28:07.330
我们这里的collect

28:07.330 --> 28:08.330
给它设置一个

28:08.330 --> 28:09.330
比方说

28:09.330 --> 28:10.330
我们这里的collect

28:10.330 --> 28:11.330
给它设置一个

28:11.330 --> 28:12.330
比方说

28:13.330 --> 28:15.330
然后这里多了个警号

28:16.330 --> 28:17.330
多了个下谱

28:18.330 --> 28:19.330
OK

28:19.330 --> 28:20.330
那么你看一下

28:20.330 --> 28:21.330
对吧

28:21.330 --> 28:22.330
特别简单

28:22.330 --> 28:23.330
这就是

28:23.330 --> 28:24.330
类似里面的嵌套

28:24.330 --> 28:26.330
像有了这种嵌套过后

28:26.330 --> 28:27.330
你会发现我们代码

28:27.330 --> 28:29.330
会变得极其简洁

28:29.330 --> 28:31.330
这是关于这个嵌套

28:32.330 --> 28:34.330
接下来看运算

28:34.330 --> 28:35.330
运算

28:35.330 --> 28:36.330
也就是说在

28:36.330 --> 28:37.330
这个问题没啥好说的

28:37.330 --> 28:38.330
就是说

28:38.330 --> 28:40.330
在类似里面

28:40.330 --> 28:41.330
你可以进行运算

28:41.330 --> 28:43.330
它会把运算的结果

28:43.330 --> 28:44.330
直接生成到

28:44.330 --> 28:45.330
编译结果里面

28:45.330 --> 28:46.330
那么比方说

28:46.330 --> 28:47.330
我们在这里

28:50.330 --> 28:51.330
举个例子吧

28:51.330 --> 28:52.330
比方说我们这里

28:52.330 --> 28:54.330
有一个尺寸

28:54.330 --> 28:55.330
一个尺寸

28:55.330 --> 28:58.770
这个尺寸是

28:58.770 --> 28:59.770
五百个像素

29:00.770 --> 29:01.770
五百个像素

29:01.770 --> 29:02.770
那么有的时候

29:02.770 --> 29:03.770
我们可能有一些区域

29:03.770 --> 29:05.770
是这个尺寸的一辈

29:05.770 --> 29:06.770
就是两辈

29:06.770 --> 29:07.770
要乘一二

29:07.770 --> 29:08.770
比方说它的宽度

29:08.770 --> 29:09.770
我们不希望

29:09.770 --> 29:10.770
直接是这个位置

29:10.770 --> 29:11.770
我们希望它乘一二

29:11.770 --> 29:12.770
可不可以这样写

29:12.770 --> 29:13.770
可以

29:13.770 --> 29:15.770
它是能够自行换算的

29:15.770 --> 29:16.770
你看一下

29:17.770 --> 29:18.770
生成

29:18.770 --> 29:19.770
你看

29:19.770 --> 29:20.770
变成一千了

29:20.770 --> 29:21.770
对吧

29:21.770 --> 29:22.770
它会把算出来的结果

29:22.770 --> 29:23.770
生成到编译结果里面

29:24.770 --> 29:25.770
如果说

29:25.770 --> 29:26.770
我们这里

29:26.770 --> 29:28.770
还可以进行加渐成熟

29:28.770 --> 29:29.770
比方说加

29:29.770 --> 29:30.770
加的时候

29:30.770 --> 29:32.770
比方说我们举一个例子

29:32.770 --> 29:33.770
加的时候

29:33.770 --> 29:34.770
我们加上一个

29:35.770 --> 29:36.770
EEM

29:36.770 --> 29:37.770
好看一下

29:38.770 --> 29:39.770
生成

29:40.770 --> 29:41.770
那么这个时候

29:41.770 --> 29:42.770
它会怎么处理

29:42.770 --> 29:43.770
像这两个单位

29:43.770 --> 29:45.770
它是无法互通的

29:45.770 --> 29:46.770
在目前它的编译的过程中

29:46.770 --> 29:47.770
是无法互通的

29:47.770 --> 29:49.770
无法互通的情况下

29:49.770 --> 29:51.770
它直接把数字相加就完事

29:51.770 --> 29:52.770
所以说

29:52.770 --> 29:54.770
我们平时用这个

29:54.770 --> 29:55.770
运算的时候

29:55.770 --> 29:56.770
要注意一下单位

29:56.770 --> 29:57.770
但是有些单位

29:57.770 --> 29:58.770
它是可以互通的

29:58.770 --> 29:59.770
比方说我们这里

29:59.770 --> 30:00.770
用这个单位

30:01.770 --> 30:02.770
厘米

30:02.770 --> 30:03.770
五厘米

30:03.770 --> 30:04.770
加上

30:05.770 --> 30:06.770
加上

30:07.770 --> 30:08.770
多少呢

30:09.770 --> 30:11.770
500毫米吧

30:11.770 --> 30:12.770
500毫米

30:12.770 --> 30:13.770
加上

30:14.770 --> 30:15.770
五厘米

30:16.770 --> 30:18.770
像这些单位是可以互通的

30:18.770 --> 30:19.770
运行

30:20.770 --> 30:22.770
它变成了550毫米

30:22.770 --> 30:23.770
对吧

30:23.770 --> 30:24.770
当我们平时开发网页的话

30:24.770 --> 30:25.770
也不太会用

30:25.770 --> 30:26.770
毫米和厘米

30:26.770 --> 30:27.770
也不太会用

30:27.770 --> 30:28.770
总之

30:28.770 --> 30:29.770
它的单位

30:29.770 --> 30:30.770
我们一般来说

30:30.770 --> 30:31.770
换算的时候

30:31.770 --> 30:32.770
注意一下单位

30:32.770 --> 30:33.770
单位统计一下

30:33.770 --> 30:34.770
其他的没啥

30:35.770 --> 30:36.770
OK

30:36.770 --> 30:37.770
就是关于它的运算

30:37.770 --> 30:38.770
没什么好说的

30:40.770 --> 30:41.770
然后我们再看一下

30:41.770 --> 30:42.770
下面的

30:42.770 --> 30:43.770
函数

30:44.770 --> 30:45.770
这个函数

30:46.770 --> 30:47.770
指的是

30:47.770 --> 30:49.770
NAS给我们提供的

30:49.770 --> 30:50.770
一些

30:51.770 --> 30:52.770
比较实用的函数

30:53.770 --> 30:54.770
那么它这里的

30:54.770 --> 30:55.770
举的一些例子

30:55.770 --> 30:56.770
我们都没有必要去

30:56.770 --> 30:57.770
详细的去深究

30:57.770 --> 30:58.770
我们主要是看一下

30:58.770 --> 30:59.770
这个函数手册

30:59.770 --> 31:01.770
函数手册里面就列举了

31:01.770 --> 31:02.770
NAS里面

31:02.770 --> 31:03.770
支持的所有函数

31:04.770 --> 31:05.770
你看一下

31:05.770 --> 31:07.770
它说有逻辑函数

31:07.770 --> 31:08.770
有EF

31:08.770 --> 31:09.770
不定

31:09.770 --> 31:10.770
有字幕创函数

31:10.770 --> 31:11.770
你看是不是有很多

31:11.770 --> 31:13.770
这个什么列表函数

31:13.770 --> 31:14.770
列表函数

31:14.770 --> 31:17.770
然后还有什么数学函数

31:17.770 --> 31:18.770
还有什么内形函数

31:18.770 --> 31:20.770
这个是什么玩意

31:22.770 --> 31:23.770
Mask方形

31:23.770 --> 31:24.770
什么玩意

31:24.770 --> 31:25.770
看一下

31:25.770 --> 31:26.770
我们随便举一些例子

31:26.770 --> 31:27.770
它这里面给你提供了

31:27.770 --> 31:29.770
很多已经写好了函数

31:29.770 --> 31:30.770
可以供你使用

31:30.770 --> 31:31.770
比方说举个例子

31:32.770 --> 31:33.770
我们看一下逻辑函数

31:33.770 --> 31:34.770
EF

31:35.770 --> 31:37.770
逻辑函数里边

31:37.770 --> 31:39.770
我们这里可以看到

31:39.770 --> 31:40.770
它说

31:40.770 --> 31:41.770
比方说我们这个直接拿过来

31:41.770 --> 31:42.770
复制过来

31:42.770 --> 31:43.770
看一下

31:43.770 --> 31:44.770
看一下它的例子就行了

31:45.770 --> 31:46.770
看一下

31:46.770 --> 31:47.770
它这里定了一个变量

31:47.770 --> 31:49.770
变量的名字叫做

31:49.770 --> 31:50.770
复

31:50.770 --> 31:52.770
不管是啥玩意

31:52.770 --> 31:53.770
不管是啥玩意

31:53.770 --> 31:54.770
那么

31:55.770 --> 31:56.770
Margin

31:56.770 --> 31:58.770
Margin它设置到这么一个东西

31:58.770 --> 32:00.770
函数函数EF

32:01.770 --> 32:02.770
它有三个函数

32:02.770 --> 32:04.770
第一个函数表示判断

32:04.770 --> 32:05.770
判断什么呢

32:05.770 --> 32:06.770
如果判断为函

32:06.770 --> 32:07.770
使用这个函

32:07.770 --> 32:08.770
判断为假

32:08.770 --> 32:09.770
使用这个函

32:09.770 --> 32:10.770
那么你看一下

32:10.770 --> 32:11.770
这句话的结果是什么

32:11.770 --> 32:12.770
这句话的结果

32:13.770 --> 32:15.770
那么由于它是函

32:15.770 --> 32:17.770
它是函是不是使用它

32:17.770 --> 32:18.770
是不是使用凌

32:18.770 --> 32:19.770
对不对

32:19.770 --> 32:20.770
OK

32:20.770 --> 32:21.770
那么这一块

32:21.770 --> 32:22.770
是不是得到结果是凌

32:22.770 --> 32:23.770
那么这一块

32:23.770 --> 32:24.770
就相当于是结果是凌

32:26.770 --> 32:27.770
这一块

32:27.770 --> 32:28.770
我们来看一下

32:28.770 --> 32:29.770
下面这个块

32:29.770 --> 32:30.770
颜色函数

32:31.770 --> 32:32.770
那么这里

32:32.770 --> 32:33.770
做了一个判断

32:33.770 --> 32:34.770
这个是另外一个函数

32:34.770 --> 32:35.770
叫Escolor

32:35.770 --> 32:36.770
表示的是

32:36.770 --> 32:38.770
是否是一个颜色

32:38.770 --> 32:39.770
传一个变量进去

32:39.770 --> 32:40.770
就这个东西

32:40.770 --> 32:42.770
是一个函数雕用

32:42.770 --> 32:43.770
表示它判断的是

32:43.770 --> 32:45.770
是不是一个颜色

32:45.770 --> 32:46.770
那么把这个东西传进去

32:46.770 --> 32:47.770
判断什么呢

32:47.770 --> 32:49.770
判断这个变量的函

32:49.770 --> 32:52.770
是不是一个有效的颜色的函

32:52.770 --> 32:53.770
如果说

32:53.770 --> 32:55.770
它是一个有效颜色的话

32:55.770 --> 32:56.770
那么就使用这个颜色

32:56.770 --> 32:57.770
如果说

32:57.770 --> 32:58.770
它不是一个有效颜色的话

32:58.770 --> 32:59.770
我们就使用Black

32:59.770 --> 33:00.770
那么这一块

33:00.770 --> 33:01.770
编印一下

33:01.770 --> 33:02.770
你都懂了

33:02.770 --> 33:03.770
对吧

33:03.770 --> 33:04.770
哎呀结果

33:04.770 --> 33:05.770
那么相当于是

33:05.770 --> 33:07.770
Marginin Color Black

33:07.770 --> 33:08.770
对吧

33:08.770 --> 33:09.770
就是函数雕用

33:09.770 --> 33:10.770
那如果说

33:10.770 --> 33:11.770
我把这里

33:11.770 --> 33:12.770
换成一个有效的颜色

33:12.770 --> 33:13.770
F40

33:13.770 --> 33:14.770
你看一下

33:14.770 --> 33:15.770
印象

33:15.770 --> 33:16.770
就变成F40了

33:16.770 --> 33:17.770
对吧

33:17.770 --> 33:18.770
它就是有些函数

33:18.770 --> 33:19.770
可以供你使用

33:19.770 --> 33:20.770
那么这些函数

33:20.770 --> 33:21.770
我们

33:21.770 --> 33:22.770
这里

33:22.770 --> 33:23.770
也没什么东西

33:23.770 --> 33:24.770
也没什么东西

33:24.770 --> 33:25.770
我们这里

33:25.770 --> 33:27.770
看一下这个吧

33:27.770 --> 33:28.770
看一下这个

33:29.770 --> 33:30.770
这个

33:30.770 --> 33:31.770
这个函数

33:31.770 --> 33:32.770
这些函数

33:32.770 --> 33:33.770
蛮有意思的

33:33.770 --> 33:34.770
这些东西

33:34.770 --> 33:35.770
是颜色变换函数

33:35.770 --> 33:37.770
什么叫做颜色变换函数呢

33:37.770 --> 33:39.770
我举个例子

33:39.770 --> 33:41.770
就比方说吧

33:41.770 --> 33:42.770
我们这里

33:42.770 --> 33:44.770
订了一些颜色

33:44.770 --> 33:45.770
我们比方说

33:45.770 --> 33:47.770
在这里订一个颜色

33:48.770 --> 33:50.770
叫做

33:50.770 --> 33:51.770
叫啥呢

33:51.770 --> 33:52.770
Primary

33:52.770 --> 33:53.770
一个主颜色

33:53.770 --> 33:54.770
主颜色是啥呢

33:54.770 --> 33:55.770
F40

33:55.770 --> 33:56.770
一个主颜色

33:57.770 --> 33:58.770
好

33:58.770 --> 33:59.770
那么现在

33:59.770 --> 34:00.770
我们写上

34:00.770 --> 34:01.770
两个类

34:01.770 --> 34:03.770
一个是

34:03.770 --> 34:04.770
S1

34:04.770 --> 34:05.770
第一个类

34:05.770 --> 34:07.770
第一个类是背景颜色

34:09.770 --> 34:10.770
背景颜色

34:10.770 --> 34:12.770
为Primary

34:12.770 --> 34:14.770
文字颜色

34:14.770 --> 34:15.770
为白色

34:15.770 --> 34:16.770
为白色

34:16.770 --> 34:17.770
就这样去

34:17.770 --> 34:18.770
好

34:18.770 --> 34:19.770
另一个类

34:19.770 --> 34:20.770
这个类

34:20.770 --> 34:21.770
这个类

34:21.770 --> 34:22.770
我们希望的是

34:22.770 --> 34:24.770
背景颜色

34:25.770 --> 34:26.770
再

34:26.770 --> 34:27.770
什么呢

34:27.770 --> 34:28.770
再那个就是

34:28.770 --> 34:30.770
主颜色

34:30.770 --> 34:32.770
主颜色

34:32.770 --> 34:36.980
基础上

34:36.980 --> 34:37.980
加深

34:38.980 --> 34:40.980
那么要把它加深一些

34:40.980 --> 34:41.980
那加深怎么写呢

34:41.980 --> 34:42.980
如果说

34:42.980 --> 34:44.980
按照以前的世界色的写法的话

34:44.980 --> 34:45.980
那你只能

34:45.980 --> 34:47.980
让策计师调一下

34:47.980 --> 34:49.980
或者是我们自己在这里

34:49.980 --> 34:51.980
是不是把它加深一点

34:51.980 --> 34:52.980
对不对

34:52.980 --> 34:53.980
把它加深一点

34:53.980 --> 34:54.980
但是这样子的话

34:54.980 --> 34:55.980
如果说将来这个颜色一变

34:55.980 --> 34:57.980
是不是这些颜色都在变

34:57.980 --> 34:58.980
对吧

34:58.980 --> 34:59.980
因此我们可以利用

34:59.980 --> 35:00.980
它的含述

35:00.980 --> 35:01.980
一个含述叫做Darken

35:01.980 --> 35:02.980
Darken

35:02.980 --> 35:04.980
它就是专门用来加深颜色的

35:04.980 --> 35:05.980
好

35:05.980 --> 35:06.980
来吧

35:06.980 --> 35:07.980
Darken

35:07.980 --> 35:08.980
第一个参数

35:08.980 --> 35:09.980
就传你的颜色

35:09.980 --> 35:10.980
颜色是Primary

35:10.980 --> 35:11.980
好

35:11.980 --> 35:12.980
第二个参数

35:12.980 --> 35:13.980
是加深多少

35:13.980 --> 35:14.980
加深多少

35:14.980 --> 35:15.980
那么加深了多少呢

35:15.980 --> 35:17.980
加深个百分之二十

35:17.980 --> 35:19.980
加深百分之二十

35:19.980 --> 35:20.980
好

35:20.980 --> 35:21.980
那么再来一个

35:21.980 --> 35:24.980
S3

35:24.980 --> 35:25.980
那么这里呢

35:25.980 --> 35:27.980
加深个百分之四十

35:27.980 --> 35:28.980
没问题吧

35:28.980 --> 35:29.980
那么这里呢

35:29.980 --> 35:31.980
我们就把代码写好了

35:31.980 --> 35:32.980
好

35:32.980 --> 35:33.980
写好了之后呢

35:33.980 --> 35:35.980
我们

35:35.980 --> 35:36.980
这样吧

35:36.980 --> 35:37.980
我们在这里

35:37.980 --> 35:38.980
建个页面

35:38.980 --> 35:39.980
在这里建个页面

35:39.980 --> 35:40.980
Test

35:42.980 --> 35:43.980
页面

35:43.980 --> 35:45.980
里边我们去使用这个CSS

35:45.980 --> 35:47.980
使用这个CSS文件下

35:47.980 --> 35:48.980
用哪一个

35:48.980 --> 35:49.980
用Lens or CSS

35:49.980 --> 35:50.980
注意

35:50.980 --> 35:52.980
页面上肯定不能认识这个东西

35:52.980 --> 35:53.980
哪能认识这个东西

35:53.980 --> 35:54.980
只能用CSS

35:54.980 --> 35:55.980
只能认识这个

35:55.980 --> 35:56.980
好

35:56.980 --> 35:57.980
然后这里写

35:57.980 --> 35:58.980
三个DIV

35:58.980 --> 36:01.980
一个是内样式为S1

36:01.980 --> 36:04.980
一个内样式为S2

36:04.980 --> 36:06.980
一个内样式为S3

36:06.980 --> 36:07.980
每个DIV呢

36:07.980 --> 36:09.980
我写上一些内容

36:09.980 --> 36:14.820
Laurence

36:14.820 --> 36:15.820
为了让这些DIV呢

36:15.820 --> 36:17.820
看上去更加清楚一点

36:17.820 --> 36:19.820
为了让这些DIV看上去

36:19.820 --> 36:20.820
更加清楚一点

36:20.820 --> 36:21.820
我这里呢

36:21.820 --> 36:22.820
给它们设置个高度

36:22.820 --> 36:23.820
高度和margin

36:23.820 --> 36:24.820
我们这里写上一个

36:24.820 --> 36:25.820
我们之前用

36:25.820 --> 36:27.820
我们之前学过的Size

36:27.820 --> 36:28.820
随便写一个

36:28.820 --> 36:29.820
随便写一个

36:29.820 --> 36:31.820
就是用来混入的

36:31.820 --> 36:33.820
高度为100个像素

36:33.820 --> 36:35.820
margin

36:35.820 --> 36:36.820
上下为10个像素

36:36.820 --> 36:37.820
左右为0

36:37.820 --> 36:39.820
那么这里混入一下

36:39.820 --> 36:42.390
Size

36:42.390 --> 36:43.390
这里混入一下

36:45.390 --> 36:46.390
混入一下

36:46.390 --> 36:48.390
接下来我们来编译

36:48.390 --> 36:52.920
你看编译完了过后

36:52.920 --> 36:53.920
看到没

36:53.920 --> 36:54.920
神奇的事情出现了

36:54.920 --> 36:55.920
当然这个编调

36:55.920 --> 36:56.920
肯定不在编译结果里边

36:56.920 --> 36:57.920
这个我们的混入的东西

36:57.920 --> 36:58.920
不在编译结果里边

36:58.920 --> 37:00.920
编译结果里边只有S1 S2 S3

37:00.920 --> 37:01.920
然后呢

37:01.920 --> 37:02.920
我们的颜色你看

37:02.920 --> 37:03.920
是不是放过来了

37:03.920 --> 37:05.920
这是S1我们的主颜色

37:05.920 --> 37:07.920
S2是在主颜色基础上加深的

37:07.920 --> 37:08.920
看没

37:08.920 --> 37:09.920
S3是在主颜色基础上

37:09.920 --> 37:10.920
进一步加深的

37:10.920 --> 37:11.920
对吧

37:11.920 --> 37:12.920
是不是产生了

37:12.920 --> 37:14.920
它颜色就自动出来了

37:14.920 --> 37:15.920
那么接下来我们看一下

37:15.920 --> 37:16.920
看一下页面

37:19.920 --> 37:21.920
这里我们运行

37:22.920 --> 37:23.920
你看

37:23.920 --> 37:24.920
就出现了战斗颜色

37:25.920 --> 37:27.920
这样做有什么好处

37:27.920 --> 37:29.920
将来我们要改变颜色

37:29.920 --> 37:31.920
比方说我们这里颜色一变

37:31.920 --> 37:32.920
变成什么

37:32.920 --> 37:33.920
变成了Green

37:33.920 --> 37:34.920
绿色

37:34.920 --> 37:35.920
你看啊

37:35.920 --> 37:37.920
重新编译

37:37.920 --> 37:39.920
其他的我一行代吧都不用改

37:39.920 --> 37:40.920
重新编译

37:40.920 --> 37:41.920
刷新

37:41.920 --> 37:42.920
你看

37:42.920 --> 37:44.920
是不是在绿色基础上加深了

37:44.920 --> 37:45.920
对吧

37:45.920 --> 37:46.920
这颜色全部跟着变了

37:46.920 --> 37:48.920
有些地方加的太深了

37:48.920 --> 37:50.920
10% 20%

37:50.920 --> 37:52.920
这样子稍微好一点

37:53.920 --> 37:54.920
刷新

37:54.920 --> 37:55.920
你看

37:55.920 --> 37:56.920
是不是在绿色基础上加深了

37:56.920 --> 37:58.920
如果说我们以后变颜色

37:58.920 --> 37:59.920
变成什么了

37:59.920 --> 38:00.920
变成蓝色

38:02.920 --> 38:03.920
再来

38:03.920 --> 38:04.920
编译

38:04.920 --> 38:05.920
刷新

38:05.920 --> 38:06.920
是不是蓝色基础上加深了

38:06.920 --> 38:07.920
对吧

38:07.920 --> 38:08.920
那么

38:08.920 --> 38:10.920
因为我们网站里边

38:10.920 --> 38:11.920
往往都会出现这种情况

38:11.920 --> 38:13.920
就是我们网站的颜色

38:13.920 --> 38:14.920
就那么几种

38:14.920 --> 38:15.920
它不会有太多的颜色

38:16.920 --> 38:17.920
那么其他的颜色

38:17.920 --> 38:19.920
都是在这种基本颜色里边

38:19.920 --> 38:21.920
通过加深

38:21.920 --> 38:22.920
通过加亮

38:22.920 --> 38:24.920
这些东西把它调出来的

38:24.920 --> 38:25.920
所以说

38:25.920 --> 38:26.920
有了这个东西

38:26.920 --> 38:28.920
有了这些颜色函数之后

38:28.920 --> 38:30.920
我们就可以非常轻松的

38:30.920 --> 38:32.920
给网站替换主题

38:32.920 --> 38:34.920
就不用到处去改了

38:34.920 --> 38:35.920
我们变量里边

38:35.920 --> 38:37.920
就改几种颜色就行了

38:37.920 --> 38:38.920
就这么个意思

38:38.920 --> 38:40.920
这是关于Darken

38:40.920 --> 38:41.920
包括什么

38:41.920 --> 38:42.920
来腾

38:42.920 --> 38:43.920
这些东西

38:43.920 --> 38:44.920
飞钉

38:44.920 --> 38:45.920
就是建出

38:45.920 --> 38:46.920
这些东西

38:46.920 --> 38:47.920
那么这些都是

38:47.920 --> 38:49.920
都是调透明度的

38:49.920 --> 38:50.920
那么这些东西

38:50.920 --> 38:52.920
都可以把它作为函数来使用

38:53.920 --> 38:54.920
那么之后

38:54.920 --> 38:55.920
如果说你

38:55.920 --> 38:57.920
在显类似的单码过程中

38:57.920 --> 38:59.920
发现有一些东西

38:59.920 --> 39:01.920
如果说有个函数就非常好了

39:01.920 --> 39:02.920
那么这个时候

39:02.920 --> 39:04.920
你可以到函数的文档里边

39:04.920 --> 39:05.920
去查询一下

39:05.920 --> 39:06.920
或者去百度一下

39:06.920 --> 39:07.920
都行

39:07.920 --> 39:08.920
我这里不打算

39:08.920 --> 39:09.920
一一去介绍这些函数了

39:09.920 --> 39:10.920
OK

39:10.920 --> 39:12.920
这是关于函数

39:12.920 --> 39:14.920
下面这个作用域

39:14.920 --> 39:15.920
就是我们快速的

39:15.920 --> 39:17.920
把这些类似的功能浏览一遍

39:17.920 --> 39:18.920
什么意思呢

39:18.920 --> 39:19.920
这个很简单

39:19.920 --> 39:21.920
就是说有的时候

39:21.920 --> 39:23.920
就跟那个我们介绍函数里边一样

39:23.920 --> 39:24.920
就是有些边上的

39:24.920 --> 39:26.920
它并不是全局的

39:26.920 --> 39:28.920
我并不希望它是全局的

39:28.920 --> 39:29.920
它只是在某些时候

39:29.920 --> 39:31.920
内部去使用

39:31.920 --> 39:32.920
举个例子

39:33.920 --> 39:35.920
我这里好像算了吧

39:35.920 --> 39:37.920
不要把它消除掉了

39:37.920 --> 39:38.920
复制一个出来

39:38.920 --> 39:39.920
举个例子

39:41.920 --> 39:42.920
比方说吧

39:42.920 --> 39:44.920
我们这里有一个Header

39:44.920 --> 39:46.920
有这么一个内样式

39:46.920 --> 39:47.920
这个内样式

39:47.920 --> 39:49.920
我希望有这么

39:49.920 --> 39:50.920
在内样式里边

39:50.920 --> 39:52.920
可能经常用到一个尺寸

39:52.920 --> 39:55.920
这个尺寸就是这个Header的高度

39:55.920 --> 39:56.920
高度

39:56.920 --> 39:57.920
我们就可以在这里

39:57.920 --> 39:58.920
以不要去定义一个变量

39:58.920 --> 39:59.920
Header

39:59.920 --> 40:00.920
高度是多少

40:00.920 --> 40:01.920
56个相处

40:01.920 --> 40:02.920
比方说

40:02.920 --> 40:03.920
那么它自己的高度

40:03.920 --> 40:04.920
用这个变量

40:04.920 --> 40:05.920
你看

40:05.920 --> 40:07.920
然后它下面的内样式

40:07.920 --> 40:08.920
比方说我们下面

40:08.920 --> 40:10.920
有一些Menu

40:10.920 --> 40:12.920
那么它的高度

40:12.920 --> 40:13.920
Header也是一样

40:13.920 --> 40:14.920
Header

40:14.920 --> 40:15.920
你看

40:15.920 --> 40:18.740
变异

40:18.740 --> 40:19.740
你看

40:19.740 --> 40:20.740
是不是都是56个相处

40:20.740 --> 40:21.740
也就是它有一个作用域的

40:21.740 --> 40:22.740
就是这个变量

40:22.740 --> 40:23.740
只能在这里使用

40:23.740 --> 40:25.740
只能在这一块内部使用

40:25.740 --> 40:27.740
跟那个介石还说一样的

40:27.740 --> 40:28.740
如果说你在另一个地方使用的话

40:28.740 --> 40:29.740
你用不到了

40:29.740 --> 40:30.740
这防止什么

40:30.740 --> 40:31.740
防止污染

40:31.740 --> 40:32.740
防止污染

40:32.740 --> 40:33.740
比方说一个ABC的一个样式

40:33.740 --> 40:35.740
你还想去使用这个Header

40:35.740 --> 40:36.740
不好意思

40:36.740 --> 40:37.740
用不了

40:37.740 --> 40:38.740
变异

40:38.740 --> 40:39.740
它会告诉你什么

40:39.740 --> 40:41.740
Header is not defend

40:41.740 --> 40:43.740
这个地方没有定义

40:43.740 --> 40:44.740
而且

40:44.740 --> 40:45.740
如果说你有一个变量

40:45.740 --> 40:46.740
外面有一个变量

40:46.740 --> 40:47.740
同名

40:47.740 --> 40:49.740
60个相处

40:49.740 --> 40:50.740
如果说有一个变量

40:50.740 --> 40:51.740
同名

40:51.740 --> 40:52.740
那么这个时候怎么办

40:52.740 --> 40:53.740
跟介石一样的

40:53.740 --> 40:54.740
这里面能不能用Header

40:54.740 --> 40:55.740
Header能

40:55.740 --> 40:56.740
它用的是什么

40:56.740 --> 40:57.740
靠自己最近的

40:57.740 --> 40:59.740
跟介石作用域是一样的

40:59.740 --> 41:01.740
靠自己最近的Header

41:01.740 --> 41:02.740
那么这里能不能用Header

41:02.740 --> 41:03.740
也能

41:03.740 --> 41:04.740
它能理的

41:04.740 --> 41:05.740
用的是什么

41:05.740 --> 41:06.740
靠自己最近的

41:06.740 --> 41:07.740
用的是这个

41:07.740 --> 41:08.740
变异

41:08.740 --> 41:09.740
好

41:09.740 --> 41:10.740
你看

41:10.740 --> 41:11.740
能看懂吗

41:11.740 --> 41:12.740
非常简单

41:12.740 --> 41:13.740
非常简单

41:13.740 --> 41:14.740
这样子的好处在于

41:14.740 --> 41:15.740
这些

41:15.740 --> 41:16.740
我们的央视

41:16.740 --> 41:18.740
可能是在某一个块的内部

41:18.740 --> 41:19.740
去使用的一些央视

41:19.740 --> 41:20.740
所以说

41:20.740 --> 41:21.740
那么这些央视

41:21.740 --> 41:22.740
有内部

41:22.740 --> 41:23.740
在局部重复的东西

41:23.740 --> 41:24.740
我们就没有必要

41:24.740 --> 41:26.740
把它作为权具变量了

41:26.740 --> 41:27.740
OK 这是关于

41:27.740 --> 41:28.740
作用域

41:30.740 --> 41:31.740
好 接下来注释

41:31.740 --> 41:33.740
注释的话很简单

41:33.740 --> 41:35.740
注释是啥意思呢

41:35.740 --> 41:36.740
你看

41:36.740 --> 41:37.740
它说

41:37.740 --> 41:39.740
Nest里边可以有两种注释

41:39.740 --> 41:40.740
一种叫做

41:40.740 --> 41:41.740
多行注释

41:41.740 --> 41:42.740
块注释

41:43.740 --> 41:44.740
其实

41:45.740 --> 41:46.740
我们虽然这样子叫

41:46.740 --> 41:48.740
但它的作用是不一样的

41:48.740 --> 41:49.740
什么不一样呢

41:49.740 --> 41:50.740
我们来看一下就明白了

41:51.740 --> 41:52.740
比方说

41:52.740 --> 41:53.740
这里是一个单行注释

41:54.740 --> 41:56.740
这里是一个多行注释

42:00.630 --> 42:01.630
多行注释

42:01.630 --> 42:02.630
好 看一下吧

42:02.630 --> 42:05.260
编译

42:05.260 --> 42:06.260
你会发现了

42:06.260 --> 42:07.260
多行注释出来了

42:07.260 --> 42:09.260
在编译结果里面出现了

42:09.260 --> 42:10.260
单行注释没有出现

42:10.260 --> 42:11.260
它其实

42:11.260 --> 42:12.260
那个名字

42:12.260 --> 42:13.260
不应该这样子叫

42:13.260 --> 42:15.260
这个东西应该叫做Nest注释

42:15.260 --> 42:17.260
这样子的交法更加合适一点

