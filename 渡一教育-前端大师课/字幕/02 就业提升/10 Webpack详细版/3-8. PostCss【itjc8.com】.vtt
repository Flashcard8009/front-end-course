WEBVTT

00:00.690 --> 00:02.930
Pose的CSS

00:02.930 --> 00:08.050
这个东西应该是我们本章的最后一个大的知识点了

00:08.050 --> 00:10.290
后边就没有什么大的知识点了

00:10.290 --> 00:13.650
其实说到这个也挺愁畅的

00:13.650 --> 00:15.090
就是什么呢

00:15.090 --> 00:17.250
还是这个老问题

00:17.250 --> 00:20.370
就是我们前端它没有一个最佳实践

00:20.370 --> 00:24.450
如果说咱们前端有最佳实践

00:24.450 --> 00:26.370
特别是工程化这一块

00:26.370 --> 00:28.290
有最佳实践的话

00:28.290 --> 00:29.970
哪有这么多问题

00:30.450 --> 00:32.610
WeiPad可能就一两节课就讲完了

00:32.610 --> 00:33.730
整个WeiPad

00:33.730 --> 00:34.850
因为你安装好了过后

00:34.850 --> 00:39.170
所有的东西都是按照最好的方式给你配好的

00:39.170 --> 00:40.850
那么你直接拥有完事了

00:40.850 --> 00:43.250
你不用去写什么配置

00:43.250 --> 00:44.370
如果说要配置的话

00:44.370 --> 00:46.130
也可能是很少很少的配置

00:46.130 --> 00:49.090
就是有一些定制化的需求

00:49.090 --> 00:50.930
但是现在前端没有

00:50.930 --> 00:52.210
没有就出现了一个问题

00:52.210 --> 00:54.850
就是说WeiPad它不敢给你做事

00:54.850 --> 00:58.610
它不知道有什么这些CSS工程化的问题

00:58.770 --> 00:59.570
它知道

00:59.570 --> 01:00.530
它不敢做

01:00.530 --> 01:01.410
为什么不敢做呢

01:01.410 --> 01:03.570
因为它不知道你要怎么做

01:03.570 --> 01:04.770
不知道你要解决

01:04.770 --> 01:06.610
这些问题要用什么样的方案

01:06.610 --> 01:08.690
因为我们之前看到的

01:08.690 --> 01:09.810
咱们央视这一块

01:09.810 --> 01:10.610
遇到一些问题

01:10.610 --> 01:11.170
没这问题的

01:11.170 --> 01:13.410
它有不同的方案来解决

01:13.410 --> 01:14.370
那么这些构建工具

01:14.370 --> 01:15.970
它就不敢跟你做这件事

01:15.970 --> 01:17.250
必须让你自己去做

01:17.250 --> 01:20.690
这就是没有最佳实践的问题

01:20.690 --> 01:25.010
那么到了央视的工程化这一块

01:25.010 --> 01:27.170
就是因为它也没有最佳实践

01:27.170 --> 01:28.770
央视这里我没有最佳实践

01:28.770 --> 01:32.370
它不知道你要用什么样的方式来解决

01:32.370 --> 01:33.570
那么就导致了

01:33.570 --> 01:35.890
我们要统一这种央视的工程化

01:35.890 --> 01:38.290
在解决方案就很困难

01:38.290 --> 01:41.250
那么这节课咱们学到Pose的CSS这一块

01:41.250 --> 01:42.770
你就会知道

01:42.770 --> 01:44.450
它也没办法

01:44.450 --> 01:47.170
所以说搞得就一个央视处理

01:47.170 --> 01:48.850
你看我们学到多少东西

01:48.850 --> 01:51.330
一个央视处理我们学了很多

01:51.330 --> 01:52.530
我也不给大家列举了

01:52.530 --> 01:53.650
你们就只前面几点

01:53.650 --> 01:55.810
这么一些课

01:55.890 --> 01:58.370
那么这节课我们学习的Pose的CSS

01:58.370 --> 02:01.170
你还会看到更多的问题

02:01.170 --> 02:05.170
那么这些问题它也有一些解决办法

02:05.170 --> 02:07.890
咱们来看一下Pose的CSS

02:07.890 --> 02:09.970
还是怀着一种心态

02:09.970 --> 02:13.330
就是说这些东西了解

02:13.330 --> 02:15.410
就是你要知道有什么东西

02:15.410 --> 02:18.210
不需要去特别的深究

02:18.210 --> 02:21.090
因为我不知道你们以后到了公司里面

02:21.090 --> 02:23.650
你们到底要解决这些央视问题

02:23.730 --> 02:24.930
到底要使用什么方案

02:24.930 --> 02:27.890
我不知道不同的公司可能使用不同的方案

02:27.890 --> 02:30.370
那么这节课我们学习的Pose的CSS

02:30.370 --> 02:31.730
你们以后到了公司用不用了

02:31.730 --> 02:33.170
我也不知道

02:33.170 --> 02:36.370
所以说大家也怀着一种比较开放的心态

02:36.370 --> 02:38.770
看一看没坏处

02:38.770 --> 02:42.930
按理说像这节课Pose的CSS这节课

02:42.930 --> 02:44.130
把它摊开来讲

02:44.130 --> 02:46.530
具体无一的每个知识点全部讲到

02:46.530 --> 02:47.330
讲戏的话

02:47.330 --> 02:48.530
我告诉你这个玩意儿

02:48.530 --> 02:50.290
它不是一节课能解决的

02:50.290 --> 02:52.210
它要一个课程才能解决

02:52.290 --> 02:54.690
但是有没有必要去专门看一节课程

02:54.690 --> 02:55.970
一个课程

02:55.970 --> 02:57.570
我觉得没有必要

02:57.570 --> 03:00.370
因为这个会还本身解决的问题

03:00.370 --> 03:02.610
就是央视这么一块的问题

03:02.610 --> 03:04.450
在整个前端开发领域里面

03:04.450 --> 03:05.810
央视这一块的问题

03:05.810 --> 03:08.130
你要说它有占多大比重

03:08.130 --> 03:09.570
也没有多大比重

03:09.570 --> 03:12.690
因为我们也没有必要那么的具体无一去讲

03:12.690 --> 03:15.170
你只要知道Pose的CSS它怎么会出现

03:15.170 --> 03:16.450
它解决什么样的问题

03:16.450 --> 03:19.570
它怎么解决的就OK了

03:19.570 --> 03:21.010
那么这里可能内容

03:21.090 --> 03:23.970
我们跟Waypack人们没有任何直接的关系

03:23.970 --> 03:25.570
脱离Waypack存在的

03:25.570 --> 03:27.570
好 这里我们首先看第一个点

03:27.570 --> 03:28.610
东西蛮多的

03:28.610 --> 03:30.770
大家看看这老板

03:30.770 --> 03:33.010
什么是Pose的CSS呢

03:33.010 --> 03:35.650
就是我们学到现在那里可以看到

03:35.650 --> 03:38.290
我们的CSS工程化面临了很多的问题

03:38.290 --> 03:39.730
我们之前举了三个

03:39.730 --> 03:42.610
而不同的这些问题有不同的解决办法

03:42.610 --> 03:44.930
它的解决办法多这么多样

03:44.930 --> 03:47.970
于是我们就把这个样式单独拎出来看

03:47.970 --> 03:49.170
不去看什么DS

03:49.170 --> 03:50.210
不去看其他东西

03:50.210 --> 03:51.410
就看样式

03:51.410 --> 03:55.970
光是样式本身就有很多的事情要处理

03:55.970 --> 03:57.570
那么这么多事情要处理

03:57.570 --> 04:00.290
为什么不把这些事情集中到疫情

04:00.290 --> 04:01.970
来统一处理呢

04:01.970 --> 04:05.330
这种识录是不是就是那个Waypack的识录

04:05.330 --> 04:05.890
对吧

04:05.890 --> 04:07.970
我们的工程化里边有很多的问题

04:07.970 --> 04:11.010
那么我就搞一个Waypack这种勾件工具出来

04:11.010 --> 04:13.090
这些问题我们集中在勾件工具里边

04:13.090 --> 04:14.530
统一在处理

04:14.530 --> 04:17.090
而既然我们样式的这一块工程化

04:17.090 --> 04:18.210
也有这么多问题

04:18.290 --> 04:20.930
那么我也可以用类似的识录来解决

04:20.930 --> 04:23.410
就是我做一个东西出来

04:23.410 --> 04:26.130
所有的问题都在这个东西里边

04:26.130 --> 04:28.130
内部来统一解决

04:28.130 --> 04:29.410
所以Pose of CSS

04:29.410 --> 04:32.290
它就基于这样的理念出现了

04:32.290 --> 04:34.610
那么它到底是一个什么玩意呢

04:34.610 --> 04:36.610
它类似于一个编译器

04:36.610 --> 04:38.610
Waypack还是区别蛮大的

04:38.610 --> 04:43.970
它倒是类似于我们之前学的Less和SARS

04:43.970 --> 04:46.770
它可以把样式的原码的编译

04:46.770 --> 04:48.770
成为最终的CSS代码

04:48.770 --> 04:49.970
就是你看这个图

04:49.970 --> 04:51.650
这个图其实是不是就有点像

04:51.650 --> 04:53.330
我们之前的Less和SARS

04:53.330 --> 04:57.490
我写一个比较舒服的样式原码

04:57.490 --> 04:59.490
通过它编译就编译成

04:59.490 --> 05:02.290
之后的样式代码

05:02.290 --> 05:05.010
那么它这种识录跟Less和SARS差不多

05:05.010 --> 05:06.530
但是又有一点区别

05:06.530 --> 05:07.570
就是什么意思呢

05:07.570 --> 05:09.410
就是Pose of CSS

05:09.410 --> 05:10.770
它又借鉴了Waypack

05:10.770 --> 05:11.810
你可以这样认为

05:11.810 --> 05:13.650
它又借鉴了Waypack的这种识录

05:13.650 --> 05:16.530
就说因为你处理的方式太多样了

05:16.530 --> 05:19.810
我不能说我给你固定的用一种方式来处理

05:19.810 --> 05:22.450
我也不知道你用什么样的方式来处理

05:22.450 --> 05:25.090
因此它这种识录的就是我不处理了

05:25.090 --> 05:26.690
我就不处理了

05:26.690 --> 05:29.250
我给你Pose of CSS

05:29.250 --> 05:31.570
它只提供一些基本功能

05:31.570 --> 05:34.210
那么具体的代码转换操作

05:34.210 --> 05:37.890
交给Pose CSS插件去完成

05:37.890 --> 05:40.530
那么下面这张图就可以很好的说明这个问题

05:40.530 --> 05:42.690
Pose of CSS它本身没有做什么事

05:42.690 --> 05:43.650
就像Waypack一样

05:43.650 --> 05:45.170
它本身就是一个打包工具

05:45.170 --> 05:46.450
它没有做什么事

05:46.530 --> 05:50.130
那么具体的事情要靠这些插件加载器去完成

05:50.130 --> 05:52.610
那么其实我们的样式代码

05:52.610 --> 05:54.370
交给Pose of CSS之后

05:54.370 --> 05:57.250
它会把这些代码一式交给这些插件

05:57.250 --> 05:58.450
就有链下加载器

05:58.450 --> 05:59.810
Waypack里边加载器

05:59.810 --> 06:02.290
让它们去完成代码的转换

06:02.290 --> 06:03.970
那么要用什么样的插件

06:03.970 --> 06:06.450
开发者自行决定

06:06.450 --> 06:08.690
它就是这样的一种识录

06:08.690 --> 06:11.570
所以说这些问题都是因为没有最佳时间

06:11.570 --> 06:13.810
有最佳时间就根本就不存在这样的问题了

06:13.810 --> 06:15.090
哪要让你选择

06:15.090 --> 06:16.050
根本不让你选择

06:16.050 --> 06:18.050
直接全部给你弄好

06:18.050 --> 06:19.890
但是现在就是因为没有最佳时间

06:19.890 --> 06:22.530
所以说必须要提供给你选择

06:22.530 --> 06:25.650
下面是一张官方的Pose of CSS的处理流程

06:25.650 --> 06:26.610
我们再看一下吧

06:26.610 --> 06:28.250
我把它截图截下了

06:28.250 --> 06:29.930
放小一点

06:29.930 --> 06:30.850
它说

06:30.850 --> 06:32.370
我们的Pose of CSS

06:32.370 --> 06:34.210
它其实解决的问题的方式

06:34.210 --> 06:35.690
它是这样子的

06:35.690 --> 06:37.610
你把原码给我

06:37.610 --> 06:39.810
中间这一部分就是Pose of CSS

06:39.810 --> 06:40.930
中间这一部分

06:40.930 --> 06:42.570
你把你的原码给我

06:42.570 --> 06:44.410
Pose of CSS它做什么事呢

06:44.450 --> 06:46.330
它把这个语言来进行分析

06:46.330 --> 06:48.530
Poser来进行分析

06:48.530 --> 06:49.210
相当于什么呢

06:49.210 --> 06:51.730
相当于把它分析成一个抽象语法数

06:51.730 --> 06:54.250
咱们的CSS也是一门语言

06:54.250 --> 06:57.050
所以说它也可以成为一个抽象语法数

06:57.050 --> 06:58.290
把它进行分析

06:58.290 --> 06:59.690
分析完了之后

06:59.690 --> 07:02.130
一次把这个抽象分析的结果

07:02.130 --> 07:03.730
抽象语法数

07:03.730 --> 07:06.010
交给这些插件

07:06.010 --> 07:06.890
你看

07:06.890 --> 07:08.770
一开始的语法分析出来是这个样子

07:08.770 --> 07:10.570
它就用一个图的形态表示

07:10.570 --> 07:11.730
交给第一个插件

07:11.730 --> 07:13.530
第一个插件把它转换之后

07:14.370 --> 07:16.730
在抽象语法数里面进行更改

07:16.730 --> 07:17.690
更改完了过后

07:17.690 --> 07:19.730
它的语法数可能变成这个样子了

07:19.730 --> 07:20.890
换个图来说明一下

07:20.890 --> 07:21.970
有变动

07:21.970 --> 07:24.530
然后再把这个东西交给第二个插件

07:24.530 --> 07:27.210
第二个插件再把它变一下

07:27.210 --> 07:28.650
然后最后变完了之后

07:28.650 --> 07:30.250
所谓的插件交完了之后

07:30.250 --> 07:32.450
它再把最终的抽象语法数

07:32.450 --> 07:35.770
转换成一个CSS支付串输出

07:35.770 --> 07:37.170
这是它整个的执行流程

07:37.170 --> 07:40.370
所以我们知道Poser CSS它的原理特别简单

07:40.370 --> 07:41.810
就是它做什么呢

07:41.850 --> 07:44.650
它就是做提供这么一种机制

07:44.650 --> 07:46.210
我给你做代码分析

07:46.210 --> 07:47.770
做CSS代码分析

07:47.770 --> 07:50.330
然后把分析的结果依次交给插件

07:50.330 --> 07:52.210
好插件完了过后

07:52.210 --> 07:53.970
把最终的代码

07:53.970 --> 07:55.570
就是抽象语法数的结果

07:55.570 --> 07:57.050
它再把它转换成支付串

07:57.050 --> 07:59.170
Poser CSS它就做这么一件事

07:59.170 --> 08:00.970
其他的它也没管了

08:00.970 --> 08:02.490
因为它没有语加时间

08:02.490 --> 08:05.130
它不能去帮你处理具体的情况

08:05.130 --> 08:07.690
具体的情况需要插件去处理

08:07.690 --> 08:09.730
这就是Poser CSS

08:09.730 --> 08:10.730
所以说理论上说

08:10.730 --> 08:14.210
我们之前学的那些什么CSS 硬件S

08:14.210 --> 08:15.570
还有什么

08:19.490 --> 08:20.530
NES 啊SARS

08:20.530 --> 08:23.170
其实理论上都可以在Poser CSS里面使用

08:23.170 --> 08:24.690
把它做一种插件

08:24.690 --> 08:25.690
对吧

08:25.690 --> 08:26.850
好

08:26.850 --> 08:28.610
我们来看一下

08:28.610 --> 08:30.850
这里其实就有点类似于Wepack

08:30.850 --> 08:32.770
因为Wepack它本身只做依赖分析

08:32.770 --> 08:33.810
抽象语法数分析

08:33.810 --> 08:36.610
那么其他的操作是靠插件和加载器完成的

08:36.610 --> 08:40.010
Poser CSS它其实只做代码分析

08:40.050 --> 08:42.130
和分析的结构

08:42.130 --> 08:43.450
转发成字幕串

08:43.450 --> 08:46.730
中间的过程是交给插件去完成的

08:46.730 --> 08:48.090
这里我有两个地址

08:48.090 --> 08:49.730
一个是它的官网地址

08:49.730 --> 08:50.970
一个是给的HUB地址

08:50.970 --> 08:52.450
大家有兴趣的话可以看一下

08:52.450 --> 08:53.930
不过全是英文的

08:53.930 --> 08:55.490
这是关于Poser CSS的介绍

08:55.490 --> 08:57.850
其实如果说我们这一刻

08:57.850 --> 08:59.170
最重要的地方在哪

08:59.170 --> 09:01.210
就在第一届

09:01.210 --> 09:02.850
Poser CSS到底是什么

09:02.850 --> 09:04.330
你把这一块东西记住

09:04.330 --> 09:05.330
东西很难忘记

09:05.330 --> 09:06.410
因为这是理解性的东西

09:06.410 --> 09:06.770
对吧

09:06.770 --> 09:07.890
也很难忘记的

09:07.890 --> 09:08.610
你这一块东西

09:08.610 --> 09:09.770
你知道了过后

09:09.770 --> 09:11.810
后边的东西你忘了去查一下

09:11.810 --> 09:13.370
安装忘了去查一下

09:13.370 --> 09:15.010
配置文件忘了去查一下

09:15.010 --> 09:16.770
这些插件忘了去查一下

09:16.770 --> 09:17.090
对不对

09:17.090 --> 09:18.850
后边的东西就没有那么重要了

09:18.850 --> 09:19.530
后边的东西

09:19.530 --> 09:22.330
我们带着一种看热闹的方式

09:22.330 --> 09:24.850
把它看一看就可以了

09:24.850 --> 09:26.250
后边如果说我们不遇到它

09:26.250 --> 09:28.210
也不需要去使用它

09:28.210 --> 09:28.490
好

09:28.490 --> 09:30.290
接下来我们来看安装

09:31.290 --> 09:33.090
我们怎么来安装Poser CSS

09:33.090 --> 09:34.370
它是基于no的编写的

09:34.370 --> 09:36.650
所以说我们要使用NPM来安装

09:36.650 --> 09:38.210
NPM当然是开发依赖

09:38.770 --> 09:40.010
因为我们只是在编辑的

09:40.010 --> 09:40.930
说开发依赖

09:40.930 --> 09:42.490
安装Poser CSS

09:43.770 --> 09:44.730
那么这个库里边

09:44.730 --> 09:45.690
它提供了一个

09:45.690 --> 09:46.930
当然我这里已经安装好了

09:46.930 --> 09:48.810
我这些东西相关的东西都安装好了

09:48.810 --> 09:50.010
所以我这里不用安装了

09:50.730 --> 09:51.730
那么这个库里边

09:51.730 --> 09:53.450
它提供了一些介式API

09:53.450 --> 09:55.250
它就是提供了一些函数

09:55.250 --> 09:57.090
一些对象

09:57.090 --> 09:58.570
那么通过这些函数和对象

09:58.570 --> 09:59.530
它可以利用带

09:59.530 --> 10:00.890
它可以转换带

10:00.890 --> 10:02.290
它可以转换带

10:02.290 --> 10:03.770
比方说我举个例子

10:03.770 --> 10:05.570
它里边其实也很简单

10:05.570 --> 10:07.610
我记得它那个叫啥

10:07.890 --> 10:09.850
我说有点记不清楚了

10:09.850 --> 10:11.050
有点记不清楚了

10:11.050 --> 10:12.570
看一下吧

10:12.570 --> 10:13.930
看一下吧它的API

10:15.690 --> 10:17.010
平时也不怎么去使用

10:18.290 --> 10:19.410
接下来就听着了

10:19.410 --> 10:21.810
不用太过于有什么压力

10:22.810 --> 10:24.330
速度也蛮慢的

10:24.330 --> 10:25.370
慢的算了

10:25.370 --> 10:26.170
算了算了

10:26.170 --> 10:27.010
有几个例子吧

10:27.010 --> 10:27.810
几个例子

10:28.930 --> 10:29.610
比方说吧

10:29.610 --> 10:31.250
它有一个函数叫Render

10:31.250 --> 10:34.290
你把原来的CSS

10:34.290 --> 10:35.770
CSS带把传给它

10:35.770 --> 10:37.570
那么它后边一个回掉

10:38.370 --> 10:39.010
Torquets

10:39.850 --> 10:41.690
我不知道记错没有

10:41.690 --> 10:43.970
大概是这么一个类似的意思

10:43.970 --> 10:45.810
这个函数是有某一个对象里面的

10:45.810 --> 10:47.450
你把原来的带把给它

10:48.130 --> 10:50.410
就是你要Bn1的CSS带把给它

10:50.410 --> 10:52.050
然后它会给力一个

10:54.970 --> 10:56.730
它会给力一个对象

10:56.730 --> 10:58.490
对象里面有一个属性叫CSS

10:58.490 --> 11:02.290
那么这个就是Bn1后的带把

11:02.290 --> 11:02.930
对不对

11:02.930 --> 11:04.770
它就是按照这样的方式来做的

11:04.770 --> 11:07.330
当然它中间会使用一些插件

11:07.370 --> 11:09.250
这是使用带码的形式

11:09.250 --> 11:11.010
来调用它的功能

11:11.650 --> 11:12.930
然后提供了一些API

11:13.490 --> 11:14.770
如果说你以后

11:14.770 --> 11:15.570
万一

11:15.570 --> 11:17.370
这个情况比较少见

11:17.370 --> 11:19.890
如果说你万一你要以后的公司里边

11:19.890 --> 11:23.050
要使用Pose CSS的一些高级功能

11:23.410 --> 11:26.410
或者说你要就是要开发一个Pose CSS的插件

11:26.410 --> 11:27.770
它不是基于插件的吗

11:27.770 --> 11:30.890
那么你肯定要使用这里边的API

11:30.890 --> 11:32.290
那么API稳当了在这

11:32.770 --> 11:34.210
里边API非常非常多

11:35.210 --> 11:36.770
这是关于它的API

11:36.810 --> 11:39.850
但是我们平时用它的时候会不会用API

11:39.850 --> 11:40.690
不会的

11:41.250 --> 11:42.610
我们更多的时候

11:42.610 --> 11:44.330
使用一个命令行工具

11:44.330 --> 11:46.170
或者是我们后边要学习的

11:46.170 --> 11:47.690
跟WAPI可结合在一起

11:47.690 --> 11:48.290
对吧

11:48.290 --> 11:50.690
我们这一刻肯定是跟WAPI无关的

11:50.690 --> 11:52.130
所以说我们这一刻

11:52.530 --> 11:54.210
会使用一个命令行工具

11:54.210 --> 11:55.970
就是Pose CSS CD

11:56.530 --> 11:58.930
通过这个命令行工具来完成编译

11:58.930 --> 12:00.010
那么这个命令行工具

12:00.010 --> 12:03.130
它其实就是调用刚才这个库里边的API

12:03.130 --> 12:04.370
所以你安装的时候

12:04.370 --> 12:05.530
我们这一刻学习的时候

12:05.530 --> 12:06.410
你安装两个

12:06.490 --> 12:08.010
一个是Pose CSS

12:08.010 --> 12:09.490
还是跟它做一遍

12:09.490 --> 12:10.170
也不难

12:10.170 --> 12:11.690
跟它做是一样的

12:11.690 --> 12:13.890
看一下这也挺有意思的

12:14.410 --> 12:16.170
那么这里还要安装一个命令行工具

12:16.170 --> 12:18.410
是不是有点类似于WAPI和WAPI CD

12:18.410 --> 12:19.050
对吧

12:19.050 --> 12:20.010
安装这两个

12:20.570 --> 12:21.890
安装好了两个之后

12:21.890 --> 12:23.010
它会提供一个命令

12:23.010 --> 12:24.290
提供一个命令

12:24.290 --> 12:25.890
这个命令是什么呢

12:25.890 --> 12:26.810
Pose CSS

12:26.810 --> 12:28.370
你给它一个圆码文件

12:29.290 --> 12:30.090
Hungang O

12:30.090 --> 12:30.730
O什么意思

12:30.730 --> 12:32.570
Output

12:32.570 --> 12:33.530
表示输出

12:33.530 --> 12:35.170
后面可以看到一个输出文件

12:35.170 --> 12:37.530
因为这个命令很长

12:37.530 --> 12:39.530
我一般会把它放到这个

12:39.530 --> 12:40.970
我把它放到这儿了

12:40.970 --> 12:42.130
Start

12:42.130 --> 12:43.330
Pose CSS的命令

12:44.330 --> 12:47.610
我们这里先写一个圆码文件

12:47.610 --> 12:48.770
先不看这

12:48.770 --> 12:53.220
我们先写一个圆码

12:53.220 --> 12:54.780
把样式

12:54.780 --> 12:57.660
比方我们这里写这么一个圆码文件

12:57.660 --> 12:59.780
叫做Source

13:00.420 --> 13:01.780
后续名是什么呢

13:01.780 --> 13:03.340
后续名我们之前用Nest的时候

13:03.340 --> 13:04.180
是Nest的后续名

13:04.180 --> 13:04.660
对吧

13:04.660 --> 13:06.380
那么Pose CSS的圆码文件

13:06.380 --> 13:07.980
用什么后续名的

13:07.980 --> 13:08.780
都行

13:08.780 --> 13:09.940
无所谓的

13:09.940 --> 13:11.940
你可以用CSS后续名

13:11.940 --> 13:14.700
也可以用Pose CSS后续名

13:14.700 --> 13:18.100
也可以用P CSS后续名

13:18.100 --> 13:19.700
都可以

13:19.700 --> 13:21.820
我这里好像顺便说一下

13:21.820 --> 13:23.340
因为可能有些同学

13:23.340 --> 13:25.180
使用这样的后续名的话

13:25.180 --> 13:26.580
后续名其实无所谓的

13:26.580 --> 13:28.980
就用CSS后续名也可以

13:28.980 --> 13:31.780
如果说你使用Pose CSS的后续名

13:31.780 --> 13:34.660
表示它是一个Pose CSS的圆码

13:34.780 --> 13:36.620
就是CSS圆码文件

13:36.620 --> 13:37.660
那么这样子你可能

13:37.660 --> 13:39.060
那个图标显示不出来

13:39.060 --> 13:40.740
这里边有可能

13:40.740 --> 13:42.020
它的代码着色

13:42.020 --> 13:43.820
就代码颜色可能显示不出来

13:43.820 --> 13:44.500
那么这个时候

13:44.500 --> 13:45.820
你需要去安装一个

13:45.820 --> 13:48.940
就是那个插件

13:48.940 --> 13:50.260
就是VS Code的插件

13:50.260 --> 13:52.100
好像叫啥玩意

13:52.100 --> 13:55.220
Pose CSS

13:55.220 --> 13:55.780
我看一下

13:55.780 --> 13:56.820
我看一下

13:56.820 --> 13:58.140
所以有很常说

13:58.140 --> 13:59.580
这个插件Pose CSS

13:59.580 --> 14:02.140
是Sugarace Languages

14:02.140 --> 14:02.740
那么这样子

14:02.740 --> 14:04.660
它就能识别这种扩展名

14:04.660 --> 14:06.500
就Pose CSS

14:06.500 --> 14:07.820
SS CSS

14:07.820 --> 14:08.900
这三种扩展名都可以

14:08.900 --> 14:09.460
一般来说

14:09.460 --> 14:10.940
我们这三种扩展名

14:10.940 --> 14:11.660
选一样

14:11.660 --> 14:13.540
来作为Pose CSS的文件

14:13.540 --> 14:14.900
扩展名

14:14.900 --> 14:15.940
当然我们直接使用

14:15.940 --> 14:17.380
CSS作为扩展名也可以

14:17.380 --> 14:18.460
没问题

14:18.460 --> 14:19.060
按照这个插件

14:19.060 --> 14:20.580
它就能识别这样的扩展名了

14:20.580 --> 14:21.860
那么这里边它就知道

14:21.860 --> 14:24.500
你使用的是Pose CSS的代码

14:24.500 --> 14:25.060
你看

14:25.060 --> 14:25.820
语言模式

14:25.820 --> 14:26.780
就Pose CSS

14:26.780 --> 14:28.020
你要需要安装个插件

14:28.020 --> 14:28.540
不然

14:28.540 --> 14:29.620
其实不安装也没事

14:29.620 --> 14:30.860
不安装也不印象的印象

14:30.860 --> 14:32.140
就是你写代码的时候

14:32.180 --> 14:33.380
没有智能提示

14:33.380 --> 14:34.540
也看不清

14:34.540 --> 14:36.180
代码的颜色全是白色的

14:36.180 --> 14:38.900
也看不清它的结构

14:38.900 --> 14:41.460
只是看上去不太方便而已

14:41.460 --> 14:41.940
好了

14:41.940 --> 14:43.580
那么就是原代码

14:43.580 --> 14:43.860
对吧

14:43.860 --> 14:44.300
原代码

14:44.300 --> 14:45.780
我们随便写一个吧

14:45.780 --> 14:46.940
随便写一个

14:46.940 --> 14:48.820
这写啥

14:48.820 --> 14:49.980
随便写一个

14:49.980 --> 14:51.420
Color Red

14:51.420 --> 14:52.860
这是我们的原代码

14:52.860 --> 14:53.900
它这写的代码

14:53.900 --> 14:56.220
我们目前跟Pose CSS

14:56.220 --> 14:57.060
代码没啥区别

14:57.060 --> 14:58.380
因为我们目前还没有学习

14:58.380 --> 15:00.220
它相关的插件

15:00.220 --> 15:01.940
那么这个时候怎么编译呢

15:01.980 --> 15:02.580
怎么编译呢

15:02.580 --> 15:04.300
它就是要使用命令了

15:04.300 --> 15:05.500
比方我们这里可以使用命令

15:05.500 --> 15:07.900
Pose CSS编译

15:07.900 --> 15:08.740
编译哪

15:08.740 --> 15:10.220
把它原代码文件给它

15:11.420 --> 15:12.540
编译的结构放到哪

15:12.540 --> 15:15.420
放到CSS Out.CSS

15:15.420 --> 15:17.540
当然文件名里随便去

15:17.540 --> 15:18.980
后边给人一个横桿W

15:18.980 --> 15:19.820
什么意思呢

15:19.820 --> 15:20.940
表示的是

15:20.940 --> 15:22.540
相当于是那个

15:22.540 --> 15:23.460
WePack的Watch

15:24.540 --> 15:25.860
观测文件改动

15:25.860 --> 15:26.500
文件一改动

15:26.500 --> 15:27.820
它的重新编译

15:27.820 --> 15:29.220
就这么个意思

15:29.220 --> 15:29.340
好

15:29.340 --> 15:30.460
今天我们来看一下吧

15:30.500 --> 15:34.670
来运行NPM Start

15:34.670 --> 15:37.350
这里运行NPM Start

15:37.350 --> 15:39.470
你看一下运行

15:39.470 --> 15:40.190
是不是编译了

15:40.190 --> 15:40.750
对吧

15:40.750 --> 15:42.190
它这里有个警告

15:42.190 --> 15:42.950
这个警告没事

15:42.950 --> 15:44.030
没事

15:44.030 --> 15:45.030
你看是不是编译了

15:45.030 --> 15:46.070
对吧

15:46.070 --> 15:46.910
编译了

15:46.910 --> 15:48.350
好编译的结构里边你看一下

15:48.350 --> 15:49.230
这里有个什么

15:49.230 --> 15:51.350
SourceMapping URL

15:51.350 --> 15:52.590
所以有个SourceMap

15:52.590 --> 15:55.310
跟JS是一样的

15:55.310 --> 15:57.070
因为它可能原码的结构

15:57.070 --> 15:59.390
跟最终的结构可能有区别

15:59.390 --> 16:00.830
那么到时候要调试的时候

16:00.870 --> 16:03.070
我们还是要希望看到原码的结构

16:03.070 --> 16:04.590
所以说它有一个SourceMapping

16:05.870 --> 16:06.750
这个玩意无所谓

16:06.750 --> 16:07.350
无所谓

16:07.350 --> 16:09.750
通常的世界赛事我们也没有必要去

16:09.750 --> 16:11.830
过于去那个就是

16:11.830 --> 16:14.430
过于一带这个东西

16:14.430 --> 16:15.190
也不太过于

16:15.190 --> 16:16.510
也不太一带这个东西

16:16.510 --> 16:17.070
无所谓吧

16:17.070 --> 16:18.270
它放在这放着了

16:18.270 --> 16:20.070
这就是它的编译

16:20.070 --> 16:21.390
编译的方式

16:21.390 --> 16:21.750
对吧

16:21.750 --> 16:22.670
就是安装和使用

16:22.670 --> 16:23.510
特别简单

16:24.390 --> 16:24.590
好

16:24.590 --> 16:25.830
今天我们看下一节

16:25.830 --> 16:27.030
叫配置文件

16:27.590 --> 16:28.390
啥意思呢

16:28.390 --> 16:29.750
就是跟WePack很相似

16:29.790 --> 16:31.470
它也有自己的配置文件

16:31.470 --> 16:34.750
这个配置文件会影响它的某些编译行为

16:34.750 --> 16:36.230
这个配置文件在哪呢

16:36.230 --> 16:37.230
这个配置文件

16:37.230 --> 16:40.550
我们通常使用PoseCSS Config.JS

16:40.550 --> 16:42.670
是不是跟那个WePack差不多

16:42.670 --> 16:43.190
对吧

16:43.190 --> 16:44.030
来吧

16:44.030 --> 16:46.070
我们就使用这样的文件扩展名

16:46.070 --> 16:46.630
我们在这里

16:46.630 --> 16:47.870
新建个配置文件

16:49.750 --> 16:50.390
图标变了

16:50.390 --> 16:54.230
它知道这是PoseCSS的一个配置文件

16:54.230 --> 16:55.910
那么配置的方式也一样

16:55.910 --> 16:57.830
MartialExport

16:57.950 --> 16:59.150
导出

16:59.150 --> 17:00.830
因为它机会漏了界是什么

17:00.830 --> 17:03.430
它编译的时候在使用这个文件

17:03.430 --> 17:05.390
它导出一个对象就作为配置

17:05.390 --> 17:07.070
这里我给大家写了一个配置

17:07.070 --> 17:08.510
MappingForce

17:08.510 --> 17:09.230
这是什么配置呢

17:09.230 --> 17:10.190
归安关闭

17:10.190 --> 17:11.310
SourceMap

17:11.310 --> 17:12.950
这样子它就没有SourceMap了

17:12.950 --> 17:14.990
就没有缘骂地图了

17:14.990 --> 17:16.470
保存一下

17:16.470 --> 17:17.310
来看一下

17:19.310 --> 17:20.950
这里重新启动

17:22.110 --> 17:22.870
Start

17:22.870 --> 17:24.470
刚才的警告它就告诉你

17:24.470 --> 17:25.510
你没有

17:25.510 --> 17:27.350
不是说你没有配置文件

17:27.350 --> 17:28.310
你没有设置插件

17:28.310 --> 17:29.790
插件现在还没有

17:29.790 --> 17:31.950
你看现在是不是编印了结果

17:31.950 --> 17:32.830
是不是没有那个

17:33.910 --> 17:34.990
缘骂地图了

17:34.990 --> 17:37.790
因为SourceMap是我们也不太依赖缘骂地图

17:37.790 --> 17:39.390
当然缘骂地图加上也没事

17:39.390 --> 17:40.350
也没事

17:40.350 --> 17:41.910
如果说你还可以说

17:41.910 --> 17:43.910
如果说我要使用一个就是

17:46.230 --> 17:49.550
使用不要用那种行类的方式来做缘骂地图

17:49.550 --> 17:51.430
单独生成一个文件来做缘骂地图

17:51.430 --> 17:52.270
可不可以呢

17:52.270 --> 17:53.750
也可以

17:53.750 --> 17:54.550
比方说我们这里

17:54.550 --> 17:55.910
这个东西就没有必要去申就了

17:55.910 --> 17:57.190
看一看就得了

17:57.230 --> 17:58.350
它可以把它配置为一个对象

17:58.350 --> 18:00.070
好像叫做阴暗还是什么玩意

18:00.070 --> 18:01.670
我也记不得很清楚了

18:01.670 --> 18:03.110
那么把它设为Force

18:03.870 --> 18:05.990
就是使用缘骂地图

18:06.590 --> 18:07.470
但是

18:07.750 --> 18:10.550
不使用行类缘骂

18:10.990 --> 18:12.990
就是不要把缘骂变成刚才那种

18:12.990 --> 18:15.790
就是一行的方式放到最终文件里面

18:15.790 --> 18:17.270
用单独的文件来表示

18:17.430 --> 18:18.190
保存

18:18.670 --> 18:21.150
你看是不是生成了一个SourceOutsCSS

18:21.150 --> 18:22.670
就是缘骂地图Map

18:22.670 --> 18:24.150
那么这里边它只是

18:24.150 --> 18:25.830
给它订了一个缘骂地图的位置

18:26.550 --> 18:28.870
这些东西了解就行了

18:28.870 --> 18:30.070
Map我都把去了

18:30.630 --> 18:32.030
关闭得了

18:33.990 --> 18:34.750
没问题吧

18:35.990 --> 18:37.230
好 这里删除掉

18:38.150 --> 18:38.750
OK

18:40.310 --> 18:42.870
那么这就是它的配置文件

18:43.870 --> 18:44.310
好

18:44.310 --> 18:46.030
那么接下来就是

18:47.030 --> 18:48.630
它是基于插件的

18:48.630 --> 18:50.110
它本身有啥功能的

18:50.310 --> 18:51.270
啥功能都没有

18:51.270 --> 18:52.230
它玩这个玩意

18:52.230 --> 18:53.070
啥功能都没有

18:53.070 --> 18:55.270
它就是你写啥给它给你变成啥

18:55.310 --> 18:56.470
啥功能都没有

18:56.470 --> 18:58.630
所以说你要让它发挥作用

18:58.630 --> 18:59.870
你得使用插件

19:00.430 --> 19:02.390
它里边有很多很多的插件

19:02.790 --> 19:04.750
你光使用PoseOutsCSS没多少

19:05.390 --> 19:06.630
那么就要用插件

19:06.630 --> 19:07.590
插件有哪些呢

19:07.590 --> 19:08.830
这里有个网站

19:09.830 --> 19:11.630
也它官方提供了一个网站

19:11.630 --> 19:12.510
在这个网站里面

19:12.510 --> 19:14.510
也可以它夺列了很多的

19:14.510 --> 19:16.350
几乎是全部的PoseOutsCSS

19:16.350 --> 19:19.470
几乎是全部的PoseOutsCSS插件

19:19.750 --> 19:20.430
你看一下吧

19:20.630 --> 19:21.710
跟颜色相关的

19:21.710 --> 19:22.870
跟调色相关的

19:22.870 --> 19:24.670
跟怎么扩展相关的

19:24.870 --> 19:25.670
一大堆

19:25.670 --> 19:26.710
后边有一些新

19:26.710 --> 19:28.110
就像GIS HUB的新

19:29.110 --> 19:31.110
然后跟字体相关的

19:31.110 --> 19:32.910
一大堆多了些吓死人

19:33.510 --> 19:34.550
要不要每个都学些

19:34.550 --> 19:35.070
你疯了吧

19:35.070 --> 19:36.390
要每个都去学些

19:36.390 --> 19:37.670
没必要

19:37.670 --> 19:39.390
你看它后边还可以支持SARS

19:39.390 --> 19:40.630
其实还可以支持NES

19:40.630 --> 19:42.270
可以支持那些都支持的

19:42.590 --> 19:45.270
只不过平时我们使用PoseOutsCSS的时候

19:45.270 --> 19:46.670
不太会去使用SARS

19:46.670 --> 19:48.030
不太会去使用NES

19:48.030 --> 19:49.510
因为它有别的替代方案

19:50.190 --> 19:51.310
总之它有很多

19:51.310 --> 19:53.390
那么我们随便介绍几个

19:53.390 --> 19:53.950
得了

19:54.270 --> 19:55.670
我们这几个常用的

19:55.670 --> 19:56.670
没后必要去

19:56.670 --> 19:57.710
每个都去学习

19:58.390 --> 20:00.230
不就是解决一些样式问题吗

20:01.230 --> 20:01.750
一个个来

20:01.750 --> 20:02.870
我们这里给大家安裸

20:02.870 --> 20:03.790
列了四个插件

20:03.790 --> 20:04.510
还有五个插件

20:04.510 --> 20:05.230
一

20:05.230 --> 20:05.750
二

20:05.750 --> 20:06.110
三

20:06.110 --> 20:06.550
四

20:06.550 --> 20:07.670
五个插件

20:07.670 --> 20:10.070
这五个插件就比较有代表性了

20:10.350 --> 20:11.270
当然前面条件

20:11.270 --> 20:13.030
你以后得使用PoseOutsCSS

20:13.030 --> 20:13.990
这些东西才有意义

20:13.990 --> 20:14.790
你不使用它

20:14.790 --> 20:15.790
这些东西就没啥意义

20:15.790 --> 20:16.630
没啥意义

20:18.150 --> 20:19.190
首先看第一个

20:19.750 --> 20:22.950
叫做PoseCSSPresentM

20:23.670 --> 20:25.950
这是一个满新的

20:25.950 --> 20:27.550
一个PoseOutsCSS插件

20:29.870 --> 20:31.590
过去使用PoseOutsCSS的时候

20:31.590 --> 20:34.310
往往会使用大量的一些常用插件

20:34.310 --> 20:35.870
它们各自解决一些问题

20:35.870 --> 20:37.190
那么这样导致的结果

20:37.190 --> 20:38.830
是我们要安装一大堆

20:38.830 --> 20:40.150
PoseOutsCSS插件

20:40.150 --> 20:41.630
配置起来特别的繁琐

20:41.830 --> 20:43.790
所以说余生它就出现了这么一个东西

20:43.790 --> 20:45.750
叫PoseOutsCSSPresentM

20:46.590 --> 20:49.070
这个东西叫PresentM

20:49.070 --> 20:50.070
M什么意思

20:50.070 --> 20:51.230
Environment

20:51.670 --> 20:52.470
环境

20:52.710 --> 20:54.470
PresentM

20:54.870 --> 20:55.670
这两个字

20:55.670 --> 20:57.870
预设环境

20:58.030 --> 21:00.270
以后大家还会看到这么一个词

21:00.270 --> 21:02.230
在GS那里也会看到这么一个词

21:02.230 --> 21:03.110
我们后边再说

21:03.110 --> 21:03.990
以后再说

21:04.430 --> 21:05.350
什么叫预设环境

21:05.350 --> 21:07.390
就是我给你安装好了一些东西

21:07.390 --> 21:08.470
给你设置好了

21:08.470 --> 21:10.390
我们大部分人都是这样用的

21:10.390 --> 21:13.670
虽然说我们前端还没有最佳实践

21:13.670 --> 21:15.310
但是慢慢在形成

21:15.310 --> 21:16.350
慢慢就形成

21:16.350 --> 21:17.510
余生它出来一些东西

21:17.510 --> 21:19.350
它就把这些该安装的

21:19.350 --> 21:21.030
该设置的给设置好了

21:21.270 --> 21:23.990
你就不用去单独的每一个每个设置了

21:23.990 --> 21:26.470
就叫做预设环境

21:26.790 --> 21:27.630
大意就是说

21:27.630 --> 21:29.750
它整合了一些常用的插件在一起

21:29.750 --> 21:31.510
帮你完成了基本的配置

21:31.510 --> 21:33.070
你只要安装这一个就行了

21:33.070 --> 21:34.950
以前没有这个东西的时候

21:34.950 --> 21:36.310
你要使用PoseOutsCSS

21:36.310 --> 21:37.870
你要去让单独安装很多

21:38.630 --> 21:40.310
它就相当于安装了很多插件了

21:41.870 --> 21:43.270
那么我们来安装一下插件

21:43.270 --> 21:44.750
参专意我其实已经安装了

21:44.750 --> 21:46.750
你直接来NPMI

21:46.750 --> 21:47.470
橫钢D

21:47.470 --> 21:48.270
然后插件名字

21:48.270 --> 21:49.470
方丁琴就玩笑了

21:49.710 --> 21:51.270
我们这里不要掉载安装了

21:51.270 --> 21:52.510
我已经安装好了

21:52.510 --> 21:53.510
安装好了过后

21:53.510 --> 21:54.390
你要配置一下

21:54.390 --> 21:55.950
要告诉PoseOutsCSS

21:55.950 --> 21:57.670
你分析的原码

21:57.670 --> 21:59.990
你要把它交给这个插件

21:59.990 --> 22:00.790
那怎么来配置呢

22:00.790 --> 22:01.230
你看

22:01.230 --> 22:03.310
plugins

22:03.310 --> 22:08.300
在这要配置一个plugins

22:08.300 --> 22:09.580
表示我插件

22:09.580 --> 22:11.700
它其实可以配置这个对象

22:11.700 --> 22:12.540
也可以配置这个输入

22:12.540 --> 22:13.660
我们通常有一个对象

22:13.660 --> 22:15.060
都是随便随便

22:15.060 --> 22:18.380
那么这里的第一个属性名

22:18.380 --> 22:19.980
就表示插件的名字

22:20.540 --> 22:23.620
后面的对象表示这个插件的里边的配置

22:23.620 --> 22:25.420
对于这个插件的配置

22:25.420 --> 22:26.380
有点像什么

22:26.380 --> 22:27.780
有点像那个

22:27.780 --> 22:29.780
WePack里边的

22:29.780 --> 22:31.300
夹载器和夹载器的配置

22:31.300 --> 22:32.180
有点类似

22:32.180 --> 22:33.420
类似这么有意思

22:33.420 --> 22:34.820
它配置起来比较简洁一点

22:34.820 --> 22:36.820
就是我要使用这个插件

22:36.820 --> 22:38.180
你要把原码交给它

22:38.180 --> 22:39.460
然后

22:39.460 --> 22:40.860
这个插件的运作过程中

22:40.860 --> 22:41.580
有哪些配置

22:41.580 --> 22:42.700
那么配置到这个对象里面

22:42.700 --> 22:43.700
如果说没有配置的话

22:43.700 --> 22:45.580
就直接写个对象就完事了

22:45.580 --> 22:47.740
这样子就把插件配置好了

22:48.700 --> 22:49.300
好

22:49.300 --> 22:50.300
这里我们

22:50.300 --> 22:51.740
轻松再重来

22:51.740 --> 22:52.700
MPM Start

22:53.300 --> 22:53.860
你看

22:53.860 --> 22:55.140
现在是为了没有报这个警告了

22:55.140 --> 22:55.860
刚才那个警告了

22:55.860 --> 22:56.500
就表示说

22:56.500 --> 22:57.540
你没有写任何插件

22:57.540 --> 22:58.780
那个没有什么意义

22:58.780 --> 23:00.060
你没有插件的Pose

23:00.060 --> 23:01.180
这些是没有意义的

23:01.180 --> 23:02.860
那么现在我们使用了这个插件

23:03.860 --> 23:05.300
那么这个插件能干嘛了

23:05.300 --> 23:06.620
目前看来好像啥都没干

23:06.620 --> 23:07.060
对吧

23:07.060 --> 23:08.420
他们能干嘛了

23:08.420 --> 23:10.060
接下来我们看两个

23:10.060 --> 23:11.980
它主要的功能在于这两点

23:11.980 --> 23:15.380
第一点叫做自动的厂商潜罪

23:15.380 --> 23:16.660
什么意思呢

23:16.900 --> 23:17.860
就是我们知道

23:17.860 --> 23:19.300
有些CSS样式

23:19.820 --> 23:22.020
也要把它放到9版本浏览器里边了

23:22.980 --> 23:23.780
它运作不了

23:23.780 --> 23:25.380
比方说我们这个样式

23:25.380 --> 23:26.700
这个样式里面肯定看懂了

23:26.700 --> 23:27.220
应该学过了

23:27.220 --> 23:27.860
对吧

23:27.860 --> 23:28.740
表示什么意思

23:28.740 --> 23:32.820
表示我要设置一个Place Holder的样式

23:33.580 --> 23:35.540
就是一个文笨框里面填一些东西的时候

23:35.540 --> 23:36.900
那里边原来啥东西

23:36.900 --> 23:37.860
那个样式

23:37.860 --> 23:39.500
就这么个意思

23:39.500 --> 23:40.260
那么这个样式

23:40.260 --> 23:41.660
在一些9版本浏览器里边

23:41.660 --> 23:43.460
因为它当时没有形成标准

23:43.460 --> 23:45.260
在9版本浏览器里边

23:45.260 --> 23:46.420
是不是用不了

23:46.460 --> 23:47.620
但是那9版本浏览器里边

23:47.620 --> 23:49.300
虽然它不支持这个

23:49.300 --> 23:52.420
但是它支持这个功能

23:52.420 --> 23:54.380
但它写法不是这样子写的

23:54.380 --> 23:56.180
所以我们不想多解释的

23:56.180 --> 23:57.420
厂商潜罪里面都懂的

23:57.420 --> 23:57.980
对吧

23:57.980 --> 24:00.860
所以说他们往往会加上一个厂商潜罪

24:00.860 --> 24:01.620
那么平时说

24:01.620 --> 24:03.540
如果说我们要兼容一些9版本浏览器的话

24:03.540 --> 24:04.380
要自己手动写

24:04.380 --> 24:05.420
特别麻烦

24:05.420 --> 24:07.140
那么我们希望了

24:07.140 --> 24:08.620
有个东西能够自动帮我们转换

24:09.820 --> 24:11.500
那么这个怎么来转换呢

24:11.500 --> 24:12.340
怎么来转换呢

24:12.340 --> 24:13.980
就可以使用这个插线

24:13.980 --> 24:15.540
Pose of CSS Present in

24:15.580 --> 24:17.020
它就会自动帮你转换

24:17.020 --> 24:17.860
来帮我们来看一下吧

24:19.460 --> 24:21.020
我们复制一下个代码

24:21.020 --> 24:22.500
写到圆码里边

24:22.500 --> 24:23.740
一宝村

24:23.740 --> 24:25.260
你看它转换了最终的CSS

24:25.260 --> 24:27.620
你看是不是把自动的厂商潜罪给加上了

24:27.620 --> 24:29.220
就这么简单

24:29.220 --> 24:30.780
最后还把这个东西给加上了

24:30.780 --> 24:32.340
就是万一你识别这个标准的

24:32.340 --> 24:33.580
你知道标准是什么

24:33.580 --> 24:35.300
你就是你浏览器能够支持这个标准

24:35.300 --> 24:35.900
OK

24:35.900 --> 24:37.540
那你也可以使用这个

24:37.540 --> 24:38.300
如果支持不了了

24:38.300 --> 24:39.260
前面去找

24:39.260 --> 24:40.060
对吧

24:40.060 --> 24:43.180
就是厂商潜罪就给你加上了

24:43.180 --> 24:44.020
那么这个功能

24:44.020 --> 24:45.740
其实它并不是它来完成的

24:45.740 --> 24:48.020
只要一个库叫做Out to Prefixer

24:48.020 --> 24:50.100
应该大家听说过这个库

24:50.100 --> 24:52.820
这个库还会自动的给你加上厂商潜罪

24:52.820 --> 24:54.020
那么其实这个插件里边

24:54.020 --> 24:55.780
它就用到了这个库

24:55.780 --> 24:56.860
就是这个插件里边

24:56.860 --> 24:58.140
它本身没有做多少事情

24:58.140 --> 25:00.460
它就是用了一些别的库

25:00.460 --> 25:02.340
因此这个插件它本身包含了这个库

25:02.340 --> 25:04.100
所以说自动的拥有了这个功能

25:05.700 --> 25:05.860
好

25:05.860 --> 25:08.100
那么这里我们还要说一个点

25:08.100 --> 25:10.820
这个点大家要注意听

25:10.820 --> 25:13.620
因为这个点可能会影响到我们以后

25:13.700 --> 25:14.500
一些别的东西

25:16.060 --> 25:18.420
就是说我们要兼容对吧

25:18.420 --> 25:20.300
兼容一些老版本的浏览器

25:20.300 --> 25:22.540
所以说我们写了这么一些玩意

25:22.540 --> 25:24.540
就是它给你生成了这么一些玩意

25:24.540 --> 25:25.700
那么现在一个问题就是

25:26.580 --> 25:28.860
我要写哪些版本的浏览器呢

25:28.860 --> 25:29.900
你想的道理

25:29.900 --> 25:30.380
你戏品

25:31.540 --> 25:34.500
就是说如果说我兼容的浏览器

25:34.500 --> 25:35.580
要兼容一些范围

25:35.580 --> 25:36.620
但是比较新

25:37.540 --> 25:39.340
就是最近一两年的

25:39.340 --> 25:40.820
是不是就可能会少一些

25:41.620 --> 25:43.220
是不是有些很老的写法

25:43.220 --> 25:44.540
也可能就会少一些

25:44.540 --> 25:45.660
是不是这个逻辑

25:45.660 --> 25:46.660
对吧

25:46.660 --> 25:47.860
是这个逻辑吧

25:47.860 --> 25:51.540
如果说我兼容的浏览器的范围很广

25:51.540 --> 25:54.020
那么它是不是最终生成的结果

25:54.020 --> 25:55.220
就会多一些

25:55.220 --> 25:56.700
然后兼容很多的浏览器

25:56.700 --> 25:57.940
那么我们就设计到一个问题

25:57.940 --> 26:00.740
就是说我到底要兼容哪些浏览器

26:00.740 --> 26:03.060
那么这个东西怎么来告诉它呢

26:03.060 --> 26:04.060
这个东西

26:04.060 --> 26:05.460
有三种方式

26:05.460 --> 26:07.660
第一种方式我不举例了

26:07.660 --> 26:08.820
就看一下就行了

26:08.820 --> 26:09.900
不太常见

26:09.900 --> 26:12.020
第一种方式是在这个插件里边

26:12.180 --> 26:14.420
写上 browser 一个配置

26:14.420 --> 26:15.700
你看我们这里

26:15.700 --> 26:17.140
不是这里比较可以写配置吧

26:17.140 --> 26:18.260
对吧你就写一个配置

26:18.260 --> 26:18.900
browsers

26:20.220 --> 26:21.180
配置

26:21.180 --> 26:23.300
那么告诉他有哪些浏览器可以兼容

26:23.300 --> 26:24.700
那么写法是一个数组

26:24.700 --> 26:25.780
为什么是数组的写法

26:25.780 --> 26:27.140
我们一会再说

26:27.140 --> 26:28.100
这是一种标准写法

26:29.100 --> 26:29.620
ok

26:29.620 --> 26:30.460
那么这是第一种方式

26:30.460 --> 26:31.740
这种方式我们不太常见

26:31.740 --> 26:33.180
所以说这里不用这种方式

26:34.460 --> 26:36.300
第二种方式和第三种方式

26:36.300 --> 26:37.060
是比较推荐的

26:38.140 --> 26:39.100
第二种方式是什么

26:39.100 --> 26:40.900
单独的加

26:41.900 --> 26:42.380
诶

26:43.660 --> 26:44.420
诶

26:44.420 --> 26:45.460
我个

26:45.460 --> 26:46.460
马克当写错了

26:46.460 --> 26:47.220
马克当写错了

26:47.220 --> 26:48.140
我们这里改一下

26:49.540 --> 26:50.540
改稍微改一下

26:52.140 --> 26:53.780
方式二

26:55.620 --> 26:56.700
说了

26:56.700 --> 26:57.220
在

26:58.420 --> 26:59.620
添加

26:59.620 --> 27:00.340
这个文件

27:02.100 --> 27:02.780
添加

27:05.350 --> 27:06.150
这样

27:07.590 --> 27:08.790
添加一个文件

27:08.790 --> 27:10.790
它一个单独的文件里边去写

27:10.790 --> 27:15.750
我这里重新保存一下

27:16.750 --> 27:17.990
二刀印

27:17.990 --> 27:18.550
这样

27:18.550 --> 27:21.100
就别小了

27:21.100 --> 27:22.380
这种方式先写

27:22.380 --> 27:22.700
好

27:22.700 --> 27:23.060
看啊

27:23.060 --> 27:23.980
方式二

27:23.980 --> 27:25.420
就是用一个单独的文件

27:25.420 --> 27:27.660
叫browser nest rc

27:27.660 --> 27:28.220
这个文件

27:28.220 --> 27:28.980
前面要加个点

27:28.980 --> 27:30.260
前面要加个点

27:30.260 --> 27:38.560
诶

27:38.560 --> 27:40.240
我点那个

27:40.240 --> 27:41.760
我点这个

27:41.760 --> 27:42.720
为什么没出来的

27:42.720 --> 27:43.120
等一下啊

27:43.120 --> 27:43.720
等一下

27:43.720 --> 27:51.090
我这里把这个去掉

27:51.090 --> 27:53.210
把这个重新保存一次

27:53.210 --> 27:54.370
重新保存一次

27:54.370 --> 27:56.170
然后这里再重新刷新

27:56.170 --> 27:57.850
ok

27:57.850 --> 27:58.370
这种

27:59.210 --> 27:59.650
好了

28:02.950 --> 28:03.590
第二个

28:03.590 --> 28:04.470
就是添加一个文件

28:04.470 --> 28:05.670
这个文件的名字叫这个

28:05.670 --> 28:06.710
我要复制一下

28:06.710 --> 28:08.790
那么我们这里使用第二种方式

28:08.790 --> 28:10.070
添加一个文件

28:10.070 --> 28:10.910
跟目睹

28:10.910 --> 28:11.710
添加一个文件

28:12.670 --> 28:15.150
这个文件里边我们写上一些东西

28:15.150 --> 28:15.550
写什么呢

28:15.550 --> 28:16.910
我们就写这两句话

28:16.910 --> 28:18.030
写上这两句话

28:18.710 --> 28:19.470
这两句话啥意思

28:19.470 --> 28:20.350
我们一会再说

28:20.350 --> 28:21.790
就表示我的流浪

28:21.790 --> 28:23.950
这两句话的意思就是表示我的流浪期范围

28:23.950 --> 28:24.550
多少

28:24.550 --> 28:25.510
流浪期范围是多少

28:25.510 --> 28:26.590
这是方式二

28:26.590 --> 28:28.910
为什么方式二比较推荐呢

28:28.910 --> 28:30.350
因为这个配置

28:30.390 --> 28:33.390
它不光光会被这个插件读取

28:34.390 --> 28:36.870
以后来遇到一些像什么介石兼容性

28:36.870 --> 28:37.910
它也要兼容流浪期

28:37.910 --> 28:38.990
不同的版本流浪期

28:38.990 --> 28:41.350
它也会读取相同的文件

28:41.950 --> 28:44.630
所以说这个文件是一种通用的表达方式

28:45.110 --> 28:47.430
就是说我表达我这个程序

28:47.430 --> 28:49.270
它要兼容的流浪期范围

28:49.790 --> 28:50.950
不然是流浪期

28:50.950 --> 28:52.790
nest范围

28:53.710 --> 28:54.670
那么就这么个意思

28:54.670 --> 28:55.270
所以说呢

28:56.510 --> 28:59.750
我们这里通常推荐使用单独的一个文件

28:59.790 --> 29:00.910
因为它是标准的格式

29:00.910 --> 29:02.910
它不仅仅是在这个插件里面可以用

29:02.910 --> 29:05.190
别的插件以后也会用到这个文件

29:05.190 --> 29:06.150
那么就写一个文件

29:06.150 --> 29:07.150
可以同意的配置

29:08.070 --> 29:09.190
好方式三了

29:09.710 --> 29:10.550
了解一下

29:10.550 --> 29:12.390
它也是一个推荐方式

29:12.390 --> 29:14.510
就是说你可以在Packy.json里面

29:15.030 --> 29:15.790
在这里面

29:16.310 --> 29:18.550
在这里面写上这么一个配置

29:18.550 --> 29:19.750
叫browser list

29:20.390 --> 29:24.030
browser list

29:24.030 --> 29:25.270
写上这么一个配置

29:25.710 --> 29:27.110
那么这里写上一个数字

29:27.110 --> 29:28.070
也可以

29:28.070 --> 29:28.870
也可以

29:29.230 --> 29:30.630
那么这三种方式

29:30.630 --> 29:31.790
选择一个就行了

29:31.790 --> 29:32.990
通常推荐第二种

29:32.990 --> 29:33.830
或者是第三种

29:33.830 --> 29:34.950
你选择一个就行了

29:34.950 --> 29:36.990
我比较喜欢使用这种方式

29:36.990 --> 29:37.950
以后这个文件里面

29:37.950 --> 29:39.270
以后在学5u的时候

29:39.270 --> 29:40.630
它可以搭建两个工程

29:40.630 --> 29:42.150
你就会看到这个文件

29:42.870 --> 29:43.750
browser list

29:43.750 --> 29:44.350
rc

29:44.710 --> 29:44.950
好

29:44.950 --> 29:46.150
那么我们来看一下

29:47.350 --> 29:49.030
这东西里边到底写啥

29:49.030 --> 29:50.750
我们知道它表达的意思是什么

29:50.750 --> 29:52.310
我兼容的流浪期范围

29:52.310 --> 29:52.870
对吧

29:52.870 --> 29:54.750
那么它里边到底该怎么来写

29:54.750 --> 29:55.950
怎么来描述呢

29:55.950 --> 29:57.550
它是一个多行的

29:57.630 --> 29:59.670
标准的字母串

29:59.670 --> 30:01.110
如果说你在代码里边写的话

30:01.110 --> 30:02.030
就可以用输入

30:02.030 --> 30:02.990
比方说我们这里

30:02.990 --> 30:04.550
在接受里边写就可以用输入

30:04.550 --> 30:05.950
如果说你用这个文件

30:05.950 --> 30:07.590
那么它就是个多行的字母串

30:07.590 --> 30:09.030
就是个多行的字母串而已

30:09.030 --> 30:10.150
你直接写就行了

30:10.870 --> 30:13.670
那么它的书写规范非常非常多

30:13.670 --> 30:14.870
而且繁琐

30:14.870 --> 30:16.110
具体的规范你自己去看

30:16.110 --> 30:17.750
这里有个github地址

30:17.750 --> 30:19.190
我也不想再细说了

30:19.190 --> 30:21.350
因为我们平时写得很少

30:22.550 --> 30:24.830
我们不用去了解那么多的

30:24.830 --> 30:26.230
该怎么去写这里边的东西

30:26.230 --> 30:27.230
就这里边的东西该怎么写

30:27.270 --> 30:28.950
我们只要大概的了解一下

30:29.550 --> 30:30.550
我们通常会怎么写

30:30.550 --> 30:31.870
通常就是这样的写法

30:32.230 --> 30:33.430
通常就这样的写法

30:34.990 --> 30:36.150
我们来看一下这个写法

30:36.150 --> 30:36.550
啥意思

30:37.550 --> 30:39.870
nust to virgin

30:39.870 --> 30:40.630
什么意思

30:40.630 --> 30:44.430
表示的是我兼容最近两个版本

30:45.070 --> 30:46.750
兼容最近期的两个版本

30:48.430 --> 30:51.030
大于100%1 in CN

30:51.030 --> 30:51.430
什么意思

30:51.430 --> 30:54.670
匹配我要找的浏览器

30:54.670 --> 30:56.030
就是我要兼容的浏览器

30:56.070 --> 31:01.230
是使用人数大于1%的人

31:01.230 --> 31:02.510
使用的浏览器

31:02.870 --> 31:05.870
就市场占有率1%以上的浏览器

31:06.510 --> 31:07.830
CN什么意思

31:07.830 --> 31:09.070
因CN表示中国

31:09.310 --> 31:10.310
在中国

31:11.230 --> 31:14.150
市场占有率1%以上的浏览器

31:14.430 --> 31:15.190
都要兼容

31:15.910 --> 31:17.670
那么CN是可以省略的

31:17.670 --> 31:19.790
因CN成为省略的话就是全球

31:20.150 --> 31:21.830
就是这个省略的话就是全球

31:21.830 --> 31:22.750
很好理解

31:22.990 --> 31:23.670
很好理解

31:24.550 --> 31:25.310
那么这里

31:25.310 --> 31:27.030
nust i1小于等于8

31:27.030 --> 31:27.430
什么意思

31:27.430 --> 31:28.270
就是排除掉

31:28.270 --> 31:30.150
有些那些如果说你已经被选中了

31:30.150 --> 31:31.470
我想排除掉了一些

31:33.150 --> 31:35.830
小于等于8的i1浏览器

31:36.230 --> 31:36.870
我不要

31:37.510 --> 31:38.390
就这么个意思

31:40.070 --> 31:40.910
默认情况下

31:40.910 --> 31:41.630
匹配的结果

31:41.630 --> 31:42.950
就三种匹配的结果

31:43.150 --> 31:43.990
求的是并级

31:43.990 --> 31:44.990
求的是并级

31:45.230 --> 31:46.190
就这么个意思

31:46.350 --> 31:47.270
那么就表示说

31:47.630 --> 31:50.510
我在中国市场占有率大于1%

31:50.510 --> 31:52.710
并且最近的两个版本

31:53.270 --> 31:53.750
浏览器

31:53.750 --> 31:54.870
比如谷歌浏览器

31:54.870 --> 31:55.630
最近两个版本

31:55.630 --> 31:56.110
i1浏览器

31:56.110 --> 31:56.950
最近两个版本

31:56.950 --> 31:58.110
i1不能

31:58.550 --> 32:00.070
不能是小于等于8的版本

32:00.630 --> 32:01.310
那么这样子

32:01.350 --> 32:03.070
就可以匹配到一个浏览器范围

32:03.510 --> 32:03.950
接下来

32:03.950 --> 32:05.270
我看一下这个网站

32:05.310 --> 32:07.510
这个叫做browser list的网站

32:07.870 --> 32:08.750
这么个网站

32:08.790 --> 32:10.030
这个网站你可以把你的

32:10.030 --> 32:11.750
就是写到字幕创的放进去

32:12.070 --> 32:13.710
就把你写的字幕创放进去

32:13.710 --> 32:14.630
它会告诉你

32:14.630 --> 32:16.230
它匹配出来的浏览器结果

32:16.390 --> 32:17.270
你可以在这里

32:17.310 --> 32:17.830
收一下

32:18.630 --> 32:19.830
这个要用兜号分隔

32:19.830 --> 32:21.830
就是行业行之间用兜号分隔

32:22.830 --> 32:24.350
你这里秀browsers

32:25.790 --> 32:26.390
你看

32:26.590 --> 32:27.910
它就收出来一些浏览器了

32:28.190 --> 32:29.310
收出来一些浏览器了

32:29.430 --> 32:30.230
就这么个意思

32:32.190 --> 32:32.750
OK

32:33.190 --> 32:34.910
另外这个就稍微说一下

32:34.910 --> 32:36.310
browser list这个数据

32:36.590 --> 32:37.950
就是它匹配的浏览器

32:37.950 --> 32:38.950
到底匹配哪些浏览器

32:38.950 --> 32:40.230
它的数据是来自于

32:40.270 --> 32:41.590
KNUs这个网站

32:41.630 --> 32:43.150
这个网站大家应该听说过的

32:43.150 --> 32:44.750
就是来查询兼容性的

32:45.070 --> 32:46.270
因为查询浏览器的

32:46.270 --> 32:48.030
整张涌约兼容性这些东西

32:48.150 --> 32:50.510
那么由于它的数据并非实实的

32:50.510 --> 32:51.790
所以说不会特别准确

32:51.910 --> 32:53.310
不过我们要那么准确干嘛

32:53.310 --> 32:55.230
就要我们就打开匹配个范围就行了

32:55.950 --> 32:56.190
OK

32:56.190 --> 32:57.150
这就是关于

32:57.630 --> 32:59.710
这个插件的第一个功能

32:59.710 --> 33:01.590
它能够自动加上厂商詮罪

33:01.590 --> 33:03.150
而现在加厂商权娟的时候

33:03.150 --> 33:04.790
它到底要怎么来加厂商权罪

33:04.790 --> 33:07.030
取决于你这里的浏览器配置

33:07.230 --> 33:08.110
就这里的配置

33:08.110 --> 33:09.270
表众们现在再来看一下

33:09.270 --> 33:10.270
看有没有变化了

33:10.950 --> 33:11.990
不知道有没有变化

33:14.530 --> 33:15.490
好像还是一样的

33:15.490 --> 33:16.010
对吧

33:16.250 --> 33:17.050
还是一样的

33:17.210 --> 33:19.410
那我这里写上一个

33:19.890 --> 33:21.690
像一个NAS的EVER型

33:22.290 --> 33:23.090
这样子写了

33:25.010 --> 33:25.970
没啥变化了

33:26.330 --> 33:27.650
这个大于10%了

33:30.700 --> 33:31.580
好像也没啥变化

33:31.580 --> 33:32.300
没啥变化了

33:32.300 --> 33:33.900
所以说这个东西

33:33.900 --> 33:35.620
就是那都是一样的结果

33:35.620 --> 33:36.580
都是一样的结果

33:36.580 --> 33:38.220
它实际上它这个肯定要读的

33:38.580 --> 33:39.620
这个是肯定要读的

33:39.820 --> 33:42.220
只不过我们这里好像没有发生什么变化

33:42.900 --> 33:43.860
那我这样子写吧

33:44.460 --> 33:45.100
我们这样子来

33:47.180 --> 33:48.460
我这里写上这个

33:48.860 --> 33:49.780
我们换一个代码吧

33:50.260 --> 33:51.260
换一个标准DIV

33:52.620 --> 33:53.060
DIV

33:54.580 --> 33:56.580
这里边我们写上一个圈式奉

33:57.580 --> 33:58.820
圈式奉

34:01.310 --> 34:01.750
Scale

34:02.510 --> 34:02.950
DIV

34:04.550 --> 34:04.910
保存

34:05.790 --> 34:06.910
你看就加上这两个了

34:07.230 --> 34:08.230
好我们这里呢

34:08.230 --> 34:09.510
改一下这个兼容性

34:10.030 --> 34:12.190
NAS2 VERSIONS

34:13.350 --> 34:13.710
没变

34:14.230 --> 34:14.430
不对

34:14.430 --> 34:15.110
这个应该变了

34:16.230 --> 34:16.790
我停止了

34:16.790 --> 34:17.750
是不是要重新变异了

34:22.420 --> 34:22.860
没变化

34:24.020 --> 34:24.420
看一下

34:25.300 --> 34:27.780
NAS3 VERSIONS

34:30.060 --> 34:31.340
把兼容的范围过往一点

34:32.500 --> 34:33.260
没啥变化

34:33.460 --> 34:35.140
我多了一个MS

34:35.380 --> 34:39.140
多了一个就是IEE的兼容

34:39.140 --> 34:41.300
所以它这个东西肯定会影响的

34:42.660 --> 34:44.180
不过我们知道配好就行了

34:44.980 --> 34:46.780
NAS2 NAS3随便你

34:47.740 --> 34:48.380
好 OK

34:49.140 --> 34:50.860
那么这是关于自动的厂商前退

34:51.460 --> 34:52.380
再让我们看第二个

34:53.180 --> 34:55.140
未来的CSS语法

34:55.140 --> 34:57.100
那么这也是这个插件给你提供的功能

34:57.500 --> 34:58.980
就是说它可以让你干嘛的

34:58.980 --> 35:01.300
它不仅可以给你自动加上厂商前退

35:01.340 --> 35:04.100
而且可以让你在原代码里边

35:04.100 --> 35:05.860
书写一些将来的

35:06.460 --> 35:08.540
非常前一言的CSS代码

35:09.100 --> 35:12.300
虽然我们之前说CSS官方毫不作为

35:12.300 --> 35:13.900
也不能说完全正确

35:14.740 --> 35:16.020
只能说它比较慢

35:16.180 --> 35:17.340
它特别慢

35:17.540 --> 35:19.020
它实际上在做一些事了

35:19.300 --> 35:21.420
它有一些比较前一言的标准的

35:21.420 --> 35:22.660
正在制定过程中

35:22.660 --> 35:24.140
但是它还没有最终的敲定

35:24.140 --> 35:25.540
没有最终的形成标准

35:25.780 --> 35:27.300
它只要没有最终的形成标准

35:27.300 --> 35:27.740
OK

35:27.740 --> 35:29.740
那么有的案期就不敢

35:29.780 --> 35:31.660
有性流弹性的就没有支持

35:31.900 --> 35:34.940
或者说保持一个实验性的态度

35:35.820 --> 35:36.940
不推荐你使用

35:37.180 --> 35:38.620
它没有形成最终的标准

35:38.980 --> 35:41.100
如果说你希望使用这一部分语法

35:41.100 --> 35:41.780
就是它正在

35:41.780 --> 35:43.300
这个标准正在制定的过程中

35:43.300 --> 35:44.380
这些新的语法

35:44.980 --> 35:46.460
那么为了流弹性的兼容性

35:46.460 --> 35:47.500
肯定要进行编译

35:47.500 --> 35:50.060
编译成能够识别到一个正常的CSS语法

35:51.260 --> 35:53.020
过去了要完成这样的功能

35:53.020 --> 35:54.060
是要使用一个库

35:54.060 --> 35:55.220
叫做CSS Next

35:55.740 --> 35:56.660
不过有了这个玩意

35:56.660 --> 35:57.860
有了我们现在的插件过程

35:57.860 --> 35:59.340
还是自动的包含了这个功能

35:59.420 --> 36:01.900
你不用去单独安装这个CSS Next的库了

36:03.100 --> 36:03.300
好

36:03.300 --> 36:04.700
现在你怎么来配置

36:04.700 --> 36:05.660
我们首先看一下配置

36:06.100 --> 36:09.020
就是说你可以通过这个Stage来配置

36:09.580 --> 36:11.060
高速插件

36:11.740 --> 36:15.220
要对哪个阶段的CSS语法进行兼容处理

36:15.220 --> 36:16.500
它的默论只是2

36:16.500 --> 36:17.900
那么这里有一个支持点

36:17.900 --> 36:20.300
这里应该你们以前是知道的

36:20.740 --> 36:23.340
就是我们的W3C它致敬标准的

36:23.340 --> 36:25.140
它需要经过一个一个的阶段

36:25.780 --> 36:27.580
那么这里有5个阶段

36:27.580 --> 36:28.340
我再看一下

36:28.580 --> 36:30.460
第一个就是一个早期草案

36:32.660 --> 36:33.780
它是极不稳定的

36:33.780 --> 36:35.020
看一下就行了

36:35.020 --> 36:37.820
1表示的是一个实验性质的

36:37.820 --> 36:39.140
虽然不说不稳定

36:39.140 --> 36:43.180
但是W3C已经承证我们在做这个事情了

36:43.820 --> 36:47.060
而Laudable表示说还是不稳定

36:47.060 --> 36:48.620
但是已经可以使用了

36:48.620 --> 36:49.780
被允许的

36:50.180 --> 36:51.220
这个人Brust

36:51.460 --> 36:52.620
就是可拥抱的

36:53.980 --> 36:54.500
什么意思呢

36:54.500 --> 36:55.940
就是说比较稳定了

36:55.940 --> 36:57.860
将来可以发生一些小的变化

36:57.900 --> 36:59.420
可能会发生一些非常小的变化

36:59.420 --> 37:01.340
但是它即将这个这个标准

37:01.340 --> 37:04.060
这个阶段它即将成为最终的标准

37:04.540 --> 37:06.060
最后就是真正的标准了

37:06.060 --> 37:07.580
所有磊带骑士都应该支持的

37:07.580 --> 37:08.460
真正的标准

37:09.180 --> 37:10.260
它默论只是2

37:10.260 --> 37:11.700
就是它里边

37:11.980 --> 37:13.620
你写的原代码里边

37:13.620 --> 37:16.460
它是支持处于这个阶段的

37:18.940 --> 37:21.940
处于这个阶段的新的CSS余法

37:22.940 --> 37:23.780
它是支持的

37:23.780 --> 37:25.300
那么它会把这个阶段

37:25.820 --> 37:28.260
这个阶段以后的代码进行转换

37:28.580 --> 37:30.180
如果说你可以把它改成零

37:30.180 --> 37:31.380
改成零是什么意思呢

37:31.380 --> 37:32.300
就表示的说

37:32.300 --> 37:32.900
我们看一下

37:32.900 --> 37:33.540
改一下

37:34.820 --> 37:36.020
这边Stage

37:36.740 --> 37:37.580
把改成零

37:37.580 --> 37:38.340
什么意思呢

37:38.340 --> 37:39.340
就表示说

37:41.340 --> 37:43.380
哪怕是处于

37:43.780 --> 37:46.500
草案阶段的

37:47.140 --> 37:47.940
余法

37:48.380 --> 37:49.940
也需要转换

37:51.060 --> 37:52.540
如果说它默认只是2

37:52.540 --> 37:53.340
默认只是2的话

37:53.340 --> 37:55.100
如果说你用了一些草案阶段的余法

37:55.100 --> 37:56.700
它就远风不动的到道结果里边了

37:56.700 --> 37:57.860
它就不会给你转换

37:58.380 --> 37:58.980
那么你把它写了

37:58.980 --> 37:59.420
你它可以

37:59.420 --> 38:01.500
哪怕你可以使用草案阶段的余法了

38:01.940 --> 38:03.460
这个东西看你具体情况

38:03.700 --> 38:04.860
这个东西你可以改它

38:04.860 --> 38:05.620
也可以不改它

38:05.620 --> 38:07.460
默认是2还是比较合理的

38:08.260 --> 38:10.260
因为官方都可以说可以使用了

38:10.420 --> 38:12.100
前面的可能以后变动很大

38:12.100 --> 38:13.260
你最好不要使用

38:13.700 --> 38:15.260
那么到了这一步就可以使用了

38:16.140 --> 38:16.380
好

38:16.380 --> 38:17.780
那么接下来我们来看一下

38:17.780 --> 38:18.860
未来的CSS余法

38:18.860 --> 38:21.180
到底哪些东西目前是可以用的

38:21.900 --> 38:22.100
好

38:22.100 --> 38:22.620
第一个

38:22.620 --> 38:23.180
变量

38:24.180 --> 38:27.260
你说未来的CSS它是可以支持变量的

38:28.060 --> 38:31.620
你如果说你用的是最新版本的谷歌油烂器

38:31.900 --> 38:32.820
你不用去转换

38:32.820 --> 38:33.660
它都支持变量

38:33.660 --> 38:34.820
它实际上是支持的

38:34.820 --> 38:36.460
不知道大家以前有没有学过

38:36.820 --> 38:38.300
那么它的变量怎么来定义呢

38:38.300 --> 38:39.300
它是这样定义的

38:39.780 --> 38:41.380
放到帽号root里边

38:41.780 --> 38:43.100
放到帽号root里边

38:43.220 --> 38:44.100
这是固定的写法

38:44.100 --> 38:45.060
这是固定的写法

38:45.060 --> 38:46.300
然后这里边写变量

38:46.300 --> 38:47.260
你看我这里

38:47.700 --> 38:48.380
写过来吧

38:50.810 --> 38:51.330
看一下

38:51.450 --> 38:52.010
写过来

38:52.810 --> 38:54.250
你看这里边就写的变量

38:54.290 --> 38:55.170
变量1

38:55.170 --> 38:56.290
变量的名字是什么呢

38:56.290 --> 38:57.610
nite color

38:57.610 --> 38:59.210
变量的前面都要加两个横杠

38:59.210 --> 39:00.090
都要加两个横杠

39:00.090 --> 39:01.330
你可以认为横杠也是变量的名字

39:01.330 --> 39:01.890
组成的部分

39:02.650 --> 39:03.810
这里我写了个变量

39:03.810 --> 39:06.490
只是滴滴一个大卡的声音颜色

39:06.490 --> 39:07.450
只是333

39:07.450 --> 39:07.850
对吧

39:07.850 --> 39:08.810
就写了两个变量

39:09.290 --> 39:10.250
那怎么来用它呢

39:10.250 --> 39:11.890
也要用的时候直接使用一个wa

39:11.890 --> 39:12.650
关键字

39:12.650 --> 39:13.770
然后两个小货号

39:13.770 --> 39:15.370
把变量名字写进去就行了

39:15.610 --> 39:17.610
这个相当于是读取变量值

39:17.610 --> 39:17.850
对吧

39:17.850 --> 39:18.850
读取它的变量值

39:18.850 --> 39:20.250
读取它的变量值放到这儿

39:20.250 --> 39:21.130
就这么写

39:21.890 --> 39:22.610
这个东西

39:24.290 --> 39:25.450
原生语法就支持

39:25.450 --> 39:26.490
它就支持的

39:26.490 --> 39:27.690
那不要说我们看一下吧

39:30.080 --> 39:31.560
这里我们新建个页面文件

39:31.560 --> 39:32.480
TESTV

39:34.350 --> 39:35.710
这里我们看一下

39:36.550 --> 39:37.310
DIV

39:41.720 --> 39:42.400
你看

39:43.560 --> 39:45.360
我现在没有引用这里面的CSS

39:45.360 --> 39:46.560
跟这里面没关系

39:46.560 --> 39:47.920
那么我们直接在这里写

39:48.760 --> 39:49.720
它其实就支持了

39:49.720 --> 39:51.160
因为我这里是最新版本的

39:51.160 --> 39:51.880
有谷歌流量器

39:51.880 --> 39:53.160
所以它支持这样的语法

40:00.500 --> 40:01.780
我这里写一下

40:01.780 --> 40:02.220
不是

40:02.220 --> 40:03.700
我这里应该是DIV

40:04.580 --> 40:05.300
DIV

40:05.900 --> 40:06.420
保存

40:07.140 --> 40:07.500
刷新

40:07.500 --> 40:08.780
你看是不是支持这样的语法

40:08.780 --> 40:09.820
这点是生效的

40:09.820 --> 40:10.100
你看

40:10.100 --> 40:11.260
这个代码是有效的

40:11.260 --> 40:12.260
是有效代码

40:12.780 --> 40:13.660
当然你要

40:13.660 --> 40:15.100
当然这个兼容性肯定成问题

40:15.100 --> 40:16.980
也稍微老一点的流量器就不行了

40:16.980 --> 40:18.380
它就支持不了了

40:18.380 --> 40:19.700
但是最新版本来它本身就支持的

40:19.700 --> 40:22.180
因为它这个东西本身就是W3C

40:22.180 --> 40:23.620
现在已经处于第二阶段了

40:23.620 --> 40:23.980
对吧

40:23.980 --> 40:25.580
它就处于第三个阶段了

40:25.580 --> 40:26.980
它就意思说你可以使用了

40:27.420 --> 40:28.100
因此呢

40:28.100 --> 40:29.660
估计量器比较前沿一点

40:29.660 --> 40:31.220
它肯定要支持这样的语法

40:32.180 --> 40:32.900
懂得意思吗

40:33.420 --> 40:33.980
OK

40:34.580 --> 40:35.260
那么这里呢

40:35.300 --> 40:35.940
就是说

40:36.420 --> 40:38.540
这里有些东西可能就想问了

40:39.540 --> 40:40.700
这么这么麻烦

40:40.700 --> 40:42.300
你看那是里面定义辩量

40:42.300 --> 40:43.140
多简单

40:43.140 --> 40:43.300
对吧

40:43.300 --> 40:45.140
它为什么要放到这个入车里面呢

40:45.980 --> 40:47.420
你看官方给你想的东西

40:47.420 --> 40:49.020
肯定要想的不一样的

40:49.020 --> 40:50.260
官方它是怎么想的呢

40:50.260 --> 40:50.980
它要兼容

40:51.900 --> 40:52.500
它要兼容

40:53.100 --> 40:55.140
就是说我流烂器里边

40:55.140 --> 40:55.940
你可以不能

40:55.940 --> 40:57.620
你可以不识别这个东西

40:58.140 --> 41:00.180
但是你不能影响其他样式的

41:00.500 --> 41:02.020
你不能影响其他样式

41:02.020 --> 41:02.820
明白的意思吗

41:03.060 --> 41:04.540
你不能去影响其他样式

41:04.620 --> 41:07.580
如果说你像那个NAS那样定义的话

41:07.580 --> 41:08.460
NAS打定义的

41:08.980 --> 41:09.900
多了还是ATA

41:09.900 --> 41:10.380
ATA对吧

41:10.980 --> 41:11.620
NAS

41:12.060 --> 41:12.580
Color

41:13.100 --> 41:13.780
冒号

41:13.780 --> 41:14.620
什么滴滴滴

41:14.620 --> 41:15.220
对吧

41:15.460 --> 41:16.380
是不是这样定义的

41:16.380 --> 41:19.220
那么这样的定义有可能会导致语法错误

41:19.220 --> 41:21.660
语法错误的话会直接影响后边的样式的

41:22.300 --> 41:22.580
对了

41:22.580 --> 41:22.980
意思吧

41:22.980 --> 41:24.820
它直接会影响后边的样式处理的

41:24.820 --> 41:26.100
所以说它在写一个

41:26.100 --> 41:28.900
看上去跟以前的事业册子差不多

41:28.900 --> 41:32.580
但是就算你流烂器识别不了

41:32.740 --> 41:34.860
也不会影响后边的样式的解析

41:34.860 --> 41:36.100
因此它是把它写成这种格式

41:36.100 --> 41:38.220
因为这种格式在CSN里边表示什么

41:38.220 --> 41:39.180
表示一个尾类

41:39.180 --> 41:39.580
对吧

41:39.940 --> 41:40.700
流烂器发现

41:40.700 --> 41:41.820
这个尾类是啥

41:41.820 --> 41:42.220
要意思

41:42.220 --> 41:43.420
这个尾类根本就不存在

41:43.420 --> 41:44.300
我根本就不知道

41:44.300 --> 41:45.020
不认识这个尾类

41:45.020 --> 41:46.420
它就直接把这个忽略掉了

41:46.420 --> 41:47.060
对吧

41:47.260 --> 41:48.260
直接把这个忽略掉了

41:48.260 --> 41:48.940
而这种写法

41:48.940 --> 41:50.500
它看这里的这种写法

41:50.500 --> 41:53.460
是不是也是一个合法的CSN语法格式

41:53.460 --> 41:53.700
对吧

41:53.700 --> 41:55.020
比方说URL两个扩号

41:55.020 --> 41:55.420
对吧

41:55.580 --> 41:56.980
那么这个东西流烂器识别不了

41:56.980 --> 41:57.820
识别不了就算了

41:57.860 --> 41:58.780
我就继续往后看

41:58.780 --> 42:01.060
它不会影响后边的样式解析

42:01.060 --> 42:03.700
所以说它会让你把编辑放到这里面

42:03.700 --> 42:05.500
就是它的编辑

42:06.180 --> 42:06.420
好

42:06.420 --> 42:06.780
编辑

42:06.780 --> 42:07.260
特别简单

42:07.260 --> 42:07.540
对吧

42:07.540 --> 42:08.260
特别简单

42:08.260 --> 42:08.580
好

42:08.580 --> 42:09.700
咱们来看一下它的编译结果

42:10.420 --> 42:11.780
我们毕竟是在玩这个编译

42:11.780 --> 42:12.300
对吧

42:12.660 --> 42:13.820
毕竟是在玩这个编译

42:15.340 --> 42:16.460
看一下这边的编译结果

42:16.460 --> 42:17.500
帽号保存

42:17.500 --> 42:18.860
你看这边的编译结果

42:19.900 --> 42:21.500
这个编译成这个样子了

42:21.500 --> 42:22.220
因为这个语法

42:22.220 --> 42:24.060
本身是有限流烂器是能识别的

42:24.060 --> 42:25.620
所以说它把这个东西保留下来了

42:26.100 --> 42:26.900
然后到这一边

42:26.900 --> 42:28.180
它要兼容

42:28.180 --> 42:29.100
它要做兼容处理

42:29.100 --> 42:31.820
你看它记写了这个是不是流烂器兼容的

42:31.820 --> 42:33.500
又写了这个流烂器也兼容

42:33.500 --> 42:35.500
就是有限流烂器能识别这个就识别这个

42:35.500 --> 42:37.140
识别不了这个上面有上面这个

42:37.140 --> 42:37.780
对吧

42:37.780 --> 42:39.220
都给你做了处理

42:39.220 --> 42:40.300
但有些人说

42:40.300 --> 42:42.500
我不想看到这个玩意了

42:42.500 --> 42:43.540
这些前缘语法

42:43.540 --> 42:45.260
就是它要转换的语法

42:45.260 --> 42:46.060
转换的元旦

42:46.060 --> 42:47.100
我不希望看到

42:47.100 --> 42:48.020
不希望看到怎么办

42:49.220 --> 42:51.540
这里有个设置就把Presor

42:51.540 --> 42:53.740
Presor表示是不是保留

42:53.740 --> 42:55.140
是不是保留元旦的语法

42:55.260 --> 42:58.940
那么把这个Presor把设为Force就行了

42:58.940 --> 43:00.980
我们这里到这个配置文件来

43:01.780 --> 43:03.180
这个插件里面配置

43:05.220 --> 43:08.220
Presor把设为Force就可以了

43:09.260 --> 43:10.100
保存

43:10.100 --> 43:10.980
你看一下

43:12.100 --> 43:12.900
现在是不是没了

43:12.900 --> 43:13.700
对吧

43:13.700 --> 43:14.580
这些定义变量

43:14.580 --> 43:15.380
这些东西都没了

43:15.380 --> 43:15.700
对吧

43:15.700 --> 43:17.540
就保持一个原始的识别语法

43:18.580 --> 43:18.700
好

43:18.700 --> 43:19.860
这是关于变量

43:19.860 --> 43:20.780
变量

43:20.780 --> 43:21.820
注意我们现在讲到哪了

43:21.820 --> 43:23.540
还是这个插件翻仇里边

43:23.540 --> 43:25.540
每次脱离这个插件没有

43:25.580 --> 43:26.860
还是个插件里边

43:26.860 --> 43:27.940
它现在支持第二个

43:27.940 --> 43:29.020
支持未来的CSE语法

43:29.020 --> 43:30.300
我们来看未来的CSE语法

43:30.300 --> 43:31.460
还有哪些

43:31.460 --> 43:33.180
自定义选择器

43:33.180 --> 43:34.060
这也挺有意思的

43:35.660 --> 43:36.620
我们来复制过来吧

43:36.620 --> 43:40.060
复制过来再说吧

43:40.060 --> 43:41.220
我来读一下这个战码

43:41.220 --> 43:41.860
它啥意思

43:45.860 --> 43:46.260
这是啥

43:47.340 --> 43:49.300
Enlo en ru

43:49.300 --> 43:49.980
没关系

43:49.980 --> 43:51.060
它这个是能

43:51.060 --> 43:52.460
我写到哪了

43:52.460 --> 43:53.780
我说怎么回事

43:53.780 --> 43:54.940
我写个小作文件里面

43:55.780 --> 43:56.260
好

43:57.260 --> 43:58.060
好来看一下

43:58.060 --> 43:58.820
这啥意思呢

43:59.940 --> 44:01.260
这个是固定写法

44:01.260 --> 44:02.420
atcustom

44:02.420 --> 44:03.580
custom表示自定义的

44:03.580 --> 44:03.780
对吧

44:03.780 --> 44:05.340
snegator表示选择器

44:05.340 --> 44:06.620
自定义一个选择器

44:07.740 --> 44:10.500
后边必须冒号两个鞋杠开头

44:10.500 --> 44:12.140
必须冒号两个鞋杠开头

44:12.140 --> 44:12.620
表示什么意思

44:12.620 --> 44:13.620
选择器的名称

44:13.620 --> 44:14.620
我们取个名字

44:14.620 --> 44:16.300
那个名字随便取

44:16.300 --> 44:17.420
黑定

44:17.420 --> 44:19.060
那么它代表的选择器是什么呢

44:19.060 --> 44:21.020
H,H2,H3,H4,H5

44:21.020 --> 44:22.580
就这么个意思

44:22.580 --> 44:24.020
那么这里我们比方说

44:24.020 --> 44:26.260
冒号两个鞋杠

44:26.260 --> 44:27.020
intel

44:27.020 --> 44:28.100
它代表的选择器是什么呢

44:28.100 --> 44:28.900
冒号focus的

44:28.900 --> 44:31.140
冒号好玩

44:31.140 --> 44:31.300
好

44:31.300 --> 44:31.940
那么怎么用呢

44:31.940 --> 44:33.580
你看我后边的写的时候

44:33.580 --> 44:35.820
就可以使用这个选择器了

44:35.820 --> 44:37.260
就比较方便了

44:37.260 --> 44:38.300
A

44:38.300 --> 44:39.460
你看A

44:39.460 --> 44:40.860
A元数

44:40.860 --> 44:42.860
后面跟上我们的选择器

44:42.860 --> 44:45.060
就看这一个部分

44:45.060 --> 44:46.700
A

44:46.700 --> 44:48.140
跟上我们的选择器

44:48.140 --> 44:49.540
那么一这样的结果

44:49.540 --> 44:51.100
会生成什么样的编印测出来

44:51.100 --> 44:53.540
是什么样的结果呢

44:53.580 --> 44:55.020
我这里保存一下

44:56.820 --> 44:57.420
重新打开

44:57.420 --> 44:58.900
你看编印出来就是

44:58.900 --> 45:00.660
A冒号focus

45:00.660 --> 45:02.580
A冒号hover

45:02.580 --> 45:03.980
你看

45:03.980 --> 45:05.540
这个东西是不是把它转换成的

45:05.540 --> 45:07.300
就相当于把它替换成了这个东西

45:07.300 --> 45:08.620
A冒号focus

45:08.620 --> 45:10.500
A冒号hover

45:10.500 --> 45:12.020
把它转换成了这个东西了

45:12.020 --> 45:12.820
对不对

45:12.820 --> 45:14.980
我们来看一下吧

45:14.980 --> 45:17.020
它相当于转换出来是这个东西

45:17.020 --> 45:17.820
好那么这一部分

45:17.820 --> 45:19.980
我们直接使用冒号两个鸿杠黑定

45:19.980 --> 45:22.100
那么相当于是不是就是H,H2,H6

45:22.140 --> 45:23.580
直接把这个东西放到这

45:23.580 --> 45:24.420
对吧

45:24.420 --> 45:26.220
好那么我们看一下这边

45:26.220 --> 45:27.580
是不是直接把这个东西放到这

45:27.580 --> 45:30.340
它可以快捷的写一些选择器

45:30.340 --> 45:32.980
你可以先定义一些常用的

45:32.980 --> 45:33.700
好那么下面

45:33.700 --> 45:35.340
如果说我们这里这样的写

45:35.340 --> 45:37.300
一个选择器后面还跟一个

45:37.300 --> 45:38.500
底儿Active

45:38.500 --> 45:39.580
啥意思呢

45:39.580 --> 45:41.180
那一看这边吧

45:41.180 --> 45:43.500
H1,H2,H2

45:43.500 --> 45:44.340
一看就明白了

45:44.340 --> 45:45.100
一对比一下

45:45.100 --> 45:45.900
一看就明白了

45:45.900 --> 45:47.540
没有什么过多好说的

45:47.540 --> 45:49.220
就是

45:49.220 --> 45:52.060
选择器可以制定一些选择器

45:52.060 --> 45:53.380
边一后这里也对比

45:53.380 --> 45:55.220
你们自己看

45:55.220 --> 45:56.780
好那么最后一个浅套

45:56.780 --> 45:59.620
那么这个东西就跟那个Nest差不多

45:59.620 --> 46:00.460
跟Nest差不多

46:00.460 --> 46:01.980
只不过了浅套的选择器

46:01.980 --> 46:04.460
在前面必须使用符号End

46:04.460 --> 46:05.340
看吧

46:05.340 --> 46:07.300
Nest是不是也支持这样的东西

46:07.300 --> 46:11.500
把这个复制一下吧

46:11.500 --> 46:13.260
复制一下啊

46:13.260 --> 46:15.020
你看这个啊

46:15.020 --> 46:15.900
自己对比一下

46:15.900 --> 46:16.380
对比一下

46:16.380 --> 46:18.740
我们没什么好说的

46:18.740 --> 46:22.880
自己自行对比

46:22.880 --> 46:23.600
没问题吧

46:23.640 --> 46:26.450
自行对比一下

46:26.450 --> 46:29.180
把这个取了

46:29.180 --> 46:29.700
OK

46:29.700 --> 46:30.620
自行对比

46:30.620 --> 46:31.220
没什么好说的

46:31.220 --> 46:33.700
我这一格说话一下

46:33.700 --> 46:34.620
你看吧

46:34.620 --> 46:36.580
就是跟那个Nest不一样的地方

46:36.580 --> 46:38.380
就在于前面必须要夹End

46:38.380 --> 46:40.860
必须要夹End

46:40.860 --> 46:42.380
那么就是

46:42.380 --> 46:44.940
底儿A后边的后代元素底儿B

46:44.940 --> 46:48.100
然后底儿A的纸元素底儿B

46:48.100 --> 46:51.620
然后底儿A的自己的Hover效果

46:51.620 --> 46:53.140
对不对

46:53.140 --> 46:54.340
搞定了

46:54.340 --> 46:55.740
而这是浅套

46:55.740 --> 46:57.340
别一后你们自己去对比

46:57.340 --> 46:58.860
那么未来的CSS语法

46:58.860 --> 46:59.660
我们就介绍到这

46:59.660 --> 47:02.860
因为其实还有一个叫做媒体查询

47:02.860 --> 47:03.900
媒体查询

47:03.900 --> 47:04.540
那么媒体查询

47:04.540 --> 47:07.380
因为你们现在还没有学到手机端应用

47:07.380 --> 47:10.140
那一块可能大家还没有学习

47:10.140 --> 47:11.220
我就不讲了

47:11.220 --> 47:13.020
如果说你已经学过了媒体查询的话

47:13.020 --> 47:14.420
可以去看一下这个查询

47:14.420 --> 47:16.100
它里面也支持媒体查询的

47:16.100 --> 47:18.180
其实它更多的这些支持的语法

47:18.180 --> 47:20.140
就是这个查询它支持的语法

47:20.140 --> 47:22.060
你可以去收一下吧

47:22.060 --> 47:22.620
我们看一下吧

47:22.620 --> 47:23.660
怎么来收

47:23.660 --> 47:25.500
就是我告诉你查询的名字

47:25.500 --> 47:26.540
你怎么去收这个查询

47:26.540 --> 47:27.860
它支持的东西

47:27.860 --> 47:29.820
很简单的一个很简单的一种方式

47:29.820 --> 47:31.460
就是直接进NPM

47:31.460 --> 47:31.660
对吧

47:31.660 --> 47:33.220
你通通它的安装了对吧

47:33.220 --> 47:34.860
那么我们直接来收这个查询名字

47:36.540 --> 47:37.620
直接收这个查询名字

47:37.620 --> 47:39.020
要学会收入了

47:39.020 --> 47:39.420
进去

47:41.140 --> 47:41.820
这个查询名字

47:41.820 --> 47:44.340
那么这里边一般会有一些官网

47:44.340 --> 47:45.900
它的github地址这些东西

47:45.900 --> 47:46.620
对吧

47:46.620 --> 47:47.340
它是不是有这些东西

47:47.340 --> 47:50.260
那么其实有些在NPM里边

47:50.260 --> 47:51.540
它直接有说明文档

47:51.540 --> 47:51.860
对吧

47:51.860 --> 47:53.500
它直接有说明文档

47:53.580 --> 47:57.220
那么这里你可以看一下

48:01.380 --> 48:05.140
这里github地址看一下吧

48:05.140 --> 48:05.940
差不多的

48:12.230 --> 48:14.190
就是这里有一些说明文档

48:14.190 --> 48:15.950
它里边支持哪些东西

48:15.950 --> 48:17.670
它里边还包含一些没见查询

48:17.670 --> 48:18.270
没地儿

48:18.270 --> 48:19.230
你可以自询看一下

48:21.270 --> 48:24.350
这是关于这个查询

48:24.350 --> 48:25.870
PoseCSSPresentIn

48:26.830 --> 48:26.950
好

48:26.950 --> 48:28.110
这个查询我们介绍完了

48:28.110 --> 48:29.350
它主要功能也就是这两个

48:30.310 --> 48:30.470
好

48:30.470 --> 48:32.430
接下来我们看一下别的查询

48:32.430 --> 48:35.230
这个PoseCSSApply

48:35.230 --> 48:36.030
又有一个新的查询了

48:37.390 --> 48:40.430
这个查询我们这里已经安装好了

48:40.430 --> 48:43.270
所以说这里不再重复安装了

48:43.270 --> 48:44.510
安装好了过后怎么再用了

48:44.510 --> 48:45.510
跟这个一样

48:45.510 --> 48:46.630
你不是这是第一个查询吧

48:46.630 --> 48:46.950
对吧

48:46.950 --> 48:54.340
第二个查询名字叫做PoseCSSApply

48:54.340 --> 48:54.820
这个查询

48:54.820 --> 48:55.780
后面是它的配置

48:55.780 --> 48:57.420
这里没上好配置

48:57.420 --> 48:57.580
好

48:57.580 --> 48:59.100
那么这个查询有什么用了

48:59.140 --> 49:00.500
当然你要首先安装

49:00.500 --> 49:01.820
安装一下这个查询

49:01.820 --> 49:01.980
好

49:01.980 --> 49:02.900
这个查询有什么用了

49:04.220 --> 49:05.300
这个查询的作用

49:06.180 --> 49:10.380
它是可以让你在CSS里面书写属性级

49:10.380 --> 49:13.700
就有点像那时里面的混入功能

49:13.700 --> 49:16.340
你可以定一个CSS片片段

49:16.340 --> 49:17.260
其实这个玩意

49:18.300 --> 49:21.300
它也算是一个未来的CSS余法

49:21.300 --> 49:23.860
但是目前不知什么原因

49:23.860 --> 49:26.980
PoseCSSPresentIn还没有支持这个东西

49:26.980 --> 49:27.980
没有支持

49:27.980 --> 49:28.460
没关系

49:28.580 --> 49:30.260
我们使用这个查询就可以搞定

49:30.260 --> 49:31.740
这个查询开始支持

49:31.740 --> 49:32.540
什么意思

49:32.540 --> 49:34.820
也就是你在CSS里边你可以写这样的代码

49:35.740 --> 49:36.540
有了这个查询之后

49:36.540 --> 49:38.180
但前的条件必须要有这个查询

49:38.180 --> 49:39.820
它来转换这个事情

49:40.620 --> 49:41.460
我们把它复制一下

49:45.060 --> 49:46.700
不要让你写这么一个代码

49:46.700 --> 49:47.500
这么一个代码

49:47.500 --> 49:48.660
是不是你现在定义了

49:48.660 --> 49:49.420
不是一个变量

49:49.420 --> 49:51.460
是一个代码段

49:51.460 --> 49:52.420
一个代码段

49:52.420 --> 49:53.860
我们要绝对定位局中

49:53.860 --> 49:54.060
对吧

49:54.060 --> 49:55.460
要经过这么一个代码段

49:55.460 --> 49:56.900
那么以后我的央视里面

49:56.900 --> 49:58.620
反而是要使用绝对定位局中的时候

49:58.620 --> 50:00.420
我们是不是应用这个代码段

50:00.420 --> 50:01.420
用一个关键字

50:01.420 --> 50:02.300
Apply

50:02.300 --> 50:04.180
然后把代码段放进来

50:04.180 --> 50:05.540
就属性级放进来

50:05.540 --> 50:08.900
我怎么写得上来了

50:08.900 --> 50:09.940
复制

50:09.940 --> 50:13.340
在这

50:13.340 --> 50:15.140
好 看一下

50:15.140 --> 50:15.940
一保存

50:15.940 --> 50:16.620
你看一下

50:16.620 --> 50:17.260
一保存

50:17.260 --> 50:18.220
它们在这里面

50:18.220 --> 50:19.940
你看是不是变成这样子了

50:19.940 --> 50:20.780
对不对

50:20.780 --> 50:21.660
这个凹凸

50:21.660 --> 50:24.540
这个前处是之前那个查询给你加的

50:24.540 --> 50:25.820
那是不是变成这样子

50:25.820 --> 50:26.700
对不对

50:26.700 --> 50:28.780
就这么个意思

50:28.780 --> 50:31.460
OK 这是关于这个查询

50:31.460 --> 50:32.220
很简单

50:32.220 --> 50:33.580
一看就明白

50:33.620 --> 50:34.940
好 下一个查件

50:34.940 --> 50:36.900
Pose of CSS Color Function

50:36.900 --> 50:40.420
那么这个查件可以支持一些颜色函数

50:40.420 --> 50:42.940
可以支持一些像有点类似于Nest里面的颜色函数

50:42.940 --> 50:43.820
这就是为什么

50:43.820 --> 50:45.980
我说有了Pose of CSS里面

50:45.980 --> 50:47.020
有这一查件过后了

50:47.020 --> 50:49.060
它能不能使用Nest可以

50:49.060 --> 50:51.460
它还有什么Pose of CSS Nest查件

50:51.460 --> 50:53.620
专门来转换Nest的代码的

50:53.620 --> 50:55.020
不过没必要了

50:55.020 --> 50:57.860
因为我们通常用Pose of CSS

50:57.860 --> 50:59.020
都是使用这些

50:59.020 --> 51:00.140
就是CS Next

51:00.140 --> 51:01.580
就是未来的CS代码

51:01.660 --> 51:02.540
不会去

51:02.540 --> 51:04.980
不太会去使用Nest

51:04.980 --> 51:07.100
当然给Ox使用的话也可以使用

51:07.100 --> 51:09.940
因为它本身是一个

51:09.940 --> 51:11.220
它本身没有做任何事情

51:11.220 --> 51:12.460
它是靠查件去做的

51:12.460 --> 51:16.580
你要把Nest查件进行转换的也是可以的

51:16.580 --> 51:17.340
那么这个东西

51:17.340 --> 51:20.380
它是有点类似于Nest里面的一些颜色函数

51:20.380 --> 51:21.420
当然除了颜色之外

51:21.420 --> 51:22.180
还有一些别的函数

51:22.180 --> 51:23.900
你去找它的查件就完成了

51:23.900 --> 51:27.500
好 这一个我们把放到这儿

51:27.500 --> 51:28.340
我已经安装好了

51:28.420 --> 51:31.650
你们要自己去安装一下

51:31.650 --> 51:33.530
颜色函数

51:33.530 --> 51:34.530
那么接下来

51:34.530 --> 51:36.730
它就可以在这里边使用颜色了

51:36.730 --> 51:37.810
我们这里复制一下

51:37.810 --> 51:40.090
好 然后比方说

51:40.090 --> 51:41.530
这里决定个例子

51:41.530 --> 51:46.780
你自己看一下

51:46.780 --> 51:49.140
对比一下

51:49.140 --> 51:51.380
你来看吧

51:51.380 --> 51:53.300
这里就用了Color这个函数

51:53.300 --> 51:54.660
你把颜色传进去

51:54.660 --> 51:56.580
如果说你没有传第二个参数的话

51:56.580 --> 52:00.420
那么就相当于是个颜色的元风

52:00.420 --> 52:01.900
是不是得重新变应

52:01.980 --> 52:06.120
再重新变意思

52:06.120 --> 52:09.930
为什么没起作用呢

52:09.930 --> 52:13.290
没有起到作用

52:13.290 --> 52:14.530
我看一下

52:14.530 --> 52:18.610
这个地方没有起到作用是怎么回事

52:18.610 --> 52:23.020
Pose C is the color方形

52:23.020 --> 52:26.420
这边Pose C is the color方形

52:26.420 --> 52:29.620
没有起到作用是吧

52:29.620 --> 52:30.900
我刚才改到哪去了

52:30.900 --> 52:31.100
是吧

52:31.100 --> 52:34.420
改到别的地方去了

52:34.420 --> 52:36.700
把别的地方去了

52:36.700 --> 52:39.300
你想把这个复制过来

52:39.300 --> 52:42.820
然后把复制粘贴到这

52:42.820 --> 52:43.780
这才对

52:43.780 --> 52:47.230
改到别的文件里面去了

52:47.230 --> 52:49.030
保证你看 是不是变异了

52:49.030 --> 52:49.990
那么第一句话

52:49.990 --> 52:51.150
Color这个函数

52:51.150 --> 52:52.510
你给它传一个颜色进去

52:52.510 --> 52:54.030
相当于是个函数

52:54.030 --> 52:56.110
这个函数你只能安装这个叉件

52:56.110 --> 52:56.910
它才能识别

52:56.910 --> 52:58.270
不然它识别不了的

52:58.270 --> 52:59.670
那么这个函数

52:59.670 --> 53:01.430
它会就是不做任何处理

53:01.430 --> 53:02.270
给你输出

53:02.270 --> 53:03.750
把它变成RGB

53:03.750 --> 53:05.430
给你输出

53:05.430 --> 53:07.070
那如果说你传了第二个参数

53:07.110 --> 53:08.870
还有很多种传法

53:08.870 --> 53:09.430
第二个参数

53:09.430 --> 53:10.670
如果说你调用另外一个函数

53:10.670 --> 53:11.510
叫R法

53:11.510 --> 53:13.110
减线为R

53:13.110 --> 53:14.270
减线为A

53:14.270 --> 53:15.870
90%什么意思呢

53:15.870 --> 53:17.790
它给你加一个透明通道

53:17.790 --> 53:20.310
把它转换成A0.9

53:20.310 --> 53:20.790
0.9

53:20.790 --> 53:21.430
一看就明白了

53:21.430 --> 53:21.670
对吧

53:21.670 --> 53:22.350
一看就明白了

53:22.350 --> 53:22.470
对吧

53:22.470 --> 53:23.590
透明通道

53:23.590 --> 53:25.550
0-1 90%的透明度

53:25.550 --> 53:28.510
把这个颜色的透明度设为90%

53:28.510 --> 53:30.990
那么下面还有很多种随便取得一些例子

53:30.990 --> 53:32.910
但这里边函数还蛮多的

53:32.910 --> 53:35.030
如果说我们这里是用Red函函数

53:35.070 --> 53:39.070
只能是把这个颜色的红色部分设为90%

53:39.070 --> 53:41.190
把红色部分设为90%

53:41.190 --> 53:43.270
那你看90%是不是230

53:43.270 --> 53:43.870
对吧

53:43.870 --> 53:45.710
相当于是250

53:45.710 --> 53:48.270
5%的90%

53:48.270 --> 53:48.710
对吧

53:48.710 --> 53:49.350
230

53:49.350 --> 53:52.270
那如果说你这里把它设为0%了

53:52.270 --> 53:53.190
是不是就0

53:53.190 --> 53:54.310
对吧

53:54.310 --> 53:56.550
把它设为100%了

53:56.550 --> 53:57.390
是不是255

53:57.390 --> 53:57.870
对吧

53:57.870 --> 53:59.310
它只处理红色部分

53:59.310 --> 54:00.870
把这个红色部分给你替换掉

54:00.870 --> 54:01.670
替换掉

54:01.670 --> 54:04.070
成这边的样子

54:04.110 --> 54:05.710
当然有红色还有什么

54:05.710 --> 54:06.470
还有Blue

54:06.470 --> 54:08.430
红绿蓝

54:08.430 --> 54:09.190
对吧

54:09.190 --> 54:09.790
还有蓝色

54:09.790 --> 54:10.230
对吧

54:10.230 --> 54:10.670
还有什么

54:10.670 --> 54:13.350
Green

54:13.350 --> 54:13.950
对吧

54:13.950 --> 54:14.790
还有绿色

54:14.790 --> 54:15.070
对吧

54:15.070 --> 54:15.990
这有相应的函数

54:18.190 --> 54:19.470
还可以使用R

54:19.470 --> 54:19.950
不对

54:19.950 --> 54:21.110
R不行

54:21.110 --> 54:21.750
我猜的

54:21.750 --> 54:22.470
猜的

54:24.830 --> 54:26.110
这个下面这个

54:26.110 --> 54:27.510
下面这个有点类似于是

54:27.510 --> 54:29.470
那个Ness里面的Night

54:29.470 --> 54:30.190
亮一点

54:30.190 --> 54:30.470
对吧

54:30.470 --> 54:31.310
还有个Darken

54:31.310 --> 54:32.190
暗一点

54:32.190 --> 54:33.190
这样的函数

54:33.470 --> 54:36.630
Tint50%

54:36.630 --> 54:37.950
调量50%

54:37.950 --> 54:39.790
是不是更加接近于白色

54:39.790 --> 54:40.350
对吧

54:40.350 --> 54:42.030
然后Shade50%

54:42.030 --> 54:43.950
不是更加接近于黑色

54:43.950 --> 54:44.350
对不对

54:44.350 --> 54:46.510
你要100%的话就纯黑了

54:46.510 --> 54:48.270
这里100%的话就纯白了

54:48.270 --> 54:49.110
就这么个意思

54:50.710 --> 54:52.270
这里就是关于

54:53.310 --> 54:54.630
这里的一些颜色函数

54:54.630 --> 54:56.830
如果说你要做一些颜色处理的话

54:56.830 --> 54:57.790
用同意

54:57.790 --> 54:59.310
就是你有一个颜色

54:59.310 --> 55:01.630
那么要根据这个颜色来调整

55:01.670 --> 55:03.070
那么就可以使用这个模式

55:03.070 --> 55:05.390
当然这东西还是支持变量的

55:05.390 --> 55:07.190
因为变量本身就是那个

55:07.190 --> 55:10.390
变量本身就是之前的插件支持的

55:10.390 --> 55:11.990
之前的插件先把变量转换了

55:11.990 --> 55:13.830
还得把它变成这个样子

55:13.830 --> 55:14.670
当然可以支持变量

55:14.670 --> 55:15.670
没问题的

55:15.670 --> 55:17.350
比方说没写个变量

55:17.350 --> 55:19.230
名字叫做

55:19.230 --> 55:20.470
叫什么

55:20.470 --> 55:22.590
叫做Made Color

55:22.590 --> 55:24.270
Made Color

55:24.270 --> 55:26.590
A,B,C,C

55:26.590 --> 55:27.830
然后叫这个名字

55:27.830 --> 55:31.310
那么这里我们就完全可以使用变量

55:31.350 --> 55:32.790
Made Color

55:32.790 --> 55:34.590
那么这里呢

55:34.590 --> 55:39.380
替换一下

55:39.380 --> 55:39.820
替换一下

55:42.260 --> 55:42.860
保存

55:42.860 --> 55:43.260
你看

55:43.260 --> 55:44.380
结果是不是一样的

55:44.380 --> 55:44.540
对吧

55:44.540 --> 55:45.140
结果是一样的

55:46.660 --> 55:47.340
OK

55:47.340 --> 55:49.140
那么将来我们就可以用一种主颜色

55:49.140 --> 55:51.220
来调配出很多颜色

55:51.220 --> 55:52.500
这是关于这个颜色

55:52.500 --> 55:54.020
Color 方形

55:54.020 --> 55:54.540
自己看一下

55:56.020 --> 55:56.260
好

55:56.260 --> 55:57.340
下面那个是扩展了

55:57.340 --> 55:58.540
了解一下就行了

55:58.540 --> 56:00.100
叫做Poser CSS Import

56:00.100 --> 56:01.940
它本身它是这样子

56:01.940 --> 56:04.660
这个插件可以让你在Poser CSS文件中

56:04.700 --> 56:05.940
导入其他样式代码

56:06.940 --> 56:07.620
啥意思呢

56:07.620 --> 56:08.620
就通过该插件

56:08.620 --> 56:09.660
可以将它们合并

56:10.780 --> 56:11.340
就什么意思

56:11.340 --> 56:13.300
就是说如果说我这个里边

56:13.300 --> 56:16.060
我去用一个Import去导入了别的

56:16.060 --> 56:20.420
比如Source Copy 3.pcss

56:20.420 --> 56:21.580
去导入了别的

56:21.580 --> 56:23.260
目前你看它是不是远方不动的

56:23.260 --> 56:25.060
就拿到这个最终样式里面来

56:25.060 --> 56:25.620
对不对

56:25.620 --> 56:26.500
但是你安装了

56:26.500 --> 56:28.060
你使用了这个插件过后了

56:28.060 --> 56:29.260
它会把这个文件里面

56:29.260 --> 56:30.340
带把直接给放到这儿

56:31.340 --> 56:32.220
把它编印完了过

56:32.220 --> 56:32.820
放到这儿

56:32.820 --> 56:34.260
就这么个意思

56:34.300 --> 56:35.300
不过对于我们来说

56:35.300 --> 56:36.980
这个插件意义不大了

56:36.980 --> 56:37.700
意义不大

56:37.700 --> 56:38.140
为什么

56:38.140 --> 56:40.420
因为打包工作

56:40.420 --> 56:42.460
依赖分析是Webpack的事情

56:43.180 --> 56:45.460
后面我们会把Poser CSS

56:45.460 --> 56:46.380
加到Webpack里面

56:46.380 --> 56:48.300
让Webpack来去做依赖分析

56:48.300 --> 56:49.420
让它来做这个事

56:49.420 --> 56:50.220
你不用管了

56:51.220 --> 56:52.060
关于这个

56:52.060 --> 56:52.740
说说了解一下

56:52.740 --> 56:54.700
有什么东西就行了

56:56.380 --> 56:57.380
最后一个

56:57.380 --> 56:58.260
Style Int

56:59.260 --> 56:59.940
这个插件

57:00.660 --> 57:02.180
这个首先我告诉大家

57:02.220 --> 57:03.260
这个玩意

57:03.260 --> 57:05.020
它是一个独立的东西

57:05.020 --> 57:06.500
特别独立

57:06.500 --> 57:09.700
也就是它不依赖于Poser CSS存在

57:09.700 --> 57:10.420
它不依赖

57:11.700 --> 57:13.260
它可以成为一个独立的东西

57:13.260 --> 57:15.660
只不过它也为Poser CSS

57:15.660 --> 57:17.420
写了一个插件出来

57:17.420 --> 57:19.980
Incent也可以在Poser CSS里面使用它

57:19.980 --> 57:22.660
它也可以完全不靠Poser CSS

57:22.660 --> 57:23.740
单独去用它

57:23.740 --> 57:24.420
也可以

57:25.180 --> 57:27.020
这里有它的官方网站

57:27.020 --> 57:29.140
这里边东西也超级多

57:29.140 --> 57:29.860
超级多

57:29.900 --> 57:31.460
不过我们每天都必要

57:31.460 --> 57:32.900
那么去深入的去了解

57:32.900 --> 57:34.020
看一下就行了

57:34.020 --> 57:35.700
它在干什么事呢

57:35.700 --> 57:37.060
就是这么一个意识

57:37.060 --> 57:38.380
就是我们在实际开发中

57:38.380 --> 57:39.460
可能会错误的

57:39.460 --> 57:42.500
不规范的去书写一些CSS代码

57:42.500 --> 57:43.940
那么这个插件它就会来

57:43.940 --> 57:45.060
及时发现错误

57:45.060 --> 57:46.140
什么叫不规范

57:46.140 --> 57:47.300
我给大家看一下吧

57:47.300 --> 57:48.340
什么叫不规范

57:50.220 --> 57:51.860
这是我经常

57:51.860 --> 57:53.540
以前在线下授课的时候

57:53.540 --> 57:55.660
经常看到有些同学写的代码

57:55.660 --> 58:01.890
我脑袋都快爆炸了

58:01.890 --> 58:02.730
有些同学呢

58:02.730 --> 58:09.020
这样子写代码

58:09.020 --> 58:09.780
有些同学呢

58:11.780 --> 58:12.460
放范是吧

58:12.460 --> 58:12.980
随便写一个

58:14.780 --> 58:16.500
原来代码是这样子的

58:16.500 --> 58:17.540
你说它错吧

58:17.540 --> 58:18.420
它有没有错呢

58:18.420 --> 58:19.260
它也没错

58:20.420 --> 58:21.220
恶不信呢

58:21.220 --> 58:22.060
它是恶不恶心呢

58:22.060 --> 58:23.260
它当然恶心

58:23.260 --> 58:24.380
你首先对齐

58:24.380 --> 58:26.220
你代码要对齐啊

58:26.220 --> 58:29.340
当我看CSS里面这种情况少一点

58:29.340 --> 58:31.340
GS里面这种情况特别多

58:31.340 --> 58:33.180
因为之前代码都对不起

58:33.180 --> 58:34.020
对吧

58:34.020 --> 58:36.220
那么其实这种在

58:36.220 --> 58:38.900
一些大公司里面要做团队协作的话

58:38.900 --> 58:39.980
这个东西严格来说

58:39.980 --> 58:40.820
它就是一个错误

58:42.260 --> 58:42.780
但是呢

58:42.780 --> 58:43.620
柳烂奇他管不管

58:43.620 --> 58:44.100
他不管

58:44.100 --> 58:45.100
柳烂奇说你正确的

58:45.100 --> 58:45.660
没问题

58:45.660 --> 58:46.780
我可以执行

58:46.780 --> 58:49.380
但是对我们开发的规范来说

58:49.380 --> 58:50.820
那么它就不行了

58:50.820 --> 58:53.100
那有没有一个东西来要求它

58:53.100 --> 58:54.500
规范的协呢

58:54.500 --> 58:56.180
你说你不规范我就给你报错

58:56.180 --> 58:57.060
有没有一个东西呢

58:57.060 --> 58:58.340
这就是style lint

58:58.340 --> 58:59.020
反而是你看到

58:59.020 --> 59:01.020
lint这个东西就是检测

59:03.180 --> 59:03.940
那么这个东西呢

59:03.980 --> 59:05.820
它就是来规范你的邪法的

59:06.820 --> 59:07.340
但是呢

59:07.340 --> 59:08.340
有个问题就是

59:08.340 --> 59:09.580
不同的公司呢

59:09.580 --> 59:12.580
可能要用不同的CSS规范来输写

59:12.580 --> 59:14.260
他问题又来了

59:14.260 --> 59:17.060
他又没有就是那个续加时间

59:17.060 --> 59:19.900
他又不知道你到底要用什么样的规范

59:19.900 --> 59:20.380
所以说呢

59:20.380 --> 59:21.540
为了保持灵活呢

59:21.540 --> 59:23.260
他这个东西本身呢

59:23.260 --> 59:24.860
没有提供具体的规则验证

59:24.860 --> 59:25.460
跟那个

59:25.460 --> 59:26.180
柳烂奇啊

59:26.180 --> 59:27.340
跟那个poser css又来了

59:27.340 --> 59:27.540
对吧

59:27.540 --> 59:29.180
又是又很相似的

59:29.180 --> 59:32.020
他就给你推提供一种机制

59:32.020 --> 59:36.420
就是你用他去加入一些规则验证方案

59:36.420 --> 59:38.700
他就会按照你给他的方案来进行验证

59:39.820 --> 59:41.020
那么这个方案哪来的

59:41.020 --> 59:42.780
你可以去安装一些第三方的方案

59:42.780 --> 59:45.180
或者是自行编写都可以

59:45.180 --> 59:47.300
因为他本身他不给你提供任何规则验证的

59:48.500 --> 59:49.340
我们通常呢

59:50.260 --> 59:52.540
通常我们肯定不会自行编写风乐吧

59:52.540 --> 59:54.180
除非一些很大的公司

59:54.180 --> 59:55.420
他有一些特别的规范

59:55.420 --> 59:57.140
要可以自行编写一些规则

59:57.140 --> 59:59.020
但是我们通常一般不会自行编写

59:59.020 --> 01:00:01.020
我们一般是安装一个库

01:00:01.060 --> 01:00:02.900
就是他这个style linx的官方库

01:00:02.900 --> 01:00:06.580
叫style linx config standard表示标准库

01:00:06.580 --> 01:00:08.900
提供一些标准的比较常见的

01:00:08.900 --> 01:00:10.060
css规则判定

01:00:10.060 --> 01:00:11.500
所以说我们要安装两个东西

01:00:11.500 --> 01:00:12.940
一个是style linx本身

01:00:12.940 --> 01:00:15.260
一个是他的一个规则库

01:00:15.260 --> 01:00:16.380
这两个东西都要安装

01:00:16.380 --> 01:00:17.500
你用npm安装就行了

01:00:17.500 --> 01:00:18.420
我这里已经安装好了

01:00:19.420 --> 01:00:20.340
好安装好了过后了

01:00:20.340 --> 01:00:22.420
接下来我们还要告诉style linx

01:00:23.740 --> 01:00:25.700
要用什么样的规则库来验证

01:00:25.700 --> 01:00:27.300
因为他并不知道要用这个规则库

01:00:27.300 --> 01:00:27.500
对吧

01:00:27.500 --> 01:00:28.180
你只是安装了

01:00:28.180 --> 01:00:29.580
他也不知道有这个东西存在

01:00:29.580 --> 01:00:31.500
所以你还要配置一下

01:00:31.500 --> 01:00:33.860
那么怎么来配置呢

01:00:33.860 --> 01:00:35.420
方式很多

01:00:35.420 --> 01:00:37.060
我们如果说你有兴趣的话

01:00:37.060 --> 01:00:37.940
可以往上去查一下

01:00:37.940 --> 01:00:39.620
我们比较常见的方式

01:00:39.620 --> 01:00:41.900
是使用这个文件

01:00:41.900 --> 01:00:42.980
要单独写个文件了

01:00:46.940 --> 01:00:47.420
移除掉吧

01:00:49.220 --> 01:00:50.220
没有单独写个文件

01:00:55.590 --> 01:00:57.310
叫这个文件

01:00:57.310 --> 01:00:59.190
这个文件里边写规则

01:00:59.190 --> 01:01:00.190
它是一个纯文本

01:01:00.190 --> 01:01:01.790
你这里可以改一下它的格式

01:01:01.830 --> 01:01:02.950
因为vscode还并不知道

01:01:02.950 --> 01:01:04.030
这里边格式是什么

01:01:04.030 --> 01:01:05.590
这里边格式实际上是节省

01:01:05.590 --> 01:01:06.990
你改一下吧

01:01:06.990 --> 01:01:08.830
观念一下节省

01:01:08.830 --> 01:01:10.670
那么我们比较说写上这么一个规则

01:01:11.870 --> 01:01:13.270
在这个文件里边

01:01:13.270 --> 01:01:14.190
表示什么意思呢

01:01:14.190 --> 01:01:15.430
它表示的意思就是说

01:01:15.430 --> 01:01:18.310
我告诉这个插件

01:01:18.310 --> 01:01:19.790
就告诉这个style linx

01:01:19.790 --> 01:01:23.150
告诉他你使用的规则是这个规则

01:01:23.150 --> 01:01:23.950
是这个规则库

01:01:25.230 --> 01:01:26.750
就这么个意思

01:01:26.750 --> 01:01:26.910
好

01:01:26.910 --> 01:01:28.510
那么现在我们要把这个东西

01:01:28.510 --> 01:01:31.070
这个style linx要结合到

01:01:31.110 --> 01:01:32.310
poster css里边去

01:01:32.310 --> 01:01:33.750
怎么结合呢

01:01:33.750 --> 01:01:34.630
怎么结合呢

01:01:34.630 --> 01:01:35.990
config里边很简单

01:01:35.990 --> 01:01:38.590
在这里边直接加上style linx

01:01:38.590 --> 01:01:40.190
完了

01:01:40.190 --> 01:01:41.790
这一加上就行了

01:01:41.790 --> 01:01:44.750
那么就把它加入到poster css里边去了

01:01:44.750 --> 01:01:46.790
那么poster css在编译的时候

01:01:46.790 --> 01:01:49.470
它还要通过它来进行规则验证

01:01:49.470 --> 01:01:50.550
用什么规则呢

01:01:50.550 --> 01:01:52.150
就用的是这里的规则

01:01:52.150 --> 01:01:52.950
就这么个意思

01:01:54.150 --> 01:01:56.710
比方说现在我们来看一下这个代码

01:01:56.710 --> 01:01:58.190
看一下这个代码

01:01:58.190 --> 01:01:58.750
sauce里边

01:01:59.750 --> 01:02:00.750
这个代码

01:02:01.750 --> 01:02:02.750
保存

01:02:03.750 --> 01:02:04.750
你看

01:02:04.750 --> 01:02:05.750
我们这里重新来

01:02:05.750 --> 01:02:06.750
start

01:02:06.750 --> 01:02:11.920
你看是爆错了

01:02:11.920 --> 01:02:12.920
对吧

01:02:12.920 --> 01:02:13.920
爆错了对不对

01:02:14.920 --> 01:02:15.920
它有哪些错误呢

01:02:15.920 --> 01:02:16.920
有三个错误

01:02:16.920 --> 01:02:17.920
我这里有三个错

01:02:17.920 --> 01:02:18.920
给大家看一下吧

01:02:18.920 --> 01:02:19.920
第一个错误了

01:02:20.920 --> 01:02:22.920
indentation什么意思

01:02:22.920 --> 01:02:23.920
缩进

01:02:23.920 --> 01:02:25.920
缩进应该是两个空格

01:02:26.920 --> 01:02:27.920
我这里的四个空格

01:02:27.920 --> 01:02:28.920
一

01:02:28.920 --> 01:02:29.920
二

01:02:29.920 --> 01:02:30.920
三

01:02:30.920 --> 01:02:31.920
空格

01:02:31.920 --> 01:02:32.920
这么个意思

01:02:33.920 --> 01:02:34.920
第二个是什么意思呢

01:02:34.920 --> 01:02:36.920
它说你这个颜色

01:02:36.920 --> 01:02:38.920
是一个不正确的颜色

01:02:39.920 --> 01:02:40.920
紧号 f4

01:02:40.920 --> 01:02:41.920
它肯定颜色不正确

01:02:41.920 --> 01:02:42.920
对不对

01:02:42.920 --> 01:02:43.920
颜色不正确

01:02:43.920 --> 01:02:45.920
然后它说什么意思呢

01:02:45.920 --> 01:02:46.920
它说

01:02:47.920 --> 01:02:49.920
你这个css

01:02:50.920 --> 01:02:52.920
unexpected

01:02:52.920 --> 01:02:54.920
就是

01:02:54.920 --> 01:02:56.920
未期望的

01:02:56.920 --> 01:02:58.920
它说你这个代码最后

01:02:58.920 --> 01:02:59.920
应该空一行

01:02:59.920 --> 01:03:00.920
这也是一些公司

01:03:00.920 --> 01:03:01.920
它的一些规范

01:03:01.920 --> 01:03:03.920
代码最后空一行

01:03:03.920 --> 01:03:05.920
你看我们这里重新保存过

01:03:05.920 --> 01:03:06.920
是不是第三个错误就没了

01:03:06.920 --> 01:03:07.920
对吧

01:03:07.920 --> 01:03:08.920
就代码了

01:03:08.920 --> 01:03:09.920
最后的一行代码

01:03:09.920 --> 01:03:10.920
要留一个空行

01:03:10.920 --> 01:03:11.920
就是这么个意思

01:03:11.920 --> 01:03:13.920
就是它的规则非常非常喜

01:03:13.920 --> 01:03:14.920
非常非常喜

01:03:14.920 --> 01:03:16.920
那么从这个错误里边

01:03:16.920 --> 01:03:17.920
你不仅可以发现

01:03:17.920 --> 01:03:18.920
它的错误含义

01:03:18.920 --> 01:03:19.920
你还可以看到

01:03:19.920 --> 01:03:20.920
它的错误的规则

01:03:20.920 --> 01:03:21.920
规则名字

01:03:21.920 --> 01:03:22.920
这个规则名字叫做indentation

01:03:22.920 --> 01:03:24.920
叫做缩进的配置

01:03:24.920 --> 01:03:27.920
这个规则名字叫做colonelinvalidhex

01:03:27.920 --> 01:03:29.920
叫做16进制的

01:03:29.920 --> 01:03:30.920
无效颜色

01:03:30.920 --> 01:03:31.920
这么一个规则

01:03:31.920 --> 01:03:32.920
那么这个配置叫做

01:03:32.920 --> 01:03:33.920
这个规则的名称叫做

01:03:33.920 --> 01:03:35.920
no missing end of source

01:03:35.920 --> 01:03:36.920
流量

01:03:36.920 --> 01:03:37.920
怎么翻译呢

01:03:37.920 --> 01:03:38.920
就是

01:03:38.920 --> 01:03:40.920
原码

01:03:40.920 --> 01:03:41.920
原码的

01:03:41.920 --> 01:03:43.920
原代码的最后

01:03:43.920 --> 01:03:46.920
就是

01:03:46.920 --> 01:03:48.920
没有新的行

01:03:48.920 --> 01:03:49.920
没有新的行

01:03:49.920 --> 01:03:50.920
就这么个意思

01:03:50.920 --> 01:03:54.920
它里边有很多很多的规则

01:03:54.920 --> 01:03:56.920
但是并不是我们

01:03:56.920 --> 01:03:57.920
所有的规则

01:03:57.920 --> 01:03:58.920
我们都希望出现

01:03:58.920 --> 01:03:59.920
并不是我们

01:03:59.920 --> 01:04:00.920
要有所有的规则

01:04:00.920 --> 01:04:01.920
比方说有些规则

01:04:01.920 --> 01:04:02.920
我就不希望它出现

01:04:02.920 --> 01:04:03.920
那么怎么办呢

01:04:03.920 --> 01:04:04.920
很简单你配置一下

01:04:04.920 --> 01:04:05.920
在哪里配置

01:04:05.920 --> 01:04:06.920
当然在这里配置

01:04:06.920 --> 01:04:08.920
当然在这里配置

01:04:08.920 --> 01:04:09.920
这里

01:04:09.920 --> 01:04:10.920
对在这里配置

01:04:10.920 --> 01:04:11.920
就是styling to RC

01:04:11.920 --> 01:04:12.920
这个配置

01:04:12.920 --> 01:04:13.920
为你里面配置

01:04:13.920 --> 01:04:14.920
配置规则吗

01:04:14.920 --> 01:04:15.920
规则怎么配置

01:04:16.920 --> 01:04:17.920
配置规则

01:04:17.920 --> 01:04:18.920
好

01:04:18.920 --> 01:04:19.920
这个规则里边

01:04:19.920 --> 01:04:20.920
怎么来配置呢

01:04:20.920 --> 01:04:22.920
首先你要看

01:04:22.920 --> 01:04:24.920
你要配置什么规则

01:04:24.920 --> 01:04:25.920
规则的名称

01:04:25.920 --> 01:04:26.920
怎么看呢

01:04:26.920 --> 01:04:27.920
比方说你这里爆出了

01:04:27.920 --> 01:04:28.920
我不希望这个规则出现

01:04:28.920 --> 01:04:29.920
规则的名称是啥

01:04:29.920 --> 01:04:30.920
inventation

01:04:30.920 --> 01:04:31.920
这是规则的名称

01:04:31.920 --> 01:04:33.920
接下来我们要写上

01:04:33.920 --> 01:04:35.920
inventation

01:04:35.920 --> 01:04:36.920
那么后边写啥呢

01:04:36.920 --> 01:04:37.920
如果说你写个nau

01:04:37.920 --> 01:04:39.920
就表示禁用这个规则

01:04:39.920 --> 01:04:40.920
你只要写上nau

01:04:40.920 --> 01:04:41.920
就表示禁用

01:04:41.920 --> 01:04:42.920
比方说我们现在写上nau

01:04:42.920 --> 01:04:43.920
再来看

01:04:43.920 --> 01:04:48.900
npm start

01:04:48.900 --> 01:04:54.580
看一下

01:04:54.580 --> 01:04:55.580
你看

01:04:55.580 --> 01:04:57.580
是不是只有一个错误了

01:04:57.580 --> 01:04:58.580
是不是只有一个错误了

01:04:58.580 --> 01:04:59.580
它没有第二个错误了

01:04:59.580 --> 01:05:00.580
对吧

01:05:00.580 --> 01:05:01.580
没有第二个错误了

01:05:02.580 --> 01:05:03.580
OK

01:05:03.580 --> 01:05:04.580
那么这就是

01:05:04.580 --> 01:05:07.580
使用了就是那个

01:05:07.580 --> 01:05:08.580
配置过后

01:05:08.580 --> 01:05:09.580
可以改动它的规则

01:05:09.580 --> 01:05:10.580
那如果说你

01:05:10.580 --> 01:05:12.580
我不仅仅是想禁用

01:05:12.580 --> 01:05:13.580
比方说我们这个说进

01:05:13.580 --> 01:05:14.580
我想把它配置为4

01:05:14.580 --> 01:05:15.580
而不是2

01:05:15.580 --> 01:05:16.580
它不认识2

01:05:16.580 --> 01:05:17.580
对吧

01:05:17.580 --> 01:05:18.580
那该怎么来配置呢

01:05:18.580 --> 01:05:19.580
你要看文档

01:05:19.580 --> 01:05:21.580
这里有个官方文档

01:05:21.580 --> 01:05:23.580
这里边有很多很多的规则

01:05:23.580 --> 01:05:25.580
你看这里有个ros

01:05:25.580 --> 01:05:26.580
规则

01:05:26.580 --> 01:05:27.580
这里边超级多

01:05:27.580 --> 01:05:29.580
很多很多的规则

01:05:29.580 --> 01:05:30.580
那么比方说我要

01:05:30.580 --> 01:05:32.580
看一下音灯特性

01:05:32.580 --> 01:05:33.580
你在这里收一下

01:05:33.580 --> 01:05:35.580
音灯特性

01:05:35.580 --> 01:05:36.580
你看这里

01:05:36.580 --> 01:05:37.580
点进去

01:05:38.580 --> 01:05:39.580
那么怎么来配置呢

01:05:39.580 --> 01:05:41.580
它说你还可以把它配置为一个数字

01:05:41.580 --> 01:05:42.580
表示有几个

01:05:42.580 --> 01:05:43.580
几个空格

01:05:43.580 --> 01:05:45.580
一个说进有几个空格

01:05:45.580 --> 01:05:47.580
那么我们可以把它配置为4

01:05:47.580 --> 01:05:48.580
把它配置为4

01:05:48.580 --> 01:05:49.580
也可以

01:05:49.580 --> 01:05:52.140
保存

01:05:52.140 --> 01:05:55.860
看一下

01:05:55.860 --> 01:05:56.860
你看

01:05:56.860 --> 01:05:57.860
是不是还是没有那个

01:05:57.860 --> 01:05:58.860
那个错误了

01:05:58.860 --> 01:05:59.860
对不对

01:05:59.860 --> 01:06:00.860
对吧

01:06:00.860 --> 01:06:01.860
你要改动相应的规则

01:06:01.860 --> 01:06:03.860
你去找配置就完事了

01:06:03.860 --> 01:06:04.860
规则的名称

01:06:04.860 --> 01:06:05.860
就爆出了规则了

01:06:05.860 --> 01:06:06.860
在这

01:06:06.860 --> 01:06:07.860
OK

01:06:07.860 --> 01:06:08.860
这是关于

01:06:09.860 --> 01:06:10.860
规则

01:06:10.860 --> 01:06:11.860
规则

01:06:11.860 --> 01:06:12.860
好

01:06:12.860 --> 01:06:13.860
那么最后呢

01:06:13.860 --> 01:06:14.860
最后呢

01:06:14.860 --> 01:06:15.860
就还是styleint

01:06:15.860 --> 01:06:16.860
说一个点

01:06:16.860 --> 01:06:17.860
就是说

01:06:17.860 --> 01:06:18.860
这种爆出呢

01:06:18.860 --> 01:06:19.860
其实并不是

01:06:19.860 --> 01:06:20.860
大部分时候呢

01:06:20.860 --> 01:06:21.860
并不是我们想要的

01:06:21.860 --> 01:06:22.860
因为我要在编译的时候

01:06:22.860 --> 01:06:23.860
要看到错误

01:06:23.860 --> 01:06:24.860
有点麻烦

01:06:24.860 --> 01:06:25.860
对吧

01:06:25.860 --> 01:06:26.860
我最好的

01:06:26.860 --> 01:06:27.860
我是希望

01:06:27.860 --> 01:06:28.860
我在写代码的时候

01:06:28.860 --> 01:06:29.860
就直接看到这个错误了

01:06:29.860 --> 01:06:30.860
不好意思

01:06:30.860 --> 01:06:32.860
显示不出来这个错误的

01:06:32.860 --> 01:06:33.860
为什么呢

01:06:33.860 --> 01:06:34.860
为什么显示不出来呢

01:06:34.860 --> 01:06:36.860
在编辑器里面的事情

01:06:36.860 --> 01:06:37.860
跟他有什么关系呢

01:06:37.860 --> 01:06:38.860
跟他没有关系

01:06:38.860 --> 01:06:39.860
对吧

01:06:39.860 --> 01:06:40.860
跟styleint

01:06:40.860 --> 01:06:41.860
styleint是安装的东西

01:06:41.860 --> 01:06:42.860
对吧

01:06:42.860 --> 01:06:43.860
安装到露道结石

01:06:43.860 --> 01:06:44.860
以后要执行的东西

01:06:44.860 --> 01:06:45.860
这是

01:06:45.860 --> 01:06:46.860
vscode的编辑器

01:06:46.860 --> 01:06:47.860
他凭什么在编辑器里面

01:06:47.860 --> 01:06:48.860
能够发现错误了

01:06:48.860 --> 01:06:49.860
能够把错误

01:06:49.860 --> 01:06:50.860
包到编辑器里面了

01:06:50.860 --> 01:06:51.860
是不是发现不了

01:06:51.860 --> 01:06:52.860
所以说

01:06:52.860 --> 01:06:53.860
这个编辑器的事情

01:06:53.860 --> 01:06:55.860
还是要靠编辑器来完成

01:06:55.860 --> 01:06:56.860
如果说

01:06:56.860 --> 01:06:57.860
你先希望在编辑器里面

01:06:57.860 --> 01:06:58.860
爆出的话

01:06:58.860 --> 01:06:59.860
那么你要去安装

01:07:00.860 --> 01:07:04.520
叫styleint

01:07:04.520 --> 01:07:06.520
安装这个插件就完成了

01:07:06.520 --> 01:07:07.520
安装好了过后

01:07:07.520 --> 01:07:08.520
他发现你的工程里面

01:07:08.520 --> 01:07:09.520
出现这个文件

01:07:09.520 --> 01:07:10.520
那么他就会安装

01:07:10.520 --> 01:07:12.520
这个文件里面的配置

01:07:12.520 --> 01:07:14.520
自动的

01:07:14.520 --> 01:07:16.520
在你的css里面

01:07:16.520 --> 01:07:17.520
去应用这个规则

01:07:17.520 --> 01:07:18.520
马上就把错误

01:07:18.520 --> 01:07:19.520
爆到编辑器里面

01:07:19.520 --> 01:07:20.520
实际上

01:07:20.520 --> 01:07:21.520
有了这个插件

01:07:21.520 --> 01:07:22.520
有了vscode的这个插件

01:07:22.520 --> 01:07:23.520
因为是这个东西

01:07:23.520 --> 01:07:24.520
这个东西跟我们开发

01:07:24.520 --> 01:07:25.520
其实没事

01:07:25.520 --> 01:07:26.520
跟我们追踪的代码

01:07:26.520 --> 01:07:27.520
其实没有任何关系

01:07:27.520 --> 01:07:28.520
对吧

01:07:28.520 --> 01:07:29.520
跟追踪生存的代码

01:07:29.520 --> 01:07:30.520
也没有任何关系

01:07:30.520 --> 01:07:31.520
没有任何关系

01:07:31.520 --> 01:07:32.520
这个玩意

01:07:32.520 --> 01:07:33.520
你看这个东西

01:07:33.520 --> 01:07:34.520
仍然可以生成追踪代码

01:07:34.520 --> 01:07:35.520
你看是不是仍然可以生成

01:07:35.520 --> 01:07:36.520
对吧

01:07:36.520 --> 01:07:37.520
其实它没有任何关系的

01:07:37.520 --> 01:07:38.520
它只是为了发现

01:07:38.520 --> 01:07:40.520
就是我们在编辑代码的时候

01:07:40.520 --> 01:07:41.520
发现一些规范的地方

01:07:41.520 --> 01:07:42.520
所以说这个东西

01:07:42.520 --> 01:07:43.520
一旦有了vscode的插件

01:07:43.520 --> 01:07:44.520
插好

01:07:44.520 --> 01:07:47.520
你又是用vscode来做开发的话

01:07:47.520 --> 01:07:48.520
你有没有必要

01:07:48.520 --> 01:07:50.520
在post.css里面用它

01:07:50.520 --> 01:07:51.520
就没有必要了

01:07:51.520 --> 01:07:52.520
没有必要了

01:07:52.520 --> 01:07:53.520
对吧

01:07:53.520 --> 01:07:54.520
因为vscode里面

01:07:54.520 --> 01:07:55.520
它只是自身用代这个功能

01:07:55.520 --> 01:07:56.520
所以post.css里面

01:07:56.520 --> 01:07:57.520
就可以不用它了

01:07:57.520 --> 01:07:58.520
但是这个文件得要

01:07:58.520 --> 01:07:59.520
这个文件

01:07:59.520 --> 01:08:00.520
就你们以后到大公司里面

01:08:00.520 --> 01:08:01.520
去做开发

01:08:01.520 --> 01:08:02.520
有一些规则

01:08:02.520 --> 01:08:04.520
它一般会把这个文件

01:08:04.520 --> 01:08:06.520
加入到版本管理

01:08:06.520 --> 01:08:07.520
就在地址里面

01:08:07.520 --> 01:08:08.520
也会有这个文件

01:08:08.520 --> 01:08:09.520
你要拿去过来

01:08:09.520 --> 01:08:10.520
拿去过来有这么一个文件

01:08:10.520 --> 01:08:12.520
你在vscode里面安装好这个东西

01:08:12.520 --> 01:08:14.520
然后它就会给你发现

01:08:14.520 --> 01:08:15.520
你不规范那地方

01:08:15.520 --> 01:08:16.520
就会发现了

01:08:16.520 --> 01:08:18.520
那就这么个意思

01:08:18.520 --> 01:08:19.520
OK

01:08:19.520 --> 01:08:21.520
这是关于这一块

01:08:21.520 --> 01:08:23.520
我这里要把它写真去

01:08:23.520 --> 01:08:25.520
这就没错了

01:08:25.520 --> 01:08:27.520
不是在这

01:08:27.520 --> 01:08:31.600
应该在这边写真去

01:08:31.600 --> 01:08:32.600
好

01:08:32.600 --> 01:08:33.600
这一课我再说一声

01:08:33.600 --> 01:08:36.600
最重要的是post.css到底是啥

01:08:36.600 --> 01:08:38.600
它怎么来做事呢

01:08:38.600 --> 01:08:40.600
那么它后边的东西

01:08:40.600 --> 01:08:42.600
安装配置我念阳插件那些

01:08:42.600 --> 01:08:44.600
随便你跟着我做一遍就说

01:08:44.600 --> 01:08:45.600
完事了就过了

01:08:45.600 --> 01:08:47.600
以后就不用再去碰它了

01:08:47.600 --> 01:08:48.600
如果说你们以后在公司里面

01:08:48.600 --> 01:08:50.600
确实要用到它

01:08:50.600 --> 01:08:51.600
忘了一些东西

01:08:51.600 --> 01:08:52.600
那么再回过来看一下

01:08:52.600 --> 01:08:53.600
就完事了

01:08:53.600 --> 01:08:54.600
好

01:08:54.600 --> 01:08:55.600
那么自此

01:08:55.600 --> 01:08:56.600
本章的最核心的

01:08:56.600 --> 01:08:58.600
大的支持点就结束了

01:08:58.600 --> 01:09:00.600
后边还有一些小的东西

01:09:00.600 --> 01:09:02.600
我们讲一讲也就过了

01:09:02.600 --> 01:09:03.600
你可以看到

01:09:03.600 --> 01:09:04.600
由于没有最佳时间

01:09:04.600 --> 01:09:06.600
我们在央视处理的一块

01:09:06.600 --> 01:09:08.600
还是有很多事情需要解决的

01:09:08.600 --> 01:09:09.600
我无法预知

01:09:09.600 --> 01:09:10.600
你们以后在公司里面

01:09:10.600 --> 01:09:12.600
到底要使用什么样的方案

01:09:12.600 --> 01:09:13.600
但是我都把这些方案

01:09:13.600 --> 01:09:14.600
给大家过一遍

01:09:14.600 --> 01:09:15.600
过一遍过后你们到公司里面

01:09:15.600 --> 01:09:16.600
如果说遇到了

01:09:16.600 --> 01:09:18.600
你至少有东西可以查

01:09:18.600 --> 01:09:19.600
你至少以前看到过的

01:09:19.600 --> 01:09:20.600
不至于慌

01:09:20.600 --> 01:09:22.600
主要是起车妹的作用

