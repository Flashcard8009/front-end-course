WEBVTT

00:00.500 --> 00:01.780
热替换

00:02.540 --> 00:05.620
这是我们构建性能的第三个优化点

00:06.140 --> 00:07.660
咱们来看一下热替换

00:08.180 --> 00:11.260
热替换是为拍颗是为拍颗3

00:11.260 --> 00:13.820
我也印象记不住了3还是4

00:14.060 --> 00:15.620
增加的功能好像是3

00:16.380 --> 00:17.900
现在都到4这个版本了

00:18.420 --> 00:20.220
热替换是它蛮重要的一个功能

00:20.460 --> 00:22.260
这个玩意它其实

00:22.520 --> 00:25.580
严格来说它是不能降低构建时间的

00:25.840 --> 00:26.860
就说我们说

00:27.120 --> 00:29.420
打包时间是不能减少的

00:29.620 --> 00:31.720
可能还会反而增加打包时间

00:32.500 --> 00:33.520
但它为什么

00:34.020 --> 00:34.540
这么

00:34.800 --> 00:35.820
重要呢

00:36.080 --> 00:37.360
是因为它能够降低

00:37.620 --> 00:38.900
代码改动

00:39.140 --> 00:41.200
到效果呈现的时间

00:41.700 --> 00:44.020
因为我们做开发的时候

00:44.280 --> 00:45.540
我们说的这些性能

00:46.320 --> 00:48.100
这个地方构建性能

00:49.640 --> 00:51.940
构建性能都是指的是开发阶段

00:52.200 --> 00:56.560
跟什么运行的时候没有任何关系没有一毛钱关系都是指的是开发阶段

00:57.020 --> 01:00.340
因为我们开发的时候呢更多的时候希望的是

01:00.600 --> 01:02.020
我们说时间快一点的吧

01:02.280 --> 01:03.940
打包时间就是时间快一点

01:04.200 --> 01:05.720
只得是我们代码改了之后

01:06.500 --> 01:10.840
到我们切过去切到浏览器那一块去看我们改动过后的效果

01:11.100 --> 01:12.380
只得是这一块的时间

01:13.160 --> 01:15.200
我们实际上是不太关心

01:15.460 --> 01:17.000
它的打包时间的

01:17.500 --> 01:18.020
我们

01:18.280 --> 01:19.040
虽然打包时间

01:19.300 --> 01:20.820
也是这个时间的组成部分

01:21.080 --> 01:22.620
但是呢它只是一部分而已

01:22.880 --> 01:23.900
它不是完整的过程

01:24.160 --> 01:26.460
好咱们来看一下吧看一下一个图就明白了

01:27.540 --> 01:30.560
就说我们使用平时开发的时候一般会使用这个东西

01:30.820 --> 01:32.660
叫dev server就开发服务器

01:33.180 --> 01:36.500
那么我们来看一下当我们使用了开发服务器之后

01:37.020 --> 01:39.300
会是一个什么样的效果呢

01:39.560 --> 01:40.860
我们开始编写代码

01:41.100 --> 01:44.180
代码改了啊从代码改动开始

01:44.440 --> 01:45.980
改了代码是不是要重新打包

01:46.220 --> 01:48.020
对吧为派铁要启动啊重新打包

01:48.520 --> 01:51.340
好那么这个时间呢就是我们之前讲的那两点

01:51.860 --> 01:52.620
啊这个

01:52.780 --> 01:54.240
减少模块解析啊

01:54.500 --> 01:58.200
各优化loader的性能啊这一块都是减少什么

01:58.460 --> 01:59.480
减少这一块

01:59.740 --> 02:01.800
减少这一块的时间重新打包的时间

02:02.760 --> 02:05.120
那么其实还有一块时间我们没有考虑到

02:05.380 --> 02:06.140
还有一块什么呢

02:06.400 --> 02:10.620
重新打包完了过后这个dev server啊它是不是会自动开启的为派铁的

02:10.880 --> 02:12.800
呃watch对吧观察

02:13.060 --> 02:14.320
观察我们代码在改动

02:14.580 --> 02:15.880
改动之后呢它重新打包

02:16.120 --> 02:19.580
打包完了过后呢它会有一个功能就是刷新浏览器

02:19.960 --> 02:21.240
它会把浏览器刷新

02:21.960 --> 02:25.540
好浏览器刷新你看一下是不是要重新请求html页面

02:25.800 --> 02:27.220
页面要重新请求吧

02:27.480 --> 02:30.420
好页面中用到的css文件要重新请求吧

02:30.680 --> 02:32.140
图片要重新请求吧

02:32.400 --> 02:33.980
啊那么还有什么呢

02:34.240 --> 02:37.180
还有那个你的json文件是不是要重新请求

02:37.440 --> 02:40.900
全部要所有的资源全部要重新启动一遍一遍请求一遍

02:41.160 --> 02:42.180
因为我们浏览器刷新了

02:42.960 --> 02:46.540
如果说在一个比较大的工程里边那么这个文件内容很多

02:46.800 --> 02:49.980
那么这个传输虽然是本地传输就是自己的电脑到自己的电脑

02:50.180 --> 02:51.360
它也需要时间啊

02:51.620 --> 02:52.760
它也是需要时间的

02:53.020 --> 02:55.700
而且浏览器要渲染一面是不是也需要时间

02:55.980 --> 02:59.140
那么这一块时间呢是在我们前两节课是没有考虑的

02:59.660 --> 03:02.480
那么这一块时间呢虽然说它不是打包的时间

03:02.740 --> 03:08.360
但是呢它也会影响到我们从代码变动到看到最终的效果这段时间也会影响到

03:09.380 --> 03:11.300
而且呢还有一个问题大家发现没

03:11.640 --> 03:13.900
就是我们在开发的时候呢

03:14.140 --> 03:15.260
可能比方说一个表单

03:15.700 --> 03:18.420
哎有一个表单我们在表单里面填东西

03:18.820 --> 03:20.580
啊填的啊表单有20项嘛

03:20.820 --> 03:26.580
啊有什么用户名啊密码呀重复密码呀还有这什么你的头像上传呀等等等等啊

03:26.980 --> 03:28.180
啊填了很多项表单

03:28.820 --> 03:31.620
好不容易填完了哎发现一个代码写的有错误

03:32.380 --> 03:34.060
好怎么办呢我们去改动一下代码

03:34.420 --> 03:37.700
改动代码的浏览器刷新的是不是我们对浏览器的操作啊

03:37.700 --> 03:39.740
就是我们用户的操作是不是全部都没了

03:40.460 --> 03:42.500
是不是要全部重新操作一遍对吧

03:42.740 --> 03:44.220
所以说导致了这么一些问题

03:44.980 --> 03:46.660
那么会影响我们的开发效率

03:46.900 --> 03:49.380
像我们构建性能这一块全是说的开发效率

03:50.540 --> 03:52.820
那么怎么办呢这一块我们就要考虑这一点

03:53.380 --> 03:55.140
能不能让浏览器不要刷新啊

03:55.660 --> 03:58.980
啊刷新过后当然请求从从的所有的资源和执行代码啊

03:58.980 --> 04:01.900
然后继续监控代码变动能不能让他不要刷新

04:02.100 --> 04:04.940
因为一刷新我的我的这个意念状态全部没了

04:05.340 --> 04:07.660
啊而且所有的资源要全部重新请请求一遍

04:08.220 --> 04:13.900
那么这一块呢解决这个问题呢就需要用到热替换啊也叫做热更新啊热更新

04:14.340 --> 04:16.900
那么他的全称啊全称叫做哎呦

04:17.060 --> 04:18.620
我没有写说没有写完是吧

04:18.780 --> 04:19.700
全称叫做hot

04:20.900 --> 04:21.500
啊

04:22.260 --> 04:25.380
模块啊 module replacement

04:26.100 --> 04:29.140
啊热模块替换啊全称叫做这个啊

04:29.140 --> 04:31.620
我们也把叫做热更新是一样的意思啊

04:32.020 --> 04:35.100
啊那么他是热替换他是一个什么样的流程的

04:35.300 --> 04:36.300
他就解决这个问题

04:36.500 --> 04:38.780
我们代码变动然后重新打包这个不变啊

04:38.780 --> 04:39.620
这个还是不变

04:40.140 --> 04:42.820
好然后呢到这里流烂器不刷新了

04:43.340 --> 04:49.500
他只需要去在流烂器用意断戒也是代码去改动我们请求的资源啊就可以了

04:49.820 --> 04:52.700
啊有发动你可以理解为发动阿迦克斯请求啊

04:52.700 --> 04:55.620
实际上是通过我也实际上是通过websocket

04:56.260 --> 04:58.660
啊我们一会再说吧啊这是原理部分了

04:58.820 --> 05:02.700
啊那么他去改动我们的就是哪一部分发生改变了

05:02.700 --> 05:05.820
我们就覆盖哪一部分资源啊然后重新运行下代码

05:06.020 --> 05:10.020
那么这样子的流烂器由于没有他就是解决的问题就是不要让流烂器刷新

05:10.820 --> 05:13.700
流烂器由于没有刷新就意味着什么呢

05:13.900 --> 05:18.500
就意味着我们的用户铁在流烂器里边填的东西用户的操作是不是全部保留下来了

05:19.020 --> 05:22.340
而且呢这些资源是不是不用全部请求一些所有的资源了

05:22.340 --> 05:25.460
因为毕竟大部分资源是没有改动的我们只是改动了一小部分

05:26.180 --> 05:29.260
好就是这就是热更新的流程啊热替化的流程

05:29.780 --> 05:31.260
好我们首先看使用和原理

05:31.460 --> 05:35.420
主要关注使用原理呢我说一下啊你们尽量听听个热闹

05:35.620 --> 05:39.940
反正那个原理那一块我告诉大家啊是这一节课的一个扩点

05:40.580 --> 05:43.300
啊就是你不了解的话也不影响你使用的

05:43.900 --> 05:45.220
好那么怎么去使用他呢

05:45.820 --> 05:52.980
很简单你只需要去开启热更新 hotbox 设备去啊在dev server 里边开启热更新啊热替换

05:53.900 --> 05:58.420
啊然后呢你使用一个插件叫做 hot module replacement plugin

05:58.740 --> 06:00.740
对就是热更新那个单词这个插件

06:01.860 --> 06:08.020
那么这个插件是可以不用不用写的啊不用写的到了外拍个试过后呢就是你开了热更新过后呢

06:08.180 --> 06:13.100
就是你这个插件了你写不写都无所谓了啊你写你不写的话还会自动给你加上啊

06:13.100 --> 06:15.540
所以说你写不写都无所谓这句话可以不写啊可以不写

06:15.540 --> 06:22.180
但是你要知道这个最终热更新的啊热更新的就是那个呃功能是他来完成的

06:22.260 --> 06:24.220
你知道这一点就行了啊你可以不写

06:24.900 --> 06:26.420
那么我来试一下啊试一下

06:27.260 --> 06:32.740
我们这里呢有一个入口文件这个文件的特别简单啊导入了另外一个模块哎

06:32.980 --> 06:36.460
哎他就导出出一个支付串哎然后呢这里把输出非常简单啊

06:37.420 --> 06:39.260
然后到了这个配置里边啊

06:40.300 --> 06:45.580
我在拍个点接受里面使用了这个微拍的dev server好到了配置里边配置里边看一下吧

06:45.820 --> 06:51.940
就使得一个atme页面啊生成一个atme页面然后呢自动打开自动打开什么了自动打开一个页面

06:53.500 --> 06:57.540
接下来我们把好处开启啊开启好处的第一步

06:58.820 --> 07:01.180
第二步啊这是个合选的啊

07:02.180 --> 07:03.540
第二步你要改一下代码

07:04.220 --> 07:10.700
你在你的入口文件里边或者是随便什么地方你写写段这这个代码让他运行就行了啊让他运行就行了

07:11.980 --> 07:13.380
ok 没了啊

07:13.940 --> 07:16.940
这个判断是指的是判断的是适逢开启了热更新

07:17.180 --> 07:20.860
然后呢如果说开启了过后我就接受了更新啊我们以后再说这个代码啊

07:20.860 --> 07:24.620
他到底是怎么回事儿那一块涉及到原理了啊我简单说一下原理

07:25.100 --> 07:30.220
好那现在就如果说使用的话现在就已经够了他已经能够热更新了他们来试一下吧

07:31.020 --> 07:32.220
啊npm软的

07:35.280 --> 07:39.880
好看一下啊那么现在呢我们看一下控制台

07:41.440 --> 07:41.720
控制台

07:42.600 --> 07:47.480
比方说吧我们页面上的再加一个东西吧我们加一个文本框吧大家看着更加

07:48.800 --> 07:59.240
感觉上能更加更加能够理解一点啊这个新的好处啊比方说我们的页面上添加一个文本框啊一个文本框接下来我们在配置里边啊这里呢我们写上一个啊

08:00.200 --> 08:01.240
template

08:01.800 --> 08:08.760
我们的模板模板在哪呢在public目录下面的index的点啊是这个模板啊保存啊重新来一次

08:10.870 --> 08:14.120
运行啊稍等一下啊

08:15.080 --> 08:16.840
啊出来了你看是不是文本框

08:17.240 --> 08:23.640
对吧好如果说我们没有开启热更新啊我们试一下啊如果说不开启热更新会怎么样我们先试一下这个

08:27.000 --> 08:27.480
等一下啊

08:28.360 --> 08:29.320
不开启热更新

08:29.960 --> 08:34.360
你看啊我在这里边写一些东西对吧好比方说有很多文本框写了好好不用写了一大堆

08:34.600 --> 08:37.560
然后呢我们在这里改动一下文件我们把这个a变成b

08:38.280 --> 08:38.760
一保存

08:39.800 --> 08:45.400
是不是一边刷新了对吧我们写的东西全部没了啊非常非常丑上我会又要重新操作一遍啊

08:45.960 --> 08:50.760
好那么现在我们开启热更新看一下开启这个改动配置要打包啊重新打包

08:54.540 --> 08:55.420
啊运行

08:57.510 --> 09:02.070
开启热更新了啊现在然后我们一般一边看控制台一边看这个我们远方

09:02.390 --> 09:06.390
好这里的我们写我们方写些东西啊控制台输出了b对吧我们导出的是b

09:06.550 --> 09:07.750
接下来我们改动一下代码

09:07.830 --> 09:09.430
改动成c一保存

09:10.710 --> 09:16.310
是不是就输出c的对吧之前的东西是不是没有消失说明页面没有刷新对吧之前的控制台还在说明页面没有刷新

09:16.310 --> 09:18.870
而且文明框是不是还在说明什么说明页面没有刷新

09:19.910 --> 09:26.550
啊那么这就是热更新的好处他极大地提高了我们从改动代码到看到结果的过程

09:26.950 --> 09:27.910
提高了开发效率

09:28.950 --> 09:35.590
好那么他到底是怎么做的呢他这个代码到底是啥意思呢啊我们给大家解释一下啊尽量听吧啊这一块呢

09:36.390 --> 09:37.350
可能会有一些难度

09:37.830 --> 09:38.310
他有点糟

09:39.590 --> 09:41.190
他怎么回事啊我看一下原理

09:43.940 --> 09:47.860
首先呢你要知道这一段代码呢他是会参与最终运行的

09:49.620 --> 09:53.460
有些人就搞不清楚了哎我的最终代码里面哪有什么marge

09:54.820 --> 09:57.380
哪有什么marge marge哪来的最终代码里面 marge哪来的

09:58.980 --> 10:01.620
啊想一想我们以前讲过原理他打包了结果

10:02.500 --> 10:04.740
我们这个代码是不是放到一个函数里边的

10:05.460 --> 10:07.780
到时候我们这个代码是不是放到一个函数里面在执行

10:08.180 --> 10:13.140
对吧函数里面会不是不是函数里面就提供了marge一个sport还有什么呢

10:14.740 --> 10:16.500
就是呃webpack

10:17.780 --> 10:18.260
require

10:18.980 --> 10:19.700
呃require

10:21.380 --> 10:26.180
对吧不是提供了这些东西吗对不对不是他就是他提供了那么marge是这来的

10:26.900 --> 10:30.340
那么这个代码运行marge heart heart是哪来的呢好

10:31.300 --> 10:34.020
那么这个heart这个属性呢是webpack dev server

10:34.340 --> 10:40.260
他会在打包结果里边给你注入这个heart属性他就很简单marge里边给你加了加了一个属性heart

10:40.820 --> 10:45.700
啊那么这个webpack dev server搞定的那么这个东西呢当然是开发阶段啊

10:46.180 --> 10:50.420
如果说你是产产生产环境的话他当然不会根本就不会有这些东西对吧

10:50.900 --> 10:53.140
只是开发阶段他会给你注入这个属性

10:54.340 --> 10:59.860
好那么判这个属性能指示什么呢他指示了你的配置里边到底是不是配置的heart为出

11:00.420 --> 11:03.220
到底有没有配置啊就配就是指示这个东西

11:04.180 --> 11:08.980
啊如果说你配置为出的话那么他就会给你加上一个heart marge heart等于出

11:09.540 --> 11:13.620
啊如果说你没有开启的话就 heart heart heart就没有啊就这么个意思

11:14.660 --> 11:17.620
好如果说你开启了过后怎么办呢他是这样子

11:18.260 --> 11:19.460
就算你开启了

11:19.860 --> 11:24.420
webpack dev server他也不会给你做什么热更型他不会做这些事情的啊

11:25.780 --> 11:27.540
那么当你重新打包的时候呢

11:27.940 --> 11:30.580
那么这个开发服务型他就做一件非常简单的事

11:30.580 --> 11:33.300
他调用一句调用一句代码location reload

11:33.700 --> 11:35.540
啊你看一下把你搜一下这个代码都还在

11:35.700 --> 11:40.980
你看一下这个source里面啊我们的原代码里面还是他打包的结果对吧你看一下一搜一下location

11:41.460 --> 11:42.260
第二reload

11:43.700 --> 11:44.580
reload你看吧

11:45.300 --> 11:50.900
肯定是在的对吧是不是在的说明上吗说明了他给你啊做了这么一件事啊

11:51.220 --> 11:54.260
我们这样子吧把这个source map打开看这样子看着清楚一点

11:56.470 --> 11:57.510
把这个source map打开

11:59.660 --> 12:02.540
ormy devs2 source map

12:03.580 --> 12:08.220
这样子呢他的原代码呢就不是这么这样子放到evo里边了啊看一下吧

12:09.260 --> 12:14.380
研究呃听一听吧啊原理听一听因为这一块的原理呢面是一不太会温到

12:14.380 --> 12:17.660
而且呢他比较绕啊比较绕

12:18.860 --> 12:19.980
呃我们看一下这个

12:20.540 --> 12:21.260
Media.js

12:21.260 --> 12:22.140
ok那么看一下

12:22.940 --> 12:23.660
location

12:25.260 --> 12:25.900
reload

12:27.260 --> 12:27.980
are

12:29.260 --> 12:30.300
reload

12:30.540 --> 12:31.340
啊你看一下代码

12:31.820 --> 12:33.260
是不是在这对吧在这

12:34.380 --> 12:35.180
啊就这么个意思

12:36.140 --> 12:39.020
好呃当然这有好几处啊好几处你看

12:40.300 --> 12:45.180
应用应用应用重重新那个啊重新那个重新就刷新页面

12:45.500 --> 12:46.940
在默认情况下他是这么做的

12:48.650 --> 12:51.370
好这样我们再继续看那个我们的那个

12:52.330 --> 12:52.810
可见

12:56.090 --> 13:01.210
好那么现在呢如果说你运行的就是你在代码里面运行的这句话那就不一样了

13:01.770 --> 13:05.370
他就会改动这一行为他就不再用location reload来刷新页面了

13:05.770 --> 13:07.370
那么他怎么做呢他也不知道怎么做

13:07.850 --> 13:08.890
他就会把这个

13:09.530 --> 13:15.610
后续的东西呢交给另外一个东西运行交给谁在运行的交给hot module replacement plugin

13:15.930 --> 13:20.330
啊交给这个插件运行也就说这个插件呢他也会在打包结果里面生成一些代码

13:20.810 --> 13:22.410
啊那么会交给这个代码运行

13:23.690 --> 13:26.010
那么他具体是怎么运行的过程呢他是这样子的

13:26.570 --> 13:29.770
这个这个代码的作用啊他是要接收啊

13:29.850 --> 13:32.810
就是接收服务器传送的东西过来

13:33.530 --> 13:38.250
但我问大家一个问题啊服务器能不能在我们的浏览器环境里边

13:39.370 --> 13:40.650
浏览器环境中

13:41.930 --> 13:48.890
服务器是否可以主动向客户端发送啊数据

13:50.170 --> 13:52.250
是否可以你们以前学过的

13:52.970 --> 13:53.450
啊

13:54.890 --> 13:58.650
大部分情况下呢是不可以的因为我们知道 attp 请求

13:58.890 --> 14:02.490
这个就是 attp 请求是浏览器主动的对吧是主动的一方

14:02.730 --> 14:06.010
他发送一个请求到服务器也服务器给他响应一个结果对吧这是

14:06.410 --> 14:09.770
呃这是那个啊 attp 请求的原理

14:10.010 --> 14:12.730
啊你没法改动这个原理但是呢在

14:13.450 --> 14:19.290
呃十年前吧啊也不算有很新的技术了那么就出现了一个东西叫做web socket

14:20.010 --> 14:27.610
啊web socket 浏览器上出现了这么一种标准那么这个技术呢他就可以跟服务器之间建立一个

14:27.930 --> 14:32.890
持久的连接那么这个连接不是 attp 啊协议了啊它是个持久的连接

14:33.370 --> 14:35.610
啊有类似于tcp ip 协议了

14:36.650 --> 14:41.050
那这个持久的连接他是不会断开的因为我们知道 attp 协议他会断开所以说没办法

14:41.290 --> 14:46.490
下一次呢又得重新建立建立这个连接那么浏览器只能向服务器发送请求了

14:46.650 --> 14:51.850
因为服务器根本不知道浏览器在哪啊浏览器是知道服务器在在哪的服务器不知道浏览器在哪

14:52.170 --> 14:56.010
所以说呢只能浏览器发送一个请求到服务器又重新建立连接服务器给他

14:56.410 --> 15:01.850
返回一个数据然后连接又断开了但是web socket这个连接的是连接不断开

15:02.730 --> 15:08.330
啊他是不断开的那么服务器就一直跟客户端保持这个连接只要连接不断开那么任何一方

15:08.570 --> 15:13.210
浏览器可以主动发送数据到服务器服务器呢也会主动发送数据到浏览器

15:14.170 --> 15:18.650
而我们的web packet dev server呢他在启动的时候他就会建立这么一个web socket

15:18.970 --> 15:23.050
只不过呢没有这个更新的时候他没有什么意义啊他没有什么意义他的意义就在于

15:23.610 --> 15:30.170
服务器知道我自己的文件变了我知道打包完成了那么给发一个消息给客户端啊发一个web socket消息给客户端

15:30.650 --> 15:33.770
那么客户端那干嘛呢客户端就location reload

15:34.170 --> 15:37.050
重新刷新页面他就用这么自动方式来玩的

15:37.610 --> 15:42.970
啊那么现在不一样了现在呢服务器发生了哎我服务器更新了

15:43.690 --> 15:48.730
更新了过后呢他发送了一些信息给客户端通过什么服务器进行主动发送的啊通过web socket

15:49.370 --> 15:55.130
服务器主动通过web socket的管道发送给一个信息给后浏览器说哎我更新了

15:56.010 --> 15:58.170
那么更新了那么浏览器怎么办呢

15:58.890 --> 15:59.690
浏览器怎么办呢

16:00.570 --> 16:02.810
浏览器这个时候如果说你使用了这句话

16:03.690 --> 16:07.290
浏览器这个时候呢他会交给这个插件来处理这个他要做什么事

16:07.770 --> 16:08.410
这很简单

16:09.050 --> 16:14.090
你服务器不是告诉我你更新了吗我现在不刷新浏览器了不用那个location reload了啊

16:14.410 --> 16:16.890
因为这个这个行为呢已经被这个这句话改变了

16:17.610 --> 16:18.570
那么他现在干嘛呢

16:19.130 --> 16:22.650
他现在呢要重新发送一个请求到服务器我问一下

16:23.370 --> 16:27.210
哪些东西更新了你给我啊你告诉我哪些东西更新了

16:27.690 --> 16:31.290
那么服务器呢又会把更新的东西呢发送到浏览器

16:31.930 --> 16:37.130
好那么经过一来一回这个过程浏览器是不是就只拿到了更新的一部分数据

16:37.450 --> 16:41.370
他就不会要把整个数据全部因为浏览器没有刷新嘛自然不会全部重新请求

16:41.530 --> 16:46.570
那么而且呢他得到了新的数据呢只仅仅是仅仅是什么呢仅仅是那个

16:47.050 --> 16:48.970
呃更新部分的数据

16:50.250 --> 16:52.010
好那么咱们来看一下是不是这样子

16:52.490 --> 16:55.290
我们到监控一下这个这个内存货啊

16:55.690 --> 16:57.050
我们现在去更新一个模块

16:59.400 --> 17:01.160
更新一个模块啊别把它变成D

17:01.800 --> 17:02.200
保存

17:03.240 --> 17:04.520
你看说发送两个请求

17:05.160 --> 17:08.360
啊那么这个东西呢是服务器啊服务器

17:08.520 --> 17:10.600
服务器告诉你的啊服务器告诉你的

17:11.800 --> 17:15.640
服务器告诉你什么呢告诉你这个东西啊更新了啊有个东西更新了

17:15.880 --> 17:20.600
反正通过这么一句话这个不详细也是了啊那么接下来他告诉你更新了过后呢

17:20.840 --> 17:21.800
那么那么这个插件

17:22.600 --> 17:24.840
这个插件还可以做什么呢又会发送一个请求

17:25.240 --> 17:28.040
那么会问服务器什么东西更新了呢服务器会告诉他

17:28.280 --> 17:31.480
哎这个东西更新了啊这个东西更新了

17:31.560 --> 17:34.280
我们的就是窗口哪个窗口呢妹这个窗口

17:34.840 --> 17:38.520
哪个窗口里边哪个文件哪个模块呢是A调解释你看

17:39.240 --> 17:42.040
index有没有更新没更新服务器就不会告诉他

17:42.200 --> 17:45.960
他只会告诉他我A调解释更新了更新成什么呢更新成这个代码了

17:46.760 --> 17:50.600
把它更新成这个代码了之前是C对吧告诉他D

17:50.920 --> 17:55.720
对不对那么GS文件有没有变动GS我们的妹调解释里边你看一下是没有变动的

17:55.720 --> 17:57.640
它还是原始的啊你看一下吧

17:57.960 --> 17:59.000
我们在这里找一下

17:59.480 --> 17:59.960
呃

18:01.080 --> 18:03.800
妹调解释我们再输一下啊第二鞋杠

18:04.040 --> 18:07.480
srcA调解释你看一下A调解释里面是没有变动的

18:08.120 --> 18:09.880
是不是还是C对吧还是C

18:10.040 --> 18:14.280
它不是D啊说这个文件它不会变动它没有没有也没有办法变动文件

18:14.280 --> 18:17.800
服务器只能告诉他这么一个制服判他告诉他哪个模块更新了

18:18.040 --> 18:19.640
那么接下来就交给他来处理了

18:20.040 --> 18:20.920
他怎么处理呢

18:21.320 --> 18:25.000
他非常简单他里边他本来就在打包结果里面注入了代码的

18:25.000 --> 18:27.240
那么那个代码家他就会运行他监控到了

18:27.400 --> 18:29.800
就这个代码还会监控到监控到这个结果过后

18:29.800 --> 18:30.520
他干嘛呢

18:30.840 --> 18:33.400
他就把重新把index就把入口文件重新运行

18:33.880 --> 18:34.440
就这么简单

18:34.680 --> 18:37.800
然后呢把这个新的新的应用就是把那个这个代码

18:38.280 --> 18:41.640
把这个结果呢替换掉谁替换掉这个模块代码

18:42.680 --> 18:44.120
这个替换很简单吧对吧

18:44.120 --> 18:48.040
在这个模块的结果里边找到这个keyz把这个keyz重新复制

18:48.040 --> 18:52.280
复制为这个东西对吧替换那个模块代码替换成另外一个函数

18:52.280 --> 18:55.560
然后呢再重新运行index的解释那么一切就重新来一次了

18:56.200 --> 18:57.280
保留到页面状态

18:57.280 --> 18:59.480
浏览器没有刷新把代码重新运行的一次

19:00.280 --> 19:03.880
你可以简单的理解为这个运行的原理不能再讲成了

19:03.880 --> 19:05.080
再讲成就太太复杂了

19:05.640 --> 19:07.320
那么简单的理解为这个原理就是

19:07.800 --> 19:11.560
浏览器不刷新重新制让服务器告诉我有哪些东西更新了

19:12.120 --> 19:14.760
我应用更新把代码重新运行一遍就完事了

19:15.400 --> 19:17.080
ok 这就是他的执行原理

19:17.480 --> 19:19.400
拥起来特别简单啊用起来特别简单

19:20.280 --> 19:22.200
好后边呢我说一下关于央视

19:22.200 --> 19:24.600
央视其实也可以实现热更新

19:24.680 --> 19:25.400
也就是热替换

19:26.280 --> 19:27.480
那么央视怎么样了

19:27.480 --> 19:29.480
央视的但是你只能使用style loader

19:29.480 --> 19:32.920
你不能使用那个mini cs extract

19:32.920 --> 19:34.920
为什么呢我解释一下啊

19:34.920 --> 19:37.160
其实这个我解这个都还是好解释的

19:38.200 --> 19:40.120
因为热替换发生的时候了

19:40.120 --> 19:41.160
这个插件啊

19:41.160 --> 19:44.040
它只是简单的重新运行模块代码

19:44.520 --> 19:47.080
我问一下哪些东西更新到我一替换重新运行代码

19:47.480 --> 19:47.880
对吧

19:48.760 --> 19:50.520
那么style loader的代码

19:50.520 --> 19:52.360
是line loader不是生成一段代码吗

19:52.920 --> 19:55.560
他一执行是不是就给重新给那个

19:55.560 --> 19:57.080
就是加入了style元素了

19:57.080 --> 19:58.520
对吧是不是加入了style元素

19:58.760 --> 20:00.840
那么style元素的自然的样式就更新了

20:00.840 --> 20:01.960
你样式就自然更新了

20:02.440 --> 20:03.720
但是这个东西不一样了

20:04.440 --> 20:05.560
因为这个玩意呢

20:05.560 --> 20:07.960
它生成文件是在构建期间

20:08.360 --> 20:11.080
而我们的热替换发生在代码运行的时候

20:11.080 --> 20:13.480
对吧我们的代码具体的流烂期运行的时候

20:13.480 --> 20:14.520
在发生的热替换

20:14.760 --> 20:16.680
它是在流烂期运行的过程中发生的

20:17.080 --> 20:19.720
而我们这个生成文件是在构建期间发生的

20:19.720 --> 20:20.200
这个东西

20:20.520 --> 20:22.760
所以说当我们在流烂期运行的时候

20:22.760 --> 20:23.800
还有没有生成文件

20:24.200 --> 20:25.320
没有生成文件代码

20:25.320 --> 20:25.800
对吧

20:25.800 --> 20:28.360
而且呢流烂期也不可能去生成文件

20:28.360 --> 20:29.640
流烂期哪有这个功能啊

20:29.640 --> 20:31.160
你学流烂期端端技也是

20:31.960 --> 20:33.080
怎么可能生成文件呢

20:33.080 --> 20:34.280
是生成不了文件的

20:34.280 --> 20:36.280
所以因此他对这个情况是无效的

20:36.280 --> 20:38.120
所以你只能使用style loader

20:38.120 --> 20:39.240
那么我们来试一下吧

20:39.240 --> 20:40.920
比方说我们在这里呢

20:40.920 --> 20:42.200
新建个CSS吧

20:42.200 --> 20:43.960
in这个设定CSS

20:43.960 --> 20:45.240
这里呢我们写一个body

20:46.360 --> 20:46.680
color

20:47.400 --> 20:47.800
一个

20:48.440 --> 20:49.240
生色嘛

20:49.240 --> 20:49.880
生色的

20:49.880 --> 20:50.360
666

20:53.240 --> 20:54.360
这是文字颜色

20:54.360 --> 20:54.840
FF

20:55.480 --> 20:56.040
background

20:57.160 --> 20:57.640
666

20:58.840 --> 20:59.320
OK

20:59.320 --> 21:01.160
那么我们在in这个设定的介绍里面导入它

21:03.540 --> 21:04.820
就写个in这个设定

21:04.820 --> 21:05.540
CSS

21:05.540 --> 21:05.780
好

21:05.780 --> 21:07.300
当然那我肯定要配置一下

21:07.300 --> 21:07.860
配置什么呢

21:07.860 --> 21:08.740
配置

21:08.740 --> 21:09.220
module

21:11.380 --> 21:11.940
然后呢

21:11.940 --> 21:12.340
rules

21:14.100 --> 21:14.500
rules

21:16.500 --> 21:17.220
规则

21:17.220 --> 21:17.540
test

21:19.940 --> 21:20.580
css

21:21.380 --> 21:22.180
然后交给

21:22.180 --> 21:22.660
交给谁呢

21:23.460 --> 21:24.500
交给style loader

21:25.220 --> 21:26.180
然后呢再交给

21:27.140 --> 21:28.100
css loader

21:28.980 --> 21:29.220
好

21:29.220 --> 21:29.860
保存

21:29.860 --> 21:30.420
重新来一次

21:35.350 --> 21:35.590
啊

21:35.590 --> 21:36.310
大家运行出来啊

21:37.990 --> 21:38.230
好

21:38.230 --> 21:38.950
你看一下

21:38.950 --> 21:39.670
那么现在呢

21:40.870 --> 21:42.390
我们看一下在这里面数据的东西啊

21:42.390 --> 21:43.030
主要观察

21:43.030 --> 21:44.390
有没有有没有刷新页面

21:44.390 --> 21:44.550
好

21:44.550 --> 21:45.990
我们在css感动一下

21:45.990 --> 21:47.110
改动成背景

21:47.110 --> 21:47.670
是改动成

21:48.870 --> 21:49.750
brom

21:49.750 --> 21:50.070
综色

21:53.290 --> 21:54.010
改动成不综色

21:54.490 --> 21:54.890
好

21:54.890 --> 21:55.370
保存

21:56.170 --> 21:56.570
你看一下

21:56.570 --> 21:57.610
所有颜色就变了

21:57.610 --> 21:58.170
对吧

21:58.170 --> 21:59.290
而且呢文字啊

21:59.290 --> 21:59.930
是还在的

21:59.930 --> 22:01.050
说明没有刷新

22:01.050 --> 22:02.090
然后在到这边来

22:02.090 --> 22:02.570
你看一下

22:02.570 --> 22:02.890
这边

22:03.530 --> 22:04.490
style元素

22:04.490 --> 22:05.770
所以变成了这个东西了

22:05.770 --> 22:06.010
对吧

22:06.010 --> 22:06.570
不知道

22:06.570 --> 22:06.890
为什么呢

22:06.890 --> 22:07.610
它替换掉了

22:07.610 --> 22:08.090
对吧

22:08.090 --> 22:08.890
因为它这个代码

22:08.890 --> 22:09.690
就是这个代码啊

22:10.250 --> 22:11.450
就是那个

22:11.450 --> 22:13.690
style loader那个代码重新运行的一次

22:13.690 --> 22:14.410
重新运行的意思

22:14.410 --> 22:15.690
它自然就替换掉了

22:15.690 --> 22:16.650
啊自然就替换掉了

22:17.770 --> 22:20.330
那么这就是它的整个存获程

22:20.330 --> 22:21.370
那么至于它为什么

22:21.370 --> 22:21.930
我再问一下

22:21.930 --> 22:22.970
它为什么会重新运行

22:22.970 --> 22:23.770
style loader的代码

22:23.770 --> 22:24.730
为什么会重新运行

22:25.930 --> 22:27.770
因为入口文件模块依赖它啊

22:28.410 --> 22:29.370
依赖它啊

22:29.370 --> 22:29.690
对吧

22:29.690 --> 22:30.250
这个代码

22:30.250 --> 22:31.290
这个代码会不会

22:31.290 --> 22:32.490
不就是会被那个

22:32.490 --> 22:34.090
style loader转换成介式代码吧

22:34.090 --> 22:34.570
对吧

22:34.570 --> 22:35.770
那么既然依赖它

22:35.770 --> 22:36.730
运行入口文件

22:36.730 --> 22:37.290
是不是就

22:37.290 --> 22:38.650
相当于是运行到它了

22:38.650 --> 22:39.290
对不对

22:39.290 --> 22:40.010
就这么回事

22:40.730 --> 22:41.690
没有什么复杂的

22:41.690 --> 22:43.610
其实就是重新把入口文件运行

22:43.610 --> 22:44.570
变就完事了

22:44.570 --> 22:44.890
OK

22:44.890 --> 22:45.690
这就是关于

22:46.330 --> 22:47.370
热更新这一块

22:47.370 --> 22:49.050
它会大幅度提高

22:49.050 --> 22:50.570
我们的开发效率

22:51.450 --> 22:51.850
好

22:51.850 --> 22:52.810
那是热更新

