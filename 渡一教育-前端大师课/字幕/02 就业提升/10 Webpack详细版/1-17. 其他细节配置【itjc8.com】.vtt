WEBVTT

00:00.880 --> 00:04.280
这一课咱们把第一章就收尾了

00:04.680 --> 00:08.280
补充一下WePAC里边还有一些拿些其他配置

00:09.080 --> 00:12.680
这一章 这一节课咱们是属于什么呢

00:12.880 --> 00:16.280
属于细致末节的知识

00:16.480 --> 00:17.880
细致末节

00:19.280 --> 00:21.880
那么你们在学习的过程中

00:22.480 --> 00:25.480
应该会经常看到这种细致末节的知识

00:25.880 --> 00:29.080
那么对于这种细致末节的东西呢

00:29.680 --> 00:31.080
我们要怎么来学习它呢

00:31.880 --> 00:32.480
第一个呢

00:33.080 --> 00:35.480
得知道它能干什么

00:36.080 --> 00:39.980
这是我们要学会的

00:40.380 --> 00:41.780
你要知道它能干什么

00:42.380 --> 00:45.180
那么至于它怎么干

00:45.980 --> 00:46.980
怎么做的

00:48.580 --> 00:49.580
忘了就忘了

00:50.180 --> 00:50.780
无所谓

00:50.980 --> 00:52.980
可能你这节课听完了也就忘了

00:53.180 --> 00:53.780
没关系

00:54.180 --> 00:55.980
你只要能知道它干什么就行了

00:56.580 --> 00:58.180
因为你知道它干什么过后呢

00:58.180 --> 01:00.980
将来你在遇到这些场景的时候

01:00.980 --> 01:02.180
你就会想到

01:02.780 --> 01:06.180
我之前还做了这么一件事

01:06.980 --> 01:08.380
它能够解决这样的问题

01:08.980 --> 01:12.180
你再去查文档或者回过头来翻视频

01:12.380 --> 01:13.980
来发现原来是这么做的

01:13.980 --> 01:14.980
然后再把解决

01:15.780 --> 01:21.580
所以我常说我们学知识要抓大举放细节

01:21.980 --> 01:23.780
它不是说细节不重要

01:24.180 --> 01:25.980
细节重要的是什么时候重要呢

01:25.980 --> 01:27.980
在我具体去做它的时候重要

01:28.780 --> 01:31.180
我具体用它的时候就比较细节很重要

01:31.780 --> 01:33.580
但是我没有用它的时候

01:33.980 --> 01:35.380
它细节一点都不重要

01:35.380 --> 01:36.780
我全部忘完都没关系

01:36.980 --> 01:40.180
但是我脑袋里边只要知道它有这么一个东西

01:40.180 --> 01:41.980
它能够解决什么样的问题就够了

01:41.980 --> 01:43.580
当我遇到了类似的问题的时候

01:43.580 --> 01:45.380
我需要用它来解决的时候

01:45.380 --> 01:47.380
我再去研究它的细节

01:47.580 --> 01:49.980
就我们这样子来看待知识的话

01:49.980 --> 01:52.380
其实你脑袋里边就不会装那么多的东西了

01:53.980 --> 01:54.780
一个同学说

01:55.380 --> 01:57.380
咱们学的东西马上又忘了

01:57.380 --> 01:58.380
像这些课一看

01:58.580 --> 02:00.380
我讲完了过分的马上就忘了差不多了

02:00.580 --> 02:02.180
那学这些课有啥意义呢

02:02.580 --> 02:04.580
这就好比以前有人说

02:05.180 --> 02:06.780
我们看了这么多书

02:06.780 --> 02:08.180
学了从小到大

02:08.380 --> 02:11.180
从小学开始学了这么多的知识

02:11.580 --> 02:13.180
那么看这些书学这些知识

02:13.180 --> 02:14.580
我现在都忘干净了

02:14.780 --> 02:15.780
有什么意义呢

02:15.980 --> 02:17.180
是不是浪费时间呢

02:18.780 --> 02:20.580
我举这么一个例子

02:21.180 --> 02:23.980
你看书就好比是你吃饭

02:24.580 --> 02:26.380
你十年前吃的饭

02:26.780 --> 02:27.980
现在还在吗

02:28.380 --> 02:29.580
是不是早就不在了

02:29.780 --> 02:31.980
那么你十年前吃的饭有意义吗

02:32.580 --> 02:33.580
是不是有意义的

02:33.580 --> 02:34.580
它变成了什么了

02:34.580 --> 02:36.380
变成了你的骨骼

02:36.380 --> 02:37.780
变成了你的肌肉

02:37.780 --> 02:40.180
变成你身体里边的细胞

02:40.580 --> 02:42.180
它已经融入到你身体了

02:42.380 --> 02:43.980
就像我们学技术也是一样

02:43.980 --> 02:44.580
很多技术呢

02:44.580 --> 02:46.980
你像让我回忆我看到哪些东西

02:47.180 --> 02:48.780
我都不知道我看到哪些东西

02:48.980 --> 02:49.780
但是那些东西呢

02:49.780 --> 02:51.780
都已经形成我的记忆

02:51.780 --> 02:53.380
形成我的开发习惯

02:53.980 --> 02:55.980
甚至有一部分形成我的性格

02:56.580 --> 02:58.580
这就是学习的意义所在

02:58.580 --> 02:59.780
他忘了不要紧

02:59.980 --> 03:00.580
经常忘

03:00.580 --> 03:02.980
但是你学没和没有学过

03:02.980 --> 03:03.980
是完全两把事

03:05.180 --> 03:06.780
所以我们这几课东西比较多

03:06.780 --> 03:07.980
时间会比较长

03:08.180 --> 03:08.980
但是没关系

03:08.980 --> 03:09.780
大家听一听

03:10.180 --> 03:10.580
听一听

03:10.580 --> 03:11.980
然后不仅要听一听

03:11.980 --> 03:13.580
还要下来去练一练

03:13.980 --> 03:15.180
那不是说不重要吗

03:15.180 --> 03:15.980
细致目的不重要吗

03:15.980 --> 03:17.180
但是你不练的话

03:17.180 --> 03:18.780
你对它就毫无印象

03:18.780 --> 03:20.780
你连知道它干什么你都不知道

03:20.780 --> 03:21.980
连第一点都做不到

03:21.980 --> 03:23.180
所以还得去练一下

03:23.580 --> 03:25.180
练一下过后以后就不用管了

03:25.580 --> 03:26.380
因为品身的开发

03:26.380 --> 03:27.380
我们也不太常用

03:27.580 --> 03:29.180
但是你心里边就有这么个印象

03:29.180 --> 03:30.980
这些东西能够解决什么样的问题

03:30.980 --> 03:32.180
我们以后遇到类似的问题

03:32.180 --> 03:34.380
我再去研究它怎么去做

03:36.580 --> 03:37.580
再给他举个例子

03:37.780 --> 03:38.980
就好必说

03:39.980 --> 03:42.020
我有好长好长时间没有做过

03:42.020 --> 03:42.780
五幼开发了

03:43.580 --> 03:44.380
前两天

03:44.580 --> 03:47.780
前两天我要讲那个五幼的直播课

03:47.980 --> 03:50.380
然后我赶快去用五幼做了一个东西

03:50.380 --> 03:51.580
有些APS被忘了

03:51.980 --> 03:52.780
肯定忘了

03:52.780 --> 03:54.580
但是五幼的整体的原理

03:54.580 --> 03:55.780
我是清清楚楚记得了

03:56.180 --> 03:57.580
只不过有些APS还忘了

03:57.580 --> 03:58.780
APS忘了我去查一下

03:58.780 --> 04:01.180
甚至连一些常见的指定我都忘了

04:01.180 --> 04:01.680
没关系

04:01.680 --> 04:02.780
这些都是小问题

04:02.780 --> 04:03.980
查一下就回来了

04:04.580 --> 04:06.980
所以说你关键是你要知道它能干什么

04:08.780 --> 04:09.980
那么最后咱们开始

04:10.580 --> 04:13.580
WePAC里边其实还有很多很多的配置

04:13.580 --> 04:18.180
那么这些配置都解决在打包构建的过程中

04:18.780 --> 04:20.180
就是我们再看一下

04:20.580 --> 04:21.780
心里边要有这张图

04:21.780 --> 04:22.580
心里边

04:22.580 --> 04:24.980
就是把我们的元代码打包成最终结果

04:24.980 --> 04:26.180
就是这个WePAC干的事

04:26.980 --> 04:28.580
它来解决在打包过程中

04:28.780 --> 04:31.780
它遇到了一些某一些方面的问题

04:31.780 --> 04:33.580
每一个配置解决一些方面

04:34.580 --> 04:35.380
当然有这样问题

04:35.380 --> 04:35.980
我用它

04:35.980 --> 04:36.580
没这样的问题

04:36.580 --> 04:37.180
我不用它

04:37.380 --> 04:38.580
不要弄每一个个来看吧

04:38.980 --> 04:39.580
context

04:40.380 --> 04:40.780
叫什么

04:40.780 --> 04:41.580
叫上下文

04:42.980 --> 04:43.780
它什么意思呢

04:43.980 --> 04:45.480
它要配置一个决定路径

04:45.480 --> 04:46.380
你看这样的写法

04:46.380 --> 04:47.380
是不是决定路径

04:47.580 --> 04:48.180
是不是写过了

04:48.980 --> 04:49.980
忘了没关系

04:49.980 --> 04:51.180
但是我现在提醒你那里是不是

04:52.180 --> 04:53.380
只要你自己写过这样的代码

04:53.380 --> 04:54.780
是不是就应该有这样的印象

04:54.780 --> 04:56.380
好像是那次写过的

04:56.780 --> 04:57.780
在得到一个什么

04:57.780 --> 04:58.780
得到一个决定路径

04:59.380 --> 05:00.180
根据当前目录

05:00.180 --> 05:01.380
还有一个就是

05:01.980 --> 05:04.380
根据多段制服创来得到一个决定路径

05:04.380 --> 05:05.780
总之给它配置一个决定路径

05:06.280 --> 05:07.580
那么配置了有什么用呢

05:07.780 --> 05:11.380
它会影响入口和loaders的解析

05:12.480 --> 05:13.380
就说我们什么意思

05:13.580 --> 05:13.980
就看这

05:15.580 --> 05:17.580
比方说我们平时写的這個 entry

05:17.580 --> 05:19.180
我们这里写个index的揭示

05:22.260 --> 05:24.260
咱们写这个entry

05:25.260 --> 05:27.060
entry里边我们是不是有

05:27.260 --> 05:28.660
可能会给它配置一个路径

05:28.660 --> 05:29.060
对吧

05:29.060 --> 05:30.060
一个入口文件

05:30.060 --> 05:33.260
我们怎么写的src index的揭示

05:33.260 --> 05:34.260
是不是个相对路径

05:35.260 --> 05:36.260
那么相对于谁的

05:36.260 --> 05:37.660
默认情况下

05:38.260 --> 05:39.060
相对于谁的

05:39.260 --> 05:41.260
相对于的是你的

05:41.260 --> 05:42.660
当前就是这个

05:43.660 --> 05:44.260
应该怎么说

05:44.260 --> 05:45.660
应该叫做cwd

05:46.060 --> 05:46.860
cwd

05:46.860 --> 05:48.060
什么叫cwd

05:48.460 --> 05:50.860
cwd叫做当前执行路径

05:50.860 --> 05:52.460
什么叫做当前执行路径

05:52.660 --> 05:53.260
你看着

05:54.460 --> 05:56.260
什么到底叫做当前执行路径

05:59.900 --> 06:00.500
OK

06:00.700 --> 06:02.100
那么当前执行路径是什么

06:02.500 --> 06:02.900
就这个

06:04.100 --> 06:04.700
就是这个路径

06:05.700 --> 06:08.500
这就是你的命令行提示的路径

06:08.500 --> 06:09.900
就是你当前执行路径

06:10.300 --> 06:11.300
那么它是相对于谁的

06:11.300 --> 06:13.900
相对于当前执行路径下的

06:13.900 --> 06:16.300
src index的揭示

06:16.700 --> 06:17.300
明白这个意思吗

06:17.300 --> 06:18.100
这是entry

06:19.700 --> 06:21.900
那么如果说你的执行命令

06:22.500 --> 06:23.500
执行命令不在这

06:23.700 --> 06:24.700
换了一个地方

06:24.700 --> 06:25.700
那么可能

06:25.700 --> 06:27.300
那么这个路径就不太正确了

06:28.100 --> 06:30.100
或者说我有的时候写这个单码

06:30.300 --> 06:32.100
每一次都要叼鞋杠 src开头

06:32.300 --> 06:32.900
我觉得

06:33.300 --> 06:34.000
写得挺麻烦

06:34.000 --> 06:34.900
标准入口很多

06:35.700 --> 06:36.300
入口很多

06:36.700 --> 06:38.300
有一个index这个入口

06:38.700 --> 06:41.100
它是叼鞋杠 src index的揭示

06:41.100 --> 06:41.400
对吧

06:41.500 --> 06:42.500
可能还有一些别的入口

06:43.500 --> 06:44.300
叼 src

06:44.300 --> 06:45.100
叼点揭示

06:45.500 --> 06:46.500
那我们来写一下吧

06:46.800 --> 06:49.100
那么可能如果说我们的就是入口很多

06:49.100 --> 06:49.800
也就是我们的

06:50.800 --> 06:52.000
trunk很多

06:52.200 --> 06:52.800
那么这样子

06:52.800 --> 06:53.400
每次写了

06:53.400 --> 06:54.800
稍微有点麻烦一点

06:55.000 --> 06:55.800
那么这个时候

06:55.800 --> 06:57.800
我们就可以利用context这个配置

06:58.200 --> 06:59.000
context的配置

06:59.000 --> 07:01.000
就是配置的是入口

07:02.000 --> 07:03.500
它是一个相对路径

07:03.500 --> 07:05.000
那么它相对于哪个路径

07:05.000 --> 07:06.400
默认情况下相对于这个

07:07.200 --> 07:09.300
那么你如果你写了context的配置的话

07:09.300 --> 07:11.600
那么就相对于的是context的配置

07:11.600 --> 07:12.600
所以就这么个意思

07:12.600 --> 07:13.600
也有意思吗

07:14.400 --> 07:15.100
那么比方说

07:15.100 --> 07:16.000
我们这里pass

07:16.000 --> 07:16.800
来一个吧

07:16.800 --> 07:17.200
require

07:17.200 --> 07:18.400
我们因为我们要得到一个

07:20.000 --> 07:20.900
得到一个决定路径

07:20.900 --> 07:22.100
我们用pass result

07:22.600 --> 07:24.100
那么我们比方说我们就这样写

07:25.000 --> 07:25.700
当前目录

07:26.300 --> 07:27.200
这个gs

07:27.600 --> 07:28.800
这个dr那没什么意思

07:28.800 --> 07:29.400
就是gs

07:29.400 --> 07:31.000
就目前运行的这个gs

07:31.200 --> 07:32.800
它的当前所在的路径

07:33.200 --> 07:33.700
ok

07:33.800 --> 07:34.600
然后呢

07:35.400 --> 07:36.700
后面跟上一个src

07:36.900 --> 07:38.000
那么这样子一来的话

07:38.000 --> 07:40.500
我们context是不是就是这个目录了

07:42.000 --> 07:43.800
是不是就这个src目录了

07:44.400 --> 07:44.800
对吧

07:44.800 --> 07:46.400
那么我们之后配置入口的话

07:46.400 --> 07:47.900
很直接相对于这个目录

07:48.400 --> 07:48.700
好

07:48.700 --> 07:49.600
那么现在我们来看一下

07:49.700 --> 07:50.800
如果说我现在打包

07:51.300 --> 07:52.100
nps

07:52.900 --> 07:54.100
nps vpeg

07:54.600 --> 07:55.600
看一下能不能打包

07:57.800 --> 07:58.400
打包不了

07:58.500 --> 07:59.000
打包不了

07:59.000 --> 07:59.600
他说什么

07:59.800 --> 08:01.100
他找不到

08:01.600 --> 08:03.200
找不到这个a.js

08:03.200 --> 08:04.200
a.js没写

08:04.200 --> 08:05.000
写到的

08:05.000 --> 08:05.900
找不到a.js

08:05.900 --> 08:07.300
找不到index的js

08:07.300 --> 08:07.900
为什么呢

08:07.900 --> 08:09.800
因为他目前的相对路径是这个

08:09.800 --> 08:10.400
src

08:10.400 --> 08:12.200
他会从这个路径下面去找

08:12.600 --> 08:13.200
找什么呢

08:13.200 --> 08:14.700
src下面的

08:15.400 --> 08:16.600
index.js

08:16.600 --> 08:17.300
他会去找这个

08:17.300 --> 08:18.500
那有没有肯定没有

08:18.500 --> 08:18.900
对吧

08:19.500 --> 08:21.000
他去找src下面的

08:22.000 --> 08:23.300
index.js

08:23.300 --> 08:25.100
他去找这个东西肯定是没有的

08:25.100 --> 08:25.700
所以说呢

08:25.700 --> 08:27.900
我们有了这样的一个context之后呢

08:27.900 --> 08:29.500
我们在这里就可以直接这样子写

08:30.100 --> 08:31.400
不用写src

08:31.700 --> 08:33.100
context就是src

08:33.100 --> 08:33.900
就这么个意思

08:35.900 --> 08:36.300
看一下

08:37.700 --> 08:39.100
你看现在可以打包完成了

08:39.700 --> 08:40.900
就这么个意思

08:41.100 --> 08:41.900
非常简单

08:42.600 --> 08:43.500
就是context

08:43.500 --> 08:45.500
那么他不仅是影响入口

08:45.500 --> 08:46.600
还可以影响啥呢

08:46.600 --> 08:47.900
还可以影响loaders

08:48.500 --> 08:49.900
loaders也会说他影响

08:49.900 --> 08:51.200
因为我们知道loaders

08:51.200 --> 08:52.700
你看我们之前写loaders的时候

08:52.900 --> 08:53.800
loaders的时候呢

08:53.800 --> 08:54.800
他这个规则

08:54.800 --> 08:56.400
这里边是不是也是相对路径

08:56.600 --> 08:57.000
对吧

08:57.200 --> 08:58.300
那么这个相对路径呢

08:58.300 --> 09:00.200
他也是相对于谁

09:00.500 --> 09:01.500
相对于

09:01.700 --> 09:02.200
这个

09:02.900 --> 09:03.600
context

09:03.800 --> 09:04.700
如果说你没配置的话

09:04.700 --> 09:06.700
就相对于cwd

09:07.500 --> 09:08.900
那么这样子配置有什么好处呢

09:09.200 --> 09:11.000
也没啥实际的意义

09:11.400 --> 09:14.200
除了让你少写一点路径

09:14.600 --> 09:15.200
之外呢

09:15.500 --> 09:16.600
他那个张里的配置呢

09:16.600 --> 09:17.700
可以独立于

09:18.700 --> 09:19.300
就是

09:19.600 --> 09:21.000
当前工作目录

09:21.000 --> 09:22.400
当前执行路径

09:22.900 --> 09:24.700
就说他跟这个东西就没关系了

09:24.800 --> 09:26.000
跟这个东西没关系了

09:26.200 --> 09:27.300
就其中一个作用

09:28.300 --> 09:28.800
ok

09:28.900 --> 09:29.800
这是关于

09:30.100 --> 09:31.500
这个context

09:31.500 --> 09:32.600
了解就行了

09:32.700 --> 09:33.400
了解就行了

09:33.900 --> 09:35.500
以后呢遇到这个情况呢

09:35.500 --> 09:36.500
遇到什么比较重

09:36.500 --> 09:37.200
我要

09:37.700 --> 09:38.400
少写些路径

09:38.400 --> 09:39.500
我不想写那么麻烦

09:39.500 --> 09:41.200
那么你就可以利用这个context

09:42.300 --> 09:42.700
ok

09:43.000 --> 09:44.200
那么他这个东西跟那个

09:44.200 --> 09:45.700
他里边的代码有没有关系

09:45.700 --> 09:47.200
跟这里边的代码有没有关系

09:47.300 --> 09:48.300
没有任何关系

09:48.300 --> 09:49.900
跟这里边的代码没有任何关系

09:50.300 --> 09:52.600
他只是他只是来搞定这个入口

09:52.600 --> 09:53.800
和loader时的路

09:54.400 --> 09:55.400
配置的时候路径

09:56.100 --> 09:57.500
他会影响他的路径的书写

09:58.400 --> 09:59.300
好下面那个啊

10:00.200 --> 10:02.600
output是关于这个出口的配置

10:02.600 --> 10:03.700
我们之前讲过出口

10:03.700 --> 10:05.000
对吧讲过两个属相

10:05.100 --> 10:05.800
还记得吗

10:06.200 --> 10:07.000
都去掉了啊

10:08.300 --> 10:09.000
去掉

10:09.600 --> 10:10.200
src

10:11.400 --> 10:12.600
这个先删掉

10:15.080 --> 10:16.280
对我们之前讲过出口

10:16.280 --> 10:16.880
output

10:16.980 --> 10:17.880
讲过哪两个属相

10:17.880 --> 10:18.780
一个是filing

10:19.480 --> 10:20.280
这是文件名

10:20.280 --> 10:20.680
对吧

10:20.980 --> 10:22.780
文件名里边是不是可以写规则

10:22.880 --> 10:23.380
对不对

10:23.680 --> 10:24.980
哈希等等

10:25.180 --> 10:25.980
第二节词

10:26.380 --> 10:27.480
还可以试什么呢

10:27.480 --> 10:28.680
还有一个什么pass

10:28.780 --> 10:29.080
对吧

10:29.080 --> 10:30.480
就是我们打包的目录

10:30.480 --> 10:31.580
他默认是电神目录

10:31.880 --> 10:33.080
这里要写写对度径

10:33.280 --> 10:34.780
这是我们之前学过的这两个

10:35.380 --> 10:36.280
好了还有什么呢

10:36.280 --> 10:38.280
output里边其实还有很多的配置

10:38.480 --> 10:38.980
这里呢

10:38.980 --> 10:40.280
咱们来说两个

10:40.680 --> 10:41.380
说两个

10:41.680 --> 10:42.980
第一个呢叫library

10:43.180 --> 10:43.980
这是啥意思呢

10:44.980 --> 10:45.880
library什么意思呢

10:46.180 --> 10:47.580
就表示的是一个工程

10:50.080 --> 10:51.780
那么这个库什么意思呢

10:51.780 --> 10:52.980
它配置为一个制服状

10:53.280 --> 10:54.880
比方说我们该配置为一个abc

10:54.880 --> 10:56.080
它会发生什么事呢

10:56.480 --> 10:57.280
library

10:59.200 --> 11:00.300
我们该配置一个abc

11:00.300 --> 11:01.700
你看看它会发生什么事

11:02.100 --> 11:03.300
看这里是什么描述的

11:03.600 --> 11:04.700
它说这样子一来了

11:04.700 --> 11:06.100
因为我们output里边

11:06.200 --> 11:08.200
你看我们是在output里边的配置啊

11:08.200 --> 11:09.800
你看output里边的library

11:09.800 --> 11:10.900
library target

11:11.100 --> 11:12.100
是在这里边的配置

11:12.100 --> 11:13.000
所以说我们配置在哪

11:13.000 --> 11:14.900
配置在output里边的library

11:15.200 --> 11:16.500
那么这个东西有什么意义呢

11:17.000 --> 11:19.500
因为output是影响输出的对吧

11:19.600 --> 11:21.000
影响输出的结果

11:21.800 --> 11:23.700
那么这样子一配置的之后呢

11:23.800 --> 11:26.500
它在最终的打包结果里边

11:27.100 --> 11:29.700
它就会把我们那个自执行函数的结果呢

11:29.800 --> 11:31.100
暴露给abc

11:31.300 --> 11:31.900
啥意思啊

11:31.900 --> 11:33.100
到底说啥意思

11:33.100 --> 11:34.800
我们来看一下运行下去明白了

11:36.810 --> 11:37.410
运行

11:37.810 --> 11:38.610
好你看着啊

11:38.810 --> 11:39.510
那么这里呢

11:39.710 --> 11:40.910
你看index了解识

11:41.710 --> 11:42.310
你看

11:42.910 --> 11:44.110
那么在这个解识里边

11:44.110 --> 11:45.410
你看它那个打包结果

11:45.410 --> 11:47.610
这是不是我们的之前的自执行函数

11:47.710 --> 11:48.110
对吧

11:48.310 --> 11:49.710
写一个立即执行函数

11:49.710 --> 11:49.910
对吧

11:49.910 --> 11:50.910
这个函数的参数

11:51.110 --> 11:52.410
参数里面就是每个模块嘛

11:52.410 --> 11:52.610
对吧

11:52.610 --> 11:53.310
每个模块的代码

11:53.310 --> 11:54.310
在代码没有

11:55.010 --> 11:57.310
那么把这个自执行函数的结果

11:58.310 --> 12:00.010
复制给了变量abc

12:00.010 --> 12:01.410
就相当于是写了个啥呢

12:01.410 --> 12:03.710
写了个abc等于一个方形

12:03.910 --> 12:05.410
然后呢执行这个函数

12:05.610 --> 12:06.310
方个形

12:06.510 --> 12:08.010
然后呢这个函数参数对吧

12:08.010 --> 12:09.210
参数传了一些

12:09.410 --> 12:10.610
然后呢这里接受参数

12:10.610 --> 12:11.510
这里里边呆吧

12:11.510 --> 12:13.410
总之把这个函数的执行结果

12:13.410 --> 12:14.610
是不是给这个abc了

12:15.210 --> 12:15.510
啊

12:15.810 --> 12:16.610
那么这样子进来

12:16.610 --> 12:17.810
是不是暴露了一些东西

12:17.810 --> 12:18.310
对吧

12:18.310 --> 12:18.810
暴露了什么

12:18.810 --> 12:20.210
暴露了一个变量abc

12:20.710 --> 12:21.810
它就起这么一个作用

12:22.110 --> 12:22.710
啊比方说

12:22.710 --> 12:25.210
你看那这个函数的执行结果是啥呢

12:25.210 --> 12:26.910
你看看这个函数执行结果是啥

12:28.010 --> 12:28.510
你看吧

12:28.910 --> 12:30.310
是不是就是一个require

12:30.610 --> 12:31.910
入口文件对不对

12:32.010 --> 12:33.710
入口文件是不是index的GS

12:33.910 --> 12:36.410
把这个入口的模块ID传进去

12:36.510 --> 12:37.710
去然后去运行什么

12:37.710 --> 12:38.910
运行我们之前说的那个

12:39.110 --> 12:40.410
webrequire这个函数

12:41.110 --> 12:42.310
那么就会执行这个

12:42.410 --> 12:43.910
执行它对应这个模块的代码

12:43.910 --> 12:44.710
执行哪个代码

12:44.810 --> 12:46.110
执行index里边的代码

12:46.110 --> 12:47.510
就执行这个模块的代码

12:47.610 --> 12:49.310
把这个代码的执行完了过后

12:49.310 --> 12:50.510
把它load

12:50.910 --> 12:53.910
就是把它的就是返回结果

12:54.410 --> 12:55.110
直接返回

12:55.810 --> 12:57.310
所以说我们这里得到的是什么

12:57.310 --> 12:58.410
这个abc得到的是什么

12:58.510 --> 12:59.910
那你告诉我abc得到的是什么

13:00.110 --> 13:02.610
abc得到了是不是自然是入口文件

13:02.610 --> 13:03.610
导出的结果

13:03.910 --> 13:04.310
对吧

13:04.910 --> 13:06.310
当你入口文件没有导出

13:06.610 --> 13:07.910
那又得到一个空对象

13:08.210 --> 13:10.010
如果说你入口文件导出了一个结果

13:10.010 --> 13:10.810
那我们来看一下

13:11.310 --> 13:12.010
index

13:12.510 --> 13:13.810
我们这里不要写个页面

13:14.510 --> 13:15.110
index

13:20.440 --> 13:21.040
那么这里

13:21.940 --> 13:22.440
页面

13:22.740 --> 13:23.240
运行

13:26.600 --> 13:27.300
这里刷新

13:27.900 --> 13:28.400
刷新

13:28.500 --> 13:30.200
那么现在我们来看一下abc

13:31.300 --> 13:32.300
怎么一个空对象

13:32.300 --> 13:33.400
没有重新打包

13:34.300 --> 13:34.900
重新打包

13:36.500 --> 13:38.000
刚才你看了abc是存在的

13:38.000 --> 13:38.400
对吧

13:38.800 --> 13:39.900
咱们来看一下abc

13:39.900 --> 13:40.700
是不是得到结果了

13:40.800 --> 13:41.200
对吧

13:41.500 --> 13:42.100
因为什么

13:42.100 --> 13:43.300
因为它这里这个结实

13:43.300 --> 13:44.600
是不是污染了一个权具变量

13:44.600 --> 13:45.700
提供了一个权具变量

13:46.200 --> 13:47.200
然后这个权具变量

13:47.200 --> 13:49.000
我们就可以在空置台里面调试了

13:49.700 --> 13:51.100
就起这么一个目的

13:51.800 --> 13:53.700
那么这个东西有什么意义呢

13:54.500 --> 13:55.700
通常情况下

13:55.700 --> 13:57.000
在我们的平时开发中

13:57.000 --> 13:57.700
没啥意义

13:58.000 --> 13:58.600
没啥意义

13:58.900 --> 14:00.700
但是有些情况下有意义

14:00.800 --> 14:01.700
第一种情况呢

14:01.800 --> 14:04.700
是要要跟一些插件来联用的时候

14:04.700 --> 14:05.600
有些插件呢

14:05.600 --> 14:07.100
他可能需要你这么去做

14:07.700 --> 14:08.200
以后呢

14:08.200 --> 14:09.400
我们会讲到这样的插件

14:09.900 --> 14:10.500
有些插件呢

14:10.500 --> 14:11.800
他会需要你

14:12.500 --> 14:13.800
就是暴露把我们的

14:13.800 --> 14:15.200
把我们的打包结果呢

14:15.200 --> 14:17.000
暴露到一个变量里边去

14:17.300 --> 14:18.900
他可能会需要你这么去做

14:19.400 --> 14:20.700
另外一个情况呢

14:20.700 --> 14:21.300
就是说

14:21.400 --> 14:23.100
我们写的不是一个

14:24.400 --> 14:24.900
工程

14:24.900 --> 14:27.100
我们希望的写到是一个库

14:27.700 --> 14:28.500
就好必说

14:29.000 --> 14:30.000
写到一个接框类

14:30.700 --> 14:32.000
接框类打包出来的

14:32.000 --> 14:33.400
是不是一个单个文件啊

14:33.800 --> 14:34.800
那单个文件是不是

14:34.800 --> 14:36.500
暴露了一个权具变量

14:36.500 --> 14:37.100
多了

14:37.200 --> 14:37.700
对吧

14:38.200 --> 14:38.900
那如果说

14:38.900 --> 14:41.800
我们也希望形成这样的一个介石啊

14:41.800 --> 14:43.700
就是我们打包的结果一个介石

14:43.900 --> 14:44.700
希望这个介石呢

14:44.700 --> 14:47.700
能够让别人用传统的模式来引用

14:47.900 --> 14:48.500
就是一面上

14:48.500 --> 14:50.200
哎我把这个介石放到网上去

14:50.300 --> 14:51.700
啊放到一些论坛那边去

14:52.000 --> 14:53.700
那我告诉他们怎么来用呢

14:53.700 --> 14:55.500
直接在页面上引用这个介石就完了

14:55.500 --> 14:57.200
那么他就会暴露一个权具变量

14:57.300 --> 14:59.300
那么你可以使用这个权具变量去干一些事

14:59.500 --> 14:59.900
对吧

14:59.900 --> 15:01.500
我可能会需要做这么一些事

15:01.600 --> 15:02.900
那么这个时候呢就有用了

15:03.100 --> 15:04.900
我就可以写在元代码里边

15:05.100 --> 15:06.500
分成各种模块来写对吧

15:06.500 --> 15:08.900
写完了过后在入口模块里边暴露一个

15:08.900 --> 15:10.900
需要暴露给权具的东西

15:11.300 --> 15:13.000
啊我在这里去暴露一个需要

15:13.000 --> 15:14.200
比如说暴露一个函数

15:14.600 --> 15:17.100
啊比方说我们暴露一个函数print

15:18.700 --> 15:19.400
啊print

15:19.800 --> 15:21.000
ok我们这里输出

15:22.000 --> 15:22.800
啊print

15:22.900 --> 15:24.800
啊就输出这么比方暴露一个函数

15:25.500 --> 15:26.400
好暴露那么

15:26.700 --> 15:28.500
如何来暴露这个函数盘数里面功能是什么

15:28.500 --> 15:30.200
我们可能要用到其他模块无所谓

15:30.300 --> 15:31.100
就当你打包

15:31.300 --> 15:33.000
一打包的话那么是不是就

15:33.400 --> 15:35.800
影响就给他提供了一个权具变量abc

15:35.900 --> 15:38.000
那么这个abc是不是就是我们想要的这个函数

15:38.200 --> 15:38.600
对吧

15:38.700 --> 15:39.800
那么这里呢我就可以你看

15:39.800 --> 15:41.000
我就可以通过abc

15:41.300 --> 15:42.300
是不是找了这个函数

15:42.300 --> 15:42.700
对吧

15:43.200 --> 15:44.400
那么其他的模块啊

15:44.400 --> 15:46.800
就是我们用传统的方式来进行开发的话

15:46.800 --> 15:48.900
他只要把我们给他的介石引用

15:48.900 --> 15:50.200
哎就有个权具变量了

15:50.200 --> 15:52.700
我们就可以使用权具变量来做一些别的事情

15:52.800 --> 15:54.700
然后这里我们也可以使用权具变量

15:54.700 --> 15:55.800
去做一些别的事情

15:55.800 --> 15:56.100
对吧

15:56.100 --> 15:58.300
这不是传统开发的时候要做的事吗

15:58.500 --> 15:59.900
结块不就这样干的吗

16:00.100 --> 16:01.200
结块就是打包

16:01.300 --> 16:03.100
他其实有很多代码结块

16:03.200 --> 16:05.400
只要他打包打包打包打包完了过后

16:05.400 --> 16:06.600
就形成一个文件了

16:07.400 --> 16:09.000
那么形成一个文件之后

16:09.000 --> 16:10.100
他给你暴露一个权具变量

16:10.100 --> 16:10.900
你去引用你他

16:10.900 --> 16:12.900
那么你就比方说这里引用的是结块

16:13.200 --> 16:15.700
啊那么你是不是就可以使用权具变量多了

16:15.700 --> 16:16.100
对吧

16:16.500 --> 16:17.700
啊就这么个意思啊

16:18.800 --> 16:20.500
啊就在这个时候呢有点拥有

16:20.800 --> 16:23.100
那麽如果说你不遇到这种情况

16:23.100 --> 16:24.300
就啥用了他就没啥用了

16:24.600 --> 16:25.500
除非呢以后呢

16:25.500 --> 16:27.300
我们学到一些插件要跟他联动

16:28.000 --> 16:29.000
好另外一个呢

16:29.100 --> 16:30.500
叫nibbary target

16:30.800 --> 16:31.500
他这个东西呢

16:31.500 --> 16:33.400
一般跟他是在联用的啊

16:33.400 --> 16:34.900
跟他联用才有意义

16:35.300 --> 16:36.500
那么这个东西是什么呢

16:36.500 --> 16:38.600
这个玩意是在暴露暴露一个东西

16:38.600 --> 16:40.100
这个东西的名称对吧

16:40.800 --> 16:42.500
那么这个玩意他就是控制

16:42.500 --> 16:43.700
怎麽来暴露

16:44.100 --> 16:45.300
怎麽来暴露他

16:45.400 --> 16:46.800
暴露这个权具的东西

16:47.300 --> 16:48.900
啊默认情况下的是这个

16:48.900 --> 16:50.800
Var就是我们目前的这种情况

16:51.000 --> 16:52.700
啊就是打包完了过后

16:52.700 --> 16:53.600
怎麽来暴露他呢

16:53.600 --> 16:54.700
暴露的就是一个变量

16:54.700 --> 16:56.000
用Var来定一个变量

16:56.300 --> 16:57.000
还有没有别的呢

16:57.000 --> 16:57.900
有啊window

16:58.300 --> 16:59.000
你看一下window

16:59.000 --> 16:59.800
他就怎麽回事

16:59.800 --> 17:00.900
我们把它改成window

17:01.300 --> 17:03.900
啊给他设置一下nibbary

17:05.100 --> 17:05.900
target

17:06.100 --> 17:07.000
什麽window

17:07.800 --> 17:08.800
那你看一下吧

17:11.640 --> 17:12.540
好ok

17:12.740 --> 17:14.340
那是不是暴露给window

17:14.340 --> 17:15.040
这个东西的

17:15.140 --> 17:15.640
对吧

17:16.440 --> 17:17.940
好再来啊再来

17:18.140 --> 17:20.340
呃然后呢我们可以使用this

17:21.340 --> 17:22.140
你看打包

17:25.540 --> 17:26.540
他就暴露给this了

17:26.540 --> 17:27.040
对吧

17:27.040 --> 17:28.340
那就看你怎麽去想啊

17:28.340 --> 17:29.440
看你该用什麽

17:29.540 --> 17:30.840
就是你想用什麽用什麽啊

17:30.840 --> 17:32.440
一般我们就保持默认值游行的

17:32.440 --> 17:33.240
还有global

17:33.940 --> 17:34.740
暴露给global

17:34.740 --> 17:35.940
比方说我们的介石

17:35.940 --> 17:37.140
不是在有浏览器那边运行的

17:37.140 --> 17:38.540
是在漏着环境那边运行的啊

17:38.540 --> 17:40.440
那麽我没如果要暴露一些东西的话

17:40.440 --> 17:41.740
那麽是不是可以用global

17:41.740 --> 17:43.240
啊给他听得到权具里边

17:43.540 --> 17:44.140
啊你看

17:44.540 --> 17:44.840
哎

17:45.740 --> 17:46.140
哎

17:46.540 --> 17:47.040
搞笑

17:48.040 --> 17:48.740
重新来啊

17:52.240 --> 17:52.940
global

17:53.340 --> 17:53.840
运行

17:55.720 --> 17:56.220
哎

17:56.720 --> 17:57.920
哎还是window是吧

17:58.320 --> 17:59.220
还是window

17:59.720 --> 18:00.920
哎这个地方我看一下吧

18:00.920 --> 18:01.320
我看一下

18:01.320 --> 18:02.920
还有一些其他配置啊

18:02.920 --> 18:03.720
还有一些其他配置

18:03.720 --> 18:04.420
我看一下吧

18:04.720 --> 18:05.420
这个配置

18:05.720 --> 18:07.020
呃叫做

18:08.220 --> 18:09.620
这就是细节了啊

18:09.820 --> 18:10.820
target

18:11.120 --> 18:12.020
tarket

18:12.020 --> 18:12.720
我看一下

18:13.620 --> 18:15.720
暴露global

18:15.720 --> 18:17.220
啊我记得是一个global

18:18.720 --> 18:19.220
啊

18:19.820 --> 18:22.220
经营的是分配给global对象的

18:22.520 --> 18:23.320
这个属性下

18:23.320 --> 18:24.320
啊那这个东西

18:24.420 --> 18:24.920
跟

18:25.320 --> 18:26.820
跟那个他的他的

18:27.220 --> 18:28.820
他的说法就不太一样了啊

18:29.020 --> 18:31.120
那这个地方跟他的说法就不太一样了

18:31.220 --> 18:33.020
因为我们这里写的是global啊

18:33.120 --> 18:35.320
他的文档里边说的是啊global

18:35.320 --> 18:37.020
他是会暴露给global

18:37.120 --> 18:39.020
但是呢实际上还是暴露给window的

18:39.020 --> 18:41.320
啊那这个地方呢跟他说的不一样啊

18:41.320 --> 18:41.820
不一样

18:42.220 --> 18:42.920
啊不管他吧

18:42.920 --> 18:44.120
不管他吧这些细节啊

18:44.120 --> 18:45.020
我没有去再

18:45.120 --> 18:46.220
再往细了研究了

18:46.320 --> 18:48.020
然后我看一下就行了啊

18:48.220 --> 18:49.220
nabry target

18:49.220 --> 18:49.820
这是什麽呢

18:49.820 --> 18:51.220
这个时候common.js

18:51.820 --> 18:52.220
啊

18:52.920 --> 18:53.420
什麽意思呢

18:53.420 --> 18:54.120
我来看一下

18:54.120 --> 18:55.320
这样打包结果是什麽

18:56.220 --> 18:57.220
这样打包结果呢

18:57.220 --> 18:58.320
他就暴露的方式呢

18:58.320 --> 18:59.420
就不是一个编辑了啊

18:59.420 --> 19:01.020
他是用common.js这样的语法

19:01.020 --> 19:02.020
来进行暴露的

19:02.020 --> 19:04.020
那是不是相当于是exports

19:04.020 --> 19:05.020
第二abc

19:05.020 --> 19:05.520
对吧

19:05.520 --> 19:06.720
相当于是这样的写法

19:06.820 --> 19:07.120
对不对

19:07.120 --> 19:08.320
他就用这种方式来暴露

19:08.520 --> 19:09.920
那就看你具体

19:10.220 --> 19:12.220
是希望他怎麽来暴露的东西

19:12.220 --> 19:13.220
啊通常情况下呢

19:13.220 --> 19:14.520
我们保持默认一个话

19:14.620 --> 19:16.020
暴露一个权局编辑就完事了

19:16.920 --> 19:17.920
ok 这是关于

19:18.020 --> 19:19.620
总之你知道有这麽回事就行了

19:19.920 --> 19:22.320
这这两个配置是不是都会影响什麽

19:22.520 --> 19:24.120
要把知识的边界搞清楚

19:24.120 --> 19:25.120
他的边界是什麽

19:25.420 --> 19:26.720
他是在处理什麽问题的

19:26.720 --> 19:28.320
他要处理如何来暴露东西的

19:28.520 --> 19:30.220
啊就是我们打包结果里边

19:30.220 --> 19:32.120
我们不是个字形寒树吗

19:32.120 --> 19:33.720
这个字形寒树里边

19:33.820 --> 19:35.720
啊这个字形寒树执行完了过后

19:36.320 --> 19:37.120
我要暴露

19:37.120 --> 19:39.520
把个执行结果暴露给哪个东西

19:39.720 --> 19:40.920
他是在处理这个玩意的

19:41.120 --> 19:42.020
如果说你以后呢

19:42.020 --> 19:44.220
希望在打包结果里面暴露一些东西

19:44.220 --> 19:45.720
那麽你可以在这里进行配置

19:46.520 --> 19:48.020
好这是关于这个output

19:49.620 --> 19:50.920
好接下来我们再来看啊

19:51.920 --> 19:52.720
下面

19:53.720 --> 19:54.520
target

19:55.220 --> 19:56.820
现在就不在这里放个范图了啊

19:56.820 --> 19:58.020
就不在output这个范图了

19:58.020 --> 19:59.120
是在target这个范图

19:59.120 --> 20:00.220
就独立到一个配置

20:00.620 --> 20:01.420
那么这个配置呢

20:01.420 --> 20:02.020
很多同学呢

20:02.020 --> 20:03.720
容易跟那个output里边什麽

20:03.720 --> 20:05.520
library library target

20:06.120 --> 20:07.120
搞混淆的啊

20:07.320 --> 20:09.320
其实呢是完全不一样的意思

20:09.620 --> 20:10.720
这个target是什麽

20:10.820 --> 20:13.820
指的是勾键的目标环境

20:14.220 --> 20:15.320
他默认只是web

20:15.420 --> 20:16.120
表示呢

20:16.220 --> 20:17.920
web环境就是浏览器环境

20:18.620 --> 20:19.820
那麽他还可以配置为什麽

20:19.820 --> 20:21.520
还可以配置为load的啊

20:22.020 --> 20:23.520
环境就是什麽意思呢

20:23.820 --> 20:25.120
你要告诉web hack

20:25.120 --> 20:27.420
我们最终打包好的这个文件

20:27.420 --> 20:29.620
他是要在什麽环境里边运行

20:29.720 --> 20:31.420
他是在web环境里边运行

20:31.420 --> 20:33.620
还是在load环境里边运行

20:34.120 --> 20:35.520
那有啥区别呢

20:35.620 --> 20:36.520
有啥区别呢

20:36.520 --> 20:37.220
你看着啊

20:37.220 --> 20:38.720
如果是web环境的话

20:38.720 --> 20:40.320
那麽这种问题他就处理不了

20:40.620 --> 20:41.220
什麽问题呢

20:41.220 --> 20:41.920
我们来看

20:42.620 --> 20:43.720
什麽问题他处理不了

20:44.320 --> 20:46.220
我们在index.js里边

20:46.320 --> 20:47.820
我们require一个

20:48.720 --> 20:49.820
require一个

20:50.220 --> 20:51.020
fs

20:51.720 --> 20:53.220
这是不是load环境里边的东西

20:53.820 --> 20:56.520
fs是不是load

20:56.720 --> 20:58.220
内置模块

20:58.420 --> 20:58.820
对吧

20:59.020 --> 21:01.120
是不是fs是load的内置模块

21:01.320 --> 21:02.420
那麽这个时候

21:02.620 --> 21:04.220
如果说你打包的环境

21:05.620 --> 21:06.620
就是默认值啊

21:06.620 --> 21:07.720
使用的是默认值

21:09.020 --> 21:09.520
web

21:10.020 --> 21:10.520
啊

21:11.220 --> 21:12.220
那麽这样子呢

21:12.320 --> 21:13.620
他不管你是什麽

21:13.920 --> 21:14.720
load环境

21:14.720 --> 21:15.820
他认为这里有一弹

21:15.920 --> 21:16.720
一弹哪里去找

21:16.720 --> 21:18.120
一弹load码就是里面去找

21:18.420 --> 21:18.720
对吧

21:18.720 --> 21:20.420
因为你这里不是用的相对路径啊

21:20.420 --> 21:21.420
因此他在哪里去找

21:21.520 --> 21:22.720
他在这里边去找fs

21:22.720 --> 21:23.320
找不到的到

21:23.320 --> 21:23.920
找不到找不到

21:23.920 --> 21:24.420
爆出

21:25.220 --> 21:25.820
你看吧

21:28.620 --> 21:29.720
你看他是不是要爆出

21:29.920 --> 21:30.720
arrow对吧

21:30.820 --> 21:31.420
他说什麽

21:31.620 --> 21:33.220
marge not found

21:33.420 --> 21:35.620
他无法解析fs模块

21:35.620 --> 21:36.420
他找不到啊

21:36.620 --> 21:38.020
因为他是load

21:38.020 --> 21:39.220
他不是load环境

21:39.220 --> 21:41.020
他认为我们最终的运行的是

21:41.320 --> 21:42.720
web流烂器环境

21:42.820 --> 21:45.320
因此他不会把这个东西当成load的内置模块

21:45.520 --> 21:47.320
他就是认为他你一带一个包

21:47.320 --> 21:48.620
那个包的名字叫做fs

21:48.620 --> 21:49.220
那就找呗

21:49.220 --> 21:50.420
找不到找不到就爆出了

21:51.620 --> 21:52.420
听懂这个意思吗

21:52.920 --> 21:54.320
所以说这个东西会影响啥

21:54.520 --> 21:55.920
会是不是会影响

21:56.520 --> 21:57.920
嗯这个talking是会影响啥

21:57.920 --> 22:00.420
会影响在模块一耐的时候的解析

22:00.420 --> 22:00.620
对吧

22:00.620 --> 22:01.920
他解析一耐的时候

22:02.420 --> 22:03.620
他怎麽来解析

22:04.420 --> 22:06.220
那麽如果说我把它变成load的

22:06.420 --> 22:08.120
表示我们最终的环境运行的环境

22:08.120 --> 22:09.720
也是不是在流烂器里面运行的

22:09.920 --> 22:11.020
不是在页面上运行的

22:11.020 --> 22:12.920
我们就是要在load的环境里面运行

22:13.020 --> 22:13.420
只不过呢

22:13.420 --> 22:14.920
通常情况下load的环境不需要旅行

22:14.920 --> 22:16.120
我也不派个打包啊

22:16.120 --> 22:17.120
如果说需要打包的话

22:17.120 --> 22:18.020
ok我们可以

22:19.020 --> 22:20.020
他也是支持的

22:21.720 --> 22:22.120
啊

22:23.420 --> 22:23.920
打包

22:23.920 --> 22:25.220
你看现在是不是没有错误了

22:25.420 --> 22:25.620
是吧

22:25.620 --> 22:26.620
现在就没有错误了

22:27.420 --> 22:27.520
好

22:27.520 --> 22:28.020
那麽现在呢

22:28.020 --> 22:29.520
我们来看他打包的结果是什麽

22:29.520 --> 22:31.320
因为他现在知道这个环境呢

22:31.320 --> 22:33.120
我们最终运行的环境是load的环境

22:33.120 --> 22:35.420
就是打包的结果最终运行的是load的环境

22:35.520 --> 22:35.920
因此呢

22:35.920 --> 22:36.920
他在打包的过程中

22:36.920 --> 22:37.920
他找一耐的时候呢

22:37.920 --> 22:39.120
他发现哦

22:39.120 --> 22:41.320
原来这个玩意是一个load内置模块

22:41.520 --> 22:43.220
我不用去找什麽文件

22:43.220 --> 22:43.420
啊

22:43.420 --> 22:44.160
我不用去load

22:44.160 --> 22:45.320
就是里面去找文件

22:45.320 --> 22:47.020
也不用在其他地方去找文件

22:47.020 --> 22:48.220
他就是个内置模块

22:48.320 --> 22:49.220
于于于是呢

22:49.220 --> 22:50.420
他做了一件什麽事呢

22:50.420 --> 22:52.220
你看打包结果就特别有意思了

22:53.620 --> 22:54.820
他写了两个模块

22:54.820 --> 22:56.420
一个是index.js对吧

22:56.620 --> 22:56.920
哎

22:56.920 --> 22:59.020
这个是这个js里面是什麽

22:59.020 --> 22:59.520
就一句单吧

22:59.520 --> 22:59.720
对吧

22:59.720 --> 23:00.720
他把它替换成了什麽

23:00.720 --> 23:02.120
替换成了webrequire啊

23:02.120 --> 23:02.720
fs

23:02.920 --> 23:04.020
然后导入fs

23:04.220 --> 23:06.320
那麽fs这个模块的是什麽呢

23:06.420 --> 23:06.920
你看

23:07.320 --> 23:08.320
他就做了这麽一件事

23:08.320 --> 23:09.620
他把我们的fs

23:09.620 --> 23:11.020
我们这里有没有fs模块

23:11.020 --> 23:11.820
有没有自己写

23:11.820 --> 23:13.620
没有loadmarch里面也没有写

23:13.620 --> 23:14.820
那麽他做了这麽一个处理

23:14.820 --> 23:16.020
fs模块呢

23:16.020 --> 23:17.120
他直接导出

23:17.920 --> 23:20.320
用require还有一个方式来导出fs

23:20.820 --> 23:22.220
他直接给你写了这麽一个东西

23:22.420 --> 23:23.520
那麽这样导出的结果

23:23.520 --> 23:25.420
是不是就是load内置模块

23:25.420 --> 23:27.320
因为这个单码是load里面运行的

23:27.320 --> 23:27.720
对吧

23:27.720 --> 23:29.920
那麽是不是就是load内置模块的东西

23:29.920 --> 23:30.520
把导出了

23:30.520 --> 23:31.020
对吧

23:31.120 --> 23:32.220
他写了这麽一种格式

23:32.220 --> 23:33.220
那麽在导入他的时候

23:33.220 --> 23:34.220
是不是直接就导

23:34.220 --> 23:35.820
相当于是导入他的时候

23:35.820 --> 23:38.120
是不是相当于导入的是fs

23:38.620 --> 23:38.820
对

23:38.820 --> 23:40.120
他就用这种方式来处理的

23:40.320 --> 23:40.420
好

23:40.420 --> 23:41.420
咱们来不信试一下

23:41.420 --> 23:45.520
我们这里输出fs

23:46.120 --> 23:47.120
输出fs

23:47.320 --> 23:47.620
好

23:47.620 --> 23:48.620
这里再重新打包

23:52.360 --> 23:52.660
OK

23:52.660 --> 23:53.360
我们来看一下

23:53.960 --> 23:54.660
那麽现在呢

23:54.660 --> 23:55.960
总之他就支持load环境了

23:55.960 --> 23:57.660
这个单码就可以在load环境里面执行

23:58.560 --> 23:58.960
你看

23:58.960 --> 23:59.660
是不是得到了

24:00.060 --> 24:01.260
这个fs里面有很多东西

24:01.260 --> 24:03.160
文件处理的里面有很多东西

24:03.560 --> 24:04.260
一个对象

24:04.860 --> 24:05.860
是可以运行的

24:06.760 --> 24:08.060
这就是处理这个问题

24:08.060 --> 24:09.460
当然如果说你将来

24:09.960 --> 24:11.560
你说这个东西他处理什么问题呢

24:11.560 --> 24:13.360
他处理就是最终单码的运行环境

24:13.860 --> 24:14.960
那如果说你将来

24:15.360 --> 24:16.260
打包的结果

24:16.260 --> 24:18.960
不可能说我要打包在一个load环境里面

24:18.960 --> 24:19.760
执行的s

24:19.760 --> 24:21.860
就这些这些我们都是在流量界环境里面执行的

24:21.960 --> 24:23.360
那么这东西对你来说有没有用

24:23.560 --> 24:24.860
就没有用一点都没有

24:24.860 --> 24:26.160
你可能一辈子都不用用他

24:26.660 --> 24:28.160
但是如果说有一天

24:28.160 --> 24:29.360
就是他他怎么写

24:29.360 --> 24:30.760
他怎么去配的完全不用管

24:31.460 --> 24:33.060
就是这才是学习的

24:33.260 --> 24:34.160
真确的感觉

24:34.560 --> 24:36.260
就是如果说我将来有一天

24:37.060 --> 24:38.060
他我突然

24:38.060 --> 24:38.160
哎

24:38.160 --> 24:39.860
我想在load环境里面

24:39.860 --> 24:42.060
我也要用微pike来打包的打包成一个结

24:42.060 --> 24:43.760
这个结是要在load环境里面执行

24:43.760 --> 24:45.160
那么这个东西是不是就有用啊

24:45.160 --> 24:45.460
对吧

24:45.460 --> 24:46.460
pocket就有用了

24:46.760 --> 24:47.660
你要想起来

24:47.660 --> 24:49.960
你自有可能你想不起这个名字

24:49.960 --> 24:50.860
这个配置的名字

24:50.860 --> 24:53.260
但是你心里边应该有感有个感觉

24:53.260 --> 24:54.260
一个声音就说

24:54.360 --> 24:57.460
哎我记得是微pike里面是有一个配置

24:57.460 --> 24:58.560
可以配置这个东西的

24:59.160 --> 25:00.960
你只要有这个感觉就行了

25:01.260 --> 25:01.660
啊

25:01.960 --> 25:03.660
那么这个有这种感觉跟

25:03.660 --> 25:06.160
你完全不知道微pike里面有没有这个东西

25:06.260 --> 25:07.260
完全是两码爽

25:07.860 --> 25:08.660
是两码爽

25:09.560 --> 25:10.160
好ok啊

25:10.160 --> 25:11.260
这是关于这个配置

25:11.560 --> 25:13.560
就是我们这里头主要起这么个作用

25:13.660 --> 25:15.160
当然还有一些其他环境啊

25:15.160 --> 25:16.460
你至于可以看一下文档

25:17.360 --> 25:18.560
好接下来我们来看这里

25:18.860 --> 25:19.460
marge

25:19.860 --> 25:20.760
no pause

25:21.760 --> 25:23.360
啊这个配置是写到哪了呢

25:23.860 --> 25:25.860
啊一会再回过头来说一下啊

25:26.060 --> 25:27.960
那么这个玩意跟刚才我们的什么

25:28.060 --> 25:28.960
output

25:29.560 --> 25:33.160
output library target有什么样的区别呢

25:34.260 --> 25:36.760
他们就没有上任何相同的地方

25:37.060 --> 25:38.660
library target是什么

25:38.760 --> 25:41.260
是我配置的是我怎么样

25:41.360 --> 25:43.960
暴露这个自执行函数的执行结果

25:44.060 --> 25:45.760
怎么样去暴露它啊

25:46.460 --> 25:47.660
那么这个target

25:48.160 --> 25:48.960
配置的是什么呢

25:49.160 --> 25:51.660
配置的是他解析这个依赖的时候

25:51.860 --> 25:53.960
解析我们的原代码依赖的时候

25:54.560 --> 25:56.760
他是用一个什么样的环境去解析

25:56.760 --> 25:57.860
因为有漏的环境呢

25:57.860 --> 25:59.160
他有可能用内置模块

25:59.160 --> 26:00.160
他解析方式呢

26:00.160 --> 26:02.560
跟用web环境的就不太一样啊

26:02.560 --> 26:04.360
他只是在起这么一个作用

26:04.860 --> 26:05.860
要搞清楚啊

26:06.460 --> 26:07.560
像这些东西啊你看

26:07.560 --> 26:09.060
你去听我光听我讲

26:09.060 --> 26:10.460
你一点印象都没有

26:11.060 --> 26:12.060
你听完了过后

26:13.060 --> 26:14.860
好像音乐有这么一个东西

26:14.860 --> 26:16.660
但是呢是咋马上就忘完了

26:16.860 --> 26:19.860
但是我们说的是你但是你心里边一定要清楚

26:19.860 --> 26:20.860
他能做什么

26:20.960 --> 26:21.860
他能解决什么问题

26:21.860 --> 26:23.760
所以都留下来还是得去写一下

26:23.760 --> 26:25.660
不然的话你自己的感觉都没有的

26:28.690 --> 26:29.590
好那么

26:30.790 --> 26:31.990
下面一个margeau

26:31.990 --> 26:33.190
第二low force

26:33.890 --> 26:34.690
他配在哪呢

26:34.690 --> 26:35.790
配在margeau里边

26:36.190 --> 26:37.190
啊就是模块

26:37.490 --> 26:38.890
对模块怎么来处理

26:39.690 --> 26:41.090
啊对模块怎么来处理

26:41.390 --> 26:43.390
好模块怎么来处理这一块

26:43.590 --> 26:44.590
那么之前呢

26:44.690 --> 26:45.590
我们是不是

26:46.190 --> 26:47.590
写过这么一个东西

26:47.590 --> 26:48.790
rules还记得吗

26:48.990 --> 26:49.590
这是啥

26:50.390 --> 26:51.490
这是不是loaders

26:51.690 --> 26:53.290
配置的是什么loaders

26:53.690 --> 26:54.590
只要你写过了

26:54.590 --> 26:56.090
我哪怕你把个单词忘了

26:56.090 --> 26:57.990
但是我一写出来你应该就回忆起来了

26:58.590 --> 26:59.790
配置的是loaders对吧

26:59.790 --> 27:01.590
他只有之前只学过这么一个

27:01.590 --> 27:02.790
其实他还有一个配置

27:03.190 --> 27:05.290
还有一个配置叫做low force

27:06.190 --> 27:06.790
low force

27:07.390 --> 27:08.390
low force是什么意思

27:08.490 --> 27:10.590
不要解析啊

27:10.590 --> 27:12.090
不要去夹展

27:12.390 --> 27:13.290
是这么个意思

27:13.390 --> 27:14.390
他配置的是什么呢

27:14.390 --> 27:16.090
配置的是一个政策表达式

27:16.790 --> 27:18.290
配置的是一个政策表达式

27:18.790 --> 27:19.490
啥意思

27:19.690 --> 27:21.590
看着啊有些特别有意思的东西

27:21.790 --> 27:24.090
我现在就用一个字节代码来举例子

27:24.190 --> 27:26.790
比方说index.js一代乘了一代a

27:27.890 --> 27:28.490
叫a

27:29.490 --> 27:31.090
a呢他有一代b

27:31.890 --> 27:32.490
叫b

27:33.290 --> 27:33.990
看着啊

27:34.790 --> 27:35.690
b.js

27:37.190 --> 27:38.290
嗯b呢

27:38.890 --> 27:39.890
就啥都没有啊

27:39.990 --> 27:40.990
a一代b

27:41.090 --> 27:42.690
然后呢a呢他导出啊

27:42.690 --> 27:45.590
用那个就是es6的方式来导出default

27:46.090 --> 27:46.690
default

27:47.490 --> 27:48.090
嗯

27:49.190 --> 27:50.490
导出导出什么呢

27:50.790 --> 27:52.090
导出a吧啊

27:52.090 --> 27:53.090
随便写一个啊

27:53.090 --> 27:53.690
随便写一个

27:54.190 --> 27:54.890
随便写一台吧

27:55.690 --> 27:57.090
好那么接下来我们来

27:57.690 --> 27:58.290
vpeg

27:58.690 --> 27:59.290
打包

27:59.690 --> 28:00.990
low force先暂时不写

28:02.860 --> 28:03.360
打包

28:03.760 --> 28:04.360
你看一下

28:05.160 --> 28:06.260
那么最终的结果里边

28:06.260 --> 28:07.960
他是不是一定会形成三个模块

28:07.960 --> 28:08.360
对吧

28:08.560 --> 28:09.960
打包结果里边一定有三个模块

28:09.960 --> 28:10.360
你看

28:10.760 --> 28:12.260
嗯a这个模块

28:12.660 --> 28:14.660
他是不是把require变成了什么

28:14.760 --> 28:15.260
re

28:15.660 --> 28:17.660
他require变成了vpegrequire啊

28:17.660 --> 28:18.960
只不过呢啊

28:19.160 --> 28:20.760
只不过呢他那个

28:21.560 --> 28:23.160
他在导入的时候

28:27.260 --> 28:28.760
他导入的时候是不是导入

28:28.760 --> 28:29.760
导入b这个模块

28:29.760 --> 28:31.060
对吧导入b这个模块

28:31.560 --> 28:31.860
啊

28:32.860 --> 28:33.760
好那么这里呢

28:33.760 --> 28:34.560
这里是干嘛呢

28:34.560 --> 28:36.160
他这里是在解析这个语法

28:36.460 --> 28:37.760
他是在解析这个语法

28:38.560 --> 28:38.760
啊

28:38.760 --> 28:40.360
因为我们使用的是es6啊

28:40.360 --> 28:40.760
es6

28:40.760 --> 28:42.360
他要单独处理一下导出

28:42.660 --> 28:43.860
总之他处理一下啊

28:43.860 --> 28:44.860
他导入要处理一下

28:44.860 --> 28:46.260
导出也要处理一下啊

28:46.260 --> 28:47.760
因为他是es6的语法

28:47.760 --> 28:50.260
他把处理成一种普通函数的方式导出

28:50.260 --> 28:53.060
因为他不能在这里直接写export

28:53.260 --> 28:53.760
defort

28:53.760 --> 28:54.660
对吧这些写呢

28:54.660 --> 28:56.260
他是一个不兼容的语法

28:56.260 --> 28:56.760
就是他

28:57.260 --> 28:57.760
嗯

28:58.160 --> 29:00.860
他必须要在流量性的模块化环境里面才能运行

29:00.860 --> 29:02.560
那如果是非模块化就不能运行

29:02.560 --> 29:05.360
他保证在非模块化环境下面也要能够运行

29:05.460 --> 29:06.760
因此呢他做了这么一些处理

29:06.760 --> 29:08.060
总之他处理了一些问题

29:08.260 --> 29:09.260
总之你可以看到

29:09.360 --> 29:11.360
a的a的介石代码是不是变了

29:12.260 --> 29:13.460
所以一定会出现这种情况

29:13.460 --> 29:15.660
a的介石代码是不是一定变了

29:15.660 --> 29:16.860
而且还有b这个模块的吧

29:16.860 --> 29:18.760
还有in这个车的介石这个模块

29:19.360 --> 29:19.960
那么接下来呢

29:19.960 --> 29:21.060
我们来做这么减少

29:21.260 --> 29:24.060
我在这个low pause下面的去写这么一个东西

29:24.960 --> 29:26.960
有这么的表达是匹配什么匹配a

29:27.660 --> 29:28.860
你看啊a

29:28.960 --> 29:29.460
2

29:29.860 --> 29:30.660
2转移啊

29:30.660 --> 29:32.360
不然的话表示匹配任何制服

29:32.460 --> 29:33.960
介石多了结束

29:34.060 --> 29:35.060
什么是这么的表达是

29:35.460 --> 29:35.960
对吧

29:36.160 --> 29:37.560
那么这个正正的表达是不是

29:37.560 --> 29:39.460
能够在模块的解析过程中

29:39.460 --> 29:41.260
能够匹配到这个a模块

29:42.060 --> 29:42.860
那么什么意思呢

29:42.860 --> 29:43.460
这样子

29:45.380 --> 29:49.580
不对a模块做任何操作

29:50.180 --> 29:51.180
他就这么个意思

29:51.180 --> 29:52.780
他不对a模块做任何操作

29:54.080 --> 29:59.580
直接将其原代码放置到

30:02.380 --> 30:03.380
模块内容中

30:04.580 --> 30:05.380
就这么个意思

30:05.380 --> 30:06.780
甚至他不会解析一旦

30:07.280 --> 30:08.680
好我们再来看一张图啊

30:08.780 --> 30:10.780
就之前我们说的那个编译过程

30:11.080 --> 30:12.080
我再把个图拿开

30:13.480 --> 30:13.980
你看啊

30:14.080 --> 30:14.980
他在做什么事

30:15.380 --> 30:15.780
你看啊

30:15.780 --> 30:18.180
我们在编译的过程中不是要一个模块

30:18.180 --> 30:19.380
一个模块去夹载吗

30:19.380 --> 30:20.980
就把要夹载出很多模块

30:20.980 --> 30:22.680
根据入口夹载出很多模块

30:22.980 --> 30:24.880
那么在夹载的过程中大家看一下啊

30:25.280 --> 30:26.480
在夹载的过程中

30:26.480 --> 30:27.980
它具体是怎么夹载的呢

30:28.180 --> 30:29.080
是不是这张图

30:29.180 --> 30:29.580
对吧

30:29.780 --> 30:30.180
哎

30:30.180 --> 30:31.580
首先找到这个模块文件

30:31.780 --> 30:32.080
然后呢

30:32.080 --> 30:33.780
检查这个里面有没有有的话

30:33.780 --> 30:35.680
就直接就结束了

30:35.680 --> 30:36.880
没有的话就夹载对吧

30:37.180 --> 30:38.580
那么这一段过程就是解析了

30:38.780 --> 30:39.780
就夹载模块了

30:40.480 --> 30:41.180
分析模块

30:41.280 --> 30:42.880
那么把文件内容读出来

30:42.880 --> 30:44.280
然后抽象语法是分析

30:45.080 --> 30:45.980
找到它的依赖

30:45.980 --> 30:47.280
然后替换依赖函数

30:47.280 --> 30:47.480
对吧

30:47.480 --> 30:49.480
把require替换成webrequire

30:49.480 --> 30:49.780
啊

30:50.180 --> 30:51.180
那么总之要转换

30:51.180 --> 30:52.880
那么保存转换后的模块代码

30:52.980 --> 30:53.480
对不对

30:53.480 --> 30:54.580
他做这么一些流程

30:54.580 --> 30:56.080
然后又把他的依赖去夹载

30:56.680 --> 30:58.680
但是如果说你的配置

30:58.980 --> 31:00.380
有这么一个配置过后

31:00.680 --> 31:02.580
如果说他发现其中一个模块

31:03.080 --> 31:04.680
他跟这个配置是匹配的

31:04.780 --> 31:05.780
比方说哎这个模块

31:06.780 --> 31:09.180
哎这个模块是跟那个配置是匹配的

31:09.280 --> 31:10.580
一旦他发现匹配的

31:10.680 --> 31:11.080
对不起

31:11.080 --> 31:12.680
这些事情他一概不做了

31:12.780 --> 31:14.080
他直接把文件内容读出来

31:14.080 --> 31:15.380
直接形成转换后的代码

31:15.880 --> 31:16.080
啊

31:16.080 --> 31:17.880
他不做对这个文件内容做任何处理

31:17.880 --> 31:19.280
也不去找他的依赖

31:19.280 --> 31:21.280
也不去做抽象语法数分析

31:21.280 --> 31:22.180
也不去

31:22.880 --> 31:23.780
呃那个

31:24.480 --> 31:26.280
呃替换什么依赖函数

31:26.280 --> 31:27.480
把require替换成webrequire

31:27.480 --> 31:29.780
就是把他的内容原付不动的作为转换后代码

31:29.980 --> 31:30.880
就这么个意思

31:31.280 --> 31:31.480
好

31:31.480 --> 31:32.280
咱们来看一下吧

31:34.470 --> 31:35.070
我也拍了

31:35.770 --> 31:36.170
看

31:37.770 --> 31:38.470
nps

31:38.470 --> 31:38.970
我也拍

31:41.200 --> 31:42.000
大家看到没

31:42.900 --> 31:43.800
看那个结果啊

31:43.900 --> 31:45.200
是不是少了一个文件啊

31:45.600 --> 31:46.400
a掉js

31:46.400 --> 31:47.800
in这个手里的js b呢

31:47.800 --> 31:49.000
a不是依赖b吗

31:49.100 --> 31:49.600
对不起

31:49.700 --> 31:51.800
a的这个内容他完全不分析了

31:52.000 --> 31:53.400
完全不分析这个a的内容

31:53.400 --> 31:55.000
他就原封不动的把这个a

31:55.700 --> 31:56.300
你看啊

31:56.500 --> 31:58.500
他就原封不动的把这个a的内容

31:58.500 --> 31:59.400
全部直接放在那

31:59.900 --> 32:00.900
那这个代码能执行吗

32:00.900 --> 32:02.200
这个代码肯定是执行不了的

32:02.400 --> 32:03.300
肯定是执行不了的

32:03.300 --> 32:04.300
这里肯定是执行不了的

32:04.300 --> 32:05.700
比方说你见个页面你试一下吧

32:08.450 --> 32:08.850
啊

32:09.850 --> 32:11.450
为什么执行不了你自己想

32:11.450 --> 32:12.250
想一想

32:15.110 --> 32:16.610
index叫js

32:16.910 --> 32:18.310
你看一下这个能执行吗

32:18.510 --> 32:19.710
肯定是不能执行的

32:22.700 --> 32:24.100
你看说执行不了

32:24.100 --> 32:25.300
他这个语法都报错了

32:25.300 --> 32:25.600
对吧

32:25.600 --> 32:27.500
你把当成一个普通的js文件再执行

32:27.500 --> 32:29.200
那个js文件里面居然有这种语法

32:29.200 --> 32:30.000
是不是报错了

32:30.200 --> 32:31.600
那么哪怕没有这个语法

32:31.600 --> 32:32.300
他是不是也要报错

32:32.300 --> 32:33.200
require存不存在

32:33.200 --> 32:34.000
根本就不存在

32:34.100 --> 32:34.800
他用的是什么

32:34.800 --> 32:35.700
用的是这个参数里面的

32:35.700 --> 32:36.600
我也不太个require

32:36.700 --> 32:36.900
对吧

32:36.900 --> 32:37.500
用的是这个

32:37.500 --> 32:38.700
require根本就不存在

32:38.800 --> 32:39.900
哪怕把这句话删了

32:40.000 --> 32:40.500
保存

32:40.600 --> 32:42.500
还是报错require is not defined

32:42.600 --> 32:43.100
对吧

32:43.500 --> 32:44.600
那这样子有什么意义呢

32:44.600 --> 32:44.900
为什么

32:44.900 --> 32:46.300
为什么不要去解析他呢

32:46.500 --> 32:47.000
啊

32:47.000 --> 32:48.000
那为什么不要去解析他呢

32:48.000 --> 32:48.800
是这个原因

32:49.100 --> 32:49.900
就有的时候呢

32:49.900 --> 32:51.000
我们会遇到一些

32:51.300 --> 32:53.900
特别特别大的模块

32:54.000 --> 32:55.100
比方像jquery

32:55.400 --> 32:55.900
你看啊

32:55.900 --> 32:57.200
我们这里安装了jquery了啊

32:57.200 --> 32:58.100
已经安装过了

32:58.300 --> 32:59.700
我这里已经安装过了jquery

32:59.900 --> 33:01.800
那么比方说我们看一下jquery的代码

33:04.360 --> 33:05.760
你看这个jquery的代码一个

33:05.760 --> 33:06.560
非常大的一个特点

33:06.560 --> 33:07.560
我们在这里查询一下

33:07.560 --> 33:08.260
jquery

33:08.560 --> 33:09.160
ok

33:09.860 --> 33:10.060
好

33:10.060 --> 33:11.260
你看一下他的pact一点

33:11.260 --> 33:11.760
json

33:11.760 --> 33:13.260
他其实原代码

33:13.760 --> 33:14.560
其实有很多啊

33:14.560 --> 33:15.560
其实有很多的模块

33:15.560 --> 33:15.960
你看

33:16.160 --> 33:17.260
他自己写了很多模块

33:17.360 --> 33:17.760
但是呢

33:17.760 --> 33:19.360
他这个pact一点json很有意思

33:19.660 --> 33:20.960
他这里边一起来跟妹

33:21.160 --> 33:22.160
他是指向谁

33:22.160 --> 33:23.660
指向DS人目录

33:23.660 --> 33:25.760
你就感觉像啥

33:26.060 --> 33:26.860
感觉像啥

33:26.860 --> 33:28.860
他是不是也是通过一些打包工具

33:29.160 --> 33:30.460
构建工具打包了

33:30.460 --> 33:30.660
对吧

33:30.660 --> 33:31.660
这是他的原代嘛

33:31.660 --> 33:33.060
然后这是他的打包的结果

33:33.260 --> 33:33.560
然后呢

33:33.560 --> 33:34.560
他在pact一点json里边

33:34.560 --> 33:36.360
他是不是指向我们打包后的结果

33:36.360 --> 33:37.360
DS目录下面的

33:37.660 --> 33:38.160
这个

33:38.360 --> 33:38.960
这个东西

33:39.060 --> 33:39.360
是吧

33:39.360 --> 33:40.360
他指向这个结果

33:40.460 --> 33:42.360
那么这个结果是不是合并之后的结果

33:42.960 --> 33:44.360
也就是说什么意思呢

33:44.660 --> 33:46.360
也就是说我们

33:48.160 --> 33:49.360
我们如果说

33:50.160 --> 33:51.560
在我们的代码里边

33:53.360 --> 33:54.660
比方说index里边啊

33:54.960 --> 33:56.960
比方说我们代码里边去require

33:57.660 --> 33:58.960
接quiret的时候

33:59.160 --> 34:02.960
他是不是会从loaded modules里边去找到这个文件啊

34:03.360 --> 34:04.860
把这个文件导入进来

34:05.060 --> 34:05.460
对吧

34:05.460 --> 34:06.460
形成一个模块

34:06.660 --> 34:07.160
对不对

34:07.560 --> 34:08.660
而这个文件呢

34:08.660 --> 34:10.560
由于他就是一个单文件

34:10.560 --> 34:12.260
你看他就是一个立即执行函数

34:12.360 --> 34:13.260
一个单文件

34:13.260 --> 34:14.260
然后里边的后边呢

34:14.260 --> 34:15.360
用了一个导出

34:15.860 --> 34:17.060
loaded modules导出

34:18.560 --> 34:21.760
就是margeal export来导出

34:21.860 --> 34:22.560
那就导出

34:22.960 --> 34:23.860
那么这里呢

34:24.260 --> 34:25.860
如果说我们直接使用接块的话

34:25.860 --> 34:27.060
那么就会导出这个文件

34:27.160 --> 34:28.760
而这个文件有没有其他一代了

34:29.260 --> 34:29.960
没有了

34:30.360 --> 34:31.360
这就是个单文件

34:31.360 --> 34:32.460
他没有其他一代了

34:32.660 --> 34:34.460
这个文件其实就是在接块的内部

34:34.460 --> 34:35.360
合并之后

34:35.360 --> 34:36.660
他用的一些构建工具

34:36.660 --> 34:38.360
把原代码合并之后的文件

34:38.360 --> 34:39.160
就这个文件

34:39.160 --> 34:41.060
他已经不再依赖任何其他东西了

34:41.660 --> 34:44.960
因此对这个文件再一次进行解析

34:44.960 --> 34:47.060
再一次去做这些事情有意义吗

34:47.260 --> 34:48.860
怎么分析抽象与法术

34:48.860 --> 34:50.860
记录依赖替换什么行

34:50.860 --> 34:51.660
有意义吗

34:52.360 --> 34:53.860
是不是就显得没有意义了

34:54.760 --> 34:55.460
懂我这个意思吗

34:55.560 --> 34:56.760
是不是显得没有意义了

34:56.960 --> 34:59.060
那么我们何必去做这么一些负担

34:59.060 --> 35:00.360
而且这个文件内容很大

35:00.360 --> 35:01.460
你看很多行的

35:02.060 --> 35:02.960
一万多行代

35:03.160 --> 35:05.360
那么对这个代码再去做抽象与法术分析

35:05.360 --> 35:08.060
是不是非常影响打包的效率

35:08.360 --> 35:09.660
他不是影响执行效率

35:09.660 --> 35:11.060
跟执行效率没有任何关系

35:11.260 --> 35:12.860
是不是影响有打包的过程

35:12.960 --> 35:14.360
会花费更长的时间

35:14.560 --> 35:14.960
对吧

35:15.260 --> 35:17.160
那么面对这种情况下

35:17.560 --> 35:19.260
你看我这什么说的

35:20.260 --> 35:23.560
他通常用来忽略那些大型的

35:23.560 --> 35:24.460
就是很多代码

35:24.760 --> 35:27.560
现在一万多行的单模块裤

35:27.660 --> 35:28.560
就是这个模块

35:28.560 --> 35:29.660
他已经合并过了

35:29.760 --> 35:30.860
他只有一个模块

35:31.360 --> 35:33.060
他其实本来是有很多模块的

35:33.060 --> 35:34.260
但是通过打包工具

35:34.260 --> 35:35.560
他内部通过打包工具

35:35.660 --> 35:37.460
然后把它合并成一个东西了

35:38.460 --> 35:39.760
弹个模块了

35:39.860 --> 35:40.860
那么这样子

35:41.660 --> 35:42.360
这样子

35:43.260 --> 35:44.860
我们就没有必要去解析他了

35:45.060 --> 35:46.260
直接倒入他就行了

35:46.760 --> 35:47.860
以提高构建性的

35:48.060 --> 35:49.060
所以说我们这里

35:49.860 --> 35:52.360
如果说你对构建性能有特别的要求

35:52.560 --> 35:53.460
你特别难的

35:53.560 --> 35:55.560
你很难的等在这里等半天

35:55.560 --> 35:56.660
不想去等

35:56.860 --> 35:58.460
那么你就完全可以这样做

35:59.960 --> 36:00.860
这里去用什么

36:00.960 --> 36:02.260
不要说我们就写个结块

36:02.860 --> 36:03.660
凡是结块

36:04.060 --> 36:04.960
出现这个单词的

36:04.960 --> 36:05.460
OK

36:05.660 --> 36:06.460
我就不打包了

36:07.460 --> 36:08.960
我就不去不是打包

36:09.060 --> 36:10.760
我就不去分析他的一代了

36:10.760 --> 36:12.560
不去分析他的抽象与发数了

36:14.460 --> 36:14.960
你看

36:15.160 --> 36:15.860
那么这样子呢

36:15.860 --> 36:16.860
你看一下这边

36:17.160 --> 36:17.660
他就把

36:18.960 --> 36:19.960
他就把结块位

36:20.560 --> 36:22.560
你看结块位的结业是这个模块

36:22.960 --> 36:24.460
他带把圆缝不动就放出来了

36:24.460 --> 36:25.360
他管他咋写的

36:25.460 --> 36:25.960
能不能用了

36:25.960 --> 36:26.660
当然能用

36:26.960 --> 36:27.760
当然能用

36:27.960 --> 36:29.260
你看我们在英德克斯里面

36:29.260 --> 36:30.160
不要输出一下

36:30.360 --> 36:31.160
输出一下多了

36:31.360 --> 36:32.660
输出一下这个多了

36:36.070 --> 36:36.970
看一下能不能用

36:37.370 --> 36:38.770
我们再打打包一次

36:45.490 --> 36:46.090
好看一下

36:46.790 --> 36:47.390
是不是可以

36:47.790 --> 36:48.490
能不能可以用

36:48.590 --> 36:49.890
因为他本来就是有单个模块

36:49.890 --> 36:51.090
他已经写好了

36:51.790 --> 36:52.990
所以说就可以这样子

36:53.290 --> 36:54.290
但是潜力条件

36:54.290 --> 36:55.490
他一定要是单模块

36:55.590 --> 36:58.090
就他你要导入到那个模块

36:58.290 --> 36:59.490
你要导入到那个模块

36:59.990 --> 37:00.890
他不能是

37:01.390 --> 37:02.590
他不能有其他一代

37:02.690 --> 37:03.790
如果说有其他一代的话

37:03.790 --> 37:04.590
那就出问题了

37:04.890 --> 37:05.090
对吧

37:05.090 --> 37:05.690
他其他一代

37:05.690 --> 37:07.190
就像我们刚才的A调结是一样

37:07.190 --> 37:08.290
他本来有其他一代的

37:08.290 --> 37:09.790
如果你把他low pause了之后

37:09.790 --> 37:10.690
他不会去解析了

37:10.690 --> 37:11.690
不会去管他的一代了

37:12.290 --> 37:13.890
所以说他一定是单模块

37:14.290 --> 37:15.090
这low pause

37:15.090 --> 37:16.190
那么这个东西有啥用的

37:16.290 --> 37:17.190
如果说你以后

37:17.890 --> 37:19.890
如果说你以后要解析的东西

37:20.190 --> 37:20.890
不是单模块

37:20.890 --> 37:21.890
要不要要不要管他

37:21.890 --> 37:22.890
不用不用管他

37:23.390 --> 37:24.590
如果说你以后解析的模块

37:24.590 --> 37:25.590
是一个很小型的模块

37:25.590 --> 37:26.090
要不要管他

37:26.090 --> 37:26.890
也不用管他

37:27.490 --> 37:28.590
如果说你以后解析的模块

37:28.590 --> 37:29.990
既是大型模块

37:29.990 --> 37:31.090
又是单模块

37:31.990 --> 37:33.090
可不可以不用这个

37:33.090 --> 37:33.890
也可以啊

37:33.890 --> 37:34.790
我不在乎

37:35.390 --> 37:37.290
因为他只是一个构建性能而已

37:37.390 --> 37:39.490
只是一个我在打包的锅

37:39.490 --> 37:41.590
影响我的是我打包过程的性能

37:41.690 --> 37:44.390
就运行给打包了结果的运行性能

37:44.390 --> 37:45.590
是没有任何关系的

37:45.790 --> 37:46.390
所以说

37:46.690 --> 37:50.190
这个东西我也没有把它放到一个新的那一块

37:50.190 --> 37:51.590
就优化了一块去讲解

37:51.590 --> 37:53.990
因为他跟那个运行时代的优化

37:53.990 --> 37:54.990
没有任何关系

37:55.090 --> 37:57.690
然后他只是提高了打包的过程

37:58.590 --> 38:00.190
就这么一个low pause

38:00.790 --> 38:01.790
很多课程都没有讲这个

38:01.790 --> 38:03.090
他就是意义不大

38:03.390 --> 38:03.990
意义不大

38:06.060 --> 38:06.460
好

38:06.460 --> 38:07.760
接下来我们来看一下其他配置

38:07.760 --> 38:10.460
就是他们这些东西都是没有什么相关性的

38:10.460 --> 38:11.560
基本上各种各的

38:12.060 --> 38:12.860
好 Result

38:14.160 --> 38:15.460
这又是一块大的配置

38:15.760 --> 38:16.360
result

38:16.360 --> 38:18.160
他里边我中能讲三个

38:18.160 --> 38:19.160
其他里边还有一些

38:19.160 --> 38:19.860
什么没啥用了

38:19.860 --> 38:21.360
已经result

38:21.360 --> 38:21.960
他里面有三个

38:21.960 --> 38:22.860
一个是 Marjus

38:22.860 --> 38:23.960
一个是 Extensions

38:23.960 --> 38:25.060
一个是 Alliance

38:25.060 --> 38:25.760
而这三个呢

38:25.760 --> 38:26.360
多多少少呢

38:26.360 --> 38:28.260
有点有点那么一点点用

38:28.360 --> 38:28.860
看一下

38:29.360 --> 38:29.960
他有三个

38:30.760 --> 38:31.860
第一个是 Marjus

38:32.160 --> 38:32.860
怎么配置

38:32.860 --> 38:33.560
这样配置

38:34.560 --> 38:35.160
result

38:36.560 --> 38:37.760
一边 Marjus

38:38.860 --> 38:39.360
配置

38:39.460 --> 38:40.260
配置为什么呢

38:40.460 --> 38:41.760
你看他不能只是这个

38:42.360 --> 38:43.160
啥意思啊

38:44.160 --> 38:46.160
因我再问大家一个问题啊

38:46.160 --> 38:47.160
看大家都有个位派

38:47.160 --> 38:48.260
有没有搞清楚

38:49.260 --> 38:50.560
我在 Index

38:50.560 --> 38:52.460
介石里边写了这句代码

38:53.060 --> 38:54.160
这是个 Common介石代码

38:54.260 --> 38:54.760
对吧

38:55.460 --> 38:57.460
这个代码在是不是我没有使用

38:57.460 --> 38:59.460
点儿斜杠和点儿斜杠开头

38:59.660 --> 39:00.160
对吧

39:00.360 --> 39:01.360
那么这个代码呢

39:01.360 --> 39:02.260
这个模块

39:02.460 --> 39:04.160
他的寻找是怎么寻找的

39:04.160 --> 39:07.160
是不是找当前目录下的 Load Marjus目录

39:07.260 --> 39:07.660
然后呢

39:07.660 --> 39:10.360
再从上级目录去找 Load Marjus目录

39:10.360 --> 39:10.860
对吧

39:11.460 --> 39:12.260
如果找不到的话

39:12.260 --> 39:14.260
就去找上级目录的 Load Marjus

39:14.460 --> 39:14.960
对不对

39:15.460 --> 39:17.960
那么这种查找是谁在查找

39:17.960 --> 39:19.360
我现在问你这么一个问题

39:20.160 --> 39:21.660
在我这个环境下边

39:21.860 --> 39:23.360
最终我运行的时候

39:23.860 --> 39:25.460
就是这个这个代码

39:25.960 --> 39:28.060
是谁在查找这个模块

39:28.660 --> 39:30.160
第一个选项A

39:30.660 --> 39:31.960
是 Load

39:33.160 --> 39:33.960
再查找

39:34.560 --> 39:35.060
查找

39:35.260 --> 39:36.160
解块位模块

39:36.760 --> 39:37.960
第二个选项B

39:38.660 --> 39:40.260
是 Webpack

39:40.560 --> 39:41.560
再查找

39:42.760 --> 39:43.460
解块位

39:44.460 --> 39:45.760
到底是哪一个在查找

39:46.760 --> 39:47.960
这是我讲过的

39:48.960 --> 39:49.860
是哪个在查找

39:50.260 --> 39:51.560
是不是选B

39:51.660 --> 39:53.160
是 Webpack在查找

39:53.360 --> 39:54.360
跟 Load有没有关系

39:54.360 --> 39:55.460
没有任何关系

39:55.560 --> 39:57.460
因为这些代码还会不会运行

39:57.760 --> 39:59.560
他打包的时候跟悶就不会运行

39:59.560 --> 40:01.860
Webpack只是把这些当成一个普通文件

40:02.560 --> 40:03.360
那管理是什么

40:03.360 --> 40:04.460
GS, CS, CS

40:04.460 --> 40:05.060
甚至是图片

40:05.060 --> 40:07.160
我管理是那种东西

40:07.160 --> 40:07.660
不管那么多

40:07.660 --> 40:08.860
我直接把内容读出来

40:08.860 --> 40:09.660
分析依赖

40:09.760 --> 40:10.460
他怎么来分析依赖

40:10.460 --> 40:11.360
就看关键字

40:11.360 --> 40:12.260
有没有 Require

40:12.760 --> 40:13.960
或者是有没有什么 Import

40:14.360 --> 40:15.560
他通过这种方式

40:15.560 --> 40:16.160
通过什么

40:16.160 --> 40:18.460
把他解析成为抽象与法术

40:18.460 --> 40:20.560
然后来分析他里面的有哪些依赖

40:20.560 --> 40:21.760
依赖要别的什么东西

40:21.960 --> 40:22.460
对吧

40:23.160 --> 40:24.260
依赖要别的什么东西

40:24.660 --> 40:25.360
那么这里

40:25.560 --> 40:26.060
自然

40:26.060 --> 40:27.460
他这个东西是交给谁

40:27.460 --> 40:28.660
交给Webpack

40:28.660 --> 40:29.660
Webpack一看到他

40:29.660 --> 40:30.760
原来你依赖他

40:30.760 --> 40:31.760
那么他在哪呢

40:31.760 --> 40:32.760
我是不是要去找了他

40:32.760 --> 40:33.560
那怎么去找

40:33.560 --> 40:34.860
那么 Webpack他有一套

40:34.860 --> 40:36.460
自己的查到方式

40:36.560 --> 40:38.260
只不过的默认情况下

40:38.260 --> 40:39.260
像这种邪法

40:39.360 --> 40:40.260
他去怎么找的

40:40.460 --> 40:42.360
他跟load的查到方式是一样的

40:42.860 --> 40:43.960
只不过这么一个意思

40:43.960 --> 40:44.560
比方说

40:44.560 --> 40:45.260
有一道面试题

40:45.260 --> 40:46.060
我这样问你

40:49.140 --> 40:49.940
在英德克社里边

40:49.940 --> 40:51.140
我们判断一个东西

40:52.140 --> 40:52.640
Red

40:52.840 --> 40:53.440
小余宁

40:53.440 --> 40:54.140
0.5

40:55.040 --> 40:55.240
好

40:55.240 --> 40:56.440
那么我们 Require

40:57.440 --> 40:58.540
require.a

40:59.640 --> 41:00.540
require.a

41:00.940 --> 41:01.340
好

41:01.340 --> 41:01.840
请问

41:06.440 --> 41:08.240
打包结果中

41:09.440 --> 41:10.240
包含

41:12.280 --> 41:13.180
英德克社

41:13.880 --> 41:14.280
和

41:15.180 --> 41:15.580
a

41:16.980 --> 41:17.780
这是选项A

41:18.780 --> 41:20.080
英德克社模块和A模块

41:20.080 --> 41:20.780
是不是都包含

41:21.280 --> 41:21.880
选项B

41:26.570 --> 41:27.070
英德克社

41:27.070 --> 41:27.770
只有英德克社

41:27.770 --> 41:28.370
没有A

41:30.070 --> 41:30.670
选项3

41:31.470 --> 41:32.070
选项C

41:35.070 --> 41:35.870
英德克社

41:37.670 --> 41:40.070
有可能有A

41:40.070 --> 41:41.070
有可能没有

41:41.470 --> 41:42.070
选举

41:43.070 --> 41:44.670
这个主要专门来考理

41:44.670 --> 41:45.870
到底就会派个认识的

41:45.870 --> 41:46.870
认识得清不清楚

41:46.870 --> 41:47.470
选举

41:47.470 --> 41:49.470
如果你真的只去听到我之前的课

41:49.470 --> 41:49.970
而且呢

41:49.970 --> 41:51.070
跟着我做那样的练习

41:51.070 --> 41:51.970
你一定清楚

41:52.670 --> 41:53.270
选A

41:53.270 --> 41:53.670
对吧

41:53.670 --> 41:54.870
是不是选A

41:54.870 --> 41:55.870
这单码运不运行

41:55.870 --> 41:56.470
也就是说

41:56.470 --> 41:58.470
是不是有一个判断

41:58.470 --> 41:59.070
没有进这个

41:59.070 --> 42:00.070
他就不导致了

42:00.070 --> 42:01.270
他管他那么多

42:01.870 --> 42:02.970
我也派他做什么事情

42:02.970 --> 42:03.570
我也派个

42:03.570 --> 42:04.670
管理这个单码是怎么写的

42:04.670 --> 42:05.870
他根本就不会运行这个单码

42:05.870 --> 42:07.270
他只是把它做一个抽象愚化

42:07.270 --> 42:08.270
分析分析出来

42:08.270 --> 42:09.370
哪个地方在Require

42:09.370 --> 42:09.670
来

42:09.670 --> 42:10.370
一个个找

42:10.470 --> 42:11.570
管理写的是什么地方

42:11.570 --> 42:12.470
只要你看到Require

42:12.470 --> 42:13.570
表示有一弹

42:13.570 --> 42:15.770
那么一弹东西一定会被打爆

42:16.670 --> 42:17.670
听懂的意思吗

42:17.670 --> 42:18.670
所以说

42:18.670 --> 42:19.670
不要去想这个问题

42:19.670 --> 42:21.570
这个问题他一定是A

42:21.570 --> 42:22.170
一定是A

42:22.170 --> 42:22.970
他出现Require

42:22.970 --> 42:23.770
他一定是有一弹

42:24.770 --> 42:26.270
他是用这么的方式来分析的

42:26.270 --> 42:27.570
所以说你一定要搞清楚

42:27.570 --> 42:28.670
像这个东西是

42:28.670 --> 42:30.270
webpack在找这个

42:30.270 --> 42:31.370
如果说你没有写掉鞋杠

42:31.370 --> 42:32.870
是webpack在帮你找

42:32.870 --> 42:34.370
不是load跟load没关系

42:34.370 --> 42:34.870
只不过呢

42:34.870 --> 42:37.670
webpack的找的方式跟load是一样的

42:37.670 --> 42:39.770
所以感觉上好像是load在找

42:39.770 --> 42:40.770
跟load没有任何关系

42:40.770 --> 42:42.770
是webpack来找

42:42.770 --> 42:43.570
他找什么

42:43.570 --> 42:44.770
他找当前目录下面

42:44.770 --> 42:46.170
有没有load码就是

42:46.170 --> 42:47.070
找上一级目录下面

42:47.070 --> 42:48.070
有没有load码就是

42:48.070 --> 42:49.570
为什么webpack是这样找的呢

42:49.570 --> 42:50.570
就是因为这个配置

42:51.570 --> 42:52.770
他默认配置就这样子

42:53.870 --> 42:55.370
你看这是个数组

42:55.370 --> 42:56.770
这个marge就是表示什么意思

42:56.770 --> 42:59.370
表示的是模块的查找位置

43:00.970 --> 43:02.970
模块的查找位置

43:03.870 --> 43:04.570
他就这么个意思

43:05.870 --> 43:06.070
好

43:06.070 --> 43:07.270
那么为什么这个数组呢

43:07.270 --> 43:08.570
他可以给他配多个位置

43:08.570 --> 43:09.870
他前从第一个位置去找

43:09.870 --> 43:11.870
找不到的话再从第二个位置去找

43:11.870 --> 43:14.170
那么他默认配置就只有一个load码就是

43:14.170 --> 43:14.870
怎么意思

43:14.870 --> 43:17.070
就是当我们的模块依赖

43:17.070 --> 43:20.270
他没有以底儿鞋杠和鞋杠开头的时候

43:20.270 --> 43:22.070
那么他怎么去找模块

43:22.070 --> 43:23.770
他就他去控制这个玩意

43:23.770 --> 43:24.770
因为这个玩意有什么意义呢

43:24.770 --> 43:26.070
好像没啥意义

43:26.070 --> 43:27.970
如果说你有一天你想自己控制的话

43:27.970 --> 43:29.570
ok 那就那就控制

43:29.570 --> 43:30.670
那就自己控制

43:31.870 --> 43:32.470
那么这里呢

43:32.470 --> 43:33.270
他默认喜欢用这个

43:33.270 --> 43:33.970
对吧

43:33.970 --> 43:35.170
那么这个是什么意思

43:35.170 --> 43:36.570
这个表示的是

43:36.770 --> 43:38.170
前面前面也没有鞋调鞋杠

43:38.170 --> 43:38.870
也没有鞋调鞋杠

43:38.870 --> 43:39.970
就表示了说

43:39.970 --> 43:40.870
啊什么意思

43:40.870 --> 43:41.870
就是如果说你这样鞋了

43:41.870 --> 43:42.770
我怎么找呢

43:42.770 --> 43:43.870
我先找自己的目录下面

43:43.870 --> 43:44.970
有没有load码就是

43:44.970 --> 43:45.570
那么没有的话

43:45.570 --> 43:48.070
必须上一级目录找里面load码就是

43:48.070 --> 43:48.170
好

43:48.170 --> 43:49.070
那么能不能改了

43:49.070 --> 43:49.670
当然可以改

43:49.670 --> 43:50.770
你看我把改成abc

43:51.870 --> 43:52.370
那么对不起

43:52.370 --> 43:54.070
你现在还能找到接query吗

43:54.070 --> 43:58.030
还能找到吗

43:58.030 --> 44:01.960
还能找到接query吗

44:01.960 --> 44:03.060
是不是找不到了

44:03.060 --> 44:05.460
can't resolve接query

44:05.460 --> 44:06.260
是不是找不到了

44:06.260 --> 44:07.360
他肯定找不到了呀

44:07.360 --> 44:08.960
因为他为什么他不从load码

44:08.960 --> 44:10.060
就是你去找了

44:10.060 --> 44:11.160
按照你的配置来找

44:12.160 --> 44:12.660
ok

44:12.660 --> 44:13.560
那么我们这边要说

44:13.560 --> 44:15.360
我们这里在新建个文件夹

44:15.360 --> 44:16.560
abc

44:16.560 --> 44:17.360
新建个文件夹

44:17.360 --> 44:19.360
那么这里该写上一个接query

44:19.360 --> 44:21.460
叫js

44:21.460 --> 44:23.860
march.export

44:23.860 --> 44:25.360
接query

44:25.360 --> 44:28.790
那现在能不能找到

44:28.790 --> 44:29.290
能不能找到

44:29.290 --> 44:30.690
是不是就找到了

44:30.690 --> 44:31.690
就找到了

44:31.690 --> 44:32.990
看看就这么回事

44:32.990 --> 44:34.390
就这么回事

44:34.390 --> 44:35.490
你看现在就

44:35.490 --> 44:36.890
当然就是用的我们那个了

44:36.890 --> 44:38.890
用的我们那个了

44:38.890 --> 44:40.290
就是这个东西是可以配置的

44:40.290 --> 44:40.790
vpack的

44:40.790 --> 44:43.290
它其实很灵活很灵活的

44:43.290 --> 44:44.890
从这个配置以上有意义

44:44.890 --> 44:45.890
没多少意义

44:45.890 --> 44:47.690
没多少意义

44:47.690 --> 44:49.190
当然你可以配置多个路径

44:49.190 --> 44:51.090
比方说我们还可以这样配置

44:51.090 --> 44:53.190
你要从当前src目的去找

44:53.190 --> 44:54.190
先从这个目的去找

44:54.190 --> 44:55.690
找不到就不要返回上级目去找了

44:55.690 --> 44:56.790
因为你写的点鞋杠

44:56.790 --> 44:58.390
就是一个相对路径的

44:58.390 --> 45:00.290
那么表示的是你就从这里找

45:00.290 --> 45:01.290
先从这里找

45:01.290 --> 45:05.480
找一下有没有接query

45:05.480 --> 45:06.880
比方说我们这里

45:06.880 --> 45:10.480
march.export

45:10.480 --> 45:11.780
src接query

45:11.780 --> 45:16.950
那么你现在再看打包

45:16.950 --> 45:18.550
再看打包

45:18.550 --> 45:22.380
打包结果

45:22.380 --> 45:23.580
所以变成这个了

45:23.580 --> 45:25.580
他用的是不是这个结块

45:25.580 --> 45:25.780
对吧

45:25.780 --> 45:27.080
因为你告诉他了

45:27.080 --> 45:28.180
你告诉他了

45:28.180 --> 45:28.780
先从哪里去找

45:28.780 --> 45:30.580
先从点鞋杠src去找

45:30.580 --> 45:32.180
对吧

45:32.180 --> 45:34.380
就这么个意思

45:34.380 --> 45:36.880
这是关于这个配置

45:36.880 --> 45:39.080
当然意义也不大

45:39.080 --> 45:42.380
下一个extension是

45:42.380 --> 45:43.180
这个玩意

45:43.180 --> 45:44.380
我又要说到这个问题了

45:44.380 --> 45:46.180
又回到这个问题了

45:46.180 --> 45:47.080
你看着

45:47.080 --> 45:48.780
我们这里凭用的是什么呢

45:48.780 --> 45:49.580
require

45:49.580 --> 45:51.280
要想想A

45:51.280 --> 45:52.280
对吧

45:52.280 --> 45:54.280
我有没有写A.js

45:54.280 --> 45:56.280
没有

45:56.280 --> 45:57.680
那么现在又回到面试题

45:57.680 --> 45:58.180
但是面试题

45:58.180 --> 46:00.280
他不一般不会问的太细太深

46:00.280 --> 46:01.380
但是这些东西是原理

46:01.380 --> 46:02.680
他有可能会问的

46:02.680 --> 46:04.180
他一般不会问你什么API的东西

46:04.180 --> 46:06.980
但是会问你原理

46:06.980 --> 46:08.680
对原理的就是理解

46:08.680 --> 46:09.980
那么这个东西

46:09.980 --> 46:11.180
他问你

46:11.180 --> 46:17.480
为什么我没有书写后罪名

46:17.480 --> 46:21.680
仍然可以找到

46:21.680 --> 46:22.680
找到什么呢

46:22.680 --> 46:25.180
A.js

46:25.180 --> 46:27.380
为什么

46:27.380 --> 46:29.580
他就问你这个问题

46:29.580 --> 46:32.250
那为什么呢

46:32.250 --> 46:34.350
你回答的时候呢

46:34.350 --> 46:36.350
如果说你谨慎小心

46:36.350 --> 46:40.460
那么你可以这样子回答

46:40.460 --> 46:45.160
因为会自动补权后罪名

46:45.160 --> 46:46.960
这是非常非常小心的回答

46:46.960 --> 46:48.360
但是他拿不到高分

46:48.360 --> 46:52.260
拿不到给大家留不下好的印象

46:52.260 --> 46:53.960
那么

46:53.960 --> 46:57.160
如果说你这样子回答呢

46:57.160 --> 46:58.260
答1

46:58.260 --> 46:59.160
答2

46:59.160 --> 46:59.960
答2是什么呢

46:59.960 --> 47:04.660
因为漏的会自动补权后罪名

47:04.660 --> 47:06.560
这个回答可不可以

47:06.560 --> 47:07.460
说到全面一些

47:07.460 --> 47:07.960
你会告诉他

47:07.960 --> 47:09.660
谁在指补权后罪名

47:09.660 --> 47:11.260
是不是漏的

47:11.260 --> 47:12.160
是不是漏的

47:12.160 --> 47:13.360
这个老问题又来了

47:13.360 --> 47:14.160
是不是漏的

47:14.160 --> 47:15.560
肯定是错误的

47:15.560 --> 47:16.560
这是极端错误的

47:16.560 --> 47:18.060
一定要注意

47:18.060 --> 47:19.260
这个东西跟漏的没关系

47:19.260 --> 47:20.160
这是文件那个

47:20.160 --> 47:21.360
读出来就是个字母创

47:21.360 --> 47:22.360
也就是一个字母创

47:22.360 --> 47:26.860
里边是requirere

47:26.860 --> 47:28.360
就是整个就是个字母创

47:28.360 --> 47:29.260
跟漏的有啥关系呢

47:29.260 --> 47:31.360
他不会运行这个代码的

47:31.360 --> 47:32.960
那么是谁在运行

47:32.960 --> 47:34.860
答3

47:34.960 --> 47:40.760
因为webpike会自动补权

47:40.760 --> 47:42.860
补权后罪名

47:42.860 --> 47:44.960
这才是正确的

47:44.960 --> 47:48.160
webpike会补权后罪名

47:48.160 --> 47:49.260
那么现在呢

47:49.260 --> 47:52.560
他说了个场景

47:52.560 --> 47:55.160
一定是在webpike环境下边

47:55.160 --> 47:57.260
那么webpike怎么来补权后罪名的呢

47:57.260 --> 47:59.160
他就是通过这个配置

47:59.160 --> 48:00.460
extension是

48:00.460 --> 48:01.260
这个配置是什么

48:01.260 --> 48:02.560
配置的就是后罪

48:02.560 --> 48:03.760
你搞清楚这些原因过后

48:03.860 --> 48:07.860
你要理解这些东西特别好理解的

48:07.860 --> 48:08.860
他说默认值是什么

48:08.860 --> 48:10.660
默认值是.js

48:10.660 --> 48:11.560
.json

48:11.560 --> 48:12.960
默认值就是这个

48:12.960 --> 48:13.360
所以说呢

48:13.360 --> 48:14.360
当你没有写后罪的时候

48:14.360 --> 48:15.160
他先去看

48:15.160 --> 48:16.160
先去看这个目录下面

48:16.160 --> 48:17.260
有没有A.js

48:17.260 --> 48:17.960
没有的话再看一下

48:17.960 --> 48:19.660
有没有A.js

48:19.660 --> 48:20.260
如果都没有的话

48:20.260 --> 48:21.760
就找不到目画了

48:21.760 --> 48:22.860
就这么个意思

48:22.860 --> 48:23.760
能不能讲

48:23.760 --> 48:26.360
webpike他会自动补权后罪名

48:26.360 --> 48:28.560
webpike会自动补权

48:28.560 --> 48:29.760
是这么个意思

48:29.760 --> 48:32.460
那么再回答完整一点

48:32.460 --> 48:36.460
会根据extension

48:36.460 --> 48:41.170
使得配置自动补权后罪名

48:41.170 --> 48:41.770
OK

48:41.770 --> 48:42.670
那咱们来

48:42.670 --> 48:43.670
整个这个result

48:43.670 --> 48:44.970
都是在解析模块

48:44.970 --> 48:46.070
跟解析模块相关的

48:46.070 --> 48:47.370
你看解析的路径

48:47.370 --> 48:47.570
对吧

48:47.570 --> 48:48.670
找模块的路径

48:48.670 --> 48:50.270
然后找模块的就是后罪

48:50.270 --> 48:51.070
默认后罪

48:51.070 --> 48:51.970
那么这里表装的

48:51.970 --> 48:52.970
还可以往后边

48:52.970 --> 48:53.870
直接加一些

48:53.870 --> 48:54.370
比方说

48:54.370 --> 48:55.170
json也找不到

48:55.170 --> 48:55.770
json也找不到

48:55.770 --> 48:56.870
咱就找css

48:56.870 --> 48:57.370
那么这样子

48:57.370 --> 48:58.370
咱就导入css文件

48:58.370 --> 48:59.870
也不用写后罪了

48:59.870 --> 49:01.370
对吧

49:01.370 --> 49:02.970
比方说里面以后学无诱

49:02.970 --> 49:03.770
学无诱的时候

49:03.770 --> 49:05.070
你还会遇到这种文件

49:05.070 --> 49:06.270
调无诱文件

49:06.270 --> 49:07.670
那么这个调无诱文件

49:07.670 --> 49:08.970
我也可以把加到后罪里面去

49:08.970 --> 49:09.570
我这样子

49:09.570 --> 49:11.070
我也可以省略后罪了

49:11.070 --> 49:12.770
也不用写后罪了

49:12.770 --> 49:14.570
比方说你以后学react

49:14.570 --> 49:15.570
你还会遇到这种文件

49:15.570 --> 49:16.570
jsonx文件

49:16.570 --> 49:17.970
那么这样子写进去

49:17.970 --> 49:18.770
那么是不是这种文件

49:18.770 --> 49:19.770
也不用写后罪了

49:19.770 --> 49:19.970
对吧

49:19.970 --> 49:21.070
也可以不用写后罪了

49:21.070 --> 49:22.070
就哪怕这个

49:22.070 --> 49:24.570
哪怕就是这是个jsx

49:24.570 --> 49:26.270
你看是一个jsx的文件

49:26.270 --> 49:27.770
那么仍然可以导入

49:27.770 --> 49:29.270
因为我这里写了jsx

49:29.270 --> 49:30.070
来看吗

49:30.070 --> 49:31.070
直接看

49:31.070 --> 49:34.260
直接看结果

49:34.260 --> 49:35.060
是不是可以导入

49:35.060 --> 49:35.560
对吧

49:35.560 --> 49:36.560
jsx

49:36.560 --> 49:37.760
为什么他能识别这样的后罪

49:37.760 --> 49:38.760
因为你自己配置了

49:38.760 --> 49:40.060
这些东西都是高速webhike

49:40.060 --> 49:41.060
跟load没有任何关系

49:42.160 --> 49:43.160
好下面这个

49:43.160 --> 49:44.560
erliers

49:44.560 --> 49:45.660
erliers表示什么意思呢

49:45.660 --> 49:47.160
表示别名

49:47.160 --> 49:48.860
应该有见过

49:48.860 --> 49:51.060
那么这个别名有什么意义呢

49:51.060 --> 49:52.360
他默认是啥都没有

49:52.360 --> 49:53.460
默认啥都没有

49:53.460 --> 49:54.660
就是说有的时候

49:54.660 --> 49:55.760
他仅仅是让你写代码

49:55.760 --> 49:57.160
变得方便一点

49:57.160 --> 49:58.160
你看着

49:58.160 --> 49:58.960
比方说我们这样配置

49:58.960 --> 50:02.440
我这个要复制过来吧

50:02.440 --> 50:04.040
我这里的配置有两个别名

50:04.040 --> 50:05.340
一个别名叫做etard

50:05.340 --> 50:06.640
当然这是个对象的属性

50:06.640 --> 50:07.040
对吧

50:07.040 --> 50:07.740
对象的属性名

50:07.740 --> 50:08.840
你可以随便用什么东西

50:08.840 --> 50:10.240
只不过我用了一些特殊制服

50:10.240 --> 50:12.540
所以说干脆有双引号引起来

50:12.540 --> 50:15.140
把它做成一个就是表达式属性

50:15.140 --> 50:16.140
当然你可以用别的

50:16.140 --> 50:17.640
任何属性名都可以

50:17.640 --> 50:18.740
总之你这个属性名

50:18.740 --> 50:20.640
那就是你的别名的名称

50:20.640 --> 50:21.740
这是别名etard

50:21.740 --> 50:22.840
别名

50:22.840 --> 50:23.940
下滑线

50:23.940 --> 50:25.840
下滑线

50:25.840 --> 50:26.840
那么有了这样的别名

50:26.840 --> 50:28.340
那时候他会影响什么呢

50:28.340 --> 50:29.540
你看我这么配置的

50:29.540 --> 50:31.540
我配置的是一个绝对路径

50:31.540 --> 50:32.740
etard的绝对路径是什么呢

50:34.140 --> 50:36.140
我导入这个pass

50:36.140 --> 50:39.340
底面这里必须要配置绝对路径

50:39.340 --> 50:41.040
那么这里是不是得到这个src

50:41.040 --> 50:42.540
这个目录作为绝对路径

50:42.540 --> 50:43.440
对吧

50:43.440 --> 50:44.740
然后这里是不是当前目录

50:44.740 --> 50:46.340
就这个跟目录作为绝对路径

50:46.340 --> 50:47.440
对吧

50:47.440 --> 50:48.440
那有什么意义呢

50:48.440 --> 50:49.840
你看着有了别名过后

50:49.840 --> 50:51.840
之后我再使用导入模

50:51.840 --> 50:52.640
它会影响什么

50:52.640 --> 50:54.340
它会影响导入模块

50:54.340 --> 50:56.140
它的路径书写

50:56.140 --> 50:57.940
比方说

50:57.940 --> 51:01.740
我们这样

51:01.740 --> 51:05.240
我们在index.js里面

51:05.240 --> 51:07.840
导入一个

51:07.840 --> 51:09.240
导入一个什么呢

51:09.240 --> 51:12.640
导入一个a下面的b下面的c下面的

51:12.640 --> 51:14.640
d.js

51:14.640 --> 51:16.340
当然我可以不嫌后嘴

51:16.340 --> 51:18.040
你看有一个文念夹

51:18.040 --> 51:19.140
a

51:19.140 --> 51:21.140
然后再一个文念夹b

51:21.140 --> 51:22.640
再一个文念夹c

51:22.640 --> 51:23.740
就是有的是工程大了

51:23.740 --> 51:25.740
它可能签到的比较深有些东西

51:25.740 --> 51:27.440
d.js

51:27.440 --> 51:29.040
好d.js又要导入

51:29.040 --> 51:29.840
导入什么呢

51:29.840 --> 51:34.040
导入src目录下面的

51:34.140 --> 51:35.240
新建文件

51:36.240 --> 51:38.840
rc调解释

51:38.840 --> 51:40.240
好d.js要导入什么呢

51:40.240 --> 51:41.640
要导入require

51:42.740 --> 51:43.740
rc调解释

51:43.740 --> 51:44.740
怎么办

51:44.740 --> 51:45.540
返回上节目录

51:45.540 --> 51:46.340
返回上节目录

51:46.340 --> 51:47.140
返回上节目录

51:47.140 --> 51:48.140
返回上节目录

51:50.550 --> 51:51.550
多了

51:51.550 --> 51:52.450
上节目录

51:52.450 --> 51:53.450
然后rc

51:53.450 --> 51:54.250
对吧

51:54.250 --> 51:55.850
是不是可以用这种方式来导入

51:56.850 --> 51:57.850
没问题吧

51:57.850 --> 52:00.250
那么这种方式是不是鞋鞋特别恶心了

52:00.250 --> 52:01.450
特别特别恶心

52:01.450 --> 52:01.850
对吧

52:01.850 --> 52:03.050
这样子鞋鞋太恶心了

52:03.050 --> 52:04.050
以后有的时候

52:04.050 --> 52:04.850
签诺的层次多了

52:04.850 --> 52:05.750
就会出现这种问题

52:07.350 --> 52:08.250
那么这个时候

52:08.250 --> 52:10.250
我们就可以利用这个别名

52:10.250 --> 52:11.250
我们这里订了一个别名

52:11.250 --> 52:12.450
叫ata

52:12.450 --> 52:15.050
ata它是不是指向了src这个决定路径

52:15.050 --> 52:15.550
对吧

52:15.550 --> 52:17.050
那么我们在这里

52:17.050 --> 52:19.250
前边我们是不是要导入的是src

52:19.250 --> 52:20.450
这个目录下面的r

52:20.450 --> 52:22.050
那么我们前边直接用一个ata

52:23.050 --> 52:23.750
它会影响什么

52:23.750 --> 52:25.350
它会影响我们导入的时候

52:25.350 --> 52:25.950
那个路径书写

52:25.950 --> 52:26.850
它就影响这个地方

52:26.850 --> 52:28.250
其他地方跟它没关系

52:28.250 --> 52:29.150
它就影响这个地方

52:30.250 --> 52:31.850
导入模块的时候

52:31.850 --> 52:34.250
它的那个路径的书写

52:34.250 --> 52:36.850
那么我们可以使用别名在进行替代

52:36.850 --> 52:39.650
那么这个ata就表示的是src的这个目录

52:39.650 --> 52:43.240
你看这样子仍然没问题

52:43.240 --> 52:43.540
影响

52:44.540 --> 52:45.640
你看是不是打包了

52:45.640 --> 52:45.840
对吧

52:45.840 --> 52:47.540
你看第二阶级是R的阶级

52:47.540 --> 52:48.640
是不是都进来了

52:48.640 --> 52:49.040
对吧

52:49.040 --> 52:49.940
打包到结果里面

52:49.940 --> 52:51.640
结果里面是不可能有别名的

52:51.640 --> 52:53.740
结果里面就正常的路径了

52:53.740 --> 52:57.180
它是不可能有别名的

52:57.180 --> 52:57.380
OK

52:57.380 --> 53:01.880
这是关于别名

53:01.880 --> 53:02.980
当然别名可以有多个

53:02.980 --> 53:04.680
还要配这个别名就当前目录

53:04.680 --> 53:07.280
比方说你还导入的是abc掉结果里面的东西

53:07.280 --> 53:08.880
那你可以用下滑线

53:08.880 --> 53:09.480
对吧

53:09.480 --> 53:09.980
都可以

53:09.980 --> 53:10.580
都可以

53:10.580 --> 53:11.880
就是关于别名

53:11.880 --> 53:13.580
别名它主要是起这么一个目的

53:13.580 --> 53:14.480
让我们有的时候

53:14.480 --> 53:15.780
路径比较深的时候

53:15.780 --> 53:17.680
使用别名更加方便

53:20.480 --> 53:20.880
好

53:20.880 --> 53:22.080
然后再往下看

53:22.080 --> 53:22.880
extradors

53:24.080 --> 53:24.280
好

53:24.280 --> 53:26.580
这个东西就跟resolve没关系了

53:26.580 --> 53:28.380
extradors

53:28.380 --> 53:31.200
这个玩意是啥呢

53:31.200 --> 53:33.200
它指的是呢

53:33.200 --> 53:35.700
有一种非常有意识的情况

53:35.800 --> 53:40.850
比方说我们这样子配置

53:40.850 --> 53:43.460
你看着啊

53:43.460 --> 53:43.760
嗯

53:43.760 --> 53:47.590
我们在这里

53:47.590 --> 53:49.290
把这个把这个东西关了啊

53:49.290 --> 53:50.590
关系了

53:50.590 --> 53:51.690
extradors

53:51.690 --> 53:54.090
它表示的是y部模块

53:54.090 --> 53:55.690
你看我这样配置

53:55.690 --> 53:59.290
Jquery,Dollar,Nodash,下滑线

53:59.290 --> 54:00.490
这是啥意思呢

54:00.490 --> 54:01.890
那么我们先说一下

54:01.890 --> 54:03.490
每一个这个配置

54:03.490 --> 54:05.390
会怎么样

54:05.390 --> 54:05.590
好

54:05.590 --> 54:07.390
比方说我们的index里边

54:07.390 --> 54:08.690
要引用两个包

54:08.690 --> 54:11.700
一个是Jquery

54:11.700 --> 54:12.600
Jquery

54:12.600 --> 54:13.700
一个是Nodash

54:13.700 --> 54:14.700
Nodash我们有安装

54:14.700 --> 54:15.300
对吧

54:15.300 --> 54:15.500
好

54:15.500 --> 54:16.200
安装一下

54:16.200 --> 54:17.500
npm iNodash

54:18.700 --> 54:19.100
好

54:19.100 --> 54:19.700
require

54:20.700 --> 54:21.500
Nodash

54:22.800 --> 54:23.100
ok

54:26.400 --> 54:26.600
好

54:26.600 --> 54:27.800
那么我们导入Jquery

54:27.800 --> 54:29.000
导入Nodash

54:29.000 --> 54:30.000
接下来我们来看一下

54:30.000 --> 54:31.000
输出结果

54:32.000 --> 54:35.580
看一下输出结果

54:35.580 --> 54:36.580
npm

54:36.580 --> 54:37.180
不

54:37.180 --> 54:42.860
npxwebpack

54:42.860 --> 54:43.060
好

54:43.060 --> 54:44.860
那么我们看一下dist

54:44.860 --> 54:45.660
输出结果

54:46.660 --> 54:49.060
输出结果里边

54:49.060 --> 54:51.560
你可以看到代码就变得非常多

54:51.560 --> 54:52.160
看到没

54:52.960 --> 54:53.760
你看

54:53.760 --> 54:54.460
Jquery代码

54:54.460 --> 54:55.560
是不是要把Jquery的原代码

54:55.560 --> 54:56.360
全部放在这

54:56.360 --> 54:56.760
对吧

54:56.760 --> 54:57.960
全部放在这一大堆

54:57.960 --> 54:58.760
你看

54:58.760 --> 54:59.460
这就是多好了

54:59.460 --> 55:00.960
一万多行的代码

55:00.960 --> 55:02.760
Nodash代码是不是也要放到这

55:02.760 --> 55:03.560
对吧

55:03.560 --> 55:06.760
这是一万七千多行的Nodash代码

55:06.760 --> 55:08.760
然后我们的global.js

55:08.760 --> 55:10.160
还有

55:10.160 --> 55:11.960
因为它有一代别的模块

55:12.460 --> 55:15.660
这是webpack里边的模块

55:15.660 --> 55:16.660
它也导出来了

55:16.660 --> 55:17.260
没关系

55:17.260 --> 55:17.660
我们发现

55:17.660 --> 55:17.860
你看

55:17.860 --> 55:18.860
代码是不是特别多

55:18.860 --> 55:20.560
最终我们的index.js模块

55:20.560 --> 55:21.460
是不是在这

55:21.460 --> 55:22.260
对吧

55:23.060 --> 55:24.660
那么这个本来没问题

55:24.660 --> 55:25.460
是没问题

55:25.460 --> 55:27.460
因为我们代码的要用到结果

55:27.460 --> 55:28.660
它肯定要打包进去

55:28.660 --> 55:30.460
要用到Nodash肯定要打包进去

55:30.460 --> 55:30.960
对不对

55:30.960 --> 55:32.260
我现在说的不是优化

55:32.260 --> 55:32.860
现在不是优化

55:32.860 --> 55:34.060
我们后面会单独来张来

55:34.060 --> 55:34.960
就想优化

55:34.960 --> 55:37.460
但是现在遇到这么一个问题

55:37.460 --> 55:39.260
特别奇葩这个问题

55:40.260 --> 55:41.960
我的网站上

55:43.960 --> 55:45.960
不需要你给我导入Jquery

55:45.960 --> 55:47.960
把Jquery混合到这里边

55:47.960 --> 55:49.760
你这个原代码开发无所谓

55:49.760 --> 55:51.160
我原代码开发我不管你

55:51.160 --> 55:52.560
但是我最终在我页面上

55:52.560 --> 55:54.360
可能是这么一种情况

55:54.360 --> 55:55.760
我的Jquery

55:55.760 --> 55:59.740
希望你引用的是一个CDN

55:59.740 --> 56:00.140
我看一下

56:00.140 --> 56:01.940
这Jquery的CDN

56:01.940 --> 56:05.970
Jquery CDN

56:05.970 --> 56:06.770
这是

56:06.770 --> 56:08.570
它官方的坛方的坛方的坛方

56:08.570 --> 56:08.970
看一下

56:09.970 --> 56:10.170
好

56:10.270 --> 56:11.870
我们再复制一下链接

56:11.870 --> 56:12.470
复制一下标签

56:13.670 --> 56:14.070
ok

56:14.070 --> 56:16.070
这Jquery的CDN

56:16.070 --> 56:18.470
最终我是这样引用的

56:18.470 --> 56:19.570
比方说我就要这样引用

56:19.570 --> 56:20.470
怎么样

56:20.470 --> 56:22.870
我希望我最终打包结果是这样子的

56:22.870 --> 56:24.670
我Jquery我会单独去引用它

56:24.670 --> 56:25.970
不用你不用你管

56:25.970 --> 56:27.270
就是这个Jquery不用你管

56:27.270 --> 56:27.770
跟你没关系

56:27.770 --> 56:29.270
我要自己搞定它

56:29.270 --> 56:30.070
然后

56:31.470 --> 56:32.870
还有一个Nodash对吧

56:32.870 --> 56:36.850
Nodash我用的是也是CDN

56:36.850 --> 56:38.050
我看一下Nodash

56:41.490 --> 56:41.890
CDN

56:43.490 --> 56:44.190
ok

56:44.190 --> 56:45.890
复制Nodash

56:45.890 --> 56:46.090
ok

56:49.490 --> 56:50.290
那你看啊

56:50.290 --> 56:51.390
那么第一个Jquery

56:51.390 --> 56:53.890
它包到的一个全局变量是不是多了

56:53.890 --> 56:55.390
Nodash包到的全局变量

56:55.390 --> 56:55.990
是

56:55.990 --> 56:58.090
就是我们用传统的方式来引用

56:58.090 --> 56:59.690
我是用这种方式来引用的

56:59.690 --> 57:01.290
包到的全局变量是不是多了

57:01.290 --> 57:02.290
下滑线

57:02.290 --> 57:02.890
对吧

57:02.890 --> 57:04.290
也就是说啥呢

57:04.290 --> 57:06.390
如果说我们有这样的一个要求

57:06.390 --> 57:08.490
就是说我不干涉原代码怎么写

57:08.490 --> 57:10.090
原代码爱怎么写怎么写

57:10.090 --> 57:12.490
我只是说在打包结果里边

57:12.490 --> 57:13.890
你要考虑到这么一种场景

57:13.890 --> 57:15.590
就是JqueryNodash

57:15.590 --> 57:16.590
我们肯定用了

57:16.590 --> 57:17.690
都已经引用进来了

57:17.690 --> 57:20.890
不用你化蛇天竺的往这个打包结果里边

57:20.890 --> 57:23.790
给我再给我按进去

57:23.790 --> 57:24.490
按那么多干嘛了

57:24.490 --> 57:26.090
我已经引用进来了

57:26.090 --> 57:27.890
那么这个时候面对这样的场景

57:27.890 --> 57:28.290
怎么办

57:28.290 --> 57:29.890
你就可以使用Xterros

57:31.590 --> 57:33.090
就可以使用这个

57:33.090 --> 57:34.690
那么这个就是告诉他

57:34.690 --> 57:35.890
遇到哪一个包

57:35.890 --> 57:37.990
我不用你哭啊

57:37.990 --> 57:39.390
用到哪一个包

57:39.390 --> 57:41.690
我不用你形成最终的打包结果

57:41.690 --> 57:43.190
就是最终打包结果里边

57:43.190 --> 57:44.190
你不要有他

57:44.190 --> 57:45.090
不要有他

57:45.090 --> 57:46.490
该不该有他该

57:46.490 --> 57:47.090
但是呢

57:47.090 --> 57:48.190
遇到这个配置过后

57:48.190 --> 57:49.890
你就不要有他了

57:49.890 --> 57:51.090
就是我们自己已经处理了

57:51.090 --> 57:52.490
你不要有他了

57:52.490 --> 57:53.890
那么这个玩意是什么呢

57:53.890 --> 57:55.290
这个玩意是

57:55.290 --> 57:56.290
你看一下就明白了

57:56.290 --> 57:57.090
你看一下我这些说

57:57.090 --> 57:58.390
说半天就不明白

57:58.390 --> 58:02.680
现在我给你打包一次

58:02.680 --> 58:03.580
打包完成

58:03.580 --> 58:04.580
打包完成你看一下

58:04.580 --> 58:04.880
解释

58:07.680 --> 58:08.280
卡住了

58:08.280 --> 58:08.880
我卡住了

58:08.880 --> 58:10.780
我这卡住了

58:16.340 --> 58:17.440
ok ok ok

58:17.540 --> 58:18.340
他其实已经变了

58:18.340 --> 58:18.940
刚才

58:21.340 --> 58:24.960
怎么了

58:24.960 --> 58:26.260
怎么我卡住了

58:27.760 --> 58:28.160
重新来啊

58:28.160 --> 58:28.860
把我删掉

58:28.860 --> 58:29.760
重新来

58:29.760 --> 58:30.860
怎么回事

58:30.860 --> 58:34.740
再来打包

58:34.740 --> 58:36.140
好打出来了

58:36.140 --> 58:36.940
你那个时候介绍

58:38.240 --> 58:39.140
怎么还有这么多代码

58:40.740 --> 58:41.540
我没保我存

58:41.540 --> 58:42.640
配置没保我存

58:42.640 --> 58:45.960
再来重新来

58:45.960 --> 58:47.260
好搞定了

58:47.260 --> 58:48.360
你那个时候介绍

58:48.360 --> 58:48.960
你看一下

58:48.960 --> 58:50.660
现在是不是只剩100多行了

58:50.660 --> 58:51.860
那东西代码到哪去了

58:51.860 --> 58:52.260
都不见了

58:52.260 --> 58:52.960
你看

58:52.960 --> 58:53.560
怎么不见的

58:53.660 --> 58:54.560
你看着怎么不见的

58:54.560 --> 58:55.660
现在只剩三个模块

58:55.660 --> 58:56.360
已经这个时候了解

58:56.360 --> 58:57.460
也是是不是导入一个结块

58:57.460 --> 58:58.560
也导入一个楼大戏

58:58.560 --> 58:59.460
本来的结块里面

58:59.460 --> 59:01.360
是不是代码非常非常多

59:01.360 --> 59:02.260
不好意思

59:02.260 --> 59:03.460
现在不用这么多了

59:03.460 --> 59:04.060
我结块里面

59:04.060 --> 59:05.460
代码就变成了一行代码

59:05.460 --> 59:06.460
导出导出一个什么

59:06.460 --> 59:07.960
导出一个多了

59:07.960 --> 59:08.760
多了哪来的

59:08.760 --> 59:10.160
多了就是这里的配置

59:10.160 --> 59:11.960
这个多了就表示他导出了结果

59:11.960 --> 59:13.560
把结块这个模块替换为

59:13.560 --> 59:15.060
导出一个多了

59:15.060 --> 59:16.360
把楼大戏的模块替换为

59:16.360 --> 59:18.260
导出一个下滑线

59:18.260 --> 59:19.060
你看

59:19.060 --> 59:20.560
楼大戏的模块导出一个下滑线

59:20.660 --> 59:21.760
为什么这里可以使用多了

59:21.760 --> 59:23.060
可以使用下滑线

59:23.060 --> 59:24.860
因为我们知道在页面上

59:24.860 --> 59:26.060
就已经把结块导入进来了

59:26.060 --> 59:27.960
是不是给了一个权距变量多了

59:27.960 --> 59:29.060
在这里是不是把一个

59:29.060 --> 59:30.560
把楼大戏导入进来了

59:30.560 --> 59:33.060
是不是给了一个权距变量下滑线

59:33.060 --> 59:33.860
对吧

59:33.860 --> 59:34.860
因此呢

59:34.860 --> 59:36.460
你在英特斯的GS里面

59:36.460 --> 59:39.260
是不是就可以使用多了和下滑线了

59:39.260 --> 59:39.560
对吧

59:39.560 --> 59:40.260
我在这里

59:40.260 --> 59:41.660
在这个模块里面把多了导出

59:41.660 --> 59:43.760
在这个模块里面把下滑线导出

59:43.760 --> 59:44.460
那么在这里

59:44.460 --> 59:45.460
我们导入这个结块里面

59:45.460 --> 59:47.560
是不是相当于把个多了导进来了

59:47.560 --> 59:47.760
对吧

59:47.760 --> 59:48.760
就是个权距变量

59:48.760 --> 59:50.960
导入楼大戏是不是把个下滑线导入进来了

59:50.960 --> 59:51.260
对吧

59:51.260 --> 59:51.860
这样子呢

59:51.860 --> 59:52.760
我们这个模块里面

59:52.760 --> 59:53.560
它就不会有结块

59:53.560 --> 59:54.460
有很多大戏的代码

59:54.460 --> 59:55.260
就这么个意思

59:55.260 --> 59:57.060
它这个配置就搞定这件事情的

59:57.060 --> 59:58.760
就是说我希望我最终的

59:58.760 --> 01:00:00.560
最终形成的打包文件里边

01:00:00.560 --> 01:00:01.760
它不要有这些东西

01:00:01.760 --> 01:00:02.560
不要有结块

01:00:02.560 --> 01:00:03.560
不要有楼大戏

01:00:03.560 --> 01:00:05.360
把结块给我替换成一个多了导出

01:00:05.360 --> 01:00:07.160
把楼大戏给我替换成一个下滑线导出

01:00:07.160 --> 01:00:08.460
就这么个意思

01:00:08.460 --> 01:00:09.360
没有别的

01:00:09.360 --> 01:00:10.560
那么现在我们看一下

01:00:10.560 --> 01:00:11.860
在英特斯里面

01:00:11.860 --> 01:00:16.060
比方说我们得到结块

01:00:20.860 --> 01:00:22.760
不是说必须要写多了

01:00:22.760 --> 01:00:23.660
这里可以随便写

01:00:23.660 --> 01:00:24.060
结块

01:00:27.860 --> 01:00:29.460
没办法说输出结块

01:00:29.460 --> 01:00:30.060
输出

01:00:31.260 --> 01:00:31.760
看一下

01:00:31.760 --> 01:00:35.650
行不行

01:00:35.650 --> 01:00:36.350
运行

01:00:36.350 --> 01:00:37.250
没问题

01:00:37.250 --> 01:00:38.050
没问题

01:00:38.050 --> 01:00:38.350
你看

01:00:39.550 --> 01:00:40.350
再看一下

01:00:40.350 --> 01:00:41.050
你看结块

01:00:41.050 --> 01:00:41.450
导出什么

01:00:41.450 --> 01:00:42.050
导出的就是多了

01:00:42.050 --> 01:00:43.650
多的是一开始就引用了的

01:00:43.650 --> 01:00:43.850
对吧

01:00:43.850 --> 01:00:45.250
引用结块还暴露了权距变量

01:00:45.250 --> 01:00:46.250
没问题的

01:00:46.250 --> 01:00:47.450
那么这里

01:00:47.450 --> 01:00:49.350
楼大戏导出的是下滑线

01:00:49.350 --> 01:00:51.150
那么我们导入的结块

01:00:51.150 --> 01:00:52.150
导入结块的相当于是什么

01:00:52.150 --> 01:00:54.850
相当于是把个多段负责给了结Q

01:00:54.850 --> 01:00:55.450
导入的楼大戏

01:00:55.450 --> 01:00:57.550
相当于是把个下滑线负责给了LO

01:00:57.550 --> 01:00:58.950
那么这里输出是不是没问题

01:00:58.950 --> 01:00:59.350
好看一下

01:01:01.150 --> 01:01:01.950
看一下

01:01:01.950 --> 01:01:02.350
你看

01:01:02.350 --> 01:01:03.750
是不是两个都没问题

01:01:03.750 --> 01:01:06.150
结块都没问题的

01:01:06.150 --> 01:01:08.350
那么就适用于这种情况

01:01:08.350 --> 01:01:09.850
就是我在打包结果里面

01:01:09.850 --> 01:01:10.750
不希望有它

01:01:10.750 --> 01:01:12.050
那么这种情况的好处在什么呢

01:01:12.050 --> 01:01:12.450
你看一下

01:01:14.050 --> 01:01:16.350
下面我给大家做了一个小解释

01:01:16.350 --> 01:01:17.450
本来是这样子的

01:01:17.450 --> 01:01:18.750
结块里面有大量代码

01:01:18.750 --> 01:01:20.150
楼大戏里面有大量代码

01:01:20.150 --> 01:01:22.050
那么使用了这个配置过后

01:01:22.050 --> 01:01:22.750
它就变成什么了

01:01:22.750 --> 01:01:24.150
反而是遇到结块里面的模块

01:01:24.150 --> 01:01:25.550
变成这个样子

01:01:25.550 --> 01:01:27.150
楼大戏里面还变成这个样子

01:01:27.150 --> 01:01:28.250
这比较适用于什么

01:01:28.250 --> 01:01:29.350
一些第三方困来

01:01:29.350 --> 01:01:31.350
至于外部CDN

01:01:31.350 --> 01:01:32.550
就像我们刚才的样子

01:01:32.550 --> 01:01:33.350
那么这样以来

01:01:33.350 --> 01:01:35.150
既可以在页面中使用CDN

01:01:35.150 --> 01:01:35.950
你看我们在页面中

01:01:35.950 --> 01:01:36.750
是不是可以使用CDN

01:01:36.750 --> 01:01:37.850
用就行了

01:01:37.850 --> 01:01:39.450
以后让bond的体积更小

01:01:39.450 --> 01:01:40.950
是不是bond里面就不会有更多

01:01:40.950 --> 01:01:41.850
那些关系八个东西了

01:01:41.850 --> 01:01:43.450
没有结块也没有楼大戏了

01:01:43.450 --> 01:01:45.850
以后不会影响原码的编写

01:01:45.850 --> 01:01:47.050
这个很重要

01:01:47.050 --> 01:01:48.550
就是我在写原代码的时候

01:01:48.550 --> 01:01:49.450
写的这边写的时候

01:01:49.550 --> 01:01:50.850
我管你这个结块老来的

01:01:50.850 --> 01:01:51.550
反正我就这样写

01:01:51.550 --> 01:01:53.150
我一旦结块我就倒入结块了

01:01:53.150 --> 01:01:53.650
我一旦都淡写

01:01:53.650 --> 01:01:54.950
我就倒入紧都淡写

01:01:54.950 --> 01:01:55.650
是这么个意思

01:01:55.650 --> 01:01:56.450
听懂了吗

01:01:56.450 --> 01:01:58.250
就是它不会影响原代码的编写

01:01:58.250 --> 01:02:00.950
我们以后如果说我不希望这么干了

01:02:00.950 --> 01:02:03.750
我完全不用去动这个原代码

01:02:03.750 --> 01:02:04.950
是不是完全不用动这个原代码

01:02:04.950 --> 01:02:07.350
原代码没有跟它没有任何关系

01:02:07.350 --> 01:02:09.250
我们只需要修改配置就行了

01:02:09.250 --> 01:02:10.750
把配置一删

01:02:10.750 --> 01:02:11.650
所以啥都完了

01:02:11.650 --> 01:02:12.350
啥都完事了

01:02:12.350 --> 01:02:13.650
又变成之前的传统

01:02:13.650 --> 01:02:15.450
之前的那种方式了

01:02:15.450 --> 01:02:16.650
就是我跟我们的配置相关

01:02:16.650 --> 01:02:18.050
跟原代码就没关系

01:02:18.050 --> 01:02:19.950
原代码我们该咋写就咋写

01:02:19.950 --> 01:02:21.050
对吧

01:02:21.050 --> 01:02:21.850
是这么个意思

01:02:24.250 --> 01:02:26.550
那么这是关于这个

01:02:26.550 --> 01:02:29.150
最后内容是挺多的

01:02:29.150 --> 01:02:31.050
这些内容你们以后遇到了才用

01:02:31.050 --> 01:02:32.850
不遇到的话就有这么个印象就行了

01:02:32.850 --> 01:02:34.850
下来还是去写一些

01:02:34.850 --> 01:02:36.050
也蛮有意思的这些东西

01:02:37.250 --> 01:02:39.750
stats就表示状态

01:02:39.750 --> 01:02:40.450
控制的是啥呢

01:02:40.450 --> 01:02:42.350
这个控制就更加细致摸截了

01:02:42.350 --> 01:02:45.150
就是你如果说你不管它就不管它了

01:02:45.150 --> 01:02:49.650
没有任何的就是其他的作用

01:02:49.650 --> 01:02:52.850
它就是控制勾件过程中

01:02:52.850 --> 01:02:54.150
控制台的输出内容

01:02:54.150 --> 01:02:54.950
就控制这个

01:02:54.950 --> 01:02:56.150
它控制这些输出的

01:02:56.150 --> 01:02:57.250
它控制这些玩意的

01:02:57.250 --> 01:02:58.050
看一看吧

01:02:58.050 --> 01:02:58.950
看一看就得了

01:02:58.950 --> 01:03:00.850
这些东西有兴趣的东西

01:03:00.850 --> 01:03:02.850
可以去多了解一下

01:03:04.750 --> 01:03:06.350
看一下吧

01:03:06.350 --> 01:03:07.650
我们这里写个

01:03:07.650 --> 01:03:08.450
看一下中文文档

01:03:09.850 --> 01:03:10.450
这里一个配置

01:03:12.350 --> 01:03:13.550
我应该把这个放进来

01:03:14.550 --> 01:03:16.550
这哪里的

01:03:18.550 --> 01:03:20.550
配置里边的stats

01:03:20.550 --> 01:03:21.550
统计信息

01:03:21.550 --> 01:03:22.550
在这里边

01:03:22.550 --> 01:03:23.750
你可以一般来说

01:03:23.750 --> 01:03:24.550
我们会把它

01:03:24.550 --> 01:03:25.550
它有一些默认值

01:03:25.550 --> 01:03:27.550
而且有一些制服创的方式

01:03:27.550 --> 01:03:29.550
比如arrows only

01:03:29.550 --> 01:03:30.550
表示什么意思呢

01:03:30.550 --> 01:03:32.050
表示只在错误的时候

01:03:32.050 --> 01:03:32.550
才会有输出

01:03:32.550 --> 01:03:33.550
才会在控制台有输出

01:03:33.550 --> 01:03:36.050
其他时候不会在控制台有任何输出

01:03:36.050 --> 01:03:37.550
minimum

01:03:37.550 --> 01:03:39.050
只有在发生错误

01:03:39.050 --> 01:03:41.550
或者有新的编译的时候

01:03:41.550 --> 01:03:42.550
才会输出

01:03:43.050 --> 01:03:44.550
就是他们有一些

01:03:44.550 --> 01:03:45.550
默认的一些值

01:03:45.550 --> 01:03:47.550
给你规定好的一些值

01:03:47.550 --> 01:03:49.550
但是我们要做精细的控制的话

01:03:49.550 --> 01:03:52.550
我们一般把它配置成一个对象

01:03:52.550 --> 01:03:56.050
其实很少去配置它

01:03:56.050 --> 01:03:57.050
就是如果你实在看不惯

01:03:57.050 --> 01:03:58.050
它控制台里边输出的东西

01:03:58.050 --> 01:04:00.050
那么你可以去配置一下

01:04:00.050 --> 01:04:01.050
stats

01:04:01.050 --> 01:04:02.050
比方说我给大家去看一下吧

01:04:02.050 --> 01:04:03.050
colors

01:04:03.050 --> 01:04:04.050
这个东西有意思

01:04:05.050 --> 01:04:06.050
表示什么意思呢

01:04:06.050 --> 01:04:07.050
控制台里边输出

01:04:07.050 --> 01:04:08.050
要带颜色

01:04:08.050 --> 01:04:10.050
控制台里边是可以带颜色的

01:04:10.050 --> 01:04:12.050
你看它之前的就全是白色对吧

01:04:12.050 --> 01:04:13.050
那么现在我们来看一下

01:04:14.050 --> 01:04:18.200
npx

01:04:18.200 --> 01:04:19.200
你看是不是带颜色的

01:04:19.200 --> 01:04:20.200
好看一点

01:04:20.200 --> 01:04:21.200
起这么一个作用

01:04:25.200 --> 01:04:26.200
就这样

01:04:26.200 --> 01:04:27.200
我们把那个index

01:04:29.200 --> 01:04:30.200
这些东西去掉吧

01:04:30.200 --> 01:04:31.200
去掉

01:04:31.200 --> 01:04:32.200
让它打过快一点

01:04:32.200 --> 01:04:35.200
比方说我们再来看一下啥了

01:04:35.200 --> 01:04:37.200
我记得看一下那个就是

01:04:37.200 --> 01:04:38.200
我觉得这个

01:04:38.200 --> 01:04:39.200
marge

01:04:41.200 --> 01:04:42.200
就这个配置

01:04:42.200 --> 01:04:43.200
就这个东西聊一下就行了

01:04:43.200 --> 01:04:45.200
你要说我记得力量多少了

01:04:45.200 --> 01:04:46.200
也不太记得

01:04:46.200 --> 01:04:47.200
其实也很少用

01:04:47.200 --> 01:04:48.200
force

01:04:48.200 --> 01:04:49.200
这什么意思呢

01:04:49.200 --> 01:04:50.200
这个marge

01:04:50.200 --> 01:04:52.200
在我的印象中应该是这个

01:04:52.200 --> 01:04:55.200
就是有哪些模块被构建了

01:04:55.200 --> 01:04:57.200
哪些模块打包了

01:04:57.200 --> 01:04:58.200
哪些模块打包了

01:04:58.200 --> 01:04:59.200
你看

01:04:59.200 --> 01:05:00.200
那么这些

01:05:01.200 --> 01:05:02.200
哪些模块被打包了

01:05:02.200 --> 01:05:03.200
那么这个时候

01:05:05.510 --> 01:05:06.510
我们把marge

01:05:06.510 --> 01:05:07.510
作为force

01:05:07.510 --> 01:05:08.510
是不是里边下面的

01:05:08.510 --> 01:05:10.510
详细的模块就没了

01:05:10.510 --> 01:05:11.510
这个东西有的时候还蛮有用的

01:05:11.510 --> 01:05:12.510
就是有的时候

01:05:12.510 --> 01:05:13.510
我们模块觉得特别特别突

01:05:13.510 --> 01:05:15.510
还包括英雄的一些第三方模块

01:05:15.510 --> 01:05:17.510
第三方模块也用的特别多

01:05:17.510 --> 01:05:18.510
那么如果说把全部模块

01:05:18.510 --> 01:05:19.510
输出出来的话

01:05:19.510 --> 01:05:20.510
这个界面就爆炸了

01:05:20.510 --> 01:05:22.510
所以说我们这里

01:05:22.510 --> 01:05:23.510
就没有把它输出出来

01:05:23.510 --> 01:05:24.510
OK

01:05:24.510 --> 01:05:25.510
关于这个

01:05:25.510 --> 01:05:26.510
还有什么哈西

01:05:26.510 --> 01:05:27.510
我可以让它不显示

01:05:27.510 --> 01:05:28.510
我记得应该可以的

01:05:28.510 --> 01:05:29.510
查一下

01:05:29.510 --> 01:05:31.510
哈西

01:05:31.510 --> 01:05:33.510
可以让它不显示哈西

01:05:33.510 --> 01:05:35.510
哈西force

01:05:35.510 --> 01:05:36.510
你看吧

01:05:39.650 --> 01:05:40.650
它就没有显示哈西了

01:05:40.650 --> 01:05:41.650
对吧

01:05:41.650 --> 01:05:42.650
还有什么个时间

01:05:42.650 --> 01:05:43.650
对吧

01:05:43.650 --> 01:05:44.650
不显示时间

01:05:44.650 --> 01:05:46.650
好像叫time什么东西

01:05:46.650 --> 01:05:48.650
还是叫什么

01:05:48.650 --> 01:05:49.650
添加时间信息

01:05:49.650 --> 01:05:50.650
time is

01:05:50.650 --> 01:05:51.650
force

01:05:51.650 --> 01:05:52.650
好像是这个吗

01:05:52.650 --> 01:05:53.650
还是这么

01:05:53.650 --> 01:05:57.440
看一下吧

01:05:57.440 --> 01:05:58.440
不对

01:05:58.440 --> 01:05:59.440
还不是这个

01:05:59.440 --> 01:06:00.440
还不是这个

01:06:00.440 --> 01:06:01.440
然后看一下

01:06:01.440 --> 01:06:03.440
这个是哪个地方

01:06:03.440 --> 01:06:04.440
是可以把

01:06:05.440 --> 01:06:07.440
build at

01:06:08.440 --> 01:06:09.440
构建的时间

01:06:09.440 --> 01:06:10.440
把它视为force

01:06:10.440 --> 01:06:11.440
你看这些东西

01:06:11.440 --> 01:06:12.440
你不用去背

01:06:12.440 --> 01:06:13.440
像我这样子

01:06:13.440 --> 01:06:15.440
有一点点印象就行了

01:06:16.440 --> 01:06:17.440
你看时间是不是没了

01:06:17.440 --> 01:06:18.440
对吧

01:06:18.440 --> 01:06:19.440
它就是在做这个事的

01:06:19.440 --> 01:06:20.440
就是在做这个事的

01:06:20.440 --> 01:06:21.440
其他你要去看一下

01:06:21.440 --> 01:06:22.440
其他东西

01:06:22.440 --> 01:06:23.440
你只需去看

01:06:23.440 --> 01:06:24.440
只需去测试一下

01:06:24.440 --> 01:06:25.440
OK

01:06:25.440 --> 01:06:27.440
这是关于这个stand

01:06:27.440 --> 01:06:28.440
表示的是

01:06:28.440 --> 01:06:30.440
控制台的输出配置

01:06:30.440 --> 01:06:31.440
没有

01:06:31.440 --> 01:06:32.440
vipack的大致上

01:06:32.440 --> 01:06:34.440
就这么一些配置了

01:06:34.440 --> 01:06:36.440
就这么一些配置了

01:06:36.440 --> 01:06:37.440
好

01:06:37.440 --> 01:06:38.440
那么vipack整个

01:06:38.440 --> 01:06:39.440
第一张

01:06:39.440 --> 01:06:40.440
关于vipack的核心

01:06:40.440 --> 01:06:41.440
就到此结束了

01:06:41.440 --> 01:06:42.440
东西多不多呢

01:06:42.440 --> 01:06:44.440
东西还是蛮多的

01:06:44.440 --> 01:06:45.440
但是你一定要抓大放小

01:06:45.440 --> 01:06:46.440
重点在哪

01:06:46.440 --> 01:06:47.440
重点

01:06:47.440 --> 01:06:48.440
在这两张

01:06:48.440 --> 01:06:50.440
一个是编印结果分析

01:06:50.440 --> 01:06:52.440
一个是编印过程

01:06:53.440 --> 01:06:54.440
就在重点就在这两个

01:06:54.440 --> 01:06:56.440
你了解这两个重点

01:06:56.440 --> 01:06:57.440
过后呢

01:06:57.440 --> 01:06:58.440
你再去看

01:06:58.440 --> 01:07:00.440
什么入口出口

01:07:00.440 --> 01:07:01.440
loader

01:07:01.440 --> 01:07:02.440
plugging

01:07:02.440 --> 01:07:03.440
就很好理解了

01:07:03.440 --> 01:07:04.440
就非常好理解

01:07:05.440 --> 01:07:07.440
主要去把它核心点抓住

01:07:07.440 --> 01:07:09.440
那么一细致没解的地方

01:07:09.440 --> 01:07:10.440
可以忘

01:07:10.440 --> 01:07:11.440
只要你练过了

01:07:11.440 --> 01:07:12.440
当然前条件你要练过

01:07:12.440 --> 01:07:13.440
你要去做过一次

01:07:13.440 --> 01:07:14.440
做过一次你忘就忘了

01:07:14.440 --> 01:07:15.440
没关系

01:07:15.440 --> 01:07:16.440
你一定会有影响

01:07:16.440 --> 01:07:17.440
到时候一提

01:07:17.440 --> 01:07:18.440
一提你就知道了

01:07:18.440 --> 01:07:19.440
怎么回事了

01:07:19.440 --> 01:07:20.440
但是前条件你一定要去

01:07:20.440 --> 01:07:21.440
做过一次

01:07:21.440 --> 01:07:22.440
好吧

01:07:22.440 --> 01:07:23.440
那么我们vipack核心讲完了

01:07:23.440 --> 01:07:25.440
后边讲什么呢

01:07:25.440 --> 01:07:26.440
后边就讲的是

01:07:26.440 --> 01:07:28.440
vipack的生态了

01:07:28.440 --> 01:07:29.440
生态环境

01:07:29.440 --> 01:07:30.440
因为vipack他自己

01:07:30.440 --> 01:07:31.440
本身没有干

01:07:31.440 --> 01:07:32.440
没有干多少事情

01:07:32.440 --> 01:07:34.440
就大爆大爆大爆

01:07:34.440 --> 01:07:35.440
那么我们在

01:07:35.440 --> 01:07:37.440
前端开发的工程化过程中

01:07:37.440 --> 01:07:38.440
会遇到很多问题

01:07:38.440 --> 01:07:39.440
那么这些问题

01:07:39.440 --> 01:07:41.440
很多的vipack都没有解决

01:07:41.440 --> 01:07:42.440
那是他给你解决了

01:07:42.440 --> 01:07:44.440
他给你提供了解决的平台

01:07:44.440 --> 01:07:45.440
他给你提供vipack

01:07:45.440 --> 01:07:46.440
什么一个工具

01:07:46.440 --> 01:07:47.440
你可以通过loader

01:07:47.440 --> 01:07:48.440
你可以通过plugin

01:07:48.440 --> 01:07:50.440
来进行扩展它的功能

01:07:50.440 --> 01:07:52.440
因此就有很多的

01:07:52.440 --> 01:07:53.440
第三方库

01:07:53.440 --> 01:07:55.440
来去扩展vipack的功能

01:07:55.440 --> 01:07:56.440
那么后边我们就学习的是

01:07:56.440 --> 01:07:58.440
这些第三方的东西

01:07:58.440 --> 01:08:00.440
其实vipack就到此结束了

