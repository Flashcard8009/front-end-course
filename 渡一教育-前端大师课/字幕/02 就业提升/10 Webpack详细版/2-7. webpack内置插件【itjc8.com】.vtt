WEBVTT

00:01.070 --> 00:05.070
好 这些课呢 咱们来学习几个webpack的内置插件

00:05.070 --> 00:07.070
什么叫做内置插件啊

00:07.070 --> 00:10.070
就是说这个webpack安装好了之后

00:10.070 --> 00:13.070
它就已经自带的插件啊 不需要再重新安装了

00:13.070 --> 00:15.070
这就是内置插件

00:15.070 --> 00:18.070
那么这几个内置插件啊 咱们这几个学习三课

00:18.070 --> 00:21.070
都是 其实他们这么重要呢 其实一点都不重要

00:21.070 --> 00:25.070
只是他们在 他们是为了解决一些

00:25.070 --> 00:28.070
非常非常微小的一些问题

00:28.070 --> 00:33.070
或者说 他们对webpack做的一些非常非常微小的改进

00:33.070 --> 00:37.070
那么这几个内容跟很多课的 跟我们这门课的里边

00:37.070 --> 00:40.070
很多课都是一样的 不用去实际应该

00:40.070 --> 00:43.070
你们将来呢 如果说遇到了类似的问题

00:43.070 --> 00:47.070
ok 那么去 可以想到有这么一个东西

00:47.070 --> 00:50.070
好像有一个东西可以解决 回过头来看一下就行了

00:50.070 --> 00:52.070
咱们来首先来看一下啊

00:52.070 --> 00:55.070
webpack的插件 内置插件怎么来用

00:56.070 --> 01:00.070
所有的webpack内置插件都有一个类似的用法

01:00.070 --> 01:02.070
不能说完全一样 一个类似的用法

01:02.070 --> 01:04.070
就是说 首先也导入一个webpack

01:04.070 --> 01:06.070
因为它是安装好的webpack包嘛

01:06.070 --> 01:08.070
然后呢 它的插件在哪呢

01:08.070 --> 01:11.070
它的插件呢 往往是作为这个webpack的属性存在的

01:11.070 --> 01:14.070
它是一个构造函数 你去创建一下

01:14.070 --> 01:16.070
然后给它一些配置就行了

01:16.070 --> 01:19.070
大部分的webpack内置插件都是这样用的

01:19.070 --> 01:21.070
好 咱们来一个个看吧

01:21.070 --> 01:24.070
首先说这个define plug-in这个插件

01:24.070 --> 01:26.070
用来干嘛的呢 这个插件呢

01:26.070 --> 01:30.070
是用来定义一些全局的长量

01:30.070 --> 01:32.070
这里举了个例子

01:32.070 --> 01:35.070
咱们来看一下这个例子 通过这个例子来讲解

01:35.070 --> 01:38.070
首先我们看一下我们的配置文件 这个配置文件很简单

01:38.070 --> 01:40.070
接下来呢 我们要应用插件了

01:40.070 --> 01:42.070
首先让我们要导入这个webpack

01:42.070 --> 01:44.070
为什么呢 因为插件在插里边

01:44.070 --> 01:48.070
所以说我们要导入它requirewebpack

01:48.070 --> 01:51.070
好 这里呢 plug-ins 配置插件

01:51.070 --> 01:55.070
其中有一个插件 就是newwebpack

01:55.070 --> 01:58.070
第二什么呢 这复制过来吧

02:00.070 --> 02:03.070
好 我们来一个一个解释

02:03.070 --> 02:05.070
创建一个插件对象 对吧

02:05.070 --> 02:07.070
插件都是一个构造函数 创建一个插件对象

02:07.070 --> 02:08.070
然后加一些配置

02:08.070 --> 02:11.070
那么这个配置里面呢 其实就是一个普普通通的对象

02:11.070 --> 02:14.070
属性名随便写 属性值随便写

02:14.070 --> 02:17.070
那么我们来看一下 这样子写的过去有什么含义

02:17.070 --> 02:18.070
它是定义长量的 对吧

02:18.070 --> 02:21.070
那么我们看一下 它定义到什么 哪些长量

02:21.070 --> 02:26.070
第一句话 属性名就是长量的名称

02:26.070 --> 02:29.070
属性制服错的值

02:29.070 --> 02:31.070
注意啊 这个表述方式

02:31.070 --> 02:36.070
属性制服错的值 就是长量的值

02:36.070 --> 02:39.070
而这里的属性值呢 必须是制服错

02:40.070 --> 02:45.070
那么就指的是 这个制服错的值 是长量的值

02:45.070 --> 02:48.070
这句话的意识结构出来 就相当于是

02:48.070 --> 02:53.070
就把这个pi跟这个mass.pi就对应起来了

02:53.070 --> 02:54.070
明白我的意思吧

02:54.070 --> 02:57.070
它不是说这个pi它的值是制服错

02:57.070 --> 02:59.070
一定要搞清楚这一点啊

02:59.070 --> 03:00.070
其实也没那么重要啊

03:00.070 --> 03:02.070
就是说 如果当时真的你要用这个插件的时候

03:02.070 --> 03:03.070
你一定要搞清楚

03:03.070 --> 03:05.070
你不用的话 跟你没啪关系

03:05.070 --> 03:07.070
就说你这个长量名字是pi

03:07.070 --> 03:08.070
相当于是个变量名

03:08.070 --> 03:10.070
相当于是你这样定义了个变量

03:11.070 --> 03:12.070
pi等于了什么呢

03:12.070 --> 03:14.070
等于了这么一种东西

03:16.070 --> 03:17.070
你看这个意思吧

03:17.070 --> 03:18.070
它不是说等于这个啊

03:18.070 --> 03:20.070
它不是说等于一个制服错的这个

03:20.070 --> 03:22.070
而是指的是等于这个制服错里面的值

03:22.070 --> 03:23.070
作为长量的值

03:23.070 --> 03:24.070
是这么个意思

03:24.070 --> 03:26.070
比方说verse

03:26.070 --> 03:28.070
你看 这里我凭什么要用理行1

03:28.070 --> 03:30.070
用一个模板制服错 里面又要加一个双引号呢

03:30.070 --> 03:31.070
因为这样子写的过后

03:31.070 --> 03:35.070
verse就等于制服错的1.0.0

03:35.070 --> 03:37.070
如果说你不加双引号会怎么样了

03:37.070 --> 03:39.070
不加双引号 那就对不起了

03:39.070 --> 03:42.070
那就等于1.0.0 是不是愚法错误

03:42.070 --> 03:44.070
对吧 愚法错误

03:44.070 --> 03:46.070
对吧 它相当于定义的长量

03:46.070 --> 03:47.070
它的值等于这个

03:47.070 --> 03:49.070
所以说你要注意 注意这个点

03:49.070 --> 03:50.070
就是说它里边的

03:50.070 --> 03:51.070
它里边的这个玩意

03:51.070 --> 03:53.070
就是制服错里边的东西呢

03:53.070 --> 03:55.070
它是作为这个长量的值

03:55.070 --> 03:57.070
好 然后下面domain

03:57.070 --> 04:00.070
domain里边我用了这么一句话

04:00.070 --> 04:01.070
这是啥意思呢

04:01.070 --> 04:04.070
你看 如果说我直接这样子写

04:04.070 --> 04:06.070
是什么结果

04:06.070 --> 04:07.070
是不是愚法错误了

04:08.070 --> 04:09.070
就相当于是domain

04:09.070 --> 04:10.070
长量的名字

04:10.070 --> 04:12.070
我们一般来说全部大写

04:13.070 --> 04:14.070
是不是等于这个了

04:14.070 --> 04:16.070
是不是也不算愚法错误吧

04:16.070 --> 04:17.070
就相当于是读去

04:17.070 --> 04:20.070
对象都一般的属性抗

04:20.070 --> 04:22.070
可能跟我们想的都不一样了

04:22.070 --> 04:23.070
我们想的都是什么

04:23.070 --> 04:24.070
制服错 对吧

04:24.070 --> 04:26.070
因此我们这里应该怎么写

04:26.070 --> 04:28.070
要么就这样子写

04:28.070 --> 04:29.070
这样子写是不是就对了

04:29.070 --> 04:31.070
等于这个

04:31.070 --> 04:32.070
这是一种写法

04:32.070 --> 04:33.070
另外一种写法

04:33.070 --> 04:35.070
我只是给大家提供的另外一种写法

04:35.070 --> 04:37.070
另外一种写法是我们使用

04:37.070 --> 04:38.070
我们使用这种

04:44.070 --> 04:45.070
军地肥

04:45.070 --> 04:46.070
你们都学过这个函数的

04:46.070 --> 04:47.070
接生转换函数

04:47.070 --> 04:49.070
那么它会把这个字无串内容

04:49.070 --> 04:51.070
转换成一个接生格式

04:51.070 --> 04:52.070
它会把字无串内容

04:52.070 --> 04:53.070
转换成一个接生格式

04:53.070 --> 04:54.070
那么这样子的转换接生格式

04:54.070 --> 04:55.070
它一定是一个

04:55.070 --> 04:56.070
完整的接生字无串

04:56.070 --> 04:58.070
我们来看一下吧

04:58.070 --> 05:00.070
把这个东西放到

05:00.070 --> 05:01.070
这里再运行一下

05:03.070 --> 05:04.070
运行 你看

05:04.070 --> 05:06.070
这个字无串内容

05:06.070 --> 05:07.070
是带双引号的

05:07.070 --> 05:09.070
那么就相当于是

05:09.070 --> 05:10.070
我们做这么一个转换

05:10.070 --> 05:11.070
这也是一种

05:11.070 --> 05:12.070
在这个里面的

05:12.070 --> 05:13.070
常见的转换方式

05:13.070 --> 05:15.070
当然全力调用这个

05:15.070 --> 05:17.070
那么去定义了几个常量

05:17.070 --> 05:18.070
有什么用呢

05:18.070 --> 05:19.070
有啥用呢

05:19.070 --> 05:20.070
它是这样子的

05:20.070 --> 05:22.070
你有了这个定义之后

05:22.070 --> 05:24.070
我们在写代码的时候

05:24.070 --> 05:26.070
就可以直接使用

05:26.070 --> 05:28.070
插件里面提供的常量

05:28.070 --> 05:29.070
那么这样子

05:29.070 --> 05:30.070
在微拍给它编译

05:30.070 --> 05:31.070
编译的时候

05:31.070 --> 05:33.070
这个插件会做一件事

05:33.070 --> 05:34.070
微拍给编译的过程中

05:34.070 --> 05:37.070
不是要进行抽象与法术分析吗

05:37.070 --> 05:39.070
把整个我们的原代码

05:39.070 --> 05:40.070
进行打散

05:40.070 --> 05:42.070
就是进行抽象与法术

05:42.070 --> 05:43.070
那么这个插件

05:43.070 --> 05:44.070
它就会在编译完成之后

05:44.070 --> 05:46.070
它在干涉它的编译期

05:46.070 --> 05:47.070
在编译的时候

05:47.070 --> 05:49.070
它发现抽象与法术形成了

05:49.070 --> 05:52.070
于是它会从抽象与法术里面找

05:52.070 --> 05:53.070
找到你的代码里面

05:53.070 --> 05:54.070
反而是包含这个东西的

05:54.070 --> 05:56.070
把它替换成这个

05:56.070 --> 05:57.070
反而是包含这个东西的

05:57.070 --> 05:58.070
把它替换成这个

05:58.070 --> 05:59.070
反而是包含这个东西的

05:59.070 --> 06:01.070
把它替换成这个

06:01.070 --> 06:02.070
所以说

06:02.070 --> 06:03.070
你看

06:03.070 --> 06:05.070
我们这个代码是怎么写的

06:05.070 --> 06:06.070
我们可以这样子写

06:06.070 --> 06:08.070
console logpi

06:08.070 --> 06:09.070
然后呢

06:09.070 --> 06:10.070
三个嘛

06:10.070 --> 06:12.450
version

06:12.450 --> 06:13.450
do me

06:15.450 --> 06:16.450
好

06:16.450 --> 06:17.450
我们这样子写

06:17.450 --> 06:18.450
写完了之后呢

06:18.450 --> 06:19.450
我们现在来打包

06:21.450 --> 06:22.450
打包

06:31.320 --> 06:33.320
打包完了之后

06:33.320 --> 06:35.320
咱们来看一下最终的结果

06:36.320 --> 06:37.320
最终的结果你看

06:37.320 --> 06:39.320
是不是我们的pi

06:39.320 --> 06:41.320
被替换成了maskti

06:41.320 --> 06:42.320
我们的这个version

06:42.320 --> 06:44.320
被替换成了这个1.0.0

06:44.320 --> 06:45.320
对吧

06:45.320 --> 06:46.320
我们的do me

06:46.320 --> 06:47.320
被替换成了这个东西

06:47.320 --> 06:48.320
对不对

06:48.320 --> 06:49.320
它就这样子呢

06:49.320 --> 06:50.320
相当于是定义了一个

06:50.320 --> 06:51.320
全局的长量

06:51.320 --> 06:52.320
这样子

06:52.320 --> 06:53.320
你的所有代码

06:53.320 --> 06:54.320
所有的元代码里面

06:54.320 --> 06:56.320
是不是都可以通用了

06:56.320 --> 06:57.320
对吧

06:57.320 --> 06:58.320
这个东西

06:58.320 --> 06:59.320
这就是它的作用

07:00.320 --> 07:02.320
那么它具体有啥用呢

07:02.320 --> 07:03.320
如果说

07:03.320 --> 07:04.320
你的工程里面

07:04.320 --> 07:05.320
要使用到一些长量

07:05.320 --> 07:06.320
比方说

07:06.320 --> 07:08.320
你的整个网站的域名

07:08.320 --> 07:10.320
还有什么你的版本号

07:10.320 --> 07:11.320
之类的东西

07:11.320 --> 07:12.320
你可以

07:12.320 --> 07:14.320
要全局通用的一些长量

07:14.320 --> 07:16.320
那么咱们就可以在这里定义好

07:16.320 --> 07:17.320
我们的代码里面

07:17.320 --> 07:18.320
就可以直接用了

07:18.320 --> 07:19.320
就可以直接用这一长量

07:19.320 --> 07:20.320
你只要一变异

07:20.320 --> 07:22.320
它就会把它替换成长量的值

07:22.320 --> 07:23.320
就会替换成

07:24.320 --> 07:25.320
这样的一个结果

07:25.320 --> 07:26.320
就这么回事

07:26.320 --> 07:27.320
OK

07:27.320 --> 07:28.320
当然你不用的东西的话

07:28.320 --> 07:30.320
它就没啥用

07:30.320 --> 07:32.320
这是关于这个plugging

07:33.320 --> 07:34.320
好 现在我们看第二个

07:34.320 --> 07:35.320
叫Banner Plugging

07:36.320 --> 07:37.320
这是来做什么呢

07:37.320 --> 07:38.320
它是为了

07:38.320 --> 07:40.320
为我们每一个Trunk

07:40.320 --> 07:42.320
就是我们打包的那个Trunk

07:42.320 --> 07:44.320
它生成了文件的头部

07:44.320 --> 07:45.320
添加一行注释

07:45.320 --> 07:46.320
就这么简单

07:46.320 --> 07:47.320
就这么简单

07:47.320 --> 07:48.320
特别简单

07:48.320 --> 07:50.320
一般用于添加什么作者

07:50.320 --> 07:51.320
公司版权等信息

07:51.320 --> 07:52.320
这里有个例子

07:52.320 --> 07:54.320
你看一下你马上就明白了

07:54.320 --> 07:55.320
副字直接拿过来

07:56.320 --> 07:57.320
这是一个插件

07:57.320 --> 07:58.320
放在这边

07:58.320 --> 07:59.320
第二个插件

07:59.320 --> 08:00.320
放这

08:00.320 --> 08:01.320
你看

08:01.320 --> 08:02.320
配置对象

08:02.320 --> 08:03.320
这个配置对象里边

08:03.320 --> 08:04.320
其实还有一些其他配置

08:04.320 --> 08:05.320
不过我们不用写了

08:05.320 --> 08:07.320
就里边一个属性叫Banner

08:08.320 --> 08:11.320
就是在文件顶部的一个横幅

08:11.320 --> 08:13.320
横幅用来写一些东西

08:13.320 --> 08:15.320
那么横幅的内容是啥呢

08:15.320 --> 08:16.320
内容是一个支付串

08:16.320 --> 08:17.320
你看内容是不是一个

08:17.320 --> 08:18.320
多行支付串

08:18.320 --> 08:19.320
我这里用一个

08:19.320 --> 08:20.320
摩曼支付串

08:20.320 --> 08:21.320
就可以很方便的换行

08:21.320 --> 08:23.320
当然你写成一行也可以

08:23.320 --> 08:24.320
那么支付串的内容是什么呢

08:24.320 --> 08:25.320
你写啥

08:25.320 --> 08:26.320
它就显示啥

08:26.320 --> 08:27.320
它就显示啥

08:27.320 --> 08:28.320
比方说我写了个哈希

08:28.320 --> 08:29.320
我这里使用个站位幅

08:29.320 --> 08:31.320
就把个哈希给我放在这儿

08:31.320 --> 08:32.320
创可哈希

08:32.320 --> 08:34.320
它就会把整个创可哈希放在这儿

08:34.320 --> 08:35.320
Name

08:35.320 --> 08:37.320
它就会把创可Name放在这儿

08:37.320 --> 08:39.320
also 比方说我们的作者名称

08:39.320 --> 08:41.320
我们的公司独一

08:41.320 --> 08:43.320
这样子我们就写上一些支付串

08:43.320 --> 08:44.320
写到这儿

08:44.320 --> 08:45.320
好 接下来我们再玩玩

08:45.320 --> 08:49.740
完成打包

08:49.740 --> 08:50.740
一打包

08:50.740 --> 08:52.740
一看一下结果里边

08:52.740 --> 08:53.740
特别简单

08:53.740 --> 08:54.740
你看最上面

08:54.740 --> 08:56.740
多了这么一个注释

08:56.740 --> 08:58.740
来生命一些版权

08:58.740 --> 09:00.740
或者是一些文件

09:00.740 --> 09:01.740
这些东西的信息

09:01.740 --> 09:02.740
就这么简单

09:02.740 --> 09:03.740
没了

09:03.740 --> 09:05.740
它是用来干这么一个事的

09:05.740 --> 09:06.740
你说你看以后

09:06.740 --> 09:08.740
真实的打包过

09:08.740 --> 09:09.740
就是你们

09:09.740 --> 09:11.740
你看一下别人的公司里面的

09:11.740 --> 09:13.740
网站里面的介事

09:13.740 --> 09:14.740
就是每个介事文件

09:14.740 --> 09:15.740
它前面都会

09:15.740 --> 09:16.740
一大公司里面

09:16.740 --> 09:18.740
它前面都会有一些版权信息

09:18.740 --> 09:20.740
都会加上这么一个东西

09:20.740 --> 09:22.740
就是这个了解就行了

09:22.740 --> 09:23.740
都是关于这个

09:23.740 --> 09:26.740
其实一般来说也不会加作者

09:26.740 --> 09:28.740
这是关于这个 banner

09:28.740 --> 09:29.740
plugging

09:29.740 --> 09:30.740
又啥用了

09:30.740 --> 09:31.740
你要用它的时候

09:31.740 --> 09:32.740
它就不用它的时候

09:32.740 --> 09:33.740
它就没用

09:33.740 --> 09:34.740
接下来的

09:34.740 --> 09:35.740
下面一个

09:35.740 --> 09:38.740
下面一个叫 provide plugging

09:38.740 --> 09:39.740
它什么意思呢

09:39.740 --> 09:41.740
它是用来提供模块的

09:41.740 --> 09:42.740
就是说

09:42.740 --> 09:44.740
它能够在这里边配置好了过后

09:44.740 --> 09:46.740
它可以自动去加载一些模块

09:46.740 --> 09:47.740
这样子

09:47.740 --> 09:48.740
在代码里面

09:48.740 --> 09:49.740
就不用去导入模块了

09:49.740 --> 09:51.740
它会自动决定加

09:51.740 --> 09:52.740
比方说我们常见的

09:52.740 --> 09:53.740
有些模块

09:53.740 --> 09:54.740
什么结块都大一些

09:54.740 --> 09:55.740
我们经常来的项目里面

09:55.740 --> 09:56.740
要用的模块

09:56.740 --> 09:57.740
比方说

09:57.740 --> 09:58.740
我去个例子

09:58.740 --> 10:00.740
就是npm安装一下

10:00.740 --> 10:01.740
解query

10:01.740 --> 10:05.820
no dash

10:05.820 --> 10:09.840
安装一下

10:09.840 --> 10:10.840
让它安装

10:10.840 --> 10:11.840
顺便我说一下

10:11.840 --> 10:12.840
no dash

10:12.840 --> 10:13.840
里面做不完

10:13.840 --> 10:14.840
做不完函数

10:14.840 --> 10:15.840
不知道你们之前有学过

10:15.840 --> 10:16.840
no dash

10:16.840 --> 10:17.840
这个函数里面

10:17.840 --> 10:18.840
它只是

10:18.840 --> 10:19.840
第一个参数传数组

10:19.840 --> 10:20.840
第二个参数

10:20.840 --> 10:21.840
指的是数组从左边

10:21.840 --> 10:22.840
扔掉几项

10:22.840 --> 10:23.840
扔掉两项

10:23.840 --> 10:24.840
扔掉两项过后

10:24.840 --> 10:25.840
返回的结果

10:25.840 --> 10:26.840
就是一个新的数组

10:26.840 --> 10:27.840
只有一个三

10:27.840 --> 10:28.840
返回的结果

10:28.840 --> 10:29.840
就是一个数组

10:29.840 --> 10:30.840
里面只有一个三

10:30.840 --> 10:31.840
扔掉两项

10:31.840 --> 10:32.840
就这么个意思

10:34.840 --> 10:35.840
安装完成

10:36.840 --> 10:37.840
比方说

10:37.840 --> 10:38.840
我们的代码里边

10:38.840 --> 10:42.500
我们写了这么一个东西

10:42.500 --> 10:43.500
这是我们的代码

10:43.500 --> 10:45.500
那这个代码能不能运行的

10:45.500 --> 10:46.500
肯定不能运行

10:46.500 --> 10:47.500
肯定不能运行

10:47.500 --> 10:48.500
为什么

10:48.500 --> 10:49.500
这里面模块都没有

10:49.500 --> 10:50.500
它说肯定没法运行

10:50.500 --> 10:52.500
那么我们一般会怎么样

10:52.500 --> 10:53.500
我们一般是不是

10:53.500 --> 10:55.500
import $ from

10:55.500 --> 10:56.500
解query

10:56.500 --> 10:57.500
导入解query

10:57.500 --> 10:58.500
然后导入一个

10:58.500 --> 11:00.500
from no dash

11:00.500 --> 11:01.500
那如果说解query

11:01.500 --> 11:03.500
我们用的非常非常频繁

11:03.500 --> 11:04.500
no dash

11:04.500 --> 11:05.500
也用的非常非常频繁

11:05.500 --> 11:06.500
很多模块

11:06.500 --> 11:07.500
这是个入口模块

11:07.500 --> 11:09.500
其实还有很多很多的模块

11:09.500 --> 11:10.500
都会用

11:10.500 --> 11:12.500
里面代码很多都会用

11:12.500 --> 11:14.500
每次导入觉得特别麻烦

11:14.500 --> 11:17.500
能不能帮我导入一下

11:17.500 --> 11:19.500
这个插件就是在做这个事

11:19.500 --> 11:20.500
你不用导入

11:20.500 --> 11:21.500
我帮你导入

11:21.500 --> 11:22.500
它怎么来做的

11:22.500 --> 11:23.500
你看就做一个配置

11:23.500 --> 11:24.500
扶子过来

11:24.500 --> 11:25.500
直接拿过来看一下

11:25.500 --> 11:28.830
什么意思

11:28.830 --> 11:29.830
你看这个插件

11:29.830 --> 11:30.830
这特别简单

11:30.830 --> 11:33.830
我提供模块导入

11:33.830 --> 11:34.830
把解query这个模块导入

11:34.830 --> 11:36.830
导入放到变量

11:36.830 --> 11:37.830
躲到里面

11:37.830 --> 11:38.830
把no dash

11:38.830 --> 11:39.830
这个模块导入

11:39.830 --> 11:42.830
放到变量下滑线里面

11:42.830 --> 11:43.830
它就是这样子干的

11:43.830 --> 11:44.830
那么现在你看

11:44.830 --> 11:46.830
我们就直接可以用这个了

11:46.830 --> 11:47.830
直接可以用这个

11:47.830 --> 11:48.830
我们看一下能不能用了

11:48.830 --> 11:50.830
如果说你不用的话

11:50.830 --> 11:51.830
那么这个插件就无效

11:51.830 --> 11:53.830
这个插件就相当于不起作用

11:53.830 --> 11:55.830
至少在这个模块里面

11:55.830 --> 11:56.830
就不起作用

11:56.830 --> 11:57.830
以后我们就可以知道

11:57.830 --> 11:59.830
它是怎么来处理的

11:59.830 --> 12:02.830
NPS Webpack

12:02.830 --> 12:03.830
看一下

12:04.830 --> 12:07.830
如果说我没有写这些代码的话

12:07.830 --> 12:09.830
那么对我们的整个结果

12:09.830 --> 12:10.830
有没有变化了

12:10.830 --> 12:11.830
没有变化

12:11.830 --> 12:12.830
没有任何变化

12:12.830 --> 12:13.830
解query有没有导入进来

12:13.830 --> 12:14.830
根本就没有

12:14.830 --> 12:15.830
最终打包结果里面

12:15.830 --> 12:16.830
根本就没有解query

12:16.830 --> 12:17.830
也没有那些

12:17.830 --> 12:19.830
因为我们没用它

12:19.830 --> 12:20.830
但是如果说

12:20.830 --> 12:21.830
我们在模块里面

12:21.830 --> 12:22.830
我们一旦用了它

12:22.830 --> 12:23.830
那么这个时候它会发现

12:23.830 --> 12:24.830
会被这个插件所发现

12:24.830 --> 12:25.830
这个插件发现

12:25.830 --> 12:27.830
你原来在模块里面

12:27.830 --> 12:28.830
用了这个东西

12:28.830 --> 12:29.830
而且这个东西

12:29.830 --> 12:31.830
也是我预导住的一个东西

12:31.830 --> 12:32.830
接下来交给我

12:32.830 --> 12:33.830
我来帮你处理

12:33.830 --> 12:34.830
好 接下来给我看一下

12:34.830 --> 12:35.830
它怎么来做的

12:35.830 --> 12:36.830
一旦用了过后

12:36.830 --> 12:37.830
它是怎么来做的

12:37.830 --> 12:38.830
我们在这里

12:38.830 --> 12:39.830
首先建个页面

12:39.830 --> 12:40.830
先建个文件

12:41.830 --> 12:42.830
一个页面

12:42.830 --> 12:43.830
输出

12:44.830 --> 12:45.830
这个导入

12:45.830 --> 12:46.830
导入什么呢

12:46.830 --> 12:47.830
Made.js

12:49.830 --> 12:50.830
那么到这边来

12:50.830 --> 12:52.830
我们这个东西

12:53.830 --> 12:54.830
看一下吧

12:54.830 --> 12:55.830
看一下就行了

12:55.830 --> 12:56.830
输出吗

12:56.830 --> 12:59.530
输出

12:59.530 --> 13:00.530
R1

13:00.530 --> 13:03.990
R2

13:03.990 --> 13:04.990
Results1

13:04.990 --> 13:05.990
Results2

13:06.990 --> 13:07.990
R1

13:07.990 --> 13:08.990
R2

13:08.990 --> 13:09.990
输出

13:09.990 --> 13:10.990
好 接下来

13:10.990 --> 13:11.990
我们再来网上打包

13:12.990 --> 13:14.990
看到一个非常惊喜的事情

13:14.990 --> 13:17.620
网上打包了

13:17.620 --> 13:18.620
你看内容是不是多

13:18.620 --> 13:19.620
比较多

13:19.620 --> 13:20.620
800多 kb

13:20.620 --> 13:21.620
没关系

13:21.620 --> 13:22.620
我们来看一下它的结果

13:22.620 --> 13:23.620
你看 至少你可以看到

13:23.620 --> 13:25.620
接框也已经进来了

13:25.620 --> 13:26.620
这是立即执行函数

13:26.620 --> 13:27.620
对吧

13:27.620 --> 13:28.620
你看接框也是不是进来了

13:29.620 --> 13:30.620
然后呢

13:30.620 --> 13:31.620
太多

13:32.620 --> 13:33.620
卡住了

13:33.620 --> 13:34.620
都大写一看

13:34.620 --> 13:35.620
是不是进来了

13:36.620 --> 13:37.620
好卡

13:38.620 --> 13:39.620
都大写

13:39.620 --> 13:40.620
接框也进来了

13:40.620 --> 13:41.620
你看都大写进来了

13:41.620 --> 13:42.620
对吧

13:42.620 --> 13:43.620
然后呢

13:43.620 --> 13:44.620
我们的模块变成什么样子

13:44.620 --> 13:46.620
我们的模块

13:46.620 --> 13:47.620
看一下我们自己的模块

13:47.620 --> 13:49.620
这是我们的Global.js

13:49.620 --> 13:50.620
不管

13:50.620 --> 13:51.620
这是Made.js

13:51.620 --> 13:53.620
因为它里面用到了一些

13:53.620 --> 13:54.620
别的模块化

13:54.620 --> 13:56.620
所以说它里面可能需要

13:56.620 --> 13:57.620
Wepack里面的一些东西

13:57.620 --> 13:58.620
来支持

13:58.620 --> 13:59.620
它导入了这些东西

13:59.620 --> 14:00.620
没关系

14:00.620 --> 14:01.620
我们最后看后面了

14:01.620 --> 14:02.620
我们的主模块

14:02.620 --> 14:03.620
英这个是点解释

14:03.620 --> 14:04.620
它变成了什么样子

14:04.620 --> 14:05.620
我们单码是什么呢

14:05.620 --> 14:06.620
我们单码就是这个

14:06.620 --> 14:07.620
对吧

14:07.620 --> 14:08.620
那问题是它怎么来的

14:08.620 --> 14:09.620
我们单码这个东西

14:09.620 --> 14:10.620
是怎么来的呢

14:10.620 --> 14:12.620
我把干扰箱全部去了

14:12.620 --> 14:13.620
我把前面的这些注释

14:13.620 --> 14:14.620
放在这吧

14:14.620 --> 14:15.620
无所谓

14:15.620 --> 14:17.620
关键是看我们单码怎么来的

14:17.620 --> 14:18.620
我们这单码里面哪有多了

14:18.620 --> 14:19.620
哪有下滑线

14:19.620 --> 14:21.620
下滑线多了哪来的呢

14:21.620 --> 14:22.620
怎么来的

14:22.620 --> 14:23.620
你看着

14:23.620 --> 14:24.620
它是写的

14:24.620 --> 14:25.620
在这里面又写了一个

14:25.620 --> 14:26.620
立即执行函数

14:27.620 --> 14:28.620
这个只是

14:28.620 --> 14:29.620
立即执行函数里面

14:29.620 --> 14:30.620
有个多了

14:30.620 --> 14:31.620
一个下滑线

14:31.620 --> 14:32.620
这个多了下滑线

14:32.620 --> 14:33.620
是哪里配置的

14:33.620 --> 14:34.620
就这个玩意

14:34.620 --> 14:35.620
它把这个多了下滑线

14:35.620 --> 14:36.620
也就是说

14:36.620 --> 14:37.620
它再把我们单码

14:37.620 --> 14:39.620
再放到一个函数里面

14:39.620 --> 14:40.620
它又多了一个下滑线

14:40.620 --> 14:41.620
这又是个立即执行函数

14:41.620 --> 14:43.620
函数怎么传递呢

14:43.620 --> 14:44.620
你看着

14:44.620 --> 14:45.620
函数它怎么传递的

14:45.620 --> 14:46.620
调用把这次传进去

14:46.620 --> 14:47.620
然后呢

14:47.620 --> 14:48.620
第一个参数

14:48.620 --> 14:49.620
是不是导入什么

14:49.620 --> 14:50.620
导入接query

14:50.620 --> 14:51.620
对吧

14:51.620 --> 14:52.620
把接query导入进来

14:52.620 --> 14:53.620
就传到第一个参数

14:53.620 --> 14:54.620
多了里面

14:54.620 --> 14:55.620
然后呢

14:55.620 --> 14:56.620
第二个参数

14:56.620 --> 14:57.620
把这个楼弹器导入进来

14:57.620 --> 14:59.620
那么就传到一个下滑线里面

14:59.620 --> 15:00.620
那么这里面

15:00.620 --> 15:01.620
我们单码里面

15:01.620 --> 15:03.620
选举使用这个多了下滑线

15:03.620 --> 15:04.620
它仍然没有进行

15:04.620 --> 15:05.620
任何的选举变量污染

15:05.620 --> 15:07.620
它不会进行选举变量污染的

15:07.620 --> 15:08.620
对吧

15:08.620 --> 15:09.620
它就是这样的

15:09.620 --> 15:10.620
用巧妙的方式来完成的

15:10.620 --> 15:11.620
总之呢

15:11.620 --> 15:13.620
效果上很简单

15:13.620 --> 15:14.620
效果上就是

15:14.620 --> 15:15.620
你只要这样子用了

15:15.620 --> 15:17.620
那么你在单码里面

15:17.620 --> 15:18.620
你没有必要去导入了

15:18.620 --> 15:19.620
它会自动帮你导入

15:19.620 --> 15:20.620
你看

15:20.620 --> 15:22.620
对吧

15:22.620 --> 15:23.620
导入进来

15:23.620 --> 15:24.620
就可以使用了

15:24.620 --> 15:25.620
好

15:25.620 --> 15:26.620
这是关于这个插线

15:26.620 --> 15:27.620
以后呢

15:27.620 --> 15:28.620
这个插线

15:28.620 --> 15:29.620
如果说

15:29.620 --> 15:30.620
你的有些常见的裤

15:30.620 --> 15:31.620
OK

15:31.620 --> 15:32.620
你就可以直接

15:32.620 --> 15:33.620
直接来

15:33.620 --> 15:34.620
好

15:34.620 --> 15:35.620
这是关于

15:35.620 --> 15:37.620
这一块

15:37.620 --> 15:38.620
就没了

15:38.620 --> 15:39.620
一共就这么三个插线

15:39.620 --> 15:40.620
一共就这么三个插线

15:40.620 --> 15:41.620
没了

15:41.620 --> 15:42.620
其实

15:42.620 --> 15:43.620
未判断的内置插线

15:43.620 --> 15:44.620
其实还不值得一些

15:44.620 --> 15:45.620
还蛮多的

15:45.620 --> 15:46.620
那么只不过呢

15:46.620 --> 15:48.620
我们目前有些插线

15:48.620 --> 15:49.620
根本就用不到

15:49.620 --> 15:50.620
根本就毫无意义

15:50.620 --> 15:52.620
对我们来说毫无意义

15:52.620 --> 15:53.620
还有一些插线

15:53.620 --> 15:54.620
它有意义

15:54.620 --> 15:55.620
但是呢

15:55.620 --> 15:56.620
我们目前

15:56.620 --> 15:57.620
还不着急去学

15:57.620 --> 15:59.620
有些插线是关于优化的

15:59.620 --> 16:00.620
我们再优化了一张

16:00.620 --> 16:01.620
它专门去学

16:01.620 --> 16:02.620
OK

16:02.620 --> 16:03.620
这就是关于

16:03.620 --> 16:04.620
我看它的内置插线

