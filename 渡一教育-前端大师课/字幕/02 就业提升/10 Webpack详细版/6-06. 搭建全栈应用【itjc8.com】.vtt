WEBVTT

00:00.000 --> 00:03.440
好 这里说一下搭建全站运用

00:03.680 --> 00:05.960
所谓的搭建全站运用呢

00:05.960 --> 00:09.440
也就是 比如说你用无右开发前端

00:09.440 --> 00:11.640
后端呢 你用Express

00:11.640 --> 00:14.000
那么这个两个结合起来呢

00:14.000 --> 00:16.280
搭一个工程 那么就是全站运用

00:16.440 --> 00:19.080
当然呢 如果说这些技术里都学习了

00:19.080 --> 00:20.440
我们那里应该知道

00:20.440 --> 00:22.920
这种搭建方式呢 可以分开搭建

00:22.920 --> 00:25.320
两个东西分开 两个项目

00:25.320 --> 00:28.600
也可以呢 把它合并成一个工程进行搭建

00:28.800 --> 00:31.800
那么合并的方式呢 也有很多你在学习逗逗的时候

00:31.800 --> 00:34.000
我也提到过一些方式 对吧

00:34.000 --> 00:36.600
那么这里呢 我再给大家介绍一种方式

00:36.600 --> 00:38.800
今后呢 你们的公司里面具体用啥

00:38.800 --> 00:40.800
我还真不清楚 我也不知道

00:40.800 --> 00:42.800
给大家提供一些思路吧

00:42.800 --> 00:44.600
这里呢 我也派个地址啊

00:44.600 --> 00:45.800
就是这个工程地址呢

00:45.800 --> 00:48.200
我给大家复制下来 还是老规矩

00:48.200 --> 00:49.400
把它拷贝过来

00:50.200 --> 00:51.400
桌面

00:52.400 --> 00:53.600
地址 扣浪

00:55.200 --> 00:56.000
拷贝过来

01:01.380 --> 01:03.580
我们这里呢 我的解构呢 是这个样子

01:03.580 --> 01:05.180
给大家搭的结构是这样子

01:05.180 --> 01:06.580
就是有两个文件夹

01:06.580 --> 01:08.180
一个呢 是client

01:08.180 --> 01:10.380
这里边呢 就是利用脚手架

01:10.380 --> 01:11.980
利用脚手架

01:11.980 --> 01:13.780
比方说像Vue 脚手架啊

01:13.780 --> 01:14.780
rex 脚手架啊

01:14.780 --> 01:16.780
对吧 也搭建了一个文件夹

01:16.780 --> 01:18.980
当然你也可以利用我们之前学过的知识

01:18.980 --> 01:21.180
你可以自己去搭建一个

01:21.180 --> 01:23.180
这些课 顺便说一句啊

01:23.180 --> 01:24.580
还是一样 这些课呢

01:24.580 --> 01:25.980
你要学习的Vue

01:25.980 --> 01:27.980
你要学习的NoteGS过后呢

01:27.980 --> 01:29.580
你才能听这些课啊

01:29.980 --> 01:32.180
这个文件夹就是利用脚手架搭的

01:32.180 --> 01:33.980
也可以呢 直接用Vue派回来搭

01:33.980 --> 01:36.580
知识搭也可以 总之把它搭起来

01:36.580 --> 01:38.180
好 另外一个就是server

01:39.580 --> 01:41.780
这边这个东西呢 是要客户端

01:41.780 --> 01:43.580
客户端文件夹

01:43.580 --> 01:45.580
那么这个server呢 就是那个

01:46.580 --> 01:47.780
服务器文件夹

01:48.580 --> 01:50.780
那么就是纯粹的load代码

01:50.780 --> 01:53.580
纯load代码

01:53.580 --> 01:54.780
也就是包含了吗

01:54.780 --> 01:55.980
包含什么express啊

01:55.980 --> 01:57.380
包含什么mango db

01:57.380 --> 01:58.780
mysuckle啊这些东西啊

01:58.980 --> 01:59.980
就在这里边许写

01:59.980 --> 02:00.980
就这两个文件夹

02:01.580 --> 02:03.380
然后如果说客户端和服务器

02:03.380 --> 02:04.580
有功用的东西啊

02:04.580 --> 02:06.580
比方说都要用到loaddashcode

02:06.580 --> 02:07.980
都要用到moke.js

02:07.980 --> 02:09.580
那么你可以在外面写一声

02:09.580 --> 02:10.580
比方说啊

02:10.580 --> 02:12.580
比如啊写一个common

02:12.580 --> 02:14.180
那么就是功用的啊

02:14.180 --> 02:16.980
功用的功用的code就可以写到这

02:16.980 --> 02:19.180
对吧 那我们把它搭到一个工程里边

02:19.180 --> 02:20.380
好 这边应该下完了啊

02:21.380 --> 02:22.180
好 我们这里呢

02:22.980 --> 02:23.380
到现在

02:26.840 --> 02:27.440
好 你看

02:27.440 --> 02:28.940
不就一个client文件夹啊

02:28.940 --> 02:30.240
一个server文件夹吗

02:30.240 --> 02:30.640
对不对

02:31.640 --> 02:32.740
那么server文件夹里边

02:32.740 --> 02:33.640
client文件夹里边

02:33.640 --> 02:34.940
是不是都有loaddashcode

02:34.940 --> 02:36.240
对吧 它们都有自己的依赖

02:36.240 --> 02:37.640
你看每个都有自己的package

02:37.640 --> 02:39.040
节省都有自己的依赖

02:39.040 --> 02:39.640
那么我们这里呢

02:39.640 --> 02:41.040
就首先安装依赖

02:41.640 --> 02:42.440
npm

02:43.240 --> 02:44.640
安装一下client的依赖

02:45.240 --> 02:45.840
然后呢

02:45.840 --> 02:47.240
再安装一下server的依赖

02:50.190 --> 02:50.790
npm

02:52.990 --> 02:54.190
把两个e都安装一下

02:54.790 --> 02:56.790
对好 安装好了啊

02:57.690 --> 02:58.590
好 这边还有多一块

02:58.990 --> 03:00.590
那么client server

03:00.590 --> 03:01.990
把他们的依赖都安装好了

03:03.190 --> 03:04.390
好 安装好了之后呢

03:04.390 --> 03:06.390
他们在根目录下面还有依赖

03:06.990 --> 03:08.590
根目录下面的依赖干嘛用的呢

03:08.590 --> 03:09.790
我们等一下再说

03:09.790 --> 03:10.990
我们再先进去

03:10.990 --> 03:11.990
到位上进步路

03:12.790 --> 03:13.790
进入到它的根目录

03:13.790 --> 03:14.990
根目录里边还有依赖

03:14.990 --> 03:15.990
我们也要安装一下

03:17.390 --> 03:18.990
好 那么我们现在的模式是什么呢

03:18.990 --> 03:20.990
就是client管自己的

03:20.990 --> 03:22.490
管自己的就是客户端

03:22.490 --> 03:23.490
比如说vue啊

03:23.490 --> 03:24.090
regards啊

03:24.090 --> 03:27.390
你看一下client里边就是一个vue工程

03:27.390 --> 03:28.690
对吧 就是一个vue工程

03:29.090 --> 03:29.690
好 server呢

03:29.690 --> 03:30.990
就是一个express工程

03:30.990 --> 03:31.590
你看

03:31.790 --> 03:32.790
一个press吧

03:32.790 --> 03:34.190
这个代码很熟悉了吧

03:34.190 --> 03:35.390
对吧 它的静态目录呢

03:35.390 --> 03:37.390
就是当前目录下面的public文念甲

03:38.590 --> 03:39.790
那么就是两个工程

03:39.790 --> 03:40.790
两个工程是分开的

03:40.790 --> 03:41.790
没有什么联系

03:42.390 --> 03:44.090
现在呢我们要做的事情呢

03:44.090 --> 03:44.990
是什么呢

03:44.990 --> 03:47.790
就是我们要再把它打包

03:47.790 --> 03:48.890
打包的时候呢

03:48.890 --> 03:51.290
我要把这个client打包到

03:51.290 --> 03:52.790
就是我们要形成一个目录

03:52.790 --> 03:53.690
desk

03:53.690 --> 03:55.290
这个目录下面就是服务器代码

03:56.090 --> 03:57.990
我们的服务端代码就在这里边

03:57.990 --> 03:59.590
那么这里边有一个文念甲

03:59.590 --> 04:00.490
public

04:00.490 --> 04:01.690
public里边放啥呢

04:01.690 --> 04:03.390
放的就是客户端的打包结果

04:03.390 --> 04:04.190
这个客户端啊

04:04.190 --> 04:05.390
就是vue的程序打包的结果

04:05.390 --> 04:06.790
是不是放到这儿

04:06.790 --> 04:07.590
如果说你没

04:07.590 --> 04:08.690
你得当当前的条件

04:08.690 --> 04:10.690
你得学习过loader.js你才知道啊

04:10.690 --> 04:12.390
你没学习过的肯定不懂

04:12.390 --> 04:13.790
那么这里loader.js你只

04:13.790 --> 04:14.390
你只知道啊

04:14.390 --> 04:15.490
一个trace里面打了过分了

04:15.490 --> 04:16.290
我们把它放到

04:16.290 --> 04:17.490
就是我们客户端的

04:17.490 --> 04:18.190
頁面啊

04:18.190 --> 04:18.990
js啊

04:18.990 --> 04:19.690
css啊

04:19.690 --> 04:21.390
把它放到这个目录下面去

04:21.390 --> 04:22.590
然后呢服务器的代码呢

04:22.590 --> 04:23.190
我们就可以把了

04:23.190 --> 04:25.390
直接放到index.js里边去

04:25.390 --> 04:26.290
对吧 打包到这儿

04:26.390 --> 04:28.090
那么这里是服务器代码

04:28.090 --> 04:29.590
服务器代码

04:29.590 --> 04:30.690
那么这是客户端代码

04:30.690 --> 04:31.590
就是打包的时候呢

04:31.590 --> 04:33.990
我们把两个合并在一起打包

04:33.990 --> 04:34.990
那怎么来打包呢

04:34.990 --> 04:36.090
我们就在跟目录下面呢

04:36.090 --> 04:38.690
跟目录主要是提供一个打包功能

04:38.690 --> 04:40.090
那就对他们进行打包

04:40.090 --> 04:41.490
怎么打包呢

04:41.490 --> 04:42.990
你看啊

04:42.990 --> 04:44.790
我这里就写了一个安装了

04:44.790 --> 04:46.790
怎么安装了一个wipack cd

04:46.790 --> 04:48.590
wipack wipack cd

04:48.590 --> 04:49.290
对吧

04:49.290 --> 04:50.290
那进行打包

04:50.290 --> 04:51.290
那么这个wipack的配置

04:51.290 --> 04:52.490
我们来看一下吧

04:52.490 --> 04:53.290
配置的时候呢

04:53.290 --> 04:55.190
我们这里还是根据环境面量

04:55.190 --> 04:56.590
看到底是开发环境

04:56.590 --> 04:57.690
还是生产环境

04:57.690 --> 04:59.390
我们刚才说的是生产环境的模式

04:59.390 --> 04:59.990
对不对

04:59.990 --> 05:00.990
好 生产环境呢

05:00.990 --> 05:02.790
我们就是production

05:02.790 --> 05:04.490
好 然后这里定一个别名

05:04.490 --> 05:05.590
当然定不定无所谓

05:05.590 --> 05:06.390
也可以不用定

05:06.390 --> 05:07.690
因为我们只是为了打包嘛

05:07.690 --> 05:09.290
对吧 也可以不要用这个东西

05:09.290 --> 05:12.890
好 DevTool要不要包含那个source map

05:12.890 --> 05:14.590
这东西也是根据开发模式呢

05:14.590 --> 05:16.490
就要 生产环境就不要

05:16.490 --> 05:17.490
N2呢

05:17.490 --> 05:18.990
就是我们的入口文件呢

05:18.990 --> 05:21.190
入口文件是服务器文件

05:21.190 --> 05:22.290
因为我们这一层目录呢

05:22.290 --> 05:25.790
主要是放的是服务器的打包结果

05:25.790 --> 05:28.790
因为我们客户端是依附于服务器存在的

05:28.790 --> 05:29.290
对不对

05:29.290 --> 05:31.290
所以说我们这里的是服务器

05:31.290 --> 05:32.290
为入口

05:32.290 --> 05:33.790
然后talkit我们讲过了

05:33.790 --> 05:34.290
load

05:34.290 --> 05:35.290
没问题吧

05:35.290 --> 05:36.290
load为talkit

05:36.290 --> 05:39.290
就是我们打包了目标是load的

05:39.290 --> 05:39.690
然后呢

05:39.690 --> 05:40.290
我们这里呢

05:40.290 --> 05:40.890
针对

05:40.890 --> 05:43.290
那么这个地方我们把它设为forcing啥意思呢

05:43.290 --> 05:44.190
就是我们load里面呢

05:44.190 --> 05:46.090
有可能会使用一些全聚变量啊

05:46.090 --> 05:47.390
就上级客网说了

05:47.390 --> 05:48.590
使用一些全聚变量啊

05:48.590 --> 05:50.290
包括这个什么DRNAM呢

05:50.290 --> 05:51.090
这东西

05:51.090 --> 05:51.590
这个东西呢

05:51.590 --> 05:53.890
我让它保持斗的原生的东西啊

05:53.890 --> 05:54.890
把它关闭掉

05:54.890 --> 05:56.690
那么这个如果说打开的话

05:56.690 --> 05:57.790
它是一个什么效果呢

05:57.790 --> 05:58.890
它是在wavpike呢

05:58.890 --> 06:00.890
经我模拟的一些全聚变量

06:00.890 --> 06:02.690
给我模拟的一个DRNAM

06:02.690 --> 06:03.990
那么可能要出问题啊

06:03.990 --> 06:05.390
把它关闭掉就行了

06:05.390 --> 06:05.490
好

06:05.490 --> 06:05.890
那么这里呢

06:05.890 --> 06:07.690
我做了一个就是清楚插件啊

06:07.690 --> 06:09.690
清楚我们的打包目录

06:09.690 --> 06:10.090
对吧

06:10.090 --> 06:11.790
我们这个这个地方写的是啥呀

06:11.790 --> 06:13.390
写的就是打包什么呢

06:13.390 --> 06:15.890
打包了一个服务阶段带嘛

06:15.890 --> 06:16.090
好

06:16.090 --> 06:17.990
咱们来看一下吧

06:17.990 --> 06:18.490
我们这里呢

06:22.470 --> 06:24.470
打包

06:24.470 --> 06:25.170
打包完成了

06:25.170 --> 06:26.870
你看电视目录不就是个服务器代码吗

06:26.870 --> 06:27.570
对不对

06:27.570 --> 06:27.670
好

06:27.670 --> 06:28.970
那么这个服务器代码能不能运行呢

06:28.970 --> 06:29.870
当然可以运行

06:29.870 --> 06:30.910
比较load

06:30.910 --> 06:32.770
desk index

06:32.770 --> 06:33.870
你看不就可以运行吗

06:33.870 --> 06:34.370
对吧

06:34.370 --> 06:36.770
服务器监听端口是9527

06:36.770 --> 06:37.770
没问题吧

06:37.770 --> 06:38.850
那不要说

06:38.850 --> 06:40.670
当然现在访问不到啊

06:40.670 --> 06:41.870
因为没有镜摊页面

06:41.870 --> 06:42.170
对吧

06:42.170 --> 06:43.870
访问不到

06:43.870 --> 06:44.070
好

06:44.070 --> 06:46.870
如果说我在电视目录下面加一个public文件夹

06:46.870 --> 06:48.070
你看一下

06:48.070 --> 06:49.110
public文件夹里边

06:49.110 --> 06:49.870
加一个index

06:50.270 --> 06:54.070
这点起个H1元素吧

06:54.070 --> 06:55.870
哈喽

06:55.870 --> 06:56.870
好

06:56.870 --> 06:57.270
保存

06:57.270 --> 06:58.070
那么这边刷新

06:58.070 --> 06:59.270
你看不就访问到了吗

06:59.270 --> 07:02.270
所以说我们打包好了服务器代码过后呢

07:02.270 --> 07:04.570
第二件事要做的是什么呢

07:04.570 --> 07:06.970
就是把客户端就是位就是个5u啊

07:06.970 --> 07:08.470
他的打包结果放到这

07:08.470 --> 07:09.270
对不对

07:09.270 --> 07:11.870
那5u的打包结构怎么来放到这呢

07:11.870 --> 07:13.070
其实也非常简单

07:13.070 --> 07:13.870
怎么放到这

07:13.870 --> 07:15.270
5u里面不是有个配置吗

07:15.270 --> 07:16.670
5u config的件是对吧

07:16.670 --> 07:18.270
5u cd里面有个配置

07:18.270 --> 07:19.870
就是output.r

07:19.870 --> 07:21.470
就是他们打包的结果放到哪

07:21.470 --> 07:22.170
放到哪呢

07:22.170 --> 07:24.970
放到上一集目录的电视文件夹下面的public

07:24.970 --> 07:25.270
对不对

07:25.270 --> 07:26.370
是不是放到这

07:26.370 --> 07:28.370
那么这样子的我去运行什么呢

07:28.370 --> 07:31.170
比方说我们去进入client目录

07:31.170 --> 07:32.470
然后运行

07:32.470 --> 07:35.070
运行那个npm-zone build

07:35.070 --> 07:36.870
你看这样子运行过后

07:36.870 --> 07:37.970
是客户端的结果

07:37.970 --> 07:39.270
我就打包到这个目录下面去了

07:39.270 --> 07:40.370
你看这个目录消失了

07:40.370 --> 07:41.670
他给你清除掉了

07:41.670 --> 07:42.170
然后呢

07:42.170 --> 07:44.270
把打包结果放到是不是放到这

07:44.270 --> 07:44.770
对不对

07:44.770 --> 07:47.970
你看现在我们再去启动服务器

07:48.070 --> 07:49.270
loads

07:49.270 --> 07:50.970
那么现在打包完了过后呢

07:50.970 --> 07:53.960
接

07:53.960 --> 07:57.920
cannot find the module

07:57.920 --> 07:58.820
哦对

07:58.820 --> 08:00.120
推出上一个目录

08:00.120 --> 08:00.820
然后呢

08:00.820 --> 08:02.520
我们运行loads

08:02.520 --> 08:03.520
index

08:03.520 --> 08:03.720
好

08:03.720 --> 08:04.320
那么现在呢

08:04.320 --> 08:06.120
我们就是运行的东西

08:06.120 --> 08:06.920
跟他有没有关系

08:06.920 --> 08:07.620
没关系了

08:07.620 --> 08:08.220
跟他有没关系

08:08.220 --> 08:08.720
没关系了

08:08.720 --> 08:09.420
跟他们有没关系

08:09.420 --> 08:10.520
跟这些东西全部没关系了

08:10.520 --> 08:11.020
对吧

08:11.020 --> 08:11.720
那么最后呢

08:11.720 --> 08:12.720
你要上传到服务器

08:12.720 --> 08:13.620
要部署的话

08:13.620 --> 08:15.220
只需要把这个目录部署到服务器

08:15.220 --> 08:15.920
就完事了

08:15.920 --> 08:16.720
跟其他的文件讲

08:16.720 --> 08:17.620
一点关系都没有了

08:17.620 --> 08:17.820
对吧

08:17.820 --> 08:19.020
打包完成了

08:19.020 --> 08:19.220
好

08:19.220 --> 08:20.520
接下来来看一下这边吗

08:20.620 --> 08:21.620
local house

08:23.120 --> 08:24.320
9527

08:24.320 --> 08:25.220
你看不就出来了

08:25.220 --> 08:26.220
对吧

08:26.220 --> 08:26.420
对吧

08:26.420 --> 08:28.020
我们的服务器都要搭建好了

08:28.020 --> 08:28.320
而且呢

08:28.320 --> 08:29.420
他搭建了我们的

08:29.420 --> 08:31.620
就是提供了就是静态资源

08:31.620 --> 08:33.120
就是无忧的静态资源

08:33.120 --> 08:33.620
就完事了

08:33.620 --> 08:36.020
这就是我们生产回应的环境的打包

08:36.020 --> 08:36.620
那么这里呢

08:36.620 --> 08:37.720
我们比较麻烦的一点

08:37.720 --> 08:39.420
就是我们要去手动的去写

08:39.420 --> 08:40.020
对不对

08:40.020 --> 08:41.120
先打包服务器

08:41.120 --> 08:41.620
然后呢

08:41.620 --> 08:43.520
再去打包客户端

08:43.520 --> 08:44.820
那么我们能不能把合并起来

08:44.820 --> 08:45.820
一条命令搞定的

08:45.820 --> 08:48.120
我在Party也接受里边搞定了

08:48.120 --> 08:49.420
你看怎么搞定的

08:49.520 --> 08:50.820
我写了一个Build的命令

08:50.820 --> 08:51.520
那么这个命令呢

08:51.520 --> 08:53.020
我用到了另外一个工具

08:53.020 --> 08:54.620
叫做npm装饿

08:54.620 --> 08:56.520
让我首先安装了这个工具

08:56.520 --> 08:57.520
这工具干嘛用的呢

08:57.520 --> 08:59.220
这工具就是执行

08:59.220 --> 09:01.220
执行其他脚本

09:01.220 --> 09:02.820
你看我这下面有两个脚本

09:02.820 --> 09:05.220
第一个脚本是设置为perboxing

09:05.220 --> 09:07.120
把环境面量设置为perboxing

09:07.120 --> 09:08.020
然后呢

09:08.020 --> 09:08.820
打包

09:08.820 --> 09:10.420
看就刚才我们就是做的第一件事

09:10.420 --> 09:11.420
是不是打包

09:11.420 --> 09:13.020
把打包到这层目录

09:13.020 --> 09:14.020
然后呢

09:14.020 --> 09:14.920
接下来第二件事

09:14.920 --> 09:15.820
是不是进入客户端

09:15.820 --> 09:16.020
对吧

09:16.020 --> 09:17.920
CD client进入这个目录

09:17.920 --> 09:19.720
然后来运行npm装Build

09:19.720 --> 09:20.220
对不对

09:20.220 --> 09:21.920
这不就是两件事对不对

09:21.920 --> 09:23.520
那么我们把这两件事合并一下

09:23.520 --> 09:25.020
就是先运行它

09:25.020 --> 09:26.120
先运行这个命令

09:26.120 --> 09:27.420
再运行这个命令

09:27.420 --> 09:28.920
那么运行多个命令呢

09:28.920 --> 09:31.320
我们可以利用一个工具叫npm装

09:31.320 --> 09:32.420
哦

09:32.420 --> 09:33.520
加上一个Hunger S呢

09:33.520 --> 09:34.320
参数什么意思呢

09:34.320 --> 09:36.720
这个是指的是一次运行

09:36.720 --> 09:38.120
一次运行

09:38.120 --> 09:39.620
就是先运行它

09:39.620 --> 09:41.420
运行完了过后再运行它

09:41.420 --> 09:42.120
就完事了

09:42.120 --> 09:43.920
你看把这两个命令一次运行

09:43.920 --> 09:45.420
那么现在我们来试一下

09:45.420 --> 09:48.420
我们使用npm装Build

09:48.420 --> 09:50.320
那么就是两个命令都运行了

09:50.320 --> 09:51.320
运行第一个命令

09:51.320 --> 09:53.020
然后再运行Build

09:53.020 --> 09:55.520
Build就是Client再运行

09:55.520 --> 09:56.420
它就运行完了

09:56.420 --> 09:58.820
那么这边我们来看一下

09:58.820 --> 10:04.120
localhost 9527

10:04.120 --> 10:05.420
哦没有启动的时候

10:05.420 --> 10:09.190
还没启动load dash

10:09.190 --> 10:10.990
好运行出来了

10:10.990 --> 10:11.790
是不是就出来了

10:11.790 --> 10:12.090
对不对

10:12.090 --> 10:13.090
那么就是生产环境

10:13.090 --> 10:14.190
那么这个时候呢

10:14.190 --> 10:15.290
你就可以把这个文件夹

10:15.290 --> 10:16.190
其他都不用管

10:16.190 --> 10:17.390
直接扔到服务器上

10:17.390 --> 10:19.090
部署就完事了

10:19.090 --> 10:19.390
好了吗

10:19.390 --> 10:20.990
在开发模式怎么办呢

10:20.990 --> 10:23.190
你想想开发模式怎么办

10:23.190 --> 10:25.790
开发模式是不是也对于服务器而言

10:25.790 --> 10:26.990
是不是也要打包

10:26.990 --> 10:27.990
把它打不到这个目录

10:27.990 --> 10:29.490
然后直接运行它

10:29.490 --> 10:30.990
对不对

10:30.990 --> 10:32.490
那么我们这里的也把配置好了

10:32.490 --> 10:33.290
看一下吧

10:33.290 --> 10:34.190
在开发模式

10:34.190 --> 10:35.990
我这里写了三个脚本

10:35.990 --> 10:37.190
就是成了两个脚本

10:37.190 --> 10:38.790
一个是server

10:38.790 --> 10:41.890
就是开发模式下面的服务器构建

10:41.890 --> 10:43.890
先就是我们上级课学的

10:43.890 --> 10:45.890
用开发模式

10:45.890 --> 10:47.890
然后打包

10:47.890 --> 10:48.890
打包完了过后干嘛呢

10:48.890 --> 10:50.890
运行这个垫子下面的integre色

10:50.890 --> 10:51.290
对不对

10:51.290 --> 10:52.490
是这样的模式

10:52.490 --> 10:53.890
然后为了方便

10:53.890 --> 10:54.890
我把它合并了一下

10:54.890 --> 10:55.890
合并到这了

10:55.890 --> 10:57.890
就那么监视

10:57.890 --> 10:59.890
监视server这个文件夹

10:59.890 --> 11:00.890
监视服务器这个文件夹

11:00.890 --> 11:02.890
服务器的文件夹里边的内容

11:02.890 --> 11:03.890
一旦有改动

11:03.890 --> 11:04.890
有改动怎么办呢

11:04.890 --> 11:06.890
有改动我就执行

11:06.890 --> 11:07.890
就我们上级课学的

11:07.890 --> 11:09.890
运行server必有的命令

11:09.890 --> 11:12.890
就运行这个命令

11:12.890 --> 11:15.890
然后再运行这个命令

11:15.890 --> 11:16.890
先打包再执行

11:16.890 --> 11:17.890
对不对

11:17.890 --> 11:19.890
所以说我们要运行服务器很简单

11:19.890 --> 11:21.890
我们只需要用这个命令优秀了

11:21.890 --> 11:22.890
我们再看一下吧

11:22.890 --> 11:24.890
integre装

11:24.890 --> 11:25.890
server

11:25.890 --> 11:27.890
是不是要运行这个命令就完事了

11:27.890 --> 11:29.890
你看服务器是不是执行起来了

11:29.890 --> 11:30.890
对吧

11:30.890 --> 11:32.890
当然这个目录之前也被清除掉了

11:32.890 --> 11:33.890
你看现在有map文件了

11:33.890 --> 11:34.890
说明什么

11:34.890 --> 11:35.890
说明是开发模式

11:35.890 --> 11:37.890
我们上级课学的对吧

11:37.890 --> 11:38.890
那么开发模式服务器运行起来了

11:38.890 --> 11:40.890
那客户端怎么办呢

11:40.890 --> 11:41.890
客户端

11:41.890 --> 11:42.890
一看客户端在这里

11:42.890 --> 11:44.890
客户端我们就进入这个cd

11:44.890 --> 11:45.890
client model

11:45.890 --> 11:46.890
然后直接运行

11:46.890 --> 11:47.890
npm装server

11:47.890 --> 11:48.890
这是不是vue的命令

11:48.890 --> 11:49.890
对吧

11:49.890 --> 11:51.890
进入这个目录去运行这个vue的命令

11:51.890 --> 11:52.890
那么我们现在无非就是

11:52.890 --> 11:54.890
把这两条命令合并起来对吧

11:54.890 --> 11:56.890
这条命令和这条命令合并起来

11:56.890 --> 11:58.890
那么我们又利用npm装

11:58.890 --> 11:59.890
那么现在的客户端服务器呢

11:59.890 --> 12:00.890
是分开的

12:00.890 --> 12:01.890
因此呢我们这一用

12:01.890 --> 12:02.890
很钢P

12:02.890 --> 12:04.890
叫做paranence

12:04.890 --> 12:06.890
表示并行运行

12:06.890 --> 12:08.890
就两个命令不是先后顺序

12:08.890 --> 12:09.890
一起运行

12:09.890 --> 12:10.890
是吧

12:10.890 --> 12:11.890
你运行服务器

12:11.890 --> 12:12.890
你运行客户端

12:12.890 --> 12:13.890
对吧

12:13.890 --> 12:14.890
那么客户端里边

12:14.890 --> 12:15.890
当然要配置一些代理啊

12:15.890 --> 12:16.890
这些东西

12:16.890 --> 12:17.890
你就去运行就完事了

12:17.890 --> 12:18.890
好

12:18.890 --> 12:19.890
咱们来试一下吧

12:20.890 --> 12:21.890
npm装

12:21.890 --> 12:22.890
对

12:24.890 --> 12:25.890
现在服务器搭建起来了

12:25.890 --> 12:26.890
看服务器运行了

12:26.890 --> 12:27.890
对不对

12:27.890 --> 12:29.890
然后客户端也运行起来了

12:29.890 --> 12:30.890
服务器的端口

12:30.890 --> 12:32.890
就在9527客户端的端口

12:32.890 --> 12:34.890
客户端启动了一个0时的开发服务器

12:34.890 --> 12:35.890
叫8080

12:37.890 --> 12:38.890
8080

12:38.890 --> 12:39.890
所以客户端也运行起来了

12:39.890 --> 12:41.890
当然现在客户端连服务器

12:41.890 --> 12:43.890
连服务器9527的话

12:43.890 --> 12:44.890
那么就需要用代理

12:44.890 --> 12:45.890
对吧

12:45.890 --> 12:46.890
表示有

12:46.890 --> 12:48.890
就完事了

12:48.890 --> 12:49.890
这是开发模式

12:49.890 --> 12:50.890
开发好了过后就运行

12:50.890 --> 12:51.890
这个npm装必有的

12:51.890 --> 12:53.890
我们用这个工程搭建好了之后

12:53.890 --> 12:55.890
开发的时候npm装

12:55.890 --> 12:57.890
开发完了过后

12:57.890 --> 12:59.890
npm装必有的

12:59.890 --> 13:00.890
就完事了

13:00.890 --> 13:01.890
好了

13:01.890 --> 13:02.890
这就是我们这个

13:02.890 --> 13:03.890
一个案例

13:03.890 --> 13:05.890
如何来搭建一个服务器

13:05.890 --> 13:06.890
就全站项目

13:06.890 --> 13:07.890
服务器也有

13:07.890 --> 13:08.890
客户端也有

13:08.890 --> 13:09.890
如果他们有公共的代吧

13:09.890 --> 13:10.890
我们在这里

13:10.890 --> 13:11.890
可以随便先跟我一样讲

13:11.890 --> 13:12.890
比方说common

13:12.890 --> 13:13.890
这就随便了

13:13.890 --> 13:14.890
根据自己灵活来处理的

13:14.890 --> 13:15.890
比方说我们这里有一个UTO

13:15.890 --> 13:17.890
第二介绍

13:17.890 --> 13:18.890
那么客户端怎么能用

13:18.890 --> 13:19.890
当然能用

13:19.890 --> 13:21.890
比方说客户端里边

13:21.890 --> 13:23.890
客户端里边怎么用

13:23.890 --> 13:24.890
import

13:24.890 --> 13:25.890
然后随便吧

13:25.890 --> 13:27.890
from

13:27.890 --> 13:28.890
上级目录

13:28.890 --> 13:29.890
上级目录

13:29.890 --> 13:30.890
common

13:30.890 --> 13:31.890
对

13:31.890 --> 13:32.890
然后UTO

13:32.890 --> 13:33.890
客户端是不是可以用

13:33.890 --> 13:34.890
最重要打包的

13:34.890 --> 13:35.890
打包的时候

13:35.890 --> 13:36.890
会根据这个依赖关系

13:36.890 --> 13:38.890
就能打进行打包

13:38.890 --> 13:41.890
然后服务器是不是也能用

13:41.890 --> 13:42.890
对不对

13:42.890 --> 13:44.890
那么这里就完事了

13:44.890 --> 13:45.890
因此

13:45.890 --> 13:46.890
这是关于

13:46.890 --> 13:47.890
这个

13:47.890 --> 13:50.890
全站应用的处理

13:50.890 --> 13:51.890
那么现在的致使

13:51.890 --> 13:53.890
我目前还想不到有什么

13:53.890 --> 13:55.890
当然我这里用的是view

13:55.890 --> 13:56.890
如果是rex的话

13:56.890 --> 13:57.890
是不是一样的道理

13:57.890 --> 13:58.890
目前我就想不到

13:58.890 --> 13:59.890
有什么还要补充的了

13:59.890 --> 14:01.890
那么就补充到这吧

14:01.890 --> 14:02.890
之后想不到再说

