WEBVTT

00:00.690 --> 00:04.690
咱们这一课呢继续来说这个传输性能

00:04.690 --> 00:07.290
前面两节课呢我们说了分包对吧

00:07.290 --> 00:09.290
把一些公共的代码提出去

00:09.290 --> 00:11.890
但是分包呢他有一个

00:11.890 --> 00:13.090
不算是缺陷吧

00:13.090 --> 00:14.690
因为他关注的点不一样

00:14.690 --> 00:17.290
嗯他有一个问题没有解决

00:17.290 --> 00:20.290
就是说如果说一个模块里面的代码

00:20.290 --> 00:23.490
太就是代码呃太多了

00:23.490 --> 00:25.690
那么如何来让这些代码减少

00:25.690 --> 00:27.290
如何让我们打包体积

00:27.290 --> 00:29.890
就单个模块打包体积减少

00:29.890 --> 00:32.690
因为我们分包只是把这些模块提出去对吧

00:32.690 --> 00:36.490
他并不会对这些模块啊进行其他的处理

00:36.490 --> 00:38.290
那么这个模块原来代码是什么样子

00:38.290 --> 00:39.990
他就提出去是什么样子

00:39.990 --> 00:42.990
那么如何对单个模块里面的代码进行说小了

00:42.990 --> 00:44.590
那么就涉及到另外一个问题了啊

00:44.590 --> 00:45.990
单模块提及优化

00:45.990 --> 00:47.990
他跟分包呢是不冲突的啊

00:47.990 --> 00:48.890
完全不冲突

00:48.890 --> 00:52.190
就说你分包呢和这个东西可以联合使用啊

00:52.190 --> 00:53.790
一点问题都没有

00:53.790 --> 00:57.090
那么他只是对单个模块里面的代码进行压缩

00:57.090 --> 00:59.190
那么这里呢又涉及到两个知识点啊

00:59.190 --> 01:02.390
所以说性能优化这里其实东西特别特别多

01:02.390 --> 01:05.590
但是呢你要说他有他对我们的开发

01:05.590 --> 01:06.890
有特别大的影响吗

01:06.890 --> 01:07.890
其实也没有啊

01:07.890 --> 01:09.090
一般都是在后期呢

01:09.090 --> 01:12.090
我们来进行调整来进行优化

01:12.090 --> 01:13.590
好那么我们这里的两个点

01:13.590 --> 01:15.290
一个呢是代码压缩

01:15.290 --> 01:17.190
一个呢是吹斜坑

01:17.190 --> 01:18.790
代码压缩呢

01:18.790 --> 01:20.190
解决一方面的问题啊

01:20.190 --> 01:22.090
吹斜坑呢有解决另一方面的问题

01:22.090 --> 01:25.190
好咱们首先呢这结果来说这个代码压缩

01:25.190 --> 01:27.790
好咱们来看一下我们的课件啊

01:27.790 --> 01:30.290
我们首先说一下代码压缩是怎么产生的啊

01:30.290 --> 01:31.390
什么回事

01:31.390 --> 01:33.390
为什么要进行代码压缩呢

01:33.390 --> 01:35.590
当然是为了减少代码的体积啊

01:35.590 --> 01:37.990
减少一个模块里边的代码体积

01:37.990 --> 01:38.990
另外呢一方面呢

01:38.990 --> 01:41.190
他是为了破坏代码的可读性

01:41.190 --> 01:42.390
就把你的代码打乱

01:42.390 --> 01:43.890
就是我们相当于是

01:43.890 --> 01:46.490
更加专业的数以叫做混小

01:46.490 --> 01:48.290
那么通过混小之后呢

01:48.290 --> 01:50.290
你的代码呢就更加难以阅读了

01:50.290 --> 01:51.790
啊因为我们打包之后的代码

01:51.790 --> 01:53.790
我们也自己也不读不读

01:53.790 --> 01:55.190
那么打包之后的代码呢

01:55.190 --> 01:57.290
是用于生产环境的啊

01:57.290 --> 01:58.290
因此呢

01:58.290 --> 01:59.790
我们希望在生产环境里边

01:59.790 --> 02:01.990
别人很难读懂我们的代码

02:01.990 --> 02:04.190
那么保护我们的知识产权啊

02:04.190 --> 02:05.990
有这么两个作用

02:05.990 --> 02:07.390
好那么什么时候要进行代码压缩呢

02:07.390 --> 02:08.690
自然是生产环境啊

02:08.690 --> 02:12.090
一般来说开发环境的话是不需要的啊

02:12.090 --> 02:13.090
呃

02:13.090 --> 02:14.590
那么我们怎么来进行压缩呢

02:14.590 --> 02:16.590
就用用什么样的压缩工具呢

02:16.590 --> 02:18.590
目前呢最流行的压缩工具呢

02:18.590 --> 02:20.990
有两个一个是arctify.js

02:20.990 --> 02:22.890
我们之前呢也给大家提到过对吧

02:22.890 --> 02:25.290
这是一个非常传统的压缩工具

02:26.290 --> 02:28.290
这个arctify.js呢

02:28.290 --> 02:30.290
它其实已经存在了很多很多年了啊

02:30.290 --> 02:32.290
在es6之前了就已经存在了

02:32.290 --> 02:35.290
但是呢这么多年下来es6已经出来好几年了

02:35.290 --> 02:38.290
它仍然没有支持es6的语法

02:38.290 --> 02:40.290
那么官方呢是这么说的

02:40.290 --> 02:42.290
他说你这个es6语法呢

02:42.290 --> 02:44.290
你就直接用bibor进行编译啊

02:44.290 --> 02:45.290
编译之后呢

02:45.290 --> 02:47.290
不是就编成es5了吗

02:47.290 --> 02:48.290
编译之后呢

02:48.290 --> 02:49.290
我在进行压缩

02:49.290 --> 02:50.290
所以说呢

02:50.290 --> 02:52.290
他又他让你这样去做

02:52.290 --> 02:53.290
但是呢

02:53.290 --> 02:55.290
但是呢他实际上呢

02:55.290 --> 02:58.290
这个我也不是特别认同吧

02:58.290 --> 03:00.290
因为毕竟有一些项目呢

03:00.290 --> 03:02.290
他不面向es5

03:02.290 --> 03:04.290
啊因为现在es6呢

03:04.290 --> 03:06.290
绝大部分瀏覽器都支持了啊一些

03:06.290 --> 03:08.290
比方一些前沿的互联网项目

03:08.290 --> 03:09.290
他只需要es6就行了

03:09.290 --> 03:10.290
我不需要bibor

03:10.290 --> 03:11.290
不需要进行转

03:11.290 --> 03:13.290
不需要进行那个就是编译

03:13.290 --> 03:15.290
那么这样子呢一来的话

03:15.290 --> 03:17.290
那么arctify.js呢

03:17.290 --> 03:18.290
他就不好用了啊

03:18.290 --> 03:20.290
因为他不支持es6的语法

03:20.290 --> 03:22.290
当然还有一些其他的问题

03:22.290 --> 03:23.290
所以说呢目前呢

03:23.290 --> 03:24.290
他的流行度呢

03:24.290 --> 03:25.290
其实已经有所下降了啊

03:25.290 --> 03:27.290
之前呢是完全是亡者

03:27.290 --> 03:28.290
你只能用他

03:28.290 --> 03:29.290
没有别的了

03:29.290 --> 03:30.290
他是最好的

03:30.290 --> 03:31.290
那么之后呢

03:31.290 --> 03:33.290
现在慢慢出来一个东新

03:33.290 --> 03:35.290
新的东西叫做terger

03:35.290 --> 03:37.290
他是一个新的压缩工具

03:37.290 --> 03:39.290
那么他就支持es6的语法

03:39.290 --> 03:41.290
那么我这里再简单说一下吧

03:41.290 --> 03:42.290
terger跟那个arctify.js

03:42.290 --> 03:44.290
实际上是一个什么样的关系呢

03:44.290 --> 03:45.290
实际上是这样子

03:45.290 --> 03:46.290
arctify.js呢

03:46.290 --> 03:49.290
他有意他不支持es6语法

03:49.290 --> 03:50.290
于是呢一些民间

03:50.290 --> 03:52.290
不是官方民间呢

03:52.290 --> 03:54.290
他出来一个库叫做arctify.js

03:54.290 --> 03:56.290
es他出来这么一个库

03:56.290 --> 03:58.290
他就在arctify.js

03:58.290 --> 04:00.290
基础上进行了一下修改

04:00.290 --> 04:02.290
他出来这么一个东西

04:02.290 --> 04:03.290
那么这个东西呢

04:03.290 --> 04:05.290
他就可以支持es6的语法

04:05.290 --> 04:06.290
但是这个玩意呢

04:06.290 --> 04:07.290
他bug比较多啊

04:07.290 --> 04:08.290
有些很多问题

04:08.290 --> 04:09.290
所以说这个东西呢

04:09.290 --> 04:11.290
也没有没有特别完善

04:11.290 --> 04:12.290
因此呢

04:12.290 --> 04:13.290
terger啊这个团队呢

04:13.290 --> 04:16.290
他就把这个arctify.js呢

04:16.290 --> 04:17.290
他又foq过来啊

04:17.290 --> 04:19.290
就把他元代码拉过来

04:19.290 --> 04:20.290
进行修改

04:20.290 --> 04:21.290
把他的bug改掉

04:21.290 --> 04:23.290
然后加了加入了一些功能

04:23.290 --> 04:24.290
于是呢

04:24.290 --> 04:26.290
terger呢其实跟他的

04:26.290 --> 04:28.290
他的基础其实还是arctify.js

04:28.290 --> 04:29.290
只不过呢

04:29.290 --> 04:30.290
他支持es6的语法

04:30.290 --> 04:31.290
而且呢没有什么bug

04:31.290 --> 04:32.290
bug比较少

04:32.290 --> 04:33.290
不能说没有bug

04:33.290 --> 04:35.290
所谓的东西都有bug

04:35.290 --> 04:36.290
因此呢

04:36.290 --> 04:38.290
我们在很多的构建工具里边呢

04:38.290 --> 04:39.290
他就内置呢

04:39.290 --> 04:40.290
目前呢

04:40.290 --> 04:42.290
不再去内置arctify.js了

04:42.290 --> 04:43.290
已经内置terger了

04:43.290 --> 04:45.290
像我们的wepike呢

04:45.290 --> 04:46.290
安装之后呢

04:46.290 --> 04:47.290
内置terger啊

04:47.290 --> 04:48.290
内置terger

04:48.290 --> 04:49.290
因此呢

04:49.290 --> 04:50.290
我们其实在wepike里边

04:50.290 --> 04:52.290
进行生产环境打包的时候

04:52.290 --> 04:54.290
他就是用的是terger打包

04:54.290 --> 04:55.290
因此呢

04:55.290 --> 04:56.290
我们这一课学习啊

04:56.290 --> 04:57.290
其实特别简单

04:57.290 --> 04:58.290
我们这一课

04:58.290 --> 04:59.290
你要做什么事呢

04:59.290 --> 05:00.290
雜色都可以不用做啊

05:00.290 --> 05:02.290
只有注意那么一点点事啊

05:02.290 --> 05:03.290
我们后面会介绍

05:03.290 --> 05:05.290
其实他已经自动完成了

05:05.290 --> 05:06.290
因此呢

05:06.290 --> 05:07.290
我们只需要了解一下啊

05:07.290 --> 05:08.290
terger他到底是怎么回事

05:08.290 --> 05:09.290
他怎么来压缩的啊

05:09.290 --> 05:11.290
他就哪些压缩效果

05:11.290 --> 05:12.290
我们这里呢

05:12.290 --> 05:13.290
可以看到啊

05:13.290 --> 05:14.290
terger的网站

05:14.290 --> 05:15.290
官方网站

05:15.290 --> 05:16.290
那这个网站呢

05:16.290 --> 05:17.290
里边呢

05:17.290 --> 05:18.290
我们去用

05:18.290 --> 05:19.290
试用一下啊

05:19.290 --> 05:20.290
这个terger

05:20.290 --> 05:21.290
你看他这里有这么一个东西啊

05:21.290 --> 05:22.290
他告诉你打包出来

05:22.290 --> 05:23.290
大概是这么一个样子

05:23.290 --> 05:24.290
这就非常类似

05:24.290 --> 05:25.290
于我们wepike的

05:25.290 --> 05:26.290
生产环境打包

05:26.290 --> 05:28.290
他其实就是用了他

05:28.290 --> 05:29.290
我们这里呢

05:29.290 --> 05:30.290
treat out

05:30.290 --> 05:31.290
试一下吧

05:31.290 --> 05:32.290
我们把这个dog打开

05:32.290 --> 05:33.290
然后试一下

05:34.290 --> 05:35.290
他这里呢

05:35.290 --> 05:36.290
有这一些测试啊

05:37.290 --> 05:38.290
当然呢

05:38.290 --> 05:39.290
这个terger呢

05:39.290 --> 05:40.290
他也有很多配置啊

05:40.290 --> 05:41.290
这个配置里边我简单说一下啊

05:41.290 --> 05:42.290
这个compress呢

05:42.290 --> 05:43.290
我们平时用的

05:43.290 --> 05:44.290
就这么两个

05:44.290 --> 05:45.290
compress呢

05:45.290 --> 05:46.290
表示的是

05:46.290 --> 05:47.290
我这个terger啊

05:47.290 --> 05:48.290
他的

05:48.290 --> 05:50.290
怎么去压缩啊

05:50.290 --> 05:51.290
怎么去让格式

05:51.290 --> 05:53.290
变得更加的紧密

05:53.290 --> 05:54.290
啊

05:54.290 --> 05:55.290
减少什么

05:55.290 --> 05:56.290
换行服啊

05:56.290 --> 05:57.290
这东西啊

05:57.290 --> 05:58.290
就是compress

05:58.290 --> 05:59.290
compress这个配置

05:59.290 --> 06:00.290
来完成的

06:00.290 --> 06:01.290
他有很多默认配置啊

06:01.290 --> 06:02.290
你可以在文档里面

06:02.290 --> 06:03.290
去找到啊

06:03.290 --> 06:04.290
这里

06:04.290 --> 06:06.290
compress options

06:06.290 --> 06:08.290
API reference

06:08.290 --> 06:09.290
这个compress options

06:09.290 --> 06:10.290
那么这里边

06:10.290 --> 06:11.290
有很多很多的配置啊

06:11.290 --> 06:12.290
每个配置呢

06:12.290 --> 06:13.290
代表其中一方面

06:13.290 --> 06:14.290
简单看一下吧啊

06:14.290 --> 06:15.290
这里面东西很多

06:15.290 --> 06:16.290
跟我们平时开发

06:16.290 --> 06:17.290
其实也没啥关系

06:17.290 --> 06:18.290
因为他自动完成了

06:18.290 --> 06:19.290
啊

06:19.290 --> 06:20.290
如果说你特别感兴趣的话

06:20.290 --> 06:21.290
可以自己去看着这个文档

06:21.290 --> 06:22.290
可以自己去试一下

06:22.290 --> 06:23.290
还有另外一个呢

06:23.290 --> 06:24.290
就是mango

06:24.290 --> 06:25.290
mango呢就相当于是

06:25.290 --> 06:26.290
混淆

06:26.290 --> 06:28.290
把我们的变量名改变啊

06:28.290 --> 06:29.290
把方法名改变啊

06:29.290 --> 06:31.290
参数动一下啊之类的东西啊

06:31.290 --> 06:32.290
就是混淆我们的代码

06:32.290 --> 06:33.290
他主要是起这么一个作用

06:33.290 --> 06:34.290
当然呢

06:34.290 --> 06:35.290
这里边也有相应的配置啊

06:35.290 --> 06:37.290
mango options

06:37.290 --> 06:38.290
OK

06:38.290 --> 06:39.290
那么我们简单来看一下吧

06:39.290 --> 06:40.290
把方大一点

06:40.290 --> 06:42.290
那么就保持默认配置吧

06:42.290 --> 06:43.290
保持默认配置

06:43.290 --> 06:44.290
好

06:44.290 --> 06:45.290
咱们来看一下

06:45.290 --> 06:46.290
如果说我这样子写

06:46.290 --> 06:47.290
你看啊

06:47.290 --> 06:48.290
a等于1

06:48.290 --> 06:50.290
b等于2

06:50.290 --> 06:51.290
你看呀

06:51.290 --> 06:52.290
他变成什么呢

06:52.290 --> 06:53.290
变成了

06:53.290 --> 06:54.290
是不是合并了

06:54.290 --> 06:55.290
是吧

06:55.290 --> 06:56.290
合并了

06:56.290 --> 06:57.290
然后呢

06:57.290 --> 06:58.290
我们再来一个

06:58.290 --> 07:00.600
输出

07:00.600 --> 07:02.600
输出一个a加b

07:02.600 --> 07:03.600
你看一下

07:03.600 --> 07:04.600
看一下他做什么事

07:04.600 --> 07:06.600
他是不是直接把a加b的结果

07:06.600 --> 07:07.600
直接放到这了

07:07.600 --> 07:08.600
对吧

07:08.600 --> 07:09.600
a加b的结果

07:09.600 --> 07:10.600
因为他认为这两个是常量啊

07:10.600 --> 07:11.600
那如果说你把

07:11.600 --> 07:12.600
换成2的话你不行了

07:12.600 --> 07:13.600
换成2的话就不行了

07:13.600 --> 07:15.600
因为2的话他觉得变数太多

07:15.600 --> 07:17.600
因为他可能会变化

07:17.600 --> 07:18.600
他又不知道什么时候会变化

07:18.600 --> 07:20.600
但是从这个代码结构看看看的话

07:20.600 --> 07:21.600
我们知道是不会变化的

07:21.600 --> 07:23.600
但是他毕竟没有人那么智能

07:23.600 --> 07:25.600
因此你要理解一下

07:25.600 --> 07:26.600
所以说呢

07:26.600 --> 07:27.600
我们为什么强调说

07:27.600 --> 07:28.600
咱们

07:28.600 --> 07:30.600
之前我也讲a16的时候啊

07:30.600 --> 07:31.600
就说咱们尽量的

07:31.600 --> 07:33.600
使用常量来编辑代码

07:33.600 --> 07:34.600
其中还有一个原因呢

07:34.600 --> 07:36.600
就是跟优化相关

07:36.600 --> 07:38.600
那你看他直接给你输出一个常量3了

07:38.600 --> 07:39.600
就不用印算了

07:39.600 --> 07:40.600
当然如果说你这里

07:40.600 --> 07:42.600
再订一个常量c等于

07:42.600 --> 07:43.600
a-b

07:43.600 --> 07:44.600
你看一下

07:44.600 --> 07:45.600
c就变成了-1

07:45.600 --> 07:47.600
而且所有代码是不是换到一行

07:47.600 --> 07:49.600
他就是通过这种类似的方式

07:49.600 --> 07:50.600
来进行压缩的

07:50.600 --> 07:51.600
当然他那边有很多配置

07:51.600 --> 07:52.600
有非常非常多的配置

07:52.600 --> 07:53.600
那么这些配置呢

07:53.600 --> 07:56.600
都会影响到他的压缩方式

07:56.600 --> 07:57.600
好比方说吧

07:57.600 --> 07:58.600
我们再来一个

07:58.600 --> 07:59.600
再来一个

07:59.600 --> 08:00.600
我们在这里再加一个配置

08:00.600 --> 08:01.600
叫做top

08:01.600 --> 08:05.600
叫做top

08:05.600 --> 08:09.600
top level

08:10.600 --> 08:11.600
top level

08:11.600 --> 08:12.600
把色为去

08:13.600 --> 08:14.600
你再看一下压缩

08:14.600 --> 08:15.600
压缩就不得了了

08:15.600 --> 08:17.600
top level把色为处之后

08:17.600 --> 08:19.600
他对所有的顶级的方法

08:19.600 --> 08:20.600
全局的方法呀

08:20.600 --> 08:22.600
全局的变量那些

08:22.600 --> 08:24.600
那么都会进行检查

08:24.600 --> 08:25.600
检查过后呢

08:25.600 --> 08:27.600
他发现那些没有用到的变量

08:27.600 --> 08:29.600
他就会直接把他替换

08:29.600 --> 08:30.600
你看一下

08:30.600 --> 08:31.600
这三个变量有用到吗

08:31.600 --> 08:32.600
其实都没有用到

08:32.600 --> 08:33.600
你认为他用到了

08:33.600 --> 08:34.600
其实都没用到

08:34.600 --> 08:35.600
你看

08:35.600 --> 08:36.600
变量的负值不叫用

08:36.600 --> 08:38.600
变量的负值他不叫用

08:38.600 --> 08:39.600
他只是负值而已

08:39.600 --> 08:40.600
你看你负值的一个A

08:40.600 --> 08:41.600
你用到他吗

08:41.600 --> 08:42.600
你没有用到

08:42.600 --> 08:43.600
你没有用到

08:43.600 --> 08:44.600
他只个常量

08:44.600 --> 08:45.600
那么这里的B用到他吗

08:45.600 --> 08:46.600
没有用到

08:46.600 --> 08:47.600
因为我们这里一替换

08:47.600 --> 08:48.600
我们知道这里是3

08:48.600 --> 08:49.600
对吧 这里是3

08:49.600 --> 08:50.600
我们这里一替换

08:50.600 --> 08:51.600
知道是负一

08:51.600 --> 08:52.600
那么代表就形成这种格式

08:52.600 --> 08:53.600
那么你看发一会发现了

08:53.600 --> 08:54.600
这三个变量其实都没有用到

08:54.600 --> 08:55.600
没有用到的情况下呢

08:55.600 --> 08:56.600
你会发现

08:56.600 --> 08:57.600
他就全部给你去掉完了

08:57.600 --> 08:59.600
比方说我再写个方法

09:00.600 --> 09:02.600
TES这个方法

09:03.600 --> 09:04.600
啥都没有

09:04.600 --> 09:05.600
啥都没有

09:05.600 --> 09:06.600
因为他觉得TES这个方法

09:06.600 --> 09:07.600
根本就没用到

09:07.600 --> 09:08.600
那么这个是叫做

09:10.600 --> 09:11.600
这个东西叫做

09:16.600 --> 09:17.600
就是根本没有用到的代码

09:17.600 --> 09:18.600
他就会直接

09:18.600 --> 09:20.600
TOP-LEVER身为处的话

09:20.600 --> 09:22.600
他就会直接给你去掉

09:22.600 --> 09:23.600
因为没用到

09:23.600 --> 09:24.600
那些东西没什么用

09:24.600 --> 09:25.600
对吧

09:25.600 --> 09:27.600
他其实有很多很多的优化

09:27.600 --> 09:28.600
包括我们比方说

09:28.600 --> 09:29.600
我们比方说

09:29.600 --> 09:31.600
再写一个代码吧

09:31.600 --> 09:33.600
来自于一个变量

09:34.600 --> 09:36.600
A等于MAS

09:37.600 --> 09:41.100
那么这个东西他去不了了

09:41.100 --> 09:42.100
但是他会发现

09:42.100 --> 09:43.100
A没有用到

09:43.100 --> 09:45.100
他只给你加了这么一个东西

09:45.100 --> 09:46.100
一会我们再说

09:46.100 --> 09:47.100
他为什么要加这个东西

09:47.100 --> 09:48.100
他这个东西其实可以去的

09:48.100 --> 09:49.100
是可以去掉的

09:49.100 --> 09:50.100
但是为什么加

09:50.100 --> 09:51.100
那么现在就说了吧

09:51.100 --> 09:52.100
这个方法就随便看一看

09:52.100 --> 09:53.100
看一看我也会

09:53.100 --> 09:54.100
也挺有意思的

09:55.100 --> 09:56.100
那么他为什么去掉A

09:56.100 --> 09:57.100
因为他觉得A没有用到

09:57.100 --> 09:58.100
他没有用到

09:58.100 --> 09:59.100
那如果说

09:59.100 --> 10:00.100
你现在输出一个A的话

10:00.100 --> 10:01.100
那现在他没发T1了

10:01.100 --> 10:02.100
这个A没发T1

10:02.100 --> 10:03.100
成另外一个数字

10:03.100 --> 10:04.100
那么这个A

10:04.100 --> 10:05.100
他就会给你输出

10:05.100 --> 10:06.100
并且他就会看到

10:06.100 --> 10:08.100
他变量给你进行的混淆

10:08.100 --> 10:09.100
比方说你这里

10:09.100 --> 10:11.100
给他写一个My First

10:11.100 --> 10:13.100
My Right

10:13.100 --> 10:14.100
写长串的变量

10:14.100 --> 10:15.100
因为我们有的时候

10:15.100 --> 10:16.100
原代码是为了

10:16.100 --> 10:17.100
阅读

10:17.100 --> 10:19.100
是为了阅读而编写的

10:19.100 --> 10:20.100
因此我们的

10:20.100 --> 10:21.100
原代码的命运

10:21.100 --> 10:22.100
尽量规范

10:22.100 --> 10:24.100
但是打包之后

10:24.100 --> 10:25.100
我们就不需要那么规范的命运了

10:25.100 --> 10:26.100
对吧

10:26.100 --> 10:27.100
因此他把一些

10:27.100 --> 10:28.100
我们原代码里边的

10:28.100 --> 10:29.100
变量全部给你混淆了

10:29.100 --> 10:31.100
换成了非常简单的变量

10:31.100 --> 10:32.100
你这样子

10:32.100 --> 10:33.100
可以尽大努力

10:33.100 --> 10:35.100
最大努力的缩减

10:35.100 --> 10:36.100
这个什么呢

10:36.100 --> 10:38.100
这个就是代码的数量

10:38.100 --> 10:39.100
代码的支付量

10:39.100 --> 10:40.100
而且所有的换行服务

10:40.100 --> 10:41.100
全部给你去掉了

10:41.100 --> 10:42.100
无论你这里换多少行

10:42.100 --> 10:43.100
它只有一行

10:43.100 --> 10:44.100
看没

10:44.100 --> 10:45.100
这就是压缩

10:45.100 --> 10:46.100
好

10:46.100 --> 10:47.100
那么这里我们说一下

10:47.100 --> 10:49.100
这个Master Redom

10:49.100 --> 10:51.100
如果说我们不写这句话

10:51.100 --> 10:52.100
你看

10:52.100 --> 10:53.100
那么这个变量

10:53.100 --> 10:54.100
他去掉了

10:54.100 --> 10:55.100
对吧

10:55.100 --> 10:56.100
那么好理解

10:56.100 --> 10:57.100
因为这个变量没用

10:57.100 --> 10:58.100
他肯定去掉了

10:58.100 --> 10:59.100
他为什么方法不去掉呢

10:59.100 --> 11:00.100
你说这个方法

11:00.100 --> 11:01.100
有没有意义吗

11:01.100 --> 11:02.100
因为他现在不清楚

11:02.100 --> 11:03.100
你这个方法

11:03.100 --> 11:04.100
有没有副作用

11:04.100 --> 11:05.100
这是我们今天

11:05.100 --> 11:06.100
如果说我们今天的东西

11:06.100 --> 11:07.100
就是玩一玩

11:07.100 --> 11:08.100
看一看的话

11:08.100 --> 11:09.100
但是有一个重点

11:09.100 --> 11:10.100
什么重点呢

11:10.100 --> 11:11.100
就是关于副作用

11:11.100 --> 11:12.100
关于副作用

11:12.100 --> 11:13.100
我们说一下

11:13.100 --> 11:15.540
非常重要的一个点

11:15.540 --> 11:17.540
关于副作用

11:17.540 --> 11:20.540
什么叫做副作用呢

11:20.540 --> 11:22.540
我们这里有这么一些数语

11:22.540 --> 11:24.540
如果一个函数

11:24.540 --> 11:26.540
没有副作用

11:26.540 --> 11:28.540
则该函数

11:28.540 --> 11:31.540
叫做存函数

11:31.540 --> 11:32.540
一个函数

11:32.540 --> 11:33.540
没有副作用

11:33.540 --> 11:34.540
这个函数叫做存函数

11:34.540 --> 11:36.540
那么什么叫做副作用呢

11:36.540 --> 11:37.540
以下

11:37.540 --> 11:39.540
如果函数中

11:39.540 --> 11:42.540
包含以下代码

11:42.540 --> 11:44.540
该函数

11:44.540 --> 11:46.540
就是

11:46.540 --> 11:48.540
叫做副作用函数

11:48.540 --> 11:50.540
有副作用的函数

11:50.540 --> 11:52.540
这个函数会产生副作用

11:52.540 --> 11:53.540
那么副作用的单词

11:53.540 --> 11:55.540
叫做side effect

11:55.540 --> 11:57.540
那么这个

11:57.540 --> 11:58.540
存函数的单词

11:58.540 --> 12:00.540
叫做pure

12:00.540 --> 12:02.540
pure方形

12:02.540 --> 12:03.540
就是这么一个单词

12:03.540 --> 12:04.540
pure方形

12:04.540 --> 12:06.540
副作用叫做side effect

12:06.540 --> 12:08.540
那么什么东西

12:08.540 --> 12:09.540
会包

12:09.540 --> 12:10.540
会代表有副作用呢

12:10.540 --> 12:11.540
我们来看一下

12:11.540 --> 12:12.540
第一个

12:12.540 --> 12:14.540
异布代码

12:14.540 --> 12:15.540
异布代码

12:15.540 --> 12:16.540
我们首先写一下

12:16.540 --> 12:17.540
总体来说

12:17.540 --> 12:18.540
什么叫副作用

12:18.540 --> 12:19.540
合为副作用

12:19.540 --> 12:24.540
就是函数运行过程中

12:24.540 --> 12:25.540
可能

12:25.540 --> 12:28.540
会对外部环境

12:28.540 --> 12:33.540
造成影响的代码

12:33.540 --> 12:34.540
造成影响的功能

12:34.540 --> 12:36.540
就叫做副作用

12:36.540 --> 12:37.540
那么

12:37.540 --> 12:38.540
比方说异布代码

12:38.540 --> 12:39.540
异布代码

12:39.540 --> 12:40.540
我们可能是

12:40.540 --> 12:41.540
额加克制请求

12:41.540 --> 12:42.540
是不是要浏览器

12:42.540 --> 12:43.540
要发送请求

12:43.540 --> 12:44.540
运行这个函数

12:44.540 --> 12:45.540
导致浏览器发送请求

12:45.540 --> 12:46.540
是不是浏览器

12:46.540 --> 12:47.540
是外部环境

12:47.540 --> 12:48.540
造成影响了

12:48.540 --> 12:49.540
比方说

12:49.540 --> 12:50.540
我们set timeout

12:50.540 --> 12:51.540
set timeout代码

12:51.540 --> 12:52.540
会导致浏览器

12:52.540 --> 12:53.540
开始即时

12:53.540 --> 12:54.540
是不是造成影响了

12:54.540 --> 12:55.540
对不对

12:55.540 --> 12:56.540
对浏览器

12:56.540 --> 12:57.540
造成影响了

12:57.540 --> 12:58.540
那么

12:58.540 --> 12:59.540
这个就是

12:59.540 --> 13:00.540
有一些东西

13:00.540 --> 13:01.540
都还没有结束

13:01.540 --> 13:02.540
因为异布代码

13:02.540 --> 13:03.540
函数运行完了

13:03.540 --> 13:04.540
有些东西还没有结束

13:04.540 --> 13:05.540
它还在等待

13:05.540 --> 13:06.540
请求的结果

13:06.540 --> 13:07.540
对吧

13:07.540 --> 13:08.540
然后来等待即时的结束

13:08.540 --> 13:10.540
那么这些异布代码

13:10.540 --> 13:11.540
都代表有副作用

13:11.540 --> 13:12.540
对外部造成的影响

13:12.540 --> 13:13.540
这个函数运行完了

13:13.540 --> 13:14.540
本来就应该

13:14.540 --> 13:15.540
所有东西就完了

13:15.540 --> 13:16.540
但是由于异布代码存在

13:16.540 --> 13:17.540
它东西还没有结束

13:17.540 --> 13:18.540
还在持续的

13:18.540 --> 13:20.540
对外部造成影响

13:20.540 --> 13:21.540
那么还有什么呢

13:21.540 --> 13:22.540
还有就是那个

13:23.540 --> 13:24.540
就是

13:24.540 --> 13:25.540
什么呢

13:27.540 --> 13:28.540
比方说

13:29.540 --> 13:30.540
对

13:31.540 --> 13:33.540
就local storage

13:34.540 --> 13:37.540
local storage

13:40.540 --> 13:41.540
local storage

13:41.540 --> 13:42.540
就是浏览器的本技存出

13:42.540 --> 13:43.540
那么这个

13:43.540 --> 13:44.540
是不是也是外部环节

13:44.540 --> 13:45.540
对吧

13:45.540 --> 13:46.540
也会造成影响

13:46.540 --> 13:47.540
那还有什么呢

13:47.540 --> 13:49.540
对外部

13:49.540 --> 13:51.540
对参数的修改

13:52.540 --> 13:53.540
或者简单说

13:53.540 --> 13:54.540
对外部

13:54.540 --> 13:56.540
数据的修改

13:56.540 --> 13:57.540
这又是什么意思呢

13:57.540 --> 13:58.540
对外部数据

13:58.540 --> 13:59.540
比方说

13:59.540 --> 14:00.540
我们有一个函数

14:00.540 --> 14:01.540
方形

14:01.540 --> 14:02.540
test

14:02.540 --> 14:03.540
这个test函数里边

14:03.540 --> 14:04.540
它可能有个参数

14:04.540 --> 14:05.540
有个参数ob

14:05.540 --> 14:06.540
那么我对这个ob

14:06.540 --> 14:08.540
里面的数据进行的修改

14:08.540 --> 14:09.540
这也算是副作用

14:09.540 --> 14:10.540
这也算是副作用

14:10.540 --> 14:11.540
为什么呢

14:11.540 --> 14:13.540
因为雕用完这个函数之后

14:13.540 --> 14:14.540
是不是对它产生的影响

14:14.540 --> 14:15.540
对吧

14:15.540 --> 14:17.540
是不是对我们的参数产生的影响

14:17.540 --> 14:18.540
对外部

14:18.540 --> 14:19.540
这个参数是外部传过来的

14:19.540 --> 14:20.540
是不是对外部传出的影响

14:20.540 --> 14:21.540
那么如果说

14:21.540 --> 14:22.540
我们这里有个变量

14:24.540 --> 14:25.540
那么这里修改了这个变量

14:25.540 --> 14:27.540
那么这里也算是副作用

14:27.540 --> 14:28.540
它对外

14:28.540 --> 14:29.540
运行这个函数

14:29.540 --> 14:30.540
对外部产生的影响

14:31.540 --> 14:32.540
明白的意思吧

14:32.540 --> 14:33.540
那么这些

14:33.540 --> 14:35.540
都属于副作用

14:35.540 --> 14:36.540
这些都属于副作用

14:37.540 --> 14:39.540
那么没有副作用的函数

14:39.540 --> 14:41.540
我们可以称之为存函数

14:41.540 --> 14:42.540
可以称之为存函数

14:43.540 --> 14:44.540
这是

14:45.540 --> 14:47.540
存函数还有一个概念

14:47.540 --> 14:48.540
还不能这样说

14:48.540 --> 14:49.540
严格来说

14:49.540 --> 14:50.540
还不能这样说

14:50.540 --> 14:51.540
如果一个函数

14:51.540 --> 14:52.540
没有副作用的话

14:52.540 --> 14:54.540
这里还不能这样说

14:54.540 --> 14:55.540
还应该这样

14:55.540 --> 14:56.540
还更加严格一点

14:56.540 --> 14:57.540
还应该这样说

14:57.540 --> 14:59.540
如果说一个函数没有副作用

14:59.540 --> 15:00.540
同时

15:01.540 --> 15:04.540
函数的函数的反回结果

15:04.540 --> 15:06.540
仅依赖

15:07.540 --> 15:08.540
参数

15:08.540 --> 15:10.540
则该函数叫做存

15:10.540 --> 15:12.540
该函数叫做存函数

15:12.540 --> 15:13.540
也就是说

15:13.540 --> 15:14.540
虽然说有些函数

15:14.540 --> 15:15.540
它没有副作用

15:15.540 --> 15:16.540
但是它也不一定是存函数

15:16.540 --> 15:17.540
比方说我们这里有个函数

15:17.540 --> 15:18.540
Test

15:18.540 --> 15:20.540
这个函数它里面啥

15:20.540 --> 15:21.540
没有副作用

15:21.540 --> 15:22.540
比方说我们这里

15:22.540 --> 15:23.540
用了这么一个东西

15:23.540 --> 15:24.540
Mass

15:26.540 --> 15:27.540
或者

15:27.540 --> 15:28.540
我们就在这里

15:28.540 --> 15:29.540
用一个A嘛

15:29.540 --> 15:30.540
Mass 第二

15:32.540 --> 15:34.540
是不是得到一个水积数

15:34.540 --> 15:35.540
那么也就是说

15:35.540 --> 15:36.540
我们返回A

15:36.540 --> 15:37.540
返回A

15:37.540 --> 15:38.540
那么你看一下

15:38.540 --> 15:40.540
我每一次调用函数的结果

15:43.540 --> 15:44.540
Test

15:44.540 --> 15:45.540
每一次调用函数的结果

15:45.540 --> 15:46.540
是不是肯定是不一样的

15:46.540 --> 15:47.540
对吧

15:47.540 --> 15:48.540
是不是肯定不一样的

15:48.540 --> 15:50.540
这里给你进行的简化

15:51.540 --> 15:53.540
每次调用函数的结果

15:53.540 --> 15:54.540
是不是肯定不一样

15:54.540 --> 15:55.540
对不对

15:55.540 --> 15:57.540
那么不一样的话

15:57.540 --> 15:58.540
那么你看

15:58.540 --> 15:59.540
我这个函数参数是一样的

15:59.540 --> 16:00.540
都没有传参数

16:01.540 --> 16:02.540
它的参数是一样的

16:02.540 --> 16:03.540
但它返回结果不一样

16:03.540 --> 16:05.540
它也不能叫存函数

16:05.540 --> 16:07.540
也不能叫存函数

16:07.540 --> 16:09.540
如果说严格来说的话

16:09.540 --> 16:10.540
如果说不严格来说

16:10.540 --> 16:11.540
OK

16:11.540 --> 16:12.540
那如果说你没有副作用

16:12.540 --> 16:13.540
就叫做存函数了

16:13.540 --> 16:15.540
但是如果说严格来说的话

16:15.540 --> 16:16.540
那么这个

16:16.540 --> 16:17.540
这个就是

16:17.540 --> 16:19.540
没有副作用的话

16:19.540 --> 16:21.540
还不一定叫做存函数

16:21.540 --> 16:22.540
因为还有一个

16:22.540 --> 16:24.540
存函数还有一个现象就是

16:24.540 --> 16:26.540
返回结果仅依赖参数

16:26.540 --> 16:27.540
仅依赖参数

16:28.540 --> 16:29.540
就这么个意思

16:29.540 --> 16:30.540
好

16:30.540 --> 16:31.540
再比方说

16:31.540 --> 16:32.540
我这个函数如果说

16:32.540 --> 16:33.540
不是这样子写的

16:33.540 --> 16:35.540
我这里边使用了这个东西

16:35.540 --> 16:36.540
那么这个东西是不是存函数呢

16:36.540 --> 16:37.540
是不是也不是

16:37.540 --> 16:38.540
函数的返回结果

16:38.540 --> 16:40.540
它不是仅仅依赖参数

16:40.540 --> 16:41.540
你看

16:41.540 --> 16:42.540
每一次调用可能时间都不一样

16:42.540 --> 16:43.540
对吧

16:43.540 --> 16:44.540
时间都不一样

16:44.540 --> 16:45.540
那么这个函数

16:45.540 --> 16:46.540
不是存函数

16:46.540 --> 16:48.540
那什么叫做存函数呢

16:49.540 --> 16:51.540
就是也要求这么可可

16:51.540 --> 16:52.540
要什么叫存函数呢

16:52.540 --> 16:56.820
你看这样的就叫存函数

16:56.820 --> 16:58.820
这就是个非常存函的函数

16:58.820 --> 16:59.820
你看参数一样

16:59.820 --> 17:01.820
它返回的结果一定一样

17:01.820 --> 17:03.820
参数不同返回的结果

17:03.820 --> 17:04.820
可能会有差异

17:04.820 --> 17:05.820
就是相同的参数

17:05.820 --> 17:06.820
它一定得到相同的返回结果

17:06.820 --> 17:07.820
无论是什么时间

17:07.820 --> 17:09.820
无论是什么场景调用的

17:09.820 --> 17:10.820
它就一定得到相同的返回结果

17:10.820 --> 17:11.820
这就叫存函数

17:11.820 --> 17:13.820
没了意思吧

17:13.820 --> 17:14.820
OK

17:14.820 --> 17:15.820
那么存函数

17:15.820 --> 17:17.820
实际上是非常利于优化的

17:17.820 --> 17:19.820
存函数是非常利于优化的

17:19.820 --> 17:22.510
你看一下

17:22.510 --> 17:23.510
这样子

17:23.510 --> 17:24.510
因为它知道这是存函数

17:24.510 --> 17:26.510
它就直接把它变成一加二了

17:29.510 --> 17:30.510
就是因为有些函数

17:30.510 --> 17:32.510
它可能会造成副作用

17:32.510 --> 17:34.510
因此它在分析的时候

17:34.510 --> 17:36.510
它没有那么致

17:36.510 --> 17:37.510
它并不知道这个函数

17:37.510 --> 17:40.510
它是不是一个存函数

17:40.510 --> 17:41.510
是不是一个存函函数

17:41.510 --> 17:42.510
当然这个函数

17:42.510 --> 17:43.510
我们知道它不是个存函数

17:43.510 --> 17:44.510
但是我们也知道

17:44.510 --> 17:46.510
它是没有副作用的

17:46.510 --> 17:47.510
我们刚才说了

17:47.510 --> 17:48.510
没有副作用的

17:48.510 --> 17:49.510
严格来说

17:49.510 --> 17:50.510
它不能叫存函数

17:50.510 --> 17:52.510
但是如果说不严格来说的话

17:52.510 --> 17:54.510
叫它存函数也行

17:54.510 --> 17:57.510
大家心里面明白就行了

17:57.510 --> 17:58.510
因为我们存函数

17:58.510 --> 17:59.510
是一定要保证

17:59.510 --> 18:00.510
什么东西输入

18:00.510 --> 18:02.510
就有什么样的返回结果

18:02.510 --> 18:03.510
你可以把那种存函数

18:03.510 --> 18:04.510
认为是

18:04.510 --> 18:05.510
就是一个计算

18:05.510 --> 18:06.510
存计算

18:06.510 --> 18:07.510
存运算的函数

18:07.510 --> 18:09.510
就像我们数学里边的

18:09.510 --> 18:10.510
那个函数一样

18:10.510 --> 18:11.510
有输入

18:11.510 --> 18:12.510
那么输出的结果

18:12.510 --> 18:14.510
一定是固定下来的

18:14.510 --> 18:15.510
OK

18:15.510 --> 18:16.510
那么这里

18:16.510 --> 18:18.510
它这里没有那么严格的叫

18:18.510 --> 18:19.510
没有副作用就是存函数

18:19.510 --> 18:21.510
它就这里就有不严格的方式

18:21.510 --> 18:22.510
它就说

18:22.510 --> 18:23.510
我不知道这个函数

18:23.510 --> 18:24.510
有没有副作用

18:24.510 --> 18:25.510
万一在这里边

18:25.510 --> 18:26.510
进行的异部处理呢

18:26.510 --> 18:27.510
那如果说我把这个东西删掉

18:27.510 --> 18:29.510
如果说我把这个东西删掉

18:29.510 --> 18:31.510
一删掉的话

18:31.510 --> 18:32.510
那么这个函数

18:32.510 --> 18:33.510
万一里边发生了

18:33.510 --> 18:34.510
那可是不是请求了

18:34.510 --> 18:35.510
是不是请求没了

18:35.510 --> 18:36.510
功能没了

18:36.510 --> 18:37.510
万一在这里边

18:37.510 --> 18:38.510
进行了什么

18:38.510 --> 18:39.510
Dockument

18:39.510 --> 18:41.510
对外部的动物元素

18:41.510 --> 18:42.510
进行更改

18:42.510 --> 18:43.510
那么是不是更不改没了

18:43.510 --> 18:44.510
它不清楚

18:44.510 --> 18:45.510
它不清楚

18:45.510 --> 18:46.510
它这个函数

18:46.510 --> 18:47.510
到底是不是存函数

18:47.510 --> 18:48.510
它不敢去掉

18:48.510 --> 18:49.510
所以它函数调用

18:49.510 --> 18:50.510
还是必须要保持

18:50.510 --> 18:51.510
比方说吧

18:51.510 --> 18:52.510
我们这里呢

18:52.510 --> 18:53.510
方形

18:53.510 --> 18:54.510
Test

18:54.510 --> 18:56.510
我这个函数里边

18:58.510 --> 18:59.510
这个函数

18:59.510 --> 19:00.510
我们就用个上

19:01.510 --> 19:02.510
A B

19:03.510 --> 19:04.510
Return

19:04.510 --> 19:05.510
A加B

19:05.510 --> 19:06.510
我们这里调用

19:06.510 --> 19:07.510
上

19:07.510 --> 19:08.510
1 2

19:10.510 --> 19:11.510
1 2

19:11.510 --> 19:12.510
看一下吧

19:13.510 --> 19:14.510
它现在

19:14.510 --> 19:15.510
它现在能够

19:15.510 --> 19:16.510
倒是能够分析出来

19:16.510 --> 19:17.510
倒是能够分析出来

19:17.510 --> 19:18.510
我们

19:18.510 --> 19:20.510
再重新举个例子

19:20.510 --> 19:21.510
我们把这个top

19:21.510 --> 19:22.510
toplabel先去掉

19:22.510 --> 19:23.510
先去掉

19:23.510 --> 19:24.510
那么你看到

19:24.510 --> 19:25.510
这个上

19:25.510 --> 19:26.510
还在

19:26.510 --> 19:27.510
对吧

19:28.510 --> 19:30.510
因为它加上toplabel过后

19:30.510 --> 19:31.510
它其实已经处理了

19:31.510 --> 19:32.510
我就没放往后讲了

19:32.510 --> 19:33.510
因为它能够分析出来

19:33.510 --> 19:35.510
这个函数是一个存函数

19:35.510 --> 19:37.510
因为这个函数代码比较简单

19:37.510 --> 19:38.510
它能够分析出来

19:38.510 --> 19:40.510
比方说吧

19:40.510 --> 19:41.510
我这样子来吧

19:41.510 --> 19:44.510
我在这里加上一个

19:44.510 --> 19:45.510
加上一个C

19:46.510 --> 19:50.510
加上一个C

19:51.510 --> 19:52.510
这样子

19:53.510 --> 19:55.510
它也给你去掉了

19:55.510 --> 19:57.510
那么我们这里多调用一次

19:58.510 --> 19:59.510
那么现在没去掉了

19:59.510 --> 20:00.510
没有去掉了

20:00.510 --> 20:01.510
那么现在呢

20:01.510 --> 20:02.510
我们来看一下

20:03.510 --> 20:04.510
其实呢

20:04.510 --> 20:05.510
我们心里边知道

20:05.510 --> 20:06.510
这三个东西

20:06.510 --> 20:07.510
是不是都可以去掉

20:07.510 --> 20:08.510
因为没意义

20:08.510 --> 20:09.510
这个函数

20:10.510 --> 20:11.510
它整个过程中

20:11.510 --> 20:12.510
没有副作用

20:12.510 --> 20:13.510
没有副作用

20:13.510 --> 20:14.510
这个东西

20:14.510 --> 20:15.510
它影响了

20:15.510 --> 20:16.510
它不是存函数

20:16.510 --> 20:18.510
但是我们现在不用那么严格的教法

20:18.510 --> 20:19.510
不用那么严格

20:19.510 --> 20:20.510
就是说

20:20.510 --> 20:21.510
我们仍然可以认为

20:21.510 --> 20:22.510
它是一个存函数

20:22.510 --> 20:23.510
它没有副作用

20:23.510 --> 20:24.510
那么它的返回结果

20:24.510 --> 20:25.510
我也没有遇到

20:25.510 --> 20:26.510
用到

20:26.510 --> 20:27.510
也就是说

20:27.510 --> 20:28.510
这个函数的运行过程

20:28.510 --> 20:29.510
它不会对外部

20:29.510 --> 20:30.510
产生什么影响

20:30.510 --> 20:31.510
而它的作用

20:31.510 --> 20:32.510
就是得到一个返回结果

20:32.510 --> 20:33.510
我返回结果用都没用

20:33.510 --> 20:34.510
那么按理说

20:34.510 --> 20:35.510
这三个函数

20:35.510 --> 20:36.510
是可以去掉的

20:36.510 --> 20:37.510
可以去掉的

20:37.510 --> 20:38.510
包括这个函数

20:38.510 --> 20:39.510
是不是也可以去掉

20:39.510 --> 20:40.510
都可以去掉的

20:40.510 --> 20:41.510
但它现在为什么去不掉了

20:41.510 --> 20:42.510
因为它不清楚

20:42.510 --> 20:43.510
它现在就分析不出来了

20:44.510 --> 20:46.510
到底有没有副作用

20:46.510 --> 20:47.510
它万一在这里边

20:47.510 --> 20:48.510
进行了一些外部处理

20:48.510 --> 20:50.510
对外部产生的影响

20:50.510 --> 20:51.510
那么

20:51.510 --> 20:52.510
如果说你一去掉

20:52.510 --> 20:54.510
对外部的影响就没了

20:54.510 --> 20:55.510
所以说它现在不清楚

20:55.510 --> 20:57.510
那么我们现在要做的就是

20:57.510 --> 20:59.510
如果说我们能手动告诉它

20:59.510 --> 21:00.510
这个函数

21:00.510 --> 21:01.510
就是一个有副作用的

21:01.510 --> 21:03.510
就是一个没有副作用的函数

21:03.510 --> 21:04.510
存函数

21:04.510 --> 21:05.510
这个函数就是一个

21:05.510 --> 21:06.510
没有副作用的函数

21:06.510 --> 21:07.510
存函数

21:07.510 --> 21:08.510
那么这样子它就明白了

21:08.510 --> 21:09.510
那么我就OK了

21:09.510 --> 21:10.510
那我就可以去掉了

21:10.510 --> 21:11.510
那怎么来告诉它呢

21:11.510 --> 21:12.510
一个移动方法

21:12.510 --> 21:14.510
是在compress里面进行处理

21:14.510 --> 21:15.510
那么

21:15.510 --> 21:16.510
我一忘了

21:16.510 --> 21:18.510
好像叫做pure

21:18.510 --> 21:20.510
pure funs

21:20.510 --> 21:23.020
pure funs

21:23.020 --> 21:24.020
那么这是个数组

21:24.020 --> 21:27.020
这个数组里面就指定哪些函数

21:27.020 --> 21:29.020
是存函数

21:29.020 --> 21:31.020
比方说我们指定mess.rido

21:31.020 --> 21:32.020
是存函数

21:32.020 --> 21:33.020
你看

21:33.020 --> 21:34.020
一指定过后

21:34.020 --> 21:35.020
你会发现

21:35.020 --> 21:36.020
这句话是不是没了

21:36.020 --> 21:38.020
我们把这个删除掉

21:38.020 --> 21:39.020
是不是啥都没了

21:39.020 --> 21:40.020
对吧

21:40.020 --> 21:41.020
因为它知道这是个存函数了

21:41.020 --> 21:43.020
它是个存函数了

21:43.020 --> 21:46.020
因此它不会在这里再掉用它了

21:46.020 --> 21:49.020
然后我们还可以指定

21:49.020 --> 21:51.020
就是上

21:51.020 --> 21:52.020
也是个存函数

21:52.020 --> 21:53.020
你看是不是啥都没了

21:53.020 --> 21:54.020
这些弹码其实都没有意义

21:54.020 --> 21:56.020
实际上我们可以写了半天

21:56.020 --> 21:57.020
其实这样都没有意义

21:57.020 --> 21:59.020
因为它不会对外部造成任何影响

21:59.020 --> 22:01.020
这个东西没有用去掉

22:01.020 --> 22:03.020
那么这个东西是存函数去去掉

22:03.020 --> 22:05.020
它可以通过这样的配置来完成

22:05.020 --> 22:08.020
它也可以利用一些注释标记

22:08.020 --> 22:10.020
其实它这里面有很多种注释标记

22:10.020 --> 22:11.020
通过一些标记

22:11.020 --> 22:12.020
它可以来去掉

22:12.020 --> 22:14.020
比方说我们在函数掉用的位置

22:14.020 --> 22:15.020
在这里加个标记

22:15.020 --> 22:17.020
标记叫啥名字呢

22:17.020 --> 22:19.330
我看一下

22:22.330 --> 22:23.330
随便复制一个吧

22:23.330 --> 22:24.330
几种标记都可以

22:24.330 --> 22:27.330
那么在这里加一个标记

22:27.330 --> 22:28.330
那你看

22:28.330 --> 22:30.330
加了标记过后呢

22:30.330 --> 22:31.330
它就知道了

22:31.330 --> 22:33.330
原来我们这一次的函数掉用

22:33.330 --> 22:35.330
是一个存函数的掉用

22:35.330 --> 22:36.330
那么存函数的掉用了

22:36.330 --> 22:39.330
你这个变量又没用

22:39.330 --> 22:40.330
这个变量一去掉又没用

22:40.330 --> 22:41.330
那么这个玩意

22:41.330 --> 22:43.330
它又是没有任何副作用的

22:43.330 --> 22:44.330
那么就可以直接去掉

22:44.330 --> 22:46.330
因为它写到这里没用

22:46.330 --> 22:47.330
没有意义

22:47.330 --> 22:48.330
那么如果说我们这里

22:48.330 --> 22:50.330
掉用的时候也是一样

22:50.330 --> 22:51.330
也是一样

22:51.330 --> 22:54.330
给它标记一个存函数掉用

22:54.330 --> 22:56.330
你看是不是又没了

22:56.330 --> 22:59.330
这三个都是存函数掉用

22:59.330 --> 23:00.330
当然这个建设

23:00.330 --> 23:01.330
一般我们不用做

23:01.330 --> 23:02.330
我们不用做

23:02.330 --> 23:04.330
微拍可能会帮助我们进行处理

23:04.330 --> 23:05.330
OK

23:05.330 --> 23:07.330
那么这就是Turdle

23:07.330 --> 23:08.330
我简单说一下

23:08.330 --> 23:10.330
再给大家再看一个吧

23:10.330 --> 23:11.330
再看一个

23:11.330 --> 23:12.330
它也挺有意思的

23:12.330 --> 23:14.330
比方说我们一个Conser

23:14.330 --> 23:16.330
A Master

23:16.330 --> 23:18.330
把这些都删了

23:18.330 --> 23:21.330
然后我判断一下

23:21.330 --> 23:24.330
如果说A等于

23:24.330 --> 23:26.330
A大于0.5

23:26.330 --> 23:27.330
A大于0.5

23:27.330 --> 23:28.330
我们怎么样了

23:28.330 --> 23:31.330
我们就A等于1

23:32.330 --> 23:33.330
L是

23:36.330 --> 23:37.330
A等于2

23:37.330 --> 23:38.330
你看它代码

23:38.330 --> 23:39.330
就用代码是什么

23:39.330 --> 23:41.330
就代码变成这个样子的

23:41.330 --> 23:43.330
A Master

23:43.330 --> 23:44.330
等于这个复制

23:44.330 --> 23:45.330
这个没问题

23:45.330 --> 23:47.330
然后如果说A大于0.5

23:47.330 --> 23:48.330
它就变成三不运算符了

23:48.330 --> 23:49.330
它会对一种简单的

23:49.330 --> 23:51.330
异符结构来进行处理

23:51.330 --> 23:52.330
进行转换

23:52.330 --> 23:53.330
比方说我们这里

23:53.330 --> 23:54.330
异符的一边

23:54.330 --> 23:56.330
我们还可以输出

23:56.330 --> 23:57.330
输出

23:58.330 --> 23:59.330
LOG

23:59.330 --> 24:00.330
输出A

24:00.330 --> 24:01.330
你看它转换成什么

24:01.330 --> 24:02.330
如果说A大于0.5

24:02.330 --> 24:04.330
那么用并且符

24:04.330 --> 24:05.330
那么这个条件为真

24:05.330 --> 24:07.330
那么就会运行后面了

24:07.330 --> 24:08.330
ConserLOG

24:08.330 --> 24:09.330
它会做很多处理的

24:09.330 --> 24:10.330
有兴趣的东西

24:10.330 --> 24:11.330
可以去测试一下

24:11.330 --> 24:12.330
各种各样的代码

24:12.330 --> 24:13.330
看它去怎么处理的

24:13.330 --> 24:14.330
也可以去查看一下

24:14.330 --> 24:15.330
它的各种API

24:15.330 --> 24:17.330
各种就是配置

24:17.330 --> 24:18.330
该怎么去配置

24:18.330 --> 24:19.330
OK

24:19.330 --> 24:20.330
那么这就是

24:20.330 --> 24:21.330
这个头的

24:21.330 --> 24:22.330
简单的说一下

24:22.330 --> 24:24.330
它是来进行代码压缩的

24:24.330 --> 24:26.330
它不搞定什么兼容性问题

24:26.330 --> 24:27.330
它就是把代码

24:27.330 --> 24:28.330
尽可能的让它压缩体积

24:28.330 --> 24:29.330
更小一点

24:29.330 --> 24:30.330
所以说你们平日

24:30.330 --> 24:31.330
写代码的时候

24:31.330 --> 24:32.330
一定要把注意力

24:32.330 --> 24:34.330
专注于什么

24:34.330 --> 24:35.330
代码如何

24:35.330 --> 24:36.330
阅读起来

24:36.330 --> 24:37.330
好理解

24:37.330 --> 24:38.330
多写注释

24:38.330 --> 24:39.330
这些没有什么问题

24:39.330 --> 24:40.330
不用担心什么打包结果

24:40.330 --> 24:42.330
它已经给你处理完了

24:42.330 --> 24:43.330
好

24:43.330 --> 24:44.330
咱们再回到这

24:44.330 --> 24:45.330
好

24:45.330 --> 24:46.330
Turbo文讲完了

24:46.330 --> 24:47.330
然后我们来看一下

24:47.330 --> 24:49.330
它如何跟WePAC结合呢

24:49.330 --> 24:50.330
实际上我们不用

24:50.330 --> 24:52.330
去做任何事情

24:52.330 --> 24:53.330
因为WePAC

24:53.330 --> 24:55.330
直接自动集成了Turbo

24:55.330 --> 24:56.330
但是说

24:56.330 --> 24:57.330
如果说

24:57.330 --> 24:59.330
假如说你觉得Turbo特别不爽

24:59.330 --> 25:00.330
就Turbo特别

25:00.330 --> 25:01.330
已经是算是

25:01.330 --> 25:02.330
非常好了

25:02.330 --> 25:03.330
目前的

25:03.330 --> 25:05.330
我觉得是算是首选

25:05.330 --> 25:06.330
如果说你要

25:07.330 --> 25:09.330
或者是添加压缩工具

25:09.330 --> 25:11.330
我们往往改的话

25:11.330 --> 25:12.330
我们往往动它的话

25:12.330 --> 25:13.330
往往是要添加压缩工具

25:13.330 --> 25:14.330
而不是要更改它

25:14.330 --> 25:15.330
一般就就容它

25:15.330 --> 25:17.330
又或者是想对

25:17.330 --> 25:18.330
这个特色进行配置

25:18.330 --> 25:19.330
那么使用下面的

25:19.330 --> 25:20.330
WePAC配置即可

25:20.330 --> 25:21.330
你看一下怎么配置的

25:21.330 --> 25:22.330
比方说我们这里

25:22.330 --> 25:23.330
要添加一个

25:23.330 --> 25:24.330
添加一个就是

25:24.330 --> 25:26.330
直接复制过来吧

25:27.330 --> 25:29.330
我们在WePAC里边

25:29.330 --> 25:33.370
直接复制过来

25:33.370 --> 25:35.370
这里我们把这个配置

25:35.370 --> 25:38.190
复制过来

25:39.190 --> 25:40.190
我们上节课

25:40.190 --> 25:41.190
赔了这个东西

25:41.190 --> 25:42.190
那么其他看一下吧

25:42.190 --> 25:43.190
loader

25:43.190 --> 25:44.190
对CSS进行转移

25:44.190 --> 25:45.190
production

25:45.190 --> 25:46.190
然后这里

25:46.190 --> 25:47.190
proclinic

25:48.190 --> 25:50.190
这个TGCSS文件

25:50.190 --> 25:51.190
WePAC

25:51.190 --> 25:52.190
那么这个东西

25:52.190 --> 25:53.190
设置一下

25:53.190 --> 25:54.190
好 我们再看这

25:54.190 --> 25:55.190
我们上节课

25:55.190 --> 25:56.190
讲过这个OPT

25:56.190 --> 25:57.190
mysation

25:57.190 --> 25:58.190
U化配置

25:58.190 --> 25:59.190
我们之前讲的是什么

25:59.190 --> 26:00.190
分包

26:01.190 --> 26:02.190
那么其他里边

26:02.190 --> 26:03.190
还有一些

26:03.190 --> 26:04.190
比方说minimize

26:04.190 --> 26:05.190
这个配置

26:05.190 --> 26:06.190
这个配置

26:06.190 --> 26:07.190
我们一般不会去动它

26:07.190 --> 26:08.190
那么这个配置

26:08.190 --> 26:09.190
是什么意思呢

26:10.190 --> 26:11.190
如果说你把设置人处的话

26:11.190 --> 26:12.190
无论是生产环境

26:12.190 --> 26:13.190
还是开发环境

26:13.190 --> 26:14.190
它都会启用压缩

26:14.190 --> 26:15.190
当然如果说你

26:15.190 --> 26:16.190
不设置它最好

26:16.190 --> 26:17.190
不设置它的话

26:17.190 --> 26:18.190
它在开发环境里边

26:18.190 --> 26:20.190
是不会启用压缩的

26:20.190 --> 26:21.190
就后面我们配置的东西

26:21.190 --> 26:22.190
这些东西都是无效的

26:23.190 --> 26:24.190
在开发环境里边

26:24.190 --> 26:25.190
不管它

26:25.190 --> 26:27.190
只有在生产环境里边

26:27.190 --> 26:28.190
才会开启

26:28.190 --> 26:29.190
我们现在是生产环境

26:30.190 --> 26:31.190
一般来说

26:31.190 --> 26:32.190
不要去设置它

26:32.190 --> 26:34.190
那么后面那个minimizer

26:34.190 --> 26:35.190
什么意思呢

26:35.190 --> 26:36.190
就是压缩者

26:36.190 --> 26:37.190
到底是谁在压缩

26:37.190 --> 26:38.190
那么这里

26:38.190 --> 26:39.190
我配置的两个

26:39.190 --> 26:40.190
一个呢

26:40.190 --> 26:41.190
就是用turtle plug-in

26:41.190 --> 26:42.190
那么这个plug-in

26:42.190 --> 26:43.190
哪来的呢

26:43.190 --> 26:44.190
我们这里要导入

26:48.020 --> 26:49.020
turtle plug-in

26:49.020 --> 26:50.020
导入什么呢

26:50.020 --> 26:51.020
其实wappack

26:51.020 --> 26:52.020
就已经安装好了

26:52.020 --> 26:53.020
叫做turtle

26:54.020 --> 26:55.020
我重新安装一次了

26:58.020 --> 26:59.020
npn

27:00.020 --> 27:01.020
i

27:01.020 --> 27:02.020
turtle

27:03.020 --> 27:04.020
wapack

27:04.020 --> 27:05.020
plug-in

27:07.020 --> 27:08.020
安装一下

27:08.020 --> 27:09.020
其实已经安装了

27:09.020 --> 27:10.020
turtle

27:11.020 --> 27:12.020
wapack plug-in

27:12.020 --> 27:13.020
安装一下吧

27:13.020 --> 27:15.020
因为毕竟有些

27:15.020 --> 27:16.020
包管的一些

27:16.020 --> 27:17.020
你没有直接安装

27:17.020 --> 27:18.020
它是不能用的

27:21.020 --> 27:22.020
OK

27:22.020 --> 27:23.020
夹完了

27:23.020 --> 27:24.020
那么这里我们写上

27:24.020 --> 27:25.020
turtle

27:26.020 --> 27:27.020
turtle

27:27.020 --> 27:28.020
wapack plug-in

27:28.020 --> 27:29.020
那么这里turtle plug-in

27:29.020 --> 27:30.020
是不是有了

27:30.020 --> 27:31.020
那么让它进行打包

27:31.020 --> 27:32.020
因为你必须要把它加上

27:32.020 --> 27:33.020
因为现在你再改它

27:33.020 --> 27:34.020
你不改它

27:34.020 --> 27:35.020
它本来自动就有

27:35.020 --> 27:36.020
你改了它

27:36.020 --> 27:37.020
你就必须要把它加上

27:37.020 --> 27:38.020
另外一个

27:38.020 --> 27:39.020
我还要对CSS进行打包

27:39.020 --> 27:41.020
那么我们使用另外一个插件

27:41.020 --> 27:42.020
要说

27:42.020 --> 27:45.020
optimize.css-asserts plug-in

27:45.020 --> 27:47.020
我看一下这插件名字对不对

27:47.020 --> 27:50.460
看一下这个插件的名字

27:50.460 --> 27:53.600
在这

27:53.600 --> 27:54.600
在这

27:54.600 --> 27:55.600
这个名字

27:55.600 --> 27:56.600
安装一下

27:56.600 --> 27:57.600
那么这个玩意

27:57.600 --> 27:59.600
是对CSS文件打包的

27:59.600 --> 28:00.600
因为turtle

28:00.600 --> 28:01.600
它只能打包JS

28:01.600 --> 28:02.600
CSS

28:02.600 --> 28:03.600
我们还要换一个打包

28:05.600 --> 28:06.600
OK

28:06.600 --> 28:07.600
再安装

28:07.600 --> 28:08.600
安装过后

28:08.600 --> 28:10.980
我们把它倒入进来

28:10.980 --> 28:11.980
在这

28:11.980 --> 28:12.980
那么把这里

28:12.980 --> 28:13.980
应用进去

28:13.980 --> 28:14.980
应用进去玩玩

28:14.980 --> 28:15.980
那么现在不仅可以对

28:15.980 --> 28:16.980
CSS打包

28:16.980 --> 28:17.980
也可以对CSS打包

28:17.980 --> 28:18.980
当然这个CSS打包

28:18.980 --> 28:19.980
只能自动的

28:19.980 --> 28:20.980
我主要的目的

28:20.980 --> 28:23.980
是要加上一个CSS的压数

28:23.980 --> 28:24.980
好

28:24.980 --> 28:25.980
咱们试一下吧

28:29.290 --> 28:30.290
咱们来试一下

28:31.290 --> 28:32.290
src

28:32.290 --> 28:34.660
新建个文件

28:34.660 --> 28:36.660
index.css

28:36.660 --> 28:37.660
那么我们再来一个

28:37.660 --> 28:38.660
CSS文件

28:38.660 --> 28:40.660
index.css

28:40.660 --> 28:42.660
那么index.css里面

28:42.660 --> 28:43.660
我们写上一个

28:43.660 --> 28:46.660
import

28:46.660 --> 28:48.660
index.css

28:48.660 --> 28:49.660
好

28:49.660 --> 28:51.660
然后我们在这里

28:51.660 --> 28:52.660
这个JS里面

28:52.660 --> 28:54.660
再写上一些话嘛

28:54.660 --> 28:56.660
const a等于1

28:56.660 --> 28:58.660
const b等于2

28:58.660 --> 29:01.660
const c等于a加b

29:01.660 --> 29:02.660
a加b

29:02.660 --> 29:03.660
好

29:03.660 --> 29:04.660
咱们来

29:04.660 --> 29:05.660
我回来

29:05.660 --> 29:06.660
a吧

29:06.660 --> 29:07.660
这个b

29:07.660 --> 29:08.660
这样子我们看一下

29:08.660 --> 29:09.660
最终原来吧

29:09.660 --> 29:10.660
是不是这样子

29:10.660 --> 29:11.660
好

29:11.660 --> 29:12.660
这边写上一个

29:12.660 --> 29:15.660
body

29:15.660 --> 29:17.660
白光

29:17.660 --> 29:18.660
就看一下吧

29:18.660 --> 29:19.660
看一下就行了

29:19.660 --> 29:20.660
看一下就行了

29:20.660 --> 29:21.660
好

29:21.660 --> 29:22.660
保存

29:22.660 --> 29:23.660
那么现在我们打包一次

29:23.660 --> 29:25.660
看一下

29:25.660 --> 29:32.300
NPM装备

29:32.300 --> 29:33.300
打包一次

29:33.300 --> 29:34.300
好

29:34.300 --> 29:35.300
打包完成

29:35.300 --> 29:36.300
内容

29:36.300 --> 29:37.300
我们来看一下

29:37.300 --> 29:38.300
CSS

29:38.300 --> 29:39.300
是不是变成一行了

29:39.300 --> 29:40.300
压缩了

29:40.300 --> 29:41.300
对不对

29:41.300 --> 29:42.300
然后呢

29:42.300 --> 29:43.300
JS

29:43.300 --> 29:44.300
我们来看一下JS

29:44.300 --> 29:45.300
来找一下

29:46.300 --> 29:47.300
还找不到

29:47.300 --> 29:49.300
找一下b呢

29:49.300 --> 29:51.300
我们要找一个制服串

29:51.300 --> 29:55.260
制服串a

29:55.260 --> 29:57.260
我们要找一个这个

29:57.260 --> 29:58.260
abc

29:58.260 --> 29:59.260
bcd

29:59.260 --> 30:00.260
这样子

30:00.260 --> 30:04.360
重新来一次

30:04.360 --> 30:05.360
它有些变量

30:05.360 --> 30:06.360
它的东西是a

30:06.360 --> 30:07.360
好

30:07.360 --> 30:08.360
那么我们来看一下

30:08.360 --> 30:09.360
abc

30:09.360 --> 30:10.360
是没有结果

30:10.360 --> 30:11.360
说明了它把这个代码

30:11.360 --> 30:12.360
全部给你去掉完了

30:12.360 --> 30:13.360
对吧

30:13.360 --> 30:14.360
这个代码都是用不到的变量

30:14.360 --> 30:15.360
都是用不到的

30:15.360 --> 30:16.360
所以就直接给你去掉完了

30:16.360 --> 30:17.360
没了意思吧

30:17.360 --> 30:18.360
OK

30:18.360 --> 30:19.360
那么这里是

30:19.360 --> 30:21.360
这就是关于这个压缩

30:21.360 --> 30:22.360
压缩

30:22.360 --> 30:23.360
那么这里还有一个

30:23.360 --> 30:25.360
专业术语给大家说一下

30:25.360 --> 30:27.360
叫做dce

30:27.360 --> 30:28.360
dce

30:28.360 --> 30:30.360
就表示deadcode

30:30.360 --> 30:31.360
deadcode

30:31.360 --> 30:33.360
这个e是啥呀

30:33.360 --> 30:35.360
这个e

30:35.360 --> 30:36.360
还有一点忘了

30:36.360 --> 30:37.360
还有一点忘了

30:37.360 --> 30:38.360
反正就是

30:38.360 --> 30:39.360
它指的是无法访问道的代码

30:39.360 --> 30:40.360
我这里还要说一下

30:40.360 --> 30:42.360
有些代码是无法访问道的

30:42.360 --> 30:44.360
它也会被Tetra所处理

30:44.360 --> 30:45.360
那么这里呢

30:45.360 --> 30:46.360
比方说

30:46.360 --> 30:47.360
我们写了这么一个函数

30:47.360 --> 30:48.360
方形Test

30:50.860 --> 30:51.860
比方说我们这里呢

30:51.860 --> 30:52.860
写一个上

30:52.860 --> 30:53.860
求和

30:53.860 --> 30:54.860
a

30:54.860 --> 30:55.860
b

30:55.860 --> 30:56.860
返回一个a加b

30:56.860 --> 30:57.860
那在返回之后呢

30:57.860 --> 30:58.860
我又写了一些代码

30:58.860 --> 31:00.860
比方说c等于e

31:02.860 --> 31:03.860
d等于4

31:03.860 --> 31:05.860
随便写一些代码

31:05.860 --> 31:06.860
那么我们这里呢

31:06.860 --> 31:07.860
还要输出

31:07.860 --> 31:08.860
输出

31:08.860 --> 31:09.860
因为一般来说

31:09.860 --> 31:10.860
输出是去不了的

31:10.860 --> 31:11.860
c加d

31:12.860 --> 31:13.860
好 接下来

31:13.860 --> 31:14.860
我们来看一下

31:14.860 --> 31:15.860
调问一个函数

31:15.860 --> 31:19.200
1

31:19.200 --> 31:20.200
2

31:20.200 --> 31:21.200
这个函数

31:21.200 --> 31:23.200
它怎么能去掉

31:23.200 --> 31:24.200
我们得到返回结果

31:24.200 --> 31:25.200
得到返回结果

31:25.200 --> 31:26.200
输出吗

31:26.200 --> 31:27.200
输出

31:27.200 --> 31:29.200
因为它这里分析出来

31:29.200 --> 31:30.200
这句话是个存在函数

31:30.200 --> 31:31.200
因为只有一句话

31:31.200 --> 31:32.200
它容易分析

31:32.200 --> 31:33.200
输出

31:33.200 --> 31:34.200
它去不了了

31:34.200 --> 31:35.200
太简单了

31:35.200 --> 31:36.200
我们这里

31:36.200 --> 31:37.200
多来几次

31:37.200 --> 31:38.200
多来几次

31:38.200 --> 31:39.200
多掉几次

31:39.200 --> 31:40.200
它把函数保留

31:40.200 --> 31:41.200
你可以看到

31:41.200 --> 31:42.200
函数保留之后呢

31:42.200 --> 31:44.200
它函数返回的就是

31:44.200 --> 31:45.200
这个o

31:46.200 --> 31:47.200
a 对吧

31:47.200 --> 31:48.200
o加a

31:48.200 --> 31:49.200
它返回的就是这个东西

31:49.200 --> 31:50.200
那么

31:51.200 --> 31:52.200
现在呢就是说

31:52.200 --> 31:53.200
这个函数

31:53.200 --> 31:54.200
后边的这些代码是不是没了

31:54.200 --> 31:55.200
对吧

31:55.200 --> 31:56.200
因为它知道这个代码

31:56.200 --> 31:57.200
是永远访问不到的

31:57.200 --> 31:59.200
叫做dead code

31:59.200 --> 32:00.200
永远访问不到的代码

32:00.200 --> 32:01.200
那么这样的代码呢

32:01.200 --> 32:02.200
它就会被移出

32:02.200 --> 32:03.200
我们再来看一个例子

32:03.200 --> 32:05.200
比方说if2

32:06.200 --> 32:07.200
我们这里呢

32:07.200 --> 32:08.200
输出一个

32:09.200 --> 32:10.200
1

32:10.200 --> 32:11.200
然后呢

32:11.200 --> 32:12.200
else

32:12.200 --> 32:15.660
输出

32:16.660 --> 32:17.660
输出一个

32:17.660 --> 32:18.660
2

32:18.660 --> 32:19.660
输出一个2

32:19.660 --> 32:20.660
那么你看一下

32:20.660 --> 32:21.660
它是不是出去就变成1了

32:21.660 --> 32:22.660
因为它做的

32:22.660 --> 32:23.660
这个东西永远为真

32:23.660 --> 32:24.660
这个代码

32:24.660 --> 32:25.660
这个代码就是dead code

32:25.660 --> 32:26.660
永远访问不到的代码

32:26.660 --> 32:27.660
那么dead code

32:27.660 --> 32:28.660
它就会给你去掉

32:28.660 --> 32:29.660
就这么个意思

32:29.660 --> 32:31.660
它会去掉dead code

32:31.660 --> 32:32.660
好

32:32.660 --> 32:33.660
那么这里呢

32:33.660 --> 32:34.660
我们就讲完了

32:34.660 --> 32:35.660
就这也可关于代码压缩

32:35.660 --> 32:36.660
其实我们要做的事情

32:36.660 --> 32:37.660
其实特别特别少

32:37.660 --> 32:38.660
最多呢

32:38.660 --> 32:40.660
就是我们要加一些CSS的压缩

32:40.660 --> 32:41.660
就可以使用它

32:41.660 --> 32:42.660
使用它来进行压缩

32:42.660 --> 32:43.660
那么其他的

32:43.660 --> 32:44.660
都跟我们没什么关系

32:44.660 --> 32:45.660
它自己可以搞定的

32:45.660 --> 32:46.660
OK

32:46.660 --> 32:47.660
这是关于

32:47.660 --> 32:48.660
代码的压缩

32:48.660 --> 32:50.660
下来可以中央了

32:50.660 --> 32:51.660
这就是缺席的

32:51.660 --> 32:52.660
非常重要的意见

32:52.660 --> 32:53.660
好

32:53.660 --> 32:54.660
这也可以到这里

