WEBVTT

00:00.750 --> 00:06.950
这个节课呢 咱们花几分钟时间啊 来讲一讲 非常简单 但是非常重要的一个概念啊 叫做配置文件

00:07.790 --> 00:13.070
呃 就是说 我们微拍啊 我这里已经安装好了啊 他提供了一个命令 就是为拍个命令

00:13.430 --> 00:19.510
那么他又用来做什么 用来打包 对吧 咱们来看一下吧 啊 比方我们这里写个index 第二届s

00:20.270 --> 00:27.150
就啥都不写啊 那么现在我们运行为拍个命令 啊 因为我这个配我已经安装好了啊 啊 这里边呢 也没有配置脚本

00:28.150 --> 00:28.910
直接运行命令

00:29.910 --> 00:32.990
到这里 这里啊 get back here

00:35.110 --> 00:41.110
ok 那么我们这里呢 直接运行是吧 npx 为拍个命令 对吧 来进行打包 是不可以打包

00:41.790 --> 00:49.390
对不对 没问题吧 好 那么也可以呢 我们通过这个命令呢 给他一个参数 比方说mode 对吧 给他个参数啊 development

00:50.510 --> 00:54.470
所以也可以完成打包 对吧 也就是说 我们这个命令呢 他是支持参数的

00:54.870 --> 00:59.270
实际上那为拍个呢 他有很多很多的参数啊 他的命令行里面提供了很多的参数

00:59.670 --> 01:07.510
如果说平时我们开发的过程中啊 后边我们还会学习很多的功能为拍个 那么之前的都很多都是可以用参数来完成的

01:07.950 --> 01:12.030
那么后边就会导致参数越来越多 我们使用了命令的特别不方便

01:12.750 --> 01:19.550
所以说呢 我们更多的时候呢 会使用更加灵活的一种方式 就是使用配置文件 就是专门来写个文件

01:20.070 --> 01:24.310
来控制为拍个的行为 而不是师 而不是说使用参数的形式

01:24.750 --> 01:27.150
听懂的意思吧 所以说我们这里可以去讲一讲啊 配置文件

01:27.710 --> 01:32.670
那么配置文件到底是个啥呢 实际上为拍可能他默认情况下啊 会去读取

01:33.550 --> 01:42.950
这个文件作为配置文件 那么这个文件写到哪呢 一般来说 我们把它放到项目的跟目度下边啊 比如说这是我们的项目 我们就在这里边去新建一个文件 叫做

01:43.630 --> 01:46.190
为拍的config.js

01:46.710 --> 01:52.230
那么从那个文件的后续名可以看出啊 这是应该是一个什么文件 应该是一个js代码文件 对吧

01:52.430 --> 01:54.630
那么用这样的文件呢 作为一个配置文件

01:55.430 --> 02:05.110
而实际上呢 其实他在启动 就是为拍在使用的时候呢 他默认读的是这个文件 能不能改呢 实际上也是可以改的啊 怎么来改呢 可以通过

02:05.550 --> 02:08.950
命令行的这个参数来指定某个配置文件

02:09.550 --> 02:13.150
啊 一会我们可以试一下啊 一会试一下 因为现在配置文件里边还没写东西

02:13.830 --> 02:17.710
啊 比方我们就试一下吧啊 因为这个东西没什么好说的啊 如果说我们

02:18.590 --> 02:23.590
比方说啊 其实大家看可能看的看的不是很清楚啊 为拍试一下吧

02:25.190 --> 02:34.710
直接运行这个命令 那么他会使用什么呢 他会使用这个配置文件来作为我们的配置 大家看没有什么区别对吧 没有什么区别没没关系啊 因为我现在这里边还没写东西

02:35.630 --> 02:37.110
也可以呢 通过指定

02:38.270 --> 02:43.910
为拍通过什么呢 config来指定其中一个配置文件 比方说我们这里再加一个配置文件嘛

02:44.870 --> 02:45.590
就加一个

02:46.630 --> 02:54.190
123.js啊 123.js 我们希望通过这个js来作为配置文件123.js 这样的可不可以呢

02:55.030 --> 03:01.270
也是可以的啊 你看他也能成功运行 当然你指定的路径要正确啊 如果说你指定一个不正确的路径 比方说

03:02.230 --> 03:02.630
这样子

03:03.550 --> 03:09.430
那么是不是爆错了 对吧 他找不到配置文件啊 就这么个意思啊 就配置文件的他不一定是这个文件名 但是呢

03:09.910 --> 03:14.870
通常情况下我们都使用的这个文件名 对吧 而且呢 你看vscode呢 他非常贴心的啊

03:15.150 --> 03:20.830
我因为我安装了一个插件 vscode里面一个插件就是那个图标插件啊 所以说他非常贴心的把这个

03:21.470 --> 03:24.630
图标换成了未拍的图标啊 这就是未拍的logo

03:25.430 --> 03:27.430
ok 那么这是配置文件

03:28.270 --> 03:37.270
好 那么配置文件里边写啥呢 非常简单 你只需要在配置文件里边不管你写什么东西 最终你只要能够通过common解释

03:37.870 --> 03:39.390
来导出一个对象就行了

03:39.830 --> 03:47.630
也就是说我们这里写啥呢 只前边怎么写无所谓 随便你写什么 你只要能够最终导出一个东西导出什么呢 导出一个对象

03:48.830 --> 03:49.830
就可以了啊

03:51.030 --> 03:57.830
那么这个对象里边写啥呢 对象里边的属性呢 就是未拍给的配置啊 有很多的配置 我们后边的学习未拍的

03:58.310 --> 04:01.430
学习这个过程中呢 会给大家一一讲一下啊 每个配置

04:02.350 --> 04:02.590
那么

04:03.590 --> 04:10.270
配置文件的代码呢 大家要注意点啊 就这里边写的代码呢 你必须要是有效等漏的代码

04:10.870 --> 04:15.510
啥意思 你这里边导出的是一个对象 哎 有人说我能不能这样导出呢

04:16.470 --> 04:22.670
用es6的方式啊 你不是说我会拍个支持多种模画吗 对吧 哎 我这样的方式能不能呢 我来试一下呗

04:23.750 --> 04:26.830
啊 直接运行会拍啊 那么他会默认读这个文件

04:27.630 --> 04:33.350
看一下能不能能不能读啊 是不是读不出来啊 他说根本就识别不了export

04:34.310 --> 04:38.630
注意哦 注意哦 这是面试题哦 面试题来了哦 他就会问你

04:39.670 --> 04:45.670
哎 为不拍个不是支持多模画吗 他为什么配置文件里边

04:46.550 --> 04:53.430
他只能用common介绍导出 而不能用es6呢 是不是他故意整我们的 好我给大家看张图啊

04:54.390 --> 04:54.790
为拍

04:56.630 --> 04:56.950
注意看

04:58.750 --> 05:00.230
我们之前说的

05:01.070 --> 05:08.110
说未拍个支持多种模块 指的是什么意思呢 指的是他在构建这个依赖关系的时候

05:08.510 --> 05:15.750
就通过一个入口文件 对吧 来构建出整个依赖关系的时候 你无论是使用common介绍模块化

05:16.110 --> 05:21.710
还是使用es6模块化 还是使用一些什么amd cmd啊 这些东西他都能识别

05:22.630 --> 05:25.230
他指的是这个构建 构建这个依赖关系

05:26.270 --> 05:29.870
但是为什么到了配置文件里边就识别不了了呢

05:30.590 --> 05:33.390
看着啊 因为他在打包的过程中

05:34.270 --> 05:40.350
他是在打包的过程中 就在在编译的过程中 这个时候 在这个时候是不是在漏的环境 我们之前分析过

05:40.910 --> 05:42.350
这个时候他只能是在漏的环境

05:43.070 --> 05:47.310
那么在这个打包的过程中 他要读取配置文件的内容

05:47.790 --> 05:53.430
那么也就是说 他读配置文件是在哪里读的 是不是在这个时候打包的过程中读的 对吧

05:54.550 --> 05:58.110
打包的过程中 他要读配置文件 由于他是漏的环境

05:58.710 --> 06:02.070
由于也就是说 这个配置文件 他要把它运行一次

06:02.790 --> 06:05.790
你可以这样子认为 他在打包的过程中 他要写什么代码呢

06:06.630 --> 06:10.750
你可以这样子想象 在webpack里边 他要写个什么代码呢 他要写个require

06:12.030 --> 06:12.950
require什么呢

06:14.710 --> 06:17.270
webpack.config.jp

06:17.390 --> 06:20.870
他要写个这个代码 为什么呢 他要读取这个配置文件

06:21.710 --> 06:25.990
听懂了意思吗 因此呢 这个代码是不是在漏的环境里边执行了

06:27.270 --> 06:31.710
他是不是在漏的环境里边执行了 这代码 他肯定是啊 他把这个文件 他要在漏的

06:32.310 --> 06:34.990
因为这个webpack 他是在漏的环境里边执行的

06:35.550 --> 06:37.750
他的执行的过程中 他需要一旦漏的环境

06:38.710 --> 06:41.710
他执行的过程中要去干嘛呢 要去读这个配置文件

06:42.230 --> 06:44.830
你可以认为他需要类似的代码 实际上就是这样的代码

06:45.550 --> 06:51.230
类似的这样的代码 他要去读取这个配置文件 因此呢 他必须要使用common.js

06:51.630 --> 06:56.870
跑不了的 因为漏的环境 你如果不经过特殊的处理的话 他只能识别common.js代码

06:57.270 --> 07:00.550
因此他 他只能 因此这里只能使用common.js导出

07:01.950 --> 07:02.270
导出

07:03.830 --> 07:08.950
好 读取了配置文件之后 然后呢 他去干嘛呢 他去构建依赖关系

07:09.350 --> 07:12.270
构建依赖关系的时候 他并不会运行这里的代码

07:13.230 --> 07:15.470
他这个代码是并不会运行的 你看我们之前

07:16.110 --> 07:21.510
打包的时候 这个index里边 比方说我们这里使用了in port 什么什么什么 什么啊front 什么什么

07:21.710 --> 07:27.310
这个代码会不会运行 在打包的过程中会不会运行 他不会运行 他只是作为webhack来

07:28.030 --> 07:34.910
识别依赖的 他只是来作为识别依赖的 最终打包完成过后 到了这边 这边的代码才会运行

07:35.510 --> 07:39.230
而这边代码有没有什么common.js 有没有什么es6母合化 没有 对吧

07:40.030 --> 07:45.110
他也就是说 听懂这个意思吗 也就是说 这个代码呀 他是要在

07:45.750 --> 07:53.550
边依的过程中要参与运行的 他要就是在边依的过程 他要经营边依嘛 他边依的过程中要运行这个代码

07:54.590 --> 07:57.670
所以说他这里 由于他是漏的环境 因此他只能是

07:58.830 --> 07:59.550
common.js

08:00.870 --> 08:06.750
而我们这里的代码 就是我们要打包的原代码 就是要经过边依的原代码

08:06.950 --> 08:13.830
而这个代码 他在打包的过程中 会不会运行他 并不会运行 他只是把这个代码的内容读出来来分析一代关系

08:14.190 --> 08:19.070
最终形成打包结果 最终运行的是咋运行的是这个结果 他并不是我们这边的结果

08:19.270 --> 08:24.510
就我们这边代码是不产与运行的 因此呢 我们这边代码 随便的写啥 都无所谓

08:24.950 --> 08:30.230
因为他都能够识别 听懂这个意思吗 所以说 以后呢 你练试的时候 如果说问道理

08:31.230 --> 08:36.710
哎 喂派可 他说不是说喂派可能识别 所谓的模块化吗 模块化就是标准嘛 都能兼容吗

08:37.150 --> 08:43.110
为什么配置文件 他只能使用load.js这种模块化 而且他这里边只能写load.js代码 为什么呢

08:43.630 --> 08:47.750
因为这个代码是要在他的边依过程中运行的

08:48.230 --> 08:51.950
他要在打包的过程中运行这个代码 他把这个代码读出来

08:52.750 --> 08:57.430
就是要把他运行过后了 把他的就是导出结果 拿出来作为配置

08:58.430 --> 09:03.950
而我们字节的代码呢 是不会在打在打包的过程中是不会参与运行的

09:04.110 --> 09:06.230
因此 随便写他模块化都行 他都能识别

09:07.030 --> 09:12.350
听懂了吗 一定要搞清楚啊 这一块好好去评一评 这一块可能对大家有点绕

09:14.230 --> 09:20.030
好 于是呢 这里边只能写common介绍代码 比方说我问大家一个问题 我在这里能不能输出什么温斗

09:20.310 --> 09:23.470
温斗 会如果说我输出温斗会发生什么事情

09:25.970 --> 09:29.330
首先第一个 第一个 这个玩意会不会爆错

09:31.010 --> 09:38.090
会爆错 在打包的过程中 会爆错 为什么 因为这个这个文件是要在打包过程中运行的

09:39.210 --> 09:44.650
而打包的过程的环境是什么 漏的环境 而漏的环境里面有温斗 肯定是没有 所以说我们看一下吧

09:47.210 --> 09:53.770
打包 所以要爆错 他告诉人告诉你什么window is not defend 他说明这个window在漏的环境里面根本就没有这个东西

09:54.770 --> 10:03.810
而且大家可以看出这个错误发生在哪 错误发生在控制台 根本不可能不可能发生在浏览器 因为他是漏的环境 所以他错误一定是爆在控制台

10:04.610 --> 10:10.770
我再说一次 这个配置文件里边代码是要在打包的过程中参与运行的

10:11.290 --> 10:18.050
而我们写的这些代码 就是src这个目录下面这些 我们自己的代码 是在打包过程中不参与运行的

10:18.330 --> 10:23.970
他只是把文件内容读出来 他的运行的过程中要把这些文件内容就当成制服串 把他读出来

10:24.330 --> 10:31.130
通过去分析这个制服串 分析出他里边他们的依赖关系 还依赖了其他哪些文件 他是把它当成文件来处理

10:31.410 --> 10:36.850
而不是把它当成代码来处理 他只是在读去这些文件内容 因此这些代码是不会运行的

10:37.250 --> 10:43.170
然后他会把打包打包成最终的一个结果 那么最终的结果才是我们之后要运行的

10:44.210 --> 10:47.010
好 这是关于这一点 然后我再问大家一个问题

10:47.970 --> 10:55.970
这个配置文件 打包完成了之后 跟这个配置文件有没有关系 就是地式目录下面的东西 跟这个配置文件还有没有关系

10:57.250 --> 11:03.810
是不是没有任何关系的 你这个地式目录你随便放到哪都可以执行 放出来 放到这里边 我们随便拿一个吧

11:04.770 --> 11:09.690
比方说啊 我们这里新点个双口 我们把地式目录拖出来啊 拖出来

11:11.010 --> 11:16.330
我们重新来一次啊 重新来一次 我这里呢 应那个时候你不要写一句话 写一句话 输出一个啊 应那个时候

11:17.010 --> 11:21.970
来 打包啊 当然我要把这个蚊头伤掉啊 ok 我们来打包

11:23.530 --> 11:30.090
npx 微派啊 一定要理解清楚啊 很多同学对微派很模糊 就是因为对这些基本干的都没有理解清楚

11:30.650 --> 11:34.930
好 那么打包完了 打包完了是不是在这里边 对吧 好 那么我们现在把电视目录拿出来

11:37.850 --> 11:39.610
拿出 拿到桌面上 替换

11:41.250 --> 11:46.090
ok 那么在这里边啊 我们把文件夹脱进来啊 好在这里边我们去新建一个页面

11:46.810 --> 11:52.010
你看一下吧 我已经放到桌面上了 对吧 跟这里边还有什么关系 一点关系都没有了 好 然后呢

11:52.810 --> 11:53.250
去引用

11:54.730 --> 11:55.330
引用这个什么

11:56.290 --> 12:00.210
魅典监视 能不能执行 当然可以执行啊 当然可以执行

12:00.930 --> 12:06.610
这个页面他知不知道这个文件来自于哪 他根本就不知道啊 你看应那个时候可以执行 对吧 可以执行

12:07.610 --> 12:12.050
明白这个意思吗 说打包完了过后就跟这些关起八道的玩意没有任何关系的

12:12.490 --> 12:16.810
包括跟什么src目录没有任何关系 跟这个loaded margins目录没有任何关系

12:17.210 --> 12:22.690
那么这个东西就是个独立的可以运行的文件夹了 他可以脱离这些东西 他完全可以脱离这些东西存在

12:23.690 --> 12:26.610
听懂这个意思吗 这些东西呢都是为了打包服务的

12:27.650 --> 12:35.690
ok啊 搞清楚啊 一定要搞清楚啊 这就是解释了为什么说为了派克里边代码必须是有效的漏代码 因为他是要执行的

12:36.330 --> 12:39.250
所以说他必须是漏的代码 而且呢 必须是common.js

12:39.890 --> 12:48.370
好 接下来我们来看一下他的基本配置啊 因为配置里边有很多东西 我们后边要一讲 其实我们说学习webpack呢

12:48.850 --> 12:57.410
简单来说就是学校的配置文件 有哪些东西可以配置啊 不过呢有一些东西呢 涉及到原地 我们还是要详细解释 我们这里呢 先说几个简单的配置 一个是mode

12:58.810 --> 13:03.250
就是编译模式 对吧 我们之前是写到哪了 之前是不是写到命令行里边了

13:03.690 --> 13:08.490
好 那么现在呢 我们可以写到哪 这不可以写到配置文件里边 对吧 我们在这里边写个mode

13:09.010 --> 13:11.290
配置啊 可以配置为development

13:12.650 --> 13:17.330
development啊 表示开发环境 好来试一下吧

13:18.930 --> 13:22.090
好 npx webpack 你看我现在没有加这个参数

13:23.090 --> 13:28.890
你看 是不是后面没有警告了 对吧 没有刚才那个就是没有mode的那个警告 是不是没有了 那我们看一下是不是开发模式

13:29.370 --> 13:30.770
这不是开发开就是

13:31.890 --> 13:34.050
开发环境 对吧 他打包出来的代码就是开发环境

13:34.650 --> 13:37.290
就这么个意思啊 有打包出来的就这个结果啊

13:38.050 --> 13:42.290
他是一个在开发环境里边运行的结果 因此呢 他不会进行压缩啊 不会进行的

13:43.850 --> 13:47.890
不会进行的就是丑化啊 把这个接式丑化啊 不会做做这么一些事

13:49.370 --> 13:52.650
ok 然后呢 我们再来啊 如果说我把这配置成为producing

13:54.370 --> 13:58.690
好 保存 然后呢 我们再来运行 那么他就会使用这个配置文件里边的配置

13:59.450 --> 14:03.690
ok 那么你看一下 所以变成了producing的这种模式 对吧 就这么简单

14:04.410 --> 14:10.490
都是关于mode这个配置 因此呢 我们是不是可以不用在命令行里边写了

14:11.050 --> 14:12.930
我们直接可以把配置写到这里了 对吧

14:13.850 --> 14:20.490
好 这个呢 我说一点啊 就刚才我们就这句话 就当如果说命令行里边也出现了

14:21.570 --> 14:24.810
跟配置文件又冲突了 那么这个时候怎么办呢 以命令行为准

14:25.450 --> 14:30.010
什么意思呢 就是说我们这里写的是producing对吧 ok 那么我们在命令行里边这样子写

14:30.770 --> 14:31.290
webpack

14:32.250 --> 14:37.010
mode 就是mode 等于什么呢 develop development

14:37.530 --> 14:43.410
那么他到底是development 还是producing的啊 咱们来看一下吧 这么development 以命令行为准

14:43.610 --> 14:49.690
因此呢 这一块呢 我们就可以用这种模式看着啊 我们在piklin.json里边呢 同样的去配置一个脚本script

14:51.090 --> 14:56.490
啊 这里边写两个 一个是dev 我们之前说的开发模式 对吧 开发模式呢 我们运行webpack

14:57.370 --> 14:59.330
啊webpack 那么这里呢

15:00.450 --> 15:03.570
哎 我们比方说我们这里就写成development

15:04.810 --> 15:13.170
development啊 就是使用配置文件里边的配置啊development 然后呢 build的时候呢 我们给他加上一个webpack

15:14.490 --> 15:14.810
mode

15:16.090 --> 15:24.090
producing 对吧 我们又可以用这种模式来写 那么同样的也可以在命也就是说我们同样的支持者有两个命令 一个命令呢是

15:25.050 --> 15:33.370
开发模式打包 一个命令呢 是生产模式打包 对吧 哎 因为这个命令呢 会覆盖掉我们的配置啊 会覆盖掉我们的配置

15:33.930 --> 15:41.890
配置里面就保持开发环境就行了啊 是不是 仍然可以做到 对吧 仍然可以做到 这样子呢 我们就不用再配置文件里面改来改去了啊 一会我们要用

15:42.610 --> 15:48.530
开发环境打包 一会呢 我们要用生产环境打包 那么每次要在这里改 特别麻烦 我们就可以直接写成这两个

15:49.130 --> 15:55.530
啊 啊 甚至呢 你们以后呢 在公司里面 甚至看到啊 就干脆这个东西就不要写配置里面了啊 因为我们都可能要用的

15:55.770 --> 16:02.690
所以说一般呢 我们就可以直接写这 也行啊 也行啊 第一啊 写错了啊 第一

16:03.690 --> 16:09.090
perment啊 因为这里这个单词也挺长的啊 我们避免改动啊 所以说配置里面是不是可以不写了

16:09.370 --> 16:11.970
对吧 可以不写了 这些东西都灵活处理

16:12.850 --> 16:15.610
好 那么现在我再给大家介绍两个配置啊 一个是entry

16:16.330 --> 16:22.530
叫做入口 这个东西我们后面会进行超级详细的讲解 现在大家我们现在简单的认识一下啊

16:23.010 --> 16:28.890
它是什么意思呢 就是说我们webhack打包 它不是要根据一个入口文件吗 对吧 一个入口的模块来进行打包

16:29.250 --> 16:34.770
那么这个入口模块呢 它默认情况下读的是什么 读的是src目录下面的index的监视

16:35.130 --> 16:39.250
能不能改呢 当然可以改 随便你怎么改啊 随便你怎么改啊 比如说

16:39.850 --> 16:41.050
呃 我在这里边呢

16:42.010 --> 16:46.250
就不是就不是index啊 不是index啊 我们就是这里是me

16:47.370 --> 16:53.490
me的话你看一下 如果现在我们我们来运行webhack啊 那么现在我们就可以用npmron来运行

16:54.890 --> 17:00.490
啊 运行你看 它可以包一个错啊 像这些常见的错误呢 大家要知道啊 怎么来看这个错误呢

17:02.170 --> 17:03.290
你看 它说什么呢

17:04.730 --> 17:07.850
low entry fund 没有找到入口

17:08.650 --> 17:11.130
啊 那么下面一个error 错误 它说

17:12.890 --> 17:17.450
entry表示入口的模块找不到啊 入口的模块找不到 所以说呢

17:19.530 --> 17:23.450
你这里呢 它就读不到啊 我们的入口文件 那可不可以配置呢 当然可以配置

17:24.090 --> 17:27.930
可以配置的 怎么配置呢 就在配置文件里边 给它配置一个entry

17:28.650 --> 17:31.450
配置什么呢 src目录下面的made.js

17:32.410 --> 17:38.410
这样就可以了啊 那么这样子呢 它读入口的时候就读到它了 咱们再来再来打包一次

17:43.960 --> 17:48.440
ok 那么你看一下 是不是就可以完成打包了 对吧 它也可以找到这个入口文件了

17:49.640 --> 17:53.560
好 那么这次关于这个配置啊 简单认识一下就行了啊 我们后边呢会详细说

17:54.040 --> 18:00.840
还有一个配置呢 叫做output 这东西呢 顾名思义呢 它叫做出口啊 就是出口呢 它默认情况下是放到

18:01.160 --> 18:06.360
dash目录下面的made.js里边 还不能是往这放的 能不能改呢 可以改

18:06.760 --> 18:13.080
它 这里写错了啊 我这里写错了啊 我这要改一下 这里呢 它不是制服串啊 它是个对象

18:14.280 --> 18:19.800
后面会详细详解啊 现在我们简单认识一下就行了 它是个对象 那么比方说我们来配置一下

18:21.000 --> 18:24.760
它怎么去改它啊output这个配置 怎么改呢 它就是个对象

18:25.160 --> 18:29.800
对象里边呢 有一些属性啊 我们目前就认识一个属性就行了 叫做file name

18:30.520 --> 18:38.040
file name 就是文件名 它默认的文件名是什么呢 默认文件名是made.js 对吧 表示我们打包的结果呢 放到made.js里边

18:38.360 --> 18:41.560
那能不能改呢 可以改 改成别的 比方说bundle 随便改一个

18:42.280 --> 18:46.200
bundle.js ok 那么现在呢 我们再来一次啊

18:47.960 --> 18:48.440
呃

18:51.830 --> 18:56.230
好 打包完成 你看 现在打包了新的文件是不是bundle.js 是不是打包到这了

18:56.470 --> 19:03.590
它不再打包到bundle.js 当然之前它不会删除的啊 之前它不会给你动手 动手脚删除的 那么是不是打包到这个文件了 对不对

19:03.910 --> 19:11.030
也就是一个入口啊 一个出口 对吧 那么这些配置呢 它都会影响到webpack的编译行为

19:11.830 --> 19:15.990
好 最后呢 这一回我再总结一下啊 说几分钟讲完 这边又讲 又讲这么多了

19:16.310 --> 19:21.030
就说我们配置文件 它是在打包过程中要参与运行的

19:21.510 --> 19:26.310
它把会把运行的结果 也就是它导出的结果呢 来影响整个打包过程

19:26.710 --> 19:31.990
因此呢 由于这个运行的环境是漏的环境 所以说我们配置文件里面代码必须是漏的代码

19:32.630 --> 19:35.590
至少要参与这个打包过程运行的代码 必须是漏的代码

19:36.390 --> 19:42.710
然后呢 在打包的过程中 它会读取我们的原代码 通过入口文件来读原代码 但是这些代码 它并不会运行

19:43.110 --> 19:45.750
它只是把它代码内容读出来来分析一代关系

19:46.470 --> 19:51.190
最终形成打包结果 所以说这些代码里面 随便什么代码 什么什么模块代码都行

19:52.870 --> 19:55.190
甚至呢 我们比较做 再给大家举个例子

19:56.550 --> 19:58.950
面试的时候问你 问你什么呢

20:00.950 --> 20:04.150
我们在这里 我们在这吧 我们也不用太夸张啊

20:05.750 --> 20:05.990
在这

20:08.190 --> 20:11.110
问你 这个代码在打包的过程中会不会爆错

20:13.110 --> 20:14.790
会不会爆错 打包的过程中

20:16.390 --> 20:21.990
我们看src下面的代码 在打包的过程中会不会爆错 面试的时候问你 就考虑对未来 未派口

20:22.710 --> 20:26.310
有没有认识清楚 那肯定不会爆错 打包的过程跟他有啥关系呢

20:28.070 --> 20:28.870
你看一下 打包过程

20:29.910 --> 20:38.390
有没有爆错 是不是没有爆错 对吧 为什么没爆错 因为这里代码根本就打包过程中根本不会运行 它在这个阶段是根本就不会运行的

20:38.950 --> 20:47.590
它要等到什么时候运行 它要等到打包完了过后 比较说你这个GS在页面上引用 你去运行页面 页面上引用了这个GS

20:47.590 --> 20:54.550
ok 那么它会爆错 对吧 或者说你打包出来的GS 你就要放到node环境里面运行 那么运行的时候了才会爆错

20:54.870 --> 20:59.990
它跟打包的过程没有什么关系 在过程中它只是读这个文件内容来分析依赖关系而已

21:00.390 --> 21:03.510
一定要搞清楚啊 那比如说这个代码 我们把它放到这

21:04.230 --> 21:12.230
放到这个waypack里面 放到这 能不能运行 它会不会爆错 它一定爆错 这个东西毫无疑问一定爆错 你看现在在打包

21:14.150 --> 21:20.070
是不是爆错了 对吧 它告诉你啥 它就告诉你这个abc不能读取老的属向abc

21:20.550 --> 21:22.150
所以说这个代码是要参与运行的

21:22.950 --> 21:27.190
这就是为什么 以后遇到面试底要知道怎么回答 为什么waypack

21:27.910 --> 21:33.670
这个配置文件 它必须要在node环境 必须是node代码 而且必须是common.s 要搞清楚

21:34.310 --> 21:41.030
ok 这是关于配置文件 那么今后呢 我就会大量的使用配置文件里面的配置 而不会在运行里面去动手胶了

21:41.350 --> 21:44.870
ok 好 这就是咱们这一刻要讲的东西

