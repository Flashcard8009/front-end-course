WEBVTT

00:00.690 --> 00:03.250
这节课的东西特别有意思

00:03.250 --> 00:06.570
我们还是来解决内民冲突

00:06.570 --> 00:09.150
我们上节课的学习用明明约定

00:09.150 --> 00:11.610
明明约定这种方式它并没有改变

00:11.610 --> 00:15.850
我们书写代码就是书写样式的这种方式没有改变

00:15.850 --> 00:17.250
它只是名字变了

00:17.250 --> 00:20.130
我们按照它的明明规范来命名其他都一样

00:20.130 --> 00:22.970
而我们这节课学的东西就不简单了

00:22.970 --> 00:25.530
我们这节课学的东西叫CSS银介石

00:25.530 --> 00:26.650
什么意思呢

00:26.650 --> 00:29.810
它让你在介石里边去书写样式

00:30.090 --> 00:34.330
它完全改变了我们之前书写样式的方式了

00:34.330 --> 00:36.890
这种方案它非常的激进

00:36.890 --> 00:38.970
咱们这节课就来看一下

00:38.970 --> 00:44.090
它又是怎么来解决内民冲突的CSS银介石

00:44.090 --> 00:46.330
它的核心思想的特别简单

00:46.330 --> 00:49.890
就是用一个介石对象来描述样式

00:49.890 --> 00:52.770
而不是CSS样式表

00:52.770 --> 00:55.410
比方说下面这个对象

00:55.410 --> 00:58.250
它就是用一个对象来描述样式

00:58.250 --> 00:59.730
看吧

00:59.730 --> 01:00.610
是不是个对象

01:00.610 --> 01:03.570
它就是个介石对象对吧

01:03.570 --> 01:05.410
跟样式表有没有关系

01:05.410 --> 01:06.130
没有关系

01:06.130 --> 01:09.370
它就是一个普普通通的介石对象

01:09.370 --> 01:11.810
用这个对象来描述我们的样式

01:11.810 --> 01:12.610
就完了

01:12.610 --> 01:15.050
没了CSS银介石就这么一点点

01:15.050 --> 01:16.770
就没了

01:16.770 --> 01:20.770
那么由于这种描述方式有没有什么内名

01:20.770 --> 01:22.530
有没有内名

01:22.530 --> 01:24.090
说没有内名哪里有内名

01:24.090 --> 01:25.090
哪里可以看到内名

01:25.090 --> 01:26.610
只有一个介石辨量

01:26.610 --> 01:28.170
辨量名不会冲突

01:28.170 --> 01:28.970
冲突就爆错了

01:28.970 --> 01:29.570
对不对

01:29.570 --> 01:31.450
所以说它根本就不存在内名

01:31.450 --> 01:33.650
那么当然它不存在

01:33.650 --> 01:35.010
有什么内名冲突

01:35.010 --> 01:36.690
根本就不存在

01:36.690 --> 01:38.770
那么有些同学就想问了

01:38.770 --> 01:42.290
我这个样式怎么把它应用到介面上去呢

01:42.290 --> 01:44.410
我这个课件好像

01:44.410 --> 01:46.050
课件好像还没有写完

01:46.050 --> 01:48.050
我这里重新把它保存一下

01:48.050 --> 01:50.490
重新把它保存一下

01:50.490 --> 01:53.690
课件这里刷新一次

01:53.690 --> 01:55.530
就这种方式我写

01:55.530 --> 01:56.970
样式倒是可以写出来

01:57.010 --> 01:58.610
但是它由于没有内名

01:58.610 --> 02:00.810
我怎么把它应用到介面上去呢

02:00.810 --> 02:01.610
它不管

02:01.610 --> 02:03.410
它完全不管你怎么去应用

02:03.410 --> 02:05.050
你想咋应用就咋应用

02:05.050 --> 02:06.290
随便你

02:06.290 --> 02:08.570
你可以使用任何技术

02:08.570 --> 02:09.810
任何框架

02:09.810 --> 02:13.130
任何方式把这个样式应用到介面上去

02:13.130 --> 02:14.570
它就提供一种思想

02:14.570 --> 02:16.210
什么思想的一个思想极其简单

02:16.210 --> 02:18.170
就是用一个介石对象来描述样式

02:18.170 --> 02:18.730
没了

02:18.730 --> 02:21.290
这样的事情你全部自己搞定

02:21.290 --> 02:23.250
像你们以后要学习什么

02:23.250 --> 02:24.170
Viu啊

02:24.170 --> 02:24.970
Rect啊

02:24.970 --> 02:25.810
像这些东西

02:25.850 --> 02:29.250
它都支持CSS in JS

02:29.250 --> 02:30.170
所以说

02:30.170 --> 02:32.010
后边里面学习的这些东西过后

02:32.010 --> 02:33.730
就可以非常轻松的

02:33.730 --> 02:36.130
把这些样式应用到介面上去了

02:36.130 --> 02:38.090
当然我们现在还没有学习Viu

02:38.090 --> 02:39.330
还没有学习Rect

02:39.330 --> 02:41.130
因此我们现在

02:41.130 --> 02:43.330
当然也可以找到一些方式

02:43.330 --> 02:44.210
把它应用进去

02:44.210 --> 02:44.810
比方说

02:44.810 --> 02:46.770
咱们来举个例子

02:46.770 --> 02:48.610
这里有个页面

02:48.610 --> 02:50.250
当然由于我们现在样式

02:50.250 --> 02:51.530
跑到介石代码里边去了

02:51.530 --> 02:54.250
因此我们当然要用介石代码来应用

02:54.290 --> 02:55.410
比方说我们举个例子吧

02:57.370 --> 02:59.170
这里有一个DIV

02:59.170 --> 03:00.130
给他个ID

03:00.130 --> 03:00.810
ID

03:00.810 --> 03:02.210
DIV1

03:02.210 --> 03:03.450
这里有一个DIV

03:03.450 --> 03:04.850
ID的DIV2

03:04.850 --> 03:05.330
行了

03:05.330 --> 03:06.850
就这么两个DIV

03:06.850 --> 03:08.130
就这么两个DIV

03:08.130 --> 03:08.810
来吧

03:08.810 --> 03:10.370
我们现在有一个介石

03:10.370 --> 03:12.170
我们把介石引用进来

03:12.170 --> 03:14.410
我们在这里新建个文件夹

03:14.410 --> 03:15.570
就script

03:17.730 --> 03:19.930
这里边有一个index的介石

03:21.010 --> 03:22.530
当然我现在没有用VIPIKE

03:22.530 --> 03:23.850
用VIPIKE是一样的

03:23.890 --> 03:25.010
完全没有任何区别

03:25.010 --> 03:26.130
一样的

03:26.130 --> 03:29.010
VIPIKE就把这个文件夹换成src

03:29.010 --> 03:29.210
对吧

03:29.210 --> 03:30.170
让他自行打包

03:30.170 --> 03:31.290
这里边可能有很多介石

03:31.290 --> 03:32.570
他自行打包合并

03:32.570 --> 03:33.770
其实都是介石代码

03:33.770 --> 03:34.610
一样的

03:34.610 --> 03:36.610
这里我们去引用介石

03:36.610 --> 03:38.090
当然也可以用模坏化的方式

03:38.090 --> 03:39.650
我们也学过模坏化

03:39.650 --> 03:41.450
script里边index的介石

03:41.450 --> 03:43.410
用Type为march

03:43.410 --> 03:45.250
因为我们可能会写很多的介石文件

03:46.250 --> 03:46.570
OK

03:46.570 --> 03:46.930
行了

03:46.930 --> 03:47.850
那咱们来吧

03:47.850 --> 03:48.130
来吧

03:48.130 --> 03:49.450
这里边怎么来玩呢

03:50.490 --> 03:51.930
我们得到DIV1

03:54.360 --> 03:55.360
DIV1

03:55.440 --> 03:56.160
用document

03:56.680 --> 03:58.240
get element by id

03:58.240 --> 03:58.920
DIV1

03:58.920 --> 04:00.760
我们要给这两个DIV应用样式

04:00.760 --> 04:01.240
注意

04:01.240 --> 04:02.400
现在没有什么样式表

04:02.400 --> 04:03.800
没有什么CSS文件

04:03.800 --> 04:04.600
不存在的

04:04.600 --> 04:06.600
全是用介石来应用

04:07.120 --> 04:08.440
那么我们的样式是哪呢

04:08.440 --> 04:09.560
样式就来这个吧

04:09.560 --> 04:10.600
就来这个样式

04:11.760 --> 04:12.960
这就是我们的样式

04:12.960 --> 04:14.640
就是个普通的介石对象

04:15.160 --> 04:17.000
然后怎么把这个样式应用进去了

04:17.000 --> 04:18.040
你自己想

04:18.040 --> 04:19.440
怎么应用进去

04:19.440 --> 04:21.280
我们是不是可以写个函数

04:21.760 --> 04:23.840
专门来应用样式写个函数

04:23.840 --> 04:24.280
这个函数

04:24.320 --> 04:26.560
我们给它取个名字叫做Apply

04:27.560 --> 04:29.320
应用样式style

04:30.320 --> 04:31.040
第一个参数

04:31.040 --> 04:32.040
传一个动物对象

04:32.760 --> 04:33.440
第二个参数

04:33.440 --> 04:34.920
传一个样式

04:35.720 --> 04:37.400
我通过了两个参数

04:37.400 --> 04:38.640
一个样式对象

04:38.640 --> 04:39.520
我们打个注释吧

04:41.960 --> 04:47.200
这是给某个动物元素应用一个样式

04:48.200 --> 04:49.200
那么这是动物元素

04:49.960 --> 04:51.200
这是一个样式对象

04:51.200 --> 04:51.440
对吧

04:51.440 --> 04:53.160
我们现在是CSS应介石

04:53.160 --> 04:54.440
在介石中输写样式

04:54.440 --> 04:55.600
因此它是个样式对象

04:56.000 --> 04:57.040
传进来过后

04:57.040 --> 04:58.200
我来给你应用样式

04:58.200 --> 04:58.800
怎么应用

04:58.800 --> 04:59.440
特别简单

04:59.440 --> 05:00.640
我们就用一个Full In循环

05:02.160 --> 05:03.200
样式的名字

05:03.200 --> 05:04.800
循环这个对象

05:06.000 --> 05:08.040
那么这是样式的名字

05:08.040 --> 05:09.480
那么样式的值是什么

05:10.000 --> 05:10.600
样式的值

05:10.600 --> 05:12.680
我们拿到值

05:14.890 --> 05:15.450
Value

05:15.450 --> 05:16.250
值是什么

05:16.250 --> 05:17.370
style is key

05:17.370 --> 05:17.850
对吧

05:17.850 --> 05:19.090
是不是可以拿到样式的值

05:19.490 --> 05:19.690
好

05:19.690 --> 05:21.250
样式的名字和样式的值有了

05:21.250 --> 05:23.730
我们只需要给什么Storm的style里边

05:23.730 --> 05:24.570
什么key

05:24.570 --> 05:26.250
复制为这个Value就完了

05:26.250 --> 05:26.690
对吧

05:26.810 --> 05:27.610
特别简单

05:28.170 --> 05:29.250
而且像这个函数

05:29.250 --> 05:31.410
是不是我们还可以单独提一个模块出去

05:31.410 --> 05:31.890
对吧

05:31.890 --> 05:32.530
我们这里

05:33.530 --> 05:34.450
提一个模块出去

05:35.050 --> 05:36.490
跟CSS相关的

05:36.490 --> 05:37.770
我们先进一个文件夹

05:38.130 --> 05:39.530
跟CSS相关的

05:40.210 --> 05:41.610
那么这里不是CSS文件

05:41.610 --> 05:42.570
就是一些模块

05:42.570 --> 05:43.490
也是介石模块

05:43.490 --> 05:45.330
跟CSS相关的一些介石模块

05:45.530 --> 05:46.370
那么这个模块

05:46.370 --> 05:47.210
我们可以写个什么

05:47.890 --> 05:50.450
比方说写一个就是UTO

05:51.170 --> 05:51.810
要介石

05:51.810 --> 05:52.170
好

05:52.170 --> 05:53.850
那么这边我们把这个函数写进来

05:54.570 --> 05:55.290
这里导出

05:55.290 --> 05:56.170
export

05:56.370 --> 05:56.970
导出

06:01.320 --> 06:01.760
剪掉

06:04.530 --> 06:04.890
好

06:04.890 --> 06:05.530
那么这样子

06:05.890 --> 06:07.170
是不是写出来这么一个东西

06:07.730 --> 06:07.930
好

06:07.930 --> 06:09.890
那么这边我们要应用样式特别简单

06:10.130 --> 06:10.850
我们导入进来

06:10.850 --> 06:11.210
对吧

06:11.210 --> 06:11.930
导入进来

06:12.250 --> 06:13.010
import

06:13.410 --> 06:14.450
导入from

06:14.450 --> 06:14.690
什么

06:15.810 --> 06:18.530
来自于CSS里面的UTO

06:18.730 --> 06:19.410
第二介石

06:19.850 --> 06:20.410
导入什么

06:20.410 --> 06:22.770
导入这个叫做Apply Styles

06:23.130 --> 06:23.850
把导入进来

06:24.050 --> 06:25.610
那么这里我们要应用这个样式

06:25.610 --> 06:26.890
把它应用到DIV1

06:26.890 --> 06:28.250
也要应用到DIV2

06:28.250 --> 06:30.170
那怎么应用的Apply Styles

06:30.410 --> 06:31.330
DIV1

06:31.330 --> 06:32.250
然后Styles

06:32.850 --> 06:34.290
DIV2 Styles

06:34.290 --> 06:34.730
对吧

06:34.730 --> 06:35.290
就完了

06:35.770 --> 06:38.530
全是用介石码来书写

06:38.850 --> 06:39.290
对不对

06:39.850 --> 06:40.170
好

06:40.170 --> 06:41.170
那么接下来我们来看一下

06:43.290 --> 06:43.850
没上蓝

06:43.850 --> 06:44.930
真的一点蓝度都没有

06:45.330 --> 06:46.010
我的东西呢

06:48.330 --> 06:48.890
东西呢

06:49.770 --> 06:50.170
看一下

06:50.170 --> 06:50.570
剪它

06:50.570 --> 06:51.810
它包错了

06:51.810 --> 06:52.410
包错了

06:52.730 --> 06:53.210
它说啥

06:55.770 --> 06:57.050
因为我这个

06:57.690 --> 06:58.410
明白了

06:58.410 --> 06:58.770
明白了

06:58.770 --> 06:59.210
明白了

06:59.650 --> 07:00.610
因为我这个呢

07:00.610 --> 07:02.410
它不是在服务器上打开的

07:02.410 --> 07:02.930
这个页面

07:02.930 --> 07:04.930
是在本地用文件系统打开的

07:04.930 --> 07:06.690
因此它不能应用这个模块化

07:07.010 --> 07:08.010
我这里把服务器打开

07:08.010 --> 07:08.930
用Div Server

07:09.210 --> 07:09.930
用服务器打开

07:11.370 --> 07:12.810
你看什么两个DIV就出来了

07:12.810 --> 07:13.130
对吧

07:13.130 --> 07:13.970
两个DIV出来了

07:13.970 --> 07:14.250
好

07:14.250 --> 07:15.490
就是两个DIV连在一起了

07:15.490 --> 07:17.570
那么现在我们要给它加上一个Border

07:17.570 --> 07:19.370
加上一个就是边框

07:19.370 --> 07:20.810
你看一下这两个DIV吧

07:22.010 --> 07:22.770
看下这两个DIV

07:23.170 --> 07:23.450
你看

07:23.450 --> 07:24.850
是不是全到Style

07:24.850 --> 07:25.970
内点样式里边去了

07:26.170 --> 07:26.410
对吧

07:26.410 --> 07:27.650
全到内点样式里边去了

07:29.210 --> 07:30.170
给它加上一个边框

07:30.850 --> 07:32.690
Border比方说

07:32.690 --> 07:33.610
两个像素

07:33.610 --> 07:34.370
solid

07:35.210 --> 07:35.810
solid

07:36.890 --> 07:37.450
保存

07:37.890 --> 07:38.330
你看

07:39.130 --> 07:40.970
给它加上一个颜色

07:40.970 --> 07:42.490
表示灰色

07:43.490 --> 07:44.090
33

07:44.650 --> 07:45.090
你看

07:45.090 --> 07:46.330
什么两个DIV就出来了

07:46.330 --> 07:46.730
对吧

07:47.330 --> 07:48.570
就这么简单

07:48.570 --> 07:50.170
CSS-INJS

07:50.170 --> 07:51.650
它的核心道理

07:51.650 --> 07:53.130
核心概念就是说

07:53.130 --> 07:54.450
你这个玩意

07:54.450 --> 07:57.010
你可以用一个对象来表示一个样式

07:57.010 --> 07:58.250
至于怎么把这个样式

07:58.290 --> 07:59.370
应用到界面上去

07:59.370 --> 08:00.890
属于一遍你咋应用

08:00.890 --> 08:02.250
我们这里的应用方式

08:02.250 --> 08:03.170
是怎么应用的呢

08:03.170 --> 08:05.330
我是把它加到内点样式里边去了

08:05.330 --> 08:05.730
对吧

08:05.730 --> 08:07.370
当然还可以想到一些别的办法

08:07.370 --> 08:09.810
总之我们可以随意的去应用

08:09.810 --> 08:10.970
一样式

08:10.970 --> 08:12.210
它的核心思想就是

08:12.210 --> 08:13.330
你用一个对象表示

08:13.330 --> 08:14.770
这样的事情不管了

08:15.170 --> 08:15.730
对吧

08:16.290 --> 08:16.530
好

08:16.530 --> 08:17.570
那么接下来我们来看一下

08:17.570 --> 08:19.530
关于这个CSS-INJS

08:19.530 --> 08:21.330
它的一些特点

08:22.050 --> 08:22.650
第一个

08:22.650 --> 08:24.410
绝无冲突的可能

08:24.410 --> 08:25.770
有没有可能冲突

08:25.770 --> 08:26.730
绝对不可能冲突

08:26.730 --> 08:26.930
对吧

08:26.970 --> 08:28.690
内明都没有的咋可能冲突呢

08:28.690 --> 08:29.210
对不对

08:29.210 --> 08:31.090
而且它只是用变量的形式

08:31.090 --> 08:32.490
保存了一个变量里边

08:32.490 --> 08:34.250
或者是直接用一个字面量

08:34.250 --> 08:35.890
比方说像这样子

08:35.890 --> 08:36.810
直接用一个字面量

08:36.810 --> 08:37.810
是不是可以也可以

08:37.810 --> 08:38.450
对吧

08:38.450 --> 08:39.250
这不可能

08:39.250 --> 08:40.370
不可能存在什么冲突

08:40.370 --> 08:41.090
不可能的

08:41.090 --> 08:42.970
说这是第一个特点

08:43.970 --> 08:44.810
第二个特点

08:44.810 --> 08:46.210
它更加灵活

08:46.210 --> 08:47.690
也可以充分的利用

08:47.690 --> 08:49.250
企业式语言灵活的特点

08:49.250 --> 08:51.490
用各种招式来处理一样式

08:51.490 --> 08:52.930
我给大家稳一稳吧

08:52.930 --> 08:54.450
这个东西有多少的稳法

08:54.450 --> 08:55.970
我给大家说一下

08:56.250 --> 08:58.170
稳法多的吓死人

08:58.170 --> 08:59.250
比方说吧

08:59.250 --> 09:01.650
我们有一些公共样式要提出来

09:01.650 --> 09:03.370
那么我们这里可以建立一个文件

09:06.370 --> 09:07.170
第二件事

09:07.170 --> 09:09.690
来提出一些公共样式

09:09.690 --> 09:10.530
那么来吧

09:10.530 --> 09:11.850
比方公共样式有什么

09:11.850 --> 09:12.530
背景颜色

09:12.530 --> 09:13.890
我要红色

09:13.890 --> 09:14.970
那个就是颜色

09:14.970 --> 09:15.530
我要白色

09:15.530 --> 09:16.410
那么这个比方说

09:16.410 --> 09:17.570
我们把它设成一个组合

09:17.570 --> 09:18.650
这是个公共样式

09:18.650 --> 09:18.970
OK

09:18.970 --> 09:19.850
那么在common里面

09:19.850 --> 09:20.970
我们是不是可以来稳

09:20.970 --> 09:21.610
我什么呢

09:21.610 --> 09:22.210
export

09:22.210 --> 09:23.410
导出一个

09:23.410 --> 09:24.770
导出一个就是

09:24.810 --> 09:26.450
叫做你刚才取个名字叫做

09:27.250 --> 09:28.050
red

09:28.050 --> 09:28.970
红色的背景

09:28.970 --> 09:29.970
red的笔记

09:30.970 --> 09:31.570
它是什么呢

09:31.570 --> 09:32.250
它是这个

09:33.170 --> 09:34.530
各种花样玩的出来

09:35.170 --> 09:35.970
是不是这个玩意儿

09:36.450 --> 09:37.530
然后有一些

09:37.530 --> 09:39.130
比方说这个边框

09:39.130 --> 09:40.890
边框

09:40.890 --> 09:43.450
我们也给它来一个export

09:44.570 --> 09:45.530
叫做border

09:46.650 --> 09:48.530
所以导出一个公共样式

09:48.890 --> 09:49.570
来吧

09:49.970 --> 09:50.690
边框

09:51.170 --> 09:52.810
导出一个边框公共样式

09:53.570 --> 09:53.890
行了

09:53.890 --> 09:54.250
对吧

09:54.290 --> 09:55.970
然后我们就得这两个公共样式

09:55.970 --> 09:57.090
那么我们这里怎么来玩

09:57.090 --> 09:58.410
是不是公共样式就不用写了

09:58.850 --> 09:59.970
公共样式不用写了

09:59.970 --> 10:00.330
对吧

10:00.330 --> 10:02.130
只需要写差异性的样式就行了

10:03.130 --> 10:05.810
那么我们要在dave1里边去应用

10:05.810 --> 10:07.010
除了这个样式之外

10:07.010 --> 10:08.410
我们是不是还要多应用几个

10:08.410 --> 10:09.530
还要应用这个公共样式

10:09.530 --> 10:10.850
那又有很多种玩法了

10:10.850 --> 10:11.810
那怎么玩呢

10:12.090 --> 10:13.250
比方说现在肯定不行

10:13.250 --> 10:14.130
现在你看

10:14.130 --> 10:15.130
是没东西了

10:15.130 --> 10:15.450
对吧

10:15.450 --> 10:17.330
因为它看没有背景颜色了

10:17.330 --> 10:17.930
没有什么了

10:17.930 --> 10:19.170
没有那个边框了

10:19.170 --> 10:19.970
就看不见了

10:19.970 --> 10:21.490
那么比方说我要把公共样式

10:21.490 --> 10:22.690
应用进去

10:22.690 --> 10:24.130
我这里还要导入公共样式

10:25.090 --> 10:25.730
from

10:26.370 --> 10:26.970
css

10:26.970 --> 10:28.130
各种玩的方式

10:28.130 --> 10:29.770
不是这个方式不是唯一的

10:30.650 --> 10:32.650
可以想象的各种玩的方式都可以

10:32.650 --> 10:33.490
比方说我们这里

10:33.490 --> 10:34.530
该导入一个波段

10:34.530 --> 10:35.930
导入一个什么BG

10:35.930 --> 10:36.730
READ

10:36.730 --> 10:38.530
那么怎么把这两个样式应用进去了

10:39.130 --> 10:39.330
好

10:39.330 --> 10:40.770
那么我们就可以这样来玩

10:40.770 --> 10:42.450
在UTO里面稍微更改一下

10:42.450 --> 10:44.250
把它改成什么生语参数

10:44.970 --> 10:46.690
那么这两个样式不是有很多个样式的

10:47.090 --> 10:47.530
对吧

10:48.010 --> 10:49.050
是不是有很多个样式的

10:49.410 --> 10:49.610
好

10:49.610 --> 10:50.330
那么很多个样式

10:50.330 --> 10:51.370
我们把这些样式

10:51.850 --> 10:53.890
首先用对相的方式来进行合并

10:53.970 --> 10:55.570
把它合并成一个完整的对象

10:55.570 --> 10:56.010
对吧

10:56.010 --> 10:57.890
这里边不是有很多的那个就是

10:59.170 --> 11:00.770
不是有很多的这个就是样式吗

11:00.770 --> 11:01.010
好

11:01.010 --> 11:01.410
来吧

11:03.530 --> 11:05.290
我们这里用一个就是

11:06.850 --> 11:08.370
target styles

11:08.970 --> 11:10.010
target styles

11:10.210 --> 11:10.810
一空的一项

11:11.050 --> 11:12.690
表示注意中合并

11:12.690 --> 11:13.650
就是用对相的合并

11:13.650 --> 11:14.130
对吧

11:14.130 --> 11:14.970
对上了混合

11:14.970 --> 11:16.210
对相合并的

11:16.450 --> 11:18.370
最终合并的样式对象

11:18.850 --> 11:19.170
来吧

11:19.170 --> 11:19.890
我们来合并

11:20.090 --> 11:20.810
循环什么呢

11:20.810 --> 11:21.930
循环这个styles

11:23.810 --> 11:24.610
styles

11:24.770 --> 11:25.770
是不是循环这个数组

11:26.130 --> 11:26.290
好

11:26.290 --> 11:26.890
每一循环

11:26.890 --> 11:28.250
意思是不是拿到一个样式对象

11:28.650 --> 11:30.570
这里边可能会出现多个样式对象

11:30.570 --> 11:31.530
那么每一循环一个

11:31.530 --> 11:32.570
拿到一个样式对象

11:32.570 --> 11:33.890
样式对象是不是混合进来

11:33.890 --> 11:34.690
混合到这里边

11:34.690 --> 11:34.890
好

11:34.890 --> 11:35.290
来吧

11:35.930 --> 11:36.650
target style

11:36.650 --> 11:37.210
等于什么呢

11:37.730 --> 11:38.690
把自己展开

11:38.690 --> 11:39.490
然后呢

11:39.490 --> 11:40.690
再把这个style展开

11:40.690 --> 11:41.050
对吧

11:41.690 --> 11:43.490
混合成为一个最终的对象

11:43.490 --> 11:44.330
然后给父子给他

11:44.330 --> 11:46.050
下一次循环又混合又混合

11:46.050 --> 11:48.410
这样子就不断的把新样式混合进来

11:48.690 --> 11:48.850
好

11:48.850 --> 11:49.970
那么我们这里循环这个

11:50.570 --> 11:51.250
就可以

11:51.250 --> 11:52.490
我出各种花样子出来

11:53.250 --> 11:54.730
至于去理这个逻辑

11:55.570 --> 11:56.410
那么这边

11:56.410 --> 11:57.490
这样子写了过后呢

11:57.490 --> 11:58.290
到这边来

11:58.290 --> 12:00.250
你看我们这样子可以怎么来写了

12:00.250 --> 12:01.050
怎么可以写

12:01.050 --> 12:01.770
border

12:02.850 --> 12:03.450
read

12:04.010 --> 12:04.570
bg

12:04.570 --> 12:05.050
对吧

12:05.730 --> 12:06.770
想这么用就这么用

12:07.290 --> 12:08.810
然后这里我就不用read bg了

12:08.810 --> 12:10.130
后边我们就只用一个border

12:10.130 --> 12:10.610
你看一下

12:10.610 --> 12:11.210
看一下吧

12:11.410 --> 12:11.810
你看

12:12.290 --> 12:13.330
说实际上可以解决

12:13.330 --> 12:14.770
各种花样能玩得出来

12:14.770 --> 12:15.770
包括这个border

12:15.770 --> 12:16.930
我们还可以玩出什么

12:17.210 --> 12:17.570
border

12:17.570 --> 12:19.330
我还还可以把它写成一个函数

12:19.330 --> 12:20.290
关于这个border

12:20.290 --> 12:21.770
我把写成个函数你看着

12:22.170 --> 12:22.690
方可行

12:22.930 --> 12:24.410
把它写成个border函数

12:24.410 --> 12:26.850
你给我传一个边框的宽度

12:27.530 --> 12:28.970
宽度我默认为2

12:28.970 --> 12:29.970
默认为2

12:30.250 --> 12:31.770
然后给我传一个颜色

12:31.770 --> 12:32.530
color

12:32.530 --> 12:33.530
默认为

12:33.530 --> 12:34.330
比方说

12:35.330 --> 12:35.970
三两三

12:36.370 --> 12:36.970
那么这样子

12:36.970 --> 12:38.130
我把它写成个函数

12:38.130 --> 12:40.210
这个函数反回一个对象

12:40.810 --> 12:42.210
你看各种花样能玩得出来

12:42.210 --> 12:42.810
那么这个对象

12:42.810 --> 12:43.810
我们把拼接一下

12:44.730 --> 12:46.130
这个地方是不是拼接成

12:46.130 --> 12:46.970
位置

12:47.130 --> 12:48.850
这个地方拼接什么

12:48.850 --> 12:49.650
拼接color

12:49.650 --> 12:50.050
是吧

12:50.050 --> 12:51.290
变成个函数了

12:51.610 --> 12:52.930
那么这个函数怎么用呢

12:52.930 --> 12:53.610
到这边来

12:53.610 --> 12:55.130
你看我们这个可以用

12:55.130 --> 12:55.690
border

12:56.290 --> 12:57.210
函数

12:57.930 --> 12:59.130
默认值

12:59.130 --> 13:01.210
那么这个下面我们给它换一个

13:01.210 --> 13:02.410
比方5个边框

13:02.410 --> 13:03.410
颜色来为

13:04.210 --> 13:04.850
绿色

13:05.290 --> 13:05.850
color

13:06.410 --> 13:07.530
你看它反回一个对象

13:07.530 --> 13:07.770
是吧

13:07.770 --> 13:08.490
反回一个对象

13:08.890 --> 13:09.490
保存

13:10.210 --> 13:11.610
你看变成这样子了

13:11.610 --> 13:11.970
对吧

13:11.970 --> 13:12.690
变成这样子了

13:13.850 --> 13:14.690
可以想象到吗

13:14.690 --> 13:15.130
对吧

13:15.130 --> 13:18.930
可以用各种花样来玩出这个样式

13:19.170 --> 13:20.610
所以它非常非常的灵活

13:20.650 --> 13:22.810
因为介石语言它是非常灵活的

13:23.610 --> 13:24.570
这是它第二个特点

13:25.490 --> 13:26.170
第三个特点

13:26.170 --> 13:27.730
它的应用面更广

13:27.730 --> 13:29.850
这是它注意重要的特点

13:30.610 --> 13:32.850
因为它跟CSS有没有关系

13:33.370 --> 13:34.210
没有任何关系

13:34.210 --> 13:35.730
它就是一个普通的对象而已

13:36.170 --> 13:37.210
因此它的

13:37.210 --> 13:38.770
它只要一个技术

13:38.770 --> 13:40.210
它支持介石语言

13:40.210 --> 13:42.010
它不用支持CSS语言

13:42.650 --> 13:44.650
那么它就可以使用CSS进介石

13:45.090 --> 13:46.250
因为它只要支持介石

13:46.250 --> 13:46.970
它就支持对象

13:47.610 --> 13:48.490
只要支持对象

13:48.570 --> 13:51.250
我们就可以用一个对象的方式来描述样式

13:51.970 --> 13:52.810
那么有些同学说了

13:53.570 --> 13:55.250
那你不支持CSS

13:55.810 --> 13:56.850
只支持介石

13:56.850 --> 13:58.690
我怎么要把这个样式应用进去了

13:59.690 --> 14:00.570
怎么样应用进去的

14:01.690 --> 14:02.650
比方说我举个例子

14:03.170 --> 14:03.570
在这里

14:04.370 --> 14:04.690
这里

14:05.370 --> 14:05.730
YouTube

14:06.250 --> 14:07.570
我们这应用样式这里

14:07.570 --> 14:09.330
我就肯定不能写这样的代码了

14:10.330 --> 14:11.570
不可能有什么style了

14:11.570 --> 14:12.970
动物元素也不可能

14:12.970 --> 14:14.610
可能连动物元素都没了

14:14.610 --> 14:16.170
可能也没有什么style属性了

14:16.170 --> 14:17.690
因为它不支持CSS

14:18.130 --> 14:19.610
那么这个时候可能是一些

14:19.610 --> 14:21.050
客户端的窗帝应用程序

14:21.050 --> 14:23.530
比方说编辑器这种窗帝应用程序

14:23.930 --> 14:24.810
那么这种程序里边

14:24.810 --> 14:26.810
它肯定也有调整样式的办法

14:26.810 --> 14:27.170
它肯定

14:27.170 --> 14:29.010
但是它不是CSS调整样式

14:29.690 --> 14:31.450
它可能用别的方式来调整样式

14:31.450 --> 14:33.770
那么你可以在这个代码里边自行处理

14:34.610 --> 14:36.170
我给你的样式还是一个对象

14:36.490 --> 14:38.170
那么怎么样根据这个对象

14:38.170 --> 14:41.970
来把这个介面上的表现的效果来进行调整

14:42.490 --> 14:44.050
我可以用各种方式来进行调整

14:44.050 --> 14:45.290
不一定是CSS

14:45.770 --> 14:47.850
因此正因为它有这样的特点

14:49.210 --> 14:52.850
它在我们后边学习移动端开发的时候

14:53.090 --> 14:55.130
特别是开发手机应用App

14:55.490 --> 14:56.490
开发这种东西的时候

14:56.690 --> 14:59.650
由于很多的App它并不支持CSS

14:59.810 --> 15:00.370
它不支持

15:00.370 --> 15:03.130
但是它的开发框架里边它是支持介式的

15:03.570 --> 15:06.130
因此我们在开发一些手机端应用的时候

15:06.290 --> 15:08.410
特别是用介式开发手机端应用的时候

15:09.130 --> 15:11.610
往往使用的就是CSS应介式

15:11.610 --> 15:13.010
因为它不只是CSS

15:13.010 --> 15:14.210
你没法写样式表

15:14.410 --> 15:15.690
你只能写介式对象

15:16.130 --> 15:17.650
那么可以通过一些框架

15:17.650 --> 15:19.810
它会把介式对象转换成

15:20.050 --> 15:21.810
介面的表现形式

15:21.810 --> 15:23.970
当然它肯定不是一拖于CSS的

15:24.370 --> 15:25.730
它就用把它转换一下

15:26.370 --> 15:27.170
明儿这是什么

15:27.170 --> 15:30.570
以后你们学习到移动端的时候就知道了

15:30.730 --> 15:32.770
现在不用去了解一下就行了

15:32.770 --> 15:33.770
了解一下这个额点

15:33.930 --> 15:36.170
因为它是可以没有CSS的

15:36.250 --> 15:37.250
只有介式都可以

15:38.570 --> 15:40.210
但是它不好的地方在哪呢

15:40.370 --> 15:42.610
它输写的不是很方便

15:42.850 --> 15:43.690
不是很方便

15:43.810 --> 15:45.890
你说写这个玩意儿肯定没有写

15:45.890 --> 15:47.130
它灵活是灵活

15:47.290 --> 15:49.130
它没有写样式表那么方便

15:49.130 --> 15:50.090
这是一个

15:50.370 --> 15:51.170
另外一个

15:51.170 --> 15:53.530
它会在页面中增加大量的荣誉内容

15:53.530 --> 15:53.970
什么意思

15:54.170 --> 15:55.050
你看我们页面中

15:55.050 --> 15:56.010
所以所有的样式

15:56.090 --> 15:58.090
就是我们现在写的是页面

15:58.210 --> 15:59.610
并不是手机应用程序

15:59.810 --> 16:00.610
写的是页面

16:00.690 --> 16:02.250
那么如果说你用页面的时候

16:02.370 --> 16:04.530
你往往会把这个样式加到style里面

16:04.770 --> 16:07.450
往往会增加很多的这种荣誉的代码

16:07.610 --> 16:08.330
这个荣誉的代码

16:08.330 --> 16:11.130
它并不会导致我们的原代码发生荣誉

16:11.130 --> 16:12.410
原代码是没有荣誉的

16:13.130 --> 16:15.570
但是最终在页面上出现这个代码

16:15.570 --> 16:16.610
就很难阅读了

16:16.610 --> 16:17.730
就不太容易阅读

16:17.970 --> 16:19.410
看上去很有恶心

16:19.610 --> 16:20.490
就是这么个意思

16:21.290 --> 16:24.050
所以说它也有不好的地方

16:24.890 --> 16:26.650
这是关于CSS应接识

16:26.650 --> 16:28.650
那么这个东西以后我们会用到

16:28.810 --> 16:31.330
什么时候学习移动端开发的时候

16:31.450 --> 16:32.130
就会用到

16:32.530 --> 16:33.970
那么到时候用到的时候你就知道了

16:33.970 --> 16:34.690
这个玩意儿

16:34.850 --> 16:36.450
可以玩出很多的花样出来

16:36.610 --> 16:37.210
各种花样

16:37.210 --> 16:38.490
你只要是个对象就行了

16:39.810 --> 16:40.090
OK

16:40.090 --> 16:43.970
这是另一种方式来解决冲突的问题

16:44.330 --> 16:45.450
来解决冲突的问题

16:45.730 --> 16:47.770
CSS应接识特别有意思

16:48.450 --> 16:48.730
OK

16:48.730 --> 16:49.490
现在学到良动了

16:49.570 --> 16:50.530
一种是命名约定

16:50.570 --> 16:52.890
一种是CSS应接识

16:53.130 --> 16:54.090
还剩下最后一种

16:54.090 --> 16:55.690
我们下节课再来看

