WEBVTT

00:00.000 --> 00:06.000
好了 Bible这一块的话 基本上就没了

00:06.000 --> 00:11.000
那么这一块来说一下 Bible 它如何跟这个 Webpack 来结合

00:11.000 --> 00:18.000
怎么结合呢 我都说了这个 Bible 它其实跟那个 Post-CSS 是不是差不多的

00:18.000 --> 00:25.000
那么这个 Bible 跟 Webpack 结合 就跟那个 Post-CSS 跟 Webpack 结合是一样的

00:26.000 --> 00:30.000
加一个loader 就完事了 什么loader呢 就是 Bibleloader

00:30.000 --> 00:34.000
其实呢 你在那个 Bible 的这个官方网站那里可以看到

00:34.000 --> 00:39.000
其实很多东西啊 你们越往后边学呢 就会越有这种感觉

00:39.000 --> 00:43.000
虽然说东西一大堆 但是他们的实现原理和思路都差不多

00:43.000 --> 00:49.000
这就是为什么我在讲课的时候呢 经常给大家说它的思路是什么

00:49.000 --> 00:52.000
原理是什么 并不是说大家一定要去自己写一个

00:52.000 --> 00:57.000
没有必要去自己写一个 其他干嘛呢 主要是能够帮助你去理解其他技术

00:57.000 --> 01:02.000
你看我们学了 Post-CSS 之后再学 Bible 就差不多的 就没有什么难得了

01:02.000 --> 01:08.000
好 我们看一下 Bible Webpack 里边点设置啊 这是不是官方网站 它的中文嘛

01:08.000 --> 01:12.000
点设置的时候呢 你就会看到啊 它下面就问你

01:12.000 --> 01:16.000
你想怎么样使用这个 Bible呢 你就告诉他 他下面有一个

01:16.000 --> 01:20.000
我想使用 Build Systems 就是我们的勾结工具

01:20.000 --> 01:23.000
这里边问你这么多勾结工具 对吧 我们之前也说过

01:23.000 --> 01:27.000
勾结工具有很多 只不过呢 目前我们最常见的是 Webpack

01:27.000 --> 01:31.000
那么你就点一下 Webpack 他就跟你说了 怎么用呢

01:31.000 --> 01:36.000
怎么用呢 你安装一个 Bible Loader 再安装一个 Bible Core

01:36.000 --> 01:39.000
因为这个东西呢 是它的核心库 它里边有 API 的

01:39.000 --> 01:43.000
那么这个玩意呢 实际上是在调它里边的 API

01:43.000 --> 01:47.000
那么你安装这两个库 然后用的时候呢 无非就加一个规则

01:47.000 --> 01:51.000
反而是遇到介绍嘛 不要把之前的又忘了啊

01:51.000 --> 01:57.000
之前呢 我们说过那个编译过程 这个是最最最最重要的

01:57.000 --> 02:00.000
就咱们这门客 最重要的就是个编译过程

02:00.000 --> 02:04.000
编译过程里边 不是有这么一个玩意吗 叫做它

02:04.000 --> 02:07.000
那个总过程啊 就这样

02:07.000 --> 02:11.000
它在编译的时候说读去魔幻文件 对吧 读过魔幻文件

02:11.000 --> 02:15.000
然后呢 进行语法书分析 对不对

02:15.000 --> 02:18.000
那我们的夹载器在哪呢 夹载器

02:18.000 --> 02:22.000
我们还要回到夹载器那一块 楼子 夹载器

02:22.000 --> 02:27.000
那夹载器在哪呢 夹载器无非就是在这个位置

02:27.000 --> 02:30.000
读去了文件内容之后呢 处理楼子

02:30.000 --> 02:33.000
那么在 Bible 里边 你使用了一个 Bible Loader 夹载器

02:33.000 --> 02:37.000
那么反而是遇到介绍结尾的文件

02:37.000 --> 02:40.000
它就会先交给 Bible Loader 来进行处理

02:40.000 --> 02:43.000
处理完了 过后返回的结果 是不是还是一个介绍时代嘛

02:43.000 --> 02:45.000
对吧 编译之后的结实代嘛

02:45.000 --> 02:48.000
然后呢 为PAC再对它们进行的 何必

02:48.000 --> 02:53.000
这就完事了 那来吧 试一试吧 试一试

02:53.000 --> 02:55.000
这一课其实特别简单 特别简单

02:55.000 --> 02:58.000
就是运往后边学的 我们学技术就是这样子

02:58.000 --> 03:01.000
运往后边学你会发现越来越简单 越来越简单

03:01.000 --> 03:06.000
但是前提条件 你前边 基础部分 原力部分

03:06.000 --> 03:09.000
多花点时间 前边花的时间越多

03:09.000 --> 03:12.000
你基础导的越扎实 后面就越来越简单

03:12.000 --> 03:17.000
你说我现在 像我们当老师的这么多年开发经验

03:17.000 --> 03:20.000
到现在还怕新技术吗 就完全不怕新技术了

03:20.000 --> 03:25.000
因为因为你看 总能找到跟之前有差不多类似的这种方式

03:25.000 --> 03:30.000
这都差不多的 然后来吧 安装那个 WebPAC

03:30.000 --> 03:34.000
像这些名字旺 这些酷的名字旺 这些都是小事

03:34.000 --> 03:36.000
都是小事 我也经常忘

03:36.000 --> 03:41.000
然后来吧 我也不去安装别的了 就来个 Bible

03:41.000 --> 03:46.000
core 核心库 然后再来个 Bible

03:46.000 --> 03:49.000
loader 安装 让它安装着吧

03:49.000 --> 03:52.000
这里我们写上一个 WebPAC

03:52.000 --> 03:54.000
叫 config.js

03:54.000 --> 03:59.000
marge.export

03:59.000 --> 04:00.000
来吧

04:00.000 --> 04:04.000
mode development

04:04.000 --> 04:07.000
然后把 source map 打开吧

04:07.000 --> 04:09.000
打开这个 source map 主要的目的呢

04:09.000 --> 04:11.000
让大家看得清楚一点 不然的话

04:11.000 --> 04:13.000
它是把代码放到 Aval

04:13.000 --> 04:16.000
Aval 里面 那么就太容易看得清楚了

04:16.000 --> 04:19.000
然后呢 再写报就

04:19.000 --> 04:21.000
给它一个 U

04:21.000 --> 04:23.000
Rose

04:23.000 --> 04:25.000
然后呢 接下来是

04:25.000 --> 04:27.000
要来

04:27.000 --> 04:30.000
是一届是结尾

04:30.000 --> 04:32.000
然后交给 use

04:32.000 --> 04:34.000
又是又是又是

04:34.000 --> 04:36.000
又是什么呢

04:36.000 --> 04:38.000
就一个

04:38.000 --> 04:40.000
一个的话就不用学数组了

04:40.000 --> 04:42.000
Bibleloader

04:42.000 --> 04:44.000
没了 没了 没了

04:44.000 --> 04:46.000
来吧 我们来试一下

04:46.000 --> 04:48.000
src

04:48.000 --> 04:51.000
然后呢 这里面新建一个文件吧

04:51.000 --> 04:53.000
新建个文件

04:53.000 --> 04:55.000
然后在这里面呢

04:55.000 --> 04:57.000
我们使用

04:57.000 --> 04:59.000
不用 import

04:59.000 --> 05:01.000
就直接来一个 class

05:01.000 --> 05:03.000
或者是来个建筒函数吧

05:03.000 --> 05:04.000
建筒函数

05:04.000 --> 05:06.000
funk

05:06.000 --> 05:07.000
funk

05:07.000 --> 05:09.000
然后呢 输出

05:09.000 --> 05:10.000
abc

05:10.000 --> 05:11.000
行了

05:11.000 --> 05:13.000
然后呢 调整一下建筒函数

05:13.000 --> 05:15.000
funk

05:15.000 --> 05:17.000
然后呢 来打包一下 试一下吧

05:19.000 --> 05:21.000
npxwpack 打包一下

05:21.000 --> 05:23.000
你看一下 它有没有把它

05:23.000 --> 05:25.000
进行转换

05:25.000 --> 05:26.000
有没有转换

05:26.000 --> 05:28.000
好 看一下最终生成的代码

05:29.000 --> 05:31.000
你看 我们的 Index 设计员

05:31.000 --> 05:33.000
没有转换

05:33.000 --> 05:35.000
没有转换

05:35.000 --> 05:37.000
那我们看一下

05:37.000 --> 05:39.000
为啥没有转换呢

05:39.000 --> 05:41.000
哦 对了

05:41.000 --> 05:43.000
你看 你用着用着也突然又忘了

05:43.000 --> 05:45.000
Bible这一块呢

05:45.000 --> 05:47.000
它本身是没有做任何转换的

05:47.000 --> 05:49.000
因为Bible它要转换

05:49.000 --> 05:51.000
它是不是要用一些插件啊

05:51.000 --> 05:53.000
预设啊 这些东西对吧

05:53.000 --> 05:55.000
所以说呢 我们还得给它加一个预设

05:55.000 --> 05:57.000
那就是我们之前学习的预设

05:57.000 --> 05:59.000
我们当时用的是啥预设

05:59.000 --> 06:01.000
好像 present

06:01.000 --> 06:03.000
就不能叫 present

06:03.000 --> 06:05.000
present

06:05.000 --> 06:06.000
nf

06:06.000 --> 06:07.000
好 来安装一下吧

06:07.000 --> 06:09.000
npm i

06:09.000 --> 06:10.000
很刚的

06:10.000 --> 06:12.000
叫做

06:12.000 --> 06:14.000
bible

06:14.000 --> 06:16.000
present

06:16.000 --> 06:18.000
nf

06:18.000 --> 06:20.000
应该是这个 安装

06:20.000 --> 06:22.000
那么我们把上节课

06:22.000 --> 06:24.000
配置啊 还是 browser list

06:24.000 --> 06:26.000
对这些东西啊 直接复制过来

06:26.000 --> 06:27.000
因为这些东西呢

06:27.000 --> 06:29.000
它本身不是 Webpack 读取的

06:29.000 --> 06:31.000
Bible的一个预设

06:31.000 --> 06:33.000
叫做 present

06:33.000 --> 06:35.000
nf

06:35.000 --> 06:36.000
对吧

06:36.000 --> 06:38.000
OK 那么把它安装进来

06:38.000 --> 06:39.000
然后呢 这里把它加上

06:39.000 --> 06:40.000
加上这两个配置

06:40.000 --> 06:41.000
那么它在

06:41.000 --> 06:42.000
bible

06:42.000 --> 06:43.000
那么这里呢

06:43.000 --> 06:44.000
这个loader在转换的时候呢

06:44.000 --> 06:46.000
它调用的是 BIBLE API

06:46.000 --> 06:47.000
BIBLE API 里边

06:47.000 --> 06:49.000
它会使用这里的配置文件

06:49.000 --> 06:51.000
配置文件里边 配置了一个预设

06:51.000 --> 06:52.000
那么这个预设里边呢

06:52.000 --> 06:54.000
它就会用到这个 browser list

06:54.000 --> 06:55.000
好 是吧

06:55.000 --> 06:59.270
就完了 咱们来看一下吧

06:59.270 --> 07:02.220
打包

07:02.220 --> 07:03.220
打包完成

07:03.220 --> 07:04.220
最后呢 我们看一下

07:04.220 --> 07:05.220
made.js

07:05.220 --> 07:07.220
你看 是不是变成那个普通的

07:07.220 --> 07:09.220
函数了 对吧

07:09.220 --> 07:11.220
而且呢 像你用什么

07:11.220 --> 07:13.220
当然呢 这里边还有很多

07:13.220 --> 07:15.220
还有很多你要去考虑

07:15.220 --> 07:17.220
比方说 你要用到一些

07:17.220 --> 07:19.220
Promise API 对不对

07:19.220 --> 07:20.220
Promise

07:20.220 --> 07:22.220
你要用到一些Promise API

07:22.220 --> 07:23.220
Resolve

07:23.220 --> 07:24.220
什么什么什么

07:24.220 --> 07:25.220
我这里随便写吧

07:25.220 --> 07:26.220
Resolve

07:26.220 --> 07:27.220
你要用到这些 API

07:27.220 --> 07:28.220
或者是

07:28.220 --> 07:30.220
你要用到一个什么 Async

07:30.220 --> 07:31.220
这些函数 对吧

07:31.220 --> 07:34.220
一些 Async 方式

07:34.220 --> 07:35.220
Massure

07:35.220 --> 07:38.220
用到这种类似的函数

07:38.220 --> 07:39.220
那么像这些东西呢

07:39.220 --> 07:41.220
是不是要对这些语法

07:41.220 --> 07:43.220
用 API 来模拟 对吧

07:43.220 --> 07:44.220
要加入一些 API

07:44.220 --> 07:46.220
要加入一些新的语法来转换

07:46.220 --> 07:47.220
那么像这些东西呢

07:47.220 --> 07:49.220
你是不是要安装额外的东西

07:49.220 --> 07:50.220
比方说你现在直接

07:50.220 --> 07:51.220
微拍打包

07:51.220 --> 07:53.220
是不是它就爆错了 对吧

07:53.220 --> 07:54.220
分析不出来

07:54.220 --> 07:56.220
你看 Error 分析不出来

07:56.220 --> 07:57.220
那么这个时候

07:57.220 --> 07:58.220
我们之前讲过了 在预设这里

07:58.220 --> 08:00.220
是不是你还在安装一些啥

08:00.220 --> 08:02.220
安装 CoreJS

08:02.220 --> 08:04.220
Regenerate Wrong Time

08:04.220 --> 08:05.220
对不对

08:05.220 --> 08:06.220
那么安装一下吧

08:06.220 --> 08:09.220
NPMI 很刚的

08:09.220 --> 08:11.220
叫它

08:11.220 --> 08:13.220
CoreJS

08:13.220 --> 08:15.220
CoreJS

08:15.220 --> 08:17.220
以及呢

08:17.220 --> 08:20.540
这附近想法

08:20.540 --> 08:21.540
这些东西我要去记一下

08:21.540 --> 08:22.540
我都吃饱撑着

08:22.540 --> 08:24.540
我干嘛去记一下

08:24.540 --> 08:28.740
安装一下

08:28.740 --> 08:29.740
安装好了之后呢

08:29.740 --> 08:30.740
它就能对这些

08:30.740 --> 08:32.740
特殊的语法进行转换了

08:33.740 --> 08:34.740
像这个 Async 关键字

08:34.740 --> 08:36.740
那么它会把它转换成 API 的格式

08:36.740 --> 08:37.740
像这个 Promise

08:37.740 --> 08:38.740
它有可能

08:38.740 --> 08:39.740
地板门的流量器

08:39.740 --> 08:40.740
它没有这样的 API

08:40.740 --> 08:41.740
OK 它会给你

08:41.740 --> 08:43.740
做出这么一个构造函数出来

08:43.740 --> 08:44.740
好 OK

08:44.740 --> 08:46.740
那么现在我们再打包

08:46.740 --> 08:47.740
NPA 微拍

08:47.740 --> 08:49.740
跟之前是一样的

08:49.740 --> 08:50.740
无非就是加了一个 Bible

08:50.740 --> 08:51.740
Window的

08:51.740 --> 08:52.740
如此而已

08:52.740 --> 08:53.740
好 打包完成

08:53.740 --> 08:54.740
你看一下

08:54.740 --> 08:56.740
你看一下

08:56.740 --> 08:58.740
它是不是把 CoreJS 里边的东西

08:58.740 --> 08:59.740
也给你打包进来了

08:59.740 --> 09:01.740
对吧 因为你用到了 CoreJS

09:02.740 --> 09:03.740
那么这里边你看到

09:03.740 --> 09:05.740
代码会变得非常非常多

09:05.740 --> 09:06.740
为什么呢

09:06.740 --> 09:08.740
因为它要模拟出一些 API 出来

09:08.740 --> 09:09.740
一般来比方说

09:09.740 --> 09:10.740
一些 9% 的流量器

09:10.740 --> 09:11.740
它是没有这个 Promise的

09:11.740 --> 09:12.740
没有这个 Promise

09:12.740 --> 09:14.740
它是不是得给你做一个

09:14.740 --> 09:15.740
所以把要把一个 Promise 的

09:15.740 --> 09:16.740
构造函数给你写一遍

09:16.740 --> 09:17.740
对不对

09:17.740 --> 09:19.740
那么它会给你加进去

09:19.740 --> 09:21.740
我们的 Index 里边代码其实不多

09:21.740 --> 09:23.740
就这么一些

09:23.740 --> 09:25.740
就这么一段代码

09:25.740 --> 09:26.740
就是 Index 里边代码

09:26.740 --> 09:27.740
并不多

09:27.740 --> 09:28.740
只不过呢

09:28.740 --> 09:30.740
它为了建立模拟出一些 API

09:30.740 --> 09:32.740
那么它加入了一些别的东西

09:32.740 --> 09:34.740
ok 这就是

09:34.740 --> 09:35.740
Bible

09:35.740 --> 09:36.740
它的

09:36.740 --> 09:38.740
在 Webpack 里边的用法

09:38.740 --> 09:39.740
好 其他都没了

09:39.740 --> 09:40.740
没了

09:40.740 --> 09:41.740
如果说你要用到

09:41.740 --> 09:42.740
我们之前上节课

09:42.740 --> 09:43.740
学的一个插件的话

09:43.740 --> 09:44.740
你自己去用就行了

09:44.740 --> 09:46.740
是一样的

09:46.740 --> 09:48.740
这就是如何在 Webpack 里边

09:48.740 --> 09:49.740
使用 Bible

09:49.740 --> 09:50.740
那么至此

09:50.740 --> 09:51.740
本章的东西

09:51.740 --> 09:52.740
基本上就结束了

09:52.740 --> 09:53.740
后边呢

09:53.740 --> 09:54.740
会有一节课

09:54.740 --> 09:55.740
就是本章的

09:55.740 --> 09:56.740
下面还有一节课

09:56.740 --> 09:57.740
那节课是扩展课程

09:57.740 --> 09:59.740
大家有兴趣的同学来看一下

09:59.740 --> 10:00.740
主要是看一下

10:00.740 --> 10:02.740
Bible 它是如何来对一些

10:02.740 --> 10:03.740
新语法进行转换的

10:03.740 --> 10:04.740
有兴趣的同学看一下

10:04.740 --> 10:06.740
那一块可能有点难度

10:06.740 --> 10:07.740
不过你不看的话

10:07.740 --> 10:09.740
也不会影响后边的学习

10:09.740 --> 10:10.740
我说不会影响

10:10.740 --> 10:11.740
它一定不会影响

10:11.740 --> 10:12.740
大家放心

