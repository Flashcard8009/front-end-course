WEBVTT

00:00.820 --> 00:04.220
好 学了这么多东西了啊 咱们来做个练习

00:04.920 --> 00:09.820
做个什么练习呢 这里呢有一个静态页面啊 这个静态页面的css已经写好了啊

00:10.320 --> 00:15.320
一密集元素一密集啊 一密集这个图片啊 也有了

00:15.820 --> 00:21.520
然后这里有两个页面 所以说我们这里开发的是一个多页应用程序啊 多个多个页面的

00:21.920 --> 00:24.420
这两个页面咱们来看一下啊 有一个列表页

00:25.220 --> 00:28.320
列表页咱们呢 看一下吧 列表页

00:29.320 --> 00:36.120
做的 我很做的很简单啊 就是这里有一个图片啊 然后这里呢显示一些省份啊 显示一些省份

00:36.920 --> 00:41.920
好 然后呢有个detail啊 detail 就是详情页 详情页 咱们来看一下吧

00:43.520 --> 00:48.020
啥意思啊 就是显示一个省份啊 下面的有哪些城市啊 啥意思呢 就是说

00:48.420 --> 00:51.520
这里的一个样式有没有关啊 我对这瞎写的

00:52.220 --> 00:55.820
这里就是点击这个省份 它会挑转到啊 这个页面

00:56.020 --> 01:01.420
然后把个省份名字显示出来 然后把这个省份下面啊 拥有的一些城市啊 给它显示出来

01:01.920 --> 01:03.820
咱们就做这么一个效果 ok

01:05.320 --> 01:11.320
好 那么要实现这样的效果啊 我们的工程在哪呢 我们要在这个文念甲下面啊 达建我们的工程

01:11.620 --> 01:16.220
我们要使用webpack 能不能不使用webpack呢 用传统的方式做啊 肯定可以啊

01:16.520 --> 01:21.420
你在这个页面上去写戒业史去引用它 但是写个戒业史在这个页面去引用它 自己去搞定

01:22.020 --> 01:27.220
只不过呢 我们既然学到webpack啊 要用工程把它当 虽然它不是一个大项目

01:27.520 --> 01:32.020
一个非常非常小 一个甚至是都不能像算项目了 应该是一个练习啊

01:32.420 --> 01:37.920
尽管了我们以小伯大啊 从小去看大项目的这种情况 把它当成一个大项目

01:38.320 --> 01:43.420
那么因此呢 我们要用工程的方式来达建它 好 来吧 这里边打开啊 这边关电器

01:44.420 --> 01:52.020
好 接下来我们首先干嘛 在这里用npm init啊 初识化一下

01:53.620 --> 01:57.220
啊 这样取个名字吧啊 而rear

01:58.620 --> 02:02.020
啊 区域工程啊 好

02:03.020 --> 02:04.620
然后呢 安装什么呢 安装

02:05.620 --> 02:12.420
webpack cd 对吧 安装这两个 好 安装 接下来呢 我们

02:13.620 --> 02:19.820
呦 听听听 听听听 听听听 这个地方要先进入工程那个文件夹啊

02:21.020 --> 02:26.620
先进入这个文件夹 我是在这里边做的对吧 把这个加进去吧

02:27.720 --> 02:33.220
加进去 ok 那么这个时候呢 我们再重新安装npm i 钢地webpack

02:34.120 --> 02:36.820
webpack cd 好 那么安装吧

02:38.520 --> 02:43.120
好 接下来呢 我们在这里边呢 就去建立首先建立一个文件夹啊

02:43.120 --> 02:50.920
src 对吧 然后呢 我们再建立一个文件夹public 就是我们的一些模办啊 也听们模办啊 和一些静态资源文件放到这里边

02:51.520 --> 02:56.320
好 我们的静态一边呢 就静态资源呢 我们就全部复制拖到哪 是不是拖到public里面来

02:57.120 --> 02:58.720
啊 我们常见的做法 呦呦呦

02:59.820 --> 03:05.320
我这样子 不行 要复制说 要复制单贴 ok 好 这样子拖进来啊

03:06.020 --> 03:11.020
好 加进来过后呢 接下来我们是不是要写配置文件了 对不对 是不是要写配置文件啊

03:12.020 --> 03:16.620
好 写配置文件的时候呢 我们这里就要考虑了 因为我们这个工程呢 是一个大项目

03:17.020 --> 03:22.820
大项目呢 我们打包的时候呢 有两种环境 一个是生产环境呢 一个是开发环境 对吧

03:23.420 --> 03:26.420
开发环境下和生产环境下呢 他们有不同的打包方式

03:27.120 --> 03:32.420
于是呢 我们这里呢 就可以写出来这么一个配置文件啊 就是webpack

03:33.920 --> 03:38.820
第二 什么config 第二介绍 这个配置文件里面呢 我们导出marge

03:39.820 --> 03:46.020
叫export 导出什么呢 导出一个函数 还记得吗 我们是不是这样子玩过的 导出一个函数

03:46.420 --> 03:52.020
这个函数里边呢 有一个环境 我们是要根据环境来进行判断 对吧 根据环境来进行判断

03:52.320 --> 03:59.320
好 这里呢 记得这个环境哪来的呢 还记得吗 这些东西 记不得的话 我们就回过一下吧 就顺便用这个链接回过一下

03:59.620 --> 04:03.620
这个环境是哪来的呢 是我们用命令给它传进去了 比方说我们这里有个命令

04:04.620 --> 04:12.820
当我们进行webpack打包的时候 我们可以给它传一个环境

04:14.820 --> 04:21.220
传一个环境prod 表示是生产环境 当然如果说开发环境的话 我们就不传

04:22.020 --> 04:29.320
好 如果说是生产环境的话 那么就是build 对吧 生产环境 那么我们打包的时候呢 给它传一个变量

04:30.320 --> 04:33.720
prod 对不对 我们是不是可以通过这种方式来去完成

04:34.920 --> 04:42.520
好 那么这边我们怎么来写呢 是不是可以判断 判断一下 如果说m存在 并且m是prod 是不是生产环境

04:44.730 --> 04:49.130
生产环境 else 是不是开发环境

04:50.030 --> 04:55.930
开发环境 那么在不同的情况下呢 我们去使用不同的配置文件

04:56.930 --> 05:03.730
而且呢 生产环境和开发环境呢 他们本身有一些相同的配置 那么我们就写再写三个配置文件 一个呢 是webpack

05:04.330 --> 05:06.130
叫dev 叫js

05:08.530 --> 05:19.130
再复制一个啊 一个是webpack 呢 第二prod production 叫js 还有一个呢 是webpack base 这是我们干过的这些事情啊 叫js

05:19.730 --> 05:21.930
那么这个里边呢 公共配置

05:22.930 --> 05:28.030
就所有的配置都通用的啊 公共配置 无论是生产环境还是开发环境都通用的 那么这里边我导出

05:28.930 --> 05:29.930
导出export

05:31.130 --> 05:37.330
导出公共配置啊 先什么都不写 然后呢 dev里边呢 我们导出module export

05:38.210 --> 05:41.930
这个是打个主持啊 这个是生产环境

05:42.930 --> 05:45.330
生产环境 这个是开发环境

05:46.930 --> 05:51.730
开发环境啊 这个prod呢 是生产环境

05:53.330 --> 05:56.530
导出module export 我写的比较详细啊

05:58.530 --> 06:04.730
如果说你们以后开发中项目没有那么大 只是生产环境呢 开发环境差不多 没有必要了

06:05.130 --> 06:09.330
平时可以打包的时候呢 稍微改一改就行了 我这里呢是用这种方式

06:10.330 --> 06:16.730
好 那么这里有多这么多配置文件了 对吧 有什么dev proud base对吧 有这么一些配置文件了

06:17.930 --> 06:24.330
好 接下来呢 我们来再看 那我带我们这个使用的 真正使用的这个配置文件里边 我们是不是要导入

06:24.930 --> 06:28.730
对吧 来一个是什么base config

06:29.730 --> 06:30.930
let's do it now require

06:31.930 --> 06:35.730
warepack 第二什么呢 base

06:36.930 --> 06:40.130
不用写后边了啊 三个一个是dev

06:41.230 --> 06:42.230
开发环境

06:43.330 --> 06:50.930
这里是dev.dev 一个是生产环境prod config 这里是prod ok

06:51.730 --> 06:59.730
是不是写好了 那么生产环境里边我们干嘛呢 我们生产环境里边就可以玩这种干这种事情 首先我们把基本导入进来啊

07:00.230 --> 07:02.230
基本就这样子 生产环境呢 我们就返回

07:03.830 --> 07:07.330
返回个对象 展开什么呢 展开base config

07:08.330 --> 07:10.630
然后呢 再用dev config去覆盖

07:12.330 --> 07:14.930
而生产环境用prod config去覆盖 对吧

07:15.830 --> 07:21.530
好 开发环境呢 我们就这样子写base config 这里用dev config去覆盖啊 秋叢简单啊 没了

07:22.030 --> 07:26.630
那么这个这个配置文件就写完了 这个配置文件来自于别的配置文件的配置啊 就这么回事

07:27.630 --> 07:34.030
好 那么我们来写 首先呢 开发环境里边肯定有一个差异啊 mode不一样对不对 development

07:34.530 --> 07:40.930
开发环境 那么prod呢 肯定是mode production 对不对 这两个肯定是不一样的

07:41.530 --> 07:46.930
好 咱们来试一下吧 别人写了半天 都还没有测试 试一下 看行不行

07:47.930 --> 07:51.530
我们这里随便写一个 应该是了解识 随便写一个

07:52.030 --> 07:57.230
OK 那么这里呢 我们就利用npm run dev

07:59.030 --> 07:59.330
运行

08:00.830 --> 08:05.830
好 打包完成 你看 是不是生产环境啊 开发环境啊 又来啊

08:06.830 --> 08:09.230
npm run build

08:10.630 --> 08:11.630
好 这么这这就是

08:12.830 --> 08:16.930
生产环境啊 刚才是开发环境 这是生产环境 你看 是不是搞定了 对吧

08:17.430 --> 08:21.230
OK 那么接下来我们就用这种配置 那么这个配置就不用动了

08:21.930 --> 08:27.930
对吧 我们配置写到了 公共配置写着开发环境写着生产环境写着OK 这样子写

08:29.730 --> 08:39.930
好 那么这里呢 我们一点点来啊一点点来 首先呢 他们也是打包的时候呢 输出东西太多了 所以说呢 我们在bass里边呢 可以控制一下啊 可以控制一下 比方说stands

08:40.630 --> 08:46.130
对吧 Marjus 把它设为什么force 加上一个color 是吗 设为true

08:47.830 --> 08:56.480
带点颜色 现在bill的一下 这样子输出的东西呢就少一点啊 没有那么乱啊 没有那么乱

08:57.280 --> 09:03.580
ok 这是关于这一块 好 接下来呢 我们再来再来规划一下啊 东西要做的事情很多 不着急啊 咱们一步一步来

09:04.480 --> 09:09.480
呃 首先呢 我们要搞定的是页面模板 对吧 他这里没有页面

09:10.280 --> 09:15.280
啊 我们 先不着急啊 不着急 写页面模板 我们这里先规划一下我们的gs

09:15.880 --> 09:26.880
就是我们生成的gs gs呢 我不要直接放到这 我们要做什么样的模式呢 我要做成一种单页 每一个页面 因为我们这里有两个页面嘛 对吧 每一个页面呢 对应一个gs

09:27.280 --> 09:32.080
是不是要有写两个trunk啊 我们到bass里边去啊 公共配置啊 我们写n去

09:33.880 --> 09:37.080
两个入口啊 两个入口 哪两个入口呢

09:38.080 --> 09:43.280
第一个入口呢 我们给他取名为nest啊 表示我们的列表页啊 列表页这个trunk

09:43.880 --> 09:50.480
好 那么他的入口在哪呢 他的入口文件是在啊 src下边的啊 nest

09:51.680 --> 09:57.880
下边的index的gs啊 在这 我们比方说啊 src 我们建两个文件夹 nest

09:59.080 --> 10:01.080
列表页的gs这个呢 是

10:02.480 --> 10:08.280
这个地方呢 是detail详情页的gs啊 有两个gs 好 那么这里边呢 有个index的gs

10:09.280 --> 10:15.280
好 这个里边呢 有个index的gs 好 那么外边的index的gs没用了 没用了

10:15.480 --> 10:19.080
我们把它写成这种结构 因为有两个页面嘛 我们要分开给他们写gs

10:19.480 --> 10:25.680
好 这里呢 我就写两个入口啊 把它用起来 列事里边index的gs 这是这个trunk

10:26.680 --> 10:29.280
好 然后呢 另一个trunk呢 是detail

10:30.280 --> 10:34.280
有两个gs啊 这里呢 来自于src detail

10:35.280 --> 10:41.280
然后呢 index的gs 好 这里有两个 对吧 好 我们这里呢 写了两个入口

10:42.280 --> 10:49.280
有了两个入口过后 是不是要配置出口 对吧 Output 配置出口 好 出口里边呢 我们给他订一个文件名的规则

10:50.280 --> 10:55.280
什么规则呢 我们把它放到哪呢 把它放到script文件夹下面 把它放到这里边啊 这边去运行

10:55.880 --> 11:00.280
好 那么这里边我们文件名是啥呢 文件名我们可以用这种啊nam

11:01.280 --> 11:04.280
哈西啊 用trunk哈西吗 trunk哈西

11:05.680 --> 11:08.080
第二gs 我们用这个东西来作为文件名

11:09.480 --> 11:17.080
没问题吧 应该没问题啊 好 那么接下来啊 目录的话就用这个电视目录吧 我们也不去改它 好 再来试一下

11:17.680 --> 11:25.420
run build 好 搞定了 对吧 是不是放到这里来了 对吧 有两个gs 对不对 好 两个trunk

11:26.020 --> 11:30.820
好 但是现在呢 还有一个 当然现在是生产模式啊 生产环境啊 所以说他的

11:31.820 --> 11:34.820
代码呢 就是把他换好 否刑去掉过了

11:35.420 --> 11:37.420
好 然后呢 我们现在呢 还有一个问题就是

11:37.920 --> 11:43.620
当我们那种改过过后 你看这个电视目录是不是没有清空啊 没有清除 那么我们这里是不是可以用一个第三方的插件

11:44.520 --> 11:45.720
叫什么 叫做

11:47.620 --> 11:51.820
clean 清除wiped plugin 清除插件

11:52.620 --> 11:55.320
好 那么这个插件怎么用呢 我们在bass里边啊 因为他被

11:56.320 --> 12:02.320
这个生产无论是生产环境还是开发环境呢 他打包的时候都需要清除啊 所以说呢 我们在公共配置里边写

12:03.120 --> 12:08.120
导入叫做cleanwiped plugin

12:08.920 --> 12:13.120
导入进来啊 我记得好像是啊 这样子啊 我一点忘了

12:13.720 --> 12:18.120
好像是 不行的 我就开文档吧 这个忘了没关系啊 不行的 我看文档就行了

12:19.120 --> 12:23.920
是不是要把这个东西导入进来啊 这这这这节课的东西 大家下来一定要去做一次啊

12:24.420 --> 12:30.920
看到了 前面的学中东西忘完了 反正我们在学这门课 学这门课的时候你不去练习 过了这门课就很快就忘了

12:31.920 --> 12:39.430
这里呢 我们配置一下 plugins 另一个cleanwiped plugin

12:40.430 --> 12:44.930
没了 没了 帮我清空吧 好 再试一下啊再试一下

12:45.830 --> 12:48.730
npm run dev 来试dev

12:48.730 --> 12:53.130
你看是不是就清空了

12:53.130 --> 12:54.130
把之前的东西清空了

12:54.130 --> 12:55.130
对吧 只剩两个接式了

12:55.130 --> 12:58.130
好 那么对省部落清楚搞定了

12:58.130 --> 12:59.130
好 接下来呢

12:59.130 --> 13:01.130
我们还要把页面打包过去对吧

13:01.130 --> 13:02.130
要把页面打包过去

13:02.130 --> 13:03.130
那么页面打包过去呢

13:03.130 --> 13:05.130
我们要用什么插件

13:05.130 --> 13:07.130
我们要用这个

13:07.130 --> 13:10.130
NPMI 橫钢D 叫做

13:10.130 --> 13:11.130
叫啥呢?

13:11.130 --> 13:14.130
ATML Webpack Plugging

13:14.130 --> 13:16.130
我们要写页面模板

13:16.130 --> 13:17.130
好 那么这里呢

13:17.130 --> 13:19.130
我们就给它安装吧

13:19.130 --> 13:22.130
我们这里Const

13:22.130 --> 13:27.130
叫做ATML Webpack Plugging

13:27.130 --> 13:29.130
变两名字随便去

13:29.130 --> 13:33.130
Require ATML Webpack Plugging

13:33.130 --> 13:34.130
倒进来

13:34.130 --> 13:36.130
我也不知道我这里怎么回事

13:36.130 --> 13:38.130
工程文件一多了过后了

13:38.130 --> 13:40.130
它就老是智能提示出不来

13:41.130 --> 13:42.130
好 那么这里呢

13:42.130 --> 13:43.130
ATML Webpack Plugging

13:43.130 --> 13:45.130
接下来我们在这里用

13:46.130 --> 13:48.130
你用一个ATML Webpack Plugging

13:48.130 --> 13:49.130
是不是要传配置

13:49.130 --> 13:51.130
首先呢 搞算了模板在哪呢

13:51.130 --> 13:54.130
模板在我们的Public目度下面的

13:54.130 --> 13:56.130
这个

13:56.130 --> 13:58.130
首先我们搞进列表页

13:58.130 --> 14:00.130
Nest.ATML

14:00.130 --> 14:01.130
这个页面

14:01.130 --> 14:02.130
生存的文件名呢

14:02.130 --> 14:04.130
File Name

14:04.130 --> 14:05.130
文件名呢

14:05.130 --> 14:07.130
文件名呢 就有生存到

14:07.130 --> 14:08.130
Nest.ATML

14:08.130 --> 14:09.130
就生存到这

14:09.130 --> 14:11.130
好 这是第一个

14:11.130 --> 14:12.130
第一个打包的

14:12.130 --> 14:13.130
第二个呢

14:13.130 --> 14:15.130
我们要打包什么呢

14:15.130 --> 14:17.130
Detail

14:17.130 --> 14:18.130
对吧 有两个页面

14:18.130 --> 14:19.130
对吧 有两个页面

14:19.130 --> 14:21.130
它要生存两个页面

14:21.130 --> 14:23.130
OK 做搞定了

14:23.130 --> 14:24.130
好 接下来

14:24.130 --> 14:26.130
咱们来试一下

14:26.130 --> 14:27.130
Clear

14:27.130 --> 14:29.130
NPMZone

14:29.130 --> 14:31.130
看一下页面有没有过去

14:31.130 --> 14:35.400
你看 两个页面是不是过去了

14:35.400 --> 14:37.400
对吧 两个页面就过去了

14:37.400 --> 14:39.400
OK 没问题吧

14:39.400 --> 14:41.400
好 两个页面过去了

14:41.400 --> 14:43.400
但是解释发现有问题了

14:43.400 --> 14:45.400
因为它引用了两个解释

14:45.400 --> 14:47.400
每个页面把两个解释都用了

14:47.400 --> 14:49.400
我们希望是一个页面用自己的解释

14:49.400 --> 14:51.400
Detail用Detail的解释

14:51.400 --> 14:53.400
Nest用Nest的解释

14:53.400 --> 14:54.400
各用各的解释

14:54.400 --> 14:56.400
不要去两个都用

14:56.400 --> 14:57.400
因此我们这里呢

14:57.400 --> 15:01.400
需要是不是要给它控制一下创口

15:01.400 --> 15:02.400
你用哪个创口呢

15:02.400 --> 15:05.400
你就用那个叫做Nest这个创口

15:05.400 --> 15:07.400
用Nest这个创口

15:07.400 --> 15:09.400
好 这边

15:09.400 --> 15:11.400
你用哪一个呢

15:11.400 --> 15:13.400
那个就是Detail

15:13.400 --> 15:15.400
Detail这个创口

15:15.400 --> 15:17.400
这样子来控制一下

15:17.400 --> 15:22.980
咱们再来用Dip

15:22.980 --> 15:24.980
出来了

15:24.980 --> 15:25.980
好 今天让我们看一下

15:25.980 --> 15:27.980
Detail 是不是只有一个了

15:27.980 --> 15:29.980
对吧 是不是只有一个了

15:29.980 --> 15:31.980
Nest 是不是只有一个了

15:31.980 --> 15:33.980
好 那么这个事情是不是搞定了

15:33.980 --> 15:34.980
对不对

15:34.980 --> 15:36.980
一人用自己的解释

15:36.980 --> 15:38.980
好 现在我们继续看

15:38.980 --> 15:40.980
那我们的页面里边

15:40.980 --> 15:42.980
是不是引用了CSS对吧

15:43.980 --> 15:45.980
那么还有什么图片 对不对

15:45.980 --> 15:47.980
CSS里边有个背景图

15:47.980 --> 15:48.980
CSS你看一下

15:48.980 --> 15:50.980
好像在Nest里边用了个背景图

15:50.980 --> 15:51.980
对吧 用了个背景图

15:51.980 --> 15:52.980
那我是不是

15:52.980 --> 15:54.980
对吧 虽然说

15:54.980 --> 15:56.980
CSS的处理

15:56.980 --> 15:58.980
不应该是这种处理方式

15:58.980 --> 16:00.980
不应该在这个public模特下面

16:00.980 --> 16:02.980
以后有更好的处理方式

16:02.980 --> 16:04.980
我们到时候会专门用一个章节

16:04.980 --> 16:05.980
来谈CSS的工程化

16:05.980 --> 16:06.980
不过目前我们先不管

16:06.980 --> 16:07.980
CSS先不管

16:07.980 --> 16:10.980
我就这样子做成非常精彩的资源

16:10.980 --> 16:11.980
直接扔过去就行了

16:11.980 --> 16:13.980
就说我们打包的时候

16:13.980 --> 16:14.980
希望他把这两个文件夹个

16:14.980 --> 16:15.980
直接给我扔过去

16:15.980 --> 16:17.980
扔到这个目录下面去

16:17.980 --> 16:18.980
那用什么

16:18.980 --> 16:19.980
是不是要用那个东西

16:19.980 --> 16:22.980
叫做NPMI钢地

16:22.980 --> 16:25.980
叫Copy Webpack Plugging

16:25.980 --> 16:27.980
对吧 用来复制的

16:27.980 --> 16:28.980
用来复制的

16:28.980 --> 16:29.980
好 来吧

16:29.980 --> 16:30.980
Const

16:30.980 --> 16:33.980
Copy Webpack Plugging

16:33.980 --> 16:34.980
Require

16:34.980 --> 16:38.980
Copy Webpack Plugging

16:38.980 --> 16:39.980
对不对

16:40.980 --> 16:41.980
得用这个

16:41.980 --> 16:42.980
把它复制过去

16:42.980 --> 16:44.980
那么这个插件怎么用呢

16:44.980 --> 16:45.980
就来

16:45.980 --> 16:47.980
留一个Copy

16:47.980 --> 16:48.980
怎么用呢

16:48.980 --> 16:49.980
我都忘了怎么用了

16:49.980 --> 16:50.980
忘了怎么用了 查一下

16:52.980 --> 16:55.980
稍微一点点时间不用就忘了

16:55.980 --> 16:58.980
叫Copy Webpack

16:58.980 --> 16:59.980
就是你们以后

16:59.980 --> 17:00.980
真实的开发就是这样子

17:00.980 --> 17:01.980
忘了就查

17:01.980 --> 17:03.980
你只要出一个名字就行了

17:03.980 --> 17:04.980
你想嘛

17:04.980 --> 17:05.980
这个复制肯定是Copy嘛

17:05.980 --> 17:06.980
对吧

17:06.980 --> 17:07.980
你实在是找不到名字

17:07.980 --> 17:09.980
那里去看一下视频

17:09.980 --> 17:11.980
回过来看一下视频

17:11.980 --> 17:12.980
它怎么用呢

17:12.980 --> 17:13.980
这里传了个书主

17:13.980 --> 17:15.980
书主里面就是Copy规则

17:15.980 --> 17:16.980
行 我明白了

17:16.980 --> 17:18.980
书主里面就Copy规则

17:18.980 --> 17:19.980
咱们只有一个规则

17:19.980 --> 17:21.980
就从哪里复制到哪里呢

17:21.980 --> 17:26.980
从Public目录复制到哪儿呢

17:26.980 --> 17:28.980
复制到那个地神目录

17:28.980 --> 17:29.980
地神目录

17:29.980 --> 17:30.980
我看一下

17:30.980 --> 17:32.980
如果是这样子写的话

17:32.980 --> 17:34.980
如果说这样子写的话会怎么样

17:34.980 --> 17:35.980
好像它会在这里面

17:35.980 --> 17:36.980
去建一个地神目录

17:36.980 --> 17:37.980
好像这里就不用写了

17:37.980 --> 17:38.980
那么多

17:38.980 --> 17:39.980
就直接一个地神目录

17:39.980 --> 17:41.980
就是复制到地神目录下面的东西

17:41.980 --> 17:42.980
我看一下

17:42.980 --> 17:43.980
我记得好像是这样子

17:43.980 --> 17:45.980
有这个东西不用去申求

17:45.980 --> 17:46.980
就好像我这种心态

17:46.980 --> 17:47.980
无所谓

17:47.980 --> 17:48.980
我们测试一下就行了

17:48.980 --> 17:50.980
把它能够用起来就行了

17:50.980 --> 17:53.980
NPM run dev 看一下

17:53.980 --> 17:54.980
看能不能放过去

17:54.980 --> 17:58.000
过来了

17:58.000 --> 17:59.000
对吧

17:59.000 --> 18:00.000
过来了

18:00.000 --> 18:01.000
咱们这边

18:01.000 --> 18:02.000
是不是可以

18:02.000 --> 18:03.000
打开一下页面看一下

18:03.000 --> 18:04.000
看一下

18:04.000 --> 18:05.000
没问题

18:05.000 --> 18:07.000
net

18:07.000 --> 18:08.000
没问题

18:08.000 --> 18:09.000
是吧

18:09.000 --> 18:10.000
就过来了

18:10.000 --> 18:11.000
那么现在

18:11.000 --> 18:12.000
还差一个什么

18:12.000 --> 18:14.000
还差一个开发服务器

18:14.000 --> 18:16.000
能够打包完了过后

18:16.000 --> 18:17.000
开发阶段

18:17.000 --> 18:18.000
仅仅是在开发阶段

18:18.000 --> 18:20.000
那么完成过后

18:20.000 --> 18:21.000
它就可以把启动起来

18:21.000 --> 18:23.000
是不是可以把启动起来

18:23.000 --> 18:24.000
来吧

18:24.000 --> 18:26.000
我们安装一个

18:26.000 --> 18:29.000
叫做 webpack dev server

18:29.000 --> 18:31.000
然后我们更改一下

18:31.000 --> 18:33.000
更改一下这个

18:36.000 --> 18:37.000
拍给你点节省

18:37.000 --> 18:38.000
dev的时候

18:38.000 --> 18:39.000
我们运行的是

18:39.000 --> 18:41.000
webpack dev server

18:41.000 --> 18:43.000
运行的是这个

18:43.000 --> 18:44.000
没问题吧

18:44.000 --> 18:46.000
运行的是这个

18:46.000 --> 18:48.000
OK

18:48.000 --> 18:49.000
那么现在让它安装

18:49.000 --> 18:52.700
安装完成

18:52.700 --> 18:54.700
OK安装完成了

18:54.700 --> 18:55.700
那咱们试一下

18:55.700 --> 18:57.700
NPM run dev

18:57.700 --> 19:08.050
生成出来了吗

19:08.050 --> 19:09.050
生成出来了

19:09.050 --> 19:10.050
它在这

19:10.050 --> 19:11.050
但是它没有打开

19:11.050 --> 19:12.050
对吧

19:12.050 --> 19:13.050
没有打开页面

19:13.050 --> 19:14.050
没有打开页面

19:14.050 --> 19:15.050
那么这里

19:15.050 --> 19:16.050
我们需要配置一下

19:16.050 --> 19:17.050
因为它这个东西

19:17.050 --> 19:18.050
是跟开发相关的

19:18.050 --> 19:20.050
运行在开发环境下面的

19:20.050 --> 19:21.050
所以说我们在这里

19:21.050 --> 19:22.050
配置开发环境就行了

19:22.050 --> 19:23.050
生产环境不用去配置它

19:23.050 --> 19:24.050
配置什么呢

19:24.050 --> 19:26.050
dev server

19:26.050 --> 19:27.050
open

19:27.050 --> 19:28.050
去

19:28.050 --> 19:29.050
打开

19:29.050 --> 19:30.050
好 试一下

19:30.050 --> 19:36.910
run dev

19:40.290 --> 19:41.290
打开倒是打开了

19:41.290 --> 19:42.290
但是它不知道打开哪个页面

19:42.290 --> 19:43.290
因为这里有多个页面

19:43.290 --> 19:44.290
它默认打开的是index

19:44.290 --> 19:46.290
它默认打开这个地址

19:46.290 --> 19:47.290
默认打开的是这个地址

19:47.290 --> 19:48.290
所以说

19:48.290 --> 19:49.290
这个地址下面

19:49.290 --> 19:50.290
由于没有index的

19:50.290 --> 19:51.290
也听不懂

19:51.290 --> 19:52.290
打开

19:52.290 --> 19:53.290
所以说我们这里

19:53.290 --> 19:54.290
还配置一个open page

19:54.290 --> 19:55.290
open page

19:55.290 --> 19:56.290
打开什么呢

19:56.290 --> 19:58.290
打开nest

19:59.290 --> 20:01.290
nest

20:01.290 --> 20:03.290
我们默认进入列表页

20:03.290 --> 20:04.290
因为从列表页

20:04.290 --> 20:06.290
也可以点到那个详情页

20:06.290 --> 20:07.290
默认进入

20:07.290 --> 20:08.290
主要是为了开发条式的

20:08.290 --> 20:09.290
这个打开哪个页面

20:09.290 --> 20:10.290
都无所谓

20:10.290 --> 20:12.600
打开

20:12.600 --> 20:13.600
好 列表页

20:13.600 --> 20:14.600
是不是

20:14.600 --> 20:15.600
出来了

20:15.600 --> 20:16.600
对吧

20:16.600 --> 20:17.600
开发服务器

20:17.600 --> 20:18.600
好 那么这里

20:18.600 --> 20:19.600
我们再来思考一下

20:19.600 --> 20:21.600
因为开发服务器的话

20:21.600 --> 20:22.600
我们刚才

20:22.600 --> 20:23.600
地神目录下面有东西的

20:23.600 --> 20:24.600
对吧 有东西的

20:24.600 --> 20:25.600
但是

20:25.600 --> 20:26.600
由于我

20:26.600 --> 20:27.600
启动开发服务器的时候

20:27.600 --> 20:29.600
它是不是也要应用这些plugins

20:29.600 --> 20:30.600
是不是也要

20:30.600 --> 20:31.600
应用这些plugins

20:31.600 --> 20:32.600
那么这个

20:32.600 --> 20:33.600
是不是又要把新空

20:33.600 --> 20:34.600
对吧

20:34.600 --> 20:35.600
但是实际上

20:35.600 --> 20:36.600
开发服务器

20:36.600 --> 20:37.600
跟这个地神目录

20:37.600 --> 20:38.600
没有关系了

20:38.600 --> 20:39.600
对吧

20:39.600 --> 20:40.600
很多时候

20:40.600 --> 20:41.600
比如说

20:41.600 --> 20:42.600
我既要想看到

20:42.600 --> 20:43.600
地神目录下面的

20:43.600 --> 20:44.600
真实的文件结构

20:44.600 --> 20:45.600
又要想启动开发服务器

20:45.600 --> 20:46.600
那怎么办

20:46.600 --> 20:47.600
我就不要清空

20:47.600 --> 20:48.600
所以说

20:48.600 --> 20:49.600
这里我们往往的做法是

20:49.600 --> 20:50.600
在生产环境下边

20:50.600 --> 20:52.600
用这个开发环境的

20:52.600 --> 20:53.600
你就不要清空了

20:53.600 --> 20:54.600
你就不要清空了

20:54.600 --> 20:55.600
好 我们在这里

20:55.600 --> 20:57.600
开发环境里边

20:57.600 --> 20:58.600
我们就把它配置到

20:58.600 --> 21:00.600
生产环境里边

21:00.600 --> 21:01.600
把它配置到

21:01.600 --> 21:02.600
生产环境里边

21:02.600 --> 21:05.230
这些东西都是

21:05.230 --> 21:06.230
全是细节

21:06.230 --> 21:07.230
全是细节

21:07.230 --> 21:08.230
你看

21:08.230 --> 21:09.230
如果说你不care这个东西

21:09.230 --> 21:10.230
那就无所谓了

21:10.230 --> 21:11.230
那就无所谓了

21:11.230 --> 21:12.230
好 那么咱们看

21:12.230 --> 21:14.230
这里还会有问题

21:14.230 --> 21:15.230
这里clean

21:15.230 --> 21:19.270
这里

21:19.270 --> 21:20.270
你看这些东西

21:20.270 --> 21:21.270
都是灵活处理

21:21.270 --> 21:22.270
就是我们只有在

21:22.270 --> 21:23.270
生产环境下面

21:23.270 --> 21:24.270
打包的时候

21:24.270 --> 21:25.270
才会到电神目录

21:25.270 --> 21:26.270
我才需要去清空

21:26.270 --> 21:27.270
开发环境下面

21:27.270 --> 21:28.270
我运行开发服务器

21:28.270 --> 21:29.270
跟这个电神目录没关系

21:29.270 --> 21:30.270
他去清空干嘛呢

21:30.270 --> 21:31.270
没有必要清空

21:31.270 --> 21:32.270
我就是这个意思

21:32.270 --> 21:33.270
我说的就是这个意思

21:33.270 --> 21:34.270
但是这样子

21:34.270 --> 21:35.270
还会有问题

21:35.270 --> 21:36.270
大家看

21:36.270 --> 21:37.270
会有什么样的问题

21:37.270 --> 21:38.270
如果说

21:38.270 --> 21:39.270
我们现在用bio的

21:39.270 --> 21:40.270
来打包

21:40.270 --> 21:41.270
看一下

21:43.270 --> 21:44.270
各个打包

21:44.270 --> 21:46.270
只有GS

21:46.270 --> 21:48.270
就像只有GS

21:48.270 --> 21:50.270
那我的一边

21:50.270 --> 21:51.270
我的复制

21:51.270 --> 21:52.270
copy这个东西

21:52.270 --> 21:53.270
好像这两个东西

21:53.270 --> 21:55.270
没生效 对吧

21:55.270 --> 21:56.270
为什么呢

21:56.270 --> 21:57.270
你想一个道理

21:57.270 --> 21:58.270
我们那个配置在哪里的

21:58.270 --> 21:59.270
配置在杯子里边了

21:59.270 --> 22:01.270
对吧 配置在这里边了

22:01.270 --> 22:02.270
没问题吧

22:02.270 --> 22:05.270
好 配置在这里边的时候

22:05.270 --> 22:06.270
但是我们到时候

22:06.270 --> 22:08.270
我这里边也配置的

22:08.270 --> 22:09.270
你看我生产环境里边

22:09.270 --> 22:10.270
plug-ins也配置的

22:10.270 --> 22:11.270
什么两个属性都有配置

22:11.270 --> 22:12.270
那么到时候

22:12.270 --> 22:13.270
我们合并的时候

22:13.270 --> 22:14.270
你看在这里边

22:14.270 --> 22:15.270
生产环境

22:15.270 --> 22:16.270
我们在合并的时候

22:16.270 --> 22:18.270
是不是就出问题了

22:18.270 --> 22:19.270
想想看

22:19.270 --> 22:20.270
是不是就出问题了

22:20.270 --> 22:24.270
这个plug-ins这个数组

22:24.270 --> 22:25.270
是不是就把bass

22:25.270 --> 22:26.270
里边的数组

22:26.270 --> 22:27.270
全部复改了

22:27.270 --> 22:28.270
变成我们那边的数组

22:28.270 --> 22:30.270
是不是只有一个

22:30.270 --> 22:31.270
就形成这种情况

22:31.270 --> 22:33.270
所以这个数组

22:33.270 --> 22:35.270
我们是不是也得合并一下

22:35.270 --> 22:36.270
对吧

22:36.270 --> 22:39.270
把数组的也得合并一下

22:39.270 --> 22:40.270
没问题吧

22:40.270 --> 22:41.270
所以说

22:41.270 --> 22:42.270
我们这一块

22:42.270 --> 22:43.270
这样子来处理吧

22:43.270 --> 22:45.270
咱们这样子来处理

22:45.270 --> 22:46.270
就是说

22:46.270 --> 22:47.270
我们生产环境

22:47.270 --> 22:48.270
对这个bass

22:48.270 --> 22:49.270
config里边的plug-ins

22:49.270 --> 22:51.270
它不是个数组吗

22:51.270 --> 22:52.270
对不对

22:52.270 --> 22:54.270
我们先把数组合并一下

22:54.270 --> 22:55.270
bass

22:55.270 --> 22:56.270
config

22:56.270 --> 22:57.270
plug-ins

22:57.270 --> 22:58.270
把这个

22:58.270 --> 22:59.270
它自己的数组

22:59.270 --> 23:00.270
然后再加上

23:00.270 --> 23:03.270
plug-config

23:03.270 --> 23:04.270
就这些东西

23:04.270 --> 23:05.270
能够灵活处理

23:05.270 --> 23:06.270
如果说

23:06.270 --> 23:07.270
你在乎这个问题的话

23:07.270 --> 23:08.270
你就去处理

23:08.270 --> 23:09.270
你不在乎这个问题的话

23:09.270 --> 23:10.270
那无所谓

23:10.270 --> 23:11.270
当然还可以判断一下

23:11.270 --> 23:12.270
它plug-ins存不存在

23:12.270 --> 23:13.270
都可以

23:13.270 --> 23:15.270
都可以做了这件事情

23:15.270 --> 23:16.270
OK

23:16.270 --> 23:17.270
那么这样子是不是

23:17.270 --> 23:18.270
把两个插件就合并在一起了

23:18.270 --> 23:20.270
形成一个全新的

23:20.270 --> 23:21.270
更多的插件列表

23:21.270 --> 23:22.270
放到这儿

23:22.270 --> 23:23.270
对不对

23:23.270 --> 23:25.270
没问题吧

23:25.270 --> 23:26.270
没问题

23:26.270 --> 23:27.270
然后这样子做了

23:27.270 --> 23:28.270
那么这样子

23:28.270 --> 23:29.270
bass

23:29.270 --> 23:30.270
config里边plug-ins

23:30.270 --> 23:31.270
是不是就全了

23:31.270 --> 23:32.270
就齐全了

23:32.270 --> 23:34.270
是这么个意思

23:34.270 --> 23:36.270
或者说我们这样吧

23:36.270 --> 23:39.270
我们这里写一个obj

23:39.270 --> 23:41.270
最终的配置

23:41.270 --> 23:42.270
我们应该这样子

23:42.270 --> 23:45.160
这样子好一点

23:45.160 --> 23:47.160
然后单独对plug-ins

23:47.160 --> 23:48.160
单独来进行处理

23:48.160 --> 23:49.160
它等于什么

23:49.160 --> 23:51.160
它等于bass-config.plug-ins

23:51.160 --> 23:53.160
然后proud-config.plug-ins

23:53.160 --> 23:55.160
单独对它的plug-ins

23:55.160 --> 23:56.160
进行处理

23:56.160 --> 23:57.160
这样子好看一点

23:57.160 --> 23:59.160
是不是在对这里处理一下

23:59.160 --> 24:00.160
当然同样的方式

24:00.160 --> 24:01.160
也可以对开发方式

24:01.160 --> 24:02.160
这样子处理

24:02.160 --> 24:03.160
这些东西

24:03.160 --> 24:05.160
都可以自行搞定的

24:05.160 --> 24:06.160
好

24:06.160 --> 24:07.160
然后我们再来

24:07.160 --> 24:11.580
run build

24:11.580 --> 24:12.580
你看

24:12.580 --> 24:13.580
是不是就出来了

24:13.580 --> 24:14.580
这样子

24:14.580 --> 24:15.580
好处在于什么

24:15.580 --> 24:16.580
当然你I解决就解决

24:16.580 --> 24:17.580
这个问题

24:17.580 --> 24:18.580
你以为不是一定要解决

24:18.580 --> 24:19.580
NP

24:19.580 --> 24:20.580
这都是小问题

24:20.580 --> 24:21.580
Dev的时候

24:21.580 --> 24:23.580
我们在开发环境里面

24:23.580 --> 24:24.580
你看

24:24.580 --> 24:25.580
是不是它就不会有

24:25.580 --> 24:26.580
这个插件

24:26.580 --> 24:27.580
不会有清空那个插件

24:27.580 --> 24:28.580
它就不会有清空

24:28.580 --> 24:29.580
把这个地次目楼

24:29.580 --> 24:30.580
清空的那个插件

24:30.580 --> 24:31.580
它就不会起作用

24:31.580 --> 24:34.580
就是形成这么一个效果

24:34.580 --> 24:36.580
其他的没啥

24:36.580 --> 24:37.580
OK

24:37.580 --> 24:39.580
那么这是关于

24:39.580 --> 24:41.580
这一块

24:41.580 --> 24:43.580
那还有什么呢

24:43.580 --> 24:45.580
还有什么呢

24:45.580 --> 24:46.580
好像

24:46.580 --> 24:48.580
你就没啥了吧

24:48.580 --> 24:49.580
你就没啥了

24:49.580 --> 24:50.580
OK

24:50.580 --> 24:51.580
没啥了

24:51.580 --> 24:53.580
我们就开始来开发这个代码

24:53.580 --> 24:54.580
你看页面已经有了

24:54.580 --> 24:55.580
对吧

24:55.580 --> 24:56.580
页面已经有了

24:56.580 --> 24:58.580
我们就直接开始来开发这个代码

24:58.580 --> 24:59.580
那代码里面

24:59.580 --> 25:01.580
我们先看搞定列表页

25:01.580 --> 25:02.580
那么这里面

25:02.580 --> 25:04.580
我们省份数据从哪里来呢

25:04.580 --> 25:05.580
这里要使用一个

25:05.580 --> 25:06.580
阿加克斯请求

25:06.580 --> 25:07.580
请求哪个地址呢

25:07.580 --> 25:08.580
请求这个地址

25:08.580 --> 25:09.580
我这里给大家写一下

25:09.580 --> 25:11.580
请求

25:11.580 --> 25:13.580
这个地址

25:14.580 --> 25:15.580
这个地址

25:15.580 --> 25:16.580
就可以拿到一个数组

25:16.580 --> 25:17.580
大家看一下

25:17.580 --> 25:18.580
特别简单

25:18.580 --> 25:19.580
特别简单

25:20.580 --> 25:26.520
这个地址里边

25:26.520 --> 25:27.520
我们这里看

25:27.520 --> 25:28.520
是不是拿到一个数组

25:28.520 --> 25:29.520
对吧

25:29.520 --> 25:30.520
拿到一个数组

25:30.520 --> 25:31.520
数组里面每一个是个对象

25:31.520 --> 25:32.520
对象就是省份的ID

25:32.520 --> 25:34.520
就得到所有的省份

25:34.520 --> 25:35.520
省份ID

25:35.520 --> 25:37.520
省份的简称浙江

25:37.520 --> 25:39.520
全称是浙江省

25:39.520 --> 25:40.520
对吧

25:40.520 --> 25:41.520
然后呢

25:41.520 --> 25:42.520
还有什么呢

25:42.520 --> 25:43.520
还本身自己的ID

25:43.520 --> 25:44.520
ID

25:44.520 --> 25:46.520
就这个ID

25:46.520 --> 25:47.520
好

25:47.520 --> 25:48.520
那么就是这个意思

25:48.520 --> 25:50.520
那如果说我要查省份里边的

25:50.520 --> 25:51.520
城市呢

25:51.520 --> 25:52.520
很简单

25:52.520 --> 25:53.520
还是这个地址

25:53.520 --> 25:55.520
加上一个是参数叫

25:55.520 --> 25:57.520
PairRentID

25:57.520 --> 26:00.520
比方说我要查寻的是浙江下面的

26:00.520 --> 26:02.520
浙江下面的就是城市

26:02.520 --> 26:04.520
我就把浙江的ID放过去

26:04.520 --> 26:05.520
对

26:05.520 --> 26:06.520
那么这样子呢

26:06.520 --> 26:07.520
它就查出来了

26:07.520 --> 26:09.520
浙江下面的所有城市

26:09.520 --> 26:10.520
你看

26:10.520 --> 26:11.520
这样子它就查出来了

26:11.520 --> 26:13.520
浙江下面的所有城市

26:13.520 --> 26:15.520
就这么个意思

26:15.520 --> 26:16.520
很简单

26:16.520 --> 26:17.520
很简单

26:17.520 --> 26:18.520
那么这里既然要设计到

26:18.520 --> 26:19.520
阿加克斯请求

26:19.520 --> 26:20.520
那么

26:20.520 --> 26:21.520
我们这里呢

26:21.520 --> 26:22.520
公用的模块

26:22.520 --> 26:23.520
公共的模块

26:23.520 --> 26:24.520
比方说

26:24.520 --> 26:25.520
UTO

26:25.520 --> 26:26.520
一些工具

26:26.520 --> 26:27.520
工具函数

26:27.520 --> 26:28.520
那么这里边

26:28.520 --> 26:29.520
我们就可以写上一个文件

26:29.520 --> 26:30.520
叫做

26:32.520 --> 26:33.520
叫什么呢

26:35.520 --> 26:37.520
叫做ErrorService

26:38.520 --> 26:39.520
那么这个模块呢

26:39.520 --> 26:40.520
是干嘛的呢

26:40.520 --> 26:41.520
是导出两个函数

26:42.520 --> 26:43.520
我们用ES6

26:43.520 --> 26:44.520
导出两个函数

26:45.520 --> 26:46.520
一个函数呢

26:46.520 --> 26:48.520
是GetProvices

26:48.520 --> 26:50.520
得到所有的省份

26:52.520 --> 26:53.520
得到所有的省份

26:53.520 --> 26:54.520
你看我们的元代码写下来

26:54.520 --> 26:55.520
就很舒服了

26:55.520 --> 26:57.520
就可以细粉所有的东西

26:57.520 --> 26:58.520
得到所有的省份

26:58.520 --> 26:59.520
而且它是异部的

26:59.520 --> 27:00.520
异部的

27:00.520 --> 27:01.520
那么这里我们可以用什么呢

27:01.520 --> 27:02.520
用Fate

27:03.520 --> 27:04.520
什么地址

27:05.520 --> 27:06.520
是不是这个地址

27:06.520 --> 27:07.520
是不是这个地址

27:07.520 --> 27:08.520
但是呢

27:08.520 --> 27:09.520
我这里呢

27:09.520 --> 27:11.520
最好了不要把它写死

27:11.520 --> 27:12.520
最好不要去加这个东西

27:12.520 --> 27:13.520
为什么呢

27:13.520 --> 27:14.520
讲过了对吧

27:14.520 --> 27:15.520
我不说了

27:15.520 --> 27:16.520
讲过了

27:16.520 --> 27:17.520
你们自己回忆一下

27:17.520 --> 27:18.520
我们应该是

27:18.520 --> 27:19.520
这样子请求

27:19.520 --> 27:20.520
那么到时候你懂的

27:20.520 --> 27:21.520
要是不要配置代理

27:22.520 --> 27:23.520
配置代理

27:23.520 --> 27:24.520
请求这个地址

27:24.520 --> 27:25.520
然后呢

27:26.520 --> 27:28.520
得到一个响应对象

27:28.520 --> 27:30.520
然后我们接生格是解析

27:30.520 --> 27:31.520
解析完了过后

27:32.520 --> 27:33.520
我们再认

27:34.520 --> 27:35.520
再一个结果

27:35.520 --> 27:36.520
结果我们取他的data

27:36.520 --> 27:37.520
对吧

27:37.520 --> 27:38.520
这东西都是以前人学的

27:38.520 --> 27:40.520
这个滚瓜烂手

27:41.520 --> 27:42.520
那么是不是导出这么一个函数

27:43.520 --> 27:44.520
对不对

27:44.520 --> 27:45.520
没问题吧

27:45.520 --> 27:46.520
导出这么一个函数

27:46.520 --> 27:48.520
好咱们来试一下吧

27:48.520 --> 27:49.520
看一下

27:49.520 --> 27:50.520
我们还要配置这个

27:50.520 --> 27:51.520
还配置代理

27:52.520 --> 27:53.520
proxy

27:54.520 --> 27:55.520
当我们请求什么呢

27:55.520 --> 27:57.520
我这里好像是API开头

27:57.520 --> 27:58.520
API开头

27:58.520 --> 27:59.520
当我们请求这个地址的时候

27:59.520 --> 28:00.520
那么我们target

28:01.520 --> 28:02.520
target成了

28:02.520 --> 28:03.520
我们把它转

28:03.520 --> 28:04.520
转发到哪呢

28:04.520 --> 28:06.520
转发到那个

28:07.520 --> 28:08.520
这个

28:08.520 --> 28:10.900
转发到这个地址

28:10.900 --> 28:11.900
ok

28:12.900 --> 28:13.900
然后呢

28:13.900 --> 28:14.900
再写个change orange

28:14.900 --> 28:16.900
虽然我这面服务器

28:16.900 --> 28:18.900
倒是不太care这个东西

28:18.900 --> 28:19.900
你把它租为处

28:19.900 --> 28:20.900
ok

28:20.900 --> 28:21.900
配置个代理

28:22.900 --> 28:23.900
那么接下来

28:23.900 --> 28:24.900
我们请求这个地址的时候

28:24.900 --> 28:26.900
它就会转发到这个地址

28:26.900 --> 28:28.900
好 接下来我们来试一下

28:28.900 --> 28:29.900
怎么试呢

28:29.900 --> 28:30.900
我们在index.js里边

28:30.900 --> 28:31.900
试一试

28:31.900 --> 28:32.900
我们在列表页里边

28:32.900 --> 28:33.900
来看一下这个函数

28:33.900 --> 28:34.900
能不能生效

28:34.900 --> 28:36.900
get provinces

28:37.900 --> 28:38.900
来 导入

28:38.900 --> 28:39.900
import

28:40.900 --> 28:41.900
导入

28:41.900 --> 28:42.900
for

28:42.900 --> 28:43.900
第二段鞋杠

28:43.900 --> 28:44.900
ut

28:44.900 --> 28:45.900
叫什么

28:45.900 --> 28:46.900
我怎么智能提示全没了

28:46.900 --> 28:47.900
sales

28:47.900 --> 28:48.900
导入这个

28:49.900 --> 28:50.900
输出

28:51.900 --> 28:52.900
没关系

28:54.900 --> 28:55.900
get

28:55.900 --> 28:56.900
我这里是

28:56.900 --> 28:57.900
它是一部的 是吧

28:57.900 --> 28:59.900
get provinces

29:00.900 --> 29:01.900
然后z

29:01.900 --> 29:03.900
拿到服务器的响应结果

29:03.900 --> 29:04.900
输出

29:05.900 --> 29:06.900
console log 响应结果

29:06.900 --> 29:07.900
看一下

29:07.900 --> 29:08.900
能不能打印出来

29:08.900 --> 29:09.900
好 接下来

29:10.900 --> 29:11.900
我们这里

29:11.900 --> 29:12.900
这里已经

29:12.900 --> 29:13.900
它已经服务器上了

29:13.900 --> 29:14.900
所以说我们这里

29:14.900 --> 29:15.900
直接看结果就行了

29:15.900 --> 29:18.980
它这里爆错

29:18.980 --> 29:19.980
它说什么

29:19.980 --> 29:21.980
404 not found

29:23.980 --> 29:24.980
它说

29:24.980 --> 29:26.980
apn local有404找不到

29:26.980 --> 29:27.980
我看一下

29:27.980 --> 29:28.980
怎么会找不到

29:32.740 --> 29:34.740
apn local

29:35.740 --> 29:36.740
看一下

29:37.740 --> 29:38.740
怎么会找不到呢

29:39.740 --> 29:40.740
都找到了吗

29:43.740 --> 29:44.740
对

29:44.740 --> 29:46.740
我改了配置文件的重新运行

29:47.740 --> 29:49.740
改了配置文件的重新运行

29:49.740 --> 29:50.740
不然的话

29:50.740 --> 29:51.740
它一个代理没有生效

29:51.740 --> 29:52.740
代理没有生效

29:52.740 --> 29:53.740
是这个原因

29:54.740 --> 29:55.740
OK 现在来看一下

29:59.260 --> 30:01.260
得到的结果倒是

30:01.260 --> 30:02.260
没有爆错了

30:02.260 --> 30:04.260
得到的结果是undefend

30:05.260 --> 30:07.260
它怎么是undefend

30:07.260 --> 30:08.260
这里是不是没有data了

30:08.260 --> 30:10.830
我看一下

30:10.830 --> 30:11.830
我看一下

30:11.830 --> 30:12.830
我这里把它去掉

30:13.830 --> 30:14.830
没有

30:14.830 --> 30:15.830
后面没有data了

30:15.830 --> 30:16.830
直接减少

30:16.830 --> 30:17.830
减少数据完成了

30:17.830 --> 30:19.830
我跟x小时有计凡了

30:19.830 --> 30:20.830
OK

30:20.830 --> 30:21.830
那么这里

30:21.830 --> 30:22.830
得到35个数据

30:22.830 --> 30:23.830
得到了

30:23.830 --> 30:24.830
得到了

30:24.830 --> 30:25.830
OK

30:25.830 --> 30:27.830
这就是这个东西

30:27.830 --> 30:28.830
有了数据过后

30:28.830 --> 30:30.830
剩下的事情就简单了

30:30.830 --> 30:31.830
这里有顺便说一下

30:31.830 --> 30:33.830
如果说你这个地方

30:33.830 --> 30:34.830
返回上级目录写的很不爽

30:34.830 --> 30:37.830
你总希望从src跟目录下面去找

30:37.830 --> 30:39.830
那么这里也可以利用vpec

30:39.830 --> 30:41.830
vpec里面的配置

30:41.830 --> 30:42.830
什么配置呢

30:42.830 --> 30:43.830
就是说

30:43.830 --> 30:45.830
配置那个叫resolve

30:46.830 --> 30:48.830
配置一个alias

30:48.830 --> 30:49.830
配置一个

30:50.830 --> 30:51.830
data

30:51.830 --> 30:52.830
对于哪个目录呢

30:52.830 --> 30:53.830
对于src

30:53.830 --> 30:54.830
src目录

30:54.830 --> 30:57.590
这样才配置

30:57.590 --> 30:58.590
那么这样子也来了

30:58.590 --> 31:00.590
我们在这里就可以直接写个data了

31:00.590 --> 31:02.590
始终从src目录下面找

31:02.590 --> 31:03.590
当然你可以写这种

31:03.590 --> 31:04.590
都可以

31:04.590 --> 31:05.590
至少有多一种方式

31:05.590 --> 31:06.590
有定别名吗

31:06.590 --> 31:07.590
还记得吗

31:07.590 --> 31:08.590
OK

31:08.590 --> 31:09.590
现在我们再运行

31:14.340 --> 31:19.020
打开

31:19.020 --> 31:20.020
看一下

31:20.020 --> 31:21.020
右键

31:22.020 --> 31:23.020
还没爆错了

31:23.020 --> 31:24.020
他说

31:25.020 --> 31:26.020
找不到march

31:26.020 --> 31:27.020
找不到march

31:27.020 --> 31:28.020
我这里好像又配置错了

31:29.020 --> 31:30.020
这个别名

31:30.020 --> 31:31.020
别名找配置

31:31.020 --> 31:32.020
我又忘了

31:32.020 --> 31:33.020
我有点忘了

31:33.020 --> 31:34.020
看一下之前的吧

31:34.020 --> 31:35.020
看一下之前的

31:35.020 --> 31:37.020
我要在其他细节配置里边

31:37.020 --> 31:38.020
好像是在这

31:40.020 --> 31:41.020
这东西

31:41.020 --> 31:43.020
一不怎么用就忘得快都很

31:44.020 --> 31:45.020
在哪来着

31:45.020 --> 31:46.020
别名

31:46.020 --> 31:48.020
这里要配置绝对路径

31:48.020 --> 31:49.020
这里要配置绝对路径

31:49.020 --> 31:51.020
那么这里需要一个pass模块

31:54.100 --> 31:55.100
pass

31:55.100 --> 31:56.100
那么这里我们使用

31:56.100 --> 31:59.660
passresolve

32:00.660 --> 32:02.660
第二内

32:03.660 --> 32:04.660
passresolve

32:04.660 --> 32:05.660
OK

32:05.660 --> 32:06.660
停止

32:11.660 --> 32:14.740
音箱

32:14.740 --> 32:15.740
来看一下

32:17.740 --> 32:18.740
那么这里

32:18.740 --> 32:19.740
没问题

32:19.740 --> 32:20.740
没问题

32:21.740 --> 32:22.740
那么接下来

32:22.740 --> 32:24.740
我们要把它夹到哪去呢

32:24.740 --> 32:25.740
夹到我们的页面上去

32:25.740 --> 32:26.740
对吧

32:26.740 --> 32:27.740
我们要把这个页面上的东西

32:27.740 --> 32:28.740
页面上这里

32:28.740 --> 32:30.740
classway province

32:30.740 --> 32:31.740
把这个东西全部清空吧

32:31.740 --> 32:32.740
我们这里

32:32.740 --> 32:33.740
都是假数据

32:33.740 --> 32:34.740
所以说都是精彩页面的数据

32:34.740 --> 32:36.740
把这个内容全部清空

32:36.740 --> 32:37.740
全部清空

32:40.740 --> 32:41.740
那么这里

32:41.740 --> 32:42.740
你可以用接query来做

32:42.740 --> 32:43.740
也可以用别的方式来做

32:43.740 --> 32:44.740
比方说我们

32:44.740 --> 32:45.740
希望用接query来做

32:45.740 --> 32:46.740
来吧

32:46.740 --> 32:47.740
安装接query

32:48.740 --> 32:50.740
那么用NPMI

32:50.740 --> 32:51.740
接query

32:52.740 --> 32:53.740
安装

32:54.740 --> 32:55.740
到这个代码里面来

32:55.740 --> 32:56.740
那就很简单了

32:56.740 --> 32:57.740
我们保住接query

33:00.740 --> 33:02.740
因为这里的页面的代码很简单

33:02.740 --> 33:03.740
所以说

33:03.740 --> 33:04.740
如果说你这个页面

33:04.740 --> 33:05.740
代码比较复杂

33:05.740 --> 33:07.740
这里面还要去吸一份很多膜块

33:07.740 --> 33:09.740
还要去吸一份很多膜块

33:09.740 --> 33:10.740
公共的膜块

33:10.740 --> 33:11.740
也可以单独提出来

33:11.740 --> 33:12.740
OK

33:12.740 --> 33:13.740
那么剩下的事情

33:13.740 --> 33:14.740
其实跟wepac

33:14.740 --> 33:15.740
已经没有关系了

33:15.740 --> 33:16.740
就是我们的代码功能

33:16.740 --> 33:17.740
对吧

33:17.740 --> 33:18.740
wepac已经配好了

33:18.740 --> 33:19.740
我们就安安心心

33:19.740 --> 33:20.740
开开心心

33:20.740 --> 33:21.740
写代码就行了

33:21.740 --> 33:22.740
那么剩下的事情

33:22.740 --> 33:23.740
交给wepac来处理

33:23.740 --> 33:24.740
接下来

33:24.740 --> 33:25.740
我们

33:25.740 --> 33:26.740
导到这个接query

33:26.740 --> 33:27.740
接下来

33:27.740 --> 33:28.740
我们做什么事呢

33:28.740 --> 33:29.740
来吧

33:30.740 --> 33:32.740
我们当页面

33:32.740 --> 33:33.740
夹在完成之后

33:33.740 --> 33:34.740
或者说

33:34.740 --> 33:35.740
我们直接就丢这个函数

33:35.740 --> 33:36.740
get provinces

33:37.740 --> 33:38.740
然后

33:38.740 --> 33:40.740
得到这个结果

33:40.740 --> 33:41.740
得到我们ps

33:41.740 --> 33:42.740
所有的就是

33:42.740 --> 33:43.740
省份的数

33:43.740 --> 33:44.740
省份的数数

33:45.740 --> 33:46.740
来吧

33:46.740 --> 33:47.740
ps就是

33:47.740 --> 33:48.740
省份的数数

33:49.740 --> 33:50.740
接下来我们要做的

33:50.740 --> 33:52.740
就是找到了一个eol元数

33:53.740 --> 33:55.740
找到eol元数

33:55.740 --> 33:57.740
eol来自于哪呢

33:57.740 --> 33:58.740
用接query

34:00.740 --> 34:01.740
找到页面上

34:01.740 --> 34:02.740
Promances

34:03.740 --> 34:04.740
Promances

34:05.740 --> 34:06.740
这是eol元数

34:06.740 --> 34:07.740
然后它不断的

34:07.740 --> 34:08.740
往它里面加东西

34:08.740 --> 34:09.740
对吧

34:09.740 --> 34:10.740
那么来吧

34:10.740 --> 34:11.740
不断的往它里面加东西

34:12.740 --> 34:14.740
用forlv循环

34:14.740 --> 34:15.740
现在

34:15.740 --> 34:16.740
卡的

34:16.740 --> 34:17.740
卡的

34:17.740 --> 34:18.740
forlv打不开了

34:21.740 --> 34:22.740
Promance

34:22.740 --> 34:23.740
p

34:23.740 --> 34:24.740
o

34:24.740 --> 34:25.740
ps

34:25.740 --> 34:26.740
循环这个数组

34:26.740 --> 34:27.740
每循环一个数组

34:27.740 --> 34:28.740
p是不是一个

34:28.740 --> 34:29.740
省份对象

34:29.740 --> 34:30.740
我们来看一下

34:30.740 --> 34:31.740
省份对象

34:32.740 --> 34:33.740
一个省份对象里边

34:33.740 --> 34:34.740
有什么

34:34.740 --> 34:35.740
simple name

34:35.740 --> 34:36.740
有什么

34:36.740 --> 34:37.740
有

34:37.740 --> 34:38.740
real name

34:38.740 --> 34:40.740
有Promance ID

34:40.740 --> 34:41.740
有自己的ID

34:42.740 --> 34:43.740
那么行

34:43.740 --> 34:44.740
我这里面每循环一次

34:44.740 --> 34:46.740
是不是生成一个eol元数

34:47.740 --> 34:49.740
生成一个eol

34:49.740 --> 34:50.740
对不对

34:51.740 --> 34:52.740
这样子生成

34:53.740 --> 34:54.740
用接query生成一个eol

34:54.740 --> 34:56.740
然后设置它的什么呢

34:56.740 --> 34:57.740
内容

34:57.740 --> 34:58.740
text

34:58.740 --> 34:59.740
内容是什么呢

34:59.740 --> 35:00.740
一个对象里边的

35:01.740 --> 35:02.740
simple name

35:02.740 --> 35:03.740
对不对

35:03.740 --> 35:04.740
simple name

35:04.740 --> 35:05.740
一个li

35:05.740 --> 35:06.740
没问题吧

35:07.740 --> 35:08.740
这个li下面

35:08.740 --> 35:09.740
我记得之前

35:09.740 --> 35:10.740
是不是还要写个

35:10.740 --> 35:11.740
还有个eol元数

35:11.740 --> 35:12.740
还有个eol元数

35:12.740 --> 35:13.740
那行吧

35:13.740 --> 35:14.740
那行吧

35:15.740 --> 35:16.740
生成一个eol

35:16.740 --> 35:17.740
然后呢

35:17.740 --> 35:18.740
eol像我们

35:18.740 --> 35:19.740
这里

35:19.740 --> 35:20.740
找到个辩量

35:23.380 --> 35:24.380
eol

35:24.380 --> 35:25.380
const

35:26.380 --> 35:27.380
eol

35:27.380 --> 35:28.380
eol

35:28.380 --> 35:30.380
然后再生成一个eol元数

35:30.380 --> 35:35.140
eol元数里边的内容

35:35.140 --> 35:36.140
是什么呢

35:36.140 --> 35:37.140
是pedia

35:37.140 --> 35:38.140
simple name

35:39.140 --> 35:40.140
eol元数里边的内容是这个

35:40.140 --> 35:42.140
然后把这个eol元数

35:42.140 --> 35:43.140
加到哪去了

35:43.140 --> 35:44.140
append to

35:44.140 --> 35:46.140
加到li里边去

35:46.140 --> 35:47.140
对吧

35:47.140 --> 35:48.140
li要哪去了

35:48.140 --> 35:49.140
append to

35:49.140 --> 35:51.140
加到这个eol里边去

35:51.140 --> 35:52.140
对吧

35:52.140 --> 35:53.140
就这样子写

35:53.140 --> 35:54.140
好

35:54.140 --> 35:55.140
然后eol元数里边呢

35:55.140 --> 35:57.140
eol元数里边呢

35:57.140 --> 35:58.140
还要有一个什么呢

35:58.140 --> 35:59.140
还要有一些属性

35:59.140 --> 36:01.140
我们这里把它写完吧

36:01.140 --> 36:02.140
还有一些属性

36:02.140 --> 36:03.140
首先呢

36:03.140 --> 36:05.140
我们设置它的什么属性呢

36:05.140 --> 36:06.140
超链接

36:06.140 --> 36:07.140
超链接属性

36:07.140 --> 36:08.140
链接到哪

36:08.140 --> 36:10.140
是不是链接到另外一个页面

36:10.140 --> 36:11.140
detail

36:11.140 --> 36:12.140
听没有

36:12.140 --> 36:14.140
我链接到这个页面

36:14.140 --> 36:15.140
没问题吧

36:15.140 --> 36:16.140
好

36:16.140 --> 36:17.140
ok 保存

36:18.140 --> 36:21.280
保存

36:21.280 --> 36:22.280
看一下啊

36:22.280 --> 36:23.280
刷新

36:23.280 --> 36:24.280
这就好像包错了

36:24.280 --> 36:25.280
我看一下

36:25.280 --> 36:26.280
包错了

36:26.280 --> 36:27.280
什么错

36:27.280 --> 36:34.330
这里没运行

36:34.330 --> 36:37.980
稍等

36:37.980 --> 36:38.980
你看

36:38.980 --> 36:39.980
是不是加进来了

36:39.980 --> 36:40.980
对吧

36:40.980 --> 36:41.980
点击过后

36:41.980 --> 36:43.980
是不是挑战到详情页了

36:43.980 --> 36:44.980
对吧

36:44.980 --> 36:45.980
挑战到详情页了

36:45.980 --> 36:46.980
好了

36:46.980 --> 36:47.980
现在我们这个页面开发完了

36:47.980 --> 36:48.980
我们要去开发详情页

36:48.980 --> 36:50.980
详情页就会遇到一个问题

36:50.980 --> 36:51.980
到了详情页过后

36:51.980 --> 36:53.980
它是不是拿不到数据啊

36:53.980 --> 36:55.980
拿不到这个页面

36:55.980 --> 36:56.980
不知道它

36:56.980 --> 36:57.980
它不知道到底要显示哪个省

36:57.980 --> 36:59.980
也不知道要显示的省份id

36:59.980 --> 37:00.980
像id

37:00.980 --> 37:02.980
因为这个页面它需要什么

37:02.980 --> 37:04.980
详情页需要什么

37:04.980 --> 37:05.980
需要

37:05.980 --> 37:06.980
第一个

37:06.980 --> 37:08.980
需要省份的名称

37:08.980 --> 37:10.980
为什么它显示到这

37:10.980 --> 37:11.980
然后呢

37:11.980 --> 37:12.980
第二个需要什么

37:12.980 --> 37:14.980
需要这个

37:14.980 --> 37:16.980
省份的id

37:16.980 --> 37:17.980
为什么

37:17.980 --> 37:18.980
还要通过id去查它的程式

37:18.980 --> 37:19.980
对吧

37:19.980 --> 37:20.980
它需要这么两个东西

37:20.980 --> 37:22.980
一个是省份的名称

37:22.980 --> 37:23.980
全称

37:23.980 --> 37:24.980
省份的全称

37:24.980 --> 37:25.980
一个是省份的id

37:25.980 --> 37:27.980
需要这么两个东西

37:27.980 --> 37:28.980
那么这两个东西

37:28.980 --> 37:29.980
就需要

37:29.980 --> 37:30.980
刚才这个页面传给它

37:30.980 --> 37:32.980
就这个页面要给它传过去

37:32.980 --> 37:34.980
通常我们页面之间传递数据

37:34.980 --> 37:35.980
是怎么传递的

37:35.980 --> 37:37.980
通常是用这种方式来传递的

37:38.980 --> 37:39.980
你看

37:39.980 --> 37:40.980
我们通常是

37:40.980 --> 37:41.980
我们在这里说吧

37:41.980 --> 37:43.980
通常我们是在这里

37:43.980 --> 37:45.980
加上query参数

37:45.980 --> 37:46.980
比方说我们

37:46.980 --> 37:48.980
四川省省份名字

37:48.980 --> 37:50.980
proven

37:50.980 --> 37:52.980
就是name

37:52.980 --> 37:54.980
四川省

37:54.980 --> 37:55.980
然后呢

37:55.980 --> 37:56.980
id

37:56.980 --> 37:57.980
多少多少多少

37:57.980 --> 37:59.980
通常用这种方式来传

37:59.980 --> 38:00.980
所以说呢

38:00.980 --> 38:01.980
这边的a元数

38:01.980 --> 38:02.980
就是这边生成的a元数

38:02.980 --> 38:04.980
是不是我们要处理一下

38:04.980 --> 38:05.980
还要处理一下

38:05.980 --> 38:06.980
它的就是这个东西

38:06.980 --> 38:07.980
我们要后面要带两个

38:07.980 --> 38:08.980
一个是什么呢

38:08.980 --> 38:09.980
一个是name

38:09.980 --> 38:10.980
name等于啥

38:10.980 --> 38:11.980
我们这个可以模拔字符串

38:12.980 --> 38:13.980
name等于啥

38:13.980 --> 38:15.980
name等于p点

38:15.980 --> 38:16.980
叫什么来着

38:16.980 --> 38:18.980
好像叫arrow name

38:18.980 --> 38:19.980
好像叫这个

38:19.980 --> 38:20.980
然后呢

38:20.980 --> 38:22.980
还有一个id等于什么呢

38:23.980 --> 38:24.980
p点id

38:24.980 --> 38:25.980
对吧

38:25.980 --> 38:26.980
我们拼起来一个字符串

38:26.980 --> 38:28.980
把它传到ref属性

38:28.980 --> 38:29.980
好 这样子来的过后

38:29.980 --> 38:30.980
我们再看

38:30.980 --> 38:34.940
好 接下来我们看

38:34.940 --> 38:35.940
刷新

38:36.940 --> 38:37.940
好 你看

38:37.940 --> 38:38.940
点击过后

38:38.940 --> 38:39.940
你看是不是把个名字

38:39.940 --> 38:40.940
id传过来了

38:40.940 --> 38:41.940
对吧

38:41.940 --> 38:42.940
然后呢 点击过后

38:42.940 --> 38:43.940
你看是不是把个名字

38:43.940 --> 38:44.940
id传过来了

38:44.940 --> 38:45.940
那么这个页面呢

38:45.940 --> 38:46.940
才能获取到这个数据

38:46.940 --> 38:48.940
才能获取到这个关键数据

38:48.940 --> 38:49.940
好 接下来

38:49.940 --> 38:51.940
我们到详情页去处理

38:51.940 --> 38:52.940
详情页呢

38:52.940 --> 38:53.940
它也需要用到阿加克斯

38:53.940 --> 38:54.940
对吧

38:54.940 --> 38:55.940
那么它也需要

38:55.940 --> 38:56.940
那么我们这里也需要一个

38:56.940 --> 38:57.940
要导出一个

38:58.940 --> 39:00.940
得到所有的程式

39:00.940 --> 39:01.940
根据什么呢

39:01.940 --> 39:03.940
根据省份id

39:04.940 --> 39:06.940
好 那么这里是

39:06.940 --> 39:09.940
get ctis

39:09.940 --> 39:10.940
ctis

39:10.940 --> 39:11.940
一共传一个什么呢

39:11.940 --> 39:12.940
id过来

39:12.940 --> 39:13.940
parent id

39:13.940 --> 39:15.940
好 那么我们请求的地址

39:15.940 --> 39:16.940
就是在这个地方

39:16.940 --> 39:18.940
加上一个parent id

39:18.940 --> 39:19.940
等于什么

39:19.940 --> 39:21.940
这里可以用模板支付串吗

39:21.940 --> 39:22.940
或者说我们先生成一个

39:22.940 --> 39:23.940
url地址

39:23.940 --> 39:27.530
然后呢

39:27.530 --> 39:28.530
我们请求

39:28.530 --> 39:30.530
这个地方parent id

39:30.530 --> 39:31.530
等于啥呢

39:31.530 --> 39:33.530
等于parent id

39:33.530 --> 39:35.530
把个字传进来

39:35.530 --> 39:37.530
请求这个url地址

39:37.530 --> 39:38.530
Z

39:38.530 --> 39:39.530
得到结果

39:39.530 --> 39:40.530
get ctis

39:40.530 --> 39:41.530
好 接下来我们看一下

39:41.530 --> 39:42.530
detail

39:42.530 --> 39:43.530
行不行

39:43.530 --> 39:44.530
导入

39:44.530 --> 39:47.900
import

39:47.900 --> 39:51.300
放过来

39:51.300 --> 39:54.300
导入get ctis

39:54.300 --> 39:55.300
好 来吧

39:55.300 --> 39:56.300
试一下

39:56.300 --> 39:58.300
get ctis

39:58.300 --> 39:59.300
id

39:59.300 --> 40:00.300
我们这里随便传一个吗

40:00.300 --> 40:02.300
随便传一个id

40:06.130 --> 40:07.130
这个id

40:07.130 --> 40:09.130
随便传一个

40:09.130 --> 40:10.130
Z

40:11.130 --> 40:15.780
看一下能不能拿到结果

40:15.780 --> 40:20.270
保存

40:20.270 --> 40:21.270
好 拿到了 对吧

40:21.270 --> 40:23.270
嗯 拿到了吗

40:23.270 --> 40:25.270
对了 海南省

40:25.270 --> 40:26.270
这里是海南省

40:26.270 --> 40:28.780
拿到了

40:28.780 --> 40:29.780
OK 是不是拿到4个

40:29.780 --> 40:30.780
4个城市

40:30.780 --> 40:32.780
所以说就可以拿到了

40:32.780 --> 40:33.780
但是问题现在就是

40:33.780 --> 40:34.780
我们这里是写死的 对吧

40:34.780 --> 40:36.780
但是我们这里应该读什么

40:36.780 --> 40:38.780
读那个location里面

40:38.780 --> 40:39.780
search就这一部分的

40:39.780 --> 40:40.780
里面的name和id

40:40.780 --> 40:41.780
对吧

40:41.780 --> 40:42.780
那我们怎么来读呢

40:42.780 --> 40:43.780
我们可以使用

40:43.780 --> 40:44.780
我们知道

40:44.780 --> 40:46.780
在location里面有个属性

40:46.780 --> 40:47.780
我们输出一下location

40:47.780 --> 40:48.780
输出一下就明白了

40:49.780 --> 40:50.780
location你看

40:50.780 --> 40:51.780
里面有什么

40:51.780 --> 40:52.780
有什么search对吧

40:52.780 --> 40:53.780
通过这个search支付刷

40:53.780 --> 40:55.780
是不是可以做支付刷解析

40:55.780 --> 40:57.780
该解码的时候要解码

40:57.780 --> 40:58.780
这个东西应该知道

40:58.780 --> 40:59.780
UNL地址里面

40:59.780 --> 41:00.780
它是不能出现中文的

41:00.780 --> 41:01.780
因此它边码

41:01.780 --> 41:03.780
该解码就解码对不对

41:03.780 --> 41:04.780
是不是要做这么一个处理

41:04.780 --> 41:05.780
做支付刷处理

41:05.780 --> 41:06.780
那么这样处理的

41:06.780 --> 41:07.780
特别麻烦

41:07.780 --> 41:08.780
因此我们完全可以

41:08.780 --> 41:10.780
用一个第三方库来搞定

41:10.780 --> 41:11.780
用什么第三方库呢

41:11.780 --> 41:12.780
我们再停止

41:12.780 --> 41:13.780
要安装一个库

41:13.780 --> 41:14.780
什么库呢

41:14.780 --> 41:16.780
叫做query stream

41:17.780 --> 41:18.780
我记得好像是这个库

41:18.780 --> 41:19.780
不要记错了

41:19.780 --> 41:20.780
看一下吧

41:21.780 --> 41:25.780
query stream

41:25.780 --> 41:26.780
好像是这个库

41:26.780 --> 41:27.780
非常简单一个库

41:27.780 --> 41:28.780
它就是专门来做那个字

41:28.780 --> 41:30.780
地址男参数的解析的

41:33.780 --> 41:34.780
对

41:34.780 --> 41:35.780
特别简单

41:35.780 --> 41:36.780
行了我们就用这个库

41:36.780 --> 41:37.780
就用这个库

41:39.780 --> 41:40.780
安装

41:40.780 --> 41:41.780
那这边代码里边

41:41.780 --> 41:43.780
我们就导入 import

41:44.780 --> 41:45.780
qs

41:45.780 --> 41:47.780
query stream

41:47.780 --> 41:48.780
这么一个库

41:50.780 --> 41:51.780
这个库呢

41:51.780 --> 41:52.780
它有个方法

41:52.780 --> 41:53.780
直接复制过来

41:53.780 --> 41:57.430
有个方法

41:57.430 --> 41:58.430
什么方法呢

41:58.430 --> 41:59.430
它就是把我们的 location 里面

41:59.430 --> 42:00.430
12起字不错的

42:00.430 --> 42:01.430
给它传进去

42:01.430 --> 42:02.430
它来解析

42:02.430 --> 42:03.430
解析完了过来

42:03.430 --> 42:04.430
它就会变成一个对象

42:04.430 --> 42:07.320
咱们来看一下吧

42:07.320 --> 42:08.320
运行

42:08.320 --> 42:09.320
人评如若

42:09.320 --> 42:14.580
对

42:15.580 --> 42:16.580
有了 wave pack 过后

42:16.580 --> 42:17.580
我们想用哪些第三方库

42:17.580 --> 42:18.580
就用哪些第三方库

42:18.580 --> 42:19.580
用了过来

42:19.580 --> 42:20.580
它总之会完成打包的

42:20.580 --> 42:21.580
它会把合并

42:22.580 --> 42:23.580
什么意思啊

42:23.580 --> 42:25.580
query stream is not defend

42:27.580 --> 42:29.580
我刚刚按失败了吗

42:30.580 --> 42:31.580
没有按失败吧

42:32.580 --> 42:33.580
按成功了

42:33.580 --> 42:34.580
query stream

42:35.580 --> 42:36.580
它说

42:37.580 --> 42:39.580
query stream is not defend

42:39.580 --> 42:43.590
哦 这里是qs

42:44.590 --> 42:45.590
保存

42:45.590 --> 42:46.590
好 是不是拿到了

42:46.590 --> 42:47.590
地上参数里边

42:47.590 --> 42:48.590
id name 是不是拿到了

42:49.590 --> 42:50.590
特别简单

42:50.590 --> 42:51.590
因此这个地方

42:51.590 --> 42:52.590
id 要传什么id

42:52.590 --> 42:53.590
是不是传那个

42:53.590 --> 42:55.590
post id

42:55.590 --> 42:56.590
对吧

42:56.590 --> 42:57.590
就传这个

42:57.590 --> 42:58.590
对不对

42:58.590 --> 43:00.590
那么传进去

43:00.590 --> 43:01.590
id

43:01.590 --> 43:02.590
它就会根据id

43:02.590 --> 43:03.590
你看现在是广西

43:03.590 --> 43:05.590
它就会拿到广西的东西

43:05.590 --> 43:06.590
咱来我们看一下

43:06.590 --> 43:07.590
回求业

43:07.590 --> 43:08.590
看一下试穿

43:09.590 --> 43:11.590
是不是可以拿到试穿的结果

43:11.590 --> 43:12.590
对不对

43:12.590 --> 43:13.590
那么接下来

43:13.590 --> 43:15.590
就是把数据往页面上放了

43:15.590 --> 43:16.590
往页面上放很简单

43:16.590 --> 43:17.590
到 detail 里边

43:17.590 --> 43:18.590
首先

43:18.590 --> 43:19.590
找到这个

43:20.590 --> 43:21.590
还是要用 jquery

43:21.590 --> 43:23.590
找到这个就是给它填充内容

43:23.590 --> 43:24.590
这个地方

43:24.590 --> 43:25.590
咱来吧

43:25.590 --> 43:26.590
一个个来

43:26.590 --> 43:27.590
好 因 detail 里边

43:27.590 --> 43:29.590
首先找到这个 title

43:29.590 --> 43:35.110
找出 jquery

43:35.110 --> 43:36.110
对吧

43:36.110 --> 43:38.490
jquery

43:38.490 --> 43:40.490
到那找到这个

43:41.490 --> 43:42.490
title

43:42.490 --> 43:43.490
找它的内容 text

43:43.490 --> 43:44.490
填充什么

43:44.490 --> 43:46.490
post 里边的一个什么 name

43:46.490 --> 43:47.490
对吧

43:47.490 --> 43:48.490
把填充进去

43:48.490 --> 43:49.490
保存

43:50.490 --> 43:51.490
这个本来就是算成

43:51.490 --> 43:52.490
对吧 看不出来

43:52.490 --> 43:53.490
广东

43:53.490 --> 43:54.490
是吧 是不是

43:54.490 --> 43:55.490
加进去了

43:55.490 --> 43:57.490
OK 就把个 name 属性

43:57.490 --> 43:58.490
name 里边的东西加进去了

43:58.490 --> 43:59.490
好 城市里边

43:59.490 --> 44:00.490
城市我们来看一下

44:00.490 --> 44:02.490
城市它里边的调整是啥

44:02.490 --> 44:04.490
就是管下城市

44:04.490 --> 44:06.490
就是地地地地

44:06.490 --> 44:07.490
就全是地地

44:07.490 --> 44:09.490
每个城市生成个地地

44:09.490 --> 44:10.490
dl 放这

44:10.490 --> 44:11.490
OK 来吧

44:11.490 --> 44:13.490
detail 里边

44:13.490 --> 44:15.490
我们找到这个 dl

44:15.490 --> 44:18.060
dl

44:18.060 --> 44:20.060
我这里写的比较

44:20.060 --> 44:22.060
因为单码比较少嘛

44:22.060 --> 44:23.060
所以说我没有管那么多

44:23.060 --> 44:24.060
就这样写吧

44:24.060 --> 44:25.060
找到 dl

44:26.060 --> 44:28.060
这里是不是拿到所有的城市了

44:28.060 --> 44:30.060
对吧 拿到所有的城市

44:30.060 --> 44:32.060
是不是又来个循环

44:33.060 --> 44:35.060
cts

44:35.060 --> 44:37.060
那么每一个城市

44:37.060 --> 44:38.060
是不是有很多属性

44:38.060 --> 44:39.060
对吧 我们还是一样的

44:39.060 --> 44:41.060
生成一个什么

44:41.060 --> 44:43.060
生成一个地地元素

44:43.060 --> 44:45.060
然后 append to

44:45.060 --> 44:46.060
加到哪裡去

44:46.060 --> 44:47.060
加到 dl 里边去

44:47.060 --> 44:48.060
对吧

44:48.060 --> 44:49.060
然后加之前

44:49.060 --> 44:50.060
我给它先给它哪个内容吧

44:50.060 --> 44:51.060
内容是啥

44:51.060 --> 44:53.060
c.sympoli

44:53.060 --> 44:55.060
就完了 特别简单

45:00.750 --> 45:01.750
对了

45:01.750 --> 45:02.750
没问题

45:03.750 --> 45:04.750
它为啥没加进去

45:05.750 --> 45:06.750
我输出一下

45:06.750 --> 45:09.130
输出 c

45:09.130 --> 45:11.700
对了

45:11.700 --> 45:12.700
你看

45:12.700 --> 45:13.700
sympoli

45:13.700 --> 45:14.700
对了

45:14.700 --> 45:16.700
它为啥没加进去呢

45:16.700 --> 45:17.700
每生成

45:17.700 --> 45:18.700
这个地方

45:18.700 --> 45:19.700
这样子

45:19.700 --> 45:21.700
生成一个地地元素

45:21.700 --> 45:22.700
OK

45:23.700 --> 45:24.700
你看 收加进去了

45:24.700 --> 45:25.700
对吧

45:25.700 --> 45:26.700
见面很丑

45:26.700 --> 45:27.700
就说这么个意思

45:27.700 --> 45:28.700
这个例子

45:28.700 --> 45:29.700
主要是给大家看一下

45:29.700 --> 45:30.700
多个页面

45:30.700 --> 45:31.700
应用程序

45:31.700 --> 45:32.700
大概它会经过

45:32.700 --> 45:33.700
怎么样的处理

45:33.700 --> 45:34.700
我们就怎么样

45:34.700 --> 45:35.700
为 pack 来构建

45:35.700 --> 45:36.700
构建好了过

45:36.700 --> 45:37.700
剩下的代码开发

45:37.700 --> 45:39.700
跟為 pack 没有任何关系了

45:39.700 --> 45:40.700
你该怎么开发

45:40.700 --> 45:41.700
该就怎么开发

45:41.700 --> 45:42.700
该使用无可化

45:42.700 --> 45:43.700
就使用无可化

45:43.700 --> 45:44.700
那么这些依赖关系

45:44.700 --> 45:45.700
最终都会被打包

45:45.700 --> 45:46.700
都会被打包

45:46.700 --> 45:47.700
现在我们来看一下

45:47.700 --> 45:48.700
最终

45:48.700 --> 45:49.700
我们用 build

45:50.700 --> 45:51.700
run build

45:51.700 --> 45:58.810
打包

45:58.810 --> 45:59.810
稍等

45:59.810 --> 46:00.810
打包完成

46:00.810 --> 46:01.810
打包完成过后

46:01.810 --> 46:02.810
你看一下

46:02.810 --> 46:04.810
最终打包结果里边

46:04.810 --> 46:05.810
它就把

46:05.810 --> 46:06.810
该什么结块的代码

46:06.810 --> 46:07.810
那些东西全部就加进来了

46:07.810 --> 46:08.810
对吧

46:08.810 --> 46:09.810
全部就加进来了

46:09.810 --> 46:10.810
OK

46:10.810 --> 46:11.810
这就是

46:11.810 --> 46:12.810
我们的為 pack

46:12.810 --> 46:13.810
那么现在

46:13.810 --> 46:14.810
我们看一下

46:14.810 --> 46:15.810
在生产环境里面

46:15.810 --> 46:16.810
打包完了过后

46:16.810 --> 46:17.810
能不能运行这个代码

46:17.810 --> 46:19.810
能不能运行

46:19.810 --> 46:20.810
不能运行

46:20.810 --> 46:21.810
为什么不能运行

46:21.810 --> 46:24.810
你觉得为什么不能运行

46:24.810 --> 46:25.810
你看

46:25.810 --> 46:26.810
出来

46:26.810 --> 46:28.810
为什么出来

46:28.810 --> 46:29.810
为什么出来

46:29.810 --> 46:30.810
因为

46:30.810 --> 46:32.810
它这里的代理出了问题

46:32.810 --> 46:34.810
因为我们在开发环境下面

46:34.810 --> 46:36.810
是一个为pack dev server

46:36.810 --> 46:37.810
对吧

46:37.810 --> 46:38.810
它有个代理

46:38.810 --> 46:39.810
对不对

46:39.810 --> 46:40.810
一个代理

46:40.810 --> 46:42.810
但是生产环境打包变成文件了

46:42.810 --> 46:43.810
普普通通的文件

46:43.810 --> 46:44.810
它还有没有什么dev server

46:44.810 --> 46:45.810
就完全没有了

46:45.810 --> 46:47.810
这里就是个非常非常普通的文件

46:47.810 --> 46:49.810
因此不存在什么dev server

46:49.810 --> 46:51.810
这个时候运行要出问题了

46:51.810 --> 46:52.810
所以说这个地方

46:52.810 --> 46:54.810
一般我们在开发模式下面去

46:54.810 --> 46:55.810
调试

46:55.810 --> 46:56.810
调试完了过后

46:56.810 --> 46:58.810
这个玩意上传到服务器的

46:58.810 --> 47:00.810
上传到服务器才能运行

47:00.810 --> 47:01.810
至于怎么上传到服务器

47:01.810 --> 47:02.810
怎么跟服务器结合

47:02.810 --> 47:03.810
那是你们以后学到

47:03.810 --> 47:04.810
loader过后了

47:04.810 --> 47:06.810
你们自然就明白了

47:06.810 --> 47:07.810
OK

47:07.810 --> 47:09.810
这是关于这个点什么路

47:09.810 --> 47:11.810
没了

47:11.810 --> 47:14.810
这就是这么个练习

47:14.810 --> 47:15.810
这就是第二章

47:15.810 --> 47:17.810
咱们的常用扩展就这么多了

47:17.810 --> 47:19.810
后边就是一块一块的

47:19.810 --> 47:20.810
就是知识点

47:20.810 --> 47:21.810
就是比方说

47:21.810 --> 47:22.810
关于样式有什么处理

47:22.810 --> 47:24.810
它是一块大的知识点

47:24.810 --> 47:25.810
关于兼容性有怎么处理

47:25.810 --> 47:27.810
又是一块大的知识点

47:27.810 --> 47:29.810
就后边那种玩意

