WEBVTT

00:00.820 --> 00:08.220
这节课呢咱们来利用我们学过的知识啊来做这么一个效果啊叫做酷炫的数字查到特效

00:08.860 --> 00:17.140
这个效果呢之前呢在公开直播课里边我也讲过啊只不过呢那个时候呢跟什么webpack里面什么关系的啊就是用原生的解释写的啊

00:18.340 --> 00:27.780
我们这节课呢就利用webpack来写一次让大家体会一下啊webpack有了webpack之后呢我们开发呢会做出哪些改变啊会给我们开发做出

00:28.380 --> 00:29.380
造成什么样的改变

00:30.660 --> 00:34.260
之所以呢我的课经常会去加一些练习

00:35.260 --> 00:41.340
原因呢是不知道不是说我真的要去让大家去熟悉这个效果怎么去使用 这是吃药的

00:42.620 --> 00:47.460
重要的是通过这些练习的帮大家体会一下我们学过的知识它的意义在哪

00:48.580 --> 00:51.620
不然学过东西我们不知道它的意义在哪 学到就没意义了

00:52.500 --> 00:57.300
而且呢通过这个练习呢让大家能够更加深刻的去认识到他能解决什么样的问题

00:58.100 --> 01:05.740
如果说你之前学过webpack啊那现在只是来学这个课呢来做复习的话那么这些课呢可以直接略过也行

01:06.540 --> 01:14.100
不过呢我还是强烈建议你看一下 特别是对于刚刚接触未拍的同学一定要去看一下 而且呢不但要看

01:14.620 --> 01:20.020
下来还要去跟着做一下 那么加深你就对这个技术的理解啊练习是非常重要的

01:20.420 --> 01:26.700
所以我们学我认为啊在我的课程里面反复给大家灌输的就是学东西呢要慢一点不要着急啊

01:26.820 --> 01:31.980
慢慢把基础打扎死了 打扎死了过后呢你学后边的课程的时候呢你才学得得心印射

01:33.020 --> 01:40.580
好 这个效果呢我们先看一下吧啊 就是不断的去产生数字啊 不断产生数字 点击过后呢可以暂停

01:41.380 --> 01:48.940
好 暂停过后呢再点击就可以产生了啊 而且呢每一个有些数字呢你看你会发现了有些数字呢他是有一些特特别的颜色

01:49.500 --> 01:57.540
这些什么数字呢就比较特殊的数字叫做自数啊 叫做数数 什么叫数数呢 就是能够被一和自身整除的数叫做数数

01:57.820 --> 02:03.940
只能够被一和自身整除的数叫做数数啊 以后呢我会讲解说啊 就这么一个效果 没了啊 没了

02:05.580 --> 02:11.500
那么接下来呢 我们要做的事情是什么呢 就是我们把工程建立好了 我们要用未拍来实现

02:12.460 --> 02:15.260
首先呢 我们找到这啊 找到我们的工程

02:16.060 --> 02:22.220
这个文件夹进去 首先干嘛 要初始化工程 对吧 哎 我们右键呢用git pass here

02:24.140 --> 02:25.140
ok 我们这里

02:26.180 --> 02:31.100
找到 好放大一点啊 首先我们用npm啊 in列制

02:32.060 --> 02:38.140
实际上我们运行的时候需不需要什么 初始化这些东西呢 不需要啊 这些呢都是为未拍个服务的

02:38.460 --> 02:43.780
因为未拍可能他是在运行在漏的环境里边 他打包的时候呢 需要这个漏的环境啊

02:44.700 --> 02:50.420
而且呢 他夹载这些模块啊 第三方模块也需要这个漏的环境 所以说也需要用npm去安装包

02:50.580 --> 02:57.100
所以说我们还是要初始化一下 真正打包完了过后 他就跟未拍可能他就跟着什么漏的环境没有任何关系了

02:58.420 --> 03:02.740
啊 运行啊 就初始化一下啊 这里就是test嘛 随便

03:03.740 --> 03:13.740
ok 倾口一下 好 接下来呢 我们还是在这里啊 给他做一下配置 一个是dev 就是我们开发开发阶段呢 我们是运行的命令是为拍

03:14.940 --> 03:17.180
啊 mod 怎么呢 development

03:18.020 --> 03:24.500
development 好 然后呢 部署阶段就是我们开发完了过后呢 我们使用这个命令啊 为拍

03:25.420 --> 03:25.780
mod

03:26.220 --> 03:29.340
production ok 我们把这个配置一下

03:30.220 --> 03:32.900
好了 配置好了啊 接下来我们安装什么 安装未拍

03:33.820 --> 03:39.580
npm i 横杠地 不要忘记了啊 开发一旦未拍未拍 city

03:41.460 --> 03:42.260
好 安装一下啊

03:45.420 --> 03:55.420
每次感觉这么慢啊啊 不所谓 反正安装嘛啊 然后呢 我们在这里见那个文件夹src 这是我们的入口 入口文件对吧 英德克斯的js

03:55.620 --> 04:05.700
这是我们入口文件 那么这是我们的开发阶段写的文代嘛 然后最终的会打包成形成 最终都会打包到哪 是不是打不到地色这个目录 对吧 地色的目录 ok

04:07.140 --> 04:12.500
好 这个东西 我不知道不知道怎么回事啊 ok 搞定了啊 搞定了

04:14.220 --> 04:20.180
好 然后呢 我们来试一下吧啊 试一下打包 哎 我们这里是用npm 软

04:20.940 --> 04:21.660
什么 第五

04:22.700 --> 04:30.020
然后运行这个未拍啊 more 等于development 啊 完成打包 是不是打包了一个madele js 对吧 当然我们的代码什么都没有啊 什么都没有

04:31.580 --> 04:41.380
啊 然后我们会有一个页面 页面在哪呢 页面我们也可以把把放到地色目录啊 就总之呢 地色目录里边放的东西就是最重要运行的 最终运行的东西全部在地色目录下面

04:41.820 --> 04:47.020
好 ok 我们页面呢 直接放进来啊 一个页面呢 我就不不去重新写了啊 直接

04:47.780 --> 04:50.260
copy一下吧 啊 copy一下

04:52.220 --> 04:54.500
这里呢 我们直接把这个

04:55.580 --> 04:58.900
整个copy一下啊 能不能整个copy啊

05:00.700 --> 05:05.340
这样吧 这样 我直接把这个这个页面啊 直接拿过来

05:07.700 --> 05:16.300
哎呦 怎么卡住了 好 这里直接拿过来啊 代码全部复制一下啊 ok 在这里面建立一个index的设定

05:17.140 --> 05:19.060
好 然后呢 粘贴过来啊 粘贴过来

05:20.780 --> 05:24.180
ok 那么这里央视的一些都有啊 央视的一些都有 怎么结构都有

05:24.580 --> 05:31.540
然后呢 引用的GS就不是在引用index这条GS的 引用的是什么 魅调GS啊 我们最重要运行的魅调GS啊 引用这个

05:32.020 --> 05:37.100
好 那么这个页面就先建好了啊 这个页面怎么运行呢 你可以到这个我念甲里边去双击打开

05:37.900 --> 05:44.980
啊 也可以呢 用这个我们安装的vscode插件啊 open with live server打开 无所谓啊 就跟我们以前是一样的 没什么关系

05:45.260 --> 05:51.700
没什么关系 唯一的区别就在哪儿啊 唯一的区别就在于这个介页是文件 是通过webhack生成的 其他都没有任何区别啊

05:52.100 --> 06:02.420
我们打开这个文也免啊 就这个样子 好 那么我们到时候数字加在哪呢 加在这里边啊 比方说这里边我们使用一个span 就是一个数字啊 1 再来个10变 就是2

06:02.980 --> 06:11.300
就加在这里边 你看 哎呦 不对不对 不对不对 不对不对 这里边是数字啊 1 这里边有个div center 对吧

06:11.660 --> 06:15.500
然后我们的就是上面的数字加在这啊 1 失败

06:17.180 --> 06:20.980
二 到时候用介式加啊 你看是不是加在这 对吧 就这么简单

06:21.500 --> 06:25.060
ok 那么这里呢 把去掉啊去掉

06:26.140 --> 06:28.100
这是中间的这一部分 这是上面的就是

06:29.180 --> 06:29.860
每一个数字

06:31.140 --> 06:34.220
好 那么今天我们开始写代码 写代码在哪儿写 肯定不在这里边写了

06:34.740 --> 06:39.940
以前我们是就是在这里边写对吧 直接在这里边写代码 现在不了啊 因为这里边写代码了

06:40.300 --> 06:45.260
没有那么优雅啊 用魔化化来会造成 造成很多问题 所以说呢 我们这里呢

06:45.900 --> 06:53.300
写代码怎么写呢 在这个src目录下面去 让为派给我们帮我们打包 打包生成到这个地方啊 生成到魅脚结石

06:53.660 --> 06:59.020
它会进行合并啊 至于合并的结果我们不太关心 我们只关心我们开发阶段的代码

06:59.900 --> 07:03.340
那么这里边呢 我们就可以充分的去利用魔化化来进行细分

07:03.700 --> 07:07.980
比方说我们刚才这个功能 你可以看到这个功能里边呢 至少有个什么样的功能

07:08.380 --> 07:15.660
至少的有一个功能是什么 就是判断一个数 是不是一个数数 对吧 数数它要高量显示 对不对

07:15.980 --> 07:22.980
要判断一个数 是不是数数 好来吧 我们这里呢 新建一个文件夹 给他取名为UTO 比方说一些工具

07:23.620 --> 07:30.020
这些工具呢 可以提供一些东西啊 能够帮我们来进行一些处理 比方说我们这里新建个文件 给他取名为easeprime

07:31.700 --> 07:32.220
第二件事

07:33.100 --> 07:43.460
是不是一个数数 形成这么一个接下来吗 OK 那么这里边 我们是不是可以导出导出一个函数来帮我们判断 是不是一个数数 对吧 是不是可以导出

07:43.860 --> 07:51.860
那么这个导出的话 可以利用common.js 也可以利用es6 都行 比方说这里我们用es6啊 export default

07:52.780 --> 07:57.620
导出什么 导出一个函数 你给我一个数字 我来判断n是不是一个数数

07:57.780 --> 08:13.180
判断n 是否是数数 什么叫做数数 数数的概念是什么 仅能被1和自身整出

08:14.660 --> 08:25.060
比方说 比方说啊 比如说这个数字3 三是不是数数呢 是 为什么呢 因为他能整出3的只有1和3 是不是只有1和自身

08:25.580 --> 08:33.020
其他的数字是不是都不能整出3 那么3是一个数数 比方说5是一个数数 他只能被1和自身整出 是吧

08:34.380 --> 08:38.460
那么换句话说 怎么来判断一个数 是不是数数呢 这样呗

08:39.260 --> 08:45.820
我们就从2开始到他自身简移之间去循环 看一下有没有一个数能整出他

08:46.780 --> 08:52.340
他不是只能被1和自身整出吗 如果说2到4之间能够找到一个数能整出他 他是不是

08:52.740 --> 08:54.980
就不是数数啊 比方说像这个6

08:55.780 --> 09:01.860
6是不是数数呢 就不是 为什么 因为2到5之间是不是能够找到一个数能整出6 是不是找到2

09:02.180 --> 09:08.500
对吧 是不是除了1和自身之间 还有一个数能整出他 他就不是数数啊 大家自己去梳理一下啊

09:09.140 --> 09:13.620
因此判断数数代码怎么写呢 判断数数代码 我们可以一个循环啊

09:14.140 --> 09:19.220
i等于几呢 i等于2开始 小于几呢 小于n-1啊 小于等于

09:20.180 --> 09:22.500
小于等于n-1 或者是小于n都行

09:23.780 --> 09:25.820
2到他自身简移之间

09:26.620 --> 09:29.620
看一下有没有一个数能整出他呢 判断一下

09:30.060 --> 09:38.180
如果说我发现了其中有一个数 除以i等于0 于数为0 那么表示能整出对吧 是不是发现了啊 发现

09:39.060 --> 09:40.940
2到n-1

09:41.700 --> 09:43.700
1之间

09:46.500 --> 09:56.540
有一个数能整除n 那么这样子的n是不是数数呢 它就不是 因为数数只能是1和自身能整出 其他都不能整出

09:56.860 --> 10:00.340
说这个东西是不是数数就force 而就不是数数 就这么简单

10:01.780 --> 10:10.660
如果循环结束过后都还发现不了 都还没有发现一个数能整出他 说明什么 说明2到n-1之间找不到一个数能整出

10:10.820 --> 10:15.420
因为找到的他就返回了 对吧 那么找不到是什么 他就是数数啊 就这样判断

10:18.210 --> 10:22.170
当然还有一些特殊情况 什么情况呢 就是说如果说n小于了

10:23.210 --> 10:25.130
小于了紧了 小于了2

10:25.930 --> 10:31.490
小于了2 因为2是最小的数数 比方说1 一就不能算数数了啊 一就不能算数数了

10:32.290 --> 10:36.770
因为1和1和自身是一样的 一就不能算数了 我们认为最小的数数就是2

10:37.130 --> 10:40.610
所以小于的2是不是数数呢 也不是 加个判断就完成了

10:41.490 --> 10:49.530
这就是一个判断数数的代码 于是呢 我把它封装到哪 封装到是不是 封装到一个模块里面 对吧 这个模块里 专门来判断一个数 是不是数数

10:50.210 --> 10:56.170
好 那咱们来测试一下呗 好 这里呢 我们index里边 我们这是入口文件啊 来测试一下require

10:57.050 --> 11:04.050
哎呦 不能用快快啊 当然可以可不可以用可以 但是我们不要精神分裂 既然用了es6的模块化 我们就用一个s6的模块化

11:04.570 --> 11:05.050
esprin

11:07.050 --> 11:11.650
from dollar from utl 下面的esprin

11:12.370 --> 11:15.770
ok 我们来判断一下啊 输出esprin

11:16.610 --> 11:26.130
看一下这个2是不是数数呢 然后看一下这个3是不是数数呢 看一下4是不是数数呢 看一下5是不是数数呢 对吧 来输出一下 判断一下

11:27.010 --> 11:30.090
好 那么写完了过 运行 能不能在这里运行

11:30.810 --> 11:40.250
肯定不行 因为我们这里呢 只是我们的开发阶段代码 对吧 它是不拆运运行的 它要打包 打包到电视里面 没点解释 然后这个真正运行的是他

11:41.010 --> 11:48.210
啊 一看页面上引用的也是不是也是他 对吧 页面上引用的是这个没点解释 所以说呢 我们这里要打包 来吧 打包 np

11:48.810 --> 11:51.090
就是npm run 电

11:52.330 --> 11:52.570
打包

11:54.210 --> 11:59.530
好 打包完成 然后呢 我们看一下啊index 因为我们用的是插件啊 用了一个nf server插件

11:59.570 --> 12:05.730
只要这个MediaJS一改动 一看打包完了过 它是不是被改动了 他一改动的话 那么页面会重新刷新

12:06.210 --> 12:15.770
所以说我们看一下这边 点击右键 检查 控制台 你看 是不是 to to force to 说明什么呢 说明我这里的输出的数数呢 2是一个3是一个4不是

12:17.090 --> 12:20.770
是一个输出啊 to force to 那么我们就通过这样的方式来测试

12:22.090 --> 12:29.170
好 那么这样的方式测试是不是感觉有点麻烦啊 对吧 是不是有点麻烦 为什么呢 因为我每一次改动代码 一看我们开发阶段

12:29.170 --> 12:38.370
要不断的去加加文件加代码 不断的去改动代码 每改动一时是不是都要去运行一下这个命令 然后重新打包 对吧 特别麻烦啊

12:38.970 --> 12:43.810
因此呢 有没有更好的办法呢 有没有更好的减少麻烦的办法呢

12:44.570 --> 12:51.610
将来呢 我们可以学习很多的办法 可以减少这个麻烦 就目前这个阶段的话 我告诉大家啊 有一种方式可以减少这个麻烦

12:52.050 --> 12:56.370
什么呢 就是在我们的命令里边 我刚才不是运行的这个命令吗 对吧

12:56.930 --> 12:58.930
好 加上一个参数叫做

13:00.170 --> 13:03.370
两个横杠 Watch Watch什么意思

13:05.730 --> 13:07.810
啊 Watch什么意思 Watch表示监控

13:08.890 --> 13:18.410
监控文件的变化 文件只要一变化啊 就是我们的src目录下面这些文件只要一变化 它会重新自动的重新进行打包

13:18.890 --> 13:25.970
啊 就不用不用我们手动的去输入这个命令了 好你看着啊 我们加了这个参数过后 我们再运行npm ronde

13:26.930 --> 13:28.370
啊 相当于就是运行的这个对吧

13:29.370 --> 13:35.570
他完成打包了 完成打包过后 你看他是不是没有回到命令行 那么是不是一直在这里停顿了

13:36.170 --> 13:43.410
停顿了 他说什么 他说wepack也是watching 正在监控文件 那么现在呢 我们再试一下

13:44.210 --> 13:47.170
如果说我把这个应这个手文件改一下再加一个 加一个6

13:48.250 --> 13:49.370
保存 你看一下

13:50.810 --> 13:55.890
啊 他是不是又重新打包了啊 那可能看的不是很清楚啊 下面又重新进行打包了

13:56.490 --> 14:01.810
那么现在我们看一下 是不是多了一个force 多了一个force 再来我们加一个7

14:03.050 --> 14:03.410
保存

14:06.090 --> 14:12.170
太快了啊 太快了 大家看见不清楚 他实际上又重新打包了 又重新打包了 然后快是不是多了一个去

14:12.730 --> 14:18.530
对吧 OK 那么这样子呢 我就没有必要每一次去运行这个命令了 他就一直在处于监控状态

14:19.650 --> 14:22.370
好 那么这也是一个小技巧 加上一个watch

14:23.330 --> 14:24.810
好 那么接下来我们来继续啊

14:26.770 --> 14:29.570
现在呢 我们这里呢

14:32.010 --> 14:38.890
我看一下啊 那么现在呢 我们把这个这个模块已经写好了 因为我们的功能里边呢 有监控是不是一个数数

14:40.090 --> 14:45.330
然后呢 我们看一下这个里边 我们今天把功能拆分细啊 拆分细一点 好还有什么功能呢

14:45.850 --> 14:54.930
你会发现他这里颜色是不是水积的 对吧 每一个数数的颜色是水积的 好 那么我们可能需要一个模块来产生一个水积的颜色

14:56.130 --> 14:57.810
好 那么这里呢 我们又写个模块

14:59.490 --> 15:01.050
叫做get

15:01.690 --> 15:02.050
red

15:04.050 --> 15:05.090
或者叫做red

15:06.050 --> 15:14.970
color color 点解释 那么这个模块呢 主要用来产生一个水积的颜色 好 那么一个颜色到底是怎么水积的呢 我是这样子的啊

15:15.410 --> 15:21.050
我把之前那个公开直播课里面解释打开 其实我颜色呢是定了一个数组

15:21.930 --> 15:25.330
他在数组里面水积产生一个啊 也说我这里呢有一个数组

15:26.450 --> 15:33.130
我在这个数组里边随便取一个颜色啊 那么这里呢 我肯定要导出一个函数 最终导出export default

15:33.810 --> 15:38.050
导出一个函数 能够干嘛呢 能够惨 能够反而回一个水积颜色

15:40.250 --> 15:40.770
反而回

15:42.370 --> 15:48.490
一个水积的颜色 好 那么怎么来水积呢 是不是产生一个水积下标 对吧 水积下标

15:48.970 --> 15:54.970
那么产生水积下标的话 是不是我们又要利用一个函数啊 根据一个最小的一个最大值 对吧

15:54.970 --> 16:02.250
来产生一个水积下标 ok 那么我们再写个函数啊 那么这是内部实现了啊 我就不导出了 这是内部为了产生水积颜色

16:02.570 --> 16:07.570
而写的函数 你看模块发的好处就在于你里边随便怎么写 他不会污染全局变量的

16:08.170 --> 16:14.330
好 那么这里呢 max flow 这个大家没什么好说的啊 大家学到现在这个阶段的啊 应该都学过

16:14.930 --> 16:15.570
max减密

16:17.410 --> 16:21.290
加上密 ok 那么这里是产生一个水积的整数

16:21.930 --> 16:27.210
好 那么我们如何来产生个水积的颜色呢 特别简单 我们首先产生个水积在下标啊 get right

16:27.970 --> 16:32.490
最小值是什么了 下巴最小值是0 最大值是什么了 最大值是carlors

16:32.930 --> 16:40.130
对吧 啊 因为他取不到最大值 所以说我们直接传那是就行了 相当于是0到他那是简一之间 随便随机取一个下标

16:40.730 --> 16:42.770
好 然后呢 我们直接返回carlors

16:43.450 --> 16:51.250
index 那么这样子的就写好这么一个函数 这个函数可以用来干嘛 产生一个水积的颜色啊 又来测试 我们写好一个东西就来测试

16:51.610 --> 16:53.330
到入口文件里边去测试一下啊

16:54.370 --> 17:01.850
red color 其实这个地方的名字呢 可以随便写啊 无所谓的 只不过呢 我们通常的是其他 跟那个模块的名字呢一样

17:02.650 --> 17:06.490
好 那么这是一个函数啊 我们输出

17:08.770 --> 17:11.290
red color 他没有参数

17:12.930 --> 17:18.730
多来几次啊 保存啊 因为他自自动给你玩 因为他的真的监控文件嘛 所以他会自动给你完成

17:19.170 --> 17:26.810
编译 打包 所以说他自动会更新这个 卖点接试 卖点接试一更新 我们那个插件啊 这个neve server这个插件

17:27.250 --> 17:30.930
他发现啊 这里卖点接试更新了 更新了过后呢 他会自己刷新页面

17:31.490 --> 17:36.730
所以说我们这里直接看到结果了 对吧 这不可以产生水积的颜色 好那么这个模块也写好了

17:38.330 --> 17:44.890
还有什么样的模块呢 我们这里呢会发现 还有一个模块就是什么呢 就是他要不断的产生数字

17:45.850 --> 17:51.850
他有一个计时器可以不断的产生数字 而且呢 这个计时器呢 可以开始又可以停止 你看是不是可以暂停

17:52.450 --> 17:56.570
对吧 我们先不考虑什么页面不页面 就模块尽量拆分细一点

17:57.490 --> 18:03.770
我们不考虑什么往页面上加数字啊 这些动画啊 先不考虑这些东西 我们只考虑什么了 只考虑

18:04.410 --> 18:06.650
哎 我们只考虑什么了 只考虑

18:07.770 --> 18:14.490
不断的产生数字啊 不断的产生数字 而且呢 这个产生的过程呢 是可以暂停的 所以说呢 我们又可以写个模块

18:15.530 --> 18:21.900
又可以写个模块 啊 比方说 这里呢 我们可以叫做

18:23.020 --> 18:23.580
呃

18:25.660 --> 18:33.340
男本啊 男本的解释 那么男本的解释呢 他做什么事情呢 他做的事情就是哎 不断的产生数字 他导出什么呢

18:34.540 --> 18:39.660
export default导出一个对象 这个对象里面提供了两个方法 一个是start

18:41.260 --> 18:44.620
啊 当然我们现在学es6了 对吧 可以这样子写啊 start

18:47.420 --> 18:49.100
然后呢 还有什么方法呢 还有一个stop

18:50.060 --> 18:53.740
是不是停止啊 一个开始一个停止 对不对

18:54.780 --> 19:02.940
没问题吧 咱们可以产生这么一个对象啊 产生这么一个对象啊 或者呢 我们也可以给他给他一个构造函数也可以

19:03.340 --> 19:09.660
啊 给他一个就是内 然后他去创建一个就这么一个计时器对象啊 比方说我们取名为number timer

19:10.140 --> 19:10.620
这么一个

19:11.180 --> 19:19.340
呃 呃 够这么一个构造器啊 这么一个就是内 那么通过创建这个内的对象呢 能够里边还提供了两个方法 一个是start

19:20.300 --> 19:26.940
啊 一个是stop 对吧 也可以啊 都想看你怎么去处理啊 无所谓 随便你怎么处理 导出什么 无所谓

19:27.900 --> 19:33.980
好 那么比方说我们用内嘛啊 这样好像我们可以把稍微把它变得 因为本来效果很简单啊 稍微把它变得

19:35.180 --> 19:36.060
呃 复杂一点

19:37.020 --> 19:39.500
顺便 顺便学习一下一个内的使用方式

19:40.780 --> 19:45.740
好 那么这个构造函数里边 我们要传啥呢 啊 构造函数里边 我们可以让他传一些东西

19:46.220 --> 19:53.180
比方说间隔时间 多少间隔我产生一个数字 对吧 给他让他传一个间隔时间啊 就deration

19:54.140 --> 19:55.500
产生个间隔间隔时间

19:57.340 --> 20:03.020
间隔时间为多少呢 间隔时间为啊 默认值 比方说是500毫秒

20:03.660 --> 20:08.460
500毫秒产生一个数字 ok 我们把这间隔时间好 我们把它保存到deration里边去

20:09.420 --> 20:12.940
啊 这个没问题吧 啊 非常简单

20:13.500 --> 20:20.140
好 那么开始 如果说开始产生数字的时候呢 我们怎么办呢 开始产生数字的时候呢 是不是就是一个set interval

20:20.620 --> 20:22.300
对吧 set interval

20:23.100 --> 20:28.060
好 开始产生数字 嗯 然后呢 这里边啊deration传进来

20:28.540 --> 20:34.380
对吧 没问题吧 开始产生数字 那么产生的数字产生多少个 产生的数字

20:35.340 --> 20:37.340
有多少 呃 当前的数字是什么呢

20:38.620 --> 20:42.540
数字是什么 当前的数字是什么 所以每一次数字要加一

20:42.540 --> 20:48.220
因此呢 我们得有一个东西来记录当前的数字啊 所以说我们在构造器里边呢 给它加一个啊

20:48.220 --> 20:52.540
number 表示当前的数字 从几开始呢 从一开始啊

20:53.340 --> 20:55.740
当前的数字啊 从一开始

20:56.700 --> 20:59.420
好 那么每一次产生数字过后要干嘛呢

21:00.540 --> 21:04.380
产生的数字过后要干嘛 我们看到这个数字是不是要加到页面上去

21:04.540 --> 21:09.260
但是呢 我们这里呢 尽量让它通用 也让它写魔化化的时候 你尽量考虑通用

21:09.900 --> 21:14.140
那么以后呢 不一定是讲到页面上 我鬼知道他要干嘛 我也不知道他要干嘛

21:14.620 --> 21:17.500
所以说呢 产生的数字过后他要干嘛 实际上是不知道的

21:18.140 --> 21:21.260
你们学到现在了啊 应该知道这种情况该怎么处理的

21:21.660 --> 21:24.700
就是说我做了一件事 我知道有一件事情发生了

21:25.100 --> 21:30.060
我产生了一个数字了 那么这个过后要干嘛 我不知道是不是要用回调含说

21:30.700 --> 21:32.300
ok 那么我希望呢

21:33.180 --> 21:35.900
我希望了他能够干嘛呢 他能够给我

21:36.380 --> 21:38.700
某一个属性负责 比方说叫做

21:41.420 --> 21:41.900
number

21:43.100 --> 21:43.580
created

21:44.380 --> 21:46.140
当一个数字产生的时候呢

21:48.860 --> 21:53.740
当一个数字产生的时候 就是当一个数字产生的时候

21:54.460 --> 22:00.940
要调用的回调含说 就是我希望了他给这个属性负责 给他负责为一个含说

22:01.340 --> 22:02.940
那么这个含说呢 他能够

22:04.620 --> 22:07.660
监听到某一个数字产生的 那么他就会运行这个含说

22:07.980 --> 22:10.940
所以说 这里当数字产生过后呢 我要干嘛呢

22:11.580 --> 22:14.300
我要干嘛 我就要调用这个含说 对吧 我要调用这个含说

22:14.380 --> 22:16.860
首先判断一下 on number created有没有

22:17.340 --> 22:21.100
如果有这个含说的话 你给我设置了这个含说 ok 我调用这个含说

22:21.420 --> 22:24.860
然后呢 我把数字什么 数字告诉你 什么数字呢 数字就是number

22:25.180 --> 22:27.340
对吧 我把number这个数字告诉你

22:28.300 --> 22:32.140
然后呢 他是不是一个数 因为他可能对一些数数啊 对一些

22:32.620 --> 22:38.700
数数还要进行处理啊 那么他到底是不是一个数数呢 我可以通过我们之前的模块进行判断

22:39.340 --> 22:42.700
我们这里导入 isprame 我之前写过的这个模块对吧

22:44.060 --> 22:47.900
isprame ok 那么我们这里判断一下这个 isprame this

22:48.620 --> 22:51.580
number 那么这样子调用这个含说是不是传了两个参数进去

22:52.140 --> 22:53.980
这个数字本身已经呢

22:54.700 --> 22:59.900
他是不是一个数数 对吧 是一个true 或者是false 对吧 是不是把他这两个信息都给他了

23:00.140 --> 23:05.500
那么他接下来他要怎么来处理这个数字 无所谓 他自行进行处理

23:05.740 --> 23:09.100
总之我调用这个回调含说就完事了 好 调用完了过后干嘛

23:09.980 --> 23:14.780
this number 加加 是不是数字加一 那么下一次的时候是不是又产生一个新的数字

23:15.260 --> 23:19.100
对吧 ok 那么这就是start 含说

23:20.060 --> 23:25.100
那么一会我要暂停怎么办了 暂停是不是得清空之前的这个timeout 对吧

23:25.340 --> 23:30.540
ok 那么这里是不是要保存那个timeout 对不对 ok 那么我们这里设置一个timeout

23:30.940 --> 23:32.620
timeout id 为now

23:34.140 --> 23:37.740
好 产生的时候干嘛呢 产生的时候timeout id 给他复职

23:38.060 --> 23:41.820
产生的时候给他复职 当然那你为了避免重复产生 你还可以判断一下

23:42.140 --> 23:47.580
如果说timeout id有值的话 那么我就什么都不做 什么都不做 这些东西都是常见的处理方式

23:48.300 --> 23:52.140
如果说你已经已经在产生数字的 ok 我就什么都不做

23:52.380 --> 23:56.060
如果说你没有产生数字 ok 我给你产生数字把timeout 记录进来

23:56.620 --> 24:01.900
那么停止的时候怎么办了 停止的时候就无非就是clear interval 对吧 this timeout id

24:02.620 --> 24:05.660
好 然后呢把timeout id设为 now

24:06.220 --> 24:10.380
不对啊 不就对了吗 对吧 那么这就这就形成了这么一个构造函数

24:11.740 --> 24:16.540
好 来用一下啊 来用一下 在in这个设里边 我们现在导入的是什么呢 导入的是

24:17.500 --> 24:23.420
叫做number timeout 导入这个

24:25.260 --> 24:31.260
来自于number ok 我们这里呢就创建了每个对象 创建了每个对象

24:33.660 --> 24:36.060
n 六一个number timeout

24:36.860 --> 24:41.580
他要问你要问他要问你啊 间隔时间是多少 间隔时间我用摸认值嘛

24:42.380 --> 24:47.580
ok 那么现在呢 我们来做这么一个处理 n number created

24:47.980 --> 24:53.580
当我们一个数字产生的时候 他要给我传两个参数 一个是数字本身 一个是是不是数数

24:53.900 --> 24:56.620
他给我 我们输出一下 n is prime

24:57.500 --> 25:01.580
你看一下 然后呢我们启动 start 启动

25:02.860 --> 25:04.620
好 保存啊你看一下 这边

25:05.820 --> 25:10.220
你看 是不断的产生新的数字对吧 而且他会告诉你这个数字是不是输出

25:10.700 --> 25:14.620
那么接下来你要拿这个数字干嘛 随便你 随便你干嘛

25:15.420 --> 25:17.900
这是把模块拆分的更加精细了

25:18.700 --> 25:23.740
他就 他干嘛 他就传承数字 什么往页面上加跟他没关系 他就使用回调函数

25:24.540 --> 25:27.900
来去调用一个函数 你要做什么事情 你自己去做 我不管

25:28.540 --> 25:33.660
那么我这里只缺一个函数复制 复制完了过后呢 他这边就会在合适的时候去调用这个函数

25:34.540 --> 25:40.380
原来的意思嘛 那么这样子就完了 当然你可以在合适的时候呢 调用什么 调用stop

25:40.860 --> 25:45.740
调用stop 然后停止 当然我这里现在调用不了了 调用不了

25:47.340 --> 25:53.020
比方说吧 我们set timeout 五秒钟之后 五秒钟之后 调用什么end stop

25:54.540 --> 26:02.940
好 保存 我看一下吧 你看是不是停止了 对吧 停止了

26:02.940 --> 26:06.700
当然你如果说你觉得他产生的数字太慢了 那么你这里呢 可以给他

26:06.780 --> 26:09.980
100毫秒产生一个 是不是就变快了 对吧

26:10.860 --> 26:18.140
变快了 这个东西可以自行调整的 那么我们就形成了这么一个模块 如果这个模块 是不是我们就可以轻松地来产生数字的

26:19.020 --> 26:23.500
对不对 好 那么这一个模块搞定了 就是以后开发的时候呢 你会发现

26:23.820 --> 26:29.660
用这种模式来进行开发 摘一复杂 摘噁心的问题 你都可以一步一步把它完成

26:31.750 --> 26:35.750
好 接下来呢 我们要做什么的事情呢 接下来我们要做的事情就是

26:36.630 --> 26:43.430
要往这个页面上夹东西了 要往页面上夹东西了 页面上夹的是什么 是不是一个数字一个数字往上夹的

26:43.910 --> 26:48.310
对吧 是不是一个数字一个数字往上夹 好 咱们又来呗 又来呗

26:49.350 --> 26:50.070
好 我们这里呢

26:51.110 --> 26:58.550
YouTube里边 或者我们再接个文念夹 尽量把它分析也可以 配级 就是跟我们页面相关的代码

26:59.110 --> 27:02.790
好 页面相关的代码 比方说我们这里写个模块 就是往页面上加一个数字

27:02.950 --> 27:08.790
ADD 叫做Append 呗Append Number 就是JS

27:09.990 --> 27:18.070
好 那么比方说啊 这里 我们这里可以导出export default 导出什么 导出一个函数

27:18.710 --> 27:23.670
哎 你给我一个数字 你给我一个数字 并且的告诉我是不是数数

27:24.710 --> 27:30.550
是不是数数 这么一个函数 你给我一个数字 并且告诉我这个数字呢 是不是一个数数

27:31.030 --> 27:34.390
然后我干嘛呢 我把这个数字呢 夹到页面上去

27:35.430 --> 27:40.550
夹到页面上去 就说这么一件事 那怎么夹呢 你看啊 我们的页面上

27:41.110 --> 27:45.590
不是有两个DIV吗 对吧 一个ID为DIV 抗天的 OK 我们把这些DIV都获取了

27:46.470 --> 27:50.150
DIV 抗天了 对吧 这个东西就专门来处理跟页面相关的

27:50.150 --> 27:53.670
你看 跟以前的开发就完全是两个感觉了 感觉都不一样了

27:54.230 --> 27:59.910
啊 这次分的更加细致 那么这种东西呢 才是真正的是大型项目的开发方式

28:00.710 --> 28:01.430
DIV Center

28:03.750 --> 28:09.270
那么这里其实这两个东西还可以细分 一个专门来搞定中间的一部分 一个专门来搞定

28:09.910 --> 28:17.910
搞定这一部分 对吧 看怎么怎么去想 OK 那么这样子呢 你看着啊 我怎么我怎么来处理这个问题

28:19.270 --> 28:23.270
现在呢 我们要加一个数字 加谁的数字 是不是数字就是他 这是我要加的数字

28:24.230 --> 28:29.110
我要加的数字 然后呢 我怎么来加 是不是我们首先往DIV Container里边

28:29.670 --> 28:38.550
Append Child 添加一个什么了 添加一个识办元素 对吧 OK 那么这里我们生成一个识办元素 document create

28:39.990 --> 28:45.350
Element 创建一个识办元素 好 创建个识办元素 识办元素的内容呢

28:45.910 --> 28:52.630
Inner Text 内容是不是就是一个数字 N 对吧 然后呢 把这个识办元素加到这个DIV Container里面去

28:53.190 --> 28:58.630
对不对 是不是加进去啊 加到这个DIV Container 就加到这里这个DIV里面去 对吧

28:59.750 --> 29:02.630
OK 那么现在我们试一下啊 边做边看 试一下

29:03.750 --> 29:13.430
好 那么比方说吧 我们这里呢 不断的产生数字啊 比方说我们这里就500毫秒一个吧 不断的产生数字 没产生一个数字呢 我调用这个

29:14.310 --> 29:20.390
Import Append Number From Page Append Number

29:21.350 --> 29:26.470
那么我们调用这个函数 这个函数里面把数字给他 然后是不是数数也给他

29:27.350 --> 29:28.390
好 咱们来试一下

29:30.390 --> 29:37.430
你看数字是不是加进来了 对吧 就加进来那边啊 就每一个函数搞定自己的事情啊 因为五秒钟之后就停止了

29:38.470 --> 29:45.830
那么现在还有一个问题就是 那么数字的颜色是不一样的 反而是遇到数数的时候呢 它的颜色可能会有差别

29:46.150 --> 29:50.630
那么这里是不是要判断 哎 如果说你给我传的是一个数数

29:51.910 --> 30:02.950
那怎么办呢 如果你给我的是一个数数 那么我是不是哎 我要去产生一个随机的颜色 那么随机的颜色是不是要导入导入模块啊 但是我们最好按照习惯性的书写方式

30:03.190 --> 30:05.990
就是es6的模块的话导入呢 放到最前面

30:06.550 --> 30:10.950
好 那么这里只想没写好的模块在哪呢 在这啊 red color

30:11.910 --> 30:16.630
from 返回上级目录啊 ut 下面的 red color

30:17.590 --> 30:20.390
好 那么这里的有个函数啊 产生一个颜色

30:21.030 --> 30:28.070
那么给这个十变的style color 重新复制 复制为什么呢 复制为red color 产生一个随机的颜色

30:28.630 --> 30:31.190
对吧 好 ok 那么在现在再来看一下

30:31.910 --> 30:35.110
你看 是不是搞定了 对吧 哎 搞定了

30:36.070 --> 30:40.950
好 当然了 也可以 也可以怎么样呢 也可以把这个随机的颜色啊

30:41.590 --> 30:45.590
随机的颜色呢 放着吧 放着吧 以后再说

30:46.150 --> 30:49.830
那么还有一个问题是什么 中间这一部分是不是也要产生一个数字

30:50.390 --> 30:52.950
对吧 中间这一部分是不是也要产生一个数字

30:53.750 --> 30:58.230
好 那么中间这一部分啊 那么比方说啊 我们这里专门来写个函数

30:59.190 --> 31:01.030
create center number

31:01.830 --> 31:05.910
产生中间这一部分的数字啊 中间这一部分要产生一个数字

31:06.390 --> 31:10.950
好 那么是不是还是得把数字给我 对吧 还是要把数字给我 ok 那么这里呢

31:11.190 --> 31:14.950
就产生中间的数字 那么这里create

31:15.750 --> 31:21.990
center number 当然你可以 你可以在内部去写个函数来辅助完成 也可以不写啊 都随便你 随便你自己

31:23.270 --> 31:28.070
那么这是模块内部的东西 你自己内部搞定就行了 好 那么这里是不是把 n 传给他

31:28.790 --> 31:32.310
好 那么中间这一部分干嘛了 中间部分其实特别简单就把dav center

31:33.270 --> 31:37.510
center 然后干嘛呢 设置一下啊 我看一下这边这边是怎么做的啊

31:38.950 --> 31:45.830
保持统一吧 那么是直接试这个东西 对吧 是不是直接试这个东西 ok 那么就这里就是inner

31:47.510 --> 31:53.030
text 直接把它的数数字变成n 是不是就完了 对不对 好 咱们再来看一下啊

31:53.350 --> 31:58.390
你看 中间的数字是不是有了 对不对 中间的数字就有了

32:00.790 --> 32:04.310
没问题吧 没问题吧 好 那么再来看啊

32:10.330 --> 32:12.890
好 那么接下来呢 还有个问题就是

32:13.930 --> 32:20.570
中间的数字呢 有是有了 但是呢 你会发现 当我们遇到数数的时候 你看着啊

32:21.130 --> 32:25.690
当我们是遇到数数的时候 是不是有个东西 哎 出现那个重叠飘出去了 对吧

32:26.970 --> 32:32.810
当我们遇到一个数数的时候 是不是出现了一个重叠飘出去了 那么这个东西是怎么做到了 其实非常简单

32:34.010 --> 32:40.810
如果说遇到一个数数的情况下 中间呢 这一部分呢 除了往这个dav 里面加一个数字之外

32:41.610 --> 32:50.330
除了做这么一件事情之外 还要去新产生一个dav 也就是他的内名呢也是center 因为反而是给这个内名的话 那么他就会放到中间

32:50.810 --> 32:51.690
他就会放到中间

32:52.650 --> 32:56.650
听懂的意思吗 只要给他这个内名 他就会这个dav 他就一定在中间

32:57.290 --> 33:02.090
那么我就需要再去产生 比方说遇到一个数数 我就去再产生一个davcenter

33:02.970 --> 33:10.090
比方说数数是7 那么这里呢 给他一个颜色 style color 比方说是什么什么什么颜色

33:10.890 --> 33:16.170
那么这样子的 他是不是把它覆盖掉了 重叠起来了 然后呢 让他飘出去

33:16.730 --> 33:21.690
怎么飘出去呢 我们就可以用d用c3里面的耶稣 先比较说变形transform

33:21.690 --> 33:26.570
transnate对吧 总之呢 把他飘出去 对不对 是不是可以用这种方式

33:27.210 --> 33:30.250
是不是可以用这种方式 ok 那么这里呢回到这

33:30.810 --> 33:35.690
那么我们如果说啊 n 是一个数数 那么怎么知道是不是数数 ok 你给我传进来呗

33:36.330 --> 33:38.250
easy print 是不是数数 你给我传进来

33:39.690 --> 33:41.930
easy print 传进来是不是一个数数

33:42.490 --> 33:47.370
好 同样的你把一个颜色 因为颜色要跟这边保持一致啊 你把这个随机颜色也告诉

33:48.330 --> 33:49.850
你把这个随机颜色也告诉

33:50.570 --> 33:56.410
或者是我们分分成两两步来做吧 分成两步来做 一个是产生中间的数字这里就完了

33:56.410 --> 34:01.210
然后再来一个啊 再来一个create center plane number

34:02.410 --> 34:04.890
那把把数字给给我啊 这个表什么意思呢

34:05.850 --> 34:12.330
在中间产生一个数数 因为数数有些特殊的处理

34:13.210 --> 34:16.250
好 那么你把颜色告诉我就行了 color

34:16.810 --> 34:21.450
把颜色告诉我就行了 数字和颜色告诉我 那么这里呢 我们可以在这里进行处理

34:22.410 --> 34:25.610
因为他是数数嘛 那么这里就可以进行处理 调用这个函数

34:25.930 --> 34:29.770
那么这些内部处理的你随便写啊 随便写 你把数数字给他

34:30.330 --> 34:34.490
肯定是数数啊 颜色的颜色就是这个啊 我们这里保存一下啊 color

34:37.610 --> 34:42.650
这里color 两个颜色保持一字 好颜色告诉我 那么这个函数干嘛呢

34:42.650 --> 34:46.170
这个函数是不是要创建div document create element div

34:47.130 --> 34:50.170
好 div 那么这个div的内样式

34:52.490 --> 34:55.850
内样式class name 是不是等于center 对吧

34:56.810 --> 35:02.490
啊 我们要多加一个div在页面上 好 那么这个div呢 附个他的他的样式

35:03.290 --> 35:07.450
div style color 他的样式是什么呢 他的样式是

35:08.730 --> 35:14.250
哎 这个就是他的样式 他的颜色啊 颜色是什么呢 颜色就是一个传递的color

35:15.130 --> 35:19.930
好 那么这个div的内容呢inletex还是这个数字啊 就把这个div构建好

35:20.570 --> 35:24.010
构建好了过后 把这个div加二二 加到body里面就行了啊

35:24.250 --> 35:30.490
所以我们这里document body append child 就是你试数数的时候呢 我还要多加一个div上

35:30.650 --> 35:34.890
因为我要飘出去嘛 对吧 飘的是这个div 好 那么把这个div加进去

35:35.850 --> 35:41.610
你看一下 现在又看一下 你看 是不是把当时数数的情况下 是不是多加一个div

35:41.930 --> 35:45.450
对吧 那么现在还没有飘出去 怎么来飘出去了

35:46.410 --> 35:51.130
怎么来飘出去了 其实很简单 你就是给这个div设置一下什么 设置一下trans

35:52.970 --> 35:54.970
transform

35:55.930 --> 36:00.970
等于什么呢 等于transnate 对吧 飘 飘到哪去呢

36:01.770 --> 36:04.970
往左边飘还是往右边飘了 比方说我们飘到100

36:06.090 --> 36:13.290
100 对吧 往这边飘啊 是不是往这边飘 同时呢 他是不是要逐渐的变透明啊

36:13.770 --> 36:15.290
style什么啊

36:16.330 --> 36:17.050
opacity

36:18.410 --> 36:22.410
是不是要逐渐的变成透明啊 把它变成什么 把它变成0

36:22.970 --> 36:27.530
所以啊逐渐的变透明 一方面一边飘 一边什么变透明

36:28.010 --> 36:36.250
那么这些呢 他要有一个过程 是不是要有一个过渡啊 这些都是以前学过的啊 其实我这里都设置好了 过渡啊 过渡什么一秒钟之内啊

36:36.970 --> 36:37.290
呃

36:38.650 --> 36:41.610
变透明啊 变透明啊 然后呢

36:42.410 --> 36:43.290
所谓的属性啊

36:44.570 --> 36:47.930
不是 一秒钟之内完成整个动画啊 完成整个动画

36:48.890 --> 36:51.130
一秒钟之内完成整个动画

36:51.770 --> 36:53.370
就这么个意思啊 就这么个意思

36:54.170 --> 37:03.130
好 那么这里呢 变透明这一块呢 我是延迟啊的啊 做了个延迟啊 做了个延迟 就是零点七秒啊 做了个延迟

37:04.890 --> 37:09.210
明白这个意思吗 呃 还不是 呃 还不是还不是延迟啊 这是

37:09.690 --> 37:16.490
透明这个样式呢 是零点七秒内完成变化啊 其他的所有样式呢 是在一秒钟内之内完成变化

37:18.490 --> 37:26.090
啊 然后呢 呃 透明这个样式呢 是有零点三秒的延迟的 也就是透明这个样式 它在零点三秒之后

37:26.810 --> 37:36.250
然后才触发动画 才慢慢变透明 在零点七秒内完成 那么总共的时间是不是一秒啊 总之呢你织续搞定啊 这是动画的知识 也不是我们这里的重点

37:37.050 --> 37:43.610
好 那么这里我们五分要做的就是这么一件事 那五分就是这个地方飘啊 飘 那么我们来看一下吧 看一下吧

37:46.730 --> 37:47.210
对

37:48.410 --> 37:58.090
哎 没有飘是吧 哦 明白了 明白了 加进去过后 就是我们把这个样式加进去过后呢 刚开始呢 它是没有动画的 因为它一开始就是这个样式 对吧

37:58.410 --> 38:00.730
那么我希望的是一开始没有这个东西

38:01.450 --> 38:09.530
一开始没有这个东西 先把这个元素加到页面上去 加到页面上过后呢 然后再触发这个东西 那么这样子才会有动画

38:09.770 --> 38:14.730
那这个东西怎么办呢 这个东西是不是啊 加入了div后

38:15.610 --> 38:19.290
强行让页面重新渲染

38:20.010 --> 38:24.090
啊 因为不然的话 它会把这两句代码运行完了过后才会让页面重新渲染

38:24.330 --> 38:29.770
所以说我这里要强劲让页面重新渲染一次 怎么让它重新渲染呢 其实很简单 就是使用

38:30.490 --> 38:35.530
getcomputedstyle div 随便取一个吧 原来取内部者取top都无所谓

38:36.170 --> 38:39.130
总之呢 你只要取一个啊 只要

38:40.170 --> 38:43.690
取读取某个元素的

38:45.530 --> 38:48.330
位置或尺寸信息

38:49.130 --> 38:51.210
则会导致浏览器

38:52.010 --> 38:54.010
渲染啊 重新渲染

38:55.530 --> 38:55.930
渲染

38:57.690 --> 38:59.130
啊 这个东西叫做什么rayflow

39:00.570 --> 39:02.890
叫做重新布局啊 重新布局

39:03.850 --> 39:08.650
好 那么只要它重新渲染过后 再那么div 这句话运行完了过后 div 它一定是

39:09.050 --> 39:12.250
已经到页面上能够看得见的 然后呢 你再把它变成

39:14.090 --> 39:18.010
平移 然后再把它变成透明 那么这个时候就会应用动画效果了 看一下吧

39:19.930 --> 39:28.730
刷新 你看 但是目前的每一个它都是往这边飘的 对吧 都是往100100这个位置飘的 那么这个位置能不能随机呢 当然可以随机

39:29.130 --> 39:32.250
好 那么在回忆之前 我们是不是写过一个随机函数

39:32.730 --> 39:35.530
是不是写过这么一个随机函数 ok 那这个随机函数可以导出去

39:36.250 --> 39:41.610
export 可以导出去让别人使用啊 就可以通用了对吧 ok 那么这边来

39:42.170 --> 39:44.170
那么这边来是不是可以导入一个随机函数

39:44.650 --> 39:46.970
哎 到这边啊 可以导入一个随机函数

39:48.250 --> 39:50.250
这里 import

39:51.610 --> 39:53.610
get write

39:53.850 --> 39:54.970
from

39:54.970 --> 39:56.970
get utl

39:57.770 --> 40:00.010
get utl write color

40:00.330 --> 40:06.650
那么这里边还提供了一个函数get write那么这个函数已经写过了啊 我们认为这里呢 这里是随机的

40:09.850 --> 40:17.930
随机的get write啊 最小只呢为负的150啊150啊 在这个之间 好 那么这边呢也是一样

40:19.530 --> 40:25.050
啊 就是这边到底平移多少啊随机啊随机好 那么现在再看一下

40:26.010 --> 40:33.210
是不是他飘的地方就不一样了 对吧 飘的地方也不一样了啊 当然那个数字呢你可以自行自行更改啊 自行更改

40:33.610 --> 40:35.210
无所谓的

40:35.210 --> 40:39.690
那么这个这个函数是不是就搞定了啊 在页面上加一个数字这样的一个效果

40:40.250 --> 40:41.050
对不对

40:41.290 --> 40:43.290
好 那么在index 里面是不是把整合起来

40:43.690 --> 40:46.890
哎 我不断的去产生数字啊 不断的去产生数字

40:47.210 --> 40:50.250
然后没产生数字呢 让他把它加到页面上去 对吧 这个函数他

40:50.650 --> 40:53.290
他会把它加到页面上去 就一个一个模块分开

40:53.610 --> 41:00.810
每一个模块呢 他再复杂 他也只是处理那么一点点问题 对吧 你看这个最复杂的无非就是这个嘛

41:01.210 --> 41:04.730
对不对 那么他再复杂他也无非 无非就是处理这么一点点问题

41:05.370 --> 41:06.570
也不会复杂到哪去

41:07.450 --> 41:09.690
ok 那么这两只呢就可以把整合起来

41:10.330 --> 41:13.690
好 最后呢就是事件了啊 事件我们需要有个东西来注册事件

41:14.970 --> 41:18.570
event.js 那么这个模块呢专门来用来注册事件

41:21.190 --> 41:24.150
该模块用于注册事件

41:25.670 --> 41:32.070
好 那么怎么来呢 首先window on click

41:32.630 --> 41:37.350
当我们点击的时候干嘛呢 我们这里写个辨量嘛 写个辨量

41:37.830 --> 41:44.870
it's start force 默认没有开始 默认没有开始

41:45.270 --> 41:49.830
那么点击的时候干嘛呢 如果说你已经已经开始了

41:50.310 --> 41:53.110
那我干嘛 是不是要暂停 对吧 是不是要暂停

41:53.830 --> 41:56.710
哎 如果 那么我们要暂停啊

41:57.110 --> 42:05.050
by e start 把设为 force 你已经开始了 我要把暂停

42:05.370 --> 42:09.050
如果说你没有开始呢 我要把 e start

42:11.300 --> 42:14.740
e start 设为 true 对吧 我们在这里做这么一个处理

42:15.780 --> 42:20.100
那么你已经开始了 我怎么来暂停呢 是不是要用到什么

42:20.260 --> 42:22.020
要用到我们之前的这个模块

42:22.980 --> 42:24.340
这个Lumber 把它复制过来

42:26.710 --> 42:30.630
好 那么我们这里一开始就是创建一个 创建这么一个东西

42:33.030 --> 42:37.110
ok 就创建这么一个东西啊 把这个代码复制过来 创建这么一个东西

42:37.670 --> 42:42.790
好 那么这个事件注册好啊 当你每生成一个数字的时候 我把加到一面上去

42:42.790 --> 42:45.190
把加到一面上去呢 就是个Apple number 方法

42:45.670 --> 42:51.350
好 你每点击的时候呢 如果说你没有开 你已经开始了 okay and stop

42:51.990 --> 42:55.190
暂停 如果说你没有开始的话 and start 开始

42:55.510 --> 42:58.870
对吧 就完了 就没了 好 咱们来看一下吧

43:00.310 --> 43:04.310
那么这个index里面 我们要干嘛 我们要做的事情就是导入

43:05.750 --> 43:10.630
配级 业问者 它也没有什么导出 就是把它运行一遍

43:10.870 --> 43:16.310
就把这个代码运行一遍 对吧 一般来说啊 入口文件它一般不写什么业务逻辑

43:16.310 --> 43:20.790
它一般就是雕容别人 好 咱们来看一下 它这里出现个头肯

43:21.510 --> 43:23.750
那么看一下 它哪里有问题

43:29.900 --> 43:32.300
那么看一下 哪里写了有问题啊

43:35.350 --> 43:39.270
因为打包过后的代码了 还包错了事 包错了事 打包过后的代码

43:39.270 --> 43:41.190
所以说呢 这个看上去呢 不是那么

43:42.870 --> 43:46.790
很清楚 它告诉我什么呢 on expected token 感叹号

43:48.870 --> 43:49.830
哪有感叹号啊

43:54.810 --> 43:55.690
哪有感叹号啊

43:59.450 --> 44:04.090
没有感叹号啊 我看一下啊

44:05.290 --> 44:08.250
import page event 没问题啊

44:09.770 --> 44:12.170
我看一下到底是哪里有问题 我先把这个删了

44:17.800 --> 44:19.480
这里还有问题 我把这个删了

44:21.000 --> 44:23.880
这里没问题了 而且说问题出在 出在哪呢 出在这

44:26.680 --> 44:27.160
出在这

44:29.830 --> 44:32.150
哦 明白了 明白了 这个模块啊 模块

44:33.190 --> 44:36.950
返回上一级目录啊 返回上一级目录 我们去找这个ut下面的number

44:37.670 --> 44:40.310
那么这里呢 是当前目录下面的app number

44:41.110 --> 44:42.630
ok 把目录给改一下

44:43.510 --> 44:45.270
好 那么就看一下啊 点击

44:48.730 --> 44:50.570
啊 你看 是不是可以了 对吧

44:51.690 --> 44:52.090
停止

44:53.290 --> 44:56.570
啊 如果说你觉得速度不够快啊 ok 那么我们这里呢

44:56.570 --> 44:59.530
创建这个各个寒暑的时候呢 该传一个速度啊 比方说100

45:01.990 --> 45:03.510
点击啊 你看一下

45:04.630 --> 45:06.070
是不是效果就出来了 对吧

45:07.030 --> 45:09.110
啊 这个效果呢 不是目的啊

45:09.910 --> 45:12.950
就是做这个效果 通过做这个效果呢 给大家感觉一下

45:13.430 --> 45:16.150
就是说我们之后呢 你看开发代码

45:16.150 --> 45:19.190
还是不是我们以前的页面上的那种方式呢 对吧

45:19.190 --> 45:22.870
所有代码揉在一堆啊 全部写到一个介石里边 肯定不会了

45:22.870 --> 45:26.870
我们会把这个模块划分得非常非常精细啊 精细

45:26.870 --> 45:31.270
而现在他们不会 他们的 他们内部的实现啊 比方内部的一些变量

45:31.910 --> 45:35.190
比方说这里现在内部的一些变量 根本就不会污染全局啊

45:35.190 --> 45:37.590
所以说每个模块内部有自己的实现

45:37.590 --> 45:41.990
然后需要让别人用的就可以把导出啊 每个模块负责一部分内容

45:42.070 --> 45:46.310
这样子的在意负责的项目 我们都可以通过这种不断的细分来完成

45:46.870 --> 45:52.390
对不对 而且呢 我们甚至可以用结块锐啊 可不可以用结块锐 可以啊 比方说这里我们停止啊停止

45:54.390 --> 45:57.590
康处加C停止啊 安装结块锐 哎

45:59.190 --> 46:04.070
结块锐啊 他就是 他不是 他就不是那个开发依赖了啊 他生产环境依赖

46:06.550 --> 46:10.150
为什么 这个办公室安装慢点啊 之后还是用那个抛锈了吧

46:10.870 --> 46:13.270
好 那么这里呢 比方说我们可以更改这里啊

46:13.910 --> 46:19.990
呃 呸 来吧 这里我干嘛用这种方式呢 我用结块锐不好吗啊 不香吗 ok import 结块

46:21.910 --> 46:24.790
对吧 结块锐 好 结块锐呢 我们这里呢

46:26.310 --> 46:30.470
好 这里呢 就是得到这个div 抗天的就非常简单了 多了 紧号

46:32.470 --> 46:39.590
多了 紧号 是不是得到结块锐两个东西 好 那么这里生成失败啊 生成失败也很简单 怎么怎么来生成失败呢

46:40.550 --> 46:42.150
哎 我们这里是不是通过

46:43.750 --> 46:49.590
Span 啊 这样子会创建一个Span元素 好 那么Span的样式 我们这里是不是可以这样设置啊

46:50.710 --> 46:54.390
CSS 呃 color 什么呢 呃

46:55.670 --> 46:57.510
color 对吧 所以可以这样设置

46:58.630 --> 47:03.750
ok 那么这里Span的内容啊Span的内容我们可以直接在这里写啊 text

47:04.470 --> 47:09.430
怎么 n 对吧 所以可以这样子写啊 都可以啊 像这里是不是也可以

47:09.910 --> 47:14.870
div center啊 there text n 对吧 很简单就写完了

47:15.830 --> 47:22.150
好 那么这这一边呢 什么创建div啊 创建div 我们用啥 用这种啊 创建div

47:23.590 --> 47:27.430
啊 创建div 然后呢 设置什么样式啊 add class

47:28.390 --> 47:33.590
啊 设置样式什么center 对吧 设置样式center 然后呢再设置 css

47:34.230 --> 47:42.870
color 啊 为color 这样子写起来是不是简单很多 然后呢再同时设置内容啊 text 为什么 n 对吧 一下去设置完了

47:43.270 --> 47:49.590
啊 这些东西就不用写了啊 然后呢 把这个div交了去 交到body 里面去 对吧 好 ok 那么我们这里

47:52.310 --> 47:53.830
body

47:53.990 --> 47:54.390
append

47:55.510 --> 48:04.870
对吧 div 啊 加进去就完了 没问题吧 然后强制宣传 好 强制宣传过后呢 我们这里设置啊transform

48:05.990 --> 48:06.950
div

48:06.950 --> 48:08.550
啊 css

48:09.510 --> 48:14.390
transform 好 那么这边是一样的 放过来

48:19.820 --> 48:28.980
ok 放过来 好 那么这里opacity 啊 opacity 我们继续 css opacity 把稍微new

48:29.940 --> 48:34.100
啊 都就完了啊 就完了 好保存啊 你看一下

48:34.900 --> 48:40.100
是不是有一样的啊 完全一样的 应用了结构 我们这还没编译啊 npm wrong

48:43.980 --> 48:46.700
好 加进去了啊 你看 点击 哎 爆错了

48:48.460 --> 48:52.860
好 加了这块给我拿起单码写错了啊 啊append child is not function

48:53.660 --> 48:58.700
div container 啊div container 这里边啊就不是append child的对吧append

49:01.190 --> 49:06.550
点击 哎 什么啊get compute style on window

49:08.550 --> 49:13.990
啊 这里啊 这里啊 这个div他不 他不再是那个了啊 他不再是

49:14.150 --> 49:18.230
他不再是普通动物对象了啊 应该是个解构率对象 把转换成普通动物对象啊

49:18.550 --> 49:23.270
我说这个意思呢 就是说啊 这个东西可以灵活处理啊 你想用什么第三方库都可以

49:24.230 --> 49:30.150
但是最终运行的是不是这些代码 最终运行的是功能是这些代码的功能 这些代码只提供了功能

49:30.550 --> 49:33.990
但是最终运行的GS是这个GS 他打包之后的GS

49:34.310 --> 49:40.310
他的功能跟你是一样的啊 你可以认为运行的是这些代码 但是呢 实际上他是打包到到这里边了

49:40.790 --> 49:47.910
但是我们不用关心 我们写的时候呢 就可以按照我们模换化的方式啊 把它拆分的非常非常精细来进行处理

49:48.390 --> 49:51.030
啊 他运行的时候他就自然而然可以运行成功了

49:51.750 --> 49:56.870
对吧 所以说我们有了web pack之后 是不是就浏览器就支持了npm呢

49:57.750 --> 50:01.190
不是 是web pack他支持使用npm

50:02.150 --> 50:10.230
下载的东西 然后他会把它一起打包到最终的文件里边 运行的是哪一个 运行的是这个index etymal和这个GS

50:10.870 --> 50:18.150
所以说如果说你代码写完了 我要把我的页面啊GS放到服务器上上传 上传哪一个 要不要上传这些东西

50:19.270 --> 50:23.590
不用 这是我们开发阶段的东西 上传啥 上传这个电视目录

50:24.230 --> 50:30.310
啊 上传这个东西啊 当然你上传的时候呢 你应该使用什么打包 你应该使用npm run build

50:31.030 --> 50:36.630
使用那个生产环境的模式打包 因为这样打包出来的话 他体积更加小 更加精细

50:37.350 --> 50:46.150
好 弄这种方式来打包啊 你看他都换行服都没有 你现在看到的换行呢 是vscode显示不下了换行 实际上他里边是没有换行服的 他是单行呆嘛

50:48.070 --> 50:53.430
ok 那么这样子呢 你把打包 ok 打包的电神目录 我就把这个电神目录里边东西上传

50:53.750 --> 50:58.310
最终运行的是啥 最终运行的是个地神目录里边的东西啊 实际运行的这里边的东西

51:00.550 --> 51:10.710
通过这个例子呢 大家体会一下 vpeg给我们以后的开发带来的改变 以后开发我们就开发这个目录 开发完了过后运行一个命令打包好 那么我们上传这个东西

51:11.750 --> 51:14.870
ok 这是我们啊 这里刻了一个小的练习

