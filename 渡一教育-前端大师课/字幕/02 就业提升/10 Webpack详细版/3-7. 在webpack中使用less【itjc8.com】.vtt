WEBVTT

00:00.620 --> 00:05.620
这节课咱们来看一下 如何在webpack里面去使用NES

00:05.620 --> 00:12.620
因为我们在大项目开发的时候 肯定会用一些构建工具 比方说webpack

00:12.620 --> 00:16.620
因此我们需要把NES在webpack里面去使用

00:16.620 --> 00:19.620
那么这个时候我们看怎么来去结合

00:19.620 --> 00:23.620
其实小项目都无所谓 小项目的话 你们没有必要去配这些东西

00:23.620 --> 00:29.620
配半天 可能开发还要五分钟 配就要配半个小时

00:29.620 --> 00:32.620
这个没必要 小项目没必要 大项目的话就很重要了

00:32.620 --> 00:36.620
这里我们首先看一下我们目前的代码

00:36.620 --> 00:41.620
这里有个文件夹而set 里边有一个NES代码

00:41.620 --> 00:45.620
这里边我就随便写了一个 下写了一个color 然后一个made

00:45.620 --> 00:48.620
内样式 然后color fun size

00:48.620 --> 00:53.620
然后这里边GS里边为了要用这个样式

00:53.620 --> 00:56.620
所以把这个样式导入进来 作为它的依赖 对吧

00:57.620 --> 01:00.620
因为我们知道webpack里边 它是根据入口文件去分析依赖的

01:00.620 --> 01:02.620
那么现在依赖这个东西

01:02.620 --> 01:05.620
然后我们在webpack叫config里边

01:05.620 --> 01:08.620
我们配置了一些东西 就之前学过的配置

01:08.620 --> 01:10.620
mode development

01:10.620 --> 01:13.620
然后device2 安装了一个 我看一下我们安装的东西

01:13.620 --> 01:17.620
这些东西都安装了 自己看一下 可以暂停视频看一下

01:17.620 --> 01:20.620
然后这边我们配置的话就是一个mode

01:20.620 --> 01:25.620
然后一个就是开发服务器 自动打开浏览器

01:25.620 --> 01:28.620
plugins 就是我们插件的就是一个模板

01:28.620 --> 01:30.620
来生成一个ATM页面

01:30.620 --> 01:33.620
你看模板在这 模板在这

01:33.620 --> 01:37.620
好 接下来我要做的事情就是一件非常非常简单的事情

01:37.620 --> 01:43.620
我要把这个内样式应用到这个地方

01:43.620 --> 01:45.620
应用到这个地方

01:45.620 --> 01:49.620
好 我们首先来看 目前能不能成功打包

01:49.620 --> 01:54.620
因为我们现在是用开发服务器

01:54.620 --> 01:57.620
我们就直接用开发服务器来生成

01:57.620 --> 01:58.620
好 来吧

01:58.620 --> 02:01.620
我们这里有开发服务器 我们在这里设置一下吧

02:01.620 --> 02:03.620
这是一个dev

02:03.620 --> 02:06.620
就是webpack dev server

02:06.620 --> 02:10.320
就运行这个命令

02:10.320 --> 02:12.320
接下来我们也运行 运行这个命令

02:12.320 --> 02:16.320
npm run dev 看一下能不能成功打包呢

02:16.320 --> 02:19.320
我们一个问题 一个问题解决

02:19.320 --> 02:24.530
跑了一下

02:24.530 --> 02:27.840
打包出来了 对吧 但是它可以提示

02:27.840 --> 02:31.840
field失败了 它编译失败

02:31.840 --> 02:33.840
什么叫编译失败呢

02:33.840 --> 02:35.840
错误 错误发生在哪呢

02:35.840 --> 02:37.840
发生在内式文件里边

02:37.840 --> 02:38.840
它包了这个错

02:38.840 --> 02:41.840
un-expected-character-ata

02:41.840 --> 02:42.840
懂了什么意思了吧

02:42.840 --> 02:43.840
对吧 它什么意思

02:43.840 --> 02:45.840
它把当成戒丝代码在读

02:45.840 --> 02:46.840
对吧 这是webpack的功能

02:46.840 --> 02:48.840
它发现了我们入口文件一代它

02:48.840 --> 02:50.840
那么它把它当成戒丝文件读

02:50.840 --> 02:52.840
对吧 不要把webpack的原理忘了

02:52.840 --> 02:54.840
原理是一定不能忘的

02:54.840 --> 02:56.840
反复的在脑袋里面回忆一下

02:56.840 --> 02:58.840
它要把它当成戒丝代码来读取来分析

02:58.840 --> 03:00.840
它不是戒丝代码 是不是读不出来

03:00.840 --> 03:03.840
那怎么办 是不是要用loader来进行转换

03:03.840 --> 03:05.840
对不对 那我们之前学过的loader是什么

03:05.840 --> 03:07.840
什么loader 是不是cssloader

03:07.840 --> 03:09.840
还有什么styleloader对吧

03:09.840 --> 03:12.840
这个玩意是把css代码转换成戒丝代码

03:12.840 --> 03:15.840
这个是进一步把转换的结果

03:15.840 --> 03:18.840
放到这个header元素的style元素里边

03:18.840 --> 03:20.840
对吧 这是两个不同的作用

03:20.840 --> 03:22.840
那么我们之前怎么配置的

03:22.840 --> 03:23.840
之前是怎么配置

03:23.840 --> 03:25.840
之前这样配的

03:25.840 --> 03:27.840
modules

03:27.840 --> 03:29.840
然后这里是什么

03:29.840 --> 03:31.840
rules 规则

03:31.840 --> 03:33.840
规则里边有很多

03:33.840 --> 03:35.840
我们配置的其中一个规则叫什么呢

03:35.840 --> 03:37.840
叫做test

03:37.840 --> 03:39.840
当我们遇到什么样的文件的时候

03:39.840 --> 03:41.840
遇到后追名为

03:41.840 --> 03:43.840
css的文件的时候

03:43.840 --> 03:45.840
那么这个时候

03:45.840 --> 03:47.840
把它交给谁

03:47.840 --> 03:49.840
交给style 这后面是

03:49.840 --> 03:51.840
use

03:51.840 --> 03:53.840
交给styleloader

03:53.840 --> 03:55.840
然后先交给cssloader

03:55.840 --> 03:57.840
再交给styleloader

03:57.840 --> 03:59.840
所以以前是这样配的对吧

03:59.840 --> 04:01.840
那么现在请问大家一个问题

04:01.840 --> 04:03.840
这样的配法还能生效吗

04:03.840 --> 04:05.840
如果说你觉得不能

04:05.840 --> 04:07.840
为什么不能

04:07.840 --> 04:09.840
要把这些原理搞清楚

04:09.840 --> 04:11.840
这些东西怎么写

04:11.840 --> 04:12.840
其实忘了忘了

04:12.840 --> 04:13.840
我们查一下就行了

04:13.840 --> 04:15.840
但是原理要搞清楚

04:15.840 --> 04:17.840
能生效吗 是不能生效

04:17.840 --> 04:19.840
为什么不能生效

04:19.840 --> 04:21.840
因为它只是匹配css文件

04:21.840 --> 04:23.840
这个是css文件吗

04:23.840 --> 04:24.840
不是对吧

04:24.840 --> 04:26.840
那么你这里看那个文件是不是匹配不上

04:26.840 --> 04:27.840
匹配不上它还是把它当成介石

04:27.840 --> 04:28.840
再把直接分析

04:28.840 --> 04:29.840
那直接分析又爆错了

04:29.840 --> 04:31.840
所以说现在没用

04:31.840 --> 04:35.730
你看一下吧

04:35.730 --> 04:36.730
好 你看

04:36.730 --> 04:37.730
虽然打开了

04:37.730 --> 04:38.730
页面打开了

04:38.730 --> 04:39.730
但是这里fail to compile

04:39.730 --> 04:40.730
对吧

04:40.730 --> 04:41.730
是不是失败了

04:41.730 --> 04:43.730
编译失败了

04:43.730 --> 04:45.730
那么这个时候怎么办呢

04:45.730 --> 04:47.730
那么是不是我们可以再写一个规则

04:47.730 --> 04:49.730
这个规则放在这

04:49.730 --> 04:52.730
万一你还要直接用使用css文件

04:52.730 --> 04:54.730
那么这个规则还是要放在这

04:54.730 --> 04:56.730
如果说你直接写css文件的话

04:56.730 --> 04:57.730
那么我们就按照这样的规则

04:57.730 --> 04:59.730
这样的是没问题的

04:59.730 --> 05:02.730
比方说我们这里随便写一个吧

05:02.730 --> 05:03.730
a.css

05:03.730 --> 05:04.730
随便写一个

05:04.730 --> 05:06.730
比方说这里一个

05:06.730 --> 05:08.730
a.abc

05:08.730 --> 05:09.730
随便写一个

05:09.730 --> 05:11.730
color with green

05:11.730 --> 05:13.730
随便写一个

05:13.730 --> 05:14.730
然后应这个时候里边

05:14.730 --> 05:16.730
我们不打包这个

05:16.730 --> 05:17.730
不打包它

05:17.730 --> 05:18.730
打包这个

05:18.730 --> 05:20.730
import

05:20.730 --> 05:22.730
a.css

05:22.730 --> 05:23.730
那么这样子是没问题的

05:23.730 --> 05:24.730
对吧

05:24.730 --> 05:25.730
这样子是没问题的

05:25.730 --> 05:26.730
看一下吧

05:26.730 --> 05:28.730
它这里其实已经告诉你

05:28.730 --> 05:29.730
compile是个css for你

05:29.730 --> 05:31.730
对吧 成功了

05:31.730 --> 05:32.730
看一下吧

05:32.730 --> 05:33.730
现在肯定是没问题的

05:33.730 --> 05:34.730
点击检查

05:34.730 --> 05:35.730
我们的header里边

05:35.730 --> 05:36.730
你看一下

05:36.730 --> 05:37.730
是不是多了这么一个内容式

05:37.730 --> 05:38.730
对吧

05:38.730 --> 05:39.730
目前是没问题的

05:39.730 --> 05:41.730
但是那你一旦去使用什么

05:41.730 --> 05:43.730
使用这个东西是不是要出问题

05:43.730 --> 05:45.730
一保存你看

05:45.730 --> 05:47.730
这边是不是fail to compile

05:47.730 --> 05:48.730
失败了

05:48.730 --> 05:49.730
那你这边一双心

05:49.730 --> 05:50.730
你看 没了

05:50.730 --> 05:52.730
我们的内容式是不是没有了

05:52.730 --> 05:54.730
它边有失败了

05:54.730 --> 05:55.730
那么这个时候怎么办呢

05:55.730 --> 05:56.730
这个时候是不是还要去

05:56.730 --> 05:58.730
匹配ness文件

05:58.730 --> 05:59.730
对吧

05:59.730 --> 06:01.730
还要去匹配ness文件

06:01.730 --> 06:03.730
好 匹配ness文件的时候

06:03.730 --> 06:04.730
有些朋友说

06:04.730 --> 06:05.730
那为什么不在这里一起写

06:05.730 --> 06:06.730
一起写了

06:06.730 --> 06:08.730
因为以后我们这里会改

06:08.730 --> 06:10.730
就说这里匹配ness文件

06:10.730 --> 06:11.730
那么还是使用

06:11.730 --> 06:13.730
这种方式行不行呢

06:13.730 --> 06:14.730
你看一下行不行

06:14.730 --> 06:15.730
保存

06:15.730 --> 06:16.730
重新来

06:16.730 --> 06:18.730
改了配置文件要重新打包

06:19.730 --> 06:20.730
好

06:20.730 --> 06:21.730
看一下

06:21.730 --> 06:22.730
它说

06:22.730 --> 06:23.730
成功了

06:23.730 --> 06:24.730
成功了

06:24.730 --> 06:25.730
然后我们看一下

06:25.730 --> 06:26.730
在里面

06:26.730 --> 06:28.730
成功倒是成功了

06:28.730 --> 06:29.730
你看一下

06:29.730 --> 06:30.730
它有没有把ness代码

06:30.730 --> 06:31.730
给我转换一下

06:31.730 --> 06:32.730
没有

06:32.730 --> 06:33.730
对吧 没有

06:33.730 --> 06:34.730
也就是说什么意思呢

06:34.730 --> 06:36.730
这个CSS loader

06:36.730 --> 06:38.730
它有点傻

06:38.730 --> 06:39.730
它都不知道

06:39.730 --> 06:40.730
这个玩意是不是

06:40.730 --> 06:41.730
一个正常的CSS

06:41.730 --> 06:43.730
它就直接把CSS

06:43.730 --> 06:44.730
当成一个制服刷

06:44.730 --> 06:45.730
可以导出

06:45.730 --> 06:46.730
把它变成界式代码

06:46.730 --> 06:47.730
当成制服刷导出

06:47.730 --> 06:48.730
我们以前讲过的

06:48.730 --> 06:49.730
甚至这里面

06:49.730 --> 06:51.730
这不是一个有效的CSS

06:51.730 --> 06:52.730
它也没管

06:52.730 --> 06:53.730
它也没有管

06:53.730 --> 06:55.730
它也发源风不动的导出了

06:55.730 --> 06:56.730
那么style loader更傻

06:56.730 --> 06:57.730
我管你导出什么东西

06:57.730 --> 06:58.730
我就把它放到

06:58.730 --> 06:59.730
style元素里面

06:59.730 --> 07:00.730
所以它就看到了

07:00.730 --> 07:01.730
源风不动的结果

07:01.730 --> 07:02.730
那么这个结果

07:02.730 --> 07:03.730
显然不是我们想要的

07:03.730 --> 07:04.730
所以说我们现在

07:04.730 --> 07:05.730
需要什么呢

07:05.730 --> 07:07.730
需要先有一个东西

07:07.730 --> 07:08.730
把这个玩意

07:08.730 --> 07:09.730
转换成一个

07:09.730 --> 07:11.730
正常的CSS代码

07:11.730 --> 07:12.730
对吧

07:12.730 --> 07:13.730
所以说我们现在

07:13.730 --> 07:15.730
这么一个过程

07:15.730 --> 07:16.730
需要有一个东西

07:16.730 --> 07:17.730
把net代码

07:17.730 --> 07:20.730
转换成CSS

07:20.730 --> 07:21.730
然后再有一个东西

07:21.730 --> 07:23.730
把CSS转换成界式

07:23.730 --> 07:24.730
然后再有一个东西

07:24.730 --> 07:26.730
把它放置到

07:26.730 --> 07:28.730
style元素中

07:28.730 --> 07:29.730
你看这每一个过程

07:29.730 --> 07:31.730
它是专门有件事来处理

07:31.730 --> 07:32.730
像这一部分

07:32.730 --> 07:33.730
是不是

07:33.730 --> 07:34.730
是谁在处理

07:34.730 --> 07:35.730
这一部分

07:35.730 --> 07:36.730
是不是一个东西叫做

07:36.730 --> 07:37.730
CSS loader

07:37.730 --> 07:38.730
在处理这件事

07:38.730 --> 07:39.730
对吧

07:39.730 --> 07:40.730
它会把CSS代码

07:40.730 --> 07:41.730
转换成界式

07:41.730 --> 07:42.730
那么这一部分

07:42.730 --> 07:43.730
是谁在处理呢

07:43.730 --> 07:44.730
style loader

07:44.730 --> 07:45.730
它把转换过后的

07:45.730 --> 07:47.730
界式代码继续处理

07:47.730 --> 07:48.730
那么把它

07:48.730 --> 07:49.730
把生存的CSS

07:49.730 --> 07:50.730
放到那个

07:50.730 --> 07:51.730
style元素里面

07:51.730 --> 07:52.730
对吧

07:52.730 --> 07:53.730
这是两个部分在处理

07:53.730 --> 07:54.730
那么这一部分

07:54.730 --> 07:55.730
是不是还需要

07:55.730 --> 07:56.730
还需要一个人处理

07:56.730 --> 07:57.730
把net代码

07:57.730 --> 07:58.730
转换成CSS代码

07:58.730 --> 07:59.730
是不是还需要

07:59.730 --> 08:00.730
一个人处理

08:00.730 --> 08:01.730
那么谁在处理

08:01.730 --> 08:02.730
那么这里应该是

08:02.730 --> 08:03.730
应该是loader

08:03.730 --> 08:05.730
还是应该是plugging

08:05.730 --> 08:06.730
你觉得

08:07.730 --> 08:08.730
这种转换代码

08:08.730 --> 08:09.730
它一定是loader

08:09.730 --> 08:10.730
所以说这里

08:10.730 --> 08:11.730
需要一个loader

08:11.730 --> 08:12.730
什么loader呢

08:12.730 --> 08:13.730
就是我们这里

08:13.730 --> 08:14.730
要学习的

08:14.730 --> 08:15.730
没什么好学的

08:15.730 --> 08:16.730
就是net loader

08:16.730 --> 08:17.730
没什么好学的

08:18.730 --> 08:19.730
net loader

08:19.730 --> 08:20.730
所以说我们只需要安装

08:20.730 --> 08:21.730
一个net loader

08:21.730 --> 08:22.730
放到最前边

08:22.730 --> 08:23.730
就可以了

08:23.730 --> 08:24.730
好来吧

08:24.730 --> 08:25.730
安装

08:26.730 --> 08:27.730
如果说你要了解

08:27.730 --> 08:28.730
net loader

08:28.730 --> 08:29.730
更多用法的话

08:29.730 --> 08:30.730
可以去参考一下

08:30.730 --> 08:31.730
它的文档

08:31.730 --> 08:32.730
我们这里不再

08:32.730 --> 08:33.730
不再追数了

08:33.730 --> 08:34.730
安装net loader

08:34.730 --> 08:35.730
那么这个玩意

08:35.730 --> 08:36.730
它肯定要用到net loader

08:36.730 --> 08:37.730
核心库

08:37.730 --> 08:38.730
因为它这里面

08:38.730 --> 08:39.730
只是提供了一个loader

08:39.730 --> 08:40.730
我们知道loader

08:40.730 --> 08:41.730
但loader的运行过程中

08:41.730 --> 08:42.730
它要用到什么了

08:42.730 --> 08:43.730
用到net

08:43.730 --> 08:44.730
就是我们上一课

08:44.730 --> 08:45.730
学习的这个库

08:45.730 --> 08:46.730
这个net是负

08:46.730 --> 08:47.730
这里面是负责编译的

08:47.730 --> 08:48.730
它只是提供了

08:48.730 --> 08:49.730
一个loader函数

08:49.730 --> 08:50.730
所以说这两个库

08:50.730 --> 08:51.730
都要安装

08:51.730 --> 08:52.730
安装

08:53.730 --> 08:54.730
因为它里面

08:54.730 --> 08:55.730
要用到这个net

08:55.730 --> 08:56.730
所以说要安装

08:57.730 --> 08:58.730
好安装好了

08:58.730 --> 08:59.730
让它安装吧

08:59.730 --> 09:00.730
安装好了过后

09:00.730 --> 09:01.730
是不是我们要在这里边

09:01.730 --> 09:02.730
配置一下

09:02.730 --> 09:03.730
当遇到net文件的时候

09:03.730 --> 09:04.730
是不是要先

09:05.730 --> 09:07.730
先交给net loader

09:07.730 --> 09:08.730
来处理

09:08.730 --> 09:09.730
对吧

09:09.730 --> 09:11.730
然后再交给CSS loader

09:11.730 --> 09:12.730
你看这个顺序

09:12.730 --> 09:13.730
你不要写错了

09:13.730 --> 09:14.730
先要交给它

09:14.730 --> 09:15.730
所以它要写到最右边

09:15.730 --> 09:16.730
先交给它

09:16.730 --> 09:18.730
它会把它转换成

09:18.730 --> 09:19.730
正常的CSS代码

09:19.730 --> 09:20.730
然后再交给它

09:20.730 --> 09:21.730
然后再交给它

09:21.730 --> 09:22.730
看这个过程

09:22.730 --> 09:23.730
好

09:23.730 --> 09:24.730
现在

09:24.730 --> 09:25.730
再来

09:25.730 --> 09:26.730
再来

09:26.730 --> 09:27.730
运行

09:27.730 --> 09:31.450
打开一面了

09:31.450 --> 09:32.450
我们看一下

09:32.450 --> 09:33.450
Compile

09:33.450 --> 09:34.450
successfully

09:35.450 --> 09:37.450
表示编译成功了

09:37.450 --> 09:38.450
编译成功了

09:38.450 --> 09:39.450
变成了一个

09:39.450 --> 09:40.450
正常的CSS代码

09:40.450 --> 09:41.450
对吧

09:41.450 --> 09:42.450
我们写的是

09:42.450 --> 09:43.450
我们写的是

09:43.450 --> 09:44.450
这样的代码

09:44.450 --> 09:45.450
它把它变成了

09:45.450 --> 09:46.450
一个正常的CSS代码

09:46.450 --> 09:47.450
谁的功劳

09:47.450 --> 09:48.450
是不是这个

09:49.450 --> 09:50.450
net loader

09:50.450 --> 09:51.450
它的功劳

09:51.450 --> 09:52.450
对不对

09:52.450 --> 09:53.450
好

09:53.450 --> 09:54.450
那么

09:54.450 --> 09:55.450
有一位同学就要问了

09:55.450 --> 09:56.450
我们现在在VIP

09:56.450 --> 09:57.450
里边

09:57.450 --> 09:59.450
不是之前还学过一些东西吗

09:59.450 --> 10:00.450
还学过什么呢

10:00.450 --> 10:02.450
还学过BEM命名

10:02.450 --> 10:03.450
对吧

10:03.450 --> 10:04.450
是这个东西

10:04.450 --> 10:05.450
对吧

10:05.450 --> 10:06.450
命名法

10:06.450 --> 10:07.450
就是通过一些命名规范

10:07.450 --> 10:09.450
来防止内名冲突

10:09.450 --> 10:10.450
还学过什么东西呢

10:10.450 --> 10:12.450
还学过那个

10:12.450 --> 10:14.450
CSS module

10:14.450 --> 10:15.450
对不对

10:15.450 --> 10:16.450
还学过什么呢

10:16.450 --> 10:17.450
CSS ingest

10:17.450 --> 10:18.450
对吧

10:18.450 --> 10:19.450
那么这些东西

10:19.450 --> 10:20.450
能不能跟那个

10:20.450 --> 10:21.450
跟那个啥呀

10:21.450 --> 10:23.450
跟那个就是那个

10:23.450 --> 10:24.450
Nest来联用了

10:24.450 --> 10:25.450
当然可以

10:25.450 --> 10:27.450
这些东西都非常灵活的

10:27.450 --> 10:28.450
非常灵活的

10:28.450 --> 10:29.450
首先呢

10:29.450 --> 10:30.450
我要说的是

10:30.450 --> 10:31.450
这个玩意不跟任何东西联用

10:31.450 --> 10:32.450
为啥呀

10:32.450 --> 10:34.450
它不是跟央视都没什么关系了

10:34.450 --> 10:35.450
你还

10:35.450 --> 10:36.450
如果说你用它的话

10:36.450 --> 10:37.450
你还会存在

10:37.450 --> 10:38.450
这些玩意吗

10:38.450 --> 10:39.450
像这些文件还会有吗

10:39.450 --> 10:40.450
说啥都没了

10:40.450 --> 10:41.450
对吧

10:41.450 --> 10:42.450
啥都没了

10:42.450 --> 10:43.450
所以说

10:43.450 --> 10:44.450
这个东西由于它灵活度

10:44.450 --> 10:45.450
已经突破天际了

10:45.450 --> 10:46.450
所以说

10:46.450 --> 10:47.450
它不需要跟任何东西联用

10:47.450 --> 10:48.450
它就是

10:48.450 --> 10:49.450
不成一套体系

10:49.450 --> 10:50.450
但是呢

10:50.450 --> 10:51.450
我们

10:51.450 --> 10:52.450
因为Nest

10:52.450 --> 10:53.450
它并没有解决

10:53.450 --> 10:54.450
内名冲突的问题

10:54.450 --> 10:55.450
它没有去解决这些问题

10:55.450 --> 10:56.450
那么

10:56.450 --> 10:57.450
是可以跟它

10:57.450 --> 10:58.450
跟它来联用的

10:58.450 --> 10:59.450
那么跟它怎么来联用

10:59.450 --> 11:00.450
特别简单

11:00.450 --> 11:01.450
你就按照

11:01.450 --> 11:02.450
你就按照

11:02.450 --> 11:03.450
那个BEM

11:03.450 --> 11:04.450
命名法来书写就行了

11:04.450 --> 11:05.450
对吧

11:05.450 --> 11:06.450
首先写block

11:06.450 --> 11:07.450
对吧

11:07.450 --> 11:08.450
就是

11:08.450 --> 11:09.450
这个名字

11:09.450 --> 11:10.450
就是我们的

11:10.450 --> 11:11.450
不要说layout

11:11.450 --> 11:12.450
layout

11:12.450 --> 11:13.450
然后两个下滑线

11:13.450 --> 11:14.450
对吧

11:14.450 --> 11:15.450
你按照命名就行了

11:15.450 --> 11:16.450
对吧

11:16.450 --> 11:17.450
然后呢

11:17.450 --> 11:18.450
它里边的元术名字

11:18.450 --> 11:19.450
比方说container

11:19.450 --> 11:20.450
container

11:20.450 --> 11:21.450
就这样写就完事了

11:21.450 --> 11:22.450
所以说

11:22.450 --> 11:23.450
跟BEM

11:23.450 --> 11:24.450
跟这个命名规范来联用

11:24.450 --> 11:25.450
是特别自然的一件事

11:25.450 --> 11:26.450
你直接按照

11:26.450 --> 11:28.450
命名规范来写就行了

11:29.450 --> 11:30.450
那又怎么呢

11:30.450 --> 11:31.450
跟它来联用呢

11:31.450 --> 11:32.450
也很简单

11:32.450 --> 11:33.450
Nest

11:33.450 --> 11:34.450
它只负责把它

11:34.450 --> 11:35.450
转换成CSS

11:35.450 --> 11:36.450
你只需要在

11:36.450 --> 11:38.450
特别在开启marge

11:38.450 --> 11:39.450
就行了

11:39.450 --> 11:40.450
在这个位置

11:40.450 --> 11:41.450
开启marge

11:41.450 --> 11:42.450
开启marge

11:42.450 --> 11:43.450
就行了

11:43.450 --> 11:44.450
所以说也特别简单

11:44.450 --> 11:45.450
那么比方

11:45.450 --> 11:46.450
我们在这里配置一下

11:46.450 --> 11:47.450
只需要在CSS

11:47.450 --> 11:48.450
楼到里边

11:48.450 --> 11:49.450
开启一个marge

11:50.450 --> 11:52.450
开启一个marge

11:52.450 --> 11:53.450
就是转换

11:53.450 --> 11:55.450
转换后的结果

11:55.450 --> 11:56.450
它不是把它

11:56.450 --> 11:57.450
转换成正常的CSS

11:57.450 --> 11:58.450
转换后的结果

11:58.450 --> 11:59.450
再开启marge

11:59.450 --> 12:00.450
也就是你看

12:00.450 --> 12:01.450
它转换的结果

12:01.450 --> 12:02.450
是不是这个

12:02.450 --> 12:04.450
它转换的结果

12:04.450 --> 12:05.450
那么开启CSS

12:05.450 --> 12:06.450
把它变成了

12:06.450 --> 12:07.450
一长串哈希

12:07.450 --> 12:08.450
对吧

12:08.450 --> 12:09.450
哈希

12:09.450 --> 12:10.450
很简单

12:10.450 --> 12:11.450
很简单

12:11.450 --> 12:13.450
那么开启就行了

12:13.450 --> 12:14.450
开启了过后

12:14.450 --> 12:15.450
我们在CSS里边

12:15.450 --> 12:16.450
是不是可以得到

12:16.450 --> 12:18.450
得到它导入的结果

12:18.450 --> 12:19.450
就是styles

12:19.450 --> 12:21.820
是不是一个对象

12:21.820 --> 12:23.820
输出styles

12:23.820 --> 12:24.820
保存

12:24.820 --> 12:25.820
你看

12:27.820 --> 12:33.060
重新运行

12:33.060 --> 12:34.060
然后呢

12:34.060 --> 12:35.060
我们看一下

12:35.060 --> 12:36.060
检查

12:36.060 --> 12:38.060
控制台

12:38.060 --> 12:39.060
你看

12:40.060 --> 12:41.060
对象

12:41.060 --> 12:42.060
跟之前是不是一样的

12:42.060 --> 12:43.060
他们之间

12:43.060 --> 12:44.060
并没有任何冲突

12:44.060 --> 12:46.060
我看

12:46.060 --> 12:47.060
有些网站上

12:47.060 --> 12:48.060
博客说

12:49.060 --> 12:50.060
CSS

12:50.060 --> 12:51.060
dans

12:51.060 --> 12:52.060
如何跟CSS Marge

12:52.060 --> 12:53.060
来联用呢

12:53.060 --> 12:54.060
他们本身就不是一个东西

12:54.060 --> 12:56.060
不存在任何的冲突

12:56.060 --> 12:57.060
用就行了

12:57.060 --> 12:58.060
它不存在有什么

12:58.060 --> 12:59.060
特别的技巧来联用

12:59.060 --> 13:00.060
没有

13:00.060 --> 13:01.060
因为dans

13:01.060 --> 13:02.060
它只是负责

13:02.060 --> 13:04.060
转换成CSS

13:04.060 --> 13:05.060
后边

13:05.060 --> 13:06.060
之前CSS怎么用

13:06.060 --> 13:07.060
就怎么用

13:07.060 --> 13:08.060
存在任何的冲突

13:08.060 --> 13:09.060
ok

13:09.060 --> 13:10.060
那么这里

13:10.060 --> 13:11.060
我们如果说

13:11.060 --> 13:12.060
要用到这个元素里面

13:12.060 --> 13:13.060
就怎么用了

13:13.060 --> 13:14.060
用到元素里面

13:14.060 --> 13:15.060
跟之前是一样的

13:15.060 --> 13:16.060
跟之前一样的

13:16.060 --> 13:17.060
来吧

13:17.060 --> 13:18.060
id為app

13:18.060 --> 13:19.060
对吧

13:19.060 --> 13:20.060
id为app

13:20.060 --> 13:21.060
来吧

13:21.060 --> 13:22.060
我们这里得到div

13:22.060 --> 13:23.060
documents

13:23.060 --> 13:25.060
get elements by id

13:25.060 --> 13:26.060
app

13:26.060 --> 13:27.060
然后呢

13:27.060 --> 13:28.060
给它的内样是

13:28.060 --> 13:29.060
class name

13:29.060 --> 13:30.060
设置一个styles.me

13:30.060 --> 13:31.060
对吧

13:31.060 --> 13:32.060
保存

13:32.060 --> 13:33.060
用就行了

13:33.060 --> 13:34.060
不存在

13:34.060 --> 13:35.060
你看

13:35.060 --> 13:36.060
你看它那样子

13:36.060 --> 13:37.060
就变这个样子

13:37.060 --> 13:39.060
ok

13:39.060 --> 13:40.060
那么这就是

13:40.060 --> 13:41.060
关于nest

13:41.060 --> 13:42.060
如何在

13:42.060 --> 13:43.060
wipack里面去使用

13:43.060 --> 13:44.060
特别简单

13:44.060 --> 13:45.060
你就加一个loader

13:45.060 --> 13:46.060
nest loader

13:46.060 --> 13:47.060
就行了

13:47.060 --> 13:48.060
对吧

13:48.060 --> 13:49.060
ok

13:49.060 --> 13:50.060
这就是关于nest

