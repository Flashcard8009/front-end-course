WEBVTT

00:00.820 --> 00:06.820
本张的最后一节课 咱们来讲一讲如何来抽离CSS文件

00:06.820 --> 00:11.820
就我们之前都是把样式放到页面的style元素里面

00:11.820 --> 00:14.820
那么我们这几课来说一说 更多的时候呢

00:14.820 --> 00:18.820
我们希望把它抽离到一个单独的CSS文件里面

00:18.820 --> 00:21.820
该怎么来做 首先看一下我们目前的结构吧

00:21.820 --> 00:24.820
直接看一下我们的依赖 安装了哪些东西

00:24.820 --> 00:27.820
哪些东西呢 这两个自己看一下 没啥说的

00:27.820 --> 00:30.820
然后安装了一个清除 对吧 输出目录的

00:30.820 --> 00:33.820
然后安装一个CSS loader 加载器安装一个file loader

00:33.820 --> 00:36.820
为什么安装file loader呢 因为我们的样式里面

00:36.820 --> 00:39.820
有可能使用一些背景图啊 一些外部的文件 对吧

00:39.820 --> 00:43.820
然后这里呢 就是生成ATM一面的

00:43.820 --> 00:45.820
这个呢 是加入一个style元素的

00:45.820 --> 00:48.820
这个wipepack cd 没啥好说的 这个是开发服务器

00:48.820 --> 00:50.820
安装了这么一些东西

00:50.820 --> 00:52.820
然后呢 我们看一下我们的原代码

00:52.820 --> 00:54.820
src代码公路

00:55.820 --> 00:58.820
入口文件里面呢 我们就看到这个

00:58.820 --> 01:00.820
就有一个依赖 就是依赖一个CSS

01:00.820 --> 01:02.820
我这里没有用PoseCSS

01:02.820 --> 01:05.820
如果说你想用一下的话 你自己去用 这样的

01:05.820 --> 01:08.820
这是导致了一个CSS

01:08.820 --> 01:11.820
这CSS文件 那么这里面就一个样式

01:11.820 --> 01:13.820
宽高 然后一个背景图

01:13.820 --> 01:16.820
有个背景图 那么这个背景图呢 是不是

01:16.820 --> 01:19.820
我们之前说过 是不是要用一个wiped

01:19.820 --> 01:21.820
就是依赖了一个文件 对吧

01:21.820 --> 01:23.820
它依赖了另外一个文件

01:23.820 --> 01:25.820
那么这个文件呢 在哪呢 在这

01:25.820 --> 01:27.820
在这 是依赖一个文件

01:27.820 --> 01:29.820
那么这个文件呢 它也是

01:29.820 --> 01:31.820
像这样的代码呢 被CSS loader

01:31.820 --> 01:34.820
转换之后呢 它也变成了一个依赖

01:34.820 --> 01:36.820
它会把这个地方 我们之前说过

01:36.820 --> 01:38.820
会把这个地方变成什么 变成require对吧

01:38.820 --> 01:40.820
它也会把它变成一个依赖

01:40.820 --> 01:43.820
因此呢 我们这里呢

01:43.820 --> 01:45.820
这里的依赖要谁来处理呢

01:45.820 --> 01:47.820
肯定要一个file loader来处理

01:47.820 --> 01:49.820
所以说我们安装了file loader

01:49.820 --> 01:51.820
目前就是这么一个结构 之前都讲过的

01:51.820 --> 01:53.820
然后看一下我们的wiped的配置文件

01:53.820 --> 01:55.820
这个是公共目录没什么好说的

01:55.820 --> 01:57.820
然后看一下配置文件

01:57.820 --> 02:00.820
配置文件里边呢 我们使用了一个

02:00.820 --> 02:03.820
生产atm页面的这么一个插件

02:03.820 --> 02:06.820
已经使用一个清除

02:06.820 --> 02:08.820
清除输出目录的插件

02:08.820 --> 02:10.820
插件在哪呢 插件在这

02:10.820 --> 02:12.820
这个东西没什么好说的 是吧

02:12.820 --> 02:14.820
插件在这 两个插件

02:15.820 --> 02:17.820
然后我们在夹载器那一块

02:17.820 --> 02:19.820
loader那一块 配置了一下

02:19.820 --> 02:20.820
配置了两个loader

02:20.820 --> 02:22.820
一个是匹配CSS文件

02:22.820 --> 02:24.820
匹配过后呢 先交给谁呢

02:24.820 --> 02:26.820
先交给CSSloader modules

02:26.820 --> 02:28.820
开启了一个CSS模块化

02:28.820 --> 02:30.820
然后再交给style loader

02:30.820 --> 02:32.820
我们之前都是这样做的 对吧

02:32.820 --> 02:33.820
由于呢 我们这里呢

02:33.820 --> 02:35.820
可能CSS代码里边呢 可能会

02:35.820 --> 02:37.820
依赖外部的文件

02:37.820 --> 02:38.820
所以说呢 我们这里呢

02:38.820 --> 02:39.820
还要对文件进行处理

02:39.820 --> 02:40.820
比方说我们这里

02:40.820 --> 02:43.820
单单处理了一个图片文件

02:43.820 --> 02:45.820
jpg 那么我们这里使用的方式

02:45.820 --> 02:48.820
是file loader 用它来进行处理

02:48.820 --> 02:50.820
然后它生成的文件名呢

02:50.820 --> 02:53.820
是在英美景目录下面的哈希

02:53.820 --> 02:55.820
这样的一个文件名 对不对

02:55.820 --> 02:57.820
没问题吧 应该没问题

02:57.820 --> 02:59.820
好 接下来咱们来看一下吧

02:59.820 --> 03:01.820
来看一下 就目前这个样子

03:01.820 --> 03:02.820
我们来生存一下

03:04.820 --> 03:05.820
来生存一下

03:05.820 --> 03:07.820
npm long build

03:08.820 --> 03:09.820
实际上就是运行的

03:09.820 --> 03:10.820
微pac mini

03:10.820 --> 03:11.820
来生存一下

03:11.820 --> 03:12.820
啊 生存出来了

03:12.820 --> 03:13.820
你看一下吧

03:13.820 --> 03:15.820
图片在这 对吧 图片在这

03:15.820 --> 03:17.820
有没有CSS文件 没有

03:17.820 --> 03:18.820
为什么呢

03:18.820 --> 03:19.820
CSS代码呢

03:19.820 --> 03:20.820
它是通过GS代码

03:20.820 --> 03:22.820
加入到页面里边去了

03:22.820 --> 03:24.820
所以说它没有CSS文件

03:24.820 --> 03:26.820
OK 那么咱们这里打开一下

03:26.820 --> 03:27.820
看一下吧

03:28.820 --> 03:29.820
看一下我们生存的样式

03:29.820 --> 03:31.820
style 是不是在这 对吧

03:31.820 --> 03:33.820
在这 没问题吧

03:33.820 --> 03:34.820
应该没问题

03:34.820 --> 03:36.820
在这么一种情况

03:36.820 --> 03:37.820
那么如果说

03:37.820 --> 03:38.820
我们现在呢

03:38.820 --> 03:40.820
希望把它生存一个单独的

03:40.820 --> 03:41.820
CSS文件怎么做呢

03:41.820 --> 03:42.820
咱们看一下课件

03:42.820 --> 03:44.820
我们之前的都是

03:44.820 --> 03:46.820
通过它来转换之后

03:46.820 --> 03:48.820
然后交给style 楼的来处理

03:48.820 --> 03:50.820
那么style的处理的方式呢

03:50.820 --> 03:51.820
它是用一段GS代码

03:51.820 --> 03:52.820
把样式呢

03:52.820 --> 03:53.820
加到style 元素里边

03:53.820 --> 03:54.820
对吧

03:54.820 --> 03:55.820
它是用这个模式来处理的

03:55.820 --> 03:56.820
也就是这个style 元素的

03:56.820 --> 03:57.820
它是用GS代码

03:57.820 --> 03:58.820
生存出来的

03:58.820 --> 03:59.820
加入进去

04:00.820 --> 04:01.820
如果说你希望

04:01.820 --> 04:02.820
把这个CSS文件

04:02.820 --> 04:03.820
单独抽离出去的话

04:03.820 --> 04:04.820
那么就需要用到一个裤

04:04.820 --> 04:05.820
叫做mini

04:05.820 --> 04:07.820
CSS extract

04:07.820 --> 04:08.820
Hungang

04:08.820 --> 04:10.820
需要用到这么一个裤

04:10.820 --> 04:12.820
好 那么咱们来安装一下这个裤

04:13.820 --> 04:15.820
NPMI HungangD

04:15.820 --> 04:19.020
安装一下

04:19.020 --> 04:21.020
安装一下这个裤

04:21.020 --> 04:22.020
这个裤呢

04:22.020 --> 04:23.020
它挺有意思的

04:23.020 --> 04:25.020
它提供了两个东西

04:25.020 --> 04:26.020
一个是plugging

04:26.020 --> 04:27.020
就插件

04:27.020 --> 04:29.020
一个是loader 夹载器

04:29.020 --> 04:31.020
那么这两个东西分别做什么呢

04:31.020 --> 04:33.020
plugging 它主要负责生存文件

04:33.020 --> 04:34.020
你看我们之前

04:34.020 --> 04:35.020
很多的文件都是

04:35.020 --> 04:36.020
通过plugging来生存出来的

04:36.020 --> 04:38.020
它主要负责生存文件

04:38.020 --> 04:40.020
loader 它负责什么呢

04:40.020 --> 04:41.020
它负责

04:42.020 --> 04:43.020
load干嘛的

04:43.020 --> 04:44.020
是你给它一段代码

04:44.020 --> 04:46.020
它可以转换成另外一段代码

04:46.020 --> 04:47.020
load干嘛的

04:47.020 --> 04:49.020
它就是要记录

04:49.020 --> 04:51.020
之前这个CSS loader

04:51.020 --> 04:52.020
转换过后的代码

04:52.020 --> 04:53.020
它要把它记录下来

04:53.020 --> 04:55.020
就说我最后plugging

04:55.020 --> 04:56.020
要生存文件

04:56.020 --> 04:57.020
那么文件的内容是啥呢

04:57.020 --> 04:58.020
需要靠loader来记录

04:58.020 --> 04:59.020
它的原理

04:59.020 --> 05:01.020
大致的原理就是这样子

05:01.020 --> 05:03.020
同时它会导出一个东西

05:03.020 --> 05:04.020
就是通过CSS loader

05:04.020 --> 05:06.020
它不是开启了marge吗

05:06.020 --> 05:07.020
对吧 开启了模块

05:07.020 --> 05:08.020
那么它会生成一个对象

05:08.020 --> 05:10.020
那么到了这个loader里边

05:10.020 --> 05:12.020
它又会把这个对象导出

05:12.020 --> 05:13.020
以后我们一看就明白了

05:14.020 --> 05:15.020
看一下使用方式

05:15.020 --> 05:16.020
方式非常简单

05:16.020 --> 05:17.020
你把这个东西安装好了过

05:17.020 --> 05:18.020
和导入进来

05:20.020 --> 05:21.020
也导入进来

05:21.020 --> 05:22.020
导进来过后

05:22.020 --> 05:24.020
它提供了两个东西

05:24.020 --> 05:25.020
哪两个东西呢

05:25.020 --> 05:26.020
一个是loader

05:26.020 --> 05:27.020
那么从此以后

05:27.020 --> 05:29.020
我们不再使用style loader了

05:29.020 --> 05:30.020
变成这个loader

05:30.020 --> 05:31.020
它在这一个静态属性

05:31.020 --> 05:32.020
loader里边

05:32.020 --> 05:33.020
在这

05:33.020 --> 05:34.020
它是个字幕串

05:34.020 --> 05:37.020
字幕串可以指向它loader的位置

05:37.020 --> 05:39.020
我们把这个东西放在这

05:39.020 --> 05:40.020
就完事了

05:40.020 --> 05:42.020
loader放在这

05:43.020 --> 05:44.020
这个东西是一个字幕串

05:44.020 --> 05:45.020
是一个字幕串

05:45.020 --> 05:46.020
它返回了

05:46.020 --> 05:48.020
返回了一个文件的路径

05:48.020 --> 05:49.020
什么文件路径呢

05:49.020 --> 05:52.020
就是它里边loader的代码的文件路径

05:52.020 --> 05:54.020
放到这就行了

05:54.020 --> 05:55.020
loader主要记录

05:55.020 --> 05:56.020
CSSloader

05:56.020 --> 05:57.020
主要记录

05:57.020 --> 05:59.020
前面那个转换之后的

05:59.020 --> 06:01.020
CSS代码把它记录下来

06:01.020 --> 06:02.020
并不做其他事情

06:02.020 --> 06:05.020
然后生成文件要交给pluggin

06:06.020 --> 06:07.020
交给这

06:08.020 --> 06:09.020
pluggin

06:09.020 --> 06:11.020
它来负责生成CSS文件

06:11.020 --> 06:12.020
咱们来看一下吧

06:13.020 --> 06:14.020
就完了

06:14.020 --> 06:15.020
就配置完了

06:15.020 --> 06:16.020
这样子一配置过后

06:16.020 --> 06:17.020
我们来看一下

06:17.020 --> 06:18.020
再生成一次

06:19.020 --> 06:20.020
build

06:20.020 --> 06:24.510
你会发现

06:24.510 --> 06:26.510
这里是不是多了一个CSS文件

06:26.510 --> 06:27.510
对不对

06:27.510 --> 06:29.510
CSS文件多了一个

06:29.510 --> 06:31.510
那么这个CSS文件

06:31.510 --> 06:32.510
是谁来的

06:32.510 --> 06:33.510
哪来的呢

06:33.510 --> 06:34.510
就是通过这个插件来生成的

06:34.510 --> 06:35.510
文件内容哪来的呢

06:35.510 --> 06:37.510
文件内容就是被CSS

06:37.510 --> 06:39.510
loader转换之后的文件内容

06:40.510 --> 06:41.510
就变成这个样子

06:42.510 --> 06:43.510
特别简单

06:43.510 --> 06:44.510
明白吗

06:44.510 --> 06:45.510
而且这个文件名

06:45.510 --> 06:47.510
你会看到是made.CSS

06:47.510 --> 06:48.510
说明啥

06:48.510 --> 06:50.510
说明它是不是根据chunk

06:50.510 --> 06:52.510
有点像我们之前配置的东西

06:52.510 --> 06:53.510
叫做output

06:53.510 --> 06:55.510
有点像这个东西

06:55.510 --> 06:58.510
那么是不是根据chunk来生成文件的

06:58.510 --> 07:01.510
一个chunk来生成一个CSS文件

07:02.510 --> 07:03.510
然后我们再看一下

07:03.510 --> 07:04.510
生成的JS代码

07:04.510 --> 07:05.510
JS代码里面

07:05.510 --> 07:06.510
我们的CSS变成了啥

07:06.510 --> 07:08.510
我们的index.CSS

07:09.510 --> 07:10.510
变成啥呢

07:10.510 --> 07:11.510
你看一下

07:12.510 --> 07:13.510
margeal.export

07:13.510 --> 07:14.510
它就变成了一行代码

07:14.510 --> 07:15.510
这一行代码

07:15.510 --> 07:16.510
它就导出什么

07:16.510 --> 07:17.510
导出那个就是

07:17.510 --> 07:18.510
相当于是个模块

07:18.510 --> 07:19.510
CSS Margeal的对象

07:20.510 --> 07:21.510
导出了这么一个东西

07:21.510 --> 07:23.510
因此我们在代码里边

07:23.510 --> 07:25.510
正是因为如此

07:25.510 --> 07:26.510
我们在代码里边

07:27.510 --> 07:29.510
这里就可以正常的输出对象了

07:30.510 --> 07:31.510
咱们来看一下

07:37.170 --> 07:38.170
是不是可以正常的输出对象了

07:38.170 --> 07:39.170
也就是说

07:39.170 --> 07:40.170
这个对象

07:40.170 --> 07:41.170
之前Styleloader

07:41.170 --> 07:42.170
做了这件事

07:42.170 --> 07:43.170
把对象导出

07:43.170 --> 07:44.170
没啥了

07:44.170 --> 07:45.170
其他就没啥了

07:45.170 --> 07:46.170
如果说你不用

07:46.170 --> 07:47.170
你不用去考虑原理的话

07:47.170 --> 07:49.170
那么它用起来就非常简单

07:49.170 --> 07:50.170
不用去考虑原理

07:50.170 --> 07:51.170
那么就是

07:51.170 --> 07:52.170
把这个loader放这

07:52.170 --> 07:53.170
然后plugging放这

07:53.170 --> 07:54.170
完了

07:54.170 --> 07:55.170
它就会帮你生成

07:55.170 --> 07:56.170
CSS文件

07:56.170 --> 07:57.170
就这么简单

07:58.170 --> 07:59.170
那如果说

07:59.170 --> 08:00.170
你这个入口文件

08:00.170 --> 08:02.170
导入了多个CSS

08:02.170 --> 08:03.170
比方说

08:03.170 --> 08:04.170
我们这里

08:04.170 --> 08:05.170
有一个Adder

08:05.170 --> 08:06.170
CSS

08:06.170 --> 08:07.170
还有一个B点

08:07.170 --> 08:08.170
CSS

08:09.170 --> 08:10.170
看一下

08:10.170 --> 08:11.170
咱们Adder

08:11.170 --> 08:12.170
CSS里边

08:12.170 --> 08:13.170
我们写上一个

08:13.170 --> 08:14.170
A吗

08:14.170 --> 08:15.170
Color Red

08:16.170 --> 08:17.170
然后B点

08:17.170 --> 08:18.170
CSS里边

08:18.170 --> 08:19.170
我们写个

08:19.170 --> 08:20.170
B

08:20.170 --> 08:21.170
Color

08:22.170 --> 08:23.170
Color

08:23.170 --> 08:24.170
Green

08:24.170 --> 08:25.170
如果说这样子写的过后

08:25.170 --> 08:26.170
你的Eline里边

08:26.170 --> 08:27.170
你除了Eline

08:27.170 --> 08:28.170
这个CSS之外

08:28.170 --> 08:29.170
你可能还要Eline

08:30.170 --> 08:31.170
还有Eline

08:31.170 --> 08:33.170
CSS里边的A

08:33.170 --> 08:34.170
CSS

08:34.170 --> 08:35.170
那么这样子

08:35.170 --> 08:36.170
这个入口文件

08:36.170 --> 08:37.170
一定要有两个CSS

08:37.170 --> 08:38.170
对吧

08:38.170 --> 08:39.170
一代有两个

08:39.170 --> 08:40.170
那么一代过后

08:40.170 --> 08:41.170
它会把它合并

08:41.170 --> 08:42.170
就跟那个TX打包式一样的

08:42.170 --> 08:44.170
它会把它合并到这个文件里边

08:44.170 --> 08:45.170
咱们来看一下

08:46.170 --> 08:47.170
完整

08:47.170 --> 08:52.620
来看一下这个CSS

08:52.620 --> 08:53.620
是不是合并进来了

08:53.620 --> 08:54.620
对吧

08:54.620 --> 08:55.620
合并进来了

08:55.620 --> 08:56.620
就这么简单

08:56.620 --> 08:57.620
合并进来了

08:58.620 --> 08:59.620
那如果说

08:59.620 --> 09:00.620
你Adder

09:00.620 --> 09:01.620
CSS里边

09:01.620 --> 09:02.620
又通过这个Import

09:04.620 --> 09:05.620
通过这个Import

09:05.620 --> 09:06.620
这也是一代

09:06.620 --> 09:07.620
我们之前都讲过

09:07.620 --> 09:09.620
这也算是一代

09:09.620 --> 09:10.620
这也算是一代

09:10.620 --> 09:11.620
那么如果说

09:11.620 --> 09:12.620
通过这种东西

09:12.620 --> 09:13.620
去导入的话

09:13.620 --> 09:14.620
我们来看一下

09:15.620 --> 09:16.620
打包

09:16.620 --> 09:17.620
它也算是一代

09:18.620 --> 09:19.620
你看

09:19.620 --> 09:20.620
还是只有一个CSS

09:20.620 --> 09:21.620
三个都进来了

09:21.620 --> 09:22.620
对吧

09:22.620 --> 09:23.620
跟TX那里打包式一样的

09:23.620 --> 09:24.620
它的作用

09:24.620 --> 09:25.620
就是把它合并

09:25.620 --> 09:27.620
生成一个接触

09:27.620 --> 09:28.620
一个

09:28.620 --> 09:29.620
就是那个

09:29.620 --> 09:30.620
CSS文件

09:31.620 --> 09:32.620
对吧

09:32.620 --> 09:33.620
没问题吧

09:33.620 --> 09:34.620
那如果说

09:34.620 --> 09:36.620
你有多个入口呢

09:36.620 --> 09:37.620
比方你有多个入口

09:37.620 --> 09:38.620
怎么办

09:38.620 --> 09:39.620
我们来看一下

09:39.620 --> 09:40.620
N去

09:40.620 --> 09:41.620
多个入口

09:42.620 --> 09:43.620
一个入口

09:43.620 --> 09:44.620
我们就认为是妹

09:44.620 --> 09:45.620
妹这个入口

09:45.620 --> 09:46.620
它的入口文件

09:46.620 --> 09:49.620
是srcindex.js

09:49.620 --> 09:50.620
还有一个入口

09:50.620 --> 09:51.620
other

09:51.620 --> 09:53.620
srcother.js

09:53.620 --> 09:55.620
是不是有两个

09:55.620 --> 09:56.620
有两个入口文件

09:56.620 --> 09:57.620
好

09:57.620 --> 09:58.620
咱们来看一下

09:58.620 --> 09:59.620
src里边

09:59.620 --> 10:00.620
我们再多写一个js

10:00.620 --> 10:01.620
other.js

10:02.620 --> 10:03.620
那么这里

10:03.620 --> 10:04.620
我们就导入一个

10:04.620 --> 10:05.620
导入一个什么

10:05.620 --> 10:07.620
导入一个就是

10:10.130 --> 10:14.130
b.css

10:14.130 --> 10:15.130
就依赖它

10:15.130 --> 10:16.130
好

10:16.130 --> 10:17.130
接下来看一下

10:17.130 --> 10:18.130
生成

10:18.130 --> 10:19.130
那么有两个入口

10:20.130 --> 10:21.130
自然生成出来的js

10:21.130 --> 10:22.130
是不是有两个

10:22.130 --> 10:23.130
两个js

10:23.130 --> 10:24.130
这个没问题吧

10:24.130 --> 10:25.130
css是不是也有两个

10:25.130 --> 10:26.130
对吧

10:26.130 --> 10:27.130
也就是说

10:27.130 --> 10:28.130
它的生成方式

10:28.130 --> 10:29.130
跟那个js的生成方式

10:29.130 --> 10:30.130
是一样的

10:30.130 --> 10:31.130
根据依赖的生成就行了

10:31.130 --> 10:32.130
js

10:32.130 --> 10:33.130
无非就是

10:33.130 --> 10:34.130
依赖的js

10:34.130 --> 10:35.130
我们生成到一个文件里边

10:35.130 --> 10:36.130
合并到一个文件里边

10:36.130 --> 10:37.130
对吧

10:37.130 --> 10:38.130
然后

10:38.130 --> 10:39.130
这个css

10:39.130 --> 10:40.130
它一带的css

10:40.130 --> 10:41.130
合并到一个文件里边

10:41.130 --> 10:42.130
就根据入口来

10:42.130 --> 10:43.130
根据这个trunk

10:43.130 --> 10:45.130
一个trunk来对应一个js

10:45.130 --> 10:46.130
一个trunk对应一个css

10:46.130 --> 10:48.130
就这么简单

10:49.130 --> 10:50.130
然后我

10:50.130 --> 10:51.130
之前的

10:51.130 --> 10:52.130
自动生成的页面里边

10:52.130 --> 10:53.130
它会自动使用的

10:53.130 --> 10:54.130
这个link元素

10:54.130 --> 10:56.130
自动使用这个link

10:56.130 --> 10:57.130
来引入css

10:57.130 --> 10:58.130
当然这个页面里边

10:58.130 --> 11:00.130
它引入了两个对吧

11:00.130 --> 11:01.130
因为它

11:01.130 --> 11:02.130
这是我们之前讲过的

11:03.130 --> 11:04.130
因为这个atema

11:04.130 --> 11:05.130
为pack plugin

11:05.130 --> 11:06.130
它默认情况下

11:06.130 --> 11:07.130
是要把所有的

11:07.130 --> 11:08.130
trunk的资源

11:08.130 --> 11:09.130
都要导入到页面里边去

11:09.130 --> 11:10.130
如果说

11:10.130 --> 11:11.130
你只需要

11:11.130 --> 11:12.130
用其中一个的话

11:12.130 --> 11:13.130
是不是要配置一个trunk

11:13.130 --> 11:14.130
对吧

11:14.130 --> 11:15.130
比方说

11:15.130 --> 11:16.130
只需要made的资源

11:16.130 --> 11:17.130
这是我们之前

11:17.130 --> 11:18.130
讲的东西

11:18.130 --> 11:19.130
跟现在没关系了

11:20.130 --> 11:21.130
生成

11:21.130 --> 11:22.130
你看一下

11:22.130 --> 11:23.130
这边

11:23.130 --> 11:24.130
它只有

11:24.130 --> 11:26.130
made的trunk里边的资源

11:26.130 --> 11:27.130
如果说

11:27.130 --> 11:28.130
你要用别的资源的话

11:28.130 --> 11:29.130
OK

11:29.130 --> 11:30.130
那么

11:30.130 --> 11:31.130
你可以不用配置

11:31.130 --> 11:32.130
都行

11:32.130 --> 11:33.130
这就是

11:33.130 --> 11:34.130
它的配置

11:34.130 --> 11:35.130
它的使用方式

11:35.130 --> 11:36.130
特别简单

11:36.130 --> 11:37.130
我就说一个配置

11:37.130 --> 11:38.130
就行了

11:38.130 --> 11:39.130
它的配置

11:39.130 --> 11:40.130
就是有一个配置

11:40.130 --> 11:41.130
叫做file name

11:41.130 --> 11:43.130
它跟output file name

11:43.130 --> 11:44.130
的含义一样

11:44.130 --> 11:45.130
可以配置

11:45.130 --> 11:46.130
它的生成的文件名

11:46.130 --> 11:47.130
因为它默认情况下

11:47.130 --> 11:48.130
是用trunk的名称

11:48.130 --> 11:50.130
来作为文件名的

11:50.130 --> 11:51.130
这样子

11:51.130 --> 11:52.130
它没有哈希值

11:52.130 --> 11:53.130
对吧

11:53.130 --> 11:54.130
所以说有的时候

11:54.130 --> 11:55.130
我们需要把它保存到

11:55.130 --> 11:56.130
另外一个目录

11:56.130 --> 11:57.130
或者是要加上一些哈希值

11:57.130 --> 11:58.130
我们都可以使用

11:58.130 --> 11:59.130
给它进行配置

11:59.130 --> 12:00.130
file name

12:00.130 --> 12:01.130
配置方式跟output

12:01.130 --> 12:02.130
是一样的

12:02.130 --> 12:03.130
比方说

12:03.130 --> 12:04.130
我们可以配置到哪

12:04.130 --> 12:05.130
配置到

12:05.130 --> 12:06.130
比方

12:06.130 --> 12:08.130
CSS目录下面的

12:08.130 --> 12:09.130
name

12:09.130 --> 12:10.130
站位符

12:10.130 --> 12:12.130
content

12:12.130 --> 12:13.130
哈希

12:13.130 --> 12:14.130
或者用哈希都行

12:14.130 --> 12:15.130
第二

12:15.130 --> 12:16.130
CSS

12:16.130 --> 12:18.890
把它放到这

12:18.890 --> 12:22.520
brown build

12:22.520 --> 12:23.520
生成一下

12:23.520 --> 12:24.520
你看

12:24.520 --> 12:25.520
CSS是跑到来了

12:25.520 --> 12:26.520
当然

12:26.520 --> 12:27.520
JS也可以放下目录

12:27.520 --> 12:28.520
对吧

12:28.520 --> 12:29.520
我们好好写一下

12:29.520 --> 12:30.520
output

12:31.520 --> 12:32.520
跟output

12:32.520 --> 12:33.520
配置方式

12:33.520 --> 12:34.520
是类似的

12:34.520 --> 12:36.520
file name

12:36.520 --> 12:37.520
script

12:37.520 --> 12:38.520
然后

12:39.520 --> 12:40.520
或者

12:40.520 --> 12:41.520
js

12:41.520 --> 12:42.520
js

12:42.520 --> 12:45.520
js下面的name

12:45.520 --> 12:46.520
地儿

12:47.520 --> 12:49.520
创卡希

12:49.520 --> 12:50.520
地儿

12:50.520 --> 12:51.520
js

12:51.520 --> 12:52.520
好

12:52.520 --> 12:53.520
来吧

12:53.520 --> 12:54.520
这样子

12:54.520 --> 12:55.520
各式各的

12:55.520 --> 12:56.520
每个东西

12:56.520 --> 12:57.520
占一个文件奖

12:57.520 --> 12:58.520
这样子

12:58.520 --> 12:59.520
输出目录

12:59.520 --> 13:00.520
这样子

13:00.520 --> 13:01.520
更加好看一点

13:01.520 --> 13:02.520
这里多了一个

13:02.520 --> 13:03.520
再来

13:03.520 --> 13:06.860
重新来

13:06.860 --> 13:07.860
生成

13:07.860 --> 13:08.860
好

13:08.860 --> 13:09.860
是不是这样子

13:09.860 --> 13:10.860
就特别舒服了

13:11.860 --> 13:12.860
但这样子一来了

13:12.860 --> 13:13.860
有一个小小的问题

13:13.860 --> 13:14.860
什么问题

13:14.860 --> 13:16.860
你看一下CSS代码

13:16.860 --> 13:17.860
CSS代码里边一个UIL

13:17.860 --> 13:18.860
是不是出问题了

13:18.860 --> 13:20.860
路径是不是出问题了

13:20.860 --> 13:21.860
路径

13:21.860 --> 13:23.860
他以为还是这个路径

13:23.860 --> 13:24.860
但是实际上输出目录的路径

13:24.860 --> 13:26.860
他也应该返回上级目录

13:26.860 --> 13:27.860
对不对

13:27.860 --> 13:28.860
也就是说

13:28.860 --> 13:29.860
这个问题我们以前是讲过的

13:29.860 --> 13:30.860
也就是有些loader

13:30.860 --> 13:31.860
在运行的过程中

13:31.860 --> 13:32.860
他并不知道

13:32.860 --> 13:34.860
他最终的文件

13:34.860 --> 13:35.860
具体在哪

13:35.860 --> 13:36.860
他不知道

13:36.860 --> 13:37.860
所以说

13:37.860 --> 13:38.860
老是这样的一个问题

13:38.860 --> 13:40.860
最终出来的路径不正确

13:40.860 --> 13:41.860
那么这个问题

13:41.860 --> 13:42.860
怎么解决呢

13:42.860 --> 13:43.860
我们之前说过

13:43.860 --> 13:44.860
配置一下output pass

13:44.860 --> 13:45.860
就行了

13:45.860 --> 13:48.860
output pass

13:48.860 --> 13:50.860
通常文件配置成一个鞋杠

13:50.860 --> 13:52.860
这样就解决这个问题了

13:52.860 --> 13:53.860
ok

13:53.860 --> 13:56.170
看一下吧

13:56.170 --> 13:57.170
诶

13:57.170 --> 13:58.170
破错了

13:58.170 --> 13:59.170
什么意思

14:02.170 --> 14:04.170
out public pass

14:04.170 --> 14:05.170
写错了

14:05.170 --> 14:09.180
public pass

14:09.180 --> 14:11.750
生成一下

14:11.750 --> 14:12.750
这样子你看一下

14:12.750 --> 14:13.750
那么这样子

14:13.750 --> 14:14.750
因为它是全聚配置的

14:14.750 --> 14:15.750
配置到这的话

14:15.750 --> 14:16.750
是全聚配置

14:16.750 --> 14:17.750
所以说

14:17.750 --> 14:18.750
那么这里的每一个地方

14:18.750 --> 14:19.750
它都会应用这样的东西

14:19.750 --> 14:20.750
你看

14:20.750 --> 14:21.750
是不是加上一个鞋杠

14:21.750 --> 14:23.750
那么表示一个绝对路径的跟路径

14:23.750 --> 14:24.750
跟路径是不是就这个

14:24.750 --> 14:25.750
调整步路

14:25.750 --> 14:26.750
调整步路下面的

14:26.750 --> 14:27.750
image

14:27.750 --> 14:28.750
下面的这个东西

14:28.750 --> 14:29.750
对吧

14:29.750 --> 14:30.750
ok

14:30.750 --> 14:31.750
那么包括

14:31.750 --> 14:32.750
很多地方都影响到了

14:32.750 --> 14:33.750
包括这里

14:33.750 --> 14:34.750
HMA页面里边

14:34.750 --> 14:35.750
这里是不是也加上这个东西了

14:35.750 --> 14:36.750
对吧

14:36.750 --> 14:37.750
ok

14:37.750 --> 14:38.750
那么这样子

14:38.750 --> 14:39.750
肯定要在服务器环境里面

14:39.750 --> 14:40.750
打开

14:40.750 --> 14:41.750
那么我们自然

14:41.750 --> 14:42.750
可以在这里

14:42.750 --> 14:43.750
用什么NPM

14:43.750 --> 14:44.750
ROUNDAM

14:44.750 --> 14:45.750
用开发服务器打开

14:45.750 --> 14:47.750
那么就没问题了

14:48.750 --> 14:49.750
ok

14:49.750 --> 14:50.750
好你看

14:50.750 --> 14:51.750
检查

14:53.750 --> 14:54.750
那么CSS文件是不是在这

14:54.750 --> 14:55.750
CSS

14:55.750 --> 14:56.750
两个CSS

14:56.750 --> 14:57.750
对吧

14:57.750 --> 14:58.750
还有两个GS

14:58.750 --> 14:59.750
对吧

14:59.750 --> 15:00.750
都有了

15:00.750 --> 15:01.750
这里

15:01.750 --> 15:02.750
这里是那个

15:02.750 --> 15:03.750
这个

15:03.750 --> 15:05.750
Five Icon

15:05.750 --> 15:06.750
这种东西不管

15:06.750 --> 15:07.750
好

15:07.750 --> 15:08.750
你看是不是得到了

15:08.750 --> 15:09.750
好

15:09.750 --> 15:10.750
能不能应用进去

15:10.750 --> 15:11.750
能不能应用进去

15:11.750 --> 15:12.750
来吧

15:12.750 --> 15:13.750
我们在介绍里面写一下

15:13.750 --> 15:14.750
这个CSS不要了

15:14.750 --> 15:15.750
不要了

15:15.750 --> 15:16.750
不倒论

15:17.750 --> 15:18.750
这里边

15:18.750 --> 15:19.750
我们

15:19.750 --> 15:20.750
它里边有个样式

15:20.750 --> 15:21.750
对吧

15:21.750 --> 15:23.750
我们来给它生成一个DIV

15:23.750 --> 15:24.750
生成一个DIV

15:24.750 --> 15:25.750
Document

15:25.750 --> 15:26.750
Create

15:26.750 --> 15:27.750
Element

15:27.750 --> 15:29.750
给它DIV

15:29.750 --> 15:30.750
ClassName

15:30.750 --> 15:32.750
DoneStyles

15:32.750 --> 15:33.750
Mate

15:33.750 --> 15:34.750
这个样式

15:34.750 --> 15:35.750
看一下吧

15:36.750 --> 15:38.750
Mate这个样式

15:38.750 --> 15:39.750
然后呢

15:39.750 --> 15:40.750
把这个DIV加到那个

15:40.750 --> 15:41.750
Document

15:41.750 --> 15:42.750
Body里边去

15:42.750 --> 15:44.750
Append Child

15:44.750 --> 15:46.750
DIV加进去

15:46.750 --> 15:47.750
保存

15:48.750 --> 15:49.750
是不是加进来了

15:49.750 --> 15:50.750
对吧

15:50.750 --> 15:51.750
这个DIV

15:52.750 --> 15:53.750
DIV

15:53.750 --> 15:54.750
是不是出来了

15:54.750 --> 15:55.750
对不对

15:55.750 --> 15:56.750
很简单

15:56.750 --> 15:57.750
ok

15:57.750 --> 15:58.750
这就是如何来

15:58.750 --> 15:59.750
分离一个

15:59.750 --> 16:00.750
CSS的

16:01.750 --> 16:02.750
样式文件

16:02.750 --> 16:03.750
当然

16:03.750 --> 16:04.750
我们现在不涉及到

16:04.750 --> 16:05.750
任何的优化

16:05.750 --> 16:06.750
有些同学说

16:06.750 --> 16:07.750
那如果说

16:08.750 --> 16:09.750
它可能有一些重复的

16:09.750 --> 16:10.750
要使用的一些

16:10.750 --> 16:11.750
CSS模块

16:11.750 --> 16:12.750
能不能分离出去

16:12.750 --> 16:13.750
跟GS那个地方

16:13.750 --> 16:14.750
问题是一样的

16:14.750 --> 16:15.750
对吧

16:15.750 --> 16:16.750
有些重复的

16:16.750 --> 16:17.750
多个页面有不同

16:17.750 --> 16:18.750
有些重复的GS

16:18.750 --> 16:19.750
能不能分离出去

16:19.750 --> 16:20.750
那么像那些

16:20.750 --> 16:21.750
这些问题

16:21.750 --> 16:22.750
我们今后

16:22.750 --> 16:23.750
在讲优化的时候

16:23.750 --> 16:24.750
单独来讲

16:24.750 --> 16:25.750
这一块

16:25.750 --> 16:26.750
我们不过多去设计

16:26.750 --> 16:27.750
ok

16:27.750 --> 16:28.750
这是关于抽离

16:28.750 --> 16:29.750
CSS文件

16:29.750 --> 16:30.750
没了

16:30.750 --> 16:31.750
那么这一张

16:31.750 --> 16:32.750
CSS工程话

16:32.750 --> 16:33.750
就讲完了

16:33.750 --> 16:34.750
如何来

16:34.750 --> 16:35.750
看到这个章节

16:35.750 --> 16:36.750
我也是在

16:36.750 --> 16:37.750
讲课的过程中

16:37.750 --> 16:38.750
反复的强调

16:38.750 --> 16:39.750
就是说

16:39.750 --> 16:41.750
大家不要有那么大的压力

16:41.750 --> 16:42.750
只要知道

16:42.750 --> 16:43.750
CSS工程话中

16:43.750 --> 16:45.750
它存在哪些问题

16:45.750 --> 16:46.750
应该用什么样的

16:46.750 --> 16:47.750
思路去解决

16:47.750 --> 16:49.750
那么至于具体的

16:49.750 --> 16:50.750
用哪些枯

16:50.750 --> 16:51.750
用什么插件

16:51.750 --> 16:53.750
又怎么去拍一支

16:53.750 --> 16:54.750
那都是

16:54.750 --> 16:55.750
这些东西都是具体的

16:55.750 --> 16:56.750
解决办法了

16:56.750 --> 16:57.750
这些东西就不重要了

16:57.750 --> 16:59.750
忘了来查一查就完事了

16:59.750 --> 17:00.750
但是你心里面的

17:00.750 --> 17:01.750
清楚有哪些问题

17:01.750 --> 17:02.750
它出现哪些问题

17:02.750 --> 17:03.750
这些问题

17:03.750 --> 17:04.750
应该用什么样的

17:04.750 --> 17:05.750
思路来解决

17:05.750 --> 17:06.750
目前市面上

17:06.750 --> 17:07.750
有哪些东西

17:07.750 --> 17:08.750
它分别用了

17:08.750 --> 17:09.750
什么样的思路

17:09.750 --> 17:10.750
去解决这个问题的

17:10.750 --> 17:11.750
就特别是

17:11.750 --> 17:12.750
这当地的

17:12.750 --> 17:13.750
第一节课

17:13.750 --> 17:14.750
其实是最重要的

17:14.750 --> 17:15.750
也把第一节课

17:15.750 --> 17:16.750
好好理解一下

17:16.750 --> 17:17.750
其他的

17:17.750 --> 17:18.750
后边的东西

17:18.750 --> 17:19.750
都是细致

17:19.750 --> 17:20.750
目前的东西

17:20.750 --> 17:21.750
不用过于在意

17:21.750 --> 17:22.750
忘了就忘了

17:22.750 --> 17:23.750
OK 这是关于

17:23.750 --> 17:24.750
CSS工程话

