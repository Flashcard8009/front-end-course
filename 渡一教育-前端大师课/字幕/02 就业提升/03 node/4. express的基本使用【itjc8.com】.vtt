WEBVTT

00:00.370 --> 00:03.970
这一张咱们进入重点的学习对象了

00:03.970 --> 00:05.370
就是这个Express

00:06.370 --> 00:07.770
对于前端来说

00:07.770 --> 00:09.370
你要接触后端的东西

00:09.370 --> 00:11.570
最重要的也就是这个Express了

00:11.570 --> 00:13.370
这是你如果说用后端的话

00:13.370 --> 00:14.370
你一定会用这个

00:14.970 --> 00:15.970
实际上呢

00:15.970 --> 00:17.170
为什么要用它啊

00:17.170 --> 00:18.370
我再给大家说一下

00:18.770 --> 00:19.270
因为呢

00:19.270 --> 00:22.470
我们的那个之前去接收请求的话

00:22.470 --> 00:23.370
用的是啥呀

00:23.570 --> 00:25.370
是用那个ATDP模块

00:25.370 --> 00:25.970
对吧

00:26.370 --> 00:27.970
或者是ATPS模块

00:28.270 --> 00:28.870
对不对

00:29.170 --> 00:30.370
那么用它的时候呢

00:30.370 --> 00:31.870
它有这么几个问题啊

00:32.670 --> 00:34.170
倒不是这些问题呢

00:34.170 --> 00:35.270
导致里没法开发

00:35.270 --> 00:36.870
就开发起来比较麻烦一点

00:37.270 --> 00:37.870
什么问题呢

00:37.870 --> 00:38.770
第一个问题

00:39.670 --> 00:44.270
就是要根据不同的请求路径

00:45.070 --> 00:47.570
和不同的请求方法

00:48.870 --> 00:50.670
做不同的事情

00:51.270 --> 00:52.670
处理起来比较麻烦

00:55.180 --> 00:56.180
你想想是不是这样子

00:56.180 --> 00:57.880
因为我们以前的ATP模块呢

00:57.880 --> 00:59.180
它就一个方法对吧

00:59.180 --> 01:00.480
然后让你处理请求

01:00.480 --> 01:01.480
咱们写一下吧

01:02.680 --> 01:03.680
是不是你朋友都忘了

01:03.680 --> 01:04.280
怎么写的

01:04.780 --> 01:05.580
require的吧

01:05.580 --> 01:06.380
ATDP

01:06.580 --> 01:07.780
然后了ATDP啊

01:07.780 --> 01:08.680
create server

01:08.680 --> 01:10.080
然后在这里边写上啊

01:10.080 --> 01:11.680
一个两个对象

01:11.680 --> 01:12.180
对不对

01:14.480 --> 01:16.980
这个是原生的一个请求对象

01:16.980 --> 01:18.280
这原生的这个

01:19.680 --> 01:20.880
响应对象啊

01:21.180 --> 01:21.880
那么这个内容呢

01:21.880 --> 01:23.280
是incoming message

01:23.280 --> 01:24.080
还记得吗

01:24.080 --> 01:25.380
这个是server response

01:25.380 --> 01:25.880
是吧

01:26.280 --> 01:27.780
那么在这里去处理请求

01:27.780 --> 01:29.080
所有的请求

01:29.080 --> 01:30.780
不管你是什么poser请求

01:30.780 --> 01:31.880
铺着请求啊

01:31.880 --> 01:33.380
get请求等等请求

01:33.380 --> 01:34.880
全部都会到这来

01:35.380 --> 01:35.880
对不对

01:35.980 --> 01:37.980
所以以前的这种做法在这里呢

01:38.380 --> 01:40.380
如果说你要根据不同的请求

01:40.380 --> 01:41.480
去做不同的事

01:41.680 --> 01:43.180
那这里的是不是有很多判断

01:43.480 --> 01:43.780
对吧

01:43.780 --> 01:45.480
要至少如果说简单写的话

01:45.480 --> 01:46.280
就是很多判断

01:46.580 --> 01:47.280
是不是很麻烦

01:47.580 --> 01:47.880
对不对

01:47.880 --> 01:49.080
这是第一个问题

01:50.180 --> 01:50.880
当然可不可以写

01:50.880 --> 01:51.780
刚刚可以写

01:51.780 --> 01:53.080
写肯定是没问题的

01:53.080 --> 01:54.280
只是写些比较麻烦

01:54.980 --> 01:55.980
第二个问题呢

01:56.180 --> 01:57.780
就是读取

01:58.580 --> 02:00.580
读取请求体

02:01.080 --> 02:02.680
和读取

02:02.680 --> 02:05.380
就是写入响应体

02:06.080 --> 02:08.580
就是我们请求体的时候要读取

02:08.980 --> 02:09.880
响应的时候呢

02:09.880 --> 02:11.180
要写入对不对

02:11.380 --> 02:13.080
是通过留的方式

02:13.580 --> 02:15.480
通过留的方式来处理的

02:16.380 --> 02:17.480
我们不是有时间吗

02:17.480 --> 02:18.980
读的时候是不是on data

02:19.080 --> 02:20.980
对写的时候是write

02:21.280 --> 02:21.780
对吧

02:21.980 --> 02:23.780
那写的时候如果写的内容太多了

02:23.780 --> 02:25.380
那是不是还要一块一块写

02:25.380 --> 02:25.780
对吧

02:25.780 --> 02:26.580
这些都是呢

02:26.780 --> 02:28.580
通过留的方式来处理

02:28.580 --> 02:30.380
那么比较麻烦

02:31.680 --> 02:32.080
啊

02:32.880 --> 02:34.680
由于最主要的是这个原因

02:34.680 --> 02:35.280
这两个原因

02:35.280 --> 02:36.380
其实还有一些别的原因

02:36.380 --> 02:37.080
我现在给你解释了

02:37.080 --> 02:38.080
也不好解释

02:38.080 --> 02:38.880
我们之后呢

02:38.880 --> 02:39.780
在学习的过程中

02:39.780 --> 02:40.980
那就明白了

02:41.880 --> 02:43.580
主要由于这两个原因存在呢

02:43.580 --> 02:44.680
所以说我们不太会用

02:44.680 --> 02:45.980
这个attp模块啊

02:46.280 --> 02:47.580
去来处理请求

02:47.680 --> 02:49.080
不太会用这种方式

02:49.280 --> 02:51.680
我们一般的是使用第三方库啊

02:51.880 --> 02:53.380
使用第三方库

02:54.180 --> 02:54.880
我们会

02:55.080 --> 02:56.380
他把它叫做第三方框架

02:56.480 --> 02:57.980
就要是处理请求的框架

02:58.180 --> 03:00.080
那么这个第三方库呢

03:00.080 --> 03:01.380
一般我们会使用两个

03:01.380 --> 03:02.680
一个是express

03:03.280 --> 03:04.780
一个是kua2

03:04.980 --> 03:06.480
现在kua2

03:06.980 --> 03:08.580
kua是之前的一个版本

03:08.580 --> 03:09.880
现在出到kua2了

03:10.580 --> 03:11.180
实际上呢

03:11.180 --> 03:13.080
我们这两个呢都差不多

03:13.280 --> 03:14.880
所以你觉得任何一个啊

03:14.880 --> 03:16.180
再去用另一个的话

03:16.380 --> 03:17.780
上手写的特别特别快

03:18.180 --> 03:19.480
我们这个教程里边呢

03:19.480 --> 03:21.780
还是讲经典的express

03:22.080 --> 03:22.780
为什么呢

03:22.880 --> 03:23.980
因为express呢

03:23.980 --> 03:25.780
他他的生态呢

03:25.780 --> 03:26.980
是最完整的啊

03:26.980 --> 03:27.980
是生态了

03:27.980 --> 03:29.180
要比kua2啊

03:29.180 --> 03:29.980
要好一点

03:30.080 --> 03:30.780
但是呢

03:30.780 --> 03:32.880
要从那个技术的先进行啊

03:32.880 --> 03:33.880
要从那个接口的

03:33.880 --> 03:35.680
就是他在提供的API的

03:35.880 --> 03:37.180
友好性来说的话

03:37.180 --> 03:38.580
kua2要好一点

03:39.180 --> 03:40.780
那么这就是两个选择了啊

03:40.780 --> 03:41.580
一个是选择

03:41.680 --> 03:42.380
选择express呢

03:42.380 --> 03:44.080
是选择他的生态啊

03:44.080 --> 03:44.980
选择kua2

03:44.980 --> 03:46.080
选择他的API

03:46.480 --> 03:47.280
那kua2呢

03:47.280 --> 03:49.780
如果我们可以单独来做一个课程来讲啊

03:49.780 --> 03:50.980
这个也讲不了多少

03:51.380 --> 03:52.280
好这是

03:52.680 --> 03:53.880
我们就学习express吧

03:53.880 --> 03:54.880
其实kua2啊

03:54.880 --> 03:56.580
他们那个团队啊

03:56.680 --> 03:58.480
就是从express里面跑出来的

03:58.480 --> 03:59.080
哈哈

03:59.180 --> 04:01.480
所以说他们用的API但是差不多啊

04:02.280 --> 04:03.880
好我们学习express啊

04:03.880 --> 04:05.980
使用第三方库来处理请求

04:06.380 --> 04:07.880
那么这个express怎么用呢

04:07.880 --> 04:09.580
给大家看一下他的官方网站

04:10.080 --> 04:10.880
一个是官网啊

04:10.880 --> 04:11.880
官网是全部是英文的

04:11.880 --> 04:12.880
一个是民间中文网

04:12.880 --> 04:14.280
大家看民间中文网就行了

04:16.480 --> 04:17.180
啊就这

04:17.380 --> 04:19.580
这里有个指南什么快速入门

04:19.580 --> 04:21.280
还有API参考里都可以用

04:21.280 --> 04:23.280
其他里面没有提供多少对象

04:23.480 --> 04:25.380
就提供了这么几个对象啊

04:25.380 --> 04:26.480
一个是application

04:26.680 --> 04:27.480
一个是request

04:27.480 --> 04:28.180
一个是rebounce

04:28.180 --> 04:28.980
一个是rotor

04:29.180 --> 04:29.680
那就没了

04:29.680 --> 04:30.380
那就没了

04:30.480 --> 04:31.680
那他具体怎么用呢

04:31.680 --> 04:33.280
我们来用的试一下吧

04:34.680 --> 04:35.880
比方说我们这里呢

04:35.980 --> 04:37.480
导入啊首先安装

04:40.740 --> 04:42.340
npm iexpress

04:42.740 --> 04:43.940
啊我之前都安装过了

04:43.940 --> 04:45.640
所以说特别安装起来比较快

04:46.140 --> 04:47.640
好安装好了之后呢

04:47.640 --> 04:48.840
我们这里呢就

04:49.440 --> 04:50.840
还是用adp吧啊

04:51.140 --> 04:51.540
然后呢

04:51.540 --> 04:52.840
他其实我们在导入啊

04:52.840 --> 04:53.840
导入这个express

04:54.940 --> 04:56.340
啊导入

04:58.220 --> 04:58.620
然后呢

04:58.620 --> 04:59.820
我们通过这么一个

04:59.820 --> 05:01.420
他得到的是一个函数啊

05:01.420 --> 05:02.320
通过这个函数呢

05:02.320 --> 05:03.820
来创建一个一个

05:03.820 --> 05:04.620
express对象

05:04.920 --> 05:06.320
我们把它称之为application

05:06.320 --> 05:07.620
啊叫做应用程序

05:07.720 --> 05:09.120
创建的对象实际上是啥的

05:09.120 --> 05:10.520
实际上就是这个东西啊

05:10.520 --> 05:11.620
就是这个application

05:12.020 --> 05:12.920
啊就这个玩意儿

05:13.520 --> 05:14.520
这个说是中文啊

05:14.520 --> 05:16.120
看着还是英文的

05:16.320 --> 05:17.320
那没办法了啊

05:17.520 --> 05:19.120
啊创建的就是这么一个

05:19.120 --> 05:21.020
啊application对象

05:21.520 --> 05:23.420
就是我们的express应用啊

05:23.620 --> 05:26.620
创建一个express应用

05:27.320 --> 05:27.820
通常呢

05:27.820 --> 05:29.020
我们一个服务器呢

05:29.020 --> 05:31.220
就创建一个express应用就行了

05:31.620 --> 05:33.020
那么这个express应用

05:33.020 --> 05:34.120
实际上是什么呢

05:34.120 --> 05:36.220
这个app啊实际上啊

05:37.320 --> 05:40.920
app实际上是一个函数

05:41.820 --> 05:42.720
什么函数呢

05:42.920 --> 05:44.220
就是用于

05:44.720 --> 05:47.420
处理请求的函数

05:47.420 --> 05:48.320
他就是一个函数

05:48.320 --> 05:49.620
他用来处理请求的

05:50.020 --> 05:50.520
因此呢

05:50.520 --> 05:51.620
你可以怎么用他呢

05:51.620 --> 05:53.320
你在atpcreaseserver的时候

05:53.320 --> 05:55.320
是不是就可以直接把这个app给他

05:55.920 --> 05:56.320
对不对

05:56.320 --> 05:57.520
是不是直接可以给他

05:57.820 --> 05:59.420
给他过后是不是返回一个server

05:59.720 --> 06:00.720
server那个对象

06:01.020 --> 06:01.220
对不对

06:01.220 --> 06:01.520
然后呢

06:01.520 --> 06:02.620
我们使用的server

06:03.020 --> 06:03.520
nation

06:03.720 --> 06:05.220
是不是就监听啊

06:05.420 --> 06:06.320
比方9527

06:06.420 --> 06:07.820
9527这个端口啊

06:07.820 --> 06:09.120
我们给他打上一个

06:10.220 --> 06:10.920
给他一个

06:12.320 --> 06:13.720
监听喊说啊

06:14.520 --> 06:18.320
server nation on 9527

06:20.290 --> 06:21.290
9527

06:21.690 --> 06:22.690
好你就写好了

06:22.790 --> 06:25.490
这不就是这就创建了一个express的

06:25.690 --> 06:27.290
呃工程了啊

06:27.290 --> 06:28.090
咱们来看一下吧

06:28.590 --> 06:28.990
运销

06:31.490 --> 06:32.590
load index

06:35.590 --> 06:36.590
爆错了啊

06:37.790 --> 06:39.090
接口了已经被使用了

06:39.090 --> 06:40.690
啊我哪个地方还用了就

06:40.690 --> 06:41.690
那么换一个吧

06:41.690 --> 06:42.390
换一个接口啊

06:42.390 --> 06:43.490
我们也可以用个变量吧

06:43.690 --> 06:44.390
啊用个变量

06:44.890 --> 06:46.290
const port

06:47.090 --> 06:48.390
呃比方说

06:48.890 --> 06:50.490
6008啊5008

06:50.590 --> 06:51.190
随便吧

06:51.390 --> 06:52.090
啊咱们这里呢

06:52.090 --> 06:53.190
就使用那个变量port

06:53.990 --> 06:55.090
啊这里输出的时候呢

06:55.090 --> 06:56.290
我们一个模板支付刷吧

06:56.990 --> 06:58.090
这些都很简单啊

06:58.990 --> 06:59.990
加上一个port

07:00.890 --> 07:01.390
好

07:01.390 --> 07:02.090
这样我们来看

07:04.580 --> 07:05.080
音响

07:05.480 --> 07:06.080
啊你看

07:06.180 --> 07:06.780
是不是完成了

07:06.780 --> 07:07.680
在这里监听了

07:07.680 --> 07:08.280
对不对

07:08.580 --> 07:10.680
那么也就是说我们之后的请求呢

07:10.680 --> 07:12.280
是交给这个函数来处理

07:12.480 --> 07:14.180
那么这个函数来怎么处理呢

07:14.180 --> 07:16.180
他就可以根据你的配置

07:16.780 --> 07:19.880
把不同的请求不同的请求方法

07:19.980 --> 07:22.080
放到不同的函数里面处理

07:22.080 --> 07:23.180
他就是在做这么一个事

07:23.180 --> 07:25.280
啊他最基本的做法就是这个做法

07:25.680 --> 07:26.880
啊根据你的配置

07:26.880 --> 07:29.580
把不同的请求放到不同的函数里面

07:29.580 --> 07:30.580
呃来处理

07:30.680 --> 07:31.380
好那么这里呢

07:31.380 --> 07:33.380
就是创建了一个express对象

07:33.380 --> 07:34.380
啊是这种方式

07:34.780 --> 07:35.980
那么另一种方式呢

07:35.980 --> 07:36.780
我给大家看一下啊

07:36.780 --> 07:37.680
这是这种方式啊

07:38.080 --> 07:38.880
再复制一下

07:39.580 --> 07:40.980
还有一种方式的写法

07:40.980 --> 07:42.980
就是我不再使用这个adp

07:42.980 --> 07:44.280
这个模块了

07:44.880 --> 07:45.780
啊怎么说呢

07:45.880 --> 07:47.280
我们这里呢就是创

07:47.380 --> 07:48.880
也不用这种方式来创建了

07:48.880 --> 07:50.180
对吧也不用这种方式呢

07:50.380 --> 07:52.180
我们直接使用这个app

07:52.580 --> 07:53.880
他里边一个函数啊

07:53.880 --> 07:55.980
聂圣直接通过他来接听端口

07:55.980 --> 07:57.280
实际上是一样的

07:57.680 --> 07:59.080
你想想他里面怎么做的

07:59.380 --> 08:01.080
他里边其实就是啊

08:01.080 --> 08:01.780
你看吧

08:02.380 --> 08:04.180
一个人就完了没了

08:05.080 --> 08:06.580
你看吧他里面怎么做的呢

08:06.680 --> 08:08.680
他里面就是你呃

08:08.680 --> 08:11.480
他里面内部去使用了一个adp模块啊

08:11.480 --> 08:13.080
他内部去使用adp模块

08:13.080 --> 08:15.680
然后呢去接听这个端口啊

08:15.980 --> 08:17.780
你可以想象他怎么写的啊

08:17.880 --> 08:18.680
你可以想一下吧

08:18.680 --> 08:20.480
他他的写法应该是这个样子

08:20.680 --> 08:21.880
就是个聂圣函数啊

08:22.380 --> 08:23.380
聂圣函数

08:23.680 --> 08:24.180
port

08:24.380 --> 08:25.980
他写法呢就是这样子啊

08:26.380 --> 08:27.780
呃聂圣函数

08:27.780 --> 08:28.780
然后呢他里边啊

08:28.780 --> 08:32.380
就是我们自己去创建一个adp模块啊

08:32.380 --> 08:32.980
require

08:34.180 --> 08:35.080
啊adp

08:35.280 --> 08:37.880
然后呢就通过adp啊crazy server

08:37.880 --> 08:39.280
把当前的对象对吧

08:39.280 --> 08:40.380
把这个Z是个对象

08:40.380 --> 08:42.780
把做一个创建

08:42.780 --> 08:44.080
然后呢聂圣啊

08:44.080 --> 08:45.180
这还有一个callback

08:46.080 --> 08:46.780
callback

08:47.080 --> 08:49.580
然后呢他里边使用啊得到了对象

08:49.680 --> 08:51.380
然后我们直接使用啊聂圣

08:52.180 --> 08:52.680
port

08:52.980 --> 08:54.080
然后呢callback

08:54.380 --> 08:55.680
对不对是一样的啊

08:55.680 --> 08:56.480
是一样的

08:56.580 --> 08:57.380
非常简单

08:57.580 --> 08:59.380
那么这是一种更加简洁的

08:59.580 --> 09:01.380
创建一个啊

09:01.380 --> 09:04.380
express的实力并且坚定端口的这么一个例子

09:04.380 --> 09:05.580
咱们来运行看一下啊

09:05.580 --> 09:06.980
效果仍然是一样的

09:08.860 --> 09:09.560
好运行

09:09.860 --> 09:11.260
你看是不是一样的效果

09:11.260 --> 09:12.560
对吧效果是一样的

09:13.160 --> 09:14.260
好这就是这

09:14.860 --> 09:16.860
这就是这两种创建一个

09:16.860 --> 09:19.360
一个express服务器的这么一个例子

09:19.360 --> 09:20.660
两种方式都可以

09:21.260 --> 09:23.260
好那么现在关键是

09:23.260 --> 09:25.160
他是怎么来处理请求的呢

09:25.160 --> 09:27.260
无论是你是用第种方式啊

09:27.260 --> 09:28.560
还是用第二种方式

09:28.560 --> 09:30.060
他是怎么来处理请求的呢

09:30.060 --> 09:30.860
他是这样子

09:31.060 --> 09:31.860
因为他呀

09:31.860 --> 09:32.960
他本身是一个函数

09:32.960 --> 09:33.760
他接收了

09:33.760 --> 09:35.260
他会处理任何请求

09:35.260 --> 09:36.260
你看看这吧

09:36.360 --> 09:36.960
这里是

09:37.360 --> 09:38.360
他的核心原理对吧

09:38.360 --> 09:40.160
他是把它放到这个盔子12号里边的

09:40.160 --> 09:41.660
因此他可以处理任何请求

09:41.860 --> 09:43.260
他在处理的时候怎么处理呢

09:43.260 --> 09:45.460
他是根据你不同的请求方法

09:45.460 --> 09:47.660
以及不请不同的请求路径

09:47.760 --> 09:49.260
交给不同的函数来处理

09:49.260 --> 09:50.460
他内部有个表格

09:51.360 --> 09:53.160
通过这个表格的映射关系

09:53.160 --> 09:54.660
来交给不同的函数来处理

09:54.660 --> 09:57.160
那么这个怎么来配置这个映射关系呢

09:57.160 --> 09:58.760
他是通过这种方式来配置的

09:59.960 --> 10:00.960
通过这个app

10:01.160 --> 10:02.960
后边写上请求方法

10:03.760 --> 10:04.560
然后呢

10:04.560 --> 10:06.260
后边写上路径啊

10:06.260 --> 10:07.760
就是请求路径

10:08.360 --> 10:10.560
然后呢后边写上处理函数

10:11.160 --> 10:13.260
他是用这种模式来进行映射的

10:13.560 --> 10:14.160
什么意思呢

10:14.160 --> 10:15.860
这个这个代码的意思就是

10:16.560 --> 10:17.360
根据

10:18.260 --> 10:20.060
对应就是配置一个

10:20.260 --> 10:21.460
配置一个

10:22.660 --> 10:24.060
请求映射

10:25.660 --> 10:26.960
配置一个请求映射

10:28.560 --> 10:33.860
根据就是如果请求方法和请求路径

10:34.360 --> 10:35.460
均满足

10:36.460 --> 10:37.460
均满足

10:38.060 --> 10:38.760
匹配

10:39.260 --> 10:40.360
均匹配上了

10:40.360 --> 10:44.560
那么就交给处理函数进行处理

10:44.660 --> 10:45.660
就这么个意思

10:45.760 --> 10:47.260
好比方说我们来写个例子啊

10:47.860 --> 10:49.560
这里这里我们写个app

10:49.560 --> 10:50.160
get

10:50.560 --> 10:51.360
然后请求路径呢

10:51.360 --> 10:53.360
我们一起写刚开头表示决定路径对吧

10:53.360 --> 10:55.160
就是我们请求这个服务器的决定路径

10:55.160 --> 10:56.860
当你请求的路径呢

10:57.060 --> 10:58.560
也比方说是abc

10:58.960 --> 10:59.460
ok

10:59.560 --> 11:00.360
那么咱们呢

11:00.660 --> 11:01.560
给他一个啊

11:01.560 --> 11:03.160
后边就是一个请处理函数的

11:03.360 --> 11:05.160
这个处理函数大家注意一下啊

11:05.160 --> 11:06.560
这个Rick request

11:06.560 --> 11:09.160
这个Rick对象和Risk对象呢

11:09.260 --> 11:10.360
他并不是

11:11.060 --> 11:14.660
原生的并不是这个原生的Rick response

11:14.660 --> 11:16.360
因为我们知道在这里是不是有一个

11:16.560 --> 11:18.960
原生的就是请求对象和响应对象

11:18.960 --> 11:20.460
他并不是原生的啊

11:20.460 --> 11:25.860
那么他是Rick和Risk是被Express

11:26.160 --> 11:29.560
封装过后的对象

11:30.660 --> 11:33.160
那么他的好处就是你可以用他操作流

11:33.160 --> 11:35.060
但是你不用给他操作流了啊

11:35.160 --> 11:36.860
他用起来更加的简单

11:37.060 --> 11:38.260
好咱们来看一下吧

11:38.360 --> 11:39.560
我们看一下这里呢

11:39.760 --> 11:40.460
嗯

11:40.660 --> 11:41.760
我们来获取一下吧

11:41.760 --> 11:42.760
我们这里输出

11:43.660 --> 11:45.460
获取Rick的什么header

11:45.960 --> 11:46.660
Headers

11:47.760 --> 11:48.860
好咱们来看一下吧

11:48.960 --> 11:49.960
这是一个

11:50.160 --> 11:50.960
呃

11:52.360 --> 11:54.660
呃这是他获取请求的头部

11:54.860 --> 11:56.560
咱们用Pulse面来试一下

11:58.060 --> 11:59.360
好找到Pulse面啊

11:59.560 --> 12:01.760
咱们在这里呢新加一个请求

12:02.160 --> 12:04.460
呃用Gate请求去请求localhost

12:04.860 --> 12:05.560
哪个端口

12:05.660 --> 12:07.160
5008对吧

12:07.260 --> 12:08.860
说5008好

12:08.960 --> 12:10.160
通过这个请求呢

12:10.560 --> 12:10.960
呃

12:11.760 --> 12:14.460
来去请求他的那个ABC

12:15.260 --> 12:16.260
好我们先等一下

12:16.760 --> 12:17.560
发动消息

12:17.960 --> 12:18.960
呃然后呢

12:19.160 --> 12:19.660
这边

12:19.960 --> 12:21.060
我没运气是吧

12:21.960 --> 12:22.660
好再来啊

12:23.060 --> 12:23.860
发动消息

12:24.260 --> 12:25.360
然后看一下这边

12:25.660 --> 12:26.960
是不是得到了一个对象

12:27.060 --> 12:28.360
这个对象是不是请求头

12:28.560 --> 12:29.060
对不对

12:29.260 --> 12:30.560
这个请求头就直接拿到了

12:30.660 --> 12:31.860
看到没是不是非常方便

12:32.060 --> 12:33.160
拿到这个请求头

12:33.760 --> 12:36.160
好那如果说你要获得某一个请求头的话

12:36.160 --> 12:37.860
是不是从一个对象里面去取属性

12:38.160 --> 12:38.560
对吧

12:38.660 --> 12:40.060
比方说呃这里边

12:40.160 --> 12:41.460
刚才打印出来是吧

12:41.660 --> 12:43.460
打印出来又有什么arxsiblerhost

12:43.460 --> 12:45.360
对吧我们可以起取一下host

12:48.160 --> 12:48.560
好

12:48.760 --> 12:49.660
这样我们看一下啊

12:50.460 --> 12:52.960
好然后呢这边postman去请求一下

12:54.560 --> 12:55.160
好你看

12:55.360 --> 12:57.760
这不得到后手是不是这个东西对不对

12:57.760 --> 12:58.760
说非常简单啊

12:58.760 --> 13:00.160
他得到的就是请求头

13:02.760 --> 13:04.360
这是获取

13:04.760 --> 13:06.560
请求头啊

13:06.860 --> 13:07.760
呃是一个对象

13:08.560 --> 13:10.260
那么我们看请求里边还有什么

13:10.260 --> 13:11.260
可以获取的呢

13:11.460 --> 13:12.360
嗯还有什么呢

13:12.460 --> 13:15.160
还有那个请求的路径对吧

13:15.160 --> 13:16.860
我们来获取一下请求的路径

13:16.960 --> 13:17.460
Rig

13:17.460 --> 13:18.860
我们这里打个中文吧

13:18.960 --> 13:20.460
请求路径啊

13:20.460 --> 13:21.860
上边这个呢是

13:22.160 --> 13:22.860
请求头

13:24.060 --> 13:25.160
请求头

13:26.360 --> 13:27.660
啊这是请求路径

13:29.260 --> 13:30.860
呃Rig pass

13:31.560 --> 13:32.260
就这么简单

13:32.260 --> 13:33.860
这就获取了请求路径的啊

13:33.860 --> 13:34.760
你请求的是哪一个路径

13:34.760 --> 13:36.260
当然请求的是这个路径对吧

13:36.460 --> 13:36.660
好

13:36.660 --> 13:37.760
咱们来试一下啊

13:39.360 --> 13:40.760
停止啊运行

13:41.460 --> 13:42.960
好接下来我们再来看一下

13:42.960 --> 13:44.660
这边我们在postman里边

13:44.760 --> 13:46.160
给他发送一个啊

13:46.160 --> 13:47.260
但是每次改动代把过后

13:47.260 --> 13:48.460
你要重新运行啊

13:48.460 --> 13:50.360
不然的话你没有没办法生效的

13:50.460 --> 13:50.860
好

13:51.860 --> 13:52.260
运行

13:52.260 --> 13:54.460
那你看请求路径是不是斜槓APC

13:54.760 --> 13:55.260
对不对

13:55.360 --> 13:56.860
那就请求路径是不是获取到了

13:57.160 --> 13:58.260
好咱们再来看啊

13:58.360 --> 14:00.460
看还有请求里边我们还要获取什么呢

14:00.460 --> 14:02.660
比方我们请求要获取请求的参数

14:02.960 --> 14:05.160
啊请求参数

14:05.560 --> 14:06.560
啊就是query

14:06.960 --> 14:08.060
我们要获取query

14:08.060 --> 14:09.260
这个东西怎么获取呢

14:09.260 --> 14:10.460
query

14:10.560 --> 14:11.260
query

14:11.360 --> 14:12.760
这不可以获取到对吧

14:12.860 --> 14:13.960
好咱们再来看啊

14:13.960 --> 14:15.060
这里我们重新运行

14:17.060 --> 14:18.860
啊postman里边去send

14:19.260 --> 14:21.160
啊我们这里好像没写query是吧

14:21.160 --> 14:23.560
好我们这里重新来再加一个啊问号

14:23.560 --> 14:26.060
A等于1B等于2啊

14:26.560 --> 14:27.260
然后呢

14:28.360 --> 14:29.160
C等于3

14:29.660 --> 14:30.560
好请求

14:31.060 --> 14:32.160
好咱们看一下这边

14:33.760 --> 14:34.360
啊query

14:34.360 --> 14:36.960
所以变化把它它会自动的把它封装成一个对象

14:37.060 --> 14:38.360
是不是非常方便对吧

14:38.360 --> 14:39.660
这query是不是获取到了

14:40.060 --> 14:40.860
对吧query

14:41.260 --> 14:42.660
然后呢还有什么呢

14:43.560 --> 14:45.560
嗯好像就没啥了对吧

14:45.660 --> 14:46.560
好像就没啥了

14:46.860 --> 14:48.760
嗯然后呢我还这个东西

14:49.260 --> 14:52.160
如果说我们请求的不是这个路径

14:52.160 --> 14:53.260
路径没有匹配上

14:53.260 --> 14:55.260
比方说我们请求的是abc下面的

14:55.560 --> 14:56.160
34

14:56.160 --> 14:56.760
33

14:57.060 --> 14:57.960
去请求的时候

14:58.060 --> 15:00.260
他得到了他会自动的得到一个404

15:00.460 --> 15:01.760
啊这个东西你都不用处理

15:01.760 --> 15:03.140
他会自动给得到一个404

15:03.140 --> 15:03.760
not found

15:04.260 --> 15:06.760
啊表示没有没有找到这样的就是请求

15:06.760 --> 15:08.460
然后给了一个页面啊看

15:08.960 --> 15:10.560
preview啊就是看

15:10.660 --> 15:12.960
cannot get abc啊得不到这个东西

15:13.460 --> 15:14.260
明儿的意思吗

15:14.360 --> 15:15.660
啊这是关于这个

15:16.260 --> 15:17.260
呃get请

15:17.260 --> 15:18.460
就是这个请求匹配

15:18.460 --> 15:20.060
那么得到请求里边的信息

15:20.860 --> 15:21.960
好那么请求的时候呢

15:21.960 --> 15:23.960
还可以写这种叫动态路由

15:24.260 --> 15:25.160
这有点类似什么呢

15:25.160 --> 15:28.460
类似于view和reactor里边的路由配置

15:28.660 --> 15:30.760
然后比方说啊可以在这里写啊

15:30.760 --> 15:33.860
比方说我们这里是新闻新闻的详情啊

15:33.860 --> 15:35.060
给我给我个id

15:35.260 --> 15:36.660
那么这部分是不是动态的

15:36.960 --> 15:37.460
对不对

15:37.560 --> 15:39.060
那么他可以匹配什么请求呢

15:39.060 --> 15:40.060
他可以匹配这种

15:40.260 --> 15:41.060
比方说啊

15:41.060 --> 15:43.560
咱们呢这里呢写上一个六十啊

15:43.560 --> 15:44.560
然后呢id

15:44.960 --> 15:46.460
不是写上123

15:46.460 --> 15:48.560
那么就得到id为123的行文

15:48.560 --> 15:49.960
那么是请求这个路径

15:50.060 --> 15:51.760
那么这个路径呢他就会匹配到这

15:51.860 --> 15:52.960
并把id呢

15:52.960 --> 15:55.560
并把这个123呢复辞给这个id

15:55.660 --> 15:56.460
就这么个意思啊

15:56.460 --> 15:58.160
当然456这些东西都可以

15:58.160 --> 15:59.060
对不对啊

15:59.060 --> 16:01.360
他可以把456的复辞给给这个id

16:01.360 --> 16:03.360
那么后边让你如果说你还有必要

16:03.360 --> 16:04.360
去写一些比方说

16:04.360 --> 16:06.160
就随便写个写参数都可以啊

16:06.160 --> 16:06.960
都能匹配上

16:07.260 --> 16:08.160
那么你看一下吧

16:08.160 --> 16:09.660
这种写法他能匹配上吗

16:09.660 --> 16:10.660
他肯定能匹配上

16:10.860 --> 16:12.960
然后关键是我们在这里怎么来获取

16:13.160 --> 16:15.660
怎么来获取这一部分动态动态的东西呢

16:15.760 --> 16:17.760
好这里呢是通过这个parent

16:18.560 --> 16:19.860
rig parent

16:21.060 --> 16:23.460
好通过这个这个属性来进行获取

16:23.660 --> 16:24.660
好咱们来看一下吧

16:28.210 --> 16:28.710
运行

16:30.210 --> 16:33.110
好接下来我们在这边去发送一个请求

16:34.710 --> 16:35.210
请求

16:36.210 --> 16:37.510
好到控制台里边来

16:37.510 --> 16:39.410
你看是不是parent id就获取到了

16:39.610 --> 16:40.010
对吧

16:40.010 --> 16:41.910
那么相当于就把456复辞给了谁

16:41.910 --> 16:43.310
复辞给了这个id

16:43.310 --> 16:43.710
啊

16:44.110 --> 16:45.610
当然你可以写多段动态id

16:45.610 --> 16:47.310
比方说啊什么

16:48.110 --> 16:49.010
可以写多段对吧

16:49.010 --> 16:51.310
那么他就匹配六子后边有一坨

16:51.310 --> 16:52.410
然后一个斜槓有一坨

16:52.410 --> 16:53.610
然后一个斜槓有一坨

16:53.610 --> 16:55.110
那么他就会分别复辞给啊

16:55.110 --> 16:57.210
这个是啊分别复辞给id

16:57.210 --> 16:59.110
然后滴滴滴都是一样的

16:59.710 --> 17:01.310
啊这是关于这一块

17:01.810 --> 17:03.310
好请求的信息是不是拿到了

17:03.410 --> 17:04.610
那么怎么来响应呢

17:06.010 --> 17:08.110
好这一部分是获取请求信息

17:09.110 --> 17:10.410
请求信息

17:10.610 --> 17:11.910
然后呢怎么来响应呢

17:13.310 --> 17:13.910
响应

17:15.310 --> 17:17.410
响应的话有很多种方式

17:17.410 --> 17:19.410
我们这里说一些简单比较简单的

17:19.810 --> 17:21.910
响应的事都要发送一个消息体

17:21.910 --> 17:22.310
对吧

17:22.610 --> 17:23.210
发送消息体

17:23.210 --> 17:24.110
那么怎么写呢

17:24.210 --> 17:25.010
就是race

17:25.910 --> 17:28.110
啊好后面只能写上一个synd

17:28.910 --> 17:30.110
就是发送一个

17:30.310 --> 17:31.710
响应一个结果啊

17:31.710 --> 17:32.710
响应一个结果

17:32.910 --> 17:34.010
那么synd的时候呢

17:34.010 --> 17:34.910
我们之前啊

17:34.910 --> 17:36.810
看到我们在用那个itp模块的时候

17:36.810 --> 17:38.110
响应完了是不是要写个end

17:38.110 --> 17:39.210
对吧我们写完了

17:39.210 --> 17:40.110
这个地方不用了

17:40.210 --> 17:41.910
因为你调用synd的方法的时候呢

17:41.910 --> 17:43.810
他就已经在内部给你调用了end

17:43.810 --> 17:44.910
表示我写完了

17:45.310 --> 17:46.010
原来是吧

17:46.010 --> 17:47.010
好这是响应

17:47.110 --> 17:48.410
响应里面这里可以写啥呢

17:48.410 --> 17:49.210
啥都可以写

17:49.410 --> 17:51.210
你可以写的那我就啥都不想用

17:51.210 --> 17:51.610
对吧

17:51.810 --> 17:52.910
你可以写个字无串

17:53.410 --> 17:55.110
啊比方说写个a7

17:55.410 --> 17:56.710
啊你好啊

17:59.200 --> 18:00.200
好保存

18:00.300 --> 18:01.200
咱们来看一下吧

18:01.200 --> 18:02.200
刚才不是没有响应吗

18:02.200 --> 18:03.400
他一直在等响应对吧

18:03.400 --> 18:04.700
没有响应没有响应的话

18:04.700 --> 18:05.600
他就一直在等

18:05.700 --> 18:07.300
好咱们再重新发送一次

18:08.100 --> 18:08.800
好停止

18:10.600 --> 18:11.800
好接下来我们synd

18:12.300 --> 18:13.600
好你看得到是不是h1

18:13.600 --> 18:14.200
你好对吧

18:14.200 --> 18:14.900
review有一下

18:14.900 --> 18:16.000
是不是得到一个h1

18:16.300 --> 18:17.000
没问题吧

18:17.200 --> 18:18.500
非常非常简单啊

18:19.200 --> 18:19.900
放大一点

18:21.740 --> 18:23.440
好这是这一块

18:26.120 --> 18:27.220
好这是响应啊synd

18:27.220 --> 18:29.220
那么他可以用很多种响应方式

18:29.420 --> 18:31.120
啊你看如果说我给他的制服串的话

18:31.120 --> 18:32.220
他非常智能啊

18:32.320 --> 18:33.120
给他制服串的话

18:33.120 --> 18:35.020
他会给你一个就是content tab

18:35.020 --> 18:36.220
就是text atmail

18:36.420 --> 18:37.420
对吧你给他的制服串

18:37.420 --> 18:38.620
他就会给你这个东西

18:38.920 --> 18:40.720
好如果说你给他的是一个节省

18:41.220 --> 18:42.320
一个给他的是一个对象

18:42.320 --> 18:43.120
或者是一个数组

18:43.120 --> 18:43.820
比方一个数组吧

18:43.820 --> 18:45.320
35 36

18:45.820 --> 18:46.820
好接下来我们再来看

18:50.250 --> 18:51.850
印象好这边

18:52.950 --> 18:53.450
发送

18:53.650 --> 18:54.550
他得到的是一个数组

18:54.550 --> 18:55.850
那么我们看一下小鸡头

18:55.850 --> 18:56.850
小鸡头的content tab

18:56.850 --> 18:58.250
变成ipad可以进行节省了

18:58.250 --> 18:59.350
然后自动给你处理

18:59.450 --> 19:00.750
他会根据你给的格式

19:00.750 --> 19:02.750
然后自动的去设置这个响应头

19:03.250 --> 19:03.950
没了意思吧

19:04.350 --> 19:05.350
那么他就得到了

19:05.350 --> 19:06.650
给他返回的就是一个节省

19:06.650 --> 19:07.650
节省格式的输入

19:07.850 --> 19:09.150
啊当然了你也可以给他返回

19:09.350 --> 19:10.150
响应个对象

19:10.750 --> 19:11.750
一个对象比方说

19:11.850 --> 19:14.750
啊ID等于123

19:14.750 --> 19:17.350
啊Name等于啊乘哥

19:18.250 --> 19:20.750
啊然后呢H等于18

19:23.050 --> 19:25.350
好保存接下来我们再来看啊

19:26.750 --> 19:27.250
印象

19:27.550 --> 19:28.350
然后这边

19:30.850 --> 19:32.250
你看是不是得到一个节省对象了

19:32.650 --> 19:33.050
对不对

19:33.050 --> 19:33.750
然后我们看一下

19:33.750 --> 19:34.550
这个原式格式

19:34.550 --> 19:35.550
就就是原式格式

19:35.550 --> 19:36.450
就是一个节省对象

19:36.850 --> 19:37.850
然后呢黑道里边

19:37.850 --> 19:39.050
他会给你一个content tab

19:39.050 --> 19:39.850
application

19:39.850 --> 19:40.450
application

19:40.450 --> 19:40.850
节省

19:41.350 --> 19:42.450
对不对非常非常简单

19:42.550 --> 19:43.450
啊像的content tab

19:43.450 --> 19:44.550
他都会给你设置好

19:45.150 --> 19:45.950
而且呢然后呢

19:45.950 --> 19:47.750
我们其实也可以自手动的

19:47.750 --> 19:48.750
去设置响应头

19:49.150 --> 19:50.050
比方说怎么来设置呢

19:50.050 --> 19:50.650
响应头

19:50.950 --> 19:52.250
我们可以这样啊

19:53.350 --> 19:53.850
race

19:55.450 --> 19:55.950
header

19:59.450 --> 20:00.250
set header

20:00.850 --> 20:01.750
啊set header

20:02.050 --> 20:03.450
设置一个响应头

20:03.550 --> 20:05.250
比方说我们给他设置一个

20:05.250 --> 20:06.550
哎随便写个响应头吧

20:06.550 --> 20:08.250
啊迷路了等于123

20:08.650 --> 20:10.250
那么这就设置了一个响应头

20:10.550 --> 20:12.050
而且呢他们这些方法啊

20:12.150 --> 20:13.150
他返回的呢

20:13.150 --> 20:14.650
哦这个方法返回的是void啊

20:14.850 --> 20:15.850
反而是void

20:15.850 --> 20:17.250
然后呢我们再再来去

20:17.750 --> 20:18.550
用send

20:18.750 --> 20:19.850
啊再来去用send

20:20.050 --> 20:21.450
我们来看一下给他一个数组

20:23.150 --> 20:23.650
保存

20:24.250 --> 20:25.250
啊简单我们看啊

20:28.120 --> 20:28.620
pose

20:29.220 --> 20:29.820
运行

20:29.820 --> 20:30.620
那么你看呢

20:30.620 --> 20:32.020
响应头里边是不是多了个a

20:32.220 --> 20:32.720
对不对

20:32.720 --> 20:34.720
那么可以手动的去设置响应头的啊

20:34.720 --> 20:36.020
也非常非常简单

20:37.120 --> 20:38.220
然后呢有的时候呢

20:38.220 --> 20:39.220
我们不仅是要玩

20:39.220 --> 20:40.620
给他一个正常的响应

20:40.720 --> 20:41.820
还有可能会给他什么呢

20:41.820 --> 20:42.820
给他一个重定项

20:43.320 --> 20:44.220
知道重定项吧

20:44.420 --> 20:45.920
在adb协议里边服务器

20:45.920 --> 20:47.620
是不是给他返回一个301

20:47.920 --> 20:49.220
或者是302

20:49.320 --> 20:49.620
对不对

20:49.620 --> 20:50.620
一个叫临时重定项

20:50.620 --> 20:51.420
一个叫永久

20:51.620 --> 20:52.920
301是临时重定项

20:52.920 --> 20:54.720
301是永久重定项

20:54.820 --> 20:56.320
302呢是临时重定项啊

20:56.320 --> 20:57.420
看我自己说没有啊

20:58.420 --> 20:59.520
应该是这样子啊

20:59.820 --> 21:01.620
啊301

21:02.620 --> 21:03.320
302

21:04.120 --> 21:05.320
一个是临时的

21:05.420 --> 21:06.120
一个是

21:06.920 --> 21:08.420
怎么全是那个

21:09.920 --> 21:11.920
全是把就知道这种东西

21:12.920 --> 21:14.320
好

21:14.320 --> 21:16.820
咱们看一下那个消息码

21:18.320 --> 21:19.320
消息码

21:26.170 --> 21:26.570
哎

21:27.170 --> 21:28.170
哦想用吧

21:35.590 --> 21:37.190
不想说百度啊

21:41.120 --> 21:43.520
看一下301啊301和302

21:43.920 --> 21:44.720
301

21:45.320 --> 21:46.020
哦对

21:46.120 --> 21:47.720
这是永久的重定项

21:47.720 --> 21:48.720
302呢是

21:49.020 --> 21:50.420
临时重定项

21:50.420 --> 21:51.620
那我比较说

21:51.620 --> 21:51.920
我们给

21:51.920 --> 21:53.620
不论是301还是302啊

21:53.620 --> 21:54.220
都无所谓

21:54.220 --> 21:55.220
我们来怎么来去

21:55.220 --> 21:56.220
写这个重定项呢

21:56.220 --> 21:57.120
我们可以这样子

22:00.360 --> 22:02.060
首先呢给他设置Status

22:02.060 --> 22:03.260
表示我们的响应码

22:03.560 --> 22:04.060
响应码呢

22:04.060 --> 22:06.060
我们给他设置一个302啊

22:06.160 --> 22:07.060
临时重定项

22:07.760 --> 22:08.460
然后呢

22:08.460 --> 22:10.760
再去设置他的消息啊

22:10.760 --> 22:11.260
他反

22:11.260 --> 22:12.460
这个东西返回的是什么呢

22:12.460 --> 22:14.060
返回的仍然是一个啊

22:14.060 --> 22:15.460
仍然是一个response对象啊

22:15.460 --> 22:16.860
他是把自身设置好了过

22:16.860 --> 22:17.860
把自身返回

22:17.860 --> 22:19.860
说他返回的仍然是一个response对象

22:20.060 --> 22:20.360
因此呢

22:20.360 --> 22:22.460
我们可以用这种验识编程啊

22:22.560 --> 22:23.460
然后呢再干嘛呢

22:23.460 --> 22:24.560
再设置这个header

22:25.260 --> 22:26.260
再设置这个header

22:27.960 --> 22:29.460
刚才我们是用setheader对吧

22:29.460 --> 22:30.960
setheader返回的是这个

22:31.060 --> 22:32.660
返回的是一个void啊

22:32.660 --> 22:33.560
就没有返回

22:33.660 --> 22:35.160
那么可以用header这个函数呢

22:35.160 --> 22:37.360
你可以设置好了小硬头之后呢

22:37.360 --> 22:38.560
然后再进行返回

22:38.760 --> 22:39.160
好

22:39.260 --> 22:40.660
他返回的还是一个水质帮助对象

22:40.660 --> 22:42.260
我们就可以用这种电视编程

22:42.460 --> 22:44.960
好header里边我们给他设置一个什么location

22:45.860 --> 22:46.460
location

22:46.460 --> 22:47.060
然后呢

22:47.060 --> 22:48.860
设置一看我们的adb协议

22:48.860 --> 22:49.660
不就这样子吗

22:49.660 --> 22:49.860
对吧

22:49.860 --> 22:51.460
给他一个302的消息码

22:51.460 --> 22:51.760
然后呢

22:51.760 --> 22:53.160
给他一个小硬头里边个location

22:53.160 --> 22:53.960
然后呢

22:53.960 --> 22:55.460
就是重定向了哪去

22:55.460 --> 22:56.660
比方说重定向了百度

22:58.470 --> 22:59.870
3W点百度调抗

23:00.870 --> 23:01.270
好

23:01.370 --> 23:02.570
然后设置完了过后呢

23:02.570 --> 23:03.610
他仍然没有完成想

23:03.610 --> 23:05.770
因为他的消息体是不是没有写内容

23:06.070 --> 23:06.670
对不对

23:06.770 --> 23:07.570
那么你这个时候呢

23:07.570 --> 23:08.470
可以调用end

23:08.770 --> 23:09.670
end是什么意思呢

23:09.670 --> 23:12.370
表示的是就是那个我们那个response end

23:12.370 --> 23:12.470
啊

23:12.470 --> 23:14.670
就是我们之前学的那个留那个end啊

23:14.670 --> 23:16.170
表示我想

23:16.270 --> 23:17.270
想用消息体呢

23:17.270 --> 23:17.970
我就不写了啊

23:17.970 --> 23:19.470
就直接写完了啊

23:19.470 --> 23:20.070
那么

23:20.070 --> 23:21.970
如果说不写不写这个end的话

23:21.970 --> 23:23.570
那么他就会导致客户端那边

23:23.570 --> 23:25.570
就一直在等待的消息体啊

23:25.570 --> 23:27.570
所以说你一定要把end写上啊

23:28.070 --> 23:28.470
然后呢

23:28.470 --> 23:29.270
还有一个点啊

23:29.270 --> 23:30.770
就是说你这个sinder的时候

23:30.770 --> 23:32.670
他会自动在内部调用end啊

23:32.870 --> 23:33.970
他内部就调用end了

23:33.970 --> 23:34.770
所以你不用写

23:34.770 --> 23:35.470
但是其他的时候

23:35.470 --> 23:37.670
如果说你不用不调用这个sinder的话

23:37.670 --> 23:39.270
那么你要把这个end写上

23:39.370 --> 23:39.670
好

23:39.670 --> 23:40.770
那么我们来看一下吧

23:42.900 --> 23:43.900
哎咱们

23:44.500 --> 23:45.300
这里冰箱

23:46.100 --> 23:46.400
好

23:46.400 --> 23:48.400
接下来我们到这个pose man里面去

23:48.400 --> 23:49.000
琴球

23:50.100 --> 23:50.300
好

23:50.300 --> 23:50.800
你看

23:51.300 --> 23:52.700
是不是得到这么一个东西

23:53.700 --> 23:54.100
哎

23:55.900 --> 23:58.200
得到了就是得到的就是百度了啊

23:58.200 --> 23:59.300
这个地方就是百度了

23:59.800 --> 24:00.300
看一下

24:01.300 --> 24:03.100
得到的黑道是

24:03.100 --> 24:04.100
我看一下啊

24:04.900 --> 24:06.400
对这个得到的就是百度了啊

24:06.400 --> 24:08.600
他就从重定向到百度里边去了啊

24:08.600 --> 24:09.900
重定向到百度里边去了

24:10.100 --> 24:11.800
拜托他这边这边没有给我

24:11.800 --> 24:13.100
给我返回任何东西啊

24:13.400 --> 24:14.500
我们重定向到那个吧

24:14.500 --> 24:15.500
重定向到度一

24:16.000 --> 24:16.200
啊

24:16.200 --> 24:17.500
地啊第二

24:18.200 --> 24:21.300
edu.qq.com

24:21.700 --> 24:22.600
我们重新到这

24:24.840 --> 24:26.840
哎我记得是可以设置的啊

24:26.840 --> 24:28.640
是可以设置的那个就是

24:29.040 --> 24:30.640
pose man他要不要就是真正的去

24:30.640 --> 24:31.840
完成重定向你看

24:32.040 --> 24:33.040
是不是可以显示出来了

24:33.540 --> 24:35.740
哎我在哪里我在哪里设置我忘了

24:36.140 --> 24:37.840
我在哪里设置我忘了啊

24:38.040 --> 24:39.640
好像是是可以设置的啊

24:39.640 --> 24:41.040
就不要真正的去完成重定向

24:41.040 --> 24:42.440
我只是得到这个消息

24:42.540 --> 24:43.740
消息结果就行了

24:44.240 --> 24:45.640
那是哪里设置的

24:46.240 --> 24:47.140
我有点忘了啊

24:47.140 --> 24:48.240
可以摆设查一下啊

24:48.240 --> 24:48.840
我忘了

24:48.840 --> 24:50.440
然后我们来浏览器里边去看一下

24:50.840 --> 24:52.740
呃我们如果说去访问localhost

24:52.940 --> 24:55.640
808呃就是5008

24:56.440 --> 24:57.540
呃去访问

24:57.740 --> 25:00.840
abc呃就访问news123

25:01.740 --> 25:03.140
你看是不是跑到度一靠谈了

25:03.140 --> 25:04.540
对吧啊

25:04.640 --> 25:06.340
就是因为他有这个重定向啊

25:06.340 --> 25:07.740
消息码302

25:08.040 --> 25:09.940
想映头的就是有个location

25:10.040 --> 25:11.640
那么这边的其实还可以简写

25:11.640 --> 25:12.740
给他简写一下

25:13.540 --> 25:15.140
就是race status

25:15.640 --> 25:16.440
啊302

25:16.740 --> 25:19.140
然后呢我们使用这个location

25:19.840 --> 25:21.540
啊他是有个想法呢

25:21.540 --> 25:22.440
相当于是余法堂

25:22.440 --> 25:23.240
也不叫余法堂吧

25:23.240 --> 25:25.940
就一个api啊能够帮你简化这个操作

25:26.140 --> 25:27.140
好咱们来看一下

25:27.940 --> 25:29.740
把这个东西写进去

25:30.240 --> 25:31.640
直接就完成重定向了啊

25:31.640 --> 25:33.040
那么这个东西就是设置

25:33.040 --> 25:34.440
他自动给你设置个消息头

25:34.440 --> 25:34.940
location

25:35.240 --> 25:36.140
好咱们来看一下

25:38.300 --> 25:39.300
好接下来我们在

25:39.600 --> 25:40.400
posed man里面

25:40.500 --> 25:41.800
你看我们请求的这个例子

25:42.400 --> 25:42.900
运行

25:45.080 --> 25:46.880
哎呀我还是要调用ind

25:47.080 --> 25:47.980
ind还要调用

25:50.120 --> 25:52.120
他就简化了最消息头的处理

25:54.740 --> 25:55.840
好接下来再来看啊

25:56.240 --> 25:57.440
嗯posed man

25:58.040 --> 25:58.540
运行

25:59.040 --> 26:00.340
你看是不是还是跳过去了

26:00.340 --> 26:01.340
对吧play with you啊

26:01.340 --> 26:02.240
是不是还是跳过去了

26:02.740 --> 26:03.440
没问题吧

26:03.840 --> 26:04.840
啊这是这一块啊

26:04.840 --> 26:05.740
然后呢

26:05.940 --> 26:07.340
这里还可以简化啊

26:07.340 --> 26:08.840
他还可以提供了这个东西

26:09.140 --> 26:09.740
race

26:10.340 --> 26:11.240
redirect

26:11.840 --> 26:12.840
直接重定向

26:13.140 --> 26:14.940
你直接给他给他一个路径就行了

26:14.940 --> 26:16.440
啊我们给他这么一个路径

26:18.340 --> 26:19.740
直接重定向了这个地址

26:20.240 --> 26:20.940
啊是可以的啊

26:20.940 --> 26:22.040
你可以给第二个参数

26:22.040 --> 26:23.140
第二个参数就是状态吗

26:23.140 --> 26:24.340
他默认是301

26:24.340 --> 26:25.240
你给他给302

26:25.540 --> 26:27.040
啊如果说不写的话就301

26:27.540 --> 26:28.640
啊他就是redirect

26:29.240 --> 26:30.140
好咱们再试一下

26:30.840 --> 26:31.840
完全一样的效果

26:32.740 --> 26:33.340
好这里

26:34.240 --> 26:34.740
send

26:34.940 --> 26:36.140
是不是也是一样的

26:36.640 --> 26:38.340
对吧好这就是那个

26:38.640 --> 26:39.840
啊这个重定向

26:40.440 --> 26:41.940
设置消息头设置消息码

26:41.940 --> 26:42.940
是不是我们都可以搞定了

26:42.940 --> 26:44.340
设置些消息头消息码

26:44.340 --> 26:45.940
然后重定下什么都可以搞定了

26:46.140 --> 26:47.840
非常非常的方便啊

26:48.040 --> 26:48.940
那么这就是

26:49.240 --> 26:50.840
如何去配置一个请求

26:51.240 --> 26:52.440
那么配置请求的时候呢

26:52.440 --> 26:53.640
我们也可以啊

26:53.640 --> 26:54.140
这就是get

26:54.140 --> 26:54.840
当然也可以

26:55.040 --> 26:56.040
用posed请求啊

26:56.040 --> 26:56.840
其他请求

26:56.840 --> 26:57.640
就是我们

26:58.040 --> 26:58.940
给他减少一个东西啊

26:58.940 --> 26:59.440
不知道大家

26:59.440 --> 27:00.940
我不知道你们之前那个网络

27:01.340 --> 27:02.840
网络那个课程啊

27:03.040 --> 27:03.740
学的咋样

27:04.740 --> 27:06.840
咱们有这么一个东西叫做raist

27:07.840 --> 27:09.140
raiser风格的

27:10.340 --> 27:12.140
接口啊API接口

27:12.540 --> 27:13.440
这什么意思呢

27:13.440 --> 27:17.740
啊就是说我们可以去规范化我们的接口路径

27:17.740 --> 27:19.440
和接口方法啊

27:19.440 --> 27:21.840
不然的话一人写一个样子

27:21.840 --> 27:23.940
呃一是不好记忆

27:24.240 --> 27:26.340
二是呢容易混乱啊

27:26.340 --> 27:27.140
那么raiser风格呢

27:27.140 --> 27:27.940
他就指的是

27:28.440 --> 27:29.740
对对一个资源啊

27:29.740 --> 27:31.640
我们通过不同的请求方法呢

27:31.640 --> 27:33.440
来对他进行做不同的处理

27:33.440 --> 27:34.240
比方说吧

27:34.340 --> 27:36.240
我们比方说我们要在

27:36.440 --> 27:38.040
我们的系统里边添加一个学生

27:38.040 --> 27:39.640
我们都以比方说我们都规定

27:39.640 --> 27:41.040
以API开头

27:41.440 --> 27:42.440
然后呢后边呢

27:42.440 --> 27:44.840
写上资源的名称学生

27:44.840 --> 27:46.440
对啊对学生进行操作

27:46.840 --> 27:48.940
那么通过这个不同的方法呢

27:48.940 --> 27:50.840
来表示我的不同的操作

27:50.840 --> 27:52.340
比方说我用posed方法

27:52.340 --> 27:53.040
表示什么呢

27:53.040 --> 27:54.640
表示添加学生

27:55.440 --> 27:56.440
添加学生

27:56.440 --> 27:58.940
你看这样子就就很容易理解了啊

27:59.140 --> 28:00.140
然后呢要修

28:00.140 --> 28:01.440
比方说要得到学生

28:01.440 --> 28:02.640
我们就用啊

28:02.640 --> 28:04.340
student还是student

28:04.340 --> 28:05.540
用get的方法呢

28:05.540 --> 28:07.840
来得表示获取学生

28:08.640 --> 28:09.540
用获取学生

28:09.540 --> 28:10.440
原来的意思吧

28:10.540 --> 28:12.240
然后呢如果说我们要修改学生

28:12.240 --> 28:14.040
我们用API还是同一个接口

28:14.040 --> 28:14.940
接口都不变

28:15.240 --> 28:16.340
用posed方法呢

28:16.340 --> 28:18.640
表示修改学生啊

28:18.740 --> 28:20.140
当然呢也有的公司呢

28:20.140 --> 28:22.040
他可以他用这种方式啊

28:22.040 --> 28:22.540
修改学生呢

28:22.540 --> 28:24.340
你要给我给我一个学生的id

28:25.140 --> 28:26.240
啊就是我们的接口

28:26.740 --> 28:28.540
用posed方法的表示修改啊

28:28.540 --> 28:30.940
修改了和时候可以传递一个消息体

28:30.940 --> 28:32.140
这些东西都不是说

28:32.140 --> 28:33.740
是不是协议又增加了

28:33.740 --> 28:34.940
协议没有增加

28:34.940 --> 28:35.540
因为我们知道

28:35.540 --> 28:37.340
htp协议里边的方法名字啊

28:37.340 --> 28:38.140
是不是随便写的

28:38.140 --> 28:39.340
还只是个字无窜而已

28:39.340 --> 28:39.840
对吧

28:40.040 --> 28:41.240
只是racer风格里面呢

28:41.240 --> 28:42.840
我们这样子约定啊

28:42.840 --> 28:43.440
get的时候呢

28:43.440 --> 28:45.140
如果说给一个id啊

28:45.140 --> 28:46.340
如果说给一个id

28:46.340 --> 28:47.540
可以给可以不给

28:47.540 --> 28:48.340
给一个id的话

28:48.340 --> 28:49.240
不给的id的话

28:49.240 --> 28:50.440
就获取所有学生对吧

28:50.440 --> 28:51.140
给一个id的话

28:51.140 --> 28:52.740
我们就获取单个学生

28:52.740 --> 28:53.440
好

28:53.440 --> 28:55.140
然后呢API student

28:56.340 --> 28:57.140
如果说

28:57.540 --> 28:58.140
给个id

28:58.140 --> 28:59.740
然后呢我们就可以删除

28:59.740 --> 29:00.840
用delay的方法

29:00.840 --> 29:01.940
就是删除学生

29:02.040 --> 29:02.240
对吧

29:02.240 --> 29:04.640
我们通过不同的请求方法来标注

29:04.640 --> 29:05.440
不同的

29:05.840 --> 29:06.740
操作类型

29:06.840 --> 29:08.140
接口都是同一个接口

29:08.340 --> 29:08.640
看没有

29:08.640 --> 29:10.040
地址都差不多的对吧

29:10.040 --> 29:10.840
几乎是同一个地址

29:10.840 --> 29:12.740
当然你也可以不用这种方式

29:12.740 --> 29:13.540
你用什么呢

29:13.640 --> 29:14.440
你用那个

29:14.840 --> 29:15.440
呃

29:15.540 --> 29:17.240
用那个就是地址男传餐

29:17.240 --> 29:17.540
对不对

29:17.540 --> 29:18.840
用query的那种方式

29:19.040 --> 29:19.940
啊也可以

29:20.240 --> 29:20.540
对吧

29:20.540 --> 29:21.840
是不是接口就相同了

29:22.040 --> 29:22.740
完全相同

29:22.740 --> 29:23.240
这样子呢

29:23.240 --> 29:24.040
你记忆量

29:24.040 --> 29:25.740
你的记忆量是不是大大减少了

29:25.940 --> 29:26.640
啊以前呢

29:26.640 --> 29:27.940
如果说不用优设风格的话

29:27.940 --> 29:28.840
可能会怎么写呢

29:28.840 --> 29:30.240
可能是API student

29:30.240 --> 29:31.040
然后鞋杠

29:31.040 --> 29:32.240
add student

29:32.840 --> 29:33.540
添加学生

29:33.840 --> 29:34.940
API student

29:34.940 --> 29:36.440
get a student 获取学生

29:36.440 --> 29:37.840
get a student by id

29:37.940 --> 29:39.140
通过id再获取学生

29:39.140 --> 29:40.640
以前最早的时候是这样做的

29:40.740 --> 29:42.340
啊这样子的接口就数量就太多

29:42.340 --> 29:43.640
就是路径的数量就太多了

29:43.640 --> 29:45.240
啊我们用请求的方法呢

29:45.340 --> 29:46.340
来进行区分

29:46.740 --> 29:47.440
没了意思吗

29:47.940 --> 29:49.040
好这是关于这个啊

29:49.040 --> 29:49.840
我说一下

29:49.940 --> 29:51.740
那么他这里边呢也支持这种啊

29:51.740 --> 29:52.840
你看APP

29:53.040 --> 29:54.140
get刚才是get方法吧

29:54.140 --> 29:54.380
对吧

29:54.380 --> 29:55.340
匹配get方法

29:55.340 --> 29:56.440
然后匹配post

29:56.540 --> 29:57.440
匹配put

29:57.640 --> 29:58.540
匹配delete

29:58.740 --> 30:00.540
你看啊是不是一样的啊

30:00.540 --> 30:02.040
如果说你要都要匹配的话

30:02.040 --> 30:02.940
那么就写什么呢

30:02.940 --> 30:03.540
写o

30:04.440 --> 30:06.540
啊就是这个是匹配所有方法

30:07.040 --> 30:07.640
没了意思吧

30:07.640 --> 30:08.840
匹配所有方法非常简单

30:08.840 --> 30:09.840
我不验识了啊

30:10.140 --> 30:10.540
然后呢

30:10.540 --> 30:11.640
还有一个东西就是

30:11.640 --> 30:13.540
你在写个请求方法的时候呢

30:13.540 --> 30:15.440
你的路径如果说写一个新号

30:16.140 --> 30:17.640
就表示匹配所有路径

30:18.240 --> 30:19.440
只要你是get这请求

30:19.440 --> 30:20.840
你就匹配所有路径

30:21.640 --> 30:22.440
任何路径

30:22.440 --> 30:24.340
他都他都可以在这里进行处理

30:24.740 --> 30:25.540
没了意思吧

30:25.840 --> 30:26.540
好那么这里呢

30:26.540 --> 30:27.240
还有一个啊

30:27.240 --> 30:28.740
就是你不写第1个参数

30:28.740 --> 30:29.640
你直接写这个

30:30.340 --> 30:31.440
那么这什么意思呢

30:31.440 --> 30:33.140
这是也是跟刚才一样

30:33.140 --> 30:34.940
任何的请求啊

30:34.940 --> 30:36.540
任何就是匹配任何

30:37.040 --> 30:39.540
匹配任何那个

30:40.140 --> 30:41.540
呃get请求

30:42.440 --> 30:43.940
好我们这里啊

30:43.940 --> 30:45.240
比方说我们输出一个

30:45.740 --> 30:46.940
啊abc

30:47.940 --> 30:49.040
好保存啊

30:49.040 --> 30:50.140
咱们这里重新来

30:50.140 --> 30:50.940
重新运行

30:52.910 --> 30:54.610
好接着我们到postman里面去啊

30:54.610 --> 30:55.610
直接send吧

30:56.210 --> 30:57.710
好咱们看一下这控载输出

30:58.010 --> 30:59.210
控载这里呢

31:00.010 --> 31:01.610
他什么expressd

31:02.610 --> 31:03.610
readyregs

31:03.810 --> 31:04.610
哦

31:05.210 --> 31:06.610
他说这种邪法呢

31:06.610 --> 31:08.010
已经过时了啊

31:08.210 --> 31:10.010
他说这个邪法已经过时了

31:10.010 --> 31:10.910
让你呢

31:10.910 --> 31:11.910
用这种邪法

31:12.010 --> 31:13.210
就是readyregs这里啊

31:13.210 --> 31:13.710
已经过时了

31:13.710 --> 31:14.810
让你把一个消息码呢

31:14.810 --> 31:15.610
写前边

31:16.710 --> 31:18.110
让你把消息码写前边

31:18.110 --> 31:18.910
过时的写法呢

31:18.910 --> 31:19.910
我们尽量不要写啊

31:19.910 --> 31:20.910
不然因为他下个版本

31:20.910 --> 31:22.210
就可能会被移除掉了

31:24.830 --> 31:25.630
好再来啊

31:26.230 --> 31:26.730
send

31:27.330 --> 31:28.530
是一样的效果对吧

31:28.630 --> 31:29.430
是一样的效果

31:29.530 --> 31:30.530
那么这里没问题了

31:30.630 --> 31:31.430
那么这里你看啊

31:31.430 --> 31:32.130
我们现在呢

31:32.130 --> 31:33.530
是不是这个地方没有打印出来

31:33.630 --> 31:34.130
对吧

31:34.130 --> 31:34.730
没有打印出来

31:34.730 --> 31:36.430
因为我们前面前面已经被结获了

31:36.430 --> 31:36.630
对吧

31:36.630 --> 31:38.030
这个请求已经被处理过了

31:38.330 --> 31:39.130
啊那么这个东西呢

31:39.130 --> 31:39.930
我具体的想起呢

31:39.930 --> 31:40.930
我们后边还要说啊

31:40.930 --> 31:42.030
就交个中间见

31:42.130 --> 31:43.530
我们下面后边还要说啊

31:43.630 --> 31:44.630
那么现在我们是不是

31:44.630 --> 31:45.930
不会出出任何事情了

31:45.930 --> 31:47.330
如果说

31:47.630 --> 31:48.430
你这里呢

31:48.730 --> 31:49.430
给他

31:49.730 --> 31:51.230
请求一个另外一个地址

31:51.230 --> 31:52.230
前面匹配不上了

31:52.630 --> 31:53.430
匹配不上的时候

31:53.430 --> 31:54.130
你看一下

31:54.230 --> 31:56.030
他康纳斯给的这个东西啊

31:56.130 --> 31:57.130
那么我们看一下这边

31:58.030 --> 31:58.430
嗯

31:58.930 --> 32:00.030
没有打印出来

32:00.730 --> 32:01.930
啊看一下get

32:03.630 --> 32:06.130
这边我们只写了这个是吧

32:08.300 --> 32:09.300
只写了这个

32:11.000 --> 32:11.800
找一找啊

32:11.900 --> 32:12.500
找一找

32:13.000 --> 32:14.600
那有可能是我记错了

32:14.700 --> 32:16.600
我可能记错了记成又似的啊

32:16.700 --> 32:17.700
那我这里还要写上

32:17.700 --> 32:18.600
写上一个信号

32:18.800 --> 32:20.600
啊匹配所有警戒写上一个信号

32:21.200 --> 32:22.600
再来再重新来啊

32:24.300 --> 32:24.800
英雄

32:27.700 --> 32:29.200
回去啊先看这个

32:30.200 --> 32:30.700
运行

32:30.700 --> 32:32.200
然后看一下有没有有没有运行

32:32.200 --> 32:32.800
是不是没有运行

32:32.800 --> 32:33.900
前面的请求被解获了

32:33.900 --> 32:34.300
对吧

32:34.500 --> 32:34.800
然后呢

32:34.800 --> 32:36.500
我们再重新请求一个地址啊

32:36.600 --> 32:37.400
又是123

32:37.700 --> 32:38.200
请求

32:38.400 --> 32:39.100
好你看

32:39.300 --> 32:40.900
这里是不是输出了 abc

32:40.900 --> 32:41.100
对吧

32:41.100 --> 32:42.500
是不是被这个东西解获到了

32:42.800 --> 32:43.800
被这个东西解获到了

32:43.800 --> 32:44.000
对吧

32:44.000 --> 32:44.900
匹配任何请求啊

32:44.900 --> 32:46.000
刚才那种写法不能写啊

32:46.000 --> 32:47.000
刚才我记成那个

32:47.000 --> 32:47.900
记成use的

32:48.500 --> 32:49.600
我们后边再说

32:49.900 --> 32:50.100
好

32:50.100 --> 32:51.500
这是关于这个啊

32:52.500 --> 32:53.500
那么现在最基本的

32:53.500 --> 32:55.000
就是这个express的使用呢

32:55.000 --> 32:56.200
我们就讲到这里了啊

32:56.400 --> 32:56.900
嗯

32:56.900 --> 32:58.400
但是这个最基本的使用呢

32:58.400 --> 33:01.000
还是也会有一些问题出现

33:01.300 --> 33:03.100
比方说我们这个代码结构

33:03.100 --> 33:03.900
就不是很好

33:04.400 --> 33:04.900
为什么呢

33:04.900 --> 33:05.300
你看啊

33:05.300 --> 33:07.700
我们这里要请求的很多的 api 结构

33:07.700 --> 33:07.900
对吧

33:07.900 --> 33:09.700
比方对学生的操作啊

33:09.900 --> 33:10.700
对那个

33:11.300 --> 33:12.300
书籍的操作啊

33:12.300 --> 33:13.300
对耳朵命的操作啊

33:13.300 --> 33:13.900
登录嘛

33:13.900 --> 33:14.500
对不对

33:14.500 --> 33:16.500
还有对对那个就是什么呢

33:16.800 --> 33:17.200
什么呢

33:17.200 --> 33:18.800
还有对班级的操作对吧

33:18.900 --> 33:20.600
那么如果说全部这样子写的话

33:20.600 --> 33:22.200
一个文件里面就会写很多啊

33:22.200 --> 33:23.400
逻辑没有分开

33:23.500 --> 33:23.900
所以说呢

33:23.900 --> 33:26.300
我们通常不会用这样的代码结构

33:26.300 --> 33:27.600
那么用怎么样的代码结构呢

33:27.700 --> 33:29.500
我们还要学习更多的知识啊

33:29.600 --> 33:29.800
好

33:29.800 --> 33:31.800
咱们留到后边的课再说吧

33:31.800 --> 33:32.600
这是最基本的使用

33:32.600 --> 33:33.700
大家可以练习一下啊

33:33.700 --> 33:35.200
express怎么去使用它

