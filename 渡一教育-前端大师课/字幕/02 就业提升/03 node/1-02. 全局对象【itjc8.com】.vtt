WEBVTT

00:00.560 --> 00:09.060
OK 那咱们 这一张呢 接下来就开始一试讲解 咱们漏的里边的一些核心的API

00:09.060 --> 00:16.360
我们把这些核心的API学完了之后啊 我再给大家讲这个漏的里边的一些原理性的东西

00:16.360 --> 00:18.960
有时候面试的时候呢 容易遇到了一些东西

00:18.960 --> 00:25.060
如果说你没有学习过这漏的核心API 一上来就讲原理的话 你可能不知道我来说什么

00:25.060 --> 00:29.060
咱们说一说 现在学习API API是比较简单的

00:29.560 --> 00:33.560
跟那个浏览器呢 一样 漏的里边呢 它也有权力对象

00:34.560 --> 00:38.760
就浏览器里边有一个什么呢 Windows 对吧 一个权力对象 漏的里边也有

00:40.060 --> 00:43.860
那漏的里边的权力对象叫什么呢 叫做Globo 叫做Globo

00:45.260 --> 00:49.860
Globo 好 咱们在漏的里边输出一下吧 输出一下Globo

00:50.960 --> 00:56.360
这些东西没有智能提示啊 没有智能提示的话 你看像这些require都没有智能提示

00:56.860 --> 01:02.260
如果说你看了我的那个课程 什么课程呢 就是那个TypeScript的课程

01:02.260 --> 01:07.360
有可能有些朋友没看 没关系啊 又跟着我做就行了 如果说你需要这个智能提示的话

01:07.360 --> 01:09.960
那么就安装一个东西 所以我们初识化一下

01:11.660 --> 01:16.860
如果说你学到这个TypeScript的话 你知道我来说什么 我们这里安装一个叫做Type

01:18.060 --> 01:22.160
Node 安装一下这个东西就行了 很快就安装完了

01:23.160 --> 01:26.660
好 安装好了之后呢 我们来看一下啊 这个就是输出Globo

01:28.360 --> 01:33.860
好像还是没智能提示吧 但是其他应该有了啊require这些东西都有了 好 咱们来输出一下啊

01:33.860 --> 01:35.660
这就是我们Node里边的权力对象

01:36.760 --> 01:39.760
注意啊 你这里不能用Zis啊 Zis是得不到权力对象的啊

01:40.360 --> 01:45.460
我们后边下节课再说关于Node的模块化里面的一些细节啊 以前讲过Node的模块化

01:45.960 --> 01:49.960
common.js 对吧 一些细节呢 我们下节课再说啊 这里呢要用Globo

01:50.460 --> 01:55.860
表它的权力对象就像我们用的浏览器里面的Window一样啊 好 咱们来输出看一下吧

01:57.160 --> 02:05.260
Node index啊 这就是它的权力对象 当然了 这里呢 它并没有把那个整个的所有属性给你列出来啊

02:05.660 --> 02:08.660
它只是列了一部分 还有一些属性 咱们一会儿一个个说

02:10.060 --> 02:15.160
这个权力对象里边呢 我一个个说吧 首先它有一个属性 就是它的里边的所有的属性啊

02:15.660 --> 02:21.460
它可以直接用的 跟那个Window一样 对吧 Window里边不是所有的属性都能直接用吗 咱们看浏览器

02:22.260 --> 02:28.160
浏览器里边不是一个Window对象吗 那个Window对象里边的所有属性啊 它都能直接用 比方说像CTimeout

02:28.660 --> 02:36.160
对吧 像这些东西 它都能直接用的啊 为什么能直接用呢 因为它是它是全局对象的一个属性

02:36.660 --> 02:38.960
凡是全局对象的属性了 它能直接用 你看没

02:39.960 --> 02:44.960
那么这个地方呢 我这里要说一点啊 就是关于这个Globo 它为什么里面有个属性Globo

02:45.960 --> 02:47.960
它是怎么回事呢 它是这样子的

02:49.060 --> 02:56.060
我们 它实际上是全局对象里边的所有属性可以直接用 那全局对象本身怎么办呢

02:56.360 --> 03:00.560
这啥意思 就比方说啊 咱们比方说啊 咱们这里有个全局对象

03:01.360 --> 03:06.560
啊 里边有什么CTimeout啊 CTimeout啊 一个一个方式嘛 对吧

03:07.760 --> 03:10.360
啊 一个全局对象 比方说啊 这个OPG是个全局对象

03:11.360 --> 03:15.360
什么set interval啊 或者是console啊 是一个对象 对吧

03:16.860 --> 03:20.660
那么这个对象里边所有属性可能只可以直接用 所以说这些东西呢 你可以直接用

03:21.560 --> 03:24.460
但是全局对象本身怎么办呢 怎么办呢

03:25.760 --> 03:29.560
它就可以这样子来做 OPGGlobo啊 等于OPG

03:29.760 --> 03:34.160
它把自己的负责给它一个属性 那么这样子呢 它里边是不是多了一个属性Globo

03:34.260 --> 03:36.160
那么你可以直接用了啊 它是这么回事

03:36.360 --> 03:40.860
它跟那个window里边是的做法是一样的 你看window里边不是也有一个window吗

03:41.160 --> 03:45.160
对吧 它的 它的 那么这个window呢 跟自己是一样的

03:46.360 --> 03:52.360
这样的做法呢 主要是为了访问它自身 其实我们访问window的时候呢 访问的是它那个属性window

03:52.960 --> 03:55.160
对全局对象里边的属性window 是这么个意思

03:55.660 --> 04:01.860
ok 这是关于全局对象啊 那node里边的全局对象呢 它跟浏览器肯定有很大不同了

04:02.460 --> 04:06.160
咱们一个个来看 它主要我们平时要用到的

04:07.460 --> 04:10.260
就有可能是这些东西 其他的不太可能用到了

04:11.260 --> 04:14.660
那么这里呢 我们一个个看啊 一个是set timeout set interval

04:14.960 --> 04:18.860
功能是完全一样的 我都不解释了 我只说一点

04:19.260 --> 04:23.260
就set timeout set interval的话 它的返回结果呢 它不是一个数字

04:23.660 --> 04:27.360
因为我们知道浏览器里边的一个set timeout 它返回的是一个数字 对吧

04:27.860 --> 04:32.260
我们用timeout id set timeout 比方说我们随便写一个吧

04:33.860 --> 04:38.060
啊 那么这个timeout id呢 它是一个数字 它是个id 对吧

04:38.560 --> 04:42.460
在node环境里边的 它就不一样了啊 这个time我们来看一下

04:43.960 --> 04:48.360
timeout set timeout 比方说一秒钟 随便吧

04:48.760 --> 04:52.060
我们这里输出timeout 它是一个对象 还不再是数字了

04:52.660 --> 04:56.160
就这个地方呢 有个小区别 大家注意一下 你看它是个对象

04:56.960 --> 05:02.160
ok 这是关于这个啊 当对象的文凭是也不怎么用啊 当然你要清楚

05:02.260 --> 05:08.360
清楚计时器的话 用clear timeout clear interval都可以 这这些东西呢 都是全球对象

05:08.460 --> 05:09.460
global里边的属性

05:10.460 --> 05:13.460
好 另外一个呢 就是set immediate

05:14.360 --> 05:18.060
immediate是什么意思呢 就表示立即的啊 立即执行的

05:18.360 --> 05:22.860
那么这个set immediate是它的用法 跟那个set timeout是一样的 你可以把它想象成了

05:23.060 --> 05:30.260
类似于set timeout0 也说这里呢 写个0 那么这种写法呢 就相当于是set immediate

05:30.860 --> 05:32.460
相当于set 咱们来输出一下

05:33.660 --> 05:35.060
abc 随便吧

05:36.660 --> 05:41.060
运行 你看这里不是abc吗 对吧 就相当于是set timeout0

05:41.960 --> 05:44.860
不过呢 它肯定是跟那个set timeout0是有区别

05:45.460 --> 05:50.460
到底有什么区别呢 我现在不好给大家解释 你那么你要理解这个东西呢 你需要

05:51.260 --> 05:57.460
理解load里边的整个的它的生命周期 生命周期呢 我们放到这一张的最后讲

05:58.060 --> 06:02.360
因为那个东西你需要学一些api过后了 才我们才好举例子 才好理解

06:02.860 --> 06:06.160
好 这关于这个啊 目前呢 你可以把想象成类似于set timeout0

06:07.260 --> 06:13.060
好 那当然它是异步的啊 好不疑问 它是异步的 好 现在还console 啊console去控制台输出 对吧

06:13.360 --> 06:18.060
那么这个东西呢 跟那个浏览器是一样的啊 浏览器是在浏览器控制台里面输出

06:18.260 --> 06:25.660
那么它这个玩意呢 是在我们这个命令航空台里面输出啊 所以说console 啊 它也是global里面这个属性

06:26.460 --> 06:30.660
当它做这些东西啊 实际上利用的是什么呢 利用的就是v8引擎

06:31.060 --> 06:36.860
因为我们知道load里边呢 还有个核心部件就是v8引擎 对吧 这些呢都是v8引擎给你自带的东西

06:37.460 --> 06:42.460
当然了 它里边实具体的实现呢 可能会有一些差异 但是呢

06:43.060 --> 06:45.260
主要是利用v8引擎里面的东西来实现的

06:46.060 --> 06:53.060
好 下面这两个啊 应该有谁看过 你们学 如果说你学了v8来看这个课程的话 你肯定用我这玩意

06:54.060 --> 06:59.860
这个是什么呢 他表示的是啊 获取当前模块 所在等目录

07:01.060 --> 07:04.580
啊 比方说我们这个模块啊 在index.js里面 我们这里输出

07:05.700 --> 07:12.220
一样而练 那这一块代码我就不做保留了啊 不做保留了 因为都比较简单啊 咱们来看一下吧

07:12.940 --> 07:21.820
好 那么运行 你看一下 是不是打印出了我这个模块所在的路径 对吧 银盒是说银盒路径 那比方说我这里一个文件夹了

07:22.700 --> 07:31.220
啊 比方说一个src文件夹 那么文件夹里边呢 我放一个index.js 好 这里呢 我运行 要不要我们还是输出啊 d i r

07:33.420 --> 07:38.860
好 那么这里呢 我命令行是在这个目录 对吧 然后我们运行的是src下面的银盒

07:39.660 --> 07:45.100
那么你看到 那运行的是什么了 输出的是什么了 输出的就是这个这个模块所在的目录

07:45.420 --> 07:55.340
所以说呢 这个东西 我们以后呢 用的还是比较多的啊 特别是在vipac里边 用了很多啊 d i r name 呢 它会可以获取当前运行的这个模块

07:55.820 --> 08:06.620
它的绝对路径啊 目录在哪 啊 d i r name 那么这里呢 我给他说明一点啊 这个d i r name 呢 它并非globo的属性 也就是它不是globo里边的东西

08:07.580 --> 08:21.580
啊 他不是globo里边的东西啊 咱们再运行一下 你看是不是undefend 对吧 他不是globo里边的东西啊 那么他哪来的呢 你到了下节课 我讲这个load里边模块化的一些细节的时候呢 你就明白了

08:22.460 --> 08:24.540
好吧 ok 那是关于关于这一点

08:26.220 --> 08:33.340
另外一个下一个的就是file name 那么他的他的含义呢 是他获取当前啊 模块的文件路径

08:34.300 --> 08:42.620
啊 刚才是获取目录嘛 现在获取文件路径里边的 他也不是那个globo里边的属性啊 前面是两个下滑线啊 咱们咱们看一下吧

08:44.220 --> 08:46.380
啊 这里呢 用一个file name

08:48.380 --> 08:55.420
保存啊 咱们运行 你看是不是第一个是目录啊 第二个是文件路径 对吧 ok 那么这里呢是

08:56.780 --> 08:59.820
啊 这两个属性啊 他不是globo里边的属性啊

09:00.060 --> 09:05.180
好 下面这两个啊 下面这两个呢 将来呢有可能会用到 一个是buffer

09:06.300 --> 09:10.860
如果你肯定是学过我es6的 学过我es6的同学呢 应该知道啊

09:11.580 --> 09:15.340
buffer就是我们在es6里边有个什么类型化数组

09:16.060 --> 09:19.420
对不对 对吧 这么int8 array

09:20.380 --> 09:24.940
uint8 array 对吧 然后呢 还有一个什么呢 还有一个就是呢

09:25.660 --> 09:25.900
呃

09:27.660 --> 09:32.220
呃 哎 我有点忘了啊 总之我们讲过那个类型化数组 对不对

09:33.340 --> 09:37.180
那么这个buffer呢 他怎么来的呢 本来有了类型化数组 是不需要这个玩意的

09:37.660 --> 09:44.220
是不需要的 但是呢 因为我们知道load的出现时间啊 他是要比那个es6要早的

09:44.940 --> 09:48.540
对吧 所以说呢 在es6出来之前呢

09:49.180 --> 09:54.620
那他怎么办呢 他要用 他要用到这种东西 他是有需求的啊 load里边是有对这个东西是有需求的

09:55.020 --> 09:59.420
所以说呢 他自己也做了一个东西出来 但是后来呢es6出来过后呢

10:00.300 --> 10:05.980
他就现在就做了一个很简单的事情 跟那个类型化数组基本上一致了啊 他是基层字

10:07.660 --> 10:11.020
基层字那个uint8 array

10:12.940 --> 10:14.620
由int8什么意思 u什么意思

10:15.180 --> 10:21.500
无符号 对吧 他没有复数 这个数组里面每一个地方装的是一个数字 这个数字呢是没有复数的

10:22.380 --> 10:26.460
int8什么意思呢 他每一个数字呢是一个整数 他是int对吧

10:27.100 --> 10:33.420
int表示一个整数 没有符号 也说没有复数 并且是一个整数 每一个数字呢占八位

10:34.140 --> 10:38.140
还记得吗 给大家回一下啊 每一个数字占八位 占八位是不是一个字节

10:38.780 --> 10:39.900
对不对 一个字节

10:41.020 --> 10:43.900
那么每一个数字占八位 他的取值范围是多少呢

10:44.380 --> 10:48.300
什么0到255 对不对 他的取值范围是0到255

10:48.700 --> 10:54.060
那么每一个数 就是这个数组里面 每个数字呢 是一个0到255之间的数字 就这么简单

10:55.500 --> 10:56.700
那这个八号有什么意义呢

10:57.500 --> 10:59.980
啊 我们要知道咱们的计算机里面呢

11:01.100 --> 11:03.340
存储的基本单位是什么啊

11:03.900 --> 11:10.300
尝试大家知不知道啊 计算机中存储的基本单位 是什么呢 是不是字节

11:10.780 --> 11:13.180
对吧 按字节来存储的 还有基本单位

11:14.220 --> 11:17.180
那么这个字节来存储的话 一个字节是不是八位 对吧

11:17.580 --> 11:20.300
那么这个数组呢 是不是可以记录每一个字节的数字

11:21.020 --> 11:25.660
对不对 每一个字节的数字 它就可以反映在内存里边 或者是我们的数据的真实的

11:26.620 --> 11:28.380
情况 比方说我要读一个图片

11:29.100 --> 11:31.420
把一个图片读出来过后呢 它就应该是一个buffer

11:31.820 --> 11:35.500
对吧 应该是一个buffer 八号里面每一个就是一个字节 一个字节的数据

11:36.300 --> 11:39.340
二进字的 对吧 把每一个数据呢 它就是一个数字嘛

11:39.660 --> 11:42.940
我们表示的时候呢 一般用十六进字来表示 给大家看一下吧

11:43.420 --> 11:47.820
我们的buffer呢 目前呢 我们到不会太怎么去直接用它

11:48.540 --> 11:52.620
一般来说是读文件的时候呢 跟流操作的时候呢 我们可能会用到它

11:53.020 --> 11:58.140
好 咱们来看一下吧 这里呢有个buffer 我们通过它的一个静态方法

11:58.700 --> 12:00.780
来自一个字书串啊 我们给它一个字书串

12:01.740 --> 12:03.180
abcdefg

12:03.740 --> 12:07.260
啊 随便写个吧 后边写编码啊 编码的话 uqv8

12:08.060 --> 12:09.740
好 那么这里呢 就得到一个buffer

12:11.020 --> 12:12.300
好 咱们把这个buffer输出

12:14.860 --> 12:15.420
buffer输出

12:18.140 --> 12:19.900
load index

12:20.620 --> 12:20.860
ok

12:22.300 --> 12:27.820
哎 怎么跑到来了啊 应该是loadsrc index

12:29.100 --> 12:35.980
好 你看 把法输出了 我们这里有几个数字 几个字母 1 2 3 4 5 6 7 7个字母 对吧 那么有几个字节

12:37.420 --> 12:43.100
一个字母是不是一个字节 对吧 一个字节 那么一个字节是不是两位的十六进字能表示

12:44.060 --> 12:49.180
啊 有时候可能有点懵了啊 为什么两位的十六进字能表示一个字节呢

12:50.780 --> 12:53.580
我这里呢 一时半会聊个 当然我给你解释

12:54.620 --> 12:57.260
我给你解释不清楚 这东西要说来还要话长

12:58.540 --> 13:02.620
现在呢 我们慢慢来更新博客啊 大家可以看一下这这一篇文章

13:03.340 --> 13:10.220
我把个链接地址放过来 从二进字到十六进字啊 我把一些计算机基础的一些知识呢放到我的博客里面

13:10.780 --> 13:12.220
我们这里说一下啊 这个是

13:13.420 --> 13:16.380
输出时啊 我们往往

13:18.060 --> 13:21.660
使用时 使用时输出时

13:22.700 --> 13:26.860
可能需要用十六进字啊 十六进字

13:29.610 --> 13:36.010
十六进字表示 那么这个地方呢 为什么要用十六进字表示呢 你可以看一下这篇博客

13:36.570 --> 13:37.450
啊 讲得很清楚了

13:37.930 --> 13:43.770
OK 那么这是buffer啊 我们之后会用到的啊 现在呢 我们就看一看就行了啊 看一看就行了

13:44.730 --> 13:45.210
OK

13:46.090 --> 13:54.330
好 这是关于buffer 下面这个呢是process process呢 我们里边呢 用的它几边属性其实是很多啊 非常非常多的属性

13:54.650 --> 13:58.810
一些一些方法 不过呢我们平时用的话一般就用这个m 我们一个个说吧

13:59.370 --> 14:01.290
首先它有这么一个方法啊 cwd

14:02.090 --> 14:05.770
这什么意思呢 这个方法呢 它能够获取当前的

14:06.810 --> 14:11.930
命令啊 命令说就是执行执行那个load命令的时候 它的命令行

14:12.490 --> 14:18.490
比方说我这个例子 这里边我们在index里边呢 我们输出一下这个啊

14:19.290 --> 14:22.650
命令行 当前 当前命令行

14:24.570 --> 14:27.450
然后呢 process the process

14:28.650 --> 14:33.610
cwd啊 好 咱们来看一下吧 它输出的结果

14:37.450 --> 14:38.490
load index

14:38.890 --> 14:43.610
你看 输出了是不是这个路径 好 那我现在反

14:44.250 --> 14:46.810
或者我们现在把这个单码呢 放到这儿

14:47.610 --> 14:52.570
放到这儿来 那么我们现在运行一下load src下面的index

14:53.530 --> 14:56.170
你看是不是还是这个路径 对吧 是不是还是个路径

14:57.050 --> 15:00.810
为什么呢 为什么还是这个路径呢 然后这里没保存啊

15:01.370 --> 15:06.970
嗯 因为我这个东西它得到了结果呢 它跟你当前文件在哪没关系

15:07.690 --> 15:13.610
它主要是得到我们运行load的命令的时候呢 它的命令行所在的路径

15:15.450 --> 15:20.650
意思吧 所以这个cwd啊 因为process这个单词什么意思呢 process这个单词呢表示的是

15:21.210 --> 15:27.130
进程啊 就是我们当前运行load的时候呢 它就其实运行的也是一个应用程序 对吧

15:27.690 --> 15:32.890
那么这个应用程序呢 它肯定要在我们的操作系统里面占一个进程跟这个进程相关的信息

15:33.690 --> 15:39.290
那么这个cwd呢 表示我们那个进程是在哪一个命令行 哪一个命令行目录下面开启的

15:39.610 --> 15:43.690
要这么个意思啊 工作目录 我们把它叫做工作目录 它是个绝对路径

15:44.810 --> 15:49.370
好 第二个叫xs xs呢 就是强制退出我们的load的进程

15:50.170 --> 15:53.690
好 比方说啊 咱们呢 这里呢有一个代码

15:58.410 --> 16:03.290
啊 我们还是这样吧 还是在抛销里边 抛销里边

16:07.420 --> 16:09.980
抛销里边打开 让大家看的清楚一点啊

16:16.940 --> 16:26.010
好 呃 然后我们这里这样 我看一下 我想教你哪来了啊xs 比方说我们这里set time out

16:27.530 --> 16:32.170
set time out 呃 一秒钟之后呢 输出一个abc

16:33.530 --> 16:41.370
啊 然后呢 我们这里呢 运行一下啊load index 你看 它是没法结束的 它要等一秒钟之后呢 输出了abc过后才能

16:41.610 --> 16:49.610
程序才能结束 那如果说我这里在这里这样子 呃 我们这里呢 直接在这里process xs

16:51.530 --> 16:54.410
在这里结束 那么你看一下 还会不会输出abc呢

16:56.250 --> 17:02.890
这就不会了 对吧 程序就立即结束了 为什么呢 因为一想到这句话的时候呢 就相当于是强制退出这个进程

17:03.210 --> 17:10.170
就相当于是把我们的那个进程删掉了啊 在在这个资源 在这个就是任务管理器里面吧 我们把个进程删掉了

17:10.410 --> 17:17.050
啊 相当于这么一个意思啊 这是关于这一块啊 这个xs里边还可以传入一个错误 就是一个消息码

17:17.450 --> 17:23.930
因为操作系统呢 每一个进程退出的时候呢 操作系统会受到一个消息码 那么可以可以让操作系统知道

17:24.650 --> 17:29.690
这个进程是正常退出的 还是错误退出的 那么操作系统呢 可以做一些日子记录

17:30.490 --> 17:36.010
如果说如果你不写的话 那么就相当于是零啊 这个零是怎么意思呢 这零就表示的是

17:36.730 --> 17:44.010
退出的状态码 退出状态码 表示是成功退出没有错误 没什么意思吧 如果说一的话 那么表示有错误

17:45.610 --> 17:52.330
如果说你接触过一些C语言的程序的话 你会知道啊 它最后返回了个0 对吧 阻含数返回个0 为什么呢 表示了没有错误

17:53.370 --> 17:54.490
好 OK this is an xs

17:55.370 --> 18:01.050
所以从这些角度来看的话 它跟扭烂器环境是不是很大的差异 对不对 好这个

18:01.690 --> 18:06.410
argue啊argue 这什么意思呢 它能够获取呢 执行我们的

18:07.450 --> 18:16.570
代码的时候呢 所有的命令行参数 这啥意思啊 咱们来看一下吧 这东西你只有看一下你还知道什么意思啊 说是这个argue

18:18.010 --> 18:19.530
它是个数组啊 它是个数组

18:20.330 --> 18:21.610
好 咱们在这里运行

18:22.490 --> 18:25.050
比方说我们no的里边我们运行index

18:25.770 --> 18:29.050
运行命令的时候 是不是可以传一些参数 对不对 你学到web pack

18:29.610 --> 18:35.210
web pack里边是不可以传各种各样的参数 对不对 还学了一些其他的命令行 都可以传参数 随便传一些吧

18:36.650 --> 18:37.130
一回车

18:38.730 --> 18:40.330
诶 这里写错了吗

18:41.690 --> 18:44.090
对啊 它说这个东西is not defend

18:45.610 --> 18:45.850
呃

18:47.530 --> 18:48.090
找一找吧

18:48.890 --> 18:53.530
oppresses 啊presses里面啊 我怎么直接把当中写的一遍 再来

18:54.490 --> 18:59.130
好 我们运行这个命令 你看 它是不是达到一个数组 这个数组里面是不是有很多字不串

18:59.450 --> 19:05.690
对不对 那么第一个字不说的第一就是数组的第一项 是不是我们no的命令 它的绝对路径

19:05.930 --> 19:10.650
对吧 它的绝对路径 当然这个东西是通过环境面量找出来的 对吧 找出来的它的绝对路径

19:10.890 --> 19:12.970
第二个呢 是我们的index的绝对路径

19:14.010 --> 19:16.810
因为它我只用了一个相对路径嘛 它会把它转换成绝对路径

19:17.370 --> 19:20.970
这是index的绝对路径 然后后边的abcd是不是一时传惯了

19:21.690 --> 19:26.250
那么这样子的是不是在我们的程序的运行的时候呢 可以得到一些命令行参数

19:27.130 --> 19:31.850
啊 如果说你开发一些比较特殊的系统的话 要根据不同的命令行参数 也要做不同的事情

19:32.250 --> 19:36.890
那么就可以用到这个东西了 对吧 ok 那么这里是关于这一个

19:37.930 --> 19:41.370
啊 这些都介绍一下想想的啊 嗯 还有这个就是platform

19:42.090 --> 19:44.810
这什么意思呢 就是或许当前的操作系统

19:45.370 --> 19:50.330
就是我这个程序呢 这个漏的程序是在哪个操作系统里面运行的啊 process

19:51.130 --> 19:51.770
plantful

19:53.530 --> 19:54.490
啊 咱们在那运行

19:57.480 --> 20:03.160
好 回头 这里显示win32 有时候说我的计算机不是64位的吗 为什么是32呢

20:03.640 --> 20:06.680
啊 他是这样子啊 他是win32的是一个平台版本

20:07.160 --> 20:13.560
表示的是他支持32位或者32位以上的api

20:14.200 --> 20:15.800
操作系统里面提供了很多api

20:16.520 --> 20:20.280
那么这是我们编程的时候呢他的平台版本啊 他是win32

20:20.680 --> 20:26.680
他的一种教法啊 并不是不是说我们电脑是32位的啊 什么意思啊 这是关于他的平台

20:28.520 --> 20:30.200
呃 然后我们先进去看啊

20:30.840 --> 20:36.440
qq这个东西呢 是用来杀死一个进程的 就有点类似于呢 我们在这里呢

20:37.000 --> 20:42.040
任务管理区里边就结束一个进程 对吧 比方说呢 我们这里呢

20:43.320 --> 20:44.200
来玩干啥呢

20:45.080 --> 20:50.040
把这个谷歌进程去掉吧 那么你要杀死进程的时候呢 你要知道啊

20:50.520 --> 20:53.560
呃 进程的id比方说呢 换一个吧

20:54.440 --> 20:55.080
把这个

20:57.080 --> 20:57.880
我们这个东西

20:59.160 --> 21:01.080
我这里呢 之前我做过这个东西

21:04.600 --> 21:05.400
呃 这个

21:06.600 --> 21:08.200
有的时候我上公开直播课是不是

21:08.840 --> 21:11.640
是不是显示这个玩意 对吧 公开直播课就显示这个玩意

21:12.040 --> 21:15.160
那么这个玩意呢 实际上它是没法关闭的啊 它是没法关闭的

21:15.480 --> 21:18.040
点右键也没用啊 这是我们其他一个老师做的

21:18.200 --> 21:22.600
那么如果说我要写一个程序来自动来关闭 一定就关闭他怎么办呢

21:22.840 --> 21:26.440
那么我们就找到啊 任务管理区里边它的进程是多少

21:27.400 --> 21:28.680
我看一下啊 进程的id

21:30.120 --> 21:33.480
呃 找一找啊 这个东西叫做哪一个呢

21:35.840 --> 21:38.720
我都忘了这个进程id叫什么名字了

21:39.920 --> 21:42.160
进程的id叫啥名字了 我的我有点忘了

21:44.080 --> 21:47.600
那算了吧 我懒得去找了 懒得去找了啊

21:48.000 --> 21:51.040
呃 我就 我之前自己写了一个啊

21:54.480 --> 21:55.360
自己写了一个q

21:56.160 --> 22:00.000
ok 我看一下这个p处理文件里边 它进程id

22:00.480 --> 22:03.440
叫java啊 它是用java写的

22:04.320 --> 22:13.000
那么我看一下进程的id是多少 呃 刚才都看到了

22:13.960 --> 22:16.760
凝称 我们就从这个详细信息里边看吧

22:18.440 --> 22:21.960
10428啊 10428

22:22.200 --> 22:25.640
好 来吧 我们这里呢 使用processq

22:26.760 --> 22:30.120
10428啊 这每一个进程都有个id 对吧

22:30.680 --> 22:32.120
好 咱们这里呢 运行

22:33.000 --> 22:34.920
弄的index 你看 是吧 杀掉了

22:35.480 --> 22:37.720
对吧 那么这里呢 这个进程就没了

22:38.120 --> 22:40.360
好 就像这些东西在扭烂器里边是根本不可能做的

22:41.640 --> 22:45.320
好 那么平时呢 我们不太会用去 用这些东西啊 不太会用的

22:45.800 --> 22:49.320
呃 我们只是给它看一下 感受一下 就是我们这里呢 它实际上

22:49.720 --> 22:51.560
嗯 能够做很多比

22:52.200 --> 22:55.720
扭烂器功能强烂很多的东西 因为它是可以直接操作操作系统的

22:56.680 --> 22:59.960
这个 有一个同学说 杀字进程的id是固定的吗 不是的

23:00.280 --> 23:04.680
啊 不是固定的 它每一次启动程序的时候 id还有自动分配 操作系统给它分配

23:05.720 --> 23:10.520
那么我如何能保证 无论它是什么id 我都能杀死这个进程了

23:11.000 --> 23:13.000
然后如果说要做这种事情的话 我们

23:13.560 --> 23:19.240
这一张给大家做个扩展课程吧 后边啊 给大家做个扩展课程是关于它的启动指进程的

23:19.640 --> 23:24.360
啊 一些对指进程的一些操作 那么它需要用到一个就是内置的cool

23:24.840 --> 23:30.280
啊 叫做child process 那么这里呢 它这个就是process这个地方呢 它做不到了啊

23:31.000 --> 23:36.360
好 我们这里给大家了解一下就行了 好 下面那个就是m m这个东西我们平时用的

23:37.080 --> 23:39.400
它是能什么呢 它是来获取环境变量的

23:39.960 --> 23:43.640
哎 我们知道啊 咱们系统里边不是有环境变量吗 我电脑右键属箱

23:44.360 --> 23:47.960
属箱里边一个高级系统设置啊是在这

23:48.920 --> 23:52.280
啊 那么这边是不是有很多环境变量 对不对 这些都是环境变量

23:52.680 --> 23:57.640
那么它就来获取环境变量 那怎么来获取呢 非常简单 比方说啊 咱们呢 输出

23:58.200 --> 23:58.840
process

24:00.120 --> 24:06.440
它就是一个对象啊 它本身就是个对象 这个对象里边环境变量的字名字就是属性 环境变量的字那就是属性值

24:06.680 --> 24:12.520
你看一下吧 多的很对吧 环境变量的名字 环境变量的字 环境变量的名字 环境变量的字

24:12.760 --> 24:16.520
你看一下吧 我们随便找一个呗 啊 比方说这个android home啊 android home

24:17.000 --> 24:23.480
那么我们这里 比方说 看一下里面那边有啥啊 你们那边有的不一定我这边有 我这边有的里面那边不一定有

24:23.960 --> 24:24.520
android home

24:26.680 --> 24:27.400
来吧 我们来

24:28.040 --> 24:32.520
你看 是不是能够获取操作系统的环境变量 像这些事情浏览器里边是不没法做的

24:33.160 --> 24:40.360
那这个东西有什么用了 你如果说学了我的保管理器应该知道 对吧 我们在环境变量比方说 我们经常会加一个什么load

24:41.000 --> 24:47.400
m 对吧 来表示 当前的是开发环境还是生产环境 对不对 我们可以用这个m来做

24:47.560 --> 24:54.520
它是可以获取环境变量的 ok 那就没啥了 没啥了 就process就讲完了

24:55.160 --> 24:59.880
其实它全局你全局对象里边的呢 就打开我们平时要用的 也就这么一些

25:00.840 --> 25:07.800
process里边的很多东西我们也不太会用 可能会用这个 这个可能会用的 然后这个可能会用的 其他都没啥用

25:09.000 --> 25:13.640
ok 那么都是关于load里边的全局对象 它跟浏览器就有很大的区别了

