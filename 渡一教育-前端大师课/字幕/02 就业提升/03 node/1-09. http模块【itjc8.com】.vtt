WEBVTT

00:00.880 --> 00:03.520
好 咱们上年课学习了这个net模块

00:03.520 --> 00:05.360
我们这里可以看那个attp模块

00:05.360 --> 00:07.360
因为我们知道attp呢

00:07.360 --> 00:09.760
这个东西它是建立在tcp ip之上的

00:09.760 --> 00:12.160
对吧 如果说你希望更底层的东西的话

00:12.160 --> 00:13.880
你可以去直接使用net模块

00:13.880 --> 00:15.320
不过呢 绝大部分时候呢

00:15.320 --> 00:16.960
我们都不太会直接使用它

00:16.960 --> 00:19.080
因为直接使用它的时候很麻烦

00:19.080 --> 00:22.360
我首先要去控制这个socket车的断开连接

00:22.360 --> 00:23.680
太麻烦了 对不对

00:23.680 --> 00:24.720
还要去控制什么呢

00:24.720 --> 00:26.600
还要去控制消息体的格式

00:26.600 --> 00:28.520
服务器给我响应结果

00:28.520 --> 00:30.160
或者是我想一个客户端

00:30.320 --> 00:32.560
都要去或者是客户端请求过来

00:32.560 --> 00:34.800
我都要去分析它的那个制服串里边

00:34.800 --> 00:36.040
响应头是哪一部分 对吧

00:36.040 --> 00:38.480
我们还写了花了不少时间去写这个东西

00:38.480 --> 00:39.760
挺麻烦的

00:39.760 --> 00:41.800
因此呢 我们不太会直接使用它

00:41.800 --> 00:42.640
更加常见的呢

00:42.640 --> 00:45.200
我们是使用attp模块

00:45.200 --> 00:46.640
实际上更加常见的是

00:46.640 --> 00:49.080
还要把这个模块都还要进行封装一次

00:49.080 --> 00:51.160
不过这个模块呢 也还是麻烦

00:51.160 --> 00:54.720
但是它比相对来说 比它更加简单一些了

00:54.720 --> 00:56.200
但是这个东西是重点

00:56.200 --> 00:56.600
为什么呢

00:56.600 --> 00:57.760
因为我们后边写写到

00:57.760 --> 00:59.600
学习一些第三方的库

00:59.640 --> 01:01.880
它能够帮助你来建立一个服务器

01:01.880 --> 01:03.000
这些东西

01:03.000 --> 01:05.320
实际上是在搭建在它之上的

01:05.320 --> 01:06.600
因此呢 它必须要理解

01:06.600 --> 01:10.160
你理解了它过后才能理解后边的很多东西

01:10.160 --> 01:10.880
那么这个模块呢

01:10.880 --> 01:12.280
实际上是建立在那种模块之上的

01:12.280 --> 01:13.880
它就帮你做了最重要的

01:13.880 --> 01:15.560
是它帮你做了这么两件事

01:15.560 --> 01:18.280
一个是你不用去手动管理烧黑车了

01:18.280 --> 01:20.000
烧黑车根本就不存在了

01:20.000 --> 01:20.920
不是说不存在

01:20.920 --> 01:21.840
它还在的内部

01:21.840 --> 01:22.760
内部就完成了

01:22.760 --> 01:24.280
你不用自行去管理了

01:24.280 --> 01:25.080
什么时候打开

01:25.080 --> 01:27.800
什么时候断开连接

01:27.800 --> 01:29.240
它会自动帮你管理

01:29.280 --> 01:30.320
你不用去管

01:30.320 --> 01:30.800
第二个呢

01:30.800 --> 01:33.080
就是你不用去组装消息格式了

01:33.080 --> 01:35.080
你没有去想应头是哪一部分

01:35.080 --> 01:36.240
想应行是哪一部分

01:36.240 --> 01:37.240
想应体是哪一部分

01:37.240 --> 01:38.680
你不用自己去组装了

01:38.680 --> 01:40.200
所以它比较方便

01:40.200 --> 01:41.760
比较方便

01:41.760 --> 01:43.120
那么它里面也涉及到两个

01:43.120 --> 01:45.480
一个是我们努德介石作为客户端

01:45.480 --> 01:47.640
去发送一个请求到服务器

01:47.640 --> 01:48.240
另一个呢

01:48.240 --> 01:50.400
是我们自己去搭一个服务器

01:50.400 --> 01:51.520
这就介绍两个

01:51.520 --> 01:52.640
好 我们首先看请求

01:52.640 --> 01:54.040
这个请求还是跟之前一样

01:54.040 --> 01:56.200
跟那个张立克的那次模块一样

01:56.200 --> 01:58.440
他不是一个阿迪克斯

01:58.520 --> 01:59.880
你不要认为他是个阿迪克斯

01:59.880 --> 02:01.800
阿迪克斯是浏览器团的

02:01.800 --> 02:02.640
脱离了浏览器

02:02.640 --> 02:04.520
阿迪克斯不存在了

02:04.520 --> 02:06.360
它只是一个普通的ATB请求

02:06.360 --> 02:09.000
所以说它会不会存在跨域

02:09.000 --> 02:10.080
会不会

02:10.080 --> 02:11.400
不会的

02:11.400 --> 02:13.480
跨域只是浏览器跟我们搞出来的

02:13.480 --> 02:16.000
脱离了浏览器就不存在的这个概念了

02:16.000 --> 02:17.240
就是一个普通的请求

02:17.240 --> 02:18.880
然后服务器给我们相应

02:18.880 --> 02:20.560
浏览器只是

02:20.560 --> 02:22.680
浏览器还是能够跨域请求的

02:22.680 --> 02:24.760
只是浏览器不把请求结果给力

02:24.760 --> 02:25.960
你拿不到

02:25.960 --> 02:27.480
因此是这样子的

02:27.560 --> 02:28.760
好咱们来看一下它的文档

02:28.760 --> 02:30.040
我们就从文档里面讲

02:30.040 --> 02:31.640
因为我们后边要陆续

02:31.640 --> 02:33.040
陆续续看很多文档

02:33.040 --> 02:34.360
大家要学习怎么去看文档

02:35.400 --> 02:36.200
首先请求

02:36.200 --> 02:38.080
请求我们这里先导入这个模块再说

02:38.080 --> 02:39.120
ATDP

02:39.120 --> 02:40.920
require

02:40.920 --> 02:42.360
那么它这里面提供了一个方法

02:42.360 --> 02:44.800
叫ATDP request这个方法

02:44.800 --> 02:45.920
这个方法干嘛的呢

02:45.920 --> 02:48.680
这个方法就是发送一个请求

02:48.680 --> 02:50.960
内意是原来可是它肯定不是原来可是

02:50.960 --> 02:53.520
是一个更加纯粹的ATDP请求

02:53.520 --> 02:54.480
第一个参数传什么呢

02:54.480 --> 02:56.040
第一个参数传Url地址

02:56.040 --> 02:57.160
你看这个没有个中扩号

02:57.160 --> 02:57.480
对吧

02:57.480 --> 02:58.600
就是必填的

03:00.520 --> 03:01.960
什么地址呢

03:01.960 --> 03:02.840
随便吧

03:02.840 --> 03:04.440
就这个地址吧

03:04.440 --> 03:06.200
就这个地址

03:06.200 --> 03:07.120
比方说吧

03:07.120 --> 03:10.320
比方说我们请求度1

03:10.320 --> 03:11.240
就还是这个地址

03:11.240 --> 03:13.000
老地址

03:13.000 --> 03:13.760
请求这个地址

03:15.520 --> 03:15.960
注意啊

03:15.960 --> 03:17.760
你这里不能用ATPS

03:17.760 --> 03:18.400
ATPS

03:18.400 --> 03:20.000
我们单独拿一些可来讲

03:20.000 --> 03:21.920
这里只能用ATP

03:21.920 --> 03:23.120
那么我们这里发送一个请求

03:24.320 --> 03:25.440
接下来呢

03:25.440 --> 03:27.000
接下来是Options

03:27.000 --> 03:27.960
是一个可选的

03:27.960 --> 03:28.960
这是个对象

03:28.960 --> 03:30.200
可以进行一些配置

03:30.200 --> 03:31.760
比方说对象

03:31.760 --> 03:32.560
对象里面配置啥呢

03:32.560 --> 03:33.280
叫Message

03:33.280 --> 03:33.520
对吧

03:33.520 --> 03:34.520
请求方法

03:34.520 --> 03:35.480
默认就是get方法

03:35.480 --> 03:35.920
对吧

03:35.920 --> 03:37.240
包括什么Headers

03:37.240 --> 03:37.920
这些配置呢

03:37.920 --> 03:39.400
配置的方式跟那个

03:39.400 --> 03:40.280
什么你们以前学过

03:40.280 --> 03:41.800
阿迦克实际上就差不多

03:41.800 --> 03:42.840
非常简单的

03:42.840 --> 03:43.920
里面配置的话

03:43.920 --> 03:45.520
字型区配置就完成了

03:45.520 --> 03:46.280
没了意思吧

03:46.280 --> 03:47.560
它这里边给你列举的

03:47.560 --> 03:49.520
这里边有哪些东西可以配置

03:49.520 --> 03:50.440
哪些东西可以配置

03:50.440 --> 03:52.560
可以字型区参考

03:52.560 --> 03:53.080
好

03:53.080 --> 03:54.240
第三个参数呢

03:54.280 --> 03:56.720
就是拿去服务器的响应结果

03:56.720 --> 03:58.120
那是不是跟那个阿迦克是差不多

03:58.120 --> 03:58.800
在写法差不多

03:58.800 --> 04:00.160
它不是阿迦克实

04:00.160 --> 04:01.640
说拿去服务器的响应结果

04:01.640 --> 04:02.240
对吧

04:02.240 --> 04:04.280
这个响应结果是个对象

04:04.280 --> 04:04.520
来吧

04:04.520 --> 04:05.760
比方说我们在响应结果

04:05.760 --> 04:07.160
我们在哪里看呢

04:07.160 --> 04:07.760
响应结果

04:07.760 --> 04:08.400
response

04:08.400 --> 04:09.840
我们往前面找

04:09.840 --> 04:10.280
这里边呢

04:10.280 --> 04:12.920
它这个模块里面包含了一些纸类

04:12.920 --> 04:13.560
我们找到

04:13.560 --> 04:14.080
这个

04:14.080 --> 04:15.320
它的响应结果是这个对象

04:15.320 --> 04:16.960
server response

04:16.960 --> 04:17.920
是这么一个对象

04:17.920 --> 04:18.080
好

04:18.080 --> 04:19.520
咱们来看一下

04:19.520 --> 04:20.480
输出这个对象里边

04:20.480 --> 04:21.640
它对象里边肯定有些方法

04:21.640 --> 04:23.240
有些属性对吧

04:23.240 --> 04:24.480
那么这个方法和属性呢

04:24.480 --> 04:25.440
我们来看一下

04:25.440 --> 04:26.920
它这里边

04:26.920 --> 04:27.560
在这边

04:27.560 --> 04:28.440
我们看这个目录

04:28.440 --> 04:28.960
目录

04:28.960 --> 04:30.280
看起来方便一点

04:30.280 --> 04:34.040
这里边有一个叫Status Code

04:34.040 --> 04:34.920
表示状态吗

04:34.920 --> 04:36.160
对不对

04:36.160 --> 04:36.960
表示状态吗

04:36.960 --> 04:38.680
表示服务器给我们响应的状态吗

04:38.680 --> 04:39.800
是什么

04:39.800 --> 04:41.400
我们把一个状态码输出

04:41.400 --> 04:43.880
这是服务器响应的状态码

04:43.880 --> 04:46.960
服务器响应的状态码

04:46.960 --> 04:47.840
对不对

04:47.840 --> 04:48.160
好

04:48.160 --> 04:49.160
那咱们来看一下

04:49.160 --> 04:50.640
我们请求这个地址服务器响应的

04:50.640 --> 04:51.720
是一个什么样的状态码呢

04:54.240 --> 04:54.960
嗯

04:54.960 --> 04:55.360
音响

04:57.240 --> 04:59.240
你会发现根本拿不到状态码

04:59.240 --> 05:00.440
这是为什么呢

05:00.440 --> 05:01.200
为什么呢

05:01.200 --> 05:05.240
是因为我们请求都还没有发完整的发送出去

05:05.240 --> 05:06.880
不是请求已经配置好了吗

05:06.880 --> 05:07.120
对吧

05:07.120 --> 05:07.960
Header也配置的

05:07.960 --> 05:09.240
我这里没配置Header

05:09.240 --> 05:10.920
Header还会自带一些Header

05:10.920 --> 05:12.200
配置了过后呢

05:12.200 --> 05:13.560
还有这个Messer也配置的

05:13.560 --> 05:13.840
对吧

05:13.840 --> 05:14.960
请求的地址也有了

05:14.960 --> 05:15.760
它为什么

05:15.760 --> 05:17.520
它不请求呢

05:17.520 --> 05:19.600
是因为在这个Request

05:19.600 --> 05:21.240
它要比我们之前学到的一些

05:21.240 --> 05:24.000
而且可实要更加偏底层一点

05:24.000 --> 05:24.760
因此呢

05:24.760 --> 05:25.920
请求的时候

05:25.920 --> 05:27.240
它没有消息体

05:28.400 --> 05:29.720
为什么来说

05:29.720 --> 05:31.400
Gate不就是消息体吗

05:31.400 --> 05:33.120
Gate不需要消息体

05:33.120 --> 05:35.000
是Gate是不需要消息体

05:35.000 --> 05:36.120
但是你还记得上节课吗

05:37.280 --> 05:40.200
如果说你消息体没有的话

05:40.200 --> 05:41.920
那么它就没有换两行

05:41.920 --> 05:43.320
你可以这样理解

05:43.320 --> 05:44.000
对吧

05:44.000 --> 05:45.280
它没有换两行

05:45.280 --> 05:45.960
没有换两行

05:45.960 --> 05:46.720
还有读不到

05:46.720 --> 05:48.280
读不到后边的消息体的内容

05:48.280 --> 05:50.040
它就认为消息体后面还有

05:50.040 --> 05:51.480
因为它得不到那个

05:51.480 --> 05:52.920
Gun R2-N两次的

05:52.920 --> 05:54.600
连续两次Gun R2-N它得不到

05:54.600 --> 05:55.040
对吧

05:55.040 --> 05:55.480
得不到的话

05:55.480 --> 05:56.920
它就认为后边还有

05:56.920 --> 05:59.040
那么它就无法做出响应

05:59.040 --> 05:59.200
对吧

05:59.200 --> 06:01.560
所以说我们一直得不到响应结果

06:01.560 --> 06:02.000
因此呢

06:02.000 --> 06:03.960
我们要手动的

06:03.960 --> 06:06.120
给它写一个响应体

06:06.120 --> 06:07.280
消息体进去

06:07.280 --> 06:07.800
但是呢

06:07.800 --> 06:08.640
它不是这样子

06:08.640 --> 06:10.880
不像以前的阿迦克斯

06:10.880 --> 06:11.760
这里可以配置body

06:11.760 --> 06:11.960
对吧

06:11.960 --> 06:13.320
它不存在这个配置

06:13.320 --> 06:15.120
那它怎么能去写这个消息体呢

06:15.120 --> 06:16.120
它是这样子

06:16.120 --> 06:17.960
这个函数它会返回一个对象

06:17.960 --> 06:18.800
返回一个什么对象呢

06:18.800 --> 06:19.880
Request对象

06:19.920 --> 06:20.440
这个对象呢

06:20.440 --> 06:21.480
更更多的信息呢

06:21.480 --> 06:22.480
你可以参与这个地方

06:23.680 --> 06:24.480
一个参与这个

06:24.480 --> 06:26.480
这个ClientRequest

06:26.480 --> 06:28.400
它会返回这么一个Request对象

06:28.400 --> 06:30.000
那么这个Request对象

06:30.000 --> 06:32.200
实际上就是一个可写流

06:32.200 --> 06:34.160
你可以往这里边写东西

06:34.160 --> 06:34.800
写入一些东西

06:34.800 --> 06:36.360
它就是个可写流

06:36.360 --> 06:39.520
实际上就是往OK车里边写东西说白了

06:39.520 --> 06:40.800
你往里边写东西

06:40.800 --> 06:41.800
写完了过后

06:41.800 --> 06:43.920
调用一下RequestEnd

06:43.920 --> 06:44.120
对吧

06:44.120 --> 06:45.360
表示我写完了

06:45.360 --> 06:46.520
写完了就行了

06:46.520 --> 06:48.320
那么Gate请求是没有东西可以写的

06:48.320 --> 06:48.520
对吧

06:48.520 --> 06:49.520
那么我们直接调用End

06:49.520 --> 06:50.680
表示我写完了

06:50.680 --> 06:52.000
那么这样子写完了之后

06:52.000 --> 06:54.880
它就会把你写入内容组装成那个消息体

06:54.880 --> 06:56.200
传输过去

06:56.200 --> 06:57.320
没意义的意思吧

06:57.320 --> 06:57.920
所以说了

06:57.920 --> 06:59.680
这样子你把写了个End过后

06:59.680 --> 07:02.720
我才算是真正的发送请求

07:04.000 --> 07:05.160
真正的发送请求

07:05.160 --> 07:06.440
其实也不是说

07:06.440 --> 07:07.760
其实这里已经发送请求了

07:07.760 --> 07:08.360
只是服务型了

07:08.360 --> 07:10.040
它一直等待你的消息体

07:10.040 --> 07:10.200
对吧

07:10.200 --> 07:11.520
你消息体没有两个换行

07:11.520 --> 07:12.600
它等待不了

07:12.600 --> 07:13.280
那么这个呢

07:13.280 --> 07:18.920
就是发送应该是消息体

07:19.040 --> 07:20.120
发送消息体

07:20.120 --> 07:20.880
是这么个意思

07:22.480 --> 07:24.280
表示消息体结束

07:24.280 --> 07:27.520
表示消息体结束

07:28.520 --> 07:29.680
对不对

07:29.680 --> 07:31.600
那咱们这里写好了之后

07:31.600 --> 07:32.400
我们再来看一下

07:32.400 --> 07:33.680
运行

07:33.680 --> 07:34.920
你看服务型的响应状态

07:34.920 --> 07:35.440
是两半

07:35.440 --> 07:36.720
然后这里就请求结束了

07:36.720 --> 07:37.640
整个程序结束了

07:38.840 --> 07:39.920
当然Response里面

07:39.920 --> 07:41.360
除了这个响应码之外

07:41.360 --> 07:42.200
还有什么别的呢

07:42.200 --> 07:43.200
我们来看一下

07:43.200 --> 07:46.640
如果说我要得到服务型的响应头怎么办了

07:46.760 --> 07:49.040
服务器响应头

07:49.040 --> 07:50.000
比方说哪个头呢

07:50.000 --> 07:51.760
content type

07:51.760 --> 07:52.240
怎么办

07:52.240 --> 07:53.520
看稳当呗

07:53.520 --> 07:54.800
以后说这些东西我全部背的

07:54.800 --> 07:55.600
我也背不住

07:55.600 --> 07:55.760
对吧

07:55.760 --> 07:57.360
这一个get header

07:57.360 --> 07:59.520
是不是得到某一个响应头

07:59.520 --> 08:00.720
对不对

08:00.720 --> 08:03.400
就是Response get header

08:05.160 --> 08:06.320
来得到一个响应头

08:06.320 --> 08:07.360
响应头什么呢

08:07.360 --> 08:09.080
content type

08:09.080 --> 08:09.720
对吧

08:09.720 --> 08:12.070
保存

08:12.070 --> 08:13.230
你看

08:13.230 --> 08:14.230
它这里

08:14.230 --> 08:16.190
get header is not function

08:16.190 --> 08:17.030
对吧

08:17.150 --> 08:18.870
我这里说requires get header

08:18.870 --> 08:20.230
这是requires的

08:20.230 --> 08:21.990
Response我们来找一找

08:21.990 --> 08:23.590
肯定有

08:23.590 --> 08:25.710
Response都有

08:25.710 --> 08:28.470
Response get header

08:28.470 --> 08:29.270
get header

08:29.270 --> 08:31.390
我这写错了吗

08:31.390 --> 08:32.310
没有写错

08:32.310 --> 08:33.390
get header

08:33.390 --> 08:35.960
内

08:35.960 --> 08:38.320
看一下

08:38.320 --> 08:40.120
Response get header

08:40.120 --> 08:43.770
content type

08:43.770 --> 08:44.930
Response

08:44.930 --> 08:46.290
没问题

08:46.290 --> 08:47.250
我看一下

08:47.250 --> 08:50.250
这个东西是不是Response没想到

08:50.250 --> 08:52.250
我再打开看一下

08:52.250 --> 08:53.770
我看这个稳当里面说的

08:53.770 --> 08:56.970
callback到底是个啥

08:56.970 --> 09:01.250
callback

09:01.250 --> 09:04.490
找一找

09:04.490 --> 09:05.730
它下面有例子

09:05.730 --> 09:07.050
它下面有例子

09:07.050 --> 09:08.370
有这个状态

09:08.370 --> 09:10.010
它是在header时里边

09:10.010 --> 09:11.130
它是在header时里边

09:11.130 --> 09:13.210
应该还不是那个对象

09:13.210 --> 09:14.370
它应该还不是那个对象

09:14.370 --> 09:17.130
刚才我们看到的是server response

09:17.130 --> 09:20.130
server response 我们这就和后边要讲的

09:20.130 --> 09:21.650
应该是这个

09:21.770 --> 09:23.210
应该是这个对象

09:23.210 --> 09:25.410
叫incoming message

09:25.410 --> 09:29.010
就是来自服务器的消息

09:29.010 --> 09:29.970
应该是这个

09:29.970 --> 09:31.090
我们看一下

09:31.090 --> 09:32.610
that is called headers

09:32.610 --> 09:33.730
哦 是这个

09:33.730 --> 09:36.290
那么我们这里是通过header时

09:36.290 --> 09:39.130
header时是一个对象

09:39.130 --> 09:41.090
通过这个东西来取

09:41.090 --> 09:41.930
content type

09:41.930 --> 09:43.530
它是个对象

09:43.530 --> 09:44.330
保存

09:44.330 --> 09:45.930
咱们来看一下

09:45.930 --> 09:47.810
content type是不是拿出来了

09:47.810 --> 09:49.930
如果说我要把响应头

09:49.930 --> 09:50.770
全部拿出来的话

09:50.810 --> 09:52.970
我就输出这个header时

09:52.970 --> 09:54.450
输出这个header时对象

09:54.450 --> 09:55.530
它对象不一样

09:55.530 --> 09:56.130
不是

09:56.130 --> 09:58.170
刚才我们就理解成server response

09:58.170 --> 09:58.850
对吧

09:58.850 --> 10:00.770
server response是我们自己打了服务器

10:00.770 --> 10:02.210
要响应个客户端的

10:02.210 --> 10:03.690
这是我们远程的服务器

10:03.690 --> 10:05.450
就我作为客户端来请求

10:05.450 --> 10:07.850
远程的服务器给我们的响应头

10:07.850 --> 10:08.930
它是放在一个对象里面了

10:08.930 --> 10:09.530
你看

10:09.530 --> 10:11.170
是不是这些对象放进来了

10:11.170 --> 10:12.090
对吧

10:12.090 --> 10:12.330
好了

10:12.330 --> 10:14.290
那么服务器的响应体呢

10:14.290 --> 10:15.650
他说log

10:15.650 --> 10:16.210
你看一下

10:16.210 --> 10:17.290
能不能得到服务器的响应体

10:17.290 --> 10:18.450
我们看一下文档

10:18.450 --> 10:19.210
你会发现了

10:19.250 --> 10:21.490
他这里边没有任何的响应体

10:21.490 --> 10:22.130
为什么呢

10:22.130 --> 10:23.690
他为什么没有给你服务器的响应体

10:23.690 --> 10:25.730
像我们品是用了什么respa body

10:25.730 --> 10:26.290
对吧

10:26.290 --> 10:27.570
这些东西都没有

10:27.570 --> 10:28.530
为什么没有呢

10:28.530 --> 10:31.690
因为他认为服务器的响应结果

10:31.690 --> 10:33.450
可多可少

10:33.450 --> 10:35.130
刘可磊已经响应一个文件

10:35.130 --> 10:36.250
几十招的文件

10:36.250 --> 10:37.450
他不可能把几十招的文件

10:37.450 --> 10:38.570
全部给你放到内存

10:38.570 --> 10:39.610
放到属性里面

10:39.610 --> 10:40.130
对吧

10:40.130 --> 10:42.010
属性的东西在内存里面

10:42.010 --> 10:42.850
那怎么办呢

10:42.850 --> 10:45.090
他是把它当成读取流

10:45.090 --> 10:47.650
就是你要读他的响应体的话

10:47.650 --> 10:48.490
你应该怎么读

10:48.530 --> 10:50.090
应该用流的方式来读

10:50.090 --> 10:51.050
一块一块的读

10:51.050 --> 10:52.610
服务器一点一点的给你传输

10:52.610 --> 10:53.490
你一块一块的读

10:53.490 --> 10:53.970
对吧

10:53.970 --> 10:55.850
只不过普通的一面的内容不多

10:55.850 --> 10:58.970
他可能两次三次就给你传输完了

10:58.970 --> 11:00.290
总之你一次读一块

11:00.290 --> 11:01.130
一次读一块

11:01.130 --> 11:02.170
那怎么来读呢

11:02.170 --> 11:03.330
就是我们之前学的

11:03.330 --> 11:04.530
所以说流这个姿势

11:04.530 --> 11:07.210
我们一般的不太自己会去写一个流

11:07.210 --> 11:09.050
但是我们一般会使用到流

11:09.050 --> 11:09.890
data对吧

11:09.890 --> 11:11.090
一块一块读

11:11.090 --> 11:11.610
chunk

11:13.530 --> 11:13.970
来吧

11:13.970 --> 11:14.570
输出

11:14.570 --> 11:15.090
输出什么呢

11:15.090 --> 11:16.050
chunk

11:16.050 --> 11:18.210
我们这里只用UTF8吧

11:18.250 --> 11:19.570
UTF-8

11:19.570 --> 11:20.090
进一边吧

11:21.410 --> 11:21.690
好

11:21.690 --> 11:22.130
保存

11:23.850 --> 11:24.170
clear

11:25.530 --> 11:25.890
印象

11:26.770 --> 11:27.130
那里

11:28.130 --> 11:28.570
放什么呢

11:30.890 --> 11:32.730
nation arguments must be

11:32.730 --> 11:35.290
他还不允许给你加这个

11:35.290 --> 11:36.370
他给你封装过的

11:36.370 --> 11:37.530
他不允许有这个参数了

11:38.770 --> 11:39.650
再来

11:39.650 --> 11:40.330
你看

11:40.330 --> 11:41.290
得到buffer对吧

11:41.290 --> 11:42.370
那么buffer你看一下

11:42.370 --> 11:44.490
他是分了几次给你传过来的

11:44.490 --> 11:45.010
对不对

11:45.010 --> 11:47.330
他分了好几次给你传过来的

11:47.370 --> 11:48.370
分了好几次

11:48.370 --> 11:50.210
所以说你要你要处理的话

11:50.210 --> 11:51.330
你可以把它拼接一下

11:51.330 --> 11:52.130
你看他

11:52.130 --> 11:53.690
我们可以用一个制服串

11:53.690 --> 11:54.970
results来拼接

11:54.970 --> 11:58.610
每一次如果说你打算把他全部放到内存里边的话

11:58.610 --> 11:59.570
那么你可以拼接

11:59.570 --> 12:00.770
拼接chunk

12:00.770 --> 12:01.290
toolstream

12:01.290 --> 12:03.410
当然你也可以用别的

12:03.410 --> 12:04.410
用别的方式

12:05.650 --> 12:07.330
比如说每次拿到一块

12:07.330 --> 12:08.130
你去干什么

12:08.130 --> 12:08.970
去存出到文件

12:08.970 --> 12:09.530
你不要干嘛

12:09.530 --> 12:10.490
随便

12:10.490 --> 12:12.930
当读完之后

12:12.930 --> 12:14.010
end读完之后

12:14.050 --> 12:17.530
他会自动给你关闭sockage

12:17.530 --> 12:18.490
那么读完之后

12:18.490 --> 12:19.090
end的时候

12:19.090 --> 12:20.770
我们把results输出

12:20.770 --> 12:22.050
我们这里每读一块

12:22.050 --> 12:23.330
就加到这个results里边

12:23.330 --> 12:25.090
然后读完之后输出

12:25.090 --> 12:25.810
咱们看一下

12:27.890 --> 12:28.290
你看

12:28.290 --> 12:29.770
是不是就全部拿到完了

12:29.770 --> 12:31.250
比上一节靠我们自己去写

12:31.250 --> 12:32.970
是不是要简单太多太多了

12:32.970 --> 12:33.970
对吧

12:33.970 --> 12:36.730
虽然说比起里面以前的阿加克斯

12:36.730 --> 12:38.130
还是要麻烦不少

12:38.130 --> 12:41.010
但是他必须要考虑到更多的问题

12:41.010 --> 12:43.330
因为他不知道你这个返回的结果

12:43.370 --> 12:44.010
有多少

12:44.010 --> 12:44.890
他只能当成牛

12:44.890 --> 12:45.610
一块一块读

12:45.610 --> 12:46.690
一块一块读

12:46.690 --> 12:47.090
看没有

12:47.090 --> 12:47.850
那么这里一块

12:47.850 --> 12:49.050
就把响应的

12:49.050 --> 12:49.810
响应头

12:49.810 --> 12:50.410
响应状态

12:50.410 --> 12:52.130
那么这些东西都会拿到

12:52.130 --> 12:52.730
那还有什么呢

12:52.730 --> 12:54.250
响应的东西不就是这些吗

12:54.250 --> 12:55.010
还有什么呢

12:55.010 --> 12:55.570
那就没啥了

12:55.570 --> 12:56.050
对吧

12:56.050 --> 12:56.890
就没啥了

12:56.890 --> 12:57.130
OK

12:57.130 --> 12:59.330
那么这里一部分的就是

12:59.330 --> 13:00.890
那么如果说我们去请求一个

13:00.890 --> 13:02.530
比方说一个API地址

13:02.530 --> 13:03.930
比方说

13:03.930 --> 13:08.210
咱们之前请求的是哪个API地址呢

13:08.210 --> 13:09.610
其实是哪个API地址

13:09.610 --> 13:10.250
我有点忘了

13:13.610 --> 13:14.610
5

13:14.610 --> 13:15.530
这个吗

13:15.530 --> 13:16.090
对

13:16.090 --> 13:17.850
比方说我们请求一个API地址

13:17.850 --> 13:20.010
那请求API地址的话

13:20.010 --> 13:21.610
给的请求

13:21.610 --> 13:22.850
请求一个API地址

13:22.850 --> 13:24.170
API地址的话一样的

13:24.170 --> 13:24.690
一样的

13:24.690 --> 13:26.490
那么我们来输出一下

13:26.490 --> 13:27.370
其他都不变

13:27.370 --> 13:28.330
就把地址变一下

13:28.330 --> 13:29.570
你看是不是一样的

13:29.570 --> 13:31.130
那这个有什么这个是一个字乌串

13:31.130 --> 13:31.970
怎么转成接成的

13:31.970 --> 13:32.810
那还不简单吗

13:32.810 --> 13:33.490
接成

13:33.490 --> 13:34.210
Pose

13:34.210 --> 13:34.890
对吧

13:34.890 --> 13:35.410
转问人

13:35.410 --> 13:36.010
把它转问人

13:36.010 --> 13:38.050
把它转到对象就完事了

13:38.050 --> 13:38.810
对吧

13:38.810 --> 13:40.010
是不是打到了跟你以前问的

13:40.010 --> 13:41.290
而且是差不多

13:41.290 --> 13:42.530
类似的效果

13:42.530 --> 13:43.170
对不对

13:43.330 --> 13:45.890
这里是关于这个请求

13:45.890 --> 13:47.770
如果说我们把诺德介绍作为客户端

13:47.770 --> 13:48.850
怎么去请求

13:48.850 --> 13:50.850
如何来收到服务器的响应结果

13:51.810 --> 13:51.970
好

13:51.970 --> 13:52.690
另外呢

13:52.690 --> 13:54.610
如果说你要发出一个Pose请求的话

13:54.610 --> 13:55.130
怎么办呢

13:55.130 --> 13:57.330
那就往消息题里面写东西呗

13:57.330 --> 13:58.170
这就是Rite嘛

13:58.170 --> 13:58.770
对吧

13:58.770 --> 13:59.210
Rite

14:00.690 --> 14:03.650
我这个我这个地方Pose请求是没法的

14:03.650 --> 14:04.530
Rite

14:04.530 --> 14:06.210
去写一个什么

14:06.210 --> 14:07.490
写个想写啥写啥

14:07.490 --> 14:08.690
随便你写啥

14:08.690 --> 14:12.930
比方说你写一个A等于一些V等于2

14:12.930 --> 14:14.050
你随便写吧

14:14.050 --> 14:14.370
随便写

14:14.370 --> 14:15.050
但是呢

14:15.050 --> 14:15.770
好

14:15.770 --> 14:17.530
这个地方应该是一个404

14:17.530 --> 14:18.450
应该是一个404

14:19.730 --> 14:20.210
你看

14:20.210 --> 14:20.490
哎

14:20.490 --> 14:21.250
反应到200

14:23.330 --> 14:24.410
得到什么了

14:24.410 --> 14:26.370
我给我得到一个啥啊

14:26.370 --> 14:26.890
Pose

14:26.890 --> 14:28.410
他要添加一个

14:28.410 --> 14:29.810
添加一部电影

14:29.810 --> 14:30.330
我这边

14:30.330 --> 14:32.170
我那个服务器就是个测试服务器

14:32.170 --> 14:32.970
没有做验证

14:32.970 --> 14:34.610
所以说你随便写的一些数据呢

14:34.610 --> 14:35.410
他都认

14:35.410 --> 14:36.330
他都认

14:36.330 --> 14:36.690
当然了

14:36.690 --> 14:37.610
这是不好的啊

14:37.610 --> 14:38.610
这是不好的

14:38.610 --> 14:38.890
OK

14:38.890 --> 14:39.370
那么现在呢

14:39.370 --> 14:40.450
我们就是

14:40.450 --> 14:41.810
这是可以发送一个请求

14:41.810 --> 14:42.130
对吧

14:42.130 --> 14:43.130
我们就讲到这了

14:43.130 --> 14:43.970
这个东西很简单

14:45.210 --> 14:45.370
好

14:45.370 --> 14:46.290
我们把他复制一下

14:46.290 --> 14:46.370
啊

14:46.370 --> 14:46.890
这可能

14:46.890 --> 14:47.570
按着

14:47.570 --> 14:48.050
你会发现

14:48.050 --> 14:49.130
比上一颗我们的内置

14:49.130 --> 14:51.090
就模块的简单太多了

14:51.090 --> 14:51.250
好

14:51.250 --> 14:51.850
另外一个呢

14:51.850 --> 14:52.890
是更重要的是

14:52.890 --> 14:55.010
我们往往不是在这边发送请求

14:55.010 --> 14:55.890
当然我们也都说

14:55.890 --> 14:57.610
也会在这里发送请求啊

14:57.610 --> 14:58.410
更多的时候呢

14:58.410 --> 15:00.090
是我们要搭建一个服务器

15:00.090 --> 15:01.410
我们自己的服务器

15:01.410 --> 15:02.290
我们学动的街市

15:02.290 --> 15:03.730
不就是在搭建服务器的吗

15:03.730 --> 15:04.530
对吧

15:04.530 --> 15:05.810
那么我们怎么来搭建服务器呢

15:05.810 --> 15:06.770
就通过这个函数

15:06.770 --> 15:07.970
可以server

15:07.970 --> 15:08.130
好

15:08.130 --> 15:08.650
咱们来看一下

15:12.850 --> 15:13.490
嗯

15:13.490 --> 15:14.650
我们自己搭一个服务器

15:14.650 --> 15:16.450
让别人来请求我

15:16.450 --> 15:16.610
好

15:16.610 --> 15:17.290
那么这里呢

15:17.290 --> 15:19.570
我们就可以利用他这个方法啊

15:19.570 --> 15:20.330
crazy server

15:21.850 --> 15:21.970
好

15:21.970 --> 15:23.210
那这里边写上了

15:23.210 --> 15:24.450
这里边有两个

15:24.450 --> 15:25.930
两个都是可选参数啊

15:25.930 --> 15:27.530
一个是opcins

15:27.530 --> 15:28.610
一个是什么呢

15:28.610 --> 15:32.050
一个是那个request listener

15:32.050 --> 15:34.210
主要是request listener

15:34.210 --> 15:34.850
opcins呢

15:34.850 --> 15:36.890
这里边没什么好配置的

15:36.890 --> 15:38.290
主要是那个

15:38.290 --> 15:40.970
主要是那个就是request listener

15:40.970 --> 15:42.610
这里边要写个函数

15:42.610 --> 15:43.170
这个函数呢

15:43.170 --> 15:44.050
是监听

15:44.050 --> 15:44.690
监听什么呢

15:44.690 --> 15:47.770
有请有没有请求到了啊

15:47.770 --> 15:50.690
有请求来了

15:50.690 --> 15:53.450
有一个attp请求来了

15:53.450 --> 15:53.810
对吧

15:53.810 --> 15:55.610
主要是监听这个

15:55.610 --> 15:55.770
好

15:55.770 --> 15:57.610
那么这个监听函数里边啊

15:57.610 --> 15:59.570
咱们来看一下这个监听函数里边

16:02.050 --> 16:04.170
找一找找一找啊

16:04.170 --> 16:06.810
还可以直接发动get请求看呗啊

16:06.810 --> 16:08.410
嗯找一找啊

16:08.410 --> 16:09.850
监听函数

16:09.850 --> 16:11.650
这里没有说呀

16:11.650 --> 16:14.330
is function with automatically added

16:14.330 --> 16:18.570
request event

16:18.570 --> 16:20.650
request event

16:20.650 --> 16:21.890
对他这里说了啊

16:21.890 --> 16:24.730
这个这个相当于是一个这个事件的两个参数

16:24.730 --> 16:25.850
一个是request对象

16:25.850 --> 16:27.170
一个是response对象

16:27.170 --> 16:28.450
对吧request对象是什么

16:28.450 --> 16:29.850
incoming message

16:29.850 --> 16:31.690
又是我们之前那个对象对吧

16:31.690 --> 16:34.170
又是我们之前的这个对象

16:34.170 --> 16:35.130
就这个对象

16:35.130 --> 16:36.410
就是我们请求的对象

16:36.410 --> 16:38.290
请求对象和和那个我们

16:38.610 --> 16:40.130
我们作为客户端的时候

16:40.130 --> 16:41.330
去请求服务器

16:41.330 --> 16:43.530
服务器是那边什么哪一个消息

16:43.530 --> 16:45.170
我们把他叫做享用对吧

16:45.170 --> 16:45.930
哪一个消息呢

16:45.930 --> 16:48.850
他他这里把他叫做incoming message

16:48.850 --> 16:50.730
就是即将到来的消息

16:52.410 --> 16:55.330
incoming message即将到来的消息

16:55.330 --> 16:58.690
那我们如果说我们自己是服务器

16:58.690 --> 17:01.210
是别人在请求我对吧

17:01.210 --> 17:04.170
那别人是不是消息是别人发过来的

17:04.170 --> 17:06.330
那么别人发过来的请求呢

17:06.370 --> 17:08.970
也是一个incoming message

17:08.970 --> 17:09.250
对吧

17:09.250 --> 17:10.410
要搞清楚啊

17:10.410 --> 17:12.530
就是我去请求别人

17:12.530 --> 17:13.650
别人给我消息

17:13.650 --> 17:14.890
就谁给我消息

17:14.890 --> 17:17.090
那个消息就是incoming message

17:17.090 --> 17:18.490
那么我作为一个服务器

17:18.490 --> 17:19.890
那这个请求是别人给我的

17:19.890 --> 17:20.250
对吧

17:20.250 --> 17:22.690
所以说这个呢是一个incoming message

17:22.690 --> 17:22.850
好

17:22.850 --> 17:24.690
那么我们的享用呢

17:24.690 --> 17:26.610
享用呢就是就这个了

17:27.970 --> 17:28.930
享用就是那个

17:31.050 --> 17:32.490
我们之前看到server response

17:32.490 --> 17:33.370
我们再来总结一下

17:34.370 --> 17:36.370
我是客户端

17:36.370 --> 17:37.490
我是客户端

17:37.490 --> 17:39.330
那么我的请求是什么呢

17:39.330 --> 17:43.010
请求就是client request的对象

17:43.010 --> 17:43.690
就是这个对象

17:45.450 --> 17:46.370
就这个对象对吧

17:46.370 --> 17:48.490
这个对象里边我们也可以write往里边写东西

17:48.490 --> 17:49.050
对不对

17:49.050 --> 17:52.630
我们的请求是这个对象

17:52.630 --> 17:53.910
我把他写到这儿

17:53.910 --> 17:55.910
我觉得这个还蛮重要的

17:55.910 --> 17:58.980
总结

17:58.980 --> 18:01.340
这是我是客户端

18:01.340 --> 18:02.660
那么这个时候呢

18:02.660 --> 18:04.300
我的请求是什么呢

18:04.300 --> 18:06.060
请求是我发给别人的

18:06.100 --> 18:06.980
那么我是客户端

18:06.980 --> 18:07.780
就是client

18:07.780 --> 18:08.780
我是客户端嘛

18:08.780 --> 18:08.940
对吧

18:08.940 --> 18:10.780
client request发给别人的

18:10.780 --> 18:11.580
是不是请求

18:11.580 --> 18:11.980
对吧

18:11.980 --> 18:12.620
是这个对象

18:13.940 --> 18:14.980
我的请求是这个对象

18:16.660 --> 18:17.820
如果是我是客户端

18:17.820 --> 18:18.500
我发给别人的

18:18.500 --> 18:19.820
别人是不是给我一个响应

18:19.820 --> 18:21.580
那是别人给我的

18:21.580 --> 18:22.380
别人给我的

18:22.380 --> 18:26.780
那么就是incoming message对象

18:28.660 --> 18:29.540
就是里边

18:29.540 --> 18:30.740
就这种东西

18:30.740 --> 18:31.420
然后呢

18:31.420 --> 18:33.660
如果说我是服务器

18:33.660 --> 18:35.140
那么请求是给谁给我的

18:35.140 --> 18:36.140
是别人给我的

18:36.140 --> 18:36.460
对吧

18:36.460 --> 18:37.580
不是我给的

18:37.580 --> 18:38.660
是别人来请求我

18:38.660 --> 18:42.740
就是说我们的请求是incoming message对象

18:44.140 --> 18:45.100
我们的响应呢

18:45.100 --> 18:46.180
响应是谁给的

18:46.180 --> 18:47.100
是不是我自己给的

18:47.100 --> 18:47.860
我是服务器嘛

18:47.860 --> 18:49.860
我是我自己想应给别人的

18:49.860 --> 18:51.460
那么响应的是server

18:51.460 --> 18:52.540
我是服务器嘛

18:52.540 --> 18:55.020
response对象

18:55.020 --> 18:55.380
对吧

18:55.380 --> 18:56.460
到时候你查稳当的时候

18:56.460 --> 18:58.220
你才知道我往哪里查

18:58.220 --> 18:59.260
反正查的查不清楚

19:00.540 --> 19:03.380
这里还是把格式设置一下

19:03.380 --> 19:04.940
我看个字体相当不爽

19:04.940 --> 19:05.980
我还跑去问官方

19:05.980 --> 19:07.220
这个东西该怎么去调

19:07.220 --> 19:09.020
这是一个expand

19:09.020 --> 19:11.060
该怎么去调这个字体

19:11.060 --> 19:12.580
它倒是有一个方式来默认

19:12.580 --> 19:13.980
就是点编辑

19:13.980 --> 19:15.060
这里有个首选项

19:17.780 --> 19:19.100
官方跟我说调这

19:19.100 --> 19:20.140
调这

19:20.140 --> 19:21.500
调了没用

19:21.500 --> 19:22.460
为什么没有呢

19:22.460 --> 19:25.860
因为我把调了这个

19:25.860 --> 19:26.500
调这个没用

19:26.500 --> 19:27.540
他只对中文有效

19:27.540 --> 19:28.460
所以英文没效

19:28.460 --> 19:29.540
我搞不清楚了

19:29.540 --> 19:30.060
调这个东西

19:30.060 --> 19:32.460
我说麻烦你再下个版本里面

19:32.460 --> 19:33.340
把更新一下吧

19:33.340 --> 19:34.060
确实有点麻烦

19:35.140 --> 19:37.380
现在我们把这个理性处过后了

19:37.380 --> 19:39.300
现在我们这里有两个参数

19:39.300 --> 19:39.980
Rake是什么

19:39.980 --> 19:40.980
就是incoming message

19:40.980 --> 19:42.060
所以我们之前用过的

19:42.060 --> 19:42.260
对吧

19:42.260 --> 19:42.980
有请求来了

19:42.980 --> 19:45.140
那我们怎么来获取请求里边的东西呢

19:45.140 --> 19:46.060
来吧

19:46.780 --> 19:49.220
请求里边我们比网络有pass

19:49.220 --> 19:50.380
我看一下

19:50.380 --> 19:51.700
有pass吗

19:51.700 --> 19:52.660
incoming message

19:53.780 --> 19:54.820
我把个

19:54.820 --> 19:55.100
算了

19:55.100 --> 19:55.540
不打

19:55.540 --> 19:57.500
全部打印出来有点多

19:57.500 --> 20:01.730
找到这个incoming message

20:01.730 --> 20:03.410
看一下有没有pass

20:03.410 --> 20:04.770
有个UIL

20:04.770 --> 20:05.290
对吧

20:05.290 --> 20:06.730
有个UIL

20:07.450 --> 20:12.220
这是我们请求的地址

20:12.220 --> 20:13.620
请求地址

20:15.100 --> 20:16.180
咱们来试一下吧

20:16.180 --> 20:18.100
我们把服务器搭建起来

20:18.100 --> 20:19.940
这个服务器还没完

20:19.940 --> 20:21.460
它会返回一个server

20:22.100 --> 20:23.420
返回一个server

20:23.420 --> 20:25.060
那么这个server又是怎么对象的

20:25.060 --> 20:26.060
这个server

20:26.980 --> 20:27.700
在这

20:28.540 --> 20:30.020
这个server有这个对象

20:30.020 --> 20:31.260
有这个对象

20:31.260 --> 20:32.580
就有点类似我们之前

20:32.580 --> 20:33.340
那个

20:33.340 --> 20:35.460
sockage的创建的服务器的server

20:35.460 --> 20:37.020
那么这里server是不是可以nation

20:37.020 --> 20:37.420
对吧

20:37.420 --> 20:37.900
nation

20:37.940 --> 20:38.700
监听

20:38.700 --> 20:39.300
监听多少呢

20:39.300 --> 20:40.340
比方说我们有9.27

20:42.140 --> 20:42.460
好

20:42.460 --> 20:43.180
保存

20:43.180 --> 20:43.580
我们这里

20:44.980 --> 20:45.420
运行

20:47.760 --> 20:48.320
没有输出

20:48.320 --> 20:48.520
对吧

20:48.520 --> 20:48.840
没有输出

20:48.840 --> 20:50.120
我们可以加一个那个

20:50.120 --> 20:51.200
还是一样

20:51.200 --> 20:51.480
N

20:51.480 --> 20:52.000
怎么了

20:52.000 --> 20:52.800
Nation

20:53.640 --> 20:55.360
当你开始监听的时候

20:55.360 --> 20:57.480
我们就输出一下server

20:57.480 --> 20:58.920
nation

20:58.920 --> 20:59.520
9527

20:59.520 --> 21:00.920
当然这句话写不写无所谓

21:02.160 --> 21:02.440
保存

21:03.480 --> 21:04.000
运行

21:04.000 --> 21:04.280
你看

21:04.280 --> 21:05.080
就监听了

21:05.080 --> 21:06.440
那我们就请求一下

21:06.440 --> 21:07.320
我们用postman

21:07.320 --> 21:08.280
postman比较纯粹一点

21:08.280 --> 21:09.240
去请求一下

21:09.280 --> 21:09.960
localhost

21:10.680 --> 21:11.800
9527

21:11.800 --> 21:13.040
去发送一下请求

21:13.040 --> 21:14.120
这里等不到结果的

21:14.120 --> 21:15.200
因为服务器没有响应

21:15.200 --> 21:15.480
对吧

21:15.480 --> 21:16.960
所以说一直在等服务器响应

21:16.960 --> 21:17.560
等不到结果

21:17.560 --> 21:19.000
那么这里是不是可以得到了

21:19.000 --> 21:19.920
有请求来了

21:19.920 --> 21:21.480
并且请求的地址是写纲

21:21.480 --> 21:21.920
对吧

21:21.920 --> 21:22.680
并且他忽略了

21:22.680 --> 21:24.560
那个测试连接的那个请求

21:24.560 --> 21:26.120
给直接给忽略了

21:26.120 --> 21:27.160
请求的地址是这个

21:27.160 --> 21:27.400
对吧

21:27.400 --> 21:27.920
UIL

21:28.680 --> 21:30.080
那如果说我这里请求的地址

21:30.080 --> 21:30.560
改一下

21:30.560 --> 21:32.080
比方说我们改成这个

21:32.080 --> 21:34.080
abc

21:34.080 --> 21:34.920
加个问号

21:35.720 --> 21:36.840
a等于1

21:36.840 --> 21:37.800
b等于2

21:37.840 --> 21:38.860
加一个哈西

21:38.860 --> 21:39.160
a

21:39.160 --> 21:39.920
随便写吧

21:42.240 --> 21:43.320
可以说取消

21:43.320 --> 21:44.840
去发动请求

21:44.840 --> 21:46.080
那么这边是不是又来了

21:46.080 --> 21:49.290
咦

21:49.290 --> 21:50.450
等一下

21:50.450 --> 21:50.970
做一些东西

21:50.970 --> 21:52.960
是

21:53.680 --> 21:54.600
甚的

21:55.160 --> 21:56.280
你看

21:56.280 --> 21:57.200
是不是又来了

21:57.200 --> 21:58.760
请求的地址是否得到了

21:58.760 --> 21:59.720
那么这个地址的时候

21:59.720 --> 22:01.520
这个东西不好分析啊

22:01.520 --> 22:02.320
怎么办

22:02.320 --> 22:04.480
是不是可以利用UIL模块啊

22:04.480 --> 22:06.520
我们之前学过的UIL模块

22:06.520 --> 22:07.360
把那个分析出来

22:07.360 --> 22:08.320
对不对

22:08.320 --> 22:09.760
你要去拿这个东西里边

22:09.760 --> 22:10.920
哪一部分

22:10.920 --> 22:13.920
用这个模块,我们可以用RequireUIL

22:13.920 --> 22:17.920
用这个模块去分析我们的一个地址

22:17.920 --> 22:24.920
把分析出来,UIL OBG,RequireRigUIL

22:24.920 --> 22:26.920
那么这里,放进去,对吧?

22:26.920 --> 22:33.920
这是请求信息,路径信息

22:33.920 --> 22:39.920
这里,应该是UIL,PoseUIL,RigUIL

22:39.920 --> 22:42.920
保存,停止,运行

22:42.920 --> 22:44.920
好,这边再来发送,请求

22:44.920 --> 22:46.920
来看,这边分析出来了,对吧?

22:46.920 --> 22:47.920
各种东西都有了,对吧?

22:47.920 --> 22:50.920
12期啊,这些东西全部都有了,对不对?

22:50.920 --> 22:52.920
那么这些东西没有,这些东西在哪呢?

22:52.920 --> 22:55.920
这些东西在那个,看一下文档

22:55.920 --> 22:58.920
Incoming Message

22:58.920 --> 23:01.920
Incoming Message

23:01.920 --> 23:07.940
这里边,在哪呢?

23:07.940 --> 23:11.940
这里边应该是有的啊,应该是有的

23:11.940 --> 23:15.940
但是这边是没有给你写出来,没有给你写出来

23:15.940 --> 23:17.940
那我们只能从Head里面获取了

23:17.940 --> 23:19.940
只能从Head里面获取了

23:19.940 --> 23:20.940
那Head里面怎么来获取了?

23:20.940 --> 23:24.940
Head里面我们看一下,我们之前输出,请求投

23:24.940 --> 23:26.940
请求投,然后呢

23:26.940 --> 23:31.940
这边我们得到RigHeaders,是吧?

23:31.940 --> 23:37.310
跟以前一样的,停止,运行

23:37.310 --> 23:40.310
发送,你看,请求投是不是拿到了,对不对?

23:40.310 --> 23:41.310
Hose,对吧?

23:41.310 --> 23:43.310
就是我们的主机名,对吧?拿到了

23:43.310 --> 23:45.310
好,这是这一部分啊

23:45.310 --> 23:47.310
好,那么这里得到请求投

23:47.310 --> 23:49.310
如果说请求体呢,是不是一样的,对不对?

23:49.310 --> 23:51.310
请求体也是一样的,跟之前一样的

23:51.310 --> 23:52.310
要从流利边读

23:52.310 --> 23:54.310
为什么请求要从流利边读呢?

23:54.310 --> 23:56.310
因为它可能请求的内容很多

23:56.310 --> 23:57.310
比方你上传文件,对吧?

23:57.310 --> 23:58.310
文件的数据是不是很多?

23:58.310 --> 24:00.310
它要一块一块传啊

24:00.310 --> 24:02.310
所以说你只能一部分一部分读

24:02.310 --> 24:05.310
好,来吧,我们这里呢,用那个Rig

24:06.310 --> 24:09.750
data

24:09.750 --> 24:15.790
然后呢,我们这里得到一个创可

24:15.790 --> 24:18.790
把这个创可加到Body里边去

24:18.790 --> 24:21.790
创可,to stream

24:21.790 --> 24:24.790
所以说流啊,其实在Note解释里面非常重要的

24:24.790 --> 24:27.790
RigHeaders,帮我们读完之后

24:27.790 --> 24:30.790
end,帮我们请求体读完之后

24:30.790 --> 24:33.790
它怎么知道读完呢?就是我们上节合作的

24:33.790 --> 24:36.790
它发现contentlinks完了,没了,就读完了

24:36.790 --> 24:38.790
读完之后,我们就输出一下

24:39.790 --> 24:42.790
请求体

24:42.790 --> 24:45.790
请求体是什么呢?Body

24:45.790 --> 24:49.680
对吧?

24:49.680 --> 24:52.680
我给它加个请求体,我们用Pose请求

24:52.680 --> 24:54.680
用Pose请求

24:54.680 --> 24:58.990
这边呢,我们给它加上一些Body

24:58.990 --> 25:00.990
加上一些Body

25:00.990 --> 25:02.990
Body我们用这个吧,用这种模式

25:02.990 --> 25:05.990
A,等于1,B,等于2

25:06.990 --> 25:08.990
你看,请求体是不是读到了

25:08.990 --> 25:10.990
就这种格式,这种格式又怎么办呢?

25:10.990 --> 25:12.990
请求是你自己去解析的,对吧?

25:12.990 --> 25:14.990
你可以利用一个Url模块去解析

25:14.990 --> 25:16.990
好,那么现在呢,我们这里呢

25:16.990 --> 25:18.990
就把它

25:18.990 --> 25:20.990
这里没有创可

25:20.990 --> 25:22.990
就把请求的所有信息拿到了,对吧?

25:22.990 --> 25:23.990
还有个请求方法

25:23.990 --> 25:25.990
请求方法我记得是在那个Message

25:25.990 --> 25:27.990
应该是在这里面有的

25:27.990 --> 25:29.990
应该是Incoming Message里面

25:29.990 --> 25:31.990
应该有

25:31.990 --> 25:33.990
Incoming Message,Message

25:33.990 --> 25:36.990
这是请求方法,我们把它输出一下

25:36.990 --> 25:38.990
请求路径

25:38.990 --> 25:40.990
请求方法

25:40.990 --> 25:42.990
来自于哪呢?来自于Rig

25:42.990 --> 25:43.990
Message

25:43.990 --> 25:45.990
保存

25:45.990 --> 25:46.990
停止

25:46.990 --> 25:48.990
好,现在再来请求Send

25:48.990 --> 25:50.990
好,厉害,请求方法Pose

25:50.990 --> 25:52.990
对吧?都会拿到了

25:52.990 --> 25:54.990
OK,那么现在呢

25:54.990 --> 25:56.990
就把请求的所有信息全部获取了

25:56.990 --> 25:58.990
对不对?

25:58.990 --> 26:00.990
好,我们这里可以专门来写个喊

26:00.990 --> 26:02.990
写个喊数嘛,别的太多了,放个信

26:02.990 --> 26:04.990
HandleRig

26:05.990 --> 26:07.990
处理请求

26:07.990 --> 26:09.990
我们把这个地方

26:09.990 --> 26:11.990
全部放进去

26:11.990 --> 26:13.990
我们这里调用这个喊数

26:13.990 --> 26:16.990
HandleRig

26:16.990 --> 26:19.990
就把请求的信息全部读出来

26:19.990 --> 26:21.990
如果说你以后写代码的时候

26:21.990 --> 26:23.990
需要哪一部分就读哪一部分

26:23.990 --> 26:24.990
好,那么读到请求过后

26:24.990 --> 26:26.990
你看看,这边又一直在等

26:26.990 --> 26:28.990
它很耿直,它一直在等

26:28.990 --> 26:29.990
等服务器响应

26:29.990 --> 26:30.990
服务器根本就没给它响应,甩它

26:30.990 --> 26:32.990
没甩它,把它忘了,那不行

26:32.990 --> 26:34.990
那服务器得给它响应

26:34.990 --> 26:36.990
响应了,对吧?怎么响应,就是Ris

26:36.990 --> 26:38.990
Ris是什么呢?Ris就是这个对象

26:38.990 --> 26:40.990
就是这个

26:40.990 --> 26:42.990
ServerResponse对象

26:42.990 --> 26:44.990
这个对象里边怎么来响应呢?

26:44.990 --> 26:46.990
它也是一个,它也是一个流

26:46.990 --> 26:48.990
它也是一个可写流,就往里边写东西

26:48.990 --> 26:50.990
它就响应了,对吧?

26:50.990 --> 26:52.990
也可以去设置它的什么?设置它的头

26:52.990 --> 26:54.990
你看,可以在你往里边

26:54.990 --> 26:56.990
写入一个头

26:56.990 --> 26:58.990
SetsHeader

26:58.990 --> 27:00.990
我们给它写一个头

27:00.990 --> 27:02.990
值是1

27:02.990 --> 27:04.990
1

27:04.990 --> 27:06.990
再写一个消息头吧

27:06.990 --> 27:08.990
B值是2,随便你写

27:08.990 --> 27:10.990
消息头无所谓,随便你写

27:10.990 --> 27:12.990
然后呢

27:12.990 --> 27:14.990
Body怎么办呢?Body就写

27:14.990 --> 27:16.990
Rights,像流的样子写

27:16.990 --> 27:18.990
往里边写东西就行了

27:18.990 --> 27:20.990
Rights,给它写一个什么呢?

27:20.990 --> 27:22.990
写个

27:22.990 --> 27:24.990
Hello

27:24.990 --> 27:26.990
你好,写一个

27:26.990 --> 27:28.990
随便写,这是消息体

27:28.990 --> 27:30.990
就不像我们上节课那个net

27:30.990 --> 27:32.990
我们还要去购建

27:32.990 --> 27:34.990
购建消息体和消息头

27:34.990 --> 27:36.990
那么这里它帮你购建好了

27:36.990 --> 27:38.990
这个东西就往头部里边写

27:38.990 --> 27:40.990
这个东西就往消息体里边写

27:40.990 --> 27:42.990
好,那么写完了之后,你不要忘了雕像End

27:42.990 --> 27:44.990
我表示我写完了

27:44.990 --> 27:46.990
好,那么这样就给它响应了

27:46.990 --> 27:48.990
我们来看一下吧

27:48.990 --> 27:50.990
这些代码改了,你都要重新运行

27:50.990 --> 27:52.990
Send

27:52.990 --> 27:54.990
你看,是不是拿到你好了

27:54.990 --> 27:56.990
我们来看一下服务器的响应结果

27:56.990 --> 27:58.990
你看,是不是多了一个A和B

27:58.990 --> 28:00.990
服务器跟我们想一个A和B都响应头

28:00.990 --> 28:02.990
这几个是它自动给你加的

28:02.990 --> 28:04.990
你要把它去掉也可以

28:04.990 --> 28:06.990
要把它去掉也可以

28:06.990 --> 28:08.990
怎么去掉呢?怎么来去掉呢?

28:08.990 --> 28:10.990
Remove Header,把内容传进去

28:10.990 --> 28:12.990
它就可以去掉某一个响应头

28:12.990 --> 28:14.990
Getting Header就看了目前我设置了哪些响应头

28:14.990 --> 28:16.990
那么这里呢

28:16.990 --> 28:18.990
就完成了响应了

28:18.990 --> 28:20.990
特别特别简单

28:20.990 --> 28:22.990
真的特别特别简单

28:22.990 --> 28:24.990
那就可以说响应码了

28:24.990 --> 28:26.990
响应码,它这里肯定有

28:26.990 --> 28:28.990
我们平时用这个还是用的比较少

28:28.990 --> 28:30.990
一般都是用了一些给你打好的

28:30.990 --> 28:32.990
一些第三方库,用起更加方便

28:34.990 --> 28:36.990
Response,Status Code

28:36.990 --> 28:38.990
那么这个地方是不是可以设置响应码

28:38.990 --> 28:40.990
我们来看一下,Status Code

28:40.990 --> 28:42.990
它默认是两半

28:42.990 --> 28:44.990
默认给你设置为两半

28:44.990 --> 28:46.990
那如果说我给它设置一下Response

28:46.990 --> 28:48.990
Status Code,给它设置为404

28:48.990 --> 28:50.990
它就404了

28:50.990 --> 28:54.430
这里

28:54.430 --> 28:56.430
因为响应码,它无非就是那个

28:56.430 --> 28:58.430
响应行里面一个数字嘛

28:58.430 --> 29:00.430
你看它返回的结果

29:00.430 --> 29:02.430
404拿着放的,看那边

29:02.430 --> 29:04.430
Status,对吧,就表示404错误了

29:04.430 --> 29:06.430
就很简单

29:06.430 --> 29:08.430
很简单,那么就完成了响应了

29:08.430 --> 29:10.430
好,这是服务器

29:10.430 --> 29:12.430
把它扶植一下

29:12.430 --> 29:14.430
好,那么今天我们做一个练习

29:14.430 --> 29:16.430
我们要做一个什么练习呢

29:16.430 --> 29:20.430
我们要做一个静态支援的服务器

29:20.430 --> 29:22.430
谁要静态支援服务器

29:22.430 --> 29:27.600
静态支援服务器

29:27.600 --> 29:29.600
我举个例子

29:29.600 --> 29:31.600
我这个工程里边有个文件夹

29:31.600 --> 29:33.600
这个文件夹表示静态支援

29:33.600 --> 29:35.600
什么叫静态支援,就是一些普通的文件

29:35.600 --> 29:37.600
比如说英这个是ATML

29:37.600 --> 29:39.600
有东西说,那node里面不是

29:39.600 --> 29:41.600
不能写什么页面这些东西嘛

29:41.600 --> 29:43.600
但是这个东西啊

29:43.600 --> 29:45.600
它node不会运行它的

29:45.600 --> 29:47.600
node不会运行它的

29:47.600 --> 29:49.600
不会把它当成页面运行,你放心

29:49.600 --> 29:51.600
然后这里边有一个abc

29:51.600 --> 29:53.600
加个文件夹嘛

29:53.600 --> 29:55.600
加一个sqlips嘛

29:55.600 --> 29:57.600
一个文件夹

29:57.600 --> 29:59.600
这里边写上一个adges

29:59.600 --> 30:01.600
然后呢,这边去引用这个adges

30:01.600 --> 30:03.600
就是我们传统的

30:03.600 --> 30:05.600
传统的动作法

30:05.600 --> 30:07.600
对吧,adges

30:07.600 --> 30:09.600
注意啊,这些对于nodeges来说

30:09.600 --> 30:11.600
它无非就是一个一个的文本文件

30:11.600 --> 30:13.600
它都不知道这里边写的是啥

30:13.600 --> 30:15.600
nodeges是不会去运行那些东西的

30:15.600 --> 30:17.600
绝对不会运行,它没法运行这个

30:17.600 --> 30:19.600
这个ges倒是能运行

30:19.600 --> 30:21.600
但是ges里边可能会有一些

30:21.600 --> 30:23.600
页面上的带嘛

30:23.600 --> 30:25.600
只能在页面上运行带嘛

30:25.600 --> 30:27.600
所以nodeges是不会运行这个的

30:27.600 --> 30:29.600
然后呢,我们再写个css

30:29.600 --> 30:33.300
引这个sqlips

30:33.300 --> 30:35.300
css

30:35.300 --> 30:37.300
body

30:37.300 --> 30:39.300
background

30:39.300 --> 30:41.300
colour

30:41.300 --> 30:43.300
这里边写个colour

30:43.300 --> 30:45.300
运行adges

30:45.300 --> 30:47.300
然后呢,我们再加张图片吧

30:47.300 --> 30:49.300
再加张图片,多加一点

30:49.300 --> 30:51.300
image

30:51.300 --> 30:53.300
哎呦,我之前那个

30:53.300 --> 30:55.300
把3,我的好时期呢

30:55.300 --> 31:00.080
好时期

31:00.080 --> 31:02.080
好时期多少钱一只啊

31:02.080 --> 31:05.460
令存为

31:05.460 --> 31:07.460
保存

31:07.460 --> 31:09.460
加过来

31:09.460 --> 31:11.460
加到amg就没去

31:11.460 --> 31:13.460
加进去

31:13.460 --> 31:15.460
好,那么我们在页面上去引用它

31:15.460 --> 31:17.460
当然css里面引用也可以

31:17.460 --> 31:19.460
来自于amg的

31:19.460 --> 31:21.460
这个,行了

31:21.460 --> 31:23.460
来看啊

31:23.460 --> 31:25.460
什么叫静态支援服务器

31:25.460 --> 31:27.460
就是说

31:27.460 --> 31:29.460
当你去,当服务器

31:29.460 --> 31:31.460
当客户端去请求我们的服务器的时候

31:31.460 --> 31:33.460
就是我们这里肯定要打一个服务器

31:33.460 --> 31:35.460
当我们去客户端去请求我们的服务器的时候

31:35.460 --> 31:37.460
比方说他请求的是这个地址

31:37.460 --> 31:39.460
localhost

31:39.460 --> 31:41.460
927

31:41.460 --> 31:43.460
当地址呢

31:43.460 --> 31:45.460
index.atmail

31:45.460 --> 31:47.460
当他请求这个地址的时候

31:47.460 --> 31:49.460
我就给他什么呢

31:49.460 --> 31:51.460
给他public目录下面的

31:51.460 --> 31:53.460
index.atmail

31:53.460 --> 31:55.460
我给他响应这个文件内容

31:55.460 --> 31:57.460
当他去请求这个地址

31:57.460 --> 31:59.460
css

31:59.460 --> 32:01.460
index.css的时候

32:01.460 --> 32:03.460
我就给他public目录下面的

32:03.460 --> 32:05.460
css

32:05.460 --> 32:07.460
index.css的文件内容

32:07.460 --> 32:09.460
原来的意思吧,这就是静态支援服务器

32:09.460 --> 32:11.460
这个public目录

32:11.460 --> 32:13.460
就是我们存放的静态支援

32:13.460 --> 32:15.460
这个静态支援是直接交给浏览器的

32:15.460 --> 32:17.460
让浏览器去处理,我们loader

32:17.460 --> 32:19.460
不会去运行它,但loader会读它

32:19.460 --> 32:21.460
根据我们请求的路径

32:21.460 --> 32:23.460
去读相应的文件

32:23.460 --> 32:25.460
把文件内容交给它

32:25.460 --> 32:27.460
对吧,这就是

32:27.460 --> 32:29.460
我们的服务器

32:29.460 --> 32:31.460
这就是为什么我们平时

32:31.460 --> 32:33.460
按了一些vscode插件

32:33.460 --> 32:35.460
我们这里可以点击level server

32:35.460 --> 32:37.460
它那个路径上面就是这种路径

32:37.460 --> 32:39.460
你看吧,open level server

32:39.460 --> 32:41.460
你看,这种路径

32:41.460 --> 32:43.460
这种路径为什么就可以显示这个页面结果

32:43.460 --> 32:45.460
就是因为它这个插线本身在本地

32:45.460 --> 32:47.460
帮我们达了一个静态支援服务器

32:47.460 --> 32:49.460
那么现在我们学一下自己该怎么写

32:49.460 --> 32:51.460
很简单,并不复杂

32:51.460 --> 32:53.460
几句话就写出来了

32:53.460 --> 32:55.460
首先我们导入attp模块

32:55.460 --> 32:57.460
首先我们要搭一个服务器

32:57.460 --> 32:59.460
对不对

32:59.460 --> 33:01.460
然后这个服务器

33:01.460 --> 33:03.460
我们要创建一个cris server

33:03.460 --> 33:05.460
创建一个服务器,那么这边是不是

33:05.460 --> 33:07.460
服务器的处理函数

33:07.460 --> 33:09.460
处理函数,单独写个处理函数

33:09.460 --> 33:11.460
叫做handler

33:15.460 --> 33:17.460
把handler放进去,这是我们的处理函数

33:17.460 --> 33:19.460
那么这里是不是得到一个服务器

33:19.460 --> 33:21.460
服务器来了,然后服务器

33:21.460 --> 33:23.460
再做一个onnessen

33:27.460 --> 33:29.460
servernessen,随便换一个端口吧

33:29.460 --> 33:31.460
换一个端口,6000

33:39.460 --> 33:41.460
那么这一部分呢,我们现在就搞定这个函数就行了

33:41.460 --> 33:43.460
这个函数里边

33:43.460 --> 33:45.460
我们当然可以随便标,我们先随便

33:45.460 --> 33:47.460
随便响应一个

33:51.460 --> 33:53.460
serverresponse对象

33:53.460 --> 33:55.460
serverresponse对象

33:55.460 --> 33:57.460
那么这里边呢,可以往里边写东西

33:57.460 --> 33:59.460
写一些响应头

33:59.460 --> 34:01.460
也可以干嘛呢

34:01.460 --> 34:03.460
还有别的更加方便的函数

34:03.460 --> 34:05.460
好像没有了,那我就write吧

34:09.460 --> 34:11.460
好,write的话

34:11.460 --> 34:13.460
我们写一个什么呢,写一个

34:13.460 --> 34:15.460
写个字不错吧

34:20.830 --> 34:22.830
保存,你看一下,就搭了一个服务器了吧

34:22.830 --> 34:24.830
特别简单

34:24.830 --> 34:26.830
好,服务器打好了

34:26.830 --> 34:28.830
然后呢,我们这边去请求

34:28.830 --> 34:30.830
请求什么呢,请求

34:30.830 --> 34:32.830
这个地址吧,index的atm

34:32.830 --> 34:34.830
请求这个地址

34:34.830 --> 34:36.830
诶,抱错了吗

34:36.830 --> 34:38.830
不是952去的,6000

34:40.830 --> 34:42.830
请求一个地址,你看一下

34:42.830 --> 34:44.830
发送了消息体,是吧

34:44.830 --> 34:46.830
原式格式就是8D

34:46.830 --> 34:48.830
还没有任何其他内容

34:48.830 --> 34:50.830
那么我们现在要做的就是

34:50.830 --> 34:52.830
当然现在我们请求任何地址是不是都是这样子

34:52.830 --> 34:54.830
任何地址,你看,请求这个地址

34:54.830 --> 34:56.830
是不是还是Hello,它始终会收到这个请求的

34:56.830 --> 34:58.830
对吧,是不是始终会

34:58.830 --> 35:00.830
被这个函数处理

35:00.830 --> 35:02.830
因此呢,我们目前不是我们想要的

35:02.830 --> 35:04.830
我们现在是要干嘛,是要根据不同的

35:04.830 --> 35:06.830
请求路径

35:06.830 --> 35:08.830
来得到不同的文件

35:08.830 --> 35:10.830
那怎么办呢,是不是我要得到你的

35:10.830 --> 35:12.830
路径是什么,我们专门来写个函数

35:14.830 --> 35:18.830
getpass,就是我们要得到的文件路径

35:18.830 --> 35:20.830
我们的getfilepass

35:20.830 --> 35:22.830
file name嘛

35:22.830 --> 35:27.360
得到要处理的文件路径

35:27.360 --> 35:29.360
得到要

35:31.360 --> 35:33.360
得到要处理的

35:33.360 --> 35:35.360
文件

35:35.360 --> 35:37.360
文件路径

35:37.360 --> 35:39.360
或者说直接得到文件内容嘛

35:39.360 --> 35:41.360
得到要处理的文件信息

35:43.360 --> 35:45.360
我们要得到要处理的文件信息

35:45.360 --> 35:47.360
那么我们这里getfile

35:47.360 --> 35:49.360
info

35:49.360 --> 35:51.360
你给我一个什么呢,给我一个UIL地址

35:51.360 --> 35:53.360
你请求的UIL地址

35:53.360 --> 35:55.360
那么我来分析出我要处理哪个文件

35:55.360 --> 35:57.360
那我这里怎么来用这个函数呢

35:57.360 --> 35:59.360
getfile把rig传进去,UIL传进去

35:59.360 --> 36:01.360
对吧,那么它得到一个文件信息

36:01.360 --> 36:03.360
info

36:03.360 --> 36:05.360
我们这里把这个信息打印出来

36:05.360 --> 36:07.360
我们这个信息先不早打印

36:07.360 --> 36:09.360
在这边来,一个个来,一点点来

36:09.360 --> 36:11.360
首先这个UIL地址呢,我们是不是要进行转换

36:11.360 --> 36:13.360
因为它太不好处理的

36:13.360 --> 36:15.360
还可能还会带一些参数

36:15.360 --> 36:17.360
所以说我们利用UIL模块

36:17.360 --> 36:19.360
来转换一下这里的

36:25.360 --> 36:27.360
什么大写吧,UIL

36:31.360 --> 36:33.360
把它转换成一个UIL的

36:33.360 --> 36:35.360
对象

36:35.360 --> 36:37.360
来输出一下,看一下对象

36:37.360 --> 36:39.360
UIL比起

36:39.360 --> 36:41.360
运行

36:41.360 --> 36:43.360
再发动请求

36:43.360 --> 36:45.360
看一下这边是不是得到了UIL的PASSNAME

36:45.360 --> 36:47.360
这个是不是我们想要的

36:47.360 --> 36:49.360
不是PASSNAME

36:49.360 --> 36:51.360
应该是这个

36:51.360 --> 36:53.360
PASSNAME还包含这个参数

36:53.360 --> 36:57.440
我们现在是不想要参数

36:57.440 --> 36:59.440
这边

36:59.440 --> 37:01.440
回车

37:01.440 --> 37:03.440
PASSNAME是不是没有参数

37:03.440 --> 37:05.440
就是PASSNAME,PASS是有参数的

37:05.440 --> 37:07.440
PASSNAME是不是没有参数的

37:07.440 --> 37:09.440
我们要的就是这个路径,对吧

37:09.440 --> 37:11.440
要得到UIL OB借到什么

37:11.440 --> 37:13.440
PASS,对不对

37:13.440 --> 37:15.440
是不是得到这个

37:15.440 --> 37:17.440
我们现在把它改一下

37:17.440 --> 37:19.440
现在我们来看

37:19.440 --> 37:21.440
发动请求

37:29.440 --> 37:31.440
现在我们请求

37:31.440 --> 37:33.440
来看这边,是不是得到PASS的

37:33.440 --> 37:35.440
拿到这个PASS过后

37:35.440 --> 37:37.440
你看,我们拿到这个PASS

37:37.440 --> 37:39.440
拿到过后,我们是不是拼接什么

37:39.440 --> 37:41.440
拼接这个东西

37:41.440 --> 37:43.440
对不对,是不是拼接这个东西

37:43.440 --> 37:45.440
拼上一个public来得到一个绝对的路径

37:45.440 --> 37:47.440
所以说我们这里呢

37:47.440 --> 37:49.440
绝对路径怎么办

37:49.440 --> 37:51.440
用这个file.net

37:51.440 --> 37:53.440
我们用一个net

37:53.440 --> 37:55.440
要处理的文件路径

37:55.440 --> 37:57.440
要处理的文件路径

37:57.440 --> 37:59.440
那么路径怎么来了

37:59.440 --> 38:01.440
file.net等于

38:03.440 --> 38:05.440
就是还要一个PASS某块

38:05.440 --> 38:07.440
PASS

38:09.440 --> 38:13.070
PASSresolve

38:13.070 --> 38:15.070
file.net

38:15.070 --> 38:17.070
然后呢

38:17.070 --> 38:19.070
到那个public步驻下面

38:19.070 --> 38:21.070
然后再拼接UIL OB借的PASS

38:21.070 --> 38:23.070
对吧,是不是形成一个绝对路径呢

38:23.070 --> 38:25.070
看一下,file.net

38:25.070 --> 38:27.070
复制,是不是得到一个绝对路径

38:27.070 --> 38:29.070
输出

38:29.070 --> 38:31.070
一步一步来,不着急

38:31.070 --> 38:33.070
总之最终可以写完的

38:33.070 --> 38:35.070
运行,发动请求

38:35.070 --> 38:37.070
发动请求

38:37.070 --> 38:39.070
你看一下,这里是不是得到一个绝对路径

38:39.070 --> 38:41.070
怎么得到地盘

38:41.070 --> 38:43.070
是因为它这个路径里面有一个斜杠

38:43.070 --> 38:45.070
有一个左斜杠

38:45.070 --> 38:47.070
左斜杠是表示跟路径

38:47.070 --> 38:49.070
跟路径肯定不行

38:49.070 --> 38:51.070
不能用跟路径

38:51.070 --> 38:53.070
因此我们要把第一个左斜杠去掉

38:53.070 --> 38:55.070
我要去掉它第一个左斜杠

38:55.070 --> 38:57.070
因此我们用一个支付设结去

38:57.070 --> 38:59.070
Supps去

38:59.070 --> 39:02.580
下一个支付开始

39:02.580 --> 39:04.580
再运行,这些细节要处理

39:04.580 --> 39:06.580
你看,现在绝对都进不出来了

39:06.580 --> 39:08.580
定位到public目录下面

39:08.580 --> 39:10.580
对不对

39:10.580 --> 39:12.580
这里有很多种情况

39:12.580 --> 39:14.580
像这种情况下

39:14.580 --> 39:16.580
有可能

39:16.580 --> 39:18.580
它没有这个文件

39:18.580 --> 39:20.580
有可能没有这个文件

39:20.580 --> 39:22.580
如果说它没有这个文件

39:22.580 --> 39:24.580
是不是要出问题的

39:24.580 --> 39:26.580
容易出问题

39:26.580 --> 39:28.580
那么我们这里

39:28.580 --> 39:30.580
要判断一下

39:30.580 --> 39:32.580
有没有这个文件

39:32.580 --> 39:34.580
如果说没有这个文件

39:34.580 --> 39:36.580
那么我们可能要做另一方处理

39:36.580 --> 39:38.580
如果说有这个文件

39:38.580 --> 39:40.580
我们又要做另一方处理

39:40.580 --> 39:42.580
来吧,我们一个判断

39:42.580 --> 39:44.580
有没有这个文件

39:44.580 --> 39:46.580
这个路径

39:46.580 --> 39:48.580
比我们之前所学

39:48.580 --> 39:50.580
我们是不是可以写一个函数

39:50.580 --> 39:52.580
exist

39:52.580 --> 39:54.580
给我一个finally

39:54.580 --> 39:56.580
我看一下这个路径是不是存在

39:56.580 --> 39:58.580
本来它以前有这个函数的

39:58.580 --> 40:00.580
搞没了

40:00.580 --> 40:02.580
denters

40:02.580 --> 40:04.580
得到这个文件

40:04.580 --> 40:06.580
文件的状态

40:08.580 --> 40:10.580
那么这里是不是有可能会爆错

40:10.580 --> 40:12.580
对不对,有可能会爆错

40:12.580 --> 40:14.580
我们就把这个文件状态返回

40:14.580 --> 40:16.580
return

40:16.580 --> 40:18.580
await

40:18.580 --> 40:20.580
把它返回

40:20.580 --> 40:22.580
好,那么这边开启

40:22.580 --> 40:24.580
它如果说爆错了

40:24.580 --> 40:26.580
是不是没有这个文件

40:26.580 --> 40:28.580
没有这个文件的话,那么我们很简单

40:28.580 --> 40:30.580
拉好,对不对

40:30.580 --> 40:32.580
那么这里我们通过这个函数

40:32.580 --> 40:34.580
get status

40:34.580 --> 40:36.580
得到文件的状态

40:36.580 --> 40:38.580
如果说没有状态的话就返回拉,不要爆错了

40:38.580 --> 40:40.580
我们这里

40:40.580 --> 40:42.580
把它变成一步函数

40:42.580 --> 40:44.580
这里变成一步函数

40:44.580 --> 40:46.580
那么这里我们就可以调用

40:46.580 --> 40:48.580
await

40:48.580 --> 40:50.580
上面get fileinfo

40:50.580 --> 40:52.580
getState

40:52.580 --> 40:54.580
得到文件状态,把 file name 传进去

40:54.580 --> 40:56.580
是不是可以拿到状态了

40:56.580 --> 40:58.580
State

40:58.580 --> 41:00.580
输出

41:00.580 --> 41:02.580
保存

41:02.580 --> 41:04.580
你看一下,咱们再来看一下

41:04.580 --> 41:08.780
发送请求

41:08.780 --> 41:10.780
你看,这边得到 now

41:10.780 --> 41:12.780
表示根本没有这个文件

41:12.780 --> 41:14.780
那如果说我们请求的路径是这样的路径

41:14.780 --> 41:16.780
index.atm

41:16.780 --> 41:18.780
对吧

41:18.780 --> 41:20.780
是不是 hello

41:20.780 --> 41:22.780
对吧,我这里是 hello

41:22.780 --> 41:24.780
这里

41:24.780 --> 41:26.780
是不是得到一个状态了

41:26.780 --> 41:28.780
所以说

41:28.780 --> 41:30.780
到底有没有文件

41:30.780 --> 41:32.780
就看这个东西,它返回的到底有没有值

41:32.780 --> 41:34.780
对吧

41:34.780 --> 41:36.780
看一下返回的有没有值

41:36.780 --> 41:38.780
如果说

41:38.780 --> 41:40.780
如果说没有值

41:40.780 --> 41:42.780
如果说它没有值

41:42.780 --> 41:44.780
是不是文件不存在

41:44.780 --> 41:46.780
文件不存在

41:46.780 --> 41:48.780
好,文件不存在的情况下

41:48.780 --> 41:50.780
我们做这么一种处理

41:50.780 --> 41:52.780
做什么处理呢

41:52.780 --> 41:54.780
我在这个路径后面

41:54.780 --> 41:56.780
再跟一个

41:56.780 --> 41:58.780
再跟一个路径,什么意思呢

41:58.780 --> 42:00.780
就是你们有的时候去请求这个地址

42:00.780 --> 42:02.780
比方说你们去请求

42:02.780 --> 42:04.780
abc

42:04.780 --> 42:06.780
这个地址

42:06.780 --> 42:08.780
那如果说这个文件不存在

42:08.780 --> 42:10.780
那么我就假设你

42:10.780 --> 42:12.780
请求的是这个

42:12.780 --> 42:14.780
这叫默认的

42:14.780 --> 42:16.780
使用的静态资源文件名

42:16.780 --> 42:18.780
叫做默认文件名

42:18.780 --> 42:20.780
比方说你请求的是这个地址

42:20.780 --> 42:22.780
请求的是跟路径

42:22.780 --> 42:24.780
就是请求首页的时候

42:24.780 --> 42:26.780
是不用填这个的

42:26.780 --> 42:28.780
如果说你请求这个的时候

42:28.780 --> 42:30.780
我发现没有这个文件

42:30.780 --> 42:32.780
没有这个空的文件

42:32.780 --> 42:34.780
那怎么办呢

42:34.780 --> 42:36.780
我就给你这么一个

42:36.780 --> 42:38.780
index

42:38.780 --> 42:40.780
后面给你评一个index

42:40.780 --> 42:42.780
这种情况,文件不存在的情况

42:42.780 --> 42:44.780
另一种情况,文件存在

42:44.780 --> 42:46.780
但是它是一个目录

42:46.780 --> 42:48.780
还有一种情况,文件是存在的

42:48.780 --> 42:50.780
但是它是一个目录

42:50.780 --> 42:52.780
directory

42:52.780 --> 42:54.780
文件不存在

42:54.780 --> 42:56.780
或文件是一个目录

42:56.780 --> 42:58.780
那么这个目录我不可能把目录给你的吧

42:58.780 --> 43:00.780
我不可能把目录给你的

43:00.780 --> 43:02.780
所以说像这种情况下

43:02.780 --> 43:04.780
我该怎么办呢

43:04.780 --> 43:06.780
我还是一样的处理

43:06.780 --> 43:08.780
比方说你请求的是这个css

43:08.780 --> 43:10.780
那这个是个目录

43:10.780 --> 43:12.780
我不可能把目录给你

43:12.780 --> 43:14.780
那怎么办呢,我就给你加上一个

43:14.780 --> 43:16.780
index

43:16.780 --> 43:18.780
加上这么一个东西

43:18.780 --> 43:20.780
所以说

43:20.780 --> 43:22.780
这个是不是应该index的css

43:22.780 --> 43:24.780
不是的,我们默认的文件都是index

43:24.780 --> 43:26.780
当然你可以根据你需要自行

43:26.780 --> 43:28.780
自行感动

43:28.780 --> 43:30.780
那么如果说这两种情况

43:30.780 --> 43:32.780
我们是不是要把文件敏感一下

43:32.780 --> 43:34.780
file name

43:34.780 --> 43:38.220
再来一次

43:38.220 --> 43:40.220
我要重新来一次

43:40.220 --> 43:42.220
这个dirname目录

43:42.220 --> 43:44.220
然后public目录

43:44.220 --> 43:46.220
然后我们要请求的路径

43:46.220 --> 43:48.220
但是路径有可能它请求的路径

43:48.220 --> 43:50.220
另外还有可能请求的

43:50.220 --> 43:52.220
根本不存在

43:52.220 --> 43:54.220
不存在的话

43:54.220 --> 43:56.220
我们就不用看了

43:56.220 --> 43:58.220
不存在的话它也不可能有后边的路径

43:58.220 --> 44:00.220
这个路径好像不太对

44:00.220 --> 44:02.220
我们这里把这个再处理一下

44:02.220 --> 44:04.220
这个再处理一下

44:04.220 --> 44:06.220
lcf

44:06.220 --> 44:08.220
dirigatory

44:12.220 --> 44:14.220
这是文件不存在是一种情况

44:14.220 --> 44:16.220
然后文件是一个目录

44:16.220 --> 44:18.220
又是另外一种情况

44:18.220 --> 44:20.220
文件不存在是一种情况

44:20.220 --> 44:22.220
文件是一个目录是一种情况

44:22.220 --> 44:24.220
文件不存在我们直接说出

44:24.220 --> 44:26.220
文件不存在

44:26.220 --> 44:28.220
然后文件是目录

44:28.220 --> 44:30.220
我们就做这么一件事

44:30.220 --> 44:32.220
然后在目录后边

44:32.220 --> 44:34.220
然后我再拼接一个

44:34.220 --> 44:36.220
默认的一个文件

44:36.220 --> 44:38.220
就是一个文件有默认

44:38.220 --> 44:40.220
就像index.js一样

44:40.220 --> 44:42.220
这是两种情况

44:42.220 --> 44:44.220
那么第三种情况

44:44.220 --> 44:46.220
就不是目录是不是就直接试一个文件了

44:46.220 --> 44:48.220
对不对

44:48.220 --> 44:50.220
直接就试一个文件了

44:50.220 --> 44:52.220
一个正常的文件

44:52.220 --> 44:54.220
对不对

44:54.220 --> 44:56.220
这里是这么几种情况

44:56.220 --> 44:58.220
这里是

44:58.220 --> 45:00.220
得到这个

45:02.220 --> 45:04.220
咱们来看一下

45:04.220 --> 45:06.220
我们目前得到的结果是什么

45:06.220 --> 45:08.220
停止

45:08.220 --> 45:10.220
运行

45:10.220 --> 45:12.220
现在我们再来

45:12.220 --> 45:14.220
目前我们得到的是什么

45:14.220 --> 45:16.220
正常的文件

45:16.220 --> 45:18.220
因为我们请求的路径是什么

45:18.220 --> 45:20.220
所以有这个文件

45:20.220 --> 45:22.220
如果说我们直接请求这个路径

45:22.220 --> 45:24.220
直接请求它

45:24.220 --> 45:26.220
你看一下

45:26.220 --> 45:28.220
我得到的是

45:28.220 --> 45:30.220
这个文件

45:30.220 --> 45:32.220
因为它得到的是一个目录

45:32.220 --> 45:34.220
然后加了一个默认的

45:34.220 --> 45:36.220
那么这个文件存不存在

45:36.220 --> 45:38.220
是不是还要验证一下

45:38.220 --> 45:40.220
这种情况是不是存不存在还要验证

45:40.220 --> 45:42.220
又来看GetState

45:42.220 --> 45:44.220
File

45:44.220 --> 45:46.220
再重新来一次

45:46.220 --> 45:48.220
再重新来一次

45:48.220 --> 45:50.220
得到这个状态过后

45:50.220 --> 45:52.220
我们再来继续判断

45:52.220 --> 45:54.220
如果说文件

45:54.220 --> 45:56.220
还是不存在

45:56.220 --> 45:58.220
我加了文件名过后

45:58.220 --> 46:00.220
都还是不存在

46:00.220 --> 46:02.220
是不是还是文件不存在

46:02.220 --> 46:04.220
如果说文件存在

46:04.220 --> 46:06.220
如果说文件存在

46:06.220 --> 46:08.220
那么是不是我们输出File

46:08.220 --> 46:10.220
对不对

46:10.220 --> 46:12.220
是不是这么个逻辑

46:12.220 --> 46:14.220
这是文件存在的情况

46:14.220 --> 46:16.220
如果说文件不存在

46:16.220 --> 46:18.220
我们就输出不存在

46:18.220 --> 46:20.220
那么就形成了这样一个逻辑

46:20.220 --> 46:22.220
再来

46:22.220 --> 46:24.220
好你看一下我们在测试各种请求

46:24.220 --> 46:26.220
这个地方

46:26.220 --> 46:28.220
是不是文件存在的这个路径

46:28.220 --> 46:30.220
对吧

46:30.220 --> 46:32.220
咱们继续

46:32.220 --> 46:34.220
如果说我们请求的

46:34.220 --> 46:36.220
是CSS这个文件夹

46:36.220 --> 46:38.220
得到的路径是CSS

46:38.220 --> 46:40.220
index.atml

46:40.220 --> 46:42.220
那这个不对

46:44.220 --> 46:46.220
文件不存在

46:46.220 --> 46:48.220
因为这个index.atml是不存在的

46:48.220 --> 46:50.220
是不存在的

46:54.220 --> 46:56.220
它这里还是输出了这个

46:58.220 --> 47:00.220
这个地方出了问题

47:00.220 --> 47:02.220
这个地方出了问题

47:02.220 --> 47:04.220
然后我们来看一下哪里出了问题

47:04.220 --> 47:09.460
输出

47:09.460 --> 47:11.460
发送

47:11.460 --> 47:13.460
这里没有await

47:13.460 --> 47:15.460
这里是没有await

47:15.460 --> 47:17.460
得到的是Promise

47:17.460 --> 47:19.460
Promise无论如何都判夺为真的

47:19.460 --> 47:21.460
然后再来输出

47:21.460 --> 47:23.460
好你看一下文件不存在

47:23.460 --> 47:28.750
对不对

47:28.750 --> 47:30.750
我们把这个去了

47:30.750 --> 47:32.750
请求这个CSS目录

47:32.750 --> 47:34.750
它告诉我文件不存在

47:34.750 --> 47:36.750
然后请求CSS.index.css

47:36.750 --> 47:38.750
真的

47:38.750 --> 47:40.750
如果说我请求的是

47:40.750 --> 47:42.750
另外一个这个东西

47:42.750 --> 47:44.750
真的得到的是

47:44.750 --> 47:46.750
文件不存在

47:46.750 --> 47:48.750
如果说我请求的是跟路径

47:48.750 --> 47:50.750
真的得到的是

47:50.750 --> 47:52.750
index.atml

47:52.750 --> 47:54.750
各种情况是不是全部处理好了

47:54.750 --> 47:56.750
包括什么script

47:56.750 --> 47:58.750
真的

47:58.750 --> 48:00.750
那么这里是不是文件不存在

48:00.750 --> 48:02.750
各种情况全部处理好了

48:02.750 --> 48:04.750
那么接下来我们要进一步处理

48:04.750 --> 48:06.750
文件不存在要干嘛

48:06.750 --> 48:08.750
我们文件不存在的话

48:08.750 --> 48:10.750
要干嘛呢

48:10.750 --> 48:12.750
这里我们就给它这么一个对象

48:12.750 --> 48:14.750
not

48:14.750 --> 48:16.750
fund

48:16.750 --> 48:18.750
文件没有不存在

48:18.750 --> 48:20.750
那么我就给它这么一个对象

48:20.750 --> 48:22.750
给它一个弄

48:22.750 --> 48:24.750
我就会直接返回弄

48:24.750 --> 48:26.750
文件不存在直接返回

48:26.750 --> 48:28.750
弄

48:28.750 --> 48:32.060
那么这边文件不存在直接返回弄

48:32.060 --> 48:34.060
这边直接返回弄

48:34.060 --> 48:36.060
好如果说文件存在的话

48:36.060 --> 48:38.060
我给它返回什么呢

48:38.060 --> 48:40.060
返回什么

48:40.060 --> 48:42.060
返回了文件内容

48:42.060 --> 48:44.060
对不对

48:44.060 --> 48:46.060
那么这里我为了简单

48:46.060 --> 48:48.060
为了简单

48:48.060 --> 48:50.060
我这里呢

48:50.060 --> 48:52.060
当然你可以返回一个就是流

48:52.060 --> 48:54.060
文件的读取流

48:54.060 --> 48:56.060
也可以直接返回文件整个内容

48:56.060 --> 48:58.060
如果说你用流的话

48:58.060 --> 49:00.060
肯定是最好的

49:00.060 --> 49:02.060
用流的话肯定最好

49:02.060 --> 49:04.060
因为它一部分也不能读

49:04.060 --> 49:06.060
那么这里我就不做那么多处理的

49:06.060 --> 49:08.060
我就非常粗暴的

49:08.060 --> 49:10.060
直接把文件全部读出来返回

49:10.060 --> 49:12.060
就是用fs promise

49:12.060 --> 49:14.060
read

49:14.060 --> 49:16.060
file

49:16.060 --> 49:18.060
readfile

49:18.060 --> 49:20.060
把这个文件路径file name

49:20.060 --> 49:22.060
传进去

49:22.060 --> 49:24.060
返回

49:24.060 --> 49:26.060
这个地方

49:26.060 --> 49:28.060
这个地方是闹吗

49:28.060 --> 49:30.060
这个地方不是闹吧

49:30.060 --> 49:32.060
这个地方不是闹

49:32.060 --> 49:34.060
把文件内容返回

49:34.060 --> 49:36.060
OK 那么我们就把这个函数写好了

49:36.060 --> 49:38.060
我们这个函数应该叫做

49:38.060 --> 49:40.060
要处理的文件信息

49:40.060 --> 49:42.060
应该不叫做文件信息

49:42.060 --> 49:44.060
应该是要处理的文件内容

49:44.060 --> 49:46.060
得到要处理的文件内容

49:46.060 --> 49:48.060
getfile content

49:48.060 --> 49:50.060
应该是这么一个函数

49:50.060 --> 49:52.060
那么这里我们就掉到这个函数

49:52.060 --> 49:54.060
用 always 来得到这个info

49:54.060 --> 49:56.060
那么这个info

49:56.060 --> 49:58.060
就有很多两种情况了

49:58.060 --> 50:00.060
一个是 without

50:00.060 --> 50:02.060
等于什么呢 等于now

50:02.060 --> 50:04.060
没有值 一个是有值 一个是没有值

50:04.060 --> 50:06.060
如果说它没有值的话

50:06.060 --> 50:08.060
我应该怎么办 最后都要end

50:08.060 --> 50:10.060
那么我应该怎么办

50:10.060 --> 50:12.060
我们是不是

50:12.060 --> 50:14.060
我们使用standards code

50:14.060 --> 50:17.760
是不是给它设置

50:17.760 --> 50:19.760
404

50:19.760 --> 50:21.760
然后给它写一个消息体

50:25.760 --> 50:27.760
page

50:27.760 --> 50:29.760
resource

50:29.760 --> 50:31.760
is

50:31.760 --> 50:33.760
not exist

50:33.760 --> 50:35.760
你的资源是不存在的

50:35.760 --> 50:37.760
随便写个消息体

50:37.760 --> 50:39.760
当然你还可以给它写个网页

50:39.760 --> 50:41.760
这是文件不存在的情况

50:41.760 --> 50:43.760
如果说文件存在的话

50:43.760 --> 50:45.760
存在的话怎么办呢

50:45.760 --> 50:47.760
存在的话我们是不是就要响应

50:47.760 --> 50:49.760
standards code

50:49.760 --> 50:51.760
默认就是200 我们不写了

50:51.760 --> 50:53.760
write 是吧 文件内容

50:53.760 --> 50:55.760
文件内容是什么

50:55.760 --> 50:57.760
文件内容是什么

50:57.760 --> 50:59.760
来自于这个info

50:59.760 --> 51:01.760
来自于这个info

51:01.760 --> 51:03.760
好 咱们来试一下

51:03.760 --> 51:05.760
咱们来试一下

51:05.760 --> 51:07.760
现在我们重新启动

51:07.760 --> 51:09.760
现在我们用postman去请求一下

51:09.760 --> 51:11.760
请求这个

51:11.760 --> 51:13.760
首页

51:13.760 --> 51:15.760
你看 这拿到这个结果了

51:15.760 --> 51:17.760
拿到我们的页面结果了

51:17.760 --> 51:19.760
我们去请求css

51:19.760 --> 51:21.760
style

51:21.760 --> 51:23.760
in这个设定

51:23.760 --> 51:25.760
css

51:25.760 --> 51:27.760
怎么拿到这个结果了

51:27.760 --> 51:29.760
然后我们的页面上去请求

51:29.760 --> 51:31.760
localhost

51:31.760 --> 51:33.760
6000

51:33.760 --> 51:35.760
刷新

51:35.760 --> 51:39.460
为什么无法访问

51:39.460 --> 51:44.240
刷新

51:44.240 --> 51:49.150
这边都可以拿到结果

51:49.150 --> 51:51.150
可以拿到结果对吧

51:51.150 --> 51:53.150
我明白了

51:55.150 --> 51:57.150
6000

51:57.150 --> 51:59.150
没法访问 咱们来看一下

51:59.150 --> 52:01.150
field

52:01.150 --> 52:03.150
我看一下哪里出了问题

52:03.150 --> 52:05.150
我这个重新强制刷新了

52:05.150 --> 52:07.150
我这个重新强制刷新了

52:07.150 --> 52:09.150
怎么会没法访问呢

52:09.150 --> 52:11.150
我看一下哪里写错了

52:11.150 --> 52:14.460
我刚才想的是

52:14.460 --> 52:16.460
消息头不对

52:16.460 --> 52:18.460
但是这个地方也跟消息头没关系

52:18.460 --> 52:20.460
至少不应该出现这种东西

52:20.460 --> 52:24.350
不应该出现这种东西

52:24.350 --> 52:26.350
不应该出现这种东西

52:26.350 --> 52:28.350
get

52:28.350 --> 52:30.350
get请求

52:30.350 --> 52:32.350
一样的get请求都没问题

52:32.350 --> 52:34.350
get请求都没问题

52:36.350 --> 52:40.350
咱们这里出了什么问题呢

52:40.350 --> 52:44.750
浏览器就不行

52:49.660 --> 52:51.660
这个有点神奇

52:51.660 --> 52:53.660
right info

52:53.660 --> 53:01.070
我们

53:01.070 --> 53:03.070
把页面重新设置一下

53:03.070 --> 53:05.070
把这个东西去掉

53:05.070 --> 53:07.070
去掉

53:07.070 --> 53:09.070
跟这个应该没有什么关系

53:09.070 --> 53:11.070
跟这个应该没有什么关系

53:11.070 --> 53:13.070
跟这个应该没有什么关系

53:13.070 --> 53:15.070
现在是根本就得不到

53:15.070 --> 53:17.070
这个神奇了

53:17.070 --> 53:19.070
我想想

53:19.070 --> 53:21.070
这有可能是什么造成的

53:21.070 --> 53:23.070
我在网络监控里面

53:23.070 --> 53:25.070
也看不到这个请求发生了

53:25.070 --> 53:27.070
我在网络监控里面

53:27.070 --> 53:29.070
也看不到这个请求发生了

53:29.070 --> 53:32.580
是怎么回事

53:32.580 --> 53:34.580
localhost

53:34.580 --> 53:36.580
6000

53:36.580 --> 53:38.580
现在我要这样来了

53:38.580 --> 53:40.580
打断点

53:40.580 --> 53:42.580
停止

53:42.580 --> 53:44.580
我们在这里

53:44.580 --> 53:46.580
vscode里面启动

53:46.580 --> 53:48.580
localhost

53:48.580 --> 53:50.580
然后

53:50.580 --> 53:52.580
刷新

53:52.580 --> 53:54.580
它没有到断点

53:54.580 --> 53:56.580
断点都没有运行

53:56.580 --> 53:58.580
这边send

53:58.580 --> 54:00.580
这边可以到断点

54:00.580 --> 54:02.580
posedman是可以正常运行的

54:02.580 --> 54:04.580
但是用页面是没法正常运行的

54:04.580 --> 54:06.580
断点根本就不到

54:06.580 --> 54:08.580
刷新

54:08.580 --> 54:10.580
那有一种可能就是

54:10.580 --> 54:12.580
我之前用过这个6000端口

54:12.580 --> 54:14.580
那个6000端口

54:14.580 --> 54:16.580
我做了一个重定箱

54:16.580 --> 54:18.580
导致了浏览器记住了这一次重定箱

54:18.580 --> 54:20.580
那么后边

54:20.580 --> 54:22.580
它就不会会去访问我的服务器了

54:22.580 --> 54:24.580
这直接访问到重定箱之后的东西了

54:24.580 --> 54:26.580
那我们换一个6100

54:26.580 --> 54:28.580
换一个

54:28.580 --> 54:30.580
换一个端口

54:30.580 --> 54:32.580
有可能是这个造成的

54:32.580 --> 54:34.580
6100

54:34.580 --> 54:36.580
你说没上去换什么多安可

54:36.580 --> 54:38.580
那么是不是得到结果了

54:38.580 --> 54:40.580
咱们把静态资源改一下

54:40.580 --> 54:42.580
改动静态资源是不需要你重新服务器的

54:42.580 --> 54:44.580
为什么呢

54:44.580 --> 54:46.580
因为服务器的代码没变

54:46.580 --> 54:48.580
服务器运行的代码是不是没变

54:48.580 --> 54:50.580
它只是读取的文件变了

54:50.580 --> 54:52.580
文件随便变

54:52.580 --> 54:54.580
随便什么改都可以刷新

54:54.580 --> 54:56.580
是不是可以没问题

54:56.580 --> 54:58.580
你看这些都运行了

54:58.580 --> 55:00.580
这就是一个静态资源服务器

55:00.580 --> 55:02.580
它的做法

55:02.580 --> 55:04.580
是不是特别简单

55:04.580 --> 55:06.580
代行代码就写完了

55:06.580 --> 55:08.580
它就是把某一个文念夹里边的资源

55:08.580 --> 55:10.580
把我们的请求路径

55:10.580 --> 55:12.580
印刷到某一个文念夹

55:12.580 --> 55:14.580
那如果说我去请求一个不存在的路径

55:14.580 --> 55:16.580
是不是404

55:16.580 --> 55:18.580
你看这些东西都可以得到

55:18.580 --> 55:20.580
包括我们去请求什么

55:20.580 --> 55:22.580
请求script

55:22.580 --> 55:24.580
in这个设计要解释

55:24.580 --> 55:26.580
in这个设计

55:26.580 --> 55:28.580
不是

55:28.580 --> 55:30.580
A点解释

55:30.580 --> 55:32.580
A点解释也不是

55:32.580 --> 55:38.640
没有加s

55:38.640 --> 55:40.640
你看是拿到建设结果

55:40.640 --> 55:42.640
包括什么CSS

55:42.640 --> 55:44.640
in这个设计

55:44.640 --> 55:46.640
CSS

55:46.640 --> 55:48.640
是拿到这个结果

55:48.640 --> 55:52.640
这些都是属于静态资源服务器的那种

55:52.640 --> 55:54.640
好了

55:54.640 --> 55:56.640
大家就把练一下熟悉一下ATTP模块

55:56.640 --> 55:58.640
如何来获取请求的信息

55:58.640 --> 56:00.640
如何来给它一个响应信息

56:00.640 --> 56:02.640
就是搭建服务器

56:02.640 --> 56:04.640
以前因为ATTP模块

56:04.640 --> 56:06.640
所以现在就先去发送一个请求

56:06.640 --> 56:08.640
这些都需要练一下

56:08.640 --> 56:10.640
好吧

