WEBVTT

00:01.200 --> 00:09.200
本来今天我都录了一部分后面这一张的两节课了

00:09.200 --> 00:12.700
录了过后发现不行 我又把它删了

00:12.700 --> 00:16.200
因为我发现有一个知识 我必须得先讲

00:16.200 --> 00:18.200
就是这个moment这个知识

00:18.200 --> 00:22.700
倒不是这个库有多么重要 关键是这个时间

00:22.700 --> 00:25.700
就是咱们对时间的处理系统里边

00:25.700 --> 00:29.200
这个点需要大家特别特别注意

00:29.200 --> 00:33.200
讲moment库它其实就是为了处理时间方便一点

00:33.200 --> 00:37.200
这个没啥 关键时间这个概念大家一定要清楚

00:37.200 --> 00:39.200
这里我们先说一个概念

00:39.200 --> 00:43.200
因为我不太确定你们之前有没有把这个时间搞清楚

00:43.200 --> 00:47.200
我这里干脆录几个说一下吧 不然的话这个以后

00:47.200 --> 00:51.200
如果说你去搭一个路的街市服务器遇到时间处理的话

00:51.200 --> 00:54.200
如果说你不知道这一概念的话可能要出大问题的

00:54.200 --> 00:58.200
好 是关于这个首先说我还关一个概念叫UTC和北京时间

00:58.200 --> 01:01.200
比如说本地时间 对吧 我们毕竟是中国嘛

01:01.200 --> 01:03.200
都用的是北京时间 我们把它叫做本地时间

01:03.200 --> 01:08.200
当然如果说你在什么日本啊 还有什么的 美国啊

01:08.200 --> 01:11.200
那么他们有他们的本地时间 就是时趋是不一样的

01:11.200 --> 01:15.200
时趋这个概念我不再多说了 每个同学都知道

01:15.200 --> 01:17.200
关键说是UTC和本地时间

01:17.200 --> 01:20.200
是这样子 UTC那叫做世界协调时

01:20.200 --> 01:24.200
它的标准是以英国革命为制的时间为标准的

01:25.200 --> 01:29.200
比方说我们说UTC时间2010年1月1号

01:29.200 --> 01:35.200
它指的是隔离为制 就是本处植物线 对吧

01:35.200 --> 01:39.200
一个大笨中 对不对 本处植物线经过了那一条时间

01:39.200 --> 01:43.200
是2010年1月1号凌晨 指的是这么一个意思

01:43.200 --> 01:45.200
不是指的本地时间啊

01:45.200 --> 01:48.200
那么这个UTC呢 如果说

01:48.200 --> 01:50.200
但是有的时候我们说现在

01:50.200 --> 01:54.200
现在这个时间呢 现在呢 我的现在

01:54.200 --> 01:58.200
跟那个在英国的革命为制的现在都是一样的 对吧

01:58.200 --> 02:01.200
但是他们的时间体现的是不一样的

02:01.200 --> 02:05.200
因为UTC时间跟北京时间是相差8个小时的

02:05.200 --> 02:08.200
比方说吧 比方说我们北京时间

02:08.200 --> 02:10.200
嗯 我举个例子啊

02:10.200 --> 02:14.200
比方说我们北京时间是那个

02:14.200 --> 02:18.200
目前是多少呢 2020年

02:18.200 --> 02:22.200
4月14号

02:22.200 --> 02:25.200
16点34分

02:25.200 --> 02:27.200
这是我们北京时间

02:27.200 --> 02:29.200
那么目前我们是这个时间啊

02:29.200 --> 02:31.200
那我说现在指的是什么呢

02:31.200 --> 02:35.200
对于北京而言 对于我们中国而言指的是这个时间

02:35.200 --> 02:37.200
但是同样的时间都是现在

02:37.200 --> 02:39.200
英国说的也是现在 对吧

02:39.200 --> 02:41.200
我们这个现在跟那个英国的现在是一样的

02:41.200 --> 02:44.200
对吧 都是同一个时刻嘛 对不对

02:44.200 --> 02:46.200
那么在英国的革命为制呢

02:46.200 --> 02:50.200
UTC时间呢 现在都是同一个时刻啊

02:50.200 --> 02:55.200
那么它的时间是2020年4月14号

02:55.200 --> 02:58.200
然后呢 三五八点钟

02:58.200 --> 03:00.200
34分 原来意思吧

03:00.200 --> 03:01.200
他们都是同一个时刻

03:01.200 --> 03:04.200
但是在不同的地方表现出来的时间

03:04.200 --> 03:07.200
就是显示出来的时间是不一样的

03:07.200 --> 03:09.200
懂这个意思吧

03:09.200 --> 03:13.200
所以说呢 因为这个显示的是有差异的

03:13.200 --> 03:16.200
对不对 是显示的是有差异的

03:16.200 --> 03:18.200
那么这个UTC凝成

03:18.200 --> 03:20.200
相当于是北京时间的三五八点 对不对

03:20.200 --> 03:22.200
那么就是UTC和北京时间

03:22.200 --> 03:23.200
大家要了解清楚啊

03:23.200 --> 03:25.200
那么由于它显示的是有差异

03:25.200 --> 03:28.200
那如何来准确的表达现在这个词呢

03:28.200 --> 03:31.200
就是说他们没如何来消除这个差异呢

03:31.200 --> 03:33.200
就是时间戳

03:33.200 --> 03:35.200
时间戳就统一到UTC了

03:35.200 --> 03:38.200
我就不管了 统一到UTC了

03:38.200 --> 03:40.200
那么某一个UTC时间

03:40.200 --> 03:43.200
UTC时间的1970年1月1号凌晨

03:43.200 --> 03:46.200
经过了毫秒数 就叫时间戳

03:46.200 --> 03:48.200
有的时间戳呢 也用秒

03:48.200 --> 03:51.200
毫秒呢 用小数点 后面表示毫秒

03:51.200 --> 03:54.200
但是呢 我们通常都是用的毫秒数

03:54.200 --> 03:56.200
时间 一定要注意啊

03:56.200 --> 03:59.200
时间戳指的是叫TimeStamp

03:59.200 --> 04:00.200
Stamp

04:00.200 --> 04:03.200
它叫做 它指的是UTC时间的差异

04:03.200 --> 04:05.200
好 咱们再来看

04:05.200 --> 04:08.200
比方说现在呢 我穿越了

04:08.200 --> 04:12.200
我穿越到哪呢 我穿越到那个1970年

04:12.200 --> 04:18.510
1970年1月1号凌晨

04:18.510 --> 04:21.510
北京时间1970年1月1号凌晨

04:21.510 --> 04:23.510
好 那么这个时候呢

04:23.510 --> 04:26.510
到这个时候 我说现在

04:26.510 --> 04:28.510
指的是什么呢 指的是19

04:28.510 --> 04:31.510
北京时间的1970年1月1号凌晨

04:31.510 --> 04:34.510
那么同样的时刻UTC时间是多久呢

04:34.510 --> 04:38.510
UTC时间是1969年

04:39.510 --> 04:42.510
12月31号

04:42.510 --> 04:47.510
对吧 然后呢 22点0分

04:47.510 --> 04:49.510
是这么个意思 对不对 那是不是

04:49.510 --> 04:51.510
显示出来有差异

04:51.510 --> 04:54.510
但是如果说 我们把它转换成时间戳

04:54.510 --> 04:57.510
就完全没有差异了 为什么呢 你看啊

04:57.510 --> 04:59.510
我说现在1970年1月1号

04:59.510 --> 05:00.510
这两个是一个时间啊

05:00.510 --> 05:01.510
首先这两个是一个时间

05:01.510 --> 05:03.510
不是说不同的时间啊

05:03.510 --> 05:05.510
是一个时间 都是在同一个时刻

05:05.510 --> 05:07.510
只不过呢 他们显示出来是不一样的

05:07.510 --> 05:10.510
显示出来的时间是不一样的 根据时区

05:10.510 --> 05:11.510
但是呢 我们要把统一

05:11.510 --> 05:13.510
统一怎么统一呢 就用时间戳

05:13.510 --> 05:15.510
北京时间呢 我们是这个点 对吧

05:15.510 --> 05:18.510
但是他同时 就这个北京的这个点时间

05:18.510 --> 05:21.510
那么刚好是UTC的这个点时间

05:21.510 --> 05:25.510
换句话说 UTC的1970年

05:25.510 --> 05:28.510
1月1号凌晨

05:28.510 --> 05:30.510
那么变成北京时间是多久呢

05:30.510 --> 05:33.510
变成北京时间就是1970年1月1号

05:33.510 --> 05:35.510
358点

05:36.510 --> 05:39.510
那么这两个时间是不是同一个时刻

05:39.510 --> 05:41.510
是完全同一个时刻啊

05:41.510 --> 05:43.510
呼吸的同一个空气

05:43.510 --> 05:45.510
那么现在呢 我们把它转换

05:45.510 --> 05:47.510
你看这两个表现形式 虽然是同一个时刻

05:47.510 --> 05:49.510
但表现出来是不一样的 对不对

05:49.510 --> 05:51.510
那么我们把它转换成统一的格式

05:51.510 --> 05:52.510
就用时间戳

05:52.510 --> 05:54.510
时间戳 北京时间的1970年1月1号

05:54.510 --> 05:56.510
8点 时间戳是多久呢

05:56.510 --> 05:58.510
零

05:58.510 --> 06:02.510
它不是8×64×64×1000 不是的

06:02.510 --> 06:04.510
是零

06:05.510 --> 06:07.510
因为我们说的时间戳

06:07.510 --> 06:10.510
一定是指的UTC时间的时间戳

06:10.510 --> 06:13.510
也就是说我要把这个东西换算成UTC时间

06:13.510 --> 06:15.510
换成这个时间 然后再来算时间戳

06:15.510 --> 06:18.510
时间戳就到UTC时间的1970年1月1号

06:18.510 --> 06:19.510
那么给也是零

06:19.510 --> 06:21.510
UTC时间这个时间点

06:21.510 --> 06:22.510
那么换成时间戳也是零

06:22.510 --> 06:24.510
所以说时间戳就可以用一个

06:24.510 --> 06:26.510
非常非常统一的方式

06:26.510 --> 06:28.510
来表达一个时刻

06:28.510 --> 06:30.510
全世界没有任何差异

06:30.510 --> 06:31.510
只要是同一个时刻

06:31.510 --> 06:33.510
时间戳就完全一样

06:33.510 --> 06:34.510
没了意思吧

06:34.510 --> 06:36.510
时间戳是一个非常好的表达方式

06:36.510 --> 06:39.510
表示UTC 两个UTC时间的

06:39.510 --> 06:41.510
之间的好描述

06:41.510 --> 06:43.510
它根本地时间没有任何关系

06:43.510 --> 06:46.510
好 这是那个时间戳

06:46.510 --> 06:48.510
然后我们了解这个概念有什么意义呢

06:48.510 --> 06:50.510
就是

06:50.510 --> 06:51.510
我这么多了一个

06:51.510 --> 06:52.510
聊聊概念有什么意义呢

06:52.510 --> 06:54.510
就是关于对服务器

06:54.510 --> 06:55.510
就是我们写开发的时候

06:55.510 --> 06:58.510
它的一些影响

06:58.510 --> 06:59.510
我们在服务器

06:59.510 --> 07:00.510
因为我们服务器

07:00.510 --> 07:01.510
我们写的代码会部署

07:01.510 --> 07:02.510
部署到服务器上

07:02.510 --> 07:03.510
对吧

07:03.510 --> 07:04.510
那么我就不太清楚

07:04.510 --> 07:06.510
这个服务器它到底在哪

07:06.510 --> 07:08.510
有可能部署到国外的服务器

07:08.510 --> 07:10.510
有可能部署到国内的服务器

07:10.510 --> 07:12.510
那么有可能服务器的系统

07:12.510 --> 07:14.510
它不是时趋

07:14.510 --> 07:15.510
它可能是设置的别

07:15.510 --> 07:16.510
就算是在国内

07:16.510 --> 07:18.510
可能时趋设置的是别的时趋

07:18.510 --> 07:19.510
这不太一样

07:19.510 --> 07:22.510
为了避免麻烦和混乱

07:22.510 --> 07:23.510
我们服务器

07:23.510 --> 07:26.510
一定要统一使用UTC时间

07:26.510 --> 07:27.510
或者是时间戳

07:27.510 --> 07:28.510
时间戳是完全统一的

07:28.510 --> 07:30.510
UTC时间其实也是统一的

07:30.510 --> 07:31.510
实际上任何一个地方

07:31.510 --> 07:33.510
换成UTC时间

07:33.510 --> 07:34.510
那么我们就可以表示

07:34.510 --> 07:35.510
是不是同一个时刻

07:35.510 --> 07:36.510
那么比较说

07:36.510 --> 07:37.510
咱们北京时间

07:37.510 --> 07:39.510
1970年1月1号8点

07:39.510 --> 07:40.510
换成UTC时间

07:40.510 --> 07:41.510
是不是零点

07:41.510 --> 07:42.510
对不对

07:42.510 --> 07:43.510
美国

07:43.510 --> 07:45.510
美国时间

07:45.510 --> 07:47.510
美国时间

07:47.510 --> 07:49.510
1970年

07:49.510 --> 07:50.510
美国时间是哪个区

07:50.510 --> 07:51.510
我真不知道

07:51.510 --> 07:53.510
我查一下

07:53.510 --> 07:56.510
美国时趋

07:56.510 --> 07:59.510
中国的时差

08:00.510 --> 08:03.510
中国比美国快10个小时

08:03.510 --> 08:04.510
对不对

08:04.510 --> 08:05.510
14号

08:05.510 --> 08:08.510
中国

08:08.510 --> 08:10.510
比它快12个小时

08:10.510 --> 08:11.510
对吧

08:11.510 --> 08:13.510
中国比它快10个小时

08:13.510 --> 08:15.510
要减去12是这个意思吧

08:15.510 --> 08:17.510
是不是要减去12

08:17.510 --> 08:19.510
减去12

08:19.510 --> 08:20.510
这个减12是不是

08:20.510 --> 08:22.510
1969年了

08:22.510 --> 08:24.510
1969年

08:24.510 --> 08:26.510
12月31号

08:26.510 --> 08:29.510
然后呢

08:29.510 --> 08:31.510
减4是多少

08:31.510 --> 08:33.510
减4

08:33.510 --> 08:34.510
24

08:34.510 --> 08:37.510
20点

08:37.510 --> 08:39.510
0分0秒

08:39.510 --> 08:40.510
那么这3个是同一个时刻

08:40.510 --> 08:41.510
知道了

08:41.510 --> 08:42.510
这3个是同一个时刻

08:42.510 --> 08:43.510
时间错都是0

08:43.510 --> 08:45.510
他们是同一个时刻

08:45.510 --> 08:47.510
时间错

08:47.510 --> 08:51.590
为什么都是0

08:51.590 --> 08:53.590
这时间错都是0

08:53.590 --> 08:54.590
他们是同一个时刻

08:54.590 --> 08:56.590
但是它表现出来的时间不一样

08:56.590 --> 08:57.590
那么怎么办呢

08:57.590 --> 08:58.590
有两种方式

08:58.590 --> 08:59.590
第一种方式

08:59.590 --> 09:00.590
都是用那个服务器

09:00.590 --> 09:02.590
都统一用时间出来表达

09:02.590 --> 09:03.590
第二种方式呢

09:03.590 --> 09:05.590
你管理是什么本地时间

09:05.590 --> 09:07.590
我一定给你换算成UTC时间

09:07.590 --> 09:10.590
换算成UTC时间

09:10.590 --> 09:12.590
那么你看美国时间换算成UTC时间

09:12.590 --> 09:13.590
也是这个

09:13.590 --> 09:14.590
UTC时间

09:14.590 --> 09:16.590
当然换算成UTC也是这个

09:16.590 --> 09:17.590
所以这几个都是

09:17.590 --> 09:18.590
可以用统一的表达

09:18.590 --> 09:19.590
方式来表达的

09:19.590 --> 09:20.590
对吧

09:20.590 --> 09:21.590
所以我们服务器

09:21.590 --> 09:22.590
无论如何

09:22.590 --> 09:23.590
你不能用本地时间

09:23.590 --> 09:24.590
我发现了

09:24.590 --> 09:26.590
很多中小兴趣

09:26.590 --> 09:28.590
这有点特别特别不注意

09:28.590 --> 09:30.590
可能一些非常麻烦的问题

09:30.590 --> 09:33.590
服务器一定要用统一的时间

09:33.590 --> 09:37.590
UTC时间和时间错都是统一的

09:37.590 --> 09:39.590
这是第一个点

09:39.590 --> 09:41.590
然后包括那个数据库

09:41.590 --> 09:43.590
数据库里边要存时间

09:43.590 --> 09:44.590
要存时间的时候

09:44.590 --> 09:46.590
也是要么存UTC

09:46.590 --> 09:48.590
要么存时间错

09:48.590 --> 09:50.590
你不要去存本地时间

09:50.590 --> 09:51.590
你看我们的数据库里边

09:51.590 --> 09:53.590
之前咱们这个库

09:53.590 --> 09:55.590
这个不可使这个库

09:55.590 --> 09:56.590
你看这两个

09:56.590 --> 09:57.590
这两列

09:57.590 --> 09:59.590
这两列是不是那个

09:59.590 --> 10:01.590
Secretize给你自己搞的

10:01.590 --> 10:02.590
对不对

10:02.590 --> 10:03.590
给自己添加的时间

10:03.590 --> 10:05.590
他添加时间就是那个

10:05.590 --> 10:07.590
UTC时间

10:07.590 --> 10:09.590
他添加的就是UTC时间

10:09.590 --> 10:11.590
那么你看一下这里

10:11.590 --> 10:13.590
添加的

10:13.590 --> 10:15.590
添加的就是UTC时间

10:15.590 --> 10:17.590
你看我不可能凌乘5点来

10:17.590 --> 10:19.590
凌乘5点加的吧

10:19.590 --> 10:21.590
这是昨天下午

10:21.590 --> 10:23.590
昨天下午多少呢

10:23.590 --> 10:24.590
昨天下午那个13点

10:24.590 --> 10:25.590
就是1点过

10:25.590 --> 10:27.590
1点过我做了

10:27.590 --> 10:29.590
做了这么一个例子

10:29.590 --> 10:30.590
对不对

10:30.590 --> 10:31.590
数据抓取

10:31.590 --> 10:33.590
那么他这里显示的是凌乘5点

10:33.590 --> 10:35.590
是不是存的是UTC时间

10:35.590 --> 10:36.590
要保持统一

10:36.590 --> 10:38.590
当然有一些

10:38.590 --> 10:39.590
像有一些数据就无所谓了

10:39.590 --> 10:40.590
比方说Pub的一些代程

10:40.590 --> 10:41.590
它根本就无视时间

10:41.590 --> 10:43.590
它就是一个字无创

10:43.590 --> 10:44.590
我们之前看到过了

10:44.590 --> 10:45.590
是一个字无创

10:45.590 --> 10:47.590
所以这个地方无所谓的

10:47.590 --> 10:49.590
就这样把你是时间的话

10:49.590 --> 10:51.590
那么你一定是UTC时间

10:51.590 --> 10:52.590
要么就是时间错

10:52.590 --> 10:53.590
数据库也是一样

10:53.590 --> 10:55.590
这样子能保持完全的统一

10:55.590 --> 10:56.590
服务器

10:56.590 --> 10:58.590
无论数据库还是服务器

10:58.590 --> 10:59.590
都是用UTC时间

10:59.590 --> 11:01.590
那么客户端这边怎么办

11:01.590 --> 11:03.590
因为客户端是给用户看的

11:03.590 --> 11:04.590
给用户看的

11:04.590 --> 11:05.590
你不能给它看时间错

11:05.590 --> 11:06.590
也不能给它看UTC

11:06.590 --> 11:07.590
这个东西

11:07.590 --> 11:08.590
特别像国内用户

11:08.590 --> 11:09.590
咱们做的很多软件啊

11:09.590 --> 11:11.590
系统都是给国内用户用的

11:11.590 --> 11:13.590
你不能给它看这个玩意

11:13.590 --> 11:14.590
哪怕你给美国用户看

11:14.590 --> 11:16.590
也不能去看UTC时间

11:16.590 --> 11:17.590
它要封掉了

11:17.590 --> 11:18.590
因此怎么办

11:18.590 --> 11:19.590
对客户端来说

11:19.590 --> 11:22.590
客户端从服务器拿到的是

11:22.590 --> 11:23.590
UTC时间

11:23.590 --> 11:24.590
或者是时间错

11:24.590 --> 11:25.590
那么它自行搞定

11:25.590 --> 11:28.590
客户端根据不同的地区的客户

11:28.590 --> 11:30.590
友好的显示时间

11:30.590 --> 11:36.100
友好的显示时间

11:36.100 --> 11:38.100
那么客户端应该把时间错

11:38.100 --> 11:39.100
或者是UTC时间

11:39.100 --> 11:41.100
转换成本地时间显示

11:41.100 --> 11:43.100
我这里给大家看一个图

11:43.100 --> 11:44.100
一个图地

11:44.100 --> 11:45.100
咱们在这个也可以给大家发下来

11:45.100 --> 11:47.100
应该就是这种模式

11:47.100 --> 11:49.100
就是客户端跟服务器

11:49.100 --> 11:50.100
时间传输时间的时候

11:50.100 --> 11:52.100
反而是跟时间相关的制度

11:52.100 --> 11:54.100
一定是传输UTC和时间错

11:54.100 --> 11:56.100
你传辑到服务器绝对不能认

11:56.100 --> 11:58.100
你传个时间过来服务器

11:58.100 --> 12:00.100
就认为你一定是UTC

12:00.100 --> 12:01.100
我就做好这个约定

12:01.100 --> 12:02.100
这个是需要约定的

12:02.100 --> 12:04.100
那么一般的接客文档里边

12:04.100 --> 12:05.100
都会给你说明

12:05.100 --> 12:07.100
一定要传UTC时间

12:07.100 --> 12:08.100
或者是时间错

12:08.100 --> 12:09.100
或者是两个都可以

12:09.100 --> 12:10.100
总之要统一

12:10.100 --> 12:11.100
这两个都是统一的

12:11.100 --> 12:12.100
对不对

12:12.100 --> 12:13.100
客户端本地

12:13.100 --> 12:14.100
服务器比方说服务器

12:14.100 --> 12:16.100
给客户端传输的时候也是一样

12:16.100 --> 12:17.100
服务器给客户端传输的时候

12:17.100 --> 12:18.100
要么就时间错

12:18.100 --> 12:20.100
要么就是UTC

12:20.100 --> 12:23.100
然后客户端根据这两个东西

12:23.100 --> 12:24.100
然后在本地

12:24.100 --> 12:26.100
把它转换成本地时间

12:26.100 --> 12:28.100
然后给客户用户显示出来

12:28.100 --> 12:30.100
以一个油耗的方式给用户显示出来

12:30.100 --> 12:32.100
是这么一种逻辑

12:32.100 --> 12:33.100
它是这么一种逻辑

12:33.100 --> 12:35.100
明白这个意思吧

12:35.100 --> 12:37.100
然后数据库这里也是一样

12:37.100 --> 12:39.100
服务器这边要往数据库里边存东西

12:39.100 --> 12:40.100
或者从数据库里边读

12:40.100 --> 12:41.100
那么双方交互的

12:41.100 --> 12:42.100
要么就是时间错

12:42.100 --> 12:43.100
要么就是UTC

12:43.100 --> 12:44.100
所以说将来你们

12:44.100 --> 12:45.100
可能在公司里面看到

12:45.100 --> 12:46.100
某一些数据库

12:46.100 --> 12:47.100
它里边

12:47.100 --> 12:49.100
时间那一部分用的是一个int

12:49.100 --> 12:51.100
或者是用的是一个big int

12:51.100 --> 12:53.100
存一个大的整数

12:53.100 --> 12:54.100
那就是一个时间错

12:54.100 --> 12:55.100
这个意思吧

12:55.100 --> 12:56.100
它就是用

12:56.100 --> 12:58.100
我们这里是用的是UTC

12:58.100 --> 12:59.100
都行

12:59.100 --> 13:00.100
反正这两个东西都行

13:00.100 --> 13:01.100
只要是统一的就行

13:01.100 --> 13:03.100
统一的就没有麻烦

13:03.100 --> 13:04.100
说服务器这一块

13:04.100 --> 13:05.100
数据库里的这一块

13:05.100 --> 13:07.100
是接触不到本地时间的

13:07.100 --> 13:08.100
接触不到的

13:08.100 --> 13:09.100
你不用去考虑本地时间

13:09.100 --> 13:11.100
本地时间就在页面上

13:11.100 --> 13:12.100
什么手机APP上

13:12.100 --> 13:14.100
然后可以用户散射那一刻

13:14.100 --> 13:15.100
我们要考虑进来

13:15.100 --> 13:17.100
或者是用户在文闷框里边填

13:17.100 --> 13:18.100
填的是本地时间

13:18.100 --> 13:19.100
然后发送到服务器

13:19.100 --> 13:21.100
我要把它转换成UTC

13:21.100 --> 13:22.100
转换成时间错

13:22.100 --> 13:23.100
然后发送到服务器

13:23.100 --> 13:25.100
一定要搞清楚这一点

13:25.100 --> 13:28.100
这是这么一个基本常识

13:30.100 --> 13:32.100
然后我这里说一下

13:32.100 --> 13:33.100
然后再来说这个文闷框

13:33.100 --> 13:34.100
这个库

13:34.100 --> 13:37.100
它对于本地时间

13:37.100 --> 13:39.100
和UTC时间的转换

13:39.100 --> 13:40.100
哪个地方要转换

13:40.100 --> 13:41.100
就是客户端要转换

13:41.100 --> 13:42.100
其他地方也不会转换

13:42.100 --> 13:43.100
服务器可转换啥

13:43.100 --> 13:45.100
服务器就拿到的就是UTC的

13:45.100 --> 13:46.100
它也不用转换

13:46.100 --> 13:47.100
客户端这边会转换

13:47.100 --> 13:49.100
那么这个库它首先是

13:49.100 --> 13:53.100
跟客户端和服务器无关的

13:53.100 --> 13:54.100
它服务器可以用

13:54.100 --> 13:55.100
客户端也可以用

13:55.100 --> 13:56.100
浏览器端也可以用

13:56.100 --> 13:57.100
服务器也可以用

13:57.100 --> 13:58.100
所以说它这个东西

14:00.100 --> 14:02.100
这些是什么玩意

14:02.100 --> 14:05.100
这个库是比较的好用的

14:05.100 --> 14:08.100
它可以在UTC或者是时间戳

14:08.100 --> 14:09.100
和本地时间

14:09.100 --> 14:11.100
以及和服务器时间之间

14:11.100 --> 14:12.100
进行转换

14:12.100 --> 14:14.100
而且它可以用一个

14:14.100 --> 14:15.100
非常友好的格式

14:15.100 --> 14:16.100
把时间展现出来

14:16.100 --> 14:17.100
这个库都很好用的

14:17.100 --> 14:18.100
那么它有个官网

14:18.100 --> 14:19.100
有一个民间中文网

14:19.100 --> 14:20.100
我们直接看

14:20.100 --> 14:21.100
民间中文网就行了

14:21.100 --> 14:22.100
这个中文网还是翻译的

14:22.100 --> 14:23.100
很不错的

14:23.100 --> 14:24.100
我们再看这个网站

14:24.100 --> 14:26.100
其实我个人看网站

14:26.100 --> 14:28.100
就是看文档的时候

14:28.100 --> 14:30.100
我还是先看的是中文网

14:30.100 --> 14:32.100
谁愿意去看那个英文的

14:32.100 --> 14:33.100
毕竟我虽然能读

14:33.100 --> 14:34.100
但是读的速度

14:34.100 --> 14:35.100
肯定是没有中文文档

14:35.100 --> 14:36.100
读得快

14:36.100 --> 14:38.100
所以说能够读有中文的话

14:38.100 --> 14:40.100
我们还是尽量看中文

14:40.100 --> 14:42.100
看中文的时候

14:42.100 --> 14:44.100
如果说我发现了

14:44.100 --> 14:46.100
它的文档有些翻译的

14:46.100 --> 14:47.100
有些不同的地方

14:47.100 --> 14:49.100
让我去对照一下英文

14:49.100 --> 14:50.100
如果说这种东西太多了

14:50.100 --> 14:51.100
翻译的错误太多了

14:51.100 --> 14:52.100
那我只能去看英文了

14:52.100 --> 14:54.100
我怕出现问题

14:54.100 --> 14:56.100
给大家讲错了

14:56.100 --> 14:58.100
这里是中文网

14:58.100 --> 14:59.100
我看一下这个网站

14:59.100 --> 15:00.100
还是翻译不错的

15:00.100 --> 15:02.100
因为我这里边都有

15:02.100 --> 15:03.100
每一个点

15:03.100 --> 15:04.100
它都有中英对照的

15:04.100 --> 15:05.100
可以看到它翻译的

15:05.100 --> 15:06.100
还是可以的

15:06.100 --> 15:07.100
那么这个网站

15:07.100 --> 15:08.100
我们看一下

15:08.100 --> 15:09.100
movement了解是怎么来用

15:09.100 --> 15:11.100
我也不确定你们以前学过没有

15:11.100 --> 15:13.100
首先是安装

15:13.100 --> 15:14.100
安装

15:14.100 --> 15:17.100
安装就是MPMI moment

15:17.100 --> 15:19.100
安装这个库

15:19.100 --> 15:20.100
我这个一个个说吧

15:20.100 --> 15:22.100
虽然说我用的是服务器

15:22.100 --> 15:24.100
但是我把这个删除掉

15:24.100 --> 15:25.100
虽然说用的是服务器

15:25.100 --> 15:26.100
但是在客户端用的

15:26.100 --> 15:27.100
用法是完全一样的

15:27.100 --> 15:30.100
它不区分环境的

15:30.100 --> 15:32.100
它里边就是一些存出的计算

15:32.100 --> 15:34.100
来帮你转换时间

15:34.100 --> 15:35.100
我们这里首先说

15:35.100 --> 15:36.100
movement这个库

15:36.100 --> 15:37.100
它首先要得到

15:37.100 --> 15:38.100
就是你要用的时候

15:38.100 --> 15:40.100
首先要得到一个movement对象

15:40.100 --> 15:42.100
怎么来得到movement对象呢

15:42.100 --> 15:43.100
很多种方式

15:43.100 --> 15:44.100
我们这里一个说

15:44.100 --> 15:45.100
首先导入这个库

15:45.100 --> 15:48.100
movement require

15:48.100 --> 15:50.100
movement对象

15:50.100 --> 15:51.100
那么怎么来用呢

15:51.100 --> 15:52.100
这个库

15:52.100 --> 15:53.100
首先就是一个movement

15:53.100 --> 15:54.100
它是一个函数

15:54.100 --> 15:55.100
直接如果说

15:55.100 --> 15:56.100
不传任何参数

15:56.100 --> 15:57.100
它得到的是什么呢

15:57.100 --> 15:58.100
得到的当前时间

15:58.100 --> 16:00.100
这个就得到当前时间

16:00.100 --> 16:02.100
当前时间

16:02.100 --> 16:03.100
好

16:03.100 --> 16:04.100
咱们来输出看一下吧

16:04.100 --> 16:05.100
看一下是个什么玩意儿

16:05.100 --> 16:06.100
当前时间

16:06.100 --> 16:07.100
得到的是一个什么呢

16:07.100 --> 16:09.100
得到最终的

16:09.100 --> 16:11.100
给力的就是一个movement对象

16:11.100 --> 16:12.100
有点像debt对象

16:12.100 --> 16:13.100
只不过它封装了

16:13.100 --> 16:15.100
封装成一个movement对象了

16:15.100 --> 16:16.100
这个movement对象里面

16:16.100 --> 16:18.100
就记录了当前时间

16:18.100 --> 16:20.100
那么我们这里输出一下

16:23.980 --> 16:24.980
输出

16:24.980 --> 16:25.980
movement

16:25.980 --> 16:26.980
它是一个很大的对象

16:26.980 --> 16:28.980
里面有很多的属性

16:28.980 --> 16:30.980
方法这些东西

16:30.980 --> 16:31.980
好

16:31.980 --> 16:33.980
这里我们看一下

16:33.980 --> 16:36.980
运行load index

16:36.980 --> 16:38.980
就是一个很大的对象

16:38.980 --> 16:39.980
对不对

16:39.980 --> 16:40.980
然后我们可以用toostune

16:40.980 --> 16:41.980
把它打印出来

16:41.980 --> 16:42.980
toostune

16:42.980 --> 16:47.190
把它变成一个制服串

16:47.190 --> 16:48.190
运行

16:48.190 --> 16:49.190
你看

16:49.190 --> 16:50.190
它告诉你现在是东巴区

16:50.190 --> 16:53.190
东巴区2020年4月

16:53.190 --> 16:54.190
14号

16:54.190 --> 16:56.190
今年星期二

16:56.190 --> 16:58.190
然后下午16点48分37秒

16:58.190 --> 17:00.190
它是不是用本地时间来打印出来的

17:00.190 --> 17:01.190
对不对

17:01.190 --> 17:02.190
本地时间来打印出来的

17:02.190 --> 17:03.190
没了意思吧

17:03.190 --> 17:04.190
好

17:04.190 --> 17:06.190
那么如何来用utc

17:06.190 --> 17:07.190
因为我们知道服务器

17:07.190 --> 17:08.190
肯定是要用utc时间的

17:08.190 --> 17:10.190
那么怎么来用utc时间

17:10.190 --> 17:11.190
打印的

17:11.190 --> 17:12.190
我们可以用这种方式

17:12.190 --> 17:14.190
这里

17:14.190 --> 17:15.190
复制一下

17:15.190 --> 17:17.190
这里我们点utc

17:17.190 --> 17:19.190
这是创建utc的当前时间

17:19.190 --> 17:21.190
那么问大家一个问题

17:21.190 --> 17:22.190
utc的当前时间

17:22.190 --> 17:24.190
跟这个本地的当前时间

17:24.190 --> 17:26.190
是不是同一个时刻

17:26.190 --> 17:28.190
是不是同一个时刻

17:28.190 --> 17:30.190
我问大家这个问题

17:30.190 --> 17:32.190
我要时间在这里绕云了

17:32.190 --> 17:33.190
是不是同一个时刻

17:33.190 --> 17:35.190
怎么可能不是同一个时刻呢

17:35.190 --> 17:36.190
对不对

17:36.190 --> 17:37.190
它肯定是同一个时刻

17:37.190 --> 17:38.190
所以说它们打印出来

17:38.190 --> 17:39.190
它们表示的时间

17:39.190 --> 17:40.190
是完全一样的

17:40.190 --> 17:41.190
你看没有

17:41.190 --> 17:42.190
打印出来

17:42.190 --> 17:44.190
这个是utc

17:44.190 --> 17:46.190
就是它显示出来不一样

17:46.190 --> 17:47.190
它是同一个时刻

17:47.190 --> 17:48.190
utc是不是少8个小时

17:48.190 --> 17:49.190
8个小时

17:49.190 --> 17:50.190
对吧

17:50.190 --> 17:51.190
是一样的

17:51.190 --> 17:52.190
我们为了印证这一点

17:52.190 --> 17:54.190
我们可以用这个

17:54.190 --> 17:57.190
得到时间戳

17:57.190 --> 17:59.190
当前时间戳

17:59.190 --> 18:02.190
时间戳

18:02.190 --> 18:03.190
怎么来得到当前时间戳呢

18:03.190 --> 18:05.190
我们可以用这个

18:05.190 --> 18:07.190
把这个注射掉

18:07.190 --> 18:09.190
我们这里可以用这个

18:09.190 --> 18:10.190
Value

18:10.190 --> 18:12.190
它里面重写了Value的方法

18:12.190 --> 18:13.190
大家知道Value的方法吧

18:13.190 --> 18:14.190
对吧

18:14.190 --> 18:15.190
就是一个对象

18:15.190 --> 18:16.190
它转数字的时候

18:16.190 --> 18:17.190
会调用Value的方法

18:17.190 --> 18:18.190
对不对

18:18.190 --> 18:19.190
那么我们看一下

18:19.190 --> 18:20.190
utc的Value

18:20.190 --> 18:21.190
和这个的Value

18:21.190 --> 18:22.190
是不是一样的

18:22.190 --> 18:23.190
它们是同一个时刻

18:23.190 --> 18:24.190
怎么可能不一样的

18:24.190 --> 18:25.190
它们一定是一样的

18:29.190 --> 18:31.190
这里多了几个毫秒

18:31.190 --> 18:32.190
我吓我一跳

18:32.190 --> 18:33.190
这是多了几个毫秒

18:33.190 --> 18:34.190
因为它的程序运行

18:34.190 --> 18:35.190
需要一点时间

18:35.190 --> 18:37.190
这句话运行了

18:37.190 --> 18:38.190
运行了多少毫秒

18:38.190 --> 18:39.190
运行了7毫秒

18:39.190 --> 18:40.190
运行了7毫秒

18:40.190 --> 18:41.190
这句话

18:41.190 --> 18:42.190
运行了7毫秒之后

18:42.190 --> 18:43.190
再来得到这个

18:43.190 --> 18:44.190
那就一样了

18:44.190 --> 18:46.190
那就是

18:46.190 --> 18:47.190
有点毫秒的差别

18:47.190 --> 18:49.190
但是实际上是同一个时刻

18:49.190 --> 18:50.190
没了意思吗

18:50.190 --> 18:51.190
它们是同一个时刻

18:51.190 --> 18:53.190
这是Value这个时间

18:53.190 --> 18:54.190
你要搞清楚

18:54.190 --> 18:55.190
虽然说我们得到的是本地当前

18:55.190 --> 18:56.190
你看本地当前时间

18:56.190 --> 18:57.190
跟utc的当前时间

18:57.190 --> 18:59.190
不就是同一个吗

18:59.190 --> 19:00.190
对不对

19:00.190 --> 19:02.190
这是得到当前时间

19:02.190 --> 19:03.190
得到当前时间

19:03.190 --> 19:04.190
这种方式

19:04.190 --> 19:05.190
本地的这种方式

19:05.190 --> 19:06.190
和utc的这种方式

19:06.190 --> 19:08.190
得到的结果

19:08.190 --> 19:09.190
记录的时间

19:09.190 --> 19:11.190
是完全一样的

19:11.190 --> 19:13.190
只不过你用utc的这种方式

19:13.190 --> 19:14.190
来得到时间

19:14.190 --> 19:15.190
对后续的

19:15.190 --> 19:16.190
它也得到的是一个

19:16.190 --> 19:17.190
我们谋判者对象

19:17.190 --> 19:18.190
只不过后续的操作

19:18.190 --> 19:20.190
全是根据utc来操作

19:20.190 --> 19:21.190
谋判者得到的时间

19:21.190 --> 19:22.190
后续的操作

19:22.190 --> 19:23.190
全是根据本地时间

19:23.190 --> 19:24.190
来操作

19:24.190 --> 19:25.190
你看这意思吧

19:25.190 --> 19:26.190
所以我们尽量的

19:26.190 --> 19:27.190
还是用utc这种方式

19:27.190 --> 19:28.190
来得到

19:28.190 --> 19:29.190
在服务器

19:29.190 --> 19:30.190
还是用这种方式

19:30.190 --> 19:31.190
来得到当前时间出

19:31.190 --> 19:33.190
就这么个意思

19:33.190 --> 19:36.190
这是得到当前时间出

19:36.190 --> 19:37.190
当前时间出的话

19:37.190 --> 19:38.190
还有一种邪法

19:38.190 --> 19:39.190
大家看一下

19:39.190 --> 19:40.190
还有一种邪法

19:40.190 --> 19:41.190
就是什么呢

19:41.190 --> 19:43.190
用加号moment

19:43.190 --> 19:45.190
这是这种邪法

19:45.190 --> 19:46.190
为什么呢

19:46.190 --> 19:47.190
大家想一想

19:47.190 --> 19:48.190
接是基础

19:48.190 --> 19:49.190
用加号

19:49.190 --> 19:50.190
是不是把它转换成数字

19:50.190 --> 19:51.190
对不对

19:51.190 --> 19:52.190
把它转换成数字

19:52.190 --> 19:53.190
而转换数字的时候

19:53.190 --> 19:54.190
是不是要调用by625

19:54.190 --> 19:55.190
对吧

19:55.190 --> 19:56.190
把by625的结果

19:56.190 --> 19:57.190
就是数字

19:57.190 --> 19:58.190
对不对

19:58.190 --> 19:59.190
所以说我们这里

19:59.190 --> 20:00.190
得到的结果

20:00.190 --> 20:01.190
是完全一样的

20:01.190 --> 20:02.190
是完全一样的

20:02.190 --> 20:03.190
看没

20:03.190 --> 20:04.190
是完全一样的

20:04.190 --> 20:05.190
这是

20:05.190 --> 20:06.190
这一块

20:07.190 --> 20:09.190
得到当前时间出

20:09.190 --> 20:11.190
当然我们服务器

20:11.190 --> 20:12.190
尽量用utc

20:12.190 --> 20:13.190
用utc

20:13.190 --> 20:14.190
得到都是moment对象

20:14.190 --> 20:15.190
后续的操作都是一样的

20:15.190 --> 20:16.190
就是一个是针对

20:16.190 --> 20:17.190
后续的所有操作

20:17.190 --> 20:18.190
都是针对utc的

20:18.190 --> 20:19.190
一个是

20:19.190 --> 20:20.190
所有的操作都是针对本地的

20:20.190 --> 20:22.190
比方说我们刚才突出运

20:22.190 --> 20:23.190
他得到看到的效果

20:23.190 --> 20:24.190
是本地的时间

20:24.190 --> 20:25.190
那么用utc过后

20:25.190 --> 20:26.190
也是moment

20:26.190 --> 20:27.190
同样的一个时刻

20:27.190 --> 20:28.190
大家看到的

20:28.190 --> 20:29.190
显示出来的结果

20:29.190 --> 20:31.190
是utc的那个显示方式

20:31.190 --> 20:32.190
这是

20:32.190 --> 20:33.190
这个时间出

20:33.190 --> 20:34.190
然后我们

20:34.190 --> 20:36.190
除了得到当前时间之外

20:36.190 --> 20:37.190
我们还可以得到

20:37.190 --> 20:39.190
就是根据

20:39.190 --> 20:41.190
你指定的一个时间

20:41.190 --> 20:42.190
来得到时间出

20:42.190 --> 20:43.190
那么这个时候

20:43.190 --> 20:44.190
就有差异了

20:44.190 --> 20:45.190
比方说

20:45.190 --> 20:49.190
根据指定的时间出

20:49.190 --> 20:50.190
得到时间

20:52.190 --> 20:54.190
根据指定的

20:54.190 --> 20:57.190
日期格式

20:57.190 --> 21:00.190
或者叫做时间格式

21:00.190 --> 21:01.190
得到时间

21:01.190 --> 21:02.190
那么这个时间格式

21:02.190 --> 21:03.190
有哪些东西呢

21:03.190 --> 21:04.190
时间格式

21:04.190 --> 21:05.190
有很多动鞋法

21:05.190 --> 21:07.190
有制服出来式的

21:07.190 --> 21:08.190
这种鞋法

21:08.190 --> 21:09.190
对吧

21:09.190 --> 21:10.190
还有什么呢

21:10.190 --> 21:11.190
这种鞋法

21:11.190 --> 21:13.190
有很多的对不对

21:13.190 --> 21:14.190
很多种鞋法

21:14.190 --> 21:15.190
还有

21:15.190 --> 21:17.190
当然还有小时分钟秒

21:17.190 --> 21:18.190
还有什么呢

21:18.190 --> 21:19.190
就刚才我们看到了这个

21:19.190 --> 21:20.190
这种鞋法

21:20.190 --> 21:21.190
这是iOS

21:21.190 --> 21:22.190
iOS去

21:22.190 --> 21:23.190
iOS标准

21:23.190 --> 21:24.190
对吧

21:24.190 --> 21:25.190
这也是一种鞋法

21:25.190 --> 21:26.190
有很多种鞋法

21:26.190 --> 21:27.190
当然还包括什么

21:27.190 --> 21:28.190
时间出的那种鞋法

21:28.190 --> 21:29.190
时间出

21:29.190 --> 21:30.190
它有很多种鞋法

21:30.190 --> 21:31.190
那么根据这些

21:31.190 --> 21:32.190
来得到时间

21:32.190 --> 21:33.190
那怎么来写呢

21:33.190 --> 21:34.190
我们输出

21:34.190 --> 21:36.190
这个时候就不一样了

21:36.190 --> 21:37.190
所以说大家尽量的

21:37.190 --> 21:38.190
在服务器

21:38.190 --> 21:39.190
不要尽量的

21:39.190 --> 21:40.190
我就要求你

21:40.190 --> 21:41.190
虽然公司里面

21:41.190 --> 21:42.190
要不要要求你

21:42.190 --> 21:43.190
公司可能不要求你

21:43.190 --> 21:45.190
那我要要求你

21:45.190 --> 21:47.190
用这种UTC

21:47.190 --> 21:49.190
服务器全部都同意用UTC

21:49.190 --> 21:50.190
就是通过

21:50.190 --> 21:51.190
要得到某个人的对象

21:51.190 --> 21:52.190
全部同意用UTC

21:52.190 --> 21:53.190
那么我们这里

21:53.190 --> 21:54.190
只用UTC

21:54.190 --> 21:56.190
我们先不用UTC

21:56.190 --> 21:57.190
试一下吧

21:57.190 --> 22:00.190
我们给一个时间戳0

22:00.190 --> 22:02.190
给一个时间戳

22:02.190 --> 22:04.190
我们给一个日期

22:04.190 --> 22:05.190
时间戳是一样的

22:05.190 --> 22:06.190
我们看一下先看时间戳

22:06.190 --> 22:08.190
先看时间戳

22:08.190 --> 22:09.190
然后txtune

22:09.190 --> 22:12.570
然后我们把这个

22:12.570 --> 22:13.570
再把这个打印出来

22:13.570 --> 22:14.570
moment0

22:14.570 --> 22:15.570
再把打印出来

22:15.570 --> 22:18.570
两个都打印出来

22:18.570 --> 22:20.570
然后我们再来

22:20.570 --> 22:21.570
这个

22:21.570 --> 22:23.570
再用momentUTC

22:23.570 --> 22:24.570
UTC

22:24.570 --> 22:27.570
这边用UTC

22:27.570 --> 22:31.390
打印一下

22:31.390 --> 22:32.390
你看

22:32.390 --> 22:34.390
是不是一样的

22:34.390 --> 22:35.390
你看是不是一样的

22:35.390 --> 22:36.390
不要看这个展现出来的方式

22:36.390 --> 22:38.390
你看时间戳是不是一样的

22:38.390 --> 22:39.390
是不是一样的

22:39.390 --> 22:41.390
两个的时间戳是一样的

22:41.390 --> 22:42.390
所以说因为你给的

22:42.390 --> 22:43.390
就是时间戳

22:43.390 --> 22:44.390
两个时间戳你给的一样

22:44.390 --> 22:45.390
它肯定是一样

22:45.390 --> 22:46.390
时间戳是统一的

22:46.390 --> 22:47.390
对吧

22:47.390 --> 22:48.390
你无论用本地时间还怎么样

22:48.390 --> 22:51.390
因为时间戳始终是表示的是

22:51.390 --> 22:53.390
两个UTC时间的差异

22:53.390 --> 22:54.390
对不对

22:54.390 --> 22:55.390
所以说你随便怎么弄

22:55.390 --> 22:56.390
都是一样的

22:56.390 --> 22:57.390
这两个得到的时间

22:57.390 --> 22:58.390
也是一样的

22:58.390 --> 22:59.390
但是

22:59.390 --> 23:02.390
只是在这里展现出来的方式不一样

23:02.390 --> 23:04.390
两个仍然是同一个时刻

23:04.390 --> 23:05.390
这是时间戳

23:05.390 --> 23:07.390
这种时间戳的方式还是一样的

23:07.390 --> 23:09.390
但是如果你用这种方式就不一样了

23:09.390 --> 23:11.390
这种方式是显示

23:11.390 --> 23:13.390
就是用制服串的方式就不一样了

23:13.390 --> 23:15.390
因为制服串人

23:15.390 --> 23:16.390
同一个时刻

23:16.390 --> 23:17.390
每个地方的制服串是不一样的

23:17.390 --> 23:18.390
对吧

23:18.390 --> 23:19.390
所以说你尽量的

23:19.390 --> 23:20.390
如果你用制服串的话

23:20.390 --> 23:22.390
就容易出问题

23:22.390 --> 23:23.390
这就是为什么服务器那边

23:23.390 --> 23:24.390
一定要保证

23:24.390 --> 23:25.390
客户当地随便给我说好

23:25.390 --> 23:27.390
客户当地随便给我啥

23:27.390 --> 23:28.390
认识UTC时间

23:28.390 --> 23:29.390
好

23:29.390 --> 23:30.390
那么这边如果说我用这种方式

23:30.390 --> 23:34.390
比方说1970年

23:34.390 --> 23:35.390
01

23:35.390 --> 23:36.390
01

23:36.390 --> 23:38.390
这是标准的写法

23:38.390 --> 23:39.390
然后

23:39.390 --> 23:41.390
凌乘

23:41.390 --> 23:42.390
凌乘

23:42.390 --> 23:43.390
然后这边用UTC

23:43.390 --> 23:44.390
你看一下

23:44.390 --> 23:45.390
现在还一不一样

23:45.390 --> 23:47.390
1970年

23:47.390 --> 23:48.390
我们这里

23:48.390 --> 23:50.390
给你写个变量吧

23:50.390 --> 23:51.390
Value

23:51.390 --> 23:55.050
等于这个

23:55.050 --> 23:58.050
他们的Value是一样的

23:58.050 --> 24:00.050
这个地方可能会有点绕

24:00.050 --> 24:02.050
好好想一想这个道理

24:02.050 --> 24:05.050
总之里面用时间戳是很安全的

24:05.050 --> 24:07.050
全部用UTC也是很安全的

24:07.050 --> 24:08.050
但是你用这种东西

24:08.050 --> 24:11.050
就一定要注意

24:11.050 --> 24:14.050
而有的时候免不了这个东西

24:14.050 --> 24:15.050
好

24:15.050 --> 24:18.050
我们来看一下

24:18.050 --> 24:20.050
好 接下来我们来运行

24:20.050 --> 24:21.050
看一下一不一样

24:21.050 --> 24:22.050
那肯定是不一样的

24:22.050 --> 24:24.050
你看时间戳都不一样了

24:24.050 --> 24:25.050
肯定不一样

24:25.050 --> 24:26.050
为什么呢

24:26.050 --> 24:30.050
给它的就是显示的是相同的

24:30.050 --> 24:32.050
但是时间戳是不一样的

24:32.050 --> 24:34.050
因为北京的这个时刻

24:34.050 --> 24:37.050
不代表英国隔离维治的这个时刻

24:37.050 --> 24:39.050
所以两个时间是不一样的

24:39.050 --> 24:40.050
没了意思吧

24:40.050 --> 24:43.050
这就是为什么我让你在服务器统一

24:43.050 --> 24:44.050
我无论

24:44.050 --> 24:45.050
因为我拿到这个东西

24:45.050 --> 24:47.050
我鬼知道你是隔离维治时间

24:47.050 --> 24:49.050
还是本地时间

24:49.050 --> 24:51.050
怎么弄我这个东西

24:51.050 --> 24:52.050
所以说我一定要让你统一

24:52.050 --> 24:53.050
我觉得服务器我就说好

24:53.050 --> 24:55.050
我就用UTC时间

24:55.050 --> 24:57.050
就是你给我的显示的这种格式

24:57.050 --> 24:59.050
我就一定把它当成UTC

24:59.050 --> 25:01.050
因此如果说你看到这种情况

25:01.050 --> 25:02.050
那就不一样了

25:02.050 --> 25:03.050
不能用这种写法

25:03.050 --> 25:06.050
一定要把它当成UTC时间

25:06.050 --> 25:07.050
你看

25:07.050 --> 25:08.050
为什么这个上面是复述

25:08.050 --> 25:10.050
因为北京时间的1月1号

25:10.050 --> 25:12.050
相当于是UTC时间的

25:12.050 --> 25:15.050
1969年12月31号的

25:15.050 --> 25:16.050
减去8个小时

25:16.050 --> 25:19.050
24点吧等于16

25:19.050 --> 25:20.050
下午16点

25:20.050 --> 25:21.050
对不对

25:21.050 --> 25:22.050
所以说UTC时间

25:22.050 --> 25:23.050
它就是复的

25:23.050 --> 25:25.050
复的还没有到1970年1月1号

25:25.050 --> 25:26.050
对不对

25:26.050 --> 25:27.050
所以说就不一样

25:27.050 --> 25:28.050
因为这就是为什么我们在服务器

25:28.050 --> 25:29.050
一定要用

25:29.050 --> 25:30.050
得到摩摩托车对象的时候

25:30.050 --> 25:32.050
一定要用UTC来得到

25:32.050 --> 25:33.050
没了意思吧

25:33.050 --> 25:35.050
一定要用UTC来得到UTC

25:35.050 --> 25:36.050
因为我们服务器

25:36.050 --> 25:38.050
默认这些东西都是UTC的时间

25:38.050 --> 25:40.050
这是这种写法

25:40.050 --> 25:42.050
然后我们在转换的时候

25:42.050 --> 25:44.050
我们通常会用这种模式来转换

25:44.050 --> 25:45.050
我给大家说一下

25:45.050 --> 25:47.050
就是我们有的时候转换

25:47.050 --> 25:50.420
用摩摩托车来转换

25:50.420 --> 25:53.420
使用日期令牌

25:54.420 --> 25:56.420
转换

25:56.420 --> 25:57.420
什么意思呢

25:57.420 --> 25:58.420
那么这个令牌是什么意思呢

25:58.420 --> 26:00.420
这个令牌是一个

26:00.420 --> 26:04.420
令牌是一个格式化的制服串

26:04.420 --> 26:05.420
它是一个制服串

26:05.420 --> 26:06.420
比方说我们證

26:06.420 --> 26:08.420
比方说一个例子

26:08.420 --> 26:10.420
例如这么一个制服串

26:10.420 --> 26:17.420
YYYMMDDHHMMSS

26:17.420 --> 26:18.420
这什么意思呢

26:18.420 --> 26:19.420
就是我的日期格式

26:19.420 --> 26:21.420
应该是连横杆

26:21.420 --> 26:23.420
MM横杆DD

26:23.420 --> 26:25.420
小时冒号 分钟 秒

26:25.420 --> 26:26.420
小时

26:26.420 --> 26:28.420
两个H大写表示的是24小时

26:28.420 --> 26:29.420
用24小时字

26:29.420 --> 26:31.420
这是我们比较习惯的

26:31.420 --> 26:32.420
一种计时方式

26:32.420 --> 26:33.420
对吧

26:33.420 --> 26:34.420
这是一个令牌

26:34.420 --> 26:36.420
那么令牌它本身是一个制服串

26:36.420 --> 26:37.420
它认为有什么用呢

26:37.420 --> 26:39.420
它用于在摩摩托车对象

26:39.420 --> 26:42.420
和最终的制服串之间进行转换

26:42.420 --> 26:43.420
一个摩摩托车里边

26:43.420 --> 26:44.420
它记录了一个时间

26:44.420 --> 26:45.420
那么这个时间如何来

26:45.420 --> 26:47.420
用一个制服串来展示

26:47.420 --> 26:48.420
我就使用这个令牌

26:48.420 --> 26:49.420
同样的

26:49.420 --> 26:51.420
我们的一个制服串

26:51.420 --> 26:52.420
你看这种制服串

26:52.420 --> 26:53.420
是不是满足这个令牌的

26:53.420 --> 26:54.420
对不对

26:54.420 --> 26:55.420
是满足这个令牌的格式的

26:55.420 --> 26:56.420
一个制服串

26:56.420 --> 26:58.420
我要通过一个令牌

26:58.420 --> 27:00.420
它能转换成摩摩托车对象

27:00.420 --> 27:01.420
当然有一些标准的

27:01.420 --> 27:02.420
它是可以自动转换的

27:02.420 --> 27:04.420
但是我们一般会手动指定

27:04.420 --> 27:06.420
就是说我们通过转换的时候

27:06.420 --> 27:08.420
就是摩摩托车

27:08.420 --> 27:09.420
转换的时候

27:09.420 --> 27:11.420
我们要给它一个值

27:11.420 --> 27:13.420
比方说我们就给这么一个值

27:13.420 --> 27:17.380
我们给一个值

27:17.380 --> 27:18.380
然后第二个参数

27:18.380 --> 27:19.380
是一个数组

27:19.380 --> 27:21.380
如果说你只有一个令牌的话

27:21.380 --> 27:22.380
那也可以不用数组

27:22.380 --> 27:23.380
多个令牌的话

27:23.380 --> 27:24.380
你可以给个数组

27:24.380 --> 27:26.380
就是说我这里

27:26.380 --> 27:29.380
支持哪些日期格式

27:29.380 --> 27:32.380
我们把这个令牌写上吧

27:32.380 --> 27:33.380
令牌

27:33.380 --> 27:36.380
令牌单词是啥

27:36.380 --> 27:39.380
令牌单词是啥

27:41.380 --> 27:45.650
那我查一查吧

27:45.650 --> 27:51.990
翻译

27:51.990 --> 27:53.990
令牌

27:53.990 --> 27:54.990
投坑

27:54.990 --> 27:57.990
那我们就投坑吧

27:57.990 --> 27:59.990
或者要负卖什么

28:00.990 --> 28:02.990
那么这里我们写上

28:02.990 --> 28:03.990
令牌是什么呢

28:03.990 --> 28:05.990
令牌我们可以支持

28:05.990 --> 28:06.990
比如说你的系统里边

28:06.990 --> 28:07.990
你的服务器

28:07.990 --> 28:09.990
它支持哪些日期格式

28:09.990 --> 28:10.990
就是客户端那边

28:10.990 --> 28:11.990
传来一个很多日期格式

28:11.990 --> 28:12.990
像这种格鞋法

28:12.990 --> 28:13.990
还有一种鞋杠的鞋法

28:13.990 --> 28:15.990
还有各种各样的鞋法

28:15.990 --> 28:16.990
还有时间戳的鞋法

28:16.990 --> 28:17.990
那么你服务器到底支持

28:17.990 --> 28:18.990
哪种哪些格式

28:18.990 --> 28:20.990
你可以把它写到一个数组里边

28:20.990 --> 28:22.990
如果说它跑到一个

28:22.990 --> 28:23.990
就是格式之外了

28:23.990 --> 28:24.990
如果说没有这些格式

28:24.990 --> 28:25.990
我们就直接

28:25.990 --> 28:26.990
不允许它创建时间

28:26.990 --> 28:28.990
这是一种非常非常常见的做法

28:28.990 --> 28:30.990
一般来说很多服务器接口

28:30.990 --> 28:31.990
它都告诉你你这个日期

28:31.990 --> 28:32.990
应该给什么

28:32.990 --> 28:33.990
给时间戳

28:33.990 --> 28:34.990
还是给哪种方式

28:34.990 --> 28:35.990
还是都可以

28:35.990 --> 28:36.990
它一般会有一种

28:36.990 --> 28:37.990
集中支持的日期格式

28:37.990 --> 28:38.990
因为日期的鞋法

28:38.990 --> 28:39.990
实在太多了

28:39.990 --> 28:40.990
所以我们这里

28:40.990 --> 28:41.990
可以怎么来写呢

28:41.990 --> 28:42.990
YYY

28:42.990 --> 28:44.990
橫杠MMDD

28:44.990 --> 28:47.990
然后呢

28:47.990 --> 28:50.990
HHMMSS

28:50.990 --> 28:51.990
这是一种格式

28:51.990 --> 28:53.990
我们用formats吧

28:53.990 --> 28:54.990
一种格式

28:54.990 --> 28:55.990
另一种格式

28:55.990 --> 28:56.990
YYY

28:56.990 --> 28:58.990
写杠MMDD

28:58.990 --> 28:59.990
或者是用橫杠吧

28:59.990 --> 29:00.990
还是用橫杠

29:00.990 --> 29:01.990
但是呢

29:01.990 --> 29:03.990
我可以允许你写一个

29:03.990 --> 29:05.990
可以不写两位

29:05.990 --> 29:06.990
你看这里是

29:06.990 --> 29:08.990
一月我们还是要写两位

29:08.990 --> 29:10.990
这种格式必须要写两位的

29:10.990 --> 29:11.990
那么我们可以

29:11.990 --> 29:13.990
只写一位月份

29:13.990 --> 29:15.990
可以只写一位日期

29:15.990 --> 29:17.990
小时呢

29:17.990 --> 29:18.990
可以只写一位小时

29:18.990 --> 29:19.990
一位分钟

29:19.990 --> 29:21.990
一位秒

29:21.990 --> 29:22.990
这样的意思吧

29:22.990 --> 29:23.990
那么这里

29:23.990 --> 29:24.990
这是这种格式

29:24.990 --> 29:25.990
好

29:25.990 --> 29:26.990
然后呢

29:26.990 --> 29:27.990
我还支持时间戳

29:27.990 --> 29:28.990
时间戳是什么格式呢

29:28.990 --> 29:29.990
就是一个X

29:29.990 --> 29:30.990
咱们来看一下吧

29:30.990 --> 29:32.990
这里其实它有说

29:32.990 --> 29:33.990
我们看一下

29:33.990 --> 29:34.990
戴格式

29:34.990 --> 29:35.990
你看

29:35.990 --> 29:36.990
YYY

29:36.990 --> 29:37.990
YYY表示什么

29:37.990 --> 29:38.990
一年份

29:38.990 --> 29:39.990
两个Y那表示

29:39.990 --> 29:40.990
两个年份

29:40.990 --> 29:41.990
一个Y那表示

29:41.990 --> 29:42.990
这是什么

29:42.990 --> 29:43.990
任意

29:43.990 --> 29:45.990
这个我好像没打见过

29:45.990 --> 29:46.990
简单有任意

29:46.990 --> 29:47.990
数字和符号

29:47.990 --> 29:48.990
没打见过

29:48.990 --> 29:49.990
这是季度

29:49.990 --> 29:51.990
Q表示季度

29:51.990 --> 29:52.990
月份

29:52.990 --> 29:53.990
月份

29:53.990 --> 29:54.990
自己去看一下

29:54.990 --> 29:55.990
X小学的X

29:55.990 --> 29:56.990
就表示Ulicus

29:56.990 --> 29:57.990
时间戳

29:57.990 --> 29:58.990
毫秒时间戳

29:58.990 --> 30:00.990
还有一种就是秒时间戳

30:00.990 --> 30:01.990
秒时间戳

30:01.990 --> 30:02.990
秒时间戳的话

30:02.990 --> 30:03.990
我们在介绍里面

30:03.990 --> 30:04.990
用的比较少一点

30:04.990 --> 30:05.990
大家看得到

30:05.990 --> 30:06.990
好

30:06.990 --> 30:07.990
这就是X

30:07.990 --> 30:08.990
那么看一下

30:08.990 --> 30:09.990
以为了这个格式

30:09.990 --> 30:10.990
支持过后

30:10.990 --> 30:11.990
我们很多的日期

30:11.990 --> 30:12.990
只要你满足格式

30:12.990 --> 30:13.990
我就可以转化

30:13.990 --> 30:14.990
成摸摸的对象了

30:14.990 --> 30:15.990
比方说

30:15.990 --> 30:16.990
咱们试一下

30:16.990 --> 30:17.990
这个呢

30:17.990 --> 30:18.990
format

30:18.990 --> 30:19.990
我们就给它写进去

30:19.990 --> 30:20.990
format

30:20.990 --> 30:21.990
后面还有个参数

30:21.990 --> 30:22.990
叫做

30:22.990 --> 30:23.990
什么叫严格检查

30:23.990 --> 30:24.990
就是说

30:24.990 --> 30:25.990
如果说不严格的话

30:25.990 --> 30:26.990
那么

30:26.990 --> 30:27.990
哪怕你不满足这些

30:27.990 --> 30:28.990
它看一下

30:28.990 --> 30:29.990
有没有别的满足的

30:29.990 --> 30:30.990
但是我们一般来说

30:30.990 --> 30:31.990
都要用严格检查

30:31.990 --> 30:32.990
它也强烈推荐你

30:32.990 --> 30:33.990
使用严格检查

30:33.990 --> 30:35.990
第三个它说使用Q

30:35.990 --> 30:36.990
只要不满足

30:36.990 --> 30:37.990
我们要求的格式

30:37.990 --> 30:38.990
都要爆出

30:38.990 --> 30:39.990
那么这里呢

30:39.990 --> 30:40.990
我们输出一下

30:40.990 --> 30:41.990
第一个

30:41.990 --> 30:43.990
第一个就是moment

30:44.990 --> 30:45.990
第一个moment

30:47.990 --> 30:48.990
第二个

30:48.990 --> 30:49.990
再来

30:49.990 --> 30:50.990
复制一下

30:50.990 --> 30:51.990
第二个

30:51.990 --> 30:52.990
我们用写杠

30:53.990 --> 30:54.990
我们会用这个

30:55.990 --> 30:56.990
1月1号

30:56.990 --> 30:57.990
我们就写这个

30:57.990 --> 31:02.990
0.0.0分0秒

31:03.990 --> 31:04.990
第三个

31:06.990 --> 31:07.990
这里呢

31:07.990 --> 31:09.990
我们可以使用一个时间戳

31:09.990 --> 31:10.990
时间戳0

31:10.990 --> 31:13.430
那么我们这里

31:13.430 --> 31:14.430
都把它装成

31:14.430 --> 31:15.430
装成字部串

31:15.430 --> 31:16.430
tossjun

31:16.430 --> 31:21.180
对

31:21.180 --> 31:22.180
tossjun

31:22.180 --> 31:23.180
我们来看一下

31:23.180 --> 31:24.180
这三个时间

31:24.180 --> 31:25.180
应该是一样的

31:25.180 --> 31:28.180
我们还要尽量用utc

31:28.180 --> 31:30.940
转换这种

31:30.940 --> 31:31.940
转换成

31:31.940 --> 31:32.940
得到moment对象

31:32.940 --> 31:33.940
我们尽量用utc

31:33.940 --> 31:34.940
再复制

31:35.940 --> 31:36.940
你看是不是完全一样的

31:37.940 --> 31:38.940
这三种日期

31:38.940 --> 31:39.940
是不是都支持

31:40.940 --> 31:42.940
如果说你这样子写完了过后

31:42.940 --> 31:43.940
如果说我们给了一个

31:43.940 --> 31:44.940
我们不太支持的日期格式

31:44.940 --> 31:45.940
我们来看一下

31:46.940 --> 31:47.940
比方说

31:47.940 --> 31:48.940
这是一个标准的日期格式

31:48.940 --> 31:49.940
对吧

31:49.940 --> 31:50.940
那么我们现在再用

31:50.940 --> 31:51.940
标准的日期格式

31:51.940 --> 31:54.500
你看一下行不行

31:56.500 --> 31:57.500
是不是inventure的点子

31:57.500 --> 31:58.500
对吧

31:58.500 --> 31:59.500
那么他告诉你不行

31:59.500 --> 32:00.500
他不允许你这样做

32:00.500 --> 32:01.500
因为你这个格式里面

32:01.500 --> 32:03.500
只支持这种三种格式

32:03.500 --> 32:05.500
这是服务器最常见的

32:05.500 --> 32:06.500
这种写法

32:06.500 --> 32:08.500
就是你

32:08.500 --> 32:10.500
科普端那边给我传数据的时候

32:10.500 --> 32:12.500
我要对一个数据进行一些验证

32:12.500 --> 32:13.500
那么首先你的日期格式

32:13.500 --> 32:14.500
对不对

32:14.500 --> 32:15.500
我能不能进行转换

32:15.500 --> 32:16.500
对吧

32:16.500 --> 32:17.500
那你看一下

32:17.500 --> 32:18.500
一个不正常的日期

32:18.500 --> 32:20.500
还变成valid date

32:20.500 --> 32:21.500
invalid date

32:21.500 --> 32:22.500
还有一个特点

32:22.500 --> 32:23.500
就是说

32:23.500 --> 32:24.500
如果说你把它转换成

32:24.500 --> 32:25.500
像这种

32:25.500 --> 32:26.500
你把它转换成

32:27.500 --> 32:28.500
复制一下

32:29.500 --> 32:31.500
你把它转换成那个

32:32.500 --> 32:33.500
UTC的话

32:33.500 --> 32:34.500
就是如果说一个日期

32:34.500 --> 32:36.500
它不是一个有效的日期

32:36.500 --> 32:37.500
你把它转

32:37.500 --> 32:38.500
你把它转换成那个就是

32:38.500 --> 32:39.500
时间戳的话

32:39.500 --> 32:40.500
它变成了NAN

32:40.500 --> 32:42.500
你看是不是NAN

32:42.500 --> 32:43.500
对不对

32:43.500 --> 32:44.500
一个无效的日期

32:44.500 --> 32:46.500
它变成时间戳就是NAN

32:47.500 --> 32:48.500
原来的意思吧

32:48.500 --> 32:49.500
这是这么个意思

32:51.500 --> 32:52.500
然后

32:52.500 --> 32:53.500
当然我们这里

32:53.500 --> 32:54.500
可以去随便写一个

32:54.500 --> 32:56.500
就这个放在这吧

32:56.500 --> 32:57.500
然后我再说一个

32:57.500 --> 32:58.500
我想想

32:58.500 --> 32:59.500
我刚才想到啥呢

33:03.500 --> 33:04.500
我刚才想到啥呢

33:05.500 --> 33:06.500
这个是无效

33:06.500 --> 33:07.500
还这个

33:07.500 --> 33:08.500
我们如果说

33:08.500 --> 33:09.500
要判断一个东西

33:09.500 --> 33:10.500
是不是无效的

33:10.500 --> 33:11.500
我们不用这个NAN去判断

33:11.500 --> 33:13.500
我们只需要用那个moment

33:13.500 --> 33:15.500
不要说我们这个日期

33:17.500 --> 33:18.500
复制一下

33:21.140 --> 33:25.140
invalid moment

33:27.140 --> 33:29.140
用个变量保存一下

33:29.140 --> 33:30.140
保存起来

33:30.140 --> 33:31.140
那么这里

33:31.140 --> 33:32.140
这是个无效的日期

33:32.140 --> 33:35.830
invalid moment

33:35.830 --> 33:36.830
这里

33:36.830 --> 33:38.830
我们使用invalid moment

33:39.830 --> 33:41.830
这些都是force

33:41.830 --> 33:43.830
看一下吧

33:44.830 --> 33:47.830
你看invalid moment

33:47.830 --> 33:48.830
那么这里

33:48.830 --> 33:49.830
如果说

33:50.830 --> 33:51.830
我如果说

33:51.830 --> 33:52.830
判断它到底

33:52.830 --> 33:53.830
是不是一个有效的日期

33:53.830 --> 33:56.830
我们可以用这个invalid moment

33:57.830 --> 33:59.830
它里边一个方法叫做

33:59.830 --> 34:00.830
invalid

34:00.830 --> 34:02.830
这个东西方法是判断什么呢

34:02.830 --> 34:03.830
它是判断

34:03.830 --> 34:04.830
是否是一个有效日期

34:04.830 --> 34:06.830
这个地方输出force

34:07.830 --> 34:08.830
看一下

34:08.830 --> 34:09.830
你看是不是force

34:09.830 --> 34:11.830
那么前面的这些日期

34:11.830 --> 34:12.830
输出的肯定是true

34:12.830 --> 34:13.830
它们是一个转换成功了

34:13.830 --> 34:15.830
是一个有效的日期

34:15.830 --> 34:16.830
明显的意思吧

34:16.830 --> 34:17.830
这些东西

34:17.830 --> 34:18.830
我们刚才讲的

34:18.830 --> 34:19.830
这一大堆

34:19.830 --> 34:21.830
都是为了得到

34:21.830 --> 34:23.830
得到那个就是

34:23.830 --> 34:25.830
一个moment对象

34:25.830 --> 34:26.830
好 今天让我们再来看

34:26.830 --> 34:29.830
moment对象拿到之后

34:29.830 --> 34:32.830
我如何来操作它呢

34:32.830 --> 34:33.830
如何来操作它呢

34:33.830 --> 34:35.830
首先我给大家介绍一个

34:35.830 --> 34:36.830
叫做

34:37.830 --> 34:39.830
显示

34:39.830 --> 34:41.830
就是拿到一个moment对象过后

34:41.830 --> 34:42.830
我如何把它

34:42.830 --> 34:44.830
用一种友好的方式显示出来

34:44.830 --> 34:46.830
这个通常发生在客户端

34:46.830 --> 34:48.830
发生在客户端

34:48.830 --> 34:49.830
通常发生在客户端

34:49.830 --> 34:51.830
我要把它友好的显示出来

34:51.830 --> 34:52.830
比方说吧

34:52.830 --> 34:55.830
我们现在拿到一个日期

34:56.830 --> 34:57.830
拿到一个日期

34:57.830 --> 34:59.830
我们这里能拿到一个

34:59.830 --> 35:02.830
moment UTC

35:02.830 --> 35:03.830
就当前日期吧

35:03.830 --> 35:06.830
或者是我们自己给它写一个日期

35:06.830 --> 35:09.830
还是把这个format放在这吧

35:09.830 --> 35:10.830
放在这

35:10.830 --> 35:13.460
好 那么这里呢

35:13.460 --> 35:15.460
我们给它一个日期

35:15.460 --> 35:17.460
给啥呢

35:17.460 --> 35:26.460
给个2015年1月5号

35:26.460 --> 35:28.460
然后呢

35:28.460 --> 35:31.460
23.01分

35:31.460 --> 35:33.460
比方说没有这么一个日期

35:33.460 --> 35:34.460
这是UTC时间

35:34.460 --> 35:36.460
UTC时间这个时间

35:36.460 --> 35:40.460
我们使用format

35:40.460 --> 35:41.460
你看是现在我们是不是

35:41.460 --> 35:42.460
拿到一个日期了

35:42.460 --> 35:43.460
那么之后怎么操作呢

35:43.460 --> 35:45.460
我们看一下有哪些显示方案

35:45.460 --> 35:47.460
第一种显示方案就是用format

35:47.460 --> 35:48.460
你看这边都有说

35:48.460 --> 35:51.460
显示这里用format

35:51.460 --> 35:53.460
把它那个就是

35:53.460 --> 35:54.460
用一个格式化的方式

35:54.460 --> 35:55.460
把它显示出来

35:55.460 --> 35:57.460
那么我来试一下

35:57.460 --> 35:58.460
答应

35:58.460 --> 36:01.460
m.format

36:01.460 --> 36:02.460
format这里边写上了

36:02.460 --> 36:03.460
就写格式化之无窜

36:03.460 --> 36:04.460
我们要怎么来显示呢

36:04.460 --> 36:06.460
比方说我们要这样显示

36:06.460 --> 36:07.460
歪歪歪

36:07.460 --> 36:09.460
年多少多少

36:09.460 --> 36:11.460
月多少多少

36:11.460 --> 36:12.460
日

36:12.460 --> 36:14.460
然后呢

36:14.460 --> 36:19.460
HH点

36:19.460 --> 36:22.460
几分

36:22.460 --> 36:25.460
mm分

36:25.460 --> 36:27.460
ss秒

36:27.460 --> 36:28.460
ms是毫秒

36:28.460 --> 36:30.460
ss是两位数的秒

36:30.460 --> 36:33.460
接下来我们看一下

36:33.460 --> 36:34.460
你看现在是不是用

36:34.460 --> 36:35.460
这种格式来显示呢

36:35.460 --> 36:36.460
那么它这个东西

36:36.460 --> 36:37.460
就是通过这个令牌

36:37.460 --> 36:39.460
它会把它显示成

36:39.460 --> 36:41.460
把一个moment对象

36:41.460 --> 36:42.460
返回一个制幅串

36:42.460 --> 36:43.460
按照这个格式

36:43.460 --> 36:44.460
来返回一个制幅串

36:44.460 --> 36:45.460
明白了意思吧

36:45.460 --> 36:46.460
非常简单

36:46.460 --> 36:47.460
就是它显示

36:47.460 --> 36:48.460
那么注意

36:48.460 --> 36:49.460
这个显示出来的

36:49.460 --> 36:50.460
它应该是

36:50.460 --> 36:51.460
它是一个什么东西

36:51.460 --> 36:52.460
这个显示出来的

36:52.460 --> 36:53.460
它是UTC时间

36:53.460 --> 36:54.460
你要注意

36:54.460 --> 36:55.460
这是UTC时间

36:55.460 --> 36:56.460
不是本地时间

36:56.460 --> 36:57.460
它不是本地时间

36:57.460 --> 36:59.460
那么再说到另外一个问题

36:59.460 --> 37:01.460
我如何把UTC时间

37:01.460 --> 37:02.460
转换成本地时间

37:02.460 --> 37:04.460
如何把UTC时间

37:04.460 --> 37:05.460
转换成本地时间

37:05.460 --> 37:07.460
或者说我拿到的是本地时间

37:07.460 --> 37:08.460
我怎么把它转换成UTC时间

37:08.460 --> 37:10.460
非常简单

37:10.460 --> 37:11.460
如果说你拿到一个对象

37:11.460 --> 37:13.460
这个对象里面是UTC时间

37:13.460 --> 37:14.460
那么你其实呢

37:14.460 --> 37:15.460
你可以判断一下

37:15.460 --> 37:17.460
这里你可以判断

37:18.460 --> 37:20.460
ME是UTC

37:20.460 --> 37:21.460
是不是UTC时间

37:21.460 --> 37:23.460
你直接可以判断出来了

37:24.460 --> 37:25.460
那么如果说

37:25.460 --> 37:26.460
我们一般都是UTC时间

37:26.460 --> 37:27.460
那么如果说

37:27.460 --> 37:28.460
把它转换成本地时间的话

37:28.460 --> 37:30.460
我们就可以用LOCAL

37:31.460 --> 37:33.460
那么它仍然是

37:33.460 --> 37:34.460
对了

37:35.460 --> 37:36.460
看一下是不是对的

37:37.460 --> 37:38.460
对了

37:38.460 --> 37:40.460
那么使用LOCAL过后

37:40.460 --> 37:41.460
它返回仍然是一个MOMENT对象

37:41.460 --> 37:42.460
只不过了

37:42.460 --> 37:43.460
那个MOMENT对象里边

37:43.460 --> 37:44.460
后续的操作

37:44.460 --> 37:45.460
就全部是本地时间了

37:45.460 --> 37:46.460
原理是吧

37:46.460 --> 37:48.460
后续的操作就全部是本地时间了

37:48.460 --> 37:49.460
所以说你可以用LOCAL

37:49.460 --> 37:50.460
把它转换成本地时间

37:50.460 --> 37:52.460
然后再调用这个MOMENT里边的方法

37:52.460 --> 37:53.460
format

37:53.460 --> 37:54.460
它就用本地时间来显示

37:54.460 --> 37:55.460
这就是客户端

37:55.460 --> 37:56.460
发生了客户端的时候

37:56.460 --> 37:58.460
你看客户端拿的不是UTC时间

37:58.460 --> 38:00.460
比方说服务器给它的是UTC时间

38:00.460 --> 38:01.460
你看这个图

38:01.460 --> 38:03.460
服务器给它的是UTC时间

38:03.460 --> 38:04.460
那么或者是时间

38:04.460 --> 38:05.460
时间戳了

38:05.460 --> 38:06.460
时间戳更不要说了

38:06.460 --> 38:08.460
时间戳直接把时间戳放这就行了

38:08.460 --> 38:09.460
对不对

38:09.460 --> 38:10.460
那么它得到的是一个UTC时间

38:10.460 --> 38:11.460
你要显示的时候

38:11.460 --> 38:13.460
不是客户端浏览器那边

38:13.460 --> 38:15.460
它要把它转换成本地时间

38:15.460 --> 38:16.460
就是调用一下LOCAL

38:16.460 --> 38:18.460
浏览器那边也可以安装一个

38:18.460 --> 38:19.460
安装一个就是MOMENT

38:19.460 --> 38:21.460
然后来处理这个东西

38:21.460 --> 38:24.460
它把用一个合适的格式来显示就完事了

38:24.460 --> 38:25.460
那么同样的道理

38:25.460 --> 38:27.460
如果说浏览器那边用户输入了

38:27.460 --> 38:29.460
输入的是一个本地时间

38:29.460 --> 38:31.460
那么你如何来转换成UTC呢

38:31.460 --> 38:32.460
是一样的道理

38:32.460 --> 38:33.460
比方说

38:36.460 --> 38:38.460
比方说9个例子

38:38.460 --> 38:39.460
现在用户那边

38:39.460 --> 38:40.460
这是一个

38:40.460 --> 38:41.460
它不是一个UTC时间

38:41.460 --> 38:43.460
比方说来自于用户输入了文本框

38:43.460 --> 38:45.460
文本框里面用户肯定不可能

38:45.460 --> 38:46.460
用户输入什么UTC时间

38:46.460 --> 38:48.460
肯定是输入了本地时间

38:48.460 --> 38:49.460
这是个本地时间

38:49.460 --> 38:50.460
你就不要

38:50.460 --> 38:52.460
在客户端那边就不要用UTC了

38:52.460 --> 38:53.460
那么你看

38:54.460 --> 38:55.460
客户端在处理的时候

38:55.460 --> 38:56.460
用户一个文本框

38:56.460 --> 38:58.460
然后文本框里面输入了本地时间

38:58.460 --> 39:01.460
那么客户端那边就要用一个MOMENT

39:01.460 --> 39:02.460
因为它是本地时间

39:02.460 --> 39:04.460
把这个当前本地时间来进行格式化

39:04.460 --> 39:06.460
格式化完了过后

39:06.460 --> 39:08.460
你要把它变成UTC时间

39:08.460 --> 39:09.460
来传输到服务器

39:09.460 --> 39:11.460
客户端是不是要变成UTC

39:11.460 --> 39:12.460
或者是时间初传到服务器

39:12.460 --> 39:13.460
变时间初很简单

39:13.460 --> 39:15.460
因为加号直接变了

39:15.460 --> 39:16.460
时间初是全球统一的

39:16.460 --> 39:17.460
没有任何疑问

39:17.460 --> 39:19.460
那如果说服务器需要UTC时间

39:20.460 --> 39:21.460
你要用那种格式化的方式

39:21.460 --> 39:22.460
传到服务器

39:22.460 --> 39:23.460
那怎么办

39:23.460 --> 39:24.460
那么这个时候

39:24.460 --> 39:25.460
你就可以用

39:28.460 --> 39:31.460
我们可以用M.UTC

39:31.460 --> 39:33.460
雕容一下这个函数

39:34.460 --> 39:35.460
那么这个时候

39:35.460 --> 39:37.460
它就把它转换成UTC时间了

39:37.460 --> 39:39.460
然后再把它

39:39.460 --> 39:41.460
用一个格式化的支付串传到服务器

39:41.460 --> 39:43.460
比方说我们用FORMAT

39:45.460 --> 39:46.460
YYY

39:46.460 --> 39:47.460
MMDD

39:47.460 --> 39:49.460
消失

39:49.460 --> 39:50.460
消失

39:50.460 --> 39:51.460
分钟

39:51.460 --> 39:52.460
秒

39:52.460 --> 39:54.460
那么把格式化的一个支付串

39:55.460 --> 39:56.460
TO SERVER

39:56.460 --> 39:58.460
这是要传给服务器的UTC时间

39:58.460 --> 40:00.460
输出一下TO SERVER

40:00.460 --> 40:05.080
运行

40:05.080 --> 40:06.080
你看

40:06.080 --> 40:08.080
我们写的时间是多久

40:08.080 --> 40:10.080
2015年1月5号23点

40:10.080 --> 40:13.080
那么它实际上是2015年

40:13.080 --> 40:15.080
就是15点

40:15.080 --> 40:16.080
你看吧

40:16.080 --> 40:18.080
这传的是不是UTC时间

40:18.080 --> 40:19.080
它并不是这个时间

40:19.080 --> 40:20.080
原来的意思吧

40:20.080 --> 40:22.080
那么这个场景是不搞定的

40:22.080 --> 40:24.080
客户端拿到的是UTC

40:24.080 --> 40:26.080
那么怎么把它转换到本地时间用楼口

40:26.080 --> 40:28.080
客户端用户填到的是本地时间

40:28.080 --> 40:29.080
怎么把它转换到UTC

40:29.080 --> 40:31.080
用UTC这个函数

40:31.080 --> 40:32.080
转换过去传到服务器了

40:32.080 --> 40:33.080
那么服务器

40:33.080 --> 40:35.080
后边的操作全是根据UTC来操作

40:35.080 --> 40:37.080
这是这一块

40:37.080 --> 40:39.080
那么这个显示

40:39.080 --> 40:40.080
我们除了用format之外

40:40.080 --> 40:42.080
还有一个更加友好的方式

40:42.080 --> 40:44.080
就是叫做format闹

40:44.080 --> 40:45.080
特别有意思

40:45.080 --> 40:46.080
大家可以去看一下这个文档

40:46.080 --> 40:48.080
这个文档里面接口很多

40:48.080 --> 40:49.080
讲不完了

40:49.080 --> 40:50.080
这个讲完里面什么意思

40:50.080 --> 40:51.080
它只是个工具而已

40:51.080 --> 40:55.080
我们这里比方说得到一个UTC时间吧

40:55.080 --> 40:58.080
拿到一个UTC时间

40:58.080 --> 41:00.080
这是我们客户端拿到的对不对

41:00.080 --> 41:01.080
拿到UTC时间呢

41:01.080 --> 41:03.080
我要看一下这个时间

41:03.080 --> 41:06.080
距离当前

41:06.080 --> 41:08.080
它时间的那种

41:08.080 --> 41:09.080
显示方式

41:09.080 --> 41:11.080
我们给它看一下就明白了

41:11.080 --> 41:14.080
说出M.from

41:14.080 --> 41:16.080
把它转换到本地来说

41:16.080 --> 41:18.080
local

41:18.080 --> 41:19.080
然后呢

41:19.080 --> 41:21.080
from

41:21.080 --> 41:26.470
好,我们来看一下

41:26.470 --> 41:28.470
它会转换到什么样的格式

41:28.470 --> 41:30.470
五年前

41:30.470 --> 41:31.470
所以这样子看出来

41:31.470 --> 41:32.470
更加友好了

41:32.470 --> 41:33.470
对不对

41:33.470 --> 41:34.470
Five years ago

41:34.470 --> 41:35.470
那么我们平时刷微博

41:35.470 --> 41:36.470
刷一些抖音的时候

41:36.470 --> 41:37.470
是不是经常这样子

41:37.470 --> 41:38.470
对不对

41:38.470 --> 41:39.470
还是几分钟前

41:39.470 --> 41:40.470
几小时前

41:40.470 --> 41:41.470
那么我们比方说这里

41:41.470 --> 41:45.470
UTC时间是2020年

41:45.470 --> 41:48.470
这里今天是4月14号

41:48.470 --> 41:50.470
UTC时间

41:50.470 --> 41:51.470
这是UTC

41:51.470 --> 41:53.470
UTC现在是下午5点

41:53.470 --> 41:54.470
下午5点减8

41:54.470 --> 41:55.470
就上午9点

41:55.470 --> 41:57.470
那么我们就用上午9点吧

41:57.470 --> 41:58.470
现在是5点13分

41:58.470 --> 41:59.470
那么就是

41:59.470 --> 42:01.470
这个相当于是下午的5点钟

42:01.470 --> 42:02.470
对吧

42:02.470 --> 42:03.470
好,咱们来看一下

42:03.470 --> 42:05.470
所以14分钟前

42:05.470 --> 42:06.470
对不对

42:06.470 --> 42:07.470
14分钟前

42:07.470 --> 42:08.470
就这么个意思

42:08.470 --> 42:09.470
明白吧

42:09.470 --> 42:10.470
就这么个意思

42:10.470 --> 42:12.470
当然这个东西显色是英文

42:12.470 --> 42:13.470
有时候还看着很不爽

42:13.470 --> 42:14.470
当然要显示中文怎么办了

42:14.470 --> 42:16.470
它里边有很多的语言库

42:16.470 --> 42:18.470
这个movement里边有很多的语言库

42:18.470 --> 42:20.470
你可以在导入movement之后

42:20.470 --> 42:21.470
你可以给它设置一下

42:21.470 --> 42:22.470
叫做locale

42:22.470 --> 42:23.470
locale

42:23.470 --> 42:25.470
locale就是地区

42:25.470 --> 42:26.470
去设置一下

42:26.470 --> 42:27.470
那么这里呢

42:27.470 --> 42:28.470
你写一个语言库

42:28.470 --> 42:29.470
我们中文就是

42:29.470 --> 42:32.470
ZHChannel

42:32.470 --> 42:34.470
我们要使用这个语言库

42:34.470 --> 42:36.470
就是我们movement同意

42:36.470 --> 42:37.470
你使用这个语言库

42:37.470 --> 42:38.470
它里边有很多的语言库

42:38.470 --> 42:40.470
不同的国家都有

42:40.470 --> 42:42.470
咱们来看一下

42:42.470 --> 42:44.470
15分钟前

42:44.470 --> 42:45.470
对不对

42:45.470 --> 42:46.470
非常的方便

42:46.470 --> 42:47.470
那么这里边

42:47.470 --> 42:50.470
我就不再去做过多的解释了

42:50.470 --> 42:51.470
包括什么操作

42:51.470 --> 42:52.470
再加一块时间

42:52.470 --> 42:53.470
对吧,add

42:53.470 --> 42:54.470
加一个时间

42:54.470 --> 42:55.470
后面写个字幕串

42:55.470 --> 42:57.470
加7天

42:57.470 --> 42:58.470
在当前的movement基础上

42:58.470 --> 42:59.470
加7天

42:59.470 --> 43:00.470
然后解

43:00.470 --> 43:03.470
还有什么substract

43:03.470 --> 43:04.470
就是剪一段时间

43:04.470 --> 43:05.470
对不对

43:05.470 --> 43:06.470
剪7天

43:06.470 --> 43:07.470
剪7秒钟

43:07.470 --> 43:08.470
这些都可以

43:08.470 --> 43:09.470
你看一下

43:09.470 --> 43:10.470
这里边有一个快捷键

43:10.470 --> 43:11.470
你可以写个d

43:11.470 --> 43:12.470
d就表示什么意思呢

43:12.470 --> 43:13.470
就表示des

43:13.470 --> 43:14.470
加7天

43:14.470 --> 43:15.470
w表示wix

43:15.470 --> 43:16.470
m表示mouse

43:16.470 --> 43:17.470
这些东西都很简单

43:17.470 --> 43:18.470
而现在取值

43:18.470 --> 43:20.470
怎么去得到它的小时部分

43:20.470 --> 43:21.470
怎么得到分钟部分

43:21.470 --> 43:22.470
这些都可以取的

43:22.470 --> 43:24.470
原来的意思吧

43:24.470 --> 43:26.470
这是这个东西

43:26.470 --> 43:27.470
那就行了

43:27.470 --> 43:28.470
那咱们这个movement

43:28.470 --> 43:29.470
可以接受到这里

43:29.470 --> 43:30.470
还有更多的解控

43:30.470 --> 43:31.470
大家有兴趣的话

43:31.470 --> 43:33.470
可以去自己去看一下

43:33.470 --> 43:34.470
还有什么

43:34.470 --> 43:35.470
某个日期在

43:35.470 --> 43:36.470
是不是在某一个日期之后

43:36.470 --> 43:37.470
在之前

43:37.470 --> 43:38.470
是不是两个是一个日期

43:38.470 --> 43:39.470
你们都会去看

43:39.470 --> 43:41.470
好 这是关于

43:41.470 --> 43:42.470
这一个

43:42.470 --> 43:44.470
其他的就没啥了

43:44.470 --> 43:45.470
没啥了

43:45.470 --> 43:47.470
那咱们那个movement

43:47.470 --> 43:48.470
就讲到这里了

43:48.470 --> 43:49.470
讲这个日期处理

43:49.470 --> 43:50.470
以后大家在服务器处理

43:50.470 --> 43:51.470
时间的时候

43:51.470 --> 43:52.470
一定要注意

43:52.470 --> 43:53.470
服务器一定是用的是utc

43:53.470 --> 43:55.470
和那个时间戳

43:55.470 --> 43:57.470
把这个图好理解一下

43:57.470 --> 43:58.470
千万没啥了

