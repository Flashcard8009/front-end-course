WEBVTT

00:01.070 --> 00:04.910
这节课A 我怎么把关掉呢

00:09.620 --> 00:14.740
这是4-12 讲Cation

00:15.240 --> 00:17.040
说了说了 我有点后悔了啊

00:17.300 --> 00:19.340
就怎么回事呢 我之前呢想的是啊

00:19.600 --> 00:23.940
我把Cookie讲完Cookie讲完了过后呢 我就讲那个GWT

00:24.200 --> 00:27.780
后来想一想GWT不是在先讲Cation吗 对吧

00:28.040 --> 00:31.120
其实也不用先讲Cation啊 但是我还是最好是先讲Cation

00:31.340 --> 00:34.700
然后呢再讲这个GWT 就把身份认证这个就讲完了 对吧

00:35.220 --> 00:38.020
然后呢后来发现呢这个GWT呢

00:38.280 --> 00:41.620
它可能跟跨域有关系 因为我脑袋里面想的比较多啊

00:42.120 --> 00:44.420
可能你们想的Cookie和Cation

00:44.680 --> 00:49.040
GWT呢有没有接触啊 没关系啊 可能有些同学多多早早接触过一点

00:50.320 --> 00:52.620
就想到他们是什么对吧 为什么这样子用

00:52.880 --> 00:53.900
怎么去用

00:54.160 --> 01:00.300
但是我想脑袋里面想的东西就太大了 太复杂了 又很后边是一个非常非常大的一个基础图计

01:01.580 --> 01:05.420
后来说说我觉得GWT呢可能跟跨域有关系啊

01:05.680 --> 01:09.260
我可能会讲到跟跨域有关系 所以说我得把先把这个跨域讲了

01:09.780 --> 01:13.620
跨域里面呢可能要设计到就是断点条 设为把断点条是讲了

01:14.380 --> 01:15.160
后来想一想

01:15.420 --> 01:20.020
不行啊 我不能那样子去讲 为什么呢 因为如果说我用这种方式去讲的话

01:21.300 --> 01:22.580
就导致了

01:22.840 --> 01:27.440
这个把后端把这个前端的同学们觉得这个这个东西太大了 这个知识

01:27.700 --> 01:30.780
因为我要绕好大一个圈 我才能绕回来

01:31.140 --> 01:36.180
还设计到密码学了 还设计到这个就是网络安全了 那这个东西要开一个课程来讲了

01:36.900 --> 01:40.540
我脑袋就大了 所以说不能这么讲 因为对我们前端来说是不能这么讲的

01:41.060 --> 01:47.700
因此呢我觉得我现在有点后悔了 就觉得我觉得应该把Cookie讲完讲Cookie讲GWT 讲完了过后再讲跨域

01:47.960 --> 01:51.420
不过呢没关系啊 你们心里边知道这是一块知识

01:52.060 --> 01:53.260
跨域这是一块知识

01:53.780 --> 01:56.620
然后呢跟身份认证相关的是Cookie

01:57.440 --> 02:03.760
Cookie Session 还有后边讲了GWT 你们心里边把它画成一个完整的环就行了

02:05.000 --> 02:10.000
那么这个东西呢 我就不用去把这个跨域给他联系起来的啊 就单独单独来出来讲

02:11.320 --> 02:16.720
嗯 我跟大家说一下 咱们前端去接触这个露德结石啊 露德结石是属于后端东西

02:17.000 --> 02:20.000
后端东西千万不要小小它 它的一表东西太多了

02:20.580 --> 02:27.740
一表复杂得很 而且呢我敢说 现在很多的后端的人呢 把这个三个东西他们的关系啊 搞得都不是很清楚

02:28.260 --> 02:28.620
知道吧

02:30.220 --> 02:33.900
哪怕因为我现在那种讲法给大家讲完了 你们都已经

02:34.340 --> 02:39.100
比不少的后端的人强了 你相信我绝对是这样子 因为我以前就讲后端了 我告诉你

02:40.020 --> 02:43.140
那么这里边呢 我会把重要的东西给大家讲到

02:43.980 --> 02:46.980
另外呢 我们作为前端 对这三个东西啊

02:47.680 --> 02:54.080
你只需要 我们学他们的目的是什么 你要搞清楚啊 目的是啥呢 目的是你以后到了公司

02:54.960 --> 02:59.240
我也不清楚你们以后公司到底使用哪一种身份认证的方式

03:00.040 --> 03:07.480
无论他使用哪一种 你都能够应付 都能够知道他在干嘛 你都能够跟用前端的技术呢 跟他很好的配合

03:08.120 --> 03:11.000
你知道他的原理是什么 所以说这是我们的目的

03:11.360 --> 03:15.040
而我们的目的不是什么了 不是要搞清楚他们之间的各种

03:15.580 --> 03:17.980
各种就是组合 各种就是

03:18.900 --> 03:24.780
优劣性 搞得非常清楚 因为那个人会需要太多太多的知识了 所以说

03:25.740 --> 03:30.860
可能我告诉大家不夸张的一点讲 可能呢都已经接近那个

03:32.460 --> 03:39.700
那个就是系统架构的级别了 所以说这非常复杂啊 不过我们没关系 我们前端的作为一个初学者

03:40.320 --> 03:45.520
而且这个东西 最初学的都已经很多了 这些东西 对一个初接初前端的人

03:45.920 --> 03:50.880
我们只需要搞清楚他们的原理是什么 就已经很够很足够了 因为后端同学

03:51.440 --> 03:57.120
可能都还没有具体搞清楚他们的原理事实 我们这里简单的说一下吧 Cookin我们之前讲过对吧

03:58.000 --> 04:00.600
这三个东西呢 他都可以作为身份认证

04:01.920 --> 04:08.600
谁信了他也是可以做身份认证的 但是呢 这三个东西啊 他不存在说谁取代谁不存在的

04:09.580 --> 04:12.820
而且呢 在可预见的将来 也不会出现那种情况

04:13.620 --> 04:22.060
有人觉得网上很多人都说 用jwt 替代谁行 对吧 我觉得这个东西说起来是很骇人的啊 不能这样去说

04:22.700 --> 04:23.700
谁信你肯定有他的

04:24.420 --> 04:30.580
不可取代的地方 但是呢 我们没有办法去讲他的真正的不可取代性 因为他涉及了很多很多东西

04:31.940 --> 04:37.100
我们这里呢 我们知道他的原理就已经非常足够了 首先我们来看一下谁信和Cookie这两个东西

04:37.960 --> 04:42.240
Cookie是什么呢 我们之前讲过再总结一下 他存在哪的他的数据

04:42.960 --> 04:46.520
存在客户端的对吧 存在流烂阶段的 这是Cookie

04:47.240 --> 04:50.200
当然一动转不存在了对不对 第二个呢

04:51.280 --> 04:56.400
他的优点 优点是什么呢 就一个这个优点呢 具有非常

04:57.760 --> 05:03.680
不可取代性啊 就是他由于他存在客户端 所以说他不会占用服务器的资源

05:04.060 --> 05:09.700
服务器不用存 对吧 服务器数据库里边不用存 还有什么呢 服务器内存里边也不用存啊 这是Cookie

05:10.700 --> 05:13.300
好 另一个呢 还缺点呢 就很多了

05:14.420 --> 05:21.940
他只能是制服策格是吧 我们之前讲的建制队对吧 是不是制服策格是你给我存个图片呢 你存 你看你怎么存进去啊

05:22.460 --> 05:23.980
而且同学说把他那个

05:24.900 --> 05:32.260
转换成二金字的格式对吧 转换成八分啊 比如说一串数字啊 进行编码嘛 来存储 也不可以存储编码嘛 但是呢 他存储量是有限的

05:32.880 --> 05:36.720
很多的瀏覽器呢 对一个网站的Cookie呢 就给他提供四个kb

05:38.160 --> 05:41.000
那我这个很简单 我用local storage啊 对吧

05:41.800 --> 05:49.040
那local storage呢 还有什么session storage 对吧 呃session storage 你们都讲过了 对吧 storage

05:50.720 --> 05:51.920
还有什么local storage

05:53.080 --> 05:56.240
啊 用法都差不多 那这两个东西存出的量呢

05:56.820 --> 06:05.140
设上10兆还是多少兆啊 我忘了啊 存存量就很多了 是不是也可以对吧 但是呢local storage呢和session storage也有它的问题

06:06.180 --> 06:08.900
比方说local storage 他是不是不会自动发送

06:09.460 --> 06:13.300
不会自动发送的那个给服务器对吧 cookie是会自动发送给服务器的

06:14.140 --> 06:17.940
而且呢 cookie呢 他还有一些安全性的限制啊 比方说那个

06:18.860 --> 06:23.900
介石不能读去啊 对吧 又涉及到atp only 过后呢介石不能读去啊 才又设置什么secure

06:24.080 --> 06:29.280
他只随着atps来发送 对吧 还有他的还有他的优势 那么这两个是没有的

06:29.920 --> 06:34.720
另外呢 这两个东西是非常容易丢失的啊 包括 cookie 其实也容易丢失啊

06:35.280 --> 06:39.400
我们一会再说有容易丢失 他还有什么缺点呢 就数据容易被获取

06:40.360 --> 06:45.800
对不对 你看介石单码是不是可以轻易的获取 cookie 对吧 数据是很容易被获取的

06:46.080 --> 06:52.800
另外呢 数据容易被篡改 都是涉及到安全性的方面啊 当然有的人说可以加密 对吧 那这个问题又解决不了了 容易丢失

06:53.300 --> 06:58.940
怎么丢失 你们平时我是不太喜欢用什么360的 你们喜欢用360对吧 一些

06:59.460 --> 07:04.180
那些就是软件啊 管理的电脑管家之类的 然后呢 他说

07:05.140 --> 07:10.980
清除使用痕迹对吧 清除流量器缓存一清除是不是什么都没了 对吧 数据有容易丢失了啊

07:11.420 --> 07:20.460
这是cokey的一些缺陷 你看你清除了流量器的痕迹之后 清除了流量器的数据之后 很多人都需要重新登录了 对吧 就这么一个问题啊

07:20.920 --> 07:28.880
这是cokey的一些缺陷 那么这个缺陷呢 c 性啊 能不能弥补呢 我们来看 c 像是啥 c 像它是存储在服务器端的

07:30.160 --> 07:35.200
啊 因为它的数据还不带客户端 但服务器端 比方说你登录的用户信息啊 在服务器端

07:35.760 --> 07:41.480
那么它的优点就很明显了 cookie 的缺陷就是它的优势啊 它是可以是任何格式

07:42.280 --> 07:46.120
对吧 它可以是一个对象啊 可以是一个数组 可以是一个啊

07:46.740 --> 07:48.380
啊 日期啊 什么都可以

07:49.220 --> 07:55.500
而且呢 存储量呢 理论上是无限的 那就看服务器的容量了 服务器的容量越大 它存储的 c 性就越多

07:56.620 --> 08:01.860
然后它的好处还有就是数据难易被获取 它在服务器怎么获取呢 你获取不到的 对吧

08:02.460 --> 08:06.860
客户端 因为你是你除非你贡献它的服务器 那又是另外一块知识的啊 服务器的工坊

08:07.660 --> 08:11.180
然后呢 数据难易也篡改 因为它在服务器上 虽然很难篡改

08:12.140 --> 08:15.660
c 像的数据呢 可以做到不易丢失 不易丢失

08:16.580 --> 08:23.380
这也是它的一个优点 因为你随便用什么 在客户端那边怎么杀毒啊 怎么清除痕迹 跟服务器没关系

08:23.860 --> 08:26.820
对吧 它数据不易丢失啊 这是 c 性的优势

08:28.140 --> 08:29.740
然后呢 它的缺点呢

08:30.460 --> 08:32.180
也很明显 就是它会

08:32.900 --> 08:37.060
显著的占用服务器资源 好像只有一个的吧 好像是优点多缺点少

08:37.540 --> 08:41.300
后续好像是优点少缺点多 但是这个缺点有的时候要命的

08:42.180 --> 08:44.260
会极大的提高你的服务器成分

08:45.040 --> 08:46.720
一个大大的公司 大的网站

08:47.280 --> 08:52.120
他们要用 c 性来存数据 他们要搭一个服务器集群 这些服务器啥都不干 就存 c 性

08:52.720 --> 08:58.880
就存 c 性数据 而且对这些集群的管理 很多服务器的管理也是一个集气负担的过程

08:59.480 --> 09:04.040
啊 叫做 c 性服务器啊 很麻烦的这个东西 领出了很多很多问题

09:05.000 --> 09:07.600
但是呢 它的好处呢 也是显而易厌的

09:08.040 --> 09:12.440
所以我们不存在说什么 cookie 取代 c 性 c 性取代 cookie 不存在的啊 这个东西

09:13.100 --> 09:16.340
就看适不适合 而现在这两个东西还可以联合起来使用

09:17.340 --> 09:20.300
有些呢 不是很敏感的数据 我们发来放到 cookie 里边

09:20.820 --> 09:25.220
有些呢 更多的数据呢 更复杂的数据结构 我们发来放在 c 性里边 都可以联合起来用的

09:25.500 --> 09:28.180
包括我们后边学的 g wt 这三个东西都可以联系来用

09:29.300 --> 09:35.460
所以说这里边其实 应用场景是非常复杂的 我们只需要搞清楚每一个地方的原理是什么

09:35.820 --> 09:39.740
因为你们以后到了公司 虎辉真的不清楚他到底会用什么样的

09:40.280 --> 09:49.480
模式 总之就逃不了了这三个 一个 cookie 一个 c 性一个 g wt 啊 逃不出这三个 由可能互相结合 但是你搞清楚了每一个原理

09:50.280 --> 09:56.800
那么他到时候呢 公司里边有文档或者是有培训给你解释就明白了 不然到时候解释他都不明白他在干嘛

09:57.520 --> 10:04.280
这是关于这个 c 性啊 那么接下来我们来看一下这个 c 性的原理图 最后呢 我们来讲他怎么使用啊 使用就很简单的

10:04.600 --> 10:08.160
你只要把那个原理搞清楚了 好 现在原理图我给他画了一个

10:09.960 --> 10:16.840
比方浏览声音是怎么回事啊 他他是怎么来跟浏览器之间来保存那个身份信息的 比方浏览器请求过来

10:17.960 --> 10:21.200
哪怕他你什么都没有干 你哪怕你就请求了一个静态一面

10:21.920 --> 10:27.760
服务器干嘛 给你开一个谁行 他怎么来开一个谁行了 服务器那一步呢 他会维护一个表格

10:28.600 --> 10:34.560
啊 维护一张表格 这个表格呢可能在任何位置 可能在内存里边 内存里边就表现了一个输主 对吧

10:35.540 --> 10:38.300
或者是一个map 或者是一个对象

10:39.180 --> 10:45.060
在对象的属性 在对象的值啊 无所谓的 总之呢 就是服务器呢 会在内部维护一个表格

10:46.540 --> 10:50.860
那么他第一 如果说浏览器第一次就打开浏览器过后 请求服务器

10:51.420 --> 10:54.660
那么服务器这边会怎么样呢 我们表格里边加一条数据

10:55.180 --> 10:59.020
啊 这个数据可以存在数据库里边也可以存在内存里边啊 可以存在任何地方

10:59.460 --> 11:02.260
默认情况下呢 我们一般来说 这些是存在那个

11:02.760 --> 11:06.760
啊 就默认情况下啊 很多的就是sation的插件

11:07.480 --> 11:13.080
他都是把它存到内存里边的 当然这些东西你都可以改 不过我们不设计了啊 这是纯粹的后转值 是吧

11:14.000 --> 11:18.000
如果说一般 如果说在大的网站里边 他一般是把它存到数据库里边的

11:18.960 --> 11:23.720
那这些东西都是后转的事情的啊 你肯定是前段是不会设计的 但是你要知道是怎么回事

11:24.760 --> 11:29.960
好 服务器会在这个表格里边加一条数据 给他自动的去生成一个sation id

11:30.380 --> 11:33.700
这个id啊 一般来说是一个全球唯一id

11:34.460 --> 11:35.900
啊 我们把它叫做uu id

11:37.780 --> 11:39.420
顺便给大家讲个知识吧 uu id

11:40.260 --> 11:40.940
叫做什么

11:40.940 --> 11:42.740
UliVirtual

11:47.940 --> 11:49.300
Identity

11:50.940 --> 11:52.700
UliVirtual 还要一个Ulic

11:53.220 --> 11:53.700
Ulic

11:54.340 --> 11:57.260
就是要全 全球唯一id

11:57.760 --> 12:02.240
啊 就是有这么一个工具啊 他有很多的像note接识里边有这个相应的库

12:02.840 --> 12:06.760
通过一个工具 一个函数一调用 哎 他就生成了一个uu id 一个制服串

12:07.200 --> 12:10.600
这个制服串是全球唯一的 在全整个世界上

12:11.400 --> 12:12.600
所有的计算一种唯一

12:13.840 --> 12:17.240
任何扎一次调用这个函数 生成的一定是另外一个

12:17.760 --> 12:20.440
他是可以保证唯一性啊 他是一个很长的一个制服串

12:20.760 --> 12:24.120
他实际上他的原理是什么 他原理是利用那个当前的时间戳

12:24.740 --> 12:28.260
就是一个UTC时间戳 然后呢 以及那个

12:28.900 --> 12:29.500
你的mic

12:30.100 --> 12:35.620
就电脑的mic 已经了一个计数器啊 通过这三个东西 还有更多的一些算 加上一些算法

12:36.060 --> 12:41.180
那么生成的这么一个制服串啊 总之他一般来说 这个东西可以改啊 他

12:42.020 --> 12:45.020
session的话 还没有说强制要求你必须要用uu id

12:45.340 --> 12:47.380
我真的就简单起来一下 肯定不是这个样子的

12:48.140 --> 12:52.580
他没有说强制要求你用uu id 但是你建议你能一定要保证唯一性

12:53.480 --> 12:56.880
不管你有什么方式 一定要保证唯一性 就是uu id是最好保证唯一性的

12:57.480 --> 13:03.560
好 那么这里呢 就生成了这么一个id啊 生成这个id 过后呢 会在这个表格里边加一条数据啊 就是一个id

13:03.840 --> 13:07.560
后边是什么呢 后边是任何东西啊 在我们GS里边可以表现成一个对象

13:08.160 --> 13:13.200
啊 就是我们 关于这个浏览器 我给他对应一个id啊 就是有个人来了 我给你

13:13.600 --> 13:18.880
分配一个id啊 然后呢 那么跟你相关的数据呢 我就保存在服务器上

13:19.500 --> 13:21.100
然后呢 同时把这个id

13:21.940 --> 13:30.180
通过cookie的形式发送到服务器 也就是使用session的时候 本身他就是天生的时候呢 他都跟cookie有关系

13:30.980 --> 13:34.100
直接通把这个id呢 发送 通过cookie发送到浏览器

13:34.580 --> 13:40.980
因为浏览器里边是不是存了一个cookie cookie里边存啥 就存123 对吧 就存这个id 其他啥都不存 有没有用户信息 没有啥都没有

13:41.620 --> 13:47.780
好 比方说这里 然后另一个有浏览器又来了啊 然后服务器呢 你看 哎 这个浏览器是新的 对吧 是不是新的

13:48.120 --> 13:52.760
新的的话 我给你建一个id 为什么 服务器怎么知道是新的

13:53.240 --> 13:58.160
因为他没有给我 把session id给我发过来 他没有给我发session id过来 所以说我认为是新的

13:58.400 --> 14:02.720
于是呢 我又建立一个新的session id 唯一的id 又给他生成一个数据

14:03.360 --> 14:08.480
然后把这个session id发通到浏览器 对吧 浏览器这个浏览器是不是又存出了 对不对 好后来

14:09.960 --> 14:14.280
有一个浏览器想做登录 于是呢 他发了一个登录的请求过来

14:14.980 --> 14:19.460
包括帐号密码 对吧 然后呢 同时由于他之前存出过session id

14:19.780 --> 14:23.620
就是把session id也给我复带过来了 那么假设他登录成功了

14:24.500 --> 14:33.020
登录成功了 是不是有用户信息 哎 服务器这边呢 他就发现 哦 这个人不是第一次请求了 啊 如果说第一次请求又来一次 对吧 来一次

14:33.100 --> 14:40.420
然后呢 存数据 然后把session id发过去 但是他不是第一次请求了 他是后来的请求 后来的请求他已经把session id给我发过来了

14:41.080 --> 14:46.880
发过来过后呢 我就很简单了 我就不再去表格里面新建了 我就找到之前的session id 是不找到这个对象

14:47.480 --> 14:52.320
然后呢 我就服务器就可以操作了 往这个对象里边加一些我们想要加的一些身份数据

14:52.840 --> 14:54.240
比方说当前登录的用户是啥

14:54.920 --> 15:01.600
不要意思吧 那么他这个留言其实在后续请求的时候 比方说就访问某一些接口 需要全线 那么他仍然会把这个session id带过来

15:01.840 --> 15:07.560
服务器可以检查这个id对应的数据里面 有没有登录过 登录过的话 那么ok 我就认为你登录了

15:08.000 --> 15:10.200
对吧 这些数据全在服务器上 非常的安全

15:10.640 --> 15:14.720
而且他可以存出大量的信息 但是你看一下这个服务器的压力是不是很大

15:15.480 --> 15:17.400
他是不是要存出所有用户的事情

15:18.400 --> 15:24.320
对不对 是不是要存出所有用户的事情 对吧 他压力还是蛮大的 而且他还有一个问题就是

15:25.080 --> 15:31.520
流量器关闭的 服务器是不知道的 流量器关闭的服务器怎么知道的 告诉我 他怎么知道流量器关闭的 有些人会说

15:31.980 --> 15:35.420
是这个window on close 一个事件 那如果他直接断键了呢

15:36.260 --> 15:40.300
直接硬承去结束进程了 对吧 这对你很难说他干嘛的

15:41.500 --> 15:44.060
因此 服务器是很难知道那个就是

15:45.980 --> 15:53.460
流量器关闭了 因此 服务器很多时候 他有个过期时间 就是长久 长期有些生产 长期没有再用了

15:54.500 --> 15:58.260
就流量器没有用这个id给我寝求过来了 那么我就把这个信息销毁掉

15:59.060 --> 16:01.300
在内存里面销毁掉 当然这是在内存的情况

16:01.620 --> 16:05.260
也可以不小毁 把它放到数据库 也行啊 就是他用做法很多的

16:06.180 --> 16:13.660
或者是放到一个文件 对吧 而且不一定是埋涉口数据库 还可以 一般我一般来说 我们用那个session的话 一般是用那个readies数据库

16:13.660 --> 16:18.020
但是readies呢 我们没有现在没有学过 我们后边会专门有一个课来讲readies

16:19.340 --> 16:24.780
总之呢 我们学习后的东西呢 你要保持敬畏之心 后的这个世界是非常非常大的

16:25.280 --> 16:32.760
我们只是给他讲一个概貌 因为主要的目的呢 是为了前后端的 前后端的这么一个配合

16:33.280 --> 16:38.160
前后端的这么一个沟通 以后呢 你跟后端同时打交道啊 你要知道他在说什么

16:38.800 --> 16:40.760
主要是起这么一个目的 好 讲完了

16:41.760 --> 16:47.720
session的原理 那么我们来看一下个session在漏掉接式里面怎么用啊 如果说在漏掉接式里面要用session的话 到底是一个怎么用法

16:48.040 --> 16:51.960
通过使用漏的接式啊 然后使用session 我们可以

16:52.900 --> 17:00.580
嗯 能够体验 真正的后端 实际上大概是怎么一个怎么一个用法啊 这里面有一个网站啊 它其实就是express的中间键

17:03.780 --> 17:08.540
啊 就是一个express的中间键啊 叫做express session好像是

17:09.660 --> 17:13.500
啊 这些AP还要说一说啊 我不是很记得说啊 现在就突然这么卡

17:14.820 --> 17:20.180
叫做啊 对express session 我复制一下 安装一下

17:24.920 --> 17:32.040
啊 那么怎么用呢 他实际上是个中间键 因此呢 你只需要去导入他啊 导入这个session 然后调用他 然后给他一个

17:32.320 --> 17:35.360
得到好 他就会得到一个中间键啊 你看一下下面有个例子啊

17:35.720 --> 17:39.080
又是session 是不是调用给他一些配置啊 还得到这个中间键了 来吧

17:39.760 --> 17:42.480
我们到这个音列车里边去 别别在这边

17:43.960 --> 17:44.680
音列车里边去

17:45.440 --> 17:51.120
啊 我们在哪里使用session 如果说你要使用的话 我建议你甚至在静态页面之前都可以使用啊

17:51.540 --> 17:55.180
静态页面之前都可以使用session的 因为他访问静态页面的也会给他勾到session的

17:55.860 --> 18:01.500
只要来请求过来了 他没有给我复杂session id 那我们就给他建议session啊 来吧 我给他建议一个session

18:02.820 --> 18:03.540
呃require

18:04.900 --> 18:05.420
express

18:06.380 --> 18:10.180
session 使用那个中间键啊 然后呢 app use

18:11.180 --> 18:11.500
session

18:12.660 --> 18:19.140
里边传他传配置啊 传配置 那能不能不传配置呢 一切都摸认了 当然可以啊 当然可以 就摸认吧

18:20.120 --> 18:22.840
好 这样就使就使用了这个中间键了 对吧 非常简单

18:23.800 --> 18:32.720
好 使用了这个中间键过后呢 我们现在呢 他就自动了具备了session的功能的 我们啥都不做 我们来看一下啊 我们现在呢 把这个服务器运行起来

18:34.080 --> 18:34.400
start

18:36.910 --> 18:38.750
好 现在呢 我们打开扭蛋器

18:39.830 --> 18:41.990
找个local start 嗯local 5008

18:43.470 --> 18:43.670
咱

18:45.750 --> 18:49.510
option require 啊 他还必须要 他说还必须要传这个

18:50.250 --> 18:54.010
还必须要传那个配置啊 来传一个吧 我就给他个空配置吧

18:55.210 --> 18:57.330
啊 还必须要传 那我们看一下吧 传啥嘛

18:58.810 --> 19:00.730
嗯 有啥可以传的呢

19:02.410 --> 19:07.490
他有他你看啊 他这里边有cookie的配置啊 有跟跟cookie相关的配置 我们来看一下吧 看这个

19:08.130 --> 19:13.330
有跟cookie相关的配置 那么跟cookie的相关的配置就是什么呢 因为我们刚才的原理图里边就说过了

19:13.650 --> 19:18.450
他这个session的原理啊 他是要往个cookie里边发发东西的 对吧 发东西的 那么

19:18.510 --> 19:25.070
cookie 那么这个cookie什么时候过期啊 这一等等等等啊 他需要进行配置的 那么这个什么时候过期呢 他的默认情况下呢就是

19:25.710 --> 19:28.750
是now啊 你看他这个default value 啊 pass是这个

19:29.430 --> 19:35.670
atp only is to secure the force max age is now max age will now就表示汇化结束后过期

19:36.230 --> 19:39.470
这是session的默认情况 就浏览器关闭完了过后

19:40.030 --> 19:45.950
汇化就结束了 如果说你希望浏览器那边长久的存出cookie的话 那么你可以加上max age

19:46.570 --> 19:52.090
就这么个意思啊 包括一肚妹啊这些东西 对吧 我觉得没有什么可以配置的呀 我还配置啥呀

19:52.890 --> 19:55.250
哦 明白了 他让你配这个

19:56.610 --> 19:58.970
他让你配这个玩意 叫做secrets

20:01.010 --> 20:08.200
这个secrets是啥意思呢 这个secrets表示的是加密的 我们来看一下 我觉得这个secrets

20:09.840 --> 20:10.560
他这样子

20:11.540 --> 20:20.660
这个secrets啊 他是他是要进行加密的 就是对那个客户端的那个session id要进行加密啊 他要自动的加密和解密

20:21.100 --> 20:25.660
他这里说说好了说到了这么一个东西 就是以前我们学cookie的时候 是不是学过这么一个

20:26.460 --> 20:30.060
cookie里面说的也可以加上一个secrets 对不对 所以可以加上一个密要

20:30.700 --> 20:37.060
那如果说你要解析cookie的话 那么也应该是应该在这个地方和这个地方的使用相同的secrets

20:37.440 --> 20:43.520
原来的意思吗 他就这么个意思啊 他让你加密 我们给他随便写一个吧 写个东西再加密嘛 随便写一个

20:44.160 --> 20:45.520
咱里可以随即生成一个字幕刺

20:46.880 --> 20:47.480
好 冒出

20:48.880 --> 20:49.120
上映

20:50.960 --> 20:57.860
哦secrets不是配在哦对对对不是配在这儿了 是配在这儿的 API啊

20:58.660 --> 21:00.620
我实在是记不住 好 ok

21:01.580 --> 21:01.900
可以了

21:02.940 --> 21:06.580
好 接下来我们来看一下 我们没有登录 没有登录 我们再看一下这边的

21:07.620 --> 21:07.940
cookie

21:09.380 --> 21:09.860
多了一个

21:10.500 --> 21:11.340
cookie的名字叫什么呢

21:11.580 --> 21:13.140
connectsid

21:13.580 --> 21:16.580
对吧 这个东西里面存的是啥 存的就是secretsid

21:17.140 --> 21:18.980
这里面存的就是secretsid 原来的意思吧

21:19.500 --> 21:21.140
这就是他的这种模式

21:21.740 --> 21:24.580
这个secretsid是通过密要加密过后的一个youuid

21:25.100 --> 21:25.740
就这么个意思

21:26.260 --> 21:31.620
当然那个cookie你各种配置啊 你还可以过去时间的都可以配置 我们就不再去配置了

21:32.460 --> 21:35.780
好 那么这个cookie的名字其实也可以改的 我记得他这里边有一个叫做

21:36.080 --> 21:39.080
叫做什么呢 name

21:39.680 --> 21:41.480
mode的名字就是connectsid

21:41.480 --> 21:42.800
我们比方说把这个name改一下

21:43.280 --> 21:47.920
改一下改一下改成改成那个secretsid

21:51.280 --> 21:51.520
刷新

21:52.760 --> 21:53.080
好 你看

21:53.960 --> 21:57.360
现在是不是变成了secretsid了 对吧 变成这个了 当然之前的东西

21:57.600 --> 22:03.040
之前的东西呢是没有没有删除掉的 你看每次是不是不一样 对吧 这是用secretsid过后了

22:03.100 --> 22:08.620
我们请求服务器 服务器发现啊 这个中间线发现 你没有给我发送这个名字的cookie

22:08.620 --> 22:12.300
那么我就可以重新生生的id 所以每次生生都不一样 对吧 我们之前参调

22:12.940 --> 22:18.460
这是 但是再刷新的话就一样了 因为我们现在已经有了 已经有这个secretsid了 他们就一样了

22:18.980 --> 22:24.260
好 这是关于这个secretsid有了 那么现在服务器那边其实又已经维护了这么一个表格了

22:24.780 --> 22:28.420
只是个表格里边啥东西都没有 对不对 其实他这个地方已经有了

22:28.900 --> 22:32.460
这个id 因为id已经对应了一个对象了 只是你没有去用它而已

22:32.960 --> 22:35.880
好 那么现在我们能用secretsid来完成一个登录认证 看着啊

22:36.760 --> 22:40.160
怎么用secretsid来完成一个登录认证 今天让我们到那个就是

22:42.160 --> 22:43.280
首先到那个页面上去

22:44.440 --> 22:47.920
页面上去呢 我们直接在gsh里面 写上一个post

22:48.680 --> 22:49.160
一个登录

22:52.670 --> 22:52.990
fetch

22:55.600 --> 22:56.000
API

22:57.960 --> 22:58.320
admin

22:59.960 --> 23:00.280
login

23:00.640 --> 23:01.160
登录 对吧

23:02.000 --> 23:02.480
method

23:03.320 --> 23:03.720
post

23:05.080 --> 23:06.120
还有什么呢

23:06.420 --> 23:08.480
还有这个header's

23:09.760 --> 23:11.280
content tab

23:12.820 --> 23:14.100
application

23:15.640 --> 23:16.400
application

23:16.660 --> 23:16.920
json

23:20.230 --> 23:21.510
然后再来

23:22.510 --> 23:23.030
body

23:23.550 --> 23:24.830
body呢就帐号密码

23:25.590 --> 23:26.110
json

23:27.390 --> 23:28.150
帐号密码

23:28.670 --> 23:31.990
帐号呢login id 帐号是什么呢 帐号是abc

23:31.990 --> 23:34.030
然后呢密码呢login

23:35.310 --> 23:36.870
password 123 123

23:37.330 --> 23:39.890
ok 那么现在呢我们去完成登录 看一下能不能登录

23:43.710 --> 23:44.390
解析一下

23:46.070 --> 23:47.870
然后再把输出

23:48.630 --> 23:49.910
响应服务器的结果

23:50.870 --> 23:52.670
好 保存 接下来我们来看啊

23:52.990 --> 23:55.230
我们这里还是做个按钮吧

23:55.230 --> 23:56.310
在页面上做个按钮

23:57.590 --> 23:58.350
login

23:58.870 --> 23:59.630
登录

24:01.720 --> 24:03.240
好 我们在这边使用

24:05.000 --> 24:06.840
login onclick

24:09.320 --> 24:11.160
点击的时候呢 我们预讯这段代码

24:12.040 --> 24:13.560
点击登录的时候 运行正在代码

24:13.800 --> 24:15.040
好 保存

24:15.440 --> 24:16.320
把上面去掉了

24:19.000 --> 24:20.240
好 接下来我们来看啊

24:20.760 --> 24:21.280
刷新

24:21.520 --> 24:23.560
做一个按钮了 然后接下来我们来检查

24:23.560 --> 24:24.840
看能不能登录成功啊

24:25.880 --> 24:26.400
这边

24:26.640 --> 24:27.160
点击

24:27.920 --> 24:28.960
他说什么呢

24:29.200 --> 24:30.740
not allowed

24:32.020 --> 24:33.300
不允许的

24:34.580 --> 24:35.360
这什么意思

24:36.120 --> 24:36.880
什么不允许的

24:40.480 --> 24:42.760
他到了服务器了 到了服务器他说不允许的

24:42.860 --> 24:44.260
那我们现在断点调试了啊

24:44.500 --> 24:45.780
断点调试看哪一层出了问题

24:46.540 --> 24:47.580
我们到那个

24:48.340 --> 24:48.860
首先到这吧

24:49.100 --> 24:50.380
所以我们之前在做一个灯

24:50.660 --> 24:51.940
的身份点的 应该不是

24:52.180 --> 24:52.700
耳朵命

24:52.940 --> 24:54.500
我们到耳朵命里面 看一下有没有到这

24:55.000 --> 24:55.500
运行起来

24:56.020 --> 24:59.100
像是代码写多了 要出问题的话你就不是很好找了啊

24:59.360 --> 25:00.380
我们要断点调试

25:00.620 --> 25:01.140
再来点击

25:01.860 --> 25:03.460
好 说明这句话没到的吧

25:03.700 --> 25:04.460
是不是没到这句话

25:04.740 --> 25:06.260
没有到这句话 我们要再往前

25:06.520 --> 25:07.020
往前找

25:07.300 --> 25:08.060
到头坑里面去找

25:09.700 --> 25:10.620
在这里打个断点

25:11.380 --> 25:11.900
点击

25:12.560 --> 25:14.040
还是没有

25:14.640 --> 25:16.200
还是出了问题

25:17.000 --> 25:18.240
然后呢 我们再来

25:18.600 --> 25:19.240
再来

25:19.520 --> 25:20.200
我看一下

25:21.640 --> 25:23.760
到哪里去找一找呢

25:24.640 --> 25:25.960
COS

25:26.320 --> 25:28.360
后面我们用了 就用到一中间间了啊

25:28.360 --> 25:30.200
就Token Mid-Wire 要Token Mid-Wire

25:30.200 --> 25:31.040
他这里都没有到

25:31.800 --> 25:33.040
就是他请求这里都没有到

25:35.800 --> 25:36.600
服务器

25:36.800 --> 25:39.560
服务器那边没有给我详细任何消息

25:40.320 --> 25:41.320
Not allowed

25:43.350 --> 25:44.110
不

25:44.530 --> 25:45.730
不允许的

25:46.370 --> 25:48.010
但是他没有说什么不允许的

25:48.890 --> 25:49.610
我们到这个

25:49.730 --> 25:50.730
到这个Error里边

25:50.930 --> 25:52.330
到Error里边看一看报什么错

25:52.330 --> 25:53.370
他一定是到了这儿吧

25:53.490 --> 25:54.690
应该已经是到了这儿

25:55.090 --> 25:55.810
点击

25:55.970 --> 25:56.530
到这儿了

25:56.770 --> 25:57.930
我们看一下一个错误信息

25:59.770 --> 26:00.250
他说什么

26:00.330 --> 26:00.890
说什么呢

26:01.530 --> 26:02.490
Not allowed

26:03.810 --> 26:05.490
他没有给我再详细的信息了

26:06.850 --> 26:08.730
他没有给我再详细的信息了

26:09.450 --> 26:11.210
他只有一个Error not allowed

26:12.010 --> 26:13.210
我看一下哪里出了问题

26:15.090 --> 26:17.130
然后我这里把个sation去掉了

26:17.450 --> 26:18.730
我看一下sation去掉

26:22.920 --> 26:23.800
重新来

26:23.800 --> 26:25.120
断电调式

26:26.320 --> 26:27.080
点击

26:27.920 --> 26:29.160
还是Not allowed

26:29.160 --> 26:30.880
谁想去掉的都还是Not allowed

26:30.880 --> 26:32.000
说明了还有问题

26:32.160 --> 26:33.800
就是跟那个sation是没关系的

26:34.720 --> 26:35.760
现在我们要找啊

26:35.760 --> 26:36.240
要找

26:36.240 --> 26:38.400
那么这个时候要用这种大法了

26:38.640 --> 26:39.440
一个个去

26:40.520 --> 26:41.280
一个个去

26:44.030 --> 26:44.630
点击

26:45.070 --> 26:46.030
好这个去了就没了

26:46.030 --> 26:46.510
对吧

26:46.630 --> 26:47.430
这个去了就没了

26:47.430 --> 26:48.830
说明了这个地方出了问题

26:49.130 --> 26:50.050
明白了

26:50.250 --> 26:52.330
他我这里维护了一个就是whiteness

26:53.690 --> 26:54.810
维护了这么一个东西

26:55.690 --> 26:56.290
明白吧

26:56.690 --> 26:57.930
我维护了这么一个东西

26:58.090 --> 26:58.810
这个东西呢

26:59.010 --> 27:00.210
是要做跨域的

27:00.330 --> 27:01.970
因为我这里自定义的函数

27:01.970 --> 27:03.730
因为我们现在根本就没有跨域

27:03.730 --> 27:04.130
对吧

27:04.130 --> 27:05.170
我们根本就没有跨域

27:05.170 --> 27:05.610
所以说呢

27:05.610 --> 27:07.210
导致到这里导致到问题的

27:07.210 --> 27:08.250
我们现在愿意运行一下

27:08.650 --> 27:09.570
是这里导致到问题

27:09.770 --> 27:10.370
点灯录

27:10.370 --> 27:10.850
你看

27:11.290 --> 27:12.050
RNG

27:12.490 --> 27:14.130
他就是我们自己的地址

27:14.130 --> 27:14.490
对吧

27:14.490 --> 27:15.610
是不是我们自己的地址

27:16.610 --> 27:17.290
因此呢

27:17.290 --> 27:18.650
现在遇到了这么一个问题

27:18.670 --> 27:20.550
就是他请求我们自己的地址

27:20.550 --> 27:21.990
都请求的有问题了

27:21.990 --> 27:22.870
这个RNG

27:23.270 --> 27:23.910
所以说呢

27:23.910 --> 27:24.470
我们这里呢

27:24.470 --> 27:25.430
把自己的地址加上

27:25.870 --> 27:26.790
加上一个白名单

27:29.590 --> 27:30.390
把自己的地址

27:30.790 --> 27:31.670
localhost

27:33.510 --> 27:34.190
aztp

27:34.710 --> 27:36.710
localhost5008

27:38.470 --> 27:38.710
好

27:38.710 --> 27:39.110
保存

27:40.710 --> 27:41.110
再来

27:41.590 --> 27:42.270
现在没问题了

27:43.350 --> 27:44.310
把这个C型来加上

27:48.410 --> 27:48.850
点击

27:49.450 --> 27:50.210
现在没问题了

27:50.490 --> 27:51.770
那现在说都登陆成功了

27:51.770 --> 27:52.130
对吧

27:52.130 --> 27:52.970
说登陆成功了

27:53.710 --> 27:53.910
好

27:53.910 --> 27:54.950
登陆成功过后

27:55.350 --> 27:57.270
现在我们要做的事情就是

27:57.550 --> 27:57.990
在这里

27:57.990 --> 27:58.590
耳朵面这里

27:58.590 --> 27:59.590
登陆成功过后

27:59.870 --> 28:01.950
我们现在要做的事情不是说

28:02.750 --> 28:03.870
我给他响应Cookie了

28:04.110 --> 28:05.070
不再响应Cookie了

28:05.390 --> 28:06.950
而是去响应什么呢

28:07.110 --> 28:08.350
响应那个Session

28:08.910 --> 28:09.350
在这里

28:09.710 --> 28:10.990
我们看一下Session是怎么做的

28:11.230 --> 28:11.870
怎么来做呢

28:11.990 --> 28:13.910
当我们使用了这个中间键之后

28:14.150 --> 28:16.510
他会在请求对象里边给你

28:16.670 --> 28:17.510
附带一个对象

28:17.510 --> 28:18.110
叫Session

28:18.750 --> 28:19.430
就这么一个对象

28:19.870 --> 28:21.390
我们来打印出一个对象看一下吧

28:21.950 --> 28:22.670
说出这个Rig

28:23.110 --> 28:23.510
Session

28:24.870 --> 28:25.430
保存

28:25.670 --> 28:26.390
接下来再来看

28:27.830 --> 28:28.350
点登陆

28:28.670 --> 28:29.510
然后看控制台

28:29.910 --> 28:31.670
你看这个Session里边

28:32.070 --> 28:32.630
他保存了

28:32.630 --> 28:34.150
他有个什么只有一个属性

28:34.150 --> 28:34.950
这个属性叫Cookie

28:34.950 --> 28:36.230
就是他相关的Cookie

28:36.710 --> 28:37.910
他相关的Cookie信息

28:38.070 --> 28:38.470
对吧

28:38.670 --> 28:39.870
那么这个Session哪来的

28:39.990 --> 28:41.350
这个Session他就是客户端

28:41.350 --> 28:42.630
请求过来的时候

28:42.870 --> 28:43.390
就在这儿

28:44.110 --> 28:45.750
把这个Session ID是不是发过来了

28:45.750 --> 28:47.670
登陆的时候把Session ID发过来了

28:47.790 --> 28:49.190
那么请求过来的时候

28:49.190 --> 28:50.550
是不是我们就可以通过这个ID

28:50.550 --> 28:51.790
找到这个相应的对象

28:52.070 --> 28:52.310
对吧

28:52.370 --> 28:53.770
对象里边目前是空的

28:53.930 --> 28:55.370
他只记得跟这个

28:55.370 --> 28:56.730
跟这个Cookie相关的信息

28:56.970 --> 28:58.090
所以我们这个Session对象

28:58.090 --> 28:59.290
他不是整个这个表格

28:59.610 --> 29:00.370
他是指的是

29:00.650 --> 29:02.690
跟这个ID对应的这个对象

29:02.930 --> 29:03.810
指的是这么个东西

29:04.130 --> 29:05.930
那么这个对象里边你可以加任何东西

29:05.930 --> 29:07.330
往里边放任何东西

29:07.330 --> 29:08.450
比方说我们给他放一个

29:08.570 --> 29:09.530
既然我们登陆成功了

29:09.530 --> 29:10.490
我就给他放一个

29:11.090 --> 29:11.850
logging user

29:12.330 --> 29:13.770
把整个logging user对象放进去

29:14.210 --> 29:14.570
Session

29:15.690 --> 29:16.850
logging user

29:17.170 --> 29:18.370
把整个logging user对象

29:19.410 --> 29:19.810
without

29:19.810 --> 29:20.370
来放进去

29:20.650 --> 29:21.450
可不可以当然可以

29:22.610 --> 29:23.770
好那么现在我们就做到了

29:23.770 --> 29:25.010
那么这个Session里边

29:25.010 --> 29:26.410
是不是得到的logging有点对象了

29:26.930 --> 29:27.890
好接下来我们再看

29:28.130 --> 29:28.650
到这边来

29:30.050 --> 29:31.170
再来一次点logging

29:31.170 --> 29:33.050
客户端那边没有任何变化

29:33.050 --> 29:33.930
你看客户端那边

29:33.930 --> 29:35.090
Session还是个Session

29:36.050 --> 29:37.490
Session ID是不是还是个Session

29:37.490 --> 29:37.850
对吧

29:37.850 --> 29:40.130
他没有存储任何跟用户属举相关的东西

29:40.130 --> 29:41.570
把这个头衡去掉了

29:41.570 --> 29:42.210
我们以前的

29:42.290 --> 29:43.810
Cookie存房的头衡去掉了

29:44.210 --> 29:45.210
是不是没有跟

29:45.370 --> 29:47.530
任何用户属举相关的东西都没有存储

29:47.530 --> 29:48.370
属举存在哪儿的

29:48.370 --> 29:49.450
是不是存在服务器的

29:49.730 --> 29:50.210
对不对

29:50.610 --> 29:51.970
接下来我们再来看

29:52.070 --> 29:53.030
后续的请求

29:53.030 --> 29:54.470
我们怎么来验证全线的

29:54.670 --> 29:56.110
我们到后续的请求里边去

29:56.830 --> 29:58.470
我们找到那个就是

30:00.710 --> 30:01.950
找到那个

30:03.430 --> 30:04.710
之前的token made aware

30:04.870 --> 30:05.470
找到这儿

30:06.270 --> 30:07.430
之前我们怎么做的

30:07.830 --> 30:10.070
之前我们是首先验证

30:10.070 --> 30:12.270
你请求的接口

30:12.270 --> 30:13.270
需不需要全线

30:13.510 --> 30:14.510
如果说你

30:15.230 --> 30:16.310
不需要全线的话

30:16.310 --> 30:17.710
那么我们直接到下一步

30:17.710 --> 30:18.950
交给后续的中间见

30:19.070 --> 30:20.910
如果说你需要全线的话

30:21.070 --> 30:21.550
那么

30:22.870 --> 30:24.870
你需要全线的话

30:24.870 --> 30:26.270
那么我们来验证的头衡

30:26.270 --> 30:26.390
对吧

30:26.390 --> 30:28.070
之前是用Cookie来验证的

30:28.070 --> 30:29.670
那么现在不用Cookie来验证了

30:29.990 --> 30:30.670
用什么来验证

30:30.670 --> 30:32.470
用那个session来验证

30:32.790 --> 30:34.870
怎么用session来验证

30:34.870 --> 30:35.670
先拿给你看一下

30:35.670 --> 30:36.350
我这样子去

30:36.510 --> 30:37.830
我在这里直接输出这个

30:37.830 --> 30:38.910
Rake.session

30:42.020 --> 30:42.340
保存

30:42.340 --> 30:43.140
再来一次

30:43.460 --> 30:44.300
现在我们先登录

30:44.300 --> 30:45.620
我们这里写两个按钮

30:47.730 --> 30:48.410
再来一个按钮

30:50.650 --> 30:51.850
这里我们给他

30:52.530 --> 30:54.530
设置一个就是gass

30:55.110 --> 30:56.190
就是什么

30:57.230 --> 30:58.590
put student

30:59.590 --> 31:00.990
update student

31:02.750 --> 31:04.150
update student

31:04.550 --> 31:05.470
修改学生

31:06.030 --> 31:06.950
在这里写一下

31:10.620 --> 31:11.420
upstew

31:13.220 --> 31:13.900
unclick

31:15.540 --> 31:17.140
然后我们这里用废弃API

31:17.140 --> 31:17.780
还是一样的

31:17.780 --> 31:18.420
把复制一下

31:24.310 --> 31:25.710
这里边我们写上那个

31:26.150 --> 31:26.870
student

31:29.430 --> 31:29.950
student

31:29.950 --> 31:31.770
然后修改一个学生

31:31.770 --> 31:32.370
修改哪个学生

31:32.930 --> 31:33.490
我看一下说句

31:34.770 --> 31:35.370
学生

31:36.210 --> 31:37.370
修改1771吧

31:37.690 --> 31:38.090
就这个

31:39.210 --> 31:40.010
我们说到第一个

31:40.010 --> 31:40.770
修改第一个

31:41.090 --> 31:42.210
方便看一点

31:42.370 --> 31:43.170
1201

31:44.250 --> 31:45.570
修改1201

31:45.570 --> 31:46.410
反正就是测试嘛

31:46.810 --> 31:48.090
这个方法是put

31:48.810 --> 31:50.130
header是一样的

31:50.130 --> 31:51.570
json stringy

31:51.570 --> 31:51.850
feet

31:54.330 --> 31:55.530
修改了学生

31:55.530 --> 31:56.690
然后修把账

31:57.090 --> 31:58.530
不是账号了

31:58.770 --> 31:59.490
把名字

31:59.750 --> 32:00.950
把name给修改一下

32:01.510 --> 32:02.910
name修改成123

32:03.150 --> 32:03.790
就这样子

32:05.390 --> 32:05.910
好来吧

32:06.630 --> 32:07.590
来我们来试一下

32:08.790 --> 32:09.190
小心

32:09.790 --> 32:09.990
好

32:09.990 --> 32:10.790
现在我们来修改学生

32:11.350 --> 32:11.750
你看

32:13.270 --> 32:14.350
他这里有发生错误了

32:14.510 --> 32:16.750
conversory the property get time of undefend

32:17.990 --> 32:18.910
这又是哪个错误

32:20.310 --> 32:21.270
又来断练调试吧

32:21.630 --> 32:22.750
因为这个单码写多了

32:22.750 --> 32:23.430
你肯定

32:24.110 --> 32:25.630
你没有办法避免错误的

32:25.630 --> 32:26.630
只能断练调试了

32:28.150 --> 32:28.710
来吧

32:29.050 --> 32:30.410
他这个错误是在哪里发生的

32:30.410 --> 32:31.130
我们首先

32:31.610 --> 32:32.610
首先给大家讲一讲

32:32.610 --> 32:33.770
怎么定位错误

32:34.010 --> 32:35.250
我们这里来修改学生

32:35.250 --> 32:36.690
那应该肯定要到这

32:37.450 --> 32:37.810
对不对

32:37.810 --> 32:39.330
肯定要肯定是要到这

32:39.810 --> 32:41.250
就是学生的修改方法

32:42.450 --> 32:43.210
所以要到到这

32:43.530 --> 32:43.810
对不对

32:43.810 --> 32:44.730
我们要这里打个断点

32:45.170 --> 32:45.690
好来吧

32:46.290 --> 32:47.450
我们看他有没有运行到这

32:50.480 --> 32:50.840
修改

32:51.160 --> 32:51.920
好运行到这了

32:52.280 --> 32:54.720
我们看一下id1201 body

32:55.120 --> 32:56.640
body有个name等于123

32:56.640 --> 32:56.920
对吧

32:56.920 --> 32:58.040
这个数据是正常常过来的

32:58.040 --> 32:58.760
说明什么

32:58.880 --> 33:00.800
说明客户端那边是没有问题的

33:00.860 --> 33:01.100
对吧

33:01.100 --> 33:02.860
他数据的都正常传过来了

33:03.260 --> 33:04.860
那是服务器这边出了问题

33:05.100 --> 33:05.300
好

33:05.300 --> 33:05.980
我们这里

33:07.500 --> 33:08.740
进入这个方法

33:09.420 --> 33:09.900
点这个

33:10.420 --> 33:10.980
进入

33:14.400 --> 33:15.400
单步调试

33:15.720 --> 33:16.320
为什么

33:18.240 --> 33:20.000
undefined

33:20.560 --> 33:21.880
这里他为什么没有进入

33:21.880 --> 33:22.400
那没事

33:22.400 --> 33:23.160
我们在这里

33:23.360 --> 33:24.520
他肯定是在调用这个方法

33:24.520 --> 33:25.480
still updates

33:25.480 --> 33:26.880
就是surface里面的方法

33:27.880 --> 33:28.640
updates

33:30.320 --> 33:31.360
students and surveys

33:31.640 --> 33:33.080
他在调用他这里面的方法

33:33.760 --> 33:34.880
那么也就在调用这

33:35.000 --> 33:35.520
对吧

33:35.520 --> 33:36.320
在调用这

33:37.280 --> 33:40.280
调用这应该是没有问题的呀

33:43.430 --> 33:44.670
应该是没有问题的呀

33:47.240 --> 33:48.600
我看能不能运行到这

33:49.440 --> 33:50.000
点击

33:50.560 --> 33:50.880
哎

33:50.880 --> 33:52.040
他没有运行到这

33:54.020 --> 33:54.460
不对了

33:54.460 --> 33:55.860
这个这个地方就不对了

33:55.940 --> 33:57.180
他没有运行到这个方法

34:01.120 --> 34:01.960
刷新一次啊

34:05.840 --> 34:07.360
这边都刷新不了了

34:07.800 --> 34:08.840
这边爆出了吗

34:09.040 --> 34:10.040
也没有爆出

34:12.200 --> 34:12.840
等一下啊

34:12.840 --> 34:14.000
这边都刷新不了了

34:15.400 --> 34:16.920
内存占用过高

34:18.160 --> 34:18.720
互利

34:21.780 --> 34:22.980
这地方出了一点问题

34:23.380 --> 34:23.780
来

34:23.900 --> 34:24.780
关掉再来调

34:27.240 --> 34:27.840
nocals

34:28.160 --> 34:29.400
host 508

34:29.880 --> 34:30.560
打不开了

34:31.320 --> 34:32.400
现在我们停止服务器

34:33.400 --> 34:34.800
把服务器停止重新启动

34:38.070 --> 34:39.350
我看一下哪里出了问题

34:42.320 --> 34:42.920
呃

34:42.920 --> 34:43.880
这边我们打了

34:43.960 --> 34:45.040
从再来一次啊

34:45.040 --> 34:46.560
在这个这个地方打个断点

34:50.440 --> 34:50.600
好

34:50.600 --> 34:51.720
再来点击

34:52.520 --> 34:53.960
这句话也运行过来了

34:54.440 --> 34:56.280
id1201

34:57.320 --> 34:58.240
ob界

34:59.640 --> 35:00.280
name

35:00.680 --> 35:01.560
123

35:02.440 --> 35:03.040
ware

35:04.990 --> 35:05.150
哎

35:05.150 --> 35:05.950
就这么一句话

35:05.950 --> 35:07.150
他居然出问题了

35:08.230 --> 35:08.950
就这么一句话

35:08.950 --> 35:09.870
他居然出问题了

35:10.350 --> 35:11.550
把那一名修改成一

35:12.230 --> 35:12.870
id

35:13.310 --> 35:14.350
1201

35:14.510 --> 35:16.070
我们看一下数据库有改动吗

35:17.150 --> 35:17.790
刷新

35:18.670 --> 35:19.470
没有改动

35:21.190 --> 35:21.790
然后呢

35:21.790 --> 35:22.270
我们

35:22.590 --> 35:23.750
这句话让他运行

35:25.070 --> 35:26.190
运行出去

35:26.630 --> 35:27.350
他这边

35:27.350 --> 35:27.790
服

35:27.910 --> 35:29.750
这边给我显示的一个错误

35:30.590 --> 35:30.870
啊

35:30.870 --> 35:32.070
我这些这边就不减了

35:32.070 --> 35:32.910
我这个东西不减

35:32.970 --> 35:33.930
顺便给大家想一想

35:33.930 --> 35:34.610
怎么来调出

35:35.890 --> 35:36.610
啊

35:36.610 --> 35:37.050
这个地方

35:37.050 --> 35:37.570
他说

35:37.570 --> 35:39.530
get cannot read the property

35:40.490 --> 35:42.570
get 10 of undefend

35:45.610 --> 35:46.650
这个地方

35:46.650 --> 35:47.970
他运行完了

35:47.970 --> 35:48.930
他就应该把数

35:49.090 --> 35:50.170
我不说别的

35:50.170 --> 35:52.570
他至少应该把数据库给我改了

35:52.810 --> 35:53.330
结果呢

35:53.330 --> 35:54.770
他没有改这个数据库

35:56.410 --> 35:56.650
好

35:56.650 --> 35:57.650
那么这个时候呢

35:57.650 --> 35:58.170
看着啊

35:58.170 --> 35:58.770
我们要用

35:59.410 --> 36:01.690
有一点点去缩小这个范围

36:02.050 --> 36:03.250
现在就是这个方法出了问题

36:03.250 --> 36:03.610
对吧

36:04.170 --> 36:04.530
id

36:04.550 --> 36:05.550
121

36:05.550 --> 36:06.590
这个地方是一个对象

36:06.590 --> 36:06.710
啊

36:06.710 --> 36:07.310
就是

36:07.310 --> 36:08.990
那么现在呢

36:08.990 --> 36:10.430
我们就用这种方式

36:11.030 --> 36:12.110
我们把这个音乐

36:12.110 --> 36:13.070
我们把这个音乐

36:13.070 --> 36:13.550
是呀

36:16.010 --> 36:16.330
音乐

36:16.330 --> 36:16.930
车啊

36:16.930 --> 36:18.090
我们直接在

36:18.090 --> 36:18.890
路德介石里面

36:18.890 --> 36:19.850
直接调用他

36:21.130 --> 36:21.930
直接调用他

36:22.090 --> 36:22.890
来测试一下

36:24.410 --> 36:25.610
看到底是哪里出了问题

36:27.560 --> 36:28.080
啊

36:28.080 --> 36:28.800
这里是

36:28.800 --> 36:30.400
stew service

36:31.080 --> 36:31.720
service

36:33.080 --> 36:33.720
require

36:35.040 --> 36:35.240
啊

36:35.240 --> 36:35.760
去这些地方

36:35.760 --> 36:36.480
我也可以减掉

36:36.480 --> 36:36.840
他说

36:36.900 --> 36:37.740
还是把我留吧

36:38.380 --> 36:39.060
以后呢

36:39.060 --> 36:40.740
你们不可能永远都是正常情况

36:41.300 --> 36:42.820
肯定是会遇到很多错误的

36:43.660 --> 36:44.100
嗯

36:44.100 --> 36:44.740
这里是

36:44.740 --> 36:45.340
update

36:45.340 --> 36:46.100
student

36:46.100 --> 36:46.620
我们把这个

36:46.620 --> 36:48.020
121传进去

36:48.020 --> 36:48.900
你们以后遇到错误

36:48.900 --> 36:50.500
就用类似的那种方式啊

36:50.500 --> 36:51.380
去不断的去说

36:51.380 --> 36:52.780
说话的范围

36:52.780 --> 36:53.620
123

36:53.620 --> 36:54.100
好

36:54.100 --> 36:55.380
他就是这个函数出了问题

36:55.380 --> 36:55.820
对吧

36:55.820 --> 36:56.500
那么来看一下

36:56.500 --> 36:56.900
这个函数

36:56.900 --> 36:57.700
为什么会出问题

36:59.340 --> 36:59.700
好

36:59.700 --> 37:00.220
首先看

37:00.220 --> 37:01.420
直接运行这个函数啊

37:01.420 --> 37:03.180
看他会不会出问题

37:03.180 --> 37:07.040
直接运行他

37:07.040 --> 37:08.440
这样我们看

37:08.500 --> 37:09.580
他这里报错了

37:09.580 --> 37:09.740
哎

37:09.740 --> 37:11.220
报出就好了

37:11.220 --> 37:11.340
啊

37:11.340 --> 37:12.140
就是就是个错误

37:12.140 --> 37:12.300
对吧

37:12.300 --> 37:13.540
carnals read the property

37:13.540 --> 37:14.700
of get time

37:14.700 --> 37:15.540
of undefend

37:18.910 --> 37:23.270
我去修改

37:23.270 --> 37:25.110
我去修改这个学生

37:26.590 --> 37:27.790
这是我修改的对象

37:29.750 --> 37:31.470
这是我修改的对象

37:31.470 --> 37:32.230
然后呢

37:32.230 --> 37:32.830
这个对象里边

37:32.830 --> 37:35.190
我们把那个修改成123

37:35.190 --> 37:39.430
他为什么告诉我

37:39.430 --> 37:42.460
他告诉我啥呀

37:42.460 --> 37:43.180
get time

37:43.180 --> 37:43.740
这个方法

37:44.720 --> 37:47.440
有没有可能是我之前的

37:47.440 --> 37:49.640
这个模型里边

37:49.640 --> 37:52.120
学生这里边使用了get time

37:52.120 --> 37:52.320
呢

37:53.880 --> 37:59.130
有没有可能是这个地方的

37:59.130 --> 37:59.530
哦

38:01.530 --> 38:02.130
明白了

38:03.250 --> 38:04.530
明白了

38:04.530 --> 38:06.330
他要在这里边构建模型

38:07.610 --> 38:09.450
他要在这里边构建这个模型的时候

38:09.450 --> 38:11.250
由于我们没有传递birthday

38:12.290 --> 38:14.450
由于我们没有传递birthday

38:14.450 --> 38:15.210
所以说呢

38:15.210 --> 38:16.050
他这里的birthday

38:16.070 --> 38:17.310
我们使用了get

38:17.310 --> 38:18.830
get的birthday得不到

38:18.830 --> 38:19.070
对吧

38:19.070 --> 38:19.870
这是个undefend

38:19.870 --> 38:21.070
得到的是undefend

38:21.070 --> 38:22.990
然后再调用get time

38:22.990 --> 38:24.030
是不是得不到东西

38:24.030 --> 38:24.870
对吧

38:24.870 --> 38:26.150
我们把范围一说小过后呢

38:26.150 --> 38:27.510
慢慢连想就想到这了

38:27.510 --> 38:28.670
所以说这里呢

38:28.670 --> 38:29.070
这个地方呢

38:29.070 --> 38:30.630
我们还没有写得很好啊

38:30.630 --> 38:31.110
我们这里呢

38:31.110 --> 38:34.920
可以先做一个判断吗

38:34.920 --> 38:35.320
birth

38:37.120 --> 38:41.700
先做个判断

38:41.700 --> 38:43.180
如果说

38:43.180 --> 38:44.140
birth有值

38:45.300 --> 38:46.460
那么我再返回这个

38:53.260 --> 38:54.300
如果说没有值

38:54.300 --> 38:55.220
我就给你返回undefend

38:57.180 --> 38:58.060
这样子来写

38:58.700 --> 38:59.020
好

38:59.020 --> 38:59.420
行了

38:59.420 --> 39:00.060
咱们再来看

39:03.500 --> 39:04.540
接下来我们在这里

39:04.540 --> 39:06.140
再来保存

39:08.140 --> 39:09.820
然后到数据库里看一下

39:10.820 --> 39:11.220
刷新

39:11.820 --> 39:12.780
没问题了

39:12.780 --> 39:13.460
就这个地方

39:14.180 --> 39:15.180
先把改过去

39:15.740 --> 39:16.220
改过去

39:18.750 --> 39:18.950
好

39:18.950 --> 39:19.430
行了

39:19.430 --> 39:19.990
没问题了

39:19.990 --> 39:20.390
没问题了

39:20.390 --> 39:22.230
我们把这个地方就去掉了

39:22.230 --> 39:23.070
保存

39:23.070 --> 39:23.190
好

39:23.190 --> 39:25.030
接下来我们再一次到一些一边里边去

39:25.030 --> 39:26.110
再一次进来

39:26.110 --> 39:26.910
然后修改学生

39:28.070 --> 39:28.590
他告诉你

39:28.590 --> 39:29.230
修改成功了

39:29.230 --> 39:30.270
然后我们看一下这里

39:31.670 --> 39:32.230
刷新

39:32.230 --> 39:33.230
是不是修改成功了

39:33.230 --> 39:34.990
那么现在他为什么能够修改成功

39:34.990 --> 39:36.350
为什么呢

39:36.350 --> 39:39.230
就是因为他保存了C型ID

39:39.230 --> 39:41.830
这里我们使用了C型ID

39:41.830 --> 39:42.630
保存了

39:42.630 --> 39:44.470
然后在我们修改学生的时候

39:44.470 --> 39:46.710
是不是会把C型ID发过去

39:46.710 --> 39:47.830
而发过去的时候

39:47.830 --> 39:49.230
服务器他那个就是

39:49.230 --> 39:51.830
C型里边是不是就已经保存了

39:51.830 --> 39:52.590
那个

39:52.590 --> 39:54.110
我们的数据了

39:54.110 --> 39:54.990
服务器的C型里边

39:54.990 --> 39:55.670
你看

39:55.670 --> 39:56.510
我们在这

39:56.510 --> 39:57.430
当时在哪里验证的

39:57.430 --> 39:58.750
在这里验证的

39:58.750 --> 40:00.030
服务器的C型里边

40:00.090 --> 40:01.210
他就已经保存了

40:01.210 --> 40:01.770
这个

40:01.770 --> 40:04.700
就是

40:04.700 --> 40:06.260
我这个是直接往后脚了

40:06.260 --> 40:07.220
我都没有验证

40:07.220 --> 40:09.980
C型里边应该就保存了那个就是

40:09.980 --> 40:10.620
用户

40:10.620 --> 40:12.460
但是为什么这里打印出来没有

40:12.460 --> 40:13.420
为什么没有用户

40:13.420 --> 40:14.260
是这样子

40:14.260 --> 40:15.900
我们的服务器不断的在重启

40:15.900 --> 40:17.660
因为我们的C型的数据

40:17.660 --> 40:20.180
是不是保存到那个服务器的内存里边了

40:20.180 --> 40:22.700
而服务器重启过内存是不是清空了

40:22.700 --> 40:23.300
对吧

40:23.300 --> 40:24.540
客户官那边还有C型ID

40:24.540 --> 40:26.340
但是服务器不好意思已经没有了

40:26.340 --> 40:28.540
所以他现在又回到了没有登录的状态

40:28.540 --> 40:30.100
因此我们再来看一下

40:30.120 --> 40:31.760
如果说为先登录

40:31.760 --> 40:33.680
登录过后现在服务器肯定有C型了

40:33.680 --> 40:34.840
那个C型里边肯定有东西了

40:34.840 --> 40:36.240
因为我们刚才登录成功过后

40:36.240 --> 40:38.480
是不是在C型里边已经保存了个Nokin U-Z

40:38.480 --> 40:39.880
再看一下这边

40:39.880 --> 40:41.120
服务器登录成功之后

40:41.120 --> 40:43.240
是不是在这里保存了这个C型里边东西

40:43.240 --> 40:43.480
对吧

40:43.480 --> 40:44.400
保存到服务器了

40:44.400 --> 40:47.280
因此我们在图片里边就相当于是在这

40:47.280 --> 40:48.920
给他保存个Nokin U-Z

40:48.920 --> 40:49.800
那么后续的请求

40:49.800 --> 40:51.000
只要把C型ID发过来

40:51.000 --> 40:52.440
是不是Nokin U-Z就可以找到了

40:52.440 --> 40:54.480
然后我们现在再去后续发动请求

40:54.480 --> 40:56.320
把这个去掉

40:56.320 --> 40:56.960
然后再来

40:56.960 --> 40:57.760
update

40:59.120 --> 40:59.960
update

41:00.100 --> 41:00.660
你看

41:00.660 --> 41:02.500
现在是不是有了Nokin U-Z

41:02.500 --> 41:04.660
注意刚才是服务器重新启动了

41:04.660 --> 41:05.660
重新启动的服务器

41:05.660 --> 41:08.020
他对C型全部要重新消失

41:08.020 --> 41:09.940
不要说我们现在再来启动一次服务器

41:09.940 --> 41:12.100
我们随便找一个地方以保存

41:12.100 --> 41:13.580
Nodiman他就会重新启动

41:13.580 --> 41:14.620
重新启动服务器过后

41:14.620 --> 41:16.020
我们现在再来去点这个

41:17.180 --> 41:17.620
你看

41:17.620 --> 41:18.380
是不是又没了

41:18.380 --> 41:18.780
对吧

41:18.780 --> 41:21.900
因为我们目前的C型是保存在内存里边的

41:21.900 --> 41:24.260
这是关于这一块

41:24.260 --> 41:25.740
那么现在我们在这个地方

41:25.740 --> 41:27.180
把C当个验证写完吧

41:28.160 --> 41:29.680
这边把验证写完

41:29.680 --> 41:30.480
判断一下

41:30.480 --> 41:33.520
如果说你这个C型里边的什么

41:33.520 --> 41:35.360
Nokin U-Z有值

41:35.360 --> 41:36.800
说明什么

41:36.800 --> 41:39.320
说明已经登录过了

41:40.600 --> 41:41.160
对吧

41:41.160 --> 41:42.040
已经登录过了

41:42.040 --> 41:43.200
然后很简单

41:43.200 --> 41:44.400
我们那个就完事了

41:45.960 --> 41:49.000
直接从往后传的就完事了

41:49.000 --> 41:50.280
如果说没有登录过

41:50.280 --> 41:51.800
那么我们是不是这个玩意

41:51.800 --> 41:52.080
对吧

41:52.080 --> 41:54.520
Els没有登录过

41:54.520 --> 41:55.400
对吧

41:55.500 --> 41:57.860
然后RigRisNext

41:57.860 --> 41:58.660
对不对

41:58.660 --> 41:59.580
是没有这种模式

41:59.580 --> 42:00.140
保存

42:00.140 --> 42:00.860
接下来我们再来看

42:02.780 --> 42:04.220
我们现在去请求

42:04.220 --> 42:05.380
是不是你没有这个

42:05.380 --> 42:06.420
没有这个权限

42:06.420 --> 42:07.900
因为现在C型服务器重新启动

42:07.900 --> 42:08.980
C型的数据全没了

42:08.980 --> 42:09.380
对吧

42:09.380 --> 42:11.300
我们需要重新登录

42:11.300 --> 42:12.500
然后再点这个

42:12.500 --> 42:13.460
说就可以了

42:13.460 --> 42:14.420
就可以得到了

42:14.420 --> 42:17.660
而且科普端到这边保存了极少的信息

42:17.660 --> 42:19.020
就保存了一个C型ID

42:19.020 --> 42:22.060
所有的身份信息是不是全在服务器上

42:22.060 --> 42:23.220
非常非常的安全

42:23.220 --> 42:24.340
这是C型的做法

42:24.360 --> 42:26.640
C型的做法实际上比Cookie更加简单

42:26.640 --> 42:28.720
就是我们这种模式更加简单

42:28.720 --> 42:30.720
你看我们只需要来登录的时候

42:30.720 --> 42:31.360
登录成功过后

42:31.360 --> 42:33.040
往C型里面记录一个东西

42:33.040 --> 42:34.720
然后在权限验证的时候

42:34.720 --> 42:36.760
就验证C型里面全部存在就完事了

42:36.760 --> 42:37.920
全部存在就完事了

42:37.920 --> 42:38.640
对不对

42:38.640 --> 42:40.240
它就是这种模式来处理的

42:40.240 --> 42:41.200
当然我们现在C型的

42:41.200 --> 42:44.760
是在内存里面重启服务器过后就没了

42:44.760 --> 42:46.760
不过文凭是根本就不会重启

42:46.760 --> 42:47.880
不会怎么去重启服务器

42:47.880 --> 42:48.720
对不对

42:48.720 --> 42:49.640
如果在大系统里边

42:49.640 --> 42:52.800
C型是要往RigRis数据库里面保存的

42:52.800 --> 42:54.200
这是关于这个

42:54.220 --> 42:56.340
把C型的原理给大家讲了

42:56.340 --> 42:57.140
这些原理讲了过后

42:57.140 --> 42:58.740
我们下节课来讲一个JWT

