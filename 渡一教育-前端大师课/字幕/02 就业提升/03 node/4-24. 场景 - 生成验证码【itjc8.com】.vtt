WEBVTT

00:00.240 --> 00:02.240
这一刻咱们来说一下这个验证嘛

00:02.240 --> 00:04.240
你们凭上网的时候呢

00:04.240 --> 00:06.240
特别是登录啊 注册啊这地方

00:06.240 --> 00:08.240
这有可能会给你填验证嘛

00:08.240 --> 00:10.240
或者是发布一篇文章之类的

00:10.240 --> 00:12.240
都有可能会填验证吧

00:12.240 --> 00:16.240
验证版的作用是什么 先说作用吧

00:16.240 --> 00:17.240
验证版的作用是咋呢

00:17.240 --> 00:20.240
其实就是为了防止机器提交

00:20.240 --> 00:22.240
因为我们知道这个提交表达啊

00:22.240 --> 00:24.240
其实就是一个ATB协议 对吧

00:24.240 --> 00:25.240
就是一个ATB传输

00:25.240 --> 00:26.240
那完全可以写个程序呗

00:26.240 --> 00:28.240
那比方说我们现在学的逗德结石

00:28.240 --> 00:29.240
逗德结石你用控制台

00:29.240 --> 00:31.240
就写个程序

00:31.240 --> 00:33.240
一个循环 循环一万次

00:33.240 --> 00:35.240
提交一万次表达到一个服务器

00:35.240 --> 00:37.240
对吧 那服务器如果说没有验证嘛

00:37.240 --> 00:39.240
这个功能的话

00:39.240 --> 00:40.240
那么就会导致

00:40.240 --> 00:42.240
是不是 如果说你写

00:42.240 --> 00:43.240
提交的是注册数据的话

00:43.240 --> 00:45.240
那么是不是添加了一万个用户

00:45.240 --> 00:47.240
对吧 那就这就很可怕了

00:47.240 --> 00:49.240
就是有可能会机器来

00:49.240 --> 00:51.240
魔力人来进行提交啊 提交表达

00:51.240 --> 00:54.240
像我们像什么12306

00:54.240 --> 00:55.240
员皮词抢票的时候

00:55.240 --> 00:57.240
是不是很恶心的验证吧 对吧

00:57.240 --> 00:59.240
就是各种机器给你提交

00:59.240 --> 01:00.240
各种机器去抢票

01:00.240 --> 01:01.240
就导致了这样的结果

01:01.240 --> 01:03.240
因为它本质就是给GDP传输

01:03.240 --> 01:05.240
验证嘛其实它最重要的重点就是

01:05.240 --> 01:07.240
让我们的服务器呢

01:07.240 --> 01:09.240
能够到底知道你是不是个人

01:09.240 --> 01:11.240
是人还是机器

01:11.240 --> 01:13.240
其实呢 服务器呢很麻烦的

01:13.240 --> 01:14.240
真的是很麻烦的

01:14.240 --> 01:16.240
它很难分辨到底是人还是机器

01:16.240 --> 01:18.240
所以说呢 我们最早的时候呢

01:18.240 --> 01:20.240
验证嘛就是通过一个图片

01:20.240 --> 01:21.240
对吧 一个很模糊的图片

01:21.240 --> 01:23.240
一个图片上有很多的干扰线

01:23.240 --> 01:25.240
有些干扰的东西

01:25.240 --> 01:28.240
总之呢让服务器呢觉得

01:28.240 --> 01:30.240
就是让那个机器呢很难分辨

01:30.240 --> 01:32.240
就是服务器给他一张图片

01:32.240 --> 01:33.240
机器就很难分辨

01:33.240 --> 01:34.240
出来的图片里面写的是啥

01:34.240 --> 01:35.240
但是人仔细看的话

01:35.240 --> 01:36.240
它是可以分辨的对吧

01:36.240 --> 01:38.240
可以分辨图片里面写的是啥

01:38.240 --> 01:40.240
然后呢 你要把图片里边的东西写上

01:40.240 --> 01:42.240
然后服务器再去进行比对

01:42.240 --> 01:43.240
看你写的对不对

01:43.240 --> 01:44.240
如果说写得对的话

01:44.240 --> 01:46.240
然后我就允许进一步操作

01:46.240 --> 01:47.240
如果说不对的话

01:47.240 --> 01:48.240
我就给你发出一个错误

01:48.240 --> 01:49.240
对吧

01:49.240 --> 01:51.240
通过这种方式来阻拦

01:51.240 --> 01:52.240
阻拦机器

01:52.240 --> 01:55.240
当然了 机器的请求一定是会到服务器的

01:55.240 --> 01:57.240
只是服务器阻不阻难的问题

01:57.240 --> 01:59.240
就兼得起这么一个作用

01:59.240 --> 02:01.240
不过呢 现在图片识别技术的发展

02:01.240 --> 02:03.240
像这种传统的验证码呢

02:03.240 --> 02:05.240
已经很难绕过机器了

02:05.240 --> 02:08.240
现在呢 都一般都是用行为验证码

02:08.240 --> 02:10.240
然后拖一个滑块对不对

02:10.240 --> 02:13.240
或者是什么

02:13.240 --> 02:14.240
找出图片的不同的地方

02:14.240 --> 02:16.240
总之呢 就是有各种各样的玩法

02:16.240 --> 02:18.240
我们把它叫做行为验证码

02:18.240 --> 02:19.240
行为验证码呢

02:19.240 --> 02:20.240
我们这一刻讲不了

02:20.240 --> 02:21.240
因为这个东西呢

02:21.240 --> 02:23.240
我们要自己写的话 还挺麻烦的

02:23.240 --> 02:25.240
我们一般来会使用一些第三方库

02:25.240 --> 02:27.240
一些一般都要给钱的这个玩意

02:27.240 --> 02:28.240
一般都要给钱的

02:28.240 --> 02:29.240
谷歌稍微有开

02:29.240 --> 02:31.240
谷歌倒是开放有接口

02:31.240 --> 02:32.240
但是谷歌的接口呢

02:32.240 --> 02:35.240
我们国内呢 用起来也比较头痛

02:35.240 --> 02:36.240
所以说呢 我们国内呢

02:36.240 --> 02:38.240
倒是有很多不错的

02:38.240 --> 02:39.240
但是一般都要付费

02:39.240 --> 02:40.240
到时候呢 我们

02:40.240 --> 02:41.240
后边我给他说了

02:41.240 --> 02:42.240
我会录一个

02:42.240 --> 02:45.240
专门使用第三方接口的一个课程

02:45.240 --> 02:47.240
那个课程还蛮好玩的

02:47.240 --> 02:49.240
各种发送短信 发送邮件

02:49.240 --> 02:50.240
做一些短信发送的事情

02:50.240 --> 02:52.240
什么天气余报啊之类的

02:52.240 --> 02:53.240
还蛮好玩的

02:53.240 --> 02:54.240
但是现在还没有啊

02:54.240 --> 02:55.240
这个事情呢

02:55.240 --> 02:57.240
反正我把坑先挖在这

02:57.240 --> 02:58.240
将来什么时候讲

02:58.240 --> 02:59.240
我也不知道

02:59.240 --> 03:00.240
反正课程讲完了之后再说

03:00.240 --> 03:02.240
我课程讲完了之后

03:02.240 --> 03:03.240
是不是讲移动端

03:03.240 --> 03:05.240
还是去讲那个

03:05.240 --> 03:08.240
这个玩意啊 这个第三方库

03:08.240 --> 03:09.240
第三方那个接口

03:09.240 --> 03:11.240
我们到时候再说吧

03:11.240 --> 03:12.240
好 所以我们这一课呢

03:12.240 --> 03:13.240
验证码的类型啊

03:13.240 --> 03:15.240
我们用 使用的是普通验证码

03:15.240 --> 03:16.240
就是最传统的验证码

03:16.240 --> 03:17.240
比方说你以后呢

03:17.240 --> 03:18.240
到一些中小型企业

03:18.240 --> 03:21.240
或者是做一些接一些私伙的啊

03:21.240 --> 03:23.240
那他这个安全性要求没有那么高

03:23.240 --> 03:25.240
那个小望在谁去搞他啊

03:25.240 --> 03:26.240
没有人去搞他啊

03:26.240 --> 03:28.240
说他简单的做一个验证码就行了

03:28.240 --> 03:30.240
能够防止一些简单程序

03:30.240 --> 03:33.240
呃 机器提交就可以了

03:33.240 --> 03:35.240
他也不想去给这个钱

03:35.240 --> 03:36.240
所以说我们把普通验证码

03:36.240 --> 03:37.240
还是有用的啊

03:37.240 --> 03:38.240
你看一些小望在

03:38.240 --> 03:40.240
还是用普通验证码对不对

03:40.240 --> 03:43.240
那么验证码具体怎么呢

03:43.240 --> 03:44.240
怎么一个流程

03:44.240 --> 03:45.240
那么把流程说一下

03:45.240 --> 03:46.240
先把流程说一下

03:46.240 --> 03:47.240
首先就是我们网页上

03:47.240 --> 03:48.240
会获取一张图片

03:48.240 --> 03:49.240
这个图片谁给我了

03:49.240 --> 03:50.240
就服务器给你的

03:50.240 --> 03:52.240
那么服务器怎么给你的图片呢

03:52.240 --> 03:53.240
就是客户端啊

03:53.240 --> 03:55.240
他通过一个image元素啊

03:55.240 --> 03:56.240
他的src地址啊

03:56.240 --> 03:57.240
来获取一个验证码图片

03:57.240 --> 03:58.240
比方说吧

03:58.240 --> 03:59.240
我们这里呢

03:59.240 --> 04:01.240
到客户端里边去

04:01.240 --> 04:02.240
这什么玩意啊

04:02.240 --> 04:03.240
这上里头的对吧

04:03.240 --> 04:04.240
上去

04:04.240 --> 04:05.240
比方说我们这里呢

04:05.240 --> 04:07.240
就有一个验证码

04:07.240 --> 04:10.240
比方说一个文本框吧

04:10.240 --> 04:12.240
一个文本框

04:12.240 --> 04:13.240
然后呢

04:13.240 --> 04:14.240
主要是一张图片

04:14.240 --> 04:15.240
主要是一张图片

04:15.240 --> 04:16.240
文本框那些都不重要

04:16.240 --> 04:17.240
我们先把这张去掉

04:17.240 --> 04:18.240
就一个图片

04:18.240 --> 04:19.240
图片呢

04:19.240 --> 04:20.240
我们比方说

04:20.240 --> 04:21.240
访问服务器的一个地址

04:21.240 --> 04:22.240
访问什么地址呢

04:22.240 --> 04:24.240
比方说就capture吧

04:24.240 --> 04:25.240
capture

04:25.240 --> 04:26.240
验证码的意思

04:26.240 --> 04:27.240
这些都没有

04:27.240 --> 04:28.240
验证码

04:28.240 --> 04:29.240
就这么个意思

04:29.240 --> 04:30.240
那么我们比方

04:30.240 --> 04:31.240
请求这个地址

04:31.240 --> 04:32.240
我们希望服务器呢

04:32.240 --> 04:35.240
能够给我返回一张验证码

04:35.240 --> 04:36.240
就这么个意思

04:36.240 --> 04:38.240
那么服务器怎么返回呢

04:38.240 --> 04:39.240
那服务器是不是要写

04:39.240 --> 04:40.240
这个接口对不对

04:40.240 --> 04:41.240
那么这里呢

04:41.240 --> 04:42.240
我们新建一个

04:42.240 --> 04:43.240
新建一个文件

04:43.240 --> 04:44.240
给他取个名字吧

04:44.240 --> 04:45.240
就叫做capture

04:45.240 --> 04:47.240
made

04:47.240 --> 04:48.240
调节词

04:48.240 --> 04:49.240
那么这边呢

04:49.240 --> 04:50.240
我们还是用路由的方式

04:50.240 --> 04:51.240
express

04:51.240 --> 04:52.240
require

04:53.240 --> 04:55.240
express

04:56.240 --> 04:57.240
express

04:57.240 --> 04:58.240
然后呢

04:58.240 --> 04:59.240
是rotor

05:01.240 --> 05:02.240
写错了

05:03.240 --> 05:04.240
rotor

05:04.240 --> 05:05.240
express

05:05.240 --> 05:07.240
然后得到一个路由

05:07.240 --> 05:08.240
最后呢

05:08.240 --> 05:09.240
我们不要忘记啊

05:09.240 --> 05:10.240
把路由导出

05:10.240 --> 05:11.240
我经常忘记

05:11.240 --> 05:12.240
rotor导出

05:12.240 --> 05:13.240
那么这个rotor

05:13.240 --> 05:14.240
接受一个请求

05:14.240 --> 05:15.240
请求

05:15.240 --> 05:16.240
rotor

05:16.240 --> 05:17.240
接受get

05:17.240 --> 05:18.240
一个请求

05:18.240 --> 05:19.240
请求什么呢

05:19.240 --> 05:21.240
请求这个地址的时候

05:21.240 --> 05:23.240
请求capture

05:23.240 --> 05:24.240
capture

05:24.240 --> 05:25.240
请求这个地址的时候呢

05:25.240 --> 05:26.240
我来给他

05:26.240 --> 05:27.240
想用一个验证码

05:27.240 --> 05:28.240
就这么

05:28.240 --> 05:29.240
就这么个意思

05:29.240 --> 05:30.240
那么当然呢

05:30.240 --> 05:31.240
这些号中间键过后呢

05:31.240 --> 05:32.240
我们在这里是不是要使用

05:32.240 --> 05:33.240
我们在哪里使用呢

05:33.240 --> 05:35.240
我们在API之前吧

05:35.240 --> 05:36.240
这个模板以前

05:36.240 --> 05:37.240
API之前

05:37.240 --> 05:38.240
找一个合适的位置

05:38.240 --> 05:39.240
你看我们现在是不是使用了

05:39.240 --> 05:40.240
很多中间键了

05:40.240 --> 05:41.240
对不对

05:41.240 --> 05:42.240
实际上你们

05:42.240 --> 05:43.240
真实的开发中

05:43.240 --> 05:44.240
那么多啊

05:44.240 --> 05:45.240
我只是要讲解

05:45.240 --> 05:46.240
忘记把他全部给你讲完了

05:46.240 --> 05:47.240
这边呢

05:47.240 --> 05:48.240
我们使用一个

05:48.240 --> 05:49.240
yous

05:49.240 --> 05:50.240
你们以后开发的时候呢

05:50.240 --> 05:51.240
根据具体的情况

05:51.240 --> 05:52.240
来自行去处理

05:53.240 --> 05:55.240
capture mid

05:55.240 --> 05:56.240
capture mid

05:57.240 --> 05:58.240
那行了

05:58.240 --> 05:59.240
我们客户站是不是去

05:59.240 --> 06:00.240
那么这个地方

06:00.240 --> 06:01.240
是不是会接受到请求

06:01.240 --> 06:02.240
对吧

06:02.240 --> 06:03.240
就这么个意思

06:03.240 --> 06:04.240
比方说我们这里

06:05.240 --> 06:07.240
当然现在肯定是啥都没有

06:07.240 --> 06:08.240
对不对

06:08.240 --> 06:09.240
根本没有给他想用一张图片

06:09.240 --> 06:10.240
因为客户站

06:10.240 --> 06:11.240
这边请求过来

06:11.240 --> 06:12.240
是不是一张图片

06:12.240 --> 06:13.240
没有给他想用图片

06:13.240 --> 06:14.240
那么怎么给他想用

06:14.240 --> 06:15.240
验证码的图片呢

06:15.240 --> 06:16.240
用两种方式

06:16.240 --> 06:17.240
我这里呢

06:17.240 --> 06:18.240
说一种比较灵活的方式呢

06:18.240 --> 06:19.240
然后呢

06:19.240 --> 06:20.240
在具体的演示

06:20.240 --> 06:22.240
另一种比较简单的方式

06:22.240 --> 06:23.240
比较灵活的方式呢

06:23.240 --> 06:25.240
大家建议大家使用这个裤

06:26.240 --> 06:27.240
叫做

06:27.240 --> 06:28.240
low

06:28.240 --> 06:29.240
我收一下

06:29.240 --> 06:30.240
low the cavers

06:30.240 --> 06:31.240
就这个裤

06:33.240 --> 06:34.240
你们

06:34.240 --> 06:35.240
如果说比较灵活的方式的话

06:35.240 --> 06:36.240
就至于花

06:36.240 --> 06:37.240
花这个验证表

06:37.240 --> 06:38.240
验证码

06:38.240 --> 06:39.240
怎么花呢

06:39.240 --> 06:40.240
就用这个裤

06:40.240 --> 06:41.240
这个裤呢

06:41.240 --> 06:42.240
low the cavers

06:42.240 --> 06:43.240
里边可以

06:43.240 --> 06:44.240
画一个

06:44.240 --> 06:45.240
把它当成一个cavers来画

06:45.240 --> 06:46.240
cavers没学过了

06:46.240 --> 06:47.240
对不对

06:47.240 --> 06:48.240
cavers是不是在浏览期才有

06:48.240 --> 06:49.240
对不对

06:49.240 --> 06:50.240
那么

06:50.240 --> 06:51.240
low the cavers

06:51.240 --> 06:52.240
实际上就是

06:52.240 --> 06:53.240
内存里边的一个画布

06:53.240 --> 06:54.240
你在这边画

06:54.240 --> 06:55.240
你看一下它的用法

06:55.240 --> 06:56.240
用法的话

06:56.240 --> 06:58.240
就是crease canvas

06:58.240 --> 06:59.240
创建一个cavers

06:59.240 --> 07:00.240
然后你看是不一样的

07:00.240 --> 07:01.240
对不对

07:01.240 --> 07:02.240
画线

07:02.240 --> 07:03.240
那么这里边

07:03.240 --> 07:04.240
可以是不是可以画文字

07:04.240 --> 07:05.240
可以画各种字母

07:05.240 --> 07:06.240
可以画各种文字

07:06.240 --> 07:07.240
对吧

07:07.240 --> 07:08.240
可以画各种干扰线

07:08.240 --> 07:09.240
可以画点

07:09.240 --> 07:10.240
可以画一个背景

07:10.240 --> 07:11.240
中文也都可以画

07:11.240 --> 07:12.240
画完了过后

07:12.240 --> 07:14.240
你可以生成一个data URL

07:14.240 --> 07:15.240
对吧

07:15.240 --> 07:16.240
一个就是

07:16.240 --> 07:17.240
一面几的数据

07:17.240 --> 07:18.240
也可以

07:18.240 --> 07:19.240
后边也有接口

07:19.240 --> 07:21.240
生成一个就是

07:21.240 --> 07:25.240
叫做crease

07:25.240 --> 07:26.240
它可以生成

07:26.240 --> 07:28.240
生成到一个文件流里边去

07:28.240 --> 07:29.240
to buffer

07:29.240 --> 07:30.240
生成一个就是

07:30.240 --> 07:31.240
文件的buffer数据

07:31.240 --> 07:33.240
你可以把它保存到文件里边去

07:33.240 --> 07:34.240
也可以

07:34.240 --> 07:36.240
直接把这个数据

07:36.240 --> 07:37.240
直接写到

07:37.240 --> 07:38.240
响应到客户端

07:38.240 --> 07:39.240
不保存文件

07:39.240 --> 07:40.240
这都可以

07:40.240 --> 07:41.240
这是手动的话

07:41.240 --> 07:42.240
这个很麻烦的

07:42.240 --> 07:43.240
要用camels至于画

07:43.240 --> 07:44.240
但是比较灵活

07:44.240 --> 07:45.240
另一种是有一个

07:45.240 --> 07:47.240
已经现成的一个验证码库

07:47.240 --> 07:48.240
我们就看一下

07:48.240 --> 07:49.240
这个比较简单

07:49.240 --> 07:50.240
但是它里边

07:50.240 --> 07:51.240
很多东西

07:51.240 --> 07:52.240
就不好没法调了

07:52.240 --> 07:53.240
比方说它的样式

07:53.240 --> 07:54.240
它字体

07:54.240 --> 07:55.240
就是字体的

07:55.240 --> 07:57.240
具体的写法

07:57.240 --> 07:58.240
这东西

07:58.240 --> 08:00.240
就不是那么好调

08:00.240 --> 08:03.240
叫做sve capture

08:03.240 --> 08:05.240
那么我们只需要安装它就行了

08:05.240 --> 08:06.240
安装

08:07.240 --> 08:08.240
npi

08:09.240 --> 08:14.240
叫做sve capture

08:14.240 --> 08:15.240
安装一下

08:15.240 --> 08:16.240
它用法非常非常简单

08:16.240 --> 08:19.240
就是它给你提供了一个函数

08:19.240 --> 08:22.240
给你提供了一个对象

08:22.240 --> 08:23.240
我来看一下

08:23.240 --> 08:25.240
给你提供了一个对象

08:25.240 --> 08:26.240
这个对象里边

08:26.240 --> 08:28.240
它有一个就是create方法

08:28.240 --> 08:29.240
就生成一个验证

08:29.240 --> 08:30.240
然后就完了

08:30.240 --> 08:31.240
就没了

08:31.240 --> 08:32.240
就这么简单

08:33.240 --> 08:34.240
你看我们输出

08:34.240 --> 08:35.240
在服务端输出

08:35.240 --> 08:36.240
但我现在还没有响应

08:36.240 --> 08:38.240
在服务端输出

08:38.240 --> 08:39.240
然后我们运行

08:39.240 --> 08:40.240
npm start

08:40.240 --> 08:42.240
你看服务端输出了什么

08:42.240 --> 08:43.240
输出了

08:43.240 --> 08:44.240
输出了一个啥

08:44.240 --> 08:46.240
输出了一个

08:46.240 --> 08:47.240
这是我们之前的

08:47.240 --> 08:48.240
是吧

08:48.240 --> 08:49.240
印这个

08:50.240 --> 08:52.240
这是我们之前的

08:52.240 --> 08:53.240
qr code

08:53.240 --> 08:54.240
去说一下

08:54.240 --> 08:55.240
然后把这个玩意

08:55.240 --> 08:56.240
这个玩意就删掉了

08:56.240 --> 08:57.240
怎么没用了

08:58.240 --> 08:59.240
看一下这服务端输出

08:59.240 --> 09:00.240
服务端输出的是这个东西

09:00.240 --> 09:02.240
是一个svg

09:02.240 --> 09:04.240
它生成了一个图片

09:04.240 --> 09:05.240
svg图片

09:05.240 --> 09:06.240
然后生成的文字

09:06.240 --> 09:07.240
就是验证码里面的文字是这个

09:07.240 --> 09:08.240
它给你得到了

09:08.240 --> 09:10.240
文字千万不要发给客户端

09:10.240 --> 09:12.240
你把文字发给客户端的话

09:12.240 --> 09:13.240
客户端就不就

09:13.240 --> 09:14.240
你看机器

09:14.240 --> 09:15.240
如果说请求服务器

09:15.240 --> 09:17.240
也服务器把验证码的文字告诉我了

09:17.240 --> 09:18.240
那就简单了

09:18.240 --> 09:20.240
机器就直接给他一个文字

09:20.240 --> 09:21.240
再重新请求的时候

09:21.240 --> 09:22.240
给他这个文字就完了

09:22.240 --> 09:24.240
千万不要把文字发送到客户端

09:24.240 --> 09:26.240
我们给客户端的是一个图片

09:26.240 --> 09:28.240
比方那个svg图片

09:28.240 --> 09:29.240
把这个玩意给客户端

09:29.240 --> 09:30.240
让他自己去识别吧

09:30.240 --> 09:32.240
然后文字我们是保存到服务器的

09:32.240 --> 09:33.240
是用来做比对的

09:34.240 --> 09:35.240
他把这两个东西都给你

09:35.240 --> 09:36.240
他给你的是一个svg

09:36.240 --> 09:38.240
好,那咱们来看一下吧

09:38.240 --> 09:39.240
那功能如何来响应呢

09:39.240 --> 09:40.240
其实特别简单

09:40.240 --> 09:41.240
他去这里

09:41.240 --> 09:42.240
下面说到了

09:42.240 --> 09:43.240
在express里面

09:43.240 --> 09:44.240
你可以

09:44.240 --> 09:45.240
这种方式

09:45.240 --> 09:46.240
创建一个验证码

09:46.240 --> 09:47.240
它里面不是有两个属性吗

09:47.240 --> 09:48.240
一个是文本

09:48.240 --> 09:49.240
文本就存到svg图片里面

09:49.240 --> 09:51.240
当然你可以用任何方式来存

09:51.240 --> 09:52.240
不要让你存数据库

09:52.240 --> 09:53.240
存什么东西

09:53.240 --> 09:55.240
svg图片本来就可以存那个数据库的

09:55.240 --> 09:56.240
对不对

09:56.240 --> 09:57.240
你可以存到任何地方

09:57.240 --> 09:59.240
然后你设置一下

09:59.240 --> 10:01.240
响应的消息格式

10:01.240 --> 10:02.240
是svg

10:02.240 --> 10:04.240
然后呢给他响应个200

10:04.240 --> 10:06.240
然后把这个svg的数据给他

10:06.240 --> 10:07.240
就完成了

10:07.240 --> 10:08.240
就这么简单

10:08.240 --> 10:10.550
我们复制一下吧

10:10.550 --> 10:11.550
到这边来

10:11.550 --> 10:14.760
你看

10:14.760 --> 10:16.760
现在我们这里

10:16.760 --> 10:17.760
我们把这个

10:17.760 --> 10:22.030
当然C性我之前是不是去掉了

10:22.030 --> 10:23.030
呃,C性去掉了

10:23.030 --> 10:24.030
去掉我再加上吧

10:24.030 --> 10:25.030
app use

10:25.030 --> 10:26.030
require

10:28.030 --> 10:29.030
express

10:29.030 --> 10:30.030
session

10:31.030 --> 10:33.030
然后

10:33.030 --> 10:35.030
给他一个secrets吧

10:35.030 --> 10:36.030
我们之前讲过的

10:36.030 --> 10:37.030
给他一个secrets

10:37.030 --> 10:38.030
他有加密的

10:38.030 --> 10:39.030
随便个secrets嘛

10:39.030 --> 10:40.030
比方说独一嘛

10:40.030 --> 10:41.030
独一,一定

10:41.030 --> 10:42.030
随便给他一个

10:42.030 --> 10:44.030
把session加加上

10:44.030 --> 10:46.030
那么这边是不是可以存session里边去了

10:46.030 --> 10:48.030
我们把验证码

10:48.030 --> 10:50.030
把验证

10:50.030 --> 10:54.030
码中的文本存放到

10:54.030 --> 10:55.030
session中

10:55.030 --> 10:57.030
我们这里可以再浮现输出一下吧

10:57.030 --> 10:59.030
我们存放到文本市场

10:59.030 --> 11:01.030
把session输出

11:01.030 --> 11:03.030
然后呢把这个图片发送给客户端

11:03.030 --> 11:05.030
是这么个意思

11:05.030 --> 11:07.030
那保存就写完了其实

11:07.030 --> 11:09.030
那么这一步就完成了

11:09.030 --> 11:10.030
就是

11:10.030 --> 11:11.030
诶,这一步

11:11.030 --> 11:13.030
这一步是不是就完成了

11:13.030 --> 11:14.030
生成随机图片

11:14.030 --> 11:15.030
服气保存

11:15.030 --> 11:16.030
随机图片中的文字

11:16.030 --> 11:18.030
文字保存在这

11:18.030 --> 11:19.030
然后图片发送给客户端

11:19.030 --> 11:20.030
那么客户端请求这个

11:20.030 --> 11:21.030
通过img元素

11:21.030 --> 11:22.030
请求这个接口的时候

11:22.030 --> 11:23.030
服气给他一个图片

11:23.030 --> 11:24.030
那么图片过来了过来

11:24.030 --> 11:25.030
他是不是可以把它宣传出来

11:25.030 --> 11:26.030
其实通过这个例子

11:26.030 --> 11:27.030
大家也可以清楚的看到

11:27.030 --> 11:28.030
我们要得到一张图片

11:28.030 --> 11:29.030
是不是服气

11:29.030 --> 11:31.030
必须要有一个图片文件了

11:33.030 --> 11:34.030
我要得到一张图片

11:34.030 --> 11:36.030
在客户端img元素

11:36.030 --> 11:37.030
得到一张图片

11:37.030 --> 11:38.030
服气是不是必须要有

11:38.030 --> 11:39.030
这个图片文件

11:40.030 --> 11:41.030
是吗

11:41.030 --> 11:42.030
你刚才看到过一个服气

11:42.030 --> 11:43.030
有这个图片文件吗

11:43.030 --> 11:44.030
哪有这个图片文件啊

11:44.030 --> 11:46.030
包括我们上阶课学的那个

11:47.030 --> 11:48.030
二维码

11:48.030 --> 11:49.030
二维码服气也可以不

11:49.030 --> 11:50.030
给它生成图片文件

11:50.030 --> 11:51.030
给它一个data URL

11:51.030 --> 11:52.030
对吧

11:52.030 --> 11:53.030
或者是直接用个buffer

11:53.030 --> 11:54.030
给它返回过去

11:54.030 --> 11:55.030
把图片的二金字

11:55.030 --> 11:56.030
数据返回过去就行了

11:56.030 --> 11:57.030
对不对

11:57.030 --> 11:58.030
那么客户端能不能

11:58.030 --> 11:59.030
显示出图片

11:59.030 --> 12:00.030
关键是看在于服气

12:00.030 --> 12:01.030
能不能给他

12:01.030 --> 12:02.030
想赢一个图片的

12:02.030 --> 12:03.030
而不在于

12:03.030 --> 12:05.030
服气到底有没有这个文件

12:05.030 --> 12:06.030
把这个二继字数据

12:06.030 --> 12:07.030
数据可能是服气的类群中

12:07.030 --> 12:08.030
构建出来的

12:08.030 --> 12:09.030
比方说验证码

12:09.030 --> 12:10.030
就不需要

12:10.030 --> 12:11.030
不一定要有文件的

12:12.030 --> 12:13.030
好那么现在呢

12:13.030 --> 12:15.030
我们把服气呢

12:15.030 --> 12:17.030
看一下

12:17.030 --> 12:18.030
我们这里面使用

12:19.030 --> 12:20.030
localhost 5008

12:21.030 --> 12:22.030
验证码是不是出来了

12:22.030 --> 12:23.030
对不对

12:23.030 --> 12:24.030
就这么简单

12:24.030 --> 12:25.030
验证码看上去

12:25.030 --> 12:26.030
看上去很清楚

12:26.030 --> 12:27.030
对吧

12:27.030 --> 12:28.030
它里面有一些配置

12:28.030 --> 12:29.030
你可以调整

12:29.030 --> 12:30.030
比方说

12:30.030 --> 12:31.030
验证码的长度

12:31.030 --> 12:33.030
你可以配置一下

12:34.030 --> 12:35.030
我们看服气

12:35.030 --> 12:37.030
服气的MGD7

12:37.030 --> 12:39.030
你看这里MGD7

12:39.030 --> 12:40.030
我们再刷新一次

12:40.030 --> 12:42.030
Y7 3L

12:42.030 --> 12:43.030
Y7 3L对吧

12:43.030 --> 12:44.030
服气存的文本

12:44.030 --> 12:45.030
给客户端的是图片

12:45.030 --> 12:46.030
就这么个意思

12:47.030 --> 12:48.030
你看啊

12:48.030 --> 12:49.030
这里面有一些配置

12:49.030 --> 12:50.030
验证码的长度

12:50.030 --> 12:52.030
我们比方说配置一下吧

12:52.030 --> 12:54.340
Size

12:54.340 --> 12:56.340
验证码的长度比方说是6

12:58.340 --> 12:59.340
Eglot Charles

12:59.340 --> 13:01.340
就是他哪些的制服

13:01.340 --> 13:02.340
要排除掉

13:02.340 --> 13:03.340
因为我们知道有些制服

13:03.340 --> 13:04.340
确实不是很好分辨

13:04.340 --> 13:05.340
对吧

13:05.340 --> 13:06.340
我们比方说排除掉

13:06.340 --> 13:07.340
I

13:07.340 --> 13:08.340
大写的I

13:08.340 --> 13:09.340
L1

13:09.340 --> 13:10.340
0

13:10.340 --> 13:11.340
小写的O

13:11.340 --> 13:12.340
大写的0

13:12.340 --> 13:13.340
大写的O

13:13.340 --> 13:14.340
把这些东西排除掉

13:14.340 --> 13:15.340
对不对

13:15.340 --> 13:16.340
你可以自行处理

13:16.340 --> 13:17.340
干燥线的数量

13:17.340 --> 13:18.340
干燥线的数量

13:18.340 --> 13:19.340
也可以用水积数

13:19.340 --> 13:20.340
也可以直接写个

13:20.340 --> 13:21.340
写实的数据

13:21.340 --> 13:22.340
但这个Size

13:22.340 --> 13:23.340
也可以直接干写水积数

13:23.340 --> 13:24.340
每自行就可能都不一样

13:24.340 --> 13:25.340
这个无所谓的

13:25.340 --> 13:26.340
Noise

13:26.340 --> 13:27.340
我们给它

13:27.340 --> 13:28.340
比方说

13:28.340 --> 13:29.340
加一个3

13:29.340 --> 13:30.340
比方说加个6

13:31.340 --> 13:32.340
好了

13:32.340 --> 13:33.340
验证是否有颜色

13:33.340 --> 13:36.340
那么颜色就

13:36.340 --> 13:37.340
有吧

13:37.340 --> 13:38.340
这个默认就行了

13:38.340 --> 13:39.340
这些东西

13:39.340 --> 13:40.340
背景颜色

13:40.340 --> 13:41.340
都可以自行调整

13:41.340 --> 13:43.340
这个东西无所谓的

13:43.340 --> 13:45.340
然后就没啥了

13:45.340 --> 13:47.340
还可以去受制什么字体

13:47.340 --> 13:49.340
验证码里边的字体

13:49.340 --> 13:50.340
这些无所谓的

13:50.340 --> 13:51.340
保存

13:51.340 --> 13:52.340
我们来看一下

13:52.340 --> 13:53.340
放心

13:54.340 --> 13:55.340
这么一个意思

13:55.340 --> 13:56.340
就验证

13:56.340 --> 13:58.340
它其实它这里边

13:58.340 --> 13:59.340
它还支持这个

13:59.340 --> 14:01.340
它还支持公式验证

14:01.340 --> 14:03.340
你只需要做一件事

14:03.340 --> 14:04.340
把它换成这个

14:04.340 --> 14:06.340
它变成公式验证

14:06.340 --> 14:08.720
放心

14:08.720 --> 14:09.720
它变成2加5的用多少

14:09.720 --> 14:10.720
对吧

14:10.720 --> 14:11.720
2加5

14:11.720 --> 14:12.720
好像没有颜色

14:12.720 --> 14:13.720
我们给它加个颜色

14:13.720 --> 14:14.720
Color

14:14.720 --> 14:17.420
放心

14:17.420 --> 14:18.420
9加2

14:18.420 --> 14:19.420
你看一下

14:19.420 --> 14:20.420
我们

14:20.420 --> 14:21.420
服务器得到的结果

14:21.420 --> 14:22.420
就是11

14:23.420 --> 14:24.420
3加4

14:24.420 --> 14:25.420
就是我们验证码的结果

14:25.420 --> 14:26.420
就是7

14:26.420 --> 14:27.420
就这么个意思

14:27.420 --> 14:28.420
服务器保存

14:28.420 --> 14:29.420
具体的数据

14:29.420 --> 14:30.420
图片人给客户端

14:30.420 --> 14:31.420
客户端去识别

14:32.420 --> 14:34.420
我们假设只有人才能识别出来

14:34.420 --> 14:35.420
是不是我们就可以保证

14:35.420 --> 14:37.420
只有人才能提交

14:37.420 --> 14:39.420
否则的话我验证码就通不过

14:39.420 --> 14:41.420
那么这是第一步就完成了

14:41.420 --> 14:42.420
第一步完成了

14:42.420 --> 14:44.420
过后我们第二步

14:45.420 --> 14:46.420
第二步的时候

14:46.420 --> 14:47.420
我们来看一下

14:47.420 --> 14:49.420
这个验证

14:49.420 --> 14:52.420
就服务器要对验证码进行验证

14:52.420 --> 14:53.420
那么验证的话

14:53.420 --> 14:54.420
那么它那边提交过来的时候

14:54.420 --> 14:56.420
是不是要带一个验证码

14:56.420 --> 14:57.420
那么我们这里

14:57.420 --> 14:58.420
又可以来写一个

14:58.420 --> 14:59.420
比方说

14:59.420 --> 15:00.420
我们来写一个Rotor

15:00.420 --> 15:02.420
凡是用假设

15:02.420 --> 15:04.420
凡是用Pose的请求

15:04.420 --> 15:06.420
只要你用Pose的请求

15:06.420 --> 15:08.420
请求任何数据

15:08.420 --> 15:12.420
那么我都要看一下验证码

15:12.420 --> 15:13.420
因为Pose的请求

15:13.420 --> 15:14.420
往往是新增数据

15:14.420 --> 15:15.420
或者是Pose的请求

15:15.420 --> 15:16.420
Pose的请求

15:16.420 --> 15:17.420
往往是修改数据

15:17.420 --> 15:18.420
比方Pose的Pose都要用

15:18.420 --> 15:20.420
我们在这里写个函数

15:20.420 --> 15:25.420
叫做CaptureHandler

15:25.420 --> 15:27.420
专门处理验证码的

15:27.420 --> 15:29.420
把这些东西全部给我

15:30.420 --> 15:32.420
那么这边我就

15:32.420 --> 15:40.420
使用CaptureHandler

15:40.420 --> 15:43.420
再来一个Pose

15:43.420 --> 15:44.420
请求任何地址

15:44.420 --> 15:45.420
只要你是Pose的请求

15:45.420 --> 15:47.420
或者是Pose的请求

15:47.420 --> 15:48.420
我都要看一下验证码

15:48.420 --> 15:50.420
我都要处理一下

15:50.420 --> 15:51.420
那么处理验证码的时候

15:51.420 --> 15:53.420
我们首先要做的就是

15:53.420 --> 15:55.420
它到底需不需要验证码

15:55.420 --> 15:56.420
需不需要

15:56.420 --> 15:57.420
那么其实

15:57.420 --> 15:58.420
如果说你

15:58.420 --> 15:59.420
每一个Pose的请求

15:59.420 --> 16:00.420
都需要的话

16:00.420 --> 16:02.420
那就直接验证就完事了

16:02.420 --> 16:03.420
关键是有些网站

16:03.420 --> 16:05.420
你可以看到这么一个效果

16:05.420 --> 16:06.420
我就把这些

16:06.420 --> 16:07.420
忘记把闹的情况

16:07.420 --> 16:08.420
都给你们说

16:08.420 --> 16:09.420
具体你们以后

16:09.420 --> 16:10.420
在公司里面遇到什么情况

16:10.420 --> 16:11.420
我真不知道

16:11.420 --> 16:12.420
具体情况具体分析

16:12.420 --> 16:13.420
这个很灵活的

16:13.420 --> 16:15.420
比方说你看到有些网站

16:15.420 --> 16:16.420
就是你登录

16:16.420 --> 16:17.420
登录的时候

16:17.420 --> 16:19.420
连续登录好几次过后

16:19.420 --> 16:21.420
它就会出现验证码

16:21.420 --> 16:22.420
一开始没有出现

16:22.420 --> 16:24.420
连续登录过几次过后

16:24.420 --> 16:25.420
就出现了

16:25.420 --> 16:26.420
那么这个地方

16:26.420 --> 16:27.420
是不是有

16:27.420 --> 16:28.420
到底要不要有验证码

16:28.420 --> 16:29.420
是不是可以经过

16:29.420 --> 16:30.420
一些的判断

16:30.420 --> 16:31.420
对吧 是可以经过

16:31.420 --> 16:32.420
一些的判断的

16:32.420 --> 16:33.420
那么这个时候

16:33.420 --> 16:34.420
到底怎么样去

16:34.420 --> 16:36.420
经过一些的判断了

16:36.420 --> 16:38.420
那有很多方式

16:38.420 --> 16:39.420
比方说你每一次

16:39.420 --> 16:40.420
客户端请求

16:40.420 --> 16:41.420
我就把你到底

16:41.420 --> 16:42.420
是怎么请求的

16:42.420 --> 16:43.420
请求的方法

16:43.420 --> 16:44.420
我们把它存到数据库

16:44.420 --> 16:45.420
专门做一个数据库

16:45.420 --> 16:46.420
存起来

16:46.420 --> 16:48.420
那么我们就看一下

16:48.420 --> 16:49.420
我们就通过

16:49.420 --> 16:50.420
这个数据库的

16:50.420 --> 16:51.420
请求记录去分析

16:51.420 --> 16:52.420
分析一下

16:52.420 --> 16:53.420
你到底是一个什么玩意

16:53.420 --> 16:54.420
到底是机器还是人

16:54.420 --> 16:55.420
对吧

16:55.420 --> 16:56.420
我现在怀疑

16:56.420 --> 16:57.420
你是机器的时候

16:57.420 --> 16:58.420
那我就给你

16:58.420 --> 16:59.420
我就必须要验证码了

16:59.420 --> 17:00.420
对吧

17:00.420 --> 17:01.420
那么可以在服务器里面

17:01.420 --> 17:02.420
进行数据分析的

17:02.420 --> 17:03.420
那我这里呢

17:03.420 --> 17:05.420
肯定做一个很简单的效果

17:05.420 --> 17:06.420
比方说

17:06.420 --> 17:08.420
你每一次进来过后

17:08.420 --> 17:10.420
那么我就给你

17:10.420 --> 17:11.420
不管你是

17:11.420 --> 17:12.420
抛车请求

17:12.420 --> 17:13.420
还是抛车请求

17:13.420 --> 17:14.420
我就把你这一次

17:14.420 --> 17:15.420
请求的时间

17:15.420 --> 17:16.420
给你记录下来

17:16.420 --> 17:18.420
你看看我怎么玩

17:18.420 --> 17:20.790
我就把你

17:20.790 --> 17:21.790
请求的时间

17:21.790 --> 17:22.790
记录下来

17:22.790 --> 17:23.790
然后比方说

17:23.790 --> 17:24.790
我们这里判断一下

17:24.790 --> 17:25.790
记住了

17:25.790 --> 17:26.790
当然可以记住

17:26.790 --> 17:27.790
是数据库

17:27.790 --> 17:28.790
本来也可以存数据库

17:28.790 --> 17:29.790
对不对

17:29.790 --> 17:30.790
我们这里呢

17:30.790 --> 17:31.790
就是record

17:31.790 --> 17:33.790
记录

17:33.790 --> 17:34.790
看一下有没有

17:34.790 --> 17:35.790
看一下

17:35.790 --> 17:37.790
看一下就是

17:37.790 --> 17:39.790
是否有

17:39.790 --> 17:40.790
Sation里面

17:40.790 --> 17:41.790
是不是有记录

17:41.790 --> 17:42.790
如果说没有

17:42.790 --> 17:46.360
如果Sation中

17:46.360 --> 17:48.360
没有

17:48.360 --> 17:50.360
访问记录

17:50.360 --> 17:51.360
那么我就给他

17:51.360 --> 17:54.120
加一个访问记录

17:54.120 --> 17:55.120
给他加一个

17:55.120 --> 17:57.120
一个洪述入

17:57.120 --> 17:58.120
好

17:58.120 --> 17:59.120
你们有了访问

17:59.120 --> 18:00.120
因为他有

18:00.120 --> 18:01.120
第一次请求

18:01.120 --> 18:02.120
第一次请求

18:02.120 --> 18:03.120
刚刚还是建立Sation

18:03.120 --> 18:04.120
可能没有访问记录

18:04.120 --> 18:06.120
那如果说有访问记录

18:06.120 --> 18:07.120
总之

18:07.120 --> 18:08.120
这一段代码运行了过后

18:08.120 --> 18:09.120
是不是一定有访问记录了

18:09.120 --> 18:11.120
那么有这个数据了

18:11.120 --> 18:12.120
那么我们就往数据里面

18:12.120 --> 18:13.120
加一下

18:13.120 --> 18:14.120
record

18:14.120 --> 18:15.120
加一下

18:15.120 --> 18:16.120
加什么呢

18:16.120 --> 18:17.120
我们就加当前时间

18:17.120 --> 18:18.120
比方说

18:18.120 --> 18:19.120
闹

18:19.120 --> 18:20.120
我只举个例子

18:20.120 --> 18:21.120
具体的情况

18:21.120 --> 18:22.120
灵活处理

18:22.120 --> 18:23.120
就是我这一块的

18:23.120 --> 18:24.120
代码的意思

18:24.120 --> 18:25.120
就是说我要看一下

18:25.120 --> 18:26.120
我到底要不要验证验证

18:26.120 --> 18:28.120
需不需要验证

18:28.120 --> 18:29.120
那么我们这里

18:29.120 --> 18:30.120
把这个闹了

18:30.120 --> 18:31.120
当前时间

18:31.120 --> 18:32.120
对吧

18:32.120 --> 18:33.120
就记录进去

18:33.120 --> 18:34.120
对吧

18:34.120 --> 18:35.120
当前时间记录进去

18:35.120 --> 18:37.120
把这一次请求的

18:37.120 --> 18:39.120
访问时间

18:39.120 --> 18:41.120
记录下来

18:41.120 --> 18:43.120
把记录下来

18:43.120 --> 18:44.120
对吧

18:44.120 --> 18:45.120
那么每一次

18:45.120 --> 18:46.120
抛射请求

18:46.120 --> 18:47.120
是不是得到很多的

18:47.120 --> 18:48.120
访问记录了

18:48.120 --> 18:49.120
对不对

18:49.120 --> 18:50.120
就得到很多的

18:50.120 --> 18:51.120
访问记录了

18:51.120 --> 18:52.120
比方说

18:52.120 --> 18:53.120
我们这里输出一下

18:53.120 --> 18:54.120
record

18:54.120 --> 18:55.120
然后呢

18:55.120 --> 18:57.120
这个就是

18:57.120 --> 18:58.120
record

18:59.120 --> 19:00.120
输出一下吧

19:00.120 --> 19:01.120
然后呢

19:01.120 --> 19:02.120
我这个请求

19:02.120 --> 19:03.120
继续往后移交

19:03.120 --> 19:04.120
比方说

19:04.120 --> 19:05.120
我们先写成这个样子

19:05.120 --> 19:06.120
然后我们来扣端去试一下

19:06.120 --> 19:07.120
比方说

19:07.120 --> 19:08.120
扣端里面呢

19:08.120 --> 19:09.120
就登录嘛

19:09.120 --> 19:10.120
帐号

19:10.120 --> 19:11.120
input

19:12.120 --> 19:13.120
给个id

19:14.120 --> 19:15.120
tst

19:15.120 --> 19:16.120
login

19:16.120 --> 19:17.120
id

19:17.120 --> 19:18.120
我就是login

19:18.120 --> 19:19.120
id

19:19.120 --> 19:20.120
login

19:20.120 --> 19:21.120
id

19:21.120 --> 19:22.120
帐号

19:22.120 --> 19:24.620
bima

19:24.620 --> 19:25.620
input

19:25.620 --> 19:26.620
login

19:26.620 --> 19:27.620
password

19:27.620 --> 19:28.620
然后呢

19:28.620 --> 19:29.620
password

19:31.620 --> 19:32.620
这啥玩意啊

19:36.860 --> 19:37.860
这样子的

19:38.860 --> 19:39.860
然后呢

19:39.860 --> 19:40.860
是

19:40.860 --> 19:41.860
下面这个是

19:41.860 --> 19:42.860
验证码了对吧

19:42.860 --> 19:43.860
验证码

19:43.860 --> 19:44.860
验证码

19:45.860 --> 19:46.860
input

19:50.860 --> 19:51.860
capture

19:55.490 --> 19:56.490
就这么三个数据

19:56.490 --> 19:57.490
对不对

19:57.490 --> 19:58.490
我们看一下页面

19:59.490 --> 20:00.490
小心

20:00.490 --> 20:01.490
不就这三个数据

20:01.490 --> 20:02.490
是这样子

20:02.490 --> 20:03.490
我们现在写一段

20:03.490 --> 20:04.490
这也是脚本

20:05.490 --> 20:06.490
怎么写呢

20:06.490 --> 20:07.490
我们这里呢

20:07.490 --> 20:09.490
就写一个方法吧

20:09.490 --> 20:10.490
就是一个方法

20:11.490 --> 20:12.490
login

20:12.490 --> 20:14.490
我们直接找个按钮啊

20:14.490 --> 20:15.490
写个按钮

20:15.490 --> 20:16.490
登录

20:19.490 --> 20:20.490
我们这里呢

20:20.490 --> 20:21.490
通过

20:21.490 --> 20:22.490
document

20:22.490 --> 20:23.490
curry select

20:23.490 --> 20:24.490
登录

20:24.490 --> 20:25.490
找到的登录按钮

20:25.490 --> 20:26.490
然后呢

20:26.490 --> 20:27.490
unclick

20:27.490 --> 20:28.490
点击的时候

20:28.490 --> 20:29.490
我们干嘛呢

20:29.490 --> 20:30.490
点击的时候

20:30.490 --> 20:31.490
我们就要去发送

20:31.490 --> 20:32.490
一个阿迦克斯请求

20:32.490 --> 20:33.490
去请求服务的登录接口

20:33.490 --> 20:34.490
对吧

20:34.490 --> 20:35.490
我们之前写过登录接口的

20:35.490 --> 20:36.490
好来吧

20:37.490 --> 20:38.490
fetch

20:38.490 --> 20:39.490
请求什么地址呢

20:39.490 --> 20:40.490
请求api

20:40.490 --> 20:41.490
耳朵min

20:41.490 --> 20:42.490
对吧

20:42.490 --> 20:43.490
请求这个地址

20:43.490 --> 20:44.490
请求这个地址呢

20:44.490 --> 20:45.490
我们

20:45.490 --> 20:46.490
登录

20:46.490 --> 20:47.490
login

20:47.490 --> 20:48.490
然后呢

20:48.490 --> 20:49.490
它的登录方法

20:49.490 --> 20:50.490
method

20:50.490 --> 20:51.490
是post

20:52.490 --> 20:53.490
post

20:53.490 --> 20:54.490
登录方法

20:54.490 --> 20:55.490
登录的header

20:55.490 --> 20:56.490
我们给他设置一个

20:56.490 --> 20:57.490
消息头的格式

20:57.490 --> 20:58.490
当然你也可以

20:58.490 --> 20:59.490
也可以用什么

20:59.490 --> 21:00.490
xs

21:00.490 --> 21:01.490
这些东西很灵活的

21:01.490 --> 21:02.490
千万不要去使机应配

21:02.490 --> 21:03.490
我靠

21:03.490 --> 21:04.490
之前的那个

21:05.490 --> 21:06.490
application

21:09.060 --> 21:10.060
接上

21:10.060 --> 21:11.060
header

21:11.060 --> 21:12.060
给他加进去

21:12.060 --> 21:13.060
然后body

21:13.060 --> 21:14.060
body我们构建一下吧

21:14.060 --> 21:15.060
因为他有可能一开始

21:15.060 --> 21:16.060
不方纯原则嘛

21:16.060 --> 21:17.060
有可能一开始

21:17.060 --> 21:18.060
不方纯原则嘛

21:18.060 --> 21:19.060
比方说给他个id

21:19.060 --> 21:20.060
比方说这个

21:20.060 --> 21:22.060
capture

21:22.060 --> 21:24.060
capture

21:24.060 --> 21:25.060
code

21:25.060 --> 21:26.060
capture

21:26.060 --> 21:27.060
area

21:27.060 --> 21:28.060
随便给个id

21:28.060 --> 21:29.060
也可以做

21:29.060 --> 21:30.060
一样的

21:30.060 --> 21:31.060
那么这里

21:31.060 --> 21:32.060
我们一开始

21:32.060 --> 21:33.060
给他隐藏掉

21:33.060 --> 21:34.060
一开始不发生验证

21:34.060 --> 21:35.060
一开始隐藏

21:35.060 --> 21:36.060
我们一会儿

21:36.060 --> 21:37.060
他需要发生的时候

21:37.060 --> 21:38.060
我们再显示

21:38.060 --> 21:39.060
好

21:39.060 --> 21:40.060
现在

21:40.060 --> 21:41.060
我们去

21:41.060 --> 21:42.060
我们登录的

21:42.060 --> 21:43.060
点击点击按钮过后

21:43.060 --> 21:44.060
登录去请求这个地址

21:44.060 --> 21:45.060
那么body

21:45.060 --> 21:46.060
我们消息体的数据

21:46.060 --> 21:47.060
我们来构建一下

21:47.060 --> 21:48.060
body

21:48.060 --> 21:49.060
body

21:49.060 --> 21:50.060
我们的login id

21:51.060 --> 21:52.060
就应该等于

21:52.060 --> 21:54.060
login id的value

21:54.060 --> 21:56.060
然后login password

21:56.060 --> 21:58.060
应该等于login password的

22:00.060 --> 22:01.060
value

22:01.060 --> 22:02.060
对不对

22:02.060 --> 22:03.060
那么这里有个情况

22:03.060 --> 22:04.060
就是判断一下

22:04.060 --> 22:06.060
判断一下我到底有没有验

22:06.060 --> 22:07.060
我到底需不需要

22:07.060 --> 22:08.060
给他传验证

22:08.060 --> 22:09.060
那么就判断这个

22:09.060 --> 22:10.060
批元素

22:10.060 --> 22:11.060
他的style

22:11.060 --> 22:12.060
display

22:12.060 --> 22:13.060
这东西具体的

22:13.060 --> 22:14.060
怎么情况你们自行

22:14.060 --> 22:15.060
根据情况来确定

22:15.060 --> 22:16.060
要不要发生验证

22:16.060 --> 22:17.060
如果他等于

22:17.060 --> 22:19.060
不等于浪的话

22:19.060 --> 22:20.060
那么是不是显示的

22:20.060 --> 22:21.060
显示的我是不是

22:21.060 --> 22:22.060
要发生验证

22:22.060 --> 22:23.060
那么我们把body

22:23.060 --> 22:24.060
里面加一个数据

22:24.060 --> 22:25.060
capture

22:26.060 --> 22:28.060
因为验证把发生过去

22:28.060 --> 22:29.060
肯定是capture

22:29.060 --> 22:30.060
或者是其他情求

22:30.060 --> 22:31.060
capture

22:31.060 --> 22:33.060
然后给他加一个数据

22:33.060 --> 22:34.060
加什么数据

22:34.060 --> 22:36.060
就加这个的value

22:36.060 --> 22:37.060
对不对

22:37.060 --> 22:38.060
所以加这个

22:38.060 --> 22:39.060
对吧

22:39.060 --> 22:40.060
就这么个意思

22:40.060 --> 22:41.060
就这么个意思

22:41.060 --> 22:42.060
那么这里

22:42.060 --> 22:43.060
是不是把body

22:43.060 --> 22:44.060
构建好了

22:44.060 --> 22:45.060
我们是不是把他

22:45.060 --> 22:46.060
传到body里面

22:46.060 --> 22:47.060
我们用一个

22:47.060 --> 22:48.060
json

22:48.060 --> 22:49.060
body

22:49.060 --> 22:50.060
传过去

22:50.060 --> 22:51.060
咱们这个

22:51.060 --> 22:53.060
然后就是Z

22:53.060 --> 22:54.060
先够一下

22:55.060 --> 22:56.060
切剩

22:57.060 --> 22:58.060
这里是

22:58.060 --> 23:00.060
得到这个响应结果

23:01.060 --> 23:02.060
好

23:02.060 --> 23:03.060
那么我们登录之前

23:03.060 --> 23:04.060
写过了对吧

23:04.060 --> 23:05.060
那么怎么来判断

23:05.060 --> 23:06.060
登录成功还有失败

23:06.060 --> 23:07.060
如果说

23:07.060 --> 23:09.060
这个东西data

23:09.060 --> 23:10.060
有值

23:10.060 --> 23:11.060
那是不是登录成功

23:11.060 --> 23:12.060
登录成功

23:12.060 --> 23:13.060
你要挑转

23:13.060 --> 23:14.060
页面就挑转

23:14.060 --> 23:15.060
随便你干嘛

23:15.060 --> 23:16.060
登录成功

23:21.610 --> 23:22.610
lson

23:22.610 --> 23:23.610
登录失败

23:24.610 --> 23:25.610
登录失败

23:25.610 --> 23:26.610
好

23:26.610 --> 23:27.610
我们把代码写成这个样子了

23:27.610 --> 23:28.610
接下来我们看一下吧

23:29.610 --> 23:30.610
刷新

23:31.610 --> 23:32.610
检查

23:33.610 --> 23:34.610
控制台

23:34.610 --> 23:35.610
然后点击

23:35.610 --> 23:36.610
登录失败

23:36.610 --> 23:37.610
然后abc

23:37.610 --> 23:38.610
123

23:38.610 --> 23:39.610
123

23:39.610 --> 23:40.610
登录成功对吧

23:40.610 --> 23:41.610
是不是请求了两个poster

23:41.610 --> 23:42.610
请求到服务器

23:42.610 --> 23:43.610
然后服务器

23:43.610 --> 23:44.610
由于我们之前写过

23:44.610 --> 23:45.610
这个中间键

23:45.610 --> 23:46.610
那么这个中间键

23:46.610 --> 23:47.610
是不是记录了他

23:47.610 --> 23:48.610
请求的东西

23:48.610 --> 23:49.610
你看

23:49.610 --> 23:50.610
第一次请求

23:50.610 --> 23:51.610
第二次请求

23:51.610 --> 23:52.610
是不是又一个时间

23:52.610 --> 23:53.610
这个意思

23:53.610 --> 23:55.610
我把上面的log

23:55.610 --> 23:56.610
去掉

23:56.610 --> 23:57.610
把这个地方换成crease

24:02.560 --> 24:03.560
那么这里

24:03.560 --> 24:04.560
他就会经过

24:04.560 --> 24:05.560
刚才我们在看

24:05.560 --> 24:06.560
登录成功

24:06.560 --> 24:07.560
再来失败的

24:07.560 --> 24:08.560
失败失败

24:08.560 --> 24:09.560
厉害

24:09.560 --> 24:10.560
是不是就记录了

24:10.560 --> 24:11.560
你每一次请求的时间

24:11.560 --> 24:12.560
我就记录到

24:12.560 --> 24:13.560
输足力外去了

24:13.560 --> 24:14.560
对吧

24:14.560 --> 24:16.560
就记录成这个样子了

24:16.560 --> 24:17.560
好

24:17.560 --> 24:18.560
那么记录成这个样子了

24:18.560 --> 24:19.560
我们后面就可以控制了

24:19.560 --> 24:20.560
比方说

24:20.560 --> 24:21.560
我可以

24:21.560 --> 24:22.560
当然这个情况很多

24:22.560 --> 24:23.560
根据积蓄的情况

24:23.560 --> 24:25.560
比方说我做这么一个限制

24:25.560 --> 24:29.560
在一小段时间中

24:29.560 --> 24:34.560
如果在一小段时间中

24:34.560 --> 24:39.560
请求达到了一定的数量

24:39.560 --> 24:43.560
就可能是机器

24:43.560 --> 24:44.560
我就是

24:44.560 --> 24:45.560
其实这里判断的就是

24:45.560 --> 24:46.560
他到底是不是

24:46.560 --> 24:47.560
有没有可能是一个机器

24:47.560 --> 24:48.560
怎么具体

24:48.560 --> 24:49.560
怎么判断的

24:49.560 --> 24:50.560
根据具体的情况

24:50.560 --> 24:51.560
我们这里就简单来处理

24:51.560 --> 24:52.560
比方说

24:52.560 --> 24:54.560
叫做

24:54.560 --> 24:55.560
哪一小段时间

24:55.560 --> 24:56.560
比方说10秒钟

24:56.560 --> 24:58.560
10秒钟之内

24:58.560 --> 25:00.560
请求的数量

25:00.560 --> 25:02.560
比方说repeat

25:02.560 --> 25:03.560
重复的请求

25:03.560 --> 25:04.560
多好吃呢

25:04.560 --> 25:05.560
用铺扯

25:05.560 --> 25:06.560
或者铺扯请求

25:06.560 --> 25:07.560
重复的用铺扯

25:07.560 --> 25:08.560
或者铺扯请求

25:08.560 --> 25:09.560
因为只有铺扯和铺扯

25:09.560 --> 25:10.560
我们才经过这个函数

25:10.560 --> 25:12.560
那么他重复的请求的

25:12.560 --> 25:14.560
数量是10次

25:14.560 --> 25:15.560
那我也是3次

25:15.560 --> 25:16.560
我们就写小一点吧

25:16.560 --> 25:17.560
不然的话

25:17.560 --> 25:18.560
有些不好测试

25:18.560 --> 25:19.560
好

25:19.560 --> 25:20.560
那么接下来

25:20.560 --> 25:22.560
我们就来这样子来做

25:22.560 --> 25:24.560
我把这个

25:24.560 --> 25:25.560
我写错了

25:25.560 --> 25:27.560
写错地方了

25:27.560 --> 25:29.560
写这

25:29.560 --> 25:30.560
写这

25:30.560 --> 25:32.940
对吧

25:32.940 --> 25:33.940
写这

25:33.940 --> 25:35.940
那么我们这里

25:35.940 --> 25:36.940
已经拿到了

25:36.940 --> 25:37.940
把时间淋加进去了

25:37.940 --> 25:38.940
那么如果说

25:38.940 --> 25:39.940
重复的请求

25:39.940 --> 25:40.940
10秒钟之内

25:40.940 --> 25:41.940
到了3次的话

25:41.940 --> 25:42.940
那么我们就

25:42.940 --> 25:44.940
认为你有可能是机器

25:44.940 --> 25:45.940
我怎么来判定呢

25:45.940 --> 25:46.940
其实很简单

25:46.940 --> 25:48.940
我就把这个数组里边

25:48.940 --> 25:49.940
10秒钟之前的数据

25:49.940 --> 25:50.940
给它去掉

25:50.940 --> 25:51.940
把10秒钟之前

25:51.940 --> 25:52.940
我就不看了

25:52.940 --> 25:53.940
过去就过去了

25:53.940 --> 25:54.940
我们就看

25:54.940 --> 25:55.940
现在10秒钟之内有几次

25:55.940 --> 25:56.940
好了

25:56.940 --> 25:57.940
怎么来看呢

25:57.940 --> 25:58.940
我们就可以这样吧

25:58.940 --> 25:59.940
就利用一个数组

25:59.940 --> 26:00.940
操作就完事了

26:00.940 --> 26:01.940
这不就是个数组吗

26:01.940 --> 26:02.940
对吧

26:02.940 --> 26:03.940
给它重新复制

26:03.940 --> 26:04.940
等于什么呢

26:04.940 --> 26:05.940
FILTER

26:05.940 --> 26:06.940
FILTER

26:06.940 --> 26:08.940
把时间给得到

26:08.940 --> 26:09.940
里边的每一个时间得到

26:09.940 --> 26:11.940
我就把当前时间

26:11.940 --> 26:12.940
当前时间

26:12.940 --> 26:14.940
去减去这个时间

26:14.940 --> 26:16.940
看一下是不是小于

26:16.940 --> 26:17.940
等于什么

26:17.940 --> 26:18.940
DIERATION

26:18.940 --> 26:19.940
对不对

26:19.940 --> 26:20.940
我就过滤到了

26:20.940 --> 26:21.940
其他的过早的时间

26:21.940 --> 26:22.940
是不是过滤到了

26:22.940 --> 26:23.940
对吧

26:23.940 --> 26:24.940
DIERATION

26:24.940 --> 26:25.940
我们来看一下

26:25.940 --> 26:29.310
把这个打印再打印一下

26:29.310 --> 26:30.310
保存

26:30.310 --> 26:32.310
你看这边

26:32.310 --> 26:34.310
把这样子

26:34.310 --> 26:38.290
看得清楚一点

26:38.290 --> 26:39.290
这里登录

26:39.290 --> 26:40.290
一个时间

26:40.290 --> 26:41.290
两个时间

26:41.290 --> 26:42.290
三个时间

26:42.290 --> 26:43.290
四个时间

26:43.290 --> 26:44.290
稍微等一下

26:44.290 --> 26:46.860
等几秒钟

26:46.860 --> 26:48.860
再登录

26:48.860 --> 26:49.860
还过了

26:49.860 --> 26:50.860
再登录

26:50.860 --> 26:51.860
你看是不是这个时间

26:51.860 --> 26:52.860
就去掉了

26:52.860 --> 26:53.860
对吧

26:53.860 --> 26:54.860
一些比较早的时间

26:54.860 --> 26:55.860
再登录

26:55.860 --> 26:56.860
是不是也就只有三个了

26:56.860 --> 26:57.860
对吧

26:57.860 --> 26:58.860
我们就用这种方式

26:58.860 --> 26:59.860
当然这个情况有很多的

26:59.860 --> 27:00.860
根据具体的情况

27:00.860 --> 27:01.860
执行来处理

27:01.860 --> 27:02.860
不要去使经营背

27:02.860 --> 27:04.860
学生法就讨厌使经营背了

27:04.860 --> 27:05.860
那么这里

27:05.860 --> 27:06.860
就是

27:06.860 --> 27:07.860
这个东西过滤下来

27:07.860 --> 27:08.860
那么我现在要判断啥

27:08.860 --> 27:10.860
其实就是判断这个

27:10.860 --> 27:11.860
判断REC

27:11.860 --> 27:12.860
DIERATION

27:12.860 --> 27:16.360
DIERATION

27:16.360 --> 27:17.360
RECORD

27:17.360 --> 27:18.360
DIERANCE

27:18.360 --> 27:20.360
它的请求频率

27:20.360 --> 27:22.360
是不是大于等于了

27:22.360 --> 27:23.360
REPEAT

27:23.360 --> 27:24.360
三次

27:24.360 --> 27:25.360
如果说是这种情况

27:25.360 --> 27:26.360
是不是要验证验证码

27:26.360 --> 27:27.360
对吧

27:27.360 --> 27:28.360
验证

27:28.360 --> 27:29.360
验证码

27:29.360 --> 27:30.360
是不是要做这件事情

27:30.360 --> 27:31.360
好

27:31.360 --> 27:32.360
另外一个情况

27:32.360 --> 27:33.360
还有一种情况就是

27:33.360 --> 27:34.360
它直接给我

27:34.360 --> 27:35.360
提交了一个验证码过来

27:35.360 --> 27:36.360
你既然都提交了

27:36.360 --> 27:37.360
我肯定验证

27:37.360 --> 27:38.360
对吧

27:38.360 --> 27:39.360
或者说

27:39.360 --> 27:40.360
什么呢

27:40.360 --> 27:41.360
你在BODY里边给我

27:41.360 --> 27:42.360
提交了验证码

27:42.360 --> 27:43.360
比方说验证码

27:43.360 --> 27:44.360
我固定为一个属性名

27:44.360 --> 27:45.360
叫做CAPTCUR

27:45.360 --> 27:46.360
在什么

27:46.360 --> 27:47.360
在RECORD的BODY中

27:47.360 --> 27:49.360
如果说你在请求里边

27:49.360 --> 27:50.360
给我自动提交了验证码

27:50.360 --> 27:51.360
那我肯定要验证验证码

27:51.360 --> 27:52.360
这两个情况

27:52.360 --> 27:53.360
要验证验证码

27:53.360 --> 27:54.360
对不对

27:54.360 --> 27:55.360
那么具体

27:55.360 --> 27:56.360
怎么验

27:56.360 --> 27:57.360
那么AOS

27:57.360 --> 27:58.360
是不是不需要验证验证码

27:58.360 --> 27:59.360
不需要的话

27:59.360 --> 28:00.360
我们就NEX

28:00.360 --> 28:01.360
你都不需要验证验证码

28:01.360 --> 28:02.360
我只要往后移交就行了

28:02.360 --> 28:03.360
对不对

28:03.360 --> 28:04.360
要验证验证码的时候

28:04.360 --> 28:05.360
我们再来单独处理

28:05.360 --> 28:06.360
怎么来验证验证码

28:06.360 --> 28:08.360
我们可以单独开个函数吧

28:08.360 --> 28:10.360
VALIDATE CAPTCUR

28:10.360 --> 28:13.360
这东西全部传给我

28:13.360 --> 28:14.360
就看验证码

28:14.360 --> 28:15.360
有没有通过验证

28:15.360 --> 28:16.360
我就在这里

28:16.360 --> 28:17.360
等我这个函数

28:17.360 --> 28:20.360
RECORD NEX

28:20.360 --> 28:21.360
好

28:22.360 --> 28:23.360
怎么来验证验证码

28:24.360 --> 28:25.360
怎么来验证呢

28:26.360 --> 28:27.360
首先你要搞清楚验证码

28:27.360 --> 28:28.360
到底要不要区分大小写

28:28.360 --> 28:30.360
你要搞清楚这个玩意

28:30.360 --> 28:31.360
如果说你觉得

28:31.360 --> 28:32.360
不区分大小写的话

28:32.360 --> 28:33.360
你存的时候

28:33.360 --> 28:34.360
你就存LOCASE

28:34.360 --> 28:36.360
把转换的小写再存

28:36.360 --> 28:37.360
一般来说验证码

28:37.360 --> 28:39.360
都不需要区分大小写的

28:39.360 --> 28:40.360
那么这边

28:40.360 --> 28:41.360
我们怎么来验证验证码

28:41.360 --> 28:42.360
我们首先要得到

28:42.360 --> 28:44.360
用户传冠的验证码

28:44.360 --> 28:48.360
就是RECORD CAPTCUR

28:48.360 --> 28:50.360
这是用户传递的

28:51.360 --> 28:52.360
验证码

28:52.360 --> 28:53.360
那么用户有可能传递的

28:53.360 --> 28:54.360
有可能没有传递

28:54.360 --> 28:55.360
我们再判断一下吧

28:55.360 --> 28:56.360
BODY里边

28:56.360 --> 28:58.360
我们取什么了 CAPTCUR

28:59.360 --> 29:01.360
有没有验证码

29:01.360 --> 29:02.360
如果说有的话

29:02.360 --> 29:03.360
我就把你这个验证码

29:03.360 --> 29:04.360
转换成小写

29:07.360 --> 29:08.360
转换成小写

29:08.360 --> 29:09.360
我们或者是这样吧

29:10.360 --> 29:11.360
有验证码吗

29:11.360 --> 29:12.360
如果说有的话

29:12.360 --> 29:13.360
我就得到小写

29:14.360 --> 29:15.360
否则的话

29:15.360 --> 29:16.360
就一个空置不错

29:16.360 --> 29:17.360
对不对

29:17.360 --> 29:18.360
这是得到用户传递的验证码

29:18.360 --> 29:19.360
好

29:19.360 --> 29:20.360
再判断一下

29:20.360 --> 29:22.360
用户传递的验证码

29:22.360 --> 29:24.360
如果说它不等于

29:24.360 --> 29:25.360
不等于什么呢

29:25.360 --> 29:26.360
我们自己session里面

29:26.360 --> 29:27.360
保存的验证码

29:29.360 --> 29:32.360
session CAPTCUR

29:33.360 --> 29:34.360
不等于session里面

29:34.360 --> 29:35.360
保存的验证码

29:35.360 --> 29:36.360
如果说不想等的话

29:36.360 --> 29:37.360
那么验证码

29:37.360 --> 29:38.360
是不是有问题

29:38.360 --> 29:40.360
验证码有问题

29:40.360 --> 29:41.360
有问题该怎么办

29:41.360 --> 29:43.360
直接响应结果

29:43.360 --> 29:44.360
比方说你该响应

29:44.360 --> 29:46.360
一个code 401

29:46.360 --> 29:47.360
随便给个消息

29:48.360 --> 29:50.360
验证码有问题

29:52.360 --> 29:53.360
或者说需要提供验证码

29:53.360 --> 29:55.360
或者验证码错误等等等等

29:55.360 --> 29:56.360
提示就完了

29:56.360 --> 29:57.360
其他不响应了

29:57.360 --> 29:58.360
就是响应一个错误

29:58.360 --> 30:01.360
alc如果说验证码是正确的

30:01.360 --> 30:03.360
验证码是正确的

30:03.360 --> 30:04.360
那怎么办呢

30:04.360 --> 30:05.360
我就往后移交

30:05.360 --> 30:06.360
对不对

30:06.360 --> 30:07.360
往后面处理

30:07.360 --> 30:08.360
不管验证码是错误

30:08.360 --> 30:09.360
也好

30:09.360 --> 30:10.360
还是正确也好

30:10.360 --> 30:11.360
记住

30:11.360 --> 30:12.360
验证码服务器

30:12.360 --> 30:13.360
这边的验证码

30:13.360 --> 30:14.360
只要比对一次

30:14.360 --> 30:15.360
立即失效

30:15.360 --> 30:17.360
它以后再用同样的验证码来比对了

30:17.360 --> 30:19.360
它可能会去创裤

30:19.360 --> 30:21.360
去创这个

30:21.360 --> 30:22.360
去拆

30:22.360 --> 30:23.360
拆同一个验证码

30:23.360 --> 30:24.360
所以服务器每一次都要变

30:24.360 --> 30:25.360
因此

30:25.360 --> 30:27.360
服务器一旦验证码比对过一次

30:27.360 --> 30:28.360
不管你有没有问题

30:28.360 --> 30:29.360
我对验证码都失效了

30:29.360 --> 30:30.360
因此我怎么失效

30:30.360 --> 30:31.360
其实很简单

30:31.360 --> 30:32.360
就一句话

30:32.360 --> 30:34.360
我就把服务器验证码

30:34.360 --> 30:36.360
这些情况就完了

30:36.360 --> 30:37.360
下一次你再用

30:37.360 --> 30:38.360
其他东西给我比对

30:38.360 --> 30:39.360
不行了

30:39.360 --> 30:40.360
因此的code那边是不是要

30:40.360 --> 30:41.360
从一般来说

30:41.360 --> 30:42.360
验证码用了一次过后

30:42.360 --> 30:43.360
不管它对不对

30:43.360 --> 30:44.360
反正只要下一次

30:44.360 --> 30:45.360
肯定是不一样了

30:45.360 --> 30:46.360
对不对

30:46.360 --> 30:47.360
我就给它清空

30:47.360 --> 30:50.360
那么到了客户端这边

30:50.360 --> 30:51.360
你看一下

30:51.360 --> 30:52.360
你看一下

30:52.360 --> 30:53.360
现在我们的这里

30:53.360 --> 30:55.360
就

30:55.360 --> 30:56.360
我看一下

30:56.360 --> 30:58.360
我把代码稍微改一下

30:58.360 --> 31:00.360
客户端的代码就是在这

31:00.360 --> 31:03.360
稍微的改一下

31:03.360 --> 31:04.360
然后这里我们在前面

31:04.360 --> 31:05.360
再加一个判断

31:05.360 --> 31:06.360
这是登录

31:06.360 --> 31:08.360
前面再加一个判断

31:08.360 --> 31:09.360
加什么判断

31:09.360 --> 31:10.360
就是你给我传递的code

31:10.360 --> 31:11.360
是不是等于401

31:11.360 --> 31:12.360
对吧

31:12.360 --> 31:13.360
我们刚才约定好的

31:13.360 --> 31:14.360
验证码错误

31:14.360 --> 31:15.360
我们就输出

31:15.360 --> 31:18.360
验证码错误

31:18.360 --> 31:20.360
我们看一下

31:20.360 --> 31:23.860
现在我们在这边

31:23.860 --> 31:24.860
刷新

31:24.860 --> 31:25.860
点击

31:25.860 --> 31:26.860
失败

31:26.860 --> 31:27.860
失败

31:27.860 --> 31:28.860
是不是验证码错误了

31:28.860 --> 31:29.860
对吧

31:29.860 --> 31:30.860
是不是错误了

31:30.860 --> 31:32.860
那么当验证码错误的时候

31:32.860 --> 31:33.860
是不是我们就应该

31:33.860 --> 31:34.860
干嘛呢

31:34.860 --> 31:35.860
就应该把这个显示出来

31:35.860 --> 31:36.860
对不对

31:36.860 --> 31:37.860
是不是要加把验证码

31:37.860 --> 31:38.860
这个区域显示出来

31:38.860 --> 31:39.860
那就把显示出来

31:39.860 --> 31:41.860
验证码错误的时候

31:41.860 --> 31:42.860
我就把这个区域

31:43.860 --> 31:44.860
Style

31:44.860 --> 31:45.860
Display

31:45.860 --> 31:48.240
把色维Blog

31:48.240 --> 31:49.240
好

31:49.240 --> 31:50.240
刷新

31:50.240 --> 31:51.240
失败

31:51.240 --> 31:52.240
失败

31:52.240 --> 31:53.240
是不是验证码错误了

31:53.240 --> 31:54.240
对吧

31:54.240 --> 31:55.240
平时你们上网不就是

31:55.240 --> 31:56.240
这种场景吗

31:56.240 --> 31:57.240
验证码错误过后

31:57.240 --> 31:58.240
以这个时候再填

31:58.240 --> 31:59.240
是不是就可以发送到

31:59.240 --> 32:00.240
一个服务器

32:00.240 --> 32:01.240
把验证码发送到服务器

32:01.240 --> 32:02.240
比方说我们再创一个ABC

32:02.240 --> 32:03.240
123

32:03.240 --> 32:04.240
123

32:04.240 --> 32:05.240
ZCF

32:05.240 --> 32:06.240
7G

32:06.240 --> 32:07.240
等路

32:07.240 --> 32:08.240
是不是等路成功了

32:08.240 --> 32:09.240
对吧

32:10.240 --> 32:11.240
当然我这个

32:11.240 --> 32:12.240
应该跳脑页面

32:12.240 --> 32:13.240
那如果说验证码错误

32:13.240 --> 32:14.240
不要说乱写一个

32:14.240 --> 32:15.240
说验证码错误

32:15.240 --> 32:16.240
但是验证码错误

32:16.240 --> 32:17.240
真的是不是没有刷新

32:17.240 --> 32:18.240
我们无论说都要刷新的

32:18.240 --> 32:19.240
对吧

32:19.240 --> 32:20.240
因为服务器已经失效了

32:20.240 --> 32:21.240
它只是比对一次

32:21.240 --> 32:22.240
因此我们这里

32:22.240 --> 32:23.240
可以做一个简单的事情

32:23.240 --> 32:24.240
再写个函数

32:24.240 --> 32:25.240
刷新验证码

32:25.240 --> 32:27.240
这个非常简单

32:27.240 --> 32:28.240
很多东西

32:28.240 --> 32:29.240
并不像大家想象的那么复杂

32:29.240 --> 32:31.240
刷新验证码

32:31.240 --> 32:32.240
怎么刷新

32:32.240 --> 32:34.240
给这个IMEG ID

32:34.240 --> 32:36.240
IMEG

32:36.240 --> 32:37.240
怎么刷新呢

32:37.240 --> 32:40.240
我就给它的SRC属性

32:40.240 --> 32:42.240
复制为

32:42.240 --> 32:44.240
同样的一个地址

32:44.240 --> 32:45.240
但是复制为同样的地址

32:45.240 --> 32:46.240
浏览器有缓存的效应

32:46.240 --> 32:47.240
因此它

32:47.240 --> 32:48.240
不会甩立的

32:48.240 --> 32:49.240
它不会重新寻求服务器了

32:49.240 --> 32:50.240
那怎么办

32:50.240 --> 32:52.240
再加上一个水机的参数

32:52.240 --> 32:53.240
就完成了

32:53.240 --> 32:54.240
水一遍给它一个参数

32:54.240 --> 32:55.240
只要地址不一样

32:55.240 --> 32:56.240
它就可以形成过去

32:56.240 --> 32:57.240
因为服务器就不要这个参数

32:57.240 --> 32:58.240
这个参数

32:58.240 --> 33:01.240
只是让浏览器避免浏览器缓存的问题

33:01.240 --> 33:02.240
水面给一个吧

33:02.240 --> 33:03.240
就卖SRC这么

33:03.240 --> 33:05.240
给它一个水机

33:05.240 --> 33:06.240
那么怎么来刷新呢

33:06.240 --> 33:08.240
就这样刷新

33:08.240 --> 33:09.240
验证码错误

33:09.240 --> 33:11.240
错误就刷新呗

33:11.240 --> 33:13.240
refresh

33:13.240 --> 33:15.240
其实只要你有了验证码

33:15.240 --> 33:16.240
无论如何都要刷新

33:16.240 --> 33:17.240
就直接写吧

33:17.240 --> 33:18.240
因为我们一般当中

33:18.240 --> 33:19.240
成功都要跳转页面了

33:19.240 --> 33:20.240
对不对

33:20.240 --> 33:21.240
这个页面就不会再用了

33:21.240 --> 33:23.240
好来吧

33:23.240 --> 33:25.240
失败

33:25.240 --> 33:26.240
失败

33:26.240 --> 33:27.240
失败

33:27.240 --> 33:28.240
失败

33:28.240 --> 33:29.240
失败

33:29.240 --> 33:30.240
点

33:30.240 --> 33:31.240
是不是刷新了

33:31.240 --> 33:32.240
有些人还点这个图片

33:32.240 --> 33:33.240
也可以刷新

33:33.240 --> 33:34.240
还不简单吧

33:34.240 --> 33:35.240
点图片的时候

33:35.240 --> 33:36.240
加上这个函数就行了

33:36.240 --> 33:37.240
对吧

33:37.240 --> 33:38.240
点图片是不是也变了

33:38.240 --> 33:39.240
对吧

33:39.240 --> 33:40.240
这都很简单

33:40.240 --> 33:41.240
很简单

33:41.240 --> 33:42.240
因为你拿图片的时候

33:42.240 --> 33:44.870
服务器的C形是不是也变了

33:44.870 --> 33:45.870
对不对

33:45.870 --> 33:46.870
服务器的C形始终

33:46.870 --> 33:47.870
就那个图片保持一致

33:47.870 --> 33:48.870
就完事了

33:48.870 --> 33:49.870
这就是验证码的场景

33:49.870 --> 33:51.870
我们再重新走一遍

33:51.870 --> 33:52.870
登录

33:52.870 --> 33:53.870
登录我们一般是

33:53.870 --> 33:54.870
登录错误

33:54.870 --> 33:55.870
对吧

33:55.870 --> 33:56.870
登录失败

33:56.870 --> 33:57.870
服务器看了

33:57.870 --> 33:58.870
有一次到

33:58.870 --> 33:59.870
现在

33:59.870 --> 34:00.870
登录失败

34:00.870 --> 34:01.870
又一次了

34:01.870 --> 34:02.870
在这个时候

34:02.870 --> 34:03.870
你是不是激奇

34:03.870 --> 34:04.870
你是不是激奇

34:04.870 --> 34:06.870
你是不是激奇

34:06.870 --> 34:07.870
你赶快过写个验证

34:07.870 --> 34:08.870
对吧

34:08.870 --> 34:09.870
这个时候

34:09.870 --> 34:10.870
哪怕你写证去了

34:10.870 --> 34:11.870
说服务器不会出来的

34:11.870 --> 34:14.250
必须要写验证

34:14.250 --> 34:15.250
对不对

34:15.250 --> 34:16.250
这也那么爽

34:16.250 --> 34:18.250
看不清楚了

34:18.250 --> 34:22.250
贴线是RT关U

34:22.250 --> 34:23.250
点击

34:23.250 --> 34:24.250
登录成功

34:24.250 --> 34:25.250
好

34:25.250 --> 34:27.250
这是关于验证

34:27.250 --> 34:28.250
OK

34:28.250 --> 34:29.250
就讲到这

