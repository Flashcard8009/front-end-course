WEBVTT

00:00.000 --> 00:04.360
好 这一块来说一下这个模板引擎啊 这是个扩展场景 了解一下就想了

00:05.120 --> 00:06.660
我看一下我们的祖先

00:07.420 --> 00:09.720
是怎么去我这个页面的啊

00:10.240 --> 00:13.820
以前的什么伍佑啊 这些东西都没有 对不对

00:14.080 --> 00:19.960
前端没有发展起来 前端我们排拔叫做页面展 就是个切割图 做个静态页面就完事了

00:20.480 --> 00:24.320
当时前端工资也不高 很多事情都要后端负责

00:24.580 --> 00:25.600
为什么呢 因为

00:25.760 --> 00:30.980
就是因为这个东西没办法啊 因为我的页面需要在服务端渲染 首先给大家看一下个概念

00:31.240 --> 00:32.760
就是以前是怎么回事 怎么的页面

00:33.800 --> 00:35.320
这里看一下两种渲染方式啊

00:36.360 --> 00:37.640
最早其实第二种

00:37.900 --> 00:39.680
就这种是最早期的方式

00:39.940 --> 00:43.260
就是客户端去请求服务器 服务器直接给他一个

00:43.520 --> 00:46.860
想应一个ATML和CSSS 对吧 ATML里面会自带

00:47.360 --> 00:51.200
CSSS 客户端再去请求CSSS 这个过程我就不画了

00:51.460 --> 00:54.780
总之呢服务器最终会给他一个完整的页面 一个CSSS

00:55.240 --> 00:56.260
这个CSSS

00:56.520 --> 01:01.380
好像说可以做很多事情 但是以前真没有做多好事情 比方说做一做轮波图

01:01.640 --> 01:04.460
做一做一些点击效果 就做这么一些事情

01:04.720 --> 01:09.060
什么阿迦克实际基本上很少很少写 有没有写有 但是写的不多

01:09.580 --> 01:13.680
更多的时候是服务器在服务器这边把页面就组装好

01:13.940 --> 01:16.480
动态生成页面 比方说你请求了一个地址

01:16.740 --> 01:19.060
要获取学生好服务器给你生成一个列表

01:19.320 --> 01:22.120
这个页面都可以生成一个列表 一个列表里面有很多很多的学生

01:22.380 --> 01:23.920
然后把ATML给组装好

01:24.120 --> 01:26.320
组装好了过后一起发送给客户端

01:26.560 --> 01:30.020
客户端拿到过后就已经有数据了 就已经有所有东西了

01:30.280 --> 01:33.200
既是不用去生成数据 数据跟既是没有什么关系

01:33.600 --> 01:36.040
既是只负责做一些效果 这是最早的时候

01:37.440 --> 01:38.200
因此呢

01:38.560 --> 01:42.440
以最早早期咱们的祖先都是用后端

01:42.680 --> 01:45.560
因为他后端要写服务器 说后端要负责组装页面

01:46.640 --> 01:49.720
当时后端要聊一下的知识特别多 除了后端知识之外

01:49.840 --> 01:53.000
还要去了解很多前端 把掌控前端的东西

01:53.480 --> 01:57.880
包括介石甚至都有可能是后端写的 因为介石也是服务器提供的

01:58.160 --> 02:01.720
服务器要根据页面的不同情况来生成不同的介石发生到客户端

02:02.000 --> 02:03.720
介石都是后端写的

02:04.320 --> 02:09.880
把后端整整很牢火 后来我们网站越来越大 后端实在是躺住了

02:10.200 --> 02:14.120
然后说能不能把这些乱七八糟的东西分出去 我就提供API就行了

02:14.520 --> 02:18.480
因为后面还有移动端 还有平板 各种情况 后端要封掉了

02:18.960 --> 02:21.840
所以说就出现了前后端分离

02:22.240 --> 02:25.200
那么目前就变成这种模式了 这种模式就是

02:26.160 --> 02:32.240
我们目前 大家为什么可以来学前端 前端工资也上去了 跟基本上出来过后端 跟后端都持平了

02:32.920 --> 02:36.320
就是前端要负责很多事情 包括数据的生成 也就是前

02:36.880 --> 02:39.920
客户端那边 服务端那边啥都不用管 就给了一个静态页面

02:40.440 --> 02:46.280
什么数据哪来全 用RX请求 介石全部生成 于是就涉及到一些框架 像VOR Reactor

02:46.760 --> 02:52.760
服务器给你的页面 实际上就啥都没有 就一个DIV 里边一个ID为AP 或者是为ROOT

02:53.600 --> 02:57.440
然后剩下的事情全部交给个客户端 在客户端这边去动态生成数据

02:58.120 --> 03:00.880
这是目前经典的模式 用VOR Reactor来渲染的

03:01.520 --> 03:03.760
这叫客户端渲染 这叫服务器渲染

03:04.520 --> 03:08.320
服务器渲染我们以前 现在有没有服务器渲染的 现在有

03:09.280 --> 03:12.400
比方说我们现在服务器渲染一般都会用VOR SSR

03:13.000 --> 03:19.320
或者是RX SSR 你们后面应该会学 或者是用PreyRender都可以来实现服务端渲染

03:20.120 --> 03:22.880
招样还是用VU框架 用RX框架 都没问题

03:23.280 --> 03:26.960
所以说现在的服务端渲染已经很少很少使用模板引擎了

03:27.640 --> 03:32.000
这是一种太古老的方式了 不过这几刻咱们来看一下 看一下我们主线是怎么玩的

03:32.600 --> 03:39.480
给大家开拓一些视野 另外如果说你们以后就业的时候 遇到一些公司 脑罩牙的公司 可能还在用模板引擎

03:39.920 --> 03:44.200
那你制造 制造的制造是怎么回事 我们这里简单讲一项

03:45.240 --> 03:47.800
特别特别简单 什么叫做模板引擎呢

03:48.560 --> 03:53.280
其实我们在学习VU的时候啊 也接触过模板引擎 我们在学习VU的时候

03:54.000 --> 03:58.320
VU里边是不是有一个可以写一天吧 就可以写模板对吧template 对不对

03:58.800 --> 04:04.320
那么这个模板需要编译解析 对吧 那个解这个解析的过程就是靠模板引擎做的

04:04.800 --> 04:07.720
VU里边的模板引擎呢 用的是这个must catch

04:09.400 --> 04:13.280
所以模板引擎实际上是跟那个服务端还是客户端无关的 它是怎么意思呢

04:13.560 --> 04:17.360
就是在静态内容中查处动态内容 就这么个意思 你看VU的代码里边

04:17.760 --> 04:23.400
是不是可以两个大括号对吧 查出一些动态内容对不对 他就是在静态内容里边查处动态内容 然后给编译生成一个结果

04:23.720 --> 04:29.800
这就是模板引擎 他不在乎在客户端还是在服务器 只不过了以前的生成一面实在是没办法

04:30.280 --> 04:36.840
我们在服务器这边是通过模板引擎 再生成一个atmail 然后再把atmail完整 生成的结果给你发生到客户端 一会一看就明白了

04:38.880 --> 04:43.200
常见的模板引擎其实有很多 我这里是随便写了两个 其实还有别的语言 比方说PHP对吧

04:44.040 --> 04:47.240
那个叫什么smarty 对不对 模板引擎什么java的jsp

04:48.120 --> 04:54.920
还有一个free freeze啊free freeze啊 我都忘了啊 好久没碰过了 也是模板引擎对吧 csh的razer啊 都是模板引擎 模板引擎一大堆

04:55.480 --> 05:01.240
它都无论是什么模板引擎的 它都是把一个静态内容通过某一些语法给它插入一些动态的东西

05:01.920 --> 05:09.720
然后呢 生成一个结果 那么这一颗我们学这模板引擎呢 是跟express配合比较好的ejs 这个模板引擎

05:10.240 --> 05:12.520
啊 咱们来看一下 它在我官网的官网

05:13.520 --> 05:21.600
啊 特别简单 特别简单 先安装吧 我们直接来安装 一看就明白了 npm i ejs

05:22.320 --> 05:27.640
安装一下 然后呢 我们到这边来啊 在index里边 我们就来测试一下吧

05:28.960 --> 05:31.680
测试一下requireejs

05:33.520 --> 05:41.160
得到ejs 看一下这个模板引擎怎么玩啊 它就是往静态内容 我们比较有个静态内容吗 一个静态上就是个制无串嘛 对不对啊 一个制无串

05:41.800 --> 05:46.520
啊 这个制无串呢 我要啊 就写这么一句话啊 这个制无串里边有这么一句话 就是

05:47.480 --> 05:50.480
呃 生成的数字是

05:51.400 --> 06:01.640
后边得到一个结果 这个结果是动态的啊 这个结果呢 我们就可以写 按照这个模板引擎的语法 就是一个坚固号 一个百分号 一个等号 就是把把把这个值呢 拼接到这

06:02.680 --> 06:10.520
啊 什么就跟那个没有什么本质区别跟这个玩意儿 对吧 知道吧 没有什么本质区别啊 然后呢 我们给他复制为一个number吧

06:11.480 --> 06:16.680
当这个number 是不是没有 是不是没有这个number 没有这个number 需要在编译的时候给我提供这个数据

06:17.040 --> 06:21.960
好 那么怎么来玩呢 就是ejs啊 你可以自己去看他官方文档 我难得说了啊 render

06:22.560 --> 06:27.040
然后呢 第一个就是模板啊 模板就是str啊 就是我们的模板

06:27.640 --> 06:34.440
好 然后呢 第二个是我们给他的数据 给他的数据是一个对象 对象里边呢 你要提供数据 然后给他提供一个number 这个number呢 来自于一个

06:35.240 --> 06:42.440
学习书 对吧 这样子呢 他就编译了 他生成一个编译结果 result 咱们来看一下吧 这个编译结果 输出 result

06:43.640 --> 06:45.800
好 接下来我们这里用 npm start

06:47.360 --> 06:51.520
不就得到了吗 生成的数字 是不是啊 是不是就得到这个 这就是个模板引擎

06:52.200 --> 06:59.720
是不是很简单 特别特别简单啊 然后呢 我们再来看一下啊 这个模板引擎呢 还支持文件 比方说我们这里呢 新建个文件啊

07:00.440 --> 07:10.120
呃 给他写个test.ejs吧 用ejs还是后维 当然你用别的后维也可以啊 这个地方呢 我建议大家去 如果说你要写这个玩意的话 我建议大家安装一个

07:10.200 --> 07:22.280
就这个插件啊 ejs long grade support 安装一下这个插件啊 我之前都没有安装他在提示我啊 安装这个插件过后呢 他可以用一些简洁的语法帮你生成啊 比方说我们这里呢 就写个一面嘛啊 h1

07:22.920 --> 07:26.440
然后呢 我们这里一个数字 数字是啥呢 我们这里可以用那个

07:27.160 --> 07:34.040
ejs 怎么 怎么出来 ejs out 他自动给你生成这个代码啊 然后这边把number放进放进来

07:34.360 --> 07:42.120
对吧 这就是一个进 这其实就是一个 本质上就是一个静态的制服串 这个制服串里边给插入一个动态内容 对吧 服务器又不认识页面的

07:42.600 --> 07:48.280
他就把他当成一个制服串 往制服串里边插入一个内容 对吧 好 那么我们现在怎么来玩呢 就可以这种方式

07:49.240 --> 07:56.840
ejs render file啊 这里写上文件的 当然最好是绝对都进啊 我这里哪能弄了 我觉得当前目录下面的那个

07:57.960 --> 08:05.400
那个就是test.ejs啊 生成file啊 render file 然后后边给他提供数据 数据呢还是一样啊 number

08:06.360 --> 08:11.320
mess the writer啊 给他一个number 当然你可以给他很多数据 那么这里边怎么去用你 随便你

08:11.800 --> 08:15.160
啊 然后呢 第三 后面他得到一个是promise啊 因为

08:16.040 --> 08:23.480
毕竟是文件嘛 文件处理 他是得了一个promise 我们把编译的结果呢 输出啊 result 看一下吧 保存

08:25.000 --> 08:30.520
你看 是不是得到这个玩意儿 你看数字是不是直接拼到这了 对吧 这就是模板引擎 对吧 他把一个模板

08:30.520 --> 08:34.440
然后根据一个数据 根据一个模板 然后得到 刷得到结果 这是模板引擎

08:34.840 --> 08:39.560
他跟那个什么科普端跟那个服务器没有一毛钱关系 他就是得提供这么一个东西

08:40.280 --> 08:46.360
那么按照我们以前的做法呢 再回到这 按照以前那么做法 是不是在访请求的时候 服务器在服务端

08:46.840 --> 08:54.280
生成一个精彩页面 生成一个页面 然后发送到科普端 对吧 一个页面实际上对服务器啊 也就是个制服串 把这个制服串发到科普端 科普端于线了就出来了

08:55.080 --> 09:01.480
这是我们传统的方式 那么传统的方式是不是要介入模板引擎 这样子写下最方便 你用制服串拼接的协视力

09:01.960 --> 09:05.320
啊 所以说我们这里一般服务器就会用模板引擎来处理这个问题

09:05.640 --> 09:11.400
比方说express里本身就只使模板引擎啊 你安装了eGS过后呢 比方说吧 我们在这里

09:12.840 --> 09:14.840
我们在这里建立个文件夹叫views文件夹

09:15.560 --> 09:18.200
以前没有的对吧 再建立个文件夹叫ctrl文件夹

09:19.640 --> 09:26.760
好 然后呢 我们现在ctrl文件夹来处理请求views文件里夹里面放模板啊 比方说我们在这里呢 新建一个文件

09:27.400 --> 09:31.560
给大家取名为就是要比方students吧 叫eGS 这是不是个模板

09:32.040 --> 09:39.000
对不对 这是个模板 好 我们ctrl是处理请求的 比方说我们在写个请求吗 students.GS

09:40.840 --> 09:45.640
要介绍 我们这里还是按老的写法expressrequireexpress

09:48.120 --> 09:49.640
好 然后呢 得到一个rotor

09:50.440 --> 09:55.960
现在我们就不是给科普专API了 不是给他一个节省了 我是给他一个完整的页面了啊rotor

09:56.680 --> 09:58.680
然后呢 导出 给他写法都是一样的

09:59.480 --> 10:01.480
rotor导出 好 那么这边呢

10:01.560 --> 10:04.280
在那个音列车里边 在这里比方说

10:05.400 --> 10:08.760
找地方吧 开找哪 找个API请求之前吧

10:09.800 --> 10:15.400
eGS 比方说啊 我们请求 当我们请求这个地址的时候呢 我交给这个中间键啊 这个路由

10:16.360 --> 10:24.920
ctrl里边的students交给他 对吧 我们来让他ctrl里边的就是当然还有什么班级啊 学老师都会这种方式来做 对吧

10:25.080 --> 10:31.160
我们把请求交给他 那么交给他的时候呢 他一样的啊 只就一个区别 以前给他的是一个节省数据 对吧

10:31.240 --> 10:37.880
现在的给他的是一个完整的页面啊rotor 我们这里给什么啊 就这个地址啊 reg res

10:38.280 --> 10:40.600
就这个地址 好 那么这里边怎么玩呢

10:41.400 --> 10:42.120
其实很简单

10:43.240 --> 10:49.960
这里边咋玩呢 这里边就是用res render 他有这么一个方法 就是渲染一个

10:50.840 --> 10:54.440
模板啊 把模板的名称传进去 模板的名称在哪呢

10:55.000 --> 11:00.920
相对于这个目录下面的点鞋杠 相对于这个目录啊 相对于这个目录的students

11:01.240 --> 11:04.280
点e.s 啊 相对于他 第二弹数传数据

11:05.000 --> 11:07.800
也要给他提供什么数据 比方说你给他提供一个number

11:08.440 --> 11:10.360
啊 123 就随便给他提

11:11.480 --> 11:16.520
随便给他提供嘛 对吧 就选了这个模板给他提供这个数据 但是呢 就这里有个问题就是

11:16.920 --> 11:17.720
呃 那个

11:18.680 --> 11:26.920
express啊 他怎么知道我的模板在这个文念夹了 所以说你要设置一下啊 你在这里边我们在这个这是模板引擎

11:28.920 --> 11:31.480
啊 模板引擎 那么 引擎

11:32.840 --> 11:39.880
那么我们首先要设置一下app set 他可以设置一些全具变量啊 其中一个变量叫做views

11:40.520 --> 11:43.400
啊views 表示我们的模 表示我们的就是

11:43.960 --> 11:50.440
模板在哪 在哪个目录 那么我们可以用pass resolve对吧 给他一个决定路径 模板的目录在哪呢 在当前目录下面的

11:51.320 --> 11:52.440
views这个文件夹

11:52.920 --> 11:56.920
在这个目录 那么他到时候呢 找这个模板的时候 他就会从这个目录里边去找

11:57.480 --> 12:01.240
啊 那么后边我们在这里边是不是要找模板 对吧 那么找模板的时候 他就会从这个

12:01.720 --> 12:05.400
给他这个目录里边去找啊 相对于这个目录去找模板 就这么个意思

12:05.880 --> 12:13.480
好 这么就写好了啊 就写好了 咱们来看一下吧 写好了之后呢 我们打开榴弹器啊 这里local host 我们这里得到student

12:14.840 --> 12:19.160
啊student里面啥都没有对吧 因为这边 这边我们啥都没写 我们就写一个吧啊

12:19.880 --> 12:21.880
学生列表页

12:22.520 --> 12:23.560
然后呢 给他写个数字

12:24.520 --> 12:26.520
数字

12:28.520 --> 12:30.520
这个我们用egs out

12:31.720 --> 12:33.720
提示呢 egs out

12:33.720 --> 12:37.320
呃 囊本 对吧 为什么 这个囊本哪来的 这个囊本是就这里该传过来的

12:38.200 --> 12:43.800
是不是这里该传过来的啊 渲染这个模板 然后给你提供数据 然后呢 这个数据呢 是不是可以渲染到这儿

12:43.960 --> 12:45.480
就这么个意思啊

12:45.480 --> 12:47.480
你看 数字一二三就出来了

12:47.480 --> 12:51.400
你看整个过程啊 我们来看一下整个过程 整个过程呢 就是 我们请求

12:52.200 --> 12:55.560
请求到了 请求请求到服务器 对吧

12:56.360 --> 13:00.360
请求到服务器 然后谁在处理请求 是不是ctrl对吧ctrl

13:01.080 --> 13:02.840
控制器啊 这东西叫做控制器

13:04.120 --> 13:04.760
控制器

13:05.640 --> 13:10.920
控制器在处理请求的过程中 是不是处理完了请求过后 是把交给什么 交给了模板

13:11.080 --> 13:13.880
同时向模板传递一个数据 对吧 数据呢 叫做模型

13:14.920 --> 13:16.040
就是个对象嘛 你看一下

13:16.760 --> 13:18.040
是不是我们请求到那个

13:18.760 --> 13:23.720
控制器 然后呢 给他传递一个数据 你看这个数个对象 对象里面可以放很多数据啊

13:23.960 --> 13:26.440
然后呢 给他传到那个什么 传到模板

13:27.480 --> 13:28.360
啊 传到模板

13:29.480 --> 13:33.400
给谁呢 给模板 好 模板是不是生成结果 响应 对吧 生成

13:33.800 --> 13:39.160
把模板的响应 结果来响应 响应给客户端的 响应给流烂器的是模板还是静态页面

13:39.800 --> 13:45.800
响应给客户端的是一个静态页面 没有任何模板代码了 对吧 模板代码在服务器已经编一好了 直接给响应给你

13:46.040 --> 13:51.480
那么直接得到 得到这个结果了 没了意思吧 那么这个东西叫啥呀 这个东西 这个东西就是mvc

13:52.280 --> 13:53.800
模型叫做mod

13:55.240 --> 13:56.200
模板呢 叫做view

13:57.400 --> 14:00.920
试图啊 就是mvc 你看controllerc

14:01.960 --> 14:11.080
mvc 就这么个意思 这就是传统的最经典的服务器mvc模式啊 到现在呢 现在都没 没这些玩意儿了

14:12.040 --> 14:16.440
现在mvc 都跑到客户端去了 客户端的这些动态构建数据

14:16.680 --> 14:24.840
那么其实是很传统的方式 那么我们完整的写一遍吧 写一遍 那么这边呢 我们找到以前的训练程 把一个代码复制一下

14:27.560 --> 14:31.320
然后呢 我们把个代码复制一下

14:31.720 --> 14:32.520
就这一坨

14:34.440 --> 14:35.000
sync

14:35.960 --> 14:41.480
好 我们这里呢 是不是可以拿到这个学生的学所谓的学生的数据 对不对

14:41.880 --> 14:43.000
所以可以拿到学生数据

14:44.520 --> 14:48.440
result 拿到这个学生数据 那么我们把这个对象啊直接传过去

14:49.000 --> 14:53.560
这个对象里边有什么种数 对吧 有data这个对象里边有什么还记得吗

14:54.440 --> 14:55.080
有toto

14:55.960 --> 15:01.480
种数有什么data是学生的数据 对吧 我们把这个整个对象传过去 好 传过去过后了 到这边

15:02.440 --> 15:08.600
到这模板里面 模板里面我们怎么玩呢 有啊说我们这里是总总数

15:10.040 --> 15:13.720
学生总数 我们这里呢 用一个es out

15:14.760 --> 15:19.080
得到什么toto对吧 好 保存 你看一下 学生总数就出来了

15:20.200 --> 15:24.840
学生总数590个 对吧 那么第1页 当前是第几页呢 当前是

15:25.800 --> 15:28.440
当前是第几页 我们是不是可以传过去 对吧 我们这样子吧

15:29.400 --> 15:39.110
这样子 把他那个展开 展开过后能够传一下页嘛 当前是第几页 对吧 每页显示多少条零每次 对吧 这些东西

15:40.070 --> 15:45.030
这东西是不是都可以传给他 对不对 传给模板 让模板去宣展 我就给他提供数据 让模板去宣展

15:45.590 --> 15:49.910
宣传结果 把宣传的结果发给客户端 以前就是这样做的 学生总数

15:50.710 --> 15:52.630
当前是第几页呢 当前第

15:54.150 --> 15:57.590
多少页呢 当前是第配几页

15:58.150 --> 16:02.950
对吧 每一页显示多少条呢 每一页

16:05.990 --> 16:09.270
10条 不能这样写 里面是条

16:11.030 --> 16:16.310
条数据 以前就是这样子玩的 当前是第1页每页10条数据

16:17.510 --> 16:22.230
然后呢 学生呢 学生呢 我们就用一个UL嘛 ULS不要循环生成

16:22.230 --> 16:26.150
在模板语法里边 在EJS的模板语法里边 循环生成的很简单

16:27.110 --> 16:32.390
EJS4 就这个东西 就是一个就是一个护讯环 你看吧

16:33.590 --> 16:40.630
监固号百分奥开头 然后又写个护讯环 护讯环到这 到这 然后这个监固号百分奥 表示这个动态代码结束

16:40.950 --> 16:46.790
然后呢 后边还有一个还有个大货号 在用动态代码包一下 中间是不是又可以写动态代码了 中间的就是一个li

16:47.510 --> 16:49.830
这东西了解一下就行了 你们以后根本不会去写的

16:50.550 --> 16:55.030
这个中间就是个li li里面显示什么呢 显示学生的名字 我们就根据用那个吧

16:55.990 --> 16:56.870
EJS

16:58.790 --> 17:06.150
有个什么一起啊一起 我们这里呢用data 是对吧 你给我传的数据里面是个data 是我们用for一起啊 这里每一个就是个学生

17:06.790 --> 17:12.790
每个学生 然后然后这里的代码中断一下 中断一下这边就可以写静态代码了 然后这动态代码再结束

17:13.030 --> 17:20.150
对吧 好 那么这里呢 我们就写上那个每一个就是个li嘛 对不对 每个li里面是什么呢 我们就输出

17:20.630 --> 17:30.230
输出那个studio.net保存 刷新 你看 学生是不是输出来了 而且这个代码呢 是在扣端圈的吗 不是

17:30.790 --> 17:38.390
你看是不是 服务器发给我的时候就全部都有 对吧 根本就没有js 你看根本就没有发给我任何js 当然给js也可以

17:38.790 --> 17:45.350
比方说你来这里去引用一个js 也可以无所谓的 那么js呢只负责出了一些小的效果 就是以前传统的做法

17:45.750 --> 17:52.310
他不去加数据了 数据是在服务器给你加好了 直接给你发过来 服务器的压力也蛮大的 后端开发压力也蛮大的 对吧

17:52.790 --> 18:01.110
啊 比方说 我们这里还可以进行分页 对不对 你要有兴趣的话自己去写啊 比方说 我们这里就随便来一个吧 啊 下一页

18:03.270 --> 18:05.430
啊 下一页啊 来个上页

18:07.510 --> 18:08.070
上一页

18:09.030 --> 18:15.590
好 那么这边呢 下一页 那么就给他一个配级等于多少呢 配等于一个啊 那么这里是不是又来拼接一下

18:16.870 --> 18:20.150
配等于多少 配级等于目前的配级是不是加一 对吧 一个表达是

18:21.190 --> 18:25.750
上页啊 上页简易啊 当然你要判断一下对吧 是不是等于零啊 这个都无所谓

18:26.310 --> 18:30.150
啊 那么我们这里呢 再写一下啊 配级加一 下一页

18:31.910 --> 18:32.390
你看吧

18:33.190 --> 18:41.590
下一页你看 看一下 看一下元代吧 元代吧 里面这个A元数对吧 配级等于2对吧 配级等于零 上页也变成零了啊 点下一页 你看 是不是

18:41.910 --> 18:45.750
挑转页面对吧 他有页面刷新的对不对 挑转页面点下一页

18:47.990 --> 18:51.030
我要把它变成数字在加啊 变成数字在加

18:54.950 --> 18:56.470
啊 等一下啊 第一

18:58.710 --> 19:03.590
第一 下一 下一页 下一页 下一页 上页

19:03.670 --> 19:05.830
然后以前以前开发页面就是这样子开发的 对吧

19:06.470 --> 19:09.110
看上去还是很简单的 对不对 但是呢 实际上

19:09.670 --> 19:15.110
这边如果页面复杂了 要遇到很多很多的问题 说现在这种做法呢 已经很少很少见了

19:15.750 --> 19:19.110
就算要服务端旋转 服务端旋转其实有个好处就是变于SEO

19:19.350 --> 19:24.870
什么叫SEO 就是一些收缩引擎啊 他来检查你的页面 他直接看你的页面元代嘛

19:25.510 --> 19:29.830
如果说你是现在的新的方式客户端旋转的话 用这种方式宣传的话

19:30.230 --> 19:33.590
SEO就不好 为什么呢 因为他这样子的

19:34.150 --> 19:40.150
收缩引擎得到了页面元代吧 是不是只有一个DIV ID.IP 对不对 啥都没有页面啥 他是靠介石生存的

19:40.390 --> 19:43.830
而收缩引擎的 现在运行介石的能力呢还是不足的

19:44.630 --> 19:48.310
他能不能运行 他能运行 但是他缺乏一个标准 所以说现在比较麻烦

19:48.630 --> 19:49.910
因此收缩引擎对这种

19:50.550 --> 19:54.710
客户端旋转的页面实际上是不好的 但是这个动作其实是有办法解决的啊 以后呢

19:54.710 --> 19:59.110
你学到这个 我讲的那个ReactSSR的设计的时候呢 还有办法解决的啊

20:00.070 --> 20:05.270
但是也不会用这个 总之呢 也不会这样 掌用这种模板引擎 在服务端用模板引擎的方式来宣传

20:05.910 --> 20:07.270
但是模板引擎很有用的

20:07.990 --> 20:11.030
只是在服务器用模板引擎的 这种做法呢 可能要少一些了

20:11.590 --> 20:15.430
只是在客户端里面也可以用模板引擎 因为模板引擎它其实跟服务器不关的

20:15.430 --> 20:21.670
它就是把一个动态内容 夹到那个静态内容里边去 然后编印出来 你看无忧里面不就是用了模板引擎嘛

20:22.790 --> 20:26.550
OK 都是关于这个模板引擎 了解一下以前的传统的这种做法

