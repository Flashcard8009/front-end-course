WEBVTT

00:00.370 --> 00:05.370
这节课咱们把ATTP-S协议讲了

00:05.370 --> 00:11.370
之前一同学也在问我说咱们之前网络通信的课程

00:11.370 --> 00:14.370
我看了一下 好像是没有讲 不知道讲没讲

00:14.370 --> 00:18.370
为了保险期间咱们把ATTP-S协议讲了

00:18.370 --> 00:24.370
讲了之后咱们下节课利用ATTP-S协议打一个服务器

00:24.370 --> 00:26.370
那怎么讲呢

00:26.370 --> 00:30.370
我要就请咱们今天的两个主角 邓哥和波利卡

00:30.370 --> 00:34.370
来跟我们为我们的教学事业做出贡献

00:34.370 --> 00:36.370
这个地方不好讲

00:36.370 --> 00:39.370
因为他里边要讲清楚的话 他里边比较绕

00:39.370 --> 00:42.370
这些可能可能比较骚扰

00:42.370 --> 00:46.370
而且涉及到一些加密密码学一些东西

00:46.370 --> 00:49.370
但是我讲的比较简单 可能比较骚扰

00:49.370 --> 00:53.370
如果说你下来实在是理解不了

00:53.370 --> 00:55.370
反复的思考 反复的琢磨

00:55.370 --> 00:57.370
反复的砍头 实际上你理解不了这个

00:57.370 --> 00:58.370
那么你只要记住一点

00:58.370 --> 01:00.370
ATTP-S这个协议

01:00.370 --> 01:02.370
就这个协议

01:02.370 --> 01:05.370
ATTP-S这个协议 他能够保证

01:05.370 --> 01:09.370
数据在传输过程中

01:09.370 --> 01:11.370
在传输过程中 标记电脑中病毒

01:11.370 --> 01:14.370
那他管不了 这是别的安全性的

01:14.370 --> 01:16.370
这是操作系统安全性 这些东西

01:16.370 --> 01:19.370
安全性其实有很多方面的

01:19.370 --> 01:23.370
那么ATTP-S是在保证数据在传输过程中

01:23.370 --> 01:26.370
不被窃取和篡改

01:26.370 --> 01:28.370
什么要窃取和篡改

01:28.370 --> 01:30.370
平时你们在上网的过程中

01:30.370 --> 01:33.370
不是在网上登录吗 要输入账号密码

01:33.370 --> 01:34.370
如果那个网站

01:34.370 --> 01:37.370
它不是一个ATTP-S协议打件的

01:37.370 --> 01:40.370
那么你们的写的账号密码是名文传输的

01:40.370 --> 01:42.370
什么叫名文传输的

01:42.370 --> 01:43.370
什么叫名文传输

01:43.370 --> 01:44.370
你写的账号 比如说

01:44.370 --> 01:46.370
ABC密码是123

01:46.370 --> 01:47.370
这个数据

01:47.370 --> 01:49.370
它直接用名文的方式

01:49.370 --> 01:51.370
就是原始格式的方式

01:51.370 --> 01:53.370
在网络中传输

01:53.370 --> 01:54.370
传输过程

01:54.370 --> 01:55.370
只要说

01:55.370 --> 01:57.370
因为我们知道一个数据发送出去

01:57.370 --> 01:59.370
它要经过很长一段路

01:59.370 --> 02:00.370
才会到达服务器

02:00.370 --> 02:03.370
中途是不是遇到什么土匪恶霸

02:03.370 --> 02:05.370
此山是我开 此树是我摘

02:05.370 --> 02:07.370
直接把数据给你结获了

02:07.370 --> 02:08.370
由于你是名文

02:08.370 --> 02:10.370
它就直接知道你的账号密码了

02:10.370 --> 02:12.370
这样子是非常危险的

02:12.370 --> 02:14.370
那中间怎么会被结获呢

02:14.370 --> 02:16.370
是因为我们传输过去的数据

02:16.370 --> 02:18.370
中间会经过很多的节点

02:18.370 --> 02:19.370
像什么

02:19.370 --> 02:21.370
你首先到你家里的路由器

02:21.370 --> 02:24.370
路由器又到外面的小区的极限期

02:24.370 --> 02:25.370
交换机等等

02:25.370 --> 02:27.370
那么出去又到城市的

02:27.370 --> 02:28.370
大的极限期交换机

02:28.370 --> 02:30.370
那么这些过程中又

02:30.370 --> 02:32.370
出现了很多节点

02:32.370 --> 02:33.370
这些节点

02:33.370 --> 02:34.370
如果说

02:34.370 --> 02:37.370
被黑客植入了一些密码

02:37.370 --> 02:39.370
植入了一些木码

02:39.370 --> 02:41.370
恶意程序在一个

02:41.370 --> 02:43.370
交换机极限性度由器这里边

02:43.370 --> 02:45.370
那么它就完全有可能把这个数据

02:45.370 --> 02:47.370
直接发送到黑客的计算机去了

02:47.370 --> 02:49.370
所以它就有可能会被切取掉

02:49.370 --> 02:51.370
原来的意思吧

02:51.370 --> 02:53.370
包括无线传输也是一样

02:53.370 --> 02:54.370
对不对

02:54.370 --> 02:55.370
无线传输的话

02:55.370 --> 02:57.370
那么

02:57.370 --> 02:59.370
因为它是通过了一个电波

02:59.370 --> 03:00.370
对不对

03:00.370 --> 03:01.370
电磁波来传输

03:01.370 --> 03:02.370
那么还有一个波段的

03:02.370 --> 03:03.370
这个波段的话

03:03.370 --> 03:05.370
也有可能会被别人祸取掉

03:05.370 --> 03:07.370
如果说你用名文传输的话

03:07.370 --> 03:10.370
那一定会导致这个问题

03:10.370 --> 03:11.370
所以说

03:11.370 --> 03:12.370
它是为了保证了数据

03:12.370 --> 03:14.370
在传输过程中不被切取

03:14.370 --> 03:15.370
就是你切取可不可以切取

03:15.370 --> 03:16.370
切取能切取

03:16.370 --> 03:18.370
你看不懂它写的是啥

03:18.370 --> 03:19.370
就是要加密

03:19.370 --> 03:21.370
另外不被篡改

03:21.370 --> 03:22.370
就是说你虽然有的时候

03:22.370 --> 03:24.370
虽然看不懂它是啥

03:24.370 --> 03:25.370
但是你可以给它改的

03:25.370 --> 03:27.370
把这个数据改了发过去

03:27.370 --> 03:28.370
那它怎么来办到的呢

03:28.370 --> 03:29.370
我这一刻主要是讲

03:29.370 --> 03:30.370
它怎么来办到的

03:30.370 --> 03:31.370
如果说你实在听不懂

03:31.370 --> 03:32.370
你就记住这一点就行了

03:32.370 --> 03:33.370
它就安全

03:33.370 --> 03:35.370
传输的安全

03:35.370 --> 03:39.370
从而保证传输安全

03:39.370 --> 03:41.370
它只是保证传输安全

03:41.370 --> 03:42.370
那传输过后

03:42.370 --> 03:43.370
你是什么东西能拿

03:43.370 --> 03:44.370
它就不管了

03:44.370 --> 03:46.370
那么又是别的东西在管

03:46.370 --> 03:48.370
好 咱们来说

03:48.370 --> 03:50.370
比方说我给大家举个例子

03:50.370 --> 03:52.370
邓哥和莫莉卡这两个主角

03:52.370 --> 03:54.370
现在出场了

03:54.370 --> 03:56.370
邓哥他就充当一个客户端

03:56.370 --> 03:58.370
莫莉卡就充当一个服务器

03:58.370 --> 04:02.370
有一天邓哥想跟莫莉卡

04:02.370 --> 04:04.370
一个通信表邓哥想表白

04:04.370 --> 04:06.370
给他说一句我爱你

04:06.370 --> 04:07.370
那么这个时候

04:07.370 --> 04:08.370
就是一个请求发过去

04:08.370 --> 04:09.370
对吧

04:09.370 --> 04:10.370
这种传统的方式

04:10.370 --> 04:11.370
就是个请求发过去

04:11.370 --> 04:13.370
如果说没有第三方的

04:13.370 --> 04:14.370
以机构的话

04:14.370 --> 04:15.370
那么倒是无所谓

04:15.370 --> 04:17.370
这个都传明文就明文嘛

04:17.370 --> 04:18.370
只有我们两个能看到

04:18.370 --> 04:20.370
但是万一出现了一个第三方

04:20.370 --> 04:22.370
就这个事情就麻烦了

04:22.370 --> 04:24.370
比方说出现了这么一个人

04:24.370 --> 04:25.370
邓哥来道断了

04:25.370 --> 04:27.370
这个时候就麻烦了

04:27.370 --> 04:28.370
咱们来看一下这个过程

04:28.370 --> 04:29.370
我们这里什么

04:29.370 --> 04:31.370
三次握手 四次挥手就不管了

04:31.370 --> 04:33.370
我们主要是建立连接过后

04:33.370 --> 04:34.370
建立连接过后

04:34.370 --> 04:36.370
双方怎么来传输去这个问题

04:36.370 --> 04:37.370
咱们来看

04:37.370 --> 04:38.370
比方说

04:38.370 --> 04:39.370
正常的情况下

04:39.370 --> 04:40.370
就是传一个我爱你

04:40.370 --> 04:41.370
他给他一个响应

04:41.370 --> 04:42.370
就完事了

04:42.370 --> 04:43.370
但是如果说

04:43.370 --> 04:45.370
第三方机构出现了就麻烦了

04:45.370 --> 04:46.370
他的传输过程中

04:46.370 --> 04:47.370
他的数据被豁去掉了

04:47.370 --> 04:48.370
因为是明文嘛

04:48.370 --> 04:49.370
这个东西太简单了

04:49.370 --> 04:50.370
我一看你的数据

04:50.370 --> 04:51.370
就知道你传的是啥

04:51.370 --> 04:52.370
是明文

04:52.370 --> 04:53.370
那我乘客一看

04:53.370 --> 04:55.370
你想说我爱你

04:55.370 --> 04:56.370
我也看到了

04:56.370 --> 04:57.370
而且我不仅看到了

04:57.370 --> 04:59.370
我还给你改了

04:59.370 --> 05:00.370
如果说这里丧后密码

05:00.370 --> 05:02.370
看到就已经很危险了

05:02.370 --> 05:04.370
不仅我看到我还可以改

05:04.370 --> 05:05.370
改成我恨你

05:05.370 --> 05:06.370
这事情麻烦了

05:06.370 --> 05:08.370
这个邓哥精心策划的

05:08.370 --> 05:09.370
这个表白了

05:09.370 --> 05:10.370
就是炮汤了

05:10.370 --> 05:11.370
所以说

05:11.370 --> 05:12.370
他要防止这种情况

05:12.370 --> 05:13.370
怎么办呢

05:13.370 --> 05:14.370
我们就可以使用加密

05:14.370 --> 05:15.370
好

05:15.370 --> 05:17.370
我们可能最先想到的加密

05:17.370 --> 05:18.370
大家可能对加密

05:18.370 --> 05:19.370
没有什么概念

05:19.370 --> 05:20.370
我给大家说一下

05:20.370 --> 05:21.370
加密主要是分成两种

05:21.370 --> 05:22.370
一种是对称加密

05:22.370 --> 05:24.370
一种是不对称加密

05:24.370 --> 05:25.370
我们这里先说对称加密

05:25.370 --> 05:26.370
对称加密是怎么意思呢

05:26.370 --> 05:27.370
产生一个密钥

05:27.370 --> 05:29.370
这个密钥到底是怎么玩的

05:29.370 --> 05:30.370
就是一个制服创

05:30.370 --> 05:31.370
一个制服创

05:31.370 --> 05:32.370
这个制服创可以使任何东西

05:32.370 --> 05:34.370
那么这个制服创

05:34.370 --> 05:36.370
通过一种数学算法

05:36.370 --> 05:38.370
可以把我们的信息

05:38.370 --> 05:40.370
跟我们这个密钥

05:40.370 --> 05:42.370
产生一个加密过后的信息

05:42.370 --> 05:44.370
又可以通过一种算法

05:44.370 --> 05:45.370
通过这个密钥

05:45.370 --> 05:46.370
把它解密

05:46.370 --> 05:48.370
解密成原式信息

05:48.370 --> 05:50.370
那么这个只有一个密钥

05:50.370 --> 05:51.370
所以说有的时候

05:51.370 --> 05:54.370
他也把它叫做单密钥加密

05:54.370 --> 05:55.370
只有一个密钥

05:55.370 --> 05:56.370
它既可以加密

05:56.370 --> 05:57.370
也可以用去解密

05:57.370 --> 05:58.370
就像一把钥匙一样

05:58.370 --> 05:59.370
对吧

05:59.370 --> 06:00.370
钥匙可以开锁

06:00.370 --> 06:02.370
没有人不能把它锁住

06:02.370 --> 06:03.370
就是这么个意思

06:03.370 --> 06:04.370
比方说我们加密的过程

06:04.370 --> 06:05.370
我们写了一段信息

06:05.370 --> 06:06.370
这个是明文

06:06.370 --> 06:08.370
然后通过我们的key

06:08.370 --> 06:09.370
就是我们的密钥

06:10.370 --> 06:12.370
然后就形成一个加密信息

06:12.370 --> 06:13.370
加密信息过后

06:13.370 --> 06:14.370
就不是原式内容了

06:14.370 --> 06:15.370
加密过后就是一些

06:15.370 --> 06:16.370
乱七八糟的信息

06:16.370 --> 06:17.370
你看不懂了

06:17.370 --> 06:19.370
然后你怎么来解开呢

06:19.370 --> 06:20.370
解密过程也很简单

06:20.370 --> 06:22.370
就是用加密过后的信息

06:22.370 --> 06:23.370
乱七八糟的一些制服创

06:23.370 --> 06:25.370
然后通过这个密钥

06:25.370 --> 06:26.370
这里不是加法

06:26.370 --> 06:27.370
这不是加法

06:27.370 --> 06:29.370
这是一个算法

06:29.370 --> 06:30.370
一种算法

06:30.370 --> 06:32.370
通过这个相同的算法

06:32.370 --> 06:33.370
解密算法

06:33.370 --> 06:35.370
还原到真实的信息

06:35.370 --> 06:37.370
常见的这种对称加密

06:37.370 --> 06:38.370
它的算法有这么一些

06:38.370 --> 06:39.370
大家有兴趣的话

06:39.370 --> 06:41.370
可以去百度里面查一查

06:41.370 --> 06:42.370
我们这里就不展开了

06:42.370 --> 06:44.370
毕竟我们写的是前端

06:44.370 --> 06:45.370
你只需要知道

06:45.370 --> 06:47.370
无论你使用哪一种算法

06:47.370 --> 06:48.370
它都能够

06:48.370 --> 06:49.370
都是这种模式

06:49.370 --> 06:50.370
模式是一样的

06:50.370 --> 06:51.370
无非就是这个步骤

06:51.370 --> 06:52.370
怎么算

06:52.370 --> 06:53.370
怎么算出来的加密信息不一样

06:53.370 --> 06:55.370
怎么把它解密过程不一样

06:55.370 --> 06:56.370
这些里边还受到

06:56.370 --> 06:58.370
不少数学的东西

06:58.370 --> 06:59.370
这是加密

06:59.370 --> 07:01.370
得就对称加密

07:01.370 --> 07:02.370
好 那么我们现在用

07:02.370 --> 07:03.370
对称加密来试一下

07:03.370 --> 07:05.370
看能不能解决我们的问题

07:05.370 --> 07:06.370
现在呢

07:06.370 --> 07:08.370
莫莉卡这里首先

07:08.370 --> 07:10.370
用某一种

07:10.370 --> 07:12.370
就产生一个密钥

07:12.370 --> 07:13.370
密钥可能名字就叫莫莉卡

07:13.370 --> 07:14.370
或者是别的什么

07:14.370 --> 07:15.370
随意支付串

07:15.370 --> 07:16.370
或者是当前日期无所谓

07:16.370 --> 07:18.370
你只要莫莉卡产生一个密钥

07:18.370 --> 07:19.370
一个支付串

07:19.370 --> 07:20.370
把它记住

07:20.370 --> 07:22.370
我给他取个名字叫Q1

07:22.370 --> 07:23.370
把它记住

07:23.370 --> 07:24.370
记住这个密钥

07:24.370 --> 07:25.370
保存到服务器的文件里面

07:25.370 --> 07:26.370
都行

07:26.370 --> 07:28.370
那么登革去请求莫莉卡的时候

07:28.370 --> 07:29.370
一开始还通信之前

07:29.370 --> 07:30.370
具体的通信之前

07:30.370 --> 07:32.370
他要先发动一个请求

07:32.370 --> 07:33.370
然后莫莉卡干嘛呢

07:33.370 --> 07:35.370
莫莉卡先不着急

07:35.370 --> 07:37.370
先不着急发动具体的信息

07:37.370 --> 07:38.370
三四五十个

07:38.370 --> 07:39.370
我们先不着急发动具体的信息

07:39.370 --> 07:41.370
我们先把密钥沟通好

07:41.370 --> 07:42.370
咱们先说好

07:42.370 --> 07:44.370
我们之后说话要加密

07:44.370 --> 07:46.370
那么莫莉卡就会告诉他

07:46.370 --> 07:47.370
我们之后说话

07:47.370 --> 07:48.370
我们就用这个密钥来加密

07:48.370 --> 07:49.370
对吧

07:49.370 --> 07:50.370
用这个密钥来加密

07:50.370 --> 07:51.370
登革一看

07:51.370 --> 07:52.370
行咧

07:52.370 --> 07:53.370
咱们把这个密钥

07:53.370 --> 07:54.370
他也保存了科普端

07:54.370 --> 07:55.370
对吧

07:55.370 --> 07:56.370
保存了科普端

07:56.370 --> 07:57.370
保存个面量

07:57.370 --> 07:58.370
怎么地方无所谓

07:58.370 --> 07:59.370
保存了科普后

07:59.370 --> 08:02.370
然后登革之后发送信息

08:02.370 --> 08:03.370
当然这些东西

08:03.370 --> 08:04.370
都是浏览器自动的

08:04.370 --> 08:05.370
你不用管

08:05.370 --> 08:07.370
你只需要跟我们的开发方式

08:07.370 --> 08:08.370
没有任何关系

08:08.370 --> 08:09.370
之前怎么写

08:09.370 --> 08:10.370
现在还怎么写

08:10.370 --> 08:11.370
它都是浏览器自动的

08:11.370 --> 08:12.370
我们在研究这个过程

08:12.370 --> 08:14.370
那么登革再发送信息的时候

08:14.370 --> 08:17.370
他把他发送的信息

08:17.370 --> 08:19.370
就用这个密钥来加密

08:19.370 --> 08:20.370
就用这个密钥来加密

08:20.370 --> 08:21.370
莫莉卡一看

08:21.370 --> 08:22.370
拿到这个信息过后

08:22.370 --> 08:23.370
是加密过后了

08:23.370 --> 08:24.370
对吧

08:24.370 --> 08:25.370
把它解密

08:25.370 --> 08:26.370
怎么解密

08:26.370 --> 08:27.370
就用这个密钥解密

08:27.370 --> 08:28.370
这个密钥是不是两个都有

08:28.370 --> 08:29.370
两个人都可以加密

08:29.370 --> 08:30.370
都可以解密

08:30.370 --> 08:31.370
那么双方就用这种方式

08:31.370 --> 08:32.370
来通信了

08:32.370 --> 08:33.370
对吧

08:33.370 --> 08:34.370
那么这个地方

08:34.370 --> 08:36.370
比刚才要好得多了

08:36.370 --> 08:37.370
刚才是什么情况

08:37.370 --> 08:40.370
刚才是你发送的明文

08:40.370 --> 08:41.370
对不对

08:41.370 --> 08:42.370
明文我就直接获取到信息了

08:42.370 --> 08:43.370
那么现在

08:43.370 --> 08:45.370
我是发送的是加密过后的

08:45.370 --> 08:46.370
加密过后的信息

08:46.370 --> 08:48.370
你就算被你黑客

08:48.370 --> 08:49.370
被从个获取到了

08:49.370 --> 08:50.370
他看不懂

08:50.370 --> 08:51.370
他没法解密

08:51.370 --> 08:53.370
因为他内里没有这个key

08:53.370 --> 08:54.370
没有这个必要

08:54.370 --> 08:55.370
只有这两个人有

08:55.370 --> 08:57.370
所以他看不懂这个信息

08:57.370 --> 08:59.370
因此他改了

08:59.370 --> 09:00.370
改了

09:00.370 --> 09:01.370
改也没法改

09:01.370 --> 09:02.370
一改了过后

09:02.370 --> 09:03.370
他解不开了

09:03.370 --> 09:04.370
对吧

09:04.370 --> 09:06.370
他解不开就表示错误了

09:06.370 --> 09:07.370
表示错误没事

09:07.370 --> 09:08.370
错误是没事的

09:08.370 --> 09:10.370
不要认为错误是不好的

09:10.370 --> 09:11.370
错误是没事的

09:11.370 --> 09:12.370
怕的是怎么了

09:12.370 --> 09:13.370
怕的是没有错误

09:13.370 --> 09:14.370
他认为是正常信息

09:14.370 --> 09:15.370
那就不得了了

09:15.370 --> 09:16.370
他肯定是不得了了

09:16.370 --> 09:18.370
要出大事了

09:18.370 --> 09:19.370
他认为错误的

09:19.370 --> 09:20.370
那就不做

09:20.370 --> 09:21.370
不做任何事情

09:21.370 --> 09:22.370
那么这边也受不到响应

09:22.370 --> 09:23.370
受不到响应

09:23.370 --> 09:24.370
就去检查一下

09:24.370 --> 09:25.370
服务器是不是出问题了

09:25.370 --> 09:26.370
客户端是不是出问题了

09:26.370 --> 09:27.370
那么排查一下就完事了

09:27.370 --> 09:28.370
那就把它找到了

09:28.370 --> 09:29.370
对吧

09:29.370 --> 09:31.370
但是真的有个问题

09:31.370 --> 09:34.370
第一次通信怎么解决

09:34.370 --> 09:35.370
但是如果说

09:35.370 --> 09:36.370
第一次通信就被获取到了

09:36.370 --> 09:37.370
那就完了

09:37.370 --> 09:39.370
你看这种情况

09:39.370 --> 09:40.370
我第一次通信

09:40.370 --> 09:42.370
在传出这个密腰的时候

09:42.370 --> 09:44.370
诚哥就把我获取到了

09:44.370 --> 09:45.370
诚哥说行

09:45.370 --> 09:47.370
那我也把它保存起来

09:47.370 --> 09:48.370
对吧

09:48.370 --> 09:49.370
我也把它保存起来

09:49.370 --> 09:50.370
然后呢

09:50.370 --> 09:51.370
我现在装作不知道

09:51.370 --> 09:53.370
我把这个东西扔给你

09:53.370 --> 09:54.370
他也保存起来了

09:54.370 --> 09:55.370
他都不知道

09:55.370 --> 09:57.370
发生中途发生了什么事

09:57.370 --> 09:58.370
然后呢

09:58.370 --> 09:59.370
接下来就不得了了

09:59.370 --> 10:00.370
因为这个人出现了

10:00.370 --> 10:01.370
他也保存了

10:01.370 --> 10:03.370
所以说后边发生信息

10:03.370 --> 10:05.370
本来他是解不开的

10:05.370 --> 10:07.370
但是他之前保存过的

10:07.370 --> 10:08.370
这个密腰

10:08.370 --> 10:09.370
所以他能解开了

10:09.370 --> 10:10.370
他不仅能看到他的内容

10:10.370 --> 10:12.370
而且还可以篡改

10:12.370 --> 10:13.370
我改了过后再重新用

10:13.370 --> 10:14.370
T1加密

10:14.370 --> 10:15.370
然后传给你

10:15.370 --> 10:16.370
他就认为是正常的内容了

10:16.370 --> 10:17.370
他一看

10:17.370 --> 10:18.370
哇 我恨你

10:18.370 --> 10:19.370
那就完事了

10:19.370 --> 10:20.370
对不对

10:20.370 --> 10:21.370
那么这里呢

10:21.370 --> 10:22.370
还是不能解决这个问题

10:22.370 --> 10:24.370
因此呢

10:24.370 --> 10:26.370
现在我们要引入

10:26.370 --> 10:27.370
第二个东西

10:27.370 --> 10:28.370
叫做非对称加密

10:28.370 --> 10:30.370
在刚才的基础上

10:30.370 --> 10:32.370
我们还要进行一层安全的

10:32.370 --> 10:34.370
安全的就是处理

10:34.370 --> 10:35.370
就是非对称加密

10:35.370 --> 10:37.370
什么叫非对称加密呢

10:37.370 --> 10:39.370
他表示的是一堆米

10:39.370 --> 10:41.370
他就是两个了

10:41.370 --> 10:42.370
两个了

10:42.370 --> 10:43.370
一个用于加密

10:43.370 --> 10:45.370
一个用于解密

10:45.370 --> 10:46.370
那么这里呢

10:46.370 --> 10:47.370
一般来说

10:47.370 --> 10:48.370
它产生密要堆的时候

10:48.370 --> 10:50.370
它会产生两个制服圈

10:50.370 --> 10:51.370
一个公药

10:51.370 --> 10:52.370
一个食药

10:52.370 --> 10:53.370
一产生的时候

10:53.370 --> 10:54.370
两个就产生了

10:54.370 --> 10:55.370
都是制服圈

10:55.370 --> 10:57.370
公药通常是公开的

10:57.370 --> 10:58.370
你随便获取

10:58.370 --> 11:00.370
获取了对我也没什么影响

11:00.370 --> 11:02.370
食药一般是要保留的

11:02.370 --> 11:04.370
是不能让任何人获取的

11:04.370 --> 11:06.370
食药获取的危险性很大

11:06.370 --> 11:08.370
因为它跟它的处理方式有关

11:08.370 --> 11:10.370
那么后边怎么来处理呢

11:10.370 --> 11:12.370
你可以用公药加密

11:12.370 --> 11:14.370
就是如果说你用一个加密的

11:14.370 --> 11:15.370
就用另一个解密

11:15.370 --> 11:16.370
比如你用公药加密

11:16.370 --> 11:18.370
就用食药解密

11:18.370 --> 11:19.370
你用食药加密

11:19.370 --> 11:20.370
就得用公药解密

11:20.370 --> 11:22.370
没了意思吧

11:22.370 --> 11:23.370
你用公药加密

11:23.370 --> 11:24.370
不能用公药解密的

11:24.370 --> 11:26.370
总之这里是有些数学算法

11:26.370 --> 11:27.370
我们就不深究了

11:27.370 --> 11:28.370
总之它产生这么一种

11:28.370 --> 11:30.370
非常非常整齐的现象

11:30.370 --> 11:32.370
那么我们以后的加密过程

11:32.370 --> 11:33.370
我们可能是这样子的

11:33.370 --> 11:35.370
比方说我这里用公药加密

11:35.370 --> 11:37.370
我有个原式信息

11:37.370 --> 11:38.370
我用公药进行加密

11:38.370 --> 11:40.370
是不是产生一个加密过后的结果

11:40.370 --> 11:42.370
但是那个加密过后的结果

11:42.370 --> 11:44.370
你只能使用食药来解密

11:44.370 --> 11:46.370
解密过程我只能使用

11:46.370 --> 11:47.370
食药来解密

11:47.370 --> 11:48.370
解密出原式信息

11:48.370 --> 11:50.370
那么这种对称性算法的话

11:50.370 --> 11:52.370
这种算法叫做

11:52.370 --> 11:54.370
非对称加密算法

11:54.370 --> 11:56.370
那么常见有这么一些

11:56.370 --> 11:58.370
用了最多的就是RSA

11:58.370 --> 12:00.370
这是非对称加密

12:00.370 --> 12:02.370
有了非对称加密过后

12:02.370 --> 12:03.370
咱们来看一下

12:03.370 --> 12:05.370
能不能解决之前的问题呢

12:05.370 --> 12:07.370
回到这

12:07.370 --> 12:08.370
首先服务器

12:08.370 --> 12:09.370
摩尼卡

12:09.370 --> 12:10.370
不是要通信吗

12:10.370 --> 12:11.370
对吧

12:11.370 --> 12:12.370
我们要尽量安全一点

12:12.370 --> 12:13.370
那么我们拋弃掉之前的

12:13.370 --> 12:15.370
对称加密的模式

12:15.370 --> 12:17.370
我们用非对称加密行不行

12:17.370 --> 12:18.370
摩尼卡在服务器

12:18.370 --> 12:19.370
首先产生两个

12:19.370 --> 12:20.370
公药和食药

12:20.370 --> 12:22.370
食药我永远不会发出去

12:22.370 --> 12:23.370
我只会发出去公药

12:23.370 --> 12:24.370
公药我可以发出去的

12:24.370 --> 12:25.370
比方说我们

12:25.370 --> 12:26.370
把它命名为Q1

12:26.370 --> 12:27.370
公药Q1 食药Q2

12:27.370 --> 12:29.370
他们两个是不一样的

12:29.370 --> 12:30.370
然后呢摩尼卡呢

12:30.370 --> 12:31.370
当他们说

12:31.370 --> 12:32.370
来我们通信吧

12:32.370 --> 12:33.370
摩尼卡说别着急

12:33.370 --> 12:36.370
我先把这个公药给你

12:36.370 --> 12:37.370
公药呢干嘛的

12:37.370 --> 12:38.370
公药呢我们可以加密的

12:38.370 --> 12:39.370
对吧

12:39.370 --> 12:40.370
公药给你

12:40.370 --> 12:41.370
那么他拿到公药了

12:41.370 --> 12:43.370
后续呢我们用公药来加密

12:43.370 --> 12:44.370
对吧

12:44.370 --> 12:46.370
你看我用公药Q1加密了

12:46.370 --> 12:47.370
我爱你

12:47.370 --> 12:48.370
这个三个字

12:48.370 --> 12:49.370
发送到摩尼卡

12:49.370 --> 12:50.370
摩尼卡是不是可以用食药解密

12:50.370 --> 12:52.370
解密出来的是不是可以看到

12:52.370 --> 12:53.370
我爱你

12:53.370 --> 12:54.370
别人是解不了密的

12:54.370 --> 12:55.370
对吧

12:55.370 --> 12:56.370
别人没有食药他解不了密

12:56.370 --> 12:58.370
因此呢他可以看到我爱你

12:58.370 --> 12:59.370
三个字

12:59.370 --> 13:00.370
然后呢他发动消息

13:00.370 --> 13:01.370
是不是也是一样

13:01.370 --> 13:02.370
用公药加密

13:02.370 --> 13:03.370
对不对

13:03.370 --> 13:04.370
他也用公药加密

13:04.370 --> 13:05.370
给他回那个信息

13:05.370 --> 13:06.370
不好意思

13:06.370 --> 13:07.370
这个信息呢

13:07.370 --> 13:09.370
登革看不懂

13:09.370 --> 13:10.370
为什么呢

13:10.370 --> 13:12.370
因为登革解不开

13:12.370 --> 13:14.370
他没有食药是不是解不开

13:14.370 --> 13:16.370
食药是永远不能发出去了

13:16.370 --> 13:17.370
对不对

13:17.370 --> 13:18.370
他解不开这个东西

13:18.370 --> 13:19.370
那怎么办呢

13:19.370 --> 13:21.370
怎么办呢

13:21.370 --> 13:23.370
他又想到一种办法

13:23.370 --> 13:25.370
那我们能不能把这个

13:25.370 --> 13:26.370
对一层加密啊

13:26.370 --> 13:27.370
跟那个

13:27.370 --> 13:29.370
非对层加密

13:29.370 --> 13:30.370
联系起来

13:30.370 --> 13:31.370
一起来弄

13:31.370 --> 13:33.370
你看着就形成了这种模式

13:33.370 --> 13:35.370
服务器在这了啊

13:35.370 --> 13:37.370
首先登革发生一个请求到服务器

13:37.370 --> 13:39.370
他给摩尼卡说我们通信吧

13:39.370 --> 13:40.370
我有点事想跟你说

13:40.370 --> 13:41.370
摩尼卡说别忙

13:41.370 --> 13:43.370
我先给你一个公药

13:43.370 --> 13:44.370
给到他

13:44.370 --> 13:45.370
登革说

13:45.370 --> 13:46.370
你光给我公药

13:46.370 --> 13:47.370
你不给我食药

13:47.370 --> 13:48.370
我后面解不开啊

13:48.370 --> 13:49.370
对吧我解不开

13:49.370 --> 13:50.370
那怎么办呢

13:50.370 --> 13:52.370
登革在他的计算机上啊

13:52.370 --> 13:53.370
他又给他

13:53.370 --> 13:54.370
他又自己产生了一个

13:54.370 --> 13:56.370
对一层加密的密要

13:56.370 --> 13:57.370
就是我们最开始的那个

13:57.370 --> 13:58.370
对一层加密的密要

13:58.370 --> 13:59.370
key2

13:59.370 --> 14:01.370
他自己产生了对吧

14:01.370 --> 14:03.370
那么他为了传输这个key2的事

14:03.370 --> 14:04.370
他为了传输这个key2呢

14:04.370 --> 14:06.370
他为了安全不能直接传输

14:06.370 --> 14:08.370
传输的话会被中间

14:08.370 --> 14:10.370
会被那个成哥获取掉

14:10.370 --> 14:11.370
成哥一获取到

14:11.370 --> 14:12.370
他直接就打到key2了

14:12.370 --> 14:13.370
他不能直接传输

14:13.370 --> 14:16.370
他要用公药加密过后传输

14:16.370 --> 14:17.370
你看这里有点绕啊

14:17.370 --> 14:19.370
他用公药加密过后传输

14:19.370 --> 14:21.370
这样子呢成哥就算获取到

14:21.370 --> 14:23.370
他不知道这个私要是什么对吧

14:23.370 --> 14:25.370
他就解不开解不开这个key2

14:25.370 --> 14:26.370
他不知道key2是什么

14:26.370 --> 14:27.370
那么他就保证了

14:27.370 --> 14:28.370
登革是我

14:28.370 --> 14:29.370
由于登革是自己产生的key2

14:29.370 --> 14:30.370
他自己是知道的

14:30.370 --> 14:31.370
他把这个东西

14:31.370 --> 14:34.370
用公药加密过后传给摩尼卡

14:34.370 --> 14:35.370
那么摩尼卡还有事

14:35.370 --> 14:37.370
摩尼卡只有摩尼卡有私要

14:37.370 --> 14:38.370
他是不是可以解开

14:38.370 --> 14:39.370
这样子一解开了过后

14:39.370 --> 14:41.370
摩尼卡是不是有自己的key2

14:41.370 --> 14:42.370
对不对

14:42.370 --> 14:43.370
那么现在key2

14:43.370 --> 14:45.370
key2是不是只能有

14:45.370 --> 14:47.370
只能是登革和摩尼卡

14:47.370 --> 14:48.370
能拿到

14:48.370 --> 14:50.370
其他人是拿不到这个key2的

14:50.370 --> 14:51.370
没了意思吧

14:51.370 --> 14:53.370
其他人根本就拿不到这个key2

14:53.370 --> 14:55.370
不可能拿得到了

14:55.370 --> 14:56.370
因为key2是登革产生吧

14:56.370 --> 14:57.370
他有吗

14:57.370 --> 14:58.370
就是他传输的时候

14:58.370 --> 15:00.370
是用公药加密过后的

15:00.370 --> 15:01.370
别人解不开

15:01.370 --> 15:03.370
只用摩尼卡才能解开

15:03.370 --> 15:05.370
因此摩尼卡是能够拿到这个key2的

15:05.370 --> 15:07.370
好那么后续就传输简单了

15:07.370 --> 15:10.370
我们后面就用key2加密

15:10.370 --> 15:12.370
跟那个公药私要就没关系了

15:12.370 --> 15:14.370
后面我们就用key2加密

15:14.370 --> 15:17.370
然后摩尼卡用key2解密

15:17.370 --> 15:20.370
解密过后他才传输你是个好人

15:20.370 --> 15:22.370
那么这边用key2解密

15:22.370 --> 15:23.370
就看到了

15:23.370 --> 15:25.370
那么就没系了对不对

15:25.370 --> 15:27.370
那么这是用这种模式来传输

15:27.370 --> 15:28.370
但这种模式传输

15:28.370 --> 15:30.370
还是有一个隐患

15:30.370 --> 15:34.370
虽然第三方看不到你的key2

15:34.370 --> 15:35.370
但是呢

15:35.370 --> 15:37.370
它可以串感

15:37.370 --> 15:39.370
你看着它怎么来串感

15:39.370 --> 15:41.370
最开始的时候

15:41.370 --> 15:42.370
我说登革说

15:42.370 --> 15:43.370
我们来通信吧

15:43.370 --> 15:44.370
乘客不管你

15:44.370 --> 15:45.370
那就通信呗

15:45.370 --> 15:46.370
那么摩尼卡

15:46.370 --> 15:48.370
他首先给他一个公药对吧

15:48.370 --> 15:49.370
给他一个key1公药

15:49.370 --> 15:52.370
这个时候诚哥出现了

15:52.370 --> 15:53.370
等等

15:53.370 --> 15:55.370
这个时候我们有文章了

15:55.370 --> 15:57.370
公药key1我保存在这来

15:57.370 --> 15:59.370
我保存到我的系统里边

15:59.370 --> 16:02.370
我自己在给你产生一个公药key3

16:02.370 --> 16:04.370
这是我自己产生的

16:04.370 --> 16:06.370
因为公药产生很简单的

16:06.370 --> 16:08.370
一个算法就可以产生一个公药

16:08.370 --> 16:09.370
就是一个密药队

16:09.370 --> 16:11.370
他又产生一队对吧

16:11.370 --> 16:14.370
我把key3给你

16:14.370 --> 16:16.370
登革说我们通信吧

16:16.370 --> 16:17.370
诚哥没管

16:17.370 --> 16:18.370
摩尼卡给他一个公药key1

16:18.370 --> 16:19.370
但是呢

16:19.370 --> 16:21.370
诚哥呢把公药key1没给

16:21.370 --> 16:22.370
没给他

16:22.370 --> 16:23.370
给他的是公药key3

16:23.370 --> 16:24.370
登革不知道啊

16:24.370 --> 16:25.370
登革不知道他中间被串感了

16:25.370 --> 16:26.370
他认为

16:26.370 --> 16:28.370
这就是摩尼卡给我的

16:28.370 --> 16:30.370
那么他就把这个东西保存下来了

16:30.370 --> 16:31.370
后续不得了

16:31.370 --> 16:32.370
你看一下

16:32.370 --> 16:34.370
后续登革他就会用这个公药

16:34.370 --> 16:36.370
把这个key2进行加密

16:36.370 --> 16:37.370
对吧

16:37.370 --> 16:38.370
他实际上是用的是key3加密的

16:38.370 --> 16:39.370
他不知道

16:39.370 --> 16:41.370
他不知道这个东西是别人串感过的

16:41.370 --> 16:43.370
那么诚哥一来

16:43.370 --> 16:44.370
他是不是可以解了

16:44.370 --> 16:46.370
他自己是不是有给食药key3

16:46.370 --> 16:47.370
对吧

16:47.370 --> 16:48.370
他把解开

16:48.370 --> 16:49.370
是不是拿到这个信息了

16:49.370 --> 16:50.370
拿到个key2了

16:50.370 --> 16:51.370
key2保存下来

16:51.370 --> 16:52.370
然后呢

16:52.370 --> 16:54.370
把这个key2再用

16:54.370 --> 16:56.370
刚才那个得到了公药key1加密

16:56.370 --> 16:57.370
给摩尼卡

16:57.370 --> 16:58.370
摩尼卡也不知道

16:58.370 --> 17:00.370
根本就不知道中间发生了什么事

17:00.370 --> 17:02.370
他悄悄的就把这些事情做了

17:02.370 --> 17:03.370
摩尼卡一看

17:03.370 --> 17:04.370
好key2保存下来

17:04.370 --> 17:06.370
那后边通信呗

17:06.370 --> 17:07.370
你说这个通信有多危险

17:07.370 --> 17:09.370
那么我用key2加密

17:09.370 --> 17:10.370
我爱你

17:10.370 --> 17:11.370
诚哥一看

17:11.370 --> 17:12.370
这个简单

17:12.370 --> 17:13.370
key2我反正这里也有

17:13.370 --> 17:14.370
对不对

17:14.370 --> 17:15.370
我之前已经保存下来也有

17:15.370 --> 17:17.370
那么我用key2一解开

17:17.370 --> 17:18.370
是不是拿到内容了

17:18.370 --> 17:19.370
可以看到原是内容

17:19.370 --> 17:21.370
然后再用key2一加密

17:21.370 --> 17:22.370
重新传输

17:22.370 --> 17:23.370
是不是篡改了

17:23.370 --> 17:24.370
既可以拿到内容

17:24.370 --> 17:25.370
又可以篡改

17:25.370 --> 17:27.370
还是没解决这个问题

17:27.370 --> 17:28.370
对吧

17:28.370 --> 17:29.370
还是没解决

17:29.370 --> 17:30.370
那么今天到底怎么解决

17:30.370 --> 17:32.370
这个问题好像就先无理动了

17:32.370 --> 17:34.370
你后边你说再加密

17:34.370 --> 17:35.370
再加密都没用了

17:35.370 --> 17:36.370
他只要能够篡改

17:36.370 --> 17:37.370
第一次他就没办法了

17:37.370 --> 17:38.370
那怎么办了

17:38.370 --> 17:39.370
这个时候呢

17:39.370 --> 17:41.370
我们要引入一个

17:42.370 --> 17:43.370
第三方机构了

17:43.370 --> 17:45.370
要第三方来采用了

17:45.370 --> 17:47.370
比方说我就来了

17:47.370 --> 17:49.370
我说我是一个权威机构

17:49.370 --> 17:50.370
那么后边呢

17:50.370 --> 17:51.370
跟着我的步骤来

17:51.370 --> 17:53.370
就绝对不会出问题

17:53.370 --> 17:55.370
那么后边我们这里

17:55.370 --> 17:57.370
引入一个东西叫ce

17:57.370 --> 17:58.370
这个概念叫做

17:58.370 --> 18:01.370
certificate

18:01.370 --> 18:02.370
叫什么意思呢

18:02.370 --> 18:04.370
证书办法机构

18:04.370 --> 18:05.370
是一个第三方机构

18:05.370 --> 18:06.370
每个国家都有

18:06.370 --> 18:07.370
咱们中国也有

18:07.370 --> 18:09.370
加拿大美国都有

18:09.370 --> 18:11.370
这种证书办法机构

18:11.370 --> 18:12.370
那么这些机构

18:12.370 --> 18:13.370
是权威机构

18:13.370 --> 18:15.370
你安装瀏覽器的时候

18:15.370 --> 18:17.370
包括你安装操作系统的时候

18:17.370 --> 18:19.370
操作系统对世界上

18:19.370 --> 18:20.370
已知的那些

18:20.370 --> 18:22.370
证书办法机构都会记录下来

18:22.370 --> 18:23.370
它会记录

18:23.370 --> 18:24.370
这个世界上哪些机构

18:24.370 --> 18:26.370
是我们权威的

18:26.370 --> 18:28.370
证书办法机构都会记录下来

18:28.370 --> 18:29.370
那么证书办法机构

18:29.370 --> 18:30.370
它是怎么回事呢

18:30.370 --> 18:31.370
看一下

18:31.370 --> 18:32.370
证书的办法流程

18:32.370 --> 18:33.370
它就是主要用来

18:33.370 --> 18:34.370
办法证书的

18:34.370 --> 18:36.370
就是我们

18:37.370 --> 18:39.370
邓格在跟摩利卡

18:39.370 --> 18:41.370
表白之前

18:41.370 --> 18:42.370
摩利卡首先

18:42.370 --> 18:43.370
就要去做一件事

18:43.370 --> 18:44.370
这件事最开始

18:44.370 --> 18:45.370
就是服务器最开始

18:45.370 --> 18:46.370
就要做一件事

18:46.370 --> 18:48.370
任何请求到来之前

18:48.370 --> 18:50.370
后续的请求

18:50.370 --> 18:51.370
就做这件事只做一次

18:51.370 --> 18:52.370
就是申请一个证书

18:52.370 --> 18:54.370
怎么申请

18:54.370 --> 18:56.370
它把我的服务器地址

18:56.370 --> 18:57.370
比方说摩利卡的服务器地址

18:57.370 --> 18:59.370
是3w.molika.com

18:59.370 --> 19:00.370
然后服务器

19:00.370 --> 19:02.370
它不是要生成一个公药

19:02.370 --> 19:03.370
一个V1对码

19:03.370 --> 19:05.370
公药失药

19:05.370 --> 19:07.370
它把我的公药也给它

19:07.370 --> 19:09.370
然后再给它一些钱

19:09.370 --> 19:10.370
要收钱的

19:10.370 --> 19:12.370
有些机构提出一些

19:12.370 --> 19:15.370
免费的就是证书

19:15.370 --> 19:16.370
但是免费的证书的话

19:16.370 --> 19:17.370
一般只能用一年

19:17.370 --> 19:19.370
一年之后也不行了

19:21.370 --> 19:22.370
我看下期课吧

19:22.370 --> 19:23.370
下期课我再说吧

19:23.370 --> 19:24.370
具体怎么给它演示

19:24.370 --> 19:25.370
下期课再说

19:25.370 --> 19:26.370
就是服务器你首先要做件事

19:26.370 --> 19:27.370
只要你打服务器

19:27.370 --> 19:28.370
你要使用ATPS

19:28.370 --> 19:30.370
必须要做这件事

19:30.370 --> 19:32.370
把你的预名还不好搞定

19:32.370 --> 19:33.370
我下期课再说吧

19:34.370 --> 19:35.370
你要有一个预名

19:35.370 --> 19:36.370
你要有一个公药

19:36.370 --> 19:38.370
要生成一个公药

19:38.370 --> 19:39.370
就是密药队

19:39.370 --> 19:41.370
只需要把公药发过去

19:41.370 --> 19:43.370
给它一些钱

19:43.370 --> 19:45.370
这个权威机构

19:45.370 --> 19:47.370
它自己有一个密药队

19:47.370 --> 19:48.370
公药和失药

19:48.370 --> 19:49.370
这个失药

19:49.370 --> 19:51.370
它是绝对不可能发出去的

19:51.370 --> 19:52.370
全世界有很多人

19:52.370 --> 19:54.370
经常天天都在尝试

19:54.370 --> 19:55.370
只要能够攻破

19:55.370 --> 19:57.370
某一个权威机构的服务器

19:57.370 --> 19:59.370
能够拿到它的失药

19:59.370 --> 20:01.370
那这个事情就太爽了

20:01.370 --> 20:02.370
可以为所欲为了

20:02.370 --> 20:04.370
但是很难很难

20:04.370 --> 20:05.370
拿不到

20:05.370 --> 20:06.370
这个失药是绝对拿不到的

20:06.370 --> 20:07.370
你不要想了

20:07.370 --> 20:08.370
拿不到这个失药了

20:08.370 --> 20:09.370
公药无所谓

20:09.370 --> 20:11.370
公药它会发给全世界

20:11.370 --> 20:12.370
全世界都知道

20:12.370 --> 20:13.370
包括我们的瀏覽器

20:13.370 --> 20:14.370
它都知道它的公药市场

20:14.370 --> 20:16.370
但是失药它是绝对不可能发出去的

20:16.370 --> 20:19.370
那么它有自己的密药队

20:19.370 --> 20:21.370
然后它会给它一个什么呢

20:21.370 --> 20:22.370
给它一个证书

20:22.370 --> 20:23.370
整个就是流程

20:23.370 --> 20:24.370
我给了一些东西

20:24.370 --> 20:25.370
服务器的地址的公药

20:25.370 --> 20:27.370
我自己的服务器的公药

20:27.370 --> 20:28.370
然后我给了一些钱

20:28.370 --> 20:30.370
你给我发一个证书

20:30.370 --> 20:31.370
这个证书是什么呢

20:31.370 --> 20:33.370
这不是现实世界里面的证书

20:33.370 --> 20:34.370
它是个电子证书

20:34.370 --> 20:36.370
这个证书是一个什么呢

20:36.370 --> 20:38.370
这个证书里面还包含这么一些东西

20:38.370 --> 20:41.370
证书的英文说起来叫DC

20:41.370 --> 20:45.370
那么这个证书里面包含了这么一些东西

20:45.370 --> 20:47.370
一个是每个服务器的证书都不一样的

20:47.370 --> 20:49.370
不是完全一样的

20:49.370 --> 20:51.370
它会包含这个服务器的地址

20:51.370 --> 20:53.370
王子是什么

20:53.370 --> 20:55.370
这个东西存出的是明文

20:55.370 --> 20:56.370
明文存出的

20:56.370 --> 20:59.370
这个地方会保存一个证书

20:59.370 --> 21:00.370
我这个证书是谁发的

21:00.370 --> 21:03.370
哪个国家的哪个机构发的证书

21:03.370 --> 21:07.370
那么然后有两个加密过后的信息

21:07.370 --> 21:09.370
这是谁加密的呢

21:09.370 --> 21:13.370
是通过这个私药加密的

21:13.370 --> 21:15.370
我们之前都用公药加密的私药解密

21:15.370 --> 21:18.370
那么现在他用的是私药加密公药解密

21:18.370 --> 21:21.370
你看他用私药给你加密的这个两个信息

21:21.370 --> 21:22.370
一个是公药key

21:22.370 --> 21:25.370
于是把这个信息给你加密了

21:25.370 --> 21:27.370
用他的私药加密了

21:27.370 --> 21:28.370
为什么要这样做

21:29.370 --> 21:31.370
先理解他是怎么做的

21:31.370 --> 21:32.370
然后用私药加密了

21:32.370 --> 21:33.370
还加密了一个证书签名

21:33.370 --> 21:34.370
证书签名是什么东西

21:34.370 --> 21:35.370
也别管别管

21:35.370 --> 21:37.370
我们以后会说

21:37.370 --> 21:40.370
他为什么要用私药加密呢

21:40.370 --> 21:42.370
由于证书中的服务器公药

21:42.370 --> 21:44.370
这是服务器的公药和证书签名

21:44.370 --> 21:47.370
都是通过CA的私药加密的

21:47.370 --> 21:49.370
它就会形成一个现象

21:49.370 --> 21:51.370
其他的任何机构

21:51.370 --> 21:52.370
任何中端

21:52.370 --> 21:53.370
任何服务器

21:53.370 --> 21:55.370
他只能读取

21:55.370 --> 21:57.370
他能不能读这个

21:57.370 --> 21:59.370
因为他的公药是公开的

21:59.370 --> 22:00.370
他用私药加密了

22:00.370 --> 22:01.370
公药解密

22:01.370 --> 22:02.370
一个加密一个也解密

22:02.370 --> 22:03.370
公药可以解密

22:03.370 --> 22:05.370
任何人都可以解密这个

22:05.370 --> 22:06.370
但是不好意思

22:06.370 --> 22:08.370
你解密完了

22:08.370 --> 22:10.370
你不能改

22:10.370 --> 22:11.370
这个麻烦了

22:11.370 --> 22:13.370
你解密是可以解密

22:13.370 --> 22:15.370
但是你改不了

22:15.370 --> 22:16.370
为什么改不了呢

22:16.370 --> 22:18.370
比方说你把公药key一改

22:18.370 --> 22:19.370
你要重新加密

22:19.370 --> 22:21.370
因为他证书的格式就是这样子

22:21.370 --> 22:23.370
你必须要用某一个东西加密的

22:23.370 --> 22:24.370
你加密怎么加密

22:24.370 --> 22:26.370
你达不到他的私药你是不是加密不了

22:26.370 --> 22:27.370
对不对

22:27.370 --> 22:28.370
达不到他的私药

22:28.370 --> 22:29.370
就算你用自己的私药加密了

22:29.370 --> 22:31.370
那别人解不开

22:31.370 --> 22:33.370
别人会用那个证书服务器的公药来解

22:33.370 --> 22:34.370
对吧

22:34.370 --> 22:35.370
这个东西是别人要用

22:35.370 --> 22:37.370
证书服务器的公药来解

22:37.370 --> 22:38.370
别人就解不开

22:38.370 --> 22:39.370
对不对

22:39.370 --> 22:40.370
解不开就别人就这么错误了

22:40.370 --> 22:41.370
对吧

22:41.370 --> 22:42.370
他不认你这个

22:42.370 --> 22:43.370
说明你这个信息被穿改过了

22:43.370 --> 22:44.370
他就不认

22:44.370 --> 22:45.370
因此你只能看

22:45.370 --> 22:46.370
你不能改

22:46.370 --> 22:48.370
他就只其中一个作用

22:48.370 --> 22:50.370
其他中端只能通过公药来解密

22:50.370 --> 22:51.370
但是呢

22:51.370 --> 22:52.370
无法重新加密轨道

22:52.370 --> 22:53.370
因为这下加不了

22:53.370 --> 22:54.370
这是私药加密的

22:54.370 --> 22:56.370
它是其中一个作用

22:56.370 --> 22:57.370
好

22:57.370 --> 22:58.370
然后呢

22:58.370 --> 22:59.370
我们再往下看

22:59.370 --> 23:01.370
这个公药这个key

23:01.370 --> 23:02.370
我们知道是什么对吧

23:02.370 --> 23:04.370
那么证书签名是什么呢

23:04.370 --> 23:05.370
证书签名呢

23:05.370 --> 23:07.370
每个机构呢

23:07.370 --> 23:09.370
它会有些不太一样啊

23:09.370 --> 23:10.370
但是呢

23:10.370 --> 23:11.370
绝大部分的它是这样子的

23:11.370 --> 23:14.370
它会把那个你的服务器地址

23:14.370 --> 23:15.370
合理的就是

23:15.370 --> 23:16.370
公药的

23:16.370 --> 23:18.370
就是它的公药key

23:18.370 --> 23:19.370
ca的公药

23:19.370 --> 23:20.370
就这个

23:20.370 --> 23:21.370
就这个玩意

23:21.370 --> 23:22.370
公药key

23:22.370 --> 23:23.370
以及呢

23:23.370 --> 23:25.370
它的怎么

23:25.370 --> 23:26.370
公药的

23:26.370 --> 23:28.370
就是你自己的服务器的公药

23:28.370 --> 23:30.370
把它一起来加密

23:30.370 --> 23:31.370
一起来生成

23:31.370 --> 23:32.370
不是加密啊

23:32.370 --> 23:33.370
不是加密

23:33.370 --> 23:34.370
通过某一种算法

23:34.370 --> 23:36.370
来生成一个证书签名

23:36.370 --> 23:37.370
也就是说这个

23:37.370 --> 23:38.370
这个目的是啥呢

23:38.370 --> 23:39.370
目的就是

23:39.370 --> 23:41.370
因为这些东西都是公开的对吧

23:41.370 --> 23:42.370
ca的公药

23:42.370 --> 23:43.370
公开的这个服务器

23:43.370 --> 23:44.370
我们自己服务器的公药

23:44.370 --> 23:45.370
莫蒂卡的服务器的公药

23:45.370 --> 23:46.370
公开的

23:46.370 --> 23:47.370
公药都是公开的

23:47.370 --> 23:48.370
莫蒂卡服务器的地址

23:48.370 --> 23:49.370
是不是都是公开的

23:49.370 --> 23:50.370
好

23:50.370 --> 23:51.370
而且它的算法

23:51.370 --> 23:52.370
证书签名

23:52.370 --> 23:53.370
证书签名

23:53.370 --> 23:54.370
是不是也是公开的

23:54.370 --> 23:55.370
那么就是什么意义呢

23:55.370 --> 23:56.370
它可以

23:56.370 --> 23:57.370
做到这么一件事

23:57.370 --> 24:00.370
你只要拿到一个证书签名

24:00.370 --> 24:02.370
只要拿到一个证书签名

24:02.370 --> 24:05.370
你就可以根据这三个东西

24:05.370 --> 24:08.370
重新计算一个证书签名

24:08.370 --> 24:09.370
看一下你重新计算的

24:09.370 --> 24:10.370
出来东西

24:10.370 --> 24:11.370
一不一样

24:11.370 --> 24:13.370
如果说重新算出来过

24:13.370 --> 24:15.370
和跟你拿到的证书签名不一样

24:15.370 --> 24:16.370
说明这个证书签名

24:16.370 --> 24:18.370
被创改过了

24:18.370 --> 24:19.370
对不对

24:19.370 --> 24:20.370
是被创改过了

24:20.370 --> 24:22.370
要么就是其他信息被创改过了

24:22.370 --> 24:23.370
总之有东西被创改了

24:23.370 --> 24:24.370
那肯定是不对的

24:24.370 --> 24:26.370
因为它的算法是公开的

24:26.370 --> 24:27.370
这些东西又全是公开的

24:27.370 --> 24:28.370
对吧

24:28.370 --> 24:29.370
全是公开的

24:29.370 --> 24:30.370
那么既然全是公开的

24:30.370 --> 24:31.370
算法也是公开的

24:31.370 --> 24:32.370
那肯定是能够算出

24:32.370 --> 24:33.370
唯一的证书签名

24:33.370 --> 24:34.370
结果呢

24:34.370 --> 24:36.370
算出来肯定你拿到了不一样

24:36.370 --> 24:37.370
那就肯定是

24:37.370 --> 24:38.370
某一个东西被创改了

24:38.370 --> 24:39.370
要么就它被创改了

24:39.370 --> 24:40.370
要么它不就创改了

24:40.370 --> 24:41.370
要么它不就创改了

24:41.370 --> 24:42.370
对不对

24:42.370 --> 24:43.370
是不是这个道理

24:43.370 --> 24:44.370
好

24:44.370 --> 24:46.370
那么这个证书签名的用处

24:46.370 --> 24:48.370
签名的主要是验证某一些信息

24:48.370 --> 24:50.370
有没有被创改

24:50.370 --> 24:51.370
好

24:51.370 --> 24:52.370
那么接下来我们来看一下

24:52.370 --> 24:53.370
有了证书过后

24:53.370 --> 24:55.370
就是莫莉卡申请了一个证书过后

24:55.370 --> 24:57.370
那么接下来的事情

24:57.370 --> 24:59.810
第一步

24:59.810 --> 25:00.810
我们这是浏览器

25:00.810 --> 25:01.810
邓哥要表白

25:01.810 --> 25:02.810
找服务器

25:02.810 --> 25:04.810
用现在用ATPS的

25:04.810 --> 25:06.810
这是最终的流程了

25:06.810 --> 25:07.810
找莫莉卡

25:07.810 --> 25:08.810
我们说我们要通信

25:08.810 --> 25:10.810
我们聊会儿天吧

25:10.810 --> 25:11.810
请求服务器

25:11.810 --> 25:12.810
服务器 别忙

25:12.810 --> 25:14.810
我先给你一个证书

25:14.810 --> 25:16.810
就是把它申请的证书

25:16.810 --> 25:17.810
就给力了

25:17.810 --> 25:18.810
它不用再重新申请了

25:18.810 --> 25:20.810
服务器只需要申请一次

25:20.810 --> 25:21.810
那么浏览器

25:21.810 --> 25:22.810
拿到这个证书过后

25:22.810 --> 25:23.810
它会自动处理

25:23.810 --> 25:24.810
做这么一个处理

25:24.810 --> 25:25.810
证书里边

25:25.810 --> 25:26.810
是不是有这么一些信息

25:26.810 --> 25:27.810
对不对

25:27.810 --> 25:28.810
那么这两个是加密的

25:28.810 --> 25:29.810
加密的

25:29.810 --> 25:30.810
是不是可以用那个证书

25:30.810 --> 25:31.810
办法机构

25:31.810 --> 25:32.810
因为它看到的

25:32.810 --> 25:33.810
是这个证书

25:33.810 --> 25:34.810
办法机构

25:34.810 --> 25:35.810
每个浏览器

25:35.810 --> 25:36.810
和操作系统里面

25:36.810 --> 25:37.810
它就存了

25:37.810 --> 25:38.810
很多的证书

25:38.810 --> 25:39.810
办法机构

25:39.810 --> 25:40.810
那么这些证书

25:40.810 --> 25:41.810
办法机构

25:41.810 --> 25:42.810
它的功耀都是固定的

25:42.810 --> 25:43.810
那么这个东西

25:43.810 --> 25:44.810
全网的一些查到

25:44.810 --> 25:45.810
所以说它就可以利用

25:45.810 --> 25:46.810
这个机构里边的

25:46.810 --> 25:47.810
颁发的功耀

25:48.810 --> 25:49.810
是不是可以

25:49.810 --> 25:50.810
把这个解密出来

25:50.810 --> 25:51.810
都可以拿到服务器的功耀

25:51.810 --> 25:53.810
和证书签名

25:53.810 --> 25:54.810
是不是可以拿到

25:54.810 --> 25:55.810
服务器的功耀

25:55.810 --> 25:56.810
T1和证书签名

25:56.810 --> 25:57.810
对吧

25:57.810 --> 25:58.810
那么接下来干嘛

25:58.810 --> 25:59.810
验证签名

25:59.810 --> 26:00.810
怎么验证

26:00.810 --> 26:01.810
你这个玩意

26:01.810 --> 26:02.810
加上我的

26:02.810 --> 26:03.810
CA的功耀

26:03.810 --> 26:05.810
加上这个服务器的功耀

26:05.810 --> 26:06.810
按照一种算法

26:06.810 --> 26:07.810
来验证一下

26:07.810 --> 26:08.810
这个签名这么正确

26:08.810 --> 26:09.810
一见证出来

26:09.810 --> 26:10.810
如何两个相等

26:10.810 --> 26:11.810
说明什么

26:11.810 --> 26:12.810
这个没被篡改

26:12.810 --> 26:13.810
说明什么

26:13.810 --> 26:15.810
CA的功耀

26:15.810 --> 26:16.810
CA的功耀

26:16.810 --> 26:17.810
我在电脑上

26:17.810 --> 26:18.810
没被篡改

26:18.810 --> 26:19.810
然后这个功耀

26:19.810 --> 26:20.810
没被篡改

26:20.810 --> 26:21.810
那么这里

26:21.810 --> 26:22.810
OK就可以进行

26:22.810 --> 26:24.810
后续的步骤了

26:24.810 --> 26:25.810
那么我们来看一下

26:25.810 --> 26:26.810
第一步

26:26.810 --> 26:27.810
能不能捣乱

26:27.810 --> 26:28.810
看一下第一步

26:28.810 --> 26:29.810
能不能捣乱

26:30.810 --> 26:31.810
捣不了乱的

26:31.810 --> 26:32.810
现在

26:32.810 --> 26:33.810
摩尼卡给他一个证书

26:33.810 --> 26:34.810
那么现在

26:34.810 --> 26:35.810
成格拿到这个证书

26:35.810 --> 26:36.810
他也可以拿到

26:36.810 --> 26:37.810
他是不是也可以

26:37.810 --> 26:38.810
解析出这个东西

26:38.810 --> 26:39.810
好 来篡改吧

26:39.810 --> 26:40.810
比方说他把这个东西

26:40.810 --> 26:41.810
篡改了

26:41.810 --> 26:43.810
过后重新拿一个证书

26:43.810 --> 26:44.810
这个东西很难篡改

26:44.810 --> 26:45.810
因为这个东西

26:45.810 --> 26:46.810
要加密的

26:46.810 --> 26:47.810
你没法篡改

26:47.810 --> 26:49.810
因为他要用CA的

26:49.810 --> 26:50.810
私药加密

26:50.810 --> 26:51.810
这个东西

26:51.810 --> 26:52.810
也要用CA的私药加密

26:52.810 --> 26:53.810
你篡改了过后

26:53.810 --> 26:55.810
那边就解不开了

26:55.810 --> 26:56.810
你不能篡改的

26:56.810 --> 26:57.810
你只能篡改

26:57.810 --> 26:58.810
这些东西

26:58.810 --> 26:59.810
那么这些东西是明文

26:59.810 --> 27:00.810
当然

27:00.810 --> 27:01.810
证书里边还有

27:01.810 --> 27:02.810
很多其他信息

27:02.810 --> 27:03.810
我们这里只是简化了

27:03.810 --> 27:04.810
他把这个东西篡改了

27:04.810 --> 27:05.810
篡改过后

27:05.810 --> 27:06.810
篡改过后

27:06.810 --> 27:07.810
发给成格

27:07.810 --> 27:08.810
成格拿到

27:08.810 --> 27:09.810
这个东西是地址变了

27:09.810 --> 27:10.810
变成成

27:10.810 --> 27:11.810
变成这个东西了

27:11.810 --> 27:12.810
对不对

27:12.810 --> 27:13.810
那么现在验证签名的时候

27:13.810 --> 27:14.810
就出问题了

27:14.810 --> 27:15.810
因为这个签名

27:15.810 --> 27:16.810
是不是根据

27:16.810 --> 27:17.810
根据原来的东西生成的

27:17.810 --> 27:18.810
对不对

27:18.810 --> 27:19.810
那么他现在用这个东西

27:19.810 --> 27:20.810
一验证

27:20.810 --> 27:21.810
一验证通不过

27:21.810 --> 27:22.810
因此

27:22.810 --> 27:23.810
登革流浪期

27:23.810 --> 27:24.810
可能就爆错了

27:24.810 --> 27:25.810
或者是给了一个

27:25.810 --> 27:26.810
严重警告

27:26.810 --> 27:27.810
危险的警告

27:27.810 --> 27:28.810
那你不要再访问了

27:28.810 --> 27:29.810
这个一验证通不过

27:29.810 --> 27:30.810
证书签名

27:30.810 --> 27:31.810
无法验证

27:31.810 --> 27:32.810
原来的意思吧

27:32.810 --> 27:33.810
那么现在呢

27:33.810 --> 27:34.810
这个就第一步

27:34.810 --> 27:35.810
第一步

27:35.810 --> 27:36.810
成格

27:36.810 --> 27:37.810
根本

27:37.810 --> 27:38.810
他可以看这个证书

27:38.810 --> 27:39.810
看一个证书

27:39.810 --> 27:40.810
但是他篡改不了

27:40.810 --> 27:41.810
篡改不了这种书

27:41.810 --> 27:42.810
对吧

27:42.810 --> 27:43.810
好

27:43.810 --> 27:44.810
然后我们看后续步骤

27:44.810 --> 27:45.810
那就跟之前一样了

27:45.810 --> 27:46.810
登革

27:46.810 --> 27:47.810
这里是不是拿到

27:47.810 --> 27:48.810
我们之前的一个步骤

27:48.810 --> 27:49.810
是不是拿到那个功耀了

27:49.810 --> 27:50.810
对吧

27:50.810 --> 27:51.810
那么他接下来用这个功耀

27:51.810 --> 27:52.810
这功耀是无法被篡改的

27:52.810 --> 27:53.810
一看到

27:53.810 --> 27:54.810
这功耀是没法篡改的

27:54.810 --> 27:55.810
我们刚才解释了

27:55.810 --> 27:56.810
篡改不了

27:56.810 --> 27:57.810
因此他就用那个功耀

27:57.810 --> 27:58.810
他又自己生成一个T2

27:58.810 --> 27:59.810
对吧

27:59.810 --> 28:00.810
然后用功耀T1

28:00.810 --> 28:01.810
加密T2

28:01.810 --> 28:02.810
是吧

28:02.810 --> 28:03.810
跟之前一样了

28:03.810 --> 28:04.810
给摩利卡

28:04.810 --> 28:05.810
摩利卡就把个T2

28:05.810 --> 28:06.810
用食药解密出来

28:06.810 --> 28:07.810
把T2解密出来

28:10.810 --> 28:11.810
然后摩利卡

28:11.810 --> 28:12.810
拿到一个T2过后

28:12.810 --> 28:13.810
他们两个都保存T2了

28:13.810 --> 28:14.810
他们就用T2

28:14.810 --> 28:15.810
来传输数据

28:15.810 --> 28:16.810
来加密传输数据

28:16.810 --> 28:17.810
对吧

28:17.810 --> 28:18.810
那么我们看后续

28:18.810 --> 28:19.810
是不是成格能捣乱

28:19.810 --> 28:20.810
也不行了

28:20.810 --> 28:22.810
因为这个成格

28:22.810 --> 28:23.810
拿不到T2

28:23.810 --> 28:24.810
你看

28:24.810 --> 28:25.810
怎么会拿不到

28:25.810 --> 28:26.810
登革

28:26.810 --> 28:28.810
登革现在用功耀T1加密了

28:28.810 --> 28:29.810
对吧

28:29.810 --> 28:30.810
加密到T2了

28:30.810 --> 28:31.810
用T1加密T2

28:31.810 --> 28:33.810
登革现在

28:33.810 --> 28:34.810
能解开吗

28:34.810 --> 28:35.810
解不开了

28:35.810 --> 28:36.810
现在他解不开了

28:36.810 --> 28:38.810
因为他之前怎么能解开

28:38.810 --> 28:39.810
因为以前给他的

28:39.810 --> 28:40.810
根本就不是功耀T1

28:40.810 --> 28:42.810
给他的是他篡改过后的

28:42.810 --> 28:43.810
但是现在篡改不了了

28:43.810 --> 28:45.810
他现在就解不开这个东西了

28:45.810 --> 28:46.810
为什么解不开呢

28:46.810 --> 28:47.810
因为他没有食药

28:47.810 --> 28:48.810
这个要用食药才能解开

28:48.810 --> 28:49.810
对吧

28:49.810 --> 28:50.810
他就拿不到这个T2了

28:50.810 --> 28:51.810
他解不开

28:51.810 --> 28:52.810
看上去是一群乱七八糟的东西

28:52.810 --> 28:53.810
解不开

28:53.810 --> 28:54.810
解不开

28:54.810 --> 28:55.810
他只能老老实实的

28:55.810 --> 28:56.810
没办法

28:56.810 --> 28:57.810
他只能发给摩利卡

28:57.810 --> 28:58.810
他有些人说

28:58.810 --> 29:00.810
他能不能步伐了

29:00.810 --> 29:01.810
能步伐可以

29:01.810 --> 29:02.810
他倒是可以做到步伐

29:02.810 --> 29:04.810
步伐给摩利卡

29:04.810 --> 29:06.810
那步伐的话

29:06.810 --> 29:07.810
你想的那个道理

29:07.810 --> 29:08.810
他步伐的话

29:08.810 --> 29:09.810
那么摩利卡那边

29:09.810 --> 29:10.810
收不到请求

29:10.810 --> 29:11.810
摩利卡就什么都不会干

29:11.810 --> 29:12.810
什么都不会干

29:12.810 --> 29:13.810
他的消息没有发出去

29:13.810 --> 29:14.810
没有发出去

29:14.810 --> 29:15.810
那么这边如果说

29:15.810 --> 29:16.810
理论案件的话

29:16.810 --> 29:17.810
他就一直在等

29:17.810 --> 29:18.810
等

29:18.810 --> 29:20.810
等不到这个结果

29:20.810 --> 29:21.810
原来的意思

29:21.810 --> 29:23.810
还等不到这个结果

29:23.810 --> 29:24.810
所以说那么

29:24.810 --> 29:25.810
至少他这边知道

29:25.810 --> 29:26.810
消息没有发出去

29:26.810 --> 29:27.810
对不对

29:27.810 --> 29:29.810
这个影响是很轻微的

29:29.810 --> 29:30.810
他不影响

29:30.810 --> 29:31.810
最严重的是什么

29:31.810 --> 29:32.810
你的信息被豁去到了

29:32.810 --> 29:33.810
第二

29:33.810 --> 29:34.810
你的信息被串干了

29:34.810 --> 29:35.810
一切都正常

29:35.810 --> 29:36.810
但是你的信息被串干

29:36.810 --> 29:38.810
一切都正常是最可怕的

29:38.810 --> 29:39.810
不正常就OK了

29:39.810 --> 29:40.810
不正常

29:40.810 --> 29:41.810
双方都知道不正常了

29:41.810 --> 29:44.810
那么就是没有什么问题的

29:44.810 --> 29:45.810
那么现在他的东西

29:45.810 --> 29:46.810
他keyer看不到

29:46.810 --> 29:48.810
对吧keyer是不是看不到

29:48.810 --> 29:49.810
而且

29:49.810 --> 29:51.810
他只能远方不弄的发过去

29:51.810 --> 29:52.810
一般来说

29:52.810 --> 29:53.810
他也没有办法了

29:53.810 --> 29:55.810
没有其他事情可以做了

29:55.810 --> 29:56.810
有人说

29:56.810 --> 29:57.810
那我诚哥能不能

29:57.810 --> 29:58.810
不发给他

29:58.810 --> 29:59.810
然后直接给他一个回应的

29:59.810 --> 30:01.810
直接给他一个回应的

30:01.810 --> 30:03.810
能不能直接给一个回应

30:03.810 --> 30:04.810
回应是要干嘛

30:04.810 --> 30:05.810
回应是要用keyer加密的

30:05.810 --> 30:06.810
他keyer拿不到

30:06.810 --> 30:07.810
给他回应他那边解不了

30:07.810 --> 30:08.810
解不了

30:08.810 --> 30:09.810
他那边只一定知道出了问题

30:09.810 --> 30:10.810
中间出了问题

30:10.810 --> 30:11.810
知道吧

30:11.810 --> 30:12.810
所以说呢

30:12.810 --> 30:13.810
我们很多的hacker

30:13.810 --> 30:14.810
是不希望别人发现的

30:14.810 --> 30:16.810
发现了这个意义了

30:16.810 --> 30:18.810
发现就没有任何意义了

30:18.810 --> 30:19.810
那么这里他无法串干

30:19.810 --> 30:20.810
也无法

30:20.810 --> 30:23.810
也无法那个就是解开

30:23.810 --> 30:24.810
那么后续的传说

30:24.810 --> 30:25.810
因为他拿不到keyer

30:25.810 --> 30:26.810
后续的传说

30:26.810 --> 30:27.810
跟他就没关系了

30:27.810 --> 30:28.810
他反正

30:28.810 --> 30:29.810
他看也看不懂

30:29.810 --> 30:30.810
串干也串干不了

30:30.810 --> 30:32.810
他拿不到keyer

30:32.810 --> 30:33.810
原来的意思

30:33.810 --> 30:35.810
这就是整个atcps的传说过程

30:35.810 --> 30:36.810
所以说

30:36.810 --> 30:37.810
第一步

30:37.810 --> 30:38.810
拿什么

30:38.810 --> 30:39.810
浏览器拿证书

30:39.810 --> 30:41.810
从附近拿证书

30:41.810 --> 30:42.810
然后第二步

30:42.810 --> 30:43.810
浏览器验证证书

30:43.810 --> 30:44.810
验证证书完了

30:44.810 --> 30:45.810
第三步

30:45.810 --> 30:46.810
浏览器生成

30:46.810 --> 30:47.810
对成加密

30:47.810 --> 30:49.810
就这个keyer

30:49.810 --> 30:50.810
生成对成加密

30:50.810 --> 30:51.810
第四步

30:51.810 --> 30:52.810
把对成加密

30:52.810 --> 30:54.810
用服务器的公药key

30:54.810 --> 30:55.810
加密传送服务器

30:55.810 --> 30:57.810
服务器哪边拿到keyer

30:57.810 --> 30:59.810
好后续的步骤就是

30:59.810 --> 31:02.810
用keyer再加密数据了

31:02.810 --> 31:04.810
这些东西都是浏览器自动完成的

31:04.810 --> 31:05.810
你都不用管

31:05.810 --> 31:06.810
都不用管

31:06.810 --> 31:08.810
我们可能要管的就是服务器怎么去拿证书

31:08.810 --> 31:10.810
怎么去申请证书

31:10.810 --> 31:12.810
主要是管这个

31:12.810 --> 31:14.310
好那么这里

31:14.310 --> 31:14.810
atcps协议

31:14.810 --> 31:15.810
和atcps协议

31:15.810 --> 31:16.810
我们对比一下

31:16.810 --> 31:17.810
atcps协议

31:17.810 --> 31:18.810
我们知道

31:18.810 --> 31:20.810
它是建立在tcpip协议之上的

31:20.810 --> 31:21.810
atcps协议

31:21.810 --> 31:22.810
它在tcpip

31:22.810 --> 31:23.810
在上面

31:23.810 --> 31:25.810
加了一个ssl

31:25.810 --> 31:26.810
ssl有什么意思

31:26.810 --> 31:27.810
就是加密传输协议

31:27.810 --> 31:28.810
加密传输协议

31:28.810 --> 31:30.810
就是我们刚才说的那种加密

31:30.810 --> 31:31.810
加密方式

31:31.810 --> 31:33.810
那么在这个资上在建立atcps

31:33.810 --> 31:35.810
atcps后面就是

31:35.810 --> 31:37.810
在这个协议之上就是

31:37.810 --> 31:39.810
除了要三次握手

31:39.810 --> 31:40.810
四次挥手对吧

31:40.810 --> 31:41.810
tcpip协议

31:41.810 --> 31:42.810
还要进行加密

31:42.810 --> 31:43.810
就加密的流程

31:43.810 --> 31:44.810
加密完了过后

31:44.810 --> 31:45.810
再次请求相应

31:45.810 --> 31:46.810
请求相应

31:46.810 --> 31:47.810
就是真的模式

31:47.810 --> 31:49.810
这就是atcps

31:49.810 --> 31:50.810
另外一点

31:50.810 --> 31:51.810
就是浏览

31:51.810 --> 31:52.810
如果说有浏览器的话

31:52.810 --> 31:54.810
因为tps也传输的话

31:54.810 --> 31:56.810
如果说浏览器拿到的协议的网页中

31:56.810 --> 31:57.810
如果说比方说一些图片

31:57.810 --> 31:59.810
一些css介石

31:59.810 --> 32:00.810
这东西

32:00.810 --> 32:01.810
看起希望

32:01.810 --> 32:04.810
这些资源也应该使用atcps来获取

32:04.810 --> 32:05.810
就是你的网页

32:05.810 --> 32:07.810
通过这个atcps来获取

32:07.810 --> 32:09.810
获取了网页里面的其他资源

32:09.810 --> 32:10.810
链接地址

32:10.810 --> 32:12.810
你还是应该使用atcps

32:12.810 --> 32:14.810
那么不然的话

32:14.810 --> 32:15.810
其实有些浏览器

32:15.810 --> 32:16.810
他就直接不认了

32:16.810 --> 32:17.810
有些浏览器

32:17.810 --> 32:18.810
他可以让Google浏览器

32:18.810 --> 32:19.810
他可以报一个警告

32:19.810 --> 32:20.810
让你不要这样做

32:20.810 --> 32:21.810
你既然都安全了

32:21.810 --> 32:23.810
所有资源都应该安全

32:23.810 --> 32:24.810
对吧

32:24.810 --> 32:25.810
有的时候

32:25.810 --> 32:26.810
你们上网的时候

32:26.810 --> 32:28.810
可以看到有一些网页

32:28.810 --> 32:29.810
你浏览者浏览者

32:29.810 --> 32:30.810
他就给你出现

32:30.810 --> 32:32.810
下面给你谈了一些广告

32:33.810 --> 32:34.810
对吧

32:34.810 --> 32:36.810
这些广告谈出来有三种原因

32:36.810 --> 32:37.810
第一种原因

32:37.810 --> 32:38.810
是这个浏览器

32:38.810 --> 32:40.810
本来就是自己的浏览器的广告

32:41.810 --> 32:42.810
第二种原因

32:42.810 --> 32:44.810
是你电脑中病毒了

32:44.810 --> 32:45.810
或者是你的浏览器

32:45.810 --> 32:46.810
被解

32:46.810 --> 32:47.810
你的浏览器里面有木马

32:47.810 --> 32:48.810
植入了木马

32:48.810 --> 32:50.810
或者是哪些发生的恶意程序

32:50.810 --> 32:51.810
那么浏览器

32:51.810 --> 32:52.810
自己给你玩坏了

32:52.810 --> 32:53.810
给你谈出广告

32:53.810 --> 32:54.810
那么这两种情况

32:54.810 --> 32:56.810
都是atps解决不了的

32:56.810 --> 32:58.810
还有第三种情况

32:58.810 --> 33:00.810
网页浏览器那边是正常的

33:00.810 --> 33:02.810
浏览器那边没有广告

33:02.810 --> 33:03.810
而且你的浏览器

33:03.810 --> 33:04.810
也是非常干净的

33:04.810 --> 33:05.810
系统里面没有病毒

33:05.810 --> 33:07.810
但是还是要广告出来

33:07.810 --> 33:08.810
为什么

33:08.810 --> 33:09.810
中间传输的过程中

33:09.810 --> 33:11.810
别人给你加入了一些脚本

33:12.810 --> 33:14.810
网页里面加入了一些脚本

33:14.810 --> 33:15.810
然后那里面

33:15.810 --> 33:16.810
到了你的浏览器

33:16.810 --> 33:17.810
就会运行这个脚本

33:17.810 --> 33:18.810
看到了一些广告了

33:19.810 --> 33:20.810
这种情况是比较多的

33:20.810 --> 33:22.810
可能自己不感觉

33:22.810 --> 33:23.810
有些网站的广告

33:23.810 --> 33:24.810
不是他自己愿意的

33:24.810 --> 33:26.810
那怎么办呢

33:26.810 --> 33:27.810
就要用atps

33:27.810 --> 33:28.810
防止中间

33:28.810 --> 33:29.810
中间传感

33:29.810 --> 33:31.810
防止中间传感

33:31.810 --> 33:33.810
这是关于这个

33:33.810 --> 33:34.810
那么最后我们看一下

33:34.810 --> 33:35.810
总结一下

33:35.810 --> 33:36.810
浮气要做的事情就是

33:36.810 --> 33:37.810
申请的证书

33:37.810 --> 33:39.810
客户端要做的事情就是

33:39.810 --> 33:40.810
客户端做的事情很简单

33:40.810 --> 33:41.810
就在浏览器访问的时候

33:41.810 --> 33:42.810
加上一个atps

33:42.810 --> 33:43.810
剩下的事情

33:43.810 --> 33:44.810
浏览器会自动

33:44.810 --> 33:46.810
生成那些乱七八糟的东西

33:46.810 --> 33:47.810
跟以前学的东西

33:47.810 --> 33:48.810
一点的影响都没有

33:49.810 --> 33:50.810
最后一说一个

33:50.810 --> 33:51.810
atps的默认端口

33:51.810 --> 33:52.810
就是你使用这个路径

33:52.810 --> 33:54.810
后面如果跟端口号的话

33:54.810 --> 33:55.810
不跟的话

33:55.810 --> 33:56.810
默认端口就是事实上

33:56.810 --> 33:58.810
所以说浮气那边监听的话

33:58.810 --> 33:59.810
如果说

33:59.810 --> 34:01.810
希望客户端那边访问的时候

34:01.810 --> 34:02.810
不要给个端口号

34:02.810 --> 34:03.810
那么浮气监听的话

34:03.810 --> 34:04.810
就可以监听事实上

34:04.810 --> 34:05.810
当然可以监听任何端口

34:05.810 --> 34:07.810
如果说监听其他端口的话

34:07.810 --> 34:08.810
这里要写端口号的

34:08.810 --> 34:09.810
OK

34:09.810 --> 34:11.810
这就是关于atps协议的

34:11.810 --> 34:12.810
整个的流程

34:12.810 --> 34:13.810
我把这个演示

34:13.810 --> 34:14.810
也放到这节课的

34:14.810 --> 34:16.810
就是分支里边去了

34:16.810 --> 34:18.810
大家可以获取到

34:18.810 --> 34:19.810
OK

34:19.810 --> 34:20.810
那么这是把这个原理讲清楚

34:20.810 --> 34:21.810
讲清楚原理过后

34:21.810 --> 34:22.810
我们后边

34:22.810 --> 34:23.810
然后再来自己操作一下

34:23.810 --> 34:24.810
操作其实很简单

34:24.810 --> 34:26.810
关键是怎么去申请申诉

34:26.810 --> 34:27.810
我在想一想

