WEBVTT

00:00.240 --> 00:04.240
这几颗呢 我们来看几个咱们Express里边

00:04.240 --> 00:07.240
它自带了一些中间键 还给你写好了

00:07.240 --> 00:10.240
我们直接需要 直接可以用就行了啊

00:10.240 --> 00:13.240
这中间键都特别好用 而且也是经常用的

00:13.240 --> 00:14.240
咱们来看一下吧

00:14.240 --> 00:15.240
首先Stick

00:15.240 --> 00:17.240
Express Static

00:17.240 --> 00:21.240
这个东西是什么呢 这个东西是来做那个静态服务器的

00:21.240 --> 00:23.240
有这么一个中间键 我们来用一下吧

00:23.240 --> 00:25.240
用一下就知道了啊

00:25.240 --> 00:30.240
咱们在这个Route里边、Init里边 这里呢 把关闭到右侧

00:31.240 --> 00:35.240
然后呢 我们在我们的工程里边呢 一般来说呢 我们会建立一个文念甲

00:35.240 --> 00:37.240
叫做Public文念甲

00:37.240 --> 00:40.240
这个文念甲里边呢 我们可能会放一些静态支援

00:40.240 --> 00:46.240
比方说我们这里呢 放一些什么 index ATM 一个页面

00:48.240 --> 00:51.240
就是静态页面

00:52.240 --> 00:54.240
静态页面

00:54.240 --> 00:57.240
这个页面中呢 可能会引用一些CSS

00:57.240 --> 01:01.240
咱们放这 引用一些CSS文件

01:01.240 --> 01:04.240
就是我们的页面上呢 有CSS

01:04.240 --> 01:09.240
这里呢 我们随便给body 搜索一个白光的黑色吧

01:09.240 --> 01:11.240
然后呢 Color

01:11.240 --> 01:12.240
白色

01:12.240 --> 01:15.240
都是在流烂期段运行的 对吧

01:15.240 --> 01:17.240
然后呢 GS

01:18.240 --> 01:20.240
我们来一个GS吧

01:20.240 --> 01:22.240
index.js

01:22.240 --> 01:24.240
我们就输出

01:24.240 --> 01:27.740
APC 随便输出一个

01:27.740 --> 01:31.740
好 页面上呢 我们去引用这个CSS

01:31.740 --> 01:35.740
引用这个CSS下面的index.ss

01:35.740 --> 01:37.740
然后下边呢 我们去引用

01:39.740 --> 01:40.740
src

01:40.740 --> 01:45.740
引用这个GS下面的index.js

01:45.740 --> 01:47.740
好了 我们就引用好了 对吧

01:47.740 --> 01:50.740
现在这个文件夹里边东西呢 都是静态支援

01:50.740 --> 01:53.740
我们希望呢 当我们去访问页面的时候呢

01:53.740 --> 01:55.740
能够访问到这些静态支援

01:55.740 --> 01:57.740
就是直接把这个文件内容给我们之前做过的 对吧

01:57.740 --> 02:00.740
我们不再反复的最初了

02:00.740 --> 02:03.740
我们把这个保留 前面这个就取消了

02:03.740 --> 02:05.740
之前我们不是自己写的一个中间键吗

02:05.740 --> 02:06.740
叫做Static Metalware 对吧

02:06.740 --> 02:09.740
其实我们不用自己写 这些的话就在这里写

02:09.740 --> 02:11.740
给它发送静态支援文件 根据它的形成路径

02:11.740 --> 02:14.740
这是我们之前写过的Bassana

02:14.740 --> 02:19.740
然后呢 我们在这里给它写上一个app.use

02:19.740 --> 02:21.740
然后直接使用这个中间键

02:21.740 --> 02:23.740
那么下面这个

02:23.740 --> 02:25.740
下面这个arrow把这个东西去掉

02:25.740 --> 02:27.740
我们使用use来表示中间键

02:27.740 --> 02:30.740
中间键我们用什么呢 就用这个express

02:30.740 --> 02:32.740
里边还提供了这个Static函数

02:32.740 --> 02:34.740
这个函数呢 它是一个高间函数

02:34.740 --> 02:36.740
这个函数它返回的是什么呢

02:36.740 --> 02:38.740
它返回的就是那个

02:38.740 --> 02:41.740
一个中间键 就是一个函数

02:41.740 --> 02:43.740
这个函数返回的一看 返回的是个什么

02:43.740 --> 02:45.740
handle handle是不是就是一个

02:45.740 --> 02:47.740
就这种写法的函数

02:47.740 --> 02:49.740
所以说呢 那么它这里就返回一个中间键

02:49.740 --> 02:51.740
那么这个Static里边有什么参数要传呢

02:51.740 --> 02:53.740
你得传一个参数

02:53.740 --> 02:55.740
就是告诉它我们静态支援的目录在哪

02:55.740 --> 02:57.740
你把目录告诉它

02:57.740 --> 03:00.740
咱们在这里就可以通过这个pass

03:00.740 --> 03:02.740
require

03:03.740 --> 03:05.740
然后我们静态支援的目录

03:05.740 --> 03:07.740
Static root

03:07.740 --> 03:08.740
静态支援的目录呢 我们在哪呢

03:08.740 --> 03:10.740
passresult

03:10.740 --> 03:12.740
把它转换成决论路径

03:12.740 --> 03:14.740
然后呢

03:14.740 --> 03:16.740
当前目录的

03:16.740 --> 03:18.740
当前目录要返回上级目录对吧

03:18.740 --> 03:20.740
因为我们当前在英列车里边

03:20.740 --> 03:22.740
返回上级目录导到public

03:22.740 --> 03:24.740
对吧 这是我们静态支援的目录

03:24.740 --> 03:26.740
我们把这个目录给它

03:26.740 --> 03:28.740
那么接下来它就会帮你完成静态支援的印射了

03:28.740 --> 03:30.740
咱们首先来看效果

03:30.740 --> 03:34.180
然后呢 我们这里运行

03:34.180 --> 03:36.180
MPM start

03:36.180 --> 03:38.180
运行出来

03:38.180 --> 03:40.180
运行出来过后呢 我们到一个浏览器里边去看一下

03:41.180 --> 03:43.180
Localhost

03:43.180 --> 03:45.180
5008

03:45.180 --> 03:47.180
你看 是不是静态页面出来了

03:47.180 --> 03:49.180
对吧 而且呢 样式也有了

03:49.180 --> 03:51.180
然后我们点击右键检查

03:51.180 --> 03:52.180
你看我们的GS

03:52.180 --> 03:54.180
GS ABC 是不是有了

03:54.180 --> 03:56.180
这个图片 这个图片没有

03:56.180 --> 03:57.180
这个图片 这个

03:57.180 --> 03:58.180
我们的浏览器图标对吧

03:58.180 --> 04:00.180
它这个找不到 ABC 是不是出来了

04:00.180 --> 04:02.180
对吧 那我们直接去访问那个index

04:02.180 --> 04:05.180
访问CSS Index CSS

04:05.180 --> 04:07.180
你看 CSS也可以访问到

04:07.180 --> 04:08.180
对吧 而且呢 消息头呢

04:08.180 --> 04:10.180
它都给你自动设置好了

04:10.180 --> 04:11.180
我们来看一下

04:11.180 --> 04:13.180
消息头 CSS

04:13.180 --> 04:14.180
你看

04:14.180 --> 04:16.180
这个 response headers

04:16.180 --> 04:18.180
这个 content type

04:18.180 --> 04:19.180
它是 takes a css

04:19.180 --> 04:21.180
对吧 那么这些东西都给你设置好了

04:21.180 --> 04:23.180
所以这就是那个

04:23.180 --> 04:26.180
做一个静态支援服务器就特别特别简单了

04:26.180 --> 04:28.180
那么它的原理是什么呢

04:28.180 --> 04:29.180
其实非常简单

04:29.180 --> 04:30.180
就跟我们这些上级课写的

04:30.180 --> 04:31.180
是一样的

04:31.180 --> 04:33.180
它的原理是什么 我解释一下

04:33.180 --> 04:35.180
下面这个代码呢 就是

04:35.180 --> 04:37.180
用多行注释吧

04:37.180 --> 04:39.180
下面

04:39.180 --> 04:41.180
这段代码的作用

04:41.180 --> 04:43.180
什么作用呢 就是

04:43.180 --> 04:45.180
当请求时

04:45.180 --> 04:47.180
当请求时

04:47.180 --> 04:50.180
会根据请求路径

04:50.180 --> 04:52.180
比方说你请求的路径是一个

04:52.180 --> 04:55.180
是一个index 是这个

04:55.180 --> 04:57.180
比方说CSS Index CSS

04:57.180 --> 04:59.180
那么当根据你请求的路径

04:59.180 --> 05:03.180
然后呢 从指定的

05:03.180 --> 05:06.180
目录中寻找

05:06.180 --> 05:09.180
是否存在该文件

05:09.180 --> 05:11.180
从指定的目录中里面去寻找

05:11.180 --> 05:12.180
是否存在该文件

05:12.180 --> 05:14.180
如果存在

05:14.180 --> 05:15.180
如果存在

05:15.180 --> 05:18.180
直接返回 直接想用

05:18.180 --> 05:20.180
文件内容

05:20.180 --> 05:22.180
而不再

05:22.180 --> 05:24.180
不再移交

05:24.180 --> 05:27.180
给后续的

05:27.180 --> 05:30.180
中间件 后续的处理函数

05:30.180 --> 05:31.180
其实中间件呢

05:31.180 --> 05:34.180
跟我们的普通的处理函数呢

05:34.180 --> 05:35.180
普通的处理函数也是一个

05:35.180 --> 05:36.180
特殊的中间件

05:36.180 --> 05:37.180
我们之前用的

05:37.180 --> 05:38.180
Gate 这些东西

05:38.180 --> 05:40.180
用的就是一个

05:40.180 --> 05:41.180
特殊的中间件

05:41.180 --> 05:43.180
它就是不移交给后边

05:43.180 --> 05:45.180
那么在中间件处理的时候呢

05:45.180 --> 05:46.180
它就是遇到一些情况

05:46.180 --> 05:47.180
像它这种遇到一些情况

05:47.180 --> 05:49.180
它就不再移交给后边的中间件了

05:49.180 --> 05:50.180
于是呢 如果说

05:50.180 --> 05:51.180
如果说你后边再写一个

05:51.180 --> 05:52.180
AppGate

05:52.180 --> 05:53.180
我们还是用这个

05:53.180 --> 05:54.180
一个斜槓

05:54.180 --> 05:55.180
比方说斜槓

05:55.180 --> 05:57.180
CSS Index CSS

05:57.180 --> 05:59.180
我们得到这个路径

05:59.180 --> 06:01.180
然后我给它去获取一个请求

06:01.180 --> 06:02.180
来处理

06:02.180 --> 06:04.180
看看能不能得到响应

06:04.180 --> 06:05.180
AppC

06:05.180 --> 06:06.180
我们再输出一下

06:06.180 --> 06:08.180
接下来我们再来刷新

06:08.180 --> 06:10.180
刷新这个镜头页面

06:10.180 --> 06:11.180
这边有没有输出AppC

06:11.180 --> 06:12.180
是不是没有

06:12.180 --> 06:13.180
说明说明这个地方

06:13.180 --> 06:14.180
是不是没有运行

06:14.180 --> 06:16.180
它不再移交给后续的中间件了

06:16.180 --> 06:17.180
没了意义吧

06:17.180 --> 06:19.180
那如果说不存在呢

06:19.180 --> 06:21.180
如果

06:21.180 --> 06:23.180
不存在文件

06:23.180 --> 06:27.180
则直接移交给

06:27.180 --> 06:29.180
就是调用Next的方法

06:29.180 --> 06:31.180
直接移交给

06:31.180 --> 06:34.180
陆续的中间件处理

06:34.180 --> 06:35.180
就这么个意思

06:35.180 --> 06:37.180
这是Static

06:37.180 --> 06:38.180
那么这个use

06:38.180 --> 06:39.180
我们之前知道

06:39.180 --> 06:40.180
还可以写第1个参数

06:40.180 --> 06:42.180
第1个参数指定

06:42.180 --> 06:44.180
基路径

06:44.180 --> 06:45.180
基处路径

06:45.180 --> 06:46.180
那么如果说

06:46.180 --> 06:47.180
给第1个参数是什么意思呢

06:47.180 --> 06:48.180
比方说

06:48.180 --> 06:50.180
我们这里给它第1个参数

06:50.180 --> 06:51.180
第1个参数

06:51.180 --> 06:52.180
我们给它的是

06:52.180 --> 06:54.180
比方说一个Static

06:54.180 --> 06:55.180
什么意思呢

06:55.180 --> 06:56.180
就是你请求的时候

06:56.180 --> 06:58.180
必须以Static开头

06:58.180 --> 07:00.180
它才会从目录里面去找

07:00.180 --> 07:02.180
好 那咱们来看一下吧

07:02.180 --> 07:04.180
我们这里就直接访问

07:04.180 --> 07:06.180
Static 以Static开头

07:06.180 --> 07:08.180
它才会交给这个中间件处理

07:08.180 --> 07:10.180
好 咱们一回车

07:10.180 --> 07:13.940
这个地方写错了

07:13.940 --> 07:14.940
Static

07:14.940 --> 07:15.940
保存

07:15.940 --> 07:17.940
接下来我们再刷新

07:17.940 --> 07:18.940
你看 现在我们访问

07:18.940 --> 07:19.940
静态页面是不是要

07:19.940 --> 07:20.940
以Static开头了

07:20.940 --> 07:21.940
对不对

07:21.940 --> 07:22.940
要以Static开头

07:22.940 --> 07:23.940
才能访问静态页面

07:23.940 --> 07:24.940
现在我们要访问

07:24.940 --> 07:25.940
CSS怎么访问

07:25.940 --> 07:26.940
CSS

07:26.940 --> 07:29.940
index的CSS

07:29.940 --> 07:30.940
原来的意思吧

07:30.940 --> 07:32.940
就要这样子访问才行

07:32.940 --> 07:34.940
好 这是这个地方

07:34.940 --> 07:35.940
那么这个地方

07:35.940 --> 07:37.940
它为什么会有这个Use

07:37.940 --> 07:38.940
它是这样子

07:38.940 --> 07:39.940
当你使用了Use的过后

07:39.940 --> 07:41.940
这个地方不是精确匹配的

07:41.940 --> 07:42.940
它是以这个开头

07:42.940 --> 07:43.940
那么以这个开头的话

07:43.940 --> 07:44.940
我给它看一下吧

07:44.940 --> 07:46.940
它里面是怎么来判断的

07:46.940 --> 07:48.940
来认设路径的

07:48.940 --> 07:49.940
这里Use

07:49.940 --> 07:52.940
我们自己来写一个Static

07:52.940 --> 07:54.940
RigRis

07:54.940 --> 07:57.940
我们这里输出RigBassUIO

07:57.940 --> 07:58.940
还记得吗

07:59.940 --> 08:00.940
Pass

08:00.940 --> 08:01.940
我们来看一下

08:01.940 --> 08:02.940
这两个

08:02.940 --> 08:04.940
它是一个什么样的效果

08:04.940 --> 08:06.940
咱们在这里

08:06.940 --> 08:08.940
运行好了

08:08.940 --> 08:10.940
现在我们在这边刷新

08:10.940 --> 08:12.940
好 然后看这边

08:12.940 --> 08:14.940
你看BassUIO里面得到了什么

08:14.940 --> 08:15.940
得到Static

08:15.940 --> 08:16.940
对吧 就是我们相当于

08:16.940 --> 08:17.940
Use里面的这个东西

08:17.940 --> 08:18.940
这个Bass

08:18.940 --> 08:19.940
就在中间线处理的时候

08:19.940 --> 08:21.940
它可以通过BassUIO

08:21.940 --> 08:23.940
跟我们之前学的Gate

08:23.940 --> 08:24.940
一些东西都不一样

08:24.940 --> 08:25.940
因为Use的话

08:25.940 --> 08:26.940
它有一个基路性

08:26.940 --> 08:27.940
那么这个地方是得到

08:27.940 --> 08:29.940
基路径 就是基础路径

08:29.940 --> 08:30.940
那么这个地方是

08:30.940 --> 08:32.940
去掉基路径之后

08:32.940 --> 08:33.940
后续的路径

08:33.940 --> 08:34.940
你看Rig.pass

08:34.940 --> 08:35.940
我们得到的结果是什么呢

08:35.940 --> 08:36.940
得到的结果是

08:36.940 --> 08:38.940
CSS Index.CSS

08:38.940 --> 08:39.940
那么你可以想象到

08:39.940 --> 08:40.940
这个中间线它是怎么处理的

08:40.940 --> 08:42.940
它是通过Pass来映射的

08:42.940 --> 08:43.940
根据这个请求路径

08:43.940 --> 08:44.940
它这个请求路径

08:44.940 --> 08:45.940
读的是什么呢

08:45.940 --> 08:47.940
读的是Rig.pass

08:47.940 --> 08:49.940
通过这个Pass来进行映射的

08:49.940 --> 08:51.940
来从目录中导到文件

08:51.940 --> 08:53.940
它跟基路径是没有任何关系的

08:53.940 --> 08:54.940
所以说你可以给它

08:54.940 --> 08:55.940
任何一个基础路径

08:55.940 --> 08:57.940
那么给了基础路径过后

08:57.940 --> 08:58.940
你到时候访问的时候

08:58.940 --> 09:00.940
你就把基础路径加上

09:00.940 --> 09:02.940
后续的访问路径是完全一样的

09:02.940 --> 09:04.940
这就是这么一个东西

09:04.940 --> 09:05.940
当然如果说你不满足

09:05.940 --> 09:06.940
基础路径的话

09:06.940 --> 09:08.940
比方说你现在再去访问

09:08.940 --> 09:09.940
CSS Index.CSS

09:09.940 --> 09:10.940
它就会输出ABC了

09:10.940 --> 09:12.940
如果说不满足基础路径

09:12.940 --> 09:14.940
那么它根本就进不了

09:14.940 --> 09:15.940
这个中间线

09:15.940 --> 09:16.940
用不了这个中间线

09:16.940 --> 09:18.940
它自然会给后续的去匹配了

09:18.940 --> 09:22.940
这是关于静态支援映射

09:22.940 --> 09:24.940
这是这一块

09:24.940 --> 09:26.940
我们把它倒回去

09:26.940 --> 09:31.830
把这个地方重新写下吧

09:31.830 --> 09:39.620
这个上面有

09:39.620 --> 09:41.620
这是静态支援

09:41.620 --> 09:42.620
就说到这了

09:42.620 --> 09:43.620
还有一个点

09:43.620 --> 09:44.620
就是静态支援的时候

09:44.620 --> 09:45.620
有一个很奇怪的现象

09:45.620 --> 09:47.620
就是咱们直接访问的是

09:47.620 --> 09:49.620
目录的时候

09:49.620 --> 09:50.620
咱们如果说

09:50.620 --> 09:51.620
我们的访问的路径

09:51.620 --> 09:53.620
是这样的路径

09:53.620 --> 09:54.620
就直接访问一个目录

09:54.620 --> 09:55.620
看没

09:55.620 --> 09:56.620
访问一个目录的时候

09:56.620 --> 09:57.620
那么这个时候

09:57.620 --> 09:58.620
它为什么会自动的

09:58.620 --> 10:01.620
把这个页面给我返回呢

10:01.620 --> 10:03.620
是因为这样子

10:03.620 --> 10:07.620
默认情况下

10:07.620 --> 10:10.620
如果映射的结果

10:10.620 --> 10:11.620
是一个目录

10:11.620 --> 10:12.620
就是它映射到

10:12.620 --> 10:13.620
这个public文件夹里边

10:13.620 --> 10:14.620
它映射出来是一个目录

10:14.620 --> 10:15.620
比方说根目录

10:15.620 --> 10:16.620
就是public这个目录

10:16.620 --> 10:17.620
对吧

10:17.620 --> 10:18.620
它是一个目录

10:18.620 --> 10:21.620
则会自动使用

10:21.620 --> 10:24.620
index的atm文件

10:24.620 --> 10:25.620
自动去找这个文件

10:25.620 --> 10:26.620
看这个文件存不存在

10:26.620 --> 10:27.620
跟我们之前的写

10:27.620 --> 10:29.620
自己写熟写的话

10:29.620 --> 10:30.620
是不是类似的道理

10:30.620 --> 10:31.620
对吧

10:31.620 --> 10:32.620
会自动去找这个文件

10:32.620 --> 10:33.620
适逢存在

10:33.620 --> 10:34.620
如果说存在的话

10:34.620 --> 10:35.620
那么它就会给力

10:35.620 --> 10:36.620
这个文件内容

10:36.620 --> 10:37.620
这个东西它是可以配置的

10:37.620 --> 10:38.620
通过第二个参数

10:38.620 --> 10:39.620
是可以配置的

10:39.620 --> 10:40.620
配置的时候

10:40.620 --> 10:41.620
你给它配置一下

10:41.620 --> 10:43.620
你看一下这边

10:43.620 --> 10:45.620
express static

10:45.620 --> 10:46.620
这个中间键

10:46.620 --> 10:47.620
它这里边有一个配置

10:47.620 --> 10:48.620
叫index

10:48.620 --> 10:49.620
那就是默认的

10:49.620 --> 10:50.620
默认的页面

10:50.620 --> 10:51.620
它默认的指

10:51.620 --> 10:52.620
那就是index

10:52.620 --> 10:53.620
那就是默认的文件

10:53.620 --> 10:54.620
当你可以配置

10:54.620 --> 10:55.620
为其他文件

10:55.620 --> 10:56.620
都可以

10:56.620 --> 10:57.620
这意思吧

10:57.620 --> 10:59.620
这是

10:59.620 --> 11:00.620
这个index

11:00.620 --> 11:01.620
如果说

11:01.620 --> 11:02.620
一个配置为default

11:02.620 --> 11:03.620
你看一下

11:03.620 --> 11:04.620
现在就不一样

11:04.620 --> 11:05.620
接下来我们再看

11:05.620 --> 11:06.620
刷新

11:06.620 --> 11:07.620
你看是不是找不到了

11:07.620 --> 11:08.620
对吧

11:08.620 --> 11:09.620
都找不到这个文件

11:09.620 --> 11:13.700
这是关于这一块

11:13.700 --> 11:14.700
去掉了

11:14.700 --> 11:15.700
这是这个中间键

11:15.700 --> 11:16.700
然后看下一个

11:16.700 --> 11:18.700
这个接受

11:18.700 --> 11:19.700
这个接受是什么样的

11:19.700 --> 11:20.700
中间键呢

11:20.700 --> 11:21.700
是这样

11:21.700 --> 11:22.700
咱们之前

11:22.700 --> 11:23.700
是不是遇到一个问题

11:23.700 --> 11:24.700
就是说

11:24.700 --> 11:25.700
如果说你是用pose

11:25.700 --> 11:27.700
你是接受一个pose的请求

11:27.700 --> 11:28.700
比方说

11:28.700 --> 11:29.700
后者请求

11:29.700 --> 11:30.700
接收的是什么

11:30.700 --> 11:32.700
diadstudent

11:32.700 --> 11:33.700
或者pose的

11:33.700 --> 11:34.700
就是student

11:34.700 --> 11:36.700
添加一个学生

11:36.700 --> 11:37.700
比方说

11:37.700 --> 11:38.700
用race的风格

11:38.700 --> 11:39.700
你API开头

11:39.700 --> 11:40.700
后面呢

11:40.700 --> 11:41.700
操作的资源

11:41.700 --> 11:42.700
是学生资源

11:42.700 --> 11:43.700
然后呢

11:43.700 --> 11:44.700
你要去添加一个学生

11:44.700 --> 11:45.700
那你是不是应该

11:45.700 --> 11:46.700
把这个学生的信息

11:46.700 --> 11:47.700
告诉我

11:47.700 --> 11:48.700
对不对

11:48.700 --> 11:49.700
怎么告诉

11:49.700 --> 11:50.700
是不是通常是

11:50.700 --> 11:51.700
通过消息体

11:51.700 --> 11:52.700
就是请求体

11:52.700 --> 11:53.700
来告诉我

11:53.700 --> 11:54.700
那么这个请求体呢

11:54.700 --> 11:55.700
我们当时是不是

11:55.700 --> 11:56.700
获取不到

11:56.700 --> 11:57.700
你看啊

11:57.700 --> 11:58.700
Rick.body

11:58.700 --> 11:59.700
是不是获取不到

11:59.700 --> 12:01.700
我们找那个pose

12:02.700 --> 12:03.700
现在呢

12:03.700 --> 12:04.700
我们打开这个

12:04.700 --> 12:05.700
找到这个请求啊

12:05.700 --> 12:07.700
然后我们去请求这个API

12:07.700 --> 12:09.700
API student

12:10.700 --> 12:12.700
然后我们用pose请求

12:12.700 --> 12:13.700
pose请求

12:13.700 --> 12:14.700
这里呢

12:14.700 --> 12:15.700
body

12:15.700 --> 12:16.700
body呢有很多种方式啊

12:16.700 --> 12:17.700
pose请求有很多种方式

12:17.700 --> 12:18.700
地动方式呢

12:18.700 --> 12:19.700
就是可以使用这种

12:19.700 --> 12:20.700
叫做x

12:20.700 --> 12:22.700
wform的url encoded

12:22.700 --> 12:23.700
这种是怎么格式呢

12:23.700 --> 12:24.700
它是这样的格式

12:24.700 --> 12:25.700
我们随便写一个吧

12:25.700 --> 12:27.700
比方说学生的姓名

12:27.700 --> 12:28.700
12abc

12:28.700 --> 12:30.700
学生的年龄

12:30.700 --> 12:31.700
123

12:31.700 --> 12:32.700
好

12:32.700 --> 12:33.700
咱们来看一下

12:33.700 --> 12:34.700
send

12:34.700 --> 12:35.700
发动请求

12:35.700 --> 12:36.700
然后呢

12:36.700 --> 12:37.700
这边有code

12:37.700 --> 12:39.700
你看发送的结果

12:39.700 --> 12:42.700
的消息体是什么呢

12:44.700 --> 12:45.700
你看消息体

12:45.700 --> 12:46.700
它是用这种格式的

12:46.700 --> 12:47.700
name等于abc

12:47.700 --> 12:48.700
age等于123

12:48.700 --> 12:49.700
然后呢

12:49.700 --> 12:50.700
就有点类似url

12:50.700 --> 12:51.700
对吧

12:51.700 --> 12:52.700
你看那个名字

12:52.700 --> 12:53.700
它消息体的格式是

12:53.700 --> 12:56.700
3wformurl encoded

12:56.700 --> 12:57.700
是不是就相当于

12:58.700 --> 12:59.700
对吧

12:59.700 --> 13:00.700
相当于是这么一种格式

13:00.700 --> 13:01.700
你看它会给自动加

13:01.700 --> 13:02.700
一个content type

13:02.700 --> 13:03.700
请求的时候啊

13:03.700 --> 13:05.700
它会给你加一个消息头

13:05.700 --> 13:06.700
就是ablication

13:06.700 --> 13:08.700
x3wformurl encoded

13:08.700 --> 13:10.700
那么它会用url

13:10.700 --> 13:11.700
编码的这种方式

13:11.700 --> 13:12.700
给你传过来

13:12.700 --> 13:13.700
没了意思吧

13:13.700 --> 13:14.700
它会用这种方式传

13:14.700 --> 13:15.700
那么这种方式呢

13:15.700 --> 13:16.700
我们你看啊

13:16.700 --> 13:17.700
在消息体里边呢

13:17.700 --> 13:18.700
护士台这边

13:18.700 --> 13:20.700
你是不是得到的是undefan的

13:20.700 --> 13:21.700
对吧

13:21.700 --> 13:22.700
我们的body是undefan的

13:22.700 --> 13:23.700
那么这个时候呢

13:23.700 --> 13:24.700
因为body的东西啊

13:24.700 --> 13:25.700
消息体的东西

13:25.700 --> 13:26.700
我们是不是要

13:26.700 --> 13:27.700
用这种方式来读去

13:27.700 --> 13:28.700
对吧

13:28.700 --> 13:29.700
一多一段读

13:29.700 --> 13:30.700
你也不知道

13:30.700 --> 13:31.700
它给你传了多少

13:31.700 --> 13:32.700
你要一多一段读

13:32.700 --> 13:33.700
读啊

13:33.700 --> 13:34.700
能过后再再来进行解析

13:34.700 --> 13:35.700
我们之前都

13:35.700 --> 13:36.700
用过了对不对

13:36.700 --> 13:37.700
好

13:37.700 --> 13:38.700
那么这种做法呢

13:38.700 --> 13:39.700
其实对我们来处理

13:39.700 --> 13:40.700
请求的话就特别麻烦

13:40.700 --> 13:41.700
因为绝大部分时候呢

13:41.700 --> 13:42.700
它都

13:42.700 --> 13:44.700
不需要留来方式来读去

13:44.700 --> 13:45.700
啊

13:45.700 --> 13:46.700
因为除非你上传文件

13:46.700 --> 13:47.700
上传文件的话

13:47.700 --> 13:48.700
我们可以考虑

13:48.700 --> 13:49.700
啊

13:49.700 --> 13:50.700
否则大部分时候呢

13:50.700 --> 13:51.700
我们都不

13:51.700 --> 13:52.700
不希望

13:52.700 --> 13:53.700
不需要用它的那种

13:53.700 --> 13:54.700
就是用留的方式来读去

13:54.700 --> 13:55.700
啊

13:55.700 --> 13:56.700
就出来跟我解析出来

13:56.700 --> 13:57.700
就行了

13:57.700 --> 13:58.700
那么这个时候呢

13:58.700 --> 13:59.700
你就可以使用一些

13:59.700 --> 14:00.700
中间键啊

14:00.700 --> 14:01.700
比方说我刚才看到的

14:01.700 --> 14:02.700
use

14:02.700 --> 14:04.700
这个这个中间键叫

14:04.700 --> 14:06.700
express url encoded的

14:06.700 --> 14:07.700
这个中间键

14:07.700 --> 14:08.700
啊

14:08.700 --> 14:09.700
这个函数也是一样

14:09.700 --> 14:10.700
它反而回一个中间键

14:10.700 --> 14:11.700
啊

14:11.700 --> 14:12.700
url encoded

14:12.700 --> 14:13.700
看一下吧

14:13.700 --> 14:14.700
这个地方叫做

14:14.700 --> 14:15.700
url encoded

14:15.700 --> 14:16.700
这个中间键

14:16.700 --> 14:17.700
直接就用就行了

14:17.700 --> 14:18.700
啊

14:18.700 --> 14:19.700
它里边有些配置

14:19.700 --> 14:20.700
其中有就只需要

14:20.700 --> 14:21.700
配一个就行了

14:21.700 --> 14:22.700
我们平时用的时候

14:22.700 --> 14:23.700
只需要配一个

14:23.700 --> 14:24.700
叫做extended

14:24.700 --> 14:25.700
警告

14:25.700 --> 14:26.700
啊

14:26.700 --> 14:27.700
这什么东西呢

14:27.700 --> 14:28.700
它是这样子

14:28.700 --> 14:29.700
啊

14:29.700 --> 14:30.700
它过去了

14:30.700 --> 14:31.700
这个中间键呢

14:31.700 --> 14:32.700
它是使用的是这个裤

14:32.700 --> 14:33.700
来解析我们的消息体的

14:33.700 --> 14:34.700
叫做christin

14:35.700 --> 14:36.700
啊

14:36.700 --> 14:37.700
现在呢

14:37.700 --> 14:38.700
它更新了

14:38.700 --> 14:39.700
啊

14:39.700 --> 14:40.700
使用了一个新的裤

14:40.700 --> 14:41.700
那种裤呢

14:41.700 --> 14:42.700
解析出来的

14:42.700 --> 14:43.700
解析的知识的格式呢

14:43.700 --> 14:44.700
更多

14:44.700 --> 14:45.700
啊

14:45.700 --> 14:46.700
更好

14:46.700 --> 14:47.700
所以说呢

14:47.700 --> 14:48.700
你建议你使用新的裤

14:48.700 --> 14:49.700
啊 qs

14:49.700 --> 14:50.700
但是呢

14:50.700 --> 14:51.700
它又不敢自己

14:51.700 --> 14:52.700
自己给你改了

14:52.700 --> 14:53.700
万一之前的裤

14:53.700 --> 14:54.700
啊 extended

14:54.700 --> 14:55.700
因此呢

14:55.700 --> 14:56.700
你配置一下就行了

14:56.700 --> 14:57.700
啊

14:57.700 --> 14:58.700
配置一下

14:58.700 --> 14:59.700
配置 extended

14:59.700 --> 15:00.700
啊

15:00.700 --> 15:01.700
那么表示的是

15:01.700 --> 15:02.700
我使用新的

15:02.700 --> 15:03.700
那个qs

15:03.700 --> 15:04.700
那个裤

15:04.700 --> 15:05.700
来解析

15:05.700 --> 15:06.700
这个保底消息体

15:06.700 --> 15:08.700
那么它是用怎么解析呢

15:08.700 --> 15:09.700
它这里给你

15:09.700 --> 15:10.700
表述得很清楚了

15:10.700 --> 15:11.700
它这个中间键的作用是

15:11.700 --> 15:12.700
当你的

15:12.700 --> 15:13.700
请求

15:13.700 --> 15:14.700
就是消息

15:14.700 --> 15:15.700
请求的类型

15:15.700 --> 15:16.700
啊

15:16.700 --> 15:17.700
就是content type

15:17.700 --> 15:18.700
你看我们刚才

15:18.700 --> 15:21.700
content type

15:21.700 --> 15:22.700
content type

15:22.700 --> 15:23.700
这个东西的时候

15:23.700 --> 15:24.700
啊你看

15:24.700 --> 15:25.700
当你的请求的

15:25.700 --> 15:26.700
头

15:26.700 --> 15:27.700
是这个

15:27.700 --> 15:28.700
是这个东西的时候

15:28.700 --> 15:29.700
你看是application

15:29.700 --> 15:30.700
这个东西是可以配置的

15:30.700 --> 15:31.700
啊

15:31.700 --> 15:32.700
我们一般都不用去配置它

15:32.700 --> 15:33.700
它默认值就是这个

15:33.700 --> 15:34.700
通过的type

15:34.700 --> 15:35.700
来配置

15:35.700 --> 15:36.700
当它匹配到这样的

15:36.700 --> 15:37.700
请求类型的时候

15:37.700 --> 15:38.700
那么就说明

15:38.700 --> 15:39.700
这个请求的消息体

15:39.700 --> 15:40.700
它的格式是这种格式

15:40.700 --> 15:41.700
于是呢

15:41.700 --> 15:42.700
这个中间键

15:42.700 --> 15:43.700
会发挥作用

15:43.700 --> 15:44.700
那么它就会怎么样呢

15:44.700 --> 15:45.700
它就会按照我们

15:45.700 --> 15:46.700
以前的那种做法

15:46.700 --> 15:47.700
把这个留的数据啊

15:47.700 --> 15:48.700
给你读出来

15:48.700 --> 15:49.700
明白了意思吧

15:49.700 --> 15:50.700
把留的数据

15:50.700 --> 15:51.700
给你读出来

15:51.700 --> 15:53.700
放到这个保底里边

15:53.700 --> 15:54.700
啊

15:54.700 --> 15:55.700
好

15:55.700 --> 15:56.700
咱们看一下吧

15:56.700 --> 15:57.700
那么这样子的

15:57.700 --> 15:58.700
我们写了这个东西过后

15:58.700 --> 15:59.700
现在我们再来发动请求

15:59.700 --> 16:01.700
再来发动请求

16:01.700 --> 16:02.700
你看

16:02.700 --> 16:04.700
是不是得到一个对象了

16:04.700 --> 16:05.700
对不对

16:05.700 --> 16:06.700
Name

16:06.700 --> 16:07.700
A级

16:07.700 --> 16:08.700
说得到了

16:08.700 --> 16:09.700
对吧

16:09.700 --> 16:10.700
好

16:10.700 --> 16:11.700
那么这就是

16:11.700 --> 16:12.700
这个中间键的用法

16:12.700 --> 16:13.700
没问题吧

16:13.700 --> 16:14.700
好

16:14.700 --> 16:15.700
那么这个中间键

16:15.700 --> 16:16.700
其实很简单

16:16.700 --> 16:17.700
它并不复杂

16:17.700 --> 16:18.700
比方说你完全

16:18.700 --> 16:19.700
可以自己手写一个

16:19.700 --> 16:20.700
能不能手写

16:20.700 --> 16:21.700
讲这个

16:21.700 --> 16:22.700
讲吧

16:22.700 --> 16:23.700
反正无所谓路不可适

16:23.700 --> 16:24.700
这个地方呢

16:24.700 --> 16:25.700
其实也并不复杂

16:25.700 --> 16:26.700
它并不复杂

16:26.700 --> 16:27.700
比方说我们有一个

16:27.700 --> 16:29.700
My URL

16:29.700 --> 16:31.700
Incoded中间键

16:31.700 --> 16:32.700
我就不拿着去

16:32.700 --> 16:33.700
去写那些配置了

16:33.700 --> 16:34.700
直接来

16:34.700 --> 16:36.700
Marge your export

16:36.700 --> 16:37.700
到处

16:37.700 --> 16:39.700
RigRisNext

16:39.700 --> 16:40.700
你看我们可以

16:40.700 --> 16:41.700
如果说自己手写的话

16:41.700 --> 16:42.700
怎么来写

16:42.700 --> 16:43.700
特别特别简单

16:44.700 --> 16:45.700
好

16:45.700 --> 16:46.700
我们这里呢

16:46.700 --> 16:47.700
就首先判断

16:47.700 --> 16:48.700
首先判断

16:48.700 --> 16:49.700
Rig

16:49.700 --> 16:51.700
Rig

16:51.700 --> 16:52.700
的头

16:52.700 --> 16:53.700
Headers

16:53.700 --> 16:54.700
Headers

16:54.700 --> 16:55.700
它的头里边

16:55.700 --> 16:56.700
这么一个东西

16:56.700 --> 16:58.700
叫做content type

16:58.700 --> 16:59.700
对吧

16:59.700 --> 17:00.700
是不是有这么一个

17:00.700 --> 17:01.700
消息头

17:04.700 --> 17:05.700
content type

17:05.700 --> 17:06.700
看一下这个头

17:06.700 --> 17:07.700
我们把它读出来

17:07.700 --> 17:09.700
看它是不是等于

17:09.700 --> 17:10.700
等于什么呢

17:10.700 --> 17:11.700
等于这个

17:11.700 --> 17:13.700
Application X3W form

17:13.700 --> 17:14.700
的 URL in coded

17:14.700 --> 17:15.700
如果说等于这个

17:15.700 --> 17:16.700
那干嘛呢

17:16.700 --> 17:18.700
我们就自行

17:18.700 --> 17:19.700
解析

17:19.700 --> 17:21.700
消息体

17:22.700 --> 17:23.700
消息体

17:23.700 --> 17:25.700
自行解析消息体

17:25.700 --> 17:26.700
那么

17:26.700 --> 17:27.700
l是

17:27.700 --> 17:28.700
如果说不是这个头呢

17:28.700 --> 17:30.700
我就那个死了

17:30.700 --> 17:31.700
我就往后边走了

17:31.700 --> 17:32.700
我就不管了

17:32.700 --> 17:34.700
就这么简单

17:34.700 --> 17:35.700
咱们用自己的吧

17:35.700 --> 17:36.700
我们用自己的

17:36.700 --> 17:37.700
试一下

17:38.700 --> 17:39.700
require

17:40.700 --> 17:41.700
不管你是请求

17:41.700 --> 17:42.700
什么样的路径

17:42.700 --> 17:43.700
因为我没有写

17:43.700 --> 17:44.700
第一个差数

17:44.700 --> 17:45.700
不管你是

17:45.700 --> 17:46.700
请求什么样的路径

17:46.700 --> 17:47.700
我都要经过

17:47.700 --> 17:48.700
投笔的

17:48.700 --> 17:49.700
当然你看我写的顺序

17:49.700 --> 17:50.700
我写的顺序

17:50.700 --> 17:51.700
是写到它之后的

17:51.700 --> 17:52.700
因为静态页面

17:52.700 --> 17:53.700
需要解析什么消息体

17:53.700 --> 17:54.700
静态页面都是

17:54.700 --> 17:55.700
get请求

17:55.700 --> 17:56.700
对吧

17:56.700 --> 17:57.700
我不需要去解析

17:57.700 --> 17:58.700
任何消息体

17:58.700 --> 17:59.700
所以我们只针对

17:59.700 --> 18:00.700
这个地方

18:00.700 --> 18:01.700
还必须

18:01.700 --> 18:02.700
它只是get请求

18:02.700 --> 18:03.700
它只处理get请求

18:05.700 --> 18:06.700
然后这里

18:06.700 --> 18:07.700
这个地方

18:07.700 --> 18:08.700
还不是

18:08.700 --> 18:09.700
这个地方

18:09.700 --> 18:10.700
应该是可以处理

18:10.700 --> 18:11.700
任何请求的

18:11.700 --> 18:12.700
这个地方

18:12.700 --> 18:13.700
我们不管是

18:13.700 --> 18:14.700
什么请求方法

18:14.700 --> 18:15.700
但是

18:15.700 --> 18:16.700
任何路径

18:16.700 --> 18:17.700
这个从中间

18:17.700 --> 18:18.700
来进行处理

18:19.700 --> 18:20.700
到这边

18:22.700 --> 18:24.700
导入这个模块

18:24.700 --> 18:25.700
然后我们来试一下

18:25.700 --> 18:26.700
我们把这个

18:26.700 --> 18:27.700
单位打印出来

18:27.700 --> 18:32.100
看一下Rig Haters

18:32.100 --> 18:33.100
看一下

18:33.100 --> 18:34.100
能不能得到

18:34.100 --> 18:35.100
得到这个结果

18:35.100 --> 18:36.100
接下来我们再请求

18:37.100 --> 18:38.100
发动请求

18:38.100 --> 18:39.100
你看

18:39.100 --> 18:40.100
是不是得到这个东西了

18:40.100 --> 18:41.100
对吧

18:41.100 --> 18:42.100
得到它了

18:42.100 --> 18:43.100
得到它之后

18:44.100 --> 18:45.100
我们现在就进入

18:45.100 --> 18:46.100
这个判断了

18:46.100 --> 18:47.100
这个判断里面怎么做

18:47.100 --> 18:48.100
无非就是

18:48.100 --> 18:49.100
对吧

18:50.100 --> 18:51.100
是不是我们

18:51.100 --> 18:52.100
读取一个数据

18:52.100 --> 18:53.100
一块一块读

18:53.100 --> 18:54.100
对不对

18:54.100 --> 18:55.100
是不是一块一块读

18:55.100 --> 18:56.100
咱们来读

18:56.100 --> 18:57.100
这里是

19:00.100 --> 19:01.100
我们这里

19:01.100 --> 19:02.100
然后

19:02.100 --> 19:03.100
我们这里有一个

19:03.100 --> 19:04.100
有一个变量

19:04.100 --> 19:05.100
用一个变量

19:05.100 --> 19:07.100
net result

19:08.100 --> 19:09.100
一个空置不串

19:09.100 --> 19:10.100
每读一块

19:10.100 --> 19:11.100
我们就result

19:11.100 --> 19:12.100
拼戒一下

19:12.100 --> 19:13.100
拼戒一下

19:14.100 --> 19:15.100
tronk

19:15.100 --> 19:16.100
每读一块就拼戒一下

19:16.100 --> 19:18.100
这里我们用utf-8来读

19:18.100 --> 19:19.100
utf-8

19:20.100 --> 19:21.100
读这个tronk

19:21.100 --> 19:23.100
每读一块拼戒一下

19:23.100 --> 19:24.100
然后再注册一个词件

19:24.100 --> 19:25.100
on end

19:25.100 --> 19:26.100
读完了

19:27.100 --> 19:28.100
读完了过后

19:28.100 --> 19:29.100
我们这里

19:29.100 --> 19:30.100
输出这个result

19:31.100 --> 19:32.100
输出result

19:33.100 --> 19:34.100
好

19:34.100 --> 19:35.100
接下来我们再看

19:35.100 --> 19:38.700
发动请求

19:39.700 --> 19:40.700
它这里

19:40.700 --> 19:41.700
爆错了是吧

19:41.700 --> 19:42.700
它这里爆错了

19:42.700 --> 19:43.700
它说什么呢

19:43.700 --> 19:45.700
National arguments

19:45.700 --> 19:47.700
must be type of function

19:48.700 --> 19:50.700
它还不支持第二个参数

19:50.700 --> 19:51.700
那小呢

19:51.700 --> 19:53.700
我们这里就用之前的那种做法吧

19:53.700 --> 19:54.700
toestune

19:55.700 --> 19:56.700
utf-8

19:57.700 --> 19:58.700
好 再来

19:59.700 --> 20:00.700
发送

20:00.700 --> 20:01.700
你看这边

20:01.700 --> 20:03.700
result是不是读出来了

20:03.700 --> 20:04.700
对吧

20:04.700 --> 20:05.700
是result是不是这个东西

20:05.700 --> 20:06.700
就读出来了

20:06.700 --> 20:07.700
好 那么既然result读出来了

20:07.700 --> 20:08.700
读出来了过后

20:08.700 --> 20:10.700
我这里干嘛

20:10.700 --> 20:12.700
就无非就是用一个cool

20:12.700 --> 20:13.700
就是用一个第三方cool

20:13.700 --> 20:14.700
它用的是什么呢

20:14.700 --> 20:15.700
qs

20:15.700 --> 20:16.700
require

20:16.700 --> 20:17.700
query

20:17.700 --> 20:18.700
因为这是内置cool

20:18.700 --> 20:19.700
query是用哪个去安装第三方cool

20:19.700 --> 20:21.700
这是个第三方cool qs

20:21.700 --> 20:22.700
你可以去看一下

20:22.700 --> 20:23.700
用法的差不多

20:23.700 --> 20:24.700
好 那么这边呢

20:24.700 --> 20:25.700
我们就直接post

20:26.700 --> 20:27.700
post

20:27.700 --> 20:28.700
把它解析成一个对象

20:28.700 --> 20:30.700
把这个就是result

20:30.700 --> 20:32.700
解析成一个对象

20:33.700 --> 20:34.700
就是query

20:34.700 --> 20:35.700
对不对

20:35.700 --> 20:36.700
输出一下query

20:36.700 --> 20:37.700
好 再来

20:37.700 --> 20:39.700
我们这边再请求

20:39.700 --> 20:40.700
好 这边

20:40.700 --> 20:42.700
拿到这个OB几个车了

20:42.700 --> 20:43.700
对不对

20:43.700 --> 20:44.700
拿到这个东西了

20:44.700 --> 20:46.700
那么现在无非就是要把这个东西放到哪呢

20:46.700 --> 20:49.700
放到require对象里边的body里边

20:49.700 --> 20:50.700
对不对

20:50.700 --> 20:51.700
把他放进去

20:51.700 --> 20:53.700
把他放到这里边

20:53.700 --> 20:54.700
好 然后呢

20:54.700 --> 20:55.700
调用next

20:56.700 --> 20:57.700
原来的意思

20:57.700 --> 20:58.700
你看啊

20:58.700 --> 20:59.700
现在的做法

20:59.700 --> 21:00.700
现在呢

21:00.700 --> 21:01.700
就完成了

21:01.700 --> 21:02.700
我这个中间键就写完了

21:02.700 --> 21:03.700
特别特别简单

21:03.700 --> 21:04.700
你配置这个extended

21:04.700 --> 21:05.700
配置这个玩意的时候

21:05.700 --> 21:06.700
刚才配置

21:06.700 --> 21:07.700
配置这个extended

21:07.700 --> 21:08.700
它无非就是使用另一个cool

21:08.700 --> 21:10.700
就是一个第三方cool qs

21:10.700 --> 21:11.700
来进行解析

21:11.700 --> 21:12.700
其他都没什么区别

21:12.700 --> 21:13.700
好 然后再看

21:13.700 --> 21:14.700
我们现在呢

21:14.700 --> 21:16.700
再去send

21:16.700 --> 21:17.700
你看

21:17.700 --> 21:18.700
这里得到了

21:18.700 --> 21:19.700
得到了效果

21:19.700 --> 21:20.700
是不是这个效果

21:20.700 --> 21:21.700
对不对

21:21.700 --> 21:22.700
是不是这个东西

21:22.700 --> 21:23.700
那么这个东西

21:23.700 --> 21:24.700
是不是在这里打印出来的

21:24.700 --> 21:25.700
对吧

21:25.700 --> 21:26.700
没问题吧

21:26.700 --> 21:27.700
好 这里就是咱们

21:27.700 --> 21:28.700
这个中间键的写法

21:28.700 --> 21:29.700
特别简单

21:29.700 --> 21:30.700
并没有什么复杂的

21:30.700 --> 21:31.700
好

21:31.700 --> 21:33.700
我们还是用它的use

21:34.700 --> 21:36.700
express

21:36.700 --> 21:37.700
uncoded

21:37.700 --> 21:38.700
extended

21:38.700 --> 21:39.700
q

21:39.700 --> 21:41.700
好 这是这个中间键

21:41.700 --> 21:43.700
它是来解析这种格式的

21:43.700 --> 21:45.700
那么还有一个中间键呢

21:45.700 --> 21:47.700
还有一个中间键是这个接上

21:47.700 --> 21:48.700
这个中间键呢

21:48.700 --> 21:49.700
它是用来解析接上格式的

21:49.700 --> 21:50.700
就是我们去请求这种

21:50.700 --> 21:51.700
这种消息题

21:51.700 --> 21:53.700
比方说我们这里选择

21:53.700 --> 21:54.700
接上

21:54.700 --> 21:56.700
就是我们该传递的

21:56.700 --> 21:57.700
不是这种格式的消息题

21:57.700 --> 21:59.700
我们是给它传递的这种

21:59.700 --> 22:00.700
A等于1

22:00.700 --> 22:02.700
接上格式

22:02.700 --> 22:03.700
A等于1

22:03.700 --> 22:05.700
B等于2

22:05.700 --> 22:06.700
然后我们这样子传递

22:06.700 --> 22:07.700
send

22:07.700 --> 22:08.700
跑到消息

22:08.700 --> 22:09.700
然后我们看一下code

22:09.700 --> 22:10.700
看一下content tab

22:10.700 --> 22:11.700
是不是implication

22:11.700 --> 22:12.700
接上

22:12.700 --> 22:13.700
不是刚才那种格式的

22:13.700 --> 22:14.700
那么刚才的中间键

22:14.700 --> 22:15.700
是不是解析不了了

22:15.700 --> 22:16.700
解析不了了过后

22:16.700 --> 22:17.700
你看它解析不了的时候

22:17.700 --> 22:18.700
它是不是往后边传递

22:18.700 --> 22:19.700
对不对

22:19.700 --> 22:20.700
是往后边传递的

22:20.700 --> 22:21.700
那么

22:21.700 --> 22:22.700
我们就可以使用

22:22.700 --> 22:23.700
另外一个中间键

22:23.700 --> 22:24.700
来进行解析

22:24.700 --> 22:25.700
你看 现在这种模式

22:25.700 --> 22:27.700
它就是每一个中间键的

22:27.700 --> 22:29.700
它有自己的

22:29.700 --> 22:30.700
作用范围

22:30.700 --> 22:32.700
就搞定自己的设计

22:32.700 --> 22:33.700
搞不定就往后边传递

22:33.700 --> 22:34.700
接上

22:34.700 --> 22:35.700
通过它

22:35.700 --> 22:36.700
来解析

22:36.700 --> 22:38.700
接上格式的消息题

22:38.700 --> 22:39.700
那么这样子

22:39.700 --> 22:40.700
一处理过后

22:40.700 --> 22:41.700
你看

22:41.700 --> 22:42.700
这边

22:42.700 --> 22:43.700
send

22:43.700 --> 22:44.700
跑到消息

22:44.700 --> 22:45.700
是不是又可以解析出来了

22:45.700 --> 22:46.700
对吧

22:46.700 --> 22:47.700
有兴趣的朋友

22:47.700 --> 22:48.700
可以秩序手写一下

22:48.700 --> 22:49.700
这东西很简单

22:49.700 --> 22:50.700
鞋发的跟这个东西一样的

22:50.700 --> 22:51.700
你判断一下

22:51.700 --> 22:52.700
它的消息挺内向

22:52.700 --> 22:53.700
当然它有配置

22:53.700 --> 22:54.700
这中间键是有配置的

22:54.700 --> 22:55.700
就这个UI encoded

22:55.700 --> 22:56.700
它是有配置的

22:56.700 --> 22:57.700
那么要配置的话

22:57.700 --> 22:58.700
你可以把它装成一个

22:58.700 --> 22:59.700
高减函数

22:59.700 --> 23:00.700
比方说

23:00.700 --> 23:01.700
你用这种模式

23:01.700 --> 23:02.700
export

23:02.700 --> 23:07.700
Url encoded

23:08.700 --> 23:09.700
用这种模式

23:09.700 --> 23:10.700
Option

23:11.700 --> 23:12.700
默认值

23:12.700 --> 23:13.700
给个空对象

23:14.700 --> 23:15.700
来进行一下配置

23:15.700 --> 23:16.700
返回的是什么

23:16.700 --> 23:17.700
返回的

23:18.700 --> 23:19.700
return

23:19.700 --> 23:20.700
返回的是这个

23:20.700 --> 23:23.650
返回的是这个

23:23.650 --> 23:24.650
对吧

23:24.650 --> 23:25.650
根据一个配置

23:25.650 --> 23:26.650
比方说这个配置里面

23:26.650 --> 23:27.650
我们就可以写

23:27.650 --> 23:28.650
Option

23:28.650 --> 23:29.650
Type

23:29.650 --> 23:30.650
对不对

23:30.650 --> 23:31.650
那么这个配置

23:31.650 --> 23:32.650
你还可以

23:32.650 --> 23:33.650
给它一些默认值

23:33.650 --> 23:34.650
Type有值吗

23:34.650 --> 23:35.650
Type

23:35.650 --> 23:36.650
如果说Type

23:36.650 --> 23:37.650
没有值

23:37.650 --> 23:38.650
那么我们就取

23:38.650 --> 23:39.650
就取什么

23:39.650 --> 23:40.650
就取那个

23:40.650 --> 23:41.650
刚才那个

23:41.650 --> 23:42.650
这个东西

23:42.650 --> 23:43.650
Application

23:43.650 --> 23:44.650
Url encoded

23:44.650 --> 23:45.650
这些东西都很灵活的

23:45.650 --> 23:46.650
你可以自己去写

23:47.650 --> 23:48.650
原理是吧

23:48.650 --> 23:50.650
这是关于这个

23:50.650 --> 23:51.650
这三个冬天键

23:51.650 --> 23:52.650
我们平时用

23:52.650 --> 23:53.650
它内做冬天键

23:53.650 --> 23:54.650
用的最多的就是三个

23:54.650 --> 23:55.650
一般来说

23:55.650 --> 23:56.650
我们打一个服务器的话

23:56.650 --> 23:57.650
静态的这个东西肯定得有

23:57.650 --> 23:58.650
然后这两个

23:58.650 --> 23:59.650
要进行消息体的解析

23:59.650 --> 24:00.650
不然的话

24:00.650 --> 24:01.650
我们后续

24:01.650 --> 24:02.650
Pose寻求这些东西

24:02.650 --> 24:03.650
得不到消息体有点麻烦

24:03.650 --> 24:04.650
对吧

24:04.650 --> 24:05.650
另外我再说一下

24:05.650 --> 24:06.650
静态的目录

24:06.650 --> 24:07.650
目录里边放啥

24:07.650 --> 24:08.650
你们不知道

24:08.650 --> 24:09.650
之前有没有学过

24:09.650 --> 24:10.650
View和React

24:10.650 --> 24:11.650
还是之后学

24:11.650 --> 24:12.650
我不知道

24:12.650 --> 24:13.650
那么我这个话

24:13.650 --> 24:14.650
先说在这吧

24:14.650 --> 24:15.650
那么你心里边有个印象

24:15.650 --> 24:16.650
将来你们学了

24:16.650 --> 24:18.650
View和React之后

24:18.650 --> 24:19.650
你们React和View

24:19.650 --> 24:20.650
他们不是有一个

24:20.650 --> 24:21.650
编译吗

24:21.650 --> 24:22.650
一个构建

24:22.650 --> 24:24.650
他是不是把它编成一个

24:24.650 --> 24:25.650
静态资源

24:25.650 --> 24:26.650
对不对

24:26.650 --> 24:27.650
单眼应用程序

24:27.650 --> 24:28.650
所以把它变成一个静态资源

24:28.650 --> 24:29.650
那么打包成了一个

24:29.650 --> 24:30.650
静态资源

24:30.650 --> 24:31.650
什么CSS

24:31.650 --> 24:32.650
既也是

24:32.650 --> 24:33.650
还图片

24:33.650 --> 24:34.650
全部打包到一个DESSA目录

24:34.650 --> 24:35.650
对不对

24:35.650 --> 24:36.650
那么你把这个目录

24:36.650 --> 24:37.650
里边的东西

24:37.650 --> 24:38.650
放到这个目录下面

24:38.650 --> 24:40.650
就完事了

24:40.650 --> 24:42.650
要跟服务器怎么来搭配

24:42.650 --> 24:44.650
把放到这个目录里边去

24:44.650 --> 24:45.650
就可以了

24:45.650 --> 24:46.650
甚至呢

24:46.650 --> 24:47.650
我个

24:47.650 --> 24:48.650
甚至呢

24:48.650 --> 24:49.650
可以还可以这样子

24:49.650 --> 24:50.650
你可以直接在这里

24:50.650 --> 24:51.650
建一个文件夹

24:51.650 --> 24:52.650
叫做Client

24:52.650 --> 24:53.650
表示客户端的代码

24:53.650 --> 24:54.650
客户端的代码

24:54.650 --> 24:55.650
这里边就写什么呢

24:55.650 --> 24:56.650
这里边就写

24:56.650 --> 24:57.650
无诱代码

25:00.650 --> 25:01.650
这里面

25:01.650 --> 25:02.650
书写

25:02.650 --> 25:03.650
就是

25:03.650 --> 25:04.650
搭建

25:04.650 --> 25:06.650
无诱工程

25:06.650 --> 25:08.650
或者是Reit工程

25:08.650 --> 25:09.650
都行

25:09.650 --> 25:11.650
搭建好了过后

25:11.650 --> 25:12.650
可以进行配置

25:12.650 --> 25:13.650
配置

25:14.650 --> 25:16.650
配置

25:17.650 --> 25:18.650
就是

25:18.650 --> 25:19.650
Build的

25:20.650 --> 25:21.650
路径

25:22.650 --> 25:24.650
让Build的之后

25:24.650 --> 25:26.650
之后的代码

25:28.650 --> 25:29.650
放到

25:29.650 --> 25:31.650
把Build的之后的代码

25:32.650 --> 25:34.650
放到Public

25:34.650 --> 25:36.650
上个目录的Public中

25:36.650 --> 25:37.650
那么这个时候就自动完成了

25:37.650 --> 25:38.650
一构建

25:38.650 --> 25:39.650
那么就放到服务器里边去了

25:40.650 --> 25:41.650
或者是

25:42.650 --> 25:43.650
这是第一种方式

25:44.650 --> 25:45.650
或者

25:47.650 --> 25:48.650
或者

25:48.650 --> 25:50.650
改动服务器的

25:50.650 --> 25:52.650
就是静态支援目录

25:54.650 --> 25:55.650
改动到哪呢

25:55.650 --> 25:56.650
改动到

25:57.650 --> 25:59.650
Client下边的

25:59.650 --> 26:00.650
电神目录中

26:00.650 --> 26:01.650
因为Client电神目录里边

26:01.650 --> 26:02.650
就放的是

26:03.650 --> 26:05.650
够建之后的代码

26:05.650 --> 26:06.650
你学了Reit

26:06.650 --> 26:07.650
你就明白了

26:07.650 --> 26:08.650
你如果说没有学的话

26:08.650 --> 26:09.650
你肯定不知道我在说什么

26:09.650 --> 26:10.650
反正我给大家提个醒

26:11.650 --> 26:12.650
好

26:12.650 --> 26:13.650
那么这里就写完了

26:14.650 --> 26:15.650
这几个

26:15.650 --> 26:16.650
介绍了这么几个中间建

