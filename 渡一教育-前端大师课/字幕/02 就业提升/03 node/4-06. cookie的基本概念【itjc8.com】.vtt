WEBVTT

00:01.200 --> 00:03.200
深深的谈一口气

00:04.200 --> 00:07.700
刚刚录了50分钟的视频

00:07.700 --> 00:09.700
结果没有声音

00:09.700 --> 00:11.700
又在重录一遍

00:14.700 --> 00:17.700
来吧 重录一遍想得更好一些

00:18.700 --> 00:20.700
这一刻咱们开始学习Cookie

00:20.700 --> 00:23.700
Cookie我预计了会花三节课来学习

00:23.700 --> 00:26.700
这节课咱们学习Cookie的基本概念

00:26.700 --> 00:30.200
这个基本概念对这三节课来说是最重要的

00:30.200 --> 00:32.200
至关重要的

00:32.200 --> 00:34.200
学习到这节课的东西 后边什么都好说了

00:34.200 --> 00:36.200
后边两节课是比较简单的

00:36.200 --> 00:38.200
我们虽然说是学前端的

00:38.200 --> 00:41.200
但是对Cookie这一块也是要做深入的了解

00:41.200 --> 00:44.200
因为Cookie它是弦阶

00:44.200 --> 00:46.200
ATB请求协议

00:46.200 --> 00:48.200
它里边有一个小知识 就是Cookie是跟浏览器相关的

00:48.200 --> 00:51.200
那么这个东西是跟服务器有关系

00:51.200 --> 00:53.200
跟浏览器也有关系

00:53.200 --> 00:55.200
所以前端必须要深入学习

00:55.200 --> 00:58.200
如果说咱们这门课最重要的可能就是Cookie这一块了

00:58.200 --> 01:00.200
好 来吧 我们Cookie的基本概念

01:00.200 --> 01:03.200
我给大家写了一个markdown 就是文档

01:03.200 --> 01:07.200
这个文档里边基本上我要把我所说的话全部都说完了

01:07.200 --> 01:10.200
所以说我们这几颗基本上就是把文档过一遍

01:10.200 --> 01:12.200
大家下来的话也可以去看这个文档

01:12.200 --> 01:14.200
我把它拖到Typer里边去

01:14.200 --> 01:19.200
一个说 首先是我们引出这个问题

01:19.200 --> 01:22.200
就假设了服务器有这么一个接口

01:22.200 --> 01:25.200
通过请求这个接口 你可以添加一个管理员

01:25.200 --> 01:28.200
添加一篇文章 添加一个管理员

01:28.200 --> 01:31.200
或者是添加一个学生 添加一个班级

01:31.200 --> 01:34.200
那么对有一些数据做真三改的时候

01:34.200 --> 01:36.200
它是需要全线的

01:36.200 --> 01:39.200
比方说你都没有登录你能评论吗

01:39.200 --> 01:41.200
是不能评论 对不对

01:41.200 --> 01:43.200
还有一些新闻网站 你要发布一个新闻

01:43.200 --> 01:45.200
你能发布吗 你肯定不能发布 对不对

01:45.200 --> 01:47.200
应该谁发布 应该是管理员发布

01:47.200 --> 01:49.200
总之你要有一个身份

01:49.200 --> 01:51.200
我才能允许你做这件事

01:51.200 --> 01:54.200
那么这就是有一个认证的问题在里边

01:54.200 --> 01:56.200
那么现在问题就是服务器

01:56.200 --> 02:00.200
它如何知道请求接口的人是有这个全线的呢

02:00.200 --> 02:02.200
它有这么一个问题

02:02.200 --> 02:05.200
那么其实按照逻辑上来说的话很简单

02:05.200 --> 02:08.200
就是说你之前只要登录过比方说我们这个场景

02:08.200 --> 02:11.200
你只要登录过 你是不是就有身份了

02:11.200 --> 02:13.200
对不对 你是个管理员还是个普通用户

02:13.200 --> 02:14.200
是不是就有身份了

02:14.200 --> 02:16.200
你只要登录过 过后

02:16.200 --> 02:19.200
我才能够判断你有没有这个操作的全线

02:19.200 --> 02:22.200
那么现在问题就是在技术上层面的

02:22.200 --> 02:24.200
但是技术层面的就遇到一个问题

02:24.200 --> 02:27.200
因为我们的ATP协议它是无状态的

02:27.200 --> 02:29.200
什么叫无状态

02:29.200 --> 02:31.200
就是我们一个请求发动过去

02:31.200 --> 02:33.200
一个响应过来 就完了就没了

02:33.200 --> 02:34.200
这一次就结束了

02:34.200 --> 02:36.200
下一次又是一个崭新的请求

02:36.200 --> 02:38.200
又是个崭新的响应了

02:38.200 --> 02:41.200
也就是说服务器他遇到这么一个问题

02:41.200 --> 02:43.200
他不知道这一次请求的人

02:43.200 --> 02:46.200
跟之前登录的成功的那个人

02:46.200 --> 02:48.200
是不是同一个人 是不是同一个客户端

02:48.200 --> 02:50.200
他遇到这么一个问题了

02:50.200 --> 02:52.200
下面一个图说的很清楚

02:52.200 --> 02:54.200
比方一个客户端请求一个服务器

02:54.200 --> 02:57.200
他登录 发送账号密码登录过去

02:57.200 --> 03:00.200
然后服务器那边给他响应一个登录成功

03:00.200 --> 03:02.200
对不对 所以响应一个登录成功

03:02.200 --> 03:03.200
那么现在遇到一个问题就是

03:03.200 --> 03:06.200
客户端下一次再要去添加一个管理员

03:06.200 --> 03:08.200
服务器不认识他了

03:08.200 --> 03:10.200
不知道他之前做过啥

03:10.200 --> 03:12.200
因为他可能是别的客户端了

03:12.200 --> 03:15.200
因为我们服务器只要接受很多客户端的请求

03:15.200 --> 03:19.200
对吧 张三理都是要请求我们同一个服务器

03:19.200 --> 03:22.200
服务器不认识他这个东西到底是哪一个了

03:22.200 --> 03:23.200
他不知道这个客户端

03:23.200 --> 03:25.200
是不是之前登录成功的那个客户端

03:25.200 --> 03:26.200
他现在就要遇到这个问题了

03:26.200 --> 03:29.200
因此他现在无法判断他之前有没有登录成功

03:29.200 --> 03:32.200
对不对 要遇到这么一个问题

03:32.200 --> 03:34.200
由于这个问题存在了

03:34.200 --> 03:37.200
因为服务器他忘记了之前的所有请求

03:37.200 --> 03:41.200
你可以把服务器想象成一个有严重脸盲症的

03:41.200 --> 03:43.200
比方说咱们东哥 对吧

03:43.200 --> 03:45.200
他不是有脸盲症吗

03:45.200 --> 03:46.200
他没有办法评清楚

03:46.200 --> 03:48.200
跟他之前

03:48.200 --> 03:50.200
这个人他做过啥事

03:50.200 --> 03:52.200
跟他说话的那个人之前做过啥

03:52.200 --> 03:53.200
分不清楚了

03:53.200 --> 03:55.200
所以他现在遇到这么一个问题

03:55.200 --> 03:56.200
于是怎么办呢

03:56.200 --> 03:59.200
于是其实有一个非常简单的方式就是

03:59.200 --> 04:01.200
按照下面的流程来做

04:01.200 --> 04:03.200
客户端登录成功之后呢

04:03.200 --> 04:05.200
服务器会给客户端一个出入证

04:05.200 --> 04:06.200
这个出入证呢

04:06.200 --> 04:10.220
我们通常把它称之为令牌

04:10.220 --> 04:12.220
称之为令牌

04:12.220 --> 04:13.220
也就Token

04:13.220 --> 04:14.220
文匹之后同学们问

04:14.220 --> 04:16.220
Token是啥 就是一个令牌

04:16.220 --> 04:18.220
这个证件

04:18.220 --> 04:20.220
当这个证件是什么格式的呢

04:20.220 --> 04:21.220
无所谓的

04:21.220 --> 04:22.220
有很多种格式

04:22.220 --> 04:24.220
我们后面会讲一个GWT

04:24.220 --> 04:26.220
是其中一种格式

04:28.220 --> 04:30.220
比方说客户端在请求成功的时候

04:30.220 --> 04:32.220
就登录成功之后

04:32.220 --> 04:34.220
服务器一验在账后密码没问题

04:34.220 --> 04:35.220
于是就给他一个令牌

04:35.220 --> 04:36.220
表示你登录成功了

04:36.220 --> 04:37.220
给他一个出入证

04:37.220 --> 04:38.220
一个证件

04:39.220 --> 04:42.220
然后后续客户端再去请求服务器的时候呢

04:42.220 --> 04:43.220
服务器

04:43.220 --> 04:45.220
他就必须要把个证件

04:45.220 --> 04:47.220
附带到请求里面

04:48.220 --> 04:49.220
我们请求服务器

04:49.220 --> 04:50.220
任何一个阿尔克斯请求也好

04:50.220 --> 04:52.220
还有什么一个请求一个页面也好

04:52.220 --> 04:54.220
都要把出入在那自动的

04:54.220 --> 04:55.220
附带到请求里面

04:55.220 --> 04:56.220
发送给服务器

04:56.220 --> 04:58.220
令牌是不是发送过去了

04:58.220 --> 04:59.220
服务器一看

04:59.220 --> 05:00.220
我虽然不认识你是谁

05:00.220 --> 05:02.220
你既然有出入证

05:02.220 --> 05:03.220
有这个令牌

05:03.220 --> 05:04.220
说明了啥呀

05:04.220 --> 05:06.220
说明了你之前肯定登入成功的

05:06.220 --> 05:07.220
为什么

05:07.220 --> 05:09.220
因为只有你登入成功过后

05:09.220 --> 05:10.220
我才会把这个令牌给你

05:10.220 --> 05:12.220
不然的话你哪来的令牌呢

05:12.220 --> 05:13.220
对不对

05:13.220 --> 05:14.220
所以说服务器

05:14.220 --> 05:15.220
发生发现出入证

05:15.220 --> 05:16.220
有一个令牌

05:16.220 --> 05:17.220
OK那没问题

05:17.220 --> 05:18.220
我就允许你做这个操作

05:18.220 --> 05:19.220
没意思吧

05:19.220 --> 05:21.220
当然不是所有的操作都需要

05:21.220 --> 05:23.220
需要这个就是令牌的

05:23.220 --> 05:24.220
比方有一些比方

05:24.220 --> 05:25.220
浏览一篇新闻

05:25.220 --> 05:26.220
谁都可以浏览对不对

05:26.220 --> 05:27.220
或者是

05:27.220 --> 05:29.220
查看一些学生

05:29.220 --> 05:30.220
可能谁都可以查看

05:30.220 --> 05:32.220
不是所有的API

05:32.220 --> 05:33.220
不是所有的接口都需要

05:33.220 --> 05:34.220
这个认证

05:34.220 --> 05:35.220
但是有些接口需要的

05:35.220 --> 05:36.220
好那么现在呢

05:36.220 --> 05:37.220
就是他这个做法

05:37.220 --> 05:38.220
其实就是我们

05:38.220 --> 05:39.220
现实世界里边的认证

05:39.220 --> 05:40.220
不认人

05:40.220 --> 05:41.220
就是你看去

05:41.220 --> 05:42.220
特别是政府

05:42.220 --> 05:43.220
我们去办一些事

05:43.220 --> 05:44.220
他只认证件

05:44.220 --> 05:46.220
只认你的证件

05:46.220 --> 05:48.220
他不认你这个人是谁

05:48.220 --> 05:49.220
通过这个证件

05:49.220 --> 05:50.220
就可以轻松地

05:50.220 --> 05:51.220
识别身份的

05:51.220 --> 05:52.220
但是呢

05:52.220 --> 05:53.220
我们要考虑到一个问题

05:53.220 --> 05:54.220
就是用户

05:54.220 --> 05:55.220
他不可能只访问

05:55.220 --> 05:56.220
一个网站

05:56.220 --> 05:57.220
就是你的网站

05:57.220 --> 05:58.220
做好了

05:58.220 --> 05:59.220
部署上去

05:59.220 --> 06:00.220
他不可能只访问

06:00.220 --> 06:01.220
一个网站对吧

06:01.220 --> 06:02.220
他还会访问

06:02.220 --> 06:03.220
百度新浪

06:03.220 --> 06:04.220
访问其他的网站

06:04.220 --> 06:05.220
那么每一个网站

06:05.220 --> 06:06.220
他都可能会

06:06.220 --> 06:08.220
给他一个令牌

06:08.220 --> 06:09.220
那么也就是说

06:09.220 --> 06:10.220
在刻部端

06:10.220 --> 06:11.220
浏览器这一端

06:11.220 --> 06:12.220
就有一个

06:12.220 --> 06:13.220
类似于卡包的东西

06:13.220 --> 06:15.220
能够装这些令牌

06:15.220 --> 06:16.220
而且能进行

06:16.220 --> 06:17.220
对这个卡包的

06:17.220 --> 06:18.220
进行一些管理

06:18.220 --> 06:19.220
比方说你

06:19.220 --> 06:20.220
你看你自己家里边

06:20.220 --> 06:21.220
是不是就有很多卡包

06:21.220 --> 06:22.220
什么身份证

06:22.220 --> 06:24.220
还有什么社保卡

06:24.220 --> 06:25.220
你学生时间

06:25.220 --> 06:26.220
还没有社保卡

06:26.220 --> 06:27.220
还有什么呢

06:27.220 --> 06:28.220
那个就是户口本

06:28.220 --> 06:29.220
对不对

06:29.220 --> 06:30.220
都是一些证件

06:30.220 --> 06:31.220
还有什么呢

06:31.220 --> 06:32.220
还有一些会员证

06:32.220 --> 06:34.220
比方网吧的网

06:34.220 --> 06:35.220
网吧的会员卡

06:35.220 --> 06:36.220
或者是那个

06:36.220 --> 06:38.220
一些购物商城的会员卡

06:38.220 --> 06:39.220
有很多人

06:39.220 --> 06:40.220
很多人的卡片

06:40.220 --> 06:41.220
卡包去装

06:41.220 --> 06:42.220
而且呢

06:42.220 --> 06:43.220
进行一些管理

06:43.220 --> 06:44.220
那么存在哪些管理的

06:44.220 --> 06:45.220
就是那个卡包呢

06:45.220 --> 06:47.220
他要具备什么样的功能呢

06:47.220 --> 06:48.220
就第一个呢

06:48.220 --> 06:49.220
他要能够存放多个出入者

06:49.220 --> 06:50.220
有多个令牌

06:50.220 --> 06:51.220
这些令牌呢

06:51.220 --> 06:53.220
他可能来自于不同的网站

06:53.220 --> 06:54.220
也可能是一个网站

06:54.220 --> 06:56.220
给你颁发多个出入者

06:56.220 --> 06:58.220
给你给你有很多的令牌

06:58.220 --> 06:59.220
当然呢

06:59.220 --> 07:01.220
有可能是一些别的东西

07:01.220 --> 07:02.220
比方说

07:02.220 --> 07:04.220
咱们比方说

07:04.220 --> 07:05.220
我有一个

07:05.220 --> 07:06.220
我们是腾讯的

07:06.220 --> 07:07.220
腾讯是不是有很多产品

07:07.220 --> 07:08.220
有QQ空间

07:08.220 --> 07:10.220
有QQ那个就是邮箱

07:10.220 --> 07:11.220
所以同一个网站

07:11.220 --> 07:12.220
可能给你颁发

07:12.220 --> 07:13.220
不同的一些出入者

07:13.220 --> 07:14.220
对不对

07:14.220 --> 07:16.220
你有这个QQ的

07:16.220 --> 07:17.220
就是

07:17.220 --> 07:18.220
邮箱的出入者呢

07:18.220 --> 07:20.220
就会随意的进出我的邮箱

07:20.220 --> 07:21.220
你有那个就是

07:21.220 --> 07:22.220
空间的出入者

07:22.220 --> 07:24.220
就可以随意的进出我的空间

07:24.220 --> 07:25.220
就这么个意思啊

07:25.220 --> 07:26.220
而且呢

07:26.220 --> 07:27.220
有的时候呢

07:27.220 --> 07:28.220
他不一定是出入者

07:28.220 --> 07:29.220
可能是一些别的东西

07:29.220 --> 07:30.220
比方说

07:30.220 --> 07:31.220
你瀏覽一个网站的时候呢

07:31.220 --> 07:32.220
他可以谈一个广告出来

07:32.220 --> 07:33.220
或者可以谈一些

07:33.220 --> 07:34.220
操作的提示

07:34.220 --> 07:35.220
一些叫教程

07:35.220 --> 07:36.220
对吧

07:36.220 --> 07:37.220
有的时候可以谈一些教程

07:37.220 --> 07:38.220
那你可以

07:38.220 --> 07:39.220
你把关闭的时候呢

07:39.220 --> 07:40.220
可以勾选一个

07:40.220 --> 07:42.220
下一次不要再提示了

07:42.220 --> 07:43.220
对不对

07:43.220 --> 07:44.220
是不是这个东西

07:44.220 --> 07:45.220
这个东西呢

07:45.220 --> 07:46.220
也可以作为一个东西

07:46.220 --> 07:47.220
把记录到卡包里边

07:47.220 --> 07:48.220
记录下来

07:48.220 --> 07:49.220
记录下来

07:49.220 --> 07:50.220
下一次呢

07:50.220 --> 07:52.220
就随着下后续的请求

07:52.220 --> 07:53.220
访问服务器的时候呢

07:53.220 --> 07:54.220
就把这个

07:54.220 --> 07:55.220
我们记录的东西

07:55.220 --> 07:56.220
给他发送到服务器

07:56.220 --> 07:57.220
服务器看

07:57.220 --> 07:58.220
你不需要

07:58.220 --> 07:59.220
不需要这些提示的

07:59.220 --> 08:00.220
我就不给你发了

08:00.220 --> 08:01.220
就这么个意思

08:01.220 --> 08:03.220
那么这第一个

08:03.220 --> 08:04.220
能够存放多个出入者

08:04.220 --> 08:05.220
第二个呢

08:05.220 --> 08:06.220
是要能够自动的

08:06.220 --> 08:07.220
出入者

08:07.220 --> 08:08.220
比如说呢

08:08.220 --> 08:09.220
客户端在访问

08:09.220 --> 08:10.220
不同的网站的时候

08:10.220 --> 08:11.220
他要能够自动的

08:11.220 --> 08:12.220
把对应的出入者

08:12.220 --> 08:13.220
附带过去

08:13.220 --> 08:14.220
比如说你去那个外向城

08:14.220 --> 08:15.220
你就把外向城的会员卡

08:15.220 --> 08:16.220
直接出示

08:16.220 --> 08:18.220
自动的出示过去

08:18.220 --> 08:19.220
第三个呢

08:19.220 --> 08:20.220
是要能够正确的

08:20.220 --> 08:21.220
出示出入者

08:21.220 --> 08:22.220
什么意思呢

08:22.220 --> 08:23.220
就你不能把那个

08:23.220 --> 08:24.220
肯德基的出入者

08:24.220 --> 08:25.220
肯德基的会员卡

08:25.220 --> 08:26.220
拿去给拜当劳

08:26.220 --> 08:27.220
这要是要打架的

08:27.220 --> 08:28.220
对吧

08:28.220 --> 08:29.220
那不好

08:29.220 --> 08:30.220
你到了一个地方

08:30.220 --> 08:31.220
只需要出示

08:31.220 --> 08:32.220
那个地方的出入者

08:32.220 --> 08:33.220
就是

08:33.220 --> 08:35.220
他的会员卡就可以了

08:35.220 --> 08:36.220
就这么个意思

08:36.220 --> 08:37.220
第四呢

08:37.220 --> 08:38.220
要能够管理出这的

08:38.220 --> 08:39.220
有效日期

08:39.220 --> 08:40.220
什么意思呢

08:40.220 --> 08:41.220
就是说

08:41.220 --> 08:42.220
客户端呢

08:42.220 --> 08:43.220
他要能够自动的发现

08:43.220 --> 08:44.220
那些已经过期的出入者

08:44.220 --> 08:45.220
就有些

08:45.220 --> 08:46.220
有些令牌

08:46.220 --> 08:47.220
他可能有有效时间

08:47.220 --> 08:48.220
你过期了

08:48.220 --> 08:49.220
就不能用了

08:49.220 --> 08:50.220
那么他要能够自动的

08:50.220 --> 08:51.220
从卡包里面把仪出掉

08:51.220 --> 08:52.220
所以说管理卡包

08:52.220 --> 08:53.220
也就是

08:53.220 --> 08:54.220
涉及到这么一些方面

08:54.220 --> 08:55.220
那么我们这些

08:55.220 --> 08:56.220
可以讲Cookie

08:56.220 --> 08:57.220
Cookie是啥呀

08:57.220 --> 08:59.220
我们整个卡包

08:59.220 --> 09:00.220
就是个Cookie

09:00.220 --> 09:01.220
就认为是

09:01.220 --> 09:03.220
就认为是整个Cookie

09:03.220 --> 09:04.220
那么我们还有一种说法

09:04.220 --> 09:05.220
是一个Cookie

09:05.220 --> 09:06.220
这个Cookie

09:06.220 --> 09:07.220
某一个Cookie

09:07.220 --> 09:08.220
那么是什么意思呢

09:08.220 --> 09:09.220
指的是卡包里面

09:09.220 --> 09:10.220
每一张卡片

09:10.220 --> 09:11.220
就纯的东西

09:11.220 --> 09:12.220
纯的一些小写信息

09:12.220 --> 09:13.220
我这都是用

09:13.220 --> 09:14.220
举例的方式

09:14.220 --> 09:15.220
给大家说明

09:15.220 --> 09:16.220
实际上

09:16.220 --> 09:17.220
从技术的角度来说

09:17.220 --> 09:18.220
Cookie是什么呢

09:18.220 --> 09:20.220
Cookie其实就是一个小文件

09:20.220 --> 09:22.220
这里边记录了一些字无串

09:22.220 --> 09:23.220
每个字无串里面

09:23.220 --> 09:24.220
有一些属性

09:24.220 --> 09:26.220
包含了一些信息在里边

09:26.220 --> 09:27.220
就是这么一个东西

09:27.220 --> 09:29.220
它可以在浏览器端

09:29.220 --> 09:32.220
可以存放一些小的信息

09:32.220 --> 09:33.220
Cookie的信息存放很少的

09:33.220 --> 09:34.220
在浏览器上

09:34.220 --> 09:36.220
很多浏览器对Cookie的

09:36.220 --> 09:37.220
就每一个网站

09:37.220 --> 09:39.220
对一个网站的Cookie的信息

09:39.220 --> 09:41.220
不能超过4个KB

09:41.220 --> 09:43.220
它不能太多的信息在里边

09:43.220 --> 09:45.220
它存了一些少量的信息

09:45.220 --> 09:46.220
但是这些少量的信息

09:46.220 --> 09:48.220
就已经能够

09:48.220 --> 09:49.220
帮助我们解决

09:49.220 --> 09:50.220
刚才的问题了

09:50.220 --> 09:51.220
这是我们Cookie的

09:51.220 --> 09:52.220
对某一些概念

09:52.220 --> 09:53.220
同一个问题

09:53.220 --> 09:55.220
把Cookie的概念引出来

09:55.220 --> 09:56.220
好 接下来

09:56.220 --> 09:57.220
我们来看一下Cookie的组成

09:57.220 --> 09:58.220
一个Cookie的

09:58.220 --> 09:59.220
相当于就是一个卡片

09:59.220 --> 10:00.220
对不对

10:00.220 --> 10:01.220
它里面记录一些信息

10:01.220 --> 10:02.220
什么信息都可以

10:02.220 --> 10:03.220
我们也可以用来记录

10:03.220 --> 10:04.220
记录什么

10:04.220 --> 10:06.220
记录了个令牌

10:06.220 --> 10:07.220
出入这儿

10:07.220 --> 10:08.220
也可以用来记录

10:08.220 --> 10:09.220
任何其他信息

10:09.220 --> 10:10.220
它有点类似于

10:10.220 --> 10:11.220
那个什么

10:11.220 --> 10:12.220
浏览器端的那个

10:12.220 --> 10:13.220
Local Storage

10:13.220 --> 10:14.220
有点类似于它

10:14.220 --> 10:15.220
但看它跟Local Storage

10:15.220 --> 10:16.220
本质区别有什么的

10:16.220 --> 10:18.220
它是自动管理的

10:18.220 --> 10:19.220
时间过期了

10:19.220 --> 10:20.220
它自动把它移除

10:20.220 --> 10:22.220
Local Storage 是不是不行

10:22.220 --> 10:23.220
对不对

10:23.220 --> 10:24.220
还有什么呢

10:24.220 --> 10:25.220
它自动发送到服务器

10:25.220 --> 10:28.220
我发送就是我Cookie的

10:28.220 --> 10:29.220
令牌

10:29.220 --> 10:30.220
就是出入这儿

10:30.220 --> 10:31.220
满足要求

10:31.220 --> 10:32.220
服务器了

10:32.220 --> 10:33.220
你不需要手动处理

10:33.220 --> 10:35.220
第三个是

10:35.220 --> 10:36.220
服务器那边

10:36.220 --> 10:37.220
给了一个令牌过后

10:37.220 --> 10:38.220
浏览器会自动的

10:38.220 --> 10:40.220
保存到Cookie里面

10:40.220 --> 10:41.220
它是有自动的功能的

10:41.220 --> 10:43.220
它比Local Storage

10:43.220 --> 10:44.220
特别是在登录

10:44.220 --> 10:45.220
认证这一块

10:45.220 --> 10:47.220
是比较是更好的

10:47.220 --> 10:48.220
但它不好的地方

10:48.220 --> 10:49.220
太远了

10:49.220 --> 10:50.220
它存的东西

10:50.220 --> 10:51.220
也不说不好吧

10:51.220 --> 10:53.220
就是它比Local Storage

10:53.220 --> 10:54.220
没有Local Storage

10:54.220 --> 10:55.220
强的地方就在于

10:55.220 --> 10:57.220
它存的东西很有限

10:57.220 --> 10:59.220
它只能存一些少量数据

10:59.220 --> 11:01.220
很多时候也少量数据够了

11:01.220 --> 11:02.220
我们看一下

11:02.220 --> 11:03.220
一个Cookie里面

11:03.220 --> 11:04.220
就一个卡片里面

11:04.220 --> 11:06.220
它有哪些信息

11:06.220 --> 11:08.220
其中第一个信息就是建置队

11:08.220 --> 11:09.220
这个没什么好说的

11:09.220 --> 11:10.220
一个建置队

11:10.220 --> 11:12.220
一个Value

11:12.220 --> 11:13.220
自己命名

11:13.220 --> 11:14.220
直 自己命名

11:14.220 --> 11:15.220
就是一个属性

11:15.220 --> 11:16.220
属性名属性直

11:16.220 --> 11:17.220
下面这个信息

11:17.220 --> 11:18.220
DoMate

11:18.220 --> 11:19.220
这个寓意

11:19.220 --> 11:20.220
表示什么意思呢

11:20.220 --> 11:21.220
表示这个令牌

11:21.220 --> 11:22.220
出入这儿

11:22.220 --> 11:23.220
是属于哪个网站的

11:23.220 --> 11:24.220
我们都解释过了

11:24.220 --> 11:25.220
很简单

11:25.220 --> 11:26.220
比如说我出入这儿

11:26.220 --> 11:27.220
DoMate

11:27.220 --> 11:29.220
表示Cookie是属于这个网站的

11:29.220 --> 11:30.220
还有Path

11:30.220 --> 11:31.220
Path是什么路径

11:31.220 --> 11:32.220
因为一个网站里面

11:32.220 --> 11:33.220
可能有不同的功能

11:33.220 --> 11:34.220
比方说新闻的功能

11:34.220 --> 11:36.220
还有什么

11:36.220 --> 11:38.220
就是那个

11:38.220 --> 11:40.220
博客的功能等等

11:40.220 --> 11:41.220
还有商品的功能

11:41.220 --> 11:42.220
有不同的功能

11:42.220 --> 11:43.220
那么可能

11:43.220 --> 11:45.220
我们会针对不同的功能

11:45.220 --> 11:47.220
去做不同的出入这儿

11:47.220 --> 11:48.220
那么也就是

11:48.220 --> 11:49.220
它应该指定一个路径

11:49.220 --> 11:50.220
比方说一个Cookie

11:50.220 --> 11:51.220
它有点类似于

11:51.220 --> 11:52.220
一个公司的不同部门

11:52.220 --> 11:54.220
会颁发不同的令牌

11:54.220 --> 11:56.220
比方说这个News

11:56.220 --> 11:57.220
如果说

11:57.220 --> 11:58.220
我Cookie里面一个属性

11:58.220 --> 11:59.220
Path这个属性是News

11:59.220 --> 12:00.220
表示这个Cookie

12:00.220 --> 12:01.220
它是属于这个路径的

12:01.220 --> 12:02.220
那么属于这个路径

12:02.220 --> 12:03.220
有什么用了

12:03.220 --> 12:04.220
我们后续详细解释

12:04.220 --> 12:06.220
下一个Secure

12:06.220 --> 12:07.220
表示安全

12:07.220 --> 12:08.220
释放安全传输

12:08.220 --> 12:09.220
这个东西什么意思

12:09.220 --> 12:10.220
我们下一个

12:10.220 --> 12:11.220
后边解释

12:11.220 --> 12:12.220
Expire过期时间

12:12.220 --> 12:13.220
表示Cookie在什么时候过期

12:13.220 --> 12:14.220
这个很好理解

12:14.220 --> 12:15.220
对吧

12:15.220 --> 12:16.220
那么我们把Cookie的

12:16.220 --> 12:18.220
组成部分看清楚了

12:18.220 --> 12:19.220
知道一个Cookie

12:19.220 --> 12:20.220
它是怎么组成了之后

12:20.220 --> 12:22.220
我们来看一下

12:22.220 --> 12:25.780
它这些信息到底有什么用

12:25.780 --> 12:26.780
当浏览器

12:26.780 --> 12:27.780
向服务器发送一个

12:27.780 --> 12:28.780
请求的时候

12:29.780 --> 12:30.780
它这个时候

12:30.780 --> 12:31.780
我们会勾件

12:31.780 --> 12:32.780
请求头 请求体

12:32.780 --> 12:33.780
对吧 等等的信息

12:34.780 --> 12:35.780
发送一个请求的时候

12:35.780 --> 12:37.780
它会瞄一眼自己的卡包

12:38.780 --> 12:39.780
卡包里面不是有

12:39.780 --> 12:40.780
很多卡片吗

12:40.780 --> 12:41.780
很多Cookie对吧

12:41.780 --> 12:42.780
它把一个一个Cookie

12:42.780 --> 12:43.780
拿出来看

12:43.780 --> 12:45.780
看一下哪些Cookie

12:45.780 --> 12:46.780
适合

12:47.780 --> 12:48.780
把这些Cookie的信息

12:49.780 --> 12:50.780
烧给服务器

12:51.780 --> 12:52.780
看前面那个图

12:53.780 --> 12:54.780
我请求的时候

12:54.780 --> 12:55.780
我们的一些Cookie信息

12:55.780 --> 12:56.780
发送到服务器

12:56.780 --> 12:57.780
对吧

12:57.780 --> 12:58.780
到底要把哪些

12:58.780 --> 12:59.780
因为我们存了很多的Cookie

12:59.780 --> 13:00.780
有肯德基的

13:00.780 --> 13:01.780
有麦当劳的

13:01.780 --> 13:02.780
有万象城的

13:02.780 --> 13:03.780
有网吧的

13:03.780 --> 13:04.780
那么我这一次请求

13:04.780 --> 13:06.780
要发送哪些Cookie到服务器

13:06.780 --> 13:07.780
它就要进一看

13:10.780 --> 13:11.780
那么它怎么来看呢

13:11.780 --> 13:12.780
它是这样子

13:12.780 --> 13:13.780
如果它一个Cookie

13:13.780 --> 13:14.780
一个Cookie看

13:14.780 --> 13:15.780
如果说一个Cookie

13:15.780 --> 13:16.780
它满足

13:16.780 --> 13:17.780
同时满足

13:17.780 --> 13:18.780
所有的条件都要满足

13:18.780 --> 13:19.780
那么这个Cookie

13:19.780 --> 13:20.780
就会被附带到

13:20.780 --> 13:21.780
请求里边

13:21.780 --> 13:22.780
哪些条件呢

13:22.780 --> 13:23.780
第一个是没有过期

13:23.780 --> 13:24.780
它看什么呢

13:24.780 --> 13:25.780
看Expire

13:25.780 --> 13:26.780
看过期时间

13:26.780 --> 13:27.780
有没有过期

13:27.780 --> 13:28.780
就看这个

13:29.780 --> 13:30.780
第二个是

13:30.780 --> 13:31.780
看这个寓意

13:31.780 --> 13:32.780
和请求的寓意

13:32.780 --> 13:33.780
是不是匹配的

13:33.780 --> 13:34.780
看哪个

13:34.780 --> 13:35.780
看Dume

13:36.780 --> 13:37.780
看这个卡片的Dume

13:37.780 --> 13:38.780
跟这个请求的寓意

13:38.780 --> 13:39.780
是不是匹配的

13:39.780 --> 13:40.780
比方说

13:40.780 --> 13:41.780
Cookie里边的寓意

13:41.780 --> 13:43.780
是远近点Tag

13:44.780 --> 13:45.780
那么它可以匹配的

13:45.780 --> 13:46.780
匹配的请求寓意

13:46.780 --> 13:47.780
是什么呢

13:47.780 --> 13:48.780
就是你请求哪

13:48.780 --> 13:49.780
下面哪些寓意

13:49.780 --> 13:50.780
是可以发送这个Cookie的呢

13:50.780 --> 13:51.780
请求这个可以

13:51.780 --> 13:52.780
请求这个也可以

13:52.780 --> 13:53.780
对吧

13:53.780 --> 13:55.780
所以说只要是机遇

13:55.780 --> 13:57.780
就是它这个东西叫做

13:58.780 --> 13:59.780
这东西叫什么呢

13:59.780 --> 14:00.780
它叫这个

14:00.780 --> 14:03.670
叫做

14:04.670 --> 14:05.670
机遇

14:06.670 --> 14:07.670
机遇

14:07.670 --> 14:08.670
如果说

14:08.670 --> 14:09.670
这个东西是匹配的

14:09.670 --> 14:10.670
那就OK了

14:10.670 --> 14:11.670
也就是说

14:11.670 --> 14:12.670
如果说你Cookie

14:12.670 --> 14:13.670
解的是个机遇的话

14:13.670 --> 14:14.670
那么后边

14:14.670 --> 14:15.670
很多的二级遇

14:15.670 --> 14:17.670
三级遇都可以匹配

14:17.670 --> 14:18.670
没了意思吧

14:18.670 --> 14:19.670
那么如果说

14:19.670 --> 14:20.670
你Cookie

14:20.670 --> 14:21.670
不是一个机遇

14:21.670 --> 14:22.670
是一个二级遇民

14:22.670 --> 14:23.670
比方说这个遇

14:23.670 --> 14:24.670
那么这里呢

14:24.670 --> 14:25.670
它只能匹配这个遇

14:26.670 --> 14:27.670
那么它就

14:27.670 --> 14:28.670
它就无法匹配

14:28.670 --> 14:29.670
这些的

14:29.670 --> 14:30.670
这个就无法匹配了

14:30.670 --> 14:31.670
这个就无法匹配了

14:31.670 --> 14:32.670
它是这么一种匹配逻期

14:32.670 --> 14:33.670
这个举个例子就明白了

14:33.670 --> 14:34.670
而且Cookie的

14:34.670 --> 14:35.670
它匹配遇的时候

14:35.670 --> 14:37.670
跟端口没有关系

14:37.670 --> 14:39.670
这有跟那个跨遇

14:39.670 --> 14:40.670
是不是有很大的区别

14:40.670 --> 14:41.670
跟端口没有区别

14:41.670 --> 14:42.670
跟没有任何关系

14:42.670 --> 14:44.670
它只要能匹配遇就行了

14:44.670 --> 14:45.670
这样的意思吧

14:45.670 --> 14:47.670
好 这是Cookie的遇匹配

14:47.670 --> 14:48.670
首先要没有过期

14:48.670 --> 14:50.670
然后遇要匹配上

14:50.670 --> 14:51.670
好 遇匹配上还没完

14:51.670 --> 14:52.670
还要拍是要匹配上

14:53.670 --> 14:54.670
拍是怎么匹配呢

14:54.670 --> 14:56.670
比方说Cookie的拍式是斜杠六四

14:56.670 --> 14:58.670
它可以匹配的拍式是怎么呢

14:58.670 --> 15:00.670
斜杠六四 斜杠六四 Detail ABC

15:00.670 --> 15:01.670
这种都可以匹配

15:01.670 --> 15:02.670
你看就明白了

15:02.670 --> 15:03.670
但是不能匹配这个

15:04.670 --> 15:05.670
原来的意思吧

15:05.670 --> 15:06.670
如果说Cookie的拍式是斜杠

15:06.670 --> 15:07.670
那么可想而知

15:07.670 --> 15:09.670
它是不是可以匹配所有的度计

15:09.670 --> 15:10.670
对吧

15:10.670 --> 15:11.670
它跟谁匹配

15:11.670 --> 15:12.670
跟请求的地址匹配

15:13.670 --> 15:14.670
Cookie说干嘛的

15:14.670 --> 15:15.670
是请求的时候

15:15.670 --> 15:16.670
附带过去的

15:16.670 --> 15:17.670
就看这一次请求的地址

15:17.670 --> 15:19.670
从请求的地址里边去匹配

15:19.670 --> 15:21.670
这是关于这个拍式的匹配

15:22.670 --> 15:23.670
然后呢

15:23.670 --> 15:24.670
这个是

15:24.670 --> 15:25.670
还要看

15:25.670 --> 15:26.670
还要验证这个

15:26.670 --> 15:27.670
这个Cookie呢

15:27.670 --> 15:28.670
是不是安全传输的

15:28.670 --> 15:30.670
你看前面不是一个属性吗

15:30.670 --> 15:31.670
Secure

15:31.670 --> 15:32.670
安全传输

15:32.670 --> 15:34.670
如果说你设置的这个属性

15:34.670 --> 15:35.670
表示他要安全传输

15:35.670 --> 15:37.670
如果说安全传输的属性

15:37.670 --> 15:38.670
是有的

15:38.670 --> 15:40.670
那么你请求的时候

15:40.670 --> 15:41.670
必须要是ATPS

15:41.670 --> 15:42.670
否则的话

15:42.670 --> 15:44.670
这个Cookie是不会发生过去的

15:45.670 --> 15:46.670
如果说这个Secure

15:46.670 --> 15:47.670
是没有设置的

15:47.670 --> 15:48.670
那么这个请求的协议

15:48.670 --> 15:49.670
可以是ATP

15:49.670 --> 15:50.670
也可以是ATPS

15:50.670 --> 15:53.670
就是这个安全的匹配

15:53.670 --> 15:55.670
如果说某一个Cookie

15:55.670 --> 15:56.670
同时满足了

15:56.670 --> 15:59.670
上边的所说的这么全部的条件

15:59.670 --> 16:01.670
那么浏览器在这一次请求里边

16:01.670 --> 16:03.670
就会自动的把它加入到

16:03.670 --> 16:04.670
加入到哪呢

16:04.670 --> 16:07.670
它会自动的把它放到请求头里边

16:07.670 --> 16:08.670
比方说吧

16:08.670 --> 16:10.670
我在浏览器中访问百度的时候

16:10.670 --> 16:11.670
我就访问百度的时候

16:11.670 --> 16:12.670
它会在请求头里边

16:12.670 --> 16:13.670
附加在下面的Cookie

16:13.670 --> 16:14.670
你看这

16:14.670 --> 16:16.670
通过请求头自动的

16:16.670 --> 16:18.670
就不用你自己操作

16:18.670 --> 16:19.670
浏览器他发现自己有Cookie

16:19.670 --> 16:20.670
而且有些Cookie匹配上了

16:20.670 --> 16:21.670
他就用这个

16:21.670 --> 16:22.670
请求头里边加一个字段

16:22.670 --> 16:23.670
Cookie

16:23.670 --> 16:24.670
后面就是Cookie的值

16:24.670 --> 16:25.670
那么Cookie的值

16:25.670 --> 16:26.670
里面写的是什么呢

16:26.670 --> 16:27.670
其实就是每一个卡片

16:27.670 --> 16:28.670
键值对

16:28.670 --> 16:29.670
它的格式是

16:29.670 --> 16:30.670
键等于值

16:30.670 --> 16:31.670
分号键等于值

16:31.670 --> 16:32.670
分号键等于值

16:32.670 --> 16:33.670
你看

16:33.670 --> 16:34.670
键值

16:34.670 --> 16:35.670
我把值打到马赛克

16:35.670 --> 16:37.670
键值

16:37.670 --> 16:38.670
键值

16:38.670 --> 16:39.670
看没

16:39.670 --> 16:40.670
键值

16:40.670 --> 16:42.670
键值

16:42.670 --> 16:43.670
不要意思吧

16:43.670 --> 16:44.670
后面有很多的键值对

16:44.670 --> 16:45.670
你看可以看到

16:45.670 --> 16:46.670
从这个例子可以看到

16:46.670 --> 16:47.670
一个网站

16:47.670 --> 16:48.670
它实际上是可以

16:48.670 --> 16:49.670
就是Cookie里边

16:49.670 --> 16:50.670
卡包里边

16:50.670 --> 16:51.670
实际上唯一一个网站

16:51.670 --> 16:53.670
是可以存处很多Cookie的

16:53.670 --> 16:54.670
它不是说只有一个

16:54.670 --> 16:55.670
当然我们这里

16:55.670 --> 16:56.670
只需要一个就够了

16:56.670 --> 16:57.670
还有一些

16:57.670 --> 16:58.670
其他的

16:58.670 --> 16:59.670
细致末节的东西

16:59.670 --> 17:00.670
我们也不需要了

17:00.670 --> 17:01.670
Cookie里边可以存啥

17:01.670 --> 17:02.670
比方说存在一些

17:02.670 --> 17:03.670
用户的操作习惯

17:03.670 --> 17:04.670
用户就是

17:04.670 --> 17:06.670
之前

17:06.670 --> 17:07.670
就是比方说

17:07.670 --> 17:08.670
我们看了广告

17:08.670 --> 17:09.670
对不对

17:09.670 --> 17:10.670
广告不想要广告

17:10.670 --> 17:11.670
再显示之类的

17:11.670 --> 17:12.670
当然最重要的是什么

17:12.670 --> 17:14.670
存储令牌

17:14.670 --> 17:15.670
最重要的是存储令牌

17:15.670 --> 17:16.670
我们这一颗

17:16.670 --> 17:17.670
也就是说

17:17.670 --> 17:20.670
主要是解决个登录问题

17:20.670 --> 17:21.670
每一个舰队

17:21.670 --> 17:22.670
就是一个符合条件的Cookie

17:22.670 --> 17:23.670
它就会把它

17:23.670 --> 17:24.670
发送到服务器

17:24.670 --> 17:25.670
自动加入进来

17:25.670 --> 17:27.670
当然我这里补好给大家

17:27.670 --> 17:29.670
在真正的百度里边去掩饰

17:29.670 --> 17:31.670
因为这个东西是不能暴露的

17:31.670 --> 17:32.670
为什么不能暴露

17:32.670 --> 17:33.670
因为Cookie中包含了

17:33.670 --> 17:35.670
重要的身份信息

17:35.670 --> 17:36.670
是不是有令牌

17:36.670 --> 17:37.670
令牌哪来的

17:37.670 --> 17:39.670
登录成功过后给力的

17:39.670 --> 17:40.670
你之后出入这个系统

17:40.670 --> 17:41.670
你是不是要靠这个令牌

17:41.670 --> 17:43.670
这个令牌是不能泄漏的

17:43.670 --> 17:45.670
千万不要把Cookie泄漏给别人

17:45.670 --> 17:46.670
否则的话

17:46.670 --> 17:48.670
别人就拿到了你的令牌

17:48.670 --> 17:49.670
拿到你的证件

17:49.670 --> 17:51.670
它就有为所欲为的可能性了

17:51.670 --> 17:53.670
所以这个地方大家注意一下

17:53.670 --> 17:54.670
这是如何

17:54.670 --> 17:56.670
这是Cookie的组成

17:56.670 --> 17:57.670
了解的Cookie的组成

17:57.670 --> 17:58.670
你又知道Cookie到底是一个什么信息了

17:58.670 --> 18:00.670
但是我们现在还不知道

18:00.670 --> 18:02.670
我们怎么去设置一个Cookie呢

18:02.670 --> 18:04.670
Cookie怎么来的呢

18:04.670 --> 18:06.670
令牌到底是怎么颁发的

18:06.670 --> 18:08.670
怎么加入到浏览器的卡包里边去了

18:08.670 --> 18:09.670
对吧

18:09.670 --> 18:10.670
那么我们这里看

18:10.670 --> 18:12.670
如何来设置Cookie

18:12.670 --> 18:14.670
我们把这个文档看完之后

18:14.670 --> 18:16.670
讲一个小例子

18:20.240 --> 18:21.240
它是这样

18:22.240 --> 18:23.240
由于Cookie呢

18:23.240 --> 18:25.240
它是保存在浏览器端的

18:25.240 --> 18:27.240
是不是介石可以操作

18:27.240 --> 18:28.240
对吧

18:28.240 --> 18:29.240
浏览器端的东西

18:29.240 --> 18:30.240
可以用介石操作吧

18:30.240 --> 18:31.240
另外呢

18:31.240 --> 18:32.240
证件呢

18:32.240 --> 18:33.240
很多那个令牌啊

18:33.240 --> 18:34.240
它又是Cookie

18:34.240 --> 18:35.240
它又是浮器给你颁发的

18:35.240 --> 18:36.240
你登城过来

18:36.240 --> 18:37.240
它浮器给你的

18:37.240 --> 18:39.240
因此Cookie的设置

18:39.240 --> 18:40.240
有两种模式

18:40.240 --> 18:43.240
一种是浮器享用

18:43.240 --> 18:44.240
这是模式非常普遍的

18:44.240 --> 18:46.240
比方说当浮器决定了

18:46.240 --> 18:49.240
给客户端颁发一个证件的时候

18:49.240 --> 18:50.240
比方你登城过来

18:50.240 --> 18:51.240
我给你颁发一个证件

18:51.240 --> 18:53.240
它怎么来给浏览器

18:53.240 --> 18:55.240
响应一个Cookie呢

18:55.240 --> 18:57.240
它是在响应的消息中

18:57.240 --> 18:58.240
包含一个Cookie

18:58.240 --> 19:00.240
跟着响应一起过去

19:00.240 --> 19:01.240
哎

19:01.240 --> 19:02.240
浏览器一看

19:02.240 --> 19:03.240
浮器你把Cookie给我了

19:03.240 --> 19:04.240
那么我很聪明

19:04.240 --> 19:05.240
浏览器自动的

19:05.240 --> 19:06.240
不需要你做任何操作

19:06.240 --> 19:07.240
浏览器自动的

19:07.240 --> 19:08.240
把这个Cookie呢

19:08.240 --> 19:10.240
就保存到了自己的卡包里边

19:10.240 --> 19:12.240
它这么一种说法

19:13.240 --> 19:15.240
那么就跟这个做法是一样的

19:15.240 --> 19:16.240
你看这里

19:16.240 --> 19:17.240
请求当中成功

19:17.240 --> 19:18.240
把Cookie给卡

19:18.240 --> 19:20.240
它就会自动保存下来

19:20.240 --> 19:22.240
那么后续请就把Cookie

19:22.240 --> 19:23.240
把它附带到

19:23.240 --> 19:25.240
请求里边发给浮览器

19:25.240 --> 19:27.240
这是这种做法

19:27.240 --> 19:29.240
然后第二个是客户端自行设置

19:29.240 --> 19:31.240
这种做法有的时候也会遇到

19:31.240 --> 19:33.240
比方用户的操作习惯

19:35.240 --> 19:36.240
有一些比方说

19:36.240 --> 19:37.240
我举个例子吧

19:37.240 --> 19:38.240
比方说你看一个广告

19:38.240 --> 19:39.240
你不希望它显示了

19:39.240 --> 19:42.240
那么我可以把记录到Cookie里边

19:42.240 --> 19:43.240
因为以前最早的时候

19:43.240 --> 19:45.240
是没有Local Storage的

19:45.240 --> 19:47.240
Local Storage是HMM5的API

19:47.240 --> 19:48.240
对吧

19:48.240 --> 19:49.240
Cookie是很早的

19:49.240 --> 19:51.240
那么以前在本地记录一些信息

19:51.240 --> 19:53.240
就靠的是Cookie

19:53.240 --> 19:54.240
那么这里呢

19:54.240 --> 19:56.240
也就是可以用客户端

19:56.240 --> 19:57.240
用戒严时代

19:57.240 --> 19:59.240
在浏览器端跟请求

19:59.240 --> 20:00.240
没有任何关系

20:00.240 --> 20:01.240
直接给它加一个

20:01.240 --> 20:03.240
往卡包里边加一张卡片

20:03.240 --> 20:04.240
加到过浏览器

20:04.240 --> 20:05.240
后边再请求的时候

20:05.240 --> 20:06.240
只要匹配

20:06.240 --> 20:08.240
它就会把卡片发送到浮览器

20:08.240 --> 20:10.240
这是这个如何设置Cookie

20:10.240 --> 20:12.240
那么我们通过两方面来讲

20:12.240 --> 20:14.240
一个是浮览器端设置Cookie

20:14.240 --> 20:15.240
怎么来设置呢

20:15.240 --> 20:17.240
它的设置方式就是

20:17.240 --> 20:19.240
想应头按照下面的格式设置

20:19.240 --> 20:22.240
就是如果说你要一次想应

20:22.240 --> 20:23.240
我要设置多个Cookie

20:23.240 --> 20:25.240
就要发多张卡片

20:25.240 --> 20:26.240
到那个客户端

20:26.240 --> 20:28.240
那么你就可以用这种方式

20:28.240 --> 20:29.240
设置Cookie也第一个Cookie

20:29.240 --> 20:30.240
设置Cookie也第二个Cookie

20:30.240 --> 20:31.240
设置Cookie第三个Cookie

20:31.240 --> 20:33.240
咱们来随便访问一个网页吧

20:33.240 --> 20:36.680
比方说

20:36.680 --> 20:38.680
百度不看了

20:39.680 --> 20:40.680
可以吧

20:40.680 --> 20:41.680
就百度吧

20:41.680 --> 20:42.680
我不给大家看那个

20:42.680 --> 20:43.680
请求

20:43.680 --> 20:44.680
我请我的Cookie

20:44.680 --> 20:45.680
我给大家看一下

20:45.680 --> 20:47.680
一个浮览器想应的结果

20:47.680 --> 20:48.680
来吧

20:48.680 --> 20:49.680
刷新一下

20:49.680 --> 20:50.680
好

20:50.680 --> 20:51.680
你看

20:51.680 --> 20:52.680
我们去访问百度浮览器

20:52.680 --> 20:54.680
百度浮览器的它的想应

20:54.680 --> 20:55.680
你看想应里边

20:55.680 --> 20:56.680
它莫名其妙地

20:56.680 --> 20:57.680
跟我加了几个Cookie

20:57.680 --> 20:58.680
对吧

20:58.680 --> 20:59.680
加了是不是再加三个Cookie

20:59.680 --> 21:00.680
这是第一个Cookie

21:00.680 --> 21:01.680
第二个Cookie

21:01.680 --> 21:02.680
第三个Cookie

21:02.680 --> 21:03.680
对不对

21:03.680 --> 21:04.680
它给你加过来了

21:04.680 --> 21:05.680
这些Cookie有什么用

21:05.680 --> 21:06.680
你要去问百度

21:06.680 --> 21:07.680
它为什么要发这些东西

21:07.680 --> 21:09.680
那么不管它是有什么用

21:09.680 --> 21:10.680
它这些东西

21:10.680 --> 21:11.680
它会把它保存到哪呢

21:11.680 --> 21:13.680
保存到我们的Cookie里边

21:13.680 --> 21:14.680
保存到我们百度的Cookie里边

21:14.680 --> 21:15.680
我们可以点这

21:15.680 --> 21:16.680
可以看到

21:16.680 --> 21:17.680
百度给了我们

21:17.680 --> 21:18.680
光是百度的网站

21:18.680 --> 21:20.680
就给了我们29个Cookie

21:20.680 --> 21:21.680
还有这个

21:21.680 --> 21:23.680
这个浴下面的Cookie

21:23.680 --> 21:25.680
它也给了我们一些

21:25.680 --> 21:26.680
你看

21:26.680 --> 21:27.680
所以有很多的Cookie

21:27.680 --> 21:28.680
我们来看一下

21:28.680 --> 21:30.680
这个UID不能给你们看

21:30.680 --> 21:31.680
看一下那个

21:31.680 --> 21:33.680
不太无关紧要的吧

21:34.680 --> 21:35.680
去看这个

21:35.680 --> 21:36.680
你看

21:36.680 --> 21:37.680
Cookie的名称

21:37.680 --> 21:38.680
兼职对吗

21:38.680 --> 21:39.680
兼职

21:39.680 --> 21:40.680
它的浴

21:40.680 --> 21:41.680
它的路径

21:41.680 --> 21:42.680
PASS

21:42.680 --> 21:43.680
对不对

21:43.680 --> 21:44.680
为何发生

21:44.680 --> 21:45.680
为何发生相当于是Secure

21:45.680 --> 21:46.680
Secure它为FOR

21:46.680 --> 21:47.680
它没有设置的时候

21:47.680 --> 21:48.680
它就是各种连接

21:48.680 --> 21:49.680
就是任何连接

21:49.680 --> 21:50.680
任何请求我都可以发送

21:50.680 --> 21:51.680
如果说

21:51.680 --> 21:52.680
你设置了Secure

21:52.680 --> 21:53.680
那么就表示

21:53.680 --> 21:54.680
只有ATPS请求

21:54.680 --> 21:56.680
我才会发送这个Cookie

21:56.680 --> 21:57.680
创建时间

21:57.680 --> 21:58.680
什么时候创建的

21:58.680 --> 21:59.680
到期时间

21:59.680 --> 22:00.680
到期时间

22:00.680 --> 22:02.680
就是你设置过过期时间

22:02.680 --> 22:03.680
这个了解一下

22:03.680 --> 22:04.680
这是

22:05.680 --> 22:08.180
我再回到这

22:08.180 --> 22:11.820
再回到这边

22:11.820 --> 22:12.820
好

22:12.820 --> 22:13.820
那么我们知道

22:13.820 --> 22:14.820
它Cookie它设置的

22:14.820 --> 22:15.820
就是一个小印头

22:15.820 --> 22:16.820
里边给它加一个小印头

22:16.820 --> 22:17.820
Cookie

22:17.820 --> 22:18.820
然后给它一个值

22:18.820 --> 22:19.820
对不对

22:19.820 --> 22:20.820
那么Cookie的值

22:20.820 --> 22:21.820
它怎么来设置的

22:21.820 --> 22:22.820
就这里该怎么写

22:22.820 --> 22:23.820
它是这样子

22:23.820 --> 22:24.820
每一个Cookie

22:24.820 --> 22:25.820
它的格式是这样子

22:25.820 --> 22:26.820
键等于值

22:26.820 --> 22:27.820
好理解吧

22:27.820 --> 22:28.820
你不是说

22:28.820 --> 22:29.820
你要给它设置个键对吗

22:29.820 --> 22:30.820
对吧

22:30.820 --> 22:31.820
就是键值

22:31.820 --> 22:32.820
键值等于什么值

22:32.820 --> 22:33.820
那么后边就是Cookie的相关属性

22:33.820 --> 22:34.820
这些相关属性

22:34.820 --> 22:35.820
是可选的

22:35.820 --> 22:37.820
键值对是必填的

22:37.820 --> 22:38.820
必须要写的

22:38.820 --> 22:39.820
后边东西全是可选的

22:39.820 --> 22:40.820
你可以写

22:40.820 --> 22:41.820
可以不写

22:41.820 --> 22:42.820
我们再来看一下

22:42.820 --> 22:44.820
一个百度给我们的Cookie

22:44.820 --> 22:45.820
这里

22:45.820 --> 22:46.820
Cookie对吧

22:46.820 --> 22:47.820
键值对

22:47.820 --> 22:48.820
对不对

22:48.820 --> 22:49.820
后边是不是加了一个属性pass

22:49.820 --> 22:50.820
键值对

22:50.820 --> 22:51.820
是不是加了一个属性pass

22:51.820 --> 22:52.820
对不对

22:52.820 --> 22:54.820
后边这个键

22:54.820 --> 22:55.820
这也是个键对

22:55.820 --> 22:56.820
对吧

22:56.820 --> 22:57.820
H这个啥

22:57.820 --> 22:58.820
等于啥

22:58.820 --> 22:59.820
所以键值对

22:59.820 --> 23:00.820
后边加了一个pass

23:00.820 --> 23:01.820
加了一个图面

23:01.820 --> 23:02.820
对不对

23:02.820 --> 23:03.820
所以说

23:03.820 --> 23:04.820
后边的属性

23:04.820 --> 23:05.820
是可以设置可以不设置的

23:05.820 --> 23:06.820
它不设置有默认值的

23:06.820 --> 23:07.820
好

23:07.820 --> 23:08.820
咱们一个个看

23:08.820 --> 23:11.820
这个我再说一下

23:11.820 --> 23:13.820
如果说你设置的时候

23:13.820 --> 23:15.820
浏览器它已经有这个卡片了

23:15.820 --> 23:17.820
卡包中已经存在一个

23:17.820 --> 23:18.820
一模一样的卡片了

23:18.820 --> 23:20.820
那么会自动覆盖之前的

23:20.820 --> 23:21.820
一些设置

23:21.820 --> 23:23.820
什么叫一模一样的卡片呢

23:23.820 --> 23:24.820
就是key相同

23:24.820 --> 23:25.820
它键相同

23:25.820 --> 23:26.820
pass相同

23:26.820 --> 23:27.820
do main相同

23:27.820 --> 23:28.820
换句话说

23:28.820 --> 23:29.820
这三个东西

23:29.820 --> 23:30.820
任何一个不同

23:30.820 --> 23:31.820
它都属于不同的卡片

23:31.820 --> 23:32.820
不同的Cookie

23:32.820 --> 23:34.820
哪怕你的key值一样的

23:34.820 --> 23:35.820
但是pass不同

23:35.820 --> 23:36.820
do main不同

23:36.820 --> 23:37.820
它都不一样的

23:37.820 --> 23:38.820
这三个全部相同

23:38.820 --> 23:39.820
那么表示

23:39.820 --> 23:41.820
这个Cookie是同一个Cookie

23:41.820 --> 23:42.820
那么你可以

23:42.820 --> 23:43.820
你可以更改它的过期时间

23:43.820 --> 23:45.820
更改它的secure

23:45.820 --> 23:46.820
安全性

23:46.820 --> 23:47.820
更改它的值都可以的

23:47.820 --> 23:49.820
那么我们下面一试

23:49.820 --> 23:50.820
说明每个属性

23:50.820 --> 23:51.820
键值对不说了

23:51.820 --> 23:52.820
键值对很简单

23:52.820 --> 23:53.820
你随便设置就行了

23:53.820 --> 23:54.820
pass

23:54.820 --> 23:55.820
第一个属性

23:55.820 --> 23:56.820
pass

23:56.820 --> 23:57.820
这是Cookie的路径

23:57.820 --> 23:58.820
我们之前讲过

23:58.820 --> 23:59.820
如果说你不设置这个

23:59.820 --> 24:00.820
它的默认值是什么呢

24:00.820 --> 24:01.820
默认值是

24:01.820 --> 24:03.820
当前的请求路径

24:03.820 --> 24:05.820
就比方说我们请求的百度

24:05.820 --> 24:08.820
请求百度首页对不对

24:08.820 --> 24:09.820
那么如果说

24:09.820 --> 24:10.820
它这个地方

24:10.820 --> 24:11.820
没有给我写个pass等于写抗

24:11.820 --> 24:12.820
就相当于是

24:12.820 --> 24:13.820
我们当前的路径

24:13.820 --> 24:14.820
当前的路径

24:14.820 --> 24:15.820
是不是就是一个写抗

24:15.820 --> 24:16.820
对 就是个写

24:16.820 --> 24:17.820
我们再请求新闻

24:17.820 --> 24:19.820
再请求那个

24:19.820 --> 24:22.820
我们随便找个百度

24:22.820 --> 24:24.820
这还不好找

24:24.820 --> 24:25.820
还不好找

24:25.820 --> 24:26.820
然后说吧

24:26.820 --> 24:27.820
我们随便找一个

24:27.820 --> 24:29.820
独一课堂

24:29.820 --> 24:30.820
这个课程

24:30.820 --> 24:32.820
课程它也是主页

24:32.820 --> 24:33.820
老师

24:33.820 --> 24:34.820
也是主页

24:34.820 --> 24:35.820
关于我们也是主页

24:35.820 --> 24:37.820
然后我们点这个呢

24:37.820 --> 24:40.820
好 先我们看这个吧

24:40.820 --> 24:42.820
看服务器

24:42.820 --> 24:43.820
有没有给我发送Cookie

24:43.820 --> 24:45.820
现在正在上课

24:45.820 --> 24:48.820
这里我们刷新一次

24:48.820 --> 24:51.820
我们看那个请求的网页

24:51.820 --> 24:54.820
请求的网页

24:54.820 --> 24:56.820
请求它有没有

24:56.820 --> 24:58.820
别人听不了

24:58.820 --> 25:00.820
是这个吗

25:00.820 --> 25:01.820
web course

25:01.820 --> 25:02.820
不是

25:02.820 --> 25:04.820
我请求的是 course

25:04.820 --> 25:06.820
再刷新一次

25:06.820 --> 25:12.880
我把这个推掉

25:12.880 --> 25:14.880
刷新一次 再来

25:14.880 --> 25:16.880
请求的东西很多

25:16.880 --> 25:17.880
没关系

25:17.880 --> 25:18.880
你看 这是我们请求的地址

25:18.880 --> 25:20.880
你看我们请求的地址

25:20.880 --> 25:22.880
然后那个服务器看

25:22.880 --> 25:24.880
它没有给我发Cookie

25:24.880 --> 25:25.880
如果说它给我发了Cookie

25:25.880 --> 25:27.880
它没有给我设置Cookie的路径

25:27.880 --> 25:28.880
那么路径就是这个路径

25:28.880 --> 25:30.880
就是我请求的路径

25:30.880 --> 25:32.880
他跟请求是相关的

25:32.880 --> 25:33.880
我就是想说这一点

25:33.880 --> 25:34.880
他跟请求是相关的

25:34.880 --> 25:35.880
这里要我举个地址

25:35.880 --> 25:37.880
比方说你请求的地址

25:37.880 --> 25:38.880
因为你只有你请求

25:38.880 --> 25:40.880
才会有响应嘛

25:40.880 --> 25:42.880
对不对 你不是请求哪来的响应

25:42.880 --> 25:44.880
所以说你响应里边的Cookie

25:44.880 --> 25:45.880
响应到刘安琪

25:45.880 --> 25:47.880
刘安琪要保存到卡包里边

25:47.880 --> 25:48.880
如果说响应的结果里边

25:48.880 --> 25:49.880
他没有给你设置路径

25:49.880 --> 25:50.880
那么就是你请

25:50.880 --> 25:51.880
这一次请求的路径

25:51.880 --> 25:52.880
原来的意思吧

25:52.880 --> 25:53.880
好好去想一想

25:53.880 --> 25:54.880
刘安琪请求的地址

25:54.880 --> 25:55.880
是logging登录

25:55.880 --> 25:57.880
服务器响应的Cookie是L1

25:57.880 --> 25:58.880
是不是啥都没设置

25:58.880 --> 25:59.880
后面的东西啥都没写

25:59.880 --> 26:01.880
那么刘安琪会把

26:01.880 --> 26:02.880
保存Cookie的时候

26:02.880 --> 26:03.880
会把路径设置为

26:03.880 --> 26:05.880
请求的路径logging

26:05.880 --> 26:06.880
就这么个意思

26:06.880 --> 26:07.880
再pass

26:07.880 --> 26:09.880
好 下一个独媚狱

26:09.880 --> 26:11.880
韩译国都讲过了

26:11.880 --> 26:12.880
如果说你不设置的话

26:12.880 --> 26:13.880
那么他会作为

26:13.880 --> 26:14.880
当前的请求

26:14.880 --> 26:16.880
把当前的请求狱作为

26:16.880 --> 26:17.880
他的狱

26:17.880 --> 26:18.880
比方说你请求的地址

26:18.880 --> 26:19.880
是这个

26:19.880 --> 26:20.880
是这个地址

26:20.880 --> 26:21.880
那么服务器

26:21.880 --> 26:22.880
响应了一个SetsCookie

26:22.880 --> 26:23.880
A等E

26:23.880 --> 26:24.880
那么刘安琪

26:24.880 --> 26:25.880
会把Cookie独媚

26:25.880 --> 26:26.880
设置为这个

26:26.880 --> 26:27.880
就这么简单

26:27.880 --> 26:29.880
当然前条件是没有设置

26:29.880 --> 26:30.880
你能不能设置

26:30.880 --> 26:31.880
当然设置

26:31.880 --> 26:32.880
你设置的话

26:32.880 --> 26:33.880
他就按照你设置的为准

26:33.880 --> 26:34.880
但是你要注意

26:34.880 --> 26:35.880
预议这一块你要注意

26:35.880 --> 26:37.880
就是

26:37.880 --> 26:38.880
如果服务器

26:38.880 --> 26:39.880
响应了一个无效的预

26:39.880 --> 26:41.880
刘安琪是不认的

26:41.880 --> 26:42.880
什么叫无效的预

26:42.880 --> 26:44.880
就是响应的预

26:44.880 --> 26:46.880
连根预都不一样

26:46.880 --> 26:47.880
什么意思呢

26:47.880 --> 26:48.880
就是机预

26:48.880 --> 26:49.880
都不一样

26:49.880 --> 26:50.880
比方说

26:50.880 --> 26:51.880
刘安琪请求的预是这个预

26:51.880 --> 26:52.880
他请求的预名

26:52.880 --> 26:53.880
是这个预名

26:53.880 --> 26:54.880
那么服务器

26:54.880 --> 26:55.880
响应的Cookie

26:55.880 --> 26:56.880
他是这个预名

26:56.880 --> 26:57.880
你想一想

26:57.880 --> 26:59.880
刘安琪他怎么敢认这个东西

26:59.880 --> 27:00.880
他根预都不一样

27:00.880 --> 27:02.880
你猜怎么根预要一样

27:02.880 --> 27:03.880
根预都不一样

27:03.880 --> 27:04.880
他是不敢认的

27:04.880 --> 27:05.880
为什么不敢认的

27:05.880 --> 27:06.880
你想想这个道理

27:06.880 --> 27:07.880
如果说

27:07.880 --> 27:08.880
刘安琪他认了这个东西

27:08.880 --> 27:10.880
是不是我的服务器

27:10.880 --> 27:12.880
我可以响应一个Cookie

27:12.880 --> 27:13.880
这个Cookie会发动到

27:13.880 --> 27:14.880
其他服务器去

27:14.880 --> 27:15.880
别人的服务器去

27:15.880 --> 27:16.880
对不对

27:16.880 --> 27:18.880
你访问张山的服务器

27:18.880 --> 27:20.880
张山给了一个Cookie

27:20.880 --> 27:21.880
给发动到你是服务器去

27:21.880 --> 27:23.880
那这个很危险的

27:23.880 --> 27:25.880
所以不能去认这个东西

27:25.880 --> 27:28.880
所以说这个预质领导要注意一下

27:28.880 --> 27:29.880
就是他刘安琪

27:29.880 --> 27:30.880
你设置了个无效的预

27:30.880 --> 27:31.880
刘安琪是没有办法认的

27:31.880 --> 27:33.880
好 下面的两个是过期时间

27:33.880 --> 27:35.880
一个是绝对过期时间

27:35.880 --> 27:36.880
Expire

27:36.880 --> 27:38.880
就是直接设置个时间

27:38.880 --> 27:39.880
就是表示Cookie的过期时间

27:39.880 --> 27:43.880
他必须要是一个有效的GMT格式

27:43.880 --> 27:44.880
一个字五串

27:44.880 --> 27:46.880
表示一个GMT格式

27:46.880 --> 27:47.880
什么叫GMT

27:47.880 --> 27:48.880
就隔离为之

27:48.880 --> 27:49.880
隔离为之时间

27:49.880 --> 27:50.880
当然他的时间

27:50.880 --> 27:51.880
就是UTC时间

27:51.880 --> 27:52.880
比方说隔离为之时间

27:52.880 --> 27:55.880
是4月17号

27:55.880 --> 27:59.880
2020年9点35分59秒

27:59.880 --> 28:00.880
GMT

28:00.880 --> 28:01.880
这就是一个有效的

28:01.880 --> 28:02.880
标准的GMT时间

28:02.880 --> 28:03.880
日期格式

28:03.880 --> 28:05.880
表示的隔离为之时间是这个

28:05.880 --> 28:06.880
北极时间是不是加8个小时

28:06.880 --> 28:08.880
对吧 就是这个

28:08.880 --> 28:11.880
那么当客户端到达这个时间点之后

28:11.880 --> 28:12.880
还会自动的销毁这个Cookie

28:12.880 --> 28:13.880
就这么个意思

28:13.880 --> 28:14.880
Expire

28:14.880 --> 28:16.880
比方说把隔离为之的时间

28:16.880 --> 28:17.880
隔离为之的日期之后

28:17.880 --> 28:18.880
怎么弄出来了

28:18.880 --> 28:20.880
你可以用一个日期对象

28:20.880 --> 28:22.880
丢一个Date

28:22.880 --> 28:23.880
GMT

28:23.880 --> 28:24.880
对吧

28:24.880 --> 28:25.880
通过这个

28:25.880 --> 28:26.880
你看是不是得到一个

28:26.880 --> 28:28.880
当前的隔离为之时间

28:28.880 --> 28:29.880
对不对 就这么个意思

28:29.880 --> 28:31.880
这是Expire

28:31.880 --> 28:34.880
下面这个是相对过期时间

28:34.880 --> 28:35.880
叫MaxAge

28:35.880 --> 28:36.880
它是什么呢

28:36.880 --> 28:37.880
它是设置这个Cookie

28:37.880 --> 28:41.880
在多少秒钟之后过期

28:41.880 --> 28:42.880
那么你如果说

28:42.880 --> 28:43.880
设置的是这个东西

28:43.880 --> 28:44.880
这两个东西

28:44.880 --> 28:45.880
设置一个就行了

28:45.880 --> 28:46.880
你如果说设置的是MaxAge

28:46.880 --> 28:48.880
你就不要去设置Expire了

28:48.880 --> 28:50.880
那么你设置MaxAge的时候

28:50.880 --> 28:51.880
你暂时在添加这个Cookie的时候

28:51.880 --> 28:53.880
它会自动换算

28:53.880 --> 28:54.880
它会把当前的时间

28:54.880 --> 28:55.880
加上1000秒

28:55.880 --> 28:57.880
得到一个隔离为之时间

28:57.880 --> 28:59.880
然后把它放到Cookie里面去

28:59.880 --> 29:00.880
作为过期时间

29:00.880 --> 29:02.880
就这么个意思

29:02.880 --> 29:03.880
如果说你设置

29:03.880 --> 29:05.880
你既没有设置它

29:05.880 --> 29:06.880
又没有设置它

29:06.880 --> 29:07.880
那么说明了

29:07.880 --> 29:08.880
你这个Cookie

29:08.880 --> 29:10.880
是汇化结束后过期

29:10.880 --> 29:11.880
刚才看到百度里面

29:11.880 --> 29:14.880
是不是一个汇化结束后过期

29:14.880 --> 29:17.770
百度里面

29:17.770 --> 29:18.770
你看

29:18.770 --> 29:21.770
应该有汇化结束后过期

29:21.770 --> 29:23.770
这里不是

29:23.770 --> 29:25.770
汇化结束时

29:25.770 --> 29:26.770
到期时间

29:26.770 --> 29:27.770
什么叫汇化结束时

29:27.770 --> 29:29.770
对于大部分浏览器而言

29:29.770 --> 29:30.770
不同的浏览器

29:30.770 --> 29:31.770
还有不同的处理方式

29:31.770 --> 29:33.770
但是绝大部分浏览器的处理方式

29:33.770 --> 29:35.770
是你把窗口关完了

29:35.770 --> 29:36.770
浏览器关完了

29:36.770 --> 29:37.770
它就过期了

29:37.770 --> 29:38.770
就是汇化结束了

29:38.770 --> 29:39.770
是这么个意思

29:39.770 --> 29:40.770
你不管那个浏览器

29:40.770 --> 29:41.770
它就一直在

29:41.770 --> 29:42.770
所以说有的时候

29:42.770 --> 29:43.770
你看一些安全性

29:43.770 --> 29:45.770
要求比较高的网站

29:45.770 --> 29:46.770
你只要关了浏览器

29:46.770 --> 29:48.770
你下一次又得重新登录了

29:48.770 --> 29:49.770
所以这个意思

29:49.770 --> 29:51.770
叫汇化结束后过期

29:51.770 --> 29:53.770
这是Max Age

29:53.770 --> 29:55.770
这两个日期过期时间的设置

29:55.770 --> 29:58.770
然后Secure表示安全性

29:58.770 --> 29:59.770
如果说你设置了

29:59.770 --> 30:00.770
这个东西过分了

30:00.770 --> 30:01.770
就表示了

30:01.770 --> 30:03.770
Cookie是否安全

30:03.770 --> 30:04.770
如果说设置了这个纸的话

30:04.770 --> 30:05.770
那么Cookie

30:05.770 --> 30:08.770
后续只能是ATP-S琴球

30:08.770 --> 30:09.770
它会发送

30:09.770 --> 30:10.770
如果不设置的话

30:10.770 --> 30:11.770
会任何琴球发送

30:11.770 --> 30:15.340
你看我们这里的Cookie

30:15.340 --> 30:17.340
应该都是没有设置Secure的

30:17.340 --> 30:18.340
对吧

30:18.340 --> 30:22.860
应该都是没有设置

30:22.860 --> 30:23.860
为何发送

30:23.860 --> 30:24.860
各种连接

30:24.860 --> 30:25.860
各种连接就是没有设置Secure

30:25.860 --> 30:27.860
好 这是关于这个

30:27.860 --> 30:28.860
下面一个ATP only

30:28.860 --> 30:30.860
这个是服务器响应的时候特有的

30:30.860 --> 30:31.860
就是说这个Cookie

30:31.860 --> 30:33.860
是服务器给力的

30:33.860 --> 30:35.860
那么你允不允许

30:35.860 --> 30:37.860
GS来读取

30:37.860 --> 30:38.860
就是允不允许以后

30:38.860 --> 30:40.860
客户端来读取它

30:40.860 --> 30:42.860
如果说你把它设为处的话

30:42.860 --> 30:43.860
就表示Cookie

30:43.860 --> 30:45.860
只能在ATP协议

30:45.860 --> 30:46.860
传输的过程中

30:46.860 --> 30:47.860
才会出现

30:47.860 --> 30:49.860
你GS里边是绝对不能

30:49.860 --> 30:50.860
获取它的

30:50.860 --> 30:51.860
你获取不到的

30:51.860 --> 30:52.860
这是为了防止什么呢

30:52.860 --> 30:54.860
防止夸占脚本攻击

30:54.860 --> 30:55.860
夸占脚本攻击是

30:55.860 --> 30:57.860
纯粹的 后端安全性的

30:57.860 --> 30:59.860
就是服务器安全的内容

30:59.860 --> 31:00.860
那么这个东西

31:00.860 --> 31:01.860
给大家讲一下

31:01.860 --> 31:02.860
大概是怎么回事

31:02.860 --> 31:03.860
大概就这样子

31:03.860 --> 31:04.860
就是你这个网站里边

31:04.860 --> 31:05.860
可能使用了ifrin

31:05.860 --> 31:06.860
对吧

31:06.860 --> 31:10.690
所以学到一个ifrin

31:10.690 --> 31:11.690
ifrin

31:11.690 --> 31:15.900
这个机遇也叫做根据

31:15.900 --> 31:17.900
是不是可能会念变到

31:17.900 --> 31:18.900
其他网页

31:18.900 --> 31:19.900
然后你这个网站

31:19.900 --> 31:21.900
你这个网站是

31:21.900 --> 31:23.900
元进.tech

31:23.900 --> 31:24.900
ifrin

31:24.900 --> 31:25.900
连接到哪呢

31:25.900 --> 31:26.900
连接到的就是

31:26.900 --> 31:28.900
这里边的一个src

31:28.900 --> 31:30.900
连接到的是比方说

31:30.900 --> 31:34.900
doe.qq.c

31:34.900 --> 31:36.900
它连接到这个

31:36.900 --> 31:37.900
那么这个网页里边

31:37.900 --> 31:39.900
它是不是加到

31:39.900 --> 31:40.900
我的网页里边来了

31:40.900 --> 31:41.900
我的网站里边

31:41.900 --> 31:42.900
是不是可能会有Cookie

31:42.900 --> 31:44.900
那么这个网站里边

31:44.900 --> 31:45.900
如果说

31:45.900 --> 31:46.900
它这个网页里边

31:46.900 --> 31:47.900
写了一段介绍

31:47.900 --> 31:48.900
是不是它写的

31:48.900 --> 31:49.900
这是它写的

31:49.900 --> 31:50.900
对吧

31:50.900 --> 31:51.900
那么它这个网页里边

31:51.900 --> 31:53.900
它就有可能

31:53.900 --> 31:55.900
通过某一些手段

31:55.900 --> 31:57.900
能够通过介绍

31:57.900 --> 31:58.900
读取到它的副页面

31:58.900 --> 31:59.900
就这个页面

31:59.900 --> 32:01.900
它里边的Cookie

32:01.900 --> 32:02.900
是把我们的Cookie获取到了

32:02.900 --> 32:03.900
对吧

32:03.900 --> 32:04.900
这叫夸占脚奔攻击

32:04.900 --> 32:06.900
那么这个地方

32:06.900 --> 32:07.900
所以说

32:07.900 --> 32:08.900
我们如果说

32:08.900 --> 32:10.900
为了安全的话

32:10.900 --> 32:11.900
如果说为了安全的话

32:11.900 --> 32:12.900
我们可以把它

32:12.900 --> 32:13.900
设置为atv only

32:13.900 --> 32:14.900
那么设置到

32:14.900 --> 32:15.900
这个东西过后

32:15.900 --> 32:16.900
你介绍获取不到了

32:16.900 --> 32:17.900
你获取不到了

32:17.900 --> 32:19.900
什么个意思

32:19.900 --> 32:20.900
那么这是

32:20.900 --> 32:22.900
关于这个属性

32:22.900 --> 32:24.900
下面来个例子

32:24.900 --> 32:25.900
比方说

32:25.900 --> 32:26.900
客户端通过

32:26.900 --> 32:27.900
抛射请求服务器

32:27.900 --> 32:28.900
这个locking例子

32:28.900 --> 32:29.900
就用了灯路

32:29.900 --> 32:30.900
然后在消息题里边

32:30.900 --> 32:31.900
给了账号密码

32:31.900 --> 32:32.900
对吧

32:32.900 --> 32:33.900
密码账号给它

32:33.900 --> 32:34.900
服务器就验证

32:34.900 --> 32:35.900
灯路是不是成功

32:35.900 --> 32:36.900
成功过后

32:36.900 --> 32:37.900
在享用头里边

32:37.900 --> 32:38.900
是不是加入这个

32:38.900 --> 32:39.900
Cookie

32:39.900 --> 32:40.900
那么这个Cookie

32:40.900 --> 32:41.900
相当于是

32:41.900 --> 32:42.900
前面这个

32:42.900 --> 32:43.900
给它个出入字

32:43.900 --> 32:44.900
就是通过这么模式给的

32:45.900 --> 32:46.900
这里

32:46.900 --> 32:47.900
Cookie

32:47.900 --> 32:48.900
然后给它一个token

32:48.900 --> 32:49.900
123456

32:49.900 --> 32:50.900
这个token就表示另一排

32:50.900 --> 32:51.900
对吧

32:51.900 --> 32:52.900
另一排有很多种格式

32:52.900 --> 32:53.900
我这里先随便瞎写一种

32:53.900 --> 32:54.900
然后Path

32:54.900 --> 32:55.900
就是一个

32:55.900 --> 32:56.900
MaxAge

32:56.900 --> 32:57.900
这个atv only

32:57.900 --> 32:58.900
完了

32:58.900 --> 32:59.900
好

32:59.900 --> 33:00.900
那么客户端这边

33:00.900 --> 33:01.900
拿了个cookie之后

33:01.900 --> 33:02.900
它会变成一个

33:02.900 --> 33:03.900
什么样的cookie呢

33:03.900 --> 33:04.900
首先剑

33:04.900 --> 33:05.900
是不是token

33:05.900 --> 33:06.900
纸

33:06.900 --> 33:07.900
是不是123456

33:07.900 --> 33:08.900
对吧

33:08.900 --> 33:09.900
对面是不是没写

33:09.900 --> 33:10.900
没写该怎么办

33:10.900 --> 33:11.900
是不是看请求

33:11.900 --> 33:12.900
看这里是请求的

33:12.900 --> 33:13.900
这个东西

33:13.900 --> 33:14.900
对不对

33:14.900 --> 33:15.900
然后Path

33:15.900 --> 33:16.900
Path这里写了

33:16.900 --> 33:17.900
OK

33:17.900 --> 33:18.900
那么按照它写的

33:18.900 --> 33:19.900
它就不是mogging的

33:19.900 --> 33:20.900
按照它写的

33:20.900 --> 33:21.900
Expire过期时间

33:21.900 --> 33:22.900
过期时间Expire

33:22.900 --> 33:23.900
它没有设置

33:23.900 --> 33:24.900
但它设置的MaxAge

33:24.900 --> 33:25.900
3600秒

33:25.900 --> 33:26.900
是不是一个小时

33:26.900 --> 33:27.900
一个小时后过期

33:27.900 --> 33:29.900
那么假设当前时间

33:29.900 --> 33:31.900
是2020年4月17号

33:31.900 --> 33:33.900
下午5点钟

33:33.900 --> 33:34.900
那么它过期时间

33:34.900 --> 33:35.900
就变成6点钟

33:35.900 --> 33:36.900
加一个小时

33:36.900 --> 33:37.900
就这么个意思

33:37.900 --> 33:38.900
如果说你没有设置过期时间

33:38.900 --> 33:39.900
它就汇化结束和过期

33:39.900 --> 33:40.900
Secure

33:40.900 --> 33:41.900
没有写

33:41.900 --> 33:42.900
没有

33:42.900 --> 33:43.900
就是任何请求都可以

33:43.900 --> 33:44.900
附带一个Cookie

33:44.900 --> 33:45.900
ATV only

33:45.900 --> 33:46.900
你写的

33:46.900 --> 33:47.900
OK

33:47.900 --> 33:48.900
那么JS是不能获取这个Cookie的

33:48.900 --> 33:49.900
就这么个意思

33:49.900 --> 33:51.900
那么有了这个Cookie之后

33:51.900 --> 33:53.900
浏览器对这个服务器的后续请求

33:53.900 --> 33:54.900
只要满足要求

33:54.900 --> 33:55.900
那么这个Cookie

33:55.900 --> 33:56.900
会被附带到请求头中

33:56.900 --> 33:57.900
传给服务器

33:57.900 --> 33:59.900
传给服务器的就是这个

33:59.900 --> 34:01.900
Token等于123456

34:01.900 --> 34:02.900
然后其他的东西

34:02.900 --> 34:03.900
其他的Cookie

34:03.900 --> 34:04.900
传过去

34:05.900 --> 34:06.900
这是就是设置Cookie

34:06.900 --> 34:08.900
那么如何来删除一个Cookie呢

34:08.900 --> 34:10.900
删除会其实也很简单

34:10.900 --> 34:11.900
删除Cookie

34:11.900 --> 34:12.900
它没有提供什么

34:12.900 --> 34:13.900
删除Cookie的一些响应头

34:13.900 --> 34:15.900
就是设置Cookie

34:15.900 --> 34:16.900
删除Cookie就是设置Cookie

34:16.900 --> 34:18.900
只不过马麦克斯AG

34:18.900 --> 34:20.900
把过期时间

34:20.900 --> 34:21.900
设置为当前时间

34:21.900 --> 34:23.900
或者是设置为过

34:23.900 --> 34:24.900
过去的时间

34:24.900 --> 34:26.900
没有这意思吧

34:26.900 --> 34:27.900
好那么设置过后

34:27.900 --> 34:28.900
浏览器发现

34:28.900 --> 34:29.900
这个Cookie过期了

34:29.900 --> 34:31.900
那么下一次请求了

34:31.900 --> 34:32.900
它就不会附带到Cookie的

34:32.900 --> 34:33.900
对吧

34:33.900 --> 34:34.900
因为它过期了

34:34.900 --> 34:35.900
而下一次请求的时候

34:35.900 --> 34:36.900
浏览器发现

34:36.900 --> 34:37.900
这个Cookie已经过期了

34:37.900 --> 34:39.900
那我就把删了

34:39.900 --> 34:40.900
对吧

34:40.900 --> 34:41.900
就是这么个意思

34:42.900 --> 34:43.900
这是

34:43.900 --> 34:44.900
这个

34:44.900 --> 34:45.900
那么无论是修改还是删除

34:45.900 --> 34:46.900
还是要注意一下

34:46.900 --> 34:47.900
Cookie的域和路径

34:47.900 --> 34:48.900
就是三个东西

34:48.900 --> 34:49.900
一个是T

34:49.900 --> 34:50.900
一个是域

34:50.900 --> 34:51.900
一个是路径

34:51.900 --> 34:52.900
这三个东西

34:52.900 --> 34:53.900
必须要完全相同

34:53.900 --> 34:54.900
才是同一个Cookie

34:54.900 --> 34:56.900
因为完全有可能会存在

34:56.900 --> 34:57.900
域和路径

34:57.900 --> 34:58.900
不同

34:58.900 --> 35:00.900
但是T相同的Cookie

35:00.900 --> 35:01.900
所以说

35:01.900 --> 35:02.900
你要删除的时候

35:02.900 --> 35:03.900
要注意一下

35:03.900 --> 35:04.900
修改的时候也要注意一下

35:04.900 --> 35:05.900
这是浮系设置Cookie

35:05.900 --> 35:06.900
那么刻骨端

35:06.900 --> 35:08.900
这边设置Cookie是一样的

35:08.900 --> 35:10.900
我们先把浮系设置Cookie的

35:10.900 --> 35:11.900
我举一个小例子吧

35:11.900 --> 35:12.900
我们在这里写一张带

35:12.900 --> 35:13.900
举个小例子

35:14.900 --> 35:16.900
比方说我们在耳鸣里边

35:17.900 --> 35:18.900
这个我们之前没写的吧

35:18.900 --> 35:19.900
实际上我上一课已经讲了

35:19.900 --> 35:20.900
然后发现没有声音

35:20.900 --> 35:22.900
我现在又得把山上重新讲一遍

35:23.900 --> 35:25.900
这里我们把这个声音加上

35:25.900 --> 35:27.900
我们开启一个就是

35:27.900 --> 35:28.900
API耳鸣

35:28.900 --> 35:29.900
用一个路由

35:29.900 --> 35:31.900
我们现在去写一个登录接口

35:31.900 --> 35:33.900
我们把这个复制一下吧

35:34.900 --> 35:35.900
再加过来

35:35.900 --> 35:37.900
把有些接口就去掉了

35:43.470 --> 35:45.470
比方说我们这里就是

35:45.470 --> 35:47.470
把这个Service导进来

35:47.470 --> 35:48.470
耳鸣Service

35:49.470 --> 35:50.470
耳鸣Service

35:51.470 --> 35:53.470
下边这个地方

35:53.470 --> 35:54.470
给大家缺点重新写

35:55.470 --> 35:56.470
来吧我们登录

35:56.470 --> 35:58.470
登录肯定是一个Pose请求

35:58.470 --> 36:00.470
你要在消息体里边

36:00.470 --> 36:01.470
传递账号和密码

36:01.470 --> 36:02.470
对不对

36:02.470 --> 36:04.470
好那么这里我们看一下

36:04.470 --> 36:05.470
耳鸣Service

36:05.470 --> 36:06.470
我们就来一个Docking登录

36:06.470 --> 36:07.470
要传一个账号和密码

36:07.470 --> 36:08.470
那么账号密码通过消息体

36:08.470 --> 36:09.470
再传进来

36:09.470 --> 36:10.470
就是Rake掉Body

36:10.470 --> 36:11.470
我们通过Body里面取出Docking

36:11.470 --> 36:12.470
ID

36:13.470 --> 36:15.470
然后通过Body取出Locking

36:15.470 --> 36:16.470
Password

36:17.470 --> 36:18.470
这个要约定好

36:18.470 --> 36:19.470
约定你的Body的格式

36:19.470 --> 36:20.470
要和传这两个东西进来

36:20.470 --> 36:21.470
好然后来登录

36:21.470 --> 36:22.470
登录这个意不得

36:22.470 --> 36:23.470
我等待一下

36:23.470 --> 36:24.470
登录完了过后

36:24.470 --> 36:25.470
是不是拿到一个Result

36:26.470 --> 36:27.470
拿到一个登录结果

36:27.470 --> 36:28.470
我们当时是怎么写的

36:28.470 --> 36:29.470
如果登录成功

36:29.470 --> 36:30.470
是不是给我一个拥护

36:30.470 --> 36:31.470
登录失败是不是给我一个NOW

36:31.470 --> 36:32.470
对不对

36:32.470 --> 36:33.470
那么我现在呢

36:33.470 --> 36:34.470
就直接把这个Result返回

36:35.470 --> 36:36.470
直接把这个Result返回

36:36.470 --> 36:37.470
好我们这个接口就写好了

36:37.470 --> 36:39.470
接下来我们把运行出来

36:40.470 --> 36:41.470
NPM Start

36:43.910 --> 36:44.910
运行出来

36:44.910 --> 36:46.910
我们在哪里玩呢

36:46.910 --> 36:47.910
在Postman里边吧

36:47.910 --> 36:48.910
我们来看一下Postman

36:48.910 --> 36:49.910
我上去很有写的

36:49.910 --> 36:50.910
一个登录结果

36:50.910 --> 36:51.910
我们就访问这个地址

36:51.910 --> 36:53.910
APN-2DM Login

36:53.910 --> 36:54.910
然后到Body里边

36:55.910 --> 36:56.910
LoginID加传过去

36:56.910 --> 36:58.910
LoginPassword加传过去

36:58.910 --> 36:59.910
接下来咱们看一下

36:59.910 --> 37:00.910
先看一下登录失败的

37:05.480 --> 37:06.480
CannotsPost

37:09.480 --> 37:10.480
Post

37:11.480 --> 37:13.480
这里路径是Login

37:13.480 --> 37:16.480
就在这个APN-G路径下面的Login

37:17.480 --> 37:19.480
你看我这些APN-2DM Login

37:19.480 --> 37:20.480
真的发送

37:20.480 --> 37:21.480
你看登录失败对不对

37:21.480 --> 37:22.480
是不是登录失败

37:22.480 --> 37:24.480
好咱们来个登录成功的

37:24.480 --> 37:25.480
123123

37:25.480 --> 37:26.480
登录成功

37:26.480 --> 37:28.480
还把用户信息给我了

37:28.480 --> 37:29.480
用户信息没啥信息

37:29.480 --> 37:31.480
当然这里边可能会有其他信息

37:31.480 --> 37:32.480
比如用户的新名

37:32.480 --> 37:34.480
还有年龄这些信息

37:34.480 --> 37:35.480
信息是不是给我了

37:35.480 --> 37:36.480
表示登录成功

37:37.480 --> 37:38.480
那么现在是不是

37:38.480 --> 37:39.480
最早的这种模式

37:39.480 --> 37:40.480
就这个模式

37:40.480 --> 37:41.480
看一下

37:41.480 --> 37:42.480
是不是这个模式

37:42.480 --> 37:43.480
登录成功

37:43.480 --> 37:44.480
他没有给他令牌对不对

37:44.480 --> 37:46.480
好那么现在我们把令牌给他

37:46.480 --> 37:47.480
怎么给

37:47.480 --> 37:48.480
我们就在这里写

37:48.480 --> 37:50.480
看一下你有没有登录成功

37:50.480 --> 37:51.480
如果说Retouch有值

37:51.480 --> 37:52.480
是不是登录成功了

37:53.480 --> 37:54.480
登录成功

37:54.480 --> 37:55.480
是不是成功了

37:55.480 --> 37:56.480
好成功了怎么办

37:57.480 --> 37:58.480
怎么办呢

37:58.480 --> 37:59.480
我们就Race

37:59.480 --> 38:00.480
Header

38:00.480 --> 38:01.480
设置消息头

38:01.480 --> 38:02.480
消息头是什么呢

38:02.480 --> 38:03.480
SetCoke

38:04.480 --> 38:05.480
对吧

38:05.480 --> 38:06.480
值是什么呢

38:06.480 --> 38:08.480
值我们一个模办字乎串吧

38:08.480 --> 38:09.480
键字对

38:09.480 --> 38:11.480
Token等于

38:11.480 --> 38:12.480
我们这个Token

38:12.480 --> 38:13.480
我们可以用别的名字

38:13.480 --> 38:14.480
我们就用Token吧

38:15.480 --> 38:17.480
表示给他一个就是令牌

38:17.480 --> 38:19.480
表示给他一个令牌

38:19.480 --> 38:21.480
令牌我们就直接用一个

38:22.480 --> 38:23.480
用户的ID

38:23.480 --> 38:24.480
我们简单一点

38:24.480 --> 38:25.480
用户的ID

38:29.480 --> 38:31.480
就是result

38:31.480 --> 38:32.480
用户的ID

38:32.480 --> 38:33.480
对不对给他

38:33.480 --> 38:35.480
然后给他设置一下PASS吧

38:35.480 --> 38:36.480
PASS我们设置

38:37.480 --> 38:38.480
设置成这个

38:38.480 --> 38:40.480
然后我们再给他设置一下读妹

38:40.480 --> 38:41.480
这些东西都可以设置

38:41.480 --> 38:42.480
可以不设置

38:42.480 --> 38:43.480
读妹就Nocals

38:43.480 --> 38:44.480
我们写一下吧

38:45.480 --> 38:46.480
然后Secure

38:46.480 --> 38:47.480
Secure我就不设置了

38:47.480 --> 38:49.480
因为我现在本身都不是ATPS

38:49.480 --> 38:50.480
本身要是ATPS

38:50.480 --> 38:51.480
对不对

38:51.480 --> 38:52.480
还MaxAge

38:53.480 --> 38:54.480
我们设置一下

38:54.480 --> 38:55.480
一个小时后过去吧

38:56.480 --> 38:57.480
还有什么ATP only

38:57.480 --> 38:59.480
我们先暂时不设置

38:59.480 --> 39:00.480
就这样

39:00.480 --> 39:01.480
我们给他加上一个小印头

39:01.480 --> 39:02.480
接下来我们来看一下POSTMAN

39:02.480 --> 39:03.480
POSTMAN

39:03.480 --> 39:05.480
它实际上是个模拟流烂器

39:05.480 --> 39:07.480
它实际上是个模拟流烂器

39:07.480 --> 39:08.480
所以说它也会

39:08.480 --> 39:09.480
虽然说它只是一个

39:09.480 --> 39:11.480
普通的ACP请求而已

39:11.480 --> 39:13.480
但是它会模拟流烂器

39:13.480 --> 39:14.480
保存Cookie

39:14.480 --> 39:15.480
好,咱们来试一下

39:15.480 --> 39:16.480
发送请求

39:17.480 --> 39:18.480
你看,结果是一样的

39:18.480 --> 39:19.480
消息体都结果是一样的

39:19.480 --> 39:20.480
但是消息头裏

39:20.480 --> 39:22.480
请求的享用头裏

39:22.480 --> 39:24.480
是不是多了一个SetCookie

39:24.480 --> 39:25.480
对不对

39:25.480 --> 39:26.480
SetCookie里面

39:26.480 --> 39:27.480
是不是我们写的值

39:27.480 --> 39:28.480
对不对

39:28.480 --> 39:29.480
对不对

39:29.480 --> 39:30.480
所以他一看这个Cookie

39:30.480 --> 39:32.480
是不是给你发了一个Cookie过来

39:32.480 --> 39:33.480
他这个就是

39:33.480 --> 39:34.480
这个东西

39:34.480 --> 39:35.480
POSTMAN里面给你

39:35.480 --> 39:36.480
友好的做一个界面

39:36.480 --> 39:37.480
他告诉你

39:37.480 --> 39:38.480
这里给服务器

39:38.480 --> 39:39.480
给你发了一个Cookie

39:39.480 --> 39:40.480
Poken只是6

39:40.480 --> 39:42.480
Dumay Pass Expire

39:42.480 --> 39:43.480
对不对

39:43.480 --> 39:44.480
Expire是不是

39:44.480 --> 39:45.480
GNMT时间

39:45.480 --> 39:46.480
GNMT时间

39:46.480 --> 39:47.480
GNMT时间

39:47.480 --> 39:48.480
是这个时间

39:48.480 --> 39:49.480
加8,是不是

39:49.480 --> 39:50.480
多少

39:50.480 --> 39:51.480
7加8都会多少

39:51.480 --> 39:52.480
15

39:52.480 --> 39:53.480
目前是14点

39:53.480 --> 39:54.480
它是15点

39:54.480 --> 39:55.480
一个小时过后

39:55.480 --> 39:56.480
ATP Only Force

39:56.480 --> 39:57.480
Secure Force

39:57.480 --> 39:58.480
对不对

39:58.480 --> 39:59.480
好,那么我们来看一下

39:59.480 --> 40:00.480
它保存下过后

40:00.480 --> 40:01.480
我们去看一下

40:01.480 --> 40:02.480
请求其他的

40:02.480 --> 40:03.480
我们去分业获取学生

40:04.480 --> 40:05.480
请求其他的

40:05.480 --> 40:07.480
看POSTMAN会不会

40:07.480 --> 40:08.480
把Cookie给他发过去

40:08.480 --> 40:09.480
其他的

40:09.480 --> 40:10.480
他是在模拟榴弹期

40:10.480 --> 40:11.480
这种场景

40:11.480 --> 40:12.480
实际上POSTMAN

40:12.480 --> 40:13.480
还可以设置

40:13.480 --> 40:14.480
不发动Cookie

40:14.480 --> 40:15.480
但榴弹期还会自动发的

40:15.480 --> 40:16.480
咱们深等

40:16.480 --> 40:17.480
看得到学生的这些东西

40:17.480 --> 40:18.480
你看

40:18.480 --> 40:20.480
我们的消息头里边

40:20.480 --> 40:21.480
就自动把Cookie发过去了

40:21.480 --> 40:22.480
Token等于6

40:22.480 --> 40:23.480
对不对

40:23.480 --> 40:24.480
那么后续的请求

40:24.480 --> 40:25.480
是不是可以通过

40:25.480 --> 40:26.480
请求对象读到这个Cookie

40:26.480 --> 40:27.480
他就知道了

40:27.480 --> 40:29.480
原来我之前登录过了

40:29.480 --> 40:30.480
登录的ID16

40:30.480 --> 40:32.480
是不是可以记录下来了

40:32.480 --> 40:33.480
就这么个意思

40:34.480 --> 40:35.480
那么这就是服务器

40:35.480 --> 40:36.480
去设置Cookie

40:36.480 --> 40:37.480
我们下期可以来

40:37.480 --> 40:38.480
做一个完整的案例

40:38.480 --> 40:39.480
我们这里先讲原理

40:40.480 --> 40:42.480
这是咱们Cookie的设置

40:44.480 --> 40:45.480
好 今天我们再来看

40:45.480 --> 40:46.480
如果说你在页面上说的话

40:46.480 --> 40:47.480
也是一样的

40:48.480 --> 40:49.480
也是一样的

40:49.480 --> 40:50.480
比方说我们这里写一个

40:50.480 --> 40:51.480
写个Foom

40:51.480 --> 40:52.480
Foom表达

40:52.480 --> 40:53.480
X就是提交

40:53.480 --> 40:55.480
下面这里有两个按钮

40:55.480 --> 40:56.480
两个文闷框

40:56.480 --> 40:57.480
一个是账号

40:59.480 --> 41:00.480
这个是账号

41:00.480 --> 41:02.480
Name等于LoginID

41:03.480 --> 41:04.480
一个是密码

41:06.920 --> 41:07.920
Name等于LoginPassword

41:08.920 --> 41:09.920
我现在就不用阿加克斯

41:09.920 --> 41:11.920
我就直接弄个Foom表达

41:11.920 --> 41:12.920
提交

41:12.920 --> 41:13.920
就用非常传统的方式

41:13.920 --> 41:14.920
登录

41:16.920 --> 41:17.920
那么这里边

41:18.920 --> 41:19.920
写上X

41:19.920 --> 41:20.920
我们提交的地址

41:20.920 --> 41:21.920
提交的地址是什么

41:21.920 --> 41:22.920
API

41:24.920 --> 41:25.920
Login

41:25.920 --> 41:26.920
我们提交到这个地址

41:27.920 --> 41:29.920
然后我们再来

41:30.920 --> 41:31.920
Message

41:31.920 --> 41:32.920
请求的方式Post

41:33.920 --> 41:34.920
好 今天我们保存一下

41:34.920 --> 41:35.920
到留言器里面看一下

41:36.920 --> 41:37.920
NercoHouse 5008

41:37.920 --> 41:38.920
你看 是不是账号密码

41:38.920 --> 41:39.920
对不对

41:39.920 --> 41:40.920
检查

41:46.750 --> 41:47.750
检查 我们在这里

41:47.750 --> 41:48.750
ABC

41:48.750 --> 41:49.750
123

41:49.750 --> 41:50.750
123

41:50.750 --> 41:51.750
登录

41:51.750 --> 41:52.750
是不是成功了

41:52.750 --> 41:53.750
登录到这个地址去了

41:53.750 --> 41:54.750
那么是不是成功了

41:54.750 --> 41:55.750
好 成功

41:55.750 --> 41:56.750
我们看一下这个请求

41:57.750 --> 41:58.750
这里已经把之前的

41:58.750 --> 41:59.750
因为它刷新的页面

41:59.750 --> 42:01.750
因为这是用传统的方式

42:01.750 --> 42:02.750
表达提交

42:02.750 --> 42:03.750
它刷新的页面

42:03.750 --> 42:04.750
导致这个

42:04.750 --> 42:05.750
这个地方没有监控到了

42:05.750 --> 42:06.750
我们把这个

42:06.750 --> 42:07.750
这个勾上

42:07.750 --> 42:08.750
Presor

42:08.750 --> 42:09.750
Log

42:09.750 --> 42:10.750
好 在重新登录

42:10.750 --> 42:11.750
登录

42:11.750 --> 42:12.750
你看

42:12.750 --> 42:13.750
现在Login这里

42:13.750 --> 42:14.750
它给你响应的结果

42:15.750 --> 42:16.750
响应的结果里边

42:18.750 --> 42:19.750
Login

42:20.750 --> 42:21.750
在这里

42:21.750 --> 42:23.750
你看 响应的结果里边

42:23.750 --> 42:24.750
是Cookie 对吧

42:24.750 --> 42:25.750
是不是把Cookie给设置过来了

42:25.750 --> 42:26.750
对不对

42:26.750 --> 42:27.750
好 设置过来

42:27.750 --> 42:28.750
我们留言器里边

42:28.750 --> 42:29.750
就保存到Cookie了

42:29.750 --> 42:32.450
你看一下

42:32.450 --> 42:33.450
所以Token保存一下

42:33.450 --> 42:34.450
Token6

42:34.450 --> 42:35.450
对不对

42:35.450 --> 42:36.450
是保存下来的

42:36.450 --> 42:37.450
你看过去的时间

42:37.450 --> 42:38.450
对吧

42:38.450 --> 42:39.450
好

42:39.450 --> 42:40.450
那么这个地方

42:40.450 --> 42:41.450
保存下来过后

42:41.450 --> 42:42.450
我们再来看后续的请求

42:42.450 --> 42:43.450
我们去请求别的东西

42:43.450 --> 42:44.450
比方说我们去请求

42:44.450 --> 42:47.450
API Student

42:47.450 --> 42:48.450
好 去请求它

42:48.450 --> 42:49.450
我们看一下

42:49.450 --> 42:50.450
Students这里是请求

42:50.450 --> 42:51.450
Request Header

42:51.450 --> 42:52.450
是不是把Cookie给它

42:52.450 --> 42:53.450
复带过去了

42:53.450 --> 42:54.450
看没有

42:54.450 --> 42:55.450
跟Postman是不是一样的

42:55.450 --> 42:56.450
Postman其实就是在

42:56.450 --> 42:57.450
模拟容量器的那种模式

42:57.450 --> 42:58.450
对吧

42:58.450 --> 42:59.450
复带过去了

42:59.450 --> 43:00.450
就这么一个意思

43:00.450 --> 43:01.450
当然我这里

43:01.450 --> 43:02.450
只有一个Cookie

43:02.450 --> 43:03.450
当你请求任何东西

43:03.450 --> 43:04.450
你再去请求

43:04.450 --> 43:05.450
这个页面

43:05.450 --> 43:06.450
刷新

43:06.450 --> 43:07.450
我们再清空一下

43:07.450 --> 43:08.450
刷新

43:08.450 --> 43:09.450
你看Nokko Haus

43:09.450 --> 43:10.450
他也会把Cookie给他

43:10.450 --> 43:11.450
复带过去

43:11.450 --> 43:12.450
就是任何请求

43:12.450 --> 43:13.450
只要满足这个条件

43:13.450 --> 43:14.450
他就会把Cookie给他

43:14.450 --> 43:15.450
复带过去

43:15.450 --> 43:16.450
就这么个意思

43:16.450 --> 43:18.450
这就是Cookie的模式

43:18.450 --> 43:20.450
这是这一块

43:20.450 --> 43:21.450
咱们继续看

43:21.450 --> 43:22.450
后面就是我们讲一讲

43:22.450 --> 43:24.450
扣端来设置Cookie

43:24.450 --> 43:25.450
一样的

43:25.450 --> 43:26.450
坚等于直

43:26.450 --> 43:27.450
就是Documents得Cookie

43:27.450 --> 43:28.450
有Documents得Cookie

43:28.450 --> 43:29.450
那么我们来获取一下吧

43:29.450 --> 43:31.450
获取也很简单

43:31.450 --> 43:32.450
Documents

43:33.450 --> 43:34.450
就要Cookie

43:34.450 --> 43:36.450
你看是不是获取到了

43:36.450 --> 43:37.450
Cookie的名字

43:37.450 --> 43:38.450
Cookie的字

43:38.450 --> 43:39.450
但是你获取不到Cookie的

43:39.450 --> 43:40.450
其他信息

43:40.450 --> 43:41.450
其他信息是用来

43:41.450 --> 43:42.450
浏览其内部用来验证的

43:42.450 --> 43:43.450
验证这个Cookie

43:43.450 --> 43:44.450
能不能给力

43:44.450 --> 43:46.450
是不是就获取到了

43:46.450 --> 43:47.450
对不对

43:47.450 --> 43:48.450
那么这里

43:48.450 --> 43:49.450
他如何设置呢

43:49.450 --> 43:50.450
设置就是给他复带

43:51.450 --> 43:52.450
Cookie

43:52.450 --> 43:53.450
给他复带

43:53.450 --> 43:54.450
给他复带

43:54.450 --> 43:55.450
又想了

43:55.450 --> 43:56.450
复带的方式是一样的

43:56.450 --> 43:57.450
是一样的

43:57.450 --> 43:58.450
你看这个复带

43:58.450 --> 43:59.450
是不是就删出一个Cookie

43:59.450 --> 44:00.450
对不对

44:00.450 --> 44:01.450
MAX A解

44:01.450 --> 44:02.450
等于-1

44:02.450 --> 44:03.450
或者是等于-0

44:03.450 --> 44:04.450
表示立即过期

44:04.450 --> 44:05.450
就像删出Cookie

44:05.450 --> 44:06.450
一副字

44:06.450 --> 44:07.450
删出Cookie过后

44:07.450 --> 44:08.450
我们来看一下

44:08.450 --> 44:09.450
Cookie

44:09.450 --> 44:10.450
看上去还在

44:11.450 --> 44:12.450
看上去还在

44:12.450 --> 44:14.450
但是是不是已经过期了

44:14.450 --> 44:16.450
窗间时间是14秒

44:16.450 --> 44:19.450
过去时间是13秒

44:19.450 --> 44:20.450
所以已经过去了

44:20.450 --> 44:21.450
虽然他还在

44:21.450 --> 44:23.450
但是他现在没有删

44:23.450 --> 44:24.450
什么时候会删

44:24.450 --> 44:25.450
你只要再发生一次请求

44:25.450 --> 44:26.450
他就删了

44:27.450 --> 44:28.450
发生一次请求

44:28.450 --> 44:29.450
你看一下Cookie就没了

44:31.450 --> 44:32.450
你看是不是没有Cookie了

44:32.450 --> 44:33.450
对吧

44:33.450 --> 44:34.450
为什么还会删

44:34.450 --> 44:35.450
因为这一次发动请求

44:35.450 --> 44:36.450
他就会一个Cookie

44:36.450 --> 44:37.450
一个Cookie拿出来看

44:37.450 --> 44:38.450
对吧

44:38.450 --> 44:39.450
看一下哪个Cookie

44:39.450 --> 44:40.450
这Cookie已经过期了

44:40.450 --> 44:41.450
Cookie那我肯定不会发送

44:41.450 --> 44:42.450
那么顺便就把删了

44:42.450 --> 44:43.450
顺便就把删了

44:43.450 --> 44:44.450
就这么个意思

44:45.450 --> 44:46.450
那么在客户端去

44:46.450 --> 44:47.450
设置Cookie

44:48.450 --> 44:49.450
他有一点点不同

44:49.450 --> 44:50.450
什么不同呢

44:50.450 --> 44:51.450
就是这个

44:51.450 --> 44:52.450
第一个是没有ATP only

44:52.450 --> 44:53.450
only

44:53.450 --> 44:54.450
这东西是服务器给我的

44:54.450 --> 44:55.450
对吧

44:55.450 --> 44:56.450
只能允许服务器

44:56.450 --> 44:57.450
直接传输

44:57.450 --> 44:58.450
他不允许客户端过去

44:58.450 --> 44:59.450
也就是说

44:59.450 --> 45:00.450
在这边

45:00.450 --> 45:01.450
如果说我给他

45:01.450 --> 45:02.450
给了他一个就是

45:03.450 --> 45:04.450
ATP only

45:04.450 --> 45:08.040
only

45:08.040 --> 45:09.040
咱们来看一下

45:10.040 --> 45:11.040
如果说我给他了

45:11.040 --> 45:12.040
ABC 123 123

45:13.040 --> 45:14.040
等我成功

45:14.040 --> 45:15.040
现在Cookie肯定有了

45:16.040 --> 45:17.040
Cookie是不是有了

45:17.040 --> 45:18.040
对吧

45:18.040 --> 45:20.040
但是你的介绍是不能获取的

45:21.040 --> 45:22.040
Cookie

45:22.040 --> 45:23.040
所以获取不到

45:23.040 --> 45:24.040
对吧

45:24.040 --> 45:25.040
获取不到这个Cookie

45:25.040 --> 45:26.040
因为我们只有一个Cookie

45:26.040 --> 45:27.040
所以说这里啥都没了

45:27.040 --> 45:28.040
对不对

45:28.040 --> 45:29.040
是这么个意思

45:30.040 --> 45:31.040
这是第一个区别

45:31.040 --> 45:32.040
第二区别是

45:33.040 --> 45:34.040
Pice的默认值

45:34.040 --> 45:35.040
和DoMade的默认值

45:36.040 --> 45:37.040
因为在GS里面

45:37.040 --> 45:38.040
说是Cookie的时候

45:38.040 --> 45:39.040
是不存在请求的

45:39.040 --> 45:40.040
你看这个时候有啥请求的

45:40.040 --> 45:41.040
啥请求都没有

45:41.040 --> 45:42.040
对不对

45:42.040 --> 45:43.040
是不存在请求的

45:43.040 --> 45:44.040
因此他的默认值

45:44.040 --> 45:45.040
跟之前不一样

45:46.040 --> 45:47.040
他的默认值是按照

45:47.040 --> 45:48.040
当前的地址来的

45:49.040 --> 45:50.040
你Pice没有写

45:50.040 --> 45:51.040
那么就按照当前的Pice

45:51.040 --> 45:53.040
你那个域名没有写

45:53.040 --> 45:54.040
就按照当前的域名

45:54.040 --> 45:55.040
是这么个意思

45:55.040 --> 45:56.040
这个地方大家注意一下就行了

45:57.040 --> 45:58.040
其他都一样

45:58.040 --> 45:59.040
都一样

46:00.040 --> 46:01.040
最后的总结

46:02.040 --> 46:03.040
就看登录场景

46:04.040 --> 46:05.040
咱们登录的时候

46:05.040 --> 46:06.040
是会发送一个

46:06.040 --> 46:07.040
Pose请求到服务器

46:07.040 --> 46:08.040
附带账号密码

46:08.040 --> 46:09.040
是不刚才做了

46:09.040 --> 46:10.040
对吧

46:10.040 --> 46:11.040
你看看这里

46:13.040 --> 46:14.040
是不是登录的时候

46:14.040 --> 46:15.040
点击登录

46:15.040 --> 46:16.040
是不是奉表单提交

46:16.040 --> 46:17.040
当然如阿迦克斯

46:17.040 --> 46:18.040
发送一个Pose请求

46:18.040 --> 46:19.040
也一样都行

46:19.040 --> 46:20.040
没有什么区别

46:20.040 --> 46:21.040
那么提交到服务器

46:21.040 --> 46:22.040
是不是可以

46:22.040 --> 46:23.040
把账号密码给他

46:24.040 --> 46:25.040
这是第一步

46:25.040 --> 46:26.040
然后呢

46:26.040 --> 46:27.040
服务器那边

46:27.040 --> 46:28.040
是要验证账号密码

46:28.040 --> 46:30.040
正确的就按照错误来处理

46:30.040 --> 46:31.040
如果正确的话

46:31.040 --> 46:32.040
在想用头里面

46:32.040 --> 46:33.040
是不是要设置Cookie

46:33.040 --> 46:34.040
对不对

46:34.040 --> 46:35.040
设置Cookie

46:35.040 --> 46:36.040
然后附带登录信息

46:36.040 --> 46:37.040
至于一个登录信息

46:37.040 --> 46:38.040
我们目前用的是啥

46:38.040 --> 46:39.040
目前用的就是ID

46:39.040 --> 46:40.040
对吧

46:40.040 --> 46:41.040
当然这个肯定是

46:41.040 --> 46:42.040
会出一些问题

46:42.040 --> 46:43.040
我们以后会说

46:43.040 --> 46:44.040
那么以后呢

46:44.040 --> 46:45.040
我们会讲一个东西

46:45.040 --> 46:46.040
叫JWT

46:46.040 --> 46:47.040
这样子

46:47.040 --> 46:48.040
更加适合做令牌

46:48.040 --> 46:50.040
令牌有很多种格式的

46:51.040 --> 46:52.040
这是这种模式

46:53.040 --> 46:54.040
第三个是

46:54.040 --> 46:56.040
科普端他收到了Cookie

46:56.040 --> 46:57.040
拿到这个消息头

46:57.040 --> 46:58.040
那么浏览器

46:58.040 --> 46:59.040
你不用你操作

46:59.040 --> 47:00.040
他自动就把记录下来了

47:01.040 --> 47:03.040
那么后续的请求的时候

47:03.040 --> 47:05.040
浏览器会把Cookie发送到服务器

47:05.040 --> 47:07.040
表面的信息往天天的管理员

47:07.040 --> 47:08.040
这是一个API请求

47:08.040 --> 47:10.040
那么他会自动的把Cookie

47:10.040 --> 47:11.040
附带到请求头中

47:11.040 --> 47:12.040
那么服务器是不是

47:12.040 --> 47:13.040
可以验证这个Cookie

47:13.040 --> 47:14.040
验证Cookie的信息

47:14.040 --> 47:15.040
是不是正确

47:15.040 --> 47:16.040
如果不正确

47:16.040 --> 47:17.040
不予以操作

47:17.040 --> 47:18.040
如果正确

47:18.040 --> 47:19.040
就完成正常的业务流程

47:19.040 --> 47:20.040
他整个流程是这样子的

47:20.040 --> 47:22.040
再把这个图好好看一下

47:22.040 --> 47:23.040
结合本节课

47:23.040 --> 47:24.040
讲的知识点

47:24.040 --> 47:25.040
好好去想一想

47:25.040 --> 47:26.040
我们这一刻讲到Cookie原理

47:26.040 --> 47:28.040
要对Cookie做操作的话

47:28.040 --> 47:30.040
那么原理的一定要非常清楚

47:30.040 --> 47:32.040
就好比ADP原理是不是很重要

47:32.040 --> 47:33.040
对不对

47:33.040 --> 47:34.040
好 咱们这一刻

47:34.040 --> 47:35.040
先把原理讲了

47:35.040 --> 47:36.040
下期可能我们再做了一些

47:36.040 --> 47:37.040
做一个登录练习

47:37.040 --> 47:39.040
把登录练习做完善一点

47:39.040 --> 47:40.040
好 这期我们就到这儿了

