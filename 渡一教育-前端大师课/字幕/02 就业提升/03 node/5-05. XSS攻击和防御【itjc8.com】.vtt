WEBVTT

00:00.300 --> 00:03.900
上一课咱们说到CS2F攻击

00:03.900 --> 00:06.900
这一课我们说另外一个攻击方式

00:06.900 --> 00:10.900
叫XSS攻击

00:10.900 --> 00:13.900
我们有的时候呢一把叫做CSS攻击

00:13.900 --> 00:15.900
实际上它这个东西呢叫做

00:15.900 --> 00:17.100
它的全称啊

00:17.100 --> 00:23.900
叫做CROSS SITE SCRIPT

00:23.900 --> 00:27.900
跨战脚奔攻击

00:27.900 --> 00:29.900
我看一下我的单词写对没有

00:29.900 --> 00:31.900
应该是没问题的

00:31.900 --> 00:33.900
XSS

00:33.900 --> 00:35.900
应该是没问题的啊

00:35.900 --> 00:37.900
有点忘了的单词

00:37.900 --> 00:40.900
Scriping 是一个动词形式

00:40.900 --> 00:42.900
对吧 是这个啊

00:42.900 --> 00:44.900
它为什么叫做XSS呢

00:44.900 --> 00:46.900
因为CSS说写啊

00:46.900 --> 00:48.900
跟那个沉淀样式表的名字呢

00:48.900 --> 00:49.900
有点冲突

00:49.900 --> 00:51.900
所以说它把换了个名字叫XSS

00:51.900 --> 00:55.900
其实我还是习惯它把它叫做CSS攻击

00:55.900 --> 00:57.900
跨战脚奔攻击

00:57.900 --> 00:59.900
它呢它跟那个上节课我们讲的就不一样

00:59.900 --> 01:02.900
上一节课呢叫CSRF攻击啊

01:02.900 --> 01:03.900
它有一个特点

01:03.900 --> 01:05.900
就上节课我们的东西有一个特点就是

01:05.900 --> 01:09.900
你用户啊它一定要去访问一个OE网站

01:09.900 --> 01:11.900
才会被受到攻击

01:11.900 --> 01:12.900
对吧

01:12.900 --> 01:14.900
那么我们这个东西还可以甩锅

01:14.900 --> 01:15.900
谁叫你去访问OE网站的对吧

01:15.900 --> 01:18.900
你是不是看了什么不该看的东西呢

01:18.900 --> 01:19.900
那么我们这里还可以甩锅

01:19.900 --> 01:21.900
那这个东西是完全甩不了锅的

01:21.900 --> 01:23.900
因为这个东西就是完全是用户

01:23.900 --> 01:26.900
正常的浏览网站遭到攻击了

01:26.900 --> 01:27.900
这是怎么回事呢

01:27.900 --> 01:30.900
这就是网站的安全性没有做好

01:30.900 --> 01:34.900
它这种攻击呢有三种方式啊

01:34.900 --> 01:36.900
我给他说一下这三种方式

01:36.900 --> 01:37.900
第一种方式呢

01:37.900 --> 01:40.900
我们把叫做那个存处形

01:40.900 --> 01:44.900
存处形啊CSS

01:44.900 --> 01:46.900
这种方式是什么方式呢

01:46.900 --> 01:47.900
它是这样子

01:47.900 --> 01:49.900
首先有一个OE用户

01:49.900 --> 01:55.900
OE用户提交了OE内容

01:55.900 --> 01:57.900
到服务器

01:57.900 --> 02:00.900
服务器没有识别

02:00.900 --> 02:02.900
服务器没有识别

02:02.900 --> 02:04.900
然后呢保存到了

02:04.900 --> 02:08.900
保存了OE内容

02:08.900 --> 02:10.900
到数据户

02:10.900 --> 02:12.900
有可能在数据户有可能在别的地方

02:12.900 --> 02:15.900
总之这个OE内容已经被保存下来了

02:15.900 --> 02:17.900
然后呢后续

02:17.900 --> 02:19.900
正常用户

02:19.900 --> 02:21.900
访问服务器

02:21.900 --> 02:23.900
就是访问我们的服务器

02:23.900 --> 02:25.900
最后访问第三方的OE网站

02:25.900 --> 02:27.900
直接访问服务器

02:27.900 --> 02:32.900
服务器在不知情的情况下

02:32.900 --> 02:37.900
给予了之前的OE内容

02:37.900 --> 02:42.540
让正常用户遭到攻击

02:42.540 --> 02:43.540
它是这么一回事

02:43.540 --> 02:45.540
它就不存在什么第三方服务器

02:45.540 --> 02:46.540
就没有

02:46.540 --> 02:47.540
就是我们那个服务器

02:47.540 --> 02:48.540
没有做好安全性

02:48.540 --> 02:49.540
我给它演示一下

02:49.540 --> 02:51.540
存处形我给它好好演示一下

02:51.540 --> 02:53.540
这个是比较严重的

02:53.540 --> 02:56.540
它一般发生在服务端券上

02:56.540 --> 02:57.540
客户端券上

02:57.540 --> 02:59.540
现在框架一般都会规避这个内容

02:59.540 --> 03:00.540
你看5U里面

03:00.540 --> 03:02.540
是不是你券内容

03:02.540 --> 03:04.540
5U里面两个大扩号

03:04.540 --> 03:05.540
在5U里面两个大扩号

03:05.540 --> 03:06.540
里面券的内容

03:06.540 --> 03:07.540
是不是会自动进行编码

03:07.540 --> 03:09.540
对吧在这里面内容

03:09.540 --> 03:11.540
还有个安全性的处理

03:11.540 --> 03:13.540
但是以前的服务端券的时候

03:13.540 --> 03:15.540
可能会出现一些问题

03:15.540 --> 03:17.540
好咱们来看一下吧

03:17.540 --> 03:19.540
在哪呢我们在这

03:20.540 --> 03:23.540
首先我们看服务器代码

03:23.540 --> 03:24.540
代码是这样子

03:24.540 --> 03:25.540
没机航代码

03:25.540 --> 03:26.540
就这个玩意

03:26.540 --> 03:28.540
然后创建一个express服务器

03:28.540 --> 03:30.540
然后创建服务器

03:30.540 --> 03:32.540
然后监听端口

03:32.540 --> 03:34.540
后边我们使用那个静态资源

03:34.540 --> 03:35.540
静态资源在这个目录

03:35.540 --> 03:36.540
没它说的

03:36.540 --> 03:38.540
然后解析包底

03:38.540 --> 03:39.540
解析包底这里

03:39.540 --> 03:40.540
我就模拟数据库

03:40.540 --> 03:42.540
就表示这个是个数据库

03:42.540 --> 03:45.540
其实就是保存在服务器的变量里面

03:45.540 --> 03:50.580
其实就没有什么数据库

03:50.580 --> 03:53.580
然后这里我写了两个接口

03:53.580 --> 03:55.580
一个接口是poser请求这个地址

03:55.580 --> 03:57.580
请求这个地址的时候表示添加一篇文章

03:57.580 --> 03:59.580
你只需要给我传一个文章内容

03:59.580 --> 04:00.580
什么文章标准都没有

04:00.580 --> 04:01.580
只有一个文章内容

04:01.580 --> 04:03.580
你传给我我就把它

04:03.580 --> 04:05.580
我就把这个内容我再打印出来

04:05.580 --> 04:07.580
服务器上打印出来

04:07.580 --> 04:09.580
然后把它加到这个数据里面

04:09.580 --> 04:10.580
把这个内容加到数据里面

04:10.580 --> 04:11.580
能看懂吗

04:11.580 --> 04:13.580
就是客户端那边提交一个文章内容过来

04:13.580 --> 04:15.580
我把这个文章内容加到这个数据里面

04:15.580 --> 04:17.580
就模拟保存到的数据库

04:17.580 --> 04:19.580
就是服务器

04:19.580 --> 04:21.580
保存了二一内容

04:21.580 --> 04:22.580
但是有可能是正常内容

04:22.580 --> 04:23.580
有可能是二一内容

04:23.580 --> 04:24.580
也不知道

04:24.580 --> 04:26.580
然后它响应了一个结果

04:26.580 --> 04:28.580
好 接下来另一个接口是这样子

04:28.580 --> 04:29.580
另一个接口是

04:29.580 --> 04:30.580
当你请求这个地址的时候

04:30.580 --> 04:32.580
我来一个服务端宣展

04:32.580 --> 04:33.580
还记得吗

04:33.580 --> 04:34.580
我们当时用ejs

04:34.580 --> 04:35.580
对吧

04:35.580 --> 04:37.580
我们这里宣展这个ejs文件

04:37.580 --> 04:39.580
有这个文件

04:39.580 --> 04:40.580
然后把这个数据

04:40.580 --> 04:42.580
把我们的数据给它

04:42.580 --> 04:44.580
数据给它articles

04:44.580 --> 04:45.580
那么这个文件里面还宣展啥呢

04:45.580 --> 04:47.580
就是有一个超链接

04:47.580 --> 04:48.580
到发布文章

04:48.580 --> 04:49.580
然后这里是个文章列表

04:49.580 --> 04:51.580
文章列表我们这里是不是用循环

04:51.580 --> 04:52.580
循环这个数组

04:52.580 --> 04:54.580
每一次循环我生成一个div

04:54.580 --> 04:56.580
然后把这个文章内容放到这

04:56.580 --> 04:57.580
没了意思吧

04:57.580 --> 04:59.580
这是一个就是模板引擎

04:59.580 --> 05:01.580
然后我们静态页面很简单

05:01.580 --> 05:03.580
静态页面就添加文章的

05:03.580 --> 05:05.580
这里一个超链接

05:05.580 --> 05:06.580
到文章列表

05:06.580 --> 05:08.580
然后这里一个发布文章

05:08.580 --> 05:09.580
这一个textarea

05:09.580 --> 05:11.580
表示我们的文章内容

05:11.580 --> 05:12.580
这里一个按钮发布

05:12.580 --> 05:14.580
我给按钮注册一个点击事件

05:14.580 --> 05:15.580
这里获取到这个文本框

05:15.580 --> 05:16.580
注册一个点击事件

05:16.580 --> 05:17.580
按点击的时候我用

05:17.580 --> 05:18.580
我用一个阿加克斯请求

05:18.580 --> 05:19.580
去请求服务器的这个地址

05:19.580 --> 05:20.580
是不是发布文章

05:20.580 --> 05:21.580
对吧

05:21.580 --> 05:22.580
透射请求

05:22.580 --> 05:23.580
控制一下消息体

05:23.580 --> 05:24.580
然后呢

05:24.580 --> 05:25.580
服务器会响应给我一个结果

05:25.580 --> 05:27.580
我们把文章内容发过去

05:27.580 --> 05:28.580
就这么简单

05:28.580 --> 05:29.580
这就是我们网站的一个网站

05:29.580 --> 05:31.580
好咱们来访问试一下

05:31.580 --> 05:34.580
Nokohoss

05:34.580 --> 05:37.580
然后点检查

05:37.580 --> 05:38.580
发布文章

05:38.580 --> 05:39.580
abc

05:39.580 --> 05:40.580
一篇文章

05:40.580 --> 05:41.580
点发布

05:41.580 --> 05:42.580
发布成功了

05:42.580 --> 05:43.580
我们到文章列表里面去看

05:43.580 --> 05:45.580
这是服务器渲染出来的结果

05:45.580 --> 05:47.580
右键检查网页元代码

05:47.580 --> 05:49.580
服务器给了我们这么一个DIV

05:49.580 --> 05:52.580
这个DIV就是我们服务器渲染的结果

05:52.580 --> 05:54.580
再发布一篇文章

05:54.580 --> 05:57.580
这篇文章我们写上一些元素

05:57.580 --> 05:58.580
比方说

05:58.580 --> 05:59.580
因为我们有的时候

05:59.580 --> 06:00.580
肯定要用复文闷框

06:00.580 --> 06:02.580
复文闷框是不是有些ATV代码

06:02.580 --> 06:03.580
要传到服务器

06:03.580 --> 06:04.580
对不对

06:04.580 --> 06:05.580
那么比方说

06:05.580 --> 06:06.580
我们这里写上一个元素

06:06.580 --> 06:07.580
DIV

06:07.580 --> 06:08.580
DIV

06:08.580 --> 06:09.580
然后呢

06:09.580 --> 06:10.580
我们这里写个style

06:10.580 --> 06:11.580
color

06:11.580 --> 06:13.580
红色

06:13.580 --> 06:15.580
我就模拟复文闷框

06:15.580 --> 06:17.580
复文闷框其实我们这里不用手写

06:17.580 --> 06:18.580
它有一些按钮

06:18.580 --> 06:19.580
可以帮我们自动生成这些元素

06:19.580 --> 06:21.580
总之我们最终提交的时候

06:21.580 --> 06:22.580
还是提交了一个ATV文档

06:22.580 --> 06:23.580
然后呢

06:23.580 --> 06:24.580
这里还有个超链接

06:24.580 --> 06:26.580
我总理一起给它写了

06:27.580 --> 06:32.040
超链接

06:32.040 --> 06:33.040
好 这边

06:33.040 --> 06:35.040
点发布

06:35.040 --> 06:36.040
好 所以发布成功了

06:36.040 --> 06:37.040
我们到文章里面去看

06:37.040 --> 06:38.040
那么这边

06:38.040 --> 06:40.040
你看是显示出来这个结果

06:40.040 --> 06:42.040
然后我们看一下服务器的输出

06:42.040 --> 06:44.040
服务器保存的时候

06:44.040 --> 06:45.040
保存了什么

06:45.040 --> 06:47.040
保存的是一些二亿内容

06:47.040 --> 06:48.040
就带有元素的内容

06:48.040 --> 06:49.040
对不对

06:49.040 --> 06:51.040
带有元 其实这个也不叫二亿内容

06:51.040 --> 06:52.040
带有元素的内容

06:52.040 --> 06:53.040
那么带有元素的内容的话

06:53.040 --> 06:54.040
但是呢

06:54.040 --> 06:55.040
我们显示出来

06:55.040 --> 06:56.040
为什么它是这样的显示

06:56.040 --> 06:57.040
它没有显示出来

06:57.040 --> 06:58.040
真正的一个DIV

06:58.040 --> 06:59.040
没有显示出来一个A元素

06:59.040 --> 07:00.040
我们看一下元代

07:00.040 --> 07:01.040
看元代吧就知道了

07:01.040 --> 07:02.040
所以编码过后了

07:02.040 --> 07:04.040
谁到底是谁在编码

07:04.040 --> 07:06.040
是这个模板引擎

07:06.040 --> 07:08.040
你看着

07:08.040 --> 07:10.040
是这个模板引擎在编码

07:10.040 --> 07:11.040
当你使用这个

07:11.040 --> 07:12.040
到百分号等号的时候

07:12.040 --> 07:14.040
它就会进行编码

07:14.040 --> 07:16.040
它会自动把这个内容进行编码

07:16.040 --> 07:19.040
它就防止这个脚奔攻击

07:19.040 --> 07:20.040
那么但是有的时候

07:20.040 --> 07:21.040
这个编码并不一定是好事

07:21.040 --> 07:22.040
因为我这个里呢

07:22.040 --> 07:24.040
是复文的文方提交的

07:24.040 --> 07:25.040
那你不要你提交一篇文章

07:25.040 --> 07:27.040
你不能用这种方式给我显示

07:27.040 --> 07:28.040
你还是老老实实

07:28.040 --> 07:29.040
把它显示成元素的了

07:29.040 --> 07:30.040
所以说我这里呢

07:30.040 --> 07:32.040
就不希望把这个地方进行编码

07:32.040 --> 07:33.040
那怎么办呢

07:33.040 --> 07:34.040
我就可以用一个简号

07:34.040 --> 07:36.040
用一个简号就表示

07:36.040 --> 07:37.040
远远本本的显示就行了

07:37.040 --> 07:39.040
把它把内容放到这就行了

07:39.040 --> 07:40.040
你不用去管

07:40.040 --> 07:41.040
剩下的事情不用管

07:41.040 --> 07:43.040
因为这是一篇文章

07:43.040 --> 07:44.040
如果是用等号的话

07:44.040 --> 07:45.040
它会自动进行编码

07:45.040 --> 07:46.040
好 我们这样子写的过

07:46.040 --> 07:47.040
我们再来看 刷新

07:48.040 --> 07:49.040
是不是就有颜色的

07:49.040 --> 07:50.040
对吧 这篇文章

07:50.040 --> 07:51.040
就有颜色的

07:51.040 --> 07:52.040
是不是就有元素了

07:52.040 --> 07:53.040
好像是没啥问题对不对

07:53.040 --> 07:54.040
这又是啥呀

07:54.040 --> 07:55.040
没啥问题对不对

07:55.040 --> 07:56.040
有些同学说

07:56.040 --> 07:57.040
他如果央视把这个

07:57.040 --> 07:58.040
一面搞乱了怎么办

07:58.040 --> 07:59.040
整体都是小事

07:59.040 --> 08:01.040
我们可以通过央视的地方

08:01.040 --> 08:02.040
来进行规避

08:02.040 --> 08:03.040
比如说我们这里边的央视

08:03.040 --> 08:04.040
给它設一个最大宽度

08:04.040 --> 08:05.040
超出于隐藏

08:05.040 --> 08:06.040
都可以规避的

08:06.040 --> 08:07.040
这些东西都是小事

08:07.040 --> 08:09.040
然后我们继续来发布文章

08:10.040 --> 08:11.040
现在我们在这里

08:11.040 --> 08:13.040
写入一个比较特别的

08:16.420 --> 08:18.420
这才叫脚本攻击

08:18.420 --> 08:20.420
它会运行解释

08:21.420 --> 08:22.420
好 发布

08:23.420 --> 08:24.420
发布完了

08:24.420 --> 08:25.420
我们到文章列表里面去

08:25.420 --> 08:27.420
你看 弹出了这个东西

08:27.420 --> 08:28.420
怎么回事呢

08:28.420 --> 08:29.420
我们看一下服务器

08:29.420 --> 08:30.420
服务器保存的内容

08:30.420 --> 08:31.420
服务器保存的内容

08:31.420 --> 08:32.420
第三个你看

08:32.420 --> 08:33.420
保存的是远远门

08:33.420 --> 08:34.420
保存的这个东西

08:34.420 --> 08:36.420
这个东西就不得了了

08:36.420 --> 08:38.420
然后这个东西就放到哪了

08:38.420 --> 08:40.420
依法问这个地址

08:40.420 --> 08:42.420
它就会把文章的内容

08:42.420 --> 08:44.420
交给谁 交给模板引擎

08:44.420 --> 08:45.420
模板引擎是不是把语言

08:45.420 --> 08:46.420
风不动的把文章的内容

08:46.420 --> 08:47.420
放到这

08:47.420 --> 08:48.420
放到这个位置

08:48.420 --> 08:50.420
那这个浏览器里面

08:50.420 --> 08:51.420
得到了结果是啥

08:51.420 --> 08:52.420
你看原来的结果里面

08:52.420 --> 08:54.420
所以得到这个东西

08:54.420 --> 08:55.420
看到没

08:55.420 --> 08:56.420
这是这篇文章的内容

08:56.420 --> 08:57.420
那么是不是

08:57.420 --> 08:58.420
这里面有一段脚本

08:58.420 --> 08:59.420
浏览器不知道

08:59.420 --> 09:00.420
浏览器不知道怎么回事

09:00.420 --> 09:02.420
它不知道这个脚本哪来的

09:02.420 --> 09:03.420
反正他一给我脚本

09:03.420 --> 09:04.420
不可能说我不运行

09:04.420 --> 09:05.420
我肯定要运行

09:05.420 --> 09:06.420
那一运行

09:06.420 --> 09:07.420
就容易遭受脚本冲击

09:07.420 --> 09:09.420
因为这个脚本并不是服务端

09:09.420 --> 09:11.420
真实的意图

09:11.420 --> 09:13.420
它是别的用户

09:13.420 --> 09:15.420
给你提供了一些恶意内容

09:15.420 --> 09:17.420
恶意用户提交了恶意内容到服务器

09:17.420 --> 09:19.420
服务器没有实别

09:19.420 --> 09:21.420
保存了恶意内容到数据库

09:21.420 --> 09:22.420
那么我这里用个

09:22.420 --> 09:23.420
数据魔力的数据库

09:23.420 --> 09:24.420
那么正常的用户

09:24.420 --> 09:25.420
你看

09:25.420 --> 09:26.420
后边有个正常用户

09:26.420 --> 09:27.420
他不知道

09:27.420 --> 09:28.420
他啥都不知道

09:28.420 --> 09:29.420
我来看一下

09:29.420 --> 09:30.420
最近的新闻市场

09:30.420 --> 09:31.420
一看是不是就运行的脚本

09:31.420 --> 09:32.420
对不对

09:32.420 --> 09:33.420
正常的用户

09:33.420 --> 09:35.420
访问我们的服务器的时候

09:35.420 --> 09:36.420
不知情的情况下

09:36.420 --> 09:37.420
给予了之前的恶意内容

09:37.420 --> 09:39.420
正常用户装上攻击

09:39.420 --> 09:40.420
他又说

09:40.420 --> 09:41.420
这个东西怎么攻击

09:41.420 --> 09:42.420
你不就是个拉茨吗

09:42.420 --> 09:43.420
对吧

09:43.420 --> 09:44.420
就以影响的用户的

09:44.420 --> 09:46.420
越观感和越多而已

09:46.420 --> 09:47.420
兄弟

09:47.420 --> 09:48.420
你好好想一想

09:48.420 --> 09:49.420
这是个脚本

09:49.420 --> 09:51.420
你知道脚本可以做啥事

09:51.420 --> 09:53.420
脚本可以做啥事

09:53.420 --> 09:54.420
啥事都可以做

09:54.420 --> 09:55.420
可以发动阿迦克之请求

09:55.420 --> 09:56.420
还可以什么

09:56.420 --> 09:57.420
还可以获取估计

10:01.420 --> 10:02.420
你看一看

10:04.420 --> 10:05.420
我是一个恶意用户

10:05.420 --> 10:07.420
我把这个东西发到服务器

10:07.420 --> 10:10.420
然后正常用户去访问文章列表的时候

10:12.420 --> 10:15.420
正常用户去访问文章列表的时候

10:15.420 --> 10:16.420
正常用户的哭泣

10:16.420 --> 10:18.420
是不是被脚本获取到了

10:18.420 --> 10:19.420
然后脚本可以干嘛

10:19.420 --> 10:20.420
他把这个哭泣获取到

10:20.420 --> 10:22.420
是不是可以用个阿迦克之请求

10:22.420 --> 10:23.420
把这个哭泣发送到哪

10:23.420 --> 10:25.420
发送到自己的服务器

10:25.420 --> 10:26.420
他自己的服务器

10:26.420 --> 10:27.420
是不是可以获取到

10:27.420 --> 10:28.420
很多很多用户的哭泣

10:28.420 --> 10:29.420
只要用户去访问

10:29.420 --> 10:31.420
这个正常占点的地址

10:31.420 --> 10:32.420
他觉得哭泣就被包住了

10:32.420 --> 10:34.420
包住到了他的服务器去了

10:34.420 --> 10:35.420
对不对

10:35.420 --> 10:37.420
这就是跨越缴分攻击

10:37.420 --> 10:40.420
跨越缴分攻击就是让正常的用户

10:40.420 --> 10:42.420
在正常的访问情况下

10:42.420 --> 10:45.420
运行了一个不正常的介石

10:45.420 --> 10:46.420
这个不正常的介石

10:46.420 --> 10:48.420
就是别的恶意用户提供的

10:48.420 --> 10:50.420
他把不正常的介石

10:50.420 --> 10:52.420
放到了一个正常的网站里边去了

10:52.420 --> 10:55.420
那这个东西存处形怎么防御呢

10:55.420 --> 10:57.420
存处形其实就是要防御的话

10:57.420 --> 10:59.420
那么就是

10:59.420 --> 11:02.420
要防止他保存恶意那种倒数据库

11:02.420 --> 11:04.420
要防止这一点

11:04.420 --> 11:07.420
那么怎么来防止他保存恶意那种倒数据库呢

11:07.420 --> 11:08.420
我给大家介绍一个库

11:08.420 --> 11:09.420
其实这个也很简单

11:09.420 --> 11:12.420
就是你在express里边写一个中间线

11:12.420 --> 11:15.420
然后你在处理天家文章的之前

11:15.420 --> 11:17.420
也要写个中间线

11:17.420 --> 11:19.420
表农门写到哪儿吗

11:19.420 --> 11:20.420
我们就在这吧

11:20.420 --> 11:21.420
写个全聚到中间线

11:22.420 --> 11:23.420
app use

11:29.920 --> 11:31.920
在这个中间线里边我们干嘛呢

11:31.920 --> 11:33.920
我们看一下你的消息体里面

11:33.920 --> 11:34.920
有没有恶意那种

11:34.920 --> 11:35.920
有的话我给你进行什么

11:35.920 --> 11:37.920
进行atm实际编码

11:37.920 --> 11:39.920
把它进行编码

11:39.920 --> 11:40.920
编码是什么

11:40.920 --> 11:41.920
就是把这个东西

11:41.920 --> 11:43.920
把这个玩意儿变成什么了

11:43.920 --> 11:44.920
变成lt

11:44.920 --> 11:45.920
对吧

11:48.300 --> 11:50.300
然后把这个玩意儿变成什么了

11:50.300 --> 11:51.300
gt

11:51.300 --> 11:52.300
对不对

11:52.300 --> 11:53.300
无非就是这样进行实际编码

11:53.300 --> 11:55.300
因为正常表达设备可以玩了

11:55.300 --> 11:57.300
但是我们一般来说

11:57.300 --> 11:59.300
我们要防止的是什么

11:59.300 --> 12:00.300
防止的是它的脚本

12:00.300 --> 12:02.300
其他的我们可以

12:02.300 --> 12:04.300
可以不用那么在意

12:04.300 --> 12:06.300
不用那么的在意

12:06.300 --> 12:07.300
我们防止的是脚本

12:07.300 --> 12:08.300
那么这个地方怎么办呢

12:08.300 --> 12:10.300
我们也可以自己写代吧

12:10.300 --> 12:12.300
也可以利用一些第三方库

12:12.300 --> 12:14.300
我这里给大家介绍一个第三方库

12:14.300 --> 12:18.120
就叫做xss

12:19.120 --> 12:20.120
就这个第三方库

12:20.120 --> 12:21.120
我们直接安装

12:21.120 --> 12:24.900
xs

12:24.900 --> 12:25.900
安装

12:26.900 --> 12:28.900
安装好了过后了

12:28.900 --> 12:30.900
它这还中文文道

12:30.900 --> 12:32.900
它这好像

12:36.300 --> 12:37.300
有点卡

12:38.300 --> 12:39.300
安装

12:39.300 --> 12:41.300
使用方式特别简单

12:41.300 --> 12:43.300
我们来看一下使用方式

12:45.940 --> 12:46.940
这里

12:46.940 --> 12:51.870
把注射掉

12:51.870 --> 12:53.870
然后它的使用方式特别简单

12:53.870 --> 12:55.870
就是导入就过来

12:55.870 --> 12:56.870
我们来看一下吧

12:56.870 --> 12:57.870
它跟那个什么服务器

12:57.870 --> 12:58.870
也都没关系

12:58.870 --> 12:59.870
它就是在处理制服串的

12:59.870 --> 13:01.870
导入进来过后

13:01.870 --> 13:02.870
你通过这个函数

13:02.870 --> 13:03.870
你给它一段文本

13:03.870 --> 13:05.870
它就会给你进行安全性过滤

13:05.870 --> 13:06.870
我们看一下

13:06.870 --> 13:08.870
安全性过滤过后是什么样子

13:10.870 --> 13:11.870
你看它输出的结果

13:11.870 --> 13:12.870
输出的结果是这个

13:12.870 --> 13:14.870
是不是给你编码过后了

13:14.870 --> 13:16.870
那么这个东西是不是不会遭到攻击

13:16.870 --> 13:17.870
你这个东西发送给浏览器

13:17.870 --> 13:18.870
浏览器根本就不会把它

13:18.870 --> 13:20.870
识别成一个sqlips的元素

13:20.870 --> 13:22.870
所以它不会遭到攻击

13:22.870 --> 13:23.870
那么如果说正常的

13:23.870 --> 13:25.870
正常的就是普通的元素

13:25.870 --> 13:26.870
普通的元素

13:26.870 --> 13:27.870
我们看一下

13:27.870 --> 13:29.870
因为发现普通的元素

13:29.870 --> 13:30.870
它不会给你处理

13:30.870 --> 13:32.870
它只处理sqlips的元素

13:32.870 --> 13:33.870
对吧

13:33.870 --> 13:34.870
其实还有种情况

13:34.870 --> 13:35.870
还有种情况是什么

13:35.870 --> 13:37.870
我给你注入的东西是这个东西

13:37.870 --> 13:38.870
onclick

13:38.870 --> 13:40.870
我给你注入的是这个东西

13:40.870 --> 13:42.870
虽然说它不是一个sqlips

13:42.870 --> 13:44.870
不是一个脚本元素

13:44.870 --> 13:45.870
但是它是个超链接

13:45.870 --> 13:47.870
超链接是不是有可能会被用户点击

13:47.870 --> 13:48.870
用户点击的过后

13:48.870 --> 13:50.870
它是不是就运行了这个事件

13:50.870 --> 13:51.870
对吧

13:51.870 --> 13:53.870
所以运行了这个事件

13:54.870 --> 13:56.870
比方说我们这里的加把sqlips

13:57.870 --> 13:59.870
alertd

13:59.870 --> 14:00.870
你看一下

14:00.870 --> 14:02.870
它这个过滤出来的结果是什么

14:02.870 --> 14:04.870
所以它把onclick给你去掉了

14:04.870 --> 14:05.870
看到没

14:05.870 --> 14:06.870
给你去掉了

14:06.870 --> 14:08.870
它这个地方也可以考虑

14:08.870 --> 14:10.870
那么看一下这个地方有没有考虑呢

14:10.870 --> 14:11.870
因为我们的GS代码

14:11.870 --> 14:12.870
还可能出现在这个位置

14:12.870 --> 14:14.870
还可能出现在这个位置

14:14.870 --> 14:15.870
加把sqlips

14:15.870 --> 14:16.870
alertd

14:16.870 --> 14:18.870
看这个地方它有没有考虑呢

14:18.870 --> 14:19.870
保存

14:19.870 --> 14:20.870
所以也可以考虑

14:20.870 --> 14:22.870
你看它考虑的是非常完整的

14:22.870 --> 14:24.870
把这些有危险性

14:24.870 --> 14:26.870
危险性的东西都给你考虑进来了

14:26.870 --> 14:29.870
就是你保证你的就是这个文档里边

14:29.870 --> 14:31.870
它不会存在这种GS代码

14:31.870 --> 14:32.870
原来的意思吧

14:32.870 --> 14:33.870
就是这个东西

14:33.870 --> 14:34.870
这个东西呢其实

14:34.870 --> 14:35.870
它用法很简单

14:35.870 --> 14:37.870
下面你还可以

14:37.870 --> 14:38.870
它既可以在浏览器端使用

14:38.870 --> 14:39.870
也可以在漏的GS使用

14:39.870 --> 14:41.870
当然我们肯定要在服务器使用

14:41.870 --> 14:42.870
因为浏览器的情况

14:42.870 --> 14:43.870
我不知道它什么情况

14:43.870 --> 14:44.870
那么我们这里的

14:44.870 --> 14:46.870
下面它还有什么自定义过滤规则

14:46.870 --> 14:47.870
你可以都是中文文档

14:47.870 --> 14:48.870
你可以自行去看一下

14:48.870 --> 14:49.870
那我这里就直接使用

14:49.870 --> 14:51.870
它原设的默认规则

14:51.870 --> 14:52.870
那么我们这里

14:52.870 --> 14:54.870
就使用这个库

14:55.870 --> 14:56.870
其实像这些工具

14:56.870 --> 14:57.870
说上去很高拉上

14:57.870 --> 14:59.870
其实防御起来的其实并不复杂

14:59.870 --> 15:01.870
我们加一个中间键

15:01.870 --> 15:02.870
加个中间键过后

15:02.870 --> 15:04.870
我干嘛呢我就把那个包底拿到

15:04.870 --> 15:06.870
看一下你总之你包底是个对象

15:06.870 --> 15:07.870
我把对象里边

15:07.870 --> 15:08.870
每一个属性拿到

15:08.870 --> 15:09.870
全部来进行过滤规则

15:09.870 --> 15:10.870
对吧

15:10.870 --> 15:11.870
Fall in

15:11.870 --> 15:12.870
一个Fall in循环

15:12.870 --> 15:13.870
循环什么

15:13.870 --> 15:14.870
包底

15:14.870 --> 15:16.870
把它的每一个属性全部拿到

15:16.870 --> 15:17.870
拿到过后

15:17.870 --> 15:19.870
我来看一下它的值

15:19.870 --> 15:20.870
Value值

15:20.870 --> 15:21.870
rig

15:21.870 --> 15:22.870
包底

15:22.870 --> 15:23.870
key

15:23.870 --> 15:24.870
看它的Value值

15:24.870 --> 15:25.870
把这个Value值是过滤一下

15:25.870 --> 15:26.870
对吧

15:26.870 --> 15:27.870
过滤一下

15:27.870 --> 15:28.870
rig

15:28.870 --> 15:29.870
key

15:30.870 --> 15:35.630
通过这个保路

15:35.630 --> 15:36.630
require

15:36.630 --> 15:38.630
xss

15:39.630 --> 15:41.630
把这个值

15:41.630 --> 15:44.260
怎么写的

15:44.260 --> 15:48.280
前面咋写的

15:48.280 --> 15:49.280
就是传入一个对吧

15:49.280 --> 15:50.280
ok 那很简单了

15:50.280 --> 15:52.280
那我就把这个Value值传进去

15:52.280 --> 15:54.280
然后重新给它复制

15:54.280 --> 15:55.280
对不对

15:55.280 --> 15:56.280
就完算了

15:56.280 --> 15:57.280
就完算了

15:57.280 --> 15:59.280
然后再处理完过后

15:59.280 --> 16:00.280
调用那个

16:00.280 --> 16:01.280
就完了

16:02.280 --> 16:03.280
好 咱们再来试一下

16:05.280 --> 16:06.280
现在文章回到

16:06.280 --> 16:07.280
发布文章

16:08.280 --> 16:10.280
把这个复制一下吧

16:11.280 --> 16:12.280
发布

16:12.280 --> 16:13.280
好 我们看一下服务器

16:13.280 --> 16:15.280
你看服务器是不得到这样的结果

16:15.280 --> 16:16.280
对不对

16:16.280 --> 16:17.280
好 那我们

16:17.280 --> 16:19.280
来一个正常的

16:19.280 --> 16:20.280
来一个正常的

16:20.280 --> 16:21.280
div

16:21.280 --> 16:22.280
div

16:23.280 --> 16:24.280
style

16:24.280 --> 16:25.280
color

16:25.280 --> 16:26.280
红色

16:26.280 --> 16:28.280
哪个正常的 发布

16:28.280 --> 16:31.660
好 我们到文章列表

16:31.660 --> 16:32.660
看一下

16:32.660 --> 16:34.660
那么第1个

16:34.660 --> 16:35.660
第1个呢 是不是

16:35.660 --> 16:36.660
诶 我看一下

16:36.660 --> 16:38.660
两个

16:38.660 --> 16:40.660
这是第1个

16:40.660 --> 16:41.660
第1个

16:41.660 --> 16:42.660
第1个是不是直接显示出来

16:42.660 --> 16:43.660
这个玩意

16:43.660 --> 16:44.660
对不对 是不是没有到到攻击

16:44.660 --> 16:45.660
对吧

16:45.660 --> 16:47.660
下面这个

16:47.660 --> 16:50.660
console log document cookie

16:50.660 --> 16:52.970
div

16:52.970 --> 16:54.970
他把那个style也给我去掉了

16:54.970 --> 16:55.970
style也给我去掉了

16:55.970 --> 16:56.970
他不允许你写style

16:56.970 --> 16:58.970
他的要求还有点严

16:58.970 --> 17:00.970
他不允许你写style

17:00.970 --> 17:02.970
style我想还是能够让我写吧

17:02.970 --> 17:03.970
还是让我写一下

17:03.970 --> 17:05.970
还是让我写一下style

17:09.410 --> 17:10.410
我看一下div

17:10.410 --> 17:12.410
是刚才我写错了吗

17:13.410 --> 17:15.410
我是记得他是可以写style的

17:15.410 --> 17:16.410
不行的话

17:16.410 --> 17:17.410
不行的话

17:17.410 --> 17:19.410
我们可以那个可以控制的

17:19.410 --> 17:20.410
是可以控制的

17:20.410 --> 17:21.410
复制一下

17:21.410 --> 17:22.410
发布

17:22.410 --> 17:23.410
文章列表

17:23.410 --> 17:25.410
还真不让我写

17:25.410 --> 17:26.410
真不让我写style

17:26.410 --> 17:27.410
真不让我写的话

17:27.410 --> 17:28.410
我看一下他的文档吧

17:28.410 --> 17:30.410
文档是可以控制的

17:31.410 --> 17:33.410
制定义过滤规则

17:33.410 --> 17:35.410
他这里可以传一个配置

17:36.410 --> 17:37.410
配置里边

17:37.410 --> 17:38.410
我要找一找

17:38.410 --> 17:40.410
他可以传一个白名单

17:40.410 --> 17:41.410
就哪些元素

17:41.410 --> 17:43.410
哪些元素的哪些属性

17:43.410 --> 17:45.410
是可以允许的

17:45.410 --> 17:46.410
哪些元素的哪些属性

17:46.410 --> 17:47.410
是不能允许的

17:47.410 --> 17:49.410
他可以进行控制

17:49.410 --> 17:52.410
制定义匹配到标签式的处理方式

17:52.410 --> 17:54.410
这个是标签名

17:54.410 --> 17:55.410
这个是整个的

17:55.410 --> 17:57.410
该标签的ATM

17:59.410 --> 18:00.410
当前的标签名称

18:00.410 --> 18:01.410
标签的ATM

18:01.410 --> 18:03.410
OPPIN是一些具体的字

18:03.410 --> 18:05.410
是不是在把一名单的等等

18:06.410 --> 18:09.410
制定义匹配到标签的属性

18:10.410 --> 18:11.410
OK

18:11.410 --> 18:13.410
那么加上这个函数

18:13.410 --> 18:14.410
加上这个函数

18:14.410 --> 18:16.720
加上这个函数

18:16.720 --> 18:19.740
配置一下吧

18:20.740 --> 18:21.740
我们这里的

18:22.740 --> 18:23.740
我们

18:23.740 --> 18:25.740
他可以写个拳句配置

18:25.740 --> 18:27.740
我觉得是可以写个拳句配置的

18:27.740 --> 18:29.740
就是这个东西

18:29.740 --> 18:34.520
我们可以写个拳句配置

18:34.520 --> 18:35.520
我们写到这吧

18:43.230 --> 18:44.230
那么这边

18:44.230 --> 18:45.230
我们写上一个配置

18:45.230 --> 18:46.230
它的配置是咋呢

18:46.230 --> 18:48.230
它的配置是这个

18:52.630 --> 18:53.630
当匹配到

18:53.630 --> 18:55.630
当匹配到一个

18:55.630 --> 18:56.630
Type的时候

18:56.630 --> 19:00.330
我们输出

19:00.330 --> 19:01.330
Type

19:01.330 --> 19:02.330
Value

19:02.330 --> 19:03.330
Is

19:03.330 --> 19:04.330
Wide

19:05.330 --> 19:06.330
ATTR

19:06.330 --> 19:07.330
行了

19:07.330 --> 19:08.330
我们把输出一下

19:09.330 --> 19:10.330
然后到这个

19:10.330 --> 19:11.330
添加发布文章来

19:12.330 --> 19:13.330
我们再点发布

19:13.330 --> 19:19.100
我们看一下服务器的输出

19:20.100 --> 19:21.100
我这里写错了

19:21.100 --> 19:22.100
这个地方写错了

19:22.100 --> 19:24.100
这要看着这个

19:24.100 --> 19:25.100
看着API文章来弄

19:26.100 --> 19:27.100
拳句配置

19:27.100 --> 19:28.100
拳句配置

19:28.100 --> 19:29.100
OmProcess

19:32.480 --> 19:33.480
DialProcess

19:34.480 --> 19:35.480
OK

19:36.480 --> 19:39.430
再来

19:39.430 --> 19:40.430
点发布

19:40.430 --> 19:41.430
OK那么服务器

19:42.430 --> 19:43.430
DIV

19:43.430 --> 19:45.430
你看得到的DIV Style

19:45.430 --> 19:47.430
这个属性Color

19:47.430 --> 19:49.430
这是它属性的值

19:49.430 --> 19:50.430
不在版名单之上

19:50.430 --> 19:51.430
对吧

19:51.430 --> 19:53.430
你看一下是不是不在版名单之上

19:53.430 --> 19:55.430
不在版名单之上的话

19:55.430 --> 19:56.430
让我们这里呢

19:58.430 --> 19:59.430
这里呢

19:59.430 --> 20:00.430
给它处理一下吧

20:01.430 --> 20:05.450
我自己判断一下

20:05.450 --> 20:06.450
Type

20:06.450 --> 20:07.450
如果说这个

20:07.450 --> 20:08.450
Type

20:08.450 --> 20:09.450
就是Name

20:10.450 --> 20:11.450
的

20:12.450 --> 20:13.450
就是我们的属性

20:14.450 --> 20:16.450
如果说Name等于Style

20:19.450 --> 20:20.450
我们是可以允许的

20:20.450 --> 20:21.450
是可以允许的

20:21.450 --> 20:23.450
那么怎么来允许呢

20:23.450 --> 20:24.450
我看一下文档

20:24.450 --> 20:25.450
怎么来允许

20:25.450 --> 20:26.450
允许这个

20:26.450 --> 20:27.450
允许这个值

20:29.450 --> 20:30.450
Type

20:31.450 --> 20:33.450
如果返回一个字不错

20:33.450 --> 20:35.450
当前标签

20:35.450 --> 20:36.450
被T

20:36.450 --> 20:37.450
如果返回一个字不错

20:37.450 --> 20:38.450
当前属性值

20:38.450 --> 20:40.450
将被T换为字不错

20:40.450 --> 20:41.450
如果不返回

20:41.450 --> 20:42.450
任何值得使用

20:42.450 --> 20:44.450
默认的处理方式

20:45.450 --> 20:47.450
在版名单之上

20:47.450 --> 20:49.450
调用这个

20:49.450 --> 20:51.450
Safe ATTR Value

20:51.450 --> 20:52.450
来过滤属性值

20:52.450 --> 20:54.450
并输出该属性

20:54.450 --> 20:55.450
不在版名单之上

20:55.450 --> 20:57.450
调用这个来指定

20:58.450 --> 21:00.450
如果返回一个字不错

21:00.450 --> 21:01.450
OK

21:01.450 --> 21:02.450
那我就返回一个字不错吧

21:02.450 --> 21:04.450
返回它的Values

21:06.760 --> 21:07.760
那么剩下的情况

21:07.760 --> 21:08.760
我就拿上来用默认就行了

21:08.760 --> 21:09.760
我就只处理一下

21:09.760 --> 21:10.760
Style这个属性

21:10.760 --> 21:11.760
好了

21:11.760 --> 21:12.760
行了

21:12.760 --> 21:13.760
我们写好了

21:13.760 --> 21:14.760
然后再来

21:14.760 --> 21:15.760
发布

21:15.760 --> 21:19.030
文章列表

21:19.030 --> 21:20.030
还是不行吗

21:20.030 --> 21:21.030
我看一下

21:23.730 --> 21:24.730
用这个东西替代

21:24.730 --> 21:26.730
它就把整个属性给我替代了

21:26.730 --> 21:27.730
那不行

21:27.730 --> 21:29.730
那我要返回的是这个

21:29.730 --> 21:31.730
我要返回的是这个东西

21:31.730 --> 21:33.730
Style等于

21:33.730 --> 21:34.730
这个

21:37.620 --> 21:38.620
返回这个

21:38.620 --> 21:39.620
保存

21:39.620 --> 21:40.620
你看着文章来

21:40.620 --> 21:43.060
我也没有去详细看

21:43.060 --> 21:44.060
好

21:44.060 --> 21:45.060
再来

21:45.060 --> 21:46.060
文章列表

21:46.060 --> 21:47.060
你看

21:47.060 --> 21:48.060
现在是不是可以了

21:48.060 --> 21:49.060
这些东西是可以了

21:49.060 --> 21:50.060
但是

21:50.060 --> 21:51.060
scripps是肯定不行的

21:51.060 --> 21:53.060
因为scripps我没有处理过

21:53.060 --> 21:54.060
scripps

21:54.060 --> 21:56.940
比方说我这里

21:56.940 --> 21:57.940
而纳子

21:57.940 --> 21:58.940
E

21:58.940 --> 21:59.940
发布

21:59.940 --> 22:00.940
你看

22:00.940 --> 22:02.940
现在就变成这个东西了

22:02.940 --> 22:04.940
这就是关于这个存处型的

22:04.940 --> 22:06.940
它如何来进行防御

22:06.940 --> 22:07.940
就可以通过过滤

22:07.940 --> 22:09.940
通过一些过滤来进行防御

22:09.940 --> 22:10.940
防御

22:10.940 --> 22:11.940
主要的方式就是

22:11.940 --> 22:12.940
让它不要把2E那种

22:12.940 --> 22:13.940
保存到数据库

22:13.940 --> 22:15.940
就在这里进行防御

22:15.940 --> 22:16.940
好

22:16.940 --> 22:17.940
这是存处型

22:17.940 --> 22:18.940
好

22:18.940 --> 22:20.940
另一个是叫做反射型

22:21.940 --> 22:22.940
反射型

22:22.940 --> 22:24.940
反射型是什么意思呢

22:24.940 --> 22:26.940
它通常是这样子

22:26.940 --> 22:28.940
它通常是2E用户

22:28.940 --> 22:30.940
分享了

22:30.940 --> 22:33.940
一个正常

22:33.940 --> 22:34.940
网站的链接

22:34.940 --> 22:35.940
它不是2E网站的链接

22:35.940 --> 22:37.940
是正常网站的链接

22:38.940 --> 22:39.940
链接中

22:39.940 --> 22:42.940
带有2E那一种

22:42.940 --> 22:44.940
但是链接地址里边

22:45.940 --> 22:47.940
然后服务器

22:47.940 --> 22:48.940
是不是收到链接

22:48.940 --> 22:50.940
收到Gate请求

22:50.940 --> 22:52.940
服务器在不知情的情况下

22:53.940 --> 22:55.940
这是分享了一个正常链接

22:55.940 --> 22:57.940
然后普通用户

22:57.940 --> 23:00.940
正常用户

23:01.940 --> 23:04.940
点击了该链接

23:04.940 --> 23:06.940
所以请求到服务器了

23:06.940 --> 23:09.940
服务器在不知情的情况下

23:10.940 --> 23:13.940
把链接的2E内容

23:15.940 --> 23:16.940
读取了出来

23:16.940 --> 23:17.940
原理还是一样

23:17.940 --> 23:19.940
它总之把一个2E内容读了出来

23:19.940 --> 23:21.940
然后放到了页面中

23:22.940 --> 23:23.940
给予了

23:23.940 --> 23:25.940
就是放进了页面中

23:26.940 --> 23:28.940
让正常用户

23:29.940 --> 23:30.940
找到攻击

23:30.940 --> 23:32.940
就这么一种方式

23:32.940 --> 23:34.940
反射型是怎么回事

23:34.940 --> 23:35.940
给大家看一个例子吧

23:36.940 --> 23:38.940
比方说

23:38.940 --> 23:40.940
我们这里选择磨板的时候

23:40.940 --> 23:43.940
我这个磨板里边有一个超链接

23:43.940 --> 23:45.940
就是返回之前的

23:45.940 --> 23:47.940
返回之前的那个就是

23:47.940 --> 23:49.940
一个地址

23:51.940 --> 23:53.940
比方说我们这里有一个超链接

23:54.940 --> 23:56.940
就是跳转

23:56.940 --> 23:57.940
到

23:58.940 --> 23:59.940
到哪了

23:59.940 --> 24:00.940
它不一定

24:00.940 --> 24:02.940
它又可能到任何地方

24:02.940 --> 24:03.940
那么这个时候

24:03.940 --> 24:04.940
我为了灵活

24:04.940 --> 24:06.940
于是服务器做了这么一个处理

24:06.940 --> 24:07.940
它把地址栏参数

24:07.940 --> 24:09.940
里边的东西读出来

24:09.940 --> 24:10.940
给这个磨板

24:10.940 --> 24:11.940
我们把它叫做ReadyRagged

24:11.940 --> 24:12.940
我给它一个数据

24:12.940 --> 24:14.940
来自于地址栏参数

24:14.940 --> 24:16.940
ReadyRagged

24:17.940 --> 24:18.940
那么我把这个ReadyRagged

24:18.940 --> 24:20.940
是不是给了这个磨板

24:20.940 --> 24:21.940
那么磨板里边说

24:21.940 --> 24:22.940
选择这个东西

24:22.940 --> 24:23.940
对不对

24:23.940 --> 24:24.940
是不是选择这个东西

24:25.940 --> 24:26.940
对吧

24:26.940 --> 24:27.940
那么这个时候呢

24:27.940 --> 24:28.940
我们这里

24:29.940 --> 24:30.940
ReadyRagged

24:30.940 --> 24:31.940
对吧

24:31.940 --> 24:32.940
我用的是等号

24:32.940 --> 24:33.940
对不对

24:33.940 --> 24:34.940
也是进行了点码的

24:34.940 --> 24:35.940
就已经很安全了

24:35.940 --> 24:36.940
对不对

24:36.940 --> 24:37.940
看上去已经很安全了

24:37.940 --> 24:38.940
咱们来看一下吧

24:38.940 --> 24:40.940
那么现在我访问这个文章列表

24:40.940 --> 24:41.940
这个挑转到

24:41.940 --> 24:42.940
目前没地址对吧

24:42.940 --> 24:44.940
然后如果说我这里写了一个query

24:44.940 --> 24:46.940
选择一个ReadyRagged

24:46.940 --> 24:49.940
比方说我们挑转到一个就是首页

24:49.940 --> 24:51.940
那你看这里是不是挑转到首页

24:51.940 --> 24:52.940
对吧

24:52.940 --> 24:53.940
点击就挑转到首页了

24:53.940 --> 24:54.940
看没

24:54.940 --> 24:56.940
如果说我这里写的是一个abc

24:56.940 --> 24:58.940
挑转到是吧abc

24:58.940 --> 24:59.940
对吧

24:59.940 --> 25:00.940
没问题吧

25:00.940 --> 25:02.940
看上去好像都是没问题

25:02.940 --> 25:03.940
没问题的

25:03.940 --> 25:05.940
但是如果说是一个OE用户

25:05.940 --> 25:07.940
它就发现这一点

25:07.940 --> 25:09.940
它发现你这个地方

25:09.940 --> 25:11.940
原封不动的就放到了哪儿

25:11.940 --> 25:13.940
放到了这个超链接里边

25:13.940 --> 25:14.940
看了没

25:14.940 --> 25:15.940
你原封不动的就放到了

25:15.940 --> 25:16.940
超链接里边

25:16.940 --> 25:17.940
那我干嘛呢

25:17.940 --> 25:19.940
我就可以这样做

25:19.940 --> 25:22.940
我尝试着在这里写个script行不行

25:22.940 --> 25:26.860
看一下

25:26.860 --> 25:29.860
我尝试着写个script行不行

25:29.860 --> 25:31.860
好像那一不太行

25:31.860 --> 25:32.860
为什么呢

25:32.860 --> 25:33.860
我研究了一下

25:33.860 --> 25:35.860
为什么不行呢

25:35.860 --> 25:37.860
原来你给我编码过了

25:37.860 --> 25:38.860
这个服务器

25:38.860 --> 25:39.860
虽然说服务器可能没意识到

25:39.860 --> 25:40.860
但是呢

25:40.860 --> 25:41.860
100%等号

25:41.860 --> 25:42.860
无办引擎没有100%等号

25:42.860 --> 25:44.860
它是会自动进行编码的

25:44.860 --> 25:45.860
进行实体制服编码

25:45.860 --> 25:47.860
说这个东西我好像攻击不了

25:47.860 --> 25:48.860
那如果说你不编码的话

25:48.860 --> 25:50.860
就可能会出问题

25:50.860 --> 25:51.860
有些朋友不编码怎么

25:51.860 --> 25:53.860
不编码会出什么样的问题

25:53.860 --> 25:54.860
那你看吧

25:54.860 --> 25:57.860
不编码你看我会出什么样的问题

25:57.860 --> 25:58.860
好

25:58.860 --> 25:59.860
那么现在就没有编码

25:59.860 --> 26:00.860
没编码

26:00.860 --> 26:02.860
好像是也没啥

26:02.860 --> 26:04.860
它这个双引号里边点击过后

26:04.860 --> 26:06.860
它跳到这个地址了

26:06.860 --> 26:07.860
好像也没啥

26:07.860 --> 26:08.860
也没有执行脚本

26:08.860 --> 26:09.860
但是它发现了这一点

26:09.860 --> 26:11.860
它发现了你没有编码

26:11.860 --> 26:12.860
它会怎么写

26:12.860 --> 26:16.640
它会这样子写

26:16.640 --> 26:19.640
就有点类似于搜口珠珠了

26:19.640 --> 26:26.180
它会这样子写

26:26.180 --> 26:27.180
怎么回事

26:27.180 --> 26:29.180
看元旦吧

26:29.180 --> 26:31.180
你看到怎么砸回去了吗

26:31.180 --> 26:32.180
它写的这个东西

26:32.180 --> 26:34.180
是不把这个A元书给补全了

26:34.180 --> 26:35.180
补全了过后

26:35.180 --> 26:36.180
是不是会给你出一个脚本

26:36.180 --> 26:37.180
后续了它就不管了

26:37.180 --> 26:39.180
后边是不是可以运行任何脚本

26:39.180 --> 26:41.180
是不是又可以获取Cookie了

26:41.180 --> 26:43.180
所以说一定要编码

26:43.180 --> 26:45.180
就是用这个减号的地方

26:45.180 --> 26:46.180
一定要慎重

26:46.180 --> 26:47.180
一定要慎之又慎

26:47.180 --> 26:49.180
一定要进行编码

26:49.180 --> 26:50.180
你不知道它出哪个地方

26:50.180 --> 26:51.180
给你攻击过来了

26:51.180 --> 26:52.180
那么现在它肯定是没法了

26:52.180 --> 26:53.180
因为它编码过后了

26:53.180 --> 26:54.180
但它想了一个办法

26:54.180 --> 26:58.780
它可以这样做

26:58.780 --> 27:00.780
这样做了过后

27:00.780 --> 27:02.780
你看一下我们的元旦

27:02.780 --> 27:03.780
页面元旦

27:03.780 --> 27:05.780
它变成这个样子了

27:05.780 --> 27:06.780
看没

27:06.780 --> 27:07.780
这个样子看上去

27:07.780 --> 27:08.780
好像没有运行脚本

27:08.780 --> 27:11.780
但是如果说用户不小心点到了

27:11.780 --> 27:13.780
点到了过后是不是会运行

27:13.780 --> 27:14.780
对不对

27:14.780 --> 27:16.780
这就是为什么很多网站

27:16.780 --> 27:17.780
它做超链接的时候

27:17.780 --> 27:19.780
一定要把这个链接地址

27:19.780 --> 27:20.780
显示到后边

27:20.780 --> 27:21.780
万一是一个二一地址

27:21.780 --> 27:24.780
至少用户多多少少有点提醒

27:24.780 --> 27:26.780
但是这个地方还是没有解决

27:26.780 --> 27:27.780
有些用户根本就不知道

27:27.780 --> 27:28.780
这啥玩意点

27:28.780 --> 27:30.780
那是不是就运行那个代码了

27:30.780 --> 27:31.780
那么这个时候怎么办呢

27:31.780 --> 27:33.780
这个时候

27:33.780 --> 27:34.780
这个时候的做法

27:34.780 --> 27:36.780
其实也比较简单

27:36.780 --> 27:37.780
有很多做法

27:37.780 --> 27:39.780
比方说你可以用过滤的方式

27:39.780 --> 27:40.780
把这个就在这里

27:40.780 --> 27:41.780
这传数据的时候

27:41.780 --> 27:42.780
给它过滤一下

27:42.780 --> 27:44.780
把这个JavaScript冒号

27:44.780 --> 27:45.780
用正的表达式匹配一下

27:45.780 --> 27:46.780
把它匹配到杆三调

27:46.780 --> 27:47.780
就完事了

27:47.780 --> 27:49.780
其实还有一种很简单的方式

27:49.780 --> 27:51.780
如果说它就是注入到

27:51.780 --> 27:52.780
这个超链接地本来的前面链

27:52.780 --> 27:53.780
加上一个鞋杆

27:53.780 --> 27:55.780
加一个绝对链接

27:55.780 --> 27:57.780
后面都会使用绝对地址

27:57.780 --> 27:58.780
就完事了

27:58.780 --> 28:01.780
这也是一种做法

28:01.780 --> 28:02.780
这也是一种做法

28:02.780 --> 28:03.780
那么我们就约定好

28:03.780 --> 28:04.780
那么你这里边

28:04.780 --> 28:05.780
就不要写第一个鞋杆了

28:05.780 --> 28:07.780
我们都从根路径开始

28:07.780 --> 28:08.780
那么现在看一下

28:08.780 --> 28:09.780
就挑战到这个地址

28:09.780 --> 28:10.780
那么两种做法

28:10.780 --> 28:12.780
根据情况来自行使用

28:12.780 --> 28:13.780
都可以

28:13.780 --> 28:14.780
还有一种方

28:14.780 --> 28:16.780
还有一种就是这个

28:19.780 --> 28:20.780
是什么的

28:20.780 --> 28:21.780
当然这前面写上一个

28:21.780 --> 28:22.780
完整路径也行

28:22.780 --> 28:23.780
ADDP冒号

28:23.780 --> 28:24.780
总之你不要用

28:24.780 --> 28:25.780
JavaScript的开头

28:25.780 --> 28:26.780
你不要以这个开头

28:26.780 --> 28:27.780
就行了

28:27.780 --> 28:28.780
怎么知道这个意思

28:30.780 --> 28:32.780
然后还有一个就是

28:32.780 --> 28:36.780
关于第三种CSS攻击方式

28:36.780 --> 28:38.780
叫做DOM行

28:38.780 --> 28:40.780
这种方式比较少一点

28:42.780 --> 28:43.780
这种攻击方式是什么

28:43.780 --> 28:46.780
它是恶意用户

28:49.780 --> 28:51.780
通过存储的方式也好

28:51.780 --> 28:53.780
通过反射的方式也好

28:53.780 --> 28:55.780
它就可以通过任何方式

28:55.780 --> 29:04.540
向服务器中注入了一些DOM元素

29:04.540 --> 29:11.540
从而影响了服务器的DOM结构

29:11.540 --> 29:12.540
从影响它的DOM结构

29:12.540 --> 29:18.540
然后普通用户访问时

29:18.540 --> 29:26.540
运行的是服务器的正常介石代码

29:26.540 --> 29:27.540
它投到的介石代码

29:27.540 --> 29:28.540
不是恶意用户

29:28.540 --> 29:30.540
恶意用户没有给你注入任何介石代码

29:30.540 --> 29:33.540
它运行的是正常的服务器的介石代码

29:33.540 --> 29:35.540
但是由于DOM结构改变

29:35.540 --> 29:36.540
因为有些介石

29:36.540 --> 29:37.540
它是根据DOM里面的东西

29:37.540 --> 29:40.540
比方说读取某一个元素里面的内容

29:40.540 --> 29:42.540
把内容来进行一些处理

29:42.540 --> 29:44.540
那么如果说DOM不是服务器的DOM

29:44.540 --> 29:46.540
是别人给你注入的DOM

29:46.540 --> 29:47.540
你不是把别人的内容读到了

29:47.540 --> 29:49.540
它是利用正常的介石

29:49.540 --> 29:51.540
它是读到了一个错误的内容

29:51.540 --> 29:52.540
进行攻击

29:52.540 --> 29:53.540
这种情况比较少一点

29:53.540 --> 29:54.540
那么这种情况如何防御呢

29:54.540 --> 29:56.540
这种情况说一下就行了

29:56.540 --> 30:00.540
你在反射在模板引擎里边渲染的时候

30:00.540 --> 30:02.540
全部使用等号

30:02.540 --> 30:04.540
就是进行编码过河渲染

30:04.540 --> 30:06.540
就导致它不再是一个正常的动物元素

30:06.540 --> 30:08.540
就完事了

30:08.540 --> 30:10.540
当我们真的需要渲染的时候

30:10.540 --> 30:12.540
把它限制到某一个区域

30:12.540 --> 30:14.540
不要信任里边的任何的动物元素

30:14.540 --> 30:15.540
比方说我们这里

30:15.540 --> 30:16.540
文章内容这里

30:16.540 --> 30:17.540
它有可能是

30:17.540 --> 30:18.540
因为一些复文门框

30:18.540 --> 30:19.540
给它加入的一些内容

30:19.540 --> 30:20.540
对吧

30:20.540 --> 30:21.540
利用了复文门框加入的一些内容

30:21.540 --> 30:22.540
那么这些内容

30:22.540 --> 30:24.540
你不要用介石去读

30:24.540 --> 30:25.540
明白意思吧

30:25.540 --> 30:27.540
或者就算用介石读

30:27.540 --> 30:28.540
但是不要跟服务器之间发生

30:28.540 --> 30:29.540
就是无非就是

30:29.540 --> 30:32.540
做一些页面内的一些动态特效

30:32.540 --> 30:33.540
或者是改变样式之类的

30:33.540 --> 30:35.540
不要跟服务器之间发生交互

30:35.540 --> 30:37.540
就是不要信任这里边的内容

30:37.540 --> 30:38.540
你读可以

30:38.540 --> 30:39.540
不要信任它就行了

30:39.540 --> 30:41.540
它可以来自于任何东西

30:41.540 --> 30:42.540
明白了意思吧

30:42.540 --> 30:44.540
这种情况它攻击的情况

30:44.540 --> 30:45.540
比较少一点

30:45.540 --> 30:47.540
主要的攻击方式就是前面两种

30:47.540 --> 30:49.540
反射型和存住型

30:49.540 --> 30:51.540
我都说了怎么棋棋检学了

30:51.540 --> 30:53.540
这是关于这个

30:53.540 --> 30:54.540
其实我们有的时候

30:54.540 --> 30:56.540
就把脚本注入攻击

30:56.540 --> 30:58.540
这是关于这个地方

30:58.540 --> 31:00.540
平时我们服务器的安全性

31:00.540 --> 31:01.540
一个是注意这个

31:01.540 --> 31:03.540
一个是注意我们上去可以讲的

31:03.540 --> 31:04.540
CSRF

31:04.540 --> 31:06.540
这是两个比较常见的攻击方式

