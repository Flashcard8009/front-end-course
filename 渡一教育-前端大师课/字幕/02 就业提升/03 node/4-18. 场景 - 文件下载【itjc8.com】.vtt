WEBVTT

00:01.010 --> 00:03.310
这也可能我们来说一下这个文件下载

00:03.310 --> 00:04.810
大家有讲了文件上传 对吧

00:04.810 --> 00:07.010
我们再讲这个文件下载

00:07.810 --> 00:09.410
这个文件下载呢

00:09.410 --> 00:10.810
我们按理说的话

00:10.810 --> 00:13.410
也应该是先讲原理再讲操作的吧

00:13.410 --> 00:17.010
但是我们这里把原理和操作混合起来讲

00:17.010 --> 00:18.110
这样子好讲一点

00:18.110 --> 00:20.010
不如说光讲原理的话

00:20.010 --> 00:22.410
这个地方就不是那么好讲

00:22.410 --> 00:24.310
你看不到效果的很萌的

00:24.310 --> 00:26.510
所以说我们这里混合起来讲吧

00:27.810 --> 00:29.410
我们这样子

00:29.510 --> 00:30.910
我们在这里呢

00:30.910 --> 00:32.110
新建一个文件夹

00:34.910 --> 00:36.410
我们在这里新建个文件夹

00:37.710 --> 00:40.310
这里写上resources

00:40.310 --> 00:41.410
这个文件夹是干嘛的呢

00:41.410 --> 00:41.910
这个文件夹呢

00:41.910 --> 00:45.510
就是在里边去保存一些我们需要下载的文件

00:45.510 --> 00:47.410
当然这个文件夹不一定是这个名字

00:47.410 --> 00:49.110
你随便用什么名字都行

00:49.110 --> 00:50.610
技术是很灵活的

00:50.610 --> 00:52.910
就是你听课的时候一定要听他的关键点

00:52.910 --> 00:54.110
这个文件夹无所谓的

00:54.110 --> 00:55.610
当然这个文件夹能不能是这个呢

00:55.610 --> 00:57.410
就是两用户上传的文件夹

00:57.510 --> 00:57.910
可不可以呢

00:57.910 --> 00:58.810
也可以啊

00:58.810 --> 01:00.510
用户上传的过后别的用户可以下载

01:00.510 --> 01:00.710
对吧

01:00.710 --> 01:01.810
也可以啊

01:01.810 --> 01:03.910
当然你可以任何文件夹都可以啊

01:03.910 --> 01:05.910
当然这个文件夹能不能做一个上传文件夹了

01:05.910 --> 01:06.610
也可以啊

01:06.610 --> 01:07.210
对吧

01:07.210 --> 01:08.810
那管理员上传一些文件

01:08.810 --> 01:10.010
对吧提供给用户下载

01:10.010 --> 01:11.810
上传到这个文件夹用户就可以下载了

01:11.810 --> 01:12.310
对吧

01:12.310 --> 01:13.010
就这么简单

01:13.010 --> 01:14.310
所以说无所谓的

01:14.310 --> 01:14.610
不过呢

01:14.610 --> 01:15.310
我这里呢

01:15.310 --> 01:16.910
已经讲完了文件上传了

01:16.910 --> 01:18.010
所以说我这里呢

01:18.010 --> 01:19.810
就单独来弄个文件夹吧

01:19.810 --> 01:20.910
就是这个文件夹

01:20.910 --> 01:21.110
好

01:21.110 --> 01:22.210
这个文件夹呢

01:22.210 --> 01:23.710
我们希望呢

01:23.810 --> 01:25.610
在里边放一些可以下载的文件

01:25.610 --> 01:26.610
我就随便放一些吧

01:26.610 --> 01:28.310
我这里准备好了两个文件啊

01:28.310 --> 01:28.910
一个呢

01:28.910 --> 01:29.810
是一张图片

01:29.810 --> 01:30.910
一个GPG图片

01:30.910 --> 01:31.210
一个呢

01:31.210 --> 01:32.710
是把个图片打个压缩包

01:32.710 --> 01:33.910
两个都是一样的

01:33.910 --> 01:35.310
就随便准备两个文件

01:35.310 --> 01:35.710
好吧

01:35.710 --> 01:36.910
我把这两个文件呢

01:36.910 --> 01:37.710
拖到那个

01:38.710 --> 01:39.910
拖到这个文件夹在那边去

01:39.910 --> 01:40.110
好

01:40.110 --> 01:41.910
那么这两个文件就可以下载了

01:41.910 --> 01:42.310
对不对

01:43.310 --> 01:43.510
好

01:43.510 --> 01:44.510
那么这个地方呢

01:44.510 --> 01:45.810
我们最好了

01:45.810 --> 01:46.810
把这个文件夹呢

01:46.810 --> 01:48.510
再给一个落里边啊

01:48.510 --> 01:49.210
把它去掉

01:49.210 --> 01:51.210
把这个Resources文件夹去掉

01:51.210 --> 01:52.210
Resources

01:52.210 --> 01:52.710
去掉

01:52.710 --> 01:53.510
因为这个地方

01:54.510 --> 01:56.110
这个文件夹啊

01:56.110 --> 01:57.410
我们现在是开发阶段吧

01:57.410 --> 01:57.810
因此呢

01:57.810 --> 01:59.210
跟服务器上肯定不一样的

01:59.210 --> 01:59.910
所以说服务器呢

01:59.910 --> 02:01.510
不需要用开发阶段的这些文件

02:01.510 --> 02:02.910
把它去掉啊

02:02.910 --> 02:04.110
那么就行了

02:04.110 --> 02:04.610
准备好了

02:04.610 --> 02:05.110
对吧

02:05.110 --> 02:06.210
那么现在怎么下载呢

02:06.210 --> 02:07.710
我们肯定要有个新的API

02:07.710 --> 02:08.410
那么这个时候呢

02:08.410 --> 02:09.310
我们可以规定啊

02:09.310 --> 02:10.010
人为的规定

02:11.210 --> 02:12.110
比方说

02:12.110 --> 02:13.310
咱们的规定

02:13.310 --> 02:15.110
反而是你访问这个地址

02:15.110 --> 02:15.710
Res

02:15.710 --> 02:16.710
不要说我们的资源

02:16.710 --> 02:17.310
Resources

02:17.310 --> 02:19.110
或者是Download的

02:19.110 --> 02:19.710
都行

02:19.710 --> 02:20.510
随便你啊

02:20.510 --> 02:21.610
看你执行规定

02:21.610 --> 02:22.710
执行规定一个地址

02:22.710 --> 02:23.710
你要下载文件

02:23.710 --> 02:24.910
下载我们服务器的文件

02:24.910 --> 02:25.210
ok

02:25.210 --> 02:27.210
你从这个地址出发来访问

02:27.210 --> 02:27.410
好

02:27.410 --> 02:28.310
后边跟上什么

02:28.310 --> 02:29.110
跟上文件名

02:29.110 --> 02:29.510
比方说

02:29.510 --> 02:31.310
heal.jpg

02:31.310 --> 02:32.610
或者是heal.dip

02:32.610 --> 02:34.210
跟上你的文件名

02:34.210 --> 02:35.110
那么这个就是

02:35.110 --> 02:36.410
特别跟上文件名

02:36.410 --> 02:37.610
我们执行约定好

02:37.610 --> 02:38.610
约定好一个路径

02:38.610 --> 02:39.610
通过这个路径呢

02:39.610 --> 02:40.310
使用什么方法

02:40.310 --> 02:40.610
请求呢

02:40.610 --> 02:41.510
使用get请求

02:41.510 --> 02:43.310
就可以下载文件了

02:43.310 --> 02:43.610
来吧

02:43.610 --> 02:44.710
我们来怎么来做呢

02:44.710 --> 02:45.910
我们可以在这里边

02:45.910 --> 02:47.510
再写个路由啊

02:47.510 --> 02:48.710
再写个Download的吧

02:49.710 --> 02:51.710
.js

02:51.710 --> 02:53.710
或者叫Risk.js

02:53.710 --> 02:54.710
统一嘛

02:54.710 --> 02:56.710
Risk跟那个同名的

02:56.710 --> 02:57.710
都要跟Risk

02:57.710 --> 02:58.710
Download的

02:58.710 --> 02:59.710
随便吧

02:59.710 --> 03:00.710
那么现在呢

03:00.710 --> 03:01.710
我们在这里边写上

03:01.710 --> 03:02.710
导入一个require

03:02.710 --> 03:07.040
express

03:07.040 --> 03:09.040
放到边量

03:09.040 --> 03:10.040
express里边

03:10.040 --> 03:11.040
然后呢

03:11.040 --> 03:12.040
建立一个路由

03:12.040 --> 03:13.040
rotr

03:13.040 --> 03:14.040
express

03:14.040 --> 03:15.040
rotr

03:16.040 --> 03:17.040
好

03:17.040 --> 03:18.040
接下来呢

03:18.040 --> 03:19.040
我们最后把这个

03:19.040 --> 03:20.040
rotr导出

03:21.040 --> 03:22.040
好

03:22.040 --> 03:23.040
现在呢

03:23.040 --> 03:24.040
我们回到这个inlet里边

03:24.040 --> 03:25.040
比方说

03:25.040 --> 03:26.040
我们随便找个位置

03:26.040 --> 03:27.040
在这吧

03:27.040 --> 03:28.040
处理

03:28.040 --> 03:31.040
对下载支援的请求

03:31.040 --> 03:32.040
那么这里边

03:32.040 --> 03:33.040
我们随便使用一个

03:33.040 --> 03:34.040
比方说

03:34.040 --> 03:35.040
Risk

03:35.040 --> 03:36.040
通过这样的地址

03:36.040 --> 03:37.040
来请求的时候呢

03:37.040 --> 03:38.040
我把它交给谁呢

03:38.040 --> 03:39.040
交给另外一个中间键

03:39.040 --> 03:41.040
APM里边的

03:41.040 --> 03:42.040
Download

03:42.040 --> 03:43.040
交给这个中间键

03:43.040 --> 03:44.040
就这么回事

03:45.040 --> 03:46.040
那么这个中间键里边

03:46.040 --> 03:47.040
我们要处理什么请求呢

03:47.040 --> 03:48.040
我们要处理的是什么

03:48.040 --> 03:49.040
get请求对吧

03:49.040 --> 03:50.040
出来

03:50.040 --> 03:51.040
什么请求格式呢

03:51.040 --> 03:52.040
是给我附带了一个

03:52.040 --> 03:53.040
文件名

03:53.040 --> 03:54.040
对吧

03:54.040 --> 03:55.040
我们用动态度由

03:55.040 --> 03:56.040
这个地方我们占位

03:56.040 --> 03:57.040
占个文件名在这

03:57.040 --> 03:58.040
随便什么都可以

03:58.040 --> 03:59.040
好

03:59.040 --> 04:00.040
那么这个时候呢

04:00.040 --> 04:01.040
我们来进行处理

04:01.040 --> 04:02.040
好

04:02.040 --> 04:03.040
那么这个请求怎么来处理呢

04:03.040 --> 04:04.040
好

04:04.040 --> 04:05.040
这个地方呢

04:05.040 --> 04:06.040
我们先不着急讲原理

04:06.040 --> 04:07.040
我先告诉你怎么写的代码

04:07.040 --> 04:08.040
这代码写写很简单

04:08.040 --> 04:10.040
当你要下载文件的时候

04:10.040 --> 04:11.040
就是如果说你这个请求

04:11.040 --> 04:12.040
是为了下载一个文件

04:12.040 --> 04:13.040
你只需要调用这个函数

04:13.040 --> 04:15.040
叫Risk里边一个函数

04:15.040 --> 04:17.040
叫做Download

04:17.040 --> 04:18.040
有这么一个函数

04:18.040 --> 04:19.040
这个函数呢

04:19.040 --> 04:21.040
它有这么几个函数要传递

04:21.040 --> 04:22.040
第一个函数呢

04:22.040 --> 04:24.040
是文件的绝对路径

04:24.040 --> 04:26.040
就是完整路径

04:26.040 --> 04:27.040
那你看啊

04:27.040 --> 04:28.040
我现在是不是能够

04:28.040 --> 04:29.040
获得这个文件的名字

04:29.040 --> 04:30.040
那文件的绝对路径在哪

04:30.040 --> 04:31.040
是不是在这里边

04:31.040 --> 04:32.040
对吧

04:32.040 --> 04:33.040
所以说我们可以用

04:33.040 --> 04:34.040
PASS这么一个就是模块

04:34.040 --> 04:36.040
来构造这个文件的绝对路径

04:36.040 --> 04:37.040
好

04:37.040 --> 04:38.040
来吧

04:38.040 --> 04:39.040
构造一下

04:39.040 --> 04:41.040
PASS Result

04:41.040 --> 04:43.040
Result

04:43.040 --> 04:44.040
一个个来

04:44.040 --> 04:45.040
第一段

04:45.040 --> 04:46.040
我们首先是当前目录

04:46.040 --> 04:47.040
从当前目录出发

04:47.040 --> 04:48.040
然后呢

04:48.040 --> 04:49.040
API这个目录对吧

04:49.040 --> 04:50.040
返回上级目录

04:50.040 --> 04:51.040
然后再返回上级目录

04:51.040 --> 04:52.040
是不是到根目录了

04:52.040 --> 04:53.040
根目录过后呢

04:53.040 --> 04:54.040
我们找了个什么

04:54.040 --> 04:55.040
Resources

04:55.040 --> 04:56.040
是这个文件夹

04:56.040 --> 04:57.040
然后呢

04:57.040 --> 04:58.040
文件夹里边哪个文件名呢

04:58.040 --> 04:59.040
是不是请求的文件名

04:59.040 --> 05:00.040
对吧

05:00.040 --> 05:02.040
Rick.file name

05:02.040 --> 05:05.040
Rick.paras.file name

05:05.040 --> 05:06.040
对吧

05:06.040 --> 05:07.040
是不是可以把整个文件的

05:07.040 --> 05:08.040
绝对路径拿到了

05:08.040 --> 05:09.040
APS

05:09.040 --> 05:10.040
PASS

05:10.040 --> 05:12.040
是不是文件的绝对路径

05:12.040 --> 05:13.040
好

05:13.040 --> 05:14.040
我们把第一个参数

05:14.040 --> 05:15.040
就传进去了

05:15.040 --> 05:16.040
这是文件的绝对路径

05:16.040 --> 05:18.040
这个传输传的是

05:18.040 --> 05:19.040
给你们解释一下

05:19.040 --> 05:20.040
先大概解释一下

05:20.040 --> 05:23.040
就是在浏览器里边下载的时候

05:23.040 --> 05:25.040
是不是会弹出个框框

05:25.040 --> 05:28.040
他问你保存的文件的名字是怎么

05:28.040 --> 05:29.040
对吧

05:29.040 --> 05:30.040
那么里边是不是有个默认名字

05:30.040 --> 05:31.040
对不对

05:31.040 --> 05:33.040
那么这个默认名字呢

05:33.040 --> 05:34.040
就是第二个参数

05:34.040 --> 05:35.040
我们一会看一下

05:35.040 --> 05:36.040
消息格式就知道了

05:36.040 --> 05:37.040
其实最本质的

05:37.040 --> 05:38.040
还是通过IP协议

05:38.040 --> 05:39.040
在相互传输

05:39.040 --> 05:40.040
那么第二个参数呢

05:40.040 --> 05:42.040
就是那个默认的文件名字

05:42.040 --> 05:43.040
所以写啥都可以

05:43.040 --> 05:44.040
我们一般来说呢

05:44.040 --> 05:45.040
我们一般随便写一个吧

05:45.040 --> 05:46.040
随便写一个ABC

05:46.040 --> 05:47.040
随便写一下写一个

05:47.040 --> 05:49.040
第三个参数是错误处理

05:49.040 --> 05:50.040
就是如果说这个文件不存在

05:50.040 --> 05:52.040
或者是中间有什么错误

05:52.040 --> 05:53.040
那么你如果说你要处理的话

05:53.040 --> 05:54.040
你有写第三个参数

05:54.040 --> 05:55.040
第三个参数是个函数

05:55.040 --> 05:56.040
它可以传个错误

05:56.040 --> 05:57.040
对象你执行处理

05:57.040 --> 05:59.040
当然你也可以不处理

05:59.040 --> 06:00.040
不处理的话就会爆错

06:00.040 --> 06:01.040
爆错的话

06:01.040 --> 06:02.040
那么到时候

06:02.040 --> 06:03.040
如果说爆错的话

06:03.040 --> 06:04.040
我们后来之前不是写了一个

06:04.040 --> 06:05.040
A-WM吗

06:05.040 --> 06:07.040
都是写了个处理错误

06:07.040 --> 06:08.040
让它去完成

06:08.040 --> 06:09.040
也行

06:09.040 --> 06:10.040
就写完了

06:10.040 --> 06:11.040
就写完了

06:11.040 --> 06:12.040
就这么简单

06:12.040 --> 06:13.040
好 写完了过后

06:13.040 --> 06:14.040
我们把它

06:15.040 --> 06:18.800
重新来 运行一下

06:18.800 --> 06:19.800
APM Start

06:19.800 --> 06:21.800
爆错了

06:21.800 --> 06:22.800
它说什么呢

06:22.800 --> 06:24.800
它说

06:25.800 --> 06:29.760
RotorU is required

06:29.760 --> 06:30.760
Midware Function

06:30.760 --> 06:32.760
Basco's Objects

06:35.760 --> 06:40.640
它说它得到了一个空对象

06:40.640 --> 06:41.640
Margin Export

06:41.640 --> 06:42.640
对了吗

06:42.640 --> 06:43.640
现在对了吗

06:43.640 --> 06:44.640
OK

06:44.640 --> 06:45.640
对了

06:45.640 --> 06:47.640
好 那么现在我们就完成了

06:47.640 --> 06:48.640
完成了过后

06:48.640 --> 06:50.640
我们现在在Postman里面去试一下

06:50.640 --> 06:51.640
在这里面去试一下

06:51.640 --> 06:52.640
来吧

06:52.640 --> 06:53.640
我们请求一下

06:53.640 --> 06:54.640
Localhost

06:54.640 --> 06:56.640
5008

06:56.640 --> 06:57.640
然后Race

06:57.640 --> 06:58.640
对吧 资源

06:58.640 --> 07:00.640
请求这个资源

07:00.640 --> 07:01.640
哪个资源呢

07:01.640 --> 07:02.640
我们的文件名是什么呢

07:02.640 --> 07:04.640
Heal.jpg

07:04.640 --> 07:06.640
比方说Heal.jpg

07:06.640 --> 07:09.080
好 Send

07:09.080 --> 07:10.080
发动请求

07:11.080 --> 07:13.080
我们在Postman里面

07:13.080 --> 07:14.080
看到了一张图片

07:14.080 --> 07:15.080
看到了一张图片

07:15.080 --> 07:17.080
我们关注的不是这个

07:17.080 --> 07:18.080
关注的是什么呢

07:18.080 --> 07:19.080
Headers

07:20.080 --> 07:21.080
关注的是这样

07:21.080 --> 07:24.080
没有出发文件下载

07:24.080 --> 07:25.080
因为这是Postman

07:25.080 --> 07:27.080
Postman还不会给你下载文件的

07:27.080 --> 07:30.080
在这里面我们看到了想用头

07:30.080 --> 07:33.080
想用头里面有Content Type

07:33.080 --> 07:34.080
是什么呢

07:34.080 --> 07:35.080
是文件的类型

07:35.080 --> 07:38.080
MIME类型

07:38.080 --> 07:40.080
那么类型它是怎么来决定的

07:40.080 --> 07:41.080
当你调到这个函数的时候

07:41.080 --> 07:42.080
它会根据你的文件名

07:42.080 --> 07:44.080
就是你的文件资源的后续名

07:44.080 --> 07:46.080
来决定这个MIME类型

07:46.080 --> 07:48.080
它会来决定这个类型

07:48.080 --> 07:50.080
Content Length是什么呢

07:50.080 --> 07:52.080
表示这个文件的字节数

07:52.080 --> 07:54.080
就是我们消息体的数量

07:54.080 --> 07:55.080
我们消息体里面

07:55.080 --> 07:56.080
其实就是文件的二净值数据

07:56.080 --> 07:57.080
明白了意思吧

07:57.080 --> 07:59.080
消息体里面就是文件的

07:59.080 --> 08:00.080
二净值数据

08:00.080 --> 08:02.080
然后它就是文件的大小

08:02.080 --> 08:04.080
就这么个意思

08:04.080 --> 08:05.080
然后除了这两个

08:05.080 --> 08:07.080
这两个不是关键

08:07.080 --> 08:08.080
为什么呢

08:08.080 --> 08:09.080
如果说只有这两个

08:09.080 --> 08:10.080
想用头的话

08:10.080 --> 08:11.080
那就是普普通通一个图片

08:11.080 --> 08:12.080
跟下载文件有什么关系的

08:12.080 --> 08:13.080
关键是这两个

08:13.080 --> 08:16.080
这两个才是跟文件下载相关的

08:16.080 --> 08:19.080
一个叫content的depreciation

08:19.080 --> 08:21.080
dispreciation

08:21.080 --> 08:23.080
这个东西该怎么翻译呢

08:23.080 --> 08:27.080
我真的还不是那么好翻译

08:27.080 --> 08:29.080
dispreciation

08:29.080 --> 08:30.080
我们可以认为

08:30.080 --> 08:32.080
它是高速客户端

08:32.080 --> 08:34.080
就是我这个消息体

08:34.080 --> 08:36.080
你应该怎么来处理

08:36.080 --> 08:38.080
如果说你不告诉它

08:38.080 --> 08:39.080
这个东西的话

08:39.080 --> 08:41.080
它就是认为是一个普通的相应

08:41.080 --> 08:44.080
浏览器是不是就把普通的相应干嘛

08:44.080 --> 08:45.080
你是GS我就运行

08:45.080 --> 08:47.080
你是CSS我就当成央视

08:47.080 --> 08:49.080
你是图片我就给你显示

08:49.080 --> 08:51.080
它是用这种方式来处理的

08:51.080 --> 08:53.080
如果说你把改了过后

08:53.080 --> 08:54.080
改成什么呢

08:54.080 --> 08:55.080
改成attachment

08:55.080 --> 08:56.080
什么意思

08:56.080 --> 08:57.080
表示的是附件

08:57.080 --> 08:58.080
我们发邮件的时候

08:58.080 --> 08:59.080
是不是一个附件

08:59.080 --> 09:01.080
是附件的意思

09:01.080 --> 09:02.080
我就希望客户端

09:02.080 --> 09:04.080
你不要把它当成一个普通的内容

09:04.080 --> 09:05.080
而是把它当成一个附件

09:05.080 --> 09:06.080
附件用来干嘛

09:06.080 --> 09:07.080
是不是用来下载的

09:07.080 --> 09:08.080
浏览器一看

09:08.080 --> 09:09.080
你给我的是一个附件

09:09.080 --> 09:11.080
ok 那我就触发下载行为

09:11.080 --> 09:14.080
真正的下载行为是浏览器触发的

09:14.080 --> 09:16.080
为什么浏览器会触发下载行为

09:16.080 --> 09:18.080
因为我给服务器相应的

09:18.080 --> 09:19.080
告诉它

09:19.080 --> 09:20.080
告诉了浏览器

09:20.080 --> 09:22.080
我给的是个附件

09:22.080 --> 09:23.080
当Pose面它没甩它

09:23.080 --> 09:25.080
Pose面它它才不管

09:25.080 --> 09:26.080
你给我的管理是给我的是什么

09:26.080 --> 09:28.080
所以它就把包底给我显示出来

09:28.080 --> 09:30.080
包底显示出来就是个图片

09:30.080 --> 09:32.080
然后File內

09:32.080 --> 09:33.080
那么浏览器下载的时候

09:33.080 --> 09:36.080
是不是这个abc就是我们这里给的

09:36.080 --> 09:37.080
对吧 是不是在这里给的

09:37.080 --> 09:38.080
那么浏览器下载的时候

09:38.080 --> 09:40.080
是不是它会弹出一个框框

09:40.080 --> 09:41.080
让你保存文件

09:41.080 --> 09:42.080
对吧 那么保存了

09:42.080 --> 09:44.080
默认的文件名就是一个abc

09:44.080 --> 09:45.080
就这么个意思

09:45.080 --> 09:47.080
好 那么下边这个琴球想应头

09:47.080 --> 09:48.080
是什么意思呢

09:48.080 --> 09:50.080
叫做accept ranges

09:50.080 --> 09:51.080
什么意思呢

09:51.080 --> 09:52.080
你看我们平时下载的时候

09:52.080 --> 09:54.080
如果说下载一些大文件的时候

09:54.080 --> 09:55.080
是不是可以暂停

09:55.080 --> 09:56.080
可以继续

09:56.080 --> 09:58.080
是不是用这种方式来下载

09:58.080 --> 10:00.080
对吧 那么关键的就是看

10:00.080 --> 10:03.080
浮觐能不能支持端点蓄传

10:03.080 --> 10:06.080
其实端点蓄传很简单

10:06.080 --> 10:07.080
没有那么复杂

10:07.080 --> 10:08.080
一会我们就可以看到

10:08.080 --> 10:10.080
端点蓄传是什么样子的

10:10.080 --> 10:13.080
总之这个想应头就是告诉客户端

10:13.080 --> 10:16.080
我支持 支持不支持端点蓄传

10:16.080 --> 10:18.080
那么如果说这个

10:18.080 --> 10:20.080
没有这个想应头 它就不支持

10:20.080 --> 10:22.080
或者这个想应头的结果生产

10:22.080 --> 10:23.080
none它就不支持

10:23.080 --> 10:25.080
就这么个意思

10:25.080 --> 10:26.080
那么它写个byte是什么意思呢

10:26.080 --> 10:30.080
表示浮觐器支持端点蓄传

10:30.080 --> 10:33.080
而且蓄传的基本单位是字节

10:33.080 --> 10:35.080
byte是字节

10:35.080 --> 10:36.080
就这么个意思

10:36.080 --> 10:38.080
有用的 我们后边就可以看到了

10:38.080 --> 10:39.080
那么接下来

10:39.080 --> 10:40.080
我们为了给大家看到一个

10:40.080 --> 10:41.080
更明显的效果

10:41.080 --> 10:42.080
我们把这个地址

10:42.080 --> 10:45.080
给它复制到浏览器里面去

10:45.080 --> 10:48.080
你看 看它怎么来触发浏览器的行为的

10:48.080 --> 10:50.080
按你说以前我们这种做法

10:50.080 --> 10:51.080
它一定是在浏览器里面

10:51.080 --> 10:54.080
把这个图片给我显示出来 对吧

10:54.080 --> 10:56.080
有这样做吗

10:56.080 --> 10:58.080
没有 它是不是触发了下载行为

10:58.080 --> 10:59.080
而这个下载行为的

10:59.080 --> 11:01.080
默认的文件名是不是abc

11:01.080 --> 11:05.610
我突然看到一个东西

11:05.610 --> 11:07.610
昨天晚上我找了好久

11:07.610 --> 11:09.610
我真的是找这个玩意

11:09.610 --> 11:11.610
真把它找到了

11:11.610 --> 11:13.610
不要问着我要 不给

11:13.610 --> 11:15.610
自己的 慢慢吃这个瓜

11:15.610 --> 11:16.610
我还没开始看呢

11:16.610 --> 11:19.610
那么这个地方就是文件的名字

11:19.610 --> 11:21.610
那么这个abc 是不是可以改的

11:21.610 --> 11:23.610
对吧 所以说你明白了吧

11:23.610 --> 11:24.610
这个abc是啥意思

11:24.610 --> 11:25.610
就这个地方啥意思

11:25.610 --> 11:26.610
所以说这个地方

11:26.610 --> 11:28.610
我们一般肯定不是传abc

11:28.610 --> 11:29.610
我们传的是什么呢

11:29.610 --> 11:31.610
传的是req 第二什么

11:31.610 --> 11:34.610
params 就是你要下载这个文件的名字

11:34.610 --> 11:36.610
对吧 你要下载的文件名字

11:36.610 --> 11:37.610
我就不能传给你

11:37.610 --> 11:39.610
当然这个地方可以传任何东西

11:39.610 --> 11:42.610
好 比方说我们现在再来刷新

11:42.610 --> 11:45.610
在这里吧 再来重新升的一下

11:45.610 --> 11:47.610
你看是不是得到的file name

11:47.610 --> 11:49.610
here的jpg 我再来看

11:49.610 --> 11:51.610
here的jpg 它改动

11:51.610 --> 11:53.610
怎么还是abc

11:53.610 --> 11:56.610
应该是那个

11:56.610 --> 11:59.610
没有那个有缓存的问题

11:59.610 --> 12:01.610
应该是有缓存的问题

12:01.610 --> 12:02.610
应该是有缓存的问题

12:02.610 --> 12:03.610
这里应该是要变的

12:03.610 --> 12:05.610
它应该是缓存的是支援

12:06.610 --> 12:09.610
这个浏览器缓存 这个东西还怎么弄

12:09.610 --> 12:11.610
这里还不好 不好直接

12:11.610 --> 12:13.610
一刷新就没了

12:13.610 --> 12:17.050
还不行 那没办法

12:17.050 --> 12:19.050
总之是这么个意思

12:19.050 --> 12:21.050
纯粹是这么个意思就行了

12:21.050 --> 12:24.050
这就是这一块它的含义

12:24.050 --> 12:25.050
那么这一块的含义就是

12:25.050 --> 12:26.050
把这个文件内容读出来

12:26.050 --> 12:27.050
因为它发送消息体

12:27.050 --> 12:29.050
消息体就是文件内容

12:29.050 --> 12:31.050
那么现在呢 其实就可以保存文件了

12:31.050 --> 12:33.050
你看一下

12:33.050 --> 12:35.050
保存 那么就here的jpg

12:35.050 --> 12:38.050
还是用这个名字 保存桌面上

12:38.050 --> 12:40.050
桌面上不行 桌面上已经有这个名字

12:40.050 --> 12:42.050
把桌面上删了

12:42.050 --> 12:45.750
删掉

12:45.750 --> 12:47.750
就保存桌面上

12:47.750 --> 12:49.750
点存储

12:49.750 --> 12:51.750
你看 是不是下载完了

12:51.750 --> 12:53.750
你看 这个文件是不是出来了

12:53.750 --> 12:55.750
这就是我们下载的文件 对不对

12:55.750 --> 12:57.750
好 这就是一个下载文件

12:57.750 --> 12:58.750
那么如果说你要在网页上

12:58.750 --> 13:00.750
网页上点击过后下载呢

13:00.750 --> 13:01.750
是不是很简单的

13:01.750 --> 13:02.750
比方说我们来吧

13:02.750 --> 13:05.750
在网页上来个点击下载

13:06.750 --> 13:07.750
这里

13:07.750 --> 13:08.750
新疆的文件吧

13:08.750 --> 13:09.750
我们不影响之前的

13:09.750 --> 13:12.750
download.atmail

13:13.750 --> 13:14.750
很简单的

13:14.750 --> 13:15.750
你就写个A元数就行了

13:15.750 --> 13:17.750
A元数链接地址是啥

13:17.750 --> 13:19.750
链接地址就是

13:19.750 --> 13:21.750
race.heal

13:21.750 --> 13:22.750
表示我们来另外一个吧

13:22.750 --> 13:24.750
zip

13:24.750 --> 13:26.750
就是下载

13:26.750 --> 13:27.750
来吧 我们看一下

13:27.750 --> 13:28.750
保存

13:28.750 --> 13:29.750
我们在这里访问一下

13:29.750 --> 13:31.750
localhost 5008

13:31.750 --> 13:34.750
然后呢

13:34.750 --> 13:36.750
download

13:36.750 --> 13:37.750
就在这

13:37.750 --> 13:38.750
点击下载

13:38.750 --> 13:39.750
你看是不是出发了下载行为

13:39.750 --> 13:41.750
就这么简单

13:41.750 --> 13:43.750
能理解吧

13:43.750 --> 13:44.750
非常简单

13:44.750 --> 13:45.750
这就是下载

13:45.750 --> 13:47.750
我们来保存一下吧

13:47.750 --> 13:49.750
存储为桌面

13:49.750 --> 13:50.750
存储

13:50.750 --> 13:52.750
你看 是不是下载完了

13:52.750 --> 13:54.750
heal.dip

13:55.750 --> 13:56.750
这是这一块

13:56.750 --> 13:57.750
那要不然说

13:57.750 --> 13:59.750
如果说我要出发讯内下载

13:59.750 --> 14:00.750
怎么办

14:00.750 --> 14:02.750
那么出发讯内下载的话

14:02.750 --> 14:03.750
其实他现在是支持

14:03.750 --> 14:04.750
就光点调数的

14:04.750 --> 14:05.750
只是我现在

14:05.750 --> 14:07.750
不是很好给大家演示

14:07.750 --> 14:09.750
一会我们在讯内那边演示就好了

14:09.750 --> 14:10.750
讯内下载

14:10.750 --> 14:11.750
你要知道讯内的下载协议

14:11.750 --> 14:13.750
讯内的下载协议是这样子的

14:13.750 --> 14:19.060
讯内下载协议是这样子的

14:19.060 --> 14:21.060
简单说一下

14:21.060 --> 14:22.060
它就是你把下载

14:22.060 --> 14:26.060
把完整的下载地址得到

14:26.060 --> 14:28.060
得到完整的下载地址

14:28.060 --> 14:30.060
然后在前边

14:30.060 --> 14:32.060
前后加上一个A

14:32.060 --> 14:33.060
前面加上一个A

14:33.060 --> 14:34.060
中间加上地址

14:34.060 --> 14:35.060
中间是地址

14:35.060 --> 14:37.060
然后后面加上一个Z

14:37.060 --> 14:41.060
然后再把整个进行Bass64编码

14:43.060 --> 14:45.060
再进行Bass64编码

14:45.060 --> 14:46.060
然后把编码的结构

14:46.060 --> 14:48.060
再前面加上一个Sunder

14:49.060 --> 14:52.060
后面就是Bass64编码

14:52.060 --> 14:53.060
这就是讯内下载协议

14:53.060 --> 14:55.060
你把它变成这样的地址就行了

14:55.060 --> 14:57.060
那么我们完全可以用介绍来变一变

14:57.060 --> 14:58.060
对不对

14:58.060 --> 14:59.060
介绍来变一变

14:59.060 --> 15:00.060
找到这个A元数吧

15:00.060 --> 15:02.060
比方说我们可以给这些A元数

15:02.060 --> 15:03.060
一些特殊的标记

15:03.060 --> 15:04.060
表示这个是下载讯内

15:04.060 --> 15:06.060
需要用讯内来处理的

15:06.060 --> 15:08.060
比方说我们来个标记吧

15:09.060 --> 15:11.060
给它来一个

15:12.060 --> 15:15.370
就是

15:15.370 --> 15:18.370
RaceRowSunder

15:18.370 --> 15:20.370
比方说我们去找到

15:20.370 --> 15:23.370
页面上RaceRowSunder的A元数

15:23.370 --> 15:24.370
Document

15:24.370 --> 15:25.370
当然这个东西你随意处理

15:25.370 --> 15:27.370
总之要找到这个A元数

15:27.370 --> 15:29.370
找到这个A元数

15:29.370 --> 15:31.370
它的属性RaceRow

15:31.370 --> 15:34.940
等于什么Sunder

15:34.940 --> 15:35.940
找到这个A元数

15:35.940 --> 15:36.940
当然你可以找到所有的A元数

15:36.940 --> 15:38.940
来循环处理都行

15:38.940 --> 15:40.940
这些东西很灵活的

15:40.940 --> 15:42.940
我用这种拿开

15:43.940 --> 15:45.940
点击右键检查一下

15:46.940 --> 15:47.940
刷新

15:48.940 --> 15:49.940
我没打印

15:50.940 --> 15:51.940
输出

15:52.940 --> 15:56.660
停止吧

15:56.660 --> 15:57.660
保存

15:57.660 --> 15:58.660
再来刷新

15:58.660 --> 15:59.660
A元数出来了

15:59.660 --> 16:01.660
然后我们把这个A元数

16:01.660 --> 16:03.660
改它的Rave属性

16:03.660 --> 16:04.660
来改它的

16:04.660 --> 16:05.660
那么怎么来改

16:05.660 --> 16:07.660
首先得到A元数的Rave地址

16:07.660 --> 16:08.660
我们来输出一下

16:08.660 --> 16:10.660
这个Rave地址输出了过来

16:10.660 --> 16:11.660
通过GIS得到过来

16:11.660 --> 16:12.660
肯定是一个完整地址

16:12.660 --> 16:13.660
毫无疑问的

16:13.660 --> 16:14.660
你们都懂的

16:14.660 --> 16:15.660
然后得到的地址过后

16:15.660 --> 16:17.660
我们是不是来得到一个

16:17.660 --> 16:20.660
SunderLink

16:20.660 --> 16:22.660
得到一个訊来的下载

16:22.660 --> 16:23.660
卸转链接

16:23.660 --> 16:24.660
那怎么来得到

16:24.660 --> 16:25.660
第一步

16:25.660 --> 16:27.660
把完整地址前面加个A

16:27.660 --> 16:28.660
然后中间拼接

16:28.660 --> 16:30.660
这个就是A.Rave

16:30.660 --> 16:32.660
然后后边加上一个ZZ

16:32.660 --> 16:33.660
这是讯来

16:33.660 --> 16:34.660
他要求你这样做的

16:34.660 --> 16:35.660
然后再把整个

16:35.660 --> 16:37.660
用一个Bass60编码

16:37.660 --> 16:38.660
Bass60编码

16:38.660 --> 16:39.660
我们之前好像在哪个地方说过的

16:39.660 --> 16:41.660
B2A对不对

16:41.660 --> 16:42.660
B2A

16:42.660 --> 16:43.660
把它进行Bass60编码

16:43.660 --> 16:44.660
我们来看一下

16:44.660 --> 16:46.660
是B2A还是A2B

16:46.660 --> 16:50.160
B2A

16:50.160 --> 16:51.160
B2A

16:51.160 --> 16:52.160
那么这里边是不是传了个

16:52.160 --> 16:53.160
SunderLink

16:53.160 --> 16:54.160
所以把它变成Bass60编码

16:54.160 --> 16:55.160
编码过后

16:55.160 --> 16:58.160
然后再给它前面加上一个

16:58.160 --> 17:00.160
拼接上一个什么的

17:00.160 --> 17:02.160
Sunder

17:02.160 --> 17:03.160
拼接上这个东西

17:03.160 --> 17:05.160
拼接上它自己的Bass60编码

17:05.160 --> 17:06.160
对吧

17:06.160 --> 17:07.160
是不是完事了

17:07.160 --> 17:09.160
然后我们把A元素的属性

17:09.160 --> 17:10.160
改成这个属

17:10.160 --> 17:11.160
改成这个SunderLink

17:11.160 --> 17:12.160
就完事了

17:12.160 --> 17:13.160
它就变成一个

17:13.160 --> 17:14.160
讯内下载链接了

17:14.160 --> 17:15.160
你看吧

17:15.160 --> 17:18.160
你看现在的A元素的链接

17:18.160 --> 17:19.160
小心

17:19.160 --> 17:21.160
你看是变成这个样子了

17:21.160 --> 17:22.160
对吧

17:22.160 --> 17:23.160
现在我们点一下下载

17:23.160 --> 17:25.160
如果说你有讯内的话

17:25.160 --> 17:26.160
当然前面有讯内

17:26.160 --> 17:28.160
讯内的话你它就会打开讯内

17:28.160 --> 17:29.160
对吧

17:29.160 --> 17:30.160
下载了

17:30.160 --> 17:31.160
我们就下载吧

17:31.160 --> 17:32.160
下载了

17:32.160 --> 17:33.160
我们下载到桌面

17:33.160 --> 17:35.160
下载到本地

17:35.160 --> 17:36.160
对吧

17:36.160 --> 17:37.160
就下载完成了

17:37.160 --> 17:38.160
对不对

17:38.160 --> 17:39.160
就这么简单

17:39.160 --> 17:40.160
把它删除掉

17:40.160 --> 17:41.160
好

17:41.160 --> 17:42.160
接下来我给大家看一下

17:42.160 --> 17:43.160
端点序传

17:43.160 --> 17:44.160
它其实已经能够端点序传了

17:44.160 --> 17:45.160
只是大家不知道而已

17:45.160 --> 17:47.160
我们这个人为了

17:47.160 --> 17:48.160
因为这个文件太小了

17:48.160 --> 17:49.160
而且是本地

17:49.160 --> 17:50.160
它的下载速度太快了

17:50.160 --> 17:51.160
瞬间就下载完了

17:51.160 --> 17:52.160
而实际上

17:52.160 --> 17:54.160
在下载的时候

17:54.160 --> 17:55.160
无论是浏览器

17:55.160 --> 17:56.160
还是讯内

17:56.160 --> 17:58.160
它都是支持暂停和继续的

17:59.160 --> 18:00.160
那么它到底是

18:00.160 --> 18:01.160
通过一种什么样的方式

18:01.160 --> 18:03.160
来暂停和继续的呢

18:03.160 --> 18:04.160
我们来看一下

18:04.160 --> 18:05.160
比方说

18:05.160 --> 18:06.160
因为这个图件太小了

18:06.160 --> 18:07.160
我们在讯内里边

18:07.160 --> 18:08.160
好操作一点

18:08.160 --> 18:09.160
因为讯内它是开了多线程

18:09.160 --> 18:10.160
给你下载的

18:10.160 --> 18:11.160
我们看了

18:11.160 --> 18:12.160
看得更加清楚一点

18:12.160 --> 18:14.160
我们在这里

18:14.160 --> 18:15.160
我们在这里

18:15.160 --> 18:16.160
把它启动起来吧

18:16.160 --> 18:17.160
所以把它启动起来

18:17.160 --> 18:19.160
我们给它打个断点

18:20.160 --> 18:21.160
在这里

18:21.160 --> 18:22.160
给它打个断点

18:22.160 --> 18:23.160
看一下

18:23.160 --> 18:26.160
看一下咱们的讯内下载

18:27.160 --> 18:28.160
点击下载

18:28.160 --> 18:29.160
打开讯内

18:29.160 --> 18:31.160
点下载到本地

18:31.160 --> 18:32.160
你看

18:32.160 --> 18:33.160
现在是不是运行到断点了

18:33.160 --> 18:34.160
请求过来了

18:34.160 --> 18:35.160
然后呢

18:35.160 --> 18:36.160
我们现在是不是出发下载

18:36.160 --> 18:37.160
接下来

18:37.160 --> 18:38.160
你看

18:38.160 --> 18:39.160
继续

18:39.160 --> 18:40.160
你看是不是又请求过来了

18:40.160 --> 18:41.160
浏览器

18:41.160 --> 18:42.160
它下了一部分对吧

18:42.160 --> 18:43.160
下了一部分

18:43.160 --> 18:44.160
然后呢

18:44.160 --> 18:45.160
它又请求过来了

18:45.160 --> 18:46.160
那么第二次请求

18:46.160 --> 18:47.160
我们来看一下

18:48.160 --> 18:50.160
Rake里边的就是参数

18:50.160 --> 18:51.160
它的Headers

18:51.160 --> 18:52.160
它多了一个东西

18:52.160 --> 18:53.160
叫Ring

18:53.160 --> 18:54.160
Ring什么意思

18:54.160 --> 18:55.160
表示到范围

18:55.160 --> 18:57.160
我下载这个文件的时候

18:57.160 --> 18:58.160
我希望呢

18:58.160 --> 18:59.160
你把这个文件

18:59.160 --> 19:00.160
不要从头开始给我传了

19:00.160 --> 19:01.160
从哪个地方呢

19:01.160 --> 19:03.160
从1048576

19:03.160 --> 19:06.160
到1310719

19:06.160 --> 19:08.160
到这个字节范围内

19:08.160 --> 19:09.160
给我传

19:09.160 --> 19:10.160
给我传这个文件的

19:10.160 --> 19:12.160
这个字节范围内的数据

19:12.160 --> 19:13.160
那么到时候

19:13.160 --> 19:14.160
这个当那个这个函数

19:14.160 --> 19:15.160
它会自行处理

19:15.160 --> 19:16.160
它读到这个

19:16.160 --> 19:17.160
读到这个请求头

19:17.160 --> 19:18.160
OK

19:18.160 --> 19:19.160
那么它会处理这个问题

19:19.160 --> 19:20.160
它会把这个文件

19:20.160 --> 19:21.160
只需要读

19:21.160 --> 19:22.160
因为我们之前读礼物的时候

19:22.160 --> 19:23.160
是不是可以限制

19:23.160 --> 19:24.160
从哪个地方开始读

19:24.160 --> 19:25.160
对吧

19:25.160 --> 19:26.160
读多少对不对

19:26.160 --> 19:27.160
是不是可以限制

19:27.160 --> 19:28.160
那么它只读这一部分的礼物

19:28.160 --> 19:29.160
给它传过去

19:29.160 --> 19:30.160
那么这样子呢

19:30.160 --> 19:32.160
它就又给它传了一部分

19:32.160 --> 19:34.160
又给它传了一部分

19:34.160 --> 19:35.160
好

19:35.160 --> 19:36.160
然后第三次你看

19:36.160 --> 19:38.160
这个地方

19:38.160 --> 19:41.160
我们这里呢是

19:41.160 --> 19:43.160
看一下Headers

19:43.160 --> 19:44.160
是这个范围

19:44.160 --> 19:46.160
我们把刚才在Postman里面

19:46.160 --> 19:47.160
给它模拟一下吧

19:47.160 --> 19:48.160
你们看得更加清楚一点

19:48.160 --> 19:50.160
我们在Postman里面

19:50.160 --> 19:51.160
模拟一下

19:51.160 --> 19:53.160
在请求头里边

19:53.160 --> 19:54.160
加上一个byte

19:54.160 --> 19:56.160
这是

19:56.160 --> 19:57.160
加在这

19:57.160 --> 19:59.160
值呢是range

19:59.160 --> 20:02.540
range

20:02.540 --> 20:03.540
好

20:03.540 --> 20:04.540
我们加上这个

20:04.540 --> 20:05.540
然后我们再去请求

20:05.540 --> 20:09.450
请求服务器

20:09.450 --> 20:10.450
服务器到了

20:10.450 --> 20:12.450
给它响应

20:12.450 --> 20:14.450
响应

20:14.450 --> 20:15.450
训得也下载完了

20:15.450 --> 20:16.450
训得也下载完了

20:16.450 --> 20:18.450
然后我们到这边来看

20:18.450 --> 20:20.450
服务器的响应结果

20:20.450 --> 20:21.450
你看

20:21.450 --> 20:22.450
现在就不是一个完整的图片了

20:22.450 --> 20:23.450
对吧

20:23.450 --> 20:24.450
你看服务器的给我的响应结果

20:24.450 --> 20:26.450
它的消息体

20:26.450 --> 20:28.450
你看一下

20:28.450 --> 20:30.450
它的消息体

20:30.450 --> 20:31.450
它的消息体的长度

20:31.450 --> 20:32.450
只有这么多了

20:32.450 --> 20:34.450
20多了

20:34.450 --> 20:35.450
你看一下

20:35.450 --> 20:36.450
如果说我不给它完整的

20:36.450 --> 20:38.450
我要完整的下载

20:38.450 --> 20:40.450
我不给它这个range

20:40.450 --> 20:42.450
给我的消息体

20:42.450 --> 20:44.450
是不是151万

20:44.450 --> 20:45.450
对吧

20:45.450 --> 20:46.450
应该是多少了

20:46.450 --> 20:48.450
应该相当于一兆多了

20:48.450 --> 20:49.450
对吧

20:49.450 --> 20:50.450
一兆多了

20:50.450 --> 20:51.450
如果说我把这个给它加上

20:51.450 --> 20:52.450
它是不是只传了

20:52.450 --> 20:53.450
这部分数据给我

20:53.450 --> 20:55.450
它只传了这部分数据给我

20:55.450 --> 20:56.450
那么这就是

20:56.450 --> 20:57.450
这个当路的函数

20:57.450 --> 20:58.450
它能做的事情

20:58.450 --> 20:59.450
它会读取

20:59.450 --> 21:01.450
请求投里边的

21:01.450 --> 21:03.450
如果说你有这个range

21:03.450 --> 21:04.450
请求投的话

21:04.450 --> 21:05.450
那么这个range

21:05.450 --> 21:06.450
规定的范围内

21:06.450 --> 21:07.450
它进行下载

21:07.450 --> 21:09.450
是这么个意思

21:09.450 --> 21:10.450
它在这个范围内

21:10.450 --> 21:12.450
给你传出这个流的数据

21:12.450 --> 21:13.450
那么这样子

21:13.450 --> 21:14.450
是不是可以锻炼去传了

21:14.450 --> 21:15.450
当我们暂停过后

21:15.450 --> 21:16.450
比方说

21:16.450 --> 21:18.450
我们再来一次训得下载

21:18.450 --> 21:20.450
再来一次

21:20.450 --> 21:24.600
训得我平时也没这么用

21:24.600 --> 21:25.600
再来一次

21:25.600 --> 21:26.600
点击打开讯内

21:26.600 --> 21:28.600
下载

21:31.600 --> 21:33.600
重新下载

21:33.600 --> 21:35.600
请求到了

21:35.600 --> 21:37.600
然后讯内下了一部分了

21:37.600 --> 21:38.600
再请求到了

21:38.600 --> 21:40.600
那么这个时候暂停

21:40.600 --> 21:41.600
再来

21:41.600 --> 21:42.600
所以这个时候

21:42.600 --> 21:43.600
它只下得了这么多

21:43.600 --> 21:44.600
对吧

21:44.600 --> 21:45.600
然后再续传

21:45.600 --> 21:46.600
短点还是恢复上

21:46.600 --> 21:47.600
再续传

21:47.600 --> 21:48.600
开始

21:48.600 --> 21:49.600
是又来了

21:49.600 --> 21:50.600
你看这一次

21:50.600 --> 21:51.600
讯内它就会自动处理

21:51.600 --> 21:52.600
客户端处理的

21:52.600 --> 21:53.600
讯内它处理的过后

21:53.600 --> 21:54.600
它黑点的是

21:54.600 --> 21:55.600
你看它知道之前

21:55.600 --> 21:56.600
下载到哪了

21:56.600 --> 21:57.600
它上载里传这一部分

21:57.600 --> 21:58.600
数据给我

21:58.600 --> 21:59.600
对不对

21:59.600 --> 22:00.600
我又传给它

22:00.600 --> 22:01.600
传给它

22:01.600 --> 22:02.600
对吧

22:02.600 --> 22:03.600
直到它就把它下载完了

22:03.600 --> 22:05.600
传完了过去下载完了

22:05.600 --> 22:06.600
对不对

22:06.600 --> 22:07.600
它是这么一回事

22:07.600 --> 22:08.600
这就是关于这个

22:08.600 --> 22:09.600
端点蓄传

22:09.600 --> 22:10.600
它到底是一个

22:10.600 --> 22:11.600
什么样子

22:11.600 --> 22:12.600
就这么简单

22:12.600 --> 22:13.600
就是通过一个消息头

22:13.600 --> 22:14.600
来实现的

22:14.600 --> 22:15.600
只不过

22:15.600 --> 22:16.600
我们不用去熟悉了

22:16.600 --> 22:17.600
对吧

22:17.600 --> 22:18.600
有这个当楼的韩束

22:18.600 --> 22:19.600
服务器

22:19.600 --> 22:20.600
它就可以支持了

22:20.600 --> 22:21.600
那么客户端的一些

22:21.600 --> 22:22.600
客户端的工具

22:22.600 --> 22:23.600
最后我再说一个点

22:23.600 --> 22:24.600
一些工具

22:24.600 --> 22:25.600
它是可以支持

22:25.600 --> 22:26.600
就是有一些下载工具

22:26.600 --> 22:27.600
它有可能

22:27.600 --> 22:28.600
会给你先传一个

22:28.600 --> 22:29.600
Head请求

22:29.600 --> 22:30.600
之前我们好像

22:30.600 --> 22:31.600
在哪个地方

22:31.600 --> 22:32.600
说到这个东西

22:32.600 --> 22:33.600
Head请求

22:33.600 --> 22:35.600
当遇到Head请求的时候

22:35.600 --> 22:36.600
你看

22:36.600 --> 22:37.600
它并不是士林寺

22:37.600 --> 22:38.600
因为我们服务器

22:38.600 --> 22:39.600
好像没有处理Head请求

22:39.600 --> 22:40.600
对吧

22:40.600 --> 22:41.600
那么Head请求

22:41.600 --> 22:42.600
什么意思呢

22:42.600 --> 22:43.600
就是有一些下载工具

22:43.600 --> 22:44.600
熏雷好像不是

22:44.600 --> 22:45.600
熏雷没有给你发送Head请求

22:45.600 --> 22:47.600
就有一些下载工具

22:47.600 --> 22:48.600
它会给你先发送

22:48.600 --> 22:49.600
一个Head请求

22:49.600 --> 22:50.600
来确定一下

22:50.600 --> 22:51.600
这个文件

22:51.600 --> 22:52.600
到底是一个怎么回事

22:52.600 --> 22:53.600
你不着急下载

22:53.600 --> 22:54.600
熏雷事一开始

22:54.600 --> 22:55.600
就开始下载了

22:55.600 --> 22:56.600
对吧

22:56.600 --> 22:57.600
有些工具是

22:57.600 --> 22:58.600
不着急下载

22:58.600 --> 22:59.600
你告诉我这个文件

22:59.600 --> 23:00.600
你知不知是断点虚传

23:00.600 --> 23:01.600
对吧

23:01.600 --> 23:02.600
你通过这个消息头

23:02.600 --> 23:03.600
告诉我

23:03.600 --> 23:04.600
知不知是断点虚传

23:04.600 --> 23:05.600
词是字节为单位

23:05.600 --> 23:06.600
然后

23:06.600 --> 23:08.600
这个文件的类型是啥

23:08.600 --> 23:09.600
这个文件的附件名字是啥

23:09.600 --> 23:10.600
然后

23:10.600 --> 23:11.600
这个就是

23:11.600 --> 23:12.600
文件的大小有多少

23:12.600 --> 23:13.600
对不对

23:13.600 --> 23:15.600
它可以通过一个Head请求

23:15.600 --> 23:16.600
来

23:16.600 --> 23:17.600
先得到一个

23:17.600 --> 23:18.600
得到一个

23:18.600 --> 23:19.600
得到一个结果

23:19.600 --> 23:20.600
原来的意思

23:20.600 --> 23:21.600
通过一个Head请求

23:22.600 --> 23:23.600
那么这个Head请求

23:23.600 --> 23:24.600
实际上

23:24.600 --> 23:26.600
我们服务器是支持的

23:26.600 --> 23:27.600
就是Head请求的时候

23:27.600 --> 23:29.600
它实际上能收获Head请求

23:29.600 --> 23:30.600
你看一下

23:30.600 --> 23:32.600
我们在这里打个断点

23:32.600 --> 23:33.600
发送

23:33.600 --> 23:34.600
你看

23:34.600 --> 23:35.600
我们明明是处理的Head请求

23:35.600 --> 23:36.600
你看是不是接受到了Head

23:36.600 --> 23:38.600
请求的没事都是Head

23:38.600 --> 23:39.600
因为Head跟Head

23:39.600 --> 23:40.600
他们在语异上了

23:40.600 --> 23:42.600
就非常非常相近

23:42.600 --> 23:43.600
Head其实就是

23:43.600 --> 23:45.600
得到一个Head请求的消息头

23:45.600 --> 23:47.600
实际上就是这么一个意思

23:47.600 --> 23:49.600
得到一个Head请求的消息头

23:49.600 --> 23:51.600
因此这就完事了

23:51.600 --> 23:52.600
好

23:52.600 --> 23:54.600
那么这里就是这个下载

23:54.600 --> 23:56.600
下载文件

23:56.600 --> 23:57.600
已经如何使用讯程下载

23:57.600 --> 23:58.600
就这么一回事

23:58.600 --> 23:59.600
大家把这个

23:59.600 --> 24:01.600
ADB协议的本质搞清楚就行了

24:01.600 --> 24:03.600
这是关于下载文件

24:03.600 --> 24:04.600
其他没啥了

