WEBVTT

00:00.690 --> 00:05.690
先解释一波啊 这里是四缸八

00:06.690 --> 00:11.690
解释一波吧 上节课咱们说这节课开始讲那个JWT对吧

00:11.690 --> 00:14.690
但是呢 想来想去呢 好像还不行

00:14.690 --> 00:16.690
还要多讲一些知识才能讲到JWT

00:16.690 --> 00:19.690
我们不着急啊 我们先讲一些知识

00:19.690 --> 00:21.690
因为我们现在代码越来越多了

00:21.690 --> 00:24.690
就有的时候呢 调试起来不是很麻烦

00:24.690 --> 00:28.690
我每次写着写着想锻炼调试呢 发现锻炼调试好像没讲过

00:28.690 --> 00:30.690
我就只能用输出的语句

00:30.690 --> 00:32.690
那么我们在这里讲一讲锻炼调试

00:32.690 --> 00:35.690
VS code里边或者是在浏览器里边锻炼调试

00:35.690 --> 00:38.690
那么这load的环境里边怎么来锻炼调试呢 是这样子

00:38.690 --> 00:41.690
load的命令里边呢 它可以加一个参数

00:41.690 --> 00:44.690
就是load的 后边加上一个inspect

00:45.690 --> 00:48.690
加上这么一个参数 然后呢 启动文件 启动模块

00:48.690 --> 00:50.690
它可以这样子写的啊

00:50.690 --> 00:52.690
那么这样子呢 做了过后呢

00:52.690 --> 00:55.690
它会有一个什么样的效果呢 它是这样子

00:56.690 --> 01:03.690
它load进程啊 进程会监听久而久久端口

01:03.690 --> 01:05.690
它会监听这个端口

01:05.690 --> 01:07.690
那么这个端口呢

01:07.690 --> 01:11.690
久而久而久而久而久久 以后就知道了

01:11.690 --> 01:13.690
它会监听这个端口

01:13.690 --> 01:14.690
那么监听这个端口过后呢

01:14.690 --> 01:17.690
那么就其它的进程啊 就其它的应用呢

01:17.690 --> 01:20.690
就可以跟这个端口之间通过向这个端口发送信息

01:20.690 --> 01:23.690
来跟load的进程进行交互

01:23.690 --> 01:24.690
那么交互有什么作用呢

01:24.690 --> 01:27.530
就是漏的进程还可以暂停 暂停执行

01:27.530 --> 01:30.650
然后恢复执行 然后执行到下一局再暂停

01:30.650 --> 01:32.650
就是可以做这么一个交互

01:32.650 --> 01:35.250
而且把那个漏的进程会把它的暂信息

01:35.250 --> 01:38.690
就是它执行暂的信息 还有一些辩量的信息

01:38.690 --> 01:40.330
通过这个端口给你发送过来

01:40.330 --> 01:43.330
那么这边呢 其他的应用程序就可以见

01:43.330 --> 01:45.890
就可以调试漏的程序了

01:45.890 --> 01:46.890
它这么回事

01:46.890 --> 01:50.130
因为以前调试浏览器端的程序很简单

01:50.130 --> 01:52.770
对吧 我们使用那个浏览器的断点就可以了

01:52.810 --> 01:54.810
但是呢 这漏的环境里边呢

01:54.810 --> 01:56.530
由于跟浏览器没有什么关系

01:56.530 --> 01:58.130
它必须要用这种方式

01:58.130 --> 01:59.530
好 咱们来试一下吧

01:59.530 --> 02:01.530
看怎么来用

02:01.530 --> 02:03.530
首先呢 我们这个工程里边

02:03.530 --> 02:04.530
这里是4.8

02:04.530 --> 02:07.530
我还要把它切换到4.8

02:07.530 --> 02:10.530
这里中端中打开

02:10.530 --> 02:12.530
git

02:12.530 --> 02:13.530
check out

02:13.530 --> 02:17.100
4.8

02:17.100 --> 02:20.340
好 然后呢 我们现在去启动一下吧

02:20.340 --> 02:22.340
启动一下 我们随便找一个应用

02:22.340 --> 02:23.340
找一个吧

02:23.340 --> 02:24.340
随便找一个

02:24.340 --> 02:27.340
把这个地方先给它

02:27.340 --> 02:29.340
嗯

02:29.340 --> 02:31.340
我们就这样子启动吧

02:31.340 --> 02:33.340
就这样子启动

02:33.340 --> 02:34.340
好 来吧

02:34.340 --> 02:35.340
我们使用那个

02:35.340 --> 02:37.340
我们把这个还是这样子

02:37.340 --> 02:39.340
把这个拍镜接上来改一下

02:39.340 --> 02:41.340
这个server改成load inspect

02:41.340 --> 02:43.340
改成这个

02:43.340 --> 02:45.340
好 现在我们再来启动

02:45.340 --> 02:46.340
还是启动start

02:46.340 --> 02:47.340
start它运行这个脚奔

02:47.340 --> 02:49.340
对吧 那么这个脚奔是load

02:49.340 --> 02:50.340
用inspect来启动的

02:50.340 --> 02:51.340
好 来吧

02:51.340 --> 02:54.340
是用npm start

02:54.340 --> 02:55.340
什么启动起来了

02:55.340 --> 02:56.340
对不对 启动起来了

02:56.340 --> 02:57.340
好 接下来呢

02:57.340 --> 02:58.340
我们到那个

02:58.340 --> 02:59.340
有了这个inspect过程的

02:59.340 --> 03:01.340
会有什么样的一个效果呢

03:01.340 --> 03:02.340
其实还是一样的啊

03:02.340 --> 03:03.340
我们比方说

03:03.340 --> 03:05.340
现在去访问这个localhost

03:05.340 --> 03:07.340
5008 还是一样的

03:07.340 --> 03:08.340
但是接下来呢

03:08.340 --> 03:09.340
我们有些地方就不一样了

03:09.340 --> 03:10.340
比方说我们点击右键

03:10.340 --> 03:12.340
点击检查

03:12.340 --> 03:14.340
你看 浏览器端

03:14.340 --> 03:16.340
是不是多了一个这个东西

03:16.340 --> 03:17.340
对不对

03:17.340 --> 03:18.340
说多了一个这个东西

03:18.340 --> 03:19.340
浏览器一发现

03:20.340 --> 03:21.340
有一个端口啊

03:21.340 --> 03:22.340
就load的进程

03:22.340 --> 03:23.340
有一个端口

03:23.340 --> 03:25.340
它是开放出来的

03:25.340 --> 03:26.340
在监听

03:26.340 --> 03:27.340
于是浏览器里边

03:27.340 --> 03:28.340
它做了一个小工具

03:28.340 --> 03:29.340
浏览器自带的

03:29.340 --> 03:31.340
你都不用去安装什么东西

03:31.340 --> 03:32.340
它自带的

03:32.340 --> 03:33.340
那么有这个小工具

03:33.340 --> 03:35.340
它就可以调试load的进程了

03:35.340 --> 03:37.340
其实你安装load过后了

03:37.340 --> 03:38.340
浏览器里边就自动有了

03:38.340 --> 03:39.340
这个东西

03:39.340 --> 03:40.340
我们点一下它吧

03:41.340 --> 03:42.340
你看

03:42.340 --> 03:43.340
这个东西相当于是咋的

03:43.340 --> 03:44.340
这个东西就相当于是

03:44.340 --> 03:45.340
你看这个是控制台

03:45.340 --> 03:46.340
控制台就是load的控制台

03:46.340 --> 03:47.340
就相当于是

03:47.340 --> 03:48.340
这边的控制台

03:49.340 --> 03:50.340
你看

03:50.340 --> 03:51.340
这里

03:51.340 --> 03:52.340
所以控制台

03:52.340 --> 03:53.340
对不对

03:53.340 --> 03:54.340
就相当于是这里的控制台

03:54.340 --> 03:56.340
然后我们可以点这个

03:56.340 --> 03:57.340
点这个sources

03:57.340 --> 03:58.340
点这个玩意

04:02.740 --> 04:03.740
好 点这个玩意

04:03.740 --> 04:04.740
我们可以看到

04:04.740 --> 04:05.740
我们的代码在哪呢

04:05.740 --> 04:07.740
我们的代码在这里边

04:07.740 --> 04:08.740
你看这些都是

04:08.740 --> 04:09.740
是不是我们代码

04:09.740 --> 04:10.740
对吧

04:10.740 --> 04:11.740
然后我们就可以在

04:11.740 --> 04:12.740
就可以在这里打断点

04:12.740 --> 04:13.740
比方说吧

04:13.740 --> 04:15.740
我们在这里呢

04:15.740 --> 04:16.740
找到这个rotor

04:16.740 --> 04:17.740
API

04:17.740 --> 04:18.740
我们之前写的吧

04:18.740 --> 04:19.740
对吧

04:19.740 --> 04:20.740
我们目前只用到

04:20.740 --> 04:21.740
这两个部分

04:21.740 --> 04:22.740
对不对

04:22.740 --> 04:23.740
我们在aradmin里边

04:23.740 --> 04:24.740
这里有个

04:24.740 --> 04:25.740
这个地方

04:25.740 --> 04:26.740
我们打个断点

04:26.740 --> 04:27.740
我们来登录一下

04:27.740 --> 04:28.740
试一下

04:28.740 --> 04:29.740
我们这里abc

04:29.740 --> 04:30.740
123

04:30.740 --> 04:31.740
123

04:31.740 --> 04:32.740
点登录

04:32.740 --> 04:33.740
是不是运行到断点了

04:33.740 --> 04:34.740
对不对

04:34.740 --> 04:35.740
那么这边

04:35.740 --> 04:36.740
就可以通过

04:36.740 --> 04:37.740
这些换件也好

04:37.740 --> 04:39.740
就直接点击也好

04:39.740 --> 04:40.740
这个地方是什么呢

04:40.740 --> 04:41.740
这些人家知道

04:41.740 --> 04:43.740
就运行到下一个断点

04:44.740 --> 04:46.740
运行到下一个断点

04:46.740 --> 04:47.740
这个叫做

04:47.740 --> 04:48.740
不进

04:48.740 --> 04:50.740
就是挑过这句话的执行

04:50.740 --> 04:51.740
执行完这句话

04:51.740 --> 04:52.740
进入下句话的执行

04:52.740 --> 04:53.740
这个是不入

04:53.740 --> 04:54.740
不入什么意思呢

04:54.740 --> 04:55.740
就是

04:55.740 --> 04:57.740
进入这句话的执行

04:57.740 --> 04:58.740
进入这句话的执行

04:58.740 --> 04:59.740
这句话里边

04:59.740 --> 05:00.740
是不是有个locking方法

05:00.740 --> 05:01.740
对吧

05:01.740 --> 05:02.740
比方说我们

05:02.740 --> 05:03.740
如果说我们挑过的话

05:03.740 --> 05:04.740
你看

05:04.740 --> 05:05.740
是不是到下一句话

05:05.740 --> 05:06.740
那么我会指他

05:06.740 --> 05:07.740
看这个result的指示

05:07.740 --> 05:08.740
对不对

05:08.740 --> 05:09.740
然后我们继续挑过

05:09.740 --> 05:10.740
是不是到这

05:10.740 --> 05:11.740
对不对

05:11.740 --> 05:12.740
在这

05:12.740 --> 05:13.740
那么现在如果说

05:13.740 --> 05:14.740
我们不进的话

05:14.740 --> 05:15.740
按f11不进的话

05:15.740 --> 05:16.740
你看

05:16.740 --> 05:17.740
点不进

05:17.740 --> 05:18.740
是不是进入这个方法去执行

05:18.740 --> 05:19.740
对不对

05:19.740 --> 05:20.740
还传到STR是啥

05:20.740 --> 05:21.740
对不对

05:21.740 --> 05:22.740
就可以通过这种

05:22.740 --> 05:23.740
观测我们的程序的执行

05:23.740 --> 05:25.740
那么这个东西是跳出

05:25.740 --> 05:26.740
就跳出这个方法的执行

05:26.740 --> 05:27.740
就跳回去

05:27.740 --> 05:29.740
你看也不是被跳到这儿了

05:29.740 --> 05:30.740
对吧

05:30.740 --> 05:31.740
就这么一回事

05:31.740 --> 05:32.740
很简单的

05:32.740 --> 05:33.740
是不是很简单

05:33.740 --> 05:35.740
这里是这个浏览器端

05:35.740 --> 05:36.740
进行第二点的调试

05:36.740 --> 05:38.740
如果说点这个

05:38.740 --> 05:39.740
点这个的话

05:39.740 --> 05:40.740
就是到下一个断点

05:40.740 --> 05:41.740
如果说没有下一个断点的话

05:41.740 --> 05:42.740
就执行完成了

05:42.740 --> 05:43.740
你看是不是执行完成了

05:43.740 --> 05:45.740
这就是浏览器端的调试

05:45.740 --> 05:46.740
浏览器端的调试

05:46.740 --> 05:47.740
那么浏览器端调试

05:47.740 --> 05:48.740
可以这样调试

05:48.740 --> 05:50.740
VSCode里面其实也可以

05:50.740 --> 05:51.740
VSCode也可以

05:51.740 --> 05:53.740
VSCode怎么来调试呢

05:53.740 --> 05:54.740
我们到VSCode里面

05:54.740 --> 05:55.740
我们这里

05:55.740 --> 05:56.740
VSCode实际上提供了

05:56.740 --> 05:57.740
调试工具的

05:57.740 --> 05:58.740
就这个调试工具

05:58.740 --> 06:00.740
那么这里它需要你一个配置文件

06:00.740 --> 06:02.740
我们这里点击一个配置文件

06:02.740 --> 06:04.740
它让你配置一个环境

06:04.740 --> 06:05.740
就是漏的环境

06:05.740 --> 06:06.740
但是我们现在不是说

06:06.740 --> 06:09.740
让VSCode去启动漏的程序

06:09.740 --> 06:10.740
不是的

06:10.740 --> 06:13.740
我们是要用VSCode

06:13.740 --> 06:14.740
是附加到一个进程上

06:14.740 --> 06:16.740
跟进程之间进行通信来进行调试

06:16.740 --> 06:17.740
用这种模式

06:17.740 --> 06:19.740
而不是让VSCode直接启动

06:19.740 --> 06:21.740
那么这个地方怎么写呢

06:21.740 --> 06:23.740
这地方我们可以这样子写

06:23.740 --> 06:25.740
然后这里的request

06:25.740 --> 06:26.740
它是浪起

06:26.740 --> 06:28.740
浪是表示启动程序

06:28.740 --> 06:30.740
我们这里把它写成另外一种

06:30.740 --> 06:32.740
写成attach

06:32.740 --> 06:33.740
我们这点单词

06:33.740 --> 06:34.740
记不住

06:34.740 --> 06:36.740
我们直接点这个吧

06:36.740 --> 06:37.740
这个点

06:37.740 --> 06:38.740
附加到进程

06:38.740 --> 06:39.740
我们自己直接点

06:39.740 --> 06:41.740
附加到进程

06:42.740 --> 06:43.740
现在可以了

06:43.740 --> 06:45.740
我们把这个切掉

06:45.740 --> 06:46.740
你看

06:46.740 --> 06:48.740
那些还是漏的程序

06:48.740 --> 06:52.110
调试的模式

06:52.110 --> 06:53.110
它就不是启动了

06:53.110 --> 06:54.110
是附加

06:54.110 --> 06:55.110
附加到另一个进程

06:55.110 --> 06:57.110
那么给这个调试取个名字

06:57.110 --> 06:58.110
给一个配置取个名字

06:58.110 --> 06:59.110
这个名字随便取

06:59.110 --> 07:01.110
我们就随便取一个吧

07:01.110 --> 07:03.110
调试漏的

07:04.110 --> 07:05.110
那么端口是

07:05.110 --> 07:07.110
端口是9229

07:07.110 --> 07:08.110
我这里写错了

07:09.110 --> 07:11.110
9229

07:12.110 --> 07:13.110
9229

07:13.110 --> 07:16.490
这是端口

07:16.490 --> 07:17.490
然后

07:17.490 --> 07:19.490
这个skip file

07:19.490 --> 07:20.490
这个东西

07:20.490 --> 07:22.490
就是

07:22.490 --> 07:24.490
不需要调试哪些文件

07:24.490 --> 07:26.490
loaded interloss表示什么意思

07:26.490 --> 07:27.490
就loaded的内部文件

07:27.490 --> 07:28.490
什么loaded

07:28.490 --> 07:30.490
是比较内部的内部文件

07:30.490 --> 07:31.490
就是loaded的内部模块

07:31.490 --> 07:32.490
什么fs

07:32.490 --> 07:33.490
就是内部模块

07:33.490 --> 07:34.490
如果说你要调试上面的话

07:34.490 --> 07:35.490
你可以把这个去掉

07:35.490 --> 07:37.490
不跳过任何模块

07:37.490 --> 07:38.490
好了

07:38.490 --> 07:39.490
就写好了

07:39.490 --> 07:40.490
就写好了

07:40.490 --> 07:42.490
那么写好了之后

07:42.490 --> 07:44.490
我们再来

07:44.490 --> 07:45.490
仍然在运行

07:45.490 --> 07:46.490
对吧

07:46.490 --> 07:47.490
仍然在运行

07:47.490 --> 07:48.490
仍然在运行的时候

07:48.490 --> 07:50.490
我们再把这个地方运行出来

07:50.490 --> 07:51.490
这里开始调试

07:51.490 --> 07:52.490
点击

07:52.490 --> 07:53.490
你看

07:53.490 --> 07:54.490
是不是开始调试了

07:54.490 --> 07:55.490
对吧

07:55.490 --> 07:56.490
这里出现一个调控制台

07:56.490 --> 07:57.490
是不是也输出了

07:57.490 --> 07:58.490
对不对

07:58.490 --> 07:59.490
然后我们在这边

07:59.490 --> 08:00.490
也可以用类似的方式

08:00.490 --> 08:01.490
在那个比方说

08:01.490 --> 08:02.490
我们找到一个

08:02.490 --> 08:03.490
漏池里边去

08:03.490 --> 08:05.490
找到这个就是

08:05.490 --> 08:07.490
API

08:07.490 --> 08:08.490
这里打个断点

08:08.490 --> 08:09.490
好

08:09.490 --> 08:10.490
接下来

08:10.490 --> 08:12.490
我们到榴弹器里边

08:12.490 --> 08:13.490
回去

08:13.490 --> 08:14.490
点击登录

08:14.490 --> 08:15.490
你看是不是运行到断点了

08:15.490 --> 08:16.490
是不是一样的效果

08:16.490 --> 08:17.490
对不对

08:17.490 --> 08:18.490
一样的效果

08:18.490 --> 08:19.490
而且呢

08:19.490 --> 08:20.490
可以通过这个调试

08:20.490 --> 08:21.490
调试

08:21.490 --> 08:22.490
调试工具呢

08:22.490 --> 08:23.490
可以看到很多的信息

08:23.490 --> 08:24.490
拿过来吧

08:24.490 --> 08:25.490
你看

08:25.490 --> 08:26.490
这些事举

08:26.490 --> 08:27.490
举步的变量

08:27.490 --> 08:28.490
举步的可以用的变量

08:28.490 --> 08:29.490
你看

08:29.490 --> 08:30.490
这些东西

08:30.490 --> 08:32.490
是不是都可以

08:32.490 --> 08:34.490
得到他的相应的消息

08:34.490 --> 08:35.490
对不对

08:35.490 --> 08:37.490
我们有了这个断点调试过程

08:37.490 --> 08:38.490
遇到一些问题

08:38.490 --> 08:39.490
我在上课的时候

08:39.490 --> 08:40.490
调起来更加好调了

08:40.490 --> 08:41.490
这边呢

08:41.490 --> 08:42.490
里面那边

08:42.490 --> 08:43.490
可能显色比较多

08:43.490 --> 08:44.490
我这里有块

08:46.490 --> 08:47.490
这里有个设置

08:47.490 --> 08:48.490
不是

08:50.490 --> 08:51.490
里面这边的窗口

08:51.490 --> 08:52.490
因为我这窗口

08:52.490 --> 08:53.490
关闭了很多了

08:53.490 --> 08:55.490
点击有点没反应了

08:58.490 --> 08:59.490
里面那边

08:59.490 --> 09:00.490
应该还有个指性对战

09:00.490 --> 09:01.490
我把他一些东西关完了

09:01.490 --> 09:02.490
我就直暴溜

09:02.490 --> 09:03.490
这个就是变量的值

09:03.490 --> 09:04.490
因为其他我也用不到

09:04.490 --> 09:06.490
那么这就是一个断点调试

09:06.490 --> 09:07.490
简单的说一下

09:07.490 --> 09:08.490
断点调试过后

09:08.490 --> 09:09.490
我刚说了我们之后

09:09.490 --> 09:10.490
就很方便了

09:10.490 --> 09:11.490
当然你要停止断点调试

09:11.490 --> 09:12.490
也很简单

09:12.490 --> 09:13.490
你先把运行出来

09:13.490 --> 09:14.490
然后这里

09:14.490 --> 09:15.490
把这个附加到进程

09:15.490 --> 09:16.490
给它断开

09:16.490 --> 09:18.490
断开进程的就是通信

09:18.490 --> 09:19.490
断开过后

09:19.490 --> 09:20.490
断过后我们程序

09:20.490 --> 09:21.490
是不是还在运行

09:21.490 --> 09:22.490
对吧

09:22.490 --> 09:23.490
程序仍在运行

09:23.490 --> 09:24.490
但是呢

09:24.490 --> 09:25.490
我们这边就没法调试了

09:25.490 --> 09:26.490
如果说你要再调试的话

09:26.490 --> 09:28.490
又再启动一次

09:28.490 --> 09:29.490
这就是

09:29.490 --> 09:31.490
load里边的调试方式

09:31.490 --> 09:32.490
这是我们刚才

09:32.490 --> 09:33.490
调试的配置

09:33.490 --> 09:34.490
OK

09:34.490 --> 09:35.490
这就是这里

09:35.490 --> 09:36.490
这样的东西

09:36.490 --> 09:37.490
非常简单

09:37.490 --> 09:38.490
好

09:38.490 --> 09:39.490
这就是这一块

