WEBVTT

00:00.240 --> 00:02.560
好 这一刻咱们来说一下代理

00:03.560 --> 00:06.040
代理是一个非常非常重要的场景

00:06.040 --> 00:08.920
如果说这些场景里边伟基一直的我们关注的

00:08.920 --> 00:10.320
也就是这个代理场景了

00:10.600 --> 00:12.840
因为我们的努德杰斯服务器

00:12.840 --> 00:14.760
它不能比后端的服务器

00:14.760 --> 00:16.680
我们一般来说不会去开发

00:16.680 --> 00:19.640
像夹发的样子开发一个完整的后端服务器

00:19.640 --> 00:22.680
它一般是充当一个中间服务器的角色

00:22.680 --> 00:24.960
那么是什么样的情况呢 给大家看一下吧

00:24.960 --> 00:27.960
我这里一个图 拖过来

00:28.920 --> 00:30.480
就这么一种情况

00:30.480 --> 00:32.920
就是我们的努德服务器

00:32.920 --> 00:34.280
它可以做哪些事呢

00:34.280 --> 00:36.200
一般来说要么就是做一些

00:36.200 --> 00:37.400
搭载一些静态资源

00:37.400 --> 00:38.200
就要表现放在这儿

00:38.200 --> 00:40.080
对吧 静态资源服务器

00:40.080 --> 00:43.280
可能会处理一些非业务等的功能

00:43.280 --> 00:47.720
比方说像什么上传图片有可能

00:47.720 --> 00:50.600
有可能这些事情也是其他服务器在做

00:50.600 --> 00:51.600
不是你来做

00:51.600 --> 00:53.320
或者是下载数据的功能

00:53.320 --> 00:55.320
下载一些文件的功能 对吧

00:55.320 --> 00:57.120
或者是做一些日记录

00:57.280 --> 00:59.240
或者是一些非业务的

00:59.240 --> 01:00.800
比方用户的偏好设置

01:00.800 --> 01:02.760
我们存到数据库里边去

01:02.760 --> 01:04.120
其实像更多的时候

01:04.120 --> 01:05.360
像这些业务功能

01:05.360 --> 01:07.560
什么叫业务功能登录

01:07.560 --> 01:08.640
添加一个用户

01:08.640 --> 01:09.560
删除一个用户

01:09.560 --> 01:10.680
对吧 修改用户

01:10.680 --> 01:13.320
添加学生得到一个电影

01:13.320 --> 01:14.360
分业等等

01:14.360 --> 01:17.320
这些业务功能实际上是后端服务器

01:17.320 --> 01:18.240
就是用加把写的

01:18.240 --> 01:20.040
用谁瞎不写的他们在做

01:20.040 --> 01:21.360
于是我们努德服务器

01:21.360 --> 01:22.520
除了要搭载静态资源

01:22.520 --> 01:24.400
和处理一些非业务功能之外

01:24.400 --> 01:26.400
还要去做一个代理角色

01:26.440 --> 01:28.200
就是当客户端去请求一个数据

01:28.200 --> 01:29.520
比方得到所有电影

01:29.520 --> 01:31.440
去请求我们服务器的时候

01:31.440 --> 01:34.480
他请求的不是直接请求后端服务器

01:34.480 --> 01:36.680
而是请求我们的努德服务器

01:36.680 --> 01:37.960
而努德服务器

01:37.960 --> 01:41.480
他给他把这个请求转发给数据服务器

01:41.480 --> 01:43.080
然后数据服务器给我们一个响应

01:43.080 --> 01:43.760
响应给谁

01:43.760 --> 01:44.720
因为我转发的

01:44.720 --> 01:46.000
所以说响应给我

01:46.000 --> 01:47.600
然后我再把这个响应的功能

01:47.600 --> 01:50.080
响应的结果再交给客户端

01:50.080 --> 01:51.320
那么对于客户端而言

01:51.320 --> 01:55.120
他其实感知上只有两步

01:55.160 --> 01:56.520
第一步我请求得了服务器

01:56.520 --> 01:57.240
第二步都得了服务器

01:57.240 --> 01:58.200
给我了一个结果

01:58.200 --> 01:59.560
他就不知道这个数据哪来的

01:59.560 --> 02:02.160
实际上是他通过一个代理

02:02.160 --> 02:05.040
到后端服务器去获得数据

02:05.040 --> 02:07.040
所以说我们实际开发中

02:07.040 --> 02:07.960
像什么数据户端

02:07.960 --> 02:08.560
埋捨户端

02:08.560 --> 02:10.040
我们基本上不太会去写

02:10.040 --> 02:11.200
像这个毛豆士

02:11.200 --> 02:11.840
就算写的话

02:11.840 --> 02:13.960
也是一些非业务的功能

02:13.960 --> 02:15.320
像这个东西一般不会写

02:15.320 --> 02:17.360
像摩克拉更加不会写了

02:17.360 --> 02:18.480
摩克拉有可能会写

02:18.480 --> 02:20.320
就加一些魔力的数据

02:20.320 --> 02:22.520
但是跟业务无关

02:22.520 --> 02:23.480
像这个

02:23.960 --> 02:26.120
service也是我们一般也不会写

02:26.120 --> 02:27.280
就是处理写很简单

02:27.280 --> 02:29.600
一般来说我们在路由这里

02:29.600 --> 02:31.840
我们写我们制定一个规则

02:31.840 --> 02:33.000
只要满足一个规则

02:33.000 --> 02:36.000
我把它转发到后端服务器

02:36.000 --> 02:36.960
比方说我们写哪呢

02:36.960 --> 02:39.200
我们比方说吧就写这儿吧

02:40.480 --> 02:40.920
就写这儿

02:42.360 --> 02:43.520
比方说我们这里呢

02:43.520 --> 02:44.520
使用一个app

02:46.960 --> 02:47.560
点use

02:49.080 --> 02:49.960
我们进行转发

02:51.160 --> 02:51.520
然后呢

02:51.520 --> 02:52.760
我们这里写一个中间键

02:53.480 --> 02:58.720
取个名字叫做proxymade.js

02:59.920 --> 03:00.880
我们这里导出

03:08.900 --> 03:09.220
好

03:09.220 --> 03:11.620
我们这边去使用我们这个服务器

03:11.620 --> 03:14.780
这个代理proxymade

03:14.780 --> 03:15.700
什么意思呢

03:15.700 --> 03:16.940
就是我们这里来使用代理

03:17.940 --> 03:20.100
使用代理

03:20.100 --> 03:22.660
那么我们这个中间键要处理一个问题

03:22.660 --> 03:25.140
就是当满足一定规则的时候

03:25.180 --> 03:28.020
我要把它交给后端服务器来处理

03:28.020 --> 03:29.180
然后它给我的数据过后

03:29.180 --> 03:30.500
我再把它返回过来

03:30.500 --> 03:31.700
是这么一个意思

03:31.700 --> 03:34.020
就比方说我们假设

03:34.020 --> 03:35.300
假设我们的规则是啥呢

03:35.300 --> 03:36.420
假设我们的规则是

03:36.420 --> 03:40.460
只要你的请求是以这个data API开头

03:40.460 --> 03:41.740
以这个开头的

03:41.740 --> 03:43.940
那么我就把后边的东西

03:43.940 --> 03:45.060
后边的什么

03:45.060 --> 03:46.900
比方说data开头

03:46.900 --> 03:48.260
然后后边的什么 API

03:48.260 --> 03:50.300
什么这些玩意儿

03:50.300 --> 03:52.300
然后我就把它转发到哪呢

03:52.300 --> 03:54.900
我们把它转发到我这个服务器

03:55.700 --> 03:57.380
比方说我们转发到这个服务器

03:58.380 --> 04:00.340
然后后边是以 API 这个开头

04:00.340 --> 04:01.940
比方说我们要做这么一个功能

04:01.940 --> 04:04.420
以凡是以这个东西请求开头的

04:04.420 --> 04:04.860
OK

04:04.860 --> 04:06.820
那我就把这个这一部分

04:06.820 --> 04:08.700
作为 pass 转发到这

04:08.700 --> 04:09.460
你意思吧

04:09.460 --> 04:10.540
我们要做这么一个功能

04:10.540 --> 04:12.300
所以说我们这里是不是要发动请求

04:12.300 --> 04:12.860
要发动请求

04:12.860 --> 04:13.700
我们是不是可以使用

04:13.700 --> 04:15.780
这个 ADDP 这个库

04:15.780 --> 04:16.900
对吧

04:16.900 --> 04:17.780
ADDP

04:17.780 --> 04:19.100
当然你用 ID 小时也可以

04:19.940 --> 04:20.580
我们用它

04:21.740 --> 04:23.180
那么现在我们怎么来做呢

04:23.220 --> 04:24.660
我们首先在这里

04:24.660 --> 04:25.860
首先判断一下

04:25.860 --> 04:27.340
你有没有命中

04:27.340 --> 04:28.580
有没有这个格式

04:28.580 --> 04:29.900
是不是我们要求的格式

04:29.900 --> 04:30.580
我们怎么判断

04:30.580 --> 04:33.780
就判断一下 rig 点什么 pass

04:33.780 --> 04:36.380
是不是 begin with

04:36.380 --> 04:38.060
starts with a begin with

04:38.060 --> 04:38.900
我一点忘了

04:40.580 --> 04:41.260
等一下吧

04:42.620 --> 04:43.780
一个字无事

04:43.780 --> 04:45.940
好像是 starts with

04:47.260 --> 04:49.660
pass starts with

04:49.660 --> 04:52.700
是不是以这个就是data开头

04:52.740 --> 04:54.700
如果说你是以data开头的话

04:54.700 --> 04:55.700
或者说你如果说

04:55.700 --> 04:57.100
不是以data开头的话

04:57.100 --> 04:58.340
那么跟我们没关系

04:58.340 --> 04:58.660
对吧

04:58.660 --> 05:00.020
我们不用代理

05:00.020 --> 05:00.900
不需要代理

05:01.740 --> 05:02.820
然后我们把它转交

05:02.820 --> 05:04.580
直接往后面转交就完事了

05:04.580 --> 05:05.580
这种情况

05:05.580 --> 05:07.180
那么这里是不是需要代理

05:07.180 --> 05:07.780
对不对

05:07.780 --> 05:08.620
需要代理

05:08.620 --> 05:09.340
需要代理的时候

05:09.340 --> 05:10.620
我们是不是要得到这一部分

05:11.500 --> 05:11.660
是吧

05:11.660 --> 05:12.940
得到这一部分

05:12.940 --> 05:13.620
对吧

05:13.620 --> 05:14.660
那这个东西怎么办

05:14.660 --> 05:17.060
这个东西我们就可以简单一点处理的话

05:17.060 --> 05:18.780
就是这个东西是长度也多少

05:18.780 --> 05:19.740
这个东西

05:19.740 --> 05:20.380
长度

05:20.380 --> 05:21.420
那个

05:21.460 --> 05:23.540
一二三四五

05:23.540 --> 05:23.740
对吧

05:23.740 --> 05:24.860
当然我这个写的话

05:24.860 --> 05:25.740
一把写死了

05:25.740 --> 05:26.180
对不对

05:26.180 --> 05:27.140
我们这里定个变量

05:28.180 --> 05:28.940
begin with

05:28.940 --> 05:30.140
或者context

05:32.140 --> 05:33.180
就是以这个开头

05:34.460 --> 05:35.580
把这个写到这

05:37.500 --> 05:38.140
以这个开头

05:39.340 --> 05:41.100
然后我们这里写这个

05:41.820 --> 05:44.060
于是我把pass处理一下

05:44.060 --> 05:45.540
这个rack.pass

05:45.540 --> 05:47.300
等处理一下

05:47.300 --> 05:48.580
就是怎么处理呢

05:48.580 --> 05:49.260
substream

05:49.980 --> 05:51.500
这个substream就忘了

05:51.500 --> 05:52.700
这些东西我经常忘了

05:53.580 --> 05:54.820
substream

05:56.100 --> 05:57.900
就是从第几个开头呢

05:57.900 --> 06:00.100
去掉前五个

06:00.100 --> 06:02.220
也就是从第五个开头对吧

06:02.220 --> 06:03.700
因为下边要用从零开始嘛

06:03.700 --> 06:05.700
stl我们取什么呢

06:05.700 --> 06:08.380
取context.lens

06:08.380 --> 06:09.140
从这个开始

06:09.140 --> 06:10.980
我们取出最后边的这一部分

06:10.980 --> 06:12.260
得到一个pass

06:12.260 --> 06:13.180
我们来访问一下

06:13.180 --> 06:14.100
输出一下pass

06:15.100 --> 06:16.220
输出一下

06:16.220 --> 06:17.540
好接下来我们来试一下

06:17.540 --> 06:18.340
来试一下

06:18.340 --> 06:19.140
以为这个代理过

06:19.180 --> 06:20.300
后来我们来看一下

06:21.460 --> 06:22.460
随便找一个吧

06:25.100 --> 06:26.140
比方就这个接口

06:26.140 --> 06:27.140
就是我们的请求

06:27.140 --> 06:28.740
我们的中国的所有省份

06:28.740 --> 06:30.340
这个请接口好像有点问题了

06:30.340 --> 06:31.700
省份不全

06:31.700 --> 06:32.180
没事

06:32.180 --> 06:33.380
我后边再修复

06:33.380 --> 06:34.700
从今天有数据就行了

06:34.700 --> 06:35.660
那么我们现在去请求

06:35.660 --> 06:36.580
我们自己的服务器

06:36.580 --> 06:38.580
localhost5008

06:39.340 --> 06:40.580
然后我们怎么请求呢

06:40.580 --> 06:41.500
我们请求

06:41.500 --> 06:42.780
如果说请求自己的接口

06:42.780 --> 06:44.380
我们之前写过那个什么

06:44.380 --> 06:45.980
student对吧

06:46.540 --> 06:47.980
请求我们自己的接口

06:47.980 --> 06:49.140
就是我们loader服务器

06:49.140 --> 06:49.860
自己的接口

06:49.860 --> 06:50.900
你看是不是没问题的

06:50.940 --> 06:51.300
对吧

06:51.300 --> 06:52.100
跟这个不影响

06:52.100 --> 06:52.620
为什么呢

06:52.620 --> 06:53.380
因为他不满足

06:53.380 --> 06:54.420
这个contact的时候条件

06:54.420 --> 06:54.660
对吧

06:54.660 --> 06:55.740
所以说他不需要代理

06:55.740 --> 06:57.100
直接往后移交就完事了

06:57.500 --> 06:57.700
好

06:57.700 --> 06:59.580
如果说我们是那个

07:00.020 --> 07:01.220
请求的是这种

07:01.220 --> 07:03.060
格式data API

07:03.060 --> 07:05.380
比方说我们已到的哪儿了

07:05.780 --> 07:08.260
比方说我们请求到那个

07:08.300 --> 07:09.220
API local

07:09.220 --> 07:09.500
是吧

07:09.500 --> 07:10.180
我们的服务器

07:10.180 --> 07:11.460
是不是没有提供这个接口

07:11.460 --> 07:11.700
对吧

07:11.700 --> 07:12.780
那么我们就做代理

07:12.780 --> 07:13.460
send

07:13.460 --> 07:14.500
你看一下空彩

07:14.500 --> 07:16.460
是不是输出了这一部分

07:16.460 --> 07:16.820
对吧

07:16.820 --> 07:17.460
那么这一部分

07:17.460 --> 07:18.060
就实相认语

07:18.060 --> 07:19.340
是我们在这里输出的

07:19.500 --> 07:21.060
只是我们代理还没有写完

07:21.060 --> 07:21.380
好

07:21.380 --> 07:22.980
那么这里怎么来写代理呢

07:22.980 --> 07:23.580
代理的话

07:23.580 --> 07:25.300
我们就要利用这个

07:25.300 --> 07:26.220
这个模块

07:26.220 --> 07:26.980
atcp

07:27.580 --> 07:28.380
我们可以用

07:28.380 --> 07:29.060
以前的学过了

07:29.260 --> 07:30.180
request

07:30.180 --> 07:31.540
构建一个请求

07:31.540 --> 07:32.940
那么这里的Options

07:32.940 --> 07:33.420
hose

07:33.420 --> 07:33.980
主进

07:33.980 --> 07:34.900
主进名

07:34.900 --> 07:36.220
主进是

07:36.220 --> 07:38.820
元进.tech 5100

07:39.340 --> 07:40.220
然后port

07:40.220 --> 07:41.340
端口号是

07:41.340 --> 07:42.820
这样就要写过来

07:45.380 --> 07:45.780
写过来

07:45.780 --> 07:46.460
写下来

07:46.460 --> 07:47.460
5100

07:48.460 --> 07:49.620
然后measure的

07:49.620 --> 07:50.380
请求方法

07:50.860 --> 07:52.700
请求方法是不跟这个的方法一样

07:52.700 --> 07:53.340
对不对

07:53.340 --> 07:54.620
请求方法跟它一样

07:54.620 --> 07:55.860
然后请求头

07:55.860 --> 07:57.100
haters

07:57.100 --> 07:58.540
因为你是转发单一点

07:58.540 --> 07:59.140
所以说

07:59.140 --> 08:00.940
你应该跟这个

08:00.940 --> 08:02.060
跟这个是一样的

08:02.060 --> 08:03.220
这边传过来什么东西

08:03.220 --> 08:05.020
那么这边就传过去什么东西

08:05.020 --> 08:05.740
所以说

08:05.740 --> 08:06.740
这边的请求头

08:06.740 --> 08:07.940
跟这边是一样的

08:07.940 --> 08:08.780
haters

08:08.780 --> 08:09.340
对不对

08:09.340 --> 08:10.020
跟req

08:10.020 --> 08:11.540
haters是一样的

08:11.540 --> 08:12.860
然后我们这样子

08:12.860 --> 08:15.100
是不是构建出来了一个request对象

08:15.100 --> 08:16.100
request对象

08:16.100 --> 08:17.500
这是代理请求对象

08:18.500 --> 08:19.500
构建

08:19.500 --> 08:21.500
代理请求对象

08:21.500 --> 08:22.500
request

08:23.500 --> 08:24.500
那么头一样

08:24.500 --> 08:25.500
对吧

08:25.500 --> 08:26.500
方法一样

08:26.500 --> 08:27.500
然后就是我把一个

08:27.500 --> 08:28.500
horst

08:28.500 --> 08:29.500
horst

08:29.500 --> 08:30.500
horst

08:30.500 --> 08:31.500
port变了

08:31.500 --> 08:32.500
对不对

08:32.500 --> 08:33.500
那么这里

08:33.500 --> 08:34.500
响应的时候

08:34.500 --> 08:35.500
它是不是给我一个

08:35.500 --> 08:36.500
第二个坛数就毁掉坛数

08:36.500 --> 08:37.500
对吧

08:37.500 --> 08:38.500
response

08:38.500 --> 08:39.500
这是响应

08:39.500 --> 08:41.500
这是代理响应对象

08:41.500 --> 08:42.500
代理响应对象

08:42.500 --> 08:43.500
response

08:43.500 --> 08:44.500
好

08:44.500 --> 08:46.500
但是我们请求还没有写完

08:46.500 --> 08:47.500
还有一个pass

08:47.500 --> 08:48.500
pass完没写

08:49.500 --> 08:50.500
pass

08:51.500 --> 08:52.500
pass呢

08:52.500 --> 08:53.500
我们就用这个pass

08:53.500 --> 08:54.500
就这个pass

08:55.500 --> 08:56.500
就是我们

08:56.500 --> 08:57.500
这边就这一部分

08:57.500 --> 08:58.500
这一部分我们作为pass

08:58.500 --> 08:59.500
加进去

09:00.500 --> 09:01.500
我们请求还没有写完

09:01.500 --> 09:03.500
因为响应底是poser请求

09:03.500 --> 09:04.500
所以有请求体

09:04.500 --> 09:05.500
对不对

09:05.500 --> 09:06.500
那么请求体怎么写的

09:06.500 --> 09:07.500
就是说

09:07.500 --> 09:08.500
我要把req

09:08.500 --> 09:09.500
就是我们

09:09.500 --> 09:10.500
这个req是啥

09:10.500 --> 09:11.500
这个req是这个地方

09:11.500 --> 09:12.500
给我请出

09:12.500 --> 09:13.500
传过来对象

09:13.500 --> 09:14.500
然后

09:14.500 --> 09:15.500
我要把它交给什么

09:15.500 --> 09:16.500
request对象

09:16.500 --> 09:17.500
对吧

09:17.500 --> 09:19.500
我们把req的请求体

09:19.500 --> 09:20.500
放到request里边

09:20.500 --> 09:21.500
那么这个东西怎么做

09:21.500 --> 09:22.500
我们完全可以用

09:22.500 --> 09:23.500
流的方式来处理

09:23.500 --> 09:24.500
比方说req

09:24.500 --> 09:25.500
它其实就是一个

09:25.500 --> 09:26.500
本质上就是个流

09:26.500 --> 09:27.500
对不对

09:27.500 --> 09:28.500
我们把这个流读出来

09:28.500 --> 09:29.500
然后每读出一部分

09:29.500 --> 09:30.500
往这个流里边写

09:30.500 --> 09:31.500
对吧

09:31.500 --> 09:32.500
或者是我们用管道

09:32.500 --> 09:33.500
pip

09:33.500 --> 09:34.500
是把这个请求

09:34.500 --> 09:35.500
把请求体

09:35.500 --> 09:36.500
对吧

09:36.500 --> 09:37.500
把

09:37.500 --> 09:38.500
请求体

09:39.500 --> 09:41.500
写入到

09:41.500 --> 09:43.500
代理请求对象的

09:43.500 --> 09:44.500
请求体中

09:45.500 --> 09:46.500
就是把我们

09:46.500 --> 09:47.500
就是把这个地方的

09:47.500 --> 09:48.500
请求体

09:48.500 --> 09:49.500
把这个地方的

09:49.500 --> 09:50.500
请求体

09:50.500 --> 09:51.500
用个管道

09:51.500 --> 09:52.500
连接到这边

09:52.500 --> 09:53.500
对不对

09:53.500 --> 09:54.500
好

09:54.500 --> 09:55.500
那么我们这就写完了

09:55.500 --> 09:56.500
好

09:56.500 --> 09:57.500
那么这边想用的

09:57.500 --> 09:58.500
想用怎么写的

09:58.500 --> 09:59.500
想用的也是一样

09:59.500 --> 10:00.500
设置要搞定

10:00.500 --> 10:01.500
想用头

10:01.500 --> 10:02.500
和什么

10:02.500 --> 10:03.500
想用的

10:03.500 --> 10:04.500
想用的

10:04.500 --> 10:05.500
对不对

10:05.500 --> 10:06.500
首先我们搞定

10:06.500 --> 10:07.500
req

10:07.500 --> 10:08.500
standards

10:10.500 --> 10:11.500
就是我们

10:11.500 --> 10:12.500
我们这边的

10:12.500 --> 10:13.500
是不是要跟这边的

10:13.500 --> 10:14.500
想用一码一样

10:14.500 --> 10:15.500
对不对

10:15.500 --> 10:16.500
我们这边req

10:16.500 --> 10:17.500
这个想用一码

10:17.500 --> 10:18.500
应该跟什么

10:18.500 --> 10:19.500
response

10:19.500 --> 10:20.500
status

10:20.500 --> 10:21.500
code是一样的

10:21.500 --> 10:23.500
想用一码要一样

10:23.500 --> 10:25.500
然后想用头要一样

10:25.500 --> 10:26.500
想用头怎么写呢

10:26.500 --> 10:27.500
想用头

10:27.500 --> 10:28.500
我们这边是不是

10:28.500 --> 10:29.500
可以拿到一个想用头

10:29.500 --> 10:30.500
这个对象

10:30.500 --> 10:31.500
我们可以循环这个对象

10:31.500 --> 10:32.500
response

10:33.500 --> 10:34.500
第二什么

10:34.500 --> 10:35.500
headers

10:35.500 --> 10:37.500
循环它的所有想用头

10:37.500 --> 10:38.500
然后把每一个想用头

10:38.500 --> 10:40.500
拿去设置这个set header

10:40.500 --> 10:41.500
对吧

10:41.500 --> 10:42.500
想用头的名字

10:42.500 --> 10:44.500
想用头的值

10:44.500 --> 10:45.500
对不对

10:45.500 --> 10:46.500
我们这样子的

10:46.500 --> 10:47.500
就把想用头就完全一样了

10:47.500 --> 10:48.500
把这边的想用头

10:48.500 --> 10:49.500
拿出来

10:49.500 --> 10:50.500
循环拿出来

10:50.500 --> 10:51.500
然后加入到这个

10:51.500 --> 10:52.500
想用头里面

10:52.500 --> 10:53.500
原来的意思

10:53.500 --> 10:54.500
好

10:54.500 --> 10:55.500
那么想用体呢

10:55.500 --> 10:56.500
想用体呢

10:56.500 --> 10:57.500
我们也是不是

10:57.500 --> 10:58.500
也可以用pipe

10:58.500 --> 10:59.500
我们可以用response

10:59.500 --> 11:00.500
pipe

11:01.500 --> 11:02.500
给它连接到

11:02.500 --> 11:03.500
我们race

11:03.500 --> 11:04.500
里面去

11:04.500 --> 11:05.500
这就是完成了一个代理的

11:05.500 --> 11:06.500
咱们来看一下吧

11:06.500 --> 11:07.500
接下来我们来看一下

11:07.500 --> 11:08.500
我们请求这个接口

11:08.500 --> 11:09.500
这个接口

11:09.500 --> 11:10.500
实际上是我们

11:10.500 --> 11:11.500
我那个服务器上的接口

11:11.500 --> 11:12.500
我们send

11:12.500 --> 11:13.500
发生了个请求

11:13.500 --> 11:14.500
你看是不是拿到了

11:14.500 --> 11:15.500
对吧

11:15.500 --> 11:16.500
我们就代理完成了

11:17.500 --> 11:18.500
对于我们这个客户端而言

11:18.500 --> 11:19.500
就很神奇

11:19.500 --> 11:20.500
我请求他

11:20.500 --> 11:21.500
他也给我的数据

11:21.500 --> 11:22.500
感觉上好像是他给我的数据

11:22.500 --> 11:23.500
实际上他是

11:23.500 --> 11:24.500
到了这个服务器

11:24.500 --> 11:25.500
是通过代理完成的

11:25.500 --> 11:27.500
通过代理一个移交完成的

11:27.500 --> 11:29.500
包括我们去请求那个

11:29.500 --> 11:30.500
APM movie

11:30.500 --> 11:31.500
我们去请求一下

11:31.500 --> 11:32.500
是不是请求得

11:32.500 --> 11:34.500
拿到电影数据了

11:34.500 --> 11:35.500
对不对

11:35.500 --> 11:36.500
就是这么个意思

11:36.500 --> 11:37.500
就是代理

11:37.500 --> 11:38.500
当然我们平时

11:38.500 --> 11:39.500
这是我们自己的手写

11:39.500 --> 11:41.500
保存下吧

11:41.500 --> 11:42.500
实际上更多的时候

11:42.500 --> 11:43.500
我们一般来说

11:43.500 --> 11:44.500
也不会去手写

11:44.500 --> 11:46.500
我们一般就直接使用

11:46.500 --> 11:47.500
一个中间键就完成了

11:47.500 --> 11:49.500
他实际上有这个中间键的

11:49.500 --> 11:50.500
给你写好的

11:50.500 --> 11:51.500
这个就是顶定大名的

11:51.500 --> 11:52.500
ADB Proxy Midwear

11:52.500 --> 11:53.500
其实你们平时

11:53.500 --> 11:56.500
我那个就是View的时候

11:56.500 --> 11:58.500
他不是一个开发服务器吗

11:58.500 --> 11:59.500
开发服务器他就是

11:59.500 --> 12:00.500
用这个玩意儿做的

12:00.500 --> 12:01.500
他里边不是有个代理配置吗

12:01.500 --> 12:02.500
代理配置

12:02.500 --> 12:03.500
他就是基于这个中间键

12:03.500 --> 12:04.500
开发服务器实际上

12:04.500 --> 12:05.500
他就给你

12:05.500 --> 12:06.500
可以认为

12:06.500 --> 12:07.500
他给你

12:07.500 --> 12:08.500
达了一个简易的

12:08.500 --> 12:09.500
非常非常简易的

12:09.500 --> 12:10.500
Express服务器

12:10.500 --> 12:11.500
在本地给你

12:11.500 --> 12:12.500
达了一个Express服务器

12:12.500 --> 12:13.500
然后在Express服务器

12:13.500 --> 12:14.500
上可以配置代理

12:14.500 --> 12:15.500
配置代理的时候

12:15.500 --> 12:16.500
实际上就用的是他

12:16.500 --> 12:17.500
这个东西

12:17.500 --> 12:18.500
首先我们安装吧

12:18.500 --> 12:19.500
我们先不说那么多

12:19.500 --> 12:20.500
安装再说

12:21.500 --> 12:27.500
NPMI ADDP Proxy Midwear

12:27.500 --> 12:30.900
安装

12:30.900 --> 12:31.900
安装好了

12:31.900 --> 12:33.900
然后我们把它启动起来

12:33.900 --> 12:34.900
那么这东西怎么用呢

12:34.900 --> 12:35.900
他这用法非常简单

12:35.900 --> 12:36.900
你看一下

12:36.900 --> 12:37.900
他就倒入这个里边

12:37.900 --> 12:38.900
他里边有一个

12:38.900 --> 12:39.900
有一个寒树叫做

12:39.900 --> 12:41.900
Crease Proxy Midwear

12:42.900 --> 12:43.900
倒这个东西

12:43.900 --> 12:44.900
这个玩意

12:44.900 --> 12:45.900
雕用这个寒树

12:45.900 --> 12:46.900
他得到的就是一个Proxy

12:46.900 --> 12:48.900
所以说你倒出的时候

12:48.900 --> 12:49.900
当然你也可以不单独

12:49.900 --> 12:50.900
去写一个文件

12:50.900 --> 12:51.900
你直接在前面

12:51.900 --> 12:52.900
在这里写也可以

12:52.900 --> 12:54.900
只要给他加中间键就完事了

12:54.900 --> 12:55.900
对吧

12:55.900 --> 12:56.900
你雕用那个寒树

12:56.900 --> 12:57.900
是不是得到个中间键

12:57.900 --> 12:58.900
给他加进去完事了

12:58.900 --> 12:59.900
我这里直接

12:59.900 --> 13:00.900
把个雕用过后

13:00.900 --> 13:01.900
给他倒出也行

13:01.900 --> 13:02.900
我们把配置写到这

13:02.900 --> 13:03.900
这里边可以有很多配置

13:03.900 --> 13:05.900
它这边有哪一配置呢

13:05.900 --> 13:06.900
你看是不是可以

13:07.900 --> 13:09.900
那么这里是个配置对象

13:09.900 --> 13:10.900
你看这个配置对象

13:10.900 --> 13:11.900
跟那个5U里边的代理配置

13:11.900 --> 13:12.900
是完全一样的

13:12.900 --> 13:13.900
完全一样的

13:13.900 --> 13:15.900
而且它配置里面

13:15.900 --> 13:16.900
它还可以给你加这个

13:16.900 --> 13:18.900
还可以加上一个context

13:23.900 --> 13:24.900
收一收

13:24.900 --> 13:25.900
context

13:25.900 --> 13:29.870
就在这

13:29.870 --> 13:30.870
第一个参数

13:30.870 --> 13:31.870
可以加上一个context

13:31.870 --> 13:32.870
就跟我们刚才的context

13:32.870 --> 13:33.870
一样

13:33.870 --> 13:34.870
以什么什么开头

13:34.870 --> 13:35.870
比方说我们这里

13:35.870 --> 13:37.870
当你没有开头的话

13:37.870 --> 13:39.870
那么完全匹配PASS的话

13:39.870 --> 13:40.870
那就不用加了

13:40.870 --> 13:41.870
因为我们这个服务器上

13:41.870 --> 13:43.870
有自己的一些API

13:43.870 --> 13:44.870
如果说我不加这个

13:44.870 --> 13:45.870
就是说

13:45.870 --> 13:46.870
什么意思呢

13:46.870 --> 13:47.870
就是说

13:47.870 --> 13:48.870
如果我不写

13:48.870 --> 13:49.870
第一个参数直接代配置的话

13:49.870 --> 13:50.870
比方配置

13:50.870 --> 13:51.870
我们配置上

13:51.870 --> 13:52.870
配置talkies

13:52.870 --> 13:53.870
talkies

13:53.870 --> 13:54.870
所谓

13:54.870 --> 13:55.870
adb

13:55.870 --> 13:56.870
我这个服务器

13:56.870 --> 13:57.870
take

13:57.870 --> 13:58.870
5100

13:58.870 --> 13:59.870
比方说配置这个

13:59.870 --> 14:00.870
那么如果说

14:00.870 --> 14:01.870
我不写开头的话

14:01.870 --> 14:03.870
所有的请求都匹配到这了

14:03.870 --> 14:04.870
意思吧

14:04.870 --> 14:06.870
所有的请求都匹配到这了

14:06.870 --> 14:07.870
比方说

14:07.870 --> 14:09.870
你去请求

14:09.870 --> 14:10.870
你看一下

14:10.870 --> 14:11.870
如果说我们这样子写

14:11.870 --> 14:12.870
如果说我们这样子写

14:12.870 --> 14:13.870
那么你看一下

14:13.870 --> 14:14.870
我们之前的有些

14:14.870 --> 14:15.870
结果都用不了了

14:15.870 --> 14:16.870
比方学生管理系统里边

14:16.870 --> 14:19.870
分业获取学生

14:19.870 --> 14:20.870
你看

14:20.870 --> 14:21.870
是不是用不了了

14:21.870 --> 14:22.870
对吧

14:22.870 --> 14:23.870
因为他把他移交给谁了

14:23.870 --> 14:24.870
把他移交给这个服务器了

14:24.870 --> 14:25.870
对吧

14:25.870 --> 14:26.870
所有的请求都过去了

14:26.870 --> 14:27.870
当然有些人说

14:27.870 --> 14:29.870
那我在前面写一个吧

14:29.870 --> 14:31.870
我在前面写一个什么

14:31.870 --> 14:32.870
data

14:32.870 --> 14:34.870
写钢data

14:34.870 --> 14:35.870
可不可以呢

14:35.870 --> 14:36.870
这样子可以

14:36.870 --> 14:38.870
这样子就可以了

14:38.870 --> 14:39.870
比方说我们的优质

14:39.870 --> 14:40.870
写钢data过后

14:40.870 --> 14:41.870
那么我们在访问这个

14:41.870 --> 14:43.870
还是我们自己的接口

14:43.870 --> 14:44.870
对不对

14:44.870 --> 14:45.870
还是我们的自己接口

14:45.870 --> 14:46.870
没问题

14:46.870 --> 14:47.870
那么我们必须要有

14:47.870 --> 14:48.870
以data开头

14:48.870 --> 14:49.870
data开头的时候

14:49.870 --> 14:50.870
这个时候

14:50.870 --> 14:51.870
这个东西才会移交过去

14:51.870 --> 14:52.870
比方说这样这边

14:52.870 --> 14:53.870
以data开头的时候

14:53.870 --> 14:55.870
它就会自动给你移交过去

14:55.870 --> 14:57.870
但是移交的时候

14:57.870 --> 14:58.870
它就会遇到一个问题

14:58.870 --> 14:59.870
移交的时候

14:59.870 --> 15:01.870
它会把前面的钱税给你加上

15:01.870 --> 15:03.870
就整个钱税都给你加上

15:03.870 --> 15:04.870
那么那个服务器

15:04.870 --> 15:05.870
不需要这个钱税的

15:05.870 --> 15:07.870
那么就会造成一些问题

15:07.870 --> 15:08.870
所以说我们这个地方

15:08.870 --> 15:10.870
一般不用在这个优质里边

15:10.870 --> 15:12.870
写这个钱税

15:12.870 --> 15:13.870
一般在哪里写呢

15:13.870 --> 15:15.870
在这边写contact

15:15.870 --> 15:17.870
写contact

15:17.870 --> 15:20.380
data

15:20.380 --> 15:21.380
以这个开头

15:21.380 --> 15:22.380
以这个开头的时候

15:22.380 --> 15:24.380
你看

15:25.380 --> 15:27.380
我这里拍一下

15:27.380 --> 15:29.380
以这个开头的时候

15:29.380 --> 15:31.380
然后我移交给它

15:31.380 --> 15:32.380
那么这个地方

15:32.380 --> 15:33.380
还要处理一下

15:33.380 --> 15:34.380
还要处理一下

15:34.380 --> 15:36.380
还要进一步处理一下

15:36.380 --> 15:37.380
这里边有个

15:37.380 --> 15:39.380
可以写那个映射规则

15:39.380 --> 15:41.380
就是pass read write

15:41.380 --> 15:42.380
pass read write

15:42.380 --> 15:45.380
就是你原来的东西是什么

15:45.380 --> 15:48.380
然后我把它映射到一个新的路径

15:48.380 --> 15:50.380
就是路径给它改一下

15:50.380 --> 15:51.380
把个路径给它改一下

15:51.380 --> 15:52.380
原来的路径

15:52.380 --> 15:54.380
然后匹配到了过后

15:54.380 --> 15:56.380
我把它映射到一个新的路径

15:56.380 --> 15:58.380
是这么个意思

15:58.380 --> 16:00.380
那么我们这里来处理一下

16:02.380 --> 16:03.380
那么这个contact是什么呢

16:03.380 --> 16:05.380
它就是如果说以什么开头的话

16:05.380 --> 16:06.380
我就使用这个代理

16:06.380 --> 16:07.380
但是代理的时候

16:07.380 --> 16:08.380
它还是一样

16:08.380 --> 16:10.380
还是会把整个的东西交过去

16:10.380 --> 16:11.380
没了意思吧

16:11.380 --> 16:13.380
还是会把整个UIL地址交过去

16:13.380 --> 16:14.380
不然那么这个

16:14.380 --> 16:16.380
实际上是不满足我们的场景的

16:16.380 --> 16:18.380
那么像这种情况下的

16:18.380 --> 16:20.380
如果说你的pass是完全一致的

16:20.380 --> 16:22.380
那就不用写这个了

16:22.380 --> 16:23.380
如果说是完全一致就不用写了

16:23.380 --> 16:25.380
但是我们现在不一致对不对

16:25.380 --> 16:27.380
所以说我们要写个pass read write

16:27.380 --> 16:29.380
那么匹配

16:29.380 --> 16:31.380
匹配以什么开头的路径呢

16:31.380 --> 16:33.380
以这个就是

16:33.380 --> 16:35.380
我这里它是个写的是真的表达式

16:35.380 --> 16:37.380
还是写的是什么玩意

16:37.380 --> 16:38.380
不是真的表达式

16:38.380 --> 16:40.380
就是一个字母串

16:40.380 --> 16:42.380
反而是以

16:42.380 --> 16:43.380
data

16:43.380 --> 16:45.380
这个写杠我们要转移吗

16:45.380 --> 16:46.380
要转个移

16:46.380 --> 16:48.380
data

16:48.380 --> 16:49.380
这个写杠不用转移

16:49.380 --> 16:51.380
反而是以这个开头的

16:51.380 --> 16:53.380
我们就给它

16:53.380 --> 16:55.380
重新定位

16:55.380 --> 16:56.380
重新定位

16:56.380 --> 16:57.380
定位到后边

16:57.380 --> 16:59.380
然后看一下这个重新定位的话

16:59.380 --> 17:00.380
后边的东西动态过去

17:00.380 --> 17:01.380
看怎么办

17:01.380 --> 17:02.380
我们这里看一下吧

17:02.380 --> 17:03.380
pass read write

17:03.380 --> 17:05.380
这个东西要看的文档来做

17:05.380 --> 17:09.780
read write

17:09.780 --> 17:10.780
明白了

17:10.780 --> 17:11.780
它这里来一看

17:11.780 --> 17:12.780
它这里有一个

17:12.780 --> 17:13.780
有一个那个就是

17:13.780 --> 17:15.780
有一个可以把它写成一个方形

17:15.780 --> 17:17.780
可以把它写成一个方形

17:17.780 --> 17:18.780
那行

17:18.780 --> 17:19.780
那我把它写成个方形

17:19.780 --> 17:21.780
这样子处理前灵活一点

17:22.780 --> 17:24.780
就是给我们这里输出一下吧

17:24.780 --> 17:25.780
输出一下pass

17:27.780 --> 17:31.690
接下来

17:31.690 --> 17:32.690
我们在清空

17:33.690 --> 17:34.690
然后这边

17:35.690 --> 17:36.690
这里出了问题

17:37.690 --> 17:38.690
这里

17:38.690 --> 17:40.690
我们pass得到的是这个对吧

17:40.690 --> 17:41.690
这是我们请求的地址

17:41.690 --> 17:42.690
你看我们是请求地址

17:42.690 --> 17:43.690
是不是这个

17:43.690 --> 17:44.690
是不是我们要把改成

17:44.690 --> 17:45.690
把个data去掉

17:45.690 --> 17:46.690
对不对

17:46.690 --> 17:47.690
是把data去掉

17:47.690 --> 17:48.690
当然也可以把

17:48.690 --> 17:49.690
CountX写到前面

17:49.690 --> 17:50.690
CountX

17:50.690 --> 17:52.690
当然这是个特殊情况

17:52.690 --> 17:53.690
因为我们自己服务器

17:53.690 --> 17:54.690
有这个API开头的接口

17:54.690 --> 17:55.690
所以说我这里不能用API

17:55.690 --> 17:56.690
因为不然的话

17:56.690 --> 17:58.690
他就把我的API给我代理一口了

17:58.690 --> 17:59.690
把我的API就搞没了

17:59.690 --> 18:00.690
但是很多情况下

18:00.690 --> 18:01.690
我们的服务器

18:01.690 --> 18:02.690
实际上是没有这个东西的

18:02.690 --> 18:03.690
没有这个东西

18:03.690 --> 18:04.690
你就不用这个玩意了

18:04.690 --> 18:05.690
如果说

18:05.690 --> 18:06.690
如果说我们的服务器上

18:06.690 --> 18:07.690
是没有这个东西的

18:07.690 --> 18:08.690
没有后边

18:08.690 --> 18:09.690
我们自己没有API

18:09.690 --> 18:10.690
全在代理

18:10.690 --> 18:11.690
我们只是充当一个代理的话

18:11.690 --> 18:12.690
那么这里就很简单了

18:12.690 --> 18:13.690
非常非常简单了

18:13.690 --> 18:15.690
那么直接是API开头

18:15.690 --> 18:16.690
那么这里不用管了

18:16.690 --> 18:17.690
这个地方也不用管了

18:17.690 --> 18:18.690
对吧

18:18.690 --> 18:19.690
API请求的什么

18:19.690 --> 18:20.690
它就会发过去

18:20.690 --> 18:21.690
但是现在不一样

18:21.690 --> 18:22.690
我们看一下这个场景

18:23.690 --> 18:24.690
如果说这种情况的话

18:24.690 --> 18:25.690
我们把data给它去掉

18:25.690 --> 18:26.690
对吧

18:26.690 --> 18:27.690
data给它去掉就行了

18:27.690 --> 18:28.690
那么我们这里

18:28.690 --> 18:29.690
就用刚才那种做法

18:29.690 --> 18:30.690
PASS

18:30.690 --> 18:32.690
Substitute

18:33.690 --> 18:35.690
Punctress.nance

18:35.690 --> 18:36.690
对不对

18:36.690 --> 18:38.690
反为一个新的PASS

18:38.690 --> 18:39.690
对吧

18:39.690 --> 18:40.690
你看一下

18:40.690 --> 18:41.690
现在就可以了

18:41.690 --> 18:42.690
是你的

18:43.690 --> 18:46.260
怎么还有问题

18:46.260 --> 18:47.260
应该是没问题了

18:49.260 --> 18:50.260
应该是没问题了

18:50.260 --> 18:51.260
我看一下

18:56.020 --> 18:57.020
没问题了

18:57.020 --> 18:59.520
Substitute

18:59.520 --> 19:00.520
我们把它输出一下

19:00.520 --> 19:01.520
看一下

19:01.520 --> 19:02.520
输出一下

19:05.920 --> 19:06.920
来

19:06.920 --> 19:07.920
清空

19:07.920 --> 19:08.920
发送请求

19:09.920 --> 19:11.920
这里输出也没有输出

19:12.920 --> 19:13.920
不对吧

19:13.920 --> 19:15.920
输出也没有输出

19:15.920 --> 19:16.920
这有点问题

19:16.920 --> 19:18.920
Countress.nance

19:19.920 --> 19:20.920
没问题

19:20.920 --> 19:25.000
它居然没有输出

19:25.000 --> 19:26.000
这个神奇了

19:26.000 --> 19:27.000
打个断点

19:28.000 --> 19:31.080
运行箱

19:31.080 --> 19:32.080
Send

19:33.080 --> 19:35.080
都没有运行这个玩意

19:35.080 --> 19:36.080
我这里写错了

19:36.080 --> 19:37.080
API开头

19:37.080 --> 19:38.080
Data开头

19:38.080 --> 19:40.080
我们这里是Countress

19:40.080 --> 19:41.080
以这个开头

19:41.080 --> 19:43.840
这样

19:43.840 --> 19:44.840
现在应该没问题了

19:44.840 --> 19:45.840
不用看了

19:45.840 --> 19:46.840
应该没问题了

19:46.840 --> 19:47.840
Send

19:47.840 --> 19:48.840
你看 是不是拿到结果了

19:48.840 --> 19:49.840
对吧

19:49.840 --> 19:50.840
这就完全代理了

19:50.840 --> 19:51.840
原来的意思吧

19:51.840 --> 19:52.840
PASS.reduce

19:52.840 --> 19:53.840
平时我们都没有怎么用

19:53.840 --> 19:55.840
因为平时我们请求啥路径

19:55.840 --> 19:56.840
就给我

19:56.840 --> 19:57.840
因为我们现在是什么情况

19:57.840 --> 19:59.840
因为平时我们是这样子

19:59.840 --> 20:00.840
我们请求自己的服务器的

20:00.840 --> 20:01.840
某一个路径

20:01.840 --> 20:03.840
它就原封不动的

20:03.840 --> 20:05.840
给我请求到代理服务器

20:06.840 --> 20:07.840
这个路径

20:07.840 --> 20:08.840
对吧

20:08.840 --> 20:09.840
原封不动的把路径拿过来

20:09.840 --> 20:10.840
刚才我们的需求

20:10.840 --> 20:11.840
有一点 稍微有点变化

20:11.840 --> 20:12.840
就是我们

20:12.840 --> 20:13.840
是在这种情况下

20:13.840 --> 20:14.840
我们要把它

20:14.840 --> 20:15.840
重写路径

20:15.840 --> 20:16.840
路径要进行重写

20:16.840 --> 20:17.840
重写到这个地方

20:17.840 --> 20:18.840
所以说

20:18.840 --> 20:19.840
我们要自己手中处理一下

20:19.840 --> 20:20.840
如果说这种情况的话

20:20.840 --> 20:21.840
就完全不用处理的

20:22.840 --> 20:23.840
默认就是这样子

20:23.840 --> 20:25.840
把PASS.reduce加过去

20:25.840 --> 20:26.840
它里边

20:26.840 --> 20:27.840
其实还有很多配置

20:27.840 --> 20:28.840
有信用的可以看一下

20:28.840 --> 20:29.840
我们当然

20:29.840 --> 20:31.840
不会把这个APIe去讲

20:32.840 --> 20:33.840
它有什么配置呢

20:33.840 --> 20:34.840
还有什么

20:35.840 --> 20:36.840
什么意思呢

20:37.840 --> 20:38.840
它就是说

20:38.840 --> 20:39.840
它是不是要

20:39.840 --> 20:40.840
把这个host给你改了

20:41.840 --> 20:42.840
因为我们请求头

20:42.840 --> 20:43.840
里边不是个host

20:43.840 --> 20:44.840
对不对

20:44.840 --> 20:45.840
你看我们这个

20:45.840 --> 20:46.840
看我们那个图

20:47.840 --> 20:49.840
科普端请求我们的服务器

20:49.840 --> 20:50.840
是不是带一个host

20:50.840 --> 20:51.840
那个host的请求头

20:51.840 --> 20:52.840
是不是我们服务器的地址

20:53.840 --> 20:54.840
那么这个代理请求的时候

20:54.840 --> 20:55.840
是保留这个请求头

20:55.840 --> 20:57.840
还是说把这个请求头

20:57.840 --> 20:58.840
host的请求头

20:58.840 --> 20:59.840
换成这个服务器的

20:59.840 --> 21:00.840
请求头

21:00.840 --> 21:01.840
就这么个意思

21:01.840 --> 21:02.840
就change orange

21:03.840 --> 21:04.840
那么你如果说

21:04.840 --> 21:05.840
因为有的服务器有限制

21:05.840 --> 21:06.840
有的服务器

21:06.840 --> 21:08.840
还要读那个host的请求头

21:08.840 --> 21:09.840
如果说读到了一个请求头

21:09.840 --> 21:10.840
不对

21:10.840 --> 21:12.840
比方说我们

21:12.840 --> 21:13.840
比方说我们这边

21:13.840 --> 21:14.840
这个数据服务器

21:14.840 --> 21:16.840
它的主机是

21:16.840 --> 21:17.840
连进

21:18.840 --> 21:19.840
或者是度1

21:20.840 --> 21:21.840
如果说这种情况的话

21:21.840 --> 21:22.840
结果你给我

21:22.840 --> 21:23.840
发过来的请求头

21:23.840 --> 21:24.840
是你这边的

21:24.840 --> 21:25.840
proxy.com

21:26.840 --> 21:27.840
那么这个时候

21:27.840 --> 21:28.840
有些服务器他就不认

21:28.840 --> 21:29.840
所以说他问你

21:29.840 --> 21:30.840
要不要改变这个请求头

21:30.840 --> 21:31.840
如果说要改变的话

21:31.840 --> 21:32.840
你把设备处就行了

21:33.840 --> 21:34.840
那么这个地方的设备

21:34.840 --> 21:35.840
你要不要就是代理

21:35.840 --> 21:36.840
websockets

21:36.840 --> 21:37.840
websockets

21:37.840 --> 21:38.840
好像没有讲

21:38.840 --> 21:39.840
我们后边也讲吧

21:39.840 --> 21:40.840
事情好多

21:40.840 --> 21:41.840
就是这些配置

21:41.840 --> 21:43.840
还有很多配置可以写的

21:43.840 --> 21:45.840
包括你还可以加一些函数

21:45.840 --> 21:47.840
就是加一些配置一些函数进去

21:47.840 --> 21:49.840
比方说onarrow这个函数

21:49.840 --> 21:51.840
当发生错误的时候

21:51.840 --> 21:53.840
那么你要怎么办

21:53.840 --> 21:55.840
你要做什么事情

21:55.840 --> 21:56.840
当

21:56.840 --> 21:58.840
当正在代理这个

21:58.840 --> 22:00.840
代理这个就是响应的时候

22:00.840 --> 22:01.840
是什么意思呢

22:01.840 --> 22:02.840
就是代理服务器

22:02.840 --> 22:03.840
拿到响应了

22:03.840 --> 22:04.840
我这边正要把个响应发过去

22:04.840 --> 22:05.840
当这个时候

22:05.840 --> 22:06.840
你要做什么事

22:06.840 --> 22:07.840
当代理请求的时候

22:07.840 --> 22:08.840
你要做什么事

22:08.840 --> 22:09.840
就是我正要把这个请求

22:09.840 --> 22:10.840
发到一个数据服务器

22:10.840 --> 22:11.840
你要做什么事

22:11.840 --> 22:12.840
他有一些勾字函数

22:12.840 --> 22:13.840
可以让你使用的

22:14.840 --> 22:15.840
就是这么一些意思

22:15.840 --> 22:16.840
特别特别简单

