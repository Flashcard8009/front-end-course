WEBVTT

00:00.820 --> 00:04.980
这些课呢 咱们来讲这个日子记录啊 后边的就是讲一些场景的

00:05.580 --> 00:13.420
咱们核心的知识基本上就讲完了啊 嗯 这些场景呢 我们就提去了一些服务器里面 常见的一些场景

00:13.620 --> 00:19.380
特别是露的接受服务器里面啊 常见的一些场景 呃 我们可以把这场景的融入到我们的课程里边

00:19.780 --> 00:22.420
但是要知道啊 这些场景呢 是无穷无尽的

00:22.700 --> 00:27.060
不是说我讲了几个就好像把这个服务器就讲完了啊 没有的 不存在的啊

00:27.540 --> 00:30.900
你们以后呢 到公司里边 我也不知道你们会遇到什么样的场景

00:31.780 --> 00:36.780
具体情况 具体分析 咱们软件开发 他不是死的 他是非常灵活的

00:37.380 --> 00:43.700
所以需要大家是一种创造性的劳动 知道吧 他不是说我之前老师讲没讲过 没讲过就没发 完全没发错了

00:44.140 --> 00:51.740
你要根据我们所学过的这些原理啊 能够去自行分析一些问题 不过呢 这一开始呢 对于大家初学者来说呢 是比较困难的

00:52.300 --> 00:57.060
这是正常的啊 所以说一开始你们新公司呢 也不需要去分析这么问题 就告诉你怎么做啊 你跟着做就行了

00:57.580 --> 01:03.260
但是呢 几年之后 你慢慢的要成为一个终极程序员 或者说要一个高级开发工程师

01:03.740 --> 01:10.860
那么这时候呢 你必须要能够自行分析问题了 根据具体的情况 根据你们实际遇到的问题 然后呢 去选择解决方案

01:12.500 --> 01:17.500
那么选择的原理就是根据你学过的一些原理性的知识啊 来进行选择

01:18.220 --> 01:23.900
我这里的知识介绍一下一些常见的场景 首先是这个日子记录 咱们通过这些常见的学习呢 也可以

01:24.860 --> 01:27.340
让大家感受一下啊 我们去怎么去分析问题

01:28.140 --> 01:31.820
嗯 现在的日子记录啊 这个地方很简单 就是我们之前学过的这个noker 对吧

01:32.380 --> 01:39.340
noker里边呢 我们之前做了什么日子记录呢 做了这个就是涉口的日子记录 还要加一个default 对吧 就在控制台里边输出的

01:40.060 --> 01:41.940
现在呢 我们还要做一个对api的记录

01:42.900 --> 01:46.660
我们就是一个请求过来了 我要记录一下啊 这个请求哪些地方

01:47.300 --> 01:51.940
我们需要把这个请求是哪些信息记录下来 方便了 如果说这将来出了什么问题 我们方便查看

01:52.340 --> 01:55.460
然后如果说要做这种日子记录的话 我们还是一样的道理 对不对

01:55.860 --> 01:59.860
啊 如果说不讲的话 你们怎么做 还不是一样的道理啊 你这里呢给他给他加一个

02:00.180 --> 02:03.220
加一个penter 耳喷的干嘛的 是不是就是告诉他

02:03.940 --> 02:07.860
出口在哪里 对吧 我们把日子记录到哪去 我们之前用的是dit file对不对

02:08.420 --> 02:11.700
哎 之前讲这个dit file的时候 我好像少写了一个东西啊 看一下文档

02:13.140 --> 02:15.140
log4ts

02:18.100 --> 02:25.460
嗯 少写的东西呢 我看到这好像少写了一个就是把日子清除掉 因为这个这样子记录的话越来越多越来越多对吧

02:25.780 --> 02:28.660
占用了服务器的那个这个硬盘空间

02:29.220 --> 02:35.220
啊 我们说一说 我们要想办法把个日子清除掉啊 他里边实际上是有个配置的 我之前好像讲过还是没讲过 为望了

02:36.180 --> 02:40.180
江湿讲那个appender是里边有一个dit file对吧

02:41.300 --> 02:48.180
这里有一个对对这个东西啊dit to keep 这些东西官方文档了一般就一起写得很清楚了啊 咱们把这些加上啊

02:48.660 --> 02:54.020
就是保留几天的 我们就保留三天了就行了啊 多了我也不保留了 不然那个日子记录越来越多

02:54.500 --> 03:00.580
啊 就这么个意思啊 再加上就行了 然后呢 我现在再加一个appender啊 再加一个appender api

03:01.540 --> 03:04.020
啊 这里实色课嘛 然后把别的变成api

03:04.740 --> 03:07.940
啊 那么这里看到这两个都差不多对不对 那是不是可以提取一下

03:08.580 --> 03:13.540
对不对 像这些东西啊 你们都可以去自寻完成 比方说你完全可以写个函数啊啊 get什么

03:14.420 --> 03:16.180
common

03:16.180 --> 03:18.180
呃appender

03:18.180 --> 03:21.780
你给我传一个无非就是这个地方不一样嘛 无非就是这个就是

03:22.740 --> 03:27.540
目录不一样对不对 所以说我们给给我传一个目录啊 pass segment

03:28.500 --> 03:33.380
传一个目录的片段 然后呢 我就把这个整个配置给你发挥啊 这东西很简单的

03:34.260 --> 03:37.220
灵活处理啊 我们的开发是非常非常灵活的

03:38.260 --> 03:41.540
呃 就把这个地方变一下对吧 变成什么 pass segment

03:42.260 --> 03:48.340
那么这样你来到有这个方法过后呢 我们在这里就可以这样子写啊 get get common

03:48.340 --> 03:49.140
appender

03:49.860 --> 03:55.300
然后写上第一个啊 pass segment 什么东西呢 这个是呃sirco

03:56.020 --> 03:59.540
啊 这边的 api呢 get common appender

04:00.100 --> 04:04.820
这里是 api 对吧 就写上啊 那么是不是加了一个 api 配置对不对

04:04.820 --> 04:08.500
然后呢 我们在 catch queries 里面啊 就是用分类里边给他加一个分类

04:09.380 --> 04:14.980
啊 加个分类 然后一样吗 不知 这是 api

04:15.860 --> 04:21.620
啊 没了啊 接下来呢 我们把这个地方稍微改东西一下啊 像这个地方呢 我们就改成这个样子

04:22.020 --> 04:25.620
啊 这个地方改一下 改成这个样子

04:26.260 --> 04:30.980
啊 这个就删除掉了 然后再导出一个 export api log

04:32.500 --> 04:35.780
log4.getloger api

04:36.340 --> 04:40.340
好 是不是就得到一个啊 api 的日子记录了 那么后边怎么办呢

04:40.900 --> 04:44.420
后边我不说应该都想到怎么办了 怎么办呢 我加一个中间键对不对

04:44.900 --> 04:48.260
说可以加一个中间键 加一个中间键呢 我们在这里边

04:49.140 --> 04:53.460
随便找个地方吧 不要一开始 用应用这个中间键 这个中间键用来干嘛 就是记录日子呗

04:53.780 --> 04:58.900
啊 你可以手动记录 对吧 每一次请求来了 你把请求方法啊 记录加取 不就完了嘛 对不对

04:59.300 --> 05:04.340
啊 比方说嘛来吧 来一个嘛 这都很灵活的啊 你可以用各种方式来做比方说没有 api

05:05.540 --> 05:05.860
log

05:08.560 --> 05:11.680
made way 啊 made way 好 然后导出 先导入啊

05:12.880 --> 05:16.720
require 啊 这里是上一个目录啊 api

05:17.600 --> 05:18.640
上一个目录loger

05:20.900 --> 05:24.180
啊 然后呢 这边导入这个就是 api log

05:26.740 --> 05:30.340
好 然后呢 api log 这里得到啊给

05:31.220 --> 05:35.220
这里是 我们还要导出一个那个啊 导出一个中间键

05:37.060 --> 05:41.700
req res uh nest 对吧 导出一个中间键

05:42.340 --> 05:46.740
好 然后我们就做这支记录了 api log 然后呢 还有什么样的记录啊 debug

05:46.900 --> 05:52.740
debug 记录的话 没有什么事是啥呢 我可以给他起个字幕串吧啊 请求方法没什么的对不对

05:53.460 --> 05:59.060
没什么的啊 然后呢 请求的路径啊 我就写两个吧 先两个看一下吧 pass

06:00.820 --> 06:06.820
好 就写出来 写出来 走吧 不要忘了 调用那个时候 对吧 往后边移交啊 我只是做个记录 然后往后边移交就完事了

06:07.140 --> 06:13.940
啊 甚至呢 你可以先往后边移交 先往后边移交啊 不要影响后边的执行对吧 我们只是日记录 不要影响后边的执行

06:14.020 --> 06:19.300
我去记录就完事了啊 你至于先把他移交到后边 然后边处理 我最后来做日记录也可以

06:20.020 --> 06:26.340
那比方说 我们在音乐城里边 我们随便找个地方吧 随便找个地方 你爱找到找哪 比方说 我们在那个

06:27.060 --> 06:31.860
呃 在哪呢 在这吧 下面是跨域对吧

06:33.060 --> 06:41.060
在这个 api 请求之前啊 像什么对这个 atmail 就对 public 这个目录下面的对 public 目录下面的 就是静态资源的请求

06:41.060 --> 06:47.540
我也不要了 不管了 我们只需要管那个对 api 的请求就完事了啊 那么我们这里是不是可以用 app use

06:48.260 --> 06:48.900
require

06:50.180 --> 06:50.900
啊require

06:52.180 --> 06:55.780
呃 什么呢 当前目录下面的

06:56.740 --> 07:00.420
哎呀 我这个按到一个新的插件 个插件还不好用说真的

07:01.220 --> 07:05.380
我昨天可能 昨天在这个 youtube 上看看视频的是什么一个广告

07:05.780 --> 07:09.780
他告诉我这个插件还到处大广告 我觉得不是很好用啊

07:10.660 --> 07:13.460
叫什么来着 我昨天按了我看一下

07:13.780 --> 07:18.900
就 type line 我觉得不好用啊 我觉得我给你写在掉了说

07:20.180 --> 07:21.140
需要重新加载

07:22.500 --> 07:29.620
重新加载一下 我说他们本来 vscol 的智能提示还是可以的啊 还是可以的 还给我一提示呢 搞这个更乱了

07:31.140 --> 07:34.260
怎么还有啊 怎么还有不是不是卸载掉了吗

07:35.700 --> 07:36.180
太不难

07:37.460 --> 07:39.620
啊 把关了 关了重新打开了

07:43.250 --> 07:43.890
require

07:44.850 --> 07:50.050
呃 怎么还有啊 这个还去不掉呀 一会下来我要去掉吧 这个他有点烦了这个玩意

07:50.530 --> 07:51.170
好 找到这个

07:51.970 --> 07:53.250
呃 api

07:54.370 --> 07:56.370
api logger made made

07:57.730 --> 07:58.690
啊 把加入进去

07:59.730 --> 08:05.730
好 加入进去了之后呢 我们现在就可以用 也使用这个日记度了啊 我们现在运行起来 npm start

08:07.490 --> 08:12.290
好 现在没没问题了啊 接着我们把日记打开 你看是不是多了个 api 文件夹 是吧

08:12.450 --> 08:18.130
多这么一个日子文件 现在我们在postman里边啊 随便比方说登录嘛 登录 登录 我们就点击一下

08:18.610 --> 08:23.730
登录 登录完成 然后呢 我们在这边看一下 是不是寄多个日子 对吧 post 请求请求了什么

08:24.050 --> 08:30.210
这个接口 对不对 当然你还可以把他的ip地址寄下来 对吧 客户端到底是哪一个ip地址在请求我们服务器

08:30.210 --> 08:36.130
这个记录 我直接好像没说过对吧 得到ip的话是这样得到啊 通过这个req.ip

08:37.090 --> 08:38.610
啊 好像是这个啊

08:39.570 --> 08:44.690
ip地址啊 通过这个req.ip而追时啊 得到啊 咱们再来一次啊 再来一次请求

08:45.490 --> 08:45.890
请求

08:46.930 --> 08:51.970
啊 你看日记里边 哎 不是这个 这个乱提示 好像就是ip

08:53.490 --> 08:55.410
他的提示还不好 还到处打广告

08:56.370 --> 09:01.330
啊 你看这就是ip 因为我是本级嘛 本级ip就是这个样子啊 本级ip就是这个样子

09:01.810 --> 09:06.210
如果说你放到服务器的话 那么真实的客户端里面ip会记录到这 对吧 到底是谁在请求

09:06.690 --> 09:12.450
那这样子 这里边可以记录任何信息啊 你自己比拼接 比方说请求的消息体 请求的一些

09:13.090 --> 09:19.250
比较重要的消息头 对吧 都可以记录下来啊 我这里就不一一掩饰了啊 这是用手动的方式来写这个日记录

09:19.970 --> 09:22.930
另外呢 还可以用自动的方式 我们把这个主持量

09:25.020 --> 09:31.500
就说呢 他这里呢 还给你提供提供了一种方式来写日记录 看一下文档啊 这个文档里面都说了很明确的

09:32.460 --> 09:34.940
咱们在哪呢 在home里边好像是

09:36.540 --> 09:43.980
呃 这里啊 在这啊 他说专门为express呢 写了个中间键啊 你可以直接用他的那个中间键 不需要安装任何其他的东西啊

09:44.300 --> 09:49.420
直接用他的中间键就完事了 他说怎么用呢 前面不拉不拉一大堆啊 然后呢 这里是康菲古文英写过了对吧

09:49.740 --> 09:55.740
然后呢 得到一个日字啊loger啊 然后接下来怎么做呢 logforge 你们有个函数叫connexloger

09:56.540 --> 10:02.780
就是 告诉他我们使用哪一个东西 哪个日字实例来做记录啊 后面呢 做一些配置

10:03.100 --> 10:07.420
这样子的这个函数 还会返回一个中间键 用express去使用这个中间键就完事了

10:07.580 --> 10:11.580
因此呢 我们这里不就是导出个中间键吗 对吧 所以说我们这里怎么导出个中间键

10:12.940 --> 10:18.380
要灵活啊 学程序是非常非常灵活的 这个差点真不好用

10:19.980 --> 10:20.940
logforge

10:21.660 --> 10:25.900
然后呢 我们这里呢 使用那个connexloger

10:27.020 --> 10:30.140
啊 你们觉得好用的啊 你们去安装一下吧 得起来到时候要打广告这个玩意

10:31.260 --> 10:36.140
第一个参数的传loger啊 就是我们要用哪个loger来记录日字 我们用apploger来记录日字

10:36.220 --> 10:42.140
他会返回个中间键 后面呢 就写上一些配置啊 比方说他说什么配置呢 level啊 日字的记录的级别

10:42.780 --> 10:44.300
级别的话你可以写成out

10:45.260 --> 10:48.380
啊 你可以写成out啊 我记得他下面有一个是有一个out的

10:49.340 --> 10:53.740
对 out out的话 他是什么日字记录级别呢 他是这样子

10:54.300 --> 11:02.300
呃 好像是200到那个200的就是请求成功 就响应成功的时候呢 他是一个

11:03.100 --> 11:05.900
呃 info 好像是啊 然后呢 出现

11:06.860 --> 11:12.140
错误的时候呢 好像是一个war 好像是个error还是war还是警告 下面有那个

11:12.940 --> 11:14.300
有描述 我看一下

11:15.260 --> 11:19.180
啊 总之他就是out过后你自己有兴趣看我俩人找了啊 呃 就是

11:20.140 --> 11:27.020
呃 有兴趣让我去看一下 就是他不同的情况呢 他根据你响应的消息码不同的情况呢 他记录不同的日字级别啊

11:27.020 --> 11:29.740
有这么的out 当然你可以直接定定时一个

11:30.540 --> 11:34.700
日字级别 你还可以用这种方式你看他下面说 你还可以用这种方式

11:35.180 --> 11:37.660
叫做out过后来写个status rules

11:38.060 --> 11:38.540
rules

11:39.260 --> 11:45.660
啊 这个rules就是什么意思呢 就是你自己给他定规则 比方说从200到299我们用debug

11:46.460 --> 11:47.340
啊 从那个

11:48.220 --> 11:55.100
呃 消息码呢 如果说是303或者是304我们用info 对吧 你可以自己去定啊 这些呢 都是可以自定义的

11:55.740 --> 11:59.820
啊 这是你这里是他的日字对吧 我们来看一下吧 就这样子的配置完了过后 基本上日字就可以了

12:00.140 --> 12:03.100
啊 我们这里断点 就这么一个断点啊 这里send

12:04.220 --> 12:05.900
啊 现在呢 我们看一下日字

12:06.860 --> 12:08.140
诶 这边包存啊

12:09.660 --> 12:11.420
放进去了啊 看一下日字

12:11.980 --> 12:18.780
你看 这就是他自己记录日字 第一个是什么呢 第一个是ip地址对吧 后边呢 就是用pose请求请求了什么地址呢

12:19.020 --> 12:24.060
请求了apio 前面我还没有加basey 对吧 顺便没有加那个basey

12:24.540 --> 12:29.740
啊 是有这么一个问题对不对啊 那么这里呢 他是把完整的地址给给给他加进去了啊

12:30.300 --> 12:31.740
呃 然后呢 后边是协议

12:32.300 --> 12:35.500
使用了协议 然后呢 后边是服务器响应的消息码

12:35.980 --> 12:39.420
这个部分呢 是服务器响应的消息体 就是content lens

12:40.220 --> 12:40.700
就在这

12:41.660 --> 12:43.740
content lens 看 114个字节

12:44.060 --> 12:46.700
对吧 啊 后边呢 这个部分呢 是refer

12:47.580 --> 12:52.140
啊 refer 我们的消息头是一个消息头里边的属性啊 现在没有refer那么后边会讲

12:52.700 --> 12:56.220
啊poseman啊 就是我们那个user agent对吧 就是用户代理

12:56.380 --> 12:59.500
他到底是谁带请求我们啊 你看 我们发请求的时候说

12:59.900 --> 13:03.580
poseman他今天发了一个user agent 是吧 一个所有用户代理也发过来了

13:03.820 --> 13:09.100
他就把记录下来了 当然了 这一部分呢 你可完全可以自定义的啊 我们看一下文档 他说怎么来自定义呢

13:10.780 --> 13:12.380
他有一个format

13:13.740 --> 13:14.940
哎跑了去了

13:16.140 --> 13:16.940
啊format

13:18.380 --> 13:24.060
他有一个 就是在这里进行 他会自己啊也可以自定义啊 自定义他的就是消息格式用format

13:24.380 --> 13:27.740
format有很多种写法啊 一个呢 是给他一个函数

13:27.980 --> 13:32.460
这是wik对象wik对象啊 就是请求响应对象 这个是呢

13:33.020 --> 13:38.060
一个format函数啊 一个format函数 让你调那个函数呢 得到一个返回了一个制服串

13:38.540 --> 13:43.260
返回一个制服串 调那个函数又返回一个制服串 当然你还可以在制服串里面进行拼接拼接这些东西

13:43.500 --> 13:47.740
对吧 你按照看到的文档来做就行了 也可以给他配置为一个制服串

13:48.380 --> 13:48.860
format

13:50.060 --> 13:50.860
我看一下啊

13:51.900 --> 13:52.700
他的文档

13:54.300 --> 14:00.380
现在没那么详细啊 就是你自己写个写个format 对吧 这是站位服 表示这是请求方法 就是请求了url地址

14:00.860 --> 14:03.660
对吧 你可以自己写 那么这个站位服有哪些写法呢

14:04.860 --> 14:12.860
啊 摸着你看这里 摸着转发就这样子 请求了地址啊 这个请求的id请求一定我一般都用不到啊 这是请求的方法

14:13.260 --> 14:20.220
然后呢 这请求的url地址 这是atp写实的啊 后边是atp version 表示使用了atp协议协议的版本号

14:20.540 --> 14:22.060
这个是请求响应的

14:23.020 --> 14:26.540
啊 就是状态码 这个是请这个是响应的消息

14:27.260 --> 14:27.660
体的

14:28.220 --> 14:28.620
长度

14:29.180 --> 14:31.820
这个是referrer 啊 我们后边会讲 这个是url agent

14:32.540 --> 14:32.860
是吧

14:33.580 --> 14:35.740
啊 就用这种格式 你可以自己自行定义的

14:35.980 --> 14:36.620
也那意思吧

14:36.940 --> 14:41.660
啊 那么就完事了啊 还这里边还有对 还有一个东西 叫做eglore啊 我给大家提示一下吧

14:41.980 --> 14:44.220
其实像里面自己有兴趣的话 自己去弄

14:44.620 --> 14:48.460
eglore 就是有些请求呢 我是不需要我是不是不需要记录的

14:52.590 --> 14:53.390
eglore

14:53.950 --> 14:54.510
收一下吧

14:55.390 --> 14:55.950
eglore

15:00.110 --> 15:00.910
eglore

15:04.820 --> 15:06.660
oh low log啊 叫low log

15:09.620 --> 15:12.740
在这就再继续配置就行了啊 就在这边配置个low log

15:13.060 --> 15:16.580
比方说你请求什么gif图片 对吧 或者是这是个

15:17.540 --> 15:19.380
写到支付串里面的身材表达是啊

15:19.780 --> 15:23.380
啊 然后呢 或者是这两个写杠表 两个写杠表是一个写杠吧

15:23.620 --> 15:27.540
一个写杠点表示转移 转移 把点转移啊 点GPG对吧

15:27.780 --> 15:31.380
以这个结 以这个或这个结为的 那么这种请求呢 我就

15:31.620 --> 15:33.460
不记录了啊 不做日记录了

15:33.620 --> 15:35.860
那么你可以自行自行来处理 就完事了啊

15:36.340 --> 15:37.780
这是关于这个日记记录

15:38.420 --> 15:38.820
啊

15:39.220 --> 15:42.020
好了 就没啥了啊 给他说一下日记记录怎么做就行了

15:42.260 --> 15:42.980
啊 就这样做

15:43.540 --> 15:45.140
啊 要写什么配置 你自己去配

15:45.860 --> 15:48.340
好了 这是这一颗啊 关于日记记录的东西

