WEBVTT

00:00.620 --> 00:06.620
好 接着来 这是5-2

00:09.620 --> 00:11.620
好 然后上一课呢 我们讲了那个

00:11.620 --> 00:14.620
Sockets的 微博Sockets的原理

00:14.620 --> 00:16.620
但是呢 如果说你自己手续代码的话

00:16.620 --> 00:18.620
有点麻烦 第一个麻烦的就是服务器

00:18.620 --> 00:20.620
要解析消息格式 因为客户端

00:20.620 --> 00:23.620
他本身提供了接口 对吧 微博Sockets

00:23.620 --> 00:24.620
但是呢 服务器要去解析

00:24.620 --> 00:27.620
这个消息格式还是挺麻烦的 这是一个

00:27.620 --> 00:31.620
另外一个的就是 你就算解析完了

00:31.620 --> 00:35.620
服务器呢 也可以组装消息 发送到客户端了

00:35.620 --> 00:38.620
但是双方通信的时候呢 可能有很多事情要做

00:38.620 --> 00:41.620
比方说 比方说吧

00:41.620 --> 00:44.620
你做一个聊天室 客户端要干嘛

00:44.620 --> 00:46.620
要询问服务器 要给服务器发消息

00:46.620 --> 00:49.620
现在有几个人 聊天室有几个人

00:49.620 --> 00:52.620
现在呢 有多少个用户 每个用户名市上

00:52.620 --> 00:55.620
对吧 是不是有不同的消息要发送到服务器

00:55.620 --> 00:57.620
服务器是不是要去识别 对吧 针对不同的消息

00:57.620 --> 01:00.620
要给他回应不同的东西

01:00.620 --> 01:02.620
另外一个 就是服务器呢

01:02.620 --> 01:05.620
他也可能会主动的推送消息给客户端

01:05.620 --> 01:08.620
比方说 有新带了一个人 聊天室里面有新带了一个人

01:08.620 --> 01:13.620
然后呢 那么你要把人推送给所有的客户端 对不对

01:13.620 --> 01:16.620
有的时候呢 我们有人离开了

01:16.620 --> 01:19.620
是不是要把离开的消息推送给客户端

01:19.620 --> 01:23.620
有一个新消息来了 是不是要把新消息推送给客户端

01:23.620 --> 01:26.620
那么像这些场景啊 也就是说服务器跟客户端之间呢

01:26.620 --> 01:29.620
他们有不同的消息要传输

01:29.620 --> 01:31.620
不同的消息呢 要进行不同的处理

01:31.620 --> 01:34.620
但是以前的 就是如果说我们自己手写

01:34.620 --> 01:37.620
为了收取出来的话 那你是不是自己要去解析消息

01:37.620 --> 01:40.620
不同的消息到底是什么意思 什么含义

01:40.620 --> 01:43.620
因为我们的ADTP啊 以前有服务器呢

01:43.620 --> 01:45.620
它是根据路径的不同 对吧

01:45.620 --> 01:50.620
根据路径的不同来确定不同的处理方式

01:51.620 --> 01:53.620
但是呢 现在的收取者过后呢

01:53.620 --> 01:55.620
他一旦建立了连接 他就不会改路径了

01:55.620 --> 01:57.620
路径基本不变了 他就是在消息

01:57.620 --> 02:00.620
就是传输的消息里边在告诉服务器我要干嘛

02:00.620 --> 02:02.620
那么这个时候你是不是要约束消息格式

02:02.620 --> 02:04.620
比方说吧

02:04.620 --> 02:06.620
先建一个啊

02:06.620 --> 02:08.620
就举个例子 我把之前那个删了

02:08.620 --> 02:14.450
比方说 我们要传 比如说客户端跟服务器

02:14.450 --> 02:18.450
客户端 询问服务器的时候

02:18.450 --> 02:20.450
那么他有很多询问方式吧

02:20.450 --> 02:22.450
那第一个 比方说我要问服务器多少人数

02:22.450 --> 02:24.450
目前多少人 那我发出消息

02:24.450 --> 02:26.450
那我们可能要个特殊的消息

02:26.450 --> 02:28.450
发出这么一个消息

02:28.450 --> 02:36.450
how many users 比方说发出这个消息到服务器

02:36.450 --> 02:38.450
那么服务器给我一个回应

02:38.450 --> 02:40.450
然后呢 也有可能会问服务器

02:40.450 --> 02:46.450
目前呢 有哪些有哪些用户

02:46.450 --> 02:51.450
give me all users

02:51.450 --> 02:53.450
那么服务器收到这个消息是不是要给他所有用户

02:53.450 --> 02:55.450
那么这些消息一定要去写息

02:55.450 --> 02:56.450
你可以想 脑袋里面想象

02:56.450 --> 02:58.450
对吧 我们最简单的方式就用

02:58.450 --> 03:00.450
由EVL判断 看他给我发的什么消息

03:00.450 --> 03:01.450
就这么个意思

03:01.450 --> 03:03.450
所以说像这些问题呢

03:03.450 --> 03:05.450
如果说熟悉的话都不好解决

03:05.450 --> 03:07.450
都导致我们代码量巨人

03:07.450 --> 03:09.450
因此呢 我们一般会使用第三方户

03:09.450 --> 03:11.450
那么这里可能给他建设一个第三方户

03:11.450 --> 03:12.450
叫Socket IO

03:12.450 --> 03:14.450
这个户还挺不错的

03:14.450 --> 03:16.450
如果说你以后要用Socket的话

03:16.450 --> 03:17.450
就可以使用这样的户

03:17.450 --> 03:19.450
那么这样的户他给你封装了

03:19.450 --> 03:20.450
基本上你就看不到

03:20.450 --> 03:22.450
WebSocket的就是原始代码了

03:22.450 --> 03:24.450
他给你封装的是比较横的

03:24.450 --> 03:25.450
而且他是基于loader

03:25.450 --> 03:28.450
在loader.js端是基于EventEmet

03:28.450 --> 03:30.450
基于EventEmet

03:30.450 --> 03:32.450
他那边给你封装的就是

03:32.450 --> 03:34.450
他可以根据不同的情况

03:34.450 --> 03:36.450
然后来处理不同的东西

03:36.450 --> 03:38.450
他可以做了一些封装

03:38.450 --> 03:39.450
他本质呢

03:39.450 --> 03:40.450
本质是不是WebSocket

03:40.450 --> 03:41.450
本质是

03:41.450 --> 03:43.450
但是他已经脱离到WebSocket了

03:43.450 --> 03:45.450
他给你封装了很多很多

03:45.450 --> 03:47.450
那么这个户怎么用呢

03:47.450 --> 03:49.450
他可以在客户端使用

03:49.450 --> 03:50.450
也可以在浏览器

03:50.450 --> 03:52.450
也可以在浏览器端使用

03:52.450 --> 03:54.450
也可以在服务器端使用

03:54.450 --> 03:55.450
甚至可以在移动端使用

03:55.450 --> 03:57.450
它是个通用的户

03:57.450 --> 03:59.450
咱们来看一下怎么用

03:59.450 --> 04:00.450
那么我们做Socket的连接

04:00.450 --> 04:01.450
肯定要双方

04:01.450 --> 04:02.450
一个是服务器

04:02.450 --> 04:03.450
一个是客户端

04:03.450 --> 04:06.450
我们首先看服务器怎么来使用

04:06.450 --> 04:07.450
服务器怎么使用呢

04:07.450 --> 04:09.450
我们可以看到的那儿

04:09.450 --> 04:11.450
这里有一个document

04:11.450 --> 04:13.450
它的文档

04:13.450 --> 04:15.450
它的文档里边

04:15.450 --> 04:16.450
我们看一下

04:16.450 --> 04:17.450
它说如果说跟loader介绍

04:17.450 --> 04:19.450
loader介绍服务器该怎么去使用呢

04:19.450 --> 04:20.450
它告诉你

04:20.450 --> 04:21.450
你要使用ATP模块

04:21.450 --> 04:23.450
创建一个服务器

04:23.450 --> 04:25.450
创建一个普通的ATP服务器

04:25.450 --> 04:26.450
创建的服务器过后

04:26.450 --> 04:28.450
你就使用这个裤

04:28.450 --> 04:30.450
然后去包装一下这个服务器

04:30.450 --> 04:32.450
得到一个Socket对象

04:32.450 --> 04:33.450
IO对象

04:33.450 --> 04:34.450
那么你去监听

04:34.450 --> 04:35.450
该怎么去监听怎么去监听

04:35.450 --> 04:36.450
然后呢

04:36.450 --> 04:37.450
后边呢

04:37.450 --> 04:38.450
我们就可以用IO对象

04:38.450 --> 04:39.450
去监听一些事件

04:39.450 --> 04:40.450
监听一些事件

04:40.450 --> 04:41.450
我们打开看一下吧

04:41.450 --> 04:42.450
也可以呢

04:42.450 --> 04:43.450
它跟那个express

04:43.450 --> 04:44.450
也可以连接

04:44.450 --> 04:45.450
连接用

04:45.450 --> 04:47.450
因为它不影响你的ATP协议的

04:47.450 --> 04:48.450
以做我们的服务器

04:48.450 --> 04:50.450
它可以即使一个ATP服务器

04:50.450 --> 04:52.450
也可以使一个WebSocket的服务器

04:52.450 --> 04:53.450
都可以

04:53.450 --> 04:54.450
而且是使用同一个端口

04:54.450 --> 04:55.450
没意思吧

04:55.450 --> 04:56.450
它就这么个意思

04:56.450 --> 04:57.450
那么我们来看一下

04:57.450 --> 04:58.450
当然也可以把它分开

04:58.450 --> 04:59.450
也无所谓

04:59.450 --> 05:00.450
那么我们比方说

05:00.450 --> 05:01.450
我们可能

05:01.450 --> 05:02.450
如果说用WebSocket的话

05:02.450 --> 05:04.450
我们可能会跟express联用

05:04.450 --> 05:06.450
因此我们这里给它演示一下

05:06.450 --> 05:07.450
MPMI

05:07.450 --> 05:08.450
这里呢

05:08.450 --> 05:10.450
我们的安装express

05:10.450 --> 05:12.450
然后再安装这个socket

05:12.450 --> 05:13.450
IO

05:13.450 --> 05:14.450
都安装一下

05:14.450 --> 05:15.450
让它安装吧

05:15.450 --> 05:16.450
然后呢

05:16.450 --> 05:17.450
我们的服务器怎么写呢

05:17.450 --> 05:18.450
服务器的写法

05:18.450 --> 05:21.450
我们把这个关键带吧

05:21.450 --> 05:22.450
扔过来吧

05:22.450 --> 05:23.450
扔过来吧

05:23.450 --> 05:24.450
再看

05:24.450 --> 05:25.450
好

05:25.450 --> 05:26.450
我们来看一下吧

05:26.450 --> 05:28.450
这是创建一个express服务器对吧

05:28.450 --> 05:29.450
我们还是不用这种方式

05:29.450 --> 05:30.450
在创建了

05:30.450 --> 05:31.450
我们还是用这种方式

05:31.450 --> 05:32.450
express倒入

05:32.450 --> 05:33.450
express

05:33.450 --> 05:34.450
express

05:34.450 --> 05:35.450
好

05:35.450 --> 05:36.450
然后呢

05:36.450 --> 05:40.340
倒入这个socketio

05:40.340 --> 05:43.340
socketio

05:43.340 --> 05:44.340
就快了

05:44.340 --> 05:45.340
socketio

05:45.340 --> 05:46.340
倒进来

05:46.340 --> 05:47.340
然后呢

05:47.340 --> 05:50.340
再倒入这个atp

05:50.340 --> 05:51.340
就快了

05:51.340 --> 05:52.340
好

05:52.340 --> 05:53.340
它这里怎么用呢

05:53.340 --> 05:54.340
因为我们知道express

05:54.340 --> 05:55.340
跟atp这个模块

05:55.340 --> 05:56.340
是可以连着用的

05:56.340 --> 05:57.340
对吧

05:57.340 --> 05:58.340
怎么来连着用

05:58.340 --> 05:59.340
怎么来连着用的

05:59.340 --> 06:00.340
我们首先要创建一个express

06:00.340 --> 06:01.340
实力

06:01.340 --> 06:02.340
对吧

06:02.340 --> 06:03.340
好

06:03.340 --> 06:04.340
我们这里呢

06:04.340 --> 06:06.340
这是express的带吧

06:06.340 --> 06:07.340
创建一个express实力

06:07.340 --> 06:08.340
然后呢

06:08.340 --> 06:12.340
我们使用atp

06:12.340 --> 06:14.340
crease server

06:14.340 --> 06:15.340
也可以用server

06:15.340 --> 06:16.340
都差不多

06:16.340 --> 06:17.340
那么我们这里呢

06:17.340 --> 06:18.340
把app传进去

06:18.340 --> 06:19.340
对吧

06:19.340 --> 06:22.840
它说返回一个server对象

06:22.840 --> 06:23.840
返回server对象

06:23.840 --> 06:24.840
然后呢

06:24.840 --> 06:25.840
后面我们是不是有监听端口

06:25.840 --> 06:26.840
对吧

06:26.840 --> 06:28.840
监听端口

06:28.840 --> 06:29.840
好

06:29.840 --> 06:30.840
那怎么的监听呢

06:30.840 --> 06:31.840
server

06:31.840 --> 06:32.840
nation

06:32.840 --> 06:34.840
比方说我们还是5008

06:34.840 --> 06:36.840
这里我们得到

06:36.840 --> 06:37.840
输出

06:37.840 --> 06:39.840
server

06:39.840 --> 06:41.840
nation

06:41.840 --> 06:42.840
你

06:42.840 --> 06:44.840
nation

06:44.840 --> 06:46.840
5008

06:46.840 --> 06:47.840
好

06:47.840 --> 06:48.840
我们就监听一下

06:48.840 --> 06:49.840
都是一个express服务器

06:49.840 --> 06:50.840
对不对

06:50.840 --> 06:51.840
比方说我们要搭建

06:51.840 --> 06:52.840
一个静态资源服务器

06:52.840 --> 06:53.840
怎么搭建呢

06:53.840 --> 06:54.840
好

06:54.840 --> 06:55.840
我们这里呢

06:55.840 --> 06:56.840
不是可以使用

06:56.840 --> 06:57.840
跟之前是一样的

06:57.840 --> 06:58.840
对不对

06:58.840 --> 06:59.840
app use

06:59.840 --> 07:01.840
express static

07:01.840 --> 07:02.840
后面我们写上

07:02.840 --> 07:03.840
跟路径

07:03.840 --> 07:05.840
导致一个pass

07:05.840 --> 07:06.840
快

07:06.840 --> 07:07.840
pass

07:07.840 --> 07:08.840
我们可以使用

07:08.840 --> 07:10.840
pass result

07:10.840 --> 07:11.840
当前目录

07:11.840 --> 07:12.840
然后呢

07:12.840 --> 07:13.840
public目录

07:13.840 --> 07:14.840
把public里边当成静态资源

07:14.840 --> 07:16.840
这是我们以前写的express代码

07:16.840 --> 07:17.840
那么现在呢

07:17.840 --> 07:18.840
我们还要在我们的服务器

07:18.840 --> 07:20.840
这个5008

07:20.840 --> 07:21.840
端口基础上

07:21.840 --> 07:22.840
还要去监听

07:22.840 --> 07:24.840
websocket的请求

07:24.840 --> 07:25.840
那么我们要提供一个

07:25.840 --> 07:26.840
websocket的服务

07:26.840 --> 07:27.840
怎么弄呢

07:27.840 --> 07:29.840
我们就可以websocket

07:29.840 --> 07:30.840
我们就可以使用

07:31.840 --> 07:32.840
就这个东西

07:32.840 --> 07:33.840
你看它怎么用的

07:33.840 --> 07:34.840
倒进来过后

07:34.840 --> 07:35.840
它是一个函数

07:35.840 --> 07:36.840
通过这个函数

07:36.840 --> 07:37.840
包装一个

07:37.840 --> 07:38.840
包装这个东西

07:38.840 --> 07:39.840
那么我们可以

07:40.840 --> 07:41.840
其实啊

07:41.840 --> 07:42.840
有些东西说

07:42.840 --> 07:44.840
看上去就很奇怪

07:44.840 --> 07:45.840
因为我们上一课呢

07:45.840 --> 07:47.840
是用的那层模块

07:47.840 --> 07:48.840
对不对

07:48.840 --> 07:49.840
所以用的那层模块

07:49.840 --> 07:50.840
那层模块里边

07:50.840 --> 07:51.840
是不是有

07:51.840 --> 07:53.840
今天

07:53.840 --> 07:54.840
科普端发动的东西

07:54.840 --> 07:55.840
也可以主动发动

07:55.840 --> 07:56.840
那个通过

07:56.840 --> 07:58.840
主动发动消息给科普端

07:58.840 --> 07:59.840
我们上一课

07:59.840 --> 08:00.840
可以用的那层模块

08:00.840 --> 08:01.840
那么它用的是什么呢

08:01.840 --> 08:02.840
基于的http模块

08:02.840 --> 08:03.840
为什么呢

08:03.840 --> 08:04.840
为什么可以呢

08:04.840 --> 08:05.840
因为http模块

08:05.840 --> 08:07.840
本身就是基于那层模块的

08:07.840 --> 08:08.840
它里边

08:08.840 --> 08:10.840
它里面那层模块的接口呢

08:10.840 --> 08:11.840
它基本上都有

08:11.840 --> 08:12.840
你看server

08:12.840 --> 08:13.840
server呢

08:13.840 --> 08:14.840
我也可以用

08:14.840 --> 08:15.840
讲不讲

08:15.840 --> 08:16.840
我也忘了啊

08:16.840 --> 08:17.840
这东西也不是很重要

08:17.840 --> 08:18.840
socket

08:18.840 --> 08:19.840
当连接进来过后呢

08:19.840 --> 08:20.840
它可以得到这个socket

08:20.840 --> 08:21.840
所以说

08:21.840 --> 08:22.840
你给它这个server对象

08:22.840 --> 08:23.840
它就已经可以

08:23.840 --> 08:24.840
帮你处理了

08:24.840 --> 08:25.840
你把给它就行了

08:25.840 --> 08:27.840
那么我们就使用这个socket I.O

08:28.840 --> 08:30.840
把这个server对象传进去

08:30.840 --> 08:31.840
传进去

08:31.840 --> 08:32.840
你看

08:32.840 --> 08:34.840
得到一个I.O对象

08:34.840 --> 08:35.840
那么这一块呢

08:35.840 --> 08:36.840
它就会帮你来处理

08:36.840 --> 08:37.840
socket

08:37.840 --> 08:38.840
socket的连接

08:38.840 --> 08:39.840
那么后续呢

08:39.840 --> 08:40.840
我们要使用

08:40.840 --> 08:41.840
在服务端

08:41.840 --> 08:42.840
要去使用

08:42.840 --> 08:44.840
比如说像科普端发消息啊

08:44.840 --> 08:46.840
监听科普端的连接啊

08:46.840 --> 08:47.840
等等的

08:47.840 --> 08:48.840
我们就可以使用这个I.O对象了

08:48.840 --> 08:49.840
你看怎么使用的

08:49.840 --> 08:50.840
使用的方式很简单

08:50.840 --> 08:51.840
I.O里边呢

08:51.840 --> 08:52.840
它又是一个

08:52.840 --> 08:53.840
有事件

08:53.840 --> 08:54.840
就是

08:54.840 --> 08:55.840
这个事件

08:55.840 --> 08:57.840
这个事件是什么意思呢

08:58.840 --> 08:59.840
就是当

08:59.840 --> 09:03.840
科普端有连接

09:03.840 --> 09:05.840
科普端

09:05.840 --> 09:08.840
当有一个科普端

09:08.840 --> 09:09.840
应该说

09:09.840 --> 09:12.840
当有一个新的科普端

09:12.840 --> 09:14.840
连接

09:14.840 --> 09:17.840
到服务器成功之后

09:17.840 --> 09:19.840
触发的时间

09:19.840 --> 09:21.840
就这么个意思

09:21.840 --> 09:22.840
当有个新的科普端

09:22.840 --> 09:23.840
连接到服务器成功之后

09:23.840 --> 09:24.840
触发的时间

09:24.840 --> 09:25.840
但是它还有什么呢

09:25.840 --> 09:26.840
还有这个

09:26.840 --> 09:28.840
close

09:28.840 --> 09:29.840
我看一下事件

09:29.840 --> 09:30.840
它的事件是什么

09:30.840 --> 09:32.840
查一下文档

09:32.840 --> 09:34.840
或者我们这里先不着急

09:34.840 --> 09:35.840
close吧

09:35.840 --> 09:36.840
我们先把它看清楚

09:36.840 --> 09:37.840
当着一个新的科普端

09:37.840 --> 09:38.840
连接到服务器成功之后

09:38.840 --> 09:39.840
就握手

09:39.840 --> 09:40.840
ADP握手成功之后

09:40.840 --> 09:41.840
它会触发的时间

09:41.840 --> 09:42.840
我们这里呢

09:42.840 --> 09:44.840
要写个新的科普端

09:44.840 --> 09:45.840
连接

09:45.840 --> 09:47.840
新来了

09:47.840 --> 09:49.840
给它触发这个世界

09:49.840 --> 09:50.840
然后呢

09:50.840 --> 09:51.840
我们如何

09:51.840 --> 09:53.840
发送消息的科普端

09:53.840 --> 09:55.840
又如何监听科普端的消息呢

09:55.840 --> 09:56.840
科普端是啥

09:56.840 --> 09:58.840
科普端就是这个socket

09:58.840 --> 09:59.840
不过这个socket

09:59.840 --> 10:00.840
它是给你封装过后的

10:00.840 --> 10:02.840
那么你就可以使用它了

10:02.840 --> 10:04.840
那这个东西怎么来使用呢

10:04.840 --> 10:05.840
怎么来使用

10:05.840 --> 10:06.840
你看一下下面的代码

10:06.840 --> 10:08.840
如果说我要发送消息的科普端

10:08.840 --> 10:10.840
用amat

10:10.840 --> 10:12.840
发送一个消息

10:12.840 --> 10:14.840
如果说我要监听科普端的消息

10:14.840 --> 10:15.840
就这么简单

10:15.840 --> 10:16.840
比方说

10:16.840 --> 10:18.840
我这里监听一个消息

10:18.840 --> 10:21.840
或者说我这里用个set timeout吧

10:21.840 --> 10:22.840
set interval

10:22.840 --> 10:27.340
每隔一段时间

10:27.340 --> 10:29.340
每隔一段时间

10:29.340 --> 10:32.340
比方说每隔2秒钟

10:32.340 --> 10:34.340
我发送一个消息

10:34.340 --> 10:37.340
每隔2秒钟

10:37.340 --> 10:41.340
发送一个消息科普端

10:41.340 --> 10:42.340
我怎么写呢

10:42.340 --> 10:43.340
我就可以这样的写

10:43.340 --> 10:44.340
socket

10:44.340 --> 10:46.340
amat

10:46.340 --> 10:48.340
amat是表示触发一个世界

10:48.340 --> 10:51.340
它是基于event amat

10:51.340 --> 10:52.340
我们之前学过了

10:52.340 --> 10:53.340
对不对

10:53.340 --> 10:54.340
那么它触发

10:54.340 --> 10:55.340
为什么要用这种模式呢

10:55.340 --> 10:56.340
为什么不是直接使用

10:56.340 --> 10:57.340
以前的我们上年和学的

10:57.340 --> 10:58.340
sind对吧

10:58.340 --> 10:59.340
发送消息

10:59.340 --> 11:00.340
为什么要或者是write

11:00.340 --> 11:01.340
为什么要用amat呢

11:01.340 --> 11:03.340
它就是要区分不同的消息

11:03.340 --> 11:06.340
这里可以写不同的世界名

11:06.340 --> 11:07.340
世界名里是自定义的

11:07.340 --> 11:09.340
自定义的世界名

11:09.340 --> 11:10.340
比方说我们这里

11:10.340 --> 11:11.340
发送个世界名的

11:11.340 --> 11:12.340
表示意识就是

11:12.340 --> 11:14.340
比方说我给大家写个test

11:14.340 --> 11:16.340
表示一个测试的消息

11:16.340 --> 11:18.340
一个测试的消息

11:18.340 --> 11:19.340
每两秒钟发送一个消息

11:19.340 --> 11:20.340
到科普端

11:20.340 --> 11:22.340
那么后边写上什么

11:22.340 --> 11:23.340
消息内容

11:23.340 --> 11:26.340
内容的话就是

11:26.340 --> 11:28.340
testmessage

11:28.340 --> 11:29.340
from server

11:29.340 --> 11:31.340
我们就把这个字幕出来

11:31.340 --> 11:32.340
内容是随便的

11:32.340 --> 11:33.340
可以是接触格式

11:33.340 --> 11:34.340
可以是字幕出来

11:34.340 --> 11:35.340
可以是个数字随便

11:35.340 --> 11:36.340
它会帮你进行处理

11:36.340 --> 11:37.340
帮你去组装消息格式

11:37.340 --> 11:38.340
因为我们知道

11:38.340 --> 11:39.340
外边所谓的消息格式

11:39.340 --> 11:40.340
那是比较特殊的

11:40.340 --> 11:41.340
对吧

11:41.340 --> 11:42.340
它会帮你去组装

11:42.340 --> 11:44.340
就这个

11:44.340 --> 11:46.340
那么这是发送消息

11:46.340 --> 11:48.340
消息的就是给它消息

11:48.340 --> 11:49.340
就取个名字

11:49.340 --> 11:51.340
这好像好比就是消息的名字

11:51.340 --> 11:53.340
消息的内容

11:53.340 --> 11:54.340
然后

11:54.340 --> 11:57.340
我如何来监听科普端的消息呢

11:57.340 --> 11:59.340
我们就可以使用softice

11:59.340 --> 12:01.340
那么这里你就要监听

12:01.340 --> 12:02.340
不同的科普端消息

12:02.340 --> 12:03.340
因为科普端发送消息

12:03.340 --> 12:05.340
它也是用这种模式

12:05.340 --> 12:06.340
科普端那边发送消息

12:06.340 --> 12:08.340
它也是给消息一个名字

12:08.340 --> 12:10.340
然后消息的内容

12:10.340 --> 12:11.340
那么这边监听的时候

12:11.340 --> 12:12.340
也是要监听某一个名字

12:12.340 --> 12:14.340
因为它可能发送不同的消息过来

12:14.340 --> 12:15.340
就像我们刚才说的

12:15.340 --> 12:16.340
它可能发送这种消息

12:16.340 --> 12:17.340
可能发送这种消息

12:17.340 --> 12:18.340
你不知道它发送什么

12:18.340 --> 12:20.340
所以说你给它

12:20.340 --> 12:22.340
用这个amnit世界名来进行区分

12:22.340 --> 12:23.340
好那么比方说

12:23.340 --> 12:24.340
我们这里取个名字

12:24.340 --> 12:26.340
就比方说message

12:26.340 --> 12:27.340
就随便取个名字

12:27.340 --> 12:29.340
比方说科普端那边发送过来的

12:29.340 --> 12:30.340
消息名字是message

12:30.340 --> 12:32.340
好那么这里我们得到

12:32.340 --> 12:36.360
chunk

12:36.360 --> 12:37.360
对了

12:37.360 --> 12:38.360
chunk

12:38.360 --> 12:39.360
我们这里输出

12:39.360 --> 12:41.360
chunk

12:41.360 --> 12:43.360
有点不棒

12:43.360 --> 12:44.360
好了

12:44.360 --> 12:45.360
那么这边

12:45.360 --> 12:47.360
这里就是监听科普端的message消息

12:47.360 --> 12:51.360
监听科普端的message消息

12:51.360 --> 12:53.360
这个呢是发送

12:53.360 --> 12:55.360
发送一个消息给科普端

12:55.360 --> 12:58.360
消息为test

12:58.360 --> 13:00.360
消息的名字是test

13:00.360 --> 13:01.360
好了我们就写好了

13:01.360 --> 13:06.250
就写好了

13:06.250 --> 13:07.250
那么最后呢

13:07.250 --> 13:08.250
我们还不要忘记

13:08.250 --> 13:09.250
如果说断开了

13:09.250 --> 13:11.250
一旦连接断开了

13:11.250 --> 13:13.250
我们要把setsync的table去掉

13:13.250 --> 13:14.250
所以说我们这里写上一个

13:14.250 --> 13:18.010
谈

13:18.010 --> 13:20.010
因为它每一个来自

13:20.010 --> 13:23.010
它每一个可能有多个科普端

13:23.010 --> 13:24.010
可能有多个科普端

13:25.010 --> 13:27.010
我们这里只有一个科普端

13:29.010 --> 13:31.010
我想一想

13:31.010 --> 13:32.010
如果说一个

13:32.010 --> 13:34.010
算了我这里

13:34.010 --> 13:35.010
不要把事情搞复杂

13:35.010 --> 13:37.010
我们这里主要是测试

13:37.010 --> 13:39.010
我们这里就直接促测一个时间

13:40.010 --> 13:43.010
当它连接断开的时候

13:43.010 --> 13:44.010
连接断开的时候

13:44.010 --> 13:45.010
连接断开的不是iO

13:45.010 --> 13:47.010
不应该在iO里面监听

13:47.010 --> 13:48.010
明白了

13:48.010 --> 13:49.010
在这里监听

13:49.010 --> 13:52.010
sockets

13:52.010 --> 13:53.010
close

13:54.010 --> 13:55.010
在这里监听

13:55.010 --> 13:56.010
我们看一下

13:56.010 --> 13:57.010
一面的实均

13:57.010 --> 13:58.010
它也没跟你说

13:58.010 --> 14:00.010
没跟你说它这里可以写哪些

14:00.010 --> 14:01.010
哪些实均

14:01.010 --> 14:02.010
也没跟你说

14:02.010 --> 14:03.010
没说这样的

14:03.010 --> 14:05.770
拉到

14:05.770 --> 14:06.770
那我这里就用unclose吧

14:06.770 --> 14:07.770
應該是close

14:07.770 --> 14:08.770
我看一下吧

14:08.770 --> 14:09.770
还查一下文道

14:10.770 --> 14:11.770
事件

14:11.770 --> 14:13.770
我看一下serverapi

14:18.460 --> 14:19.460
sockets

14:19.460 --> 14:23.160
找一找

14:23.160 --> 14:27.180
sockets

14:27.180 --> 14:28.180
un

14:28.180 --> 14:29.180
事件

14:29.180 --> 14:31.180
事件的名字

14:31.180 --> 14:32.180
事件名

14:32.180 --> 14:34.180
它这里有哪里写的事件名呢

14:36.180 --> 14:37.180
eventing

14:38.180 --> 14:40.180
哪里写的事件名

14:40.180 --> 14:43.320
叫这个

14:43.320 --> 14:44.320
这是事件名

14:46.320 --> 14:47.320
disconnect

14:47.320 --> 14:48.320
disconnect

14:48.320 --> 14:49.320
是这个

14:49.320 --> 14:50.320
不是close

14:50.320 --> 14:51.320
就是断开连接

14:51.320 --> 14:52.320
断开连接的时候

14:52.320 --> 14:53.320
这个时候

14:53.320 --> 14:54.320
应该是在这里

14:54.320 --> 14:55.320
不是iO里面

14:55.320 --> 14:56.320
因为我们在

14:56.320 --> 14:57.320
是针对这个客户端发送

14:57.320 --> 14:58.320
就是得到一个

14:58.320 --> 14:59.320
就是一个计时器

14:59.320 --> 15:00.320
对吧

15:00.320 --> 15:01.320
客户端断开之后

15:01.320 --> 15:02.320
我们把这个客户端的

15:02.320 --> 15:03.320
计时器取消掉

15:03.320 --> 15:04.320
所以说我们这里在这里

15:04.320 --> 15:05.320
他们

15:05.320 --> 15:07.320
我们这里用clear

15:07.320 --> 15:08.320
interval

15:09.320 --> 15:10.320
取消掉

15:10.320 --> 15:11.320
行了

15:11.320 --> 15:13.320
服务器是不是就写完了

15:13.320 --> 15:14.320
服务器就写完了

15:14.320 --> 15:15.320
就这么简单

15:15.320 --> 15:16.320
然后我们到客户端

15:16.320 --> 15:17.320
我们现在把服务器

15:17.320 --> 15:18.320
启动起来吧

15:21.320 --> 15:22.320
启动起来了

15:22.320 --> 15:23.320
你看是不是没问题

15:23.320 --> 15:24.320
那么现在

15:24.320 --> 15:25.320
这个服务器

15:25.320 --> 15:26.320
既可以监听atp请求

15:26.320 --> 15:28.320
又可以监听sockets请求

15:28.320 --> 15:29.320
我们首先看一下

15:29.320 --> 15:30.320
atp请求是不是这么长的

15:30.320 --> 15:31.320
我们访问这个页面

15:31.320 --> 15:33.320
这个页面只有一个按钮

15:33.320 --> 15:34.320
我们访问一下

15:34.320 --> 15:36.320
localhost508

15:36.320 --> 15:37.320
你看是不是拿到这个按钮

15:37.320 --> 15:38.320
对不对

15:38.320 --> 15:39.320
那么就是express

15:39.320 --> 15:42.320
给我们提供了atp请求

15:42.320 --> 15:44.320
那么现在我们在这个页面里边

15:44.320 --> 15:46.320
要发送一个连接

15:46.320 --> 15:47.320
到服务器

15:47.320 --> 15:48.320
进行sockets的连接

15:48.320 --> 15:49.320
那怎么连接呢

15:49.320 --> 15:50.320
首先我们要引用

15:50.320 --> 15:52.320
src

15:52.320 --> 15:53.320
引用啥呢

15:53.320 --> 15:55.320
引用那个就是客户端的

15:55.320 --> 15:57.320
就是客户端的sockets的iO

15:57.320 --> 15:58.320
当然你如果说你

15:58.320 --> 15:59.320
用webhike的话

15:59.320 --> 16:00.320
那么就可以直接

16:00.320 --> 16:01.320
用require

16:01.320 --> 16:02.320
或者是import导入

16:02.320 --> 16:04.320
就是用npm的方式按钮

16:04.320 --> 16:05.320
如果你用传统的方式的话

16:05.320 --> 16:07.320
你要去下载一个js

16:07.320 --> 16:09.320
就sockets.io的js

16:09.320 --> 16:10.320
那么这里我就直接使用

16:10.320 --> 16:11.320
那个cdn了

16:11.320 --> 16:16.360
直接使用这个bootcdn

16:16.360 --> 16:17.360
它里面有

16:17.360 --> 16:20.360
sockets.io

16:20.360 --> 16:21.360
sockets.io

16:21.360 --> 16:24.360
就这个玩意儿

16:24.360 --> 16:25.360
我们这里直接

16:25.360 --> 16:27.360
复制一下sql

16:27.360 --> 16:29.360
sql元素

16:30.360 --> 16:31.360
复制一下

16:34.360 --> 16:36.360
那么把这个js导入进来

16:36.360 --> 16:37.360
那么这样子

16:37.360 --> 16:38.360
客户端就可以使用

16:38.360 --> 16:39.360
这个sockets了

16:39.360 --> 16:40.360
那具体怎么使用呢

16:40.360 --> 16:41.360
客户端又怎么使用呢

16:41.360 --> 16:42.360
你看它这里面

16:42.360 --> 16:43.360
怎么说的

16:43.360 --> 16:44.360
之前的文档里面

16:50.360 --> 16:51.360
客户端

16:51.360 --> 16:53.360
客户端这里面很简单

16:53.360 --> 16:54.360
就是使用这个iO

16:54.360 --> 16:55.360
它可以提供一个全聚变量iO

16:55.360 --> 16:57.360
当然你先用那个npm的话

16:57.360 --> 16:58.360
有一样的

16:58.360 --> 16:59.360
我倒入一个iO

16:59.360 --> 17:00.360
就是用这种方式

17:00.360 --> 17:02.360
然后什么都讲的那么细

17:02.360 --> 17:03.360
from

17:03.360 --> 17:05.360
然后sockets

17:05.360 --> 17:06.360
一样的

17:06.360 --> 17:08.360
iO connect

17:08.360 --> 17:09.360
那么现在我们就用

17:09.360 --> 17:11.360
iO connect

17:11.360 --> 17:12.360
连接

17:12.360 --> 17:13.360
连接什么呢

17:13.360 --> 17:15.360
那你给它一个服务器地址

17:15.360 --> 17:16.360
如果说你

17:16.360 --> 17:17.360
可不可以不给地址呢

17:17.360 --> 17:18.360
可以

17:18.360 --> 17:19.360
如果说你不给地址的话

17:19.360 --> 17:20.360
那么它就默认

17:20.360 --> 17:21.360
使用当前页面的地址

17:21.360 --> 17:23.360
那时候当前页面的地址

17:23.360 --> 17:24.360
就可以了

17:24.360 --> 17:25.360
对不对

17:25.360 --> 17:26.360
就可以了

17:26.360 --> 17:27.360
那么我们就直接使用

17:27.360 --> 17:30.360
那么作为一个

17:30.360 --> 17:31.360
那么得到了一个什么呢

17:31.360 --> 17:32.360
看一下这边

17:32.360 --> 17:34.360
得到了的是一个sockets的对象

17:34.360 --> 17:35.360
sockets

17:35.360 --> 17:37.360
因为我知道客户端那边是不用监听的

17:37.360 --> 17:38.360
它只有一个sockets的对象

17:38.360 --> 17:39.360
那么通过这个sockets的对象

17:39.360 --> 17:41.360
跟服务器之间进行通信

17:41.360 --> 17:42.360
怎么通信呢

17:42.360 --> 17:43.360
如果说你要发送消息到服务器

17:43.360 --> 17:44.360
怎么发送

17:44.360 --> 17:45.360
我们比方说给按钮做这个事件

17:45.360 --> 17:47.360
query selector

17:48.360 --> 17:49.360
button

17:49.360 --> 17:51.360
unclick

17:51.360 --> 17:53.360
当点击这个按钮的时候

17:53.360 --> 17:54.360
我要发送一个消息到服务器

17:54.360 --> 17:55.360
怎么发送呢

17:55.360 --> 17:56.360
sockets

17:58.360 --> 17:59.360
amat

17:59.360 --> 18:00.360
对吧

18:00.360 --> 18:01.360
是一样的

18:01.360 --> 18:02.360
刚才服务器说好的

18:02.360 --> 18:03.360
双方要说好

18:03.360 --> 18:05.360
服务器要接受的消息名称是什么

18:05.360 --> 18:06.360
message对吧

18:06.360 --> 18:07.360
那么我们就

18:07.360 --> 18:08.360
message

18:08.360 --> 18:09.360
出发一个这个事件

18:09.360 --> 18:10.360
这个事件

18:10.360 --> 18:11.360
就会被服务器监听到

18:11.360 --> 18:13.360
服务器就会监听到这个事件

18:13.360 --> 18:14.360
那么监听到的事件

18:14.360 --> 18:15.360
它就把消息内容输出了

18:15.360 --> 18:17.360
那么这边给它个消息内容

18:17.360 --> 18:18.360
比方说

18:19.360 --> 18:20.360
message

18:20.360 --> 18:22.360
from client

18:22.360 --> 18:25.360
这是客户端那边发送官的消息

18:25.360 --> 18:26.360
对不对

18:27.360 --> 18:28.360
好

18:28.360 --> 18:29.360
那么同样的

18:29.360 --> 18:30.360
这个地方是不是也可以监控

18:30.360 --> 18:31.360
服务器发送官的消息

18:31.360 --> 18:32.360
用啊

18:32.360 --> 18:33.360
事件名字呢

18:33.360 --> 18:34.360
就是服务器这边的消息名

18:34.360 --> 18:35.360
服务器那边是不是

18:35.360 --> 18:36.360
要发送一个消息

18:36.360 --> 18:37.360
test过来

18:37.360 --> 18:38.360
那么监听test

18:38.360 --> 18:39.360
好

18:39.360 --> 18:40.360
那么这边就是消息内容

18:40.360 --> 18:41.360
一样的啊

18:41.360 --> 18:42.360
都是一样的

18:42.360 --> 18:43.360
输出

18:43.360 --> 18:44.360
创改

18:45.360 --> 18:46.360
你看一下

18:46.360 --> 18:47.360
不就写完了吗

18:47.360 --> 18:48.360
就写完了

18:48.360 --> 18:49.360
就这么简单

18:49.360 --> 18:50.360
好

18:50.360 --> 18:51.360
咱们来试一下吧

18:51.360 --> 18:54.060
到这边来

18:55.060 --> 18:56.060
我们把这个

18:56.060 --> 18:57.060
投出来

18:57.060 --> 18:58.060
我们看一下客户端

18:58.060 --> 19:00.060
又看同时看一下服务器

19:01.060 --> 19:02.060
控制台

19:02.060 --> 19:03.060
服务器也打开

19:03.060 --> 19:04.060
好

19:04.060 --> 19:05.060
咱们来看一下啊

19:05.060 --> 19:06.060
现在我们刷新

19:06.060 --> 19:10.350
诶

19:10.350 --> 19:12.350
ioconnect is not a function

19:14.350 --> 19:15.350
我这里哪里写错了

19:17.350 --> 19:18.350
ioconnect

19:24.350 --> 19:25.350
好 再来

19:25.350 --> 19:30.740
好 再来啊

19:30.740 --> 19:31.740
刷新

19:31.740 --> 19:32.740
你看新的客户键

19:32.740 --> 19:33.740
点击进来了

19:33.740 --> 19:34.740
对吧

19:34.740 --> 19:36.740
你看服务器是不是不断的给他推消息过来

19:36.740 --> 19:37.740
就收到消息了

19:37.740 --> 19:38.740
对不对

19:38.740 --> 19:39.740
一个字母串吧

19:39.740 --> 19:41.740
然后这边点击过后

19:41.740 --> 19:42.740
点击

19:42.740 --> 19:44.740
你看服务器是不是收到消息了

19:44.740 --> 19:45.740
点击

19:45.740 --> 19:46.740
看没

19:46.740 --> 19:47.740
是不是收到消息了

19:47.740 --> 19:48.740
就这么简单

19:48.740 --> 19:49.740
双方就建立好了这个连接了

19:49.740 --> 19:51.740
你看服务器可以主动推消息过来

19:51.740 --> 19:52.740
看没

19:52.740 --> 19:54.740
可以主动推消息过来

19:54.740 --> 19:56.740
然后他也可以主动发送消息到服务器

19:56.740 --> 19:57.740
对不对

19:57.740 --> 19:59.740
他们就这样重新的

19:59.740 --> 20:00.740
没了

20:00.740 --> 20:01.740
没啥了

20:01.740 --> 20:02.740
好

20:02.740 --> 20:03.740
有一方断开了

20:03.740 --> 20:05.740
有一方断开了

20:05.740 --> 20:07.740
我刚才写没写服务器断开

20:08.740 --> 20:10.740
我这里输出一下吧

20:10.740 --> 20:11.740
服务器输出一下

20:11.740 --> 20:12.740
断开了

20:13.740 --> 20:14.740
可怜

20:14.740 --> 20:15.740
就是closed

20:16.740 --> 20:17.740
closed

20:17.740 --> 20:18.740
那么这个东西

20:18.740 --> 20:19.740
我们也可以放到客户端

20:19.740 --> 20:20.740
一样的

20:21.740 --> 20:22.740
closed

20:23.740 --> 20:27.370
好 再来

20:27.370 --> 20:29.810
刷新

20:29.810 --> 20:30.810
好

20:31.810 --> 20:32.810
这边发送

20:32.810 --> 20:33.810
发送

20:33.810 --> 20:34.810
然后客户端断开

20:34.810 --> 20:35.810
比方说我把这个关了

20:36.810 --> 20:37.810
你看服务器输closed

20:37.810 --> 20:38.810
对不对

20:38.810 --> 20:39.810
closed

20:39.810 --> 20:40.810
好

20:40.810 --> 20:41.810
那么有没有可能服务器断开呢

20:41.810 --> 20:42.810
也有可能

20:42.810 --> 20:44.810
比方说

20:44.810 --> 20:46.810
有一个新的客户端进来了

20:48.810 --> 20:50.810
然后服务器我又停止

20:50.810 --> 20:51.810
停止

20:51.810 --> 20:53.810
你看这边是不是受到消息断开了

20:54.810 --> 20:55.810
对不对

20:55.810 --> 20:56.810
就这么简单

20:56.810 --> 20:57.810
没了

20:57.810 --> 20:58.810
那么这里为什么还在爆出呢

20:58.810 --> 21:01.810
是因为他还在不停的进行心跳检测

21:01.810 --> 21:02.810
他里面一个功能

21:02.810 --> 21:03.810
就进行心跳检测

21:03.810 --> 21:04.810
看一下服务器还在不在

21:04.810 --> 21:05.810
还在不在

21:05.810 --> 21:06.810
还要进行重连

21:06.810 --> 21:07.810
还要进行重新连接

21:07.810 --> 21:09.810
那么这里有一服务器已经不在了

21:09.810 --> 21:10.810
所以没法进行重新连接了

21:10.810 --> 21:12.810
那如果说把服务器启动起来

21:12.810 --> 21:13.810
是不是又可以了

21:13.810 --> 21:14.810
又连接好了

21:14.810 --> 21:15.810
看没有爆出了

21:15.810 --> 21:16.810
对吧

21:16.810 --> 21:17.810
它是有这么一个功能

21:17.810 --> 21:18.810
它又有一个重新连接的功能

21:19.810 --> 21:20.810
这是那个

21:22.810 --> 21:23.810
他们两个的关系

21:23.810 --> 21:24.810
好了就没啥了

21:24.810 --> 21:26.810
就介绍一下这个Socket I.O

21:26.810 --> 21:27.810
那么下节课呢

21:27.810 --> 21:28.810
我们就利用这个Socket I.O

21:28.810 --> 21:30.810
来做一个聊天室

21:30.810 --> 21:31.810
好吧

21:31.810 --> 21:32.810
好 这一课我们就到这了

21:32.810 --> 21:33.810
拜拜

