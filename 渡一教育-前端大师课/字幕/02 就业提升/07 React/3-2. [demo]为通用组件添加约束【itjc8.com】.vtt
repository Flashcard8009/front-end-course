WEBVTT

00:00.430 --> 00:04.670
好 咱们利用上级课的知识呢 来做这么一个小的demo

00:05.310 --> 00:09.470
呃 这个demo呢 我们就是把之前的那些公共组件啊

00:10.110 --> 00:17.710
呃 之前不是没有写什么 属性默认值没有写对吧 还有什么属性的约束都没有写对不对

00:17.950 --> 00:21.790
ok啊 那么咱们这些课呢 就把它给他加上啊 全部组件给他加上

00:22.590 --> 00:26.270
好 咱们一个来啊 我这里看一下我的分支啊

00:27.710 --> 00:29.390
我这个分支应该是master

00:30.510 --> 00:35.230
看一下吧 呃 咱们要不然就在master分支上面做

00:35.870 --> 00:44.270
小吗 或者说我们再新开一个分支吧啊 新开个分支 呃 这样子吧 新开一个啊 get check out

00:44.830 --> 00:48.590
干B 这是3.2了是吧 3-2

00:49.230 --> 00:50.990
点demo 嗯

00:52.830 --> 00:56.190
为为通用组件

00:56.910 --> 01:01.710
通用组件加上约束啊 加上约束

01:02.590 --> 01:08.430
好 行了 咱们在这个分支里边说一个来吧 呃 第一个啊就checkbox group

01:08.990 --> 01:11.790
这段我们写过了 是吧 我们看了之前我们的说明文档

01:12.990 --> 01:16.510
他这里边呢 可能要传四个属性进来 这些属性呢 他

01:17.550 --> 01:21.710
有默认值啊 有默认值 然后呢 呃 也有

01:22.510 --> 01:29.630
有些有默认值啊 有些没有 有些属性呢 是避传的 呃 还有呢 还有对他要进行一些内容的约束

01:30.110 --> 01:37.230
ok 咱们在写这个东西的时候啊 大家注意一下 就是说有的时候呢 我们会发现有一些通用的 比方说这个data是啊

01:37.710 --> 01:44.270
data是这个属性 它的约束呢 可能是通用的啊 可能是通用的 所以说呢 我们最好呢

01:44.830 --> 01:49.950
嗯 把它抽离出去 抽离出去形成一个公共的模块 这样子呢 我们可以反复使用了

01:50.110 --> 01:57.950
不然的话 我在这个文件里边 如果把它写死了 写死了之后呢 我后边一些要同用同样的方式来进行约束的时候呢 我就得

01:58.190 --> 02:03.390
我就得写重复带嘛 呃 到时候呢 维护显的也不是很好维护 那这里怎么呢 把它

02:03.950 --> 02:09.390
提取出来了 其实非常简单啊 我们在这里面建一个文件夹 就是ut哦 一些工具啊 ut

02:10.110 --> 02:16.270
ut 这里边是存放一些工具啊 这工具里边呢 我们提供这么一个文件叫做

02:17.230 --> 02:17.710
呃

02:19.150 --> 02:20.030
common types

02:22.110 --> 02:28.430
提供这么一个文件common types 这里边呢 就提供啊 我还是手这么小些嘛 手这么大起的话 一般是那个组件

02:29.070 --> 02:35.150
呃 这里边又提供一些常见的啊 咱们会可能会经常见到的这么一些

02:36.110 --> 02:39.870
类型啊 就是属性类型啊 咱们还在这写吧

02:41.230 --> 02:45.150
首先呢 我们这里直接导出吧啊 你没什么说好说的啊 直接导出 导出

02:46.030 --> 02:48.110
导出呢 就是一个对象啊

02:49.150 --> 02:51.550
嗯 行吗啊 导出一个对象

02:52.670 --> 02:56.030
然后这里导入那个probs types from

02:56.990 --> 02:58.990
probs types啊 导入进来

02:59.470 --> 03:06.350
好 然后这里边导出了 我们把一些常见的那些属性的约束呢 该导出去啊 导出去啊 比方说啊

03:06.430 --> 03:06.910
challenge

03:09.390 --> 03:14.830
challenge 就是指源数 对吧 指源数呢 你肯定不能给我乱传啊 肯定不够乱传 你肯定

03:15.150 --> 03:22.990
十八九呢 得给我传递一个可以渲染的东西啊 我这里边呢 就所有的东西都不再使用什么那个required啊

03:23.150 --> 03:29.950
不再使用required 如果你要用required的话 如果你要避甜的话 你单独去处理 我这里只是只是写一些通用的

03:30.510 --> 03:37.630
啊 比方说challenge这里一块啊 这一块的话 我们就用probs types里边的什么load对吧 我之前学过了

03:38.590 --> 03:44.510
啊 我现在呢 我把这个属性验证了 也专把这个文件啊 也提取到了这个master这个分支里边去了

03:44.590 --> 03:47.870
所以说你可以在master分支里面就可以随时可以看到

03:48.990 --> 03:55.790
好 这是第一个啊 第一个就是指源数呢 它必须是一个啊 就是可以渲染的东西 好 然后呢 我们再看一个就是

03:56.590 --> 03:56.910
啊

03:58.510 --> 04:04.670
group data啊 我们再打个注释啊 打个注释 这个表示什么类型啊 这个表示啊

04:05.550 --> 04:09.150
多选框啊 单选框 多选框组

04:09.950 --> 04:10.990
单选框组

04:11.950 --> 04:13.470
以及呢 下拉列表

04:14.510 --> 04:23.550
下拉列表的数据员啊 数据来源 那么这个东西呢 它应该是一个数组 对吧 应该是一个数组 所以说probs

04:24.110 --> 04:27.150
probs types 应该是一个array啊array而

04:27.790 --> 04:34.590
它是应该是一个数组 这个数组里边每一项呢 是一个对象啊 每一项是个对象 那这里继续写啊probs types

04:35.150 --> 04:36.590
啊 然后底上啊

04:37.150 --> 04:37.550
shape

04:38.670 --> 04:42.590
数组的每一项是一个对象 这个对象又是什么东西呢 我们继续展开写啊

04:44.670 --> 04:46.190
继续展开写 嗯

04:47.710 --> 04:53.710
这里边有什么 有value属性啊 value属性的是一个制服串probs types

04:56.820 --> 05:04.740
啊 是个制服串 这个制服串呢是必填的 为什么我们刚才说不设置那个必填 这又又要写必填的 是这样子啊 我说

05:05.380 --> 05:11.140
这个属性 这个东西本身呢 它不是必填的啊 本身不是必填的 只不过呢

05:11.540 --> 05:19.620
它里边的啊 这些对象里边的属性呢 我们可以给它设置必填 因为这个我们是已知的啊 这个我们是已知的 你要给我这些东西 肯定要把 value属传给我呀

05:19.940 --> 05:23.860
还有什么 还有这个text的属性 你要传给我啊probs types

05:25.060 --> 05:28.500
啊 这里边我们写上这个shape is required

05:29.060 --> 05:33.860
这两个东西都要传给我啊 都要传给我 你这个是个数组 数组里边每一个呢 是个对象

05:34.420 --> 05:40.260
对象里边的有两个属性 每个属性都是必填的 你这个数组本身呢 我不要求的填写啊 不要求的填写

05:41.140 --> 05:43.940
好 我们先暂时写这么两个吧 我们一会想到再说啊

05:44.580 --> 05:52.740
嗯 行啊 现在呢 我们有了这么一个文件了 然后我们再回到这里来进行书写 首先呢 我们书写上什么 书写上那个默认值啊 default

05:53.540 --> 05:53.940
probs

05:55.460 --> 05:58.660
啊 当然是静态的啊 静态的 属性的默认值

05:59.460 --> 06:02.420
好 默认值的话 有哪些默认值呢 咱们看一下

06:03.140 --> 06:06.100
有delta10 啊delta10有默认值

06:07.380 --> 06:07.940
啊delta10

06:09.460 --> 06:11.300
然后是个空数组啊 是个空数组

06:12.020 --> 06:15.300
然后还有什么呢 还有就是嗯

06:16.020 --> 06:18.100
name 那么属性没有默认值

06:19.140 --> 06:22.580
啊 那么属性没有默认值 那算了 那么属性不管它了啊

06:23.380 --> 06:27.940
choosedelta10 当前选中的value啊 如果你没有传递的话 那也是默认值空

06:28.500 --> 06:29.060
空数组

06:30.020 --> 06:32.420
好 然后还有什么呢 还有unchanged

06:32.420 --> 06:35.940
unchanged是改变事件 那这个东西呢 你要传给我啊 你要传给我

06:35.940 --> 06:38.180
所以说我这里呢 也不写了啊 也不写了

06:38.900 --> 06:41.860
像咱们把默认属性写好了啊 这是默认属性

06:43.220 --> 06:44.260
默认属性值

06:44.980 --> 06:48.180
然后呢 接下来我们再写 再写怎么呢 再写那个属性的约束

06:48.900 --> 06:49.780
啊 属性约束

06:51.780 --> 06:55.460
看一下啊 没问题啊 属性约束 static probs

06:56.180 --> 06:57.780
types 啊 属性约束

06:57.780 --> 07:02.740
约束里边呢 我们就可以用我们之前啊 刚刚那个文件里边做好的约束内销

07:02.740 --> 07:04.580
啊 把个导入进来啊

07:04.580 --> 07:06.660
啊 导入那个common

07:07.460 --> 07:09.780
啊 就是types嘛 啊 types from

07:10.740 --> 07:12.900
返回 啊返 返回

07:12.900 --> 07:14.580
呃 utl's

07:15.140 --> 07:16.340
然后common types

07:16.340 --> 07:17.300
把个导入进来

07:17.300 --> 07:20.020
好 首先呢 这里边 我们一个一个来啊

07:20.020 --> 07:21.620
第一个属性data's

07:22.260 --> 07:23.620
啊 它是一个数组 对吧

07:23.620 --> 07:24.500
data's 好

07:24.980 --> 07:25.620
ok 咱们来

07:26.180 --> 07:30.420
给它约束一下 怎么来约束呢 就是利用我们那个types里边

07:30.420 --> 07:33.220
就这个东西啊 这个里边不是提供了啊

07:33.220 --> 07:34.980
这么一个东西吗 groupdata's

07:34.980 --> 07:38.100
啊 好 我们就直接用这个啊 直接用这个就完成了

07:39.220 --> 07:42.660
没问题吧啊 当然我们在这里可以加加上 isrequired

07:42.660 --> 07:44.900
哎 这里凭什么可以加 凭什么可以加

07:44.900 --> 07:47.300
那这样子写也可以吗 当然可以啊

07:47.300 --> 07:49.780
它不是react里边的什么特殊语法

07:50.500 --> 07:53.220
就是接视你的这个东西 你看这个东西返回的是啥

07:53.380 --> 07:55.460
这个玩意儿 返回的是不是个函数 对吧

07:55.460 --> 07:57.700
是由它来得到了一个函数

07:58.260 --> 08:00.660
它得到函数里边是不是可以写一个required

08:00.660 --> 08:02.180
对不对 我们之前看到过的啊

08:02.180 --> 08:03.620
这个函数里边本身就一个属性

08:04.500 --> 08:07.140
返回的函数里边本身就一个属性 就是isrequired

08:07.140 --> 08:08.980
所以说我们这里可以接着写就完成了

08:08.980 --> 08:10.420
我们得到的是它 对吧

08:10.420 --> 08:12.820
我们这里得到的是它 它有一个isrequired

08:13.460 --> 08:14.020
写着啊

08:14.660 --> 08:15.380
data's

08:15.940 --> 08:18.500
还有什么呢 还有就是name属性啊

08:18.500 --> 08:20.020
name属性呢也是必填的

08:20.020 --> 08:21.220
ok 你传给我就行了啊

08:21.780 --> 08:22.900
name属性必填

08:22.980 --> 08:25.780
ok 那这里呢 我们就直接用那个proper types里边的东西

08:26.900 --> 08:30.900
proper types from proper types

08:30.900 --> 08:32.340
直接用这里边的东西

08:32.900 --> 08:37.300
好 name呢 就是proper types里边的什么stream

08:37.860 --> 08:40.900
对对对的stream isrequired

08:41.940 --> 08:43.380
你要必确给我传递

08:45.700 --> 08:47.220
还有什么要传递呢 我们看一下啊

08:48.180 --> 08:52.340
然后呢 还有choose data 是就是得到的数组啊

08:52.500 --> 08:56.420
就是已经不是对的啊 就是已经那个

08:57.380 --> 09:00.340
选中的东西啊 选中的东西这个东西呢

09:01.620 --> 09:04.580
需要给我传递啊 需要可能它是一个字不串的数组对吧

09:04.580 --> 09:05.940
它是一个字不串的数组

09:05.940 --> 09:08.740
因为我们之前在表述文档里面说过啊

09:08.740 --> 09:10.820
表示当前选中的value值

09:10.820 --> 09:12.340
所以它是一个字不串的数组

09:12.340 --> 09:14.420
那么我们这里呢也可以把写成一个公共的

09:14.420 --> 09:18.260
公共的函数choose data

09:19.060 --> 09:21.860
它是一个字不串的数组proper types

09:22.500 --> 09:23.060
areal

09:24.260 --> 09:25.860
proper types stream

09:26.500 --> 09:28.340
这样子呢 我们可以少写一些代码了

09:28.340 --> 09:30.340
choose data 是那么这里呢

09:30.340 --> 09:32.500
来自于types里边的choose data 是

09:32.500 --> 09:33.860
它是一个字不串的数组

09:34.420 --> 09:35.940
它是选中的东西

09:35.940 --> 09:37.460
然后还有一个呢unchanged

09:37.460 --> 09:38.580
unchanged是事件

09:39.700 --> 09:41.860
事件的话 它肯定是个函数

09:41.860 --> 09:44.100
但是呢 这个函数呢 是可以不用传递的啊

09:44.100 --> 09:45.620
那你不处理就不处理呗

09:45.620 --> 09:47.380
对吧 你不处理就不处理

09:47.380 --> 09:48.660
那么这里呢 unchanged

09:49.300 --> 09:50.100
我怎么写到这了

09:51.060 --> 09:52.820
这里 unchanged

09:52.820 --> 09:59.790
它来自于proper types fung

09:59.790 --> 10:01.950
它是个函数 但是不是必填的

10:01.950 --> 10:03.150
不是必填的

10:03.150 --> 10:05.870
行了 就没啥了

10:05.870 --> 10:08.590
行了 那咱们呢 这里呢

10:08.590 --> 10:10.430
这个约束就写好了 对吧

10:10.430 --> 10:11.150
约束写好了

10:11.150 --> 10:12.430
那咱们来用一下吧

10:12.430 --> 10:13.710
这不是之前一个test吗

10:13.710 --> 10:14.830
对吧 一个test

10:14.830 --> 10:15.950
来用一下吧

10:16.670 --> 10:18.590
好 这里呢 我们导致啊

10:18.590 --> 10:21.150
import test from

10:22.270 --> 10:27.390
来自于components command checkbox group

10:28.110 --> 10:29.630
好 这里边 把个test

10:30.750 --> 10:31.390
显示出来

10:32.750 --> 10:34.430
好 这里在这

10:35.070 --> 10:36.510
行了 咱们直接看一下

10:42.560 --> 10:44.720
诶 出问题了啊 出问题了

10:44.720 --> 10:45.600
它说什么呢

10:45.600 --> 10:49.840
它说 cannot read the property map of undefend

10:49.840 --> 10:50.960
它在这一行出了问题

10:51.520 --> 10:52.720
这一行出了问题

10:52.720 --> 10:54.560
就是data is 这里

10:55.440 --> 10:57.680
看一下哪个逐渐啊 哪个逐渐出了问题

10:57.680 --> 10:58.720
得到一组多犬框

10:59.360 --> 11:00.320
它在这里出了问题

11:03.070 --> 11:03.550
看一下啊

11:05.070 --> 11:05.870
这里

11:05.870 --> 11:09.150
这个data is 这个data is 它说它是undefend

11:11.150 --> 11:12.750
它说它是undefend的

11:12.750 --> 11:15.310
行吧 那我们把这个属性打印出来看一下吧

11:15.310 --> 11:17.150
打印出来看一下是怎么回事啊

11:17.150 --> 11:18.750
this props data is

11:19.550 --> 11:20.910
看一下为什么是undefend

11:20.910 --> 11:22.350
还是先看一下它是不是undefend

11:24.720 --> 11:25.200
打印出来

11:27.040 --> 11:28.160
果然是undefend的

11:28.160 --> 11:29.280
果然是undefend的

11:29.280 --> 11:30.480
那么为什么是undefend的

11:30.480 --> 11:32.560
那么我们要检查这个逐渐了

11:32.560 --> 11:34.400
那么这里用调试在这里

11:34.400 --> 11:36.000
rex 这个输行

11:41.040 --> 11:41.760
这个爆戳了

11:41.760 --> 11:43.600
它这里调试加不进去了

11:43.600 --> 11:44.400
调试加不进去了

11:44.400 --> 11:44.880
那行吧

11:44.880 --> 11:46.480
那咱们在这里来看

11:46.480 --> 11:48.800
因为这个属性是谁传递过来的呢

11:49.280 --> 11:50.080
这个属性

11:50.080 --> 11:52.080
这个属性是来自于test

11:52.080 --> 11:53.600
来自于这里传递过来的

11:53.600 --> 11:55.120
这里的属性是哪来的呢

11:55.200 --> 11:57.680
这里的属性是这个data是这个属性啊

11:57.680 --> 11:59.040
是来自于这对吧

11:59.040 --> 11:59.920
来自于这

11:59.920 --> 12:01.680
也就是说这里呢可能没有得到东西

12:02.640 --> 12:04.880
我们这里调用这个之前那个函数啊

12:04.880 --> 12:06.080
没有得到东西

12:06.080 --> 12:06.880
咱们来看一下吧

12:06.880 --> 12:07.920
打印出这个sduce

12:08.880 --> 12:10.720
看一下为什么没有得到东西啊

12:10.720 --> 12:11.120
保存

12:14.430 --> 12:15.390
看一下刷新

12:19.100 --> 12:20.540
得到的是undefend你看呗

12:22.460 --> 12:24.060
这里这里显示的是undefend

12:24.060 --> 12:24.860
不是这

12:24.860 --> 12:25.820
然后下下一个啊

12:26.380 --> 12:27.260
像是也是这

12:28.140 --> 12:29.580
我这里打印出来

12:29.660 --> 12:30.540
它没有得到东西

12:30.540 --> 12:31.820
那我们在这里打印一下

12:31.820 --> 12:33.420
看这个函数有没有正常的调用

12:33.980 --> 12:35.260
有没有正常的调用这个函数

12:35.820 --> 12:37.100
或者说我们这样子吧

12:37.100 --> 12:37.900
这样子

12:37.900 --> 12:38.700
写个dbug

12:39.660 --> 12:40.300
打个断点

12:40.940 --> 12:41.740
打个断点

12:41.740 --> 12:43.260
看一下有没有运行到一个断点

12:43.260 --> 12:43.740
保存啊

12:44.380 --> 12:44.780
刷新

12:46.620 --> 12:48.460
哎它没有运行到这个断点啊

12:49.900 --> 12:50.860
哎这个奇怪了啊

12:51.420 --> 12:52.620
它连这里都没有运行

12:52.620 --> 12:53.260
那行了

12:53.260 --> 12:54.620
那我们在这里打断点

12:55.100 --> 12:56.300
它总得运行吧

12:56.300 --> 12:57.660
它总有一个地方得运行

12:58.620 --> 12:59.100
dbug

13:01.390 --> 13:02.510
哇这里都没有运行

13:02.990 --> 13:04.030
啊这里都没有运行

13:04.910 --> 13:06.430
那我们看一下这里运行没有呢

13:07.230 --> 13:07.710
在这里

13:09.310 --> 13:10.910
这个app.js

13:10.910 --> 13:11.790
这里打个断点

13:13.230 --> 13:13.950
第八个

13:13.950 --> 13:14.910
哎这里运行了

13:15.710 --> 13:17.390
我们我们返回app

13:17.790 --> 13:18.590
返回app

13:18.590 --> 13:20.990
然后呢得到test得到test

13:21.550 --> 13:22.270
它说什么呢

13:22.270 --> 13:23.870
test is not defined

13:24.510 --> 13:26.750
哦现在哦现在得到了

13:26.750 --> 13:28.350
哦明白了明白了明白了

13:29.230 --> 13:30.430
啊明白了

13:31.870 --> 13:32.590
怎么回事呢

13:32.990 --> 13:33.390
怎么回事

13:33.390 --> 13:34.830
因为我真的引用错了啊

13:34.830 --> 13:35.470
引用错了

13:35.470 --> 13:36.830
应该引用这个test

13:36.830 --> 13:38.030
应该引用这个test

13:38.030 --> 13:38.590
保存啊

13:40.110 --> 13:42.110
好这里我们直接运行出来

13:43.630 --> 13:44.830
好这里再刷新啊

13:44.830 --> 13:45.310
再刷新

13:45.870 --> 13:46.910
好是不是出来了

13:46.910 --> 13:47.790
对不对

13:47.790 --> 13:49.310
啊ok这些东西都得到了啊

13:49.310 --> 13:50.510
你把这些

13:50.510 --> 13:51.710
那个去掉

13:51.710 --> 13:52.430
输出去掉

13:54.450 --> 13:55.890
哎这里啊输出去掉

13:56.530 --> 13:57.010
那这边

13:57.970 --> 13:58.850
哎这边

13:59.730 --> 14:01.570
这边没什么输出了啊

14:01.570 --> 14:02.450
刷新再来一次啊

14:03.490 --> 14:04.530
啊没什么问题了啊

14:05.410 --> 14:06.770
现在我们就得到这些东西了对吧

14:06.770 --> 14:08.290
嗯然后我们来测试一下啊

14:08.290 --> 14:09.650
看看咱们验证呢

14:09.650 --> 14:10.610
有没有问题

14:11.090 --> 14:12.450
看咱们的验证有没有问题

14:12.450 --> 14:14.050
那比方说我这里传错了

14:14.050 --> 14:15.810
我给他传到这个输足里边呢

14:15.810 --> 14:17.890
这个v6的这个v大写了

14:17.890 --> 14:19.330
我们来看一下啊保存

14:20.530 --> 14:22.050
你看一下现在是不是出问题了

14:22.050 --> 14:23.090
他告诉你什么了

14:23.090 --> 14:25.650
告诉你说这个v6这个属性值呢

14:25.650 --> 14:27.810
他没有通过啊没有通过验证啊

14:27.810 --> 14:28.690
没有通过验证

14:28.690 --> 14:29.650
他告诉你这么一个问题

14:30.210 --> 14:32.130
对吧我们就可以马上来进行修正了

14:32.690 --> 14:33.250
就这么回事

14:33.970 --> 14:35.010
哎就这么个意思啊

14:35.810 --> 14:37.170
好这是这一块啊

14:37.730 --> 14:39.410
保存看一下啊没问题了

14:41.010 --> 14:43.410
呃然后呢我们再看一下

14:43.410 --> 14:45.010
这里第一个组件呢

14:45.010 --> 14:47.170
我们就写好了啊就写好了

14:47.170 --> 14:48.930
然后后边的组件呢是不是类似的

14:48.930 --> 14:50.850
比方说radio box group

14:50.850 --> 14:52.210
对吧radio box group

14:52.210 --> 14:53.090
是不是类似的

14:53.090 --> 14:54.450
好咱们先把它复制过来啊

14:54.450 --> 14:55.250
然后再慢慢砍

14:56.930 --> 14:57.650
把复制过来

14:58.690 --> 14:59.330
来慢慢砍

15:00.210 --> 15:01.250
然后radio里边

15:01.330 --> 15:03.090
然后把这个导入进来啊前面两个

15:07.090 --> 15:07.970
radio里边呢

15:07.970 --> 15:09.650
我们看一下他里边的属性啊

15:09.650 --> 15:10.450
他里边的属性

15:10.450 --> 15:11.330
他里边的属性呢

15:11.330 --> 15:13.810
一个是data是这个是没变化的对吧

15:14.370 --> 15:15.570
哎这个是没变化的

15:16.130 --> 15:18.370
好然后呢data是没变化

15:18.370 --> 15:19.650
然后choosedata是呢

15:19.650 --> 15:21.730
他没有这个东西啊没有这个属性

15:21.730 --> 15:23.490
他这个他有个v6属性

15:23.490 --> 15:25.330
但是他没有这个什么choosedata是

15:25.330 --> 15:27.010
因为他只能单选他嘛

15:27.010 --> 15:28.050
他只能选中一个

15:28.050 --> 15:29.250
所以他不存在这个东西

15:29.250 --> 15:30.130
所以这个东西呢就

15:30.690 --> 15:32.290
默认的属性值啊

15:32.370 --> 15:34.050
v6啊默认选中的

15:34.530 --> 15:35.730
把其他做成空支付串

15:36.610 --> 15:38.370
好然后继续继续看啊

15:39.330 --> 15:40.610
他里边lame属性呢

15:41.170 --> 15:42.850
lame属性呢是可填可不填的

15:42.850 --> 15:44.290
on前几的是可填可不填的

15:44.290 --> 15:45.490
啊所以说你没啥区别了

15:45.970 --> 15:48.850
就是这个东西啊就是个choosedata是没了

15:48.850 --> 15:49.890
变成了v6

15:49.890 --> 15:50.850
v6是什么类型啊

15:50.850 --> 15:53.170
v6是支付串啊支付串

15:54.050 --> 15:55.250
啊这东西是必填的

15:56.370 --> 15:58.050
好其他就没啥了啊就没啥了

15:59.010 --> 15:59.810
啊就这个啊

16:00.770 --> 16:03.250
下面再来啊我就不掩饰了啊不掩饰了

16:03.250 --> 16:04.130
直接来

16:04.130 --> 16:06.130
好啊这里呢

16:06.130 --> 16:08.610
还有一个啥还有一个生那个车对吧

16:08.610 --> 16:10.290
生那个车啊把他复制一下

16:11.810 --> 16:12.770
生那个车里边差不多

16:15.120 --> 16:15.840
好差不多的

16:16.800 --> 16:17.520
啊这里呢

16:18.240 --> 16:20.400
呃前面的导入进来啊

16:22.590 --> 16:23.870
他来加一下大家下来

16:23.870 --> 16:25.150
也做一下这个事啊

16:25.150 --> 16:27.070
练习一下我们的属性默认值

16:27.070 --> 16:28.510
以及属性的约束

16:29.550 --> 16:31.550
嗯props这个生那个车里边

16:31.550 --> 16:32.590
让我们看一下文档啊

16:32.590 --> 16:35.390
之前写的文档data是啊ok是个输出

16:35.390 --> 16:37.470
没问题呃name value

16:37.470 --> 16:39.470
那是不是跟那个一样的

16:39.470 --> 16:39.870
对不对

16:40.430 --> 16:41.630
是不是跟这个是一样的

16:42.430 --> 16:44.350
啊甚至呢你可以再把这一块

16:44.350 --> 16:45.710
这个对象也抽象出来

16:45.710 --> 16:46.510
提去出来

16:46.510 --> 16:47.950
再把这个对象也提去出来

16:48.350 --> 16:49.710
啊那么这样子呢

16:49.710 --> 16:50.830
就是可以直接重复使用

16:52.030 --> 16:53.870
好都是这么三个组件啊

16:53.870 --> 16:56.270
咱们把这些约束啊默认值加上

16:56.270 --> 16:56.990
不一样是呢啊

16:57.630 --> 16:59.790
好然后呢这个之前的还有一个这个组件啊

16:59.870 --> 17:00.990
就是mod

17:00.990 --> 17:01.950
mod这个组件

17:01.950 --> 17:02.830
这个组件里边呢

17:02.830 --> 17:03.870
我们之前呢是

17:04.750 --> 17:06.510
做了一个模态框对不对

17:06.510 --> 17:07.470
啊不叫模态框啊

17:07.470 --> 17:09.950
叫做那个蒙层啊蒙层

17:09.950 --> 17:11.390
你看他是不是有默认属性啊

17:11.390 --> 17:13.230
好我们现在只需要做一件事啊

17:13.230 --> 17:14.510
一件事什么事呢

17:14.510 --> 17:16.270
就是把这个默认属性呢

17:16.270 --> 17:19.310
作为这个函数的静态属性就完事了

17:19.310 --> 17:20.270
所以说我们这里

17:20.270 --> 17:20.910
直接来啊

17:21.550 --> 17:22.670
就是mod

17:22.670 --> 17:23.390
mod

17:23.390 --> 17:24.510
第二啊

17:24.510 --> 17:26.030
default props

17:26.030 --> 17:28.030
啊把作为默认属性就完事了

17:28.110 --> 17:30.030
好那么剩下的这些事情是不是不用写了

17:30.030 --> 17:31.230
啊他自行给你搞定了

17:31.950 --> 17:33.550
没问题吧啊自行给你搞定了

17:33.550 --> 17:36.030
那么这里呢你直接使用props就完事了

17:36.030 --> 17:36.990
直接使用props

17:38.110 --> 17:38.910
props

17:38.910 --> 17:40.830
然后他里边还有什么还有child

17:40.830 --> 17:42.670
啊child呢你不能乱给我传递

17:42.670 --> 17:44.670
你必须要给我传递一个元素节点

17:44.670 --> 17:45.150
是吧

17:45.150 --> 17:46.110
所以说这里呢

17:46.110 --> 17:47.630
哎我不能再写到这儿啊

17:47.630 --> 17:49.230
应该写到属性约束这里

17:49.790 --> 17:50.110
mod

17:51.070 --> 17:51.710
prob

17:51.710 --> 17:52.110
types

17:53.230 --> 17:54.510
啊这是属性约束

17:54.510 --> 17:55.710
其中一个child

17:55.710 --> 17:56.590
child来

17:56.670 --> 17:57.550
它的类型是什么呢

17:57.550 --> 17:59.070
我们刚才写过了一个通用类型

17:59.070 --> 17:59.630
taps

17:59.630 --> 18:00.030
frop

18:01.150 --> 18:01.550
呃

18:02.190 --> 18:03.550
再返回啊再返回

18:04.190 --> 18:04.830
utils

18:05.550 --> 18:06.350
comment tab

18:06.350 --> 18:07.390
然后再把那个导进来吧

18:08.190 --> 18:08.910
prob

18:08.910 --> 18:09.550
taps

18:09.550 --> 18:09.950
frop

18:11.710 --> 18:12.190
prob

18:12.190 --> 18:12.670
taps

18:12.670 --> 18:13.790
他导进来啊

18:13.790 --> 18:14.670
好child呢

18:14.670 --> 18:16.430
我们可以使用taps里边的child

18:17.150 --> 18:18.830
啊他这里边已经写好了啊

18:18.830 --> 18:20.110
写好了这种约束了

18:20.110 --> 18:21.870
啊你要你要给我传递的

18:21.870 --> 18:22.910
啊这个可传可不传

18:23.550 --> 18:24.910
好然后呢 bg呢

18:24.990 --> 18:27.070
他必须是一个制服串来表示颜色嘛

18:27.070 --> 18:27.390
对不对

18:27.390 --> 18:28.270
他必须是个制服串

18:28.270 --> 18:30.270
所以说我们这里可以用taps

18:30.830 --> 18:32.030
啊背景颜色

18:32.990 --> 18:35.390
然后因为这里可以可以写一字快的

18:35.390 --> 18:36.430
也可以不写为什么呢

18:36.990 --> 18:37.950
因为他有默认值

18:38.430 --> 18:41.390
你就算是就算是必填的

18:41.390 --> 18:43.470
那么他由于有默认值的存在

18:43.470 --> 18:45.390
所以说呢他也一定是有值的

18:45.390 --> 18:46.590
所以说这里可以不用写啊

18:47.070 --> 18:47.870
然后还有什么呢

18:48.590 --> 18:48.910
啊

18:49.790 --> 18:50.750
还有一个unclose

18:50.750 --> 18:51.550
啊unclose

18:52.350 --> 18:52.990
unclose

18:53.630 --> 18:55.710
为什么呢proptaps的funk

18:56.590 --> 18:57.230
是一个函数

18:58.190 --> 18:59.710
好就有这么三个属性

18:59.710 --> 19:01.390
对吧把这个约束写好了

19:01.390 --> 19:02.990
然后再看啊three layout

19:03.470 --> 19:05.070
就是三栏布局

19:05.070 --> 19:07.390
三栏布局里边我们是不是也可以用同样的方式

19:07.390 --> 19:09.230
对吧他也有属性默认值

19:09.230 --> 19:10.670
对吧我们也可以使用

19:10.670 --> 19:13.230
three layout.default props

19:14.430 --> 19:16.590
好把这个属性默认值给加上

19:18.110 --> 19:20.270
啊属性默认值加上

19:20.270 --> 19:21.870
好那么这些代码是不是不用写了

19:21.870 --> 19:22.670
啊不用写了

19:22.750 --> 19:24.990
那么这个datax呢就把全部换成

19:25.870 --> 19:27.550
datax全部换成zs props

19:27.550 --> 19:29.710
不是zs props

19:29.710 --> 19:30.990
全部换成这个玩意就完事了

19:31.790 --> 19:33.950
好看一下啊这里边还有哪些东西要传递啊

19:33.950 --> 19:37.230
一个是min weights没问题

19:37.230 --> 19:38.510
求准啊还有一个求准

19:39.150 --> 19:39.870
啊ok ok

19:39.870 --> 19:42.110
行咱们再进行继续进行约束

19:42.910 --> 19:44.910
import types from

19:45.710 --> 19:48.270
好像看上去呢很麻烦对吧

19:49.470 --> 19:52.430
但是呢你要做一个通用的逐渐

19:52.510 --> 19:54.670
就要尽量的避免出问题

19:55.790 --> 19:58.750
这些麻烦事情呢看上去呢很麻烦

19:58.750 --> 20:00.270
但是实际上它不复杂

20:01.150 --> 20:03.230
如果将来呢你不去做这些

20:03.230 --> 20:04.830
如果你做一个通用逐渐啊

20:05.550 --> 20:07.790
如果你不去做这些约束的话

20:07.790 --> 20:09.790
那么导致了后边爆错了

20:10.270 --> 20:13.950
你才能真正的体会到什么叫做麻烦

20:13.950 --> 20:15.470
那个时候错误才真的不好找

20:16.430 --> 20:17.230
proper types

20:18.030 --> 20:18.990
然后呢这里边呢

20:18.990 --> 20:20.670
我们就可以挨带来约束嘛

20:20.670 --> 20:21.630
naps weights

20:22.110 --> 20:23.950
啊这个是个数字啊

20:23.950 --> 20:24.830
是一个数字

20:24.830 --> 20:26.430
于是呢这里我们填上

20:26.430 --> 20:27.070
填上啥呢

20:28.110 --> 20:29.950
proper types

20:31.150 --> 20:31.550
number

20:32.110 --> 20:33.230
它是一个数字

20:33.230 --> 20:35.390
然后呢right weights

20:36.750 --> 20:38.110
它是一个proper types

20:38.670 --> 20:39.390
number

20:39.390 --> 20:40.270
也是个数字

20:40.270 --> 20:41.550
哎这为什么爆错了

20:43.470 --> 20:45.150
哦这里小写的啊小写的

20:46.190 --> 20:47.550
好然后继续啊

20:47.550 --> 20:49.470
然后min weights呢

20:49.470 --> 20:51.230
它也是proper types

20:51.310 --> 20:51.950
number

20:51.950 --> 20:53.230
必须是一个数字

20:53.230 --> 20:53.790
gap

20:54.430 --> 20:55.710
proper types

20:55.710 --> 20:56.110
number

20:56.110 --> 20:57.230
必须是一个数字

20:57.230 --> 20:58.830
然后child

20:58.830 --> 21:00.750
啊它必须是一个啊就是

21:00.750 --> 21:02.110
taps的child

21:02.750 --> 21:05.310
必须是我们封装讨那个内销

21:05.310 --> 21:06.510
必须是一个元素节点

21:07.230 --> 21:08.030
可以渲染的东西

21:08.590 --> 21:09.870
好看一下还有啥呢

21:09.870 --> 21:11.790
哦还有一个naps and right

21:11.790 --> 21:13.390
还有naps and right的属性

21:13.390 --> 21:14.510
这两个属性呢也是

21:14.510 --> 21:16.510
要必须要是可以渲染的东西啊

21:16.510 --> 21:17.230
所以说naps

21:18.350 --> 21:18.670
naps

21:19.470 --> 21:21.230
来所以也可以用tapschild

21:21.230 --> 21:21.790
对吧

21:21.790 --> 21:23.070
它也是可以渲染的东西

21:23.070 --> 21:24.670
啊当然也可以使用啊

21:24.670 --> 21:26.030
原始的proper types

21:26.590 --> 21:27.390
什么load

21:27.390 --> 21:28.910
这样都想right

21:29.630 --> 21:30.270
proper types

21:31.470 --> 21:31.710
load

21:33.790 --> 21:35.230
啊这样子是不是可以约束了

21:35.230 --> 21:35.630
对吧

21:35.630 --> 21:36.910
这些东西是可以不传递的啊

21:36.910 --> 21:37.710
可以不传递的

21:38.750 --> 21:39.230
行了啊

21:39.230 --> 21:42.030
那咱们就把这个之前的组件就

21:42.030 --> 21:42.750
给它加上了

21:43.390 --> 21:45.470
默认值以及约束

21:45.470 --> 21:46.510
加上这些东西过后呢

21:46.510 --> 21:47.710
咱们就不用担心了

21:47.790 --> 21:49.070
完全不用担心这个组件

21:49.070 --> 21:49.950
以后要乱乱来

21:50.750 --> 21:51.470
它乱来不了

21:51.470 --> 21:52.430
你乱来它要爆错

21:52.430 --> 21:53.630
它就会提示你啊

21:53.630 --> 21:55.150
你是这里是不是写的有问题啊

21:55.150 --> 21:56.990
你是不是哪个属性应该传错了啊

21:56.990 --> 21:58.750
它而且在出入信息里面

21:58.750 --> 22:00.510
会给你进行详细的提示

22:00.510 --> 22:02.030
其实这一点蛮重要的

22:02.030 --> 22:03.710
特别是开发一个

22:04.350 --> 22:07.070
大型项目或者是一个中型项目的时候

22:07.070 --> 22:09.070
组件自己写的组件非常非常多

22:09.630 --> 22:11.230
以后呢可能搞不清楚哪个组件

22:11.230 --> 22:11.870
有哪些属性的

22:11.870 --> 22:14.350
比方说一个组件平均下来有10个属性

22:14.350 --> 22:15.470
都不说10个属性了

22:15.470 --> 22:16.270
就5个属性吧

22:17.790 --> 22:19.710
平均有50个组件

22:19.710 --> 22:20.270
几个属性了

22:21.150 --> 22:21.950
50个组件

22:21.950 --> 22:23.230
每个组件10个属性

22:23.230 --> 22:24.750
那么是不是500个属性了

22:25.310 --> 22:26.590
那么这500个属性里边

22:26.590 --> 22:27.310
比方说啊

22:27.310 --> 22:28.110
其中还有一些

22:28.110 --> 22:28.910
还有一些对象

22:28.910 --> 22:29.950
比方说有50个对象

22:30.430 --> 22:31.310
这属性是个对象

22:31.790 --> 22:33.710
那么这个对象里边有哪些属性值

22:33.710 --> 22:34.830
是不是更加多了

22:34.830 --> 22:35.550
你背得住吗

22:36.030 --> 22:37.070
肯定是背记不住

22:37.630 --> 22:38.350
那么这样子呢

22:38.350 --> 22:39.710
就非常非常容易导致

22:40.110 --> 22:40.670
乱传递

22:41.470 --> 22:42.830
随意的去传递这个

22:42.830 --> 22:44.350
随意传递这个数据

22:44.350 --> 22:45.870
那么就导致了组件的运行

22:45.870 --> 22:47.150
可能一开始没问题

22:47.230 --> 22:48.750
最可怕的就是一开始没问题

22:49.390 --> 22:50.910
真的用的时候了出现问题

22:50.910 --> 22:52.590
你真的是找不到问题在哪

22:53.230 --> 22:55.070
所以我们在写这个组件的时候

22:56.110 --> 22:57.710
特别是一些通用组件的时候

22:58.830 --> 23:00.750
尽量的把这些检查加上

23:00.750 --> 23:02.510
避免类型发生发生问题

23:03.230 --> 23:03.710
以后呢

23:03.710 --> 23:05.550
你们还会学习这个TX

23:05.550 --> 23:07.070
TypeScript这么语言

23:07.070 --> 23:07.790
这个语言呢

23:09.070 --> 23:10.030
有了这个语言之后

23:10.030 --> 23:10.990
在React里面

23:10.990 --> 23:12.270
连这两个东西都不用用了

23:12.270 --> 23:14.430
可以更加方便地来约束内容

23:14.430 --> 23:14.990
那个时候呢

23:14.990 --> 23:16.350
你根本就错不了

23:16.430 --> 23:17.150
根本就错不了

23:17.790 --> 23:18.990
不用等到运行了

23:18.990 --> 23:19.950
你直接写代码的时候

23:19.950 --> 23:22.110
它马上就提示你这个内容有问题了

23:22.110 --> 23:23.870
当然你要学习TX过后

23:23.870 --> 23:25.310
这个TypeScript语言之后

23:25.310 --> 23:26.910
你才有能力

23:28.030 --> 23:28.350
好

23:28.350 --> 23:29.710
这是这一块啊

23:31.230 --> 23:31.870
那就没啥了

23:31.870 --> 23:33.550
下来大家把这个练习做一下

23:33.550 --> 23:34.830
练习做一下

23:34.830 --> 23:35.950
这里我们把提交一下

23:36.510 --> 23:38.670
这就是2-3完结

23:40.590 --> 23:41.310
好行了

23:41.310 --> 23:42.830
我们这里是新开了分支对吧

23:42.830 --> 23:44.910
然后我们再切回到那个

23:44.910 --> 23:45.950
我们把推送一下

23:46.030 --> 23:47.150
推送到那个原称

23:48.670 --> 23:49.870
推送到原称

23:50.430 --> 23:51.390
推送到原称之后

23:52.270 --> 23:53.230
咱们再切回

23:53.230 --> 23:55.070
切回那个Master

23:55.070 --> 23:56.190
切回Master

23:56.190 --> 23:58.350
因为Master里边那个组件也要更新

23:58.350 --> 23:58.590
对吧

23:58.590 --> 23:59.390
组件也要更新

23:59.390 --> 24:01.070
所以说把切回到Master

24:01.070 --> 24:02.110
等它上场完毕

24:02.910 --> 24:03.710
也不用等了

24:03.710 --> 24:04.910
直接切回去吧

24:04.910 --> 24:05.790
切回到Master

24:06.350 --> 24:07.550
切回到Master过后呢

24:07.550 --> 24:08.350
我们这里呢

24:09.230 --> 24:11.070
因为Master这里面没有更新嘛

24:11.070 --> 24:11.710
没有更新

24:11.710 --> 24:14.910
所以说我们用Gate Merge

24:15.070 --> 24:15.870
混合一下

24:15.870 --> 24:16.670
混合这个东西

24:17.790 --> 24:19.070
混合这个分支

24:20.110 --> 24:20.830
混合进来

24:21.550 --> 24:21.790
好

24:21.790 --> 24:22.670
混合进来之后了

24:22.670 --> 24:23.150
你看一下

24:23.150 --> 24:24.350
Master里面是不是更新了

24:24.350 --> 24:24.670
对吧

24:24.670 --> 24:25.470
Master更新了

24:25.470 --> 24:27.310
然后再把Master里边这个东西去掉

24:27.870 --> 24:29.630
这个App里边这些东西去掉

24:30.510 --> 24:31.390
保留个空的

24:32.350 --> 24:33.470
然后保出来

24:33.470 --> 24:33.950
重新

24:35.470 --> 24:36.670
它又出这个问题了

24:36.670 --> 24:37.470
我真的是不知道

24:37.470 --> 24:38.990
它为什么老是出这个问题

24:39.870 --> 24:40.990
关了重新打开

24:40.990 --> 24:42.830
每次关了重新打开就好了

24:45.090 --> 24:45.730
好了

24:45.810 --> 24:48.370
然后我们这里把Master提交一下

24:48.370 --> 24:48.930
提交一下

24:49.970 --> 24:51.250
这费个修复

24:52.930 --> 24:53.410
提交一下

24:53.970 --> 24:54.450
行了

24:54.450 --> 24:55.570
那Master更新了

24:55.570 --> 24:57.410
我们把Master再上场上去

24:59.090 --> 25:00.370
之所以给它看一下

25:00.370 --> 25:02.450
是因为之前有些同学在问

25:02.450 --> 25:03.970
我这个分支的东西是什么呢

25:03.970 --> 25:04.690
管理的

25:04.690 --> 25:05.490
就这样的方式

25:05.490 --> 25:06.050
非常简单

25:06.610 --> 25:07.010
行了

25:07.970 --> 25:08.610
大家下来吧

25:08.610 --> 25:09.250
去做一下

25:09.250 --> 25:09.810
要做一下

