WEBVTT

00:01.010 --> 00:07.510
我们这里可能来说一个就是阻止丢转的例子

00:07.510 --> 00:10.510
这个例子也很简单 我们来给大家看一下

00:10.510 --> 00:16.310
这里边我们写两个页面 非常简单的两个页面

00:16.310 --> 00:19.310
配几1 点解释

00:19.310 --> 00:21.310
RFF

00:21.310 --> 00:24.810
4S方向性

00:24.810 --> 00:30.810
RFC是写蒙了 真的是人都是写蒙了

00:31.310 --> 00:33.810
配几1

00:34.810 --> 00:37.810
就两个页面 然后再建一个页面

00:37.810 --> 00:39.810
配几2 点解释

00:39.810 --> 00:45.810
配几2它是个表单 所以我们这里用一个类组件

00:45.810 --> 00:48.810
表单里边有一个文本

00:48.810 --> 00:53.810
Input什么 好像从那边用过TexArray

00:53.810 --> 00:56.810
用一下这个玩意儿

00:56.810 --> 01:04.810
给它一个就是把它收空 这里写上这么一个State 状态

01:04.810 --> 01:08.810
给它取个就是值 V

01:08.810 --> 01:11.810
来取这个值 空之不串

01:11.810 --> 01:13.810
我认为空之不串

01:13.810 --> 01:15.810
Zestate叫Var

01:15.810 --> 01:19.810
当然用函数组件 用后可也可以 不所谓的

01:19.810 --> 01:20.810
Unchanged

01:20.810 --> 01:23.810
当改变的时候 我们把Var来变化一下

01:23.810 --> 01:25.810
Zestate

01:25.810 --> 01:27.810
设置Var为什么呢

01:27.810 --> 01:29.810
为1.target.value

01:29.810 --> 01:32.810
就完了 这是两个页面

01:32.810 --> 01:35.810
TexArray

01:35.810 --> 01:37.810
行了 差不多了

01:37.810 --> 01:39.810
那这里咱们看一下

01:39.810 --> 01:43.810
我们在App里面加入这两个页面

01:43.810 --> 01:44.810
Input

01:44.810 --> 01:47.810
首先把那个乱七八糟的Browser倒入进来

01:47.810 --> 01:53.810
倒入这个BrowserRotor

01:53.810 --> 01:55.810
倒入RotorLink

01:55.810 --> 01:57.810
倒入进来吧

01:57.810 --> 01:59.810
看一下

01:59.810 --> 02:02.810
然后倒入那个

02:02.810 --> 02:05.810
AppLink 多的少到写件样式

02:05.810 --> 02:07.810
我们这里写上一个样式

02:07.810 --> 02:09.810
App.css

02:09.810 --> 02:11.810
再倒入一下

02:11.810 --> 02:13.810
Input

02:13.810 --> 02:15.810
App.css

02:15.810 --> 02:20.810
好 这里边我们就使用Rotor

02:20.810 --> 02:24.810
然后Rotor里边我们使用两个Rows

02:24.810 --> 02:27.810
1

02:27.810 --> 02:29.810
什么意思

02:29.810 --> 02:31.810
吓我一跳

02:31.810 --> 02:33.810
Pass

02:33.810 --> 02:36.810
配几1

02:36.810 --> 02:38.810
Component

02:38.810 --> 02:40.810
配几1

02:40.810 --> 02:43.810
这倒入两个页面

02:43.810 --> 02:45.810
配几1From

02:45.810 --> 02:48.810
点儿写钢 配几1

02:49.810 --> 02:51.810
这是配几2

02:51.810 --> 02:53.810
两个页面

02:53.810 --> 02:55.810
然后这里再来一个

02:55.810 --> 02:57.810
配几2

02:57.810 --> 02:58.810
两个Rows

02:58.810 --> 02:59.810
好 接下来再写个DIV

02:59.810 --> 03:01.810
点儿Nav

03:01.810 --> 03:02.810
倒好吗

03:02.810 --> 03:05.810
倒好里边两个NavLink

03:09.500 --> 03:12.500
这是页面1

03:12.500 --> 03:14.500
页面2

03:14.500 --> 03:16.500
配几1

03:16.500 --> 03:17.500
页面2

03:17.500 --> 03:18.500
配几2

03:18.500 --> 03:21.500
行了 写完了

03:21.500 --> 03:23.500
这里边外面再淘个DIV

03:23.500 --> 03:24.500
Container

03:24.500 --> 03:25.500
稍微写一下这个样式

03:25.500 --> 03:28.500
稍微写一下就完事了

03:28.500 --> 03:29.500
保存 看一下

03:29.500 --> 03:30.500
目前这个样子

03:30.500 --> 03:31.500
仇都不得了

03:31.500 --> 03:35.500
咱们稍微控制一下

03:35.500 --> 03:36.500
然后到Css里边来

03:36.500 --> 03:38.500
首先Nav里边的A元素

03:38.500 --> 03:40.500
我们把它设置一下样式

03:40.500 --> 03:41.500
Color

03:41.500 --> 03:43.500
色为

03:43.500 --> 03:44.500
色为啥呢

03:44.500 --> 03:45.500
00

03:45.500 --> 03:47.500
Tex Decoration

03:47.500 --> 03:48.500
Nav

03:48.500 --> 03:49.500
Found Size

03:49.500 --> 03:52.500
色为2EM

03:52.500 --> 03:54.500
然后Margin

03:54.500 --> 03:57.500
设置为30个相处

03:57.500 --> 03:58.500
Margin

03:58.500 --> 04:00.500
差不多了

04:00.500 --> 04:01.500
然后下面

04:01.500 --> 04:03.500
Container

04:03.500 --> 04:06.500
Container我们设置一下样式

04:06.500 --> 04:08.500
宽度的话

04:08.500 --> 04:10.500
我们设个Margin

04:10.500 --> 04:11.500
直接是个Margin得了

04:11.500 --> 04:13.500
30个相处

04:14.500 --> 04:16.500
然后Tex Arrayer也设置一下

04:16.500 --> 04:18.500
Tex Arrayer

04:18.500 --> 04:19.500
设置个宽度

04:19.500 --> 04:21.500
比方说500个相处

04:21.500 --> 04:22.500
高度

04:22.500 --> 04:24.500
200个相处

04:24.500 --> 04:25.500
保存

04:25.500 --> 04:27.500
就这么个一面

04:27.500 --> 04:29.500
设置5个Found Size

04:29.500 --> 04:32.500
2EM

04:32.500 --> 04:33.500
就这两个一面

04:33.500 --> 04:34.500
一面一 一面二

04:34.500 --> 04:35.500
一面一 一面二

04:35.500 --> 04:37.500
然后一面一里边

04:37.500 --> 04:38.500
我们

04:38.500 --> 04:39.500
还有那个

04:39.500 --> 04:41.500
还是Nav

04:41.500 --> 04:43.500
A的Activ

04:43.500 --> 04:44.500
Color

04:44.500 --> 04:45.500
F4你吗

04:46.500 --> 04:47.500
随便写个

04:47.500 --> 04:49.500
行了 简单写一下样式

04:49.500 --> 04:50.500
两个一面切换

04:50.500 --> 04:52.500
现在我们要做什么事情

04:52.500 --> 04:53.500
是这样子

04:53.500 --> 04:55.500
如果说一面二里边写的内容

04:55.500 --> 04:57.500
就在这里块写的内容的话

04:57.500 --> 04:58.500
我们再切换一面一的时候

04:58.500 --> 05:00.500
要给个提示

05:00.500 --> 05:01.500
就要做这个事情

05:01.500 --> 05:02.500
其他没啥了

05:02.500 --> 05:03.500
就做这个事情

05:03.500 --> 05:04.500
如果说有内容的话

05:04.500 --> 05:05.500
没内容的话无所谓

05:05.500 --> 05:06.500
你挑转

05:06.500 --> 05:07.500
如果说有内容的话

05:07.500 --> 05:08.500
那么我请问你

05:08.500 --> 05:09.500
就是跟他说

05:09.500 --> 05:10.500
挑转一面过后

05:10.500 --> 05:12.500
内容会无法保留

05:12.500 --> 05:13.500
是不是真的要挑转

05:13.500 --> 05:14.500
就要做这个事

05:14.500 --> 05:16.500
那么这个事怎么做呢

05:16.500 --> 05:17.500
这个事呢

05:17.500 --> 05:20.500
我们可以利用之前写过那个就是呢

05:20.500 --> 05:22.500
之前咱们是不是写过一个东西

05:22.500 --> 05:23.500
叫做那个

05:23.500 --> 05:24.500
叫做什么

05:24.500 --> 05:26.500
get user confirmation

05:26.500 --> 05:27.500
对吧

05:27.500 --> 05:28.500
而且这个东西

05:28.500 --> 05:29.500
它是不是有默认值

05:29.500 --> 05:30.500
默认值就是一个提示

05:30.500 --> 05:32.500
我们只需要给它加入主色就行了

05:32.500 --> 05:35.500
只需要给它加入主色就行了

05:35.500 --> 05:38.500
那么什么情况下加入主色呢

05:38.500 --> 05:39.500
是不是有内容的情况下

05:39.500 --> 05:40.500
就要加入主色

05:40.500 --> 05:41.500
没有内容的情况下

05:41.500 --> 05:42.500
就不加入主色

05:42.500 --> 05:43.500
对不对

05:43.500 --> 05:45.500
没有内容的情况下就把主色清空

05:45.500 --> 05:46.500
就这么简单

05:46.500 --> 05:47.500
就这么简单

05:47.500 --> 05:49.500
非常非常简单

05:49.500 --> 05:51.500
甚至我们可以写个通用的东西

05:51.500 --> 05:52.500
通用的东西

05:52.500 --> 05:53.500
我们先不通用

05:53.500 --> 05:55.500
我们先直接在这里写一下

05:55.500 --> 05:56.500
写一下

05:56.500 --> 05:57.500
是不是

05:57.500 --> 05:59.500
要不要加入主色

05:59.500 --> 06:01.500
要不要加入主色

06:01.500 --> 06:02.500
比方说

06:02.500 --> 06:05.500
我们这里可以用这种方式

06:05.500 --> 06:07.500
这里写一个

06:07.500 --> 06:10.500
handle block

06:10.500 --> 06:11.500
handle block

06:12.500 --> 06:15.500
处理主色

06:15.500 --> 06:17.500
怎么来处理主色呢

06:17.500 --> 06:18.500
怎么来处理主色呢

06:18.500 --> 06:19.500
关键看

06:19.500 --> 06:21.500
有没有值这个

06:21.500 --> 06:22.500
我们这样子

06:22.500 --> 06:24.500
如果说

06:24.500 --> 06:26.500
如果说

06:26.500 --> 06:27.500
z

06:27.500 --> 06:28.500
不用z state

06:28.500 --> 06:30.500
一个传一个值进来

06:30.500 --> 06:31.500
value

06:31.500 --> 06:33.500
一个传一个值进来

06:33.500 --> 06:35.500
如果说

06:35.500 --> 06:37.500
value有值

06:37.500 --> 06:38.500
有值的话

06:38.500 --> 06:39.500
是不是添加主色

06:39.500 --> 06:40.500
对吧

06:40.500 --> 06:41.500
添加主色

06:41.500 --> 06:43.500
解除主色的函数

06:43.500 --> 06:45.500
保存到 z 里

06:45.500 --> 06:47.500
添加一个主色

06:47.500 --> 06:48.500
怎么添加

06:48.500 --> 06:49.500
是以前写过的

06:49.500 --> 06:50.500
history block

06:50.500 --> 06:52.500
添加一个主色

06:52.500 --> 06:54.500
主色的消息是

06:54.500 --> 06:56.500
文本

06:56.500 --> 06:58.500
就是切换页面

06:58.500 --> 07:01.500
会导致文本

07:01.500 --> 07:05.500
就是无法保留

07:05.500 --> 07:09.500
是否真的要

07:09.500 --> 07:11.500
真的要切换

07:11.500 --> 07:13.500
给它个提示

07:13.500 --> 07:14.500
提示语句

07:14.500 --> 07:15.500
加了主色之后

07:15.500 --> 07:17.500
后边跳到页面之后

07:17.500 --> 07:19.500
是不是就会有提示

07:19.500 --> 07:20.500
为什么有提示

07:20.500 --> 07:21.500
是因为

07:21.500 --> 07:22.500
之前说过

07:22.500 --> 07:23.500
getU的config

07:23.500 --> 07:24.500
没醒这个函数

07:24.500 --> 07:25.500
是不是有个默认值

07:25.500 --> 07:26.500
它默认就是

07:26.500 --> 07:27.500
把提示出来

07:27.500 --> 07:28.500
对吧

07:28.500 --> 07:29.500
我们刚才写过了

07:29.500 --> 07:30.500
这是个默认值

07:30.500 --> 07:31.500
我就把默认值写一次

07:31.500 --> 07:32.500
写一次

07:32.500 --> 07:33.500
一个是message

07:33.500 --> 07:35.500
一个是callback

07:35.500 --> 07:36.500
callback为初的时候

07:36.500 --> 07:38.500
这个回交函数为初的时候

07:38.500 --> 07:39.500
可以跳转

07:39.500 --> 07:40.500
为forced的时候

07:40.500 --> 07:41.500
表示不能跳转

07:41.500 --> 07:42.500
它这里面怎么写的

07:42.500 --> 07:44.500
它这里面是这样写的

07:44.500 --> 07:46.500
就是window.config

07:46.500 --> 07:48.500
所以说为什么说

07:48.500 --> 07:49.500
我们讲课的时候

07:49.500 --> 07:51.500
大家一定要跟着去念一下

07:51.500 --> 07:52.500
不然的话

07:52.500 --> 07:54.500
你根本一点印象都没有

07:54.500 --> 07:55.500
如果你念习到过后

07:55.500 --> 07:56.500
你知道我在说什么了

07:56.500 --> 07:57.500
对吧

07:57.500 --> 07:58.500
它就会调用这个函数

07:58.500 --> 07:59.500
这是它默认值

07:59.500 --> 08:00.500
默认值是个函数

08:00.500 --> 08:01.500
你写不写都无所谓

08:01.500 --> 08:03.500
因为默认值就是这样写的

08:03.500 --> 08:04.500
保存

08:04.500 --> 08:05.500
那如果有值的话

08:05.500 --> 08:06.500
添加主色

08:06.500 --> 08:07.500
那如果说没有值

08:07.500 --> 08:08.500
没有值呢

08:08.500 --> 08:09.500
是不是要解除主色

08:09.500 --> 08:10.500
对吧

08:10.500 --> 08:11.500
unblock

08:11.500 --> 08:12.500
对不对

08:12.500 --> 08:13.500
是不是要解除主色

08:13.500 --> 08:14.500
没问题吧

08:14.500 --> 08:16.500
有值就添加

08:16.500 --> 08:17.500
没有值就解除

08:17.500 --> 08:19.500
没有值就解除

08:19.500 --> 08:20.500
就这么简单

08:20.500 --> 08:21.500
当然你解除的时候

08:21.500 --> 08:22.500
最好先判断一下

08:22.500 --> 08:23.500
这个热视

08:23.500 --> 08:24.500
unblock有没有值

08:24.500 --> 08:25.500
如果有值的话

08:25.500 --> 08:26.500
那么表示这个解除函数

08:26.500 --> 08:27.500
是存在的

08:27.500 --> 08:28.500
就解除

08:28.500 --> 08:29.500
就这么简单

08:29.500 --> 08:30.500
好那么这个页面

08:30.500 --> 08:31.500
一开始是没有值的

08:31.500 --> 08:32.500
对吧

08:32.500 --> 08:33.500
一开始就不用管

08:33.500 --> 08:34.500
那么每一次数据

08:34.500 --> 08:35.500
发生变化的时候

08:35.500 --> 08:36.500
是不是我们都调用这个函数

08:36.500 --> 08:37.500
handle block

08:37.500 --> 08:38.500
对吧

08:38.500 --> 08:39.500
让它来帮助我们

08:39.500 --> 08:40.500
到底要不要添加主色

08:40.500 --> 08:41.500
如果要添加主色的话

08:41.500 --> 08:42.500
还是添加

08:42.500 --> 08:43.500
如果不添加主色的话

08:43.500 --> 08:44.500
它就会把解除

08:44.500 --> 08:46.500
把解除掉就完事了

08:46.500 --> 08:47.500
好

08:47.500 --> 08:49.500
当然那最后呢

08:49.500 --> 08:51.500
那个component

08:51.500 --> 08:52.500
低的就是

08:52.500 --> 08:53.500
component

08:53.500 --> 08:54.500
vio

08:55.500 --> 08:57.500
vio amount的时候

08:57.500 --> 08:58.500
就是即将卸载

08:58.500 --> 08:59.500
这个组件的时候

08:59.500 --> 09:00.500
是不是也来一次

09:00.500 --> 09:01.500
解除主色

09:01.500 --> 09:02.500
对吧

09:02.500 --> 09:03.500
不能一直主色吗

09:03.500 --> 09:04.500
就完了

09:04.500 --> 09:05.500
就这么简单

09:05.500 --> 09:06.500
还有啥呢

09:06.500 --> 09:07.500
还有啥呢

09:07.500 --> 09:08.500
你看一下

09:08.500 --> 09:09.500
还有啥吗

09:09.500 --> 09:10.500
还有这个vio只要传过去

09:10.500 --> 09:11.500
确实还有点东西

09:11.500 --> 09:13.500
vio只要传过去

09:13.500 --> 09:15.500
你不能信任这里的state

09:15.500 --> 09:16.500
你不能

09:16.500 --> 09:18.500
这里面最好不要用state里面的var

09:18.500 --> 09:19.500
就不能这样用

09:19.500 --> 09:20.500
因为state是

09:20.500 --> 09:21.500
负值是异步的

09:21.500 --> 09:23.500
这个特别是在世界里面

09:23.500 --> 09:24.500
负值是异步的

09:24.500 --> 09:25.500
所以不能这样做

09:25.500 --> 09:26.500
不能去信任它

09:26.500 --> 09:27.500
你要在这里去

09:27.500 --> 09:28.500
把这个值传过去

09:28.500 --> 09:29.500
好吧

09:29.500 --> 09:30.500
就完了

09:30.500 --> 09:31.500
还有啥呢

09:31.500 --> 09:32.500
每一次改变的时候

09:32.500 --> 09:33.500
我来决定

09:33.500 --> 09:34.500
有没有值

09:34.500 --> 09:35.500
你填东西的话

09:35.500 --> 09:36.500
我给你添加个主色

09:36.500 --> 09:37.500
那么到时候

09:37.500 --> 09:38.500
挑战的页面的时候

09:38.500 --> 09:39.500
它自然会提示你

09:39.500 --> 09:41.500
如果说你没有东西

09:41.500 --> 09:42.500
已经没了的话

09:42.500 --> 09:43.500
没有写东西的话

09:43.500 --> 09:44.500
那么就给你解除主色

09:44.500 --> 09:45.500
因为这个组件

09:45.500 --> 09:46.500
现在的时候

09:46.500 --> 09:47.500
也会解除主色

09:47.500 --> 09:48.500
就完了

09:48.500 --> 09:49.500
你看一下吧

09:49.500 --> 09:50.500
现在跳转没问题

09:50.500 --> 09:51.500
对吧

09:51.500 --> 09:52.500
因为现在没有添加主色

09:52.500 --> 09:53.500
那么现在我们写一些东西

09:53.500 --> 09:54.500
是不是主色就已经添加了

09:54.500 --> 09:55.500
因为每一次改变

09:55.500 --> 09:56.500
它是不是就会

09:56.500 --> 09:57.500
调用这个函数

09:57.500 --> 09:58.500
是不是添加主色

09:58.500 --> 09:59.500
好

09:59.500 --> 10:00.500
添加主色过后再切换

10:00.500 --> 10:01.500
你看一下

10:01.500 --> 10:02.500
是不是这个玩意

10:02.500 --> 10:03.500
是不是

10:03.500 --> 10:04.500
就这么简单

10:04.500 --> 10:05.500
就这么简单

10:05.500 --> 10:06.500
你看点

10:06.500 --> 10:07.500
所以会跳出来

10:07.500 --> 10:08.500
清空过后再点

10:08.500 --> 10:09.500
就没问题了

10:09.500 --> 10:10.500
对吧

10:10.500 --> 10:11.500
就这么简单

10:11.500 --> 10:12.500
就这么简单

10:12.500 --> 10:14.500
这是不写通用的

10:14.500 --> 10:15.500
不写通用的

10:15.500 --> 10:16.500
就是东西

10:16.500 --> 10:17.500
它的写法

10:17.500 --> 10:18.500
那如果说

10:18.500 --> 10:19.500
你要把它写成一个通用的

10:19.500 --> 10:20.500
以后

10:20.500 --> 10:21.500
很多页面都要有这种主色了

10:21.500 --> 10:22.500
那你可以单独的

10:22.500 --> 10:24.500
去提一个主件出来

10:24.500 --> 10:25.500
我们把配件

10:25.500 --> 10:26.500
copy一下

10:26.500 --> 10:27.500
那么现在呢

10:27.500 --> 10:28.500
我们再建一个主件

10:28.500 --> 10:29.500
叫做给他取个名字

10:29.500 --> 10:30.500
叫做propt

10:30.500 --> 10:32.500
propt

10:32.500 --> 10:33.500
叫介式

10:33.500 --> 10:34.500
写这么一个主件

10:34.500 --> 10:35.500
这个主件单独

10:35.500 --> 10:36.500
来完成这件事情

10:36.500 --> 10:37.500
非常非常简单

10:37.500 --> 10:38.500
这个主件

10:38.500 --> 10:39.500
这个主件咋做呢

10:39.500 --> 10:40.500
我们建一个内主件

10:40.500 --> 10:41.500
建一个内主件

10:41.500 --> 10:42.500
propt

10:42.500 --> 10:43.500
这个主件

10:43.500 --> 10:44.500
它也不虽然的任何内容

10:44.500 --> 10:45.500
它不虽然的任何内容

10:45.500 --> 10:46.500
它做什么事情呢

10:46.500 --> 10:48.500
直接return now

10:48.500 --> 10:49.500
它不虽然的任何内容

10:49.500 --> 10:51.500
它只是来提供主色的

10:51.500 --> 10:52.500
那么这里边

10:52.500 --> 10:53.500
它就是这样子写

10:53.500 --> 10:54.500
我们把copy过来

10:54.500 --> 10:55.500
都差不多了

10:55.500 --> 10:57.500
copy过来就差不多了

10:57.500 --> 10:58.500
它怎么写呢

10:58.500 --> 10:59.500
它是这样子

10:59.500 --> 11:00.500
我们这里肯定是

11:00.500 --> 11:01.500
这个代码肯定要要

11:01.500 --> 11:02.500
肯定要要

11:02.500 --> 11:03.500
肯定要要

11:04.500 --> 11:05.500
那么到底要不要

11:05.500 --> 11:06.500
添加主色取决什么

11:06.500 --> 11:08.500
取决它一个属性值

11:08.500 --> 11:10.500
它有一个属性值

11:12.500 --> 11:13.500
propt

11:13.500 --> 11:14.500
有一个属性

11:14.500 --> 11:15.500
default

11:15.500 --> 11:16.500
propt

11:16.500 --> 11:18.500
它一个属性值就是那个win

11:18.500 --> 11:20.500
当什么时候

11:20.500 --> 11:21.500
添加主色

11:21.500 --> 11:22.500
这是一个布尔

11:22.500 --> 11:24.500
它默认为force

11:24.500 --> 11:25.500
默认为force

11:25.500 --> 11:26.500
那么还有一个属性

11:26.500 --> 11:28.500
还有一个属性是message

11:28.500 --> 11:29.500
message

11:29.500 --> 11:31.500
它默认有一个空置布串

11:31.500 --> 11:32.500
什么意思呢

11:32.500 --> 11:33.500
这个组件什么意思呢

11:33.500 --> 11:34.500
它表示

11:34.500 --> 11:35.500
当win

11:35.500 --> 11:38.500
去的时候

11:38.500 --> 11:40.500
添加主色

11:40.500 --> 11:41.500
这里呢

11:41.500 --> 11:43.500
当

11:43.500 --> 11:45.500
主色时

11:45.500 --> 11:48.500
跳转页面的提示消息

11:48.500 --> 11:51.500
就写这么两个属性就完成了

11:51.500 --> 11:52.500
所以说

11:52.500 --> 11:53.500
我们要不要添加主色

11:53.500 --> 11:54.500
是不是又可以写个函数

11:54.500 --> 11:55.500
handle

11:55.500 --> 11:56.500
block

11:56.500 --> 11:57.500
又可以写个函数

11:57.500 --> 11:58.500
好

11:58.500 --> 11:59.500
这个函数

11:59.500 --> 12:00.500
做什么事情呢

12:00.500 --> 12:02.500
我就根据这个win的值

12:02.500 --> 12:03.500
就是我的属性win的值

12:03.500 --> 12:05.500
来决定要不要添加主色

12:05.500 --> 12:06.500
判断一下吧

12:06.500 --> 12:07.500
如果说属性里边

12:07.500 --> 12:08.500
win的值

12:08.500 --> 12:10.500
we true

12:10.500 --> 12:11.500
干嘛

12:11.500 --> 12:12.500
是不是要添加主色

12:12.500 --> 12:13.500
我们这里添加主色

12:13.500 --> 12:14.500
就把它写过来

12:14.500 --> 12:15.500
写过来

12:15.500 --> 12:17.500
写过来就完成了

12:17.500 --> 12:18.500
那么我们把这个message

12:18.500 --> 12:19.500
传过去

12:19.500 --> 12:20.500
把这个message传过去

12:20.500 --> 12:21.500
this

12:21.500 --> 12:22.500
propt.message

12:22.500 --> 12:23.500
当这个message

12:23.500 --> 12:24.500
也可以是个函数

12:24.500 --> 12:25.500
因为我们知道

12:25.500 --> 12:26.500
这个block里面

12:26.500 --> 12:27.500
是不是可以写函数

12:27.500 --> 12:28.500
写函数

12:28.500 --> 12:29.500
函数返回的结果

12:29.500 --> 12:34.500
作为消息

12:34.500 --> 12:36.500
那么如果有值的话

12:36.500 --> 12:38.500
就添加主色就完了

12:38.500 --> 12:39.500
else

12:39.500 --> 12:41.500
如果说没有值的话

12:41.500 --> 12:42.500
没有值的话

12:42.500 --> 12:43.500
是不是

12:43.500 --> 12:44.500
就是这样子

12:44.500 --> 12:45.500
解除主色

12:45.500 --> 12:47.500
就完了

12:47.500 --> 12:48.500
没了

12:49.500 --> 12:50.500
然后当然

12:50.500 --> 12:51.500
还有一件事情就是

12:51.500 --> 12:53.500
首先一些生命责任函数

12:53.500 --> 12:55.500
主建首次加载的时候

12:55.500 --> 12:56.500
component d的mount

12:56.500 --> 12:58.500
那是不是要做一次这个事情

12:58.500 --> 12:59.500
一开始要不要添加主色

12:59.500 --> 13:00.500
你是不是得做一下

13:00.500 --> 13:01.500
对不对

13:01.500 --> 13:02.500
要做一下这个事情

13:02.500 --> 13:03.500
一开始要不要添加主色

13:03.500 --> 13:05.500
你就去完成

13:05.500 --> 13:07.500
你就去做这件事情

13:07.500 --> 13:09.500
另外呢

13:09.500 --> 13:11.500
当这个属性发生变化的时候

13:11.500 --> 13:12.500
是不是也要做

13:12.500 --> 13:13.500
这些都是副作用的操作

13:13.500 --> 13:14.500
我们把它写到

13:14.500 --> 13:17.500
component d的update里边

13:17.500 --> 13:19.500
component d的update里边

13:19.500 --> 13:21.500
那是不是也要做这件事情

13:21.500 --> 13:22.500
hand this

13:22.500 --> 13:23.500
handle block

13:23.500 --> 13:24.500
对吧

13:24.500 --> 13:25.500
属性值发生变化

13:25.500 --> 13:26.500
它也要做这件事情

13:26.500 --> 13:27.500
就完了

13:27.500 --> 13:28.500
这个主意就写完了

13:28.500 --> 13:29.500
那么外面的人呢

13:29.500 --> 13:30.500
外面呢

13:30.500 --> 13:31.500
就可以通过

13:31.500 --> 13:32.500
诶

13:32.500 --> 13:33.500
这是啥

13:33.500 --> 13:34.500
probis

13:34.500 --> 13:35.500
was used

13:35.500 --> 13:37.500
before it was defend

13:37.500 --> 13:38.500
哦

13:38.500 --> 13:39.500
我们写到这下面嘛

13:39.500 --> 13:40.500
写到这下面

13:40.500 --> 13:41.500
哦对

13:41.500 --> 13:42.500
既然是内主建

13:42.500 --> 13:43.500
我们是不是可以写到这里边

13:43.500 --> 13:44.500
对不对

13:44.500 --> 13:45.500
它说

13:45.500 --> 13:46.500
因为它是内嘛

13:46.500 --> 13:47.500
它是es6的东西

13:47.500 --> 13:48.500
它在这里定义之前

13:48.500 --> 13:50.500
它用这个是不能用的

13:51.500 --> 13:52.500
这里把它写过来

13:53.500 --> 13:54.500
好OK

13:54.500 --> 13:55.500
react这个标

13:55.500 --> 13:56.500
就完了

13:56.500 --> 13:57.500
这个主意就写完了

13:57.500 --> 13:58.500
好好看一下吧

13:58.500 --> 14:01.500
当属性wint為初的时候

14:01.500 --> 14:03.500
因为在这些关键的生命周期

14:03.500 --> 14:04.500
函数里边

14:04.500 --> 14:05.500
我们都去调用这个方法

14:05.500 --> 14:07.500
当这个wint为初的时候

14:07.500 --> 14:08.500
是不是

14:08.500 --> 14:09.500
它这里调用这个方法的时候

14:09.500 --> 14:10.500
是不是添加到组设

14:10.500 --> 14:11.500
对吧

14:11.500 --> 14:12.500
到时候肯定要提示这个消息

14:12.500 --> 14:13.500
如果说

14:13.500 --> 14:15.500
will amount

14:15.500 --> 14:17.500
那么

14:17.500 --> 14:19.500
如果它为force的时候呢

14:19.500 --> 14:20.500
调用这个函数

14:20.500 --> 14:22.500
是不是它就把组设取消掉了

14:22.500 --> 14:23.500
对不对

14:23.500 --> 14:24.500
就通过这个人来控制

14:24.500 --> 14:25.500
写出这么一个主建

14:25.500 --> 14:27.500
那有了这么一个主建之后呢

14:27.500 --> 14:29.500
我们再回到这个

14:29.500 --> 14:30.500
配级二里边

14:30.500 --> 14:31.500
你看一下怎么来做

14:31.500 --> 14:32.500
就不要这个玩意儿了

14:32.500 --> 14:33.500
就不要这个玩意儿了

14:33.500 --> 14:35.500
也不要这个玩意儿了

14:35.500 --> 14:36.500
对吧

14:36.500 --> 14:37.500
因为有一个公用的

14:37.500 --> 14:38.500
通用的主建可以解决这个问题

14:38.500 --> 14:39.500
propt

14:39.500 --> 14:40.500
propt

14:40.500 --> 14:41.500
要写杠

14:41.500 --> 14:42.500
propt

14:43.500 --> 14:44.500
导致这个主建

14:44.500 --> 14:45.500
好

14:45.500 --> 14:46.500
来吧

14:46.500 --> 14:47.500
这个主建随便放

14:47.500 --> 14:48.500
放了一个地方

14:48.500 --> 14:49.500
这不显示东西的

14:49.500 --> 14:50.500
它就有两个属性

14:50.500 --> 14:51.500
一个是win

14:51.500 --> 14:52.500
到底

14:52.500 --> 14:53.500
要不要组设呢

14:53.500 --> 14:54.500
要不要组设

14:54.500 --> 14:55.500
是不是取决这个

14:55.500 --> 14:56.500
var

14:56.500 --> 14:57.500
对不对

14:57.500 --> 14:58.500
取决于什么

14:58.500 --> 14:59.500
var

14:59.500 --> 15:01.500
是不是不等于

15:01.500 --> 15:02.500
控制无处

15:02.500 --> 15:03.500
对吧

15:03.500 --> 15:04.500
是不是不等于

15:04.500 --> 15:05.500
thisState.var

15:05.500 --> 15:06.500
不等于控制无处

15:06.500 --> 15:07.500
只要它不等于

15:07.500 --> 15:08.500
控制无处

15:08.500 --> 15:09.500
所以要组设

15:09.500 --> 15:10.500
然后呢

15:10.500 --> 15:11.500
一个message

15:11.500 --> 15:13.500
有一个错误消息

15:13.500 --> 15:14.500
就是

15:15.500 --> 15:16.500
别乱来

15:16.500 --> 15:17.500
别乱来

15:17.500 --> 15:20.500
会导致数据丢失

15:20.500 --> 15:21.500
真的

15:21.500 --> 15:22.500
要挑转吗

15:22.500 --> 15:23.500
随便写个吧

15:23.500 --> 15:24.500
保存

15:24.500 --> 15:25.500
你看一下

15:26.500 --> 15:27.500
现在那一面二

15:27.500 --> 15:28.500
我们这里

15:29.500 --> 15:30.500
不靠

15:30.500 --> 15:32.500
I cannot read the property

15:32.500 --> 15:34.500
block of undefend

15:34.500 --> 15:37.880
明白了

15:37.880 --> 15:38.880
明白了

15:38.880 --> 15:39.880
因为这个propt

15:39.880 --> 15:41.880
它是里面的一个

15:41.880 --> 15:42.880
植住建

15:42.880 --> 15:43.880
懂我意思吗

15:43.880 --> 15:44.880
它里面是没有什么

15:44.880 --> 15:45.880
history这个东西的

15:45.880 --> 15:46.880
对吧

15:46.880 --> 15:47.880
所以干嘛

15:47.880 --> 15:48.880
应该干嘛

15:48.880 --> 15:49.880
是不是要包装一下

15:49.880 --> 15:50.880
对吧

15:50.880 --> 15:51.880
export

15:51.880 --> 15:53.880
把wasterotor传进来

15:53.880 --> 15:54.880
要包装一下

15:54.880 --> 15:56.880
这些都是小问题

15:57.880 --> 15:58.880
我写的比较快

15:58.880 --> 15:59.880
因为这个东西很简单

15:59.880 --> 16:01.880
没什么好说的

16:01.880 --> 16:03.880
你觉得这个东西很复杂吗

16:04.880 --> 16:05.880
就是

16:06.880 --> 16:07.880
拿了

16:07.880 --> 16:08.880
propt

16:08.880 --> 16:10.880
包装一下吧

16:10.880 --> 16:11.880
好了

16:11.880 --> 16:12.880
写完了

16:12.880 --> 16:13.880
再来

16:13.880 --> 16:14.880
一面二写东西

16:14.880 --> 16:15.880
为何

16:15.880 --> 16:17.880
the handle block is not a function

16:17.880 --> 16:18.880
我看一下

16:20.880 --> 16:21.880
这里

16:21.880 --> 16:22.880
这里

16:22.880 --> 16:23.880
还有这句话

16:23.880 --> 16:24.880
这句话没去了

16:24.880 --> 16:25.880
这句话没去了

16:25.880 --> 16:26.880
不要了

16:26.880 --> 16:27.880
保存

16:27.880 --> 16:28.880
看一下

16:28.880 --> 16:29.880
一面二写东西

16:29.880 --> 16:30.880
写完了过

16:30.880 --> 16:31.880
跳到一面一是不是有组色

16:31.880 --> 16:32.880
对吧

16:32.880 --> 16:33.880
你看

16:33.880 --> 16:34.880
是不是有组色

16:34.880 --> 16:35.880
取消就跳不过去

16:35.880 --> 16:36.880
如果没有写东西的话

16:36.880 --> 16:37.880
跳过去是不是没问题

16:37.880 --> 16:38.880
就这么简单

16:38.880 --> 16:39.880
你写到一个通用的组件了

16:39.880 --> 16:40.880
对吧

16:41.880 --> 16:42.880
这个组件你得会写

16:42.880 --> 16:44.880
因为这种基本的

16:44.880 --> 16:45.880
这种简单的组件

16:45.880 --> 16:46.880
你得会写

16:46.880 --> 16:47.880
不然那些学了半天

16:47.880 --> 16:48.880
学Rat

16:48.880 --> 16:49.880
你自定义组件这些

16:49.880 --> 16:50.880
做一些功能效果出来

16:50.880 --> 16:52.880
做一些通用的组件都不会写

16:52.880 --> 16:53.880
那学了半天在学啥呢

16:53.880 --> 16:55.880
我讲了半天我在讲啥呢

16:55.880 --> 16:56.880
你得会写

16:56.880 --> 16:57.880
这就再一次说

16:57.880 --> 16:59.880
我不厌其烦的说这个问题

16:59.880 --> 17:00.880
我课堂上讲的东西

17:00.880 --> 17:01.880
你一定要去练一遍

17:01.880 --> 17:02.880
你练了过后

17:02.880 --> 17:03.880
你自然而然

17:03.880 --> 17:04.880
慢慢就熟悉这些API了

17:04.880 --> 17:06.880
熟悉这些做法了

17:06.880 --> 17:07.880
你不练的话

17:07.880 --> 17:08.880
始终感觉是深述的

17:08.880 --> 17:09.880
对吧

17:09.880 --> 17:10.880
那么现在我告诉你

17:10.880 --> 17:11.880
这个propt是组件

17:11.880 --> 17:12.880
你不用自己做

17:12.880 --> 17:14.880
你不用自己做

17:14.880 --> 17:15.880
再复制一个

17:15.880 --> 17:17.880
因为他已经做好了

17:17.880 --> 17:18.880
在哪里一做好了

17:18.880 --> 17:20.880
他在react

17:20.880 --> 17:21.880
rotor动里面

17:21.880 --> 17:23.880
他已经带到这个组件了

17:23.880 --> 17:24.880
叫做propt

17:24.880 --> 17:25.880
你这个一模一样

17:25.880 --> 17:27.880
就是propt的组件

17:27.880 --> 17:28.880
用法一模一样

17:28.880 --> 17:29.880
一点区别都没有

17:29.880 --> 17:30.880
就跟我们刚才自己写的

17:30.880 --> 17:31.880
一点区别都没有

17:31.880 --> 17:32.880
保存你直接看一下

17:32.880 --> 17:33.880
直接看一下

17:33.880 --> 17:37.320
现在换成这个组件了

17:37.320 --> 17:38.320
是不是一样的

17:38.320 --> 17:39.320
对吧

17:39.320 --> 17:40.320
没有就可以跳出来

17:40.320 --> 17:41.320
就这么简单

17:41.320 --> 17:42.320
就这么简单

17:42.320 --> 17:43.320
看到没

17:43.320 --> 17:45.320
就是你可以自己写

17:45.320 --> 17:46.320
也可以用他的

17:46.320 --> 17:47.320
当然肯定是用他的

17:47.320 --> 17:48.320
干嘛要自己写

17:48.320 --> 17:49.320
我只是自己写

17:49.320 --> 17:50.320
只是告诉你

17:50.320 --> 17:51.320
这个组件是很简单的

17:51.320 --> 17:53.320
自己写一点难度都没有

17:53.320 --> 17:54.320
当然了

17:54.320 --> 17:55.320
这个组件他依托

17:55.320 --> 17:56.320
依赖于什么

17:56.320 --> 17:58.320
依赖于这个地方

17:58.320 --> 18:00.320
依赖于这个

18:00.320 --> 18:01.320
这个地方

18:01.320 --> 18:02.320
get it

18:02.320 --> 18:03.320
confer

18:03.320 --> 18:04.320
没写

18:04.320 --> 18:05.320
那如果这个地方啥都没写

18:05.320 --> 18:06.320
或者是你写的别的

18:06.320 --> 18:07.320
他还有提示吗

18:07.320 --> 18:08.320
你告诉我他还有提示

18:08.320 --> 18:09.320
还能用提示吗

18:09.320 --> 18:10.320
是没了

18:10.320 --> 18:11.320
是没提示

18:11.320 --> 18:12.320
他会用这个地方的

18:12.320 --> 18:13.320
就是你一个东西

18:13.320 --> 18:14.320
你不但要会用

18:14.320 --> 18:16.320
还要知道他的原理是什么

18:16.320 --> 18:19.320
你这个东西肯定不行了

18:19.320 --> 18:21.320
因为他就是给你添加主色

18:21.320 --> 18:23.320
好其他没啥了

18:23.320 --> 18:25.320
下去写一遍

18:25.320 --> 18:26.320
下去写一遍

18:26.320 --> 18:27.320
你在自己会写

18:27.320 --> 18:29.320
同时你要

18:29.320 --> 18:30.320
会用他的

18:30.320 --> 18:31.320
但你自己会写过后

18:31.320 --> 18:32.320
一定会用他的

18:32.320 --> 18:33.320
一模一样的用法

18:33.320 --> 18:34.320
没有任何区别

18:34.320 --> 18:35.320
这是关于

18:35.320 --> 18:37.320
调整页面的提示

