WEBVTT

00:00.000 --> 00:09.760
上期课怎么学习到了Redux和React之间如何来结合

00:09.760 --> 00:13.320
Redux它提供了数据及数据的处理

00:13.320 --> 00:15.040
但是它没有界面

00:15.040 --> 00:17.040
Redux它提供了界面

00:17.040 --> 00:21.560
但是它没有对数据的处理提供一种优质的解决方案

00:21.560 --> 00:23.780
因此这两种东西需要结合

00:23.780 --> 00:24.400
怎么结合呢

00:24.400 --> 00:27.080
就使用一个第3方库叫Redux Redux

00:27.080 --> 00:29.720
这个库我们也自己写的元代

00:29.720 --> 00:33.880
对吧 不过那个是扩展课程 就算你没有听 也不会影响后边的学习

00:34.520 --> 00:41.080
那么这几课我们开始来学啥呢 我们现在呢 之前学过reactor 也学过那个reactor rotor 对吧

00:41.400 --> 00:45.560
那么这几课呢 我们来看一下 rotor 这个东西能不能跟那个redux结合

00:46.440 --> 00:55.000
咱们这个分支的话 我们就从这里导出吧 因为这个9-3和9-4呢 它是两节课呢 都是扩展课程啊 我们就从9-2啊导出

00:55.960 --> 01:01.640
呃 来吧 给 呃 先先check out 到9-2

01:03.480 --> 01:06.440
复制一下啊 好 它先回到9-2

01:07.240 --> 01:14.680
咱们这个做的是查询学生 对吧 然后呢 我们再从这里去建一个分支啊 新建个分支9-5了 对吧

01:15.400 --> 01:20.600
那么这一节课咱们学到第三方库呢 还是名字叫做connect 名字很长啊 名字很长

01:21.160 --> 01:29.800
啊 我们干脆换个中文嘛 叫叫做redux和rotor和rotor之间的结合啊 咱们一回说啊 新建这么一个分支

01:30.520 --> 01:35.800
好 那么在这个分支里边我们的进行操作啊 这个其实我们这一课呢 就学习的是redux

01:37.160 --> 01:45.800
和rotor的结合啊 那么它这里会使用到一个第三方库啊 什么第三方库呢 叫做名字叫做connect

01:46.760 --> 01:48.040
negative

01:49.960 --> 01:58.360
reactrotor啊 这库的名字叫connected connected是什么意思啊 就连接对吧 我们之前用那个react和redux连接对不对 连接

01:58.760 --> 02:06.440
好 那么这个连接呢 其实是隐含了跟数据之间连接的意思 那么后边呢 写上那个reactrotor表示的是 连接的是什么呢

02:06.680 --> 02:11.240
把redux里边的数据连接到rotor里边啊 就写了这么就这么一个东西啊

02:12.040 --> 02:17.160
在讲这个 在讯写的讲这个东西之前呢 我这里要介绍一个小的知识啊

02:17.480 --> 02:24.200
这个知识呢 我再不介绍的话 我就后面我就不知道差到哪去了啊 我刚刚介绍一个小知识就是安装一个

02:25.560 --> 02:29.640
啊 这个这个知识呢 还跟这几颗无关啊 我在课前介绍一个小知识啊

02:30.840 --> 02:36.840
课前知识 这个地方呢 就是我们要使用一个就是谷歌的插件啊chrome

02:37.880 --> 02:38.200
插件

02:38.440 --> 02:40.920
什么插件呢 叫做redux

02:42.280 --> 02:42.840
dev2

02:43.560 --> 02:48.520
dev2s啊 使用这么一个插件这个插件呢 我这边呢 已经安装好了啊 在这

02:49.160 --> 02:50.280
啊 就是redux

02:50.280 --> 02:55.800
看呗啊 你们能看见啊 redux devtools啊 就是一个调试工具

02:56.360 --> 03:03.640
嗯 这个东西呢 需要到谷歌的应用商店里边去安装啊 谷歌的应用商店点这里更多工具 然后呢 这里有个

03:04.200 --> 03:04.680
呃

03:05.400 --> 03:15.720
扩展程序啊 扩展程序 然后呢 这边啊 在菜单里边这里从点字啊 打开谷歌网上应用商店啊 当然呢 你这个东西得科学上网

03:16.040 --> 03:23.480
那怎么科学上网呢 我在视频里边就不好说了啊 科学上网的话 大家自己去摆度一下啊 方法有很多的 你得想想办法

03:24.040 --> 03:32.680
呃 如果说你实在没办法 科学上网的话 那么你可以去收一下国内的啊 就是谷歌应用商店啊 谷歌

03:33.640 --> 03:36.360
浏览器插件啊 插件

03:38.120 --> 03:45.080
好像是这个网站啊 呃 第一个我们看一下啊 第一个 在这里看一下能不能收出来啊 redux

03:46.200 --> 03:51.050
收一下啊 收一下看一下能不能收出来 收索

03:52.330 --> 04:01.050
啊 就这个啊 你看一下吧 你自己去在这个网站上去去操作一下啊 操作一下 但是你得小心一下 看一下有没有病毒啊 有没有病毒

04:01.450 --> 04:05.050
嗯 因为他这个毕竟不是官网

04:09.960 --> 04:22.470
本地下载页面 呃 还要他要让你去关注一个公众号啊 可能麻烦麻烦一点啊 如果你没发科学上网的话 可能麻烦一点 你至于你想想办法

04:22.710 --> 04:27.030
总之呢 你最终得安装一个谷歌的调词插件 名字叫做dark step tools

04:27.990 --> 04:34.390
好 安装了之后呢 就先说这样 这个小知识啊 安装了之后呢 他还不能立即使用 咱们来看一下吧

04:34.870 --> 04:37.990
我们这里 啊 这里我们进入啊 redux reanor

04:39.030 --> 04:45.270
然后呢 启动起来 啊 如果说你的 只要你的工程里边 只要你的工程里边去应用了

04:45.350 --> 04:53.270
redux 那他怎么知道你应用了呢 他是这样子 他看你的就是启动里边 你的组件里边呢 他有没有这个玩意

04:53.670 --> 04:55.030
就是有没有那个就是

04:55.910 --> 04:56.230
在这

04:57.350 --> 05:04.150
他看你的组件里边 有没有使用这个玩意 provider 如果你使用这个玩意的话 表示你的rex里边去安装了

05:04.150 --> 05:09.830
那就是redux啊 去使用了redux 所以说呢 他可以进行调试啊 对仓库里边的东西进行调试

05:10.310 --> 05:11.830
然后呢

05:12.790 --> 05:14.790
module that's found 它说

05:16.230 --> 05:22.230
找不到src地址 什么意思 找不到rex learn

05:23.750 --> 05:28.470
src app.js里边

05:31.140 --> 05:33.140
src.app.js

05:33.620 --> 05:40.500
他说找不到rex redux 他说找不到rex redux 哎 我这里不是安装了吗

05:42.340 --> 05:44.500
rex redux 不然安装了吗

05:44.980 --> 05:48.180
啊 我们这里重新安装一下吧啊 因为这个分支切来切去

05:48.740 --> 05:53.620
有可能到一些东西搞丢了啊 这里重新安装一下吧 12add redux

05:54.180 --> 05:54.900
rex

05:56.660 --> 05:58.100
redux 重新安装一下啊

06:01.290 --> 06:08.170
我们把启动起来啊 把工程启动起来 启动起来之后呢 我们来看一下啊 能不能用这个玩意儿啊 实际上我这里就直接说了吧

06:08.650 --> 06:13.530
他是不能用的啊 这个插件他是不能不能直接使用的 因为他还需要你做一件事

06:13.850 --> 06:18.490
什么事呢 你得去安装一个第三方库啊 浏览器才能够识别出来

06:19.050 --> 06:24.570
那么安装什么样的第三方库了 这个第三方库的名字呢 就第一步啊 你得去安装一个谷歌插件

06:25.210 --> 06:31.370
安装的谷歌插件过后来都插件的还不能生效 你需要安装一个第三方库 这个第三方库的名字叫做redux

06:33.290 --> 06:34.810
deb tools

06:35.610 --> 06:40.570
deb tools extensions啊 就这个 一个tension 就这个库啊

06:41.770 --> 06:45.530
就这个库 给他复制一下吧 第一步呢 就是安装一个

06:46.810 --> 06:53.130
谷歌插件 名字叫这个啊 第二步呢 就是你得去安装一个第三方库啊 使用

06:53.850 --> 06:55.290
npn安装

06:56.170 --> 07:01.850
第三方库 就这个库啊 然后呢 才能去使用 好 咱们来安装一下啊

07:02.570 --> 07:03.610
一样add

07:04.570 --> 07:05.050
复制一下

07:06.010 --> 07:11.130
就照他说的做就行了 这这个东西无非就是个调试工具啊 我也不想起说了 就是看怎么用就行了啊

07:11.450 --> 07:12.250
大概看一下怎么用

07:13.050 --> 07:16.730
啊 让他安装 安装好了过后呢 我们来看一下他的说明啊

07:17.210 --> 07:20.170
你要稍微的改动那么一丢丢带嘛

07:20.890 --> 07:26.810
怎么改动了 改动方式特别特别简单 改动了方式的话 那就是啊 你

07:27.930 --> 07:33.770
导入啊 从这个玩意儿 从这个库里边导入一个方法 叫做compose with devtools

07:34.170 --> 07:35.850
导入这么一个方法 一个函数

07:36.330 --> 07:40.890
然后呢 你在应用中间键的时候呢 你在应用中间键的时候呢

07:41.130 --> 07:45.290
把 给他函数外面套一套一个啊 套一个就行了

07:45.610 --> 07:48.090
啊 你在应用中间键的时候 外面套一个这个东西

07:48.330 --> 07:50.090
compose with devtools

07:50.410 --> 07:55.850
套一个这么一个东西就完事了 好吧 那咱们就来吧 来吧 这一块也很简单啊

07:56.410 --> 08:01.450
我们这里导入 import from redux devtools

08:02.010 --> 08:06.410
extension 啊 这东西其实我刚才安装的时候都有点问题啊 都不应该是用那个

08:06.970 --> 08:11.850
呃 默认的方式安装 应该是用那个开发依赖啊 把它做成开发依赖

08:11.850 --> 08:14.090
因为它只在开发的阶段 它有 才有意义

08:14.730 --> 08:18.890
啊 没事啊 没事 你管他的吧 我们这里导入啊 导入进来

08:19.530 --> 08:20.970
compose with devtools

08:21.210 --> 08:25.690
好 那么我们在应用这个中间键的时候呢 把它包装一下啊 用这个函数把包装一下

08:26.570 --> 08:30.490
啊 做完了啊 就这么简单啊 把这个删了 就完了 包存

08:30.810 --> 08:32.170
好 那我们现在启动起来

08:32.490 --> 08:33.210
ear start

08:34.410 --> 08:35.210
好 启动起来

08:38.090 --> 08:39.290
好 稍等一下啊

08:40.970 --> 08:46.490
好 启动起来了啊 咱们来看一下这个 dev redux里边它的这个调词工具

08:46.650 --> 08:52.410
咱们大开看一下 因为我们后边讲那个rotl的时候呢 还要用到这个调词工具啊

08:52.650 --> 08:58.730
就是用不用 不用它的切式也行 我们自己在代码里边输出 对吧 也行啊 用它的话方便一点

08:59.130 --> 09:02.410
啊 咱们点开这个调词工具看一下啊 看一下它里边是啥

09:03.290 --> 09:08.570
嗯 其实这个地方呢 它已经显示的非常非常清楚了啊 左边呢 它就是我们触发的x

09:09.210 --> 09:10.650
啊 我们触发哪些x

09:11.610 --> 09:15.850
啊 最开始第一个呢 就是第一个触发的x 第一个触发的x是不是

09:15.930 --> 09:21.850
我们之前说过 是一个特殊的x 是就是inlet 对吧 一开始呢这个redux呢 还会先触发一次这个x

09:22.090 --> 09:25.770
就是inlet 进行初始化 初始化数据 这是个特殊的x

09:26.410 --> 09:32.650
然后后边呢 就是我们自己触发的x 那么它这里的文字显示的是啥呢 显示的是这个x的名称

09:33.050 --> 09:36.090
啊x的名称 但是呢 为什么后边是undefended呢

09:36.490 --> 09:39.610
因为我们用的是symbol 而不是一个字母创啊 如果说

09:40.090 --> 09:42.970
按照flux标准把它改成一个字母创的话 那么就

09:43.290 --> 09:48.810
就可以看得很清楚了啊 我们比方说把它用变成一个字母创啊 变成一个字母创 increase

09:49.370 --> 09:52.570
啊 稍微改一下啊 只确改这儿就行了

09:53.850 --> 09:55.770
在这里 async increase

09:56.410 --> 09:56.970
async

09:58.570 --> 09:59.770
increase

10:00.490 --> 10:01.130
increase

10:01.610 --> 10:03.210
啊 这里呢 async decrease

10:03.930 --> 10:04.490
async

10:06.010 --> 10:08.010
decrease

10:08.650 --> 10:11.130
好 然后呢 student 里边我们也稍微改一下

10:14.070 --> 10:14.550
change

10:15.270 --> 10:17.430
好 这边也稍微的改一下

10:18.870 --> 10:20.390
set students and total

10:20.950 --> 10:21.350
set

10:23.270 --> 10:24.070
students

10:24.870 --> 10:26.310
and total

10:27.110 --> 10:30.550
好 这边是set is loading啊 这是标准够是flux

10:31.830 --> 10:32.550
exination

10:33.270 --> 10:34.390
这是set

10:35.510 --> 10:36.950
is loading

10:37.510 --> 10:39.270
好 这边呢是fetch students

10:39.910 --> 10:40.310
fetch

10:41.670 --> 10:42.230
students

10:42.790 --> 10:44.710
好了啊 保存 重新来一次啊

10:45.830 --> 10:49.510
好 你看到没 那左边是不是x的类型 对吧 还显示x的类型

10:49.990 --> 10:55.910
对吧 并且呢他这里会显示出每一个x呢他的他的执行啊 被reducer执行

10:56.150 --> 10:58.470
他触发了多少时间啊 多少时间

10:59.270 --> 11:05.270
他这里的是0.48毫秒对吧 0.01毫秒 0.05毫秒

11:05.510 --> 11:10.230
那么上边呢是我们的就是那个目前的时间啊 目前的时间

11:10.550 --> 11:11.990
目前的时间呢就是6

11:12.550 --> 11:14.550
6.18分59秒啊

11:15.270 --> 11:16.470
59.26秒

11:16.950 --> 11:18.630
看呗啊 他就是这么一种格式

11:19.750 --> 11:21.030
好 那么现在呢我们呢

11:22.470 --> 11:23.670
看一下啊 看一下这边

11:25.430 --> 11:28.150
看一下这边 这边是什么呢 这边是div

11:28.870 --> 11:36.230
div什么意思呢 就是就是我到他这个x啊 他导致的我们仓库里边的数据哪些地方发生了变化

11:36.870 --> 11:39.110
啊 哪些地方发生了变化 比方说我们找到init

11:39.430 --> 11:43.190
init啊 那么这个他说 状态没有发生什么变化 我们看这里

11:43.430 --> 11:46.950
非就students的状态也没有发生变化 因为这个是个副作用 是sacra在处理

11:47.110 --> 11:50.630
并没有他没有的直接导致状态的变化 然后我们这看这啊

11:50.870 --> 11:55.830
set is loading 触发这个x 醒过后呢 我们可以看得很清楚导致了这个students

11:56.150 --> 11:59.270
这里边的results 这里边的is loading发生了变化

11:59.670 --> 12:03.910
好 那么这个呢 他导致了students里边results他的数据发生了变化

12:04.230 --> 12:09.030
好 然后呢这里set is loading了 他又会导致students results里边 is loading发生变化

12:09.270 --> 12:13.750
看呗 然后我们在这里点击 比方说查询啊 选择蓝 然后再点查询

12:13.990 --> 12:18.790
哎 我们把这个 看一下能不能能不能固定啊 看一下能不能固定

12:19.510 --> 12:23.030
呃 open in the panel okay

12:24.550 --> 12:30.390
我们来这啊 在这个窗口里边打开啊 打开一个新的窗口 这样子呢他就不会消失了啊

12:31.110 --> 12:35.670
好 我们在这边对照看一下啊 那么现在呢我们把这个说小一点

12:36.630 --> 12:39.430
现在我们这里查询啊 查询里点查询

12:40.230 --> 12:44.950
好 你看一下是不是又触发了一些x 首先触发这个x change 对吧 change

12:45.670 --> 12:48.310
然后呢 我们这里的change 我们导致了这个

12:48.550 --> 12:53.430
convection发生的变化 然后又触发飞起students 又触发这个又触发这个对吧 又触发这个

12:53.750 --> 12:59.830
他就会把记录我们所有的x 的就是这些时间啊 这些时间他都会记录下来

13:00.790 --> 13:05.830
原来的意思吧 好 然后呢 我们这里还可以看到很多东西 很多信息啊 比方说我们的状态

13:06.070 --> 13:11.670
就在这个x 的时候呢 触发了之后呢 他的状态是什么啊 可以看到很清楚 然后触发这个x

13:12.870 --> 13:17.350
我看一下啊 change 看一下这个

13:18.950 --> 13:19.590
convection

13:20.710 --> 13:21.510
这个是为一

13:22.790 --> 13:28.390
啊 你看这里不同的x 触发了之后啊 触发了之后 那么他的状态是什么

13:28.470 --> 13:32.310
我们都可以在这边点击 可以看到很清楚啊 都可以点击 看到很清楚

13:32.630 --> 13:39.750
看没啊 这是状态啊 然后这边就是一个完整的x 完整的x 他触发的x是什么

13:39.910 --> 13:45.910
你看有这样的调整工具过后 以后呢 数据出了问题 是不是我们就非常非常清楚数据哪个地方出了问题 对吧

13:46.230 --> 13:52.790
哪个地方出了问题就非常清楚 而且呢 这里我们还可以做什么事情呢 比方说我们这里点击一下这个

13:53.590 --> 13:57.670
不是啊 jump 啊 点击jump 就是挑转到这个x

13:58.230 --> 14:05.510
那么我们回 回到这个x的时候 就可以做一些时间旅行 我们回到这个x的时候 他触发完了过后的状态

14:05.990 --> 14:12.470
会导致见面发生哪些变化 我们可以看到非常非常清楚 那么这个这个x出发了过后呢 我们可以看到他状态是什么

14:12.710 --> 14:18.470
啊 可以分析数据 分析界面 看哪个地方有问题啊 可以点击jump 来挑转到这个x

14:18.870 --> 14:22.630
啊 不要说我们 哎 完事了啊 完事了 我们挑回来啊 挑最后一个

14:22.870 --> 14:27.910
jump 看呗 我们就可以分析每一个数据状态 这也是瑞大克斯的初衷

14:28.310 --> 14:35.030
他初衷的就是我希望每一个数据状态呢 能够被能够是可以调试的 是可以跟踪的 是可以分析的

14:35.510 --> 14:39.270
那这意思吧 咱们就可以啊 利用这种方式啊

14:40.230 --> 14:44.070
来进行调试啊 后面呢 我们学习那个一些

14:44.470 --> 14:48.870
第三方库的时候呢 或者是分析一些数据的时候呢 我们会都会用类似的方式

14:49.270 --> 14:54.310
不过呢 这个玩意啊 他的他的这个就是有点小啊

14:55.510 --> 15:01.030
就是有点小他这个文字能不能把它放大一点啊 我看一下能不能放大一点

15:03.480 --> 15:08.520
好像真放不大呀 这个玩意啊 我在这里啊 这样子可以放大一点

15:09.080 --> 15:10.440
ok啊 这样子可以放大

15:11.640 --> 15:15.480
啊 这样子可以放大啊 咱们调试一下就很方便了 看呗 触发哪一个型

15:16.360 --> 15:18.360
好 我们这里把窗口放这吧 放这

15:19.160 --> 15:25.480
那么这里的康佩城的就是啊 相当于是一个清空啊 清空 那么后边呢 在重新跟踪啊 比如说我们在在查

15:25.560 --> 15:30.360
查询补线啊 对吧 重新跟踪还没 重新跟踪啊 这是关于这个

15:31.000 --> 15:33.320
插件啊 我们在上课之前先讲一下这个东西

15:33.960 --> 15:34.680
非常的好用

15:35.480 --> 15:39.000
好 接下来我们就进入正体了啊 我们的正体呢 是学习这个玩意

15:39.480 --> 15:44.920
connectedreactsrotor啊 就是用他这个库用的干嘛的啊 这个库用于

15:45.080 --> 16:01.320
用于将redux和reactsrotor进行结合 为什么要结合呢 是这里我们首先分析一下原因啊 咱们的rotor他为什么要跟redux结合呢

16:02.040 --> 16:06.440
是因为本质商呢 本质商的技巧啊

16:07.880 --> 16:14.520
rotor中的某些数据 数据可能会跟

16:15.640 --> 16:17.800
数据仓库啊

16:19.080 --> 16:23.880
中的数据进行联动

16:24.840 --> 16:29.000
进行联动 就是说rotor里边某些数据比方说目前的地址

16:29.480 --> 16:37.160
咱们浏览器里面目前的地址啊 地址里面附带的什么query啊 附带的什么paras啊 对吧 这些参数信息啊

16:38.120 --> 16:45.960
他可能会呢 跟redux里面的数据呢 进行联动 比方说当我们地址改变的时候 哎 我要干嘛呢 我可能要重新去获取一些

16:46.520 --> 16:53.800
一些学生数据啊 这是一个原因 另外一个原因呢 是rotor里边他本来就是数据 对吧

16:54.200 --> 16:57.400
比方说我们这里呢 做了一些跳转 做了一个动作 比方说push

16:57.640 --> 17:03.960
我们用push这个动作呢 进行的跳转页面 那么push这个信息呢 其实他也是属于数据的一部分

17:04.200 --> 17:13.720
我们可能呢 希望在仓库中也能得到反应啊 在仓库里边呢 我们也能像使用一个普通仓库里边的数据那样子去使用一个

17:14.440 --> 17:17.000
rotor里边的数据 总之呢 我们要做的事情就是

17:17.640 --> 17:21.240
要把rotor的数据呢 装到仓库里边啊 叫做这么一件事

17:22.200 --> 17:28.680
那么rotor里边有什么样的数据呢 有什么样的数据呢 我们要回顾一下以前我们学rotor的时候

17:29.000 --> 17:34.920
那个数据呢 无非就是两个 一个是跳转跳转的动作 跳转的动作 咱们来看一下吧

17:35.960 --> 17:40.280
随便看一个啊 我们看一下哪些数据 我们希望把它放到窗户里边

17:41.080 --> 17:45.800
咱们来看一下 这里边呢 我们找到啊 这里rotor没了啊 没了

17:46.440 --> 17:50.760
配级数据里边 还有一些 还有一些就是

17:53.110 --> 18:00.150
哎 行了啊 行了 那既然还有一些页面啊 还有一些页面 我们这里呢就使用那个rotor给它进行

18:00.950 --> 18:05.990
对应 好 我们之前怎么用的 回顾一下啊 咱们稍微回顾一下rotor

18:06.710 --> 18:11.750
倒入 from 点斜缸啊 然后呢

18:14.950 --> 18:23.590
reactrotor动 这里边我们之前怎么用的 怎么用的 browser rotor对吧 给大家取个名字啊 rotor

18:23.910 --> 18:29.430
啊 或者就直接用browser rotor吧 然后呢还需要用什么 还需要用rot 对吧 还需要用rot

18:30.070 --> 18:35.670
啊 又需要用这么一些数据啊 需要用这么一些数据 好 那么这里呢 我们具体怎么去使用呢

18:36.150 --> 18:43.750
具体咋去使用呢 具体的使用方式呢 就是我们在这里呢 写上一个browser rotor

18:45.990 --> 18:51.830
browser rotor啊 browser rotor里边 我们根据不同的地址去匹配不同的

18:52.230 --> 18:57.750
组件 对不对 根据不同的地址去匹配不同的组件啊 咱们呢 这里我们看一下啊

18:58.630 --> 19:03.670
一个是otmin otmin里边他已经有匹配了啊 otmin里边已经有匹配了

19:03.910 --> 19:07.110
一个是otmin 一个是locking登入页 一个是

19:08.230 --> 19:13.990
啊 我们看一下 我要看 我要看有了 好 我们这里只需要匹配otmin啊 去只需要匹配otmin就行了

19:14.870 --> 19:19.510
otmin和locking就行了啊 那咱们来好 这里边呢 我们再导入

19:20.870 --> 19:26.220
一个是otmin from the pages

19:27.260 --> 19:35.100
otmin这个组件 然后呢 再去导入这个locking这个组件啊 就我们之前写的组件啊 之前咋写的其实都无所谓了啊 忘了也无所谓

19:35.180 --> 19:39.260
反正他是一个组件嘛 好 我们这里呢 使用road

19:40.460 --> 19:47.900
road 好 去匹配 一个是pass 对吧 路径 当我们访问这样的路径的时候 去匹配咋

19:48.300 --> 19:49.980
所以匹配component

19:51.020 --> 19:53.900
component 匹配咋 匹配otmin

19:54.540 --> 19:57.820
好 当我们访问 当我们去访问road

19:58.860 --> 20:02.860
pass为斜杠locking的时候呢 我们去匹配咋

20:03.580 --> 20:12.140
component 去匹配locking 对吧 去匹配locking 而且呢 如果说你匹配的上面就不要匹配下面了啊 这两个是互次的

20:12.220 --> 20:18.060
如果说前面匹配到了 后面就不要匹配了 因为我这里呢 没有用精确匹配 所以说他会能匹配到任何东西

20:18.460 --> 20:23.740
因此呢 为了避免前面匹配了 后边也匹配了 我用一个switch 啊 帮大家回顾一下啊

20:24.540 --> 20:26.540
switch就是个开关 他只能匹配一个

20:27.500 --> 20:29.900
ok 用switch 把包起来

20:31.020 --> 20:41.260
好 保存啊 保存 你看呀啊 那么现在学生列表啊 这些当前我们都是做了啊 对吧 哎 当时做的时候呢 好像这个链接啊 链接没有用live link

20:41.660 --> 20:47.580
啊 这里稍微把改一下啊 改成一改成live link 我们之前在拿下的拿下的呢

20:48.220 --> 20:51.260
嗯 而side是一个menu啊 一个menu组件

20:52.060 --> 20:57.420
这个menu组件里边呢 我们没有 我们用的是aues 对吧 好 这里导入啊 导入live link

20:59.260 --> 21:00.780
react

21:01.580 --> 21:02.540
rotor

21:02.540 --> 21:03.260
动

21:03.260 --> 21:05.740
好 这里边我们使用live link

21:06.940 --> 21:07.260
ok

21:09.580 --> 21:10.140
live link

21:11.660 --> 21:14.460
好啊 这里呢 把这个

21:15.340 --> 21:16.460
ref变成to

21:17.340 --> 21:19.100
好 保存一下啊 完了

21:19.820 --> 21:20.620
好 你看一下

21:21.580 --> 21:25.740
天机 课程 天天课程 天天学生 学生列表

21:26.300 --> 21:27.980
好 看呗 好 没问题吧

21:28.540 --> 21:31.660
哎 我们就把这里啊做改变了啊 改变了

21:33.340 --> 21:35.180
好 这是这是这一块啊

21:36.060 --> 21:40.860
然后呢 现在呢 我们做出了这么一个rotor之后呢 现在呢 我们来看一下我们的仓库啊

21:41.500 --> 21:44.380
我们的仓库里边有东西吗 是没东西啊

21:45.100 --> 21:50.220
对不对 哎 仓库里边是不是没东西啊 我们只有一些初始的状态对吧 初始的状态

21:50.300 --> 21:53.500
维刀之里边啥都没有啊 因为我们这里呢 也没有去跟什么

21:53.900 --> 21:59.340
仓库里边任何东西进行解 也没有跟那个学生啊 仓库进行结合啊 其实也无所谓

21:59.660 --> 22:06.620
但是呢 我们现在的目标是要说什么呢 是要把rotor里边的数据啊 给他放到

22:08.140 --> 22:08.860
仓库里边

22:09.660 --> 22:13.420
并且呢 每一次页面地址的变化

22:14.220 --> 22:18.940
都要在仓库里边有对应的action发生啊 发生一个action

22:19.900 --> 22:21.660
发生那个action之后呢

22:22.140 --> 22:28.460
啊 当然它是一个触发 action是一个触发状态变 变化的东西对吧 那么我们的状态呢 会做相应的变化

22:28.780 --> 22:36.140
变化哪一部分状态呢 就变化路由的这一部分状态 总之我们要把路由的相关信息给他放到仓库里边

22:37.100 --> 22:43.020
那么这里要放哪些信息呢 我们来看一下啊 看一下路由里边哪些信息 我们肯定要放进去

22:43.420 --> 22:44.540
好 我们这里呢 点击

22:45.420 --> 22:45.660
哎

22:46.460 --> 22:47.100
点击这个

22:48.060 --> 22:54.300
检查 我们之前呢 使用过那个compo那个reactor调试工具 对不对 我们之前知道啊

22:55.100 --> 23:00.140
rotor里边呢 他提供了一些上下文啊 提供了上下文 看一下上下文里边有什么数据呢

23:00.780 --> 23:06.380
上下文里边有什么数据 一个是history对象啊 咱们之前还说过 终点就在这个history对象

23:06.700 --> 23:13.340
这个对象里边 记录了很多信息 像这个nokation对象啊 它无非就是history对对象里面的一个属性而已

23:13.660 --> 23:17.580
你看 我这里放 这样子啊 还能往上拿吗

23:18.860 --> 23:26.860
拿不掉了啊 拿不了了啊 这个history对象里边 它有一个属性就是nokation 对吧 所以nokation呢 它也是属于history对象的

23:27.100 --> 23:33.580
所以history对象里面包含了很多信息 并且呢 咱们以后呢 要挑转页面 是不是也使用的是history 对不对

23:34.460 --> 23:41.500
那么这里边哪些信息我们需要到仓库里边呢 你看一下吧 这里边还提供了很多函数 函数要不要到仓库

23:42.220 --> 23:51.260
是不是不用到仓库 仓库里边保存函数干嘛呢 啊 仓库里边一般就是保存的一些实体数据啊 像怎么支不穿啊 对象啊 这些东西 他一般不保存函数

23:52.220 --> 23:54.380
那么这里边哪些信息呢 比方说像这个action

23:55.100 --> 24:01.260
就是这一次挑转页面使用了动作 也是使用使用什么样的动作挑转的 用push

24:01.980 --> 24:10.220
还是用什么还是用replace 还是你使用的是后退啊 pop 对吧 他使用的是什么动作挑转的啊 比方说我们这里点击后退

24:10.860 --> 24:15.580
啊 点击后退你看action是不是pop 对吧 这是一个信息 这个信息呢我们希望到仓库里边

24:16.540 --> 24:25.980
啊 然后呢 还有什么 还有这个location对象 这里边记住了什么哈希啊ki啊passname啊这些信息 对吧 还有什么stats呀这些东西 对吧 这个对象是不是我们也会

24:26.300 --> 24:31.980
也需要放到仓库里边 对吧 我们放到仓库里边 无非就是放这两个数据啊

24:32.780 --> 24:37.180
我们记住一下啊 就是该组件会将

24:39.260 --> 24:44.300
下面的路由数据和仓库保持同步

24:45.260 --> 24:49.740
什么叫保持同步 就是仓库里边这个数据变了 路由会跟这边 地址会跟这边

24:50.300 --> 24:53.580
地址变了 仓库里边的数据会跟这边 他就是在做这个同步的

24:54.700 --> 24:58.700
同和仓库里边数据保持同步 第一个什么数据呢 第一个就是action

24:59.100 --> 25:04.460
注意这个action 他不是redax的action啊 他不是redax的action

25:05.020 --> 25:08.700
他表示什么意思呢 表示 呃 当前

25:09.900 --> 25:20.220
当前路由啊 挑转的方式啊 是用什么方式来挑转的 无非就是三个嘛 push 还有什么pub 对吧 还有什么replace

25:20.940 --> 25:28.540
回忆一下啊 这是第一个数据 好 第二个数据呢 是location 对吧 他记录了

25:29.420 --> 25:35.100
当前的路由信息 有哪些路由信息 哪些地址信息 或者是地址信息嘛

25:36.060 --> 25:41.580
真的可以行 只需要把这两个数据跟仓库进行同步就行了 这就是这个库的作用

25:42.060 --> 25:45.660
当然了 这个库的官方稳当里边也特别说明了一点 就是说

25:46.540 --> 25:50.220
实际上的这个库呢 不是说必须要用的 没有任何人说

25:50.780 --> 25:51.340
一使用

25:52.060 --> 25:55.580
redax 必须要用这个库 跟rotl进行连接 没有必要

25:56.060 --> 25:59.660
但是他什么时候需要用呢 就是你可能会在仓库里边

26:00.220 --> 26:04.220
就是仓库里边自身的数据呢 可能会跟仓库的路由信息呢

26:04.780 --> 26:07.980
做一些联动啊 那么这是这个时候也可以用这个库

26:08.300 --> 26:14.380
另外呢 我们想在仓库里边监控 方面调试 监控那个路由的变化 通过仓库来监控

26:15.260 --> 26:19.020
在统一进行管理 那么这个时候呢 还需要库 需要这个库啊

26:19.420 --> 26:24.540
所以说这个redax里边不是学了redax,rex和rotl学的这三个东西

26:24.780 --> 26:28.540
那么是必须不是说必须要把redax和rotl连接下来用的啊

26:28.860 --> 26:34.620
所以说这个地方呢 这个这个库呢 相对他的重要性呢 就没有之前的那个rex和

26:35.260 --> 26:37.100
redax的连接 那么重要了

26:37.580 --> 26:43.020
所以说这个库呢 大家多多少少了解一下就行了啊 不过呢 我们还是会分析他到他的原码

26:43.660 --> 26:46.060
好 接下来 我们来看一下这个库 怎么使用

26:47.180 --> 26:48.860
怎么使用呢 我们来对照文章来看啊

26:49.100 --> 26:50.140
connectedrotl

26:54.090 --> 26:55.930
看一下这个库啊

26:59.530 --> 27:06.010
其实呢 这个库呢 他他以前呢 都还不是不是这个名字啊 他后来去建了一个新特库

27:06.330 --> 27:08.730
以前叫什么名字呢 以前呢 叫这个名字

27:09.690 --> 27:13.370
那以前的 他这个库 以前的那个库呢 已经没有维护了

27:13.850 --> 27:18.970
叫做rex rotl redax

27:20.010 --> 27:21.530
啊 对 就这个库啊

27:23.130 --> 27:27.930
好 这个库呢 他以前用的是这个库啊 这个库 不过这个库呢 他已经没有维护了啊

27:28.170 --> 27:31.130
他的官方去建议你啊 你看他的github主业

27:32.010 --> 27:34.810
他官方的建议你呢 你去使用 他说什么

27:35.370 --> 27:39.450
他说这个这个这个这个工程呢 已经不再维护了

27:39.770 --> 27:42.970
然后呢 让你去用这个库啊connected rex rotl

27:43.210 --> 27:45.050
其实两者的使用方式都差不多的

27:45.370 --> 27:48.650
只不过呢 以前呢 他代码呢 可能写的比较乱啊 后来呢

27:48.970 --> 27:51.930
rotl升级了过后呢 他已经不是那么好维护了

27:52.170 --> 27:55.530
所以说呢 改了干脆开了一个新的工程 去来重新做了一遍

27:56.010 --> 27:58.890
这库也其实也挺简单的 没有多少 没有多少代码

27:59.450 --> 28:01.930
好 咱们来看一下这个库 怎么去使用

28:02.890 --> 28:06.170
怎么使用呢 他告诉你第一步做什么 第二步做什么 第三步做什么

28:06.970 --> 28:08.970
然后就完了 好 我们一步来吧

28:09.450 --> 28:14.650
第一步做啥呢 其实他这个玩意儿呢 其实看着也挺牢火的啊

28:14.970 --> 28:18.970
他要你做什么呢 他让你稍微改造一下一个combined reducers

28:19.930 --> 28:23.130
啊 我们之前不是写过 在仓库里面不是写过这么一个东西吗

28:25.530 --> 28:26.650
不是写过这么一个东西吗

28:27.210 --> 28:30.090
combined reducers 对吧 他是来合并 reducers的

28:30.250 --> 28:33.290
他会反悔什么 反悔一个新的 reducer

28:33.530 --> 28:37.290
哎 这个新的 reducer 是不是我们把它用到那个仓库里面去了 对吧

28:37.770 --> 28:41.930
你看我们仓库里面倒入的是什么 倒入的就是这个 reducer 就倒入了这个东西

28:42.490 --> 28:44.810
啊 所以说他是来做状态合并的

28:45.450 --> 28:49.770
那么他让你在这里进行下额外的处理 为什么要进行额外的处理呢

28:49.930 --> 28:53.530
因为现在多了一个状态 就是路由的状态

28:54.170 --> 28:56.330
多了这么一个状态 叫做路由的状态

28:56.650 --> 28:59.610
所以说呢 他让你在这里呢 再加一个状态

29:00.010 --> 29:03.770
加什么状态呢 名字给他取名为rotr 表示路由状态

29:05.050 --> 29:08.010
添加路由状态

29:09.210 --> 29:12.330
那么这个路由状态肯定要用一个 reducer 来管理这个状态啊 对吧

29:12.570 --> 29:15.690
那么这个 reducer 哪来呢 reducer 他已经给你写好了

29:16.330 --> 29:19.850
哪来的 就是通过这个库 他里面有一个函数

29:20.010 --> 29:23.530
这个函数呢 他会给你反悔一个 reducer 就是你不用自己写

29:24.090 --> 29:26.730
这个 reducer 他已经给你写好了 你不用管

29:27.370 --> 29:29.130
好 咱们这里呢 先安装这个库

29:29.450 --> 29:31.690
因为这个库里边 他给你写好了这个 reducer

29:32.490 --> 29:36.650
因为他要把它放到仓库里边去吧 我们仓库里边是不是要通通过 reducer 来管理

29:37.210 --> 29:41.770
reducer 是导致数据发生变化的具体处理者 对吧

29:42.090 --> 29:46.010
一个性呢 是发生变化的原因 为什么要发生变化 我要做什么事情

29:46.330 --> 29:49.770
reducer 处理这个一个性 导致了数据最终发生变化

29:50.090 --> 29:53.690
所以说呢 你要把它放到仓库里边 你肯定得

29:54.490 --> 29:57.050
肯定得需要 reducer 这是跑不掉的啊

29:57.530 --> 30:00.330
你无论用什么方式 一定要给他加个 reducer 这是跑不掉的

30:00.890 --> 30:07.770
那么这个 reducer 呢 为了方便你操作啊 你不用你自己写 他给你写好了 你只要去导入就行了

30:08.970 --> 30:13.130
爽 拿个空 就是 con negative 稍微等一下啊

30:14.650 --> 30:16.650
好 安装好了啊 起动起来

30:17.850 --> 30:18.570
好 这里面

30:19.450 --> 30:21.610
导入 con negative drags rotor

30:22.250 --> 30:25.290
什么什么函数呢 叫做 con negative rotor 这个函数

30:26.010 --> 30:27.530
让你去导入这个函数

30:30.630 --> 30:33.270
叫做 con negative rotor 这个函数

30:34.150 --> 30:35.430
这个函数用来干嘛的呢

30:37.110 --> 30:40.390
我们一个个说啊 他这边其实就没几个东西啊 就那么几个东西

30:42.550 --> 30:46.150
该 该库中的内容

30:47.190 --> 30:48.710
第一个 第一个什么呢

30:49.990 --> 30:52.470
第一个就是 con negative rotor

30:53.510 --> 30:54.550
这是一个函数

30:55.430 --> 30:56.710
这是一个函数

30:57.910 --> 30:58.630
调用它

30:59.510 --> 31:01.110
会返回一个

31:01.990 --> 31:03.830
用于管理

31:04.630 --> 31:08.790
仓库中路由信息的 reducer

31:09.430 --> 31:13.990
这个 reducer 它是根据 x 来管理它的路由信息 那么 x 怎么办 我们一会再说

31:14.310 --> 31:15.430
一会再说 x 怎么办

31:16.070 --> 31:19.910
好 那么它会用于管理仓库里边的路由信息啊 这么一个 reducer

31:20.230 --> 31:22.310
所以说我们之类只需要去调用这个函数

31:22.630 --> 31:24.950
来得到这么一个 reducer 是不是完事了 对不对

31:25.510 --> 31:27.430
好 那么这个函数里边 它要传一个参数

31:27.910 --> 31:28.630
什么参数呢

31:29.990 --> 31:33.350
该函数需要传递一个参数

31:34.630 --> 31:37.350
参数是一个 history 对象

31:38.630 --> 31:40.470
你必须要告诉它一个 history 对象

31:41.430 --> 31:44.950
那么这个 history 对象是怎么了 如果说你前边听过我的

31:45.750 --> 31:48.310
rex rotor 的原码分析的话

31:48.630 --> 31:52.790
你就知道了 history 是 rotor 里边非常非常重要的

31:53.350 --> 31:56.070
一个对象 我们刚才也看到了 就这么一个对象

31:58.550 --> 32:02.470
就这个 history 对象 你要给它传一个 history 对象进来

32:02.870 --> 32:09.830
注意哦 这个 history 它不是window里边的 history 两码事啊 你搞清楚啊 这两码事

32:10.310 --> 32:13.590
window里边的 history 它纯粹指的是什么浏览器的

32:14.070 --> 32:18.390
地址对吧 浏览器的地址 控制的是什么 用的是 history api 对不对

32:18.790 --> 32:20.710
但是我们这里的history啊

32:21.670 --> 32:25.190
刚才我们这里看到了 history 对象 它是一个抽象的对象

32:25.830 --> 32:31.190
就是无论你使用的是 browser rotor 还是使用 hash rotor

32:31.670 --> 32:35.110
还是那我们以后的手机端可能要用到的 memory rotor

32:35.110 --> 32:38.710
那个时候连地址栏都没了 浏览器都没了 它仍然可以用路由

32:38.950 --> 32:43.750
对吧 那么任何东 不管你使用的是什么样的方式来进行路由

32:44.070 --> 32:50.150
它最终都能够生存一个格式完全统一的这么一个 history 对象

32:51.430 --> 32:56.550
所以说这个 history 对象是一个高度抽象的 跟你什么用没有浏览器没有关系

32:56.790 --> 33:02.070
跟你是不是用了 hash 用了 history api 没有任何关系 它是一个高度抽象的对象啊

33:02.230 --> 33:03.590
它提供了一种统一的

33:04.230 --> 33:05.350
统一的访问方式

33:06.150 --> 33:08.550
那么这个对象哪来的 你需要把这个对象告诉他

33:08.950 --> 33:12.710
啊 有时候说这个对象哪来的呢 我能不能从这个上下文字里面说得

33:13.510 --> 33:18.630
你注意啊 这个代码写到哪了 写到仓库里边了 仓库里边跟着 x 有没有什么关系

33:19.110 --> 33:19.510
没有

33:20.390 --> 33:26.710
仓库是独立于react的 你所以说你这里是不能去想象react的东西啊 不能去想象

33:27.750 --> 33:30.470
那么这个 history 对象哪来的 现在问题来了 哪来的

33:31.430 --> 33:36.550
好 我们这里呢 可以可以使用一个第三方库 叫做 history

33:39.270 --> 33:41.270
该对象可以使用

33:42.390 --> 33:43.190
第三方库

33:44.630 --> 33:46.550
history 得到

33:47.110 --> 33:50.150
那么这个库我们直接导入进来

33:50.790 --> 33:54.630
import from history

33:56.230 --> 33:59.350
导入这个库 当然你可以安装一下 其实我们这里可以直接用的

33:59.910 --> 34:03.350
只是没有智能提示而已 可以直接用 为什么呢 因为

34:04.150 --> 34:10.070
这个库 无论是这个库也好 还是说那个reactor rotor那个库也好

34:10.070 --> 34:14.550
它都使用了这个第三方库 如果说你听过我的原码的话应该知道

34:15.110 --> 34:17.910
这个库肯定是必不可少的 当然你没有听过也没关系

34:18.470 --> 34:22.070
我们为了得到智能提示啊 还是给它加上这么一个库

34:22.790 --> 34:29.190
这个库里边它就提供了很多种方式来创建一个history对象 其实我们react是rotor里边的history对象

34:30.150 --> 34:34.550
它就是通过这个库来得到的 通过这个库来得到的 就这么简单啊

34:35.190 --> 34:36.310
好 我们稍等一下啊

34:40.620 --> 34:43.180
好 安装完它 启动起来

34:45.340 --> 34:47.820
好 那么这里呢 这个库都安装好了

34:48.300 --> 34:53.020
安装好了之后了 这个库里边提供了一些方法 用于创建一个history对象

34:53.580 --> 34:57.180
用于创建一个history对象 那么比方说我们要使用的是什么

34:57.500 --> 35:01.100
浏览器的history API 对吧 那么我们这里创建

35:01.900 --> 35:04.780
就使用这个函数 叫做create browser history

35:05.580 --> 35:11.260
通过这个函数来创建一个history 如果说你要用哈希的话 我就可以通过create哈希 history

35:12.220 --> 35:15.740
你还对意思吧 所以说你可以想象 在reactrotor里边

35:16.460 --> 35:19.500
它这个玩意儿 它那个什么了呀

35:20.300 --> 35:26.380
在 哎 跑到去了 在这啊 这个browserrotor实际上它内部

35:26.940 --> 35:30.380
就是使用了create browser history

35:31.580 --> 35:34.060
就是使用了这么一个东西来得到的history对象

35:34.540 --> 35:39.340
如果说你用的是哈希rotor 那么它就用的是这个create哈希history

35:40.300 --> 35:41.820
来得到的那个history对象

35:42.540 --> 35:46.940
你要这意思吧 好 所以说我们这里呢 用啥呢 就随便吧 比方说我们就用那个browser history

35:47.340 --> 35:50.620
好 有了这个函数过后呢 我们就可以得到一个history对象了

35:51.500 --> 35:54.780
第二个函数就完成了啊 它里边有些配置都不用去传了

35:55.420 --> 35:57.980
把这个函数拿到 然后呢 放到这

35:58.860 --> 36:03.900
完了 这样子一来 我们就它这个函数 它就产生了一个reducer

36:04.460 --> 36:09.180
那么用于管理路由状态放到这了 好 保存咱们看一下啊

36:09.340 --> 36:12.940
看一下 咱们的初始化里面你看一下 是不是多了一个状态

36:13.500 --> 36:17.020
对不对 多了一个状态是吗 什么状态 什么状态 是不是rotor

36:17.500 --> 36:19.580
对不对 是不是多了一个这么一个状态啊

36:21.180 --> 36:25.260
多了这么一个状态rotor展开看一下 它的x形是什么 pop

36:25.900 --> 36:32.140
对不对 pop 这个x形啊 一开始的时候 是不是首页 对吧 一开始的时候 最开心的时候 这个x形动作就是pop

36:33.020 --> 36:37.420
啊 然后呢 都可以写到信息 你看 是不是首页 对不对 12起对吧

36:37.580 --> 36:43.340
哈希 那我们现在随便写一个吧 比方说我们这里一开始访问的 这刷新一次啊 刷新一次

36:43.740 --> 36:47.660
刷新一次 重新来一次 好 咱们来看一下啊 这个rotor里面的信息

36:48.220 --> 36:53.100
你看我们访问的路径是这个 对吧 12起没有哈希没有啊

36:53.420 --> 36:58.620
然后那我们比方比方说 给它加上一个就是12起吧 就随便写一个啊 随便写一个

36:59.100 --> 37:02.140
呃 然后呢哈希啊 abc 一回车

37:03.500 --> 37:05.100
好 然后再看这边

37:05.980 --> 37:11.740
rotor里边 location里边 你看 是不是有这些信息了 对吧 那么这些信现在在哪 是不是在仓库里边啊

37:12.220 --> 37:15.260
对不对 是不是在仓库里边 哎就完事了

37:16.540 --> 37:22.380
好 但是这样子完了吗 它没有完 为什么说没有完呢 咱们来看一下 当我们跳转页面呢

37:23.260 --> 37:24.380
我们点击添加学生

37:25.660 --> 37:30.700
跳转页面呢 东西呢 我东西跑哪去了呢 东西跑哪去了啊 跑哪去了

37:31.260 --> 37:36.780
你看一下 我们这里有没有 action 触发没有吧 没有 action 触发吧 那这个状态有没有变化

37:37.260 --> 37:39.580
没有变化吧 对不对 是不是没有变化

37:40.300 --> 37:46.940
哎 然后呢 我们这里添加课程啊 添加课程业跑到这里 这里去 这状态有没有变化 是不是也没有变化呀

37:47.900 --> 37:52.780
对吧 他有也没有发生任何的变化啊 没有发生任何的变化

37:53.660 --> 37:59.260
那么这个时候我们怎么样才能让他状态发生变化呢 我们来看一下他下一步怎么做

38:00.220 --> 38:07.020
好 step 2 第二步 你要做什么呢 好 第二步呢让你呢 用这种方

38:07.820 --> 38:09.740
跑哪去了 看一下啊

38:10.860 --> 38:14.380
这里 第二步 对了 师子啊 没问题

38:15.100 --> 38:19.660
第二步他让你干嘛呢 他让你去应用一个中间键啊 不 不管这个compose

38:20.140 --> 38:24.380
跟我们没什么关系啊 他让你去应用一个中间键 叫做rotor

38:25.340 --> 38:26.620
啊 应用这么一个中间键

38:27.580 --> 38:31.100
好 那么他建议你呢 把这个中间键放到第一个 其他中间键呢 放后边

38:31.740 --> 38:40.300
好 那么这个中间键要来做什么呢 来拦截一些特殊的x 什么特殊的x呢 我们一会就可以看到了啊 他里边可以做了一些特殊的x

38:40.540 --> 38:47.820
那么这些x呢会被会被这个中间键说拦截 他拦截了干嘛 他拦截了啊来做什么呢 来改变这个页面地址

38:48.460 --> 38:53.660
好 我们一会再给就看就可以看到了啊 就可以看到他的全貌了 好 这里呢 我们把这个复制一下

38:55.340 --> 38:56.380
啊 我们自己直接写吧

38:57.580 --> 39:02.860
在这里就创建仓库的时候呢 我们还要多一去多去啊 导入一个中间键

39:03.740 --> 39:11.900
什么中间键呢 from啊 就是reconnected react to rotor里边 我们导入这个啊

39:12.700 --> 39:14.860
叫什么rotor middle wheel

39:15.820 --> 39:23.420
这个中间键啊 这是一个函数 雕用这个函数 会返回一个中间键 好 咱们调用一下啊 调用一下这个函数

39:23.740 --> 39:31.020
叫做rotor med 啊 调用这个函数 它会返回个中间键 但是问题来了 这个函数呢 它又让你传一个history

39:31.900 --> 39:38.060
并且呢 这个history呢 应该跟刚才那个history呢 要保持一致啊 你得保持一致

39:38.940 --> 39:45.500
这里又要让你传一个history 所以说呢 我们这里呢 通常的做法呢 是在这里建立这么一个文件啊 叫做history文件

39:46.540 --> 39:51.580
这里来产生一个history啊 这里我们把刚才的刚才的history呢 放到这

39:53.500 --> 40:01.860
把刚才的history放到这 这里导出啊 export default

40:03.140 --> 40:14.740
导出这个history啊 因为我们要使用同一个history对象 所以说呢 我们这里要把这个东西导出啊 放到一个单独的文件 那么这边呢 我们就直接导入啊 导入history from

40:15.300 --> 40:22.660
第二条鞋杠history啊 导入新的 好 那么这边这边也是啊 在这里的 我们也要导入这个history

40:23.380 --> 40:26.100
from 叫鞋杠history

40:27.300 --> 40:34.260
好 这里把history传进去 它会高干 它会让你它会给你做什么事情呢 它会返回一个中间键

40:35.940 --> 40:41.540
该函数会返回一个redux中间键

40:42.500 --> 40:49.700
用于拦截一些特殊的x 它会拦截一些特殊的x 我们一会就知道它的作用了

40:50.660 --> 41:01.940
好 因为我们要 因为我们最终要出发状态变化 一定是要通过x 对吧 一定要是要通过x 那么这个x呢 我们肯定不会自己去熟悉 我们也不知道它要啥x

41:02.100 --> 41:08.740
因为这个这个部分的数据呢 是它写的redux来管理的 所以它要什么x 我们也不知道啊 我们也不知道

41:09.060 --> 41:15.860
那么这个时候怎么办呢 我们需要通过一个中间键来进行拦截 拦截特殊的x 那么一会x怎么创建 我们一会再说

41:16.580 --> 41:21.540
好 这里呢 我们把这个medalware放这 我们先写完 写完再说啊 这里稍微有点绕啊

41:22.340 --> 41:28.980
好 这个中间键下去来了 第二步 其实呢 你如果说你不知道原理 你把这个步骤记住也也能知道怎么做

41:29.700 --> 41:36.020
好 加进去 好 加进去过后 其实呢 我们现在的状态呢 还不会跟我们的这里同步 都还不会同步 我们来看一下

41:37.060 --> 41:42.740
课程列表 挑战页面了 有没有同步 有没有x型触发没有 因为触发x型是不是我们自己的事

41:43.140 --> 41:48.500
对不对 是不是我们自己的事 我们自己得触发一个型 对不对 好 然后接下来是第三步

41:49.780 --> 41:52.980
好 就最后一步了啊 最后一步了 最后一步让你做啥呢

41:54.820 --> 41:59.960
让你做这么一件事啊 让你做啥呢

42:00.680 --> 42:07.720
首先呢 让你在创建这个组建结构的时候呢 就不要再使用这种这个组建了

42:08.680 --> 42:15.720
不要再使用什么browser rotor啊 不这什么哈细rotor不要使用这些组建了 而转而使用target提供的那个那个组建

42:16.920 --> 42:22.840
啊 因为为什么不能使用这些组建了 因为这些组建里边 他们是维护的是自己的history对象

42:23.320 --> 42:28.200
啊 而不是我们统一的使用的同一个history对象 这就会出现问题

42:28.600 --> 42:33.560
啊 所以说不能使用这个组建了 而要使用target提供的什么组建叫connected rotor

42:33.800 --> 42:35.800
啊 得使用这个组建

42:37.560 --> 42:45.240
啊 主要这个名字呢 跟那个 跟这里的名字的有点像啊 这里叫connected rotor 它是一个函数啊 这个这个地方了

42:45.960 --> 42:47.160
这个地方呢 它是一个组建

42:49.640 --> 42:52.200
这个地方它是一个组建啊 你得使用这个组建

42:53.320 --> 42:55.320
这个组建里边有个属性叫做history

42:56.440 --> 42:58.760
你要把它复制为什么呢 又是同一个history

43:00.280 --> 43:02.200
又是同一个啊 第二个

43:02.920 --> 43:08.760
呃stone 从仓库里边得到啊 这个history啊 又是给它同一个history

43:09.800 --> 43:13.400
好 那么现在呢 就是我们来记录一下啊 第三个

43:14.920 --> 43:20.120
叫做connected rotor啊 这是一个组建

43:21.080 --> 43:22.280
这是一个组建

43:23.080 --> 43:31.320
用于向啊上下文提供啊一个history对象

43:32.200 --> 43:38.840
和其他的路由信息啊 跟什么一样 跟那个reactor

43:39.720 --> 43:45.800
rotor提供的信息一致 但是呢 为什么它要给你新做个组建出来了啊

43:46.520 --> 43:49.720
之所以需要新制作

43:51.320 --> 43:56.120
制作一个组建 是因为啊该库

43:57.080 --> 43:58.280
必须保证

43:59.000 --> 44:04.280
整个过程使用的是同一个history对象

44:04.760 --> 44:07.800
就是仓库里边那边是不是给他的一个history对象 对吧

44:08.120 --> 44:11.160
然后呢 我们这里middleware里边是不是也给他一个history对象

44:11.560 --> 44:14.920
然后这个库这个组建他也需要个history啊

44:15.560 --> 44:19.720
如果说你用之前那个什么browser history或者是harsie history

44:19.800 --> 44:25.480
那么他里边是自己新建的一个history对象 那么就两个就不一样了啊 两个就不一样了 就会出问题

44:26.200 --> 44:32.280
那当然了 这个你要彻底理解呢 你得看他原码 并且呢 你得知道reactorrotor的原码才行

44:32.520 --> 44:40.040
所以说这些课 我们下节课讲原码 你得前提条件啊 你得先看reactorrotor的原码 你才能理解这一块的原码

44:40.680 --> 44:46.520
啊 但是如果说你不没有看过rotor原码 你不想看原码 okay 没关系 你就只要把这个步骤记住

44:47.080 --> 44:52.440
啊 这是写实的 没有什么变化 就这样子写的啊 硬性要求就这样写 第三步就这样写了

44:53.080 --> 44:54.840
好 写了之后呢

44:55.400 --> 44:59.560
后边的做法具体怎么去做呢 具体怎么做呢

45:00.200 --> 45:05.160
啊 他后边就没咋说了啊 后边没什么说没没怎么说了 好后边就这样子

45:05.800 --> 45:11.640
就这个意思 当你在挑转页面的时候了啊 当你在挑转页面的时候了

45:11.960 --> 45:19.400
如果说你要手动挑转的话 你要是用target提供的方式来挑转 如果说你要用live link的话 无所谓你用就行了 好 接下来我们来看一下

45:20.760 --> 45:22.200
好 这里呢 我们刷新一次啊

45:22.680 --> 45:29.240
好 那么这里看你看是不是多了一个一个型的啊 多了这么一个一个型的啊 这么一个一个型的

45:29.640 --> 45:35.160
处理的过后呢 现在的页面地址是course对吧啊 这个东西好 没关系啊 咱们来看 接着往下看

45:35.800 --> 45:36.920
这里点添加学生

45:37.800 --> 45:43.000
挑转了页面的对吧 挑转了页面了 我们来看是不是一个新的一个型触发了 对吧 一个型的类型是

45:43.560 --> 45:48.520
两个atarotor location change是一个型的类型 对不对 它触发了这么一个一个型

45:49.000 --> 45:51.880
好 然后呢 这个一个型是不是导致的啊 它变化

45:52.200 --> 45:59.080
对吧 你看这里 地址仓库里边 仓库里边数据是不是也跟着变了 对吧 仓库里边数据也跟着变了 看没

45:59.560 --> 46:05.800
之前不是这个页面吧 之前是course 看 看这里 这里是不是course 之前的一个型 那么现在呢 是不是变成这个了

46:06.200 --> 46:08.600
好 咱们接着再挑转页面啊 添加课程

46:09.480 --> 46:14.920
好 你看一下 是不是又多了一个一个型 那么多了一个一个型 它触发了reducer的变化 看到没

46:15.480 --> 46:23.480
哎 它就是这么做的啊 就是这么做的 它会帮你去生成一个对应的action 然后去触发啊 去触发

46:23.960 --> 46:26.920
就是这么做的啊 就这么做的 明白这个意思吗

46:27.880 --> 46:37.000
哎 这就是这一块它的使用方式啊 我们这一块只讲它的使用方式 我觉得你们要理解它原理的话也蛮麻烦的 因为它涉及到

46:37.320 --> 46:44.040
那个reactrotor啊 给reactrotor来进行结合啊 也挺麻烦的 那有些人说那老师我如果说

46:44.600 --> 46:46.200
我想用那个 就是

46:47.080 --> 46:56.360
我想自己去铺洗一个啊 自己去就是手动的去写代码啊 比方说一个按钮点了过后呢 我自己用代码的方式来挑转 那怎么来挑转呢

46:57.080 --> 47:02.760
啊 如果说我们有这样的需求的话 我们可以用这种方式 比方说我们在学生这里

47:04.280 --> 47:06.120
哎 跑到去了 在这

47:07.480 --> 47:09.480
嗯 对 在那个

47:12.040 --> 47:15.240
呃 配级里边 我们看一下啊

47:16.200 --> 47:20.600
呃 我们随便吧 在个添加学生业里边加一个按钮

47:22.440 --> 47:25.400
点击挑转到啊

47:26.680 --> 47:28.440
挑战到什么 课程那边

47:29.320 --> 47:34.760
课程那边 好 那么如果说这里不用live link啊 不用live link 我们怎么来挑转呢

47:35.800 --> 47:41.560
好 我们如果说直接挑转的话 我们应该使用它里边给我们提供的那个方法来进行挑转

47:42.280 --> 47:44.520
from 哪个哪个方法connected

47:45.000 --> 47:47.640
readsrouter 它里边给你提供了什么push啊

47:48.280 --> 47:57.880
还有什么replace啊 对吧 提供的这一方法 那么这一方法的使用方式跟那个history对象里边的什么push啊replace完全一样一点去不得不用

47:58.440 --> 48:05.800
啊 比方说我们这里要push的话 我们这里怎么办 是不是push一下啊push一下 看一下能不能挑转啊 看一下能不能挑转 挑转能course

48:07.080 --> 48:07.720
啊

48:08.680 --> 48:10.200
我看一下个课程那边

48:11.480 --> 48:14.600
courses 挑转的courses 看一下能不能挑转啊 保存

48:15.800 --> 48:17.560
好 我们这里呢 到那个

48:18.760 --> 48:22.680
天家学生一 天家学生一 点击 有没有挑转

48:23.400 --> 48:31.560
没有挑转 为什么没有挑转 因为这个push啊 这个方法 它里边给你提供了一些方法 它只是返回了一些axin

48:32.040 --> 48:32.520
啊

48:34.280 --> 48:37.880
一些axin 创建函数

48:38.920 --> 48:40.440
两个 一个是push

48:41.560 --> 48:46.680
一个是replace 但这两个函数它仅仅是用于的创建axin的

48:47.400 --> 48:55.400
你要的意思吗 它仅仅是用于创建axin的 它并不是用于干嘛 它并不是用于那个

48:55.960 --> 48:56.280
呃

48:57.240 --> 49:03.800
呃 并不是用于挑转页面的 没有意思吧 所以说 如果说你要挑转页面

49:04.360 --> 49:08.600
要么呢 你就直接使用它的那个 就是history

49:09.320 --> 49:13.800
啊 比方说你这里propercy里边 解构出来啊 解构出来history

49:16.090 --> 49:21.130
啊 那么 这是路由里边给你注入的属性 对吧 要么就是使用history 点push

49:21.610 --> 49:22.410
啊 不用它那个

49:23.610 --> 49:24.490
啊 我们来看一下啊

49:25.610 --> 49:27.450
啊 这里 点击挑转

49:28.090 --> 49:33.770
挑转过去了 对吧 然后这边是不是也有axin触发 对吧 跟之前的使用方式是一样的啊 也有axin触发

49:34.570 --> 49:37.290
啊 我们后边会说它是什么样的原理啊

49:37.850 --> 49:40.170
那么 这是一种方式啊 一种方式

49:41.210 --> 49:49.050
另外一种方式呢 是使用它里边给你提供的push 用axin的就是跟用仓库的那种模式啊 就统一用一种模式来做

49:49.610 --> 49:53.770
啊 统一用一种模式来做 就是使用那个仓库的那种模式来进行处理

49:54.250 --> 49:57.930
那么 那个时候呢 你就要使用它那种push方法

49:58.250 --> 50:02.570
这个push方法它是一个axin创建函数 它能给你帮你来创建一个axin

50:02.890 --> 50:05.130
好 我们这里怎么做 是不是要利用那个

50:06.650 --> 50:12.010
什么瑞爱格茨 瑞大克斯 对吧 利用瑞爱格茨 瑞大克斯

50:13.370 --> 50:14.170
啊 利用这个库

50:15.050 --> 50:19.530
这个库里边你提供了一个什么 康奈格茨啊 连接 好 我们这里呢

50:20.490 --> 50:24.330
啊 写上一个就是 我们这里触发一个时间啊 触发一个时间

50:25.530 --> 50:27.930
on click on click 时间

50:29.530 --> 50:36.010
好 这里我们触发一个 如果onclick给我传了一个字 ok 那么我就这里呢就给他写上一个onclick

50:36.410 --> 50:37.690
啊 给他写上这么一个onclick

50:38.090 --> 50:41.930
好 啊 调用它啊 调用它 我们要调整的路径是这个路径

50:42.730 --> 50:47.530
啊 或者是 我们就直接调用就完事了 好 然后呢 这里我们跟那个之前写的那个react

50:47.610 --> 50:53.450
瑞大克斯那个康奈格茨是一样的 我们进行连接啊 连接 我们要连接到仓库 用仓库的方式来处理

50:53.610 --> 50:58.570
这样子呢 整个组建的处理数据的模式呢 统一了啊 就完全统一了

50:59.130 --> 51:00.890
好 我们这里呢 可以使用那个

51:02.250 --> 51:09.530
啊 什么康奈格茨 对吧 它这里边要传一个什么maps props to a map props

51:10.330 --> 51:12.010
a map state

51:12.730 --> 51:16.490
to props 还有maps dispatch

51:17.770 --> 51:24.570
to props 它要传这个事件处理函数 对不对 事件处理函数 第一个呢 map state to props 呢 微空

51:25.130 --> 51:27.050
啊 微空 没有什么需要传给你

51:27.610 --> 51:28.970
啊 另外一个呢 就是

51:30.250 --> 51:35.530
事件处理函数 好 事件处理函数的话 你给我一个什么呢 你给我一个dispatch

51:36.250 --> 51:38.330
dispatch 我给你返回了一个对象

51:39.290 --> 51:42.090
啊 我给你返回一个对象 这个对象里边有一个onclick

51:42.410 --> 51:47.610
那么这个对象里边的属性呢 就会传递到这边这个组建里边 对吧 我们最终呢会会连接这个组建吧

51:48.410 --> 51:49.050
student

51:49.530 --> 51:53.930
啊 所以说 学习呢 你得一步一步学 你得把之前的东西学稳固了

51:53.930 --> 52:00.010
如果说你之前学的东西有问题 往后边看的话越看越运 因为你之前都还没有掌握 你可能连这个东西都看不懂

52:00.570 --> 52:05.130
啊 onclick这个属性呢 我们给他设这个函数啊 当点击的时候干嘛呢

52:05.770 --> 52:12.970
我就dispatch第18几个什么 一个x 这个x哪来通过这个push这个函数 它是一个action创建函数

52:13.290 --> 52:19.210
啊 你把路径传给他 他的用法跟那个history push是一样的 只不过呢 他返回的是一个action 他并不

52:19.530 --> 52:24.490
他并没有直接导致页面发生变化 他只是让仓库里边的数据发生变化

52:24.890 --> 52:28.810
啊 他是这么个意思啊 让仓库里边的数据发生变化

52:29.530 --> 52:31.690
原来这意思吧 好 那么这里呢 我们

52:32.730 --> 52:34.810
触发这么一个action啊 触发这么一个action

52:35.530 --> 52:37.930
啊 跳转到哪呢 跳转到就是cosis

52:38.970 --> 52:40.810
啊cosis好 这里呢 我们把这个

52:41.850 --> 52:43.290
mapdispatch放过去

52:44.090 --> 52:49.530
啊 写完了啊 这种方式也是一种也是一种写法 当然有些人说这种方式写起来不挺麻烦的吗

52:49.610 --> 52:53.850
你还不如用原来那种就是history的那种方式啊 history push

52:54.170 --> 52:56.570
那是因为我们现在的目的是啥

52:56.970 --> 53:00.410
目的是因为我们把要把路由的信息啊

53:00.810 --> 53:04.170
当做仓库里边的数据统一进行看单

53:04.730 --> 53:10.330
就是我们在书写单码的时候 不再做出任何假设 我们有什么路由啊这东西

53:10.650 --> 53:16.010
对我们而言 对我们的主见而言都属于仓库的数据统一进行管理

53:16.330 --> 53:19.210
所以说我们写法上的应该尽量的统一

53:19.690 --> 53:23.050
不然的话你就没有必要用的个库 这个库不是说必须要用的啊

53:23.210 --> 53:27.290
不是说我们学了这个课程以后 做什么项目里都必须要用的个库 不是这个意思啊

53:27.610 --> 53:33.450
如果说你要用这个库 说明力高干嘛 你要把这个路由信息啊放到仓库里边进行统一管理

53:34.090 --> 53:39.450
那么既然要进行统一管理 你的主见就不应该关心路由 应该只关心仓库

53:40.250 --> 53:45.530
你的数据都应该从仓库里边来啊 是这么个意思啊 是这么个意思

53:46.090 --> 53:51.930
好 保存啊 好 你看一下 那么现在呢也可以达到一样的效果 比方说我们这里

53:52.970 --> 53:57.130
呃 刚才是天天水 天天水上对吧 这里点击体 我们这里清空一下啊

53:58.090 --> 54:04.410
啊 点击跳脑的课程列表啊 你看这里 是不是触发了同样的啊 一个X型 对不对 我看一下这个X型

54:04.810 --> 54:11.930
啊 触发这么一个X型 这个X型呢其实它是非常简单啊 非常简单 还给你传了一些信息啊 X型的 就是这一次的 就是

54:12.570 --> 54:16.890
呃 跳脑那一箱是什么 用的是PUSH啊 location的信息给它传过去了 对不对

54:17.290 --> 54:21.130
啊 那么这些信息呢 就会保存到仓库里边啊 就会保存到仓库里边

54:21.370 --> 54:24.410
rotor里边它就有这个东西了啊 它会保存进去

54:24.970 --> 54:35.290
没问题吧 好 这就是这一块啊 那么它就会放 那么它这样子呢 它就会把路由的信息呢 放到仓库统一进行管理 而不再去

54:36.090 --> 54:39.290
呃 这些组件就不再去直接调用路由的东西了啊

54:40.090 --> 54:47.210
不再去直接依赖路由了啊 他们要么就是直接 要么通过扛那个车去跟仓库进行连接 而不再直接依赖路由了

54:47.850 --> 54:49.290
好 这就是关于这个库啊

54:50.250 --> 54:55.210
好了 再说一次啊 再强调一次 这个库呢 它不是说你必须要用

54:55.850 --> 55:02.650
只有你希望把路由的信息放到仓库里边统一进行管理的时候 才需要这个库 否则的话 你不太需要这个库

55:03.530 --> 55:09.290
好吧 呃 原理我就不再多说了啊 因为我们整个客人是分了解构的

55:09.690 --> 55:14.890
原理 就是原理原码这个部分呢 我们都是放到的一个扩展课程里边来讲

55:15.850 --> 55:23.530
呃 其他的非扩展课程呢 我们都只是需要知道他的核心知识 核心知识 最重要的是他怎么去用就够了

55:24.090 --> 55:27.690
好吧啊 大家才去练习一下啊 练一下这个库 每一些客下来

55:28.410 --> 55:33.850
我凡是强调要练习的一定要去练习 我没有强调要去练习的也去练习一下

55:34.570 --> 55:41.370
你多练习对你总是没有坏处的 不然的话你会后边你对这些API不熟悉的话会越来越晕越来越晕

55:41.370 --> 55:44.890
好吧 好 这是关于这个这么一个第三方库

