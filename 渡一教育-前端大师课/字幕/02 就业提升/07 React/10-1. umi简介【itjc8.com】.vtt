WEBVTT

00:00.560 --> 00:03.560
后边的课程就是咱们这门课

00:03.560 --> 00:06.560
就是Rag的全家通 还剩下一些知识

00:06.560 --> 00:08.560
后边的知识我大概说一下

00:08.560 --> 00:11.560
就说我们后边还剩下这么几个知识

00:11.560 --> 00:15.560
一个是关于5米解释

00:15.560 --> 00:17.560
就是我们这一张要讲的

00:17.560 --> 00:20.560
然后还有一个叫Andy

00:20.560 --> 00:23.560
然后还有一个啥呢

00:23.560 --> 00:26.560
就是Andy Pro

00:26.560 --> 00:28.560
Andy Pro

00:29.560 --> 00:31.560
咱们来大概说一下

00:31.560 --> 00:33.560
这后边这几个东西

00:33.560 --> 00:36.560
我大概说一下大家有这么一个全局的认识

00:36.560 --> 00:39.560
首先这个5米解释是什么呢

00:39.560 --> 00:42.560
它是一个企业级的应用框架

00:42.560 --> 00:46.560
就说我们在使用React的时候

00:46.560 --> 00:48.560
要用到很多很多的技术对吧

00:48.560 --> 00:51.560
你光用React本身可不可以就开发了

00:51.560 --> 00:54.560
可以 但是很多东西你自己写起来也挺麻烦的

00:54.560 --> 00:56.560
因为我们做开发的时候

00:56.560 --> 00:59.560
很多的精力是要把它放到那个就是

00:59.560 --> 01:02.560
而不是技术上而是要放到业务上

01:02.560 --> 01:04.560
就是你要实现一个什么样的功能

01:04.560 --> 01:06.560
这方面会花费我们很多很多的精力

01:06.560 --> 01:08.560
如果说你再把很多的精力

01:08.560 --> 01:10.560
分散到各种第三方库

01:10.560 --> 01:12.560
你乱七八糟什么React

01:12.560 --> 01:14.560
技术的细致末节上

01:14.560 --> 01:16.560
那么其实开发的成本是蛮高的

01:16.560 --> 01:18.560
就是会花费很多的时间和精力

01:18.560 --> 01:20.560
去处理那些技术问题

01:20.560 --> 01:22.560
各种框架的整合

01:22.560 --> 01:24.560
各种第三方库的整合 就这些问题

01:24.560 --> 01:27.560
所以说就需要有这么一个东西出来

01:27.560 --> 01:28.560
然后把这些

01:28.560 --> 01:31.560
把我们React之前学过的那些

01:31.560 --> 01:33.560
就是全家桶里边的一东西

01:33.560 --> 01:35.560
把它进行整合

01:35.560 --> 01:37.560
那么UmiJS它实际上就在做这个事

01:37.560 --> 01:39.560
它把我们的路由

01:39.560 --> 01:41.560
做了一套方案出来

01:41.560 --> 01:43.560
然后还有就是我们之前用的Dba

01:43.560 --> 01:45.560
对吧 它把Dba也融合了进来

01:45.560 --> 01:47.560
还有很多很多技术

01:47.560 --> 01:49.560
我们后面学的时候你会知道了

01:49.560 --> 01:52.560
这个UmiJS它是一个框架

01:52.560 --> 01:53.560
我们之前也说过

01:53.560 --> 01:55.560
框架它有这么一个特点

01:55.560 --> 01:57.560
就是它有很强的约束率

01:57.560 --> 01:58.560
约束力

01:58.560 --> 02:00.560
它就说你写代码的时候

02:00.560 --> 02:02.560
应该怎么去写代码

02:02.560 --> 02:03.560
怎么去建工程

02:03.560 --> 02:05.560
它都给你进行的约束

02:05.560 --> 02:07.560
这是框架的这么一个特点

02:07.560 --> 02:09.560
实际上它在做这件事的时候

02:09.560 --> 02:12.560
它是参考了就是NexJS

02:12.560 --> 02:14.560
就在UmiJS出来之前

02:14.560 --> 02:17.560
我们如果说要去整合一些东西的话

02:17.560 --> 02:19.560
在React全家桶里边

02:19.560 --> 02:20.560
去整合一些第三方库的话

02:20.560 --> 02:23.560
我们之前用的是NexJS

02:23.560 --> 02:25.560
只不过UmiJS出来之后

02:25.560 --> 02:28.560
它很多方面比NexJS做得更好

02:28.560 --> 02:30.560
所以说现在很多的国内公司

02:30.560 --> 02:33.560
它开始在使用UmiJS

02:33.560 --> 02:35.560
很多都在使用UmiJS

02:35.560 --> 02:38.560
来搞定React开发了

02:38.560 --> 02:41.560
所以说这是UmiJS和NexJS

02:41.560 --> 02:42.560
这两个东西

02:42.560 --> 02:43.560
他们的这么一个特点

02:43.560 --> 02:46.560
我把他放前面来吧

02:46.560 --> 02:47.560
那么我们这门客

02:47.560 --> 02:49.560
要不要学习NexJS呢

02:49.560 --> 02:50.560
要学

02:50.560 --> 02:52.560
但是学的时候

02:52.560 --> 02:55.560
可能这里边有些东西讲不了

02:55.560 --> 02:57.560
因为它涉及到另外一个东西

02:57.560 --> 03:01.560
就是SSR

03:01.560 --> 03:03.560
我们讲NexJS的时候

03:03.560 --> 03:05.560
可能要涉及到这个东西

03:05.560 --> 03:08.560
这个东西我们目前这门客里边不涉及

03:08.560 --> 03:09.560
目前这门客里边不涉及

03:09.560 --> 03:12.560
后边我们可能会单独开一个客来讲

03:12.560 --> 03:13.560
为什么呢

03:13.560 --> 03:17.560
这个SSR叫做服务端炫的

03:17.560 --> 03:19.560
因为服务端炫的东西

03:19.560 --> 03:22.560
你先得讲服务端炫的

03:22.560 --> 03:25.560
然后你才能去讲

03:25.560 --> 03:28.560
就是在NexJS里边怎么去使用

03:28.560 --> 03:30.560
怎么去融合服务端炫的

03:30.560 --> 03:33.560
因为服务端炫它又涉及到NoteJS

03:33.560 --> 03:37.560
NoteJS可能在我们的新的课程体系下面

03:37.560 --> 03:38.560
是放到后边的

03:38.560 --> 03:40.560
因为它是后边的东西

03:40.560 --> 03:41.560
是放到后边的

03:41.560 --> 03:43.560
是放在全场开发的一块的

03:43.560 --> 03:46.560
所以说我们等到NoteJS讲完了之后

03:46.560 --> 03:48.560
理由了Note的知识

03:48.560 --> 03:49.560
有了服务端的知识过后了

03:49.560 --> 03:52.560
我们再学SSR才能扫清出一些障碍

03:52.560 --> 03:53.560
好吧

03:53.560 --> 03:55.560
这是关于这两者的关系

03:55.560 --> 03:57.560
以及我们目前这门客学习的是什么

03:57.560 --> 04:00.560
目前这门客我们讲的是reactor

04:00.560 --> 04:03.560
但是我们不涉及服务端炫

04:03.560 --> 04:05.560
服务端炫我们留到后边

04:05.560 --> 04:08.560
我们讲完了Note之后来进行

04:08.560 --> 04:11.560
然后这里原码分析我也说一下

04:11.560 --> 04:13.560
这个无理解释的原码分析

04:13.560 --> 04:15.560
现在也是学不了的

04:15.560 --> 04:17.560
为什么说学不了呢

04:17.560 --> 04:19.560
因为污蔑解释和Nex解释

04:19.560 --> 04:20.560
这两个东西

04:20.560 --> 04:22.560
他们都涉及到一个命令行开发

04:22.560 --> 04:25.560
而命令行开发它又需要Note的知识

04:25.560 --> 04:28.560
而且它们本身自带了脚手架

04:28.560 --> 04:31.560
还需要涉及到脚手架开发

04:31.560 --> 04:33.560
那又是后边的知识

04:33.560 --> 04:34.560
所以说像这些东西

04:34.560 --> 04:35.560
我们留到后边

04:35.560 --> 04:37.560
专门拿一门客来讲

04:37.560 --> 04:39.560
就是什么脚手架开发呀

04:39.560 --> 04:41.560
还有什么命令行开发呀

04:41.560 --> 04:42.560
服务端炫这一块

04:42.560 --> 04:44.560
咱们留到后边来讲

04:44.560 --> 04:46.560
这个大家给大家说清楚

04:46.560 --> 04:48.560
然后了这里

04:48.560 --> 04:50.560
后边我们有这么一个东西

04:50.560 --> 04:51.560
叫ND

04:51.560 --> 04:52.560
ND是什么呢

04:52.560 --> 04:55.560
就有点类似于那个VU里边的

04:55.560 --> 04:56.560
就是ElementUI

04:56.560 --> 04:58.560
就是一个UI库

04:58.560 --> 05:00.560
它给你提供了很多的UI组件

05:00.560 --> 05:03.560
那么可以方便你做一些后台管理

05:03.560 --> 05:05.560
后台管理系统的开发

05:05.560 --> 05:06.560
它起这么一个作用

05:06.560 --> 05:08.560
就是一个组件库而已

05:08.560 --> 05:10.560
然后后边这个ND Pro是什么呢

05:10.560 --> 05:12.560
它又是一套后台的

05:12.560 --> 05:15.560
就是管理的解决方案

05:15.560 --> 05:17.560
又是后台管理的一套方架

05:17.560 --> 05:18.560
那么这个东西呢

05:18.560 --> 05:21.560
实际上你可以把它理解成为

05:21.560 --> 05:24.560
ND加上5米解释

05:24.560 --> 05:25.560
你可以这样理解

05:25.560 --> 05:28.560
所以说我们最后讲的是ND Pro

05:28.560 --> 05:30.560
讲了这么个东西

05:30.560 --> 05:32.560
于是我们的学习顺序

05:32.560 --> 05:34.560
我们先把这个5米解释学了

05:34.560 --> 05:37.560
然后再学这个Next解释

05:37.560 --> 05:39.560
然后再是ND

05:39.560 --> 05:41.560
我们先手动的把应用进去

05:41.560 --> 05:43.560
然后再学习这个ND Pro

05:43.560 --> 05:45.560
那么最后就学习完了

05:45.560 --> 05:46.560
好吧

05:46.560 --> 05:49.560
然后给大家先说一下这么一个情况

05:49.560 --> 05:51.560
5米解释有一个官方网站

05:51.560 --> 05:52.560
就是这个网站

05:52.560 --> 05:54.560
它是那个蚂蚁金服

05:54.560 --> 05:56.560
蚂蚁金服的公司

05:56.560 --> 05:58.560
就是阿里奇下的这个公司

05:58.560 --> 06:02.560
开发的一套企业级应用方架

06:02.560 --> 06:04.560
就是基于的是react

06:04.560 --> 06:06.560
目前基于的是react

06:06.560 --> 06:08.560
将来可能还会支持5U

06:08.560 --> 06:10.560
都说不准

06:10.560 --> 06:12.560
它的官方计划里面有这么一个计划

06:12.560 --> 06:14.560
可能将来会支持5U

06:14.560 --> 06:16.560
那么它的用法呢

06:16.560 --> 06:17.560
我们下一课再说

06:17.560 --> 06:18.560
这一课呢

06:18.560 --> 06:20.560
我们先把它安装好

06:20.560 --> 06:21.560
先做个简单介绍

06:21.560 --> 06:22.560
然后把它安装好

06:22.560 --> 06:23.560
把它跑起来

06:23.560 --> 06:25.560
给大家大概看一下

06:25.560 --> 06:26.560
它是怎么一回事

06:26.560 --> 06:28.560
这里还有一个中文的

06:28.560 --> 06:30.560
可以把它移往成中文

06:31.560 --> 06:33.560
然后它其中有一个

06:33.560 --> 06:35.560
有这么几个特点

06:35.560 --> 06:37.560
也在官方文档里边就是

06:37.560 --> 06:38.560
特别标明了

06:38.560 --> 06:40.560
一个是插件化

06:42.560 --> 06:43.560
插件化是什么意思呢

06:43.560 --> 06:45.560
就是说污密里边

06:45.560 --> 06:47.560
它很多东西呢

06:47.560 --> 06:49.560
它要就是要应用的

06:49.560 --> 06:50.560
很多东西啊很多功能啊

06:50.560 --> 06:52.560
都是基于插件的

06:52.560 --> 06:53.560
就是说你可以用

06:53.560 --> 06:54.560
你可以不用

06:54.560 --> 06:55.560
你不用的话

06:55.560 --> 06:57.560
你就不去安装这个插件

06:57.560 --> 06:58.560
或者是在插件里面

06:58.560 --> 07:00.560
进行把它配置了

07:00.560 --> 07:01.560
把它进行进用

07:01.560 --> 07:02.560
就是非常的方便

07:02.560 --> 07:03.560
你可以用

07:03.560 --> 07:04.560
可以用的话

07:04.560 --> 07:05.560
在插件配置里面

07:05.560 --> 07:06.560
把它启用就完事了

07:06.560 --> 07:07.560
如果你不用的话

07:07.560 --> 07:08.560
关掉就行了

07:08.560 --> 07:09.560
或者是不配置就完事了

07:09.560 --> 07:11.560
所以它基于很多很多的插件

07:11.560 --> 07:13.560
咱们在后边的学习的时候

07:13.560 --> 07:15.560
就可以看得很清楚

07:15.560 --> 07:17.560
另外一个就是开箱寄用

07:19.560 --> 07:20.560
开箱寄用

07:21.560 --> 07:22.560
那么这个是说的是什么呢

07:22.560 --> 07:23.560
就是说

07:23.560 --> 07:25.560
我们一会安装了之后就知道了

07:25.560 --> 07:27.560
开箱寄用说的就是说

07:27.560 --> 07:28.560
那么这个污密机也是

07:28.560 --> 07:30.560
你只需要安装它就行了

07:30.560 --> 07:32.560
你如果说你做一个最简洁

07:32.560 --> 07:33.560
最简洁的应用的话

07:33.560 --> 07:34.560
你什么都不用安装

07:34.560 --> 07:35.560
叫什么regs都不用安装

07:35.560 --> 07:36.560
因为它都有依赖

07:36.560 --> 07:37.560
rex

07:37.560 --> 07:38.560
rexdom

07:38.560 --> 07:39.560
还是rotor

07:39.560 --> 07:40.560
retax

07:40.560 --> 07:41.560
那些我们以前安装一大堆东西

07:41.560 --> 07:42.560
对吧

07:42.560 --> 07:43.560
啥都不用安装

07:43.560 --> 07:44.560
你直接安装污密机完事了

07:44.560 --> 07:45.560
开箱寄用

07:46.560 --> 07:48.560
第三个说的是约定速度有

07:48.560 --> 07:50.560
约定速度有的话

07:50.560 --> 07:51.560
我们这个讲到后边的时候

07:51.560 --> 07:52.560
再详细说吧

07:53.560 --> 07:54.560
这些可能大家可以

07:54.560 --> 07:55.560
我们可以先体验一下

07:56.560 --> 07:57.560
它最主要的三个特点

07:57.560 --> 07:58.560
就是这样

07:58.560 --> 07:59.560
三个特点

07:59.560 --> 08:00.560
而且它的使用上

08:00.560 --> 08:02.560
非常非常的简单

08:02.560 --> 08:03.560
我们学习了

08:03.560 --> 08:05.560
之前的那些零散的知识

08:05.560 --> 08:06.560
再来学习污密解释的话

08:06.560 --> 08:07.560
你会发现污密解释

08:07.560 --> 08:09.560
真的非常非常的简单

08:09.560 --> 08:11.560
然后我们这里先把它安装好

08:12.560 --> 08:13.560
安装污密的话

08:13.560 --> 08:15.560
我们通常会全局安装

08:15.560 --> 08:16.560
因为它给你提供了一个

08:16.560 --> 08:17.560
命令行工具

08:17.560 --> 08:19.560
我们要使用它这个命令

08:19.560 --> 08:20.560
就是污密的命令

08:20.560 --> 08:21.560
所以说我们安装的时候

08:21.560 --> 08:23.560
一般全局安装

08:23.560 --> 08:26.560
就是全局安装污密

08:26.560 --> 08:28.560
安装的方式很简单

08:28.560 --> 08:29.560
我们这里

08:34.660 --> 08:36.660
我们这里首先全局安装

08:36.660 --> 08:37.660
全局安装的话

08:37.660 --> 08:39.660
你在哪个目标里面

08:39.660 --> 08:40.660
命令的都无所谓

08:40.660 --> 08:41.160
一二

08:41.160 --> 08:41.660
Global

08:41.660 --> 08:42.660
ADD

08:42.660 --> 08:43.660
污密

08:43.660 --> 08:44.660
让它安装就行了

08:45.660 --> 08:46.660
可能要稍微等一会

08:46.660 --> 08:47.660
因为它一带的东西

08:47.660 --> 08:48.660
非常非常多

08:48.660 --> 08:50.660
这里包了一些警告

08:50.660 --> 08:51.660
这些警告都是

08:51.660 --> 08:53.660
跟那些版本酷的关系

08:53.660 --> 08:55.660
但也不怎么影响

08:55.660 --> 08:56.660
不管它了

08:56.660 --> 08:57.660
这一带的东西太多了

08:57.660 --> 08:58.660
有些版本酷了

08:58.660 --> 09:00.660
可能我这里没有更新

09:00.660 --> 09:01.660
不用管它

09:01.660 --> 09:02.660
再安装吧

09:03.660 --> 09:05.660
好 让它自己安装

09:05.660 --> 09:06.660
我们接着来说

09:06.660 --> 09:07.660
第一个就是全局安装污密

09:07.660 --> 09:09.660
你可以用NPM安装

09:09.660 --> 09:10.660
也可以用亚兰安装

09:10.660 --> 09:11.660
都行

09:12.660 --> 09:13.660
等它安装的时候

09:13.660 --> 09:14.660
我们来说一下

09:14.660 --> 09:17.660
就是安装好了污密之后

09:17.660 --> 09:20.660
它会给你提供一个命令行

09:20.660 --> 09:22.660
命令行工具

09:22.660 --> 09:26.660
提供了一个命令行工具

09:26.660 --> 09:27.660
什么工具呢

09:27.660 --> 09:28.660
就是污密

09:28.660 --> 09:29.660
就是污密这个命令

09:29.660 --> 09:31.660
因为你传全局装好了过后

09:31.660 --> 09:32.660
你就会有这个命令

09:32.660 --> 09:33.660
污密这个命令

09:33.660 --> 09:34.660
通过这个命令

09:34.660 --> 09:35.660
通过

09:36.660 --> 09:37.660
该命令

09:38.660 --> 09:39.660
可以

09:41.660 --> 09:42.660
对污密工程

09:43.660 --> 09:44.660
进行操作

09:44.660 --> 09:45.660
比方说

09:45.660 --> 09:46.660
你要启动一个工程

09:46.660 --> 09:48.660
或者是你要打包

09:48.660 --> 09:49.660
打包工程

09:49.660 --> 09:50.660
都可以进行操作

09:51.660 --> 09:52.660
其实污密

09:52.660 --> 09:53.660
它还有一种方式

09:53.660 --> 09:54.660
就是全

09:54.660 --> 09:55.660
搅手架的方式

09:55.660 --> 09:56.660
污密

09:56.660 --> 09:57.660
还有

09:57.660 --> 09:58.660
还可以使用

09:59.660 --> 10:00.660
对应的

10:00.660 --> 10:01.660
搅手架

10:01.660 --> 10:02.660
那么这个搅手架

10:02.660 --> 10:04.660
我们先不着急讲

10:04.660 --> 10:05.660
因为

10:05.660 --> 10:07.660
我们一开始讲污密的时候

10:07.660 --> 10:09.660
先从它最简单的用法开始

10:10.660 --> 10:11.660
最原始的用法

10:11.660 --> 10:12.660
就是用它的命令行

10:12.660 --> 10:13.660
污密

10:13.660 --> 10:15.660
全部凭我们手动来控制

10:15.660 --> 10:17.660
如果说你要打搅手架的话

10:17.660 --> 10:18.660
它又帮你整合了一些东西

10:18.660 --> 10:20.660
所以我们先把污密的

10:20.660 --> 10:22.660
命令行的使用方式

10:22.660 --> 10:23.660
搞清楚了之后

10:23.660 --> 10:24.660
我们再来安装它的搅手架

10:24.660 --> 10:25.660
你理解起来

10:25.660 --> 10:26.660
就一节课的时间

10:26.660 --> 10:27.660
你就搞定了

10:27.660 --> 10:28.660
就理解起来

10:28.660 --> 10:29.660
就非常轻松了

10:29.660 --> 10:30.660
好

10:30.660 --> 10:32.660
应该差不多安装好了吧

10:32.660 --> 10:33.660
安装好了

10:33.660 --> 10:34.660
污密安装好了

10:34.660 --> 10:35.660
安装好了过后

10:35.660 --> 10:36.660
我们接下来干嘛

10:36.660 --> 10:37.660
接下来怎么做

10:37.660 --> 10:38.660
你看着

10:38.660 --> 10:39.660
我们这样来操作

10:39.660 --> 10:40.660
我们不再用这个工程了

10:40.660 --> 10:41.660
因为我们之前

10:41.660 --> 10:43.660
这个工程是用什么来搭建的

10:43.660 --> 10:45.660
是不是用官方的搅手架

10:45.660 --> 10:47.660
叫Creatoract App

10:47.660 --> 10:48.660
对吧

10:48.660 --> 10:49.660
用这个搅手架来搭建的

10:49.660 --> 10:50.660
那么污密

10:50.660 --> 10:51.660
其实它内部

10:51.660 --> 10:53.660
它内部也是使用了

10:53.660 --> 10:54.660
Creatoract App

10:54.660 --> 10:55.660
这个搅手架

10:55.660 --> 10:57.660
但是

10:57.660 --> 10:58.660
就是

10:58.660 --> 10:59.660
如果说你到时候用污密

10:59.660 --> 11:00.660
搅手架的话

11:00.660 --> 11:01.660
它内部也是使用了

11:01.660 --> 11:02.660
这个搅手架

11:02.660 --> 11:03.660
然后我们建起来的

11:03.660 --> 11:05.660
就更加简单了

11:05.660 --> 11:06.660
那么接下来污密怎么用了

11:06.660 --> 11:07.660
你看着

11:07.660 --> 11:09.660
跟这个文件夹没关系了

11:09.660 --> 11:11.660
然后我们这里新建一个文件夹

11:11.660 --> 11:13.660
给它取名为

11:13.660 --> 11:14.660
污密那儿

11:14.660 --> 11:16.660
学习污密

11:16.660 --> 11:17.660
那么这个文件夹

11:17.660 --> 11:18.660
里边是空的

11:18.660 --> 11:19.660
看到没

11:19.660 --> 11:20.660
我们首先进入这个文件夹

11:20.660 --> 11:22.660
在中间打开

11:22.660 --> 11:24.660
然后把它初始化一下

11:24.660 --> 11:25.660
就是用MPM

11:25.660 --> 11:26.660
Init

11:26.660 --> 11:27.660
刚外

11:27.660 --> 11:29.660
初始化一下

11:29.660 --> 11:31.660
就是给它加个拍个几点

11:31.660 --> 11:32.660
其他也没啥

11:32.660 --> 11:34.660
初始化了之后

11:34.660 --> 11:35.660
接下来

11:35.660 --> 11:37.660
我们就可以直接写代码了

11:37.660 --> 11:38.660
啥都不用安装

11:38.660 --> 11:40.660
因为你现在全局安装了

11:40.660 --> 11:41.660
5米过后

11:41.660 --> 11:42.660
它给你提供了一个命令行

11:42.660 --> 11:43.660
这个命令行

11:43.660 --> 11:44.660
后面我们运行的时候

11:44.660 --> 11:45.660
它就直接

11:45.660 --> 11:47.660
因为它在全局里边

11:47.660 --> 11:48.660
已经有了依赖了

11:48.660 --> 11:50.660
它是会直接进行打包运行

11:50.660 --> 11:51.660
就这么简单

11:51.660 --> 11:52.660
接着我们看一下

11:52.660 --> 11:53.660
污密那儿

11:53.660 --> 11:55.660
然后我们点击右键

11:55.660 --> 11:57.660
新建个文件夹

11:57.660 --> 11:58.660
叫做SRC

11:58.660 --> 11:59.660
这个SRC

11:59.660 --> 12:00.660
SRC是啥

12:00.660 --> 12:01.660
是不是我们代码文件夹

12:01.660 --> 12:03.660
你看跟Retro那儿是一样的

12:03.660 --> 12:04.660
实际上污密里边

12:04.660 --> 12:05.660
它也可以

12:05.660 --> 12:07.660
你也可以不用去建

12:07.660 --> 12:08.660
这个SRC目录

12:08.660 --> 12:10.660
我们后边会详细说

12:10.660 --> 12:12.660
但是我们习惯上

12:12.660 --> 12:14.660
还是会建这么一个SRC目录

12:14.660 --> 12:16.660
把我们的原代码的东西

12:16.660 --> 12:17.660
相运的东西

12:17.660 --> 12:19.660
都放到这个SRC目录里边去

12:19.660 --> 12:20.660
好吧

12:20.660 --> 12:22.660
我们就建这么一个SRC目录

12:22.660 --> 12:23.660
好

12:23.660 --> 12:26.660
接下来我们在SRC目录里边

12:26.660 --> 12:28.660
新建一个文件

12:28.660 --> 12:30.660
给它取名为

12:30.660 --> 12:31.660
比方说

12:31.660 --> 12:34.660
Page 1.js

12:34.660 --> 12:35.660
什么意思呢

12:35.660 --> 12:37.660
这里就是一个Retro逐渐

12:37.660 --> 12:38.660
就是一个Retro逐渐

12:38.660 --> 12:41.660
那么它就表示的是

12:41.660 --> 12:42.660
一个页面

12:42.660 --> 12:43.660
它就表示的是一个页面

12:43.660 --> 12:45.660
一个在SRC目录

12:45.660 --> 12:46.660
不好意思

12:46.660 --> 12:47.660
这里还要建个文件夹

12:47.660 --> 12:49.660
叫Pages

12:49.660 --> 12:50.660
Pages

12:50.660 --> 12:51.660
把它放进去

12:51.660 --> 12:53.660
这个就是因为污密里边

12:53.660 --> 12:55.660
它提供了很多约定式的方式

12:55.660 --> 12:56.660
就是约定好

12:56.660 --> 12:58.660
你的每个文件夹是什么意思

12:58.660 --> 13:00.660
你按照它的约定来命名就行了

13:00.660 --> 13:02.660
比方说Pages文件夹

13:02.660 --> 13:03.660
你就不能换出其他名字

13:03.660 --> 13:05.660
你必须要试这个名字

13:05.660 --> 13:06.660
那么你只要写了这个名字

13:06.660 --> 13:07.660
就表示

13:07.660 --> 13:10.660
这个文件夹里边放的全是页面

13:10.660 --> 13:12.660
其实在我们软件开发里边

13:12.660 --> 13:13.660
很多时候

13:13.660 --> 13:14.660
很多框架里边

13:14.660 --> 13:15.660
一旦进行了约定

13:15.660 --> 13:16.660
你会发现

13:16.660 --> 13:18.660
使用起来就特别特别简单了

13:18.660 --> 13:20.660
因为很多时候它就已知了

13:20.660 --> 13:21.660
它就假设

13:21.660 --> 13:22.660
它出了很多假设

13:22.660 --> 13:23.660
假设你就是这个文件夹

13:23.660 --> 13:25.660
里边放的就是页面

13:25.660 --> 13:27.660
那么这里边写的每一个文件

13:27.660 --> 13:29.660
就是一个页面

13:29.660 --> 13:31.660
我们这里就导出这么一个组件

13:31.660 --> 13:33.660
RFC导出这个配级1

13:33.660 --> 13:34.660
比方说首页

13:34.660 --> 13:35.660
H1

13:35.660 --> 13:37.660
首页

13:37.660 --> 13:39.660
就是配级

13:39.660 --> 13:41.660
就是页面1

13:41.660 --> 13:42.660
再来一个

13:42.660 --> 13:46.360
配级2

13:46.360 --> 13:47.360
这是页面2

13:47.360 --> 13:48.360
于是

13:48.360 --> 13:49.360
这样子就这样子写

13:49.360 --> 13:51.360
写完了过后

13:51.360 --> 13:52.360
啥都不用安装

13:52.360 --> 13:53.360
你看看

13:53.360 --> 13:55.360
Ragson的Rotor啥都没安装

13:55.360 --> 13:56.360
也没有写什么

13:56.360 --> 13:57.360
任何的路由

13:57.360 --> 13:59.360
Rotor的这个组件也没有写

13:59.360 --> 14:00.360
你直接这样子写

14:00.360 --> 14:02.360
5米会在内部给你进行处理

14:02.360 --> 14:04.360
那么到时候你访问这个地址

14:04.360 --> 14:06.360
配级1就访问到了这个组件

14:06.360 --> 14:08.360
你访问到了配级2

14:08.360 --> 14:10.360
你访问这个地址配级2

14:10.360 --> 14:13.360
你就访问到了这个页面

14:13.360 --> 14:14.360
原来的意思吧

14:14.360 --> 14:15.360
就访问到这个页面

14:15.360 --> 14:16.360
就这么简单

14:16.360 --> 14:18.360
如果说你要访问首页怎么办

14:18.360 --> 14:19.360
新建文件

14:19.360 --> 14:20.360
In这个顺

14:20.360 --> 14:23.360
然后这里写个组件

14:23.360 --> 14:24.360
当然也可以是内组件

14:24.360 --> 14:25.360
啥组件都无所谓

14:25.360 --> 14:28.360
然后这里写个首页

14:28.360 --> 14:30.360
就写完了

14:30.360 --> 14:32.360
你看我现在还写了别的东西吗

14:32.360 --> 14:33.360
没了

14:33.360 --> 14:35.360
好 接下来我们直接运行

14:35.360 --> 14:37.360
直接运行看一下

14:37.360 --> 14:38.360
那么怎么运行呢

14:38.360 --> 14:39.360
现在我们运行的话

14:39.360 --> 14:41.360
用的不是一二二十二次了

14:41.360 --> 14:42.360
用的不是这个了

14:42.360 --> 14:43.360
为什么呢

14:43.360 --> 14:44.360
因为这个东西

14:44.360 --> 14:45.360
这个运行是不是要在这里配置的

14:45.360 --> 14:47.360
这里没有配置

14:47.360 --> 14:49.360
我们应该怎么来运行呢

14:49.360 --> 14:52.360
我们可以使用5米这个运行

14:52.360 --> 14:53.360
5米这个运行

14:53.360 --> 14:54.360
就是5米

14:54.360 --> 14:56.360
其中有一个命令叫做Dev

14:56.360 --> 14:57.360
表示的是

14:57.360 --> 15:01.360
用开发模式来启动工程

15:01.360 --> 15:03.360
5米Dev表示用开发模式

15:03.360 --> 15:04.360
启动工程

15:04.360 --> 15:07.360
这就记下来

15:07.360 --> 15:08.360
其中的命令

15:08.360 --> 15:09.360
5米Dev

15:09.360 --> 15:11.360
就Dev命令

15:11.360 --> 15:15.360
表示的是使用开发模式

15:15.360 --> 15:17.360
启动工程

15:17.360 --> 15:18.360
我们在开发阶段

15:18.360 --> 15:19.360
往往都是使用了这个命令

15:19.360 --> 15:21.360
好 我们回车

15:21.360 --> 15:23.360
这个问题

15:23.360 --> 15:25.360
你们那边应该不会发现

15:25.360 --> 15:27.360
你们那边应该不会有这个问题

15:27.360 --> 15:29.360
我这里也出现这个问题

15:29.360 --> 15:31.360
我不知道我是这个power shell

15:31.360 --> 15:33.360
我这里一直有这个问题

15:33.360 --> 15:35.360
我这个power shell有点问题

15:35.360 --> 15:36.360
他老是去读这个文件

15:36.360 --> 15:39.360
他读文件读错话了

15:39.360 --> 15:41.360
你们那边应该不会有这个问题

15:41.360 --> 15:43.360
每次要处理一下

15:43.360 --> 15:45.360
就是说他这里

15:45.360 --> 15:46.360
我们安装了全局

15:46.360 --> 15:47.360
就是我们的全局目录

15:47.360 --> 15:48.360
压了全局目录

15:48.360 --> 15:50.360
全局目录里边

15:50.360 --> 15:53.360
有这么一个5米

15:53.360 --> 15:55.360
这就是他的脚头架

15:55.360 --> 15:56.360
脚头架工具

15:56.360 --> 15:58.360
我们后面会讲

15:58.360 --> 16:00.360
我的东西在这里边

16:00.360 --> 16:02.360
5米

16:02.360 --> 16:04.360
power shell的话

16:04.360 --> 16:06.360
这个脚奔的话

16:06.360 --> 16:08.360
它本来应该是运行这个的

16:08.360 --> 16:09.360
应该运行这个才对

16:09.360 --> 16:11.360
跑去运行这个了

16:11.360 --> 16:12.360
我把这个

16:12.360 --> 16:13.360
这样子

16:13.360 --> 16:15.360
我把这里边的代码

16:15.360 --> 16:16.360
暂停到这

16:16.360 --> 16:17.360
暂停到这

16:17.360 --> 16:18.360
就完了

16:19.360 --> 16:21.360
是power shell的代码

16:21.360 --> 16:22.360
好 咱们来

16:22.360 --> 16:24.360
好 这里再来

16:24.360 --> 16:25.360
5米

16:28.360 --> 16:30.360
好 让它运行起来

16:30.360 --> 16:35.270
看它能不能跑起来

16:35.270 --> 16:36.270
好 那么这个

16:36.270 --> 16:37.270
它会给你看到没

16:37.270 --> 16:39.270
它会给你生成一个文件牙

16:39.270 --> 16:41.270
那么这个文件牙是什么意思呢

16:41.270 --> 16:43.270
就是它会根据你的工程

16:43.270 --> 16:44.270
进行编译

16:44.270 --> 16:45.270
因为你这个代码

16:45.270 --> 16:47.270
你啥都没依赖

16:47.270 --> 16:48.270
你这里

16:48.270 --> 16:50.270
这些东西啥都没依赖

16:50.270 --> 16:52.270
这个代码怎么跑起来了

16:52.270 --> 16:54.270
像那些路由也没有配置

16:54.270 --> 16:55.270
路由也没有配置

16:55.270 --> 16:56.270
那怎么跑起来呢

16:56.270 --> 16:58.270
它全靠进行编译

16:58.270 --> 17:00.270
它会把你这些代码的编译

17:00.270 --> 17:02.270
成为这些代码

17:02.270 --> 17:04.270
你看这里是不是有History

17:04.270 --> 17:05.270
还有Rotor

17:05.270 --> 17:06.270
就是Rotor的配置

17:06.270 --> 17:07.270
对吧

17:07.270 --> 17:09.270
我们后边还会详细的说

17:09.270 --> 17:11.270
就是它给你进行了一次编译

17:11.270 --> 17:12.270
编译了过后

17:12.270 --> 17:13.270
实际上运行的是啥呢

17:13.270 --> 17:15.270
运行的是这些代码

17:15.270 --> 17:16.270
实际上是运行的这些代码

17:16.270 --> 17:17.270
明白这个意思吗

17:17.270 --> 17:19.270
像我们这里的

17:19.270 --> 17:20.270
我们写的这些组件

17:20.270 --> 17:22.270
它实际上在这些代码里面

17:22.270 --> 17:23.270
给你生存了

17:23.270 --> 17:25.270
它在这些代码里面给你生存了

17:25.270 --> 17:26.270
所以说

17:26.270 --> 17:27.270
它的执行原理

17:27.270 --> 17:28.270
其实很简单

17:28.270 --> 17:29.270
你看就运行出来了

17:29.270 --> 17:31.270
我们这里先看一下吧

17:31.270 --> 17:32.270
运行出来了

17:32.270 --> 17:33.270
这里你看首页

17:33.270 --> 17:34.270
对吧

17:34.270 --> 17:36.270
你访问配几1

17:36.270 --> 17:37.270
是不是到页面1

17:37.270 --> 17:39.270
访问配几2

17:39.270 --> 17:40.270
到页面2

17:40.270 --> 17:41.270
是不是特别简单

17:41.270 --> 17:42.270
对吧

17:42.270 --> 17:43.270
我们就不用再去写

17:43.270 --> 17:44.270
那些东西把老代码了

17:44.270 --> 17:46.270
它会按照这种约定式的方式

17:46.270 --> 17:48.270
来进行开发

17:48.270 --> 17:50.270
这个文件讲你不要去删

17:50.270 --> 17:51.270
因为它实际上

17:51.270 --> 17:53.270
真正运行的是不是运行的这个

17:53.270 --> 17:54.270
对不对

17:54.270 --> 17:55.270
运行的是这些文件

17:55.270 --> 17:56.270
然后你会发现

17:56.270 --> 17:57.270
我们工程里面

17:57.270 --> 17:58.270
还多了一个什么

17:58.270 --> 17:59.270
漏灯码旧事

17:59.270 --> 18:00.270
这个漏灯码旧事里面

18:00.270 --> 18:01.270
好像也没啥用

18:01.270 --> 18:02.270
多了也没什么东西

18:02.270 --> 18:03.270
它实际上

18:03.270 --> 18:04.270
我们的React在哪呢

18:04.270 --> 18:05.270
React

18:05.270 --> 18:06.270
它已经跑到全距里边去了

18:06.270 --> 18:07.270
它已经在

18:07.270 --> 18:08.270
已经在内存里面

18:08.270 --> 18:09.270
给你加进去了

18:09.270 --> 18:10.270
就是在打包过后

18:10.270 --> 18:11.270
它已经有了

18:11.270 --> 18:12.270
已经有了

18:12.270 --> 18:14.270
这就是无米解释

18:14.270 --> 18:17.270
它的一个大开的使用方式

18:17.270 --> 18:18.270
这个东西

18:18.270 --> 18:20.270
我们关于这个约定

18:20.270 --> 18:21.270
怎么来进行约定

18:21.270 --> 18:22.270
还有哪些文件讲

18:22.270 --> 18:23.270
我们后面会详细的讲

18:23.270 --> 18:25.270
我们这里可能只是体验一下

18:25.270 --> 18:26.270
大家可以

18:26.270 --> 18:27.270
这些可能下来过后

18:27.270 --> 18:28.270
把这个无米安装好

18:28.270 --> 18:29.270
搭建这么一个工程

18:29.270 --> 18:30.270
来体验一下

18:30.270 --> 18:32.270
无米的开发的便捷性

18:32.270 --> 18:33.270
好吧

18:33.270 --> 18:34.270
当然了

18:34.270 --> 18:36.270
这里我们也可以

18:36.270 --> 18:38.270
如果说你习惯上使用

18:38.270 --> 18:40.270
12START的话

18:40.270 --> 18:42.270
也可以是不是在这里配置迷宁

18:42.270 --> 18:43.270
对吧

18:43.270 --> 18:44.270
在这里是不是可以配置迷宁

18:44.270 --> 18:46.270
就是把它变成

18:46.270 --> 18:48.270
写个START

18:48.270 --> 18:49.270
然后这个迷宁是什么

18:49.270 --> 18:50.270
就是无米

18:50.270 --> 18:51.270
对不对

18:51.270 --> 18:52.270
写了这么个迷宁

18:52.270 --> 18:54.270
那么这样迷宁写好了之后

18:54.270 --> 18:56.270
让我们停止

18:56.270 --> 18:58.270
12START

18:58.270 --> 18:59.270
你看是不是一样的

18:59.270 --> 19:00.270
对吧

19:00.270 --> 19:02.270
最终启动的还是无米

19:02.270 --> 19:03.270
而且我这里再说个东西

19:03.270 --> 19:05.270
就是无米里边

19:05.270 --> 19:07.270
它也提供了就是热

19:07.270 --> 19:09.270
就是热启动的功能

19:09.270 --> 19:10.270
热替换的功能

19:10.270 --> 19:11.270
就是说我们如果说

19:11.270 --> 19:13.270
在代码里边做了任何更改

19:13.270 --> 19:15.270
它会进行重新编译

19:15.270 --> 19:17.270
在这个文件里边进行重新编译

19:17.270 --> 19:18.270
编译过后呢

19:18.270 --> 19:20.270
实际上执行的是这些文件

19:20.270 --> 19:22.270
我们比方说在首约里边

19:22.270 --> 19:24.270
加上个首约2保存

19:24.270 --> 19:25.270
你看这里是不是重新编译呢

19:25.270 --> 19:26.270
对吧

19:26.270 --> 19:28.270
必有的重新编译

19:28.270 --> 19:31.840
刚才卡了一下

19:31.840 --> 19:32.840
所以变成首约2了

19:32.840 --> 19:33.840
对吧

19:33.840 --> 19:35.840
然后我们这里改成3

19:35.840 --> 19:37.840
后边编译就比较快了

19:37.840 --> 19:38.840
所以变成3了

19:38.840 --> 19:39.840
对吧

19:39.840 --> 19:40.840
它提供了热把插的功能

19:40.840 --> 19:42.840
所以说我们热启动的功能

19:42.840 --> 19:43.840
所以说我们这里以后

19:43.840 --> 19:44.840
跟之前一样

19:44.840 --> 19:45.840
改代码就完事了

19:46.840 --> 19:47.840
然后我再说一个就是说

19:47.840 --> 19:49.840
我们刚才使用的是

19:49.840 --> 19:50.840
使用的是把它

19:50.840 --> 19:52.840
用那个开发模式系统起来

19:52.840 --> 19:53.840
对吧

19:53.840 --> 19:55.840
那么我如果说我们开发完了

19:55.840 --> 19:56.840
要部署到服务器了

19:56.840 --> 19:57.840
要打包

19:57.840 --> 19:58.840
要打包进行部署

19:58.840 --> 20:00.840
以前的我们在reaction2里边

20:00.840 --> 20:01.840
是不是要使用什么

20:01.840 --> 20:02.840
build

20:02.840 --> 20:03.840
对吧

20:03.840 --> 20:04.840
我们看一下以前的

20:05.840 --> 20:06.840
build

20:06.840 --> 20:07.840
对吧

20:07.840 --> 20:09.840
可以使用build来进行打包

20:09.840 --> 20:10.840
那么在無蜜里边

20:10.840 --> 20:11.840
也可以进行打包

20:11.840 --> 20:12.840
无蜜里边

20:12.840 --> 20:14.840
我们也加上一个build

20:14.840 --> 20:15.840
加上个build

20:15.840 --> 20:17.840
那么它使用的命令

20:17.840 --> 20:19.840
就是无蜜build

20:19.840 --> 20:20.840
build

20:20.840 --> 20:21.840
就这么简单

20:21.840 --> 20:22.840
就这么简单

20:22.840 --> 20:23.840
那么我们试一下

20:23.840 --> 20:25.840
ear build

20:25.840 --> 20:26.840
打包

20:26.840 --> 20:27.840
你看

20:27.840 --> 20:29.840
它其实也是给你生成一个

20:29.840 --> 20:30.840
文念夹

20:30.840 --> 20:32.840
然后就是把我们

20:32.840 --> 20:33.840
编一好的东西

20:33.840 --> 20:35.840
就放到文念夹里边去了

20:38.840 --> 20:39.840
稍微等一下

20:44.220 --> 20:45.220
打包完成了

20:45.220 --> 20:46.220
你看

20:46.220 --> 20:47.220
这里是不是多了一个地省目录

20:47.220 --> 20:48.220
对不对

20:48.220 --> 20:49.220
多了一个地省目录

20:49.220 --> 20:50.220
那么这里的

20:50.220 --> 20:52.220
页面模板

20:52.220 --> 20:53.220
页面模板

20:53.220 --> 20:54.220
它默认是一个

20:54.220 --> 20:56.220
默认是一个标准模板

20:56.220 --> 20:57.220
默认是一个标准模板

20:57.220 --> 20:59.220
就是DIV

20:59.220 --> 21:01.220
ID為入程的标准模板

21:01.220 --> 21:02.220
当然这个模板

21:02.220 --> 21:03.220
我们后边还可以改

21:03.220 --> 21:05.220
不过一般通常情况下

21:05.220 --> 21:06.220
也不太需要去改它

21:06.220 --> 21:07.220
你看我们现在

21:07.220 --> 21:08.220
你是不是连这个目录都没有

21:08.220 --> 21:10.220
public这个目录都没有

21:10.220 --> 21:11.220
对不对

21:11.220 --> 21:13.220
这个目录可不可以有

21:13.220 --> 21:14.220
可以有

21:14.220 --> 21:16.220
你写了一个public目录

21:16.220 --> 21:17.220
如果说你写了

21:17.220 --> 21:18.220
一个public目录

21:18.220 --> 21:19.220
public目录的话

21:19.220 --> 21:21.220
那么它会独立的public目录

21:21.220 --> 21:22.220
如果你没有写的话

21:22.220 --> 21:23.220
它会自动给你生成

21:23.220 --> 21:25.220
生成这个模板页面

21:25.220 --> 21:26.220
对吧

21:26.220 --> 21:27.220
你看GS是不是给打包进来了

21:27.220 --> 21:28.220
对不对

21:29.220 --> 21:30.220
好

21:30.220 --> 21:31.220
这就是它的打包

21:31.220 --> 21:33.220
打包也特别特别简单

21:33.220 --> 21:34.220
就没啥了

21:34.220 --> 21:35.220
就没啥了

21:35.220 --> 21:36.220
我们之后

21:36.220 --> 21:37.220
再来讲

21:37.220 --> 21:38.220
什么其他目录的配置

21:38.220 --> 21:40.220
里边还有很多很多的配置

21:40.220 --> 21:42.220
我们最简单的用法就是

21:42.220 --> 21:43.220
直接建个src目录

21:43.220 --> 21:44.220
直接写

21:44.220 --> 21:45.220
其实呢你甚至可以

21:45.220 --> 21:46.220
不建src目录

21:46.220 --> 21:47.220
不要说

21:47.220 --> 21:50.590
不要说我把这个删掉

21:50.590 --> 21:53.590
然后我把配置放出来

21:53.590 --> 21:55.590
src目录都不要了

21:55.590 --> 21:57.590
这个目录都不要了

21:57.590 --> 21:58.590
直接在这里写配置

21:58.590 --> 22:00.590
一开始是不是连这两个都没有

22:00.590 --> 22:01.590
对吧

22:01.590 --> 22:02.590
连这两个都没有

22:02.590 --> 22:03.590
直接删掉

22:03.590 --> 22:04.590
你看

22:04.590 --> 22:05.590
我们建一个目录

22:05.590 --> 22:06.590
直接来写

22:06.590 --> 22:07.590
初始化一下

22:07.590 --> 22:08.590
直接开始写页面

22:08.590 --> 22:09.590
写完了过后怎么办

22:09.590 --> 22:11.590
umistart

22:12.590 --> 22:13.590
我们后面还是用

22:13.590 --> 22:14.590
同意的方式的启动

22:14.590 --> 22:16.590
你会发现是一样的

22:16.590 --> 22:18.590
它并不依赖于src目录

22:18.590 --> 22:20.590
只不过习惯上了

22:20.590 --> 22:22.590
我们通常会写上src目录

22:22.590 --> 22:24.590
只是习惯上这样子而已

22:24.590 --> 22:26.590
实际上它并不依赖

22:26.590 --> 22:27.590
你不写src目录

22:27.590 --> 22:28.590
直接在这里写配置

22:28.590 --> 22:30.590
没有任何问题

22:31.590 --> 22:32.590
好了

22:32.590 --> 22:33.590
印出来

22:33.590 --> 22:34.590
你看是一样的

22:34.590 --> 22:35.590
手页

22:35.590 --> 22:36.590
配置一

22:36.590 --> 22:37.590
对不对

22:37.590 --> 22:38.590
是一样的

22:38.590 --> 22:39.590
好

22:39.590 --> 22:40.590
这节课

22:40.590 --> 22:41.590
我们就大概体验一下

22:41.590 --> 22:42.590
5米

22:42.590 --> 22:44.590
它做一个简单的效果

22:44.590 --> 22:45.590
怎么去做

22:45.590 --> 22:46.590
下节课

22:46.590 --> 22:48.590
我们开始来讲5米方方面面的东西

22:48.590 --> 22:50.590
首先让我们讲它的路由

22:50.590 --> 22:51.590
不着急

22:51.590 --> 22:52.590
我们下节课再说

