WEBVTT

00:00.820 --> 00:04.820
之前我们已经准备好了工程

00:04.820 --> 00:08.220
已经准备好了各种开发环境

00:08.220 --> 00:11.320
也认识到了我们的React里面

00:11.320 --> 00:14.720
他写个Hollower怎么来写

00:14.720 --> 00:18.220
那么这节课咱们来深入的去了解一下

00:18.220 --> 00:20.320
我们的解释X余法

00:20.320 --> 00:22.120
因为我们之前提了一下

00:22.120 --> 00:23.920
但是没有做过多的讲解

00:23.920 --> 00:25.420
好吧 那么这里呢

00:25.420 --> 00:27.020
一部分一部分来认识

00:27.020 --> 00:29.820
首先什么是解释X

00:30.320 --> 00:32.120
怎么玩呢 我们之前说过

00:32.120 --> 00:36.620
它是Facebook起草的一个解释扩展余法

00:36.620 --> 00:41.520
它希望就是ES标准里面能够收入这种余法

00:41.520 --> 00:43.620
结果收入没有收入了

00:43.620 --> 00:46.820
但是并没有把它作为正式的标准

00:46.820 --> 00:49.120
所以说我们目前在浏览器里面

00:49.120 --> 00:50.520
还不能直接使用

00:50.520 --> 00:53.520
它需要Bable来进行编译

00:53.520 --> 00:54.920
这是第一个点

00:54.920 --> 00:56.720
第二点我们之前也说过

00:56.720 --> 01:00.420
解释X它本质上就是一个解释对象

01:00.420 --> 01:03.220
它最终会被转换为什么呢

01:03.220 --> 01:04.620
就是React

01:04.620 --> 01:06.720
最终会被转换为这种余法

01:06.720 --> 01:08.220
React create element

01:08.220 --> 01:10.620
所以说我们最终起作用的是这个东西

01:10.620 --> 01:13.820
好吧 这是我们也是我们之前说过的

01:13.820 --> 01:16.920
然后下面这一个我们之前就没有提说了

01:16.920 --> 01:20.220
就是说每一个解释X表达式

01:20.220 --> 01:24.020
它尤其仅有一个根结点

01:24.120 --> 01:25.720
比方说 咱们来看一下

01:26.920 --> 01:28.120
就这一块

01:28.120 --> 01:31.320
这里我们这里是不是传了一个对象进去

01:31.320 --> 01:32.320
我们之前说过

01:32.320 --> 01:34.120
这个东西其实相当于是什么

01:34.120 --> 01:37.120
相当于是不是就是React create element

01:37.120 --> 01:38.220
相当于是这个东西

01:38.220 --> 01:39.720
创建了一个对象

01:39.720 --> 01:41.320
创建了一个React元素

01:41.320 --> 01:42.820
那么我们当然可以把这个东西

01:42.820 --> 01:44.320
是不是可以保存到变量里边

01:44.320 --> 01:45.020
对吧

01:45.020 --> 01:46.820
把它保存到变量里边

01:46.820 --> 01:48.520
保存了变量比方说H1元素

01:50.720 --> 01:52.820
咱们把这个东西写进来

01:52.820 --> 01:53.920
写进来

01:54.020 --> 01:57.820
通常情况下我们这里前后会加上两个扩号

01:57.820 --> 01:59.820
前后会加上两个扩号

01:59.820 --> 02:01.620
表示这是个表达式

02:01.620 --> 02:04.020
这应该是介式基础里边的姿势吧

02:04.020 --> 02:05.520
就是说我们扩号里边的东西

02:05.520 --> 02:07.120
它是一个表达式

02:07.120 --> 02:08.320
把扩起来

02:08.320 --> 02:09.620
为了防止什么呢

02:09.620 --> 02:12.220
防止就是你如果你这里没有写分号

02:12.220 --> 02:14.920
防止跟其他的表达式混合

02:14.920 --> 02:16.920
造成代码解析错误

02:16.920 --> 02:18.220
所以说尽量的

02:18.220 --> 02:20.520
大家尽量的把这个小扩号给它加上

02:20.520 --> 02:22.520
包括如果你直接输写到这的话

02:22.520 --> 02:24.820
尽量的也把这个小扩号给它加上

02:25.820 --> 02:27.020
尽量的把个小扩号加上

02:27.020 --> 02:28.220
表示这是一个表达式

02:28.220 --> 02:30.120
这个表达式最终会生成一个对象

02:31.120 --> 02:31.320
好

02:31.320 --> 02:33.120
咱们再来说刚才我们说的问题

02:33.120 --> 02:33.720
就是说

02:34.520 --> 02:37.120
GSX它必须要有一个根结点

02:37.120 --> 02:39.220
你看一下我们目前的那种输写方式

02:39.220 --> 02:40.220
是不是有个根结点

02:40.220 --> 02:40.620
对吧

02:41.520 --> 02:43.220
这是我们的GSX表达式

02:43.220 --> 02:44.220
是不是有个根结点

02:44.220 --> 02:44.520
对吧

02:44.520 --> 02:46.020
只有有根结点的时候

02:46.020 --> 02:48.820
它才能够正常渲染

02:50.120 --> 02:51.020
才能够正常渲染

02:51.020 --> 02:51.920
把它启动起来

02:53.520 --> 02:54.120
好

02:54.120 --> 02:56.420
那如果有些情况下

02:56.420 --> 02:57.120
没有根结点

02:57.120 --> 02:57.920
不要说

02:57.920 --> 02:58.820
不要说

02:58.820 --> 03:00.520
那你看一下这个GSX表达式

03:00.520 --> 03:01.920
你这样子写这么正确

03:02.720 --> 03:04.320
比方说我们这里呢

03:04.320 --> 03:05.120
换个行吧

03:05.120 --> 03:05.920
换个行

03:05.920 --> 03:07.520
大家看上更加清楚一点

03:07.520 --> 03:07.820
好

03:07.820 --> 03:08.820
这是个A7E元素

03:08.820 --> 03:10.220
下面加个P元素

03:10.220 --> 03:11.020
你看一下

03:11.020 --> 03:12.420
这样子写这么正确了

03:12.420 --> 03:13.920
这样子写是不行的

03:13.920 --> 03:14.920
是不行的

03:18.620 --> 03:20.020
好这里我们保存

03:20.020 --> 03:21.020
保存

03:21.020 --> 03:21.620
你看一下

03:21.720 --> 03:22.520
是不是爆错了

03:22.520 --> 03:24.820
他说field to compile

03:24.820 --> 03:25.720
编译错误

03:25.720 --> 03:27.720
就是babel进行编译的时候

03:27.720 --> 03:28.920
他就没法编译了

03:28.920 --> 03:30.020
为什么没法编译呢

03:30.020 --> 03:31.820
他为什么不能有多个根结点呢

03:31.820 --> 03:33.620
是因为他最终会编译成啥

03:33.620 --> 03:35.220
是编译成react

03:35.220 --> 03:36.620
create element

03:36.620 --> 03:37.120
对吧

03:37.120 --> 03:39.820
你最终的就是这个GSX表达式

03:39.820 --> 03:41.320
他最终会编译成这个东西

03:42.720 --> 03:43.520
那比方说

03:43.520 --> 03:44.220
他这一句话

03:44.220 --> 03:45.420
他怎么会怎么编译

03:45.420 --> 03:46.120
他会怎么编译呢

03:46.120 --> 03:46.920
他会这样的编译

03:46.920 --> 03:48.820
他编译成出来的结构是这样子

03:48.820 --> 03:49.020
好

03:49.020 --> 03:51.820
第一个元素内形是H1

03:51.820 --> 03:53.420
属性没有

03:53.420 --> 03:54.620
然后呢

03:54.620 --> 03:55.820
指元素

03:55.820 --> 03:58.020
指元素有一个Hello

03:58.020 --> 04:00.220
Hello world

04:00.220 --> 04:00.720
对吧

04:00.720 --> 04:02.620
还有一个指元素是什么了

04:02.620 --> 04:03.420
是不是又来一个

04:03.420 --> 04:03.720
对吧

04:03.720 --> 04:08.120
又来一个react create element

04:08.120 --> 04:09.820
这里又是个span

04:09.820 --> 04:11.320
我们这里换个行

04:11.320 --> 04:12.520
span元素

04:12.520 --> 04:14.720
然后又是他没有属性

04:14.720 --> 04:16.220
然后span元素的指元素

04:16.220 --> 04:17.720
是不是这个span元素

04:17.720 --> 04:18.520
对吧

04:18.520 --> 04:21.320
他最终会编译成这样的一种结构

04:21.320 --> 04:23.520
那如果你写的两个根结点

04:23.520 --> 04:24.220
他怎么编译呢

04:24.220 --> 04:24.620
你告诉我

04:24.620 --> 04:25.720
他怎么编译这个玩意

04:25.720 --> 04:27.120
他没法编译

04:27.120 --> 04:28.820
因为他一定是把整个表达式

04:28.820 --> 04:30.320
编译成这么一句话

04:30.320 --> 04:31.620
那这个代码

04:31.620 --> 04:33.020
他只能创建一个元素

04:33.020 --> 04:33.520
对吧

04:33.520 --> 04:35.220
他只能创建一个元素

04:35.220 --> 04:35.820
所以说呢

04:35.820 --> 04:36.320
你这里

04:36.320 --> 04:38.820
如果你写的两个根结点

04:38.820 --> 04:40.220
那他是没法编译的

04:40.220 --> 04:41.720
没法编译

04:41.720 --> 04:42.620
明白的意思吧

04:42.620 --> 04:43.120
所以说呢

04:43.120 --> 04:43.920
你这一块呢

04:43.920 --> 04:46.520
只能写一个根结点

04:46.520 --> 04:48.420
一个根结点

04:48.520 --> 04:49.120
但是啊

04:49.120 --> 04:51.120
如果你遇到一种特殊情况

04:51.120 --> 04:51.820
我们后边呢

04:51.820 --> 04:54.120
可能会遇到这种特殊情况

04:54.120 --> 04:56.020
如果你遇到一种特殊情况

04:56.020 --> 04:58.820
你必须要在外面去掏一个根结点

04:58.820 --> 05:00.920
就是你必须要写两个元素

05:00.920 --> 05:02.920
并列的两个元素

05:02.920 --> 05:03.820
但是呢

05:03.820 --> 05:06.220
他又要求你必须要有根结点

05:06.220 --> 05:07.520
那你怎么办呢

05:07.520 --> 05:08.520
两种办法

05:08.520 --> 05:09.620
第一种办法是写什么呢

05:09.620 --> 05:11.120
直接写个div在这

05:11.120 --> 05:11.720
对吧

05:11.720 --> 05:13.320
一个掏一个根结点不完了吗

05:13.320 --> 05:14.520
对不对啊

05:14.520 --> 05:16.320
保存你看一下

05:16.320 --> 05:17.020
那不就完事了吗

05:17.020 --> 05:17.820
对不对啊

05:17.820 --> 05:18.520
检查

05:18.520 --> 05:19.920
你看一下外面是不是个div

05:19.920 --> 05:20.520
对不对

05:20.520 --> 05:22.420
反映到真实的动物元素里边

05:22.420 --> 05:24.120
他就生成了div

05:24.120 --> 05:24.520
但是呢

05:24.520 --> 05:26.620
有的时候你可能会有一个特殊的需求

05:26.620 --> 05:27.920
就是说

05:27.920 --> 05:28.420
外边呢

05:28.420 --> 05:30.020
你不能套任何其他元素

05:30.020 --> 05:30.520
可能呢

05:30.520 --> 05:32.120
会影响你的元素结构

05:32.120 --> 05:33.920
可能会影响你的样式

05:33.920 --> 05:35.320
就是你不能套元素

05:35.320 --> 05:35.820
但是呢

05:35.820 --> 05:37.220
你就必须要这样子写

05:37.220 --> 05:38.220
那有可能为的

05:38.220 --> 05:38.820
有可能啊

05:38.820 --> 05:41.420
我们将来有可能会遇到这样的一个特殊需求

05:41.420 --> 05:43.320
我又就要写两个

05:43.320 --> 05:44.620
或者是多个

05:44.620 --> 05:45.120
但是呢

05:45.120 --> 05:46.920
外面要套有根结点

05:46.920 --> 05:49.120
但是我又不能套一个真实的元素

05:49.120 --> 05:51.320
因为真实的元素会反映到页面上

05:51.320 --> 05:53.320
我不希望外面是页面上是div

05:53.320 --> 05:55.520
我就希望里边是一个a其一个p

05:55.520 --> 05:56.720
那怎么办呢

05:56.720 --> 05:57.820
那这个时候呢

05:57.820 --> 05:59.220
我们可以用这种方式

05:59.220 --> 06:01.320
你把这个div三个字三的

06:01.320 --> 06:02.020
完了

06:02.020 --> 06:03.020
没了

06:03.020 --> 06:03.620
这样子呢

06:03.620 --> 06:05.020
他既是有有

06:05.020 --> 06:06.820
他既有了一个根结点

06:06.820 --> 06:08.320
是一个空的根结点啊

06:08.320 --> 06:10.720
只要元素的结构正确就行了

06:10.720 --> 06:12.320
你只要有根结点就行

06:12.320 --> 06:13.920
我管你是怎么结点啊

06:13.920 --> 06:15.320
你只要有有就行

06:15.320 --> 06:17.020
那么现在有了一个根结点

06:17.020 --> 06:19.120
你看没有没有爆错了

06:19.120 --> 06:19.720
并且呢

06:19.720 --> 06:22.020
他由于他是一个空的根结点

06:22.020 --> 06:26.120
那么他也不会反映到我们的真实的动物里面去

06:26.120 --> 06:26.820
你看一下

06:26.820 --> 06:28.120
保存

06:28.120 --> 06:28.520
你看一下

06:28.520 --> 06:29.620
目前

06:29.620 --> 06:30.520
这个元素结构

06:30.520 --> 06:32.520
你看直接就是a其一p元素了

06:32.520 --> 06:33.520
对吧啊

06:33.520 --> 06:34.220
如果以后呢

06:34.220 --> 06:35.520
遇到的那种特殊情况

06:35.520 --> 06:37.320
总之你必须要有根结点啊

06:37.320 --> 06:38.520
每一个表达是

06:38.520 --> 06:42.620
每一个gsx的表达是必须要有跟有一个根结点

06:42.620 --> 06:43.620
如果没有的话

06:43.620 --> 06:45.720
如果你实在找不到什么根结点的话

06:45.720 --> 06:47.220
一个加这个

06:47.220 --> 06:47.720
这个呢

06:47.720 --> 06:49.220
其实是一个语法堂

06:49.220 --> 06:51.620
他真实的完整的写法是什么呢

06:51.620 --> 06:53.620
是这个react

06:53.620 --> 06:54.420
啊

06:54.420 --> 06:55.620
free fragment

06:55.620 --> 06:56.820
fragment

06:56.820 --> 06:59.020
他真实的语法是这个

06:59.020 --> 07:00.520
哦这里这里我说一下啊

07:00.520 --> 07:01.620
有些同学在问啊

07:01.620 --> 07:03.020
可能有些同学会问

07:03.020 --> 07:04.720
哎呦老师你这个东西好神奇啊

07:04.720 --> 07:05.820
你为什么啊

07:05.820 --> 07:07.620
你为什么这里改了这个

07:07.620 --> 07:09.020
哎

07:09.020 --> 07:10.320
你为什么这里

07:10.320 --> 07:11.120
这里一删

07:11.120 --> 07:13.020
后边结束元素也删了啊

07:13.020 --> 07:14.020
它是个插件啊

07:14.020 --> 07:17.220
它是个插件叫做啥玩意这个名字

07:17.220 --> 07:18.220
我看一下啊

07:18.220 --> 07:21.520
就这个啊叫all to rename tag

07:21.520 --> 07:23.620
你安装一下这个插件就完事了啊

07:23.620 --> 07:24.620
非常方便的啊

07:24.620 --> 07:26.420
我这里之前忘说了啊

07:26.420 --> 07:28.120
其实他的他是一个语法堂啊

07:28.120 --> 07:30.720
他的真实写法是一个啊fragment

07:30.720 --> 07:31.720
fragment表示什么意思

07:31.720 --> 07:32.720
表示片段啊

07:32.720 --> 07:34.820
这个很简单非常非常简单

07:34.820 --> 07:35.920
就是一个片段

07:35.920 --> 07:36.920
就是这里边呢

07:36.920 --> 07:38.520
是一个结点的片段啊

07:38.520 --> 07:40.220
是一个结点的片段啊

07:40.220 --> 07:41.120
保存

07:41.120 --> 07:42.920
那么这个东西他不会真实的

07:42.920 --> 07:45.620
他不会对应到真实的动物元素

07:45.620 --> 07:46.820
真实的动物元素里边

07:46.820 --> 07:47.820
他这东西生成出来

07:47.820 --> 07:49.120
啥都没有啊

07:49.120 --> 07:51.620
他只是呢来做这么一种结构

07:51.620 --> 07:52.920
保存你看一下吧

07:52.920 --> 07:55.020
啊你看是不是一样的一样的效果啊

07:55.020 --> 07:57.720
那咱们把这个aq打印出来看一下吧

07:57.720 --> 08:01.120
concernog aq打印出来保存啊

08:01.120 --> 08:03.420
你看一下他的结构啊

08:03.420 --> 08:04.820
他的内形是什么呢

08:04.820 --> 08:06.720
他的内形就不再是一个制服圈了

08:06.720 --> 08:07.920
对吧我们之前内形是什么

08:07.920 --> 08:10.120
aq span对不对

08:10.120 --> 08:10.920
那他的内形呢

08:10.920 --> 08:12.520
就不再是一个制服圈了啊

08:12.520 --> 08:14.120
他变成了一个symbol

08:14.120 --> 08:16.520
symbolreactor fragment

08:16.520 --> 08:18.220
他是这么一种内形了

08:18.220 --> 08:19.320
好

08:19.320 --> 08:20.220
好然后下边呢

08:20.220 --> 08:21.720
我们看他的指员数啊

08:21.720 --> 08:23.220
指员数其实都是一样的啊

08:23.220 --> 08:24.420
指员数都是一样的

08:24.420 --> 08:27.820
比方说他里边有一个aq一元数对吧

08:27.820 --> 08:30.420
aq一元数呢又有指员数

08:30.420 --> 08:31.420
啊什么指员数呢

08:31.420 --> 08:32.920
一个是制服圈哈罗沃尔的

08:32.920 --> 08:34.420
一个是呢span元数

08:34.420 --> 08:35.920
然后呢另外一个指员数呢

08:35.920 --> 08:38.420
是这个p元数啊p元数

08:38.420 --> 08:41.020
p元数里边也有文本结点

08:41.020 --> 08:42.920
对吧他形成了这么一种结构了啊

08:42.920 --> 08:44.220
总之呢你一定要理解啊

08:44.220 --> 08:45.620
他是一个对象结构

08:45.620 --> 08:47.420
那么如果你不希望啊

08:47.420 --> 08:49.220
这个对象呢必须要有个根结点

08:49.220 --> 08:50.820
如果你不希望这个根结点

08:50.820 --> 08:52.520
反应到动物里边的话

08:52.520 --> 08:53.820
那么你可以用这种方式

08:53.820 --> 08:55.220
当然我们平时写的最多的啊

08:55.220 --> 08:57.120
应该是这种方式

08:57.120 --> 08:58.220
你要这意思吧

08:58.220 --> 08:59.820
好这是关于这一点啊

08:59.820 --> 09:02.220
就是他每一个gsx表达式呢

09:02.220 --> 09:04.120
有且只有一个根结点

09:05.320 --> 09:06.220
好另外一个呢

09:06.220 --> 09:08.920
就是每一个gsx元数呢

09:09.020 --> 09:11.020
他必须要有结束啊

09:11.020 --> 09:12.520
必须要结束

09:12.520 --> 09:15.120
这个东西呢是一个差没有规范啊

09:15.120 --> 09:16.220
他是差没有规范

09:16.220 --> 09:17.320
他不是atma规范

09:17.320 --> 09:18.420
atma5里边呢

09:18.420 --> 09:20.020
他不要求你每个元数

09:20.020 --> 09:21.220
比方说1米级元数

09:21.220 --> 09:23.020
他不要求你有结束

09:23.020 --> 09:25.420
但是在gsx里面不行啊

09:25.420 --> 09:26.820
他是不行的比方说

09:26.820 --> 09:27.720
咱们来看一下吧

09:28.920 --> 09:30.420
啊上面我们注射掉啊

09:33.920 --> 09:34.720
好这里呢

09:35.520 --> 09:37.820
我们这里写上这么一个元数啊

09:37.820 --> 09:39.320
一个1米级元数

09:39.320 --> 09:40.520
啊这个1米级元数呢

09:40.520 --> 09:41.920
我们这样子写

09:41.920 --> 09:43.320
我们通常这样子写

09:43.320 --> 09:44.120
好1米级

09:47.580 --> 09:48.880
1米级

09:48.880 --> 09:52.680
啊比方说啊src啊src路径啊

09:52.680 --> 09:54.480
就地址src路径的话

09:54.480 --> 09:56.480
我们随便找一张图片吧

09:56.480 --> 09:58.380
啊就是比方说哈士奇

10:02.860 --> 10:06.500
怎么这么卡呢

10:06.500 --> 10:07.800
啊就这张图片吧啊

10:07.800 --> 10:09.200
点击右键啊

10:09.200 --> 10:10.800
复制图片地址

10:10.800 --> 10:13.000
ok我们这里把地址写进来

10:13.100 --> 10:14.200
啊写进来

10:14.200 --> 10:16.400
如果说按照那个

10:16.400 --> 10:18.700
我们之前学习的Edmmer的写法的话

10:18.700 --> 10:21.200
那是不是可以是不是不要写这个结束元数

10:21.200 --> 10:21.700
对吧

10:21.700 --> 10:23.800
这可以不要写结束元数

10:23.800 --> 10:26.500
那么现在我们就直接用rex啊

10:26.500 --> 10:27.500
rex

10:27.700 --> 10:28.200
dome

10:29.000 --> 10:29.600
dreamer

10:30.500 --> 10:32.200
啊然后呢1米级

10:32.200 --> 10:33.300
然后后边是啥

10:33.300 --> 10:34.800
你看其实他已经给你爆错了

10:34.800 --> 10:35.500
看到没

10:35.500 --> 10:36.800
他已经给你爆错了

10:36.800 --> 10:37.500
保存啊

10:37.500 --> 10:38.900
你看这个颜色都不太对劲了

10:38.900 --> 10:39.600
对吧

10:39.600 --> 10:41.600
你看这边是不是爆错了

10:41.600 --> 10:42.200
对吧

10:42.200 --> 10:42.900
他说什么

10:43.000 --> 10:45.400
他说的是on terminated

10:45.400 --> 10:47.900
表示的是没有结束的

10:48.000 --> 10:49.700
jsx表达是

10:50.300 --> 10:53.400
jsx里边他是遵从的是差没有规范

10:53.400 --> 10:55.100
所以说他必须要有结束

10:55.100 --> 10:57.600
那么这个结束呢有两种结束方式

10:57.600 --> 10:59.700
第一种呢就是直接这样子写啊

10:59.800 --> 11:01.400
用这种方式来进行结束

11:01.700 --> 11:03.100
啊保存咱们来看一下吧

11:03.300 --> 11:04.700
啊是不是可以显示出来

11:04.700 --> 11:06.800
看一下元数结构啊元数结构

11:06.800 --> 11:09.100
他生成出来的元数结构呢是不是啊

11:09.100 --> 11:10.700
正常的一个元数结构对吧

11:10.900 --> 11:12.800
生成出来是一个正常的元数结构

11:13.200 --> 11:14.800
好这是你一个啊这是一个

11:15.300 --> 11:16.500
好另外呢

11:17.000 --> 11:18.500
另外啊他这里包了个警告啊

11:18.500 --> 11:19.200
他说什么呢

11:19.400 --> 11:20.900
他说这个1米9元数呢

11:20.900 --> 11:23.900
他应该是有一个什么奥特殊性啊

11:23.900 --> 11:24.800
奥特殊性

11:25.500 --> 11:27.400
那就写吧写个奥特殊性吧

11:27.400 --> 11:29.700
无所谓啊他是这种规范性的写法

11:30.000 --> 11:33.200
好那如果你不希望这种方式来写

11:33.200 --> 11:34.000
也行

11:34.400 --> 11:35.200
怎么写呢

11:35.300 --> 11:37.000
你这样子自结束

11:37.300 --> 11:39.000
这是你可以把理解成为一个

11:39.000 --> 11:40.500
以前很老的时候啊

11:40.500 --> 11:42.300
九百万的时候Ateema就是这样的写的

11:42.500 --> 11:44.100
他是遵从差没有规范

11:44.200 --> 11:45.300
差没有一个元数呢

11:45.300 --> 11:46.400
他必须要有结束

11:46.500 --> 11:48.500
不管你是有一个结束标记

11:48.700 --> 11:51.600
还是说你有一个字结束都得结束

11:51.600 --> 11:54.500
你看这种写法结束也行啊也行

11:54.500 --> 11:55.100
保存

11:55.900 --> 11:57.100
看没有对吧

11:57.200 --> 11:58.100
也出来了啊

11:58.700 --> 12:00.400
也出来了总之呢

12:00.400 --> 12:02.400
你得结束啊总归你得结束

12:02.900 --> 12:04.500
当我们写的时候呢

12:04.700 --> 12:06.100
你可以这样子来写啊

12:06.100 --> 12:08.400
就是1米几一个鞋杠太不见

12:08.400 --> 12:10.200
你看就生成这样的结构了

12:10.300 --> 12:10.800
对不对

12:11.200 --> 12:14.000
我们把这个地址复制一下啊

12:14.900 --> 12:15.700
复制地址

12:16.300 --> 12:18.000
ok把地址复制进去

12:18.100 --> 12:18.900
保存啊

12:19.200 --> 12:20.300
这样子写也可以啊

12:20.300 --> 12:21.000
总之呢

12:21.000 --> 12:23.100
你得结束啊总归你得结束

12:23.600 --> 12:25.900
包括什么音铺车元数的一些东西对吧

12:25.900 --> 12:26.800
你都得结束啊

12:26.800 --> 12:28.100
凡是要结束的话

12:28.100 --> 12:30.000
你可以使用结束标记

12:30.000 --> 12:31.600
也可以使用这种字结束

12:31.600 --> 12:33.200
你不结束肯定要出问题

12:33.400 --> 12:36.200
这是关于jsx这些基本语法

12:36.800 --> 12:37.900
这是第一部分啊

12:38.000 --> 12:41.000
什么是jsx以及它的一些基本语法

12:42.100 --> 12:42.400
好

12:42.400 --> 12:42.800
下面呢

12:42.800 --> 12:46.000
我们来看一下jsx里边还可以做什么事情

12:46.500 --> 12:47.400
他可以做什么呢

12:47.600 --> 12:49.800
他还可以签入一个表达式

12:50.200 --> 12:51.700
就是js表达式

12:52.300 --> 12:53.600
他可以做这么一件事啊

12:53.600 --> 12:54.800
签入表达式

12:54.900 --> 12:55.300
ok啊

12:55.300 --> 12:56.000
那咱们呢

12:56.000 --> 12:59.100
就把这个这个是js复制一下啊

12:59.100 --> 13:00.300
重新copy一个啊

13:00.300 --> 13:00.900
copy一个

13:01.300 --> 13:03.000
这是我们之前的代码啊

13:03.000 --> 13:04.300
那现在我们重新写一遍

13:04.600 --> 13:05.400
重新写一下

13:06.600 --> 13:06.900
好

13:06.900 --> 13:07.800
比方说吧

13:07.900 --> 13:08.400
咱们呢

13:08.400 --> 13:09.200
又来一个啊

13:09.200 --> 13:10.200
又来一个表达式

13:10.800 --> 13:13.600
嗯就一个div嘛

13:13.600 --> 13:14.400
就div

13:14.800 --> 13:15.000
好

13:15.000 --> 13:16.800
他是一个jsx表达式

13:17.400 --> 13:17.800
然后呢

13:17.800 --> 13:19.000
这个表达式里边呢

13:19.000 --> 13:21.300
比方说我们呢

13:21.300 --> 13:23.300
写一个he元数嘛啊

13:23.500 --> 13:24.600
he元数

13:24.800 --> 13:27.500
我希望在he元数里边呢

13:27.800 --> 13:29.600
写上一个计算啊

13:29.600 --> 13:30.500
写上一个计算

13:30.700 --> 13:32.400
就就简单的啊

13:32.400 --> 13:33.100
比方说

13:33.200 --> 13:35.100
我们要算出比方说啊

13:36.100 --> 13:42.000
11234乘以4321等于啊

13:42.000 --> 13:42.900
多少啊

13:42.900 --> 13:43.600
等于多少

13:44.000 --> 13:44.800
也就是我们这里呢

13:44.800 --> 13:46.300
有可能会有两个变量啊

13:46.300 --> 13:47.500
有可能会有两个变量

13:47.600 --> 13:48.500
就是a

13:49.400 --> 13:50.800
a等于1234

13:51.100 --> 13:51.700
b呢

13:51.700 --> 13:53.600
等于4321啊

13:54.500 --> 13:55.700
啊有这么两个变量

13:55.800 --> 13:57.800
我想把两个变量的值呢

13:57.800 --> 13:58.800
放到这个位置

13:58.900 --> 14:00.600
我想把a 变量的值放到这

14:00.900 --> 14:02.100
b 变量的值放到这

14:02.300 --> 14:02.700
然后呢

14:02.700 --> 14:04.000
两个相乘的结果放到这

14:04.300 --> 14:05.300
那怎么来办呢

14:05.400 --> 14:06.300
那怎么来做呢

14:06.700 --> 14:08.300
啊可以这样来写

14:08.700 --> 14:10.600
在jsx表达式里边

14:10.600 --> 14:13.400
是可以嵌入js表达式的啊

14:13.400 --> 14:15.100
其实可以输写js代码的

14:15.500 --> 14:16.300
那怎么来写呢

14:17.200 --> 14:20.200
就直接写两个大括号完事了啊

14:20.600 --> 14:23.000
之前就有点类似于什么模板制服串的吧

14:23.000 --> 14:24.000
模板制服串拼接

14:24.000 --> 14:25.100
是不是这样的拼接的

14:25.300 --> 14:26.400
那么现在把多的去掉

14:26.400 --> 14:27.700
直接输写两个大括号

14:27.900 --> 14:29.400
表大括号里边呢

14:29.400 --> 14:32.300
就表示的是jsx的表达式

14:32.900 --> 14:33.100
好

14:33.100 --> 14:34.400
那这里呢我们怎么写呢

14:34.900 --> 14:36.200
是就写个a就完事了

14:36.200 --> 14:36.600
对吧

14:36.800 --> 14:37.700
这里写啥呢

14:37.800 --> 14:38.500
就写个a

14:38.900 --> 14:40.100
就写个b就完事了

14:40.200 --> 14:41.100
这里写啥呢

14:41.400 --> 14:43.400
是不是可以写表达式a乘以b

14:43.700 --> 14:44.100
对吧

14:44.300 --> 14:45.100
就写完事了

14:45.600 --> 14:47.000
好然后把它旋转出来啊

14:47.000 --> 14:47.900
react stone

14:48.400 --> 14:49.100
Render

14:49.800 --> 14:50.300
Render

14:50.500 --> 14:51.200
好第一个呢

14:51.200 --> 14:51.800
div

14:52.000 --> 14:52.400
第二个呢

14:52.400 --> 14:53.000
document

14:53.000 --> 14:53.900
query is later

14:55.300 --> 14:56.300
get element

14:56.600 --> 14:57.300
by id

14:57.500 --> 14:58.300
就是root

14:58.400 --> 14:59.400
这个root都用到哪

14:59.400 --> 15:00.700
是不是对应到这个public

15:00.700 --> 15:01.600
就这个页面

15:02.100 --> 15:03.800
签入到这个页面的id

15:04.400 --> 15:05.200
找到这个元素

15:05.200 --> 15:05.900
签入进去

15:06.300 --> 15:07.100
好保存啊

15:07.100 --> 15:07.500
保存

15:07.500 --> 15:08.300
咱们来看一下吧

15:08.700 --> 15:09.900
你看是不是算出来了

15:10.000 --> 15:10.500
对吧

15:10.600 --> 15:11.000
所以说呢

15:11.000 --> 15:11.500
这一块呢

15:11.500 --> 15:13.400
就相当于是可以签入表达式

15:13.500 --> 15:15.200
那如果说我们要把它

15:15.400 --> 15:15.900
嗯

15:16.100 --> 15:18.300
说它的具体的原理是什么呢

15:18.400 --> 15:18.900
原理呢

15:18.900 --> 15:20.500
它相当于是生成这么一个东西

15:21.300 --> 15:22.100
这注释掉吗

15:23.700 --> 15:25.700
它相当于是生成了这么一个东西

15:26.100 --> 15:26.600
const

15:26.600 --> 15:27.300
div

15:28.100 --> 15:28.600
const

15:28.900 --> 15:29.500
div

15:30.000 --> 15:30.700
document

15:30.900 --> 15:31.900
query is

15:32.700 --> 15:33.400
endament

15:33.600 --> 15:34.600
然后呢是什么

15:35.100 --> 15:35.700
div

15:35.700 --> 15:36.300
对吧

15:37.200 --> 15:37.700
然后呢

15:37.700 --> 15:39.300
属相没有属相

15:39.800 --> 15:40.300
好

15:40.300 --> 15:41.600
指源数是什么呢

15:41.700 --> 15:42.700
不是div

15:42.900 --> 15:43.900
是he

15:44.000 --> 15:44.800
he

15:45.200 --> 15:46.300
我这里为什么要用he

15:46.300 --> 15:47.600
那就换成div嘛

15:47.600 --> 15:48.500
换成div

15:48.800 --> 15:49.100
好

15:49.100 --> 15:50.100
那么div

15:50.300 --> 15:50.900
然后呢

15:50.900 --> 15:51.700
这里边呢

15:52.500 --> 15:53.500
属性没有

15:53.600 --> 15:54.500
指源数是啥呢

15:54.500 --> 15:55.300
是不是文本

15:55.700 --> 15:56.500
指源数的文本

15:56.500 --> 15:58.300
它就会转化成这么一种格式啊

15:58.400 --> 15:59.100
指源数的文本

15:59.100 --> 16:00.400
它会这样子进行转换

16:01.400 --> 16:02.200
啊怎么转换呢

16:02.200 --> 16:03.500
指源数的文本就是

16:03.900 --> 16:05.000
啊 a

16:05.600 --> 16:06.100
啊

16:07.000 --> 16:07.900
乘以

16:08.500 --> 16:09.100
b

16:09.600 --> 16:10.600
等于

16:11.300 --> 16:11.900
啊

16:12.800 --> 16:13.900
a乘以b

16:13.900 --> 16:14.500
对吧

16:14.700 --> 16:15.800
你看一下这样转换出来

16:15.800 --> 16:17.400
是不是结果是一样的啊

16:17.400 --> 16:18.500
保存你看一下吧

16:19.200 --> 16:19.700
哎

16:19.900 --> 16:21.200
哎我这里写错了啊

16:21.200 --> 16:22.000
哪里写错了

16:22.300 --> 16:23.100
object

16:23.300 --> 16:25.100
not a valid react child

16:25.600 --> 16:26.400
object

16:26.600 --> 16:27.600
我看一下哪里写错了

16:27.700 --> 16:29.200
我这里是document

16:29.200 --> 16:30.200
怎么会用document

16:30.200 --> 16:31.300
应该是react

16:31.500 --> 16:32.500
啊保存

16:33.100 --> 16:33.600
你看呀

16:33.600 --> 16:34.600
是不是一样的效果

16:34.600 --> 16:35.200
对吧

16:35.300 --> 16:36.400
一样的效果啊

16:36.400 --> 16:37.400
就是这么一种结构

16:37.400 --> 16:38.500
它会进行转换

16:38.500 --> 16:39.600
所以说我们以后呢

16:39.900 --> 16:41.900
指向我反复的强调这一点啊

16:41.900 --> 16:43.300
都是让大家理解

16:43.300 --> 16:44.900
我们这里得到的是一个对象

16:44.900 --> 16:45.400
这个对象呢

16:45.400 --> 16:46.500
它有一种结构

16:46.500 --> 16:46.900
最终呢

16:46.900 --> 16:47.800
这个结构呢

16:47.800 --> 16:48.600
会被react

16:48.600 --> 16:49.360
dorm这个

16:49.360 --> 16:49.900
cool

16:49.900 --> 16:52.500
把它转换成真实的dorm结构

16:53.300 --> 16:54.100
啊这里面

16:54.100 --> 16:56.100
可以签入一个表达式啊

16:56.200 --> 16:58.800
但是这个表达式里面可以写任何东西啊

16:58.800 --> 16:59.900
可以写任何东西

16:59.900 --> 17:00.500
总之呢

17:00.500 --> 17:02.800
它会把这个表达式的返回结果放这

17:03.000 --> 17:03.500
啊

17:03.500 --> 17:05.300
会把表达式的返回结果放这

17:06.000 --> 17:06.700
你要这意思啊

17:07.400 --> 17:07.900
啊

17:08.000 --> 17:09.500
那么这个表达式呢

17:09.500 --> 17:11.100
它是作为内容的一部分啊

17:11.400 --> 17:11.900
啊

17:12.500 --> 17:14.300
有几个细节大家注意一下啊

17:14.400 --> 17:16.600
就是说大家可能有不太容易想到

17:16.600 --> 17:16.900
第一个呢

17:16.900 --> 17:18.400
就是now和undefine

17:19.100 --> 17:21.100
如果这个表达式的结果为now

17:21.100 --> 17:22.300
它是不会显示的啊

17:22.300 --> 17:22.700
比方说啊

17:22.700 --> 17:23.500
咱咱们这里呢

17:23.500 --> 17:24.700
再写个p元素啊

17:24.700 --> 17:25.800
p元素里面写个now

17:26.200 --> 17:26.700
看一下啊

17:26.700 --> 17:28.100
这个表达式它能显示吗

17:29.100 --> 17:29.900
是不是没有显示啊

17:29.900 --> 17:30.400
对吧

17:30.500 --> 17:31.500
检查一下啊

17:31.500 --> 17:32.200
这里呢

17:32.500 --> 17:33.300
有没有p元素

17:33.300 --> 17:34.100
有这个p元素

17:34.100 --> 17:36.000
p元素里面的有没有内容

17:36.000 --> 17:36.900
它没有内容啊

17:36.900 --> 17:38.500
它并不会显示一个now

17:38.500 --> 17:39.700
如果你要显示now的话

17:39.700 --> 17:40.200
你就

17:40.900 --> 17:42.100
出一个制服串了啊

17:43.700 --> 17:44.900
这个大家要注意一下啊

17:44.900 --> 17:45.500
就now了

17:45.500 --> 17:46.500
它不会显示的

17:47.100 --> 17:48.200
好另外呢

17:48.200 --> 17:49.300
除了now之外呢

17:49.300 --> 17:50.100
undefine的

17:50.400 --> 17:52.000
它也不会显示啊

17:52.000 --> 17:53.000
也不会显示

17:53.100 --> 17:54.100
看一下啊

17:54.100 --> 17:54.900
也不会显示

17:54.900 --> 17:55.500
看没

17:56.500 --> 17:57.200
都没东西

17:57.700 --> 17:58.900
那么再来看啊

17:59.500 --> 18:00.900
force能不能显示呢

18:01.100 --> 18:01.900
像个bool

18:02.100 --> 18:02.800
bool值

18:02.800 --> 18:03.700
就是force呢

18:03.700 --> 18:04.700
它也不能显示啊

18:04.700 --> 18:05.800
所以说这里之前呢

18:05.800 --> 18:06.500
进漏了一笔

18:07.000 --> 18:07.500
now

18:08.300 --> 18:09.100
undefine的

18:09.900 --> 18:10.500
还有什么

18:11.500 --> 18:12.100
force

18:12.600 --> 18:13.500
不会显示的

18:13.700 --> 18:14.600
不会显示的

18:14.900 --> 18:16.900
那有的人是不是想开始

18:17.400 --> 18:18.300
发散思维了

18:18.300 --> 18:19.800
那是不是凡是bool

18:19.800 --> 18:20.800
判定为force的

18:20.800 --> 18:21.700
都不会显示呢

18:21.700 --> 18:22.500
那就不是了

18:22.800 --> 18:24.200
比方说0

18:24.300 --> 18:25.500
0能不能显示呢

18:25.600 --> 18:26.200
保存

18:26.200 --> 18:26.900
你看一下

18:27.000 --> 18:28.100
0是不是可以显示

18:28.400 --> 18:30.200
0的判定是不是也是force

18:30.300 --> 18:31.200
它可以显示啊

18:31.300 --> 18:33.000
就是这三个东西它不会显示

18:33.900 --> 18:34.600
明白这个意思吧

18:34.800 --> 18:35.600
所以说大家呢

18:35.600 --> 18:36.400
注意一下啊

18:36.400 --> 18:37.400
这是关于这一块

18:37.400 --> 18:38.400
它不会显示啊

18:38.700 --> 18:39.900
这里打上注释啊

18:40.700 --> 18:42.100
哦这里再说一下啊

18:42.300 --> 18:43.400
这里再记一笔

18:43.400 --> 18:45.000
就是这里细节还蛮多的啊

18:45.700 --> 18:46.600
记一笔就是

18:47.100 --> 18:48.800
注释关于这个注释啊

18:50.000 --> 18:52.900
在jsx中使用注释

18:53.400 --> 18:54.400
使用注释

18:54.400 --> 18:55.400
你在怎么写呢

18:55.400 --> 18:56.700
你在用这种方式写

18:57.500 --> 18:59.400
啊你不能用这个atm注释了啊

18:59.400 --> 19:00.900
你不能再写这个什么

19:01.200 --> 19:02.100
监阔号这种

19:02.100 --> 19:03.700
因为它并不是atm代码

19:03.900 --> 19:05.700
所以说你不能用这种方式来写了啊

19:06.000 --> 19:06.800
不能用这种方式

19:06.800 --> 19:08.000
它并不是atm代码

19:08.300 --> 19:09.800
那你该怎么来写注释呢

19:10.600 --> 19:12.600
啊用js注释啊

19:12.600 --> 19:13.500
用js注释

19:13.500 --> 19:14.300
其实你按一下

19:14.300 --> 19:15.400
它有智能提示的啊

19:15.800 --> 19:16.900
ctr建加写杠

19:16.900 --> 19:18.300
你看一下智能就弹出来了

19:18.700 --> 19:19.600
写两个大括号

19:19.700 --> 19:21.900
表示大括号里边的是js代码

19:21.900 --> 19:24.200
在js代码里边写js注释

19:24.600 --> 19:26.400
就是以下

19:27.200 --> 19:30.200
不会产生任何输出

19:31.100 --> 19:31.700
啊你看一下

19:31.700 --> 19:33.500
这个注释内容它肯定不会输出的

19:33.500 --> 19:33.900
对吧

19:33.900 --> 19:35.400
因为注释的表达是返回的

19:35.400 --> 19:36.500
什么东西都没返回

19:36.600 --> 19:37.700
所以它不会输出的

19:38.100 --> 19:39.000
好你看一下吧

19:39.300 --> 19:40.700
啊注释你看不到的

19:40.700 --> 19:41.600
在页面上看不到的

19:41.700 --> 19:43.600
所以说你在jsx里边写注释呢

19:43.600 --> 19:44.400
得这样子写

19:44.400 --> 19:45.700
其实你利用那个

19:46.200 --> 19:47.200
ctr鞋杠

19:47.200 --> 19:48.900
它自动的就给你打出来了

19:49.300 --> 19:50.300
啊ctr鞋杠

19:50.400 --> 19:51.600
去掉啊加上

19:52.700 --> 19:54.200
好这是关于这一块啊

19:54.900 --> 19:56.000
那么另外呢

19:56.000 --> 19:57.900
其实在jsx里边

19:57.900 --> 19:59.200
它还可以套什么呢

19:59.200 --> 20:00.600
它可以套任何东西

20:01.100 --> 20:02.300
可以套任何东西

20:02.800 --> 20:04.700
那比方说它能不能套对相呢

20:05.400 --> 20:06.400
能不能套对相呢

20:06.700 --> 20:07.600
咱们来看一下吧

20:07.800 --> 20:09.100
一个ob借啊

20:09.100 --> 20:11.600
一个对象A等于B等于2

20:12.000 --> 20:12.500
啊随便吧

20:12.500 --> 20:13.300
随便写个对象

20:13.700 --> 20:15.100
能不能把这个对象放进来呢

20:15.100 --> 20:16.300
当然可以

20:16.800 --> 20:17.800
啊对象放进来

20:18.600 --> 20:20.400
啊再加个P元素吗

20:21.300 --> 20:22.700
P元素哎

20:23.200 --> 20:25.100
注意啊要要加个综扩号

20:25.100 --> 20:25.900
对象放进来

20:25.900 --> 20:26.900
你看看对象放进来

20:26.900 --> 20:27.700
得到的是什么

20:28.300 --> 20:29.100
你看一下啊

20:30.600 --> 20:31.100
呀

20:31.100 --> 20:31.500
破了

20:31.500 --> 20:32.100
这是吧

20:33.100 --> 20:34.200
哎这里啊

20:36.170 --> 20:38.270
啊对象放进来的时候呢

20:38.270 --> 20:40.570
就是如果你是一个普通的对象啊

20:40.570 --> 20:42.270
如果你是个普通的对象的话

20:42.270 --> 20:43.170
那么这个时候呢

20:43.170 --> 20:44.170
他会出问题的

20:44.370 --> 20:45.570
啊他会出问题的

20:45.670 --> 20:46.470
他出什么问题呢

20:46.470 --> 20:47.670
他说你这个

20:48.170 --> 20:49.070
对象呢

20:49.070 --> 20:50.670
就是一个普通的对象呢

20:50.670 --> 20:52.870
是不能作为指援数的啊

20:52.970 --> 20:55.570
一个普通的对象是不能作为指援数的

20:55.670 --> 20:56.570
好那么这里呢

20:56.570 --> 20:57.970
我们打个打个注释啊

20:59.570 --> 21:00.870
普通对象

21:01.570 --> 21:04.570
不可以作为指援数啊

21:05.270 --> 21:06.070
按理说的话

21:06.070 --> 21:07.270
他既是表达是吗

21:07.270 --> 21:08.470
当然可以反回个对象

21:08.470 --> 21:08.870
但是呢

21:08.870 --> 21:09.670
他普通对象呢

21:09.670 --> 21:12.470
由于不能直接作为这个div的指援数

21:12.470 --> 21:13.170
所以说呢

21:13.470 --> 21:14.870
就是这个P元素的指援数

21:14.870 --> 21:15.770
因为他都是对象嘛

21:15.770 --> 21:18.470
这个P元素也是一个react元素的对象

21:18.570 --> 21:19.270
他里边呢

21:19.270 --> 21:20.970
他不允许出现普通对象

21:20.970 --> 21:22.370
可以出现制服刷没问题

21:22.470 --> 21:22.770
但是呢

21:22.770 --> 21:24.070
普通对象就不要出现了

21:24.970 --> 21:26.870
那如果不是一个普通对象呢

21:27.570 --> 21:28.470
这里注释掉啊

21:28.670 --> 21:30.370
那如果不是一个普通对象呢

21:30.770 --> 21:31.970
他是这么一种对象的

21:31.970 --> 21:32.570
看着啊

21:34.470 --> 21:36.470
他是一个这个对象

21:41.470 --> 21:41.970
什么呢

21:42.370 --> 21:44.770
这是一个十半元素

21:46.270 --> 21:47.270
这是不是个对象

21:47.270 --> 21:48.470
当然是个对象吧

21:48.670 --> 21:51.570
他是一个react元素对象

21:51.970 --> 21:53.970
是一个react元素对象

21:54.070 --> 21:56.270
那么这个元素对象能不能放进来了

21:57.170 --> 21:57.870
看一下啊

21:58.270 --> 21:59.770
元素对象能不能放进来

21:59.870 --> 22:00.670
那怎么放

22:00.870 --> 22:01.970
是不是还是这样子写

22:01.970 --> 22:02.370
对吧

22:02.370 --> 22:03.170
还是这样子写

22:03.170 --> 22:04.470
那我们看一下这样子写

22:04.470 --> 22:05.370
会不会有问题

22:05.670 --> 22:06.270
保存

22:07.170 --> 22:08.470
你看一下是不是没问题了

22:08.770 --> 22:10.870
他不能放置一个普通对象

22:10.870 --> 22:11.370
但是呢

22:11.370 --> 22:12.370
可以放置什么

22:12.370 --> 22:14.070
放置这个元素对象

22:14.470 --> 22:16.070
就是react元素对象

22:16.470 --> 22:17.370
这个是没问题的

22:17.470 --> 22:18.570
所以咱们记一笔啊

22:19.270 --> 22:19.770
啊

22:20.370 --> 22:21.470
可以放置

22:22.070 --> 22:23.070
啊放置

22:23.670 --> 22:25.770
react元素对象

22:26.770 --> 22:27.470
这样的没问题

22:27.470 --> 22:28.470
他作为他的指援数吗

22:28.470 --> 22:29.370
因为为什么

22:29.370 --> 22:31.270
因为他最终会编一层为react

22:31.270 --> 22:31.970
create

22:31.970 --> 22:32.470
animate

22:32.470 --> 22:33.870
他最终会编一层这个东西

22:34.270 --> 22:35.770
那这个东西里面他就有要求

22:35.770 --> 22:36.270
他不能是

22:36.270 --> 22:38.170
他的指援数不能是一个普通对象

22:38.170 --> 22:39.270
他可以是一个什么

22:39.370 --> 22:40.370
可以是个制服串

22:40.370 --> 22:41.170
可以是一个

22:41.670 --> 22:43.170
又是一个react元素

22:43.170 --> 22:43.570
但是呢

22:43.570 --> 22:44.670
他不能是一个普通对象

22:44.970 --> 22:45.970
他是有要求的

22:46.170 --> 22:46.370
啊

22:46.370 --> 22:47.370
所以说可以放这个东西

22:47.370 --> 22:47.970
没问题

22:48.970 --> 22:49.470
好吧

22:50.170 --> 22:50.370
好

22:50.370 --> 22:51.470
然后我们再来看啊

22:51.570 --> 22:53.370
那能不能放一个数组呢

22:53.870 --> 22:55.170
能不能放一个数组呢

22:55.570 --> 22:56.570
咱们又来看啊

22:58.640 --> 22:59.240
这是

23:00.440 --> 23:01.340
打个住什么啊

23:02.240 --> 23:03.440
普通对象

23:03.840 --> 23:06.240
普通对象无法放置

23:07.940 --> 23:08.340
好

23:08.340 --> 23:08.740
然后呢

23:08.740 --> 23:09.240
这里呢

23:09.240 --> 23:12.940
是react元素对象

23:13.040 --> 23:13.840
没问题

23:14.240 --> 23:14.940
没问题

23:16.340 --> 23:16.540
好

23:16.540 --> 23:18.040
我们来看一下数组的情况

23:19.040 --> 23:19.740
ar2

23:19.840 --> 23:20.740
随便写个数组啊

23:20.740 --> 23:21.640
随便写个数组

23:21.840 --> 23:22.740
随便写个数组

23:24.440 --> 23:24.840
好

23:24.840 --> 23:25.940
能不能写数组呢

23:25.940 --> 23:26.540
这里边

23:26.640 --> 23:28.540
我们把数组放进去看一下啊

23:31.100 --> 23:31.900
数组放进去

23:32.000 --> 23:32.600
保存

23:32.900 --> 23:34.100
咱们来看一下这里边

23:34.400 --> 23:35.600
数组是不是可以放

23:35.600 --> 23:36.200
对吧

23:36.400 --> 23:37.700
数组是可以放的

23:38.000 --> 23:38.900
放了过后了

23:38.900 --> 23:40.800
咱们来看一下他的元素结构

23:40.800 --> 23:42.300
关键是看他的元素结构

23:43.000 --> 23:45.100
数组里边我们这里打印出来啊

23:45.400 --> 23:46.200
打印出来

23:46.300 --> 23:47.800
打印出这个div的元素

23:47.900 --> 23:48.900
这个这个对象

23:49.400 --> 23:49.900
console

23:50.100 --> 23:50.500
log

23:50.600 --> 23:51.200
div

23:51.400 --> 23:52.600
看一下他的结构是什么

23:53.400 --> 23:54.000
保存

23:54.900 --> 23:56.800
你看一下他会生成一个什么样的结构

23:57.900 --> 24:00.000
这里面指源数啊有9个啊

24:00.000 --> 24:01.600
9个我们找到他最后一个就是

24:01.600 --> 24:02.300
p元素啊

24:02.300 --> 24:03.500
这个p元素里边

24:03.500 --> 24:04.000
你看

24:04.100 --> 24:05.000
challenge

24:05.100 --> 24:05.700
6个

24:06.700 --> 24:08.400
每一个是不是个数字对吧

24:08.600 --> 24:09.700
每一个是一个数字

24:09.700 --> 24:11.700
每一个指源数是一个数字啊

24:11.700 --> 24:12.800
每个指源数是一个数字

24:12.800 --> 24:13.300
看到没

24:13.300 --> 24:14.700
他形成了这么一种结构

24:15.100 --> 24:15.800
也就是说

24:15.800 --> 24:19.100
你在gsx里面去放置了一个数组的话

24:19.200 --> 24:21.600
他会一次变立这个数组

24:21.600 --> 24:23.300
把数组里边每一个东西

24:23.300 --> 24:25.000
作为他的一个指源数加进来

24:26.000 --> 24:27.000
我再说一次啊

24:27.100 --> 24:28.600
如果你放的是一个数组

24:28.700 --> 24:30.200
他会变立这个数组

24:30.300 --> 24:32.300
把数组里边每一个指源数

24:32.700 --> 24:33.500
每一个

24:33.900 --> 24:37.500
每一个元素作为他的指源数加进来

24:38.500 --> 24:40.300
所以说他这里可以写数组

24:40.600 --> 24:41.300
没问题的

24:42.800 --> 24:43.200
好

24:43.200 --> 24:45.500
那么我比方说利用之前的知识

24:45.500 --> 24:46.900
利用咱们学过的知识

24:46.900 --> 24:48.000
问大家一个问题

24:52.500 --> 24:53.600
那么这个数组

24:55.000 --> 24:55.700
放到这

24:56.100 --> 24:57.700
他最终会生成几个元素

24:58.000 --> 24:58.500
几个

24:58.500 --> 25:00.900
这个p元素里边会生成几个指源数

25:02.300 --> 25:03.000
这个数组

25:05.160 --> 25:05.760
放这

25:06.160 --> 25:07.060
会生成几个

25:07.360 --> 25:08.860
所以两个为什么

25:08.860 --> 25:11.360
因为这些东西是不是不会作为他的指源数

25:11.560 --> 25:12.060
对吧

25:12.060 --> 25:12.760
保存

25:12.860 --> 25:13.460
看一下吧

25:13.960 --> 25:14.460
你看

25:14.460 --> 25:15.760
是不是只有二和三

25:15.760 --> 25:17.060
再看一下元素结构

25:17.360 --> 25:18.260
元素结构

25:18.560 --> 25:19.260
然后这里

25:19.860 --> 25:21.260
这里我们看一下这个

25:22.060 --> 25:22.760
最后一个

25:22.760 --> 25:23.460
最后一个

25:24.560 --> 25:26.860
实际上的这些东西会在

25:26.860 --> 25:28.160
但是我们看到的呢

25:28.160 --> 25:28.960
只有两个

25:28.960 --> 25:30.460
可能看到的只有两个

25:30.460 --> 25:32.560
这些元素结构上当他还是在

25:32.560 --> 25:34.360
只是不管我们看到的只有两个

25:34.660 --> 25:35.460
没有这个意思吧

25:36.160 --> 25:36.360
好

25:36.360 --> 25:37.560
那么再问大家一个问题

25:37.560 --> 25:38.960
那如果我这里写个对象呢

25:38.960 --> 25:39.960
一个普通对象

25:39.960 --> 25:40.960
那又会怎么样呢

25:41.960 --> 25:43.060
写个普通对象

25:43.060 --> 25:43.760
保存

25:43.760 --> 25:44.560
你看一下

25:44.760 --> 25:45.960
是不是又要出问题了

25:45.960 --> 25:48.460
因为普通对象他不能作为指源数

25:48.460 --> 25:50.360
那你到时候便利这个数组的时候

25:50.360 --> 25:51.360
是不是要出问题

25:51.360 --> 25:51.860
对不对

25:51.860 --> 25:52.260
要出问题

25:52.260 --> 25:53.260
便利到这的时候

25:53.260 --> 25:54.860
想把他作为指源数加进去

25:54.860 --> 25:55.760
数加不进去

25:56.060 --> 25:56.560
对吧

25:56.560 --> 25:57.860
所以说这些规整的大家

25:58.060 --> 25:59.160
心里面知道就行了

25:59.860 --> 26:00.860
这是关于数组

26:00.960 --> 26:02.260
他里边是可以放数组的

26:02.960 --> 26:03.160
好

26:03.160 --> 26:04.860
那么既然可以放数组

26:04.860 --> 26:05.860
大家想一想啊

26:06.160 --> 26:08.560
那我们能不能去放一个

26:09.560 --> 26:10.660
这个东西的数组呢

26:11.860 --> 26:12.460
可不可以

26:13.260 --> 26:15.160
能不能放一个这个玩意的数组

26:15.860 --> 26:16.460
可不可以

26:16.860 --> 26:18.060
是不是当然可以

26:18.460 --> 26:20.060
当然没有任何问题对吧

26:20.060 --> 26:21.260
没有任何问题

26:21.460 --> 26:21.760
好

26:21.760 --> 26:23.060
比方说吧

26:23.660 --> 26:26.360
比方说咱们来玩出这么一个画样出来啊

26:26.860 --> 26:27.660
看一下啊

26:27.860 --> 26:30.360
咱们呢写一个lis

26:31.160 --> 26:31.860
写一个

26:33.860 --> 26:34.860
6 ar

26:35.460 --> 26:36.360
就是numbers

26:36.360 --> 26:37.060
numbers

26:37.460 --> 26:38.060
一个数组

26:38.660 --> 26:39.360
6 arv

26:39.760 --> 26:40.660
比较到30

26:41.260 --> 26:41.860
30

26:43.160 --> 26:43.660
30

26:43.660 --> 26:45.060
长度为30的数组

26:45.260 --> 26:46.460
然后呢我们使用什么

26:46.460 --> 26:46.960
feal

26:47.960 --> 26:49.860
feal给他填充全部全部填充0

26:50.260 --> 26:51.260
全部填充0完事

26:52.360 --> 26:52.960
没问题吧

26:53.760 --> 26:56.360
就是一个长度为30的数组全部填充0

26:56.960 --> 26:59.560
然后呢我们使用这个numbers map

27:00.260 --> 27:00.760
map

27:01.860 --> 27:03.460
这个函数应该用的很熟了吧

27:03.960 --> 27:05.060
map这个函数啊

27:05.060 --> 27:06.160
硬设啊

27:06.460 --> 27:08.060
第一个参数呢是数组的每一项

27:08.060 --> 27:09.760
第二参数呢是数组的下标

27:10.060 --> 27:10.560
好

27:11.660 --> 27:14.160
每循环一次我干嘛呢

27:14.360 --> 27:16.460
每循环一次我返回这么一个东西

27:16.660 --> 27:18.260
就是把原来的数组呢

27:18.260 --> 27:19.960
硬设到一个新数组里边

27:20.160 --> 27:22.060
每一次循环我返回这么一个东西

27:22.560 --> 27:23.360
li

27:23.860 --> 27:24.960
这里边写上啥了

27:25.060 --> 27:25.760
写上i

27:27.060 --> 27:27.660
可不可以

27:27.660 --> 27:29.260
这是不是个jsx表达式

27:29.260 --> 27:29.860
是不是

27:30.160 --> 27:31.560
当然是凭什么不是呢

27:31.960 --> 27:33.060
jsx表达式

27:33.260 --> 27:35.960
而jsx表达式里边能不能嵌入

27:36.060 --> 27:38.560
表达就是js表达式可以嵌入

27:38.660 --> 27:39.860
就把这个i放在这了

27:40.360 --> 27:42.260
那么每一循环一次是不是生成一个对象

27:42.260 --> 27:43.260
这个东西就是一个对象

27:43.260 --> 27:44.760
不要搞得那么神奇

27:44.760 --> 27:45.960
它就是个对象而已

27:46.160 --> 27:47.660
它只是换了种写法而已

27:48.160 --> 27:50.560
好那么这个数组里面每一个数字

27:50.560 --> 27:51.960
它对应一个对象

27:51.960 --> 27:52.360
对吧

27:52.360 --> 27:53.360
对应一个对象

27:53.460 --> 27:55.060
那这样子一硬设出来

27:56.060 --> 27:56.760
是不是

27:57.360 --> 27:58.360
是不是一个数组

27:58.860 --> 28:00.560
那这个数组里边是不是放了每一

28:00.560 --> 28:02.660
数组的每一项是不是放了这么个东西

28:02.760 --> 28:03.260
对吧

28:03.960 --> 28:05.560
好那么这里还可以减一些

28:05.560 --> 28:07.060
直接可以直接在这样子写

28:07.360 --> 28:08.360
直接这样子写

28:09.160 --> 28:09.560
对吧

28:09.660 --> 28:11.160
w用扩好吧扩起来

28:15.560 --> 28:16.860
w用扩好吧扩起来

28:17.860 --> 28:18.360
对吧

28:18.760 --> 28:20.460
那我们是不是通过这个数字的

28:20.460 --> 28:21.760
硬设了一个数组出来

28:21.960 --> 28:24.060
这个数组里面每一项是不是一个li

28:24.460 --> 28:25.360
li元数

28:25.860 --> 28:26.860
其实就是一个对象

28:27.260 --> 28:28.960
然后我们把这个数组放进来

28:29.260 --> 28:30.660
是不是就生成了一个列表了

28:32.660 --> 28:33.760
是不是生成一个列表了

28:34.060 --> 28:34.560
对吧

28:34.860 --> 28:35.460
保存

28:35.560 --> 28:36.260
你看一下

28:37.860 --> 28:38.560
没关系

28:38.560 --> 28:39.760
它现在包了一个警告

28:39.860 --> 28:40.960
一个w warning警告

28:41.160 --> 28:42.360
这个警告呢

28:44.660 --> 28:46.760
那我们要不要现在说

28:47.260 --> 28:48.260
那现在说一下吧

28:48.260 --> 28:49.860
这个警告其实也很简单

28:50.360 --> 28:51.260
解决起来很简单

28:51.260 --> 28:51.760
你看

28:52.160 --> 28:52.860
是不是放进来了

28:52.860 --> 28:53.860
这个li元数

28:53.860 --> 28:54.360
对吧

28:54.660 --> 28:56.160
他循环这个数组

28:56.260 --> 28:57.660
他会把这个数组的每一项

28:57.660 --> 28:59.260
作为他的指援数加进去

28:59.260 --> 29:00.260
你看是不是加进来了

29:00.860 --> 29:02.560
这个警告是什么意思呢

29:02.560 --> 29:03.160
这个警告呢

29:03.160 --> 29:05.060
其实你之前学过w的话

29:05.060 --> 29:06.760
你应该非常非常清楚

29:06.960 --> 29:09.860
这个警告就是一个列表的兄弟元数

29:10.260 --> 29:11.660
一段列表的兄弟元数

29:11.660 --> 29:13.660
他需要一个属性就是t

29:14.660 --> 29:16.160
他需要一个属性就是t

29:17.260 --> 29:18.260
t这么一个属性

29:18.460 --> 29:19.760
这个属性呢

29:20.360 --> 29:21.760
我们一会就会讲到

29:21.760 --> 29:22.760
一会就会讲到

29:22.960 --> 29:23.660
这个属性呢

29:23.660 --> 29:24.660
你要给他付一个指

29:24.660 --> 29:26.660
来付一个表唯一的指

29:26.860 --> 29:28.360
唯一的指不重复的指

29:28.560 --> 29:29.460
那么我们比方说

29:29.460 --> 29:30.760
我们这里就付一个什么指的

29:30.760 --> 29:31.660
付一个这个i

29:31.960 --> 29:33.660
把i的指给这个属性t

29:34.060 --> 29:36.160
那么在以前5u里边你是怎么做的

29:36.560 --> 29:37.760
是不是加个冒号对吧

29:37.860 --> 29:38.760
用这种方式来写

29:38.860 --> 29:40.660
在这个i的程里边是这样的写的

29:40.860 --> 29:42.160
就是你属性这一块

29:42.160 --> 29:43.760
也可以使用表达式

29:43.860 --> 29:45.160
也是两个大过号

29:45.660 --> 29:46.560
不要写双一号了

29:46.560 --> 29:47.760
千万不要写双一号

29:48.260 --> 29:49.560
你也可以写表达式

29:49.560 --> 29:50.160
表达式是什么

29:50.160 --> 29:50.760
就是i

29:51.560 --> 29:52.160
就是i

29:53.760 --> 29:54.560
那么相当于是

29:54.560 --> 29:55.760
把这个i的指呢

29:55.760 --> 29:57.360
作为这个属性t的值

29:57.560 --> 29:58.260
当这个t呢

29:58.260 --> 29:59.360
他不会反映到什么

29:59.360 --> 30:00.960
他不会反映到界面上

30:01.160 --> 30:02.760
界面上是不会有任何反应的

30:03.560 --> 30:04.360
这个t的值

30:04.360 --> 30:05.560
他只是有这个要求

30:05.560 --> 30:06.360
如果你不理解

30:06.360 --> 30:07.160
为什么要加这个t

30:07.160 --> 30:08.960
我们以后会讲原理

30:09.060 --> 30:10.860
那么现在那你只需要知道

30:10.960 --> 30:12.960
反而是我要印设一个数组

30:12.960 --> 30:14.260
这个数组的每一项呢

30:14.260 --> 30:15.960
是一个GSX表达式

30:15.960 --> 30:17.760
也就是是一个reaction元素

30:17.760 --> 30:19.560
那么需要给每一个元素的

30:19.560 --> 30:20.960
去加上这么一个t纸

30:21.460 --> 30:22.560
来保证唯一

30:22.760 --> 30:23.560
都是这样子呢

30:23.560 --> 30:24.660
是为了提高效率

30:24.660 --> 30:25.760
你不加了也没事

30:25.760 --> 30:27.560
他只不过给你报一个警告而已

30:28.960 --> 30:29.160
好

30:29.160 --> 30:30.960
那么现在内容部分是不是讲完了

30:31.460 --> 30:33.960
就是在我们的GSX里边

30:34.160 --> 30:36.060
你要在元素里边写内容

30:36.060 --> 30:37.860
你要签入一段GS代码

30:37.860 --> 30:38.660
是不是讲完了

30:38.660 --> 30:38.960
对吧

30:38.960 --> 30:40.160
这各种情况都讲完了

30:40.160 --> 30:41.160
普通对象不能用

30:41.460 --> 30:42.060
数组

30:42.560 --> 30:43.960
reaction元素对象没问题

30:43.960 --> 30:44.760
数组可以

30:44.860 --> 30:46.460
那数组里面每一项是一个元素

30:46.460 --> 30:47.260
那也没问题

30:48.060 --> 30:50.460
如果是数组里面每一项是个元素的话

30:50.460 --> 30:51.460
你需要加个keyz

30:52.060 --> 30:52.760
加个keyz

30:52.860 --> 30:54.160
这个keyz呢要保证唯一

30:54.160 --> 30:55.260
那我这里呢一般

30:55.360 --> 30:56.060
一般情况下呢

30:56.060 --> 30:56.960
我们就用id

30:56.960 --> 30:57.960
用一个唯一编号

30:57.960 --> 30:59.060
比方说学生啊

30:59.160 --> 30:59.860
电影啊

30:59.860 --> 31:00.860
用一个唯一编号

31:01.360 --> 31:01.860
到这里呢

31:01.860 --> 31:02.560
我就随便了

31:02.560 --> 31:03.260
用了一个i

31:03.260 --> 31:04.060
就是下标

31:04.860 --> 31:05.160
好吧

31:05.160 --> 31:06.660
这就是关于这一块啊

31:06.660 --> 31:10.660
在GSX里边签入的内容部分

31:10.860 --> 31:12.860
签入一些GS表达式

31:13.860 --> 31:14.960
那么另外呢

31:14.960 --> 31:16.860
就是说在表达式

31:16.860 --> 31:17.960
把表达式呢

31:17.960 --> 31:20.260
也可以作为元素的属性

31:20.460 --> 31:22.160
这样子也是可以的啊

31:22.160 --> 31:24.060
GSX里面不是有很多元素吗

31:24.060 --> 31:24.560
对吧

31:24.560 --> 31:25.460
有很多元素

31:25.460 --> 31:26.960
这元素的属性

31:26.960 --> 31:29.760
它里面也可以嵌入表达式

31:30.260 --> 31:30.660
啊

31:30.660 --> 31:32.060
咱们来看一下这一部分啊

31:32.060 --> 31:32.860
还怎么来玩

31:33.560 --> 31:33.760
好

31:33.760 --> 31:34.260
这里呢

31:34.260 --> 31:37.360
我们还是把这个之前的东西复制一下吧

31:37.660 --> 31:38.660
然后这里的代码呢

31:38.660 --> 31:39.660
我把3一下啊

31:39.860 --> 31:40.460
3一下

31:42.300 --> 31:43.600
把3除掉

31:44.900 --> 31:45.400
咱们呢

31:45.400 --> 31:45.800
这里呢

31:45.800 --> 31:49.400
还是写这么一个DIV吧

31:50.400 --> 31:51.800
还是写这么一个DIV

31:52.200 --> 31:52.600
然后呢

31:52.600 --> 31:54.000
这里边的表达式呢

31:54.000 --> 31:55.300
GSX表达式呢

31:55.300 --> 31:56.300
就一个DIV

32:00.100 --> 32:01.000
就一个DIV

32:03.400 --> 32:04.100
DIV里边呢

32:04.100 --> 32:05.000
我们这样子啊

32:05.500 --> 32:06.100
比方说啊

32:06.100 --> 32:07.000
有一张图片

32:07.100 --> 32:07.900
还当图片

32:08.300 --> 32:09.600
这个图片的路径呢

32:09.600 --> 32:10.500
我们之前呢

32:10.500 --> 32:12.100
是放到一个变量里边的

32:12.100 --> 32:13.300
不是直接输写的

32:13.300 --> 32:14.800
你当然直接输写行不行呢

32:14.800 --> 32:15.800
当然也可以啊

32:15.800 --> 32:16.500
也可以

32:16.600 --> 32:17.500
那有的时候呢

32:17.500 --> 32:18.300
我们的数据呢

32:18.300 --> 32:19.900
可能来自于别的地方啊

32:19.900 --> 32:22.000
比方说来自于阿迦克斯请求啊

32:22.000 --> 32:23.700
来自于另外一个变量

32:24.000 --> 32:25.700
来自于一个表达式的运算

32:26.100 --> 32:27.200
如果你直接写的话

32:27.200 --> 32:28.400
那就是制服串的值了

32:28.400 --> 32:28.800
对吧

32:28.800 --> 32:30.200
那就属性的就是制服串

32:30.200 --> 32:31.900
那你直接写进去就完事了啊

32:31.900 --> 32:33.500
双一号写进去就完事了

32:33.800 --> 32:35.300
那如果我们的数据呢

32:35.300 --> 32:36.900
是来自于一个变量怎么办呢

32:36.900 --> 32:38.700
比方说src啊

32:38.700 --> 32:40.900
就是ul路径啊路径

32:41.500 --> 32:43.300
咱们把之前那个图片拿过来吧

32:44.000 --> 32:45.400
之前那个图片地址

32:45.400 --> 32:47.400
ok啊把这里的负责一下啊

32:47.900 --> 32:50.200
负责一下好到这边放过来

32:50.600 --> 32:51.600
好比方说啊

32:51.600 --> 32:53.200
咱们呢要把这个变量

32:53.600 --> 32:55.900
变量的值呢放这怎么办呢

32:55.900 --> 32:57.300
你就把双一号去掉

32:57.400 --> 32:59.500
就这么简单非常非常简单啊

32:59.500 --> 33:00.900
然后呢写两个大国号

33:01.100 --> 33:02.800
大国号里边总归呢

33:02.800 --> 33:04.600
它是写的是解式表达式

33:05.000 --> 33:05.700
好了那这里呢

33:05.700 --> 33:06.900
我们就把这个变量放进去

33:06.900 --> 33:08.200
完事了啊完事了

33:08.400 --> 33:09.600
保存咱们再看一下吧

33:10.200 --> 33:11.000
好你看一下

33:11.200 --> 33:12.800
是不是这样可以出来这个图片啊

33:13.000 --> 33:14.200
所以那然可以出来

33:14.300 --> 33:15.500
点击右键检查

33:15.600 --> 33:17.000
你看一下这个div里边

33:17.000 --> 33:18.200
1米几元素对吧

33:18.300 --> 33:19.800
就把这个属性的值呢

33:19.800 --> 33:20.600
就放进去了

33:21.700 --> 33:23.700
好这是这个src属性

33:23.800 --> 33:24.900
那有没有别的属性呢

33:24.900 --> 33:26.900
别的属性也可以啊也可以

33:27.000 --> 33:27.700
比方说吧

33:28.700 --> 33:31.500
比方说咱们写个内样式啊内样式

33:31.500 --> 33:33.700
最内样式的他的属性的名字呢

33:33.800 --> 33:36.500
要使用class内啊不能直接使用class

33:36.600 --> 33:38.100
如果你在atm里边的话

33:38.100 --> 33:39.800
那你可以直接使用class对吧

33:39.900 --> 33:40.800
但是呢在

33:41.200 --> 33:43.200
sx表达式里边呢

33:43.200 --> 33:44.500
你要使用class内

33:44.800 --> 33:46.600
这个东西相当于是啥呢

33:46.900 --> 33:51.100
他就相当于是咱们以前学那个多蜜元素

33:51.300 --> 33:53.200
多蜜元素里边的属性

33:53.300 --> 33:55.300
是不是小陀封命迷法

33:55.600 --> 33:56.000
对吧

33:56.000 --> 33:57.600
所以说属性这一块呢

33:57.600 --> 33:58.900
他要对应到啥呢

33:58.900 --> 34:01.500
对应到以前我们多蜜元素的属性啊

34:01.500 --> 34:03.300
他是使用的是小陀封命迷法

34:03.400 --> 34:04.600
并且呢有一些地方呢

34:04.600 --> 34:06.100
跟关键字重复了

34:06.100 --> 34:07.900
那么你要使用关键字啊

34:07.900 --> 34:08.800
你要省关键字

34:08.800 --> 34:10.500
就是要吧不是省关键字啊

34:10.500 --> 34:12.000
你要改一下他的名字

34:12.000 --> 34:13.900
比方说class要改成class name

34:14.700 --> 34:15.300
好比方说啊

34:15.300 --> 34:16.400
这个class name呢

34:16.400 --> 34:19.300
我们也可以用一个属性吧

34:20.100 --> 34:21.100
cls

34:21.500 --> 34:23.500
比方说随便吧

34:23.500 --> 34:24.100
随便吧

34:24.100 --> 34:25.500
e image

34:26.100 --> 34:27.000
好然后呢这里呢

34:27.000 --> 34:28.700
我们把这个属性的名字放进来

34:28.800 --> 34:29.100
是吧

34:29.300 --> 34:31.400
他也可以啊也可以

34:32.000 --> 34:33.100
好那么这个class呢

34:33.100 --> 34:34.800
我们可以写一下样式吧

34:34.800 --> 34:35.400
写一下样式

34:35.400 --> 34:36.800
我们这里新建一个文件

34:37.300 --> 34:39.100
index.css

34:39.300 --> 34:40.100
我们这里呢

34:40.100 --> 34:41.300
书写还有样式啊

34:41.300 --> 34:42.900
就是英语写的样式

34:43.900 --> 34:45.100
写个边框嘛啊

34:45.100 --> 34:46.300
三个像素稍立的

34:47.400 --> 34:48.600
好然后到这边来

34:48.600 --> 34:50.200
我们把这个样式导入进来

34:50.200 --> 34:50.900
import

34:51.400 --> 34:52.000
啊什么呢

34:52.000 --> 34:52.900
就点鞋杠

34:52.900 --> 34:54.700
index.css

34:54.700 --> 34:55.800
把样式导入进来

34:55.800 --> 34:56.700
大家看一下啊

34:56.700 --> 34:58.300
因为把这个样式应用进去呢

34:59.100 --> 34:59.600
哎

35:00.200 --> 35:01.300
刷清啊你看

35:01.300 --> 35:02.600
边框是不是出来了

35:02.700 --> 35:04.100
对吧边框他就出来了

35:04.100 --> 35:04.600
看到没

35:04.700 --> 35:06.200
我们看一下这个元素

35:06.200 --> 35:08.000
这个1米级这边是不是多了个样式啊

35:08.000 --> 35:08.800
class name

35:08.800 --> 35:10.400
class就是1米级

35:10.500 --> 35:12.400
啊生成出来真实的多么元素里边

35:12.400 --> 35:13.200
就这个样子

35:13.500 --> 35:14.400
是不是非常简单

35:14.400 --> 35:15.000
对不对

35:15.000 --> 35:16.000
属性这一块呢

35:16.000 --> 35:17.600
他仍然可以使用啊

35:17.600 --> 35:18.800
仍然可以使用这个

35:19.300 --> 35:19.800
表达式

35:19.800 --> 35:20.400
但是注意啊

35:20.400 --> 35:22.600
你千万不要去写这个双一号了啊

35:22.600 --> 35:23.800
千万别写双一号

35:24.600 --> 35:25.700
好这是这一块啊

35:26.900 --> 35:28.100
好再来啊再来

35:28.400 --> 35:30.600
再加个样式style

35:30.600 --> 35:32.000
style是不是也是属性

35:32.000 --> 35:33.600
对吧也是属性

35:33.600 --> 35:34.600
大家注意啊

35:34.800 --> 35:36.000
style这个属性呢

35:36.000 --> 35:37.800
你就不能直接输写制服串了

35:38.300 --> 35:38.900
为啥呢

35:38.900 --> 35:40.800
为啥不能直接输写制服串呢

35:40.900 --> 35:41.900
因为这个玩意呢

35:41.900 --> 35:45.000
他是要对应到介式里边的那个style对象

35:45.300 --> 35:47.300
啊我们介绍个dome对象里边

35:47.300 --> 35:48.400
不是有这么个东西吗

35:48.400 --> 35:50.600
对吧dome对象里面不是一个style吗

35:50.600 --> 35:51.000
对不对

35:51.000 --> 35:52.000
他是个对象

35:52.100 --> 35:54.000
他对象里边是不是有很多属性

35:54.000 --> 35:54.600
对吧

35:54.600 --> 35:55.800
所以说我们这里呢

35:55.900 --> 35:58.400
要把它当成一个对象来进行输写

35:58.700 --> 36:00.400
哎对象怎么输写呢

36:00.900 --> 36:02.000
是不是对象呢

36:02.000 --> 36:03.400
他仍然是一个介式对象

36:03.400 --> 36:05.400
所以说你是不是应该写两个大伙号

36:05.700 --> 36:07.000
大伙号里边是不是

36:07.200 --> 36:08.800
应该是一个介式表达式

36:09.000 --> 36:11.100
这个介式表达式可不可以是对象

36:11.400 --> 36:12.200
可以是对象啊

36:12.200 --> 36:13.400
为什么不可以是对象呢

36:13.600 --> 36:15.600
啊我们说之前说

36:15.600 --> 36:17.900
我们的介式x里面不能写对象

36:18.000 --> 36:20.200
那是因为我们说的是内容部分

36:20.400 --> 36:22.600
啊内容部分不能是一个普通对象

36:22.700 --> 36:24.200
但是属性这一块呢

36:24.200 --> 36:24.900
有些属性呢

36:24.900 --> 36:26.200
他是可以接受对象的

36:26.400 --> 36:27.100
比较到这里

36:27.400 --> 36:28.700
你就不能写制服串了啊

36:28.700 --> 36:29.500
不能写制服串

36:29.500 --> 36:31.200
你要写个对象在这啊

36:31.200 --> 36:33.800
他对应到什么介式里面的style这个属性

36:34.500 --> 36:35.500
好那么对象怎么写的

36:35.500 --> 36:36.600
是不是有两个大伙号

36:36.700 --> 36:37.300
大家注意啊

36:37.300 --> 36:39.100
这里啊大家可能容易搞晕

36:39.500 --> 36:39.900
为什么呢

36:39.900 --> 36:41.600
因为这里出现了这么多大伙号

36:41.700 --> 36:42.400
你要注意啊

36:42.400 --> 36:44.000
外面这个大伙号呢表示什么

36:44.200 --> 36:48.500
表示的是介式x里面的介式表达式

36:48.500 --> 36:49.500
它是个分界线

36:49.800 --> 36:51.800
它里面东西呢是个介式表达式

36:52.000 --> 36:53.300
那里面这个大伙号呢

36:53.300 --> 36:54.600
表示这里面是个对象

36:54.800 --> 36:56.100
啊是这么回事啊

36:56.100 --> 36:57.500
所以虽然说有两个大伙号

36:57.500 --> 36:58.400
你要分清楚啊

36:58.800 --> 37:00.100
好里面这个对象里面是不是

37:00.100 --> 37:02.100
可以写各种各样那些八道的玩意

37:02.100 --> 37:02.600
对吧

37:02.600 --> 37:04.100
比方说什么啊啊

37:04.100 --> 37:06.600
margin left

37:07.400 --> 37:08.400
margin left

37:08.500 --> 37:09.300
比方说吧

37:10.300 --> 37:11.500
50个像素啊

37:11.500 --> 37:12.300
50个像素

37:13.000 --> 37:14.500
啊或者直接写个50

37:14.900 --> 37:16.000
啊不行不行不行

37:16.100 --> 37:17.000
要写制服串啊

37:17.000 --> 37:17.800
50个像素

37:18.100 --> 37:19.000
好然后呢

37:19.300 --> 37:21.500
啊什么宽度啊

37:21.500 --> 37:22.400
宽度的话

37:22.400 --> 37:23.500
给他200个像素

37:24.100 --> 37:25.300
保存咱们看一下啊

37:25.300 --> 37:25.900
看一下

37:26.400 --> 37:27.000
你看一下

37:27.000 --> 37:28.200
这里样式是不是变了

37:28.700 --> 37:29.800
看一下元素啊

37:29.900 --> 37:30.700
你看这里

37:30.800 --> 37:32.500
我们的元素样式里边

37:32.500 --> 37:33.500
就类年样式里边

37:33.500 --> 37:34.400
style属性里边

37:34.400 --> 37:35.800
所以一个margin left

37:35.900 --> 37:37.100
还有一个位置

37:37.100 --> 37:37.500
对吧

37:37.500 --> 37:38.500
有两个属性了

37:38.600 --> 37:39.400
那么更多的属性呢

37:39.400 --> 37:40.600
是不是可以直接输写

37:40.900 --> 37:41.200
对吧

37:41.200 --> 37:42.200
可以直接输写

37:42.800 --> 37:43.100
哎

37:43.100 --> 37:43.800
这就是

37:44.800 --> 37:46.500
在介式x里边

37:46.600 --> 37:48.900
如何来输写一个类年样式啊

37:48.900 --> 37:49.400
style

37:49.500 --> 37:50.600
就用这种方式来输写

37:50.600 --> 37:51.900
给他仍然是一个对象

37:52.000 --> 37:52.400
看没

37:53.400 --> 37:54.600
好这是这一块啊

37:54.700 --> 37:56.200
也就是属性这一块呢

37:56.200 --> 37:59.300
我们仍然是可以使用介式表达式的

38:00.300 --> 38:01.100
好大家注意一下

38:01.100 --> 38:03.100
属性使用小头风秘密法

38:04.300 --> 38:05.600
好下一个啊

38:05.600 --> 38:07.800
下一个呢是嗯

38:07.800 --> 38:08.700
这个rex呢

38:08.700 --> 38:10.000
他为了安全

38:10.100 --> 38:12.400
所以说呢在介式x里边呢

38:12.700 --> 38:14.200
他做了一个限制

38:14.300 --> 38:15.800
就是说呃

38:15.800 --> 38:18.200
如果你的内容里边

38:18.300 --> 38:20.400
包含了一些特殊制服

38:20.400 --> 38:22.500
他认为不太安全的制服的话

38:22.500 --> 38:24.200
他会自动对你给你

38:24.400 --> 38:25.500
给你进行编码

38:25.800 --> 38:27.800
那么什么叫房子租入攻击呢

38:28.300 --> 38:29.000
以后呢

38:29.000 --> 38:29.900
咱们再进去

38:29.900 --> 38:31.300
就是在全站部分呢

38:31.300 --> 38:34.300
讲到那个安全性的时候再详细说

38:34.600 --> 38:35.000
好吧

38:35.000 --> 38:36.200
我们只需要知道啊

38:36.300 --> 38:37.600
如果一个

38:38.900 --> 38:39.600
数据里边

38:39.600 --> 38:41.200
他包含了一些特殊制服

38:41.200 --> 38:42.600
比方说包含一些脚本

38:42.700 --> 38:43.700
那么这样的数据呢

38:43.700 --> 38:45.400
是不够安全的啊

38:45.400 --> 38:47.100
不够安全的容易出问题

38:47.300 --> 38:48.600
所以说为了安全呢

38:48.700 --> 38:50.000
在介式x里边

38:50.000 --> 38:52.200
他是会给你进行自动编码

38:52.200 --> 38:53.200
咱们来看一下吧

38:53.500 --> 38:54.600
看一下就明白了啊

38:54.600 --> 38:55.600
我们这里复制

38:55.600 --> 38:56.500
又来一个啊

38:56.700 --> 38:57.600
这里把删掉

38:59.100 --> 39:00.100
比方说吧

39:00.100 --> 39:01.400
这里还是个div

39:01.900 --> 39:04.900
啊他仍然是一个介式x表达式啊

39:05.300 --> 39:06.300
啊这里边呢

39:06.300 --> 39:07.400
我们写个div啊

39:09.900 --> 39:10.500
div

39:11.800 --> 39:12.400
然后呢

39:12.400 --> 39:13.500
这里边有一些内容

39:13.500 --> 39:14.800
这个内容来自于哪呢

39:14.800 --> 39:15.900
来自于一期来

39:15.900 --> 39:16.900
来自于一个变量

39:17.200 --> 39:18.600
这个变量是一个制服串啊

39:18.600 --> 39:20.200
这个变量是一个制服串啊

39:20.200 --> 39:22.140
比方说我们这里写上一个

39:22.140 --> 39:23.400
H1元数吧

39:23.800 --> 39:24.900
H1元数

39:25.000 --> 39:26.600
然后再写上一个P元数啊

39:27.100 --> 39:28.300
有的人说不是写

39:28.300 --> 39:28.900
只能

39:28.900 --> 39:30.500
只能有一个根结点吧

39:31.100 --> 39:32.100
兄弟兄弟

39:32.500 --> 39:33.900
这是制服串啊

39:33.900 --> 39:35.100
这是制服串啊

39:35.400 --> 39:37.200
不是介式x表达式啊

39:37.200 --> 39:38.100
这是制服串啊

39:39.500 --> 39:40.100
随便吧啊

39:40.100 --> 39:41.300
随便随便写写啊

39:42.300 --> 39:43.000
咱们呢

39:43.100 --> 39:44.200
把这个制服串呢

39:44.200 --> 39:46.300
作为内容放在这里边

39:47.500 --> 39:48.500
没问题吧啊

39:48.500 --> 39:49.200
这样子写

39:49.200 --> 39:49.800
没问题吧

39:50.100 --> 39:51.200
好保存看一下啊

39:51.200 --> 39:52.800
看他出来的是什么样的结果

39:53.200 --> 39:54.800
你看他出来的是这样的结果

39:54.800 --> 39:56.200
他并没有把我们的制服串

39:56.200 --> 39:58.000
当成元数来解析

39:58.000 --> 39:59.300
他相当于是啥呢

39:59.300 --> 40:01.300
他相当于是用这种方式来设置的

40:01.500 --> 40:03.200
dom inner text

40:03.400 --> 40:05.500
啊相当于是用这种方式来设置的

40:05.700 --> 40:08.400
实际上这是react的一种保护机制

40:08.700 --> 40:10.800
啊他还实际上严格来说的话

40:10.800 --> 40:12.900
他还不不属于什么介式x

40:13.200 --> 40:14.500
他不属于这个啊

40:14.500 --> 40:16.400
他是一种自我保护机制

40:16.500 --> 40:18.200
因为他防制什么呢

40:18.300 --> 40:21.000
防制他不知道你这个变量的数据哪来的

40:21.500 --> 40:22.600
他有可能这个数据呢

40:22.600 --> 40:23.800
是来自于用户的输入

40:23.800 --> 40:25.100
一个闻闷框的输入

40:25.200 --> 40:26.300
那这样子很恐怖了

40:26.300 --> 40:26.800
对吧

40:26.800 --> 40:27.600
很恐怖了

40:27.600 --> 40:30.300
那用户可能会输入一些元素在这里边

40:30.300 --> 40:31.000
那么这样子呢

40:31.000 --> 40:32.500
就会把元素加进来

40:32.800 --> 40:34.000
啊是不是很恐怖

40:34.100 --> 40:34.800
对吧我们

40:35.000 --> 40:36.800
嗯不希望用户的输入呢

40:36.800 --> 40:39.700
能够改变会改变我们的网页的结构

40:40.000 --> 40:42.700
包括用户还可能会输入一个script元素性的

40:42.700 --> 40:44.400
那更加更加恐怖的

40:44.400 --> 40:46.300
还可以还可以执行介式代码

40:47.200 --> 40:48.000
所以说呢

40:48.100 --> 40:49.500
这一块呢咱们呢

40:49.700 --> 40:51.700
嗯他在这个react里面

40:51.700 --> 40:52.800
他有个保护机制

40:52.800 --> 40:54.000
他是为了安全

40:54.200 --> 40:55.600
他你你输的内容呢

40:55.600 --> 40:58.500
他都是用inner text来进行复制的

40:58.600 --> 41:01.100
那么保证了他这里边内容就是一个纯温本

41:01.300 --> 41:03.700
然后他会给你进行自动编码

41:03.700 --> 41:04.700
你看一下右键

41:04.800 --> 41:06.100
我们点击这个edit

41:06.200 --> 41:06.800
而是

41:07.300 --> 41:07.900
atmail

41:08.300 --> 41:10.200
你看一下是编码之后的对吧

41:10.200 --> 41:11.600
编码之后的就是纯温本的

41:11.600 --> 41:12.400
那就无所谓的

41:12.400 --> 41:13.400
你随便说些啥

41:13.500 --> 41:14.500
反正我给你编码

41:15.100 --> 41:16.200
啊这是为了安全

41:16.300 --> 41:17.300
那有的时候呢

41:17.300 --> 41:18.400
我们可能啊

41:18.400 --> 41:20.800
这种情况有可能会遇到

41:21.400 --> 41:23.500
就是我们缺切的知道

41:23.600 --> 41:24.600
这个内容呢

41:25.000 --> 41:26.700
没问题是很安全的

41:26.900 --> 41:29.100
他可以把它放到哪了

41:29.100 --> 41:31.700
把它放到作为元素结构放进去

41:32.000 --> 41:34.400
好那如果遇到这种情况怎么做呢

41:34.500 --> 41:36.800
那要使用这个属性啊叫dangerously

41:37.200 --> 41:40.300
什么意思表示危险的设置什么

41:40.600 --> 41:41.400
inner atmail

41:41.400 --> 41:42.500
你看他反复的提示

41:42.500 --> 41:44.100
好危险好危险好危险

41:44.200 --> 41:45.400
没事没事没事

41:45.500 --> 41:46.500
我就要这样设置

41:46.500 --> 41:47.500
那你就设置呗

41:47.800 --> 41:49.460
好去怎么来设置呢

41:49.460 --> 41:51.060
就是把它作为一个属性

41:51.260 --> 41:52.660
把它做一个属性

41:52.860 --> 41:54.360
它是一个特殊的属性

41:54.860 --> 41:55.860
叫做设置什么

41:55.860 --> 41:57.660
atmail inner atmail

41:57.860 --> 41:58.760
是它的内文本

41:58.760 --> 42:00.860
就是不再使用inner text

42:00.960 --> 42:01.760
而使用什么

42:01.760 --> 42:03.360
而使用inner atmail

42:03.960 --> 42:04.260
好了

42:04.260 --> 42:05.360
这样子复制的时候

42:05.360 --> 42:06.360
怎么来复制呢

42:06.360 --> 42:06.860
注意啊

42:06.860 --> 42:08.760
你复制的时候不是一个字不串

42:09.160 --> 42:10.360
啊不是字不串

42:10.560 --> 42:12.460
所以说你不能不能怎么复制呢

42:12.460 --> 42:13.460
不能这样子复制

42:13.460 --> 42:14.660
这样子复制是不行的

42:14.660 --> 42:15.660
那咱们来看一下吧

42:16.460 --> 42:17.660
里边东西删掉啊

42:17.860 --> 42:18.460
保存

42:19.260 --> 42:19.960
你看看

42:20.560 --> 42:22.060
是不行的啊

42:22.060 --> 42:22.960
他告诉你什么

42:23.360 --> 42:24.260
他告诉你说

42:24.260 --> 42:25.460
他说哎呦

42:25.460 --> 42:26.760
你这个东西太危险了啊

42:26.760 --> 42:27.360
太危险了

42:27.360 --> 42:29.560
我也不知道你有没有考虑到这一点

42:29.660 --> 42:31.460
你可能莫名其妙就这样设置的

42:31.460 --> 42:32.560
导致的网站出问题

42:32.560 --> 42:33.560
到时候还要怨我

42:33.560 --> 42:35.560
怨我react没有没有处理好

42:35.660 --> 42:36.360
所以说呢

42:36.460 --> 42:38.660
react非常非常贴心的

42:39.060 --> 42:40.860
其实说非常非常恶心的

42:40.860 --> 42:42.460
让你用这种方式来设置

42:42.560 --> 42:44.260
他给你增加层层障碍

42:44.360 --> 42:45.860
就是为了让你注意注意

42:45.860 --> 42:49.360
再注意这一颗做法很危险

42:49.960 --> 42:51.360
那么他怎么来设置呢

42:51.360 --> 42:53.060
他里边要求你写个对象

42:53.060 --> 42:54.160
你不能写个字幕串

42:54.160 --> 42:55.160
你要写个对象

42:55.660 --> 42:56.360
这个对象呢

42:56.360 --> 42:57.660
有一个只有一个属性

42:57.660 --> 42:58.660
这属性是什么呢

42:58.660 --> 43:00.360
就是两个下滑线也挺有

43:00.360 --> 43:02.160
你看给你设置重重障碍

43:02.760 --> 43:04.460
他就是他的内容是什么

43:04.460 --> 43:05.760
内容就是这个content

43:05.760 --> 43:07.760
对吧啊这里设置字幕串

43:08.060 --> 43:09.860
他在让你用这种方式来设置

43:09.860 --> 43:11.260
就是这里写个对象啊

43:11.260 --> 43:12.060
我们之前说过了

43:12.060 --> 43:13.060
外面的大伙号呢

43:13.060 --> 43:15.160
表示的是分件啊分件

43:15.160 --> 43:16.360
这里边是GS代码

43:16.360 --> 43:17.860
好GS你这个代码呢

43:17.860 --> 43:18.860
里边的是一个对象

43:19.360 --> 43:21.560
好对象里面一个属性叫两个下滑线

43:21.560 --> 43:22.160
哎听没

43:22.260 --> 43:23.660
你让你把内容设计进去

43:24.360 --> 43:25.860
如果你这样子写

43:26.660 --> 43:28.260
都没有被噁心到的话

43:28.260 --> 43:30.560
那么说明你真的是有这样的需求

43:30.960 --> 43:32.760
那不骗你不是给你开玩笑啊

43:32.760 --> 43:33.660
不是给你看玩笑

43:33.660 --> 43:35.060
他真的是这样子想的

43:35.060 --> 43:36.960
他故意给你去设置一些障碍

43:36.960 --> 43:39.360
防止你去做一些错误的操作

43:39.760 --> 43:41.360
好所以其实这也是

43:41.460 --> 43:43.560
咱们在软件开发中

43:43.660 --> 43:45.560
在做一些框架呀

43:45.660 --> 43:47.960
在做一些模块设计的时候呢

43:48.260 --> 43:49.260
采用了一种方式

43:49.260 --> 43:51.560
对对对一些比较危险的内容呢

43:51.560 --> 43:53.060
他我们会给你设置一些障碍

43:53.060 --> 43:54.860
尽量让你提醒你

43:54.860 --> 43:56.060
从代码的层面提醒你

43:56.060 --> 43:56.860
不要去这样做

43:57.260 --> 43:58.460
好保存看一下啊

43:58.760 --> 44:00.160
咱们这么这样子的你看

44:00.260 --> 44:01.760
这就说来说来元素结构了

44:01.960 --> 44:03.260
它变成了元素结构了

44:04.060 --> 44:05.560
好吧都是关于这一块

44:07.360 --> 44:09.560
呃然后就没啥了

44:10.360 --> 44:11.860
就没啥真没啥了啊

44:12.560 --> 44:14.160
那这一块啊

44:14.260 --> 44:17.160
在js x 中签入表达是这一块

44:17.160 --> 44:18.060
我们就讲完了啊

44:18.060 --> 44:19.060
分了几个部分

44:19.160 --> 44:21.660
一是签入内容怎么去签入啊

44:21.660 --> 44:22.760
各种各样的情况

44:22.760 --> 44:23.860
输入怎么样啊

44:23.860 --> 44:25.560
普通对象又会怎么样啊

44:25.560 --> 44:27.760
如果是rex元素会怎么样

44:27.760 --> 44:29.860
那如果使用表达是作为元素属性

44:29.860 --> 44:31.860
又是什么样的情况啊都讲完了

44:32.760 --> 44:33.760
好那么最后呢

44:33.760 --> 44:35.660
咱们来看下一个知识点啊

44:35.760 --> 44:36.360
就是说

44:36.760 --> 44:38.160
嗯在rex 里面呢

44:38.160 --> 44:40.360
他的元素呢有一个特性

44:40.760 --> 44:41.660
什么特性呢

44:41.760 --> 44:44.060
就是元素不可变啊

44:44.060 --> 44:46.560
元素一旦创建好了之后呢

44:46.560 --> 44:49.560
他的所有东西是不能变化的啊

44:49.560 --> 44:50.760
是不能变化的

44:50.960 --> 44:52.960
怎么来理解这个玩意呢

44:53.260 --> 44:54.560
咱们来看一个例子啊

44:56.440 --> 44:57.440
又把这块删了啊

44:57.440 --> 44:58.240
又把这块删了

44:58.240 --> 44:59.740
那到底呢我们这样吧

45:00.040 --> 45:00.540
啊这样吧

45:00.540 --> 45:01.140
就把这个

45:02.340 --> 45:04.540
呃就直接写进来得了啊

45:04.540 --> 45:05.740
直接写进来得了

45:06.140 --> 45:07.640
啊就这个hollower的吧

45:07.640 --> 45:08.440
hollower

45:09.640 --> 45:11.440
啊或者就这里就写一个1嘛

45:11.440 --> 45:12.340
就写个1

45:13.040 --> 45:14.640
或者我们这里一个辨量嘛

45:14.640 --> 45:16.940
一个辨量啊

45:17.240 --> 45:17.640
那么

45:18.440 --> 45:20.340
那么等于1啊等于1

45:20.340 --> 45:22.640
好把这个辨量的放进来啊放进来

45:23.540 --> 45:24.540
好行了啊

45:24.640 --> 45:25.840
咱们来看一下啊保存

45:26.040 --> 45:27.240
那这里毫无疑问

45:27.240 --> 45:28.340
网页上显示啥呢

45:28.340 --> 45:29.740
这显示1对不对

45:29.740 --> 45:30.940
显示1好

45:30.940 --> 45:31.740
接下来呢

45:31.840 --> 45:34.440
由于我们这里创建的是个啥呢

45:34.640 --> 45:36.040
是不是一个对象对吧

45:36.040 --> 45:38.240
我们把个对象输出一下啊

45:38.540 --> 45:41.140
logdiv啊输出一下这个对象啊

45:42.040 --> 45:42.540
输出

45:43.140 --> 45:44.040
咱们看一下啊

45:45.340 --> 45:47.140
嗯把这个这个东西删了啊

45:47.740 --> 45:50.640
这对象里边你看他的probs里边是一个child

45:50.640 --> 45:53.040
对吧child 长度为1啊

45:53.040 --> 45:54.240
不是长度为1啊

45:54.240 --> 45:55.940
因为他只有一个元素啊

45:55.940 --> 45:57.340
他的指元素只有一个

45:57.340 --> 45:58.940
所以说他就没有用输足了啊

45:58.940 --> 46:00.540
就是1啊就是1

46:01.040 --> 46:03.440
那我们尝试着能不能改变一下呢

46:03.440 --> 46:04.540
我们这样子写啊

46:04.640 --> 46:05.440
比方说呢

46:05.440 --> 46:09.040
我们这里去改变什么div的什么啊

46:09.340 --> 46:10.540
这个对象的什么

46:10.640 --> 46:12.340
他注意啊他不是动物对象啊

46:12.840 --> 46:14.940
千万不要给我来个什么inertax

46:14.940 --> 46:16.540
千万不要来这些玩意啊

46:16.540 --> 46:18.640
他是一个react元素

46:18.840 --> 46:20.740
那么这里呢一个属性叫probs

46:20.940 --> 46:23.140
probs里边一个属性什么呢

46:23.140 --> 46:24.540
一个属性叫做child

46:24.540 --> 46:25.340
child

46:25.840 --> 46:27.840
好重新给他复制

46:27.840 --> 46:28.740
复制为啥呢

46:28.740 --> 46:29.940
比方说复制为2

46:30.040 --> 46:31.240
咱们来看一下啊

46:31.340 --> 46:33.440
这样子复制过后会不会有效果呢

46:33.440 --> 46:35.540
我们一边打印一边输出啊

46:36.140 --> 46:37.640
一边打印打印过后呢

46:37.640 --> 46:39.340
我们再把这个东西再渲染

46:39.540 --> 46:40.940
那看他会不会渲染2呢

46:41.040 --> 46:41.740
保存

46:42.040 --> 46:42.940
咱们来看一下

46:43.140 --> 46:44.040
这爆错了

46:44.540 --> 46:46.140
爆错了他说说什么啊

46:46.540 --> 46:47.340
我看一下啊

46:48.440 --> 46:49.140
他说啊

46:49.340 --> 46:51.140
你这个属性呢child

46:51.540 --> 46:55.040
child呢他是指读的read only property

46:55.340 --> 46:57.240
不能给他复制而散去复制

46:57.240 --> 46:57.640
对吧

46:57.740 --> 47:00.040
不能给他这个指读的属性复制

47:00.640 --> 47:01.240
所以说

47:02.040 --> 47:03.840
这一块呢你是不能复制的

47:04.040 --> 47:05.440
不仅是这一块啊

47:05.440 --> 47:06.540
不仅是这一块

47:06.740 --> 47:08.040
这里边所有东西

47:08.040 --> 47:10.140
这个对象里边所有的内容

47:10.740 --> 47:11.940
想都不要想

47:11.940 --> 47:13.540
根本就不可能让你动的

47:13.740 --> 47:15.140
啊绝对不可能让你动的

47:15.240 --> 47:17.240
啊比方说吧这里还有一个属性叫title

47:18.040 --> 47:19.740
啊随便写吧啊随便写的啊

47:19.940 --> 47:22.240
那咱们看一下这个属性呗啊保存

47:22.640 --> 47:24.540
那看一下这个属性能不能重新复制呢

47:24.740 --> 47:27.240
啊这个probs里边不是个属性title吗

47:27.240 --> 47:28.640
对吧title你看

47:28.740 --> 47:30.540
只原说他作为一个属性存在的啊

47:30.540 --> 47:32.440
作为一个属性叫child存在的

47:32.840 --> 47:34.340
好那咱们来试一下啊

47:34.340 --> 47:36.640
能不能改一下这个probs里边的title呢

47:37.140 --> 47:39.140
title abc改成abc

47:39.140 --> 47:40.540
看一下啊保存

47:41.440 --> 47:42.640
你看一下是不是又抱错了

47:42.640 --> 47:44.300
他说你不能给这个

47:44.300 --> 47:46.140
指读的属性啊title复制

47:46.440 --> 47:48.240
所以说这里边啥都不能动

47:48.940 --> 47:50.840
实际上他做了一件啥事呢

47:51.340 --> 47:52.340
他做了这么一件事

47:52.440 --> 47:53.640
objects freeze

47:54.040 --> 47:55.240
给冻结了啊

47:55.240 --> 47:57.340
我们以前是不是学过的es6里边

47:57.540 --> 47:59.040
冻结一个对象啊

47:59.040 --> 48:00.240
他把这个对象给冻结了

48:00.240 --> 48:02.340
根本就不允许你对对象里边

48:02.340 --> 48:03.740
做任何给更改

48:03.940 --> 48:05.340
所以他这个对象是指读的

48:05.340 --> 48:07.140
你别想改他啊改不了

48:07.840 --> 48:08.940
那怎么办呢

48:09.340 --> 48:10.740
啊就是说我们这里呢

48:11.040 --> 48:13.740
呃是一个对象的对象中里边所有东西都不能改

48:14.040 --> 48:15.280
那如果你确实

48:15.280 --> 48:18.540
那比方说咱们界面有不能是永远精子的吧

48:18.840 --> 48:20.340
他不能是永远精子的吧

48:20.640 --> 48:21.340
那怎么办呢

48:21.340 --> 48:24.440
如果我要我要重新改变他里边的东西怎么办呢

48:25.640 --> 48:26.640
重新渲染

48:27.140 --> 48:28.140
没别的办法

48:28.540 --> 48:30.640
重新渲染啊重新渲染

48:30.940 --> 48:32.640
好怎么玩的这个事情

48:32.640 --> 48:34.540
比方说啊咱们可以这样做啊

48:35.340 --> 48:36.440
比方说set interview

48:36.840 --> 48:37.340
哎

48:38.340 --> 48:39.740
比方说咱们这里呢

48:39.940 --> 48:42.740
每隔一秒钟啊每隔一秒钟干嘛呢

48:42.740 --> 48:45.540
那么佳佳啊那么佳佳从零开始吧

48:45.540 --> 48:46.540
啊从零开始

48:46.940 --> 48:48.540
每隔一秒钟那么佳佳

48:49.140 --> 48:51.340
然后呢每一次加了之后呢

48:51.340 --> 48:53.040
重新渲染

48:53.740 --> 48:55.740
创建一个新的div

48:56.140 --> 48:57.240
创建一个新的div

48:57.240 --> 48:58.740
然后进行重新渲染

48:59.340 --> 49:00.940
你可以理解为什么

49:01.040 --> 49:03.140
就像那个看电影一样啊

49:03.140 --> 49:05.740
你看电影里边不是画面在动吗

49:05.740 --> 49:06.740
他真的在动吗

49:07.140 --> 49:08.340
没有他是一

49:08.440 --> 49:10.840
胶卷呢是一针一针的啊

49:10.840 --> 49:12.740
不过现在都用数码相机了啊

49:12.840 --> 49:15.040
不过就是数都是数码电影的啊

49:15.040 --> 49:15.740
数字电影

49:15.740 --> 49:17.840
不过他也是一针一针的啊

49:17.840 --> 49:18.740
就是每一针呢

49:18.740 --> 49:19.940
它是一个镜子的画面

49:19.940 --> 49:20.840
连在一起呢

49:20.840 --> 49:21.840
你感觉画面在动

49:22.240 --> 49:23.840
所以说这一块在reactor里边

49:23.840 --> 49:24.840
也是一样啊

49:24.940 --> 49:25.740
他每一个

49:26.040 --> 49:28.140
reactor元素创建出来过后呢

49:28.140 --> 49:29.540
是不可变的啊

49:29.540 --> 49:30.740
他是无法改变的

49:31.240 --> 49:32.740
所以说呢你这一块呢

49:32.740 --> 49:35.640
你只能不断的去创建新的东西

49:36.040 --> 49:37.440
然后呢重新渲染

49:38.040 --> 49:39.340
好保存看一下啊

49:41.150 --> 49:41.850
啊你看

49:42.150 --> 49:43.050
现在是不是啊

49:43.050 --> 49:44.150
可以实现这样的效果了

49:44.150 --> 49:46.250
对吧每一次都是重新渲染

49:46.650 --> 49:48.050
好那有同学就要说了

49:48.450 --> 49:50.650
那你这样子效率是不是太低了呀

49:50.950 --> 49:51.750
那低的可怕呀

49:51.750 --> 49:52.750
每次都重新渲染

49:52.750 --> 49:54.250
我就是挑动一下对吧

49:54.350 --> 49:55.750
为什么每次都重新渲染

49:55.750 --> 49:57.350
那他效率太低了

49:57.650 --> 49:59.550
告诉你效率一点都不低

50:00.550 --> 50:02.350
因为你认为效率低呢

50:02.350 --> 50:03.850
你是认为他动了什么

50:03.850 --> 50:05.050
动了动物元素

50:05.050 --> 50:06.750
你认为他把动物元素删掉了

50:06.750 --> 50:07.950
重新给他加了

50:08.150 --> 50:09.450
实际上不是的

50:09.750 --> 50:11.250
这个东西是不是动物元素

50:11.550 --> 50:12.450
他不是啊

50:12.650 --> 50:13.850
他是一个对象啊

50:14.350 --> 50:16.450
他是一个普普通通的介绍对象

50:16.450 --> 50:17.550
我只不过每一次

50:17.550 --> 50:19.750
每一次那个每个一秒钟

50:19.750 --> 50:20.950
创建一个对象而已

50:21.050 --> 50:23.650
创建对象的开销那小得不得了

50:24.250 --> 50:25.650
你根本可以忽略不计的

50:25.950 --> 50:27.450
在介绍里面创建对象

50:27.450 --> 50:28.850
效率是非常非常高的

50:29.550 --> 50:30.950
效率低低在哪什么地方

50:30.950 --> 50:32.550
低在动物对象的操作

50:33.150 --> 50:34.250
所以说他我们这里呢

50:34.250 --> 50:35.650
只是在创建对象

50:35.650 --> 50:37.550
而不是真实的动物对象

50:38.350 --> 50:40.750
那么我们最终是要反映到页面上

50:40.750 --> 50:43.050
最终是要反映到真实动物对象里面的

50:43.050 --> 50:44.250
让我们来看一下

50:44.250 --> 50:46.050
真实动物对象里面的变化

50:46.450 --> 50:47.750
你看一下变化了啥

50:48.250 --> 50:49.250
变化了啥啊

50:50.050 --> 50:51.550
他只变化了这个内容

50:51.550 --> 50:52.350
你看到没

50:52.650 --> 50:54.550
他只变化了这个内容啊

50:54.850 --> 50:57.350
这个元素DIV这个元素都没动

50:57.550 --> 50:59.050
完全没动啊

50:59.050 --> 51:01.350
这个DIV这个元素他没有给你删掉

51:01.450 --> 51:03.550
啊没并没有给你删除这个DIV元素

51:03.550 --> 51:04.550
重新给你创建

51:04.950 --> 51:06.450
这是如Rx里边

51:06.450 --> 51:08.450
就是Rx动物动物里边

51:08.450 --> 51:10.050
他给你做的一些优化

51:10.350 --> 51:11.950
他发现了两次一对比

51:11.950 --> 51:12.550
发现哎

51:12.850 --> 51:15.450
这一次创建的东西跟之前的动物对象

51:15.850 --> 51:17.450
差不多就变化了一个内容

51:17.450 --> 51:18.750
那我只改内容就行了

51:18.950 --> 51:21.650
所以说他只会改变动物对象里边

51:21.650 --> 51:22.950
变化了那一部分

51:23.150 --> 51:24.150
没有变化的那一部分

51:24.150 --> 51:25.450
他根本就不会动

51:26.150 --> 51:28.250
所以说你根本就不用担心效率的问题

51:28.450 --> 51:30.350
每一次就是重新宣展啊

51:30.350 --> 51:31.250
就是重新宣展

51:31.750 --> 51:33.450
包括我们后边讲了很多组建

51:33.450 --> 51:35.450
他最终的本质也是重新宣展

51:35.650 --> 51:36.750
也是重新宣展

51:37.150 --> 51:39.250
只不过反映到真实的动物对象里边

51:39.250 --> 51:40.550
他给你做了优化而已

51:41.350 --> 51:42.850
我们这里指的重新宣展

51:42.850 --> 51:43.650
宣展的是什么

51:43.650 --> 51:45.450
宣展的是虚拟的动物

51:46.250 --> 51:47.850
并不是真实的动物

51:48.250 --> 51:50.550
真实的动物他不一定重新给你替换掉

51:52.250 --> 51:53.850
好所以说这是这一块啊

51:53.950 --> 51:55.250
因此呢在Rx里边

51:55.250 --> 51:57.250
你千万不要去想着改变他里边的

51:57.250 --> 51:58.750
什么一些元素里边的东西

51:58.750 --> 51:59.950
不要想啊不要想

52:00.850 --> 52:05.050
这是关于元素的不可变形

52:05.350 --> 52:06.150
不可变形

52:07.450 --> 52:09.050
好那就没啥了啊

52:09.050 --> 52:10.650
这就GSX这一块呢

52:10.650 --> 52:11.650
就讲完了啊

52:11.650 --> 52:12.350
就讲完了

52:12.350 --> 52:13.450
那大家下来呢

52:13.450 --> 52:16.650
去呃练习一下这里

52:16.650 --> 52:18.450
这些课里边的每一个支持点

52:18.450 --> 52:19.550
特别是什么呢

52:19.550 --> 52:20.950
特别是这个就是

52:21.950 --> 52:22.650
这里的

52:22.950 --> 52:25.950
那作为内容去显示一些元素啊

52:26.050 --> 52:26.950
作为什么

52:27.650 --> 52:29.250
作为属性的值

52:29.650 --> 52:31.050
去设置一些表达式

52:31.050 --> 52:32.250
都去练习一下啊

52:32.250 --> 52:33.050
都去练习一下

52:33.050 --> 52:34.250
有这么一个印象

52:34.350 --> 52:35.350
那咱们下节课呢

52:35.350 --> 52:37.850
来做一个小的demo

52:37.950 --> 52:38.950
小的效果出来

52:39.350 --> 52:41.050
好了这是关于GSX啊

