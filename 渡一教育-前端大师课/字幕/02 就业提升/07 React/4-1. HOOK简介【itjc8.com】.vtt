WEBVTT

00:00.690 --> 00:07.690
好 大家听一下外面的声音就是背景噪音的是什么东西 你们猜一下是什么东西

00:07.690 --> 00:13.690
现在是夏天 现在是2019年7月30号 外面是陈敏

00:13.690 --> 00:17.690
我现在在大自然的怀抱里面给你们做这个视频

00:17.690 --> 00:21.690
以后你们还可能会听到一些工地上悄悄打打的声音

00:21.690 --> 00:24.690
我的天啊 我真的想说脏话了 没办法

00:26.690 --> 00:29.690
我也忍受一下吧 你们也忍受一下吧

00:30.690 --> 00:33.690
影响不会太大 有点环境的噪音

00:33.690 --> 00:36.690
我已经把门窗关完了 声音没办法

00:37.690 --> 00:41.690
咱们这个章节 仍然还是在react这个范图之内

00:42.690 --> 00:45.690
暂时还没有设计到第三方的一些东西

00:45.690 --> 00:49.690
比方说我们讲的课程是讲react全家统 对吧

00:49.690 --> 00:54.690
全家统里面我们现在仍然是处于react的知识体系里边

00:54.690 --> 00:57.690
还不设计到其他的什么

00:58.690 --> 01:01.690
数据 处理 什么UI库 这都还不设计

01:01.690 --> 01:05.690
还有路由 这都还不设计 还在react这个体系里边

01:06.690 --> 01:09.690
因为以前是没有这个课的

01:09.690 --> 01:12.690
叫hook 这个课以前是没有的

01:12.690 --> 01:15.690
因为这个是一个非常非常新的东西

01:15.690 --> 01:19.690
这个东西是hook是react这个版本

01:20.690 --> 01:24.690
16.8.0之后出现的

01:24.690 --> 01:28.690
出现了这么东西 其实在16.8.0之前

01:28.690 --> 01:34.690
它内部 它已经有这个提案了

01:34.690 --> 01:37.690
已经在实施这个东西了 也在征求意见

01:37.690 --> 01:41.690
在16.8.0之后 这个东西才稳定下来了

01:41.690 --> 01:43.690
之前都有比较大的改动

01:44.690 --> 01:47.690
它这个玩意是什么呢 就是说

01:47.690 --> 01:50.690
这一块咱们做个介绍

01:50.690 --> 01:52.690
对它做个简介

01:52.690 --> 01:55.690
不会涉及到代码 就大概了解一下

01:55.690 --> 01:57.690
这个是什么玩意 下一个开始

01:57.690 --> 02:00.690
我们再具体说它的代码怎么去编写

02:00.690 --> 02:02.690
这个玩意是这样子

02:02.690 --> 02:05.690
就是Facebook的react

02:05.690 --> 02:08.690
除了已经有多少

02:08.690 --> 02:10.690
五六年了吧 五六年了

02:10.690 --> 02:13.690
在这五六年的使用期间

02:13.690 --> 02:17.690
整个的开发社区呢 就征求了很多意见

02:17.690 --> 02:20.690
就是说他们在使用react的时候

02:20.690 --> 02:23.690
发现大部分时候都使用了内组件

02:23.690 --> 02:26.690
当时他们把组件分为两种

02:26.690 --> 02:29.690
一种叫做无状态组件

02:29.690 --> 02:34.690
无状态组件就是我们现在说的寒树组件

02:34.690 --> 02:37.690
以前把它叫做无状态组件

02:37.690 --> 02:40.690
那么现在把这个词给它取消掉了

02:40.690 --> 02:42.690
咱们使用的是寒树组件

02:42.690 --> 02:46.690
然后另外一种就是内组件

02:46.690 --> 02:48.690
这两种组件

02:48.690 --> 02:52.690
大家学到现在你们觉得哪种组件

02:52.690 --> 02:54.690
用的比较多呢

02:54.690 --> 02:56.690
你觉得哪种组件用的比较多呢

02:56.690 --> 02:58.690
所以一定是内组件

02:58.690 --> 03:00.690
为什么呢 因为无状态组件

03:00.690 --> 03:02.690
就是寒树组件里面的

03:02.690 --> 03:05.690
它没有状态 就是没有state

03:05.690 --> 03:07.690
它没有生命周期

03:07.690 --> 03:09.690
也没有办法进行优化

03:09.690 --> 03:11.690
并且在过去的API里边

03:11.690 --> 03:14.690
它甚至连上下文也没法创建

03:14.690 --> 03:16.690
对不对 甚至寒树组件

03:16.690 --> 03:18.690
我们也没有办法给它ref

03:18.690 --> 03:20.690
只能用ref转发

03:20.690 --> 03:22.690
等等等等 总之无状态组件

03:22.690 --> 03:25.690
它比较纯粹 但它功能很少

03:25.690 --> 03:27.690
它给你能够提供你使用的功能很少

03:27.690 --> 03:30.690
大部分功能都在内组件里边

03:30.690 --> 03:32.690
然而用内组件的时候

03:32.690 --> 03:35.690
我们会遇到很多很多的困扰

03:35.690 --> 03:37.690
或者说麻烦

03:37.690 --> 03:39.690
内组件里边会有哪些麻烦呢

03:39.690 --> 03:41.690
咱们看一下 内组件里边

03:41.690 --> 03:43.690
它有哪些麻烦

03:44.690 --> 03:46.690
中的麻烦

03:46.690 --> 03:49.690
第一个麻烦就是Z史指向问题

03:49.690 --> 03:52.690
我们最开始接触的时候

03:52.690 --> 03:55.690
可能一个稍微比较复杂的一个知识点

03:55.690 --> 03:57.690
就是Z史指向的问题

03:57.690 --> 03:59.690
为了解决这个问题

03:59.690 --> 04:00.690
我们得用什么

04:00.690 --> 04:02.690
得用那个

04:02.690 --> 04:04.690
这个叫什么

04:04.690 --> 04:05.690
Yes next

04:05.690 --> 04:07.690
这个就是class field的语法

04:07.690 --> 04:10.690
就是把那个字段把它写成一个

04:11.690 --> 04:14.690
就这种

04:14.690 --> 04:16.690
这种语法

04:16.690 --> 04:19.690
比如什么handle

04:19.690 --> 04:22.690
它写上一个就是箭头函数

04:22.690 --> 04:25.690
我们用箭头函数这种方式来解决Z史

04:25.690 --> 04:29.690
或者是用band的方式来解决Z史指向的问题

04:29.690 --> 04:32.690
总归我们为了解决Z史指向

04:32.690 --> 04:35.690
会花一点精力

04:35.690 --> 04:37.690
而且对一些初学者来说

04:37.690 --> 04:39.690
Z史指向它控制不好的话

04:39.690 --> 04:40.690
经常容易出问题

04:40.690 --> 04:42.690
这是Z史指向的问题

04:42.690 --> 04:44.690
那么第二个问题就是

04:44.690 --> 04:46.690
繁琐的生命周期

04:46.690 --> 04:51.020
就是它的生命周期函数

04:51.020 --> 04:53.020
咱们学过什么旧版的生命周期

04:53.020 --> 04:55.020
新版的生命周期

04:55.020 --> 04:58.020
它很多有很多这样的一个生命周期

04:58.020 --> 04:59.020
这些生命周期

04:59.020 --> 05:00.020
我们这些函数

05:00.020 --> 05:02.020
这些函数在什么时候运行

05:02.020 --> 05:03.020
咱们需要去记忆的

05:03.020 --> 05:05.020
需要去理解并且记忆的

05:05.020 --> 05:06.020
也挺繁琐的

05:06.020 --> 05:08.020
这一块其实蛮复杂的

05:08.020 --> 05:10.020
包括我们在讲那个渲染原理

05:10.020 --> 05:11.020
就渲染过程的时候

05:11.020 --> 05:13.020
也多次提到了一个内组件

05:13.020 --> 05:15.020
它生命周期是什么样子

05:15.020 --> 05:16.020
其实你回忆一下

05:16.020 --> 05:18.020
咱们在讲那个渲染过程的时候

05:18.020 --> 05:19.020
是不是函数组件

05:19.020 --> 05:20.020
特别特别简单

05:20.020 --> 05:21.020
对吧

05:21.020 --> 05:22.020
特别特别简单

05:22.020 --> 05:23.020
用了这个组件

05:23.020 --> 05:24.020
它就掉入一层函数

05:24.020 --> 05:25.020
到结果就完了

05:25.020 --> 05:26.020
对不对

05:26.020 --> 05:28.020
没有那些乱七八糟的东西

05:28.020 --> 05:29.020
而真正复杂的

05:29.020 --> 05:31.020
在内组件这一块

05:31.020 --> 05:32.020
你回忆一下

05:32.020 --> 05:34.020
咱们当时讲那个渲染过程

05:34.020 --> 05:35.020
讲的最多的就是内组件的

05:35.020 --> 05:37.020
那个生命周期的过程

05:37.020 --> 05:38.020
对不对

05:38.020 --> 05:41.020
这就是内组件里边

05:41.020 --> 05:43.020
一些比较繁熟的地方

05:43.020 --> 05:44.020
还有一些问题

05:44.020 --> 05:46.020
我们现在就不方便说了

05:46.020 --> 05:47.020
因为我们这里说的

05:47.020 --> 05:48.020
说的也是白说

05:48.020 --> 05:49.020
我们没有结合代码的话

05:49.020 --> 05:51.020
说的也很难理解

05:51.020 --> 05:53.020
那么还有一些其他问题

05:53.020 --> 05:54.020
其他问题

05:54.020 --> 05:56.020
我们在后边讲那个

05:56.020 --> 05:58.020
后壳的时候再详细来说

05:58.020 --> 06:01.020
实际上这些好像说

06:01.020 --> 06:03.020
理所当然的是内组件

06:03.020 --> 06:04.020
才能做的事

06:04.020 --> 06:06.020
实际上这些函数组件

06:06.020 --> 06:08.020
也应该能够完成这些事情

06:08.020 --> 06:09.020
比方说

06:09.020 --> 06:11.020
比方说那个函数组件里边

06:11.020 --> 06:12.020
它不是没状态吗

06:12.020 --> 06:14.020
那能不能给它一个状态呢

06:14.020 --> 06:15.020
函数组件里面

06:15.020 --> 06:16.020
不是没有任何生命周期吗

06:16.020 --> 06:17.020
那么能不能给它一些

06:17.020 --> 06:20.020
简洁的生命周期呢

06:20.020 --> 06:21.020
那么函数组件里边

06:21.020 --> 06:22.020
能不能去优化一些功能

06:22.020 --> 06:25.020
是它用起来比内组件还要好用了

06:25.020 --> 06:28.020
这就是在那个官方

06:28.020 --> 06:30.020
facebook它要思考的问题

06:30.020 --> 06:31.020
因为函数是编程

06:31.020 --> 06:33.020
大家可能或多或少的

06:33.020 --> 06:34.020
听过这么一个概念

06:34.020 --> 06:35.020
就是函数是编程

06:35.020 --> 06:37.020
函数是编程里边的主角

06:37.020 --> 06:38.020
就是函数

06:38.020 --> 06:39.020
就是函数

06:39.020 --> 06:41.020
就是一个非常纯粹的一个函数

06:41.020 --> 06:44.020
那么在函数是编程里边

06:44.020 --> 06:47.020
他们主角就是函数

06:47.020 --> 06:49.020
就是我们基本上整个程序

06:49.020 --> 06:51.020
都是用函数写成的

06:51.020 --> 06:52.020
不需要你去使用

06:52.020 --> 06:54.020
怎么面向对象的内这些东西

06:54.020 --> 06:56.020
那么能不能在react里边

06:56.020 --> 06:58.020
真正实现的那样的效果呢

06:58.020 --> 06:59.020
那么react的官方

06:59.020 --> 07:00.020
经过一些

07:00.020 --> 07:02.020
一些时间的沉淀

07:02.020 --> 07:04.020
最终推出了这么一个东西

07:04.020 --> 07:06.020
hook

07:06.020 --> 07:08.020
那么hook

07:08.020 --> 07:10.020
它就是专门用于

07:10.020 --> 07:14.020
专门用于增强

07:14.020 --> 07:17.020
函数逐渐的功能

07:17.020 --> 07:22.020
使之理论上

07:22.020 --> 07:27.020
可以成为内逐渐的替代品

07:27.020 --> 07:30.020
就是有了这个hook之后

07:30.020 --> 07:31.020
咱们之后呢

07:31.020 --> 07:33.020
内逐渐能够办到的事

07:33.020 --> 07:36.020
基本上函数逐渐也能办到了

07:36.020 --> 07:37.020
不是说之前的函数逐渐

07:37.020 --> 07:38.020
它没有状态吗

07:38.020 --> 07:39.020
对吧

07:39.020 --> 07:40.020
所以说之前叫做无状态逐渐

07:40.020 --> 07:42.020
但是现在的没有这个词了

07:42.020 --> 07:44.020
现在叫做函数逐渐

07:44.020 --> 07:45.020
为什么

07:45.020 --> 07:46.020
因为函数逐渐里边

07:46.020 --> 07:47.020
其实也可以有状态

07:47.020 --> 07:49.020
不是说之前内逐渐里面

07:49.020 --> 07:51.020
内逐渐有生命周期吗

07:51.020 --> 07:52.020
函数逐渐没有生命周期

07:52.020 --> 07:53.020
其实函数逐渐里面

07:53.020 --> 07:54.020
它确实没有生命周期

07:54.020 --> 07:56.020
但是它有类似于生命周期的东西

07:56.020 --> 07:58.020
可以解决我们的问题

07:58.020 --> 08:00.020
而且函数逐渐

08:00.020 --> 08:01.020
其实相比来说

08:01.020 --> 08:03.020
跟内逐渐相比来说

08:03.020 --> 08:05.020
函数逐渐是注意纯粹最简单的

08:05.020 --> 08:07.020
你说一个没有学过

08:07.020 --> 08:08.020
面向对象编程的人

08:08.020 --> 08:10.020
他已经学过函数

08:10.020 --> 08:11.020
对不对

08:11.020 --> 08:12.020
函数是大家都会的

08:12.020 --> 08:13.020
哪怕我没有内的知识

08:13.020 --> 08:15.020
我也可以用函数来写出来的东西

08:15.020 --> 08:17.020
所以说rex官方

08:17.020 --> 08:20.020
它本身是非常喜欢函数逐渐的

08:20.020 --> 08:21.020
但是有的时候

08:21.020 --> 08:23.020
把rex推出之后

08:23.020 --> 08:25.020
由于函数逐渐缺少一些功能

08:25.020 --> 08:26.020
逼得大家没办法

08:26.020 --> 08:29.020
很多时候去使用了内逐渐

08:29.020 --> 08:31.020
于是现在推出了hook

08:31.020 --> 08:34.020
hook增强了函数逐渐的功能

08:34.020 --> 08:37.020
那么此之可以成为内逐渐的替代品

08:37.020 --> 08:40.020
但是它不是说完全要取代内逐渐

08:40.020 --> 08:42.020
内逐渐它仍然可以用

08:42.020 --> 08:44.020
官方反复强调这一点

08:44.020 --> 08:48.340
它说官方强调

08:48.340 --> 08:51.340
没有必要更改

08:51.340 --> 08:57.340
先就是已经完成的内逐渐

08:57.340 --> 08:59.340
内逐渐它可以用

08:59.340 --> 09:02.340
官方也不会在

09:02.340 --> 09:04.340
目前至少目前来说

09:04.340 --> 09:05.340
官方明确说了

09:05.340 --> 09:09.340
目前没有计划取消内逐渐

09:09.340 --> 09:11.340
实际上有了hook之后

09:11.340 --> 09:13.340
你会发现内逐渐真的是可以没有了

09:13.340 --> 09:15.340
可以没有内逐渐的

09:15.340 --> 09:16.340
但是目前官方说

09:16.340 --> 09:19.340
他们并没有计划取消内逐渐

09:19.340 --> 09:21.340
而且现在hook

09:21.340 --> 09:23.340
毕竟是一个很新的东西

09:23.340 --> 09:25.340
现在我目前的时间点

09:25.340 --> 09:28.340
rex的版本是16.8.6

09:28.340 --> 09:30.340
我记得 应该是这个版本

09:30.340 --> 09:32.340
对 16.8.6

09:32.340 --> 09:34.340
所以说目前的hook

09:34.340 --> 09:36.340
还是一个非常新的东西

09:36.340 --> 09:41.340
但是官方说鼓励你去使用的hook

09:41.340 --> 09:44.340
然后hook后边它会经过不断的完善

09:44.340 --> 09:45.340
因为官方的重心

09:45.340 --> 09:47.340
可能以后不会对内逐渐

09:47.340 --> 09:49.340
做一些什么重大的更新

09:49.340 --> 09:51.340
可能会着重去增强

09:51.340 --> 09:52.340
hook的功能

09:52.340 --> 09:53.340
目前的hook

09:53.340 --> 09:56.340
还没有说完全能够取代内逐渐

09:56.340 --> 09:57.340
只是理论上

09:57.340 --> 09:59.340
因为有些内逐渐的功能

09:59.340 --> 10:00.340
我们后面会讲到

10:00.340 --> 10:02.340
hook目前还没有

10:02.340 --> 10:03.340
不过将来一定会有

10:03.340 --> 10:04.340
官方一定会做的

10:04.340 --> 10:06.340
但是官方目前说

10:06.340 --> 10:08.340
他没有计划说取消内逐渐

10:08.340 --> 10:09.340
就是说内逐渐以后

10:09.340 --> 10:10.340
你们就不要用了

10:10.340 --> 10:12.340
但是它只是鼓励

10:12.340 --> 10:17.340
只是鼓励使用寒树组件

10:18.340 --> 10:20.340
因为现在有了hook之后

10:20.340 --> 10:22.340
基本上绝大部分功能

10:22.340 --> 10:23.340
内逐渐能做的

10:23.340 --> 10:25.340
寒树组件都能做了

10:25.340 --> 10:28.340
这就是hook它能做什么事情

10:28.340 --> 10:29.340
也就是说hook

10:29.340 --> 10:31.340
它专门是用于增强寒树组件的

10:31.340 --> 10:33.340
因此我们在这个章节学习的过程中

10:33.340 --> 10:35.340
就不会涉及到什么内逐渐了

10:35.340 --> 10:36.340
要涉及内逐渐的话

10:36.340 --> 10:38.340
基本上就是用对比

10:38.340 --> 10:39.340
我们后边写的组件

10:39.340 --> 10:41.340
基本上都是用寒树组件来写的

10:41.340 --> 10:43.340
因为有hook的存在

10:43.340 --> 10:44.340
所以我们学习个hook

10:44.340 --> 10:45.340
它不是说

10:45.340 --> 10:46.340
我们在内逐渐里面

10:46.340 --> 10:47.340
也可以怎么用

10:47.340 --> 10:48.340
内逐渐里面不能用

10:48.340 --> 10:51.340
hook在内逐渐里面是不能用的

10:51.340 --> 10:54.340
hook在内逐渐中

10:56.340 --> 10:58.340
是不能使用的

10:58.340 --> 11:00.340
只能在寒树里面使用

11:00.340 --> 11:03.340
它是在寒树组件里面增强它的功能的

11:03.340 --> 11:05.340
那么这个hook到底是什么玩意儿呢

11:05.340 --> 11:06.340
hook

11:06.340 --> 11:08.340
因为我们其实你或多或少的话

11:08.340 --> 11:09.340
听过这个单词

11:09.340 --> 11:11.340
它叫做什么钩子

11:13.340 --> 11:15.340
就相当于是你家里面

11:15.340 --> 11:17.340
墙上有一些钩子

11:17.340 --> 11:19.340
那些钩子是不是可以挂任何东西

11:19.340 --> 11:21.340
挂任何的一些东西上面

11:21.340 --> 11:23.340
那么我们程序里面的钩子

11:23.340 --> 11:25.340
它往往指的是一个寒树

11:25.340 --> 11:27.340
本质上是一个寒树

11:27.340 --> 11:29.340
它本身就是一个寒树

11:29.340 --> 11:34.340
该寒树可以挂载任何功能

11:34.340 --> 11:37.340
就是你可以在家里面有些钩子

11:37.340 --> 11:39.340
你可以挂一个口袋

11:39.340 --> 11:41.340
挂一些什么

11:41.340 --> 11:43.340
挂一些衣物

11:43.340 --> 11:44.340
什么东西

11:44.340 --> 11:45.340
任何东西都可以挂上去

11:45.340 --> 11:47.340
那么在程序里面的钩子

11:47.340 --> 11:48.340
它也是个寒树

11:48.340 --> 11:50.340
你可以挂载任何功能上去

11:50.340 --> 11:53.340
它会在适当的时候去执行

11:53.340 --> 11:54.340
这有个hook

11:54.340 --> 11:56.340
本质上就是一个寒树

11:56.340 --> 11:59.340
那么hook它在react里面有很多种

12:00.340 --> 12:03.340
hook 种类有很多

12:03.340 --> 12:04.340
那些hook

12:04.340 --> 12:06.340
我们接下来讲这个hook的时候

12:06.340 --> 12:09.340
基本上就会按照它的种类分类来讲

12:09.340 --> 12:11.340
比方第一种hook就是最重要的

12:11.340 --> 12:13.340
use state

12:13.340 --> 12:14.340
这个hook

12:14.340 --> 12:18.340
第二种就是use effect

12:19.340 --> 12:21.340
第三种就是其他了

12:21.340 --> 12:22.340
我们把它归为其他

12:22.340 --> 12:24.340
我们挨着挨着去讲这些hook

12:24.340 --> 12:26.340
每一种hook本质上都是一个寒树

12:26.340 --> 12:28.340
像这些东西都是一个寒树

12:28.340 --> 12:29.340
那么这个不同的寒树

12:29.340 --> 12:31.340
还有不同的功能

12:31.340 --> 12:33.340
来增强我们寒树组建的能力

12:33.340 --> 12:35.340
寒树组建里面不是没有状态吗

12:35.340 --> 12:36.340
OK

12:36.340 --> 12:38.340
用这个玩意来解决状态

12:38.340 --> 12:40.340
寒树组建里面不是没有生命周期寒树吗

12:40.340 --> 12:42.340
用这个东西来解决

12:42.340 --> 12:45.340
某些生命周期寒树里面要做的事情

12:45.340 --> 12:46.340
寒树组建里面

12:46.340 --> 12:48.340
我就现在就不说了

12:48.340 --> 12:49.340
现在不说了

12:49.340 --> 12:50.340
以后讲的再说

12:50.340 --> 12:51.340
hook它有很多种

12:51.340 --> 12:53.340
不同的hook

12:53.340 --> 12:55.340
它能增强不同某一方面的功能

12:55.340 --> 12:57.340
你要这意思吗

12:57.340 --> 12:59.340
而且我们通过这个粒子发现

12:59.340 --> 13:01.340
hook它是一个寒树

13:01.340 --> 13:03.340
这个寒树它有这么一个特点

13:03.340 --> 13:05.340
总是以use开头

13:06.340 --> 13:07.340
命名上

13:07.340 --> 13:11.340
总是以use开头

13:11.340 --> 13:12.340
你看这些hook

13:12.340 --> 13:14.340
它都是以use开头的寒树

13:14.340 --> 13:16.340
后面我们就挨再来讲

13:16.340 --> 13:17.340
好了

13:17.340 --> 13:19.340
我们这里可能就简单的介绍一下

13:19.340 --> 13:20.340
hook是什么东西

13:20.340 --> 13:21.340
大家先有这么一个印象

13:21.340 --> 13:22.340
就是说

13:22.340 --> 13:25.340
它来解决寒树组建里面功能不足的问题

13:25.340 --> 13:28.340
并且reaction并没有说要取消内组建

13:28.340 --> 13:30.340
只是说鼓励使用寒树组建

13:30.340 --> 13:32.340
寒树组建比较纯粹比较简单

13:32.340 --> 13:33.340
比较好理解

13:33.340 --> 13:34.340
不太容易出bug

13:34.340 --> 13:36.340
然后hook它本质上

13:36.340 --> 13:38.340
就是在寒树组建里面

13:38.340 --> 13:39.340
写的一个寒树

13:39.340 --> 13:40.340
调用的一个寒树

13:40.340 --> 13:42.340
这个寒树以use开头

13:43.340 --> 13:46.340
不同的hook它有不同的功能

13:46.340 --> 13:48.340
接下来我们就挨着挨着来讲

13:48.340 --> 13:51.340
这些hook它到底有什么样的功能

