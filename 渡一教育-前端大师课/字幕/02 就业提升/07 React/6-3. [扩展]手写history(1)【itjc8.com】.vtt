WEBVTT

00:00.620 --> 00:06.620
这节课咱们来 首写 Browser History

00:06.620 --> 00:08.620
我们之前不是用过这个玩意吗 对吧

00:08.620 --> 00:10.620
crease browser history

00:10.620 --> 00:13.620
那么这节课咱们来手动剧写这么一个东西

00:13.620 --> 00:16.620
写完这个东西 大家可以自行去思考

00:16.620 --> 00:18.620
如果说你要写crease hash history

00:18.620 --> 00:24.620
或者是crease memory history怎么去写

00:24.620 --> 00:27.620
当然我们这里直言是如何来写这个函数

00:28.620 --> 00:30.620
虽然说只是有这么一个函数

00:30.620 --> 00:31.620
但是内容还是蛮多的

00:31.620 --> 00:34.620
因为我们知道函数里面提供了很多很多的方法

00:34.620 --> 00:37.620
对吧 那方法我们的一个一个的去实现

00:37.620 --> 00:41.620
总之它最终会返回一个history对象

00:41.620 --> 00:43.620
我们在写函数的时候

00:43.620 --> 00:45.620
我这里先建个文件夹

00:45.620 --> 00:46.620
建个文件夹

00:46.620 --> 00:48.620
这个文件夹来给它取个名字

00:48.620 --> 00:50.620
就叫做history

00:50.620 --> 00:51.620
history

00:51.620 --> 00:54.620
或者给它叫做

00:54.620 --> 00:56.620
就叫history吧

00:57.620 --> 00:58.620
这个文件夹里面

00:58.620 --> 01:01.620
我们给它新建一个index.js

01:01.620 --> 01:07.620
然后再建一个就是crease browser history

01:07.620 --> 01:12.620
这个文件

01:12.620 --> 01:17.620
这个文件其实就是我们要实现的文件

01:17.620 --> 01:21.620
就这里面肯定要导出一个函数

01:21.620 --> 01:25.620
怎么函数呢就是crease browser

01:25.620 --> 01:26.620
方形

01:28.620 --> 01:33.620
crease browser history

01:33.620 --> 01:34.620
这么一个函数

01:34.620 --> 01:36.620
当然这里面有些配置对吧

01:36.620 --> 01:38.620
我们知道这里面有些配置

01:38.620 --> 01:39.620
就这样子写出来

01:39.620 --> 01:40.620
就这么一个函数

01:40.620 --> 01:41.620
就这么一个函数

01:41.620 --> 01:49.620
就是创建一个history

01:49.620 --> 01:53.620
API的history对象

01:53.620 --> 01:55.620
就说起来有点怪怪的

01:55.620 --> 01:56.620
你们懂的

01:56.620 --> 01:58.620
这个意思就是个意思

01:58.620 --> 01:59.620
这里来导出函数

01:59.620 --> 02:01.620
为什么要写这个index.js呢

02:01.620 --> 02:03.620
这个js的作用就是

02:03.620 --> 02:04.620
因为这里面肯定

02:04.620 --> 02:06.620
如果说我们按照正常来写的话

02:06.620 --> 02:08.620
是不是还有hashi history

02:08.620 --> 02:09.620
还要写个文件

02:09.620 --> 02:10.620
crease hashi history

02:10.620 --> 02:11.620
还要写个文件

02:11.620 --> 02:12.620
还有什么什么

02:12.620 --> 02:14.620
那里面有些重复的代码

02:14.620 --> 02:15.620
我们是不要提出来

02:15.620 --> 02:16.620
又形成单独的一个模块

02:16.620 --> 02:18.620
那么这个index.js呢

02:18.620 --> 02:20.620
我们往往是把那些

02:20.620 --> 02:22.620
需要暴露给外边使用的

02:22.620 --> 02:24.620
这些函数啊

02:24.620 --> 02:27.620
内呀或者是对象啊

02:27.620 --> 02:28.620
需要暴露给外边的

02:28.620 --> 02:29.620
把重新导出去

02:29.620 --> 02:30.620
起这么一个作用

02:30.620 --> 02:34.620
所以这个index.js这个函数

02:34.620 --> 02:35.620
我们可以这样子写吧

02:35.620 --> 02:36.620
比方说import

02:36.620 --> 02:41.620
导入这个create browser history

02:41.620 --> 02:45.620
from 从这个地方

02:45.620 --> 02:46.620
导入进来

02:46.620 --> 02:48.620
然后这里直接导出

02:48.620 --> 02:50.620
export default

02:50.620 --> 02:51.620
导出一个

02:51.620 --> 02:56.060
直接导出create browser history

02:56.060 --> 02:58.060
或者说我们直接在这里

02:58.060 --> 03:00.060
直接把这个文件里面

03:00.060 --> 03:02.060
默认导出

03:02.060 --> 03:04.060
然后再重新导出

03:04.060 --> 03:05.060
这个语法大家应该懂

03:05.060 --> 03:06.060
对吧

03:06.060 --> 03:07.060
就在这里的

03:07.060 --> 03:09.060
我们可以使用

03:10.060 --> 03:12.060
default

03:12.060 --> 03:15.060
直接把重新导出一个完事了

03:15.060 --> 03:17.060
那如果说后边写了什么

03:17.060 --> 03:20.060
create hash history

03:20.060 --> 03:22.060
是不是再重新导出一次

03:22.060 --> 03:24.060
然后再写了什么

03:24.060 --> 03:25.060
memory history

03:25.060 --> 03:26.060
是不是再重新导出一次

03:26.060 --> 03:27.060
就是给它一个入口

03:27.060 --> 03:29.060
index.js主要是给它一个入口

03:29.060 --> 03:31.060
那之后我们使用的话

03:31.060 --> 03:32.060
使用上的话

03:32.060 --> 03:34.060
那么我们肯定可以用这种方式

03:34.060 --> 03:35.060
使用上的话

03:35.060 --> 03:36.060
我们导入的时候

03:36.060 --> 03:38.060
import

03:38.060 --> 03:41.060
from

03:41.060 --> 03:42.060
点儿写缸

03:42.060 --> 03:43.060
react to rotor

03:43.060 --> 03:45.060
里边的history

03:45.060 --> 03:46.060
我们使用的时候

03:46.060 --> 03:48.060
就可以用这种方式来使用

03:48.060 --> 03:50.060
比方说这里就可以写上

03:50.060 --> 03:52.060
create browser history

03:52.060 --> 03:54.060
是不是可以把导入进来的

03:54.060 --> 03:55.060
就可以用这种方式

03:55.060 --> 03:57.060
因为这个文件只是提供一个入口

03:57.060 --> 03:58.060
这个很简单

03:58.060 --> 03:59.060
没什么好说的

03:59.060 --> 04:01.060
一会我们肯定要测试

04:01.060 --> 04:02.060
肯定要测试

04:02.060 --> 04:06.060
那么我们就直接在这里

04:06.060 --> 04:08.060
这个文件里面直接测试得了

04:08.060 --> 04:10.060
直接这个文件里面直接测试

04:10.060 --> 04:11.060
所以说index.js

04:11.060 --> 04:13.060
我们这里为了方便测试

04:13.060 --> 04:14.060
为了方便测试

04:14.060 --> 04:16.060
所以说我们这里直接导入

04:16.060 --> 04:17.060
这个文件就完事了

04:17.060 --> 04:20.060
导入这个react to rotor history

04:20.060 --> 04:23.060
然后写缸create browser history

04:23.060 --> 04:25.060
或者是导入history就完事了

04:25.060 --> 04:27.060
因为这个index.js里面导入了这个

04:27.060 --> 04:28.060
又导出了这个

04:28.060 --> 04:29.060
导出这个的时候

04:29.060 --> 04:30.060
这个玩意儿是不是

04:30.060 --> 04:32.060
它会运行这里的代码

04:32.060 --> 04:33.060
对吧

04:33.060 --> 04:35.060
比方说我们这里写个测试

04:35.060 --> 04:36.060
测试

04:36.060 --> 04:37.060
好

04:37.060 --> 04:38.060
那么这里呢

04:40.060 --> 04:41.060
运行

04:42.060 --> 04:46.850
有点检查

04:47.850 --> 04:48.850
你看测试两个字就出来了

04:48.850 --> 04:50.850
一会我们就在这里

04:50.850 --> 04:53.850
这个create browser history里面进行测试

04:53.850 --> 04:54.850
好

04:54.850 --> 04:56.850
我们把这个结构写出来之后

04:56.850 --> 04:59.850
咱们来挨在来的分析一下

04:59.850 --> 05:01.850
首先我们最终肯定是要返回一个对象

05:01.850 --> 05:03.850
这个毫无疑问

05:03.850 --> 05:05.850
这个函数最终是要返回一个对象

05:05.850 --> 05:10.850
返回history对象

05:10.850 --> 05:14.850
这个history对象里面有很多很多的东西

05:14.850 --> 05:17.850
那么其中一些东西呢

05:17.850 --> 05:19.850
我们要挨在来做

05:19.850 --> 05:20.850
比方说第一个东西

05:20.850 --> 05:21.850
我们手下想到的

05:21.850 --> 05:22.850
因为history呢

05:22.850 --> 05:23.850
它是一个地址站

05:23.850 --> 05:24.850
对吧

05:24.850 --> 05:25.850
它是个地址站

05:25.850 --> 05:26.850
我们之前分析过

05:26.850 --> 05:28.850
地址里面每一个是不是一个location对象

05:28.850 --> 05:29.850
对吧

05:29.850 --> 05:30.850
是个location对象

05:30.850 --> 05:32.850
怎么来处理

05:32.850 --> 05:33.850
我们手下想到这个

05:33.850 --> 05:35.850
location对象怎么来处理

05:35.850 --> 05:38.850
这里面就有两种处理方式

05:38.850 --> 05:39.850
我要来画一个图

05:39.850 --> 05:40.850
我要来画一个图

05:40.850 --> 05:42.850
这里面有两种处理方式

05:42.850 --> 05:44.850
对于history对象

05:44.850 --> 05:46.850
对于location对象

05:46.850 --> 05:48.850
有两种处理方式

05:48.850 --> 05:50.850
第一种处理方式就是

05:50.850 --> 05:54.850
我用一个数组把它装起来

05:54.850 --> 05:56.850
我用一个数组把它装起来

05:56.850 --> 05:58.850
就在这

05:59.850 --> 06:01.850
一个数组

06:01.850 --> 06:02.850
OK

06:02.850 --> 06:04.850
这里一个数组

06:04.850 --> 06:05.850
就像这个东西一个站一样

06:05.850 --> 06:06.850
对吧

06:06.850 --> 06:07.850
一个数组把它装起来

06:07.850 --> 06:08.850
这是一种方案

06:08.850 --> 06:10.850
那么这种方案呢

06:10.850 --> 06:11.850
当然

06:11.850 --> 06:12.850
如果用这种方案的话

06:12.850 --> 06:13.850
写起来呢

06:13.850 --> 06:15.850
就会稍微简单一些

06:15.850 --> 06:16.850
意思稍微简单一些

06:16.850 --> 06:17.850
不过呢

06:17.850 --> 06:19.850
但是有一个麻烦的地方

06:19.850 --> 06:20.850
就在于

06:20.850 --> 06:22.850
你必须要去维护这个数组

06:22.850 --> 06:23.850
保证这个数组呢

06:23.850 --> 06:25.850
因为我们这里写的是什么

06:25.850 --> 06:27.850
history API对吧

06:27.850 --> 06:28.850
就是history API

06:28.850 --> 06:30.850
你就必须要保证这个数组

06:30.850 --> 06:32.850
跟浏览器里面的那个

06:32.850 --> 06:34.850
window.history对象

06:34.850 --> 06:35.850
对应对吧

06:35.850 --> 06:37.850
这个history多少

06:37.850 --> 06:38.850
那么这个数组里面

06:38.850 --> 06:39.850
就有多少

06:39.850 --> 06:41.850
要进行维护统一

06:41.850 --> 06:43.850
统一的数据要进行对应

06:43.850 --> 06:45.850
那么这样指引你来了

06:45.850 --> 06:46.850
维护的工作

06:46.850 --> 06:47.850
虽然创建数组

06:47.850 --> 06:48.850
控制数组很简单

06:48.850 --> 06:50.850
但是维护的工作

06:50.850 --> 06:52.850
就比较麻烦了

06:52.850 --> 06:53.850
这是第一种方案

06:53.850 --> 06:54.850
第一种方案我们想一想

06:54.850 --> 06:56.850
好像不是很好

06:56.850 --> 06:57.850
我自己去创建一个数组

06:57.850 --> 06:58.850
来创

06:58.850 --> 06:59.850
我们自己创建了的

06:59.850 --> 07:00.850
noke型对象

07:00.850 --> 07:01.850
就这里边

07:01.850 --> 07:02.850
每一个是个noke型对象

07:02.850 --> 07:03.850
当然我们之前

07:03.850 --> 07:04.850
没有讲原码的时候

07:04.850 --> 07:05.850
就没有自己手动实现的时候

07:05.850 --> 07:07.850
我们可以这么去理解

07:07.850 --> 07:10.850
这里每一个是一个noke型对象

07:10.850 --> 07:12.850
但这种做法是没有问题的

07:12.850 --> 07:13.850
虽然说是没有问题的

07:13.850 --> 07:15.850
只是说这种做法

07:15.850 --> 07:17.850
比较麻烦

07:17.850 --> 07:19.850
因为这种做法

07:19.850 --> 07:20.850
会导致一个结果就是

07:20.850 --> 07:22.850
它有可能这个数组

07:22.850 --> 07:23.850
会导致可能跟

07:23.850 --> 07:24.850
某些操作之后

07:24.850 --> 07:25.850
可能跟浏览器里边的

07:25.850 --> 07:26.850
History就一样

07:26.850 --> 07:28.850
它就不统一了

07:28.850 --> 07:30.850
会导致这样的麻烦

07:30.850 --> 07:31.850
你自由去维护一个指针

07:31.850 --> 07:33.850
对吧 指向某一个指

07:33.850 --> 07:34.850
那就会导致可能

07:34.850 --> 07:36.850
跟浏览器那边不太统一

07:36.850 --> 07:38.850
维护统一这个很麻烦

07:38.850 --> 07:39.850
倒不是说浪费了内存空间

07:39.850 --> 07:41.850
那个是小事

07:41.850 --> 07:43.850
因为也不可能有

07:43.850 --> 07:45.850
几千几万个页面在这里边

07:45.850 --> 07:46.850
那是第一种方案

07:46.850 --> 07:47.850
第一种方案

07:47.850 --> 07:48.850
我们暂时先pass掉

07:48.850 --> 07:49.850
第二种方案

07:49.850 --> 07:51.850
是浏览器的History里边

07:51.850 --> 07:54.850
就是浏览器它本身有一个

07:54.850 --> 07:57.850
浏览器本身自带

07:57.850 --> 07:58.850
自带什么

07:58.850 --> 08:01.850
就是地址站

08:01.850 --> 08:03.850
自带就自带了一个地址站

08:03.850 --> 08:05.850
我们只需要利用浏览器

08:05.850 --> 08:07.850
自带的地址站

08:07.850 --> 08:08.850
然后利用它的地址站

08:08.850 --> 08:10.850
来创建的OK型就行了

08:10.850 --> 08:12.850
浏览器不是有地址站吗

08:12.850 --> 08:13.850
每个地址站里边

08:13.850 --> 08:15.850
它不是有一个地址吗

08:15.850 --> 08:16.850
而且它有一个

08:16.850 --> 08:17.850
指针指向某个东西

08:17.850 --> 08:20.850
我们通过指针指向的东西

08:20.850 --> 08:21.850
也就是说

08:21.850 --> 08:22.850
说白了

08:22.850 --> 08:24.850
通过温豆点History对象

08:24.850 --> 08:26.850
以及什么呢

08:26.850 --> 08:29.850
温豆点

08:29.850 --> 08:31.850
通过这些信息

08:31.850 --> 08:33.850
我们通过这些信息

08:33.850 --> 08:35.850
直接创建

08:35.850 --> 08:36.850
直接创建咱们的

08:36.850 --> 08:38.850
Lokaitin对象

08:38.850 --> 08:43.060
直接创建Lokaitin对象

08:43.060 --> 08:45.060
Lokaitin对象

08:45.060 --> 08:47.060
那么左边的Lokaitin

08:47.060 --> 08:49.060
是浏览器的Lokaitin对象

08:49.060 --> 08:50.060
是浏览器的Lokaitin对象

08:50.060 --> 08:52.060
它有一个自带的地址站

08:52.060 --> 08:53.060
尽管这个地址站

08:53.060 --> 08:55.060
能够操作东西不多

08:55.060 --> 08:57.060
但是我们只需要得到

08:57.060 --> 08:59.060
当前的Lokaitin就行了

08:59.060 --> 09:01.060
我们可以根据当前的

09:01.060 --> 09:02.060
温豆点Lokaitin

09:02.060 --> 09:03.060
得到一些Lokaitin的

09:03.060 --> 09:05.060
就是一些信息对吧

09:05.060 --> 09:06.060
得到一些信息

09:06.060 --> 09:08.060
根据温豆点History

09:08.060 --> 09:09.060
得到什么长度

09:09.060 --> 09:11.060
那些什么的信息对不对

09:11.060 --> 09:13.060
包括什么Stats这些信息

09:13.060 --> 09:15.060
我们可以利用这一点

09:15.060 --> 09:17.060
来得到History对象

09:17.060 --> 09:19.060
当然也包括Lokaitin对象

09:19.060 --> 09:20.060
没问题吧

09:20.060 --> 09:22.060
咱们能用这种方式来做

09:22.060 --> 09:23.060
我们就不用去

09:23.060 --> 09:25.060
自己去维护一个地址站了

09:25.060 --> 09:26.060
直接根据浏览器

09:26.060 --> 09:27.060
因为我们本身就是

09:27.060 --> 09:28.060
create browser history

09:28.060 --> 09:29.060
本身就利用的是

09:29.060 --> 09:31.060
跟浏览器是密切相关的

09:31.060 --> 09:32.060
你就不要考虑什么

09:32.060 --> 09:34.060
不在浏览器环境里面怎么办

09:34.060 --> 09:35.060
不在浏览器环境里面

09:35.060 --> 09:36.060
就没有这个东西

09:36.060 --> 09:37.060
就不能用这个东西

09:37.060 --> 09:38.060
这个东西本来就是

09:38.060 --> 09:39.060
跟浏览器密切相关的

09:39.060 --> 09:40.060
而浏览器本身就

09:40.060 --> 09:41.060
就有地址对象

09:41.060 --> 09:43.060
本身就有History对象

09:43.060 --> 09:44.060
那么我们没有必要

09:44.060 --> 09:46.060
再去维护一个站了

09:46.060 --> 09:47.060
维护一个站

09:47.060 --> 09:48.060
这样子呢

09:48.060 --> 09:49.060
到时候要

09:49.060 --> 09:50.060
跟浏览器之间统一

09:50.060 --> 09:51.060
就变得很麻烦

09:52.060 --> 09:54.060
因此为了实现这一点

09:54.060 --> 09:56.060
我在这里写这么一个函数

09:56.060 --> 09:57.060
写这么一个函数

09:57.060 --> 09:58.060
方可行

10:00.060 --> 10:01.060
这个函数

10:01.060 --> 10:02.060
我们给它取个名字叫做

10:02.060 --> 10:04.060
create location

10:05.060 --> 10:06.060
create location

10:06.060 --> 10:10.060
创建一个location对象

10:10.060 --> 10:12.060
我们创建一个location对象

10:13.060 --> 10:14.060
大家注意

10:15.060 --> 10:17.060
创建一个location对象

10:17.060 --> 10:19.060
我们先把这个函数写好

10:19.060 --> 10:21.060
怎么来得到一个location对象

10:21.060 --> 10:23.060
那根据我们之前的观察

10:23.060 --> 10:24.060
location里面有哪些数据呢

10:24.060 --> 10:25.060
来吧

10:25.060 --> 10:26.060
我们来写一下吧

10:26.060 --> 10:27.060
location里面的数据

10:27.060 --> 10:28.060
location

10:28.060 --> 10:30.060
终的属性有哪些呢

10:30.060 --> 10:32.060
有一个哈希对吧

10:32.060 --> 10:33.060
哈希的字

10:33.060 --> 10:34.060
什么sarchy

10:34.060 --> 10:35.060
对不对

10:35.060 --> 10:36.060
就是问号后边的参数字

10:36.060 --> 10:38.060
还有什么passname

10:38.060 --> 10:39.060
passname

10:39.060 --> 10:40.060
还有什么呢

10:40.060 --> 10:42.060
还有一个state

10:42.060 --> 10:44.060
就这么一些

10:44.060 --> 10:45.060
对不对

10:45.060 --> 10:46.060
就这么一些属性

10:46.060 --> 10:47.060
那来吧

10:47.060 --> 10:48.060
那这些属性

10:48.060 --> 10:50.060
实际上是都能取到的

10:51.060 --> 10:52.060
来吧

10:53.060 --> 10:54.060
这里呢

10:55.060 --> 10:56.060
create location这里

10:56.060 --> 10:57.060
我们

10:57.060 --> 10:58.060
一个来

10:58.060 --> 11:00.060
首先是哈希sarchy

11:00.060 --> 11:01.060
passname

11:01.060 --> 11:02.060
这个数据从哪里来了

11:02.060 --> 11:03.060
从哪里来了

11:03.060 --> 11:05.060
这个数据从哪里来了

11:05.060 --> 11:06.060
是不是直接可以通过

11:06.060 --> 11:08.060
这个window.location对象

11:08.060 --> 11:10.060
就可以直接达到了

11:10.060 --> 11:11.060
window.location对象里面

11:11.060 --> 11:12.060
是不是就有这些东西

11:12.060 --> 11:13.060
你看一下吧

11:13.060 --> 11:14.060
这个window

11:14.060 --> 11:16.060
我们这里换个页面吧

11:16.060 --> 11:17.060
随便换一个页面

11:17.060 --> 11:18.060
比方说

11:18.060 --> 11:20.060
我们这里换一个

11:20.060 --> 11:21.060
嗯

11:21.060 --> 11:23.060
60a

11:23.060 --> 11:25.060
然后问号a等于1

11:25.060 --> 11:27.060
b等于2

11:27.060 --> 11:28.060
然后还有什么

11:28.060 --> 11:30.060
一个哈希

11:30.060 --> 11:32.060
你看一下啊

11:32.060 --> 11:34.060
咱们来window.location

11:34.060 --> 11:36.060
location

11:36.060 --> 11:37.060
好

11:37.060 --> 11:38.060
咱们来看一下

11:38.060 --> 11:39.060
这样子这里边看

11:39.060 --> 11:41.060
你看是不是有哈希

11:41.060 --> 11:42.060
对不对

11:42.060 --> 11:43.060
是不是有哈希

11:43.060 --> 11:44.060
还有什么呢

11:44.060 --> 11:46.060
是不是有那个passname

11:46.060 --> 11:47.060
对不对

11:47.060 --> 11:48.060
passname

11:48.060 --> 11:49.060
还有啥呢

11:49.060 --> 11:50.060
还是不是那个

11:50.060 --> 11:51.060
sarchy

11:51.060 --> 11:52.060
sarchy在这

11:52.060 --> 11:53.060
对吧

11:53.060 --> 11:54.060
是不是有sarchy

11:54.060 --> 11:55.060
对不对

11:55.060 --> 11:56.060
是不是全部拿到了

11:56.060 --> 11:58.060
直接通过window.location

11:58.060 --> 12:00.060
就可以直接拿到这些信息了

12:00.060 --> 12:02.060
就可以直接拿到了

12:02.060 --> 12:03.060
好

12:03.060 --> 12:04.060
所以说呢

12:04.060 --> 12:05.060
这里呢

12:05.060 --> 12:06.060
创建这些数据呢

12:06.060 --> 12:07.060
好像变得

12:07.060 --> 12:08.060
好像就非常非常简单

12:08.060 --> 12:10.060
从那颗心里面去直接取

12:10.060 --> 12:11.060
直接取

12:11.060 --> 12:12.060
比方说我们先

12:12.060 --> 12:13.060
就先看这三个数据

12:13.060 --> 12:15.060
可以从那颗心里面直接取

12:15.060 --> 12:16.060
但是呢

12:16.060 --> 12:18.060
你不要忽略到一件事

12:18.060 --> 12:20.060
咱们上节课是演示过的

12:20.060 --> 12:22.060
它有这么一个东西

12:22.060 --> 12:24.060
叫做bassname

12:25.060 --> 12:27.060
它有这么一个东西叫做bassname

12:27.060 --> 12:28.060
bassname

12:28.060 --> 12:29.060
如果说

12:29.060 --> 12:30.060
我给它设置的

12:30.060 --> 12:31.060
比方说我调用这个函数啊

12:31.060 --> 12:33.060
我给它设置一个

12:33.060 --> 12:34.060
bassname

12:34.060 --> 12:36.060
bassname就是鞋杠60

12:36.060 --> 12:37.060
比方说咱们这样子

12:37.060 --> 12:40.060
create browser history

12:40.060 --> 12:42.060
不是有配置吗

12:42.060 --> 12:43.060
对吧

12:43.060 --> 12:44.060
不是有配置吗

12:44.060 --> 12:45.060
ok

12:45.060 --> 12:46.060
那么这个配置里面呢

12:46.060 --> 12:48.060
我们就直接给它写上

12:48.060 --> 12:50.060
写上这个bassname

12:50.060 --> 12:51.060
为

12:51.060 --> 12:52.060
鞋杠60

12:52.060 --> 12:54.060
那么这样子一来

12:54.060 --> 12:56.060
它的创建的location里面

12:56.060 --> 12:57.060
是不是要把bassname糊叠掉

12:57.060 --> 12:58.060
对吧

12:58.060 --> 13:00.060
是不是要把bassname糊叠掉

13:00.060 --> 13:01.060
没问题吧

13:01.060 --> 13:02.060
那这样子呢

13:02.060 --> 13:03.060
我们

13:03.060 --> 13:05.060
这个location里面

13:05.060 --> 13:06.060
window

13:06.060 --> 13:08.060
如果你直接用window.location里面

13:08.060 --> 13:10.060
它是不知道什么bassname的

13:10.060 --> 13:11.060
它是直接给你带上的

13:11.060 --> 13:13.060
那你是不是把这个去掉

13:13.060 --> 13:14.060
去吧

13:14.060 --> 13:15.060
把这个去掉

13:15.060 --> 13:16.060
对吧

13:16.060 --> 13:17.060
没问题吧

13:17.060 --> 13:18.060
所以说呢

13:18.060 --> 13:19.060
所以说呢

13:19.060 --> 13:20.060
我们这里呢

13:20.060 --> 13:21.060
还是要得处理一下

13:21.060 --> 13:22.060
得处理一下

13:22.060 --> 13:23.060
要根据什么呢

13:23.060 --> 13:25.060
要根据它有没有bassname来处理

13:25.060 --> 13:26.060
对吧

13:26.060 --> 13:28.060
要根据它有没有bassname来处理

13:28.060 --> 13:29.060
好

13:29.060 --> 13:30.060
那么这个bassname呢

13:30.060 --> 13:31.060
它是在这个配置里边

13:31.060 --> 13:33.060
那我这里肯定没有这个配置

13:33.060 --> 13:34.060
对吧

13:34.060 --> 13:35.060
没有这个配置

13:35.060 --> 13:36.060
没有这个配置的话

13:36.060 --> 13:37.060
你把呢

13:37.060 --> 13:38.060
你把那个bassname呢

13:38.060 --> 13:39.060
传给我

13:40.060 --> 13:41.060
bassname传给我

13:41.060 --> 13:42.060
就是跟路径

13:42.060 --> 13:44.060
跟路径是啥传给我

13:44.060 --> 13:45.060
传给我过后呢

13:45.060 --> 13:47.060
我来帮你进行分析

13:47.060 --> 13:48.060
来帮你进行分析

13:48.060 --> 13:50.060
得到一个location对象

13:50.060 --> 13:51.060
好

13:51.060 --> 13:53.060
那么这里边怎么来进行分析呢

13:53.060 --> 13:55.060
怎么来进行分析呢

13:55.060 --> 13:56.060
好

13:56.060 --> 13:57.060
这个bassname呢

13:57.060 --> 13:58.060
我给它一个默认值吧

13:58.060 --> 13:59.060
如果说你不传的话

13:59.060 --> 14:00.060
我就给你一个空置补串

14:00.060 --> 14:02.060
我就给你一个空置补串

14:02.060 --> 14:05.060
其实我要做的事情很简单

14:05.060 --> 14:07.060
你像这个什么哈嘻这里

14:07.060 --> 14:08.060
你管它有没有bassname

14:08.060 --> 14:10.060
是不是都一样的

14:10.060 --> 14:11.060
这个没问题吧

14:11.060 --> 14:13.060
哈嘻这里管它有没有bassname

14:13.060 --> 14:14.060
都一样的

14:14.060 --> 14:15.060
所以说这里呢

14:15.060 --> 14:16.060
如果说返回一个location对象

14:16.060 --> 14:17.060
哈嘻这一块

14:17.060 --> 14:18.060
所以管它有没有bassname

14:18.060 --> 14:19.060
都一样的

14:19.060 --> 14:20.060
对吧

14:20.060 --> 14:22.060
就是window.location

14:22.060 --> 14:23.060
第二什么

14:23.060 --> 14:24.060
哈嘻

14:24.060 --> 14:25.060
对了

14:25.060 --> 14:26.060
哈嘻

14:26.060 --> 14:27.060
哈嘻是一样的

14:27.060 --> 14:28.060
这个毫无疑问

14:28.060 --> 14:29.060
那么这个search

14:29.060 --> 14:30.060
是不是一样的

14:30.060 --> 14:31.060
对吧

14:31.060 --> 14:32.060
search也是一样的

14:33.060 --> 14:35.060
那么直接写window.location

14:35.060 --> 14:36.060
search

14:36.060 --> 14:37.060
一样的

14:37.060 --> 14:39.060
那就是这个bassname不一样

14:39.060 --> 14:40.060
因为bassname

14:40.060 --> 14:41.060
它要考虑到什么

14:41.060 --> 14:42.060
bassname

14:42.060 --> 14:43.060
bassname

14:43.060 --> 14:44.060
它要考虑到这个

14:44.060 --> 14:46.060
那么我们这里就定一个变量

14:46.060 --> 14:47.060
定一个变量

14:48.060 --> 14:49.060
bassname

14:49.060 --> 14:51.060
来自于bassname

14:51.060 --> 14:54.060
来自于window.location

14:54.060 --> 14:55.060
第二什么

14:55.060 --> 14:56.060
bassname

14:59.060 --> 15:00.060
看一下吧

15:00.060 --> 15:02.060
来自于window.location的bassname

15:02.060 --> 15:03.060
来自于这一块

15:03.060 --> 15:04.060
但是呢我们要处理

15:04.060 --> 15:06.060
bassname的情况

15:06.060 --> 15:08.060
我们这里就写这么一个变量吧

15:08.060 --> 15:09.060
bassname

15:09.060 --> 15:10.060
好那么这里直接放过来就行了

15:10.060 --> 15:11.060
对吧

15:11.060 --> 15:13.060
好那么这里呢我们要处理

15:13.060 --> 15:14.060
处理

15:14.060 --> 15:16.060
就是bassname

15:16.060 --> 15:18.060
处理bassname的情况

15:18.060 --> 15:21.060
处理bassname怎么来处理呢

15:21.060 --> 15:23.060
实际上处理的方式很简单

15:23.060 --> 15:24.060
就是把这个

15:24.060 --> 15:25.060
从这个bassname里边

15:25.060 --> 15:28.060
把这个bassname移除掉就完事了

15:28.060 --> 15:29.060
对吧

15:29.060 --> 15:30.060
就把这个bassname

15:30.060 --> 15:33.060
就把这个bassname里边

15:33.060 --> 15:35.060
bassname给它移除掉

15:35.060 --> 15:37.060
把前面给它移除掉就完事了

15:37.060 --> 15:38.060
然后这里

15:38.060 --> 15:40.060
bassname是这个样子对吧

15:40.060 --> 15:41.060
bassname是这个样子

15:41.060 --> 15:43.060
再重新建一个吧

15:43.060 --> 15:45.060
这个bassname是这个样子

15:45.060 --> 15:47.060
而我们给它的bassname是这样子

15:47.060 --> 15:48.060
是这样子

15:48.060 --> 15:49.060
这样子一个bassname

15:49.060 --> 15:51.060
那么只需要从这个字母串里边

15:51.060 --> 15:53.060
把这个移除掉就完事了

15:53.060 --> 15:54.060
那怎么移除呢

15:54.060 --> 15:55.060
怎么移除呢

15:55.060 --> 15:57.060
我们直接用证则表达试吧

15:57.060 --> 15:58.060
找到这个字母串

15:58.060 --> 16:00.060
以这个玩意要开头的

16:00.060 --> 16:02.060
以这个玩意要开头的

16:02.060 --> 16:03.060
我们把它移除掉

16:03.060 --> 16:04.060
以这个玩意要开头的

16:04.060 --> 16:06.060
把它移除掉就完了

16:06.060 --> 16:07.060
好,来吧

16:07.060 --> 16:09.060
好,这里具体写法

16:09.060 --> 16:11.060
具体写法

16:11.060 --> 16:12.060
那就是

16:12.060 --> 16:14.060
那也不用那么麻烦了

16:14.060 --> 16:16.060
就直接passname

16:16.060 --> 16:18.060
就是replace

16:18.060 --> 16:20.060
replace

16:20.060 --> 16:21.060
替换什么呢

16:21.060 --> 16:22.060
这里是不是

16:22.060 --> 16:23.060
第一个是一个证则表达试

16:23.060 --> 16:25.060
就是以这个bassname开头的

16:25.060 --> 16:27.060
以bassname开头的

16:27.060 --> 16:28.060
把它移除掉

16:28.060 --> 16:30.060
那么这里的bassname开头的

16:30.060 --> 16:32.060
我们这里就这样子写吧

16:33.060 --> 16:35.060
建议个证则表达试

16:35.060 --> 16:36.060
建议个证则表达试

16:36.060 --> 16:38.060
rig

16:38.060 --> 16:40.060
等于new一个rig

16:40.060 --> 16:41.060
expression

16:41.060 --> 16:42.060
这个表达试怎么写呢

16:42.060 --> 16:44.060
这里就是

16:46.060 --> 16:47.060
以这个

16:47.060 --> 16:49.060
模板字母串吧

16:49.060 --> 16:51.060
开头,字母串开头

16:51.060 --> 16:54.060
开头后面是不是要拼接一个bassname

16:54.060 --> 16:55.060
对吧

16:55.060 --> 16:57.060
拼接一个bassname

16:57.060 --> 17:00.060
是不是要开头拼接一个bassname

17:00.060 --> 17:01.060
好,那么把它移除掉

17:01.060 --> 17:03.060
那么咱们来看一下

17:03.060 --> 17:04.060
这个证则表达试能不能移除

17:04.060 --> 17:06.060
把这个证则表达试传进去

17:06.060 --> 17:08.060
然后把它替换成空置母串

17:08.060 --> 17:10.060
然后重新给这个bassname复制

17:10.060 --> 17:12.060
看一下能不能移除吧

17:12.060 --> 17:14.060
这里我们测试一下

17:14.060 --> 17:16.060
create location

17:16.060 --> 17:18.060
这里的bassname

17:18.060 --> 17:20.060
我们先不传辑吧

17:20.060 --> 17:21.060
先不传辑

17:21.060 --> 17:22.060
保存

17:22.060 --> 17:23.060
你看一下

17:23.060 --> 17:25.060
没打印出来对吧

17:25.060 --> 17:28.060
这个结果得到一个location

17:28.060 --> 17:31.940
location对象

17:31.940 --> 17:32.940
好

17:32.940 --> 17:33.940
哈希

17:33.940 --> 17:34.940
passname

17:34.940 --> 17:35.940
设计都拿到了

17:35.940 --> 17:36.940
那么

17:36.940 --> 17:37.940
这个没问题对吧

17:37.940 --> 17:38.940
一开始没问题

17:38.940 --> 17:40.940
好,那么现在我给它传一个

17:40.940 --> 17:42.940
news

17:42.940 --> 17:44.940
好,你看一下

17:44.940 --> 17:45.940
passname是不是把news去掉了

17:45.940 --> 17:46.940
你看一下

17:46.940 --> 17:47.940
这里地址是不是news

17:47.940 --> 17:48.940
对吧

17:48.940 --> 17:49.940
它是不是把news去掉了

17:49.940 --> 17:50.940
非常非常简的

17:50.940 --> 17:51.940
就这么简的

17:51.940 --> 17:52.940
没了

17:52.940 --> 17:53.940
没了

17:53.940 --> 17:54.940
这就是

17:54.940 --> 17:56.940
去掉bassname

17:56.940 --> 17:57.940
去掉bassname

17:57.940 --> 17:59.940
好,这是这一块

18:00.940 --> 18:03.940
好,有了这一块的就是

18:03.940 --> 18:05.940
create location之后

18:05.940 --> 18:07.940
我们就得到了这么三个属性了

18:07.940 --> 18:09.940
而且根据bassname的情况来去掉了

18:09.940 --> 18:11.940
当然这里边还有很多细节

18:11.940 --> 18:12.940
细节我就

18:12.940 --> 18:14.940
总之我们写这个圆码了

18:14.940 --> 18:16.940
不会太过于去追究那个细节

18:16.940 --> 18:18.940
因为我只是通过这个圆码

18:18.940 --> 18:19.940
给大家提供一种

18:19.940 --> 18:21.940
书写一个公共模块

18:21.940 --> 18:22.940
或者是书写一个底层模块的

18:22.940 --> 18:23.940
这么一种思路

18:23.940 --> 18:25.940
这才是学圆码的重要目的

18:25.940 --> 18:27.940
这些细节细致谋解的东西

18:27.940 --> 18:29.940
大家自行去研究

18:29.940 --> 18:31.940
有兴趣的自行去研究

18:31.940 --> 18:33.940
比方说bassname

18:33.940 --> 18:35.940
其实我还没有考虑到很多地方

18:35.940 --> 18:36.940
比方说这里

18:36.940 --> 18:37.940
如果多了一个鞋杠

18:37.940 --> 18:38.940
它会多去掉一个鞋杠

18:38.940 --> 18:39.940
看到没

18:39.940 --> 18:41.940
它设计这里会多去掉

18:41.940 --> 18:43.940
bassname这里会多去掉一个鞋杠

18:43.940 --> 18:44.940
这是不行的

18:44.940 --> 18:46.940
这些细节也可以自行搞定

18:46.940 --> 18:47.940
我就不管了

18:47.940 --> 18:49.940
把大体识录说出来就行了

18:50.940 --> 18:52.940
好,下一个属性

18:52.940 --> 18:55.940
下一个属性是set

18:55.940 --> 18:57.940
这个表示状态

18:57.940 --> 18:58.940
这个没什么好说的

18:58.940 --> 18:59.940
那么这个东西

18:59.940 --> 19:01.940
它是不是来自于window.location

19:01.940 --> 19:02.940
来看一下

19:02.940 --> 19:04.940
window.location里边

19:04.940 --> 19:06.940
它是没有这个数据的

19:06.940 --> 19:07.940
是没有这个数据的

19:07.940 --> 19:08.940
state数据没有

19:08.940 --> 19:10.940
那么这个数据在哪呢

19:10.940 --> 19:13.940
它在window.history里边

19:13.940 --> 19:15.940
它在这里边

19:15.940 --> 19:16.940
history里边

19:16.940 --> 19:17.940
它有一个state

19:17.940 --> 19:19.940
是不是从这里边取了

19:19.940 --> 19:21.940
那它是不是直接取的呢

19:21.940 --> 19:23.940
它是不是直接把这个state

19:23.940 --> 19:24.940
放到这

19:24.940 --> 19:27.940
我们来自于window.history里边的state

19:27.940 --> 19:29.940
是不是这样子直接取的呢

19:29.940 --> 19:30.940
它不是这样子直接取的

19:30.940 --> 19:31.940
不是的

19:31.940 --> 19:32.940
那它是怎么取的呢

19:32.940 --> 19:33.940
它是有一套逻辑

19:33.940 --> 19:35.940
我们先来说一下它的逻辑是啥

19:35.940 --> 19:36.940
然后我们再解释它

19:36.940 --> 19:38.940
为什么要用这种逻辑来取

19:38.940 --> 19:40.940
我这里寄个笔记

19:40.940 --> 19:42.940
这里逻辑稍微多一点

19:43.940 --> 19:45.940
这是手写

19:45.940 --> 19:46.940
手写

19:46.940 --> 19:49.940
create browser

19:49.940 --> 19:51.940
history

19:51.940 --> 19:53.940
那么这里就是

19:53.940 --> 19:55.940
创建location是

19:55.940 --> 19:57.940
这个state的处理

19:57.940 --> 19:58.940
state的处理

19:58.940 --> 20:00.940
它是这么一个逻辑

20:00.940 --> 20:02.940
如果history

20:02.940 --> 20:03.940
第二

20:03.940 --> 20:05.940
如果window

20:05.940 --> 20:07.940
第二history

20:09.940 --> 20:10.940
或者说我们把

20:10.940 --> 20:12.940
那个window.history

20:12.940 --> 20:14.940
拿着去敲一个带

20:14.940 --> 20:16.940
我们直接用那个

20:16.940 --> 20:17.940
直接用那个

20:17.940 --> 20:19.940
一个辨量来表示

20:19.940 --> 20:20.940
比方说

20:20.940 --> 20:22.940
global history

20:22.940 --> 20:24.940
等于window.history

20:24.940 --> 20:26.940
拿着去敲一个带

20:26.940 --> 20:29.940
如果说global.history里面的state

20:29.940 --> 20:31.940
没有值

20:31.940 --> 20:32.940
如果它没有值

20:32.940 --> 20:33.940
折

20:33.940 --> 20:34.940
state

20:34.940 --> 20:35.940
为

20:35.940 --> 20:36.940
undefend

20:36.940 --> 20:37.940
它是

20:37.940 --> 20:38.940
第一个逻辑是这样子的

20:38.940 --> 20:39.940
如果说它没有值

20:39.940 --> 20:41.940
那肯定是我这个肯定也没有值

20:41.940 --> 20:42.940
你这种

20:42.940 --> 20:44.940
我们的浏览器的历史记录里边

20:44.940 --> 20:45.940
都没有这个状态值

20:45.940 --> 20:47.940
那我这里肯定也没有状态值

20:47.940 --> 20:48.940
所以说

20:48.940 --> 20:49.940
我们这里

20:49.940 --> 20:51.940
它是要经过一段处理

20:51.940 --> 20:52.940
就是处理

20:54.940 --> 20:55.940
处理state

20:55.940 --> 20:56.940
好

20:56.940 --> 20:57.940
怎么处理呢

20:57.940 --> 20:58.940
我们这里写个辨量

20:58.940 --> 20:59.940
写个辨量

20:59.940 --> 21:00.940
let state

21:00.940 --> 21:01.940
好

21:01.940 --> 21:02.940
这里肯定要把这个辨量放这

21:02.940 --> 21:03.940
state

21:05.940 --> 21:06.940
state 放这

21:06.940 --> 21:07.940
好

21:07.940 --> 21:08.940
第一个逻辑

21:08.940 --> 21:09.940
如果说

21:09.940 --> 21:10.940
window

21:10.940 --> 21:12.940
我们直接把它保存起来

21:13.940 --> 21:15.940
global history

21:15.940 --> 21:16.940
等于什么

21:16.940 --> 21:17.940
window.history

21:18.940 --> 21:19.940
是一点

21:19.940 --> 21:21.940
如果说global history

21:21.940 --> 21:22.940
第二

21:22.940 --> 21:23.940
history

21:23.940 --> 21:25.940
第二那个state

21:26.940 --> 21:28.940
如果它没有值

21:28.940 --> 21:29.940
如果它没有值

21:29.940 --> 21:30.940
等于什么呢

21:30.940 --> 21:31.940
等于now

21:31.940 --> 21:33.940
因为window.history里边

21:33.940 --> 21:34.940
它这个state

21:34.940 --> 21:35.940
就等于now的

21:35.940 --> 21:36.940
表示没有值

21:36.940 --> 21:37.940
你看它是等于now

21:37.940 --> 21:38.940
对吧

21:38.940 --> 21:39.940
表示没有值

21:39.940 --> 21:41.940
如果说它没有值的情况下

21:41.940 --> 21:42.940
第一个逻辑

21:42.940 --> 21:43.940
就是

21:43.940 --> 21:44.940
我们这个state

21:44.940 --> 21:45.940
我们的state

21:45.940 --> 21:46.940
undefend

21:47.940 --> 21:48.940
undefend

21:48.940 --> 21:49.940
当然你可以

21:49.940 --> 21:50.940
不写这个代码

21:50.940 --> 21:51.940
我写这个代码

21:51.940 --> 21:52.940
只是给它展示一个逻辑

21:52.940 --> 21:53.940
好

21:53.940 --> 21:54.940
这种情况

21:54.940 --> 21:56.940
第二种情况是有值

21:56.940 --> 21:57.940
如果

21:58.940 --> 21:59.940
global state

21:59.940 --> 22:00.940
有值

22:01.940 --> 22:02.940
有值

22:02.940 --> 22:03.940
那么有值的情况

22:03.940 --> 22:05.940
它又分为其中

22:05.940 --> 22:06.940
第一个

22:06.940 --> 22:08.940
如果值的内形

22:08.940 --> 22:10.940
不是对象

22:11.940 --> 22:13.940
值的内形不是对象

22:13.940 --> 22:14.940
它不是一个对象

22:14.940 --> 22:15.940
是一个数字

22:15.940 --> 22:16.940
是一个字无创

22:16.940 --> 22:17.940
是一个函数

22:17.940 --> 22:19.940
当然不太可能

22:19.940 --> 22:21.940
反正它都要考虑

22:21.940 --> 22:22.940
考虑进去

22:22.940 --> 22:24.940
如果说不是对象的话

22:24.940 --> 22:25.940
那么直接复制

22:26.940 --> 22:27.940
elseif

22:27.940 --> 22:29.940
那么就是type of

22:29.940 --> 22:31.940
global history

22:31.940 --> 22:33.940
我们或者是

22:34.940 --> 22:36.940
history state

22:36.940 --> 22:37.940
history state

22:37.940 --> 22:39.940
第二state

22:39.940 --> 22:41.940
我们这样的判断吧

22:42.940 --> 22:43.940
如果说

22:43.940 --> 22:44.940
history state

22:44.940 --> 22:46.940
我们这里同样的写一下

22:46.940 --> 22:47.940
history state

22:47.940 --> 22:48.940
第二state

22:49.940 --> 22:51.940
如果说history没有值

22:51.940 --> 22:53.940
那么state will undefine

22:53.940 --> 22:55.940
如果说它有值

22:55.940 --> 22:56.940
那么有值的话

22:56.940 --> 22:57.940
要看情况

22:57.940 --> 22:58.940
如果说值的内形

22:58.940 --> 22:59.940
不是对象

22:59.940 --> 23:00.940
不是对象

23:00.940 --> 23:01.940
type of

23:01.940 --> 23:02.940
它不等于

23:02.940 --> 23:03.940
什么

23:03.940 --> 23:04.940
objects

23:04.940 --> 23:06.940
它不是一个对象

23:06.940 --> 23:07.940
它如果说

23:07.940 --> 23:09.940
不是一个对象的话

23:09.940 --> 23:10.940
那么怎么办呢

23:10.940 --> 23:11.940
我们state

23:11.940 --> 23:12.940
直接给它复制

23:12.940 --> 23:13.940
直接给它复制

23:13.940 --> 23:15.940
是这么一种逻辑

23:15.940 --> 23:16.940
那么另一种情况

23:16.940 --> 23:17.940
是不是是对象

23:17.940 --> 23:18.940
对吧

23:18.940 --> 23:19.940
是对象

23:19.940 --> 23:20.940
如果说是对象的话

23:20.940 --> 23:22.940
它又是这么一种逻辑

23:22.940 --> 23:24.940
该对象中

23:24.940 --> 23:25.940
该对象中

23:25.940 --> 23:27.940
是否有key值

23:27.940 --> 23:29.940
有key属性

23:29.940 --> 23:31.940
是否有key这个属性

23:31.940 --> 23:33.940
我们先不管

23:33.940 --> 23:34.940
它为什么有这样的逻辑

23:34.940 --> 23:35.940
我们先看一下

23:35.940 --> 23:36.940
是不是这样子

23:36.940 --> 23:38.940
我们先把逻辑分析出来

23:38.940 --> 23:40.940
这个对象是否有key属性

23:40.940 --> 23:43.940
如果对象中有key属性

23:43.940 --> 23:44.940
有key属性

23:44.940 --> 23:46.940
那么怎么办呢

23:46.940 --> 23:48.940
将key属性

23:48.940 --> 23:50.940
将key属性

23:50.940 --> 23:52.940
作为location

23:52.940 --> 23:54.940
就是我们那个location对象的

23:54.940 --> 23:56.940
key属性值

23:56.940 --> 23:59.940
并且将

23:59.940 --> 24:01.940
history

24:01.940 --> 24:02.940
state

24:02.940 --> 24:05.940
对象中的state

24:05.940 --> 24:06.940
属性

24:06.940 --> 24:08.940
作为state属性值

24:08.940 --> 24:09.940
什么意思

24:09.940 --> 24:11.940
我刚写代码一下就看明白了

24:11.940 --> 24:12.940
就是

24:12.940 --> 24:14.940
else就是是对象的情况

24:14.940 --> 24:17.940
它有值并且是对象

24:17.940 --> 24:19.940
它不等于对象就是这种情况

24:19.940 --> 24:20.940
对不对

24:20.940 --> 24:21.940
不等于对象就是这种情况

24:21.940 --> 24:23.940
如果它是对象

24:23.940 --> 24:25.940
如果它是对象怎么办

24:25.940 --> 24:26.940
是对象的话

24:26.940 --> 24:27.940
我们又要判断

24:27.940 --> 24:29.940
如果说你这个history state

24:29.940 --> 24:31.940
里面有这个key属性

24:31.940 --> 24:33.940
是有这个key属性的

24:33.940 --> 24:35.940
我们可以用这种方式来判断

24:35.940 --> 24:40.260
key

24:40.260 --> 24:41.260
key

24:41.260 --> 24:42.260
in

24:42.260 --> 24:44.260
history state

24:44.260 --> 24:46.260
你有这个属性值

24:46.260 --> 24:47.260
你有这个属性

24:47.260 --> 24:49.260
那么有这个属性的话

24:49.260 --> 24:51.260
我就把我的那个

24:51.260 --> 24:53.260
我这里不是一个location对象吗

24:53.260 --> 24:54.260
对吧

24:54.260 --> 24:55.260
这个location对象

24:55.260 --> 24:57.260
我们可以一开始就创建出来

24:57.260 --> 24:59.260
一开始就要创建出来

25:01.260 --> 25:02.260
location对象

25:02.260 --> 25:04.260
是一个空对象

25:04.260 --> 25:05.260
那么

25:05.260 --> 25:07.260
空对象

25:07.260 --> 25:08.260
这样子吧

25:09.260 --> 25:11.260
处理state之前

25:11.260 --> 25:12.260
处理state之前

25:12.260 --> 25:14.260
我们先把这三个写出来

25:17.260 --> 25:18.260
location对象

25:18.260 --> 25:20.260
我们最终就返回这个location对象

25:21.260 --> 25:22.260
location对象

25:22.260 --> 25:24.260
最终就返回就完事了

25:24.260 --> 25:26.260
那如果说这个location对象里边

25:26.260 --> 25:28.260
就是如果说它还有key值

25:28.260 --> 25:30.260
那么我就往这个location对象里边

25:30.260 --> 25:32.260
加上一个key值

25:32.260 --> 25:33.260
就这么个意思

25:33.260 --> 25:34.260
加上一个key属性值

25:34.260 --> 25:35.260
等于什么呢

25:35.260 --> 25:37.260
等于history state的key属性

25:37.260 --> 25:39.260
如果有这个key值的话

25:39.260 --> 25:41.260
那么我们就加上一个key值

25:41.260 --> 25:43.260
如果说加上一个key值还不够

25:43.260 --> 25:45.260
还要做一件事情就是

25:45.260 --> 25:47.260
还要把这个state设置为什么呢

25:48.260 --> 25:50.260
设置为history state

25:51.260 --> 25:53.260
它就是这么一个逻辑

25:53.260 --> 25:54.260
你先别管

25:54.260 --> 25:55.260
它为什么有这么一个逻辑

25:55.260 --> 25:56.260
我们先把一个逻辑理出来

25:56.260 --> 25:57.260
我们再解释

25:57.260 --> 25:58.260
不然的话我先解释的话

25:58.260 --> 25:59.260
你们要云

25:59.260 --> 26:01.260
它就是这个逻辑

26:02.260 --> 26:03.260
然后呢

26:03.260 --> 26:05.260
如果说没有key值的话

26:07.260 --> 26:09.260
如果没有key值

26:09.260 --> 26:10.260
key属性

26:10.260 --> 26:12.260
则直接将

26:13.260 --> 26:15.260
history state

26:15.260 --> 26:17.260
复制给state

26:18.260 --> 26:20.260
如果说你没有key值

26:20.260 --> 26:21.260
else

26:21.260 --> 26:22.260
没有key值

26:22.260 --> 26:23.260
那我就直接

26:24.260 --> 26:25.260
把history state

26:25.260 --> 26:27.260
复制给你

26:27.260 --> 26:28.260
就像这样子

26:28.260 --> 26:29.260
你看看

26:29.260 --> 26:30.260
就跟这里的逻辑是不是一样的

26:30.260 --> 26:31.260
对吧

26:31.260 --> 26:32.260
逻辑是一样的

26:33.260 --> 26:34.260
好

26:34.260 --> 26:36.260
那么它就是整个逻辑是这样子

26:36.260 --> 26:38.260
最终把state变量复制过后

26:38.260 --> 26:39.260
我们把location

26:39.260 --> 26:40.260
夹到这个state里面

26:40.260 --> 26:42.260
夹到这个state里面

26:43.260 --> 26:44.260
等于state

26:44.260 --> 26:45.260
对吧

26:45.260 --> 26:46.260
夹到这里面

26:46.260 --> 26:47.260
这是它整套逻辑

26:48.260 --> 26:49.260
好

26:49.260 --> 26:50.260
咱们来看一下

26:50.260 --> 26:51.260
逻辑是怎么回事

26:51.260 --> 26:52.260
我们再演示一下是怎么回事

26:52.260 --> 26:55.260
比方说吧

26:55.260 --> 26:56.260
比方说

26:56.260 --> 26:58.260
我们目前得到的state

26:58.260 --> 26:59.260
不是undefined

26:59.260 --> 27:00.260
为什么是undefined

27:00.260 --> 27:02.260
因为我们目前的window

27:02.260 --> 27:03.260
history里面

27:03.260 --> 27:04.260
叫state

27:04.260 --> 27:05.260
它是now

27:05.260 --> 27:06.260
所以说这里的是undefined

27:06.260 --> 27:07.260
看没

27:07.260 --> 27:08.260
是undefined

27:08.260 --> 27:09.260
好

27:09.260 --> 27:10.260
那么现在咱们再试一下

27:10.260 --> 27:12.260
window.history

27:13.260 --> 27:14.260
push state

27:15.260 --> 27:16.260
随便给一个吧

27:16.260 --> 27:17.260
随便给一个

27:17.260 --> 27:18.260
比方说给一个45串

27:18.260 --> 27:19.260
123

27:19.260 --> 27:20.260
给它的state为123

27:20.260 --> 27:21.260
title

27:21.260 --> 27:22.260
title没用

27:22.260 --> 27:23.260
这是我们利用的是

27:23.260 --> 27:24.260
window.history API

27:24.260 --> 27:26.260
然后路径的话

27:26.260 --> 27:27.260
就abc

27:27.260 --> 27:28.260
随便写个路径

27:28.260 --> 27:30.260
你看跳到abc了

27:30.260 --> 27:32.260
那么现在的window.state里面

27:32.260 --> 27:34.260
它的指示不123

27:34.260 --> 27:35.260
咱们来看一下

27:35.260 --> 27:37.260
通过我们那个函数

27:37.260 --> 27:38.260
创建了location

27:38.260 --> 27:40.260
创建了location

27:40.260 --> 27:41.260
create

27:43.260 --> 27:45.260
这打不到了

27:45.260 --> 27:46.260
拿不到location

27:46.260 --> 27:47.260
locate那个函数了

27:47.260 --> 27:48.260
我们这样子吧

27:48.260 --> 27:50.260
把这个保存到window里面

27:50.260 --> 27:51.260
create location

27:51.260 --> 27:52.260
这个函数保存到window里面

27:52.260 --> 27:54.260
create location

27:54.260 --> 27:56.260
保存到window里面

27:56.260 --> 27:57.260
这样的方便测试

27:57.260 --> 27:58.260
那里看

27:58.260 --> 27:59.260
现在

27:59.260 --> 28:00.260
其实我自己刷新就

28:00.260 --> 28:01.260
不用保存了

28:01.260 --> 28:02.260
我自己刷新就行了

28:02.260 --> 28:04.260
因为由于现在的window

28:04.260 --> 28:05.260
create state里面

28:05.260 --> 28:06.260
它的指示一个字母串

28:06.260 --> 28:07.260
那里看这里的state

28:07.260 --> 28:08.260
是不是跟着是一个字母串

28:08.260 --> 28:09.260
对吧

28:09.260 --> 28:10.260
也是一个字母串

28:10.260 --> 28:11.260
看到没

28:11.260 --> 28:12.260
没问题吧

28:12.260 --> 28:13.260
那如果

28:13.260 --> 28:14.260
那就是这种情况

28:14.260 --> 28:15.260
就这种情况

28:15.260 --> 28:17.260
它不是一个objects

28:17.260 --> 28:19.260
那就直接给它复制就完事了

28:19.260 --> 28:20.260
好

28:20.260 --> 28:21.260
如果说

28:21.260 --> 28:22.260
如果它是一个objects

28:22.260 --> 28:23.260
怎么办呢

28:23.260 --> 28:24.260
那么现在又来

28:24.260 --> 28:25.260
push state

28:25.260 --> 28:26.260
那么这里呢

28:26.260 --> 28:27.260
我给它传一个objects

28:27.260 --> 28:29.260
传一个objects

28:29.260 --> 28:30.260
等于1

28:30.260 --> 28:31.260
b等于2

28:31.260 --> 28:32.260
是一个objects

28:32.260 --> 28:33.260
回车

28:33.260 --> 28:34.260
回车

28:34.260 --> 28:35.260
然后现在我们来看一下

28:35.260 --> 28:36.260
这里刷新一下

28:36.260 --> 28:38.260
保存刷新一下

28:39.260 --> 28:40.260
刷新

28:42.260 --> 28:43.260
这边刷新

28:43.260 --> 28:44.260
也一样

28:44.260 --> 28:45.260
那么现在这个state

28:45.260 --> 28:46.260
里面是不是也是

28:46.260 --> 28:47.260
adm1b等于2

28:47.260 --> 28:48.260
对吧

28:48.260 --> 28:49.260
也是一个对象

28:49.260 --> 28:50.260
来看

28:50.260 --> 28:51.260
跟这个是不是一样的

28:51.260 --> 28:52.260
是完全一样的

28:52.260 --> 28:53.260
好

28:53.260 --> 28:54.260
那么最后一种逻辑

28:54.260 --> 28:55.260
刚才的逻辑是在这

28:55.260 --> 28:56.260
在这

28:56.260 --> 28:57.260
那么最后一种逻辑

28:57.260 --> 28:59.260
它是一个对象

28:59.260 --> 29:00.260
并且它对象

29:00.260 --> 29:01.260
里面有keyz

29:01.260 --> 29:02.260
那就不一样了

29:02.260 --> 29:03.260
比方说

29:03.260 --> 29:04.260
History里边

29:04.260 --> 29:06.260
它有一个key

29:06.260 --> 29:08.260
我们这里再push一个

29:08.260 --> 29:09.260
再push一个

29:10.260 --> 29:11.260
就这个吧

29:11.260 --> 29:12.260
我之前做测试的

29:12.260 --> 29:13.260
push state

29:13.260 --> 29:14.260
那么我给它一个对象

29:14.260 --> 29:17.260
adm1b等于2

29:17.260 --> 29:18.260
看到没

29:18.260 --> 29:19.260
给它个对象

29:19.260 --> 29:20.260
那么

29:20.260 --> 29:21.260
给它一个keyz

29:21.260 --> 29:22.260
如果它有keyz过后

29:22.260 --> 29:23.260
看一下又怎么

29:23.260 --> 29:24.260
又会怎么样

29:24.260 --> 29:26.260
现在咱们刷新

29:26.260 --> 29:28.260
这个state是undefend

29:28.260 --> 29:29.260
然后我们再看一下

29:29.260 --> 29:30.260
window.state

29:30.260 --> 29:31.260
它是这个字

29:31.260 --> 29:32.260
但是我们这里的state

29:32.260 --> 29:33.260
是undefend

29:33.260 --> 29:35.260
为什么就是这样的逻辑

29:35.260 --> 29:36.260
如果你有keyz的话

29:36.260 --> 29:37.260
我会读什么

29:37.260 --> 29:38.260
我会读你这个

29:38.260 --> 29:40.260
我会读这个对象

29:40.260 --> 29:42.260
这个对象里边的state属性

29:42.260 --> 29:43.260
会读这个属性

29:43.260 --> 29:44.260
把这个属性的值

29:44.260 --> 29:45.260
放过来

29:45.260 --> 29:46.260
但是你没有这个属性

29:46.260 --> 29:47.260
那就是undefend

29:47.260 --> 29:48.260
就是undefend

29:49.260 --> 29:50.260
你看这个意思

29:50.260 --> 29:52.260
它就是这么一个逻辑

29:52.260 --> 29:53.260
它逻辑就是这么一个逻辑

29:53.260 --> 29:55.260
那如果说你在push state里边

29:55.260 --> 29:56.260
你给了一个state

29:56.260 --> 29:58.260
给了一个state

29:58.260 --> 30:00.260
state是一个字不算

30:00.260 --> 30:01.260
一个字不算

30:01.260 --> 30:02.260
123

30:02.260 --> 30:03.260
好

30:03.260 --> 30:04.260
比方说

30:04.260 --> 30:05.260
又加入一个state

30:05.260 --> 30:06.260
刷新

30:06.260 --> 30:07.260
你看state

30:07.260 --> 30:08.260
它的值是123

30:08.260 --> 30:11.260
那么我们看这个window.state

30:11.260 --> 30:12.260
它实际上读的是啥

30:12.260 --> 30:13.260
读的是这个字

30:13.260 --> 30:14.260
它其他字没管

30:14.260 --> 30:15.260
对不对

30:15.260 --> 30:16.260
好

30:16.260 --> 30:17.260
接下来

30:17.260 --> 30:18.260
你把先把这个逻辑理清楚

30:18.260 --> 30:19.260
它为什么是

30:19.260 --> 30:21.260
它这个逻辑是怎么样的

30:21.260 --> 30:22.260
接下来我来解释

30:22.260 --> 30:24.260
它为什么是这样的一个逻辑

30:24.260 --> 30:26.260
因为它要考虑到这么一个问题

30:28.260 --> 30:30.260
我们之后会利用history

30:30.260 --> 30:32.260
就是我们最终是会创建一个history对象

30:32.260 --> 30:33.260
对吧

30:33.260 --> 30:34.260
那个history对象

30:34.260 --> 30:35.260
它里边肯定有挑转页面的方法

30:35.260 --> 30:37.260
什么push啊这些方法

30:37.260 --> 30:38.260
replace啊这些方法

30:38.260 --> 30:39.260
它肯定有这个方法

30:39.260 --> 30:42.260
特别是当它push的时候

30:42.260 --> 30:44.260
就是我们之前用那个

30:44.260 --> 30:45.260
在这里

30:45.260 --> 30:46.260
我们之前用那个d

30:46.260 --> 30:48.260
它的cool里边的brusher history

30:48.260 --> 30:49.260
就用这个

30:50.260 --> 30:51.260
brusher history

30:52.260 --> 30:54.260
就是我们用上一课

30:54.260 --> 30:55.260
学习的那个

30:55.260 --> 30:57.260
当时没有自己的手鞋带

30:57.260 --> 30:59.260
用这个history的时候

30:59.260 --> 31:00.260
我们当时

31:00.260 --> 31:02.260
我们说它里面提供了一个

31:02.260 --> 31:03.260
push方法对不对

31:03.260 --> 31:04.260
是不是可以挑转页面

31:04.260 --> 31:05.260
对吧

31:05.260 --> 31:06.260
挑转页面的时候

31:06.260 --> 31:07.260
是不是可以带数据

31:07.260 --> 31:08.260
我们可以给个对象

31:08.260 --> 31:10.260
这里面是可以给对象的

31:10.260 --> 31:11.260
给个对象

31:11.260 --> 31:13.260
那么这里挑转passname

31:13.260 --> 31:14.260
passname

31:14.260 --> 31:16.260
挑转到abc

31:16.260 --> 31:17.260
可以给一个

31:19.260 --> 31:20.260
可以给一个state

31:20.260 --> 31:22.260
state数据

31:22.260 --> 31:25.260
比方说state是123

31:25.260 --> 31:27.260
或者state是一个区

31:27.260 --> 31:29.260
随便写什么都行

31:29.260 --> 31:31.260
给一个state数据

31:31.260 --> 31:32.260
那么这样子给数据

31:32.260 --> 31:34.260
它为了避免

31:34.260 --> 31:36.260
我这里的state

31:36.260 --> 31:39.260
跟其它的第三方库

31:39.260 --> 31:41.260
造成冲突

31:41.260 --> 31:42.260
因此

31:42.260 --> 31:43.260
它是把你这个state

31:43.260 --> 31:44.260
放到哪儿的

31:44.260 --> 31:45.260
它是放到这的

31:45.260 --> 31:49.740
你看一下

31:49.740 --> 31:51.740
它是把你这里的state

31:51.740 --> 31:52.740
的数据放到这的

31:52.740 --> 31:54.740
并且它可以给上一个keyz

31:54.740 --> 31:55.740
给上一个keyz

31:55.740 --> 31:56.740
做一个标识

31:56.740 --> 31:57.740
放到这

31:57.740 --> 31:59.740
它为什么要这样做

31:59.740 --> 32:01.740
它是为了避免冲突

32:01.740 --> 32:02.740
就是你这里

32:02.740 --> 32:03.740
无论是给它一个对象

32:03.740 --> 32:04.740
还是一个函数

32:04.740 --> 32:05.740
还是任何东西

32:05.740 --> 32:06.740
它始终把它放到这里边

32:06.740 --> 32:07.740
放到这个数据里边

32:07.740 --> 32:09.740
它是为了避免冲突

32:09.740 --> 32:10.740
为什么它要做这件事

32:10.740 --> 32:11.740
我再来解释一下

32:11.740 --> 32:13.740
比方说

32:13.740 --> 32:16.740
因为我们的那个history

32:16.740 --> 32:18.740
它是一个全局对象

32:18.740 --> 32:19.740
对吧

32:19.740 --> 32:22.740
那个history是一个全局对象

32:22.740 --> 32:25.740
就是window.history.state

32:25.740 --> 32:26.740
对吧

32:26.740 --> 32:27.740
它是同用的

32:27.740 --> 32:28.740
我们自己

32:28.740 --> 32:29.740
就是不用这个第三方库

32:29.740 --> 32:30.740
history第三方库

32:30.740 --> 32:31.740
我们用自己的手写单

32:31.740 --> 32:33.740
是不是也可以控制这个state

32:33.740 --> 32:34.740
对吧

32:34.740 --> 32:35.740
是不是也可以控制

32:35.740 --> 32:37.740
它是一个公共的

32:37.740 --> 32:39.740
一个公共的一块区域

32:39.740 --> 32:40.740
如果说

32:40.740 --> 32:43.740
我那个第三方history库

32:43.740 --> 32:46.740
第三方的history库

32:46.740 --> 32:50.060
history.pooch

32:51.060 --> 32:53.060
那么它的state

32:53.060 --> 32:54.060
如果说直接覆盖

32:54.060 --> 32:55.060
整个这个state的话

32:55.060 --> 32:57.060
就可能会导致一些问题

32:57.060 --> 32:58.060
比方说

32:58.060 --> 32:59.060
我另外一个第三方库

32:59.060 --> 33:01.060
它也要用到这个state

33:01.060 --> 33:03.060
那你把整个state覆盖掉了

33:03.060 --> 33:04.060
它就会导致另外的库

33:04.060 --> 33:05.060
要出问题

33:05.060 --> 33:06.060
明白这个意思吗

33:06.060 --> 33:08.060
所以它不会把它整个覆盖掉

33:08.060 --> 33:10.060
使用它来进行pooch的时候

33:10.060 --> 33:12.060
它不会把它整个覆盖掉

33:12.060 --> 33:13.060
因此

33:13.060 --> 33:15.060
它是不是把它里边的state数据

33:15.060 --> 33:16.060
放到哪呢

33:16.060 --> 33:17.060
它是放到这

33:24.220 --> 33:25.220
它是把它放到

33:25.220 --> 33:27.220
这个state的一个属性里边

33:27.220 --> 33:29.220
一个属性里边

33:29.220 --> 33:31.220
什么属性呢

33:31.220 --> 33:33.220
就是state属性

33:33.220 --> 33:34.220
它是把它

33:34.220 --> 33:36.220
把它的state放到state属性里边

33:36.220 --> 33:38.220
就是state本身是个对象

33:38.220 --> 33:40.220
它里边可以装很多东西

33:40.220 --> 33:42.220
那么它把它这边的state

33:42.220 --> 33:43.220
放到这个属性里边

33:43.220 --> 33:44.220
它这样子放的

33:44.220 --> 33:46.220
并且还给它一个key属性

33:47.220 --> 33:48.220
给它一个key属性

33:50.220 --> 33:52.220
它是用这种方式来做的

33:52.220 --> 33:53.220
目的是什么

33:53.220 --> 33:55.220
目的是为了避免跟其他的第三方库

33:55.220 --> 33:56.220
或者是跟你自己

33:56.220 --> 33:58.220
手动去控制这个state的时候

33:58.220 --> 33:59.220
造成冲突

33:59.220 --> 34:00.220
它为了避免这样子

34:00.220 --> 34:01.220
有这种情况

34:01.220 --> 34:02.220
它不能直接把state

34:02.220 --> 34:03.220
直接把它覆盖掉

34:03.220 --> 34:04.220
那样子太霸道了

34:04.220 --> 34:06.220
你不给其他的第三方库

34:06.220 --> 34:07.220
你又活路了

34:07.220 --> 34:09.220
如果有一个其他第三方库

34:09.220 --> 34:10.220
也要用到state

34:10.220 --> 34:11.220
那好吧你把它覆盖掉了

34:11.220 --> 34:13.220
其他第三方库不要玩了

34:13.220 --> 34:15.220
所以它比较温柔

34:15.220 --> 34:17.220
它只是给它加了一个属性

34:17.220 --> 34:19.220
把数据放到这个属性里边

34:19.220 --> 34:20.220
并且同时该加一个key属性

34:20.220 --> 34:21.220
来做一个表示

34:21.220 --> 34:23.220
key属性我们之前也说过

34:23.220 --> 34:24.220
是一个随隙置物串

34:24.220 --> 34:25.220
它是用来表示

34:25.220 --> 34:27.220
它是为了方便

34:27.220 --> 34:29.220
后续代码表现一些监听器里边

34:29.220 --> 34:31.220
你们要可以通过key值

34:31.220 --> 34:32.220
来判断是不是之前的地址

34:32.220 --> 34:34.220
它主要通过这个东西

34:35.220 --> 34:37.220
好 于是呢

34:37.220 --> 34:39.220
由于它有这么

34:39.220 --> 34:42.220
后续它有这么一个方

34:42.220 --> 34:44.220
这种操作方式

34:44.220 --> 34:45.220
所以说

34:45.220 --> 34:47.220
它在还原state的时候

34:47.220 --> 34:49.220
它对state进行还原的时候

34:49.220 --> 34:50.220
它就这么一个逻辑

34:50.220 --> 34:52.220
至少有这么一个逻辑出来了

34:52.220 --> 34:54.220
如果说这个keystate是一个对象

34:54.220 --> 34:56.220
它里边有key值

34:56.220 --> 34:57.220
说明啥呢

34:57.220 --> 35:01.220
说明了你对象里边有的key值

35:01.220 --> 35:02.220
既然你有这个key值

35:02.220 --> 35:04.220
说明你对象里边

35:04.220 --> 35:05.220
一定有一个state属性

35:05.220 --> 35:08.220
是跟我之前用铺系方法对应的

35:08.220 --> 35:10.220
因为我还原这个数据的时候

35:10.220 --> 35:13.220
我只需要还原我keystate铺系的东西

35:13.220 --> 35:14.220
铺系的state

35:14.220 --> 35:16.220
其他的数据我不care

35:16.220 --> 35:17.220
不care其他的数据

35:17.220 --> 35:19.220
我只care我之前

35:19.220 --> 35:21.220
用我这套东西给他加的数据

35:21.220 --> 35:23.220
其他的数据有没有you

35:23.220 --> 35:25.220
但是我不是很care

35:25.220 --> 35:27.220
明白这个意思吗

35:27.220 --> 35:29.220
就这么个意思

35:29.220 --> 35:31.220
好好理解一下

35:31.220 --> 35:34.220
就是我之前用history铺系

35:34.220 --> 35:35.220
是不是加了一个state

35:35.220 --> 35:37.220
你看看我们刚才这里

35:37.220 --> 35:39.220
铺系加了一个state

35:39.220 --> 35:41.220
哪怕你这个historystate里边

35:41.220 --> 35:42.220
有其他东西

35:42.220 --> 35:44.220
我不care

35:44.220 --> 35:48.220
我只要我自己的东西就行了

35:48.220 --> 35:51.220
所以说他把state属性拿出来

35:51.220 --> 35:52.220
作为自己的

35:52.220 --> 35:54.220
他还原的时候

35:54.220 --> 35:55.220
还原这个state的时候

35:55.220 --> 35:57.220
要用这种逻辑处理

35:57.220 --> 35:58.220
如果说他是一个对象

35:58.220 --> 36:00.220
他里边有包含key这个属性值

36:00.220 --> 36:02.220
说明他里边有一部分数据

36:02.220 --> 36:04.220
是我之前用铺系方法加进去的

36:04.220 --> 36:07.220
那么我们只需要还原那部分数据就完事了

36:07.220 --> 36:09.220
所以说他把state属性读出来

36:09.220 --> 36:11.220
key属性要保留进来

36:11.220 --> 36:12.220
这些都是我自己的数据

36:12.220 --> 36:14.220
我要保留进来

36:14.220 --> 36:16.220
那么还有一种情况就是

36:16.220 --> 36:17.220
其他的情况是什么

36:17.220 --> 36:19.220
其他的情况就是

36:19.220 --> 36:21.220
你的数据不是我加的

36:21.220 --> 36:23.220
不是我你的页面跳转

36:23.220 --> 36:24.220
不是我通过铺系跳转的

36:24.220 --> 36:26.220
可能是直接输入地址

36:26.220 --> 36:27.220
对吧直接输入地址

36:27.220 --> 36:28.220
那么这样子一来的话

36:28.220 --> 36:30.220
history至少那个

36:30.220 --> 36:31.220
historystate里边

36:31.220 --> 36:32.220
它是不是没东西

36:32.220 --> 36:33.220
对吧没东西

36:33.220 --> 36:34.220
或者是你直接

36:34.220 --> 36:35.220
一些第三方库

36:35.220 --> 36:37.220
你直接利用historyapi

36:37.220 --> 36:39.220
直接用铺系state来加的数据

36:39.220 --> 36:40.220
那么这种数据

36:40.220 --> 36:42.220
它就不是我的数据

36:42.220 --> 36:44.220
它不是我之前用铺系方法

36:44.220 --> 36:46.220
它就不是我之前用铺系方法加的数据

36:46.220 --> 36:47.220
那是别人的数据

36:47.220 --> 36:49.220
那别人的数据怎么办呢

36:49.220 --> 36:50.220
那我不是我的数据

36:50.220 --> 36:52.220
那我肯定还是要得到

36:52.220 --> 36:53.220
还是要得到这个数据

36:53.220 --> 36:54.220
它就把这个数据

36:54.220 --> 36:55.220
远峰不动的拿过来了

36:55.220 --> 36:57.220
它是这么一套逻辑

36:57.220 --> 36:58.220
就是是我加的数据

36:58.220 --> 37:00.220
我只取我自己的数据

37:00.220 --> 37:02.220
如果整个数据都不是我加的

37:02.220 --> 37:05.220
我就把整个数据拿过来

37:05.220 --> 37:07.220
它是这么一套逻辑

37:07.220 --> 37:09.220
是这么一套逻辑

37:09.220 --> 37:10.220
就这么一个情况

37:10.220 --> 37:11.220
你看整个代码

37:11.220 --> 37:13.220
整个逻辑就这么一个情况

37:14.220 --> 37:15.220
当然了

37:15.220 --> 37:17.220
这只是一些细致默决的问题

37:17.220 --> 37:18.220
只是一个state的问题

37:18.220 --> 37:19.220
细致默决的问题

37:19.220 --> 37:21.220
大家能力解就理解

37:21.220 --> 37:23.220
实际上理解不了的话也没关系

37:23.220 --> 37:24.220
你直接把它作为

37:24.220 --> 37:26.220
你直接把它拿过来也行

37:26.220 --> 37:27.220
也行

37:27.220 --> 37:29.220
也不会造成太大的问题

37:29.220 --> 37:31.220
但是最好是用这种写法

37:32.220 --> 37:35.220
那么这个创建都可以行就搞定了

37:35.220 --> 37:37.220
大家下来也可以自己去试一下

37:37.220 --> 37:39.220
它那个库里边也是这样处理的

37:39.220 --> 37:41.220
可以自行去试一下

37:42.220 --> 37:43.220
那么

37:45.220 --> 37:46.220
那个就是

37:46.220 --> 37:49.220
创建那个location是否搞定了

37:49.220 --> 37:51.220
创建的location就搞定了

37:51.220 --> 37:52.220
好

37:52.220 --> 37:53.220
这个函数搞定了

37:53.220 --> 37:55.220
这个函数搞定了之后

37:55.220 --> 37:56.220
那咱们在这里

37:56.220 --> 37:58.220
create a browser history在这里边

37:58.220 --> 37:59.220
是不是

37:59.220 --> 38:02.220
我这里location就可以搞定了

38:02.220 --> 38:04.220
location我等于啥了

38:04.220 --> 38:07.220
等于就等于create location

38:07.220 --> 38:08.220
对吧

38:08.220 --> 38:09.220
create location

38:09.220 --> 38:10.220
它要传一个base name

38:10.220 --> 38:13.220
哪是来自于这个参数的配置

38:13.220 --> 38:14.220
那么这个参数的配置

38:14.220 --> 38:15.220
是不是有默认值

38:15.220 --> 38:16.220
首先给整个

38:16.220 --> 38:18.220
整个是一个默认的对象

38:18.220 --> 38:19.220
如果你不传的话

38:19.220 --> 38:21.220
就默认是个空对象

38:21.220 --> 38:22.220
空对象

38:22.220 --> 38:23.220
然后我们在这里解构

38:23.220 --> 38:26.730
解构这个空对象

38:26.730 --> 38:27.730
options

38:27.730 --> 38:29.730
解构这个空对象

38:29.730 --> 38:30.730
好

38:30.730 --> 38:31.730
解构的时候

38:31.730 --> 38:32.730
我们解构出来的哪些东西

38:32.730 --> 38:33.730
我们之前看一下吧

38:33.730 --> 38:34.730
之前browser history里边

38:34.730 --> 38:35.730
哪些API

38:35.730 --> 38:36.730
对吧

38:36.730 --> 38:37.730
就是这么几个

38:37.730 --> 38:38.730
一个是base name

38:38.730 --> 38:40.730
现在默认值为空置无串

38:40.730 --> 38:42.730
一个默认值为空置无串

38:42.730 --> 38:44.730
解构base name

38:44.730 --> 38:45.730
还有什么呢

38:45.730 --> 38:46.730
force

38:46.730 --> 38:48.730
refresh

38:48.730 --> 38:49.730
forcerefresh

38:49.730 --> 38:50.730
我们给它一个默认值

38:50.730 --> 38:51.730
force

38:51.730 --> 38:52.730
表示是否强制刷新

38:52.730 --> 38:54.730
这是跟路径

38:54.730 --> 38:55.730
跟路径

38:55.730 --> 38:56.730
然后keynames

38:56.730 --> 38:57.730
我们先扔着吧

38:57.730 --> 38:58.730
把这些解构出来

38:58.730 --> 39:00.730
keynames等于6

39:01.730 --> 39:02.730
然后这里

39:02.730 --> 39:03.730
还有一个什么呢

39:03.730 --> 39:05.730
get user confirmation

39:05.730 --> 39:06.730
先不管

39:06.730 --> 39:07.730
这个后面怎么去用

39:07.730 --> 39:08.730
它的一个默认值

39:08.730 --> 39:09.730
默认值是什么

39:09.730 --> 39:10.730
是一个函数

39:10.730 --> 39:11.730
我们之前说过的

39:11.730 --> 39:12.730
是一个函数

39:12.730 --> 39:13.730
message

39:13.730 --> 39:14.730
然后callback

39:14.730 --> 39:16.730
默认值就是一个函数

39:20.730 --> 39:21.730
函数

39:21.730 --> 39:22.730
那么这个函数里边就是

39:22.730 --> 39:23.730
callback

39:26.730 --> 39:27.730
对的

39:27.730 --> 39:28.730
callback

39:28.730 --> 39:29.730
然后就是

39:29.730 --> 39:30.730
message

39:31.730 --> 39:33.730
window.conf

39:34.730 --> 39:36.730
然后message

39:37.730 --> 39:38.730
message

39:38.730 --> 39:39.730
写出来了

39:39.730 --> 39:40.730
对吧

39:40.730 --> 39:41.730
把解构出来

39:41.730 --> 39:43.730
把它里边的这些配置解构出来

39:43.730 --> 39:44.730
那么这里

39:44.730 --> 39:45.730
create location的时候

39:45.730 --> 39:46.730
是不是把bass name

39:46.730 --> 39:47.730
传进去有完事了

39:47.730 --> 39:48.730
对吧

39:48.730 --> 39:49.730
bass name传进去有完事了

39:49.730 --> 39:50.730
管理配置的事实上

39:50.730 --> 39:51.730
背景在传进去有完事了

39:51.730 --> 39:53.730
那么location对象是不搞定的

39:53.730 --> 39:54.730
咱们来试一下

39:55.730 --> 39:57.730
create browser history

39:57.730 --> 40:01.300
那么它等到一个hiss有对象

40:01.300 --> 40:02.300
那么对象的里边

40:02.300 --> 40:04.300
已经具有了location

40:04.300 --> 40:05.300
保存

40:06.300 --> 40:07.300
怎么没打印呢

40:09.300 --> 40:10.300
看一下

40:11.300 --> 40:12.300
怎么没打印

40:14.300 --> 40:15.300
这里

40:15.300 --> 40:17.990
到这个

40:18.990 --> 40:19.990
你看

40:19.990 --> 40:20.990
location对象是不是出来了

40:20.990 --> 40:21.990
对吧

40:21.990 --> 40:22.990
至少这个东西出来了

40:23.990 --> 40:24.990
那么接下来

40:24.990 --> 40:25.990
我们来看一下

40:25.990 --> 40:27.990
history对象里边的其他东西

40:27.990 --> 40:28.990
慢慢来

40:28.990 --> 40:31.300
慢慢来

40:31.300 --> 40:32.300
不着急

40:32.300 --> 40:33.300
首先

40:33.300 --> 40:34.300
它这里边

40:34.300 --> 40:35.300
主要是

40:35.300 --> 40:37.300
也提供了大量的方法

40:37.300 --> 40:39.300
提供了大量的方法

40:39.300 --> 40:40.300
这个属性

40:40.300 --> 40:41.300
叫做action

40:42.300 --> 40:43.300
叫做action属性

40:43.300 --> 40:44.300
不要说这里

40:47.190 --> 40:48.190
就这里

40:48.190 --> 40:49.190
有这么一个属性叫做action

40:49.190 --> 40:50.190
对吧

40:50.190 --> 40:51.190
我们之前有讲过这个属性

40:51.190 --> 40:52.190
还记得吗

40:52.190 --> 40:53.190
上天跟我讲的

40:53.190 --> 40:54.190
这个属性在

40:54.190 --> 40:55.190
创建的时候

40:55.190 --> 40:57.190
是固定为pop

40:57.190 --> 40:58.190
直接写实就完事了

40:58.190 --> 40:59.190
固定为pop

41:00.190 --> 41:02.190
在创建这个对象的时候

41:02.190 --> 41:04.190
它的action属性固定为pop

41:04.190 --> 41:05.190
那么雕用铺形过后

41:05.190 --> 41:07.190
它的属性变为铺形

41:07.190 --> 41:08.190
雕用replace过后

41:08.190 --> 41:09.190
变成replace

41:09.190 --> 41:10.190
这个属性很简单

41:10.190 --> 41:11.190
直接写实就完事了

41:11.190 --> 41:12.190
直接写实就完事了

41:14.190 --> 41:16.190
咱们把这两个都倒入进来

41:16.190 --> 41:18.190
就可以一起测试

41:18.190 --> 41:19.190
主要是可以一起测试

41:20.190 --> 41:21.190
一起测试

41:21.190 --> 41:22.190
方便一点

41:22.190 --> 41:23.190
这两个都倒

41:23.190 --> 41:24.190
就是上一课的东西

41:24.190 --> 41:25.190
也倒入进来

41:25.190 --> 41:26.190
那我们看一下吧

41:26.190 --> 41:27.190
一起

41:27.190 --> 41:28.190
你看

41:29.190 --> 41:30.190
x

41:30.190 --> 41:31.190
固定为pop

41:31.190 --> 41:33.190
创建新创建的固定为pop

41:34.190 --> 41:35.190
好

41:35.190 --> 41:37.190
然后是不是还有个ness属性

41:37.190 --> 41:38.190
对吧

41:38.190 --> 41:39.190
ness属性

41:39.190 --> 41:40.190
这个ness属性的话

41:40.190 --> 41:42.190
是不是就可以直接来自于

41:42.190 --> 41:43.190
ness属性

41:43.190 --> 41:44.190
来自于什么

41:44.190 --> 41:45.190
history

41:45.190 --> 41:46.190
第2什么

41:46.190 --> 41:47.190
ness

41:47.190 --> 41:48.190
对吧

41:48.190 --> 41:49.190
跟那个是不是一致的

41:49.190 --> 41:50.190
这个没问题吧

41:50.190 --> 41:51.190
ness属性跟那个一致的

41:51.190 --> 41:52.190
咱们那个

41:53.190 --> 41:54.190
这里要用什么

41:54.190 --> 41:55.190
window

41:55.190 --> 41:56.190
第2 history

41:57.190 --> 41:58.190
对吧

41:58.190 --> 41:59.190
ness属性是不是跟那个一致的

41:59.190 --> 42:00.190
咱们跟那个window

42:00.190 --> 42:01.190
第2 history

42:01.190 --> 42:02.190
完全一致

42:02.190 --> 42:04.190
ness属性没什么好说的

42:04.190 --> 42:05.190
完全一致

42:06.190 --> 42:07.190
咱们再来看

42:07.190 --> 42:08.190
H

42:08.190 --> 42:09.190
action

42:09.190 --> 42:10.190
还有什么ness

42:10.190 --> 42:12.190
这两个数据的属性之外

42:12.190 --> 42:14.190
是不是开始有大对方法出现了

42:14.190 --> 42:15.190
对吧

42:15.190 --> 42:17.190
开始出现了一大对的方法

42:18.190 --> 42:21.190
首先我们先写一些简单的方法

42:21.190 --> 42:22.190
先写一些简单的方法

42:23.190 --> 42:24.190
比方说

42:24.190 --> 42:25.190
这个go

42:26.190 --> 42:27.190
go这个方法

42:28.190 --> 42:29.190
这个方法最简单

42:30.190 --> 42:31.190
最简单

42:31.190 --> 42:32.190
为什么

42:32.190 --> 42:33.190
go这个方法

42:33.190 --> 42:35.190
它其实就是那个window.history

42:35.190 --> 42:36.190
里面的go方法

42:36.190 --> 42:37.190
你甚至可以这样子写

42:38.190 --> 42:39.190
这个go方法

42:40.190 --> 42:43.190
就是window.history里面的go

42:45.190 --> 42:46.190
这两方就一样的

42:46.190 --> 42:47.190
就一样的

42:47.190 --> 42:48.190
比方说

42:48.190 --> 42:49.190
我们来看一下吧

42:50.190 --> 42:52.190
咱们这里还是把它

42:54.190 --> 42:55.190
保存到这个window里面

42:55.190 --> 42:56.190
来方便测试

42:56.190 --> 42:57.190
window myhistory

42:58.190 --> 42:59.190
history

42:59.190 --> 43:00.190
保存到这

43:04.080 --> 43:05.080
保存到这

43:06.080 --> 43:07.080
好看着

43:08.080 --> 43:10.080
那这里咱们使用myhistory

43:10.080 --> 43:12.080
go-myhistory

43:16.080 --> 43:17.080
myhistory

43:17.080 --> 43:18.080
我看一下

43:18.080 --> 43:19.080
打印出来看一下

43:26.210 --> 43:28.210
它这里不能调用

43:28.210 --> 43:29.210
应该是go方法

43:29.210 --> 43:32.210
它跟z还有关系

43:32.210 --> 43:34.210
它里面不知道绑定了哪个z

43:34.210 --> 43:36.210
应该是z的指向问题

43:36.210 --> 43:37.210
那这样吧

43:37.210 --> 43:38.210
我们这里就直接这样子写

43:38.210 --> 43:39.210
go方法很简单

43:39.210 --> 43:41.210
我们这里就直接在这里写个

43:41.210 --> 43:42.210
写个go方法

43:42.210 --> 43:43.210
方可行

43:43.210 --> 43:44.210
go方法

43:45.210 --> 43:46.210
go方法

43:48.210 --> 43:49.210
params

43:52.220 --> 43:54.220
应该是n

43:54.220 --> 43:55.220
不是给我个数字吗

43:55.220 --> 43:57.220
对吧 给我个数字来进行跳跃

43:57.220 --> 43:58.220
step

43:58.220 --> 43:59.220
跳跃

43:59.220 --> 44:01.220
跳转的就是一个

44:02.220 --> 44:04.220
向前还是向后跳转

44:04.220 --> 44:05.220
里面懂的就行了

44:05.220 --> 44:06.220
咱们直接

44:06.220 --> 44:09.220
调用window.history

44:09.220 --> 44:10.220
go

44:10.220 --> 44:11.220
step

44:12.220 --> 44:13.220
这样调用

44:13.220 --> 44:14.220
把这个地方

44:14.220 --> 44:15.220
放到这

44:15.220 --> 44:16.220
go方法放到这

44:16.220 --> 44:17.220
保存

44:17.220 --> 44:19.220
其实就是一个调用问题

44:19.220 --> 44:21.220
咱们myhistory

44:21.220 --> 44:22.220
go-1

44:23.220 --> 44:24.220
你看

44:24.220 --> 44:25.220
说回去了

44:25.220 --> 44:26.220
然后

44:26.220 --> 44:27.220
-2

44:28.220 --> 44:29.220
-3

44:29.220 --> 44:31.220
你看地毯是不是跟那边了

44:31.220 --> 44:32.220
go

44:33.220 --> 44:34.220
1

44:35.220 --> 44:36.220
go

44:38.220 --> 44:39.220
2

44:40.220 --> 44:41.220
看见没有

44:41.220 --> 44:42.220
对吧

44:42.220 --> 44:43.220
说跟那边了

44:44.220 --> 44:45.220
就这么个意思

44:45.220 --> 44:47.220
所以这个方法就是这个go方法

44:47.220 --> 44:48.220
其他都没啥

44:49.220 --> 44:51.220
那么什么go-back

44:51.220 --> 44:52.220
go-back

44:52.220 --> 44:54.220
go forward

44:54.220 --> 44:56.220
forward

44:56.220 --> 44:57.220
那是不是一样的

44:57.220 --> 44:59.220
对不对 是一样的

44:59.220 --> 45:00.220
咱们来写一个

45:00.220 --> 45:02.220
go-back

45:03.220 --> 45:04.220
go-back

45:04.220 --> 45:05.220
就是window

45:06.220 --> 45:07.220
window

45:07.220 --> 45:08.220
第二

45:08.220 --> 45:09.220
history

45:10.220 --> 45:12.220
是

45:12.220 --> 45:14.220
是go-back

45:14.220 --> 45:16.220
window.history

45:16.220 --> 45:17.220
看一下

45:17.220 --> 45:19.220
这里边是这个方法

45:21.220 --> 45:22.220
back

45:22.220 --> 45:23.220
forward

45:23.220 --> 45:25.220
它只是back

45:25.220 --> 45:27.220
然后再来一个

45:27.220 --> 45:29.220
go-forward

45:29.220 --> 45:32.220
那么就是window.history

45:32.220 --> 45:33.220
forward

45:33.220 --> 45:34.220
对吧

45:34.220 --> 45:35.220
其实就是这么几个方法

45:35.220 --> 45:36.220
就这么几个方法

45:36.220 --> 45:38.220
这几个方法很简单

45:38.220 --> 45:40.220
直接用就行了

45:40.220 --> 45:41.220
好

45:41.220 --> 45:42.220
再看

45:44.220 --> 45:45.220
然后

45:45.220 --> 45:46.220
go-back

45:48.540 --> 45:49.540
然后

45:49.540 --> 45:50.540
back

45:50.540 --> 45:51.540
是不是变了

45:51.540 --> 45:53.540
back

45:53.540 --> 45:54.540
news

45:54.540 --> 45:57.540
因为有几个地址是一样的

45:57.540 --> 45:58.540
地址当里面的地址是一样的

45:58.540 --> 45:59.540
包括什么

45:59.540 --> 46:00.540
go-forward

46:01.540 --> 46:02.540
你看 是地址跟那边了

46:02.540 --> 46:03.540
对吧

46:03.540 --> 46:04.540
这个很简单

46:04.540 --> 46:06.540
它就是在window里面的这些东西

46:07.540 --> 46:08.540
好

46:08.540 --> 46:09.540
那么我们继续看

46:09.540 --> 46:11.540
这个myhistory里边

46:11.540 --> 46:13.540
以及我们它

46:13.540 --> 46:14.540
第三方库里边的history里边

46:14.540 --> 46:16.540
它还欠缺了哪些东西

46:16.540 --> 46:17.540
现在还欠缺啥呢

46:17.540 --> 46:18.540
block 没有

46:18.540 --> 46:19.540
crease of rift 没有

46:19.540 --> 46:20.540
还有什么呢

46:20.540 --> 46:22.540
还有什么neson 没有

46:22.540 --> 46:23.540
location 已经有了

46:23.540 --> 46:24.540
poosh 没有

46:24.540 --> 46:25.540
replace 没有

46:25.540 --> 46:26.540
就差这几个方法了

46:26.540 --> 46:27.540
就差这么几个方法了

46:27.540 --> 46:29.540
挨在的来吧

46:29.540 --> 46:31.540
咱们先来搞定

46:31.540 --> 46:32.540
poosh和replace

46:32.540 --> 46:34.540
这两个非常非常重要的方法

46:34.540 --> 46:36.540
搞定poosh和replace

46:39.540 --> 46:40.540
那么这里边

46:40.540 --> 46:41.540
我们写这么一个函数

46:41.540 --> 46:42.540
方个型

46:42.540 --> 46:43.540
poosh

46:43.540 --> 46:44.540
写这么一个函数

46:44.540 --> 46:45.540
这里边

46:45.540 --> 46:47.540
我们直接把这个poosh放过来

46:47.540 --> 46:48.540
poosh

46:48.540 --> 46:49.540
好

46:49.540 --> 46:50.540
那么这个函数

46:51.540 --> 46:52.540
这个函数

46:52.540 --> 46:53.540
它要接受一些参数

46:53.540 --> 46:54.540
对吧

46:54.540 --> 46:55.540
又要接受一些参数

46:55.540 --> 46:57.540
那么这个参数有两种情况

46:57.540 --> 46:58.540
一种是

46:58.540 --> 46:59.540
第一个写个字母串

46:59.540 --> 47:00.540
第一个就是

47:00.540 --> 47:01.540
我们知道

47:01.540 --> 47:02.540
我们这里都学过的

47:02.540 --> 47:03.540
H点 poosh 里边

47:03.540 --> 47:04.540
它的写法

47:04.540 --> 47:05.540
一开

47:05.540 --> 47:06.540
第一个写字母串

47:06.540 --> 47:07.540
第二个写

47:07.540 --> 47:08.540
就是状态

47:08.540 --> 47:09.540
给它的状态

47:09.540 --> 47:10.540
状态

47:10.540 --> 47:11.540
随便写的

47:11.540 --> 47:12.540
给它的状态

47:12.540 --> 47:13.540
那么你看一下

47:13.540 --> 47:15.540
H点 location

47:15.540 --> 47:16.540
H点 location

47:16.540 --> 47:17.540
你看一下

47:17.540 --> 47:18.540
是吧

47:20.540 --> 47:21.540
对不对

47:22.540 --> 47:23.540
好

47:23.540 --> 47:24.540
这是这种情况

47:24.540 --> 47:25.540
这种情况

47:25.540 --> 47:26.540
那么还有种情况

47:26.540 --> 47:28.540
就是直接给它一个对象

47:28.540 --> 47:29.540
直接给它一个对象

47:29.540 --> 47:30.540
就是说

47:30.540 --> 47:31.540
H点 poosh

47:31.540 --> 47:32.540
我们直接给它一个对象

47:33.540 --> 47:34.540
对吧

47:34.540 --> 47:35.540
这个东西我不写了

47:35.540 --> 47:36.540
那么这有两种情况

47:36.540 --> 47:38.540
因为它参数有两种情况

47:38.540 --> 47:40.540
我们这里能这样子写吧

47:40.540 --> 47:41.540
一个是pass

47:41.540 --> 47:42.540
一个是stat

47:44.540 --> 47:45.540
好

47:45.540 --> 47:46.540
这里能不能打个注射

47:46.540 --> 47:47.540
就是

47:49.540 --> 47:50.540
向

47:51.540 --> 47:52.540
地址站中

47:52.540 --> 47:54.540
加入

47:54.540 --> 47:56.540
一个新的地址

47:56.540 --> 47:57.540
这个pass是什么呢

47:57.540 --> 47:58.540
pass是

47:58.540 --> 47:59.540
新的地址

47:59.540 --> 48:01.540
它可以是字母串

48:01.540 --> 48:02.540
新的地址

48:03.540 --> 48:05.540
可以是字符串

48:05.540 --> 48:07.540
也可以是对象

48:07.540 --> 48:09.540
那么这个statem表示的是

48:11.540 --> 48:12.540
状态

48:12.540 --> 48:13.540
状态

48:14.540 --> 48:15.540
状态数据

48:15.540 --> 48:17.540
就是附加的状态数据

48:17.540 --> 48:19.540
如果

48:19.540 --> 48:21.540
第一个参数是对象

48:21.540 --> 48:23.540
那么该参数无效

48:24.540 --> 48:26.540
如果第一个参数是对象的话

48:26.540 --> 48:27.540
状态数据应该放到这

48:27.540 --> 48:28.540
应该放到这

48:28.540 --> 48:29.540
对象里面

48:29.540 --> 48:30.540
那么我们在这里面

48:30.540 --> 48:31.540
来进行处理

48:31.540 --> 48:32.540
好

48:32.540 --> 48:33.540
这里的话

48:33.540 --> 48:34.540
具体怎么处理呢

48:34.540 --> 48:36.540
我们可以用这个模式

48:36.540 --> 48:39.540
就是以后让你遇到一个函数

48:39.540 --> 48:40.540
就是说我们讲原代码

48:40.540 --> 48:42.540
最重要的只是理解一些

48:42.540 --> 48:43.540
常见的处理方案

48:43.540 --> 48:45.540
如果说你以后写那么个函数

48:45.540 --> 48:47.540
它的参数可能是多种情况的话

48:47.540 --> 48:49.540
那么你最好

48:49.540 --> 48:50.540
再写个函数

48:50.540 --> 48:52.540
把根据参数的值

48:52.540 --> 48:54.540
返回一种统一的格式

48:54.540 --> 48:55.540
返回一个统一的格式

48:55.540 --> 48:56.540
比方说

48:56.540 --> 48:57.540
我们可以根据

48:58.540 --> 48:59.540
返回一个统一的格式

48:59.540 --> 49:00.540
什么格式

49:00.540 --> 49:01.540
比方说

49:01.540 --> 49:02.540
绝例子

49:02.540 --> 49:03.540
如果说你PASS

49:03.540 --> 49:04.540
给我传的是一个字母创

49:05.540 --> 49:06.540
对

49:06.540 --> 49:07.540
123

49:08.540 --> 49:09.540
传一个字母创

49:09.540 --> 49:10.540
然后State

49:10.540 --> 49:11.540
给我传的是一个

49:11.540 --> 49:13.540
随便写吧

49:13.540 --> 49:14.540
管理实际上传的是啥的

49:14.540 --> 49:15.540
无所谓

49:15.540 --> 49:16.540
那么我就返回一个

49:16.540 --> 49:17.540
是什么呢

49:17.540 --> 49:18.540
返回这么一个对象

49:18.540 --> 49:19.540
这个对象里边PASS

49:19.540 --> 49:20.540
为什么呢

49:20.540 --> 49:22.540
为邪纲123

49:22.540 --> 49:24.540
然后State

49:24.540 --> 49:25.540
为啥呢

49:26.540 --> 49:27.540
A

49:27.540 --> 49:28.540
1

49:28.540 --> 49:29.540
对吧

49:29.540 --> 49:30.540
我可以返回这个结果

49:30.540 --> 49:31.540
如果说你给我

49:31.540 --> 49:32.540
这样传的

49:32.540 --> 49:33.540
返回一个统一的结果

49:33.540 --> 49:34.540
如果说你给我PASS

49:34.540 --> 49:36.540
得到的是一个对象

49:36.540 --> 49:37.540
是一个对象

49:37.540 --> 49:38.540
那么对象里边

49:38.540 --> 49:40.540
就是比方说PASSNAME

49:40.540 --> 49:41.540
这个东西

49:41.540 --> 49:42.540
写的是

49:42.540 --> 49:43.540
邪纲123

49:43.540 --> 49:44.540
还有什么

49:44.540 --> 49:45.540
Search

49:47.540 --> 49:48.540
这样子吧

49:48.540 --> 49:49.540
如果说字母创

49:49.540 --> 49:50.540
传的是这种格式

49:50.540 --> 49:51.540
A等于1

49:51.540 --> 49:52.540
Hash

49:52.540 --> 49:53.540
A

49:53.540 --> 49:54.540
那么这里的PASS

49:54.540 --> 49:55.540
A等于1

49:55.540 --> 49:56.540
Hash

49:56.540 --> 49:57.540
A

49:57.540 --> 49:58.540
那么如果说你给我

49:58.540 --> 49:59.540
传的是对象格式

49:59.540 --> 50:00.540
Search

50:00.540 --> 50:02.540
为A等于1

50:02.540 --> 50:03.540
A等于1

50:05.540 --> 50:07.540
然后就是

50:07.540 --> 50:09.540
Hash

50:09.540 --> 50:10.540
为什么

50:10.540 --> 50:11.540
锦号

50:11.540 --> 50:12.540
A

50:12.540 --> 50:13.540
如果你给我传的是

50:13.540 --> 50:14.540
还有State

50:14.540 --> 50:15.540
State的话

50:15.540 --> 50:17.540
为A等于1

50:17.540 --> 50:18.540
你给我传的是

50:18.540 --> 50:19.540
对象格式的话

50:19.540 --> 50:20.540
我给你返回的

50:20.540 --> 50:21.540
也是同样的一个格式

50:21.540 --> 50:22.540
这个结果

50:22.540 --> 50:23.540
对吧

50:23.540 --> 50:24.540
处理一下

50:24.540 --> 50:25.540
返回同样的一个

50:25.540 --> 50:26.540
对象结果

50:26.540 --> 50:27.540
对吧

50:27.540 --> 50:28.540
所以说

50:28.540 --> 50:29.540
我们给它一个统一的格式

50:29.540 --> 50:30.540
就方便

50:30.540 --> 50:31.540
就很好处理了

50:31.540 --> 50:32.540
就很好处理了

50:32.540 --> 50:33.540
所以说

50:33.540 --> 50:34.540
我们这里

50:34.540 --> 50:35.540
专门来写个函数

50:35.540 --> 50:36.540
方可请

50:36.540 --> 50:37.540
HANDLE

50:37.540 --> 50:38.540
PASS

50:38.540 --> 50:39.540
AND

50:39.540 --> 50:40.540
State

50:40.540 --> 50:41.540
你给我传一个PASS

50:41.540 --> 50:44.420
给我传一个State

50:44.420 --> 50:45.420
就是

50:45.420 --> 50:46.420
将PASS

50:46.420 --> 50:48.420
都是内部

50:48.420 --> 50:49.420
实现的函数

50:49.420 --> 50:50.420
外面是访问不到的

50:50.420 --> 50:52.420
将PASS和State

50:52.420 --> 50:54.420
根据PASS

50:54.420 --> 50:55.420
和State

50:55.420 --> 50:56.420
得到一个

50:56.420 --> 50:57.420
统一的

50:57.420 --> 50:58.420
得到一个

50:58.420 --> 50:59.420
统一的

50:59.420 --> 51:01.420
对象格式

51:01.420 --> 51:02.420
这样子

51:02.420 --> 51:03.420
我们就把它判断一下

51:03.420 --> 51:04.420
如果说

51:04.420 --> 51:06.420
你给我的PASS

51:06.420 --> 51:07.420
PASS

51:07.420 --> 51:08.420
本身就是字无串

51:08.420 --> 51:09.420
Type

51:09.420 --> 51:10.420
PASS

51:10.420 --> 51:12.420
本身就是字无串

51:12.420 --> 51:14.420
那么OK

51:14.420 --> 51:15.420
怎么办呢

51:15.420 --> 51:16.420
我直接给你返回

51:16.420 --> 51:17.420
PASS

51:17.420 --> 51:18.420
State

51:18.420 --> 51:19.420
直接给你返回就完事了

51:19.420 --> 51:20.420
返回一个对象结构就完事了

51:20.420 --> 51:21.420
就像这种情况

51:21.420 --> 51:22.420
你给我一个字无串

51:22.420 --> 51:23.420
和State

51:23.420 --> 51:24.420
这种结构

51:24.420 --> 51:25.420
就完事了

51:25.420 --> 51:26.420
好

51:26.420 --> 51:27.420
lcf

51:27.420 --> 51:28.420
如果说你给我的PASS

51:28.420 --> 51:30.420
是一个对象

51:33.420 --> 51:34.420
给我的PASS

51:34.420 --> 51:35.420
是一个对象

51:35.420 --> 51:37.420
那么怎么处理呢

51:37.420 --> 51:38.420
是不是要把对象

51:38.420 --> 51:39.420
一些属性取出来

51:39.420 --> 51:40.420
来进行分析

51:40.420 --> 51:41.420
对吧

51:41.420 --> 51:42.420
你给我的东西

51:42.420 --> 51:43.420
是一个对象的话

51:43.420 --> 51:44.420
我要进行分析

51:44.420 --> 51:45.420
好

51:45.420 --> 51:46.420
一个来

51:46.420 --> 51:47.420
那么我分析

51:47.420 --> 51:48.420
我最终是要

51:48.420 --> 51:49.420
得到一个PASS

51:49.420 --> 51:51.420
最终得到一个PASS

51:51.420 --> 51:52.420
就是我们这里

51:54.800 --> 51:56.800
PASS result

51:56.800 --> 51:58.800
那么先把它等于PASS there

51:58.800 --> 51:59.800
PASS name

51:59.800 --> 52:00.800
先把它等于PASS there

52:00.800 --> 52:01.800
PASS name

52:01.800 --> 52:02.800
就先把这个东西

52:02.800 --> 52:03.800
拼接进去

52:03.800 --> 52:04.800
好

52:04.800 --> 52:05.800
然后再拼接Search

52:05.800 --> 52:06.800
再拼接Search

52:06.800 --> 52:07.800
也就是我这里

52:07.800 --> 52:08.800
可以直接

52:08.800 --> 52:09.800
一个个加碼

52:09.800 --> 52:10.800
一个加碼

52:10.800 --> 52:11.800
PASS result

52:11.800 --> 52:12.800
再拼接一个什么

52:12.800 --> 52:13.800
PASS search

52:13.800 --> 52:15.800
再拼接PASS search

52:15.800 --> 52:16.800
好

52:16.800 --> 52:19.800
然后再拼接PASS result

52:19.800 --> 52:21.800
再拼接那个什么

52:21.800 --> 52:22.800
PASS there

52:23.800 --> 52:25.800
那个PASS

52:25.800 --> 52:26.800
PASS

52:26.800 --> 52:27.800
对吧

52:27.800 --> 52:28.800
然后最后返回

52:28.800 --> 52:29.800
返回什么

52:29.800 --> 52:30.800
PASS way

52:30.800 --> 52:31.800
PASS result

52:31.800 --> 52:32.800
然后那State

52:32.800 --> 52:33.800
对吧

52:33.800 --> 52:34.800
PASS

52:34.800 --> 52:36.800
State等于PASS.state

52:36.800 --> 52:37.800
对不对

52:37.800 --> 52:38.800
是这样吧

52:39.800 --> 52:40.800
没问题吧

52:41.800 --> 52:42.800
好

52:42.800 --> 52:43.800
那么但是这里

52:43.800 --> 52:44.800
有些细节你要注意

52:44.800 --> 52:45.800
因为这个Search

52:45.800 --> 52:46.800
和PASS

52:46.800 --> 52:47.800
它有可能没有给我传子

52:47.800 --> 52:48.800
对吧

52:48.800 --> 52:49.800
没有给我传子

52:49.800 --> 52:50.800
是不是要用空置无串

52:50.800 --> 52:51.800
写墨认值

52:51.800 --> 52:52.800
于是我们这里可以解构

52:52.800 --> 52:53.800
解构

52:54.800 --> 52:55.800
PASS

52:55.800 --> 52:56.800
就是

52:56.800 --> 52:57.800
Search

52:58.800 --> 52:59.800
什么

52:59.800 --> 53:00.800
HAS

53:00.800 --> 53:01.800
可以它进行解构

53:01.800 --> 53:03.800
解构就是

53:03.800 --> 53:04.800
PASS

53:05.800 --> 53:06.800
从PASS里面解构

53:06.800 --> 53:07.800
Search

53:07.800 --> 53:08.800
然后有个墨认值

53:08.800 --> 53:09.800
为空置无串

53:09.800 --> 53:10.800
HAS也有个墨认值

53:10.800 --> 53:11.800
为空置无串

53:11.800 --> 53:12.800
对不对

53:12.800 --> 53:13.800
什么可以解构

53:13.800 --> 53:14.800
对吧

53:14.800 --> 53:15.800
可以解构

53:15.800 --> 53:16.800
解构出来

53:16.800 --> 53:17.800
那么这样子

53:17.800 --> 53:18.800
哪怕你没有传地

53:18.800 --> 53:19.800
Search

53:19.800 --> 53:20.800
没有传地HAS

53:20.800 --> 53:25.800
不至于拼了一个

53:25.800 --> 53:26.800
还有一种情况

53:26.800 --> 53:27.800
当这些细节处理

53:27.800 --> 53:29.800
你可以自行去搞定

53:29.800 --> 53:30.800
还有一种情况

53:30.800 --> 53:31.800
就是Search

53:31.800 --> 53:32.800
它里边传了

53:32.800 --> 53:33.800
但是它传的是这个东西

53:33.800 --> 53:34.800
它没有加问号

53:34.800 --> 53:35.800
没有加问号

53:35.800 --> 53:37.800
实说你自己得把问号加上

53:37.800 --> 53:38.800
HAS没有加警号

53:38.800 --> 53:40.800
你是不是得把警号加上

53:40.800 --> 53:41.800
把这些细节处理

53:42.800 --> 53:43.800
我要不要写

53:44.800 --> 53:45.800
写吧

53:45.800 --> 53:46.800
写吧

53:46.800 --> 53:48.800
那我这里判断一下

53:48.800 --> 53:49.800
如果说Search

53:50.800 --> 53:51.800
它是个字符串

53:51.800 --> 53:52.800
对吧

53:53.800 --> 53:54.800
等于什么

53:54.800 --> 53:55.800
0

53:55.800 --> 53:57.800
就是它第一个地方的字符串

53:58.800 --> 53:59.800
不等于

53:59.800 --> 54:00.800
不等于什么

54:00.800 --> 54:01.800
不等于问号

54:02.800 --> 54:03.800
它不是一问号开头的

54:03.800 --> 54:04.800
那么Search

54:04.800 --> 54:05.800
是不是要加上

54:06.800 --> 54:08.800
是不是要等于一个问号

54:08.800 --> 54:09.800
给它凭借上一个问号

54:09.800 --> 54:10.800
加上Search

54:11.800 --> 54:12.800
这个没问题吧

54:12.800 --> 54:13.800
没问题吧

54:13.800 --> 54:14.800
它是

54:14.800 --> 54:15.800
它是常量

54:15.800 --> 54:16.800
不能是常量

54:16.800 --> 54:17.800
那么同样道理

54:17.800 --> 54:18.800
HAS这里

54:18.800 --> 54:19.800
HAS

54:19.800 --> 54:21.800
如果是一个

54:23.800 --> 54:24.800
一样的

54:24.800 --> 54:25.800
如果它第一个字符

54:26.800 --> 54:27.800
HAS的第一个字符

54:27.800 --> 54:29.800
它不是一个

54:31.800 --> 54:32.800
警号

54:32.800 --> 54:33.800
它不是一个警号

54:33.800 --> 54:34.800
那么我这里

54:34.800 --> 54:35.800
HAS是不是要加上警号

54:35.800 --> 54:36.800
对吧

54:37.800 --> 54:38.800
凭借上HAS

54:38.800 --> 54:39.800
这样子

54:39.800 --> 54:40.800
就把它格式处理正确

54:41.800 --> 54:42.800
你看

54:42.800 --> 54:43.800
这是字符串的情况

54:43.800 --> 54:44.800
这是Object的情况

54:44.800 --> 54:45.800
那还有其他情况

54:45.800 --> 54:46.800
你给我传一个函数据来

54:46.800 --> 54:47.800
那不行

54:47.800 --> 54:48.800
那我就报错了

54:48.800 --> 54:49.800
else就报错了

54:49.800 --> 54:50.800
so

54:50.800 --> 54:51.800
new一个Error

54:51.800 --> 54:52.800
type error

54:54.800 --> 54:55.800
错误消息就是

54:55.800 --> 54:56.800
PASS

54:56.800 --> 54:57.800
MUST

54:58.800 --> 54:59.800
B

54:59.800 --> 55:00.800
就是什么

55:00.800 --> 55:01.800
Stream

55:01.800 --> 55:02.800
All

55:02.800 --> 55:03.800
它必须是一个

55:03.800 --> 55:04.800
就是

55:04.800 --> 55:05.800
字符串

55:05.800 --> 55:06.800
或者是对象

55:06.800 --> 55:08.800
咱们给它写个错误信息

55:08.800 --> 55:09.800
因此

55:09.800 --> 55:10.800
有了这个函数辅助之后

55:10.800 --> 55:12.800
我们这里就简单多了

55:12.800 --> 55:13.800
HANDLE

55:13.800 --> 55:14.800
PASS and STATE

55:14.800 --> 55:15.800
PASS传进去

55:15.800 --> 55:16.800
STATE传进去

55:16.800 --> 55:17.800
两个传进去

55:18.800 --> 55:19.800
传进去过后

55:19.800 --> 55:20.800
是不是拿到一个信息

55:20.800 --> 55:21.800
对不对

55:21.800 --> 55:23.800
拿到一个PASS Info

55:24.800 --> 55:25.800
信息对象

55:25.800 --> 55:26.800
PASS Info

55:26.800 --> 55:27.800
咱们来看一下

55:27.800 --> 55:28.800
试一下

55:28.800 --> 55:30.800
打印出来试一下

55:30.800 --> 55:31.800
那么现在有了个PASS过后

55:31.800 --> 55:32.800
我们来看一下

55:32.800 --> 55:33.800
首先能不能转换的

55:33.800 --> 55:34.800
一种正确的格式

55:35.800 --> 55:36.800
这里我们

55:36.800 --> 55:38.800
调用MINE HISTORY

55:38.800 --> 55:39.800
就这个

55:39.800 --> 55:40.800
能保存到

55:40.800 --> 55:41.800
全具对象里面的

55:41.800 --> 55:42.800
MINE HISTORY

55:42.800 --> 55:44.800
调用MINE HISTORY的

55:44.800 --> 55:45.800
PASS

55:45.800 --> 55:47.800
给它传一个ABC

55:47.800 --> 55:49.800
STATE传一个123

55:49.800 --> 55:50.800
你看一下

55:50.800 --> 55:51.800
是不得到这个格式的

55:52.800 --> 55:53.800
对吧

55:53.800 --> 55:54.800
没问题吧

55:54.800 --> 55:55.800
如果说给它PASS的一个对象

55:55.800 --> 55:56.800
第一个传输是PASS的对象

55:56.800 --> 55:57.800
第二个传输

55:57.800 --> 55:58.800
它直接忽略掉了

55:59.800 --> 56:00.800
一个对象

56:00.800 --> 56:01.800
对象

56:01.800 --> 56:03.800
PASS NAME

56:03.800 --> 56:04.800
等于什么

56:04.800 --> 56:05.800
ABC

56:06.800 --> 56:07.800
然后

56:07.800 --> 56:08.800
SEARCH

56:08.800 --> 56:09.800
为了测试

56:09.800 --> 56:10.800
我就不写问号

56:10.800 --> 56:12.800
SEARCH等于AW1

56:12.800 --> 56:13.800
BW2

56:13.800 --> 56:14.800
SEARCH

56:14.800 --> 56:15.800
ABC

56:15.800 --> 56:16.800
等于

56:16.800 --> 56:17.800
随便写

56:17.800 --> 56:18.800
然后

56:18.800 --> 56:19.800
你看一下

56:19.800 --> 56:20.800
STATE

56:20.800 --> 56:21.800
为了测试

56:21.800 --> 56:22.800
忽略掉个传输

56:22.800 --> 56:23.800
PASS等于这个

56:24.800 --> 56:25.800
等一下

56:25.800 --> 56:26.800
我的问号

56:26.800 --> 56:28.800
我的问号是哪去了

56:28.800 --> 56:29.800
我看一下

56:31.800 --> 56:32.800
我的问号

56:36.800 --> 56:37.800
我的问号

56:38.800 --> 56:39.800
上面

56:39.800 --> 56:40.800
这

56:41.800 --> 56:42.800
我这里要凭决SEARCH

56:42.800 --> 56:43.800
凭决SEARCH

56:44.800 --> 56:45.800
凭决HASS

56:47.800 --> 56:48.800
看一下

56:48.800 --> 56:52.560
再加一个STATE

56:54.560 --> 56:55.560
为一个数字

56:55.560 --> 56:56.560
随便写

56:57.560 --> 56:58.560
你看一下

56:58.560 --> 56:59.560
PASS不出来了

56:59.560 --> 57:00.560
对吧

57:00.560 --> 57:01.560
这是我们要搞定的事情

57:01.560 --> 57:02.560
要搞定的事情

57:02.560 --> 57:03.560
这就是

57:03.560 --> 57:04.560
搞定了

57:04.560 --> 57:05.560
好

57:05.560 --> 57:06.560
那么这个东西

57:06.560 --> 57:07.560
加上去过后

57:07.560 --> 57:08.560
加上去过后

57:08.560 --> 57:10.560
那么现在

57:10.560 --> 57:11.560
我们要

57:11.560 --> 57:13.560
要进行挑转了

57:13.560 --> 57:15.560
那么这个得到了一个PASS

57:15.560 --> 57:16.560
这个对象里面的PASS地址

57:16.560 --> 57:18.560
是不是就是直接是我们的挑转地址

57:18.560 --> 57:20.560
是不是我们的挑转地址

57:20.560 --> 57:21.560
你好好想想

57:21.560 --> 57:23.560
是不是我们的挑转地址

57:23.560 --> 57:24.560
还不是

57:24.560 --> 57:26.560
你是不是还在加上BASSNAME

57:26.560 --> 57:28.560
所以还在加上BASSNAME

57:28.560 --> 57:29.560
对不对

57:29.560 --> 57:31.560
所以说这一块我们还要加上BASSNAME

57:31.560 --> 57:32.560
这一块

57:32.560 --> 57:34.560
就是把PASSINFO里面的

57:34.560 --> 57:36.560
什么PASS属性

57:36.560 --> 57:37.560
还要拼接上

57:37.560 --> 57:39.560
拼接上前面的BASSNAME

57:39.560 --> 57:40.560
BASSNAME

57:40.560 --> 57:42.560
然后再拼接PASSINFO

57:43.560 --> 57:44.560
好

57:44.560 --> 57:46.560
这才是我们最重要挑转的地址

57:46.560 --> 57:48.560
这才是我们最重要挑转的地址

57:48.560 --> 57:49.560
再看一下

57:49.560 --> 57:50.560
PASSINFO

57:51.560 --> 57:52.560
就是我们

57:52.560 --> 57:53.560
PUSH的时候

57:53.560 --> 57:54.560
写的是ABC

57:54.560 --> 57:55.560
但是

57:55.560 --> 57:56.560
诶

57:56.560 --> 57:58.940
PASS

57:58.940 --> 57:59.940
改过了吗

57:59.940 --> 58:00.940
哦

58:00.940 --> 58:01.940
BASSNAME

58:01.940 --> 58:02.940
我没写

58:02.940 --> 58:03.940
那比方说

58:03.940 --> 58:04.940
该写个BASSNAME

58:04.940 --> 58:05.940
该配置一下

58:05.940 --> 58:06.940
BASSNAME

58:07.940 --> 58:08.940
该配置一个

58:08.940 --> 58:09.940
写缸6是吗

58:09.940 --> 58:10.940
好

58:10.940 --> 58:11.940
保存

58:11.940 --> 58:12.940
那么现在我们看一下

58:12.940 --> 58:13.940
这样子

58:13.940 --> 58:14.940
PUSH过后

58:14.940 --> 58:15.940
你看PASS是不得到的是

58:15.940 --> 58:16.940
前面就加上了

58:16.940 --> 58:17.940
BASSNAME就加上了

58:17.940 --> 58:18.940
对不对

58:18.940 --> 58:19.940
不要忘的

58:19.940 --> 58:20.940
不要忘了BASSNAME

58:20.940 --> 58:21.940
好

58:21.940 --> 58:23.940
那么其实也可以把BASSNAME

58:23.940 --> 58:24.940
传到这来

58:24.940 --> 58:25.940
传到这来

58:25.940 --> 58:26.940
它来进行处理

58:26.940 --> 58:27.940
BASSNAME

58:27.940 --> 58:28.940
也行

58:28.940 --> 58:29.940
也行

58:29.940 --> 58:30.940
那么这里

58:30.940 --> 58:31.940
这就直接加上了

58:31.940 --> 58:32.940
直接拼接上了BASSNAME

58:32.940 --> 58:34.940
这就是BASSNAME拼接上

58:34.940 --> 58:35.940
PASSNAME

58:35.940 --> 58:36.940
对吧

58:36.940 --> 58:37.940
直接拼接上了

58:37.940 --> 58:38.940
那么这里

58:38.940 --> 58:39.940
就该传过去就行了

58:39.940 --> 58:41.940
把BASSNAME传过去就行了

58:45.210 --> 58:46.210
传过去就完了

58:46.210 --> 58:47.210
保存

58:48.210 --> 58:49.210
看一下

58:49.210 --> 58:50.210
对吧

58:50.210 --> 58:51.210
所以BASSNAME传过去

58:51.210 --> 58:52.210
传过去就完了

58:52.210 --> 58:53.210
于是

58:53.210 --> 58:55.210
我们通过这个辅助函数

58:55.210 --> 58:57.210
来得到了一个路径的信息

58:57.210 --> 58:58.210
接下来我们是要挑转了

58:58.210 --> 58:59.210
好

58:59.210 --> 59:01.210
这里挑转有两种方式

59:01.210 --> 59:03.210
第一种是要强制刷新的方式

59:03.210 --> 59:04.210
看了没

59:04.210 --> 59:05.210
这是要强制刷新

59:05.210 --> 59:07.210
强制刷新是最简单的

59:07.210 --> 59:10.210
如果说FORCE REFRESH

59:10.210 --> 59:12.210
如果说强制刷新

59:12.210 --> 59:14.210
强制刷新

59:14.210 --> 59:15.210
强制刷新要刷新页面

59:15.210 --> 59:16.210
一切都要重来

59:16.210 --> 59:18.210
这个是最简单的

59:18.210 --> 59:19.210
做什么呢

59:19.210 --> 59:20.210
一句话就写完了

59:20.210 --> 59:22.210
LOCATION REFRESH

59:22.210 --> 59:23.210
就是一个地址跳转

59:23.210 --> 59:24.210
跳转到哪

59:24.210 --> 59:26.210
跳转到PASSINFOR

59:26.210 --> 59:32.210
就是PASS

59:32.210 --> 59:34.210
直接把PASS传过去

59:34.210 --> 59:36.210
这就强制刷新了

59:36.210 --> 59:37.210
对不对

59:37.210 --> 59:38.210
没问题吧

59:38.210 --> 59:41.710
但是这样子一来的话

59:41.710 --> 59:43.710
它会导致另外一个问题

59:43.710 --> 59:45.710
就是

59:45.710 --> 59:46.710
你看着吧

59:46.710 --> 59:47.710
State不见了

59:47.710 --> 59:48.710
你这样子的话

59:48.710 --> 59:50.710
会导致State不见了

59:50.710 --> 59:51.710
你看着吧

59:51.710 --> 59:52.710
咱们来

59:52.710 --> 59:54.710
PUSH一个强制刷新

59:54.710 --> 59:55.710
强制刷新

59:55.710 --> 59:57.710
我们这里把设为强制刷新

59:57.710 --> 59:59.710
FORCE REFRESH

59:59.710 --> 01:00:01.710
把设为强制刷新

01:00:01.710 --> 01:00:02.710
好 来看一下吧

01:00:02.710 --> 01:00:04.710
咱们PUSH一个

01:00:04.710 --> 01:00:07.710
My History PUSH

01:00:07.710 --> 01:00:09.710
斜杠ABC

01:00:09.710 --> 01:00:11.710
然后给它一个状态

01:00:12.710 --> 01:00:14.710
你看 是不是强制刷新了

01:00:14.710 --> 01:00:15.710
然后来看一下WINDOW

01:00:15.710 --> 01:00:16.710
第二HISTORY里边

01:00:16.710 --> 01:00:17.710
第二State里边

01:00:17.710 --> 01:00:18.710
看有没有数据

01:00:18.710 --> 01:00:19.710
是不是闹

01:00:19.710 --> 01:00:20.710
它状态丢失了

01:00:20.710 --> 01:00:22.710
就会导致我们给的

01:00:22.710 --> 01:00:23.710
它状态没有

01:00:23.710 --> 01:00:24.710
My History里边

01:00:24.710 --> 01:00:25.710
它肯定是

01:00:25.710 --> 01:00:27.710
LOOKATION里边

01:00:27.710 --> 01:00:29.710
LOOKATION里边也没有状态

01:00:29.710 --> 01:00:31.710
因为浏览器里边没状态

01:00:31.710 --> 01:00:33.710
它里边自然没

01:00:33.710 --> 01:00:35.710
My History

01:00:35.710 --> 01:00:37.710
LOOKATION我写错了吗

01:00:37.710 --> 01:00:41.730
为什么拿不到东西呢

01:00:41.730 --> 01:00:45.420
LOOKATION

01:00:45.420 --> 01:00:47.420
LOOKATION为什么是undefined

01:00:47.420 --> 01:00:49.420
咱们来看一下吧

01:00:49.420 --> 01:00:51.420
LOOKATION它为什么是undefined

01:00:53.420 --> 01:00:58.980
这里打个DBUG

01:00:58.980 --> 01:01:00.980
看一下它为什么是undefined

01:01:00.980 --> 01:01:02.980
WINDOW点LOOKATION

01:01:02.980 --> 01:01:03.980
PASS NAME

01:01:03.980 --> 01:01:08.700
对了 没问题

01:01:08.700 --> 01:01:10.700
LOOKATION是有对象的

01:01:10.700 --> 01:01:11.700
是有对象的

01:01:11.700 --> 01:01:17.060
发挥这里

01:01:17.060 --> 01:01:19.430
可以了

01:01:20.430 --> 01:01:22.430
我们看一下My History

01:01:22.430 --> 01:01:23.430
对象

01:01:23.430 --> 01:01:25.430
里边LOOKATION

01:01:25.430 --> 01:01:27.430
LOOKATION我

01:01:27.430 --> 01:01:28.430
单词写错了

01:01:28.430 --> 01:01:30.430
LOOKATION

01:01:30.430 --> 01:01:32.430
它是有值的

01:01:32.430 --> 01:01:34.430
把DBUG去掉

01:01:34.430 --> 01:01:39.630
单词写错了

01:01:39.630 --> 01:01:41.630
然后再刷新一下

01:01:41.630 --> 01:01:43.630
强制刷新过后

01:01:43.630 --> 01:01:45.630
我们会发现My History里边的LOOKATION

01:01:45.630 --> 01:01:47.630
LOOKATION里边没有状态

01:01:47.630 --> 01:01:49.630
State 状态没有

01:01:49.630 --> 01:01:50.630
没有状态

01:01:50.630 --> 01:01:52.630
所以说我们这里直接挑转得到

01:01:52.630 --> 01:01:54.630
因为它刷新的直接挑转到

01:01:54.630 --> 01:01:55.630
没有什么问题

01:01:55.630 --> 01:01:57.630
当然我们也可以用Renold来直接挑转

01:01:57.630 --> 01:01:58.630
没有什么问题

01:01:58.630 --> 01:02:00.630
但是会导致状态丢失

01:02:00.630 --> 01:02:01.630
会导致状态丢失

01:02:01.630 --> 01:02:02.630
那怎么办呢

01:02:02.630 --> 01:02:03.630
我们可以用这种方式

01:02:03.630 --> 01:02:05.630
我先把历史记录给你加上

01:02:05.630 --> 01:02:07.630
把状态的一些给你加上

01:02:07.630 --> 01:02:08.630
然后再强制刷新

01:02:08.630 --> 01:02:10.630
这状态就保留了

01:02:10.630 --> 01:02:13.630
咱们先给它把历史记录加上

01:02:13.630 --> 01:02:14.630
怎么加历史记录呢

01:02:14.630 --> 01:02:16.630
我们可以用这种方式

01:02:16.630 --> 01:02:17.630
加历史记录

01:02:17.630 --> 01:02:19.630
我们就用这种

01:02:22.940 --> 01:02:23.940
WINDOW

01:02:24.940 --> 01:02:25.940
PUSH STATE

01:02:25.940 --> 01:02:27.940
它有个PUSH STATE的方法

01:02:27.940 --> 01:02:28.940
然后数据

01:02:28.940 --> 01:02:30.940
数据是不是就状态

01:02:30.940 --> 01:02:32.940
但是我们不能直接抓加个状态

01:02:32.940 --> 01:02:33.940
我们应该做什么呢

01:02:33.940 --> 01:02:34.940
应该给它一个对象

01:02:34.940 --> 01:02:36.940
对象里面有KEYS

01:02:36.940 --> 01:02:37.940
KEYS我们以后再写

01:02:37.940 --> 01:02:39.940
还有个State

01:02:39.940 --> 01:02:41.940
按照我们之前说的

01:02:41.940 --> 01:02:42.940
我们使用我们的PUSH方法

01:02:42.940 --> 01:02:44.940
我们不能直接覆盖这个状态

01:02:44.940 --> 01:02:46.940
我们要把它放到State里面

01:02:46.940 --> 01:02:47.940
State里面等于什么呢

01:02:47.940 --> 01:02:48.940
就是我们的State

01:02:48.940 --> 01:02:50.940
就是我们的PASS

01:02:50.940 --> 01:02:52.940
INFO里面的State

01:02:52.940 --> 01:02:53.940
对吧

01:02:53.940 --> 01:02:55.940
把这个加上

01:02:55.940 --> 01:02:56.940
PUSH STATE

01:02:56.940 --> 01:02:58.940
第一个就是参数

01:02:58.940 --> 01:02:59.940
状态

01:02:59.940 --> 01:03:00.940
第二个参数是表体

01:03:00.940 --> 01:03:01.940
表体没用

01:03:01.940 --> 01:03:02.940
第三个参数是地

01:03:02.940 --> 01:03:03.940
地址

01:03:03.940 --> 01:03:04.940
地址的话

01:03:04.940 --> 01:03:05.940
我们就用PASS INFO

01:03:05.940 --> 01:03:06.940
第二是PASS

01:03:06.940 --> 01:03:08.940
我们先把这个状态加上

01:03:08.940 --> 01:03:09.940
然后再刷新

01:03:09.940 --> 01:03:10.940
你看一下

01:03:10.940 --> 01:03:11.940
现在没问题了

01:03:11.940 --> 01:03:12.940
保存

01:03:13.940 --> 01:03:14.940
这里

01:03:14.940 --> 01:03:16.940
我们PUSH一个

01:03:16.940 --> 01:03:17.940
PUSH

01:03:17.940 --> 01:03:18.940
刷新了

01:03:18.940 --> 01:03:20.940
然后我们再来看

01:03:20.940 --> 01:03:21.940
WINDOW

01:03:21.940 --> 01:03:22.940
State

01:03:22.940 --> 01:03:23.940
你看是有值的

01:03:23.940 --> 01:03:24.940
对吧

01:03:24.940 --> 01:03:25.940
有值的

01:03:25.940 --> 01:03:26.940
咱们再看一下

01:03:26.940 --> 01:03:28.940
再看一下我们My History的

01:03:28.940 --> 01:03:29.940
location

01:03:29.940 --> 01:03:30.940
你看

01:03:30.940 --> 01:03:31.940
location

01:03:31.940 --> 01:03:32.940
State里面是有值的

01:03:32.940 --> 01:03:33.940
对吧

01:03:33.940 --> 01:03:34.940
我们就用这种方式来强制刷新

01:03:34.940 --> 01:03:36.940
当然你不只强制刷新的话

01:03:36.940 --> 01:03:37.940
那就无所谓了

01:03:37.940 --> 01:03:39.940
强制刷新就多了这么一句话

01:03:39.940 --> 01:03:40.940
就多了这么一句话

01:03:42.940 --> 01:03:43.940
好

01:03:43.940 --> 01:03:44.940
那么现在PUSH

01:03:44.940 --> 01:03:45.940
是不是大体上都已经搞定了

01:03:45.940 --> 01:03:46.940
大体上已经搞定了

01:03:46.940 --> 01:03:48.940
那么现在还要一些细节问题

01:03:48.940 --> 01:03:49.940
要解决

01:03:50.940 --> 01:03:51.940
keyz需要解决这个问题

01:03:51.940 --> 01:03:52.940
那么keyz

01:03:52.940 --> 01:03:53.940
产生一个keyz

01:03:53.940 --> 01:03:54.940
就是一个随机制服串

01:03:54.940 --> 01:03:56.940
那么我们这里就写这么一个函数

01:03:57.940 --> 01:03:59.940
来辅助来产生个keyz

01:03:59.940 --> 01:04:00.940
crease key

01:04:00.940 --> 01:04:01.940
crease key

01:04:01.940 --> 01:04:02.940
你给我传一个什么呢

01:04:02.940 --> 01:04:04.940
传一个keynance进来

01:04:04.940 --> 01:04:06.940
给我传一个keyz的长度进来

01:04:06.940 --> 01:04:07.940
那么我来给产生一个

01:04:07.940 --> 01:04:09.940
指定长度的keyz

01:04:09.940 --> 01:04:12.940
产生一个指定

01:04:12.940 --> 01:04:15.940
长度的随机制服串

01:04:15.940 --> 01:04:16.940
这个随机制服串里边

01:04:16.940 --> 01:04:18.940
随机制服串中

01:04:18.940 --> 01:04:22.940
可以包含数字和字母

01:04:23.940 --> 01:04:25.940
可以包含数字和字母

01:04:25.940 --> 01:04:26.940
那么这种做法

01:04:26.940 --> 01:04:28.940
这种产生一个随机制服串

01:04:28.940 --> 01:04:30.940
一个指定长度的随机制服串做法

01:04:30.940 --> 01:04:32.940
我不知道大家以前有没有接触过

01:04:32.940 --> 01:04:33.940
其实非常非常简单

01:04:33.940 --> 01:04:35.940
我给大家在这里写一下吧

01:04:36.940 --> 01:04:37.940
它做法是这样子

01:04:37.940 --> 01:04:38.940
max.radon

01:04:38.940 --> 01:04:40.940
直接产生一个就是随机数

01:04:40.940 --> 01:04:42.940
产生一个随机数

01:04:43.940 --> 01:04:45.940
我们把它保存到这个Lumber里边吧

01:04:46.940 --> 01:04:47.940
max.radon

01:04:47.940 --> 01:04:49.940
产生一个随机数

01:04:49.940 --> 01:04:52.940
然后把这个随机数转换成

01:04:52.940 --> 01:04:54.940
因为它包含字母和包含数字

01:04:54.940 --> 01:04:57.940
26个英文字母加上10个数字

01:04:57.940 --> 01:04:58.940
是不是有36个

01:04:58.940 --> 01:04:59.940
一共有36个制服

01:04:59.940 --> 01:05:01.940
我们把它用突视菌

01:05:01.940 --> 01:05:03.940
把它转换成36进字

01:05:03.940 --> 01:05:05.940
突视菌里边这个数字表示进字

01:05:05.940 --> 01:05:07.940
把这个数字变成一个字

01:05:07.940 --> 01:05:09.940
变成一个指定进字的一个制服串

01:05:10.940 --> 01:05:11.940
就变成这个样子了

01:05:11.940 --> 01:05:15.940
然后我们再从substune

01:05:18.940 --> 01:05:20.940
从第2个位置开始取

01:05:20.940 --> 01:05:22.940
去掉前面的0和2

01:05:22.940 --> 01:05:23.940
从第2个位置开始取

01:05:23.940 --> 01:05:24.940
取多少长度呢

01:05:24.940 --> 01:05:26.940
长度是不是指定长度

01:05:26.940 --> 01:05:27.940
比方说取6个

01:05:27.940 --> 01:05:28.940
取6个长度是不是这个

01:05:28.940 --> 01:05:29.940
对吧

01:05:29.940 --> 01:05:30.940
它就是这样做的

01:05:30.940 --> 01:05:31.940
非常非常简单

01:05:31.940 --> 01:05:33.940
所以说我们这里直接返回就完事了

01:05:33.940 --> 01:05:34.940
直接返回

01:05:34.940 --> 01:05:35.940
max.radon

01:05:35.940 --> 01:05:36.940
产生个随机字不错

01:05:36.940 --> 01:05:38.940
然后产生个随机数

01:05:38.940 --> 01:05:40.940
然后把它转换成36进字

01:05:40.940 --> 01:05:42.940
因为36进字就刚好包含

01:05:42.940 --> 01:05:43.940
数字和字母

01:05:43.940 --> 01:05:44.940
对不对

01:05:44.940 --> 01:05:45.940
所有的字母和数字的数字

01:05:46.940 --> 01:05:47.940
然后36进字

01:05:47.940 --> 01:05:49.940
然后大家用substune

01:05:50.940 --> 01:05:51.940
从第2个位置开始取

01:05:51.940 --> 01:05:52.940
取多少长呢

01:05:52.940 --> 01:05:53.940
keynance

01:05:53.940 --> 01:05:54.940
就完了

01:05:54.940 --> 01:05:55.940
就完了

01:05:56.940 --> 01:05:57.940
好

01:05:57.940 --> 01:05:58.940
那么有这个函数之后

01:05:58.940 --> 01:05:59.940
我们这里

01:05:59.940 --> 01:06:00.940
这个key

01:06:02.940 --> 01:06:03.940
这个key

01:06:03.940 --> 01:06:04.940
是不是可以写

01:06:04.940 --> 01:06:05.940
create key

01:06:05.940 --> 01:06:06.940
create key

01:06:06.940 --> 01:06:07.940
然后长度是多少

01:06:07.940 --> 01:06:08.940
长度是

01:06:08.940 --> 01:06:10.940
来自于keynance

01:06:10.940 --> 01:06:11.940
上面解构出来的

01:06:11.940 --> 01:06:13.940
keynance

01:06:13.940 --> 01:06:14.940
进去点配置

01:06:14.940 --> 01:06:16.940
给它写个key

01:06:16.940 --> 01:06:17.940
好 没了

01:06:17.940 --> 01:06:18.940
咱们再看

01:06:20.940 --> 01:06:22.940
这里我们使用myhistory

01:06:22.940 --> 01:06:23.940
push

01:06:24.940 --> 01:06:25.940
又来一个

01:06:25.940 --> 01:06:26.940
又来一个

01:06:26.940 --> 01:06:27.940
push过后

01:06:27.940 --> 01:06:28.940
然后咱们来看一下

01:06:28.940 --> 01:06:29.940
myhistory

01:06:29.940 --> 01:06:30.940
window

01:06:30.940 --> 01:06:31.940
第二history

01:06:31.940 --> 01:06:32.940
就向到state

01:06:32.940 --> 01:06:33.940
看一下

01:06:33.940 --> 01:06:34.940
你看keyz是不是有了

01:06:34.940 --> 01:06:35.940
state是不是有了

01:06:35.940 --> 01:06:36.940
对不对

01:06:36.940 --> 01:06:37.940
然后myhistory里边的location

01:06:37.940 --> 01:06:38.940
肯定是对应的

01:06:38.940 --> 01:06:39.940
看没

01:06:39.940 --> 01:06:40.940
state

01:06:40.940 --> 01:06:41.940
对吧

01:06:41.940 --> 01:06:42.940
没问题了

01:06:42.940 --> 01:06:43.940
好

01:06:43.940 --> 01:06:44.940
那么还有一个细节

01:06:44.940 --> 01:06:45.940
还有一个细节是什么

01:06:45.940 --> 01:06:46.940
你push过后

01:06:46.940 --> 01:06:47.940
是不是要改变action

01:06:48.940 --> 01:06:49.940
什么改变action的值

01:06:49.940 --> 01:06:50.940
对吧

01:06:50.940 --> 01:06:51.940
action的值要变成push

01:06:51.940 --> 01:06:52.940
对不对

01:06:52.940 --> 01:06:54.940
那么当前对象的action只要变

01:06:54.940 --> 01:06:56.940
那我们现在是不是要改变action

01:06:56.940 --> 01:06:58.940
改变action

01:06:58.940 --> 01:06:59.940
对不对

01:06:59.940 --> 01:07:00.940
好 那么要改变action的话

01:07:00.940 --> 01:07:02.940
那我是不要控制对象

01:07:02.940 --> 01:07:03.940
给对象属性重新复制

01:07:03.940 --> 01:07:04.940
对不对

01:07:04.940 --> 01:07:05.940
给对象重新复制

01:07:05.940 --> 01:07:07.940
好 那这里怎么办呢

01:07:07.940 --> 01:07:09.940
这里我就先把对象保存起来

01:07:09.940 --> 01:07:11.940
先把对象保存起来

01:07:11.940 --> 01:07:12.940
保存到这

01:07:12.940 --> 01:07:14.940
好 然后这里返回这个对象

01:07:14.940 --> 01:07:15.940
这个还不简单

01:07:15.940 --> 01:07:17.940
返回这个对象

01:07:17.940 --> 01:07:18.940
就完了

01:07:18.940 --> 01:07:20.940
然后这里边我们就可以改变

01:07:20.940 --> 01:07:21.940
改变action

01:07:21.940 --> 01:07:22.940
history

01:07:22.940 --> 01:07:23.940
等于什么

01:07:23.940 --> 01:07:24.940
等于push

01:07:24.940 --> 01:07:25.940
push

01:07:25.940 --> 01:07:26.940
对吧

01:07:26.940 --> 01:07:27.940
好 保存

01:07:27.940 --> 01:07:28.940
看一下

01:07:28.940 --> 01:07:29.940
那么现在

01:07:29.940 --> 01:07:31.940
我们push一个

01:07:31.940 --> 01:07:33.940
然后现在看一下myhistory

01:07:34.940 --> 01:07:36.940
action的值是不是变了

01:07:36.940 --> 01:07:37.940
对不对

01:07:37.940 --> 01:07:38.940
然后我们再push一个

01:07:38.940 --> 01:07:39.940
push一个

01:07:39.940 --> 01:07:40.940
123

01:07:40.940 --> 01:07:42.940
然后看一下myhistory

01:07:42.940 --> 01:07:44.940
action的值是不是变了

01:07:44.940 --> 01:07:45.940
对吧

01:07:45.940 --> 01:07:47.940
这就是push的操作

01:07:47.940 --> 01:07:48.940
push的操作

01:07:48.940 --> 01:07:50.940
没问题吧

01:07:50.940 --> 01:07:52.940
好 那么push的操作写好了

01:07:52.940 --> 01:07:53.940
我们后边是不是可以写

01:07:53.940 --> 01:07:55.940
同样的道理写replace

01:07:55.940 --> 01:07:56.940
这一课时间有点长了

01:07:56.940 --> 01:07:58.940
把它分成多解课

01:07:58.940 --> 01:07:59.940
分成下解课

01:07:59.940 --> 01:08:01.940
下解课再来讲后边的东西

