WEBVTT

00:00.880 --> 00:05.880
至此呢 咱们就已经写了那个history了啊

00:05.880 --> 00:08.880
因为那两节课呢 是扩展课程

00:08.880 --> 00:12.880
所以说呢 有些同学可能没有听 没有听的话没关系啊

00:12.880 --> 00:17.880
就是说如果你自己啊 觉得这一块听着很老火或者说你压根没有时间听

00:17.880 --> 00:22.880
那么你就直接使用第三方的cool history 用法完全一样

00:22.880 --> 00:25.880
因为咱们写这个history呢 也只写了一个方法

00:25.880 --> 00:29.880
就是这个create browser history 这个方法 对吧 只写了这么一个方法

00:29.880 --> 00:32.880
其他方法也没有写 那么到时候我们测试的时候呢

00:32.880 --> 00:36.880
也可能会用直接使用第三方cool 就是这个history的那个cool

00:36.880 --> 00:40.880
或者是呢 我们也可能会用这个东西 但是都一样的啊 都一样的

00:40.880 --> 00:42.880
就是如果说你没有听那两节扩展课程的话

00:42.880 --> 00:46.880
那后边呢 你在测试的时候呢 你可以直接使用第三方cool

00:46.880 --> 00:49.880
但是你是直接拿我的元代吧 使用这个研询啊

00:49.880 --> 00:51.880
因为功能完全一样

00:51.880 --> 00:54.880
好 那么咱们有现在就有了哪些东西了

00:54.880 --> 00:58.880
所以你可以匹配march对象了 对吧 能够拿到一个march对象

00:59.880 --> 01:01.880
也能够得到一个history的

01:01.880 --> 01:05.880
history对象有了 march对象有了 那么location对象是不是出来了

01:05.880 --> 01:09.880
location对象就在history里面 怎么这么绕口啊

01:09.880 --> 01:13.880
那么也就是说上下文里边的东西我们都能够得到了

01:13.880 --> 01:16.880
接下来咱们就开始写组件了

01:16.880 --> 01:20.880
你会发现这些东西有了之后 组件特别特别好写

01:20.880 --> 01:23.880
真的是非常轻松 非常愉快的事情

01:23.880 --> 01:25.880
咱们来看一下吧

01:25.880 --> 01:28.880
rex那个rex里边

01:31.880 --> 01:33.880
rex rota动物里边

01:33.880 --> 01:36.880
它给你提供了什么 browser rota的吧

01:36.880 --> 01:39.880
那么这些课呢 我们来看一下 browser rota做了什么事

01:39.880 --> 01:42.880
我们这里呢 先不用把它改别名 不用改别名

01:42.880 --> 01:45.880
这样子大家区分出来了 好区分一点

01:45.880 --> 01:47.880
我们来看一下 browser rota做了什么事

01:47.880 --> 01:50.880
好 然后我们在一面上去看一下啊 右键检查

01:50.880 --> 01:53.880
这里有一个rex分析

01:53.880 --> 01:56.880
组件结构一开始是跟组件app 这个没什么说的

01:56.880 --> 01:59.880
然后一个browser rota 是不是我们这里写了个组件

01:59.880 --> 02:01.880
我们来看一下这个组件做了什么事呢

02:01.880 --> 02:03.880
这个组件里边我没有给它任何属性

02:03.880 --> 02:05.880
没有给它任何的属性

02:05.880 --> 02:08.880
然后也没有就是

02:08.880 --> 02:10.880
没有给它任何的属性

02:10.880 --> 02:13.880
然后它里边也没有任何的状态 对吧

02:13.880 --> 02:15.880
但是这个组件里边你会发现它有个值组件

02:15.880 --> 02:18.880
它给你生成了一个值组件 叫rotar组件

02:18.880 --> 02:21.880
这个rotar组件传的一个属性过来

02:21.880 --> 02:24.880
是History这个属性 这个属性你展开看一下

02:24.880 --> 02:28.880
这是咋 这是我们刚刚写的History第三方库的东西

02:28.880 --> 02:30.880
也包括我们自己熟悉的东西

02:30.880 --> 02:34.880
也就是说这个rotar组件它需要一个属性叫History

02:34.880 --> 02:37.880
这个History是谁传给它的呢 是这个browser rota传给它的

02:37.880 --> 02:39.880
对吧 是这么个意思

02:39.880 --> 02:41.880
好 那么这个rotar组件里边它还有一个状态

02:41.880 --> 02:43.880
状态就是把History这个

02:43.880 --> 02:46.880
就是把nok应该提出来了 就是这个意思

02:46.880 --> 02:48.880
把nok应提出来了 作为它的状态

02:48.880 --> 02:50.880
后面就是这么个意思

02:50.880 --> 02:52.880
然后呢 它里边有啥呢

02:52.880 --> 02:54.880
它里边就是个上下文的

02:54.880 --> 02:55.880
就是个上下文

02:55.880 --> 02:57.880
所以说我们看到这个组件结构呢

02:57.880 --> 02:58.880
你看里边就没东西了 对吧

02:58.880 --> 03:00.880
那么我们看到这个组件结构

03:00.880 --> 03:02.880
这个上下文里边你看 是不是就是三个东西

03:02.880 --> 03:03.880
对吧

03:03.880 --> 03:05.880
那么我们看到这个组件结构呢 就知道了

03:05.880 --> 03:07.880
哎 它大概是怎么回事呢

03:07.880 --> 03:09.880
来 又来一个ppt画一下

03:09.880 --> 03:11.880
大概是怎么回事

03:11.880 --> 03:15.880
就是说呢 它现在是这么一种结构

03:16.880 --> 03:19.880
这一块呢 它有一个组件叫做rotar组件

03:20.880 --> 03:22.880
这个rotar组件做什么事呢

03:22.880 --> 03:24.880
它就是来提供上下文的

03:24.880 --> 03:26.880
它是用于提供上下文

03:29.880 --> 03:34.880
这个rotar组件 它是用于提供上下文

03:34.880 --> 03:36.880
这上下文里边有一些数据 对吧

03:36.880 --> 03:38.880
跟路由相关的一些重要信息

03:38.880 --> 03:39.880
它把它放到上下文里边

03:39.880 --> 03:40.880
它的主要重点就是做这个

03:40.880 --> 03:42.880
它就是来提供上下文的

03:42.880 --> 03:43.880
那么上下文在哪呢

03:43.880 --> 03:47.880
上下文里边就是rotar

03:47.880 --> 03:49.880
rotar.provider 对吧

03:49.880 --> 03:51.880
上下文 第二

03:51.880 --> 03:53.880
provider 对不对

03:53.880 --> 03:54.880
就是这个上下文

03:54.880 --> 03:56.880
它的主要目的是为了来提供上下文

03:56.880 --> 03:59.880
那么要提供上下文里边的东西的话

03:59.880 --> 04:02.880
那么最重要的是需要一个history属性

04:02.880 --> 04:04.880
对吧 它需要一个history属性

04:04.880 --> 04:06.880
那么它的属性呢 其中一个属性

04:06.880 --> 04:08.880
我再画个狂框

04:09.880 --> 04:11.880
它其中一个属性呢 叫做history

04:11.880 --> 04:13.880
它需要这么一个属性

04:13.880 --> 04:15.880
那么这个属性呢 它是不知道的

04:15.880 --> 04:17.880
为什么 因为它的作用很单纯

04:17.880 --> 04:19.880
它就是来提供一个上下文 其他的不管

04:19.880 --> 04:21.880
但是这个history到底来自于哪呢

04:21.880 --> 04:22.880
到底是哈希history

04:22.880 --> 04:24.880
还是browser history

04:24.880 --> 04:25.880
还是memory history

04:25.880 --> 04:26.880
我不管

04:26.880 --> 04:27.880
我不管

04:27.880 --> 04:29.880
你只要把history给我就行了

04:29.880 --> 04:32.880
因为history的APS是统一的

04:32.880 --> 04:35.880
所以说我就不用去管你到底是什么history

04:35.880 --> 04:36.880
你给我就行了

04:36.880 --> 04:37.880
明白这个意思吗

04:37.880 --> 04:38.880
这是rotar组件中的事

04:38.880 --> 04:40.880
那么这个history是谁传给它的呢

04:40.880 --> 04:42.880
是要通过这些组件来传给它

04:42.880 --> 04:44.880
就是什么

04:44.880 --> 04:47.880
像这个组件 browser history

04:47.880 --> 04:48.880
那么这个组件的作用

04:48.880 --> 04:52.880
它的作用就是用于创建

04:52.880 --> 04:54.880
创建什么

04:54.880 --> 04:55.880
history

04:55.880 --> 04:58.880
它的作用就是创建一个browser history

04:58.880 --> 05:00.880
这个browser rotor

05:00.880 --> 05:01.880
这个组件

05:01.880 --> 05:02.880
browser rotor

05:02.880 --> 05:06.900
它的作用就是我们之前平时

05:06.900 --> 05:08.900
经常用的browser rotor

05:08.900 --> 05:10.900
它的作用其实很单纯

05:10.900 --> 05:11.900
就是创建一个history

05:11.900 --> 05:13.900
把history给它

05:13.900 --> 05:14.900
画个箭头

05:14.900 --> 05:16.900
把history给它

05:16.900 --> 05:18.900
它就形成这么一种逻辑

05:18.900 --> 05:20.900
然后这里

05:20.900 --> 05:22.900
比方说我们再使用另外一个哈希history

05:22.900 --> 05:25.900
那么它的作用也是创建history

05:25.900 --> 05:26.900
就是这些组件

05:26.900 --> 05:27.900
它就创建history

05:27.900 --> 05:28.900
其他啥都不干

05:28.900 --> 05:30.900
啥都不干

05:30.900 --> 05:31.900
你看

05:31.900 --> 05:33.900
那么创建给它

05:33.900 --> 05:36.900
然后如果说你是memory

05:36.900 --> 05:37.900
这个哈希

05:37.900 --> 05:38.900
叫哈希rotar

05:38.900 --> 05:40.900
还有一个东西叫memory rotor

05:40.900 --> 05:41.900
memory rotor

05:41.900 --> 05:42.900
我们没用过

05:42.900 --> 05:43.900
但是我一说就明白了

05:43.900 --> 05:44.900
那么这个东西

05:44.900 --> 05:45.900
它也是创建一个history

05:45.900 --> 05:46.900
创建一个memory history

05:46.900 --> 05:48.900
然后创建一个history给它

05:48.900 --> 05:50.900
也就是说我们的rotar

05:50.900 --> 05:51.900
它是不管

05:51.900 --> 05:52.900
我这个history是什么history

05:52.900 --> 05:53.900
反正API都是一样的

05:53.900 --> 05:54.900
你给我就行了

05:54.900 --> 05:55.900
给我就行了

05:55.900 --> 05:57.900
我的操作方式是一样的

05:57.900 --> 05:59.900
那么咱们这一刻写啥呢

05:59.900 --> 06:01.900
咱们这一刻就写来写rotar

06:01.900 --> 06:02.900
来写rotar

06:02.900 --> 06:03.900
以及这些东西

06:03.900 --> 06:04.900
providers

06:04.900 --> 06:05.900
这些东西

06:05.900 --> 06:06.900
咱们来吧

06:07.900 --> 06:10.900
首先我们这里写这么一个rotar

06:10.900 --> 06:11.900
组件

06:11.900 --> 06:13.900
这里先建个

06:13.900 --> 06:14.900
写这么个rotar

06:14.900 --> 06:16.900
组件点介绍

06:16.900 --> 06:17.900
那么这个rotar

06:17.900 --> 06:19.900
组件我们这里导出

06:19.900 --> 06:20.900
它是一个内组件

06:20.900 --> 06:21.900
RFC

06:21.900 --> 06:22.900
因为还有状态

06:22.900 --> 06:23.900
当然也可以用hook

06:23.900 --> 06:24.900
对吧

06:24.900 --> 06:25.900
也可以用hook

06:25.900 --> 06:26.900
怎么写

06:26.900 --> 06:27.900
又写寒组件

06:27.900 --> 06:29.900
写这么一个内组件

06:29.900 --> 06:30.900
这个内组件里边

06:30.900 --> 06:32.900
它需要接受一个属性

06:32.900 --> 06:34.900
我们打上那个

06:34.900 --> 06:36.900
static

06:36.900 --> 06:37.900
叫做

06:37.900 --> 06:39.900
把写完上一点

06:39.900 --> 06:41.900
import

06:41.900 --> 06:43.900
prob types

06:43.900 --> 06:44.900
from

06:44.900 --> 06:45.900
prob types

06:45.900 --> 06:46.900
好

06:46.900 --> 06:47.900
那么它需要一个属性

06:47.900 --> 06:48.900
我们这里

06:48.900 --> 06:50.900
规定下一个属性的内相

06:50.900 --> 06:51.900
那么什么属性呢

06:51.900 --> 06:52.900
就需要一个属性就行了

06:52.900 --> 06:53.900
其他啥都不用给我

06:53.900 --> 06:54.900
啥都不用给我

06:54.900 --> 06:55.900
就给我一个属性

06:55.900 --> 06:56.900
叫做history

06:56.900 --> 06:58.900
它是一个history对象

06:58.900 --> 06:59.900
那么我们这里约束一下

06:59.900 --> 07:00.900
它是个对象

07:00.900 --> 07:01.900
prob types

07:01.900 --> 07:02.900
当然我这里就不去

07:02.900 --> 07:03.900
详细约束了

07:03.900 --> 07:05.900
就简单约束一下

07:05.900 --> 07:07.900
就是一个object

07:07.900 --> 07:09.900
它是一个对象

07:09.900 --> 07:10.900
你把这个history对象给我

07:10.900 --> 07:11.900
剩下的事情你别管了

07:11.900 --> 07:13.900
我也不管你这个history哪来的

07:13.900 --> 07:15.900
总之你给我就完事了

07:15.900 --> 07:16.900
给我就完事了

07:16.900 --> 07:17.900
并且它必须的

07:17.900 --> 07:18.900
必须要给的

07:18.900 --> 07:19.900
你不给我这个东西

07:19.900 --> 07:21.900
我后面没法操作

07:21.900 --> 07:22.900
没法操作

07:22.900 --> 07:24.900
那么现在你给我这个对象

07:24.900 --> 07:25.900
给我这个对象

07:25.900 --> 07:26.900
那个rotor要干嘛呢

07:26.900 --> 07:27.900
它要干嘛呢

07:27.900 --> 07:29.900
它的主要作用

07:29.900 --> 07:30.900
是不是要提供上下文

07:30.900 --> 07:31.900
对吧

07:31.900 --> 07:32.900
它是不是要提供上下文

07:32.900 --> 07:33.900
那么我们是不是得

07:33.900 --> 07:34.900
有一个上下文

07:34.900 --> 07:35.900
对吧

07:35.900 --> 07:36.900
得有这么一个上下文

07:36.900 --> 07:37.900
对象

07:37.900 --> 07:38.900
那么它要把

07:38.900 --> 07:39.900
把一些东西

07:39.900 --> 07:40.900
那要放到上下文里边

07:40.900 --> 07:42.900
它的主要作用是这个

07:42.900 --> 07:43.900
所以

07:43.900 --> 07:44.900
当然还有切入准

07:44.900 --> 07:45.900
这个没什么好说的

07:45.900 --> 07:46.900
切入准

07:46.900 --> 07:47.900
还必须要有切入准

07:47.900 --> 07:49.900
那么这里呢

07:49.900 --> 07:50.900
看着

07:50.900 --> 07:51.900
我们这里新建个文件

07:51.900 --> 07:52.900
来产生一个上下文

07:52.900 --> 07:53.900
给它取个名字叫做

07:53.900 --> 07:55.900
rotor

07:55.900 --> 07:57.900
rotor context

07:57.900 --> 07:58.900
点解释

07:58.900 --> 07:59.900
这么一个上下文

07:59.900 --> 08:01.900
那上下文是不是很简单

08:01.900 --> 08:02.900
我们导入这个

08:02.900 --> 08:04.900
from right

08:05.900 --> 08:06.900
这是什么

08:06.900 --> 08:07.900
craze context

08:07.900 --> 08:08.900
对吧

08:08.900 --> 08:09.900
我们通过它

08:09.900 --> 08:10.900
是不是在创建上下文的

08:10.900 --> 08:11.900
咱们来创建这么一个上下文

08:11.900 --> 08:12.900
context

08:12.900 --> 08:13.900
等于什么呢

08:13.900 --> 08:14.900
等于

08:14.900 --> 08:16.900
craze context

08:16.900 --> 08:17.900
创建上下文

08:17.900 --> 08:18.900
默认字

08:18.900 --> 08:19.900
没有默认字

08:19.900 --> 08:20.900
没有默认字

08:20.900 --> 08:21.900
就完了

08:21.900 --> 08:22.900
创建这么一个上下文

08:22.900 --> 08:24.900
然后把这个上下文返回

08:24.900 --> 08:26.900
return to export

08:26.900 --> 08:27.900
default context

08:27.900 --> 08:28.900
把这个上下文返回

08:28.900 --> 08:29.900
对吧

08:29.900 --> 08:30.900
这个代码很简单

08:31.900 --> 08:33.900
那么rotor里边要做什么

08:33.900 --> 08:35.900
它无非就是取一个上下文

08:35.900 --> 08:37.900
咱们把上下文导入进来

08:37.900 --> 08:38.900
import

08:38.900 --> 08:40.900
ctx

08:40.900 --> 08:41.900
from

08:41.900 --> 08:43.900
来自于rotor context

08:43.900 --> 08:44.900
来自上下文

08:44.900 --> 08:46.900
把上下文导入进来

08:46.900 --> 08:48.900
那么我们这里是不是

08:48.900 --> 08:49.900
得到一个上下文

08:49.900 --> 08:50.900
我们这里要提供上下文了

08:50.900 --> 08:51.900
我们这里写的

08:51.900 --> 08:53.900
ctx provider

08:53.900 --> 08:54.900
对不对

08:54.900 --> 08:55.900
提供这么一个上下文

08:55.900 --> 08:58.900
上下文里边

08:59.900 --> 09:01.900
就是这个组建

09:01.900 --> 09:03.900
这个组建是不是可以有指源数

09:03.900 --> 09:04.900
比方说我们这里看

09:04.900 --> 09:05.900
我们到时候

09:05.900 --> 09:06.900
肯定往这边加东西

09:06.900 --> 09:07.900
对不对

09:07.900 --> 09:08.900
那是不是上下文里边有东西

09:08.900 --> 09:09.900
那么我们就直接

09:09.900 --> 09:11.900
把rotor里边的ctx

09:11.900 --> 09:12.900
就传到rotor里边的ctx

09:12.900 --> 09:13.900
直接传给

09:13.900 --> 09:14.900
providers

09:14.900 --> 09:15.900
上下文里边的ctx

09:15.900 --> 09:16.900
直接传到providers

09:16.900 --> 09:18.900
上下文里边就行了

09:18.900 --> 09:19.900
直接传过去就行了

09:19.900 --> 09:20.900
咱们传一下

09:20.900 --> 09:22.900
传到这个上下文

09:22.900 --> 09:24.900
就是把ctx

09:24.900 --> 09:26.900
thisprobs.ctx

09:26.900 --> 09:27.900
直接传过去就行了

09:27.900 --> 09:29.900
当然我们这里可以约束一下

09:29.900 --> 09:30.900
切组准的

09:30.900 --> 09:32.900
只要是任何可以

09:32.900 --> 09:33.900
选择的东西都行

09:33.900 --> 09:34.900
都行

09:34.900 --> 09:36.900
比方说我们这里probs

09:36.900 --> 09:37.900
types

09:37.900 --> 09:38.900
怎么

09:38.900 --> 09:39.900
elements

09:39.900 --> 09:40.900
对

09:40.900 --> 09:41.900
elements

09:41.900 --> 09:42.900
到load

09:42.900 --> 09:43.900
load

09:43.900 --> 09:44.900
只要是节点

09:44.900 --> 09:45.900
只要能够选择出来都行

09:45.900 --> 09:46.900
咱们把个

09:46.900 --> 09:48.900
指源数就放到这

09:48.900 --> 09:51.900
那么上下文里边

09:51.900 --> 09:53.900
它的歪六指是一个什么东西呢

09:53.900 --> 09:55.900
它的歪六指肯定是个对象

09:55.900 --> 09:56.900
你看一下

09:57.900 --> 09:59.900
这个对象里边有三个属性

09:59.900 --> 10:00.900
一个是history

10:00.900 --> 10:01.900
一个是location

10:01.900 --> 10:02.900
一个是march

10:02.900 --> 10:03.900
对吧

10:03.900 --> 10:04.900
一个是march

10:04.900 --> 10:05.900
咱们按下来

10:05.900 --> 10:07.900
这个上下文里面肯定是一个对象

10:07.900 --> 10:09.900
但是最好不要在这样子

10:09.900 --> 10:11.900
直接把对象这样子写

10:11.900 --> 10:12.900
那么这样子每次选择

10:12.900 --> 10:13.900
它就是一个新的对象

10:13.900 --> 10:14.900
这样子

10:14.900 --> 10:15.900
不是很好

10:15.900 --> 10:17.900
我们最好是用同一个对象

10:17.900 --> 10:18.900
用同一个对象

10:18.900 --> 10:19.900
这里边

10:19.900 --> 10:22.900
我们就直接在这里写一个吧

10:22.900 --> 10:24.900
我想要写啥呢

10:25.900 --> 10:27.900
我们在这里写这么一个对象

10:27.900 --> 10:28.900
我想一下

10:30.900 --> 10:31.900
在这里

10:32.900 --> 10:33.900
写这么一个对象

10:35.900 --> 10:36.900
ctx value

10:36.900 --> 10:38.900
上下文对象

10:38.900 --> 10:40.900
上下文对象

10:41.900 --> 10:42.900
我想一下

10:43.900 --> 10:44.900
这里边

10:45.900 --> 10:46.900
写这么一个对象

10:46.900 --> 10:48.900
然后在render的时候

10:48.900 --> 10:49.900
在render的时候

10:49.900 --> 10:51.900
给这个对象里边的东西负责

10:51.900 --> 10:53.900
给这个对象里边的东西负责

10:53.900 --> 10:55.900
这个ctx value

10:55.900 --> 10:56.900
它的什么呢

10:56.900 --> 10:57.900
它的那个

10:57.900 --> 10:58.900
就是z

10:59.900 --> 11:00.900
ctx value

11:01.900 --> 11:02.900
上下文对象

11:02.900 --> 11:03.900
上下文对象

11:03.900 --> 11:06.900
上下文中的对象

11:07.900 --> 11:08.900
那么这个

11:08.900 --> 11:09.900
上下文中的对象呢

11:09.900 --> 11:12.900
它里边有一个属性叫做history

11:12.900 --> 11:13.900
这个history哪来的

11:13.900 --> 11:15.900
是不是来自于probs.history

11:15.900 --> 11:16.900
这个没问题吧

11:16.900 --> 11:18.900
最终我们肯定是把这个东西给它

11:18.900 --> 11:20.900
肯定是给它

11:20.900 --> 11:22.900
肯定是把这个对象给它

11:22.900 --> 11:23.900
好 咱们先看一下

11:23.900 --> 11:25.900
看一下我们目前的对象

11:25.900 --> 11:27.900
咱们在app里面去用一下

11:27.900 --> 11:28.900
现在我们就不用用了

11:28.900 --> 11:29.900
不是它了 用的是什么呢

11:29.900 --> 11:31.900
用的是咱们自己的

11:32.900 --> 11:33.900
咱们自己的

11:33.900 --> 11:34.900
那个什么呢

11:34.900 --> 11:35.900
那个rotor

11:36.900 --> 11:38.900
rexrotor里边的rotor

11:39.900 --> 11:40.900
咱们直接使用这个

11:40.900 --> 11:42.900
那当然我们也可以在这里边加个index

11:42.900 --> 11:43.900
对吧

11:43.900 --> 11:45.900
导出 专门用个接式来导出

11:45.900 --> 11:47.900
这里比方说我们导出这个rotor

11:47.900 --> 11:48.900
导出个rotor

11:48.900 --> 11:49.900
OK 一个sport

11:50.900 --> 11:51.900
咱们直接把那个

11:52.900 --> 11:53.900
从这个地方导入嘛

11:53.900 --> 11:54.900
导入过后再导出

11:55.900 --> 11:56.900
把rotor

11:56.900 --> 11:58.900
导入过后再导 直接导出

11:58.900 --> 11:59.900
导出 导出什么呢

11:59.900 --> 12:00.900
导出那个

12:00.900 --> 12:01.900
导它的默认值 对不对

12:01.900 --> 12:02.900
default

12:02.900 --> 12:04.900
改个名字 给它取个名字叫做

12:06.900 --> 12:07.900
rotor

12:07.900 --> 12:08.900
给它取个名字叫rotor

12:08.900 --> 12:09.900
好 那么这里呢

12:09.900 --> 12:10.900
我们就直接导

12:10.900 --> 12:13.900
直接在rexrotor里边导入一个什么

12:13.900 --> 12:14.900
rotor

12:14.900 --> 12:15.900
导入这个rotor

12:15.900 --> 12:16.900
这过程没问题吧

12:16.900 --> 12:17.900
没问题吧

12:17.900 --> 12:19.900
我们从rexrotor里边

12:19.900 --> 12:21.900
从个index里边

12:21.900 --> 12:22.900
读的就是个index

12:22.900 --> 12:23.900
它导出一个东西

12:23.900 --> 12:24.900
改取了名字叫rotor

12:24.900 --> 12:25.900
好 证明了

12:25.900 --> 12:26.900
我们把个rotor导入进来

12:26.900 --> 12:27.900
所以rotor实际上是啥呢

12:27.900 --> 12:28.900
实际上就是个

12:28.900 --> 12:30.900
rotor这个组件

12:30.900 --> 12:31.900
就是个组件

12:31.900 --> 12:33.900
好 那么现在导入之后呢

12:33.900 --> 12:35.900
我们这里直接使用rotor看一下

12:35.900 --> 12:36.900
看一下

12:36.900 --> 12:37.900
那么它是不是要一个history

12:37.900 --> 12:38.900
对吧

12:38.900 --> 12:39.900
它需要一个history

12:39.900 --> 12:40.900
OK 我给它吧

12:40.900 --> 12:41.900
它不是要一个history吗

12:41.900 --> 12:42.900
那我给它呗

12:42.900 --> 12:44.900
好 history我们之前不是写过吗

12:44.900 --> 12:45.900
对不对

12:45.900 --> 12:46.900
我们可以用第三方库来导入

12:46.900 --> 12:47.900
也可以用我们自己写的

12:47.900 --> 12:49.900
比方说我们用自己写的嘛

12:49.900 --> 12:50.900
导这个history

12:51.900 --> 12:53.900
它里边有一个history

12:53.900 --> 12:54.900
咱们就直接在这里

12:54.900 --> 12:56.900
创建一个history对象

12:56.900 --> 12:57.900
直接在这里

12:57.900 --> 12:58.900
创建一个history对象

12:58.900 --> 12:59.900
测试嘛

12:59.900 --> 13:00.900
history对象

13:00.900 --> 13:01.900
调用这个方法

13:01.900 --> 13:02.900
它有一些参数

13:02.900 --> 13:03.900
不写了

13:03.900 --> 13:04.900
默认就行了

13:04.900 --> 13:06.900
它不是需要一个属性history吗

13:06.900 --> 13:07.900
OK 我给你

13:07.900 --> 13:08.900
好 我给你

13:08.900 --> 13:09.900
好 就完了

13:09.900 --> 13:10.900
就完了

13:10.900 --> 13:11.900
那么它会做什么事情呢

13:11.900 --> 13:13.900
它就会把这个

13:13.900 --> 13:14.900
在这边

13:14.900 --> 13:15.900
这里边建立一个上下文

13:15.900 --> 13:17.900
自己不生成任何的动物元素

13:17.900 --> 13:18.900
只是建立一个上下文而已

13:18.900 --> 13:19.900
保存你看一下吧

13:19.900 --> 13:21.900
App里边你看是不是Rotor

13:21.900 --> 13:22.900
Rotor里边是不是一个context

13:22.900 --> 13:23.900
provider

13:23.900 --> 13:25.900
bio里边是不是有那个history对象

13:25.900 --> 13:26.900
它已经放进去了

13:26.900 --> 13:27.900
看到没

13:27.900 --> 13:28.900
就已经放进去了

13:28.900 --> 13:29.900
就这么简单

13:29.900 --> 13:31.900
那么这里有个小的细节

13:31.900 --> 13:32.900
就是

13:32.900 --> 13:33.900
上下文的名字

13:33.900 --> 13:35.900
它在上下文的默认名字

13:35.900 --> 13:36.900
叫做context

13:36.900 --> 13:37.900
但是如果说

13:37.900 --> 13:38.900
我们看一下之前

13:38.900 --> 13:40.900
我们写的那个

13:40.900 --> 13:42.900
如果看一下之前那个

13:42.900 --> 13:43.900
RexRotor

13:43.900 --> 13:45.900
动物元的那个

13:45.900 --> 13:46.900
它的名字叫做

13:46.900 --> 13:47.900
我就直接说吧

13:47.900 --> 13:49.900
这个上下文的名字是可以改的

13:50.900 --> 13:51.900
它默认是

13:51.900 --> 13:53.900
它的名字是context.provider

13:53.900 --> 13:54.900
那可以改

13:54.900 --> 13:55.900
那么我们看到

13:55.900 --> 13:56.900
可以看到之前

13:56.900 --> 13:58.900
它是个Rotor.provider

13:58.900 --> 13:59.900
这个名字可以改

13:59.900 --> 14:00.900
非常非常小的细节

14:00.900 --> 14:02.900
这改不改其实也无所谓

14:02.900 --> 14:03.900
咱们这里可以改一下

14:03.900 --> 14:04.900
这个上下文的名字

14:05.900 --> 14:06.900
context

14:06.900 --> 14:07.900
叫做什么呢

14:07.900 --> 14:08.900
display name

14:09.900 --> 14:10.900
就显示的名字

14:11.900 --> 14:13.900
在调试工具中

14:13.900 --> 14:14.900
在调试工具中

14:15.900 --> 14:16.900
调试工具中

14:17.900 --> 14:19.900
显示的名字

14:19.900 --> 14:20.900
改成什么

14:20.900 --> 14:21.900
Rotor

14:21.900 --> 14:22.900
就非常非常简单

14:22.900 --> 14:23.900
保存

14:23.900 --> 14:24.900
你看一下

14:25.900 --> 14:27.900
结构是不是跟那边一样了

14:27.900 --> 14:28.900
跟之前一样了

14:28.900 --> 14:29.900
那么现在

14:29.900 --> 14:31.900
它传了一个就是

14:31.900 --> 14:32.900
History进去

14:32.900 --> 14:33.900
到上下文里边

14:33.900 --> 14:35.900
但是上下文里边不只有History

14:35.900 --> 14:36.900
它不只有History

14:37.900 --> 14:38.900
那么上下文里边还有啥呢

14:38.900 --> 14:40.900
是不是还有location

14:40.900 --> 14:41.900
那么location

14:41.900 --> 14:42.900
有些人就开始想了

14:42.900 --> 14:43.900
我能不能这样写

14:44.900 --> 14:46.900
Value.location

14:46.900 --> 14:47.900
因为location我们知道

14:47.900 --> 14:48.900
就在上下文里边

14:48.900 --> 14:49.900
就在History里边

14:49.900 --> 14:50.900
History里边

14:50.900 --> 14:51.900
本身就有一个location

14:52.900 --> 14:53.900
这把老刀就完成了

14:53.900 --> 14:54.900
能不能这样子写呢

14:55.900 --> 14:56.900
好像说这样子写

14:56.900 --> 14:57.900
没有什么问题

14:57.900 --> 14:58.900
看一下吧

14:59.900 --> 15:00.900
好像说没有什么问题

15:01.900 --> 15:02.900
你看一下

15:02.900 --> 15:03.900
是没有什么问题

15:03.900 --> 15:04.900
对吧

15:04.900 --> 15:05.900
但是这样子不好

15:05.900 --> 15:06.900
为什么不好呢

15:06.900 --> 15:07.900
因为

15:07.900 --> 15:09.900
如果有一天地址发生变化

15:09.900 --> 15:10.900
那么你这个玩意

15:10.900 --> 15:12.900
又不在状态里边

15:12.900 --> 15:13.900
你看这个东西

15:13.900 --> 15:14.900
是不是不在状态里边

15:14.900 --> 15:15.900
不在状态里边

15:15.900 --> 15:16.900
所以说呢

15:16.900 --> 15:17.900
它不会刷新这个组件

15:17.900 --> 15:18.900
这个组件不会刷新

15:19.900 --> 15:20.900
就是说

15:20.900 --> 15:21.900
如果一天地址变化了

15:21.900 --> 15:22.900
你改动了

15:22.900 --> 15:23.900
又没有改动状态

15:23.900 --> 15:24.900
那么

15:24.900 --> 15:25.900
组件不会刷新

15:25.900 --> 15:26.900
所以它还会用之前的纸

15:26.900 --> 15:27.900
明白这个意思吗

15:27.900 --> 15:28.900
它这个东西不会刷新

15:28.900 --> 15:30.900
所以说为了让它刷新呢

15:30.900 --> 15:31.900
因为History这个对象

15:31.900 --> 15:32.900
是永恒不变的

15:32.900 --> 15:34.900
History对一个对象

15:34.900 --> 15:37.900
该对象不变

15:37.900 --> 15:39.900
就整个生命周期

15:39.900 --> 15:41.900
就是整个就是页面的页面

15:41.900 --> 15:42.900
无论怎么跳转

15:42.900 --> 15:43.900
它这个对象只要不刷新页面

15:43.900 --> 15:44.900
那么它不会变的

15:44.900 --> 15:45.900
只需要用一个就行了

15:45.900 --> 15:47.900
但是location它会不断的变化

15:47.900 --> 15:48.900
对吧

15:48.900 --> 15:49.900
因为我们之前也知道

15:49.900 --> 15:50.900
我们写这个History的时候

15:50.900 --> 15:51.900
也知道

15:51.900 --> 15:52.900
它里边那个location对象

15:52.900 --> 15:53.900
每次变变化页面

15:53.900 --> 15:54.900
是不是都要重新创建一个location

15:54.900 --> 15:55.900
对吧

15:55.900 --> 15:56.900
它会变化

15:56.900 --> 15:57.900
所以说呢

15:57.900 --> 15:58.900
我希望它的变化呢

15:58.900 --> 15:59.900
能够导致这个整个刷新

15:59.900 --> 16:00.900
那怎么办呢

16:01.900 --> 16:03.900
就把这个东西放到状态里边

16:03.900 --> 16:04.900
就这么简单

16:04.900 --> 16:05.900
就把这个玩意

16:05.900 --> 16:06.900
放到状态里边就行了

16:06.900 --> 16:08.900
所以我们这里写个状态呗

16:08.900 --> 16:09.900
写个状态

16:09.900 --> 16:11.900
状态里边有个啥location

16:11.900 --> 16:13.900
把它放到状态里边

16:13.900 --> 16:14.900
只要发生变化

16:14.900 --> 16:15.900
那么我们更新状态

16:15.900 --> 16:17.900
一更新状态是不是就重新渲染了

16:17.900 --> 16:18.900
对吧

16:18.900 --> 16:19.900
我们主要的目的是

16:19.900 --> 16:20.900
希望它重新渲染

16:20.900 --> 16:21.900
把它放到状态里边

16:21.900 --> 16:22.900
状态里边呢

16:22.900 --> 16:24.900
我们直接读

16:24.900 --> 16:25.900
直接读这个

16:25.900 --> 16:27.900
直接读到History里边的location

16:27.900 --> 16:28.900
对吧

16:28.900 --> 16:29.900
直接读这个

16:29.900 --> 16:31.900
那么只要一更新状态

16:31.900 --> 16:32.900
只要一更新状态

16:32.900 --> 16:33.900
它默认字

16:33.900 --> 16:34.900
一开始默认字

16:34.900 --> 16:35.900
直接从History里边取

16:35.900 --> 16:36.900
就完事了

16:36.900 --> 16:37.900
那么只要一更新状态呢

16:37.900 --> 16:38.900
我们这里呢

16:38.900 --> 16:40.900
我们这里怎么从哪里取呢

16:40.900 --> 16:42.900
就不是从属性里边取

16:42.900 --> 16:44.900
所以从那个state

16:44.900 --> 16:45.900
从状态里边取

16:45.900 --> 16:47.900
只要一改变状态

16:47.900 --> 16:49.900
那么这个location是不是自然而然一更新呢

16:49.900 --> 16:50.900
要用这种解法

16:50.900 --> 16:51.900
要用这种解法

16:51.900 --> 16:53.900
目前的效果是一样的

16:53.900 --> 16:54.900
但是显成状态之后呢

16:54.900 --> 16:56.900
我们就有机会更新它了

16:56.900 --> 16:57.900
更新它了

16:57.900 --> 16:59.900
看这个是不是写出来了

16:59.900 --> 17:00.900
对吧

17:00.900 --> 17:01.900
好

17:01.900 --> 17:03.900
那么接下来还一个march对象

17:04.900 --> 17:06.900
还一个march对象

17:06.900 --> 17:08.900
march对象来自于哪儿呢

17:08.900 --> 17:10.900
是不是要调用这个

17:10.900 --> 17:12.900
我们之前一个还说march pass

17:12.900 --> 17:13.900
对吧

17:13.900 --> 17:14.900
march pass

17:14.900 --> 17:15.900
我们现在呢

17:15.900 --> 17:16.900
写的是啥呢

17:16.900 --> 17:17.900
写的是rotor逐渐

17:17.900 --> 17:18.900
并不是rotor逐渐

17:18.900 --> 17:19.900
对吧

17:19.900 --> 17:20.900
你看一下march pass

17:20.900 --> 17:22.900
是不是要给一个什么路径规则

17:22.900 --> 17:23.900
还有什么真实的

17:23.900 --> 17:24.900
就是这个请求的路径

17:24.900 --> 17:25.900
请求的路径

17:25.900 --> 17:26.900
还有什么相关配置

17:26.900 --> 17:27.900
对吧

17:27.900 --> 17:28.900
一大的东西

17:28.900 --> 17:29.900
那么这个东西

17:29.900 --> 17:30.900
肯定是要匹配路由的

17:30.900 --> 17:31.900
它是用来匹配的

17:31.900 --> 17:33.900
得到一个匹配结果对象

17:33.900 --> 17:34.900
得到一个匹配结果

17:34.900 --> 17:36.900
那么现在我连路由规则都没有

17:36.900 --> 17:37.900
我怎么去匹配了

17:37.900 --> 17:38.900
怎么去匹配了

17:38.900 --> 17:39.900
它是这个样子的

17:39.900 --> 17:40.900
你看一下我们

17:40.900 --> 17:41.900
你看一下它是怎么做的

17:41.900 --> 17:43.900
它这一块是什么来操作的

17:43.900 --> 17:44.900
这里呢

17:44.900 --> 17:46.900
我们导入rexrotor动

17:46.900 --> 17:48.900
这里注释一下嘛

17:50.900 --> 17:51.900
导入

17:51.900 --> 17:52.900
导入rex

17:54.900 --> 17:55.900
就是

17:55.900 --> 17:56.900
browserrotor嘛

17:57.900 --> 17:58.900
这样子先

17:58.900 --> 17:59.900
from

17:59.900 --> 18:01.900
rexrotor动

18:01.900 --> 18:03.900
导入browserrotor

18:05.900 --> 18:06.900
好

18:06.900 --> 18:07.900
那么这里呢

18:07.900 --> 18:10.460
我们先把这个注释掉

18:10.460 --> 18:12.460
使用browserrotor

18:12.460 --> 18:16.500
那么这个

18:16.500 --> 18:17.500
关上了

18:17.500 --> 18:18.500
扔这吧

18:18.500 --> 18:20.500
咱们看一下它是怎么做的

18:20.500 --> 18:22.500
我们写了一个browserrotor

18:22.500 --> 18:23.500
这个browserrotor是不是也没有

18:23.500 --> 18:24.500
任何的路由配置

18:24.500 --> 18:25.500
对吧

18:25.500 --> 18:26.500
它是提供

18:26.500 --> 18:27.500
上下闻的

18:27.500 --> 18:28.500
它哪有什么路由配置呢

18:28.500 --> 18:29.500
我们路由配置

18:29.500 --> 18:30.500
我们现在还没有做那个组件

18:30.500 --> 18:32.500
它是在提供上下闻的

18:32.500 --> 18:34.500
那么这个默认的上下闻里边

18:34.500 --> 18:35.500
它的march是咋呢

18:35.500 --> 18:36.500
你看一下

18:36.500 --> 18:38.500
它就给了一个默认值

18:38.500 --> 18:39.500
就是pass

18:39.500 --> 18:40.500
路径的

18:40.500 --> 18:42.500
它规则了就强行给了一个斜槓

18:42.500 --> 18:43.500
UIL规则了

18:43.500 --> 18:45.500
UIL就是匹配的地址呢

18:45.500 --> 18:46.500
也就是

18:46.500 --> 18:47.500
就是请求的地址呢

18:47.500 --> 18:49.500
你甭管你防纹啥的地址

18:49.500 --> 18:51.500
你甭管你防纹啥的地址

18:51.500 --> 18:52.500
甭管你防纹啥

18:52.500 --> 18:54.500
那么它这个匹配的地址呢

18:54.500 --> 18:55.500
也就是一个斜槓

18:55.500 --> 18:56.500
也就是一个斜槓

18:56.500 --> 18:58.500
就这么个意思

18:58.500 --> 19:00.500
看一下吧

19:00.500 --> 19:01.500
march

19:01.500 --> 19:02.500
对吧

19:02.500 --> 19:03.500
这个路由

19:03.500 --> 19:04.500
这个provider

19:04.500 --> 19:05.500
这个就是

19:05.500 --> 19:06.500
跟组件

19:06.500 --> 19:07.500
这个rotor组件里边

19:07.500 --> 19:08.500
它提供的上下闻里边

19:08.500 --> 19:10.500
march它就直接这样子写死了

19:10.500 --> 19:11.500
这样是一切

19:11.500 --> 19:13.500
因为这个地方没办法

19:13.500 --> 19:14.500
没办法

19:14.500 --> 19:15.500
它也不知道写啥

19:15.500 --> 19:17.500
因为它并不是用来匹配路由的

19:17.500 --> 19:18.500
它是在提供上下闻的

19:18.500 --> 19:19.500
但是你

19:19.500 --> 19:21.500
上下闻里边又要要这个东西

19:21.500 --> 19:22.500
那就我就给你

19:22.500 --> 19:23.500
给你一个就是跟路径

19:23.500 --> 19:24.500
所以说这个march呢

19:24.500 --> 19:26.500
我们是直接写死的

19:26.500 --> 19:27.500
march是直接写死的

19:27.500 --> 19:28.500
这里的march

19:28.500 --> 19:29.500
并没有

19:29.500 --> 19:31.500
并没有多少的变化

19:31.500 --> 19:32.500
直接写死就完事了

19:32.500 --> 19:33.500
直接写死就完事了

19:33.500 --> 19:34.500
比方说我们这里

19:34.500 --> 19:36.500
可以直接掉那个函数吗

19:36.500 --> 19:38.500
掉那个函数

19:38.500 --> 19:39.500
不是之前写过一个函数吗

19:39.500 --> 19:40.500
march pass

19:41.500 --> 19:43.500
march pass

19:43.500 --> 19:44.500
写过这么一个函数

19:44.500 --> 19:46.500
那么我们调整这个函数

19:46.500 --> 19:47.500
它要传哪些参数呢

19:47.500 --> 19:48.500
第一个pass

19:48.500 --> 19:49.500
路径规则

19:49.500 --> 19:51.500
它就是直接一个写杠

19:51.500 --> 19:53.500
路径直接一个写杠

19:53.500 --> 19:54.500
alb形式没有

19:54.500 --> 19:55.500
没有alb形式

19:55.500 --> 19:57.500
直接自己使用默认值吧

19:57.500 --> 19:58.500
我不管了

19:58.500 --> 19:59.500
就这样子

19:59.500 --> 20:00.500
就这样子

20:00.500 --> 20:01.500
保存

20:01.500 --> 20:02.500
你看一下吧

20:02.500 --> 20:05.500
咱们再回到我们自己的代码

20:05.500 --> 20:06.500
就这么简单

20:06.500 --> 20:07.500
你会发现前面的东西

20:07.500 --> 20:08.500
准备好了之后

20:08.500 --> 20:09.500
后面的事情

20:09.500 --> 20:10.500
特别简单

20:13.140 --> 20:14.140
这里

20:14.140 --> 20:16.900
注射掉

20:16.900 --> 20:17.900
看一下

20:18.900 --> 20:19.900
那么现在我们这里的

20:19.900 --> 20:20.900
rotor里面

20:20.900 --> 20:21.900
provider

20:21.900 --> 20:22.900
你看一下

20:22.900 --> 20:23.900
三个属性都有了

20:23.900 --> 20:24.900
march

20:24.900 --> 20:25.900
一个zx

20:25.900 --> 20:26.900
一个zx

20:26.900 --> 20:27.900
默认为force

20:27.900 --> 20:28.900
我之前怎么写的

20:28.900 --> 20:29.900
一个zx

20:29.900 --> 20:31.900
默认为force

20:31.900 --> 20:32.900
一个zx

20:32.900 --> 20:34.900
默认为force

20:34.900 --> 20:36.900
默认为force的话

20:36.900 --> 20:38.900
它为什么会变成处呢

20:39.900 --> 20:40.900
这个人一带神奇了

20:41.900 --> 20:42.900
1

20:42.900 --> 20:44.900
我看一下

20:44.900 --> 20:45.900
我看一下

20:46.900 --> 20:47.900
我看一下

20:47.900 --> 20:48.900
1是一个zx

20:49.900 --> 20:50.900
对了

20:51.900 --> 20:53.900
这个1是一个zx

20:53.900 --> 20:54.900
是不是精确匹配

20:54.900 --> 20:55.900
我明白了

20:55.900 --> 20:56.900
那么这里

20:56.900 --> 20:57.900
还不能直接传个鞋杠

20:57.900 --> 20:58.900
就是我们这里

20:58.900 --> 20:59.900
要传请求地址

20:59.900 --> 21:00.900
要传请求请求地址

21:00.900 --> 21:02.900
那么传个location里面的

21:02.900 --> 21:03.900
passname

21:03.900 --> 21:04.900
对吧

21:04.900 --> 21:05.900
我们从

21:05.900 --> 21:06.900
就是传这个

21:06.900 --> 21:07.900
我们把passname拿过去

21:07.900 --> 21:08.900
把passname拿过去

21:08.900 --> 21:09.900
让它去匹配

21:09.900 --> 21:10.900
它的规则就是鞋杠

21:10.900 --> 21:11.900
它的规则就是鞋杠

21:11.900 --> 21:12.900
匹配跟路径

21:12.900 --> 21:13.900
匹配跟路径

21:13.900 --> 21:15.900
它的规则就是鞋杠

21:15.900 --> 21:17.900
但是我们给它的passname

21:17.900 --> 21:18.900
passname给它

21:18.900 --> 21:20.900
让它去置于匹配

21:20.900 --> 21:21.900
什么个意思

21:21.900 --> 21:22.900
这里看一下

21:24.900 --> 21:25.900
如果你又忘了

21:25.900 --> 21:26.900
之前的march对象了

21:26.900 --> 21:28.900
那你又要去回顾一下了

21:28.900 --> 21:29.900
march对象

21:30.900 --> 21:31.900
那么这里表示

21:31.900 --> 21:32.900
是否是精确匹配

21:32.900 --> 21:33.900
就是目前

21:33.900 --> 21:34.900
就是匹配的结果

21:34.900 --> 21:36.900
就真实的匹配结果

21:36.900 --> 21:37.900
是不是精确的

21:37.900 --> 21:39.900
目前肯定是不是精确的

21:39.900 --> 21:40.900
它的规则是一个鞋杠

21:40.900 --> 21:42.900
拍摄是一个鞋杠

21:42.900 --> 21:44.900
那么我给它的地址是这个地址

21:44.900 --> 21:46.900
自然而然不是精确的匹配

21:46.900 --> 21:48.900
拍摄是没有

21:48.900 --> 21:49.900
UIL

21:49.900 --> 21:50.900
它匹配到的UIL 就是一个鞋杠

21:50.900 --> 21:53.900
我们之前写好的march对象

21:53.900 --> 21:54.900
三个东西是不是都有了

21:54.900 --> 21:56.900
那就完了

21:57.900 --> 21:58.900
还有啥

21:58.900 --> 21:59.900
是不是没了

21:59.900 --> 22:00.900
就没了

22:00.900 --> 22:02.900
就这么简单

22:02.900 --> 22:03.900
所以说这里

22:03.900 --> 22:04.900
如果说里面

22:04.900 --> 22:05.900
我们是不是可以写东西

22:05.900 --> 22:07.740
那么我们这里无论是写的啥

22:07.740 --> 22:10.020
它都是处于这个上下文里边

22:10.020 --> 22:11.460
无论我们给它写的是啥

22:11.460 --> 22:13.020
它都是处于这个上下文里边

22:13.020 --> 22:14.220
那么后续的东西呢

22:14.220 --> 22:16.060
是不是可以从上下文里面获取了

22:16.060 --> 22:16.500
对吧

22:16.500 --> 22:18.100
这个rotor特别特别简单

22:18.100 --> 22:19.900
它就是给你加一个history

22:19.900 --> 22:21.940
然后匹配一个上下文

22:21.940 --> 22:23.900
就是加一个上下文

22:23.900 --> 22:24.580
就这么个意思

22:26.060 --> 22:28.180
那么接下来咱们来

22:28.180 --> 22:30.300
咱们还有一个问题就没有解决就是

22:30.300 --> 22:32.340
当它挑转的时候

22:32.340 --> 22:35.180
它怎么来刷新呢

22:35.180 --> 22:36.820
怎么来刷新这一块呢

22:36.820 --> 22:38.860
比方说当页面挑转的时候比方说吧

22:38.860 --> 22:41.380
我们这里不写不用这个切组准

22:41.380 --> 22:43.820
比如说我们这里或者说加一个he

22:43.820 --> 22:45.660
he它要显示这么个东西

22:45.660 --> 22:46.620
this state

22:48.780 --> 22:52.220
或者说从ctx value

22:52.220 --> 22:52.660
对吧

22:52.660 --> 22:55.740
来自于当前的地址passname

22:55.740 --> 22:56.660
显示当前的地址

22:57.940 --> 22:59.260
这是我们目前的地址对吧

22:59.260 --> 23:00.860
我们之前拿到的

23:00.860 --> 23:01.860
那我们怎么来刷新呢

23:01.860 --> 23:02.860
比方说我们这里后退

23:03.540 --> 23:04.060
后退

23:04.740 --> 23:05.860
这样子刷新页面了

23:05.860 --> 23:06.340
对不对

23:06.340 --> 23:06.540
好

23:06.540 --> 23:09.820
比方说咱们怎么弄呢

23:09.820 --> 23:10.700
比方说下面个按钮

23:12.540 --> 23:12.900
挑转

23:14.060 --> 23:14.940
随便下写一个

23:14.940 --> 23:15.900
下写一个

23:15.900 --> 23:17.500
但现在问题是它不能刷新

23:17.500 --> 23:19.020
不能刷新不能重新宣传组件

23:19.980 --> 23:21.140
挑转挑的干嘛呢

23:21.140 --> 23:24.460
我们就调用thisct value

23:24.460 --> 23:26.580
就上下文里边不是一个history吗

23:26.580 --> 23:27.780
history里边不是有poohy吗

23:27.780 --> 23:28.100
对吧

23:28.100 --> 23:29.660
poohy鞋杠123

23:31.940 --> 23:32.660
鞋杠123

23:33.380 --> 23:33.660
好吧

23:34.820 --> 23:35.420
保存啊

23:35.420 --> 23:35.780
保存

23:36.540 --> 23:38.140
那么现在我们点挑转

23:38.140 --> 23:40.500
你看这个地址是不是挑转了

23:40.500 --> 23:41.820
但是这里有没有重新刷新

23:41.820 --> 23:42.380
没有

23:42.380 --> 23:44.100
因为它不知道挑挑转了

23:44.100 --> 23:45.700
因为我们调用这个方法挑转的

23:45.700 --> 23:46.180
对吧

23:46.180 --> 23:46.900
它改动了什么

23:46.900 --> 23:48.220
调用了history API

23:48.220 --> 23:48.380
对吧

23:48.380 --> 23:49.900
改动了这些东西

23:49.900 --> 23:51.780
但是这个组件它不知道

23:51.780 --> 23:52.980
所以我们要干嘛呢

23:52.980 --> 23:54.780
当页面发生变化的时候

23:54.780 --> 23:55.980
当地址变化的时候

23:55.980 --> 23:57.820
我们是不是要改动这个状态

23:57.820 --> 23:59.060
是要重新改动状态

24:00.420 --> 24:01.340
对吧

24:01.340 --> 24:04.420
那么这个事情实际上是很简单很简单的

24:04.420 --> 24:04.900
怎么做啊

24:04.900 --> 24:06.100
这个事情

24:06.100 --> 24:07.460
我们直接在构造函数里边

24:07.460 --> 24:08.940
比方说

24:08.940 --> 24:10.500
构造函数里边

24:10.500 --> 24:13.340
或者是在组件挂载完成之后

24:13.340 --> 24:14.540
在组件挂载完成之后

24:14.540 --> 24:15.620
component

24:15.620 --> 24:16.900
demand

24:16.900 --> 24:17.980
组件挂载完成之后

24:17.980 --> 24:19.540
我们干嘛呢

24:19.540 --> 24:21.460
你不是有属性里边

24:21.460 --> 24:23.820
不是有一个history对象吗

24:23.820 --> 24:26.300
history对象里边是不是个nation

24:26.300 --> 24:27.180
是不是个nation

24:27.180 --> 24:27.580
对吧

24:27.580 --> 24:28.260
监听嘛

24:28.260 --> 24:28.820
对不对

24:28.820 --> 24:29.980
监听

24:30.020 --> 24:31.980
因为监听一个地址变化

24:31.980 --> 24:33.940
当地址发生变化的时候

24:33.940 --> 24:34.980
我要干嘛

24:34.980 --> 24:36.780
你给我一个新的地址

24:36.780 --> 24:37.740
新的nation

24:37.740 --> 24:38.860
新的nation

24:38.860 --> 24:39.220
对吧

24:40.660 --> 24:41.180
没问题吧

24:41.180 --> 24:42.140
你给我一个新的nation

24:42.140 --> 24:43.260
一个新的nation

24:43.260 --> 24:45.100
那么我们按照之前的做法

24:45.100 --> 24:46.580
由于这个history对象

24:46.580 --> 24:48.460
它里边nation它不会变化

24:48.460 --> 24:49.340
不会变化

24:49.340 --> 24:51.100
所以我们之前是不是做了一件事

24:51.100 --> 24:52.020
把这个

24:53.100 --> 24:54.580
probs的history

24:54.580 --> 24:55.180
它的什么

24:55.180 --> 24:55.860
nation

24:55.860 --> 24:56.980
改成这个nation

24:56.980 --> 24:57.540
对吧

24:57.540 --> 24:59.100
我当时做了这么一件事

24:59.100 --> 24:59.940
还记得吗

25:00.700 --> 25:02.020
因为我们之前演示的时候

25:02.020 --> 25:03.660
比如说这个nation它不会变化

25:03.660 --> 25:04.260
它没有自己

25:04.260 --> 25:05.780
它没有帮你做这件事情

25:05.780 --> 25:07.100
那么你自己去完成吧

25:07.100 --> 25:08.340
把nation改一下

25:08.340 --> 25:09.220
然后呢

25:09.220 --> 25:10.540
是不是要改变状态了

25:10.540 --> 25:12.540
一改变状态是不是倒是重新刷新组建了

25:12.540 --> 25:13.980
重新宣传组建了

25:13.980 --> 25:14.660
改变状态

25:14.660 --> 25:16.020
set state

25:16.020 --> 25:16.740
这个状态

25:16.740 --> 25:17.420
location

25:17.420 --> 25:18.580
是不是要给它重新复制

25:18.580 --> 25:20.220
复制为新的location对吧

25:20.220 --> 25:22.420
就复制为这个新的location对不对

25:23.020 --> 25:25.020
就是给它加一个监听器

25:25.020 --> 25:26.140
加个监听器

25:26.140 --> 25:27.860
那么当然它返回的是一个什么

25:27.860 --> 25:28.700
返回的是一个

25:29.700 --> 25:31.140
nation对吧

25:31.140 --> 25:32.100
取消监听

25:32.100 --> 25:33.780
那么我们把它保存在对象里边

25:33.780 --> 25:35.660
当有一天组建卸载的时候

25:35.660 --> 25:36.500
component

25:37.140 --> 25:38.580
will amount

25:39.100 --> 25:40.780
当组建有一天要卸载的时候

25:40.780 --> 25:42.140
我们调用这个nation

25:42.980 --> 25:44.420
去取消监听对吧

25:44.420 --> 25:45.220
取消监听

25:46.460 --> 25:46.700
对吧

25:46.700 --> 25:48.380
当然不太可能消失

25:48.380 --> 25:49.580
这个不太可能消失

25:50.220 --> 25:50.900
就完了

25:51.500 --> 25:52.140
就完了

25:52.140 --> 25:54.020
你看一下加了监听器过后

25:54.740 --> 25:55.540
怎么再来

25:55.780 --> 25:56.940
加监听器过后

25:58.700 --> 26:00.140
我们控制台里边再来

26:01.580 --> 26:02.260
我点这个按钮

26:02.260 --> 26:02.900
点这个按钮

26:03.380 --> 26:03.900
跳转

26:06.500 --> 26:08.140
加了监听器nation

26:09.300 --> 26:10.140
set state

26:10.140 --> 26:11.620
我们看一下这里有没有运行

26:14.920 --> 26:15.680
随便打一个

26:18.940 --> 26:19.380
跳转

26:20.700 --> 26:21.420
没运行的

26:22.100 --> 26:22.700
没有输出

26:23.060 --> 26:24.180
我看一下怎么回事

26:28.940 --> 26:30.020
这component的mount

26:30.020 --> 26:30.740
这个应该运行了

26:31.220 --> 26:32.020
这个应该运行了

26:32.620 --> 26:33.140
看一下吧

26:34.900 --> 26:35.780
这个都没有运行

26:36.300 --> 26:37.700
component的mount都没有运行

26:39.300 --> 26:40.660
适用了这个组建吗

26:41.340 --> 26:42.300
适用了这个组建

26:42.460 --> 26:43.500
我怎么有点怀疑了

26:44.020 --> 26:45.980
component的mount都没有运行

26:46.500 --> 26:47.500
这个也太夸张了吧

26:48.340 --> 26:49.060
这个得运行

26:52.040 --> 26:53.360
再看一下

26:55.480 --> 26:55.880
刷新

26:56.400 --> 26:57.120
要刷新一次

26:57.120 --> 26:57.880
刷新一次

26:58.280 --> 26:58.440
好

26:58.440 --> 26:59.000
那么现在呢

26:59.640 --> 27:00.000
跳转

27:00.000 --> 27:01.520
你看是不是监听事件发生了

27:01.520 --> 27:01.920
对不对

27:02.280 --> 27:02.440
好

27:02.440 --> 27:02.960
那么这样子

27:03.200 --> 27:05.080
你后边无论去怎么去跳转页面

27:05.080 --> 27:06.240
怎么去跳转页面

27:06.240 --> 27:07.360
那么他都会

27:07.360 --> 27:09.000
比方说我们这里按钮跳转

27:09.000 --> 27:09.600
再加个按钮

27:10.040 --> 27:10.920
就跳转1

27:10.920 --> 27:11.840
跳转123

27:12.480 --> 27:13.720
下面一个跳转abc

27:15.280 --> 27:15.800
abc

27:16.280 --> 27:16.840
abc

27:17.120 --> 27:18.600
那么到时候使用这个kiss对象

27:18.840 --> 27:20.720
在做跳转的时候是不是可以监听到了

27:20.720 --> 27:22.040
监听到这个跳转过后

27:23.480 --> 27:25.840
他就会导致这个组建重新宣传

27:26.880 --> 27:27.840
重新宣传过后

27:28.040 --> 27:28.880
因为他状态变了

27:29.280 --> 27:30.480
状态一变是不是重新宣传

27:30.720 --> 27:31.880
重新宣传过后

27:31.880 --> 27:34.040
是不是就重新拿到这个什么都可以信

27:34.040 --> 27:35.080
重新拿到这个march

27:35.080 --> 27:35.480
对吧

27:35.880 --> 27:36.920
然后给他传过去

27:37.080 --> 27:37.520
对不对

27:38.440 --> 27:39.200
没问题吧

27:39.880 --> 27:41.480
那么这里就是这种做法

27:41.720 --> 27:42.800
做个监听器就完事了

27:42.800 --> 27:44.320
非常非常非常简单

27:45.440 --> 27:45.600
好

27:45.600 --> 27:46.600
那么这个东西就做完了

27:46.600 --> 27:47.160
你还发现没

27:47.160 --> 27:47.680
就做完了

27:47.680 --> 27:49.200
咱们把这个按钮当下把刀去掉

27:50.520 --> 27:51.400
其实就做完了

27:51.400 --> 27:52.160
做完了

27:52.160 --> 27:53.880
他的作用就是很简单

27:53.880 --> 27:55.240
提供一个上下文件完事了

27:56.560 --> 27:57.880
那么接下来我们来看这个

27:58.000 --> 27:58.880
上下文件搞定了

27:59.640 --> 28:00.680
那么我们来看这个

28:01.080 --> 28:02.680
这些东西在干嘛的呢

28:02.680 --> 28:04.000
他们又是在干嘛的呢

28:04.000 --> 28:04.640
是什么鬼呢

28:04.640 --> 28:05.040
他们

28:05.720 --> 28:08.000
他们实际上是属于另外一个酷

28:08.000 --> 28:10.520
叫做rexrouterdom那个酷

28:11.560 --> 28:13.160
routerdom那个酷

28:13.360 --> 28:14.600
它是这个酷提供的

28:14.600 --> 28:16.040
就是这个酷它其实很简单

28:16.040 --> 28:16.960
它就提供一个router

28:16.960 --> 28:17.760
它提供上下文

28:17.760 --> 28:19.840
它也不管这个History对象是哪来的

28:19.840 --> 28:20.720
它什么都不管

28:20.840 --> 28:21.720
什么都不管

28:21.880 --> 28:23.360
那么是由这个酷

28:23.880 --> 28:25.000
是用这个酷

28:25.360 --> 28:28.840
来搞定就是History对象的

28:29.320 --> 28:30.760
这个酷来搞定History对象

28:31.040 --> 28:32.160
所以说按理说

28:32.160 --> 28:33.160
实际上实际上

28:33.160 --> 28:34.880
这个History这个文件

28:34.880 --> 28:36.280
文件夹应该在这

28:36.720 --> 28:37.400
应该在这

28:37.760 --> 28:39.480
因为这个酷才需要用到这个东西

28:39.920 --> 28:42.280
这个酷才需要用到这个History对象

28:42.280 --> 28:43.440
比如说我们这里

28:44.280 --> 28:46.840
这里写一个browser

28:47.440 --> 28:50.760
browserhistory.js

28:51.680 --> 28:52.720
比如说这么一个组件

28:52.720 --> 28:54.560
browserhistory.js这个组件

28:54.720 --> 28:55.600
那么你看一下

28:55.840 --> 28:57.640
rexrouter这个组件其实很简单

28:57.680 --> 28:58.680
它就提供一个router

28:58.880 --> 28:59.960
你给我传一个History

28:59.960 --> 29:01.320
我管理这个History哪来的

29:01.520 --> 29:02.520
你给我传就行了

29:02.640 --> 29:03.960
这个browserhistory这个组件

29:03.960 --> 29:04.520
它用来干嘛

29:04.760 --> 29:07.480
它的作用就是用来创建一个History对象

29:07.680 --> 29:09.680
然后包装一个router

29:09.880 --> 29:10.400
没了

29:10.960 --> 29:11.960
它就在做这个事情

29:11.960 --> 29:12.760
其他都没了

29:13.280 --> 29:14.920
咱们来写个内组件

29:15.920 --> 29:16.680
它来做什么事情

29:17.040 --> 29:18.640
它做的事情很简单

29:19.240 --> 29:22.760
就是创建一个History对象

29:23.080 --> 29:24.120
创建一个History对象

29:24.120 --> 29:24.920
那么这个字就对象

29:24.920 --> 29:26.160
只用创建一次就行了

29:26.720 --> 29:27.640
那个字就像哪来的

29:27.960 --> 29:30.320
什么来自于History对吧

29:30.320 --> 29:31.200
来自于History

29:31.600 --> 29:34.200
导入这个create browser history

29:34.200 --> 29:35.840
它就通过它来创建一个History

29:36.360 --> 29:38.040
这就是这个组件的作用

29:38.200 --> 29:38.800
看那个图

29:39.240 --> 29:40.840
它的主要功能就是创建History

29:40.920 --> 29:41.920
把它传递给它

29:42.280 --> 29:44.280
它的作用是创建上下文

29:44.600 --> 29:46.080
它不管那个History哪来的

29:46.640 --> 29:47.880
那么这个组件你看一下

29:48.280 --> 29:48.880
browser history

29:49.280 --> 29:49.720
怎么写

29:49.760 --> 29:50.400
名字写错了

29:50.440 --> 29:51.360
不要说router

29:53.000 --> 29:53.560
browser

29:54.840 --> 29:55.320
router

29:56.280 --> 29:56.880
换个名字

29:57.160 --> 29:58.320
这里是browser

29:58.800 --> 29:59.280
router

29:59.880 --> 30:00.400
这个名字

30:00.960 --> 30:03.840
那么这个组件它就从来创建History的

30:04.080 --> 30:04.800
怎么创建的

30:05.400 --> 30:06.080
怎么创建的

30:06.520 --> 30:08.840
你看着我直接在这里写一个History

30:08.840 --> 30:09.400
直接写一个

30:09.400 --> 30:10.240
都不用什么State

30:10.240 --> 30:10.800
啥都不用

30:11.000 --> 30:12.160
就写个属性History

30:12.280 --> 30:12.840
怎么来的

30:13.120 --> 30:15.720
调用create browser history

30:16.240 --> 30:17.680
那么这里边是不是有配置

30:17.680 --> 30:19.520
创建History对象的时候是不是有配置

30:20.800 --> 30:21.800
这个属性

30:22.120 --> 30:24.120
这个组件的所有属性

30:24.280 --> 30:25.760
刚好就对应它的配置

30:26.480 --> 30:27.200
配置是啥

30:27.800 --> 30:28.600
这个配置是啥

30:28.720 --> 30:30.040
这个配置就是this props

30:32.710 --> 30:33.230
就是这个

30:33.510 --> 30:34.110
this props

30:34.750 --> 30:36.750
我的属性全部都是配置

30:37.270 --> 30:38.270
全部都是配置

30:39.070 --> 30:39.870
你说browser

30:39.870 --> 30:40.350
router

30:40.350 --> 30:42.230
这里边这个组件需要的属性

30:42.630 --> 30:45.110
就是来用于创建History的

30:45.590 --> 30:46.550
那么你给它的属性

30:46.550 --> 30:47.790
它就会把它作为配置

30:47.790 --> 30:48.510
配置对象

30:48.510 --> 30:49.110
传进去

30:50.030 --> 30:51.350
传到这个海水里边去

30:51.350 --> 30:52.190
来完成配置

30:52.670 --> 30:53.590
就这么简单

30:53.870 --> 30:54.710
就这么简单

30:55.590 --> 30:57.790
那么它创建了History对象过后

30:57.790 --> 30:58.310
干嘛

30:58.990 --> 31:00.070
导入router

31:01.950 --> 31:03.590
导入router from

31:03.990 --> 31:04.590
点儿写钢

31:04.750 --> 31:05.550
点儿写钢

31:05.710 --> 31:06.990
返回rexrouter

31:07.470 --> 31:08.870
这就是这两个库的关系

31:08.870 --> 31:09.990
我们不是有两个库吗

31:09.990 --> 31:11.270
一个是rexrouter

31:11.270 --> 31:12.350
一个是rexrouter

31:12.750 --> 31:14.230
多么具体的实现

31:14.390 --> 31:16.390
router就是一些抽象的行为

31:16.830 --> 31:18.350
我不管你这个东西哪来的

31:18.350 --> 31:19.550
反正我哪来的用用就行了

31:19.910 --> 31:21.910
特别像一个History是最典型的

31:21.910 --> 31:22.270
对吧

31:22.270 --> 31:24.390
它用来创建上下文各种各样的东西

31:24.670 --> 31:26.070
但是具体提供History的

31:26.070 --> 31:26.830
是这些东西

31:27.310 --> 31:28.550
就形成这么一种结构了

31:28.790 --> 31:30.350
那么这里它返回的是咋了

31:30.350 --> 31:31.190
返回的很简单

31:31.190 --> 31:31.790
就router

31:32.750 --> 31:34.190
你不是要那个History吗

31:34.190 --> 31:34.430
行

31:34.430 --> 31:34.910
我给你

31:35.390 --> 31:36.590
我把一个History给你

31:36.990 --> 31:38.190
History来着哪

31:38.190 --> 31:39.150
rexr history

31:39.630 --> 31:40.590
这个东西不是状态

31:40.590 --> 31:41.590
也不是属性

31:41.670 --> 31:42.350
你给我的属性

31:42.350 --> 31:43.430
我通过给我的属性

31:43.430 --> 31:44.750
我来创建一个History对象

31:44.750 --> 31:46.590
这个东西只用创建一次就行了

31:46.590 --> 31:47.470
创建那么多干嘛

31:47.990 --> 31:49.830
我们整个网站只需要一个就行了

31:50.790 --> 31:51.630
创建一个History对象

31:51.630 --> 31:52.390
给他就行了

31:52.390 --> 31:53.630
他会去创来创来创下文

31:53.630 --> 31:56.390
然后你把给我的气候准也给他

31:56.670 --> 31:57.590
你把给我的气候准

31:57.790 --> 31:58.670
我也会给他

31:59.030 --> 31:59.830
Prob's气候准

32:00.910 --> 32:02.030
当然这个属性里边的气候准

32:02.030 --> 32:02.830
我们是不需要的

32:02.870 --> 32:03.590
无所谓传给他

32:03.670 --> 32:04.590
他反正他也不用

32:05.470 --> 32:06.430
把这个气候准给你

32:06.830 --> 32:07.070
对吧

32:07.070 --> 32:07.670
就完了

32:07.950 --> 32:08.150
好

32:08.150 --> 32:08.750
咱们来看一下

32:08.750 --> 32:09.470
来用一下

32:10.470 --> 32:12.070
在app里边

32:12.070 --> 32:13.870
我们导入就不到导入这了

32:14.070 --> 32:14.750
导入什么

32:14.750 --> 32:16.150
rexrouter.

32:16.270 --> 32:17.430
这里面不是有一个

32:18.870 --> 32:19.750
browser

32:21.550 --> 32:22.190
router.

32:22.190 --> 32:23.590
我们这里还要一个默认导出

32:23.710 --> 32:24.830
默认导出文件

32:25.030 --> 32:25.710
你再解释

32:25.750 --> 32:26.910
他专门来用来导出的

32:27.950 --> 32:29.510
以后大家写一些公共的模块

32:29.510 --> 32:30.870
都可以用类似的方式来做

32:31.150 --> 32:32.070
defaults

32:33.310 --> 32:35.230
就是先把browserrouter导入进来

32:35.230 --> 32:37.310
然后把他的默认东西导出

32:37.510 --> 32:38.150
导出为什么

32:38.510 --> 32:40.150
browserrouter

32:40.590 --> 32:41.190
导出这个

32:42.150 --> 32:42.710
那么这里

32:42.830 --> 32:44.390
就是browserrouter

32:44.990 --> 32:45.590
那么这里呢

32:46.430 --> 32:46.910
看一下

32:50.400 --> 32:51.240
这里不需要了

32:51.400 --> 32:52.160
这东西不需要了

32:52.720 --> 32:53.160
保存

32:53.600 --> 32:54.080
看一下吧

32:55.520 --> 32:56.000
他说什么

32:57.000 --> 32:59.440
router is not exported

32:59.600 --> 33:01.720
from rexrouter

33:02.000 --> 33:02.680
我看一下

33:06.620 --> 33:08.660
browserrouter

33:08.940 --> 33:09.740
browserrouter

33:09.740 --> 33:10.060
哦

33:10.060 --> 33:10.340
这里

33:10.340 --> 33:11.500
直接在这里导入

33:11.620 --> 33:12.260
在这里导入

33:12.260 --> 33:13.100
但他的默认

33:13.220 --> 33:14.340
就是router的一个index

33:14.340 --> 33:15.700
从index里面导出

33:16.060 --> 33:17.820
index里面往往就是默认导出

33:17.820 --> 33:18.980
也就是导出一些

33:19.180 --> 33:21.060
我们需要包裹在外面使用的东西

33:21.380 --> 33:21.900
OK

33:22.420 --> 33:22.980
那么你看一下

33:22.980 --> 33:24.580
我们现在是不是用自己的了

33:24.580 --> 33:24.980
对吧

33:25.100 --> 33:25.860
保存你看一下

33:27.260 --> 33:28.100
看一下我们的主件结构

33:29.460 --> 33:29.940
rex

33:30.980 --> 33:31.260
好

33:31.260 --> 33:32.300
app里边browserrouter

33:32.300 --> 33:32.660
看到没

33:32.660 --> 33:33.700
是不是没有任何东西

33:33.700 --> 33:35.700
但是router里面是不是给他传了个kiss对象

33:35.700 --> 33:36.180
对吧

33:36.300 --> 33:38.260
他有自己的状态location

33:38.380 --> 33:39.300
你可以去对照一下

33:39.540 --> 33:40.660
对照一下rex

33:41.100 --> 33:43.340
就是我们之前使用的官方的那个

33:43.340 --> 33:43.700
cool

33:43.900 --> 33:45.100
rexrouter的那个cool

33:45.340 --> 33:46.740
你可以发现是一模一样的

33:46.740 --> 33:47.620
properlyde

33:47.620 --> 33:48.340
你看value

33:48.340 --> 33:48.860
对吧

33:49.180 --> 33:50.540
而且他加了一个监听器

33:50.780 --> 33:51.700
加了一个监听器

33:51.700 --> 33:53.500
只要发现地址变化了

33:53.500 --> 33:54.900
他会收到通知

33:55.140 --> 33:55.980
会收到消息

33:57.220 --> 33:57.660
看到没

33:57.660 --> 33:58.420
是不是没问题了

33:58.940 --> 33:59.500
对不对

33:59.580 --> 34:00.220
没问题吧

34:00.940 --> 34:01.260
好

34:01.260 --> 34:01.980
那么这一块

34:01.980 --> 34:02.740
是不是搞定了

34:03.700 --> 34:04.260
搞定了

34:04.260 --> 34:04.620
好

34:04.620 --> 34:05.740
那么就形成这么一种结构

34:06.180 --> 34:07.580
向来大家去做一下

34:07.580 --> 34:08.180
去做一下

34:08.180 --> 34:09.260
当然也在这里

34:09.260 --> 34:10.620
是不是还可以加上其他东西

34:10.620 --> 34:11.740
比方说

34:11.860 --> 34:13.300
哈希router是不是一样的

34:13.300 --> 34:13.820
对吧

34:14.540 --> 34:16.140
创建哈希history的时候

34:16.140 --> 34:17.580
需要的配置对象传进来

34:17.780 --> 34:18.700
比方说你看这里

34:18.700 --> 34:19.660
这样子

34:20.180 --> 34:21.940
咱们在那个

34:22.860 --> 34:23.820
我的q准的

34:23.980 --> 34:24.860
我没有写q准

34:24.860 --> 34:25.500
写个q准

34:25.500 --> 34:26.220
随便写个吧

34:27.020 --> 34:28.140
是不是可以显示出来

34:29.140 --> 34:30.060
然后就是说

34:30.060 --> 34:31.340
我们在这个地方

34:31.340 --> 34:32.380
是不是可以写属性

34:32.380 --> 34:32.900
对吧

34:33.100 --> 34:33.980
写什么属性的

34:33.980 --> 34:34.980
你就看那个

34:34.980 --> 34:35.780
希router的对象

34:35.780 --> 34:36.860
他需要什么属性

34:37.300 --> 34:38.420
他需要什么配置

34:38.660 --> 34:39.500
你有写什么配置

34:39.500 --> 34:40.820
他不是叫basename吗

34:40.820 --> 34:41.460
对不对

34:41.820 --> 34:41.980
好

34:41.980 --> 34:42.540
来吧

34:44.140 --> 34:44.860
basename

34:46.020 --> 34:46.740
basename

34:46.740 --> 34:47.580
比方说

34:47.780 --> 34:48.460
news

34:48.460 --> 34:48.780
对吧

34:48.780 --> 34:49.460
basename

34:49.460 --> 34:50.580
那么就是一样的道理

34:50.700 --> 34:51.340
一样的道理

34:51.340 --> 34:51.820
news

34:51.820 --> 34:52.580
abc

34:52.860 --> 34:53.420
123

34:53.420 --> 34:53.980
随便吧

34:54.500 --> 34:55.860
咱们来看一下吧

34:56.340 --> 34:57.020
这个

34:58.020 --> 34:59.500
就是

35:00.500 --> 35:01.500
provider里边

35:01.500 --> 35:02.700
provider里边

35:02.820 --> 35:03.620
provider里边

35:03.620 --> 35:05.420
他Value里边不是有个location吗

35:05.420 --> 35:07.020
location是不是abc123

35:07.020 --> 35:07.300
对吧

35:07.300 --> 35:08.580
他去掉了basename

35:08.580 --> 35:09.220
对不对

35:09.900 --> 35:10.660
basename

35:10.660 --> 35:12.060
你在这里给这个逐渐

35:12.060 --> 35:13.260
组建传的属性

35:13.620 --> 35:14.260
他就会把这个

35:14.260 --> 35:15.340
组建的属性

35:15.340 --> 35:17.060
用于来创建history

35:17.340 --> 35:18.100
这就是这个组建的

35:18.100 --> 35:19.140
最本质的作用

35:19.340 --> 35:21.100
他的属性就是来创建history的

35:21.100 --> 35:21.460
他创建

35:21.460 --> 35:22.500
为什么要创建history

35:22.700 --> 35:23.580
创建到history

35:23.580 --> 35:25.100
他才好把history属性

35:25.100 --> 35:26.420
传递给这个rotor

35:26.500 --> 35:27.580
这个rotor干嘛用的

35:27.580 --> 35:28.900
他就是根据history

35:28.900 --> 35:29.820
来进行监听

35:29.820 --> 35:31.500
并且提供一个上下文

35:32.660 --> 35:34.620
就是他们的这些组建的关系

35:35.740 --> 35:37.100
比方说这里是不是还可以写

35:37.100 --> 35:41.060
get user confirmation

35:41.060 --> 35:41.420
对不对

35:41.420 --> 35:42.340
是不是可以写这个东西

35:42.340 --> 35:42.820
对吧

35:42.820 --> 35:43.460
写个函数

35:43.460 --> 35:43.940
对不对

35:43.940 --> 35:44.900
来进行阻止

35:44.900 --> 35:45.940
来进行阻止

35:46.940 --> 35:47.380
都可以写

35:47.380 --> 35:49.020
因为这里的配置全部要传过去了

35:49.180 --> 35:50.220
全部要传过去了

35:50.780 --> 35:51.540
就这么个意思

35:51.940 --> 35:52.820
就这么个意思

35:53.580 --> 35:54.980
那么大家先下来

35:55.020 --> 35:56.300
把这个browserrotor

35:56.300 --> 35:57.820
我们哈修rotor也有兴趣的话

35:57.820 --> 35:58.340
自己去写

35:58.340 --> 35:59.460
利用了个第三张库

35:59.460 --> 36:00.780
是一个很简单很简单

36:00.780 --> 36:01.180
一样的

36:02.180 --> 36:03.620
还是memoryrotor也有兴趣

36:03.620 --> 36:04.260
自己去写

36:04.260 --> 36:06.740
但是你至少要把这个结构写出来

36:06.980 --> 36:07.940
写出这样的结构

36:08.420 --> 36:10.020
便于我们后表写后续的逐渐

36:10.020 --> 36:10.980
其实你会发现

36:10.980 --> 36:12.220
咱们搞定了之前的

36:12.220 --> 36:12.820
复杂的事情

36:12.820 --> 36:14.540
这些事情就变得非常简单了

36:15.020 --> 36:16.020
下来把他写一遍

