WEBVTT

00:01.750 --> 00:03.990
来吧 咱们做一个练习啊

00:04.590 --> 00:10.990
就利用我们之前学过的后可的知识 咱们呢 这个练习呢 全部使用韩数组件完成

00:11.790 --> 00:18.270
嗯 我们要做的效果呢 是这么一个效果啊 就是说我们要做成一个学生列表 然后可以分业的学生列表

00:18.990 --> 00:23.070
好 咱们来试一下啊 试了做一下啊 我们这里呢 新建一个组件

00:23.950 --> 00:25.950
这个组件呢 给它设置

00:26.190 --> 00:30.350
这是建成component里面吧 在这里边 新建个文件夹

00:30.910 --> 00:36.030
给它取个名字叫做student list 对吧 一个学生列表的这么一个组件

00:36.750 --> 00:42.350
好 咱们呢 新建这么一个组件啊 在这里边呢 去写上一个index的点介绍

00:43.390 --> 00:46.750
这个组件啊 我们就不再使用内组件了啊 用韩数组件

00:47.470 --> 00:54.030
那么这个组件名字叫做student list啊 要显示一个学生列表啊 这是一个学生

00:54.750 --> 00:56.750
列表的组件

00:59.070 --> 01:02.670
好 这个组件里边 我们要做什么事呢 这个组件里边

01:03.230 --> 01:08.830
我们要做的事情就是啊 你给我传递一个什么 传递一个业码

01:09.550 --> 01:15.710
然后呢 我会根据这个业码呢 从服务器呢 去读取一个学生列表出来

01:16.110 --> 01:21.230
啊 这就是咱们要做的事情 你给我传一个列表咱们呢 会再跟 给我传一个业码

01:21.550 --> 01:26.190
会根据这个业码呢 从服务器去读取数据 所以说呢 这里呢 业码呢 我们用一个props

01:27.390 --> 01:31.870
啊 用props 就是一个属性来表示啊 就属性里边呢 有一个业码

01:32.190 --> 01:35.950
当然呢 我们也可以利用我们之前学过的知识 比方说student list里边

01:36.030 --> 01:43.870
说可以给他进行属性的约束 对吧prop types 对吧 属性的约束可以给他进行约束啊 那行吧 我们把写完善一点啊

01:44.510 --> 01:48.110
props uh prop types from

01:48.910 --> 01:50.910
prop types

01:51.710 --> 01:57.870
啊 这里呢 给他约束一下啊 就是这里边有哪些属性呢 就一个属性 就是业码 page

01:58.510 --> 02:02.990
啊 这么个业码 它类型呢 是什么呢prop types 它的类型是number

02:03.470 --> 02:08.190
也是required 并且呢 我们还可以给他设置一个mortems student list

02:08.990 --> 02:10.510
default props

02:11.870 --> 02:16.590
mortems呢 这个page的mortems是啥呢 mortems是1啊 比方说啊1

02:17.550 --> 02:20.190
行了啊 那咱们呢 这就写好了

02:20.910 --> 02:28.030
我们这里呢 由于只有一个属性对吧 我们也明确的知道有哪些属性 其实这里呢 我们还可以利用啊 之前咱们没有写过这样的代码

02:28.190 --> 02:34.510
然后这里呢 我们可以利用解构啊 这也学过了对吧 把参数进行解构 解构出来这个配级啊

02:34.750 --> 02:36.830
从参数里边解构出来这个配级属性

02:38.190 --> 02:42.030
好 那么这里呢 我要渲染啥呢 是不是要渲染一个列表出来

02:42.510 --> 02:47.790
对不对 要不然数据得给他渲染出来 那么渲染数据的时候呢 我们这里

02:49.150 --> 02:54.270
渲染数据的时候呢 我们要用这个阿迪克斯请求啊 看一下我们之前写的阿迪克斯请求啊

02:55.390 --> 02:59.790
呃 之前写的阿迪克斯请求好像没有分页啊 好像是没有分页

03:00.830 --> 03:06.110
呃 我看一下分页是哪一个呢 没忘了 关键是没忘了

03:06.750 --> 03:07.950
呃 我们这里看一下啊

03:08.670 --> 03:14.830
嗯 账号是多少啊 demo 12

03:16.430 --> 03:22.350
是这个吗 试一下啊 账号密码错误 1 2 3 4 5 6

03:23.550 --> 03:26.830
账号密码错误 完了 我又忘了账号密码了

03:28.430 --> 03:30.670
啊 那等一下啊 我去查一下账号密码是多少

03:31.470 --> 03:33.550
啊 好 查到了啊 demo 13

03:34.270 --> 03:39.790
啊 进去啊 找到这个学生信息管理系统

03:40.430 --> 03:42.590
然后呢 这里边有一个

03:44.750 --> 03:49.870
捷口文档里边啊 查询分业查询学生 okay 啊 这里

03:50.990 --> 03:55.790
我把这个复制一下 扔过来 然后呢 这里 api 啊 通过这个查询

03:58.180 --> 04:03.540
啊 通过这个查询 好这个缺少 key 对吧 app key

04:04.500 --> 04:08.260
要放过来啊 试一下 先测试一下 是不是能够争取的查询成功

04:10.100 --> 04:10.980
key呢 等于这个

04:13.760 --> 04:18.960
然后呢 还不行 还要少一个参数啊 少一个参数配级啊 少个参数配级

04:19.680 --> 04:24.000
参数配级的话 咱们就使用配级为10

04:25.360 --> 04:29.120
或者说配级为配级为1啊 然后呢 size

04:29.680 --> 04:31.440
就是每页线是多少条 为10条

04:32.240 --> 04:34.880
哎 现在查询查询出来了啊 okay 没问题

04:35.920 --> 04:38.160
嗯 看一看啊 有没有什么问题

04:39.120 --> 04:42.880
啊 应该是没有什么问题啊 应该是没有什么问题

04:43.760 --> 04:47.520
好 那行了啊 那咱们就把这个东西是不是查出来了 对吧 查出来了

04:48.720 --> 04:53.120
好 接下来呢 你告诉我夜码 然后呢 我会去帮你印查询

04:53.120 --> 04:56.320
所以说我这里呢 先写出这么一个函数啊

04:56.640 --> 05:00.320
这个函数呢 是按照夜码来查询学生 get student

05:01.280 --> 05:05.280
你给我传参数 一个参数呢 是配级啊 夜码 默认为1

05:05.680 --> 05:12.560
然后呢 给我传一个limit 就是每页线多少条啊 默认为10 我们先把这个函数给他写好 写好再说

05:13.360 --> 05:17.600
好 那么这个函数得到啊 我们从 直接去查询 aways fetch

05:18.880 --> 05:20.880
啊 我这里去顺便说一下啊 就说到这来了

05:21.200 --> 05:23.840
就是说呢 我们有的时候呢 请求啊 大家可是请求啊

05:24.240 --> 05:29.200
嗯 可能我们在开发阶段呢 使用的是一个地址 就请求这个地址

05:29.680 --> 05:37.760
有可能在真实的项目上线过后呢 可能会去请求另一个地址啊 所以说呢 我们最好呢 就这个东西啊 不要把他写死

05:38.080 --> 05:45.280
写死的话 我们将来项目上线的时候呢 要改起来就比较比较麻烦了啊 所以说 我们这里呢 通常会这样做啊

05:45.600 --> 05:49.280
在piket.com里边 在这里边 给他写上一个代理

05:50.080 --> 05:58.080
就是请求代理 当我们请求一个请求一个ax请求的时候呢 他会把它发送到这个地址啊 这样子配置 配置一个代理proxy

05:58.640 --> 06:04.160
好 那么这里直接写个字不说就完事了啊 就是我们发送请求的时候呢 实际上是发生了发送到这个地址

06:04.800 --> 06:07.440
啊 实际上是发送到这个地址 我们把这个代理写好

06:08.240 --> 06:14.400
好 写好了之后呢 咱们把这个之后请求的时候呢 就前面这一段就不要了啊 只需要写后面这一段就行了

06:14.560 --> 06:19.520
因为到时候发送请求的时候呢 他会在自动的前面加上这么一个代理啊 顺便说一下

06:20.080 --> 06:24.160
好 这里呢 请求api 哪个哪个地址啊 我要复制一下

06:24.880 --> 06:29.760
啊 复制一下啊 我们只用 只用模板表了 是吗

06:30.480 --> 06:37.040
好 这个app key呢 我们来自于app key啊 这个配级呢 来自于参数

06:38.240 --> 06:42.160
配级好 这个size呢 来自于参数size

06:42.800 --> 06:49.840
那边参数limit 好 我们请求这么个地址 好 请求这个地址过后呢 是后面是不是一样的 对吧 得到节省啊

06:50.800 --> 06:54.880
好了 好吗 得到节省啊 节省里边 我们后边呢 看一下

06:55.760 --> 07:02.880
啊 得到data数据啊 data数据里边呢 有很多相关的数据 比方说总量啊 数据的总数以及呢 是吗 以及的就是

07:03.680 --> 07:09.280
得到了具体数据 对吧 哎 这些东西全部拿到啊 全部都拿到 好 那么我们把个data返回

07:09.840 --> 07:11.280
就完事了啊 一通

07:12.960 --> 07:19.280
那返回 好 于是呢 我们就写出来这么一个函数 行了 来测试一下呗 测试一下这个玩意

07:19.920 --> 07:24.480
好 然后我们在这里呢 为了方便测试 我们就直接在index里面写吧啊

07:25.840 --> 07:28.400
写上这么一个 调用这么一个student

07:29.680 --> 07:32.960
啊 导书进来 先测试一下吧啊 先不过不着急啊 慢慢写

07:34.720 --> 07:35.520
from

07:36.080 --> 07:38.000
叫写杠 呃services

07:38.880 --> 07:41.920
students里边啊 有一个方法叫get students

07:42.880 --> 07:49.680
好 那么我们调用这个方法啊get students 给他传一个页嘛 传一个就是业容量进去啊 然后得到一个结果

07:50.000 --> 07:50.800
z

07:52.480 --> 07:54.480
我们这里输出这个data

07:55.600 --> 07:58.720
好 试一下啊 保存 看一下这边啊

08:00.080 --> 08:04.080
保存 这边 哎 这出问题了啊 出问题了 他说啥呢

08:04.960 --> 08:06.160
啊 哪里出问题了

08:07.360 --> 08:13.280
呃 刷新看一下啊 有没有网络请求又没发出去 网络请求看一下有没有发出去

08:14.800 --> 08:15.280
哎

08:16.640 --> 08:17.360
看一下啊

08:18.240 --> 08:26.240
呃 网络请求有问题啊 有问题哦 知道了啊 因为我们改动了package点节省过后了 我们没有重启服务器

08:26.240 --> 08:32.240
这个需要重启服务器的啊 这个是需要重启服务器的 啊 再重新启动一次start

08:33.680 --> 08:40.480
啊 凡是改动了这种整个项目的配置的话 需要重新启动服务器 特别像这个package点节省啊 需要重新编译

08:41.840 --> 08:46.820
啊 重新来啊 点击右键检查 看一下啊

08:46.900 --> 08:47.380
看一下啊

08:48.900 --> 08:55.940
是不是拿到了 对吧 得到了一个属性 count 啊 一个翻by page 这是数据 好就拿到这个东西了

08:56.580 --> 09:01.140
好 那么将来呢 我们就可以调用这个函数啊 非常方便 调用这个函数了 可以拿到学生数据

09:02.260 --> 09:08.020
没问题吧 没问题吧 ok啊 那现在呢 我们接着来写啊 写这个student list

09:08.580 --> 09:14.340
这个组件呢 其实有多种写法 比方说我们可以认为呢 这个组件呢 他自己没有任何状态

09:14.740 --> 09:20.420
啊 他自己没有任何状态 你只需要把学生的数据传给我 那么我帮你显示 这是一种做法

09:21.220 --> 09:25.940
另外呢 我们也可以认为呢 这个函数呢 他是有状态的 你只需要告诉我夜马

09:26.340 --> 09:30.260
然后告诉我夜马之后呢 我来进行查询啊 我自己来进行查询

09:31.140 --> 09:33.860
啊 我根据这个夜马呢 去查询出一个结果

09:34.820 --> 09:43.060
那么这里有多种做法啊 当然呢 如果你给他一个数组 学生数组 把显示出来 那么这个函数 这个这个这个组件呢 就是个无状态组件

09:43.300 --> 09:47.940
对吧 你学生的数据是你给我的 我也没有做任何事情 我没有做任何事情

09:48.340 --> 09:53.940
当然呢 如果你认为这个组件他是有状态的 他自己来能够自己进行查询的话 那又是另外一回事了

09:54.260 --> 09:58.980
总之呢 不管怎么样吧 不管怎么样 我们这一块呢

09:59.940 --> 10:06.660
就这一块呢 我们比方说吧 我们好像也没有做过这种啊 就是学生列表 他有自己的状态这种情况

10:06.900 --> 10:10.660
好 那么我们把他认为是有自己的状态 对吧 都可以做啊 都可以做

10:11.300 --> 10:16.980
好 那么如果这里没有自己的状态的话 那么状态是别人传过给我的 那么传给他的组件是不是得有状态

10:17.300 --> 10:19.940
对吧 都一样啊 都一样 那行吧 咱们就自己来吧

10:20.660 --> 10:25.300
好 于是呢 这个组件里边呢 我们有自己的状态 有状态的话 是不是要使用什么

10:26.260 --> 10:31.380
使用那个 use state 对吧 要使用这个玩意啊 use state

10:32.980 --> 10:35.860
好 那么来吧 use state

10:36.420 --> 10:43.380
有什么状态呢 有什么状态 是不是有两个状态 对不对 是不是有两个状态 哪来两个状态啊

10:44.100 --> 10:50.420
因为我们从服务器获取的时候 是不是获取了两个东西 一个是总数 一个是学生的数数 对吧

10:51.300 --> 10:54.980
那有的人说 我这里我何必去关心这个总数呢

10:55.700 --> 11:03.380
何必去关心这个总数呢 我不应该关心总数啊 因为我这里只显示一个学生列表 我关心总 关心总数干嘛呢 是这样子啊

11:03.780 --> 11:06.100
因为你现在呢 你要负责查数据

11:06.900 --> 11:13.460
就这个学生列表呢 你要负责查数据 那么你查出来的数据呢 别人可能要用 所以说你还是得把这个得到

11:14.260 --> 11:18.900
啊 要不然就刷了吧 要不然我就干脆把它做成无状态的刷了 不然的话

11:19.460 --> 11:26.020
不然的话 算了 算了 算了 我把它做成无状态的刷了啊 不然的话一个逻辑也说不通 对不对 这个逻辑也说不通

11:26.340 --> 11:28.340
好 行了啊 那咱们把它做成一个无状态的

11:28.900 --> 11:32.980
student's need students 有这么一个属性 这个属性呢 是一个数组

11:33.620 --> 11:42.340
啊 莫认为空数组啊 莫认为空数组 那么这个属性呢 我就不做太多的约束了啊 不做太多的约束了 我就应该约束一个数组就行了

11:43.300 --> 11:47.300
aery 啊 它是个数组 这样的约束就完成了啊 一直quared

11:48.020 --> 11:54.340
啊 当然你要再进一步的约束的话 给约束数组里边 每个推向是什么类型啊 也可以 但是我这里难得去写啊

11:55.780 --> 11:59.780
好 那么这里呢 就变成一个无状态的组建了啊 我们这里 当然还没有状态了

12:00.180 --> 12:05.380
那么我们这里要做什么呢 就直接把这个学生列表写出来就行了 这是咱们以前的做法啊 next

12:06.100 --> 12:09.780
啊 选择学生列表吧 我们就使用通过啊 stuce

12:10.420 --> 12:12.660
通过map 对吧来生成

12:13.460 --> 12:17.780
生成一个什么 生成一个学生的就是集合啊 一个组建的集合

12:18.580 --> 12:25.060
每一个学生的对应到一个li啊 每个人对应对应一个li li里面的就显示一个学生的姓名

12:26.420 --> 12:31.300
再来个啥呢 再来个学生的姓别嘛啊 一直6啊 是不是等于一

12:31.940 --> 12:36.740
如果等于一 如果等于一的话 那么我们就显示男啊 否则的话显示女

12:37.700 --> 12:43.220
行了啊 你就显示这两个够了 然后给他个keyz 这些都没什么好说的啊 等于id

12:44.660 --> 12:48.980
好 你给我一个学生数组啊 ok 我把显示出来就完事了 好 那么把这显到这

12:49.620 --> 12:54.820
好 这里呢 就使用eo元素 对吧 使用eo元素 完事了啊 这个组件很简单 完事了

12:55.940 --> 13:02.500
好 那么接下来呢 我们需要给这个学生组建呢 给他一些数据 让他把它显示出来 嗯 比方说吧

13:03.300 --> 13:05.700
我们再写一个学生容器

13:07.140 --> 13:14.260
student container啊 这个组建用来干嘛呢 这个组建用来显示就真正的开始来显示所有的学生了

13:14.900 --> 13:17.220
好 那么这里呢 新建一个啊 index点 介绍

13:18.180 --> 13:23.140
啊 这里啊 fc 学生容器啊 student container

13:24.100 --> 13:26.260
ok啊 嗯 接下来呢 我们在这里

13:27.220 --> 13:34.420
app里边呢 就直接使用那个组建就完事了啊 app里边啥都没有 就直接使用那个组建 student container from

13:35.380 --> 13:36.660
呃 component

13:37.700 --> 13:39.220
好 使用这个组建就完事了啊

13:40.020 --> 13:42.740
他也没有什么数 数项啊 直接用就行了

13:43.380 --> 13:48.820
好 那么接下来呢 关键是在这 我们这里是不是要显示个学生列表 对吧 要显示个学生列表的组建

13:49.380 --> 13:51.620
啊 ok student list from

13:52.580 --> 13:54.100
来自于student list

13:54.740 --> 13:56.340
好 那么这里呢 组建就直接放这

13:57.380 --> 14:03.700
这个组建里面不是要个参数吗 对吧 什么参数 是不是一个学生的宿主啊 要把学生的宿主给他

14:04.180 --> 14:07.700
那么给他啥呢 那么这个组建他得有状态了啊 这个

14:08.020 --> 14:12.020
我打个出示啊 学生列表的组建这个是存展式组建

14:13.540 --> 14:16.980
存展式组建 就是没有状态

14:18.340 --> 14:19.860
呃从属性中

14:21.060 --> 14:21.940
获取数据

14:22.820 --> 14:23.700
用于显示

14:24.500 --> 14:30.260
啊 他制作这么一件事 那么这个组建呢 换句话说 这么一个组建呢 就是呃用于

14:31.540 --> 14:32.900
用于提供数据

14:33.940 --> 14:37.060
以及呃控制数据的变化

14:38.420 --> 14:39.460
这个组建做这么一个事

14:40.180 --> 14:44.660
好 那么这里肯定要得得有一个学生的数据 对吧 得有一个学生的数据

14:44.660 --> 14:47.620
那么这个数据里边呢 我们可以写个状态

14:49.300 --> 14:50.980
import student

14:51.460 --> 14:52.420
呃呃

14:53.300 --> 14:57.940
在上面啊 因为他有状态嘛 他要提供数据 所以他肯定得有状态 use state

14:58.980 --> 15:02.180
好 那么这里呢 我们就可以使用啊 use state

15:03.780 --> 15:07.460
是不是可以拿到学生 对不对 student

15:08.100 --> 15:12.580
拿到这个学生啊 默认情况下是个空数组 对吧 默认情况下是一个空数组

15:12.980 --> 15:17.220
好 我们从这个空数组里边呢 去获取学生啊 去获取学生

15:18.260 --> 15:22.100
好 OK啊 那咱们呢 这里呢 怎么来获取这个学生呢

15:22.100 --> 15:25.300
当然我们肯定肯定要把这个数据传给他 对吧 这个毫无疑问的

15:25.860 --> 15:32.020
那么怎么来获取学生呢 怎么来获取学生 是不是副作用 对吧 而且这个事情就肯定就是副作用嘛

15:32.660 --> 15:42.180
我们需要在宣然首次完成变化之后 是不是要来来获取学生 对吧 首次宣然的时候来获取学生

15:44.180 --> 15:48.180
好 我们这里使用 use effect 干嘛呢 我们写这么一个函数

15:48.900 --> 15:55.220
他也没有什么需要清理的啊 直接来直接来就行了 由于我们只在首次宣然的时候获取学生

15:55.300 --> 16:01.940
所以说我们这里写个空数组 对吧 空数组的目的 空数组的目的是不

16:03.300 --> 16:10.100
是让该副作用副作用函数没有任何依赖项

16:11.380 --> 16:16.020
从而紧在 紧在首次挂载时

16:17.540 --> 16:19.140
首次挂载时运行

16:20.260 --> 16:22.420
好 那么这里面干嘛呢 是不是直接使用那个

16:23.220 --> 16:25.060
用啥 用那个啥

16:26.420 --> 16:29.140
就是导入刚才我们写的那个方法

16:32.500 --> 16:36.980
导入 services student 这里 get student

16:37.780 --> 16:40.420
导入这个方法 那么比方说我们只在

16:40.980 --> 16:42.740
得到学生第一页的学生数据

16:42.740 --> 16:46.260
OK 我们调一个方法 把这个函数写成一步的函数

16:46.820 --> 16:48.900
写成一步的函数 哎 这就爆错了啊

16:49.140 --> 16:49.620
什么

16:51.460 --> 16:53.860
Race condition puts a single inside

16:55.060 --> 17:00.100
哦 他说呢 你这个副作用函数本身呢 你不要把它写成一步的

17:00.100 --> 17:03.780
为什么呢 因为一步的函数不是一个返回值吗 返回的是什么

17:03.780 --> 17:06.500
Promise 对吧 他返回的是一个Promise

17:06.500 --> 17:10.020
有一个返回值 所以说呢 你给他返回了一个Promise对象

17:10.020 --> 17:12.820
他又不要Promise对象 为什么呢 他要的是一个函数

17:13.380 --> 17:16.820
返回的 你必须返回的是一个轻力函数 用于轻力的

17:16.980 --> 17:20.180
但是如果你加上这个关键字过后了 他返回的就不是一个函数了

17:20.180 --> 17:22.980
返回的是Promise对象 这是不符合要求的

17:22.980 --> 17:27.620
他说呢 他都提示你了 他说如果说你要在里边写一步函数的话

17:27.620 --> 17:31.540
你应该在里边 这个副作用函数里边去定一个一步函数

17:31.540 --> 17:33.620
你看这样去做 然后行吧

17:35.700 --> 17:37.940
这里没必要做了 我可以想一想

17:39.300 --> 17:42.660
嗯 行吧 就写这么一个函数嘛 写这么一个函数

17:42.660 --> 17:44.260
我就写一个匿名的一步函数

17:44.980 --> 17:46.820
匿名的一步函数 然后立即执行

17:46.820 --> 17:49.780
可不可以 当然可以啊 立即执行函数嘛

17:50.820 --> 17:53.380
要这里写个匿名的一步函数 立即执行

17:53.380 --> 17:56.980
好 这个一步函数里面干嘛呢 是不得到get students

17:56.980 --> 18:01.540
对吧 把数据传给你 第一页每一页是多少条 十条

18:01.540 --> 18:06.980
比方说嘛 都是比方说啊 那么得到await得到这个学生结果

18:06.980 --> 18:08.660
得到这个返回的结果

18:11.060 --> 18:13.860
得到你响应的结果 然后能拿到响应结果

18:14.100 --> 18:16.420
这个响应结果里面不是有这么一个东西吗

18:17.060 --> 18:19.860
这个fand by page 是不是个数组对吧 好

18:19.860 --> 18:22.500
我们从那个响应结果里面拿到这个数组

18:22.500 --> 18:24.260
然后把这个数组干嘛呢 是不是

18:25.220 --> 18:29.300
作为指复制给这个状态 对吧 set students

18:30.180 --> 18:32.580
把它复制给这个状态 就完了 就完了

18:33.140 --> 18:35.860
就这么简单 那么这样子呢 第一次运行的

18:36.420 --> 18:39.540
时候呢 渲染完成过后 是不是会运行这个一步函数

18:39.540 --> 18:41.780
这个函数里面干嘛 是不是获取学生

18:42.580 --> 18:44.820
然后把学生重新复制给这个状态

18:45.460 --> 18:46.580
保存 咱们看一下吧

18:48.580 --> 18:50.900
还有什么 还说student list

18:50.900 --> 18:53.540
他说student list找不到 找不到

18:53.540 --> 18:56.500
我们返回上级目楼啊 得返回上级目楼

18:56.500 --> 18:56.980
好 保存

18:58.580 --> 19:00.820
一看就不完了没 他就完了的时候啊

19:00.820 --> 19:03.220
非常非常简单啊 把这个去掉

19:05.060 --> 19:06.900
是不是就完了 对不对

19:08.100 --> 19:10.260
那么就获取到第一页的数据了 对不对

19:11.220 --> 19:15.380
好 当然这个耶马到时候是会变化的 对吧

19:15.380 --> 19:17.220
这个耶马到时候是会变化的

19:18.180 --> 19:20.020
举个例子吧 举个例子

19:20.020 --> 19:25.060
比方说呢 我这里写上这么一个input元数

19:26.180 --> 19:28.660
这里边呢 我们要重新来设置耶马

19:30.420 --> 19:32.020
我们要重新来设置耶马

19:32.020 --> 19:34.500
所以说这个耶马呢 是不是有可能会变化

19:35.060 --> 19:36.500
对不对 第几页 第几页

19:36.500 --> 19:38.820
好 那么比方说我们把它变成收控组件

19:38.900 --> 19:39.860
我们用一个状态来

19:41.300 --> 19:45.300
用一个状态来表示当前的分业的配置

19:45.300 --> 19:46.900
因为我们以后肯定要分业

19:46.900 --> 19:48.020
来表示分业的配置

19:52.660 --> 19:56.020
这个分业配置里边呢 我们就写上

19:57.620 --> 19:59.460
要不然就一个耶马得了

20:00.020 --> 20:01.380
目前就一个耶马得了

20:02.100 --> 20:03.540
默认是第一页 对吧

20:03.540 --> 20:04.580
默认是第一页

20:04.580 --> 20:05.380
所以说这个地方呢

20:05.380 --> 20:06.740
我们把它变成收控组件

20:06.740 --> 20:07.940
Value了等于什么呢

20:08.020 --> 20:08.420
配级

20:09.860 --> 20:10.820
然后Unchanged

20:12.420 --> 20:13.940
当耶马改变的时候呢

20:14.500 --> 20:15.620
是不是要重新设置状态

20:15.940 --> 20:16.260
对吧

20:16.820 --> 20:17.860
要重新设置状态

20:19.060 --> 20:22.020
耶马改变的时候呢 是不是setPage

20:23.060 --> 20:24.020
给它一个新的耶马

20:24.020 --> 20:25.380
新的耶马是不是PoseInt

20:25.380 --> 20:27.300
把它变成转变成数字嘛

20:27.300 --> 20:29.300
e.target.value

20:30.500 --> 20:31.220
这个没问题吧

20:31.220 --> 20:32.820
这些代码就没什么好说的了

20:33.540 --> 20:34.260
没问题吧

20:34.260 --> 20:35.220
所以说这个地方呢

20:35.220 --> 20:36.580
我们不能把它写死

20:36.660 --> 20:38.180
不能把它写死成第一页

20:38.180 --> 20:39.540
应该写成什么了

20:39.540 --> 20:40.980
写成Page 对吧

20:41.540 --> 20:42.580
所以来自于Page

20:42.580 --> 20:43.940
好 保存看一下啊

20:45.140 --> 20:46.020
好 第一页

20:46.020 --> 20:47.780
那么以后变化的时候点一下这个

20:47.780 --> 20:48.980
是不是应该到第二页了

20:49.460 --> 20:50.180
它变没

20:50.180 --> 20:51.300
是不是为什么没有变

20:52.020 --> 20:52.980
为什么没有变

20:52.980 --> 20:54.180
因为我们这里呢

20:54.180 --> 20:56.660
这个负重用操作是不是给到一个空数组

20:57.460 --> 20:58.580
是不是给了一个空数组

20:58.980 --> 21:00.180
好 给了空数组

21:01.380 --> 21:02.500
给了空数组过后了

21:02.500 --> 21:03.700
它不遗难任何东西

21:03.700 --> 21:04.900
所以它只运行一次

21:04.900 --> 21:06.500
你看这里它已经给你包警告了

21:06.740 --> 21:08.500
它说了你这个负重用里边

21:08.500 --> 21:09.780
有没有依赖箱呢

21:09.780 --> 21:11.140
实际上是有的

21:11.140 --> 21:11.940
依赖啥

21:11.940 --> 21:13.060
是不是依赖这个玩意儿

21:13.780 --> 21:14.580
依赖Page

21:14.580 --> 21:16.020
你不能说依赖它

21:16.020 --> 21:16.740
你不能说依赖它

21:16.740 --> 21:17.700
因为它是呢

21:17.700 --> 21:19.700
这个负重用含书里边自己产生的

21:19.700 --> 21:21.140
自己产生的东西比较依赖

21:21.140 --> 21:23.940
我们说的依赖的指的是依赖外部的东西

21:23.940 --> 21:24.820
是不是依赖Page

21:25.540 --> 21:27.140
那么这个Page不一样的时候

21:27.140 --> 21:29.140
是不是要重新执行

21:29.700 --> 21:30.100
对吧

21:30.100 --> 21:31.940
所以说我们这里把这个给它加上

21:32.500 --> 21:34.180
那么这样子不是一个空数组了

21:34.740 --> 21:35.380
什么意思呢

21:35.380 --> 21:36.180
那就是说

21:36.180 --> 21:40.740
Page变化时需要重新获取数据

21:40.740 --> 21:42.660
那你想想个逻辑是不是这个逻辑

21:43.300 --> 21:44.580
叶马发生变化的时候

21:44.580 --> 21:45.700
是不是要重新获取数据

21:46.260 --> 21:46.740
对吧

21:46.740 --> 21:48.180
逻辑就是个逻辑啊

21:48.660 --> 21:48.900
好

21:48.900 --> 21:49.620
保存你看一下

21:52.020 --> 21:53.060
第二页你看一下

21:53.060 --> 21:53.780
是不是变了

21:53.780 --> 21:54.500
第三页

21:54.500 --> 21:55.060
第四页

21:55.620 --> 21:56.180
第五页

21:57.540 --> 21:58.420
没有这么多页了

21:58.420 --> 21:59.780
估计定六页

21:59.780 --> 22:00.420
第七页

22:00.420 --> 22:01.460
有没有这么多页啊

22:01.460 --> 22:02.740
还说刚才卡了一下

22:03.700 --> 22:05.780
那你看现在是不是发生变化了

22:05.780 --> 22:06.500
第一页

22:07.140 --> 22:07.540
对吧

22:08.180 --> 22:08.980
所以说呢

22:08.980 --> 22:10.340
你看现在这种做法了

22:10.340 --> 22:12.420
是不是变得非常非常方便了

22:13.220 --> 22:14.420
什么时候做这个副作用

22:14.420 --> 22:16.500
我们可以明确的给它指定依赖象

22:16.500 --> 22:17.300
你看现在这个

22:17.300 --> 22:19.780
现在内里边的东西都不能达到这个要求了

22:19.780 --> 22:20.260
对吧

22:20.260 --> 22:22.020
内里边的东西都不能达到这个要求了

22:22.020 --> 22:23.620
内里边的东西还挺麻烦的

22:23.620 --> 22:25.540
但是我们现在只需要写一次这个代码

22:25.860 --> 22:26.660
我有副作用

22:26.660 --> 22:27.940
这个副作用什么时候执行

22:27.940 --> 22:29.300
一定是宣展之后执行

22:29.300 --> 22:30.980
什么情况下宣展之后执行呢

22:30.980 --> 22:32.100
配起变化的时候

22:32.820 --> 22:32.980
对吧

22:32.980 --> 22:34.340
这个逻辑非常清楚

22:35.540 --> 22:35.700
好

22:35.700 --> 22:36.260
那么现在呢

22:36.260 --> 22:37.460
我们这里就比较说啊

22:37.460 --> 22:38.900
不用这个input元素

22:38.900 --> 22:41.540
而用我们之前书写的那个分业组件

22:41.540 --> 22:42.980
咱们之前的comment里面不是写的

22:42.980 --> 22:43.700
个分业组件吗

22:43.700 --> 22:44.100
pager

22:45.540 --> 22:46.500
我们这里 import

22:47.380 --> 22:48.660
拿到这个分业组件啊

22:49.540 --> 22:51.780
pager from

22:52.740 --> 22:53.060
写杠

22:54.900 --> 22:55.460
我靠

22:57.740 --> 22:58.220
comment

22:59.100 --> 22:59.660
我靠这人

22:59.660 --> 23:00.780
智能提示是哪去了

23:01.500 --> 23:02.380
pager

23:02.380 --> 23:03.020
行吧

23:03.020 --> 23:04.300
咱们把这个组件拿到

23:04.300 --> 23:05.100
那么这下面呢

23:05.100 --> 23:06.700
我们直接放置这个组件

23:06.700 --> 23:07.820
这个组件那样

23:07.820 --> 23:09.100
我们之前写过的啊

23:09.100 --> 23:10.220
我们看一下吧

23:10.220 --> 23:11.660
我们都不用去看里边代码了

23:11.660 --> 23:13.580
只看下个组件需要什么属性

23:13.580 --> 23:15.340
它需要一个初始业码

23:16.060 --> 23:17.500
需要给我一个初始业码

23:17.500 --> 23:18.700
初始业码就是我们的配起嘛

23:18.700 --> 23:19.420
对不对

23:19.420 --> 23:20.700
那么给你嘛

23:20.700 --> 23:21.740
current

23:21.740 --> 23:23.020
把配起给你

23:23.020 --> 23:24.220
还需要什么呢

23:24.220 --> 23:26.060
还需要我们的就是

23:26.060 --> 23:27.580
我们的配件

23:27.660 --> 23:28.860
还需要什么呢

23:28.860 --> 23:30.300
还需要我们的就是

23:31.180 --> 23:32.300
总数据量

23:32.300 --> 23:33.260
总数据量

23:34.060 --> 23:35.660
好总数据量的话

23:35.660 --> 23:36.700
那么我们

23:36.700 --> 23:37.340
包括什么

23:37.340 --> 23:39.100
limit夜容量啊

23:39.100 --> 23:40.380
还有包括什么呢

23:40.380 --> 23:42.220
panel number对吧

23:42.220 --> 23:44.060
还有这么一些属性都需要

23:44.060 --> 23:45.020
那么这些属性呢

23:45.020 --> 23:46.460
我们可以把统一的放到

23:47.340 --> 23:48.780
统一的放到哪呢

23:48.780 --> 23:49.900
统一的放到一个就是

23:50.860 --> 23:51.900
对象里面

23:51.900 --> 23:53.100
统一的放到一个对象里面

23:53.660 --> 23:54.300
好这里呢

23:54.300 --> 23:55.580
除了这个配起之外

23:55.580 --> 23:56.540
除了这个配起之外

23:56.620 --> 23:57.740
我们再写一些

23:57.740 --> 23:59.580
use state

23:59.580 --> 24:01.660
因为我们这些都是跟分业

24:01.660 --> 24:03.580
这个分业是属见相关的属性

24:03.580 --> 24:05.260
我们把它写到一个就是

24:05.260 --> 24:06.780
配起setting嘛

24:06.780 --> 24:08.300
配起setting

24:08.300 --> 24:09.660
分业相关

24:09.660 --> 24:10.940
分业相关的

24:10.940 --> 24:11.900
那么这里呢

24:11.900 --> 24:13.180
给它初始化一个对象

24:13.180 --> 24:15.500
哪现在除了当前业之外

24:15.500 --> 24:17.020
还有什么偷偷

24:17.020 --> 24:18.540
总数据量

24:18.540 --> 24:19.580
总数据量的话

24:19.580 --> 24:20.380
默认为0

24:20.380 --> 24:21.980
目前都没有获取嘛

24:21.980 --> 24:23.180
得不到东西对吧

24:23.180 --> 24:24.940
limit夜容量

24:25.500 --> 24:27.020
夜容量的为10

24:27.020 --> 24:28.540
夜容量为10

24:28.540 --> 24:29.820
然后还有什么

24:29.820 --> 24:31.020
panel number

24:31.020 --> 24:32.540
这个panel number呢

24:33.660 --> 24:34.620
panel number

24:34.620 --> 24:34.940
就是

24:37.340 --> 24:38.380
夜码数对吧

24:38.380 --> 24:39.740
一共有显示多号个夜码

24:39.740 --> 24:40.460
数字夜码

24:40.460 --> 24:41.500
在一个

24:41.500 --> 24:42.860
一个就是分业的组件里面

24:42.860 --> 24:44.220
最多显示多少个

24:44.220 --> 24:45.100
就是咱们之前做的

24:45.980 --> 24:46.540
好

24:46.540 --> 24:48.140
那么panel number的比方说五个

24:48.780 --> 24:49.260
行了啊

24:49.260 --> 24:50.220
咱们这样子写好

24:50.220 --> 24:52.540
赶紧把当前业码也写进来吧

24:52.540 --> 24:53.660
当前业码也写进来

24:54.380 --> 24:54.940
corrent

24:56.540 --> 24:57.180
corrent

24:57.180 --> 24:58.220
当前业码

24:58.220 --> 24:59.020
把它复制为一

24:59.740 --> 25:00.460
把这个就不要了

25:01.180 --> 25:01.820
把它写进来吧

25:02.780 --> 25:02.940
好

25:02.940 --> 25:03.820
我们得到这么一个

25:03.820 --> 25:04.460
培计setting

25:04.460 --> 25:05.020
它是个对象

25:05.660 --> 25:06.300
那么这里呢

25:06.300 --> 25:08.220
我们得到学生数据的时候

25:08.220 --> 25:08.940
是不是可以从

25:08.940 --> 25:10.540
培计setting里边去拿

25:10.540 --> 25:11.500
拿什么corrent

25:11.500 --> 25:11.820
对吧

25:11.820 --> 25:12.460
稍微改一下

25:12.940 --> 25:13.500
这是从

25:13.500 --> 25:15.740
根据当前业码来获取什么

25:15.740 --> 25:16.380
学生数据

25:17.260 --> 25:18.220
每一项多少条呢

25:18.220 --> 25:18.700
是不是也从

25:18.700 --> 25:20.140
培计setting里边去拿

25:20.140 --> 25:20.780
拿啥

25:20.780 --> 25:21.820
是不是拿这个limit

25:21.820 --> 25:22.460
对吧

25:22.460 --> 25:23.180
或是要调

25:23.900 --> 25:24.220
于是呢

25:24.220 --> 25:25.900
它一代像是不是有两个

25:25.900 --> 25:26.700
一代啥

25:26.700 --> 25:27.740
一代corrent

25:28.460 --> 25:28.780
对吧

25:28.780 --> 25:29.820
一代corrent

25:29.820 --> 25:30.700
还一代啥

25:30.700 --> 25:31.660
还一代limit

25:32.300 --> 25:32.860
对吧

25:32.860 --> 25:33.660
它一代这两个

25:34.220 --> 25:35.100
一代这两个数据

25:35.660 --> 25:36.060
保存

25:37.820 --> 25:38.380
警告

25:38.380 --> 25:39.500
看一下什么警告

25:39.500 --> 25:39.980
它说什么

25:41.020 --> 25:42.140
还是missing different

25:42.140 --> 25:42.860
培计setting

25:44.780 --> 25:45.340
它说

25:45.340 --> 25:47.340
它一代培计setting的变化

25:49.020 --> 25:49.980
确实也是

25:49.980 --> 25:50.700
确实也是

25:51.580 --> 25:52.460
它就说

25:52.460 --> 25:53.020
它什么意思呢

25:53.100 --> 25:53.500
它就说

25:53.500 --> 25:54.460
你不要写这些属性了

25:55.020 --> 25:56.060
你不要写这些属性了

25:56.540 --> 25:58.460
你直接写培计setting就得了

25:58.860 --> 25:59.660
它是这么个意思

26:00.060 --> 26:00.700
那行吧

26:00.700 --> 26:01.980
它们就直接写培计setting

26:02.380 --> 26:04.700
就当我们分业受制发生变化的时候

26:05.180 --> 26:06.060
你想的那个道理

26:06.620 --> 26:08.060
分业受制发生变化的时候

26:08.060 --> 26:08.540
它肯定

26:09.180 --> 26:10.060
很多地方都不一样了

26:10.060 --> 26:11.260
不要说夜总量变化了

26:11.820 --> 26:12.700
夜总量变化了

26:12.700 --> 26:13.980
是不是得重新获取

26:14.220 --> 26:15.180
当前业码变化了

26:15.180 --> 26:16.060
是不是得重新获取

26:16.300 --> 26:16.700
对吧

26:17.900 --> 26:19.020
但是这样子说也不对

26:19.020 --> 26:19.660
也不对啊

26:20.220 --> 26:21.260
不要总量获取

26:21.260 --> 26:22.380
总量变化的时候

26:22.540 --> 26:23.580
也不能重新获取

26:25.580 --> 26:26.380
不对啊

26:26.620 --> 26:27.580
这样的说法不对

26:27.900 --> 26:29.100
咱们还是把它写开

26:29.820 --> 26:30.700
得把它写开

26:31.980 --> 26:32.300
算了

26:32.300 --> 26:33.340
我们还是把它写开吧

26:34.060 --> 26:34.780
还是把它写开

26:36.460 --> 26:37.020
use that

26:38.780 --> 26:39.100
不对

26:39.100 --> 26:40.380
刚才他说说说法不对

26:40.940 --> 26:41.820
因为这些数据呢

26:41.820 --> 26:44.380
它其实没有那么高的偶合度

26:45.660 --> 26:46.140
地业

26:46.940 --> 26:47.500
然后呢

26:47.500 --> 26:48.300
use that

26:50.140 --> 26:50.540
limit

26:51.500 --> 26:52.540
就是

26:53.580 --> 26:54.060
实

26:57.420 --> 26:57.900
use

26:58.700 --> 26:59.500
use that

27:00.140 --> 27:00.940
就它逻辑上

27:00.940 --> 27:02.460
它没有那么高的偶合度

27:02.460 --> 27:03.980
所以说咱们尽量把它分离

27:03.980 --> 27:04.460
偷偷

27:05.420 --> 27:05.980
偷偷是0

27:06.860 --> 27:07.740
还有什么呢

27:07.740 --> 27:08.700
use that

27:09.340 --> 27:10.700
还有一个就是panel number

27:12.940 --> 27:14.060
那么这是5

27:14.860 --> 27:15.260
好

27:15.260 --> 27:16.460
我们写上这么一些状态

27:17.100 --> 27:17.500
这里呢

27:17.500 --> 27:18.380
我们指一代什么

27:18.380 --> 27:19.580
page和limit

27:19.660 --> 27:20.540
指一代这两个

27:20.540 --> 27:22.220
就这两个发生变化的时候

27:22.220 --> 27:23.420
那我肯定要重新获取

27:23.420 --> 27:24.620
那个这个毫无疑问的对吧

27:25.340 --> 27:26.620
这两个发生变化的时候

27:26.620 --> 27:27.900
我们要重新获取数据

27:28.620 --> 27:29.900
好获取了数据过后呢

27:29.900 --> 27:32.060
我们除了要设置学生的数据

27:32.060 --> 27:32.860
还要是什么

27:32.860 --> 27:34.780
是不是还要设置总数

27:34.780 --> 27:35.420
对吧

27:35.420 --> 27:36.060
say total

27:36.060 --> 27:36.700
总数

27:36.700 --> 27:37.740
总数来自于哪

27:37.740 --> 27:38.700
是不是count

27:38.700 --> 27:39.180
对吧

27:39.180 --> 27:40.140
从这个数向

27:40.140 --> 27:42.300
从服务系返回的数向获取

27:42.300 --> 27:44.700
这是设置学生数据

27:45.660 --> 27:49.100
这是设置学生总数

27:50.220 --> 27:50.940
我再说一下

27:50.940 --> 27:52.140
刚才为什么我写这个

27:52.140 --> 27:53.580
直接写个对象不行了

27:53.580 --> 27:55.180
因为如果你依赖对象的话

27:55.900 --> 27:56.780
那么到时候呢

27:56.780 --> 27:57.660
你设置

27:57.660 --> 27:58.220
设置的时候

27:58.220 --> 27:59.500
就直接设置了对象

27:59.500 --> 28:01.420
就会导致他的依赖向发生变化

28:01.420 --> 28:02.060
比方说我们这里

28:02.060 --> 28:03.100
从服务系获取过后

28:03.100 --> 28:05.020
是不是要重新设置那个总数

28:05.020 --> 28:05.340
对吧

28:05.340 --> 28:06.540
总数要重新设置

28:06.540 --> 28:08.140
一设置总数是不是这个对象

28:08.140 --> 28:09.740
因为总数在对象里面嘛

28:09.740 --> 28:10.860
你这对象就变了

28:10.860 --> 28:12.060
对象变了重新渲染

28:12.060 --> 28:12.700
重新渲染过后

28:12.700 --> 28:13.580
他依赖向发生变化

28:13.580 --> 28:14.860
他又得重新获取

28:14.860 --> 28:15.340
对吧

28:15.340 --> 28:16.460
这个不符合逻辑

28:16.540 --> 28:17.660
导致了这个结果

28:17.660 --> 28:18.940
那么我们这里的认为呢

28:18.940 --> 28:20.860
他只依赖这两个东西

28:20.860 --> 28:21.980
其他东西不依赖

28:21.980 --> 28:22.620
不依赖

28:24.620 --> 28:25.580
那么这里呢

28:25.580 --> 28:26.780
我们就把这个东西写好了

28:26.780 --> 28:27.340
对吧

28:27.340 --> 28:29.180
我们这个地方是一个单独的

28:29.180 --> 28:30.220
跟其他东西没有

28:30.220 --> 28:31.980
跟什么分业组建没有任何关系

28:31.980 --> 28:34.220
是把它横切点分离出去的

28:34.220 --> 28:35.660
我们只是说

28:35.660 --> 28:36.540
业马发生变化

28:37.260 --> 28:38.620
里面是发生变化

28:38.620 --> 28:38.940
OK

28:38.940 --> 28:40.380
我在你宣展完了之后

28:40.380 --> 28:41.660
我就重新获取数据

28:41.660 --> 28:43.180
做一些副作用的操作

28:43.180 --> 28:44.300
就这么个意思

28:44.300 --> 28:45.180
好那么这里就完了

28:45.980 --> 28:47.020
大概注释

28:47.020 --> 28:47.260
当

28:49.100 --> 28:53.420
业马和业容量发生变化时

28:54.860 --> 28:58.060
将重新获取数据

28:58.060 --> 28:59.180
这是个副作用的操作

28:59.900 --> 29:00.860
这是这个副作用

29:01.820 --> 29:03.260
好这样那么继续看

29:03.260 --> 29:03.820
我们在这里

29:03.820 --> 29:04.700
Pager里边不是有

29:04.700 --> 29:06.060
他要要求很多东西吗

29:06.060 --> 29:06.940
什么Current

29:07.660 --> 29:09.260
什么Namex

29:09.260 --> 29:09.580
对吧

29:09.580 --> 29:11.180
来自于什么Namex

29:11.180 --> 29:12.860
还有什么Total

29:12.860 --> 29:14.220
来自于Total

29:14.220 --> 29:14.540
OK

29:14.780 --> 29:15.820
你需要什么我就给你

29:17.180 --> 29:17.740
还有什么

29:18.540 --> 29:20.460
还有就是PanelNumber

29:21.260 --> 29:22.540
来自于PanelNumber

29:23.820 --> 29:24.540
好看一下吧

29:25.660 --> 29:26.220
保存

29:27.660 --> 29:28.060
他说什么

29:28.780 --> 29:30.620
他说又找不到

29:30.620 --> 29:31.420
找不到模块

29:32.380 --> 29:33.420
这模块又找不到

29:34.140 --> 29:35.260
这配件找到了吗

29:35.260 --> 29:35.820
不在这吗

29:36.700 --> 29:37.740
为什么说找不到呢

29:39.260 --> 29:39.820
我看一下

29:41.420 --> 29:42.780
为什么没正能提示呢

29:43.340 --> 29:44.060
这个好奇怪

29:45.500 --> 29:46.140
Pager

29:46.780 --> 29:47.340
Front

29:51.300 --> 29:52.020
为什么我感觉

29:52.020 --> 29:53.700
现在我超级卡我这个电脑

29:56.110 --> 29:57.310
Students Container

29:58.990 --> 30:00.430
我们现在在这里

30:00.430 --> 30:01.230
第二鞋杠

30:01.870 --> 30:03.150
然后读啥呢

30:03.150 --> 30:05.950
读这个Pager这个文件夹下面的

30:06.590 --> 30:07.310
哎为什么

30:07.950 --> 30:08.910
拿不到东西呢

30:12.290 --> 30:13.970
哦要返回上级目录

30:13.970 --> 30:14.450
我的天

30:16.450 --> 30:17.330
Pager

30:17.330 --> 30:18.050
OK

30:18.050 --> 30:18.530
保存

30:18.530 --> 30:19.010
看一下啊

30:21.580 --> 30:22.060
好的

30:22.380 --> 30:23.420
我这边好卡呀

30:23.420 --> 30:23.900
我这电脑

30:26.540 --> 30:27.100
稍等啊

30:35.550 --> 30:37.150
为什么会出现这种情况

30:37.150 --> 30:37.870
渲染不出来

30:39.630 --> 30:40.590
请求又没发生

30:40.590 --> 30:41.550
停止重新来

30:42.510 --> 30:42.910
渲染

30:46.530 --> 30:47.490
哦怎么回事呢

30:48.690 --> 30:49.250
怎么回事

30:51.650 --> 30:52.850
他这里渲染不出来

30:56.740 --> 30:57.620
他又没爆错

30:59.140 --> 31:00.100
他又没爆错

31:00.100 --> 31:01.620
我们把这个副作用先去掉

31:01.620 --> 31:02.420
看怎么回事

31:03.300 --> 31:03.700
爆存

31:05.870 --> 31:06.670
也没有爆错

31:07.150 --> 31:08.670
然后呢就是渲染不出来

31:09.470 --> 31:10.750
是我这里太卡了

31:10.750 --> 31:12.990
我突然电脑卡的不得了

31:12.990 --> 31:14.110
我们停止重新来

31:14.110 --> 31:15.310
重新重新执行

31:18.420 --> 31:18.900
好热

31:24.400 --> 31:25.200
稍等一下啊

31:25.200 --> 31:26.320
哇真的太卡了

31:28.110 --> 31:28.830
可能关不掉

31:30.850 --> 31:31.730
看一下怎么回事啊

31:37.300 --> 31:38.180
好然后呢

31:38.180 --> 31:39.460
现在我们看一下内侧work

31:40.900 --> 31:41.300
刷新

31:42.260 --> 31:43.220
现在可以渲染了

31:43.220 --> 31:44.420
可以终于可以正常渲染了

31:45.060 --> 31:46.900
好那么现在我们把这个取消注释

31:47.620 --> 31:48.660
把这个副作用给加上

31:49.620 --> 31:51.700
于是呢这个分业组建是不是出来了

31:51.700 --> 31:52.180
对吧

31:52.180 --> 31:53.220
分业组建就出来了

31:53.220 --> 31:54.820
好这个分业组建里边的

31:54.820 --> 31:55.860
他不是一个事件吗

31:55.860 --> 31:56.260
对不对

31:56.260 --> 31:58.100
啊当我们业马发生变化的时候

31:58.100 --> 31:59.220
他要运行的事件

31:59.220 --> 32:01.300
ok那么我们给他写这么一个事件啊

32:02.660 --> 32:04.180
我们之前写过这个组建了啊

32:04.740 --> 32:05.940
大家如果忘了的话

32:05.940 --> 32:07.700
可以回头去看一下这个组建的代码

32:07.700 --> 32:08.740
就是un-change

32:08.740 --> 32:09.780
un-page

32:09.780 --> 32:12.100
我们当时这个组建的这个世界名字叫什么

32:12.100 --> 32:12.980
un-page-change

32:12.980 --> 32:14.980
un-page-change

32:14.980 --> 32:17.620
当业马发生变化的时候呢

32:17.780 --> 32:19.220
他会给我一个新的业马

32:19.220 --> 32:20.740
un-page-change

32:20.740 --> 32:22.260
会给我一个新的业马

32:22.260 --> 32:24.100
我这个拿这个新的业马干嘛呢

32:25.300 --> 32:27.060
我拿这个新的业马干嘛呢

32:27.060 --> 32:28.180
我是不是就啊

32:29.460 --> 32:30.660
直接set page

32:30.660 --> 32:32.660
对吧重新设置业马

32:33.380 --> 32:34.900
重新设置业马

32:34.900 --> 32:36.340
然后呢拿到什么

32:36.340 --> 32:38.900
拿到这个新的把新的业马给他设置进去

32:39.780 --> 32:40.180
保存

32:42.100 --> 32:42.340
好

32:42.980 --> 32:43.540
等一下啊

32:44.260 --> 32:45.380
好第二页

32:45.380 --> 32:46.660
你看啊是不是就做完了

32:47.780 --> 32:49.220
为什么这么神奇就可以做完了

32:49.780 --> 32:50.900
为什么这么神奇

32:50.900 --> 32:52.340
他有很多相同的数据啊

32:52.980 --> 32:54.340
他有很多相同的数据

32:54.340 --> 32:55.860
你看这些数据都相同的

32:56.980 --> 32:58.740
为什么这么神奇就可以做完了

32:58.740 --> 32:59.380
是因为

33:00.180 --> 33:01.780
我们这里的副作用操作

33:01.780 --> 33:03.220
就是拿数据的操作

33:03.220 --> 33:05.380
它只跟配级和内面才有关系

33:05.380 --> 33:06.580
只要这两个没变

33:06.580 --> 33:08.340
它是不会重新执行这个副作用的

33:08.980 --> 33:09.860
而换句话说

33:10.500 --> 33:11.620
如果说第一次加载

33:11.620 --> 33:13.140
因为第一次加载还没有比较吧

33:13.140 --> 33:14.180
它肯定会执行一次

33:14.740 --> 33:16.180
现在完全肯定会执行一次

33:16.180 --> 33:16.980
那么后续加载

33:16.980 --> 33:18.180
只要这两个没变

33:18.180 --> 33:19.700
它就不会重新执行副作用

33:20.420 --> 33:21.940
好在这个副作用里边

33:21.940 --> 33:22.900
拿到学生数据过后

33:22.900 --> 33:24.900
我们是不是要重新设置学生数组

33:24.900 --> 33:26.580
又重新设置学生总数

33:26.580 --> 33:27.940
那么设置这两个属性

33:27.940 --> 33:29.460
这两个属性跟它有没有关系

33:30.020 --> 33:31.060
是没有关系跟它

33:31.540 --> 33:32.260
没有任何关系

33:32.260 --> 33:34.020
它只会导致重新宣传组建

33:34.020 --> 33:35.780
那么它不会导致重新执行副作用

33:37.060 --> 33:38.020
所以大概其实呢

33:38.020 --> 33:39.380
我们写代码的时候呢

33:39.380 --> 33:40.580
没有必要那么去

33:41.140 --> 33:42.420
很细似的去研究

33:42.420 --> 33:43.700
它到底是怎么执行的

33:43.700 --> 33:44.820
我们就写就完事了

33:44.820 --> 33:46.100
你不是用副作用操作吗

33:46.180 --> 33:48.340
你就想这个副作用操作跟什么有关系

33:48.340 --> 33:49.380
什么变化的时候

33:49.380 --> 33:50.900
我们要去做这个操作

33:50.900 --> 33:52.340
那么我们发现这两个数据变化

33:52.340 --> 33:53.140
要去做这个操作

33:53.140 --> 33:54.100
我可以去做举完事了

33:54.900 --> 33:56.180
这写就完了

33:56.740 --> 33:58.100
好那么这个地方呢

33:58.100 --> 33:58.980
我们点击一码

33:58.980 --> 33:59.940
一码发生变化

33:59.940 --> 34:01.620
一码发生变化是不是要重新宣传

34:01.620 --> 34:02.500
重新宣传完了过后

34:02.500 --> 34:03.380
是不是要做副作用

34:03.380 --> 34:04.980
因为因为一码变了嘛

34:04.980 --> 34:05.380
对不对

34:06.180 --> 34:07.140
好那么比方说

34:07.140 --> 34:08.020
我们再加一个

34:08.020 --> 34:10.020
再加一个就是input组件

34:10.580 --> 34:11.140
这个组件呢

34:11.140 --> 34:12.260
我们给它设置limit

34:15.010 --> 34:15.410
value

34:16.210 --> 34:16.850
为什么呢

34:16.850 --> 34:17.330
limit

34:17.810 --> 34:19.410
就是每页显示多少条

34:20.290 --> 34:20.770
number

34:21.650 --> 34:25.330
就是每页显示的调数

34:26.050 --> 34:27.250
比方说咱们还有这个组件

34:28.130 --> 34:30.050
好这个组件出来过后了

34:30.050 --> 34:31.170
我们干嘛呢

34:31.170 --> 34:32.530
我们这里注册按切键

34:33.170 --> 34:34.690
当你发生变化的时候呢

34:34.690 --> 34:35.170
我要干嘛

34:35.810 --> 34:37.970
我是不是重新设置setlimit

34:37.970 --> 34:38.450
对吧

34:38.450 --> 34:39.410
重新设置limit

34:40.450 --> 34:41.810
post int

34:42.450 --> 34:44.610
e.target.value

34:45.810 --> 34:46.690
重新设置

34:46.770 --> 34:48.370
就是夜总量

34:48.370 --> 34:49.010
就完了

34:49.010 --> 34:49.730
啥都不用改

34:49.730 --> 34:50.850
其他啥都不用改

34:50.850 --> 34:51.650
保存你看一下

34:52.690 --> 34:53.490
像啥都没用改

34:54.450 --> 34:55.490
现在每页显示10条

34:55.490 --> 34:56.130
对吧

34:56.130 --> 34:56.930
改一下

34:56.930 --> 34:57.410
改成5

34:58.050 --> 34:58.450
你看啊

34:58.450 --> 34:59.170
是不是全部变了

34:59.890 --> 35:00.210
对吧

35:00.850 --> 35:01.330
全部变了

35:01.330 --> 35:01.810
这里变了

35:01.810 --> 35:02.850
这里变了

35:02.850 --> 35:03.250
对不对

35:03.250 --> 35:04.770
这里是因为重新宣传变了

35:04.770 --> 35:05.330
这里变了

35:05.330 --> 35:06.450
是因为它有副作用

35:06.450 --> 35:07.330
只要limit成一变

35:07.330 --> 35:08.770
它又会跟着重新执行副作用

35:09.970 --> 35:10.450
这样子

35:10.450 --> 35:11.890
其实这种做法呀

35:11.890 --> 35:12.610
要比那个

35:13.170 --> 35:14.050
要比那个就是

35:15.010 --> 35:17.890
就是那个内组件要好太多了

35:17.890 --> 35:18.610
你不信的话

35:18.610 --> 35:19.570
你用内组件去做一下

35:20.130 --> 35:20.850
你看一下

35:20.850 --> 35:21.650
这些状态

35:21.650 --> 35:22.530
如果在内组件里面

35:22.530 --> 35:23.490
全部揉在一起

35:23.490 --> 35:24.290
不分离的话

35:24.290 --> 35:25.250
你脑袋都要做云

35:26.050 --> 35:28.050
你不但是手势加大的时候

35:28.050 --> 35:29.730
你要去得到一个学生数组

35:29.730 --> 35:30.530
对吧

35:30.530 --> 35:31.490
你还去设置种数

35:32.050 --> 35:32.930
另外呢

35:32.930 --> 35:33.810
以每一次

35:34.370 --> 35:35.170
夜码变化的时候

35:35.170 --> 35:36.690
你还得去写这个代码

35:36.690 --> 35:37.570
但是现在有了这个

35:38.450 --> 35:39.330
use effect

35:40.850 --> 35:42.130
这个后可之后呢

35:42.130 --> 35:43.250
你可以全部说

35:43.330 --> 35:44.210
所有的副作用

35:44.210 --> 35:45.490
全部通过它来完成

35:45.490 --> 35:47.490
它来做任何的副作用操作

35:47.490 --> 35:48.770
比方说这里还有更多的

35:48.770 --> 35:49.650
其他副作用的话

35:49.650 --> 35:51.490
我们可以写多个 effect

35:51.490 --> 35:52.930
他们依赖不同的东西

35:52.930 --> 35:55.010
依赖变化的时候去完成副作用

35:55.010 --> 35:56.210
这代码好太多了

35:56.850 --> 35:57.650
大家可以体会一下

35:58.290 --> 35:58.530
好

35:58.530 --> 36:00.850
咱们就做这么一个小的练习

36:00.850 --> 36:01.170
另外呢

36:01.170 --> 36:02.290
这个喊说好像没什么用

36:02.290 --> 36:02.530
对吧

36:02.530 --> 36:04.290
当然你可以写个闷框来设置

36:05.410 --> 36:06.450
不过好像没什么用

36:06.450 --> 36:06.930
没什么用

36:06.930 --> 36:07.330
我就把去

36:07.330 --> 36:08.450
可以把去掉了

36:08.450 --> 36:09.090
因为解构的话

36:09.090 --> 36:10.290
我们可以只去一部分嘛

36:10.850 --> 36:11.170
当然

36:11.170 --> 36:12.690
那你可以有点写上

36:12.770 --> 36:13.330
给它写上嘛

36:13.890 --> 36:14.850
写上写上写上

36:15.410 --> 36:16.290
这是每页

36:16.290 --> 36:17.410
加上个P元数

36:17.410 --> 36:18.450
这是每页显示的调数

36:18.450 --> 36:19.010
可以设置的

36:20.850 --> 36:20.930
好

36:20.930 --> 36:21.330
下面呢

36:21.330 --> 36:22.130
我们再写一个

36:24.210 --> 36:26.530
最多显示的数字页码

36:28.980 --> 36:29.460
Input

36:30.180 --> 36:30.900
Type为Number

36:33.940 --> 36:34.900
很好写的啊

36:34.900 --> 36:35.140
现在

36:36.180 --> 36:36.900
Values呢

36:36.900 --> 36:37.700
是来自于什么

36:37.700 --> 36:38.340
PanelNumber

36:39.060 --> 36:39.860
那么这个Set

36:40.340 --> 36:41.460
SetPanelNumber

36:42.980 --> 36:43.380
这里呢

36:43.380 --> 36:44.660
来自于一点TargetValues

36:44.660 --> 36:44.980
完了

36:45.780 --> 36:46.420
保存看一下

36:48.260 --> 36:49.300
目前的这个样子

36:49.300 --> 36:50.340
每页显示的调数

36:50.340 --> 36:51.380
比方说9条

36:52.980 --> 36:53.380
8条

36:54.260 --> 36:54.660
7条

36:55.380 --> 36:55.860
6条

36:56.180 --> 36:56.580
你看

36:56.580 --> 36:57.060
5条

36:57.460 --> 36:59.220
你看这页码也跟着来变

36:59.220 --> 36:59.540
对吧

37:00.100 --> 37:00.420
4条

37:01.380 --> 37:02.660
显示的页码数量呢

37:02.660 --> 37:03.220
比方说10个

37:04.180 --> 37:04.740
对吧

37:04.740 --> 37:05.060
10个

37:05.540 --> 37:05.860
你看

37:06.980 --> 37:07.300
点击

37:08.420 --> 37:08.820
点击

37:09.300 --> 37:10.260
你看这边也在变

37:10.260 --> 37:11.140
这个数据

37:11.140 --> 37:12.260
好多都是一样的

37:12.260 --> 37:13.220
好多都是一样的

37:13.220 --> 37:13.620
其实呢

37:13.620 --> 37:14.180
这些数据呢

37:14.180 --> 37:15.220
大家可以

37:15.300 --> 37:16.420
如果你自己安了

37:16.420 --> 37:17.780
当然你现在没有数据苦

37:17.780 --> 37:18.020
对吧

37:18.020 --> 37:19.460
你们还没有悬逗的接试

37:19.460 --> 37:20.660
就悬逗逗的接试之后

37:20.660 --> 37:22.500
你们可以自己去做一些数据

37:22.500 --> 37:24.020
比方说用mock来生成一些

37:24.580 --> 37:26.020
看得非常非常清楚的数据

37:27.700 --> 37:28.340
OK啊

37:28.340 --> 37:28.900
那咱们呢

37:28.900 --> 37:29.380
就做完了

37:29.380 --> 37:29.620
对吧

37:30.420 --> 37:30.580
好

37:30.580 --> 37:31.620
大家先来练习一下

37:31.620 --> 37:32.740
来体会一下

37:32.740 --> 37:33.940
使用了Hook之后呢

37:33.940 --> 37:34.900
它的那种分离

37:34.900 --> 37:35.860
状态分离

37:35.860 --> 37:38.180
然后这个依赖向分离

37:38.180 --> 37:38.900
带来的好处

37:40.740 --> 37:41.060
好

37:41.060 --> 37:42.260
大家可以下来去体会一下

37:43.460 --> 37:44.260
这个练习

37:44.260 --> 37:44.900
一定要去做

37:45.460 --> 37:45.700
好

37:45.700 --> 37:47.460
这是这么一个小 demo

