WEBVTT

00:00.620 --> 00:04.020
无密接式里面其实东西已经不多了

00:04.020 --> 00:08.020
我们这些可能把这个代理和数据模拟给它讲了

00:08.020 --> 00:11.020
讲了之后呢咱们就可以做一些练习啊

00:11.020 --> 00:14.020
做一个练习还是学生管理系统啊

00:14.020 --> 00:17.820
我们用不同的实现方式去把它来实现

00:17.820 --> 00:20.420
这样子呢可以锻炼到不同的技术

00:20.420 --> 00:23.020
可以锻炼到不同的技术能力

00:23.020 --> 00:25.720
代理和数据模拟这个东西是什么呢

00:25.720 --> 00:27.720
代理大家都都都知道对吧

00:27.720 --> 00:29.320
用来解决也是什么问题的

00:29.420 --> 00:34.220
代理啊代理用于解决跨域问题

00:34.220 --> 00:36.820
对吧用来解决跨域的问题的

00:36.820 --> 00:42.420
就我们呢开发的这一个前端的就是功能的时候呢

00:42.420 --> 00:45.920
需要跟后端进行交互就是用阿迦克斯请求

00:45.920 --> 00:47.720
那么请求的时候呢

00:47.720 --> 00:50.920
由于我们目前在开发服务系啊

00:50.920 --> 00:52.320
这东西大家应该知道吧

00:52.320 --> 00:54.320
代理这一块里面学过五六啊

00:54.320 --> 00:56.020
我也不能确定你们听不清楚

00:56.020 --> 00:58.820
我这里还是多说呀多说一下吧

00:58.820 --> 01:00.720
因为我不能确定你们听不清楚这一块

01:01.920 --> 01:03.820
啊就是我们现在呢

01:03.820 --> 01:06.220
有一个问题就是在开发的这些端呢

01:06.220 --> 01:09.320
他有一个跨域的问题啊是这样子

01:10.420 --> 01:13.320
就是我们的服务器呢可能在这啊

01:13.320 --> 01:15.020
比方说我们的服务器在哪呢

01:15.020 --> 01:17.620
在API在这啊

01:17.620 --> 01:20.920
这个就是吧API.doe.com

01:22.020 --> 01:24.220
API在这对吧啊

01:24.220 --> 01:26.620
假设假设我们的就是请

01:26.620 --> 01:28.120
就是我们的服务器在这

01:28.220 --> 01:29.420
是这个域名

01:29.420 --> 01:31.220
但是我们嗯

01:31.220 --> 01:33.720
目前的开发服务器呢在哪呢

01:33.720 --> 01:35.820
开发服务器开发服务器呢

01:35.820 --> 01:37.220
我们在localhost

01:38.020 --> 01:40.220
host8000对不对

01:40.220 --> 01:41.820
是不是在这对吧

01:41.820 --> 01:44.520
哎我们的开发服务器在这

01:44.520 --> 01:46.920
哎我们要请求的服务器在这

01:46.920 --> 01:47.920
是不是跨域了

01:47.920 --> 01:49.320
域名不一样对不对

01:49.320 --> 01:50.320
跨域了

01:50.320 --> 01:51.520
那么跨域的时候呢

01:51.520 --> 01:53.320
他会造成数据访问不到

01:53.320 --> 01:54.020
当然呢

01:54.020 --> 01:55.720
你通过服务器端啊

01:55.720 --> 01:59.020
当然你们现在还没有学习服务器那一块

01:59.020 --> 02:01.120
但是你们以后学了服务器之后呢

02:01.120 --> 02:01.720
你就知道

02:01.720 --> 02:02.720
这个跨域问题呢

02:02.720 --> 02:04.020
可以在服务器端

02:04.820 --> 02:06.320
进行解决啊

02:06.320 --> 02:07.720
解决这个跨域问题

02:07.720 --> 02:09.320
但是呢服务器端往往呢

02:09.320 --> 02:11.120
他不太愿意解决这个东西

02:11.120 --> 02:11.920
为什么呢

02:11.920 --> 02:13.120
因为是这样子的

02:13.120 --> 02:16.120
当我们有一天部署的时候啊

02:16.120 --> 02:17.420
当我们部署的时候

02:18.620 --> 02:21.520
我们把我们的东西开发完成了啊

02:21.520 --> 02:23.320
这是我们目前是开发阶段吧

02:23.320 --> 02:25.320
当我们有一天开发完成了

02:25.320 --> 02:26.120
之后呢

02:26.120 --> 02:27.320
我们要进行部署

02:28.320 --> 02:29.120
部署

02:30.920 --> 02:31.920
部署这个东西呢

02:31.920 --> 02:33.520
你们以后学到服务器过后呢

02:33.520 --> 02:35.620
才才更加的清楚啊

02:35.620 --> 02:36.120
现在呢

02:36.120 --> 02:37.520
可能还比较模糊

02:37.520 --> 02:38.120
但是没关系啊

02:38.120 --> 02:38.920
我们最终呢

02:38.920 --> 02:41.520
会形成到远程的服务器上进行访问

02:41.520 --> 02:43.720
就是我们会把我们的工程打包

02:43.720 --> 02:44.120
然后呢

02:44.120 --> 02:45.520
部署到服务器上面

02:45.520 --> 02:46.420
那么部署完

02:46.420 --> 02:47.220
那过后呢

02:47.220 --> 02:49.020
我们以后访问我们的页面

02:49.020 --> 02:50.220
还是这个东西吗

02:50.220 --> 02:51.520
所以不是这个东西的

02:51.520 --> 02:51.720
对吧

02:51.720 --> 02:53.520
这是我们开发阶段的东西

02:53.520 --> 02:54.920
那么我们部署之后呢

02:54.920 --> 02:55.620
可能一遍

02:55.620 --> 02:56.120
通常呢

02:56.120 --> 02:57.120
会跟跟那个

02:57.120 --> 02:59.020
就是我们请求的远程地址呢

02:59.020 --> 02:59.520
通常啊

02:59.520 --> 03:01.420
我们不说一定的

03:01.420 --> 03:02.920
会保持一致

03:04.120 --> 03:04.620
通常呢

03:04.620 --> 03:08.520
会就是保持那个玉民保持一致

03:08.520 --> 03:09.220
啊

03:09.220 --> 03:10.020
那么比方说

03:10.020 --> 03:13.220
我们这里的玉民是独一的抗

03:13.220 --> 03:13.720
啊

03:13.720 --> 03:14.720
是保持一致的

03:14.720 --> 03:15.020
对吧

03:15.020 --> 03:17.020
玉民保持一致的

03:17.020 --> 03:17.120
啊

03:17.120 --> 03:17.420
当然了

03:17.420 --> 03:19.320
这个要说完全一致还不是

03:19.320 --> 03:21.620
只能说主玉民是一致的啊

03:21.620 --> 03:22.920
那么这个这个地方呢

03:22.920 --> 03:23.820
我们这样吧

03:23.820 --> 03:26.120
这样我再说说用这个理子吧

03:26.120 --> 03:27.720
这个理子好一点

03:27.720 --> 03:27.920
好

03:27.920 --> 03:28.720
那么如果说

03:28.720 --> 03:29.920
我们部署了之后呢

03:29.920 --> 03:31.020
形成这样的玉民

03:31.020 --> 03:31.920
那么这样的玉民呢

03:31.920 --> 03:34.320
跟这边的玉民是不是保持一致了

03:34.320 --> 03:35.020
对不对

03:35.020 --> 03:35.720
保持一次吧

03:35.720 --> 03:36.820
还有跨越问题吗

03:36.820 --> 03:38.020
是没有了

03:38.020 --> 03:40.020
所以说我们最终我们

03:40.020 --> 03:41.820
生成的就是打包的工程

03:41.820 --> 03:42.920
部署完了的工程

03:42.920 --> 03:44.820
它是没有跨越问题的啊

03:44.820 --> 03:47.020
当然这个情况也是不一定的啊

03:47.020 --> 03:48.720
那如果说你的API

03:48.720 --> 03:50.020
你的数据接口

03:50.020 --> 03:51.320
那不在这个玉民

03:51.320 --> 03:54.520
在比方就像刚刚才的样子啊

03:54.520 --> 03:55.520
在一个二级玉民

03:55.520 --> 03:56.620
二级玉民是不一样的

03:56.620 --> 03:58.420
那么这个仍然会有跨越问题

03:58.420 --> 03:59.420
那么但是呢

03:59.420 --> 04:01.520
他也会比方说这里的服务器呢

04:01.520 --> 04:02.820
他会解决这个跨越问题

04:02.820 --> 04:05.420
他只是说允许你3w啊

04:05.420 --> 04:06.820
就是你主玉民相同

04:06.820 --> 04:07.220
ok

04:07.220 --> 04:08.420
那我给你访问

04:08.420 --> 04:09.420
主玉民不相同

04:09.420 --> 04:10.420
那我不能访问

04:10.420 --> 04:13.120
也就说这个哪怕有跨越

04:13.120 --> 04:15.420
哪怕有跨越服务器也是

04:15.420 --> 04:17.920
按照最终的啊

04:17.920 --> 04:20.520
部署完了之后的玉民

04:20.520 --> 04:21.720
来允许跨越的

04:21.720 --> 04:24.420
而不允许你这种玉民来进行跨越

04:24.420 --> 04:25.620
明白这个意思吧

04:25.620 --> 04:28.320
为什么服务器不允许这种玉民来进行跨越

04:28.320 --> 04:29.420
不然的话所有的人

04:29.420 --> 04:30.820
那个就没有任何权限了

04:30.820 --> 04:31.420
所有的人

04:31.420 --> 04:33.920
都可以去访问这个服务器

04:33.920 --> 04:34.820
自己建个工程吧

04:34.820 --> 04:36.620
大概自己在本地搭个工程

04:36.620 --> 04:38.920
搭个工程就是就是那个host

04:38.920 --> 04:40.820
然后给他订一个8000端口

04:40.820 --> 04:41.420
于是呢

04:41.420 --> 04:43.120
都可以去访问服务器了

04:43.120 --> 04:44.420
所以说呢服务器呢

04:44.420 --> 04:46.020
往往不会去

04:46.020 --> 04:49.120
呃针对你开发阶段的玉民

04:49.220 --> 04:51.520
来进行来允许的跨越

04:51.520 --> 04:53.920
而服务器往往允许的是什么呢

04:53.920 --> 04:55.820
你部署之后的玉民

04:55.820 --> 04:56.920
比方说服务器

04:56.920 --> 04:59.420
那么这东西是允许的啊

04:59.420 --> 05:02.920
这个玉民它是允许的

05:02.920 --> 05:03.320
这里

05:06.290 --> 05:07.090
它是允许的

05:08.590 --> 05:09.890
这么个意思啊

05:09.890 --> 05:12.390
就是你如果说服务器允许这个一名的话

05:12.390 --> 05:13.990
那么你只有在部署之后

05:13.990 --> 05:15.390
是不是才可以啊

05:15.390 --> 05:16.390
才可以访问

05:16.390 --> 05:16.790
对吧

05:17.690 --> 05:17.790
好

05:17.790 --> 05:19.390
那如果我们开发阶段

05:19.390 --> 05:22.090
要访问远程服务器该怎么办呢

05:22.090 --> 05:25.090
我们目前的服务器是呃

05:25.090 --> 05:26.190
呃

05:26.190 --> 05:27.790
我也不知道服务器没做限制

05:27.790 --> 05:30.290
那就假设他做了这个限制吗

05:30.290 --> 05:31.590
好像是没有做限制啊

05:31.590 --> 05:33.090
没有做跨越限制

05:33.090 --> 05:33.290
呃

05:33.290 --> 05:35.590
我们就假设他做了这个限制

05:35.590 --> 05:36.090
于是呢

05:36.090 --> 05:37.190
我们在开发阶段

05:37.190 --> 05:38.690
是不是访问不到服务器了

05:38.690 --> 05:40.490
如果说你要直接去访问服务器

05:40.490 --> 05:41.790
是不是有跨越问题

05:41.790 --> 05:42.390
对吧

05:42.390 --> 05:44.290
如果说你要直接去访问服务器

05:44.290 --> 05:46.690
那么肯定要产生跨越问题

05:46.690 --> 05:47.890
因为服务器呢

05:47.890 --> 05:49.290
这个它本身跨越了

05:49.290 --> 05:51.290
服务器又没有允许这个玉民

05:51.390 --> 05:51.990
呃

05:51.990 --> 05:52.790
呃

05:53.790 --> 05:54.190
发

05:54.190 --> 05:54.990
就是想意

05:54.990 --> 05:57.190
也没有允许这个玉民给他想意

05:57.190 --> 05:58.990
所以说这里会遇到跨越问题

06:00.190 --> 06:01.790
就形成了这么一个

06:01.790 --> 06:02.190
问题

06:02.190 --> 06:04.090
就形成了这么一个问题

06:04.090 --> 06:04.290
好

06:04.290 --> 06:05.790
那么这个问题怎么解决呢

06:06.690 --> 06:08.090
就是用代理啊

06:08.090 --> 06:08.690
代理

06:08.690 --> 06:11.390
因为跨越问题产生的根源站的

06:11.390 --> 06:13.290
占浏览器端

06:13.290 --> 06:15.290
是因为浏览器端呢

06:15.290 --> 06:17.090
它有安全限制

06:17.090 --> 06:19.590
它不允许你跨越玉民

06:19.590 --> 06:21.590
去访问别的网站的资源

06:21.590 --> 06:23.290
所以说浏览器端给你限制了

06:23.290 --> 06:25.090
你要解决这个限制的话

06:25.090 --> 06:27.790
你必须要在服务器上动手脚

06:27.790 --> 06:30.590
那服务器如果没有给你做相应的操作

06:30.590 --> 06:32.790
你是没有办法直接访问的

06:32.790 --> 06:35.590
有这里的跨越问题是浏览器端产生的

06:35.590 --> 06:36.690
那么怎么来解决呢

06:36.690 --> 06:38.190
就是通过代理就形成

06:38.190 --> 06:40.090
你看现在现在就变成这个样子

06:40.090 --> 06:40.990
对吧

06:40.990 --> 06:41.890
有跨越问题

06:41.890 --> 06:43.790
因为浏览器端直接访问不行啊

06:43.790 --> 06:44.490
这浏览器

06:45.790 --> 06:46.790
叫做user

06:47.790 --> 06:50.790
agency

06:50.790 --> 06:52.790
用户代理

06:52.790 --> 06:55.590
那么它跨越去访问这个地址

06:55.590 --> 06:56.590
会有跨越问题

06:56.590 --> 06:57.490
那么怎么来解决呢

06:57.490 --> 06:58.290
就是使用代理

06:58.290 --> 06:59.790
代理怎么做呢

06:59.790 --> 07:00.790
好

07:00.790 --> 07:01.490
它是这样子

07:01.490 --> 07:04.290
我在本地的搭一个服务器

07:04.290 --> 07:06.790
我在本地搭一个服务器

07:06.790 --> 07:08.990
当我们去访问某一个地址的时候

07:08.990 --> 07:11.290
比方说

07:11.290 --> 07:12.290
比方说

07:12.290 --> 07:15.790
当我们去访问某一个地址

07:18.370 --> 07:19.870
比方访问这个地址

07:21.570 --> 07:22.770
写钢API

07:22.770 --> 07:24.170
写钢user

07:24.170 --> 07:25.070
比方说吧

07:25.070 --> 07:26.170
我们访问这个地址

07:26.170 --> 07:27.370
我没有给域名

07:27.370 --> 07:29.270
没有给就是端可号

07:29.270 --> 07:32.670
那么默认就是当前网站的域名和端可号

07:32.670 --> 07:35.570
只是在开发阶段有效

07:35.570 --> 07:38.570
只是在开发阶段有效啊

07:38.570 --> 07:39.970
我们访问这个地址

07:39.970 --> 07:41.170
那么访问这个地址的时候

07:41.170 --> 07:41.970
没有给域名

07:41.970 --> 07:42.870
没有给端可号

07:42.870 --> 07:44.670
实际上访问的是啥

07:44.670 --> 07:46.170
实际上访问的是什么地址

07:46.170 --> 07:47.570
是不是实际上访问的是

07:47.670 --> 07:50.570
localhost8000

07:50.570 --> 07:50.970
对吧

07:50.970 --> 07:52.570
访问这个地址实际上

07:52.570 --> 07:53.570
因为你没有给域名

07:53.570 --> 07:54.770
没有给端可号

07:54.770 --> 07:55.870
所以说访问这个地址

07:55.870 --> 07:57.170
这个地址有数据吗

07:57.170 --> 07:57.770
是没有

07:57.770 --> 07:58.670
我们的数据在哪

07:58.670 --> 07:59.470
是不是在这

07:59.470 --> 08:00.870
我们的数据在哪

08:00.870 --> 08:03.070
在这

08:03.070 --> 08:05.970
就是API.doe.com

08:05.970 --> 08:07.070
在这

08:07.070 --> 08:08.270
是不是在这

08:08.270 --> 08:09.570
我们的数据在这

08:09.570 --> 08:11.270
我们访问这样的地址有数据吗

08:11.270 --> 08:11.970
没有数据

08:11.970 --> 08:13.870
但是有没有快语问题

08:13.870 --> 08:14.870
是没有快语问题

08:14.870 --> 08:16.170
拿域名有变化吗

08:16.170 --> 08:17.370
是没有变化

08:17.770 --> 08:19.070
那么这个时候

08:19.070 --> 08:20.370
这个请求

08:20.370 --> 08:23.070
它会被本地的一个开发服务器

08:23.070 --> 08:24.870
解获到

08:24.870 --> 08:26.470
什么服务器

08:26.470 --> 08:27.570
这东西我们以前学过的

08:27.570 --> 08:29.870
在学习Webpack的时候

08:29.870 --> 08:30.770
是不是学过的

08:30.770 --> 08:33.370
叫做DevServer

08:33.370 --> 08:39.770
被DevServer解获

08:39.770 --> 08:41.170
解获这个请求

08:41.170 --> 08:42.770
那么拿那个请求过后

08:42.770 --> 08:44.370
它会根据你的配置

08:44.370 --> 08:46.170
更改你的域名

08:46.170 --> 08:48.170
然后去请求这个数据

08:48.170 --> 08:49.170
所以说这个时候

08:49.170 --> 08:51.170
它会去请求这个地址

08:51.170 --> 08:52.970
它会把你的域名

08:52.970 --> 08:54.170
短口号改了

08:54.170 --> 08:56.170
改而去请求这个地址

08:56.170 --> 08:58.170
变这样子

08:58.170 --> 09:00.170
它就请求这个地址

09:00.170 --> 09:02.170
不要这意思吧

09:02.170 --> 09:03.170
有朋友说

09:03.170 --> 09:05.170
那你这个请求不跨运了吗

09:05.170 --> 09:06.170
不还是跨运了吗

09:06.170 --> 09:07.170
注意啊

09:07.170 --> 09:08.170
你这个请求

09:08.170 --> 09:09.170
是不是浏览期发出的吗

09:09.170 --> 09:10.170
不是

09:10.170 --> 09:12.170
这个地方是浏览期发出的

09:12.170 --> 09:14.170
这个DevServer

09:14.170 --> 09:16.170
这个库的话

09:16.170 --> 09:18.170
它是在本地搭了一个服务器

09:18.170 --> 09:19.170
那么那个东西跟浏览期

09:19.170 --> 09:20.170
就没什么关系了

09:20.170 --> 09:22.170
跟浏览期没什么关系

09:22.170 --> 09:23.170
所以说它

09:23.170 --> 09:24.170
如果不是浏览期的话

09:24.170 --> 09:26.170
它不会造成跨运问题

09:26.170 --> 09:27.170
哪怕跨运访问

09:27.170 --> 09:28.170
它也能访问到

09:28.170 --> 09:29.170
然后你用C語言

09:29.170 --> 09:30.170
或者用加把语言

09:30.170 --> 09:31.170
写个控制台

09:31.170 --> 09:32.170
写个窗题

09:32.170 --> 09:33.170
用程序

09:33.170 --> 09:34.170
没有任何问题

09:34.170 --> 09:35.170
它不会有跨运问题的

09:35.170 --> 09:36.170
跨运问题是

09:36.170 --> 09:38.170
浏览期的安全策略

09:38.170 --> 09:39.170
叫做同源策略

09:39.170 --> 09:40.170
对吧

09:40.170 --> 09:41.170
通过筒

09:41.170 --> 09:43.170
因为同源策略的存在

09:43.170 --> 09:45.170
所以说造成了跨运的问题

09:45.170 --> 09:47.170
那如果脱离了浏览期的环境

09:47.170 --> 09:48.170
那就肯定没有这样的问题了

09:48.170 --> 09:49.170
所以说DevServer

09:49.170 --> 09:51.170
它是能够发出这样的请求的

09:51.170 --> 09:52.170
于是呢

09:52.170 --> 09:55.170
它把这个请求返回了数据

09:57.170 --> 09:58.170
它把这个请求

09:58.170 --> 10:01.740
它返回了数据

10:01.740 --> 10:02.740
这个数据

10:02.740 --> 10:03.740
它把这个数据

10:03.740 --> 10:04.740
是不是可以拿到

10:04.740 --> 10:05.740
对吧

10:05.740 --> 10:06.740
可以拿到这个数据

10:06.740 --> 10:07.740
拿到这个数据过后

10:07.740 --> 10:09.740
它才把这个数据

10:09.740 --> 10:13.740
它才把这个数据交还给浏览期

10:14.740 --> 10:17.740
它才把这个数据交还给

10:26.300 --> 10:28.300
再把这个数据交还给浏览期

10:28.300 --> 10:29.300
来我们走一次

10:29.300 --> 10:31.300
我们浏览期请求的地址

10:31.300 --> 10:32.300
它并没有跨运

10:32.300 --> 10:34.300
还是请求了这个地址

10:34.300 --> 10:35.300
还是同样的寓民

10:35.300 --> 10:36.300
同样的端口号

10:36.300 --> 10:37.300
请求这个地址就行了

10:37.300 --> 10:38.300
对吧

10:38.300 --> 10:39.300
请求这个地址

10:39.300 --> 10:40.300
就相当有请求这个地址

10:40.300 --> 10:41.300
所以说它浏览期

10:41.300 --> 10:42.300
本身没有跨运请求

10:42.300 --> 10:43.300
但是这个请求

10:43.300 --> 10:45.300
被DevServer解惑

10:45.300 --> 10:46.300
那么它把这个请求

10:46.300 --> 10:48.300
它发现这个请求

10:48.300 --> 10:50.300
我把这个寓民端口号一换

10:51.300 --> 10:52.300
换成这个

10:52.300 --> 10:53.300
换成这个

10:54.300 --> 10:56.300
然后它转而去请求服务器

10:56.300 --> 10:58.300
转而去请求真实的服务器

10:58.300 --> 11:00.300
从真实的服务器拿到数据

11:00.300 --> 11:01.300
从拿到数据

11:01.300 --> 11:02.300
拿到数据过后

11:02.300 --> 11:03.300
再把数据交还给浏览期

11:03.300 --> 11:05.300
那么对于浏览期而言

11:05.300 --> 11:06.300
它啥都不知道

11:06.300 --> 11:08.300
它只知道我请求这个例子

11:08.300 --> 11:10.300
我就要拿到数据了

11:10.300 --> 11:11.300
就这么神奇

11:11.300 --> 11:12.300
所以对浏览期而言

11:12.300 --> 11:13.300
它就没有跨运

11:13.300 --> 11:14.300
那么代理是它

11:14.300 --> 11:15.300
这个东西就是代理

11:15.300 --> 11:17.300
代理服务器

11:17.300 --> 11:19.300
这个东西就是代理服务器

11:19.300 --> 11:20.300
它是一个本地的服务器

11:20.300 --> 11:21.300
它帮你

11:21.300 --> 11:22.300
它做什么

11:22.300 --> 11:23.300
它没有提供数据

11:23.300 --> 11:25.300
它只是把这个请求转发

11:25.300 --> 11:26.300
你给我一个

11:26.300 --> 11:27.300
你不是要这个东西吗

11:27.300 --> 11:28.300
我帮你去取这个数据

11:28.300 --> 11:29.300
取好了过后

11:29.300 --> 11:30.300
我再交还给你

11:30.300 --> 11:32.300
这样子来解决跨运问题

11:33.300 --> 11:34.300
这样子浏览期

11:34.300 --> 11:35.300
它请求的地址

11:35.300 --> 11:36.300
它就没有跨运了

11:36.300 --> 11:38.300
这就是代理的方式

11:38.300 --> 11:40.300
那么当然

11:40.300 --> 11:41.300
我觉得你们大部分

11:41.300 --> 11:42.300
同学应该知道

11:42.300 --> 11:43.300
这个东西

11:43.300 --> 11:44.300
你们都学过VIPAC

11:44.300 --> 11:45.300
也学过VU了

11:45.300 --> 11:47.300
应该知道这么一个原理

11:47.300 --> 11:49.300
然后我们在

11:49.300 --> 11:50.300
Umi.js

11:50.300 --> 11:53.300
里边怎么来配置代理服务器

11:53.300 --> 11:54.300
怎么来配置呢

11:54.300 --> 11:56.300
它默认是不会给你代理的

11:56.300 --> 11:57.300
那怎么来配置呢

11:57.300 --> 12:00.300
你需要在Umi.rc.js

12:00.300 --> 12:02.300
里边写上一个配置

12:02.300 --> 12:03.300
我们之前写过一个Planning

12:03.300 --> 12:04.300
这个配置

12:04.300 --> 12:06.300
那么这里边还有一些配置

12:06.300 --> 12:07.300
关于更多的配置的话

12:07.300 --> 12:08.300
我们后边

12:08.300 --> 12:10.300
会专门拿一接课来讲

12:10.300 --> 12:11.300
那么这边

12:11.300 --> 12:12.300
还有一些配置

12:12.300 --> 12:13.300
不要说proxy

12:15.300 --> 12:16.300
那么这个配置

12:16.300 --> 12:17.300
就是一个

12:17.300 --> 12:20.300
相当于就是VIPAC

12:20.300 --> 12:22.300
这东西相当于

12:22.300 --> 12:24.300
相当于

12:24.300 --> 12:29.300
VIPAC中的DevServer

12:29.300 --> 12:33.300
DevServer中的proxy配置

12:33.300 --> 12:34.300
就是这个配置

12:34.300 --> 12:36.300
你在这里配置的proxy

12:36.300 --> 12:37.300
它会直接把它

12:37.300 --> 12:38.300
作为VIPAC里边

12:38.300 --> 12:41.300
DevServer的proxy的配置

12:41.300 --> 12:42.300
说这里的配置的方式呢

12:42.300 --> 12:43.300
跟我们之前

12:43.300 --> 12:45.300
学习react的时候

12:45.300 --> 12:46.300
用那个脚授架

12:46.300 --> 12:48.300
叫creasereactapp

12:48.300 --> 12:49.300
对吧

12:49.300 --> 12:50.300
用那个脚授架

12:50.300 --> 12:51.300
那个脚授架里边配置在哪呢

12:51.300 --> 12:53.300
配置在punkey.json里边的

12:53.300 --> 12:54.300
这样的方式呢

12:54.300 --> 12:55.300
太弱了

12:55.300 --> 12:56.300
太弱了

12:56.300 --> 12:57.300
如果你要得到

12:57.300 --> 12:58.300
完整的配置的话

12:58.300 --> 13:00.300
在Umi.js里边非常方便

13:00.300 --> 13:02.300
直接在Umi.rc.js里边

13:02.300 --> 13:04.300
直接配置这个proxy就行了

13:04.300 --> 13:05.300
好

13:05.300 --> 13:06.300
那么配置的方式

13:06.300 --> 13:07.300
大家都懂的

13:07.300 --> 13:08.300
你们应该是学过

13:08.300 --> 13:09.300
这个玩意的

13:09.300 --> 13:10.300
你们毕竟学过VIPAC

13:10.300 --> 13:11.300
好

13:11.300 --> 13:12.300
那么配置的方式

13:12.300 --> 13:13.300
比方说

13:13.300 --> 13:14.300
表示的是

13:14.300 --> 13:16.300
你要拦截

13:16.300 --> 13:17.300
就是你要转发的

13:17.300 --> 13:18.300
就是你要

13:18.300 --> 13:19.300
待你的

13:19.300 --> 13:21.300
请求地址

13:21.300 --> 13:22.300
比方说

13:22.300 --> 13:25.300
我凡是以邪杠API开头的

13:25.300 --> 13:26.300
像这样的请求呢

13:26.300 --> 13:28.300
我要进行转发

13:28.300 --> 13:29.300
当然其他请求

13:29.300 --> 13:30.300
我就不要了

13:30.300 --> 13:32.300
只是对转发这样的请求

13:32.300 --> 13:33.300
邪杠API的请求

13:33.300 --> 13:35.300
我全部进行转发

13:35.300 --> 13:36.300
那么转发的时候呢

13:36.300 --> 13:37.300
转发到哪呢

13:37.300 --> 13:40.300
有这里有一个属性叫Target

13:40.300 --> 13:41.300
转发到哪呢

13:41.300 --> 13:42.300
转发到

13:42.300 --> 13:43.300
那个

13:43.300 --> 13:44.300
我看一下之前

13:44.300 --> 13:46.300
之前请求的地址是哪

13:46.300 --> 13:48.300
对

13:48.300 --> 13:49.300
转发到这

13:49.300 --> 13:52.300
我要把它转发到这个地址

13:52.300 --> 13:53.300
对吧

13:53.300 --> 13:54.300
就完事了

13:54.300 --> 13:56.300
就完事了

13:56.300 --> 13:57.300
没问题吧

13:57.300 --> 14:00.300
我要每当你请求这个地址的时候

14:00.300 --> 14:02.300
我要把这个

14:02.300 --> 14:04.300
要把就是这个地址

14:04.300 --> 14:06.300
转发到这个地址

14:06.300 --> 14:07.300
好

14:07.300 --> 14:08.300
来吧

14:08.300 --> 14:09.300
来试一下

14:09.300 --> 14:10.300
来试一下

14:10.300 --> 14:11.300
这还少许个API

14:11.300 --> 14:13.300
别当你请求这个开头的时候

14:13.300 --> 14:15.300
我要把它转发到这个地址

14:15.300 --> 14:16.300
好

14:16.300 --> 14:18.300
这里不用写一篇

14:18.300 --> 14:19.300
试一下

14:19.300 --> 14:20.300
试一下

14:20.300 --> 14:21.300
好

14:21.300 --> 14:23.300
咱们来试一下

14:23.300 --> 14:24.300
SAC目录下面

14:24.300 --> 14:25.300
我们还是

14:25.300 --> 14:27.300
我直接把那个copy过来了

14:27.300 --> 14:29.300
services

14:29.300 --> 14:31.740
copy过来

14:31.740 --> 14:33.740
services

14:33.740 --> 14:36.740
这里面有一个获取所有学生

14:36.740 --> 14:39.740
有一个根据分业来得到学生

14:39.740 --> 14:40.740
好吧

14:40.740 --> 14:41.740
有这么两个

14:41.740 --> 14:43.740
那咱们来试一下

14:43.740 --> 14:44.740
来试一下

14:44.740 --> 14:45.740
因为我们这里看

14:45.740 --> 14:46.740
我们请求的时候

14:46.740 --> 14:47.740
是不是没有加域名

14:47.740 --> 14:48.740
没有加关口

14:48.740 --> 14:49.740
直接请求的

14:49.740 --> 14:50.740
对吧

14:50.740 --> 14:51.740
你看是不是直接请求的

14:51.740 --> 14:53.740
那么就是本地的域名和端口

14:53.740 --> 14:55.740
那么这个都请求了

14:55.740 --> 14:56.740
会被

14:56.740 --> 14:57.740
会被webpack里面的

14:57.740 --> 14:59.740
dev server

14:59.740 --> 15:00.740
所结获

15:00.740 --> 15:01.740
它根据我们的配置

15:01.740 --> 15:02.740
它发现你的

15:02.740 --> 15:03.740
它发现你

15:03.740 --> 15:05.740
你请求的是以鞋杠API开头的

15:05.740 --> 15:06.740
那么我这里

15:06.740 --> 15:08.740
就把它转发到这个地址

15:08.740 --> 15:10.740
这里还有一个

15:10.740 --> 15:11.740
还有一个就是

15:11.740 --> 15:12.740
还有一个配置就是

15:12.740 --> 15:13.740
change

15:13.740 --> 15:14.740
orange

15:14.740 --> 15:15.740
把这两个都配置上

15:15.740 --> 15:16.740
把它设为去

15:16.740 --> 15:17.740
这个表示什么呢

15:17.740 --> 15:19.740
改变语言

15:19.740 --> 15:21.740
改变语言

15:21.740 --> 15:24.740
修改语言

15:24.740 --> 15:25.740
就是我们请求的

15:25.740 --> 15:27.740
这个地址的语言是什么呢

15:27.740 --> 15:28.740
语言是不是

15:28.740 --> 15:30.740
就是localhost

15:30.740 --> 15:31.740
8000

15:31.740 --> 15:32.740
对吧

15:32.740 --> 15:33.740
是这个端口

15:33.740 --> 15:34.740
是这个地址和端口

15:34.740 --> 15:36.740
然后我需要把语言修改掉

15:36.740 --> 15:37.740
修改成什么

15:37.740 --> 15:38.740
修改成这个

15:38.740 --> 15:40.740
就要做这么一件事

15:40.740 --> 15:42.740
这是这两个配置

15:42.740 --> 15:43.740
其实这个配置

15:43.740 --> 15:44.740
跟dev server的配置

15:44.740 --> 15:46.740
是完全一致的

15:46.740 --> 15:48.740
我就不特别

15:48.740 --> 15:49.740
特别展开了

15:49.740 --> 15:50.740
不然的话

15:50.740 --> 15:52.740
要讲到dev server的一块了

15:52.740 --> 15:53.740
那差不多了

15:53.740 --> 15:55.740
接下来我们来测试一下吧

15:55.740 --> 15:56.740
测试一下

15:56.740 --> 15:58.740
我们在这个配置室里边

15:58.740 --> 15:59.740
你看我们的students里边

15:59.740 --> 16:01.740
已经是在请求这样的地址了

16:01.740 --> 16:02.740
我们在这里

16:02.740 --> 16:03.740
配置室里边

16:03.740 --> 16:04.740
index

16:04.740 --> 16:05.740
首页里边进行测试

16:05.740 --> 16:07.740
我们这里先倒入

16:07.740 --> 16:11.110
import

16:11.110 --> 16:13.110
get all students

16:13.110 --> 16:15.110
就倒入这个students里边的

16:15.110 --> 16:17.110
这个方法

16:17.110 --> 16:19.110
from services

16:19.110 --> 16:22.420
然后这里是

16:22.420 --> 16:24.420
students

16:24.420 --> 16:26.420
倒入这个

16:26.420 --> 16:27.420
咱们倒入这个

16:27.420 --> 16:28.420
倒入这个

16:28.420 --> 16:29.420
它这里不是一个函数吗

16:29.420 --> 16:30.420
OK

16:30.420 --> 16:32.420
那么这个函数得到所有的学生

16:32.420 --> 16:33.420
然后这是一个异步的

16:33.420 --> 16:34.420
对吧

16:34.420 --> 16:36.420
反回的是

16:36.420 --> 16:37.420
我们这里直接输出

16:37.420 --> 16:39.420
输出服务器的响应结果

16:39.420 --> 16:41.420
咱们试一下

16:41.420 --> 16:42.420
保存

16:42.420 --> 16:43.420
然后运行出来

16:43.420 --> 16:47.500
start

16:48.500 --> 17:05.030
稍等一下

17:05.030 --> 17:06.030
打开了

17:06.030 --> 17:08.030
然后我们点击右键

17:08.030 --> 17:09.030
检查

17:09.030 --> 17:11.030
看一下控制台里边

17:11.030 --> 17:13.030
这里我们刷新一次

17:13.030 --> 17:15.030
你看是不是输出输出了

17:15.030 --> 17:17.030
拿到服务器的所有学生输出了

17:17.030 --> 17:18.030
对吧

17:18.030 --> 17:20.030
那么其实我们请求的

17:20.030 --> 17:22.030
如果说监控网络的话

17:22.030 --> 17:24.030
是你瀏覽器是监控不到的

17:24.030 --> 17:30.570
浏览器他对他好神奇啊你看我请求的地址是啥你看浏览器请求的地址是啥是不是local house 8000对吧

17:30.930 --> 17:37.730
请求的是这样的地址请求这样的地址为什么能拿到数据呢浏览器都不知道啊他又不知道怎么回事反正就拿到数据了拿到数据就ok

17:38.590 --> 17:46.950
实际上这个东西就是就是这里的啊这个图浏览器请求这个地址这个地址呢他被这东西解获了被单理服务请deaf store结获了

17:47.270 --> 17:53.590
那么这个然后呢他把这个请求呢转而去请求他根据我们的配置啊他发现我们的请求路径是以

17:54.030 --> 17:58.990
开头的所以说他要做这么一件事啊去请求这样的地址啊请达到数据发挥

18:00.030 --> 18:03.630
原来这意思吗啊这是关于这一块啊带你这一块

18:04.590 --> 18:09.550
好就没啥说的啊就是配置啊配置5米

18:09.550 --> 18:11.550
5米

18:13.550 --> 18:15.550
5米

18:17.550 --> 18:19.550
中的

18:21.550 --> 18:23.550
配置方式和

18:25.550 --> 18:27.550
配置

18:29.550 --> 18:31.550
配置

18:33.550 --> 18:35.550
另外一块呢是关于数据的模拟

18:36.350 --> 18:42.830
这种用于来解决什么问题呢呃用来解决前后端协同开发的问题啊

18:43.630 --> 18:50.830
主要是用于用于解决前后端协同开发的问题

18:52.110 --> 18:55.710
因为他这个5米解释呢他是一个企业级的应用框架

18:56.510 --> 19:03.710
所以说他考虑到我们实际开发中的一些常见的常见的一些场景比方说啊我们有一个项目来了

19:04.670 --> 19:08.590
这个项目来了过后来需求也分析出来了啊那么各部门的开始动工了

19:09.230 --> 19:16.190
后端干嘛呢后端的开发人员是不是在开发接口对吧开发数据接口什么数据库啊web服务器啊

19:16.590 --> 19:21.710
缓存啊安全啊这些东西全是后端搞定对吧后端来开发这些东西

19:22.350 --> 19:25.710
那么前端是不是要等到后端开发完了过后才能动呢

19:26.510 --> 19:33.070
啊有同学说是啊因为你后端没有开发完我的哪里去拿数据呢没有不能拿数据我怎么来测试我们的页面呢

19:33.550 --> 19:42.990
所以有这样的一个问题啊前端还进了开发人员只能是等着等只能说你去能能够做一些什么能够做一些不需要数据的页面啊当然呢

19:43.390 --> 19:50.750
不需要数据的组件或者说啊当然这样子的效率太低了因为你没有拿这个时候后端没有开发完成

19:51.150 --> 19:57.310
所以说呢你是没有数据的没有数据这个时候呢你怎么来开发组件呢就会遇到这么一个问题

19:58.030 --> 20:02.990
啊当然我们肯定不可能等后端开发完了过后再开发前端这样子的效率太

20:03.790 --> 20:07.230
低了啊你会造成了资源的弦制就是人力资源的弦制

20:07.710 --> 20:15.070
所以说呢我们希望同时开发那么这个时候呢后端由于还没有开发完成那比方说啊我们现在去请求这个地址

20:16.110 --> 20:26.750
你哪怕配置的代理也没用你配置代理有用啊没用啊你配置代理你配置代理等于白配置啊因为这个时候这个地址根本就拿不到数据后端都还是正在开发当中

20:27.230 --> 20:28.990
你拿不到数据啊

20:29.710 --> 20:35.070
这是一种情况另外一种情况就是说后端的真实的数据呢你不要随便访问啊

20:35.710 --> 20:41.310
当然也不太会是真实的数据啊一般来说的话这些数据呢就是也是一个

20:42.190 --> 20:45.390
专门用于测试的数据啊真实的数据呢部署之后才会有

20:46.030 --> 20:48.030
嗯就是第一个种场比较常见一点

20:48.510 --> 20:54.270
就是说我们前端开发的时候有可能会出现后端的数据还没有

20:54.990 --> 21:02.190
后端还没有开发完成那么这个时候代理有用吗是没用啊代理是没用的对不对那代理我可以不要了

21:03.070 --> 21:04.030
啊我把注释掉

21:04.990 --> 21:05.630
代理没用了

21:06.430 --> 21:11.710
但是呢我们目前的前端无论是前端也好还是后端也好

21:11.870 --> 21:19.870
他们都非常清楚你要请求什么样的地址能得到什么样的数据数据里面有哪些内容这个东西是非常清楚的

21:20.110 --> 21:23.310
因为一开始在分析需求的时候就会把这些东西约定好

21:23.710 --> 21:34.190
咱们有哪些请求地址哪每个地址他反回什么样的数据用get请求还是posed请求啊拿到的数据格式是什么是一个数据还是个对象还是一个什么玩意啊格式

21:34.270 --> 21:36.510
这东西都会写成一个文档把它约定好

21:37.390 --> 21:41.790
那么这个约定好了过后后端知道哎我该去怎么样去开发这个接口

21:42.430 --> 21:48.990
前端的也知道我该怎么去请求这个接口会拿到什么东西但是呢问题是后端还没有开发完前端怎么办

21:49.950 --> 21:55.550
那么这个时候怎么办了就需要用到数据模拟啊数据模拟啊数据模拟

21:57.840 --> 21:59.760
数据模拟可以啊

22:01.120 --> 22:11.760
可以让前端开发者啊他我这个数据模拟的场景很多啊我这里只是说其中一个啊数据模拟呢可以让前端开发者

22:13.600 --> 22:14.800
在开发时

22:15.840 --> 22:18.800
无视后端是否完成

22:19.520 --> 22:20.320
后端接口

22:21.200 --> 22:23.280
是否真正完成啊

22:24.240 --> 22:30.160
因为我们请我们请求的时候呢就不再去请求后端了而去请求我们模拟的数据

22:32.080 --> 22:38.800
也因为使用的是模拟的数据那么如果说画一个图的话我们该怎么来画呢

22:39.120 --> 22:44.640
是这样子我们之前呢是用代理服务器这样子完成对吧那么现在呢我们就不用代理服务器了

22:44.960 --> 22:48.800
直接模拟数据因为后端正在开发当中啊

22:49.840 --> 22:52.800
我们的后端接口正在开发中还没有提供一个

22:53.920 --> 22:56.960
完整的接口出来那么这个时候呢当我们

22:58.640 --> 23:04.400
当我们去请求某个地址的时候能把它转发到后端了或者说没有数据啊你怎么拿呢打不到

23:04.880 --> 23:12.320
所以说呢这个时候呢我们就可以使用模拟啊那么这里呢API user那我们请求这个地址的时候呢会被啊

23:13.280 --> 23:15.920
被磨磨坑模块

23:16.880 --> 23:18.240
结货啊

23:21.790 --> 23:26.430
这个磨坑模块呢是那个就是无密接式里边的一个模块啊结货

23:27.790 --> 23:35.070
它会被这里结货转而呢给它提供模拟数据啊提供模拟数据直接提供模拟数据

23:36.270 --> 23:42.270
啊他就不会再去请求什么乱七八糟的玩意了啊不会再去请求了直接提供模拟数据他就是这么一个意思

23:42.990 --> 23:50.750
啊就跟后那么这些这样的一个模式的话跟后端是不是就没关系了就脱离了对吧真正能达到前后端分离的目的

23:50.990 --> 23:58.830
那么后端里开发里的啊你开发完了过后我把这个模拟一去 ok 你就可以正常了这场运行了啊如果你开发完成之前

23:59.550 --> 24:04.910
你在开发完成之前我们都使用模拟数据啊这也是一种常见做法这种做法呢

24:04.990 --> 24:12.830
适用于后端还没有跟还没有开发完成的情况那如果说后端已经开发完成了 ok 那你就直接使用后端的

24:13.790 --> 24:19.470
另外吧就跟刚才一样是用代理是用后端的如果说后端没有开发完成你可以使用模拟数据

24:21.070 --> 24:26.030
好那么这个模拟数据怎么来做呢在无米阶史里边他是有约定的

24:26.750 --> 24:33.070
他约定什么东西呢他首先要知道我们的模拟数据的文献在哪这个地方还有约定啊

24:33.470 --> 24:35.150
无米阶史约定

24:36.750 --> 24:36.910
呃

24:38.030 --> 24:45.550
第一个就是s不是src啊就是跟目录下面的mock文件夹中的文件

24:46.430 --> 24:50.270
第二种第二个文件呢是呃配级是

24:50.990 --> 24:54.270
文件夹配级是一般在src下面啊

24:54.990 --> 24:57.630
src配级是文件夹中的

24:58.670 --> 24:58.990
mock

24:59.710 --> 25:03.230
的阶史文件啊他约定以上

25:04.350 --> 25:04.990
两种

25:06.030 --> 25:06.990
阶史文件

25:08.030 --> 25:08.750
均会

25:09.790 --> 25:14.190
被无米阶史读取啊并作为

25:15.550 --> 25:18.190
数据模拟的配置

25:19.390 --> 25:22.910
就这些文件呢你就是在配置模拟数据啊就这么个意思

25:23.550 --> 25:28.590
好也就是说我们要写数据模拟应该写到哪呢我们代码应该写到哪呢

25:29.070 --> 25:32.830
因为你肯定要写代码呀你不写代码你怎么知道他怎么知道你要模拟什么数据呢

25:33.070 --> 25:37.950
你要请求什么地址对吧因为模拟肯定是你请求这个地址我给你模拟一些数据

25:38.110 --> 25:41.950
你请求这个地址呢我给你模拟另外一些数据啊就这么个意思

25:42.270 --> 25:44.110
所以说呢你这里肯定要经营配置的

25:45.150 --> 25:48.510
那么配置写哪呢我们首先要约定好就他就这样约定的

25:49.070 --> 25:50.030
要么呢你有写这

25:50.590 --> 25:53.470
在这啊注意啊他不在src目录下面啊在这

25:54.270 --> 25:54.990
mock文件夹

25:55.470 --> 25:57.310
要么你写这在这里面写级s

25:57.870 --> 26:02.110
要么呢你就在src配置里边写上一个下滑线mock.js

26:02.510 --> 26:07.230
啊我们比较常用的数据模拟的是直接写到这啊直接写到这啊

26:07.230 --> 26:12.030
这里边呢你就可以写任意数量的json文件都行每一个json文件呢模拟

26:12.030 --> 26:15.550
某一部分的数据啊比方说那我们这里呢就写这么一个

26:16.110 --> 26:18.190
模拟学生数据嘛啊student.js

26:19.070 --> 26:23.550
好那这里边咋写呢他导出的是一个啊导出的是

26:24.030 --> 26:28.110
数据模拟数据模拟的配置

26:28.910 --> 26:29.630
啊配置

26:30.270 --> 26:35.710
好也就导出就要这样导出啊sport default这个文件呢该文件会被啊

26:36.430 --> 26:38.030
该文件会被

26:39.310 --> 26:41.230
5米json读取

26:41.230 --> 26:43.870
就是你自己不用去读他也不用去导入他

26:43.870 --> 26:45.630
你只需要默认导出就行了

26:45.630 --> 26:47.630
那么5米json呢会来处理这个文件

26:48.110 --> 26:50.430
好那么default导出的是

26:51.390 --> 26:54.990
啊这里啊default导出一个对象

26:54.990 --> 26:57.310
这个对象呢里边就写各种各样的配置

26:57.310 --> 27:01.790
这个对象的属性名呢就匹配的是请求规则

27:01.790 --> 27:04.190
比方说你要请求哪个地址呢

27:04.190 --> 27:06.590
你要请求你看看我们刚才请求的是哪个地址

27:07.790 --> 27:09.710
呃刚才的sales里边

27:09.710 --> 27:11.150
请求不是这个地址吗对吧

27:11.150 --> 27:13.550
呃find all对吧找到所有学生

27:13.550 --> 27:16.750
哎那么现在这个问题是后台还没有开发完成哦

27:16.750 --> 27:18.590
这个地址还没有还没有开发完成

27:18.750 --> 27:21.390
还没有还没有开发完成你达不到数据那么魔力呗

27:21.390 --> 27:25.470
好当你用get的请求方法去请求这个地址的时候

27:26.430 --> 27:28.590
那怎么办呢怎么办呢

27:28.590 --> 27:32.030
好那么我后边呢给你给你魔力数据

27:33.470 --> 27:35.470
在这里给他一个魔力的数据

27:35.470 --> 27:38.190
这个数据你直接写就完事了啊直接写就完事了

27:38.190 --> 27:40.990
比方说你该写个对象啊返回了不就是个对象吗

27:40.990 --> 27:43.870
你看一下之前咋说的啊

27:45.310 --> 27:47.070
来吧访问一下吧访问一下啊

27:49.680 --> 27:55.680
访问一下啊 uh api adu uh api students

27:57.280 --> 27:58.080
student

27:59.920 --> 28:00.720
dient

28:02.160 --> 28:03.280
fand all

28:05.200 --> 28:06.640
ok 试一下吧

28:07.600 --> 28:08.240
哎不对

28:10.080 --> 28:10.400
哪个

28:11.760 --> 28:13.840
哎把这个放进去啊

28:17.070 --> 28:18.830
好所以拿到数据了对吧

28:18.990 --> 28:22.270
当然你现在我们要假设服务器没有数据对不对

28:22.270 --> 28:24.830
啊那么服务器反过来的数据是不是这么格式

28:24.830 --> 28:27.230
ok 你在魔力数据的时候呢

28:27.230 --> 28:29.630
我们通常呢跟服务器的数据结构一样

28:29.630 --> 28:31.310
因为这个东西是约定好的

28:31.310 --> 28:32.430
为什么要一样的

28:32.430 --> 28:36.510
一样的好处在于将来服务器那边他总规会开发完成的

28:36.510 --> 28:38.350
他不能永远在开发中吧

28:38.350 --> 28:42.030
你当服务器开发完成之后你只要把这个

28:42.990 --> 28:45.710
把这个就是哪怕把这个文件讲名字一改

28:45.710 --> 28:48.510
是不是就读不到了啊把这个文件讲名字一改

28:48.590 --> 28:50.590
是不是所谓的魔力全部消失了

28:50.590 --> 28:52.350
然后把带你一家

28:52.350 --> 28:54.670
是不是就全部完了其他代码全部不用动

28:54.670 --> 28:58.190
因为你这里的数据格式跟服务器的格式是一样的

28:58.190 --> 29:01.630
啊所以说你这里要要保证数据格式要一样

29:01.630 --> 29:04.110
那么怎么来知道数据格式是什么了

29:04.110 --> 29:06.510
你们在开发之前就会约定好

29:06.510 --> 29:08.750
啊你们会开会就会约定好这个东西

29:09.310 --> 29:12.030
好那么这里呢比方说当你请求这个地址的时候

29:12.030 --> 29:14.670
我给你的是一个对象对吧是一个阶层对象

29:14.670 --> 29:16.670
你看服务器给的是不是就是一个阶层对象

29:16.670 --> 29:17.230
你看吧

29:18.670 --> 29:19.310
服务器给的

29:21.230 --> 29:21.870
你看呀

29:21.870 --> 29:23.070
这不就是个阶层对象

29:23.070 --> 29:24.110
它里边有什么属性呢

29:24.110 --> 29:25.630
有message查询成功

29:25.630 --> 29:26.910
standars 6s

29:27.630 --> 29:29.950
message查询成功

29:31.070 --> 29:31.470
成功

29:33.150 --> 29:33.630
然后呢

29:35.070 --> 29:35.710
standars

29:36.590 --> 29:37.150
standars

29:38.670 --> 29:39.230
succes

29:40.110 --> 29:40.830
succes

29:40.830 --> 29:41.390
对吧

29:41.390 --> 29:42.350
然后呢还有data

29:42.350 --> 29:44.030
data就表示具体的数据啊

29:44.030 --> 29:44.750
具体的数据呢

29:44.750 --> 29:45.630
它是一个数组啊

29:45.630 --> 29:46.270
我们这数组呢

29:46.270 --> 29:47.710
先随便写一些嘛

29:47.710 --> 29:48.990
二二十七随便写一个

29:48.990 --> 29:49.950
随便写一个

29:49.950 --> 29:51.230
咱们主要是看一下啊

29:51.230 --> 29:51.950
主要是看一下

29:52.670 --> 29:53.790
好保存

29:53.790 --> 29:54.750
你现在看一下啊

29:54.750 --> 29:56.350
咱们重新启动我们的工程

29:59.570 --> 29:59.890
start

30:00.450 --> 30:01.570
好那么

30:01.570 --> 30:02.290
细节下来呢

30:02.290 --> 30:04.370
我们再去请求这个服务器啊

30:04.370 --> 30:05.170
现在

30:05.170 --> 30:06.930
现在我们也也没有用代理的

30:06.930 --> 30:07.250
对吧

30:07.250 --> 30:08.290
也没有用代理的

30:08.290 --> 30:09.650
那么去请求服务器

30:09.650 --> 30:11.730
当我们去请求这个地址的时候呢

30:11.730 --> 30:13.490
直接被默克摩扩结获了

30:13.490 --> 30:15.410
他直接给你扔过去一个魔力数据

30:15.410 --> 30:17.250
根本你们跟服务器没有什么关系了

30:18.130 --> 30:18.450
那么

30:19.170 --> 30:20.050
你看这边

30:20.050 --> 30:21.650
这边在请求的时候啊

30:21.650 --> 30:22.530
去请求

30:22.530 --> 30:24.050
请求的是拿到数据

30:24.050 --> 30:26.210
然后解析成为对象

30:26.210 --> 30:26.770
然后呢

30:26.770 --> 30:27.810
干嘛呢

30:27.810 --> 30:28.370
然后呢

30:28.370 --> 30:28.850
再把它

30:29.810 --> 30:31.970
读到服务器里面的返回的data数据

30:31.970 --> 30:33.090
data属性

30:33.090 --> 30:34.450
就这里的属性data

30:34.450 --> 30:35.090
那么

30:35.090 --> 30:36.370
正常情况下呢

30:36.370 --> 30:38.450
客户端那边要输出一个数组

30:38.450 --> 30:39.170
好看一下

30:40.690 --> 30:41.570
有没有输出数组

30:43.250 --> 30:43.570
刷新

30:43.570 --> 30:45.730
啊你看一下这里

30:45.730 --> 30:46.930
是不是输出一个数组

30:46.930 --> 30:47.810
看没

30:47.810 --> 30:48.290
对吧

30:48.770 --> 30:50.450
这就是他从服务器拿到的结果

30:50.450 --> 30:52.130
然后我们再看网络请求

30:52.130 --> 30:53.250
网络请求这一块

30:54.610 --> 30:55.490
啊你看

30:55.490 --> 30:56.290
访问这个例子

30:56.290 --> 30:57.490
你看服务器的响应结果

30:58.210 --> 30:59.490
是不是就魔力的数据了

30:59.490 --> 31:01.090
这些东西都是我们魔力的数据

31:01.090 --> 31:01.410
看没

31:02.210 --> 31:04.050
那么现在跟真实的服务器有没有关系

31:04.050 --> 31:05.330
就没有什么关系了

31:05.330 --> 31:07.010
将来有一天服务器开发完成

31:07.010 --> 31:08.850
由于我们的格式是完全一样的

31:08.850 --> 31:09.250
ok

31:09.250 --> 31:09.970
你把这个东西

31:10.530 --> 31:12.290
把这个文件雅人名字一改

31:12.290 --> 31:13.410
改成别的文件雅人名字

31:13.410 --> 31:14.610
ok就完全没问题了

31:15.730 --> 31:16.850
不要这意思吧

31:16.850 --> 31:17.810
这就是魔力数据

31:18.930 --> 31:20.450
当然你这里可以魔力很多

31:20.450 --> 31:20.930
比方说

31:20.930 --> 31:22.530
还可以魔力poss请求

31:22.530 --> 31:23.650
服务器的响应结果

31:24.370 --> 31:26.130
还可以魔力其他任何东西

31:26.130 --> 31:27.250
都可以在这里进行魔力

31:28.130 --> 31:28.610
甚至呢

31:28.610 --> 31:31.250
你还可以用你们之前学习过的这个

31:31.250 --> 31:33.410
moker介石来进行配合

31:33.410 --> 31:33.890
比方说

31:34.930 --> 31:35.250
可以

31:38.060 --> 31:40.060
可以自行发挥

31:42.220 --> 31:42.700
添加

31:43.740 --> 31:44.460
魔力数据

31:45.820 --> 31:46.860
通常

31:46.860 --> 31:47.740
我们会

31:48.620 --> 31:49.500
会和

31:50.460 --> 31:52.300
moker介石配合

31:52.300 --> 31:53.420
这个玩意应该学过吧

31:53.420 --> 31:53.740
对吧

31:54.380 --> 31:55.340
应该学过啊

31:55.340 --> 31:56.940
这是一个常见的库

31:57.660 --> 31:59.260
如果说你没有学过的话

31:59.260 --> 31:59.980
也没有关系啊

31:59.980 --> 32:01.020
你听几句话

32:01.020 --> 32:01.660
很简单

32:01.660 --> 32:03.660
非常非常简单的一个库

32:03.660 --> 32:05.100
你可能一两个小时就学就完了

32:05.100 --> 32:06.060
你可以去

32:06.060 --> 32:07.100
摆动里面搜一下

32:07.100 --> 32:07.820
moker介石

32:09.020 --> 32:09.500
啊就这个

32:10.140 --> 32:10.780
不就这个吗

32:12.060 --> 32:12.540
他用来

32:13.260 --> 32:15.340
他到时他里面也提供了蓝阶

32:15.340 --> 32:15.980
而且他只请求

32:15.980 --> 32:17.020
但是他那个蓝阶

32:17.020 --> 32:17.660
我们不用

32:17.660 --> 32:18.860
他蓝阶太low了

32:18.860 --> 32:19.260
我们不用

32:19.980 --> 32:20.380
我们

32:21.020 --> 32:22.860
主要是用他的生成魔力数据

32:22.860 --> 32:24.780
主要是用他来生成魔力数据

32:24.780 --> 32:25.100
好

32:25.100 --> 32:26.380
咱们来用一下吧

32:26.380 --> 32:27.340
我们首先安装一个

32:30.930 --> 32:31.730
安装一下

32:31.730 --> 32:32.370
moker介石

32:33.170 --> 32:33.810
moker介石

32:35.170 --> 32:36.050
安装一下啊

32:39.810 --> 32:40.850
好多版本

32:40.850 --> 32:42.850
这里边有些有些警告是这样子的

32:42.850 --> 32:45.810
因为我们没有用那个无米脚手架来搭建

32:45.810 --> 32:48.370
所以说这里边缺失了很多的

32:49.410 --> 32:50.050
依赖的包

32:50.530 --> 32:51.250
缺失了很多

32:51.250 --> 32:53.410
我们之前还演示过给大家演示过对吧

32:53.490 --> 32:54.610
直接建一个文件下去

32:54.610 --> 32:55.730
这是一个无米工程

32:55.730 --> 32:56.210
他

32:56.210 --> 32:58.050
因为他很多包都是全局安装的

32:58.050 --> 32:59.090
所以说你不用安装

32:59.090 --> 33:00.130
他本地包了一些警告

33:00.130 --> 33:00.770
不用管他

33:01.730 --> 33:02.370
一样start

33:04.930 --> 33:05.250
嗯

33:05.810 --> 33:06.850
我们先先写了

33:06.850 --> 33:07.570
写了吧

33:07.570 --> 33:08.770
先写的过后再运行

33:11.440 --> 33:12.400
好不要让这儿啊

33:14.160 --> 33:15.440
我们写到哪呢

33:15.440 --> 33:16.080
就写到这儿吧

33:16.560 --> 33:16.960
好吧

33:16.960 --> 33:17.440
就写到这儿

33:19.710 --> 33:20.270
好

33:20.270 --> 33:21.950
我们导入那个什么

33:21.950 --> 33:22.670
moker介石

33:23.470 --> 33:23.790
moker

33:26.130 --> 33:26.530
from

33:27.490 --> 33:28.210
moker介石

33:28.770 --> 33:29.250
导入这个

33:30.290 --> 33:33.570
那么这个moker里边还提供了很多的方法

33:33.570 --> 33:35.170
来帮助你模拟数据

33:35.170 --> 33:36.610
我们来大概看一下吧

33:36.610 --> 33:38.050
moker里边还提供了什么方法呢

33:38.050 --> 33:39.570
它其中一个方法叫做moker

33:39.570 --> 33:40.770
就是模拟数据

33:40.770 --> 33:42.370
产生一个模拟的数据

33:42.930 --> 33:44.530
那你这里边写啥呢

33:44.530 --> 33:46.450
就写的是模拟规则一个对象

33:47.010 --> 33:48.450
那么这个东西还返回的是什么

33:48.450 --> 33:49.970
返回的就是你这里写的对象

33:50.530 --> 33:52.210
比方说我这里简单的写一下吧

33:54.370 --> 33:54.530
a

33:55.090 --> 33:56.130
等于e

33:56.130 --> 33:57.410
b等于abc

33:57.410 --> 33:58.450
就随便写一个吧

33:58.530 --> 34:00.450
我们看下返回来写什么样的结果

34:01.010 --> 34:01.570
result

34:03.170 --> 34:03.650
看一下吧

34:05.330 --> 34:08.530
因为我现在不能确定你们到底有没有学过这个

34:08.530 --> 34:09.330
没有学过这个的话

34:09.330 --> 34:10.850
我多多少少得提两句

34:11.410 --> 34:13.490
不会太过于详细的提

34:13.490 --> 34:14.610
如果你学过这个的话

34:14.610 --> 34:15.330
你就懂了

34:15.330 --> 34:16.050
你懂的对吧

34:16.050 --> 34:17.650
你直接用就完事了

34:17.650 --> 34:18.930
如果你没学过这个的话

34:18.930 --> 34:21.090
你就多听两句吧

34:21.970 --> 34:23.090
你可以去百度搜索一下

34:23.090 --> 34:24.210
这个非常非常简单

34:24.210 --> 34:25.490
它这里有一个文档

34:25.490 --> 34:26.770
文档是在github上面

34:27.570 --> 34:28.370
你可以看一下

34:30.830 --> 34:31.470
我看一下吧

34:32.510 --> 34:33.390
好 咱运行出来

34:37.740 --> 34:38.380
咱们看一下

34:38.860 --> 34:39.740
扛收控制台里边

34:40.620 --> 34:40.940
刷新

34:43.900 --> 34:44.700
我这个地方

34:45.980 --> 34:46.300
等一下

34:48.060 --> 34:49.420
我这个地方还没有输出呢

34:50.460 --> 34:51.260
它没有输出

34:52.780 --> 34:53.340
我看一下

34:56.460 --> 34:57.180
明白了

34:57.180 --> 34:58.620
它这个东西输出是在这

34:58.620 --> 35:00.140
输出是在这

35:00.140 --> 35:01.660
它不在浏览器里边

35:01.740 --> 35:05.020
因为这些代码是在漏的环境里边执行的

35:05.020 --> 35:06.940
在漏的环境里边就会把它执行好

35:07.660 --> 35:08.700
当你要用的时候

35:08.700 --> 35:10.060
你直接得到模拟数据了

35:10.060 --> 35:12.620
说实际上上面的代码是在漏的环境里边执行的

35:13.580 --> 35:15.340
但是你们现在没有血腥漏的

35:15.340 --> 35:16.060
没关系

35:16.060 --> 35:17.580
你们后边就会血腥漏的了

35:17.580 --> 35:18.860
你明白怎么回事了

35:18.860 --> 35:20.300
因为无密集合室里边

35:20.300 --> 35:21.100
它用的是

35:21.100 --> 35:23.260
它是在进行打包构建

35:23.260 --> 35:25.100
它打包的时候要去堵这些东西

35:25.100 --> 35:26.780
所以它是在漏的环境里边堵的

35:26.780 --> 35:28.940
因此你要看这个输出在哪儿看了

35:28.940 --> 35:29.980
你在漏的环境里边看

35:30.540 --> 35:31.180
你看

35:31.180 --> 35:32.380
输出了这么一个东西

35:32.380 --> 35:33.180
看没

35:33.180 --> 35:34.540
这是它输出的结果

35:34.540 --> 35:36.140
你看就不是模拟了数据

35:36.140 --> 35:37.180
模拟了对象

35:37.180 --> 35:38.060
A等于EA

35:38.060 --> 35:38.780
B等于ABC

35:39.740 --> 35:42.140
那么我们这里是不是可以直接写了

35:42.780 --> 35:43.980
message status

35:43.980 --> 35:44.220
对吧

35:44.220 --> 35:45.340
是不是可以直接写这儿

35:45.820 --> 35:45.980
好

35:45.980 --> 35:47.500
那么接下来data怎么办呢

35:47.500 --> 35:48.060
data

35:48.060 --> 35:48.940
它是一个输主

35:48.940 --> 35:49.500
对吧

35:49.500 --> 35:50.300
是一个输主

35:50.300 --> 35:51.980
在这个默可解释里边

35:51.980 --> 35:53.180
它提供了这么一个方式

35:54.060 --> 35:55.260
就是我的属性名

35:56.460 --> 35:57.100
叫做data

35:57.100 --> 35:58.620
属性名叫做data

35:58.620 --> 35:59.580
然后呢

35:59.580 --> 36:00.540
它是一个输主

36:00.540 --> 36:01.580
输主有多少项呢

36:01.580 --> 36:02.940
我们加个数线

36:02.940 --> 36:04.700
然后后面写上输主有多少项

36:05.260 --> 36:05.900
有多少项呢

36:05.900 --> 36:09.820
我们这里比方说有123项

36:11.260 --> 36:12.460
123个输主

36:12.460 --> 36:13.500
或者100项的输主

36:15.260 --> 36:17.580
那么输主的每一项是什么呢

36:17.580 --> 36:18.700
每一项是啥呢

36:18.700 --> 36:19.180
你这里

36:20.460 --> 36:21.340
这是属性啊

36:21.340 --> 36:22.300
属性规则

36:22.300 --> 36:23.980
属性这里配置属性规则

36:23.980 --> 36:25.660
它会被mock来进行处理

36:25.660 --> 36:27.260
变成一个模拟数据

36:27.260 --> 36:28.220
那么这个data

36:28.220 --> 36:29.180
表示什么意思呢

36:29.180 --> 36:31.260
表示的是我们的属性名字

36:31.260 --> 36:33.580
生成最终结果的属性名字

36:33.580 --> 36:34.940
那么这个表示

36:34.940 --> 36:36.220
如果它是一个输主的话

36:36.220 --> 36:37.180
那么它有100项

36:38.540 --> 36:39.820
每一项是啥呢

36:39.820 --> 36:41.580
每一项是一个对象

36:41.580 --> 36:43.180
你这样的配置

36:43.180 --> 36:44.220
这样的配置

36:44.220 --> 36:46.460
表示它在输主里边

36:46.460 --> 36:48.700
取一个来自生成100次

36:48.700 --> 36:50.140
重复100次

36:50.140 --> 36:52.060
重复输主里边100次这个对象

36:53.020 --> 36:54.780
形成一个新的输主

36:54.780 --> 36:56.780
那么对象里边比方说写啥呢

36:58.300 --> 37:01.100
我们就学生这一块

37:02.300 --> 37:03.100
我们看一下

37:03.100 --> 37:03.900
学生这一块

37:03.900 --> 37:07.100
我们之前请求的data

37:07.100 --> 37:07.900
有很多数据

37:07.900 --> 37:08.460
对吧

37:08.460 --> 37:09.820
有什么name对不对

37:09.820 --> 37:11.020
name

37:11.020 --> 37:11.820
好name呢

37:11.820 --> 37:14.860
我们这里写上一个abc

37:14.860 --> 37:15.980
我们先随便写一个

37:15.980 --> 37:17.180
先随便写一个

37:17.180 --> 37:17.740
好

37:17.740 --> 37:18.300
保存

37:18.300 --> 37:18.940
咱们看一下

37:20.380 --> 37:20.700
你看

37:21.420 --> 37:22.940
我们生成的模拟数据里边

37:23.900 --> 37:25.660
message status

37:25.660 --> 37:26.780
data是不是变成100

37:27.580 --> 37:29.420
数量长度为100的输主

37:29.420 --> 37:29.980
对吧

37:29.980 --> 37:31.980
你看是不是长度为100的输主

37:31.980 --> 37:33.180
每个输主里边每一个

37:33.180 --> 37:34.060
是不是对象

37:34.060 --> 37:35.260
name为abc

37:35.260 --> 37:36.860
那么abc是不是可以换

37:36.860 --> 37:37.500
换成啥

37:37.500 --> 37:39.180
换成其他的随机的名字

37:39.180 --> 37:40.620
怎么来写随机的名字呢

37:40.620 --> 37:41.020
你看一下

37:41.020 --> 37:41.740
moc里边

37:41.740 --> 37:42.860
我们可以加个

37:44.300 --> 37:44.780
数线

37:45.820 --> 37:46.540
然后

37:46.540 --> 37:47.020
不对

37:47.020 --> 37:47.420
在这

37:48.140 --> 37:48.860
在后边写上

37:49.820 --> 37:50.140
内容

37:51.500 --> 37:52.380
里边一个模拔

37:52.380 --> 37:53.740
模拔好像是data

37:53.740 --> 37:54.220
cname

37:55.340 --> 37:55.980
如果不是的话

37:56.140 --> 37:56.860
我查一下文章

37:56.860 --> 37:57.740
有点忘了

37:57.740 --> 37:58.220
好

37:58.220 --> 37:58.620
保存

37:59.340 --> 37:59.900
你看

37:59.900 --> 38:01.420
名字是不是随机生成的

38:01.420 --> 38:03.180
cname表示Chinese name

38:03.180 --> 38:04.620
中国中文名字

38:04.620 --> 38:06.140
它可以随机生成一些中文名字

38:07.180 --> 38:07.420
好

38:07.420 --> 38:07.740
你看

38:08.700 --> 38:09.100
好

38:09.100 --> 38:09.500
再来

38:09.500 --> 38:10.060
再来

38:11.340 --> 38:11.820
然后呢

38:11.820 --> 38:12.540
还有什么呢

38:12.540 --> 38:14.620
还有模拟数据叫模拟相一点吧

38:14.620 --> 38:15.420
对吧

38:15.420 --> 38:17.020
模拟相一点

38:17.020 --> 38:17.900
它这里不是有

38:17.900 --> 38:18.540
adress嘛

38:18.540 --> 38:18.940
对吧

38:18.940 --> 38:19.900
adress

38:19.900 --> 38:21.020
我们这里模拟一个

38:21.900 --> 38:22.460
adress

38:23.180 --> 38:23.900
adress的话

38:23.900 --> 38:24.620
我们这里呢

38:24.700 --> 38:26.300
使用这个站位符

38:26.300 --> 38:27.180
city

38:27.180 --> 38:28.220
我记得应该是这个

38:28.860 --> 38:29.020
好

38:29.020 --> 38:29.340
看一下

38:30.460 --> 38:30.700
好

38:30.700 --> 38:31.100
你看

38:31.100 --> 38:32.540
而随时数也随机生成了

38:32.540 --> 38:32.940
对吧

38:32.940 --> 38:33.900
地址也随机生成了

38:35.020 --> 38:35.740
用个站位符

38:36.940 --> 38:37.180
好

38:39.500 --> 38:40.540
差不多了

38:40.540 --> 38:41.180
差不多了

38:41.900 --> 38:42.380
就这样

38:42.380 --> 38:43.580
然后我们再来看一下

38:45.500 --> 38:46.380
这个apt

38:46.380 --> 38:47.020
这个东西

38:47.020 --> 38:47.740
我们

38:47.740 --> 38:49.020
如果说你要用到的话

38:49.020 --> 38:50.460
也可以进行模拟

38:50.460 --> 38:51.660
一个随机字无窜

38:51.660 --> 38:52.220
咱们来看一下

38:52.220 --> 38:53.420
随机字无窜怎么模拟嘛

38:54.620 --> 38:56.460
一个随机字无窜abp key

38:56.460 --> 38:57.260
abp key的话

38:57.260 --> 38:58.540
它前面是一个d

38:58.540 --> 38:59.500
前面是一个

39:00.700 --> 39:02.220
账号开头

39:02.220 --> 39:03.020
我看一下

39:03.020 --> 39:03.500
其他的

39:04.540 --> 39:06.700
前面是一个账号开头

39:08.060 --> 39:08.940
然后的话

39:08.940 --> 39:10.780
后边是一个随机字无窜对吧

39:10.780 --> 39:11.820
随机字无窜

39:11.820 --> 39:13.660
那咱们就直接来一个

39:13.660 --> 39:14.060
这样吧

39:14.860 --> 39:15.660
我们这样子

39:15.660 --> 39:17.740
我们后边还可以写这么的表达式

39:17.740 --> 39:19.260
还可以写这么的表达式

39:19.260 --> 39:19.900
它会

39:19.900 --> 39:21.740
它会随机生成一个字无窜

39:21.740 --> 39:23.980
只要能够满足这么的表达式就行

39:24.060 --> 39:26.220
它会这样子返向生成一个随机的字无窜

39:26.220 --> 39:28.220
只要它满足这么的表达式就可以

39:28.220 --> 39:29.260
好那么这种表达式

39:29.260 --> 39:30.380
前面就是demo

39:30.380 --> 39:30.940
demo

39:31.580 --> 39:33.340
然后后边是一些数字

39:33.340 --> 39:33.980
数字的话

39:33.980 --> 39:34.860
我们用鞋杠帝

39:36.140 --> 39:37.180
两个数字

39:37.180 --> 39:37.980
然后一个下滑线

39:38.860 --> 39:39.580
下滑线的话

39:39.580 --> 39:40.460
后面是个鞋杠帝

39:41.740 --> 39:42.780
10个数字

39:42.780 --> 39:43.340
比方说

39:43.340 --> 39:44.460
我们这样子写

39:44.460 --> 39:44.940
保存

39:44.940 --> 39:46.620
就是这个功能还是蛮强大的

39:47.500 --> 39:47.820
你看

39:48.540 --> 39:49.420
是不是随机生成了

39:49.420 --> 39:50.300
对吧abp

39:50.300 --> 39:51.740
就跟真的是一样的

39:51.740 --> 39:53.500
看上去跟真的是很像的

39:54.540 --> 39:55.580
然后再来

39:55.580 --> 39:56.220
Burse

39:56.220 --> 39:59.180
Burse表示的是出生年

39:59.180 --> 39:59.580
对吧

39:59.580 --> 40:00.380
出生年份

40:00.380 --> 40:03.020
如果说你学过了

40:03.020 --> 40:03.980
就顺便复习一下

40:03.980 --> 40:05.100
如果说你没有学过

40:05.100 --> 40:05.980
你就看一下

40:05.980 --> 40:06.940
看个热闹

40:06.940 --> 40:07.980
反正就是模拟数据

40:07.980 --> 40:08.460
对不对

40:09.180 --> 40:09.900
Burse呢

40:09.900 --> 40:10.940
我们这里可以这样子写

40:13.020 --> 40:15.020
它的属性名叫做Burse

40:15.020 --> 40:23.100
那么这个属性的取之范围是1980年到2000年

40:24.060 --> 40:25.900
后面写上一个数字

40:25.900 --> 40:27.180
随便写下数字就行

40:27.180 --> 40:28.380
那么它就知道了

40:28.380 --> 40:30.140
我要生成的是一个数字

40:30.140 --> 40:30.860
而不是字不串

40:30.860 --> 40:31.820
而不是数组

40:31.820 --> 40:33.100
生成的是一个数字

40:33.100 --> 40:36.540
这个数字的范围是1980到2000

40:37.900 --> 40:38.460
对吧

40:38.460 --> 40:38.780
好

40:38.780 --> 40:39.340
保存

40:39.340 --> 40:39.820
你看一下

40:42.860 --> 40:43.340
Burse

40:43.340 --> 40:43.580
你看

40:43.580 --> 40:44.300
是不是随机的

40:44.300 --> 40:44.780
对吧

40:44.780 --> 40:45.260
随机的

40:45.980 --> 40:47.260
就生成出来了

40:47.260 --> 40:48.700
再来随便写几个

40:50.220 --> 40:51.660
Ctimes

40:51.740 --> 40:55.900
Ctimes是那个时间戳

40:55.900 --> 40:58.860
创建的时间戳

40:58.860 --> 40:59.820
那个时间戳的话

40:59.820 --> 41:01.500
就用一个水积数字

41:01.500 --> 41:03.180
用一个水积数字

41:03.180 --> 41:04.700
Ctimes

41:04.700 --> 41:06.060
你跟刚才一样

41:06.060 --> 41:08.220
用个水积数字得了

41:08.220 --> 41:09.980
等于这个数字

41:09.980 --> 41:11.340
到多少呢

41:11.340 --> 41:12.780
到156嘛

41:12.780 --> 41:14.380
随便写个

41:14.380 --> 41:15.740
随机生成一个数字

41:15.740 --> 41:16.220
保存

41:17.740 --> 41:19.100
保存出来了

41:19.100 --> 41:19.660
Ctimes

41:19.660 --> 41:19.900
你看

41:19.900 --> 41:21.500
随机的一个数字

41:21.500 --> 41:21.900
好

41:21.900 --> 41:22.460
再来

41:22.460 --> 41:23.340
再来

41:23.340 --> 41:24.620
然后email

41:24.620 --> 41:25.740
email

41:25.740 --> 41:26.620
email的话

41:26.620 --> 41:27.740
我们可以用这么的表达式

41:27.740 --> 41:28.060
对吧

41:28.060 --> 41:31.100
生成一个就是随机的

41:31.100 --> 41:33.020
随机的就是邮箱

41:33.020 --> 41:35.180
email

41:35.180 --> 41:35.420
哎

41:35.420 --> 41:36.380
我记得

41:36.380 --> 41:37.980
好像它里面有一个站位服

41:37.980 --> 41:39.020
我看一下

41:39.020 --> 41:42.140
看一下一个站位服管不管用

41:42.140 --> 41:43.260
这个站位服我记得

41:44.300 --> 41:44.700
不对

41:44.700 --> 41:45.900
不是这个站位服

41:45.900 --> 41:46.620
email了

41:46.620 --> 41:47.020
试一下

41:56.560 --> 41:57.200
email

41:57.200 --> 41:57.760
看

41:57.760 --> 41:59.760
那个邮箱它也可以给你随机生成

41:59.760 --> 42:00.080
看到没有

42:00.080 --> 42:01.760
邮箱也可以随机生成

42:01.760 --> 42:02.160
好

42:02.160 --> 42:03.200
站位服

42:03.200 --> 42:04.000
好再来

42:04.000 --> 42:04.880
看一下还有什么呢

42:06.800 --> 42:07.600
id

42:07.600 --> 42:08.880
id可以自征

42:08.880 --> 42:09.680
它可以自征

42:09.680 --> 42:11.520
比方说你这里写上一个e

42:11.520 --> 42:12.560
从e开始自征

42:13.680 --> 42:14.880
当然也可以用随机自不错

42:16.000 --> 42:17.200
你这里写个加1

42:17.200 --> 42:19.040
表示每一生成一次

42:19.040 --> 42:20.480
它id自征

42:20.480 --> 42:20.880
保存

42:22.720 --> 42:24.480
我们这里先不要生成100吧

42:24.480 --> 42:25.360
生成10个嘛

42:25.360 --> 42:26.720
比方的话太多了

42:27.760 --> 42:30.030
你看一下

42:30.030 --> 42:31.870
下面你看id是不是自征了

42:31.870 --> 42:32.270
对吧

42:32.270 --> 42:33.390
id自征

42:33.390 --> 42:34.990
然后再来

42:34.990 --> 42:36.430
看一下还有什么属性

42:36.430 --> 42:37.630
email已经说了

42:37.630 --> 42:38.270
fone

42:38.270 --> 42:39.070
电话号码

42:39.070 --> 42:41.230
电话号码我们可以用正的表达式

42:41.230 --> 42:42.670
正的表达式

42:42.670 --> 42:44.750
一定是以e开头的对吧

42:44.750 --> 42:45.310
e开头的

42:45.310 --> 42:47.710
后边就写10个数字嘛

42:47.710 --> 42:48.430
简单一点

42:49.630 --> 42:50.590
保存

42:50.590 --> 42:52.590
你看电话号码是不是生成出来了

42:52.590 --> 42:52.990
对吧

42:53.630 --> 42:53.950
好

42:53.950 --> 42:54.510
然后再来

42:55.230 --> 42:56.270
s number

42:56.270 --> 42:58.110
这是学生的学号

42:58.110 --> 42:58.670
six

42:59.390 --> 43:01.390
然后u10

43:01.390 --> 43:02.510
up to 10

43:02.510 --> 43:04.430
这个东西就跟差不多了

43:04.430 --> 43:05.390
s number

43:05.390 --> 43:06.110
这个number呢

43:06.110 --> 43:08.430
我们也可以生成一个嘛

43:08.430 --> 43:09.230
随机生成一个

43:11.150 --> 43:12.830
随机生成一个

43:12.830 --> 43:13.790
我们这样吧

43:15.470 --> 43:16.030
s number

43:16.590 --> 43:18.270
生成一个随机自不错

43:18.270 --> 43:19.950
我们这里还是用一个正的表达式

43:20.510 --> 43:21.630
还是用正的表达式

43:22.510 --> 43:24.910
这里就是1到9

43:25.710 --> 43:26.270
1到9

43:27.070 --> 43:28.590
然后呢

43:28.590 --> 43:29.070
这里是

43:30.110 --> 43:30.830
后边

43:30.830 --> 43:32.670
后边是一个写钢D

43:32.670 --> 43:33.470
4个

43:33.470 --> 43:35.550
前面是一个非0的数字

43:35.550 --> 43:36.750
后边是一个写钢D

43:36.750 --> 43:37.150
4个

43:37.150 --> 43:38.670
或者就直接写钢D

43:38.670 --> 43:39.150
5个吧

43:39.790 --> 43:40.510
直接写钢D

43:40.510 --> 43:41.470
5个就完成了

43:41.470 --> 43:42.110
简单一点

43:42.990 --> 43:43.870
这是s number

43:43.870 --> 43:45.390
你看s number就出来了

43:46.430 --> 43:47.070
然后呢

43:47.070 --> 43:47.710
6

43:47.710 --> 43:48.190
6呢

43:48.190 --> 43:49.390
它只能三个东取一个

43:49.390 --> 43:50.990
只能是三个东取一个

43:51.550 --> 43:52.190
6

43:52.190 --> 43:53.150
它要么是-1

43:53.150 --> 43:53.710
要么是-0

43:53.710 --> 43:54.990
要么是-0

43:54.990 --> 43:55.710
要么是-1

43:55.710 --> 43:56.030
对不对

43:56.190 --> 43:56.750
要么是-0

43:56.750 --> 43:57.230
要么是-1

43:57.230 --> 43:58.670
只能这两个东的一个

43:58.670 --> 43:58.910
好

43:58.910 --> 44:00.030
你这里可以用正的表达式

44:00.030 --> 44:00.350
对吧

44:00.350 --> 44:01.230
可以用正的表达式

44:02.110 --> 44:03.470
就是怎么写呢

44:03.470 --> 44:03.790
0

44:04.430 --> 44:05.230
或者是1

44:05.230 --> 44:05.550
对不对

44:06.110 --> 44:06.670
要么就是-0

44:06.670 --> 44:07.230
要么就是-1

44:08.510 --> 44:09.230
你看一下

44:09.230 --> 44:09.790
要么就是-0

44:09.790 --> 44:10.350
要么就是-1

44:10.350 --> 44:11.310
但是这样子生成出来呢

44:11.310 --> 44:12.190
它是一个自不错

44:12.190 --> 44:13.310
它不是一个数字

44:13.310 --> 44:14.590
那你要生成数字的怎么办呢

44:14.590 --> 44:15.470
你写个数组

44:15.470 --> 44:15.950
0 1

44:16.670 --> 44:17.630
那么它会在数组里

44:18.270 --> 44:18.590
不对

44:19.710 --> 44:21.950
这里是要在数组中选一个

44:22.510 --> 44:23.790
是要在数组中选一个

44:23.790 --> 44:24.430
要这样子写

44:26.590 --> 44:26.910
对

44:26.910 --> 44:27.470
要这样子写

44:28.350 --> 44:30.430
就是在后边的数组中选一个

44:30.830 --> 44:31.310
选一个

44:32.430 --> 44:32.750
好

44:32.750 --> 44:33.150
然后呢

44:33.150 --> 44:33.630
就是-6

44:34.910 --> 44:35.470
还有什么呢

44:35.470 --> 44:35.950
U10

44:35.950 --> 44:37.790
U10跟C10是不是一样的

44:37.790 --> 44:38.110
对吧

44:38.110 --> 44:38.990
C10是一样的

44:39.630 --> 44:40.670
U10

44:41.790 --> 44:43.550
跟C10是一样的

44:43.550 --> 44:44.430
咱们随便写一个吧

44:45.470 --> 44:45.870
C10

44:53.060 --> 44:53.940
这里写上一个

44:54.500 --> 44:55.620
都是魔力嘛

44:55.620 --> 44:57.460
你不用太过于去较则

44:57.460 --> 44:58.660
它的就是真实性

44:59.220 --> 44:59.860
差不多了

44:59.860 --> 45:01.540
就魔力出来的一些数据了

45:01.540 --> 45:02.100
然后呢

45:02.100 --> 45:03.780
我们把这个魔力的数据是不是放这

45:04.660 --> 45:05.220
是不是放这

45:05.700 --> 45:06.180
这边完了

45:06.740 --> 45:07.060
对吧

45:07.060 --> 45:07.540
就完了

45:08.820 --> 45:09.220
好

45:09.220 --> 45:09.780
保存

45:09.780 --> 45:10.340
你看一下

45:11.620 --> 45:12.340
那么现在呢

45:13.300 --> 45:14.180
我们在首页这里

45:14.740 --> 45:15.140
刷新

45:17.300 --> 45:17.540
好

45:17.540 --> 45:17.860
你看

45:18.820 --> 45:20.100
是不是拿到了数据了

45:20.100 --> 45:20.500
对吧

45:20.500 --> 45:21.700
数据是拿到这些数据了

45:22.420 --> 45:23.140
对不对

45:23.140 --> 45:23.460
你看

45:24.340 --> 45:25.140
那这些数据了

45:25.140 --> 45:26.740
当然这里只有十条数据

45:26.740 --> 45:28.340
那能不能多写一点呢

45:28.340 --> 45:28.740
可以的

45:28.740 --> 45:29.300
没问题的

45:30.260 --> 45:31.460
比方说我们这里

45:31.460 --> 45:33.060
生成100个数据吧

45:33.060 --> 45:34.100
100条数据

45:34.100 --> 45:34.340
好

45:34.340 --> 45:34.660
保存

45:35.780 --> 45:36.100
刷新

45:37.140 --> 45:38.020
你看一下

45:38.020 --> 45:38.820
这边

45:38.820 --> 45:39.460
拿到了数据

45:40.020 --> 45:41.220
是不是所有的数据都拿到了

45:41.780 --> 45:42.100
对吧

45:42.820 --> 45:43.940
这就是魔力数据

45:43.940 --> 45:44.660
魔力数据

45:44.660 --> 45:45.940
大家可以用类似的方式

45:46.580 --> 45:48.580
可以配合这个默克监视的魔力数据

45:49.700 --> 45:50.100
好了

45:50.100 --> 45:51.380
这就是这几颗咱们要讲的

45:52.100 --> 45:52.980
讲了一个代理

45:52.980 --> 45:54.580
讲了一个魔力数据

45:54.580 --> 45:57.540
两者的应用场景是不一样的

45:57.540 --> 45:58.100
代理呢

45:58.100 --> 45:58.580
就是说

45:58.580 --> 45:59.860
你服务器已经有了

45:59.940 --> 46:01.460
已经有数据了

46:01.460 --> 46:01.860
但是呢

46:01.860 --> 46:02.980
你有跨域的问题

46:02.980 --> 46:04.820
所以说可以用代理来解约

46:04.820 --> 46:06.260
如果说你服务器都还没有

46:06.260 --> 46:07.700
服务器的东西都还没开发出来

46:07.700 --> 46:08.340
那么这个时候

46:08.340 --> 46:09.540
你可以用数据模拟

46:09.540 --> 46:11.700
它不会影响你前端的开发

46:11.700 --> 46:12.420
不至于说

46:12.420 --> 46:14.100
你要等到服务器开发完成之后

46:14.100 --> 46:14.900
你才能开发

46:14.900 --> 46:15.940
因为你有数据模拟

46:15.940 --> 46:18.340
所以说你可以很方便的直接进行开发

46:19.140 --> 46:20.660
这里的老师讲这么两个内容

