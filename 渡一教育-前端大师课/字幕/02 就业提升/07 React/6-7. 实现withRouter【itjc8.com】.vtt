WEBVTT

00:00.880 --> 00:02.880
这个玩意就很简单了

00:02.880 --> 00:04.880
WizRotor 这是一个高阶组件

00:04.880 --> 00:07.880
HUC 它是个高阶组件

00:07.880 --> 00:11.510
它是用来干嘛的呢

00:11.510 --> 00:18.510
它是用于将上下文中的数据

00:18.510 --> 00:21.510
将路由上下文中的数据

00:23.510 --> 00:27.510
作为属性注入到组件中

00:27.510 --> 00:28.510
就做这么一个用处

00:28.510 --> 00:29.510
说这个函数据

00:29.510 --> 00:31.510
这个东西高阶组件就很简单很简单的

00:31.510 --> 00:33.510
咱们首先还是老规矩

00:33.510 --> 00:38.510
看一下它原本的实现方式

00:38.510 --> 00:39.510
其实你用那个调识工具

00:39.510 --> 00:41.510
基本上就可以看得出来了

00:41.510 --> 00:42.510
它原本的实现方式

00:42.510 --> 00:45.510
随便举个例子

00:47.510 --> 00:48.510
比方说吧

00:48.510 --> 00:50.510
咱们配级1里面要用到一个组件

00:50.510 --> 00:52.510
要用到一个组件叫做Comp1

00:52.510 --> 00:54.510
把WizRotor 先打入进来

00:54.510 --> 00:58.510
配级1里面要用到一个组件叫做Comp

00:58.510 --> 01:00.510
这么一个组件

01:00.510 --> 01:03.510
这个组件我们在配级1里面要用一下

01:03.510 --> 01:05.510
配级1

01:05.510 --> 01:07.510
然后Comp组件

01:09.510 --> 01:12.510
但是这个组件里面可能会用到

01:12.510 --> 01:15.510
比方说这里面有一些按钮

01:15.510 --> 01:17.510
点击过后要挑转页面

01:17.510 --> 01:18.510
对不对

01:18.510 --> 01:19.510
有一些按钮

01:19.510 --> 01:21.510
比方说

01:21.510 --> 01:24.510
挑转到配级2

01:24.510 --> 01:25.510
有些按钮

01:25.510 --> 01:27.510
点击过后要挑转到配级2

01:27.510 --> 01:29.510
咱们给它写一个

01:30.510 --> 01:33.510
挑转

01:33.510 --> 01:35.510
挑转到配级2

01:35.510 --> 01:37.510
然后这里是不是要用到History

01:37.510 --> 01:38.510
对吧

01:38.510 --> 01:40.510
那么我们希望它在属性里面

01:40.510 --> 01:42.510
给我传递一个History

01:42.510 --> 01:44.510
给我传递一个History

01:44.510 --> 01:45.510
那么属性里面

01:45.510 --> 01:47.510
我们就可以找到History

01:47.510 --> 01:49.510
点Push到配级2

01:49.510 --> 01:50.510
就这么简单

01:50.510 --> 01:52.510
那么关键是现在

01:52.510 --> 01:54.510
Comp组件是直接放到配级1的

01:54.510 --> 01:55.510
它不是在路由

01:55.510 --> 01:56.510
通过路由匹配的

01:56.510 --> 01:58.510
因此它里面是没有

01:58.510 --> 02:00.510
上下文的数据的

02:00.510 --> 02:01.510
那么这个时候怎么办

02:01.510 --> 02:02.510
以前我们说过

02:02.510 --> 02:03.510
这个问题都说过

02:03.510 --> 02:04.510
那么这里

02:04.510 --> 02:05.510
我们是不是可以

02:05.510 --> 02:07.510
用个高阶组件 with rotor

02:07.510 --> 02:08.510
然后封装一下

02:08.510 --> 02:09.510
对吧 返回一个新的组件

02:09.510 --> 02:11.510
比方说该取个名字

02:11.510 --> 02:13.510
这个地方该取个什么名字呢

02:15.510 --> 02:18.510
Comp with rotor

02:18.510 --> 02:20.510
该取这么一个名字

02:20.510 --> 02:21.510
with rotor

02:21.510 --> 02:23.510
包装一下

02:23.510 --> 02:24.510
把Comp组件包装一下

02:24.510 --> 02:25.510
返回一个新的组件

02:25.510 --> 02:26.510
那么我们用的时候

02:26.510 --> 02:27.510
就用这个新的组件

02:27.510 --> 02:29.510
通过这个高阶函数

02:29.510 --> 02:30.510
高阶组件

02:30.510 --> 02:32.510
它就可以把上下文的属性

02:32.510 --> 02:33.510
什么history

02:33.510 --> 02:34.510
location

02:34.510 --> 02:35.510
march

02:35.510 --> 02:36.510
注入进去

02:36.510 --> 02:37.510
现在这个东西很简单

02:37.510 --> 02:39.510
大家我相信很多同学

02:39.510 --> 02:40.510
我不讲

02:40.510 --> 02:42.510
自己熟悉都可以熟悉的出来

02:42.510 --> 02:44.510
那么现在我们主要是分析一下

02:44.510 --> 02:45.510
它这样子出来之后

02:45.510 --> 02:47.510
当然现在肯定是可以跳转

02:47.510 --> 02:49.510
它这样子

02:49.510 --> 02:50.510
就是写出来之后

02:50.510 --> 02:52.510
它的组件结构

02:52.510 --> 02:54.510
看一下它的组件结构

02:54.510 --> 02:55.510
这个Row扯里边

02:55.510 --> 02:56.510
你看一下配级1

02:56.510 --> 02:57.510
配级1里边

02:57.510 --> 02:59.510
本来是直接使用了scomp

02:59.510 --> 03:00.510
对吧

03:00.510 --> 03:01.510
本来是直接使用了scomp

03:01.510 --> 03:03.510
那么你现在看到的是什么呢

03:03.510 --> 03:04.510
看到的是

03:04.510 --> 03:05.510
给你外面掏了一个组件

03:05.510 --> 03:06.510
对吧

03:06.510 --> 03:07.510
with rotor

03:07.510 --> 03:08.510
那你看with rotor里边

03:08.510 --> 03:09.510
是不是用到上下文

03:09.510 --> 03:10.510
它是个消费者

03:10.510 --> 03:13.510
拿到这个上下文里边的数据

03:13.510 --> 03:14.510
把这个上下文里边的数据

03:14.510 --> 03:15.510
当然了

03:15.510 --> 03:16.510
这个上下文拿的是谁呢

03:16.510 --> 03:17.510
拿的是这个provider

03:17.510 --> 03:18.510
对吧

03:18.510 --> 03:20.510
就是从里程往上找

03:20.510 --> 03:21.510
找到最近的那个上下文

03:21.510 --> 03:22.510
对吧

03:22.510 --> 03:23.510
它拿到的是这个provider

03:23.510 --> 03:24.510
也就是说

03:24.510 --> 03:25.510
这就是解释

03:25.510 --> 03:27.510
为什么之前我要去改动这个march

03:27.510 --> 03:28.510
因为它后边的上下文里面

03:28.510 --> 03:29.510
可能要用到

03:29.510 --> 03:31.510
当前匹配的数据

03:31.510 --> 03:32.510
好

03:32.510 --> 03:33.510
于是那这里with rotor

03:33.510 --> 03:34.510
你看一下

03:34.510 --> 03:35.510
是不是提供了一个上下文

03:35.510 --> 03:36.510
对吧

03:36.510 --> 03:37.510
rotor.consumer

03:37.510 --> 03:38.510
对不对

03:38.510 --> 03:39.510
提供了这么一个上下文

03:39.510 --> 03:40.510
然后呢

03:40.510 --> 03:41.510
这里呢

03:41.510 --> 03:42.510
里边还有套了一个comp

03:42.510 --> 03:43.510
那么comp你看一下

03:43.510 --> 03:45.510
它是把属性给它注入进去了

03:45.510 --> 03:46.510
对吧

03:46.510 --> 03:47.510
它把属性给它注入进去了

03:47.510 --> 03:48.510
就这么简单

03:48.510 --> 03:49.510
特别简单

03:49.510 --> 03:50.510
那如果说你

03:50.510 --> 03:52.510
它本身有些属性的一个组件

03:52.510 --> 03:54.510
比方说它有个属性叫text

03:54.510 --> 03:55.510
它有

03:55.510 --> 03:56.510
如果它本身有个属性的

03:56.510 --> 03:58.510
那如果这里我给它传一个text

03:58.510 --> 03:59.510
abc

03:59.510 --> 04:00.510
保存

04:00.510 --> 04:01.510
你看一下

04:01.510 --> 04:02.510
abc是也能显示

04:02.510 --> 04:03.510
那么现在这种情况

04:03.510 --> 04:05.510
那么属性它就一次传递过去

04:05.510 --> 04:07.510
我们把属性传递到这个组件

04:07.510 --> 04:08.510
这个组件是啥

04:08.510 --> 04:09.510
这个组件就是这个

04:12.510 --> 04:13.510
就这个

04:13.510 --> 04:14.510
with rotor

04:14.510 --> 04:15.510
包装之后的组件

04:15.510 --> 04:17.510
我们这个变量得到的组件

04:17.510 --> 04:18.510
就是这个

04:18.510 --> 04:19.510
with rotor

04:19.510 --> 04:20.510
包装之后的组件

04:20.510 --> 04:21.510
你看是不是把属性给它了

04:21.510 --> 04:22.510
那么它呢

04:22.510 --> 04:23.510
它又会把属性

04:24.510 --> 04:25.510
就这么简单

04:25.510 --> 04:26.510
就这么简单

04:26.510 --> 04:27.510
好没了

04:27.510 --> 04:28.510
没了

04:28.510 --> 04:29.510
那么接下来

04:29.510 --> 04:30.510
我们来看一下

04:30.510 --> 04:31.510
如果自己写的话怎么写

04:31.510 --> 04:32.510
这个东西

04:32.510 --> 04:33.510
这个高隶组件

04:33.510 --> 04:35.510
肯定也是 with rotor 里面了

04:35.510 --> 04:36.510
什么情况下

04:36.510 --> 04:37.510
我们要写到这个库里面

04:37.510 --> 04:38.510
什么情况下

04:38.510 --> 04:39.510
我们要写到这个库里面了

04:39.510 --> 04:40.510
凡是跟

04:40.510 --> 04:41.510
就是

04:41.510 --> 04:42.510
页面相关的

04:42.510 --> 04:44.510
我们把它写到这里面

04:44.510 --> 04:45.510
写到这里面

04:45.510 --> 04:47.510
凡是跟页面无关的

04:47.510 --> 04:48.510
把它写到这里面

04:48.510 --> 04:49.510
你看我在这里面

04:49.510 --> 04:51.510
有没有任何一个地方去关心到页面

04:51.510 --> 04:53.510
没有任何一个地方关心到页面

04:53.510 --> 04:55.510
你仔细回忆一下吧

04:55.510 --> 04:56.510
没有任何一个地方关心到页面

04:56.510 --> 04:58.510
都是使用 react 的核心功能

04:58.510 --> 05:00.510
包括这个 with rotor

05:00.510 --> 05:01.510
它也是

05:01.510 --> 05:02.510
它提供一个高隶组件

05:02.510 --> 05:03.510
管它是不是页面

05:03.510 --> 05:04.510
还是手机端

05:04.510 --> 05:05.510
都无所谓

05:05.510 --> 05:06.510
都是一样的功能

05:06.510 --> 05:07.510
with rotor

05:07.510 --> 05:08.510
好那么这里呢

05:08.510 --> 05:09.510
就直接导出一个

05:09.510 --> 05:10.510
函数就完成了

05:10.510 --> 05:12.510
导出一个函数

05:12.510 --> 05:14.510
叫做 with rotor

05:14.510 --> 05:15.510
这么一个函数

05:15.510 --> 05:17.510
你给我一个组件

05:17.510 --> 05:19.510
我给你返回一个新的组件

05:19.510 --> 05:20.510
好那么

05:21.510 --> 05:22.510
放行

05:23.510 --> 05:26.890
然后我们还是用同样的方式

05:26.890 --> 05:28.890
在 index 里边把它导出

05:29.890 --> 05:30.890
就是 with rotor

05:33.970 --> 05:35.970
with rotor

05:35.970 --> 05:36.970
把它导出

05:36.970 --> 05:37.970
然后在 react storm 里边

05:37.970 --> 05:39.970
再把它重新导出

05:39.970 --> 05:40.970
重新导出

05:40.970 --> 05:41.970
with rotor

05:42.970 --> 05:43.970
好了

05:43.970 --> 05:44.970
那么现在呢

05:44.970 --> 05:45.970
我们就集中注意力写

05:45.970 --> 05:46.970
这个 with rotor 这个组件

05:47.970 --> 05:48.970
那么这个组件呢

05:48.970 --> 05:49.970
我们在这里

05:49.970 --> 05:50.970
一会为了测试

05:50.970 --> 05:51.970
我们在这里呢

05:51.970 --> 05:52.970
还是用我们自己的裤

05:54.970 --> 05:55.970
好然后呢

05:55.970 --> 05:56.970
就在这里边

05:56.970 --> 05:57.970
怎么写呢

05:57.970 --> 05:58.970
怎么写

05:58.970 --> 06:00.970
是不是就直接返回一个

06:00.970 --> 06:01.970
组件就完成了

06:01.970 --> 06:02.970
函数组件也行

06:02.970 --> 06:03.970
内组件也行

06:03.970 --> 06:04.970
无所谓

06:04.970 --> 06:06.970
比方说就函数组件吧

06:06.970 --> 06:07.970
就函数组件

06:07.970 --> 06:08.970
返回一个函数组件

06:08.970 --> 06:09.970
函数组件呢

06:09.970 --> 06:10.970
就

06:10.970 --> 06:11.970
给它取个名字

06:11.970 --> 06:12.970
叫 rotor

06:12.970 --> 06:13.970
wiper

06:14.970 --> 06:16.970
写这么一个函数组件

06:16.970 --> 06:17.970
写这么一个函数组件

06:17.970 --> 06:18.970
然后呢

06:18.970 --> 06:19.970
它有属性

06:19.970 --> 06:20.970
对吧

06:20.970 --> 06:21.970
它又给我一些属性

06:21.970 --> 06:22.970
那么这个函数组件干嘛呢

06:23.970 --> 06:24.970
是不是套

06:24.970 --> 06:26.970
套一个上下文的

06:26.970 --> 06:27.970
现在

06:27.970 --> 06:28.970
现在还不着急

06:28.970 --> 06:29.970
还不着急

06:29.970 --> 06:30.970
我现在还没有

06:30.970 --> 06:31.970
还没有写完

06:31.970 --> 06:32.970
它刚才我们分析出来了

06:32.970 --> 06:33.970
它是不是

06:33.970 --> 06:34.970
是一个上下文的消费者

06:34.970 --> 06:35.970
因为它最终呢

06:35.970 --> 06:36.970
是要渲染什么了

06:36.970 --> 06:37.970
最终是要渲染这个

06:37.970 --> 06:38.970
comp组件

06:38.970 --> 06:39.970
对吧

06:39.970 --> 06:40.970
它最终是要渲染这个东西

06:40.970 --> 06:42.970
那么渲染这个东西的时候呢

06:42.970 --> 06:44.970
除了要把自己的属性

06:44.970 --> 06:45.970
就是你给我我这个组件

06:45.970 --> 06:47.970
返回的是这个组件吧

06:47.970 --> 06:48.970
你可以我这个组件

06:48.970 --> 06:49.970
传递的属性呢

06:49.970 --> 06:50.970
我要原分不动的传给

06:50.970 --> 06:51.970
这个probs

06:51.970 --> 06:52.970
传给那个comp组件

06:53.970 --> 06:54.970
这是毫无疑问的

07:04.690 --> 07:06.690
我要原分不动的传给它

07:06.690 --> 07:07.690
除了这些之外呢

07:07.690 --> 07:09.690
是不是还要把什么

07:09.690 --> 07:10.690
history

07:10.690 --> 07:11.690
consumer

07:11.690 --> 07:12.690
location

07:12.690 --> 07:13.690
是不是也要传给它

07:13.690 --> 07:14.690
对吧

07:14.690 --> 07:15.690
就多了这么一个功能

07:15.690 --> 07:16.690
那这样子的话

07:16.690 --> 07:17.690
是不是得有一个

07:17.690 --> 07:18.690
消费者

07:18.690 --> 07:19.690
上下文消费者

07:19.690 --> 07:20.690
那导入上下文呗

07:21.690 --> 07:22.690
要写钢

07:23.690 --> 07:24.690
导入一个上下文

07:25.690 --> 07:26.690
那么这里面呢

07:26.690 --> 07:27.690
我们弯程的套一个

07:27.690 --> 07:28.690
上下文消费者

07:30.690 --> 07:31.690
consumer

07:31.690 --> 07:32.690
好

07:32.690 --> 07:33.690
那么这里是不是要传

07:33.690 --> 07:34.690
传什么

07:34.690 --> 07:35.690
传一个函数

07:35.690 --> 07:36.690
传一个函数

07:36.690 --> 07:37.690
返回的是什么

07:37.690 --> 07:38.690
返回的是这个组件

07:39.690 --> 07:40.690
那么我们除了

07:40.690 --> 07:41.690
把这个属性传给它之外

07:41.690 --> 07:42.690
还要把

07:42.690 --> 07:43.690
这个value

07:43.690 --> 07:44.690
是不是也要给它

07:45.690 --> 07:46.690
就上下文里面

07:46.690 --> 07:47.690
数据是不是也要给它

07:47.690 --> 07:48.690
就给它多传一些属性

07:48.690 --> 07:49.690
就完了

07:49.690 --> 07:50.690
没了

07:50.690 --> 07:51.690
没了

07:51.690 --> 07:52.690
保存你看一下

07:52.690 --> 07:53.690
就已经出来了

07:53.690 --> 07:54.690
你看跳转

07:54.690 --> 07:55.690
就做完了

07:55.690 --> 07:56.690
特别特别简单

07:56.690 --> 07:57.690
好

07:57.690 --> 07:58.690
咱们来看一下

07:58.690 --> 07:59.690
这个位置

07:59.690 --> 08:00.690
下面

08:00.690 --> 08:02.690
这个配级1

08:02.690 --> 08:03.690
那看配级1

08:03.690 --> 08:04.690
下面

08:04.690 --> 08:05.690
那么这个是个

08:05.690 --> 08:06.690
rotor wiper

08:06.690 --> 08:07.690
rotor wiper

08:07.690 --> 08:08.690
对不对

08:08.690 --> 08:09.690
说这个玩意

08:09.690 --> 08:10.690
好

08:10.690 --> 08:11.690
然后呢

08:11.690 --> 08:12.690
我们是不是在这里面

08:12.690 --> 08:13.690
一个上下文消费者

08:13.690 --> 08:14.690
然后拿到

08:14.690 --> 08:15.690
后面

08:15.690 --> 08:16.690
这个组件里面

08:16.690 --> 08:17.690
是不是传了

08:17.690 --> 08:18.690
History

08:18.690 --> 08:19.690
可以起码起去进去了

08:19.690 --> 08:20.690
就这么简单

08:20.690 --> 08:21.690
非常简单

08:21.690 --> 08:22.690
好

08:22.690 --> 08:23.690
那么现在呢

08:23.690 --> 08:25.690
组件的名字

08:25.690 --> 08:26.690
在这

08:26.690 --> 08:27.690
这个组件的名字

08:27.690 --> 08:28.690
叫rotor wiper

08:28.690 --> 08:29.690
然后我们看一下

08:29.690 --> 08:30.690
它的组件名字叫什么

08:30.690 --> 08:31.690
就这个名字

08:31.690 --> 08:32.690
我们改一下名字就完事了

08:32.690 --> 08:33.690
这个很简单

08:33.690 --> 08:34.690
改一下名字就完事了

08:34.690 --> 08:36.690
改一下这个组件名字

08:37.690 --> 08:38.690
好

08:38.690 --> 08:39.690
这里

08:39.690 --> 08:40.690
你看它的名字是咋

08:40.690 --> 08:41.690
它的名字呢是

08:41.690 --> 08:43.690
withrotor comp

08:43.690 --> 08:44.690
它为什么这个

08:44.690 --> 08:45.690
扩号里面是comp

08:45.690 --> 08:46.690
它为什么这个

08:46.690 --> 08:47.690
扩号里面是comp

08:47.690 --> 08:48.690
是这样子

08:48.690 --> 08:49.690
我们这里的

08:49.690 --> 08:51.690
传这个组件名字是comp

08:51.690 --> 08:53.690
组件名字是comp3

08:54.690 --> 08:55.690
然后组件名字是comp3

08:55.690 --> 08:56.690
那么这里

08:56.690 --> 08:57.690
你看一下它的传递的

08:58.690 --> 08:59.690
组件名字

09:00.690 --> 09:01.690
在哪呢

09:02.690 --> 09:04.690
在那个

09:05.690 --> 09:06.690
这里是不是comp3

09:06.690 --> 09:07.690
对不对

09:07.690 --> 09:08.690
所以说呢

09:08.690 --> 09:09.690
这一块呢

09:10.690 --> 09:11.690
无非就是

09:11.690 --> 09:12.690
无非就是

09:12.690 --> 09:14.690
你给它写一个名字

09:14.690 --> 09:15.690
重新写一个名字

09:15.690 --> 09:16.690
给这个组件

09:16.690 --> 09:17.690
好 那个组件

09:17.690 --> 09:19.690
怎么来重新命名名字呢

09:19.690 --> 09:20.690
我们可以这样子

09:21.690 --> 09:22.690
我们把这个函数呢

09:22.690 --> 09:23.690
放到这儿

09:23.690 --> 09:24.690
放到这儿

09:24.690 --> 09:25.690
一块我们肯定会返回

09:25.690 --> 09:27.690
一块我们肯定会返回这个函数

09:27.690 --> 09:28.690
rotor wiper

09:29.690 --> 09:31.690
rotor wiper

09:31.690 --> 09:32.690
有些人可能不太知道

09:32.690 --> 09:34.690
那么这里呢

09:34.690 --> 09:36.690
这个函数呢

09:36.690 --> 09:37.690
我们给它设置一个

09:37.690 --> 09:39.690
设置一个display

09:40.690 --> 09:41.690
name

09:41.690 --> 09:42.690
比方说给它设个abc

09:42.690 --> 09:43.690
你看一下吧

09:44.690 --> 09:45.690
好 保存

09:45.690 --> 09:46.690
好 那么接下来

09:46.690 --> 09:47.690
我们看一下

09:47.690 --> 09:51.060
配级1

09:51.060 --> 09:53.060
这里还没切换过来

09:54.060 --> 09:55.060
切个

09:57.060 --> 10:00.210
看一下

10:01.210 --> 10:02.210
配级1

10:02.210 --> 10:03.210
你看 这个组件名字

10:03.210 --> 10:04.210
是不是变成abc了

10:04.210 --> 10:05.210
对吧

10:05.210 --> 10:06.210
跟那个桑下文的名字

10:06.210 --> 10:07.210
取名字是不是一样的

10:07.210 --> 10:08.210
对吧

10:08.210 --> 10:09.210
你要改这个组件

10:09.210 --> 10:11.210
在调试工具的名字的话

10:11.210 --> 10:12.210
display什么意思

10:12.210 --> 10:13.210
表示显示的意思

10:13.210 --> 10:14.210
name就是名字

10:14.210 --> 10:15.210
显示的名字

10:15.210 --> 10:17.210
就是设置

10:17.210 --> 10:19.210
设置组件

10:19.210 --> 10:22.210
在调试工具中

10:22.210 --> 10:23.210
显示的名字

10:23.210 --> 10:24.210
显示的名字

10:24.210 --> 10:25.210
就是无论你是

10:25.210 --> 10:26.210
函数也好

10:26.210 --> 10:27.210
内组件也好

10:27.210 --> 10:28.210
内组件的话

10:28.210 --> 10:29.210
你就给它加一个

10:29.210 --> 10:30.210
静态属性

10:30.210 --> 10:31.210
函数属性的话

10:31.210 --> 10:32.210
你这样子给函数加

10:32.210 --> 10:33.210
这个属性

10:33.210 --> 10:34.210
是不是也是静态属性

10:34.210 --> 10:35.210
对吧

10:35.210 --> 10:36.210
也是静态属性

10:36.210 --> 10:37.210
这里最好大写

10:37.210 --> 10:38.210
组件的名字

10:38.210 --> 10:40.210
组件的名字最好大写

10:40.210 --> 10:41.210
R

10:42.210 --> 10:43.210
好 那么给它重新设置

10:43.210 --> 10:44.210
一个display name

10:44.210 --> 10:45.210
好 Display name

10:45.210 --> 10:46.210
等于什么呢

10:46.210 --> 10:47.210
等于Waze

10:47.210 --> 10:48.210
Rotor

10:48.210 --> 10:49.210
加个小括号

10:49.210 --> 10:51.210
小括号里边拼接啥

10:52.210 --> 10:53.210
是不是

10:53.210 --> 10:55.210
这个组件的名字

10:55.210 --> 10:56.210
对吧

10:56.210 --> 10:58.210
拼接这个组件的名字

10:58.210 --> 10:59.210
拼接什么

10:59.210 --> 11:02.210
这个comp 组件的display name

11:02.210 --> 11:03.210
拼接它的名字

11:03.210 --> 11:05.210
保存你看一下吧

11:05.210 --> 11:06.210
你看一下

11:08.210 --> 11:09.210
这里

11:11.210 --> 11:13.210
好 那么这里显示 onD犯

11:13.210 --> 11:14.210
为什么显示 onD犯呢

11:14.210 --> 11:15.210
因为这个组件

11:15.210 --> 11:17.210
我没有给它设置显示名字

11:17.210 --> 11:18.210
于是我这里可以

11:18.210 --> 11:19.210
做三目用算符

11:19.210 --> 11:20.210
如果它有值的话

11:20.210 --> 11:21.210
如果它有值的话

11:21.210 --> 11:22.210
它就显示它的名字

11:22.210 --> 11:23.210
如果它没有值

11:23.210 --> 11:24.210
也难得写三目用算符了

11:24.210 --> 11:25.210
就用或者吧

11:25.210 --> 11:26.210
如果它没有值

11:26.210 --> 11:27.210
没有值

11:27.210 --> 11:28.210
我该显示啥呢

11:28.210 --> 11:30.210
这个函数的名字

11:30.210 --> 11:31.210
雕列

11:31.210 --> 11:32.210
对吧

11:32.210 --> 11:33.210
comp雕列

11:33.210 --> 11:34.210
这样子就行了

11:34.210 --> 11:35.210
来看一下吧

11:36.210 --> 11:37.210
这里

11:37.210 --> 11:38.210
WazeRotor

11:38.210 --> 11:39.210
你看

11:39.210 --> 11:40.210
所以comp就出现了

11:40.210 --> 11:41.210
对吧

11:41.210 --> 11:43.210
把这个函数名字放进去

11:43.210 --> 11:44.210
跟那个完全一样了

11:44.210 --> 11:45.210
对不对

11:45.210 --> 11:46.210
非常非常简单

11:46.210 --> 11:48.210
它就从商项文里边

11:48.210 --> 11:49.210
拿东西出来

11:49.210 --> 11:50.210
拿东西出来

11:50.210 --> 11:51.210
然后

11:51.210 --> 11:52.210
往这个组件里边

11:52.210 --> 11:53.210
包装的组件里边

11:53.210 --> 11:54.210
给它传递完事

11:54.210 --> 11:55.210
这就是

11:55.210 --> 11:56.210
WazeRotor

11:56.210 --> 11:57.210
它的写法

11:57.210 --> 11:58.210
非常简单

