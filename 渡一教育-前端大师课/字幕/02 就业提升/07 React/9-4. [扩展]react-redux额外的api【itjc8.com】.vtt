WEBVTT

00:00.620 --> 00:04.020
咱们这一张的第一部分基本上就结束了

00:04.020 --> 00:08.020
第一张第一部分我们讲的是React和Redux的结合

00:08.020 --> 00:11.820
它使用的是一个第三方库叫做React Redux

00:11.820 --> 00:15.820
这么一个库 看这个名字你就知道它是在做结合的

00:15.820 --> 00:19.220
其实这个库里边东西并不多 很少很少

00:19.220 --> 00:23.220
还有一些东西 我们这一刻稍微把它过一下

00:23.220 --> 00:25.220
因为这些东西确实不太常用

00:25.220 --> 00:29.420
看一下吧 更多的API的话可以去参考这个地址

00:29.420 --> 00:32.020
把地址放到这儿了 你可以看一下

00:32.020 --> 00:34.420
打开看一下吧

00:34.420 --> 00:36.820
不过这个地方它的文档是英文的

00:36.820 --> 00:42.020
你可以看到右边这个木路放大一点

00:42.020 --> 00:44.020
右边这个木路里边你可以看到

00:44.020 --> 00:45.620
其实就这么四个东西

00:45.620 --> 00:46.820
一个是Provider对吧

00:46.820 --> 00:49.420
Provider我们已经学习过了 没啥东西

00:49.420 --> 00:52.020
Provider里边它告诉你只有两个属性

00:52.020 --> 00:54.620
一个是Store 是吧

00:54.620 --> 00:57.020
一个是Chill去 没了

00:57.020 --> 00:59.820
所以说这个Provider就没什么东西了

00:59.820 --> 01:01.620
然后Connect我们来看一下

01:01.620 --> 01:05.020
Connect是这个方法的

01:05.020 --> 01:08.220
我们之前讲过第一个参数MapsDispatchToProps

01:08.220 --> 01:11.420
对吧 还有第二个参数MapsDispatchToProps

01:11.420 --> 01:15.820
这是我们的 这两个参数是我们重点讲的

01:15.820 --> 01:18.420
其实这后边还有一些参数

01:18.420 --> 01:22.220
就是EmergyProps以及Options

01:22.220 --> 01:25.820
后边两个参数我们一般情况下都不那么常见

01:26.020 --> 01:27.220
不太会去使用

01:27.220 --> 01:28.820
那么这里可以看一下

01:28.820 --> 01:30.820
后边两个参数可以传可以不传

01:30.820 --> 01:33.420
其实这四个参数都可以传可以不传

01:33.420 --> 01:34.820
如果说你传的话

01:34.820 --> 01:36.220
那么它表示什么意思

01:36.220 --> 01:36.820
你看一下吧

01:36.820 --> 01:38.020
看一下下面的文档

01:38.020 --> 01:40.020
MergyProps

01:40.020 --> 01:42.020
这个Connect里边多两个参数

01:42.020 --> 01:46.820
外的一个是MergyProps

01:46.820 --> 01:48.020
那么这个东西是什么呢

01:48.020 --> 01:50.820
我们来看一下它下面的说明

01:50.820 --> 01:54.420
下面这个MergyProps

01:54.420 --> 01:56.420
那么这个东西它告诉你是一个函数

01:56.420 --> 01:58.820
就哪怕这个是个英文文档

01:58.820 --> 02:01.220
你也能多多少少能看懂一点

02:01.220 --> 02:01.820
对吧

02:01.820 --> 02:04.220
这是这么一个函数

02:04.220 --> 02:06.820
一个函数

02:06.820 --> 02:10.420
这个函数它告诉你有三个参数

02:10.420 --> 02:12.220
StateProps DispatchProps

02:12.220 --> 02:14.020
以及OwnProps

02:14.020 --> 02:15.220
那么这里有三个参数

02:15.220 --> 02:17.020
来 你拆

02:17.020 --> 02:18.420
这三个参数看这个名字

02:18.420 --> 02:20.220
你觉得它是个啥

02:20.220 --> 02:23.220
你觉得它是个啥

02:24.220 --> 02:27.220
这是它的三个参数

02:27.220 --> 02:29.620
参数一

02:29.620 --> 02:30.820
这参数二

02:30.820 --> 02:31.620
看这个名字吧

02:31.620 --> 02:32.820
你觉得它是个啥

02:32.820 --> 02:34.320
其实这些可能的重点呢

02:34.320 --> 02:36.320
还不是说这些额外的API

02:36.320 --> 02:37.420
这些额外的API

02:37.420 --> 02:39.620
反正我的概念中

02:39.620 --> 02:40.620
这些API

02:40.620 --> 02:41.820
你只要理解原理过后

02:41.820 --> 02:43.420
API不是很重要

02:43.420 --> 02:44.520
我们通过这些可能

02:44.520 --> 02:45.220
主要是告诉大家

02:45.220 --> 02:46.420
怎么去看这个文档

02:46.420 --> 02:47.720
哪怕它是英文的

02:47.720 --> 02:48.520
那么我们现在知道

02:48.520 --> 02:49.420
它是一个函数

02:49.420 --> 02:50.720
它里边有三个参数

02:50.720 --> 02:52.520
它的名字叫StateProps

02:52.520 --> 02:53.820
那这什么东西呢

02:53.820 --> 02:54.420
这什么玩意啊

02:54.420 --> 02:56.020
你告诉我

02:56.020 --> 02:57.720
那么这个玩意啊

02:57.720 --> 02:58.420
你拆啊

02:58.420 --> 03:00.020
第二是DispatchProps

03:00.020 --> 03:01.420
那么你拆一下这两个玩意

03:01.420 --> 03:04.120
是不是就跟前面两个属性是对应的

03:04.120 --> 03:04.420
对吧

03:04.420 --> 03:06.020
前面不是有两个属性吗

03:06.020 --> 03:07.620
这个地方它是返回一个对象

03:07.620 --> 03:07.920
对吧

03:07.920 --> 03:09.020
返回一个Props

03:09.020 --> 03:10.920
这个地方是不是又返回一个Props

03:10.920 --> 03:11.520
对吧

03:11.520 --> 03:14.020
也就是说第一个参数来自于哪呢

03:14.020 --> 03:15.520
该参数

03:15.520 --> 03:17.020
参数的值

03:17.020 --> 03:18.820
来自于

03:18.820 --> 03:25.120
就是MapStateProps

03:25.120 --> 03:26.520
返回的值

03:26.520 --> 03:27.520
对吧

03:27.520 --> 03:29.520
第一个参数MapStateProps

03:29.520 --> 03:30.420
就是返回一个对象

03:30.420 --> 03:33.120
对象里边有一些值

03:33.120 --> 03:34.020
那么第一个参数

03:34.020 --> 03:35.420
就是来自于这个值

03:35.420 --> 03:35.720
好

03:35.720 --> 03:37.220
第二个参数呢

03:37.220 --> 03:39.320
这个值来自于另外一个

03:39.320 --> 03:44.920
MapDispatchProps

03:44.920 --> 03:46.320
来自于这个返回的值

03:46.320 --> 03:47.920
就这么前面两个参数

03:47.920 --> 03:48.420
就是这个

03:48.420 --> 03:49.920
那第三个参数你猜

03:49.920 --> 03:51.320
是不是啊

03:51.320 --> 03:54.720
是不是这个高阶组建返回的那个玩意

03:54.720 --> 03:55.720
你看一下高阶组建

03:55.720 --> 03:57.920
它不会不是会返回吗

03:57.920 --> 03:59.620
我们看一下啊

03:59.620 --> 04:02.720
这里我们当时写的写到这的

04:02.720 --> 04:03.920
这个地方

04:03.920 --> 04:04.820
好高阶组建

04:04.820 --> 04:06.920
你看每个地方封装了高阶组建之后呢

04:06.920 --> 04:08.720
我们这里是不是可以给这个

04:08.720 --> 04:11.220
还是可以给这个组建传递属性

04:11.220 --> 04:13.020
说可以给他传递数据

04:13.020 --> 04:13.520
对吧

04:13.520 --> 04:14.220
那么这里呢

04:14.220 --> 04:15.620
第三个参数就是

04:15.620 --> 04:17.220
来自于

04:17.220 --> 04:19.320
来自于组建使用者

04:19.320 --> 04:21.320
就使用这个组建的人

04:21.320 --> 04:23.720
给传递的属性

04:23.720 --> 04:24.120
对吧

04:24.120 --> 04:26.720
他把这三个信息全部传给你

04:26.720 --> 04:27.220
然后呢

04:27.220 --> 04:28.020
这个函数呢

04:28.020 --> 04:29.620
他告诉你啊

04:29.620 --> 04:29.920
下面

04:32.320 --> 04:32.920
他说什么呢

04:32.920 --> 04:35.820
他说如果说你指定了这个参数的话

04:35.820 --> 04:36.220
那么

04:37.420 --> 04:38.520
他会传递

04:38.520 --> 04:40.220
Pars会传递对吧

04:40.220 --> 04:41.220
会传递一个结果

04:41.220 --> 04:41.920
什么结果呢

04:41.920 --> 04:44.820
就是MapDispatchProps这个函数返回的结果

04:44.820 --> 04:48.120
以及MapDispatchProps返回的结果

04:48.120 --> 04:48.520
还有呢

04:48.520 --> 04:53.320
就是来自于附主建给他传递的属性

04:53.320 --> 04:55.420
这三个东西一起传递给你

04:55.420 --> 04:55.620
好

04:55.620 --> 04:56.120
然后呢

04:56.120 --> 04:57.220
他告诉你

04:57.220 --> 05:00.520
你这个函数应该返回一个普通的平面对象

05:00.520 --> 05:02.120
PlaneObjects

05:02.120 --> 05:04.320
你返回的平面对象呢

05:04.320 --> 05:06.720
从这个函数中返回的平面对象

05:06.720 --> 05:08.520
那么他会作为一个属性

05:08.520 --> 05:10.420
传递给他包装的组建

05:10.420 --> 05:11.220
因为他到时候呢

05:11.220 --> 05:12.820
他会包装到

05:12.820 --> 05:14.320
不要在这里啊

05:14.320 --> 05:16.220
Connect是不是包装一个组建

05:16.220 --> 05:16.720
你看

05:16.720 --> 05:18.820
Connect是最终会包装一个组建

05:18.820 --> 05:21.320
那么这个组建他给他传什么属性呢

05:21.320 --> 05:22.920
如果说你不指定那个

05:22.920 --> 05:24.420
不指定第三个函数

05:24.420 --> 05:26.820
那么他就会把这个东西传过去

05:26.820 --> 05:28.120
这个东西返回的东西传过去

05:28.120 --> 05:29.020
作为属性传过去

05:29.020 --> 05:29.520
对吧

05:29.520 --> 05:33.120
再把副主建给他传递的属性传过去

05:33.120 --> 05:37.320
那如果说你想再进行再进行一下操作

05:37.320 --> 05:39.220
那么你可以对这个属性呢

05:39.220 --> 05:40.420
就是最终得到了属性呢

05:40.420 --> 05:41.820
再进一步进行更改

05:41.820 --> 05:43.820
那么你可以传递第三个函数

05:43.820 --> 05:44.920
Mergy Pros

05:44.920 --> 05:45.920
那么这个函数呢

05:45.920 --> 05:49.320
返回返回值一个对象

05:49.320 --> 05:50.320
一个对象

05:50.320 --> 05:51.120
返回了这个对象

05:51.120 --> 05:52.720
就是一个平面对象

05:52.720 --> 06:00.820
该对象的属性会被最终会被传递到

06:00.820 --> 06:05.520
就是传递到那个包装的

06:05.520 --> 06:08.420
包装的组建中

06:08.420 --> 06:10.120
就是如果说你指定了第三个函数

06:10.120 --> 06:11.120
我们就演示

06:11.220 --> 06:12.620
说一下主要是给大家看一下

06:12.620 --> 06:13.820
怎么来看这个文档

06:13.820 --> 06:15.820
那么这个对象的属性呢

06:15.820 --> 06:17.720
会被传递到包装的组建里边

06:17.720 --> 06:20.120
比如说你指定了这个属性

06:20.120 --> 06:21.620
它就不再会用

06:21.620 --> 06:24.220
不再会简单的把这两个返回值

06:24.220 --> 06:25.520
直接作为属性传过去了

06:25.520 --> 06:27.120
它会调用你这个函数

06:27.120 --> 06:29.320
然后把这个函数的返回结果

06:29.320 --> 06:31.520
一起作为属性传过去

06:31.520 --> 06:33.620
是这么个意思

06:33.620 --> 06:36.120
好 这是关于这一块

06:36.120 --> 06:38.620
然后他后面说他告诉你

06:38.620 --> 06:39.520
具体是怎么传递的

06:39.520 --> 06:40.420
怎么传递的呢

06:40.420 --> 06:42.620
他是用一个Objects而删

06:42.620 --> 06:44.020
就是避免有同名属性

06:44.020 --> 06:44.720
他怎么来

06:44.720 --> 06:46.120
就是怎么来混合的呢

06:46.120 --> 06:47.220
这个放前边

06:47.220 --> 06:48.420
这个是放后边

06:48.420 --> 06:49.620
这个放最后

06:49.620 --> 06:50.420
是这样来混合

06:50.420 --> 06:51.620
混合成一个新的对象

06:51.620 --> 06:53.220
然后把这个新的对象展开

06:53.220 --> 06:54.020
作为属性

06:54.020 --> 06:57.820
把它传递到这个组建里边去了

06:57.820 --> 06:59.520
传递到这个组建里边去了

06:59.520 --> 07:00.820
就这么个意思

07:00.820 --> 07:02.320
这是这个参数

07:02.320 --> 07:03.120
说一下就想了

07:03.120 --> 07:05.220
主要是告诉大家怎么来看这个文档

07:05.220 --> 07:05.720
Objects

07:05.720 --> 07:07.120
反正我们平时就不这么用的

07:07.120 --> 07:08.320
Objects

07:08.320 --> 07:09.120
第四个参数

07:09.220 --> 07:09.920
第四个参数呢

07:09.920 --> 07:11.420
他告诉你是一个配置

07:11.420 --> 07:12.420
是个配置

07:12.420 --> 07:14.820
他说如果你指定了

07:14.820 --> 07:15.920
他是个Objects

07:15.920 --> 07:17.520
是一个对象

07:17.520 --> 07:19.220
一个配置对象

07:19.220 --> 07:20.920
那么如果说你指定了

07:20.920 --> 07:24.220
那么更深入的

07:24.220 --> 07:25.920
自定义的行为

07:25.920 --> 07:27.020
这个Connector

07:27.020 --> 07:31.820
可以深入的去自定义一些行为

07:31.820 --> 07:33.220
那么这里边有哪些配置呢

07:33.220 --> 07:34.020
他第一个下面

07:34.020 --> 07:35.220
你看都可以感觉到

07:35.220 --> 07:36.920
他里边就说了这个对象的属性

07:36.920 --> 07:37.420
对吧

07:37.520 --> 07:39.320
对象的属性该怎么去配置

07:39.320 --> 07:40.620
第一个是Pure

07:40.620 --> 07:41.820
他是一个布尔类型

07:41.820 --> 07:44.120
那么如果说你配置的为True

07:44.120 --> 07:45.420
那么他这样子的

07:45.420 --> 07:47.020
他就会避免重现的

07:47.020 --> 07:51.220
就是说如果这三个东西

07:51.220 --> 07:54.120
最终得到的属性是一样的的话

07:54.120 --> 07:55.020
只是一样的话

07:55.020 --> 07:57.120
那么他会避免重现的

07:57.120 --> 07:58.820
就是他默认之就是一个True

07:58.820 --> 07:59.220
对吧

07:59.220 --> 08:00.920
我们之前写过这个圆码

08:00.920 --> 08:02.320
就是一个Pure Componentor

08:02.320 --> 08:04.420
或者是用韩式组建用Hook的时候

08:04.420 --> 08:05.520
他也会进行比较

08:05.520 --> 08:06.420
对不对

08:06.420 --> 08:07.820
那么就是这个配置

08:07.820 --> 08:08.620
稍微看一下就行了

08:08.620 --> 08:10.120
我们也不看完

08:10.120 --> 08:11.820
然后下面这个是什么

08:11.820 --> 08:14.020
他说RState Equal

08:14.020 --> 08:15.520
这是一个韩数

08:15.520 --> 08:16.320
通过这个韩数

08:16.320 --> 08:18.320
你可以指定他怎么去比较

08:18.320 --> 08:20.320
怎么来比较两个

08:20.320 --> 08:23.020
就是怎么来比较

08:24.620 --> 08:26.020
是吗

08:26.020 --> 08:27.920
他说如果说Pure等于True

08:27.920 --> 08:30.420
如果说这个配置为True的话

08:30.420 --> 08:31.720
那么这个配置的韩数

08:31.720 --> 08:32.620
他就会启动

08:32.620 --> 08:33.520
怎么启动呢

08:33.520 --> 08:35.020
他说这个韩数用来干嘛的

08:35.020 --> 08:39.020
这个韩数他用来比较

08:39.020 --> 08:42.820
新的就是仓库里边的状态

08:42.820 --> 08:45.820
和他之前的数据来进行比较

08:45.820 --> 08:47.120
默认比较的时候

08:47.120 --> 08:49.320
默认的比较方式就用

08:49.320 --> 08:50.720
严格相等

08:50.720 --> 08:53.620
默认比较就是用严格相等比较的

08:53.620 --> 08:54.920
那么这是状态的比较

08:54.920 --> 08:56.320
这是属性的比较

08:56.320 --> 08:57.220
对吧

08:57.220 --> 08:59.320
那么这些呢

08:59.320 --> 09:00.620
这些我们了解一下就行了

09:00.620 --> 09:02.720
就是可以进行深度的配置

09:02.720 --> 09:04.720
是Options

09:04.720 --> 09:06.120
然后我们往下

09:06.120 --> 09:07.320
这个Connect就没啥了

09:07.320 --> 09:08.620
Connect就没啥了

09:08.620 --> 09:09.320
好 下面这个

09:09.320 --> 09:11.320
Connect Advanced

09:11.320 --> 09:12.020
看一下吧

09:12.020 --> 09:13.920
我们看一下Connect Advanced

09:13.920 --> 09:15.920
下面这个

09:15.920 --> 09:19.720
这个韩数它只传递了两个参数

09:19.720 --> 09:20.620
一个是呢

09:20.620 --> 09:23.020
第一个参数叫做Negator Factory

09:23.020 --> 09:24.920
第二个参数是一个可选的

09:24.920 --> 09:27.020
在这里面加的中货号表示可选的

09:27.020 --> 09:28.720
可以传可以不传

09:28.720 --> 09:29.820
是一个配置

09:29.820 --> 09:30.720
这个配置

09:30.720 --> 09:32.220
好 咱们来看一下这个韩数

09:32.220 --> 09:33.920
这个韩数来做什么的

09:34.020 --> 09:34.720
它说呢

09:34.720 --> 09:35.520
这个韩数呢

09:35.520 --> 09:38.020
它是也跟那个Connect的一样

09:38.020 --> 09:38.720
Connect的一样

09:38.720 --> 09:41.920
也是用来包装一个组件的

09:41.920 --> 09:42.620
而且呢

09:42.620 --> 09:46.320
它是基于Connect的这个韩数的作用

09:46.320 --> 09:48.720
写出了这么一个韩数

09:48.720 --> 09:51.620
它说它基于这个Connect的韩数

09:51.620 --> 09:52.520
但是呢

09:52.520 --> 09:55.320
比Connect的它配置的要稍微少一点

09:55.320 --> 09:57.920
配置的稍微少一点

09:57.920 --> 10:00.920
它也是为了去包装

10:00.920 --> 10:02.920
也是为了去连接一个React组件

10:02.920 --> 10:05.520
到一个Redux仓库

10:05.520 --> 10:07.220
也是来做这么一个事情的

10:07.220 --> 10:09.520
好 那它具体怎么做呢

10:09.520 --> 10:10.820
好 咱们来看一下

10:10.820 --> 10:13.520
它说第一个是一个韩数

10:13.520 --> 10:14.820
就是该韩数

10:14.820 --> 10:15.620
该韩数呢

10:15.620 --> 10:19.920
就是用于和就是和Connect一样

10:19.920 --> 10:30.020
也是用于连接React组件和React仓库的

10:30.020 --> 10:38.220
只不过它的配置比Connect少一些

10:38.220 --> 10:40.020
它少一些不是说它用起来简单

10:40.020 --> 10:41.320
它用起来呢

10:41.320 --> 10:44.120
代码量还是差不多

10:44.120 --> 10:45.920
还是差不多

10:45.920 --> 10:47.120
那它怎么来用呢

10:47.120 --> 10:48.220
它怎么来用呢

10:48.220 --> 10:54.220
它该韩数需要传递两个参数

10:54.220 --> 10:55.220
第一个参数呢

10:55.220 --> 10:57.220
是名字叫做Selector

10:57.220 --> 10:58.420
Selector Factory

10:58.420 --> 11:01.720
第二参数是一个配置

11:01.720 --> 11:03.720
Connect options是一个配置

11:03.720 --> 11:05.620
我们终点说第一个参数

11:05.620 --> 11:07.120
其实也不算重点说了

11:07.120 --> 11:09.220
因为这个韩数本身用的比较少

11:09.220 --> 11:10.320
了解一下就讲了

11:10.320 --> 11:12.220
这个第一个参数它告诉你

11:12.220 --> 11:14.120
第一个参数它是一个韩数

11:14.120 --> 11:16.020
那么这个韩数有两个参数

11:16.020 --> 11:17.320
一个是Dispatch

11:17.320 --> 11:18.520
它会给你传过来

11:18.520 --> 11:21.120
一个是Factory options

11:21.120 --> 11:23.820
它会给你传这两个参数过来

11:23.820 --> 11:25.720
然后你返回的是什么呢

11:25.720 --> 11:28.120
返回的是一个韩数

11:28.120 --> 11:29.320
这是一个韩数

11:29.320 --> 11:30.920
这个韩数又有两个参数

11:30.920 --> 11:32.820
State和OM Props

11:32.820 --> 11:35.520
看起来也蛮绕的

11:35.520 --> 11:37.020
这里能不能记比

11:37.020 --> 11:39.620
第一个韩数它有两个参数

11:39.620 --> 11:41.520
参数1是什么呢

11:41.520 --> 11:42.420
是Dispatch

11:42.420 --> 11:43.620
Dispatch不用解释吧

11:43.620 --> 11:44.620
对 它给传过来了

11:44.620 --> 11:46.520
是用来触发Action的

11:46.520 --> 11:50.120
参数2是一个配置

11:50.120 --> 11:53.320
Factory是一个配置

11:53.320 --> 11:54.920
好 返回呢

11:54.920 --> 11:56.520
返回的是一个韩数

11:56.520 --> 11:57.820
你返回的是一个韩数

11:57.820 --> 12:00.220
返回的韩数又有两个参数

12:00.220 --> 12:03.120
第一个参数是State

12:03.120 --> 12:05.220
第二个参数

12:05.220 --> 12:05.620
什么意思

12:05.620 --> 12:07.420
我们先把这个格式写出来

12:07.420 --> 12:11.520
写出来过后再解释

12:11.520 --> 12:13.620
然后它什么意思呢

12:13.620 --> 12:15.020
它说

12:15.020 --> 12:17.620
而且这个韩数它也得有个返回值

12:17.620 --> 12:18.820
它也得有个返回值

12:18.820 --> 12:25.020
返回的是一个Props

12:25.020 --> 12:26.420
一个方形

12:26.520 --> 12:29.620
返回的是一个Props对象

12:29.620 --> 12:30.820
那么这里我们说一下

12:30.820 --> 12:31.620
整个这一块

12:31.620 --> 12:32.220
它什么意思

12:32.220 --> 12:34.620
返回的是一个Props对象

12:34.620 --> 12:37.520
返回的是一个对象

12:37.520 --> 12:46.120
该对象的属性最终会成为

12:46.120 --> 12:49.120
包装的组件的属性

12:49.120 --> 12:51.020
也就是说包装的组件

12:51.020 --> 12:52.420
我们这里最终要包装组件

12:52.420 --> 12:52.620
对吧

12:52.620 --> 12:54.220
我们一会来在这里写一个

12:54.220 --> 12:55.320
一会来在这里写一个

12:55.320 --> 12:56.520
在这里包装的组件

12:56.520 --> 12:57.720
要给它传什么属性

12:57.720 --> 13:01.720
现在全凭你返回的这个韩数来决定

13:01.720 --> 13:03.520
不再是以前通过配置的方式

13:03.520 --> 13:05.220
它帮你去给它加属性了

13:05.220 --> 13:07.120
现在就你要去自己给它加属性

13:07.120 --> 13:09.320
全凭你这个韩数来自行决定

13:09.320 --> 13:11.320
是这么个意思

13:11.320 --> 13:13.920
那么这里我们也不用去看它的注释

13:13.920 --> 13:15.320
我们直接下面直接看一个例子

13:15.320 --> 13:16.120
就完事了

13:16.120 --> 13:17.320
看一个例子

13:17.320 --> 13:18.520
你看吧

13:18.520 --> 13:22.320
它说这里我们用到了一个Connected Advanced

13:22.320 --> 13:23.220
里面传了一个什么

13:23.220 --> 13:26.120
传了一个Snegature Factory

13:26.120 --> 13:27.520
那么Factory里面后面

13:27.520 --> 13:29.420
最终包装了一个这个

13:29.420 --> 13:31.920
也就是说跟Connected唯一的区别在哪

13:31.920 --> 13:33.020
我们要学会看文档

13:33.020 --> 13:33.920
哪怕你不懂英文

13:33.920 --> 13:34.920
要学会看大一码

13:34.920 --> 13:37.620
至少跟那个Connected区别在哪

13:37.620 --> 13:39.120
是不是这里都是一样的

13:39.120 --> 13:39.420
对吧

13:39.420 --> 13:41.520
这里包装的组件都是一样的

13:41.520 --> 13:43.320
无非就是这里不同

13:43.320 --> 13:45.220
Connected这里是不是要给很多配置

13:45.220 --> 13:45.520
对吧

13:45.520 --> 13:47.020
很多的就是参数

13:47.020 --> 13:47.720
那么这里呢

13:47.720 --> 13:49.920
其实你忽略要第二个参数的话

13:49.920 --> 13:51.520
你只需要给一个就行了

13:51.620 --> 13:53.220
这个呢是一个函数

13:53.220 --> 13:54.420
这个函数干嘛的

13:54.420 --> 13:55.120
他给他了

13:55.120 --> 13:56.620
他会给他一个GISPARCH

13:56.620 --> 13:58.020
然后剩下的事情交给你了

13:58.020 --> 14:00.420
你最终一定要给我返回一个函数

14:00.420 --> 14:02.120
一定要给我返回一个函数

14:02.120 --> 14:03.620
那么这个函数的反

14:03.620 --> 14:05.920
这个函数的返回结果

14:05.920 --> 14:07.520
这个函数的返回结果

14:07.520 --> 14:10.420
那么它会作为属性给它传过去

14:10.420 --> 14:12.620
就这么简单

14:12.620 --> 14:14.020
就这么个意思

14:14.020 --> 14:15.420
那么这个函数里边

14:15.420 --> 14:17.920
也就是说我们比方说这里

14:17.920 --> 14:19.820
我们要把它改成

14:19.920 --> 14:20.820
改成什么了

14:20.820 --> 14:22.820
比方说我们这里

14:22.820 --> 14:23.520
Pager这里嘛

14:23.520 --> 14:25.320
我们就对Pager做一下改动吧

14:25.320 --> 14:29.360
我们这里再导入一个Connected

14:31.960 --> 14:33.160
我们导入原生的

14:33.160 --> 14:35.160
原生的

14:35.160 --> 14:36.560
因为我这个元代码里边没写

14:36.560 --> 14:38.060
对吧

14:38.060 --> 14:40.560
导入原生的

14:40.560 --> 14:41.660
好 这里

14:41.660 --> 14:44.460
Connected Advanced

14:44.460 --> 14:45.260
导入这个

14:45.260 --> 14:47.860
好 接下来我们再Pager那里处理一下

14:47.860 --> 14:48.660
Pager那里

14:48.660 --> 14:49.160
Pager那里呢

14:49.160 --> 14:50.060
我们之前是这样写的

14:50.060 --> 14:50.560
对吧

14:50.560 --> 14:52.960
那么现在我们使用Connected Advanced

14:52.960 --> 14:54.060
那么这里不要传啥

14:54.060 --> 14:56.560
是不是传一个

14:56.560 --> 14:58.960
一个叫Snegator Factory

14:58.960 --> 15:00.560
我们要传个这个东西进去

15:00.560 --> 15:01.760
要传这么一个函数

15:01.760 --> 15:04.260
叫做Snegator Factory

15:04.260 --> 15:04.960
Factory什么意思

15:04.960 --> 15:06.360
工厂

15:06.360 --> 15:09.760
它要返回一个工厂

15:09.760 --> 15:10.360
工厂是什么

15:10.360 --> 15:11.560
工厂就是一个函数

15:11.560 --> 15:13.560
工厂是来产生一些东西的

15:13.560 --> 15:14.960
返回的是一个函数

15:14.960 --> 15:16.760
它大概是这么一种格式

15:16.760 --> 15:19.360
我们把这个函数写进来

15:19.360 --> 15:21.360
好 那么根据刚才我们的也要求

15:21.360 --> 15:22.460
它这里边这个函数

15:22.460 --> 15:25.160
它会自动给你传了一个Dispatch进来

15:25.160 --> 15:26.960
会自动给你传一个Dispatch进来

15:26.960 --> 15:28.560
然后返回了这个函数里面

15:28.560 --> 15:32.960
它会给你传第一个State和OM Props

15:32.960 --> 15:35.960
就是它的状态和什么

15:35.960 --> 15:36.960
就是状态

15:36.960 --> 15:37.960
这是个状态

15:37.960 --> 15:41.560
这是一个就是

15:41.560 --> 15:43.460
就是副主见给它传递的属性

15:43.460 --> 15:43.860
对吧

15:43.860 --> 15:44.760
它会传递过来

15:44.760 --> 15:46.160
那么这个函数要返回什么呢

15:46.160 --> 15:47.460
要返回一个对象

15:47.460 --> 15:49.360
这个对象里面包含的东西

15:49.360 --> 15:51.960
就是我们要复制给这个Pager

15:51.960 --> 15:54.460
Pager这个主见的属性

15:54.460 --> 15:56.060
就这么简单

15:56.060 --> 15:56.960
好 那么这里呢

15:56.960 --> 15:58.460
我们看一下它怎么写的呢

15:58.460 --> 16:01.660
其实我都觉得不用去看它怎么写的了

16:01.660 --> 16:03.060
都不用去看的

16:03.060 --> 16:07.460
我们直接就可以

16:07.460 --> 16:09.460
直接就可以在这里去测试一下

16:09.460 --> 16:10.460
边测试

16:10.460 --> 16:11.760
一边写就完事了

16:11.760 --> 16:13.460
因为我们最终的目的很明确

16:13.460 --> 16:15.460
就是往这个Pager里边传东西

16:15.460 --> 16:16.660
Pager里边有哪些东西呢

16:16.660 --> 16:18.860
我们之前写过Pager

16:18.860 --> 16:20.060
看一下吧

16:20.060 --> 16:21.060
我们之前写过这个Pager

16:21.060 --> 16:22.160
不是要给它传四个东西吗

16:22.160 --> 16:23.560
对吧

16:23.560 --> 16:25.960
哪四个东西我们这里复制一下吧

16:25.960 --> 16:27.860
五个东西

16:27.860 --> 16:29.060
不知道传五个属性吗

16:29.060 --> 16:29.760
对不对

16:29.760 --> 16:30.860
那就给它传呗

16:30.860 --> 16:31.660
一个个来

16:31.660 --> 16:32.460
currents

16:32.460 --> 16:33.560
currents 1

16:33.560 --> 16:34.360
total 10

16:34.360 --> 16:35.460
先随便传一个吧

16:35.460 --> 16:36.360
先随便传一个

16:36.360 --> 16:38.760
以后这些数据肯定要改

16:38.760 --> 16:41.660
液农量10

16:41.660 --> 16:42.560
先随便传

16:42.560 --> 16:44.460
配级panel number 5

16:44.460 --> 16:45.760
那么unchanged

16:45.760 --> 16:47.260
当液农改变了事件

16:47.260 --> 16:48.460
它液农改变了事件

16:48.460 --> 16:50.760
它是一个函数

16:50.760 --> 16:54.530
它会给我传递一个新的液农过来

16:54.530 --> 16:57.130
它会给我传递一个新的液农过来

16:57.130 --> 16:59.530
大概就这么种情况

16:59.530 --> 17:01.130
这里少写的

17:04.130 --> 17:05.230
返回了

17:05.230 --> 17:06.730
对了

17:06.730 --> 17:07.530
没问题

17:07.530 --> 17:10.330
我这里是中文冒号是吧

17:10.330 --> 17:13.560
我说怎么回事

17:13.560 --> 17:17.820
这里改成中文冒号

17:17.820 --> 17:18.520
行了

17:18.520 --> 17:19.720
大概就这样子

17:19.720 --> 17:21.720
那么它会把你返回的这个东西

17:21.720 --> 17:22.820
它会调用这个函数

17:22.820 --> 17:24.920
把你返回的东西传递过去

17:24.920 --> 17:25.120
好

17:25.120 --> 17:26.320
那么我们怎么来返回呢

17:26.320 --> 17:28.320
我们首先看一下State是啥

17:28.320 --> 17:28.920
打印出来

17:28.920 --> 17:30.420
一打印出来就马上就明白了

17:30.420 --> 17:32.120
State是啥

17:32.120 --> 17:32.920
State是啥呢

17:32.920 --> 17:35.120
我们再把OM props打印出来

17:35.120 --> 17:37.520
我们无非就不知道这两个是什么玩意

17:37.520 --> 17:39.220
那这个东西我们是不是很清楚

17:39.220 --> 17:40.120
对不对

17:40.120 --> 17:42.320
Dispatch我们就知道就触发Action的

17:42.320 --> 17:42.520
对吧

17:42.520 --> 17:43.520
这有啥好说的

17:43.520 --> 17:45.020
保存

17:45.020 --> 17:46.220
咱们看一下

17:46.220 --> 17:50.440
这里也运行出来

17:50.440 --> 17:52.840
当然这个液码要出问题

17:52.840 --> 17:53.540
液码要出问题

17:53.540 --> 17:54.040
没关系

17:54.040 --> 17:54.740
我们来看一下

17:57.340 --> 17:57.640
好

17:57.640 --> 17:58.940
打印出来看一下

17:58.940 --> 18:00.340
打印出来是个啥玩意

18:00.340 --> 18:02.040
打印出来是个啥玩意

18:02.040 --> 18:02.640
这个啥玩意

18:02.640 --> 18:04.940
是不是就是整个仓库的状态

18:04.940 --> 18:05.240
对吧

18:05.240 --> 18:06.840
是不是整个仓库的状态

18:06.840 --> 18:07.440
对不对

18:07.440 --> 18:09.940
还就把整个仓库的状态给你

18:09.940 --> 18:11.740
就把整个仓库的状态给你

18:11.740 --> 18:11.940
好

18:11.940 --> 18:13.040
给你了过后呢

18:13.040 --> 18:14.540
然后再把这个OM props

18:14.540 --> 18:15.540
OM props是啥

18:15.540 --> 18:17.340
是在这里给它传递的东西

18:17.340 --> 18:18.440
是在这里给它传递的东西

18:18.440 --> 18:19.340
但是这里啥都没传

18:19.340 --> 18:21.440
比方说给它传了一个abc

18:21.440 --> 18:22.640
等于23

18:22.640 --> 18:23.940
比方说这样子

18:23.940 --> 18:24.940
你看一下

18:24.940 --> 18:26.240
就是这个给它

18:26.240 --> 18:29.440
副主剑给它传递的属性

18:29.440 --> 18:30.940
对不对

18:30.940 --> 18:32.140
就把这些东西拿给你

18:32.140 --> 18:32.740
拿给你呢

18:32.740 --> 18:34.140
你自己去搞定

18:34.140 --> 18:34.340
好

18:34.340 --> 18:35.940
那么这里样子是不是就很简单了

18:35.940 --> 18:36.440
对不对

18:36.440 --> 18:37.240
很简单了

18:37.240 --> 18:39.540
我们从这个stats里边是不是可以得到

18:39.540 --> 18:40.240
得到什么

18:40.240 --> 18:43.440
得到的它的就是一些信息

18:43.440 --> 18:44.040
比方说这里呢

18:44.040 --> 18:45.940
我们可以通过stats第二什么

18:45.940 --> 18:47.540
students

18:47.540 --> 18:48.440
当前的液码

18:48.440 --> 18:50.440
我们是不是从condition里边拿到

18:50.440 --> 18:51.240
配级

18:51.240 --> 18:51.740
对不对

18:51.740 --> 18:52.740
当前液码

18:52.740 --> 18:53.640
那么这个地方呢

18:53.640 --> 18:55.140
是拿到什么呢

18:55.140 --> 18:56.140
拿到种树

18:56.140 --> 18:56.640
对吧

18:56.640 --> 18:58.240
拿到种树就不在condition里边了

18:58.240 --> 18:59.740
在result里边

18:59.740 --> 19:00.340
啊

19:00.340 --> 19:01.240
拿到偷偷

19:01.240 --> 19:02.240
拿到种树

19:02.240 --> 19:02.440
好

19:02.440 --> 19:02.840
然后呢

19:02.840 --> 19:03.640
limit呢

19:03.640 --> 19:05.540
在condition里边的limit

19:05.540 --> 19:06.840
是condition里边的limit

19:08.740 --> 19:09.040
好

19:09.040 --> 19:09.740
panel number

19:09.740 --> 19:10.640
就固定吧

19:10.640 --> 19:10.840
啊

19:10.840 --> 19:13.440
当时液码改变之后

19:13.440 --> 19:15.240
当液码改变之后

19:15.240 --> 19:16.440
要干嘛呢

19:16.440 --> 19:17.940
是不是要触发新的action

19:18.040 --> 19:18.440
对吧

19:18.440 --> 19:19.340
dispatch

19:19.340 --> 19:20.240
新的action

19:20.240 --> 19:21.240
这个新的action是什么

19:21.240 --> 19:22.640
就是set condition

19:22.640 --> 19:22.940
啊

19:23.940 --> 19:24.440
哎呀

19:24.440 --> 19:25.340
我之前不写过

19:25.340 --> 19:26.940
好像写过了

19:26.940 --> 19:27.640
呃

19:27.640 --> 19:28.540
action

19:28.540 --> 19:30.540
触发新的action

19:30.540 --> 19:32.340
action叫做change condition

19:32.340 --> 19:32.840
啊

19:32.840 --> 19:33.940
change condition

19:33.940 --> 19:34.240
啊

19:34.240 --> 19:35.440
通过这个action创建

19:35.440 --> 19:37.140
好像说来得到一个新的action

19:37.140 --> 19:37.740
它要传什么呢

19:37.740 --> 19:38.640
传一个新的

19:38.640 --> 19:40.040
新的就是条件

19:40.040 --> 19:40.440
条件呢

19:40.440 --> 19:41.740
就要把配级改变一下

19:41.740 --> 19:42.540
改一下就行了啊

19:42.540 --> 19:43.540
其他都不变

19:43.540 --> 19:44.440
就把配级改变一下

19:44.440 --> 19:45.240
就完事了

19:45.240 --> 19:45.440
好

19:45.440 --> 19:46.640
触发这个新的

19:46.640 --> 19:47.440
新的action

19:47.440 --> 19:48.740
来去改变

19:48.740 --> 19:49.740
查评条件

19:49.740 --> 19:50.140
然后呢

19:50.140 --> 19:51.140
是不是重新查询

19:51.140 --> 19:51.340
对吧

19:51.340 --> 19:52.240
又触发什么

19:52.240 --> 19:53.140
fetch student

19:53.140 --> 19:54.040
这个action

19:54.040 --> 19:54.840
啊

19:54.840 --> 19:56.140
触发就完事了

19:56.140 --> 19:56.340
对吧

19:56.340 --> 19:56.940
就完了

19:56.940 --> 19:57.640
就完了

19:57.640 --> 19:58.240
保存

19:58.240 --> 19:58.740
看一下吧

19:59.940 --> 20:00.140
对吧

20:00.140 --> 20:01.140
所以就完了

20:01.140 --> 20:01.340
啊

20:01.340 --> 20:02.140
这里

20:02.140 --> 20:02.340
对吧

20:02.340 --> 20:02.940
vm

20:02.940 --> 20:03.140
对吧

20:03.140 --> 20:04.540
又啥区域

20:04.540 --> 20:06.040
就是就是这个

20:06.040 --> 20:06.440
呃

20:06.440 --> 20:07.640
connect advanced

20:07.640 --> 20:08.640
这个函数

20:08.640 --> 20:09.840
那其实你对照一下代码

20:09.840 --> 20:10.540
其实都不用去

20:10.540 --> 20:12.340
过多的去约图这些东西的啊

20:12.340 --> 20:12.740
也对

20:12.740 --> 20:13.340
读一下代码

20:13.340 --> 20:14.440
也就差不多了啊

20:14.440 --> 20:15.040
就差不多了

20:16.040 --> 20:16.940
好

20:16.940 --> 20:17.540
然后呢

20:17.540 --> 20:19.540
最后一个create provider

20:19.540 --> 20:19.840
啊

20:19.840 --> 20:20.840
create provider

20:20.840 --> 20:22.240
这个是用来干嘛的呢

20:22.240 --> 20:23.440
它是用来了

20:23.440 --> 20:25.540
创建一个provider的

20:25.540 --> 20:26.140
嗯

20:26.140 --> 20:27.840
我们之前的provider说

20:27.840 --> 20:29.240
直接在这里面导入的

20:29.240 --> 20:30.140
那么这里呢

20:30.140 --> 20:32.440
其实也可以通过指定的一个key

20:32.440 --> 20:32.640
啊

20:32.640 --> 20:33.940
一个字符串

20:33.940 --> 20:34.940
通过一个参数啊

20:34.940 --> 20:36.940
通过create provider

20:36.940 --> 20:37.440
记一下吧

20:39.940 --> 20:40.240
嗯

20:40.240 --> 20:41.840
他是他的格式这样子

20:41.840 --> 20:43.340
create provider

20:43.340 --> 20:43.540
啊

20:43.540 --> 20:44.240
那么这里呢

20:44.240 --> 20:45.840
要传一个字符串啊

20:46.440 --> 20:46.840
key

20:48.040 --> 20:48.840
他什么意思呢

20:48.840 --> 20:51.340
通过一个唯一的key值

20:52.340 --> 20:53.040
key值

20:53.640 --> 20:56.140
创建一个provider

20:56.140 --> 20:57.240
主键啊

20:57.840 --> 20:58.240
嗯

20:58.240 --> 20:59.540
那么这个东西有什么意义呢

20:59.540 --> 21:00.840
其实没有啥意义

21:00.840 --> 21:01.640
那这个东西

21:01.640 --> 21:03.240
为什么要加个key值呢

21:03.240 --> 21:04.740
他他这里是这样说的

21:05.240 --> 21:05.740
嗯

21:07.340 --> 21:07.840
嗯

21:07.840 --> 21:08.440
他说

21:08.940 --> 21:10.340
你可能呢

21:10.940 --> 21:13.840
只有在这种情况下需要这个东西

21:14.040 --> 21:15.040
什么情况下呢

21:15.040 --> 21:15.640
他说

21:15.940 --> 21:16.540
嗯

21:16.540 --> 21:18.140
你可能在不同

21:18.840 --> 21:21.240
你可能在你的系统中不同的位置呢

21:21.240 --> 21:22.340
有多个

21:22.640 --> 21:24.040
倉庫数据倉庫

21:24.140 --> 21:25.440
但是这种情况呢

21:25.440 --> 21:27.340
我都不建议大家就会这样做啊

21:27.340 --> 21:30.440
数据倉庫保持只有一个是最好的啊

21:30.440 --> 21:32.140
尽量不要有多个数据倉庫

21:32.140 --> 21:34.340
那么如果说你要这种多个数据倉庫的话

21:34.340 --> 21:35.640
你要做区分的话

21:35.640 --> 21:37.440
那么可以使用啊

21:37.440 --> 21:38.740
可以使用那个就是

21:39.140 --> 21:39.840
嗯

21:39.840 --> 21:42.940
那个这里加上这么一个key值啊 key值

21:43.940 --> 21:44.840
那么他说

21:44.840 --> 21:46.840
加了key值之后创建的provider

21:46.840 --> 21:48.640
啊就比方说你这里啊

21:48.640 --> 21:51.040
将来我们也有多个数据倉庫对吧

21:51.040 --> 21:51.640
啊这里呢

21:51.640 --> 21:52.840
我们可以用一个啊

21:53.140 --> 21:53.740
比方说吧

21:53.740 --> 21:54.640
举个例子啊

21:55.240 --> 21:56.540
这些东西我们都用不到的

21:56.540 --> 21:57.540
只是说一下

21:57.540 --> 21:58.440
给大家说一下啊

21:58.440 --> 22:00.040
就是他提供了这么一些功能

22:00.040 --> 22:00.940
有这么个印象

22:00.940 --> 22:01.940
万一呢

22:02.140 --> 22:02.940
啊万一以后呢

22:02.940 --> 22:04.640
你们要遇到这些玩意呢

22:04.640 --> 22:05.140
啊

22:05.540 --> 22:07.540
crease provider啊

22:07.540 --> 22:08.940
比方说p1啊

22:08.940 --> 22:09.740
是用这么一个字不错

22:09.740 --> 22:11.740
做一个key值创建一个provider

22:11.740 --> 22:13.040
啊这里把给他提供一个

22:13.040 --> 22:15.040
用这个provider呢提供一个仓库

22:15.140 --> 22:15.840
然后呢

22:15.940 --> 22:16.740
用第二个数

22:17.240 --> 22:18.240
提供一个仓库啊

22:18.240 --> 22:20.940
就我们这整个系统里边提供两个仓库

22:20.940 --> 22:22.840
这种情况我们不太不太会遇到啊

22:23.340 --> 22:25.340
那如果说提供两个参数的时候

22:25.440 --> 22:27.340
到时候我们怎么连接的时候

22:27.340 --> 22:28.340
连接到哪个数据倉库

22:28.340 --> 22:29.340
是不是要区分一下

22:29.540 --> 22:30.740
他说怎么区分呢

22:30.740 --> 22:34.040
他说你就可以在connex的时候啊

22:34.040 --> 22:35.840
你往这个option是connex里

22:35.840 --> 22:37.240
你不是一个option吗

22:37.240 --> 22:37.740
对不对

22:37.740 --> 22:39.540
配置对象往这个配置对象里边

22:39.540 --> 22:40.840
传一个stone key

22:41.440 --> 22:42.940
就可以区分你连接到了

22:42.940 --> 22:44.840
连接到了是哪一个数据倉库

22:45.040 --> 22:46.540
他是还做这么一件事情的

22:47.140 --> 22:48.240
就不同的数据倉库

22:48.240 --> 22:49.440
有不同的上下文吗

22:49.440 --> 22:50.040
对不对

22:50.540 --> 22:52.640
那么他是从不同的上下文里边区区

22:52.840 --> 22:53.940
就这么个意思

22:54.640 --> 22:58.840
对应的我们看一下之前的那个connex里边的argument

22:59.540 --> 23:01.040
你看一下provideroption

23:01.040 --> 23:02.740
option是里边一个stone key

23:02.740 --> 23:03.240
对吧

23:03.440 --> 23:04.240
有这个东西

23:04.640 --> 23:06.540
就可以指定数据倉库的key值

23:06.540 --> 23:07.840
当然我们平时都用不到

23:08.940 --> 23:10.240
好就没了就没了

23:10.340 --> 23:11.740
就算大概了解一下啊

23:11.740 --> 23:12.640
有这么一些东西

23:12.640 --> 23:15.140
有这么一个稍微的有这么一个印象

23:16.140 --> 23:16.740
那么以后呢

23:16.740 --> 23:17.740
遇到一些特殊的情况

23:17.740 --> 23:19.140
你至少知道啊

23:19.140 --> 23:22.740
可能可以通过这些额外的API来解决一些问题

23:22.740 --> 23:23.140
平时呢

23:23.140 --> 23:24.940
我们特别是我们在学校里面

23:24.940 --> 23:25.740
肯定是用不到

23:25.940 --> 23:28.040
而且在公司里面有99%都用不到

23:28.640 --> 23:29.940
用用这个库的话

23:29.940 --> 23:31.740
我们最多的就是用那个provider

23:31.740 --> 23:33.040
和connex就完事了

23:33.840 --> 23:34.540
好没了啊

23:34.640 --> 23:36.340
那么这个库非常非常简单的一个库

23:36.340 --> 23:37.140
就学习完了

23:37.640 --> 23:38.140
好吧

23:38.440 --> 23:39.640
那么这一张呢

23:39.640 --> 23:40.640
还有一个东西

23:40.740 --> 23:41.640
就是

23:42.240 --> 23:43.340
我们的redux

23:43.540 --> 23:45.440
跟我们的rex结合起来了

23:45.740 --> 23:46.840
但是那我们的redux呢

23:46.840 --> 23:48.940
还没有跟rotor结合

23:49.040 --> 23:50.440
那rotor还需要结合吗

23:50.440 --> 23:51.840
还需要结合啊

23:51.840 --> 23:52.440
下期课呢

23:52.440 --> 23:52.940
开始呢

23:52.940 --> 23:56.340
我们要讲rex跟rotor又怎么来结合

