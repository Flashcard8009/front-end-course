WEBVTT

00:00.750 --> 00:03.750
好 咱们接到上级会来讲

00:03.750 --> 00:06.750
上级会我们说到的就是Redux这个东西

00:06.750 --> 00:09.750
它有三个部分组成

00:09.750 --> 00:12.750
主要是Action,Store和Reducer

00:12.750 --> 00:14.750
分别用来干嘛呢?Action是一个对象

00:14.750 --> 00:17.750
它用来描述

00:17.750 --> 00:20.750
用对象来描述我要干嘛

00:20.750 --> 00:21.750
我要做什么事

00:21.750 --> 00:23.750
如果在MVC结构里边

00:23.750 --> 00:25.750
它相当于是什么呢?相当于就是个请求地址

00:25.750 --> 00:27.750
请求玩法 请求地址

00:28.750 --> 00:31.750
请求的附带数据相当于是整体

00:31.750 --> 00:35.750
因为你请求地址 请求方法就表示我要干嘛

00:35.750 --> 00:38.750
这里用Action来表示

00:38.750 --> 00:42.750
Action还会到时候分发到仓库里边

00:42.750 --> 00:44.750
仓库用来干嘛的呢?用来保存数据的

00:44.750 --> 00:48.750
我们不是要保存数据吗?保存一些共享数据

00:48.750 --> 00:51.750
共享数据它就保存在仓库里边

00:51.750 --> 00:53.750
但是你不能直接操作仓库

00:53.750 --> 00:56.750
你要用Action来描述我要干嘛

00:56.750 --> 00:58.750
这样去改变仓库里边的数据

00:58.750 --> 01:00.750
仓库拿到Action之后

01:00.750 --> 01:02.750
它会把Action传递给Reducer

01:02.750 --> 01:05.750
Reducer用来干嘛呢?它是用来处理数据的

01:05.750 --> 01:08.750
它就相当于是MVC里边的C

01:08.750 --> 01:11.750
就是Controller 你可以这样去理解

01:11.750 --> 01:14.750
Reducer处理完数据过后会得到一个新的数据

01:14.750 --> 01:16.750
它根据Action来处理数据

01:16.750 --> 01:17.750
得到一个新的数据

01:17.750 --> 01:20.750
新的数据它会自动保存在仓库里边

01:20.750 --> 01:22.750
整个过程就大概是这样子

01:22.750 --> 01:25.750
虽然我们现在就算讲了这些东西

01:25.750 --> 01:26.750
还是很模糊

01:26.750 --> 01:28.750
还是搞不清楚它到底是怎么操作的

01:28.750 --> 01:29.750
那么这节课

01:29.750 --> 01:32.750
咱们就来写这么一个Reducer代码

01:32.750 --> 01:34.750
把整个流程走一遍

01:34.750 --> 01:35.750
大致的走一遍

01:35.750 --> 01:36.750
但是这里边有很多细节

01:36.750 --> 01:38.750
我这一课还不会涉及

01:38.750 --> 01:40.750
咱们后边的课程会一个一个单独来讲

01:40.750 --> 01:43.750
那么这里边的细节我再说

01:43.750 --> 01:45.750
但是这节课我们先把整体走一遍

01:45.750 --> 01:46.750
好吧

01:46.750 --> 01:48.750
那么到我们的代码里边来

01:48.750 --> 01:50.750
这个代码里边是这样子

01:50.750 --> 01:54.750
我之前想的是在这里新建一个文念甲

01:54.750 --> 01:57.750
因为它本身的Reducer跟Reducer没有什么关系

01:57.750 --> 01:59.750
一点关系都没有

01:59.750 --> 02:01.750
所以我当时想新建个文念甲来做

02:01.750 --> 02:02.750
想新建个文念甲

02:02.750 --> 02:05.750
然后去引用一个在页面上

02:05.750 --> 02:06.750
引用一个解释

02:06.750 --> 02:09.750
就是用非常非常传统的那种方式来做

02:09.750 --> 02:12.750
但是我后来想了一下也不太好

02:12.750 --> 02:14.750
因为以后在公司里面

02:14.750 --> 02:17.750
大部分使用都是在教授家里面操作的

02:17.750 --> 02:19.750
包括更多的时候

02:19.750 --> 02:21.750
是根Reducer结合来操作

02:21.750 --> 02:23.750
根Reducer工程来结合操作的

02:23.750 --> 02:25.750
绝大部分时候的处理场景

02:25.750 --> 02:27.750
如果说我单独建个文念甲来做的话

02:27.750 --> 02:30.750
那可能脱离了你们以后的应用场景

02:30.750 --> 02:32.750
包括这里边怎么去分文念甲

02:32.750 --> 02:33.750
分文件的

02:33.750 --> 02:34.750
我都不好说

02:34.750 --> 02:35.750
都不好解释

02:35.750 --> 02:37.750
所以说我这里还是在这个工程里面做

02:37.750 --> 02:39.750
只不过在这个工程里面做的时候

02:39.750 --> 02:41.750
大家心里边要清楚

02:41.750 --> 02:44.750
尽管我们是在Reducer这个工程里面做

02:44.750 --> 02:45.750
但是呢

02:45.750 --> 02:47.750
因为Ducer实际上跟Reducer是没有任何关系

02:47.750 --> 02:49.750
包括我们讲的过程中

02:49.750 --> 02:52.750
也会发现我根本就没有使用任何的Reducer代码

02:52.750 --> 02:54.750
Reducer代码完全没动

02:54.750 --> 02:57.750
我们就直接使用Reducer

02:57.750 --> 02:59.750
那么这里我们在SRC里面

02:59.750 --> 03:01.750
我们建立一个新建文件甲

03:01.750 --> 03:03.750
叫做Reducer

03:03.750 --> 03:05.750
这个文件甲里面就放

03:05.750 --> 03:06.750
跟Reducer相关的代码

03:06.750 --> 03:08.750
全部放这里边

03:08.750 --> 03:10.750
这里边我们先建个文件

03:10.750 --> 03:11.750
叫Index的介绍

03:11.750 --> 03:12.750
我们在这个文件里面写代码

03:12.750 --> 03:15.750
把整个流程给它走通一次

03:15.750 --> 03:16.750
那么这里

03:16.750 --> 03:18.750
然后在整个工程SRC的跟目录

03:18.750 --> 03:20.750
这个Index里面

03:20.750 --> 03:22.750
我们只需导入这个Index的文件

03:22.750 --> 03:25.750
导入这个Reducer

03:25.750 --> 03:27.750
Index的这个文件

03:27.750 --> 03:28.750
也没有导出任何东西

03:28.750 --> 03:30.750
只是把它运行一边就完事了

03:30.750 --> 03:31.750
其他地方我们都不敢

03:31.750 --> 03:33.750
就跟App这里找都没有

03:33.750 --> 03:35.750
跟Reducer X没有任何关系

03:35.750 --> 03:37.750
我们只是让运行的代码来测试一下

03:37.750 --> 03:39.750
像我们这一张截

03:39.750 --> 03:41.750
大部分时候都在做这样的事情

03:41.750 --> 03:42.750
就是测试数据

03:42.750 --> 03:45.750
跟那个界面没有任何关系

03:45.750 --> 03:47.750
我们把这个数据学习完了过后

03:47.750 --> 03:48.750
再去一下

03:48.750 --> 03:49.750
再来解释

03:49.750 --> 03:52.750
再来讲如何跟Reducer来结合使用

03:52.750 --> 03:54.750
这里我们运行出来

03:54.750 --> 03:56.750
Reducer

03:56.750 --> 03:57.750
进入过后

03:57.750 --> 04:00.750
我们首先来安装Reducer

04:00.750 --> 04:02.750
首先来安装Reducer

04:02.750 --> 04:04.750
ADD Reducer

04:04.750 --> 04:08.060
安装一下

04:08.060 --> 04:13.300
安装

04:13.300 --> 04:14.300
安装

04:14.300 --> 04:17.300
然后我们到这边来

04:17.300 --> 04:19.300
这边那就是我们Reducer代码

04:19.300 --> 04:20.300
在这里

04:20.300 --> 04:22.300
看一下安装完成了没有

04:22.300 --> 04:24.300
稍微等一下

04:27.380 --> 04:29.380
安装完成了

04:29.380 --> 04:30.380
安装完成了之后

04:30.380 --> 04:32.380
我们在这个index的介石里面

04:32.380 --> 04:34.380
就直接去使用Reducer代码

04:34.380 --> 04:36.380
咱们怎么做呢

04:36.380 --> 04:38.380
首先我们导入

04:38.380 --> 04:40.380
导入Reducer

04:42.380 --> 04:43.380
这个Reducer里面

04:43.380 --> 04:45.380
它可以提供了很多的东西

04:45.380 --> 04:47.380
我们一个个来

04:47.380 --> 04:50.380
首先我们先暂时不导入任何东西

04:50.380 --> 04:52.380
我们一个一个来不着急

04:53.380 --> 04:55.380
我们目前还用不到Reducer的

04:55.380 --> 04:57.380
这个库里面任何东西

04:57.380 --> 04:59.380
我们来看一下这里边哪些地方

04:59.380 --> 05:01.380
需要我们自己手动写

05:01.380 --> 05:03.380
首先这里最核心的是啥呢

05:03.380 --> 05:05.380
最核心的是这个

05:05.380 --> 05:06.380
Reducer

05:06.380 --> 05:08.380
Reducer用来干嘛的呢

05:08.380 --> 05:09.380
也不说它是最核心嘛

05:09.380 --> 05:10.380
都很重要对不对

05:10.380 --> 05:11.380
都很重要

05:11.380 --> 05:12.380
我们一个个来嘛

05:12.380 --> 05:13.380
我们一般情况下呢

05:13.380 --> 05:15.380
我们会先写这个Reducer

05:15.380 --> 05:16.380
Reducer

05:16.380 --> 05:17.380
这个Reducer是干嘛的呢

05:17.380 --> 05:19.380
它就相当于是MVC里面的

05:19.380 --> 05:20.380
控制器

05:20.380 --> 05:22.380
它来产生数据的

05:22.380 --> 05:24.380
它是用来产生数据的Reducer

05:24.380 --> 05:26.380
它也用来控制数据

05:26.380 --> 05:28.380
改变数据都是它来完成

05:28.380 --> 05:31.380
就是具体对数据的改变

05:31.380 --> 05:34.380
全靠Reducer来完成

05:34.380 --> 05:36.380
全靠它来完成

05:38.380 --> 05:39.380
咱们呢

05:39.380 --> 05:40.380
就来写这么个Reducer

05:40.380 --> 05:42.380
Reducer怎么写呢

05:42.380 --> 05:44.380
Reducer实际上是一个函数

05:44.380 --> 05:46.380
方形

05:46.380 --> 05:48.380
函数的名字呢

05:48.380 --> 05:49.380
你可以随便去

05:49.380 --> 05:51.380
我们通常的名字就给它取名为Reducer

05:51.380 --> 05:53.380
一个处理函数

05:53.380 --> 05:55.380
所以Reducer的本质其实非常简单

05:55.380 --> 05:57.380
它就是一个函数

05:59.380 --> 06:01.380
Reducer

06:01.380 --> 06:02.380
本质上

06:02.380 --> 06:04.380
就是一个函数

06:04.380 --> 06:06.380
一个普通的函数

06:06.380 --> 06:07.380
那么这个函数呢

06:07.380 --> 06:09.380
它有两个函数

06:09.380 --> 06:10.380
哪两个函数呢

06:10.380 --> 06:11.380
第一个函数

06:11.380 --> 06:13.380
是State

06:13.380 --> 06:15.380
第二个函数叫Action

06:15.380 --> 06:16.380
什么意思呢

06:16.380 --> 06:17.380
这个函数

06:17.380 --> 06:18.380
解释一下

06:18.380 --> 06:19.380
第一个函数

06:19.380 --> 06:20.380
State

06:20.380 --> 06:21.380
表示什么意思呢

06:21.380 --> 06:23.380
它表示的是

06:23.380 --> 06:28.380
之前仓库中的状态

06:28.380 --> 06:29.380
状态

06:29.380 --> 06:30.380
状态是什么

06:30.380 --> 06:31.380
就是数据

06:31.380 --> 06:33.380
因为仓库是用来存数据的

06:33.380 --> 06:34.380
数据存在哪儿的

06:34.380 --> 06:36.380
数据是不是存在这儿的

06:36.380 --> 06:37.380
仓库里边的

06:37.380 --> 06:39.380
那么这个Reducer是谁调用的

06:39.380 --> 06:40.380
是不是仓库调用的

06:40.380 --> 06:41.380
对吧

06:41.380 --> 06:42.380
我们之前看了个图

06:42.380 --> 06:44.380
是不是仓库在传递Action来调用Reducer

06:44.380 --> 06:45.380
对吧

06:45.380 --> 06:46.380
Reducer是个函数

06:46.380 --> 06:49.380
是仓库在调用Reducer这个函数

06:49.380 --> 06:50.380
那么调用的时候

06:50.380 --> 06:52.380
它就会把之前的数据

06:52.380 --> 06:54.380
作为参数传递给这个Reducer

06:54.380 --> 06:55.380
传递Action

06:55.380 --> 06:57.380
那么还要传递一个什么呢

06:57.380 --> 06:58.380
还要传递

06:58.380 --> 07:00.380
还要传递一个就是State

07:00.380 --> 07:02.380
就是State就是状态

07:02.380 --> 07:03.380
状态数据

07:03.380 --> 07:04.380
共享的状态

07:04.380 --> 07:06.380
共享的数据都在仓库里边

07:06.380 --> 07:07.380
那么仓库它会把这个数据

07:07.380 --> 07:09.380
和你要做的事情

07:09.380 --> 07:11.380
Action传递给这个Reducer

07:11.380 --> 07:12.380
所以它有两个参数

07:12.380 --> 07:14.380
一个是之前的状态

07:14.380 --> 07:16.380
一个是当前你要干嘛

07:16.380 --> 07:17.380
你把这个Action传给我

07:17.380 --> 07:19.380
我们之前讲过Action是个啥

07:19.380 --> 07:21.380
Action是不是就是一个普通对象

07:21.380 --> 07:22.380
对不对

07:22.380 --> 07:30.380
Action表示描述要做什么的对象

07:30.380 --> 07:31.380
好

07:31.380 --> 07:32.380
那么这里呢

07:32.380 --> 07:33.380
我们就把一个Reducer

07:33.380 --> 07:34.380
函数的结构写出来了

07:34.380 --> 07:35.380
好

07:35.380 --> 07:36.380
那么这个函数里边要干嘛呢

07:36.380 --> 07:37.380
这个函数呢

07:37.380 --> 07:40.380
它里边必须要返回一个新的状态

07:40.380 --> 07:43.380
返回一个新的状态

07:43.380 --> 07:45.380
这是Reducer要说的事情

07:45.380 --> 07:47.380
要得到一个新的状态返回

07:47.380 --> 07:48.380
好

07:48.380 --> 07:49.380
那么比方说这里

07:49.380 --> 07:50.380
我们举个例子

07:50.380 --> 07:51.380
举个例子

07:51.380 --> 07:52.380
比方说呢

07:52.380 --> 07:54.380
我们这里呢

07:54.380 --> 07:56.380
这个Reducer呢

07:56.380 --> 07:57.380
它就用数字嘛

07:57.380 --> 07:59.380
就是比方有个数字

07:59.380 --> 08:00.380
我们是一个

08:00.380 --> 08:01.380
这个数字呢

08:01.380 --> 08:02.380
是一个共享的数据

08:02.380 --> 08:04.380
我们整个网站就一个数字

08:04.380 --> 08:05.380
它是共享的

08:05.380 --> 08:06.380
比方说嘛

08:06.380 --> 08:07.380
就个例子嘛

08:07.380 --> 08:08.380
对不对

08:08.380 --> 08:09.380
那么这个数字呢

08:09.380 --> 08:10.380
可以增加

08:10.380 --> 08:11.380
也可以减少

08:11.380 --> 08:12.380
那么可以增加

08:12.380 --> 08:13.380
减少

08:13.380 --> 08:15.380
那么这个Reducer怎么来处理这个问题呢

08:15.380 --> 08:16.380
你给我一个状态

08:16.380 --> 08:17.380
对吧

08:17.380 --> 08:18.380
给我一个状态

08:18.380 --> 08:19.380
那么这个状态呢

08:19.380 --> 08:21.380
是不是之前的数字

08:21.380 --> 08:22.380
我们常过里面存的

08:22.380 --> 08:23.380
就是一个数字嘛

08:23.380 --> 08:24.380
比方说

08:24.380 --> 08:25.380
那么是不是之前的数字

08:25.380 --> 08:26.380
好

08:26.380 --> 08:27.380
那么这个之前的数字

08:27.380 --> 08:28.380
我到底要增加

08:28.380 --> 08:30.380
还是要减少呢

08:30.380 --> 08:31.380
也就是我们到最后呢

08:31.380 --> 08:33.380
我们会返回一个东西

08:33.380 --> 08:35.380
返回啥呢

08:35.380 --> 08:36.380
比方说增加

08:36.380 --> 08:37.380
是不是返回

08:37.380 --> 08:38.380
它之前的数字加1

08:38.380 --> 08:39.380
对不对

08:39.380 --> 08:40.380
如果是减少的话

08:40.380 --> 08:42.380
是不是之前的数字减1

08:42.380 --> 08:44.380
就只有这么两种场景嘛

08:44.380 --> 08:46.380
比方说就这么两种场景

08:46.380 --> 08:49.380
那么到底是要加1还是减1呢

08:49.380 --> 08:50.380
取决于啥

08:50.380 --> 08:51.380
你告诉我取决于啥

08:51.380 --> 08:53.380
我们现在这是假设

08:53.380 --> 08:55.380
假设仓库中

08:55.380 --> 08:59.380
假设仓库中存

08:59.380 --> 09:03.380
仅存放的一个数字

09:03.380 --> 09:05.380
仓库里面只存放一个数字

09:05.380 --> 09:06.380
于是那个状态

09:06.380 --> 09:07.380
也表示

09:07.380 --> 09:08.380
仓库中里边的数据对吧

09:08.380 --> 09:09.380
那就是一个数字

09:09.380 --> 09:11.380
好那么这个reducer要干嘛呢

09:11.380 --> 09:13.380
它可能这个数字

09:13.380 --> 09:16.380
该数字的变化

09:16.380 --> 09:20.380
可能是加1或减1

09:20.380 --> 09:22.380
这个数字的变化可能是多一个少一个

09:22.380 --> 09:23.380
举个例子

09:23.380 --> 09:25.380
比方说这个例子

09:25.380 --> 09:26.380
那么这个reducer里面

09:26.380 --> 09:27.380
它干嘛呢

09:27.380 --> 09:28.380
它的返回值

09:28.380 --> 09:31.380
它要求你返回的是一个新的数据

09:31.380 --> 09:32.380
一个新的数据

09:32.380 --> 09:33.380
你根据之前的数据

09:33.380 --> 09:34.380
拿到一个新的数据

09:34.380 --> 09:36.380
那么这里到底是加1还是减1

09:36.380 --> 09:38.380
取决于啥呢

09:38.380 --> 09:40.380
好想想取决于啥

09:40.380 --> 09:42.380
取决于这个action

09:42.380 --> 09:44.380
因为action它们表述了

09:44.380 --> 09:45.380
我要做什么

09:45.380 --> 09:48.380
我到底要增加还是要减少

09:48.380 --> 09:49.380
取决于这个action

09:49.380 --> 09:50.380
好那么这个action

09:50.380 --> 09:52.380
我们就可以自行规定

09:52.380 --> 09:53.380
自行规定

09:53.380 --> 09:55.380
比方说我们规定

09:55.380 --> 09:57.380
约定

09:57.380 --> 10:00.380
约定action的格式

10:00.380 --> 10:01.380
什么格式呢

10:01.380 --> 10:03.380
是这样的格式

10:03.380 --> 10:05.380
type

10:05.380 --> 10:07.380
一个字乎串

10:07.380 --> 10:09.380
表示操作类型

10:09.380 --> 10:10.380
操作类型

10:10.380 --> 10:12.380
比方说我们约定好

10:12.380 --> 10:14.380
action是一个这么一个对象

10:14.380 --> 10:15.380
type是操作类型

10:15.380 --> 10:17.380
然后panel的属性

10:17.380 --> 10:19.380
表示的是附加信息

10:19.380 --> 10:20.380
附加信

10:20.380 --> 10:21.380
附加数据

10:21.380 --> 10:22.380
这个附加数据

10:22.380 --> 10:24.380
我们目前倒是用不上

10:24.380 --> 10:25.380
倒是用不上

10:25.380 --> 10:27.380
因为这个附加数据的话

10:27.380 --> 10:28.380
它一般比方说

10:28.380 --> 10:29.380
我们要删除

10:29.380 --> 10:30.380
删除个学生

10:30.380 --> 10:31.380
那个附加数据

10:31.380 --> 10:33.380
是不是要给一个学生id

10:33.380 --> 10:34.380
添加一个学生

10:34.380 --> 10:35.380
那么这个附加数据

10:35.380 --> 10:36.380
是不是要给一个学生对象

10:36.380 --> 10:37.380
是这么个意思

10:37.380 --> 10:38.380
但是我们这里只叫

10:38.380 --> 10:39.380
加1-1

10:39.380 --> 10:40.380
这个配肉的

10:40.380 --> 10:41.380
我们暂时用不上

10:41.380 --> 10:43.380
这里可能我们用的很简单

10:43.380 --> 10:44.380
长期很简单

10:44.380 --> 10:45.380
所以说我们这里

10:45.380 --> 10:47.380
到底要加1还是简1

10:47.380 --> 10:48.380
是不是要取决这个action

10:48.380 --> 10:50.380
因此我们是不是要去判断

10:50.380 --> 10:51.380
这个action

10:51.380 --> 10:52.380
判断这个action

10:52.380 --> 10:53.380
action呢

10:53.380 --> 10:54.380
我们比方说判断

10:54.380 --> 10:55.380
这个action对象

10:55.380 --> 10:56.380
它的type值

10:56.380 --> 10:58.380
如果是increase

10:58.380 --> 10:59.380
increase

10:59.380 --> 11:00.380
表示是不是加1

11:00.380 --> 11:01.380
对不对

11:01.380 --> 11:02.380
增加

11:02.380 --> 11:03.380
于是我们返回啥

11:03.380 --> 11:05.380
是不是之前的状态

11:05.380 --> 11:06.380
加1

11:06.380 --> 11:07.380
对不对

11:07.380 --> 11:08.380
之前的状态加1

11:08.380 --> 11:09.380
注意一下

11:09.380 --> 11:10.380
你一定是返回一个新的状态

11:10.380 --> 11:12.380
返回一个新的状态

11:12.380 --> 11:13.380
那么这是increase

11:13.380 --> 11:14.380
那么再来

11:14.380 --> 11:15.380
lceif

11:15.380 --> 11:17.380
如果说你的action的type值

11:17.380 --> 11:19.380
它不是增加

11:19.380 --> 11:20.380
是decrease

11:20.380 --> 11:21.380
这是我们自行约定的

11:21.380 --> 11:23.380
不是说一定得这样子写

11:23.380 --> 11:24.380
是我们自行约定的

11:24.380 --> 11:25.380
超出了一型

11:25.380 --> 11:26.380
到时候我们传递

11:26.380 --> 11:27.380
这个action的时候

11:27.380 --> 11:29.380
就要按照这个数据来传递

11:29.380 --> 11:31.380
于是我们这里

11:31.380 --> 11:32.380
应该是不是返回简1

11:32.380 --> 11:33.380
对不对

11:33.380 --> 11:34.380
返回简1

11:34.380 --> 11:35.380
对吧

11:35.380 --> 11:36.380
再看一下

11:36.380 --> 11:37.380
这个radius干嘛的

11:37.380 --> 11:40.380
它也来改变数据的

11:40.380 --> 11:41.380
改变数据你是不是

11:41.380 --> 11:42.380
因为我改变数据的时候

11:42.380 --> 11:44.380
可能要根据之前的数据来改变

11:44.380 --> 11:47.380
因此你要把之前的数据给我

11:47.380 --> 11:48.380
怎么来改变呢

11:48.380 --> 11:49.380
你是不是要把action给我

11:49.380 --> 11:50.380
因为action告诉我了

11:50.380 --> 11:51.380
告诉了我要干嘛

11:51.380 --> 11:53.380
我到底要增加还是减少

11:53.380 --> 11:54.380
对吧

11:54.380 --> 11:55.380
好你把这两个东西告诉我

11:55.380 --> 11:57.380
然后我会返回一个新的数据

11:57.380 --> 11:58.380
新的数据就是

11:58.380 --> 12:00.380
我改变之后的数据

12:00.380 --> 12:02.380
这是什么

12:02.380 --> 12:04.380
我这里是不是返回一个新的状态

12:04.380 --> 12:05.380
对吧

12:05.380 --> 12:07.380
那如果你既不是增加

12:07.380 --> 12:08.380
又不是减少

12:08.380 --> 12:09.380
那比方说吧

12:09.380 --> 12:10.380
咱们工程里边

12:10.380 --> 12:13.380
它只能实现增加减少

12:13.380 --> 12:14.380
目前我们很简单

12:14.380 --> 12:16.380
就是一个数字的增加和减少

12:16.380 --> 12:18.380
那你既不是增加

12:18.380 --> 12:19.380
也不是减少

12:19.380 --> 12:20.380
那我怎么办呢

12:20.380 --> 12:21.380
有时候来说抱错

12:21.380 --> 12:22.380
没有必要抱错

12:22.380 --> 12:23.380
你这里呢

12:23.380 --> 12:25.380
直接返回原来的数据就行了

12:25.380 --> 12:27.380
就发生数据没有变

12:27.380 --> 12:28.380
对吧

12:28.380 --> 12:29.380
数据没有任何变化

12:29.380 --> 12:30.380
能理解这个意思吗

12:30.380 --> 12:31.380
数据是没有任何变化的

12:31.380 --> 12:33.380
那就不变

12:33.380 --> 12:34.380
对不对

12:34.380 --> 12:35.380
把原来的数据返回就完了

12:35.380 --> 12:36.380
写完了

12:36.380 --> 12:37.380
也丢手写完了

12:37.380 --> 12:39.380
后面这就打成了个数字

12:39.380 --> 12:41.380
就是

12:41.380 --> 12:43.380
这个表示的是

12:43.380 --> 12:45.380
如果Type

12:45.380 --> 12:47.380
如果是一个

12:47.380 --> 12:50.380
是一个无销的Type

12:50.380 --> 12:52.380
无销的操作类型

12:52.380 --> 12:54.380
数据不变

12:54.380 --> 12:55.380
数据不变

12:55.380 --> 12:57.380
这是我们在用Redux的时候

12:57.380 --> 12:59.380
用常见的一种规则

13:00.380 --> 13:01.380
好了

13:01.380 --> 13:02.380
Redux就写好了

13:02.380 --> 13:04.380
如果你的操作你想增加

13:04.380 --> 13:06.380
那我就把数据加一个

13:06.380 --> 13:07.380
你如果想减少

13:07.380 --> 13:09.380
我就把数据减一个返回

13:09.380 --> 13:10.380
如果类型

13:10.380 --> 13:11.380
你的操作类型是无销的

13:11.380 --> 13:13.380
那么我就返回原来的数据

13:13.380 --> 13:14.380
看没

13:14.380 --> 13:15.380
Redux写好了

13:15.380 --> 13:16.380
现在的大家

13:16.380 --> 13:18.380
先可以暂停视频了

13:18.380 --> 13:19.380
写一下

13:19.380 --> 13:20.380
马上写一下Redux

13:20.380 --> 13:22.380
别看它代码简单

13:22.380 --> 13:23.380
千万不要看它个代码简单

13:23.380 --> 13:25.380
你写的时候

13:25.380 --> 13:27.380
你可能心里面会有很多疑惑

13:27.380 --> 13:28.380
有这些疑惑的时候

13:28.380 --> 13:30.380
你可以再把我刚才讲的那一段

13:30.380 --> 13:31.380
听一下

13:31.380 --> 13:33.380
看疑惑点具体在哪

13:36.380 --> 13:37.380
因为大家平时

13:37.380 --> 13:39.380
可能没有用这种处理模式

13:39.380 --> 13:40.380
来处理数据

13:40.380 --> 13:41.380
所以你一定要去写一下

13:41.380 --> 13:42.380
有这么一个印象

13:42.380 --> 13:43.380
写好了

13:43.380 --> 13:44.380
Redux之后

13:44.380 --> 13:48.330
我们再来看下一个

13:48.330 --> 13:49.330
下一个是什么

13:49.330 --> 13:51.330
下一个是实动

13:51.330 --> 13:53.330
数据仓库

13:53.330 --> 13:55.330
我们现在要建立一个数据仓库

13:55.330 --> 13:57.330
来保存数据

13:57.330 --> 13:59.330
数据仓库怎么建立

13:59.330 --> 14:01.330
这个时候需要用到Redux

14:01.330 --> 14:03.330
你说Redux这个库里边

14:03.330 --> 14:04.330
它干嘛呢

14:04.330 --> 14:06.330
它其实就是来帮你建立一个数据仓库的

14:06.330 --> 14:08.330
来帮你建立一个数据仓库的

14:08.330 --> 14:09.330
那么这里

14:09.330 --> 14:12.330
它提供了一个方法

14:12.330 --> 14:15.330
提供了一个函数叫做CritisDone

14:15.330 --> 14:17.330
表示创建一个数据仓库

14:17.330 --> 14:19.330
就是Redux这个库里边

14:19.330 --> 14:20.330
它没有给你搞定Redux

14:20.330 --> 14:21.330
Redux你得自己写

14:21.330 --> 14:23.330
你不自己写怎么办

14:23.330 --> 14:25.330
它怎么知道你要怎么改变数据

14:25.330 --> 14:27.330
它不知道的

14:27.330 --> 14:29.330
它只是帮你来创建数据仓库

14:29.330 --> 14:31.330
于是在Redux里边

14:31.330 --> 14:33.330
我们使用这个函数CritisDone

14:33.330 --> 14:35.330
来创建这么一个数据仓库

14:35.330 --> 14:37.330
这个数据仓库里边

14:37.330 --> 14:40.330
我们这里先介绍两个参数

14:40.330 --> 14:41.330
更多的参数

14:41.330 --> 14:43.330
我们以后会再说

14:43.330 --> 14:45.330
第一个参数就是Reduxer

14:45.330 --> 14:47.330
第一个参数就是Reduxer

14:47.330 --> 14:49.330
把Reduxer传进去

14:49.330 --> 14:51.330
这是我们第一个参数

14:51.330 --> 14:52.330
大家学习Redux的时候

14:52.330 --> 14:54.330
不要去横向对比无右

14:54.330 --> 14:56.330
一开始的时候不要去横向对比

14:56.330 --> 14:58.330
我们后边会做一些对比

14:58.330 --> 15:00.330
但是千万一开始不要横向对比

15:00.330 --> 15:02.330
因为你会发现差异还是蛮大的

