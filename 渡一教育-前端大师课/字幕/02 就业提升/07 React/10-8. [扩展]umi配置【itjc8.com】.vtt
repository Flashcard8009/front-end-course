WEBVTT

00:00.620 --> 00:03.620
这些课是一个扩展课程

00:03.620 --> 00:07.620
咱们来说一说5米里边的各种各样的配置

00:07.620 --> 00:10.620
它里边其实给你提供了非常非常多的配置

00:10.620 --> 00:13.620
但是绝大部分配置我们根本就用不上

00:13.620 --> 00:18.620
实际上5米这个框架它提出来的设想就是0配置

00:18.620 --> 00:21.620
你把这个5米的工程建好了之后

00:21.620 --> 00:24.620
你直接写就完事了 不用进行任何配置

00:24.620 --> 00:28.620
它的理念是约定大于配置

00:28.620 --> 00:30.620
就是我们尽量用一些约定的目录

00:30.620 --> 00:34.620
或者是一些约定的文件名来表示你想要干什么

00:34.620 --> 00:36.620
说你不用写配置的

00:36.620 --> 00:40.620
如果说这些约定都还不能解决你的问题的话

00:40.620 --> 00:43.620
那么你可能的话需要一点点配置

00:43.620 --> 00:45.620
我们这里可能就再说一说

00:45.620 --> 00:47.620
这里边我们设计到了一些配置

00:47.620 --> 00:49.620
这些配置我们再说一次

00:49.620 --> 00:51.620
以后你开发中基本上是用不到的

00:51.620 --> 00:53.620
而且这里的配置非常非常多

00:53.620 --> 00:56.620
我们这里可能就拿一些必要有代表性的配置

00:56.620 --> 00:58.620
拿出来说一下

00:58.620 --> 01:00.620
一个来

01:00.620 --> 01:03.620
首先这一刻我们把它分为这么几个部分

01:03.620 --> 01:04.620
三个部分

01:04.620 --> 01:06.620
一个是额外的约定文件

01:06.620 --> 01:08.620
我们之前也讲过了5米GS里面

01:08.620 --> 01:10.620
常见的一些约定

01:10.620 --> 01:12.620
比方说什么src目录

01:12.620 --> 01:13.620
pages目录

01:13.620 --> 01:14.620
models目录

01:14.620 --> 01:16.620
layouts目录

01:16.620 --> 01:17.620
这些目录

01:17.620 --> 01:19.620
还有global.css

01:19.620 --> 01:21.620
有一些常见的

01:21.620 --> 01:23.620
最核心的一些约定文件

01:23.620 --> 01:25.620
或者是约定目录

01:25.620 --> 01:27.620
这些之外其实它还有一些约定

01:27.620 --> 01:29.620
我们之前没有设计

01:29.620 --> 01:31.620
也不太会用得到

01:31.620 --> 01:33.620
我们了解一下就行了

01:33.620 --> 01:36.620
第一个是关于5米里边

01:36.620 --> 01:37.620
你看一下5米里边

01:37.620 --> 01:40.620
是不是没有那个public文件夹

01:40.620 --> 01:41.620
说没有

01:41.620 --> 01:43.620
没有这个文件夹

01:43.620 --> 01:45.620
那么如果说我想要定义一个

01:45.620 --> 01:47.620
页面模板的话

01:47.620 --> 01:48.620
我怎么来定义呢

01:48.620 --> 01:51.620
就是以前我们有这么一个东西

01:51.620 --> 01:52.620
给大家看一下

01:52.620 --> 01:53.620
我们以前这么

01:53.620 --> 01:55.620
以前说有一个这个目录

01:55.620 --> 01:56.620
对吧

01:56.620 --> 01:58.620
这里边是不是有一个index.atmail

01:58.620 --> 01:59.620
对不对

01:59.620 --> 02:00.620
是不是有这么一个玩意儿

02:00.620 --> 02:02.620
那么如果说

02:02.620 --> 02:04.620
如果说

02:04.620 --> 02:06.620
我们这里呢

02:06.620 --> 02:08.620
你要自己写一些的模板代码

02:08.620 --> 02:10.620
如果说你要自己写一些模板代码

02:10.620 --> 02:11.620
那你该怎么写呢

02:11.620 --> 02:14.620
那么它这里有个约定

02:14.620 --> 02:17.620
它约定了在src

02:17.620 --> 02:19.620
当然这个src目录

02:19.620 --> 02:20.620
我们之前也说过

02:20.620 --> 02:22.620
它是可有可无的

02:22.620 --> 02:24.620
那你没有写src目录

02:24.620 --> 02:25.620
你直接写配级词

02:25.620 --> 02:26.620
也认

02:26.620 --> 02:27.620
也可以

02:27.620 --> 02:28.620
好

02:28.620 --> 02:29.620
如果说你把我们都会写

02:29.620 --> 02:31.620
如果说你写了src目录的话

02:31.620 --> 02:33.620
那么在src目录配级词文件夹

02:33.620 --> 02:36.620
下边跟目录下边的这么一个文件

02:36.620 --> 02:38.620
叫documentejs

02:38.620 --> 02:39.620
ejs

02:39.620 --> 02:41.620
这个ejs是啥玩意儿了

02:41.620 --> 02:42.620
这个ejs呢

02:42.620 --> 02:44.620
你们现在还没有学习努德js

02:44.620 --> 02:46.620
它是一个模板引擎

02:46.620 --> 02:48.620
它是一个模板引擎

02:48.620 --> 02:49.620
这个模板引擎呢

02:49.620 --> 02:50.620
它会

02:50.620 --> 02:52.620
我们现在也不用去管它吧

02:52.620 --> 02:53.620
因为我也很难解释

02:53.620 --> 02:55.620
因为你们现在没有学努德js

02:55.620 --> 02:57.620
你们以后学了努德js的话

02:57.620 --> 02:58.620
你们会学这个模板引擎

02:58.620 --> 02:59.620
没关系

02:59.620 --> 03:01.620
现在不学的话也完全不影响

03:01.620 --> 03:03.620
你直接把写进谈页面就完事了

03:03.620 --> 03:04.620
好比方说

03:04.620 --> 03:06.620
这是我们的写的一个进谈页面

03:06.620 --> 03:07.620
对吧

03:07.620 --> 03:10.620
这是我们自己的页面模板

03:10.620 --> 03:13.620
好那么这里边写上一个root

03:13.620 --> 03:14.620
root

03:14.620 --> 03:16.620
好当你写到这么一个文件之后呢

03:16.620 --> 03:18.620
它到时候使用的模板文件

03:18.620 --> 03:19.620
它就不是自己默认的了

03:19.620 --> 03:22.620
它就是用我们自己写的这个文件

03:22.620 --> 03:23.620
这是约定好的

03:23.620 --> 03:25.620
那么使用这个文件呢

03:25.620 --> 03:27.620
作为我们的页面模板文件

03:27.620 --> 03:29.620
好咱们看一下吧

03:29.620 --> 03:31.620
运行出来

03:31.620 --> 03:33.620
要start

03:33.620 --> 03:35.620
运行出来

03:35.620 --> 03:36.620
看一下

03:36.620 --> 03:37.620
主要是看一下这个标题

03:37.620 --> 03:41.540
大不大

03:41.540 --> 03:45.540
因为现在你们没有学习这个ejs模板引擎

03:45.540 --> 03:47.540
这里边其实还可以用一些东西

03:47.540 --> 03:49.540
可以读取一些环境面量

03:49.540 --> 03:51.540
只不过我们平时也不太会这样去做

03:52.540 --> 03:55.540
看一下就行了

03:55.540 --> 03:56.540
那么你看标题

03:56.540 --> 03:57.540
我们自己的页面模板

03:57.540 --> 03:58.540
对吧

03:58.540 --> 03:59.540
我们看一下右键

03:59.540 --> 04:00.540
页面元代

04:00.540 --> 04:01.540
我们自己写的页面模板

04:01.540 --> 04:02.540
对吧

04:02.540 --> 04:03.540
而且它把

04:03.540 --> 04:05.540
这个东西给我们注入进去了

04:05.540 --> 04:06.540
是这样吧

04:06.540 --> 04:07.540
ok

04:07.540 --> 04:09.540
这就是关于这个约定

04:09.540 --> 04:11.540
那么有这个约定有什么意义呢

04:11.540 --> 04:12.540
意义也不大

04:12.540 --> 04:13.540
也不大

04:13.540 --> 04:16.540
如果说一定要说有什么意义的话

04:16.540 --> 04:18.540
通常就是在这里边去指定一些

04:18.540 --> 04:20.540
比如说一些额外的

04:20.540 --> 04:21.540
额外的link

04:21.540 --> 04:22.540
链接啊

04:22.540 --> 04:23.540
或者是一些meta

04:23.540 --> 04:24.540
元数据啊

04:24.540 --> 04:26.540
就指定一下这些东西

04:26.540 --> 04:28.540
其他也没什么多大的意义了

04:28.540 --> 04:29.540
好

04:29.540 --> 04:32.540
这是关于这个document.ejs

04:32.540 --> 04:34.540
这是这个约定

04:34.540 --> 04:35.540
下面这个约定

04:35.540 --> 04:38.540
下面这个约定的是在src目录下边

04:38.540 --> 04:39.540
注意不是配极式目录了

04:39.540 --> 04:41.540
是src目录

04:41.540 --> 04:42.540
这个目录下边

04:42.540 --> 04:43.540
你可以建一个文件

04:43.540 --> 04:45.540
名字叫做global.js

04:45.540 --> 04:46.540
global什么意思

04:46.540 --> 04:47.540
全局的

04:47.540 --> 04:49.540
之前我们写过一个csssglobal

04:49.540 --> 04:50.540
对吧

04:50.540 --> 04:52.540
表示全局的css样式文件

04:52.540 --> 04:54.540
那么这个global.js文件呢

04:54.540 --> 04:56.540
就是全局的js文件

04:56.540 --> 04:57.540
什么意思呢

04:57.540 --> 05:01.540
就是该文件中的代码

05:01.540 --> 05:02.540
啊

05:02.540 --> 05:05.540
会在最开始

05:05.540 --> 05:07.540
启动的时候

05:07.540 --> 05:09.540
被执行

05:09.540 --> 05:10.540
啊

05:10.540 --> 05:11.540
比方我们这里输出

05:11.540 --> 05:12.540
啊

05:12.540 --> 05:13.540
無密

05:13.540 --> 05:15.540
启动了

05:15.540 --> 05:16.540
比方说

05:16.540 --> 05:18.540
如果说你在一开始的时候

05:18.540 --> 05:19.540
要做什么事情的话

05:19.540 --> 05:21.540
你可以写到这个js文件里边

05:21.540 --> 05:22.540
当然我们

05:22.540 --> 05:23.540
你没什么事情可以做

05:23.540 --> 05:24.540
还要做啥呢

05:24.540 --> 05:25.540
你没啥事情可以做

05:25.540 --> 05:28.540
比方说你给我们看一下吧

05:28.540 --> 05:30.540
右键检查

05:30.540 --> 05:31.540
这里呢

05:31.540 --> 05:32.540
刷新

05:32.540 --> 05:33.540
你看

05:33.540 --> 05:34.540
这边5米启动了

05:34.540 --> 05:35.540
对吧

05:35.540 --> 05:37.540
它就是这么个global.js

05:37.540 --> 05:38.540
如果说你在一开始的时候

05:38.540 --> 05:39.540
要做一些什么统计啊

05:39.540 --> 05:41.540
那些乱七八糟的东西啊

05:41.540 --> 05:43.540
但是一开始也不太会做统计

05:44.540 --> 05:46.540
总之你最开始的时候

05:46.540 --> 05:47.540
你要做什么事情

05:47.540 --> 05:48.540
就可以写到这儿

05:48.540 --> 05:49.540
平时也没这么去用

05:49.540 --> 05:50.540
用这个文件

05:50.540 --> 05:51.540
好

05:51.540 --> 05:52.540
这是global.js

05:52.540 --> 05:54.540
这还是记忆笔吧

05:54.540 --> 05:55.540
就是

05:55.540 --> 05:56.540
页面

05:56.540 --> 05:58.540
模板文件

05:58.540 --> 05:59.540
好

05:59.540 --> 06:00.540
这个是

06:00.540 --> 06:02.540
在5米

06:02.540 --> 06:04.540
最开始启动时

06:04.540 --> 06:06.540
运行的js文件

06:06.540 --> 06:08.540
如果说你给了这个文件的话

06:08.540 --> 06:10.540
它会自动给你运行式

06:10.540 --> 06:11.540
好

06:11.540 --> 06:12.540
那么下面这个呢

06:13.540 --> 06:15.540
src目录下边

06:15.540 --> 06:16.540
这个app.js

06:16.540 --> 06:17.540
这个东西呢

06:17.540 --> 06:18.540
有的时候还有点用

06:19.540 --> 06:21.540
这个东西是做什么呢

06:21.540 --> 06:23.540
是做那种动态配置的

06:25.540 --> 06:29.540
做运行式配置的

06:30.540 --> 06:32.540
就是那个

06:33.540 --> 06:35.540
代码

06:35.540 --> 06:37.540
运行式配置的代码

06:37.540 --> 06:38.540
什么意思呢

06:38.540 --> 06:39.540
就是说

06:39.540 --> 06:40.540
这里

06:40.540 --> 06:41.540
这个文件里边

06:41.540 --> 06:42.540
我先刚写上

06:42.540 --> 06:43.540
这个文件

06:43.540 --> 06:44.540
app.js

06:44.540 --> 06:45.540
这个文件里边

06:45.540 --> 06:46.540
你可以一个一个导出

06:46.540 --> 06:47.540
导出什么东西呢

06:47.540 --> 06:48.540
你导出的不同的东西呢

06:48.540 --> 06:50.540
它就会在不同的

06:50.540 --> 06:52.540
它就会起一个不同的作用

06:52.540 --> 06:53.540
那么这些代码呢

06:53.540 --> 06:55.540
它会在运行的时候

06:55.540 --> 06:56.540
只行

06:56.540 --> 06:58.540
你看我们以前的配置

06:58.540 --> 06:59.540
是不是写到这儿的

06:59.540 --> 07:00.540
那么这里的配置呢

07:00.540 --> 07:02.540
我们把它称为静态配置

07:02.540 --> 07:03.540
就是这里的配置呢

07:03.540 --> 07:04.540
是写死的

07:04.540 --> 07:05.540
它没有

07:05.540 --> 07:06.540
比方说

07:06.540 --> 07:07.540
我们要根据什么情况

07:07.540 --> 07:08.540
比方说

07:08.540 --> 07:09.540
这个例子啊

07:09.540 --> 07:10.540
这个地方

07:10.540 --> 07:11.540
要根据某一些情况

07:11.540 --> 07:12.540
我们要启用

07:12.540 --> 07:13.540
否则的话不启用

07:13.540 --> 07:14.540
再比方说

07:14.540 --> 07:16.540
我们这个什么

07:16.540 --> 07:17.540
proxy

07:17.540 --> 07:18.540
要根据某些情况

07:18.540 --> 07:20.540
要来进行不同的操作

07:20.540 --> 07:21.540
举个例子

07:21.540 --> 07:22.540
当然这些东西也可以处理

07:22.540 --> 07:23.540
以后我们讲

07:23.540 --> 07:24.540
环境变量之后

07:24.540 --> 07:25.540
也可以处理

07:25.540 --> 07:26.540
就说绝大部分时候

07:26.540 --> 07:27.540
我们使用静态配置呢

07:27.540 --> 07:28.540
完全够了

07:28.540 --> 07:30.540
完全足够了

07:30.540 --> 07:31.540
如果说你觉得

07:31.540 --> 07:32.540
静态配置都还不够的话

07:32.540 --> 07:34.540
那么你可能会需要

07:34.540 --> 07:35.540
这个动态配置

07:35.540 --> 07:36.540
那么这个动态配置

07:36.540 --> 07:37.540
到底是啥呢

07:37.540 --> 07:38.540
它里面不同的东西啊

07:38.540 --> 07:40.540
它配置的东西不一样

07:40.540 --> 07:41.540
比方说

07:41.540 --> 07:42.540
你这个东西

07:42.540 --> 07:43.540
叫做passroads

07:43.540 --> 07:44.540
这是个怎么样

07:44.540 --> 07:46.540
这是个导出的函数

07:46.540 --> 07:48.540
这是个函数

07:48.540 --> 07:49.540
我们来看一下吧

07:49.540 --> 07:50.540
这个函数

07:50.540 --> 07:51.540
你这里怎么来配置呢

07:51.540 --> 07:52.540
你要导出

07:52.540 --> 07:54.540
你看一下你就明白了

07:54.540 --> 07:55.540
你不能默认导出

07:55.540 --> 07:57.540
你要必须要是一个具名函数

07:57.540 --> 07:58.540
导出这么一个函数

07:58.540 --> 08:00.540
它会给你传一个参数性来

08:00.540 --> 08:01.540
roads

08:01.540 --> 08:03.540
这个函数啥意思呢

08:03.540 --> 08:05.540
这个函数的意思就是

08:06.540 --> 08:09.540
动态的配置路由

08:09.540 --> 08:10.540
就是pass什么意思

08:10.540 --> 08:11.540
就像有点像

08:11.540 --> 08:12.540
打补钉对吧

08:12.540 --> 08:14.540
pass是一个补钉的意思

08:14.540 --> 08:16.540
给这个路由来打一些补钉

08:16.540 --> 08:17.540
那么它这里传出的

08:17.540 --> 08:18.540
这个参数是什么呢

08:18.540 --> 08:21.540
参数就是默认的路由配置

08:21.540 --> 08:23.540
参数roads

08:23.540 --> 08:26.540
是默认的路由配置

08:26.540 --> 08:27.540
所以说这个函数

08:27.540 --> 08:28.540
你导出这个函数

08:28.540 --> 08:29.540
它会在

08:29.540 --> 08:30.540
读取完了

08:30.540 --> 08:32.540
所有的静态的

08:32.540 --> 08:33.540
路由配置之后

08:33.540 --> 08:35.540
它会运行这个函数

08:35.540 --> 08:36.540
那么这个函数

08:36.540 --> 08:37.540
我们还是来记一笔吧

08:37.540 --> 08:38.540
在这里

08:38.540 --> 08:41.040
函函数

08:41.040 --> 08:42.040
会在5米

08:42.040 --> 08:44.040
读取完

08:44.040 --> 08:47.040
所有静态路由配置之后

08:47.040 --> 08:48.040
执行

08:48.040 --> 08:50.040
它会执行这个函数

08:50.040 --> 08:51.040
并且它会把

08:51.040 --> 08:53.040
目前的路由配置作为

08:53.040 --> 08:54.040
参数给传过来

08:54.040 --> 08:56.040
咱们在这里打印一下吧

08:56.040 --> 08:57.040
打印一下

08:57.040 --> 08:58.040
roads

08:59.040 --> 09:00.040
保存

09:00.040 --> 09:01.040
咱们来看一下

09:01.040 --> 09:02.040
打印出来了

09:02.040 --> 09:03.040
你看

09:03.040 --> 09:04.040
这里是不是个数组

09:04.040 --> 09:05.040
是不是个数组

09:05.040 --> 09:06.040
数组拿来的

09:06.040 --> 09:07.040
你看一下

09:07.040 --> 09:08.040
是不是在这

09:09.040 --> 09:10.040
Rotor里边

09:10.040 --> 09:11.040
我们看一下

09:12.040 --> 09:13.040
Rotor里边

09:13.040 --> 09:14.040
你看

09:14.040 --> 09:16.610
这里

09:16.610 --> 09:17.610
你看这个roads

09:17.610 --> 09:18.610
是不是数组

09:18.610 --> 09:20.610
它就是把这个东西给传过来了

09:20.610 --> 09:22.610
它生成了最终的静态配置

09:22.610 --> 09:23.610
给传过来了

09:23.610 --> 09:24.610
那么传过来

09:24.610 --> 09:25.610
有什么意义呢

09:25.610 --> 09:26.610
这个传过来

09:26.610 --> 09:27.610
你看一下

09:27.610 --> 09:28.610
展开看一下

09:28.610 --> 09:29.610
第一个是不是匹配一个路由

09:29.610 --> 09:30.610
对吧

09:30.610 --> 09:31.610
匹配什么组件

09:31.610 --> 09:32.610
这个路径

09:32.610 --> 09:33.610
匹配这个组件

09:33.610 --> 09:34.610
它有一些指路由

09:34.610 --> 09:35.610
看到没

09:35.610 --> 09:36.610
是不是有些指路由

09:36.610 --> 09:37.610
对吧

09:37.610 --> 09:38.610
所以有些指路由

09:39.610 --> 09:40.610
OK

09:40.610 --> 09:41.610
那如果说

09:41.610 --> 09:42.610
它可以传过来了

09:42.610 --> 09:43.610
那么有什么用呢

09:43.610 --> 09:44.610
你可以在这里改

09:45.610 --> 09:46.610
你可以在这里改

09:47.610 --> 09:48.610
比方说

09:48.610 --> 09:50.610
我们这里随便下一个例子吧

09:50.610 --> 09:52.610
就说明这个道理就行了

09:52.610 --> 09:53.610
你可以在这里改

09:54.610 --> 09:57.610
我们再动态的给它添加一个路由

09:57.610 --> 09:59.610
动态的添加一个路由

09:59.610 --> 10:01.610
你这里不是有四六个指路由吗

10:01.610 --> 10:02.610
对吧

10:02.610 --> 10:03.610
OK

10:03.610 --> 10:05.610
我们来找到你这个路由配置

10:05.610 --> 10:08.610
找到这个路由配置

10:08.610 --> 10:09.610
它的第几项呢

10:09.610 --> 10:10.610
第一项

10:10.610 --> 10:13.610
第一项里边不是有一个指路由吗

10:13.610 --> 10:14.610
路由

10:14.610 --> 10:15.610
对吧

10:15.610 --> 10:16.610
找到这个路由

10:16.610 --> 10:17.610
OK

10:17.610 --> 10:18.610
我们这里呢

10:18.610 --> 10:19.610
也不添加了

10:19.610 --> 10:20.610
三一个

10:20.610 --> 10:21.610
三一个

10:21.610 --> 10:23.610
三一个

10:23.610 --> 10:24.610
三一个啥呢

10:26.610 --> 10:28.610
三一个

10:28.610 --> 10:30.610
把第一个删了吧

10:30.610 --> 10:31.610
行吧

10:31.610 --> 10:32.610
咱们把第一个删了

10:32.610 --> 10:33.610
第一个就是什么

10:33.610 --> 10:34.610
Welcome

10:34.610 --> 10:35.610
对吧

10:35.610 --> 10:36.610
就是Welcome

10:36.610 --> 10:37.610
欢迎你

10:37.610 --> 10:38.610
第一个删了

10:38.610 --> 10:39.610
把这个路由删了

10:39.610 --> 10:40.610
好

10:40.610 --> 10:41.610
第一个的话

10:41.610 --> 10:42.610
如何来删除了

10:42.610 --> 10:43.610
是不是Shift

10:43.610 --> 10:44.610
对吧

10:44.610 --> 10:45.610
Shift

10:45.610 --> 10:47.610
是不是删掉了

10:47.610 --> 10:48.610
咱们再看一下

10:48.610 --> 10:49.610
保存

10:50.610 --> 10:51.610
你看

10:51.610 --> 10:52.610
现在首页是找不到了

10:52.610 --> 10:53.610
首页是找不到了

10:53.610 --> 10:54.610
404了

10:54.610 --> 10:55.610
找不到了

10:55.610 --> 10:56.610
首页就没了

10:56.610 --> 10:57.610
就是这里可以动态的改变

10:57.610 --> 10:59.610
这个路由配置

10:59.610 --> 11:00.610
在此位置

11:00.610 --> 11:02.610
在此位置

11:02.610 --> 11:05.610
可以动态的改变

11:05.610 --> 11:07.610
路由配置

11:07.610 --> 11:09.610
就这么一个东西

11:09.610 --> 11:11.610
意义也没多了

11:11.610 --> 11:12.610
没多了

11:12.610 --> 11:13.610
可能用的

11:13.610 --> 11:14.610
这个文件可能用的

11:14.610 --> 11:15.610
比较多的是这个

11:15.610 --> 11:16.610
是关于这个Diva的

11:16.610 --> 11:18.610
因为Diva里面呢

11:18.610 --> 11:19.610
它是

11:19.610 --> 11:20.610
实际上我们知道

11:20.610 --> 11:21.610
Diva它是封装了

11:21.610 --> 11:22.610
什么Redux

11:22.610 --> 11:23.610
而污名呢

11:23.610 --> 11:25.610
它相当于是封装了Diva

11:25.610 --> 11:27.610
Diva里面不是有配置吗

11:27.610 --> 11:28.610
对吧

11:28.610 --> 11:29.610
我们之前还记得吗

11:29.610 --> 11:30.610
Diva里面

11:30.610 --> 11:31.610
创建一个Diva

11:31.610 --> 11:32.610
App的时候

11:32.610 --> 11:33.610
是不是有配置

11:33.610 --> 11:34.610
那么这个配置呢

11:34.610 --> 11:36.610
在污秘阶势里面怎么写呢

11:36.610 --> 11:38.610
因为你现在没有手动的去

11:38.610 --> 11:39.610
创建Diva对象

11:39.610 --> 11:41.610
然后再去

11:41.610 --> 11:42.610
启动Diva

11:42.610 --> 11:43.610
并没有

11:43.610 --> 11:44.610
那么你怎么来写这个配置呢

11:44.610 --> 11:46.610
你觉得可以在这App里面

11:46.610 --> 11:47.610
进一书写

11:47.610 --> 11:48.610
那么这个配置

11:48.610 --> 11:50.610
Config这个配置

11:50.610 --> 11:52.610
它相当于是啥呢

11:52.610 --> 11:53.610
相当于就是那个

11:53.610 --> 11:55.610
相当于

11:55.610 --> 11:57.610
NewDiva

11:57.610 --> 11:59.610
Diva

11:59.610 --> 12:00.610
这里的配置

12:00.610 --> 12:02.610
相当于这里的配置

12:02.610 --> 12:03.610
明白这个意思吧

12:03.610 --> 12:05.610
那么这个Config是相当于是啥呢

12:05.610 --> 12:07.610
它相当于

12:07.610 --> 12:09.610
Diva对象

12:09.610 --> 12:10.610
它的U是

12:10.610 --> 12:12.610
它的就是插线

12:12.610 --> 12:14.610
就这两个东西

12:14.610 --> 12:15.610
就这两个东西

12:15.610 --> 12:17.610
一个是Diva配置

12:17.610 --> 12:19.610
一个是Diva的插线

12:19.610 --> 12:21.610
那么你怎么在App.js里面

12:21.610 --> 12:22.610
书写呢

12:22.610 --> 12:24.610
你是这样可以用这种方式来写

12:24.610 --> 12:26.610
Export

12:26.610 --> 12:28.610
这里导出一个什么

12:28.610 --> 12:29.610
导出一个变量

12:29.610 --> 12:30.610
Diva

12:30.610 --> 12:31.610
它是个对象

12:31.610 --> 12:32.610
它的配置写到哪呢

12:32.610 --> 12:33.610
就写到这

12:33.610 --> 12:35.610
它的Planjins

12:35.610 --> 12:37.610
Planjins是个数组

12:37.610 --> 12:38.610
你写到这

12:38.610 --> 12:39.610
有哪些插线

12:39.610 --> 12:40.610
Diva插线

12:40.610 --> 12:42.610
需要使用

12:42.610 --> 12:43.610
那么你就写到这

12:43.610 --> 12:44.610
你写到这过后

12:44.610 --> 12:45.610
它就会把数组的

12:45.610 --> 12:47.610
每一项进行循环

12:47.610 --> 12:48.610
便利

12:48.610 --> 12:49.610
然后呢

12:49.610 --> 12:50.610
把每一项拿出来

12:50.610 --> 12:51.610
使用Diva Use

12:51.610 --> 12:52.610
它会帮你做这件事

12:52.610 --> 12:54.610
你直接配置就完事了

12:54.610 --> 12:55.610
然后如果说

12:55.610 --> 12:56.610
你还有什么config的话

12:56.610 --> 12:57.610
那么你还在

12:57.610 --> 12:58.610
创建这个Diva对象的时候

12:58.610 --> 12:59.610
它会进行配置

13:00.610 --> 13:01.610
那么这config

13:01.610 --> 13:02.610
config怎么写呢

13:02.610 --> 13:03.610
比方说我们之前

13:03.610 --> 13:04.610
随便来一个吗

13:04.610 --> 13:06.610
我们之前用

13:06.610 --> 13:08.610
Redux Nougur

13:10.610 --> 13:11.610
我们比方说

13:11.610 --> 13:13.610
要加入一个Redux Nougur

13:13.610 --> 13:14.610
来吧

13:14.610 --> 13:15.610
来一个

13:15.610 --> 13:17.610
ADD Redux Nougur

13:18.610 --> 13:20.610
就是做日子记录了

13:20.610 --> 13:22.610
我们把它加进去

13:22.610 --> 13:23.610
那么我们在配置的时候

13:23.610 --> 13:24.610
还记得吗

13:24.610 --> 13:26.610
在Diva里边怎么来加中间键

13:26.610 --> 13:27.610
是不是这样

13:27.610 --> 13:28.610
on x

13:28.610 --> 13:29.610
对吧

13:29.610 --> 13:31.610
on x 加中间键

13:31.610 --> 13:32.610
那么这里边

13:32.610 --> 13:33.610
怎么加呢

13:33.610 --> 13:34.610
怎么加呢

13:34.610 --> 13:35.610
是不是一个数组

13:35.610 --> 13:37.610
一个数组

13:37.610 --> 13:38.610
那么当

13:38.610 --> 13:40.610
就是当x 到达的时候

13:40.610 --> 13:41.610
需要经过一些

13:41.610 --> 13:42.610
中间键来处理

13:42.610 --> 13:43.610
那么

13:43.610 --> 13:44.610
这就加

13:44.610 --> 13:45.610
Redux的中间键

13:45.610 --> 13:46.610
好

13:46.610 --> 13:47.610
来吧

13:47.610 --> 13:49.610
我们把这个安装好了

13:49.610 --> 13:50.610
安装好了

13:50.610 --> 13:52.610
然后我们这里倒入进来

13:52.610 --> 13:53.610
import

13:53.610 --> 13:55.610
就是

13:55.610 --> 13:56.610
nougur

13:56.610 --> 13:58.610
from

13:58.610 --> 14:00.610
Redux Nougur

14:00.610 --> 14:01.610
好

14:01.610 --> 14:02.610
来吧

14:02.610 --> 14:04.610
直接把这个nougur放这

14:04.610 --> 14:05.610
是吧

14:05.610 --> 14:06.610
是不是完事了

14:06.610 --> 14:08.610
直接把这个nougur放这

14:08.610 --> 14:10.610
直接把这个nougur放这就完事了

14:10.610 --> 14:11.610
好

14:11.610 --> 14:12.610
咱们来试一下吧

14:12.610 --> 14:14.610
咱们也没有什么Diva插件

14:14.610 --> 14:15.610
我就给大家写到这

14:15.610 --> 14:16.610
大家知道的

14:16.610 --> 14:17.610
我们这么个事就行了

14:17.610 --> 14:22.610
稍等一下

14:22.610 --> 14:27.390
咱们这个Diva里边

14:27.390 --> 14:30.390
它还有一个Diva的关于日记录的插件

14:30.390 --> 14:31.390
叫Diva Nougur

14:31.390 --> 14:33.390
我这里之所以这样讲

14:33.390 --> 14:34.390
是因为

14:34.390 --> 14:35.390
我给大家看一下

14:35.390 --> 14:36.390
如果说你要在Diva

14:36.390 --> 14:38.390
给Diva进行一些配置

14:38.390 --> 14:40.390
或者是给Diva加一些插件的时候

14:40.390 --> 14:41.390
干什么去书写

14:41.390 --> 14:43.390
主要是看这个

14:43.390 --> 14:44.390
你看

14:44.390 --> 14:45.390
是不是加进来了

14:45.390 --> 14:46.390
对吧

14:46.390 --> 14:47.390
给大师nougur

14:47.390 --> 14:48.390
你看是不是加进来了

14:48.390 --> 14:49.390
对不对

14:49.390 --> 14:50.390
就这么个意思

14:50.390 --> 14:51.390
好

14:51.390 --> 14:53.390
当然我们有了这个

14:53.390 --> 14:54.390
调式工具之后

14:54.390 --> 14:55.390
有了这个玩意

14:55.390 --> 14:56.390
调式工具之后

14:57.390 --> 14:58.390
给大家看一下就行了

14:59.390 --> 15:00.390
这是关于这一块

15:02.390 --> 15:03.390
那么就没啥了

15:03.390 --> 15:04.390
就没啥

15:04.390 --> 15:05.390
这东西用的都很少很少

15:05.390 --> 15:07.390
下面这个m

15:07.390 --> 15:09.390
m这个玩意很有意思

15:09.390 --> 15:10.390
它是做一些

15:11.390 --> 15:13.390
环境变量的配置

15:14.390 --> 15:16.390
配置环境变量

15:18.390 --> 15:19.390
这些变量

15:19.390 --> 15:20.390
就这些变量

15:21.390 --> 15:23.390
会在5米

15:24.390 --> 15:26.390
编译期间

15:27.390 --> 15:28.390
发挥作用

15:28.390 --> 15:29.390
什么叫编译期间

15:29.390 --> 15:30.390
因为我们知道

15:30.390 --> 15:31.390
5米它是要把我们的

15:31.390 --> 15:33.390
写的代码进行一下编译的

15:33.390 --> 15:34.390
对吧

15:34.390 --> 15:35.390
它编译到哪

15:35.390 --> 15:36.390
编到这里面

15:36.390 --> 15:37.390
有很多的编译结果

15:37.390 --> 15:38.390
我们不用去手动

15:38.390 --> 15:40.390
改编这个这里的代码

15:40.390 --> 15:42.390
它让它自行发挥作用就行了

15:42.390 --> 15:43.390
那么这里的环境

15:43.390 --> 15:45.390
有一些环境变量

15:45.390 --> 15:46.390
比方说

15:46.390 --> 15:47.390
什么

15:47.390 --> 15:48.390
当前的开发模式

15:48.390 --> 15:50.390
开发模式还是生产模式

15:50.390 --> 15:51.390
然后

15:51.390 --> 15:53.390
你要启动的开发服务器的

15:53.390 --> 15:54.390
端口号

15:54.390 --> 15:55.390
这些东西

15:55.390 --> 15:56.390
我们就可以写到

15:56.390 --> 15:58.390
这个配置文件里面

15:58.390 --> 15:59.390
怎么写呢

15:59.390 --> 16:02.390
你直接在5米那里面

16:02.390 --> 16:04.390
新建个文件

16:04.390 --> 16:05.390
给它写上

16:06.390 --> 16:07.390
就完事了

16:07.390 --> 16:08.390
就这么简单

16:08.390 --> 16:09.390
就这么简单

16:09.390 --> 16:10.390
这里面写的不是建

16:10.390 --> 16:11.390
也是

16:11.390 --> 16:12.390
它里面写的就是一个

16:12.390 --> 16:13.390
配置文件的写法

16:13.390 --> 16:14.390
就是一个建值队

16:14.390 --> 16:15.390
建值队的书写

16:15.390 --> 16:16.390
我给大家书写一下

16:16.390 --> 16:17.390
就明白了

16:17.390 --> 16:18.390
比方说

16:18.390 --> 16:19.390
我这里

16:19.390 --> 16:20.390
我们先看这个配置

16:21.390 --> 16:22.390
Port这个配置

16:22.390 --> 16:23.390
比方说

16:23.390 --> 16:24.390
目前我们的端口号

16:24.390 --> 16:25.390
是多少呢

16:25.390 --> 16:26.390
就是开发服务器的端口号

16:26.390 --> 16:27.390
是8000对吧

16:27.390 --> 16:29.390
比方说我可以改改了

16:29.390 --> 16:30.390
改成8005

16:31.390 --> 16:32.390
保存

16:32.390 --> 16:34.390
然后我们这里的停止

16:34.390 --> 16:35.390
重新启动

16:35.390 --> 16:36.390
要start

16:36.390 --> 16:37.390
看一下吧

16:39.770 --> 16:42.270
其实这里边

16:42.270 --> 16:43.270
还有不少的配置

16:43.270 --> 16:45.270
只凭是我们根本就用不到

16:45.270 --> 16:46.270
我就讲一下

16:46.270 --> 16:49.900
我们可能会用到的东西

16:49.900 --> 16:50.900
稍等一下

16:50.900 --> 16:54.410
让它便宜便宜启动

16:54.410 --> 16:55.410
你看

16:55.410 --> 16:56.410
这个端口号

16:56.410 --> 16:58.410
是包含到8005了

16:58.410 --> 16:59.410
对吧

16:59.410 --> 17:00.410
由于我们的

17:01.410 --> 17:02.410
域名

17:02.410 --> 17:03.410
端口号发生了变化

17:03.410 --> 17:04.410
所以说我们local storage

17:04.410 --> 17:05.410
它读不到了

17:05.410 --> 17:06.410
读不到了

17:06.410 --> 17:07.410
所以说现在要重新登录了

17:08.410 --> 17:09.410
原来这个是吧

17:09.410 --> 17:10.410
其他都一样的

17:12.720 --> 17:13.720
是一样的

17:13.720 --> 17:14.720
对吧

17:14.720 --> 17:15.720
就是端口号

17:15.720 --> 17:16.720
还有

17:16.720 --> 17:17.720
还有这个就是mock

17:18.720 --> 17:19.720
mock是什么意思呢

17:19.720 --> 17:21.720
表示是否使用魔力数据

17:22.720 --> 17:23.720
我们之前说过

17:23.720 --> 17:25.720
咱们在开发阶段

17:25.720 --> 17:26.720
有可能会

17:26.720 --> 17:28.720
有出现这么一种情况

17:28.720 --> 17:29.720
就是我们的服务器端

17:29.720 --> 17:30.720
还没有写出来

17:30.720 --> 17:31.720
当我这个项目里面

17:31.720 --> 17:33.720
没有使用魔力数据

17:33.720 --> 17:34.720
就是我们的服务器

17:34.720 --> 17:36.720
还没有写出来

17:36.720 --> 17:37.720
所以说

17:37.720 --> 17:38.720
我们后台的接口

17:38.720 --> 17:39.720
访问不到

17:39.720 --> 17:41.720
可能我们需要一些魔力数据

17:41.720 --> 17:42.720
但是最终

17:42.720 --> 17:43.720
这个魔力数据是

17:43.720 --> 17:44.720
不需要的

17:44.720 --> 17:45.720
最终这个魔力数据

17:45.720 --> 17:46.720
是不需要的

17:46.720 --> 17:47.720
因此

17:47.720 --> 17:48.720
我们可以通过

17:48.720 --> 17:50.720
mock来进行控制

17:50.720 --> 17:52.720
这个mock怎么写呢

17:52.720 --> 17:53.720
就这个意思

17:53.720 --> 17:55.720
它默认是开启了

17:55.720 --> 17:56.720
魔力数据的

17:56.720 --> 17:58.720
也就是它能够识别

17:58.720 --> 17:59.720
这个文件夹里边的

17:59.720 --> 18:00.720
mock文件夹

18:00.720 --> 18:01.720
能够识别这里的

18:01.720 --> 18:02.720
mock文件夹

18:03.720 --> 18:04.720
mock文件夹

18:04.720 --> 18:05.720
它是可以识别的

18:05.720 --> 18:06.720
是可以识别

18:06.720 --> 18:07.720
这个样的文件夹的

18:07.720 --> 18:08.720
比方说

18:08.720 --> 18:09.720
我们下举个例子

18:09.720 --> 18:10.720
我们下举个例子

18:10.720 --> 18:11.720
比方说

18:11.720 --> 18:12.720
我们这里就随便写一个吧

18:13.720 --> 18:14.720
写个啥呢

18:15.720 --> 18:17.720
写一个

18:17.720 --> 18:18.720
student

18:19.720 --> 18:20.720
这些是

18:20.720 --> 18:21.720
魔力学生数据

18:21.720 --> 18:23.720
我们之前好像写过

18:23.720 --> 18:24.720
好像写过

18:24.720 --> 18:25.720
我们这里随便写一个吧

18:25.720 --> 18:27.720
export default

18:27.720 --> 18:29.720
当你访问这样的地址

18:29.720 --> 18:31.720
用get请求

18:31.720 --> 18:32.720
访问什么地址呢

18:32.720 --> 18:33.720
我看一下

18:33.720 --> 18:34.720
之前访问的哪个地址

18:36.720 --> 18:38.720
看看这个网络请求

18:38.720 --> 18:40.720
访问的是fand by page

18:40.720 --> 18:41.720
对吧

18:41.720 --> 18:42.720
访问的是这个地址

18:43.720 --> 18:45.720
访问的是api

18:46.720 --> 18:47.720
api

18:49.720 --> 18:50.720
student

18:50.720 --> 18:52.720
apstudent

18:52.720 --> 18:53.720
fand

18:54.720 --> 18:56.720
by page

18:56.720 --> 18:58.720
如果说你访问的是这样的地址的话

18:58.720 --> 19:00.720
我给你一些魔力数据得了

19:00.720 --> 19:01.720
我给你什么魔力数据呢

19:01.720 --> 19:03.720
我就给你一个

19:03.720 --> 19:04.720
给你个啥呢

19:05.720 --> 19:06.720
我们就把这个response

19:06.720 --> 19:08.720
复制一下得了啥呢

19:08.720 --> 19:09.720
复制一下

19:10.720 --> 19:11.720
OK

19:11.720 --> 19:13.720
我就给你这样的一个魔力数据

19:14.720 --> 19:15.720
复制一下

19:15.720 --> 19:16.720
复制一下就行了

19:16.720 --> 19:17.720
这是魔力数据

19:17.720 --> 19:18.720
这魔力数据我们应该写实的

19:19.720 --> 19:20.720
这样子一来

19:20.720 --> 19:21.720
我们保证看一下

19:29.180 --> 19:30.180
那么你会发现

19:30.180 --> 19:32.180
我们无论如何翻页

19:33.180 --> 19:35.180
它都不会发生变化了

19:35.180 --> 19:36.180
因为为什么

19:36.180 --> 19:38.180
它始终得到了一些魔力数据

19:39.180 --> 19:41.180
得到了始终是魔力数据

19:41.180 --> 19:45.350
它不会发生变化

19:45.350 --> 19:46.350
来吧

19:47.350 --> 19:48.350
选择查询

19:48.350 --> 19:49.350
第二页

19:49.350 --> 19:50.350
第三页

19:51.350 --> 19:52.350
第四页

19:52.350 --> 19:53.350
第五页

19:53.350 --> 19:54.350
ID数都没变

19:54.350 --> 19:55.350
尾页

19:55.350 --> 19:56.350
手页

19:56.350 --> 19:57.350
全部没变

19:57.350 --> 19:58.350
对吧

19:58.350 --> 19:59.350
全部没变

19:59.350 --> 20:00.350
为什么

20:00.350 --> 20:01.350
因为用的都是魔力数据

20:01.350 --> 20:02.350
用的都是魔力数据

20:04.350 --> 20:05.350
如果说

20:05.350 --> 20:06.350
比如说我们这里

20:06.350 --> 20:07.350
为了大家看得更加清楚一点

20:07.350 --> 20:08.350
我把这个魔力数据

20:08.350 --> 20:09.350
稍微

20:09.350 --> 20:11.350
给它做的有那么一点

20:11.350 --> 20:12.350
特点一点

20:14.350 --> 20:15.350
第一个名字

20:15.350 --> 20:16.350
改一下第一个名字

20:16.350 --> 20:17.350
大家可以看得很清楚了

20:18.350 --> 20:19.350
杰菲

20:19.350 --> 20:23.110
魔力姓名

20:23.110 --> 20:24.110
刷新一次

20:25.110 --> 20:26.110
你看

20:26.110 --> 20:27.110
第一个是魔力姓名

20:27.110 --> 20:28.110
对吧

20:28.110 --> 20:29.110
是不是魔力数据

20:29.110 --> 20:30.110
然后

20:30.110 --> 20:31.110
现在

20:31.110 --> 20:32.110
就是说

20:32.110 --> 20:33.110
如果有一天

20:33.110 --> 20:34.110
有一天的话

20:34.110 --> 20:35.110
那么

20:35.110 --> 20:37.110
我们的后台开发出来了

20:38.110 --> 20:39.110
开发出来的过程

20:39.110 --> 20:40.110
是不是不需要魔力数据了

20:40.110 --> 20:42.110
你想把魔力数据关掉

20:42.110 --> 20:43.110
给它关掉

20:43.110 --> 20:44.110
那怎么关

20:44.110 --> 20:45.110
那么这里

20:45.110 --> 20:46.110
就可以写这个配置

20:46.110 --> 20:47.110
默克

20:48.110 --> 20:49.110
它默认是开启的

20:49.110 --> 20:50.110
一把字为呢

20:50.110 --> 20:51.110
把关闭

20:51.110 --> 20:53.110
关闭魔力数据

20:53.110 --> 20:54.110
就完事了

20:54.110 --> 20:55.110
保存了那个

20:55.110 --> 20:57.110
环境变量配置到过后

20:57.110 --> 20:58.110
你得

20:59.110 --> 21:01.110
你得重新启动

21:01.110 --> 21:02.110
要start

21:02.110 --> 21:03.110
在环境面

21:03.110 --> 21:05.110
平时我们也很少去改动环境面

21:06.110 --> 21:07.110
看一下

21:07.110 --> 21:09.110
我们把默克关掉

21:09.110 --> 21:10.110
那么它现在

21:10.110 --> 21:12.110
在魔力所有的魔力数据

21:12.110 --> 21:13.110
全部失效

21:13.110 --> 21:14.110
就没有魔力了

21:15.110 --> 21:16.110
所以我们以后

21:16.110 --> 21:17.110
在这个

21:20.110 --> 21:21.110
最终的时候

21:21.110 --> 21:22.110
我们是要把这个魔力数据

21:22.110 --> 21:23.110
关掉的

21:23.110 --> 21:24.110
你看

21:24.110 --> 21:25.110
现在是不是真实的数据了

21:25.110 --> 21:26.110
对吧

21:26.110 --> 21:27.110
又是真实的数据了

21:28.110 --> 21:30.110
这就是默克这个配置

21:30.110 --> 21:32.110
这是这两个配置

21:33.110 --> 21:34.110
说完了这两个配置

21:34.110 --> 21:35.110
过后我们再说一下

21:35.110 --> 21:36.110
这个配置

21:36.110 --> 21:37.110
5米N

21:38.110 --> 21:39.110
就environment

21:40.110 --> 21:42.110
就是5米的环境

21:42.110 --> 21:43.110
那么这个配置是什么意思呢

21:43.110 --> 21:44.110
这个配置

21:44.110 --> 21:46.110
你可以随便给它付一个值

21:46.110 --> 21:47.110
随便付值

21:47.110 --> 21:49.110
那么这个配置有什么影响呢

21:49.110 --> 21:50.110
这个配置

21:50.110 --> 21:51.110
它最重要的影响

21:51.110 --> 21:53.110
是会影响到那个

21:53.110 --> 21:55.110
5米RC.js

21:56.110 --> 21:57.110
这个配置我说一下

21:57.110 --> 21:59.110
这个配置也蛮有意思的

21:59.110 --> 22:00.110
这是

22:00.110 --> 22:03.110
5米的环境

22:03.110 --> 22:04.110
辨量

22:04.110 --> 22:05.110
值

22:06.110 --> 22:08.110
可以是任意值

22:09.110 --> 22:10.110
该值

22:10.110 --> 22:12.110
会影响到

22:12.110 --> 22:15.110
5米RC.js

22:15.110 --> 22:16.110
会影响到这个配置

22:16.110 --> 22:18.110
就5米RC.js

22:18.110 --> 22:20.110
那么具体什么意思呢

22:20.110 --> 22:22.110
我们得举例子说明

22:22.110 --> 22:23.110
比方说

22:23.110 --> 22:26.110
我们这里给它取一个名字叫做local

22:26.110 --> 22:27.110
随便给它取个名字

22:27.110 --> 22:29.110
abc123都可以

22:29.110 --> 22:31.110
那么取了这个名字之后

22:31.110 --> 22:32.110
你看着

22:32.110 --> 22:33.110
我们之前是不是用过

22:33.110 --> 22:35.110
这个5米RC.js

22:35.110 --> 22:36.110
对吧

22:36.110 --> 22:37.110
是不是用过这个配置

22:37.110 --> 22:38.110
那么现在

22:38.110 --> 22:40.110
在我们这一块

22:40.110 --> 22:41.110
在我们的工程里边

22:41.110 --> 22:43.110
可以再新建一个文件

22:43.110 --> 22:44.110
5米

22:44.110 --> 22:45.110
同样的名字

22:45.110 --> 22:48.110
5米RC.local.js

22:48.110 --> 22:49.110
那么这个local

22:49.110 --> 22:50.110
表示什么意思

22:50.110 --> 22:51.110
它就不对应到这里

22:51.110 --> 22:52.110
它对应到这里的名字

22:52.110 --> 22:54.110
local.js

22:54.110 --> 22:56.110
它对应到这里的名字

22:56.110 --> 22:57.110
那么这个配置

22:57.110 --> 22:59.110
这个配置和这个配置

22:59.110 --> 23:00.110
就这两个文件

23:00.110 --> 23:02.110
你看这两个文件

23:02.110 --> 23:04.110
这两个文件会同时生销

23:04.110 --> 23:05.110
都会生销

23:05.110 --> 23:06.110
为什么

23:06.110 --> 23:07.110
因为这个东西是配置文件

23:07.110 --> 23:08.110
毫无疑问

23:08.110 --> 23:09.110
那么另外一个

23:09.110 --> 23:12.110
是我们5米的环境中的配置

23:12.110 --> 23:14.110
就是加了一个环境的名字

23:14.110 --> 23:15.110
在中间加了个local

23:15.110 --> 23:16.110
对吧

23:16.110 --> 23:17.110
环境的名字叫j

23:17.110 --> 23:18.110
这个配置也会生销

23:18.110 --> 23:20.110
那么到底是谁的优先级高呢

23:20.110 --> 23:22.110
他的优先级高

23:22.110 --> 23:23.110
他为什么要给你

23:23.110 --> 23:25.110
做出这么一个效果出来了

23:25.110 --> 23:27.110
他就说他的里边的配置

23:27.110 --> 23:29.110
会覆盖掉这里边的配置

23:29.110 --> 23:30.110
他为什么要给你

23:30.110 --> 23:31.110
做出这么一个效果呢

23:31.110 --> 23:33.110
是出于这么一个考虑

23:33.110 --> 23:34.110
因为我们的工程

23:34.110 --> 23:36.110
将来是要部署的

23:36.110 --> 23:37.110
在服务器的

23:37.110 --> 23:38.110
真实的环境里边

23:38.110 --> 23:40.110
和我们在

23:40.110 --> 23:41.110
开发的模式里边

23:41.110 --> 23:43.110
是有一些差异的

23:43.110 --> 23:44.110
对吧

23:44.110 --> 23:45.110
是有一些差异的

23:45.110 --> 23:46.110
比方说像这里

23:46.110 --> 23:47.110
像这个代理

23:47.110 --> 23:49.110
这个代理这么一个玩意的话

23:49.110 --> 23:51.110
那么在服务器那一端

23:51.110 --> 23:53.110
在服务器那一端是

23:53.110 --> 23:55.110
不需要的

23:55.110 --> 23:57.110
服务器那一端是不需要代理的

23:57.110 --> 23:59.110
我们只是在本地开发的时候

23:59.110 --> 24:01.110
为了解决跨域的问题

24:01.110 --> 24:02.110
我们才需要代理

24:02.110 --> 24:03.110
所以像这样的配置

24:03.110 --> 24:05.110
应该不要把它放到

24:05.110 --> 24:07.110
服务器的环境中去

24:07.110 --> 24:08.110
当然这个

24:08.110 --> 24:10.110
这个例子也不是很好

24:10.110 --> 24:11.110
因为像这个是

24:11.110 --> 24:12.110
Proxy

24:12.110 --> 24:13.110
这个东西是DevServer的

24:13.110 --> 24:15.110
它本身就不会到服务器

24:15.110 --> 24:16.110
我们就说这么个意思

24:16.110 --> 24:17.110
就是有些配置

24:17.110 --> 24:19.110
可能在不同的环境下面

24:19.110 --> 24:21.110
有不同的有一些差异

24:21.110 --> 24:23.110
那么我们目前处于什么环境呢

24:23.110 --> 24:25.110
目前处于到环境

24:25.110 --> 24:27.110
就可以通过这个配置来进行配置

24:27.110 --> 24:28.110
不要让我给它取个名字

24:28.110 --> 24:30.110
目前的环境是本地环境

24:30.110 --> 24:31.110
本地环境

24:31.110 --> 24:33.110
我们会有一些特有的配置

24:33.110 --> 24:34.110
比方说举个例子

24:34.110 --> 24:36.110
我们只是举个例子

24:36.110 --> 24:38.110
我们把这个复制一下

24:38.110 --> 24:40.110
把放到这边来

24:40.110 --> 24:42.110
这边Planche是不要的

24:42.110 --> 24:43.110
在本地环境里边

24:43.110 --> 24:45.110
我们需要一个Proxy

24:45.110 --> 24:46.110
需要这么一个配置

24:46.110 --> 24:48.110
而在普通的环境里边

24:48.110 --> 24:49.110
就不是本地环境里边

24:49.110 --> 24:51.110
我们可能用不到这个东西

24:51.110 --> 24:52.110
用不到这个东西

24:52.110 --> 24:53.110
你看

24:53.110 --> 24:54.110
那么在这个文件里边

24:54.110 --> 24:55.110
我们就没有Proxy配置了

24:55.110 --> 24:56.110
那么在这边

24:56.110 --> 24:58.110
是不是就有Proxy配置

24:58.110 --> 24:59.110
只是在我们这个环境下边

24:59.110 --> 25:01.110
那么这个配置才会生效

25:01.110 --> 25:02.110
好 这样子的

25:02.110 --> 25:03.110
我们来看一下

25:03.110 --> 25:04.110
重新启动

25:06.110 --> 25:08.110
You're Start

25:08.110 --> 25:09.110
重新启动

25:09.110 --> 25:13.380
就说这样子

25:13.380 --> 25:15.380
你就可以把这个配置相分离

25:15.380 --> 25:16.380
就是你特有的配置

25:16.380 --> 25:18.380
那些到这里

25:18.380 --> 25:20.380
通用的配置那些到这里

25:20.380 --> 25:21.380
好 你看一下

25:21.380 --> 25:22.380
尽管我们现在这边

25:22.380 --> 25:24.380
是不是没有写那个配置

25:24.380 --> 25:26.380
没有写那个就是Proxy配置

25:26.380 --> 25:27.380
那么你看一下

25:27.380 --> 25:29.380
Proxy是否能生效

25:29.380 --> 25:31.380
就是是否能访问到服务器

25:31.380 --> 25:32.380
你看是不是还是访问到了

25:32.380 --> 25:33.380
对吧

25:33.380 --> 25:34.380
为什么

25:34.380 --> 25:36.380
就是因为这个配置生效了

25:36.380 --> 25:38.380
这个配置生效了

25:38.380 --> 25:39.380
原来的意思

25:39.380 --> 25:40.380
OK

25:40.380 --> 25:42.380
这是关于这一块

25:42.380 --> 25:44.380
然后再来

25:46.380 --> 25:47.380
这里的

25:47.380 --> 25:48.380
那么下面

25:48.380 --> 25:49.380
那这里的就差不多讲完了

25:49.380 --> 25:51.380
额外的约定文件

25:51.380 --> 25:52.380
就差不多就这么一些了

25:52.380 --> 25:53.380
好

25:53.380 --> 25:54.380
那么这东西看完了之后

25:54.380 --> 25:55.380
我们再看这个

25:55.380 --> 25:57.380
关于5米的配置

25:57.380 --> 25:59.380
那么这里的配置是写到哪里的

25:59.380 --> 26:00.380
是书写到这里的

26:00.380 --> 26:02.380
书写到

26:02.380 --> 26:05.380
书写在5米

26:05.380 --> 26:07.380
RC.js

26:07.380 --> 26:08.380
前面还有一个点

26:08.380 --> 26:11.380
书写在这个文件中的配置

26:11.380 --> 26:12.380
中的配置

26:12.380 --> 26:13.380
那么之前呢

26:13.380 --> 26:15.380
其实以陆陆续续讲过

26:15.380 --> 26:16.380
里面的一些配置的

26:16.380 --> 26:18.380
就在这个文件里面的一些配置

26:18.380 --> 26:19.380
这个文件里面

26:19.380 --> 26:20.380
好

26:20.380 --> 26:21.380
也讲过一些了

26:21.380 --> 26:23.380
像什么pronging 是对吧

26:23.380 --> 26:25.380
配置什么

26:25.380 --> 26:27.380
配置5米.js的插件

26:27.380 --> 26:29.380
目前那么只需要

26:29.380 --> 26:30.380
它的插件目前也没有那么多

26:30.380 --> 26:32.380
目前就用它官方插件就完全够用了

26:32.380 --> 26:34.380
5米pronging

26:34.380 --> 26:36.380
然后呢这个roads

26:36.380 --> 26:37.380
是配置什么

26:37.380 --> 26:39.380
配置路由

26:39.380 --> 26:40.380
路由

26:40.380 --> 26:41.380
那么这样子

26:41.380 --> 26:42.380
会导致

26:42.380 --> 26:44.380
会导致约定是路由失效

26:45.380 --> 26:47.380
路由失效

26:47.380 --> 26:49.380
如果说你进行了路由的配置的话

26:49.380 --> 26:51.380
那么约定是路由会失效

26:51.380 --> 26:52.380
好history

26:52.380 --> 26:54.380
这个东西没讲过

26:54.380 --> 26:55.380
没讲过

26:55.380 --> 26:56.380
那么history这个东西

26:56.380 --> 26:58.380
它是配置的就是

26:58.380 --> 27:00.380
history的模式

27:00.380 --> 27:03.380
history对象模式

27:03.380 --> 27:04.380
默认

27:04.380 --> 27:06.380
默认是history

27:06.380 --> 27:08.380
默认就是history

27:08.380 --> 27:09.380
默认是

27:09.380 --> 27:11.380
默认好像是browser

27:11.380 --> 27:12.380
browser

27:12.380 --> 27:14.380
查一下吧查一下吧

27:14.380 --> 27:15.380
这个地方我们平时也没怎么配置

27:15.380 --> 27:16.380
也忘了

27:16.380 --> 27:17.380
5米.js

27:17.380 --> 27:18.380
查一下

27:18.380 --> 27:19.380
这里的配置

27:19.380 --> 27:21.380
你看一下这里的history

27:21.380 --> 27:23.380
默认只是browser

27:24.380 --> 27:25.380
那么这里呢

27:25.380 --> 27:26.380
你可以改改成

27:26.380 --> 27:27.380
改成哈希

27:27.380 --> 27:28.380
改成哈希

27:28.380 --> 27:30.380
咱们比方说试一下

27:30.380 --> 27:31.380
在这里边

27:31.380 --> 27:32.380
比方说我们在

27:32.380 --> 27:33.380
本地配置里边

27:33.380 --> 27:34.380
本地配置里边

27:34.380 --> 27:35.380
回来的这里都行

27:35.380 --> 27:36.380
这里

27:36.380 --> 27:38.380
我们把history

27:38.380 --> 27:39.380
改成哈希

27:39.380 --> 27:41.380
改成哈希

27:42.380 --> 27:47.100
咱们再重新启动一次

27:48.100 --> 27:49.100
看一下

27:49.100 --> 27:50.100
那么现在的路由

27:50.100 --> 27:51.100
它就变成哈希路由了

27:51.100 --> 27:53.100
变成哈希式的路由

27:53.100 --> 27:57.700
稍等一下

27:57.700 --> 27:58.700
也说这里边

27:58.700 --> 27:59.700
我们还可以写

27:59.700 --> 28:01.700
各种各样的配置

28:01.700 --> 28:09.300
等一下

28:09.300 --> 28:10.300
出来了

28:10.300 --> 28:11.300
那么现在你看

28:11.300 --> 28:12.300
是不是哈希路由

28:12.300 --> 28:13.300
对吧学生

28:13.300 --> 28:14.300
天家学生

28:14.300 --> 28:15.300
对吧

28:15.300 --> 28:16.300
你看是不是哈希路由了

28:16.300 --> 28:18.300
变成哈希路由了

28:22.820 --> 28:23.820
点击

28:23.820 --> 28:24.820
天家学生

28:24.820 --> 28:25.820
所以哈希路由了

28:25.820 --> 28:26.820
对吧

28:26.820 --> 28:27.820
这是history

28:27.820 --> 28:28.820
那么下面这个

28:28.820 --> 28:30.820
output pass

28:30.820 --> 28:31.820
这个东西是什么呢

28:31.820 --> 28:32.820
就是

28:32.820 --> 28:33.820
使用

28:33.820 --> 28:35.820
無米

28:35.820 --> 28:36.820
build

28:36.820 --> 28:37.820
後

28:37.820 --> 28:40.820
打包的目录名称

28:40.820 --> 28:41.820
打包的目录名称

28:41.820 --> 28:42.820
就是输出的目录名称

28:42.820 --> 28:43.820
这个东西

28:43.820 --> 28:44.820
跟webpack很相似

28:44.820 --> 28:45.820
对吧

28:45.820 --> 28:46.820
因为我们

28:46.820 --> 28:47.820
之前在最开始

28:47.820 --> 28:48.820
讲无米的时候

28:48.820 --> 28:49.820
无米不是提供了

28:49.820 --> 28:50.820
两个命令吗

28:50.820 --> 28:51.820
一个是无米dev

28:51.820 --> 28:52.820
开发模式启动

28:52.820 --> 28:54.820
一个是构建模式

28:54.820 --> 28:55.820
构建成就部署

28:55.820 --> 28:56.820
打包

28:56.820 --> 28:57.820
那么打包的

28:57.820 --> 28:58.820
默认目录是什么

28:58.820 --> 28:59.820
默认目录是dist

28:59.820 --> 29:00.820
默认

29:02.820 --> 29:04.820
默认是dist的目录

29:04.820 --> 29:05.820
那么这个

29:05.820 --> 29:06.820
能不能改呢

29:06.820 --> 29:07.820
可以改

29:07.820 --> 29:08.820
当然改这东西意义也不大

29:08.820 --> 29:09.820
也不大

29:09.820 --> 29:10.820
我们改一下吧

29:10.820 --> 29:12.820
好来改一下吧

29:12.820 --> 29:13.820
output pass

29:13.820 --> 29:14.820
比方说

29:15.820 --> 29:16.820
改成什么

29:16.820 --> 29:17.820
out

29:18.820 --> 29:20.820
保存

29:20.820 --> 29:21.820
现在我们停止

29:21.820 --> 29:23.820
现在我们运行

29:23.820 --> 29:25.820
压build

29:25.820 --> 29:26.820
对吧

29:26.820 --> 29:27.820
运行压build

29:27.820 --> 29:29.820
是不是就是运行无米build

29:29.820 --> 29:30.820
对吧

29:30.820 --> 29:31.820
就是运行无米build

29:31.820 --> 29:32.820
你看一下

29:32.820 --> 29:33.820
再运行

29:35.820 --> 29:36.820
再打包

29:36.820 --> 29:38.820
最终我们要部署的时候

29:38.820 --> 29:39.820
我们才会打包

29:39.820 --> 29:40.820
可能我们在

29:40.820 --> 29:42.820
讲这个过程的时候

29:42.820 --> 29:43.820
部署这一块

29:43.820 --> 29:44.820
可能讲的比较少

29:44.820 --> 29:45.820
是因为大家

29:45.820 --> 29:47.820
还没有服务器相关的知识

29:47.820 --> 29:48.820
等你们有了

29:48.820 --> 29:49.820
服务器相关的知识的话

29:49.820 --> 29:50.820
部署这一块就很简单了

29:50.820 --> 29:54.650
给大家过一下就完事了

29:54.650 --> 29:55.650
好打包

29:55.650 --> 29:57.650
你看是不是到out的目录了

29:57.650 --> 29:58.650
对吧

29:58.650 --> 30:00.650
这是英德克斯文的文件

30:00.650 --> 30:01.650
这是摩曼文件

30:01.650 --> 30:02.650
这是CSS文件

30:02.650 --> 30:03.650
这是GSS文件

30:03.650 --> 30:04.650
对吧

30:04.650 --> 30:05.650
所以到了这个目录下面去了

30:05.650 --> 30:06.650
对吧

30:06.650 --> 30:07.650
OK

30:07.650 --> 30:08.650
这是关于这一块

30:09.650 --> 30:10.650
好

30:10.650 --> 30:11.650
再看看

30:11.650 --> 30:12.650
还有什么配置

30:12.650 --> 30:13.650
还有什么配置

30:13.650 --> 30:14.650
好base

30:14.650 --> 30:15.650
base是什么意思呢

30:15.650 --> 30:17.650
base指的是

30:18.650 --> 30:20.650
相当于

30:20.650 --> 30:22.650
之前那个东西叫做

30:22.650 --> 30:24.650
browser

30:24.650 --> 30:26.650
browser

30:26.650 --> 30:28.650
中的

30:28.650 --> 30:30.650
base net

30:30.650 --> 30:31.650
相当于是这个

30:31.650 --> 30:32.650
还记得吗

30:32.650 --> 30:33.650
就是路由这里

30:33.650 --> 30:34.650
可能有一些击路径

30:34.650 --> 30:35.650
就是我们的路径

30:35.650 --> 30:36.650
比方说

30:36.650 --> 30:37.650
我们有这么一些路径

30:37.650 --> 30:38.650
首业

30:38.650 --> 30:39.650
学生业

30:39.650 --> 30:40.650
对吧

30:40.650 --> 30:42.650
还有什么学生添加业

30:42.650 --> 30:43.650
那么其实这些路径

30:43.650 --> 30:44.650
如果

30:44.650 --> 30:45.650
就是有可能会出现这种情况

30:45.650 --> 30:46.650
这些路径

30:46.650 --> 30:48.650
全部前面有一个基地字

30:48.650 --> 30:49.650
比方说abc

30:49.650 --> 30:51.650
前面全面都有一个abc

30:51.650 --> 30:53.650
那么如果说遇到这种情况

30:53.650 --> 30:55.650
这个东西也跟部署有关系

30:55.650 --> 30:56.650
也跟部署有关系

30:56.650 --> 30:58.650
如果说遇到这种情况的话

30:58.650 --> 30:59.650
我们需要添加这个base配置

30:59.650 --> 31:00.650
好

31:00.650 --> 31:01.650
来吧

31:01.650 --> 31:02.650
我们来写一个

31:04.650 --> 31:05.650
base

31:05.650 --> 31:06.650
比方说

31:08.650 --> 31:10.650
比方说abc

31:10.650 --> 31:11.650
abc

31:11.650 --> 31:12.650
有这么一个路径

31:12.650 --> 31:13.650
baseabc

31:13.650 --> 31:14.650
好

31:14.650 --> 31:15.650
咱们来启动一下

31:16.650 --> 31:17.650
启动一下

31:18.650 --> 31:19.650
你会发现

31:19.650 --> 31:20.650
所有的路径前面

31:20.650 --> 31:21.650
都加了一个基路径

31:21.650 --> 31:22.650
abc

31:27.600 --> 31:30.680
它就每次启动起来

31:30.680 --> 31:32.680
第一次启动的时候稍微慢一点

31:32.680 --> 31:34.680
不过我们在我们真实的开发中

31:34.680 --> 31:35.680
也不会经常做启动

31:35.680 --> 31:36.680
对吧

31:36.680 --> 31:37.680
好

31:37.680 --> 31:38.680
你看

31:38.680 --> 31:39.680
是不是加了一个abc在前面

31:39.680 --> 31:40.680
对吧

31:40.680 --> 31:41.680
学生查学

31:41.680 --> 31:42.680
你看

31:42.680 --> 31:43.680
是不是都加了abc

31:43.680 --> 31:44.680
对吧

31:44.680 --> 31:45.680
都加了abc

31:45.680 --> 31:46.680
只不过

31:46.680 --> 31:47.680
我们这里

31:47.680 --> 31:49.680
把这个history去掉

31:49.680 --> 31:50.680
看着更加清楚一点

31:50.680 --> 31:52.680
其实也不用再看了

31:52.680 --> 31:54.680
明白是怎么回事了

31:54.680 --> 31:55.680
start

31:55.680 --> 31:57.680
再重新启动一次

31:57.680 --> 31:59.680
我们寄往后面看

31:59.680 --> 32:01.680
然后这个public pass

32:01.680 --> 32:03.680
public pass是什么意思呢

32:03.680 --> 32:06.680
就是我们之前用react的时候

32:06.680 --> 32:09.680
用react官方角色下的时候

32:09.680 --> 32:11.680
不是有一个public pass吗

32:11.680 --> 32:12.680
对不对

32:12.680 --> 32:14.680
就有一个public pass

32:14.680 --> 32:15.680
那么这里边

32:15.680 --> 32:17.680
它可以在一些静态资源

32:17.680 --> 32:18.680
就是会远风不动的

32:18.680 --> 32:20.680
放到输出目录的一些资源

32:20.680 --> 32:21.680
那么像这些资源

32:21.680 --> 32:23.680
我们就可以在这里进行指定

32:23.680 --> 32:25.680
在这里指定它的目录

32:25.680 --> 32:29.680
那么就是指定静态资源

32:29.680 --> 32:31.680
所在的目录

32:31.680 --> 32:33.680
静态资源所在的目录

32:33.680 --> 32:34.680
比方说

32:34.680 --> 32:35.680
举个例子

32:35.680 --> 32:36.680
又来举个例子

32:36.680 --> 32:38.680
比方说我们这里

32:38.680 --> 32:39.680
新建一个文链甲

32:39.680 --> 32:40.680
就叫做public

32:40.680 --> 32:41.680
public

32:41.680 --> 32:42.680
那么我们这里

32:42.680 --> 32:43.680
书写上

32:43.680 --> 32:45.680
你看一下刚才的abc

32:45.680 --> 32:47.680
所以所有的例子都有abc了

32:47.680 --> 32:48.680
对吧

32:48.680 --> 32:51.680
然后我们在这里

32:51.680 --> 32:52.680
public里面加个啥呢

32:52.680 --> 32:53.680
我们加个这个东西

32:53.680 --> 32:59.680
我们把5 icon加进去

32:59.680 --> 33:03.680
然后我再来打包试一下

33:03.680 --> 33:04.680
咱们先打包试一下

33:04.680 --> 33:05.680
直接打包

33:05.680 --> 33:10.460
直接打包试一下

33:10.460 --> 33:11.460
我们这里还要配置一下

33:11.460 --> 33:13.460
配置

33:14.460 --> 33:20.460
public pass

33:20.460 --> 33:21.460
来自于哪呢

33:21.460 --> 33:23.460
在public这个目录下面

33:23.460 --> 33:25.460
在这个目录下面

33:25.460 --> 33:26.460
来吧

33:26.460 --> 33:27.460
我们来看一下

33:27.460 --> 33:29.460
public pass

33:29.460 --> 33:30.460
对了的

33:30.460 --> 33:32.460
我们把它放到这个目录下面

33:32.460 --> 33:35.460
然后我们现在打包试一下

33:35.460 --> 33:37.460
er build

33:37.460 --> 33:39.460
稍等一会儿

33:39.460 --> 33:40.460
我们来看一下

33:40.460 --> 33:41.460
其实这个目录里面

33:41.460 --> 33:42.460
所有的静态资源

33:42.460 --> 33:43.460
就这个目录的下面东西

33:43.460 --> 33:44.460
它就会远风不动的

33:44.460 --> 33:46.460
放到输出

33:46.460 --> 33:48.460
怎么了

33:48.460 --> 33:49.460
怎么了

33:49.460 --> 33:51.460
哪里写错

33:51.460 --> 33:53.460
这里目录找不到

33:53.460 --> 33:55.460
public写错了

33:55.460 --> 33:59.970
好 重新打包

33:59.970 --> 34:00.970
那么这个目录下面

34:00.970 --> 34:02.970
所有的静态资源

34:02.970 --> 34:04.970
它会远风不动的

34:04.970 --> 34:06.970
是吧

34:06.970 --> 34:08.970
public教验失败

34:08.970 --> 34:10.970
public pass

34:10.970 --> 34:12.970
config mass interest

34:12.970 --> 34:14.970
它必须有后面最重要的

34:14.970 --> 34:16.970
public写纲

34:16.970 --> 34:18.970
重新再打包

34:18.970 --> 34:19.970
你再说

34:19.970 --> 34:20.970
你给我再说

34:20.970 --> 34:24.410
它不敢了

34:24.410 --> 34:26.410
稍等一会儿

34:28.410 --> 34:30.410
打包打包

34:30.410 --> 34:32.410
咱们主要看一下这个目录

34:32.410 --> 34:36.230
我以为它又错了

34:36.230 --> 34:38.230
吓死我了

34:38.230 --> 34:40.230
下面真的打包

34:40.230 --> 34:42.230
alzm都给删掉了

34:42.230 --> 34:44.230
重新打包

34:44.230 --> 34:45.230
打包完成

34:45.230 --> 34:46.230
你看一下

34:46.230 --> 34:48.230
这个文件是不是直接过来了

34:48.230 --> 34:49.230
是不是直接过来了

34:49.230 --> 34:51.230
对吧 直接过来了

34:51.230 --> 34:52.230
那么这样子

34:52.230 --> 34:54.230
我们就可以在模板文件里边

34:54.230 --> 34:56.230
是不是把5 icon加上

34:56.230 --> 34:57.230
对吧

34:57.230 --> 34:59.230
就跟之前在这边是一样的

34:59.230 --> 35:01.230
我们可以把5 icon加上

35:01.230 --> 35:06.060
加上在这里

35:06.060 --> 35:08.060
在这个配级室

35:08.060 --> 35:09.060
这里边

35:09.060 --> 35:11.060
加上一个meta

35:13.060 --> 35:15.060
把这个加上去玩手

35:15.060 --> 35:16.060
好

35:16.060 --> 35:18.060
那么现在我们来看一下

35:18.060 --> 35:19.060
我们在运行

35:19.060 --> 35:20.060
要start

35:20.060 --> 35:21.060
运行

35:21.060 --> 35:23.060
那么由于有这个public的存在

35:23.060 --> 35:25.060
所以说我们这个5 icon

35:25.060 --> 35:26.060
是不是可以直接加进去了

35:26.060 --> 35:27.060
就静态资源

35:27.060 --> 35:29.060
静态资源我们就可以

35:29.060 --> 35:30.060
就是存

35:30.060 --> 35:31.060
这个静态资源还不是说

35:31.060 --> 35:33.060
我们之前说的什么CSS

35:33.060 --> 35:34.060
指的是

35:34.060 --> 35:37.060
那些连什么文件名字

35:37.060 --> 35:40.060
都不会发生任何变化的这种资源

35:40.060 --> 35:41.060
它不是

35:41.060 --> 35:43.060
就说你们之前学过vpec

35:43.060 --> 35:45.060
它不存在依赖关系

35:45.060 --> 35:46.060
这样的一种资源

35:46.060 --> 35:47.060
不是静态资源

35:47.060 --> 35:49.060
咱们来看一下

35:49.060 --> 35:51.060
我们的页面

35:51.060 --> 35:53.060
我们得把前序取消掉

35:53.060 --> 35:55.060
前序取消掉

35:55.060 --> 35:58.070
这里刷新一次

35:58.070 --> 35:59.070
直接刷新一次

35:59.070 --> 36:00.070
出不来

36:00.070 --> 36:02.070
我们直接放文了

36:02.070 --> 36:04.070
5 icon

36:05.070 --> 36:07.380
是不是能放文到了

36:07.380 --> 36:09.380
这个地方已经能放文到了

36:09.380 --> 36:10.380
已经能放文到了

36:10.380 --> 36:12.380
然后这里还没出来

36:12.380 --> 36:14.380
没出来我们看一下这个路径呢

36:14.380 --> 36:16.380
明白了

36:16.380 --> 36:17.380
能放文到了

36:17.380 --> 36:18.380
能放文到了

36:18.380 --> 36:20.380
然后我们要强制刷新一下

36:20.380 --> 36:24.720
control加shift

36:24.720 --> 36:25.720
你看出不出来了

36:25.720 --> 36:26.720
对吧

36:26.720 --> 36:28.720
我们的图标就出来了

36:28.720 --> 36:29.720
像这些东西

36:29.720 --> 36:31.720
我们就可以放到静态资源

36:31.720 --> 36:32.720
存静态资源

36:32.720 --> 36:34.720
我们就可以放到5 icon里面

36:34.720 --> 36:35.720
放到public里面

36:35.720 --> 36:37.720
当然我们要进行一下配置

36:37.720 --> 36:38.720
好

36:38.720 --> 36:39.720
下面这个

36:39.720 --> 36:40.720
下面一个配置

36:40.720 --> 36:42.720
export static

36:42.720 --> 36:43.720
比较有意思

36:43.720 --> 36:45.720
这个配置我们不太会用得到了

36:45.720 --> 36:46.720
了解一下

36:46.720 --> 36:47.720
有这么个东西就行了

36:47.720 --> 36:48.720
因为我们以前在学习

36:48.720 --> 36:49.720
wepack的时候

36:49.720 --> 36:51.720
是不是学过那个多页面配置

36:51.720 --> 36:52.720
对吧

36:52.720 --> 36:53.720
配置多页面

36:53.720 --> 36:54.720
当然单页应用程序呢

36:54.720 --> 36:56.720
我们是我们最常见的场景

36:56.720 --> 36:57.720
但是也不排除

36:57.720 --> 36:59.720
可能会有多页面配置的时候

36:59.720 --> 37:01.720
那如果说要做多页面的话

37:01.720 --> 37:02.720
也需要把这个配置开启

37:02.720 --> 37:03.720
export static

37:03.720 --> 37:04.720
那么这样子的

37:04.720 --> 37:06.720
开启该配置之后

37:06.720 --> 37:10.720
开启该配置后

37:10.720 --> 37:13.720
打包的

37:13.720 --> 37:16.720
打包的页面

37:16.720 --> 37:18.720
会打包多页面

37:18.720 --> 37:20.720
会打包

37:20.720 --> 37:22.720
成

37:22.720 --> 37:24.720
多个页面

37:24.720 --> 37:26.720
每个页面

37:26.720 --> 37:28.720
每个页面

37:28.720 --> 37:31.720
对应一个路由

37:31.720 --> 37:33.720
它会形成这么一种模式

37:33.720 --> 37:34.720
怎么来开启呢

37:34.720 --> 37:35.720
非常简单

37:35.720 --> 37:37.720
我们在这里

37:37.720 --> 37:38.720
开启

37:38.720 --> 37:41.720
叫做export static

37:41.720 --> 37:42.720
basko true

37:42.720 --> 37:43.720
但是要注意一下

37:43.720 --> 37:45.720
这样子你开启的过后

37:45.720 --> 37:47.720
它有一个前提条件

37:47.720 --> 37:53.720
开启多页面

37:53.720 --> 37:59.720
应用的前提条件是

37:59.720 --> 38:01.720
这个应该不能说多个页面

38:01.720 --> 38:03.720
不应该说多页面应用

38:03.720 --> 38:05.720
应该是静态一面应用

38:05.720 --> 38:06.720
开启开配之后

38:06.720 --> 38:08.720
打包多个静态页面

38:08.720 --> 38:09.720
每个静态页面

38:09.720 --> 38:10.720
对应一个路由

38:10.720 --> 38:12.720
开启多静态页面

38:12.720 --> 38:14.720
应用的前提条件是

38:15.720 --> 38:17.720
没有动态路由

38:17.720 --> 38:18.720
就不能有动态路由了

38:18.720 --> 38:20.720
因为相当于每个页面

38:20.720 --> 38:21.720
是静态的

38:21.720 --> 38:22.720
是完全静态的

38:22.720 --> 38:24.720
所以说你这里

38:24.720 --> 38:27.720
在src里面

38:27.720 --> 38:28.720
它这里爆出了

38:28.720 --> 38:30.720
爆出的原因就是在这里

38:30.720 --> 38:31.720
在student里面

38:31.720 --> 38:32.720
不是一个静态路由

38:32.720 --> 38:33.720
动态路由吗

38:33.720 --> 38:34.720
这东西不能要了

38:34.720 --> 38:35.720
不能要了

38:35.720 --> 38:37.720
现在我们再来打包

38:37.720 --> 38:39.720
ear build

38:39.720 --> 38:42.100
看一下吧

38:42.100 --> 38:43.100
先打包

38:43.100 --> 38:45.100
你会发现有一些差异

38:45.100 --> 38:49.070
稍等一下

38:49.070 --> 38:50.070
虽然说这个配置

38:50.070 --> 38:51.070
我们平常也不怎么用

38:51.070 --> 38:53.070
也不会用的

38:53.070 --> 38:54.070
这样的配置光这样的配置

38:54.070 --> 38:55.070
还不行

38:55.070 --> 38:57.070
很多的联动

38:57.070 --> 38:59.070
跟服务器相关的

38:59.070 --> 39:01.070
这个东西

39:01.070 --> 39:03.070
现在就不好讲了

39:03.070 --> 39:04.070
打包完成

39:04.070 --> 39:05.070
你看一下

39:05.070 --> 39:06.070
那么现在就是我们的

39:06.070 --> 39:07.070
首页在这

39:07.070 --> 39:09.070
我们的学生首页在这

39:09.070 --> 39:10.070
登陆页在这

39:10.070 --> 39:12.070
添加写生在这

39:12.070 --> 39:14.070
变成这样子了

39:14.070 --> 39:16.070
每一个功能是一个页面

39:16.070 --> 39:17.070
每一个功能是一个页面

39:17.070 --> 39:20.070
变成这样的一种模式了

39:20.070 --> 39:21.070
好了

39:21.070 --> 39:23.070
这是关于这一块

39:23.070 --> 39:26.070
其他的

39:26.070 --> 39:28.070
已经没少了

39:28.070 --> 39:29.070
其他的其实还有很多配置

39:29.070 --> 39:30.070
不过很多配置

39:30.070 --> 39:31.070
我们都用不到

39:31.070 --> 39:32.070
都用不到

39:32.070 --> 39:33.070
还没下面就是

39:33.070 --> 39:35.070
webpack的配置

39:35.070 --> 39:36.070
就说因为无蜜GS

39:36.070 --> 39:37.070
它本身

39:37.070 --> 39:39.070
底层是基于webpack来写的

39:39.070 --> 39:40.070
所以说它可以

39:40.070 --> 39:41.070
它提供了很多

39:41.070 --> 39:43.070
对webpack的扩展的配置

39:43.070 --> 39:44.070
那么这个配置

39:44.070 --> 39:45.070
大家看一下吧

39:46.070 --> 39:47.070
这个配置

39:47.070 --> 39:48.070
我们这里往下找

39:48.070 --> 39:49.070
前面就是基本配置

39:49.070 --> 39:51.070
就是无蜜GS本身的配置

39:51.070 --> 39:53.070
你看哈西

39:53.070 --> 39:55.070
public pass

39:55.070 --> 39:56.070
output pass

39:56.070 --> 39:57.070
history

39:57.070 --> 39:58.070
这些配置

39:58.070 --> 39:59.070
然后下面还有

39:59.070 --> 40:00.070
基于webpack的配置

40:00.070 --> 40:01.070
咱们看一下吧

40:01.070 --> 40:03.070
有哪些我们以前见过的

40:03.070 --> 40:04.070
alias

40:04.070 --> 40:05.070
说见过的

40:05.070 --> 40:06.070
对吧

40:06.070 --> 40:07.070
那个配置是咋

40:07.070 --> 40:08.070
配置的我们的

40:08.070 --> 40:10.070
就是代码基督径

40:10.070 --> 40:11.070
配置的我们就是一些

40:11.070 --> 40:12.070
连接服

40:12.070 --> 40:13.070
比方说

40:13.070 --> 40:14.070
它这里就有一个

40:14.070 --> 40:15.070
默认配置

40:16.070 --> 40:17.070
为什么我们的at

40:17.070 --> 40:19.070
它表示的是src目录

40:19.070 --> 40:20.070
为什么呢

40:20.070 --> 40:22.070
就是因为它配置了alias

40:22.070 --> 40:24.070
那么这个alias

40:24.070 --> 40:25.070
它就把这个at

40:25.070 --> 40:27.070
把这个at的符号

40:27.070 --> 40:29.070
对应到src目录

40:29.070 --> 40:30.070
就这么个意思

40:30.070 --> 40:31.070
你们以前学的

40:31.070 --> 40:32.070
webpack的时候

40:32.070 --> 40:33.070
应该学过

40:33.070 --> 40:34.070
然后devserver

40:34.070 --> 40:35.070
传于devserver的配置

40:35.070 --> 40:36.070
它都没有写了

40:36.070 --> 40:37.070
它这个文档写的

40:37.070 --> 40:38.070
非常非常简洁

40:38.070 --> 40:39.070
因为它这里面就是

40:39.070 --> 40:40.070
关于这个webpack的

40:40.070 --> 40:41.070
devserver的配置

40:41.070 --> 40:42.070
你配置完事了

40:42.070 --> 40:43.070
现在没啥了

40:43.070 --> 40:44.070
没啥了

40:44.070 --> 40:45.070
还有什么proxy

40:45.070 --> 40:46.070
对吧

40:46.070 --> 40:47.070
这是devserver里边的

40:47.070 --> 40:48.070
proxy的配置

40:48.070 --> 40:49.070
你看

40:49.070 --> 40:50.070
是基于webpack

40:50.070 --> 40:51.070
devserver的proxy配置

40:52.070 --> 40:53.070
还有什么呢

40:53.070 --> 40:54.070
还有就是关于

40:54.070 --> 40:55.070
loadsus的配置

40:55.070 --> 40:56.070
这些都是

40:56.070 --> 40:58.070
基于webpack里边的东西

40:58.070 --> 40:59.070
cssloader的配置

40:59.070 --> 41:00.070
这些东西

41:01.070 --> 41:02.070
就没什么好说的了

41:02.070 --> 41:03.070
browser list

41:03.070 --> 41:04.070
browser list的配置

41:04.070 --> 41:05.070
就这么一些

41:06.070 --> 41:07.070
OK

41:07.070 --> 41:09.070
那么这是关于

41:09.070 --> 41:10.070
无密接触的配置

41:10.070 --> 41:11.070
其实无密接触的配置

41:11.070 --> 41:12.070
整体上就这么三块

41:12.070 --> 41:14.070
一个是约定式的

41:14.070 --> 41:15.070
文件里边的配置

41:15.070 --> 41:16.070
约定式的文件

41:16.070 --> 41:17.070
什么n5啊

41:17.070 --> 41:18.070
环境辨量的配置

41:18.070 --> 41:19.070
对吧

41:19.070 --> 41:20.070
还有global.js

41:20.070 --> 41:21.070
app.js

41:21.070 --> 41:22.070
这些配置

41:22.070 --> 41:23.070
还有就是无密rc

41:23.070 --> 41:25.070
无密rc里边的配置呢

41:25.070 --> 41:26.070
它又分为两部分

41:26.070 --> 41:27.070
这里其实我们

41:27.070 --> 41:29.070
把总结的目录的话就是

41:29.070 --> 41:31.070
无密rc配置

41:31.070 --> 41:33.070
在这个配置文件中的配置

41:33.070 --> 41:34.070
那么它又分为两个部分

41:34.070 --> 41:35.070
一个是本身

41:35.070 --> 41:36.070
基于无密的配置

41:36.070 --> 41:38.070
基于webpack的配置

41:38.070 --> 41:39.070
其他就没有什么配置了

41:39.070 --> 41:41.070
而我们平时使用

41:41.070 --> 41:42.070
无密接触的时候

41:42.070 --> 41:43.070
更多的时候是不写配置

41:43.070 --> 41:45.070
就用它的约定

41:45.070 --> 41:47.070
就已经能够解决

41:47.070 --> 41:48.070
绝大部分问题了

41:48.070 --> 41:50.070
要写配置的话

41:50.070 --> 41:52.070
这种情况都是非常特殊的情况

41:52.070 --> 41:54.070
我这一刻只是要告诉大家

41:54.070 --> 41:56.070
无密接触是可以配置的

41:56.070 --> 41:57.070
在哪些文件里边

41:57.070 --> 41:58.070
可以进行配置

41:58.070 --> 41:59.070
各配置的

41:59.070 --> 42:01.070
又是哪些方面的事情

42:01.070 --> 42:03.070
主要是做这么大概的介绍

42:03.070 --> 42:04.070
如果说你以后

42:04.070 --> 42:05.070
在公司里面遇到了

42:05.070 --> 42:07.070
非常特殊的场景

42:07.070 --> 42:08.070
那么请参与相关的文档

42:08.070 --> 42:09.070
因为教程的话

42:09.070 --> 42:10.070
是没有办法把

42:10.070 --> 42:11.070
每一个API

42:11.070 --> 42:12.070
全部讲完的

42:12.070 --> 42:13.070
这是做不到的

42:13.070 --> 42:14.070
好吧

42:14.070 --> 42:15.070
OK

42:15.070 --> 42:16.070
那么这是关于

42:16.070 --> 42:18.070
无密配置这一块的知识

