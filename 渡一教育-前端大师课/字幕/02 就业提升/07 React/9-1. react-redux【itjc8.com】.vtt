WEBVTT

00:01.070 --> 00:05.070
好自此我们已经学习了三个东西了

00:05.070 --> 00:07.070
全家同里边最重要的三个东西

00:07.070 --> 00:10.070
一个是react

00:10.070 --> 00:13.070
一个是react rotor

00:13.070 --> 00:15.070
还有一个就是reduct

00:15.070 --> 00:17.070
这么三个东西

00:17.070 --> 00:20.070
咱们来总结一下这三个东西用来干嘛的呢

00:20.070 --> 00:22.070
第一个是react

00:22.070 --> 00:23.070
它用来做什么呢

00:23.070 --> 00:25.070
它是一个UI的解决方案

00:25.070 --> 00:27.070
它并非给你说

00:27.070 --> 00:29.070
并非说它可以提供一个UI界面

00:29.070 --> 00:31.070
它不可以给你提供任何一个UI界面

00:31.070 --> 00:33.070
只是能让你

00:33.070 --> 00:36.070
它给了你一种处理UI复杂度的一种方式

00:36.070 --> 00:38.070
比方说用主键化

00:38.070 --> 00:40.070
单项者数据流

00:40.070 --> 00:42.070
它给你提供了这么一种方式

00:42.070 --> 00:45.070
让你来处理这个UI界面

00:45.070 --> 00:47.070
所以说react它是一种

00:47.070 --> 00:52.070
主键化的UI界面

00:52.070 --> 00:55.070
界面处理方案

00:55.070 --> 00:57.070
就是说你在

00:57.070 --> 00:59.070
网页中一块一块的东西

00:59.070 --> 01:01.070
你可以把它分成一个一个的主键

01:01.070 --> 01:02.070
然后每个主键

01:02.070 --> 01:05.070
根据数据来显示自己的UI界面

01:05.070 --> 01:07.070
这是react做的事情

01:07.070 --> 01:10.070
它本身并没有处理数据的复杂度

01:10.070 --> 01:12.070
数据的复杂度

01:12.070 --> 01:15.070
是交给其他的第三方来进行处理的

01:15.070 --> 01:17.070
这是react做的事情

01:17.070 --> 01:18.070
所以说我们如果说

01:18.070 --> 01:19.070
没有学习什么rot

01:19.070 --> 01:21.070
没有学习reduct

01:21.070 --> 01:22.070
react来做什么

01:22.070 --> 01:24.070
react就是来画UI界面的

01:24.070 --> 01:27.070
可以用它来画的一个UI界面出来

01:27.070 --> 01:28.070
react is rotor

01:28.070 --> 01:29.070
它又做什么事情呢

01:29.070 --> 01:31.070
react is rotor的话

01:31.070 --> 01:33.070
它做的事情就是处理路由

01:33.070 --> 01:36.070
比方说根据地址来匹配不同的路由

01:36.070 --> 01:39.070
它主要做的事情是根据地址

01:39.070 --> 01:40.070
这个地址哪来的

01:40.070 --> 01:41.070
有可能是history

01:41.070 --> 01:42.070
有可能是哈希

01:42.070 --> 01:45.070
有可能来自于内存里边的一个地址

01:45.070 --> 01:46.070
无所谓

01:46.070 --> 01:48.070
总之那里给它一个地址

01:48.070 --> 01:50.070
它最终会把它进行匹配

01:50.070 --> 01:51.070
匹配到不同的主键

01:51.070 --> 01:52.070
根据地址

01:52.070 --> 01:54.070
匹配路由

01:54.070 --> 01:58.070
最终渲染不同的主键

01:58.070 --> 02:00.070
这就是react is rotor

02:00.070 --> 02:01.070
它所做的事情

02:01.070 --> 02:02.070
好

02:02.070 --> 02:03.070
react is做什么事情呢

02:03.070 --> 02:04.070
react is

02:04.070 --> 02:07.070
它做的事情就是处理数据复杂度

02:07.070 --> 02:13.070
处理数据以及数据变化的方案

02:13.070 --> 02:15.070
那么react is里面

02:15.070 --> 02:16.070
我们之前也说

02:16.070 --> 02:18.070
react is主要的作用

02:18.070 --> 02:20.070
是为了处理那种共享数据

02:20.070 --> 02:21.070
就是这个主键要用

02:21.070 --> 02:24.070
另外一个主键也会受到这个数据的影响

02:24.070 --> 02:25.070
不管用不用这个数据

02:25.070 --> 02:27.070
它总之最终还可能间接

02:27.070 --> 02:31.070
或者是直接的受到了这种数据的影响

02:31.070 --> 02:33.070
那么我们把这些数据叫做共享数据

02:33.070 --> 02:36.070
它主要是用于处理共享数据的

02:36.070 --> 02:41.070
主要用于处理共享数据的

02:41.070 --> 02:44.070
那么其实有一些比较复杂的数据的话

02:44.070 --> 02:47.070
你其实也可以用react来处理

02:47.070 --> 02:48.070
只不过更多的时候

02:48.070 --> 02:49.070
我们来处理共享数据的

02:50.070 --> 02:51.070
其实我们网站中

02:51.070 --> 02:53.070
其实很多数据都是共享的

02:53.070 --> 02:55.070
不一定是这个主键用了

02:55.070 --> 02:57.070
其他主键就绝对不会用

02:57.070 --> 02:59.070
很多数据它其实都是共享的

02:59.070 --> 03:02.070
所以很多的数据都会放到react室里面

03:02.070 --> 03:03.070
但是不是所有

03:03.070 --> 03:05.070
比方说有一些数据

03:05.070 --> 03:10.070
比方说我们要做搜控组建

03:10.070 --> 03:12.070
搜控组建里面是不是得有状态

03:12.070 --> 03:13.070
那么那个数据

03:13.070 --> 03:14.070
你没有必要放到react室

03:14.070 --> 03:18.070
那个数据就是在搜控组建里面

03:18.070 --> 03:20.070
去临时用一下

03:20.070 --> 03:23.070
临时用一下比方表达的一些临时数据

03:23.070 --> 03:24.070
那么这些数据

03:24.070 --> 03:27.070
实际上是没有必要放到react室里面的

03:27.070 --> 03:29.070
总之react室它不是处理

03:29.070 --> 03:31.070
不是说处理所有数据

03:31.070 --> 03:35.070
而是更重要的是处理那些共享的数据

03:35.070 --> 03:37.070
这是关于这三个东西

03:37.070 --> 03:39.070
他们各自的用处

03:39.070 --> 03:41.070
那么周一章节我们讲啥呢

03:41.070 --> 03:44.070
周一章节咱们来讲的东西

03:44.070 --> 03:47.070
就是react室跟react室如何来结合

03:47.070 --> 03:50.070
react室又跟rotor来如何结合

03:50.070 --> 03:52.070
因为react室和rotor之间

03:52.070 --> 03:53.070
我们已经讲过了

03:53.070 --> 03:55.070
因为react室rotor本身

03:55.070 --> 03:57.070
就跟天生是跟react室相关联的

03:57.070 --> 03:58.070
但是react室

03:58.070 --> 04:01.070
它跟其他两个东西是没关系的

04:01.070 --> 04:04.070
这个react室跟其他两个东西没有任何关系

04:04.070 --> 04:05.070
那么我们这几个呢

04:05.070 --> 04:06.070
我们就是我们这一章

04:06.070 --> 04:08.070
我们就要学习react室

04:08.070 --> 04:10.070
跟react室如何来结合

04:10.070 --> 04:13.070
react室跟react室rotor又如何来结合

04:13.070 --> 04:14.070
主要是学习这个

04:14.070 --> 04:16.070
这一章非常简单

04:16.070 --> 04:17.070
如果你说

04:17.070 --> 04:19.070
如果你之前的react和rotor

04:19.070 --> 04:20.070
你搞得非常清楚的话

04:20.070 --> 04:23.070
那么这一章是非常非常轻松的

04:23.070 --> 04:24.070
好那么这节课

04:24.070 --> 04:25.070
那么学习啥呢

04:25.070 --> 04:27.070
可能一节课讲不完

04:27.070 --> 04:29.070
讲两节课吧

04:29.070 --> 04:32.070
我们这两节课就学习react

04:32.070 --> 04:34.070
就是react室跟react室

04:34.070 --> 04:37.070
本身如何去结合

04:37.070 --> 04:38.070
我们来学习这个东西

04:38.070 --> 04:39.070
我们这节课学习啥呢

04:39.070 --> 04:40.070
学习的是一个cool

04:40.070 --> 04:41.070
这个cool的名字呢

04:41.070 --> 04:42.070
叫做react

04:42.070 --> 04:44.070
react室

04:44.070 --> 04:46.070
这是官方出品的一个cool

04:46.070 --> 04:47.070
那么这个cool呢

04:47.070 --> 04:49.070
就是专门用于将react室

04:49.070 --> 04:51.070
和react室来进行结合的

04:51.070 --> 04:52.070
好这个呢

04:52.070 --> 04:53.070
我给大家画一个图

04:53.070 --> 04:55.070
给大家更加清晰的认识到这一点

04:55.070 --> 04:57.070
好我们这里呢

04:57.070 --> 04:58.070
写一个

04:58.070 --> 04:59.070
不是我

05:02.070 --> 05:04.070
写这么一个pd

05:04.070 --> 05:09.430
稍等一下

05:09.430 --> 05:12.380
好

05:12.380 --> 05:13.380
然后呢我们之前

05:13.380 --> 05:15.380
学过react室对吧

05:15.380 --> 05:17.380
react室是不是有一个一个的组件

05:17.380 --> 05:18.380
一个一个的组件

05:18.380 --> 05:19.380
那么我们这里呢

05:19.380 --> 05:20.380
比方说

05:20.380 --> 05:22.380
这里有这么一个组件

05:22.380 --> 05:23.380
组件1

05:23.380 --> 05:24.380
然后呢

05:24.380 --> 05:25.380
可能还有一个组件

05:25.380 --> 05:26.380
组件2

05:26.380 --> 05:27.380
我们先说一个组件吧

05:27.380 --> 05:28.380
一个组件

05:28.380 --> 05:29.380
这个组件里边呢

05:29.380 --> 05:30.380
它要宣览

05:30.380 --> 05:31.380
它的主要重用是什么

05:31.380 --> 05:34.380
主要重用是宣览一个UI界面

05:34.380 --> 05:35.380
对吧

05:35.380 --> 05:36.380
根据什么宣览

05:36.380 --> 05:37.380
根据数据

05:37.380 --> 05:38.380
对吧

05:38.380 --> 05:39.380
根据数据来进行宣览

05:39.380 --> 05:40.380
好

05:40.380 --> 05:41.380
那么这个数据

05:41.380 --> 05:42.380
它是未知的

05:42.380 --> 05:43.380
对不对

05:43.380 --> 05:44.380
对于这个组件而言

05:44.380 --> 05:45.380
那么这个数据呢

05:45.380 --> 05:46.380
它可能是未知的

05:46.380 --> 05:48.380
不知道应该有什么样的数据

05:48.380 --> 05:49.380
所以这个数据呢

05:49.380 --> 05:51.380
是不是通过属性传过来的

05:51.380 --> 05:52.380
对吧

05:52.380 --> 05:54.380
通过一个属性把数据传过来

05:54.380 --> 05:55.380
然后呢

05:55.380 --> 05:56.380
它这个组件里边呢

05:56.380 --> 05:59.380
它还会触发事件

05:59.380 --> 06:00.380
触发事件呢

06:00.380 --> 06:02.380
它有可能会导致数据改变

06:02.380 --> 06:03.380
那么具体怎么改变

06:03.380 --> 06:04.380
数据不是它的

06:04.380 --> 06:05.380
它说的也不算

06:05.380 --> 06:07.380
就是这么一个组件

06:07.380 --> 06:08.380
也就是说

06:08.380 --> 06:10.380
它需要外部给它传过来一个什么呢

06:10.380 --> 06:12.380
通过属性传过来一个

06:12.380 --> 06:13.380
一些数据

06:13.380 --> 06:16.380
已经到一些事件的处理函数

06:16.380 --> 06:17.380
所以说

06:17.380 --> 06:19.380
它希望外部给它传过来

06:19.380 --> 06:20.380
传过来啥呢

06:20.380 --> 06:21.380
我们这里画个箭头

06:21.380 --> 06:23.380
因为它有些数据

06:23.380 --> 06:24.380
不是它本身自带的

06:24.380 --> 06:26.380
是别人给它的

06:26.380 --> 06:27.380
那么这个

06:27.380 --> 06:28.380
这个组件呢

06:28.380 --> 06:29.380
它需要的是什么

06:29.380 --> 06:31.380
需要的是一些数据

06:31.380 --> 06:32.380
数据

06:32.380 --> 06:33.380
还需要什么

06:33.380 --> 06:36.380
还需要事件的处理函数

06:36.380 --> 06:39.380
事件处理函数

06:39.380 --> 06:40.380
对吧

06:40.380 --> 06:41.380
回忆一下

06:41.380 --> 06:42.380
前面讲了个react的时候

06:42.380 --> 06:44.380
你写一个组件

06:44.380 --> 06:45.380
这个组件要选择个界面

06:45.380 --> 06:46.380
那界面边

06:46.380 --> 06:47.380
一个界面里边

06:47.380 --> 06:49.380
做了一些事情

06:49.380 --> 06:50.380
做了一些事情过后了

06:50.380 --> 06:52.380
我们需要进行处理

06:52.380 --> 06:53.380
那么就是事件处理函数

06:53.380 --> 06:54.380
你需要把函数给它

06:54.380 --> 06:55.380
然后呢

06:55.380 --> 06:56.380
我们可能界面中

06:56.380 --> 06:57.380
需要显示一些数据

06:57.380 --> 06:59.380
我们组件需要显示

06:59.380 --> 07:00.380
好

07:00.380 --> 07:01.380
咱们先把这一块讲清楚

07:01.380 --> 07:03.380
因为这个是以前我们讲过的

07:03.380 --> 07:04.380
那么这里呢

07:04.380 --> 07:06.380
我们再帮大家回忆一下

07:06.380 --> 07:07.380
因为学习的时候

07:07.380 --> 07:09.380
也花了满长时间的

07:09.380 --> 07:10.380
可能有些同学都忘了

07:10.380 --> 07:11.380
这里呢

07:11.380 --> 07:13.380
我们就写这么一个组件吧

07:13.380 --> 07:15.380
写这么一个组件

07:15.380 --> 07:16.380
我这个分支

07:16.380 --> 07:18.380
那就是在接着之前讲saga

07:18.380 --> 07:20.380
讲到saga的counter task

07:20.380 --> 07:21.380
一部增加

07:21.380 --> 07:22.380
一部减少的分支

07:22.380 --> 07:24.380
也就接到这个分支来的

07:24.380 --> 07:25.380
然后呢

07:25.380 --> 07:26.380
我们这里呢

07:26.380 --> 07:28.380
看studio人写没写

07:28.380 --> 07:29.380
studio人也写了的

07:29.380 --> 07:31.380
也写了的

07:31.380 --> 07:33.380
这是之前咱们做的东西

07:33.380 --> 07:34.380
对吧

07:34.380 --> 07:35.380
之前咱们做的东西

07:35.380 --> 07:37.380
这个mock好像没什么用了

07:37.380 --> 07:39.380
这个mock还没啥用了

07:39.380 --> 07:41.380
没啥用了

07:41.380 --> 07:42.380
这里呢

07:42.380 --> 07:44.380
我们

07:44.380 --> 07:47.380
我们之前做过这么一个东西

07:47.380 --> 07:48.380
胡说为吧

07:48.380 --> 07:49.380
认证吧

07:49.380 --> 07:50.380
认证

07:50.380 --> 07:51.380
我们以后再说

07:51.380 --> 07:52.380
然后呢

07:52.380 --> 07:53.380
我们现在回到rebox里边

07:53.380 --> 07:54.380
组件这里

07:54.380 --> 07:55.380
组件这里

07:55.380 --> 07:57.380
组件这一块的话

07:57.380 --> 07:58.380
这个配级是

07:58.380 --> 07:59.380
我们现在目前暂时不需要

07:59.380 --> 08:01.380
我们组件这一块的话

08:01.380 --> 08:03.380
我们在这里新加一个组件

08:03.380 --> 08:04.380
给它取个名字

08:04.380 --> 08:06.380
叫做counter

08:06.380 --> 08:08.380
点解释

08:08.380 --> 08:09.380
那么你写组件的时候

08:09.380 --> 08:11.380
千万不要去想什么

08:11.380 --> 08:12.380
跟什么rebox

08:12.380 --> 08:13.380
跟什么rotl

08:13.380 --> 08:15.380
不要去想这些事情

08:15.380 --> 08:17.380
我们之所以有三大套件

08:17.380 --> 08:18.380
就是有全家统

08:18.380 --> 08:19.380
什么rotl

08:19.380 --> 08:20.380
rebox

08:20.380 --> 08:21.380
reax

08:21.380 --> 08:23.380
它们是各自做各自的事情

08:23.380 --> 08:24.380
它们之间的关联

08:24.380 --> 08:25.380
没有那么紧密

08:25.380 --> 08:26.380
那我们写组件的时候

08:26.380 --> 08:28.380
你千万不要去想

08:28.380 --> 08:30.380
去想我的数据仓库里边有啥

08:30.380 --> 08:31.380
想都不去想这件事情

08:31.380 --> 08:32.380
组件是啥

08:32.380 --> 08:33.380
组件就是根据数据

08:33.380 --> 08:34.380
来确认界面

08:34.380 --> 08:36.380
我不考虑这个数据哪来的

08:36.380 --> 08:37.380
你可以直接

08:37.380 --> 08:38.380
通过属性传给我

08:38.380 --> 08:39.380
也可以来自于仓库

08:39.380 --> 08:40.380
我们之后会说

08:40.380 --> 08:42.380
仓库的数据怎么来传递

08:42.380 --> 08:43.380
我们写组件的时候

08:43.380 --> 08:45.380
就是一个非常非常纯粹的东西

08:45.380 --> 08:47.380
咱们来写这么一个组件

08:47.380 --> 08:49.380
咱写成这么一个函数组件

08:49.380 --> 08:51.380
rff

08:51.380 --> 08:53.380
是这样子吗

08:53.380 --> 08:55.380
rfc

08:55.380 --> 08:57.380
那么这个组件里边

08:57.380 --> 08:59.380
我们写上这么个东西吧

08:59.380 --> 09:02.380
这里边有一个div

09:02.380 --> 09:04.380
div里面或者是一个he

09:04.380 --> 09:06.380
he

09:06.380 --> 09:08.380
要选择一个数字

09:08.380 --> 09:10.380
一个数字

09:10.380 --> 09:11.380
那么这个数字哪来的

09:11.380 --> 09:12.380
我不知道

09:12.380 --> 09:14.380
我不知道这个数字哪来

09:14.380 --> 09:15.380
那么这个数字哪来的

09:15.380 --> 09:17.380
那你通过属性传给我

09:17.380 --> 09:19.380
我们这里有个属性

09:19.380 --> 09:20.380
probs

09:20.380 --> 09:22.380
当然也可以在属性里边解构

09:22.380 --> 09:23.380
我们再通过属性

09:23.380 --> 09:24.380
把这个数据传给我

09:24.380 --> 09:26.380
就是我这个界面中需要一个数据

09:26.380 --> 09:28.380
但是我不知道个数据哪来的

09:28.380 --> 09:30.380
那么通过属性来传给我

09:30.380 --> 09:31.380
number

09:31.380 --> 09:33.380
千万不要去想仓库里边有啥

09:33.380 --> 09:34.380
尽管你现在知道

09:34.380 --> 09:36.380
咱们之前写过这么一个仓库

09:36.380 --> 09:38.380
仓库里边有一个数字来寄书器

09:38.380 --> 09:40.380
但是不要去想这个问题

09:40.380 --> 09:41.380
你写组件的时候

09:41.380 --> 09:43.380
跟外部的数据哪来的

09:43.380 --> 09:44.380
无关

09:44.380 --> 09:46.380
那么下面我们比较有写个批员书

09:46.380 --> 09:49.380
这里边有提供了这么四个按钮

09:49.380 --> 09:51.380
这是剪

09:52.380 --> 09:53.380
写个横杆

09:53.380 --> 09:54.380
表示剪

09:55.380 --> 09:58.380
然后再来一个四个按钮

09:58.380 --> 09:59.380
这是剪

09:59.380 --> 10:00.380
然后这个

10:00.380 --> 10:02.380
第一个把它写成一个异部剪

10:02.380 --> 10:03.380
异部剪

10:03.380 --> 10:06.760
就是过一会儿剪仪

10:06.760 --> 10:08.760
过一会儿剪仪

10:08.760 --> 10:09.760
异部剪

10:09.760 --> 10:10.760
不要去想仓库

10:10.760 --> 10:11.760
不要去想仓库

10:11.760 --> 10:13.760
这是剪

10:13.760 --> 10:16.760
这个是加

10:16.760 --> 10:19.760
这个是异部加

10:19.760 --> 10:21.760
就写了这么一个

10:21.760 --> 10:23.760
四个按钮

10:23.760 --> 10:25.760
那么点击按钮过后要干嘛呢

10:25.760 --> 10:26.760
我也不知道要干嘛

10:26.760 --> 10:27.760
所以说我这里

10:27.760 --> 10:28.760
这些按钮的

10:28.760 --> 10:30.760
它们各自有各自的事件

10:30.760 --> 10:31.760
各自有各自的事件

10:31.760 --> 10:33.760
那么我们这里给按钮注册事件

10:33.760 --> 10:34.760
当点击按钮的时候

10:34.760 --> 10:35.760
我们干嘛呢

10:35.760 --> 10:36.760
我处理不了这个事情

10:36.760 --> 10:38.760
那么通过属性

10:38.760 --> 10:40.760
给我传递一些事件处理

10:40.760 --> 10:41.760
函数过来

10:41.760 --> 10:42.760
那么你去处理

10:42.760 --> 10:43.760
我不管

10:43.760 --> 10:44.760
我的组件只是为了

10:44.760 --> 10:46.760
渲染一个UI界面

10:46.760 --> 10:47.760
其实我们这里

10:47.760 --> 10:48.760
给大家说一下

10:48.760 --> 10:51.760
我们如果说写一个组件

10:51.760 --> 10:52.760
这个组件只用于

10:52.760 --> 10:54.760
渲染一个UI

10:57.260 --> 10:59.260
如果一个组件

10:59.260 --> 11:01.260
仅用于

11:01.260 --> 11:04.260
渲染一个UI界面

11:04.260 --> 11:08.260
而没有状态

11:08.260 --> 11:09.260
它自己没有状态

11:09.260 --> 11:11.260
通常是函数组件

11:11.260 --> 11:12.260
虽然说我们现在

11:12.260 --> 11:13.260
函数组件用hook

11:13.260 --> 11:14.260
也可以设置状态了

11:14.260 --> 11:16.260
但是我们

11:16.260 --> 11:17.260
这种传统的教法

11:17.260 --> 11:18.260
传统上认为

11:18.260 --> 11:20.260
函数组件是没有状态的

11:20.260 --> 11:21.260
没有状态的

11:21.260 --> 11:24.260
通常是一个函数组件

11:24.260 --> 11:25.260
那么它只是根据

11:25.260 --> 11:26.260
你给我什么数据

11:26.260 --> 11:27.260
你给我什么回调

11:27.260 --> 11:28.260
我把一个界面

11:28.260 --> 11:29.260
给你渲染出来

11:29.260 --> 11:30.260
发这么一件事的时候

11:30.260 --> 11:31.260
你去处理

11:31.260 --> 11:32.260
我不管

11:32.260 --> 11:33.260
我纯粹用于渲染界面

11:33.260 --> 11:35.260
包括什么CSS

11:35.260 --> 11:36.260
这些央视

11:36.260 --> 11:37.260
我在这个界面里面

11:37.260 --> 11:38.260
给你做好

11:38.260 --> 11:39.260
那么这两个组件

11:39.260 --> 11:40.260
是非常非常纯粹的

11:40.260 --> 11:41.260
非常非常简单的

11:41.260 --> 11:43.260
那么这个组件

11:43.260 --> 11:46.260
该组件叫做

11:46.260 --> 11:48.260
我们平时

11:48.260 --> 11:49.260
开发上有这么

11:49.260 --> 11:50.260
不是官方教法

11:50.260 --> 11:51.260
就是开发

11:51.260 --> 11:52.260
我们习惯它的话

11:52.260 --> 11:54.260
叫做展示组件

11:54.260 --> 11:55.260
它纯粹用来

11:55.260 --> 11:56.260
做一个展示的

11:56.260 --> 11:57.260
要什么数据

11:57.260 --> 11:58.260
你给它

11:58.260 --> 11:59.260
怎么处理

11:59.260 --> 12:00.260
它不过去

12:00.260 --> 12:01.260
它不做任何处理

12:01.260 --> 12:02.260
叫展示组件

12:02.260 --> 12:04.260
那么相对于展示组件

12:04.260 --> 12:05.260
还有一个东西

12:05.260 --> 12:06.260
叫做容器组件

12:06.260 --> 12:08.260
就是如果一个组件

12:08.260 --> 12:12.260
仅用于提供数据

12:12.260 --> 12:15.260
没有自己

12:15.260 --> 12:20.260
没有任何属于自己的

12:20.260 --> 12:23.260
属于自己的UI界面

12:23.260 --> 12:29.260
该组件叫做容器组件

12:29.260 --> 12:31.260
容器这个组件

12:31.260 --> 12:33.260
它不是说我写个DIV

12:33.260 --> 12:34.260
是这种容器的意思

12:34.260 --> 12:35.260
不是这个意思

12:35.260 --> 12:36.260
容器就是我给你

12:36.260 --> 12:37.260
我只是来

12:37.260 --> 12:39.260
包括一些展示组件的

12:39.260 --> 12:41.260
比方说我举个例子吧

12:41.260 --> 12:42.260
像这里

12:42.260 --> 12:43.260
你想这个组件

12:43.260 --> 12:44.260
是不是一个展示组件

12:44.260 --> 12:45.260
对吧

12:45.260 --> 12:46.260
我只是用来去进行宣展

12:46.260 --> 12:47.260
提供

12:47.260 --> 12:48.260
那么当我们发生一件事情的时候

12:48.260 --> 12:51.260
给你处罚一个回掉函数

12:51.260 --> 12:52.260
只在用来做这个事情

12:52.260 --> 12:53.260
那么这个组件

12:53.260 --> 12:54.260
就是一个展示组件

12:54.260 --> 12:56.260
而我们如果说再写个组件

12:56.260 --> 12:57.260
比方再写个组件

12:57.260 --> 12:58.260
class

12:58.260 --> 13:00.260
给他取个名字叫 counter

13:00.260 --> 13:01.260
我们就写个伟代码吧

13:01.260 --> 13:03.260
counter

13:03.260 --> 13:05.260
container

13:05.260 --> 13:06.260
extends

13:06.260 --> 13:08.260
react

13:08.260 --> 13:09.260
component

13:09.260 --> 13:10.260
那么这里我们又写个组件

13:10.260 --> 13:12.260
这个组件在宣展的时候

13:12.260 --> 13:13.260
它自己没有宣展

13:13.260 --> 13:15.260
任何的元素这些东西

13:15.260 --> 13:16.260
没有任何的自己的界面

13:16.260 --> 13:17.260
它仅仅是

13:17.260 --> 13:20.260
把其他的组件宣展过来

13:20.260 --> 13:21.260
counter

13:21.260 --> 13:23.260
它仅仅是宣展其他的组件

13:23.260 --> 13:25.260
它自己没有任何的优点界面

13:25.260 --> 13:26.260
它这里面不可能有什么

13:26.260 --> 13:27.260
div

13:27.260 --> 13:28.260
react

13:28.260 --> 13:29.260
完全没有这些东西

13:29.260 --> 13:31.260
它仅仅是为了

13:31.260 --> 13:32.260
宣展其他的组件

13:32.260 --> 13:34.260
然后其他组件需要的数据

13:34.260 --> 13:35.260
我给它提供出来

13:35.260 --> 13:37.260
比方说我这里有个状态

13:37.260 --> 13:38.260
状态里边

13:38.260 --> 13:39.260
有一个什么lambar

13:39.260 --> 13:40.260
对吧

13:40.260 --> 13:41.260
lambar

13:41.260 --> 13:42.260
一个数据

13:42.260 --> 13:43.260
那么你这个组件

13:43.260 --> 13:44.260
不是需要这个数据吗

13:44.260 --> 13:46.260
我仅仅是为了提供给力数据

13:46.260 --> 13:47.260
提供一些数据给力

13:47.260 --> 13:49.260
你不是有一个lambar属性吗

13:49.260 --> 13:52.260
我来自于我的数据

13:52.260 --> 13:53.260
像这样的组件

13:53.260 --> 13:55.260
我们把它叫做容器组件

13:55.260 --> 13:59.260
它纯粹是用来给其他组件提供数据的

13:59.260 --> 14:02.260
容器组件

14:02.260 --> 14:05.260
纯粹是为了

14:05.260 --> 14:08.260
给其他组件提供数据的

14:08.260 --> 14:10.260
其实这不是官方的教法

14:10.260 --> 14:12.260
这是我们民间

14:12.260 --> 14:15.260
在开发react的时候

14:15.260 --> 14:16.260
形成了一种习惯

14:16.260 --> 14:18.260
一种习惯上的教法

14:18.260 --> 14:21.260
它是来源于国外的一个开发者

14:21.260 --> 14:22.260
他写了一个博客

14:22.260 --> 14:24.260
那篇博客还挺有名的

14:24.260 --> 14:25.260
他就是告诉你

14:25.260 --> 14:27.260
我们在写react的时候

14:27.260 --> 14:30.260
应该尽量化分为展示组件和容器组件

14:30.260 --> 14:31.260
一个组件

14:31.260 --> 14:32.260
它纯粹用来做显示

14:32.260 --> 14:34.260
一个组件纯粹用来提供数据

14:34.260 --> 14:35.260
那么这样子

14:35.260 --> 14:37.260
它的界线非常清晰

14:37.260 --> 14:38.260
就这么个意思

14:38.260 --> 14:39.260
那么这里

14:39.260 --> 14:41.260
我们不会去写容器组件

14:41.260 --> 14:43.260
我们只是写展示组件

14:43.260 --> 14:47.260
就顺便说一下名词

14:47.260 --> 14:49.260
这里我们写到展示组件

14:49.260 --> 14:50.260
继续把它写完

14:50.260 --> 14:52.260
这里来自于probs

14:52.260 --> 14:54.260
当我们点击的时候

14:54.260 --> 15:00.260
调用probs里面的一个函数

15:00.260 --> 15:01.260
给它取个名字

15:01.260 --> 15:06.260
叫做async decrease

15:06.260 --> 15:08.260
或者是我们按照惯例

15:08.260 --> 15:09.260
给它加一个um

15:09.260 --> 15:10.260
当什么什么

15:10.260 --> 15:11.260
当一步减的时候

15:11.260 --> 15:13.260
怎么样怎么样

15:13.260 --> 15:15.260
那么这是一个事件

15:15.260 --> 15:17.260
然后另一个um

15:17.260 --> 15:19.260
um decrease

15:19.260 --> 15:20.260
好

15:20.260 --> 15:21.260
然后再来一个

15:21.260 --> 15:22.260
这是一个

15:22.260 --> 15:26.260
这是加um increase

15:26.260 --> 15:27.260
好

15:27.260 --> 15:28.260
这是加

15:28.260 --> 15:29.260
这呢

15:29.260 --> 15:31.260
是一步加

15:31.260 --> 15:32.260
async increase

15:32.260 --> 15:34.260
不要去想仓库

15:34.260 --> 15:36.260
跟我们仓库没有什么关系

15:36.260 --> 15:37.260
那没有仓库

15:37.260 --> 15:38.260
我们能不能完成这个组件

15:38.260 --> 15:40.260
是不是还是可以完成这个组件

15:40.260 --> 15:41.260
跟仓库有啥关系呢

15:41.260 --> 15:42.260
它要什么我就给

15:42.260 --> 15:43.260
它什么边

15:43.260 --> 15:44.260
跟仓库没有任何关系

15:44.260 --> 15:45.260
那比方说我们这里再写个组件

15:45.260 --> 15:46.260
包装一下

15:46.260 --> 15:47.260
给它提供数据

15:47.260 --> 15:48.260
可不可以

15:48.260 --> 15:49.260
当然可以

15:49.260 --> 15:50.260
给它提供数据

15:50.260 --> 15:51.260
然后给它注册这些函数

15:51.260 --> 15:52.260
对吧

15:52.260 --> 15:53.260
给它注册这些事件

15:53.260 --> 15:54.260
完全可以

15:54.260 --> 15:55.260
跟仓库无关的

15:55.260 --> 15:56.260
那么我们在写

15:56.260 --> 15:57.260
这个组件的时候

15:57.260 --> 15:58.260
我们只关心

15:58.260 --> 16:00.260
我怎么去宣展这个界面

16:00.260 --> 16:01.260
只关心这一点

16:01.260 --> 16:02.260
其他的事情

16:02.260 --> 16:03.260
跟我无关

16:03.260 --> 16:04.260
好吧

16:04.260 --> 16:05.260
OK

16:05.260 --> 16:06.260
这次我们就写好了这么一个组件

16:06.260 --> 16:07.260
那么就相当于是

16:07.260 --> 16:08.260
我们这个地方

16:08.260 --> 16:09.260
你看一个组件写好了

16:09.260 --> 16:10.260
他用来做什么

16:10.260 --> 16:11.260
用来宣展一个UI界面

16:11.260 --> 16:13.260
那么这个就是一个展示组件

16:13.260 --> 16:16.260
它是根据数据来宣展

16:16.260 --> 16:18.260
并且它可能会出发事件

16:18.260 --> 16:19.260
所以说你要给它传什么

16:19.260 --> 16:20.260
传数据过来

16:20.260 --> 16:21.260
它需要宣展数据

16:21.260 --> 16:23.260
你要看它传一个事件处理

16:23.260 --> 16:24.260
还是过来

16:24.260 --> 16:25.260
这是这一部分

16:25.260 --> 16:27.260
这是我们组件就写好了

16:27.260 --> 16:28.260
然后另一方面

16:28.260 --> 16:30.260
我们现在忘记组件

16:30.260 --> 16:31.260
忘记组件

16:31.260 --> 16:33.260
我现在看另一方面

16:33.260 --> 16:34.260
另一方面

16:34.260 --> 16:36.260
我们的仓库已经准备好了

16:36.260 --> 16:37.260
仓库是谁

16:37.260 --> 16:38.260
是不是瑞大克斯准备好的

16:38.260 --> 16:39.260
瑞大克斯里边

16:39.260 --> 16:41.260
不管使用了多少个中间键

16:41.260 --> 16:42.260
不管你去怎么处理一部

16:42.260 --> 16:45.260
总之瑞大克斯里边是一个仓库

16:45.260 --> 16:46.260
对不对

16:46.260 --> 16:48.260
仓库里边是不是有数据

16:48.260 --> 16:51.260
我们这边刚好有一个仓库

16:51.260 --> 16:53.260
那么这个仓库跟组件

16:53.260 --> 16:54.260
是不是没关系的

16:54.260 --> 16:56.260
那么这两个字彻底就分开了

16:56.260 --> 16:57.260
以后里面在公司里面

16:57.260 --> 16:58.260
开发的时候

16:58.260 --> 16:59.260
完全可以让一个开发者

16:59.260 --> 17:00.260
去开发组件

17:00.260 --> 17:02.260
一个开发组件的时候

17:02.260 --> 17:03.260
它完全不用知道

17:03.260 --> 17:04.260
仓库里边有哪些东西

17:04.260 --> 17:05.260
完全不用去管

17:05.260 --> 17:06.260
我只需要知道

17:06.260 --> 17:07.260
我这个组件需要啥

17:07.260 --> 17:09.260
你就要传给我啥

17:09.260 --> 17:10.260
只需要知道这个就行了

17:10.260 --> 17:11.260
那么另一个人开发者

17:11.260 --> 17:12.260
他去开发仓库

17:12.260 --> 17:15.260
他只需要关心我这个系统里边

17:15.260 --> 17:17.260
哪些数据是共享的

17:17.260 --> 17:19.260
哪些数据需要我在仓库里边管理

17:19.260 --> 17:20.260
他根本就不用去考虑

17:20.260 --> 17:21.260
组件需要啥

17:21.260 --> 17:22.260
你要这意思吗

17:22.260 --> 17:24.260
两者就可以完全分开

17:24.260 --> 17:25.260
好

17:25.260 --> 17:26.260
那么这个地方是瑞大克斯

17:26.260 --> 17:28.260
他里边呢

17:28.260 --> 17:29.260
瑞大克斯

17:29.260 --> 17:31.260
他里边是来处理数据

17:31.260 --> 17:32.260
和数据的变化的

17:32.260 --> 17:33.260
数据怎么去变化

17:33.260 --> 17:35.260
通过什么一个型可以变化

17:35.260 --> 17:38.260
你要去触发什么样的一个型

17:38.260 --> 17:39.260
数据怎么去

17:39.260 --> 17:40.260
从一个状态变到另一个状态

17:40.260 --> 17:42.260
他主要是来处理这个东西的

17:42.260 --> 17:44.260
有副作用应该怎么来处理

17:44.260 --> 17:45.260
就是瑞大克斯里边

17:45.260 --> 17:46.260
他要做的事情

17:46.260 --> 17:47.260
那么瑞大克斯里面

17:47.260 --> 17:48.260
他实际上是一个数据

17:48.260 --> 17:53.260
仓库存处了大量的共享数据

17:53.260 --> 17:54.260
当然也不一定是共享数据

17:54.260 --> 17:55.260
有些复杂的数据

17:55.260 --> 17:57.260
也可以放到这里面来处理

17:57.260 --> 17:59.260
他存处了大量的共享数据

17:59.260 --> 18:00.260
通常我们是共享数据

18:00.260 --> 18:02.260
那么这些数据是在仓库里边

18:02.260 --> 18:03.260
对吧

18:03.260 --> 18:05.260
那么现在好了

18:05.260 --> 18:08.260
仓库里边他有数据

18:08.260 --> 18:11.260
也有什么分发一个型来改变数据

18:11.260 --> 18:13.260
通过dispatch来改变数据

18:13.260 --> 18:15.260
而我们的组建需要数据

18:15.260 --> 18:17.260
又需要事件处理

18:17.260 --> 18:20.260
那么这两者是不是可以连接起来

18:20.260 --> 18:21.260
对不对

18:21.260 --> 18:22.260
这两者就可以连接起来

18:22.260 --> 18:23.260
你不是需要数据吗

18:23.260 --> 18:25.260
我这里恰好有

18:25.260 --> 18:26.260
我这里有数据

18:26.260 --> 18:27.260
但没见面

18:27.260 --> 18:28.260
这个组建不就是见面吗

18:28.260 --> 18:29.260
这个组建也存在

18:29.260 --> 18:31.260
所以说现在我们有了组建

18:31.260 --> 18:33.260
也写好了之前的仓库的代码

18:33.260 --> 18:35.260
那么现在呢

18:35.260 --> 18:37.260
是不是需要一个中间的东西

18:37.260 --> 18:39.260
需要一个中间的东西

18:39.260 --> 18:41.260
把两者连接起来

18:41.260 --> 18:45.260
这个中间这一部分呢

18:45.260 --> 18:50.260
这个中间这一部分

18:50.260 --> 18:51.260
是什么东西呢

18:51.260 --> 18:52.260
中间这一部分就是

18:52.260 --> 18:53.260
我们要

18:53.260 --> 18:54.260
这些课要讲的组建

18:54.260 --> 18:55.260
就不是组建

18:55.260 --> 18:56.260
讲了一个库

18:56.260 --> 18:58.260
叫rex redux

18:58.260 --> 18:59.260
就这个库

18:59.260 --> 19:00.260
这个库就在做这个事情

19:00.260 --> 19:01.260
你仓库里边有数据

19:01.260 --> 19:02.260
OK

19:02.260 --> 19:05.260
我可以连接到组建里边

19:05.260 --> 19:07.260
实现出发过后

19:07.260 --> 19:09.260
我可以让仓库的数据

19:09.260 --> 19:10.260
发生变化

19:10.260 --> 19:11.260
并且仓库的数据

19:11.260 --> 19:12.260
发生变化过后

19:12.260 --> 19:13.260
我又可以重新变成组建

19:13.260 --> 19:16.260
它就在处理这个事情的

19:16.260 --> 19:17.260
然后呢

19:17.260 --> 19:18.260
我们怎么来用这个库呢

19:18.260 --> 19:21.260
我们首先安装

19:21.260 --> 19:24.260
首先安装这个库

19:24.260 --> 19:26.260
首先我们进入rex

19:26.260 --> 19:31.260
rex redux

19:31.260 --> 19:33.260
首先安装这个库

19:33.260 --> 19:34.260
这个库其实非常简单

19:34.260 --> 19:35.260
我们后边会讲原码

19:35.260 --> 19:36.260
这个库呢

19:36.260 --> 19:38.260
原码也很简单

19:38.260 --> 19:39.260
没有几行带

19:39.260 --> 19:41.260
就你前面学动了过后

19:41.260 --> 19:44.260
整个这一张解都非常非常轻松

19:44.260 --> 19:46.260
让它安装吧

19:46.260 --> 19:47.260
上转一会

19:47.260 --> 19:49.260
那么拿到这个库过后

19:49.260 --> 19:50.260
我们来说一下怎么用

19:50.260 --> 19:52.260
这个库里边给你提供了两个东西

19:52.260 --> 19:54.260
其实它库里边还有几个东西

19:54.260 --> 19:56.260
所以说有些细致末节的东西

19:56.260 --> 19:57.260
我们拿到下节课来讲

19:57.260 --> 19:58.260
这就可能我们就讲

19:58.260 --> 20:00.260
最基本的使用方式

20:00.260 --> 20:02.260
平时我们用它最基本的使用方式

20:02.260 --> 20:03.260
就完全够了

20:03.260 --> 20:04.260
完全够了

20:04.260 --> 20:06.260
我们这里说一下

20:06.260 --> 20:09.260
这个库里边给你提供了两个东西

20:09.260 --> 20:11.260
rex redux

20:11.260 --> 20:13.260
这个库它是用来做什么呢

20:13.260 --> 20:17.260
用来连接rex和rex的

20:17.260 --> 20:19.260
rex里边有数据

20:19.260 --> 20:20.260
rex里边有组件

20:20.260 --> 20:23.260
那么我们就可以把两者结合起来

20:23.260 --> 20:26.260
那么这个库它里边提供了两个东西

20:26.260 --> 20:28.260
一个是一个组件

20:28.260 --> 20:30.260
叫做provider

20:30.260 --> 20:32.260
提供了这么一个组件

20:32.260 --> 20:35.260
这个组件它没有任何的UI界面

20:35.260 --> 20:38.260
没有任何UI界面

20:38.260 --> 20:40.260
该组件用来做什么事情呢

20:40.260 --> 20:42.260
该组件的作用

20:42.260 --> 20:46.260
是将rex仓库

20:46.260 --> 20:50.640
rex的仓库

20:50.640 --> 20:51.640
就是store

20:51.640 --> 20:55.640
放到一个上下文中

20:55.640 --> 20:56.640
它就做这么一件事

20:56.640 --> 20:58.640
其他都没了

20:58.640 --> 20:59.640
非常非常简单

20:59.640 --> 21:00.640
provider这个组件

21:00.640 --> 21:02.640
rex redux库里边

21:02.640 --> 21:03.640
提供了一个组件

21:03.640 --> 21:04.640
它的作用就有一个

21:04.640 --> 21:06.640
就是把rex redux的仓库

21:06.640 --> 21:09.640
也不是rex里边有很多数据吗

21:09.640 --> 21:12.640
这些数据是不是整个网站里边

21:12.640 --> 21:13.640
都可能会共享

21:13.640 --> 21:15.640
每一个组件都有可能会使用

21:15.640 --> 21:18.640
那么它就得把它放到一个上下文里边

21:18.640 --> 21:20.640
这就是这个组件的作用

21:20.640 --> 21:22.640
所以说我们安装好了

21:22.640 --> 21:24.640
这个东西过后

21:24.640 --> 21:26.640
我们先把运行起来

21:26.640 --> 21:27.640
运行起来

21:27.640 --> 21:29.640
那么怎么用呢

21:29.640 --> 21:31.640
首先我们到这个app.js里边

21:31.640 --> 21:32.640
到这里边

21:32.640 --> 21:33.640
我们在这里边

21:33.640 --> 21:34.640
在index里边

21:34.640 --> 21:35.640
什么test就不要了

21:35.640 --> 21:37.640
这东西就不要了

21:37.640 --> 21:40.640
我们到这个app.js里边

21:40.640 --> 21:42.640
它不是跟组件吗

21:42.640 --> 21:45.640
我在这里做这么一件事

21:45.640 --> 21:47.640
我首先导入一个

21:47.640 --> 21:50.640
从rex redux里边

21:50.640 --> 21:51.640
导入一个什么呢

21:51.640 --> 21:52.640
导入一个provider

21:52.640 --> 21:54.640
它是一个组件

21:54.640 --> 21:55.640
我们之后会有讲上的元代

21:55.640 --> 21:56.640
非常非常简单

21:56.640 --> 21:58.640
就是往上纱文里面写东西

21:58.640 --> 22:00.640
写这么一个provider

22:00.640 --> 22:01.640
它写好了之后

22:01.640 --> 22:03.640
我们再把用这个provider

22:03.640 --> 22:06.640
把我们的跟组件的整个包起来

22:06.640 --> 22:07.640
你想啊

22:07.640 --> 22:09.640
那这样子的话

22:09.640 --> 22:11.640
这个组件它提供的上下文

22:11.640 --> 22:14.640
是不是就影响了整个网站了

22:14.640 --> 22:16.640
对吧 整个网站里边

22:16.640 --> 22:18.640
它都可以从通过上下文里边

22:18.640 --> 22:19.640
于原理上

22:19.640 --> 22:20.640
都可以通过上下文里边

22:20.640 --> 22:21.640
是不是取到数据

22:21.640 --> 22:22.640
对吧

22:22.640 --> 22:24.640
那么上下文里边取什么数据呢

22:24.640 --> 22:26.640
上下文里边存什么数据呢

22:26.640 --> 22:28.640
它是通过一个属性来告诉它的

22:28.640 --> 22:30.640
就是我们的数据仓库在了

22:30.640 --> 22:31.640
那么这个地方呢

22:31.640 --> 22:32.640
你要把数据仓库

22:32.640 --> 22:35.640
就是redux的数据仓库填进去

22:35.640 --> 22:37.640
好 这里呢我们导入

22:37.640 --> 22:39.640
导入我们之前写好的数据仓库

22:39.640 --> 22:40.640
Stone

22:40.640 --> 22:41.640
Front

22:41.640 --> 22:42.640
来自于哪呢

22:42.640 --> 22:43.640
来自于这

22:43.640 --> 22:44.640
index里边对吧

22:44.640 --> 22:45.640
我们这里导出了仓库

22:45.640 --> 22:46.640
甭管这个仓库里边用了

22:46.640 --> 22:47.640
哪些中间键

22:47.640 --> 22:48.640
怎么去管理的

22:48.640 --> 22:49.640
跟我没关系

22:49.640 --> 22:51.640
总之那里最终会得到一个仓库嘛

22:51.640 --> 22:52.640
那么这里呢

22:52.640 --> 22:55.640
我们就导入Stone里边的

22:55.640 --> 22:56.640
index对吧

22:56.640 --> 22:58.640
从 index里边去导入一个仓库

22:58.640 --> 23:00.640
然后我们把这个仓库放到那儿

23:00.640 --> 23:01.640
就放到这个上下文里边

23:01.640 --> 23:02.640
没了

23:02.640 --> 23:04.640
这个就是这个组织的作用

23:04.640 --> 23:05.640
好 写好了之后呢

23:05.640 --> 23:06.640
我们来看一下啊

23:06.640 --> 23:07.640
右键

23:07.640 --> 23:08.640
看一下这里一块

23:10.640 --> 23:12.640
看一下那个

23:12.640 --> 23:14.640
咱们的reaction呢

23:18.210 --> 23:19.210
等一下啊

23:19.210 --> 23:21.210
我们的reaction不拿去了呢

23:21.210 --> 23:22.210
reaction

23:22.210 --> 23:30.030
呃

23:30.030 --> 23:31.030
nodes

23:31.030 --> 23:32.030
you have to build

23:32.030 --> 23:34.030
is due to the production

23:34.030 --> 23:37.600
这里我重新打开一次

23:37.600 --> 23:39.600
重新打开一下这个网顶

23:39.600 --> 23:43.980
我的reaction调试工具跑到去了

23:43.980 --> 23:44.980
看一下啊

23:50.040 --> 23:51.040
在这儿

23:53.040 --> 23:54.040
好

23:54.040 --> 23:55.040
然后我们可以看到

23:55.040 --> 23:56.040
可以看到

23:57.040 --> 24:00.040
可能是因为我安装了这个调试工具

24:00.040 --> 24:02.040
安装了这个redux调

24:02.040 --> 24:03.040
跑到去了

24:03.040 --> 24:04.040
这个redux调试工具

24:04.040 --> 24:05.040
那么这个工具里边

24:05.040 --> 24:07.040
就已经自带了reaction的东西了

24:07.040 --> 24:08.040
reaction调试工具了

24:08.040 --> 24:09.040
那么你们那边呢

24:09.040 --> 24:11.040
还没有安装这个redux调试工具呢

24:11.040 --> 24:13.040
我们后边说一下吧

24:13.040 --> 24:15.040
给大家说一下怎么去安装

24:15.040 --> 24:16.040
一会再说

24:16.040 --> 24:17.040
咱们呢

24:17.040 --> 24:18.040
这里呢

24:18.040 --> 24:19.040
我们可以看到

24:19.040 --> 24:20.040
我们的组建里边

24:20.040 --> 24:22.040
它提供了一个provider对吧

24:22.040 --> 24:23.040
provider

24:23.040 --> 24:24.040
provider里边你看一下

24:24.040 --> 24:25.040
是不是有个上下文

24:25.040 --> 24:26.040
对不对

24:26.040 --> 24:27.040
是不是有个上下文

24:27.040 --> 24:28.040
就这么简单

24:28.040 --> 24:29.040
就这么简单

24:29.040 --> 24:31.040
它提供了这么一个上下文

24:31.040 --> 24:32.040
好

24:32.040 --> 24:33.040
上下文里边有什么呢

24:33.040 --> 24:34.040
上下文的value值

24:34.040 --> 24:35.040
你看一下是不是stone

24:35.040 --> 24:36.040
对不对

24:36.040 --> 24:37.040
里边是不是一个仓库

24:37.040 --> 24:38.040
对不对

24:38.040 --> 24:39.040
非常非常简单

24:39.040 --> 24:41.040
这就是我们的仓库

24:41.040 --> 24:42.040
你看仓库里边的

24:42.040 --> 24:44.040
是不是非常熟悉的

24:44.040 --> 24:45.040
这些函数

24:45.040 --> 24:46.040
对不对

24:46.040 --> 24:47.040
它其他的作用

24:47.040 --> 24:49.040
就是把我们的仓库

24:49.040 --> 24:51.040
放入到上下文里边

24:51.040 --> 24:52.040
这样子呢

24:52.040 --> 24:53.040
我们上下文里边

24:53.040 --> 24:55.040
就这里边的所有组建

24:55.040 --> 24:56.040
什么都可以用

24:56.040 --> 24:57.040
这个仓库里边的数据了

24:57.040 --> 24:58.040
好

24:58.040 --> 24:59.040
这是关于这个provider

24:59.040 --> 25:01.040
provider组建

25:01.040 --> 25:02.040
好

25:02.040 --> 25:03.040
下一个

25:03.040 --> 25:04.040
再说

25:04.040 --> 25:05.040
reacts redux的cool

25:05.040 --> 25:07.040
还可以提供了一个东西

25:07.040 --> 25:08.040
另外一个东西

25:08.040 --> 25:10.040
叫做connect

25:10.040 --> 25:12.040
这个是什么玩意呢

25:12.040 --> 25:14.040
这个叫做一个高阶组建

25:14.040 --> 25:16.040
它是一个高阶组建

25:16.040 --> 25:18.040
它是用来什么呢

25:18.040 --> 25:21.040
它是用于连接

25:21.040 --> 25:23.040
仓库和

25:23.040 --> 25:25.040
组建的

25:25.040 --> 25:26.040
就是呢

25:26.040 --> 25:28.040
它的作用

25:28.040 --> 25:30.040
是用来把仓库的数据

25:30.040 --> 25:32.040
就是它才真正发挥的这个作用

25:32.040 --> 25:33.040
它把仓库里边的数据

25:33.040 --> 25:34.040
跟我们的组建

25:34.040 --> 25:36.040
向连接

25:36.040 --> 25:37.040
它是一个高阶组建

25:37.040 --> 25:38.040
也就是这个函数

25:38.040 --> 25:39.040
它肯定是个函数

25:39.040 --> 25:41.040
那么这个函数最终呢

25:41.040 --> 25:43.040
它会返回一个组建

25:43.040 --> 25:44.040
就这么个意思

25:44.040 --> 25:45.040
好

25:45.040 --> 25:46.040
那么接下来呢

25:46.040 --> 25:48.040
我们终点要学习的是

25:48.040 --> 25:49.040
connect

25:49.040 --> 25:50.040
这个高阶组建

25:50.040 --> 25:51.040
如何去使用

25:51.040 --> 25:52.040
因为这个provider

25:52.040 --> 25:53.040
实在是太显然了

25:53.040 --> 25:54.040
那么我们来学习

25:54.040 --> 25:55.040
connect

25:55.040 --> 25:56.040
高阶组建

25:56.040 --> 25:57.040
如何使用

25:57.040 --> 25:58.040
好

25:58.040 --> 25:59.040
怎么用呢

25:59.040 --> 26:00.040
看这里

26:00.040 --> 26:01.040
我们刚才呢

26:01.040 --> 26:02.040
在这

26:02.040 --> 26:03.040
在这

26:03.040 --> 26:04.040
就是

26:05.040 --> 26:06.040
我们的组建先来来

26:06.040 --> 26:07.040
在这

26:07.040 --> 26:08.040
counter

26:08.040 --> 26:09.040
我们写到了

26:09.040 --> 26:10.040
写好了这么一个组建

26:10.040 --> 26:11.040
counter

26:11.040 --> 26:12.040
那么这个组建

26:12.040 --> 26:13.040
是不是需要数据

26:13.040 --> 26:14.040
对不对

26:14.040 --> 26:15.040
我不知道这个数据哪来呀

26:15.040 --> 26:16.040
我不知道这个数据哪来

26:16.040 --> 26:17.040
它哪里去哪

26:17.040 --> 26:18.040
我也不知道

26:18.040 --> 26:19.040
那么现在呢

26:19.040 --> 26:20.040
我们能确定的

26:20.040 --> 26:22.040
就写好了这个组建之后

26:22.040 --> 26:23.040
那么这里呢

26:23.040 --> 26:24.040
我们就可以确定

26:24.040 --> 26:26.040
该组建

26:26.040 --> 26:28.040
就是 counter 组建的数据

26:28.040 --> 26:30.040
来自于

26:30.040 --> 26:31.040
来自于哪

26:31.040 --> 26:32.040
仓库

26:32.040 --> 26:33.040
比方说我们就写到这

26:33.040 --> 26:34.040
当然也可以

26:34.040 --> 26:35.040
不用写到这

26:35.040 --> 26:36.040
也可以写到别的地方

26:36.040 --> 26:37.040
也行

26:37.040 --> 26:38.040
counter 组建的数据

26:38.040 --> 26:39.040
来自于仓库

26:39.040 --> 26:40.040
好

26:40.040 --> 26:41.040
那么这个时候呢

26:41.040 --> 26:43.040
我们怎么把仓库的数据

26:43.040 --> 26:45.040
跟那个 counter 来进行连接呢

26:45.040 --> 26:46.040
怎么来进行处理呢

26:46.040 --> 26:47.040
我们可以用

26:47.040 --> 26:48.040
最大个式里边

26:48.040 --> 26:49.040
就是rex

26:49.040 --> 26:50.040
最大个式里边

26:50.040 --> 26:51.040
一个东西

26:51.040 --> 26:53.040
就刚才安装了个库

26:53.040 --> 26:54.040
这里边一个东西

26:54.040 --> 26:55.040
叫做 conlect

26:56.040 --> 26:57.040
我这里写

26:57.040 --> 26:58.040
我先写错了

27:00.040 --> 27:01.040
conlect

27:01.040 --> 27:03.040
使用这个函数

27:03.040 --> 27:04.040
这一看

27:04.040 --> 27:05.040
手这么没大一些

27:05.040 --> 27:06.040
它不是一个组建

27:06.040 --> 27:07.040
它是一个函数

27:07.040 --> 27:09.040
通过这个函数

27:09.040 --> 27:11.040
来把仓库的数据

27:11.040 --> 27:13.040
跟某一个组建进行连接

27:13.040 --> 27:14.040
我们把 export

27:14.040 --> 27:16.040
default 去掉

27:17.040 --> 27:19.040
那么现在呢

27:19.040 --> 27:21.040
我们需要通过

27:21.040 --> 27:23.040
conlect

27:23.040 --> 27:25.040
通过这个函数

27:25.040 --> 27:26.040
跟谁呢

27:26.040 --> 27:28.040
让仓库的数据

27:28.040 --> 27:30.040
和这个东西进行连接

27:30.040 --> 27:31.040
接下来我们再说一下

27:31.040 --> 27:34.040
怎么进行连接

27:34.040 --> 27:36.040
这里干脆这样子

27:36.040 --> 27:38.040
我先不用rex

27:38.040 --> 27:39.040
所谓大个式的库

27:39.040 --> 27:40.040
我们就手写

27:40.040 --> 27:41.040
就手写

27:41.040 --> 27:42.040
这样子呢

27:42.040 --> 27:43.040
你理解起来

27:43.040 --> 27:44.040
更加容易一点

27:44.040 --> 27:45.040
这里呢

27:45.040 --> 27:46.040
稍微有那么一丢丢的招

27:46.040 --> 27:47.040
其实也不会很招

27:47.040 --> 27:48.040
只要你理解了

27:48.040 --> 27:49.040
就不会很招

27:49.040 --> 27:50.040
那么我们刚才呢

27:50.040 --> 27:52.040
写到一个展示组建

27:52.040 --> 27:54.040
现在我们不接触这个库

27:54.040 --> 27:55.040
跟那个库没有任何关系

27:55.040 --> 27:56.040
我们连这个都不用

27:56.040 --> 27:58.040
连这个玩意都不用

27:58.040 --> 28:01.420
我们这里呢

28:01.420 --> 28:02.420
都不用

28:02.420 --> 28:04.730
都不用

28:04.730 --> 28:05.730
这样子

28:05.730 --> 28:06.730
都不用

28:06.730 --> 28:07.730
跟这个没关系

28:07.730 --> 28:09.730
我们这里就返回个def

28:09.730 --> 28:10.730
好

28:10.730 --> 28:11.730
康乘里面

28:11.730 --> 28:12.730
我们完全手写

28:12.730 --> 28:13.730
帮助大家理解这一点

28:13.730 --> 28:14.730
当然手写起来

28:14.730 --> 28:16.730
肯定要稍微麻烦一点

28:16.730 --> 28:18.730
但是你理解了手写之后

28:18.730 --> 28:19.730
你自然而然就理解了

28:19.730 --> 28:20.730
它那个conlect

28:20.730 --> 28:21.730
有什么用了

28:21.730 --> 28:22.730
我们来写一下

28:22.730 --> 28:24.730
就说这是一个展示组建

28:24.730 --> 28:25.730
对吧

28:25.730 --> 28:26.730
这是一个展示组建

28:26.730 --> 28:28.730
那么它里面的提供界面

28:28.730 --> 28:29.730
那么现在呢

28:29.730 --> 28:32.730
我们来再来写一个容器组建

28:32.730 --> 28:34.730
容器组建做什么呢

28:34.730 --> 28:35.730
来提供数据

28:35.730 --> 28:37.730
这是一种非常非常常见的

28:37.730 --> 28:39.730
在react里面一种开发方式

28:39.730 --> 28:40.730
好

28:40.730 --> 28:41.730
于是呢

28:41.730 --> 28:42.730
我们这里为了

28:42.730 --> 28:43.730
因为它要有数据嘛

28:43.730 --> 28:44.730
我们通常用内组建

28:44.730 --> 28:45.730
写这么一个容器组建

28:45.730 --> 28:46.730
class

28:46.730 --> 28:48.730
给它取个名字叫做

28:48.730 --> 28:49.730
counter

28:49.730 --> 28:50.730
container

28:50.730 --> 28:52.730
这么一个内组建

28:52.730 --> 28:53.730
extends

28:53.730 --> 28:54.730
react

28:54.730 --> 28:55.730
component

28:55.730 --> 28:57.730
counter

28:57.730 --> 28:58.730
g-react

28:58.730 --> 28:59.730
component

28:59.730 --> 29:00.730
然后呢

29:00.730 --> 29:01.730
它渲染的时候

29:01.730 --> 29:02.730
渲染啥呢

29:02.730 --> 29:03.730
它渲染的是不是这个组建

29:03.730 --> 29:04.730
对吧

29:04.730 --> 29:05.730
它自己没有任何界面

29:05.730 --> 29:07.730
它只是来渲染其他组建的

29:07.730 --> 29:08.730
它不一定

29:08.730 --> 29:09.730
当然不一定是一个组建

29:09.730 --> 29:11.730
有可能是有多个组建

29:11.730 --> 29:13.730
这里return

29:13.730 --> 29:15.730
那么这个组建

29:15.730 --> 29:16.730
不是需要数据吗

29:16.730 --> 29:17.730
对不对

29:17.730 --> 29:18.730
我这里呢

29:18.730 --> 29:19.730
给你数据

29:19.730 --> 29:20.730
我给你提供数据

29:20.730 --> 29:21.730
那么数据在哪呢

29:21.730 --> 29:22.730
数据呢

29:22.730 --> 29:23.730
我们就认为

29:23.730 --> 29:24.730
来自于

29:24.730 --> 29:25.730
状态

29:25.730 --> 29:26.730
来自于状态

29:26.730 --> 29:28.730
我的数据来自于哪

29:28.730 --> 29:32.170
我们就认为来自于状态

29:32.170 --> 29:34.170
这里需要是一个什么样的状态呢

29:34.170 --> 29:35.170
你看一下

29:35.170 --> 29:37.170
这个玩意它需要什么样的数据吗

29:37.170 --> 29:38.170
它需要什么样的数据

29:38.170 --> 29:40.170
我们就需要什么样的状态

29:40.170 --> 29:41.170
就这么简单

29:41.170 --> 29:42.170
那么这里呢

29:42.170 --> 29:44.170
它需要什么样的数据呢

29:44.170 --> 29:45.170
你想一想

29:45.170 --> 29:46.170
需要什么数据

29:46.170 --> 29:47.170
它需要的数据

29:47.170 --> 29:49.170
是不是就是一个number

29:49.170 --> 29:50.170
看一下

29:50.170 --> 29:52.170
需要的数据是不是number

29:52.170 --> 29:53.170
那么我们这个地方呢

29:53.170 --> 29:54.170
是不是要写个number

29:54.170 --> 29:55.170
对不对

29:55.170 --> 29:57.170
那么这个number哪来的呢

29:57.170 --> 29:59.170
是来自于仓库啊

29:59.170 --> 30:00.170
这个number

30:00.170 --> 30:02.170
它数据是不是来自于仓库

30:02.170 --> 30:03.170
对不对

30:03.170 --> 30:04.170
好

30:04.170 --> 30:05.170
那么我们要从仓库里边

30:05.170 --> 30:06.170
去把这个数据取出来

30:06.170 --> 30:07.170
我们看一下

30:07.170 --> 30:08.170
我们之前写的仓库啊

30:08.170 --> 30:11.170
仓库里边不是有一个

30:11.170 --> 30:12.170
这个reducer吧

30:12.170 --> 30:13.170
对吧

30:13.170 --> 30:14.170
数据在这

30:14.170 --> 30:15.170
看一下

30:15.170 --> 30:16.170
数据在这

30:16.170 --> 30:17.170
对吧

30:17.170 --> 30:18.170
在counter里边

30:18.170 --> 30:19.170
好

30:19.170 --> 30:20.170
然后呢

30:20.170 --> 30:21.170
我们在这

30:21.170 --> 30:23.170
到这来

30:23.170 --> 30:24.170
这里呢

30:24.170 --> 30:25.170
把导入这个仓库

30:25.170 --> 30:26.170
导入这个仓库

30:26.170 --> 30:27.170
store

30:27.170 --> 30:28.170
from

30:29.170 --> 30:30.170
第二点写刚

30:30.170 --> 30:31.170
store

30:31.170 --> 30:32.170
好

30:32.170 --> 30:33.170
把仓库导入进来

30:33.170 --> 30:34.170
那么仓库里边

30:34.170 --> 30:35.170
不是有一个方法吗

30:35.170 --> 30:36.170
什么方法

30:36.170 --> 30:37.170
是不是store的getState

30:37.170 --> 30:38.170
对吧

30:38.170 --> 30:39.170
是不是可以拿到数据

30:39.170 --> 30:40.170
对不对

30:40.170 --> 30:41.170
但是呢

30:41.170 --> 30:42.170
这样子拿到了是谁

30:42.170 --> 30:43.170
拿到了是不是整个数据啊

30:43.170 --> 30:45.170
是不是拿到了是整个

30:45.170 --> 30:48.170
整个就是仓库里边的数据

30:48.170 --> 30:49.170
对吧

30:49.170 --> 30:51.170
来自于整个仓库里边的数据

30:51.170 --> 30:53.170
而不是我们想要的

30:53.170 --> 30:54.170
只要这个

30:54.170 --> 30:55.170
因为我们这里只要这个number

30:55.170 --> 30:56.170
你要给我学生干嘛呢

30:56.170 --> 30:58.170
我这个地方也不需要学生啊

30:58.170 --> 31:00.170
我们只需要取仓库

31:00.170 --> 31:02.170
那里边那么一点点数据

31:02.170 --> 31:03.170
完成了

31:03.170 --> 31:04.170
所以说呢

31:04.170 --> 31:05.170
我们这一块取的呢

31:05.170 --> 31:06.170
来自于

31:06.170 --> 31:08.170
仓库的一部分数据

31:08.170 --> 31:10.170
并不是全部的数据

31:10.170 --> 31:11.170
于是呢

31:11.170 --> 31:12.170
为了方便

31:12.170 --> 31:13.170
为了方便

31:13.170 --> 31:14.170
后边数据代码

31:14.170 --> 31:15.170
我这里呢

31:15.170 --> 31:16.170
就简单的处理一下

31:16.170 --> 31:17.170
处理一下

31:17.170 --> 31:18.170
怎么处理呢

31:18.170 --> 31:20.860
我们这样来处理

31:20.860 --> 31:21.860
写这么一个函数

31:21.860 --> 31:22.860
这个函数呢

31:22.860 --> 31:23.860
给他取个名字叫做

31:23.860 --> 31:24.860
map

31:24.860 --> 31:25.860
stat

31:25.860 --> 31:26.860
to

31:26.860 --> 31:28.860
probs

31:29.860 --> 31:30.860
你给我传一个什么呢

31:30.860 --> 31:32.860
传一个状态进来

31:32.860 --> 31:33.860
你给我传一个状态进来

31:33.860 --> 31:34.860
就是

31:34.860 --> 31:35.860
这个状态呢

31:35.860 --> 31:36.860
是整个仓库的状态

31:36.860 --> 31:37.860
这个状态

31:37.860 --> 31:39.860
是整个仓库的状态

31:39.860 --> 31:40.860
你给我传一个状态进来

31:40.860 --> 31:41.860
我给你返回

31:41.860 --> 31:43.860
你需要的数据

31:43.860 --> 31:44.860
我给你返回需要的数据

31:44.860 --> 31:45.860
需要的数据是什么呢

31:45.860 --> 31:46.860
就是这个状

31:46.860 --> 31:48.860
我们就是一个number数据

31:48.860 --> 31:50.860
我要的就不就是个number数据嘛

31:50.860 --> 31:51.860
对

31:51.860 --> 31:52.860
咱们呢

31:52.860 --> 31:53.860
把这个stat

31:53.860 --> 31:54.860
第二是吗

31:54.860 --> 31:56.860
第二

31:56.860 --> 31:57.860
我们之前写的啥

31:57.860 --> 31:59.860
之前写的counter对吧

31:59.860 --> 32:00.860
我们仓库里边

32:00.860 --> 32:01.860
不是一个counter的数据吗

32:01.860 --> 32:02.860
对不对

32:02.860 --> 32:03.860
counter

32:03.860 --> 32:05.860
我是接着之前来做的

32:05.860 --> 32:06.860
好

32:06.860 --> 32:07.860
我们写上这么一个函数

32:07.860 --> 32:08.860
这个函数的作用

32:08.860 --> 32:11.860
就是根据整个仓库的状态

32:13.860 --> 32:17.860
将整个仓库的状态

32:17.860 --> 32:18.860
硬设

32:18.860 --> 32:19.860
为什么要硬设

32:19.860 --> 32:20.860
叫map

32:20.860 --> 32:21.860
map就是硬设的意思

32:21.860 --> 32:22.860
从一个数据

32:22.860 --> 32:23.860
硬设到另一个数据

32:23.860 --> 32:28.860
硬设到当前需要的数据

32:28.860 --> 32:30.860
我们只需要这个number就行了

32:30.860 --> 32:31.860
对吧

32:31.860 --> 32:32.860
number就行了

32:32.860 --> 32:33.860
好

32:33.860 --> 32:34.860
那么这里写好了之后

32:34.860 --> 32:35.860
我们那个状态

32:35.860 --> 32:36.860
是不是可以调用这个函数来的

32:36.860 --> 32:37.860
拿到

32:37.860 --> 32:38.860
那么这里

32:38.860 --> 32:39.860
我们可以这样子写

32:39.860 --> 32:42.430
counter

32:42.430 --> 32:43.430
看着

32:43.430 --> 32:44.430
super

32:44.430 --> 32:48.260
prose

32:48.260 --> 32:50.260
然后我的状态来自于哪

32:50.260 --> 32:51.260
是不是可以调用这个函数

32:51.260 --> 32:53.260
map to props

32:53.260 --> 32:54.260
我给他什么

32:54.260 --> 32:56.260
给他整个仓库的数据

32:56.260 --> 32:58.260
store.getState

32:58.260 --> 32:59.260
对吧

32:59.260 --> 33:00.260
给他整个仓库的数据

33:00.260 --> 33:02.260
把整个仓库的数据给他

33:02.260 --> 33:04.260
然后他来帮我硬设成为一个

33:04.260 --> 33:06.260
我需要的数据

33:06.260 --> 33:07.260
对吧

33:07.260 --> 33:08.260
这是我们容器组建

33:08.260 --> 33:09.260
容器组建不是在提供数据的吗

33:09.260 --> 33:10.260
我的数据哪来的

33:10.260 --> 33:11.260
我从仓库里边去拿

33:11.260 --> 33:12.260
通过这个函数

33:12.260 --> 33:13.260
来硬设成为一个状态

33:13.260 --> 33:15.260
那么就相当于是

33:15.260 --> 33:16.260
这个状态

33:16.260 --> 33:17.260
这个状态

33:17.260 --> 33:18.260
相当于是

33:18.260 --> 33:19.260
这个状态写了

33:19.260 --> 33:20.260
写了这个东西

33:22.260 --> 33:23.260
这个状态

33:23.260 --> 33:24.260
写的是不是这个东西

33:24.260 --> 33:26.260
store.getState

33:26.260 --> 33:27.260
它初始状态

33:27.260 --> 33:28.260
来自于 counter

33:28.260 --> 33:29.260
对不对

33:29.260 --> 33:30.260
是不是来自于这

33:30.260 --> 33:32.260
相当于是写了这么一句话

33:32.260 --> 33:34.260
只不过我用了一个函数

33:34.260 --> 33:35.260
封装了一下

33:35.260 --> 33:36.260
就这么简单

33:36.260 --> 33:37.260
那么这里

33:37.260 --> 33:38.260
counter 这里

33:38.260 --> 33:39.260
它不是需要属性吗

33:39.260 --> 33:40.260
对不对

33:40.260 --> 33:41.260
那我的数据

33:41.260 --> 33:42.260
是不是可以通过

33:42.260 --> 33:43.260
我的数据

33:43.260 --> 33:44.260
是不是可以通过这样的

33:44.260 --> 33:45.260
表达是

33:45.260 --> 33:46.260
this.getState

33:46.260 --> 33:47.260
是不是可以展开

33:47.260 --> 33:48.260
是不是能够获取

33:48.260 --> 33:49.260
它就把我的数据

33:49.260 --> 33:50.260
就是我状态里边的数据

33:50.260 --> 33:51.260
全部给它了

33:51.260 --> 33:52.260
对吧

33:52.260 --> 33:53.260
全部给它了

33:53.260 --> 33:54.260
好

33:54.260 --> 33:55.260
那么接下来

33:55.260 --> 33:56.260
我们先不处理事件

33:56.260 --> 33:57.260
接下来

33:57.260 --> 33:58.260
我们把这个组件导出

33:58.260 --> 33:59.260
导出这个组件

33:59.260 --> 34:00.260
export

34:00.260 --> 34:01.260
defort

34:01.260 --> 34:02.260
导出这个组件

34:02.260 --> 34:03.260
咱们来看一下

34:03.260 --> 34:04.260
它是否能够

34:04.260 --> 34:06.260
拿到仓库里边的数据

34:06.260 --> 34:07.260
我们在这里

34:07.260 --> 34:08.260
index 这里

34:10.260 --> 34:11.260
app 这里

34:11.260 --> 34:12.260
我们导入这个组件

34:12.260 --> 34:14.260
导入我们要用的这个组件

34:14.260 --> 34:17.260
叫做 counter

34:18.260 --> 34:20.260
content

34:22.260 --> 34:23.260
content

34:23.260 --> 34:24.260
导入这个组件

34:24.260 --> 34:25.260
那么这里呢

34:25.260 --> 34:26.260
我们选择这个组件

34:27.260 --> 34:28.260
选择这个组件

34:28.260 --> 34:29.260
保存

34:29.260 --> 34:30.260
你看一下

34:30.260 --> 34:31.260
是不是实

34:31.260 --> 34:32.260
这个实是哪来的

34:32.260 --> 34:34.260
实是不是就是仓库里边的数据

34:34.260 --> 34:35.260
对吧

34:35.260 --> 34:37.260
实就是仓库里边的数据

34:37.260 --> 34:38.260
你看

34:38.260 --> 34:39.260
因为当时也启动起来了

34:39.260 --> 34:40.260
没问题吧

34:41.260 --> 34:42.260
这就是仓库里边的数据

34:42.260 --> 34:43.260
拿到了

34:44.260 --> 34:45.260
好

34:45.260 --> 34:46.260
然后接下来

34:46.260 --> 34:48.260
我这里没有加试诫

34:48.260 --> 34:49.260
对吧

34:49.260 --> 34:50.260
为什么没有加试诫

34:50.260 --> 34:51.260
是因为我这里没它传递试诫

34:51.260 --> 34:52.260
对不对

34:52.260 --> 34:53.260
是不是没有传递试诫

34:53.260 --> 34:54.260
没问题吧

34:54.260 --> 34:55.260
我这里是不是没传递试诫

34:55.260 --> 34:56.260
没有传递试诫

34:56.260 --> 34:57.260
好

34:57.260 --> 34:58.260
那么试诫

34:58.260 --> 34:59.260
它是不是有一些试诫

34:59.260 --> 35:00.260
就是这些试诫

35:00.260 --> 35:02.260
那么这些函数是不是得传递给它

35:02.260 --> 35:03.260
对吧

35:03.260 --> 35:04.260
是不是得传递一个函数给它

35:04.260 --> 35:06.260
我们这里这样子

35:06.260 --> 35:07.260
我这里呢

35:07.260 --> 35:08.260
U 写这么一个函数

35:08.260 --> 35:10.260
U 写这么一个函数

35:10.260 --> 35:11.260
这个函数的名字叫做

35:11.260 --> 35:13.260
map

35:13.260 --> 35:15.260
map

35:15.260 --> 35:17.260
dispatch

35:17.260 --> 35:19.260
to props

35:19.260 --> 35:21.260
因为你的事件处理

35:21.260 --> 35:23.260
你这些处理是不是也是属性

35:23.260 --> 35:24.260
对不对

35:24.260 --> 35:25.260
那么我比较多

35:25.260 --> 35:27.260
映射什么什么倒属性

35:27.260 --> 35:29.260
映射什么倒属性的

35:29.260 --> 35:30.260
dispatch

35:30.260 --> 35:31.260
因为我们点这个按钮的时候

35:31.260 --> 35:32.260
实际上改变了是谁

35:32.260 --> 35:34.260
改变了是仓库里边的数据

35:34.260 --> 35:36.260
所以说最终是要用dispatch

35:36.260 --> 35:38.260
来变化仓库里边的数据

35:38.260 --> 35:39.260
好

35:39.260 --> 35:40.260
那么这个函数怎么写呢

35:40.260 --> 35:41.260
这个函数

35:41.260 --> 35:42.260
我们这样子写

35:42.260 --> 35:43.260
你给我一个啥

35:43.260 --> 35:44.260
给我一个dispatch

35:44.260 --> 35:46.260
你把dispatch给我

35:46.260 --> 35:48.260
dispatch是个啥

35:48.260 --> 35:50.260
dispatch是一个啥

35:50.260 --> 35:52.260
dispatch是不是就是一个

35:52.260 --> 35:55.260
触发action的那么一个方法

35:55.260 --> 35:56.260
对吧

35:56.260 --> 35:57.260
OK 你把这个dispatch

35:57.260 --> 35:58.260
这个函数给我

35:58.260 --> 36:01.260
我来给你返回一个东西

36:01.260 --> 36:02.260
返回什么呢

36:02.260 --> 36:03.260
你不是要事件吗

36:03.260 --> 36:04.260
你要什么事件

36:04.260 --> 36:06.260
一个第一个事件

36:06.260 --> 36:07.260
这个事件

36:07.260 --> 36:08.260
对吧

36:08.260 --> 36:09.260
这是一个事件

36:09.260 --> 36:11.260
你不是要这些属性吗

36:11.260 --> 36:12.260
那我给你返回个对象

36:12.260 --> 36:14.260
这个对象里面就包含了这些属性

36:14.260 --> 36:15.260
对吧

36:15.260 --> 36:17.260
我给你返回这么一个东西

36:17.260 --> 36:18.260
好

36:18.260 --> 36:22.530
我给你返回这么一个东西

36:22.530 --> 36:24.530
那么自然而然

36:24.530 --> 36:25.530
每个是一个

36:25.530 --> 36:27.530
每个是一个函数

36:27.530 --> 36:28.530
每个是一个函数

36:28.530 --> 36:29.530
这个函数呢

36:29.530 --> 36:30.530
你可以用方式

36:30.530 --> 36:31.530
也可以用别的

36:31.530 --> 36:33.530
比方说我们这里可以用这个

36:33.530 --> 36:34.530
这样子写也可以

36:34.530 --> 36:36.530
怎么写都无所谓

36:36.530 --> 36:37.530
总之呢

36:37.530 --> 36:38.530
我这个返回的对象里边

36:38.530 --> 36:40.530
它提供了这么一些函数

36:40.530 --> 36:41.530
对象的属性里边

36:41.530 --> 36:42.530
提供了这么一些函数

36:42.530 --> 36:44.530
那么比方说这个东西已经写好了

36:44.530 --> 36:45.530
已经写好了

36:45.530 --> 36:46.530
那么现在呢

36:46.530 --> 36:48.530
我要做的是什么事情呢

36:48.530 --> 36:50.530
我要做的事情就这一件

36:50.530 --> 36:53.530
我只需要在render的时候

36:53.530 --> 36:54.530
render的时候不是要

36:54.530 --> 36:55.530
还要传递时间吗

36:55.530 --> 36:56.530
ok

36:56.530 --> 36:57.530
我这里呢

36:57.530 --> 36:59.530
调用这个map

36:59.530 --> 37:00.530
dispatch to props

37:00.530 --> 37:01.530
我们调用这个

37:01.530 --> 37:03.530
mapdispatch to props

37:03.530 --> 37:05.530
调用这个东西

37:05.530 --> 37:06.530
然后呢

37:06.530 --> 37:07.530
把这个把这个东西

37:07.530 --> 37:08.530
把什么传进去

37:08.530 --> 37:10.530
把dispatch传进去

37:10.530 --> 37:11.530
dispatch呢

37:11.530 --> 37:12.530
因为一会儿呢

37:12.530 --> 37:13.530
这里肯定要触发

37:13.530 --> 37:15.530
触发x来改变

37:15.530 --> 37:16.530
那么这个dispatch呢

37:16.530 --> 37:19.530
我们可以通过store里边来拿到

37:19.530 --> 37:20.530
我们把这个store

37:20.530 --> 37:22.530
dispatch这个函数给它

37:22.530 --> 37:24.530
那么它是不是把dispatch传进去了

37:24.530 --> 37:25.530
好

37:25.530 --> 37:26.530
那它返回什么呢

37:26.530 --> 37:27.530
是返回的是

37:27.530 --> 37:28.530
就是一个对象

37:28.530 --> 37:29.530
对象里边有些这些属性

37:29.530 --> 37:30.530
对吧

37:30.530 --> 37:31.530
那么我们认为这些属

37:31.530 --> 37:32.530
这个对象呢

37:32.530 --> 37:35.530
就是一个event

37:35.530 --> 37:36.530
event

37:36.530 --> 37:37.530
就是一些事件

37:37.530 --> 37:39.530
事件event handlers

37:39.530 --> 37:41.530
事件处理函数

37:41.530 --> 37:42.530
好那么这里呢

37:42.530 --> 37:44.530
我是不是把这个展开就完事了

37:44.530 --> 37:45.530
对吧

37:45.530 --> 37:47.530
是不是把这个展开就完事了

37:47.530 --> 37:49.530
是不是很简单

37:49.530 --> 37:50.530
那么这个对象一展开

37:50.530 --> 37:51.530
是不是把这些东西

37:51.530 --> 37:52.530
全部传过去了

37:52.530 --> 37:53.530
对吧

37:53.530 --> 37:54.530
把这些函数全部传过去了

37:54.530 --> 37:55.530
你看看

37:55.530 --> 37:56.530
那么接下来我们要做的事情

37:56.530 --> 37:57.530
就是把这东西处理一下

37:57.530 --> 37:59.530
怎么处理呢

37:59.530 --> 38:00.530
当它调用这个方法的时候

38:00.530 --> 38:01.530
干嘛

38:01.530 --> 38:02.530
我要干嘛

38:02.530 --> 38:04.530
我是不是触发dispatch

38:04.530 --> 38:05.530
触发啥

38:05.530 --> 38:06.530
触发一个x

38:06.530 --> 38:08.530
那么x来自于哪

38:08.530 --> 38:10.530
来自于我们之前写的

38:10.530 --> 38:11.530
x创建函数

38:11.530 --> 38:13.530
通过x创建函数

38:13.530 --> 38:15.530
来拿到x

38:15.530 --> 38:17.530
x创建函数

38:17.530 --> 38:20.530
counter里边

38:20.530 --> 38:22.530
来拿到各种x

38:22.530 --> 38:24.530
什么async

38:24.530 --> 38:25.530
decrease

38:25.530 --> 38:26.530
async

38:26.530 --> 38:27.530
increase

38:27.530 --> 38:28.530
increase

38:28.530 --> 38:29.530
decrease

38:29.530 --> 38:30.530
对吧

38:30.530 --> 38:31.530
把这些东西拿到就完事了

38:31.530 --> 38:32.530
好那么这里呢

38:32.530 --> 38:33.530
我们dispatch

38:33.530 --> 38:34.530
触发一个什么呢

38:34.530 --> 38:35.530
async

38:35.530 --> 38:36.530
increase

38:36.530 --> 38:37.530
触发x就完事了

38:37.530 --> 38:38.530
它是不是可以改变仓库

38:38.530 --> 38:39.530
对吧

38:39.530 --> 38:40.530
然后这里呢

38:40.530 --> 38:41.530
async

38:41.530 --> 38:42.530
decrease

38:42.530 --> 38:44.530
是不是也可以改变仓库

38:44.530 --> 38:45.530
increase

38:45.530 --> 38:47.530
当我们增加的时候呢

38:47.530 --> 38:49.530
我们这里创建increase

38:49.530 --> 38:50.530
这里dispatch

38:50.530 --> 38:51.530
increase

38:51.530 --> 38:52.530
这里呢

38:52.530 --> 38:53.530
dispatch

38:53.530 --> 38:54.530
decrease

38:54.530 --> 38:55.530
对不对

38:55.530 --> 38:56.530
是不是这些函数就写完了

38:56.530 --> 38:57.530
那么我这里是不是把

38:57.530 --> 38:59.530
仓库里边的东西就传给它了

38:59.530 --> 39:00.530
对不对

39:00.530 --> 39:01.530
是不是传给它了

39:01.530 --> 39:02.530
保存一下

39:02.530 --> 39:03.530
好好看一下个代码

39:03.530 --> 39:04.530
这代码其实很简单

39:04.530 --> 39:06.530
就这两个是一个辅助函数

39:06.530 --> 39:07.530
反回一些数据

39:07.530 --> 39:08.530
对吧

39:08.530 --> 39:09.530
它需要的仓库里边数据

39:09.530 --> 39:10.530
给它做一个映射

39:10.530 --> 39:11.530
反回出去

39:11.530 --> 39:12.530
一个呢是反

39:12.530 --> 39:14.530
反回它需要的处理函数

39:14.530 --> 39:15.530
它不是有时间吗

39:15.530 --> 39:16.530
时间里面处理函数

39:16.530 --> 39:17.530
它不知道怎么处理

39:17.530 --> 39:18.530
ok

39:18.530 --> 39:19.530
我来吧

39:19.530 --> 39:20.530
我来帮你处理

39:20.530 --> 39:21.530
好那么这些处理函数里边

39:21.530 --> 39:22.530
目前我们处理函数里

39:22.530 --> 39:23.530
比较作用就是改变

39:23.530 --> 39:24.530
仓库里边的数据

39:24.530 --> 39:25.530
对吧

39:25.530 --> 39:26.530
那么我现在把数据给你

39:26.530 --> 39:28.530
我又把什么处理函数给你

39:28.530 --> 39:29.530
那么这个

39:29.530 --> 39:30.530
组件说写完了

39:30.530 --> 39:32.530
这个组件就是来提供数据的

39:32.530 --> 39:33.530
好那么写完了之后

39:33.530 --> 39:34.530
接下来我们来看一下

39:34.530 --> 39:36.530
我们点加注意看

39:36.530 --> 39:37.530
你看

39:37.530 --> 39:39.530
仓库里边是触发了increase

39:39.530 --> 39:41.530
它从10变成11了

39:41.530 --> 39:42.530
我们再点加

39:42.530 --> 39:43.530
从11变成12了

39:43.530 --> 39:44.530
对吧

39:44.530 --> 39:45.530
好

39:45.530 --> 39:47.530
一步加

39:47.530 --> 39:49.530
我们这里写错了

39:49.530 --> 39:51.530
一步加这里写错了

39:51.530 --> 39:53.530
a single increase

39:53.530 --> 39:55.530
a single increase在这

39:55.530 --> 39:56.530
我这里

39:56.530 --> 39:58.530
怎么到处都写翻了

39:58.530 --> 40:01.530
这里是decrease

40:02.530 --> 40:03.530
加

40:03.530 --> 40:04.530
你看没问题吧

40:04.530 --> 40:05.530
再加没问题吧

40:05.530 --> 40:06.530
一步加

40:06.530 --> 40:07.530
好等一下

40:07.530 --> 40:09.530
两秒钟加了

40:09.530 --> 40:10.530
对吧

40:10.530 --> 40:11.530
好

40:11.530 --> 40:12.530
那么这里是不是处理完了

40:12.530 --> 40:13.530
对不对

40:13.530 --> 40:14.530
处理完了

40:14.530 --> 40:17.530
好那么处理完了之后

40:17.530 --> 40:19.530
我们现在

40:19.530 --> 40:20.530
还有一个问题没解决

40:20.530 --> 40:21.530
就处理完了过后

40:21.530 --> 40:23.530
你看这里是不是没有更新

40:23.530 --> 40:24.530
对吧

40:24.530 --> 40:25.530
界面没有更新

40:25.530 --> 40:26.530
为什么没有更新呢

40:26.530 --> 40:27.530
因为仓库变了

40:27.530 --> 40:29.530
跟我状态有啥关系呢

40:29.530 --> 40:31.530
组建要重新渲染

40:31.530 --> 40:32.530
是不是要set state

40:32.530 --> 40:33.530
对吧

40:33.530 --> 40:34.530
set state

40:34.530 --> 40:37.530
就是当状态改变的时候

40:37.530 --> 40:39.530
当状态改变的时候

40:39.530 --> 40:41.530
那么我要重新

40:41.530 --> 40:42.530
我才会重新渲染

40:42.530 --> 40:43.530
但这里的状态有没有改变

40:43.530 --> 40:44.530
是没有改变

40:44.530 --> 40:45.530
对吧

40:45.530 --> 40:46.530
状态是永远没改变的

40:46.530 --> 40:47.530
它始终是或许的是

40:47.530 --> 40:48.530
最初的仓库状态

40:48.530 --> 40:50.530
那么这里怎么办呢

40:50.530 --> 40:51.530
很简单

40:51.530 --> 40:52.530
我只需要给它加一个

40:52.530 --> 40:53.530
监听器就完事了

40:53.530 --> 40:54.530
subscribe

40:54.530 --> 40:55.530
对吧

40:55.530 --> 40:56.530
是不是学过的

40:56.530 --> 40:59.530
当我们仓库数据变化的时候

40:59.530 --> 41:00.530
我要做一件事

41:00.530 --> 41:02.530
当我们仓库数据变化的时候

41:02.530 --> 41:03.530
要做一件事

41:03.530 --> 41:04.530
做什么事呢

41:04.530 --> 41:06.530
set state

41:06.530 --> 41:08.530
重新改变状态

41:08.530 --> 41:10.530
那么重新改变状态

41:10.530 --> 41:12.530
新的状态值

41:12.530 --> 41:14.530
新的状态值来自于哪

41:14.530 --> 41:16.530
是不是又可以重新调问一个函数

41:16.530 --> 41:17.530
你看为什么要封装成一个函数

41:17.530 --> 41:19.530
就是避免重复代码

41:19.530 --> 41:20.530
对吧

41:20.530 --> 41:21.530
是不是又可以重新调问这个函数

41:21.530 --> 41:23.530
来获得新的状态对象

41:23.530 --> 41:24.530
对不对

41:24.530 --> 41:25.530
来获得新的状态对象

41:25.530 --> 41:27.530
就这样子写

41:27.530 --> 41:29.530
我又把仓库当前的状态告诉你

41:29.530 --> 41:32.530
你带帮我获取新的状态对象

41:32.530 --> 41:34.530
然后我把新的状态对象传进去

41:34.530 --> 41:36.530
你去过过重新设置状态

41:36.530 --> 41:38.530
当仓库发生

41:38.530 --> 41:40.530
状态发生改变的时候

41:40.530 --> 41:41.530
我们就做这么一件事情就行了

41:41.530 --> 41:42.530
就行了

41:42.530 --> 41:43.530
那么这样子

41:43.530 --> 41:44.530
是不是仓库状态一变

41:44.530 --> 41:45.530
那么

41:45.530 --> 41:46.530
组件就收到通知了

41:46.530 --> 41:47.530
那么它就会重新选了

41:47.530 --> 41:48.530
就这么简单

41:48.530 --> 41:49.530
保存

41:49.530 --> 41:50.530
你看一下

41:50.530 --> 41:51.530
加

41:51.530 --> 41:52.530
你看是不是变了

41:52.530 --> 41:53.530
仓库变了

41:53.530 --> 41:54.530
那么这里

41:54.530 --> 41:55.530
没有监听器存在

41:55.530 --> 41:56.530
那么这里

41:56.530 --> 41:58.530
又会导致重新设置状态

41:58.530 --> 41:59.530
又会

41:59.530 --> 42:00.530
又会添加

42:00.530 --> 42:01.530
那么再加

42:01.530 --> 42:02.530
再加

42:02.530 --> 42:03.530
再加

42:03.530 --> 42:04.530
你看一下

42:04.530 --> 42:05.530
好

42:05.530 --> 42:06.530
然后我们看一下

42:06.530 --> 42:07.530
一步加

42:07.530 --> 42:08.530
好

42:08.530 --> 42:09.530
两秒钟过后

42:09.530 --> 42:10.530
一步减

42:10.530 --> 42:11.530
两秒钟过后

42:11.530 --> 42:12.530
减少

42:12.530 --> 42:13.530
对吧

42:13.530 --> 42:14.530
就完了

42:14.530 --> 42:15.530
你看是不是减

42:15.530 --> 42:16.530
很简单

42:16.530 --> 42:17.530
对吧

42:17.530 --> 42:18.530
很简单

42:18.530 --> 42:19.530
而我们现在回过头来

42:19.530 --> 42:20.530
再说react

42:20.530 --> 42:21.530
reducts

42:21.530 --> 42:23.530
它无非就是

42:23.530 --> 42:25.530
当你去搞定了这么一件事

42:25.530 --> 42:26.530
搞定了这件事

42:26.530 --> 42:28.530
它无非就帮你搞定了这件事

42:28.530 --> 42:30.530
这件事不用你自己去做了

42:30.530 --> 42:31.530
它可以帮你搞定

42:31.530 --> 42:33.530
你不用去写这个代码了

42:33.530 --> 42:35.530
无非就是这么一回事

42:35.530 --> 42:36.530
所以说

42:36.530 --> 42:37.530
我们把它换到

42:37.530 --> 42:39.530
刚才这是我们自己手写

42:39.530 --> 42:40.530
复制一下

42:40.530 --> 42:42.530
我们把它换回到

42:42.530 --> 42:44.530
之前的那种模式

42:45.530 --> 42:52.740
换到这种模式

42:52.740 --> 42:53.740
这里边

42:53.740 --> 42:57.310
我们这里用 counter

42:58.310 --> 42:59.310
注意

42:59.310 --> 43:01.310
我这里用的 counter 是什么呢

43:02.310 --> 43:04.310
我这里用的 counter 这个组件

43:04.310 --> 43:05.310
是这里导出的组件

43:05.310 --> 43:06.310
导出了这个组件

43:06.310 --> 43:07.310
不是上面这个组件

43:07.310 --> 43:08.310
不是上面的 counter

43:08.310 --> 43:09.310
上面的 counter

43:09.310 --> 43:10.310
它是一个展示组件

43:10.310 --> 43:12.310
你要给它提供数据的

43:12.310 --> 43:14.310
那么我们这里导出的是一个容器组件

43:14.310 --> 43:15.310
那么这里

43:15.310 --> 43:17.310
我们把它换换到之前的写法

43:17.310 --> 43:18.310
就是reducts

43:18.310 --> 43:19.310
那一块的写法

43:19.310 --> 43:20.310
reacts

43:20.310 --> 43:21.310
reducts

43:21.310 --> 43:22.310
providers

43:22.310 --> 43:23.310
那一块的写法

43:23.310 --> 43:24.310
它提供了一个上下文

43:24.310 --> 43:26.310
上下文里边就储存了仓库

43:26.310 --> 43:27.310
把仓库对象

43:27.310 --> 43:28.310
储存进去了

43:28.310 --> 43:29.310
现在我们来看一下

43:29.310 --> 43:31.310
这个地方该怎么写

43:31.310 --> 43:33.310
非常简单

43:33.310 --> 43:35.310
其他的东西不变

43:35.310 --> 43:37.310
这个仓库不要了

43:37.310 --> 43:38.310
不需要你给仓库

43:38.310 --> 43:40.310
它会从上下文里边自动去取

43:40.310 --> 43:42.310
不用你给仓库对象

43:42.310 --> 43:43.310
你这个东西保留

43:43.310 --> 43:44.310
这个东西为什么保留呢

43:44.310 --> 43:45.310
因为它也不知道

43:45.310 --> 43:46.310
你这个要从仓库

43:46.310 --> 43:47.310
印射什么样的数据

43:47.310 --> 43:48.310
到属性里边

43:48.310 --> 43:49.310
它也不知道

43:49.310 --> 43:50.310
它也不知道

43:50.310 --> 43:51.310
要印射什么样的属性

43:51.310 --> 43:52.310
对吧

43:52.310 --> 43:54.310
不是说看名字来对比

43:54.310 --> 43:56.310
那这个属性名字是Number

43:56.310 --> 43:57.310
仓库里边的数据是什么

43:57.310 --> 43:58.310
是Count

43:58.310 --> 43:59.310
Counter

43:59.310 --> 44:00.310
Counter

44:00.310 --> 44:01.310
那也不一样

44:01.310 --> 44:02.310
它没法知道

44:02.310 --> 44:03.310
你这个组件

44:03.310 --> 44:05.310
到底要取哪一块仓库数据

44:05.310 --> 44:06.310
都印过去

44:06.310 --> 44:07.310
它不知道

44:07.310 --> 44:08.310
就是仓库里边

44:08.310 --> 44:09.310
它有很多很多的数据

44:09.310 --> 44:10.310
那你这个组件

44:10.310 --> 44:11.310
需要哪一部分数据

44:11.310 --> 44:12.310
它不知道

44:12.310 --> 44:13.310
于是

44:13.310 --> 44:15.310
这个函数你得自己写

44:15.310 --> 44:17.310
然后下面这个函数

44:17.310 --> 44:18.310
也得自己写

44:18.310 --> 44:19.310
它并不知道这个数据

44:19.310 --> 44:21.310
触发了事件过后要干嘛

44:21.310 --> 44:23.310
具体要怎么去改变仓库

44:23.310 --> 44:24.310
要不要改变仓库

44:24.310 --> 44:25.310
要干嘛

44:25.310 --> 44:27.310
说这个函数你得自己写

44:27.310 --> 44:28.310
你看两个函数

44:28.310 --> 44:29.310
一个是硬设

44:29.310 --> 44:31.310
得到从整个仓库

44:31.310 --> 44:33.310
硬设出当前需要的数据

44:33.310 --> 44:35.310
一个是

44:35.310 --> 44:36.310
通过dispatch

44:36.310 --> 44:38.310
硬设出处理函数

44:38.310 --> 44:41.310
硬设处理函数

44:41.310 --> 44:44.310
就是事件处理函数

44:44.310 --> 44:45.310
一个是硬设数据的

44:45.310 --> 44:46.310
一个是硬设事件的

44:46.310 --> 44:47.310
你看一个组件

44:47.310 --> 44:49.310
不就是需要数据和事件处理吗

44:49.310 --> 44:50.310
无虽就是这两个东西

44:50.310 --> 44:51.310
对吧

44:51.310 --> 44:52.310
好

44:52.310 --> 44:54.310
那么有了这两个函数之后

44:54.310 --> 44:55.310
接下来

44:55.310 --> 44:57.310
下面这一坨不用理解了

44:57.310 --> 44:58.310
那么这一坨怎么写呢

44:58.310 --> 45:00.310
利用那个组件

45:00.310 --> 45:03.310
利用那个react

45:03.310 --> 45:07.310
reduct

45:07.310 --> 45:09.310
利用react

45:09.310 --> 45:11.310
利用connect函数

45:11.310 --> 45:12.310
利用这个函数

45:12.310 --> 45:13.310
它来帮你搞定

45:13.310 --> 45:14.310
connect是什么

45:14.310 --> 45:15.310
连接

45:15.310 --> 45:16.310
好

45:16.310 --> 45:17.310
那么这个函数怎么用呢

45:17.310 --> 45:21.310
这个函数有两个函数需要传递

45:21.310 --> 45:22.310
当然这两个函数

45:22.310 --> 45:23.310
也可以不传递

45:23.310 --> 45:24.310
不传递的话

45:24.310 --> 45:26.310
它就没有给它任何属性

45:26.310 --> 45:28.310
不会给它任何事件

45:28.310 --> 45:29.310
那么它有点

45:29.310 --> 45:30.310
如果传递

45:30.310 --> 45:32.310
通常情况下我们倒传递两个函数

45:32.310 --> 45:34.310
第一个参数表示

45:34.310 --> 45:37.310
我需要给它硬设的属性

45:37.310 --> 45:39.310
那么这个地方是一个函数

45:39.310 --> 45:40.310
什么函数呢

45:40.310 --> 45:42.310
就这个函数

45:42.310 --> 45:44.310
你可以直接把函数写到

45:44.310 --> 45:45.310
利民函数写到这

45:45.310 --> 45:47.310
也可以单独写出去

45:47.310 --> 45:48.310
我们通常都是单独写出去

45:48.310 --> 45:51.310
这样子看得更加清晰一点

45:51.310 --> 45:52.310
那么第一个就是这个函数

45:52.310 --> 45:54.310
那么它会通过这个函数

45:54.310 --> 45:57.310
把整个仓库的状态传进去

45:57.310 --> 46:00.310
然后得到我们需要的状态数据

46:00.310 --> 46:01.310
你看

46:01.310 --> 46:02.310
什么我们之前写过了

46:02.310 --> 46:03.310
自己写过的

46:03.310 --> 46:04.310
只要自己写过熟写过一次

46:04.310 --> 46:06.310
你就非常清楚了

46:06.310 --> 46:07.310
好

46:07.310 --> 46:08.310
第二个参数

46:08.310 --> 46:10.310
你告诉它这个

46:10.310 --> 46:13.310
告诉它这个

46:13.310 --> 46:14.310
对吧

46:14.310 --> 46:15.310
告诉它这个

46:15.310 --> 46:16.310
那么它就会知道

46:16.310 --> 46:18.310
它会把Dispatch传进去

46:18.310 --> 46:20.310
然后得到一个

46:20.310 --> 46:22.310
处理函数的一个对象

46:22.310 --> 46:24.310
封装了处理函数的一个对象

46:24.310 --> 46:25.310
好

46:25.310 --> 46:27.310
你把这两个东西传进去

46:27.310 --> 46:28.310
好

46:28.310 --> 46:29.310
传进去过后

46:29.310 --> 46:31.310
整个这一坨

46:31.310 --> 46:32.310
我现在框住这一部分

46:32.310 --> 46:34.310
它又是一个函数

46:34.310 --> 46:36.310
这反

46:36.310 --> 46:37.310
它返回的结果

46:37.310 --> 46:39.310
才是一个高阶函数

46:39.310 --> 46:40.310
它返回一个什么

46:40.310 --> 46:42.310
返回的是一个高阶函数

46:42.310 --> 46:43.310
抗那个车

46:43.310 --> 46:45.310
它返回的是一个高阶函数

46:45.310 --> 46:47.310
高阶组建

46:47.310 --> 46:49.310
那么我们第一用这个高阶组建

46:49.310 --> 46:51.310
是不是就可以

46:51.310 --> 46:52.310
因为它现在还不知道

46:52.310 --> 46:53.310
要封装哪一个组建

46:53.310 --> 46:54.310
对吧

46:54.310 --> 46:55.310
要封装哪一个组建

46:55.310 --> 46:56.310
最重要选择哪个组建

46:56.310 --> 46:57.310
它不知道

46:57.310 --> 46:59.310
就像我们刚才自己写的那一块

46:59.310 --> 47:00.310
你看

47:00.310 --> 47:01.310
现在你告诉我了

47:01.310 --> 47:02.310
这个

47:02.310 --> 47:03.310
那么这个组建

47:03.310 --> 47:04.310
你想想这个东西

47:04.310 --> 47:05.310
是不是可以写成通用的了

47:05.310 --> 47:06.310
对吧

47:06.310 --> 47:08.310
就可以写成通用的一种做法

47:08.310 --> 47:09.310
那么

47:09.310 --> 47:10.310
现在无非就是这个地方

47:10.310 --> 47:11.310
我不知道

47:11.310 --> 47:12.310
我不知道我要选择哪个组建

47:12.310 --> 47:13.310
我不知道

47:13.310 --> 47:14.310
OK你告诉我

47:14.310 --> 47:15.310
你告诉我就行了

47:15.310 --> 47:16.310
好

47:16.310 --> 47:17.310
于是通过这个高

47:17.310 --> 47:18.310
一个高阶高阶组建

47:18.310 --> 47:20.310
抗那个车

47:20.310 --> 47:23.310
返回一个高阶组建

47:23.310 --> 47:24.310
那么

47:24.310 --> 47:26.310
这个高阶组建里边

47:26.310 --> 47:27.310
你就可以把

47:27.310 --> 47:31.310
你要包装的展示组建放进去

47:31.310 --> 47:33.310
我要包装这个抗它组建

47:33.310 --> 47:34.310
那么这样子

47:34.310 --> 47:36.310
它就会自动帮你完成这么一个效果

47:36.310 --> 47:37.310
你可以想象

47:37.310 --> 47:39.310
它帮你完成这么一个效果

47:39.310 --> 47:42.310
它返回了一个容器组建

47:42.310 --> 47:45.310
传入展示组建

47:45.310 --> 47:48.310
返回一个容器组建

47:48.310 --> 47:49.310
这个容器组建

47:49.310 --> 47:51.310
就是来提供这些数据的

47:51.310 --> 47:52.310
那么这里呢

47:52.310 --> 47:54.310
export default

47:54.310 --> 47:56.310
直接到返回就完成了

47:56.310 --> 47:57.310
保存你看一下

47:57.310 --> 48:00.310
效果完全一样

48:00.310 --> 48:01.310
效果完全一样

48:01.310 --> 48:02.310
夹紧

48:02.310 --> 48:03.310
一步

48:03.310 --> 48:06.200
一步夹

48:06.200 --> 48:08.200
看一下

48:08.200 --> 48:09.200
对吧

48:09.200 --> 48:10.200
效果完全一样

48:10.200 --> 48:12.200
效果就是完全一样的

48:12.200 --> 48:14.200
这就是这里的做法

48:14.200 --> 48:15.200
那么这里呢

48:15.200 --> 48:16.200
其实我们也可以把这两句话

48:16.200 --> 48:18.200
合并成一句话

48:18.200 --> 48:20.200
把这两句话合并成一句话

48:20.200 --> 48:22.200
export default

48:22.200 --> 48:24.200
这里再写个括号

48:24.200 --> 48:25.200
counter

48:25.200 --> 48:27.200
对吧

48:27.200 --> 48:28.200
完全可以这样子

48:28.200 --> 48:29.200
合并成一句话

48:29.200 --> 48:30.200
是一样的

48:30.200 --> 48:32.200
把这个返回到高解组建

48:32.200 --> 48:33.200
再去调用高解组建

48:33.200 --> 48:34.200
把这个counter传进去

48:34.200 --> 48:36.200
让它给我返回个容器组建

48:36.200 --> 48:37.200
就完了

48:37.200 --> 48:38.200
保存

48:38.200 --> 48:39.200
你看一下

48:39.200 --> 48:40.200
我们可以观测一下

48:40.200 --> 48:43.200
就是component

48:43.200 --> 48:45.200
观测这个组建里边

48:45.200 --> 48:46.200
组建结构里边

48:46.200 --> 48:47.200
你看一下

48:47.200 --> 48:50.200
我们那个counter外面

48:50.200 --> 48:52.200
外面是不是又包含了一个东西

48:52.200 --> 48:53.200
对不对

48:53.200 --> 48:55.200
包含了一个counter

48:55.200 --> 48:56.200
所以又包含了一个counter

48:56.200 --> 48:58.200
那么这个counter

48:58.200 --> 48:59.200
是不是就是

48:59.200 --> 49:01.200
他给你封装了一个组建

49:01.200 --> 49:02.200
对吧

49:02.200 --> 49:03.200
封装了一个高解组建

49:03.200 --> 49:06.200
他这里他是用后殼来做的

49:06.200 --> 49:08.200
他还是用后殼来做的

49:08.200 --> 49:10.200
当然你也可以用一个

49:10.200 --> 49:11.200
内组建来做

49:11.200 --> 49:12.200
我们之前是用内组建写的

49:12.200 --> 49:13.200
对吧

49:13.200 --> 49:14.200
他这次更新了过后

49:14.200 --> 49:15.200
使用的是后殼

49:15.200 --> 49:17.200
以前我记得他使用的是内

49:17.200 --> 49:18.200
以前后殼出来之前

49:18.200 --> 49:19.200
使用的是内组建

49:19.200 --> 49:20.200
他们这一次

49:20.200 --> 49:22.200
现在他使用的是后殼来做的

49:22.200 --> 49:23.200
对吧

49:23.200 --> 49:24.200
就这么简单

49:24.200 --> 49:25.200
就这么简单

49:25.200 --> 49:27.200
没了

49:27.200 --> 49:29.200
那么之后

49:29.200 --> 49:30.200
后面我们讲元代码的时候

49:30.200 --> 49:32.200
我们就改成用后殼来做

49:32.200 --> 49:33.200
也挺简单的

49:33.200 --> 49:35.200
我们到时候用内

49:35.200 --> 49:36.200
用内组建做一次

49:36.200 --> 49:37.200
也用后殼来做一次

49:37.200 --> 49:39.700
都行

49:39.700 --> 49:40.700
好了

49:40.700 --> 49:41.700
那就没啥了

49:41.700 --> 49:42.700
那么这里

49:42.700 --> 49:43.700
就是Connect的作用

49:43.700 --> 49:44.700
好

49:44.700 --> 49:45.700
Connect

49:45.700 --> 49:46.700
这两个参数是可以不传递的

49:46.700 --> 49:47.700
比方说

49:47.700 --> 49:48.700
第一个参数不传递

49:48.700 --> 49:49.700
那么你可以给它写NOW

49:49.700 --> 49:50.700
不传递

49:50.700 --> 49:52.700
那么就表示的是

49:52.700 --> 49:53.700
我没有任何属性给力

49:53.700 --> 49:55.700
它不会映射任何属性

49:55.700 --> 49:56.700
给这个counter

49:56.700 --> 49:57.700
然后另外

49:57.700 --> 49:58.700
第二个属性

49:58.700 --> 49:59.700
如果说写NOW

49:59.700 --> 50:00.700
或者是不传

50:00.700 --> 50:02.700
那么就没有任何事件映射过去

50:02.700 --> 50:04.700
当然如果你既有事件

50:04.700 --> 50:05.700
又有属性的话

50:05.700 --> 50:07.700
那么就把这两个都写上

50:07.700 --> 50:08.700
都写上

50:08.700 --> 50:09.700
就像

50:09.700 --> 50:10.700
这就是Connect

50:10.700 --> 50:11.700
最基本的用法

50:11.700 --> 50:12.700
就这样子

50:13.700 --> 50:14.700
所以说Connect

50:14.700 --> 50:15.700
这个玩意

50:15.700 --> 50:16.700
这个函数

50:16.700 --> 50:17.700
要传几个参数呢

50:17.700 --> 50:18.700
不用两个吗

50:18.700 --> 50:19.700
一个是映射什么

50:19.700 --> 50:20.700
映射数据

50:20.700 --> 50:21.700
映射数据

50:21.700 --> 50:22.700
把仓库里边的数据

50:22.700 --> 50:23.700
通过映射

50:23.700 --> 50:25.700
通过这个Connect

50:25.700 --> 50:26.700
通过这个Connect

50:26.700 --> 50:28.700
映射到这边的需要的数据

50:28.700 --> 50:30.700
因为它需要那么多数据

50:30.700 --> 50:31.700
给它那么多数据干嘛

50:31.700 --> 50:32.700
它也用不了

50:32.700 --> 50:34.700
它只需要它自己那一部分数据就行了

50:34.700 --> 50:35.700
另外是

50:35.700 --> 50:36.700
把我们的dispatch

50:36.700 --> 50:38.700
利用dispatch

50:38.700 --> 50:40.700
映射成一个一个的事件处理函数

50:40.700 --> 50:42.700
那么这两个提供给组建

50:42.700 --> 50:43.700
组建是不是能渲染的

50:43.700 --> 50:44.700
那么到时候

50:44.700 --> 50:45.700
组建触发事件的时候

50:45.700 --> 50:47.700
是不是就到时候就掉用了dispatch

50:47.700 --> 50:48.700
就更改了这个

50:48.700 --> 50:49.700
Ridax仓库里边的数据

50:49.700 --> 50:50.700
对吧

50:50.700 --> 50:51.700
那么UI界面的

50:51.700 --> 50:52.700
那么这样的最终结果就是

50:52.700 --> 50:54.700
UI界面的数据变化了过后

50:54.700 --> 50:55.700
它就会更改

50:55.700 --> 50:57.700
它就会运行那个处理函数

50:57.700 --> 50:58.700
处理函数里边

50:58.700 --> 51:00.700
不是写了这个吗

51:00.700 --> 51:02.700
处理函数里边不是用dispatch吗

51:02.700 --> 51:03.700
对不对

51:03.700 --> 51:04.700
那么这个dispatch

51:04.700 --> 51:06.700
它就会更改这个仓库里边的数据

51:06.700 --> 51:08.700
而仓库里边的数据一变

51:08.700 --> 51:10.700
那么由于它里面有监听器

51:10.700 --> 51:12.700
那么又会重新导致这个组建券的

51:12.700 --> 51:14.700
反而是使用了

51:14.700 --> 51:16.700
仓库里边的数据的组建

51:16.700 --> 51:17.700
那么都会受到这个监听

51:17.700 --> 51:18.700
对吧

51:18.700 --> 51:19.700
都会受到这个监听

51:19.700 --> 51:20.700
那么导致重新券的

51:20.700 --> 51:21.700
这就解决了

51:21.700 --> 51:23.700
这个数据共享的问题了

51:23.700 --> 51:26.700
整个过程就这样解决了

51:26.700 --> 51:27.700
好

51:27.700 --> 51:29.700
那么这里其实非常非常简单

51:29.700 --> 51:30.700
接下来

51:30.700 --> 51:31.700
我来说一下

51:31.700 --> 51:35.700
Connect的一些使用的细节

51:35.700 --> 51:38.700
我们使用了一些细节

51:38.700 --> 51:41.400
第一个

51:41.400 --> 51:45.400
细节1

51:45.400 --> 51:51.400
如果对返回的容器组建

51:51.400 --> 51:55.400
加上额外的属性

51:55.400 --> 51:58.400
这些属性

51:58.400 --> 52:02.400
会直接传递到展示组建

52:02.400 --> 52:03.400
好

52:03.400 --> 52:04.400
这什么意思呢

52:04.400 --> 52:05.400
就说我们这里

52:05.400 --> 52:06.400
在app里边

52:06.400 --> 52:08.400
我们这一块使用的是什么

52:08.400 --> 52:10.400
使用的是容器组建

52:10.400 --> 52:11.400
你要清楚的知道

52:11.400 --> 52:13.400
这一块我们使用的是容器组建

52:13.400 --> 52:16.400
而不是我们在这里写的展示组建

52:16.400 --> 52:19.400
这展示组建外面包了一层容器组建

52:19.400 --> 52:21.400
因此我如果说我在这里

52:21.400 --> 52:22.400
再给它传属性

52:22.400 --> 52:23.400
比如说abc

52:23.400 --> 52:25.400
等于

52:25.400 --> 52:26.400
等于123

52:26.400 --> 52:27.400
又给它传一个属性

52:27.400 --> 52:28.400
那么这个属性

52:28.400 --> 52:29.400
它会传到哪儿呢

52:29.400 --> 52:30.400
你看一下

52:30.400 --> 52:32.400
它传到不是counter

52:32.400 --> 52:35.400
它传到哪儿呢

52:35.400 --> 52:37.400
你看abc123

52:37.400 --> 52:39.400
传到的是个容器组建

52:39.400 --> 52:40.400
传到的是个容器组建

52:40.400 --> 52:41.400
你看一下

52:41.400 --> 52:42.400
这些组建的这些后可

52:42.400 --> 52:43.400
是不是我们写的

52:43.400 --> 52:44.400
肯定不是吗

52:44.400 --> 52:45.400
对不对

52:45.400 --> 52:46.400
肯定不是

52:46.400 --> 52:47.400
它不是我们写的

52:47.400 --> 52:48.400
那么这个abc

52:48.400 --> 52:49.400
它会传到counter

52:49.400 --> 52:50.400
那么它呢

52:50.400 --> 52:51.400
它会原封不动的

52:51.400 --> 52:52.400
把这个abc传到哪儿

52:52.400 --> 52:53.400
传到这儿

52:53.400 --> 52:54.400
它传到

52:54.400 --> 52:56.400
后边的展示组建里面去

52:56.400 --> 52:57.400
就是一些额外的属性

52:57.400 --> 52:58.400
它会传过去

52:58.400 --> 52:59.400
就这一块

52:59.400 --> 53:00.400
这个细节

53:00.400 --> 53:01.400
大家知道就行了

53:01.400 --> 53:02.400
所以这一块

53:02.400 --> 53:03.400
不会造成什么影响

53:03.400 --> 53:04.400
另外呢

53:04.400 --> 53:05.400
如果说你在这里加rave

53:05.400 --> 53:07.400
那么它会进行rave转发

53:07.400 --> 53:08.400
它会把这个rave

53:08.400 --> 53:09.400
加到哪儿去了

53:09.400 --> 53:11.400
它会加到这里边去

53:11.400 --> 53:12.400
它会把这个rave

53:12.400 --> 53:13.400
加到这里边去

53:13.400 --> 53:14.400
就这么个意思

53:14.400 --> 53:15.400
它会进行转发

53:15.400 --> 53:16.400
这些东西

53:16.400 --> 53:17.400
那里没什么好说的

53:17.400 --> 53:18.400
然后呢

53:18.400 --> 53:19.400
我们再说一下

53:19.400 --> 53:20.400
主要是说这两个方法

53:20.400 --> 53:21.400
就是

53:21.400 --> 53:23.400
我们再使用那个map

53:23.400 --> 53:24.400
state to props

53:24.400 --> 53:26.400
和map dispatch to props

53:26.400 --> 53:28.400
主要使用这两个的时候

53:28.400 --> 53:30.400
那么有哪些细节

53:30.400 --> 53:31.400
需要大家了解

53:31.400 --> 53:32.400
好

53:32.400 --> 53:34.400
用了map state to props

53:34.400 --> 53:35.400
那么这个函数

53:35.400 --> 53:39.290
其实非常简单

53:39.290 --> 53:43.290
map state to props

53:43.290 --> 53:44.290
就这个函数

53:44.290 --> 53:45.290
这个名字随便取

53:45.290 --> 53:46.290
只不过我们平时

53:46.290 --> 53:47.290
习惯上用这个名字

53:47.290 --> 53:48.290
那么这个函数

53:48.290 --> 53:49.290
非常简单

53:49.290 --> 53:51.290
它其实可以有两个参数

53:51.290 --> 53:53.290
第一个参数

53:53.290 --> 53:55.290
就是参数1

53:55.290 --> 54:01.290
就是整个仓库的状态

54:01.290 --> 54:02.290
这是参数1

54:02.290 --> 54:03.290
好

54:03.290 --> 54:05.290
还有一个可选的参数2

54:05.290 --> 54:06.290
参数2

54:06.290 --> 54:07.290
就这个函数

54:07.290 --> 54:08.290
还有一个参数2

54:08.290 --> 54:09.290
好

54:09.290 --> 54:10.290
参数2的话

54:10.290 --> 54:11.290
那么它是什么呢

54:11.290 --> 54:13.290
它是

54:13.290 --> 54:15.290
传递的属性值

54:15.290 --> 54:17.290
OM props

54:17.290 --> 54:18.290
我们再打印出来

54:18.290 --> 54:19.290
打印出来就明白了

54:19.290 --> 54:21.290
OM props

54:21.290 --> 54:22.290
打印出来

54:22.290 --> 54:23.290
保存看一下

54:23.290 --> 54:24.290
控制台

54:24.290 --> 54:25.290
你看

54:25.290 --> 54:27.290
是不是就外面传给它的属性值

54:27.290 --> 54:28.290
对吧

54:28.290 --> 54:29.290
就是外面

54:29.290 --> 54:30.290
调用容器组件的时候

54:30.290 --> 54:31.290
给它传过来的属性值

54:31.290 --> 54:32.290
对吧

54:32.290 --> 54:33.290
这个东西

54:33.290 --> 54:34.290
这个东西有什么用了

54:34.290 --> 54:35.290
你没用的话

54:35.290 --> 54:37.290
你不用这个第二个参数就完事了

54:37.290 --> 54:38.290
如果说你要用的话

54:38.290 --> 54:40.290
你是可以获取到的

54:40.290 --> 54:41.290
是可以获取到的

54:41.290 --> 54:43.290
就给你说一下这个

54:43.290 --> 54:46.290
参数2表示

54:46.290 --> 54:47.290
外面

54:47.290 --> 54:48.290
就使用着

54:48.290 --> 54:50.290
传递的属性

54:50.290 --> 54:52.290
传递的属性

54:52.290 --> 54:54.290
属性对象

54:54.290 --> 54:55.290
好

54:55.290 --> 54:57.290
这是mapStateProps

54:57.290 --> 54:58.290
好

54:58.290 --> 54:59.290
下一个

54:59.290 --> 55:00.290
下一个

55:00.290 --> 55:01.290
mapDispatch

55:01.290 --> 55:02.290
2Props

55:02.290 --> 55:04.290
就第二个参数

55:04.290 --> 55:06.290
就是connect的

55:06.290 --> 55:07.290
connect的第一个参数

55:07.290 --> 55:10.290
第一个参数

55:10.290 --> 55:12.290
第一个参数

55:12.290 --> 55:13.290
好

55:13.290 --> 55:14.290
第二个参数

55:14.290 --> 55:18.370
第二个参数

55:18.370 --> 55:20.370
它有两种写法

55:20.370 --> 55:21.370
就是说

55:21.370 --> 55:23.370
它可以支持两种场景

55:23.370 --> 55:25.370
第一种场景就是

55:25.370 --> 55:27.370
情况一

55:27.370 --> 55:29.370
传递一个函数

55:29.370 --> 55:30.370
那么这个函数

55:30.370 --> 55:32.370
我们通常命名为mapDispatch

55:33.370 --> 55:34.370
2Props

55:34.370 --> 55:36.370
那么主要是来处理事件的

55:36.370 --> 55:37.370
处理事件的处理函数

55:37.370 --> 55:39.370
那么处理函数里边

55:39.370 --> 55:43.370
它是可以得到这个dispatch的

55:43.370 --> 55:44.370
传递这么一个函数

55:44.370 --> 55:46.370
你看一下就这个函数

55:46.370 --> 55:48.370
mapDispatch2Props

55:48.370 --> 55:50.370
那么这个函数有什么特点呢

55:50.370 --> 55:51.370
这个函数

55:51.370 --> 55:53.370
那么这个函数有一个参数

55:53.370 --> 55:55.370
参数1

55:55.370 --> 55:56.370
就第一种

55:56.370 --> 55:57.370
第一个参数

55:57.370 --> 55:58.370
就是connect的

55:58.370 --> 55:59.370
第一个参数是这个

55:59.370 --> 56:00.370
这个函数

56:00.370 --> 56:01.370
这个函数

56:01.370 --> 56:03.370
它有两个参数

56:03.370 --> 56:04.370
那么第二个参数

56:04.370 --> 56:06.370
connect的第二个参数

56:06.370 --> 56:07.370
第二个参数

56:07.370 --> 56:08.370
第一个情况是

56:08.370 --> 56:10.370
你给它传一个函数

56:10.370 --> 56:11.370
不要到云了

56:11.370 --> 56:12.370
connect的第二个参数

56:12.370 --> 56:14.370
你给它传一个函数进去

56:14.370 --> 56:16.370
那么这个函数

56:16.370 --> 56:17.370
它有个参数1

56:17.370 --> 56:18.370
就是dispatch

56:18.370 --> 56:20.370
那这个没什么好说的

56:20.370 --> 56:22.370
就是一个dispatch函数

56:22.370 --> 56:24.370
如果它其实还有个参数2

56:24.370 --> 56:26.370
参数2跟刚才是一样的

56:26.370 --> 56:27.370
就是使用的

56:27.370 --> 56:28.370
使用这个组件的人

56:28.370 --> 56:30.370
给我传递的属性对象

56:30.370 --> 56:32.370
那么这是第二个参数

56:32.370 --> 56:34.370
当然我们要用的话就用

56:34.370 --> 56:35.370
不用的话就算了

56:35.370 --> 56:36.370
这是情况1

56:36.370 --> 56:37.370
情况1我们是不是写过的

56:37.370 --> 56:38.370
对吧

56:38.370 --> 56:39.370
是写过的

56:39.370 --> 56:40.370
那么这个情况1

56:40.370 --> 56:42.370
这个函数要返回什么呢

56:42.370 --> 56:46.370
函数返回的对象

56:46.370 --> 56:49.370
会作为属性

56:49.370 --> 56:53.370
传递到展示组件中

56:56.370 --> 56:57.370
就是你这里

56:57.370 --> 56:59.370
以返回的对象

56:59.370 --> 57:01.370
它会把对象里边的展开

57:01.370 --> 57:02.370
把对象展开

57:02.370 --> 57:04.370
对象里面的每一个属性

57:04.370 --> 57:05.370
它就会传递到哪

57:05.370 --> 57:08.370
传到这个展示组件里边去

57:08.370 --> 57:11.370
那么这里需要哪些事件处理

57:11.370 --> 57:13.370
那么你在这里一次写就行了

57:13.370 --> 57:14.370
就这么简单

57:14.370 --> 57:17.370
但是函数的写法就很多了

57:17.370 --> 57:19.370
比方说刚才我们使用了一种写法

57:19.370 --> 57:21.370
刚才我们使用了一种写法

57:21.370 --> 57:22.370
其实还有别的写法

57:22.370 --> 57:24.370
只不过我们最常见的是这种写法

57:24.370 --> 57:25.370
还有别的写法

57:25.370 --> 57:26.370
还有别的什么写法

57:26.370 --> 57:28.370
比方说我们再写一个

57:28.370 --> 57:30.370
我们第二种写法的话

57:30.370 --> 57:32.370
就可以利用这个

57:32.370 --> 57:33.370
利用那个什么

57:33.370 --> 57:36.370
我们之前学过的Band

57:36.370 --> 57:38.370
Band Action

57:38.370 --> 57:39.370
对不对

57:39.370 --> 57:40.370
先导入吧

57:40.370 --> 57:42.370
导入Ridax

57:42.370 --> 57:44.370
我们可以利用Band Action Creators

57:44.370 --> 57:45.370
对吧

57:45.370 --> 57:47.370
它是不是可以帮我们

57:47.370 --> 57:49.370
绑定那个action创建函数

57:49.370 --> 57:50.370
对吧

57:50.370 --> 57:53.370
把action创建函数变成一个对象

57:53.370 --> 57:54.370
那个对象里边的属性

57:54.370 --> 57:55.370
就是可以直接调用

57:55.370 --> 57:57.370
直接触发action的属性

57:57.370 --> 57:58.370
那么这里呢

57:58.370 --> 57:59.370
我们可以利用这个

57:59.370 --> 58:00.370
利用这个来写

58:00.370 --> 58:01.370
也行

58:01.370 --> 58:02.370
咱们来写一下吧

58:02.370 --> 58:05.370
比方说我们这里可以利用Band Action Creators

58:05.370 --> 58:06.370
那么它第一个参数

58:06.370 --> 58:07.370
要传一个对象进去

58:07.370 --> 58:08.370
对象里面

58:08.370 --> 58:09.370
每一个属性是一个

58:09.370 --> 58:10.370
action创建函数

58:10.370 --> 58:11.370
对吧

58:11.370 --> 58:12.370
action创建函数

58:12.370 --> 58:13.370
比方说action创建函数

58:13.370 --> 58:14.370
有哪些

58:14.370 --> 58:15.370
第一个

58:15.370 --> 58:16.370
Think

58:16.370 --> 58:19.370
然后 Decrease

58:19.370 --> 58:21.370
然后有哪些 Increase

58:21.370 --> 58:23.370
这些都是action创建函数

58:23.370 --> 58:25.370
这个也是action创建函数

58:25.370 --> 58:27.370
那么这action创建函数

58:27.370 --> 58:29.370
当然你要跟重新命名

58:29.370 --> 58:31.370
因为你这个对象

58:31.370 --> 58:32.370
到时候返回的对象

58:32.370 --> 58:33.370
它这个属性名

58:33.370 --> 58:35.370
跟这个名字是完全一样的

58:35.370 --> 58:37.370
但是我到时候返回的对象

58:37.370 --> 58:38.370
是不是要加一个on

58:38.370 --> 58:40.370
是不是要加一个on这个属性

58:40.370 --> 58:41.370
我们这里

58:41.370 --> 58:43.370
可以加换一个名字

58:43.370 --> 58:44.370
因为我们

58:44.370 --> 58:45.370
我们刚才说了

58:45.370 --> 58:46.370
这个地方

58:46.370 --> 58:47.370
这个函数最终返回的对象

58:47.370 --> 58:49.370
那么它会把一个对象的属性展开

58:49.370 --> 58:51.370
然后传到这个Counter手机里面去

58:51.370 --> 58:52.370
所以说

58:52.370 --> 58:53.370
这个名字

58:53.370 --> 58:55.370
一定要跟那个Counter组建匹配上

58:55.370 --> 58:56.370
它要什么

58:56.370 --> 58:57.370
我就给什么

58:57.370 --> 58:59.370
那么这里on Decrease

58:59.370 --> 59:00.370
来自于 Decrease

59:00.370 --> 59:02.370
给它换一个名字

59:04.370 --> 59:05.370
而Think Increase

59:05.370 --> 59:06.370
换个名字

59:06.370 --> 59:07.370
总之

59:07.370 --> 59:08.370
传一个对象

59:08.370 --> 59:09.370
这个对象里面的

59:09.370 --> 59:10.370
每一个属性

59:10.370 --> 59:11.370
是一个action创建函数

59:11.370 --> 59:12.370
然后第二个参数是咋

59:12.370 --> 59:13.370
第二个参数

59:13.370 --> 59:14.370
是不是Dispatch

59:14.370 --> 59:15.370
Dispatch传进去

59:15.370 --> 59:16.370
那么它返回

59:16.370 --> 59:17.370
是不是可以返回个对象

59:17.370 --> 59:18.370
对吧

59:18.370 --> 59:19.370
我们直接把对象返回

59:19.370 --> 59:20.370
就完了

59:20.370 --> 59:22.370
那么这也是一种邪法

59:22.370 --> 59:23.370
这也是一种邪法

59:23.370 --> 59:24.370
这种邪法就没有

59:24.370 --> 59:25.370
刚才那种邪法灵活

59:25.370 --> 59:26.370
为什么

59:26.370 --> 59:27.370
因为这种邪法

59:27.370 --> 59:29.370
它的参数

59:29.370 --> 59:30.370
就是这些函数的参数

59:30.370 --> 59:32.370
是不是跟那个action创建函数

59:32.370 --> 59:34.370
是一致的

59:34.370 --> 59:36.370
它的参数是跟那个action

59:36.370 --> 59:37.370
创建函数是一致的

59:37.370 --> 59:38.370
那么现在还没有什么问题

59:38.370 --> 59:40.370
因为他们都不需要参数

59:40.370 --> 59:41.370
而我这里的

59:41.370 --> 59:42.370
组建这里边

59:42.370 --> 59:43.370
也不需要参数

59:43.370 --> 59:44.370
对吧

59:44.370 --> 59:45.370
这些地方我也没有去

59:45.370 --> 59:46.370
给它传递任何参数

59:46.370 --> 59:47.370
那么参数

59:47.370 --> 59:48.370
两个都是一致的

59:48.370 --> 59:49.370
那就没问题

59:49.370 --> 59:52.370
那如果说这里边的参数

59:52.370 --> 59:54.370
和这里边的参数

59:54.370 --> 59:55.370
它不一致

59:55.370 --> 59:56.370
那不一致就要出问题

59:56.370 --> 59:57.370
就要出问题

59:57.370 --> 59:58.370
所以说

59:58.370 --> 59:59.370
这种邪法

59:59.370 --> 01:00:00.370
虽然说你好像

01:00:00.370 --> 01:00:02.370
感觉上可以少写些代码

01:00:02.370 --> 01:00:03.370
但是尽量

01:00:03.370 --> 01:00:04.370
尽量不要去这样写

01:00:04.370 --> 01:00:05.370
好

01:00:05.370 --> 01:00:07.370
咱们先看一下我吧

01:00:07.370 --> 01:00:08.370
看一下

01:00:08.370 --> 01:00:09.370
加

01:00:09.370 --> 01:00:10.370
渐

01:00:10.370 --> 01:00:11.370
一不渐

01:00:11.370 --> 01:00:13.370
一不加

01:00:13.370 --> 01:00:14.370
这都没问题

01:00:14.370 --> 01:00:15.370
对吧

01:00:15.370 --> 01:00:17.370
然后我们这里说到这

01:00:17.370 --> 01:00:18.370
我给大家说一下

01:00:18.370 --> 01:00:19.370
有一些同学呢

01:00:19.370 --> 01:00:21.370
可能会做一些错误的操作

01:00:21.370 --> 01:00:22.370
比方说

01:00:22.370 --> 01:00:24.370
你在写这个展示主页的时候

01:00:24.370 --> 01:00:25.370
你在想

01:00:25.370 --> 01:00:26.370
到时候仓库里边的

01:00:26.370 --> 01:00:27.370
为了方便

01:00:27.370 --> 01:00:28.370
到时候我写

01:00:28.370 --> 01:00:30.370
编写这个康列个字

01:00:30.370 --> 01:00:32.370
那么我尽量的保持这个名字

01:00:32.370 --> 01:00:34.370
跟仓库的名字一样

01:00:34.370 --> 01:00:36.370
我这里复制一下

01:00:36.370 --> 01:00:37.370
我尽量的保持个名字

01:00:37.370 --> 01:00:39.370
跟仓库的名字一样

01:00:39.370 --> 01:00:40.370
这样子

01:00:40.370 --> 01:00:41.370
我到时候写太马上

01:00:41.370 --> 01:00:44.370
就会简单一些

01:00:44.370 --> 01:00:46.370
保持跟仓库的名字一样

01:00:46.370 --> 01:00:47.370
那么这里

01:00:47.370 --> 01:00:49.370
我们就可以不用去写这个了

01:00:49.370 --> 01:00:50.370
因为名字一样

01:00:50.370 --> 01:00:51.370
对不对

01:00:51.370 --> 01:00:53.370
我反复了对象

01:00:53.370 --> 01:00:54.370
对象里面的每一个属性

01:00:54.370 --> 01:00:56.370
就是我们要的事件名字

01:00:56.370 --> 01:00:58.370
事件处理还出的名字

01:00:58.370 --> 01:00:59.370
那么这样子写

01:00:59.370 --> 01:01:00.370
这样子写不是挺好的吗

01:01:00.370 --> 01:01:01.370
对不对

01:01:01.370 --> 01:01:02.370
你看一下

01:01:02.370 --> 01:01:03.370
加渐都没有什么问题

01:01:03.370 --> 01:01:04.370
当然没问题

01:01:04.370 --> 01:01:05.370
但是

01:01:05.370 --> 01:01:06.370
你要了解

01:01:06.370 --> 01:01:07.370
你这样子写

01:01:07.370 --> 01:01:08.370
这样的做法

01:01:08.370 --> 01:01:10.370
这样的思路是不行的

01:01:10.370 --> 01:01:11.370
为什么呢

01:01:11.370 --> 01:01:13.370
因为你写展示主页的时候

01:01:13.370 --> 01:01:16.370
你考虑到了仓库

01:01:16.370 --> 01:01:18.370
能不能考虑仓库

01:01:18.370 --> 01:01:19.370
不能

01:01:19.370 --> 01:01:20.370
因为展示主页

01:01:20.370 --> 01:01:22.370
对于这个主页而言

01:01:22.370 --> 01:01:24.370
它是不知道这个数据哪来的

01:01:24.370 --> 01:01:27.370
如果说你一旦考虑到仓库的话

01:01:27.370 --> 01:01:29.370
就非常容易出问题

01:01:29.370 --> 01:01:30.370
你写到后面比方说

01:01:30.370 --> 01:01:31.370
这个数据不是来对于仓库的

01:01:31.370 --> 01:01:32.370
有一天

01:01:32.370 --> 01:01:33.370
我觉得仓库里面

01:01:33.370 --> 01:01:34.370
存这个数据没意义

01:01:34.370 --> 01:01:36.370
我不从仓库里面需要了

01:01:36.370 --> 01:01:37.370
那么我应该是用一个

01:01:37.370 --> 01:01:40.370
另外一个主页来去

01:01:40.370 --> 01:01:41.370
专门用状态来

01:01:41.370 --> 01:01:42.370
给大家加这个数据

01:01:42.370 --> 01:01:44.370
而不是在仓库里面

01:01:44.370 --> 01:01:45.370
那么到时候

01:01:45.370 --> 01:01:46.370
虽然说在这个场景下边

01:01:46.370 --> 01:01:48.370
好像也没啥问题

01:01:48.370 --> 01:01:50.370
但是你这样的考虑思路

01:01:50.370 --> 01:01:52.370
肯定是不对的

01:01:52.370 --> 01:01:53.370
因为我们说

01:01:53.370 --> 01:01:54.370
编程最重要的是

01:01:54.370 --> 01:01:56.370
一个原则就是

01:01:56.370 --> 01:01:58.370
低偶和

01:01:58.370 --> 01:01:59.370
主页跟仓库

01:01:59.370 --> 01:02:00.370
两个一定要分开

01:02:00.370 --> 01:02:02.370
他们是两个东西

01:02:02.370 --> 01:02:03.370
你写主页的时候

01:02:03.370 --> 01:02:04.370
不要去考虑仓库

01:02:04.370 --> 01:02:05.370
写仓库的时候

01:02:05.370 --> 01:02:07.370
不要去考虑主页

01:02:07.370 --> 01:02:09.370
一定要把它分开

01:02:09.370 --> 01:02:10.370
分开了之后

01:02:10.370 --> 01:02:12.370
我们写每一块的东西的时候

01:02:12.370 --> 01:02:13.370
它是相对独立的

01:02:13.370 --> 01:02:14.370
那么你写一个东西的时候

01:02:14.370 --> 01:02:16.370
如果说你去考虑到另一个东西

01:02:16.370 --> 01:02:17.370
就会造成偶和

01:02:17.370 --> 01:02:18.370
你不知不觉

01:02:18.370 --> 01:02:20.370
就把这个偶和写出来了

01:02:20.370 --> 01:02:22.370
所以尽量不要有这样的思维

01:02:22.370 --> 01:02:24.370
就不能有这样的思维

01:02:24.370 --> 01:02:25.370
所以说你写主页的时候

01:02:25.370 --> 01:02:26.370
该是什么样子

01:02:26.370 --> 01:02:27.370
就什么样子

01:02:27.370 --> 01:02:28.370
你甭管仓库是什么样子

01:02:28.370 --> 01:02:29.370
跟你没关系

01:02:29.370 --> 01:02:30.370
到时候我们自然会用一个

01:02:30.370 --> 01:02:32.370
扛那个车来进行连接

01:02:32.370 --> 01:02:34.370
所以说不能这样去思考

01:02:34.370 --> 01:02:36.370
这个思考的问题的思路

01:02:36.370 --> 01:02:38.370
就是错的

01:02:38.370 --> 01:02:40.370
这是关于这一点

01:02:40.370 --> 01:02:41.370
总之

01:02:41.370 --> 01:02:42.370
这里的第二个参数

01:02:42.370 --> 01:02:43.370
你可以给它传一个函数

01:02:43.370 --> 01:02:45.370
这个函数只要你返回个对象

01:02:45.370 --> 01:02:47.370
这个对象里面的每一个函数

01:02:47.370 --> 01:02:49.370
最终就是

01:02:49.370 --> 01:02:51.370
那个事件处理函数

01:02:53.370 --> 01:02:54.370
那么

01:02:54.370 --> 01:02:57.370
就是作为属性的展示主任中

01:02:57.370 --> 01:02:59.370
作为

01:02:59.370 --> 01:03:02.370
事件处理函数存在

01:03:02.370 --> 01:03:04.370
这是第一种情况

01:03:04.370 --> 01:03:05.370
那么第二个参数

01:03:05.370 --> 01:03:06.370
还有一种情况

01:03:06.370 --> 01:03:08.370
情况二

01:03:08.370 --> 01:03:10.370
就是传递

01:03:10.370 --> 01:03:12.370
传递一个对象

01:03:13.370 --> 01:03:14.370
它不是传递函数了

01:03:14.370 --> 01:03:16.370
传递的是一个对象

01:03:18.370 --> 01:03:21.370
对象的每一个属性

01:03:21.370 --> 01:03:22.370
是一个函数

01:03:22.370 --> 01:03:24.370
那么面对这种情况

01:03:24.370 --> 01:03:25.370
它又会怎么处理呢

01:03:25.370 --> 01:03:27.370
它是这样的处理模式

01:03:27.370 --> 01:03:28.370
那么

01:03:28.370 --> 01:03:30.370
它处理的时候是这样处理的

01:03:32.370 --> 01:03:34.370
它会

01:03:35.370 --> 01:03:37.370
自动的

01:03:37.370 --> 01:03:40.370
将对象里面的

01:03:40.370 --> 01:03:42.370
函数名

01:03:43.370 --> 01:03:45.370
堆硬到

01:03:45.370 --> 01:03:47.370
展示主件

01:03:47.370 --> 01:03:49.370
的属性中

01:03:49.370 --> 01:03:51.370
但是功能

01:03:51.370 --> 01:03:52.370
做出

01:03:52.370 --> 01:03:54.370
一点改变

01:03:54.370 --> 01:03:55.370
什么改变呢

01:03:55.370 --> 01:03:57.370
当调用

01:03:57.370 --> 01:03:59.370
调用

01:03:59.370 --> 01:04:01.370
这些处理函数时

01:04:02.370 --> 01:04:04.370
会自动

01:04:04.370 --> 01:04:06.370
dispatch

01:04:06.370 --> 01:04:08.370
函数返回的

01:04:09.370 --> 01:04:11.370
指

01:04:11.370 --> 01:04:12.370
很绕

01:04:12.370 --> 01:04:13.370
这里很绕

01:04:13.370 --> 01:04:14.370
其实它这里一点都不绕

01:04:14.370 --> 01:04:16.370
只是我很难用文字来描述

01:04:16.370 --> 01:04:17.370
这个东西

01:04:17.370 --> 01:04:18.370
很难用文字来描述

01:04:18.370 --> 01:04:19.370
什么意思呢

01:04:19.370 --> 01:04:20.370
给大家写个例子

01:04:20.370 --> 01:04:22.370
一下就明白了

01:04:22.370 --> 01:04:24.370
所以这个笔记有的时候

01:04:24.370 --> 01:04:25.370
也挺难做的

01:04:25.370 --> 01:04:26.370
但是我要写出来

01:04:26.370 --> 01:04:27.370
写出来

01:04:27.370 --> 01:04:29.370
告诉你我这里讲到了这么一块知识

01:04:29.370 --> 01:04:31.370
免得大家看笔记的时候忘了

01:04:31.370 --> 01:04:32.370
但是有些地方

01:04:32.370 --> 01:04:33.370
确实不好写

01:04:33.370 --> 01:04:35.370
确实非常非常不好写

01:04:35.370 --> 01:04:36.370
我们举例子

01:04:36.370 --> 01:04:38.370
比那个写笔记要好得多

01:04:38.370 --> 01:04:39.370
那么第二个参数

01:04:39.370 --> 01:04:40.370
我们可以这样子写

01:04:40.370 --> 01:04:42.370
看着

01:04:42.370 --> 01:04:44.370
我们可以这样子写

01:04:44.370 --> 01:04:48.940
我们直接把对象拿过来

01:04:48.940 --> 01:04:49.940
这里

01:04:49.940 --> 01:04:51.940
第二个参数

01:04:51.940 --> 01:04:56.660
叫做creators

01:04:56.660 --> 01:04:57.660
那么这个是什么呢

01:04:57.660 --> 01:04:59.660
我们这样来记笔记

01:04:59.660 --> 01:05:01.660
记笔记要好得多

01:05:01.660 --> 01:05:02.660
对象的每一个属性

01:05:02.660 --> 01:05:05.660
是一个I型创建函数

01:05:05.660 --> 01:05:07.660
创建函数

01:05:07.660 --> 01:05:09.660
那么

01:05:09.660 --> 01:05:12.660
我们当事件触发时

01:05:12.660 --> 01:05:14.660
事件触发时

01:05:14.660 --> 01:05:19.660
会自动的dispatch

01:05:19.660 --> 01:05:20.660
dispatch

01:05:20.660 --> 01:05:24.660
创建函数

01:05:24.660 --> 01:05:27.660
函数返回的I型

01:05:27.660 --> 01:05:28.660
好

01:05:28.660 --> 01:05:29.660
就这个意思

01:05:29.660 --> 01:05:30.660
那么就这里

01:05:30.660 --> 01:05:31.660
我们这个第二个参数

01:05:31.660 --> 01:05:32.660
传输传输

01:05:32.660 --> 01:05:33.660
creators

01:05:33.660 --> 01:05:34.660
就这么简单

01:05:34.660 --> 01:05:35.660
这个东西都不要了

01:05:35.660 --> 01:05:37.660
我就把我们的I型

01:05:37.660 --> 01:05:39.660
直接传进去

01:05:39.660 --> 01:05:40.660
I型创建函数直接传进去

01:05:40.660 --> 01:05:41.660
只不过这里有改名字

01:05:41.660 --> 01:05:42.660
为什么改名字

01:05:42.660 --> 01:05:43.660
因为属性里边

01:05:43.660 --> 01:05:44.660
他要求的那个

01:05:44.660 --> 01:05:45.660
事件就是

01:05:45.660 --> 01:05:47.660
事件处理函数名是这个

01:05:47.660 --> 01:05:48.660
稍微把这个名字改一下

01:05:48.660 --> 01:05:49.660
但是他们本质上

01:05:49.660 --> 01:05:51.660
是不是都是I型创建函数

01:05:51.660 --> 01:05:52.660
那么到时候

01:05:52.660 --> 01:05:53.660
触发事件的时候

01:05:53.660 --> 01:05:54.660
他会这样操作

01:05:54.660 --> 01:05:56.660
他会自动的dispatch

01:05:56.660 --> 01:05:58.660
这个函数返回的I型

01:05:58.660 --> 01:05:59.660
他会把这些函数

01:05:59.660 --> 01:06:00.660
当成一个I型

01:06:00.660 --> 01:06:01.660
创建函数

01:06:01.660 --> 01:06:02.660
调用这个函数

01:06:02.660 --> 01:06:03.660
他会返回一个I型

01:06:03.660 --> 01:06:04.660
然后他会自动dispatch

01:06:04.660 --> 01:06:05.660
这个I型

01:06:05.660 --> 01:06:06.660
当然这些

01:06:06.660 --> 01:06:07.660
协法很简单

01:06:07.660 --> 01:06:09.660
它不是很灵活的协法

01:06:09.660 --> 01:06:10.660
为什么

01:06:10.660 --> 01:06:11.660
如果说我触发了I型之后

01:06:11.660 --> 01:06:12.660
可能还要做一些别的事情

01:06:12.660 --> 01:06:14.660
那又没法操作了

01:06:14.660 --> 01:06:16.660
所以说这种协法

01:06:16.660 --> 01:06:18.660
我们平时也用的不多

01:06:18.660 --> 01:06:20.660
用的最多的还是最开始这种协法

01:06:20.660 --> 01:06:22.660
最开始这种协法

01:06:22.660 --> 01:06:25.660
就这种协法

01:06:25.660 --> 01:06:26.660
就这种协法

01:06:26.660 --> 01:06:27.660
用的是最多的

01:06:27.660 --> 01:06:28.660
那么这些协法

01:06:28.660 --> 01:06:29.660
当然了解一下就行了

01:06:29.660 --> 01:06:30.660
你看一下

01:06:30.660 --> 01:06:31.660
现在也可以

01:06:31.660 --> 01:06:32.660
对吧

01:06:32.660 --> 01:06:33.660
也可以

01:06:33.660 --> 01:06:34.660
一无加

01:06:35.660 --> 01:06:36.660
没问题

01:06:36.660 --> 01:06:38.660
这就是Connect

01:06:38.660 --> 01:06:40.660
这里的集中用法

01:06:40.660 --> 01:06:41.660
两个参数

01:06:41.660 --> 01:06:43.660
他们的一些细节

01:06:43.660 --> 01:06:44.660
好

01:06:44.660 --> 01:06:46.660
然后我再说另外一个细节

01:06:46.660 --> 01:06:48.660
刚才说了一个细节1

01:06:48.660 --> 01:06:50.660
再说一个细节2

01:06:50.660 --> 01:06:52.660
细节2

01:06:52.660 --> 01:06:55.660
通过Connect

01:06:55.660 --> 01:06:57.660
连接的组件

01:06:57.660 --> 01:07:00.660
会自动得到一个属性

01:07:00.660 --> 01:07:01.660
什么呢

01:07:01.660 --> 01:07:03.660
就是dispatch

01:07:03.660 --> 01:07:04.660
dispatch

01:07:04.660 --> 01:07:05.660
这个属性

01:07:05.660 --> 01:07:06.660
也就是说啥呢

01:07:06.660 --> 01:07:08.660
也就是说在connect这个组件里边

01:07:08.660 --> 01:07:10.660
在connect这个组件里边

01:07:10.660 --> 01:07:12.660
它除了有这些玩意之外

01:07:12.660 --> 01:07:14.660
它传过来的一些属性之外

01:07:14.660 --> 01:07:15.660
它还可以得到什么

01:07:15.660 --> 01:07:17.660
还可以得到dispatch

01:07:17.660 --> 01:07:19.660
dispatch这个参数

01:07:19.660 --> 01:07:21.660
你看一下吧

01:07:21.660 --> 01:07:22.660
跑到去了

01:07:22.660 --> 01:07:24.660
我看一下

01:07:24.660 --> 01:07:26.660
connect里边

01:07:26.660 --> 01:07:28.660
这个组件里边

01:07:28.660 --> 01:07:30.660
我记得是

01:07:31.660 --> 01:07:32.660
对了

01:07:32.660 --> 01:07:33.660
我明白了

01:07:33.660 --> 01:07:34.660
这里有个前提条件

01:07:34.660 --> 01:07:35.660
因为这种情况用了很少

01:07:35.660 --> 01:07:36.660
几乎不用

01:07:36.660 --> 01:07:38.660
就是如果

01:07:38.660 --> 01:07:39.660
如果不传递

01:07:39.660 --> 01:07:41.660
第二个参数

01:07:41.660 --> 01:07:42.660
那么

01:07:42.660 --> 01:07:43.660
这个通过connect

01:07:43.660 --> 01:07:44.660
连接的组件

01:07:44.660 --> 01:07:45.660
会自动得到一个属性

01:07:45.660 --> 01:07:46.660
dispatch

01:07:46.660 --> 01:07:47.660
你看

01:07:47.660 --> 01:07:48.660
如果说我不传递

01:07:48.660 --> 01:07:49.660
第二个参数

01:07:49.660 --> 01:07:50.660
第二个参数不传

01:07:50.660 --> 01:07:51.660
那么这里

01:07:51.660 --> 01:07:52.660
就会得到一个属性

01:07:52.660 --> 01:07:53.660
dispatch

01:07:53.660 --> 01:07:54.660
你看

01:07:54.660 --> 01:07:55.660
得到一个dispatch

01:07:55.660 --> 01:07:56.660
是个函数

01:07:56.660 --> 01:07:57.660
那么有了这个dispatch

01:07:57.660 --> 01:07:58.660
函数是不是我们可以

01:07:58.660 --> 01:07:59.660
直接在这里

01:07:59.660 --> 01:08:00.660
触发一个形

01:08:00.660 --> 01:08:01.660
对吧

01:08:01.660 --> 01:08:02.660
我们通过在这里

01:08:02.660 --> 01:08:03.660
是不是可以直接触发一个形

01:08:03.660 --> 01:08:04.660
但是

01:08:04.660 --> 01:08:05.660
不要这样做

01:08:05.660 --> 01:08:07.660
不要这样做

01:08:07.660 --> 01:08:09.660
有了这个dispatch过后

01:08:09.660 --> 01:08:11.660
使得

01:08:11.660 --> 01:08:14.970
组件有能力

01:08:14.970 --> 01:08:16.970
有能力

01:08:16.970 --> 01:08:18.970
自行触发

01:08:18.970 --> 01:08:20.970
一个形

01:08:20.970 --> 01:08:21.970
但是

01:08:21.970 --> 01:08:24.970
不推荐

01:08:24.970 --> 01:08:25.970
这样做

01:08:25.970 --> 01:08:27.970
为什么不推荐这样做

01:08:27.970 --> 01:08:29.970
你想一想这个逻辑

01:08:29.970 --> 01:08:30.970
我们之前说过的

01:08:30.970 --> 01:08:31.970
为什么不推荐这样做

01:08:31.970 --> 01:08:32.970
你不能把这个

01:08:32.970 --> 01:08:34.970
组件

01:08:34.970 --> 01:08:35.970
偶和到

01:08:35.970 --> 01:08:36.970
仓库里边

01:08:36.970 --> 01:08:37.970
因为他

01:08:37.970 --> 01:08:38.970
你写这个组件的时候

01:08:38.970 --> 01:08:40.970
他纯粹是用来做展示的

01:08:40.970 --> 01:08:41.970
你不知道数据哪来的

01:08:41.970 --> 01:08:42.970
你这样

01:08:42.970 --> 01:08:43.970
但是你如果说你得到的dispatch

01:08:43.970 --> 01:08:44.970
你去用dispatch

01:08:44.970 --> 01:08:45.970
来触发一个形的话

01:08:45.970 --> 01:08:46.970
那么这样子

01:08:46.970 --> 01:08:47.970
你这个组件

01:08:47.970 --> 01:08:48.970
就跟那个仓库

01:08:48.970 --> 01:08:49.970
连在一起了

01:08:49.970 --> 01:08:50.970
紧紧的关联在一起了

01:08:50.970 --> 01:08:51.970
那么到时候

01:08:51.970 --> 01:08:52.970
要做

01:08:52.970 --> 01:08:53.970
要做一些数据的变化

01:08:53.970 --> 01:08:54.970
或者说

01:08:54.970 --> 01:08:55.970
我们把仓库的数据

01:08:55.970 --> 01:08:56.970
要提到一个组件里面去

01:08:56.970 --> 01:08:57.970
就很麻烦了

01:08:57.970 --> 01:08:59.970
千万不要去这样做

01:08:59.970 --> 01:09:00.970
不要去这样做

01:09:00.970 --> 01:09:02.970
但是知道有人没有回事就行了

01:09:03.970 --> 01:09:04.970
这是关于

01:09:04.970 --> 01:09:05.970
关于这一块

01:09:06.970 --> 01:09:07.970
就没了

01:09:07.970 --> 01:09:08.970
就没了

01:09:08.970 --> 01:09:09.970
那么这个rex redox

01:09:09.970 --> 01:09:10.970
这个组件

01:09:10.970 --> 01:09:11.970
就这么多支持了

01:09:11.970 --> 01:09:12.970
就这么多支持了

01:09:13.970 --> 01:09:14.970
那么写了

01:09:14.970 --> 01:09:15.970
我们这期可能写了

01:09:15.970 --> 01:09:16.970
这个counter组件

01:09:16.970 --> 01:09:17.970
下期可能

01:09:17.970 --> 01:09:18.970
我们还是来写一下

01:09:18.970 --> 01:09:20.970
学生

01:09:20.970 --> 01:09:21.970
就是查询

01:09:21.970 --> 01:09:22.970
以及学生表格

01:09:22.970 --> 01:09:24.970
因为我们之前也写过

01:09:24.970 --> 01:09:25.970
写过类似的

01:09:25.970 --> 01:09:26.970
那么我们这里

01:09:26.970 --> 01:09:27.970
再写一下

01:09:27.970 --> 01:09:29.970
学生的查询和学生表格

01:09:29.970 --> 01:09:30.970
那么就把这个例子写完

01:09:30.970 --> 01:09:32.970
那么大家基本上明白

01:09:32.970 --> 01:09:34.970
在rex redox里边

01:09:34.970 --> 01:09:36.970
这个库里边怎么去使用它

01:09:36.970 --> 01:09:38.970
怎么去连接仓库了

01:09:38.970 --> 01:09:39.970
这些可能的例子

01:09:39.970 --> 01:09:40.970
到大家下来还是要去做一下

01:09:40.970 --> 01:09:41.970
就做一个非常简单的

01:09:41.970 --> 01:09:42.970
加减

01:09:42.970 --> 01:09:43.970
一不加一不减

01:09:43.970 --> 01:09:44.970
做这么一个展示组件

01:09:44.970 --> 01:09:45.970
然后通过这个connect

01:09:45.970 --> 01:09:46.970
去连接

01:09:47.970 --> 01:09:49.970
体会一下它的实现过程

01:09:49.970 --> 01:09:50.970
它的处理过程

01:09:50.970 --> 01:09:51.970
好

01:09:51.970 --> 01:09:52.970
这是这一块东西

