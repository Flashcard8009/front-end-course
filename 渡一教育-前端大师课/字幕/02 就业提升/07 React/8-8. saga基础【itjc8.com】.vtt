WEBVTT

00:00.690 --> 00:05.170
好 这些课呢 咱们开始来学习这个saga 中间键

00:05.570 --> 00:07.730
嗯 这个中间键呢 我们这几课啊

00:07.730 --> 00:10.450
嗯 对这个中间键呢 做一个大字的介绍

00:10.450 --> 00:16.170
已经呢 对它的基本的代码结构呢 原谅了 做一个简单的了解

00:16.370 --> 00:22.450
嗯 然后呢 下一个开始呢 我们再具体的续续学习saga 里面每一个地方啊

00:22.450 --> 00:28.370
因为这个东西呢 肯定跟我们之前学那个sunk和promise呢 有很大的区别

00:28.530 --> 00:34.290
sunk的promise呢 很简单啊 很快就学完了 对吧 因为它本身原代码也没有多少东西

00:34.770 --> 00:38.290
但是呢 它的问题呢 我们之前也说到过了 它就是对action

00:38.850 --> 00:41.810
或者是action创建函数 造成了污染

00:42.610 --> 00:47.010
本来的action是一个简单的对象的啊 由于呢 要处理副作用

00:47.010 --> 00:50.930
sunk的promise啊 它就要求action呢 要做一些改变

00:51.890 --> 00:55.250
实际上saga这一块呢 它对action呢 没有任何要求啊

00:55.330 --> 00:58.610
所以说呢 它能够保持action和reducer的纯净

00:59.170 --> 01:01.730
那么saga呢 它的第一个特点啊 就是纯净

01:03.730 --> 01:04.930
纯净 对

01:06.930 --> 01:11.010
它不会污染action action原来长什么样子 现在仍然长什么样子

01:11.330 --> 01:16.050
以前的reducer咋写的 现在仍然咋写啊 它不会污染action和reducer

01:16.850 --> 01:20.210
而且呢 saga呢 它能够提供的功能呢 是非常强大的

01:21.010 --> 01:25.010
而且呢 你可以利用saga做一些灵活的处理啊 这就是saga的特点

01:25.330 --> 01:27.010
纯净 强大和灵活

01:27.730 --> 01:31.250
嗯 然后呢 saga呢 它里边提供了很多很多的api

01:32.290 --> 01:35.810
因此呢 我们这一块呢 给大家说一下 不会全部讲到

01:36.530 --> 01:39.330
只会讲到那些我们常用的api就行了

01:39.650 --> 01:44.610
就比方说你们之前学接craft 接craft的时候呢 也不可能说把全部的api讲完

01:45.010 --> 01:46.850
也没有这个必要啊 因为我

01:47.570 --> 01:50.050
我想课呢 大家也知道有这么一个特点啊

01:50.450 --> 01:54.290
嗯 不是很重视那个 ap 当然很重要

01:54.530 --> 01:57.810
它不是说特别重要 重要的是你要理解它

01:58.130 --> 02:02.050
理解了它之后呢 一些api呢 我们可以通过采约文档就搞定了啊

02:02.290 --> 02:06.210
那么这里呢 我们给大家把这个api文档啊 放过放出来

02:08.450 --> 02:09.250
中文文档

02:10.450 --> 02:12.930
地址 把它寄到笔记里边啊 就这个地址

02:13.970 --> 02:18.210
把负责一下 粘过来啊 大家可以访问这个地址呢 就可以看到它的中文文档了啊

02:18.530 --> 02:22.850
因此呢 我讲的过程中呢 只讲那些我们经常会用到的api

02:23.250 --> 02:28.850
那么一些细致末节的api的话 大家啊 可以有兴趣的话啊 可以去参与这个中文文档

02:29.330 --> 02:34.690
当我们 你只只要你听到我这个课之后 搞得你先不要去直接看文档啊 你先听课

02:35.170 --> 02:38.050
听完课之后呢 你对这个杀杆呢 基本上了解

02:38.610 --> 02:44.770
基本把摸鼠了啊 知道它怎么回事啊 然后再去看到中文文档就非常非常轻松了啊 非常非常轻松

02:45.570 --> 02:51.810
但是如果你是直接看到中文文档的话 我估计了大部分同学都会看得一头雾水都不知道怎么回事啊

02:52.370 --> 02:53.250
他为什么会这样子

02:54.610 --> 03:00.770
好 然后这就可能我们大致了解了解一下 杀杆之后呢 我们再说一下啊 杀杆它的实现原理是什么

03:01.010 --> 03:04.690
他为什么能够保持存进 为什么能够这么灵活 功能强大

03:05.570 --> 03:09.490
嗯 这种还是画一个图啊 杀杆他首先是一个中间键啊 他怎么来

03:10.050 --> 03:14.610
实现副作用处理的 实际上呢 我们学了之后呢 你会发现啊 杀杆了他也

03:14.930 --> 03:15.650
他不一定是

03:16.290 --> 03:21.650
不一定仅仅是可以做那个副作用处理 还可以做很多很多的事情啊 功能非常非常强大

03:22.290 --> 03:28.130
嗯 咱们呢 之前呢 学过那个中间键的 那个中间键这一块呢 我们之前说的是这样子

03:29.890 --> 03:35.650
就说呢 我们在那个瑞大克斯里面呢 可以可以写多个中间键啊 中间键

03:37.090 --> 03:44.370
一啊 然后呢 中间键二啊 中间键三啊 然后中间键四

03:45.090 --> 03:55.650
对吧 他有很多的中间键 当我们一个x型到导的时候呢 啊 来了一个x型之后呢 他会把这个x型呢 交给这个 从依次交给这个中间键来进行处理

03:55.970 --> 04:00.050
对吧 我们之前是讲过这个东西的 啊 中间键的实现原理

04:02.980 --> 04:05.620
回归一下吧 啊 这个原理其实还蛮重要的

04:07.540 --> 04:08.900
啊 来啦 过后

04:09.860 --> 04:13.780
那么他依会依次交给这些中间键处理啊 中间键来进行处理

04:14.260 --> 04:20.020
啊 处理完了过后呢 最后一个就是原始的中间键了 对吧 就是原始中间键

04:20.660 --> 04:24.740
啊 不是原始中间键啊 原始的原始dispatch

04:26.180 --> 04:35.380
啊 那么原始dispatch呢 他就会交给reducer啊 把这个x型的交给reducer啊 交给什么 交给reducer

04:38.340 --> 04:43.940
reducer 对吧 这就是中间键的一个处理流程啊reducer呢 他就会返回一个新的数据

04:44.260 --> 04:47.380
那么长过就会把新的数据保存下来啊 就这么回事

04:48.020 --> 04:52.900
啊 所以说呢 我们以前的处理方式呢 就是x型给出去了啊 触发就是dispatch一个x型

04:53.140 --> 04:56.820
那么这些中间键呢 一时来处理这个x 啊 一时来处理这个x

04:58.180 --> 05:00.500
那么这也稍微画一下啊 稍微画一下

05:01.940 --> 05:05.940
这中间键 一时来处理这个x型 那么最终呢是交给原始的dispatch

05:06.100 --> 05:11.940
然后呢 把一个型触发给reducer 对吧 啊 以前呢 我们这里中间键呢 这里可能有上颗 对不对

05:12.020 --> 05:16.420
上颗啊 或者是promise啊 那么上颗promise呢 他是

05:17.460 --> 05:21.540
就是说啊 上颗他必须要求要求第1个啊 他必须要要求第1个

05:22.580 --> 05:26.900
上颗呢 他在处理的时候呢 他会要求你这个proaction呢 可以是一个函数

05:27.140 --> 05:28.900
当他是一个函数的时候 是不是

05:29.780 --> 05:33.940
他会调用这个函数 对吧 调用这个函数 把这个函数的法人回结果呢

05:34.900 --> 05:40.660
然后在这个函数里边 然后再重新去处发一个型啊 又是回过头来再重新处发啊

05:40.660 --> 05:45.380
也说他是这样子 调用函数 我们大概画一下啊

05:46.740 --> 05:51.780
啊 之前没有画过那个上颗的 没有画过这个上颗中间键的处理流程啊 所以大概画一下

05:52.100 --> 05:56.420
其实之前因为他很简单嘛 我们也写过元代嘛 大家都明白什么回事

05:57.380 --> 06:05.540
啊 那么这里呢 如果x型是函数的话 他会调用啊 如果他不是函数的话 就依次处理了 什么都没做啊 调用x型函数

06:06.260 --> 06:11.860
调用x型函数 在x型函数里边呢 又会重新处发啊 又会重新处发

06:14.020 --> 06:16.180
重新处发这个啊 重新处发一个型

06:17.140 --> 06:21.700
重新dspark起来个型 这是上颗的处理 对吧 那promise呢 是一举同工之妙

06:22.100 --> 06:27.300
promise呢 他的处理方式呢 他是 如果说你x型是一个promise的话 我会等待你

06:27.860 --> 06:32.900
等待你结束 等待你结束呢 把那个等待结束的东西呢形成x型又重新处发 对吧

06:33.860 --> 06:39.140
这是上颗的处理原理啊 好 那么如果说是saga的话

06:40.580 --> 06:46.980
那么saga是怎么处理的 首先saga呢 他不要求就说你的saga呢 必须是第一个中间线 他没有这样的要求

06:47.220 --> 06:53.300
你可以放到任何一个中间线位置 因为呢 他不会污染x型 x型本身就是一个非常非常纯净的x型

06:53.940 --> 06:58.260
他本身不会污染你x型 那么saga的处理方式是什么呢 saga是这样子

06:59.220 --> 07:04.980
在一开始的时候呢 saga他会启动 在最开始的时候 他会启动一个

07:06.180 --> 07:11.980
启动一个就是saga任务 他会启动一个saga任务

07:12.940 --> 07:18.380
最开始的时候啊 而不是等到你处发x型的时候 在最开始的时候会启动一个saga任务

07:19.660 --> 07:24.620
启动 在最开始 在最开始的时候

07:25.580 --> 07:30.940
不是说处发x型的时候啊 是最开始的时候启动一个saga任务

07:34.670 --> 07:40.110
这个saga任务是一个什么东西呢 saga任务呢 实际上啊 它其实就是一个

07:41.390 --> 07:42.910
叫做生成器函数

07:44.270 --> 07:49.310
它为什么要做成一个生成器函数呢 因为这个生成器里边是不是可以用eo的 对吧

07:49.550 --> 07:54.670
我们之前讲过生成器复习过 那么生成器里边有eo的是不是可以被外部控制

07:55.150 --> 07:59.150
对吧 生成器函数里边可以写eo的 那么是不是会被外部的生成器

07:59.550 --> 08:05.230
所控制啊 对不对 控制它的执行啊 比方说eo的后边有个东西 那么这个东西那个

08:05.630 --> 08:10.910
那个那个那个生成器它会拿到拿到这个东西 然后呢来控制这个东西该怎么去运行

08:11.150 --> 08:14.910
要不要进行下一步 对不对 那么整个函数的执行呢会被控制

08:15.230 --> 08:20.590
那么谁来控制呢 由于它是一个生成器函数 它会被saga这个中间键所控制

08:21.070 --> 08:27.230
也就是中间键里边 它会有一个生成器 它会调用这个调用你给的生成器函数

08:27.630 --> 08:30.510
它里边会保持一个生成器 那么这个生成器呢

08:31.310 --> 08:34.430
到时候呢 它就会控制你这个生成器函数的运行

08:35.550 --> 08:40.190
它在注意开始的时候就会启动这么一个任务啊 为什么叫做叫做它任务呢

08:41.630 --> 08:45.550
为什么叫做任务呢 因为它会被外部控制它的执行流程啊 你先做

08:45.710 --> 08:50.270
就是你做的时候该怎么来控 该怎么来运行 它会完全被外部所控制

08:50.430 --> 08:53.470
因此呢我们通常情况下呢会把它叫做一个saga任务

08:54.190 --> 08:56.430
saga在注意开始的时候就会启动这么一个任务

08:56.670 --> 09:00.910
这个任务里边提供了非常非常多的功能啊 可以供你使用

09:01.390 --> 09:04.830
那么这些功能呢是以指令的形式出现的

09:06.510 --> 09:08.670
任务就是saga为

09:10.430 --> 09:13.550
任务提供了大量功能

09:15.550 --> 09:16.510
一共使用

09:17.630 --> 09:18.510
一共使用

09:21.140 --> 09:23.300
那么这里呢 这些功能

09:23.860 --> 09:25.060
功能是以

09:26.100 --> 09:28.500
是以这个就是指令

09:28.740 --> 09:34.740
这些东西大家都很模糊对吧 我这里说了半天都很模糊 没事 以后我们写代码的社会感受到了啊

09:34.900 --> 09:37.460
这些功能都是以指令的形式出现的

09:38.260 --> 09:38.900
出现的

09:39.300 --> 09:43.140
而且出现在eod的位置

09:43.300 --> 09:46.180
那么出现在eod的位置是不是可以被外部所控制

09:46.260 --> 09:50.420
对吧 它会被外部在外部所控制被saga中间键所控制

09:50.980 --> 09:55.140
因此可以被saga中间键控制

09:55.540 --> 09:56.740
控制它的指令

09:58.740 --> 10:02.100
于是呢我们就可以在这个任务里的进行各种各样的处理

10:02.500 --> 10:04.100
那么有了这个任务之后呢

10:04.740 --> 10:07.780
这个任务有了这个任务之后后边的x形呢

10:08.100 --> 10:11.140
x形到达过后x形是很纯净的x形啊

10:11.300 --> 10:14.180
到达过后呢就会受到个就会受到这个任务的影响

10:14.580 --> 10:16.100
任务就会影响这些x形

10:17.140 --> 10:18.500
大概就是这么一回事

10:18.660 --> 10:20.900
也就是说从这个图里边可以看出呢

10:21.060 --> 10:22.580
这个saga呀这一块啊

10:23.380 --> 10:24.260
saga这一块

10:24.740 --> 10:28.980
那么它呢它实际上是另外开了一个完整的模块

10:29.220 --> 10:31.620
一个全新的模块来进行控制的

10:31.940 --> 10:34.660
而不是说它要求你x形要做什么改变

10:34.660 --> 10:36.180
reducer要做什么改变没有

10:36.660 --> 10:38.900
这些东西都不变x形reducer不变

10:39.140 --> 10:41.540
那么它是新开一个模块来进行处理

10:41.700 --> 10:44.180
那么这个模块呢首先要知道这个模块

10:44.500 --> 10:45.220
它是一个什么

10:45.380 --> 10:47.060
它是一个生成器函数

10:47.300 --> 10:48.420
叫做saga任务

10:48.980 --> 10:52.580
那么这个任务里边有各种各样的功能可以供你使用

10:52.820 --> 10:54.100
那么你使用的时候呢

10:54.420 --> 10:56.820
你这些功能呢都出现在eo的位置对吧

10:56.820 --> 10:58.740
我先对它的大概了一个了解

10:59.300 --> 11:01.700
那么这些由于它出现在eo的位置

11:01.700 --> 11:05.060
因此呢它可以被saga中间键所控制它的执行

11:05.220 --> 11:08.260
就这个任务里边函数它不是从头执行到尾对吧

11:08.420 --> 11:10.580
它是被saga所控制的

11:10.740 --> 11:13.940
那么进行到某一步的时候它可能会停一下啊

11:14.100 --> 11:16.820
等待一下等待然后后面又继续执行

11:16.820 --> 11:18.420
因为它是一个生成器函数嘛

11:18.820 --> 11:21.060
我们先有这么一个粗略的印象

11:21.460 --> 11:23.860
好那么这张图呢我先把它放进来

11:23.860 --> 11:26.020
这张图呢你肯定现在的话

11:26.260 --> 11:28.660
理解起来了会有所困难啊

11:28.820 --> 11:30.820
完全理解这张图呢肯定会有所困难

11:30.820 --> 11:32.420
不着急啊不着急

11:33.860 --> 11:37.380
咱们呢在后边讲解的过程中一边写代码了

11:37.380 --> 11:40.340
一边对到这张图来看你会发现啊慢慢就理解了

11:40.980 --> 11:42.740
好那么现在能回到这

11:43.220 --> 11:46.580
我们现在在这个工程里边我们去先去安装一下saga

11:47.060 --> 11:49.220
这里呢用要add

11:49.220 --> 11:51.060
saga的名字就是redugssaga

11:51.060 --> 11:52.740
非常简单安装一下它

11:55.230 --> 11:58.190
来大致的体会一下它是怎么去运作的

11:58.590 --> 12:00.270
与其它代码怎么去书写的

12:01.070 --> 12:04.510
好怎么书写呢我们到了这个app这里边

12:04.670 --> 12:06.430
在stone里边这里边来啊

12:06.590 --> 12:07.390
常库里边来

12:08.030 --> 12:10.670
这是我们之前的对吧用的是sunk对不对

12:10.670 --> 12:12.910
好咱们不用上课了啊不用上课了

12:13.390 --> 12:14.430
好上课去掉

12:14.430 --> 12:18.590
然后呢我们之前的x型里边是不是写了一些起心怪状的x型对吧

12:19.150 --> 12:20.190
啊还有什么

12:23.310 --> 12:24.590
x型里边啊

12:25.470 --> 12:27.070
对吧这里写了一个什么

12:27.550 --> 12:28.590
副作用的x型对吧

12:28.590 --> 12:29.790
返回了一个函数不要了

12:30.910 --> 12:35.710
不要了啊x型尽量的保持存进啊尽量的保持存进啊

12:35.710 --> 12:37.150
这里也不写这些东西了啊

12:37.150 --> 12:40.270
你看x型是不是又回到最存进的状态了对吧

12:40.750 --> 12:44.110
啊x型保持存进啊跟x型没有什么关系

12:44.110 --> 12:45.870
saga是单独来处理的

12:45.870 --> 12:47.710
好我们看一下安装好了没有好了

12:48.670 --> 12:49.870
好我们这里运行出来啊

12:52.270 --> 12:55.550
好安装好了之后呢我们怎么来用这个saga呢

12:55.550 --> 12:58.430
首先我们导入啊导入从这个哪里呢

12:58.430 --> 12:59.230
从最大个式

13:00.750 --> 13:03.870
从最大个式横杠啊saga里边把导入进来

13:04.350 --> 13:06.430
它里边来提供一个函数叫做create

13:08.590 --> 13:11.390
create这个智能提示呢

13:12.750 --> 13:17.470
没有智能提示的话我就强行写了啊create saga medeware

13:18.270 --> 13:18.830
medeware

13:20.510 --> 13:22.270
它又提供了这么一个函数

13:22.270 --> 13:24.430
就是创建一个saga的中间键

13:25.070 --> 13:28.110
那么这里呢我们利用这个函数create saga medeware

13:28.110 --> 13:30.670
那么它这里边写啥呢可以啥都不写

13:31.230 --> 13:34.030
啥都不写那么直接得到一个saga的medeware

13:34.830 --> 13:37.550
得到啊saga medeware

13:38.510 --> 13:40.590
啊这句话的意思是

13:41.230 --> 13:42.510
这句话没什么好说的对吧

13:42.510 --> 13:46.190
就是创跟那个日治那一块啊差不多啊

13:46.750 --> 13:48.670
创建一个saga

13:50.270 --> 13:51.630
saga的中间键

13:52.830 --> 13:54.190
创建这么一个中间键

13:54.190 --> 13:56.190
然后呢这个中间键是不是要应用进去

13:56.190 --> 13:58.350
对吧应用进去完事了就这么简单

13:59.230 --> 14:01.310
好那么刚才我们说这个saga呢

14:01.310 --> 14:04.190
它在最开始的时候要启动一个saga任务对吧

14:04.190 --> 14:06.030
不然的话这个saga没有意义

14:06.030 --> 14:08.670
你看一下现在有意义吗没有啥意义啊

14:08.750 --> 14:10.750
比方说我们在测试里边啊之前

14:11.710 --> 14:12.350
我看一下啊

14:15.630 --> 14:17.870
之前啊这里就没有这个fake students了啊

14:17.870 --> 14:19.390
没就没有这个玩意了啊

14:19.390 --> 14:22.350
比方说我们随便签计嘛啊签计一下

14:22.910 --> 14:24.270
改变一下查询条件啊

14:24.270 --> 14:25.550
就是咱们之前做了例子

14:26.670 --> 14:27.470
保存啊

14:27.950 --> 14:28.910
咱们改变一下查询

14:28.910 --> 14:30.750
哎这里抱错了啊他说什么

14:32.110 --> 14:37.150
他说create saga medeware is not imported from redox saga

14:37.870 --> 14:39.150
啊那我这里写错了吗

14:39.150 --> 14:39.790
我看一下啊

14:40.350 --> 14:40.910
看一下他的

14:41.710 --> 14:43.070
他的这个代版里边

14:43.870 --> 14:45.150
这个叫啥呢

14:45.150 --> 14:46.590
哦他是默认导出啊

14:46.590 --> 14:47.550
他是默认导出

14:48.110 --> 14:48.590
啊ok

14:49.070 --> 14:50.430
他不是这样子导出的啊

14:50.430 --> 14:51.630
默认导出行了

14:51.630 --> 14:52.510
拿这样子

14:52.510 --> 14:53.150
好保存

14:54.190 --> 14:56.350
咱们换到这来啊右键键

14:56.350 --> 14:56.510
哎

14:57.230 --> 14:58.270
右键键插一下

14:58.990 --> 15:00.830
那么现在呢我们设置了签计对吧

15:00.830 --> 15:01.710
签计你看一下

15:02.270 --> 15:04.510
当我们触发这个签计的action的时候呢

15:04.590 --> 15:07.230
他之前的啊查询条件啊

15:07.230 --> 15:07.950
查询条件

15:08.670 --> 15:10.030
这之前的查询条件

15:10.030 --> 15:12.030
然后呢变到了之后的查询条件对吧

15:12.030 --> 15:13.870
这是咱们这是咱们之前做过的啊

15:13.870 --> 15:15.710
非常非常简单的一个例子

15:16.270 --> 15:16.910
这么一个例子

15:18.350 --> 15:18.830
好

15:18.830 --> 15:22.190
然后呢我们这里呢为了之后呢测试方便啊

15:22.190 --> 15:23.470
为了之后测试方便

15:23.470 --> 15:25.390
我们这里呢再写这么一个

15:25.390 --> 15:27.070
仓库里边再写一些一个行吗

15:27.070 --> 15:28.910
比方说对一个数字的控制啊

15:28.910 --> 15:30.750
就简单的写一些为了后边

15:30.750 --> 15:32.830
主要是为了后边写一些例子啊

15:32.830 --> 15:34.270
主要是为了后边的例子

15:34.350 --> 15:37.310
我们在这里呢再写一个啊

15:37.310 --> 15:38.750
再写写一个文念夹

15:38.750 --> 15:40.590
action里边再写一个文念夹

15:40.590 --> 15:42.030
就是 counter

15:42.750 --> 15:43.150
counter

15:44.430 --> 15:45.150
就表示的是

15:45.150 --> 15:46.270
这 counter 什么意思呢

15:46.270 --> 15:47.710
就表示的是数字啊

15:47.710 --> 15:50.030
就表示了数字一个对一个数字啊

15:50.030 --> 15:51.150
他数字也是个数据嘛

15:51.150 --> 15:53.070
对一个数数字数据的控制

15:53.070 --> 15:54.910
好那么这里面呢我们就写上那个

15:56.830 --> 15:57.310
action

15:59.730 --> 16:02.610
数字就是数字的话就直接印这个是点击

16:02.610 --> 16:03.170
是吧

16:03.170 --> 16:05.330
因为他也没有什么多少的东西可以控制

16:05.410 --> 16:06.770
我们导出一下action types

16:08.210 --> 16:08.770
export

16:10.210 --> 16:10.770
action

16:11.570 --> 16:11.970
taps

16:13.090 --> 16:14.130
哪些内行呢

16:14.130 --> 16:15.010
数字呢有

16:15.010 --> 16:15.730
increase

16:16.450 --> 16:17.010
increase

16:17.970 --> 16:18.610
increase

16:18.610 --> 16:20.050
表示增加啊增加

16:21.170 --> 16:22.610
这里呢我们用字无创也想

16:22.610 --> 16:23.890
用symbol也想随便嘛

16:24.610 --> 16:25.090
symbol嘛

16:26.050 --> 16:26.530
increase

16:27.090 --> 16:27.490
好

16:27.490 --> 16:29.410
你看一下action的内行是不是

16:29.410 --> 16:32.050
还是一个普通的字无创或者是symbol对吧

16:32.050 --> 16:32.610
decrease

16:33.490 --> 16:34.290
decrease

16:34.370 --> 16:37.650
但如果你要符合reflux标准的话

16:37.650 --> 16:38.930
那么你应该是用字无创

16:39.570 --> 16:39.970
symbol

16:42.140 --> 16:42.940
那么decrease

16:44.220 --> 16:45.740
这是增加一个数字

16:45.740 --> 16:46.780
减少一个数字

16:46.780 --> 16:48.380
然后呢我们通过导出啊

16:48.380 --> 16:50.380
导出一些action嘛

16:50.380 --> 16:50.940
increase

16:53.520 --> 16:54.880
这是action创建函数

16:56.400 --> 16:57.600
增加啊增加

16:57.600 --> 16:59.760
增加的话就反而回一个action type呢

16:59.760 --> 17:01.680
就是action types

17:02.080 --> 17:02.640
increase

17:03.840 --> 17:05.200
然后呢再导出一个函数

17:06.160 --> 17:07.200
创建

17:07.200 --> 17:07.920
decrease

17:07.920 --> 17:09.680
后面呢我们就在正信粒子上进行

17:10.320 --> 17:11.520
来操作啊来操作

17:12.240 --> 17:13.440
type呢action types

17:14.320 --> 17:14.880
decrease

17:15.280 --> 17:15.760
decrease

17:16.720 --> 17:17.440
增加一个数字

17:17.440 --> 17:18.400
减少一个数字

17:18.400 --> 17:19.280
好那么对应呢

17:19.280 --> 17:21.200
我们在reducer里面也写一个嘛

17:21.200 --> 17:22.160
也写一个reducer

17:22.640 --> 17:23.360
这里counter

17:24.080 --> 17:24.720
counter里面呢

17:24.720 --> 17:25.840
我们写上一个index

17:27.680 --> 17:28.400
index

17:28.400 --> 17:29.200
好那么这里呢

17:29.200 --> 17:29.760
reducer呢

17:29.760 --> 17:30.880
就是一个函数对不对

17:31.280 --> 17:32.240
导出一个函数

17:33.360 --> 17:34.240
default

17:34.240 --> 17:34.720
创建

17:35.440 --> 17:36.160
set

17:36.160 --> 17:37.200
那么默认的值呢

17:37.200 --> 17:38.400
默认的值比方说10

17:38.800 --> 17:39.600
比方说10嘛

17:40.320 --> 17:42.160
然后呢这里呢有一个action

17:42.160 --> 17:42.960
啊action

17:42.960 --> 17:43.600
好那么这里呢

17:43.600 --> 17:45.040
我们是用switch对吧

17:45.040 --> 17:45.920
是用switch

17:47.120 --> 17:47.840
好这里

17:47.840 --> 17:49.680
我们找到这个action的啊

17:49.680 --> 17:51.360
这里个解构一下嘛

17:51.360 --> 17:52.240
解构一下

17:52.240 --> 17:53.360
就是type

17:53.840 --> 17:54.320
和什么

17:54.320 --> 17:55.040
payload

17:55.040 --> 17:55.520
payload的

17:55.520 --> 17:56.720
payload的我们都不需要对吧

17:56.720 --> 17:57.520
这里这一块呢

17:57.520 --> 17:58.800
我们不需要payload的

17:58.800 --> 17:59.600
好 type

17:59.600 --> 18:01.200
只看上type值

18:01.200 --> 18:02.800
然后这里导入那个action types

18:02.800 --> 18:04.800
x

18:04.800 --> 18:06.800
x types

18:06.800 --> 18:08.080
front

18:08.080 --> 18:09.280
回到上级路路

18:09.280 --> 18:11.120
x counter

18:11.920 --> 18:12.800
好那么这里呢

18:12.800 --> 18:14.320
如果说你的内形呢

18:14.320 --> 18:16.800
是action types里面的increase

18:16.800 --> 18:18.240
啊如果你是增加数字的话

18:18.240 --> 18:19.040
我就反回什么

18:19.040 --> 18:20.800
stats加1啊就这么简单

18:20.800 --> 18:21.680
好然后呢

18:21.680 --> 18:22.320
case

18:22.320 --> 18:24.160
啊如果说action types

18:24.160 --> 18:25.120
会decrease的话

18:25.120 --> 18:27.280
我就反回stats-1

18:27.280 --> 18:28.400
就这么简单

18:28.400 --> 18:29.040
好然后呢

18:29.040 --> 18:30.080
default

18:30.080 --> 18:30.960
我就反回

18:31.920 --> 18:32.960
远方不动的反回

18:33.520 --> 18:34.560
好了就写好了

18:34.560 --> 18:35.600
reducer就写好了

18:35.600 --> 18:37.360
非常简单一个东西

18:37.360 --> 18:38.000
好然后呢

18:38.000 --> 18:39.120
我们在index里面

18:39.120 --> 18:40.160
就不知道进行合并吗

18:40.160 --> 18:40.640
对吧

18:40.640 --> 18:41.920
不知道进行合并吗

18:41.920 --> 18:42.320
好ok

18:42.320 --> 18:42.960
我们再合并

18:46.020 --> 18:46.660
counter

18:46.660 --> 18:46.980
front

18:48.020 --> 18:48.420
counter

18:49.700 --> 18:50.340
好这里呢

18:50.340 --> 18:51.220
我们把counter加进去

18:51.780 --> 18:52.660
好了reducer里面

18:52.660 --> 18:53.380
多了一个counter

18:53.380 --> 18:53.860
对吧

18:53.860 --> 18:55.060
好保存再看一下啊

18:55.060 --> 18:55.780
再看一下

18:55.780 --> 18:56.500
那么我们之前

18:56.500 --> 18:57.700
那么我们的仓库里面

18:57.700 --> 18:58.980
试看是不是多了一个counter

18:58.980 --> 18:59.380
对吧

18:59.380 --> 19:00.420
那么我们也可以触发

19:00.420 --> 19:01.460
这个counter的增加

19:01.460 --> 19:02.500
或者是减少

19:02.580 --> 19:03.140
只不过呢

19:03.140 --> 19:04.340
现在我没有做界面

19:04.340 --> 19:04.820
到时候呢

19:04.820 --> 19:05.700
界面做出来

19:05.700 --> 19:06.820
点击按钮过后增加

19:06.820 --> 19:07.860
点击按钮过后减少

19:07.860 --> 19:08.900
那个都很简单

19:08.900 --> 19:10.580
我们现在直接在这里触发

19:10.580 --> 19:11.540
是一样的

19:11.540 --> 19:12.180
是一样的

19:12.180 --> 19:13.860
直接在这里触发就完事了

19:13.860 --> 19:14.580
完全没问题

19:15.300 --> 19:15.700
好了啊

19:15.700 --> 19:16.340
就差不多了

19:16.340 --> 19:16.980
就写好了

19:18.580 --> 19:19.540
好那么现在呢

19:19.540 --> 19:20.260
我们回到这来

19:21.460 --> 19:22.500
我们刚才那不是创建了

19:22.500 --> 19:23.700
一个saga的中间键吗

19:24.260 --> 19:24.660
对不对

19:25.220 --> 19:26.820
创建了一个saga的中间键

19:26.820 --> 19:28.580
那么我们刚才的原理里面说

19:28.580 --> 19:29.940
saga在最开始的时候

19:29.940 --> 19:31.700
是不是要启动一个saga任务

19:31.700 --> 19:32.340
对吧

19:32.820 --> 19:34.980
那我这里有没有启动saga任务啊

19:35.540 --> 19:36.340
并没有

19:36.340 --> 19:37.300
因为这个saga任务

19:37.300 --> 19:38.100
我们自己得写

19:38.100 --> 19:39.380
他也不知道聊干嘛

19:39.380 --> 19:39.780
对不对

19:39.780 --> 19:40.900
他也不知道聊干嘛

19:40.900 --> 19:41.300
因此呢

19:41.300 --> 19:42.420
你得自己写代吧

19:42.420 --> 19:44.020
来表示一个saga任务

19:44.020 --> 19:44.900
那么这个saga任务

19:44.900 --> 19:45.700
我们怎么写呢

19:45.700 --> 19:46.900
你看一下下面说的

19:46.900 --> 19:47.700
saga任务呢

19:47.700 --> 19:49.700
它是一个生成器函数

19:49.700 --> 19:51.140
那么之前是不学过的

19:51.140 --> 19:52.100
saga任务是它

19:52.100 --> 19:53.540
是不是一个生成器函数

19:53.540 --> 19:54.740
好那么这里呢

19:55.380 --> 19:55.940
我们在这

19:56.500 --> 19:57.700
写上方形

19:58.100 --> 19:58.580
方形

19:59.700 --> 20:00.500
好这里呢

20:00.580 --> 20:02.740
我们写上一个生成器函数

20:02.740 --> 20:04.340
这个我们就该取个名字

20:04.340 --> 20:07.780
叫做saga task

20:07.780 --> 20:08.900
saga task

20:08.900 --> 20:10.260
好生成器函数应该怎么写

20:10.260 --> 20:11.620
是不是在这里要写个新号

20:11.620 --> 20:12.020
对吧

20:12.020 --> 20:13.940
它表示一个生成器函数

20:13.940 --> 20:14.900
生成器函数

20:15.780 --> 20:16.340
就这么回事

20:17.060 --> 20:18.020
好那么现在呢

20:19.220 --> 20:21.140
这个生成器函数写出来了

20:21.140 --> 20:21.940
好那么这里边呢

20:21.940 --> 20:22.660
我们写啥呢

20:22.660 --> 20:24.100
我们先啥都不写嘛

20:24.100 --> 20:24.900
先啥都不写

20:24.900 --> 20:25.540
我们这里就是

20:26.180 --> 20:27.940
saga启动了

20:27.940 --> 20:29.220
saga启动了

20:29.220 --> 20:29.780
好

20:29.780 --> 20:30.820
现在呢我们这样子

20:31.380 --> 20:33.220
我们在这个生成器函数

20:33.220 --> 20:34.020
怎么启动呢

20:34.020 --> 20:35.700
我们怎么的告诉这个saga呢

20:36.260 --> 20:36.900
因为这个saga

20:37.380 --> 20:38.820
它要运行这个任务

20:38.820 --> 20:39.860
这就是一个saga任务

20:40.580 --> 20:41.140
这就是一个

20:41.700 --> 20:42.340
saga任务

20:43.540 --> 20:44.500
只能有一个

20:44.500 --> 20:45.780
saga任务只能有一个

20:46.260 --> 20:47.060
那么这样子呢

20:47.060 --> 20:48.580
这个saga任务放在那

20:48.580 --> 20:49.620
那么怎么样高

20:49.620 --> 20:51.300
让saga把这个任务启动起来呢

20:51.300 --> 20:52.820
就是把这个生成器函数

20:52.820 --> 20:54.100
交给saga来控制

20:54.100 --> 20:55.940
控制这个函数里面的执行

20:55.940 --> 20:56.580
怎么来做呢

20:57.620 --> 20:58.900
直接调用这个saga面的

20:58.980 --> 21:00.660
就是你创建那个中间界里面的一个方法

21:00.660 --> 21:01.460
叫做wrong

21:02.500 --> 21:03.780
启动一个啥呢

21:03.780 --> 21:06.340
启动一个生成器任务

21:06.340 --> 21:07.540
saga task

21:07.540 --> 21:09.300
把这个函数传进去玩事了

21:09.300 --> 21:10.500
就这么简单

21:10.500 --> 21:12.500
当然如果这个函数有什么参数的话

21:12.500 --> 21:14.100
当然一般都没有什么参数

21:14.100 --> 21:15.300
如果说有什么参数的话

21:15.300 --> 21:15.540
ok

21:15.540 --> 21:16.260
你在后边

21:16.260 --> 21:17.540
积极加参数就玩事了

21:17.540 --> 21:18.580
这个很简单

21:18.580 --> 21:20.980
就启动这么一个任务

21:20.980 --> 21:22.500
启动saga任务

21:23.540 --> 21:23.860
好

21:23.860 --> 21:24.820
那么现在呢

21:24.820 --> 21:25.780
它就变成这个样子的

21:25.780 --> 21:26.660
saga就一开始的时候

21:26.660 --> 21:28.340
就启动了这么一个saga任务

21:28.420 --> 21:29.780
它是一个生成器函数

21:29.780 --> 21:31.940
由于它是一个生成器函数

21:31.940 --> 21:33.940
那么这个函数里面的执行

21:33.940 --> 21:35.540
是不是可以受到外部控制

21:35.540 --> 21:36.340
谁在控制它

21:36.340 --> 21:37.780
就是saga这个中间界

21:37.780 --> 21:39.140
在控制这个函数执行

21:39.780 --> 21:40.820
控制这个函数执行

21:40.820 --> 21:41.860
那它怎么来控制的

21:41.860 --> 21:43.060
以后我们会详细说

21:43.700 --> 21:43.940
好

21:43.940 --> 21:44.340
那么这里呢

21:44.340 --> 21:45.700
我们首先看到这里

21:45.700 --> 21:46.100
你看

21:46.100 --> 21:47.220
saga是不是启动了

21:47.220 --> 21:48.180
对不对

21:48.180 --> 21:48.900
就启动了

21:48.900 --> 21:49.620
就这么简单

21:49.620 --> 21:50.340
就这么简单

21:51.940 --> 21:52.180
好

21:52.180 --> 21:52.660
然后呢

21:52.660 --> 21:53.540
我们如果说

21:53.540 --> 21:55.940
我们一开始不去触发任何的x型

21:56.820 --> 21:58.180
任何的x型都不触发

21:58.340 --> 21:58.900
保存

21:58.900 --> 21:59.460
你看一下

21:59.460 --> 22:00.900
是不是这个函数还是运行了

22:00.900 --> 22:01.540
对吧

22:01.540 --> 22:02.820
还是运行了

22:02.820 --> 22:03.220
对不对

22:04.020 --> 22:05.220
没什么问题吧

22:05.220 --> 22:06.660
这个函数仍然运行了

22:06.660 --> 22:07.620
仍然运行了

22:08.900 --> 22:09.540
好

22:09.540 --> 22:10.260
那么这就是

22:11.140 --> 22:12.580
这个基本的结构

22:12.580 --> 22:13.540
基本的结构

22:13.540 --> 22:15.540
让saga先去运行

22:15.540 --> 22:17.140
这个函数任务

22:17.140 --> 22:18.020
这个函数任务

22:18.020 --> 22:19.540
当然我们平时写的时候

22:19.540 --> 22:21.460
不太会这样子去写

22:21.460 --> 22:22.180
我们通常呢

22:22.180 --> 22:23.220
会怎么去做呢

22:23.220 --> 22:23.860
我们通常呢

22:23.860 --> 22:25.540
会在这里建一个文件夹

22:26.180 --> 22:27.140
建一个文件夹

22:27.700 --> 22:28.740
就该取名为saga

22:29.700 --> 22:30.340
因为saga呢

22:30.340 --> 22:31.700
我们从这个图里边可以看出

22:31.700 --> 22:32.900
它是一个单独的模块

22:32.900 --> 22:33.300
对吧

22:33.300 --> 22:33.700
所以说呢

22:33.700 --> 22:35.780
我们通常会在这里建一个文件夹

22:35.780 --> 22:37.220
把这个saga任务呢

22:37.220 --> 22:38.820
写到这个文件夹里面的

22:38.820 --> 22:39.620
in这个设里边

22:40.500 --> 22:41.220
in这个设里边

22:41.780 --> 22:42.180
好

22:42.180 --> 22:42.500
然后呢

22:42.500 --> 22:44.260
我们把这个任务放进来

22:44.260 --> 22:45.140
saga任务

22:45.140 --> 22:45.940
放进来

22:45.940 --> 22:46.340
这里呢

22:46.340 --> 22:47.380
我们可以导出

22:47.380 --> 22:48.820
导出saga任务

22:48.820 --> 22:48.980
好

22:48.980 --> 22:49.300
当然呢

22:49.300 --> 22:50.260
我们导出的时候呢

22:50.260 --> 22:50.740
也可以

22:51.940 --> 22:53.220
写一个历米函函数

22:53.220 --> 22:53.700
对吧

22:53.700 --> 22:55.060
这个函数也不需要名字

22:55.060 --> 22:56.580
那么如果说你是一个

22:56.660 --> 22:57.780
生成器的话

22:57.780 --> 22:58.420
我们这里呢

22:58.980 --> 23:00.740
直接不要这个名字也行

23:00.740 --> 23:01.140
也行

23:04.580 --> 23:06.340
那就必须要默认导出了

23:06.340 --> 23:07.940
默认导出还不能有名字

23:07.940 --> 23:08.180
好

23:08.180 --> 23:08.740
那么这里呢

23:08.740 --> 23:09.780
这样子的也行

23:09.780 --> 23:10.180
好

23:10.180 --> 23:10.580
然后呢

23:10.580 --> 23:11.140
我们在这里

23:12.900 --> 23:14.020
那这里是不是可以导入

23:14.020 --> 23:14.500
对吧

23:14.500 --> 23:14.980
再导入

23:16.100 --> 23:16.740
in port

23:16.740 --> 23:17.380
saga

23:17.380 --> 23:17.700
同时呢

23:17.700 --> 23:19.380
我们会发现那个index的点

23:19.380 --> 23:20.340
介绍个函数干嘛的

23:20.340 --> 23:21.540
就是处理更多更多

23:21.540 --> 23:22.180
中间间啊

23:22.180 --> 23:23.460
那些乱七八的东西

23:23.460 --> 23:24.500
把它放到窗窟里边

23:25.540 --> 23:26.500
saga task

23:27.460 --> 23:28.660
from

23:28.660 --> 23:29.460
saga

23:29.460 --> 23:30.340
saga

23:30.340 --> 23:31.060
咦

23:31.060 --> 23:32.340
saga

23:32.340 --> 23:32.980
好

23:32.980 --> 23:33.780
这里呢

23:33.780 --> 23:35.380
我们放到这个

23:35.380 --> 23:36.420
这里

23:36.420 --> 23:37.380
一样的

23:37.380 --> 23:38.580
效果是完全一样的

23:38.580 --> 23:39.380
保存

23:39.380 --> 23:40.260
拿去看一下

23:40.260 --> 23:41.780
这个任务是不是启动了

23:41.780 --> 23:42.500
对不对

23:42.500 --> 23:43.300
好

23:43.300 --> 23:43.940
那么目前呢

23:43.940 --> 23:44.740
有什么意义呢

23:44.740 --> 23:45.860
目前没有任何意义

23:45.860 --> 23:48.340
它对我们的exy没有产生任何影响

23:48.340 --> 23:49.860
以后会不会去触发什么exy呀

23:49.860 --> 23:50.580
这些东西呢

23:50.580 --> 23:53.380
都不会造成任何的区别

23:53.380 --> 23:54.660
不会造成任何的区别

23:54.660 --> 23:55.540
所以说

23:55.780 --> 23:56.580
目前呢

23:56.580 --> 23:58.100
是没有任何意义的

23:58.100 --> 23:58.660
那么现在呢

23:58.660 --> 24:00.580
我们就把注意力集中来这

24:00.580 --> 24:01.860
就是个saga任务里边

24:01.860 --> 24:03.700
可以写什么东西

24:03.700 --> 24:04.900
如果说你这里边写的是

24:04.900 --> 24:06.260
普通代码的话

24:06.260 --> 24:07.220
那没有什么影响

24:07.220 --> 24:08.820
就直接运行就行了

24:08.820 --> 24:09.700
由于但是由于

24:09.700 --> 24:11.380
它是一个生成器函数

24:11.380 --> 24:12.420
我们之前说过

24:12.420 --> 24:13.540
生成器函数

24:13.540 --> 24:15.300
是不是被外部控制

24:15.300 --> 24:16.740
外部控制的是什么地方

24:16.740 --> 24:18.340
是不是eod的位置

24:18.340 --> 24:18.820
对吧

24:18.820 --> 24:19.940
在生成器函数里边

24:19.940 --> 24:21.940
可以可以书写eod

24:21.940 --> 24:23.220
可以书写eod

24:23.220 --> 24:24.180
那么这个eod呢

24:24.180 --> 24:25.460
会被外部所控制

24:25.540 --> 24:27.300
那么我们这里随便写一个eod

24:27.300 --> 24:28.740
随便写这么一个eod

24:28.740 --> 24:30.820
你看这个eod是不是瞬间就执行完了

24:30.820 --> 24:31.620
saga启动了

24:31.620 --> 24:32.500
然后eod

24:32.500 --> 24:33.380
它给它就是

24:33.380 --> 24:35.380
就是你相当于是外部调用了

24:35.380 --> 24:36.580
什么调用了一个next

24:36.580 --> 24:38.020
那个时候得到了这个东西

24:38.020 --> 24:39.620
把Vinual 为二

24:39.620 --> 24:41.220
Done 为什么force

24:41.220 --> 24:41.620
对不对

24:41.620 --> 24:42.740
我们之前说过

24:42.740 --> 24:43.620
那么这个是被

24:43.620 --> 24:45.220
这个是中间键拿到的

24:45.220 --> 24:46.420
你自己不要去拿这个东西

24:46.420 --> 24:47.540
你也拿不到

24:47.540 --> 24:48.580
这是中间键

24:48.580 --> 24:49.620
它来控制这个东西

24:49.620 --> 24:50.500
它拿到这个数据

24:50.500 --> 24:51.540
它拿到这个数据干嘛呢

24:51.540 --> 24:52.340
它啥都没做

24:52.340 --> 24:53.140
啥都没做

24:53.220 --> 24:53.860
然后呢

24:53.860 --> 24:54.340
输出了

24:54.340 --> 24:55.300
又继续运行

24:55.300 --> 24:56.420
输出了一个结果

24:56.420 --> 24:56.980
所以说呢

24:56.980 --> 24:57.860
好像这里呢

24:57.860 --> 24:59.860
写这个eod也没有什么意义

24:59.860 --> 25:02.500
但是那是因为你eod在随便写

25:02.500 --> 25:04.500
你是在随便写的

25:04.500 --> 25:05.940
但这个eod后边

25:05.940 --> 25:07.700
我们应该写啥呢

25:07.700 --> 25:09.460
它是有要求的啊

25:09.460 --> 25:10.420
这个eod里边

25:10.420 --> 25:12.020
你如果随便写一个东西呢

25:12.020 --> 25:12.900
它就不管你

25:12.900 --> 25:13.780
管都不管你

25:13.780 --> 25:15.380
它就继续运行就完事了

25:15.380 --> 25:16.020
啊

25:16.020 --> 25:16.740
那么我们之前呢

25:16.740 --> 25:18.180
好像在这讲那个

25:18.180 --> 25:19.220
呃

25:19.220 --> 25:20.020
生存器那一块

25:20.020 --> 25:21.380
我们自己还做了一个通用的

25:21.380 --> 25:22.020
弱方法

25:22.020 --> 25:22.580
还记得吗

25:22.580 --> 25:22.980
对吧

25:22.980 --> 25:23.700
那个弱方法

25:23.700 --> 25:24.980
就是你给我一个普通数据的话

25:24.980 --> 25:25.620
我啥都不管

25:25.620 --> 25:27.060
然后我就继续运行就完事了

25:27.060 --> 25:27.460
啊

25:27.460 --> 25:29.380
把这个普通数据啊交给

25:29.380 --> 25:30.100
那比方说这里

25:30.100 --> 25:31.300
啊

25:31.300 --> 25:31.780
reald

25:31.780 --> 25:32.580
啊

25:32.580 --> 25:34.180
如果说明eod的一个二啊

25:34.180 --> 25:36.100
我们看一下reald答应出来

25:36.100 --> 25:36.740
啊

25:36.740 --> 25:37.860
你看是不是得到二

25:37.860 --> 25:39.060
那么这个东西是怎么控制的

25:39.060 --> 25:40.580
它不是自然而然发生的啊

25:40.580 --> 25:41.620
我之前解释过

25:41.620 --> 25:43.540
这个东西一定不是自然而然发生的

25:43.540 --> 25:44.980
它一定是经过处理的

25:44.980 --> 25:46.420
它把你eod的东西呢

25:46.420 --> 25:47.140
这个数据呢

25:47.140 --> 25:48.340
然后呢

25:48.340 --> 25:49.780
在下一次叫next

25:49.780 --> 25:52.020
next的时候

25:52.100 --> 25:53.700
把这个数据放到参数里面

25:53.700 --> 25:54.180
于是呢

25:54.180 --> 25:55.860
这里就接受到了张云次

25:55.860 --> 25:57.940
这个eod的值啊

25:57.940 --> 25:58.660
回顾一下啊

25:58.660 --> 25:59.620
所以说张云杰克

25:59.620 --> 26:00.580
咱们复习的时候呢

26:00.580 --> 26:01.380
一定要认证听

26:01.380 --> 26:01.700
而且呢

26:01.700 --> 26:02.500
要自己去做一点

26:02.500 --> 26:03.620
你才有印象

26:03.620 --> 26:04.740
那么他给你处理过的

26:04.740 --> 26:05.140
对吧

26:05.140 --> 26:06.100
他可以放到这里来

26:06.100 --> 26:08.100
如果是你一个普通数据的话啊

26:08.100 --> 26:09.940
就是如果你eod了一个普通数据

26:14.060 --> 26:16.940
在Saga任务中

26:16.940 --> 26:19.100
如果eod的

26:19.100 --> 26:21.900
那一个普通数据

26:21.980 --> 26:25.500
Saga不做任何处理

26:25.500 --> 26:27.260
就是不做任何处理

26:27.260 --> 26:30.220
仅仅将数据

26:30.220 --> 26:31.900
仅仅将数据

26:31.900 --> 26:35.020
传递给什么呢

26:35.020 --> 26:40.460
传递给那个就是eod的表达式

26:40.460 --> 26:42.300
把数据传递给eod的表达式

26:42.300 --> 26:43.500
你们懂什么意思就行了

26:43.500 --> 26:45.260
就是在放到next参数里中

26:45.260 --> 26:46.460
就是把数据

26:46.460 --> 26:49.580
把得到的数据

26:49.660 --> 26:52.460
放到next的参数中

26:52.460 --> 26:53.820
有时候我们在这里呢

26:53.820 --> 26:55.260
就好像写不写这个eod的

26:55.260 --> 26:56.460
好像是一样的对不对

26:56.460 --> 26:57.500
好像是一样的

26:57.500 --> 26:59.340
他立即调用下一次

26:59.340 --> 27:00.220
所以说

27:00.220 --> 27:07.100
因此在Saga中eod的一个普通数据

27:07.100 --> 27:08.700
没什么意义

27:08.700 --> 27:10.300
没什么意义

27:10.300 --> 27:11.660
有时候你在Saga里面

27:11.660 --> 27:13.260
如果说你要去eod的一个普通数据

27:13.260 --> 27:14.140
没啥意义啊

27:14.140 --> 27:15.580
你可不可以这样写可以

27:15.580 --> 27:17.100
只不过没啥意义

27:17.100 --> 27:18.060
不要去这样做

27:18.060 --> 27:19.500
不要去这样做

27:19.500 --> 27:21.820
那么我们应该怎么写呢

27:21.820 --> 27:25.100
应该怎么样让Saga进行一些特殊处理呢

27:25.100 --> 27:27.820
eod的后边是要放指令的

27:27.820 --> 27:29.980
是要放指令

27:29.980 --> 27:32.060
这里呢

27:32.060 --> 27:36.860
我们需要在Saga

27:36.860 --> 27:44.940
需要你在eod的后面放上一些合适的Saga指令

27:44.940 --> 27:45.660
它叫做什么呢

27:45.660 --> 27:46.620
它的英文单词呢

27:46.620 --> 27:50.860
它叫做Saga effect

27:50.860 --> 27:51.980
好像是副作用的意思

27:51.980 --> 27:52.460
在这里呢

27:52.460 --> 27:53.820
我们把它叫做指令

27:53.820 --> 27:54.940
叫做指令

27:54.940 --> 27:57.580
要放上一些合适的指令

27:57.580 --> 27:58.940
如果放的是指令

27:58.940 --> 28:03.260
如果放的是指令

28:03.260 --> 28:07.980
Saga中间键

28:07.980 --> 28:14.220
会根据不同的指令进行特殊处理

28:14.220 --> 28:19.420
以控制整个任务的流程

28:19.420 --> 28:21.020
它还做这么一件事情

28:21.020 --> 28:22.380
也就是说

28:22.380 --> 28:23.180
在这里呢

28:23.180 --> 28:24.460
我们的任务里边呢

28:24.460 --> 28:26.300
eod后面不是随便瞎写的

28:26.300 --> 28:27.740
我们是要这里要放什么

28:27.740 --> 28:29.100
放指令的

28:29.100 --> 28:30.380
是要放指令的

28:30.380 --> 28:31.820
你给它不同的指令

28:31.820 --> 28:33.660
那么从念念就会经过不同的处理

28:33.660 --> 28:34.860
它有可能什么都不处理

28:34.860 --> 28:35.820
就继续运行

28:35.820 --> 28:36.700
有可能呢

28:36.700 --> 28:37.660
它会暂停

28:37.660 --> 28:38.860
有等一会

28:38.860 --> 28:40.860
有可能会做出各种各样的事情

28:40.860 --> 28:41.660
所以说

28:41.660 --> 28:43.260
我们学习Saga

28:43.340 --> 28:44.540
学习的是啥

28:44.540 --> 28:46.540
学习的是这一块的指令

28:46.540 --> 28:48.540
学习的是它的指令

28:48.540 --> 28:49.980
明白这意思吗

28:49.980 --> 28:51.340
这里不同的指令

28:51.340 --> 28:53.340
它有什么样的功能

28:53.340 --> 28:54.460
好 这里我们比方

28:54.460 --> 28:55.900
给大家看一些指令

28:55.900 --> 28:57.100
给大家看一些指令

28:57.100 --> 28:59.100
首先我给大家看这么一个指令

28:59.100 --> 29:00.700
这个指令在哪呢

29:00.700 --> 29:01.900
这个指令在这

29:01.900 --> 29:03.900
你要从这里倒入

29:03.900 --> 29:05.420
Saga

29:05.420 --> 29:06.460
Redax的Saga

29:06.460 --> 29:08.220
里边有一个Effect

29:08.220 --> 29:09.500
在这里边

29:09.500 --> 29:11.660
它所有的指令都在这个

29:11.740 --> 29:13.260
这个纸模块里边

29:13.260 --> 29:14.540
那么这里的指令呢

29:14.540 --> 29:15.260
其实本质上

29:15.260 --> 29:17.100
每个指令本质上就是一个函数

29:17.100 --> 29:20.830
就是这么一个函数

29:20.830 --> 29:24.110
每个指令

29:25.070 --> 29:26.430
本质上

29:26.430 --> 29:28.430
就是一个函数

29:28.430 --> 29:30.430
该函数

29:30.430 --> 29:31.870
雕用后

29:31.870 --> 29:33.710
会返回

29:33.710 --> 29:36.030
会返回一个

29:36.030 --> 29:37.550
一个数据

29:37.550 --> 29:38.350
那什么数据呢

29:38.350 --> 29:38.990
无所谓

29:38.990 --> 29:41.790
会返回一个指令对象

29:41.870 --> 29:43.390
会返回一个指令对象

29:43.390 --> 29:44.350
Saga

29:44.350 --> 29:46.430
会接收到

29:46.430 --> 29:48.830
该指令对象

29:48.830 --> 29:51.790
进行各种处理

29:51.790 --> 29:52.590
也就是什么呢

29:52.590 --> 29:53.310
就是说这里呢

29:53.310 --> 29:54.270
比方说我们这里

29:54.270 --> 29:55.470
有个指令叫Tag

29:55.470 --> 29:57.630
我先随便写个指令叫Tag

29:57.630 --> 29:59.630
好 那么这个Tag是个什么呢

29:59.630 --> 30:00.910
它是一个函数

30:00.910 --> 30:02.430
它是一个函数

30:02.430 --> 30:03.870
那么这个函数雕用之后呢

30:03.870 --> 30:05.070
它会返回一个对象

30:05.070 --> 30:06.590
那么这样子呢

30:06.590 --> 30:07.790
一有到到这里

30:07.790 --> 30:08.670
它返回那个什么

30:08.670 --> 30:10.350
返回那个指令对象对吧

30:10.350 --> 30:11.870
那么这里的

30:11.870 --> 30:12.910
它是不是得到了

30:12.910 --> 30:13.950
就是那个时候得到了的东西

30:13.950 --> 30:14.990
是不是一个指令对象

30:14.990 --> 30:15.390
对吧

30:15.390 --> 30:16.270
指令对象

30:16.270 --> 30:17.470
那么Saga的中间键

30:17.470 --> 30:19.310
它就会拿到这个指令对象

30:19.310 --> 30:19.950
它会看到

30:19.950 --> 30:21.790
你给我的不是一个普通数据了

30:21.790 --> 30:23.310
你给我的是一个指令对象

30:23.310 --> 30:25.230
那么它会根据不同的指令对象

30:25.230 --> 30:26.430
因为你不同的指令

30:26.430 --> 30:28.430
它就会返回不同的指令对象

30:28.430 --> 30:29.710
那么不同的指令对象呢

30:29.710 --> 30:30.590
它就告诉Saga

30:30.590 --> 30:31.390
我应该做什么

30:31.390 --> 30:32.590
接下来应该做什么

30:32.590 --> 30:34.590
它就会来控制这个流程

30:34.590 --> 30:35.150
那么这里呢

30:35.150 --> 30:36.590
我先介绍第一个指令

30:36.590 --> 30:37.630
第一个指令

30:37.630 --> 30:38.590
叫Tag

30:38.590 --> 30:40.270
Tag这个指令非常非常简单

30:40.990 --> 30:42.510
Tag指令

30:42.510 --> 30:44.190
非常简单

30:44.190 --> 30:45.150
第一个指令

30:45.150 --> 30:47.150
Tag指令

30:47.150 --> 30:48.670
我们一

30:48.670 --> 30:50.110
就是我们学Saga学的是啥

30:50.110 --> 30:51.230
学的就是这一指令

30:51.230 --> 30:52.350
其他都没啥了

30:52.350 --> 30:54.350
它就是其中一个生存器函数

30:54.350 --> 30:55.870
其他都没啥了

30:55.870 --> 30:57.870
Tag指令是怎么用了

30:57.870 --> 31:02.670
它用来监听某个X

31:02.670 --> 31:04.830
用来监听某个X

31:04.830 --> 31:06.350
什么意思

31:06.350 --> 31:08.990
就是说我们这里不是要给它传递X吧

31:08.990 --> 31:09.550
对不对

31:09.950 --> 31:12.830
当它监听到某一个X的时候

31:12.830 --> 31:16.110
会继续处理

31:16.110 --> 31:17.630
监听某个X

31:17.630 --> 31:20.430
如果X发生了

31:20.430 --> 31:22.110
如果发生了某一个X

31:22.110 --> 31:27.070
则会进行下一步处理

31:27.070 --> 31:29.470
则会进行下一步处理

31:29.470 --> 31:31.310
Tag指令

31:31.310 --> 31:33.870
仅监听一次

31:33.870 --> 31:36.270
只监听一次

31:36.270 --> 31:38.110
好 咱们来看一下Tag指令

31:38.190 --> 31:39.230
Tag指令怎么写的

31:39.230 --> 31:40.590
这里面写的就是什么

31:40.590 --> 31:42.030
写的就是X的类型

31:42.030 --> 31:43.390
你要监听哪一个X

31:43.390 --> 31:44.830
就是监听了X的类型

31:44.830 --> 31:47.790
这里面我们导入一个Import

31:47.790 --> 31:48.590
导入一个什么呢

31:48.590 --> 31:50.070
导入一个就是我们之前写的

31:50.070 --> 31:51.150
不是写的过的X吗

31:51.150 --> 31:51.550
对不对

31:51.550 --> 31:53.230
Counter

31:53.230 --> 31:54.830
那么这里不是有写的X吗

31:54.830 --> 31:56.750
我们这里ActionTypes

31:56.750 --> 31:58.030
我们这里监听啥呢

31:58.030 --> 31:59.630
这里写的X类型

31:59.630 --> 32:02.030
监听这个X increase

32:02.030 --> 32:03.950
增加这个X

32:03.950 --> 32:05.710
那么它反回的是一个什么呢

32:05.710 --> 32:07.630
这个eo的表达是反回的是什么呢

32:07.630 --> 32:09.470
反回的是X的完整的

32:09.470 --> 32:10.830
就是完整的X

32:10.830 --> 32:13.310
反回的是完整的X

32:13.310 --> 32:20.830
eo的得到的是完整的X对象

32:20.830 --> 32:23.150
那么Tag它有监听的作用

32:23.150 --> 32:24.350
监听的作用

32:24.350 --> 32:25.550
那么咱们来试一下

32:25.550 --> 32:29.630
这里输出

32:29.630 --> 32:37.310
就是increaseX发生了

32:37.470 --> 32:38.670
这里把X打印出来

32:38.670 --> 32:38.990
好

32:38.990 --> 32:40.110
看一下一个代码

32:40.110 --> 32:42.190
看一下这个代码

32:42.190 --> 32:45.070
这个代码它表达了一些什么东西呢

32:45.070 --> 32:46.750
就是说

32:46.750 --> 32:48.030
如果说

32:48.030 --> 32:49.950
我们这个任务在这

32:49.950 --> 32:51.070
一开始就启动这个任务

32:51.070 --> 32:52.430
这个启动任务干嘛

32:52.430 --> 32:53.870
是不是在监听X

32:53.870 --> 32:55.310
那么它这里会反回一个什么

32:55.310 --> 32:57.070
反回一个指令对象

32:57.070 --> 32:58.430
这个指令这样谁反回的

32:58.430 --> 33:00.270
就是Tag这个函数反回的

33:00.270 --> 33:01.870
它会把这个指令对象交给谁

33:01.870 --> 33:03.150
是不是交给那个

33:03.150 --> 33:05.790
因为这个函数是受到中间键控制的

33:05.870 --> 33:07.390
那中间键就会拿到这个指令对象

33:07.390 --> 33:08.510
它发现你在干嘛

33:08.510 --> 33:09.230
要干嘛

33:09.230 --> 33:10.270
要监听这个指令

33:10.270 --> 33:10.590
行

33:10.590 --> 33:11.390
那我不运行了

33:11.390 --> 33:12.590
我等着

33:12.590 --> 33:14.350
于是代码是不是在这里主色了

33:14.350 --> 33:14.990
对不对

33:14.990 --> 33:15.630
在这里主色

33:15.630 --> 33:16.750
因此这个地方

33:16.750 --> 33:18.190
会造成主色

33:18.190 --> 33:20.030
打中货号

33:20.030 --> 33:21.150
造成主色

33:21.150 --> 33:22.510
为什么会主色

33:22.510 --> 33:23.150
主色就是什么

33:23.150 --> 33:25.150
它不再运行了

33:25.150 --> 33:26.030
为什么不再运行

33:26.030 --> 33:27.230
因为它没有调用next

33:27.230 --> 33:27.630
对不对

33:27.630 --> 33:28.670
它不再调用next了

33:28.670 --> 33:29.950
它会等什么

33:29.950 --> 33:31.950
等这个X出发之后

33:31.950 --> 33:32.910
再会调用next

33:32.910 --> 33:33.950
它会继平运行

33:33.950 --> 33:35.630
所以它这里不会再运行了

33:35.630 --> 33:36.190
因此呢

33:36.190 --> 33:36.910
一开始的时候

33:36.910 --> 33:38.270
你能不能看到这句话

33:38.270 --> 33:39.390
能不能看到这句话

33:39.390 --> 33:40.430
是看不到

33:40.430 --> 33:41.390
保存

33:41.390 --> 33:42.590
你看一下有没有这句话

33:42.590 --> 33:43.550
没有这句话吧

33:43.550 --> 33:45.150
为什么没有这句话

33:45.150 --> 33:47.390
因为这个X形它没有运行

33:47.390 --> 33:47.790
看没有

33:47.790 --> 33:48.990
这个X形没有运行

33:48.990 --> 33:49.230
好

33:49.230 --> 33:49.710
那么现在呢

33:49.710 --> 33:50.430
我们在test里面

33:50.430 --> 33:51.790
我们这样来处理

33:51.790 --> 33:53.230
我们在这

33:53.230 --> 33:53.790
X形里面

33:53.790 --> 33:54.910
我们来创建一个

33:54.910 --> 33:57.070
就是counter里面

33:57.070 --> 33:59.070
来创建一个increase

33:59.070 --> 34:00.590
increase

34:00.590 --> 34:02.270
在decrease嘛

34:02.270 --> 34:02.910
decrease

34:02.910 --> 34:03.870
两个打到

34:03.870 --> 34:04.350
然后呢

34:04.350 --> 34:05.230
我们这里呢

34:05.310 --> 34:06.430
为了方便我们测试呢

34:06.430 --> 34:07.470
我们在这里写上

34:07.470 --> 34:08.830
在window里面加两个方法

34:08.830 --> 34:10.430
window increase

34:10.430 --> 34:11.870
window increase

34:11.870 --> 34:12.910
加一个方法

34:12.910 --> 34:13.630
这个方法干嘛呢

34:13.630 --> 34:14.670
就是store

34:14.670 --> 34:15.950
dispatch

34:15.950 --> 34:16.830
dispatch

34:16.830 --> 34:17.710
然后呢

34:17.710 --> 34:20.510
increase

34:20.510 --> 34:21.950
调用这个increase

34:21.950 --> 34:23.230
来得到一个action

34:23.230 --> 34:23.870
那么这里呢

34:23.870 --> 34:26.350
我们再加一个decrease

34:26.350 --> 34:28.830
decrease

34:28.830 --> 34:29.870
那么这里呢

34:29.870 --> 34:30.990
触发一个decrease

34:30.990 --> 34:31.230
好

34:31.230 --> 34:32.110
接下来看着

34:32.110 --> 34:33.550
注意看

34:33.550 --> 34:34.510
那么现在呢

34:34.590 --> 34:35.710
我们在saga里面

34:35.710 --> 34:36.590
是不是在监听

34:36.590 --> 34:37.070
对不对

34:37.070 --> 34:38.750
在监听这个increase

34:38.750 --> 34:39.710
只监听这个

34:39.710 --> 34:40.510
看着

34:40.510 --> 34:41.230
如果说

34:41.230 --> 34:42.910
我这里调用window里面

34:42.910 --> 34:43.630
window里面

34:43.630 --> 34:44.190
你看着啊

34:44.190 --> 34:45.070
我们测试里面是吧

34:45.070 --> 34:46.590
window里面加了两个函数啊

34:46.590 --> 34:47.230
我们因此呢

34:47.230 --> 34:48.110
可以在控制台里面去

34:48.110 --> 34:50.190
调用这两个函数来进行测试

34:50.190 --> 34:51.230
那这两个函数干嘛呢

34:51.230 --> 34:51.790
就非常简单

34:51.790 --> 34:53.310
就触发x形

34:53.310 --> 34:55.310
如果说我们触发一个decrease的x形

34:57.310 --> 34:58.910
触发这两个形

34:58.910 --> 34:59.550
你看

34:59.550 --> 35:01.470
saga有没有运行

35:01.470 --> 35:03.150
有没有输出这句话

35:03.150 --> 35:03.790
是没有

35:03.790 --> 35:05.150
它还卡在这儿的

35:05.150 --> 35:05.870
还卡在这儿的

35:05.870 --> 35:07.150
主色在这儿的

35:07.150 --> 35:07.710
好

35:07.710 --> 35:08.110
然后呢

35:08.110 --> 35:08.990
如果说

35:08.990 --> 35:09.710
我们在这里

35:11.390 --> 35:12.590
再触发decrease

35:12.590 --> 35:13.310
有没有运行啊

35:13.310 --> 35:14.350
没有运行saga

35:14.350 --> 35:15.870
如果说我们触发increase

35:16.670 --> 35:16.990
你看

35:17.550 --> 35:18.670
saga是不是运行的

35:18.670 --> 35:19.310
对吧

35:19.310 --> 35:19.950
saga一看

35:19.950 --> 35:20.270
哇

35:20.270 --> 35:21.550
你这个给我的x形

35:21.550 --> 35:24.430
刚好跟你指定的x形的内形是一致的

35:24.430 --> 35:25.390
两个相等

35:25.390 --> 35:25.630
好

35:25.630 --> 35:26.190
于是呢

35:26.190 --> 35:27.550
他就调用了下一个

35:27.550 --> 35:27.870
对吧

35:28.590 --> 35:30.110
他就让这个中

35:30.110 --> 35:32.190
让这个生成器函数继续运行

35:32.190 --> 35:33.230
他会给你什么呢

35:33.310 --> 35:35.310
他会把这个完整的x形对象给你

35:35.310 --> 35:35.950
你看

35:35.950 --> 35:37.470
increasex形发生了

35:37.470 --> 35:38.830
完整的x形对象给你

35:39.630 --> 35:40.270
好了吗

35:40.270 --> 35:42.190
saga是不是任务就运行结束了

35:42.830 --> 35:43.790
对不对

35:43.790 --> 35:45.470
任务是不是运行结束了

35:45.470 --> 35:46.510
任务运行结束了

35:46.510 --> 35:48.110
过后这个saga中间键还有用吗

35:48.110 --> 35:48.670
就没用了

35:48.670 --> 35:49.950
你后面再触发increase

35:49.950 --> 35:50.430
看一下

35:50.430 --> 35:51.710
有没有运行这句话

35:51.710 --> 35:52.350
没了

35:52.350 --> 35:53.790
saga就运行结束了

35:53.790 --> 35:54.990
只要你这个任务

35:54.990 --> 35:56.670
只要你这个函数运行完成

35:56.670 --> 35:58.270
saga就一定结束了

35:58.270 --> 35:59.390
一定结束了

35:59.390 --> 36:00.110
所以说这里

36:01.950 --> 36:03.070
一个非常重要的地方

36:03.950 --> 36:08.510
一旦saga任务完成

36:09.470 --> 36:17.390
saga中间键一定结束

36:18.830 --> 36:20.990
什么叫任务完成

36:20.990 --> 36:25.790
就是生成器函数

36:25.790 --> 36:28.350
生成器函数运行完成

36:29.390 --> 36:32.190
saga对你的任务就是生成器函数

36:32.670 --> 36:34.430
生成器函数一旦运行完成

36:34.430 --> 36:35.790
那个saga中间键就没用了

36:35.790 --> 36:36.750
一点用都没有了

36:36.750 --> 36:38.190
它就是纯粹的简单的

36:38.190 --> 36:39.870
把你的x型交给下一个中间键

36:39.870 --> 36:40.670
它差不多没做了

36:41.390 --> 36:42.830
所以说我们如果说

36:42.830 --> 36:45.150
要让saga持续的发挥作用

36:45.950 --> 36:48.430
那里肯定不能让这个函数运行完成

36:49.070 --> 36:50.830
肯定不能让这个函数运行完成

36:50.830 --> 36:51.710
那应该怎么做呢

36:52.270 --> 36:54.990
比较说我们要持续的increase

36:54.990 --> 36:55.630
该怎么做呢

36:56.350 --> 36:57.390
写个死循环

36:57.870 --> 37:00.270
写个死循环这个函数还能运行完成吗

37:00.670 --> 37:02.030
所以永远不可能运行完成

37:02.350 --> 37:02.750
对不对

37:02.990 --> 37:03.870
写个死循环

37:04.110 --> 37:04.430
对不对

37:04.990 --> 37:06.030
哎呀死循环可以吗

37:06.030 --> 37:06.430
可以

37:07.070 --> 37:07.950
它会组织的呀

37:08.590 --> 37:09.790
到这一块是不是停了

37:10.350 --> 37:10.830
等待

37:10.830 --> 37:12.270
等待你给我一个x

37:12.270 --> 37:13.390
它才会继续运行

37:14.430 --> 37:15.150
好那么这里

37:15.150 --> 37:16.430
我们给它一个increase

37:16.430 --> 37:17.070
你看一下

37:17.070 --> 37:17.950
是不是运行到一次

37:17.950 --> 37:18.270
对吧

37:18.830 --> 37:19.950
实变成11了

37:19.950 --> 37:20.430
然后呢

37:21.550 --> 37:23.070
那么它现在就运行到这了

37:23.070 --> 37:23.790
对吧到这了

37:23.790 --> 37:24.590
到这了

37:25.310 --> 37:26.910
于是那下一次又进入下一次循环

37:26.910 --> 37:28.030
下一次循环是不是又卡在这了

37:28.030 --> 37:30.110
又在等待下一次increase

37:30.110 --> 37:30.590
对不对

37:30.590 --> 37:31.950
又在等待下一次increase

37:32.270 --> 37:33.150
再运行increase

37:33.150 --> 37:33.790
是不是又运

37:33.790 --> 37:34.910
循环又运行了一次

37:34.910 --> 37:35.470
对吧

37:35.470 --> 37:36.350
那么这样子的话

37:36.350 --> 37:38.110
这个saga这个处理函数

37:38.110 --> 37:39.310
是不是永远不会结束

37:39.950 --> 37:40.510
没问题吧

37:41.070 --> 37:42.190
是不是永远不会结束啊

37:42.750 --> 37:45.550
它就永远永远不会结束

37:45.550 --> 37:46.830
永远永远不会结束

37:47.630 --> 37:48.750
那么这样子一来了

37:50.350 --> 37:51.150
这样子一来了

37:51.710 --> 37:53.950
就不会导致刚才那个问题了

37:53.950 --> 37:55.950
saga这个这个任务一旦结束

37:55.950 --> 37:57.470
整个saga终点键就失效了

37:57.470 --> 37:58.430
就没有任何意义了

37:59.630 --> 38:01.550
那你说这个东西有什么用呢

38:01.550 --> 38:03.790
这个take这个监听x有什么用的

38:04.430 --> 38:05.390
你想一想

38:05.390 --> 38:06.510
那这样子一来的话

38:06.510 --> 38:08.270
我们是不是可以进行副作用处理的

38:08.750 --> 38:10.270
怎么再进行副作用处理

38:10.270 --> 38:10.990
比方说吧

38:10.990 --> 38:11.710
我们举个例子

38:12.030 --> 38:12.830
在x里边

38:14.190 --> 38:15.070
计输的时候

38:15.070 --> 38:16.190
计输的时候

38:16.190 --> 38:16.910
我们这里呢

38:17.550 --> 38:19.070
增加减少对不对

38:19.070 --> 38:19.950
增加减少

38:19.950 --> 38:20.990
这是两个x嘛

38:20.990 --> 38:21.790
对不对

38:21.790 --> 38:23.150
那么比方说我们有一个

38:23.150 --> 38:24.590
带有副作用的x

38:24.590 --> 38:27.150
这个x可能要经过一些副作用处理

38:27.150 --> 38:28.990
比方说我们这里写上这么一个东西

38:28.990 --> 38:31.150
叫做asyncincrease

38:32.510 --> 38:33.870
也用个symbol嘛

38:33.870 --> 38:36.590
叫取名为asyncincrease

38:38.590 --> 38:40.190
表示一步增加

38:40.190 --> 38:42.190
它等一秒钟之后才增加

38:43.150 --> 38:43.950
一步增加

38:44.990 --> 38:45.150
好

38:45.150 --> 38:45.710
然后呢

38:45.710 --> 38:47.550
这里async decrease

38:49.470 --> 38:49.950
你看

38:49.950 --> 38:52.190
这个x形是不是仍然是非常非常纯净的

38:52.750 --> 38:53.710
没问题吧

38:53.710 --> 38:55.790
仍然是非常非常纯净的

38:56.990 --> 38:58.190
你看这个x形有变化吗

38:58.190 --> 38:58.910
这个x形的意义

38:58.910 --> 39:00.430
它首先的意义没有变化嘛

39:00.430 --> 39:00.750
好

39:00.830 --> 39:01.790
函数

39:01.790 --> 39:02.750
函数

39:02.750 --> 39:03.790
export

39:03.790 --> 39:05.630
就是x形创建函数

39:05.630 --> 39:06.830
就是async

39:08.190 --> 39:08.830
复制一下嘛

39:10.430 --> 39:11.870
asyncincrease

39:11.870 --> 39:13.230
返回一个type

39:14.190 --> 39:16.350
就是action types

39:16.350 --> 39:17.470
asyncincrease

39:18.910 --> 39:20.750
asyncincrease

39:20.750 --> 39:20.990
好

39:20.990 --> 39:21.310
然后呢

39:21.310 --> 39:22.830
这里export方形

39:23.710 --> 39:25.230
async decrease

39:26.110 --> 39:26.670
复制一下

39:28.030 --> 39:29.390
后边我们还会学一个cool

39:29.390 --> 39:30.590
可以减化这样的操作

39:31.150 --> 39:32.750
因为这种操作都是模板化的

39:33.230 --> 39:33.950
action types

39:34.510 --> 39:36.270
就是async decrease

39:36.830 --> 39:37.230
好

39:37.230 --> 39:37.550
然后呢

39:37.550 --> 39:38.190
我们写了这些

39:38.190 --> 39:39.150
你看这个x形

39:39.150 --> 39:40.270
是不是非常纯净

39:40.270 --> 39:40.590
对吧

39:41.630 --> 39:43.790
只不过reducer里面处不处理这个

39:43.790 --> 39:45.390
reducer里面它不处理这个

39:45.390 --> 39:46.270
为什么它不处理

39:47.070 --> 39:48.910
你是有副作用我怎么处理呢

39:48.910 --> 39:51.470
reducer里面它只处理没有副作用的操作

39:51.470 --> 39:52.990
你这个有副作用我不处理的

39:52.990 --> 39:54.990
reducer不变

39:54.990 --> 39:55.710
但是

39:55.710 --> 39:56.270
x形呢

39:56.270 --> 39:57.630
它仍然保持纯净

39:57.630 --> 39:59.470
reducer也没有发生变化

39:59.470 --> 40:00.270
那么这个问题

40:00.350 --> 40:02.750
这个action它是不是可以交给saga来处理

40:02.750 --> 40:04.030
你不是有副作用吗

40:04.030 --> 40:04.590
对不对

40:04.590 --> 40:04.990
好

40:04.990 --> 40:06.990
那么saga里面是不是可以监听什么

40:06.990 --> 40:07.790
监听那个

40:08.830 --> 40:10.910
就是async increase

40:10.910 --> 40:11.310
对不对

40:11.310 --> 40:13.310
监听这个async increase

40:13.310 --> 40:14.110
那么这里呢

40:14.110 --> 40:15.790
比方说发生了一步的

40:16.350 --> 40:18.030
发生了一步的

40:18.990 --> 40:20.110
一步的什么呢

40:20.110 --> 40:21.150
一步的就是

40:24.270 --> 40:24.750
increase

40:25.470 --> 40:26.270
对不对

40:26.270 --> 40:27.470
saga里面是不是可以监听

40:28.030 --> 40:28.830
没问题吧

40:28.910 --> 40:30.990
那么它就可以进行副作用处理

40:30.990 --> 40:31.310
好

40:31.310 --> 40:31.710
保存

40:31.710 --> 40:32.830
咱们来看一下

40:32.830 --> 40:34.190
我们在test里面

40:34.190 --> 40:35.310
再加上一个就是

40:36.430 --> 40:36.910
async

40:40.160 --> 40:44.160
async

40:44.800 --> 40:45.360
那么这里呢

40:45.360 --> 40:46.400
我们再保住一个

40:46.400 --> 40:48.640
async increase

40:48.640 --> 40:50.000
decrease我就不写了

40:50.000 --> 40:51.200
一样的意思

40:51.200 --> 40:51.840
保存

40:51.840 --> 40:52.480
咱们来看一下

40:53.760 --> 40:54.160
现在呢

40:54.160 --> 40:55.760
我们再调用increase

40:55.760 --> 40:56.560
再调用increase

40:56.560 --> 40:57.840
你看saga也没有触发

40:57.840 --> 40:58.640
是不是没有触发

40:58.640 --> 40:58.880
对吧

40:58.880 --> 40:59.840
它没有监听这个

40:59.840 --> 41:00.960
你这个无副作用的

41:00.960 --> 41:02.080
我也不想care你

41:02.080 --> 41:02.320
当然

41:02.320 --> 41:04.000
如果你能不能监听这个

41:04.000 --> 41:04.800
当然可以

41:04.800 --> 41:05.920
也可以监听

41:05.920 --> 41:06.880
也可以监听它

41:07.600 --> 41:08.480
那么如果说

41:08.480 --> 41:11.040
我这里调用了async increase

41:12.240 --> 41:13.120
async increase

41:13.120 --> 41:14.400
它没有导致数据变化

41:14.400 --> 41:14.640
对吧

41:14.640 --> 41:16.240
因为这个东西Reduce

41:16.240 --> 41:17.360
它没有处理这个玩意

41:17.360 --> 41:19.120
但是saga是不是监听到了

41:19.120 --> 41:19.760
对吧

41:19.760 --> 41:20.880
saga它就监听到了

41:20.880 --> 41:22.400
它发生了这样的一件事情

41:22.400 --> 41:24.560
它知道发生了这件事情

41:24.560 --> 41:26.560
于是它就运行了这句话

41:26.560 --> 41:28.160
那么后边怎么来进行

41:28.160 --> 41:28.880
副作用处理呢

41:28.880 --> 41:29.760
我们后边再说

41:29.840 --> 41:31.200
但是至少目前

41:31.200 --> 41:32.080
它是不是可以监听到

41:32.080 --> 41:33.280
这些每一个x

41:33.280 --> 41:34.320
对不对

41:34.320 --> 41:35.360
那么这个问题

41:35.360 --> 41:36.560
我们就大概说一下

41:36.560 --> 41:38.400
就说如果以后要监听一些

41:38.400 --> 41:39.200
特殊的x

41:39.200 --> 41:40.240
它可能有副作用

41:40.240 --> 41:41.040
那么要交给saga

41:41.040 --> 41:41.360
处理

41:41.360 --> 41:42.160
saga怎么来处理

41:42.160 --> 41:43.520
就用监听这种方式

41:44.640 --> 41:44.800
好

41:44.800 --> 41:45.840
这是这一块

41:47.200 --> 41:47.360
好

41:47.360 --> 41:48.800
那么下面我们再说一下

41:49.920 --> 41:53.440
我们以后肯定会监听很多很多的x

41:53.440 --> 41:54.880
而每一个x

41:54.880 --> 41:56.960
它可能要经过各种各样的处理

41:56.960 --> 41:57.920
因为我们后边

41:57.920 --> 41:58.960
要监听很多x

41:58.960 --> 42:00.960
每个x要进行各种各样的处理

42:00.960 --> 42:02.720
这样做的太繁琐了

42:02.720 --> 42:04.480
是不是要全部写到这里

42:04.480 --> 42:06.400
那我们希望的是

42:06.400 --> 42:07.600
把它分模块

42:07.600 --> 42:09.760
比方说一个文件就监听

42:09.760 --> 42:10.640
一个两个

42:10.640 --> 42:11.680
或者是比方说一个文件

42:11.680 --> 42:13.440
还监听学生的副作用处理

42:13.440 --> 42:14.080
一个文件

42:14.080 --> 42:15.040
监听那个数字

42:15.040 --> 42:16.480
那个副作用处理

42:16.480 --> 42:18.080
分文件来写

42:18.080 --> 42:20.160
那么如果说要分文件来写的话

42:20.160 --> 42:21.440
怎么来写呢

42:21.440 --> 42:21.680
好

42:21.680 --> 42:22.240
这里呢

42:22.240 --> 42:23.680
我介绍另外一个

42:23.680 --> 42:24.880
就是saga指令

42:24.880 --> 42:25.360
叫做

42:26.880 --> 42:27.840
给大家介绍另外一个

42:27.840 --> 42:28.560
saga指令

42:28.640 --> 42:29.520
叫做or

42:30.240 --> 42:31.440
这个复制一下

42:32.640 --> 42:33.280
好

42:33.280 --> 42:34.320
叫做or

42:34.320 --> 42:36.780
or

42:36.780 --> 42:37.260
or呢

42:37.260 --> 42:38.860
它也是一个函数

42:38.860 --> 42:40.860
or指令

42:41.740 --> 42:42.620
or指令呢

42:42.620 --> 42:44.220
它也是一个函数

42:44.220 --> 42:45.740
它也会组设

42:45.740 --> 42:47.660
也会组设

42:47.660 --> 42:50.220
它是该函数

42:51.500 --> 42:53.260
传入一个数组

42:53.260 --> 42:54.300
传入一个数组

42:54.300 --> 42:55.180
也就是说这个函数

42:55.180 --> 42:56.300
我们要怎么写呢

42:56.300 --> 42:57.420
怎么调用呢

42:57.420 --> 42:57.900
当然呢

42:57.900 --> 42:58.460
所有的函数

42:58.460 --> 42:59.420
是不是都要用e有的

42:59.420 --> 43:00.060
对不对

43:00.060 --> 43:01.020
这个毫无疑问

43:01.020 --> 43:02.300
必须得用e有的

43:02.300 --> 43:03.580
这是指令嘛

43:03.580 --> 43:05.100
指令前面必须要用e有的

43:06.780 --> 43:06.940
哦

43:06.940 --> 43:07.660
它里面要传

43:07.660 --> 43:08.380
这是个函数

43:08.380 --> 43:09.580
它里面要传入一个数组

43:10.380 --> 43:12.300
这个数组里面要填什么呢

43:12.300 --> 43:13.740
填各种生成器

43:14.700 --> 43:15.340
数组中

43:16.540 --> 43:17.260
数组中

43:19.420 --> 43:21.100
放入生成器

43:22.220 --> 43:22.700
生成器

43:23.740 --> 43:23.980
那么

43:25.100 --> 43:25.900
该指令

43:26.860 --> 43:27.900
会等待

43:28.700 --> 43:29.580
Saga会等待

43:30.540 --> 43:31.660
不是指令会等待

43:31.660 --> 43:32.940
指令就返回个指令对象

43:32.940 --> 43:34.140
Saga来处理的

43:34.140 --> 43:35.100
Saga会等待

43:37.500 --> 43:40.620
所有的生成器

43:42.140 --> 43:43.820
全部完成后

43:44.940 --> 43:46.060
全部完成后

43:47.500 --> 43:49.180
才会进一步

43:49.900 --> 43:51.020
才会进一步处理

43:54.060 --> 43:55.580
也就是说它组设什么时候结束

43:55.580 --> 43:56.300
组设就等着

43:57.020 --> 43:57.900
什么时候玩

43:57.900 --> 43:59.340
就是要等所有的生成器

43:59.340 --> 44:00.380
全部完成之后

44:00.380 --> 44:01.420
才会进一步处理

44:01.420 --> 44:02.700
那么这里边要填啥

44:02.700 --> 44:04.140
填的是生成器

44:04.140 --> 44:04.380
好

44:04.380 --> 44:05.500
那么我们是不是可以

44:05.500 --> 44:07.900
利用其他文件来导出生成器啊

44:07.900 --> 44:09.100
跟那个Reducer合并

44:09.100 --> 44:09.900
跟那个

44:09.900 --> 44:11.900
X显合并是差不多的道理

44:11.900 --> 44:12.540
那么这里呢

44:12.540 --> 44:13.660
我们新建个文件

44:13.660 --> 44:14.220
比方说

44:14.220 --> 44:14.700
我们

44:15.420 --> 44:15.900
counter

44:16.540 --> 44:17.180
counter

44:17.180 --> 44:18.700
就是个数字的

44:18.700 --> 44:19.580
数字的

44:19.580 --> 44:19.900
task

44:21.260 --> 44:22.220
counter task

44:22.220 --> 44:23.500
然而我们可以再见一个

44:23.500 --> 44:24.300
student

44:24.300 --> 44:25.420
student task

44:26.140 --> 44:27.180
解释

44:27.180 --> 44:28.700
比方说我们有两个嘛

44:28.700 --> 44:29.740
那么counter task

44:29.740 --> 44:30.540
我们导出

44:30.540 --> 44:31.500
导出

44:31.500 --> 44:32.140
导出什么呢

44:32.140 --> 44:33.900
导出一个生成器

44:33.900 --> 44:35.580
导出一个生成器函数

44:35.580 --> 44:35.820
好

44:35.820 --> 44:36.300
那么这里呢

44:36.300 --> 44:37.500
我们写上

44:37.500 --> 44:38.220
con

44:38.220 --> 44:39.420
也不需要干名字了

44:39.420 --> 44:40.620
也不需要干名字了

44:40.620 --> 44:40.780
好

44:40.780 --> 44:41.980
那么学生这一块呢

44:41.980 --> 44:44.060
我们也导出一个生成器函数

44:44.060 --> 44:44.620
export

44:45.500 --> 44:46.220
defort

44:46.220 --> 44:46.780
把方式系

44:48.940 --> 44:49.980
也导出一个生成器函数

44:49.980 --> 44:51.340
是不是两个生成器函数了

44:51.340 --> 44:51.900
好

44:51.900 --> 44:52.700
那么现在呢

44:52.700 --> 44:53.580
我们在

44:53.580 --> 44:53.900
那个

44:54.860 --> 44:56.540
counter task 这里

44:56.540 --> 44:58.060
在这个 interex 里边

44:58.060 --> 44:58.780
是不是可以合并

45:00.060 --> 45:00.940
import

45:00.940 --> 45:01.980
导入什么

45:01.980 --> 45:02.620
counter

45:03.580 --> 45:05.100
counter

45:06.300 --> 45:07.100
task

45:07.100 --> 45:07.900
from

45:07.900 --> 45:08.700
这个鞋杠

45:08.700 --> 45:09.900
counter task

45:09.900 --> 45:10.140
好

45:10.140 --> 45:10.780
然后再导入

45:11.660 --> 45:13.180
student task

45:13.180 --> 45:14.220
那么一个来处理

45:14.220 --> 45:15.340
学生的副作用

45:15.340 --> 45:16.620
一个来处理

45:16.620 --> 45:17.740
那个数字

45:17.740 --> 45:18.700
几数的副作用

45:18.700 --> 45:19.100
对吧

45:19.100 --> 45:19.420
然后呢

45:19.420 --> 45:20.700
我们把这两

45:20.700 --> 45:21.820
把这两个函数

45:21.820 --> 45:22.860
一调用放到这

45:22.860 --> 45:24.460
就一定要调用啊

45:24.460 --> 45:25.980
为什么说一定要调用

45:25.980 --> 45:27.180
是因为他得到的是

45:27.180 --> 45:28.380
给他的是生成器

45:28.380 --> 45:29.900
而不是生成器函数

45:29.900 --> 45:31.900
所以说你一定要调用这两个函数

45:31.900 --> 45:33.340
把生成器给他

45:33.340 --> 45:35.020
那么生成器给他之后呢

45:35.020 --> 45:37.020
他会来控制这两个东西

45:37.020 --> 45:38.300
控制这两个函数

45:39.020 --> 45:40.060
明白这个意思吧

45:40.060 --> 45:40.460
好

45:40.460 --> 45:41.100
保存

45:41.100 --> 45:41.260
好

45:41.260 --> 45:41.980
我们这里呢

45:41.980 --> 45:42.460
输出

45:42.460 --> 45:43.340
最后呢输出

45:43.340 --> 45:44.060
saga完成

45:44.700 --> 45:45.740
为什么这里会输出

45:45.740 --> 45:46.380
saga完成

45:46.380 --> 45:47.020
因为

45:47.020 --> 45:47.900
他只有等到

45:47.900 --> 45:49.740
这两个东西全部结束了过后

45:49.740 --> 45:51.100
这两个生成器全部

45:51.180 --> 45:53.260
控制了生成器函数运行完成之后

45:53.260 --> 45:54.380
他才会运行这句话

45:54.380 --> 45:56.060
所以说一开始会不会运行这句话呢

45:57.020 --> 45:57.740
目前会运行

45:57.740 --> 45:58.860
因为这两个函数啥都没做

45:59.500 --> 46:00.540
这两个函数啥都没做

46:00.540 --> 46:01.580
所以说瞬间就运行完了

46:01.580 --> 46:02.140
对吧

46:02.140 --> 46:03.260
瞬间就运行完了

46:03.260 --> 46:04.220
那么这两个函数里面

46:04.220 --> 46:05.100
是不是可以做事情

46:05.100 --> 46:05.500
对吧

46:05.500 --> 46:06.380
比方说这个函数

46:07.020 --> 46:08.380
它是不是可以进监听

46:08.380 --> 46:08.860
对不对

46:08.860 --> 46:09.500
监听

46:09.500 --> 46:09.740
好

46:09.740 --> 46:10.220
那么这里呢

46:10.220 --> 46:10.780
我们导入

46:10.780 --> 46:11.260
比方说

46:11.260 --> 46:11.900
导入之前的

46:14.060 --> 46:14.460
saga

46:15.340 --> 46:16.140
retake saga

46:16.140 --> 46:16.860
然后affect

46:18.220 --> 46:19.260
这里面不是个take嘛

46:19.260 --> 46:19.740
对不对

46:19.820 --> 46:20.460
好

46:20.460 --> 46:21.740
我们在这里去完成监听

46:21.740 --> 46:23.020
while queue

46:23.020 --> 46:23.980
那里看一下

46:23.980 --> 46:25.260
这个生成器函数是不会结束的

46:25.260 --> 46:25.660
对吧

46:25.660 --> 46:26.620
是不会结束的

46:26.620 --> 46:27.900
while queue

46:27.900 --> 46:28.380
然后呢

46:28.380 --> 46:29.020
这里边

46:29.020 --> 46:29.980
我们写上

46:29.980 --> 46:31.580
然后这里写上那个

46:32.380 --> 46:32.860
exit嘛

46:34.380 --> 46:34.860
监听

46:34.860 --> 46:36.380
用这个take去监听啥

46:36.380 --> 46:37.420
监听那个就是

46:41.020 --> 46:41.820
action导入进来

46:42.780 --> 46:43.260
import

46:44.540 --> 46:44.860
so

46:45.980 --> 46:46.780
叫做写杠

46:46.780 --> 46:47.500
exit

46:47.500 --> 46:48.700
conter

46:48.700 --> 46:49.420
监听那个

46:49.980 --> 46:50.780
action types

46:52.460 --> 46:54.140
监听action types

46:54.700 --> 46:55.580
掉了什么呢

46:55.580 --> 46:56.860
async increase

46:57.980 --> 46:59.420
async increase

46:59.420 --> 47:00.540
这里面我们用eod

47:01.260 --> 47:01.820
eod

47:01.820 --> 47:01.980
好

47:01.980 --> 47:02.700
这里我们输出

47:03.980 --> 47:05.900
async increase

47:05.900 --> 47:06.940
表示我监听到了

47:06.940 --> 47:07.580
监听到了

47:10.060 --> 47:11.100
监听到了

47:11.740 --> 47:12.780
async increase

47:12.780 --> 47:13.740
把这个action输出

47:14.700 --> 47:14.940
好

47:15.580 --> 47:16.140
保存

47:16.140 --> 47:16.700
保存

47:16.700 --> 47:17.420
咱们来看一下吧

47:18.380 --> 47:19.260
那么现在你看

47:19.260 --> 47:19.980
saga有没有结束

47:20.540 --> 47:21.260
是没有结束

47:21.580 --> 47:22.460
为什么没有结束

47:22.460 --> 47:23.660
这个saga为什么没有结束

47:23.660 --> 47:25.180
这句话为什么没有输出

47:25.660 --> 47:26.460
因为这个

47:26.460 --> 47:27.180
这个玩意

47:27.180 --> 47:27.900
这个conter

47:27.900 --> 47:29.660
这个生存器结束不了

47:30.460 --> 47:31.740
只要有一个结束不了

47:31.740 --> 47:32.860
那么这句话就不会结束

47:32.860 --> 47:33.820
or就是这个意思

47:33.820 --> 47:34.860
这就是or的意思

47:34.860 --> 47:37.020
它必须要所有的生存器全部结束

47:37.020 --> 47:37.740
它才能

47:37.740 --> 47:38.860
这个东西才能结束

47:39.420 --> 47:40.620
就这么个指令的意思

47:41.260 --> 47:42.060
好那么这里呢

47:42.060 --> 47:42.460
是不是

47:43.580 --> 47:44.460
一旦发生了

47:45.020 --> 47:46.220
async increase

47:46.220 --> 47:46.940
一旦发生了这个

47:46.940 --> 47:47.820
它是不是可以监听到

47:47.820 --> 47:48.140
对吧

47:48.140 --> 47:49.660
因为它是写的是实循环嘛

47:49.660 --> 47:50.860
它就实动可以监听这个东西

47:51.580 --> 47:52.220
没有这个意思嘛

47:52.700 --> 47:53.100
好

47:53.100 --> 47:53.820
那么这样子一来

47:53.820 --> 47:55.020
我们是不是可以分模块了

47:55.020 --> 47:55.340
哎

47:55.340 --> 47:56.380
它是一个模块

47:56.380 --> 47:57.580
它也是一个模块

47:57.580 --> 47:57.900
对吧

47:57.900 --> 47:58.700
它来监听

47:59.340 --> 48:00.940
学生里边的各种生存器

48:00.940 --> 48:01.980
各种各种埃克型

48:01.980 --> 48:03.100
有副作用的埃克型

48:03.100 --> 48:04.300
那么进行处理

48:04.300 --> 48:05.340
它来监听什么呢

48:05.340 --> 48:06.620
它来监听那个就是

48:08.620 --> 48:09.020
那个

48:10.220 --> 48:11.580
conter里边的

48:11.580 --> 48:13.500
有副作用的埃克型来进行处理

48:13.500 --> 48:13.820
对吧

48:14.540 --> 48:14.940
好

48:14.940 --> 48:17.020
那么我们最终把他合并到这

48:17.020 --> 48:17.820
因这个社里边

48:17.820 --> 48:18.460
那么这里呢

48:18.460 --> 48:19.660
最终是运行的这个玩意

48:19.660 --> 48:20.940
最终是运行的这个玩意

48:21.020 --> 48:21.980
那么这个里面通过一个

48:21.980 --> 48:24.220
拨指令来等待这些生存器

48:24.220 --> 48:25.260
这些生存器不结束

48:25.260 --> 48:26.460
那么我就不会结束

48:26.460 --> 48:27.180
就这么个意思

48:28.300 --> 48:28.860
没问题吧

48:28.860 --> 48:30.140
我想得应该够清楚了吧

48:31.020 --> 48:31.980
那么通常情况下呢

48:31.980 --> 48:33.580
我们再得再说一下啊

48:33.580 --> 48:34.060
这个地方呢

48:34.060 --> 48:35.500
我们就一般名字呢

48:35.500 --> 48:36.700
给他写他的名字的

48:36.700 --> 48:37.740
是叫做入址沙港

48:37.740 --> 48:38.700
就是跟沙港

48:38.700 --> 48:40.700
因为只有一个跟

48:41.260 --> 48:41.900
只有一个跟

48:41.900 --> 48:43.180
就跟那个塑形结构一样

48:43.180 --> 48:43.820
只有一个跟

48:44.460 --> 48:45.340
一个跟任务

48:45.340 --> 48:46.060
那么这个任务呢

48:46.060 --> 48:48.220
去调度其他任务去完成

48:48.220 --> 48:49.900
这个任务去等待其他任务

48:49.980 --> 48:51.340
每个任务去做自己的事情

48:51.340 --> 48:51.740
对吧

48:51.740 --> 48:52.460
那么这样的结构

48:52.460 --> 48:53.500
就是非常明确了

48:53.500 --> 48:53.820
对吧

48:53.820 --> 48:55.020
非常非常舒服了

48:55.900 --> 48:56.220
好

48:56.220 --> 48:57.900
那么这是这么一个拨指令

48:57.900 --> 48:59.500
现在我们学了两个指令了啊

48:59.500 --> 49:00.540
学了两个指令了

49:01.740 --> 49:02.380
好看一下啊

49:02.380 --> 49:03.500
咱们学了两个指令了

49:03.500 --> 49:03.740
好

49:03.740 --> 49:05.260
接下来我们这里再介绍一个指令

49:05.260 --> 49:05.900
叫做Tech

49:06.300 --> 49:06.940
Avery

49:08.140 --> 49:08.780
Avery

49:09.100 --> 49:09.580
指令

49:10.380 --> 49:10.540
好

49:10.540 --> 49:11.500
那么这个指令

49:11.500 --> 49:13.260
我只要没有标记组设的

49:13.260 --> 49:14.460
它就不会组设啊

49:14.780 --> 49:15.500
这个指令

49:15.500 --> 49:16.700
这个指令做什么呢

49:16.700 --> 49:17.420
是事情呢

49:17.420 --> 49:17.900
是

49:18.780 --> 49:19.660
监听

49:19.740 --> 49:21.260
不断的监听

49:21.260 --> 49:23.660
不断的监听某个X

49:24.460 --> 49:24.860
当

49:26.380 --> 49:28.140
当某个X

49:28.620 --> 49:29.580
到达之后

49:30.620 --> 49:31.340
运行

49:31.980 --> 49:32.780
一个函数

49:33.260 --> 49:34.220
运行一个函数

49:34.780 --> 49:36.060
就是这个指令要做的事情

49:36.460 --> 49:37.740
这个指令它不会组设的

49:37.740 --> 49:39.580
它是可以不断的监听某一个X

49:41.260 --> 49:41.900
那么这里呢

49:41.900 --> 49:42.460
我们看一下

49:43.340 --> 49:45.100
如果说我们在这里不写这个

49:45.100 --> 49:45.340
什么

49:46.060 --> 49:46.540
Tech

49:46.540 --> 49:47.260
不写Tech

49:47.260 --> 49:48.380
我们换一种写法

49:48.380 --> 49:49.340
换一种写法

49:49.420 --> 49:49.900
给它写

49:49.900 --> 49:50.940
我们这里复制一下

49:51.740 --> 49:52.540
换一种写法

49:52.540 --> 49:53.980
给它写成Tech Avery

49:54.620 --> 49:55.100
Avery

49:55.100 --> 49:55.740
Avery什么意思

49:55.740 --> 49:56.460
就每一个

49:57.180 --> 49:57.900
每一个

49:57.900 --> 49:59.020
那么这里该怎么写呢

50:00.140 --> 50:01.020
我们用这种写法

50:01.020 --> 50:01.820
Tech Avery

50:03.100 --> 50:04.220
这个监听什么呢

50:04.220 --> 50:04.620
监听

50:04.620 --> 50:05.820
第一个还是Action的类型

50:06.460 --> 50:08.140
监听这个Athink Increase

50:09.020 --> 50:09.820
监听这个类型

50:10.860 --> 50:11.180
好

50:12.620 --> 50:13.180
然后呢

50:13.180 --> 50:13.660
第二个

50:13.980 --> 50:14.940
第二个地方

50:14.940 --> 50:15.980
我们可以写上

50:15.980 --> 50:17.740
就是监听到这个Action过后

50:17.740 --> 50:19.020
要运行的函数

50:19.420 --> 50:20.460
函数是谁

50:20.460 --> 50:20.940
那么这里呢

50:20.940 --> 50:22.620
我们可以在外面再写个函数

50:22.620 --> 50:23.980
就内部去写个函数

50:23.980 --> 50:24.700
这个函数呢

50:24.700 --> 50:27.260
自然而然也得写成一个生成器

50:27.260 --> 50:29.660
为什么也得写成一个生成器呢

50:30.300 --> 50:32.460
为什么也得写成一个生成器

50:32.460 --> 50:33.740
因为如果说

50:34.460 --> 50:36.380
你不写生成器是一个普通函数的话

50:37.340 --> 50:40.700
就是我们写上Counter Task

50:40.700 --> 50:42.140
如果是一个普通函数的话

50:42.140 --> 50:44.060
那里边是不是不能用指令的

50:44.060 --> 50:44.940
为什么不能用指令

50:44.940 --> 50:46.460
因为你这里边不能用Eo的

50:46.460 --> 50:46.860
对吧

50:46.860 --> 50:48.620
你不能用到Saga里边的指令

50:48.620 --> 50:50.620
那你肯定很多时候要进行副作用

50:50.620 --> 50:51.900
肯定要处理Saga指令

50:51.900 --> 50:53.660
所以说这里也得是一个生成器

50:54.300 --> 50:55.340
我们把这个放过来

50:56.140 --> 50:57.260
Counter Task放过来

50:57.260 --> 50:58.140
那这里

50:58.140 --> 50:59.100
由于它是个指令

50:59.100 --> 51:00.860
指令前面必须要加上Eo的

51:00.860 --> 51:01.500
这个毫无疑问

51:02.060 --> 51:02.700
加上Eo的

51:03.420 --> 51:04.060
好那么呢

51:04.620 --> 51:06.380
我们这里下面输出一句话

51:06.380 --> 51:08.380
表示正在监听

51:09.340 --> 51:10.780
正在监听什么

51:10.780 --> 51:14.140
正在监听那个Async Increase

51:15.180 --> 51:15.980
好保存啊

51:15.980 --> 51:17.660
这个函数首先什么都不写

51:17.660 --> 51:18.380
保存看一下

51:19.180 --> 51:21.740
那么你会发现这句话输出了

51:22.380 --> 51:23.340
这句话输出什么

51:23.980 --> 51:24.780
说明什么意思

51:24.780 --> 51:26.380
这句话没有组色对吧

51:26.380 --> 51:27.020
没有组色

51:27.020 --> 51:28.220
那么现在奇怪的来了

51:28.940 --> 51:30.220
奇怪的就出现了

51:30.220 --> 51:31.660
那这句话输出了

51:31.660 --> 51:32.940
是不是这个函数运行结束了

51:33.580 --> 51:35.260
是不是这个函数运行结束了

51:35.260 --> 51:36.780
那这个函数运行结束了

51:37.340 --> 51:38.780
为什么这句话没有输出呢

51:38.780 --> 51:39.500
因为这个我们知道

51:39.500 --> 51:41.420
Students Task里边啥都没写对吧

51:41.420 --> 51:42.140
这里边啥都没写

51:42.140 --> 51:43.740
它肯定一下就运行结束了

51:43.740 --> 51:46.060
那么刚才看到这个函数也运行结束了

51:46.060 --> 51:47.500
那么为什么这句话没输出了

51:48.140 --> 51:50.060
是因为这个玩

51:50.060 --> 51:51.340
由于这个东西的存在

51:51.340 --> 51:52.540
take every的存在

51:53.100 --> 51:54.860
它永远不会结束

51:55.660 --> 51:57.260
永远不会结束生存器

51:57.820 --> 51:59.340
永远不会结束生存器

51:59.340 --> 52:00.060
因为它的存在

52:00.060 --> 52:01.180
因为它要不断的坚挺

52:01.180 --> 52:02.060
不断的坚挺

52:02.060 --> 52:04.220
所以说由于它的这种特殊作用的存在

52:04.860 --> 52:05.820
它不会导致

52:06.780 --> 52:07.900
当前这个任务完成

52:08.700 --> 52:09.740
由于它不会导致

52:09.740 --> 52:11.100
以后我们讲原码的设计

52:11.100 --> 52:11.900
知道它怎么做的

52:11.900 --> 52:13.580
它是用技术器来做的

52:13.580 --> 52:14.940
它发现你这里又开了一个

52:15.500 --> 52:16.860
开了一个take every之后

52:17.740 --> 52:19.180
我永远不会结束

52:19.180 --> 52:20.140
永远不会结束

52:20.940 --> 52:22.060
现在我们就知道

52:22.060 --> 52:23.580
我们这样去聊一聊就行了

52:23.580 --> 52:25.420
就是说take every

52:26.540 --> 52:27.740
这样去认为就行了

52:27.740 --> 52:28.700
take every

52:28.700 --> 52:29.180
不会

52:30.460 --> 52:32.380
永远不会结束

52:32.940 --> 52:35.020
当前的生存器

52:36.300 --> 52:37.500
虽然说它不会组设

52:38.300 --> 52:39.260
虽然说它不会组设

52:39.260 --> 52:40.940
它是立即往后面运行

52:40.940 --> 52:42.860
但是它永远不会结束

52:42.860 --> 52:43.660
当前的生存器

52:43.660 --> 52:44.940
就是这个生存器永远结束不了

52:44.940 --> 52:45.660
你可以这样认为

52:46.220 --> 52:47.260
那么这个生存器

52:47.260 --> 52:48.780
由于它永远结束不了

52:48.780 --> 52:49.980
所以说在这边

52:50.700 --> 52:52.060
这边是不是等

52:52.060 --> 52:52.780
没法完成

52:52.780 --> 52:53.820
Saga就没法完成

52:53.820 --> 52:55.260
因为Saga一旦完成就结束了

52:55.260 --> 52:56.380
啥都不会干了

52:56.380 --> 52:58.620
所以它这里是永远完成不了的

52:58.620 --> 52:59.500
就这么有意思

52:59.500 --> 53:00.220
但是注意

53:00.220 --> 53:01.740
它是不会组设的

53:01.740 --> 53:02.300
不会等的

53:02.300 --> 53:03.660
它不会卡在这等着

53:03.660 --> 53:05.260
等着X型发现出发

53:05.260 --> 53:05.820
它不会的

53:06.300 --> 53:06.940
你看这个意思吗

53:07.500 --> 53:09.020
那么这样子一来就有个好处

53:09.020 --> 53:09.420
什么了

53:09.420 --> 53:10.700
我们就可以监听多个

53:10.700 --> 53:11.820
比方说学生这里

53:11.820 --> 53:13.100
比方说这里数字这里

53:13.100 --> 53:15.020
不是有多个

53:15.100 --> 53:16.620
这个就是副作用

53:16.620 --> 53:17.020
对吧

53:17.020 --> 53:18.060
我们可以监听多个

53:18.060 --> 53:19.260
刚才是增加

53:19.260 --> 53:20.460
我们还可以监听什么

53:20.460 --> 53:21.740
还可以监听Decrease

53:21.740 --> 53:22.220
对不对

53:22.940 --> 53:23.820
那么这里我们

53:23.820 --> 53:24.780
increase

53:25.820 --> 53:26.460
async

53:27.900 --> 53:28.620
increase

53:29.820 --> 53:30.620
increase

53:31.020 --> 53:31.820
那么这里呢

53:31.820 --> 53:32.540
我们再写一个

53:34.540 --> 53:36.060
async decrease

53:36.940 --> 53:37.180
好

53:37.180 --> 53:38.060
这里能不能放过来

53:38.620 --> 53:39.340
这里放过来

53:39.340 --> 53:39.660
好

53:39.660 --> 53:40.940
是不是可以监听多个

53:41.180 --> 53:41.660
对不对

53:42.220 --> 53:43.260
可以监听多个

53:45.860 --> 53:46.580
async decrease

53:46.980 --> 53:48.180
现在我们就监听到两个

53:48.660 --> 53:49.620
监听到这两个

53:49.940 --> 53:50.820
而这两个触发

53:50.820 --> 53:52.740
是不是都会运行这两个函数

53:52.740 --> 53:53.220
对吧

53:53.220 --> 53:54.340
我们这里输出一句话

53:54.340 --> 53:55.140
比方输出一句话

53:57.220 --> 53:57.780
increase

53:57.780 --> 54:00.020
就是触发了

54:00.580 --> 54:01.300
触发了怎么

54:01.300 --> 54:01.860
触发了这个

54:03.060 --> 54:04.340
这下面我们再输出一句话

54:04.820 --> 54:05.460
这两个函数

54:05.460 --> 54:06.500
就是只要一

54:06.500 --> 54:07.780
只要一监听到这个X型

54:07.780 --> 54:08.580
它就会触发这个

54:09.460 --> 54:10.020
这些X型

54:10.580 --> 54:11.540
而这些函数

54:11.540 --> 54:12.660
它就会运行这些函数

54:12.660 --> 54:13.780
从头到尾重新运行一遍

54:14.340 --> 54:15.780
从头到尾重新运行一遍

54:16.180 --> 54:16.340
好

54:16.340 --> 54:16.980
那么整理

54:16.980 --> 54:18.420
比方说我们这里的Test里边

54:18.820 --> 54:19.940
再给它加一个decrease

54:20.740 --> 54:21.700
async decrease

54:23.220 --> 54:23.460
好

54:23.460 --> 54:24.020
这里呢

54:24.020 --> 54:24.500
写上这个

54:26.100 --> 54:26.660
async

54:27.220 --> 54:28.180
我还没导入进来对吧

54:30.020 --> 54:30.500
导入进来

54:31.700 --> 54:32.260
好

54:32.260 --> 54:32.900
保存啊

54:32.900 --> 54:34.020
保存咱们来看一下

54:34.020 --> 54:34.580
那么之后呢

54:34.580 --> 54:36.260
你看现在正在监听这两个对吧

54:36.260 --> 54:37.300
正在监听这两个

54:37.940 --> 54:38.820
这里报个警告

54:38.820 --> 54:39.860
警告意思就是说

54:39.860 --> 54:41.220
你这里写了一个生存器

54:41.220 --> 54:42.420
你里边没有写意识的

54:42.420 --> 54:43.540
你写生存器干嘛了

54:43.540 --> 54:44.500
就这么一个意思

54:44.820 --> 54:44.980
好

54:44.980 --> 54:45.460
那么这里呢

54:45.540 --> 54:47.540
我们调用async increase

54:47.540 --> 54:49.060
async increase

54:49.060 --> 54:50.020
你看一下

54:50.020 --> 54:51.700
是不是触发了async increase

54:51.700 --> 54:53.060
然后再调用async increase

54:53.060 --> 54:54.500
是不是又触发了async increase

54:54.500 --> 54:55.060
对吧

54:55.060 --> 54:57.220
它只会不断的监听这个东西

54:57.220 --> 54:57.860
那么每一次

54:58.500 --> 54:59.460
监听到的action过后

54:59.460 --> 55:00.900
它就会触发这个玩意儿

55:00.900 --> 55:01.460
好

55:01.460 --> 55:01.940
然后呢

55:02.660 --> 55:03.220
你又

55:03.220 --> 55:07.380
如果我们调用async decrease

55:10.560 --> 55:11.120
不是

55:11.120 --> 55:12.160
async decrease

55:13.600 --> 55:14.640
那么是不是又监听到

55:14.640 --> 55:16.240
又触发这个这个函数

55:16.320 --> 55:17.120
那么现在这个结构

55:17.120 --> 55:18.160
是不是更加清晰了

55:18.160 --> 55:18.800
对吧

55:18.800 --> 55:20.960
这整个这个任务呢

55:20.960 --> 55:22.080
它是用来处理

55:22.080 --> 55:24.240
counter这个模块里面的附庄用的

55:24.240 --> 55:25.120
那么这个模块里面

55:25.120 --> 55:27.120
我们可能要监听多个action

55:27.120 --> 55:28.240
监听多个action

55:28.240 --> 55:29.440
我们就可以用take every

55:29.440 --> 55:30.400
意思来写

55:30.400 --> 55:31.120
每个action呢

55:31.120 --> 55:31.680
用一个

55:31.680 --> 55:32.640
每个监听的action呢

55:32.640 --> 55:33.920
用一个喊数来进行处理

55:33.920 --> 55:34.880
来它的附庄用

55:34.880 --> 55:35.840
这个结构就无

55:35.840 --> 55:36.720
无比的清晰

55:36.720 --> 55:37.120
看到没

55:38.160 --> 55:39.440
你说我们这里画个图的话

55:39.440 --> 55:40.160
应该是这个样子

55:41.840 --> 55:42.320
画个图

55:42.800 --> 55:44.400
当然你这个Saga任务

55:44.400 --> 55:45.280
你可以随便写

55:45.360 --> 55:46.560
只不过我们通常情况下

55:46.560 --> 55:47.280
都是监听

55:47.280 --> 55:48.000
监听

55:49.040 --> 55:49.920
那么这里呢

55:49.920 --> 55:50.800
是用了一个or

55:50.800 --> 55:51.040
对吧

55:51.040 --> 55:53.360
等待所有任务完成

55:55.840 --> 55:58.800
等待所有任务完成

55:58.800 --> 55:59.520
这里用了个or

55:59.520 --> 56:00.720
等待所有任务完成

56:00.720 --> 56:01.280
那么现在呢

56:01.280 --> 56:02.720
我们有两个任务对吧

56:02.720 --> 56:04.880
一个是什么counter任务

56:05.440 --> 56:06.880
counter的任务

56:06.880 --> 56:09.280
一个是呢student的任务

56:10.160 --> 56:11.040
student的任务

56:11.040 --> 56:12.080
现在啥都没写对吧

56:12.880 --> 56:13.920
我们之后肯定要写

56:15.440 --> 56:15.840
这里呢

56:16.720 --> 56:17.360
到尖头

56:17.760 --> 56:18.960
等待这两个任务完成

56:19.520 --> 56:21.200
那么student的任务呢

56:21.200 --> 56:22.160
肯定瞬间就完成了

56:22.160 --> 56:22.960
我们不管它

56:22.960 --> 56:23.760
我们主要说一下

56:23.760 --> 56:24.720
counter的这个任务

56:28.670 --> 56:29.150
看一下

56:30.270 --> 56:31.150
counter这个任务

56:31.150 --> 56:32.430
等待它完成

56:32.430 --> 56:33.870
那么这个任务里面要做什么呢

56:33.870 --> 56:35.310
它监听了两个x型

56:35.310 --> 56:36.510
监听了两个x型

56:40.720 --> 56:41.520
监听

56:41.520 --> 56:42.560
监听第一个

56:43.120 --> 56:45.920
async increase

56:45.920 --> 56:46.640
对吧

56:46.640 --> 56:48.080
async increase

56:48.080 --> 56:48.720
那么这里呢

56:48.720 --> 56:51.840
还要监听async decrease

56:51.840 --> 56:52.960
监听这么两个x型

56:54.400 --> 56:54.560
好

56:54.560 --> 56:55.280
再打个尖头

56:56.080 --> 56:56.480
这个任务

56:56.480 --> 56:57.760
这个任务是永远不会完成的

56:57.760 --> 56:58.640
因为它要一直监听

56:58.640 --> 57:00.320
我们又使用的是take every

57:00.320 --> 57:01.520
那如果你使用take的话

57:01.520 --> 57:02.320
它会主色

57:02.320 --> 57:03.360
一旦按个按钮发生过后

57:03.360 --> 57:04.720
它就会继续往后运行

57:04.720 --> 57:06.080
但take every呢

57:06.080 --> 57:07.600
它会一开始又会继续往后运行

57:07.600 --> 57:08.960
但是它会普段的监听

57:08.960 --> 57:10.320
我们后边来讲原码的声音

57:10.320 --> 57:11.120
就知道它怎么写的了

57:11.760 --> 57:12.640
也特别有意思

57:14.720 --> 57:15.280
好 这里

57:15.280 --> 57:15.760
监听这个

57:16.480 --> 57:17.360
监听这两个x型

57:20.880 --> 57:25.040
监听到这个async increase的时候

57:25.040 --> 57:25.920
它是运行一个

57:25.920 --> 57:27.440
它会运行另外一个生成器

57:27.440 --> 57:27.840
对吧

57:27.840 --> 57:28.960
那么这就不写了

57:28.960 --> 57:30.560
它就会运行另外一个生成器

57:30.560 --> 57:31.680
监听到dcrease的时候

57:31.680 --> 57:33.040
就会运行另外一个生成器

57:33.040 --> 57:34.560
就形成了这么一种结构

57:34.560 --> 57:35.280
看没

57:35.280 --> 57:36.880
就形成了这么一种结构

57:37.840 --> 57:38.400
好

57:38.400 --> 57:39.280
差不多了

57:39.280 --> 57:41.840
这就是Saga的大致的一种写法

57:41.840 --> 57:43.840
好 这一块东西到这了

57:43.840 --> 57:45.440
那么这一块我们主要是讲了

57:45.440 --> 57:47.680
一种Saga的常用的一种结构

57:47.680 --> 57:49.920
哪怕你不了解生成器的话

57:49.920 --> 57:50.400
都没关系

57:50.400 --> 57:51.760
你只要能够写出这种结构

57:51.760 --> 57:53.120
那Saga就差不多了

57:53.120 --> 57:54.400
比方说counter这个模块

57:54.400 --> 57:56.080
那么你使用监听x型

57:56.080 --> 57:57.440
监听有附中用的x型

57:57.440 --> 57:59.360
那么去出发不同的函数

57:59.360 --> 58:00.480
来进行附中用处理

58:00.480 --> 58:01.440
尽管你现在还不知道

58:01.440 --> 58:02.560
怎么来进行附中用处理

58:02.560 --> 58:03.760
我们后面会讲

58:03.760 --> 58:04.640
都很简单

58:05.360 --> 58:06.320
那么另外一个模块

58:06.320 --> 58:08.720
就监听这个学生的附中用处理

58:08.720 --> 58:09.040
对吧

58:09.040 --> 58:10.080
就这样玩

58:10.720 --> 58:11.600
Saga就是这样子写的

58:12.480 --> 58:12.800
好

58:12.800 --> 58:13.520
那么下面

58:13.520 --> 58:15.200
大家一定要把这个结构写出来

58:15.200 --> 58:16.240
跟着我写一遍

58:16.240 --> 58:18.000
把这个结构写出来

58:18.000 --> 58:19.440
后面我们会具体的讲

58:19.520 --> 58:20.400
它还有哪些指令

58:20.400 --> 58:21.600
它指令非常非常多

58:21.600 --> 58:22.560
API很多

58:22.560 --> 58:23.120
好吧

58:23.120 --> 58:24.160
这几颗的东西

58:24.160 --> 58:25.360
那么这一颗我们学到了

58:25.360 --> 58:27.760
Saga的一种结构

58:27.760 --> 58:28.560
它首先呢

58:28.560 --> 58:31.200
它原理是分了一个模块出来来处理

58:31.200 --> 58:32.320
就是一个生成器

58:32.320 --> 58:34.320
这个生成器会被Saga所控制

58:34.320 --> 58:35.440
那么生成器里面

58:35.440 --> 58:36.640
凡是一要的的位置

58:36.640 --> 58:38.000
它会提供一个指令

58:38.000 --> 58:39.760
就Saga指令给你处理

58:39.760 --> 58:40.880
那么不同的指令

58:40.880 --> 58:42.000
它有不同的作用

58:42.000 --> 58:43.600
那么我们这里会学到三个指令

58:43.600 --> 58:44.480
一个stack

58:44.480 --> 58:46.240
它会带主色的监听x型

58:46.240 --> 58:47.120
那么监听到了过后

58:47.120 --> 58:48.240
继续往后面运行

58:48.640 --> 58:50.640
你可以写个使循环不断的监听

58:50.640 --> 58:52.960
另外一个指令就take every

58:52.960 --> 58:54.080
它是不会主色的

58:54.080 --> 58:55.360
但是它会不断的监听

58:55.360 --> 58:56.800
不会导致这个生成器结束

58:57.520 --> 58:57.760
好

58:57.760 --> 58:58.480
还有个人就是

58:59.280 --> 59:01.200
还有一个就是all

59:01.200 --> 59:02.240
它是监听

59:02.240 --> 59:03.440
它不是监听

59:03.440 --> 59:05.680
它是要等到里面的生成器

59:05.680 --> 59:07.040
全部结束了之后

59:07.040 --> 59:07.920
它才会结束

59:07.920 --> 59:09.360
只要有一个生成器不结束

59:09.360 --> 59:10.160
它就不会结束

59:11.120 --> 59:11.360
好

59:11.360 --> 59:13.200
这就是这三个指令

59:14.560 --> 59:15.120
老老记住

59:15.840 --> 59:16.080
好

59:16.080 --> 59:16.720
接下来

59:16.720 --> 59:18.640
我们下集会再具体讲其他

