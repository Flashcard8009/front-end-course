WEBVTT

00:00.620 --> 00:04.620
这节课咱们来解决一个非常非常小的问题

00:04.620 --> 00:08.020
这个问题呢实际上以后呢也不成问题

00:08.020 --> 00:11.420
因为以后呢我们都会使用一个脚授架

00:11.420 --> 00:14.620
叫做5米解释啊这个脚授架

00:14.620 --> 00:17.020
这个脚授架呢它可以整合

00:17.020 --> 00:19.220
整合react

00:19.220 --> 00:20.820
已经了rotor

00:20.820 --> 00:22.220
已经了redux

00:22.220 --> 00:23.620
啊已经了saga

00:23.620 --> 00:24.820
啊redux saga

00:24.820 --> 00:27.420
它可以把这些东西呢全部进行整合

00:27.420 --> 00:30.520
整合过后呢它编写程序的风格呢

00:30.520 --> 00:33.520
就有点类似于那个

00:33.520 --> 00:35.920
viu那个脚授架了对吧

00:35.920 --> 00:38.320
就有点类似了啊

00:38.320 --> 00:40.120
有一点类似于那个lux

00:40.120 --> 00:41.920
viu里边的lux那个脚授架

00:41.920 --> 00:43.520
你们应该学习过的

00:43.520 --> 00:46.920
所以说呢我们以后呢

00:46.920 --> 00:49.520
其实如果你用5米解释的话啊

00:49.520 --> 00:53.520
就不太会用那些单独的这些这些库了

00:53.520 --> 00:55.120
因此呢我们这几个讲的呢

00:55.120 --> 00:56.920
大概在以后呢

00:56.920 --> 00:59.120
如果说啊你用5米解释

00:59.120 --> 01:00.720
那就用不到了啊

01:00.720 --> 01:03.020
这个redux xs就用不到了

01:03.020 --> 01:05.320
不过呢不排除有些公司呢

01:05.320 --> 01:08.320
可能会啊不使用这个5米解释

01:08.320 --> 01:10.320
可能会使用它原生的啊

01:10.320 --> 01:11.420
也有东西来整

01:11.420 --> 01:13.020
那么这些这个时候呢

01:13.020 --> 01:14.620
你就可能需要这个东西啊

01:14.620 --> 01:16.920
这个东西能够解决一些问题

01:16.920 --> 01:19.120
所以说呢而且呢这个东西并不难

01:19.120 --> 01:20.120
非常非常简单

01:20.120 --> 01:22.820
这个第三仓库叫做redux xs

01:22.820 --> 01:24.720
这个第三仓库非常非常简单

01:24.720 --> 01:26.920
所以说呢我就写了半天啊

01:26.920 --> 01:29.020
还是没有把它作为扩展课程

01:29.320 --> 01:30.820
我希望大家都能了解一下啊

01:30.820 --> 01:33.420
这个库这个库也挺有意思的

01:33.420 --> 01:35.220
它来解决一个什么样的小问题呢

01:35.220 --> 01:37.620
首先啊它不是一个中间键啊

01:37.620 --> 01:39.720
我们说来说这一张全都讲的是中间键

01:39.720 --> 01:40.120
对吧

01:40.120 --> 01:42.520
但它呢它不是一个中间键啊

01:43.220 --> 01:44.420
它就是一个第三仓库

01:44.420 --> 01:45.720
来解决一个小问题的

01:46.820 --> 01:48.720
所以说呢嗯把它放到哪了

01:48.720 --> 01:50.720
我也找不到地方放了啊

01:50.720 --> 01:52.820
我就把它放到这吧啊

01:52.820 --> 01:55.320
因为中间键是增强大使的功能嘛

01:55.320 --> 01:57.720
它其实也不算是增强嘛

01:57.820 --> 01:59.520
可以说方便我们写来嘛

02:00.120 --> 02:01.820
它做解决一个什么样的问题呢

02:01.820 --> 02:04.420
就是在我们的写这个redux的时候啊

02:05.620 --> 02:08.220
我们之前呢你看一下这个xin reducer

02:08.220 --> 02:10.420
你看这个xin啊跟这个reducer

02:10.420 --> 02:12.120
它的结构是不是一样的啊

02:12.420 --> 02:13.920
是一样的对吧

02:14.020 --> 02:16.120
xin呢里边里边的counter啊

02:16.120 --> 02:16.720
counter

02:16.820 --> 02:18.820
这里边我要写什么xin的类型

02:18.820 --> 02:20.720
然后写xin的创建函数

02:21.020 --> 02:22.620
然后呢reducer里边呢

02:22.620 --> 02:23.520
它要根据

02:24.220 --> 02:25.920
counter里面不同的xin

02:25.920 --> 02:27.020
来做不同的处理

02:27.020 --> 02:28.920
对吧做一些输一期啊这种处理

02:29.320 --> 02:30.720
那么其实大家写写啊

02:30.720 --> 02:32.020
这个东西感觉是什么

02:32.420 --> 02:33.520
给大家感觉是什么

02:33.920 --> 02:35.320
感觉是不是挺繁琐啊

02:35.520 --> 02:36.820
特别特别的繁琐

02:36.920 --> 02:38.420
我无非就是要做一个增加

02:38.620 --> 02:40.520
无非就是要做一个减少而已

02:40.620 --> 02:43.020
哎我这要这要去写多少个文件啊

02:43.020 --> 02:44.620
这里至少写了两个文件对吧

02:44.920 --> 02:46.820
两如果你说你把这个type

02:46.820 --> 02:48.720
分开写的话还得写个文件

02:48.920 --> 02:51.520
对不对啊就挺写起来挺繁琐的啊

02:51.620 --> 02:53.820
而且这些代码呢也没有什么技术含量

02:53.820 --> 02:55.620
就纯粹是啊

02:55.820 --> 02:57.420
就得到得到一个结果呗

02:57.420 --> 02:59.320
啊得到一个xin的普通对象

02:59.620 --> 03:01.920
就是这样子写起来了也挺繁琐的

03:02.120 --> 03:03.120
所以说呢

03:03.120 --> 03:05.820
我们可能会需要一个第三方库啊

03:05.820 --> 03:08.320
来减化我们的书写

03:08.920 --> 03:10.820
那么我们使用什么样的第三方库呢

03:10.820 --> 03:12.220
其中一个库啊就是

03:12.320 --> 03:14.420
在解决这方面问题的时候呢

03:14.420 --> 03:17.020
嗯目前的用的比较多的这个库呢

03:17.020 --> 03:18.720
叫reducerxin

03:19.060 --> 03:20.660
他专门用于处理

03:20.720 --> 03:21.620
处理什么问题呢

03:22.920 --> 03:23.820
啊该库

03:24.620 --> 03:25.620
用于

03:26.020 --> 03:28.520
减化啊xin

03:29.380 --> 03:30.520
axin creator

03:31.020 --> 03:33.820
creator就是axin的创建函数啊

03:33.820 --> 03:35.820
就是一个是减化axin types

03:36.120 --> 03:37.820
axin的类型一个是减化

03:37.820 --> 03:39.820
axin的创建函数

03:40.020 --> 03:42.420
以及reducer啊

03:42.820 --> 03:45.320
他用来减化这三个东西的编写

03:45.520 --> 03:47.520
甚至呢我们一会儿取了这个库之后呢

03:47.520 --> 03:49.420
你会发现哎我们现在很简单的

03:49.420 --> 03:51.820
要编写一个reduceraxin creator

03:51.820 --> 03:54.420
已经Types就变了非常简单了

03:54.520 --> 03:55.820
我们甚至呢可以吧

03:56.720 --> 03:59.120
这三个东西呢全部写到一个文件里边

03:59.120 --> 04:00.820
然后就就xin是

04:00.820 --> 04:02.620
而且不要reducer了啊不要reducer了

04:02.620 --> 04:04.020
我们全部写到一起都可以

04:04.620 --> 04:06.420
啊那他是怎么减化的呢

04:06.420 --> 04:08.020
我们一部分一部分看啊

04:08.220 --> 04:10.220
首先呢我们知道他的官方文档呢

04:10.220 --> 04:11.220
是这么一个例子啊

04:11.320 --> 04:11.920
给他看一下

04:13.840 --> 04:14.940
他的官方文档呢

04:14.940 --> 04:17.040
啊好像是没有中文啊

04:17.040 --> 04:18.040
好像是没有中文

04:18.340 --> 04:20.440
官方文档其实大家可以看的懂啊

04:20.440 --> 04:21.340
基本上看的懂

04:21.640 --> 04:23.140
现在先教你怎么安装嘛

04:23.140 --> 04:24.540
这个安装没什么好说的啊

04:24.740 --> 04:26.040
这是一个官方文档

04:26.240 --> 04:27.240
在官方文档里边呢

04:27.240 --> 04:30.240
这个API reference啊就是这个API接口

04:31.040 --> 04:32.040
这个API接口里边呢

04:32.040 --> 04:34.740
他告诉你他这个库里边就提供了三个函数

04:34.940 --> 04:36.440
一个是create actions

04:36.740 --> 04:38.340
一个是handle actions

04:38.440 --> 04:40.040
一个是combined actions

04:40.340 --> 04:42.140
啊等一下啊我把这个门关一下

04:42.140 --> 04:42.940
我真的受不了了

04:42.940 --> 04:51.970
这个现在好多了吧

04:55.150 --> 04:57.550
好他一共就提供了这么三个函数

04:57.850 --> 04:58.850
这三个函数呢

04:59.250 --> 05:01.350
都是用以来简化操作的啊

05:01.350 --> 05:02.250
我们一个个看啊

05:02.750 --> 05:04.550
首先看这个create action

05:04.950 --> 05:07.150
啊他加了个s小伙伴加个s是什么

05:07.150 --> 05:08.650
他这里边有两个函数

05:08.750 --> 05:10.050
一个是create action

05:10.150 --> 05:11.950
一个呢是create actions

05:12.150 --> 05:14.250
啊有两个这么这么两个函数啊

05:14.350 --> 05:15.550
咱们都看一下吧

05:15.850 --> 05:17.950
第一个呢recreate action

05:18.350 --> 05:19.650
啊第一个create action

05:19.950 --> 05:21.450
那么这个create action呢

05:21.450 --> 05:22.450
他是来做什么呢

05:22.450 --> 05:24.950
他是用于帮助你创建一个

05:25.150 --> 05:26.250
action creator的

05:27.250 --> 05:30.250
啊我们这里首先看一下啊create

05:31.150 --> 05:32.850
create action

05:35.050 --> 05:37.250
首先呢这个就是啊

05:37.750 --> 05:39.550
create action

05:39.750 --> 05:42.150
他这么这哎这个函数应该是这样子啊

05:43.550 --> 05:45.950
他这里边提供了这么一个函数create action

05:46.050 --> 05:47.150
我们先按着吧啊

05:47.150 --> 05:48.450
先按着按起来再说

05:48.750 --> 05:52.250
yardd redox actions

05:52.950 --> 05:53.750
啊让他按吧

05:53.750 --> 05:54.750
啊不让他

05:55.650 --> 05:57.850
啊首先是第一个函数啊create action

05:58.150 --> 06:00.750
这个函数呢干嘛的啊该函数

06:01.050 --> 06:02.550
用于帮助

06:03.250 --> 06:05.250
以创建一个

06:05.550 --> 06:06.350
agction

06:06.850 --> 06:08.150
创建函数

06:08.250 --> 06:10.350
就是帮助你创建一个action creator

06:12.750 --> 06:15.150
啊我们之前是不是写过action creator

06:15.150 --> 06:17.450
对吧在不要那个counter里边啊

06:17.450 --> 06:19.450
不是这些东西全是action creator吗

06:19.450 --> 06:20.750
对吧是不是非常繁琐

06:20.850 --> 06:22.550
对不对啊很繁琐吗

06:22.750 --> 06:23.750
啊那么怎么办呢

06:24.050 --> 06:26.350
我们可以通过这个玩意来帮助你

06:26.350 --> 06:30.150
非常非常方便的来创建一个action函数

06:30.350 --> 06:31.750
好咱们来试一下吧

06:31.750 --> 06:33.950
啊来试一下啊我们task里边都有对吧

06:33.950 --> 06:35.650
increase dispatch increase

06:35.650 --> 06:36.950
好比方说我们这里

06:37.050 --> 06:39.250
调的不就是一个action创建函数吗

06:39.250 --> 06:41.550
对不对哎这就是个action创建函数

06:41.650 --> 06:43.550
好那么这里呢我们到这个

06:43.950 --> 06:45.350
这里边来啊

06:45.350 --> 06:47.250
我们可以减化这里的书写

06:47.250 --> 06:48.650
那么创建函数我们怎么写呢

06:48.650 --> 06:49.550
我们可以这样写

06:50.350 --> 06:51.050
看着啊

06:51.950 --> 06:53.050
from redox

06:53.550 --> 06:54.350
actions

06:55.050 --> 06:57.350
这里边有个函数叫做create action

06:57.750 --> 07:00.450
好那么我把这句话这句话注射掉

07:01.550 --> 07:03.650
然后呢我在这里边给大家

07:04.150 --> 07:07.350
导出啊导出一个变量increase

07:07.650 --> 07:08.750
这个变量等于什么呢

07:08.850 --> 07:11.050
等于来自于create action

07:11.650 --> 07:14.150
啊创建一个action creator

07:14.450 --> 07:16.250
那么这里边填啥呢

07:16.350 --> 07:19.150
你就填你的action类型就用了

07:19.350 --> 07:21.750
比方说我要创建一个什么类型的action呢

07:21.850 --> 07:23.950
我要创建action types

07:24.650 --> 07:26.550
the increase就完了

07:27.050 --> 07:28.250
啊这样就写完了

07:29.550 --> 07:30.950
那当然你可以把这个字面量

07:30.950 --> 07:32.450
直接写过来都可以啊

07:32.450 --> 07:34.050
直接把这个字面量写过来都可以

07:34.550 --> 07:35.350
没有这个意思吧

07:35.650 --> 07:36.950
那么这一句话呢

07:36.950 --> 07:40.450
它就相当于是帮你返回了一个函数

07:40.650 --> 07:42.950
这个函数呢它就这么一个样子啊

07:42.950 --> 07:44.250
就这么一个样子看呗

07:44.850 --> 07:46.350
甚至呢我都可以简单的

07:46.350 --> 07:48.450
如果说我们只关心它这个功能的话

07:48.450 --> 07:50.450
我们都可以非常非常简单的

07:50.550 --> 07:51.750
把这个函数呢

07:52.350 --> 07:53.550
这样子啊

07:54.150 --> 07:57.150
然后我们这里写这么一个create action

07:57.350 --> 07:58.250
这么一个函数

07:58.250 --> 08:00.450
你给我一个type action的类型啊

08:00.450 --> 08:01.350
你给我一个action类型

08:01.350 --> 08:02.950
我们来看一下这个函数怎么写的啊

08:02.950 --> 08:04.850
我就顺便讲一下它是怎么实现的

08:04.850 --> 08:06.350
也非常非常简单啊

08:06.450 --> 08:07.950
我们这里返回返回一个什么

08:07.950 --> 08:09.650
返回一个函数啊

08:09.650 --> 08:11.050
就是action creator

08:11.950 --> 08:13.550
返回一个action creator函数

08:13.850 --> 08:15.050
好这个函数里边呢

08:15.150 --> 08:16.450
没有任何函数啊

08:16.450 --> 08:18.650
没有任何函数嗯你没给我传传数吧

08:18.650 --> 08:20.250
对不对你没有给我传传数

08:20.950 --> 08:22.050
那么没有任何传数

08:22.050 --> 08:23.450
我这里是不是返回

08:23.450 --> 08:25.450
返回一个什么type等于啥

08:25.750 --> 08:27.150
就是type对吧

08:27.150 --> 08:28.250
就完了啊

08:28.250 --> 08:29.850
就这么这个函数就这么简单

08:30.150 --> 08:30.650
看呗

08:31.050 --> 08:33.550
然后返回到一个就是action创建函数

08:33.650 --> 08:34.150
对吧

08:34.650 --> 08:36.250
那么你返回的函数是不是这个玩意儿

08:36.250 --> 08:36.850
对不对

08:37.050 --> 08:37.750
这个玩意儿

08:38.050 --> 08:38.450
哎

08:38.950 --> 08:41.350
那么当你去调用这个函数的时候

08:41.750 --> 08:43.250
是不是就得到了这么一个东西了

08:43.650 --> 08:44.150
对不对

08:44.350 --> 08:45.350
那就完了啊

08:45.350 --> 08:47.050
就特别特别简单啊

08:47.050 --> 08:49.050
这就是actioncreate action

08:49.050 --> 08:50.550
这个函数的地种用法啊

08:50.650 --> 08:53.850
它可以帮助你创建一个action创建函数

08:54.150 --> 08:54.750
那么以后呢

08:54.750 --> 08:55.850
我们数学期间是不是

08:55.950 --> 08:57.150
可以少写一点代码了

08:57.150 --> 08:58.350
知道对吧

08:58.850 --> 08:59.850
好咱们来看一下啊

08:59.850 --> 09:01.150
到底行不行呢

09:03.650 --> 09:05.050
啊安装好了啊没运行起来

09:05.450 --> 09:05.950
start

09:07.750 --> 09:08.650
哎到底行不行

09:08.650 --> 09:10.650
我们一会增加的时候看一下啊

09:10.650 --> 09:12.050
他到底能不能增加数字

09:14.690 --> 09:15.590
给你检查啊

09:16.690 --> 09:17.390
在这里边

09:17.390 --> 09:19.590
我们之前特色文件里边啊

09:19.590 --> 09:20.690
测试文件里边

09:21.090 --> 09:22.590
不都有这个increase吗

09:22.590 --> 09:23.790
对吧dispatch啊

09:23.790 --> 09:25.890
仓库去触发一个increase

09:25.890 --> 09:27.190
看一下数字能不能增加

09:27.190 --> 09:28.490
那么我们就可以验证啊

09:28.490 --> 09:30.090
这个increase到底是这么

09:30.090 --> 09:31.490
是不是正确的啊

09:31.490 --> 09:31.990
这里呢

09:32.590 --> 09:33.890
我们这里调 uh

09:33.890 --> 09:35.190
调用increase

09:36.890 --> 09:37.590
increase

09:37.590 --> 09:38.690
你看是不是增加了

09:38.690 --> 09:40.090
对吧是一样的

09:40.690 --> 09:41.990
对吧是一样的啊

09:41.990 --> 09:43.490
这个increase是一样的

09:44.190 --> 09:45.190
没啥意思吧啊

09:45.190 --> 09:48.790
都是帮助你来创建一个action创建函数啊

09:48.790 --> 09:49.690
比方说我们这里

09:50.290 --> 09:51.390
我们这里呢就

09:51.990 --> 09:53.890
把这个东西是不是可以改造一下了啊

09:53.890 --> 09:55.390
改造decrease啊

09:55.390 --> 09:56.890
decrease等于什么呢

09:56.890 --> 09:59.590
这等于这个类型给他填上一个decrease啊

09:59.590 --> 10:01.490
decrease这里可以填字无创啊

10:01.490 --> 10:02.890
也可以填声波都可以啊

10:02.890 --> 10:04.090
都可以好

10:04.090 --> 10:05.090
那么这里下边

10:05.090 --> 10:06.690
a sync decrease啊

10:06.690 --> 10:08.090
a sync decrease

10:08.090 --> 10:09.390
那么a sync decrease

10:09.990 --> 10:10.790
啊然后的

10:10.790 --> 10:12.290
a this increase啊

10:12.290 --> 10:13.190
this decrease

10:13.690 --> 10:14.090
对吧

10:14.690 --> 10:15.890
那这样子呢是不是

10:15.890 --> 10:18.290
我们的代码就少写了很多啊

10:18.290 --> 10:19.090
对不对

10:19.290 --> 10:20.190
就这么简单

10:21.090 --> 10:22.490
好保证一下啊

10:22.790 --> 10:23.490
所以没问题了

10:24.490 --> 10:25.390
increase

10:25.390 --> 10:27.590
还有没有decrease啊

10:27.590 --> 10:29.990
对啊我这里调用increase的decrease调用了

10:29.990 --> 10:30.690
不是这个啊

10:30.690 --> 10:31.390
不是这个

10:31.390 --> 10:32.390
调用了是这边

10:32.390 --> 10:33.690
测试文件里边的啊

10:33.690 --> 10:35.590
加了window对象里边的这个increase

10:35.590 --> 10:38.290
他就帮助你dispatch一个increase

10:38.290 --> 10:39.090
这个increase呢

10:39.090 --> 10:41.590
才是我们的action创建函数啊

10:41.590 --> 10:42.590
从这里导出来的

10:42.590 --> 10:43.690
action创建函数

10:44.790 --> 10:45.390
没问题吧

10:45.390 --> 10:46.590
当然他跟saga有没有

10:46.590 --> 10:47.690
对saga也没有影响

10:47.690 --> 10:50.190
他无非就是帮助你生成了一个action creator

10:50.590 --> 10:52.390
跟你自己手写是一样的啊

10:52.390 --> 10:53.490
没有任何影响

10:53.490 --> 10:54.790
比方说我们这里啊

10:54.790 --> 10:56.090
用increase

10:57.590 --> 10:58.190
increase

10:58.490 --> 10:59.390
increase

11:00.790 --> 11:01.890
等待啊

11:01.890 --> 11:02.690
是不是也可以

11:02.690 --> 11:02.990
对吧

11:02.990 --> 11:03.490
也可以

11:04.290 --> 11:04.490
好

11:04.490 --> 11:05.790
这就是啊

11:05.790 --> 11:07.190
啊crate是action函数

11:07.790 --> 11:08.190
但是呢

11:08.190 --> 11:09.390
真的没有说完

11:09.390 --> 11:12.490
因为有可能会出现这么一种情况

11:12.490 --> 11:13.590
就是这个action呢

11:13.590 --> 11:15.190
他会带有一个payload

11:15.990 --> 11:16.190
啊

11:16.190 --> 11:17.790
他有可能会带有一个payload

11:18.290 --> 11:19.690
那么如果说他带有payload了

11:19.690 --> 11:20.290
怎么办呢

11:20.290 --> 11:21.990
比方说我们这里来多加一个action

11:22.490 --> 11:22.890
啊

11:23.290 --> 11:24.390
这是一步减少了

11:27.000 --> 11:27.300
好

11:27.300 --> 11:28.900
我们现在多加一个action啊

11:28.900 --> 11:30.700
就是add

11:31.100 --> 11:31.700
add

11:32.400 --> 11:33.700
加一个数字啊

11:33.700 --> 11:34.300
加一个数字

11:34.300 --> 11:36.300
你要告诉我加多少个数字啊

11:36.300 --> 11:37.900
你要告诉我加多少个数字

11:37.900 --> 11:38.100
好

11:38.100 --> 11:39.000
咱们用个symbol

11:40.100 --> 11:40.700
add

11:41.500 --> 11:41.900
啊

11:41.900 --> 11:42.400
其实呢

11:42.400 --> 11:44.300
按照规范来说的话啊

11:44.300 --> 11:45.400
按照规范来说的话

11:45.400 --> 11:45.900
这里的

11:46.400 --> 11:47.000
这些东西呢

11:47.000 --> 11:48.100
全部应该大一些啊

11:48.100 --> 11:48.800
全部应该大些啊

11:48.800 --> 11:49.800
其实无所谓了啊

11:51.400 --> 11:52.200
啊这里呢

11:52.200 --> 11:53.600
嗯在flux规范里边呢

11:53.600 --> 11:55.300
他要求的一些支付串

11:55.300 --> 11:55.600
但是呢

11:55.600 --> 11:57.400
我们现在可以写这个symbol

11:57.400 --> 11:58.100
可以写symbol

11:58.100 --> 11:58.800
无所谓的

11:59.000 --> 12:00.100
嗯只不过呢

12:00.100 --> 12:01.900
就是在flux规范里边啊

12:01.900 --> 12:03.000
他要求的一些支付串

12:03.000 --> 12:03.700
而且呢

12:03.700 --> 12:04.400
这个类型呢

12:04.400 --> 12:05.400
要全部大些

12:05.500 --> 12:07.800
因为在flux这个标准出来的时候呢

12:07.800 --> 12:09.400
还没有es6

12:09.400 --> 12:10.900
当然还没有symbol

12:10.900 --> 12:11.600
所以说呢

12:11.600 --> 12:12.100
当时呢

12:12.100 --> 12:14.200
就只能要求的用支付串啊

12:14.600 --> 12:14.900
而且呢

12:14.900 --> 12:15.700
全部大些

12:16.100 --> 12:17.500
如果说你有多个单词的话

12:17.600 --> 12:19.000
用下滑线分割啊

12:19.000 --> 12:20.200
当时是这么一个要求

12:20.200 --> 12:21.600
好我们就用这种要求吧

12:22.400 --> 12:23.600
因为这个action

12:23.600 --> 12:25.400
redux action这个库呢

12:25.400 --> 12:27.700
他建议你尽量使用flux标准

12:27.700 --> 12:29.300
好那咱们就用这个嘛

12:29.300 --> 12:29.800
这个无所谓

12:29.800 --> 12:31.700
这边改跟其他没有什么影响

12:32.700 --> 12:34.400
这是decrease

12:35.100 --> 12:36.300
这个是什么

12:36.300 --> 12:37.300
这个是

12:38.300 --> 12:40.600
a-sync increase

12:40.600 --> 12:42.200
这是符合redux标准的

12:42.200 --> 12:43.300
flux标准的

12:44.800 --> 12:45.500
a-sync

12:46.500 --> 12:47.900
decrease

12:49.000 --> 12:50.100
好那么这里呢

12:50.300 --> 12:51.300
使用add

12:54.420 --> 12:56.320
好了啊先好了

12:57.320 --> 12:58.120
好那么现在呢

12:58.120 --> 12:58.620
我们在

12:59.020 --> 13:00.020
其实肯定是一样的啊

13:00.020 --> 13:01.720
我们只是因为这个硬边嘛

13:01.720 --> 13:02.520
这个就是支付串

13:02.520 --> 13:03.920
我们只会出现在这个位置

13:03.920 --> 13:04.520
其他地方呢

13:04.520 --> 13:06.120
我们都是使用这边量来活去

13:06.120 --> 13:07.220
所以说不影响的啊

13:07.220 --> 13:07.920
不影响

13:08.520 --> 13:09.820
你看是不是不影响

13:10.320 --> 13:10.820
对吧

13:11.220 --> 13:12.120
好没问题啊

13:13.120 --> 13:14.120
好我们接下来看

13:14.220 --> 13:15.520
如果说将他payload

13:15.520 --> 13:16.120
会怎么样呢

13:16.120 --> 13:17.120
现在我们多了一个啊

13:17.120 --> 13:18.120
多了一个action types

13:18.120 --> 13:19.020
就是add

13:19.220 --> 13:19.920
好那么现在呢

13:19.920 --> 13:21.420
我们再来创建一个啊

13:21.420 --> 13:23.420
就是我们现在要实现这么一个效果啊

13:23.420 --> 13:24.920
导出比方说啊

13:24.920 --> 13:26.520
我们这里要导出一个函数

13:26.520 --> 13:27.120
方形

13:28.420 --> 13:30.120
add啊有这么一个函数

13:30.120 --> 13:31.420
你要给我传一个

13:32.020 --> 13:32.920
number进来

13:34.120 --> 13:35.620
我要加多少个

13:35.620 --> 13:37.620
在原来的数字基础上加多少个

13:37.620 --> 13:38.320
你可以写

13:38.420 --> 13:39.320
可以写复数

13:40.520 --> 13:42.020
也可以写零啊

13:42.020 --> 13:43.020
可以写任何东西

13:44.020 --> 13:45.320
好那么我们这里呢

13:45.320 --> 13:46.120
返回的是什么呢

13:46.120 --> 13:47.320
返回的type是不是这样

13:47.320 --> 13:49.020
这样写的啊action types

13:49.220 --> 13:50.120
点add

13:50.220 --> 13:52.420
然后呢这里写什么payload

13:52.420 --> 13:53.720
是什么number

13:53.720 --> 13:54.120
对吧

13:54.220 --> 13:55.120
就这样子写的啊

13:55.320 --> 13:57.420
好那么现在多了一个action类型了啊

13:57.420 --> 13:59.520
那么在reducer里面处理一下啊

13:59.520 --> 14:00.620
再多加一个switch

14:01.920 --> 14:04.620
啊这里呢如果说等于add的话

14:04.820 --> 14:05.720
啊那么这里呢

14:05.720 --> 14:07.520
我们应该加上加上多少

14:07.720 --> 14:09.420
是不是加上那个payload的字

14:09.620 --> 14:12.020
对吧啊加上payload的字啊

14:12.020 --> 14:13.620
这里把payload的一些够出来

14:14.020 --> 14:15.420
嗯payload

14:16.320 --> 14:18.220
我们加上这个payload的字就完成了

14:18.320 --> 14:20.020
啊到底要加多少你告诉我

14:20.920 --> 14:22.120
好没问题了啊

14:22.120 --> 14:23.520
那现在呢我们就是

14:23.620 --> 14:24.620
把这个就是

14:24.620 --> 14:28.220
嗯这个action的创建函数也写好了

14:28.220 --> 14:30.420
那么但是这个创建函数跟之前是不是有区别

14:30.420 --> 14:33.720
之前呢我们这个创建函数呢是没有参数的

14:33.720 --> 14:35.120
那么现在呢有参数了

14:35.120 --> 14:36.220
看没啊

14:36.220 --> 14:37.820
因为他要形成一个payload的嘛

14:37.820 --> 14:41.520
所以说他可能会带了一个或者是多个参数啊

14:41.620 --> 14:43.720
那么我们在测试的时候呢

14:43.720 --> 14:45.120
我们给他加一个方法嘛啊

14:45.420 --> 14:47.420
加一个方法这里多了一个add

14:47.620 --> 14:51.120
啊这里呢我们给window里边加一个add方法

14:52.720 --> 14:55.220
啊那么store啊dispatch

14:55.220 --> 14:57.020
啊这里给我一个参数吗

14:57.020 --> 14:58.720
n啊dispatch

14:59.120 --> 15:02.520
啊那么这里呢使用add啊得到一个action啊

15:02.520 --> 15:03.520
把n传进去

15:03.920 --> 15:04.420
对吧

15:04.720 --> 15:07.420
我们通过这个action创建函数得到一个什么

15:07.520 --> 15:09.220
得到一个action对象啊

15:09.220 --> 15:11.420
得到一个action对象payload的是什么

15:11.520 --> 15:13.120
payload的其实就是n对不对

15:13.120 --> 15:14.620
我要得到这么一个东西啊

15:14.620 --> 15:17.320
通过这个action创建函数来帮我们来创建action

15:18.020 --> 15:19.020
好保存啊

15:19.020 --> 15:21.020
咱们来看一下啊现在肯定是没问题的

15:21.020 --> 15:22.620
add比方说加一个5

15:23.120 --> 15:25.420
你看是不是变成15了啊

15:25.620 --> 15:27.220
一看这个触发的action啊

15:27.220 --> 15:28.420
这是触发的action

15:28.620 --> 15:31.720
看没好然后呢比方add-8

15:32.620 --> 15:35.120
啊那么一看一下这15变成7了

15:35.520 --> 15:38.420
对吧哎这都是非常简单的啊没问题

15:38.620 --> 15:40.220
好那么现在呢我们希望那个

15:40.420 --> 15:42.020
reduxaction这个cool呢

15:42.020 --> 15:45.120
能够帮我们处理这个就是带有payload的情况

15:45.520 --> 15:46.720
那么他是怎么处理的呢

15:46.720 --> 15:48.720
他是需要传递第二个参数

15:48.820 --> 15:50.120
那么这是第一个参数对吧

15:50.520 --> 15:51.420
这是第一个参数

15:51.420 --> 15:52.920
那么还需要传递一个参数啊

15:52.920 --> 15:54.120
传递第二个参数

15:54.220 --> 15:55.920
那么第二个参数怎么传递的看着

15:56.620 --> 15:58.220
add啊我们倒出一个add

15:58.220 --> 15:59.520
我们就不需要这句话了啊

16:00.420 --> 16:01.720
我们倒出一个add啊

16:01.720 --> 16:04.220
那么第二个参数呢我们传递一个函数

16:04.420 --> 16:07.720
这个函数呢就是用于生成一个payload的啊

16:07.720 --> 16:09.020
如果你没有第二个参数

16:09.020 --> 16:10.720
他是不带payload的啊

16:10.720 --> 16:11.720
你看我们之前

16:12.020 --> 16:13.820
调用那个就是increase的时候

16:14.320 --> 16:15.720
你看这个action

16:15.720 --> 16:17.420
action得到的action是什么

16:17.420 --> 16:18.520
只有一个type对吧

16:18.520 --> 16:19.520
他没有payload的

16:19.520 --> 16:20.820
因为你没有第二个参数

16:20.820 --> 16:22.420
他只有一个action type值

16:22.420 --> 16:23.420
他没有payload的

16:23.720 --> 16:25.620
那么如果你要得到payload的话

16:25.620 --> 16:28.220
那么你通过第二个参数来提供

16:28.320 --> 16:29.920
第二参数呢是一个函数

16:29.920 --> 16:34.020
这个函数呢仅仅用于返回一个payload

16:34.820 --> 16:35.320
对吧

16:35.320 --> 16:36.720
他会调用这个函数

16:36.720 --> 16:39.820
把这个函数的返回结果作为payload的

16:40.120 --> 16:41.420
那么这个函数有没有参数

16:41.420 --> 16:42.320
有几个参数呢

16:42.320 --> 16:42.920
随便

16:43.620 --> 16:45.320
到时候你调用这个函数

16:45.320 --> 16:47.020
你给他传了几个参数

16:47.120 --> 16:48.720
他就给你生成几个参数

16:49.020 --> 16:50.020
就这么简单

16:50.520 --> 16:51.320
明白这个意思吗

16:51.720 --> 16:53.520
好所以说呢我们这一块啊

16:54.520 --> 16:55.320
我们这一块

16:55.520 --> 16:58.320
嗯我们可以这里加上一个啊

16:58.320 --> 16:59.320
加上一个就是

16:59.720 --> 17:01.120
嗯一个一个函数

17:02.120 --> 17:04.020
一个函数呢比方说你给我传一个

17:04.020 --> 17:05.520
按照这里面写吧啊

17:05.520 --> 17:06.820
你给我传一个Lumber进来

17:06.920 --> 17:08.120
我给你返回上了

17:08.120 --> 17:08.920
你返回的东西

17:09.020 --> 17:10.820
你不用去返回整个x形对象啊

17:10.820 --> 17:13.020
你只需要返回payload的那一部分就行了

17:13.020 --> 17:14.820
他会给你整合成为一个payload

17:14.820 --> 17:16.420
那我直接把这个Lumber返回就完手

17:16.920 --> 17:18.320
他会帮你形成payload的

17:18.720 --> 17:19.520
我就写完了

17:20.120 --> 17:21.520
写完了保存你看一下

17:22.020 --> 17:23.520
那么现在呢我们再调用add

17:24.120 --> 17:24.620
你看

17:25.520 --> 17:25.920
呀

17:27.020 --> 17:28.520
哎呀add

17:31.420 --> 17:32.620
add和为什么

17:32.920 --> 17:33.920
为什么是那个

17:35.020 --> 17:36.320
ok啊啊那写错了

17:37.920 --> 17:40.620
ad哦这里啊taf是写错了啊

17:40.820 --> 17:41.820
taf是写错了

17:42.120 --> 17:44.020
啊这里呢应该是ad

17:44.520 --> 17:45.120
保存

17:46.220 --> 17:48.520
啊ad啊你看哎

17:49.120 --> 17:50.520
我的payload呢

17:52.850 --> 17:53.950
稍等一下我看一下

17:54.150 --> 17:55.550
哎是啊

17:55.850 --> 17:57.850
第二个是payload creator了吗

17:58.350 --> 18:00.450
啊第二个是payload creator

18:00.550 --> 18:01.350
没问题的

18:01.850 --> 18:02.850
啊我看一下

18:03.350 --> 18:04.050
怎么回事啊

18:04.850 --> 18:06.150
啊这个x形

18:07.050 --> 18:07.550
type

18:08.750 --> 18:10.650
啊这个payplayload

18:11.650 --> 18:12.950
哎没问题啊

18:14.050 --> 18:14.650
没问题啊

18:14.950 --> 18:17.250
我是刚刚没保没保存吗保存一下啊

18:18.550 --> 18:19.450
这边刷新

18:20.850 --> 18:21.450
add

18:22.950 --> 18:24.350
呃他只有一个type

18:24.650 --> 18:25.750
他没有payload

18:26.650 --> 18:28.750
哎我payload给他的试一个函数啊

18:30.450 --> 18:30.950
等一下

18:33.660 --> 18:34.860
跟这个应该没关系吧

18:35.160 --> 18:36.960
跟换好换不换好没关系吧

18:39.470 --> 18:40.470
跟这个没关系啊

18:41.070 --> 18:42.370
我看一下啊怎么回事

18:45.400 --> 18:48.200
啊啊啊我写的是没问题的啊

18:48.200 --> 18:49.500
我这个写的是没问题的

18:49.900 --> 18:51.900
呃是因为我们调用这个add的时候

18:51.900 --> 18:53.300
是不是要得传一个参数啊

18:53.600 --> 18:55.600
对不对我们没有传参数啊

18:55.800 --> 18:58.300
得传一个参数啊比方说传一个10

18:58.800 --> 19:00.300
啊传一个10你看

19:00.600 --> 19:02.200
啊payload的为10

19:02.200 --> 19:03.600
那就是这个这个地方有问题啊

19:03.600 --> 19:05.500
我们之前之前已经调用过一次了

19:05.500 --> 19:07.200
啊重新来传一个10进来

19:07.400 --> 19:08.800
对吧是不是变成20了

19:09.000 --> 19:09.600
再传一个

19:10.100 --> 19:12.400
20进去是不是20变成40了

19:12.700 --> 19:14.200
对吧再传一个-

19:14.700 --> 19:15.400
-5

19:16.100 --> 19:16.600
-5

19:18.200 --> 19:20.000
那么现在是不是40变成35了

19:20.400 --> 19:22.000
对吧就这么简单啊

19:22.400 --> 19:24.000
所以说通过这个第二个参数呢

19:24.000 --> 19:26.200
可以指定一个payload他的值

19:26.400 --> 19:27.200
其实我们这里呢

19:27.200 --> 19:29.400
如果说你要熟悉这个create action的话

19:29.500 --> 19:31.400
那么也可以去熟悉一下啊

19:31.400 --> 19:33.500
比方说我们这里呢就用自己熟悉嘛

19:33.500 --> 19:35.500
这个两下就写出来了啊非常非常简单

19:36.100 --> 19:37.900
啊第一个是type的值对吧

19:38.000 --> 19:41.800
第二个呢是什么叫做啊payload的啊creator

19:42.100 --> 19:43.800
就得到一个payload的东西啊

19:43.800 --> 19:44.800
得到一个payload的

19:44.900 --> 19:46.100
好那么这里呢我们就

19:46.400 --> 19:49.200
这到时候我们返回action type的action的时候

19:49.200 --> 19:51.300
我们就判断一下呗啊判断一下

19:51.500 --> 19:52.700
判断一下如果说

19:53.500 --> 19:55.000
啊如果说你payload

19:55.700 --> 19:58.200
推特如果说你有值啊

19:58.200 --> 20:00.200
并且呢或者我们直接用type

20:00.800 --> 20:03.200
看他是不是一个函数啊type

20:04.400 --> 20:05.800
看他是不是一个函数

20:07.200 --> 20:11.000
方形哎如果说你本身就是一个函数啊

20:11.000 --> 20:11.900
你是一个函数

20:12.000 --> 20:13.240
那么到时候呢你这个action

20:13.240 --> 20:15.840
推特就是你得到了得到了这么一个action

20:15.840 --> 20:17.140
那肯定有参数对吧

20:17.140 --> 20:19.040
有可能有参数有可能没有参数啊

20:19.040 --> 20:20.840
总之呢你给我传多少参数

20:20.840 --> 20:22.140
我就给你调用这个函数

20:22.140 --> 20:24.740
给你传进去啊我们这里啊qc

20:25.040 --> 20:28.040
好我们这里就调用这个函数啊payload的推特啊

20:28.340 --> 20:31.240
把这个传进去好传进去过后

20:31.240 --> 20:33.140
是不是得到一个payload的对吧

20:33.240 --> 20:34.340
是不得到一个payload的

20:35.040 --> 20:37.540
哎我们这里返回返回什么了type

20:37.840 --> 20:40.740
和payload对吧就这么简单啊

20:40.940 --> 20:43.840
这就是有这个第二个参数的时候啊

20:43.840 --> 20:45.340
没有的话没有的话

20:45.340 --> 20:47.240
我直接给你直放回type啊

20:47.240 --> 20:48.940
只会直放回type就完事了

20:49.940 --> 20:51.940
对吧这就不就写好了吗

20:52.240 --> 20:55.840
对不对好咱们看一下吧啊保存啊

20:55.940 --> 20:59.140
你看一下add-45是不一样的对吧

20:59.440 --> 21:01.140
你看是不是一样的啊

21:01.440 --> 21:02.340
就是这个代码了

21:02.340 --> 21:04.340
其实这个是一个非常非常简单的裤啊

21:04.340 --> 21:06.340
大家有兴趣的话可以去呃

21:06.340 --> 21:09.040
常识的自己去手写一下啊其实也非常简单

21:09.740 --> 21:11.640
好这就是crease action啊

21:12.140 --> 21:13.240
嗯我再再说一下吧

21:13.240 --> 21:14.140
这个crease action呢

21:14.140 --> 21:16.240
他还其实都还有第三个参数

21:16.440 --> 21:17.640
第三个参数的写法呢

21:17.640 --> 21:19.440
跟第二个参数的写法是一样的

21:19.540 --> 21:22.640
也是一个函数啊也是一个函数

21:22.940 --> 21:24.540
第三个参数用来干嘛呢

21:24.640 --> 21:27.540
第三个参数呢是用于得到meta的啊

21:27.540 --> 21:28.940
是用于得到meta的

21:29.040 --> 21:30.840
什么意思呢就是在flux里边呢

21:30.840 --> 21:32.040
他的标准里边啊

21:33.040 --> 21:34.340
在flux标准里边

21:34.440 --> 21:36.640
他的x呢是可以写这么一些东西的

21:36.740 --> 21:38.040
一个是tab对吧

21:38.040 --> 21:39.340
tab是一个支付串

21:39.740 --> 21:43.540
好然后呢是payload的附加数据啊附加数据

21:44.440 --> 21:46.140
好然后呢还有一个就是meta

21:46.140 --> 21:47.840
meta表示原数据

21:48.040 --> 21:49.340
什么叫原数据呢

21:49.340 --> 21:50.440
就是说嗯

21:51.240 --> 21:53.840
他跟这个要处理的东西无关

21:53.840 --> 21:55.540
就是我的附带的一些信息

21:55.540 --> 21:57.840
比方说我当前是否登录啊

21:58.040 --> 21:59.740
啊是否有这个权限啊

21:59.740 --> 22:01.440
我的当前角色是啥呀

22:01.640 --> 22:02.740
啊就这些东西

22:02.840 --> 22:03.740
他有点类似

22:03.740 --> 22:05.540
因为我们之前讲过那个virtax

22:05.640 --> 22:08.640
他就在模仿后端的处理啊处理方案

22:08.640 --> 22:09.340
因为后端呢

22:09.340 --> 22:11.240
他是通过一个url请求地址

22:11.240 --> 22:11.740
对吧

22:11.740 --> 22:14.740
来通过一个请求地址来啊拿东西的

22:14.740 --> 22:16.640
那么这里呢通过是通过action

22:16.640 --> 22:18.140
来触发数据变化的

22:18.240 --> 22:19.440
那么通过action的话

22:19.440 --> 22:21.740
那么跟那个url地址的对应的话

22:21.840 --> 22:24.240
那么这个type呢就相当于是url地址

22:24.940 --> 22:27.140
那么这个payload呢就相当于是消息体

22:27.140 --> 22:28.240
对吧请求体

22:28.540 --> 22:30.440
这个meta呢就相当于是请求投

22:30.840 --> 22:32.240
啊就相当于这么个意思啊

22:32.240 --> 22:34.340
附加一些原数据信息啊

22:34.440 --> 22:35.740
那么第三个参数呢就是

22:35.740 --> 22:37.240
他会给你形成一个meta值

22:37.640 --> 22:39.140
啊他会给你形成一个meta值

22:39.140 --> 22:40.740
比方说第三个参数我随便写一个

22:42.040 --> 22:43.540
啊这东西我们一般都用不到啊

22:43.540 --> 22:45.040
一般都用不到啊

22:45.140 --> 22:46.040
随便写一个啊

22:46.140 --> 22:47.340
比方说我们这里呢

22:47.340 --> 22:48.640
e is ordnit啊

22:48.640 --> 22:50.640
是不是玩的圆把他设为丘

22:51.840 --> 22:53.640
把人扩起来啊返回个对象

22:54.440 --> 22:55.840
没他我返回个对象啊

22:56.140 --> 22:57.640
那么有可能reducer要要呢

22:57.640 --> 22:59.440
当然现在reducer根本就没用啊

22:59.440 --> 23:00.340
保存看一下吧

23:00.440 --> 23:01.840
那么我们现在调用一次

23:02.440 --> 23:03.640
我们这里用他的啊

23:03.740 --> 23:06.420
用他写的啊

23:06.420 --> 23:07.820
当然这里还要进行啊判断

23:07.820 --> 23:08.920
有没有第三个参数

23:11.400 --> 23:12.800
好这里能不能用他写的

23:13.100 --> 23:14.700
好保存啊看一下

23:14.800 --> 23:16.200
add调用写个5

23:16.900 --> 23:18.100
那么现在x里边

23:18.100 --> 23:19.400
你看是不是有两个了

23:19.400 --> 23:20.500
一个是panel的

23:20.500 --> 23:23.500
meta他也会调用那个第三个参数的函数

23:23.500 --> 23:25.000
那么形成一个meta的值

23:25.100 --> 23:26.900
meta的值是不是得到一个对象啊

23:26.900 --> 23:28.200
对象里面一个属性

23:28.200 --> 23:30.400
e is ordnit a true

23:30.500 --> 23:33.300
对吧啊就附加一些比方的身份信息啊

23:33.300 --> 23:35.200
还有一些就是啊

23:35.200 --> 23:37.300
操作者的信息啊附加一些元数据

23:38.400 --> 23:39.600
好就这么的东西啊

23:39.600 --> 23:40.900
叫做create action

23:41.500 --> 23:42.400
好这这个函数

23:42.700 --> 23:44.100
嗯其实在这个库里边呢

23:44.100 --> 23:45.000
这个函数呢

23:45.400 --> 23:47.400
嗯很多时候呢都不太用得到

23:47.500 --> 23:48.700
因为他用的更多的是

23:48.700 --> 23:50.900
另外一个函数叫做create actions

23:52.500 --> 23:54.700
啊create actions

23:54.900 --> 23:56.800
这个函数呢更加方便啊

23:57.400 --> 23:59.900
该函数用于帮助你

24:00.500 --> 24:01.300
创建

24:02.200 --> 24:03.000
多个

24:03.200 --> 24:04.600
x 形创建函数

24:04.700 --> 24:05.200
对吧

24:06.100 --> 24:08.400
你可以加那个s 表不是复数吗

24:08.400 --> 24:08.900
对不对

24:09.000 --> 24:11.700
那么他就是用来创建多个x 形创建函数的

24:11.800 --> 24:13.100
好我们这里复制一下啊

24:14.600 --> 24:15.700
我这里复制错了

24:16.600 --> 24:18.000
好这里呢我们复制一下

24:18.100 --> 24:18.800
我们来看一下

24:18.800 --> 24:21.100
如果说我们现在改改动一下该怎么来写

24:22.200 --> 24:24.400
好这里呢我们导入create actions

24:25.000 --> 24:27.300
啊我们要创建increase decrease

24:27.300 --> 24:28.400
sync increase

24:28.600 --> 24:30.500
sync decrease和ad

24:30.500 --> 24:31.500
看一下怎么写啊

24:31.600 --> 24:34.800
我们就可以利用create actions

24:35.100 --> 24:36.500
啊create actions

24:37.300 --> 24:38.500
好那么

24:39.700 --> 24:41.900
创建一个创建 actions

24:42.500 --> 24:43.700
这里面写啥呢

24:43.700 --> 24:44.500
写个对象

24:45.400 --> 24:46.300
啊写个对象

24:47.000 --> 24:49.600
这个对象的属性的名字

24:50.800 --> 24:52.400
就是action 的类型

24:52.700 --> 24:54.500
所以说你连这个东西都不需要了

24:54.800 --> 24:56.900
啊这当然你要他也可以啊

24:56.900 --> 24:59.700
要他也可以我们可以用一个属性表达式嘛

24:59.700 --> 25:01.200
对不对属性表达式

25:01.300 --> 25:02.200
action types

25:02.700 --> 25:05.200
第二什么 increase increase

25:05.600 --> 25:06.900
就是把这个值取出来

25:06.900 --> 25:07.500
这个值是啥

25:07.500 --> 25:08.700
就是不就是increase吗

25:08.700 --> 25:09.900
对不对啊

25:10.400 --> 25:12.500
就是increase看呗啊

25:12.900 --> 25:14.000
得到一个increase

25:14.400 --> 25:15.000
ok

25:15.000 --> 25:16.800
然后呢我们这里写上啥呢

25:17.100 --> 25:18.000
后边写啥呢

25:18.000 --> 25:20.800
后边就写了个payload 的创建函数

25:21.000 --> 25:21.800
就是写这个

25:22.100 --> 25:23.000
后边就写这个

25:23.600 --> 25:24.900
payload 的创建函数

25:25.000 --> 25:27.000
如果说你没有payload 的创建函数

25:27.000 --> 25:27.800
你直接写那

25:29.100 --> 25:30.400
好那么 decrease

25:31.100 --> 25:31.900
decrease

25:33.000 --> 25:33.400
now

25:36.140 --> 25:37.540
然后呢我们写上一个

25:37.640 --> 25:38.640
a think decrease

25:38.640 --> 25:40.240
好这里有两个单词啊

25:40.340 --> 25:41.040
a think

25:41.440 --> 25:42.440
是不是下滑线啊

25:42.440 --> 25:43.840
我们就按照那个action 的

25:44.240 --> 25:46.040
就是那个action 的类型

25:46.040 --> 25:47.240
他的标准的写法

25:47.540 --> 25:48.340
increase

25:49.740 --> 25:50.140
now

25:51.040 --> 25:51.740
还有什么呢

25:53.540 --> 25:54.340
a think

25:55.840 --> 25:56.640
decrease

25:58.040 --> 25:58.440
now

25:58.640 --> 25:59.540
这个now 表示什么意思

25:59.540 --> 26:01.640
就表示他没有他没有payload的

26:01.740 --> 26:03.440
啊这后边是写一个函数

26:03.440 --> 26:06.040
表示得到调用这个函数来得到一个payload

26:06.040 --> 26:07.440
啊表示他没有payload的

26:07.840 --> 26:09.540
好然后呢后边再写一个他

26:09.640 --> 26:11.040
再写最后一个就是add

26:11.340 --> 26:12.140
啊add

26:12.340 --> 26:13.640
add 是不是有payload的

26:13.640 --> 26:15.040
啊add 的payload 打写的

26:15.240 --> 26:16.340
看一下刚才打写的

26:16.340 --> 26:17.740
是不是这样子写的payload的

26:17.840 --> 26:19.240
ok 把这个payload 放过来

26:19.440 --> 26:19.840
没了

26:20.840 --> 26:21.840
一句话写完了

26:22.340 --> 26:23.840
那么他会反而回一个啥呢

26:23.840 --> 26:25.240
他会反而回一个对象

26:26.640 --> 26:27.640
这个对象是这个样子的

26:27.640 --> 26:29.440
我跟他说啊非常非常神奇

26:29.440 --> 26:30.640
这个对象长这个样子

26:31.440 --> 26:33.240
axins 他长这个样子

26:35.380 --> 26:35.980
这个对象呢

26:35.980 --> 26:38.580
他就会完全根据你的属性名字

26:38.680 --> 26:42.580
来生成一个小陀封命连法的属性

26:42.780 --> 26:43.780
他就会生成一个

26:44.180 --> 26:46.080
啊一个increase

26:46.280 --> 26:48.280
啊increase 是一个axin创建函数

26:48.480 --> 26:50.580
啊然后呢 decrease

26:50.880 --> 26:52.280
一个axin创建函数

26:52.380 --> 26:53.180
然后呢是什么

26:53.180 --> 26:53.880
a think

26:56.480 --> 26:57.080
a think

26:58.480 --> 26:58.980
啊

26:59.380 --> 27:00.980
a think increase

27:01.480 --> 27:01.880
啊

27:02.280 --> 27:04.380
这是一个axin创建函数

27:05.280 --> 27:06.980
那么他对应的axin呢

27:06.980 --> 27:07.680
就是这个axin

27:07.680 --> 27:09.080
就是这里写的axin名称

27:09.480 --> 27:12.480
好然后呢这里是a think decrease

27:12.780 --> 27:13.580
啊 decrease

27:13.780 --> 27:14.780
axin创建函数

27:14.880 --> 27:15.980
然后呢是add

27:15.980 --> 27:16.980
啊axin创建函数

27:16.980 --> 27:18.080
但是他有个参数啊

27:18.080 --> 27:18.880
有个参数

27:18.880 --> 27:19.880
一个参数是number

27:20.680 --> 27:21.080
对吧

27:21.980 --> 27:23.880
啊他会形成这么一种结构

27:26.840 --> 27:28.440
啊会形成这么一种结构

27:28.940 --> 27:30.340
啊不行的话我们来看一下吧

27:30.440 --> 27:31.340
啊来看一下啊

27:31.440 --> 27:32.440
我们这里打印出

27:33.040 --> 27:33.840
这个axin

27:33.940 --> 27:36.340
啊后来说我们把这里呢放到温豆里边

27:36.540 --> 27:37.340
啊温豆里边

27:38.040 --> 27:39.340
我们来打印出这个axin

27:39.340 --> 27:39.940
看一下吧

27:40.140 --> 27:40.640
保存

27:42.240 --> 27:43.640
啊他说编译失败了啊

27:43.640 --> 27:45.140
因为我之前这里没导出啊

27:45.140 --> 27:46.140
没把这些东西导出

27:46.240 --> 27:47.340
编译失败无所谓吧

27:47.740 --> 27:48.440
无所谓啊

27:48.840 --> 27:50.140
啊我们这里axin

27:52.340 --> 27:53.440
哎哦不行

27:53.440 --> 27:55.140
他抱抱错了啊抱错了

27:55.240 --> 27:56.740
我得导出啊我得导出

27:57.040 --> 27:58.740
啊因为他之前呢

27:58.740 --> 28:01.040
他是用用到这里边的很多东西对吧

28:01.040 --> 28:02.940
那我们这样子我们在这里解构

28:02.940 --> 28:03.440
行吧

28:03.840 --> 28:05.940
我在这里解构啊解构导出

28:06.640 --> 28:07.340
is port

28:07.940 --> 28:10.640
解构导出解构出来increase

28:10.840 --> 28:12.240
解构出来decrease

28:12.440 --> 28:13.740
啊如果说他没有这个属性的话

28:13.740 --> 28:14.740
就解构五出来

28:15.740 --> 28:17.340
a think increase

28:17.740 --> 28:19.840
啊然后呢a think decrease

28:19.840 --> 28:20.940
对吧我们把解构

28:21.540 --> 28:22.440
好保存

28:23.140 --> 28:23.640
呀

28:25.040 --> 28:26.040
哦还有add

28:26.940 --> 28:27.440
解构

28:28.140 --> 28:30.040
好解构出来过后我们来看一下啊

28:30.140 --> 28:31.340
来看一下行不行

28:31.340 --> 28:32.740
我们调用这个increase

28:34.640 --> 28:35.340
increase

28:36.340 --> 28:38.340
啊啊你本王还等你

28:38.540 --> 28:39.940
increase调用啊

28:40.540 --> 28:42.140
你看是不是可以对吧

28:43.440 --> 28:44.440
你看是不是可以

28:44.840 --> 28:47.440
说明这里axin创建函数是不是同样生成了

28:47.940 --> 28:50.240
而且是不是连前面的这个东西都不需要了

28:50.440 --> 28:50.840
对不对

28:50.840 --> 28:52.240
是不是连这个玩意都不需要了

28:52.340 --> 28:54.440
我们只需要这里的创建函数就完事了

28:54.640 --> 28:55.140
对吧

28:55.240 --> 28:57.840
因为这里的属性名称

28:57.940 --> 28:59.440
就代表了啥

28:59.740 --> 29:01.540
代表了axin的内容

29:02.340 --> 29:04.140
啊代表了axin的内容

29:04.240 --> 29:06.940
而且他会自动的把这些属性名

29:07.040 --> 29:09.940
转换成小陀封命迷法

29:10.440 --> 29:11.940
把转换成小陀封命迷法

29:13.140 --> 29:13.740
没问题吧

29:14.940 --> 29:17.740
好那么现在呢我们比方说吧

29:17.740 --> 29:20.740
啊我们说如果说你你自己要写这么一个crease

29:20.740 --> 29:21.440
xins

29:21.640 --> 29:23.440
这个这个函数你怎么写的

29:24.140 --> 29:25.540
啊比方说我们现在这里啊

29:25.740 --> 29:27.140
啊我们这里这样吧

29:27.440 --> 29:29.340
为了让你们看的更加好

29:29.340 --> 29:30.640
更加理解这个东西的话

29:30.640 --> 29:31.240
我们先

29:31.640 --> 29:32.440
通过一个名

29:32.440 --> 29:33.640
通过一个就是

29:34.540 --> 29:35.540
辨量把得到

29:38.010 --> 29:39.010
啊把得到

29:39.010 --> 29:39.810
然后呢为了

29:40.310 --> 29:41.410
把个辨量打印出来

29:41.910 --> 29:43.510
axin打印出来看一下吧

29:43.810 --> 29:44.310
保存

29:45.210 --> 29:46.610
好你看一下这个axin是得到了

29:46.610 --> 29:48.010
是不是就这几个函数

29:48.410 --> 29:49.710
你刚配置到这些东西

29:49.710 --> 29:51.110
他就会得到这几个函数

29:51.310 --> 29:51.810
看没

29:52.110 --> 29:52.910
就这么简单

29:53.310 --> 29:54.710
好如果说我们要熟悉一下

29:54.810 --> 29:56.810
熟悉一下这个creaseaxin是这个函数呢

29:57.110 --> 29:57.810
该怎么写

29:58.610 --> 29:59.510
我要说我们这里

30:01.010 --> 30:02.410
这里把它复制一下了

30:02.610 --> 30:03.210
复制一下

30:03.210 --> 30:05.510
复制一下我们把它写到最简洁

30:05.710 --> 30:06.710
啊叫最简洁

30:10.440 --> 30:11.740
啊导出啊导出

30:15.510 --> 30:16.610
这个猪尸放这吧

30:17.710 --> 30:18.310
这前面

30:19.010 --> 30:20.410
不要了啊前面不要了

30:21.510 --> 30:22.210
啊最简洁

30:22.210 --> 30:24.810
以其是以后我们连这个东西都可以删掉

30:24.910 --> 30:25.810
现在之所以没删掉

30:25.810 --> 30:27.110
是因为外面在用这个玩意儿

30:27.110 --> 30:28.410
对吧外面在用这个玩意儿

30:28.410 --> 30:29.710
我们以后就可以删掉了啊

30:30.010 --> 30:31.810
啊好哎这里还抱错

30:32.810 --> 30:33.510
还抱什么说

30:33.910 --> 30:35.110
啊这里不能注射啊

30:36.010 --> 30:37.410
好那么现在我们来熟悉一下啊

30:37.410 --> 30:39.710
这个creaseaxin是看一下熟悉怎么写

30:41.610 --> 30:42.810
其实稍微代码了

30:43.210 --> 30:44.210
多了一点点啊

30:44.210 --> 30:46.110
但是呢也不是什么影响啊

30:46.110 --> 30:47.410
这里呢就是一个就是

30:47.710 --> 30:49.510
mab2axin

30:50.310 --> 30:51.010
creators

30:51.410 --> 30:54.510
啊我们映射到axin的创建函数里边去

30:54.510 --> 30:55.310
你给我一个对象

30:55.310 --> 30:56.410
你给我这么一个对象

30:56.510 --> 30:59.210
我把这个对象的映射成为一个axin创建函数

30:59.810 --> 31:02.310
好那么你给这个对象里边不是有一个个属性吗

31:02.310 --> 31:03.410
我们是不是可以循环

31:03.510 --> 31:04.610
用一个4in循环

31:04.810 --> 31:05.210
对吧

31:05.310 --> 31:06.410
是不是循环这个

31:06.610 --> 31:07.610
他所有的属性

31:07.910 --> 31:08.410
对不对

31:08.410 --> 31:09.610
mab2axin

31:09.810 --> 31:10.510
creators

31:10.610 --> 31:11.010
对吧

31:11.010 --> 31:12.310
循环他所有的属性啊

31:12.310 --> 31:13.610
我都不用去做这个判断了

31:14.210 --> 31:15.610
把这属性一个个拿出来对吧

31:15.610 --> 31:17.210
就拿出来这么一些属性的名字了

31:17.210 --> 31:17.910
对不对啊

31:17.910 --> 31:19.610
拿出这边属性的名字啊

31:19.610 --> 31:22.010
我们这里呢去取他的属性值

31:22.110 --> 31:23.210
属性值是什么

31:23.410 --> 31:24.410
属性值是一个什么

31:24.710 --> 31:26.110
是不是应该是一个函数啊

31:26.110 --> 31:28.210
这个函数用来得到payload的对吧

31:28.410 --> 31:30.010
啊叫做payload

31:30.410 --> 31:31.010
creator

31:31.610 --> 31:34.110
我们通过这个东西来取他的属性值

31:36.710 --> 31:39.010
取出属性值

31:39.110 --> 31:40.110
啊这个属性值呢

31:40.110 --> 31:41.210
其实就是一个什么

31:41.210 --> 31:42.710
就是一个payload的quater

31:42.710 --> 31:43.710
但是他有可能是now

31:43.810 --> 31:44.710
有可能是now

31:45.110 --> 31:47.010
好那么咱们现在来判断一下

31:47.510 --> 31:50.010
如果说你这个payload的quater

31:50.210 --> 31:50.610
啊

31:51.110 --> 31:52.810
如果说你这个payload的quater

31:53.910 --> 31:54.410
他

31:55.310 --> 31:56.510
不为啊

31:57.010 --> 31:58.010
不等于

31:58.910 --> 31:59.410
now

31:59.610 --> 32:01.510
那么是不是有是一个函数啊

32:01.510 --> 32:02.710
我们或者这样看到嘛

32:02.710 --> 32:03.310
type of

32:03.310 --> 32:04.510
我们跟之前一样啊

32:04.510 --> 32:06.910
type of payload的quater啊

32:07.210 --> 32:08.010
等于

32:08.310 --> 32:08.910
undefined

32:08.910 --> 32:10.810
如果说不等于

32:11.210 --> 32:12.310
又等于函数啊

32:12.310 --> 32:13.010
等于一个方形

32:13.010 --> 32:15.110
他如果是给他你给了他一个函数

32:15.210 --> 32:16.810
那么我们是不是要调用这个函数

32:16.910 --> 32:17.410
对不对

32:17.510 --> 32:18.410
调用这个函数

32:18.410 --> 32:19.410
那么这个函数呢

32:20.110 --> 32:20.910
啊这个函数

32:21.010 --> 32:22.510
调用这个函数得到一个结果

32:22.510 --> 32:23.310
这个结果是什么

32:23.310 --> 32:23.910
就是payload的

32:23.910 --> 32:24.910
但是不是现在调用啊

32:24.910 --> 32:25.710
不是现在调用

32:25.810 --> 32:27.310
那么我们现在要干嘛呢

32:27.410 --> 32:29.110
我们现在是要给他复职

32:29.110 --> 32:30.810
就是我们这里要给对象啊

32:31.010 --> 32:32.010
有这么一个对象

32:32.010 --> 32:33.810
因为我最终返回的是一个对象吗

32:33.810 --> 32:35.210
exing是我们刚才看到了

32:35.310 --> 32:37.110
exing是不是得到一个新的对象

32:37.210 --> 32:37.410
对吧

32:37.410 --> 32:39.110
对象里面包含的每一个属性

32:39.110 --> 32:40.710
就是exing的创建函数

32:40.810 --> 32:42.510
所以说我们最终是要得到一个对象

32:43.810 --> 32:43.910
啊

32:43.910 --> 32:44.510
那么这里呢

32:44.510 --> 32:46.910
我就依次的对象的属性复职啊

32:46.910 --> 32:47.910
那么我们这里呢

32:47.910 --> 32:49.010
首先第一个问题

32:49.010 --> 32:50.210
就是个对象的属性名

32:50.210 --> 32:51.410
我们先不着急写这个啊

32:52.610 --> 32:54.110
属性名是不是跟他一样的

32:54.110 --> 32:55.810
跟你传的属性名是一样的

32:56.210 --> 32:57.010
好好看一下

32:57.810 --> 32:59.110
这是我们传的一个对象

32:59.310 --> 33:00.310
这个对象的属性名

33:00.310 --> 33:01.510
比方说increase啊

33:01.510 --> 33:03.010
这个属性名叫increase

33:03.010 --> 33:04.410
那么他得到的属性名是什么

33:04.410 --> 33:05.910
是不是小写的increase

33:06.310 --> 33:07.010
好我们这里呢

33:07.010 --> 33:09.510
写的是async下滑线increase

33:09.510 --> 33:10.610
那么这里得到的是不是

33:10.610 --> 33:12.110
一个小陀封命名法

33:12.210 --> 33:13.710
是不是是不是我们现在要干嘛

33:13.710 --> 33:15.010
是不是要把这个东西

33:15.010 --> 33:16.810
这个属性变成一个什么

33:16.910 --> 33:19.010
变成一个小陀封命名法

33:19.010 --> 33:20.610
当中他里边还做了很多判断

33:20.610 --> 33:22.310
如果说你给他是一个symbol的话

33:22.310 --> 33:23.710
他就不做任何处理啊

33:23.910 --> 33:25.310
嗯但是我们不用管了啊

33:25.310 --> 33:25.910
我们就

33:26.310 --> 33:27.310
按照字母创来处理

33:27.310 --> 33:28.410
按照标准来处理

33:28.410 --> 33:29.810
把他得到一个得到一个这么一个

33:29.810 --> 33:31.210
小陀封命名法

33:31.310 --> 33:32.010
好我们这里写

33:32.010 --> 33:33.410
写上这么一个辅助函数嘛

33:33.610 --> 33:37.110
啊to small camera

33:38.010 --> 33:39.610
啊得到一个小陀封命名法

33:39.610 --> 33:40.710
那么给我一个字母创

33:40.710 --> 33:43.310
我把这个字母创转变成小陀封命名法

33:43.310 --> 33:44.610
分割符呢就是

33:45.010 --> 33:47.210
下滑线啊分割符就是下滑线

33:47.210 --> 33:48.010
好来吧

33:48.510 --> 33:49.410
首先split

33:50.310 --> 33:51.710
按照下滑线来分割

33:51.710 --> 33:54.110
对吧把这个字母创分割成一个数组

33:55.110 --> 33:56.610
啊这是得到小陀封命名法

33:56.810 --> 33:59.810
得到小陀封命名法

34:00.010 --> 34:02.110
把这个字母创分割成一个数组

34:02.410 --> 34:04.310
好分割成一个数组之后呢

34:04.410 --> 34:04.910
然后呢

34:04.910 --> 34:05.810
那我们在干嘛

34:05.810 --> 34:06.670
使用map

34:06.670 --> 34:07.810
硬设成为一个新数组

34:07.810 --> 34:09.710
把数组的每一项比方说我们这里

34:09.810 --> 34:10.610
是不是分割成

34:10.910 --> 34:12.410
数组里面就分割成两项

34:12.410 --> 34:12.910
对吧

34:13.310 --> 34:13.910
起到这吧

34:16.080 --> 34:17.280
啊比方说我们这这个这种

34:17.280 --> 34:18.080
这个字母创

34:18.380 --> 34:19.680
我们先把它变成什么

34:19.780 --> 34:20.880
变成一个数组

34:21.080 --> 34:22.180
这个数组有两项

34:22.180 --> 34:22.780
a think

34:23.280 --> 34:25.080
啊第二个项呢是increase

34:25.280 --> 34:25.580
对吧

34:25.880 --> 34:27.280
然后呢把每一项

34:28.880 --> 34:30.680
手除了第一项之外啊

34:30.680 --> 34:31.780
除了第一项之外

34:31.880 --> 34:34.280
后边的每一项是不是变成一个

34:34.680 --> 34:36.080
啊就是

34:36.180 --> 34:36.980
妥封命名

34:37.080 --> 34:37.580
对不对

34:37.680 --> 34:39.380
除了第一项全部变成小写

34:39.480 --> 34:40.280
后边的每一项

34:40.280 --> 34:41.580
是变成一个妥封命名手

34:41.580 --> 34:42.880
这么大写其他这么小写

34:43.080 --> 34:44.080
好那么map

34:44.280 --> 34:45.180
我们硬设一下啊

34:45.180 --> 34:46.580
把这个数组进行硬设一下

34:46.580 --> 34:48.080
我们要硬设成这么一种格式

34:48.680 --> 34:49.280
a think

34:50.680 --> 34:51.880
increase对吧

34:52.180 --> 34:54.280
我要硬设成这么一种格式啊map

34:54.680 --> 34:55.880
把每一个字不算达到

34:56.380 --> 34:57.780
好那么这边写个函数

35:00.180 --> 35:01.180
啊这边写个函数

35:01.680 --> 35:03.180
好首先呢看它是不是第一项

35:03.480 --> 35:06.080
如果说i等于0是第一项

35:06.480 --> 35:06.880
啊

35:07.480 --> 35:08.680
我们这里这样子

35:08.780 --> 35:11.080
先把这个s呢转转成小写

35:11.580 --> 35:12.980
to lower

35:14.180 --> 35:14.680
case

35:14.880 --> 35:15.980
啊to lower case

35:16.880 --> 35:17.280
好

35:17.980 --> 35:19.180
把它转成小写

35:19.280 --> 35:20.680
如果说它不等于0

35:20.680 --> 35:22.580
那么就是后边的这些项啊

35:22.580 --> 35:23.480
后边的几项

35:23.580 --> 35:25.080
因为它全部现在转成小写了嘛

35:25.080 --> 35:26.580
第一项就直接返回就完事了

35:26.680 --> 35:27.580
那么后边的这一项呢

35:27.580 --> 35:28.880
再把手字母变成大写

35:28.980 --> 35:29.380
对吧

35:29.380 --> 35:30.680
再把手字母变成大写

35:30.880 --> 35:32.680
好不等于0啊

35:32.680 --> 35:34.280
那么就不是第一项

35:34.380 --> 35:35.180
不是第一项

35:35.180 --> 35:37.180
并且呢s的长度啊

35:37.180 --> 35:38.080
字幕上的长度呢

35:38.080 --> 35:38.880
又大于

35:39.380 --> 35:41.080
大于等于1啊

35:41.080 --> 35:42.180
那么怎么办呢

35:42.180 --> 35:44.580
把这个s的手字母啊

35:45.180 --> 35:46.180
把这个s

35:47.080 --> 35:48.180
的手字母

35:48.680 --> 35:50.280
to upper

35:51.780 --> 35:52.280
case

35:52.380 --> 35:53.280
转成大写

35:53.380 --> 35:54.880
然后再拼接上s

35:54.980 --> 35:55.780
substitute

35:56.480 --> 35:57.380
substitute

35:57.480 --> 35:58.380
然后呢从

35:58.780 --> 36:00.280
第一个开始啊

36:00.280 --> 36:01.980
第二个字母开始来拼接一下

36:02.480 --> 36:02.780
好

36:02.780 --> 36:03.180
最后呢

36:03.180 --> 36:04.280
返回这个s

36:04.480 --> 36:05.480
返回这个s

36:05.680 --> 36:06.180
对吧

36:06.380 --> 36:08.180
啊就把它变成这种形式

36:08.180 --> 36:09.080
这种形式过后呢

36:09.080 --> 36:10.180
又形成一个新的速度

36:10.180 --> 36:10.680
然后再

36:11.880 --> 36:12.880
交引啊

36:12.980 --> 36:14.380
用空字母刷连接

36:14.380 --> 36:15.580
连接成这种格式

36:17.850 --> 36:18.350
对吧

36:18.650 --> 36:19.250
啊我们这里

36:19.250 --> 36:19.850
最后呢

36:19.850 --> 36:20.750
再用交引

36:21.850 --> 36:22.750
连接一下

36:22.950 --> 36:24.250
啊用空字母刷连接

36:24.250 --> 36:25.250
连接成这种格式

36:25.250 --> 36:25.750
return

36:25.750 --> 36:26.250
返回

36:26.650 --> 36:28.350
啊就是to small camera

36:28.550 --> 36:29.550
啊咱们来试一下吧

36:29.650 --> 36:30.750
啊这里输出

36:30.850 --> 36:33.250
to small camera

36:33.750 --> 36:34.850
啊我们把这句话传

36:34.850 --> 36:36.050
把这个东西传进去

36:37.850 --> 36:38.450
保存

36:38.550 --> 36:39.350
啊你看一下

36:40.450 --> 36:42.850
啊你看先别关别关抱错啊

36:42.850 --> 36:44.050
你看这里是不是得到了

36:44.050 --> 36:45.150
小图和秘密法

36:45.150 --> 36:45.650
对吧

36:45.850 --> 36:47.250
所以说呢我们有了这个

36:47.250 --> 36:48.450
辅助函出过后了

36:48.450 --> 36:49.250
我们就可以

36:49.750 --> 36:51.950
我们就可以非常轻松的写出

36:52.550 --> 36:53.150
就是

36:53.650 --> 36:55.450
这个我们新的对象里面的属性

36:55.450 --> 36:56.350
属性名是啥

36:56.750 --> 36:57.850
属性名是啥啊

36:57.850 --> 36:58.850
我们先得到嘛

36:58.850 --> 37:00.350
new pro of net

37:00.550 --> 37:01.450
新的属性名

37:01.450 --> 37:02.450
是不是调用这个函数

37:02.450 --> 37:03.650
to small camera

37:03.850 --> 37:05.050
啊把这个payload

37:05.450 --> 37:07.050
啊呗把这个pro of传进去

37:07.450 --> 37:08.650
把我那个属性传进去

37:08.650 --> 37:10.550
是不是得到一个啊得到一个

37:10.650 --> 37:13.650
小图封命名的属性名

37:14.350 --> 37:15.950
好然后呢得到个小

37:16.050 --> 37:17.650
小图封命名的属性名之后呢

37:17.650 --> 37:18.750
我们在这个result里面

37:18.750 --> 37:19.950
是不是给加一下加上

37:20.190 --> 37:20.850
pro of net

37:21.150 --> 37:21.550
好

37:21.650 --> 37:23.350
那么现在只给这个属性复职

37:23.350 --> 37:24.450
这个属性是什么

37:24.950 --> 37:25.550
不要忘了啊

37:25.550 --> 37:26.650
这个属性得到的是什么

37:26.750 --> 37:27.550
是一个

37:28.150 --> 37:29.450
action创建函数

37:29.450 --> 37:30.650
它是不是这个函数啊

37:30.850 --> 37:31.750
你得写个函数啊

37:31.750 --> 37:32.650
你的啊

37:32.650 --> 37:35.450
比方说就是该取个名字的叫action creator

37:35.550 --> 37:36.850
啊这是个函数啊

37:37.350 --> 37:39.250
那么这个函数呢有可能一个要传参数

37:39.250 --> 37:41.250
我也不知道你要不要传参数啊

37:41.350 --> 37:42.950
那么这个函调用这个函数的时候

37:42.950 --> 37:44.350
是要得到一个action

37:44.550 --> 37:45.650
那么这个时候呢

37:45.650 --> 37:47.650
再来判断啊再来判断

37:47.750 --> 37:49.250
你这个payload的creator

37:49.250 --> 37:50.450
到底是个什么玩意

37:50.850 --> 37:52.450
啊你再来进行判断啊

37:52.450 --> 37:54.450
如果说payload的creator

37:54.850 --> 37:55.550
啊type

37:56.750 --> 37:57.750
如果你给它的

37:59.250 --> 38:02.550
是等于一个方形是一个函数啊

38:02.750 --> 38:04.750
那么我这里返回的是什么

38:04.950 --> 38:06.150
我这个函数返回啥

38:06.350 --> 38:07.450
什么type呢

38:07.850 --> 38:10.450
type是啥type就是这个pro

38:10.850 --> 38:11.850
啊就是type

38:12.650 --> 38:14.350
你看我们这里传的是不是type

38:14.450 --> 38:15.550
对吧action的type

38:16.150 --> 38:17.550
啊type就是这个好

38:17.550 --> 38:19.450
那么payload是啥呢

38:19.550 --> 38:20.950
payload的是不是调用这个函数

38:20.950 --> 38:22.550
payload的creator啊把

38:23.250 --> 38:24.750
参数给它传进去对吧

38:24.850 --> 38:26.150
这是payload的对不对

38:26.150 --> 38:27.550
这是它是函数的情况

38:27.550 --> 38:28.650
如果它不是函数的话

38:28.650 --> 38:31.650
就直接返回一个type为payloadpro

38:32.150 --> 38:32.650
对吧

38:33.450 --> 38:34.350
这个就写完了

38:34.650 --> 38:36.650
哈最后呢我们把这个results返回

38:37.850 --> 38:38.850
回成一下

38:39.450 --> 38:40.950
大体的事度就是这样子啊

38:40.950 --> 38:41.850
总之你给它一个对象

38:41.850 --> 38:42.950
它返回一个新的对象

38:42.950 --> 38:44.050
这个新的对象里边

38:44.250 --> 38:46.350
它给你啊给你每个属性呢

38:46.350 --> 38:48.150
给你生成了一个函数

38:48.150 --> 38:49.350
就是action创建函数

38:49.550 --> 38:50.550
啊其实代码呢

38:51.650 --> 38:53.350
我都觉得没有什么必要讲啊

38:53.350 --> 38:54.750
大家都可以发挥一些小强力

38:54.750 --> 38:55.350
至于一些

38:55.350 --> 38:57.250
因为这个原理其实很简单

38:57.350 --> 38:59.150
就是根据一个对象得到另外一个对象吧

38:59.150 --> 39:00.550
另外一个对象是什么属性

39:00.550 --> 39:01.450
自己慢慢分析

39:01.450 --> 39:02.650
总会分析得出来的

39:03.050 --> 39:03.950
好保存一下

39:04.050 --> 39:05.250
你看一下是不是一样的

39:05.350 --> 39:06.250
对吧打印出来

39:06.450 --> 39:07.650
是跟它刚才一样的

39:07.850 --> 39:08.450
对不对

39:09.050 --> 39:10.750
好那么现在咱们再试一下啊

39:10.750 --> 39:11.550
increase

39:12.650 --> 39:13.350
调用一下

39:13.850 --> 39:15.250
啊你看是不是增加了

39:15.350 --> 39:15.850
对吧

39:16.150 --> 39:17.050
得到了x

39:17.250 --> 39:19.550
啊这些这些东西都是action创建函数

39:21.150 --> 39:22.650
好所以说是一样的啊

39:23.250 --> 39:24.450
那么这里就是这个

39:25.150 --> 39:25.650
啊

39:28.050 --> 39:29.350
这里就是这个action

39:29.350 --> 39:30.650
create actions

39:30.850 --> 39:31.750
就这种东西呢

39:31.750 --> 39:34.550
这个用法呢用的可能用起来更加舒服一点

39:34.750 --> 39:35.350
为什么呢

39:35.850 --> 39:37.350
为什么用起来更加舒服一点呢

39:37.750 --> 39:39.250
因为这个玩意儿

39:39.750 --> 39:40.850
啊就这个玩意儿

39:41.150 --> 39:44.150
它是不是就能够不需要这个东西了

39:44.350 --> 39:44.650
对吧

39:44.650 --> 39:46.350
因为我们的内存直接就是要这了

39:46.350 --> 39:47.950
一个地方写内存

39:47.950 --> 39:49.350
是不是就既观念了内存

39:49.350 --> 39:51.550
又观念了action创建函数

39:52.150 --> 39:52.650
对不对

39:53.450 --> 39:54.250
啊没问题吧

39:54.750 --> 39:56.050
好这是create action

39:56.050 --> 39:57.150
啊但是现在还不能去掉啊

39:57.150 --> 39:59.150
因为现在reducer里边还要用这个类型

39:59.150 --> 40:00.050
它要判断吗

40:01.450 --> 40:04.050
好那么现在下就这个函数说完了啊

40:04.250 --> 40:05.950
接下来我们来说下一个函数

40:06.150 --> 40:07.250
下一个函数叫做

40:07.950 --> 40:09.250
哎呀这里官方文道

40:09.950 --> 40:11.850
叫做handle action

40:13.050 --> 40:14.450
handle action这个函数

40:14.950 --> 40:16.850
好那你还猜想一下啊

40:17.050 --> 40:18.450
handle action叫什么

40:18.450 --> 40:19.750
是不是处理action

40:20.550 --> 40:22.150
处理action是谁在处理

40:23.250 --> 40:25.050
谁在处理action是不是reducer

40:25.250 --> 40:26.650
那么顾名思义

40:26.650 --> 40:29.350
这个东西是来减化reducer的编写

40:29.750 --> 40:32.650
啊它是用来减化reducer的编写

40:33.550 --> 40:34.650
我们一个个说啊

40:35.250 --> 40:36.650
handle action

40:37.250 --> 40:39.050
啊它是减化

40:40.250 --> 40:41.050
针对

40:41.850 --> 40:42.750
单个

40:43.250 --> 40:43.950
action

40:44.950 --> 40:45.950
action

40:46.550 --> 40:48.350
的reducer

40:49.550 --> 40:51.050
处理啊

40:51.750 --> 40:53.950
它是减化针对单个action

40:53.950 --> 40:55.150
action的reducer处理

40:55.350 --> 40:56.150
什么意思呢

40:56.150 --> 40:56.950
就是当

40:57.450 --> 40:58.750
当它匹

40:59.250 --> 41:01.150
匹配到啊

41:01.450 --> 41:03.150
对应的action

41:03.150 --> 41:04.050
类型后

41:04.950 --> 41:06.150
啊会

41:06.650 --> 41:07.750
会执行

41:08.650 --> 41:11.250
啊就是对应的函数

41:11.850 --> 41:12.950
就是handle action

41:13.150 --> 41:14.250
那它怎么用的呢

41:14.850 --> 41:15.650
啊怎么用的呢

41:15.650 --> 41:17.650
它用法极其的简单

41:17.850 --> 41:18.850
我们来看一下它怎么用

41:18.950 --> 41:20.250
我们在reducer里边啊

41:20.250 --> 41:22.050
比方说我们之前是这样的写的对吧

41:22.050 --> 41:23.050
之前是这样写的

41:23.050 --> 41:24.650
好那么比方说吧

41:24.650 --> 41:25.950
我就举个例子啊

41:26.350 --> 41:28.750
比方说我们这一块呢

41:28.850 --> 41:30.850
只处理增加不处理减少

41:31.150 --> 41:33.250
因为但是我们这里实际上要处理多个啊

41:33.250 --> 41:34.250
实际上要处理多个

41:34.350 --> 41:35.950
所以说以后呢我们肯定要用crease

41:36.150 --> 41:38.050
handle action加上个s

41:38.050 --> 41:38.950
要处理多个

41:38.950 --> 41:41.650
但是那我们比方说只处理一个action类型

41:41.650 --> 41:42.450
因为这个东西呢

41:42.450 --> 41:45.650
它只解决一个单个的action类型

41:45.850 --> 41:47.650
啊它只解决单个的action类型

41:47.650 --> 41:48.450
它不解决

41:50.250 --> 41:50.850
这个玩意儿

41:50.850 --> 41:52.750
它只解决单个的action类型

41:52.850 --> 41:54.050
它不解决多个啊

41:54.050 --> 41:54.850
比方说我们这里

41:55.150 --> 41:57.250
reducer里边它只处理increase

41:57.650 --> 41:58.350
那怎么办呢

41:58.350 --> 41:59.850
你看着我们可以这样子写

42:01.760 --> 42:02.960
它反回来不是一个函数吗

42:02.960 --> 42:04.360
这个函数不是reducer吗

42:04.360 --> 42:05.360
好我们这里

42:05.860 --> 42:07.760
得到这么一个reducer啊

42:07.760 --> 42:09.160
得到这么一个reducer

42:09.560 --> 42:10.960
好我们这里得到啊

42:11.960 --> 42:12.560
reducer

42:13.260 --> 42:14.360
好这个理论怎么来了

42:14.360 --> 42:16.360
我们可以通过这个这个东西来创建

42:17.760 --> 42:19.960
叫handle action

42:20.960 --> 42:21.360
from

42:21.960 --> 42:24.560
就是reducer action

42:25.360 --> 42:28.160
好那么这里边我们可以使用handle action

42:28.360 --> 42:29.360
第一个传统成什么

42:29.360 --> 42:31.560
传的是action的类型

42:32.260 --> 42:34.160
啊其他第一个传统有很多的传法

42:34.760 --> 42:37.560
啊但是其中一种传法就是传action的类型

42:37.560 --> 42:39.160
类型是什么increase

42:40.260 --> 42:41.360
这是action的类型

42:42.260 --> 42:43.760
第二传统传什么

42:43.760 --> 42:45.560
就传的是你的处理函数

42:45.860 --> 42:48.760
也这个处理函数要返回一个新的数据

42:49.260 --> 42:50.660
那么也传的是啥呢

42:50.760 --> 42:52.360
就是传这里的这句话

42:52.360 --> 42:53.560
就把这句话传过去

42:54.160 --> 42:55.060
就是说你给

42:55.260 --> 42:57.260
你这里就是reducer的写法啊

42:57.260 --> 42:58.560
你给我一个什么stats

42:58.560 --> 42:59.660
你给我一个什么action

42:59.660 --> 43:01.460
对吧reducer是不是这样写的

43:01.460 --> 43:03.460
你给我一个原来的状态和一个

43:03.460 --> 43:04.560
你出发的action

43:04.660 --> 43:07.060
然后呢我这里给你返回一个结果

43:07.060 --> 43:07.460
对吧

43:07.560 --> 43:08.360
返回个啥

43:08.460 --> 43:09.960
返回一个新的状态

43:10.160 --> 43:12.160
哎这个新的状态是啥呢

43:12.860 --> 43:14.860
我们比较说我们只处理increase啊

43:14.860 --> 43:16.360
那么就是stats加1

43:16.860 --> 43:17.360
没了

43:18.360 --> 43:20.060
哎有时候说他这里不要判断吗

43:20.060 --> 43:20.960
判断action的类型吗

43:20.960 --> 43:22.460
不用他帮你判断了

43:22.760 --> 43:26.560
只有当action的类型等于increase的时候

43:26.560 --> 43:28.060
他才会运行这个函数

43:28.160 --> 43:28.960
否则的话

43:28.960 --> 43:30.760
这一块他就直接返回这个

43:31.360 --> 43:32.860
远方不动的返回这个状态

43:32.960 --> 43:33.360
啊

43:33.760 --> 43:34.860
所以说他这里的写法

43:34.860 --> 43:37.060
就相当于是这里这么怎么写

43:37.360 --> 43:38.960
相当于是这里这样子写

43:40.760 --> 43:41.460
你看一下

43:41.760 --> 43:43.160
是不是简洁很多了

43:44.360 --> 43:45.460
但是还少个东西

43:45.460 --> 43:46.960
少个什么默认值

43:47.560 --> 43:48.660
少个默认值

43:48.760 --> 43:50.160
默认值你不能写到这

43:50.260 --> 43:50.660
注意啊

43:50.660 --> 43:52.060
你默认值是不能写到这

43:52.260 --> 43:52.960
默认值呢

43:52.960 --> 43:54.560
你要作为第三个参数

43:54.960 --> 43:56.260
第三个参数是默认值

43:56.260 --> 43:56.860
然后是

43:57.560 --> 43:59.660
然后第一个参数是匹配的x型类型

43:59.860 --> 44:00.660
第二参数呢

44:00.660 --> 44:01.760
是你要运行的函数

44:01.760 --> 44:02.960
就匹配上之后

44:03.160 --> 44:03.760
运行的函数

44:03.760 --> 44:05.260
你要返回的新的状态

44:05.560 --> 44:06.460
第三个参数呢

44:06.460 --> 44:07.460
就是x型的

44:07.860 --> 44:08.460
默认值

44:08.460 --> 44:09.160
就是Reducer的

44:09.160 --> 44:10.160
就是默认值

44:10.560 --> 44:11.260
就写完了

44:11.660 --> 44:12.960
这下面这一句话

44:12.960 --> 44:15.260
就相当于是咱们上面这个代码

44:15.360 --> 44:16.060
你看一下吧

44:16.760 --> 44:18.160
所以现在简洁很多了

44:18.160 --> 44:19.560
你不用去写这个说一句了

44:19.560 --> 44:20.460
他帮你写的

44:20.860 --> 44:21.760
就这么简单

44:22.460 --> 44:22.960
好这里呢

44:22.960 --> 44:24.160
我们export

44:24.960 --> 44:25.560
Reducer

44:25.560 --> 44:26.260
default

44:27.160 --> 44:27.760
看一下吧

44:28.560 --> 44:29.460
Reducer

44:31.060 --> 44:31.560
保存

44:31.860 --> 44:32.360
看一下

44:33.660 --> 44:34.360
好那么现在呢

44:34.360 --> 44:34.860
哎

44:35.960 --> 44:37.260
现在我们调用Increase

44:38.060 --> 44:38.460
你看一下

44:38.460 --> 44:39.560
首先看能不能增加

44:39.760 --> 44:40.560
就增加了

44:40.560 --> 44:41.060
对吧

44:41.560 --> 44:42.560
默认值是10

44:42.760 --> 44:43.460
有时候还说是不是

44:43.460 --> 44:44.260
刚才还没生效

44:44.260 --> 44:45.560
刚才那个写的新的东西

44:45.660 --> 44:46.760
那么这里写成5吗

44:46.760 --> 44:47.760
一看就看出来了

44:49.960 --> 44:50.860
这里Increase

44:50.960 --> 44:52.360
你看是不是从5变成6了

44:52.660 --> 44:53.060
对吧

44:53.160 --> 44:54.260
它会自动帮你匹配

44:54.260 --> 44:55.860
那如果说你调用别的x型的

44:56.060 --> 44:57.060
那就跟他没关系了

44:57.660 --> 44:59.260
调用就是触发别的x型

44:59.460 --> 45:00.460
就跟他没关系了

45:00.560 --> 45:00.960
对吧

45:00.960 --> 45:01.860
跟他没关系了

45:02.060 --> 45:03.560
因为我们现在没有写dcrease

45:03.560 --> 45:04.960
只监听了Increase

45:05.460 --> 45:06.860
只监听了Increase

45:07.260 --> 45:07.660
看没

45:07.660 --> 45:08.660
跟其他有没有影响

45:08.660 --> 45:09.860
跟这个Stewton才在这边

45:09.860 --> 45:11.260
这些东西有没有影响

45:11.360 --> 45:12.660
对他没有任何关系

45:12.760 --> 45:14.160
他只是来方便你

45:14.360 --> 45:15.860
生成一个Reducer而已

45:15.860 --> 45:16.860
这个生成的Reducer

45:16.860 --> 45:17.560
他就是

45:17.560 --> 45:18.260
你可以想象成

45:18.260 --> 45:20.460
就是你自己写的没有什么区别

45:20.560 --> 45:21.860
只是你写法上

45:22.260 --> 45:23.160
简洁了一些

45:23.360 --> 45:25.360
他并没有没有改变任何的格局

45:25.460 --> 45:27.060
比方说我们到时候要合并Reducer

45:27.060 --> 45:28.560
你该怎么合并就怎么合并

45:28.660 --> 45:30.160
该怎么comband就怎么comband

45:30.860 --> 45:32.960
他只是帮助你生成一个Reducer而已

45:33.260 --> 45:35.160
这个Reducer他去匹配这个x

45:35.160 --> 45:35.860
如果匹配到了

45:35.860 --> 45:36.760
他就运行这个函数

45:36.760 --> 45:37.760
得到一个新的状态

45:37.760 --> 45:39.160
如果没匹到就啥都没运行

45:39.460 --> 45:40.360
就这么简单

45:41.060 --> 45:41.560
对吧

45:42.460 --> 45:42.660
好

45:42.660 --> 45:43.360
咱们再来说一下

45:43.360 --> 45:44.160
这个第一个参数

45:44.760 --> 45:45.960
第一个参数

45:46.060 --> 45:49.360
他不仅仅是可以写一个制服串

45:50.860 --> 45:52.060
他还可以写什么

45:52.360 --> 45:52.860
第一

45:53.360 --> 45:54.260
第一个参数

45:55.360 --> 45:56.960
他不仅仅可以写制服串

45:57.260 --> 45:58.260
就是x的类型

45:58.260 --> 45:59.660
还有生博而已都可以写

46:00.760 --> 46:01.860
他还可以写什么呢

46:01.860 --> 46:03.160
他还可以写这个东西

46:04.760 --> 46:06.860
x形创建函数的名称

46:07.560 --> 46:08.460
你看这里到时候是不是

46:08.460 --> 46:09.460
x形创建函数

46:09.460 --> 46:09.960
对吧

46:09.960 --> 46:12.960
你可以把x形创建函数的名称写进去

46:14.260 --> 46:14.960
有意思吧

46:15.160 --> 46:15.860
是不是有意思

46:16.760 --> 46:17.260
咱们

46:17.260 --> 46:19.360
那么现在就我们就不需要这个x形taps了

46:19.560 --> 46:20.560
我们要的是什么呢

46:20.560 --> 46:22.760
要的是这个x形创建函数的名称

46:23.460 --> 46:24.260
increase

46:24.460 --> 46:24.960
对吧

46:25.260 --> 46:26.260
要的是这个玩意儿

46:26.660 --> 46:28.360
哎我们要的是这个东西

46:28.660 --> 46:30.360
这个x形创建函数的名称

46:30.460 --> 46:32.360
那么现在看一下是不是没有印电码了

46:32.360 --> 46:34.360
我们没有把这个制服刷写实写到这了

46:34.360 --> 46:34.760
对吧

46:35.360 --> 46:36.760
为什么他这样子可以做到呢

46:36.760 --> 46:38.760
是因为这个x形创建函数里边

46:38.760 --> 46:40.160
他还给你做了一件事情

46:40.260 --> 46:41.760
就这个函数的taps均呢

46:41.760 --> 46:42.760
他给你重写了

46:42.960 --> 46:44.260
调用这个函数的taps均

46:44.260 --> 46:45.160
他会得到这个

46:45.660 --> 46:46.660
x形的就是

46:48.660 --> 46:50.960
就是那个就是这个x形的名称

46:51.260 --> 46:53.360
比方说我们导入这个x形创建函数啊

46:53.360 --> 46:54.860
我们把它保存到window里边

46:55.460 --> 46:56.360
window就是

46:56.760 --> 46:57.760
increase

46:58.060 --> 46:59.260
creator吧

47:00.660 --> 47:01.560
increase

47:01.760 --> 47:02.160
啊

47:02.260 --> 47:03.760
我们把它保存到window里边啊

47:03.760 --> 47:04.660
我们来看一下这个函数

47:04.660 --> 47:06.260
叫increase creator

47:06.860 --> 47:08.360
啊就是x形创建函数

47:08.760 --> 47:09.360
这个函数呢

47:09.360 --> 47:12.460
其实就有一点点区别啊

47:12.860 --> 47:14.660
叫increase creator

47:14.660 --> 47:15.260
看一下这个函数

47:15.260 --> 47:16.060
我们用dr

47:16.060 --> 47:17.060
把这个函数的

47:17.260 --> 47:18.260
函数也是个对象嘛

47:18.260 --> 47:19.460
把对象的结构拿出来

47:19.760 --> 47:20.460
你会发现

47:20.460 --> 47:21.560
它的对象里边

47:22.260 --> 47:23.060
嗯

47:25.560 --> 47:26.460
等一下啊

47:28.260 --> 47:29.260
我看一下

47:32.480 --> 47:34.580
记得我调一下一个taps均

47:34.880 --> 47:35.880
调一下一个taps均

47:36.280 --> 47:37.080
increase

47:38.780 --> 47:39.680
taps均

47:41.080 --> 47:42.080
哎不对不对不对

47:43.480 --> 47:45.180
啊我想想啊我想想

47:47.890 --> 47:51.590
我想一想这里我导出的有问题吗

47:51.590 --> 47:52.290
没问题啊

47:54.270 --> 47:55.570
哦哦我们是自己的写法

47:55.570 --> 47:56.270
我说嘛

47:56.270 --> 47:57.270
我们是自己的写法

47:57.270 --> 47:59.270
因为我们自己的写法里面没有加taps均

47:59.270 --> 47:59.670
对吧

47:59.670 --> 48:00.670
没有加taps均

48:00.670 --> 48:01.770
我们这里复制一下

48:02.470 --> 48:04.070
我们还是用之前的写法啊

48:04.070 --> 48:05.470
之前用它官方的写法

48:05.670 --> 48:06.470
其实也很简单

48:06.470 --> 48:07.670
把taps均再加上就完事了

48:08.470 --> 48:09.970
啊好保存啊

48:09.970 --> 48:10.870
这是它官方的

48:10.870 --> 48:11.670
我们来看一下啊

48:11.670 --> 48:12.470
我说这么回事

48:12.770 --> 48:14.270
console dr

48:14.370 --> 48:15.870
啊这个increase creator

48:16.870 --> 48:17.470
你看一下

48:17.670 --> 48:19.570
这个是不是给你重写了一个taps均啊

48:19.570 --> 48:22.070
它对象这个函数里面给你重写的这个taps均

48:22.070 --> 48:22.570
看到没

48:23.270 --> 48:24.570
啊给你重写了taps均

48:24.670 --> 48:25.670
那么重写taps均过后

48:25.670 --> 48:27.170
我们来试试的调用一下啊

48:27.170 --> 48:29.070
调用一下这个函数的taps均

48:29.570 --> 48:30.170
你看一下

48:30.470 --> 48:32.070
是不是得到了这个x的名称啊

48:32.670 --> 48:34.570
那么它就是通过这个函数的taps均

48:34.670 --> 48:36.270
来去拿这个x的名称的

48:36.670 --> 48:38.170
所以说它也能匹配到x

48:38.970 --> 48:39.970
所以说刚才呢

48:39.970 --> 48:41.370
我就这就解释了它的原理了

48:41.370 --> 48:41.770
对吧

48:41.770 --> 48:43.070
好像很神奇的样子

48:43.070 --> 48:44.570
你给它的只不过是一个函数

48:44.570 --> 48:46.770
它怎么去知道匹配哪个x的类型呢

48:46.970 --> 48:48.570
因为这个函数里面taps均里边

48:48.570 --> 48:50.570
它记录了x的类型

48:50.570 --> 48:52.270
如果说我们自己要熟写的话怎么写

48:53.170 --> 48:54.370
如果说要自己熟写的话

48:55.270 --> 48:56.170
啊怎么写了

48:56.670 --> 48:57.070
啊

48:57.570 --> 48:58.970
那么这不是就是个函数吗

48:58.970 --> 48:59.370
对不对

48:59.370 --> 48:59.970
哎

48:59.970 --> 49:01.070
这不就是个函数吗

49:02.370 --> 49:03.070
啊看着啊

49:03.670 --> 49:04.070
哎

49:05.370 --> 49:06.370
不要说我们这函数

49:06.470 --> 49:07.570
叫做xquater

49:07.770 --> 49:09.170
啊xquater

49:09.370 --> 49:10.170
这么一个函数

49:10.970 --> 49:11.370
啊

49:11.470 --> 49:12.570
那么这个函数呢

49:12.670 --> 49:14.770
我们把这个函数直接放

49:15.570 --> 49:16.270
复制下来

49:18.260 --> 49:18.460
啊

49:18.460 --> 49:19.760
这里我们创建一个函数

49:20.860 --> 49:21.460
哎

49:22.660 --> 49:24.260
创建这么一个函数

49:25.660 --> 49:26.060
啊

49:26.260 --> 49:26.660
然后呢

49:26.660 --> 49:27.660
给这个函数呢

49:27.860 --> 49:28.860
设置一个什么

49:29.160 --> 49:30.160
toStream

49:30.260 --> 49:30.660
对吧

49:30.660 --> 49:31.460
toStream

49:31.860 --> 49:33.060
重新给它复制

49:33.460 --> 49:34.160
复制

49:34.160 --> 49:35.060
返回的是什么呢

49:35.060 --> 49:36.160
返回的就是prob

49:37.260 --> 49:38.260
就这么简单

49:38.660 --> 49:39.260
就这么简单

49:39.260 --> 49:40.360
这个prob是不是就是

49:40.660 --> 49:42.360
啊你传递的一个属性之名

49:42.360 --> 49:42.860
属性名

49:42.860 --> 49:44.260
刚才传递的属性名

49:44.260 --> 49:46.260
是不是就是x的类型值

49:46.260 --> 49:46.660
对吧

49:46.660 --> 49:47.260
我们把它

49:47.660 --> 49:48.160
啊

49:48.260 --> 49:49.560
改变了个toStream函数

49:49.560 --> 49:49.860
啊

49:49.860 --> 49:50.360
我们这里呢

49:50.360 --> 49:51.060
复制的时候呢

49:51.060 --> 49:52.160
就复制为这个函数

49:52.460 --> 49:53.260
xquater

49:53.860 --> 49:54.060
好了

49:54.060 --> 49:54.760
这样子一来的话

49:54.760 --> 49:56.660
我们也可以达到完全一样的效果

49:56.960 --> 49:57.660
啊复制

49:57.860 --> 49:58.660
把我们的代码

49:58.760 --> 49:59.460
粘贴过来

49:59.660 --> 50:00.360
啊你看一下

50:00.760 --> 50:02.460
是一个完全一样的效果啊

50:02.760 --> 50:03.660
是一个完全一样的效果

50:03.660 --> 50:04.960
我们这里调用increase

50:05.860 --> 50:06.760
是不是还是可以增加

50:06.760 --> 50:07.060
对吧

50:07.060 --> 50:07.560
尽管呢

50:07.560 --> 50:08.660
我们给他传递的是

50:08.860 --> 50:09.960
尽管我们在reducer里边

50:09.960 --> 50:11.460
给他传递的是一个函数

50:11.560 --> 50:12.760
不是一个x的类型

50:12.760 --> 50:13.860
但他通过toStream

50:13.860 --> 50:15.360
是不是可以得到x的类型

50:15.460 --> 50:16.660
他得到了x的类型之后

50:16.660 --> 50:18.760
我就知道该去匹配什么样的

50:18.760 --> 50:19.560
x的类型

50:19.760 --> 50:20.760
那么他自然而来

50:20.860 --> 50:22.560
知道什么时候去运行的函数了

50:23.360 --> 50:23.860
对吧

50:25.060 --> 50:25.460
好

50:26.060 --> 50:27.760
那么这是handleaction

50:28.560 --> 50:29.360
那么另外一个呢

50:29.360 --> 50:30.660
就是handleactions

50:32.160 --> 50:33.860
handleactions

50:35.160 --> 50:36.360
哎这个呢就是什么

50:36.360 --> 50:38.660
就是来简化多个

50:39.060 --> 50:39.660
啊

50:39.760 --> 50:41.660
就是针对多个

50:41.760 --> 50:44.560
x类型的reducer处理

50:45.160 --> 50:46.760
啊就是每一个x类型的

50:46.760 --> 50:48.460
他对应一个reducer来进行处理

50:48.460 --> 50:48.960
对吧

50:49.260 --> 50:51.160
啊他针对多个啊

50:51.160 --> 50:52.060
x类型

50:52.160 --> 50:52.660
那么

50:53.260 --> 50:54.260
的reducer处理

50:54.660 --> 50:54.960
好了

50:54.960 --> 50:55.860
这个时候怎么办

50:55.860 --> 50:56.960
怎么怎么来写呢

50:57.860 --> 50:58.560
看着啊

50:59.760 --> 51:00.560
这是reducer

51:00.960 --> 51:02.260
啊我们这里呢

51:02.360 --> 51:03.460
再加上一个s啊

51:03.660 --> 51:05.060
现在我们要既要处理

51:05.060 --> 51:06.660
增加又要处理减少

51:06.660 --> 51:07.960
又要处理这个add啊

51:07.960 --> 51:08.960
都要进行处理

51:08.960 --> 51:09.760
那么这里呢

51:09.760 --> 51:11.160
我们要监听的

51:11.160 --> 51:12.160
就是我们要得到

51:12.160 --> 51:12.960
不是监听啊

51:12.960 --> 51:14.060
应该就是要处理的

51:14.060 --> 51:15.660
x类型的创建

51:15.660 --> 51:16.360
还是有哪些呢

51:16.360 --> 51:17.360
increase

51:17.560 --> 51:18.860
有什么decrease

51:18.960 --> 51:19.660
还有什么

51:19.860 --> 51:20.860
还有那个就是

51:21.260 --> 51:21.760
啊

51:23.760 --> 51:24.560
add对吧

51:24.560 --> 51:26.260
我们不就是这三个吗

51:26.260 --> 51:26.860
对不对

51:26.860 --> 51:28.460
我们要处理的就是这三个

51:28.660 --> 51:30.060
好那么行行

51:30.260 --> 51:31.560
如果说我们之前的写法

51:31.560 --> 51:32.560
是不是要写switch

51:32.560 --> 51:33.160
写大堆

51:33.160 --> 51:33.660
对吧

51:33.660 --> 51:34.560
要写大堆

51:34.560 --> 51:35.060
那么现在呢

51:35.060 --> 51:36.260
不用写大堆了啊

51:36.760 --> 51:37.360
一下就行

51:38.460 --> 51:39.060
看着啊

51:40.860 --> 51:41.560
reducer

51:42.560 --> 51:42.860
好

51:42.860 --> 51:43.760
那么这里呢

51:44.460 --> 51:45.160
等于什么呢

51:45.360 --> 51:47.660
等于我们handleactions

51:49.060 --> 51:49.360
好

51:49.360 --> 51:50.360
第一个参数

51:50.860 --> 51:52.760
要传一个映射规则

51:53.360 --> 51:53.660
啊

51:53.660 --> 51:54.760
这个映射规则

51:54.760 --> 51:55.260
怎么写呢

51:55.260 --> 51:56.160
这个映射规则

51:56.460 --> 51:56.960
好

51:57.160 --> 51:58.460
这个映射规则又是个对象

51:58.460 --> 51:59.360
这个对象的写法呢

51:59.360 --> 52:01.860
跟之前那个handleaction

52:02.360 --> 52:04.860
跟createAction是一样的写法

52:05.460 --> 52:06.860
跟这里是一样的写法

52:06.860 --> 52:07.860
createAction

52:08.460 --> 52:08.860
对吧

52:08.860 --> 52:10.560
第一个就是属性的名字呢

52:10.560 --> 52:11.460
写Action的类型

52:11.460 --> 52:13.060
就是不同的Action的类型

52:13.060 --> 52:14.760
你要做什么样的处理啊

52:14.760 --> 52:15.860
你要做什么样的处理

52:16.160 --> 52:16.560
好

52:16.560 --> 52:17.960
第一个Action的类型是

52:18.060 --> 52:19.660
比方说是increase

52:21.160 --> 52:21.860
这不错啊

52:21.860 --> 52:24.160
不是就是一个属性名

52:24.260 --> 52:24.960
increase

52:25.060 --> 52:26.160
当增加的时候呢

52:26.160 --> 52:27.460
我们要进行怎么样的处理呢

52:27.460 --> 52:28.660
statsAction

52:28.960 --> 52:29.260
啊

52:29.260 --> 52:29.960
我们要干嘛呢

52:29.960 --> 52:31.560
是不是要返回一个新的对象

52:31.660 --> 52:32.460
stats

52:33.460 --> 52:33.860
啊

52:33.860 --> 52:34.760
就返回了什么

52:34.760 --> 52:35.460
stats加1

52:35.460 --> 52:37.460
我们直接在这里写就得了

52:38.060 --> 52:38.860
就返回一个东西

52:38.860 --> 52:39.960
返回一个新的数据

52:40.160 --> 52:40.660
啊

52:40.660 --> 52:41.160
然后呢

52:41.160 --> 52:42.260
decrease呢

52:42.660 --> 52:42.860
啊

52:42.860 --> 52:43.760
decrease呢

52:43.760 --> 52:44.860
针对这个Action呢

52:44.860 --> 52:45.860
我们要返回什么了

52:46.160 --> 52:46.360
啊

52:46.360 --> 52:47.160
我们要返回什么了

52:47.160 --> 52:48.760
返回的就是stats

52:49.060 --> 52:49.460
啊

52:49.460 --> 52:50.960
其实如果说你不用掉了参数的话

52:50.960 --> 52:51.660
我们都不用

52:51.860 --> 52:51.960
啊

52:51.960 --> 52:52.460
都不要

52:53.260 --> 52:53.660
啊

52:53.660 --> 52:54.660
更加简化了

52:55.660 --> 52:55.860
啊

52:55.860 --> 52:56.560
stats

52:56.660 --> 52:57.360
对象呢

52:57.360 --> 52:58.860
stats-1

52:58.860 --> 52:59.360
对吧

52:59.460 --> 53:00.760
还有的是什么add

53:00.760 --> 53:01.760
啊add

53:01.760 --> 53:02.960
然后呢是什么

53:03.260 --> 53:03.760
啊

53:03.860 --> 53:05.160
因为他需要payload啊

53:05.160 --> 53:06.260
所以说他需要x

53:07.060 --> 53:07.260
啊

53:07.260 --> 53:08.360
那么得到的是什么

53:08.360 --> 53:09.360
得到的是stats

53:09.360 --> 53:10.560
加上x点

53:10.560 --> 53:11.260
payload

53:11.560 --> 53:12.060
对吧

53:12.860 --> 53:14.360
你看一下就把有举手写完了

53:14.360 --> 53:15.260
没有什么数一起

53:15.260 --> 53:15.460
啊

53:15.460 --> 53:16.560
没有那些乱七八糟的东西

53:16.560 --> 53:17.160
写完了

53:18.360 --> 53:18.860
好

53:18.960 --> 53:20.060
完全一样的跟那个

53:20.060 --> 53:20.960
跟之前的

53:21.560 --> 53:22.660
数一起的写法

53:22.660 --> 53:22.960
啊

53:22.960 --> 53:24.260
还有一个就是默认值啊

53:25.360 --> 53:26.960
默认值这里的默认值是5

53:27.560 --> 53:28.860
那么它就可以根据不同的

53:29.060 --> 53:31.760
Reduce不同的表象来做不同的处理

53:32.160 --> 53:33.160
大家都都皮配不上了

53:33.160 --> 53:34.060
都全部不上的话

53:34.060 --> 53:35.160
但那么他就会

53:35.360 --> 53:36.060
得到 hot

53:36.160 --> 53:36.900
远后不动得到

53:36.900 --> 53:37.760
之前的状态

53:38.220 --> 53:38.720
啊

53:38.720 --> 53:39.360
你看一下

53:40.600 --> 53:41.500
那么现在文调

53:41.500 --> 53:42.360
increased

53:44.760 --> 53:45.460
5到6

53:45.460 --> 53:46.040
看呗

53:46.520 --> 53:47.000
啊

53:47.000 --> 53:47.900
decrease

53:49.560 --> 53:51.760
6到5

53:51.760 --> 53:52.760
add

53:53.420 --> 53:54.760
5到16

53:54.760 --> 53:55.400
看呗

53:55.400 --> 53:56.300
是不都搞定了

53:56.800 --> 53:57.260
而且啊

53:57.260 --> 53:57.900
这些地方

53:57.900 --> 54:00.060
这个地方是不是还可以写这个

54:00.060 --> 54:01.740
x型创建函数

54:01.740 --> 54:03.660
对吧 还可以把x型创建函数写过来

54:03.660 --> 54:05.100
但是你不能直接写名字

54:05.100 --> 54:06.780
这样子写的话它就是

54:06.780 --> 54:07.660
你的意型了

54:07.660 --> 54:09.180
就是属性名就表示内形了

54:09.180 --> 54:10.300
你的属性名呢

54:10.300 --> 54:11.740
得给它一个函数

54:11.740 --> 54:13.260
是不是要用属性表达式

54:13.260 --> 54:15.500
对吧 得用属性表达式

54:15.500 --> 54:17.660
Decrease

54:17.660 --> 54:18.620
Decrease

54:18.620 --> 54:19.500
那么这里呢

54:19.500 --> 54:20.220
add

54:20.220 --> 54:22.540
对吧 这样子写也可以

54:22.540 --> 54:24.380
这样子写呢 我就避免了

54:24.380 --> 54:27.260
在这里去得到他们x型的内形了

54:27.260 --> 54:28.940
我们就不需要得到x型的内形

54:28.940 --> 54:29.660
反正我就知道

54:29.660 --> 54:31.420
x型的创建函数是这些就行了

54:31.420 --> 54:33.420
我不管你的x型内形是什么

54:33.420 --> 54:34.380
好 保存

54:34.380 --> 54:35.180
你看一下

54:35.180 --> 54:36.220
一样的

54:36.220 --> 54:37.740
increase

54:37.740 --> 54:38.780
5到6

54:38.780 --> 54:40.300
add

54:40.300 --> 54:41.580
15

54:41.580 --> 54:42.620
6到21

54:42.620 --> 54:44.140
看没

54:44.140 --> 54:45.180
就非常方便

54:45.180 --> 54:46.460
非常非常方便

54:46.460 --> 54:48.300
只有它匹配到了这个x型

54:48.300 --> 54:50.060
因为一个x型创建函数

54:50.060 --> 54:51.900
会对应一个x型内形

54:51.900 --> 54:52.860
这个没问题吧

54:52.860 --> 54:54.140
一个x型创建函数

54:54.140 --> 54:56.220
会对应一个x型的内形

54:56.300 --> 54:57.500
那么一个x型

54:57.500 --> 54:59.660
一把x型创建函数给它了

54:59.660 --> 55:00.700
它就能通过一些

55:00.700 --> 55:01.660
就是它的toosting

55:01.660 --> 55:03.180
能够得到这个x型的内形

55:03.180 --> 55:03.900
它就知道

55:03.900 --> 55:05.340
什么样的内形发生的时候

55:05.340 --> 55:06.700
我要去运行这个函数

55:06.700 --> 55:09.100
来得到一个新的状态

55:09.100 --> 55:09.740
那么你看一下

55:09.740 --> 55:11.980
现在代码简化到这种地步过后

55:11.980 --> 55:13.420
我们会怎么样啊

55:13.420 --> 55:15.340
我们就可以

55:15.340 --> 55:17.100
不要这个Reduce了

55:17.100 --> 55:18.700
这个Reduce就可以不要了

55:18.700 --> 55:19.660
不要了

55:19.660 --> 55:21.180
我就把代码放这儿

55:21.180 --> 55:21.820
放这儿

55:21.820 --> 55:24.140
那么你们自己可以观看一下

55:24.140 --> 55:25.420
Reduce可以不要了

55:25.500 --> 55:27.020
我们直接写到x型里面

55:27.020 --> 55:28.460
你看x型里面怎么写

55:28.460 --> 55:29.740
再复制一下

55:29.740 --> 55:31.580
x型里面我们这样写

55:31.580 --> 55:33.500
不用自己写代码

55:33.500 --> 55:34.460
这个不要了

55:34.460 --> 55:36.140
全部不要了

55:36.140 --> 55:37.020
你看

55:37.020 --> 55:37.820
Reducex型里面

55:37.820 --> 55:39.260
你看x型type都没了

55:39.260 --> 55:40.620
x型types都没了

55:40.620 --> 55:41.980
我们只需要x型创建函数

55:41.980 --> 55:43.580
来帮我们创建一个x型的

55:43.580 --> 55:46.140
就是很多的x型创建函数就完成了

55:46.140 --> 55:48.300
只需要这个东西就行了

55:48.300 --> 55:48.860
好

55:48.860 --> 55:51.020
然后我们需要这个

55:51.020 --> 55:52.860
然后呢

55:52.940 --> 55:54.060
然后我们这里

55:56.060 --> 55:56.540
导出

55:56.540 --> 55:57.580
导出来是导出吗

55:57.580 --> 55:58.620
导出来是导出

55:58.620 --> 56:00.940
然后我们现在下面是不是直接可以写Reduce

56:00.940 --> 56:01.500
对吧

56:01.500 --> 56:03.740
下面我们就可以直接写Reduce了

56:03.740 --> 56:03.980
好

56:03.980 --> 56:05.260
那么我们再导出一个什么

56:05.260 --> 56:06.220
handlex形式

56:07.980 --> 56:09.580
Reduce是什么

56:09.580 --> 56:10.540
直接导出

56:10.540 --> 56:12.700
导出Reduce

56:12.700 --> 56:14.060
用D4实来导出

56:14.060 --> 56:15.260
一个Reduce的处理

56:15.260 --> 56:17.180
前面都是用普通导出的

56:17.180 --> 56:18.300
那么这里用

56:18.300 --> 56:19.420
用那个就是

56:19.420 --> 56:21.180
默正导出一个Reduce

56:21.180 --> 56:22.460
Reduce是啥呢

56:22.460 --> 56:24.860
就是handlex形式

56:24.860 --> 56:25.980
映射呗

56:25.980 --> 56:28.220
映射拿了

56:28.220 --> 56:29.020
来吧

56:29.020 --> 56:30.060
这里呢是什么

56:30.060 --> 56:31.740
increase

56:31.740 --> 56:33.740
increase

56:33.740 --> 56:34.940
increase

56:34.940 --> 56:36.780
increase我们要映射成为什么

56:36.780 --> 56:38.460
映射成一个函数

56:38.460 --> 56:39.660
就State

56:39.660 --> 56:41.260
State加1

56:41.260 --> 56:44.060
Decrease

56:44.060 --> 56:46.460
映射

56:46.460 --> 56:48.060
映射State

56:48.060 --> 56:49.020
State减1

56:49.020 --> 56:50.460
因为它这里不需要用哪一个型

56:50.460 --> 56:51.340
就不写了

56:51.340 --> 56:51.980
还有什么

56:52.060 --> 56:52.940
还有add

56:52.940 --> 56:53.900
这两个我们不处理

56:53.900 --> 56:54.940
这两个是三个来处理

56:54.940 --> 56:56.620
我们没有不处理

56:56.620 --> 56:57.580
add

56:57.580 --> 56:58.540
是什么

56:58.540 --> 57:00.620
有两个State

57:00.620 --> 57:01.740
ag形

57:01.740 --> 57:03.100
映射成为什么呢

57:03.100 --> 57:05.500
映射成为State

57:05.500 --> 57:07.260
加上ag形的

57:07.260 --> 57:08.060
payload

57:08.060 --> 57:08.460
对吧

57:08.460 --> 57:10.380
你甚至还可以在这里结构

57:10.380 --> 57:12.460
这些都是s6的余法

57:12.460 --> 57:14.460
直接加上payload的

57:14.460 --> 57:15.020
对吧

57:15.020 --> 57:15.740
你看一下

57:15.740 --> 57:17.420
ag形

57:17.420 --> 57:17.900
写完了

57:17.900 --> 57:19.740
创建函数全部写完了

57:19.740 --> 57:20.620
然后呢

57:20.700 --> 57:21.980
就是reducer全部写完

57:21.980 --> 57:22.700
急救带嘛

57:22.700 --> 57:23.420
全部写完

57:23.420 --> 57:24.460
是不是简洁很多了

57:24.460 --> 57:26.220
它就在处理这么一个小问题的

57:26.220 --> 57:27.020
当你自己

57:27.020 --> 57:29.420
给你自己的手写没有任何区别

57:29.420 --> 57:30.540
没有任何区别

57:30.540 --> 57:33.100
它就是在帮助你简化手写的

57:33.100 --> 57:34.380
那么这个东西得到的是啥

57:34.380 --> 57:36.780
得到的是一个ag形创建函数

57:36.780 --> 57:37.100
对吧

57:37.100 --> 57:38.620
得到的是一个ag形创建函数

57:38.620 --> 57:39.740
这个玩意得到的是啥

57:39.740 --> 57:40.540
这个玩意得到的是啥

57:40.540 --> 57:42.220
得到的是一个reducer

57:42.220 --> 57:43.500
就这么简单

57:43.500 --> 57:44.780
那么可以通过同样的道理

57:44.780 --> 57:47.180
我们是不是可以把student里边写了

57:47.180 --> 57:47.580
对吧

57:47.580 --> 57:48.460
student里边写了

57:48.940 --> 57:49.820
来练习一下吧

57:49.820 --> 57:50.380
来写一下

57:51.420 --> 57:52.700
student里边写了

57:52.700 --> 57:53.820
该写了

57:53.820 --> 57:53.980
好

57:53.980 --> 57:54.700
student里边

57:56.300 --> 57:57.900
counter里面其实只有一个intel设计

57:57.900 --> 57:59.260
这是都是之前的代码

57:59.260 --> 58:01.420
我们放在这给大家看的清楚一点

58:01.420 --> 58:02.220
大家可以回过一下

58:02.940 --> 58:03.180
算了

58:03.180 --> 58:03.820
我写口气吧

58:03.820 --> 58:04.460
大家休息会

58:04.460 --> 58:06.540
我这个关键吵得真的是不行了

58:08.060 --> 58:08.780
哎呀

58:08.780 --> 58:09.340
好来吧

58:10.140 --> 58:12.140
实际上接到上一次度

58:12.140 --> 58:13.420
已经过了两个小时了

58:14.300 --> 58:15.020
真的吵得不行了

58:15.020 --> 58:16.300
总算写口气了

58:17.660 --> 58:17.980
好

58:18.060 --> 58:19.980
咱们来学生这一块

58:20.780 --> 58:21.260
x

58:21.260 --> 58:22.540
先给大家改造一下

58:22.540 --> 58:24.060
没有必要用这种方式了

58:24.060 --> 58:25.100
没有必要了

58:25.100 --> 58:26.300
咱们直接

58:26.300 --> 58:27.020
我们在这里

58:27.020 --> 58:27.900
直接在上面写吧

58:29.100 --> 58:30.220
直接在这里

58:30.220 --> 58:30.780
import

58:31.500 --> 58:34.140
導入from redux

58:34.940 --> 58:36.060
xs

58:36.060 --> 58:36.860
导入啥呢

58:36.860 --> 58:37.500
跟这边

58:37.500 --> 58:38.540
跟这边是不是一样的

58:38.540 --> 58:39.740
导入createxs

58:39.740 --> 58:41.020
以及handlexs

58:42.060 --> 58:42.460
咱们

58:43.180 --> 58:43.740
没跑去了

58:46.780 --> 58:47.900
导入createxs

58:47.900 --> 58:49.420
以及handlexs

58:50.060 --> 58:50.300
好

58:50.300 --> 58:51.420
首先createxs

58:51.420 --> 58:52.860
它是用来创建一个

58:52.860 --> 58:53.740
就是那个

58:55.100 --> 58:55.580
创建

58:56.940 --> 58:58.540
xs创建函数的

58:58.540 --> 59:00.060
所以我们这里直接导出吧

59:00.060 --> 59:01.100
直接导出

59:01.100 --> 59:02.220
直接解构

59:02.220 --> 59:03.180
直接在这里解构

59:04.460 --> 59:05.740
从哪里面解构呢

59:05.740 --> 59:08.300
就从createxs里面解构

59:09.020 --> 59:10.300
这里面不是返回个对象吗

59:10.380 --> 59:11.180
这个对象里面

59:11.180 --> 59:13.900
跟里面传入的对象是不是一致的

59:13.900 --> 59:14.140
好

59:14.140 --> 59:15.580
首先是change

59:15.580 --> 59:15.980
对吧

59:15.980 --> 59:16.380
change

59:18.140 --> 59:19.180
就是我们改变

59:19.180 --> 59:20.060
改变条件

59:20.060 --> 59:21.100
改变查询条件

59:21.100 --> 59:22.220
查询学生的条件

59:23.020 --> 59:23.900
那么这个change

59:23.900 --> 59:24.860
它反而回到action

59:24.860 --> 59:26.300
它反而回到payload是什么的

59:26.300 --> 59:27.740
我们只关心payload

59:27.740 --> 59:28.300
太不值了

59:28.300 --> 59:29.100
它已经给你写好了

59:29.100 --> 59:30.460
我们只关心payload就行了

59:31.100 --> 59:32.860
那么你要告诉我一个什么

59:32.860 --> 59:33.860
新的流

59:33.860 --> 59:34.620
流condition

59:34.620 --> 59:35.900
你看在下面对照一下

59:35.900 --> 59:36.620
对照一下

59:37.340 --> 59:39.260
然后我给你返回一个payload是什么

59:39.260 --> 59:40.220
payload就是流condition

59:40.780 --> 59:41.180
对吧

59:41.180 --> 59:41.740
没了

59:41.740 --> 59:42.300
没了

59:43.580 --> 59:43.820
好

59:43.820 --> 59:44.860
然后这里解构

59:44.860 --> 59:45.660
解构出来就是

59:45.660 --> 59:46.620
不就是一个change嘛

59:46.620 --> 59:47.500
对不对

59:47.500 --> 59:48.700
所以变成小写

59:48.700 --> 59:50.540
它会变成一个小头封名化

59:50.540 --> 59:51.660
所以这个没了

59:51.660 --> 59:52.460
没了

59:52.460 --> 59:52.700
好

59:52.700 --> 59:53.180
那么接下来

59:53.180 --> 59:54.140
我们接到在这里

59:54.140 --> 59:55.500
生成 reducers

59:55.500 --> 59:56.620
直接导出

59:56.620 --> 59:57.260
export

59:57.260 --> 59:58.140
default

59:58.140 --> 59:58.860
直接

59:58.860 --> 59:59.900
我们这里

59:59.900 --> 01:00:02.140
这个看具体公司的里面规定

01:00:02.140 --> 01:00:03.340
像 reducer的这一块

01:00:03.340 --> 01:00:04.380
你可以用不能导出

01:00:04.380 --> 01:00:05.820
也可以用那个普通导出

01:00:05.820 --> 01:00:06.860
都可以

01:00:06.860 --> 01:00:07.020
好

01:00:07.020 --> 01:00:09.660
我们这里导出 reducers

01:00:09.740 --> 01:00:11.740
那么这里handle actions

01:00:11.740 --> 01:00:13.100
就是创建一个 reducer

01:00:13.100 --> 01:00:13.900
首先是

01:00:13.900 --> 01:00:15.260
我们这里干一个映射

01:00:15.260 --> 01:00:16.700
然后给它一个默认值

01:00:16.700 --> 01:00:17.340
默认值

01:00:17.340 --> 01:00:19.580
我们看一下之前的默认值咋写的

01:00:19.580 --> 01:00:20.780
之前的默认值是这个

01:00:20.780 --> 01:00:21.180
对吧

01:00:21.180 --> 01:00:21.500
好

01:00:21.500 --> 01:00:21.820
OK

01:00:21.820 --> 01:00:22.780
弄过来

01:00:22.780 --> 01:00:23.260
弄过来

01:00:25.100 --> 01:00:25.340
好

01:00:25.340 --> 01:00:25.740
这里

01:00:25.740 --> 01:00:26.380
默认值

01:00:26.380 --> 01:00:27.180
默认值是这个

01:00:28.220 --> 01:00:28.460
好

01:00:28.460 --> 01:00:29.020
然后呢

01:00:29.020 --> 01:00:30.140
这里映射

01:00:30.140 --> 01:00:31.740
只有一个change

01:00:31.740 --> 01:00:32.300
对吧

01:00:32.300 --> 01:00:33.820
我们用aggin创建还输

01:00:34.620 --> 01:00:36.940
就避免了重复去使用这个

01:00:36.940 --> 01:00:37.740
名称

01:00:37.740 --> 01:00:38.620
类型

01:00:38.620 --> 01:00:39.180
好

01:00:39.180 --> 01:00:39.820
change

01:00:39.820 --> 01:00:41.180
然后呢给它一个什么

01:00:41.180 --> 01:00:42.380
state

01:00:42.380 --> 01:00:43.100
aggin

01:00:43.100 --> 01:00:43.660
对吧

01:00:43.660 --> 01:00:44.940
我们这里或者直接在这里

01:00:44.940 --> 01:00:45.660
结构都可以

01:00:45.660 --> 01:00:46.540
payload

01:00:46.540 --> 01:00:47.740
直接在结构

01:00:47.740 --> 01:00:48.060
好

01:00:48.060 --> 01:00:49.180
反回一个啥呢

01:00:49.180 --> 01:00:51.100
反回是不是反回一个新的对象

01:00:51.100 --> 01:00:51.740
对吧

01:00:51.740 --> 01:00:53.340
看一下之前的反回了

01:00:53.340 --> 01:00:54.380
反回一个新的对象

01:00:54.380 --> 01:00:56.060
把之前的状态展开

01:00:56.060 --> 01:00:56.620
然后呢

01:00:57.500 --> 01:00:58.780
把payload展开

01:00:58.780 --> 01:00:59.100
对吧

01:00:59.100 --> 01:00:59.740
覆盖掉

01:00:59.740 --> 01:00:59.980
好

01:00:59.980 --> 01:01:00.860
那这就来呗

01:01:00.860 --> 01:01:01.180
state

01:01:02.220 --> 01:01:02.780
展开

01:01:02.780 --> 01:01:03.260
然后呢

01:01:04.300 --> 01:01:04.780
state

01:01:04.780 --> 01:01:05.580
展开

01:01:05.580 --> 01:01:05.980
然后呢

01:01:06.540 --> 01:01:07.340
payload展开

01:01:07.980 --> 01:01:08.620
没了

01:01:09.500 --> 01:01:10.540
是不是一下就写完了

01:01:10.540 --> 01:01:10.940
对吧

01:01:10.940 --> 01:01:12.060
这样子一下就写完了

01:01:12.860 --> 01:01:13.740
这就是

01:01:13.740 --> 01:01:14.060
呃

01:01:14.060 --> 01:01:15.100
用这个这个cool

01:01:15.100 --> 01:01:17.100
它可以减变我们的书写

01:01:17.100 --> 01:01:17.340
好

01:01:17.340 --> 01:01:18.460
咱们再来看这个

01:01:18.460 --> 01:01:19.660
src result

01:01:19.660 --> 01:01:21.340
再看这个src result

01:01:21.340 --> 01:01:21.580
好

01:01:21.580 --> 01:01:22.700
这里边也一样的啊

01:01:22.700 --> 01:01:23.260
也一样的

01:01:23.260 --> 01:01:24.140
那下面啊

01:01:24.140 --> 01:01:25.180
这边也一样的

01:01:25.180 --> 01:01:26.540
那这个这句话复制过了

01:01:28.300 --> 01:01:28.540
好

01:01:28.540 --> 01:01:29.100
复制过了啊

01:01:30.220 --> 01:01:31.340
一样的啊

01:01:31.340 --> 01:01:31.820
create

01:01:31.820 --> 01:01:32.380
x形式

01:01:32.380 --> 01:01:33.500
handlex形式

01:01:33.500 --> 01:01:33.660
好

01:01:33.660 --> 01:01:34.060
所以啊

01:01:34.060 --> 01:01:35.260
这里首先我们导出啊

01:01:35.260 --> 01:01:35.820
导出的话

01:01:35.820 --> 01:01:37.180
直接在这里结构

01:01:37.900 --> 01:01:38.860
啊等于什么呢

01:01:38.860 --> 01:01:39.420
create

01:01:39.420 --> 01:01:39.980
x形式

01:01:41.500 --> 01:01:41.740
好

01:01:41.740 --> 01:01:43.260
有哪些x形类型呢

01:01:43.260 --> 01:01:44.380
一个是

01:01:44.380 --> 01:01:44.700
set

01:01:46.620 --> 01:01:47.340
student

01:01:50.540 --> 01:01:50.940
and

01:01:51.580 --> 01:01:52.060
是吧

01:01:53.180 --> 01:01:53.660
total

01:01:53.660 --> 01:01:53.980
啊

01:01:54.620 --> 01:01:54.700
好

01:01:54.700 --> 01:01:55.740
这是一个x形类型

01:01:56.300 --> 01:01:56.380
好

01:01:56.380 --> 01:01:58.060
那么他也有没有payload呢

01:01:58.060 --> 01:01:58.940
我们看一下啊

01:01:58.940 --> 01:01:59.980
这个地方是不是有两

01:01:59.980 --> 01:02:00.940
有两个参数啊

01:02:00.940 --> 01:02:01.580
一个是数组

01:02:01.580 --> 01:02:02.780
一个是总数啊

01:02:02.780 --> 01:02:04.060
来设置学生的

01:02:05.020 --> 01:02:05.500
数据

01:02:05.500 --> 01:02:06.780
以及学生的总数

01:02:06.860 --> 01:02:08.380
ok 我这里写两个参数

01:02:08.380 --> 01:02:09.260
有几个参数

01:02:09.260 --> 01:02:10.460
有写几个参数

01:02:10.460 --> 01:02:10.780
好

01:02:10.780 --> 01:02:12.220
返回的payload是啥呢

01:02:12.220 --> 01:02:13.260
返回的payload

01:02:13.260 --> 01:02:14.220
payload是不是个对象

01:02:14.220 --> 01:02:14.780
data是

01:02:14.780 --> 01:02:15.340
对吧

01:02:15.340 --> 01:02:15.580
哎

01:02:15.580 --> 01:02:16.860
我们这里直接复制过了

01:02:16.860 --> 01:02:17.180
啊

01:02:17.820 --> 01:02:18.540
返回这个对象

01:02:19.420 --> 01:02:19.660
啊

01:02:19.660 --> 01:02:21.020
这是一个x形创建

01:02:21.020 --> 01:02:21.740
还说写好了

01:02:21.740 --> 01:02:22.620
那么他对应的

01:02:22.620 --> 01:02:23.340
是不是set

01:02:24.060 --> 01:02:25.100
set students

01:02:25.740 --> 01:02:26.060
and

01:02:26.540 --> 01:02:26.940
total

01:02:26.940 --> 01:02:27.260
对吧

01:02:27.260 --> 01:02:28.300
小图分辨法嘛

01:02:29.020 --> 01:02:29.500
好

01:02:29.500 --> 01:02:30.780
接下来继续啊

01:02:30.780 --> 01:02:31.660
set

01:02:31.660 --> 01:02:32.140
set

01:02:33.020 --> 01:02:33.340
is

01:02:34.060 --> 01:02:34.540
loading

01:02:35.500 --> 01:02:36.220
好

01:02:36.300 --> 01:02:36.700
然后呢

01:02:36.700 --> 01:02:38.300
设置是否正在加载

01:02:39.100 --> 01:02:39.340
啊

01:02:39.340 --> 01:02:40.700
设置是否正在加载

01:02:40.700 --> 01:02:40.860
好

01:02:40.860 --> 01:02:41.740
那么这里传入一个

01:02:41.740 --> 01:02:42.220
isloading

01:02:42.220 --> 01:02:42.860
我给你返回一个

01:02:42.860 --> 01:02:43.820
isloading就行了

01:02:43.820 --> 01:02:45.180
payload就是你传入了

01:02:45.740 --> 01:02:46.380
isloading

01:02:47.340 --> 01:02:47.580
好

01:02:47.580 --> 01:02:47.980
然后呢

01:02:47.980 --> 01:02:48.780
再来一个啥

01:02:48.780 --> 01:02:49.660
还有一个啥

01:02:49.660 --> 01:02:51.100
还有一个就是fetched student

01:02:51.100 --> 01:02:51.980
这是有副作用的

01:02:51.980 --> 01:02:52.220
对吧

01:02:52.220 --> 01:02:53.100
是sacra在处理的

01:02:53.100 --> 01:02:54.060
管他是谁处理的

01:02:54.060 --> 01:02:55.260
反正我这里不就是

01:02:55.260 --> 01:02:56.700
一个新创建函数嘛

01:02:56.700 --> 01:02:58.220
只是我不用在自己手中去

01:02:58.220 --> 01:02:59.340
书写了而已

01:02:59.340 --> 01:02:59.500
好

01:02:59.500 --> 01:03:00.460
fetched student

01:03:00.460 --> 01:03:00.700
啊

01:03:00.700 --> 01:03:01.900
这里边有没有参数呢

01:03:01.900 --> 01:03:02.860
我看呀

01:03:02.860 --> 01:03:03.580
没有参数

01:03:03.580 --> 01:03:03.900
对吧

01:03:03.900 --> 01:03:04.460
没有参数

01:03:04.540 --> 01:03:04.860
OK

01:03:04.860 --> 01:03:05.740
那就那

01:03:06.700 --> 01:03:07.740
就是没有payload

01:03:07.740 --> 01:03:08.940
就写完了啊

01:03:08.940 --> 01:03:09.820
一个新创建函数

01:03:09.820 --> 01:03:11.260
你看以前写了这么多行带嘛

01:03:11.260 --> 01:03:12.780
现在不到10行带嘛

01:03:12.780 --> 01:03:13.340
就写完了

01:03:14.380 --> 01:03:15.420
就这里还换了一行

01:03:15.420 --> 01:03:16.300
对吧

01:03:16.300 --> 01:03:16.460
好

01:03:16.460 --> 01:03:17.420
那么接下来导出

01:03:17.420 --> 01:03:17.900
reducer

01:03:18.700 --> 01:03:19.180
default

01:03:20.140 --> 01:03:20.860
reducer

01:03:20.860 --> 01:03:21.500
reducer的话

01:03:21.500 --> 01:03:22.860
我们就用handle

01:03:22.860 --> 01:03:23.420
exit

01:03:24.140 --> 01:03:24.940
处理exit

01:03:24.940 --> 01:03:25.740
好内行

01:03:25.740 --> 01:03:26.620
这里认设内行

01:03:26.620 --> 01:03:26.940
然后呢

01:03:26.940 --> 01:03:28.060
默认值

01:03:28.060 --> 01:03:28.780
默认值

01:03:28.780 --> 01:03:29.420
看一下这边

01:03:29.420 --> 01:03:30.060
以前大写的

01:03:30.700 --> 01:03:31.180
result

01:03:32.300 --> 01:03:33.180
默认值的话

01:03:33.180 --> 01:03:34.140
就这个

01:03:34.220 --> 01:03:34.780
复制过来吧

01:03:35.980 --> 01:03:36.540
默认值

01:03:37.260 --> 01:03:38.060
这是默认值

01:03:38.940 --> 01:03:39.100
好

01:03:39.100 --> 01:03:39.580
然后呢

01:03:39.580 --> 01:03:41.260
这里是insert action的

01:03:41.260 --> 01:03:41.660
对吧

01:03:41.660 --> 01:03:42.860
我们要处理哪些

01:03:42.860 --> 01:03:44.140
哪些action type

01:03:44.140 --> 01:03:45.340
我们首先第一个啊

01:03:45.340 --> 01:03:46.620
我们自己直接用这个

01:03:46.620 --> 01:03:48.060
这里还没有写完

01:03:48.060 --> 01:03:49.660
set is loading

01:03:50.460 --> 01:03:50.620
好

01:03:50.620 --> 01:03:52.620
还有就是说fetched student

01:03:53.580 --> 01:03:53.900
好

01:03:53.900 --> 01:03:54.460
然后来吧

01:03:55.660 --> 01:03:56.860
首先第一个啊

01:03:56.860 --> 01:03:57.260
这一个

01:03:58.060 --> 01:03:59.180
这个一个新创建函数

01:03:59.180 --> 01:04:01.180
把它作为属性的建民

01:04:01.180 --> 01:04:01.580
然后呢

01:04:01.580 --> 01:04:03.820
这里处理函数里边写长呢

01:04:03.900 --> 01:04:04.780
我看一下

01:04:04.780 --> 01:04:06.540
set students and load total

01:04:07.980 --> 01:04:08.860
set students

01:04:09.740 --> 01:04:10.380
and total

01:04:10.380 --> 01:04:11.980
就不就返回这个玩意吗

01:04:11.980 --> 01:04:12.780
对不对

01:04:12.780 --> 01:04:14.060
啊你给我一个payload

01:04:14.060 --> 01:04:14.780
啊你给我一个

01:04:14.780 --> 01:04:16.060
就是set和

01:04:16.060 --> 01:04:16.940
和那个payload的

01:04:16.940 --> 01:04:17.260
就行

01:04:17.260 --> 01:04:18.060
一个新就行了

01:04:18.780 --> 01:04:19.340
好来吧

01:04:19.900 --> 01:04:21.740
好这里给给我一个set

01:04:21.740 --> 01:04:22.140
然后呢

01:04:22.140 --> 01:04:22.940
一个新就结构

01:04:22.940 --> 01:04:23.900
结构出来payload

01:04:24.460 --> 01:04:25.340
好返回什么

01:04:25.340 --> 01:04:26.300
返回一个对象

01:04:26.300 --> 01:04:27.180
啊直接返回一个对象

01:04:27.180 --> 01:04:27.900
把它扣起来啊

01:04:28.940 --> 01:04:29.820
这里重新来啊

01:04:30.940 --> 01:04:32.380
这返回对象

01:04:32.380 --> 01:04:33.260
没玩了吗

01:04:33.340 --> 01:04:34.060
对不对

01:04:34.060 --> 01:04:35.180
好然后下一个啊

01:04:35.180 --> 01:04:36.860
下一个是set is loading

01:04:37.740 --> 01:04:38.460
好这一块

01:04:39.740 --> 01:04:40.460
好这一块呢

01:04:40.460 --> 01:04:41.660
我们看一下这边

01:04:41.660 --> 01:04:43.100
就直接copy过来就完事了

01:04:43.100 --> 01:04:43.660
is loading

01:04:44.460 --> 01:04:45.100
等于payload

01:04:45.980 --> 01:04:47.180
啊就没事

01:04:47.180 --> 01:04:48.140
就完了对吧

01:04:48.140 --> 01:04:49.260
好这里复制过来啊

01:04:50.780 --> 01:04:51.900
好这边也是一样

01:04:51.900 --> 01:04:52.300
set

01:04:53.180 --> 01:04:53.660
payload

01:04:57.360 --> 01:04:58.800
好然后呢这里复制过来

01:04:59.920 --> 01:05:01.120
啊没了啊没了

01:05:02.160 --> 01:05:03.120
还有啥呢

01:05:03.120 --> 01:05:03.920
那个fetched student

01:05:03.920 --> 01:05:04.720
从我们不用管了

01:05:04.720 --> 01:05:05.520
在reducer里边

01:05:05.520 --> 01:05:06.240
是不用管这个的

01:05:06.240 --> 01:05:07.520
这个是sacred来处理

01:05:07.520 --> 01:05:08.400
我们不用去管它

01:05:09.200 --> 01:05:10.720
就没了啊就没了

01:05:10.720 --> 01:05:11.200
还有啥啊

01:05:11.920 --> 01:05:12.560
没了没了

01:05:13.600 --> 01:05:15.280
好然后呢这一块就结束了

01:05:15.280 --> 01:05:15.840
对吧

01:05:15.840 --> 01:05:16.720
那就写完了

01:05:16.720 --> 01:05:17.440
我们就写完了

01:05:17.440 --> 01:05:18.800
就改造完成了

01:05:18.800 --> 01:05:19.280
好然后呢

01:05:19.280 --> 01:05:20.160
接下来是合并

01:05:20.160 --> 01:05:20.960
合并reducer

01:05:20.960 --> 01:05:22.720
那合并是不是一样的

01:05:22.720 --> 01:05:24.320
合并没有任何区别

01:05:24.320 --> 01:05:25.440
我们这里直接复制过来

01:05:25.440 --> 01:05:26.160
不就合并了吗

01:05:26.720 --> 01:05:28.080
那直接复制过来就合并了

01:05:29.200 --> 01:05:30.240
合并没有

01:05:30.240 --> 01:05:31.520
合并reducer没有任何区别

01:05:31.520 --> 01:05:32.800
因为它得到了reducer

01:05:32.800 --> 01:05:33.920
就我们之前写的reducer

01:05:33.920 --> 01:05:34.800
是一样的啊

01:05:34.880 --> 01:05:36.000
是一样的

01:05:36.000 --> 01:05:37.440
好然后呢我们这里

01:05:37.440 --> 01:05:39.200
然后总合并对吧

01:05:39.200 --> 01:05:40.320
总合并复制过来

01:05:41.120 --> 01:05:41.680
暂停过来

01:05:43.440 --> 01:05:43.680
对吧

01:05:43.680 --> 01:05:45.120
创建一个唯一的reducer

01:05:45.120 --> 01:05:45.360
对吧

01:05:45.360 --> 01:05:46.720
但是这里合并也是一样

01:05:47.360 --> 01:05:48.640
好那么其实这个文件夹

01:05:48.640 --> 01:05:49.360
我们就没

01:05:49.360 --> 01:05:49.760
没

01:05:49.760 --> 01:05:50.960
不用了对吧

01:05:50.960 --> 01:05:51.360
失效

01:05:51.360 --> 01:05:52.480
我们再写个失效

01:05:55.600 --> 01:05:56.400
还改不过来啊

01:05:57.440 --> 01:05:58.400
还改不过来了

01:06:01.040 --> 01:06:01.520
看一下啊

01:06:02.560 --> 01:06:03.040
失效

01:06:04.000 --> 01:06:04.960
哎呦

01:06:06.080 --> 01:06:07.440
我要把这个停止啊

01:06:07.440 --> 01:06:08.160
停止等一下

01:06:10.540 --> 01:06:11.260
多少钱啊

01:06:11.260 --> 01:06:11.900
怎么把停止

01:06:11.900 --> 01:06:12.300
OK

01:06:12.300 --> 01:06:13.100
改怪了啊

01:06:13.100 --> 01:06:13.900
改怪了

01:06:13.900 --> 01:06:14.220
好

01:06:14.220 --> 01:06:14.620
然后呢

01:06:14.620 --> 01:06:15.260
我们再一样

01:06:15.260 --> 01:06:15.660
start

01:06:16.380 --> 01:06:16.700
启动

01:06:17.420 --> 01:06:17.660
好

01:06:17.660 --> 01:06:19.020
启动的时候肯定要爆错

01:06:19.020 --> 01:06:20.860
因为之前能隐用路径变了

01:06:20.860 --> 01:06:22.300
首先是这个跟路径

01:06:22.300 --> 01:06:24.220
跟路径里面隐用这个reducer

01:06:25.340 --> 01:06:25.980
我看一下啊

01:06:25.980 --> 01:06:27.740
在哪里隐用的是reducer

01:06:29.900 --> 01:06:31.500
store里边index里边

01:06:31.500 --> 01:06:32.860
它要隐用一个reducer

01:06:33.660 --> 01:06:34.380
在上面啊

01:06:34.940 --> 01:06:35.820
现在不在这了

01:06:35.820 --> 01:06:36.060
对吧

01:06:36.060 --> 01:06:36.940
reducer在哪里

01:06:36.940 --> 01:06:37.500
在哪里

01:06:37.500 --> 01:06:37.980
在哪里

01:06:37.980 --> 01:06:39.020
在ex里边

01:06:39.020 --> 01:06:39.340
对吧

01:06:39.340 --> 01:06:40.060
我们不需要

01:06:40.060 --> 01:06:40.540
不需要学习

01:06:40.540 --> 01:06:41.500
跟reducer文件夹了

01:06:41.500 --> 01:06:41.980
不需要了

01:06:41.980 --> 01:06:43.100
ex里边全部搞定

01:06:43.740 --> 01:06:44.620
那么现在就

01:06:44.620 --> 01:06:46.860
现在写法上是不是要简洁多了

01:06:46.860 --> 01:06:47.180
对不对

01:06:48.060 --> 01:06:49.740
其他的没啥了吧

01:06:49.740 --> 01:06:50.140
保存

01:06:50.940 --> 01:06:51.740
还有

01:06:51.740 --> 01:06:52.220
还有什么

01:06:53.020 --> 01:06:53.100
哦

01:06:53.100 --> 01:06:53.660
还有一些

01:06:54.540 --> 01:06:54.700
哎

01:06:54.700 --> 01:06:55.020
什么

01:06:56.060 --> 01:06:56.940
type is not

01:06:58.220 --> 01:06:59.500
is not exported

01:07:00.300 --> 01:07:00.700
但是什么

01:07:00.700 --> 01:07:01.420
saga这里

01:07:02.300 --> 01:07:03.020
saga这一块

01:07:03.980 --> 01:07:04.860
我看一下啊

01:07:04.860 --> 01:07:05.980
saga这一块哪个文件

01:07:06.700 --> 01:07:07.500
counter task

01:07:09.340 --> 01:07:10.460
counter task

01:07:11.580 --> 01:07:12.780
这里倒入这个玩意干嘛

01:07:16.060 --> 01:07:17.420
这个take every

01:07:17.980 --> 01:07:20.220
take every这里边要用到这个类型啊

01:07:20.940 --> 01:07:21.740
take every

01:07:21.740 --> 01:07:24.220
就saga里边它要用到这个具体的类型名称

01:07:24.940 --> 01:07:26.220
具体的类型名称

01:07:26.220 --> 01:07:27.740
这个其实也简单

01:07:27.740 --> 01:07:28.940
也简单

01:07:28.940 --> 01:07:30.460
因为我们那个ex

01:07:30.460 --> 01:07:31.260
来自于

01:07:31.340 --> 01:07:33.020
这是个aggin创建函数对吧

01:07:33.580 --> 01:07:33.740
哎

01:07:34.860 --> 01:07:36.540
这是个aggin创建函数对吧

01:07:37.180 --> 01:07:37.980
increase

01:07:37.980 --> 01:07:38.460
以及什么

01:07:39.740 --> 01:07:41.180
async decrease对吧

01:07:41.180 --> 01:07:42.300
这是aggin创建函数

01:07:42.300 --> 01:07:43.260
这是我们导出的

01:07:43.260 --> 01:07:44.380
我们但是这是函数

01:07:44.380 --> 01:07:45.580
它不是名称对不对

01:07:45.580 --> 01:07:46.380
它不是名称

01:07:46.380 --> 01:07:47.740
它是一个函数而已

01:07:47.740 --> 01:07:48.860
那么我们这里呢只需要

01:07:48.860 --> 01:07:50.060
掉入这个函数的是吧

01:07:50.060 --> 01:07:51.020
tooth string对吧

01:07:51.020 --> 01:07:51.660
我们之前说过

01:07:51.660 --> 01:07:53.260
这个函数的tooth string过后呢

01:07:53.260 --> 01:07:54.460
它就是它的名称了

01:07:54.460 --> 01:07:56.220
啊就是它的类型名称

01:07:56.220 --> 01:07:58.140
啊这里async decrease

01:07:58.780 --> 01:07:59.740
tooth string

01:07:59.740 --> 01:08:00.700
这是它的类型名称

01:08:01.260 --> 01:08:02.700
好然后呢这里个函数名字呢

01:08:02.700 --> 01:08:04.780
我们得稍微改一下啊

01:08:04.780 --> 01:08:06.140
三个加个后追嘛

01:08:06.140 --> 01:08:06.860
加个后追

01:08:09.760 --> 01:08:11.600
好那么这里就写好了对吧

01:08:11.600 --> 01:08:13.440
还有肯定还有一些地方对吧

01:08:13.440 --> 01:08:14.000
student

01:08:15.120 --> 01:08:16.080
student index

01:08:17.200 --> 01:08:17.760
是哪里

01:08:18.800 --> 01:08:19.360
aggin

01:08:19.360 --> 01:08:20.560
这是什么

01:08:20.560 --> 01:08:21.760
search result

01:08:21.760 --> 01:08:23.840
does not contain default import

01:08:24.480 --> 01:08:25.120
哦它说这

01:08:26.560 --> 01:08:27.760
student这里

01:08:27.760 --> 01:08:28.640
search result

01:08:28.640 --> 01:08:29.760
它没有默认导出

01:08:29.760 --> 01:08:30.960
这不默认导出了吗

01:08:31.920 --> 01:08:32.880
哦没保存啊

01:08:32.960 --> 01:08:33.520
没保存

01:08:34.080 --> 01:08:35.600
然后还有student task

01:08:37.040 --> 01:08:37.760
student task

01:08:37.760 --> 01:08:38.800
啊这里也是一样

01:08:38.800 --> 01:08:40.160
啊因为我们这里要使用

01:08:40.160 --> 01:08:41.520
aggin nation对吧

01:08:42.400 --> 01:08:43.440
呃我们看一下啊

01:08:44.480 --> 01:08:46.640
我们要使用fetch student的类型

01:08:46.640 --> 01:08:47.520
fetch student

01:08:48.080 --> 01:08:50.720
好这里呢我们使用这个函数的tooth string

01:08:52.560 --> 01:08:53.120
tooth string

01:08:54.160 --> 01:08:55.760
好然后呢这里fetch student

01:08:55.760 --> 01:08:56.240
三个

01:08:58.500 --> 01:08:59.300
好保存啊

01:09:00.740 --> 01:09:02.180
这什么还有什么

01:09:02.180 --> 01:09:04.340
default status for reducer handling

01:09:04.340 --> 01:09:06.340
increase should be defend

01:09:06.340 --> 01:09:08.340
它说increase这里

01:09:09.140 --> 01:09:10.980
啊我们这里找一找

01:09:10.980 --> 01:09:11.620
哪个问题

01:09:12.660 --> 01:09:13.620
action counter

01:09:14.660 --> 01:09:15.940
contour里边index

01:09:16.420 --> 01:09:18.420
它说哦这里没给没给那个默认字

01:09:18.420 --> 01:09:20.180
啊没给默认字它报错了

01:09:20.180 --> 01:09:21.380
啊默认字为0吗

01:09:22.260 --> 01:09:22.500
好

01:09:23.060 --> 01:09:23.620
保存

01:09:23.620 --> 01:09:24.660
没了啊没了

01:09:24.660 --> 01:09:25.460
稍微做一下改造

01:09:26.100 --> 01:09:26.740
没了啊

01:09:26.740 --> 01:09:28.180
那么现在我们调用increase

01:09:29.060 --> 01:09:29.940
没问题

01:09:29.940 --> 01:09:30.260
你看

01:09:31.300 --> 01:09:32.340
deep increase

01:09:32.340 --> 01:09:32.740
加单

01:09:33.620 --> 01:09:34.340
没问题对吧

01:09:34.340 --> 01:09:34.820
adde

01:09:34.820 --> 01:09:36.180
我们之前做过的adde

01:09:36.180 --> 01:09:37.140
没问题

01:09:37.140 --> 01:09:38.500
然后呢decrease

01:09:38.500 --> 01:09:38.980
对吧

01:09:38.980 --> 01:09:39.460
没问题

01:09:40.340 --> 01:09:40.820
看没

01:09:40.820 --> 01:09:41.860
then our fetch student

01:09:42.660 --> 01:09:43.460
fetch student

01:09:44.820 --> 01:09:45.380
啊

01:09:45.380 --> 01:09:46.020
说没问题

01:09:46.900 --> 01:09:48.980
哦我们当时用的是moke对吧

01:09:48.980 --> 01:09:50.180
当时用的是moke

01:09:50.180 --> 01:09:50.820
我们看一下

01:09:51.620 --> 01:09:52.820
三个student task

01:09:54.180 --> 01:09:56.260
这里我们用的是moke对吧

01:09:56.260 --> 01:09:58.020
moke它这里有可能会出错

01:09:58.020 --> 01:09:59.060
啊有可能会出错

01:09:59.060 --> 01:09:59.860
之前咱们做的

01:10:00.500 --> 01:10:01.780
好总之呢我们就把它

01:10:01.860 --> 01:10:03.780
用一种更加简洁的形式来写了

01:10:03.780 --> 01:10:06.500
我们之后呢就不需要这个reducer这个文件夹了

01:10:06.500 --> 01:10:07.700
啊直接indexing就够了

01:10:07.700 --> 01:10:09.540
它在这里面利用这几个函数

01:10:09.540 --> 01:10:11.700
啊就可以非常轻松的创建出来

01:10:12.820 --> 01:10:16.020
好这就是关于这个indexing这里

01:10:16.020 --> 01:10:18.420
啊indexing以及reducer的创建

01:10:18.420 --> 01:10:20.900
通过这个库呢可以进行下转化

01:10:20.900 --> 01:10:23.540
这个库呢其实还给你提供了第三个函数啊

01:10:24.660 --> 01:10:26.340
我来说一下吧简单说一下就行了

01:10:26.340 --> 01:10:28.820
第三个函数呢叫做combined indexing

01:10:28.820 --> 01:10:29.620
它是来说什么呢

01:10:29.620 --> 01:10:31.140
它是来用于解决这个问题的

01:10:32.100 --> 01:10:34.980
啊它是

01:10:34.980 --> 01:10:38.500
它是配合crease

01:10:38.500 --> 01:10:45.540
crease actions和combined actions

01:10:45.540 --> 01:10:48.820
啊配合这两个函数的

01:10:48.820 --> 01:10:56.100
啊两个函数用于处理多个action type

01:10:56.100 --> 01:10:57.460
就是有多个操作类型

01:10:57.940 --> 01:11:03.300
对应同一个reducer处理函数

01:11:03.300 --> 01:11:04.900
就是说我们之前写的呢

01:11:04.900 --> 01:11:06.020
比方说我们这里

01:11:06.020 --> 01:11:08.180
之前写的呢就是一个action

01:11:08.180 --> 01:11:09.700
它对应一个处理函数对吧

01:11:09.700 --> 01:11:11.220
一个action对应一个处理函数

01:11:11.780 --> 01:11:13.860
那么有没有可能多个action

01:11:13.860 --> 01:11:15.860
它对应同一个处理函数呢

01:11:15.860 --> 01:11:17.140
它是有可能的

01:11:17.140 --> 01:11:18.900
比方说啊我给大家举个例子

01:11:18.900 --> 01:11:20.900
比方说increase这一块

01:11:20.900 --> 01:11:21.620
那么这一块呢

01:11:21.620 --> 01:11:23.220
我刚刚当时呢反回的是一个now

01:11:24.180 --> 01:11:27.940
我们之前设置的是now对吧

01:11:27.940 --> 01:11:29.140
然后呢这里

01:11:29.140 --> 01:11:30.020
因为它now的话

01:11:30.020 --> 01:11:31.300
它就没有payload对吧

01:11:31.300 --> 01:11:32.020
没有payload的

01:11:32.020 --> 01:11:34.180
ok那我这里可以给它一个payload

01:11:34.180 --> 01:11:35.860
看着啊我这样子给

01:11:35.860 --> 01:11:37.060
我给它一个payload的

01:11:37.060 --> 01:11:38.500
好payload了就是什么了

01:11:38.500 --> 01:11:41.140
就是increase就是加1嘛对吧

01:11:41.140 --> 01:11:42.180
好那么这里呢

01:11:42.820 --> 01:11:44.740
payload了是不是负1对吧

01:11:44.740 --> 01:11:46.020
负1increase呢

01:11:46.020 --> 01:11:48.340
就dcrease不是就减1吗对不对

01:11:48.340 --> 01:11:50.260
好那么这样现在这两个action

01:11:50.260 --> 01:11:52.260
它的它的payload啊跟那个

01:11:52.340 --> 01:11:53.860
它的格式跟那个add格式

01:11:53.860 --> 01:11:55.140
是不是一样的了

01:11:55.140 --> 01:11:56.340
是不是一样的了

01:11:56.340 --> 01:11:58.020
也就是说我们这increase这里

01:11:58.020 --> 01:11:58.580
要干嘛

01:11:58.580 --> 01:12:00.500
是不是加上payload的

01:12:00.500 --> 01:12:01.540
对不对

01:12:01.540 --> 01:12:02.980
加上这里的payload的

01:12:04.100 --> 01:12:06.340
看着啊payload

01:12:07.780 --> 01:12:08.660
解构出来

01:12:08.660 --> 01:12:10.900
好那么这个dcrease是不是也是一样的

01:12:10.900 --> 01:12:12.020
也是加上payload的

01:12:12.900 --> 01:12:14.500
你看那么这add

01:12:14.500 --> 01:12:16.020
它也是加上payload的对吧

01:12:16.020 --> 01:12:17.300
只不过add的payload呢

01:12:17.300 --> 01:12:19.060
是通过参数传进来的

01:12:19.060 --> 01:12:20.340
那么increase和dcrease呢

01:12:20.340 --> 01:12:22.020
它是不需要用户传参数

01:12:22.100 --> 01:12:24.340
那么直接给你返回1和负1对吧

01:12:24.340 --> 01:12:24.980
那么这里呢

01:12:25.860 --> 01:12:27.620
都是但是最终的reducer的格式

01:12:27.620 --> 01:12:28.980
处理格式是不是一样的

01:12:28.980 --> 01:12:29.300
对吧

01:12:29.300 --> 01:12:30.580
完全一样的

01:12:30.580 --> 01:12:31.460
所以说这个时候呢

01:12:31.460 --> 01:12:32.660
为了避免重复代码

01:12:32.660 --> 01:12:34.180
那么你这个东西就可以用上了

01:12:34.180 --> 01:12:35.140
什么什么玩意

01:12:35.140 --> 01:12:35.860
来跑了去了

01:12:38.260 --> 01:12:39.620
把这个啊起来关闭了

01:12:39.620 --> 01:12:40.580
开云了

01:12:40.580 --> 01:12:41.300
嗯

01:12:41.300 --> 01:12:42.580
这个东西就可以用上了

01:12:42.580 --> 01:12:43.620
那么这个东西有什么

01:12:43.620 --> 01:12:44.020
combine

01:12:44.660 --> 01:12:45.620
啊这里写错了

01:12:45.620 --> 01:12:46.580
handle挨个形式

01:12:47.700 --> 01:12:49.620
好这个combine redo挨个形式

01:12:49.620 --> 01:12:50.820
它用来做什么呢

01:12:50.820 --> 01:12:52.820
它是用来把这些东西啊

01:12:52.820 --> 01:12:56.260
把我们的action创建函数进行合并的

01:12:56.260 --> 01:12:58.100
合并我们的action创建函数

01:12:59.380 --> 01:13:00.820
合并之后呢

01:13:00.820 --> 01:13:01.780
合并之后呢

01:13:01.780 --> 01:13:03.700
会得到一个新的创建函数

01:13:03.700 --> 01:13:04.580
那个新的创建函数

01:13:04.580 --> 01:13:05.860
它就对应多个action

01:13:05.860 --> 01:13:07.300
只要能够匹配上任何一个

01:13:07.300 --> 01:13:08.900
那么它就会运行对应的reducer

01:13:08.900 --> 01:13:10.420
就是我们这里可以这样写

01:13:10.420 --> 01:13:10.820
看着吧

01:13:11.780 --> 01:13:13.140
combine x形式

01:13:13.700 --> 01:13:14.340
好这里呢

01:13:14.340 --> 01:13:17.380
我们使用combine x形式

01:13:17.380 --> 01:13:18.580
好这里

01:13:18.580 --> 01:13:19.220
把什么传进去

01:13:19.220 --> 01:13:20.420
我们要合并拿几个

01:13:20.500 --> 01:13:21.300
increase

01:13:21.300 --> 01:13:21.780
对吧

01:13:21.780 --> 01:13:22.420
还有什么

01:13:22.420 --> 01:13:23.060
decrease

01:13:23.940 --> 01:13:24.740
decrease

01:13:24.740 --> 01:13:25.540
还有什么

01:13:25.540 --> 01:13:26.020
add

01:13:26.020 --> 01:13:26.260
对吧

01:13:26.260 --> 01:13:27.380
就合并这三个

01:13:27.380 --> 01:13:28.420
合并这三个过后呢

01:13:28.420 --> 01:13:29.860
会产生一个新的函数

01:13:30.820 --> 01:13:32.340
还会产生一个新的函数

01:13:32.340 --> 01:13:34.020
那么我们把这个新的函数放进去

01:13:34.020 --> 01:13:35.060
它就既能匹配

01:13:35.940 --> 01:13:38.020
既能匹配那个就是increase

01:13:38.020 --> 01:13:38.900
又能匹配decrease

01:13:38.900 --> 01:13:39.780
又能匹配add

01:13:39.780 --> 01:13:40.820
就这么简单

01:13:40.820 --> 01:13:41.460
原来的意思吧

01:13:42.500 --> 01:13:43.620
就就完了

01:13:43.620 --> 01:13:45.460
它就是要出这个事情的

01:13:45.460 --> 01:13:47.140
当然我们也可以把这个表达式

01:13:47.940 --> 01:13:50.180
作为属性名传过去

01:13:50.260 --> 01:13:51.940
这就是你们以后呢

01:13:51.940 --> 01:13:53.060
如果说看到这个裤的话

01:13:53.060 --> 01:13:54.180
经常的一种用法

01:13:54.180 --> 01:13:55.700
把直接把这个表达式传进去

01:13:56.580 --> 01:13:57.060
也可以

01:13:58.020 --> 01:13:59.380
那么现在保存看一下吧

01:14:00.660 --> 01:14:02.100
这里呢我们使用increase

01:14:03.460 --> 01:14:04.020
没问题

01:14:04.740 --> 01:14:05.540
然后decrease

01:14:07.060 --> 01:14:07.700
decrease

01:14:09.060 --> 01:14:09.700
没问题

01:14:09.700 --> 01:14:10.100
还有没有

01:14:10.740 --> 01:14:11.460
配头的负仪

01:14:11.460 --> 01:14:12.260
配头的仪

01:14:12.260 --> 01:14:13.140
然后ad

01:14:14.660 --> 01:14:15.060
对吧

01:14:15.060 --> 01:14:15.620
所以没问题

01:14:16.740 --> 01:14:17.300
就完成了

01:14:18.580 --> 01:14:19.460
那么就是这个裤

01:14:19.540 --> 01:14:20.740
这个裤很简单

01:14:20.740 --> 01:14:22.340
甚至呢大家可以都可以想象到

01:14:22.340 --> 01:14:23.700
它里面代码怎么写的

01:14:23.700 --> 01:14:24.980
非常非常简单的一个裤

01:14:24.980 --> 01:14:26.020
它主要是为了处理

01:14:26.020 --> 01:14:27.860
axing和reducer输写

01:14:27.860 --> 01:14:29.140
反而说的这么一个问题

01:14:29.940 --> 01:14:30.420
好没了

01:14:31.060 --> 01:14:32.820
下单呢大家还是去练一下

01:14:32.820 --> 01:14:33.540
虽然很简单

01:14:33.540 --> 01:14:34.500
但是还是要去练一下

01:14:35.060 --> 01:14:36.180
好这里可以到这里

