WEBVTT

00:00.620 --> 00:04.900
经过一段时间的内心的掙扎

00:05.900 --> 00:08.940
想想想去呢 咱们既然讲完了路由

00:08.940 --> 00:12.060
路由本身本也不复杂对吧

00:12.060 --> 00:16.460
所以咱们呢就直接把一个路由的原码给它分析了跟它讲了啊

00:16.460 --> 00:21.020
嗯 还有一个原因呢就是路由的原码它其实也不复杂啊

00:21.020 --> 00:22.780
也挺容易理解的

00:22.780 --> 00:25.180
所以说咱们就直接来吧啊 直接来

00:25.180 --> 00:29.980
那么这一个章节呢 咱们讲Rex Rotor它的原码啊

00:30.140 --> 00:32.060
但是呢 我这里首先要声明

00:32.060 --> 00:35.820
尽管说它的原码呢 整体上并不复杂

00:35.820 --> 00:41.020
但是呢 有些细节处理还是蛮绕的啊 还是蛮绕的

00:41.020 --> 00:43.180
并且呢 我们这个整个章节呢

00:43.180 --> 00:49.420
你要说把它原码啊 细致入微的全部的来一遍啊

00:49.420 --> 00:52.380
不留任何死角的来一遍

00:52.380 --> 00:53.740
对不起 时间不够

00:53.740 --> 00:55.580
这个东西太恐怖了啊

00:55.580 --> 00:58.540
你毕竟那个玩意儿是一个产品级的

00:58.700 --> 01:00.700
它的核心原理很简单

01:00.700 --> 01:02.220
它并不没有那么复杂

01:02.220 --> 01:04.620
但是它的细节非常非常多

01:04.620 --> 01:07.500
所以说呢 你要说把它全部走一遍吧

01:07.500 --> 01:10.780
不太可能啊 也没有任何一个教程去这样去做

01:10.780 --> 01:12.140
所以说呢 我们这里呢

01:12.140 --> 01:16.060
就是尽量讲它的最核心的东西

01:16.060 --> 01:18.700
那么讲的过程是怎么来讲啊

01:18.700 --> 01:21.180
凡是以后呢 我讲原码的话

01:21.180 --> 01:22.700
我都用这种方式来讲

01:22.700 --> 01:25.100
因为你要学习一个东西的原码的时候

01:25.100 --> 01:27.020
首先要清楚它的目的是什么

01:27.020 --> 01:29.020
你为什么要去学习它的原码

01:29.020 --> 01:30.460
你能用不就完了吗

01:30.460 --> 01:32.460
你干嘛要去学它的原码呢

01:32.460 --> 01:34.220
学习它的原码呢

01:34.220 --> 01:37.900
当然 说的

01:37.900 --> 01:39.820
就是说眼光比较短浅一点的话

01:39.820 --> 01:41.500
那么就是应付面试

01:41.500 --> 01:44.940
面试的时候它有可能会问到你一些比较深的知识啊

01:44.940 --> 01:46.700
可能会涉及到原码层面

01:46.700 --> 01:47.820
这是一个方面

01:47.820 --> 01:49.420
更加重要的

01:49.420 --> 01:53.580
是要你能够学会它的那种解决问题的思路

01:53.580 --> 01:55.180
因为这些产品级的东西

01:55.180 --> 01:57.980
过了市场的千锤百炼

01:57.980 --> 02:00.780
它里面有很多值得我们学习的地方

02:00.780 --> 02:05.180
这才是学习原码最重要的意义

02:05.180 --> 02:07.100
所以说我们学习原码的过程呢

02:07.100 --> 02:11.100
其实就是来去做开发一个问题

02:11.100 --> 02:13.020
一个问题解决的过程

02:13.020 --> 02:14.620
所以我们学原码不会像

02:14.620 --> 02:15.740
可能某些教程里面

02:15.740 --> 02:16.940
他们学原码是这样子

02:16.940 --> 02:18.700
我可以看它的原码是怎么写的

02:18.700 --> 02:20.460
然后来分析一下这个原码

02:20.460 --> 02:21.180
它怎么回事

02:21.180 --> 02:23.020
它这样的运行会得到什么样的结果

02:23.020 --> 02:24.540
我不会这样做

02:24.540 --> 02:25.820
而我会怎么做呢

02:25.820 --> 02:28.620
我会从一个就假设这个世界上

02:28.620 --> 02:31.020
比方说我们学习的是React Router这个原码

02:31.020 --> 02:32.380
那么我就假设这个世界上

02:32.380 --> 02:34.140
并没有React Router存在

02:34.140 --> 02:35.420
根本就不存在这个东西

02:35.420 --> 02:37.420
我们需要自己写一个

02:37.420 --> 02:39.180
那么我们会去怎么写

02:39.180 --> 02:40.140
在写的过程中

02:40.140 --> 02:41.580
我们会遇到哪些问题

02:41.580 --> 02:42.780
那么怎么来解决

02:42.780 --> 02:43.500
在解决过程中

02:43.500 --> 02:45.900
我们可以参照它的解决办法

02:45.900 --> 02:48.860
看一下它这样子解决的思路

02:48.860 --> 02:52.780
是不是更好的能够解决问题

02:52.860 --> 02:56.060
我们会包着这么一个过程来进行学习

02:56.060 --> 02:57.260
明白我这个意思吗

02:57.260 --> 02:59.740
因为我们这个章节学原码

02:59.740 --> 03:02.540
这是我第一次给大家讲原码

03:02.540 --> 03:04.860
和以前有同学没有听过

03:04.860 --> 03:06.060
因为我先下的张课了

03:06.060 --> 03:07.500
我估计很多人没听过

03:07.500 --> 03:09.420
我讲原码的时候

03:09.420 --> 03:10.140
并没有这样

03:10.140 --> 03:13.100
就是可能跟有某些教授不太一样

03:13.100 --> 03:15.820
我是本则手写的原则

03:15.820 --> 03:16.780
就是没有它

03:16.780 --> 03:17.500
它不存在

03:17.500 --> 03:18.700
我们自己去写一个

03:18.700 --> 03:20.620
看一下能遇到什么样的问题

03:20.620 --> 03:22.060
然后该怎么去解决

03:22.060 --> 03:25.180
我们是包着这样的一个思路去学习

03:25.180 --> 03:25.900
好吧

03:25.900 --> 03:26.380
OK

03:26.380 --> 03:29.100
咱们第一节可开始

03:29.100 --> 03:30.220
这个章节要注意听

03:30.220 --> 03:31.180
这个章节东西

03:31.180 --> 03:33.740
虽然说从原码层面来讲

03:33.740 --> 03:35.260
相对于react原码的话

03:35.260 --> 03:36.460
那么这个东西原码来说

03:36.460 --> 03:38.300
稍微简单了多

03:38.300 --> 03:39.660
但是也得认真听

03:39.660 --> 03:41.260
因为它毕竟是原码

03:41.260 --> 03:43.020
毕竟还是有深度的

03:43.020 --> 03:43.180
好

03:43.180 --> 03:44.700
首先第一节可能我们讲什么了

03:44.700 --> 03:47.980
我们还不去具体的讲react rotor

03:47.980 --> 03:49.220
它的原码是怎么回事

03:49.220 --> 03:50.820
怎么去实现它

03:50.820 --> 03:54.420
咱们首先介绍一个第三方库

03:54.420 --> 03:56.820
第三方库

03:56.820 --> 03:57.860
这个第三方库

03:57.860 --> 04:00.740
就是名字叫做pass to rig expression

04:00.740 --> 04:01.420
就是这个库

04:01.420 --> 04:03.220
之前给大家提到过

04:03.220 --> 04:04.980
这个库用来解决什么问题呢

04:04.980 --> 04:09.300
它是用于将一个路径

04:09.300 --> 04:11.580
叫做制服创政则

04:11.580 --> 04:15.060
有的时候也把它叫做路径政则

04:15.060 --> 04:19.260
有的时候也叫做pass rig

04:19.260 --> 04:20.420
有的时候expression

04:20.460 --> 04:22.140
有的时候也把它叫做这个

04:22.140 --> 04:23.260
那么这个东西是啥呢

04:23.260 --> 04:25.740
其实就是我们react rotor里边写的那个

04:25.740 --> 04:26.660
就是我们还记得吗

04:26.660 --> 04:27.620
这样子写的

04:27.620 --> 04:29.700
rotor这个组件里边一个pass

04:29.700 --> 04:32.100
就是pass里边写的这个东西

04:32.100 --> 04:33.300
就是这个东西

04:33.300 --> 04:34.820
这个东西它不是一个简单的制服创

04:34.820 --> 04:35.780
它里边可能会包含

04:35.780 --> 04:37.420
比方说包含这个网

04:37.420 --> 04:37.900
对吧

04:37.900 --> 04:38.900
它会包含这个网

04:38.900 --> 04:39.780
会包含这个网

04:39.780 --> 04:40.460
对不对

04:40.460 --> 04:42.180
它会包含这些东西

04:42.180 --> 04:43.900
那么我们这里的pass

04:43.900 --> 04:46.460
指的就是这个东西

04:46.460 --> 04:48.780
pass to什么转换

04:48.860 --> 04:49.580
转换是什么

04:49.580 --> 04:53.500
it's a regular expression

04:53.500 --> 04:54.140
什么意思

04:54.140 --> 04:55.380
政则表达式

04:55.380 --> 04:58.540
把这个玩意儿转换成一个政则表达式

04:58.540 --> 05:00.860
这个库就专门用来做这个事情

05:00.860 --> 05:02.020
实际上react rotor

05:02.020 --> 05:03.460
它也用到了这个库

05:03.460 --> 05:04.500
为什么要用这个库

05:04.500 --> 05:06.380
你看这个玩意儿

05:06.380 --> 05:08.140
它本身不能匹配

05:08.140 --> 05:09.780
它本身不能直接去匹配制服创

05:09.780 --> 05:10.940
它本身就是个制服创

05:10.940 --> 05:12.380
它打去匹配制服创

05:12.380 --> 05:13.260
对不对

05:13.260 --> 05:16.100
所以说这个库它的作用是

05:16.100 --> 05:18.500
把它先转换成政则表达式

05:18.500 --> 05:22.340
然后用这个政则表达式去匹配页面地址

05:22.340 --> 05:23.540
去匹配页面地址

05:23.540 --> 05:25.380
它是起这么一个作用

05:25.380 --> 05:26.860
就起这么一个作用

05:26.860 --> 05:28.220
所以说我们这一课呢

05:28.220 --> 05:30.100
为了后边学习起来方便一些

05:30.100 --> 05:33.620
我们这一课先来做这么一个东西

05:33.620 --> 05:35.380
先来做这么一个东西

05:35.380 --> 05:35.700
好

05:35.700 --> 05:38.580
接下来我们首先呢

05:38.580 --> 05:39.580
找到它的

05:39.580 --> 05:40.900
把机器打开来看

05:40.900 --> 05:41.620
我把它找到的

05:41.620 --> 05:44.500
找到那个就是它的NPM介绍

05:44.500 --> 05:45.740
它的页面

05:45.740 --> 05:46.780
看一下这个库

05:46.820 --> 05:51.260
它的名字叫做PASS2RIGGER EXPRESSION

05:51.260 --> 05:53.100
就这个库

05:53.100 --> 05:55.180
这个库里面我们首先把它安装起来吧

05:55.180 --> 05:56.300
首先把它安装起来

05:56.300 --> 05:59.020
在这里打开

05:59.020 --> 06:05.980
12ADD PASS2RIGGER EXPRESSION

06:05.980 --> 06:08.500
安装它

06:08.500 --> 06:09.460
安装吧

06:09.460 --> 06:10.740
不管它

06:10.740 --> 06:12.700
那么这个库安装好了过后

06:12.700 --> 06:13.940
怎么用呢

06:13.940 --> 06:14.580
我们在这里

06:14.580 --> 06:15.980
SRC文件夹

06:16.020 --> 06:16.660
下面呢

06:16.660 --> 06:19.580
我们去建立一个指文件夹

06:19.580 --> 06:20.820
给它取个名字呢

06:20.820 --> 06:23.180
就叫做叫做啥呢

06:23.180 --> 06:26.260
叫做那个React

06:26.260 --> 06:29.060
React

06:29.060 --> 06:30.180
这样换个名字嘛

06:30.180 --> 06:31.940
就小写ReactRotor

06:31.940 --> 06:33.540
这是我们自己写的

06:33.540 --> 06:34.380
写这么一个文件夹

06:34.380 --> 06:35.380
ReactRotor

06:35.380 --> 06:37.300
那么这里边肯定有很多很多的模块

06:37.300 --> 06:37.940
对吧

06:37.940 --> 06:38.100
好

06:38.100 --> 06:38.580
那么这里呢

06:38.580 --> 06:40.740
我们首先地界课写这么一个模块

06:40.740 --> 06:41.940
PASS2RIGGER EXPRESSION

06:41.940 --> 06:42.980
那么肯定它

06:42.980 --> 06:44.220
光直接用它的话

06:44.220 --> 06:45.300
能不能用它的能用

06:45.340 --> 06:46.260
只不过呢

06:46.260 --> 06:47.700
用起来的还是有一些不方便

06:47.700 --> 06:49.220
我们可能要封装一下

06:49.220 --> 06:51.060
可能要稍微的封装一下

06:51.060 --> 06:51.700
封装之后呢

06:51.700 --> 06:53.020
还可能不是最终的成果

06:53.020 --> 06:54.100
我们之后还可能

06:54.100 --> 06:55.620
可能会稍微的做一些改动

06:55.620 --> 06:56.260
没关系

06:56.260 --> 06:58.460
我们先对它做一个大致的封装

06:58.460 --> 07:01.420
因为我们要自己做一个路由的话

07:01.420 --> 07:02.900
肯定跑不了

07:02.900 --> 07:03.940
要去匹配路径

07:03.940 --> 07:04.540
对吧

07:04.540 --> 07:06.340
然后匹配路径也要去选哪个组件

07:06.340 --> 07:06.700
对不对

07:06.700 --> 07:07.980
肯定要设计到一个过程

07:07.980 --> 07:09.580
就是匹配路径的过程

07:09.580 --> 07:10.580
那么这边过程

07:10.580 --> 07:13.180
我们需要使用到这个组件

07:13.180 --> 07:14.620
我们来宣传学习这个组件

07:14.700 --> 07:16.180
应该安装好了

07:16.180 --> 07:16.780
OK

07:16.780 --> 07:17.260
安装好了

07:17.260 --> 07:18.420
怎么把运行出来

07:21.140 --> 07:23.020
那么这个东西怎么用呢

07:23.020 --> 07:24.420
这里我们新建

07:24.420 --> 07:26.220
我们或者说就在这

07:27.220 --> 07:29.100
就在这新建的文件

07:29.100 --> 07:30.460
就是匹配

07:30.460 --> 07:31.540
匹配

07:31.540 --> 07:36.060
给它取一个名字叫做March

07:36.060 --> 07:37.700
叫JS

07:37.700 --> 07:39.260
来做匹配的

07:39.260 --> 07:41.100
或者叫做PathMarch

07:42.100 --> 07:43.340
PathMarch

07:43.340 --> 07:44.220
叫JS

07:44.260 --> 07:46.100
这个JS主要是来做匹配的

07:46.100 --> 07:47.420
咱们在index

07:47.420 --> 07:48.260
为了测试

07:48.260 --> 07:50.020
这就和存测试

07:50.020 --> 07:51.580
存测试直接导入

07:51.580 --> 07:52.940
rexrotor

07:52.940 --> 07:55.020
下面的PathMarch

07:55.020 --> 07:57.020
我们就做存测试

07:57.020 --> 07:58.260
我们在控制台里面观察

07:58.260 --> 08:00.060
它的打印结果就完事了

08:00.940 --> 08:01.660
那么这里边

08:02.860 --> 08:04.500
我们来首先用一下这个组件

08:04.500 --> 08:06.540
就是这个第三方库

08:06.540 --> 08:07.860
第三方库它告诉你

08:07.860 --> 08:09.060
你可以使用require

08:09.060 --> 08:09.820
require是什么

08:09.820 --> 08:12.300
是commonJS模块标准里面的

08:12.300 --> 08:13.580
导出模块的方式

08:13.620 --> 08:15.700
但是我们这里肯定不用commonJS

08:15.700 --> 08:16.300
我们用的是什么

08:16.300 --> 08:16.860
es6

08:16.860 --> 08:17.220
对吧

08:17.220 --> 08:19.660
那么我们同样可以用es6的方式导入

08:19.660 --> 08:20.260
导入什么

08:20.260 --> 08:22.460
导入这个库

08:22.460 --> 08:24.380
那么可以把它导入到一个边量里面

08:24.380 --> 08:24.900
OK

08:24.900 --> 08:26.220
我们就写个Path2

08:26.220 --> 08:27.180
req

08:27.180 --> 08:28.340
它怎么写的

08:28.340 --> 08:29.060
这个名字随便

08:29.060 --> 08:30.820
这是边量名字随便的

08:30.820 --> 08:31.100
好

08:31.100 --> 08:32.300
第二写个

08:32.300 --> 08:34.380
它就是Path2 Expression

08:34.380 --> 08:35.380
导入进来

08:36.140 --> 08:36.380
好

08:36.380 --> 08:37.660
导入了这个库之后

08:38.940 --> 08:39.780
那么这个库

08:39.780 --> 08:41.380
它这个东西是啥呢

08:41.380 --> 08:43.100
你看一下它这些文档说的

08:43.140 --> 08:45.100
这个文档你看它告诉你是啥呢

08:46.100 --> 08:46.860
你看一下

08:46.860 --> 08:47.820
告诉你是啥

08:48.700 --> 08:50.700
是不是就是一个那个啥

08:50.700 --> 08:52.940
是不是就是一个就是函数

08:52.940 --> 08:53.700
对不对

08:53.700 --> 08:54.580
函数

08:54.580 --> 08:55.740
它就是一个函数

08:55.740 --> 08:56.820
没有什么特别的

08:57.660 --> 08:58.940
那么这个函数里边

08:58.940 --> 09:00.620
你可以传三个蚕树

09:00.620 --> 09:02.620
你可以传三个蚕树

09:02.620 --> 09:03.540
那么它分别说了

09:03.540 --> 09:04.820
这三个蚕树是啥

09:04.820 --> 09:07.180
第一个蚕树就是路径规则

09:08.500 --> 09:10.620
它传一个路径规则进去

09:10.620 --> 09:11.020
好

09:11.020 --> 09:12.100
第二蚕树我们现在不知道

09:12.140 --> 09:13.380
第三个蚕树的是一些选项

09:14.060 --> 09:16.420
那么第二个蚕树它后面加了一个问号

09:16.420 --> 09:17.820
以后你反而是看文档

09:17.820 --> 09:19.220
后面加了一个问号就表示

09:19.220 --> 09:20.620
这个蚕树是可传

09:20.620 --> 09:21.420
可不传的

09:21.420 --> 09:23.180
那么咱们先传一个

09:23.180 --> 09:24.460
先传一个

09:24.460 --> 09:27.780
Path2 Expression

09:27.780 --> 09:29.460
这里面我们传上一个

09:29.460 --> 09:30.100
这不错

09:30.100 --> 09:31.300
比方说咱们传这个

09:32.300 --> 09:33.220
news

09:33.820 --> 09:35.220
帽号id

09:35.220 --> 09:36.300
帽号配级

09:36.300 --> 09:38.260
比方就传这个玩意儿

09:38.260 --> 09:40.380
我们看一下它返回的到底是个啥

09:41.380 --> 09:42.380
返回了

09:42.380 --> 09:43.140
result

09:44.140 --> 09:44.900
看一下

09:44.900 --> 09:46.940
它返回的到底是一个啥呢

09:46.940 --> 09:47.860
保存

09:47.860 --> 09:48.460
你看一下

09:50.180 --> 09:51.180
看一下这个返回的是啥

09:51.180 --> 09:52.460
你觉得你看这个是啥

09:53.020 --> 09:53.780
返回的是啥

09:54.700 --> 09:55.980
是不是一个政责表达式

09:57.580 --> 10:00.060
它就可以把我们的路径就完了

10:00.060 --> 10:01.420
你说这个有多复杂

10:01.420 --> 10:02.260
就完了

10:02.260 --> 10:04.140
它就可以把我们这个路径规则

10:04.620 --> 10:06.860
转换成为一个政责表达式

10:06.860 --> 10:07.740
当然你有兴趣的话

10:07.740 --> 10:09.420
你可以去读一下这个政责表达式

10:09.620 --> 10:10.820
比方说我们读一下吧

10:10.820 --> 10:11.380
这个有多难

10:11.380 --> 10:12.700
这个有多难了

10:12.700 --> 10:13.820
以鞋杠开头

10:13.820 --> 10:14.420
对吧

10:15.420 --> 10:16.460
不是一个人看的

10:16.460 --> 10:18.300
这个政责表达式是一个鞋杠

10:18.300 --> 10:19.100
是一个鞋杠

10:19.820 --> 10:20.700
政责表达式双鞋杠

10:20.700 --> 10:21.100
对吧

10:22.420 --> 10:23.380
然后呢

10:23.380 --> 10:24.620
知不知道开始对吧

10:24.620 --> 10:25.660
这个政责表达式是这样子

10:25.660 --> 10:26.220
然后呢

10:26.220 --> 10:28.220
这个转衣服出现一个鞋杠

10:28.220 --> 10:29.820
出现一个鞋杠转衣服

10:29.820 --> 10:31.020
然后呢出现一个单

10:31.020 --> 10:32.260
单子叫news

10:32.260 --> 10:33.380
单子叫news

10:33.380 --> 10:35.060
然后呢又出现一个鞋杠

10:35.060 --> 10:36.140
然后呢这里一个分组

10:36.140 --> 10:37.540
看到没一个政责分组

10:37.540 --> 10:39.020
分组里边是啥呢

10:39.020 --> 10:40.100
里边来看一下吧

10:40.100 --> 10:41.100
里边一个中货号

10:41.100 --> 10:42.700
中货号里边写的一个尖尖

10:42.700 --> 10:43.980
然后一个转衣

10:43.980 --> 10:45.900
啊这转衣全是转衣啊

10:45.900 --> 10:46.900
普通表示一个普

10:46.900 --> 10:48.500
这个东西表示一个普通的制服

10:48.500 --> 10:49.580
一个左鞋杠

10:49.580 --> 10:51.580
表示一个普通的左鞋杠制服

10:51.580 --> 10:54.420
只要不是左鞋杠制服就行

10:54.420 --> 10:55.580
不管你这里边是啥

10:55.580 --> 10:58.020
只要你不是左鞋杠就行

10:58.020 --> 10:59.740
那么这样的制服出现多少次呢

10:59.740 --> 11:01.100
一次或多次

11:01.100 --> 11:02.860
看没一次或多次

11:02.860 --> 11:04.140
后面加个温柔是什么意思

11:04.140 --> 11:06.100
表示非贪难匹配

11:06.100 --> 11:07.380
表示非贪难匹配

11:07.420 --> 11:09.020
当然非贪难匹配可以提高效率嘛

11:09.020 --> 11:09.740
对不对

11:09.740 --> 11:10.780
好这里呢我们

11:10.780 --> 11:13.100
又然后又遇到一个鞋杠

11:13.100 --> 11:14.420
又遇到一个又鞋杠

11:14.420 --> 11:15.700
然后呢

11:15.700 --> 11:18.620
然后又是不是又是一个分组

11:18.620 --> 11:19.820
分组里边是又又来了

11:19.820 --> 11:20.420
对不对

11:20.420 --> 11:21.060
又来了

11:21.060 --> 11:22.580
这一部分就相当于是啥了

11:22.580 --> 11:24.180
这一部分是不是相当于这

11:24.180 --> 11:24.420
对吧

11:24.420 --> 11:25.740
配级这里

11:25.740 --> 11:27.340
前面这一部分相当于啥了

11:27.340 --> 11:29.180
前面这一部分是不是相当于这个

11:29.180 --> 11:29.740
id 这里

11:29.740 --> 11:30.980
咱们把副字过来看一下吧

11:32.780 --> 11:33.460
副字过来看一下

11:37.980 --> 11:39.900
你看这个这个地方

11:39.940 --> 11:40.500
这个地方

11:41.740 --> 11:43.020
是不是就相当于是

11:43.020 --> 11:43.900
这一部分对吧

11:43.900 --> 11:44.700
这一部分生成出来

11:44.700 --> 11:46.220
这个真的真的表达是

11:46.220 --> 11:47.420
这一部分的生成出来

11:47.420 --> 11:48.260
这个真的表达是

11:48.260 --> 11:50.220
有些人可能可以自行看一下

11:50.220 --> 11:51.380
那么后边是啥呢

11:51.380 --> 11:52.780
后边说他是这样说的啊

11:52.780 --> 11:54.780
后边啊

11:54.780 --> 11:55.940
温号帽号什么意思

11:55.940 --> 11:57.700
表示不补货分组

11:57.700 --> 11:58.900
就是这里虽然用了扩号

11:58.900 --> 12:01.220
但是扩号的仅仅是做一个整体来匹配

12:01.220 --> 12:03.220
并不是说要把它变成分组

12:03.220 --> 12:04.420
温号帽号就这个意思

12:04.420 --> 12:05.900
表示这个你不是一个分组

12:05.900 --> 12:07.500
纯粹是做一个整体

12:07.500 --> 12:08.300
好那么这个温号

12:08.300 --> 12:09.780
温号你可以直接忽略

12:09.780 --> 12:11.860
然后这里就是匹配一个鞋杠

12:11.860 --> 12:17.740
一个鞋杠出现0次或1次

12:17.740 --> 12:18.900
也就是最后呢

12:18.900 --> 12:19.940
也就是他能匹配啥呢

12:19.940 --> 12:21.660
这个后面就是支付车结束了

12:21.660 --> 12:24.420
然后还表示表示不匹分大小鞋

12:24.420 --> 12:25.220
对吧

12:25.220 --> 12:26.260
好咱们来匹配一下吧

12:26.260 --> 12:28.020
把他匹配一下

12:28.020 --> 12:28.780
第二什么呢

12:28.820 --> 12:29.420
第二

12:29.420 --> 12:31.740
astute

12:31.740 --> 12:32.780
我来匹配啥

12:32.780 --> 12:36.540
匹配news1235

12:36.540 --> 12:37.180
看一下吧

12:37.180 --> 12:37.540
保存

12:39.580 --> 12:40.020
看一下

12:41.540 --> 12:43.180
那么现在匹配出来的结果就是

12:43.180 --> 12:44.580
我们整个字不出来匹配出来的

12:44.580 --> 12:46.420
这一部分就整个字不出来匹配了

12:46.420 --> 12:47.220
然后分组

12:47.220 --> 12:48.500
第一个分组是123

12:48.500 --> 12:49.500
第二个分组是5

12:49.500 --> 12:50.180
看到没

12:50.180 --> 12:51.780
第一个分组是123

12:52.900 --> 12:53.820
第二个分组是5

12:53.820 --> 12:55.060
是不是就匹配出来了

12:55.060 --> 12:55.380
对不对

12:55.380 --> 12:56.180
就这么简单

12:56.180 --> 12:57.420
就这么简单

12:57.420 --> 12:58.260
你看这个意思吧

12:58.300 --> 12:59.300
他就给你返回一个证则

12:59.300 --> 13:00.740
他还其他没他

13:00.740 --> 13:02.340
他当然还做了一会儿

13:02.340 --> 13:04.060
还发现他还有一些功能

13:04.060 --> 13:05.620
但是最核心的功能就是给你转换了

13:05.620 --> 13:06.140
证则

13:06.140 --> 13:07.620
然后让你去匹配支付车

13:07.620 --> 13:08.180
那么这个地方

13:08.180 --> 13:09.580
你是不是可以放一面路径

13:09.580 --> 13:10.180
对吧

13:10.180 --> 13:11.700
你把一面路径拿进来

13:11.700 --> 13:15.340
那他他就会帮你来完成这个匹配

13:15.340 --> 13:15.580
对吧

13:15.580 --> 13:16.660
就这么简单

13:16.660 --> 13:17.740
就这么简单

13:17.740 --> 13:18.220
没了

13:18.220 --> 13:19.420
没了

13:19.420 --> 13:19.580
好

13:19.580 --> 13:20.420
这就是这一块

13:20.420 --> 13:21.300
对不对

13:21.300 --> 13:23.140
非常简单

13:23.140 --> 13:23.500
好

13:23.500 --> 13:24.860
那么接下来我们再来写一个

13:24.860 --> 13:27.300
不要说我刚才还得解释这个玩意

13:27.300 --> 13:27.700
对吧

13:27.700 --> 13:28.180
解释这个玩意

13:28.220 --> 13:30.180
然后比方说我们后边写个鞋杠

13:30.180 --> 13:31.500
这个东西怎么能匹配了

13:31.500 --> 13:33.100
你看是不是还是能匹配

13:33.100 --> 13:34.020
为什么还是能匹配

13:34.020 --> 13:35.860
因为这里他出现了

13:35.860 --> 13:37.180
就这个卧尾

13:37.180 --> 13:38.220
他可以有鞋杠

13:38.220 --> 13:39.260
可以没有鞋杠

13:39.260 --> 13:39.500
对吧

13:39.500 --> 13:40.220
可以有鞋杠

13:40.220 --> 13:41.100
可以有没有鞋杠

13:41.100 --> 13:41.940
就这么个意思

13:43.140 --> 13:45.180
那以前我们还不是还这样子写吗

13:45.180 --> 13:47.100
配几里面是不是还可以把它加个扩号

13:47.100 --> 13:48.260
来编成一个证则

13:48.260 --> 13:49.660
对不对

13:49.660 --> 13:50.860
扩号里面变成一个证则

13:50.860 --> 13:52.460
表示

13:52.460 --> 13:54.020
鞋杠帝

13:54.020 --> 13:55.140
鞋杠帝

13:56.140 --> 13:58.020
加号表示他必须是数字

13:58.020 --> 13:59.780
必须是一个数字

13:59.780 --> 14:01.380
必须是一个或多个数字

14:01.380 --> 14:02.220
那么这种情况下

14:02.220 --> 14:04.060
他会变成什么样的证则表拉式呢

14:04.060 --> 14:04.580
我们来看一下

14:06.140 --> 14:07.740
这样这种情况下会变成一个什么样

14:07.740 --> 14:09.620
当然要证则先两个点

14:09.620 --> 14:10.500
一个鞋杠

14:10.500 --> 14:12.580
普通证则里面两个鞋杠

14:12.580 --> 14:13.780
表示一个鞋杠

14:13.780 --> 14:15.220
好来看一下吧

14:15.220 --> 14:17.380
好你看一下现在的证则表拉式

14:17.380 --> 14:18.500
现在的证则表拉式

14:18.500 --> 14:19.100
看一下

14:19.980 --> 14:21.700
好那么这个部分

14:21.700 --> 14:23.340
这个部分本来一开始是这个玩意

14:23.340 --> 14:23.860
对吧

14:23.940 --> 14:24.820
那么现在他变

14:24.820 --> 14:26.780
他替换掉替换成了这个

14:26.780 --> 14:27.860
看没

14:27.860 --> 14:28.940
鞋杠帝

14:28.940 --> 14:30.260
多个对不对

14:30.260 --> 14:31.500
是不是替换成了这个

14:31.500 --> 14:32.180
对吧

14:32.180 --> 14:33.020
就这么个意思

14:33.020 --> 14:33.980
还有啥呢

14:33.980 --> 14:34.500
还有啥呢

14:34.500 --> 14:35.340
就这么个意思

14:35.340 --> 14:38.100
他就是把这个字不出来变成证则

14:38.100 --> 14:38.620
就完了

14:40.540 --> 14:41.620
好这是第一个证则

14:41.620 --> 14:42.940
就是一个pass证则

14:44.540 --> 14:46.580
然后咱们来看他第二个证则

14:46.580 --> 14:47.700
这个证则是一个数组

14:49.620 --> 14:52.460
这个数组是用来接收

14:52.460 --> 14:56.860
它从这个pass里面接收到了关键字

14:58.020 --> 15:00.060
它是用来接收这个

15:00.060 --> 15:02.980
它是用来就是保存

15:02.980 --> 15:04.660
从这个路径里面接收到的关键字

15:04.660 --> 15:05.340
什么叫关键字

15:05.340 --> 15:06.820
这个玩意就是关键字

15:06.820 --> 15:08.300
帽号后面这个玩意就是关键字

15:09.620 --> 15:10.660
所以说第二个呢

15:10.660 --> 15:12.380
我可以给他传一个数组

15:12.380 --> 15:14.820
比方说咱们来给他传一个kiss

15:14.820 --> 15:15.860
是一个数组

15:15.860 --> 15:19.170
好咱们把这个数组放进去

15:19.170 --> 15:19.970
好放进去

15:19.970 --> 15:20.530
好这里呢

15:20.530 --> 15:22.410
我们不但打印出这个result

15:22.450 --> 15:23.410
还打印出这个数组

15:23.410 --> 15:26.770
看一下保存

15:26.770 --> 15:27.770
一会发现

15:27.770 --> 15:28.690
这个数组里边

15:28.690 --> 15:30.090
调用这个函数过后是不是有值的

15:30.090 --> 15:31.530
它会往这个数组里边扔东西

15:31.530 --> 15:32.290
扔什么东西呢

15:32.290 --> 15:33.770
扔了两个对象

15:33.770 --> 15:34.770
这两个对象里边

15:34.770 --> 15:35.530
然后有些东西呢

15:35.530 --> 15:37.610
我们根本就用不到

15:37.610 --> 15:38.930
比方说

15:38.930 --> 15:40.090
但是我们又会用到这个

15:40.090 --> 15:41.170
Name

15:41.170 --> 15:42.690
你看是不是kiss找出来了

15:42.690 --> 15:44.530
从路径里面说把kiss找出来了

15:44.530 --> 15:45.090
对吧

15:45.090 --> 15:46.450
配几是不是找出来了

15:46.450 --> 15:46.970
对吧

15:46.970 --> 15:49.010
把这个路径里面的关键字就找出来了

15:50.210 --> 15:51.050
那么每个关键字的

15:51.050 --> 15:52.130
它有一些对应的信息

15:52.130 --> 15:53.130
比方说这个Option

15:53.170 --> 15:54.610
表示适逢可选的

15:54.610 --> 15:56.010
适逢是可选的关键字

15:56.010 --> 15:56.530
比方说

15:56.530 --> 15:57.650
我们把这个配几

15:57.650 --> 16:00.890
给大家加上一个问号

16:00.890 --> 16:02.010
表示可选的

16:02.010 --> 16:04.090
保存你看一下

16:04.090 --> 16:05.210
这个配几是不是Option

16:05.210 --> 16:06.050
表示q

16:06.050 --> 16:06.330
对吧

16:06.330 --> 16:08.250
Option的意思就是表示可选的

16:08.250 --> 16:09.610
可以传可以不传

16:09.610 --> 16:11.370
那么Option表示q

16:11.370 --> 16:12.210
那么这里呢

16:12.210 --> 16:13.490
Option表示force

16:13.490 --> 16:14.250
那么对应了振折

16:14.250 --> 16:16.210
你看振折也发生了变化

16:16.210 --> 16:17.650
振折也发生了变化

16:17.650 --> 16:18.450
看一下振折

16:18.450 --> 16:20.890
振折其实你有兴趣自己去读

16:20.890 --> 16:21.290
你看

16:21.290 --> 16:22.370
它把整个扩起来

16:22.410 --> 16:23.290
加了一个问号

16:23.290 --> 16:23.610
对吧

16:23.610 --> 16:24.250
加了一个问号

16:25.410 --> 16:26.410
看没

16:26.410 --> 16:27.410
没问题吧

16:27.410 --> 16:28.770
它把整个扩起来加了一个问号

16:30.330 --> 16:31.930
所以说

16:31.930 --> 16:33.330
就这一块

16:34.730 --> 16:36.330
它其实就是返回一个振折表

16:36.330 --> 16:38.850
然后q是它里面能够保存

16:38.850 --> 16:40.450
对我们来说最重要的

16:40.450 --> 16:41.250
就是能够保存

16:41.250 --> 16:42.250
它能够保存啥

16:42.250 --> 16:44.570
它能够保存那个就是关键字

16:46.050 --> 16:47.810
然后我们再看第三个参数

16:47.810 --> 16:50.210
第三个参数是Options

16:50.210 --> 16:51.330
这个参数

16:51.370 --> 16:52.490
这个参数里面

16:52.490 --> 16:54.210
我们可以看到它有什么

16:54.210 --> 16:55.930
有Sensitivity

16:55.930 --> 16:57.050
表示什么意思

16:57.050 --> 17:00.410
表示是否大小写敏感

17:00.410 --> 17:01.610
默认是不敏感的

17:01.610 --> 17:02.890
不区分大小写

17:02.890 --> 17:04.290
不区分大小写

17:04.290 --> 17:05.330
你可以把它视为q

17:05.330 --> 17:07.450
那么就变成大小写敏感

17:07.450 --> 17:09.010
那么这个程表示的是

17:09.010 --> 17:11.610
是否匹配

17:11.610 --> 17:13.370
那个什么

17:13.370 --> 17:14.090
那个斜缸

17:14.090 --> 17:15.850
就是莫为那个斜缸

17:15.850 --> 17:19.980
严格匹配莫为的斜缸

17:19.980 --> 17:21.900
就是你匹配的时候

17:21.900 --> 17:24.020
不是说比方说一个路径

17:24.020 --> 17:25.620
一个路径

17:25.620 --> 17:27.180
news1

17:27.180 --> 17:27.900
5

17:27.900 --> 17:29.780
比方说我们这里的莫为没有写斜缸

17:29.780 --> 17:30.060
对吧

17:30.060 --> 17:30.820
没有写斜缸

17:30.820 --> 17:31.180
OK

17:31.180 --> 17:32.700
那么它匹配这个能匹配

17:32.700 --> 17:34.540
如果是在严格模式下面

17:34.540 --> 17:36.700
它匹配这个就不能匹配了

17:36.700 --> 17:38.420
非严格模式下面是可以匹配这个

17:38.420 --> 17:41.380
但是严格模式下面是不能匹配这个的

17:41.380 --> 17:42.020
就这么个意思

17:42.020 --> 17:42.780
Streakers

17:42.780 --> 17:43.340
那你看一下

17:43.340 --> 17:44.700
这个我还要跟我们之前学的

17:44.700 --> 17:45.740
RedRot里面

17:45.740 --> 17:47.500
那个Sensitivity和Streakers

17:47.500 --> 17:48.860
是不对应的意思

17:48.860 --> 17:50.460
就这么个意思

17:50.460 --> 17:51.980
其他我们都用不到

17:51.980 --> 17:53.820
其他跟我们没啥关系

17:53.820 --> 17:54.860
因为其他的东西

17:54.860 --> 17:55.980
它不光是

17:55.980 --> 17:58.420
你不要认为这个库就是专门为那个

17:58.420 --> 18:01.220
为那个什么RedRot来做的

18:01.220 --> 18:02.980
跟RedRot没有什么关系

18:02.980 --> 18:04.180
没有什么关系

18:04.180 --> 18:05.860
不是专门为它来做的

18:05.860 --> 18:06.540
看到没

18:06.540 --> 18:08.100
这个库还是能够

18:08.100 --> 18:10.060
能够适应各种场景

18:10.060 --> 18:12.300
各种就是路径场景

18:12.300 --> 18:13.700
不光是这个左鞋杠的

18:13.700 --> 18:15.460
就是地子南的路径

18:15.460 --> 18:17.460
还能够适应什么右鞋杠

18:17.460 --> 18:18.740
Windows下面的路径

18:18.780 --> 18:20.700
就是还有一些其他那些八道路径

18:20.700 --> 18:21.820
都能都行

18:21.820 --> 18:23.180
都行

18:23.180 --> 18:25.820
就这个库是通用性非常非常高的

18:25.820 --> 18:26.420
它不是说

18:26.420 --> 18:27.980
光门关为那个RedRot

18:27.980 --> 18:28.500
来准备的

18:28.500 --> 18:29.820
那里太小看它了

18:29.820 --> 18:30.900
你看它的下载

18:30.900 --> 18:33.580
一周的下载量是多少

18:33.580 --> 18:36.420
1283万

18:36.420 --> 18:37.780
那我们来看一下RedRot的

18:37.780 --> 18:39.220
一周下载量是多少

18:39.220 --> 18:40.380
反正没事嘛

18:40.380 --> 18:43.280
了嘛

18:43.280 --> 18:47.880
我们看一下RedRot

18:47.880 --> 18:50.080
看一下它的一周下载量是多少

18:50.120 --> 18:51.320
226万

18:51.320 --> 18:53.040
你对比一下吧

18:53.040 --> 18:55.440
它的通用性是不是更高

18:55.440 --> 18:56.160
但是呢

18:56.160 --> 18:58.400
要说有很多人自己去下载这个库

18:58.400 --> 18:59.680
那有些人说

18:59.680 --> 19:01.240
我怎么没有听说过这个库呢

19:01.240 --> 19:02.880
以前学5U可能你听说过

19:02.880 --> 19:03.720
可能没听说过

19:03.720 --> 19:05.480
那我怎么没有听说过这个库呢

19:05.480 --> 19:08.280
是因为我们平时不太会去用这个库

19:08.280 --> 19:11.480
一般来说是一些第三方的库

19:11.480 --> 19:14.040
比方说像RedRot

19:14.040 --> 19:15.440
或者是5URot

19:15.440 --> 19:17.320
或者一些其他的路由

19:17.320 --> 19:18.680
一些第三方的组件

19:18.720 --> 19:20.680
它可能会用到这个库

19:20.680 --> 19:22.480
我们在下载第三方的库的时候

19:22.480 --> 19:24.240
它顺带就把它压下载了

19:24.240 --> 19:26.360
所以它把它周下载就像冲得很高

19:26.360 --> 19:27.320
是这么个意思

19:27.320 --> 19:29.000
我们不太会直接去下载这个东西

19:29.000 --> 19:30.960
除非我们要研究这个原码

19:30.960 --> 19:31.840
或者是我们要写一个

19:31.840 --> 19:34.680
自己写一个跟路径相关的公共的库

19:34.680 --> 19:36.520
对吧

19:36.520 --> 19:37.320
也就是第三个

19:37.320 --> 19:38.800
它是一些参数

19:38.800 --> 19:41.560
第三个是一些参数

19:41.560 --> 19:44.640
那么现在我们大致的去了解一下这个库

19:44.640 --> 19:45.480
这个库没啥

19:45.480 --> 19:46.480
就真的是没啥

19:46.480 --> 19:47.000
真的是没啥

19:47.000 --> 19:47.640
就没了

19:47.640 --> 19:48.720
就没了

19:48.720 --> 19:51.800
那么我们大致的了解一下这个库的之后了

19:51.800 --> 19:54.480
咱们我们需要去写一个

19:54.480 --> 19:55.440
写一个函数

19:55.440 --> 19:56.480
比方说

19:56.480 --> 19:58.640
咱们需要写这么一个函数

19:58.640 --> 19:59.680
方形

19:59.680 --> 20:01.760
叫做PathMarch

20:01.760 --> 20:03.480
PathMarch

20:03.480 --> 20:05.760
写这么一个函数

20:05.760 --> 20:07.360
这个函数

20:07.360 --> 20:09.720
做什么事情呢

20:09.720 --> 20:11.360
这个函数是这样子

20:11.360 --> 20:15.000
你给我传一个路径

20:15.040 --> 20:16.800
你给我传一个路径

20:16.800 --> 20:17.480
这路径是什么

20:17.480 --> 20:18.440
Path就是这

20:18.440 --> 20:19.000
就这个东西

20:19.000 --> 20:19.720
Path

20:19.720 --> 20:22.200
你给我传一个Path进来

20:22.200 --> 20:27.200
然后你再给我传一个UIL地址进来

20:27.200 --> 20:29.200
然后你再给我传一个

20:29.200 --> 20:30.640
它的相关配置

20:30.640 --> 20:31.960
Options

20:31.960 --> 20:33.600
给我传一个相关配置

20:33.600 --> 20:35.520
然后我给你返回一个对象

20:35.520 --> 20:37.440
就是匹配结果

20:37.440 --> 20:39.280
我给你返回一个

20:39.280 --> 20:42.640
对象就是匹配的结果

20:42.640 --> 20:44.880
给你返回这个匹配的结果

20:44.880 --> 20:47.440
就这么个意思

20:47.440 --> 20:48.360
那么这个函数怎么写呢

20:48.360 --> 20:51.080
我先打上注释

20:51.080 --> 20:57.040
是得到匹配结果

20:57.040 --> 20:58.560
这里Path的指的是什么

20:58.560 --> 21:01.040
路径规则

21:01.040 --> 21:02.240
UIL是什么呢

21:02.240 --> 21:05.480
就是具体的地址

21:05.480 --> 21:06.960
就是浏览器里面的地址

21:06.960 --> 21:10.000
你给我Options里边是什么

21:10.000 --> 21:12.720
就是相关配置

21:12.720 --> 21:14.240
那么这个相关配置就对应到这

21:14.320 --> 21:16.320
这个函数的第三个函数相关配置

21:16.320 --> 21:19.200
然后我给你返回一个匹配结果

21:19.200 --> 21:20.200
这是我们要做的

21:20.200 --> 21:22.880
好返回的匹配结果是什么格式呢

21:22.880 --> 21:28.280
匹配结果是一个对象

21:28.280 --> 21:30.320
匹配的结果是一个对象

21:30.320 --> 21:31.920
如果没有匹配

21:31.920 --> 21:33.920
如果不能匹配

21:33.920 --> 21:35.800
返回Undefend

21:35.800 --> 21:36.600
或者是返回NOW

21:36.600 --> 21:37.280
理智型规定

21:37.280 --> 21:39.080
比方说我们这里返回Undefend

21:39.080 --> 21:42.240
如果不能匹配返回Undefend

21:42.240 --> 21:45.480
如果可以匹配

21:45.480 --> 21:50.370
匹配结果是一个对象

21:50.370 --> 21:54.700
匹配结果是一个对象

21:54.700 --> 22:00.460
那么该对象中的属性名

22:00.460 --> 22:05.220
对应路径规则的key

22:05.220 --> 22:06.540
就是关键字

22:06.540 --> 22:09.140
规则中的关键字

22:09.140 --> 22:09.700
什么关键字

22:09.700 --> 22:11.940
就是像什么IDR配级这些东西

22:11.940 --> 22:12.700
对吧

22:12.700 --> 22:13.300
说白了

22:13.300 --> 22:14.580
我这里要返回啥呢

22:14.620 --> 22:18.340
就要返回RxRotor里面的March对象

22:18.340 --> 22:19.340
我就要返回那个东西

22:19.340 --> 22:21.380
那个March里面的Pirates对象

22:21.380 --> 22:23.940
就是要返回RxRotor里面March里面

22:23.940 --> 22:27.300
March里面不是个Pirates吗

22:27.300 --> 22:27.740
对不对

22:27.740 --> 22:28.500
Pirates

22:28.500 --> 22:30.140
我就要返回这个东西

22:30.140 --> 22:31.260
这就是我要做的事情

22:31.260 --> 22:34.300
我要返回这么一个玩意儿

22:34.300 --> 22:36.740
我们的做法跟RxRotor的做法

22:36.740 --> 22:38.420
它不一定是完全一样的

22:38.420 --> 22:40.740
但是它的核心思路一定是一样的

22:40.740 --> 22:42.700
核心的思路一定是没问题的

22:42.700 --> 22:44.340
但是也要说

22:44.340 --> 22:45.460
一个标垫符号

22:45.460 --> 22:47.500
每句单码都完全一样

22:47.500 --> 22:49.940
那不是我们学习圆码的目的

22:49.940 --> 22:51.620
我们的圆码不会是这样子学的

22:53.540 --> 22:54.900
我们要返回这个

22:54.900 --> 22:55.620
对应路径

22:55.620 --> 22:57.380
因为它要考虑很多很多问题

22:57.380 --> 22:59.100
它是一个产品级的

22:59.100 --> 23:01.540
如果你说你学到我的介石课程里边

23:01.540 --> 23:03.700
你看到我介石课程最后一个案例

23:03.700 --> 23:06.980
就是关于做一个表单验证的插件

23:06.980 --> 23:08.420
就知道产品级是什么

23:08.420 --> 23:09.380
都恐怖了

23:09.380 --> 23:10.780
它考虑多少问题了

23:10.820 --> 23:12.660
但是我们只搞定它核心的功能

23:12.660 --> 23:14.100
所以说我们要考虑到

23:14.100 --> 23:15.860
肯定有一次要简单的很多

23:17.140 --> 23:18.380
那么现在我们

23:18.380 --> 23:20.980
这个路径中的关键字就返回

23:20.980 --> 23:22.340
就是相当于是这个东西

23:23.780 --> 23:25.780
当然如果说没有关键字的话

23:25.780 --> 23:26.980
就返回一个空对象

23:27.500 --> 23:28.540
那就无所谓了

23:29.180 --> 23:30.620
那么到时候我们调问这个方法

23:30.620 --> 23:31.300
如果没有匹配

23:31.300 --> 23:32.860
我们就可以知道它是安定范的

23:32.860 --> 23:33.780
表示没有匹配

23:33.780 --> 23:34.620
如果匹配了

23:34.620 --> 23:36.700
我们要把它的关键字全部拿到

23:36.700 --> 23:37.780
全部拿到

23:38.780 --> 23:39.900
没问题吧

23:40.020 --> 23:40.860
没问题吧

23:41.460 --> 23:42.180
OK

23:42.180 --> 23:44.860
那咱们来写一下这一块单

23:45.380 --> 23:47.220
具体怎么写呢

23:47.220 --> 23:51.260
我们这里首先直接使用PASS2

23:51.260 --> 23:52.540
RigExpression

23:52.540 --> 23:54.780
把你传那个路径规则

23:54.780 --> 23:56.020
我给你

23:56.700 --> 23:57.900
给你这个路径规则

23:59.020 --> 24:01.020
然后你给我一个UIL地址

24:01.020 --> 24:02.260
UIL地址现在用不到

24:02.260 --> 24:03.020
用不到

24:03.780 --> 24:05.020
然后KISS

24:05.020 --> 24:07.260
我们这里建一个KISS数组

24:08.700 --> 24:09.700
KISS传进去

24:09.700 --> 24:10.180
对吧

24:10.180 --> 24:11.220
保存关键字

24:12.100 --> 24:13.900
保存匹配的

24:14.220 --> 24:17.900
就是路径规则中的关键字

24:18.660 --> 24:20.140
然后Obsync

24:20.580 --> 24:21.780
这东西全部传给你

24:21.780 --> 24:22.460
全部传给你

24:22.460 --> 24:25.260
当然你可以给一些默认值

24:25.260 --> 24:26.700
默认值我拿来给

24:26.700 --> 24:27.540
就这样吧

24:29.020 --> 24:30.180
咱们这里

24:31.220 --> 24:32.140
Obsync传进去

24:32.660 --> 24:33.980
然后这里返回

24:33.980 --> 24:34.980
返回的是一个证则

24:34.980 --> 24:35.580
对不对

24:35.580 --> 24:36.620
返回一个证则

24:36.620 --> 24:37.940
Expression证则

24:38.380 --> 24:39.500
然后这个证则之后

24:39.540 --> 24:41.740
我们是不是可以利用这个证则

24:42.420 --> 24:44.100
是不是用那个什么sqt

24:44.100 --> 24:44.580
对吧

24:45.580 --> 24:47.420
运行UIL

24:47.420 --> 24:49.180
去匹配UIL地址

24:50.500 --> 24:52.620
匹配UIL地址

24:53.260 --> 24:54.380
匹配UIL地址

24:54.380 --> 24:56.020
然后这里也可以换一个名字

24:56.020 --> 24:56.780
Passnet

24:57.580 --> 24:58.300
Passnet

24:59.740 --> 25:00.340
换一个

25:01.140 --> 25:02.860
匹配UIL地址

25:02.860 --> 25:04.300
匹配到过后是不是有个结果

25:04.300 --> 25:04.780
对不对

25:04.780 --> 25:05.380
有个结果

25:05.380 --> 25:07.020
咱们打印出来的结果看一下

25:07.020 --> 25:08.940
证则打印出来的结果看一下

25:09.140 --> 25:10.380
把这个结果打印出来

25:10.380 --> 25:11.460
把这个kiss打印出来

25:11.460 --> 25:12.060
看一下吧

25:12.860 --> 25:15.220
咱们这里测试一下

25:15.220 --> 25:16.220
Passmarch

25:16.820 --> 25:18.700
比方说我们给它的路径是

25:19.020 --> 25:19.740
news

25:20.140 --> 25:21.140
帽号id

25:21.420 --> 25:22.820
然后配级

25:22.820 --> 25:23.340
对吧

25:23.740 --> 25:27.060
然后我们这里写上 passname

25:28.100 --> 25:29.260
passname news

25:30.740 --> 25:31.660
随便写个

25:31.780 --> 25:34.140
然后配级写123

25:34.660 --> 25:35.700
配级写1

25:36.700 --> 25:37.940
这里id写

25:38.780 --> 25:39.420
随便写个

25:39.420 --> 25:39.900
id

25:41.340 --> 25:42.700
然后Obsync

25:42.700 --> 25:43.500
我不传

25:43.860 --> 25:44.500
先不传

25:44.940 --> 25:46.100
保存看一下吧

25:47.860 --> 25:49.020
于是你看到

25:49.580 --> 25:50.620
我们这里

25:51.060 --> 25:53.180
excuse的结果是不是有三项

25:53.180 --> 25:53.580
对不对

25:53.580 --> 25:55.180
第一项是整体的匹配结果

25:55.180 --> 25:56.420
后面是分组的结果

25:56.420 --> 25:56.900
对不对

25:56.900 --> 25:57.980
是不是分组的结果

25:57.980 --> 25:58.540
对吧

25:58.540 --> 25:58.900
好

25:58.900 --> 25:59.940
那么分组的结果

25:59.940 --> 26:01.700
是不是刚好对应这边这个数组

26:01.900 --> 26:02.940
它的name对不对

26:02.940 --> 26:04.700
它匹配到它的key对不对

26:04.940 --> 26:05.780
这里分组的结果

26:05.780 --> 26:07.540
是不是刚好对应到它这里边的key

26:07.780 --> 26:08.300
没问题吧

26:08.300 --> 26:09.140
这个没问题吧

26:10.860 --> 26:12.460
这就是匹配的情况

26:12.460 --> 26:13.780
那如果说不匹配的情况

26:13.780 --> 26:14.580
我们看一下

26:15.300 --> 26:16.860
不匹配的情况

26:16.860 --> 26:18.260
你看一下得到的是不是nau

26:18.260 --> 26:18.620
对吧

26:18.620 --> 26:20.420
excuse的过后是不是得到的是nau

26:20.540 --> 26:21.140
对不对

26:21.540 --> 26:23.340
所以我们是不是就可以搞定了

26:23.340 --> 26:23.860
对不对

26:23.860 --> 26:24.220
好

26:24.220 --> 26:25.380
那么这里来判断一下

26:25.380 --> 26:26.300
如果说

26:26.540 --> 26:27.220
结果

26:27.380 --> 26:28.660
redouge没有值

26:28.660 --> 26:30.420
没有值是不是返回 undefend

26:30.420 --> 26:30.940
对不对

26:30.940 --> 26:32.300
或者说直接返回 return

26:32.300 --> 26:33.700
返回自然就是 undefend

26:33.700 --> 26:34.180
对吧

26:34.460 --> 26:35.380
没有匹配

26:35.700 --> 26:36.300
没有匹配

26:36.300 --> 26:38.220
直接给你返回 undefend

26:39.380 --> 26:40.140
没问题吧

26:40.340 --> 26:40.540
好

26:40.540 --> 26:42.380
那么接下来我们来看一下匹配了

26:42.900 --> 26:43.660
匹配了

26:44.180 --> 26:45.740
匹配到要做什么事情

26:46.060 --> 26:47.260
匹配到要做什么事情呢

26:47.260 --> 26:48.420
我们要返回一个对象

26:48.420 --> 26:49.900
比方说我们刚才这个地方

26:51.420 --> 26:52.420
刚才这个地方

26:52.420 --> 26:53.660
我们应该返回啥呢

26:55.300 --> 26:56.780
我们应该返回的是这个

26:56.780 --> 26:57.580
这么一个对象

26:57.820 --> 26:59.700
对象里边这个什么

27:00.500 --> 27:02.420
id应该等于啥呢

27:02.620 --> 27:03.860
就这一坨对不对

27:04.180 --> 27:05.460
id为这一坨

27:05.700 --> 27:08.140
然后黑警为啥呢

27:08.220 --> 27:09.900
是不是为1

27:09.900 --> 27:10.340
对吧

27:10.340 --> 27:11.220
当然是支付串

27:11.220 --> 27:12.500
这匹配出来都是支付串

27:13.220 --> 27:14.340
是不是要返回这个东西

27:14.500 --> 27:15.020
对吧

27:15.140 --> 27:16.380
匹配了我们要返回这个东西

27:16.380 --> 27:17.940
那么怎么返回这个东西呢

27:18.580 --> 27:19.980
我们现在能够拿到的

27:20.980 --> 27:22.140
能够拿到的是什么呢

27:22.180 --> 27:23.620
一个sqt的数组

27:23.620 --> 27:24.100
对吧

27:24.100 --> 27:25.060
然后这么一个数组

27:25.740 --> 27:26.940
还能拿到啥呢

27:26.940 --> 27:28.180
是不是还能拿到这个

27:29.940 --> 27:30.980
这个匹配的keyz

27:30.980 --> 27:31.340
对不对

27:31.340 --> 27:32.100
是不是可以拿到

27:32.180 --> 27:34.340
然后这两个东西是不是可以得到对象了

27:34.540 --> 27:34.860
好

27:34.860 --> 27:36.420
咱们专门来写一个辅助函数

27:36.420 --> 27:37.940
来帮我们做这件事情

27:38.100 --> 27:39.500
叫做get parents

27:40.420 --> 27:41.220
写这么一个函数

27:41.220 --> 27:42.220
你给我一个啥呢

27:42.220 --> 27:44.580
给我一个excuter的result结果

27:46.420 --> 27:49.100
或者就是groups分组

27:49.220 --> 27:50.540
就是匹配到了分组结果

27:50.540 --> 27:51.420
分组的值

27:51.540 --> 27:52.820
然后再给我一个啥呢

27:52.820 --> 27:54.980
再给我一个keyz的数

27:55.180 --> 27:56.220
给我这两个属性

27:56.220 --> 27:57.660
我给你返回个对象

27:58.820 --> 28:01.380
于是我这里就去调用这个方法

28:01.540 --> 28:02.660
我再打个注释

28:04.340 --> 28:05.220
表什么意思呢

28:05.220 --> 28:06.180
表示的是

28:06.820 --> 28:10.220
根据分组的匹配

28:11.060 --> 28:11.900
应该说这样子

28:11.900 --> 28:14.460
根据匹配的分组结果

28:14.460 --> 28:15.820
这个分组结果应该是这样子

28:15.820 --> 28:17.100
它只有比方说这里有三项

28:17.100 --> 28:17.300
对吧

28:17.300 --> 28:18.780
你只给我这两项就行了

28:18.940 --> 28:20.260
这两项是不是分组的结果

28:20.260 --> 28:20.580
对吧

28:20.580 --> 28:21.700
分组匹配的结果

28:22.020 --> 28:22.260
好

28:22.260 --> 28:23.540
然后再给我一个keyz

28:23.660 --> 28:24.780
那么我给你得到一个什么

28:24.780 --> 28:25.780
得到一个对象

28:26.540 --> 28:28.100
得到一个parons对象

28:28.100 --> 28:30.060
把这个parons对象也不要解释了吧

28:30.140 --> 28:30.820
几个人看

28:31.340 --> 28:33.540
Rotor里面parons对象是一样的

28:34.220 --> 28:36.020
所以说这里我们getparons

28:37.060 --> 28:38.140
给它传啥呢

28:38.140 --> 28:39.940
我们这里的这是匹配结果

28:39.940 --> 28:41.500
匹配结果里面数字是不是有三项

28:41.500 --> 28:41.900
对不对

28:41.900 --> 28:43.420
它是不是要去掉第一项了

28:44.220 --> 28:45.580
去掉匹配的第一项

28:45.580 --> 28:46.460
是不是该去掉

28:47.220 --> 28:47.780
该去掉吧

28:48.260 --> 28:49.020
这个没问题吧

28:49.260 --> 28:51.340
所以说我们得去掉这个数组的

28:51.620 --> 28:52.260
第一项

28:52.260 --> 28:53.100
那怎么办呢

28:53.100 --> 28:54.260
它是一个伪数组

28:54.260 --> 28:56.140
那咱们是不是可以把它转换成真数组

28:56.740 --> 28:57.900
是不是可以转换真数组

28:58.740 --> 29:00.260
咱们这里把它用net

29:00.260 --> 29:01.100
转换真数组

29:01.780 --> 29:02.380
result

29:03.340 --> 29:03.820
array

29:04.940 --> 29:05.420
from

29:06.100 --> 29:06.580
result

29:06.820 --> 29:07.820
把它转换成真数组

29:07.820 --> 29:08.580
你看一下

29:09.820 --> 29:11.100
它现在变成一个真的数

29:11.100 --> 29:11.900
真的数组了

29:11.900 --> 29:12.340
看到没

29:12.860 --> 29:14.460
那你也可以跟着换个

29:14.460 --> 29:15.180
换一个变量嘛

29:15.580 --> 29:17.140
不能把原来的变量给我吃了

29:17.860 --> 29:18.380
换个变量

29:20.980 --> 29:21.620
什么呢

29:21.620 --> 29:22.500
就是

29:22.500 --> 29:23.260
excute

29:24.460 --> 29:24.860
array

29:26.340 --> 29:27.060
换个变量名字

29:30.250 --> 29:31.290
把它变成一个真数组

29:31.290 --> 29:32.570
然后这个真数组的第一项

29:32.570 --> 29:33.130
我不要

29:33.130 --> 29:33.970
我不要

29:34.210 --> 29:35.690
我是不是解去

29:35.690 --> 29:36.010
对吧

29:36.010 --> 29:36.770
是不是解去

29:37.290 --> 29:38.090
excute

29:38.090 --> 29:38.690
什么

29:39.010 --> 29:39.890
用什么解去

29:40.330 --> 29:41.170
用什么解去

29:41.690 --> 29:42.570
用那个

29:44.210 --> 29:44.730
用啥的

29:44.730 --> 29:45.530
我都忘了

29:46.130 --> 29:47.650
用啥的解去

29:49.970 --> 29:51.810
叫啥名字的方法

29:52.770 --> 29:54.010
叫啥名字

29:56.650 --> 29:58.650
书组里边那个解去方法

29:59.090 --> 29:59.850
玩肚子了

30:00.730 --> 30:01.290
我的天啊

30:01.290 --> 30:02.090
的ATI

30:03.090 --> 30:03.650
array

30:04.370 --> 30:04.970
MDM

30:05.250 --> 30:06.130
但是没事

30:06.610 --> 30:07.810
ATI忘了

30:08.410 --> 30:09.330
这些都是小事

30:09.530 --> 30:10.570
先为自己开拓一步

30:11.170 --> 30:11.530
真的

30:11.530 --> 30:12.810
这个都拿接得住吗

30:12.810 --> 30:13.730
应该都拿接得住

30:16.010 --> 30:16.570
我看一下

30:20.410 --> 30:21.690
它里面有一个方法

30:22.010 --> 30:22.890
有一个方法

30:23.650 --> 30:24.930
是可以解去的

30:25.330 --> 30:26.330
是可以解去的

30:26.690 --> 30:27.330
short

30:27.330 --> 30:27.650
short

30:27.650 --> 30:28.290
short

30:28.290 --> 30:28.850
不是

30:29.890 --> 30:30.330
慷慨

30:30.330 --> 30:30.810
这不是

30:31.610 --> 30:32.250
snice

30:32.770 --> 30:33.370
对

30:33.370 --> 30:34.930
抽取当前速度的一段远速

30:34.930 --> 30:36.010
组合成一个新速度

30:36.330 --> 30:36.610
ok

30:36.610 --> 30:37.170
snice

30:37.730 --> 30:37.930
对

30:37.930 --> 30:38.610
就这个函数

30:39.010 --> 30:40.730
那么给一个骑士下标

30:40.730 --> 30:41.530
骑士下标的话

30:41.530 --> 30:42.090
就是1

30:42.090 --> 30:42.530
对吧

30:42.530 --> 30:44.290
从下标1开始

30:44.290 --> 30:45.690
来得到一个新的速度

30:46.730 --> 30:47.970
那么咱们打印出来看一下

30:48.090 --> 30:48.930
打印出来看一下

30:51.150 --> 30:51.910
你看新速度

30:51.910 --> 30:52.990
是不是只有这两个了

30:52.990 --> 30:53.310
对吧

30:53.310 --> 30:54.070
只有这两下

30:55.430 --> 30:55.670
对吧

30:55.670 --> 30:56.230
没问题吧

30:56.830 --> 30:58.830
那么我们把这个新速度传进去

30:58.830 --> 30:59.750
传进去

31:00.750 --> 31:04.870
这是得到匹配的分组结果

31:05.870 --> 31:07.870
然后这里是骑士传进去

31:09.870 --> 31:10.670
然后这里

31:12.110 --> 31:13.310
我们就用groups

31:13.310 --> 31:14.230
就这个名字

31:14.230 --> 31:15.310
这个名字还舒服一点

31:17.190 --> 31:17.830
然后这边

31:17.830 --> 31:19.470
这个还说来解决是剩下的事情

31:19.470 --> 31:20.630
那是不是一一对应的

31:21.070 --> 31:21.910
是不是一一对应的

31:21.910 --> 31:23.750
咱们先从简单的慢慢开始写

31:23.750 --> 31:24.510
不着急

31:24.750 --> 31:25.750
是不是一一对应的

31:25.750 --> 31:27.190
那怎么来做这件事情

31:27.830 --> 31:28.830
怎么来做这件事情

31:28.830 --> 31:29.430
来吧

31:29.790 --> 31:30.710
来吧

31:30.710 --> 31:32.310
我们这里定一个辨量

31:33.110 --> 31:34.310
就是OB界

31:34.950 --> 31:35.710
一个空对相

31:37.390 --> 31:39.230
然后这里我们循环

31:39.230 --> 31:40.270
用什么循环了

31:40.270 --> 31:41.110
可以用

31:41.910 --> 31:42.350
following环

31:44.950 --> 31:45.790
对就用following环

31:46.230 --> 31:46.830
就用following环

31:48.750 --> 31:50.590
这里我们可以循环kiss

31:50.590 --> 31:51.710
kiss.links

31:53.190 --> 31:55.310
也可以循环groups.links

31:55.310 --> 31:57.150
都想groups.links

31:57.150 --> 31:57.910
循环它

31:57.950 --> 31:59.870
它是真实的匹配的分组结果

31:59.870 --> 32:00.190
对吧

32:00.190 --> 32:00.750
循环它

32:01.750 --> 32:04.350
那么现在我们拿到每一个分组的结果

32:05.430 --> 32:06.950
可以拿到每一个分组的结果

32:07.790 --> 32:08.710
这个g

32:10.430 --> 32:12.030
可以拿到每一个分组的结果

32:12.630 --> 32:13.350
这是分组的结果

32:13.350 --> 32:14.390
是不是就是纸

32:14.390 --> 32:14.990
对不对

32:14.990 --> 32:16.350
就是这个参数的纸

32:16.710 --> 32:16.870
好

32:16.870 --> 32:17.910
那么参数的名字

32:18.430 --> 32:20.350
是不是可以拿从kiss里面拿到

32:20.630 --> 32:20.790
对吧

32:20.790 --> 32:22.750
从kiss里面拿到参数的名字

32:22.750 --> 32:23.710
你看一下这个kiss

32:25.510 --> 32:26.230
这个kiss

32:26.630 --> 32:29.950
那么每一个kiss是不是个对象

32:29.950 --> 32:30.510
对不对

32:30.510 --> 32:31.950
一个对象里面是不是个内面属性

32:31.950 --> 32:33.030
内面属性的纸

32:33.030 --> 32:34.590
是不是就是它的参数名字

32:35.270 --> 32:35.910
拿到名字了

32:35.910 --> 32:36.710
拿到纸了

32:36.710 --> 32:38.550
那么把这东西往对象里面扔

32:40.430 --> 32:41.110
说完了

32:41.430 --> 32:42.990
最后返回obj

32:43.750 --> 32:44.430
obj

32:44.630 --> 32:44.910
好了

32:44.910 --> 32:45.870
这里我们得到

32:45.870 --> 32:48.030
是不是可以得到这个params的

32:48.670 --> 32:49.550
打印看一下

32:49.550 --> 32:50.310
这个params

32:51.110 --> 32:51.350
好

32:51.350 --> 32:52.110
包存看一下

32:52.790 --> 32:53.350
那一看

32:53.350 --> 32:55.630
现在拿到是不是id配几是不是拿到了

32:56.270 --> 32:56.750
对吧

32:56.750 --> 32:58.430
我们后边是不是就需要这个东西

32:58.430 --> 32:59.710
特别特别需要这个东西

32:59.830 --> 33:00.870
是不是可以拿到了

33:01.230 --> 33:01.990
没问题吧

33:03.550 --> 33:03.790
好

33:03.790 --> 33:05.310
那么接下来我们来看一些特殊情况

33:05.630 --> 33:06.670
比方说这个配几

33:06.670 --> 33:07.750
它是个问号

33:08.390 --> 33:09.390
它可选的

33:09.870 --> 33:11.070
可以写可以不写

33:11.390 --> 33:12.550
可以写不可以不写

33:12.550 --> 33:13.750
那我这里没有写

33:14.470 --> 33:15.430
我这里没写能不能匹配

33:15.430 --> 33:16.310
肯定能匹配

33:17.030 --> 33:18.350
那么这里的配几得到是什么

33:18.350 --> 33:19.030
indefend

33:19.190 --> 33:19.670
合理吧

33:19.670 --> 33:20.430
非常合理

33:20.710 --> 33:21.710
所以说要注意

33:21.710 --> 33:22.230
循环的时候

33:22.230 --> 33:23.390
尽量要循环什么的

33:24.230 --> 33:26.150
而且都可以

33:26.150 --> 33:26.670
对吧

33:26.670 --> 33:27.190
都可以

33:27.190 --> 33:29.630
一个key是他就对你一个分组

33:30.470 --> 33:31.030
都可以

33:31.030 --> 33:31.670
都可以

33:32.190 --> 33:33.470
你最好看一下

33:34.390 --> 33:34.830
都可以

33:34.830 --> 33:35.910
其实真的都可以

33:35.910 --> 33:36.350
都可以

33:36.350 --> 33:37.350
以循环key的话

33:37.350 --> 33:39.390
那么就去从key里面去拿分组的字

33:39.390 --> 33:39.710
对吧

33:39.710 --> 33:40.310
又可能拿不到

33:40.310 --> 33:41.310
拿不到就是indefend

33:42.710 --> 33:43.190
都可以

33:43.190 --> 33:43.750
没问题的

33:44.510 --> 33:45.590
那如果说名字相同

33:45.750 --> 33:47.750
比方说你说这里两个名字都相同

33:47.750 --> 33:49.230
那你看一下会有什么样的现象

33:49.870 --> 33:50.750
名字都相同

33:50.750 --> 33:51.590
它啥都没有

33:51.590 --> 33:52.390
为啥啥都没有

33:52.750 --> 33:53.430
我们来看一下

33:53.430 --> 33:54.750
如果说两个名字相同

33:54.750 --> 33:55.590
我们这里打印一下key

33:59.290 --> 34:00.210
两个内容都相同

34:00.210 --> 34:00.610
对吧

34:00.610 --> 34:01.810
两个内容都相同

34:01.810 --> 34:02.610
好相同过后

34:02.890 --> 34:03.290
我们来看一下

34:03.290 --> 34:04.650
他得到的正的表达是

34:08.080 --> 34:09.240
得到的正的表达是

34:09.240 --> 34:10.840
正的表达是是不是也有分组

34:10.840 --> 34:11.320
对不对

34:11.320 --> 34:12.120
也有分组

34:12.120 --> 34:12.640
哎

34:12.640 --> 34:13.080
不对啊

34:13.080 --> 34:14.480
他得有东西

34:14.480 --> 34:14.880
哦

34:14.880 --> 34:15.640
这里少写一个

34:15.640 --> 34:16.320
少写一个

34:17.200 --> 34:17.760
少写一个

34:18.280 --> 34:19.520
那是不是只有一个id

34:20.360 --> 34:20.720
对吧

34:20.720 --> 34:21.640
是不是只有一个id

34:21.960 --> 34:23.400
那么RxRotor里面

34:23.920 --> 34:25.000
那RxRotor里面

34:25.080 --> 34:26.880
是不是也只能得到一个id呢

34:27.360 --> 34:27.480
好

34:27.480 --> 34:28.560
咱们试验一下呗

34:28.560 --> 34:29.520
试验一下不就知道了吗

34:30.640 --> 34:31.080
Import

34:32.040 --> 34:33.200
这里导入一个

34:35.320 --> 34:35.880
Front

34:35.880 --> 34:36.360
马上

34:36.920 --> 34:37.720
RxRotor动

34:39.080 --> 34:40.200
这里BrowseRotor

34:41.160 --> 34:41.600
Rotor

34:41.960 --> 34:42.360
看一下吧

34:42.880 --> 34:43.240
Rotor

34:45.540 --> 34:46.420
这里写个主键

34:47.140 --> 34:47.580
方形

34:48.060 --> 34:48.460
配级

34:49.060 --> 34:49.340
1

34:49.940 --> 34:50.660
随便写个

34:50.660 --> 34:51.340
下写一个

34:51.700 --> 34:52.180
配级1

34:52.700 --> 34:53.220
这个不重要

34:53.620 --> 34:53.940
好

34:53.940 --> 34:54.860
那么Browse

34:58.620 --> 34:59.260
Rotor

34:59.980 --> 35:00.260
好

35:00.260 --> 35:00.900
那么这里呢

35:00.900 --> 35:01.420
Rotor

35:03.820 --> 35:04.620
这里Pass

35:05.620 --> 35:06.140
Pass的话

35:06.140 --> 35:07.900
我们这里就是这个鞋杠嘛

35:07.900 --> 35:08.340
鞋杠

35:08.860 --> 35:09.860
鞋杠

35:10.060 --> 35:10.540
id

35:11.140 --> 35:11.580
id

35:12.180 --> 35:12.900
那么这里呢

35:13.580 --> 35:14.380
Component

35:15.340 --> 35:16.300
对你的主键

35:16.300 --> 35:17.180
什么主键呢

35:17.340 --> 35:19.380
就是配级1这个主键

35:19.740 --> 35:21.100
这个主键里边我们打印一下

35:21.660 --> 35:22.820
打印一下Props

35:23.180 --> 35:23.820
里边的什么

35:23.820 --> 35:24.460
March

35:25.900 --> 35:26.380
Props

35:27.060 --> 35:27.540
March

35:28.700 --> 35:30.060
第二

35:30.060 --> 35:30.860
什么Props

35:31.700 --> 35:32.260
保存

35:33.100 --> 35:33.300
好

35:33.300 --> 35:33.820
看一下

35:34.500 --> 35:35.500
我们这里

35:37.620 --> 35:38.260
abc

35:38.460 --> 35:39.020
123

35:40.460 --> 35:41.660
那么打印那个March

35:41.660 --> 35:42.180
Props

35:42.180 --> 35:43.740
是不是得到的也是最后一个

35:43.740 --> 35:44.060
对吧

35:44.060 --> 35:44.660
123

35:45.060 --> 35:45.380
对吧

35:45.380 --> 35:45.820
没问题吧

35:45.820 --> 35:46.820
我们把这个主持掉

35:46.820 --> 35:47.580
免得搞昏

35:47.860 --> 35:48.460
搞昏小了

35:49.540 --> 35:50.860
把这边的打印主持掉

35:52.220 --> 35:52.420
好

35:52.420 --> 35:52.980
你看一下

35:53.460 --> 35:54.660
得到结果是不是123

35:54.660 --> 35:55.020
对吧

35:55.020 --> 35:56.460
把abc复盖掉了

35:57.020 --> 35:57.900
那他都没管

35:57.900 --> 35:58.740
我们也不管吧

35:58.740 --> 36:00.740
那谁让你去写同样的名字呢

36:00.940 --> 36:02.300
不应该去写同样的名字

36:02.300 --> 36:02.740
对吧

36:03.060 --> 36:03.540
ok

36:03.540 --> 36:05.780
那我们这里也通过这种方式来搞定

36:06.540 --> 36:07.140
ok

36:08.340 --> 36:08.540
好

36:08.540 --> 36:08.980
这里呢

36:08.980 --> 36:10.340
我们就搞定了

36:10.340 --> 36:11.940
目前这个需求是不搞定了

36:11.940 --> 36:12.140
好

36:12.140 --> 36:12.460
最后呢

36:12.460 --> 36:13.220
我们把这个什么

36:13.220 --> 36:14.140
Pyrons返回

36:14.140 --> 36:16.020
这个Pyrons是我们想要的结果

36:16.020 --> 36:16.460
对吧

36:16.460 --> 36:17.460
把返回又完成了

36:17.940 --> 36:18.580
于是呢

36:18.580 --> 36:19.580
这个函数就搞定了

36:19.900 --> 36:20.260
对吧

36:20.260 --> 36:22.700
当然还可以给什么第三个参数

36:23.100 --> 36:23.820
加配置

36:23.820 --> 36:24.780
比方说什么

36:24.820 --> 36:26.540
strict

36:27.700 --> 36:28.900
是不是严格匹配

36:28.900 --> 36:30.100
可以把它设计严格匹配

36:30.100 --> 36:31.380
比方说sensitivity

36:31.380 --> 36:32.740
sensitivity

36:32.740 --> 36:33.180
对吧

36:33.180 --> 36:34.540
把它设为q

36:35.060 --> 36:36.500
我们要区分大小写

36:36.500 --> 36:37.260
比方说这里呢

36:37.260 --> 36:38.660
如果说大写的六十

36:38.660 --> 36:39.820
现在就不能匹配了

36:40.660 --> 36:42.060
我再打不打印证字

36:42.060 --> 36:43.060
不打印证字

36:43.820 --> 36:45.020
你看一下得到结果

36:46.660 --> 36:47.500
result

36:50.460 --> 36:50.660
好

36:50.660 --> 36:51.260
看一下

36:51.500 --> 36:52.580
那这里是不是undefend

36:52.580 --> 36:53.220
对吧

36:53.220 --> 36:54.180
是不是没有匹配

36:54.180 --> 36:54.700
对吧

36:54.700 --> 36:55.900
因为sensitivity为q

36:55.900 --> 36:56.900
如果把它设为force

36:56.940 --> 36:58.500
它默认词就是force

36:58.500 --> 36:59.500
那是不是可以匹配

36:59.900 --> 37:00.380
对吧

37:00.380 --> 37:01.780
我们就可以通过这个函数

37:01.780 --> 37:03.500
是不是可以搞定这个问题了

37:04.100 --> 37:04.780
规则传进去

37:04.780 --> 37:05.660
urlt传进去

37:05.660 --> 37:06.660
然后一些配置传进去

37:06.660 --> 37:08.180
它就可以给你完成匹配

37:09.500 --> 37:10.540
当然肯定没完

37:10.540 --> 37:11.540
肯定是没完

37:11.540 --> 37:13.380
你不要任何就完了

37:13.980 --> 37:16.380
那还有不少的事情我们还没有做

37:16.500 --> 37:17.980
还有哪些事情没有做了

37:18.340 --> 37:19.900
比方说我们之前

37:20.180 --> 37:22.780
这个东西我就不再从头写例子了

37:23.580 --> 37:24.540
之前是这样子

37:25.500 --> 37:27.340
首先一个问题就是

37:27.340 --> 37:28.900
是否是精确匹配

37:29.860 --> 37:32.180
就是这一次匹配是不是精确匹配

37:33.500 --> 37:34.740
目前

37:35.340 --> 37:37.020
它只能精确匹配

37:37.020 --> 37:38.740
它就不可能不精确匹配

37:39.740 --> 37:41.140
它就只能精确匹配

37:41.140 --> 37:42.820
比方说我们这里匹配这个地址

37:45.100 --> 37:46.420
那么按你说的话

37:46.420 --> 37:47.140
react里边

37:47.140 --> 37:47.940
reactrout里边

37:47.940 --> 37:49.260
是不是可以匹配它这个玩意儿

37:49.260 --> 37:49.980
匹配这个玩意儿

37:49.980 --> 37:50.540
对吧

37:51.340 --> 37:52.620
那现在我们看一下

37:53.140 --> 37:54.100
现在我们来看一下

37:54.100 --> 37:54.740
保存

37:55.220 --> 37:56.300
是不是现在不能匹配

37:56.300 --> 37:56.820
为什么

37:56.820 --> 37:58.620
因为它默认情况就是精确匹配

37:58.900 --> 38:01.420
那么怎么让它不精确匹配呢

38:02.380 --> 38:04.300
怎么让它不精确匹配呢

38:04.980 --> 38:05.260
好

38:05.260 --> 38:06.180
咱们来看一下

38:06.180 --> 38:07.860
OPTION是里边有个选项

38:08.460 --> 38:09.180
这个选项的名字

38:09.180 --> 38:10.540
可能跟react不一样

38:10.540 --> 38:11.540
reactrout不一样

38:11.540 --> 38:13.220
rout里边是用的是exact

38:13.220 --> 38:13.740
对吧

38:13.740 --> 38:15.020
那这里用的是什么

38:15.380 --> 38:15.940
end

38:18.020 --> 38:18.860
什么意思呢

38:19.100 --> 38:20.020
它指的是

38:21.020 --> 38:22.380
如果这个值为处

38:23.100 --> 38:24.300
那么它会

38:25.020 --> 38:27.060
它一直会匹配到这个制服穿的墨尾

38:28.300 --> 38:29.860
也就是说说白了

38:30.900 --> 38:32.180
它那个正则表拿式

38:32.860 --> 38:34.860
它最终会给你加上一个多乐结束

38:35.220 --> 38:36.220
它会匹配到正则表

38:36.220 --> 38:38.100
正那个正则的墨尾

38:38.100 --> 38:39.060
制服穿的墨尾

38:39.060 --> 38:39.660
你看一下

38:40.580 --> 38:41.460
所以加个多乐

38:41.660 --> 38:42.220
对吧

38:42.820 --> 38:43.540
加个多乐

38:43.540 --> 38:45.140
顺便要匹配到制服穿墨尾

38:45.620 --> 38:47.540
那如果说你把end设为force呢

38:47.540 --> 38:48.300
比方说这里

38:48.580 --> 38:50.740
我们把这个end设为force

38:51.260 --> 38:52.220
设为force

38:53.020 --> 38:53.700
好看一下

38:54.060 --> 38:54.940
那你看是不是

38:54.940 --> 38:55.740
现在呢

38:56.140 --> 38:57.340
你看一下现在的一个正则

38:57.340 --> 38:58.340
所以有点变化

38:58.340 --> 38:58.860
对不对

38:58.860 --> 38:59.460
有点变化

38:59.460 --> 39:01.740
咱们来稍微的约读一下

39:02.180 --> 39:03.380
稍微的约读一下

39:03.740 --> 39:05.060
这个正则写的是啥呢

39:05.780 --> 39:06.820
这个正则是这样子

39:06.820 --> 39:07.820
是它这样子写的

39:08.180 --> 39:09.260
匹配这个nose

39:09.620 --> 39:10.900
前面是这个nose

39:11.700 --> 39:14.340
然后后面是一个不补货的分组

39:14.500 --> 39:15.940
然后后面一定是有个鞋杠

39:16.580 --> 39:17.620
要么是有个鞋杠

39:18.180 --> 39:19.940
鞋杠后面就是

39:20.780 --> 39:22.820
就应该是那个就是结尾了

39:23.020 --> 39:24.660
鞋杠后面就应该是结尾了

39:25.060 --> 39:25.980
就这么个意思

39:26.300 --> 39:28.300
鞋杠后面就应该是

39:28.540 --> 39:29.340
这是个前瞻

39:29.340 --> 39:29.940
前瞻

39:29.940 --> 39:31.460
前瞻那个表达式

39:31.740 --> 39:32.220
表示

39:32.700 --> 39:33.820
我不消耗制服

39:33.820 --> 39:35.380
但是你后面就应该是结尾了

39:35.380 --> 39:35.860
鞋杠

39:35.860 --> 39:37.260
一样你可以有鞋杠

39:37.260 --> 39:38.580
鞋杠后面就应该是结尾

39:39.100 --> 39:40.500
当然整个扩起来

39:40.500 --> 39:41.700
把它设为一个问号

39:41.700 --> 39:43.100
就是出现零次或一次

39:43.100 --> 39:43.820
就表示说

39:43.820 --> 39:44.740
这个nose后面

39:44.740 --> 39:45.900
你可以跟个鞋杠

39:45.900 --> 39:46.900
鞋杠后面是结尾

39:47.380 --> 39:48.100
也可以

39:48.100 --> 39:49.140
这个nose后面

39:49.140 --> 39:49.900
啥都没有

39:50.260 --> 39:51.060
啥都没有

39:51.700 --> 39:52.260
都行

39:52.460 --> 39:53.060
都行

39:54.500 --> 39:55.780
然后后面这一坨

39:55.780 --> 39:57.020
又是一个前瞻

39:57.020 --> 39:57.820
表达式

39:57.820 --> 39:58.620
前瞻

39:58.620 --> 39:59.260
表达式

39:59.260 --> 40:00.260
它表示后面

40:01.260 --> 40:03.460
你可以跟上一个鞋杠

40:03.460 --> 40:05.060
或者是直接结尾

40:05.060 --> 40:06.620
或者是直接结尾

40:06.620 --> 40:07.140
都行

40:08.620 --> 40:09.460
就这么个意思

40:09.460 --> 40:10.500
就这么个意思

40:11.500 --> 40:12.140
所以说

40:12.140 --> 40:14.460
那么现在它就不用去匹配制服的墨尾了

40:14.460 --> 40:15.060
你看一下

40:15.060 --> 40:16.660
那么目前我们再这样子来匹配

40:16.660 --> 40:17.700
看一下能不能匹配

40:17.700 --> 40:18.900
你看返回那个对象

40:18.900 --> 40:19.780
对不对

40:19.780 --> 40:20.740
这不可以匹配

40:21.140 --> 40:21.580
对吧

40:21.620 --> 40:22.500
是不是可以匹配了

40:23.060 --> 40:24.540
所以说能不能精确匹配

40:24.540 --> 40:27.060
是不是通过这个n的这个属性来搞定的

40:27.060 --> 40:28.980
那么这个属性用起来很不方便

40:28.980 --> 40:29.980
因为我们这个属性

40:29.980 --> 40:32.340
跟我们Retro里面属性是不是不一致

40:33.020 --> 40:34.020
是不是不一致

40:34.020 --> 40:36.020
我们希望这个名字最好一致

40:36.020 --> 40:36.420
好

40:36.420 --> 40:38.820
于是我对相关配置这一块

40:39.180 --> 40:40.300
稍做处理

40:40.980 --> 40:41.740
稍做处理

40:42.140 --> 40:43.540
相关配置这一块

40:43.540 --> 40:44.620
我这样来处理

40:45.820 --> 40:47.980
该配置是一个对象

40:48.940 --> 40:50.140
该对象中

40:51.100 --> 40:53.140
可以出现这么几个属性

40:53.420 --> 40:54.300
出现哪些属性

40:54.300 --> 40:55.140
我们来再写

40:55.740 --> 40:56.540
exact

40:58.820 --> 40:59.740
还有什么呢

40:59.740 --> 41:01.780
就是深色体育

41:03.420 --> 41:04.220
还有什么呢

41:04.220 --> 41:05.380
还有就是那个

41:08.020 --> 41:08.420
什么呢

41:08.420 --> 41:09.060
还有什么

41:09.340 --> 41:09.900
深色体育

41:09.900 --> 41:11.140
还有那个就是四缝区

41:11.140 --> 41:12.420
还有四缝区的严格模式

41:12.420 --> 41:13.020
strict

41:13.980 --> 41:15.340
它只有这三个配置

41:15.340 --> 41:16.220
其他的配置没有

41:16.580 --> 41:17.860
不需要给我其他的配置

41:18.860 --> 41:20.540
只是要告诉我这三个配置就够了

41:21.460 --> 41:21.700
好

41:21.700 --> 41:23.420
而且这三个配置的都有默认值

41:23.420 --> 41:24.580
都有默认值

41:24.580 --> 41:25.860
所以这个Obsync

41:25.860 --> 41:26.620
跟这个Obsync

41:26.620 --> 41:27.940
我们要稍微转换一下

41:28.700 --> 41:29.500
转换一下

41:29.500 --> 41:31.060
于是我们这里专门来写个函数

41:31.060 --> 41:32.700
这些需求都是慢慢出来的

41:32.700 --> 41:34.260
一开始不太容易考虑得到

41:34.900 --> 41:36.180
getObsync

41:39.020 --> 41:40.380
给我传一个配置

41:41.980 --> 41:42.900
打个注释

41:43.060 --> 41:44.060
这个函数干嘛的

41:44.900 --> 41:45.460
将

41:46.540 --> 41:47.540
传入的

41:47.860 --> 41:48.780
react

41:48.780 --> 41:50.220
rotor配置

41:50.620 --> 41:51.860
转换为

41:52.980 --> 41:54.260
pass to

41:54.780 --> 41:55.780
expression的

41:56.540 --> 41:58.060
rig expression的配置

41:59.420 --> 42:00.540
把它进行下转换

42:00.540 --> 42:01.860
把两个配置进行下转换

42:02.140 --> 42:02.340
好

42:02.340 --> 42:03.140
那么转换的方式

42:03.140 --> 42:05.140
我还要包括了什么默认配置

42:05.140 --> 42:05.580
对吧

42:05.580 --> 42:06.660
还包括默认配置

42:06.660 --> 42:07.020
像

42:07.020 --> 42:08.540
所以说这一块我们这样子写

42:09.420 --> 42:10.180
设置个变量

42:10.940 --> 42:12.420
default options

42:12.780 --> 42:13.580
默认配置

42:13.580 --> 42:14.340
默认配置是什么

42:14.340 --> 42:15.020
就这三个

42:15.620 --> 42:16.420
就这三个

42:16.780 --> 42:17.660
exact

42:17.780 --> 42:19.060
sensitive strict

42:20.180 --> 42:21.900
那么这里写上exact

42:24.220 --> 42:24.820
exact

42:24.820 --> 42:26.380
默认是force

42:26.940 --> 42:27.980
默认是force

42:28.660 --> 42:29.460
sensitive

42:30.420 --> 42:32.100
是不是大小些敏感

42:32.100 --> 42:33.420
默认是force

42:33.420 --> 42:34.180
不敏感

42:35.060 --> 42:36.100
然后还有什么

42:36.220 --> 42:37.740
还有是strict

42:37.980 --> 42:39.100
是否是严格的

42:39.100 --> 42:39.860
strict

42:40.260 --> 42:41.420
默认是不严格的

42:41.580 --> 42:42.580
三个都为force

42:43.380 --> 42:46.260
然后你把你传过的option是

42:46.540 --> 42:47.500
是不是混合

42:47.700 --> 42:48.340
对吧

42:48.540 --> 42:50.500
传坏的option是进行混合

42:53.000 --> 42:54.520
option

42:54.920 --> 42:55.560
用什么

42:55.680 --> 42:57.080
就用那个展开运算服嘛

42:57.440 --> 42:58.920
先展开default options

42:58.920 --> 43:00.760
再展开options

43:01.080 --> 43:01.520
当然了

43:01.520 --> 43:02.400
这个给一个默认字

43:02.640 --> 43:03.800
如果说你没有传的话

43:04.000 --> 43:05.040
我就是个空对象

43:06.640 --> 43:07.800
这个大方应该没问题吧

43:07.800 --> 43:09.600
这个大方应该很容易看得懂

43:11.600 --> 43:12.600
得到一个最终的配置

43:12.600 --> 43:14.280
我根据这个最终的配置

43:14.280 --> 43:15.200
返回

43:15.800 --> 43:16.560
返回什么配置

43:16.560 --> 43:18.720
返回这个rig to expression的配置

43:18.800 --> 43:19.720
那个配置里面

43:19.720 --> 43:20.920
是不是有生态题目

43:20.920 --> 43:21.200
对吧

43:21.200 --> 43:22.400
这个属性名都一样

43:22.400 --> 43:22.960
把我看一下

43:22.960 --> 43:23.840
仔细看一下

43:23.840 --> 43:24.640
原来搞错了

43:26.440 --> 43:27.160
生态题目

43:28.040 --> 43:28.440
对了

43:28.440 --> 43:29.120
没问题

43:29.600 --> 43:30.080
有什么

43:30.080 --> 43:30.880
有strict

43:32.640 --> 43:33.440
有strict

43:33.440 --> 43:33.880
还有什么

43:35.240 --> 43:36.240
除了这两个字外

43:38.320 --> 43:39.280
is not defined的

43:39.280 --> 43:40.160
果然

43:40.160 --> 43:40.760
对了

43:40.760 --> 43:41.240
我写对了

43:41.240 --> 43:41.560
对了

43:43.560 --> 43:44.160
在这里面

43:44.560 --> 43:45.920
是在这个opts里面

43:46.640 --> 43:47.680
opts里面

43:51.360 --> 43:51.880
复制一下

43:54.660 --> 43:55.620
这个属性

43:55.620 --> 43:58.420
然后strict等于opts

43:58.420 --> 43:58.900
strict

43:59.740 --> 44:00.820
然后最后一个属性

44:00.820 --> 44:01.580
就是end

44:02.380 --> 44:02.780
end

44:02.780 --> 44:03.980
是不是匹配结束

44:03.980 --> 44:05.300
是不是匹配结束

44:05.300 --> 44:06.100
那么如果说

44:06.780 --> 44:07.740
opts

44:07.740 --> 44:09.260
exact

44:09.260 --> 44:11.260
如果一个exact为q的话

44:11.260 --> 44:12.780
是不是end也要为q

44:12.780 --> 44:13.020
对吧

44:13.020 --> 44:13.980
一个exact

44:13.980 --> 44:15.580
精确匹配如果为forced的话

44:15.580 --> 44:17.220
end也要为forced

44:17.220 --> 44:18.180
exact就精确匹配

44:18.180 --> 44:20.260
精确匹配就是要匹配结尾

44:20.260 --> 44:21.300
对不对

44:21.300 --> 44:22.140
把它转换一下

44:22.980 --> 44:23.780
好 写完了

44:23.780 --> 44:24.340
那么这里

44:24.340 --> 44:25.780
我们就可以根据这个opts

44:25.780 --> 44:27.980
来得到最终的opts

44:27.980 --> 44:29.300
这里我们可以这样子

44:30.020 --> 44:31.980
这里getopts

44:32.740 --> 44:33.260
opts

44:33.820 --> 44:34.100
对吧

44:35.300 --> 44:36.820
通过这个函数来得到最终的配置

44:37.540 --> 44:37.700
好

44:37.700 --> 44:38.660
那么现在你看一下

44:39.900 --> 44:41.180
默认情况下

44:41.180 --> 44:42.300
是不是就可以匹配这样子

44:42.300 --> 44:43.540
这样的人做不出来

44:43.540 --> 44:43.700
对吧

44:43.700 --> 44:44.380
是可以匹配的

44:44.380 --> 44:45.740
默认情况下就可以匹配

44:45.740 --> 44:46.020
看没

44:47.260 --> 44:47.980
像这些东西

44:48.580 --> 44:49.100
跟什么

44:49.100 --> 44:49.860
具体的

44:49.860 --> 44:51.300
你会发现讲原码的时候

44:51.340 --> 44:53.340
更多的时候是程序思维

44:53.340 --> 44:54.900
跟什么API那些都没有什么关系

44:55.860 --> 44:57.300
也不用去分析它的原因

44:57.300 --> 44:58.260
都是我们自己要做的

44:59.380 --> 45:00.500
你看没

45:00.500 --> 45:01.180
不能匹配

45:01.180 --> 45:04.060
当然如果说你要传递一个exact

45:04.060 --> 45:04.900
把它传递为q

45:06.620 --> 45:07.860
那么现在就不能匹配了

45:08.980 --> 45:09.300
看到没

45:10.700 --> 45:11.340
好 这是这一块

45:13.180 --> 45:13.940
好了 写完了吗

45:15.140 --> 45:16.180
还没完

45:16.180 --> 45:17.180
还没完

45:17.180 --> 45:18.020
还有啥呢

45:19.140 --> 45:20.980
我们不要说我们拿精确匹配为例

45:22.180 --> 45:24.420
我们比方说我们看一下刚才

45:24.420 --> 45:25.180
我们看一下这里

45:27.860 --> 45:28.340
看一下这里

45:29.300 --> 45:31.060
这里我们直接打印出march

45:33.950 --> 45:34.910
看一下吧

45:34.910 --> 45:35.750
直接打印出march

45:37.110 --> 45:39.030
march里边除了有params里边

45:39.030 --> 45:40.390
还有一些属性

45:41.190 --> 45:42.510
是不是还有一些属性

45:42.510 --> 45:43.550
一个是pass

45:45.150 --> 45:46.310
一个是url

45:47.390 --> 45:48.470
一个是exact

45:49.750 --> 45:50.350
对吧

45:50.350 --> 45:52.550
也就是我这里要实现的是什么呢

45:52.590 --> 45:55.270
实现的就是要把整个march对象得到

45:55.270 --> 45:56.230
得到匹配结果

45:56.230 --> 45:57.270
这个匹配结果是什么

45:57.990 --> 46:00.150
所以我们一开始肯定是把简化的

46:00.150 --> 46:01.230
慢慢我们分析

46:01.230 --> 46:02.070
慢慢分析分析

46:02.070 --> 46:04.150
发现我们要做的事情更多

46:06.230 --> 46:07.230
得到匹配结果

46:07.230 --> 46:08.230
就是什么

46:08.230 --> 46:09.030
就是march对象

46:10.470 --> 46:10.750
对吧

46:10.750 --> 46:12.470
我们得到的就是march对象

46:13.430 --> 46:17.550
这个params只是march对象里边的其中一个属性而已

46:20.230 --> 46:23.510
params只是march对象里边的其中一个属性而已

46:23.510 --> 46:23.910
你看看没

46:25.270 --> 46:27.030
只是它里的一个属性而已

46:27.030 --> 46:27.590
对吧

46:28.910 --> 46:30.910
当然了如果说这个params为now

46:30.910 --> 46:32.230
为undefine

46:32.230 --> 46:33.830
如果说params没有值

46:33.830 --> 46:35.590
如果说params没有值

46:35.590 --> 46:36.310
没有值的话

46:36.310 --> 46:37.750
我就直接返回

46:37.750 --> 46:38.630
now嘛

46:38.630 --> 46:40.430
还是rxrotl

46:40.430 --> 46:42.270
rxrotl它就是返回来是now

46:42.910 --> 46:44.550
就是如果没有匹配

46:44.550 --> 46:46.190
如果没有匹配

46:46.910 --> 46:48.110
返回now

46:48.110 --> 46:48.870
还是用这个吧

46:54.030 --> 46:55.790
当然了这里也不存在对吧

46:55.790 --> 46:56.630
也不存在

46:56.710 --> 46:57.430
没有匹配的话

46:57.430 --> 46:58.190
这里就结束了

46:58.190 --> 46:58.670
对不对

46:58.670 --> 46:59.910
这里就结束了

46:59.910 --> 47:01.350
所以说这里就返回now了

47:01.350 --> 47:02.670
我们这里就不用判断了

47:02.670 --> 47:03.510
其中不用判断了

47:03.510 --> 47:04.710
这里一定是匹配的

47:04.710 --> 47:06.110
一定是匹配的

47:06.110 --> 47:07.830
好那么这个params

47:07.830 --> 47:10.190
它只是其中的一个属性而已

47:10.190 --> 47:11.230
它是不是还有别的属性

47:11.230 --> 47:11.870
还有什么属性

47:13.110 --> 47:14.270
pys是不是有

47:14.270 --> 47:16.790
这个pys是不是就是来自于参数这个pys

47:16.790 --> 47:18.230
还有什么url

47:18.230 --> 47:18.790
对吧

47:18.790 --> 47:19.990
url

47:19.990 --> 47:20.670
好

47:20.670 --> 47:22.270
那么我们来再看

47:22.270 --> 47:25.990
这个url是不是指的就是这个url呢

47:26.030 --> 47:27.470
是不是就是个pysname呢

47:28.470 --> 47:29.750
是不是指的就是这个

47:29.750 --> 47:31.990
这个url地址啊

47:31.990 --> 47:35.820
是不是就是指的这个pysname呢

47:35.820 --> 47:37.220
不是哦

47:37.220 --> 47:37.980
不是哦

47:37.980 --> 47:40.460
它不是指的这个pysname呢

47:40.460 --> 47:41.900
为什么说它不是呢

47:41.900 --> 47:42.660
给大家看一下

47:44.140 --> 47:45.500
我把这个地址改一下

47:45.500 --> 47:47.620
改成后面加一些

47:47.620 --> 47:49.060
加一些回车

47:51.020 --> 47:51.780
你看这个url

47:53.340 --> 47:54.420
匹配的是哪一部分啊

47:55.620 --> 47:56.940
是哪一部分

47:56.980 --> 48:00.220
是不是刚好是这个pys对应的那一部分

48:00.220 --> 48:01.100
对吧

48:01.100 --> 48:04.020
是不是刚好是这个pys对应的那一部分

48:04.020 --> 48:04.700
说白了

48:04.700 --> 48:06.740
这个url匹配的是哪一部分呢

48:09.500 --> 48:11.700
这个url匹配的是哪一部分呢

48:11.700 --> 48:15.980
是这个征则匹配结果里边的底下

48:17.900 --> 48:18.860
是这一部分

48:19.940 --> 48:20.900
是这一部分

48:20.900 --> 48:21.900
保存你看一下吧

48:22.900 --> 48:23.860
你看一下吧

48:24.380 --> 48:25.980
不用不用看这个引领

48:25.980 --> 48:26.740
不用看这个引领

48:28.380 --> 48:28.980
你看一下

48:30.380 --> 48:31.620
你看一下征则这里

48:31.620 --> 48:33.780
我们明明给他的制服创是这个对吧

48:33.780 --> 48:34.580
匹配的是这个

48:34.580 --> 48:36.860
结果他匹配出来是不是斜杠news

48:37.580 --> 48:38.060
对不对

48:38.060 --> 48:39.580
他只匹配了这一部分

48:39.580 --> 48:40.780
因为他整个制服创这么长

48:40.780 --> 48:42.460
是不是只匹配了这一部分

48:42.460 --> 48:42.860
对吧

48:42.860 --> 48:44.460
他只匹配了这一部分

48:44.460 --> 48:46.060
剩下的部分他没有匹配了

48:46.060 --> 48:47.980
没有匹配剩下的部分了

48:47.980 --> 48:49.460
所以说呢我们这个url呢

48:49.460 --> 48:51.660
要返回这个url来自于哪呢

48:51.660 --> 48:54.060
是不是应该来自于result new

48:54.660 --> 48:55.260
对不对

48:55.260 --> 48:56.060
所以来自于这

48:57.260 --> 48:58.060
保存你看一下

48:58.860 --> 49:00.060
保存你看一下

49:00.060 --> 49:00.660
那么现在呢

49:00.660 --> 49:02.860
这个passurl是对应的

49:02.860 --> 49:04.860
我给他的路径是什么

49:04.860 --> 49:05.660
是这个路径对吧

49:06.860 --> 49:07.860
那么他得到的结果呢

49:07.860 --> 49:09.260
url是指示这一部分

49:09.260 --> 49:10.660
他只消耗了这一部分

49:10.660 --> 49:12.060
他只匹配到了这一部分

49:12.660 --> 49:13.060
对不对

49:14.260 --> 49:16.460
那么比方说这里写上一个帽号id

49:16.460 --> 49:17.460
写上一个帽号id

49:17.460 --> 49:18.060
那你看

49:18.060 --> 49:19.260
pass是这一部分

49:19.260 --> 49:20.660
url是这一部分

49:20.660 --> 49:21.060
看到没

49:21.660 --> 49:22.860
这是我们想要的结果

49:23.460 --> 49:24.460
这是我们想要的结果

49:25.860 --> 49:26.060
好

49:26.060 --> 49:27.260
接下来还有一个属性

49:29.060 --> 49:29.660
还有一个属性

49:29.660 --> 49:30.860
你看看这个

49:30.860 --> 49:31.660
看他里边

49:31.660 --> 49:33.260
这个下面这是他的

49:33.260 --> 49:34.260
意思一个z

49:34.660 --> 49:35.660
是不是这个属性

49:35.660 --> 49:38.660
就是事实上是不是精确匹配了

49:38.660 --> 49:39.660
就是你有可能

49:39.660 --> 49:40.760
你没有设置精确匹配

49:40.760 --> 49:41.860
他不是精确匹配的

49:41.860 --> 49:42.660
但是呢

49:42.660 --> 49:45.060
他评济出来事实上是不是精确匹配的

49:45.060 --> 49:46.360
就这么个意思啊

49:46.360 --> 49:47.460
叫做意思一个z

49:48.460 --> 49:49.560
一个z

49:49.560 --> 49:50.260
这个属性

49:51.060 --> 49:51.760
什么意思呢

49:51.760 --> 49:54.260
就说我这里哪怕没有精确匹配

49:54.260 --> 49:55.860
匹配的模式是没有精确匹配的

49:55.860 --> 49:57.260
但是我给的地址是这个

49:57.260 --> 49:58.860
给的是这个地址

49:58.860 --> 49:59.760
那么你看一下这个地址

49:59.760 --> 50:01.160
最终是不是精确匹配的

50:01.160 --> 50:01.760
对吧

50:01.760 --> 50:03.260
这个地址没有精确匹配

50:03.260 --> 50:04.760
这个地址是精确匹配的

50:04.760 --> 50:06.260
这个属性是这么个意思

50:06.260 --> 50:08.760
就是最终事实上是不是精确匹配的

50:08.760 --> 50:11.460
那么怎么来看事实上是不是精确匹配的呢

50:11.460 --> 50:12.460
那还不简单吗

50:12.460 --> 50:14.060
就看他就看这个pass name

50:15.260 --> 50:18.760
是不是跟那个result0

50:18.760 --> 50:20.660
是不是一样的对不对

50:20.660 --> 50:23.060
两个一样的是不是就精确匹配了

50:23.060 --> 50:25.460
你给我传的整个url地址

50:25.460 --> 50:27.160
跟我匹配到的整个路径

50:27.160 --> 50:29.260
跟我匹配到的那一部分是完全一致的

50:29.260 --> 50:30.760
是不是就是精确匹配

50:30.760 --> 50:31.360
对吧

50:31.360 --> 50:32.460
保存你看一下

50:32.460 --> 50:33.260
那么目前呢

50:33.260 --> 50:33.660
你看

50:35.360 --> 50:36.660
放在之前的里面

50:36.660 --> 50:37.060
好

50:37.060 --> 50:39.160
你看目前是不是不是精确匹配

50:39.160 --> 50:39.960
对吧

50:39.960 --> 50:40.160
好

50:40.160 --> 50:40.860
那么我这里呢

50:40.860 --> 50:42.960
把他这个地方去了

50:42.960 --> 50:43.860
保存

50:43.860 --> 50:44.660
你看一下

50:44.660 --> 50:46.060
是不是精确匹配了

50:46.060 --> 50:46.360
对吧

50:46.360 --> 50:47.460
就zq

50:47.460 --> 50:47.960
对不对

50:47.960 --> 50:48.960
是不是精确匹配了

50:50.760 --> 50:52.160
就是这么个意思

50:52.160 --> 50:53.160
就是这么个意思

50:54.260 --> 50:54.760
看没

50:57.260 --> 50:57.560
好

50:57.560 --> 50:59.660
这就是啊

50:59.660 --> 51:00.460
这一部分

51:00.460 --> 51:01.660
那现在也不是精确匹配了

51:01.660 --> 51:02.060
看没

51:05.160 --> 51:05.660
好

51:05.660 --> 51:06.960
那么这就是这个

51:06.960 --> 51:08.560
这个就是这一部分的

51:09.460 --> 51:10.660
模块来代码

51:10.660 --> 51:11.960
有了这个模块之后呢

51:11.960 --> 51:12.960
咱们就可以

51:12.960 --> 51:14.260
根据路径规则

51:14.260 --> 51:15.960
和一个url路径

51:15.960 --> 51:16.960
以及一些配置

51:16.960 --> 51:19.260
来反而回一个march对象

51:19.260 --> 51:20.560
march对象是不是搞定了

51:20.560 --> 51:21.460
你看一下

51:21.460 --> 51:23.060
march对象是不是已经搞定了

51:23.060 --> 51:23.960
我们只要调用这个海硕

51:23.960 --> 51:26.660
是不是就已经能够拿到march对象了

51:26.660 --> 51:27.060
对不对

51:27.060 --> 51:28.560
所以已经能拿到了

51:28.560 --> 51:29.560
啊

51:29.560 --> 51:29.760
对吧

51:29.760 --> 51:30.660
没问题了吧

51:30.660 --> 51:31.360
嗯

51:31.360 --> 51:32.660
就没没啥问题了啊

51:32.660 --> 51:33.760
没啥问题了

51:33.760 --> 51:34.760
嗯

51:34.760 --> 51:34.960
啊

51:34.960 --> 51:35.660
甚至说呢

51:35.660 --> 51:36.360
我们这里

51:36.360 --> 51:37.360
这里甚至说

51:37.360 --> 51:38.460
这个pass name

51:38.460 --> 51:40.560
都可以不用不用让你传递啊

51:40.560 --> 51:42.360
都可以不用让你传递

51:42.360 --> 51:42.460
啊

51:42.460 --> 51:44.760
我们直接去地址栏里边去匹配啊

51:44.760 --> 51:46.260
直接地址栏去匹配啊

51:46.260 --> 51:46.560
算了

51:46.560 --> 51:47.560
还是扔着吧

51:47.560 --> 51:48.360
还是扔着吧

51:48.360 --> 51:49.560
我想一想啊

51:49.560 --> 51:50.360
要不要让他传递

51:50.360 --> 51:50.660
刷了

51:50.660 --> 51:51.460
不要让他传递刷了

51:51.460 --> 51:53.060
我们自己直接来吧啊

51:53.060 --> 51:54.060
直接来得了

51:54.060 --> 51:54.660
这个pass name

51:54.660 --> 51:56.060
实际上我们自己是可以得到的

51:56.060 --> 51:56.860
对不对

51:56.860 --> 51:57.960
来自于哪呢

51:57.960 --> 52:00.260
window.location

52:00.260 --> 52:01.160
叫什么了

52:01.160 --> 52:01.660
啊

52:01.660 --> 52:02.760
pass name

52:02.760 --> 52:03.060
对吧

52:03.060 --> 52:04.360
直接可以拿到对不对

52:04.360 --> 52:06.060
拿到这个pass name

52:06.060 --> 52:06.360
好

52:06.360 --> 52:07.260
保存啊

52:07.260 --> 52:08.860
你看一下吧

52:08.860 --> 52:09.160
嗯

52:09.160 --> 52:10.160
看一下啊

52:10.160 --> 52:10.660
这里呢

52:10.660 --> 52:11.860
匹配出来结果是now

52:11.860 --> 52:13.360
你看是没有匹配的对吧

52:13.360 --> 52:13.560
好

52:13.560 --> 52:14.660
那咱们输入啊

52:15.460 --> 52:15.960
news

52:15.960 --> 52:16.060
啊

52:16.060 --> 52:17.660
我们把这个区区掉了

52:17.660 --> 52:17.760
啊

52:17.760 --> 52:21.710
这个就这个不要了

52:21.710 --> 52:22.110
啊

52:22.110 --> 52:23.610
那么news啊

52:23.610 --> 52:24.310
你看一下

52:24.310 --> 52:25.210
不能匹配啊

52:25.210 --> 52:26.910
news后面加id呢

52:26.910 --> 52:27.610
是不是可以匹配了

52:27.610 --> 52:28.410
exact to

52:28.410 --> 52:29.210
看到没

52:29.210 --> 52:29.910
是不是拿到了

52:29.910 --> 52:31.310
这东西是数据全部拿到了

52:31.310 --> 52:31.610
好

52:31.610 --> 52:32.510
然后呢

52:32.510 --> 52:33.010
嗯

52:33.010 --> 52:34.210
如果说后面还有呢

52:34.210 --> 52:34.910
也能匹配

52:34.910 --> 52:36.110
但是不是啊

52:36.110 --> 52:37.010
不是精确匹配了

52:38.110 --> 52:38.310
好

52:38.310 --> 52:40.610
这就是这个模块的写法

52:40.610 --> 52:41.010
ok

52:41.610 --> 52:42.310
那么讲源吧

52:42.310 --> 52:43.110
这一块啊

52:43.110 --> 52:44.210
大家一定要跟着做

52:44.210 --> 52:45.310
一定要跟着做

52:45.310 --> 52:46.810
千万不要在那瞎听啊

52:46.810 --> 52:48.210
光听没用的啊

52:48.210 --> 52:48.910
一定要去

52:48.910 --> 52:49.610
我写了过后呢

52:49.610 --> 52:51.410
一定要跟着学去写一遍

52:51.410 --> 52:52.210
好

52:52.210 --> 52:54.410
大家来把这个模块写出来啊

52:54.410 --> 52:55.910
pass to rig

52:55.910 --> 52:57.210
pass march

52:57.210 --> 52:58.010
啊

52:58.010 --> 52:58.610
啊

52:58.610 --> 53:00.410
就是匹配路径啊

53:00.410 --> 53:01.310
路径匹配

53:01.310 --> 53:02.010
啊

53:02.010 --> 53:03.410
要算换个名字

53:03.410 --> 53:05.310
换个名字好一点啊

53:05.310 --> 53:06.810
march pass

53:10.210 --> 53:12.010
换个名字啊

53:12.010 --> 53:12.210
好

53:12.210 --> 53:13.910
那么这一块写出来了啊

53:13.910 --> 53:14.410
啊

53:16.410 --> 53:16.710
好

53:17.710 --> 53:17.810
啊

53:17.810 --> 53:18.910
现在大家把它做完啊

53:18.910 --> 53:19.310
做完

53:19.310 --> 53:20.410
有了这个模块之后呢

53:20.410 --> 53:21.010
我们后续了

53:21.010 --> 53:21.410
才能进行

53:21.410 --> 53:22.910
才能继续进行开展

53:22.910 --> 53:23.710
好吧

53:23.710 --> 53:24.610
这是关于这一块

