WEBVTT

00:00.880 --> 00:03.880
导航守卫

00:03.880 --> 00:05.880
如果你学过无忧的话

00:05.880 --> 00:07.880
哪里肯定知道这种东西对吧

00:07.880 --> 00:09.880
如果你没有学过无忧的话

00:09.880 --> 00:11.880
没关系 我给你解释一下

00:11.880 --> 00:13.880
什么叫导航守卫

00:13.880 --> 00:15.880
导航守卫是这么个意思啊

00:15.880 --> 00:18.880
就是

00:18.880 --> 00:22.880
当离开一个页面

00:22.880 --> 00:25.880
进入另一个页面时

00:25.880 --> 00:28.880
触发的事件

00:28.880 --> 00:30.880
触发的函数

00:30.880 --> 00:31.880
实际上在vio里

00:31.880 --> 00:34.880
它是本身就给你实现了导航守卫

00:34.880 --> 00:36.880
但是在reggs rotor里

00:36.880 --> 00:38.880
它是根本就没给你实现导航守卫

00:38.880 --> 00:39.880
压根没有

00:39.880 --> 00:41.880
因为reggs rotor我们反复的强调了

00:41.880 --> 00:43.880
很简单很简单

00:43.880 --> 00:45.880
就是几个组件

00:45.880 --> 00:47.880
把几个组件提供给你

00:47.880 --> 00:52.880
组件里面可以注入一些属性

00:52.880 --> 00:54.880
其他就没了

00:54.880 --> 00:55.880
那导航守卫怎么办呢

00:55.880 --> 00:57.880
我们得自己实现

00:57.880 --> 00:59.880
是这样子

00:59.880 --> 01:00.880
导航守卫

01:00.880 --> 01:01.880
你要去实现导航守卫

01:01.880 --> 01:03.880
你得知道这么一个东西

01:03.880 --> 01:06.880
就是关于history对象

01:06.880 --> 01:09.880
对象里我们随便写个带

01:09.880 --> 01:13.880
把对象打印出来看一下吧

01:13.880 --> 01:14.880
import

01:14.880 --> 01:16.880
然后我们这里导入

01:16.880 --> 01:18.880
browser rotor

01:18.880 --> 01:20.880
这样子

01:20.880 --> 01:22.880
reggs rotor动

01:22.880 --> 01:25.880
browser rotor

01:26.880 --> 01:29.880
然后browser rotor里

01:29.880 --> 01:31.880
我们这里先暂时的这样子写吧

01:31.880 --> 01:33.880
这样子写

01:33.880 --> 01:35.880
这里有两个组件

01:35.880 --> 01:37.880
配级1

01:37.880 --> 01:39.880
页面1

01:39.880 --> 01:41.880
return h1配级1

01:41.880 --> 01:43.880
然后再来一个

01:43.880 --> 01:45.880
配级2

01:45.880 --> 01:49.880
return h1配级2

01:49.880 --> 01:53.830
好那么这里面我们这样子写

01:53.830 --> 01:55.830
rotor

01:56.830 --> 01:58.830
然后这里面两个页面

01:58.830 --> 02:00.830
rot pass

02:00.830 --> 02:03.830
如果是鞋杠配级1的话

02:03.830 --> 02:05.830
那么就是配级1

02:05.830 --> 02:07.830
component

02:07.830 --> 02:11.830
配级1

02:11.830 --> 02:13.830
那如果说是配级2的话

02:13.830 --> 02:15.830
那么就是访问配级2

02:15.830 --> 02:17.830
就这么简单

02:17.830 --> 02:21.830
然后我在这个组件中间

02:21.830 --> 02:24.830
再放一个组件把它包起来

02:24.830 --> 02:26.830
这个组件是我们自己写的组件

02:26.830 --> 02:28.830
以后我们把它做成一个导航守卫

02:28.830 --> 02:29.830
给它取个名字嘛

02:29.830 --> 02:30.830
叫做

02:30.830 --> 02:32.830
road guard

02:32.830 --> 02:33.830
road guard

02:33.830 --> 02:35.830
一个导航守卫这么一个组件

02:35.830 --> 02:36.830
给它写个啥呢

02:36.830 --> 02:38.830
给它写个内组件

02:38.830 --> 02:39.830
内组件

02:39.830 --> 02:40.830
它含组件也无所谓

02:40.830 --> 02:41.830
就这么一个组件

02:41.830 --> 02:43.830
但是它不返回任何东西

02:43.830 --> 02:44.830
就返回DNA无所谓

02:44.830 --> 02:45.830
我们先暂时写到这

02:45.830 --> 02:46.830
暂时写到这

02:46.830 --> 02:48.830
然后我们在这里套一个

02:48.830 --> 02:51.830
road guard

02:51.830 --> 02:52.830
对

02:52.830 --> 02:53.830
套一个这么一个组件

02:53.830 --> 02:54.830
它导到组件了

02:54.830 --> 02:55.830
这东西导到组件了

02:55.830 --> 02:57.830
这里那么放进去

02:57.830 --> 02:59.830
这么一个road guard

02:59.830 --> 03:00.830
这边一个组件

03:00.830 --> 03:01.830
这个组件

03:01.830 --> 03:02.830
给它传了一个俱准

03:02.830 --> 03:03.830
对吧

03:03.830 --> 03:04.830
给它传了一些俱准进去

03:04.830 --> 03:05.830
OK

03:05.830 --> 03:06.830
那么我这里就直接

03:06.830 --> 03:07.830
渲染什么了

03:07.830 --> 03:09.830
它自己本身不渲染任何东西

03:09.830 --> 03:10.830
直接渲染俱准

03:10.830 --> 03:11.830
渲染什么

03:11.830 --> 03:12.830
this props

03:12.830 --> 03:13.830
叫俱准

03:13.830 --> 03:14.830
渲染这个东西

03:14.830 --> 03:16.830
没问题吧

03:16.830 --> 03:18.830
咱们渲染这个东西就行了

03:18.830 --> 03:20.830
把它俱准渲染出来就完事了

03:20.830 --> 03:21.830
那么这里

03:22.830 --> 03:23.830
我在这个组件里边

03:23.830 --> 03:24.830
可能要用到

03:24.830 --> 03:25.830
就是上下文

03:25.830 --> 03:27.830
就是路由上下文里边的

03:27.830 --> 03:28.830
一些属性

03:28.830 --> 03:29.830
什么history

03:29.830 --> 03:30.830
march

03:30.830 --> 03:32.830
还有什么location

03:32.830 --> 03:33.830
要用到这些东西

03:33.830 --> 03:34.830
所以说

03:34.830 --> 03:35.830
我们这里

03:35.830 --> 03:36.830
把它包装一下

03:36.830 --> 03:37.830
用什么包装呢

03:37.830 --> 03:38.830
用withrotor

03:38.830 --> 03:39.830
对吧

03:39.830 --> 03:40.830
我们之前学过的

03:40.830 --> 03:41.830
with

03:41.830 --> 03:43.830
withrotor

03:43.830 --> 03:44.830
from

03:44.830 --> 03:45.830
right

03:45.830 --> 03:46.830
rotor

03:46.830 --> 03:47.830
到处什么

03:47.830 --> 03:49.830
withrotor

03:50.830 --> 03:51.830
把这个road

03:51.830 --> 03:52.830
guard

03:52.830 --> 03:53.830
放进去

03:53.830 --> 03:54.830
好了

03:54.830 --> 03:55.830
那么给它

03:55.830 --> 03:56.830
这样子呢

03:56.830 --> 03:57.830
有了这个高阶主线之后

03:57.830 --> 03:58.830
它里边是不是注入了一些属性

03:58.830 --> 03:59.830
注入了什么属性

03:59.830 --> 04:01.830
那么把这个属性打印出来

04:01.830 --> 04:03.830
this props

04:03.830 --> 04:04.830
打印出来

04:04.830 --> 04:05.830
保存

04:05.830 --> 04:10.360
接下来我们来看一下页面

04:10.360 --> 04:11.360
这里

04:12.360 --> 04:13.360
右键检查

04:13.360 --> 04:15.360
不管它现在访问的是哪个页面

04:15.360 --> 04:16.360
现在肯定是

04:16.360 --> 04:17.360
既不是配几

04:17.360 --> 04:18.360
也不是配几

04:18.360 --> 04:19.360
那如果我们访问配几

04:19.360 --> 04:20.360
配几的话

04:20.360 --> 04:21.360
那么就看到配几了

04:21.360 --> 04:22.360
对吧

04:22.360 --> 04:23.360
我们看一下

04:23.360 --> 04:24.360
主要是看一下打印出来的东西

04:24.360 --> 04:25.360
好

04:25.360 --> 04:26.360
缺水不管

04:26.360 --> 04:28.360
主要是看这个history

04:28.360 --> 04:29.360
history

04:29.360 --> 04:30.360
它是一个对象

04:30.360 --> 04:31.360
这里边有很多东西

04:31.360 --> 04:32.360
对吧

04:32.360 --> 04:33.360
有很多那些东西

04:33.360 --> 04:34.360
那么对象里边

04:34.360 --> 04:36.360
其中有一个方法

04:36.360 --> 04:37.360
我们之前没有接触过

04:37.360 --> 04:39.360
这里有点点新知识

04:39.360 --> 04:40.360
叫做lesson

04:40.360 --> 04:41.360
lesson是什么

04:41.360 --> 04:42.360
监听

04:43.360 --> 04:44.360
监听

04:44.360 --> 04:46.360
监听某一个东西的

04:46.360 --> 04:47.360
变化

04:47.360 --> 04:48.360
监听什么东西的变化

04:48.360 --> 04:50.360
监听的就是地址的变化

04:50.360 --> 04:51.360
也就是说

04:51.360 --> 04:53.360
我们这里可以干嘛呢

04:53.360 --> 04:54.360
这里

04:54.360 --> 04:57.360
我这里可以去实现一个监听

04:57.360 --> 04:58.360
什么时候实现呢

04:58.360 --> 04:59.360
比方说我们可以在这个

04:59.360 --> 05:01.360
component data mount里面

05:01.360 --> 05:02.360
去实现一个监听

05:02.360 --> 05:03.360
什么监听呢

05:03.360 --> 05:05.360
prose history

05:05.360 --> 05:06.360
lesson

05:06.360 --> 05:07.360
监听

05:07.360 --> 05:08.360
那么这个函数怎么用呢

05:08.360 --> 05:10.360
给大家借个笔记

05:11.360 --> 05:12.360
它里边有个lesson

05:12.360 --> 05:13.360
这么一个

05:13.360 --> 05:15.360
这么一个方法

05:15.360 --> 05:16.360
那么这个方法

05:16.360 --> 05:17.360
表示什么意思呢

05:17.360 --> 05:19.360
监听地址的变化

05:21.360 --> 05:23.360
当地址发生

05:23.360 --> 05:25.360
变化时

05:25.360 --> 05:26.360
会

05:26.360 --> 05:28.360
调用

05:28.360 --> 05:29.360
传递的函数

05:29.360 --> 05:30.360
也就是说

05:30.360 --> 05:32.360
这个玩意儿

05:32.360 --> 05:34.360
它有这么一个参数

05:34.360 --> 05:35.360
参数什么呢

05:35.360 --> 05:36.360
就是一个函数

05:36.360 --> 05:37.360
这个函数

05:37.360 --> 05:38.360
这个函数什么时候调用

05:38.360 --> 05:39.360
当地址发生变化的时候

05:39.360 --> 05:40.360
会调用

05:40.360 --> 05:41.360
我们来看一下吧

05:41.360 --> 05:42.360
lesson

05:42.360 --> 05:43.360
它要传递一个参数

05:43.360 --> 05:44.360
这个参数呢

05:44.360 --> 05:45.360
就是一个函数

05:45.360 --> 05:46.360
就是一个函数

05:46.360 --> 05:47.360
我们打印一下

05:47.360 --> 05:49.360
地址变化了

05:49.360 --> 05:50.360
地址变化了

05:50.360 --> 05:51.360
保存

05:52.360 --> 05:54.360
我看一下这里怎么变化地址的问题是

05:54.360 --> 05:55.360
我们写个导航

05:55.360 --> 05:56.360
写个导航

05:56.360 --> 05:58.360
这里随便写个导航

05:58.360 --> 06:00.360
这里写上一个link

06:00.360 --> 06:02.360
link

06:02.360 --> 06:03.360
这里呢

06:03.360 --> 06:05.360
我们用一个ui

06:05.360 --> 06:06.360
li

06:06.360 --> 06:07.360
li下面一个link

06:07.360 --> 06:09.360
link下面的是一个

06:09.360 --> 06:11.360
页面

06:11.360 --> 06:15.310
这里乘1

06:16.310 --> 06:17.310
那么写出来了

06:17.310 --> 06:18.310
把它写出来

06:18.310 --> 06:19.310
那么link2

06:19.310 --> 06:21.310
就是到哪儿了

06:21.310 --> 06:22.310
配级1

06:22.310 --> 06:24.310
这里就是2

06:24.310 --> 06:25.310
到哪儿了

06:25.310 --> 06:26.310
配级2

06:26.310 --> 06:28.310
看一下吧

06:28.310 --> 06:29.310
那么接下来

06:29.310 --> 06:31.310
我们来点击切换配级1和配级2

06:31.310 --> 06:32.310
点切换

06:32.310 --> 06:33.310
你看

06:33.310 --> 06:34.310
是不是发生变化了

06:34.310 --> 06:35.310
切换

06:35.310 --> 06:36.310
你看是不是输出了

06:36.310 --> 06:37.310
你看

06:37.310 --> 06:38.310
不管是这

06:38.310 --> 06:40.310
而且我们点这个浏览器后退

06:40.310 --> 06:42.310
你看是不是也发生变化了

06:42.310 --> 06:44.310
也输出了这个事件

06:44.310 --> 06:45.310
所以说这个函数很简单

06:45.310 --> 06:47.310
你把它传一个函数

06:47.310 --> 06:48.310
那么这个函数里边

06:48.310 --> 06:50.310
它会什么时候调用呢

06:50.310 --> 06:53.310
地址发生变化的时候会调用这个函数

06:53.310 --> 06:55.310
那么这个函数

06:55.310 --> 06:57.310
这个函数本身有没有参数呢

06:57.310 --> 06:59.310
这个函数本身也有参数

06:59.310 --> 07:00.310
它有两个参数

07:00.310 --> 07:03.310
参数1的话是一个location对象

07:03.310 --> 07:05.310
是一个location对象

07:05.310 --> 07:09.310
记录当前的地址信息

07:09.310 --> 07:11.310
也是新地址的信息

07:11.310 --> 07:12.310
你挑转吧

07:12.310 --> 07:13.310
挑转到一个新地址

07:13.310 --> 07:15.310
地址里边的什么past name

07:15.310 --> 07:17.310
还有什么那个当前发达的

07:17.310 --> 07:18.310
我们来看一下吧

07:18.310 --> 07:19.310
看一下吧

07:19.310 --> 07:20.310
这里

07:20.310 --> 07:22.310
这里我们有一个参数

07:22.310 --> 07:23.310
叫location

07:23.310 --> 07:25.310
我们把这个location打印出来

07:25.310 --> 07:26.310
location打印出来

07:26.310 --> 07:27.310
保存给看

07:27.310 --> 07:29.310
一开始没有运行这个事件

07:29.310 --> 07:31.310
它只有变化的时候才会运行

07:31.310 --> 07:32.310
你看

07:32.310 --> 07:33.310
变化了运行了

07:33.310 --> 07:34.310
对不对

07:34.310 --> 07:35.310
这个t不用管

07:35.310 --> 07:37.310
我们以后讲原码的时候会说

07:37.310 --> 07:38.310
哈希

07:38.310 --> 07:40.310
past name search

07:40.310 --> 07:42.310
stats包括状态都有

07:42.310 --> 07:43.310
对吧

07:43.310 --> 07:45.310
它得到一个location对象

07:45.310 --> 07:46.310
这是第一个

07:46.310 --> 07:47.310
第二个参数

07:47.310 --> 07:48.310
还有一个参数

07:48.310 --> 07:49.310
参数2

07:49.310 --> 07:52.310
表示axie

07:52.310 --> 07:53.310
一个制服串

07:53.310 --> 07:55.310
表示

07:55.310 --> 07:58.310
进入该地址的方式

07:58.310 --> 08:00.310
就进这个地址

08:00.310 --> 08:02.310
用什么样的方式来进入这个地址的

08:02.310 --> 08:04.310
那么它的曲子一共有三种

08:04.310 --> 08:05.310
一个是pop

08:05.310 --> 08:06.310
都是制服串

08:06.310 --> 08:07.310
pop

08:07.310 --> 08:08.310
表示的是

08:08.310 --> 08:11.310
通过点击浏览器

08:11.310 --> 08:13.310
后退按钮

08:13.310 --> 08:15.310
后退前进

08:15.310 --> 08:18.310
那么还分开些吧

08:18.310 --> 08:20.310
什么时候取之为pop

08:20.310 --> 08:22.310
通过点击浏览器的后退前进

08:22.310 --> 08:23.310
还有什么呢

08:23.310 --> 08:26.310
调用history

08:26.310 --> 08:28.310
poohy

08:28.310 --> 08:29.310
调用history poohy

08:29.310 --> 08:30.310
点击

08:30.310 --> 08:31.310
超链接

08:31.310 --> 08:33.310
那超链接是不跳转页面的

08:33.310 --> 08:34.310
超链接

08:34.310 --> 08:35.310
不刷新页面的超链接

08:35.310 --> 08:36.310
就是那个link元素

08:36.310 --> 08:37.310
link主键

08:37.310 --> 08:38.310
不要乱上这里

08:38.310 --> 08:39.310
link主键

08:39.310 --> 08:40.310
因为link主键点击过

08:40.310 --> 08:42.310
实际上它用的就是history poohy

08:42.310 --> 08:44.310
用的就是这个方法

08:44.310 --> 08:46.310
不是

08:46.310 --> 08:48.310
这不是pop

08:48.310 --> 08:49.310
pop

08:49.310 --> 08:51.310
调用history的

08:51.310 --> 08:53.310
go

08:53.310 --> 08:54.310
这个函数

08:54.310 --> 08:55.310
-1

08:55.310 --> 08:56.310
传入这个函数

08:56.310 --> 08:58.310
来进行跳转页面

08:58.310 --> 08:59.310
还有什么呢

08:59.310 --> 09:01.310
调用history

09:01.310 --> 09:03.310
go back

09:03.310 --> 09:06.310
调用history

09:06.310 --> 09:09.310
go forward

09:09.310 --> 09:11.310
调用这些方法的时候

09:11.310 --> 09:12.310
它的x

09:12.310 --> 09:13.310
它跳转页面的时候

09:13.310 --> 09:15.310
它的x都是pop

09:15.310 --> 09:16.310
pop是什么意思

09:16.310 --> 09:18.310
表示初战的意思

09:18.310 --> 09:19.310
初战

09:19.310 --> 09:20.310
但是这里的初战

09:20.310 --> 09:22.310
杆子上就感觉乖乖的

09:22.310 --> 09:23.310
这里的初战

09:23.310 --> 09:24.310
它的意思实际上是

09:24.310 --> 09:26.310
表示的是

09:26.310 --> 09:28.310
战中的止战移动

09:28.310 --> 09:30.310
随便建个ppt

09:30.310 --> 09:34.070
随便建个ppt

09:34.070 --> 09:36.070
它指的是什么意思呢

09:36.070 --> 09:37.070
这里的初战

09:37.070 --> 09:38.070
因为我们知道

09:39.070 --> 09:41.070
历史基督战

09:41.070 --> 09:42.070
历史基督战

09:42.070 --> 09:44.070
战里面的数据

09:44.070 --> 09:46.070
战里面的数据

09:46.070 --> 09:48.070
比方说这是这个页面

09:48.070 --> 09:50.070
比方说有两个页面

09:50.070 --> 09:52.070
一个abc

09:52.070 --> 09:53.070
首页和abc

09:53.070 --> 09:54.070
战中有两个页面

09:54.070 --> 09:56.070
那么什么叫做初战

09:56.070 --> 09:57.070
什么叫做pop了

09:57.070 --> 09:58.070
指的是

09:58.070 --> 10:00.070
我们再画一个

10:00.070 --> 10:02.070
123

10:03.070 --> 10:04.070
一开始的

10:04.070 --> 10:05.070
指针是指向这的

10:05.070 --> 10:07.070
指针摸尾的页面

10:07.070 --> 10:09.070
什么叫pop了

10:09.070 --> 10:10.070
在这个位置

10:10.070 --> 10:11.070
pop的意思指的是

10:11.070 --> 10:12.070
指针移动

10:12.070 --> 10:13.070
它这样移动

10:13.070 --> 10:15.070
就返回之前的页面

10:15.070 --> 10:16.070
这样移动

10:16.070 --> 10:17.070
再返回之前的页面

10:17.070 --> 10:18.070
这就是pop

10:18.070 --> 10:20.070
前移动也是指针移动

10:20.070 --> 10:22.070
这些也是pop

10:22.070 --> 10:23.070
指针在这里来回游动

10:23.070 --> 10:24.070
来回游动

10:24.070 --> 10:25.070
这叫pop

10:25.070 --> 10:27.070
pop

10:27.070 --> 10:28.070
这种情况

10:29.070 --> 10:30.070
这些东西

10:30.070 --> 10:32.070
是不是都会触发指针移动

10:32.070 --> 10:34.070
这是pop初战

10:34.070 --> 10:36.070
还有一些情况

10:36.070 --> 10:37.070
pop

10:37.070 --> 10:39.070
pop的话叫做入战

10:40.070 --> 10:42.070
就是有一新页面加入进来了

10:42.070 --> 10:44.070
那么什么情况下会触发入战

10:44.070 --> 10:46.070
点击

10:46.070 --> 10:47.070
超链接

10:47.070 --> 10:49.070
无刷新页面的超链接

10:49.070 --> 10:50.070
就是link

10:50.070 --> 10:52.070
就是link这个元素

10:52.070 --> 10:53.070
点击过后

10:53.070 --> 10:54.070
它调整到另外一个页面

10:54.070 --> 10:56.070
那么它实际上就是

10:56.070 --> 10:57.070
调用的是

10:57.070 --> 10:59.070
history

10:59.070 --> 11:00.070
history

11:00.070 --> 11:01.070
点pop

11:01.070 --> 11:03.070
这些就是入战

11:03.070 --> 11:04.070
入战

11:04.070 --> 11:05.070
那么点击超链接

11:05.070 --> 11:07.070
实际上它本质上就是调用

11:07.070 --> 11:08.070
history点pop

11:08.070 --> 11:09.070
所以说

11:09.070 --> 11:10.070
那么我们通过这个参数

11:10.070 --> 11:11.070
就可以知道

11:11.070 --> 11:12.070
它到底是初战还是入战

11:12.070 --> 11:13.070
入战什么情况

11:13.070 --> 11:14.070
就是多了一个页面

11:14.070 --> 11:16.070
在里面多了一个页面

11:17.070 --> 11:19.070
就这么一种逻辑了

11:19.070 --> 11:20.070
比方说多了一个456

11:20.070 --> 11:21.070
35

11:21.070 --> 11:22.070
多了一个页面

11:22.070 --> 11:23.070
指针

11:23.070 --> 11:24.070
指向新的页面

11:24.070 --> 11:25.070
这就叫做入战

11:25.070 --> 11:26.070
pop

11:27.070 --> 11:30.070
好像是往数组里边加一下

11:31.070 --> 11:32.070
还有第三种

11:32.070 --> 11:33.070
第三种的话

11:33.070 --> 11:35.070
叫做replace

11:35.070 --> 11:36.070
它叫做什么

11:36.070 --> 11:37.070
替换

11:37.070 --> 11:38.070
替换

11:38.070 --> 11:39.070
就是替换指针

11:39.070 --> 11:41.070
当前指向的页面

11:41.070 --> 11:42.070
比方说

11:42.070 --> 11:43.070
这种情况只有一种情况

11:43.070 --> 11:44.070
可以触发这个

11:44.070 --> 11:46.070
history replace

11:46.070 --> 11:47.070
当然有一些组件

11:47.070 --> 11:49.070
它可以使用replace

11:49.070 --> 11:50.070
好像这个link组件

11:50.070 --> 11:51.070
好像也有这个属性

11:51.070 --> 11:52.070
replace

11:52.070 --> 11:53.070
对有这个属性

11:53.070 --> 11:55.070
如果你把它加上replace的话

11:55.070 --> 11:56.070
那么它会替换

11:56.070 --> 11:57.070
它会替换

11:57.070 --> 11:58.070
总之

11:58.070 --> 12:00.070
最终不管你是点超链接

12:00.070 --> 12:01.070
还是什么也好

12:01.070 --> 12:02.070
最终是调整了

12:02.070 --> 12:03.070
那么就是入战

12:03.070 --> 12:04.070
只要最终调整了

12:04.070 --> 12:05.070
replace

12:05.070 --> 12:07.070
那就是替换

12:07.070 --> 12:08.070
那么替换的时候

12:08.070 --> 12:10.070
action就是replace

12:10.070 --> 12:11.070
就这么简单

12:11.070 --> 12:12.070
比方说举个例子

12:12.070 --> 12:14.070
那咱们这里

12:14.070 --> 12:15.070
还有一个参数

12:15.070 --> 12:16.070
就是action

12:16.070 --> 12:18.070
我们把action也打印出来

12:18.070 --> 12:19.070
我们就不打印这个

12:19.070 --> 12:20.070
location

12:20.070 --> 12:21.070
打印这个action

12:21.070 --> 12:22.070
保存

12:22.070 --> 12:23.070
看一下

12:23.070 --> 12:24.070
那么现在

12:24.070 --> 12:25.070
我们倒一变二

12:25.070 --> 12:26.070
你看是不是pop

12:26.070 --> 12:27.070
倒一变一

12:27.070 --> 12:28.070
你看是不是还是pop

12:28.070 --> 12:30.070
然后我们这里后退

12:30.070 --> 12:31.070
是不是pop

12:31.070 --> 12:32.070
然后这里前进

12:32.070 --> 12:33.070
你看是不是pop

12:33.070 --> 12:34.070
对吧

12:34.070 --> 12:35.070
然后我比方说

12:35.070 --> 12:37.070
我把这个link加上一个replace

12:37.070 --> 12:40.070
加上一个replace

12:40.070 --> 12:42.070
那么现在再看

12:42.070 --> 12:43.070
点一变二

12:43.070 --> 12:44.070
你看是不是replace

12:44.070 --> 12:45.070
一变一是不是replace

12:45.070 --> 12:46.070
对吧

12:46.070 --> 12:48.070
那么通过这种方式

12:48.070 --> 12:50.070
你就可以知道

12:50.070 --> 12:51.070
就可以知道

12:51.070 --> 12:52.070
然后在这里边

12:52.070 --> 12:54.070
它到底是

12:54.070 --> 12:56.070
哪种方式挑转的

12:56.070 --> 12:57.070
那你看一下

12:57.070 --> 12:58.070
那现在是不是可以找到

12:58.070 --> 12:59.070
监听

12:59.070 --> 13:02.070
监听那个路由变化的目的了

13:02.070 --> 13:04.070
那么监听这个有什么用呢

13:04.070 --> 13:05.070
有的时候呢

13:05.070 --> 13:06.070
我们可能会记录

13:06.070 --> 13:07.070
做一些日子记录

13:07.070 --> 13:08.070
比方说用户

13:08.070 --> 13:11.070
就是用户挑转页面的时候

13:11.070 --> 13:14.070
那么他访问了哪个页面

13:14.070 --> 13:15.070
在什么时间点

13:15.070 --> 13:16.070
访问了哪个页面

13:16.070 --> 13:18.070
我们就可以做这样的一个

13:18.070 --> 13:19.070
历史记录

13:19.070 --> 13:21.070
就可以达到这么一个效果

13:21.070 --> 13:22.070
就这么个意识

13:22.070 --> 13:23.070
那么这个主意

13:23.070 --> 13:24.070
我们继续完善它

13:24.070 --> 13:26.070
就是我们在这个主见

13:26.070 --> 13:27.070
加载完成之后

13:27.070 --> 13:28.070
监听这么一个东西

13:28.070 --> 13:30.070
那监听过后要做什么事

13:30.070 --> 13:31.070
我肯定做不了

13:31.070 --> 13:33.070
我鬼知道我要做什么事

13:33.070 --> 13:35.070
我也不知道我要做什么事

13:35.070 --> 13:37.070
所以说这里监听

13:37.070 --> 13:39.070
我们这里是要

13:39.070 --> 13:41.070
把这个事情交给别人来处理

13:41.070 --> 13:43.070
比方说我们在使用这个主见

13:43.070 --> 13:44.070
roach guard的时候

13:44.070 --> 13:46.070
我们可以给它传一个的属性

13:46.070 --> 13:48.070
比方说

13:48.070 --> 13:50.070
当页面发生变化的时候

13:50.070 --> 13:52.070
我们要做什么事情

13:52.070 --> 13:54.070
我们这里是不是可以传个函数

13:54.070 --> 13:55.070
你告诉我什么

13:55.070 --> 13:56.070
告诉我location

13:56.070 --> 13:57.070
告诉我x

13:57.070 --> 13:59.070
那么我来做一些事情

13:59.070 --> 14:00.070
我自己来做一些事情

14:00.070 --> 14:02.070
比方说我这里就做日字记录

14:02.070 --> 14:04.070
日字

14:04.070 --> 14:05.070
然后呢

14:05.070 --> 14:06.070
记录啥呢

14:06.070 --> 14:07.070
记录这个

14:07.070 --> 14:08.070
我摸完之后

14:11.070 --> 14:12.070
日字

14:12.070 --> 14:13.070
然后

14:13.070 --> 14:15.070
进入新

14:15.070 --> 14:16.070
进入页面

14:16.070 --> 14:17.070
哪个页面呢

14:19.070 --> 14:20.070
location

14:20.070 --> 14:21.070
不是this

14:21.070 --> 14:22.070
location

14:22.070 --> 14:24.070
第二什么

14:24.070 --> 14:26.070
pass name

14:26.070 --> 14:28.070
pass name

14:28.070 --> 14:29.070
然后呢

14:29.070 --> 14:31.070
进入方式

14:31.070 --> 14:32.070
进入方式

14:32.070 --> 14:33.070
我们做个记录

14:33.070 --> 14:34.070
当然也可以把它

14:34.070 --> 14:35.070
保存到什么

14:35.070 --> 14:36.070
local storage里面

14:36.070 --> 14:37.070
也行

14:37.070 --> 14:38.070
保存到cookie里面也行

14:38.070 --> 14:39.070
发送

14:39.070 --> 14:41.070
通过阿加克斯发送到服务器也行

14:41.070 --> 14:42.070
保存

14:42.070 --> 14:43.070
你看一下

14:43.070 --> 14:45.070
页面1

14:45.070 --> 14:47.070
到这边要调用这个属性

14:47.070 --> 14:48.070
调用这个属性

14:48.070 --> 14:50.070
就是onchain级这个属性

14:50.070 --> 14:51.070
把判断一下吧

14:51.070 --> 14:53.070
如果说

14:53.070 --> 14:55.070
你传递到this props

14:55.070 --> 14:57.070
传递到这个属性onchain级

14:57.070 --> 14:58.070
那我怎么办呢

14:58.070 --> 14:59.070
我去调用他

14:59.070 --> 15:00.070
probs

15:00.070 --> 15:02.070
把location传给你

15:02.070 --> 15:04.070
然后action传给你

15:04.070 --> 15:05.070
你去做什么事情

15:05.070 --> 15:06.070
你去做

15:06.070 --> 15:07.070
好

15:07.070 --> 15:08.070
那么这个主线级

15:08.070 --> 15:09.070
所以很简单

15:09.070 --> 15:10.070
两下就写完了

15:10.070 --> 15:11.070
保存

15:11.070 --> 15:12.070
你看一下吧

15:12.070 --> 15:13.070
点击页面1

15:13.070 --> 15:14.070
记录日字

15:14.070 --> 15:15.070
后退

15:15.070 --> 15:16.070
看一下

15:16.070 --> 15:18.070
记录日字了

15:18.070 --> 15:19.070
对不对

15:19.070 --> 15:20.070
好

15:20.070 --> 15:21.070
那么这个主线就写完了

15:21.070 --> 15:22.070
就写完了

15:22.070 --> 15:23.070
好

15:23.070 --> 15:25.070
如果说你要做很多事情的话

15:25.070 --> 15:26.070
里边还可以再套

15:26.070 --> 15:27.070
再套roadsguard

15:27.070 --> 15:28.070
再套

15:28.070 --> 15:29.070
因为每一个roadsguard

15:29.070 --> 15:30.070
就是这么一个主线

15:30.070 --> 15:31.070
对吧

15:31.070 --> 15:32.070
就是这么一个主线

15:32.070 --> 15:33.070
那么这个主线里边

15:33.070 --> 15:34.070
它就添加一个监听器

15:34.070 --> 15:36.070
因为你每一次调用

15:36.070 --> 15:38.070
他是添加一个监听器

15:38.070 --> 15:39.070
就有点像

15:39.070 --> 15:41.070
ad event listener

15:41.070 --> 15:42.070
就动物里边的

15:42.070 --> 15:44.070
ad event listener

15:44.070 --> 15:45.070
就那种方式

15:45.070 --> 15:48.510
它就添加一个监听器

15:48.510 --> 15:49.510
添加

15:49.510 --> 15:51.510
一个监听器

15:51.510 --> 15:54.820
监听地址的变化

15:54.820 --> 15:55.820
好

15:55.820 --> 15:56.820
那么我们刚才说到的

15:56.820 --> 15:57.820
这个东西

15:57.820 --> 15:58.820
给了他一个新的地址

15:58.820 --> 15:59.820
对吧

15:59.820 --> 16:00.820
就是告诉他

16:00.820 --> 16:01.820
你要进入的是哪一个页面

16:01.820 --> 16:02.820
那如果说

16:02.820 --> 16:03.820
我要获得之前的地址

16:03.820 --> 16:04.820
怎么办呢

16:04.820 --> 16:05.820
比方说我这里

16:05.820 --> 16:06.820
最希望的

16:06.820 --> 16:07.820
他给我传了一个这个东西

16:07.820 --> 16:08.820
之前的地址

16:08.820 --> 16:10.820
prev location

16:10.820 --> 16:12.820
然后当前的地址

16:12.820 --> 16:13.820
一个型

16:13.820 --> 16:14.820
那么到时候我写

16:14.820 --> 16:15.820
希望这样子

16:15.820 --> 16:16.820
从哪个页面

16:16.820 --> 16:17.820
进入哪个页面

16:17.820 --> 16:18.820
从

16:18.820 --> 16:20.820
prev location点

16:20.820 --> 16:21.820
pass name

16:21.820 --> 16:23.820
进入这个页面

16:23.820 --> 16:24.820
我们希望得到

16:24.820 --> 16:25.820
之前的页面

16:25.820 --> 16:27.820
我们可能要进行一些处理

16:27.820 --> 16:28.820
好

16:28.820 --> 16:29.820
那么这个之前的对象

16:29.820 --> 16:30.820
怎么拿到了

16:30.820 --> 16:31.820
也非常非常简单

16:31.820 --> 16:33.820
怎么拿到之前的对象

16:33.820 --> 16:34.820
之前的对象

16:34.820 --> 16:35.820
我们在这里

16:36.820 --> 16:38.820
prev location

16:38.820 --> 16:39.820
就是当前

16:39.820 --> 16:40.820
probs点

16:40.820 --> 16:41.820
什么

16:41.820 --> 16:42.820
location

16:42.820 --> 16:43.820
就是

16:43.820 --> 16:44.820
对

16:44.820 --> 16:45.820
就是这个

16:45.820 --> 16:46.820
属性里边的对象

16:46.820 --> 16:47.820
location对象

16:47.820 --> 16:49.820
在这个事件里边

16:49.820 --> 16:50.820
发生这个事件的时候

16:50.820 --> 16:52.820
拿到的就是之前的那个location

16:52.820 --> 16:54.820
因为这个事件运行的时间点

16:54.820 --> 16:56.820
这也说一下吧

16:56.820 --> 17:00.200
该事件

17:00.200 --> 17:01.200
这个参数

17:01.200 --> 17:03.200
参数这个函数运行的时间点

17:04.200 --> 17:06.200
运行时间点

17:06.200 --> 17:09.200
发生在即将跳转

17:09.200 --> 17:11.200
到新页面

17:11.200 --> 17:13.200
所以说

17:13.200 --> 17:15.200
运行这个函数的时候

17:15.200 --> 17:16.200
还没有真正的跳转到新页面

17:16.200 --> 17:17.200
即将马上就跳转了

17:17.200 --> 17:18.200
运行这个函数

17:18.200 --> 17:19.200
马上就跳转了

17:19.200 --> 17:21.200
所以说你感觉上是同时的

17:21.200 --> 17:22.200
实际上它在运行

17:22.200 --> 17:24.200
跳转到新页面之前

17:25.200 --> 17:26.200
即将跳转到新页面的时候

17:26.200 --> 17:27.200
所以说你这里

17:27.200 --> 17:28.200
直接通过

17:28.200 --> 17:29.200
vis点probs

17:29.200 --> 17:30.200
location

17:30.200 --> 17:31.200
拿到的还是之前的location地址

17:31.200 --> 17:32.200
所以我们把这个东西

17:32.200 --> 17:33.200
传过去就完成了

17:33.200 --> 17:35.830
保存

17:35.830 --> 17:36.830
这边保存

17:38.830 --> 17:39.830
进入页面1

17:39.830 --> 17:40.830
你看

17:42.830 --> 17:44.830
我传的是啥

17:44.830 --> 17:45.830
我传的是啥东西

17:45.830 --> 17:46.830
我的天

17:46.830 --> 17:47.830
我看一下

17:48.830 --> 17:49.830
对了

17:49.830 --> 17:50.830
对了

17:50.830 --> 17:51.830
vis props

17:51.830 --> 17:52.830
location

17:54.830 --> 17:55.830
probs

17:55.830 --> 17:56.830
对了

17:56.830 --> 17:57.830
我看一下

17:57.830 --> 17:58.830
我直接输出一下

17:59.830 --> 18:00.830
vis props

18:00.830 --> 18:01.830
location

18:03.830 --> 18:04.830
对了

18:04.830 --> 18:05.830
对了

18:05.830 --> 18:06.830
没问题

18:06.830 --> 18:07.830
那为什么

18:07.830 --> 18:08.830
我再看一下

18:08.830 --> 18:09.830
点击配级

18:09.830 --> 18:10.830
从

18:10.830 --> 18:11.830
对了

18:11.830 --> 18:12.830
没问题

18:12.830 --> 18:13.830
没问题的

18:14.830 --> 18:15.830
那么现在点击配级

18:15.830 --> 18:16.830
是不是从配级到配级

18:16.830 --> 18:17.830
对吧

18:17.830 --> 18:18.830
方式迫隙

18:18.830 --> 18:19.830
就加了一个页面

18:19.830 --> 18:20.830
哪怕是当前页面

18:20.830 --> 18:21.830
点了过还是会添加一个页面

18:21.830 --> 18:23.830
到那个就是

18:24.830 --> 18:25.830
站里面

18:25.830 --> 18:26.830
点击页面2

18:26.830 --> 18:28.830
你看是不是从配级到配级2

18:28.830 --> 18:30.830
再点一个页面1

18:30.830 --> 18:32.830
是不是又从配级2到配级1

18:32.830 --> 18:33.830
对吧

18:33.830 --> 18:34.830
我们就可以得到

18:34.830 --> 18:35.830
之前的信息

18:35.830 --> 18:36.830
当前的信息

18:36.830 --> 18:37.830
以及你的动作

18:37.830 --> 18:38.830
要做什么事情你自己去做

18:38.830 --> 18:39.830
我不管你

18:39.830 --> 18:40.830
就写完了

18:40.830 --> 18:41.830
就写完了

18:41.830 --> 18:42.830
就是roads guard

18:43.830 --> 18:44.830
好

18:44.830 --> 18:45.830
接下来我们来看一下

18:45.830 --> 18:46.830
这个函数

18:46.830 --> 18:47.830
它还有个反回指

18:47.830 --> 18:48.830
这个nation函数

18:48.830 --> 18:49.830
刚才只说了它的参数

18:49.830 --> 18:50.830
对吧

18:50.830 --> 18:51.830
那么除了参数之外

18:51.830 --> 18:53.830
它还有个反回指

18:56.720 --> 18:57.720
还有一个反回指

18:58.720 --> 18:59.720
反回结果

18:59.720 --> 19:00.720
反回结果

19:00.720 --> 19:01.720
结果是啥呢

19:01.720 --> 19:02.720
反回结果

19:02.720 --> 19:03.720
一个函数

19:03.720 --> 19:05.720
它反回了一个函数

19:05.720 --> 19:06.720
可以使用

19:06.720 --> 19:08.720
可以雕用

19:08.720 --> 19:09.720
该函数

19:09.720 --> 19:11.720
取消监听

19:11.720 --> 19:12.720
你看这个监听

19:12.720 --> 19:13.720
是不是一直进行的

19:13.720 --> 19:14.720
对不对

19:14.720 --> 19:15.720
是不是一直进行的

19:15.720 --> 19:17.720
你可以取消这个监听

19:17.720 --> 19:18.720
不再监听了

19:18.720 --> 19:19.720
不再监听了

19:19.720 --> 19:21.720
那么什么时候不再监听了

19:21.720 --> 19:23.720
什么时候不再监听了

19:25.720 --> 19:26.720
什么时候呢

19:26.720 --> 19:27.720
你可以给它传一个

19:27.720 --> 19:28.720
毁掉函数进来

19:30.720 --> 19:31.720
这样吧

19:32.720 --> 19:33.720
这样子

19:33.720 --> 19:34.720
我们这里

19:35.720 --> 19:37.720
首先我们把这个问题解决

19:37.720 --> 19:38.720
就是

19:38.720 --> 19:40.720
如果说你监听完了过后

19:40.720 --> 19:41.720
你是不是得到一个函数

19:41.720 --> 19:42.720
对吧

19:42.720 --> 19:43.720
得到一个函数

19:45.720 --> 19:47.720
这个函数保持在这个变量里面

19:47.720 --> 19:48.720
雕用这个函数

19:48.720 --> 19:49.720
就可以取消监听

19:49.720 --> 19:51.720
那什么时候取消监听呢

19:51.720 --> 19:53.720
首先有一点是确定的

19:53.720 --> 19:54.720
这个组件被卸载的时候

19:54.720 --> 19:56.720
是不是得取消监听

19:56.720 --> 19:57.720
对吧

19:57.720 --> 19:58.720
你这个组件卸载的时候

19:58.720 --> 19:59.720
不要再监听了

19:59.720 --> 20:00.720
这个没问题吧

20:00.720 --> 20:01.720
这个逻辑

20:01.720 --> 20:02.720
所以说我们

20:02.720 --> 20:03.720
组件卸载的时候

20:03.720 --> 20:04.720
component

20:04.720 --> 20:05.720
will

20:07.720 --> 20:08.720
叫什么

20:09.720 --> 20:11.720
will amount

20:11.720 --> 20:12.720
will amount

20:12.720 --> 20:13.720
在这个时间里

20:13.720 --> 20:15.720
在这个生命周期函数里面

20:15.720 --> 20:16.720
我们是不是要调用这个函数

20:16.720 --> 20:17.720
对吧

20:17.720 --> 20:18.720
要调用这个函数

20:18.720 --> 20:19.720
那这个东西

20:19.720 --> 20:20.720
我们就可以把它保存到Zs里面

20:20.720 --> 20:22.720
保存到Zs里面

20:22.720 --> 20:24.720
Zs on listen

20:24.720 --> 20:25.720
OK

20:25.720 --> 20:27.720
那么这里就是雕用Zs on listen

20:27.720 --> 20:28.720
取消监听

20:28.720 --> 20:29.720
对吧

20:29.720 --> 20:30.720
那这个是毫无疑问的

20:30.720 --> 20:32.720
当然我这里没有去卸载这个组件

20:32.720 --> 20:33.720
比如说这个组件卸载之后

20:33.720 --> 20:34.720
肯定不能再监听了

20:34.720 --> 20:35.720
不能再监听了

20:35.720 --> 20:36.720
这是一个

20:37.720 --> 20:39.720
另外一个

20:39.720 --> 20:40.720
我们也希望

20:40.720 --> 20:42.720
外边的使用者

20:42.720 --> 20:44.720
也可以取消这个监听

20:44.720 --> 20:46.720
取消这个on change的监听

20:47.720 --> 20:48.720
也可以取消

20:48.720 --> 20:50.720
那么外边怎么来操作呢

20:51.720 --> 20:52.720
外边怎么来

20:52.720 --> 20:53.720
怎么来去操作呢

20:53.720 --> 20:54.720
那是一样的

20:54.720 --> 20:55.720
我跟on change

20:55.720 --> 20:57.720
里面给它传一个回调进去

20:57.720 --> 20:59.720
Zs on listen

20:59.720 --> 21:00.720
Zs on listen

21:00.720 --> 21:01.720
这个回调给它传进去

21:02.720 --> 21:03.720
你I取消就取消

21:03.720 --> 21:04.720
比方说吧

21:05.720 --> 21:06.720
这里比方说

21:06.720 --> 21:07.720
举个例子

21:07.720 --> 21:08.720
这里

21:08.720 --> 21:10.720
多了一个参数了

21:10.720 --> 21:11.720
on listen

21:12.720 --> 21:13.720
多了这么一个函数了

21:13.720 --> 21:15.720
那么调这个函数就可以取消

21:15.720 --> 21:17.720
比方说我们做这么一个件事吧

21:18.720 --> 21:19.720
这里写一个变量

21:19.720 --> 21:21.720
caught等于0

21:21.720 --> 21:22.720
caught等于0

21:23.720 --> 21:25.720
每一次运行on change的话

21:25.720 --> 21:26.720
caught加加

21:27.720 --> 21:28.720
然后日字

21:28.720 --> 21:29.720
这里凭借个caught

21:31.720 --> 21:32.720
举个例子

21:32.720 --> 21:33.720
就随便下去一个例子

21:33.720 --> 21:34.720
如果判断一下

21:34.720 --> 21:37.720
caught等于5的时候

21:38.720 --> 21:40.720
那么记住了5次日字过后

21:40.720 --> 21:41.720
我就不再监听这个事件了

21:41.720 --> 21:42.720
举个例子

21:42.720 --> 21:43.720
on listen

21:43.720 --> 21:44.720
保存

21:44.720 --> 21:45.720
你看一下

21:45.720 --> 21:46.720
应该2没问题吧

21:46.720 --> 21:48.720
一日字3 4 5

21:48.720 --> 21:50.720
你看是否后面就不再监听了

21:50.720 --> 21:51.720
对不对

21:51.720 --> 21:54.720
把这个监听的解除权力

21:54.720 --> 21:57.720
也交给Rosgar

21:57.720 --> 21:58.720
也交给Rosgar

21:59.720 --> 22:00.720
看是不是非常简单

22:00.720 --> 22:02.720
超级超级简单

22:02.720 --> 22:05.720
这是监听事件

22:06.720 --> 22:08.720
那么还有一种情况

22:09.720 --> 22:10.720
这是监听

22:10.720 --> 22:11.720
监听

22:12.720 --> 22:15.720
添加一个监听器

22:15.720 --> 22:16.720
添加一个监听器

22:17.720 --> 22:19.720
那么这是个监听事件

22:19.720 --> 22:21.720
那么还有一种情况

22:21.720 --> 22:22.720
这是卸载

22:22.720 --> 22:27.720
卸载监听器

22:27.720 --> 22:28.720
还有一种情况就是

22:28.720 --> 22:30.720
我不是光要监听这个事件

22:30.720 --> 22:32.720
不是光要监听一面变化

22:32.720 --> 22:33.720
我还能够控制它一面

22:33.720 --> 22:35.720
能不能挑战过去

22:35.720 --> 22:36.720
比方有的时候

22:36.720 --> 22:37.720
从A挑战到B没问题

22:37.720 --> 22:39.720
从B挑战到A就不行

22:39.720 --> 22:41.720
我要控制它能不能挑转过去

22:41.720 --> 22:43.720
那么这个东西又怎么控制

22:43.720 --> 22:45.720
这个东西怎么控制

22:45.720 --> 22:47.720
这个东西就不是加监听器

22:47.720 --> 22:48.720
因为监听器的话

22:48.720 --> 22:51.720
它是不能控制页面能不能挑转的

22:51.720 --> 22:53.720
你要控制页面能不能挑转

22:53.720 --> 22:57.720
你需要就是设置主设

22:57.720 --> 22:59.720
设置主设

23:00.720 --> 23:02.720
那么再次要注意

23:02.720 --> 23:05.720
设置主设的话只能写一个

23:05.720 --> 23:06.720
只能设置一个

23:06.720 --> 23:08.720
你不能写很多这个组件

23:08.720 --> 23:09.720
写个主设

23:09.720 --> 23:10.720
后面会覆盖前面的

23:10.720 --> 23:12.720
主设是只能设置一个的

23:12.720 --> 23:14.720
设置主设只能设置一个

23:14.720 --> 23:16.720
那么在一个主设里边

23:16.720 --> 23:18.720
你怎么去玩你自己去玩

23:18.720 --> 23:20.720
我不管你你自己去玩

23:20.720 --> 23:24.720
那么这个设置主设怎么来设置主设呢

23:24.720 --> 23:26.720
This

23:26.720 --> 23:29.720
Props里边有这么一个属性叫做

23:29.720 --> 23:31.720
History里边有一个东西

23:31.720 --> 23:33.720
叫做Block

23:33.720 --> 23:35.720
Block

23:35.720 --> 23:37.720
Block里边

23:37.720 --> 23:39.720
它会传一个制服串

23:39.720 --> 23:41.720
这个制服串表示的是

23:41.720 --> 23:45.720
主设的消息

23:45.720 --> 23:47.720
我们先写

23:47.720 --> 23:49.720
写完了过去就看到效果了

23:49.720 --> 23:50.720
Block

23:50.720 --> 23:52.720
那么里边写一个制服串

23:52.720 --> 23:53.720
比方说

23:53.720 --> 23:55.720
这个制服串我们给它写一个

23:55.720 --> 23:59.720
真的要挑转页面吗

23:59.720 --> 24:01.720
比方说随便写一个

24:01.720 --> 24:03.720
于是这样子

24:03.720 --> 24:05.720
就设置了一个主设

24:05.720 --> 24:06.720
这个主设什么时候发

24:06.720 --> 24:07.720
什么时候起作用呢

24:07.720 --> 24:10.720
是要等到我们挑转页面的时候才会起作用

24:10.720 --> 24:12.720
这里只是添加了一个主设

24:12.720 --> 24:14.720
设置了一个主设

24:14.720 --> 24:15.720
保存你看一下

24:15.720 --> 24:17.720
现在我们挑转页面

24:17.720 --> 24:19.720
从页面2挑转到页面1

24:19.720 --> 24:21.720
你看它弹出了这么一个东西

24:21.720 --> 24:22.720
真的要挑转页面吗

24:22.720 --> 24:23.720
那么这句话哪来的

24:23.720 --> 24:25.720
这句话是不是主设里边的消息

24:25.720 --> 24:26.720
对吧

24:26.720 --> 24:27.720
主设里边的消息

24:27.720 --> 24:28.720
看没

24:28.720 --> 24:29.720
那么点确定

24:29.720 --> 24:30.720
你是不是就挑转了

24:30.720 --> 24:32.720
对就挑转了

24:32.720 --> 24:34.720
没问题吧

24:34.720 --> 24:36.720
如果说你点击到是取消的话

24:36.720 --> 24:37.720
那么就不跳转

24:37.720 --> 24:38.720
比方说跳到页面2

24:38.720 --> 24:39.720
你看点取消

24:39.720 --> 24:41.720
所以就不跳转了

24:41.720 --> 24:42.720
你看还是页面1

24:42.720 --> 24:43.720
看了没

24:43.720 --> 24:44.720
而且事件也没有

24:44.720 --> 24:45.720
监听事件也没有触发

24:45.720 --> 24:46.720
再点点取消

24:46.720 --> 24:48.720
你看说监听事件没有触发

24:48.720 --> 24:50.720
那么这个东西相当于是个啥呢

24:50.720 --> 24:53.720
相当于是一个拦截器

24:53.720 --> 24:56.720
可以拦截它就是

24:56.720 --> 24:58.720
拦截它就是那个挑转

24:58.720 --> 24:59.720
起这么一个作用

24:59.720 --> 25:00.720
明白这个意思吗

25:00.720 --> 25:04.100
起这么一个作用

25:04.100 --> 25:05.100
好

25:05.100 --> 25:07.100
然后现在的问题是啥呢

25:07.100 --> 25:09.100
我们设置了主设

25:09.100 --> 25:10.100
设置了主设过后

25:10.100 --> 25:11.100
我们现在要跳转页面

25:11.100 --> 25:13.100
他给我弹这个玩意儿

25:13.100 --> 25:14.100
平时要弹这个玩意儿

25:14.100 --> 25:15.100
我不想弹这个玩意儿

25:15.100 --> 25:16.100
我有时候像

25:16.100 --> 25:18.100
做一些别的事情

25:18.100 --> 25:20.100
平时一定要弹这个玩意儿了

25:20.100 --> 25:22.100
那么这个东西怎么来控制呢

25:22.100 --> 25:23.100
这个东西

25:23.100 --> 25:25.100
这个东西的控制方式

25:25.100 --> 25:27.100
不在这

25:27.100 --> 25:29.100
它不在这

25:29.100 --> 25:30.100
它在哪呢

25:30.100 --> 25:32.100
它的控制方式

25:32.100 --> 25:33.100
实际上这里

25:33.100 --> 25:35.100
只是设置了一个主设

25:35.100 --> 25:37.100
写了一个消息

25:37.100 --> 25:39.100
当真实的发生挑转的时候

25:39.100 --> 25:41.100
页面挑转的时候

25:41.100 --> 25:42.100
它要干嘛呢

25:42.100 --> 25:45.100
它会去调用一个函数

25:45.100 --> 25:47.100
这个函数在哪呢

25:47.100 --> 25:49.100
这个函数在这

25:49.100 --> 25:50.100
在这

25:50.100 --> 25:52.100
在柔特组建里边

25:52.100 --> 25:53.100
根组建

25:53.100 --> 25:54.100
柔特里边

25:54.100 --> 25:55.100
柔特组建里边

25:55.100 --> 25:57.100
有个这么一个属性

25:57.100 --> 25:58.100
我们意思没有用吗

25:58.100 --> 25:59.100
这是

25:59.100 --> 26:00.100
因为平时用不到

26:00.100 --> 26:01.100
不怎么用得到

26:01.100 --> 26:04.100
戒指User Confirmation

26:04.100 --> 26:06.100
有这么一个属性

26:06.100 --> 26:09.100
这个属性配置的就是一个函数

26:09.100 --> 26:11.100
配置的就是这么一个函数

26:11.100 --> 26:13.100
这个函数干

26:13.100 --> 26:14.100
我们看一下

26:14.100 --> 26:15.100
这里

26:15.100 --> 26:16.100
它默认的

26:16.100 --> 26:17.100
默认情况下

26:17.100 --> 26:19.100
这个函数会给你弹出一个

26:19.100 --> 26:20.100
就是像刚才看到的那样子

26:20.100 --> 26:21.100
弹出这么一个东西

26:21.100 --> 26:23.100
这是它默认的行为

26:23.100 --> 26:24.100
能不能改了

26:24.100 --> 26:25.100
当然可以改

26:25.100 --> 26:26.100
我把这个函数改一下

26:26.100 --> 26:28.100
比方说

26:28.100 --> 26:30.100
页面

26:30.100 --> 26:32.100
想

26:32.100 --> 26:34.100
要跳转

26:34.100 --> 26:35.100
没办法

26:35.100 --> 26:36.100
我不给你跳转

26:36.100 --> 26:37.100
我啥都不做

26:37.100 --> 26:38.100
就说出一句话

26:38.100 --> 26:40.100
你看一下

26:40.100 --> 26:42.100
我们这里点击页面1

26:42.100 --> 26:43.100
说出来这句话

26:43.100 --> 26:44.100
点击页面2

26:44.100 --> 26:45.100
说出来这句话

26:45.100 --> 26:46.100
点击页面1

26:46.100 --> 26:48.100
你看一下页面变了没

26:48.100 --> 26:49.100
页面变没

26:49.100 --> 26:50.100
地址变没

26:50.100 --> 26:52.100
所以都没有跳转

26:52.100 --> 26:54.100
没有发生任何变化

26:54.100 --> 26:56.100
那么没有发生任何变化

26:56.100 --> 26:57.100
为什么呢

26:57.100 --> 26:59.100
因为这个函数没有允许它变

26:59.100 --> 27:00.100
它是一个拦截器

27:00.100 --> 27:01.100
我拦截了

27:01.100 --> 27:03.100
不允许变

27:03.100 --> 27:04.100
不允许变

27:04.100 --> 27:05.100
就这么个意思

27:05.100 --> 27:07.100
我不允许变

27:07.100 --> 27:08.100
没问题吧

27:08.100 --> 27:09.100
没问题

27:09.100 --> 27:11.100
应该是没问题的

27:11.100 --> 27:12.100
好

27:12.100 --> 27:14.100
那么现在

27:14.100 --> 27:16.100
有这么几个问题要解决

27:16.100 --> 27:17.100
第一个问题

27:17.100 --> 27:18.100
就是这里的消息

27:18.100 --> 27:19.100
就是我们现在知道了

27:19.100 --> 27:20.100
跳转页面的时候

27:20.100 --> 27:22.100
它要经过这么一个函数

27:22.100 --> 27:23.100
它会经过这么一个函数

27:23.100 --> 27:24.100
但是前提条件

27:24.100 --> 27:27.100
你在设置一个主设

27:27.100 --> 27:28.100
设置的主设之后

27:28.100 --> 27:29.100
那么跳转过后

27:29.100 --> 27:31.100
它会运行这个函数

27:31.100 --> 27:32.100
那么主设这里

27:32.100 --> 27:34.100
我们不是传了个消息吗

27:34.100 --> 27:36.100
那在这个函数里边怎么来去

27:36.100 --> 27:38.100
得到这个消息呢

27:38.100 --> 27:39.100
跳转页面的时候

27:39.100 --> 27:40.100
它怎么来得到这个消息呢

27:40.100 --> 27:41.100
这个函数的第1个函数

27:41.100 --> 27:42.100
就是个消息

27:42.100 --> 27:44.100
看一下

27:44.100 --> 27:45.100
消息

27:45.100 --> 27:46.100
评价一下

27:46.100 --> 27:47.100
Message

27:47.100 --> 27:48.100
保存

27:48.100 --> 27:50.100
你看一下

27:50.100 --> 27:51.100
页面2

27:51.100 --> 27:53.100
真的要跳转页面吗

27:53.100 --> 27:54.100
什么个消息收到了

27:54.100 --> 27:55.100
对不对

27:55.100 --> 27:56.100
这个Message消息收到了

27:56.100 --> 27:57.100
注意我再说一次

27:57.100 --> 27:59.100
这个函数

27:59.100 --> 28:00.100
哪怕设置了

28:00.100 --> 28:02.100
但是如果你不设置主设的话

28:02.100 --> 28:03.100
没用

28:03.100 --> 28:04.100
如果你没有主设的话

28:04.100 --> 28:05.100
是没用的

28:05.100 --> 28:06.100
你看一下

28:06.100 --> 28:07.100
是没用的

28:07.100 --> 28:08.100
对吧

28:08.100 --> 28:11.100
只有你设置了主设之后

28:11.100 --> 28:13.100
只要你设置了主设

28:13.100 --> 28:15.100
ok 那它就有用了

28:15.100 --> 28:16.100
它有什么样的用呢

28:16.100 --> 28:18.100
它有什么样的用呢

28:18.100 --> 28:20.100
它的用处就是

28:20.100 --> 28:22.100
当我们跳转页面的时候

28:22.100 --> 28:23.100
它会去调用这个函数

28:23.100 --> 28:25.100
并且把主设消息传给你

28:25.100 --> 28:26.100
主设消息传给你

28:26.100 --> 28:27.100
你只要有主设

28:27.100 --> 28:28.100
那么它就会调用这个函数

28:28.100 --> 28:30.100
没有主设是不会调用的

28:30.100 --> 28:32.100
明白这个意思吧

28:32.100 --> 28:33.100
你可以想象成为

28:33.100 --> 28:36.100
在两个页面跳转之间

28:36.100 --> 28:39.100
从页面A跳转到页面B

28:39.100 --> 28:41.100
从这个页面跳转到这个页面

28:41.100 --> 28:42.100
两个页面

28:42.100 --> 28:44.100
一个A 一个B

28:44.100 --> 28:45.100
默认情况下

28:45.100 --> 28:46.100
它啥都没干

28:46.100 --> 28:47.100
啥都没干

28:47.100 --> 28:48.100
如果说

28:48.100 --> 28:49.100
你给它设置的主设

28:49.100 --> 28:51.100
就相当于是在A和B

28:51.100 --> 28:52.100
两个页面之间

28:52.100 --> 28:53.100
两个页面之间

28:53.100 --> 28:55.100
加了一个主设

28:56.100 --> 28:58.100
相当于是拦截器

28:58.100 --> 28:59.100
拦截器

28:59.100 --> 29:00.100
加这么一个东西

29:00.100 --> 29:01.100
那么跳转的时候

29:01.100 --> 29:02.100
它一定要经过拦截器

29:02.100 --> 29:03.100
拦截器干嘛呢

29:03.100 --> 29:06.100
拦截器它就会调用

29:09.100 --> 29:11.100
号箭头

29:11.100 --> 29:12.100
它就会调用啥

29:12.100 --> 29:13.100
调用那个

29:13.100 --> 29:14.100
那个方法

29:14.100 --> 29:16.100
什么方法

29:16.100 --> 29:19.660
这个方法名字叫做

29:19.660 --> 29:23.660
get user confirmation

29:23.660 --> 29:25.660
得到一个用户的确证

29:25.660 --> 29:26.660
确证

29:26.660 --> 29:28.660
就是到底要不要跳转

29:28.660 --> 29:29.660
要不要跳转

29:29.660 --> 29:30.660
需要确证一下

29:30.660 --> 29:31.660
当然要不要确证

29:31.660 --> 29:32.660
要不要给用户确证啊

29:32.660 --> 29:33.660
随便你

29:33.660 --> 29:34.660
看你边待嘛

29:34.660 --> 29:36.660
比方刚才我们只是打晕了一句话

29:36.660 --> 29:37.660
对吧

29:37.660 --> 29:38.660
只是打晕了一句话

29:38.660 --> 29:39.660
并没有让用户确证

29:39.660 --> 29:40.660
就看你怎么去写代嘛

29:40.660 --> 29:42.660
总之它会调用这个函数

29:42.660 --> 29:44.660
并且把刚才的主设消息

29:44.660 --> 29:46.660
把刚才的主设消息

29:47.660 --> 29:48.660
消息

29:48.660 --> 29:49.660
它会传递过来

29:49.660 --> 29:51.660
传递到这个函数里边去

29:51.660 --> 29:52.660
那么这个函数

29:52.660 --> 29:54.660
它来决定要不要跳转

29:54.660 --> 29:55.660
那它怎么来决定呢

29:55.660 --> 29:57.660
你看目前它是不是没有跳转

29:57.660 --> 29:58.660
无论如何都不会跳转

29:58.660 --> 29:59.660
对不对

29:59.660 --> 30:00.660
那它怎么来决定呢

30:00.660 --> 30:02.660
它是靠这个方式来决定的

30:02.660 --> 30:03.660
它有第二个函数

30:03.660 --> 30:04.660
叫callback

30:04.660 --> 30:06.660
一个回调函数

30:06.660 --> 30:08.660
那么如果说你要跳转的话

30:08.660 --> 30:10.660
那么你调用这个函数为去

30:10.660 --> 30:12.660
如果你不跳转的话

30:12.660 --> 30:13.660
调用这个函数

30:13.660 --> 30:14.660
但是你可以不用调用那种函数

30:14.660 --> 30:16.660
或者是该传force都行

30:16.660 --> 30:18.660
你可以不用调用这个函数

30:18.660 --> 30:19.660
可能就这么个意思

30:19.660 --> 30:20.660
那你把它设为去的话

30:20.660 --> 30:22.660
那么就表示要跳转

30:22.660 --> 30:23.660
看一下吧

30:24.660 --> 30:25.660
是不是可以跳转了

30:25.660 --> 30:26.660
对不对

30:26.660 --> 30:27.660
是不是可以跳转了

30:27.660 --> 30:28.660
也触发了粒声的

30:28.660 --> 30:29.660
对不对

30:29.660 --> 30:30.660
也触发了粒声的

30:30.660 --> 30:31.660
就这么个意思

30:32.660 --> 30:33.660
好 这里咱们记一笔吧

30:35.660 --> 30:36.660
那么Hitway对象里边

30:36.660 --> 30:38.660
还有一个函数叫做

30:38.660 --> 30:39.660
block

30:40.660 --> 30:42.660
设置一个主设

30:42.660 --> 30:45.660
并同时设置

30:47.660 --> 30:49.660
主设消息

30:50.660 --> 30:54.660
当页面发生跳转时

30:55.660 --> 30:56.660
会将

30:56.660 --> 30:58.660
会进入主设

30:58.660 --> 31:00.660
会进入主设

31:00.660 --> 31:02.660
并将主设消息

31:02.660 --> 31:04.660
主设消息

31:05.660 --> 31:07.660
传递到

31:08.660 --> 31:10.660
路由根主键

31:10.660 --> 31:12.660
路由根主键

31:13.660 --> 31:14.660
什么方法

31:14.660 --> 31:15.660
get

31:15.660 --> 31:17.660
confer

31:17.660 --> 31:18.660
get user

31:18.660 --> 31:20.660
confirmation

31:20.660 --> 31:21.660
这个方法

31:22.660 --> 31:23.660
它就做这么一件事

31:23.660 --> 31:24.660
一看这个图就明白了

31:24.660 --> 31:25.660
加了这个蓝接器

31:25.660 --> 31:26.660
就相当于是主设

31:27.660 --> 31:29.660
那么加了这个东西过了跳转的时候

31:29.660 --> 31:30.660
先进入它

31:30.660 --> 31:31.660
它会怎么做什么呢

31:31.660 --> 31:32.660
它会调用这个函数

31:32.660 --> 31:33.660
把消息传过去

31:33.660 --> 31:35.660
那么让这个函数来决定

31:35.660 --> 31:36.660
要不要跳转

31:36.660 --> 31:37.660
要不要跳转

31:37.660 --> 31:39.660
它为什么要把这个分开

31:39.660 --> 31:40.660
分开写呢

31:40.660 --> 31:41.660
一看

31:41.660 --> 31:42.660
主设我们在这里写的

31:42.660 --> 31:43.660
对吧

31:43.660 --> 31:44.660
主设我们在这里写的

31:44.660 --> 31:46.660
然后这个函数在这里写的

31:46.660 --> 31:47.660
可没

31:47.660 --> 31:48.660
它为什么要把它分开呢

31:48.660 --> 31:49.660
它的意思就是说

31:49.660 --> 31:51.660
有的时候我们

31:51.660 --> 31:53.660
一般来说这个函数

31:53.660 --> 31:54.660
它用来做什么呢

31:54.660 --> 31:55.660
用来就是

31:55.660 --> 31:57.660
就是用来提示一些消息的

31:57.660 --> 31:58.660
提示用户一些消息的

31:58.660 --> 32:00.660
一般来说消息都是统一提示的

32:00.660 --> 32:02.660
提示的消息呢

32:02.660 --> 32:03.660
基本上它的央视啊

32:03.660 --> 32:05.660
它代码基本上都有一样

32:05.660 --> 32:06.660
提示的消息一样

32:06.660 --> 32:08.660
代码的一些都有一样

32:08.660 --> 32:09.660
不一样的是什么

32:09.660 --> 32:10.660
不一样的是消息内容

32:10.660 --> 32:11.660
所以说呢

32:11.660 --> 32:13.660
消息内容让主设来控制

32:13.660 --> 32:15.660
主设来控制消息内容

32:15.660 --> 32:17.660
它只管它的消息提示逻辑

32:17.660 --> 32:18.660
就完事了

32:18.660 --> 32:19.660
逻辑往往是统一的

32:19.660 --> 32:21.660
因此它把用这种方式来分开了

32:21.660 --> 32:23.660
好吧

32:23.660 --> 32:24.660
好

32:24.660 --> 32:25.660
那么这里再记一笔啊

32:25.660 --> 32:26.660
block

32:26.660 --> 32:28.660
就是还有一个方法

32:28.660 --> 32:31.660
就是那个路由根主键

32:31.660 --> 32:32.660
根主键

32:32.660 --> 32:33.660
就是browser

32:33.660 --> 32:34.660
rotor

32:34.660 --> 32:35.660
或者是hashrotor都有

32:35.660 --> 32:37.660
那么这个get user confirmation

32:37.660 --> 32:39.660
这个方法

32:39.660 --> 32:40.660
那么这个方法呢

32:40.660 --> 32:41.660
它的参数呢

32:41.660 --> 32:43.660
是一个函数

32:43.660 --> 32:44.660
这个函数里边呢

32:44.660 --> 32:45.660
一个参数

32:45.660 --> 32:46.660
参数一

32:46.660 --> 32:47.660
函数里边的参数啊

32:47.660 --> 32:49.660
get user confirmation

32:49.660 --> 32:50.660
参数是一个函数

32:50.660 --> 32:51.660
本身是一个函数

32:51.660 --> 32:53.660
然后这个函数里边参数一呢

32:53.660 --> 32:54.660
表示的是

32:54.660 --> 32:55.660
主设消息

32:55.660 --> 32:57.660
参数二呢

32:57.660 --> 32:58.660
表示的是

33:01.660 --> 33:02.660
参数二表示的是

33:02.660 --> 33:04.660
一个回调函数

33:04.660 --> 33:05.660
回调函数

33:05.660 --> 33:07.660
雕用该函数

33:08.660 --> 33:10.660
并传递去

33:10.660 --> 33:12.660
则表示

33:12.660 --> 33:14.660
进入到新页面

33:14.660 --> 33:16.660
否则

33:16.660 --> 33:18.660
进入到

33:18.660 --> 33:19.660
否则

33:19.660 --> 33:20.660
不做任何操作

33:20.660 --> 33:22.660
不做任何操作

33:24.660 --> 33:26.660
就这么一个回调函数

33:26.660 --> 33:28.660
get user confirmation

33:28.660 --> 33:30.660
如果说你以后要做一些提示的话

33:30.660 --> 33:32.660
你就可以把怎么去提示

33:32.660 --> 33:33.660
代码写到这

33:33.660 --> 33:35.660
比方说你要谈一个div出来

33:35.660 --> 33:36.660
或者

33:36.660 --> 33:37.660
要谈一个div出来

33:37.660 --> 33:38.660
或者像

33:38.660 --> 33:40.660
刚才他那样子

33:40.660 --> 33:41.660
用一个confer

33:41.660 --> 33:43.660
用一个window.confer

33:43.660 --> 33:44.660
都可以

33:44.660 --> 33:45.660
你要写什么代码

33:45.660 --> 33:47.660
你自己去写

33:47.660 --> 33:48.660
那么你写完了过后

33:48.660 --> 33:50.660
以后真的要谈的时候

33:50.660 --> 33:52.660
你去设置一个主设

33:52.660 --> 33:55.660
你去设置一个主设就完成了

33:55.660 --> 33:57.660
没有这个意思吗

33:57.660 --> 33:58.660
那么这里呢

33:58.660 --> 33:59.660
我们看一下

33:59.660 --> 34:00.660
他刚才是怎么写的呢

34:00.660 --> 34:01.660
刚才一个默认值

34:01.660 --> 34:02.660
这个属性有个默认值

34:02.660 --> 34:04.660
我们没有设置的时候

34:04.660 --> 34:06.660
他谈了个窗口出来

34:06.660 --> 34:07.660
他怎么写的呢

34:07.660 --> 34:08.660
他写法非常简单

34:08.660 --> 34:09.660
他这样子写的

34:09.660 --> 34:10.660
一句话就写出来了

34:10.660 --> 34:11.660
callback

34:11.660 --> 34:12.660
callback设为处

34:12.660 --> 34:13.660
是不是就可以跳转

34:13.660 --> 34:14.660
callback设为forced

34:14.660 --> 34:15.660
就不能跳转

34:15.660 --> 34:16.660
那么到底是处还是forced

34:16.660 --> 34:18.660
取决于window.confer

34:18.660 --> 34:20.660
这个函数的反回结果

34:20.660 --> 34:21.660
这个人应该见过吧

34:21.660 --> 34:22.660
这个函数应该见过吧

34:22.660 --> 34:23.660
我们来看一下吧

34:23.660 --> 34:25.660
window.confer

34:25.660 --> 34:26.660
随便写个

34:26.660 --> 34:27.660
这是消息

34:27.660 --> 34:28.660
你看一下就这个

34:28.660 --> 34:29.660
就这个消息

34:29.660 --> 34:30.660
当你点确定的时候

34:30.660 --> 34:32.660
他得到就是处

34:32.660 --> 34:34.660
当你点取消的时候

34:34.660 --> 34:35.660
得到就是forced

34:35.660 --> 34:36.660
所以说

34:36.660 --> 34:37.660
他直接把这个传进去

34:37.660 --> 34:39.660
message这里写

34:39.660 --> 34:40.660
把你的message传进去

34:40.660 --> 34:42.660
他可以用建筒还说的话

34:42.660 --> 34:43.660
那么这里呢

34:43.660 --> 34:44.660
直接这样子写

34:44.660 --> 34:45.660
这是他的默认字

34:45.660 --> 34:46.660
默认字就是这样子写的

34:46.660 --> 34:48.660
所以说刚才我们可以看到

34:48.660 --> 34:49.660
这样的效果

34:49.660 --> 34:50.660
为什么

34:50.660 --> 34:51.660
因为他这样子写的

34:51.660 --> 34:52.660
看一下吧

34:52.660 --> 34:53.660
你看是不是就这样子了

34:53.660 --> 34:54.660
对不对

34:54.660 --> 34:56.660
没问题吧

34:56.660 --> 34:57.660
这就是

34:57.660 --> 34:58.660
这一块

34:58.660 --> 34:59.660
get the user confirm

34:59.660 --> 35:00.660
没醒

35:00.660 --> 35:01.660
他跟那个blog

35:01.660 --> 35:02.660
来联用

35:02.660 --> 35:03.660
来联用

35:03.660 --> 35:04.660
好最终我们回到这里

35:04.660 --> 35:05.660
我们的问题

35:05.660 --> 35:07.660
我们的问题是啥呢

35:07.660 --> 35:08.660
我们的问题是

35:08.660 --> 35:10.660
他除了有这个事件之外

35:10.660 --> 35:12.660
他还要多一个事件

35:12.660 --> 35:15.660
就是当他挑转的时候

35:15.660 --> 35:18.660
我们要能够控制他能不能挑转

35:18.660 --> 35:20.660
那么这件事情的话

35:20.660 --> 35:21.660
如果要做这件事情的话

35:21.660 --> 35:23.660
那是不是要把它集变往上提

35:23.660 --> 35:25.660
因为他肯定要设立到这个方法

35:25.660 --> 35:26.660
对吧

35:26.660 --> 35:27.660
要在这个方法里面处理

35:27.660 --> 35:28.660
他到底能不能挑转

35:28.660 --> 35:29.660
对不对

35:29.660 --> 35:30.660
要在这里处理

35:30.660 --> 35:31.660
对吧

35:31.660 --> 35:32.660
因此他的集变往上提

35:32.660 --> 35:33.660
所以说呢

35:33.660 --> 35:34.660
我们最终

35:34.660 --> 35:35.660
会做成什么呢

35:35.660 --> 35:37.660
把它做成一个根组件

35:37.660 --> 35:38.660
也就是说

35:38.660 --> 35:39.660
没有这个rotor了

35:39.660 --> 35:42.300
没有这个rotor了

35:42.300 --> 35:43.300
直接就是Rose God

35:43.300 --> 35:47.250
把它做成路由根组件

35:47.250 --> 35:48.250
好

35:48.250 --> 35:49.250
然后我们到这个组件里面来

35:49.250 --> 35:50.250
我们这里呢

35:50.250 --> 35:51.250
使用比方说

35:51.250 --> 35:52.250
使用browser rotor

35:52.250 --> 35:54.250
browser rotor

35:54.250 --> 35:55.250
在这里

35:55.250 --> 35:56.250
Rotor

35:56.250 --> 35:57.250
好

35:57.250 --> 35:59.250
那么这里边呢

35:59.250 --> 36:00.250
你看我就

36:00.250 --> 36:01.250
在这里边

36:01.250 --> 36:02.250
我们这样子写

36:02.250 --> 36:05.250
在这里边去套一个

36:05.250 --> 36:09.250
套一个什么呢

36:11.560 --> 36:12.560
套一个什么呢

36:12.560 --> 36:13.560
看着啊

36:13.560 --> 36:16.560
我们在这里去套一个rotor

36:16.560 --> 36:18.560
套一个rotor

36:18.560 --> 36:19.560
然后呢

36:19.560 --> 36:20.560
把切入准放进来

36:20.560 --> 36:21.560
这是切入准

36:21.560 --> 36:22.560
对吧

36:22.560 --> 36:23.560
把放进来

36:23.560 --> 36:24.560
好

36:24.560 --> 36:25.560
那么这个rotor

36:25.560 --> 36:26.560
为什么爆错

36:28.560 --> 36:29.560
怎么爆错呢

36:29.560 --> 36:30.560
react

36:32.560 --> 36:33.560
看着啊

36:33.560 --> 36:34.560
那咱们这个组件

36:34.560 --> 36:35.560
要稍微做一下改变

36:35.560 --> 36:36.560
稍微做一下改变

36:36.560 --> 36:38.560
改变啥呢

36:38.560 --> 36:39.560
就是说

36:39.560 --> 36:40.560
我们呢

36:40.560 --> 36:41.560
这里呢

36:41.560 --> 36:43.560
除了有这个监听器之外

36:43.560 --> 36:45.560
除了有监听器之外

36:45.560 --> 36:46.560
我还要做

36:46.560 --> 36:48.560
就是还要做拦接器

36:48.560 --> 36:49.560
而拦接器呢

36:49.560 --> 36:50.560
是放到这个根组件

36:50.560 --> 36:52.560
路由根组件里面的rotor

36:52.560 --> 36:53.560
那么我这个组件呢

36:53.560 --> 36:54.560
把它包装一下

36:54.560 --> 36:55.560
包装一个根组件

36:55.560 --> 36:57.560
那么就形成这么一种结构

36:57.560 --> 36:58.560
啊看着啊

36:58.560 --> 37:00.560
形成这么的这么一种结构

37:00.560 --> 37:01.560
把个结构画出来

37:01.560 --> 37:02.560
那肯定要做一些改变啊

37:02.560 --> 37:03.560
肯定要做一些改变

37:03.560 --> 37:04.560
现在呢

37:04.560 --> 37:06.560
我们整个组件呢是

37:06.560 --> 37:09.560
叫做rot God

37:10.560 --> 37:12.560
整个组件是这个组件

37:12.560 --> 37:14.870
嗯

37:14.870 --> 37:16.870
对齐文本领导对齐

37:16.870 --> 37:18.870
这是我们目前的整个组件

37:18.870 --> 37:19.870
好这个组件里面呢

37:19.870 --> 37:21.870
套了一个

37:21.870 --> 37:23.870
套了一个

37:23.870 --> 37:27.380
画一下啊

37:27.380 --> 37:29.380
套了一个 browser

37:29.380 --> 37:31.380
rotor

37:31.380 --> 37:33.380
套了一个 browser rotor

37:33.380 --> 37:35.380
这就是路由根组件了对吧

37:35.380 --> 37:36.380
路由根组件了

37:36.380 --> 37:37.380
那么我

37:37.380 --> 37:39.380
我们是不是可以往这个 browser rotor

37:39.380 --> 37:40.380
里面注册时间了

37:40.380 --> 37:41.380
对不对

37:41.380 --> 37:42.380
是不是可以往这里注册时间了

37:42.380 --> 37:45.380
我们先暂时把监听器的一些去掉啊

37:45.380 --> 37:46.380
我们这里复制一下嘛

37:46.380 --> 37:47.380
啊以后

37:47.380 --> 37:48.380
以后再

37:48.380 --> 37:49.380
再扣避过来

37:49.380 --> 37:50.380
好那么现在呢

37:50.380 --> 37:52.380
我们把先监听器先去掉啊先去掉

37:52.380 --> 37:53.380
看着啊

37:53.380 --> 37:54.380
我们现在只管

37:54.380 --> 37:55.380
只管蓝接器

37:55.380 --> 37:56.380
啊

37:56.380 --> 37:57.380
现在只管蓝接器

37:57.380 --> 37:58.380
App

37:58.380 --> 37:59.380
这样子

37:59.380 --> 38:01.380
监听器先不要

38:01.380 --> 38:03.380
以后再把监听器加上

38:03.380 --> 38:05.380
好回过头呢

38:05.380 --> 38:08.380
再只管蓝接啊蓝接

38:08.380 --> 38:09.380
怎么蓝接呢

38:09.380 --> 38:10.380
是不是在这里写个函数

38:10.380 --> 38:12.380
get user confirmation

38:12.380 --> 38:13.380
conformation

38:13.380 --> 38:14.380
对吧

38:14.380 --> 38:15.380
掉用这个函数的时候干嘛呢

38:15.380 --> 38:17.380
我们这里写个函数啊

38:17.380 --> 38:19.380
handle confer

38:20.380 --> 38:22.380
handle confer

38:25.380 --> 38:26.380
confer里边不是有

38:26.380 --> 38:27.380
那么这里传递过来啊

38:27.380 --> 38:29.380
this handle confer

38:29.380 --> 38:30.380
好这里边不是有参数吗

38:30.380 --> 38:31.380
这里不用

38:31.380 --> 38:33.380
不用这个位置rotor包装了啊

38:33.380 --> 38:35.380
为什么不能用位置rotor包装

38:35.380 --> 38:36.380
他是要包错的啊

38:36.380 --> 38:37.380
为什么

38:37.380 --> 38:38.380
因为位置rotor

38:38.380 --> 38:41.380
他必须要处于一个上下文里边

38:41.380 --> 38:43.380
你看一下这里

38:43.380 --> 38:44.380
我们本以

38:44.380 --> 38:46.380
之前那是这个玩意儿是根主键对吧

38:46.380 --> 38:47.380
这个browser rotors根主键

38:47.380 --> 38:48.380
它产生了上下文

38:48.380 --> 38:49.380
所以说这个主键里边

38:49.380 --> 38:50.380
他在上下文里边

38:50.380 --> 38:51.380
所以说他可以用位置rotor

38:51.380 --> 38:53.380
把上下文的信息获取到

38:53.380 --> 38:54.380
把它注入到属性里边

38:54.380 --> 38:55.380
但是说

38:55.380 --> 38:56.380
如果说

38:56.380 --> 38:57.380
他是根主键

38:57.380 --> 38:59.380
他是这个玩意儿

38:59.380 --> 39:01.380
是他里边的东西

39:02.380 --> 39:03.380
那他还能够得到

39:03.380 --> 39:04.380
上下文里边的数据吗

39:04.380 --> 39:06.380
上下文都没有啊

39:06.380 --> 39:08.380
你怎么去给他上下文注入数据呢

39:08.380 --> 39:09.380
对不对

39:09.380 --> 39:10.380
上下文是在他里边创建的

39:10.380 --> 39:12.380
是在这个玩意儿里边创建的

39:12.380 --> 39:13.380
对吧

39:13.380 --> 39:14.380
所以说现在是不能用位置rotor的

39:14.380 --> 39:15.380
没关系

39:15.380 --> 39:16.380
我们一会儿来处理这个问题

39:16.380 --> 39:17.380
我们先把篮件器写好

39:17.380 --> 39:18.380
再说

39:18.380 --> 39:19.380
一会儿再把那个简定器

39:19.380 --> 39:20.380
给他一并加上

39:20.380 --> 39:21.380
好

39:21.380 --> 39:22.380
那么这里呢

39:22.380 --> 39:23.380
this user confirmation

39:23.380 --> 39:24.380
那么这里

39:24.380 --> 39:25.380
我们就直接

39:25.380 --> 39:27.380
直接把这个函数传进去

39:27.380 --> 39:28.380
好

39:28.380 --> 39:29.380
这里边有两个参数

39:29.380 --> 39:31.380
一个参数是

39:32.380 --> 39:34.380
一个参数是那个

39:34.380 --> 39:36.380
第一个参数是message

39:36.380 --> 39:37.380
message

39:37.380 --> 39:40.380
第二个参数是那个callback

39:40.380 --> 39:42.380
callback

39:43.380 --> 39:45.380
加上这个

39:45.380 --> 39:46.380
好

39:46.380 --> 39:48.380
这个handle confer

39:48.380 --> 39:49.380
里边干嘛呢

39:49.380 --> 39:51.380
里边干嘛

39:51.380 --> 39:53.380
就是我这里能干嘛

39:53.380 --> 39:55.380
我也不知道

39:55.380 --> 39:57.380
我也不知道我要干嘛

39:58.380 --> 39:59.380
那怎么办呢

39:59.380 --> 40:01.380
跟刚才是不是一样的

40:01.380 --> 40:03.380
你给我传个属性进来

40:03.380 --> 40:04.380
你告诉我我要干嘛

40:04.380 --> 40:06.380
我也不知道要干嘛

40:06.380 --> 40:09.380
beforechange

40:09.380 --> 40:12.380
当页面改变之前

40:12.380 --> 40:14.380
我可以去注册一个事件

40:14.380 --> 40:15.380
当页面改变之前

40:15.380 --> 40:17.380
我要干嘛

40:17.380 --> 40:18.380
之前要干嘛

40:18.380 --> 40:19.380
那么在这个事件里边

40:19.380 --> 40:21.380
我不仅可以做一些事情

40:21.380 --> 40:24.380
页面想要改变

40:24.380 --> 40:26.380
不仅可以做一些事情

40:26.380 --> 40:28.380
我还可以控制页面能不能改变

40:28.380 --> 40:29.380
那是不是要传一个callback进来

40:29.380 --> 40:30.380
对不对

40:30.380 --> 40:32.380
要传一个callback进来

40:32.380 --> 40:33.380
这里呢

40:34.380 --> 40:35.380
这里怎么写

40:35.380 --> 40:36.380
怎么写这个代码

40:36.380 --> 40:37.380
判断

40:37.380 --> 40:38.380
判断

40:38.380 --> 40:42.380
this props on before change

40:42.380 --> 40:44.380
有没有这个函数

40:44.380 --> 40:45.380
如果说你给我传了这个函数

40:45.380 --> 40:46.380
OK 我调用这个函数

40:46.380 --> 40:47.380
然后把callback传给你

40:47.380 --> 40:49.380
那个message我就不用了

40:49.380 --> 40:50.380
不用这个message了

40:50.380 --> 40:51.380
好 这里呢

40:51.380 --> 40:52.380
保存

40:52.380 --> 40:54.380
那么看一下

40:54.380 --> 40:56.380
看一下目前的改变

40:59.750 --> 41:00.750
把个警告先去了

41:00.750 --> 41:01.750
警告先去了

41:05.090 --> 41:06.090
改变

41:07.090 --> 41:08.090
我看一下

41:08.090 --> 41:12.090
这里写的什么rotor is defined by name used

41:12.090 --> 41:13.090
他说

41:14.090 --> 41:15.090
他说哪里呢

41:16.090 --> 41:17.090
他说这个地方

41:17.090 --> 41:19.090
rotor写的但是没用

41:19.090 --> 41:21.090
扩折写的你也没用

41:21.090 --> 41:23.090
没关系 我把它去掉

41:24.090 --> 41:26.090
那么现在为什么没有输出

41:26.090 --> 41:28.090
为什么没有输出

41:28.090 --> 41:29.090
是不是讲过了

41:30.090 --> 41:31.090
为什么没有输出

41:31.090 --> 41:32.090
你只是配置了这个玩意

41:32.090 --> 41:33.090
有没有组色

41:33.090 --> 41:35.090
你有没有加组色在这里

41:35.090 --> 41:36.090
没有加组色

41:36.090 --> 41:37.090
没有加组色的话

41:37.090 --> 41:38.090
它不会

41:38.090 --> 41:39.090
不会产生任何结果的

41:39.090 --> 41:41.090
还是还是直接从A到B

41:41.090 --> 41:42.090
直接跳转

41:43.090 --> 41:44.090
你想

41:44.090 --> 41:46.090
这个函数本身就有默认值

41:46.090 --> 41:47.090
你没有配置它都有默认值

41:47.090 --> 41:49.090
那它品数为什么没有出发

41:49.090 --> 41:50.090
因为你没有加组色

41:50.090 --> 41:52.090
所以我们就得把组色给它加上

41:52.090 --> 41:54.090
component get mount

41:54.090 --> 41:55.090
组色加上

41:56.090 --> 41:59.090
组色加组色的时候遇到问题了

41:59.090 --> 42:01.090
就遇到问题了

42:01.090 --> 42:02.090
什么问题

42:02.090 --> 42:04.090
加组色的时候遇到什么问题

42:05.090 --> 42:07.090
组色的时候遇到什么问题

42:07.090 --> 42:08.090
组色的时候

42:08.090 --> 42:10.090
是不是我们之前怎么加组色的

42:10.090 --> 42:11.090
在history里边

42:11.090 --> 42:12.090
是不是加block

42:12.090 --> 42:14.090
但是我从哪里去找history

42:14.090 --> 42:16.090
是不是拿不到

42:16.090 --> 42:18.090
是不是拿不到history

42:18.090 --> 42:19.090
是拿不到吧

42:19.090 --> 42:20.090
为什么拿不到

42:20.090 --> 42:22.090
因为它这里没有上下文

42:22.090 --> 42:23.090
你看这个结构

42:23.090 --> 42:24.090
它是不是没有上下文

42:24.090 --> 42:25.090
它不在上下文里边

42:25.090 --> 42:27.090
所以说它是拿不到

42:27.090 --> 42:29.090
history对象的

42:29.090 --> 42:30.090
那怎么办

42:31.090 --> 42:32.090
它拿不到怎么办

42:33.090 --> 42:36.090
这里边的东西是不是可以拿到

42:36.090 --> 42:37.090
是不是可以拿到

42:37.090 --> 42:39.090
这个rotor里边的东西

42:39.090 --> 42:40.090
是不是可以拿到

42:40.090 --> 42:41.090
好

42:41.090 --> 42:43.090
那我们是不是可以再写个组件

42:43.090 --> 42:44.090
把它放到里边

42:44.090 --> 42:45.090
是不是可以拿到

42:45.090 --> 42:46.090
没问题吧

42:46.090 --> 42:48.090
我们再写个组件

42:48.090 --> 42:49.090
写个组件

42:49.090 --> 42:50.090
比方说

42:50.090 --> 42:52.090
写个

42:52.090 --> 42:54.090
god help

42:54.090 --> 42:55.090
help

42:55.090 --> 42:57.850
这个组件

42:57.850 --> 42:59.850
component

42:59.850 --> 43:00.850
好

43:00.850 --> 43:01.850
这个组件

43:01.850 --> 43:02.850
我用那个

43:02.850 --> 43:04.850
包装一下

43:04.850 --> 43:05.850
包装一下

43:05.850 --> 43:07.850
这里写一个下滑线

43:07.850 --> 43:08.850
加个下滑线

43:08.850 --> 43:11.850
这里我们写一个辨量

43:11.850 --> 43:12.850
辨量

43:12.850 --> 43:14.850
写上来

43:14.850 --> 43:16.850
看着

43:16.850 --> 43:20.850
这里边我们写这么一个辨量

43:20.850 --> 43:22.850
const

43:22.850 --> 43:23.850
help

43:24.850 --> 43:25.850
就没有下滑线了

43:25.850 --> 43:27.850
然后用with rotor

43:27.850 --> 43:28.850
包装一下

43:28.850 --> 43:30.850
with rotor

43:32.850 --> 43:36.500
god help

43:39.010 --> 43:41.640
with rotor

43:41.640 --> 43:42.640
包装一下

43:43.640 --> 43:44.640
好

43:44.640 --> 43:45.640
然后我们把这个组件放哪儿了

43:45.640 --> 43:46.640
放这里边

43:47.640 --> 43:48.640
你看一下

43:48.640 --> 43:50.640
把这个组件不生成任何元素

43:50.640 --> 43:51.640
不生成任何元素

43:51.640 --> 43:52.640
它的render

43:52.640 --> 43:54.640
返回来直接返回辣了

43:54.640 --> 43:55.640
不生成任何元素

43:55.640 --> 43:57.640
它主要是为了过去怎么

43:57.640 --> 44:00.640
主要是为了获取上下文

44:00.640 --> 44:02.640
上下文里边的数据

44:02.640 --> 44:03.640
没问题吧

44:03.640 --> 44:04.640
我这里

44:04.640 --> 44:05.640
用下滑线

44:05.640 --> 44:06.640
把下滑线包装一下

44:06.640 --> 44:07.640
好

44:07.640 --> 44:08.640
保存

44:08.640 --> 44:09.640
你看一下

44:09.640 --> 44:10.640
虽然现在看不到任何结果

44:10.640 --> 44:11.640
但是我们可以看到

44:11.640 --> 44:12.640
regards

44:12.640 --> 44:13.640
这个结构里边

44:13.640 --> 44:14.640
你看

44:14.640 --> 44:16.640
app组件里边有root guard

44:16.640 --> 44:18.640
root guard里边有browser rotor

44:18.640 --> 44:19.640
那么它来产生上下文

44:19.640 --> 44:20.640
你看看

44:20.640 --> 44:21.640
它里边包了一个rotor组件

44:21.640 --> 44:22.640
里边又传了个rotor provider

44:22.640 --> 44:23.640
这是不是上下文

44:23.640 --> 44:25.640
现在我们要做的事情是

44:25.640 --> 44:27.640
让我们写的guard helper 这个组件

44:27.640 --> 44:29.640
它处于这个上下文里边

44:29.640 --> 44:31.640
处于这个上下文里边的时候

44:31.640 --> 44:32.640
这个组件里边

44:32.640 --> 44:33.640
是不是可以获取

44:33.640 --> 44:34.640
history location

44:34.640 --> 44:35.640
march对象

44:35.640 --> 44:36.640
是不是可以获取到了

44:36.640 --> 44:37.640
对吧

44:37.640 --> 44:38.640
是不是可以获取到了

44:38.640 --> 44:39.640
好

44:39.640 --> 44:41.640
于是我们要在这个组件里边

44:41.640 --> 44:43.640
搞清楚这个逻辑

44:43.640 --> 44:44.640
要在这个组件里边

44:44.640 --> 44:45.640
搞定什么

44:46.640 --> 44:48.640
搞定那个就是添加组设

44:48.640 --> 44:50.640
添加组设

44:51.640 --> 44:53.640
那么组设我们添加一下

44:53.640 --> 44:54.640
z

44:54.640 --> 44:56.640
ad

44:56.640 --> 44:57.640
z

44:57.640 --> 44:58.640
probs

44:58.640 --> 45:00.640
history

45:00.640 --> 45:01.640
然后呢

45:01.640 --> 45:02.640
block

45:02.640 --> 45:03.640
消息没有消息

45:03.640 --> 45:04.640
我也不需要消息

45:04.640 --> 45:06.640
就添加一个组设

45:06.640 --> 45:08.640
主要的目的就是添加这么一个组设

45:08.640 --> 45:10.640
保存

45:11.640 --> 45:13.640
接下来我们来切换页面看一下

45:13.640 --> 45:14.640
切换页面

45:14.640 --> 45:15.640
页面还要改变

45:15.640 --> 45:16.640
是不是可以得到了

45:16.640 --> 45:17.640
为什么

45:17.640 --> 45:18.640
因为我们在

45:18.640 --> 45:19.640
甭管在哪个组件里面添加的

45:19.640 --> 45:20.640
只要你添加了组设

45:20.640 --> 45:21.640
那么以后呢

45:21.640 --> 45:22.640
挑转页面

45:22.640 --> 45:23.640
它都会经过组设

45:23.640 --> 45:24.640
它会调用这个gates

45:24.640 --> 45:25.640
you the comfort

45:25.640 --> 45:26.640
没性函数

45:26.640 --> 45:28.640
它最终会调用这个函数

45:28.640 --> 45:29.640
你只要添加了组设

45:29.640 --> 45:30.640
甭管在哪个组件里面添加的

45:30.640 --> 45:31.640
它不管

45:31.640 --> 45:33.640
只要你因为history对象都是同一个

45:33.640 --> 45:34.640
都是上下文字里面的对象

45:34.640 --> 45:36.640
只要你在上下文字里面对象里面

45:36.640 --> 45:37.640
调用了block

45:37.640 --> 45:38.640
添加了组设

45:38.640 --> 45:39.640
那么挑转页面

45:39.640 --> 45:41.640
它都会调用这个方法

45:41.640 --> 45:42.640
于是呢

45:42.640 --> 45:43.640
你看我们这里的方法

45:43.640 --> 45:44.640
是不是可以注册进来

45:44.640 --> 45:46.640
那么页面想要改变

45:46.640 --> 45:47.640
比如说现在改变不了

45:47.640 --> 45:48.640
对不对

45:48.640 --> 45:49.640
如果想要改变的话

45:49.640 --> 45:50.640
干嘛呢

45:50.640 --> 45:52.640
call back

45:53.640 --> 45:54.640
你看一下

45:54.640 --> 45:56.640
现在就可以改变了

45:56.640 --> 45:57.640
那么你之后

45:57.640 --> 45:59.640
就可以根据不同的情况

45:59.640 --> 46:00.640
根据不同的情况

46:00.640 --> 46:02.640
那么确定要不要改变

46:02.640 --> 46:03.640
那么可以通过这个事件完成

46:03.640 --> 46:04.640
对吧

46:04.640 --> 46:05.640
没问题吧

46:07.640 --> 46:10.640
这是添加组设

46:10.640 --> 46:11.640
添加组设

46:11.640 --> 46:12.640
我再多说两句

46:12.640 --> 46:13.640
添加组设这里

46:13.640 --> 46:17.640
其实还有一个

46:17.640 --> 46:19.640
就是说我们添加组设的时候

46:19.640 --> 46:21.640
还可以写成一个函数

46:21.640 --> 46:22.640
这个函数呢

46:22.640 --> 46:23.640
它不一定是制服串

46:23.640 --> 46:24.640
我们之前说一个参数

46:24.640 --> 46:25.640
是主串消息对吧

46:25.640 --> 46:26.640
那么主设消息呢

46:26.640 --> 46:28.640
是可以是一个制服串消息

46:28.640 --> 46:29.640
制服串消息

46:29.640 --> 46:31.640
也可以是一个函数

46:31.640 --> 46:33.640
函数的返回结果

46:33.640 --> 46:35.640
是一个制服串

46:35.640 --> 46:38.640
用于表示主设消息

46:38.640 --> 46:40.640
它可以写函数的

46:40.640 --> 46:42.640
它是可以写函数的

46:42.640 --> 46:43.640
那么这个里边

46:43.640 --> 46:44.640
在这边来

46:44.640 --> 46:45.640
也说这里边

46:45.640 --> 46:47.640
我们可以写个函数

46:47.640 --> 46:48.640
有的时候

46:48.640 --> 46:49.640
你的消息呢

46:49.640 --> 46:50.640
可能要经过一些计算

46:50.640 --> 46:51.640
运算动态来获取

46:51.640 --> 46:52.640
那么这里呢

46:52.640 --> 46:53.640
可以写个函数

46:53.640 --> 46:54.640
你返回一个消息

46:54.640 --> 46:55.640
返回一个消息

46:55.640 --> 46:57.640
当然消息还是控制不出来

46:57.640 --> 46:58.640
那么这个函数的话

46:58.640 --> 47:01.640
它函数里边是有参数的

47:01.640 --> 47:03.640
这个函数里边是有参数的

47:03.640 --> 47:05.640
它的参数1

47:05.640 --> 47:08.640
location对象

47:08.640 --> 47:10.640
参数2

47:10.640 --> 47:12.640
exing对象

47:12.640 --> 47:13.640
exing值

47:13.640 --> 47:15.640
那么这个东西跟前面的那个

47:15.640 --> 47:16.640
前面那个

47:16.640 --> 47:17.640
就是location

47:17.640 --> 47:19.640
exing是完全一样的

47:19.640 --> 47:20.640
所以说这里呢

47:20.640 --> 47:21.640
我们可以做什么事呢

47:21.640 --> 47:22.640
就这里呢

47:22.640 --> 47:23.640
它给我传了一个location

47:23.640 --> 47:25.640
就是你煮熟的时候

47:25.640 --> 47:26.640
你不是要跳转到新页面吗

47:26.640 --> 47:27.640
好

47:27.640 --> 47:29.640
新页面的地址是啥

47:30.640 --> 47:31.640
地址信息

47:31.640 --> 47:33.640
就在这个location对象里边

47:33.640 --> 47:34.640
好

47:34.640 --> 47:36.640
那么还有就跳转的方式

47:36.640 --> 47:37.640
exing

47:37.640 --> 47:38.640
你这是puxia

47:38.640 --> 47:40.640
还是pop

47:40.640 --> 47:41.640
这东西

47:41.640 --> 47:42.640
那么在这个

47:42.640 --> 47:43.640
在这个exing里边

47:43.640 --> 47:44.640
明白的意思吧

47:44.640 --> 47:45.640
那么这样子

47:45.640 --> 47:47.640
可以动态的获取消息

47:47.640 --> 47:48.640
可以动态的

47:48.640 --> 47:50.640
获取消息

47:50.640 --> 47:52.640
不要说我们这里输出一下

47:52.640 --> 47:54.640
输出一下exing

47:54.640 --> 47:55.640
就有点像监听器

47:55.640 --> 47:56.640
有点像监听器

47:56.640 --> 47:57.640
只不过这里是主色

47:57.640 --> 47:59.640
它跟监听器的功能不一样

47:59.640 --> 48:00.640
监听器是没法阻止

48:00.640 --> 48:02.640
一面跳转的

48:02.640 --> 48:03.640
这里看一下

48:03.640 --> 48:04.640
你看

48:04.640 --> 48:05.640
puxia对吧

48:05.640 --> 48:06.640
puxia你看是不是得到了

48:06.640 --> 48:07.640
它每一次跳转一面

48:07.640 --> 48:08.640
它都会运行

48:08.640 --> 48:09.640
它就不是普通之不错

48:09.640 --> 48:10.640
它都会运行这个函数

48:10.640 --> 48:11.640
从这个函数的

48:11.640 --> 48:12.640
反而回结过来

48:12.640 --> 48:14.640
里边来获取这个消息

48:14.640 --> 48:15.640
明白这个意思吗

48:15.640 --> 48:16.640
可以从这个函数的

48:16.640 --> 48:17.640
反而回结过里边

48:17.640 --> 48:21.640
来获取这个消息

48:21.640 --> 48:22.640
好

48:22.640 --> 48:24.640
那么这样子一来的话

48:24.640 --> 48:27.640
我们又咋处理了

48:27.640 --> 48:28.640
我们又咋处理了

48:28.640 --> 48:29.640
就是说

48:29.640 --> 48:30.640
我们这里

48:30.640 --> 48:32.640
调用这个on before change的时候

48:32.640 --> 48:34.640
我希望怎么样呢

48:34.640 --> 48:36.640
我希望

48:36.640 --> 48:39.640
把这个东西传给你

48:39.640 --> 48:42.640
之前的location

48:42.640 --> 48:44.640
新的location

48:44.640 --> 48:46.640
还有action

48:46.640 --> 48:48.640
把这些东西我都传给你

48:48.640 --> 48:50.640
都传给你

48:50.640 --> 48:54.640
那么这里的callback就是可以

48:54.640 --> 48:55.640
callback可以怎么样呢

48:55.640 --> 48:58.640
callback就是说可以取消

48:58.640 --> 48:59.640
取消那个就是

48:59.640 --> 49:00.640
不是取消

49:00.640 --> 49:01.640
可以就是

49:01.640 --> 49:03.640
让那个就是页面跳转完成

49:03.640 --> 49:05.640
完成页面跳转

49:05.640 --> 49:07.640
或者说我们给它换一个名字

49:07.640 --> 49:09.640
换一个名字

49:09.640 --> 49:11.640
把它换成commit

49:11.640 --> 49:13.640
可以提交

49:13.640 --> 49:14.640
提交跳转

49:14.640 --> 49:16.640
你做完了一些事情

49:16.640 --> 49:18.640
在跳转之前你要做一些难解

49:18.640 --> 49:19.640
做一些事情过后

49:19.640 --> 49:20.640
你提交跳转

49:20.640 --> 49:22.640
那么我们是不是要把这三个东西传过去

49:22.640 --> 49:23.640
那么关键问题在于

49:23.640 --> 49:26.640
我怎么样得到这三个东西呢

49:26.640 --> 49:28.640
问题是我怎么样得到这三个东西呢

49:28.640 --> 49:30.640
这个是个麻烦事

49:30.640 --> 49:32.640
是个麻烦事

49:32.640 --> 49:35.640
那怎么得到这三个东西呢

49:35.640 --> 49:38.640
那我们只能这样子

49:38.640 --> 49:40.640
只能这样子

49:40.640 --> 49:42.640
怎么弄呢

49:42.640 --> 49:44.640
在这三个数据

49:44.640 --> 49:46.640
是不是只能在这里得到

49:46.640 --> 49:47.640
这里是很好得到的

49:47.640 --> 49:48.640
这里怎么得到

49:48.640 --> 49:50.640
z

49:50.640 --> 49:52.640
probs

49:52.640 --> 49:53.640
location

49:53.640 --> 49:55.640
之前的location

49:55.640 --> 49:56.640
location

49:56.640 --> 49:57.640
当前的location

49:57.640 --> 49:58.640
还有什么

49:58.640 --> 49:59.640
X

49:59.640 --> 50:00.640
在这里是非常容易得到

50:00.640 --> 50:01.640
非常好得到的

50:01.640 --> 50:02.640
这个组设这里

50:02.640 --> 50:04.640
但是在这里就很难得到了

50:04.640 --> 50:06.640
这里就很难得到了

50:06.640 --> 50:08.640
看一下吧

50:08.640 --> 50:10.640
先把去掉

50:10.640 --> 50:11.640
跳转的时候你看

50:11.640 --> 50:12.640
跳转了1

50:12.640 --> 50:13.640
你看

50:13.640 --> 50:14.640
转2跳转了1

50:14.640 --> 50:15.640
对不对

50:15.640 --> 50:16.640
扑起这种方式

50:16.640 --> 50:17.640
对吧

50:17.640 --> 50:19.640
在这里是很容易得到的

50:19.640 --> 50:20.640
但是呢

50:20.640 --> 50:22.640
我们在这个副组建Rose God里边

50:22.640 --> 50:23.640
他给我传了一个

50:23.640 --> 50:24.640
umb4签计

50:24.640 --> 50:26.640
那么我肯定想要

50:26.640 --> 50:27.640
肯定是想要调用这个函数

50:27.640 --> 50:29.640
但是我调用不了

50:29.640 --> 50:31.640
我调用不了这个函数

50:32.640 --> 50:34.640
我确实调用不了

50:34.640 --> 50:35.640
那怎么办呢

50:35.640 --> 50:36.640
这个时候

50:37.640 --> 50:40.640
想一想有没有什么好的办法

50:41.640 --> 50:42.640
其实这里呢

50:42.640 --> 50:43.640
我们可以用一种

50:43.640 --> 50:45.640
非常简单的方式来处理

50:45.640 --> 50:47.640
因为我们刚才说过

50:47.640 --> 50:48.640
这个组设呢

50:48.640 --> 50:50.640
整个history对象里面

50:50.640 --> 50:51.640
只能加一个

50:51.640 --> 50:52.640
它不能像listener那样子

50:52.640 --> 50:53.640
加多个

50:53.640 --> 50:55.640
它只能加一个这个组设

50:55.640 --> 50:56.640
所以说呢

50:56.640 --> 50:58.640
在你添加组设的时候

50:58.640 --> 51:00.640
就是你调用添加这个组设的时候

51:00.640 --> 51:03.640
我直接把这些什么location

51:04.640 --> 51:05.640
全部保存到一个

51:05.640 --> 51:07.640
全局变量里边

51:07.640 --> 51:08.640
就在这个文件

51:08.640 --> 51:12.640
全局变量

51:12.640 --> 51:14.640
然后location

51:14.640 --> 51:15.640
还有什么x

51:15.640 --> 51:17.640
保持到这些变量里边

51:17.640 --> 51:18.640
于是呢我这里

51:18.640 --> 51:19.640
因为我们知道

51:19.640 --> 51:21.640
组设是先调用这个组设函数

51:21.640 --> 51:22.640
先调用这个组设函数

51:22.640 --> 51:23.640
为什么

51:23.640 --> 51:25.640
因为它得到这个消息

51:25.640 --> 51:26.640
它为了得到这个消息

51:26.640 --> 51:27.640
它先调用这个组设函数

51:27.640 --> 51:28.640
对吧

51:28.640 --> 51:29.640
先把组设函数拿到

51:29.640 --> 51:30.640
然后再把消息传递到

51:30.640 --> 51:32.640
get user confirmation

51:32.640 --> 51:33.640
再传递到这

51:33.640 --> 51:34.640
get user confirmation

51:34.640 --> 51:35.640
传递到这

51:35.640 --> 51:36.640
然后在这个函数里面

51:36.640 --> 51:37.640
我们才去调用用户

51:37.640 --> 51:38.640
给我传递到属性

51:38.640 --> 51:39.640
对吧

51:39.640 --> 51:40.640
所以说我们可以

51:40.640 --> 51:41.640
把它保存到这

51:41.640 --> 51:42.640
看一下吧

51:42.640 --> 51:43.640
prev

51:43.640 --> 51:44.640
location等于

51:44.640 --> 51:46.640
this props

51:46.640 --> 51:47.640
地儿

51:47.640 --> 51:48.640
location

51:48.640 --> 51:49.640
然后呢

51:49.640 --> 51:50.640
location

51:50.640 --> 51:52.640
等于

51:52.640 --> 51:53.640
那这个地方

51:53.640 --> 51:55.640
我们这里有六个location

51:56.640 --> 51:57.640
location

51:58.640 --> 52:00.640
location等于六个location

52:00.640 --> 52:01.640
好

52:01.640 --> 52:02.640
然后呢就是

52:02.640 --> 52:03.640
action

52:03.640 --> 52:05.640
等于action

52:06.640 --> 52:07.640
又再换一下名字

52:08.640 --> 52:09.640
ac

52:09.640 --> 52:10.640
ac

52:12.640 --> 52:13.640
这个地方做的事情就是

52:13.640 --> 52:14.640
把这三个保存到

52:14.640 --> 52:15.640
全聚变量里面

52:15.640 --> 52:16.640
然后得到一个

52:16.640 --> 52:17.640
控制不出来的消息

52:17.640 --> 52:18.640
然后呢

52:18.640 --> 52:19.640
它就会触发这个

52:19.640 --> 52:20.640
get user confirmation

52:20.640 --> 52:21.640
让它来提供

52:21.640 --> 52:22.640
让它来决定

52:22.640 --> 52:23.640
能不能跳转

52:23.640 --> 52:24.640
那么它里面呢

52:24.640 --> 52:25.640
它就调用了

52:25.640 --> 52:26.640
这个属性里面的函数

52:26.640 --> 52:27.640
把这个

52:27.640 --> 52:28.640
刚才的全聚变量里面

52:28.640 --> 52:29.640
东西扔过去了

52:29.640 --> 52:30.640
对吧

52:30.640 --> 52:31.640
那么这样子一拿

52:31.640 --> 52:32.640
那这边

52:32.640 --> 52:33.640
是不是自然而然

52:33.640 --> 52:34.640
就可以得到这些东西了

52:34.640 --> 52:35.640
好

52:35.640 --> 52:36.640
来吧

52:36.640 --> 52:37.640
这里的preview

52:37.640 --> 52:38.640
curl

52:38.640 --> 52:39.640
ag

52:40.640 --> 52:41.640
commit

52:42.640 --> 52:43.640
好

52:43.640 --> 52:44.640
那么这里输出一句话

52:44.640 --> 52:45.640
我们这里呢

52:45.640 --> 52:46.640
这样子吧

52:46.640 --> 52:47.640
输出一个模板这五串

52:51.340 --> 52:53.340
页面想要

52:53.340 --> 52:54.340
从

52:54.340 --> 52:55.340
从哪里呢

52:55.340 --> 52:57.340
从之前那个passname

52:57.340 --> 52:59.340
挑转到

52:59.340 --> 53:00.340
哪里呢

53:01.340 --> 53:03.340
curl.passname

53:03.340 --> 53:04.340
挑转到这

53:04.340 --> 53:05.340
然后呢

53:05.340 --> 53:07.340
挑转方式是

53:09.340 --> 53:10.340
x

53:11.340 --> 53:12.340
允许跳转

53:13.340 --> 53:14.340
怎么允许跳转

53:14.340 --> 53:15.340
我就这里

53:15.340 --> 53:17.340
就是用commit to

53:17.340 --> 53:18.340
就可以允许跳转

53:18.340 --> 53:19.340
保存你看一下吧

53:21.340 --> 53:22.340
页面1跳到页面2

53:22.340 --> 53:23.340
你看呀

53:23.340 --> 53:24.340
跳到页面2了

53:24.340 --> 53:25.340
你看是不是得到了

53:25.340 --> 53:26.340
对吧

53:26.340 --> 53:27.340
页面2跳到页面1

53:27.340 --> 53:28.340
你看是不是得到了

53:28.340 --> 53:29.340
对不对

53:29.340 --> 53:30.340
这里回去

53:30.340 --> 53:31.340
后退

53:31.340 --> 53:33.340
是不是也可以拿到这些信息

53:33.340 --> 53:34.340
对吧

53:34.340 --> 53:35.340
那么能不能允许跳转

53:35.340 --> 53:36.340
我们全靠这里控制

53:36.340 --> 53:38.340
全靠这里控制

53:38.340 --> 53:39.340
比方说你刚才喘一个force

53:39.340 --> 53:40.340
它就不能跳转了

53:40.340 --> 53:41.340
你看现在

53:42.340 --> 53:43.340
你看页面是不是没有跳转

53:43.340 --> 53:44.340
对吧

53:44.340 --> 53:45.340
没有跳转

53:47.340 --> 53:48.340
就这么个回事

53:48.340 --> 53:49.340
蓝阶器是不是写好了

53:49.340 --> 53:50.340
对吧

53:50.340 --> 53:52.340
灵活运用之前的知识

53:52.340 --> 53:54.340
就可以完成这样的效果

53:54.340 --> 53:55.340
蓝阶器就写好了

53:56.340 --> 53:57.340
蓝阶器

53:57.340 --> 53:59.340
这个蓝阶器就是主设器

53:59.340 --> 54:00.340
它能不能取消

54:00.340 --> 54:01.340
你不能老是给我加一个主设

54:01.340 --> 54:02.340
有可能有的时候我想取消

54:02.340 --> 54:03.340
有的时候我想取消

54:03.340 --> 54:04.340
对吧

54:04.340 --> 54:05.340
有的时候我想取消

54:05.340 --> 54:06.340
那么取消是这样子

54:06.340 --> 54:07.340
它这个玩意

54:07.340 --> 54:10.340
它里边也会返回一个毁掉函数

54:10.340 --> 54:12.340
它也会返回一个毁掉函数

54:12.340 --> 54:13.340
这个block

54:13.340 --> 54:14.340
跟那个nissan是一样的

54:14.340 --> 54:15.340
这个block

54:15.340 --> 54:20.340
也会返回一个毁掉函数

54:20.340 --> 54:24.340
用于取消主设器

54:24.340 --> 54:25.340
主设器

54:25.340 --> 54:27.340
那么它的做法

54:27.340 --> 54:28.340
是不是差不多的

54:28.340 --> 54:30.340
做法差不多

54:30.340 --> 54:31.340
那么这里

54:32.340 --> 54:34.340
好那这里我们就

54:34.340 --> 54:35.340
再加个变量

54:35.340 --> 54:36.340
全体变量

54:36.340 --> 54:38.340
就是unlock

54:38.340 --> 54:39.340
unblock

54:41.340 --> 54:42.340
那么这个变量

54:42.340 --> 54:43.340
给它复制

54:43.340 --> 54:44.340
在这里给它复制

54:45.340 --> 54:46.340
取消主设

54:46.340 --> 54:48.340
好什么时候取消主设呢

54:48.340 --> 54:49.340
它这个主键卸载的时候

54:49.340 --> 54:50.340
要取消主设

54:50.340 --> 54:52.340
component

54:53.340 --> 54:55.340
will amount

54:56.340 --> 54:57.340
我们要调用unblock

54:57.340 --> 54:58.340
取消主设

54:59.340 --> 55:00.340
取消主设

55:01.340 --> 55:03.340
同时我们也会把unblock

55:03.340 --> 55:04.340
传递到哪呢

55:04.340 --> 55:05.340
传递到这

55:05.340 --> 55:06.340
传递到这

55:07.340 --> 55:09.340
再加个函数

55:09.340 --> 55:10.340
unblock

55:10.340 --> 55:11.340
按用就用

55:11.340 --> 55:12.340
不用拉倒

55:12.340 --> 55:13.340
那么这边

55:13.340 --> 55:14.340
比方说我们要取消主设

55:14.340 --> 55:15.340
要取消主设的话

55:15.340 --> 55:17.340
那么我们只主设一次

55:17.340 --> 55:18.340
比方说

55:18.340 --> 55:19.340
unblock

55:19.340 --> 55:20.340
有这么一个函数

55:21.340 --> 55:22.340
那么我们比方说

55:22.340 --> 55:23.340
只主设一次

55:24.340 --> 55:25.340
保存你看一下

55:26.340 --> 55:27.340
一面一

55:27.340 --> 55:28.340
二挑战一面一

55:28.340 --> 55:29.340
所以挑战了

55:29.340 --> 55:30.340
对吧

55:30.340 --> 55:31.340
就这个主设

55:31.340 --> 55:32.340
我们再点击

55:32.340 --> 55:33.340
是不是没有这个主设了

55:33.340 --> 55:34.340
对吧

55:34.340 --> 55:35.340
取消了主设了

55:35.340 --> 55:36.340
就这么个意思

55:38.710 --> 55:39.710
取消主设

55:40.710 --> 55:41.710
仅

55:41.710 --> 55:42.710
主设了

55:42.710 --> 55:43.710
一次

55:44.710 --> 55:45.710
好那么同时

55:45.710 --> 55:47.710
我们把这个东西也加进来

55:47.710 --> 55:48.710
把之前写的联系哪也加进来

55:48.710 --> 55:49.710
所以完成了

55:49.710 --> 55:50.710
把联系哪加进来

55:50.710 --> 55:51.710
是不是就完成了

55:51.710 --> 55:52.710
联系哪的话

55:52.710 --> 55:53.710
会没有

55:53.710 --> 55:54.710
是不是按照刚才的写法

55:54.710 --> 55:55.710
是不是就可以直接在这里边写

55:55.710 --> 55:56.710
添加一个监听器

55:56.710 --> 55:57.710
来吧

55:58.710 --> 55:59.710
跑去了

55:59.710 --> 56:00.710
跑去了

56:01.710 --> 56:02.710
这里

56:02.710 --> 56:03.710
添加一个监听器

56:03.710 --> 56:04.710
好

56:04.710 --> 56:05.710
然后呢

56:05.710 --> 56:06.710
在后边

56:06.710 --> 56:07.710
卸载监听器

56:07.710 --> 56:08.710
对吧

56:08.710 --> 56:09.710
卸载监听器

56:10.710 --> 56:11.710
就完事了

56:12.710 --> 56:13.710
添加监听器

56:13.710 --> 56:14.710
那么监听的时候

56:14.710 --> 56:16.710
添加监听器的时候

56:16.710 --> 56:17.710
监听器

56:17.710 --> 56:18.710
发生那个监听的时候

56:18.710 --> 56:19.710
到底要做什么事情

56:19.710 --> 56:20.710
我这个组建

56:20.710 --> 56:21.710
也需要一个属性

56:21.710 --> 56:22.710
也需要一个属性

56:22.710 --> 56:23.710
按签级

56:23.710 --> 56:24.710
按签级这个属性

56:24.710 --> 56:26.710
那么这个按签级哪来呢

56:26.710 --> 56:27.710
是不是从这里传过来的

56:27.710 --> 56:28.710
你看着

56:28.710 --> 56:29.710
我们这里

56:29.710 --> 56:30.710
刚才APP

56:30.710 --> 56:31.710
把这个copy过来

56:32.710 --> 56:33.710
把这个copy过来

56:33.710 --> 56:34.710
按签级

56:34.710 --> 56:38.750
这靠手不要了

56:38.750 --> 56:39.750
靠手不要了

56:45.140 --> 56:46.140
按理事

56:47.140 --> 56:48.140
取消监听

56:48.140 --> 56:49.140
只监听一次

56:50.140 --> 56:51.140
取消监听

56:52.140 --> 56:53.140
仅监听一次

56:55.700 --> 56:56.700
就举个例子

56:56.700 --> 56:57.700
把这东西全部

56:57.700 --> 56:58.700
全部写下来

56:58.700 --> 56:59.700
举个例子

56:59.700 --> 57:00.700
那么这个按签级是

57:00.700 --> 57:02.700
我们APP这个组建

57:02.700 --> 57:03.700
传递到哪

57:03.700 --> 57:04.700
传递到Rose Guard这个组建的

57:04.700 --> 57:05.700
对吧

57:05.700 --> 57:06.700
传递到Rose Guard这个组建的

57:06.700 --> 57:07.700
传递到这个组建的

57:07.700 --> 57:08.700
但是这个组建里面

57:08.700 --> 57:09.700
没法处理

57:09.700 --> 57:10.700
为什么呢

57:10.700 --> 57:11.700
处理这个监听器

57:11.700 --> 57:12.700
是不是要用到Props History

57:12.700 --> 57:13.700
对吧

57:13.700 --> 57:14.700
只有它的植树建里面

57:14.700 --> 57:15.700
是不是可以处理

57:15.700 --> 57:17.700
那么很简单

57:17.700 --> 57:18.700
我又把它传过去

57:18.700 --> 57:19.700
不就完了吗

57:19.700 --> 57:20.700
按签级等于啥呢

57:20.700 --> 57:23.700
等于Rose Props里面的按签级

57:25.700 --> 57:26.700
传递过去就完事了

57:26.700 --> 57:27.700
把我自己的按签级

57:27.700 --> 57:28.700
传递给你

57:28.700 --> 57:30.700
那么你这个里面

57:30.700 --> 57:31.700
怎么去用

57:31.700 --> 57:32.700
你自己去用呗

57:32.700 --> 57:33.700
我不管你

57:33.700 --> 57:34.700
你自己去用

57:34.700 --> 57:35.700
那么怎么用的

57:35.700 --> 57:36.700
就像刚才的样子

57:36.700 --> 57:37.700
添加一个监听器

57:37.700 --> 57:39.700
它这个函数一次传过去就完事了

57:39.700 --> 57:40.700
好

57:40.700 --> 57:41.700
来看一下吧

57:41.700 --> 57:42.700
好

57:42.700 --> 57:43.700
现在跳到一面二

57:43.700 --> 57:44.700
你看是不是有组设

57:44.700 --> 57:45.700
有监听器

57:45.700 --> 57:46.700
对吧

57:46.700 --> 57:47.700
那么再挑战就没有了

57:47.700 --> 57:48.700
因为我只监听了一次

57:48.700 --> 57:50.700
也只组设了一次

57:50.700 --> 57:51.700
对吧

57:51.700 --> 57:52.700
没问题吧

57:52.700 --> 57:54.700
我们就写好了这么一个组建

57:54.700 --> 57:55.700
叫Rose Guard这个组建

57:55.700 --> 57:57.700
其他就不要了

57:57.700 --> 57:58.700
就写好这么一个组建

57:58.700 --> 57:59.700
这个组建

57:59.700 --> 58:00.700
虽然说写的单

58:00.700 --> 58:01.700
好像也不多

58:01.700 --> 58:02.700
其实也不多

58:02.700 --> 58:03.700
就是稍微有点绕

58:03.700 --> 58:05.700
大家下来好好去

58:05.700 --> 58:06.700
输理一下

58:06.700 --> 58:07.700
输理一下

58:07.700 --> 58:08.700
主要是组设性能力

58:08.700 --> 58:09.700
也会有一点绕

58:09.700 --> 58:10.700
因为组设性能力

58:10.700 --> 58:11.700
它分成两块了

58:11.700 --> 58:13.700
一个是在跟组建里边

58:13.700 --> 58:14.700
加一个函数

58:14.700 --> 58:15.700
叫GetzUserConfirmation

58:15.700 --> 58:18.700
加一个统一处理的函数

58:18.700 --> 58:19.700
只要发生组设

58:19.700 --> 58:21.700
它就会调用这个函数

58:21.700 --> 58:22.700
没有组设

58:22.700 --> 58:23.700
它就不会调用这个函数

58:23.700 --> 58:25.700
那么要不要发生组设

58:25.700 --> 58:28.700
是需要在History里边调用的

58:28.700 --> 58:29.700
那么只有植住键

58:29.700 --> 58:30.700
它的商项纹里边的组建

58:30.700 --> 58:32.700
才能拿到这个History

58:32.700 --> 58:34.700
所以我只能加一个植住键

58:35.700 --> 58:37.700
History里边加一个组设

58:38.700 --> 58:39.700
每当发生一个组设的时候

58:39.700 --> 58:40.700
它会调用函数

58:40.700 --> 58:41.700
当然你可以直接创造植住键

58:41.700 --> 58:43.700
但是我这里肯定要用函数

58:43.700 --> 58:45.700
因为我要得到之前的地址信息

58:45.700 --> 58:46.700
新的地址信息

58:46.700 --> 58:47.700
那么我在这个函数里边

58:47.700 --> 58:48.700
我是不是可以拿到

58:48.700 --> 58:50.700
当前的地址信息

58:50.700 --> 58:51.700
新的地址信息

58:51.700 --> 58:52.700
然后挨个型

58:52.700 --> 58:53.700
把它保存到全聚变量里边

58:53.700 --> 58:54.700
为什么要保存到全聚变量

58:54.700 --> 58:56.700
因为反正这个东西

58:56.700 --> 58:57.700
反正这个东西

58:57.700 --> 58:59.700
它只会整个

59:01.700 --> 59:02.700
整个History对象

59:02.700 --> 59:03.700
它只会运行一个

59:03.700 --> 59:04.700
因为我们上下文里边

59:04.700 --> 59:06.700
History对象是通用的

59:06.700 --> 59:07.700
因此这个History对象里边

59:07.700 --> 59:08.700
组设只能加一个

59:08.700 --> 59:09.700
不能加多个

59:09.700 --> 59:10.700
只能加一个的

59:11.700 --> 59:12.700
我就就用一个全聚变量

59:12.700 --> 59:14.700
来保存完事了

59:14.700 --> 59:15.700
保存这些信息

59:15.700 --> 59:16.700
保存了过后

59:16.700 --> 59:17.700
那么当我们

59:17.700 --> 59:18.700
它会先

59:18.700 --> 59:19.700
到时候

59:19.700 --> 59:20.700
挑战的时候

59:20.700 --> 59:21.700
它会先运行这个函数

59:21.700 --> 59:22.700
来得到消息

59:22.700 --> 59:23.700
运行的过程中

59:23.700 --> 59:24.700
是不是就把那些数据

59:24.700 --> 59:25.700
全部拿到了

59:25.700 --> 59:27.700
然后再转而去

59:27.700 --> 59:28.700
先组设得到消息

59:28.700 --> 59:30.700
再运行这个函数

59:31.700 --> 59:32.700
get user

59:35.700 --> 59:36.700
get user confirmation

59:36.700 --> 59:37.700
那么运行这个函数

59:37.700 --> 59:38.700
这个函数里边

59:38.700 --> 59:39.700
是不是肯拿到这些数据了

59:39.700 --> 59:41.700
大体上就是这么样的

59:41.700 --> 59:42.700
去操作的

59:42.700 --> 59:43.700
不管是监听

59:43.700 --> 59:44.700
还是组设

59:44.700 --> 59:45.700
它最终都会返回一个结果

59:45.700 --> 59:46.700
那么调用这个

59:46.700 --> 59:47.700
回调函数

59:47.700 --> 59:49.700
你可以取消组设

59:49.700 --> 59:50.700
取消监听

59:51.700 --> 59:52.700
监听这里的处理鞋

59:52.700 --> 59:53.700
就很简单

59:53.700 --> 59:54.700
因为监听这里的函数

59:54.700 --> 59:55.700
直接在这里调用的

59:55.700 --> 59:56.700
所以说

59:56.700 --> 59:57.700
我只需要让外面

59:57.700 --> 59:58.700
给我传了一个angchant

59:58.700 --> 59:59.700
这个函数进来就行了

59:59.700 --> 01:00:01.700
那么在app组建里边

01:00:01.700 --> 01:00:02.700
它传令到这个angchant

01:00:02.700 --> 01:00:04.700
那么我就传令到这个组建

01:00:04.700 --> 01:00:05.700
这个组建里边有个值组建

01:00:05.700 --> 01:00:06.700
gather helper

01:00:06.700 --> 01:00:07.700
那么就传令到它里边去

01:00:07.700 --> 01:00:08.700
就完事了

01:00:09.700 --> 01:00:10.700
于是我们拥起来的时候

01:00:10.700 --> 01:00:11.700
非常舒服

01:00:11.700 --> 01:00:12.700
拥的时候根本就感觉不到

01:00:12.700 --> 01:00:14.700
它里边有写的这么复杂

01:00:14.700 --> 01:00:15.700
拥的时候就是

01:00:15.700 --> 01:00:17.700
直接掏一个Rose God的组建

01:00:17.700 --> 01:00:18.700
那么你

01:00:18.700 --> 01:00:20.700
如果你要组设的话

01:00:20.700 --> 01:00:22.700
如果你要控制那个组设的话

01:00:22.700 --> 01:00:23.700
那么就调用它

01:00:24.700 --> 01:00:26.700
如果说你不控制组设的话

01:00:26.700 --> 01:00:28.700
你就去调用它

01:00:28.700 --> 01:00:30.700
就完事了

01:00:31.700 --> 01:00:33.700
但是这里有个非常小的bug

01:00:33.700 --> 01:00:34.700
就是

01:00:34.700 --> 01:00:36.700
如果说你没有加这个组设函数

01:00:36.700 --> 01:00:39.700
你没有对组设进行任何处理

01:00:39.700 --> 01:00:40.700
没有对组设进行处理

01:00:40.700 --> 01:00:41.700
那么你挑转的时候

01:00:41.700 --> 01:00:42.700
你看是不是挑转不了

01:00:42.700 --> 01:00:43.700
为什么挑转不了

01:00:43.700 --> 01:00:44.700
你看一下吧

01:00:45.700 --> 01:00:46.700
你没有加这个函数

01:00:46.700 --> 01:00:47.700
就意味着啥呢

01:00:47.700 --> 01:00:48.700
就意味着这边

01:00:48.700 --> 01:00:50.700
是不是这个判断进不去

01:00:50.700 --> 01:00:51.700
判断进不去是不是这个

01:00:51.700 --> 01:00:53.700
get confirmation这个函数

01:00:53.700 --> 01:00:54.700
啥都没调用

01:00:54.700 --> 01:00:55.700
啥都没做

01:00:55.700 --> 01:00:56.700
啥都没做是不是

01:00:56.700 --> 01:00:57.700
没办法提交

01:00:57.700 --> 01:00:58.700
没办法提交

01:00:58.700 --> 01:01:00.700
所以我们这里的ls

01:01:00.700 --> 01:01:01.700
写个ls

01:01:01.700 --> 01:01:02.700
如果说你没有够传这个函数

01:01:02.700 --> 01:01:04.700
ok 我就直接提交就完事了

01:01:04.700 --> 01:01:05.700
我就直接提交

01:01:06.700 --> 01:01:07.700
看一下吧

01:01:07.700 --> 01:01:08.700
现在是不是可以挑转了

01:01:08.700 --> 01:01:09.700
对吧

01:01:09.700 --> 01:01:10.700
可以挑转了

01:01:11.700 --> 01:01:12.700
当然了

01:01:12.700 --> 01:01:13.700
如果说你写了这个函数的话

01:01:13.700 --> 01:01:15.700
你可以控制它能不能挑转

01:01:16.700 --> 01:01:17.700
对吧

01:01:17.700 --> 01:01:18.700
咱们就做了一个

01:01:18.700 --> 01:01:21.700
类似于5u的导航守卫出来

01:01:23.700 --> 01:01:25.700
这是关于

01:01:25.700 --> 01:01:28.700
如何来实现类似于5u的导航守卫

01:01:29.700 --> 01:01:30.700
下来自己一定要去写一下

01:01:30.700 --> 01:01:31.700
主要是认识一下

01:01:31.700 --> 01:01:33.700
这个neson函数和blog函数

01:01:33.700 --> 01:01:35.700
以及get user confirmation函数

01:01:35.700 --> 01:01:36.700
自己一定要去写一下

01:01:36.700 --> 01:01:37.700
不写的话

01:01:37.700 --> 01:01:39.700
告诉你一点印象都没有

01:01:39.700 --> 01:01:40.700
一点印象都没有

01:01:40.700 --> 01:01:41.700
看了就马上就忘了

01:01:41.700 --> 01:01:43.700
那你看了这么多长的时间

01:01:43.700 --> 01:01:44.700
一个小时吧

01:01:44.700 --> 01:01:45.700
就白看了

01:01:45.700 --> 01:01:46.700
真的就白看了

01:01:46.700 --> 01:01:47.700
一定要去写一下

01:01:47.700 --> 01:01:48.700
一定要去写一下

