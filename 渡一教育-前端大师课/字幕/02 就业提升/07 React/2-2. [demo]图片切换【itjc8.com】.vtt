WEBVTT

00:00.110 --> 00:04.710
好 来吧 咱们来做这么一个小的demo

00:04.710 --> 00:06.710
一个小的练习啊

00:06.710 --> 00:09.510
我们这里呢 直接先把运行出来再说

00:09.510 --> 00:12.710
一二start 把他运行着吧

00:12.710 --> 00:16.310
做什么练习呢 就是说做一个图片切换啊

00:16.310 --> 00:19.110
图片自动切换 也没有什么动画效果

00:19.110 --> 00:21.910
没有什么动画效果 就是一个图片切换

00:21.910 --> 00:24.310
非常简单啊 这里有三张图片

00:24.310 --> 00:28.110
有这么三张图片 还是淘宝淘宝里面去扣着一张图片

00:28.110 --> 00:30.110
这样子会不会打广告啊

00:30.110 --> 00:34.110
直接无视里面的文字啊 直接无视里面的文字我随便找的啊图片

00:34.110 --> 00:36.110
跟广告没有一毛钱关系啊

00:36.110 --> 00:39.110
你又没有给我钱 我凭什么给他打广告呢

00:39.110 --> 00:42.110
好 咱们呢 这里呢 其实就是每隔一秒钟嘛

00:42.110 --> 00:44.110
比如说 每隔两秒钟

00:44.110 --> 00:46.110
那么我们来切换一下这张图片

00:46.110 --> 00:49.110
一共有三张图片 所以说我们这里呢

00:49.110 --> 00:51.110
去定一个变量啊 定一个变量

00:51.110 --> 00:53.110
indexed

00:53.110 --> 00:56.110
一开始呢 是E 对吧 一开始呢 是E

00:56.110 --> 01:01.110
然后呢 我们接下来呢 写这么一个函数

01:01.110 --> 01:03.110
函数的名字呢 叫Render

01:03.110 --> 01:05.110
Render 打个数字啊 这个函数说什么用的呢

01:05.110 --> 01:13.110
是根据indexed的值 显示啊 显示某张图片

01:13.110 --> 01:16.110
就是这么一件简单的事 非常非常简单

01:16.110 --> 01:19.110
我就是根据indexed的值 把某张图片显示出来

01:19.110 --> 01:22.110
所以这个函数非常简单 干嘛呢 是不是就是Render

01:22.110 --> 01:25.110
对吧 就直接把这句话扔过来就完事了

01:25.110 --> 01:28.110
扔过来就完事了 稍微改动一下它里面的内容

01:28.110 --> 01:31.110
就这里 这个地方呢 就不是也起一元数了

01:31.110 --> 01:33.110
而是什么元数呢 是一米几元数 对吧

01:33.110 --> 01:35.110
是一个一米几元数

01:35.110 --> 01:37.110
src为啥呢

01:37.110 --> 01:40.110
src呢 我们这里呢 就拼接一个字幕串嘛

01:40.110 --> 01:42.110
拼接一个字幕串

01:42.110 --> 01:44.110
这个字幕串呢 就是

01:44.110 --> 01:47.110
哦 不对啊 不应该是什么 拼接字幕串

01:47.110 --> 01:48.110
应该是这儿啊

01:48.110 --> 01:51.110
先把 要先把这个图片导入进来 对吧

01:51.110 --> 01:53.110
先把我们要使用的图片导入进来

01:53.110 --> 01:55.110
因为我们这一块呢 一会儿打包

01:55.110 --> 01:57.110
打包完了过 它的路径是不一样的

01:57.110 --> 01:59.110
你千万不要在这里这样子写啊

01:59.110 --> 02:01.110
千万不要在这里这样子写

02:01.110 --> 02:03.110
什么底儿斜杠而set

02:03.110 --> 02:05.110
然后呢 这样子写

02:05.110 --> 02:07.110
是不行的啊 是不行的

02:07.110 --> 02:10.110
5u呢 里面呢 是可以这样做的啊

02:10.110 --> 02:13.110
但是呢 在reacts里面不行

02:13.110 --> 02:16.110
reacts里面不行 你得像威帕克里那样子

02:16.110 --> 02:18.110
把图片导入进来

02:18.110 --> 02:21.110
好 那么这里呢 我们把这个图片导入进来

02:21.110 --> 02:24.110
这是1里几1

02:24.110 --> 02:26.110
就是src1

02:26.110 --> 02:29.110
from 哪里呢 就是

02:29.110 --> 02:30.110
rset

02:30.110 --> 02:32.110
然后e.gpg

02:32.110 --> 02:34.110
这是第一个图片支援

02:34.110 --> 02:36.110
那么导入进来之后呢 这个东西呢

02:36.110 --> 02:37.110
就代表的是图片路径

02:37.110 --> 02:39.110
到时候一打包的时候呢

02:39.110 --> 02:41.110
它会把它变成一个真实的路径

02:41.110 --> 02:43.110
因为打包之后 它的路径肯定会变

02:43.110 --> 02:45.110
然后呢

02:45.110 --> 02:47.110
src2 src3

02:47.110 --> 02:49.110
对吧 我们这样子来导入啊

02:49.110 --> 02:51.110
这样子来导入

02:51.110 --> 02:54.110
然后呢 我们这里导入进来了过后啊

02:54.110 --> 02:56.110
我们接下来干嘛呢

02:56.110 --> 02:59.110
接下来呢 我们这里呢 就要就是进行

02:59.110 --> 03:01.110
复制的 给它的src地址复制

03:01.110 --> 03:03.110
怎么来复制呢

03:03.110 --> 03:05.110
我们是要根据这个index的值

03:05.110 --> 03:06.110
对吧 是要根据它的值

03:06.110 --> 03:07.110
或者我们这样子

03:07.110 --> 03:09.110
我们把它放到一个数组里面

03:09.110 --> 03:11.110
把它放到一个数组里面

03:11.110 --> 03:13.110
const

03:13.110 --> 03:15.110
就是srcs

03:15.110 --> 03:16.110
这个数组里面呢

03:16.110 --> 03:17.110
src1

03:17.110 --> 03:20.110
src2 src3

03:20.110 --> 03:24.110
保存 图片 路径的数组

03:24.110 --> 03:25.110
我再说一次啊

03:25.110 --> 03:27.110
为什么要这样去导入进来

03:27.110 --> 03:29.110
因为在rex里面

03:29.110 --> 03:31.110
你是不能直接这样子输入路径的

03:31.110 --> 03:32.110
因为到时候呢

03:32.110 --> 03:34.110
一打包 它的路径会变化

03:34.110 --> 03:36.110
所以说呢 你得先把这个路径的

03:36.110 --> 03:38.110
作为依赖项 导入进来

03:38.110 --> 03:39.110
导入进来过后呢

03:39.110 --> 03:41.110
这里呢 就进入了它目前的图片路径

03:41.110 --> 03:43.110
那如果以后打包之后呢

03:43.110 --> 03:45.110
它的路径呢 也会跟着变化

03:45.110 --> 03:46.110
这是关于这一块

03:46.110 --> 03:48.110
把它放到一个数组里面来

03:48.110 --> 03:49.110
那么这个index

03:49.110 --> 03:50.110
我们直接从0开始吧

03:50.110 --> 03:52.110
先是数组的地下

03:52.110 --> 03:53.110
先是数组的地下

03:53.110 --> 03:57.110
显示的图片锁影

03:57.110 --> 03:59.110
一开始显示地上图片

03:59.110 --> 04:00.110
那么这个函数呢

04:00.110 --> 04:02.110
它就是根据index的值

04:02.110 --> 04:03.110
来找到什么

04:03.110 --> 04:05.110
找到我们要显示的图片路径

04:05.110 --> 04:07.110
所以说这里应该怎么写

04:07.110 --> 04:08.110
该咋写

04:08.110 --> 04:09.110
srcs

04:09.110 --> 04:11.110
这个数组里面去找它

04:11.110 --> 04:13.110
找这个index 对吧

04:13.110 --> 04:14.110
它的写法要表达是

04:14.110 --> 04:16.110
所以说这里怎么写都可以

04:16.110 --> 04:18.110
只要是正常的界式表达是

04:18.110 --> 04:20.110
那么从这个数组里面取出这个index

04:20.110 --> 04:22.110
把它显示出来就完事了

04:22.110 --> 04:23.110
那么这里呢

04:23.110 --> 04:24.110
就是这里呢

04:24.110 --> 04:25.110
我们其实也可以

04:25.110 --> 04:27.110
把它提出来嘛

04:27.110 --> 04:28.110
提出来

04:28.110 --> 04:29.110
我们的容器

04:29.110 --> 04:30.110
容器是咋的

04:30.110 --> 04:31.110
container

04:31.110 --> 04:33.110
container

04:33.110 --> 04:35.110
容器container为这个

04:35.110 --> 04:37.110
把个辩量提出来

04:37.110 --> 04:38.110
那么这里呢

04:38.110 --> 04:39.110
因为我们以后呢

04:39.110 --> 04:40.110
还可能会用的

04:40.110 --> 04:42.110
好 把它写过来

04:42.110 --> 04:43.110
好 就完事了

04:43.110 --> 04:45.110
那咱们去调用一下这个render

04:45.110 --> 04:46.110
看一下能不能把正常的图片

04:46.110 --> 04:47.110
显示出来呢

04:47.110 --> 04:48.110
保存

04:50.110 --> 04:52.110
你看 是不是显示出来了

04:52.110 --> 04:53.110
对吧 图片就显示出来了

04:53.110 --> 04:54.110
好 咱们呢

04:54.110 --> 04:55.110
稍微来设置一下

04:55.110 --> 04:56.110
这里的样式

04:56.110 --> 04:57.110
稍微设置一下样式

04:57.110 --> 04:58.110
我们这里呢

04:58.110 --> 05:01.110
去写这么一个css文件

05:01.110 --> 05:02.110
比方说

05:02.110 --> 05:04.110
index.css

05:04.110 --> 05:05.110
好 我们这里呢

05:05.110 --> 05:07.110
把这个css文件导入进来

05:07.110 --> 05:08.110
import

05:08.110 --> 05:11.110
index.sq

05:12.110 --> 05:13.110
index.css

05:13.110 --> 05:15.110
把这个css导入进来

05:15.110 --> 05:16.110
导入进来之后呢

05:16.110 --> 05:17.110
我们在css里面

05:17.110 --> 05:18.110
稍微的去设置一下

05:18.110 --> 05:20.110
这个容器的样式啊

05:20.110 --> 05:21.110
检查

05:21.110 --> 05:23.110
就设置一下这个div-root

05:23.110 --> 05:25.110
这个他里边的样式

05:25.110 --> 05:27.110
root

05:27.110 --> 05:29.110
给他设置一个宽度

05:29.110 --> 05:30.110
宽度的话

05:30.110 --> 05:31.110
咱们就设置

05:31.110 --> 05:32.110
我们看

05:32.110 --> 05:33.110
我之前量过

05:33.110 --> 05:36.110
图片的宽高是520x280

05:36.110 --> 05:38.110
去这样的设置一下

05:38.110 --> 05:39.110
然后加一个border

05:39.110 --> 05:40.110
边框

05:40.110 --> 05:41.110
然后呢

05:41.110 --> 05:43.110
margin0out

05:43.110 --> 05:44.110
保存啊

05:44.110 --> 05:45.110
保存

05:45.110 --> 05:46.110
把局中

05:46.110 --> 05:47.110
好吧

05:47.110 --> 05:48.110
这个很简单对吧

05:48.110 --> 05:49.110
把局中

05:49.110 --> 05:50.110
好 然后里边的图片呢

05:50.110 --> 05:51.110
我们为了防止

05:51.110 --> 05:53.110
他里边图片尺寸不一致

05:53.110 --> 05:55.110
所以说我们单独去设置一下

05:55.110 --> 05:56.110
里边的图片

05:56.110 --> 05:57.110
图片的话

05:57.110 --> 06:00.110
我们设置一下宽度的百分之百

06:00.110 --> 06:01.110
宽度

06:01.110 --> 06:02.110
百分之百

06:02.110 --> 06:03.110
然后呢

06:03.110 --> 06:04.110
高度

06:04.110 --> 06:05.110
百分之百

06:05.110 --> 06:06.110
然后呢

06:06.110 --> 06:07.110
把它变成快和

06:07.110 --> 06:08.110
防止摆边嘛

06:08.110 --> 06:09.110
防止下边的摆边

06:09.110 --> 06:11.110
把它变成快和

06:11.110 --> 06:12.110
保存啊

06:12.110 --> 06:13.110
那图片就完事了

06:13.110 --> 06:14.110
对吧

06:14.110 --> 06:16.110
好 那么接着就是切换了

06:16.110 --> 06:18.110
怎么来去切换这个图片

06:18.110 --> 06:20.110
咱们再写一个函数

06:20.110 --> 06:21.110
这个函数呢

06:21.110 --> 06:22.110
我们把它取名为

06:22.110 --> 06:24.110
叫做start

06:24.110 --> 06:25.110
start

06:27.110 --> 06:29.110
就是启动

06:29.110 --> 06:30.110
计时器

06:30.110 --> 06:31.110
启动计时器

06:31.110 --> 06:34.110
每隔一段时间

06:34.110 --> 06:36.110
每隔一段时间

06:36.110 --> 06:37.110
切换

06:37.110 --> 06:39.110
切换图片

06:39.110 --> 06:40.110
切换图片

06:40.110 --> 06:42.110
那么这个计时器怎么写呢

06:42.110 --> 06:43.110
这个计时器

06:43.110 --> 06:44.110
好 我们这里呢

06:44.110 --> 06:45.110
就可以直接写一个

06:45.110 --> 06:46.110
set interval

06:46.110 --> 06:47.110
set interval

06:47.110 --> 06:48.110
然后呢

06:48.110 --> 06:49.110
这里边

06:49.110 --> 06:50.110
每隔一段时间

06:50.110 --> 06:51.110
比方说啊

06:51.110 --> 06:53.110
比方说咱们每隔

06:53.110 --> 06:54.110
多少呢

06:54.110 --> 06:56.110
每隔的2秒钟

06:56.110 --> 06:57.110
2秒钟

06:57.110 --> 06:59.110
每隔2秒钟去切换一次图片

06:59.110 --> 07:00.110
怎么来切换

07:00.110 --> 07:02.110
是不是改变这个啥

07:02.110 --> 07:03.110
改变index值

07:03.110 --> 07:04.110
对吧

07:04.110 --> 07:05.110
改变这个数据

07:05.110 --> 07:06.110
index加加

07:06.110 --> 07:07.110
当然了

07:07.110 --> 07:09.110
这个值呢你不能无限加下去

07:09.110 --> 07:11.110
它的取值范围是不是012

07:11.110 --> 07:12.110
你不要看这

07:12.110 --> 07:13.110
就看这

07:13.110 --> 07:14.110
取值范围是不是012

07:14.110 --> 07:15.110
对吧

07:15.110 --> 07:16.110
一共有三个下标嘛

07:16.110 --> 07:17.110
取值范围012

07:17.110 --> 07:19.110
所以说我们可以用这种方式来做

07:19.110 --> 07:20.110
重新给它复制

07:20.110 --> 07:21.110
复制为啥呢

07:21.110 --> 07:23.110
index 加1 除以3

07:23.110 --> 07:24.110
对吧

07:24.110 --> 07:26.110
是不是这个道理

07:26.110 --> 07:27.110
没问题吧

07:27.110 --> 07:28.110
如果它为0的时候

07:28.110 --> 07:29.110
它下一张是啥呢

07:29.110 --> 07:31.110
下一张就是加1 除以3

07:31.110 --> 07:32.110
的余数

07:32.110 --> 07:33.110
那么就是1

07:33.110 --> 07:34.110
如果它是1的话

07:34.110 --> 07:37.110
加1 除以3的余数就是2

07:37.110 --> 07:38.110
如果它是2的话

07:38.110 --> 07:39.110
加1 除以3的余数

07:39.110 --> 07:40.110
是不是又变成0了

07:40.110 --> 07:41.110
对吧

07:41.110 --> 07:43.110
我们可以用这种方式来进行处理

07:43.110 --> 07:44.110
好

07:44.110 --> 07:45.110
这样子处理之后呢

07:45.110 --> 07:46.110
我们改变了index值

07:46.110 --> 07:48.110
改变index

07:48.110 --> 07:49.110
好

07:49.110 --> 07:50.110
接下来干嘛

07:50.110 --> 07:52.110
是不是又重新去调用Render

07:52.110 --> 07:53.110
对吧

07:53.110 --> 07:54.110
重新调用Render

07:54.110 --> 07:55.110
重新渲染一遍

07:55.110 --> 07:56.110
因为Render

07:56.110 --> 07:58.110
它就是根据index值

07:58.110 --> 07:59.110
显示某一张图片

07:59.110 --> 08:00.110
你别看这个

08:00.110 --> 08:02.110
这个demo很小

08:02.110 --> 08:03.110
但是它里边

08:03.110 --> 08:05.110
特别特别能说明道理

08:05.110 --> 08:06.110
说明什么道理呢

08:06.110 --> 08:07.110
就说明说

08:07.110 --> 08:08.110
我们的rex

08:08.110 --> 08:10.110
它里边每一次渲染

08:10.110 --> 08:11.110
都是一个静态的东西

08:11.110 --> 08:13.110
你要做一些改变的话

08:13.110 --> 08:14.110
你需要重新渲染

08:14.110 --> 08:17.110
重新构建这个

08:17.110 --> 08:19.110
就是rex元素

08:19.110 --> 08:20.110
重新去构建

08:20.110 --> 08:21.110
好

08:21.110 --> 08:22.110
那么我们重新渲染就完成了

08:22.110 --> 08:23.110
好

08:23.110 --> 08:24.110
因此呢

08:24.110 --> 08:25.110
我们一开始渲染之后

08:25.110 --> 08:26.110
我们这里启动

08:26.110 --> 08:27.110
start

08:27.110 --> 08:28.110
启动起来

08:28.110 --> 08:29.110
保存

08:29.110 --> 08:32.060
看一下

08:32.060 --> 08:34.060
刷新

08:35.060 --> 08:38.570
没有反应是吧

08:38.570 --> 08:39.570
没有反应

08:39.570 --> 08:40.570
咱们来测试一下

08:40.570 --> 08:41.570
来测试一下

08:41.570 --> 08:43.570
看一下到底是怎么回事

08:43.570 --> 08:44.570
我们这里

08:44.570 --> 08:45.570
start里面

08:45.570 --> 08:46.570
我们启动了一个setting

08:46.570 --> 08:47.570
table计时器

08:47.570 --> 08:48.570
启动这么一个计时器

08:48.570 --> 08:50.570
我们这里打印一下

08:50.570 --> 08:51.570
打印一下

08:51.570 --> 08:53.570
每次计时器开始的index

08:53.570 --> 08:54.570
看一下有没有

08:54.570 --> 08:56.570
这样的一个输出

08:56.570 --> 08:57.570
保存

08:57.570 --> 08:58.570
0

08:58.570 --> 09:00.570
1

09:00.570 --> 09:01.570
2

09:01.570 --> 09:02.570
好

09:02.570 --> 09:03.570
说明它有输出

09:03.570 --> 09:04.570
对不对

09:04.570 --> 09:05.570
有输出

09:05.570 --> 09:07.570
那么有输出的话

09:07.570 --> 09:08.570
我这里

09:08.570 --> 09:09.570
明白了

09:09.570 --> 09:10.570
这里的图片

09:10.570 --> 09:12.570
我始终写的是一个

09:12.570 --> 09:13.570
1 2 3

09:13.570 --> 09:15.570
重新改一下图片路径

09:15.570 --> 09:17.570
看一下

09:17.570 --> 09:18.570
切换了

09:18.570 --> 09:19.570
切换了

09:19.570 --> 09:21.570
大家体会这么一个过程

09:21.570 --> 09:23.570
我们改变的是数据

09:23.570 --> 09:25.570
然后让它根据数据

09:25.570 --> 09:26.570
去重新进行渲染

09:26.570 --> 09:28.570
这是rex的做法

09:28.570 --> 09:29.570
你想一下

09:29.570 --> 09:31.570
根据又一进行下对比

09:31.570 --> 09:32.570
那么rex

09:32.570 --> 09:33.570
是不是感觉非常非常底层

09:33.570 --> 09:34.570
对吧

09:34.570 --> 09:36.570
它没有给你进行过渡的封装

09:36.570 --> 09:39.570
你自己去完成这些事情

09:39.570 --> 09:40.570
它要做的事情

09:40.570 --> 09:42.570
无非就是来渲染

09:42.570 --> 09:44.570
就是来创建一个rex元素

09:44.570 --> 09:45.570
然后把它渲染出来

09:45.570 --> 09:46.570
它就做这个事

09:46.570 --> 09:47.570
好

09:47.570 --> 09:48.570
接下来

09:48.570 --> 09:49.570
我们再来做一个

09:49.570 --> 09:50.570
加一个效果

09:50.570 --> 09:51.570
就是我们鼠标仪

09:51.570 --> 09:52.570
上去的时候

09:52.570 --> 09:54.570
这个计时器停止

09:54.570 --> 09:55.570
然后鼠标仪

09:55.570 --> 09:56.570
出来的时候

09:56.570 --> 09:58.570
计时器又重新启动

09:58.570 --> 09:59.570
那么这个东西怎么做呢

09:59.570 --> 10:01.570
我们需要一个停止函数

10:01.570 --> 10:03.570
需要一个停止的函数

10:03.570 --> 10:04.570
比方说

10:04.570 --> 10:06.570
我们这里在外面加一个变量

10:06.570 --> 10:07.570
加一个变量

10:07.570 --> 10:10.880
来作为计时器

10:10.880 --> 10:11.880
Timer

10:11.880 --> 10:14.880
因为我要重新复制的Timer

10:14.880 --> 10:17.880
这是一个计时器

10:17.880 --> 10:18.880
然后这里

10:18.880 --> 10:20.880
我们每一次设置计时器的时候

10:20.880 --> 10:23.880
给Timer重新复制

10:23.880 --> 10:25.880
设置个计时器

10:25.880 --> 10:27.880
当然我们为了避免

10:27.880 --> 10:29.880
重复的去启动多个计时器

10:29.880 --> 10:31.880
所以说我们每次先清空一下

10:31.880 --> 10:32.880
Timer清空

10:32.880 --> 10:34.880
然后再重新计时

10:34.880 --> 10:36.880
然后这里我们再写一个函数

10:36.880 --> 10:37.880
Stop

10:37.880 --> 10:42.880
就是停止计时器

10:42.880 --> 10:43.880
停止计时器

10:43.880 --> 10:45.880
停止计时器的做法

10:45.880 --> 10:46.880
非常非常简单

10:46.880 --> 10:48.880
就是clear interval

10:48.880 --> 10:49.880
Timer

10:49.880 --> 10:50.880
对吧

10:50.880 --> 10:51.880
直接把它清空掉就完事了

10:51.880 --> 10:52.880
对不对

10:52.880 --> 10:53.880
当然我们这里开始的时候

10:53.880 --> 10:54.880
先把之前的

10:54.880 --> 10:56.880
万一它重复的调用

10:56.880 --> 10:57.880
调用开始

10:57.880 --> 10:58.880
我们先把之前的

10:58.880 --> 10:59.880
先清空

10:59.880 --> 11:00.880
然后再重新计时

11:00.880 --> 11:02.880
那么停止的时候就最简单了

11:02.880 --> 11:04.880
就直接把它清空就完事了

11:04.880 --> 11:05.880
好

11:05.880 --> 11:06.880
接下来我们来注册试渐

11:06.880 --> 11:07.880
什么试渐呢

11:07.880 --> 11:09.880
当鼠标移入的时候开始

11:09.880 --> 11:12.880
鼠标移出的时候停止

11:12.880 --> 11:14.880
那么我们给谁注册试渐

11:14.880 --> 11:15.880
是不是可以给容器

11:15.880 --> 11:16.880
对吧

11:16.880 --> 11:17.880
给DIV注册试渐

11:17.880 --> 11:18.880
那么注册试渐

11:18.880 --> 11:19.880
目前

11:19.880 --> 11:20.880
我们还没有学习到

11:20.880 --> 11:22.880
Reyek成里边的试渐

11:22.880 --> 11:23.880
我们先目前

11:23.880 --> 11:24.880
就用动物元素的试渐

11:24.880 --> 11:25.880
没问题

11:25.880 --> 11:26.880
一点问题都没有

11:26.880 --> 11:27.880
因为Reyek成了

11:27.880 --> 11:29.880
它没有侵入性

11:29.880 --> 11:31.880
你完全可以用之前的东西

11:31.880 --> 11:32.880
好

11:32.880 --> 11:33.880
Contain了

11:33.880 --> 11:34.880
我们给它注册试渐

11:34.880 --> 11:35.880
什么啊

11:35.880 --> 11:36.880
Mouse

11:36.880 --> 11:37.880
Enter

11:37.880 --> 11:39.880
当鼠标移入的时候

11:39.880 --> 11:40.880
咱们干嘛呢

11:40.880 --> 11:41.880
Start

11:41.880 --> 11:42.880
启动计时期

11:42.880 --> 11:43.880
然后

11:43.880 --> 11:45.880
诶呗鼠标移入的时候停止计时期

11:45.880 --> 11:47.880
Stop

11:47.880 --> 11:49.880
当鼠标移出的时候呢

11:49.880 --> 11:51.880
啊Mouse

11:51.880 --> 11:53.880
Out

11:53.880 --> 11:55.880
啊MouseLeave

11:55.880 --> 11:56.880
啊MouseLeave

11:56.880 --> 11:58.880
当我们鼠标移出的时候

11:58.880 --> 11:59.880
咱们干嘛呢

11:59.880 --> 12:00.880
Start

12:00.880 --> 12:01.880
启动计时期

12:01.880 --> 12:02.880
你看就完了

12:02.880 --> 12:04.880
保存

12:04.880 --> 12:06.880
你看呀

12:06.880 --> 12:08.880
在自动运行对吧

12:08.880 --> 12:09.880
鼠标移入

12:09.880 --> 12:11.880
你看是不是停止的

12:11.880 --> 12:13.880
停止的停止计时的

12:13.880 --> 12:14.880
鼠标移出

12:14.880 --> 12:17.880
又重新的去启动了这个计时期

12:17.880 --> 12:18.880
就这么简单

12:18.880 --> 12:20.880
所以说大家会感觉到啊

12:20.880 --> 12:21.880
这个Reyek成了

12:21.880 --> 12:23.880
它的侵入性非常非常弱

12:23.880 --> 12:24.880
它没有

12:24.880 --> 12:27.880
就是没有改变太多的东西

12:27.880 --> 12:29.880
这件事情就是

12:29.880 --> 12:31.880
根据一些数据

12:31.880 --> 12:33.880
然后得到一个Reyek是元素

12:33.880 --> 12:35.880
然后把元素呢进行渲染

12:35.880 --> 12:37.880
它就做这么一件事

12:37.880 --> 12:38.880
好

12:38.880 --> 12:40.880
这是咱们这么一个小的demo

12:40.880 --> 12:42.880
大家虽然说很小啊

12:42.880 --> 12:43.880
你看的懂没关系啊

12:43.880 --> 12:46.880
但是呢你一定要

12:46.880 --> 12:47.880
下来吧练一次

12:47.880 --> 12:49.880
你不要认为自己看的懂

12:49.880 --> 12:51.880
你去写一次去体会一下

12:51.880 --> 12:53.880
这个Reyek是怎么来去

12:53.880 --> 12:55.880
渲染我们的元素的

12:55.880 --> 12:57.880
这是这么一个小的demo

