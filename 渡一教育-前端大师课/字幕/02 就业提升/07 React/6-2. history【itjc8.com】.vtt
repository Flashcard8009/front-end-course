WEBVTT

00:00.940 --> 00:08.140
先说一课 我上节课犯了一个非常非常低级的错误

00:08.140 --> 00:13.140
上节课咱们我也不知道我脑袋是咋想的

00:13.140 --> 00:16.540
整个真的是修斗了 我干嘛把这个参数去掉了

00:16.540 --> 00:18.140
这个参数是不能去掉的

00:18.140 --> 00:27.500
这个参数大家要把它加上啊 加上参数是不能去掉的

00:27.500 --> 00:30.100
为什么不能去掉了 我也不知道我怎么想的

00:30.400 --> 00:32.100
这个参数为什么不能去掉

00:32.100 --> 00:35.700
是因为我这里如果把这样子写死了过后呢

00:35.700 --> 00:40.400
我就是做了一个假设 假设它的就是我们的真实的地址

00:40.400 --> 00:45.000
真实的请求地址 来自于地址男的passname

00:45.000 --> 00:47.900
就说我们真实的地址他一定是来自于这

00:47.900 --> 00:48.900
不要弄到口号

00:52.000 --> 00:55.100
这里abc 就是我们认为真实的地址他一定是这

00:55.100 --> 00:58.100
那不一定哦 不一定哦 他可能是这种情况

00:58.200 --> 00:59.800
对吧 他可能是这种情况

00:59.800 --> 01:02.900
那么passname就为空 对不对 就只有一个鞋杠

01:02.900 --> 01:06.400
对吧 不能去做这种假设 不能去做这种假设

01:06.400 --> 01:07.500
应该让他传给我

01:07.500 --> 01:10.900
因为我这里不要去关心他地址到底在哪来的

01:10.900 --> 01:13.700
管理是哪来的 有可能呢

01:13.700 --> 01:16.000
我刚才说了有可能是哈希对吧

01:16.000 --> 01:18.400
也有可能是就是地址男的真实地址

01:18.400 --> 01:20.600
还有一种可能呢 跟地址就没有关系

01:20.600 --> 01:23.500
比方说 以后咱们学到手机端

01:23.500 --> 01:26.100
我们后面肯定你们后面肯定会学

01:26.300 --> 01:29.800
那个rex native 应该的话 我看一下

01:31.700 --> 01:34.700
很快就会学习了 你们你们把那个web

01:34.700 --> 01:37.300
web这三大框架啊 什么

01:37.300 --> 01:39.500
vue啊rex啊 安格拉一学完

01:39.500 --> 01:42.000
那估计得得学那个手机端了啊 移动端

01:42.000 --> 01:44.600
那么到时候呢 你会发现手机端的英雄里边

01:44.600 --> 01:47.100
哪有什么浏览器啊 浏览器根本就不存在

01:47.100 --> 01:48.800
更加不存在什么地址哪呢

01:48.800 --> 01:51.400
那么他的地址放在哪呢 放在内存里边

01:51.400 --> 01:53.300
放在内存里面一个数组在管理

01:53.300 --> 01:55.500
所以说你就不要去管这个地址哪来的啊

01:55.500 --> 01:57.600
我们这里是不能管的啊 不能管的

01:57.600 --> 01:59.500
所以说这里呢 怎么去

01:59.500 --> 02:01.700
我也不知道我怎么能放这种地址错误

02:01.700 --> 02:08.400
pass name 这是表示的是真实的地址

02:08.400 --> 02:09.900
那管他这个地址哪来的管

02:09.900 --> 02:12.400
反正你给我一个地址吧 我去匹配一碗算了

02:12.400 --> 02:15.500
把张杰克这个问题修复一下

02:15.500 --> 02:18.000
好 咱们周杰克讲啥呢

02:18.000 --> 02:21.100
张杰克呢 我们已经搞定了那个

02:21.100 --> 02:23.500
通过这个库呢 做了什么

02:23.500 --> 02:25.400
他的目的是什么 这个库

02:25.400 --> 02:29.100
使用来创建一个march对象

02:29.100 --> 02:31.200
我们使用这个库的目的

02:31.200 --> 02:33.200
是要来创建一个march对象

02:33.200 --> 02:35.800
那么到时候呢 纹路游里边不是有这个march对象吗

02:35.800 --> 02:39.200
到时候我们就可以通过这个库来得到march对象了

02:39.200 --> 02:41.100
那除了march对象之外呢

02:41.100 --> 02:43.400
我们在rex roter里边呢

02:43.400 --> 02:46.300
我们会发现呢 在上下纹里边啊

02:46.300 --> 02:48.500
他还有一些东西

02:48.500 --> 02:50.200
还有啥呢 其实大家都知道 对吧

02:50.200 --> 02:51.700
都懂 看一下吧

02:51.700 --> 02:52.800
还是多多少的看一下

02:52.900 --> 02:54.900
browser roter

02:56.100 --> 02:57.000
其他也不管了啊

02:57.000 --> 02:57.800
我们直接来

02:58.900 --> 03:00.400
browser roter

03:05.400 --> 03:06.200
就行了吗

03:06.200 --> 03:07.000
就行了

03:07.000 --> 03:09.000
保存啊 咱们来看一下这里边

03:09.000 --> 03:10.500
他不是提供了一个上下纹吗

03:11.100 --> 03:11.800
看一下啊

03:13.800 --> 03:15.500
app下面 browser roter

03:15.500 --> 03:16.900
下面他给掏了一个主线

03:16.900 --> 03:18.400
roter 这我们后面都会讲

03:19.000 --> 03:20.200
他里边提供了一个上下纹

03:20.200 --> 03:21.900
你看一下上下纹的value里边

03:22.000 --> 03:23.400
提供了啥呢 除了march对象

03:23.400 --> 03:24.700
march对象是不是已经搞定了

03:24.700 --> 03:25.800
对吧 已经搞定了

03:25.800 --> 03:27.100
除了march对象之外呢

03:27.100 --> 03:29.100
还提供了一个什么history

03:29.800 --> 03:30.700
还提供了这个

03:31.400 --> 03:33.600
而且大家当然还有个location啊

03:33.600 --> 03:35.200
但location对象很简单

03:35.200 --> 03:37.400
因为你把history的这个location搞定了

03:37.400 --> 03:38.200
那是不是那个location

03:38.200 --> 03:39.500
直接把提出来就完事了

03:39.500 --> 03:40.600
因为我们之前验证过

03:40.600 --> 03:42.100
这个location就是这个location

03:42.100 --> 03:43.200
对吧 验证过的

03:43.200 --> 03:44.700
所以说直接把提出来就完事了

03:44.700 --> 03:46.300
关键是在于这个history对象

03:46.300 --> 03:47.300
我们要搞定

03:47.300 --> 03:48.800
这里边信息超级多

03:48.800 --> 03:50.700
而且提供了很多的使用方法

03:51.300 --> 03:53.300
好吧 我们要搞定这个history对象

03:54.100 --> 03:56.200
好了 那么这个对象怎么来处理呢

03:56.900 --> 03:57.700
我们这里说一下

03:57.700 --> 03:59.200
这几颗我们要搞定的是什么了

04:00.400 --> 04:01.200
history对象

04:03.000 --> 04:04.100
history对象

04:04.700 --> 04:08.700
就是该对象提供了一些方法

04:09.200 --> 04:10.900
用于控制

04:11.700 --> 04:12.900
控制那个

04:13.300 --> 04:14.600
控制或监听

04:14.600 --> 04:15.900
我们后面会说监听

04:15.900 --> 04:18.100
前面我们讲rex rotors的时候都没用到监听

04:18.100 --> 04:19.500
因为当时确实用不上

04:20.000 --> 04:20.700
当时确实用不上

04:20.700 --> 04:23.200
现在我们讲到原码级别过程就可以用上了

04:23.200 --> 04:24.100
可以做一些事情

04:24.600 --> 04:28.500
用于控制或监听地址的变化

04:30.100 --> 04:31.900
控制地址发生变化

04:32.900 --> 04:34.700
在地址单里边加入一个新地址

04:34.900 --> 04:36.900
或者是地址变化了过后

04:36.900 --> 04:38.100
我要收到一个消息

04:38.500 --> 04:40.900
有点像不用的导航守卫 对吧

04:41.900 --> 04:42.800
那么它提供了一些方法

04:42.800 --> 04:43.600
做这么一些事情

04:43.600 --> 04:45.100
这是history对象的作用

04:45.600 --> 04:47.700
但是大家千万不要理解为

04:47.800 --> 04:48.800
这个history对象

04:48.800 --> 04:50.600
它就是window的history对象

04:51.500 --> 04:53.700
该对象不是注意

04:55.100 --> 04:59.300
该对象不是window的history

05:00.400 --> 05:03.200
而是一个抽离的对象

05:06.100 --> 05:09.400
它封装了

05:10.200 --> 05:11.500
封装了就是

05:14.000 --> 05:17.100
封装了具体的实现

05:17.500 --> 05:19.300
就是说你可以改变地址难

05:19.300 --> 05:21.200
那么你可以通过这个对象来改变地址难

05:21.200 --> 05:23.200
也可以通过这个对象来改变哈希

05:23.200 --> 05:26.300
关键是取决于你这个对象是怎么产生的

05:26.300 --> 05:27.700
它不是history对象

05:27.700 --> 05:29.300
因为我们的路由的方式

05:29.300 --> 05:31.200
它不一定是history api

05:31.900 --> 05:33.700
不一定是history api

05:33.700 --> 05:35.100
而有可能是哈希

05:35.100 --> 05:37.500
甚至有可能跟地址单就没关系

05:38.300 --> 05:42.300
它叫做memory history

05:42.300 --> 05:44.400
跟地址单就没有任何关系

05:44.400 --> 05:46.100
都有可能

05:46.100 --> 05:47.700
所以说你不能假设

05:47.700 --> 05:49.500
它就是window.history

05:50.100 --> 05:51.300
它是抽离的对象

05:51.300 --> 05:57.300
它提供统一的API接口

05:57.700 --> 05:59.100
封装了具体的实现

05:59.700 --> 06:00.500
就是这个对象

06:00.500 --> 06:01.900
也就是说我们这里

06:03.200 --> 06:05.100
我们要考虑这么几种情况

06:05.100 --> 06:06.600
我们最重要得到这么一个对象

06:06.600 --> 06:07.500
这个对象是什么样子

06:07.500 --> 06:08.700
长的样子就是这样子

06:08.700 --> 06:10.300
就长这样子

06:11.200 --> 06:13.100
我们要得到这个对象之后

06:13.100 --> 06:15.400
要能够通过一个统一的API来操作

06:15.400 --> 06:17.600
但是我并不关心

06:17.600 --> 06:18.800
它到底是什么

06:18.800 --> 06:20.600
浏览器的地址

06:20.600 --> 06:21.600
还是哈希

06:21.600 --> 06:23.100
还是说跟地址单就没关系

06:23.100 --> 06:25.000
就是内存里边的一个数组

06:25.000 --> 06:26.000
我们不用关心

06:26.000 --> 06:27.300
不用关心这一点

06:27.300 --> 06:28.400
这是我们要打到的目标

06:28.400 --> 06:29.500
懂我这个意思吗

06:29.500 --> 06:31.600
就是说用一张图来表示的话

06:31.600 --> 06:33.600
就是说我们得到的history

06:37.000 --> 06:38.300
history对象

06:38.300 --> 06:39.100
拿了这个对象过后

06:39.100 --> 06:40.500
我们去操作它

06:40.500 --> 06:41.700
通过这个对象去操作

06:43.500 --> 06:44.500
操作这个对象

06:45.100 --> 06:46.600
因为它里面提供了很多API

06:47.800 --> 06:48.900
操作的时候

06:48.900 --> 06:50.300
它有几种情况

06:50.300 --> 06:51.900
哪些情况

06:51.900 --> 06:52.900
哪些情况

06:52.900 --> 06:54.900
就是说它有可能说

06:54.900 --> 06:56.200
它是改变的是什么

06:56.200 --> 06:59.600
利用的是history API

06:59.600 --> 07:03.100
来改变流烂器地址

07:03.100 --> 07:05.700
改变流烂器地址

07:05.700 --> 07:07.100
它有可能是这样子

07:08.600 --> 07:09.700
也有可能

07:09.700 --> 07:13.300
它是改变流烂器的哈希

07:14.700 --> 07:15.900
也有可能是

07:15.900 --> 07:17.500
仅改变

07:17.500 --> 07:22.600
内存中的地址

07:22.600 --> 07:23.500
当然内存的地址

07:23.500 --> 07:25.300
我们这几颗提一下就行了

07:25.300 --> 07:25.900
简单说一下

07:25.900 --> 07:27.800
因为后边我们讲手机端的时候

07:27.800 --> 07:28.900
才会具体的说

07:28.900 --> 07:30.400
所以我们操作这个对象的时候

07:30.400 --> 07:31.900
它是要根据情况

07:31.900 --> 07:33.900
根据情况去做不同的事情

07:33.900 --> 07:36.500
不是说它一定是控制的地址

07:36.500 --> 07:37.100
难

07:37.100 --> 07:38.100
懂我这个意思吗

07:38.100 --> 07:39.700
我们操作这个对象的方式

07:39.700 --> 07:41.700
是完全一样的

07:41.700 --> 07:42.500
方式不变

07:42.500 --> 07:44.300
就是说我们给我们提供同意的接口

07:44.300 --> 07:45.400
我们不用去关心

07:45.400 --> 07:47.200
它到底是操作的是什么东西

07:47.200 --> 07:48.700
但是它自己来控制

07:48.700 --> 07:51.300
到底操作的是什么

07:51.300 --> 07:52.700
就是这么一个逻辑

07:52.700 --> 07:54.000
那么这个对象里边

07:54.000 --> 07:55.300
它到底要操作啥呢

07:55.300 --> 07:56.300
它总要操作一个东西

07:56.300 --> 07:57.700
它到底操作哪一个呢

07:57.700 --> 08:01.100
取决于这个对象是怎么产生的

08:01.100 --> 08:03.700
我们通常就是

08:03.700 --> 08:04.500
不是通常

08:04.500 --> 08:06.100
就是我们这里

08:06.100 --> 08:07.600
会提供那么一些方法

08:07.600 --> 08:08.900
来产生那个对象

08:08.900 --> 08:10.300
不同的方法产生的对象

08:10.300 --> 08:11.300
它操作的是不一样

08:11.300 --> 08:12.500
那比方说

08:12.500 --> 08:15.500
比方说决利者

08:15.500 --> 08:17.900
比方说我们这里提供三个方法

08:17.900 --> 08:23.700
create browser history

08:23.700 --> 08:24.700
提供这个方法

08:24.700 --> 08:26.400
那么产生的就是

08:26.400 --> 08:27.900
产生的是什么

08:27.900 --> 08:28.900
我们再写个字吧

08:28.900 --> 08:31.600
写到笔记这里

08:31.600 --> 08:32.700
产生的是什么

08:32.700 --> 08:36.600
产生的是控制

08:36.700 --> 08:38.300
浏览器

08:38.300 --> 08:40.400
真实地质的

08:40.400 --> 08:42.600
history对象

08:42.600 --> 08:44.300
这个history对象长的都一模一样

08:44.300 --> 08:46.100
但是它控制的东西不一样

08:46.100 --> 08:48.000
如果说我们使用这个方法

08:48.000 --> 08:49.900
比方说我举个例子

08:49.900 --> 08:51.000
history

08:51.000 --> 08:52.600
那么这样子产生的就是

08:52.600 --> 08:54.200
控制浏览器

08:54.200 --> 08:57.200
哈希的history对象

08:57.200 --> 08:59.000
但是我们用它的时候

08:59.000 --> 09:00.000
都是一样的用法

09:00.000 --> 09:00.900
根本不用关心

09:00.900 --> 09:03.400
它到底是哈希还是browser history

09:03.400 --> 09:05.400
那么如果说

09:05.400 --> 09:08.300
这里产生的是memory history

09:08.300 --> 09:09.000
memory history

09:09.000 --> 09:10.100
我们以前没接触过

09:10.100 --> 09:11.000
没关系

09:11.000 --> 09:13.000
我们以后一说一下就明白了

09:13.000 --> 09:15.200
这里产生的是

09:15.200 --> 09:20.800
控制内存中地址数组的对象

09:20.800 --> 09:22.600
就是它把一个地址

09:22.600 --> 09:23.900
放到数组里边

09:23.900 --> 09:25.900
数组的对象

09:25.900 --> 09:26.700
就这么个意思

09:26.700 --> 09:28.200
明白这个意思吗

09:28.200 --> 09:29.600
我们通过不同的方法

09:29.600 --> 09:30.800
通过不同的函数

09:30.800 --> 09:32.100
来产生的地址对象

09:32.100 --> 09:34.600
得到了结果

09:35.400 --> 09:37.300
对象长得都一模一样

09:37.300 --> 09:39.900
只是它控制的东西不一样

09:39.900 --> 09:42.300
所以说我们要完成这么一个目标

09:42.300 --> 09:44.800
明白这个意思吗

09:44.800 --> 09:46.900
但是不管是哪一个history对象

09:46.900 --> 09:48.500
它有一个共同的特点

09:48.500 --> 09:50.100
当然它长的肯定是一样的

09:50.100 --> 09:53.900
history对象共同的特点

09:53.900 --> 09:54.700
是什么呢

09:54.700 --> 10:01.100
就是它维护了一个地址站

10:01.100 --> 10:02.700
就是说我们

10:02.700 --> 10:03.700
再画个PVT

10:03.800 --> 10:05.000
我们之前说过

10:05.000 --> 10:07.600
浏览器的history地址

10:07.600 --> 10:09.000
它就是一个地址站

10:09.000 --> 10:09.800
相当于是个站

10:09.800 --> 10:11.800
这个站里边有一个入站操作

10:11.800 --> 10:13.000
给它加一个新的地址

10:13.000 --> 10:14.700
PVT加一个新的地址

10:14.700 --> 10:16.200
对吧

10:16.200 --> 10:17.000
一个地址

10:17.000 --> 10:17.800
地址1

10:17.800 --> 10:19.300
然后再加一个地址

10:19.300 --> 10:20.600
又是入站

10:20.600 --> 10:21.200
地址2

10:21.200 --> 10:22.000
它还有一个指针

10:22.000 --> 10:22.700
对不对

10:22.700 --> 10:23.600
还有一个指针

10:23.600 --> 10:24.900
它指向某一个地址

10:24.900 --> 10:25.900
那么指向哪个地址

10:25.900 --> 10:27.400
目前显示哪个地址

10:27.400 --> 10:29.000
然后不要再加一个地址

10:29.000 --> 10:30.200
地址3

10:30.200 --> 10:32.000
地址3

10:32.000 --> 10:33.000
那么就跑这来了

10:33.500 --> 10:34.900
什么叫做后推呢

10:34.900 --> 10:37.300
后推就是指针移动

10:37.300 --> 10:39.300
指针移动就是后推

10:39.300 --> 10:40.500
指针移动就是后推

10:40.500 --> 10:42.100
其实我们把它叫做POP

10:42.100 --> 10:43.300
叫做出站操作

10:43.300 --> 10:45.500
这个以指针移动就叫做出站操作

10:45.500 --> 10:46.500
那么其实

10:46.500 --> 10:47.700
出站操作里面以前的意见

10:47.700 --> 10:49.100
就是这个东西消失

10:49.100 --> 10:51.900
实际上消失的本质是指针移动

10:51.900 --> 10:53.200
一把指针移过来了

10:53.200 --> 10:54.900
它自然目前就访问不到了

10:54.900 --> 10:57.100
它的站顶就变成这个样子的

10:57.100 --> 10:58.100
对吧

10:58.100 --> 10:59.400
其实我们这里说的出站操作

10:59.400 --> 11:01.100
就指的是指针移动

11:01.200 --> 11:02.900
指针移动来进行前进和后退

11:03.900 --> 11:04.800
好吧

11:04.800 --> 11:05.400
ok

11:05.400 --> 11:07.300
那也说不管它用的是哈西

11:07.300 --> 11:08.700
还是browser history

11:08.700 --> 11:09.600
还是memory history

11:09.600 --> 11:11.100
memory history就是一个数组

11:11.100 --> 11:12.400
用一个数组来

11:12.400 --> 11:14.400
就是像这种结构的数组

11:14.400 --> 11:15.700
就像这种结构的数组

11:15.700 --> 11:17.700
来记录它的地址

11:17.700 --> 11:19.000
经过了哪些地址

11:19.000 --> 11:21.200
因为手机端它没有地址栏

11:21.200 --> 11:22.400
我们可能会用到这个东西

11:22.400 --> 11:23.700
当然浏览器里面也可以用

11:23.700 --> 11:26.800
只是我们不太会用它

11:26.800 --> 11:27.700
就是这么个意思

11:27.700 --> 11:28.300
明白的意思吧

11:28.300 --> 11:29.400
就是这个意思

11:29.400 --> 11:31.600
它维护了一个地址站

11:31.600 --> 11:33.800
我们先把这个基础指示了解了

11:33.800 --> 11:34.700
然后接下来

11:34.700 --> 11:35.700
我们来研究这个对象

11:35.700 --> 11:36.600
它怎么来产生

11:36.600 --> 11:38.600
又怎么去使用

11:38.600 --> 11:41.500
这一块其实是一个非常非常核心的东西

11:41.500 --> 11:42.800
你把这一块做完了

11:42.800 --> 11:43.800
其实你会发现

11:43.800 --> 11:45.300
rex rotor就没啥东西了

11:45.300 --> 11:46.700
东西就已经不多了

11:46.700 --> 11:47.800
就已经不多了

11:47.800 --> 11:50.400
这一块是一个非常非常核心的东西

11:50.400 --> 11:51.500
那么这一块东西

11:51.500 --> 11:53.400
rex rotor它是怎么做的呢

11:53.400 --> 11:54.900
它是怎么来产生对象的

11:54.900 --> 11:56.000
实际上rex rotor

11:56.000 --> 11:58.100
根本就没有做这个事情

11:58.100 --> 12:00.400
它把这件事情交给了一个第三方库

12:00.400 --> 12:01.100
你看

12:01.100 --> 12:03.800
咱们前端里面学到后表会发现

12:03.800 --> 12:08.100
真的一个前端的整个大厦是怎么建立起来的

12:08.100 --> 12:09.300
就是一点一点

12:09.300 --> 12:11.200
一些基础库一点点打起来的

12:11.200 --> 12:14.200
它不是说一个库

12:14.200 --> 12:15.700
它就把全部事情做完

12:15.700 --> 12:16.900
那事情太多了

12:16.900 --> 12:18.700
它一般会利用一些第三方库

12:18.700 --> 12:20.100
来解决一些问题

12:20.100 --> 12:20.900
那么这里呢

12:20.900 --> 12:23.700
给大家介绍一个第三方库

12:23.700 --> 12:24.800
第三方库

12:24.800 --> 12:26.600
什么就是history

12:26.600 --> 12:28.300
它的名字叫做history

12:28.300 --> 12:29.500
当然自然而然

12:29.500 --> 12:30.900
你们应该知道

12:30.900 --> 12:31.900
说过的对吧

12:31.900 --> 12:34.300
怎么去查npmgs对吧

12:34.300 --> 12:36.600
我们的安装的第三方库都在这上面

12:36.600 --> 12:37.700
所以说遇到第三方库

12:37.700 --> 12:39.500
在这里边去查它的主页

12:39.500 --> 12:41.900
名字叫做history

12:41.900 --> 12:43.900
进去了看一下

12:43.900 --> 12:44.900
这个history呢

12:44.900 --> 12:45.700
来吧

12:45.700 --> 12:46.200
来吧

12:46.200 --> 12:47.100
安装吧

12:47.100 --> 12:47.500
安装

12:47.500 --> 12:48.500
先安装再说

12:48.500 --> 12:50.300
我管他那么多呢

12:50.300 --> 12:52.100
这个要停止了

12:52.100 --> 12:54.900
12addhistory

12:55.000 --> 12:57.200
安装一下这个history库

12:57.200 --> 12:58.000
等下安装吧

13:00.000 --> 13:00.600
这个库呢

13:00.600 --> 13:01.600
你看一下

13:01.600 --> 13:04.200
它里边其实给你提供了一些方法

13:04.200 --> 13:05.700
你看一下吧

13:05.700 --> 13:07.000
它说倒入这个库

13:07.000 --> 13:09.800
然后这里有个方法叫crease browser history

13:12.000 --> 13:13.500
crease browser history

13:13.500 --> 13:15.500
产生一个history对象

13:15.500 --> 13:17.000
然后还提供了其他方法

13:17.000 --> 13:18.900
crease memory history

13:18.900 --> 13:21.100
crease hash history对吧

13:21.100 --> 13:22.500
那么这个函数里面

13:22.500 --> 13:23.900
它提供一些不同的参数

13:24.200 --> 13:25.800
参数可能会有些不一样

13:25.800 --> 13:27.800
它产生的对应像是一样的

13:27.800 --> 13:29.100
始终产生的是啥

13:29.100 --> 13:31.700
始终产生的是history对象

13:31.700 --> 13:32.500
它不管这个

13:32.500 --> 13:34.000
那么到时候我们操作这个对象的时候

13:34.000 --> 13:35.300
我就不管它是哪来的

13:35.300 --> 13:36.200
它是怎么来产生的

13:36.200 --> 13:37.500
总之你给我一个history对象

13:37.500 --> 13:40.000
那么我就可以去使用它

13:40.000 --> 13:41.500
因此我们这几课

13:41.500 --> 13:42.700
一方面呢

13:42.700 --> 13:45.200
要学习这个第三方库

13:45.200 --> 13:47.300
history怎么去使用它

13:47.300 --> 13:48.400
这是最重要的

13:48.400 --> 13:49.700
要学习这个第三方库

13:49.700 --> 13:50.700
怎么去使用它

13:50.700 --> 13:52.700
看它去怎么设计的

13:52.700 --> 13:53.700
我讲了过程中的过一会

13:53.700 --> 13:55.300
我把它的设计理念告诉大家

13:55.300 --> 13:55.900
因为这样子

13:55.900 --> 13:57.100
就像刚才的样子

13:57.100 --> 13:58.600
你得到一个统一的对象

13:58.600 --> 14:01.000
通过统一的API去操作这些东西

14:01.000 --> 14:03.500
你就不用去关心它的具体实现了

14:03.500 --> 14:05.000
其实在面向对象里面的话

14:05.000 --> 14:06.900
这个东西叫做多态效果

14:08.700 --> 14:10.400
那么这里

14:10.400 --> 14:10.900
第一方面

14:10.900 --> 14:12.000
我们要学习这个第三方库

14:12.000 --> 14:12.800
怎么去使用

14:12.800 --> 14:13.600
另一方面呢

14:13.600 --> 14:15.700
我们还要知道它里面的核心代码

14:15.700 --> 14:17.200
是怎么书写的

14:17.200 --> 14:18.300
好吧

14:18.300 --> 14:19.600
一个个来

14:19.600 --> 14:21.200
这个第三方库里面

14:21.200 --> 14:24.800
它提供了这么最重要的三个方法

14:24.800 --> 14:30.000
一个方法叫做create browser history

14:30.000 --> 14:31.800
一个叫做create

14:31.800 --> 14:34.400
它们都是产生History对象

14:34.400 --> 14:36.700
只是产生了History对象

14:36.700 --> 14:38.100
它控制的东西不一样

14:38.100 --> 14:40.400
API都是完全一样的

14:40.400 --> 14:42.000
history

14:42.000 --> 14:46.400
那么这里create memory history

14:46.400 --> 14:48.600
就提供了这么三个核心方法

14:48.600 --> 14:50.400
当然还有一些其他的辅助方法

14:50.400 --> 14:53.200
最核心的就是三个

14:53.200 --> 14:56.900
那么这里我再说一遍

14:56.900 --> 14:59.500
以下三个方法

14:59.500 --> 15:05.700
以下三个函数

15:05.700 --> 15:09.700
虽然名称和参数不同

15:09.700 --> 15:12.300
函数的名字不一样

15:12.300 --> 15:18.600
但返回的都一项结构完全一致

15:18.600 --> 15:20.300
是完全一致的

15:20.300 --> 15:21.400
提供了统一的API

15:21.400 --> 15:23.200
因为返回的都是History

15:23.200 --> 15:24.200
返回的对象结构

15:24.200 --> 15:27.000
也就是History对象是完全一致的

15:27.000 --> 15:28.300
所以说我只要讲一个

15:28.300 --> 15:30.600
你后边的History就知道怎么操作了

15:30.600 --> 15:32.700
只是它具体的实现不一样而已

15:32.700 --> 15:34.400
这是个多态效果

15:34.400 --> 15:34.600
好

15:34.600 --> 15:38.400
第一个最重要的create browser history

15:38.400 --> 15:41.200
创建一个浏览器

15:41.700 --> 15:54.500
创建一个使用浏览器History API的History对象

15:54.500 --> 15:56.200
就是我们通过这个方法

15:56.200 --> 15:57.500
产生了History对象

15:57.500 --> 16:00.100
它控制的是浏览器的History API

16:00.100 --> 16:01.700
也是浏览器的真实地址

16:01.700 --> 16:03.000
它控制的是这个东西

16:03.000 --> 16:04.000
当然同样的

16:04.000 --> 16:07.000
通过哈希创建的是什么

16:07.000 --> 16:09.100
是创建的使用浏览器

16:09.100 --> 16:11.000
哈希的History对象

16:11.100 --> 16:13.100
那么这个创建的是一个什么

16:13.100 --> 16:22.700
使用内存中的地址站的History对象

16:22.700 --> 16:25.100
那么这个对象它就是跟浏览器没什么关系了

16:25.100 --> 16:27.500
在浏览器就在内存里边使用的

16:27.500 --> 16:29.800
那么这个玩意儿以后的手机端很有用

16:29.800 --> 16:33.500
因为手机端还没有浏览器

16:33.500 --> 16:34.700
不说手机端没有浏览器

16:34.700 --> 16:39.000
就在App应用里边还没有浏览器

16:39.000 --> 16:40.500
至少没有地址

16:40.800 --> 16:42.000
我们先从这个对象

16:42.000 --> 16:43.300
这个很方法

16:43.300 --> 16:46.600
接下来我们来做一些测试

16:46.600 --> 16:48.600
我们给它取个名字

16:48.600 --> 16:54.200
BrowserHistory.js

16:54.200 --> 16:55.600
来做一些测试

16:55.600 --> 16:57.200
这里面导入进来

16:57.200 --> 16:58.200
Import

17:00.700 --> 17:01.500
直接导入吧

17:01.500 --> 17:02.600
因为我们反正做测试

17:02.600 --> 17:03.600
对不对

17:03.600 --> 17:07.400
BrowserRedRotorBrowserHistory

17:07.400 --> 17:07.800
OK

17:07.800 --> 17:08.600
导入进来

17:11.000 --> 17:14.600
然后这里边我们去导入这个函数

17:14.600 --> 17:15.400
刚才我们记笔记

17:15.400 --> 17:16.100
是不是这个函数

17:16.100 --> 17:17.800
CreateBrowserHistory

17:17.800 --> 17:18.700
导入它

17:18.700 --> 17:21.500
ImportFrom

17:21.500 --> 17:22.800
哪个库呢

17:22.800 --> 17:24.200
叫做History这个库

17:24.200 --> 17:27.900
这个库里边有个方法叫做CreateBrowserHistory

17:27.900 --> 17:28.100
好

17:28.100 --> 17:29.900
这个方法怎么用了这个函数

17:29.900 --> 17:30.700
就刚才说了

17:30.700 --> 17:31.500
就是调一个函数

17:31.500 --> 17:32.700
传一些参数进去

17:32.700 --> 17:34.200
大家看一下这个说明

17:34.200 --> 17:35.100
它参数

17:35.100 --> 17:36.900
它后面加了一个问号

17:36.900 --> 17:39.000
以后你凡是看到这种说明

17:39.100 --> 17:39.900
这个提示

17:39.900 --> 17:41.300
它会参数表示一个问号

17:41.300 --> 17:43.100
Option是表示配置的意思

17:43.100 --> 17:44.200
它是个配置对象

17:44.200 --> 17:45.100
那么后面加个问号

17:45.100 --> 17:47.200
表示这个对象是不是可以不传的

17:47.200 --> 17:48.500
它有很多默认值

17:48.500 --> 17:49.300
不用传递

17:49.300 --> 17:50.700
咱们先不传递

17:50.700 --> 17:51.200
不传递

17:51.200 --> 17:52.800
我们一会再说配置

17:52.800 --> 17:54.300
那么返回一个什么东西呢

17:54.300 --> 17:57.000
它返回的就是一个History对象

17:57.000 --> 17:58.800
主要这个东西不是Windows.History

17:58.800 --> 18:00.100
它给你封装过的

18:00.100 --> 18:00.600
保存

18:00.600 --> 18:01.400
你看一下吧

18:02.600 --> 18:03.900
看一下这个对象

18:03.900 --> 18:05.000
点击右键 检查

18:06.600 --> 18:08.200
你看空在打印的这个对象

18:08.200 --> 18:08.700
展开

18:10.000 --> 18:10.400
来吧

18:10.400 --> 18:11.600
你看一下

18:11.600 --> 18:12.600
这个对象一堆笔

18:12.600 --> 18:13.100
堆笔啥

18:13.100 --> 18:14.500
堆笔在X里边

18:14.500 --> 18:16.100
上下文里边那个对象

18:16.100 --> 18:16.800
你会发现

18:18.100 --> 18:19.300
几乎就没啥区别

18:20.600 --> 18:21.700
几乎就没啥区别

18:21.700 --> 18:22.600
你看下有啥区别吗

18:22.600 --> 18:23.300
你告诉我

18:23.300 --> 18:24.300
有啥区别这个对象

18:25.400 --> 18:26.300
跟控制台里边

18:27.200 --> 18:28.500
这个对象有啥区别吗

18:28.500 --> 18:29.400
是没区别

18:29.400 --> 18:30.200
对不对

18:30.200 --> 18:30.700
好

18:30.700 --> 18:31.500
这里边呢

18:31.500 --> 18:35.200
我们首先来研究这个History对象

18:35.200 --> 18:36.700
首先要研究这个History对象里边

18:36.700 --> 18:38.300
这些属像到底是怎么回事

18:38.300 --> 18:39.600
到底是怎么回事

18:39.600 --> 18:39.800
好

18:39.800 --> 18:40.400
这里呢

18:40.400 --> 18:41.500
我们首先来研究

18:43.200 --> 18:44.000
History对象

18:46.820 --> 18:47.720
它里边有哪些属像

18:47.720 --> 18:49.120
这些属像是什么意思

18:49.120 --> 18:49.320
好

18:49.320 --> 18:50.420
第一个属像X

18:51.820 --> 18:52.920
这个属像

18:52.920 --> 18:53.920
就这个属像X

18:54.920 --> 18:56.120
X是什么东西呢

18:57.620 --> 19:00.120
这个地方它表达的意思

19:00.120 --> 19:01.320
表达的意思

19:01.320 --> 19:02.920
我这样给大家解释一下

19:02.920 --> 19:04.820
当前地址站

19:04.820 --> 19:06.520
什么叫当前地址站

19:06.520 --> 19:07.620
因为History对象

19:07.620 --> 19:09.420
它维护了一个地址站

19:09.420 --> 19:10.120
就像这样子

19:10.820 --> 19:12.220
维护了一个地址站

19:12.220 --> 19:14.020
那么这个地址站里边

19:15.820 --> 19:19.620
最后一次操作的类型

19:20.820 --> 19:22.820
你对这个地址站做了什么操作

19:22.820 --> 19:24.520
最后一次操作的类型

19:24.520 --> 19:26.120
但是这个X属像

19:26.120 --> 19:28.120
虽然说它能够表示类型

19:28.120 --> 19:30.820
但是这个History对象里边这个X的

19:30.820 --> 19:32.620
所以说实际上意义不大的

19:33.320 --> 19:34.420
多多少少有些问题的

19:34.420 --> 19:35.320
我也不知道

19:35.320 --> 19:35.720
说实话

19:35.720 --> 19:36.520
我看了它的源

19:36.520 --> 19:36.920
我也不知道

19:37.020 --> 19:40.220
为什么去用这种方式来进行设计

19:41.020 --> 19:43.120
为什么用这种方式来进行设计

19:43.120 --> 19:44.120
它有点怪

19:44.120 --> 19:45.120
当然这个怪

19:45.120 --> 19:47.520
它不是表现在RexRotor里边的

19:47.520 --> 19:48.520
Rotor里面就不怪了

19:48.520 --> 19:49.420
就正常的

19:49.420 --> 19:50.920
但是它这里边有点怪

19:50.920 --> 19:52.720
所以说我们后续要经过一些处理

19:52.720 --> 19:53.920
后续会经过一些处理

19:53.920 --> 19:55.320
我们后续再说

19:55.320 --> 19:56.220
我这里说一下

19:56.220 --> 19:57.520
它是什么一种怪法

19:58.320 --> 19:59.120
怎么一种怪法

20:00.820 --> 20:01.920
它是这样子

20:01.920 --> 20:05.520
如果是通过create

20:05.520 --> 20:06.520
什么

20:07.120 --> 20:07.920
History

20:09.320 --> 20:09.920
函数

20:11.920 --> 20:14.320
新创建的

20:15.120 --> 20:16.320
History对象

20:16.920 --> 20:17.920
如果是通过这个函数

20:17.920 --> 20:19.720
新创建的History对象的话

20:19.720 --> 20:20.520
那你看这里

20:21.520 --> 20:22.320
通过这些函数

20:22.320 --> 20:23.720
创建的History对象

20:23.720 --> 20:24.920
那么这个X

20:25.320 --> 20:27.720
X固定为POP

20:29.620 --> 20:30.820
其实像这个东西

20:30.820 --> 20:32.320
你可以去网上去查

20:32.320 --> 20:34.020
关于History对象的X

20:34.120 --> 20:35.920
你会发现整个互联网

20:35.920 --> 20:36.920
不要说中文网站

20:36.920 --> 20:37.920
就国外的网站

20:37.920 --> 20:39.720
都解释了非常非常处理

20:39.720 --> 20:40.720
这一块

20:40.720 --> 20:41.920
我真的是

20:41.920 --> 20:42.920
我也挺纳闷的

20:42.920 --> 20:45.520
当时我看到这一块挺纳闷的

20:45.520 --> 20:46.320
为什么这么怪

20:46.320 --> 20:48.420
以后可以演示就知道了

20:48.420 --> 20:49.420
后来我去查了查

20:49.420 --> 20:50.520
发现它的代码

20:51.620 --> 20:52.720
为什么会那样子写

20:52.720 --> 20:53.420
我也搞不清楚

20:53.420 --> 20:54.920
为什么会那样子写

20:54.920 --> 20:56.720
总之它固定为POP

20:56.720 --> 20:57.820
就新创建的

20:57.820 --> 20:58.920
不管你是用它创建

20:58.920 --> 20:59.720
还是用它创建

20:59.720 --> 21:00.820
它还是用它创建

21:00.820 --> 21:02.120
它固定为POP

21:03.120 --> 21:06.720
这是关于Action

21:08.220 --> 21:13.520
然后如果通过History对象

21:13.520 --> 21:15.420
如果调用了History对象的

21:15.420 --> 21:19.620
调用了History的PoP系方法

21:19.620 --> 21:21.820
它里面不是提供了PoP系方法吗

21:21.820 --> 21:26.520
那么Action变为PoP

21:26.520 --> 21:28.120
Action变为PoP

21:28.120 --> 21:29.920
PoP表示入站

21:29.920 --> 21:31.220
POP表示出站

21:31.320 --> 21:32.220
POP什么意思

21:32.220 --> 21:33.320
POP指指的是

21:33.320 --> 21:35.020
这个指针移动

21:35.020 --> 21:36.320
你可以这样子理解

21:36.320 --> 21:39.620
当你去创建一个History对象的时候

21:39.620 --> 21:41.320
是不是创建了一个新的地址站

21:41.320 --> 21:42.820
一个新的地址站里面

21:42.820 --> 21:44.720
当然如果是使用它的话

21:44.720 --> 21:46.220
那么它会把浏览器的地址站

21:46.220 --> 21:47.220
copy过来

21:47.220 --> 21:49.320
那么创建了新的地址站之后

21:49.320 --> 21:50.320
它会移动这个指针

21:50.320 --> 21:50.520
对吧

21:50.520 --> 21:52.220
让指针指向最后一个

21:52.220 --> 21:52.920
对吧

21:52.920 --> 21:53.920
它是这么操作吧

21:53.920 --> 21:54.920
对不对

21:54.920 --> 21:56.720
不一定

21:56.720 --> 21:58.420
它一定是几指向最后一个

21:58.420 --> 22:00.720
那如果说浏览器已经返回了过后来

22:00.720 --> 22:02.320
创建的话可能指向这个

22:02.320 --> 22:04.120
总之还要移动指针

22:04.120 --> 22:05.320
总之还要移动指针

22:05.320 --> 22:06.120
那么移动指针

22:06.120 --> 22:08.320
它就认为是POP

22:08.320 --> 22:08.720
好

22:08.720 --> 22:10.320
然后如果说你调用了History的

22:10.320 --> 22:11.720
PoP的方法入站

22:11.720 --> 22:13.320
给它加了一条地址

22:13.320 --> 22:14.620
给它加了一条地址

22:14.620 --> 22:17.120
于是整个History对象的Action

22:17.120 --> 22:19.120
它变为了PoP

22:19.120 --> 22:20.020
这个东西没啥用

22:20.020 --> 22:21.020
就了解一下就行了

22:21.020 --> 22:21.620
没啥用

22:21.620 --> 22:22.720
因为这个属性

22:22.720 --> 22:23.820
这个属性对我们没啥用

22:23.820 --> 22:24.720
但是以后我们讲到

22:24.720 --> 22:27.520
另外一个Action就有用了

22:27.520 --> 22:30.120
以后我还会对它进行控制

22:30.120 --> 22:31.320
变为PoP

22:31.320 --> 22:38.120
如果调用了History的Replace方法

22:38.120 --> 22:41.820
那么Action变为Replace

22:41.820 --> 22:45.120
Replace大写的

22:45.120 --> 22:48.320
Replace变为这个

22:48.320 --> 22:49.520
它就是三个曲子

22:49.520 --> 22:51.120
POP,PoP,Replace

22:51.120 --> 22:51.920
就是三个曲子

22:51.920 --> 22:53.720
没有其他曲子了

22:53.720 --> 22:54.520
那么怎么来变化

22:54.520 --> 22:56.520
我这里说清楚了

22:56.520 --> 22:59.020
那么这个东西确实有点怪

22:59.020 --> 22:59.720
有点怪

22:59.720 --> 23:00.420
那么怎么怪

23:00.420 --> 23:01.420
其他就没有变化了

23:01.420 --> 23:02.620
其他就没有变化了

23:02.620 --> 23:03.020
怎么怪

23:03.020 --> 23:06.220
我给它演示一下

23:06.220 --> 23:08.120
为了让大家看得更加清楚

23:08.120 --> 23:09.420
我们这里

23:09.420 --> 23:10.420
这样子

23:10.420 --> 23:13.520
我把这个地方保存到Window的对象里边

23:13.520 --> 23:15.120
把它保存到一个全具的对象里边

23:15.120 --> 23:17.320
方便我们在浏览器里边操作

23:17.320 --> 23:19.420
Window也起

23:19.420 --> 23:20.020
就这样子

23:20.020 --> 23:21.020
保存在这里边

23:21.020 --> 23:22.520
然后我们顺便把这个函数

23:22.520 --> 23:24.320
也保存到Window对象里边

23:24.320 --> 23:27.120
这样子方便我们在控制台里边调试

23:27.120 --> 23:28.720
看着

23:28.720 --> 23:29.720
在你控制台里边

23:29.720 --> 23:31.520
我们首先打印出H

23:31.520 --> 23:33.120
看一下内形是啥

23:33.120 --> 23:34.020
X形是啥

23:34.020 --> 23:34.920
是不是POP

23:34.920 --> 23:35.820
为什么

23:35.820 --> 23:38.820
新创建的History对象

23:38.820 --> 23:41.320
它的Action就是POP

23:41.320 --> 23:43.320
新创建的History对象

23:43.320 --> 23:45.220
Action固定为POP

23:45.220 --> 23:46.820
然后我们再来看

23:46.820 --> 23:48.420
如果说我们调用H

23:48.420 --> 23:49.920
里边有个PoP

23:49.920 --> 23:51.320
比方说123

23:51.320 --> 23:52.320
是不是加了一条

23:52.320 --> 23:54.120
你看地子栏是不是变了

23:54.120 --> 23:55.720
因为我们用的是什么

23:55.720 --> 23:58.020
操作的是浏览器的地子栏

23:58.020 --> 23:59.420
因为我们用的是这个方法

23:59.420 --> 24:00.520
操作的是浏览器的地子栏

24:00.520 --> 24:02.020
是不是地子栏变了

24:02.020 --> 24:02.720
变了之后

24:02.720 --> 24:05.320
咱们再看H

24:05.320 --> 24:07.220
它的Action是不是变成了PoP了

24:07.220 --> 24:07.820
为什么

24:07.820 --> 24:09.820
因为一开始它的地子是这样子

24:09.820 --> 24:10.520
看着

24:10.520 --> 24:13.820
一开始地子是斜杠

24:13.820 --> 24:15.120
只能在这

24:15.120 --> 24:16.820
一开始的History对象

24:16.820 --> 24:19.120
它History对象的Action

24:19.120 --> 24:20.020
等于啥

24:20.020 --> 24:21.520
Action等于POP

24:21.520 --> 24:22.420
因为新创建的

24:22.420 --> 24:22.920
对不对

24:22.920 --> 24:25.220
新创建的

24:25.220 --> 24:26.920
看着

24:27.420 --> 24:29.120
然后我们现在PoP了一个

24:29.120 --> 24:29.220
对吧

24:29.220 --> 24:30.320
调用它的PoP方法

24:30.320 --> 24:32.720
是不是加了一个地子

24:32.720 --> 24:33.720
123

24:33.720 --> 24:35.020
那么子真已经弄到这了

24:35.020 --> 24:36.720
地子栏子真已经弄到这了

24:36.720 --> 24:37.720
那么这个时候

24:37.720 --> 24:38.520
它的Action

24:38.520 --> 24:41.820
它会把这个当前对象的Action变成PoP

24:41.820 --> 24:43.620
变成PoP

24:43.620 --> 24:45.520
你看一下

24:45.520 --> 24:48.120
记录的是最后一次操作的类型

24:48.120 --> 24:49.520
PoP

24:49.520 --> 24:52.620
那如果说

24:52.620 --> 24:56.720
我现在又去新建一个

24:56.820 --> 24:58.020
新建一个

24:58.020 --> 25:00.520
就是History对象

25:00.520 --> 25:01.920
那么这个新创建的History对象

25:01.920 --> 25:02.720
是怎么回事呢

25:02.720 --> 25:04.720
看一下吧

25:04.720 --> 25:06.820
它又变成PoP了

25:06.820 --> 25:08.220
新创建的对象是POP

25:08.220 --> 25:09.920
那个Action是PoP

25:09.920 --> 25:12.120
这就是它比较乖的地方

25:12.120 --> 25:14.320
也就是说我们如果说

25:14.320 --> 25:15.920
如果说现在由新创建一个

25:15.920 --> 25:17.720
新创建一个

25:17.720 --> 25:19.120
它变成这个样子

25:19.120 --> 25:20.320
新创建一个

25:20.320 --> 25:20.820
那么

25:20.820 --> 25:21.820
虽然说用的是

25:21.820 --> 25:24.120
都是同浏览器的HistoryAPI里面

25:24.120 --> 25:25.220
CopyGuy的地子

25:25.220 --> 25:26.520
都是CopyGuy的地子

25:26.520 --> 25:27.420
但是呢

25:27.420 --> 25:29.220
它现在的Action它是POP

25:29.220 --> 25:30.920
因为它是新创建的

25:30.920 --> 25:31.920
原来这个意思

25:31.920 --> 25:33.320
它是新创建的

25:33.320 --> 25:34.920
它就是这样子玩了

25:34.920 --> 25:35.620
那怎么办

25:35.620 --> 25:37.020
它就这样子玩了

25:37.020 --> 25:38.820
那么如果只要通过它新创建的History对象

25:38.820 --> 25:39.820
Action固定为POP

25:39.820 --> 25:41.020
了解一下就行了

25:41.020 --> 25:43.220
这一块我们也用得不多

25:43.220 --> 25:44.820
用得不多

25:44.820 --> 25:45.520
好

25:45.520 --> 25:46.820
那么现在

25:46.820 --> 25:48.620
然后我们继续

25:48.620 --> 25:50.020
继续

25:50.020 --> 25:52.220
如果说调用了History的Replace方法

25:52.220 --> 25:53.720
那么Action变成Replace

25:53.720 --> 25:55.520
看一下吧

25:55.520 --> 25:59.220
如果说History调用了Replace方法

25:59.220 --> 26:01.420
比方说ABC

26:01.420 --> 26:02.220
Replace

26:02.220 --> 26:03.320
T换掉当天地子

26:03.320 --> 26:03.920
对吧

26:03.920 --> 26:05.520
那么聚成操作是什么了

26:05.520 --> 26:06.820
是不是这里变成了什么

26:06.820 --> 26:08.720
变成了ABC

26:08.720 --> 26:09.020
对不对

26:09.020 --> 26:09.820
T换了

26:09.820 --> 26:10.520
那么这个时候

26:10.520 --> 26:12.720
它的Action变成了Replace

26:12.720 --> 26:13.420
注意啊

26:13.420 --> 26:15.020
它影响的只是这个对象

26:15.020 --> 26:16.020
你操作了一个对象

26:16.020 --> 26:17.420
跟这个对象没关系

26:17.420 --> 26:19.220
跟这个对象没关系

26:19.220 --> 26:19.420
好

26:19.420 --> 26:22.220
看一下History

26:22.220 --> 26:23.720
变成Replace

26:23.720 --> 26:24.920
如果你说重新创建一个

26:24.920 --> 26:26.320
跟它有它关系

26:26.320 --> 26:27.220
那还是POP

26:27.220 --> 26:27.720
看没有

26:27.720 --> 26:29.120
只要新建的都是POP

26:29.120 --> 26:30.720
所以这个Action

26:30.720 --> 26:32.220
在这个对象本身里边的Action

26:32.220 --> 26:32.920
是不好用的

26:32.920 --> 26:34.720
我们到时候需要

26:34.720 --> 26:36.620
给它控制一下

26:36.620 --> 26:39.420
它没有做任何的其他控制

26:39.420 --> 26:39.620
好

26:39.620 --> 26:40.520
既然我们再来看

26:40.520 --> 26:42.720
再来看

26:42.720 --> 26:44.820
然后是这样子

26:44.820 --> 26:47.520
然后H

26:47.520 --> 26:49.220
其实我也大概能猜到

26:49.220 --> 26:50.220
它为什么在这样做

26:50.220 --> 26:52.920
因为根据它的实现原理

26:53.020 --> 26:56.020
它其实为了降低偶和

26:56.020 --> 26:57.820
也没有更好的办法

26:57.820 --> 26:58.920
也找不到更好的办法

26:58.920 --> 27:01.520
我们后面讲原理的时候说一下

27:01.520 --> 27:02.320
H

27:02.320 --> 27:02.820
第二是什么

27:02.820 --> 27:04.020
比方说它里边提供了什么

27:04.020 --> 27:05.320
Go

27:05.320 --> 27:06.320
刚才我们看到了什么

27:06.320 --> 27:08.120
看到了这么一些方法

27:08.120 --> 27:09.520
History这样的里边

27:09.520 --> 27:10.020
这些方法

27:10.020 --> 27:10.820
这个什么方法

27:10.820 --> 27:12.220
就是PUSH

27:12.220 --> 27:13.120
这个方法都讲过了

27:13.120 --> 27:14.520
所以说简单说一下

27:14.520 --> 27:15.420
这个是

27:15.420 --> 27:16.620
向

27:16.620 --> 27:18.820
当前地址战中

27:18.820 --> 27:19.920
添加

27:19.920 --> 27:21.120
当前地址战

27:21.120 --> 27:23.820
指针位置

27:23.820 --> 27:27.020
入战一个地址

27:27.020 --> 27:28.620
加入一个地址

27:28.620 --> 27:29.620
好 什么

27:29.620 --> 27:30.720
还有这个叫啥吗

27:30.720 --> 27:31.620
叫啥

27:31.620 --> 27:32.820
还有叫做Go

27:32.820 --> 27:34.120
Go

27:34.120 --> 27:35.420
指的是向

27:35.420 --> 27:37.220
当前地址战

27:37.220 --> 27:38.620
指针

27:38.620 --> 27:40.520
控制

27:40.520 --> 27:42.320
控制当前地址战

27:42.320 --> 27:44.320
指针偏移

27:44.320 --> 27:46.520
如果是正数

27:46.520 --> 27:47.620
如果是0

27:47.620 --> 27:50.920
刷新页面

27:51.020 --> 27:55.020
刷新页面

27:55.020 --> 27:56.920
当然我们也不会写0

27:56.920 --> 27:57.420
看一下吧

27:57.420 --> 27:58.920
我们写个0

27:58.920 --> 27:59.520
注意看这里

27:59.520 --> 28:00.820
看页面有没有刷新

28:00.820 --> 28:01.120
Go

28:01.120 --> 28:03.620
如果说写个0

28:03.620 --> 28:05.120
刷新页面

28:05.120 --> 28:06.920
刷新的页面

28:06.920 --> 28:09.220
好

28:09.220 --> 28:09.720
当然了

28:09.720 --> 28:10.720
这个前地条件

28:10.720 --> 28:12.720
前地条件指的是

28:12.720 --> 28:15.420
Creator Browser History

28:15.420 --> 28:15.820
那这样吧

28:15.820 --> 28:17.420
我们这里还是说通用一点

28:17.420 --> 28:18.620
如果是0的话

28:18.620 --> 28:19.920
地址不变

28:19.920 --> 28:21.820
地址不变

28:21.820 --> 28:22.520
好 地址不变

28:22.520 --> 28:24.020
那么在浏览器里边

28:24.020 --> 28:24.820
浏览器里边

28:24.820 --> 28:26.120
那个Creator Browser

28:26.120 --> 28:28.320
它会导致刷新页面

28:28.320 --> 28:30.520
它有一个特别的地方

28:30.520 --> 28:32.720
刷新页面

28:32.720 --> 28:34.920
但是整体的逻辑是地址不变

28:34.920 --> 28:37.620
好 如果是附属

28:37.620 --> 28:39.920
则后退

28:39.920 --> 28:42.320
指定的部属

28:42.320 --> 28:44.520
相当于浏览器点了后退

28:44.520 --> 28:46.320
如果是正数

28:46.320 --> 28:47.920
则前进

28:48.020 --> 28:51.020
指定的部属

28:51.020 --> 28:52.320
那么怎么来前级

28:52.320 --> 28:53.320
从什么位置前级

28:53.320 --> 28:54.820
就是当前指正位置

28:54.820 --> 28:55.920
好 比方说

28:55.920 --> 28:57.620
咱们来几个

28:57.620 --> 28:58.720
H 点

28:58.720 --> 29:00.120
Pussy

29:00.120 --> 29:01.420
123

29:01.420 --> 29:02.120
H 点

29:02.120 --> 29:03.120
Pussy

29:03.120 --> 29:03.620
然后

29:03.620 --> 29:04.920
AA

29:04.920 --> 29:05.420
看一下

29:05.420 --> 29:06.220
这个H

29:06.220 --> 29:07.520
那么现在呢

29:07.520 --> 29:08.520
认识

29:08.520 --> 29:10.520
长度为4

29:10.520 --> 29:11.320
长度认识

29:11.320 --> 29:12.820
我们也说一下

29:12.820 --> 29:13.920
认识

29:13.920 --> 29:14.820
表

29:14.820 --> 29:15.620
当前

29:15.620 --> 29:17.620
站中

29:17.620 --> 29:22.980
当前站中的地址数量

29:22.980 --> 29:23.880
长度为4

29:23.880 --> 29:25.680
没问题

29:25.680 --> 29:26.480
那么现在呢

29:26.480 --> 29:27.980
比方说我们H 点

29:27.980 --> 29:28.780
Go

29:28.780 --> 29:29.780
附移

29:29.780 --> 29:30.980
表示不得回退一步

29:30.980 --> 29:31.880
对吧

29:31.880 --> 29:33.280
目前有四个地址

29:33.280 --> 29:33.780
四个地址

29:33.780 --> 29:35.380
我把这个去掉了

29:35.380 --> 29:37.580
四个地址

29:37.580 --> 29:38.180
四个

29:38.180 --> 29:39.780
我看一下

29:39.780 --> 29:40.480
123

29:40.480 --> 29:41.080
ABC

29:41.080 --> 29:41.580
OK

29:41.580 --> 29:42.480
这四个地址

29:42.480 --> 29:42.780
OK

29:42.780 --> 29:44.480
那咱们的ABC

29:44.480 --> 29:45.780
这里是

29:45.780 --> 29:46.980
123

29:46.980 --> 29:48.380
这里是

29:48.380 --> 29:49.280
AA

29:49.680 --> 29:50.480
目前是这个样子

29:50.480 --> 29:50.580
对吧

29:50.580 --> 29:51.380
只能在这

29:51.380 --> 29:52.580
只能在这

29:52.580 --> 29:53.380
那么现在呢

29:53.380 --> 29:54.480
我们Go附移

29:54.480 --> 29:56.080
或者是附二

29:56.080 --> 29:56.880
回车

29:56.880 --> 29:58.080
那么现在变成了ABC

29:58.080 --> 29:58.980
看没地址

29:58.980 --> 29:59.780
变成ABC了

29:59.780 --> 30:00.480
怎么回事呢

30:00.480 --> 30:01.780
它向前

30:01.780 --> 30:02.880
其实就是后退

30:02.880 --> 30:03.880
后退两步

30:03.880 --> 30:04.980
一步两步

30:04.980 --> 30:05.780
是不是知道这了

30:05.780 --> 30:06.680
ABC

30:06.680 --> 30:07.880
对吧

30:07.880 --> 30:09.280
后退过后

30:09.280 --> 30:10.280
咱们来看一下

30:10.280 --> 30:12.580
它的X型会变化吗

30:12.580 --> 30:13.780
按理说应该会变化

30:13.780 --> 30:14.380
变成POP

30:14.380 --> 30:14.780
对吧

30:14.780 --> 30:16.180
但是实际上没变化

30:16.180 --> 30:18.080
还是Pussy

30:18.080 --> 30:19.180
没有变化的

30:19.480 --> 30:20.180
为什么没变化

30:20.180 --> 30:21.680
就是我们之前说的规律

30:21.680 --> 30:22.880
你看这里有没有说到什么

30:22.880 --> 30:23.780
够方法

30:23.780 --> 30:25.080
有没有没有

30:25.080 --> 30:26.080
没有

30:26.080 --> 30:27.780
只有这种情况会改变X型

30:27.780 --> 30:29.380
其他的没有变化

30:29.380 --> 30:30.880
对吧

30:30.880 --> 30:33.180
其他的没有变化了

30:33.180 --> 30:34.280
你看这意思吧

30:35.880 --> 30:36.780
这是

30:36.780 --> 30:38.080
这个

30:39.080 --> 30:39.580
够

30:39.580 --> 30:40.880
够方法

30:40.880 --> 30:41.080
好

30:41.080 --> 30:42.380
咱们再看一下

30:42.380 --> 30:42.980
这里边除了

30:42.980 --> 30:44.180
我们刚才讲的那个了

30:44.180 --> 30:45.580
还有个型

30:45.580 --> 30:46.380
Go

30:46.380 --> 30:47.880
还有GoBack

30:47.980 --> 30:48.580
当然Go的话

30:48.580 --> 30:49.880
还有可以写证述

30:49.880 --> 30:51.680
Go可以写证述的

30:51.680 --> 30:52.980
H点Go

30:52.980 --> 30:53.980
2

30:53.980 --> 30:54.980
特别变成AA了

30:54.980 --> 30:55.780
看到没

30:55.780 --> 30:56.780
那么也什么意思呢

30:56.780 --> 30:58.280
就在当前指认位置

30:58.280 --> 30:59.980
向前

30:59.980 --> 31:01.980
一动两步

31:01.980 --> 31:03.180
这个很简单

31:03.180 --> 31:03.380
好

31:03.380 --> 31:05.480
咱们继续看这个H

31:05.480 --> 31:07.480
这个H里边

31:07.480 --> 31:07.980
现在讲了

31:07.980 --> 31:08.880
ActionGo

31:08.880 --> 31:11.280
还有GoBack和GoForward

31:11.280 --> 31:13.980
这个大家应该都懂

31:13.980 --> 31:16.480
GoBack

31:16.480 --> 31:19.880
相当于GoFor1

31:19.880 --> 31:20.880
没什么好说的

31:20.880 --> 31:24.080
GoForward

31:24.080 --> 31:26.880
写对不对

31:26.880 --> 31:31.480
相当于Go1

31:31.480 --> 31:33.680
然后其他的还有啥呢

31:33.680 --> 31:34.580
Push我们说过了

31:34.580 --> 31:35.780
Replace也说过了

31:35.780 --> 31:37.780
Replace

31:37.780 --> 31:40.180
表示的是替换

31:40.180 --> 31:41.880
指针

31:41.880 --> 31:43.280
指向的地址

31:43.280 --> 31:45.280
把个指针指向的地址替换掉

31:45.380 --> 31:46.480
不管指针指在哪

31:46.480 --> 31:47.480
比方说指针在这

31:47.480 --> 31:48.880
那么就把这个地址替换掉

31:48.880 --> 31:50.780
替换掉你指针的地址

31:50.780 --> 31:51.880
那么它会变成Replace

31:51.880 --> 31:53.180
看一下吧

31:53.180 --> 31:53.780
比方说

31:53.780 --> 31:56.280
我们先HGoBack

31:56.280 --> 31:56.980
后退一步

31:56.980 --> 31:58.280
后退是不是退到123了

31:58.280 --> 31:58.480
对吧

31:58.480 --> 31:59.480
退到这了

31:59.480 --> 31:59.980
OK

31:59.980 --> 32:00.480
那么现在呢

32:00.480 --> 32:01.380
我们要看一下

32:01.380 --> 32:02.080
然后接下来

32:02.080 --> 32:05.580
我们把H用Replace

32:05.580 --> 32:08.380
变成456

32:08.380 --> 32:09.180
你看H

32:09.180 --> 32:10.480
它的Action变了

32:10.480 --> 32:11.580
变成Replace了

32:11.580 --> 32:13.080
这个Action对我们来说没啥用

32:13.080 --> 32:13.980
再说也是没啥用

32:14.080 --> 32:16.780
我们后边会把它变得有用

32:16.780 --> 32:17.780
然后咱们来看一下

32:17.780 --> 32:19.380
这现在就是相当于把这里提成了

32:19.380 --> 32:21.280
替换成了456

32:21.280 --> 32:24.180
现在变成了Replace

32:24.180 --> 32:25.380
好

32:25.380 --> 32:25.980
然后你看

32:25.980 --> 32:27.080
还是继续能前进

32:27.080 --> 32:27.980
对吧

32:27.980 --> 32:29.680
没问题

32:29.680 --> 32:30.180
四个

32:30.180 --> 32:30.480
看没有

32:30.480 --> 32:31.880
第四个

32:31.880 --> 32:33.480
这是这一块

32:33.480 --> 32:33.680
好

32:33.680 --> 32:34.280
咱们再来看一下

32:34.280 --> 32:35.480
它里边还有什么属性呢

32:35.480 --> 32:36.680
还有几个属性

32:36.680 --> 32:39.080
我们按照它的说

32:39.080 --> 32:40.880
首先注意重要的属性

32:40.880 --> 32:41.880
在这

32:41.880 --> 32:43.480
Lesson

32:43.480 --> 32:45.980
这是咱们这一块接触最重要的属性

32:45.980 --> 32:46.980
前面我们没有讲

32:46.980 --> 32:49.180
因为前边我们真的用不到

32:49.180 --> 32:51.980
至少我们之前讲那些东西是用不到的

32:51.980 --> 32:52.780
那么这一刻

32:52.780 --> 32:53.980
现在我们讲原码部分了

32:53.980 --> 32:55.980
那Lesson肯定是跑不了的

32:55.980 --> 32:57.880
Lesson这个这个函数

32:57.880 --> 32:59.880
React Router

32:59.880 --> 33:01.080
实现

33:01.080 --> 33:02.280
实现了吗

33:02.280 --> 33:04.680
那个重新宣展页面的关键

33:04.680 --> 33:06.980
关键就在于Lesson这个函数

33:06.980 --> 33:07.180
好

33:07.180 --> 33:08.480
这个函数里边做什么

33:08.480 --> 33:10.180
看一下这个函数干嘛用的呢

33:10.180 --> 33:12.080
Lesson

33:12.180 --> 33:13.380
是一个

33:13.380 --> 33:15.380
它是一个什么函数

33:15.380 --> 33:19.280
用于监听地址

33:19.280 --> 33:23.380
占指针的变化

33:23.380 --> 33:25.880
用于监听地址占中指针的变化

33:25.880 --> 33:27.180
由指针变了

33:27.180 --> 33:28.580
不管它怎么变的

33:28.580 --> 33:29.280
它都会

33:29.280 --> 33:33.380
这个函数里边都会从指导通知

33:33.380 --> 33:34.980
那么该函数呢

33:34.980 --> 33:41.980
该函数接收一个函数作为参数

33:41.980 --> 33:47.180
该参数表示地址变化后

33:47.180 --> 33:48.980
要做的事情

33:48.980 --> 33:50.180
要做的事情

33:50.180 --> 33:50.980
也就是说

33:50.980 --> 33:53.980
这个Lesson它的写法格式是应该是这样子

33:53.980 --> 33:55.080
看着

33:55.080 --> 33:57.980
Windows.hLesson

33:57.980 --> 33:59.980
对吧

33:59.980 --> 34:02.280
Lesson

34:02.280 --> 34:02.980
那么这里边呢

34:02.980 --> 34:03.680
要写什么呢

34:03.680 --> 34:04.980
写一个函数

34:04.980 --> 34:06.380
要写个函数

34:06.380 --> 34:06.680
对吧

34:06.680 --> 34:07.080
要写个函数

34:07.080 --> 34:08.580
当然也可以用箭头函数

34:08.580 --> 34:09.980
也可以用箭头函数

34:09.980 --> 34:10.680
Lesson

34:10.680 --> 34:12.180
要写个函数

34:12.180 --> 34:13.380
这个函数呢

34:13.380 --> 34:15.180
它能够接收到地址发生变化

34:15.180 --> 34:19.180
比方说我们打印地址变化了

34:19.180 --> 34:19.780
保存

34:19.780 --> 34:21.480
你看一下

34:21.480 --> 34:22.180
一开始没运行

34:22.180 --> 34:22.380
对吧

34:22.380 --> 34:23.580
一开始没发生变化

34:23.580 --> 34:24.180
对不对

34:24.180 --> 34:24.480
好

34:24.480 --> 34:25.280
h

34:25.280 --> 34:26.780
push

34:26.780 --> 34:31.180
加入一个789

34:31.180 --> 34:32.780
你看地址是不是收到变化了

34:32.780 --> 34:34.280
包括用什么h.go

34:34.280 --> 34:34.880
我们后面会说

34:34.880 --> 34:36.180
它怎么实现的

34:36.180 --> 34:37.480
服于是不是地址变化了

34:37.480 --> 34:37.980
对不对

34:37.980 --> 34:39.480
地址变化了

34:39.480 --> 34:40.980
然后h.go

34:40.980 --> 34:42.180
1

34:42.180 --> 34:42.780
地址变化了

34:42.780 --> 34:43.380
对吧

34:43.380 --> 34:45.580
它能够坚定地址的变化

34:45.580 --> 34:46.880
并且

34:46.880 --> 34:47.780
该函数

34:47.780 --> 34:52.980
它还有两个参数

34:52.980 --> 34:53.980
函数

34:53.980 --> 34:55.780
函数

34:55.780 --> 34:57.380
接收

34:57.380 --> 34:58.980
不是说这个函数接收

34:58.980 --> 35:00.380
是这个参数函数

35:00.380 --> 35:01.580
参数函数

35:01.580 --> 35:04.780
接收两个参数

35:04.780 --> 35:07.180
或者我们这样子

35:07.180 --> 35:08.180
这样子

35:08.180 --> 35:09.180
接收两个参数

35:09.180 --> 35:11.680
第一个参数是

35:11.680 --> 35:13.080
location对象

35:13.080 --> 35:15.480
location

35:15.480 --> 35:17.880
这个location对象里边记录了

35:17.880 --> 35:18.980
记录了

35:18.980 --> 35:19.980
当前

35:19.980 --> 35:21.580
记录了新的地址

35:21.580 --> 35:23.080
记录了新的地址

35:23.080 --> 35:24.980
然后还有一个参数叫做什么

35:24.980 --> 35:26.080
叫做

35:28.080 --> 35:29.480
叫做x

35:29.480 --> 35:31.180
这个x才真的重要

35:31.180 --> 35:32.780
这才是真的重要的x

35:32.780 --> 35:34.180
这个x表示

35:34.180 --> 35:38.780
进入新地址的方式

35:38.780 --> 35:39.980
你不是要挑战地址吗

35:39.980 --> 35:41.080
那个地址的

35:41.080 --> 35:42.780
你怎么来进入这个地址的

35:42.780 --> 35:44.380
那么这个方式有哪些呢

35:44.380 --> 35:45.280
又来了

35:45.280 --> 35:47.180
pop

35:47.180 --> 35:49.380
指针移动

35:49.380 --> 35:50.680
指针移动

35:50.680 --> 35:53.480
那么这种情况发生在什么时候呢

35:53.480 --> 35:54.180
发生在这里

35:54.180 --> 35:55.580
发生这些时候

35:55.580 --> 35:56.780
调用

35:56.780 --> 35:58.780
调用go

35:58.780 --> 36:00.980
go back

36:00.980 --> 36:02.980
然后呢

36:02.980 --> 36:05.180
go forward

36:05.180 --> 36:07.280
调用这些方法

36:07.280 --> 36:08.480
然后还有什么呢

36:08.480 --> 36:09.980
还有就是点击

36:09.980 --> 36:11.980
就是用户点击

36:11.980 --> 36:13.480
浏览器

36:13.480 --> 36:14.580
后退按钮

36:14.580 --> 36:16.880
当然这个前提条件是那个

36:16.880 --> 36:18.480
browser history

36:18.480 --> 36:20.180
后退按钮

36:20.180 --> 36:22.980
这些都会导致

36:22.980 --> 36:23.680
他的x

36:23.680 --> 36:24.880
就是这个监听函数

36:24.880 --> 36:26.580
他的x 为pop

36:26.580 --> 36:26.880
然后呢

36:26.880 --> 36:27.380
还有什么

36:27.380 --> 36:29.180
poop

36:29.180 --> 36:31.280
那么这就是调用

36:31.280 --> 36:33.480
调用那个

36:33.480 --> 36:35.280
就是

36:35.280 --> 36:36.780
history

36:36.780 --> 36:37.580
点poop

36:37.580 --> 36:38.580
poop方法

36:38.580 --> 36:41.080
还有什么replace

36:41.080 --> 36:44.480
这是调用history

36:44.480 --> 36:46.580
replace方法

36:46.580 --> 36:47.480
就这么一些

36:47.480 --> 36:48.880
就这么一些

36:48.880 --> 36:49.080
好

36:49.080 --> 36:50.280
那咱们来看一下吧

36:50.280 --> 36:51.180
这里

36:51.180 --> 36:52.580
h

36:52.580 --> 36:53.280
比方说啊

36:53.280 --> 36:54.280
咱们这里呢

36:54.280 --> 36:56.180
这个参数我们该写出来

36:56.180 --> 36:58.580
一个是location

36:58.580 --> 36:59.680
location

36:59.680 --> 37:01.480
一个是x

37:01.480 --> 37:01.580
好

37:01.580 --> 37:02.580
咱们来看一下吧

37:02.580 --> 37:03.080
我们这里

37:03.080 --> 37:03.580
这里location

37:03.580 --> 37:04.080
我们不管

37:04.080 --> 37:06.580
我们先打一下x

37:06.580 --> 37:07.180
好 保存

37:07.180 --> 37:08.980
你看一下

37:08.980 --> 37:09.180
好

37:09.180 --> 37:09.980
现在让我们调用

37:09.980 --> 37:11.980
h的go-1

37:11.980 --> 37:12.580
你看

37:12.580 --> 37:13.780
是不是pop

37:13.780 --> 37:13.980
好

37:13.980 --> 37:15.780
h的

37:15.780 --> 37:16.980
go-1呢

37:16.980 --> 37:17.980
它也是pop

37:17.980 --> 37:20.380
只要是指针来回移动

37:20.380 --> 37:21.380
指针在这里来回移动

37:21.380 --> 37:22.580
它都是属于pop

37:22.580 --> 37:23.980
都是属于pop

37:23.980 --> 37:25.580
好 再来啊

37:25.580 --> 37:26.380
比方说我们这里

37:26.380 --> 37:27.380
调用了h

37:27.380 --> 37:29.480
go-back

37:29.480 --> 37:32.260
go-back

37:32.260 --> 37:32.660
pop

37:32.660 --> 37:33.360
你看

37:33.360 --> 37:34.160
结合了参

37:34.160 --> 37:35.360
action是pop

37:35.360 --> 37:37.660
go-forward

37:37.760 --> 37:38.260
x形呢

37:38.260 --> 37:39.060
是pop

37:39.060 --> 37:39.660
看没

37:39.660 --> 37:39.960
好

37:39.960 --> 37:40.960
然后我们再来

37:40.960 --> 37:43.460
我们这里清除一下

37:43.460 --> 37:45.560
如果说push

37:45.560 --> 37:46.460
随便写个吧

37:46.460 --> 37:47.960
push

37:47.960 --> 37:48.160
好

37:48.160 --> 37:48.560
那么这里

37:48.560 --> 37:50.260
得到监期的结构就是push

37:50.260 --> 37:51.560
然后再来

37:51.560 --> 37:52.860
x形呢

37:52.860 --> 37:57.560
我们使用replace

37:57.560 --> 37:58.960
得到结构就是replace

37:58.960 --> 38:00.260
看没

38:00.260 --> 38:01.360
所以说这个x形呢

38:01.360 --> 38:03.160
才是我们真正需要的东西

38:03.160 --> 38:04.960
真正需要的东西

38:04.960 --> 38:06.360
那我们之前发现

38:06.460 --> 38:07.660
这个push对象里边

38:07.660 --> 38:09.560
它的x形乖乖的

38:09.560 --> 38:10.760
不希望它的x形

38:10.760 --> 38:12.760
我希望它的x形给这里的保持一致

38:12.760 --> 38:13.660
怎么办呢

38:13.660 --> 38:14.660
那还不简单吗

38:14.660 --> 38:15.660
我这里干嘛

38:15.660 --> 38:16.760
window.h

38:16.760 --> 38:18.960
x形是不是重新复制就完成了

38:18.960 --> 38:19.560
x形

38:19.560 --> 38:19.760
对吧

38:19.760 --> 38:21.560
是不是重新复制

38:21.560 --> 38:23.060
保存你看一下

38:23.060 --> 38:23.160
好

38:23.160 --> 38:24.960
那么现在大家再看

38:24.960 --> 38:26.260
h目前是pop

38:26.260 --> 38:26.560
对吧

38:26.560 --> 38:27.460
一开始新创建的

38:27.460 --> 38:27.860
是pop

38:27.860 --> 38:28.460
没问题

38:28.460 --> 38:28.660
好

38:28.660 --> 38:30.860
push加入一个地址

38:30.860 --> 38:32.360
哎

38:32.360 --> 38:32.560
好

38:32.560 --> 38:33.660
再看h

38:33.660 --> 38:35.360
所以变成push了

38:35.360 --> 38:37.160
然后我们h够

38:37.160 --> 38:38.860
复一回去

38:38.860 --> 38:40.360
再看h

38:40.360 --> 38:41.260
是不是pop了

38:41.260 --> 38:41.760
对不对

38:41.760 --> 38:42.760
那么这样子

38:42.760 --> 38:44.860
就跟我们的rex rotor

38:44.860 --> 38:45.560
就一致了

38:45.560 --> 38:46.160
rex rotor

38:46.160 --> 38:49.360
它的结果就是这样子

38:49.360 --> 38:50.360
那它怎么做出来的

38:50.360 --> 38:51.660
它就是利用这种方式

38:51.660 --> 38:54.160
用lesson来搞定的

38:54.160 --> 38:54.360
好

38:54.360 --> 38:57.160
这是这个x形

38:57.160 --> 38:57.360
好

38:57.360 --> 39:00.360
那么这个location是啥呢

39:00.360 --> 39:01.360
说说

39:01.360 --> 39:02.560
看一下这个location

39:02.560 --> 39:03.560
location是啥

39:03.560 --> 39:04.960
打印出来

39:04.960 --> 39:07.260
当我们地址发生变化的时候

39:07.260 --> 39:08.360
这个location是啥呢

39:08.360 --> 39:09.260
你看一下

39:09.260 --> 39:10.160
是不是就是

39:10.160 --> 39:12.460
我们之前看到那个location对象

39:12.460 --> 39:13.160
对不对

39:13.160 --> 39:15.160
看到的就是那个location对象

39:15.160 --> 39:17.660
我们后边再具体的去讲location对象

39:17.660 --> 39:18.660
就是这个地址

39:18.660 --> 39:20.160
具体的地址

39:20.160 --> 39:21.960
location对象

39:21.960 --> 39:23.760
这个没什么好说的

39:23.760 --> 39:24.360
也就是说

39:24.360 --> 39:24.760
这里呢

39:24.760 --> 39:25.560
我们后面会

39:25.560 --> 39:26.860
详细的讲那个location对象

39:26.860 --> 39:27.660
这里

39:27.660 --> 39:28.760
这个History里面的

39:28.760 --> 39:30.460
还有一个location对象

39:30.460 --> 39:32.960
它是用于

39:32.960 --> 39:37.560
表达当前地址中的信息

39:37.560 --> 39:39.060
当前地址里面的信息

39:39.060 --> 39:41.460
它表了这个东西

39:41.460 --> 39:41.760
好

39:41.760 --> 39:43.060
那么这个写完了

39:43.060 --> 39:43.560
接下来

39:43.560 --> 39:46.260
我们来看一下那个

39:46.260 --> 39:49.760
这个lesson这个函数

39:49.760 --> 39:51.360
它还有一个返回结果

39:51.360 --> 39:52.160
这个lesson这个函数

39:52.160 --> 39:53.660
还有一个返回结果

39:53.660 --> 39:54.760
返回什么呢

39:54.760 --> 39:55.660
该函数

39:55.660 --> 39:59.060
lesson

39:59.060 --> 40:02.760
该函数有一个返回值

40:03.360 --> 40:07.360
返回的是一个函数

40:07.360 --> 40:10.160
用于取消监听

40:10.160 --> 40:12.360
这是一种非常非常常见的模式

40:12.360 --> 40:14.360
就是我监听一个东西

40:14.360 --> 40:16.160
它就是相当于注册一个世界

40:16.160 --> 40:17.560
那如果有一天我不想监听的

40:17.560 --> 40:18.260
那我怎么办呢

40:18.260 --> 40:19.560
我要把取消监听

40:19.560 --> 40:21.560
那么它返回了这么一个函数

40:21.560 --> 40:24.560
叫做unlesson

40:24.560 --> 40:26.060
你该随便取个名字

40:26.060 --> 40:26.660
那么这里呢

40:26.660 --> 40:27.960
我为了测试

40:27.960 --> 40:30.160
还是把它保存到温豆点

40:30.160 --> 40:31.060
这个对象里面

40:31.060 --> 40:31.760
unlesson

40:31.760 --> 40:32.960
看一下吧

40:32.960 --> 40:34.060
比方说我们现在监听

40:34.060 --> 40:35.560
你看一下每次是不是有输出

40:35.560 --> 40:35.760
对吧

40:35.760 --> 40:36.960
每次有输出

40:36.960 --> 40:38.660
那么有一天我不想监听了

40:38.660 --> 40:40.060
我用调用unlesson

40:40.060 --> 40:41.160
直接调用就完事了

40:41.160 --> 40:42.160
一调用

40:42.160 --> 40:43.460
现在我们再改变地址

40:43.460 --> 40:45.060
你看一下是不是没监听了

40:45.060 --> 40:45.860
对吧

40:45.860 --> 40:46.760
就没有监听了

40:46.760 --> 40:47.960
比方说够1

40:47.960 --> 40:49.160
也没有监听的

40:49.160 --> 40:51.160
就是可以用于取消监听

40:51.160 --> 40:52.860
这个unlesson

40:52.860 --> 40:53.960
当然这个lesson函数

40:53.960 --> 40:54.660
每一调用一次

40:54.660 --> 40:57.160
它都会加入一个新的监听函数

40:57.160 --> 40:59.660
就有点类似于add event listener

40:59.660 --> 41:00.960
相当于动物对象里面的

41:00.960 --> 41:02.760
add event listener

41:02.760 --> 41:04.760
来添加一个监听函数

41:04.760 --> 41:05.560
总之它每一个监听

41:05.560 --> 41:06.660
它都可以返回一个新的函数

41:06.660 --> 41:07.860
用来取消监听

41:07.860 --> 41:09.560
就这么回事

41:09.560 --> 41:10.260
有问题吧

41:10.260 --> 41:11.560
这是关于unlesson函数

41:11.560 --> 41:13.060
非常非常重要

41:13.060 --> 41:14.560
对于我们后边学习

41:14.560 --> 41:16.660
后边实现rex rota的

41:16.660 --> 41:17.360
具体实现的时候

41:17.360 --> 41:19.360
它就会用到这个lesson函数

41:19.360 --> 41:20.760
当然利用这个lesson函数

41:20.760 --> 41:22.360
我们以后还可以做一些

41:22.360 --> 41:27.160
什么导航守卫的东西出来

41:27.160 --> 41:30.760
这是关于unlesson

41:30.760 --> 41:33.960
然后我们再来看一下

41:33.960 --> 41:34.760
还有什么属性

41:36.760 --> 41:37.860
看一下A7

41:37.860 --> 41:39.660
还有什么属性没讲到的

41:39.660 --> 41:40.560
lesson没什么好说的

41:40.560 --> 41:42.360
刚刚说了

41:42.360 --> 41:44.560
然后这两个属性

41:44.560 --> 41:45.960
我为什么现在没法讲

41:45.960 --> 41:48.860
因为它还要涉及到配置

41:48.860 --> 41:49.960
还要涉及到配置

41:49.960 --> 41:51.760
那么我们讲了配置之后

41:51.760 --> 41:53.160
我才能讲这个玩意

41:53.160 --> 41:55.260
讲了配置之后才能讲这个玩意

41:55.260 --> 41:58.260
首先说created browser history

41:58.260 --> 42:00.360
里边的配置

42:00.360 --> 42:01.660
就是函数参数

42:01.660 --> 42:02.960
就是配置对象

42:08.130 --> 42:09.330
这个东西不写了

42:09.330 --> 42:10.330
配置对象

42:10.330 --> 42:11.430
就是调用这个函数

42:11.430 --> 42:11.930
你看一下

42:11.930 --> 42:13.630
就是调用这个函数的时候

42:13.630 --> 42:14.930
你这里我现在没有传参数

42:14.930 --> 42:15.230
对吧

42:15.230 --> 42:17.230
没有传任何参数

42:17.230 --> 42:18.730
那么这里实际上是可以传参数的

42:18.730 --> 42:19.630
参数是一个对象

42:19.630 --> 42:21.330
对对象里面要写配置

42:21.330 --> 42:22.630
那么有哪些配置呢

42:22.630 --> 42:23.430
这里

42:23.430 --> 42:24.030
咱们来看一下

42:25.630 --> 42:27.130
这里我们看一下它的文档

42:27.130 --> 42:28.130
里边它举了个例子

42:29.130 --> 42:33.130
在这

42:33.130 --> 42:35.130
配置很少

42:35.130 --> 42:36.130
就这么一点点配置

42:36.130 --> 42:37.130
哪些配置呢

42:37.130 --> 42:39.130
一个是base name

42:39.130 --> 42:41.130
base name

42:41.130 --> 42:43.130
这个配置用来做什么呢

42:43.130 --> 42:45.130
用来就是用于

42:46.130 --> 42:47.130
设置

42:49.130 --> 42:51.130
这个东西叫做激露镜

42:51.130 --> 42:53.130
这个评设我们都用不到

42:53.130 --> 42:57.130
设置激露镜

42:57.130 --> 42:58.130
就是什么意思呢

42:58.130 --> 42:59.130
就是有的时候

42:59.130 --> 43:01.130
我们的大部分时候

43:01.130 --> 43:03.130
咱们网站的激露镜是在这

43:03.130 --> 43:05.130
我这么启动一个计时本这么慢

43:06.130 --> 43:08.130
我们的激露镜就是一个写杠

43:08.130 --> 43:10.130
写杠表示激露镜

43:10.130 --> 43:11.130
应该说这样说吧

43:11.130 --> 43:14.700
设置激露镜

43:14.700 --> 43:16.700
就是我们的网站里边

43:16.700 --> 43:18.700
激露镜可能就在这

43:20.700 --> 43:21.700
大部分情况

43:21.700 --> 43:23.700
但是可能有的时候

43:23.700 --> 43:25.700
我们的网站的激露镜

43:25.700 --> 43:26.700
是另外一个地址

43:26.700 --> 43:28.700
比如说

43:28.700 --> 43:30.700
我们做一个reactor的系统

43:30.700 --> 43:32.700
那么只做新闻板块

43:32.700 --> 43:34.700
那么我们的新闻板块的

43:34.700 --> 43:35.700
激露镜的是这个

43:35.700 --> 43:36.700
我们所有的激露镜

43:36.700 --> 43:38.700
都是在这个激露镜下面进行的

43:38.700 --> 43:40.700
都是在这个激露镜下面进行的

43:41.700 --> 43:42.700
那么这样子

43:42.700 --> 43:43.700
可以通过base name

43:43.700 --> 43:44.700
来设置激露镜

43:44.700 --> 43:45.700
那举个例子

43:45.700 --> 43:46.700
比如说我们这里

43:46.700 --> 43:48.700
设置一个base name

43:52.700 --> 43:53.700
设置一个什么呢

43:53.700 --> 43:55.700
设置一个就是news

43:55.700 --> 43:56.700
看一下

43:56.700 --> 43:57.700
这样子设置完了过

43:57.700 --> 43:59.700
有什么不一样

44:00.700 --> 44:01.700
接下来我们来看一下

44:01.700 --> 44:03.700
这里如果说

44:03.700 --> 44:05.700
我现在再去调用

44:05.700 --> 44:07.700
a起点push

44:08.700 --> 44:09.700
夹住一个

44:10.700 --> 44:12.700
你看一下它地址变成啥了

44:13.700 --> 44:14.700
它的地址

44:14.700 --> 44:15.700
你看它这里边

44:15.700 --> 44:16.700
到时候

44:16.700 --> 44:17.700
就是nok系里边

44:17.700 --> 44:18.700
到时候还是这个东西

44:18.700 --> 44:19.700
对吧

44:19.700 --> 44:20.700
nok系还是这个东西

44:20.700 --> 44:22.700
但是你看一下它的地址变成啥了

44:23.700 --> 44:24.700
就变成这个了

44:24.700 --> 44:25.700
对吧

44:25.700 --> 44:26.700
就变成这个了

44:27.700 --> 44:28.700
于是咱们

44:29.700 --> 44:30.700
我们有了跟路径过后

44:30.700 --> 44:31.700
设置了跟路径

44:31.700 --> 44:33.700
只需要在这里一个地方设置一下

44:33.700 --> 44:34.700
那么其他地方

44:34.700 --> 44:36.700
就可以当作根本没有跟路径一样

44:36.700 --> 44:37.700
它会自行给你处理

44:37.700 --> 44:38.700
你push也好

44:39.700 --> 44:40.700
然后replace

44:40.700 --> 44:41.700
replace也好

44:41.700 --> 44:42.700
你写了路径过后

44:42.700 --> 44:43.700
它都会把跟路径给你加上

44:43.700 --> 44:44.700
就是base name

44:45.700 --> 44:47.700
比方说我们要跳转到首页

44:47.700 --> 44:48.700
跳转到首页我们怎么跳转呢

44:48.700 --> 44:49.700
h push

44:49.700 --> 44:50.700
一个斜桿

44:50.700 --> 44:51.700
跳转到首页

44:51.700 --> 44:52.700
你看一下

44:52.700 --> 44:53.700
它首页是啥

44:53.700 --> 44:54.700
60

44:54.700 --> 44:55.700
首页是60

44:55.700 --> 44:56.700
这个变成跟路径了

44:56.700 --> 44:57.700
这是base name

44:58.700 --> 44:59.700
好

44:59.700 --> 45:00.700
这是这个

45:00.700 --> 45:01.700
下一个咱们看一下

45:02.700 --> 45:04.700
force refresh

45:05.700 --> 45:07.700
因为这是browser history

45:07.700 --> 45:08.700
它都是跟浏览器相关的

45:08.700 --> 45:10.700
force refresh

45:10.700 --> 45:11.700
那么这个表示怎么意思呢

45:11.700 --> 45:12.700
它会指的是

45:12.700 --> 45:14.700
是否强制刷新页面

45:14.700 --> 45:15.700
因为我们知道

45:15.700 --> 45:16.700
history API

45:16.700 --> 45:17.700
因为这个我们都使用了

45:17.700 --> 45:18.700
history API 这里

45:18.700 --> 45:20.700
因为我们使用了这个方法

45:20.700 --> 45:22.700
因为history API

45:22.700 --> 45:23.700
它是不会刷新页面的

45:23.700 --> 45:24.700
对吧

45:24.700 --> 45:25.700
历史之间

45:25.700 --> 45:26.700
跳转是不会刷新页面的

45:26.700 --> 45:27.700
那么你如果把这个东西

45:27.700 --> 45:28.700
设为 true 的话

45:28.700 --> 45:30.700
它会导致强行刷新页面

45:30.700 --> 45:31.700
看着

45:31.700 --> 45:33.700
如果说我们调用 h push

45:33.700 --> 45:34.700
注意看页面有没有刷新

45:34.700 --> 45:37.010
你看是不是刷新了

45:37.010 --> 45:38.010
对吧

45:38.010 --> 45:39.010
强行刷新页面

45:40.010 --> 45:41.010
其实这个

45:41.010 --> 45:42.010
rex rotary

45:42.010 --> 45:43.010
它也支持这个功能

45:43.010 --> 45:45.010
这个功能其实是它搞定的

45:46.010 --> 45:47.010
好 再来

45:48.010 --> 45:49.010
kinense

45:49.010 --> 45:51.010
好 这个玩意我要说一下

45:51.010 --> 45:54.540
这里是

45:55.540 --> 45:57.540
刚才那个是 force refresh

45:59.920 --> 46:00.920
就是

46:01.920 --> 46:02.920
路由跳转

46:02.920 --> 46:03.920
跳转后

46:03.920 --> 46:04.920
就地址

46:04.920 --> 46:06.920
改变是

46:06.920 --> 46:08.920
是否强制

46:08.920 --> 46:10.920
刷新页面

46:10.920 --> 46:12.920
是否强制刷新页面

46:12.920 --> 46:13.920
好 下一个

46:13.920 --> 46:14.920
下一个是我们

46:14.920 --> 46:16.920
是那个就是

46:17.920 --> 46:18.920
下一个是这个

46:20.920 --> 46:22.920
这个kinense

46:22.920 --> 46:27.060
这个表示什么的意思呢

46:27.060 --> 46:29.060
就是location对象

46:29.060 --> 46:31.060
使用的

46:31.060 --> 46:32.060
keyz

46:32.060 --> 46:33.060
keyz

46:34.060 --> 46:35.060
长度

46:35.060 --> 46:36.060
这是啥意思

46:36.060 --> 46:37.060
我再解释一下

46:38.060 --> 46:39.060
大家看一下

46:40.060 --> 46:41.060
这个

46:41.060 --> 46:42.060
对象就是这个

46:42.060 --> 46:43.060
hiss为对象里边

46:43.060 --> 46:44.060
它不是一个属性

46:44.060 --> 46:45.060
叫做location吗

46:45.060 --> 46:46.060
你看一下

46:46.060 --> 46:47.060
location里边是不是

46:47.060 --> 46:48.060
记录了地址信息

46:48.060 --> 46:49.060
对吧

46:49.060 --> 46:50.060
记录了地址信息

46:50.060 --> 46:51.060
这个地址信息里边

46:51.060 --> 46:52.060
其实

46:52.060 --> 46:53.060
多的东西没啥

46:53.060 --> 46:55.060
哈希这些都没啥

46:55.060 --> 46:56.060
这些都很好理解

46:56.060 --> 46:58.060
设计这些东西都讲过的

46:58.060 --> 46:59.060
State

46:59.060 --> 47:00.060
带的状态都讲过的

47:00.060 --> 47:01.060
那么看这

47:01.060 --> 47:03.060
是不是有个key

47:03.060 --> 47:04.060
对不对

47:04.060 --> 47:05.060
key

47:05.060 --> 47:06.060
默认是6

47:06.060 --> 47:07.060
默认是6

47:07.060 --> 47:08.060
那么我们现在

47:08.060 --> 47:09.060
把它变成

47:09.060 --> 47:10.060
改一下

47:10.060 --> 47:11.060
key

47:11.060 --> 47:12.060
kinense

47:12.060 --> 47:13.060
改成

47:13.060 --> 47:14.060
或者是吗

47:14.060 --> 47:15.060
人是

47:15.060 --> 47:16.060
老存

47:16.060 --> 47:18.060
它生成了一个水渡制服串

47:19.060 --> 47:20.060
看一下

47:20.060 --> 47:21.060
kinense

47:23.060 --> 47:25.370
都可以行

47:25.370 --> 47:28.370
等一下

47:29.370 --> 47:30.370
等一下

47:30.370 --> 47:33.520
对啊

47:33.520 --> 47:34.520
没问题

47:34.520 --> 47:35.520
我看一下

47:35.520 --> 47:36.520
哪里

47:36.520 --> 47:37.520
刷新一遍

47:37.520 --> 47:38.520
刷新一遍

47:39.520 --> 47:41.520
刚才没有变化

47:41.520 --> 47:42.520
刚才没有变化

47:42.520 --> 47:44.520
那么我们再重新加一个页面

47:44.520 --> 47:45.520
再重新加一个页面

47:45.520 --> 47:47.520
然后再看H

47:47.520 --> 47:48.520
再看H

47:48.520 --> 47:50.520
location

47:51.520 --> 47:52.520
是不是四位了

47:52.520 --> 47:53.520
对不对

47:53.520 --> 47:54.520
那么以之后加的页面

47:54.520 --> 47:55.520
location里边

47:55.520 --> 47:57.520
大家的key就是四位

47:57.520 --> 47:59.520
它为什么有这个key存在呢

47:59.520 --> 48:01.520
这里我要解释一下

48:01.520 --> 48:03.520
这个key是啥呢

48:03.520 --> 48:05.520
这个key

48:05.520 --> 48:07.520
这个key是这样子

48:07.520 --> 48:08.520
它是

48:08.520 --> 48:10.520
这样解释

48:10.520 --> 48:12.520
就是地址占中

48:12.520 --> 48:15.520
记录的并非制服串

48:15.520 --> 48:17.520
它记录的不是一个制服串的地址

48:17.520 --> 48:19.520
比如说我们访问某一个东西

48:19.520 --> 48:20.520
我们这写的时候好写吗

48:20.520 --> 48:21.520
方便吗

48:21.520 --> 48:22.520
它记录的并不是一个

48:22.520 --> 48:24.520
并不是这种东西的地址

48:24.520 --> 48:29.520
而是一个location对象

48:29.520 --> 48:31.520
location对象

48:31.520 --> 48:32.520
所以说它这里面

48:32.520 --> 48:34.520
每一项实际上是一个location

48:34.520 --> 48:36.520
location

48:36.520 --> 48:38.520
每一项是一个location对象

48:38.520 --> 48:39.520
但是它的地址

48:39.520 --> 48:41.520
那个location的地址不一样对吧

48:41.520 --> 48:43.520
那么就可能会导致

48:43.520 --> 48:47.210
不一样吧

48:47.210 --> 48:48.210
ABC

48:48.210 --> 48:49.210
随便下写吧

48:49.210 --> 48:50.210
下写

48:50.210 --> 48:52.210
这里是写纲

48:52.210 --> 48:54.210
location里边

48:54.210 --> 48:55.210
它记得是location对象

48:55.210 --> 48:56.210
那么就可能导致

48:56.210 --> 48:58.210
地址占中有可能会出现

48:58.210 --> 49:00.210
是不是两个相同的

49:00.210 --> 49:02.210
长得一模一样的location

49:02.210 --> 49:03.210
是不是有可能会出现

49:03.210 --> 49:04.210
对吧

49:04.210 --> 49:05.210
是不是有可能会出现这种

49:05.210 --> 49:07.210
是不是两个长得一模一样的location

49:07.210 --> 49:08.210
对吧

49:08.210 --> 49:10.210
它为了区分这两个location

49:10.210 --> 49:11.210
因此它给了它不同的

49:11.210 --> 49:13.210
气质来进行区分

49:13.210 --> 49:14.210
这样子便于区分

49:14.210 --> 49:15.210
不然的话比较起来

49:15.210 --> 49:17.210
怎么去比较呢

49:17.210 --> 49:18.210
比较就不知道

49:18.210 --> 49:19.210
它们两个是不是一样的了

49:19.210 --> 49:21.210
是不是同一个location

49:21.210 --> 49:23.210
那么它是为了方便你

49:23.210 --> 49:25.210
当然你如果要用这个key

49:25.210 --> 49:27.210
那就可以不用这个key拉倒

49:27.210 --> 49:29.210
它是为了方便你进行区分

49:29.210 --> 49:31.210
为了方便你进行区分

49:31.210 --> 49:32.210
所以说给这个地方

49:32.210 --> 49:34.210
它加了一个key值

49:34.210 --> 49:35.210
这样子意思吧

49:35.210 --> 49:36.210
它加了一个key值

49:36.210 --> 49:37.210
虽然说

49:37.210 --> 49:38.210
它location可能长得一样的

49:38.210 --> 49:40.210
它key值是不一样的

49:40.210 --> 49:42.210
每个地方它有个key

49:42.210 --> 49:43.210
key4

49:43.210 --> 49:44.210
key3

49:44.210 --> 49:46.210
就这么个意思

49:46.210 --> 49:48.210
这是5

49:48.210 --> 49:52.510
4

49:52.510 --> 49:54.510
这是

49:54.510 --> 49:55.510
我不画了

49:55.510 --> 49:56.510
就这么个意思

49:56.510 --> 49:57.510
不行 强迫症

49:57.510 --> 49:59.510
然后写完

49:59.510 --> 50:00.510
key2

50:00.510 --> 50:02.510
这是key1

50:02.510 --> 50:04.510
它每一个location

50:04.510 --> 50:05.510
有个key值

50:05.510 --> 50:07.510
通过key值来区分不同的location

50:07.510 --> 50:08.510
原来的意思吧

50:08.510 --> 50:10.510
是这么个意思

50:10.510 --> 50:11.510
如果你后退的时候

50:11.510 --> 50:12.510
你推到了key值

50:12.510 --> 50:13.510
就是之前的key值

50:13.510 --> 50:14.510
如果你钱

50:14.510 --> 50:15.510
继续加的话

50:15.510 --> 50:16.510
哪怕一样的地址

50:16.510 --> 50:18.510
它得到的key值是不一样的

50:18.510 --> 50:20.510
这是关于key

50:20.510 --> 50:21.510
关于key值

50:21.510 --> 50:22.510
那么keynance

50:22.510 --> 50:24.510
对我们来说有啥用

50:24.510 --> 50:25.510
没多少用

50:25.510 --> 50:27.510
好 下面这个

50:27.510 --> 50:29.510
这个属性

50:29.510 --> 50:30.510
它配置的是什么呢

50:30.510 --> 50:32.510
它配置的一个函数

50:32.510 --> 50:33.510
这个玩意儿

50:33.510 --> 50:36.510
它是配置的一个函数

50:36.510 --> 50:37.510
一个函数

50:37.510 --> 50:38.510
当然它有默认值

50:38.510 --> 50:39.510
它的默认值是啥呢

50:39.510 --> 50:41.510
默认值就是这个

50:41.510 --> 50:43.510
默认值就是这个函数

50:43.510 --> 50:44.510
如果你不配置它的话

50:44.510 --> 50:45.510
默认就是这个函数

50:45.510 --> 50:47.510
那么这个函数有两个

50:47.510 --> 50:49.510
这个函数的作用是什么呢

50:49.510 --> 50:52.510
这个函数的作用就是

50:52.510 --> 50:54.510
该函数

50:54.510 --> 50:56.510
什么时候运行呢

50:56.510 --> 50:59.510
当调用history

50:59.510 --> 51:02.510
对象

51:02.510 --> 51:06.510
block函数后

51:06.510 --> 51:08.510
发生页面

51:08.510 --> 51:10.510
跳转时

51:10.510 --> 51:11.510
运行

51:11.510 --> 51:12.510
我们一会

51:12.510 --> 51:13.510
就说这个函数

51:13.510 --> 51:14.510
要跟这个block函数

51:14.510 --> 51:15.510
来配合使用

51:15.510 --> 51:16.510
要光写这个东西

51:16.510 --> 51:18.510
和光写block

51:18.510 --> 51:19.510
没多少意义

51:19.510 --> 51:20.510
我们通常都是用

51:20.510 --> 51:21.510
这个函数

51:21.510 --> 51:23.510
跟这个block函数配合使用

51:23.510 --> 51:24.510
所以说我们刚才

51:24.510 --> 51:25.510
为什么没有去讲

51:25.510 --> 51:26.510
block函数呢

51:26.510 --> 51:28.510
就是因为它要配合这个东西

51:28.510 --> 51:30.510
配合这个东西

51:30.510 --> 51:31.510
那么这个函数

51:31.510 --> 51:32.510
说起来很抽象

51:32.510 --> 51:33.510
说起来非常非常抽象

51:33.510 --> 51:35.510
没关系

51:35.510 --> 51:38.510
咱们在这个函数里边

51:38.510 --> 51:40.510
它不是有默认值吗

51:40.510 --> 51:41.510
对不对

51:41.510 --> 51:42.510
有默认值

51:42.510 --> 51:43.510
咱们在这个函数里边

51:43.510 --> 51:44.510
这样子

51:44.510 --> 51:47.510
我不给它改一下

51:47.510 --> 51:48.510
它不是有默认值吗

51:48.510 --> 51:50.510
把默认值给它覆盖掉

51:51.510 --> 51:52.510
覆盖掉

51:52.510 --> 51:53.510
就一个函数

51:53.510 --> 51:54.510
一个普通函数

51:54.510 --> 51:55.510
这个函数里边

51:55.510 --> 51:56.510
没有函数

51:56.510 --> 51:57.510
然后直接输出一句话

51:57.510 --> 51:58.510
我们来看一下

51:58.510 --> 52:00.510
它什么时候运行

52:00.510 --> 52:03.510
get user confirmation

52:03.510 --> 52:04.510
运行

52:04.510 --> 52:05.510
看一下这个函数

52:05.510 --> 52:06.510
什么运行

52:06.510 --> 52:07.510
它什么时候去调用这个函数

52:07.510 --> 52:08.510
这个配置里边

52:08.510 --> 52:09.510
好

52:09.510 --> 52:10.510
写了这个函数之后

52:10.510 --> 52:11.510
我们来看一下

52:11.510 --> 52:12.510
页面上

52:12.510 --> 52:13.510
有运行吗

52:13.510 --> 52:14.510
什么没有运行

52:14.510 --> 52:15.510
这个函数

52:15.510 --> 52:16.510
压根就没有运行

52:16.510 --> 52:17.510
对吧

52:17.510 --> 52:18.510
那这个函数

52:18.510 --> 52:19.510
什么时候运行呢

52:19.510 --> 52:20.510
试一下

52:20.510 --> 52:21.510
poach

52:21.510 --> 52:22.510
鞋杠123

52:23.510 --> 52:24.510
有运行吗

52:24.510 --> 52:25.510
刷新

52:25.510 --> 52:26.510
刷新

52:26.510 --> 52:27.510
刷新

52:28.510 --> 52:29.510
刷新

52:29.510 --> 52:30.510
控制就看不见了

52:30.510 --> 52:31.510
现在我们挑转

52:31.510 --> 52:32.510
有运行吗

52:32.510 --> 52:33.510
这个函数

52:33.510 --> 52:34.510
有运行吗

52:34.510 --> 52:35.510
顺便也没有

52:35.510 --> 52:36.510
这个函数也没有运行

52:36.510 --> 52:37.510
那它什么时候运行

52:37.510 --> 52:38.510
它是这样子

52:38.510 --> 52:40.510
它要配合那个block函数

52:41.510 --> 52:42.510
history里边有一个函数

52:42.510 --> 52:43.510
叫做block

52:43.510 --> 52:44.510
之前没讲

52:44.510 --> 52:45.510
那么现在可以讲了

52:45.510 --> 52:46.510
block函数

52:47.510 --> 52:48.510
这个是什么东西

52:49.510 --> 52:51.510
block是个方法

52:51.510 --> 52:53.510
它用就是

52:53.510 --> 52:54.510
用于

52:55.510 --> 52:57.510
设置一个主设

52:58.510 --> 53:01.510
当页面发生跳转时

53:03.510 --> 53:05.510
会将指定的消息

53:06.510 --> 53:07.510
传递到

53:08.510 --> 53:09.510
传递到哪呢

53:09.510 --> 53:10.510
传递到这个

53:11.510 --> 53:13.510
get user confer

53:13.510 --> 53:16.510
会将指定的消息传递到get user confer

53:19.510 --> 53:20.510
调用

53:21.510 --> 53:22.510
并调用

53:22.510 --> 53:24.510
get user confer函数

53:24.510 --> 53:25.510
也就是说

53:25.510 --> 53:28.510
get user confer函数

53:28.510 --> 53:30.510
它什么时候运行

53:30.510 --> 53:33.510
也不是说它调用了block之后就会运行

53:33.510 --> 53:35.510
block就是设置一个主设

53:35.510 --> 53:36.510
什么叫主设

53:36.510 --> 53:37.510
就等着

53:38.510 --> 53:40.510
这个等着的时候干嘛呢

53:40.510 --> 53:42.510
什么时候发生事情呢

53:42.510 --> 53:44.510
当页面发生跳转的时候

53:44.510 --> 53:47.510
那么它会把这个等着的消息

53:47.510 --> 53:48.510
传到这个并调用这个函数

53:48.510 --> 53:49.510
有点绕

53:49.510 --> 53:50.510
稍微有点绕

53:50.510 --> 53:51.510
咱们这里

53:51.510 --> 53:52.510
写了这么一个函数

53:52.510 --> 53:53.510
对吧

53:53.510 --> 53:54.510
我们刚才写了这么一个函数

53:54.510 --> 53:55.510
这个函数没有起作用

53:55.510 --> 53:56.510
没有起作用

53:56.510 --> 53:57.510
因为它要配合什么呢

53:58.510 --> 53:59.510
配合block

53:59.510 --> 54:00.510
block

54:00.510 --> 54:01.510
比方说这里面

54:01.510 --> 54:02.510
啥都不写

54:03.510 --> 54:04.510
啥都不写

54:04.510 --> 54:05.510
我们来看一下吧

54:05.510 --> 54:06.510
看一下

54:06.510 --> 54:07.510
它返回了一个新的函数

54:07.510 --> 54:08.510
返回一个新的函数

54:08.510 --> 54:09.510
这个新的函数

54:09.510 --> 54:10.510
我们不用管它

54:10.510 --> 54:11.510
现在不用管它

54:11.510 --> 54:12.510
现在我们设置了block

54:12.510 --> 54:14.510
表示有了一个主设了

54:14.510 --> 54:15.510
有了主设之后

54:15.510 --> 54:17.510
咱们来改变页面

54:18.510 --> 54:21.820
比方说再调转到abc

54:24.820 --> 54:26.820
那应该是这里没有写消息

54:26.820 --> 54:27.820
没有写消息

54:27.820 --> 54:28.820
这里边要写个字幕串

54:28.820 --> 54:29.820
要写个消息进去

54:29.820 --> 54:30.820
比方说我们就这里写

54:30.820 --> 54:31.820
真的要调转吗

54:31.820 --> 54:32.820
写个消息进去

54:32.820 --> 54:34.820
这里它返回了一个函数

54:34.820 --> 54:35.820
这个函数不用管它

54:35.820 --> 54:37.820
这个函数它又返回了一个函数

54:37.820 --> 54:38.820
不用管它

54:38.820 --> 54:39.820
这里有点绕

54:39.820 --> 54:40.820
然后push

54:41.820 --> 54:42.820
123

54:42.820 --> 54:43.820
我们先看效果

54:43.820 --> 54:45.820
先感兴的认知一下

54:45.820 --> 54:46.820
你看一下

54:46.820 --> 54:47.820
getUserConfirst

54:48.820 --> 54:49.820
这个还是会运行的

54:49.820 --> 54:50.820
那我们现在后退

54:50.820 --> 54:51.820
后退页面

54:51.820 --> 54:53.820
你看是不是这个也运行的

54:53.820 --> 54:55.820
后退页面是不是也运行的

54:55.820 --> 54:56.820
就好像说什么了

54:56.820 --> 54:57.820
好像是一个监听器

54:57.820 --> 54:58.820
对吧

54:58.820 --> 55:00.820
我们刚才不是取了个lesson吗

55:00.820 --> 55:02.820
是不是取了个lesson

55:02.820 --> 55:03.820
好像是监听器

55:03.820 --> 55:04.820
只要页面发生

55:04.820 --> 55:05.820
发生调转

55:05.820 --> 55:06.820
它就会运行

55:06.820 --> 55:08.820
但是它跟监听器有点不一样

55:08.820 --> 55:11.820
监听器它是发生在页面调转之后

55:11.820 --> 55:12.820
发生在页面调转之后

55:12.820 --> 55:13.820
它已经调转了

55:13.820 --> 55:15.820
你无法改变它

55:15.820 --> 55:16.820
但是你看一下

55:16.820 --> 55:19.820
目前我们这里pushabc

55:19.820 --> 55:20.820
你看一下

55:20.820 --> 55:22.820
我们这里运行的这个函数

55:22.820 --> 55:24.820
你看一下页面地址有没有调转

55:24.820 --> 55:26.820
有没有调转页面地址

55:26.820 --> 55:27.820
是没有

55:27.820 --> 55:28.820
是没有调转页面地址

55:28.820 --> 55:31.820
好 那么它整个逻辑是这样子的

55:31.820 --> 55:34.450
看着

55:34.450 --> 55:35.450
整个逻辑是这样子的

55:35.450 --> 55:37.450
我们有这么一个函数

55:38.450 --> 55:42.450
这个函数的名字叫做getUserConfirmation

55:42.450 --> 55:43.450
我们画个图出来

55:43.450 --> 55:44.450
已经明白了

55:45.450 --> 55:47.450
这里稍微有点绕

55:47.450 --> 55:49.450
这里有这么一个函数

55:49.450 --> 55:50.450
写到这了

55:50.450 --> 55:51.450
你配置到这了

55:51.450 --> 55:54.450
然后我们这里设置了一个组色

55:55.450 --> 55:56.450
调用

55:58.450 --> 56:00.450
history block

56:00.450 --> 56:02.450
设置组色

56:02.450 --> 56:03.450
如果你不设置组色的话

56:03.450 --> 56:05.450
那么这个函数是没用的

56:05.450 --> 56:06.450
是没用的

56:06.450 --> 56:08.450
设置了一个组色之后

56:08.450 --> 56:09.450
你可以认为

56:09.450 --> 56:11.450
它相当于给你建立了一个

56:11.450 --> 56:13.450
一个非常特殊的监听器

56:14.450 --> 56:17.450
特殊的蓝接器

56:17.450 --> 56:19.450
一设置到组色之后

56:19.450 --> 56:21.450
那么也要传一个制服串消息

56:22.450 --> 56:25.450
传递一个制服串消息

56:25.450 --> 56:27.450
因为我们刚才怎么调用的

56:27.450 --> 56:28.450
再回一下

56:28.450 --> 56:29.450
刚才我们是不是这样调用的

56:29.450 --> 56:30.450
history block

56:30.450 --> 56:31.450
这里真的要调转

56:31.450 --> 56:33.450
传递了一个制服串消息

56:33.450 --> 56:35.450
然后它干嘛呢

56:36.450 --> 56:37.450
制服串消息

56:37.450 --> 56:39.450
我们用一个制服串消息

56:39.450 --> 56:41.450
我们用一个制服串消息

56:42.450 --> 56:43.450
制服串消息

56:43.450 --> 56:45.450
我们用一个换一个颜色

56:45.450 --> 56:47.450
来标注一下

56:47.450 --> 56:49.450
换成这个颜色

56:49.450 --> 56:50.450
换成这个颜色

56:50.450 --> 56:51.450
来标注一下

56:51.450 --> 56:52.450
传递那个制服串消息

56:52.450 --> 56:55.450
然后它就产生了一个特殊的蓝接器

56:55.450 --> 56:56.450
这个蓝接器

56:56.450 --> 56:58.450
什么时候发生作用了

56:58.450 --> 57:00.450
当我们调转页面的时候

57:00.450 --> 57:02.450
当你现在要从一个页面

57:02.450 --> 57:03.450
调转到另一个页面的时候

57:03.450 --> 57:05.450
页面A

57:05.450 --> 57:06.450
页面A

57:06.450 --> 57:11.790
然后你要调转到页面B的时候

57:11.790 --> 57:13.790
我们要进行这样的调转的时候

57:13.790 --> 57:15.790
它要经过这么一个过程

57:15.790 --> 57:17.790
如果说你没有设置组色

57:17.790 --> 57:18.790
那是没有意义的

57:18.790 --> 57:19.790
如果你没有设置组色的话

57:19.790 --> 57:21.790
它就没有这个蓝接器

57:21.790 --> 57:23.790
是没有任何意义的

57:23.790 --> 57:25.790
那么现在它会经过这么一个过程

57:25.790 --> 57:27.790
它首先不着急调转

57:27.790 --> 57:28.790
不着急调转

57:28.790 --> 57:30.790
它先经过这个蓝接器

57:30.790 --> 57:32.790
经过这个蓝接器

57:32.790 --> 57:34.790
这个蓝接器干嘛呢

57:34.790 --> 57:35.790
这个蓝接器

57:35.790 --> 57:36.790
它就会把制服串消息

57:36.790 --> 57:38.790
传递给这个UZER CONFER

57:38.790 --> 57:41.790
它会把这个制服串传过去

57:41.790 --> 57:45.360
它把我们刚才的制服串传过去

57:45.360 --> 57:48.860
这个制服串传过去

57:48.860 --> 57:49.860
就是消息

57:49.860 --> 57:50.860
制服串消息

57:52.860 --> 57:53.860
消息传过去

57:53.860 --> 57:54.860
传到这个函数里面

57:54.860 --> 57:55.860
作为参数传过去

57:55.860 --> 57:56.860
作为参数传过去

57:56.860 --> 57:58.860
然后这个函数来进行处理

57:58.860 --> 58:01.860
当这个函数处理完成之后

58:01.860 --> 58:03.860
那么由这个函数来决定

58:03.860 --> 58:05.860
要不要调到页面B

58:05.860 --> 58:06.860
要不要调到页面B

58:06.860 --> 58:08.860
那么有两种情况

58:08.860 --> 58:09.860
这里有两种情况

58:09.860 --> 58:11.860
第一种情况就是

58:11.860 --> 58:12.860
这个函数

58:13.860 --> 58:14.860
它调用了一个回调

58:14.860 --> 58:15.860
我们一会会说

58:15.860 --> 58:19.560
调用了一个回调

58:19.560 --> 58:21.560
叫做callback

58:21.560 --> 58:22.560
我们用callback

58:22.560 --> 58:24.560
callback to

58:24.560 --> 58:25.560
那么这样子的话

58:25.560 --> 58:26.560
它就会调转到页面B

58:26.560 --> 58:27.560
也就是说

58:27.560 --> 58:28.560
说了半天

58:28.560 --> 58:29.560
说了什么意思呢

58:29.560 --> 58:31.560
就是还有经过这么一个东西

58:31.560 --> 58:32.560
这么一个东西来处理

58:32.560 --> 58:34.560
经过这么一个东西来处理

58:34.560 --> 58:35.560
就说我们以前

58:35.560 --> 58:36.560
调转到页面B

58:36.560 --> 58:37.560
是直接调转的

58:37.560 --> 58:38.560
直接调转过后

58:38.560 --> 58:39.560
然后触发监经济

58:39.560 --> 58:40.560
但是现在不一样了

58:40.560 --> 58:41.560
加了组色过后不一样了

58:41.560 --> 58:43.560
它会先到拦接器里边

58:43.560 --> 58:45.560
然后经 调用这个函数

58:45.560 --> 58:46.560
然后呢

58:46.560 --> 58:47.560
这个函数来决定

58:47.560 --> 58:48.560
它是否能调转到页面B

58:48.560 --> 58:50.560
只有把它设为去过后

58:50.560 --> 58:51.560
才能调转

58:51.560 --> 58:52.560
如果没有这样做的话

58:52.560 --> 58:53.560
它是不会调转的

58:53.560 --> 58:55.560
不会调转的

58:55.560 --> 58:56.560
你要这意思吗

58:56.560 --> 58:57.560
那么咱们把这个

58:57.560 --> 58:58.560
完整的过程走一遍

58:58.560 --> 59:00.560
好 这些组色怎么设置的

59:00.560 --> 59:01.560
组色是怎么设置的

59:01.560 --> 59:02.560
你看一下

59:02.560 --> 59:03.560
我们可以在这里写

59:03.560 --> 59:04.560
这里写

59:04.560 --> 59:06.560
window

59:06.560 --> 59:08.560
window

59:08.560 --> 59:09.560
block

59:09.560 --> 59:11.560
组色

59:11.560 --> 59:13.560
就是

59:13.560 --> 59:17.560
你真的要调转页面吗

59:17.560 --> 59:19.560
设置这么一个组色

59:21.560 --> 59:23.560
好 设置的组色之后

59:23.560 --> 59:25.560
设置的组色之后

59:25.560 --> 59:27.560
那么现在呢

59:27.560 --> 59:28.560
你下一次调转页面

59:28.560 --> 59:30.560
是不是要多了一个拦接器了

59:30.560 --> 59:31.560
这个拦接器要干嘛

59:31.560 --> 59:32.560
是吧 调用一个油热confer

59:32.560 --> 59:34.560
好 那么它会把这个支付出的消息

59:34.560 --> 59:35.560
传过去

59:35.560 --> 59:36.560
于是在这个油热

59:36.560 --> 59:38.560
给出油热confer这个函数里边

59:38.560 --> 59:40.560
它有一个参数叫message

59:40.560 --> 59:42.560
那么你可以得到这个message的值

59:42.560 --> 59:44.560
这个message哪来的

59:44.560 --> 59:45.560
就是block这里

59:45.560 --> 59:47.560
这个数据传过来的

59:47.560 --> 59:49.560
但是你不要认为调用block

59:49.560 --> 59:50.560
它就是调用这个函数

59:50.560 --> 59:51.560
不是这个意思

59:51.560 --> 59:52.560
不是说调用block就是调用这个函数

59:52.560 --> 59:53.560
不是这个意思

59:53.560 --> 59:55.560
调用不要这样理解

59:55.560 --> 59:57.560
而是什么呢

59:57.560 --> 59:59.560
而是加了一个组色

59:59.560 --> 01:00:01.560
这个组色什么时候运行

01:00:01.560 --> 01:00:03.560
取决于你什么时候跳页面

01:00:03.560 --> 01:00:04.560
跳页面的时候

01:00:04.560 --> 01:00:05.560
它就多了这个拦接器了

01:00:05.560 --> 01:00:06.560
是这么个意思

01:00:06.560 --> 01:00:08.560
调用这个设置了一个拦接器

01:00:08.560 --> 01:00:10.560
设置了一个拦接器

01:00:10.560 --> 01:00:12.560
好 那么再看一下

01:00:12.560 --> 01:00:13.560
那么现在呢

01:00:13.560 --> 01:00:14.560
我们这样子写了之后

01:00:14.560 --> 01:00:15.560
保存啊

01:00:15.560 --> 01:00:16.560
你看一下

01:00:16.560 --> 01:00:17.560
我们这里输出message

01:00:17.560 --> 01:00:18.560
好 现在呢

01:00:18.560 --> 01:00:19.560
我们把这句话取掉

01:00:19.560 --> 01:00:21.560
直接来 刷新刷新是吗

01:00:21.560 --> 01:00:22.560
好 然后呢

01:00:22.560 --> 01:00:23.560
现在我们调转页面

01:00:23.560 --> 01:00:24.560
好 这里就后退嘛

01:00:24.560 --> 01:00:25.560
点击后退

01:00:25.560 --> 01:00:26.560
后退

01:00:26.560 --> 01:00:28.560
它又刷新了

01:00:28.560 --> 01:00:29.560
它又刷新了

01:00:29.560 --> 01:00:30.560
我们这样子吧

01:00:30.560 --> 01:00:32.560
这样子再重新

01:00:32.560 --> 01:00:34.560
这样子

01:00:34.560 --> 01:00:36.930
关掉

01:00:36.930 --> 01:00:37.930
重新打开

01:00:37.930 --> 01:00:38.930
重新打开页面

01:00:38.930 --> 01:00:39.930
好

01:00:39.930 --> 01:00:40.930
看着啊

01:00:40.930 --> 01:00:41.930
现在呢

01:00:41.930 --> 01:00:42.930
我们

01:00:42.930 --> 01:00:43.930
一起点pooh

01:00:43.930 --> 01:00:45.930
比方说123

01:00:45.930 --> 01:00:46.930
你看一下

01:00:46.930 --> 01:00:47.930
这个消息是不是拿到了

01:00:47.930 --> 01:00:49.930
这个消息是谁打打打印出来的

01:00:49.930 --> 01:00:50.930
是不是他打印出来的

01:00:50.930 --> 01:00:51.930
这个还是打印出来的

01:00:51.930 --> 01:00:52.930
哪来的消息

01:00:52.930 --> 01:00:53.930
是不是block

01:00:53.930 --> 01:00:54.930
组色里边

01:00:54.930 --> 01:00:56.930
它就自带了这个消息

01:00:56.930 --> 01:00:57.930
就在这里

01:00:57.930 --> 01:00:58.930
它就自带了这个消息

01:00:58.930 --> 01:01:00.930
有了一个支付刷消息

01:01:00.930 --> 01:01:01.930
在下面

01:01:01.930 --> 01:01:02.930
它有这个消息

01:01:02.930 --> 01:01:03.930
那么由于有这个的存在

01:01:03.930 --> 01:01:05.930
之后随便你怎么跳页面

01:01:05.930 --> 01:01:06.930
跳页面的时候

01:01:06.930 --> 01:01:07.930
它都会经过这个蓝阶器

01:01:07.930 --> 01:01:08.930
这个蓝阶器

01:01:08.930 --> 01:01:09.930
它就会

01:01:09.930 --> 01:01:10.930
调用这个函数

01:01:10.930 --> 01:01:11.930
由这个函数来决定

01:01:11.930 --> 01:01:12.930
要不要跳页面

01:01:12.930 --> 01:01:13.930
那你看一下页面

01:01:13.930 --> 01:01:14.930
现在跳没跳

01:01:14.930 --> 01:01:15.930
是没有跳

01:01:15.930 --> 01:01:16.930
然后再看H

01:01:16.930 --> 01:01:17.930
是不是认识还是1

01:01:17.930 --> 01:01:18.930
对不对

01:01:18.930 --> 01:01:19.930
是认识还是1

01:01:19.930 --> 01:01:20.930
它并没有跳转页面

01:01:20.930 --> 01:01:21.930
为什么没有跳转页面呢

01:01:21.930 --> 01:01:22.930
是因为我看

01:01:22.930 --> 01:01:23.930
看这个图

01:01:23.930 --> 01:01:24.930
它只要没有调用

01:01:24.930 --> 01:01:25.930
callback to

01:01:25.930 --> 01:01:27.930
它就不会跳转页面

01:01:27.930 --> 01:01:29.930
那怎么来调用

01:01:29.930 --> 01:01:30.930
callback to

01:01:30.930 --> 01:01:31.930
怎么来调用呢

01:01:31.930 --> 01:01:32.930
是这样子

01:01:32.930 --> 01:01:33.930
它有第二个参数

01:01:33.930 --> 01:01:34.930
第二个参数就是个毁掉

01:01:34.930 --> 01:01:36.930
第二个参数就是毁掉

01:01:36.930 --> 01:01:37.930
你什么时候跳页面

01:01:37.930 --> 01:01:39.930
你只要调用了callback to

01:01:39.930 --> 01:01:41.930
它才会跳页面

01:01:41.930 --> 01:01:42.930
保存你看一下

01:01:44.930 --> 01:01:45.930
现在呢

01:01:47.930 --> 01:01:48.930
它说这里有一个警告

01:01:48.930 --> 01:01:50.930
我们跟路径是斜杠6

01:01:50.930 --> 01:01:51.930
斜杠6

01:01:51.930 --> 01:01:52.930
但是我们用的

01:01:52.930 --> 01:01:53.930
访问的路径是斜杠

01:01:53.930 --> 01:01:54.930
我们把这个去掉

01:01:54.930 --> 01:01:55.930
这个去掉

01:01:55.930 --> 01:01:56.930
这些东西都无所谓

01:01:57.930 --> 01:01:58.930
然后我们现在跳页面

01:01:58.930 --> 01:01:59.930
扑起

01:02:00.930 --> 01:02:01.930
斜杠123

01:02:01.930 --> 01:02:02.930
你看

01:02:02.930 --> 01:02:03.930
是不是跳了

01:02:03.930 --> 01:02:04.930
对不对

01:02:04.930 --> 01:02:06.930
也就是说有了这个拦截器的存在

01:02:06.930 --> 01:02:07.930
那么我们就可以决定

01:02:07.930 --> 01:02:08.930
它是否跳页面

01:02:09.930 --> 01:02:10.930
你看

01:02:10.930 --> 01:02:11.930
它运行了这个函数

01:02:11.930 --> 01:02:13.930
这个函数里面调用了callback to

01:02:13.930 --> 01:02:14.930
所以说它跳页面了

01:02:15.930 --> 01:02:16.930
接下来

01:02:16.930 --> 01:02:18.930
如果callback其他只表示force

01:02:18.930 --> 01:02:19.930
force

01:02:19.930 --> 01:02:20.930
它跳不了页面

01:02:20.930 --> 01:02:21.930
你看一下

01:02:22.930 --> 01:02:23.930
abc

01:02:23.930 --> 01:02:24.930
这个函数运行了

01:02:24.930 --> 01:02:25.930
页面跳了吗

01:02:25.930 --> 01:02:26.930
顺便跳

01:02:26.930 --> 01:02:27.930
它可以控制这个东西

01:02:27.930 --> 01:02:28.930
就这么个意思

01:02:30.930 --> 01:02:31.930
现在

01:02:31.930 --> 01:02:33.930
我们看一下它默认值是怎么写的

01:02:33.930 --> 01:02:34.930
就这个

01:02:34.930 --> 01:02:35.930
它不是说一个默认值吗

01:02:35.930 --> 01:02:37.930
默认值它是这样子写的

01:02:37.930 --> 01:02:38.930
非常简单

01:02:38.930 --> 01:02:39.930
callback

01:02:39.930 --> 01:02:40.930
window

01:02:40.930 --> 01:02:41.930
这样

01:02:41.930 --> 01:02:42.930
confer

01:02:42.930 --> 01:02:43.930
message

01:02:43.930 --> 01:02:44.930
它这样子写的

01:02:44.930 --> 01:02:46.930
就是它弹出一个对话框

01:02:46.930 --> 01:02:48.930
问确定和取消

01:02:48.930 --> 01:02:49.930
如果你拥护选择的确定

01:02:49.930 --> 01:02:51.930
那么这个表达是不是true

01:02:51.930 --> 01:02:52.930
那么它跳转页面

01:02:52.930 --> 01:02:53.930
用过点的取消过后

01:02:53.930 --> 01:02:55.930
那么它就不跳转页面

01:02:55.930 --> 01:02:56.930
取消的就是force

01:02:56.930 --> 01:02:57.930
它就不跳转页面

01:02:57.930 --> 01:02:59.930
那么它把message传进去

01:02:59.930 --> 01:03:00.930
那么就是提示消息传进去

01:03:00.930 --> 01:03:01.930
好 来看一下

01:03:01.930 --> 01:03:03.930
我们这样子写了之后

01:03:03.930 --> 01:03:05.930
我们现在挑页面

01:03:07.930 --> 01:03:08.930
再来

01:03:08.930 --> 01:03:09.930
存刷新意思

01:03:09.930 --> 01:03:10.930
刷新意思

01:03:11.930 --> 01:03:12.930
好 现在呢

01:03:12.930 --> 01:03:13.930
跳

01:03:14.930 --> 01:03:15.930
这没保存

01:03:15.930 --> 01:03:16.930
没保存 我说什么

01:03:16.930 --> 01:03:17.930
跳

01:03:17.930 --> 01:03:18.930
所以挑页面

01:03:18.930 --> 01:03:19.930
是不是

01:03:19.930 --> 01:03:20.930
有个提示消息了

01:03:20.930 --> 01:03:21.930
对吧

01:03:21.930 --> 01:03:22.930
你点取消 你看是不是没跳

01:03:22.930 --> 01:03:23.930
对吧

01:03:23.930 --> 01:03:24.930
然后我们再来

01:03:25.930 --> 01:03:26.930
点确定

01:03:26.930 --> 01:03:27.930
你看是不是跳了

01:03:27.930 --> 01:03:28.930
对不对

01:03:28.930 --> 01:03:29.930
就跳到页面了

01:03:29.930 --> 01:03:30.930
就这么个意思

01:03:30.930 --> 01:03:31.930
就这里面你要写啥

01:03:31.930 --> 01:03:33.930
比方说你可以弹出个div

01:03:33.930 --> 01:03:34.930
弹出个div

01:03:34.930 --> 01:03:35.930
然后比方说

01:03:35.930 --> 01:03:37.930
这里可以直接用动物元素来操作

01:03:37.930 --> 01:03:38.930
弹出个div

01:03:38.930 --> 01:03:39.930
然后div里面

01:03:39.930 --> 01:03:40.930
做一个漂亮的提示框

01:03:40.930 --> 01:03:42.930
比方说用户

01:03:42.930 --> 01:03:44.930
问它是不是真的要离开这个页面

01:03:44.930 --> 01:03:46.930
可能一个页面要填很多东西

01:03:46.930 --> 01:03:48.930
那么问它是不是要真的离开

01:03:48.930 --> 01:03:49.930
对吧

01:03:49.930 --> 01:03:51.930
咱们就可以用这种方式来操作

01:03:51.930 --> 01:03:52.930
就是

01:03:52.930 --> 01:03:53.930
我们通常情况下

01:03:53.930 --> 01:03:55.930
是配置这个函数

01:03:55.930 --> 01:03:56.930
配置这个函数

01:03:56.930 --> 01:03:57.930
这个函数该配置好

01:03:57.930 --> 01:03:59.930
因为你光配置了这个函数没用

01:03:59.930 --> 01:04:00.930
你只要不设置主设

01:04:00.930 --> 01:04:01.930
你只要不

01:04:01.930 --> 01:04:02.930
就是说为什么它不

01:04:02.930 --> 01:04:03.930
它要给你分开

01:04:03.930 --> 01:04:05.930
为什么主设要一个东西

01:04:05.930 --> 01:04:06.930
这个函数要一个东西

01:04:06.930 --> 01:04:07.930
因为它便于你处理

01:04:07.930 --> 01:04:08.930
就这个函数一开始可以

01:04:08.930 --> 01:04:10.930
把它写使配置好

01:04:10.930 --> 01:04:11.930
只要有消息主设

01:04:11.930 --> 01:04:13.930
那么就统一使用这种方式来提示

01:04:13.930 --> 01:04:15.930
它就这里面就写的是

01:04:15.930 --> 01:04:16.930
怎么去提示

01:04:16.930 --> 01:04:17.930
怎么去提示

01:04:17.930 --> 01:04:19.930
那么要提示什么消息

01:04:19.930 --> 01:04:20.930
是不是设置主设器

01:04:20.930 --> 01:04:21.930
主设器来搞定

01:04:21.930 --> 01:04:23.930
要提示什么样的消息

01:04:23.930 --> 01:04:24.930
是这么个意思

01:04:25.930 --> 01:04:26.930
那么有了主设器之后

01:04:26.930 --> 01:04:27.930
你会发现

01:04:27.930 --> 01:04:29.930
后边随便你怎么跳页面

01:04:29.930 --> 01:04:31.930
它都会弹出这个东西

01:04:31.930 --> 01:04:32.930
有一天你不希望

01:04:32.930 --> 01:04:34.930
你不希望它永远弹出

01:04:34.930 --> 01:04:35.930
有可能在某个时候

01:04:35.930 --> 01:04:36.930
你要把它取消掉

01:04:36.930 --> 01:04:38.930
把这个主设取消掉

01:04:38.930 --> 01:04:39.930
那怎么办

01:04:39.930 --> 01:04:40.930
你要把主设取消掉

01:04:40.930 --> 01:04:42.930
那么这个函数

01:04:42.930 --> 01:04:43.930
这个block函数

01:04:43.930 --> 01:04:45.930
它会返回一个变量

01:04:45.930 --> 01:04:48.930
叫un block

01:04:48.930 --> 01:04:49.930
返回的是什么

01:04:49.930 --> 01:04:51.930
返回的是一个函数

01:04:51.930 --> 01:04:53.930
它返回的是一个函数

01:04:53.930 --> 01:04:54.930
你只要调用了这个函数

01:04:54.930 --> 01:04:55.930
它就会取消

01:04:55.930 --> 01:04:57.930
我们把它放到Windows里边

01:04:57.930 --> 01:04:58.930
看一下吧

01:04:59.930 --> 01:05:00.930
你看

01:05:00.930 --> 01:05:01.930
现在它都要提示

01:05:01.930 --> 01:05:02.930
现在都要提示

01:05:02.930 --> 01:05:03.930
随便你怎么跳

01:05:03.930 --> 01:05:04.930
它都要提示

01:05:04.930 --> 01:05:07.930
那如果说我调用了这个un block

01:05:07.930 --> 01:05:08.930
调了之后

01:05:08.930 --> 01:05:09.930
现在我们再调页面

01:05:09.930 --> 01:05:10.930
提示吗

01:05:10.930 --> 01:05:11.930
不提示的

01:05:11.930 --> 01:05:12.930
就不提示的

01:05:12.930 --> 01:05:13.930
相当于是监听器

01:05:13.930 --> 01:05:14.930
取消监听式

01:05:14.930 --> 01:05:15.930
一样的道理

01:05:15.930 --> 01:05:17.930
就这么个意思

01:05:17.930 --> 01:05:19.930
所以我们这里稍微有点绕

01:05:19.930 --> 01:05:20.930
这个东西

01:05:20.930 --> 01:05:22.930
现在要跟get user confirmation

01:05:22.930 --> 01:05:23.930
这个函数

01:05:23.930 --> 01:05:24.930
一起来联合使用

01:05:24.930 --> 01:05:26.930
其实rex rotor里边

01:05:26.930 --> 01:05:27.930
也有这样的功能

01:05:27.930 --> 01:05:28.930
也有这样的功能

01:05:28.930 --> 01:05:29.930
只是我们

01:05:29.930 --> 01:05:30.930
前面讲的讲

01:05:30.930 --> 01:05:31.930
我也忘了

01:05:31.930 --> 01:05:32.930
没关系

01:05:32.930 --> 01:05:33.930
反正我们都讲到原码了

01:05:33.930 --> 01:05:35.930
后面肯定要讲到的

01:05:36.930 --> 01:05:37.930
那这里呢

01:05:37.930 --> 01:05:38.930
比方说

01:05:38.930 --> 01:05:41.930
get user confirmation

01:05:41.930 --> 01:05:42.930
这个函数

01:05:42.930 --> 01:05:43.930
这个block函数

01:05:43.930 --> 01:05:45.930
我再说一下

01:05:45.930 --> 01:05:47.930
该函数

01:05:47.930 --> 01:05:49.930
接收一个制服串

01:05:49.930 --> 01:05:51.930
作为参数

01:05:51.930 --> 01:05:53.930
表示消息内容

01:05:53.930 --> 01:05:55.930
也可以

01:05:55.930 --> 01:05:56.930
也可以

01:05:56.930 --> 01:05:59.930
接收一个函数作为参数

01:05:59.930 --> 01:06:01.930
函数的返回值

01:06:01.930 --> 01:06:03.930
是消息内容

01:06:03.930 --> 01:06:04.930
也就是说这个消息内容

01:06:04.930 --> 01:06:05.930
它不一定是

01:06:05.930 --> 01:06:07.930
直接写制服串

01:06:07.930 --> 01:06:08.930
它也可能你要经过一些运算

01:06:08.930 --> 01:06:09.930
才能得到这个消息

01:06:09.930 --> 01:06:11.930
到底该提示什么

01:06:11.930 --> 01:06:13.930
那么你可以接收一个函数

01:06:13.930 --> 01:06:14.930
这个函数有两个参数

01:06:14.930 --> 01:06:15.930
这两个参数跟那个nation

01:06:15.930 --> 01:06:16.930
是一样的

01:06:16.930 --> 01:06:18.930
location

01:06:18.930 --> 01:06:19.930
有这两个参数

01:06:19.930 --> 01:06:20.930
你I怎么用

01:06:20.930 --> 01:06:21.930
总之这个

01:06:21.930 --> 01:06:22.930
它返回着制服串

01:06:22.930 --> 01:06:23.930
返回着制服串

01:06:23.930 --> 01:06:24.930
作为这个提示消息

01:06:24.930 --> 01:06:26.930
总之你要给它一个提示消息

01:06:26.930 --> 01:06:28.930
不管是你给它函数也好

01:06:28.930 --> 01:06:29.930
还是给它一个

01:06:29.930 --> 01:06:30.930
直接给一个制服串也好

01:06:30.930 --> 01:06:32.930
总之它要得到一个提示消息

01:06:32.930 --> 01:06:33.930
有了这个提示消息之后

01:06:33.930 --> 01:06:35.930
它就可以设置一个拦戒器

01:06:35.930 --> 01:06:36.930
每当页面挑转的时候

01:06:36.930 --> 01:06:37.930
它就会把消息

01:06:37.930 --> 01:06:38.930
传给这个函数

01:06:38.930 --> 01:06:39.930
调用这个函数

01:06:39.930 --> 01:06:40.930
由这个函数来决定

01:06:40.930 --> 01:06:42.930
到底要不要挑转

01:06:42.930 --> 01:06:44.930
这个函数可以是异步的

01:06:44.930 --> 01:06:45.930
这个函数可以是异步的

01:06:45.930 --> 01:06:46.930
只要你调用了callback

01:06:46.930 --> 01:06:47.930
那么就挑转

01:06:47.930 --> 01:06:48.930
否则的话就不挑转

01:06:48.930 --> 01:06:49.930
就这么个意思

01:06:49.930 --> 01:06:51.930
这里我们保存看一下

01:06:51.930 --> 01:06:52.930
还是一样的

01:06:52.930 --> 01:06:53.930
一样的

01:06:53.930 --> 01:06:54.930
那你看是不是还是要挑转

01:06:54.930 --> 01:06:55.930
对吧

01:06:56.930 --> 01:06:57.930
那么比方说

01:06:57.930 --> 01:06:58.930
我们这里

01:06:58.930 --> 01:06:59.930
是不是真的要挑转页面

01:06:59.930 --> 01:07:01.930
真的要离开

01:07:01.930 --> 01:07:02.930
哪个页面呢

01:07:02.930 --> 01:07:05.930
要离开

01:07:05.930 --> 01:07:06.930
这里有模板制服串

01:07:06.930 --> 01:07:08.930
可以利用这个参数

01:07:08.930 --> 01:07:11.930
真的要离开

01:07:11.930 --> 01:07:12.930
哪个页面呢

01:07:12.930 --> 01:07:16.930
就是location

01:07:16.930 --> 01:07:17.930
你看

01:07:17.930 --> 01:07:18.930
对吧

01:07:18.930 --> 01:07:20.930
可以动态的设置一些东西

01:07:20.930 --> 01:07:21.930
再看

01:07:22.930 --> 01:07:23.930
对吧

01:07:23.930 --> 01:07:24.930
是吧

01:07:24.930 --> 01:07:25.930
是不是得到消息了

01:07:25.930 --> 01:07:26.930
对不对

01:07:28.930 --> 01:07:29.930
这里比方说

01:07:30.930 --> 01:07:32.930
比方说我们这里挑转到abc

01:07:32.930 --> 01:07:33.930
你看

01:07:34.930 --> 01:07:35.930
这里是

01:07:35.930 --> 01:07:36.930
不是你要离开

01:07:37.930 --> 01:07:38.930
这个不是要离开

01:07:38.930 --> 01:07:39.930
这里是

01:07:39.930 --> 01:07:41.930
就是你的新的页面地址

01:07:41.930 --> 01:07:43.930
新的页面地址

01:07:43.930 --> 01:07:45.930
是你真的要

01:07:45.930 --> 01:07:46.930
进入

01:07:46.930 --> 01:07:50.370
进入这个页面吗

01:07:50.370 --> 01:07:51.370
那么这个x形

01:07:51.370 --> 01:07:53.370
就表示的是

01:07:53.370 --> 01:07:54.370
凭这个x形

01:07:54.370 --> 01:07:55.370
我就随便

01:07:55.370 --> 01:07:56.370
我就直接写了

01:07:56.370 --> 01:07:57.370
凭这个x形

01:07:57.370 --> 01:07:58.370
那么这个x形

01:07:58.370 --> 01:07:59.370
表示这么意思

01:07:59.370 --> 01:08:00.370
那你看一下吧

01:08:00.370 --> 01:08:01.370
是不是就是你

01:08:01.370 --> 01:08:02.370
操作的方式

01:08:02.370 --> 01:08:03.370
你挑转的方式

01:08:03.370 --> 01:08:04.370
然后这里点后退

01:08:04.370 --> 01:08:05.370
你看是不是pop

01:08:05.370 --> 01:08:06.370
对不对

01:08:06.370 --> 01:08:08.370
跟那里省是一样的

01:08:09.370 --> 01:08:11.370
那么这里记笔记

01:08:11.370 --> 01:08:12.370
这是参数

01:08:12.370 --> 01:08:13.370
这是参数

01:08:13.370 --> 01:08:14.370
然后该函数返回

01:08:14.370 --> 01:08:15.370
该函数

01:08:16.370 --> 01:08:17.370
返回

01:08:17.370 --> 01:08:20.370
返回一个取消函数

01:08:20.370 --> 01:08:22.370
调用取消函数

01:08:22.370 --> 01:08:24.370
可以解除

01:08:24.370 --> 01:08:26.370
解除

01:08:26.370 --> 01:08:27.370
主设

01:08:27.370 --> 01:08:28.370
解除主设

01:08:28.370 --> 01:08:29.370
就是一开始

01:08:29.370 --> 01:08:30.370
不是建那个主设了吗

01:08:30.370 --> 01:08:32.370
你只要调用一个unblock

01:08:32.370 --> 01:08:33.370
unblock

01:08:33.370 --> 01:08:34.370
就把这个主设取消掉了

01:08:34.370 --> 01:08:35.370
取消掉主设过后

01:08:35.370 --> 01:08:36.370
这个函数还存在

01:08:36.370 --> 01:08:38.370
但是由于主设取消掉了

01:08:38.370 --> 01:08:39.370
所以说

01:08:39.370 --> 01:08:40.370
每次跳页面的时候

01:08:40.370 --> 01:08:41.370
它就直接跳过去了

01:08:41.370 --> 01:08:42.370
不会经过主设期了

01:08:42.370 --> 01:08:44.370
就这么个意思

01:08:44.370 --> 01:08:47.370
这是关于这个配置

01:08:47.370 --> 01:08:48.370
好久没了

01:08:48.370 --> 01:08:49.370
它配置就没了

01:08:49.370 --> 01:08:50.370
就这么四个配置

01:08:50.370 --> 01:08:51.370
Broster History

01:08:51.370 --> 01:08:52.370
就这么四个配置

01:08:52.370 --> 01:08:53.370
就没了

01:08:53.370 --> 01:08:54.370
就没了

01:08:54.370 --> 01:08:55.370
然后还有啥呢

01:08:55.370 --> 01:08:56.370
咱们看一下

01:08:56.370 --> 01:08:57.370
H对象里边还有啥呢

01:08:57.370 --> 01:08:58.370
配置没了

01:08:58.370 --> 01:08:59.370
H对象里边

01:08:59.370 --> 01:09:00.370
还有这个

01:09:00.370 --> 01:09:01.370
Crazy Rift

01:09:01.370 --> 01:09:03.370
这个东西很简单

01:09:03.370 --> 01:09:05.370
这个东西没有怎么用

01:09:05.370 --> 01:09:06.370
Crazy Rift

01:09:06.370 --> 01:09:07.370
那么这东西是什么呢

01:09:07.370 --> 01:09:09.370
它就是Bass Name

01:09:09.370 --> 01:09:12.370
加上Url

01:09:13.370 --> 01:09:14.370
Crazy Rift

01:09:14.370 --> 01:09:16.370
它的得到的结果

01:09:16.370 --> 01:09:17.370
就是Bass Name

01:09:17.370 --> 01:09:19.370
就是配置跟路径

01:09:19.370 --> 01:09:21.370
加上你目前的路径

01:09:21.370 --> 01:09:23.370
形成一个完整的路径

01:09:23.370 --> 01:09:25.370
完整的路径

01:09:25.370 --> 01:09:26.370
它就是这么一个用

01:09:26.370 --> 01:09:27.370
一个工具方法

01:09:27.370 --> 01:09:28.370
你I用就用

01:09:28.370 --> 01:09:29.370
比方说

01:09:29.370 --> 01:09:31.370
我们这里配置一个Bass Name

01:09:31.370 --> 01:09:32.370
Bass Name

01:09:32.370 --> 01:09:33.370
比方说

01:09:33.370 --> 01:09:34.370
News

01:09:34.370 --> 01:09:35.370
配置个Bass Name

01:09:35.370 --> 01:09:36.370
好

01:09:36.370 --> 01:09:37.370
来看一下吧

01:09:37.370 --> 01:09:38.370
比方说

01:09:38.370 --> 01:09:39.370
我们调整了

01:09:39.370 --> 01:09:40.370
我们到这个地址

01:09:41.370 --> 01:09:42.370
那个

01:09:42.370 --> 01:09:44.370
H Push

01:09:47.370 --> 01:09:48.370
1234

01:09:48.370 --> 01:09:49.370
1

01:09:49.370 --> 01:09:50.370
加个问号

01:09:50.370 --> 01:09:51.370
A等于

01:09:51.370 --> 01:09:53.370
1 B

01:09:54.370 --> 01:09:55.370
B等于2

01:09:55.370 --> 01:09:57.370
然后加个哈希

01:09:58.370 --> 01:09:59.370
看一下

01:10:00.370 --> 01:10:01.370
确定吗

01:10:01.370 --> 01:10:02.370
调过去

01:10:02.370 --> 01:10:03.370
你看地址是不是变了

01:10:03.370 --> 01:10:04.370
地址变了

01:10:04.370 --> 01:10:05.370
那么现在我们得到了

01:10:05.370 --> 01:10:06.370
这个Location

01:10:06.370 --> 01:10:07.370
你看一下

01:10:07.370 --> 01:10:09.370
这是不包含基地址的

01:10:09.370 --> 01:10:11.370
它是不会包含基地址的

01:10:11.370 --> 01:10:12.370
Bass Name

01:10:12.370 --> 01:10:13.370
它是不会包含的

01:10:13.370 --> 01:10:15.370
如果你要获得完整的路径

01:10:15.370 --> 01:10:17.370
你要获得目前完整的路径的话

01:10:17.370 --> 01:10:18.370
你怎么获取呢

01:10:18.370 --> 01:10:19.370
你可以通过H

01:10:19.370 --> 01:10:20.370
第二什么

01:10:20.370 --> 01:10:21.370
Crazy

01:10:21.370 --> 01:10:22.370
Riff

01:10:22.370 --> 01:10:23.370
通过这个

01:10:26.370 --> 01:10:27.370
这里边还要传个东西

01:10:27.370 --> 01:10:28.370
等一下

01:10:28.370 --> 01:10:30.370
这里边还要传个东西

01:10:30.370 --> 01:10:31.370
Crazy

01:10:31.370 --> 01:10:33.370
这里边要传一个

01:10:33.370 --> 01:10:35.370
Location对象

01:10:35.370 --> 01:10:36.370
传一个Location对象

01:10:36.370 --> 01:10:37.370
那么我们可以把

01:10:37.370 --> 01:10:39.370
H.Location传进去

01:10:39.370 --> 01:10:41.370
可以把H.Location传进去

01:10:41.370 --> 01:10:42.370
你看一下

01:10:42.370 --> 01:10:43.370
那么这样子一传进去

01:10:43.370 --> 01:10:45.370
把Location对象的一传进去

01:10:45.370 --> 01:10:46.370
是不是得到一个完整的地址

01:10:46.370 --> 01:10:47.370
对吧

01:10:47.370 --> 01:10:48.370
包含什么

01:10:48.370 --> 01:10:49.370
这个东西

01:10:49.370 --> 01:10:50.370
包含这个东西

01:10:50.370 --> 01:10:51.370
包含这些

01:10:51.370 --> 01:10:52.370
设计和哈希全部得到了

01:10:52.370 --> 01:10:53.370
对不对

01:10:53.370 --> 01:10:54.370
你看Location里边

01:10:54.370 --> 01:10:56.370
Location里边它是分散的

01:10:56.370 --> 01:10:57.370
也不包含基地址

01:10:57.370 --> 01:10:58.370
对吧

01:10:58.370 --> 01:10:59.370
也不包含基地址

01:10:59.370 --> 01:11:00.370
它是分散的

01:11:00.370 --> 01:11:01.370
那么使用这个函数

01:11:01.370 --> 01:11:02.370
它可以把得到一个完整的路径

01:11:02.370 --> 01:11:04.370
就是Bass URL

01:11:05.370 --> 01:11:07.370
它就是Bass URL加上

01:11:07.370 --> 01:11:09.370
后边的UIL地址

01:11:09.370 --> 01:11:10.370
这非常简单

01:11:10.370 --> 01:11:12.370
它就完了就没了

01:11:12.370 --> 01:11:14.370
这就是Kistory对象的所有东西

01:11:14.370 --> 01:11:15.370
全部讲完了

01:11:15.370 --> 01:11:16.370
一个都没漏

01:11:16.370 --> 01:11:17.370
你看一下吧

01:11:17.370 --> 01:11:18.370
还有啥

01:11:18.370 --> 01:11:19.370
还有啥的

01:11:20.370 --> 01:11:21.370
就没了对吧

01:11:21.370 --> 01:11:22.370
一共就这么一些东西

01:11:22.370 --> 01:11:23.370
一共就这么一些东西

01:11:23.370 --> 01:11:24.370
它也没有什么圆形方法

01:11:24.370 --> 01:11:26.370
它是OBG的圆形

01:11:27.370 --> 01:11:28.370
那么

01:11:28.370 --> 01:11:29.370
这个讲完了之后

01:11:29.370 --> 01:11:30.370
我们也知道了

01:11:30.370 --> 01:11:32.370
如何来创建一个Kistory对象

01:11:32.370 --> 01:11:33.370
至少我们知道了

01:11:33.370 --> 01:11:35.370
如果通过BrowseKistory

01:11:35.370 --> 01:11:36.370
来创建一个Kistory对象

01:11:36.370 --> 01:11:37.370
那么我们再来顺便看一下

01:11:37.370 --> 01:11:38.370
这个

01:11:38.370 --> 01:11:40.370
通过这个方法来创建Kistory的

01:11:40.370 --> 01:11:42.370
那就是创建一个哈希Kistory的

01:11:42.370 --> 01:11:43.370
咱们来看一下就知道了

01:11:43.370 --> 01:11:44.370
这个很简单

01:11:45.370 --> 01:11:46.370
这里下面

01:11:46.370 --> 01:11:47.370
我们这里新建个文件

01:11:48.370 --> 01:11:49.370
新建个文件

01:11:49.370 --> 01:11:51.370
哈希Kistory

01:11:51.370 --> 01:11:52.370
叫解释

01:11:52.370 --> 01:11:53.370
这里

01:11:54.370 --> 01:11:55.370
index里边

01:11:55.370 --> 01:11:57.370
导入哈希Kistory

01:11:57.370 --> 01:12:01.900
哈希Kistory

01:12:01.900 --> 01:12:02.900
导入这个

01:12:02.900 --> 01:12:03.900
那么我们来看一下

01:12:03.900 --> 01:12:05.900
创建哈希Kistory

01:12:05.900 --> 01:12:06.900
是不是也有Best Name

01:12:06.900 --> 01:12:07.900
对不对

01:12:07.900 --> 01:12:08.900
是不是也有Best Name

01:12:09.900 --> 01:12:10.900
那么这里

01:12:10.900 --> 01:12:12.900
它为什么少了一个Force Refrigeration

01:12:12.900 --> 01:12:13.900
为什么少了强制刷新呢

01:12:13.900 --> 01:12:15.900
你说改变哈希有强制刷新吗

01:12:15.900 --> 01:12:16.900
有强制刷新吗

01:12:16.900 --> 01:12:17.900
对 没有

01:12:17.900 --> 01:12:18.900
还是有这个

01:12:18.900 --> 01:12:19.900
Guess Use Confirmation

01:12:19.900 --> 01:12:20.900
还是有这个

01:12:21.900 --> 01:12:22.900
那么中间这个

01:12:22.900 --> 01:12:23.900
其他的没啥的

01:12:24.900 --> 01:12:25.900
我们再创建一个

01:12:26.900 --> 01:12:27.900
复制一下

01:12:29.900 --> 01:12:30.900
这个是Create

01:12:30.900 --> 01:12:32.900
哈希Kistory

01:12:37.880 --> 01:12:38.880
然后我们看一下这里

01:12:40.880 --> 01:12:41.880
哈希Type

01:12:44.880 --> 01:12:45.880
哈希Type

01:12:45.880 --> 01:12:46.880
看一下这个东西是什么

01:12:46.880 --> 01:12:47.880
它有三个曲子

01:12:48.880 --> 01:12:49.880
我们这里说一下

01:12:49.880 --> 01:12:50.880
它的配置对象

01:12:51.880 --> 01:12:53.880
因为得到的Kistory对象是一样的

01:12:53.880 --> 01:12:55.880
主要是说配置对象不一样

01:12:56.880 --> 01:12:57.880
哈希

01:12:58.880 --> 01:12:59.880
哈希Type

01:13:00.880 --> 01:13:02.880
这个它有三个曲子

01:13:03.880 --> 01:13:04.880
第一个曲子呢

01:13:04.880 --> 01:13:05.880
我都一点忘了

01:13:05.880 --> 01:13:06.880
这个曲子呢

01:13:06.880 --> 01:13:07.880
哈希办

01:13:07.880 --> 01:13:08.880
No Snush Snush

01:13:10.880 --> 01:13:11.880
哈希办

01:13:12.880 --> 01:13:14.880
No Snush Snush

01:13:14.880 --> 01:13:15.880
这三个曲子

01:13:15.880 --> 01:13:16.880
那么这三个曲子

01:13:16.880 --> 01:13:17.880
分别代表什么意思呢

01:13:18.880 --> 01:13:19.880
分别代表什么意思

01:13:20.880 --> 01:13:21.880
它是这样子

01:13:21.880 --> 01:13:22.880
它的默认值呢

01:13:22.880 --> 01:13:23.880
是Snush

01:13:24.880 --> 01:13:25.880
这个东西指的是什么呢

01:13:25.880 --> 01:13:27.880
这个哈希Type指的是

01:13:27.880 --> 01:13:28.880
就是哈希不是

01:13:28.880 --> 01:13:29.880
锦号后面的东西吗

01:13:29.880 --> 01:13:30.880
就是锦号后

01:13:30.880 --> 01:13:31.880
然后

01:13:33.880 --> 01:13:36.880
给定的路径格式

01:13:36.880 --> 01:13:37.880
路径格式

01:13:37.880 --> 01:13:38.880
它有三种标准

01:13:38.880 --> 01:13:40.880
第一种呢是已经被弃用了

01:13:40.880 --> 01:13:42.880
已经被谷歌弃用

01:13:42.880 --> 01:13:45.880
被Crown弃用

01:13:45.880 --> 01:13:47.880
那么它的格式是这样子

01:13:47.880 --> 01:13:49.880
锦号后面要给一个感叹号

01:13:49.880 --> 01:13:51.880
感叹号后面要给路径

01:13:51.880 --> 01:13:52.880
跟路径

01:13:53.880 --> 01:13:54.880
它是这样子做的

01:13:54.880 --> 01:13:55.880
已经被弃用了

01:13:55.880 --> 01:13:56.880
第二种方式呢

01:13:56.880 --> 01:13:58.880
是No Snush

01:13:58.880 --> 01:13:59.880
它是什么意思呢

01:13:59.880 --> 01:14:00.880
它是指的是

01:14:00.880 --> 01:14:02.880
锦号后面没有鞋杠

01:14:02.880 --> 01:14:04.880
就跟路径没有什么鞋杠

01:14:04.880 --> 01:14:06.880
跟路径没有从鞋杠开头

01:14:06.880 --> 01:14:08.880
就是路径

01:14:08.880 --> 01:14:09.880
直接写路径

01:14:09.880 --> 01:14:10.880
鞋杠

01:14:11.880 --> 01:14:12.880
这里就个例子嘛

01:14:12.880 --> 01:14:13.880
A A B C

01:14:13.880 --> 01:14:14.880
就这种格式

01:14:14.880 --> 01:14:15.880
好 Snush呢

01:14:16.880 --> 01:14:18.880
默认值就是这种格式

01:14:18.880 --> 01:14:19.880
就这种格式

01:14:19.880 --> 01:14:20.880
就是格式不一样

01:14:20.880 --> 01:14:21.880
就是格式不一样

01:14:21.880 --> 01:14:22.880
其他都没啥

01:14:22.880 --> 01:14:23.880
好 咱们来看一下吧

01:14:24.880 --> 01:14:25.880
创建一个Snush的

01:14:26.880 --> 01:14:27.880
GuessConUser

01:14:27.880 --> 01:14:28.880
这个东西

01:14:29.880 --> 01:14:30.880
扔着吧

01:14:30.880 --> 01:14:31.880
也无所谓

01:14:31.880 --> 01:14:32.880
扔着吧

01:14:32.880 --> 01:14:33.880
你看其他地方变没

01:14:33.880 --> 01:14:34.880
是不是它啥都没变

01:14:34.880 --> 01:14:35.880
啥都没变

01:14:35.880 --> 01:14:36.880
只是把它变成哈希了

01:14:36.880 --> 01:14:37.880
看到没

01:14:37.880 --> 01:14:38.880
只是把它变成哈希了

01:14:38.880 --> 01:14:39.880
好 咱们呢

01:14:39.880 --> 01:14:40.880
这里看一下吧

01:14:42.880 --> 01:14:43.880
那么现在呢

01:14:43.880 --> 01:14:45.880
我们调用这个H PUSH

01:14:45.880 --> 01:14:46.880
鞋杠123

01:14:49.880 --> 01:14:50.880
我的H呢

01:14:50.880 --> 01:14:51.880
被保存吗

01:14:51.880 --> 01:14:52.880
保存一下

01:14:53.880 --> 01:14:54.880
好 你看一下

01:14:54.880 --> 01:14:55.880
是不是还是有提示

01:14:55.880 --> 01:14:56.880
对吧 还是有提示

01:14:56.880 --> 01:14:57.880
好 点确定

01:14:57.880 --> 01:14:58.880
你看一下

01:14:58.880 --> 01:14:59.880
是不是在这了

01:14:59.880 --> 01:15:00.880
对吧

01:15:00.880 --> 01:15:01.880
又是

01:15:01.880 --> 01:15:02.880
是不一样的

01:15:02.880 --> 01:15:03.880
有啥区别呢

01:15:03.880 --> 01:15:04.880
你告诉我有啥区别呢

01:15:04.880 --> 01:15:05.880
是不是一样的

01:15:05.880 --> 01:15:06.880
对不对

01:15:06.880 --> 01:15:07.880
是不是一样的

01:15:07.880 --> 01:15:08.880
好

01:15:08.880 --> 01:15:09.880
而且呢

01:15:09.880 --> 01:15:10.880
你使用哈希History之后

01:15:10.880 --> 01:15:11.880
你会发现有一个效果就是

01:15:11.880 --> 01:15:12.880
你如果没有加哈希

01:15:12.880 --> 01:15:14.880
它会给你默认加上一个哈希

01:15:14.880 --> 01:15:16.880
默认给你加上一个哈希

01:15:16.880 --> 01:15:17.880
看到没

01:15:17.880 --> 01:15:18.880
看到地址

01:15:18.880 --> 01:15:19.880
看到没 没问题吧

01:15:19.880 --> 01:15:20.880
就这么个意思

01:15:20.880 --> 01:15:21.880
就这么个意思

01:15:22.880 --> 01:15:23.880
我们把BassName取掉吧

01:15:23.880 --> 01:15:24.880
你看其他都是一样的

01:15:24.880 --> 01:15:26.880
其他都完全一样的

01:15:26.880 --> 01:15:27.880
比方说我们这里

01:15:27.880 --> 01:15:28.880
输出这个H

01:15:28.880 --> 01:15:29.880
你看还是有pop

01:15:29.880 --> 01:15:30.880
那些 铺齐

01:15:30.880 --> 01:15:31.880
是不是完全一样的

01:15:31.880 --> 01:15:33.880
比方说H铺齐

01:15:33.880 --> 01:15:34.880
鞋杠123

01:15:35.880 --> 01:15:36.880
确定

01:15:36.880 --> 01:15:37.880
然后再看H

01:15:38.880 --> 01:15:39.880
H

01:15:39.880 --> 01:15:40.880
是不是一样的

01:15:40.880 --> 01:15:41.880
又啥区别呢

01:15:41.880 --> 01:15:42.880
是不是没有区别

01:15:42.880 --> 01:15:43.880
对不对

01:15:43.880 --> 01:15:44.880
没有区别

01:15:44.880 --> 01:15:45.880
好

01:15:45.880 --> 01:15:46.880
然后我们看一下

01:15:46.880 --> 01:15:47.880
它里面的location

01:15:47.880 --> 01:15:48.880
你看一下location

01:15:48.880 --> 01:15:49.880
是不是也没有区别

01:15:49.880 --> 01:15:50.880
对吧

01:15:50.880 --> 01:15:51.880
也没有区别

01:15:51.880 --> 01:15:52.880
它location里面

01:15:52.880 --> 01:15:54.880
它反映的不是真实的URLD

01:15:54.880 --> 01:15:55.880
反映的是

01:15:55.880 --> 01:15:56.880
以前的这种模式下

01:15:56.880 --> 01:15:58.880
它多运的URLD

01:15:58.880 --> 01:15:59.880
比方说我们现在是

01:15:59.880 --> 01:16:00.880
Harsie模式

01:16:00.880 --> 01:16:01.880
Harsie History

01:16:01.880 --> 01:16:03.880
那么它就只看这一部分

01:16:03.880 --> 01:16:04.880
好 那么这一部分

01:16:04.880 --> 01:16:05.880
那location里面

01:16:05.880 --> 01:16:06.880
不是有个Harsie吗

01:16:06.880 --> 01:16:07.880
对不对

01:16:07.880 --> 01:16:08.880
这一部分的Harsie怎么办呢

01:16:08.880 --> 01:16:09.880
你看着

01:16:09.880 --> 01:16:10.880
这部分的Harsie怎么办

01:16:10.880 --> 01:16:14.320
后面再加个键号

01:16:14.320 --> 01:16:15.320
然后再来看

01:16:19.330 --> 01:16:20.330
location

01:16:20.330 --> 01:16:21.330
现在是不是有Harsie了

01:16:21.330 --> 01:16:22.330
对吧

01:16:22.330 --> 01:16:23.330
Harsie后面再加Harsie

01:16:23.330 --> 01:16:24.330
它会认为

01:16:24.330 --> 01:16:25.330
这后面全是一个Harsie

01:16:25.330 --> 01:16:26.330
但是

01:16:26.330 --> 01:16:27.330
这个东西

01:16:27.330 --> 01:16:28.330
会经过它来分析

01:16:28.330 --> 01:16:29.330
分析出来过后

01:16:29.330 --> 01:16:31.330
它认为这个斜杠1230路径

01:16:31.330 --> 01:16:32.330
在后面的键号

01:16:32.330 --> 01:16:33.330
才是Harsie

01:16:33.330 --> 01:16:34.330
对吧

01:16:34.330 --> 01:16:35.330
它会给你分析出来

01:16:35.330 --> 01:16:36.330
所以说

01:16:36.330 --> 01:16:37.330
你会发现这个History对象

01:16:37.330 --> 01:16:39.330
它完全是统一的

01:16:39.330 --> 01:16:40.330
不管你是什么

01:16:40.330 --> 01:16:42.330
History API

01:16:42.330 --> 01:16:43.330
还是那个

01:16:43.330 --> 01:16:44.330
Harsie API

01:16:44.330 --> 01:16:46.330
它都是统一的

01:16:46.330 --> 01:16:47.330
对吧

01:16:47.330 --> 01:16:48.330
都是统一的

01:16:48.330 --> 01:16:49.330
好 那么咱们再来看一个

01:16:49.330 --> 01:16:50.330
再来看一个

01:16:50.330 --> 01:16:51.330
再来看一个就是那个了

01:16:51.330 --> 01:16:52.330
Memory

01:16:53.330 --> 01:16:54.330
Memory History

01:16:55.330 --> 01:16:56.330
了解

01:16:56.330 --> 01:16:57.330
再看这个

01:16:57.330 --> 01:17:04.140
这个是Memory History

01:17:04.140 --> 01:17:05.140
看一下这个

01:17:06.140 --> 01:17:07.140
咱们复制一下吧

01:17:11.410 --> 01:17:12.410
然后呢 这边

01:17:12.410 --> 01:17:13.410
这边来

01:17:13.410 --> 01:17:14.410
我们看一下那个

01:17:15.410 --> 01:17:17.410
Hist Memory

01:17:17.410 --> 01:17:18.410
Memory

01:17:18.410 --> 01:17:19.410
把这个复制一下

01:17:20.410 --> 01:17:23.620
放过来

01:17:24.620 --> 01:17:26.620
好 这里几个笔记

01:17:26.620 --> 01:17:27.620
Memory的

01:17:27.620 --> 01:17:29.620
它就跟地址哪没有任何关系了

01:17:29.620 --> 01:17:31.620
它一般用于手机

01:17:31.620 --> 01:17:33.620
一般用于

01:17:35.620 --> 01:17:37.620
一般用于没有

01:17:38.620 --> 01:17:39.620
地址的

01:17:40.620 --> 01:17:41.620
环境

01:17:41.620 --> 01:17:42.620
没有地址栏的环境

01:17:43.620 --> 01:17:44.620
那么这种环境下面呢

01:17:44.620 --> 01:17:46.620
你就得使用内存

01:17:46.620 --> 01:17:47.620
内存History的

01:17:47.620 --> 01:17:48.620
内存路由了

01:17:48.620 --> 01:17:49.620
内存路由里边

01:17:49.620 --> 01:17:50.620
它的配置对象

01:17:51.620 --> 01:17:52.620
配置对象

01:17:52.620 --> 01:17:53.620
我们来看一下

01:17:53.620 --> 01:17:54.620
一个个来

01:17:54.620 --> 01:17:56.620
首先是这个

01:17:56.620 --> 01:17:58.620
这个Lens的它有key

01:17:58.620 --> 01:17:59.620
有key

01:17:59.620 --> 01:18:00.620
这个没什么好说的

01:18:00.620 --> 01:18:01.620
Lens都是有key的

01:18:01.620 --> 01:18:02.620
那么这里

01:18:03.620 --> 01:18:05.620
这个key不用看了

01:18:05.620 --> 01:18:07.620
这个get有的confirmation

01:18:07.620 --> 01:18:08.620
没什么好看的

01:18:08.620 --> 01:18:09.620
都是一样的功能

01:18:09.620 --> 01:18:10.620
关键是看这个

01:18:11.620 --> 01:18:13.620
Initial Entry是什么意思呢

01:18:13.620 --> 01:18:15.620
由于它是在内存里边

01:18:15.620 --> 01:18:16.620
也就是说它控制的是

01:18:16.620 --> 01:18:17.620
内存里边的一个数组

01:18:17.620 --> 01:18:19.620
控制的是这个数组

01:18:19.620 --> 01:18:21.620
那么这个数组的初始值是啥

01:18:21.620 --> 01:18:22.620
你给它

01:18:22.620 --> 01:18:23.620
就是这么个意思

01:18:23.620 --> 01:18:25.620
数组的初始值是给什么

01:18:25.620 --> 01:18:26.620
比方说数组的初始值

01:18:26.620 --> 01:18:27.620
有这么两个

01:18:27.620 --> 01:18:28.620
写杠ABC

01:18:28.620 --> 01:18:29.620
有这两个

01:18:30.620 --> 01:18:31.620
看一下吧

01:18:33.620 --> 01:18:34.620
ABC

01:18:34.620 --> 01:18:35.620
你看

01:18:37.620 --> 01:18:38.620
Memory History

01:18:38.620 --> 01:18:40.620
这里还要换一下

01:18:40.620 --> 01:18:42.620
Create Memory History

01:18:42.620 --> 01:18:46.600
看一下

01:18:47.600 --> 01:18:48.600
把它去掉

01:18:51.290 --> 01:18:52.290
ABC

01:18:52.290 --> 01:18:53.290
你看看Lens是不是2

01:18:53.290 --> 01:18:54.290
它就不管什么地址哪了

01:18:54.290 --> 01:18:55.290
跟地址就没有什么关系了

01:18:55.290 --> 01:18:56.290
是不是2

01:18:56.290 --> 01:18:57.290
对吧

01:18:58.290 --> 01:18:59.290
然后我们现在挑转

01:18:59.290 --> 01:19:00.290
挑转回去

01:19:00.290 --> 01:19:01.290
比方说GoBack

01:19:01.290 --> 01:19:02.290
GoBack回去的话

01:19:02.290 --> 01:19:03.290
你看看这个数组

01:19:03.290 --> 01:19:04.290
数组是不是

01:19:05.290 --> 01:19:06.290
数组是不是

01:19:06.290 --> 01:19:07.290
还有下面那个属性

01:19:07.290 --> 01:19:08.290
还没讲

01:19:08.290 --> 01:19:09.290
下面那个属性

01:19:09.290 --> 01:19:11.290
下面那个属性表示的是

01:19:11.290 --> 01:19:12.290
初始的时候

01:19:13.290 --> 01:19:16.290
默认指针

01:19:17.290 --> 01:19:19.290
指向的数组下标

01:19:20.290 --> 01:19:22.290
那么目前它写的是0对吧

01:19:22.290 --> 01:19:23.290
那0的话指向的是谁

01:19:23.290 --> 01:19:24.290
指向的是这个对不对

01:19:24.290 --> 01:19:25.290
那你可以把它变成1

01:19:25.290 --> 01:19:26.290
依旧指向的是这个

01:19:27.290 --> 01:19:28.290
指向的是这个

01:19:28.290 --> 01:19:29.290
那么上面这个东西

01:19:29.290 --> 01:19:30.290
表示的是什么

01:19:30.290 --> 01:19:31.290
表示

01:19:32.290 --> 01:19:33.290
初始

01:19:33.290 --> 01:19:34.290
数组

01:19:34.290 --> 01:19:35.290
内容

01:19:35.290 --> 01:19:36.290
就是它用数组来表示

01:19:36.290 --> 01:19:37.290
一个就是地址

01:19:37.290 --> 01:19:39.290
初始的数组就是这两个

01:19:39.290 --> 01:19:40.290
这两个地址

01:19:40.290 --> 01:19:41.290
指针指向的是1

01:19:41.290 --> 01:19:43.290
指针指向的是1

01:19:43.290 --> 01:19:44.290
就这么个意思

01:19:44.290 --> 01:19:45.290
那么配置对象的话

01:19:45.290 --> 01:19:46.290
你就想

01:19:46.290 --> 01:19:47.290
想见

01:19:47.290 --> 01:19:48.290
想琴

01:19:48.290 --> 01:19:49.290
想见

01:19:49.290 --> 01:19:50.290
那个

01:19:52.290 --> 01:19:53.290
这个解释

01:19:53.290 --> 01:19:54.290
点解释

01:19:57.050 --> 01:19:58.050
再看一下

01:19:58.050 --> 01:20:00.050
那么目前它的地址是咋了

01:20:00.050 --> 01:20:01.050
目前的地址

01:20:01.050 --> 01:20:02.050
我们看一下H

01:20:02.050 --> 01:20:04.050
目前的地址是咋了

01:20:05.050 --> 01:20:06.050
是不是ABC

01:20:06.050 --> 01:20:07.050
ABC

01:20:07.050 --> 01:20:08.050
没问题吧

01:20:08.050 --> 01:20:09.050
是不是这个

01:20:10.050 --> 01:20:11.050
目前的地址就是

01:20:11.050 --> 01:20:12.050
写针ABC

01:20:12.050 --> 01:20:13.050
那么如果说

01:20:13.050 --> 01:20:14.050
这里写的是0的话

01:20:14.050 --> 01:20:15.050
初始值

01:20:15.050 --> 01:20:16.050
初始值写的是0的话

01:20:16.050 --> 01:20:18.050
那么H你看一下

01:20:19.050 --> 01:20:20.050
目前的

01:20:21.050 --> 01:20:23.050
目前是不是写针

01:20:23.050 --> 01:20:24.050
对不对

01:20:24.050 --> 01:20:25.050
好那么现在

01:20:25.050 --> 01:20:26.050
指针指向的是0

01:20:26.050 --> 01:20:27.050
指针指向的是0

01:20:27.050 --> 01:20:29.050
那就相当于是咋了

01:20:29.050 --> 01:20:30.050
就相当于是这个

01:20:31.050 --> 01:20:33.050
上面这个可以去掉了

01:20:35.050 --> 01:20:37.050
指针指向的是ABC

01:20:37.050 --> 01:20:38.050
这里是写针

01:20:38.050 --> 01:20:40.050
那么目前指针指向的是它

01:20:40.050 --> 01:20:41.050
那它的地址是不是写针

01:20:41.050 --> 01:20:42.050
对吧

01:20:42.050 --> 01:20:43.050
写针

01:20:43.050 --> 01:20:44.050
那么我们现在

01:20:44.050 --> 01:20:45.050
是不是可以前进

01:20:45.050 --> 01:20:46.050
是不是可以前进

01:20:46.050 --> 01:20:48.050
咱们前进也试一下

01:20:49.050 --> 01:20:50.050
前进

01:20:50.050 --> 01:20:51.050
Go for World

01:20:52.050 --> 01:20:53.050
前进看一下

01:20:53.050 --> 01:20:54.050
好前进之后咱们

01:20:54.050 --> 01:20:56.050
一看地址栏有没有变

01:20:56.050 --> 01:20:57.050
不要去看地址栏了

01:20:57.050 --> 01:20:58.050
不要盯着地址栏看了

01:20:58.050 --> 01:21:00.050
地址栏它已经没有任何关系了

01:21:00.050 --> 01:21:02.050
它已经完全抛弃地址栏了

01:21:02.050 --> 01:21:04.050
它只在内存里面进行路由

01:21:04.050 --> 01:21:06.050
那时候一面为什么没变化

01:21:06.050 --> 01:21:08.050
因为我们现在还没有写组建

01:21:08.050 --> 01:21:10.050
还没有写什么路由组建那些东西

01:21:10.050 --> 01:21:12.050
我们只是在控制个History

01:21:12.050 --> 01:21:14.050
它只是控制一个数组里面的变化

01:21:14.050 --> 01:21:16.050
咱打印这个H对象

01:21:16.050 --> 01:21:17.050
你看一下现在都可以写

01:21:17.050 --> 01:21:18.050
就变到ABC了

01:21:18.050 --> 01:21:19.050
为什么

01:21:19.050 --> 01:21:20.050
因为它现在前进了一个

01:21:20.050 --> 01:21:21.050
对吧

01:21:21.050 --> 01:21:22.050
前进了一个

01:21:22.050 --> 01:21:23.050
好同样的道理

01:21:23.050 --> 01:21:24.050
那现在是不是可以PUSH

01:21:24.050 --> 01:21:26.050
H点PUSH

01:21:26.050 --> 01:21:28.050
就是在维护一个数组

01:21:28.050 --> 01:21:29.050
比方说123

01:21:29.050 --> 01:21:31.050
PUSH过后一看H

01:21:32.050 --> 01:21:34.050
那么现在location是PASSNAME

01:21:34.050 --> 01:21:35.050
为123

01:21:35.050 --> 01:21:36.050
就这么个意思

01:21:36.050 --> 01:21:38.050
它跟地址就没有任何关系了

01:21:38.050 --> 01:21:40.050
跟地址就没有任何关系了

01:21:40.050 --> 01:21:41.050
那么这里就是123

01:21:41.050 --> 01:21:42.050
它就跳到这了

01:21:42.050 --> 01:21:45.050
那如果说万一你们以后

01:21:45.050 --> 01:21:47.050
做一个网站的时候

01:21:47.050 --> 01:21:50.050
这个网站的地址不要发生任何变化

01:21:50.050 --> 01:21:51.050
那有很多页面

01:21:51.050 --> 01:21:52.050
那怎么做呢

01:21:52.050 --> 01:21:53.050
就可以用MemoryHistory

01:21:53.050 --> 01:21:55.050
当然这种场景很少

01:21:55.050 --> 01:21:56.050
不太可能遇到

01:21:56.050 --> 01:21:58.050
干嘛不要变地址呢

01:21:58.050 --> 01:22:00.050
更多的时候是在手机应用里边

01:22:00.050 --> 01:22:01.050
应用里边还没地址

01:22:01.050 --> 01:22:03.050
所以说得用MemoryHistory

01:22:03.050 --> 01:22:04.050
所以这个东西是很通用的

01:22:04.050 --> 01:22:06.050
这个History这个组件

01:22:06.050 --> 01:22:08.050
这个第三方库是很通用的

01:22:08.050 --> 01:22:10.050
好了这一刻就讲完了

01:22:10.050 --> 01:22:11.050
我们这一刻学习了啥呢

01:22:11.050 --> 01:22:14.050
主要是学习了这个History对象

01:22:14.050 --> 01:22:16.050
就是你拿到History对象过后

01:22:16.050 --> 01:22:17.050
你可以做哪些操作

01:22:17.050 --> 01:22:18.050
有哪些信息

01:22:18.050 --> 01:22:20.050
这是我们这一刻最核心的东西

01:22:20.050 --> 01:22:21.050
还有这个Leason

01:22:21.050 --> 01:22:22.050
函数非常重要

01:22:22.050 --> 01:22:24.050
然后还学习了

01:22:24.050 --> 01:22:25.050
如何来创建History对象

01:22:25.050 --> 01:22:27.050
你通过不同的方式

01:22:27.050 --> 01:22:29.050
创建的History对象

01:22:29.050 --> 01:22:31.050
它的功能是不太一样的

01:22:31.050 --> 01:22:33.050
是不一样的

01:22:33.050 --> 01:22:35.050
但是它的API

01:22:35.050 --> 01:22:37.050
调用接口都是完全一样的

01:22:37.050 --> 01:22:39.050
好那么这几课就讲完了

01:22:39.050 --> 01:22:41.050
这一课讲完了过后呢

01:22:41.050 --> 01:22:43.050
我们对我们后边就是完成

01:22:43.050 --> 01:22:45.050
路由组件啊那些

01:22:45.050 --> 01:22:47.050
商项文家这些都至关重要

01:22:47.050 --> 01:22:49.050
有了这几课的支持过后呢

01:22:49.050 --> 01:22:50.050
下几课

01:22:50.050 --> 01:22:51.050
下几课

01:22:51.050 --> 01:22:53.050
咱们还要还没有玩这个History

01:22:53.050 --> 01:22:54.050
我们还要研究一下

01:22:54.050 --> 01:22:56.050
因为我们要讲原码嘛

01:22:56.050 --> 01:22:58.050
最好深入的去研究

01:22:58.050 --> 01:22:59.050
browser history

01:22:59.050 --> 01:23:01.050
它是怎么来做出来的

01:23:01.050 --> 01:23:03.050
就这个函数它到底是怎么写的

01:23:03.050 --> 01:23:04.050
我们要自己写一个

01:23:04.050 --> 01:23:06.050
create a browser history

01:23:06.050 --> 01:23:08.050
自己写一个这么一个函数

01:23:08.050 --> 01:23:09.050
通过这个函数呢

01:23:09.050 --> 01:23:11.050
我们可以完成类似的功能

01:23:11.050 --> 01:23:13.050
不能说完全一模一样

01:23:13.050 --> 01:23:14.050
也不能说完全一模一样

01:23:14.050 --> 01:23:16.050
当然关于一模一样可以

01:23:16.050 --> 01:23:17.050
不是说做不到啊

01:23:17.050 --> 01:23:19.050
是需要花费的精力太多了

01:23:19.050 --> 01:23:21.050
就是说我们

01:23:21.050 --> 01:23:23.050
做一个最核心的功能出来

01:23:23.050 --> 01:23:24.050
做一个最核心的功能出来

01:23:24.050 --> 01:23:26.050
那么我们只做这一个

01:23:26.050 --> 01:23:27.050
memory history

01:23:27.050 --> 01:23:29.050
如果有兴趣的话

01:23:29.050 --> 01:23:30.050
你可以自行去完成

01:23:30.050 --> 01:23:32.050
还可以去抽离一些重复代嘛

01:23:32.050 --> 01:23:33.050
好吧

01:23:33.050 --> 01:23:35.050
我们下几课来完成create a browser history

