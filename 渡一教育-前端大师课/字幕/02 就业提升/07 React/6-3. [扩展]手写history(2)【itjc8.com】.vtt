WEBVTT

00:01.390 --> 00:06.390
上约课讲那个铺锡 讲那个就是铺锡这个方法

00:06.390 --> 00:10.390
还有那么一点点小问题啊 咱们把它修正一下

00:10.390 --> 00:14.390
什么小问题呢 就是说我们这里呢 改变了地址对吧

00:14.390 --> 00:17.390
我们通过这个东西改变了地址 但是呢

00:17.390 --> 00:22.390
这个history对象里边的这个location属性啊 它没有变化

00:22.390 --> 00:24.390
因为这个属性呢 还是读的是之前的对吧

00:24.390 --> 00:27.390
我们一开始的时候创建了一个location

00:27.390 --> 00:29.390
那么我们后边地址变化了之后呢

00:29.390 --> 00:31.390
我们再重新去创建一个location

00:31.390 --> 00:34.390
所以说呢 我们这里呢 你看一下吧

00:34.390 --> 00:38.390
我们比方说啊 这里我们调用啊

00:38.390 --> 00:42.390
这个myhistory push 比方说

00:42.390 --> 00:44.390
给它abcd嘛

00:44.390 --> 00:47.390
State就随便嘛

00:47.390 --> 00:50.390
好 一回车 你看一下

00:50.390 --> 00:52.390
地址呢 已经跳到了这儿了 是吧

00:52.390 --> 00:55.390
但是呢 这个myhistory里边的location对象啊

00:55.390 --> 00:58.390
它还读的是之前的 还没有 还读的是之前的

00:58.390 --> 01:01.390
所以说呢 这里呢 有一个地方大家注意一下啊

01:01.390 --> 01:05.390
就是说history呢 不仅要改变action 是不是还要改变啊

01:05.390 --> 01:09.390
在这个 在我们完成地址挑转之后

01:09.390 --> 01:13.390
完成了地址挑转之后 是不是还要改变啊

01:13.390 --> 01:16.390
改变什么location 对不对 是吧 改变location

01:16.390 --> 01:19.390
好 那么这里呢 我们可以使用啊

01:19.390 --> 01:22.390
history 第二location

01:22.390 --> 01:24.390
是不是要重新来调用四个函数 对吧

01:24.390 --> 01:26.390
create location

01:26.390 --> 01:28.390
这里呢 把这个best name 传进去

01:28.390 --> 01:31.390
这样子呢 location 它就会跟着变化了

01:31.390 --> 01:34.390
保证啊 你看一下吧

01:34.390 --> 01:37.390
好 这里呢 我们写这么一个 比方说啊

01:37.390 --> 01:41.390
那个myhistory push abcd1

01:41.390 --> 01:42.390
加个e

01:42.390 --> 01:45.390
好 然后呢 我们看一下myhistory location

01:45.390 --> 01:48.390
你看一下 是不是重新得到了 得到了新的数据了

01:48.390 --> 01:51.390
对不对 就这么个意思啊 就这么个意思

01:51.390 --> 01:54.390
这里呢 上一课呢 怎么写到了这个 push 这个方法

01:54.390 --> 01:57.390
好 接着来啊 那么现在是不是get replaced

01:57.390 --> 02:00.390
对吧 咱们复制一下就差不多了

02:00.390 --> 02:05.390
replace 改一下啊 replace

02:05.390 --> 02:08.390
啊 因为replace的调用方式呢 跟那个push

02:08.390 --> 02:11.390
是完全一样的啊 也是给一个pass 给一个state

02:11.390 --> 02:13.390
对吧 只是呢 它是个替换

02:13.390 --> 02:17.390
它不是往占里面添加一个替换当前地址

02:17.390 --> 02:19.390
当前地址 所以我们这里的睡眠

02:19.390 --> 02:22.390
push 加了 然后呢 replace 也加进去

02:22.390 --> 02:23.390
replace 也加进去

02:24.390 --> 02:26.390
好 那么这个replace呢 要改动哪些地方了

02:26.390 --> 02:27.390
首先那个action 要变 对吧

02:27.390 --> 02:33.390
action 呢 我们把它变成那个replace

02:33.390 --> 02:34.390
变成replace

02:34.390 --> 02:37.390
然后呢 这个push state呢

02:37.390 --> 02:41.390
就不是push state了 就是什么replace state

02:41.390 --> 02:43.390
变成这个 就是没有改动的多少东西

02:43.390 --> 02:45.390
对吧 没有改动的多少东西

02:45.390 --> 02:48.390
replace state 也是要重新创建一个keyz

02:48.390 --> 02:50.390
keyz 肯定也得重新创建

02:50.390 --> 02:52.390
然后state 加进去

02:53.390 --> 02:55.390
其他的还有啥呢 还有啥呢

02:55.390 --> 02:57.390
改变location 还得改变吧 对吧

02:57.390 --> 02:58.390
location 还得改变

02:58.390 --> 03:00.390
那该是强制刷新的时候 还得强制刷新

03:00.390 --> 03:02.390
比方说 咱们看一下吧

03:02.390 --> 03:05.390
我们倒退两个 到这个 到这个页面

03:05.390 --> 03:07.390
789这个页面 比方说

03:07.390 --> 03:10.390
咱们myhistory replace

03:10.390 --> 03:12.390
把它变成abc

03:13.390 --> 03:15.390
变成abc

03:15.390 --> 03:18.390
数据呢 就随便写个数据嘛 123

03:19.390 --> 03:21.390
看一下myhistory

03:21.390 --> 03:24.390
你看一下 它已经变成replace了 对吧

03:24.390 --> 03:25.390
变成replace了

03:25.390 --> 03:26.390
然后我们再看一下location

03:26.390 --> 03:28.390
它里边的location对象

03:28.390 --> 03:30.390
变成abc了 对不对

03:30.390 --> 03:32.390
而是一样的 是一样的

03:32.390 --> 03:35.390
那如果说 有强制刷新呢

03:35.390 --> 03:37.390
如果说有强制刷新呢 看一下吧

03:39.390 --> 03:42.390
如果说有强制刷新 比方abcde

03:44.390 --> 03:47.390
然后再加个fg 回车

03:47.390 --> 03:48.390
强制刷新了 强制刷新

03:48.390 --> 03:50.390
我们来看一下数据这么准确

03:51.390 --> 03:53.390
所以一样的 对吧

03:53.390 --> 03:55.390
一样的 没问题

03:55.390 --> 03:57.390
所以说 this replace

03:57.390 --> 03:59.390
也非常非常简单

03:59.390 --> 04:01.390
基本上代码都是差不多的

04:01.390 --> 04:03.390
基本上都是一样的

04:03.390 --> 04:04.390
那么我们仔细观察一下

04:04.390 --> 04:05.390
这两块代码的话

04:05.390 --> 04:09.390
你会发现有很多相似的地方

04:09.390 --> 04:11.390
有很多相似的地方 对吧

04:11.390 --> 04:14.390
所以说呢 我们要不然

04:16.390 --> 04:18.390
要不然提取一下

04:19.390 --> 04:21.390
要不然提取一下吧

04:21.390 --> 04:23.390
提取一下一个代码

04:24.390 --> 04:27.390
这样吧 这样子

04:27.390 --> 04:30.390
咱们在这里写这么一个函数

04:30.390 --> 04:32.390
就在这里吧 写这么一个函数

04:33.390 --> 04:35.390
叫做change

04:35.390 --> 04:37.390
change page

04:37.390 --> 04:39.390
你给我传一个pass 给我传一个state

04:39.390 --> 04:41.390
然后还给我传一个

04:41.390 --> 04:42.390
你看下有什么区别

04:42.390 --> 04:44.390
是不是x型不一样 对吧

04:44.390 --> 04:45.390
你给我传一个x型

04:45.390 --> 04:46.390
x型给我传进来

04:47.390 --> 04:48.390
x型不一样

04:48.390 --> 04:50.390
还有什么区别呢

04:50.390 --> 04:52.390
还有就是 你看下还有什么区别

04:52.390 --> 04:54.390
还有就是一个

04:54.390 --> 04:56.390
一个是用的是push state

04:56.390 --> 04:58.390
一个是用的是replace state

04:58.390 --> 05:00.390
对吧 就这个区别

05:00.390 --> 05:02.390
那么这里传一个

05:04.390 --> 05:05.390
咱们去吧

05:05.390 --> 05:07.390
我写个函数了

05:08.390 --> 05:10.390
is push

05:14.660 --> 05:16.660
是不是添加

05:16.660 --> 05:17.660
那就不要一个型了

05:17.660 --> 05:18.660
我自己给你设置

05:18.660 --> 05:19.660
change page

05:19.660 --> 05:20.660
我自己来设置

05:20.660 --> 05:21.660
不用你管了

05:22.660 --> 05:24.660
那么现在这个change page里

05:24.660 --> 05:26.660
我们把这个事情做完了

05:26.660 --> 05:27.660
就给它做完了

05:27.660 --> 05:28.660
那么这里首先就把它复制一下

05:28.660 --> 05:30.660
稍微改动一下就行了

05:30.660 --> 05:31.660
那么这个x型

05:31.660 --> 05:32.660
是不是要判断一下

05:32.660 --> 05:34.660
这里定一个x型

05:34.660 --> 05:36.660
x型的话 默认为我们把它用push

05:36.660 --> 05:37.660
默认为push

05:37.660 --> 05:40.660
如果说你不是

05:41.660 --> 05:43.660
你不是push的话

05:43.660 --> 05:44.660
你不是push的话

05:44.660 --> 05:46.660
咱们x型把它变成replace

05:48.660 --> 05:50.660
那么这里直接把x型放过来

05:50.660 --> 05:51.660
对吧 改变x型

05:51.660 --> 05:53.660
那么这里replace state

05:53.660 --> 05:54.660
判断一下

05:54.660 --> 05:56.660
如果说你是

05:56.660 --> 05:58.660
你是

05:58.660 --> 06:00.660
is push

06:00.660 --> 06:02.660
那么我们这里

06:02.660 --> 06:04.660
使用的是push state

06:04.660 --> 06:06.660
使用的是push state

06:06.660 --> 06:08.660
对不对

06:08.660 --> 06:09.660
要是

06:09.660 --> 06:11.660
如果说你是replace的话

06:11.660 --> 06:12.660
我们就使用这个

06:12.660 --> 06:13.660
判断一下

06:13.660 --> 06:14.660
就这个地方有点差异

06:14.660 --> 06:15.660
其他地方是不是一样的

06:15.660 --> 06:16.660
改变location

06:16.660 --> 06:18.660
然后强制刷新

06:18.660 --> 06:20.660
这些东西是不是一样的

06:20.660 --> 06:22.660
咱们把它写到这个函数里面

06:22.660 --> 06:23.660
写到这个函数里面

06:23.660 --> 06:24.660
change page

06:24.660 --> 06:25.660
那么这样子一来

06:25.660 --> 06:26.660
我们在push里面

06:26.660 --> 06:28.660
是不是调整个change page

06:28.660 --> 06:29.660
完事了

06:29.660 --> 06:30.660
push传进去

06:30.660 --> 06:32.660
state传进去

06:32.660 --> 06:34.660
这个是传一个to

06:34.660 --> 06:36.660
to表示is push为to

06:36.660 --> 06:38.660
它是一个push的方式

06:38.660 --> 06:39.660
replace我们这里调用一下

06:39.660 --> 06:41.660
就尽量减少重复代码

06:42.660 --> 06:43.660
replace能调用一下

06:43.660 --> 06:44.660
这个传递force

06:44.660 --> 06:45.660
看没

06:46.660 --> 06:47.660
这个问题吧

06:47.660 --> 06:48.660
就是抽取

06:48.660 --> 06:49.660
把一些重复代码抽取一下

06:49.660 --> 06:51.660
你像这些东西都是一样的

06:51.660 --> 06:52.660
对不对

06:52.660 --> 06:53.660
都是一样的

06:53.660 --> 06:55.660
那么这就是

06:56.660 --> 06:58.660
抽离的

07:00.660 --> 07:02.660
可用于

07:02.660 --> 07:04.660
可用于实现

07:04.660 --> 07:07.980
可用于实现push

07:07.980 --> 07:11.980
或replace功能的方法

07:11.980 --> 07:12.980
把它抽离一下

07:12.980 --> 07:13.980
当然结果是一样的

07:13.980 --> 07:14.980
这个没什么好说的

07:14.980 --> 07:15.980
我们比方说

07:15.980 --> 07:17.980
把这个bush为force再看一下吧

07:17.980 --> 07:18.980
为了稳固起限

07:18.980 --> 07:19.980
把它看一下

07:21.980 --> 07:22.980
push

07:22.980 --> 07:23.980
replace

07:23.980 --> 07:24.980
咱们看一下location

07:24.980 --> 07:25.980
对吧

07:25.980 --> 07:26.980
一样的

07:26.980 --> 07:27.980
replace

07:29.980 --> 07:31.980
这里abcdefg

07:31.980 --> 07:32.980
idk

07:32.980 --> 07:33.980
这里随便写个

07:33.980 --> 07:35.980
这里让我们看一下location

07:35.980 --> 07:36.980
对吧

07:36.980 --> 07:37.980
没问题

07:39.980 --> 07:40.980
好了

07:40.980 --> 07:42.980
这里我们就把push

07:42.980 --> 07:46.980
和replace就做了

07:46.980 --> 07:47.980
当然里边

07:47.980 --> 07:48.980
肯定还有东西

07:48.980 --> 07:49.980
不着急

07:49.980 --> 07:50.980
慢慢来

07:50.980 --> 07:52.980
因为毕竟是写原

07:52.980 --> 07:54.980
你要知道我们这个东西

07:54.980 --> 07:55.980
reactor

07:55.980 --> 07:57.980
History是一个

07:57.980 --> 07:58.980
第三方库

07:58.980 --> 07:59.980
那么多东西

07:59.980 --> 08:00.980
肯定不要着急

08:00.980 --> 08:02.980
一下子就写完

08:02.980 --> 08:03.980
接下来

08:03.980 --> 08:04.980
我们看History对象里边

08:04.980 --> 08:05.980
还差什么东西呢

08:05.980 --> 08:06.980
还差什么东西呢

08:06.980 --> 08:07.980
我来看一下

08:07.980 --> 08:08.980
咱们之前

08:08.980 --> 08:09.980
第三方库里边的H

08:09.980 --> 08:10.980
我们打到

08:10.980 --> 08:12.980
它的History里边

08:12.980 --> 08:13.980
接着看

08:13.980 --> 08:14.980
是不是还有一个非常

08:14.980 --> 08:15.980
push是不是写了

08:15.980 --> 08:16.980
location写了

08:16.980 --> 08:17.980
replace也写了

08:17.980 --> 08:18.980
go back

08:18.980 --> 08:19.980
go forward

08:19.980 --> 08:20.980
都写了

08:20.980 --> 08:21.980
action也有了

08:21.980 --> 08:22.980
那么现在是不是还有

08:22.980 --> 08:23.980
nation

08:23.980 --> 08:24.980
非常非常重要的方法

08:24.980 --> 08:25.980
nation

08:25.980 --> 08:26.980
就是指的是什么

08:26.980 --> 08:28.980
添加一个监听器

08:28.980 --> 08:30.980
你给它传递一个监听器

08:30.980 --> 08:32.980
然后这个函数

08:32.980 --> 08:33.980
它还会返回

08:33.980 --> 08:34.980
返回一个结构

08:34.980 --> 08:36.980
返回一个就是取消监听

08:36.980 --> 08:37.980
对不对

08:37.980 --> 08:38.980
然后现在我们要

08:38.980 --> 08:39.980
控制监听器了

08:39.980 --> 08:40.980
难点来了

08:40.980 --> 08:41.980
现在我们要控制监听器了

08:41.980 --> 08:43.980
有这么一个nation方法

08:44.980 --> 08:45.980
nation

08:46.980 --> 08:47.980
nation

08:47.980 --> 08:48.980
对

08:48.980 --> 08:49.980
有这么一个方法

08:49.980 --> 08:50.980
你给我传一个什么呢

08:50.980 --> 08:51.980
nation了

08:52.980 --> 08:54.980
你给我传一个监听器进来

08:54.980 --> 08:55.980
然后我做了一大腿操作

08:55.980 --> 08:56.980
我还要给你返回一个

08:56.980 --> 08:58.980
取消监听的函数

08:59.980 --> 09:01.980
添加一个监听器

09:03.980 --> 09:05.980
并且返回一个

09:05.980 --> 09:10.980
可用于取消监听的函数

09:10.980 --> 09:11.980
那么要有

09:11.980 --> 09:12.980
要写这么一个方法

09:12.980 --> 09:13.980
nation

09:13.980 --> 09:17.250
好

09:17.250 --> 09:18.250
那么这个方法怎么实现了

09:18.250 --> 09:19.250
叫做叫监听器了

09:19.250 --> 09:21.250
监听器这一块

09:21.250 --> 09:22.250
我们来思考一下

09:23.250 --> 09:24.250
因为它有可能会添加

09:24.250 --> 09:26.250
很多个监听器

09:27.250 --> 09:28.250
这是监听器

09:28.250 --> 09:30.560
它有可能会添加

09:30.560 --> 09:31.560
很多个监听器

09:31.560 --> 09:32.560
那么我们是不是要用一个

09:32.560 --> 09:34.560
数组来保存监听器

09:34.560 --> 09:35.560
对吧

09:35.560 --> 09:36.560
你添加一个

09:36.560 --> 09:37.560
我就给你加一个

09:37.560 --> 09:38.560
并且我还要返回

09:38.560 --> 09:39.560
硬的函数

09:39.560 --> 09:40.560
你去调用这个函数

09:40.560 --> 09:41.560
就会把之前

09:41.560 --> 09:42.560
那个监听器取消掉

09:43.560 --> 09:44.560
这一块

09:44.560 --> 09:46.560
我们这里

09:46.560 --> 09:48.560
会新建一个模块来做

09:48.560 --> 09:50.560
为什么要新建一个模块来做

09:50.560 --> 09:51.560
你想

09:51.560 --> 09:52.560
像这个监听器的处理

09:52.560 --> 09:53.560
是不是通用的

09:53.560 --> 09:54.560
无论是什么

09:54.560 --> 09:55.560
hassie history

09:55.560 --> 09:56.560
还有什么

09:56.560 --> 09:57.560
browser history

09:57.560 --> 09:58.560
还有什么memory history

09:58.560 --> 09:59.560
是不是通用的

09:59.560 --> 10:00.560
对不对

10:00.560 --> 10:01.560
总归的

10:01.560 --> 10:02.560
控制这个东西

10:02.560 --> 10:03.560
总归的控制

10:03.560 --> 10:04.560
于是我们这里

10:04.560 --> 10:05.560
写上这么一个

10:05.560 --> 10:06.560
nation

10:06.560 --> 10:07.560
nation

10:07.560 --> 10:08.560
manager

10:08.560 --> 10:10.560
nation manager

10:11.560 --> 10:13.560
写上这么一个模块

10:13.560 --> 10:14.560
这个模块

10:15.560 --> 10:16.560
我们这里

10:16.560 --> 10:17.560
我看用什么方式来做

10:17.560 --> 10:18.560
当然

10:18.560 --> 10:19.560
原码

10:19.560 --> 10:20.560
我是看了的

10:20.560 --> 10:21.560
它的原码的时间方式

10:21.560 --> 10:22.560
肯定跟我这个不太一样

10:22.560 --> 10:23.560
因为它要考虑到

10:23.560 --> 10:24.560
更多的一些细节

10:24.560 --> 10:25.560
我们只是

10:25.560 --> 10:26.560
实际上的核心功能

10:26.560 --> 10:27.560
所以说

10:27.560 --> 10:28.560
学习原码

10:28.560 --> 10:30.560
也不用去招办它的东西

10:30.560 --> 10:31.560
千万不要去招办

10:31.560 --> 10:32.560
我们要学它的施路

10:32.560 --> 10:33.560
大体的施路是一样的

10:33.560 --> 10:35.560
原码里边的施路

10:35.560 --> 10:36.560
它就是

10:36.560 --> 10:37.560
一个函数来控制这个东西

10:37.560 --> 10:39.560
来控制这个接听器

10:39.560 --> 10:40.560
那么我们这里

10:40.560 --> 10:42.560
用一个面向对象的方式

10:42.560 --> 10:43.560
就是

10:43.560 --> 10:44.560
我把这个玩意

10:44.560 --> 10:45.560
写成一个内

10:45.560 --> 10:46.560
大写

10:46.560 --> 10:47.560
和这么大写

10:47.560 --> 10:48.560
nation

10:48.560 --> 10:50.560
nation manager

10:50.560 --> 10:51.560
nation manager

10:51.560 --> 10:52.560
这个内

10:52.560 --> 10:53.560
内里边提供

10:53.560 --> 10:54.560
两个重要的方法

10:54.560 --> 10:55.560
一个是用于

10:55.560 --> 10:56.560
添加接听器

10:56.560 --> 10:57.560
一个是用来

10:57.560 --> 10:59.560
触发接听器的函数

10:59.560 --> 11:01.560
咱们这里倒出

11:01.560 --> 11:02.560
default

11:02.560 --> 11:03.560
一个内

11:03.560 --> 11:04.560
nation

11:05.560 --> 11:06.560
nation

11:07.560 --> 11:08.560
manager

11:10.560 --> 11:11.560
应该是class的

11:11.560 --> 11:12.560
class

11:12.560 --> 11:13.560
一个nation manager

11:13.560 --> 11:14.560
倒出这么一个内

11:16.560 --> 11:17.560
这个内里边

11:17.560 --> 11:18.560
提供了两个方法

11:18.560 --> 11:19.560
一个是add

11:20.560 --> 11:21.560
nation

11:22.560 --> 11:23.560
add nation

11:23.560 --> 11:25.560
倒出这么一个方法

11:25.560 --> 11:26.560
这个方法

11:26.560 --> 11:27.560
我打个注释

11:27.560 --> 11:28.560
说一下方法

11:28.560 --> 11:29.560
做什么用的

11:29.560 --> 11:30.560
这个方法

11:30.560 --> 11:31.560
你给我一个nation

11:32.560 --> 11:34.560
这是添加一个

11:34.560 --> 11:35.560
接听器

11:35.560 --> 11:37.560
然后返回一个

11:37.560 --> 11:38.560
返回一个什么

11:38.560 --> 11:40.560
就是用于

11:40.560 --> 11:42.560
取消接听的函数

11:42.560 --> 11:43.560
那么这个方法

11:43.560 --> 11:44.560
是不是就相当于

11:44.560 --> 11:45.560
是我们这里的方法

11:45.560 --> 11:46.560
对吧

11:46.560 --> 11:47.560
所以这里的nation

11:47.560 --> 11:48.560
怎么来实现呢

11:48.560 --> 11:49.560
就如果说

11:49.560 --> 11:50.560
假如我已经写好了

11:50.560 --> 11:51.560
add nation

11:51.560 --> 11:52.560
已经写好了

11:52.560 --> 11:53.560
那么我们

11:53.560 --> 11:54.560
这个方法

11:54.560 --> 11:55.560
如果来实现了

11:55.560 --> 11:56.560
那就非常简单了

11:56.560 --> 11:57.560
我们在这里

11:57.560 --> 11:58.560
订个辨量

11:58.560 --> 11:59.560
const

11:59.560 --> 12:00.560
nation

12:00.560 --> 12:02.560
nation

12:03.560 --> 12:07.560
nation

12:07.560 --> 12:08.560
倒入进来

12:09.560 --> 12:10.560
自己写的这个东西

12:10.560 --> 12:11.560
它会自动给你倒入的

12:12.560 --> 12:13.560
倒入进来了

12:13.560 --> 12:15.560
那么现在我们在这里

12:15.560 --> 12:16.560
nation这里干嘛呢

12:16.560 --> 12:18.560
就直接雕容一下就完成了

12:18.560 --> 12:19.560
雕容一下就完成了

12:19.560 --> 12:20.560
这个nation

12:20.560 --> 12:21.560
nation函数

12:21.560 --> 12:22.560
就是

12:22.560 --> 12:23.560
这个add

12:23.560 --> 12:25.560
雕容那个add nation

12:25.560 --> 12:27.560
把这个nation

12:27.560 --> 12:28.560
进去

12:28.560 --> 12:29.560
对吧

12:30.560 --> 12:31.560
然后它反回的是啥

12:31.560 --> 12:32.560
我就反回啥

12:32.560 --> 12:33.560
它反回的是啥

12:33.560 --> 12:34.560
我就反回啥

12:34.560 --> 12:35.560
就反回这么一个函数

12:35.560 --> 12:36.560
用于取消监听

12:36.560 --> 12:37.560
对吧

12:37.560 --> 12:38.560
那nation就写完了

12:38.560 --> 12:39.560
这边就写完了

12:39.560 --> 12:40.560
那么实际上的事情

12:40.560 --> 12:41.560
是不是交给它了

12:41.560 --> 12:42.560
对不对

12:42.560 --> 12:43.560
那么就像我们刚才说的

12:43.560 --> 12:44.560
这个监听清的

12:44.560 --> 12:45.560
它是一个数组

12:45.560 --> 12:47.560
它里边维护的一个数组

12:47.560 --> 12:48.560
好

12:48.560 --> 12:49.560
那么这里呢

12:49.560 --> 12:50.560
我们就

12:50.560 --> 12:51.560
给它写个属性呗

12:51.560 --> 12:52.560
属性就写个数组

12:52.560 --> 12:53.560
nation

12:53.560 --> 12:54.560
nation

12:54.560 --> 12:55.560
nation

12:55.560 --> 12:56.560
nation

12:56.560 --> 12:57.560
nation

12:57.560 --> 12:58.560
nation

12:58.560 --> 12:59.560
nation

12:59.560 --> 13:00.560
nation

13:00.560 --> 13:01.560
就这么一个属性

13:01.560 --> 13:02.560
它就是个数组

13:02.560 --> 13:03.560
对吧

13:03.560 --> 13:04.560
就是个数组

13:04.560 --> 13:07.560
存放监听器的数组

13:07.560 --> 13:09.560
存放监听器的数组

13:09.560 --> 13:11.560
那么这里要做什么事情呢

13:11.560 --> 13:12.560
你给我传了一个函数进来

13:12.560 --> 13:13.560
对不对

13:13.560 --> 13:14.560
你给我传了一个函数进来

13:14.560 --> 13:15.560
OK

13:15.560 --> 13:16.560
我现在就把你这个玩意

13:16.560 --> 13:18.560
保存到这个数组里边去

13:18.560 --> 13:19.560
就完了

13:19.560 --> 13:20.560
就这么简单

13:20.560 --> 13:21.560
这么简单吗

13:21.560 --> 13:22.560
就这么简单

13:22.560 --> 13:24.560
就这么简单

13:24.560 --> 13:25.560
扔进去

13:25.560 --> 13:27.560
扔进去

13:27.560 --> 13:28.560
那么现在关键是

13:28.560 --> 13:29.560
我要返回一个函数

13:29.560 --> 13:32.560
用于取消这个监听器

13:32.560 --> 13:33.560
取消这个监听器的函数

13:33.560 --> 13:35.560
那这个函数怎么写呢

13:35.560 --> 13:37.560
比方说我们这里写个函数

13:37.560 --> 13:39.560
nation

13:39.560 --> 13:40.560
nation这个函数

13:40.560 --> 13:42.560
它用来取消监听器

13:42.560 --> 13:44.560
那取消是不是从这个数组里边移除

13:44.560 --> 13:45.560
对吧

13:45.560 --> 13:47.560
那我写这么一个函数就完了

13:47.560 --> 13:48.560
它没有函数

13:48.560 --> 13:49.560
不需要函数

13:49.560 --> 13:50.560
最后呢

13:50.560 --> 13:51.560
我把这个函数返回

13:51.560 --> 13:52.560
unnation

13:52.560 --> 13:53.560
把这个函数返回

13:53.560 --> 13:54.560
取消这个监

13:54.560 --> 13:55.560
取消这个

13:55.560 --> 13:57.560
就是这个函数就完了

13:57.560 --> 13:59.560
把这个从数组里边移除就完了

13:59.560 --> 14:01.560
一个传了这个函数进来

14:01.560 --> 14:03.560
那我于到时候取消的时候

14:03.560 --> 14:05.560
是不是从数组里边去找到这个

14:05.560 --> 14:07.560
去找到这个就是

14:07.560 --> 14:09.560
监听器

14:09.560 --> 14:11.560
去找到这个监听器

14:11.560 --> 14:12.560
然后呢

14:12.560 --> 14:14.560
把它移除掉就行

14:14.560 --> 14:16.560
甚至我现在都不用去查找了

14:16.560 --> 14:17.560
不用去查找

14:17.560 --> 14:18.560
用什么

14:18.560 --> 14:19.560
用下标都可以

14:19.560 --> 14:20.560
比方说你这里

14:20.560 --> 14:21.560
数组里边不是添加了影响

14:21.560 --> 14:23.560
那么它的新下标是啥

14:23.560 --> 14:24.560
那告诉我它的下标是啥

14:24.560 --> 14:26.560
应得的是下标是啥

14:26.560 --> 14:27.560
是不是个数组的最后影响了

14:27.560 --> 14:28.560
对吧

14:28.560 --> 14:29.560
认识减1

14:29.560 --> 14:30.560
对不对

14:30.560 --> 14:32.560
就是新

14:32.560 --> 14:34.560
就是新加入的

14:34.560 --> 14:36.560
监听器的下标

14:36.560 --> 14:37.560
对吧

14:37.560 --> 14:38.560
所以下标就可以达到了

14:38.560 --> 14:40.560
到时候我要取消监听器的时候干嘛呢

14:40.560 --> 14:42.560
所以就直接从这个数组里边

14:42.560 --> 14:44.560
也不行

14:44.560 --> 14:46.560
因为下标有可能会变化

14:46.560 --> 14:47.560
因为比方说

14:47.560 --> 14:49.560
监听器里边放了3个

14:49.560 --> 14:50.560
放了3个监听器

14:50.560 --> 14:51.560
放了这里边

14:51.560 --> 14:52.560
到时候你删除这个

14:52.560 --> 14:53.560
下标一开始是1对吧

14:53.560 --> 14:55.560
但是你先删除了它

14:55.560 --> 14:56.560
那么再删除它的时候

14:56.560 --> 14:58.560
它还是用之前的1来删除

14:58.560 --> 14:59.560
那就肯定不对了

14:59.560 --> 15:00.560
算了

15:00.560 --> 15:02.560
不能用这种方式

15:02.560 --> 15:04.560
不能用下标的方式

15:04.560 --> 15:05.560
不能用下标的方式

15:05.560 --> 15:07.560
我们这里用这种

15:07.560 --> 15:08.560
那就查照

15:08.560 --> 15:10.560
从数组里边查照

15:10.560 --> 15:11.560
lesson

15:11.560 --> 15:13.560
音这个手

15:13.560 --> 15:15.560
查到 lesson

15:15.560 --> 15:17.560
就动态的查到出它的下标

15:17.560 --> 15:19.560
它的下标是什么

15:19.560 --> 15:20.560
查到出来

15:20.560 --> 15:22.560
查到出来下标之后

15:22.560 --> 15:23.560
那么现在呢

15:23.560 --> 15:24.560
就是使用这个数组里边

15:24.560 --> 15:25.560
lesson

15:25.560 --> 15:26.560
splice

15:26.560 --> 15:27.560
splice

15:27.560 --> 15:28.560
index

15:28.560 --> 15:29.560
对吧

15:29.560 --> 15:30.560
删除一个

15:30.560 --> 15:31.560
对不对

15:31.560 --> 15:32.560
就是unless

15:32.560 --> 15:33.560
unless

15:33.560 --> 15:34.560
就完了

15:34.560 --> 15:36.560
就完了

15:36.560 --> 15:37.560
这就是那个

15:37.560 --> 15:38.560
add lesson

15:38.560 --> 15:40.560
就是维护一个数组

15:40.560 --> 15:41.560
其他的没啥

15:41.560 --> 15:43.560
你现在我们还没有做触发

15:43.560 --> 15:44.560
还没有做触发

15:44.560 --> 15:45.560
对不对

15:45.560 --> 15:46.560
但是你这个玩意是不是搞定了

15:46.560 --> 15:47.560
就是维护一个数组

15:47.560 --> 15:48.560
贼简单

15:48.560 --> 15:49.560
好

15:49.560 --> 15:50.560
试一下吧

15:50.560 --> 15:51.560
试一下

15:51.560 --> 15:52.560
我们每天加一个监听器过后

15:52.560 --> 15:54.560
我们来这里打印一下

15:54.560 --> 15:56.560
打印一下我们的数组

15:56.560 --> 15:58.560
打印一下这个数组

15:58.560 --> 16:00.560
每天加一个过后

16:01.560 --> 16:03.560
我们来打印

16:03.560 --> 16:05.560
我看一下

16:05.560 --> 16:06.560
这个地方

16:06.560 --> 16:07.560
lesson

16:07.560 --> 16:09.560
我们在这里打印一个吧

16:09.560 --> 16:10.560
我们在这里写个方法吧

16:10.560 --> 16:11.560
修

16:11.560 --> 16:13.560
修方法

16:15.560 --> 16:16.560
算了

16:16.560 --> 16:18.560
还在这里加

16:18.560 --> 16:20.560
打印一下

16:23.560 --> 16:25.560
打印一下吧

16:25.560 --> 16:26.560
保存

16:26.560 --> 16:28.560
这里让我看一下

16:28.560 --> 16:30.560
那么my history

16:30.560 --> 16:31.560
lesson

16:31.560 --> 16:32.560
添加一个监听器

16:32.560 --> 16:33.560
不是个函数吗

16:33.560 --> 16:34.560
对不对

16:34.560 --> 16:35.560
location

16:35.560 --> 16:36.560
action

16:36.560 --> 16:37.560
到时候调用函数的时候

16:37.560 --> 16:39.560
它自然会传过来

16:39.560 --> 16:40.560
给我一个函数

16:40.560 --> 16:41.560
我这里

16:41.560 --> 16:42.560
随便

16:42.560 --> 16:43.560
就加一个

16:43.560 --> 16:44.560
就加一个监听器

16:44.560 --> 16:45.560
加一个监听器

16:45.560 --> 16:46.560
123

16:46.560 --> 16:48.560
那么得到一个返回结果

16:48.560 --> 16:49.560
返回结果是什么

16:49.560 --> 16:50.560
lesson

16:50.560 --> 16:52.560
返回一个结果

16:52.560 --> 16:53.560
那么现在你看数组里面

16:53.560 --> 16:54.560
是有一个函数了

16:54.560 --> 16:55.560
对不对

16:55.560 --> 16:56.560
那么一会

16:56.560 --> 16:57.560
我调用什么

16:57.560 --> 16:58.560
lesson

16:58.560 --> 16:59.560
调用 lesson 之后

16:59.560 --> 17:01.560
那个数组里面自然就空了

17:01.560 --> 17:02.560
自然就空了

17:02.560 --> 17:04.560
那怎么来看到它自然就空了呢

17:04.560 --> 17:06.560
那么比方我们再加一下

17:06.560 --> 17:07.560
再加一下

17:07.560 --> 17:08.560
它本来应该是两个的

17:08.560 --> 17:10.560
它只有一个

17:10.560 --> 17:11.560
说明之前已经被清除掉了

17:11.560 --> 17:13.560
lesson清除掉了

17:13.560 --> 17:14.560
好吧

17:14.560 --> 17:15.560
就没了

17:15.560 --> 17:16.560
它已经清除掉了

17:16.560 --> 17:17.560
就是维护一个数组

17:17.560 --> 17:18.560
给它加监听器

17:18.560 --> 17:19.560
给它取消监听器

17:19.560 --> 17:20.560
就这么简单

17:20.560 --> 17:21.560
好

17:21.560 --> 17:22.560
这是

17:22.560 --> 17:23.560
ADD lesson

17:24.560 --> 17:25.560
但是光有那个

17:25.560 --> 17:26.560
ADD lesson还不够

17:26.560 --> 17:27.560
因为到时候

17:27.560 --> 17:28.560
我们要

17:28.560 --> 17:29.560
触发监听器

17:29.560 --> 17:30.560
那么现在就问起来了

17:30.560 --> 17:32.560
最核心的问题来了

17:32.560 --> 17:35.560
什么时候触发监听器

17:36.560 --> 17:38.560
什么时候触发监听器

17:38.560 --> 17:39.560
你要说

17:39.560 --> 17:40.560
要实现触发

17:40.560 --> 17:41.560
其实很简单

17:41.560 --> 17:42.560
我们先把这个

17:42.560 --> 17:43.560
实现触发搞定

17:43.560 --> 17:44.560
我们在这里

17:44.560 --> 17:45.560
这个方法叫做

17:45.560 --> 17:46.560
TRIGGER

17:46.560 --> 17:47.560
TRIGGER lessoner

17:48.560 --> 17:49.560
TRIGGER lessoner

17:49.560 --> 17:51.560
就是触发监听器

17:51.560 --> 17:52.560
触发监听器的时候

17:52.560 --> 17:54.560
你要给我传递一个地址进来

17:54.560 --> 17:56.560
你要给我传递一个I型进来

17:56.560 --> 17:57.560
我会触发监听器

17:59.560 --> 18:00.560
触发

18:00.560 --> 18:02.560
所有的监听器

18:02.560 --> 18:03.560
就是你家的监听器

18:03.560 --> 18:04.560
我全部给你触发

18:04.560 --> 18:05.560
全部给你触发

18:05.560 --> 18:06.560
那么这里

18:06.560 --> 18:07.560
那怎么触发

18:07.560 --> 18:08.560
就是循环数组

18:08.560 --> 18:10.560
425循环

18:10.560 --> 18:12.560
循环 lessoner

18:12.560 --> 18:13.560
循环 lessoner

18:13.560 --> 18:14.560
循环这个数组

18:14.560 --> 18:15.560
每一循环一次

18:15.560 --> 18:16.560
是不是雕用一下这个方法

18:16.560 --> 18:17.560
对不对

18:17.560 --> 18:18.560
雕用一下方法就完了

18:18.560 --> 18:20.560
把这个location传进去

18:20.560 --> 18:21.560
把这个I型传进去

18:21.560 --> 18:22.560
就是这个韩数

18:22.560 --> 18:23.560
这个内则一简单

18:24.560 --> 18:27.000
它则一简单

18:27.000 --> 18:28.000
它就这么简单

18:28.000 --> 18:29.000
没了

18:29.000 --> 18:30.000
没了

18:30.000 --> 18:31.000
这触发监听器有完事了

18:31.000 --> 18:32.000
就是循环数组

18:32.000 --> 18:34.000
一个个拿出来

18:34.000 --> 18:35.000
然后触发他们

18:35.000 --> 18:36.000
就雕用这个韩数

18:36.000 --> 18:37.000
把location给他

18:37.000 --> 18:38.000
I型给他

18:38.000 --> 18:39.000
就完了

18:39.000 --> 18:40.000
就是围护一个数组

18:40.000 --> 18:42.000
这个数组里面存了很多韩数

18:42.000 --> 18:44.000
那么可以往一个数组里面

18:44.000 --> 18:45.000
加兼听器

18:45.000 --> 18:46.000
就加一个韩数

18:46.000 --> 18:47.000
那么触发的时候

18:47.000 --> 18:48.000
就循环这个数组

18:48.000 --> 18:49.000
把这些韩数

18:49.000 --> 18:51.000
挨载在雕用就完了

18:52.000 --> 18:54.000
那么现在关键的问题

18:54.000 --> 18:55.000
是什么呢

18:55.000 --> 18:56.000
到这边来

18:56.000 --> 18:57.000
就是什么时候触发

18:57.000 --> 18:58.000
触发现在我们很清楚

18:58.000 --> 18:59.000
就是雕用这个玩意儿

18:59.000 --> 19:00.000
吹一个listener

19:00.000 --> 19:01.000
对吧

19:01.000 --> 19:02.000
就雕用它就行了

19:02.000 --> 19:03.000
把这个玩意儿

19:03.000 --> 19:04.000
写上面去

19:04.000 --> 19:05.000
listener慢点

19:05.000 --> 19:07.500
写上面去

19:08.500 --> 19:09.500
那么关键是

19:09.500 --> 19:10.500
什么时候触发呢

19:10.500 --> 19:11.500
是不是应该地址

19:11.500 --> 19:12.500
改变的时候

19:12.500 --> 19:13.500
要触发一个兼听器

19:13.500 --> 19:14.500
地址改变

19:14.500 --> 19:15.500
的时候要触发兼听器

19:15.500 --> 19:16.500
好

19:16.500 --> 19:17.500
那么地址改变的时候

19:17.500 --> 19:18.500
要触发兼听器的话

19:18.500 --> 19:20.500
那么我们是不是要

19:20.500 --> 19:22.500
兼听这个地址变化

19:22.500 --> 19:24.500
是不是要兼听地址变化

19:24.500 --> 19:25.500
哎

19:25.500 --> 19:27.500
兼听地址变化的话

19:27.500 --> 19:28.500
它有这么一个事件

19:28.500 --> 19:29.500
就动物里边

19:29.500 --> 19:30.500
就是我们的浏览器里边

19:30.500 --> 19:32.500
给我们提供了一个事件

19:32.500 --> 19:34.500
叫做window

19:34.500 --> 19:35.500
啊

19:35.500 --> 19:37.500
第二addeventon lessoner

19:37.500 --> 19:38.500
啊

19:38.500 --> 19:39.500
这个事件的名字叫什么呢

19:39.500 --> 19:40.500
叫做

19:40.500 --> 19:41.500
啊

19:41.500 --> 19:42.500
pop

19:42.500 --> 19:43.500
完了

19:43.500 --> 19:45.500
我有点忘了个事件名字了

19:45.500 --> 19:47.500
我们来这里看一下吧

19:47.500 --> 19:49.500
这里应该有个能提示啊

19:49.500 --> 19:50.500
叫pop

19:50.500 --> 19:51.500
啊对

19:51.500 --> 19:52.500
pop state

19:52.500 --> 19:53.500
啊

19:53.500 --> 19:54.500
pop state是个事件

19:54.500 --> 19:56.500
我们比方就写到这吧

19:56.500 --> 19:57.500
就直接写到这

19:57.500 --> 19:58.500
pop state是个事件

19:58.500 --> 19:59.500
当然我们最好

19:59.500 --> 20:01.500
最好用一个函数把包起来啊

20:01.500 --> 20:02.500
就是添加

20:02.500 --> 20:03.500
添加事件

20:03.500 --> 20:04.500
添加事件监听

20:04.500 --> 20:05.500
写个函数把包起来

20:05.500 --> 20:06.500
或者是用个

20:06.500 --> 20:07.500
立即执行函数也行

20:07.500 --> 20:08.500
直接写个函数也行

20:08.500 --> 20:10.500
就是adde

20:10.500 --> 20:11.500
dom

20:12.500 --> 20:13.500
lessoner

20:13.500 --> 20:16.580
这个是什么呢

20:16.580 --> 20:18.580
这是添加对

20:18.580 --> 20:19.580
啊

20:19.580 --> 20:20.580
地址

20:20.580 --> 20:22.580
变化的监听

20:22.580 --> 20:23.580
啊

20:23.580 --> 20:24.580
对地址变化的监听

20:24.580 --> 20:25.580
好

20:25.580 --> 20:27.580
那么比方说我们这里直接掉那个函数啊

20:27.580 --> 20:29.580
当你把它写成个立即执行函数也行

20:29.580 --> 20:30.580
好

20:30.580 --> 20:31.580
这里这个函数里边

20:31.580 --> 20:32.580
啊

20:32.580 --> 20:33.580
这个函数里边

20:33.580 --> 20:34.580
我们就使用window点什么

20:34.580 --> 20:36.580
addeventon lessoner

20:36.580 --> 20:37.580
什么函数

20:37.580 --> 20:38.580
pop state

20:38.580 --> 20:39.580
pop state

20:39.580 --> 20:41.580
就当地址来发生变化的时候

20:41.580 --> 20:42.580
它会运行这个函数

20:42.580 --> 20:43.580
啊

20:43.580 --> 20:44.580
会运行这个函数

20:44.580 --> 20:45.580
好

20:45.580 --> 20:46.580
这个函数里边呢

20:46.580 --> 20:47.580
咱们输出一下啊

20:47.580 --> 20:48.580
输出一下

20:48.580 --> 20:49.580
地址

20:49.580 --> 20:50.580
变化了

20:50.580 --> 20:51.580
看一下吧

20:51.580 --> 20:52.580
啊

20:52.580 --> 20:53.580
能不能实现一个地址

20:53.580 --> 20:54.580
地址变化的监听

20:54.580 --> 20:55.580
好

20:55.580 --> 20:56.580
这里让我们去掉

20:56.580 --> 20:58.580
现在让我们点击前进

20:58.580 --> 20:59.580
是吧

20:59.580 --> 21:00.580
出发的时间

21:00.580 --> 21:01.580
点击后退

21:01.580 --> 21:02.580
是不是出发的这个时间

21:02.580 --> 21:03.580
地址发生变化了

21:03.580 --> 21:04.580
对不对

21:04.580 --> 21:05.580
啊

21:05.580 --> 21:06.580
点击地址变化了

21:06.580 --> 21:07.580
看到没

21:07.580 --> 21:08.580
哎

21:08.580 --> 21:09.580
然后那么比方说我们这里访问那个哈希

21:09.580 --> 21:10.580
哈希

21:10.580 --> 21:11.580
abc

21:11.580 --> 21:12.580
对不对

21:12.580 --> 21:13.580
地址变化了

21:13.580 --> 21:15.580
哈希变化

21:15.580 --> 21:16.580
你看地址变化了

21:16.580 --> 21:17.580
对吧

21:17.580 --> 21:18.580
我们直接通过这个

21:18.580 --> 21:19.580
啊

21:19.580 --> 21:20.580
能够监听到地址变化

21:20.580 --> 21:21.580
啊

21:21.580 --> 21:22.580
点击到地址变化

21:22.580 --> 21:24.580
但是

21:24.580 --> 21:26.580
这里有一个问题

21:26.580 --> 21:27.580
有啥问题呢

21:27.580 --> 21:29.580
就是说你直接在那里写地址啊

21:29.580 --> 21:31.580
或者是点击后退啊

21:31.580 --> 21:32.580
后退

21:32.580 --> 21:33.580
你看那地址是不是都

21:33.580 --> 21:34.580
都可以监听到这个时间

21:34.580 --> 21:35.580
它有个什么问题呢

21:35.580 --> 21:37.580
它只能针对

21:37.580 --> 21:38.580
你

21:38.580 --> 21:40.580
就是拥护对地址的操作

21:40.580 --> 21:41.580
啊

21:41.580 --> 21:42.580
用户对地址的操作

21:42.580 --> 21:43.580
如果说

21:43.580 --> 21:44.580
你是调用了

21:44.580 --> 21:45.580
poosh

21:45.580 --> 21:46.580
就是

21:46.580 --> 21:48.580
使用的是history.poosh

21:48.580 --> 21:50.580
history.poosh state

21:50.580 --> 21:51.580
通过这样的方式来

21:51.580 --> 21:52.580
改变地址的话

21:52.580 --> 21:53.580
比方说

21:53.580 --> 21:54.580
我们这里随便写个啊

21:54.580 --> 21:55.580
随便写个数据啊

21:55.580 --> 21:56.580
前面是数据

21:56.580 --> 21:57.580
啊

21:57.580 --> 21:58.580
台头没有

21:58.580 --> 21:59.580
然后地址

21:59.580 --> 22:00.580
随便写个地址啊

22:00.580 --> 22:01.580
通过这种方式来

22:01.580 --> 22:02.580
改变地址

22:02.580 --> 22:03.580
你看这个世界

22:03.580 --> 22:04.580
你是不是没有运行

22:04.580 --> 22:05.580
对吧

22:05.580 --> 22:06.580
这个世界没有运行

22:06.580 --> 22:07.580
注意啊

22:07.580 --> 22:08.580
所以这个世界呢

22:08.580 --> 22:09.580
它是pop state

22:09.580 --> 22:10.580
只能

22:10.580 --> 22:11.580
只能监听到

22:11.580 --> 22:12.580
一些

22:12.580 --> 22:13.580
就是前进后退

22:13.580 --> 22:14.580
啊

22:14.580 --> 22:15.580
我们这个打个注是吗

22:15.580 --> 22:18.580
pop state世界

22:18.580 --> 22:20.580
仅能监听

22:20.580 --> 22:21.580
监听什么了

22:21.580 --> 22:23.580
前进

22:23.580 --> 22:24.580
后退

22:24.580 --> 22:26.580
前进后退

22:26.580 --> 22:29.580
用户对地址

22:29.580 --> 22:31.580
哈希的改变

22:31.580 --> 22:33.580
哈希的改变

22:33.580 --> 22:34.580
当然有时候用户对一个地址

22:34.580 --> 22:35.580
直接在这里写改变

22:35.580 --> 22:36.580
有什么性呢

22:36.580 --> 22:37.580
直接在改变

22:37.580 --> 22:38.580
一边都刷新了

22:38.580 --> 22:39.580
这一回彻

22:39.580 --> 22:40.580
一边都刷新了

22:40.580 --> 22:41.580
那还有啥

22:41.580 --> 22:42.580
监听事件呢

22:42.580 --> 22:44.580
一边都刷新了啊

22:44.580 --> 22:45.580
但是它不能

22:45.580 --> 22:46.580
就是说它不能监听

22:46.580 --> 22:48.580
无法

22:48.580 --> 22:50.580
无法监听到

22:50.580 --> 22:52.580
怎么监听到那个

22:52.580 --> 22:54.580
push state

22:54.580 --> 22:56.580
和replace state

22:56.580 --> 22:57.580
这两个是监听不到的

22:57.580 --> 22:58.580
啊

22:58.580 --> 22:59.580
这地址变化

22:59.580 --> 23:00.580
这两个是监听不到的

23:00.580 --> 23:01.580
所以

23:01.580 --> 23:02.580
但是我们这里

23:02.580 --> 23:03.580
以后肯定要单独处理

23:03.580 --> 23:04.580
这个东西

23:04.580 --> 23:05.580
所以我们这里

23:05.580 --> 23:06.580
只能监听这个pop state

23:06.580 --> 23:07.580
好

23:07.580 --> 23:08.580
这种情况下

23:08.580 --> 23:09.580
地址变化了

23:09.580 --> 23:10.580
地址变化

23:10.580 --> 23:12.580
这种情况下发生变化的话

23:12.580 --> 23:13.580
那怎么办了

23:13.580 --> 23:14.580
嗯

23:14.580 --> 23:15.580
那怎么办了

23:15.580 --> 23:16.580
是不是我们这里的

23:16.580 --> 23:17.580
叫应该去干嘛

23:17.580 --> 23:18.580
啊

23:18.580 --> 23:20.580
我们这要写健康函数啊

23:20.580 --> 23:21.580
当然写服健康函数

23:21.580 --> 23:22.580
其实也无所谓

23:22.580 --> 23:23.580
啊

23:23.580 --> 23:24.580
当我们这里要干嘛

23:24.580 --> 23:25.580
是不是要去调用那个

23:25.580 --> 23:26.580
就是那个event

23:26.580 --> 23:27.580
就是那个

23:27.580 --> 23:28.580
Nation

23:28.580 --> 23:29.580
Manager

23:29.580 --> 23:30.580
对吧

23:30.580 --> 23:31.580
它里边不是个铁个函数吗

23:31.580 --> 23:32.580
TriggerNation

23:32.580 --> 23:33.580
触发所有的监听器

23:33.580 --> 23:34.580
要给他什么呢

23:34.580 --> 23:36.580
给他location

23:36.580 --> 23:37.580
给他一个地址

23:37.580 --> 23:38.580
啊

23:38.580 --> 23:39.580
这个地址是不是新的地址

23:39.580 --> 23:40.580
对不对

23:40.580 --> 23:41.580
给他一个新的地址

23:41.580 --> 23:42.580
好

23:42.580 --> 23:43.580
这个新的地址呢

23:43.580 --> 23:44.580
来自于哪了

23:44.580 --> 23:45.580
新的地址

23:45.580 --> 23:46.580
这个新的地址对象

23:46.580 --> 23:47.580
来自于哪

23:47.580 --> 23:48.580
来自于哪里告诉我

23:48.580 --> 23:49.580
嗯

23:49.580 --> 23:50.580
嗯

23:50.580 --> 23:52.580
这个新的地址对象

23:52.580 --> 23:54.580
是不是应该重新去创建一个

23:54.580 --> 23:55.580
啊

23:55.580 --> 23:56.580
因为它地址发生变化了嘛

23:56.580 --> 23:57.580
是不是应该重新去创建一个

23:57.580 --> 23:58.580
地址对象

23:58.580 --> 23:59.580
对不对

23:59.580 --> 24:00.580
create

24:00.580 --> 24:01.580
location

24:01.580 --> 24:02.580
对不对

24:02.580 --> 24:04.580
重新去创建一个地址对象

24:04.580 --> 24:05.580
对吧

24:05.580 --> 24:06.580
BassName传言学

24:06.580 --> 24:07.580
啊

24:07.580 --> 24:09.580
我们这里把题出来嘛

24:09.580 --> 24:10.580
没问题吧

24:10.580 --> 24:12.580
应该肯定要重新创建一个地址对象啊

24:12.580 --> 24:13.580
这个肯定跑不了了

24:13.580 --> 24:14.580
啊

24:14.580 --> 24:15.580
重新创建一个地址对象

24:15.580 --> 24:16.580
啊

24:16.580 --> 24:17.580
location

24:17.580 --> 24:18.580
好

24:18.580 --> 24:19.580
那么这里把location

24:19.580 --> 24:20.580
新的location给力

24:20.580 --> 24:21.580
新的location给力

24:21.580 --> 24:22.580
然后呢

24:22.580 --> 24:23.580
再给你一个什么

24:23.580 --> 24:24.580
xin

24:24.580 --> 24:25.580
那么这个xin固定为pop

24:25.580 --> 24:26.580
啊

24:26.580 --> 24:27.580
因为看这个世界

24:27.580 --> 24:28.580
pop state

24:28.580 --> 24:29.580
对吧

24:29.580 --> 24:30.580
除了调用PoC

24:30.580 --> 24:31.580
除了调用replace

24:31.580 --> 24:32.580
其他的都是pop

24:32.580 --> 24:33.580
都是pop

24:33.580 --> 24:34.580
啊

24:34.580 --> 24:35.580
xin的固定为pop

24:35.580 --> 24:36.580
对吧

24:36.580 --> 24:37.580
哎

24:37.580 --> 24:38.580
等一下啊

24:38.580 --> 24:39.580
那这个是不是搞定了

24:39.580 --> 24:40.580
啊

24:40.580 --> 24:41.580
搞定了

24:41.580 --> 24:42.580
那么现在我们来试一下啊

24:42.580 --> 24:43.580
咱们的这个

24:43.580 --> 24:44.580
嗯

24:44.580 --> 24:45.580
看一下功能

24:45.580 --> 24:46.580
咱们myhistory里边

24:46.580 --> 24:47.580
加一个啊

24:47.580 --> 24:48.580
lesson

24:48.580 --> 24:49.580
啊

24:49.580 --> 24:50.580
加一个

24:50.580 --> 24:51.580
嗯

24:51.580 --> 24:52.580
就这个吧

24:52.580 --> 24:53.580
啊

24:53.580 --> 24:54.580
lesson

24:54.580 --> 24:55.580
我们这里的输出一个

24:55.580 --> 24:56.580
啊

24:56.580 --> 24:57.580
location

24:57.580 --> 24:58.580
输出一个xin

24:58.580 --> 24:59.580
啊

24:59.580 --> 25:00.580
添加一个监听器

25:00.580 --> 25:01.580
添加一个监听器

25:01.580 --> 25:02.580
能够辆的

25:02.580 --> 25:03.580
啊

25:04.580 --> 25:05.580
啊

25:05.580 --> 25:06.580
变了拿到

25:06.580 --> 25:07.580
好

25:07.580 --> 25:08.580
添加一个监听器

25:08.580 --> 25:09.580
好

25:09.580 --> 25:10.580
添加之后咱们在地址改变

25:10.580 --> 25:11.580
哎呦

25:11.580 --> 25:12.580
我刚才

25:12.580 --> 25:13.580
我刚才是刷新页面

25:13.580 --> 25:14.580
啊

25:14.580 --> 25:15.580
我刚才刷新的

25:15.580 --> 25:16.580
所以说这里回退也要刷新

25:16.580 --> 25:17.580
好

25:17.580 --> 25:18.580
这里重新的监听一下啊

25:18.580 --> 25:19.580
那么这里返回

25:19.580 --> 25:20.580
你看

25:20.580 --> 25:21.580
是不是监听出来了

25:21.580 --> 25:22.580
哎

25:22.580 --> 25:23.580
现在的新的地址是这个啊

25:23.580 --> 25:24.580
新的地址是这个ABCD

25:24.580 --> 25:25.580
发布的ABCD

25:25.580 --> 25:26.580
啊

25:26.580 --> 25:27.580
on define的

25:27.580 --> 25:28.580
内形是pop

25:28.580 --> 25:29.580
pop

25:29.580 --> 25:30.580
好

25:30.580 --> 25:31.580
再返回

25:31.580 --> 25:32.580
你看是不是监听到了

25:32.580 --> 25:33.580
没问题吧

25:33.580 --> 25:34.580
再返回

25:34.580 --> 25:35.580
看一下

25:35.580 --> 25:36.580
看一下地址

25:36.580 --> 25:37.580
对一下地址

25:37.580 --> 25:38.580
STATS也有

25:38.580 --> 25:39.580
再返回

25:39.580 --> 25:40.580
你看一下

25:40.580 --> 25:41.580
对吧

25:41.580 --> 25:42.580
是不是能够监听地址时间了

25:42.580 --> 25:43.580
再前进

25:43.580 --> 25:44.580
对吧

25:44.580 --> 25:45.580
是吧

25:45.580 --> 25:46.580
没问题吧

25:46.580 --> 25:47.580
哎

25:47.580 --> 25:48.580
咱们是不是监听到了

25:48.580 --> 25:49.580
好

25:49.580 --> 25:50.580
那么这一块搞定了

25:50.580 --> 25:51.580
啊

25:51.580 --> 25:52.580
比方说再来测试一下

25:52.580 --> 25:53.580
那如果说我们这里呢

25:53.580 --> 25:54.580
如果说

25:54.580 --> 25:55.580
这里调用了on listen

25:55.580 --> 25:56.580
on listen

25:56.580 --> 25:57.580
调整之后呢

25:57.580 --> 25:59.580
现在我们再来改变地址

25:59.580 --> 26:00.580
再来改变地址

26:00.580 --> 26:01.580
啊

26:01.580 --> 26:02.580
前进

26:02.580 --> 26:03.580
后退

26:03.580 --> 26:04.580
这么没了

26:04.580 --> 26:05.580
对吧

26:05.580 --> 26:06.580
就这么有意思

26:06.580 --> 26:07.580
可以天天监听气的

26:07.580 --> 26:08.580
好

26:08.580 --> 26:10.580
那么现在这个地方搞定了之后呢

26:10.580 --> 26:12.580
还有个问题没解决

26:12.580 --> 26:13.580
又是这个问题了

26:13.580 --> 26:14.580
老问题了

26:14.580 --> 26:15.580
买location

26:15.580 --> 26:17.580
就是买Hitler的location

26:17.580 --> 26:18.580
它还是值钱的

26:18.580 --> 26:19.580
为什么还是值钱的

26:19.580 --> 26:22.580
因为地址发生了变化之后

26:22.580 --> 26:24.580
你是不是还是没有改动它的东西

26:24.580 --> 26:25.580
对吧

26:25.580 --> 26:26.580
你没有改动它的任何东西

26:26.580 --> 26:27.580
所以说呢

26:27.580 --> 26:28.580
你这里还要做一件事

26:28.580 --> 26:29.580
还要做一件事

26:29.580 --> 26:30.580
就是你要改动一下

26:30.580 --> 26:31.580
Hitler为了什么

26:31.580 --> 26:33.580
就是location

26:33.580 --> 26:34.580
还要改动它的location

26:34.580 --> 26:36.580
它没有去改动action

26:36.580 --> 26:37.580
action它没变

26:37.580 --> 26:38.580
但是location它是变了的

26:38.580 --> 26:39.580
是不是

26:39.580 --> 26:41.580
要重新复制为新的那个location对象

26:41.580 --> 26:42.580
对不对

26:42.580 --> 26:44.580
没问题吧

26:44.580 --> 26:46.580
是不是要复制为新的location对象

26:46.580 --> 26:48.580
对吧

26:48.580 --> 26:49.580
就这么一个意思

26:49.580 --> 26:51.580
就这么一个意思

26:51.580 --> 26:53.580
这就是

26:53.580 --> 26:55.580
但是大家要注意啊

26:55.580 --> 26:56.580
我们应该先触发

26:56.580 --> 26:57.580
事件

26:57.580 --> 26:58.580
再来复制

26:58.580 --> 26:59.580
为什么呢

26:59.580 --> 27:00.580
我们已经演示过

27:00.580 --> 27:01.580
在事件里边

27:01.580 --> 27:02.580
在触发的事件的时候

27:02.580 --> 27:04.580
它仍然可以得到之前的location

27:04.580 --> 27:06.580
通过参数可以拿到

27:06.580 --> 27:07.580
最新的location

27:07.580 --> 27:08.580
但是呢

27:08.580 --> 27:09.580
通过那个history呢

27:09.580 --> 27:10.580
可以拿到旧的location

27:10.580 --> 27:11.580
因此呢

27:11.580 --> 27:12.580
事件要先触发

27:12.580 --> 27:14.580
保证它可以拿到之前的location

27:14.580 --> 27:15.580
然后呢

27:15.580 --> 27:17.580
再来重新复制

27:17.580 --> 27:19.580
再来重新复制

27:19.580 --> 27:20.580
这是这一块

27:20.580 --> 27:22.580
那现在我们再看一下

27:22.580 --> 27:23.580
location

27:23.580 --> 27:24.580
现在是abcd对吧

27:24.580 --> 27:25.580
我们回去

27:25.580 --> 27:26.580
看一下location

27:26.580 --> 27:27.580
是不是也跟着变了

27:27.580 --> 27:28.580
对不对

27:28.580 --> 27:29.580
好

27:29.580 --> 27:31.580
那么这个就做好了

27:31.580 --> 27:32.580
相当于做好了

27:32.580 --> 27:33.580
但是呢

27:33.580 --> 27:34.580
我们现在呢

27:34.580 --> 27:35.580
还有一个问题

27:35.580 --> 27:36.580
就是你调用铺鞋

27:36.580 --> 27:37.580
replace的时候

27:37.580 --> 27:41.220
它监听是不会触发的

27:41.220 --> 27:42.220
比方说我们看吧

27:42.220 --> 27:44.220
因为我刚才演示过

27:44.220 --> 27:46.220
比方说我们加上个联系呢

27:46.220 --> 27:47.220
联系

27:49.220 --> 27:50.220
加上个联系

27:51.220 --> 27:53.220
这里还是

27:53.220 --> 27:54.220
用一个

27:54.220 --> 27:55.220
用一个

27:55.220 --> 27:56.220
用一个

27:56.220 --> 27:57.220
用一个

27:57.220 --> 27:58.220
用一个

27:59.220 --> 28:01.220
接受一下

28:02.220 --> 28:04.220
加上个就是监听器

28:04.220 --> 28:05.220
那么现在呢

28:05.220 --> 28:06.220
如果说我在这里

28:06.220 --> 28:07.220
跑过来跑过去

28:07.220 --> 28:08.220
这个没问题

28:08.220 --> 28:09.220
它能触发这个事件

28:09.220 --> 28:10.220
但是说如果说

28:10.220 --> 28:11.220
我通过my history的

28:11.220 --> 28:12.220
铺鞋方法

28:12.220 --> 28:14.220
来听讲页面的话

28:14.220 --> 28:15.220
比方说我们这里

28:15.220 --> 28:16.220
先铺鞋一个

28:16.220 --> 28:17.220
那么这个时候

28:17.220 --> 28:18.220
事件是没有运行

28:18.220 --> 28:19.220
对吧

28:19.220 --> 28:20.220
没有运行

28:20.220 --> 28:21.220
因为我们刚才说了

28:21.220 --> 28:22.220
温斗这个事件

28:22.220 --> 28:24.220
它只能监听那个pop

28:24.220 --> 28:25.220
它不能监听铺鞋

28:25.220 --> 28:26.220
replace

28:26.220 --> 28:27.220
那怎么办

28:27.220 --> 28:28.220
那还不简单吗

28:28.220 --> 28:30.220
铺鞋我们是自己写的方法

28:30.220 --> 28:32.220
replace是自己写的方法

28:32.220 --> 28:33.220
那么它都丢了这个

28:33.220 --> 28:34.220
那我们在这个里边

28:34.220 --> 28:36.220
手动去触发一次行不行

28:36.220 --> 28:37.220
那当然可以

28:37.220 --> 28:38.220
为什么不行

28:38.220 --> 28:40.220
手动去触发一次不完了

28:40.220 --> 28:41.220
对不对

28:41.220 --> 28:43.220
手动去触发一次就完事了

28:43.220 --> 28:44.220
所以说呢

28:44.220 --> 28:45.220
你这里呢

28:47.220 --> 28:48.220
我们在具体的

28:48.220 --> 28:50.220
改变都可以信之前

28:50.220 --> 28:52.220
这里还是要得到都可以信

28:54.220 --> 28:55.220
在哪呢

28:55.220 --> 28:56.220
我们在改变

28:56.220 --> 28:58.220
改变那个hiss微之前嘛

28:58.220 --> 28:59.220
拿到lokation

28:59.220 --> 29:00.220
拿到新的lokation

29:00.220 --> 29:02.220
新的lokation我们得

29:02.220 --> 29:04.220
把这个写到前面

29:04.220 --> 29:07.720
把这个写到前面

29:07.720 --> 29:08.720
这个写到前面

29:08.720 --> 29:09.720
就是完成

29:09.720 --> 29:10.720
它真实的地址跳转

29:10.720 --> 29:12.720
完成真实的地址跳转

29:12.720 --> 29:14.720
然后得到新的lokation

29:14.720 --> 29:15.720
lokation

29:15.720 --> 29:16.720
对于create

29:16.720 --> 29:17.720
lokation

29:17.720 --> 29:18.720
base name

29:18.720 --> 29:19.720
得到新的lokation

29:19.720 --> 29:21.720
就是我们把改变hiss微对象

29:21.720 --> 29:22.720
放到最后

29:22.720 --> 29:23.720
放到最后

29:23.720 --> 29:25.720
因为我们之前说过

29:26.720 --> 29:28.720
先触发时间

29:28.720 --> 29:29.720
然后呢

29:29.720 --> 29:30.720
先触发时间

29:30.720 --> 29:31.720
触发完了过后

29:31.720 --> 29:33.720
再改动hiss微对象

29:33.720 --> 29:35.720
再改动hiss微对象

29:37.720 --> 29:38.720
lokation

29:38.720 --> 29:39.720
我们这里呢

29:40.720 --> 29:42.720
这里就直接付出为这个lokation了

29:42.720 --> 29:43.720
直接付出为这个lokation

29:43.720 --> 29:44.720
好

29:44.720 --> 29:45.720
然后呢

29:45.720 --> 29:46.720
这里是不是触发时间

29:46.720 --> 29:47.720
对吧

29:47.720 --> 29:49.720
这里事件是nationer manager

29:49.720 --> 29:51.720
去nationer

29:51.720 --> 29:53.720
那么lokation传进去

29:53.720 --> 29:54.720
是不是刚才的变量

29:54.720 --> 29:55.720
lokation传进去

29:55.720 --> 29:56.720
前面的lokation

29:56.720 --> 29:57.720
我们自己根据情况

29:57.720 --> 29:59.720
复制了的lokation传进去

29:59.720 --> 30:00.720
缺个雷声的

30:00.720 --> 30:01.720
触发就行了

30:01.720 --> 30:02.720
行吧

30:02.720 --> 30:03.720
没问题吧

30:03.720 --> 30:04.720
好保存啊

30:04.720 --> 30:05.720
咱们看一下

30:05.720 --> 30:07.720
那么现在我们再调用push

30:07.720 --> 30:09.720
先先加加监听器

30:09.720 --> 30:10.720
然后再调用push

30:10.720 --> 30:11.720
你看是不是能够输出了

30:11.720 --> 30:13.720
能够得到这个结果了

30:13.720 --> 30:15.720
然后那么调用replace

30:16.720 --> 30:17.720
replace

30:18.720 --> 30:19.720
一回车

30:19.720 --> 30:20.720
你看是不是能触发了

30:20.720 --> 30:21.720
对吧

30:21.720 --> 30:22.720
我们手动去触发一下

30:23.720 --> 30:24.720
加监听器

30:24.720 --> 30:25.720
其实

30:25.720 --> 30:26.720
你会发现加监听器

30:26.720 --> 30:29.720
其实是一件非常非常简单的事情

30:29.720 --> 30:32.720
非常非常简单的一件事情

30:32.720 --> 30:34.720
加监听器

30:35.720 --> 30:37.720
那么监听器这一块就写完了

30:37.720 --> 30:38.720
就写完了

30:38.720 --> 30:39.720
那还有啥呢

30:39.720 --> 30:40.720
咱们来看一下

30:40.720 --> 30:41.720
H里边还有啥呢

30:41.720 --> 30:42.720
就没多少东西了

30:42.720 --> 30:43.720
就已经没多少东西了

30:43.720 --> 30:45.720
一看这些都是不是写的差不多了

30:45.720 --> 30:46.720
对吧

30:46.720 --> 30:47.720
还差一个啥

30:47.720 --> 30:48.720
还差一个block

30:48.720 --> 30:49.720
主色

30:49.720 --> 30:51.720
添加一个主色

30:51.720 --> 30:53.720
那这个东西是什么意思呢

30:54.720 --> 30:56.720
就是说你给我一个主色消息

30:56.720 --> 30:57.720
是一个支付串

30:57.720 --> 30:59.720
你给我一个支付串的消息

30:59.720 --> 31:00.720
或者是你给我一个函数

31:00.720 --> 31:01.720
这个函数会返回支付串

31:01.720 --> 31:02.720
所以一遍你

31:02.720 --> 31:04.720
准备你给我就完事了

31:04.720 --> 31:05.720
你给我就完事了

31:05.720 --> 31:07.720
那你给我过后

31:07.720 --> 31:09.720
你只要有了这个东西

31:09.720 --> 31:10.720
那么就表示

31:10.720 --> 31:12.720
你有一个主色

31:12.720 --> 31:13.720
那么我之后

31:13.720 --> 31:14.720
在挑转页面的时候

31:14.720 --> 31:15.720
我要干嘛呢

31:15.720 --> 31:17.720
我是不是要触发主色

31:17.720 --> 31:19.720
要触发主色

31:19.720 --> 31:20.720
这个逻辑呢

31:20.720 --> 31:21.720
我们之前都写过的

31:21.720 --> 31:22.720
好那这一块呢

31:22.720 --> 31:24.720
我们也可以参寻

31:24.720 --> 31:26.720
参照这个Nationer Manager

31:26.720 --> 31:28.720
来写这么一个东西

31:28.720 --> 31:30.720
要写这么一个文件

31:30.720 --> 31:31.720
单独的一个模块

31:31.720 --> 31:32.720
叫做block

31:32.720 --> 31:34.720
block manager

31:35.720 --> 31:37.720
block manager 叫解释

31:38.720 --> 31:39.720
好了

31:39.720 --> 31:40.720
我们来写这么一个东西

31:40.720 --> 31:41.720
写这么一个东西

31:41.720 --> 31:42.720
好 这个东西呢

31:42.720 --> 31:44.720
我们还是写个内嘛

31:44.720 --> 31:45.720
写个内

31:45.720 --> 31:47.720
export default

31:47.720 --> 31:49.720
它专门来处理主色问题的

31:51.720 --> 31:53.720
manager

31:53.720 --> 31:55.720
class 一个内

31:59.100 --> 32:00.100
好

32:00.100 --> 32:02.100
这个内里面它处理什么问题呢

32:02.100 --> 32:03.100
它就是

32:03.100 --> 32:05.100
它就提供了这么一个方法

32:05.100 --> 32:07.100
叫做block

32:07.100 --> 32:09.100
提供这么一个方法

32:09.100 --> 32:11.100
这个是proper

32:12.100 --> 32:14.100
给我一个提示消息

32:14.100 --> 32:16.100
大家注意

32:16.100 --> 32:18.100
设置

32:18.100 --> 32:20.100
设置一个主色

32:20.100 --> 32:22.100
那么传递

32:22.100 --> 32:24.100
一个提示消息

32:24.100 --> 32:26.100
这个提示消息呢

32:26.100 --> 32:28.100
可以是

32:28.100 --> 32:30.100
可以是

32:30.100 --> 32:32.100
可以是

32:32.100 --> 32:34.100
哎呀

32:34.100 --> 32:36.100
可以是

32:36.100 --> 32:38.100
制服串

32:38.100 --> 32:40.100
也可以是

32:40.100 --> 32:42.100
也可以是一个函数

32:42.100 --> 32:44.100
函数返回一个制服串

32:44.100 --> 32:46.100
函数返回

32:46.100 --> 32:48.100
一个消息制服串

32:48.100 --> 32:50.100
这是个提示

32:50.100 --> 32:52.100
对吧 一个主色

32:52.100 --> 32:54.100
那么这个主色怎么来操作呢

32:54.100 --> 32:55.100
大家稍微想一想

32:55.100 --> 32:57.100
这里有点照

32:57.100 --> 32:59.100
这个主色啊

32:59.100 --> 33:02.100
该怎么去操作这个主色呢

33:02.100 --> 33:04.100
该怎么去操作呢

33:04.100 --> 33:06.100
其实这里的道理呢

33:06.100 --> 33:07.100
跟那个

33:07.100 --> 33:09.100
之前我们那个lesson 是一样的

33:09.100 --> 33:12.100
之前lesson 是一个监听器数组对吧

33:12.100 --> 33:13.100
那么这个主色呢

33:13.100 --> 33:14.100
由于只有一个

33:14.100 --> 33:15.100
我们之前解释过

33:15.100 --> 33:17.100
这个主色是只能有一个主色的

33:17.100 --> 33:18.100
它不会有多个主色

33:18.100 --> 33:20.100
所以我们直接用一个属性来记录这个主色

33:20.100 --> 33:21.100
消息就行了

33:21.100 --> 33:23.100
比方说我们这里

33:23.100 --> 33:25.100
就用一个属性

33:25.100 --> 33:27.100
用一个属性来记录这个主色消息

33:27.100 --> 33:29.100
就这个property

33:29.100 --> 33:31.100
这个属性

33:31.100 --> 33:33.100
莫人指为老

33:33.100 --> 33:35.100
也就是说我们要干嘛呢

33:35.100 --> 33:37.100
这个玩意儿它有值

33:37.100 --> 33:39.100
就表示有主色

33:39.100 --> 33:42.100
这个玩意儿它没有值

33:42.100 --> 33:44.100
就表示没有主色

33:44.100 --> 33:46.100
就这么简单

33:46.100 --> 33:50.100
该属性是否有值

33:50.100 --> 33:52.100
决定了是否有主色

33:52.100 --> 33:53.100
对吧

33:53.100 --> 33:55.100
是否有主色

33:55.100 --> 33:56.100
就这么简单

33:56.100 --> 33:57.100
所以这里的代码

33:57.100 --> 33:59.100
就一句话就写完了

33:59.100 --> 34:01.100
一个复职就写完了

34:01.100 --> 34:02.100
一个复职

34:02.100 --> 34:03.100
那么就是

34:03.100 --> 34:04.100
设这个主色

34:04.100 --> 34:06.100
但这个方法还要返回一个东西

34:06.100 --> 34:08.100
就是取消主色

34:08.100 --> 34:09.100
返回吧

34:09.100 --> 34:10.100
那取消主色你告诉我

34:10.100 --> 34:12.100
就返回一个函数

34:12.100 --> 34:13.100
取消主色你告诉我

34:13.100 --> 34:14.100
怎么取消

34:14.100 --> 34:16.980
不就取消了吗

34:16.980 --> 34:17.980
对不对

34:17.980 --> 34:19.980
就这么简单

34:19.980 --> 34:21.980
没有多复杂就这么简单

34:21.980 --> 34:23.980
或者是你用一个变量

34:23.980 --> 34:24.980
一直active也行

34:24.980 --> 34:26.980
总之可以随便

34:26.980 --> 34:27.980
总之你记录一下

34:27.980 --> 34:28.980
以后没有主色

34:28.980 --> 34:29.980
有主色的话

34:29.980 --> 34:30.980
就复职就完了

34:30.980 --> 34:32.980
没有主色的话

34:32.980 --> 34:35.980
取消就是把他设为老

34:35.980 --> 34:37.980
就表示没有主色了

34:37.980 --> 34:38.980
一说添加主色

34:38.980 --> 34:40.980
是非常非常简单的

34:40.980 --> 34:42.980
那么关键是运行主色

34:42.980 --> 34:43.980
运行主色

34:43.980 --> 34:45.980
trigger

34:45.980 --> 34:46.980
trigger

34:46.980 --> 34:47.980
block

34:47.980 --> 34:49.980
触发主色

34:49.980 --> 34:51.980
关键是这个

34:51.980 --> 34:53.980
触发主色

34:53.980 --> 34:55.980
好触发主色怎么触发呢

34:55.980 --> 34:57.980
是不是

34:57.980 --> 34:59.980
要通过他来得到主色消息

34:59.980 --> 35:00.980
对不对

35:00.980 --> 35:03.980
通过他来得到一个主色消息

35:03.980 --> 35:05.980
通过他来得到一个主色消息

35:05.980 --> 35:06.980
那么比方

35:06.980 --> 35:08.980
比方说我们这里判断一下

35:08.980 --> 35:09.980
如果说你这个东西

35:09.980 --> 35:11.980
我们这个Zis的proper

35:11.980 --> 35:12.980
都没有值

35:12.980 --> 35:13.980
连值都没有

35:13.980 --> 35:15.980
他没有值

35:15.980 --> 35:16.980
他没有值的话

35:16.980 --> 35:17.980
还触发主色吗

35:17.980 --> 35:18.980
是不是不触发了

35:18.980 --> 35:19.980
对吧

35:19.980 --> 35:20.980
是不是不触发了

35:20.980 --> 35:22.980
我们就return

35:22.980 --> 35:23.980
不触发 啥都不做

35:23.980 --> 35:24.980
啥都不做

35:24.980 --> 35:26.980
好 那如果说他有值

35:26.980 --> 35:27.980
他有值

35:27.980 --> 35:28.980
是不是有可能他有值

35:28.980 --> 35:30.980
他有可能是一个字符串

35:30.980 --> 35:32.980
我们要得到他的消息

35:32.980 --> 35:33.980
对不对

35:33.980 --> 35:34.980
是不是有可能是一个字符串

35:34.980 --> 35:36.980
也有可能是一个什么

35:36.980 --> 35:37.980
函数

35:37.980 --> 35:38.980
对不对

35:38.980 --> 35:39.980
要判断一下

35:39.980 --> 35:42.980
如果说Zis

35:42.980 --> 35:43.980
Type

35:43.980 --> 35:46.980
就是Zis.proper

35:46.980 --> 35:47.980
等于什么

35:47.980 --> 35:48.980
等于Stream

35:48.980 --> 35:50.980
如果说是一个字符串的话

35:50.980 --> 35:51.980
那么反正我们总之要得到一个

35:51.980 --> 35:53.980
主色消息

35:53.980 --> 35:55.980
Message

35:55.980 --> 35:56.980
Message

35:56.980 --> 35:57.980
主色消息

35:57.980 --> 35:58.980
那么如果说

35:58.980 --> 35:59.980
他是个字符串的话

35:59.980 --> 36:00.980
那就简单

36:00.980 --> 36:01.980
Message

36:01.980 --> 36:03.980
就直接等于Zis.proper

36:03.980 --> 36:04.980
这是主色消息

36:04.980 --> 36:05.980
好

36:05.980 --> 36:06.980
Ls

36:06.980 --> 36:07.980
如果说他是一个函数

36:07.980 --> 36:08.980
当然你可以这样判断一下

36:08.980 --> 36:09.980
Type

36:10.980 --> 36:12.980
如果说等于Zis.proper

36:12.980 --> 36:13.980
等于什么

36:13.980 --> 36:14.980
方形

36:15.980 --> 36:16.980
我特意写啥

36:18.980 --> 36:19.980
如果他等于一个方形

36:19.980 --> 36:20.980
他是一个函数

36:20.980 --> 36:21.980
那是不是调用函数就完了

36:21.980 --> 36:22.980
对不对

36:22.980 --> 36:23.980
调用函数

36:23.980 --> 36:24.980
Message

36:24.980 --> 36:26.980
调用函数Zis.proper

36:26.980 --> 36:27.980
调用函数

36:27.980 --> 36:28.980
那我们之前学主色的时候

36:28.980 --> 36:29.980
是会告诉大家

36:29.980 --> 36:31.980
这个主色里边

36:31.980 --> 36:32.980
调用那个Blog

36:32.980 --> 36:33.980
Blog主色里边

36:33.980 --> 36:34.980
还要写函数

36:34.980 --> 36:35.980
函数的话

36:35.980 --> 36:36.980
你看我们之前写的

36:36.980 --> 36:37.980
对吧

36:37.980 --> 36:38.980
还要写函数的话

36:38.980 --> 36:39.980
函数是不是有两个参数

36:39.980 --> 36:40.980
一个Nocation

36:40.980 --> 36:41.980
一个Action

36:41.980 --> 36:42.980
所以一个Nocation

36:42.980 --> 36:43.980
一个Action

36:43.980 --> 36:44.980
一个新的Nocation

36:44.980 --> 36:45.980
和新的Action

36:45.980 --> 36:46.980
好

36:46.980 --> 36:47.980
那你是不是要把

36:47.980 --> 36:48.980
Nocation和Action传给我

36:48.980 --> 36:49.980
就跟刚才那个

36:49.980 --> 36:50.980
Nation Manager

36:50.980 --> 36:51.980
是一样的

36:51.980 --> 36:52.980
你要传给我

36:52.980 --> 36:53.980
不然我怎么知道

36:53.980 --> 36:54.980
哪去找的Nocation

36:54.980 --> 36:55.980
哪去找这个Action

36:55.980 --> 36:56.980
你在传给我

36:56.980 --> 36:57.980
那我们调用这个Proper

36:57.980 --> 36:58.980
把这个Nocation

36:58.980 --> 36:59.980
给他

36:59.980 --> 37:00.980
这个Action给他

37:00.980 --> 37:01.980
对吧

37:01.980 --> 37:02.980
是不是

37:02.980 --> 37:03.980
也可以

37:03.980 --> 37:04.980
他的返回结果

37:04.980 --> 37:05.980
就是一个Message

37:05.980 --> 37:06.980
对不对

37:07.980 --> 37:08.980
那么这次

37:08.980 --> 37:09.980
是不是拿到

37:09.980 --> 37:10.980
组色消息了

37:10.980 --> 37:11.980
对吧

37:11.980 --> 37:12.980
组色消息

37:12.980 --> 37:13.980
就是有组色的情况

37:13.980 --> 37:14.980
我们要去拿组色消息

37:14.980 --> 37:15.980
好

37:15.980 --> 37:17.980
组色消息拿了过后

37:17.980 --> 37:18.980
好好想一想

37:18.980 --> 37:19.980
接下来干嘛

37:21.980 --> 37:22.980
这里存的是一个组色消息

37:22.980 --> 37:24.980
它可能是通过一个函数

37:24.980 --> 37:26.980
得到的组色消息

37:26.980 --> 37:28.980
也有可能是通过一个就是

37:28.980 --> 37:29.980
支付串

37:29.980 --> 37:30.980
得到的组色消息

37:30.980 --> 37:31.980
但它只有这两种情况

37:31.980 --> 37:32.980
不能用其他情况

37:32.980 --> 37:33.980
所以说你甚至

37:33.980 --> 37:34.980
可以在天价组色的时候

37:34.980 --> 37:35.980
判断一下

37:36.980 --> 37:37.980
如果说

37:37.980 --> 37:38.980
它不等于

37:38.980 --> 37:39.980
不等于支付串

37:40.980 --> 37:42.980
它不等于支付串

37:42.980 --> 37:43.980
并且

37:45.980 --> 37:47.980
并且也不等于函数

37:47.980 --> 37:48.980
它既不是支付串

37:48.980 --> 37:49.980
也不是函数

37:50.980 --> 37:51.980
那么这个时候报错

37:51.980 --> 37:52.980
给他报个错

37:53.980 --> 37:54.980
Slow

37:54.980 --> 37:55.980
New

37:55.980 --> 37:56.980
Type

37:56.980 --> 37:57.980
Aro

37:57.980 --> 37:58.980
就是

37:58.980 --> 37:59.980
组色

37:59.980 --> 38:00.980
就是Block

38:02.980 --> 38:03.980
Must

38:03.980 --> 38:04.980
B

38:04.980 --> 38:05.980
Stream

38:05.980 --> 38:06.980
Or

38:06.980 --> 38:07.980
方形

38:08.980 --> 38:09.980
它必须是一个支付串

38:09.980 --> 38:10.980
或者是函数

38:10.980 --> 38:12.980
它如果两个都不试的话

38:12.980 --> 38:13.980
那么你给他报错

38:13.980 --> 38:14.980
这些东西可以处理一下

38:14.980 --> 38:15.980
就完成了

38:15.980 --> 38:16.980
天价组色的时候就处理

38:16.980 --> 38:17.980
运行组色的时候

38:17.980 --> 38:18.980
它肯定是要么是支付串

38:18.980 --> 38:19.980
要么是函数

38:19.980 --> 38:20.980
要么是函数

38:20.980 --> 38:21.980
那么如果是支付串的话

38:21.980 --> 38:23.980
我们就直接拿到组色消息

38:23.980 --> 38:24.980
如果是函数的话

38:24.980 --> 38:25.980
调用函数

38:25.980 --> 38:26.980
把个Lokin Action

38:26.980 --> 38:27.980
传过去

38:27.980 --> 38:28.980
来得到组色消息

38:28.980 --> 38:30.980
关键是接下来干嘛

38:30.980 --> 38:32.980
接下来干嘛

38:34.980 --> 38:35.980
接下来干嘛

38:36.980 --> 38:37.980
接下来的事情

38:37.980 --> 38:39.980
是不是要运行那个玩意了

38:39.980 --> 38:40.980
回忆一下

38:41.980 --> 38:43.980
所以说圆码还是比较复杂的

38:43.980 --> 38:44.980
就这两节课

38:44.980 --> 38:45.980
我们这两节课讲的是

38:45.980 --> 38:46.980
熟悉

38:46.980 --> 38:48.980
Crazy Broxner History

38:48.980 --> 38:50.980
如果说你实在觉得很牢火

38:50.980 --> 38:51.980
那也没关系

38:51.980 --> 38:52.980
那你就直接用了个

38:52.980 --> 38:54.980
第三方那个History组建

38:54.980 --> 38:55.980
你会用就行了

38:55.980 --> 38:56.980
会用就行了

38:56.980 --> 38:57.980
那我建议大家

38:57.980 --> 38:59.980
肯定尽量的去听这个圆码

38:59.980 --> 39:01.980
你对圆码都了解了

39:02.980 --> 39:04.980
就非常非常清楚了

39:04.980 --> 39:06.980
那么现在我们来看一下

39:06.980 --> 39:08.980
是不是要用调用这个函数了

39:08.980 --> 39:10.980
get user confirmation

39:10.980 --> 39:12.980
这就是发生组色的时候

39:12.980 --> 39:13.980
要调用的函数

39:13.980 --> 39:14.980
我们之前讲过了

39:14.980 --> 39:15.980
只要有组色

39:15.980 --> 39:17.980
我就会把组色消息传给你

39:17.980 --> 39:19.980
然后还会给你一个回调函数

39:19.980 --> 39:21.980
这个回调函数你只要

39:21.980 --> 39:22.980
你只要一调用

39:22.980 --> 39:23.980
那么我就会继续跳转

39:23.980 --> 39:25.980
没调用就不会跳转

39:25.980 --> 39:27.980
那么回到这边来

39:28.980 --> 39:30.980
那么我们这里是不是要调用

39:30.980 --> 39:31.980
不是在这边

39:31.980 --> 39:33.980
那么是不是要调用

39:33.980 --> 39:34.980
调用啥

39:34.980 --> 39:35.980
调用这个函数

39:35.980 --> 39:37.980
get user confirmation

39:37.980 --> 39:38.980
调用这个函数

39:38.980 --> 39:41.980
关键是我在哪里去找这个函数呢

39:41.980 --> 39:42.980
我这里有吗

39:42.980 --> 39:43.980
没有

39:43.980 --> 39:44.980
没有

39:44.980 --> 39:46.980
那么有什么马上就想到

39:46.980 --> 39:47.980
那是不是可以通过

39:47.980 --> 39:48.980
函数传进来了

39:48.980 --> 39:50.980
当然可以

39:50.980 --> 39:52.980
通过函数传进来可以

39:52.980 --> 39:53.980
也可以通过

39:53.980 --> 39:55.980
创建这个迈接的时候

39:55.980 --> 39:56.980
通过构造函数传进来

39:56.980 --> 39:57.980
因为这个东西反正不变的

39:57.980 --> 39:58.980
对吧

39:58.980 --> 39:59.980
这是个配置

39:59.980 --> 40:00.980
创建它的时候

40:00.980 --> 40:02.980
那么就把配置好了

40:02.980 --> 40:03.980
所以它是不会变的

40:03.980 --> 40:04.980
所以说

40:04.980 --> 40:06.980
我们也可以通过构造函数传进来

40:06.980 --> 40:08.980
写个构造函数

40:08.980 --> 40:09.980
constructor

40:09.980 --> 40:10.980
你给我传一个啥

40:10.980 --> 40:12.980
传一个就是

40:12.980 --> 40:14.980
名字也弄一样

40:14.980 --> 40:16.980
把这个函数传进来

40:16.980 --> 40:17.980
我这里保存一下

40:17.980 --> 40:20.980
保存到get user confirmation里边

40:20.980 --> 40:21.980
保存进来

40:21.980 --> 40:23.980
保存进来就完事了

40:24.980 --> 40:25.980
于是我在这里

40:25.980 --> 40:26.980
调用什么呢

40:26.980 --> 40:27.980
就调用这个

40:27.980 --> 40:28.980
保存进来就完事了

40:28.980 --> 40:29.980
好

40:29.980 --> 40:30.980
Message

40:30.980 --> 40:31.980
消息是啥

40:31.980 --> 40:32.980
消息是我们刚才得到的消息

40:32.980 --> 40:33.980
对不对

40:33.980 --> 40:34.980
好

40:34.980 --> 40:38.300
关键是这个callback

40:38.300 --> 40:40.300
关键是这个callback

40:40.300 --> 40:42.300
这里也就是说

40:42.300 --> 40:44.300
有一个函数

40:44.300 --> 40:46.300
这个函数还有一个参数

40:46.300 --> 40:47.300
还有一个参数

40:47.300 --> 40:49.300
你只要调用这个函数

40:49.300 --> 40:51.300
那就表示

40:51.300 --> 40:53.300
你调用函数传列到一个处

40:53.300 --> 40:55.300
比方说传列到一个处

40:55.300 --> 40:56.300
那么就表示的是什么了

40:56.300 --> 40:57.300
表示的是

40:57.300 --> 40:58.300
我通过了

40:58.300 --> 40:59.300
就是我已经完成了

40:59.300 --> 41:00.300
可以跳转页面了

41:00.300 --> 41:01.300
可以跳转页面了

41:01.300 --> 41:03.300
如果你没有传列这个函数

41:03.300 --> 41:05.300
或者是传列这个函数

41:05.300 --> 41:08.300
为force或者其他值

41:08.300 --> 41:09.300
那么就表示

41:09.300 --> 41:10.300
我不通过

41:10.300 --> 41:11.300
不通过

41:11.300 --> 41:12.300
好

41:12.300 --> 41:13.300
那么接下来

41:13.300 --> 41:14.300
我们在这里

41:14.300 --> 41:15.300
是不是该传列一个函数

41:15.300 --> 41:16.300
对吧

41:16.300 --> 41:18.300
这个函数有一个就是result

41:18.300 --> 41:19.300
有一个参数

41:19.300 --> 41:20.300
这里要绕一点

41:20.300 --> 41:22.300
我把这个函数传给你

41:22.300 --> 41:23.300
你这里

41:23.300 --> 41:24.300
如果说你调用这个函数的时候

41:24.300 --> 41:25.300
你给我传了一个处进来

41:25.300 --> 41:27.300
如果result等于处

41:28.300 --> 41:30.300
如果说你给我传了一个处进来

41:30.300 --> 41:31.300
所以表示我通过了

41:31.300 --> 41:32.300
对不对

41:32.300 --> 41:34.300
可以跳转了

41:34.300 --> 41:35.300
可以跳转了

41:35.300 --> 41:37.300
那么 else 是不是不能跳转

41:37.300 --> 41:39.300
其他情况就不能跳转

41:39.300 --> 41:40.300
那关键是可以跳转的时候

41:40.300 --> 41:41.300
我怎么跳转呢

41:41.300 --> 41:43.300
我要具体做什么事情呢

41:43.300 --> 41:44.300
我怎么去

41:44.300 --> 41:47.300
就是我具体做什么事情呢

41:47.300 --> 41:48.300
那么这个问题怎么解决呢

41:48.300 --> 41:49.300
可以跳转了

41:49.300 --> 41:50.300
我具体做什么事

41:50.300 --> 41:51.300
那我是不是不知道

41:51.300 --> 41:53.300
在这个类里边是不知道的

41:53.300 --> 41:56.300
那你是不是这里要传个callback给我

41:56.300 --> 41:57.300
对吧

41:57.300 --> 41:58.300
callback给我

41:58.300 --> 41:59.300
你给我传个callback

41:59.300 --> 42:01.300
那么我可以跳转了

42:01.300 --> 42:02.300
那我去调用这个callback

42:02.300 --> 42:04.300
你看这是一层一层毁掉过来的

42:04.300 --> 42:06.300
就这里要稍微绕一点

42:06.300 --> 42:07.300
要绕一点

42:07.300 --> 42:09.300
你触发这个组设的时候

42:09.300 --> 42:10.300
就是这个组设完成

42:10.300 --> 42:12.300
就是完成之后

42:12.300 --> 42:14.300
完成之后要干嘛

42:14.300 --> 42:15.300
你要干嘛

42:15.300 --> 42:16.300
那么callback传给我

42:16.300 --> 42:18.300
那么这个callback表示什么意思呢

42:18.300 --> 42:19.300
我打算一个详细的注释

42:19.300 --> 42:21.300
它这个类型是函数

42:21.300 --> 42:23.300
这个callback

42:23.300 --> 42:24.300
它表示什么意思呢

42:24.300 --> 42:26.300
就是当可以

42:26.300 --> 42:29.300
就是当

42:29.300 --> 42:32.300
组设完成之后

42:32.300 --> 42:34.300
组设完成之后

42:34.300 --> 42:36.300
要做的事情

42:36.300 --> 42:38.300
就是说

42:38.300 --> 42:40.300
一般是跳转页面

42:40.300 --> 42:42.300
一般是跳转页面

42:42.300 --> 42:43.300
跳转页面

42:43.300 --> 42:45.300
就是我一个组设不再进行的

42:45.300 --> 42:46.300
那么你要做什么事情

42:46.300 --> 42:47.300
跳转页面

42:47.300 --> 42:48.300
把callback传给我

42:48.300 --> 42:49.300
那在这个代码里边

42:49.300 --> 42:50.300
哪些地方可以

42:50.300 --> 42:52.300
就是表示组设完成了

42:52.300 --> 42:54.300
你没有组设

42:54.300 --> 42:55.300
一下就完成了

42:55.300 --> 42:56.300
一下就完成了

42:56.300 --> 42:57.300
可以继续了

42:57.300 --> 42:58.300
可以继续了

42:58.300 --> 42:59.300
那么这个地方

42:59.300 --> 43:00.300
我干嘛

43:00.300 --> 43:01.300
我不是说

43:01.300 --> 43:02.300
当然我要return结束

43:02.300 --> 43:03.300
然后我要调用callback

43:03.300 --> 43:04.300
对不对

43:04.300 --> 43:05.300
调用callback

43:05.300 --> 43:06.300
还有什么情况呢

43:06.300 --> 43:08.300
还有就是说

43:08.300 --> 43:10.300
你调用了这个user confirmation

43:10.300 --> 43:11.300
这个函数

43:11.300 --> 43:12.300
调用了这个函数

43:12.300 --> 43:13.300
给他传了个消息进去

43:13.300 --> 43:14.300
他在处理的过程中

43:14.300 --> 43:16.300
调用了我给他传的这个函数

43:16.300 --> 43:18.300
并且他传了一个处进来

43:18.300 --> 43:19.300
是不是我也可以跳转了

43:19.300 --> 43:20.300
对吧

43:20.300 --> 43:21.300
也会运行callback

43:21.300 --> 43:22.300
看没

43:22.300 --> 43:23.300
咱们就写出来这么一个东西

43:23.300 --> 43:25.300
就这个函数大家好好理解

43:25.300 --> 43:26.300
这个函数不是那么好理解

43:26.300 --> 43:27.300
因为有回调

43:27.300 --> 43:29.300
反而是遇到回调的地方了

43:29.300 --> 43:30.300
都不要容易

43:30.300 --> 43:31.300
容易绕晕

43:31.300 --> 43:32.300
都容易绕晕

43:32.300 --> 43:33.300
没关系

43:33.300 --> 43:35.300
咱们来试用一下吧

43:35.300 --> 43:36.300
用一下

43:36.300 --> 43:37.300
来看一下

43:37.300 --> 43:38.300
去一个block

43:38.300 --> 43:40.300
到这边来

43:40.300 --> 43:41.300
那么现在

43:41.300 --> 43:42.300
我们是不是要创建一个

43:42.300 --> 43:43.300
又要创建一个什么

43:43.300 --> 43:44.300
就是

43:44.300 --> 43:46.300
block manager

43:49.300 --> 43:50.300
在这下面创建

43:50.300 --> 43:51.300
把那个解构出来过

43:51.300 --> 43:52.300
再创建

43:52.300 --> 43:55.300
六一个block manager

43:55.300 --> 43:56.300
六一个

43:56.300 --> 43:57.300
它是不是要一个

43:57.300 --> 43:58.300
guess user confirmation

43:58.300 --> 44:00.300
OK 我把这个传进去

44:00.300 --> 44:01.300
guess user confirmation传进去

44:01.300 --> 44:03.300
得到一个block manager

44:03.300 --> 44:04.300
那么接下来

44:04.300 --> 44:05.300
我们来看一下

44:05.300 --> 44:07.300
比方说push的时候

44:07.300 --> 44:09.300
push的时候

44:09.300 --> 44:10.300
push的时候

44:10.300 --> 44:12.300
我们不是调用这个函数吗

44:12.300 --> 44:13.300
对吧 这个函数里边

44:13.300 --> 44:14.300
拿到什么

44:14.300 --> 44:16.300
x 也算是乱七八糟的东西

44:16.300 --> 44:18.300
拿到这些东西

44:18.300 --> 44:20.300
那么在push的时候

44:20.300 --> 44:21.300
在千几配几的时候

44:21.300 --> 44:22.300
比方说我们这里

44:22.300 --> 44:24.300
是不是可以调用block manager

44:24.300 --> 44:26.300
你先要够触发一个组设

44:26.300 --> 44:28.300
你够传一个nok型进来

44:28.300 --> 44:29.300
传一个x型进来

44:29.300 --> 44:30.300
对吧

44:30.300 --> 44:32.300
你够触发一下组设

44:32.300 --> 44:33.300
那么我们把

44:33.300 --> 44:35.300
比方说这里不是拿到了

44:35.300 --> 44:36.300
一个x型

44:36.300 --> 44:37.300
也拿到了nok型

44:37.300 --> 44:38.300
对吧

44:38.300 --> 44:39.300
在这里不是拿到了吗

44:39.300 --> 44:40.300
那我们肯定是

44:40.300 --> 44:41.300
先不要着急触发监听器

44:41.300 --> 44:42.300
因为有可能监听器

44:42.300 --> 44:43.300
不会触发

44:43.300 --> 44:44.300
它只要没有组设

44:44.300 --> 44:45.300
它如果有组设的话

44:45.300 --> 44:47.300
它没有让我跳转

44:47.300 --> 44:48.300
我肯定是触发不了

44:48.300 --> 44:49.300
触发不了

44:49.300 --> 44:50.300
所以我在这里触发一个block

44:51.300 --> 44:52.300
触发一个block

44:52.300 --> 44:53.300
那么它要传一个nok型进去

44:53.300 --> 44:54.300
ok 我传给你

44:54.300 --> 44:55.300
x型要传进去

44:55.300 --> 44:56.300
我传给你

44:56.300 --> 44:57.300
你还要传coreback

44:57.300 --> 44:59.300
就是我完成组设之后

44:59.300 --> 45:00.300
要干嘛呢

45:01.300 --> 45:02.300
这些代码

45:02.300 --> 45:04.300
就是我完成组设之后

45:04.300 --> 45:05.300
要干的事情

45:07.300 --> 45:08.300
触发监听器

45:08.300 --> 45:09.300
就是你只要完成了组设

45:09.300 --> 45:11.300
我才会有这些事情

45:11.300 --> 45:12.300
没有完成组设

45:12.300 --> 45:14.300
我是不会有这些事情的

45:15.300 --> 45:16.300
就这么个意思

45:16.300 --> 45:18.300
你看我把这个函数的处理

45:18.300 --> 45:19.300
传给了谁

45:19.300 --> 45:20.300
传给了你

45:20.300 --> 45:21.300
传给了这个coreback

45:21.300 --> 45:22.300
他又把这个coreback传给了谁

45:22.300 --> 45:24.300
传给了getUserConfirmation

45:24.300 --> 45:25.300
传给到这

45:25.300 --> 45:26.300
传到这

45:26.300 --> 45:28.300
而getUserConfirmation里边

45:28.300 --> 45:30.300
一层一层传过来的

45:32.300 --> 45:33.300
getUserConfirmation里边

45:33.300 --> 45:34.300
是不是

45:34.300 --> 45:35.300
它的coreback就传过来了

45:35.300 --> 45:36.300
一层一层传过来了

45:37.300 --> 45:38.300
那么这样子

45:38.300 --> 45:39.300
在这个coreback里边

45:40.300 --> 45:41.300
它只要给它一个q

45:41.300 --> 45:42.300
只要你调用一个q

45:42.300 --> 45:44.300
那么调用了q过后

45:44.300 --> 45:45.300
你看这个result是不是q

45:45.300 --> 45:46.300
对吧

45:46.300 --> 45:47.300
result是q的话

45:47.300 --> 45:48.300
就可以调用

45:48.300 --> 45:49.300
这边的coreback

45:49.300 --> 45:50.300
就可以调用这个回调函数了

45:50.300 --> 45:51.300
那么这个回调函数

45:51.300 --> 45:53.300
是不是就是这里的回调函数

45:53.300 --> 45:54.300
就下面这个

45:54.300 --> 45:55.300
它有点绕

45:55.300 --> 45:56.300
这里有点绕

45:57.300 --> 45:58.300
是不是就这个回调函数

45:58.300 --> 45:59.300
对吧

45:59.300 --> 46:00.300
它就是完成后续了

46:00.300 --> 46:01.300
什么触发监听器

46:01.300 --> 46:02.300
改变X型

46:02.300 --> 46:03.300
对吧

46:03.300 --> 46:04.300
改变什么KeyStore

46:04.300 --> 46:05.300
这些东西

46:05.300 --> 46:06.300
是不是具体的跳转

46:06.300 --> 46:07.300
对吧

46:07.300 --> 46:08.300
我们就把它写到这里

46:08.300 --> 46:09.300
那写到这里

46:09.300 --> 46:10.300
是不是铺写搞定了

46:10.300 --> 46:11.300
replace搞定了

46:11.300 --> 46:12.300
咱们来试一下

46:13.300 --> 46:14.300
看一下

46:15.300 --> 46:16.300
现在我们调用

46:18.300 --> 46:19.300
这样子

46:19.300 --> 46:21.300
我们用my history

46:21.300 --> 46:23.300
调用一下blog

46:23.300 --> 46:24.300
blog

46:24.300 --> 46:26.300
我这里写blog没有

46:26.300 --> 46:27.300
写blog没有

46:27.300 --> 46:28.300
还没有写对吧

46:28.300 --> 46:29.300
还没有写

46:29.300 --> 46:30.300
那简单

46:30.300 --> 46:31.300
翻个形

46:31.300 --> 46:32.300
翻个形

46:32.300 --> 46:33.300
这里是blog

46:34.300 --> 46:35.300
blog

46:35.300 --> 46:38.300
那么这里是prop

46:38.300 --> 46:40.300
那么这里就是

46:40.300 --> 46:42.300
直接返回

46:42.300 --> 46:45.300
就是blog manager

46:45.300 --> 46:46.300
调用blog

46:46.300 --> 46:48.300
把prop传进去

46:48.300 --> 46:50.300
直接返回就完了

46:50.300 --> 46:52.300
那么把它blog给它

46:53.300 --> 46:54.300
看一下吧

46:55.300 --> 46:56.300
调用blog

46:58.300 --> 47:00.300
我们给它传递一个消息

47:01.300 --> 47:03.300
真的要跳转吗

47:04.300 --> 47:05.300
好

47:05.300 --> 47:06.300
看着

47:08.300 --> 47:10.300
我试一个制服处

47:10.300 --> 47:11.300
我这里刚才

47:11.300 --> 47:13.300
这个判断还有问题

47:13.300 --> 47:14.300
它说

47:14.300 --> 47:18.860
如果不是一个制服处

47:18.860 --> 47:19.860
这里不能用race

47:19.860 --> 47:21.860
直接判断这个参数

47:21.860 --> 47:22.860
不能用race

47:22.860 --> 47:24.860
因为race还没有复制

47:24.860 --> 47:25.860
一开始没复制

47:25.860 --> 47:26.860
看一下

47:28.860 --> 47:29.860
真的要跳转吗

47:29.860 --> 47:30.860
是不是拿到一个

47:30.860 --> 47:31.860
对吧

47:31.860 --> 47:32.860
拿到一个就是blog

47:32.860 --> 47:33.860
那个解除blog的东西

47:33.860 --> 47:34.860
解除blog的东西

47:34.860 --> 47:36.860
先拿一下

47:36.860 --> 47:37.860
先拿一下

47:38.860 --> 47:40.860
重新调用一次

47:40.860 --> 47:41.860
my history

47:41.860 --> 47:42.860
blog

47:43.860 --> 47:45.860
真的要跳转吗

47:46.860 --> 47:48.860
然后拿到这个blog

47:48.860 --> 47:49.860
接下来

47:49.860 --> 47:51.860
我们跳转

47:51.860 --> 47:52.860
push

47:53.860 --> 47:54.860
比方说跳转到这

47:57.820 --> 47:58.820
你看

47:58.820 --> 47:59.820
跳转到这

48:00.820 --> 48:01.820
这里有问题

48:01.820 --> 48:02.820
这里有问题

48:02.820 --> 48:03.820
它直接跳转了

48:03.820 --> 48:04.820
直接跳转了

48:04.820 --> 48:05.820
点取消

48:05.820 --> 48:06.820
点取消是不能跳转的

48:06.820 --> 48:07.820
我们再来一次

48:07.820 --> 48:09.820
这里跳转到123

48:10.820 --> 48:11.820
这里有问题

48:11.820 --> 48:12.820
它直接跳转了

48:12.820 --> 48:13.820
那肯定不行

48:13.820 --> 48:14.820
肯定不能允许它直接跳转

48:15.820 --> 48:16.820
我们来看一下

48:19.820 --> 48:20.820
看一下在这里

48:20.820 --> 48:21.820
到这边来

48:21.820 --> 48:24.260
change

48:24.260 --> 48:25.260
page

48:27.260 --> 48:29.260
我大概明白了

48:29.260 --> 48:30.260
我大概明白了

48:30.260 --> 48:32.260
是因为我这里得到location的话

48:32.260 --> 48:34.260
我得到location的话

48:34.260 --> 48:35.260
是这样子

48:35.260 --> 48:37.260
我得到这个location的话

48:37.260 --> 48:39.260
我这里就已经完成了

48:39.260 --> 48:40.260
history push step

48:40.260 --> 48:41.260
是不是已经完成了

48:41.260 --> 48:42.260
对不对

48:42.260 --> 48:43.260
已经完成了

48:43.260 --> 48:44.260
history push step

48:44.260 --> 48:45.260
目以成都了

48:45.260 --> 48:46.260
已经跳转了

48:46.260 --> 48:48.260
只是我没有做后续的事情而已

48:48.260 --> 48:49.260
所以

48:49.260 --> 48:51.260
这个代码应该写到这来

48:51.260 --> 48:52.260
按你说的话

48:52.260 --> 48:54.260
这个代码是不是应该写到这来

48:55.260 --> 48:57.260
应该写到这来

48:57.260 --> 48:58.260
对不对

48:58.260 --> 48:59.260
但是这里又出一个问题

48:59.260 --> 49:01.260
这里我们之前没考虑到

49:01.260 --> 49:02.260
那么如果说

49:02.260 --> 49:04.260
把这个东西写到这来的话

49:04.260 --> 49:05.260
那我location是不是得不到

49:05.260 --> 49:07.260
得不到新的location了

49:07.260 --> 49:09.260
也就是说现在是个啥问题呢

49:09.260 --> 49:11.260
如果说我这里不完成真实的跳转

49:11.260 --> 49:13.260
我拿不到新的location对象

49:15.260 --> 49:17.260
如果说我要拿新的location对象的话

49:17.260 --> 49:19.260
我又不能完成真实的跳转

49:20.260 --> 49:22.260
如果我要拿新的location对象

49:22.260 --> 49:23.260
我就必须要完成真实的跳转

49:23.260 --> 49:24.260
对吧

49:24.260 --> 49:26.260
但是我这里有一个block

49:26.260 --> 49:28.260
block的话是不能跳转的

49:28.260 --> 49:30.260
不能说先发生真实的跳转

49:30.260 --> 49:32.260
然后再去拿这个location对象

49:32.260 --> 49:34.260
那如果他已经主色了

49:34.260 --> 49:36.260
他不跳转了怎么办

49:36.260 --> 49:37.260
你已经跳转了

49:37.260 --> 49:38.260
那怎么办了

49:38.260 --> 49:40.260
所以说这个创建location

49:40.260 --> 49:42.260
我之前没有考虑到很周到

49:43.260 --> 49:45.260
我们之前是直接根据history来拿到的

49:45.260 --> 49:46.260
对吧

49:46.260 --> 49:48.260
我们这里其实还要

49:48.260 --> 49:50.260
还要创建一个

49:50.260 --> 49:52.260
就是还要一个就是location对象

49:53.260 --> 49:55.260
还需要一个创建location

49:56.260 --> 49:57.260
from

49:57.260 --> 49:58.260
from什么了

49:59.260 --> 50:00.260
我看一下

50:01.260 --> 50:03.260
from那个

50:06.260 --> 50:07.260
看一下

50:08.260 --> 50:11.260
from pass

50:11.260 --> 50:12.260
from pass

50:13.260 --> 50:16.260
我要重新去创建一个location对象

50:16.260 --> 50:17.260
from pass

50:17.260 --> 50:19.260
也就是说你给我一个什么了

50:19.260 --> 50:20.260
pass info

50:20.260 --> 50:22.260
我也能给你返回一个

50:22.260 --> 50:24.260
还给我一个base name

50:24.260 --> 50:25.260
给我一个base name

50:25.260 --> 50:28.260
也能给你返回一个location对象

50:29.260 --> 50:31.260
根据pass info

50:31.260 --> 50:34.260
得到一个location对象

50:34.260 --> 50:37.570
你给我一个pass info

50:37.570 --> 50:39.570
也能拿到一个location对象

50:39.570 --> 50:40.570
我再说一下

50:40.570 --> 50:41.570
现在问题是什么了

50:41.570 --> 50:43.570
问题是我为了拿到新的location对象

50:43.570 --> 50:44.570
我就必须要完成跳转

50:44.570 --> 50:47.570
但是我现在是主色不能先完成跳转

50:47.570 --> 50:48.570
但是不先完成跳转的话

50:48.570 --> 50:50.570
我就拿不到这个的口型对象

50:50.570 --> 50:51.570
你看这个意思吧

50:51.570 --> 50:55.570
所以说我现在需要一个新的函数

50:55.570 --> 50:57.570
新的函数就是

50:58.570 --> 51:00.570
这里的create location是这样子的

51:00.570 --> 51:02.570
create location from pass

51:02.570 --> 51:05.570
那么这里要传到什么 pass info

51:05.570 --> 51:07.570
就是把这个东西传进去

51:07.570 --> 51:08.570
就这个东西

51:08.570 --> 51:10.570
就是我们之前写的函数返回来的东西

51:10.570 --> 51:13.570
里边的返回来的结果是这样子的

51:16.570 --> 51:18.570
返回来的结果是这么一种格式

51:18.570 --> 51:19.570
这么一种格式

51:19.570 --> 51:20.570
没问题吧

51:20.570 --> 51:22.570
我们要拿到这么一种格式的一个字幕串

51:22.570 --> 51:24.570
然后把它变成一个location对象

51:24.570 --> 51:26.570
这里要稍微绕一点

51:26.570 --> 51:27.570
绕一点

51:27.570 --> 51:28.570
那么这里呢

51:29.570 --> 51:30.570
这里又换过来了

51:31.570 --> 51:34.570
那么这样我就可以通过它拿到新的location对象了

51:34.570 --> 51:37.570
如果说你真正的要跳转的话

51:37.570 --> 51:38.570
我在这里

51:38.570 --> 51:40.570
把这个代码写下来了

51:41.570 --> 51:44.570
就不能一开始就不能真的完成跳转了

51:44.570 --> 51:46.570
那么现在我们要实现这个函数

51:46.570 --> 51:48.570
create location from pass

51:48.570 --> 51:50.570
根据pass info来得到一个location对象

51:50.570 --> 51:52.570
那么这个pass info里边

51:52.570 --> 51:54.570
我们刚才之前写过的

51:54.570 --> 51:56.570
这个pass info里边

51:56.570 --> 51:57.570
包含两个属性

51:57.570 --> 51:59.570
一个是pass这个属性

51:59.570 --> 52:00.570
它大概的格式是这样子

52:00.570 --> 52:02.570
一个啥啥啥

52:02.570 --> 52:03.570
pass info对不对

52:03.570 --> 52:05.570
一个啥啥

52:05.570 --> 52:07.570
然后后面可能又

52:07.570 --> 52:08.570
全部写到一起的

52:08.570 --> 52:09.570
看没

52:09.570 --> 52:10.570
全部写到一起的

52:10.570 --> 52:11.570
然后呢

52:13.570 --> 52:15.570
然后后面还有可能有哈希

52:15.570 --> 52:16.570
还有可能有哈希

52:16.570 --> 52:17.570
对吧

52:17.570 --> 52:18.570
全部写到一起的

52:19.570 --> 52:20.570
这是个pass info

52:20.570 --> 52:21.570
对

52:21.570 --> 52:22.570
pass属性

52:22.570 --> 52:23.570
还有个什么state属性

52:23.570 --> 52:24.570
state属性好说

52:24.570 --> 52:25.570
state属性好说

52:25.570 --> 52:27.570
那么state属性的就是

52:27.570 --> 52:28.570
拿到的是什么

52:28.570 --> 52:29.570
拿到的就是状态

52:29.570 --> 52:30.570
拿到的是状态

52:30.570 --> 52:31.570
新的状态

52:31.570 --> 52:32.570
那么通过这个呢

52:32.570 --> 52:34.570
我来创建一个

52:35.570 --> 52:36.570
location对象

52:36.570 --> 52:37.570
对吧

52:37.570 --> 52:38.570
我要通过这个东西来

52:38.570 --> 52:39.570
创建一个location对象

52:40.570 --> 52:41.570
这状态

52:41.570 --> 52:45.480
好

52:45.480 --> 52:46.480
那么这个location对象

52:46.480 --> 52:47.480
你看一下这边

52:48.480 --> 52:49.480
这边location对象

52:49.480 --> 52:50.480
不就是这些属性吗

52:50.480 --> 52:51.480
对不对

52:51.480 --> 52:52.480
无非我就是根据pass

52:52.480 --> 52:53.480
把哈希分析出来

52:53.480 --> 52:55.480
把这个search分析出来

52:55.480 --> 52:57.480
把这个passname分析出来

52:57.480 --> 52:58.480
对不对

52:58.480 --> 52:59.480
就把这个3个分析出来

52:59.480 --> 53:00.480
就完成了

53:00.480 --> 53:01.480
就完成了

53:01.480 --> 53:02.480
那么

53:02.480 --> 53:03.480
通过一个字母创

53:03.480 --> 53:04.480
把这个3个东西分析出来

53:04.480 --> 53:05.480
然后再加上个state

53:05.480 --> 53:06.480
state它已经告诉你了

53:06.480 --> 53:07.480
你直接夹就行就行了

53:07.480 --> 53:08.480
然后passname呢

53:08.480 --> 53:09.480
把那个去掉

53:09.480 --> 53:11.480
把这个state去掉

53:11.480 --> 53:12.480
把这个state去掉

53:12.480 --> 53:13.480
是不是就完了

53:13.480 --> 53:14.480
好

53:14.480 --> 53:15.480
那么现在我们要根据这个字母创

53:15.480 --> 53:16.480
分析出3个东西

53:16.480 --> 53:17.480
一个是passinfo

53:17.480 --> 53:18.480
passname

53:18.480 --> 53:19.480
一个是

53:19.480 --> 53:20.480
比方说第一個

53:20.480 --> 53:22.920
passname

53:23.920 --> 53:24.920
passname

53:24.920 --> 53:26.920
那么是不是要拿这一串

53:26.920 --> 53:27.920
对不对

53:27.920 --> 53:28.920
是不是要拿到这一串

53:28.920 --> 53:29.920
没问题吧

53:29.920 --> 53:30.920
是不是要拿这一串

53:30.920 --> 53:31.920
好

53:31.920 --> 53:32.920
拿这一串的话

53:32.920 --> 53:33.920
怎么去拿

53:34.920 --> 53:35.920
怎么拿呀

53:36.920 --> 53:37.920
怎么拿这一串呢

53:37.920 --> 53:38.920
是不是我们要分析出

53:38.920 --> 53:39.920
问号的位置

53:39.920 --> 53:40.920
以及分析出

53:40.920 --> 53:41.920
警号的位置

53:41.920 --> 53:42.920
对不对

53:42.920 --> 53:43.920
字母创动问号的位置

53:43.920 --> 53:44.920
和警号的位置

53:44.920 --> 53:45.920
好

53:45.920 --> 53:46.920
来吧

53:46.920 --> 53:47.920
来吧

53:48.920 --> 53:49.920
我们这里得到

53:50.920 --> 53:54.000
问号

53:54.000 --> 53:55.000
我这种评议

53:55.000 --> 53:56.000
问号index

53:57.000 --> 53:58.000
来自于

53:58.000 --> 54:00.000
passinfo

54:00.000 --> 54:02.000
passinfo里边的

54:02.000 --> 54:03.000
index

54:04.000 --> 54:05.000
点pass

54:06.000 --> 54:07.000
第二

54:07.000 --> 54:08.000
index

54:08.000 --> 54:09.000
什么呢

54:09.000 --> 54:10.000
问号

54:10.000 --> 54:11.000
分析出他

54:11.000 --> 54:12.000
第一个问号的位置

54:13.000 --> 54:15.000
passinfo

54:16.000 --> 54:18.000
拿到这个问号的位置

54:18.000 --> 54:19.000
好

54:19.000 --> 54:20.000
然后还要拿到一个

54:20.000 --> 54:21.000
警号的位置

54:21.000 --> 54:22.000
警号的位置

54:22.000 --> 54:23.000
sharp

54:24.000 --> 54:25.000
sharp

54:25.000 --> 54:26.000
就sharp符号

54:26.000 --> 54:27.000
index

54:27.000 --> 54:28.000
问号就是

54:28.000 --> 54:29.000
问号叫啥

54:29.000 --> 54:30.000
问号叫啥

54:30.000 --> 54:31.000
question

54:31.000 --> 54:32.000
question

54:32.000 --> 54:33.000
我就这样写了

54:33.000 --> 54:34.000
好

54:34.000 --> 54:36.000
拿到这个passinfo

54:36.000 --> 54:38.000
passindex

54:38.000 --> 54:40.000
第一个警号的位置

54:40.000 --> 54:41.000
拿到这两个东西

54:41.000 --> 54:42.000
好

54:42.000 --> 54:43.000
那么passname

54:43.000 --> 54:44.000
是不是可以取出来了

54:44.000 --> 54:45.000
passname

54:45.000 --> 54:46.000
如果说

54:46.000 --> 54:48.000
如果说

54:48.000 --> 54:50.000
问号的位置

54:50.000 --> 54:51.000
question

54:51.000 --> 54:52.000
index

54:52.000 --> 54:54.000
大于等于0

54:54.000 --> 54:55.000
大于等于0

54:56.000 --> 54:57.000
那么问号是不是问

54:57.000 --> 54:58.000
这个字母创动有问号

54:58.000 --> 54:59.000
对不对

54:59.000 --> 55:00.000
是有问号

55:00.000 --> 55:01.000
ok

55:01.000 --> 55:02.000
有问号的话

55:02.000 --> 55:03.000
那么简单

55:04.000 --> 55:05.000
passname

55:06.000 --> 55:08.570
passname

55:09.570 --> 55:10.570
好

55:10.570 --> 55:14.070
那么如果说有问号的话

55:14.070 --> 55:15.070
passname

55:16.070 --> 55:17.070
应该等于什么呢

55:17.070 --> 55:20.070
等于passinfo的pass

55:20.070 --> 55:22.070
就整个这个字母创

55:22.070 --> 55:23.070
是不是解析字母创

55:23.070 --> 55:25.070
substune

55:25.070 --> 55:27.070
substune

55:27.070 --> 55:28.070
substune

55:28.070 --> 55:29.070
第一个呢

55:29.070 --> 55:30.070
其实

55:30.070 --> 55:32.070
其实位置从0开始解去

55:32.070 --> 55:34.070
解析到结束位置呢

55:34.070 --> 55:36.070
结束位置呢

55:36.070 --> 55:38.070
结束位置是

55:38.070 --> 55:39.070
不包含的

55:39.070 --> 55:41.070
是不是结束到问号位置

55:41.070 --> 55:42.070
对吧

55:42.070 --> 55:43.070
question index

55:43.070 --> 55:44.070
就结束这一段就行了

55:44.070 --> 55:45.070
好

55:45.070 --> 55:46.070
这是passname

55:46.070 --> 55:47.070
如果有问号的情况下

55:47.070 --> 55:49.070
如果说没有问号

55:49.070 --> 55:50.070
但是有警号的话

55:50.070 --> 55:51.070
sharp index

55:51.070 --> 55:53.070
大于等于0

55:53.070 --> 55:55.070
没有问号

55:55.070 --> 55:56.070
但是有警号

55:56.070 --> 55:57.070
有警号的话

55:57.070 --> 55:58.070
这个passname

55:58.070 --> 55:59.070
是不是拿到substune

55:59.070 --> 56:00.070
从0开始解析到

56:00.070 --> 56:01.070
sharp index

56:01.070 --> 56:02.070
对吧

56:02.070 --> 56:04.070
然后再一ls

56:04.070 --> 56:05.070
如果又没有问号

56:05.070 --> 56:06.070
又没有警号

56:06.070 --> 56:07.070
那么passname

56:07.070 --> 56:08.070
就整个

56:08.070 --> 56:09.070
整个字母创

56:09.070 --> 56:10.070
对不对

56:10.070 --> 56:11.070
好

56:11.070 --> 56:12.070
这样子是不是把

56:12.070 --> 56:14.070
passname搞定了

56:14.070 --> 56:15.070
passname就搞定了

56:15.070 --> 56:16.070
好

56:16.070 --> 56:17.070
passname搞定了过后

56:17.070 --> 56:18.070
你不要忘记了

56:18.070 --> 56:19.070
passname搞定了过后

56:19.070 --> 56:20.070
不要忘记了

56:20.070 --> 56:21.070
还要去

56:21.070 --> 56:24.070
还要去把那个bassname处理掉

56:24.070 --> 56:25.070
处理一下bassname

56:25.070 --> 56:27.070
处理一下bassname

56:27.070 --> 56:29.070
就跟之前的处理方式一样了

56:29.070 --> 56:30.070
把bassname去掉

56:30.070 --> 56:32.070
把passname拿到了

56:32.070 --> 56:33.070
好

56:33.070 --> 56:34.070
passname拿到了

56:34.070 --> 56:35.070
然后再去拿什么

56:36.070 --> 56:37.070
search

56:37.070 --> 56:38.070
再去拿search

56:40.070 --> 56:43.070
就是取出passname

56:44.070 --> 56:47.070
那么这里是取出search

56:47.070 --> 56:48.070
再去拿search

56:48.070 --> 56:49.070
又来个变量

56:49.070 --> 56:50.070
search

56:51.070 --> 56:53.070
那么search这个变量是不一样的

56:53.070 --> 56:55.070
如果说question index

56:55.070 --> 56:56.070
大于等于0

56:58.070 --> 56:59.070
如果说它有那个问号

57:00.070 --> 57:02.070
有问号是不是从问号位置开始拿

57:02.070 --> 57:03.070
对吧

57:03.070 --> 57:04.070
从问号位置开始拿

57:06.070 --> 57:07.070
拿到哪呢

57:07.070 --> 57:08.070
拿到警号位置

57:08.070 --> 57:09.070
对吧

57:09.070 --> 57:10.070
拿到警号位置

57:10.070 --> 57:11.070
那么看一下有没有警号位置

57:11.070 --> 57:12.070
search index

57:13.070 --> 57:14.070
就自取分析

57:14.070 --> 57:15.070
当然利用证则也可以

57:15.070 --> 57:16.070
就是这个去全评你自己的

57:16.070 --> 57:18.070
总之你要根据这个字幕创

57:18.070 --> 57:19.070
你要根据这个字幕创

57:19.070 --> 57:20.070
拿到一个楼梯性对象

57:21.070 --> 57:24.070
如果说大于等于0

57:24.070 --> 57:26.070
有警号

57:30.070 --> 57:31.070
问号位置

57:31.070 --> 57:33.070
就问号后边有警号

57:33.070 --> 57:34.070
这样子好像不太行

57:36.070 --> 57:37.070
这样子不太行

57:37.070 --> 57:38.070
因为我现在考虑到这种情况

57:39.070 --> 57:40.070
我还没考虑到这种情况

57:41.070 --> 57:42.070
这个问号在警号后边

57:44.070 --> 57:45.070
还没有考虑到这种情况

57:47.070 --> 57:48.070
要不然我用证则算了

57:50.070 --> 57:51.070
要不然我用证则算了

57:52.070 --> 57:53.070
用证则算了

57:54.070 --> 57:55.070
行吧

57:55.070 --> 57:56.070
我用证则吧

57:57.070 --> 57:58.070
我用证则算了

58:00.070 --> 58:01.070
算了

58:03.070 --> 58:04.070
我用证则算了

58:05.070 --> 58:06.070
来吧

58:06.070 --> 58:07.070
我用证则

58:07.070 --> 58:08.070
那么首先这个passname

58:11.070 --> 58:12.070
复字

58:12.070 --> 58:13.070
复字为什么呢

58:13.070 --> 58:15.070
passinfo.pass

58:15.070 --> 58:16.070
就是这个路径

58:16.070 --> 58:19.070
这个路径我们使用replace替换

58:20.070 --> 58:21.070
我要把这一坨找出来

58:21.070 --> 58:22.070
在这字幕创中

58:22.070 --> 58:23.070
把这一坨找出来

58:25.070 --> 58:27.070
然后把它替换成一个空字幕创

58:28.070 --> 58:30.070
是不是剩下的就是passname了

58:30.070 --> 58:31.070
对不对

58:31.070 --> 58:33.070
那么这一坨有可能是以警号开头

58:33.070 --> 58:35.070
有可能是以问号开头

58:35.070 --> 58:37.070
有可能是以警号开头

58:37.070 --> 58:38.070
有可能是以问号开头

58:38.070 --> 58:39.070
但是不管是以警号开头

58:39.070 --> 58:40.070
还是以问号开头

58:40.070 --> 58:41.070
我都要把它找出来

58:41.070 --> 58:42.070
然后直接替换掉

58:43.070 --> 58:44.070
那么这里的证则

58:44.070 --> 58:45.070
我们可以这样子写

58:45.070 --> 58:46.070
怎么写呢

58:46.070 --> 58:49.580
它可能是警号开头

58:50.580 --> 58:51.580
可能是问号开头

58:51.580 --> 58:52.580
可能是一个警号

58:52.580 --> 58:53.580
可能是一个问号

58:55.580 --> 58:56.580
然后

58:58.580 --> 59:00.580
后边是任意制服

59:00.580 --> 59:01.580
后边跟上任意制服

59:01.580 --> 59:03.580
任意制服出现

59:03.580 --> 59:04.580
零次或多次

59:04.580 --> 59:05.580
但是前边一定是

59:05.580 --> 59:06.580
要么是一个警号

59:06.580 --> 59:07.580
要么是个问号

59:09.580 --> 59:11.580
咱们把这个写出来

59:11.580 --> 59:12.580
然后后边是字幕创结束

59:14.580 --> 59:15.580
把这个东西替换成咋了

59:15.580 --> 59:16.580
替换成空字幕创

59:17.580 --> 59:18.580
替换成空字幕创

59:18.580 --> 59:20.580
那么这样子得到一个passname

59:21.580 --> 59:22.580
打印一下吧

59:22.580 --> 59:23.580
passname

59:25.580 --> 59:27.580
把这个函数保存到Windows里边

59:27.580 --> 59:31.100
试一下吧

59:31.100 --> 59:32.100
咱们来试一下

59:32.100 --> 59:33.100
这个东西不要了

59:35.100 --> 59:36.100
试一下

59:36.100 --> 59:37.100
这个函数名字

59:40.100 --> 59:41.100
函数名字passinfo

59:41.100 --> 59:43.100
我给它传一个pass

59:43.100 --> 59:44.100
就等于这个

59:45.100 --> 59:46.100
等于这个

59:48.610 --> 59:49.610
然后State乘了随便写一个

59:55.050 --> 59:56.050
你看是拿到了

59:56.050 --> 59:57.050
对吧

59:57.050 --> 59:58.050
拿到passname了

59:58.050 --> 59:59.050
对不对

59:59.050 --> 01:00:00.050
就可以拿到passname了

01:00:00.050 --> 01:00:01.050
pass再改一下

01:00:01.050 --> 01:00:02.050
改一下

01:00:02.050 --> 01:00:04.050
把这个警号放后边

01:00:06.550 --> 01:00:07.550
看一下行不行

01:00:08.550 --> 01:00:09.550
没问题

01:00:09.550 --> 01:00:10.550
然后再改一下

01:00:10.550 --> 01:00:12.550
然后把这个没有警号

01:00:12.550 --> 01:00:13.550
没有问号

01:00:13.550 --> 01:00:14.550
没问题

01:00:14.550 --> 01:00:15.550
好

01:00:15.550 --> 01:00:16.550
那么passname就搞定了

01:00:16.550 --> 01:00:17.550
当然你还得处理一下

01:00:17.550 --> 01:00:18.550
passname的情况

01:00:19.550 --> 01:00:21.550
处理passname的情况

01:00:21.550 --> 01:00:22.550
把passname要去掉

01:00:23.550 --> 01:00:24.550
对吧

01:00:25.550 --> 01:00:26.550
passname要去掉

01:00:27.550 --> 01:00:28.550
这个没什么说的

01:00:28.550 --> 01:00:29.550
之前都是写过的

01:00:29.550 --> 01:00:30.550
是搞定passname

01:00:30.550 --> 01:00:31.550
好

01:00:31.550 --> 01:00:32.550
那么现在搞定search

01:00:32.550 --> 01:00:33.550
搞定search

01:00:36.550 --> 01:00:37.550
好

01:00:37.550 --> 01:00:38.550
search的话

01:00:38.550 --> 01:00:39.550
是不是也是一样的

01:00:39.550 --> 01:00:40.550
对吧

01:00:40.550 --> 01:00:42.550
利用passinfo.pass

01:00:42.550 --> 01:00:43.550
对不对

01:00:43.550 --> 01:00:44.550
利用这个

01:00:44.550 --> 01:00:45.550
然后呢

01:00:45.550 --> 01:00:46.550
去找到什么

01:00:47.550 --> 01:00:48.550
search是

01:00:49.550 --> 01:00:50.550
就是没有警号

01:00:50.550 --> 01:00:52.550
就是前面是没有警号的

01:00:52.550 --> 01:00:54.550
出现了第一个问号

01:00:54.550 --> 01:00:56.550
出现了第一个问号

01:00:56.550 --> 01:00:57.550
那么找到这个问号

01:00:57.550 --> 01:00:59.550
以及到警号之间

01:00:59.550 --> 01:01:01.550
或者是问号到墨尾的数据

01:01:01.550 --> 01:01:02.550
说起来可能有点糟

01:01:02.550 --> 01:01:03.550
说起来可能有点糟

01:01:03.550 --> 01:01:05.550
那么这个是不是要去找

01:01:06.550 --> 01:01:07.550
从这个字幕出来必须查找

01:01:07.550 --> 01:01:08.550
对不对

01:01:08.550 --> 01:01:09.550
查到这个东西

01:01:09.550 --> 01:01:11.550
查到这个东西

01:01:11.550 --> 01:01:12.550
那么找到的那一段

01:01:12.550 --> 01:01:14.550
自然而然

01:01:14.550 --> 01:01:16.550
就是我们要找到search

01:01:16.550 --> 01:01:17.550
找到search

01:01:17.550 --> 01:01:18.550
那这里呢

01:01:18.550 --> 01:01:20.550
我们肯定要写个正的表达式

01:01:20.550 --> 01:01:21.550
要写个正的表达式

01:01:23.550 --> 01:01:25.550
就利用这个正的表达式

01:01:25.550 --> 01:01:26.550
用同一个边条

01:01:26.550 --> 01:01:27.550
重新复制

01:01:27.550 --> 01:01:28.550
正的表达式

01:01:28.550 --> 01:01:29.550
找啥呢

01:01:29.550 --> 01:01:30.550
我们要找一段

01:01:30.550 --> 01:01:32.550
那一段呢

01:01:32.550 --> 01:01:35.550
它一定是以问号开头的

01:01:35.550 --> 01:01:37.550
一定是以问号开头的

01:01:37.550 --> 01:01:39.550
这一段一定是以问号开头

01:01:39.550 --> 01:01:40.550
然后后边呢

01:01:40.550 --> 01:01:42.550
写的是啥呢

01:01:42.550 --> 01:01:45.550
后边只要不是警号就行

01:01:45.550 --> 01:01:47.550
只要不是警号就行

01:01:47.550 --> 01:01:49.550
然后后边写的字符呢

01:01:49.550 --> 01:01:51.550
是这样子

01:01:51.550 --> 01:01:52.550
后边的字符

01:01:52.550 --> 01:01:53.550
就是说

01:01:53.550 --> 01:01:55.550
你只要不是警号

01:01:55.550 --> 01:01:57.550
只要你不是警号

01:01:57.550 --> 01:01:59.550
爱是啥

01:01:59.550 --> 01:02:01.550
爱啥啥

01:02:01.550 --> 01:02:03.550
只要你不是警号就行

01:02:03.550 --> 01:02:04.550
好那么这一个字

01:02:04.550 --> 01:02:05.550
这个后边的东西呢

01:02:05.550 --> 01:02:07.550
这一坨出现多好吃呢

01:02:07.550 --> 01:02:09.550
出现您吃火多次

01:02:09.550 --> 01:02:11.550
您吃火多次

01:02:11.550 --> 01:02:12.550
然后结尾呢

01:02:12.550 --> 01:02:14.550
是以什么结尾呢

01:02:14.550 --> 01:02:16.550
结尾呢可以是一个

01:02:16.550 --> 01:02:19.550
可以是一个多的结尾

01:02:19.550 --> 01:02:21.550
我们这样吧

01:02:21.550 --> 01:02:22.550
嗯

01:02:22.550 --> 01:02:26.080
这样子

01:02:26.080 --> 01:02:29.080
结尾呢可以是一个

01:02:29.080 --> 01:02:30.080
一

01:02:30.080 --> 01:02:31.080
我想一下啊

01:02:31.080 --> 01:02:32.080
这个怎么写

01:02:32.080 --> 01:02:34.080
以警号结尾

01:02:34.080 --> 01:02:36.080
或者是一个多的结尾

01:02:36.080 --> 01:02:38.080
这样子写应该没问题

01:02:38.080 --> 01:02:39.080
应该没问题

01:02:39.080 --> 01:02:41.080
只要是以问号开头

01:02:41.080 --> 01:02:42.080
然后呢

01:02:42.080 --> 01:02:43.080
中间只要不是警号

01:02:43.080 --> 01:02:45.080
任一个字符都行

01:02:45.080 --> 01:02:46.080
任一个字符都行

01:02:46.080 --> 01:02:47.080
然后呢

01:02:47.080 --> 01:02:48.080
以警号

01:02:48.080 --> 01:02:50.080
或者是多的结尾

01:02:50.080 --> 01:02:51.080
多的结尾

01:02:51.080 --> 01:02:52.080
但是呢

01:02:52.080 --> 01:02:53.080
我们匹配的是

01:02:53.080 --> 01:02:55.080
不要不要消耗这个警号啊

01:02:55.080 --> 01:02:56.080
这个警号我们是不要的啊

01:02:56.080 --> 01:02:57.080
所以说我们这里呢

01:02:57.080 --> 01:02:58.080
写个问号冒号

01:02:58.080 --> 01:02:59.080
写一个就是

01:02:59.080 --> 01:03:01.080
前瞻运算符

01:03:01.080 --> 01:03:02.080
前瞻运算符

01:03:02.080 --> 01:03:04.080
就是后边要跟一个警号

01:03:04.080 --> 01:03:05.080
啊

01:03:05.080 --> 01:03:06.080
然后呢

01:03:06.080 --> 01:03:07.080
或者是

01:03:07.080 --> 01:03:08.080
后边

01:03:08.080 --> 01:03:10.080
跟一个就是多的

01:03:10.080 --> 01:03:11.080
行吧

01:03:11.080 --> 01:03:12.080
那咱们试一下啊

01:03:12.080 --> 01:03:13.080
试一下

01:03:13.080 --> 01:03:15.080
reg execute

01:03:15.080 --> 01:03:17.080
然后找到这个pass

01:03:17.080 --> 01:03:18.080
info

01:03:18.080 --> 01:03:19.080
点pass

01:03:19.080 --> 01:03:22.390
看一下能拿到啥

01:03:22.390 --> 01:03:23.390
results

01:03:23.390 --> 01:03:25.390
看一下能不能拿到东西

01:03:25.390 --> 01:03:26.390
啊

01:03:26.390 --> 01:03:27.390
看一下吧

01:03:27.390 --> 01:03:28.390
嗯

01:03:28.390 --> 01:03:29.390
没错了

01:03:29.390 --> 01:03:32.700
他说什么呢

01:03:33.700 --> 01:03:37.850
看一下在这里说啥呀

01:03:37.850 --> 01:03:38.850
嗯

01:03:38.850 --> 01:03:40.850
无销的政策表达是

01:03:40.850 --> 01:03:45.220
无销的政策表达是

01:03:45.220 --> 01:03:49.660
他说我这个政策表达是无销的

01:03:49.660 --> 01:03:58.190
我看一下

01:03:58.190 --> 01:04:00.190
什么意思

01:04:00.190 --> 01:04:02.190
什么意思

01:04:02.190 --> 01:04:05.190
是一开始问号需要转移吗

01:04:05.190 --> 01:04:06.190
哦

01:04:06.190 --> 01:04:08.190
一开始问号可能有特殊意思啊

01:04:08.190 --> 01:04:09.190
要转移

01:04:09.190 --> 01:04:10.190
这个位置要转移啊

01:04:10.190 --> 01:04:11.190
这个位置的问号要转移

01:04:11.190 --> 01:04:12.190
好那行吧

01:04:12.190 --> 01:04:13.190
那咱们来试一下

01:04:13.190 --> 01:04:16.530
好

01:04:16.530 --> 01:04:17.530
匹配到这一段

01:04:17.530 --> 01:04:18.530
看没

01:04:18.530 --> 01:04:19.530
是拿到了

01:04:19.530 --> 01:04:20.530
匹配到这一段

01:04:20.530 --> 01:04:22.530
好咱们来改一下啊

01:04:22.530 --> 01:04:23.530
改一下

01:04:23.530 --> 01:04:25.530
把这个警号去掉了

01:04:25.530 --> 01:04:27.530
后面没有警号了

01:04:27.530 --> 01:04:28.530
没问题匹配到这一段

01:04:28.530 --> 01:04:30.530
好那如果说

01:04:30.530 --> 01:04:32.530
那如果说有

01:04:32.530 --> 01:04:33.530
呃

01:04:33.530 --> 01:04:35.530
警号在前面了

01:04:35.530 --> 01:04:37.530
警号前面可能要出问题哦

01:04:37.530 --> 01:04:39.530
警号在前面可能要出问题哦

01:04:39.530 --> 01:04:40.530
那还是匹配到这一段

01:04:40.530 --> 01:04:41.530
不行

01:04:41.530 --> 01:04:43.530
那么这个整个这一段都是哈希

01:04:43.530 --> 01:04:44.530
说前边呢

01:04:44.530 --> 01:04:47.530
前边是不能有警号的

01:04:47.530 --> 01:04:50.530
前边是不能有警号的

01:04:50.530 --> 01:04:51.530
嗯

01:04:51.530 --> 01:04:52.530
我想一想啊

01:04:52.530 --> 01:04:55.530
那这个东西怎么写呢

01:04:55.530 --> 01:04:58.530
前边不能有警号

01:04:58.530 --> 01:05:00.530
啊

01:05:00.530 --> 01:05:02.530
这个有点意思啊

01:05:02.530 --> 01:05:04.530
有点意思

01:05:04.530 --> 01:05:05.530
想一想啊

01:05:05.530 --> 01:05:06.530
想一想

01:05:06.530 --> 01:05:07.530
要不然我就

01:05:07.530 --> 01:05:09.530
还是要得到这个警号的位置

01:05:09.530 --> 01:05:11.530
问号的位置要进行比较

01:05:11.530 --> 01:05:13.530
啊

01:05:13.530 --> 01:05:14.530
如果说这里的字

01:05:14.530 --> 01:05:15.530
如果说这里的政责

01:05:15.530 --> 01:05:16.530
我觉得有点麻烦的话

01:05:16.530 --> 01:05:18.530
我还是得到位置得了

01:05:18.530 --> 01:05:20.530
我还是得到一个位置得了

01:05:20.530 --> 01:05:21.530
那行吧

01:05:21.530 --> 01:05:22.530
我还是得到一个位置得了

01:05:22.530 --> 01:05:24.530
如果政责有点麻烦主要是

01:05:24.530 --> 01:05:25.530
政责

01:05:25.530 --> 01:05:27.530
啊

01:05:27.530 --> 01:05:29.530
还是得到一个位置得了啊

01:05:29.530 --> 01:05:31.530
就是question

01:05:31.530 --> 01:05:33.530
index

01:05:33.530 --> 01:05:34.530
等于什么呢

01:05:34.530 --> 01:05:35.530
new

01:05:35.530 --> 01:05:36.530
二

01:05:36.530 --> 01:05:37.530
就是

01:05:37.530 --> 01:05:39.530
passinfo

01:05:39.530 --> 01:05:41.530
pass

01:05:41.530 --> 01:05:42.530
index

01:05:42.530 --> 01:05:44.530
拿到那个

01:05:44.530 --> 01:05:46.530
嗯

01:05:46.530 --> 01:05:48.530
index找什么呢

01:05:48.530 --> 01:05:50.530
找那个就是问号

01:05:50.530 --> 01:05:51.530
找问号

01:05:51.530 --> 01:05:53.530
问号的位置

01:05:53.530 --> 01:05:54.530
第一个问号的位置

01:05:54.530 --> 01:05:55.530
然后呢

01:05:55.530 --> 01:05:56.530
找那个就是警号

01:05:56.530 --> 01:05:58.530
下普夫号的位置

01:05:58.530 --> 01:06:00.530
passinfo

01:06:00.530 --> 01:06:02.530
pass

01:06:02.530 --> 01:06:04.530
index

01:06:04.530 --> 01:06:05.530
找那个

01:06:05.530 --> 01:06:07.530
当然你也可以用一些第三方库

01:06:07.530 --> 01:06:08.530
啊

01:06:08.530 --> 01:06:09.530
你比方说用那个

01:06:09.530 --> 01:06:11.530
用那个我们之前说的query stream那个库

01:06:11.530 --> 01:06:12.530
是不是一下就搞定了啊

01:06:12.530 --> 01:06:14.530
但是我向自己熟悉熟悉一下

01:06:14.530 --> 01:06:16.530
找个警号的位置

01:06:16.530 --> 01:06:18.530
如果说question

01:06:18.530 --> 01:06:19.530
index等于负一

01:06:19.530 --> 01:06:20.530
是不是没找到

01:06:20.530 --> 01:06:21.530
没有问号

01:06:21.530 --> 01:06:22.530
整个字不说都没有问号

01:06:22.530 --> 01:06:24.530
那么我们这个sirkey就很明显的

01:06:24.530 --> 01:06:25.530
是一个什么字呢

01:06:25.530 --> 01:06:26.530
sirkey

01:06:26.530 --> 01:06:30.310
啊

01:06:30.310 --> 01:06:31.310
如果说没有问号

01:06:31.310 --> 01:06:32.310
那么sirkey呢

01:06:32.310 --> 01:06:34.310
就直接是一个啊问号

01:06:34.310 --> 01:06:36.310
啊就没有就空之不串啊空之不串

01:06:36.310 --> 01:06:37.310
就是sirkey

01:06:37.310 --> 01:06:38.310
对吧

01:06:38.310 --> 01:06:40.310
一个空之不串就完事了

01:06:40.310 --> 01:06:41.310
好

01:06:41.310 --> 01:06:42.310
如果说有问号啊

01:06:42.310 --> 01:06:44.310
如果说有问号

01:06:44.310 --> 01:06:45.310
有问号的话

01:06:45.310 --> 01:06:47.310
我们要分析这个问号和警号的

01:06:47.310 --> 01:06:49.310
就是前和顺序

01:06:49.310 --> 01:06:50.310
如果说

01:06:50.310 --> 01:06:53.310
问问号的下标

01:06:53.310 --> 01:06:54.310
呃

01:06:54.310 --> 01:06:56.310
搭于了

01:06:56.310 --> 01:06:57.310
第一个问号的下标

01:06:57.310 --> 01:06:58.310
搭于了

01:06:58.310 --> 01:06:59.310
警号的下标

01:06:59.310 --> 01:07:00.310
那是不是还是相当于是没有问号

01:07:00.310 --> 01:07:01.310
对吧

01:07:01.310 --> 01:07:02.310
还是相当于没有问号

01:07:02.310 --> 01:07:03.310
所以这个情况呢

01:07:03.310 --> 01:07:05.310
跟这个情况我们直接合并一下啊

01:07:05.310 --> 01:07:06.310
合并一下

01:07:06.310 --> 01:07:07.310
对吧

01:07:07.310 --> 01:07:08.310
像这种情况

01:07:08.310 --> 01:07:10.310
都是属于没有sirkey

01:07:10.310 --> 01:07:11.310
这两个情况是什么

01:07:11.310 --> 01:07:13.310
这两个情况就是一个是没有问号

01:07:13.310 --> 01:07:14.310
问号都没有

01:07:14.310 --> 01:07:15.310
啊

01:07:15.310 --> 01:07:16.310
就这里

01:07:16.310 --> 01:07:17.310
问号都没有

01:07:17.310 --> 01:07:18.310
那自然是sirkey

01:07:18.310 --> 01:07:19.310
sirkey是空的

01:07:19.310 --> 01:07:20.310
sirkey自然是空的

01:07:20.310 --> 01:07:21.310
好

01:07:21.310 --> 01:07:22.310
另外一种情况呢

01:07:22.310 --> 01:07:23.310
就是说有这个问号

01:07:23.310 --> 01:07:25.310
但是问号呢在警号后边

01:07:25.310 --> 01:07:26.310
那是不是

01:07:26.310 --> 01:07:27.310
这一坨都是哈西

01:07:27.310 --> 01:07:28.310
对吧都是哈西

01:07:28.310 --> 01:07:29.310
那也没有sirkey

01:07:29.310 --> 01:07:30.310
啊都是空的

01:07:30.310 --> 01:07:31.310
好

01:07:31.310 --> 01:07:32.310
那么另外

01:07:32.310 --> 01:07:33.310
其他的情况就是正常的啊

01:07:33.310 --> 01:07:34.310
sirkey

01:07:34.310 --> 01:07:35.310
等于什么呢

01:07:35.310 --> 01:07:36.310
来自于致富社

01:07:36.310 --> 01:07:37.310
致富社的结局

01:07:37.310 --> 01:07:38.310
Pans

01:07:38.310 --> 01:07:39.310
Superscene

01:07:39.310 --> 01:07:40.310
啊

01:07:40.310 --> 01:07:41.310
其次位置是

01:07:41.310 --> 01:07:42.310
Question的英德克社

01:07:42.310 --> 01:07:43.310
啊

01:07:43.310 --> 01:07:44.310
结束位置呢是

01:07:44.310 --> 01:07:45.310
Sharp英德克社

01:07:45.310 --> 01:07:46.310
对吧

01:07:46.310 --> 01:07:47.310
好

01:07:47.310 --> 01:07:48.310
这是sirkey搞定了

01:07:48.310 --> 01:07:49.310
啊

01:07:49.310 --> 01:07:50.310
是处理sirkey

01:07:50.310 --> 01:07:51.310
好

01:07:51.310 --> 01:07:52.310
打印出来看一下吧

01:07:52.310 --> 01:07:55.650
sirkey

01:07:55.650 --> 01:07:56.650
啊

01:07:56.650 --> 01:07:57.650
这里回撤

01:07:57.650 --> 01:07:58.650
啊

01:07:58.650 --> 01:07:59.650
sirkey没有

01:07:59.650 --> 01:08:00.650
空之不错

01:08:00.650 --> 01:08:01.650
好

01:08:01.650 --> 01:08:02.650
那么

01:08:02.650 --> 01:08:03.650
因为他在警号后边

01:08:03.650 --> 01:08:04.650
那如果说警号在后边呢

01:08:04.650 --> 01:08:05.650
啊

01:08:05.650 --> 01:08:06.650
是不是这个

01:08:06.650 --> 01:08:07.650
对吧

01:08:07.650 --> 01:08:08.650
也拿到了

01:08:08.650 --> 01:08:09.650
哎

01:08:09.650 --> 01:08:10.650
如果说没有问号呢

01:08:10.650 --> 01:08:11.650
没有问号

01:08:11.650 --> 01:08:12.650
问号压根没有呢

01:08:12.650 --> 01:08:13.650
好

01:08:13.650 --> 01:08:14.650
没问题

01:08:14.650 --> 01:08:15.650
好

01:08:15.650 --> 01:08:16.650
那么

01:08:16.650 --> 01:08:17.650
这是sirkey

01:08:17.650 --> 01:08:18.650
那么还有一个哈西

01:08:18.650 --> 01:08:19.650
哈西的话

01:08:19.650 --> 01:08:20.650
是不是一样了

01:08:20.650 --> 01:08:21.650
类似的方式

01:08:21.650 --> 01:08:22.650
对吧类似的方式

01:08:22.650 --> 01:08:24.650
哈西的话

01:08:24.650 --> 01:08:25.650
啊

01:08:26.650 --> 01:08:27.650
判断一下啊

01:08:27.650 --> 01:08:28.650
类似的方式

01:08:28.650 --> 01:08:29.650
如果说Sharp英德克社

01:08:29.650 --> 01:08:30.650
等于富1

01:08:30.650 --> 01:08:31.650
啊

01:08:31.650 --> 01:08:32.650
或者说

01:08:32.650 --> 01:08:33.650
啊

01:08:33.650 --> 01:08:35.650
一定是在写到最后的

01:08:35.650 --> 01:08:36.650
啊

01:08:36.650 --> 01:08:37.650
那不行

01:08:37.650 --> 01:08:38.650
不用了

01:08:38.650 --> 01:08:39.650
不用获得了

01:08:39.650 --> 01:08:40.650
如果说等于富1

01:08:40.650 --> 01:08:44.240
那么哈西

01:08:44.240 --> 01:08:45.240
啊

01:08:45.240 --> 01:08:47.240
哈西等于空之不错

01:08:47.240 --> 01:08:48.240
l是

01:08:48.240 --> 01:08:49.240
如果说

01:08:49.240 --> 01:08:50.240
他不等于富1

01:08:50.240 --> 01:08:51.240
就是找有警号

01:08:51.240 --> 01:08:52.240
那么直接取警号

01:08:52.240 --> 01:08:53.240
取到末尾

01:08:53.240 --> 01:08:54.240
因为哈西一定是最末尾了

01:08:54.240 --> 01:08:55.240
啊

01:08:55.240 --> 01:08:56.240
所以说很简单

01:08:56.240 --> 01:08:57.240
哈西就是

01:08:57.240 --> 01:08:58.240
直接取警号

01:08:58.240 --> 01:08:59.240
passinfo

01:08:59.240 --> 01:09:00.240
pass

01:09:00.240 --> 01:09:01.240
直接

01:09:01.240 --> 01:09:02.240
啊

01:09:02.240 --> 01:09:03.240
就是Sharp Street

01:09:03.240 --> 01:09:05.240
Sharp Street

01:09:05.240 --> 01:09:06.240
英德克社

01:09:06.240 --> 01:09:07.240
取到末尾

01:09:07.240 --> 01:09:08.240
就完事了

01:09:08.240 --> 01:09:09.240
就完事了

01:09:09.240 --> 01:09:10.240
哈西

01:09:10.240 --> 01:09:11.240
哈西有了

01:09:11.240 --> 01:09:12.240
这东西全有了

01:09:12.240 --> 01:09:13.240
是不是可以直接返回了

01:09:13.240 --> 01:09:14.240
返回来的location对象

01:09:14.240 --> 01:09:15.240
location对象

01:09:15.240 --> 01:09:16.240
就是什么

01:09:16.240 --> 01:09:18.240
就是哈西

01:09:18.240 --> 01:09:19.240
然后呢

01:09:19.240 --> 01:09:20.240
passname

01:09:20.240 --> 01:09:21.240
passname

01:09:21.240 --> 01:09:22.240
还有什么呢

01:09:22.240 --> 01:09:23.240
search

01:09:23.240 --> 01:09:24.240
search

01:09:24.240 --> 01:09:25.240
还有什么stat

01:09:25.240 --> 01:09:26.240
对吧

01:09:26.240 --> 01:09:27.240
就passinfo

01:09:27.240 --> 01:09:28.240
就是stat

01:09:28.240 --> 01:09:31.240
来自于passinfo里边的stat

01:09:31.240 --> 01:09:32.240
啊

01:09:32.240 --> 01:09:33.240
对吧

01:09:33.240 --> 01:09:34.240
总之

01:09:34.240 --> 01:09:36.240
三天写这个函数的目的啊

01:09:36.240 --> 01:09:37.240
要搞清楚

01:09:37.240 --> 01:09:38.240
就是大家有的是

01:09:38.240 --> 01:09:39.240
做一些东西

01:09:39.240 --> 01:09:40.240
觉得很麻烦

01:09:40.240 --> 01:09:42.240
但是你要从一个更高的角度来看

01:09:42.240 --> 01:09:44.240
我们这一个函数的其实

01:09:44.240 --> 01:09:46.240
起的目的就很简单

01:09:46.240 --> 01:09:48.240
就是要根据一个passinfo

01:09:48.240 --> 01:09:49.240
根据一个制服创

01:09:49.240 --> 01:09:50.240
这种格式

01:09:50.240 --> 01:09:51.240
来得到一个location对象

01:09:51.240 --> 01:09:52.240
为什么要写这个函数呢

01:09:52.240 --> 01:09:54.240
不是之前写的好好的吗

01:09:54.240 --> 01:09:55.240
为什么要写这个函数呢

01:09:55.240 --> 01:09:57.240
是因为到这边来

01:09:57.240 --> 01:09:59.240
是因为我要出发主色

01:09:59.240 --> 01:10:01.240
而出发主色之前是不能挑转的

01:10:01.240 --> 01:10:02.240
而你不挑转的话

01:10:02.240 --> 01:10:03.240
你是得不到location的

01:10:03.240 --> 01:10:04.240
因为我们之前的

01:10:04.240 --> 01:10:06.240
都是挑转之后来拿到对吧

01:10:06.240 --> 01:10:07.240
拿到这个location

01:10:07.240 --> 01:10:08.240
但是现在的没有挑转

01:10:08.240 --> 01:10:10.240
你是拿不到这个location的

01:10:10.240 --> 01:10:11.240
我们要主色之后

01:10:11.240 --> 01:10:13.240
通过了过后才能挑转

01:10:13.240 --> 01:10:14.240
所以说呢

01:10:14.240 --> 01:10:15.240
我们只能通过有限的信息

01:10:15.240 --> 01:10:17.240
去拿到这个location对象

01:10:17.240 --> 01:10:18.240
啊

01:10:18.240 --> 01:10:19.240
当然要更拿到

01:10:19.240 --> 01:10:20.240
也没问题对吧

01:10:20.240 --> 01:10:21.240
也没问题

01:10:21.240 --> 01:10:23.240
比方说我们这里试一下吧

01:10:24.240 --> 01:10:25.240
再试一下

01:10:25.240 --> 01:10:28.240
这里传递一个loc

01:10:28.240 --> 01:10:29.240
loc

01:10:29.240 --> 01:10:30.240
好 你看一下

01:10:30.240 --> 01:10:32.240
没问题吧

01:10:32.240 --> 01:10:34.240
对吧 是没问题的

01:10:34.240 --> 01:10:36.240
比方说再传一个bestname进去

01:10:36.240 --> 01:10:38.240
传个bestname进去

01:10:38.240 --> 01:10:43.380
bestname

01:10:43.380 --> 01:10:44.380
传个bestname

01:10:44.380 --> 01:10:45.380
直接传一个news嘛

01:10:45.380 --> 01:10:46.380
比方说

01:10:46.380 --> 01:10:48.380
news

01:10:48.380 --> 01:10:50.380
那么这个loc

01:10:50.380 --> 01:10:51.380
看一下吧

01:10:51.380 --> 01:10:53.380
pysname是没问题的

01:10:53.380 --> 01:10:54.380
对吧

01:10:54.380 --> 01:10:55.380
那么拿到这个之后

01:10:55.380 --> 01:10:57.380
现在我们把它改成这种格式

01:10:57.380 --> 01:10:59.380
只要你没有运行这个函数

01:10:59.380 --> 01:11:00.380
是不是就不会挑转

01:11:00.380 --> 01:11:01.380
对吧

01:11:01.380 --> 01:11:02.380
不会挑转

01:11:02.380 --> 01:11:03.380
好 咱们再来试一下

01:11:03.380 --> 01:11:04.380
刷新

01:11:04.380 --> 01:11:05.380
看着

01:11:05.380 --> 01:11:07.380
现在我们利用myhistory

01:11:07.380 --> 01:11:08.380
push

01:11:08.380 --> 01:11:10.380
挑转到abc

01:11:11.380 --> 01:11:12.380
嗯

01:11:12.380 --> 01:11:14.380
怎么就直接挑转了

01:11:14.380 --> 01:11:16.380
看一下啊

01:11:16.380 --> 01:11:18.380
push

01:11:18.380 --> 01:11:19.380
没问题啊

01:11:19.380 --> 01:11:23.390
没有加blog

01:11:23.390 --> 01:11:25.390
没有加blog

01:11:25.390 --> 01:11:26.390
blog

01:11:26.390 --> 01:11:27.390
真的要挑转吧

01:11:27.390 --> 01:11:28.390
对吧

01:11:28.390 --> 01:11:30.390
还要得到一个unblog

01:11:30.390 --> 01:11:32.390
unblog

01:11:32.390 --> 01:11:33.390
好 那么现在

01:11:33.390 --> 01:11:34.390
push

01:11:34.390 --> 01:11:35.390
你看

01:11:35.390 --> 01:11:36.390
现在看不见

01:11:36.390 --> 01:11:37.390
看不见

01:11:37.390 --> 01:11:38.390
我们跳脑123吧

01:11:38.390 --> 01:11:40.390
123

01:11:40.390 --> 01:11:41.390
你看你没跳脑123

01:11:41.390 --> 01:11:42.390
是不是没跳转

01:11:42.390 --> 01:11:43.390
对吧 我们点取消

01:11:43.390 --> 01:11:44.390
等你取消过来

01:11:44.390 --> 01:11:45.390
回调函数就没运行

01:11:45.390 --> 01:11:46.390
于是它不会跳转

01:11:46.390 --> 01:11:47.390
如果说我们这里

01:11:47.390 --> 01:11:48.390
点确定

01:11:48.390 --> 01:11:50.390
你看 是不是它现在开始挑转

01:11:50.390 --> 01:11:51.390
对不对

01:11:51.390 --> 01:11:53.390
就好像这样的功能了

01:11:53.390 --> 01:11:54.390
看到没

01:11:54.390 --> 01:11:55.390
1234

01:11:55.390 --> 01:11:56.390
也是一样

01:11:56.390 --> 01:11:58.390
取消就不会跳转

01:11:58.390 --> 01:12:00.390
同样的replace是一样的

01:12:00.390 --> 01:12:01.390
replace是一样的

01:12:01.390 --> 01:12:03.390
那么现在呢 不要做unblog

01:12:03.390 --> 01:12:04.390
取消这个组设

01:12:04.390 --> 01:12:05.390
取消这个组设

01:12:05.390 --> 01:12:06.390
现在又能跳转了

01:12:06.390 --> 01:12:07.390
看到没 又能跳转了

01:12:07.390 --> 01:12:08.390
对吧

01:12:08.390 --> 01:12:12.280
所以就完成这样的功能了

01:12:12.280 --> 01:12:13.280
好

01:12:14.280 --> 01:12:15.280
但是这里完成了

01:12:15.280 --> 01:12:16.280
还差最后一件事情

01:12:16.280 --> 01:12:17.280
就点这

01:12:17.280 --> 01:12:19.280
点这有没有触发

01:12:19.280 --> 01:12:20.280
是没触发

01:12:20.280 --> 01:12:21.280
那是不是在监听里边

01:12:21.280 --> 01:12:22.280
还要搞定

01:12:22.280 --> 01:12:23.280
对吧

01:12:23.280 --> 01:12:24.280
监听里边是不是

01:12:24.280 --> 01:12:25.280
还要搞定这件事情

01:12:25.280 --> 01:12:26.280
监听里边

01:12:26.280 --> 01:12:27.280
还要搞定这件事情

01:12:27.280 --> 01:12:28.280
监听里边

01:12:28.280 --> 01:12:29.280
就是

01:12:29.280 --> 01:12:31.280
但是你要知道

01:12:31.280 --> 01:12:32.280
监听里边

01:12:32.280 --> 01:12:33.280
你是没法取消的

01:12:33.280 --> 01:12:34.280
因为这是浏览器的

01:12:34.280 --> 01:12:35.280
控制

01:12:35.280 --> 01:12:36.280
你不能控制用户的

01:12:36.280 --> 01:12:37.280
你是没法取消

01:12:37.280 --> 01:12:38.280
它跳转的

01:12:38.280 --> 01:12:39.280
就是说

01:12:39.280 --> 01:12:40.280
你是用户点了

01:12:40.280 --> 01:12:41.280
后退过后

01:12:41.280 --> 01:12:42.280
你不能说

01:12:42.280 --> 01:12:43.280
不允许点后退

01:12:43.280 --> 01:12:44.280
这个是做不到的

01:12:44.280 --> 01:12:45.280
底层就做不到

01:12:45.280 --> 01:12:47.280
因为这个事件是点

01:12:47.280 --> 01:12:48.280
它已经完成了

01:12:48.280 --> 01:12:49.280
变化之后

01:12:49.280 --> 01:12:50.280
它会触发这个世界

01:12:50.280 --> 01:12:51.280
目以成周了

01:12:51.280 --> 01:12:52.280
你没法

01:12:52.280 --> 01:12:53.280
你没法

01:12:53.280 --> 01:12:54.280
但是呢

01:12:54.280 --> 01:12:55.280
我们只能说

01:12:55.280 --> 01:12:56.280
触发一下组设

01:12:56.280 --> 01:12:58.280
我们只能说触发一下组设

01:12:58.280 --> 01:13:00.280
只能是起这么一个作用

01:13:00.280 --> 01:13:01.280
那么也就说

01:13:01.280 --> 01:13:02.280
这里呢

01:13:03.280 --> 01:13:04.280
这里也是一样

01:13:07.280 --> 01:13:09.280
我们拿到这个location过后

01:13:09.280 --> 01:13:10.280
触发组设

01:13:10.280 --> 01:13:11.280
block

01:13:11.280 --> 01:13:12.280
manager

01:13:14.280 --> 01:13:16.280
就是触发组设

01:13:16.280 --> 01:13:17.280
trigger block

01:13:17.280 --> 01:13:18.280
location传进去

01:13:18.280 --> 01:13:20.280
action固定为pop

01:13:20.280 --> 01:13:22.280
固定为pop

01:13:22.280 --> 01:13:23.280
当然我们也可以用变量

01:13:23.280 --> 01:13:24.280
用变量

01:13:24.280 --> 01:13:26.850
来保存那个action

01:13:27.850 --> 01:13:28.850
这个action固定为pop

01:13:28.850 --> 01:13:29.850
那么回掉函数

01:13:29.850 --> 01:13:30.850
就是你

01:13:30.850 --> 01:13:32.850
你允许跳转过后

01:13:32.850 --> 01:13:33.850
我能做得很有限

01:13:33.850 --> 01:13:35.850
我只是触发监听

01:13:35.850 --> 01:13:36.850
只触发监听

01:13:36.850 --> 01:13:38.850
然后改变这个history的location对象

01:13:38.850 --> 01:13:39.850
但是呢

01:13:39.850 --> 01:13:40.850
地址已经发生变化了

01:13:40.850 --> 01:13:41.850
我这个控制不了

01:13:41.850 --> 01:13:42.850
你去看一下它的

01:13:42.850 --> 01:13:43.850
它的也控制不了

01:13:43.850 --> 01:13:44.850
它也控制不了

01:13:44.850 --> 01:13:45.850
都没法

01:13:45.850 --> 01:13:46.850
这个没法的

01:13:46.850 --> 01:13:47.850
来看一下

01:13:47.850 --> 01:13:49.850
那么现在我们后退

01:13:49.850 --> 01:13:50.850
我没加组设

01:13:50.850 --> 01:13:51.850
没加组设

01:13:51.850 --> 01:13:55.380
我是忘记

01:13:56.380 --> 01:13:57.380
那么现在我们点后退

01:13:57.380 --> 01:13:58.380
你看

01:13:58.380 --> 01:13:59.380
这里地址已经变化了

01:13:59.380 --> 01:14:00.380
但是它还是会提示你

01:14:00.380 --> 01:14:01.380
还是会提示你

01:14:01.380 --> 01:14:02.380
如果说你这里点取消的话

01:14:02.380 --> 01:14:03.380
它影响到的是什么呢

01:14:03.380 --> 01:14:04.380
影响到的是myhistory

01:14:04.380 --> 01:14:05.380
里边的location

01:14:05.380 --> 01:14:06.380
影响到的是这个

01:14:06.380 --> 01:14:08.380
影响到这个监听器没有触发

01:14:08.380 --> 01:14:09.380
然后呢

01:14:09.380 --> 01:14:10.380
它的地址还是之前的

01:14:10.380 --> 01:14:11.380
对吧

01:14:11.380 --> 01:14:12.380
但是你这个

01:14:12.380 --> 01:14:13.380
你没办法控制用户

01:14:13.380 --> 01:14:15.380
不允许它改变那个地址

01:14:15.380 --> 01:14:16.380
这是没法的

01:14:16.380 --> 01:14:17.380
没法的

01:14:17.380 --> 01:14:18.380
点确定过后就没问题了

01:14:18.380 --> 01:14:20.380
点确定过后就没问题了

01:14:21.380 --> 01:14:22.380
这这一块

01:14:22.380 --> 01:14:23.380
当然那个

01:14:23.380 --> 01:14:24.380
就是

01:14:24.380 --> 01:14:26.380
原本的那个cool

01:14:26.380 --> 01:14:27.380
它也是这样做的

01:14:27.380 --> 01:14:28.380
也是这样做的

01:14:29.380 --> 01:14:30.380
好

01:14:30.380 --> 01:14:31.380
那么最后还有一个

01:14:31.380 --> 01:14:32.380
还有一个方法

01:14:33.380 --> 01:14:34.380
还有啥方法呢

01:14:34.380 --> 01:14:35.380
就是create a rift

01:14:35.380 --> 01:14:36.380
这个方法

01:14:37.380 --> 01:14:38.380
就这个方法

01:14:38.380 --> 01:14:39.380
这个方法

01:14:39.380 --> 01:14:40.380
给我一个location

01:14:40.380 --> 01:14:42.380
我前面给你拼接上一个

01:14:42.380 --> 01:14:43.380
bass name就完了

01:14:43.380 --> 01:14:45.380
这方法就做这一件事情

01:14:45.380 --> 01:14:47.380
这个方法很简单

01:14:48.380 --> 01:14:49.380
就是

01:14:49.380 --> 01:14:50.380
这个方法我们其实也用不到

01:14:50.380 --> 01:14:52.380
create a rift

01:14:52.380 --> 01:14:54.380
你给我一个location对象

01:14:54.380 --> 01:14:55.380
你给我一个location对象

01:14:55.380 --> 01:14:57.380
我管理这个location对象哪来的

01:14:57.380 --> 01:14:59.380
你只要给我一个location对象

01:14:59.380 --> 01:15:01.380
那么我能做的事情就是

01:15:01.380 --> 01:15:03.380
我前面给你

01:15:03.380 --> 01:15:04.380
bass name

01:15:04.380 --> 01:15:06.380
前面给你加上一个bass name

01:15:06.380 --> 01:15:08.380
然后在拼接上location里边的东西

01:15:08.380 --> 01:15:09.380
拼接上location

01:15:09.380 --> 01:15:10.380
比方说

01:15:10.380 --> 01:15:13.380
我们直接拼接上location的pass name

01:15:13.380 --> 01:15:14.380
pass name

01:15:14.380 --> 01:15:17.380
在拼接上location的search

01:15:17.380 --> 01:15:18.380
对吧

01:15:18.380 --> 01:15:19.380
当然

01:15:19.380 --> 01:15:20.380
它原本的cool里边

01:15:20.380 --> 01:15:21.380
它做了一些判断

01:15:21.380 --> 01:15:23.380
比方说search前面有没有带问号

01:15:23.380 --> 01:15:24.380
没有带问号给你加上

01:15:24.380 --> 01:15:26.380
它做了很详细的判断

01:15:26.380 --> 01:15:27.380
但是呢

01:15:27.380 --> 01:15:28.380
我这里就难得写了

01:15:28.380 --> 01:15:29.380
就是给大家说大概的

01:15:29.380 --> 01:15:30.380
它的意思是什么

01:15:30.380 --> 01:15:31.380
就这个意思

01:15:31.380 --> 01:15:33.380
就非常简单

01:15:33.380 --> 01:15:34.380
就是这个

01:15:34.380 --> 01:15:36.380
把返回就完事了

01:15:38.380 --> 01:15:39.380
没了

01:15:39.380 --> 01:15:41.380
那么至此呢

01:15:41.380 --> 01:15:42.380
我们就写出了一个

01:15:42.380 --> 01:15:43.380
自己的

01:15:43.380 --> 01:15:46.380
完全自己手写的history

01:15:46.380 --> 01:15:49.380
完全自己写手写的history

01:15:49.380 --> 01:15:51.380
只要我们通过这个函数

01:15:51.380 --> 01:15:53.380
就可以创建一个history对象

01:15:53.380 --> 01:15:54.380
但我们只需要创建一次就够了

01:15:54.380 --> 01:15:55.380
创建那么多干嘛呢

01:15:55.380 --> 01:15:57.380
只需要控制这个对象就完事了

01:15:57.380 --> 01:15:58.380
后面测试代码

01:15:58.380 --> 01:15:59.380
你乱去把测试代码

01:15:59.380 --> 01:16:01.380
把去掉

01:16:01.380 --> 01:16:02.380
把去掉

01:16:02.380 --> 01:16:04.380
就这个测试代码去掉

01:16:04.380 --> 01:16:06.380
我们只要通过这个create browser history

01:16:06.380 --> 01:16:08.380
就可以创建一个history对象

01:16:08.380 --> 01:16:11.380
功能上几乎是跟原版的一模一样

01:16:11.380 --> 01:16:13.380
一模一样

01:16:13.380 --> 01:16:14.380
代码有点多吗

01:16:14.380 --> 01:16:15.380
是有点多

01:16:15.380 --> 01:16:16.380
稍微有点多

01:16:16.380 --> 01:16:17.380
逻辑有点绕

01:16:17.380 --> 01:16:18.380
特别是block的一块

01:16:18.380 --> 01:16:19.380
有点绕

01:16:19.380 --> 01:16:20.380
有点复杂

01:16:20.380 --> 01:16:21.380
但是呢

01:16:21.380 --> 01:16:22.380
哪怕

01:16:22.380 --> 01:16:23.380
因为我们后面也基本上很少用到block

01:16:23.380 --> 01:16:24.380
但是呢

01:16:24.380 --> 01:16:25.380
你要知道

01:16:25.380 --> 01:16:27.380
就是这个东西

01:16:27.380 --> 01:16:29.380
就是说我们这个东西

01:16:29.380 --> 01:16:31.380
大致是怎么写的你得知道

01:16:31.380 --> 01:16:33.380
最好呢你下来呢

01:16:33.380 --> 01:16:34.380
最好是

01:16:34.380 --> 01:16:36.380
把它自己去手写一下

01:16:36.380 --> 01:16:38.380
自己最好是自己去手写一下

01:16:38.380 --> 01:16:39.380
写了过后呢

01:16:39.380 --> 01:16:41.380
你大概就能明白它里边东西了

01:16:41.380 --> 01:16:43.380
如果说你实在搞不清楚

01:16:43.380 --> 01:16:45.380
毕竟这两个课是

01:16:45.380 --> 01:16:47.380
扩展课程吧

01:16:47.380 --> 01:16:49.380
如果你实在搞不清楚的话没关系

01:16:49.380 --> 01:16:51.380
那你就直接用它的第三方库

01:16:51.380 --> 01:16:54.380
就是那个history的库就完事了

01:16:54.380 --> 01:16:55.380
那么我之后呢

01:16:55.380 --> 01:16:56.380
肯定是用这个手写的

01:16:56.380 --> 01:16:57.380
因为功能是一样嘛

01:16:57.380 --> 01:16:58.380
功能是一样的

01:16:58.380 --> 01:16:59.380
crazy browser history

01:16:59.380 --> 01:17:01.380
功能是一样的

01:17:01.380 --> 01:17:02.380
好

01:17:02.380 --> 01:17:03.380
那么现在呢

01:17:03.380 --> 01:17:04.380
这三个你删了

01:17:04.380 --> 01:17:05.380
这两个删了

01:17:05.380 --> 01:17:07.380
这几个都删了

01:17:07.380 --> 01:17:09.380
都删了

01:17:09.380 --> 01:17:10.380
你说我们之后呢

01:17:10.380 --> 01:17:12.380
用的都是browser history

01:17:12.380 --> 01:17:13.380
就是我们自己写的

01:17:13.380 --> 01:17:15.380
当然用它的也是一样的

01:17:15.380 --> 01:17:16.380
看后边的情况吧

01:17:16.380 --> 01:17:17.380
看后边的情况

01:17:17.380 --> 01:17:19.380
反正我们把自己手写的放在这

01:17:19.380 --> 01:17:22.380
大家以后有兴趣的话可以测试一下

01:17:22.380 --> 01:17:23.380
因为我后面

01:17:23.380 --> 01:17:25.380
估计可能还是在用这个第三方库的

01:17:25.380 --> 01:17:27.380
因为它毕竟还有harshy history

01:17:27.380 --> 01:17:28.380
还有memory history

01:17:28.380 --> 01:17:29.380
对吧

01:17:29.380 --> 01:17:30.380
还有这些东西

01:17:30.380 --> 01:17:31.380
毕竟有这些东西

01:17:31.380 --> 01:17:32.380
看情况嘛

01:17:32.380 --> 01:17:34.380
反正不管我用哪一个吧

01:17:34.380 --> 01:17:35.380
无所谓

01:17:35.380 --> 01:17:36.380
总之呢功能都是一样的

01:17:36.380 --> 01:17:37.380
有兴趣的话

01:17:37.380 --> 01:17:38.380
大家下来去把它写一下

01:17:38.380 --> 01:17:40.380
大致的功能就是这样子

01:17:40.380 --> 01:17:42.380
这是关于手写的

01:17:42.380 --> 01:17:43.380
crazy browser history

