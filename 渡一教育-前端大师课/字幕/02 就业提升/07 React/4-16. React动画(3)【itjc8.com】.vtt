WEBVTT

00:01.200 --> 00:05.800
这一课咯 咱们来学习这个Switch Transition这个组件

00:06.200 --> 00:08.200
这个组件也挺简单的啊

00:08.200 --> 00:12.200
只是理解上了稍微要绕一下弯

00:12.200 --> 00:13.800
稍微要绕一下弯

00:13.800 --> 00:15.800
这个组件用来干嘛的呢

00:15.800 --> 00:17.200
看这个单词啊

00:17.200 --> 00:19.200
这个Switch单词应该不陌生了吧

00:19.200 --> 00:22.200
这什么单词啊 开关对吧 开关

00:22.200 --> 00:24.200
或者说是一个切换啊

00:24.200 --> 00:26.200
Switch切换啊也就这么个意思

00:26.200 --> 00:28.200
于是这个组件是用来干嘛的呢

00:28.200 --> 00:30.200
是用来做切换的

00:31.200 --> 00:32.200
它用于

00:33.200 --> 00:35.200
用于实现切换

00:36.200 --> 00:38.200
但是跟之前的组件一样呢

00:38.200 --> 00:41.200
它也不去搞进什么具体的内样式啊

00:41.200 --> 00:43.200
具体的内样式它不搞

00:43.200 --> 00:45.200
它具体的就是效果它不管

00:45.200 --> 00:47.200
它只管给它

00:47.200 --> 00:49.200
给里边东西的添加内样式啊

00:49.200 --> 00:52.200
跟之前咱们学的那个CSS Transition差不多

00:52.200 --> 00:55.200
只是给它添加不同的内样式

00:55.200 --> 00:59.200
那跟我们之前学习的CSS Transition有什么区别呢

00:59.200 --> 01:02.200
咱们上节课的时候学习的那个CSS Transition

01:02.200 --> 01:05.200
它的切换呢我们也能实现对吧

01:05.200 --> 01:06.200
是能够实现的

01:06.200 --> 01:08.200
通过不同的样式名字

01:08.200 --> 01:11.200
来去实现这样的一个切换

01:11.200 --> 01:14.200
当时我们就加了两个CSS Transition对吧

01:14.200 --> 01:16.200
还记得吧 回忆一下啊

01:16.200 --> 01:18.200
因为我们要做一下对比

01:18.200 --> 01:21.200
我们才能知道这个组件和为什么会出现

01:21.200 --> 01:24.200
当时呢我们是使用了两个CSS Transition

01:24.200 --> 01:26.200
来做单单出嘛

01:26.200 --> 01:29.200
我们还是看一下之前的吧 刚才

01:29.200 --> 01:31.200
看一下之前得了

01:32.200 --> 01:35.200
找到这个Gate

01:35.200 --> 01:38.200
这样挖这个

01:38.200 --> 01:40.200
挖这个就是

01:40.200 --> 01:43.200
删除了啊 删除了这个笔记

01:43.200 --> 01:44.200
看一下之前的啊

01:44.200 --> 01:45.200
就是之前那个切换呢

01:45.200 --> 01:48.200
有一些场景的它不是很好解决

01:48.200 --> 01:50.200
当然要解决 肯定能解决

01:50.200 --> 01:53.200
肯定是能解决的 只是不好解决而已

01:54.200 --> 01:57.200
我看一下这个分支 这个分支已经多的不得了了

01:59.200 --> 02:01.200
下面是动画2

02:01.200 --> 02:03.200
4.15

02:03.200 --> 02:05.200
Gate

02:05.200 --> 02:07.200
Check out

02:07.200 --> 02:10.900
这是咱们之前的啊

02:10.900 --> 02:12.900
之前的那个CSS动画

02:12.900 --> 02:14.900
就是CSS Transition

02:14.900 --> 02:17.900
当时呢我们是做了两个对吧

02:17.900 --> 02:20.900
把两个组件都用那个CSS Transition

02:20.900 --> 02:23.900
这个组件里面我们包装了一下对吧

02:23.900 --> 02:25.900
这个包装了一下之后呢

02:25.900 --> 02:28.900
我们在使用里边使用了CSS Transition

02:28.900 --> 02:29.900
也就是说我们这里呢

02:29.900 --> 02:31.900
使用人比方要做切换的时候

02:31.900 --> 02:33.900
我们当时是使用两个来做切换的对吧

02:33.900 --> 02:35.900
两个CSS Transition

02:35.900 --> 02:37.900
那么切换的时候呢他们有个特点

02:37.900 --> 02:41.900
就是说他们的切换的是同时发生的对吧

02:41.900 --> 02:44.900
他在切换那样式的时候呢

02:44.900 --> 02:46.900
他也在切换那样式对不对

02:46.900 --> 02:47.900
是不是同时发生的啊

02:47.900 --> 02:50.900
这是我们之前做这个时候的特点

02:50.900 --> 02:52.900
那有的时候呢我们可能

02:52.900 --> 02:54.900
希望有一个先后顺序

02:54.900 --> 02:56.900
他们不是同时发生的啊

02:56.900 --> 02:58.900
当然要看情况啊

02:58.900 --> 03:00.900
如果说你要同时发生这种切换的

03:00.900 --> 03:01.900
那样式的切换的话

03:01.900 --> 03:02.900
那你就用之前那个

03:02.900 --> 03:03.900
没有任何问题

03:03.900 --> 03:04.900
比方说我们之前

03:04.900 --> 03:05.900
一个往左边移动弹出

03:05.900 --> 03:08.900
一个同时往右边移动弹入对不对

03:08.900 --> 03:09.900
如果说你要同时去完成

03:09.900 --> 03:10.900
这样的效果的话

03:10.900 --> 03:12.900
ok 那就用之前的那种方式

03:12.900 --> 03:14.900
没有任何问题

03:14.900 --> 03:17.900
但是如果说你有一个先后顺序

03:17.900 --> 03:19.900
比方说前边的要退出完了过后

03:19.900 --> 03:21.900
后边的再进来

03:21.900 --> 03:23.900
或者是后边的先进来

03:23.900 --> 03:24.900
进来完了之后呢

03:24.900 --> 03:25.900
前面的再退出

03:25.900 --> 03:27.900
就是有个先后顺序的话

03:27.900 --> 03:28.900
那么这个时候呢

03:28.900 --> 03:30.900
你就不能使用这种方式了

03:30.900 --> 03:31.900
或者这种方式呢

03:31.900 --> 03:33.900
你实现起来就很麻烦了

03:33.900 --> 03:35.900
你只要熟悉很多代码

03:35.900 --> 03:36.900
那么你就可以使用

03:36.900 --> 03:38.900
我们这几课要学习的这个逐渐啊

03:38.900 --> 03:40.900
动画3

03:40.900 --> 03:44.530
4-16

03:44.530 --> 03:47.530
你要使用这个了

03:47.530 --> 03:49.530
我们这里建个笔记啊

03:49.530 --> 03:52.530
建个笔记

03:52.530 --> 03:57.540
就是react动画

03:57.540 --> 04:00.540
什么switch

04:00.540 --> 04:03.540
transition

04:03.540 --> 04:06.540
我们就要使用这个switch

04:06.540 --> 04:08.540
transition这个逐渐了

04:08.540 --> 04:09.540
这个逐渐用来做什么呢

04:09.540 --> 04:12.540
它是用于有秩序的

04:12.540 --> 04:16.540
用于有秩序的

04:16.540 --> 04:17.540
怎么打的

04:17.540 --> 04:20.540
秩序的切换内部

04:20.540 --> 04:22.540
组件

04:22.540 --> 04:24.540
就是说它有个先后顺序

04:24.540 --> 04:25.540
之前的组件呢

04:25.540 --> 04:27.540
之前的那个动物元素呢

04:27.540 --> 04:29.540
你得先退出

04:29.540 --> 04:30.540
然后呢

04:30.540 --> 04:31.540
新的动物元素呢

04:31.540 --> 04:32.540
你在进来

04:32.540 --> 04:33.540
或者说新的动物元素呢

04:33.540 --> 04:34.540
你先进来

04:34.540 --> 04:36.540
然后呢就着动物元素在退出

04:36.540 --> 04:38.540
它是有秩序的切换内部的组件

04:38.540 --> 04:39.540
好

04:39.540 --> 04:40.540
咱们说了这么多

04:40.540 --> 04:41.540
还不如去看一个例子

04:41.540 --> 04:43.540
看一个例子吧

04:43.540 --> 04:44.540
我们这里呢

04:44.540 --> 04:45.540
写这么一个例子

04:45.540 --> 04:46.540
一个非常小的例子

04:46.540 --> 04:49.540
Import

04:49.540 --> 04:50.540
这里

04:50.540 --> 04:52.540
我们使用

04:52.540 --> 04:54.540
导入那个

04:54.540 --> 04:56.540
又没有只能提示

04:56.540 --> 04:57.540
导入那个react

04:57.540 --> 04:59.540
transition group

04:59.540 --> 05:00.540
这里呢

05:00.540 --> 05:01.540
我们导入它的里边一个组件

05:01.540 --> 05:02.540
叫做switch

05:02.540 --> 05:04.540
transition

05:04.540 --> 05:05.540
这个组件呢

05:05.540 --> 05:06.540
它不能单独使用

05:06.540 --> 05:08.540
它要跟那个CSS

05:08.540 --> 05:09.540
transition

05:09.540 --> 05:10.540
或者是transition

05:10.540 --> 05:11.540
组件来联用

05:11.540 --> 05:12.540
当然呢

05:12.540 --> 05:13.540
我们平常用的比较多的

05:13.540 --> 05:14.540
还是CSS

05:14.540 --> 05:15.540
是在联用的

05:15.540 --> 05:16.540
怎么联用呢

05:16.540 --> 05:17.540
具体

05:17.540 --> 05:18.540
我们来看一下

05:18.540 --> 05:20.540
这个App里边

05:20.540 --> 05:22.540
我们外层直接套一个

05:22.540 --> 05:24.540
switch

05:24.540 --> 05:25.540
transition

05:25.540 --> 05:26.540
什么意思呢

05:26.540 --> 05:27.540
就说我们现在有两个东西

05:27.540 --> 05:28.540
要进行切换

05:28.540 --> 05:30.540
比方说两个H1元素

05:30.540 --> 05:32.540
两个H1元素

05:32.540 --> 05:34.540
要实现一个切换

05:34.540 --> 05:35.540
按照之前的做法

05:35.540 --> 05:36.540
是不是要写

05:36.540 --> 05:37.540
两个CSS

05:37.540 --> 05:38.540
transition

05:38.540 --> 05:39.540
对吧

05:39.540 --> 05:40.540
但是那你外边

05:40.540 --> 05:41.540
套了一个switch

05:41.540 --> 05:42.540
transition之后呢

05:42.540 --> 05:43.540
你就不用写

05:43.540 --> 05:44.540
CSS了

05:44.540 --> 05:45.540
你要回忆一下

05:45.540 --> 05:46.540
所以说为什么说

05:46.540 --> 05:49.540
咱们课堂里边的一些代码

05:49.540 --> 05:50.540
你最好上课后

05:50.540 --> 05:52.540
你一定要跟着做一遍

05:52.540 --> 05:53.540
一定要跟着做一遍

05:53.540 --> 05:54.540
不然一点印象都没有

05:54.540 --> 05:55.540
你只是听了

05:55.540 --> 05:57.540
就听评书一样

05:57.540 --> 05:58.540
听了一个大概

05:58.540 --> 05:59.540
你没去做过的话

05:59.540 --> 06:00.540
一点印象都没有

06:00.540 --> 06:01.540
就一定要去做一下

06:01.540 --> 06:02.540
有些同学呢

06:02.540 --> 06:03.540
学着学着

06:03.540 --> 06:04.540
感觉非常老火

06:04.540 --> 06:05.540
越学越困难

06:05.540 --> 06:06.540
就是因为他

06:06.540 --> 06:07.540
平时练习量太少了

06:07.540 --> 06:08.540
这个练习量

06:08.540 --> 06:09.540
我记得我在讲

06:09.540 --> 06:10.540
很早很早的时候

06:10.540 --> 06:11.540
讲那个atema

06:11.540 --> 06:12.540
和CSS的课程的时候

06:12.540 --> 06:13.540
说过

06:13.540 --> 06:14.540
我们学习编程

06:14.540 --> 06:15.540
练习量

06:15.540 --> 06:20.540
至少要是你听课时间的相同

06:20.540 --> 06:21.540
你听课的比方

06:21.540 --> 06:22.540
听了三个小时

06:22.540 --> 06:23.540
你练习量得达到三个小时

06:23.540 --> 06:24.540
你这样

06:24.540 --> 06:25.540
或者说更高

06:25.540 --> 06:26.540
练习量越多越好

06:26.540 --> 06:28.540
要对它非常非常的熟悉

06:28.540 --> 06:29.540
不然的话

06:29.540 --> 06:30.540
你听的时候

06:30.540 --> 06:32.540
肯定是很模糊的感觉

06:32.540 --> 06:34.540
switch to transition

06:34.540 --> 06:36.540
这个组件套了之后呢

06:36.540 --> 06:37.540
它里边

06:37.540 --> 06:38.540
如果要做切换的话

06:38.540 --> 06:39.540
OK

06:39.540 --> 06:40.540
那你只需要加一个

06:40.540 --> 06:41.540
CSS transition够了

06:41.540 --> 06:42.540
只需要加一个就够了

06:42.540 --> 06:43.540
你不需要在这里边写两个

06:43.540 --> 06:45.540
这里边也不能写两个

06:45.540 --> 06:46.540
它只能写一个

06:46.540 --> 06:47.540
一个直接点

06:47.540 --> 06:48.540
好

06:48.540 --> 06:49.540
那这里边呢

06:49.540 --> 06:51.540
该怎么写就怎么写

06:51.540 --> 06:52.540
比方说呢

06:52.540 --> 06:56.540
我们这里写一个Ustet

06:56.540 --> 06:57.540
我们用一个hook

06:57.540 --> 06:58.540
当然用内组件

06:58.540 --> 07:00.540
是不是完全一样的

07:00.540 --> 07:01.540
你能用Ustet

07:01.540 --> 07:02.540
肯定用内组件

07:02.540 --> 07:04.540
能解决这样的问题

07:04.540 --> 07:05.540
我们这里呢

07:05.540 --> 07:06.540
比方说

07:06.540 --> 07:07.540
秀1

07:07.540 --> 07:08.540
显示1

07:08.540 --> 07:10.540
显示第1个标题

07:10.540 --> 07:12.540
默认是去

07:12.540 --> 07:14.540
默认是去

07:14.540 --> 07:16.540
这是CSS transition

07:16.540 --> 07:17.540
对吧

07:17.540 --> 07:18.540
OK

07:18.540 --> 07:19.540
那这里面呢

07:19.540 --> 07:21.540
我们写上的一个div

07:21.540 --> 07:22.540
这个div

07:22.540 --> 07:23.540
这个div里边

07:23.540 --> 07:24.540
我啥都先

07:24.540 --> 07:25.540
先啥都不写

07:25.540 --> 07:26.540
先啥都不写

07:26.540 --> 07:27.540
然后呢

07:27.540 --> 07:28.540
这个

07:28.540 --> 07:29.540
这个组件里边

07:29.540 --> 07:31.540
我还得套一个按钮

07:31.540 --> 07:32.540
来切换

07:32.540 --> 07:34.540
它套一个按钮

07:34.540 --> 07:35.540
button

07:35.540 --> 07:36.540
来切换

07:36.540 --> 07:38.540
切换

07:38.540 --> 07:39.540
切换的话

07:39.540 --> 07:40.540
我要解

07:40.540 --> 07:42.540
我要搞定的其实就是

07:42.540 --> 07:43.540
把这个秀1

07:43.540 --> 07:44.540
秀这个

07:44.540 --> 07:45.540
值呢

07:45.540 --> 07:46.540
给它改变

07:46.540 --> 07:47.540
unclick

07:48.540 --> 07:49.540
unclick

07:50.540 --> 07:51.540
点击之后呢

07:51.540 --> 07:52.540
我们set秀1

07:52.540 --> 07:53.540
把它设为相反的值

07:53.540 --> 07:54.540
秀1

07:55.540 --> 07:57.540
写完了过后完了吗

07:57.540 --> 07:58.540
还没完

07:58.540 --> 07:59.540
这个CSS transition

07:59.540 --> 08:01.540
是不是要给它指定

08:01.540 --> 08:02.540
你的过渡时间

08:02.540 --> 08:03.540
对不对

08:03.540 --> 08:04.540
timeouts

08:04.540 --> 08:05.540
过渡时间

08:05.540 --> 08:06.540
给它指定

08:06.540 --> 08:07.540
这里呢

08:08.540 --> 08:09.540
过渡时间的话

08:09.540 --> 08:10.540
写个3秒钟

08:10.540 --> 08:11.540
5秒钟

08:11.540 --> 08:12.540
写长一点

08:12.540 --> 08:13.540
写长一点

08:13.540 --> 08:14.540
长一点的话

08:14.540 --> 08:15.540
大家便便大家

08:15.540 --> 08:16.540
发现

08:16.540 --> 08:17.540
不是发现问题

08:17.540 --> 08:18.540
发现这个

08:18.540 --> 08:19.540
指行过程

08:19.540 --> 08:20.540
然后呢

08:20.540 --> 08:21.540
我们这个CSS transition

08:21.540 --> 08:22.540
里边

08:22.540 --> 08:23.540
以前不是有个

08:23.540 --> 08:24.540
硬这个属性吗

08:24.540 --> 08:25.540
对不对

08:25.540 --> 08:26.540
现在

08:26.540 --> 08:28.540
你不需要指定这个属性了

08:28.540 --> 08:29.540
你不需要了

08:29.540 --> 08:30.540
那么你现在

08:30.540 --> 08:31.540
转而去指定

08:31.540 --> 08:32.540
另外一个属性叫做key

08:32.540 --> 08:33.540
我一会会解释

08:33.540 --> 08:35.540
它为什么需要key这个属性

08:35.540 --> 08:36.540
key这个属性呢

08:36.540 --> 08:37.540
跟我们之前学的

08:37.540 --> 08:38.540
组件里边的key

08:38.540 --> 08:39.540
这个属性是一样的

08:39.540 --> 08:40.540
咱们之前不是讲过

08:40.540 --> 08:42.540
rekt的渲染原理的一块

08:42.540 --> 08:43.540
不是讲过的key值吗

08:43.540 --> 08:44.540
对不对

08:44.540 --> 08:45.540
在渲染的时候

08:45.540 --> 08:47.540
如果key值不一样

08:47.540 --> 08:48.540
它是一个新的

08:48.540 --> 08:49.540
它内部的动物

08:49.540 --> 08:50.540
它是要重新渲染的

08:50.540 --> 08:51.540
对不对

08:51.540 --> 08:52.540
key值不一样

08:52.540 --> 08:53.540
它对比起来

08:53.540 --> 08:54.540
发现

08:54.540 --> 08:55.540
这块组件

08:55.540 --> 08:56.540
跟之前的组件数

08:56.540 --> 08:57.540
两个key值不一样

08:57.540 --> 08:58.540
它对应不上

08:58.540 --> 08:59.540
它就会卸载之前的组件

08:59.540 --> 09:00.540
然后加入新的组件

09:00.540 --> 09:01.540
这就会导致

09:01.540 --> 09:03.540
它内部的一些动物元素

09:03.540 --> 09:04.540
就是一个崭新的元素

09:04.540 --> 09:05.540
对不对

09:05.540 --> 09:07.540
其实我都说完了

09:07.540 --> 09:08.540
key值就是做个这个用处

09:08.540 --> 09:09.540
因为它里边

09:09.540 --> 09:11.540
可能会要进行切换

09:11.540 --> 09:12.540
所以说

09:12.540 --> 09:13.540
要给它个key值

09:13.540 --> 09:15.540
保证它里边

09:15.540 --> 09:16.540
如果说不同key值

09:16.540 --> 09:17.540
下面的东西的话

09:17.540 --> 09:19.540
那么它动物元素是全新的

09:19.540 --> 09:21.540
也不是一个全新的动物元素

09:21.540 --> 09:22.540
它里怎么来切换呢

09:22.540 --> 09:23.540
对不对

09:23.540 --> 09:24.540
那么这里的key值

09:24.540 --> 09:25.540
我们随便写

09:25.540 --> 09:26.540
随便写

09:26.540 --> 09:27.540
只要能保证

09:27.540 --> 09:28.540
不同的情况下

09:28.540 --> 09:30.540
key值不一样就行了

09:30.540 --> 09:31.540
你说

09:31.540 --> 09:32.540
这个key值下面

09:32.540 --> 09:33.540
是什么效果

09:33.540 --> 09:34.540
在另外一个key值下面

09:34.540 --> 09:35.540
这个效果

09:35.540 --> 09:36.540
你只要能够保证这样

09:36.540 --> 09:37.540
这一点就行了

09:37.540 --> 09:38.540
比方说我们这里key值

09:38.540 --> 09:39.540
就可以写秀1

09:39.540 --> 09:41.540
就一个true和forced来搞定

09:41.540 --> 09:42.540
你true的时候

09:42.540 --> 09:43.540
是一个效果

09:43.540 --> 09:44.540
你forced的时候

09:44.540 --> 09:45.540
是另外一个效果

09:45.540 --> 09:46.540
当然这个key值

09:46.540 --> 09:47.540
可以是任何东西

09:47.540 --> 09:48.540
可以是字不串

09:48.540 --> 09:50.540
可以是布尔都可以

09:50.540 --> 09:51.540
好ok

09:51.540 --> 09:52.540
咱们把它写这儿

09:52.540 --> 09:53.540
写这儿的话

09:53.540 --> 09:54.540
我们看一下

09:54.540 --> 09:55.540
里边啥都没有

09:55.540 --> 09:56.540
你看我这里边有效果吗

09:56.540 --> 09:57.540
什么啥子效果都没有

09:57.540 --> 09:58.540
对不对

09:58.540 --> 09:59.540
啥效果都没有

09:59.540 --> 10:00.540
那这里呢

10:00.540 --> 10:02.540
咱们

10:02.540 --> 10:03.540
这样吧

10:03.540 --> 10:04.540
我在这里呢

10:04.540 --> 10:05.540
再加一个

10:05.540 --> 10:06.540
秀1

10:06.540 --> 10:09.540
如果秀1是true的话

10:09.540 --> 10:11.540
我们这里输出

10:11.540 --> 10:12.540
Title1

10:12.540 --> 10:14.540
用一个se

10:15.540 --> 10:16.540
se

10:16.540 --> 10:18.540
Title1

10:18.540 --> 10:19.540
然后呢

10:19.540 --> 10:21.540
否则的话是Title2

10:21.540 --> 10:22.540
这样子吧

10:22.540 --> 10:23.540
行吧

10:23.540 --> 10:25.540
秀1如果true的话

10:25.540 --> 10:26.540
我们显示Title1

10:26.540 --> 10:27.540
否则显示Title2

10:27.540 --> 10:28.540
这个不是重点

10:28.540 --> 10:29.540
我们来看一下

10:29.540 --> 10:30.540
它到底

10:30.540 --> 10:32.540
Trace-1这个主键

10:32.540 --> 10:33.540
在外面之后呢

10:33.540 --> 10:35.540
它到底控制了什么东西

10:35.540 --> 10:36.540
start

10:36.540 --> 10:37.540
运行出来

10:38.540 --> 10:39.540
不是

10:39.540 --> 10:40.540
CR

10:40.540 --> 10:41.540
Rect

10:42.540 --> 10:43.540
CR start

10:43.540 --> 10:45.540
它到底控制了什么东西

10:46.540 --> 10:47.540
像这里边到底

10:47.540 --> 10:48.540
显示哪一个

10:48.540 --> 10:49.540
是不是我们自己写的代码

10:49.540 --> 10:50.540
对吧

10:50.540 --> 10:51.540
我们自己根据

10:51.540 --> 10:52.540
秀1这个值

10:52.540 --> 10:53.540
辩量值

10:53.540 --> 10:54.540
来确定到底

10:54.540 --> 10:55.540
显示什么东西

10:55.540 --> 10:57.540
这是我们自己写的代码

10:57.540 --> 10:58.540
那么我们

10:58.540 --> 10:59.540
主要看一下

10:59.540 --> 11:01.540
它做了什么事情

11:02.540 --> 11:03.540
你看一下吧

11:04.540 --> 11:05.540
有点检查

11:05.540 --> 11:07.540
我们主要是观测它的动物元素

11:07.540 --> 11:08.540
看一下动物元素

11:08.540 --> 11:10.540
目前显示的是啥呀

11:11.540 --> 11:12.540
没保存

11:12.540 --> 11:13.540
保存一下

11:13.540 --> 11:15.540
目前显示的是不Title1

11:15.540 --> 11:16.540
对不对

11:16.540 --> 11:18.540
你看一下这个结构

11:19.540 --> 11:20.540
这个DIV

11:20.540 --> 11:21.540
它对应到哪呢

11:21.540 --> 11:22.540
这个DIV

11:22.540 --> 11:23.540
最外层的DIV

11:23.540 --> 11:24.540
它对应到这个DIV

11:24.540 --> 11:26.540
在入手下面的这个DIV

11:26.540 --> 11:27.540
然后里边这个DIV呢

11:27.540 --> 11:29.540
里边这个DIV就这

11:29.540 --> 11:30.540
或者是不要这个DIV都行

11:30.540 --> 11:32.540
就一个SE都行

11:32.540 --> 11:34.540
这样看得更加清楚一点

11:36.540 --> 11:38.540
那现在注意看哦

11:38.540 --> 11:39.540
现在这个SE

11:39.540 --> 11:40.540
这个SE是不是在这

11:40.540 --> 11:41.540
对不对

11:41.540 --> 11:42.540
SE在这

11:42.540 --> 11:43.540
接下来我们来点击按钮切换

11:43.540 --> 11:44.540
注意看哦

11:44.540 --> 11:45.540
在那眼睛就注意看

11:45.540 --> 11:46.540
点击过后

11:46.540 --> 11:47.540
你看

11:47.540 --> 11:48.540
是不是先退出

11:48.540 --> 11:50.540
之前的这个SE先退出

11:50.540 --> 11:51.540
你看还是Title1

11:51.540 --> 11:52.540
然后Title2再进来

11:52.540 --> 11:53.540
看没有

11:53.540 --> 11:54.540
加了那样式

11:54.540 --> 11:55.540
Title2再进来

11:55.540 --> 11:56.540
看没有

11:56.540 --> 11:57.540
它就做了这么一件事情

11:57.540 --> 11:58.540
然后EnterDump

11:58.540 --> 11:59.540
看到没

11:59.540 --> 12:01.540
然后再点切换

12:01.540 --> 12:02.540
你看着啊

12:02.540 --> 12:03.540
现在是Title2

12:03.540 --> 12:04.540
如果说你不套这个

12:04.540 --> 12:05.540
Switch Transition的话

12:05.540 --> 12:07.540
如果说你不套的话

12:07.540 --> 12:08.540
是一个什么样的效果呢

12:08.540 --> 12:09.540
你看一下啊

12:09.540 --> 12:11.540
如果说你不套这个东西的话

12:11.540 --> 12:12.540
点击切换

12:12.540 --> 12:13.540
是不是直接切换了

12:13.540 --> 12:14.540
对吧

12:14.540 --> 12:15.540
瞬间又切换了

12:15.540 --> 12:16.540
看没瞬间又切换了

12:16.540 --> 12:17.540
对不对

12:17.540 --> 12:18.540
当然呢

12:18.540 --> 12:20.540
你如果加上这个硬这个属性啊

12:20.540 --> 12:22.540
如果说你加上硬这个属性的话

12:22.540 --> 12:24.540
那么它还给你加一个过程啊

12:24.540 --> 12:25.540
切换一个

12:25.540 --> 12:26.540
就是加一个那样式的过程

12:26.540 --> 12:27.540
但是我们肯定是

12:27.540 --> 12:28.540
反正做不了要求的

12:28.540 --> 12:30.540
比方说我们不要

12:30.540 --> 12:32.540
Kid可以先的可以不要了

12:32.540 --> 12:33.540
Kid可以不要

12:33.540 --> 12:35.540
那么你看一下吧

12:35.540 --> 12:36.540
现在呢

12:36.540 --> 12:37.540
点击切换

12:37.540 --> 12:38.540
啊

12:38.540 --> 12:39.540
但它

12:39.540 --> 12:40.540
它这里边肯定重新

12:40.540 --> 12:41.540
马上就重新选择了

12:41.540 --> 12:42.540
对吧

12:42.540 --> 12:43.540
动物元素马上重新选择了

12:43.540 --> 12:45.540
它只是在这个时间内

12:45.540 --> 12:46.540
给你加来不同的那样式

12:46.540 --> 12:47.540
点击切换

12:47.540 --> 12:48.540
你看一下

12:48.540 --> 12:50.540
是不是还是有Enter

12:50.540 --> 12:51.540
EnterActive

12:51.540 --> 12:52.540
对不对

12:52.540 --> 12:53.540
EnterDump

12:53.540 --> 12:54.540
对吧

12:54.540 --> 12:55.540
点击切换

12:55.540 --> 12:56.540
一个Cs

12:56.540 --> 12:57.540
EnterActive

12:57.540 --> 12:58.540
对吧

12:58.540 --> 12:59.540
一个CsDump

12:59.540 --> 13:00.540
对不对

13:00.540 --> 13:02.540
但是它这里的元素渲染

13:02.540 --> 13:04.540
是不是瞬间渲染出来了

13:04.540 --> 13:05.540
能理解这个意思吧

13:05.540 --> 13:06.540
再好好看一下

13:06.540 --> 13:07.540
这是我现在

13:07.540 --> 13:09.540
不加这个Switch Transition

13:09.540 --> 13:10.540
不加的情况下

13:10.540 --> 13:12.540
那么它的渲染是这样子

13:12.540 --> 13:13.540
里边的单码

13:13.540 --> 13:14.540
就是里边的理解的东西

13:14.540 --> 13:15.540
瞬间给你渲染出来

13:15.540 --> 13:17.540
只是给你加上那样式而已

13:17.540 --> 13:19.540
我只是在那样式上做文章

13:19.540 --> 13:20.540
你看一下

13:20.540 --> 13:21.540
点击

13:21.540 --> 13:22.540
是马上显示一大

13:22.540 --> 13:23.540
对吧

13:23.540 --> 13:24.540
这些那样式我都没有写

13:24.540 --> 13:25.540
它给你加上那样式

13:25.540 --> 13:28.540
这个硬这个属性为处的时候

13:28.540 --> 13:29.540
硬这个属性为处的时候

13:29.540 --> 13:30.540
它就加上Enter

13:30.540 --> 13:31.540
EnterActive

13:31.540 --> 13:32.540
EnterDump

13:32.540 --> 13:33.540
这么一个流程

13:33.540 --> 13:34.540
给你加那样式

13:34.540 --> 13:35.540
然后再点击切换

13:35.540 --> 13:36.540
马上重新渲染

13:36.540 --> 13:38.540
然后给你加那样式

13:38.540 --> 13:39.540
一个Cs

13:39.540 --> 13:40.540
一个CsActive

13:40.540 --> 13:42.540
因为目前是FORCE

13:42.540 --> 13:43.540
对不对

13:43.540 --> 13:44.540
FORCE的话

13:44.540 --> 13:45.540
就给你加了一个Cs

13:45.540 --> 13:46.540
一个CsActive

13:46.540 --> 13:47.540
然后一个CsDump

13:47.540 --> 13:48.540
对不对

13:48.540 --> 13:49.540
它是这样的一种模式

13:49.540 --> 13:51.540
它只是给它里边的元素

13:51.540 --> 13:53.540
给它加上那样式而已

13:53.540 --> 13:54.540
这个元素瞬间渲染出来了

13:54.540 --> 13:55.540
但是如果说

13:55.540 --> 13:56.540
你现在外面掏了一个

13:56.540 --> 13:57.540
Switch Traction

13:57.540 --> 13:58.540
你看一下也不一样了

13:58.540 --> 14:00.540
没有使用硬属性

14:00.540 --> 14:01.540
对呀

14:01.540 --> 14:02.540
这里不使用硬属性

14:02.540 --> 14:03.540
那么不使用硬属性

14:03.540 --> 14:04.540
你看一下

14:04.540 --> 14:05.540
加了一个Switch Traction

14:05.540 --> 14:06.540
它会怎么来做

14:06.540 --> 14:08.540
怎么来进行操作

14:08.540 --> 14:09.540
点击切换

14:09.540 --> 14:10.540
它会把

14:10.540 --> 14:12.540
它不是立刻渲染新的元素

14:12.540 --> 14:14.540
而是把之前的元素

14:14.540 --> 14:15.540
你看

14:15.540 --> 14:16.540
先加上那样式

14:16.540 --> 14:18.540
然后最终把它移除掉

14:18.540 --> 14:20.540
移除掉之前的元素

14:20.540 --> 14:22.540
然后再把新的元素

14:22.540 --> 14:23.540
加进来

14:23.540 --> 14:25.540
我们这里寄个笔记

14:27.540 --> 14:29.540
默认情况下

14:29.540 --> 14:31.540
它的实现方式

14:31.540 --> 14:32.540
第一步

14:33.540 --> 14:35.540
当key值改变时

14:36.540 --> 14:38.540
注意啊一定是key值改变

14:38.540 --> 14:40.540
key值如果不变的话

14:40.540 --> 14:42.540
那就没有任何效果

14:42.540 --> 14:43.540
没有效果

14:43.540 --> 14:44.540
比方说我们这里看一下吧

14:44.540 --> 14:45.540
set

14:45.540 --> 14:46.540
set

14:48.540 --> 14:49.540
set

14:50.540 --> 14:52.540
set

14:52.540 --> 14:53.540
比方说啊

14:53.540 --> 14:55.540
这个就是强制刷新嘛

14:55.540 --> 14:56.540
对不对

14:56.540 --> 14:57.540
我们之前写过了

14:57.540 --> 15:00.620
强制刷新

15:00.620 --> 15:02.620
这里是force

15:02.620 --> 15:03.620
update

15:03.620 --> 15:04.620
那么看一下吧

15:04.620 --> 15:06.620
我们这里强制刷新

15:06.620 --> 15:11.090
key值就没变了对吧

15:11.090 --> 15:12.090
key值就没变了

15:12.090 --> 15:13.090
点击切换

15:13.090 --> 15:14.090
有效果吗

15:14.090 --> 15:15.090
所以我啥效果都没有

15:15.090 --> 15:16.090
这里

15:16.090 --> 15:18.090
因为它的key值没有发生变化

15:18.090 --> 15:19.090
没有发生变化的话

15:19.090 --> 15:20.090
这个组件呢

15:20.090 --> 15:21.090
它找到的就是元素

15:21.090 --> 15:22.090
跟之前的元素

15:22.090 --> 15:23.090
是完全一模一样的

15:24.090 --> 15:25.090
因为我们之前学过

15:25.090 --> 15:26.090
这个组件素里边

15:26.090 --> 15:27.090
它有了key值

15:27.090 --> 15:28.090
是不是按照key值去匹配

15:28.090 --> 15:29.090
对不对

15:29.090 --> 15:30.090
你key值没变化

15:30.090 --> 15:32.090
让这个匹配到的这个组件

15:32.090 --> 15:33.090
就是之前的组件

15:33.090 --> 15:35.090
它导致了这里边的东西呢

15:35.090 --> 15:37.090
没有发生任何变化

15:37.090 --> 15:39.090
因此它不会给你做这样的处理

15:39.090 --> 15:40.090
所以说它为什么要加key值

15:40.090 --> 15:41.090
就是这个原因

15:41.090 --> 15:42.090
加key值过后

15:42.090 --> 15:43.090
在组件素里边

15:43.090 --> 15:45.090
它就属于不同的组件了

15:45.090 --> 15:46.090
key值只要不一样

15:46.090 --> 15:48.090
它就会重新来渲染这一块

15:48.090 --> 15:49.090
那么它的渲染呢

15:49.090 --> 15:50.090
被它所控制

15:50.090 --> 15:51.090
Switch Transition

15:51.090 --> 15:52.090
所以它一定要有key值

15:52.090 --> 15:54.090
只有key值不相同的时候

15:54.090 --> 15:55.090
它才会触发

15:57.090 --> 15:58.090
它的切换

15:58.090 --> 15:59.090
才会触发这个切换

15:59.090 --> 16:01.090
key值相同是不会触发切换的

16:03.090 --> 16:04.090
好 咱们再看

16:05.090 --> 16:06.090
笔记这里

16:06.090 --> 16:08.090
当key值改变时

16:08.090 --> 16:09.090
那做什么呢

16:09.090 --> 16:11.090
Switch

16:12.090 --> 16:13.090
就是汇将

16:13.090 --> 16:15.090
之前的

16:15.090 --> 16:17.090
DOM跟元素

16:17.090 --> 16:19.090
就是在Switch

16:19.090 --> 16:21.090
Switch Transition里边

16:21.090 --> 16:23.090
它会找DOM跟元素

16:23.090 --> 16:25.090
这里边写多个DOM元素是不行的

16:25.090 --> 16:26.090
是要报错的

16:26.090 --> 16:28.090
这里写多个元素是要报错的

16:30.090 --> 16:31.090
报错了

16:31.090 --> 16:32.090
它有什么错误呢

16:32.090 --> 16:35.090
react children only expected to

16:35.090 --> 16:38.090
receive a single react element child

16:38.090 --> 16:39.090
有什么意思呢

16:39.090 --> 16:40.090
它就是说

16:40.090 --> 16:42.090
这里期望得到的是一个

16:42.090 --> 16:44.090
单个react元素

16:44.090 --> 16:45.090
而不是多个

16:45.090 --> 16:47.090
因为它会控制的是根结点

16:47.090 --> 16:48.090
根结点

16:49.090 --> 16:51.090
这个之前我也讲到了

16:51.090 --> 16:52.090
只是没有这样的颜色而已

16:53.090 --> 16:55.090
这里当key值改变的时候

16:55.090 --> 16:56.090
汇将之前

16:56.090 --> 16:58.090
就是之前显示的DOM跟元素

16:59.090 --> 17:01.090
添加退出央视

17:02.090 --> 17:04.090
添加退出央视

17:04.090 --> 17:05.090
退出央视有哪些

17:05.090 --> 17:06.090
是不是

17:06.090 --> 17:08.090
一个CX

17:08.090 --> 17:10.090
一个CX active

17:10.090 --> 17:11.090
对不对

17:11.090 --> 17:12.090
当然一个CX当就没了

17:12.090 --> 17:13.090
一个CX当就没了

17:13.090 --> 17:15.090
因为当的时候它就已经移出了

17:16.090 --> 17:17.090
那么

17:17.090 --> 17:19.090
退出完成后

17:19.090 --> 17:21.090
退出完成后

17:21.090 --> 17:23.090
将

17:23.090 --> 17:25.090
该DOM元素

17:25.090 --> 17:27.090
移除

17:27.090 --> 17:29.090
这个DOM元素它会被移除掉

17:29.090 --> 17:30.090
会被移除掉

17:30.090 --> 17:32.090
我们这里说的DOM元素

17:32.090 --> 17:33.090
都是指真词DOM元素

17:33.090 --> 17:35.090
它会直接操作真词DOM元素

17:35.090 --> 17:37.090
会把DOM元素移除掉

17:37.090 --> 17:39.090
然后

17:40.090 --> 17:42.090
将

17:42.090 --> 17:44.090
重新渲染

17:44.090 --> 17:46.090
重新渲染

17:46.090 --> 17:48.090
内部

17:48.090 --> 17:50.090
DOM元素

17:50.090 --> 17:52.090
那么这个时候才会重新渲染

17:52.090 --> 17:53.090
这个时候才会

17:53.090 --> 17:54.090
比方说它一开始

17:54.090 --> 17:55.090
为Q

17:55.090 --> 17:56.090
一开始为Q的话

17:56.090 --> 17:57.090
你看一下

17:57.090 --> 17:58.090
是不是显示了TITLE1对吧

17:58.090 --> 17:59.090
那么点击过后

17:59.090 --> 18:01.090
它先把旧的

18:01.090 --> 18:02.090
你看一下

18:02.090 --> 18:03.090
先把旧的TITLE1

18:03.090 --> 18:04.090
加上这些那样

18:04.090 --> 18:05.090
给它移除掉

18:05.090 --> 18:06.090
你看TITLE2都还没出来

18:06.090 --> 18:08.090
TITLE1移除掉了之后

18:08.090 --> 18:10.090
DOM元素移除掉过后

18:10.090 --> 18:12.090
才把新的渲染出来

18:12.090 --> 18:14.090
新的DOM元素

18:14.090 --> 18:15.090
就新的渲染

18:15.090 --> 18:16.090
重新渲染一次

18:16.090 --> 18:17.090
就这个玩意儿

18:17.090 --> 18:18.090
它会重新执行一次

18:18.090 --> 18:19.090
这个时候才渲染出来

18:19.090 --> 18:20.090
应该的意思吧

18:20.090 --> 18:22.090
渲染内部的DOM元素

18:22.090 --> 18:23.090
重新渲染

18:23.090 --> 18:24.090
好

18:24.090 --> 18:26.090
渲染完成之后

18:26.090 --> 18:27.090
渲染完成之后

18:27.090 --> 18:30.090
然后为新渲染的

18:30.090 --> 18:32.090
DOM跟元素

18:32.090 --> 18:34.090
添加进入央视

18:34.090 --> 18:35.090
什么进入央视呢

18:35.090 --> 18:36.090
就是Enter

18:36.090 --> 18:38.090
Enter Active

18:38.090 --> 18:40.090
最后进入完成之后

18:40.090 --> 18:41.090
添加什么

18:41.090 --> 18:43.090
添加Enter

18:43.090 --> 18:44.090
添加Enter

18:44.090 --> 18:45.090
就这么个意思

18:45.090 --> 18:46.090
添加Enter

18:46.090 --> 18:48.090
完了没了

18:48.090 --> 18:49.090
没了

18:49.090 --> 18:50.090
这就是

18:50.090 --> 18:52.090
它的整个切换过程

18:52.090 --> 18:53.090
再看一次

18:53.090 --> 18:54.090
再看一次

18:54.090 --> 18:55.090
点击

18:55.090 --> 18:56.090
现在是TITLE2

18:56.090 --> 18:57.090
TITLE2

18:57.090 --> 18:58.090
点击本来如果说

18:58.090 --> 18:59.090
如果说现在从

18:59.090 --> 19:01.090
马上渲染这些DOM元素的话

19:01.090 --> 19:02.090
这只元素马上得到渲染的话

19:02.090 --> 19:04.090
那么马上就切换到TITLE1了

19:04.090 --> 19:05.090
但是它没有

19:05.090 --> 19:06.090
它没有

19:06.090 --> 19:07.090
这是跟CSS Transition

19:07.090 --> 19:08.090
有很大的区别

19:08.090 --> 19:10.090
因为它是有次序的

19:10.090 --> 19:11.090
它会在地里面

19:11.090 --> 19:12.090
里边的DOM元素切换

19:12.090 --> 19:13.090
它是有次序的

19:13.090 --> 19:14.090
发生了先后次序

19:14.090 --> 19:16.090
它先把旧的给看

19:16.090 --> 19:18.090
移除掉

19:18.090 --> 19:20.090
移除掉之后

19:20.090 --> 19:22.090
然后是不是新的才进来

19:22.090 --> 19:23.090
对不对

19:23.090 --> 19:24.090
新的才进来

19:24.090 --> 19:25.090
也就是如果说

19:25.090 --> 19:26.090
我们来验证一下的话

19:26.090 --> 19:27.090
你看着

19:27.090 --> 19:28.090
来验证一下

19:28.090 --> 19:29.090
这个Ace

19:29.090 --> 19:30.090
跟一会的Ace

19:30.090 --> 19:31.090
是不是同一个Ace呢

19:31.090 --> 19:32.090
来验证一下

19:32.090 --> 19:33.090
Ace Documents

19:33.090 --> 19:35.090
Carry Snegator

19:35.090 --> 19:37.090
就Ace一元素吧

19:37.090 --> 19:38.090
因为一面上

19:38.090 --> 19:39.090
只有一个Ace

19:39.090 --> 19:40.090
Ace一元素

19:40.090 --> 19:41.090
看到没

19:41.090 --> 19:42.090
接下来

19:42.090 --> 19:44.090
我们再来切换

19:44.090 --> 19:45.090
切换等着

19:45.090 --> 19:47.090
等它切换完了过后

19:47.090 --> 19:48.090
又有一个Ace一元素

19:48.090 --> 19:49.090
你看

19:49.090 --> 19:50.090
是不是又是一个Ace一元素

19:50.090 --> 19:51.090
接下来

19:51.090 --> 19:52.090
我们又来获取

19:53.090 --> 19:54.090
完了

19:54.090 --> 19:55.090
我们把变量覆盖了

19:55.090 --> 19:56.090
变量覆盖了

19:56.090 --> 19:57.090
重新来吧

19:57.090 --> 19:59.090
我换一个名字

19:59.090 --> 20:01.090
DOM1

20:01.090 --> 20:02.090
DOM1Ace一元素

20:02.090 --> 20:03.090
好

20:03.090 --> 20:04.090
再来点切换

20:04.090 --> 20:07.090
给它退出

20:07.090 --> 20:08.090
退出过后

20:08.090 --> 20:10.090
到了Ace元素里边来了

20:10.090 --> 20:11.090
好

20:11.090 --> 20:13.090
那么现在DOM2

20:13.090 --> 20:14.090
现在我们观察一下

20:14.090 --> 20:16.090
DOM1跟DOM2

20:16.090 --> 20:17.090
是不是两个一样的组件

20:17.090 --> 20:19.090
所以一样个DOM元素

20:19.090 --> 20:21.090
不一样

20:21.090 --> 20:22.090
这跟我们之前学到

20:22.090 --> 20:23.090
是不是有区别了

20:23.090 --> 20:24.090
之前

20:24.090 --> 20:25.090
我们这里

20:25.090 --> 20:26.090
你看只要这个元素

20:26.090 --> 20:27.090
它没有发生变化

20:27.090 --> 20:28.090
对吧

20:28.090 --> 20:29.090
我们这里

20:29.090 --> 20:30.090
它肯定是

20:30.090 --> 20:31.090
只是选了内部

20:31.090 --> 20:32.090
只是把这个地方变了

20:32.090 --> 20:33.090
对不对

20:33.090 --> 20:35.090
只是选了它内部的文本节点

20:35.090 --> 20:36.090
文本节点

20:36.090 --> 20:37.090
把它的直切换一下

20:37.090 --> 20:38.090
甚至文本节点

20:38.090 --> 20:40.090
它的引用都是一样的

20:40.090 --> 20:41.090
只是把直切换一下

20:41.090 --> 20:43.090
但是为什么现在变成

20:43.090 --> 20:44.090
全新的DOM元素呢

20:44.090 --> 20:45.090
就是因为这个key的存在

20:45.090 --> 20:47.090
因为key值的不同

20:47.090 --> 20:48.090
导致了它之前的DOM书里边

20:48.090 --> 20:49.090
对应不上

20:49.090 --> 20:50.090
对应不上的话

20:50.090 --> 20:52.090
它只能卸载之前的DOM书

20:52.090 --> 20:53.090
然后使用新的DOM书

20:53.090 --> 20:54.090
全部重新双减

20:54.090 --> 20:55.090
就是因为key值的存在

20:55.090 --> 20:57.090
这也是它为什么

20:57.090 --> 20:59.090
要使用key的原因

20:59.090 --> 21:00.090
只有有了key

21:00.090 --> 21:01.090
它才能保证

21:01.090 --> 21:02.090
它里边全是全新的东西

21:02.090 --> 21:04.090
全新的东西的话

21:04.090 --> 21:06.090
那么

21:06.090 --> 21:07.090
它在处理的时候

21:07.090 --> 21:08.090
它就会

21:08.090 --> 21:09.090
它肯定有一个东西

21:09.090 --> 21:12.090
把之前的DOM元素保存了起来

21:12.090 --> 21:14.090
然后DOM元素加上那样式

21:14.090 --> 21:16.090
然后把新的DOM元素

21:16.090 --> 21:18.090
它的东西

21:18.090 --> 21:20.090
等到合适的时候

21:20.090 --> 21:21.090
再把它宣传出来

21:21.090 --> 21:23.090
没了这意思吗

21:23.090 --> 21:24.090
等到合适的时候

21:24.090 --> 21:25.090
再把它宣传出来

21:25.090 --> 21:26.090
其实你理解了

21:26.090 --> 21:27.090
这一点之后

21:27.090 --> 21:29.090
就是就已经差不多了

21:29.090 --> 21:30.090
就理解了

21:30.090 --> 21:33.090
它那就是整个切换过程

21:33.090 --> 21:34.090
就已经差不多了

21:34.090 --> 21:35.090
学习的

21:35.090 --> 21:36.090
接下来就是应用了

21:36.090 --> 21:38.090
应用还不简单

21:38.090 --> 21:39.090
它无非就是给一些DOM元素

21:39.090 --> 21:40.090
加上一些样式

21:40.090 --> 21:41.090
对不对

21:41.090 --> 21:42.090
加上一些样式

21:42.090 --> 21:43.090
那你只需要老老实实的

21:43.090 --> 21:44.090
把推出样式写出来

21:44.090 --> 21:46.090
把那个什么

21:46.090 --> 21:47.090
进入样式写出来

21:47.090 --> 21:48.090
当然

21:48.090 --> 21:49.090
如果你要改变样式名字的话

21:49.090 --> 21:50.090
还是一样

21:50.090 --> 21:51.090
还是一样

21:51.090 --> 21:52.090
就这个组建

21:52.090 --> 21:53.090
它只是起了一个

21:53.090 --> 21:54.090
包裹的作用

21:54.090 --> 21:55.090
把包裹起来就完成了

21:55.090 --> 21:56.090
它本身没有啥属性

21:56.090 --> 21:57.090
我们这里

21:57.090 --> 21:58.090
可以加class name

21:58.090 --> 21:59.090
对不对

21:59.090 --> 22:00.090
可以加一些

22:00.090 --> 22:01.090
潜罪

22:01.090 --> 22:02.090
或者是制定的样式

22:02.090 --> 22:04.090
那样式名字

22:04.090 --> 22:05.090
我们这里不加了

22:05.090 --> 22:06.090
当然加了

22:06.090 --> 22:07.090
调CSS

22:07.090 --> 22:08.090
当然也可以利用什么

22:08.090 --> 22:09.090
animate

22:09.090 --> 22:11.090
调CSS.cool

22:11.090 --> 22:12.090
好

22:12.090 --> 22:13.090
那么这里

22:13.090 --> 22:15.090
我们在CSS里面写上一个

22:15.090 --> 22:16.090
或者说

22:16.090 --> 22:17.090
我们就是用animate

22:17.090 --> 22:18.090
调CSS.cool

22:18.090 --> 22:20.090
我们就是用animate cool

22:20.090 --> 22:23.090
看看我这个地方安装了没有

22:23.090 --> 22:25.090
没有安装

22:25.090 --> 22:26.090
没有安装

22:26.090 --> 22:28.090
那我这里安装一个

22:28.090 --> 22:30.720
就是用animate cool

22:30.720 --> 22:31.720
一二

22:31.720 --> 22:32.720
start

22:32.720 --> 22:33.720
算了

22:33.720 --> 22:34.720
我们先手写一个

22:34.720 --> 22:36.720
再使用animate.css

22:36.720 --> 22:37.720
先手写一个

22:37.720 --> 22:38.720
免得有些同学呢

22:38.720 --> 22:39.720
换了一种成绩

22:39.720 --> 22:41.720
他就不知道该怎么去手写了

22:41.720 --> 22:42.720
还是一样的

22:42.720 --> 22:43.720
还是一样的

22:43.720 --> 22:45.720
老老实实把那些推出样式写出来就完成了

22:45.720 --> 22:46.720
写出来就完成了

22:46.720 --> 22:48.720
推出的时候

22:48.720 --> 22:50.720
一个set

22:50.720 --> 22:51.720
一个set

22:51.720 --> 22:53.720
active

22:53.720 --> 22:54.720
推出的时候

22:54.720 --> 22:55.720
干嘛呢

22:55.720 --> 22:57.720
加上一个transition

22:57.720 --> 22:58.720
比方说

22:58.720 --> 22:59.720
一秒钟

22:59.720 --> 23:00.720
一秒钟

23:00.720 --> 23:01.720
一秒钟完成推出

23:01.720 --> 23:02.720
但是这里写的是5秒

23:02.720 --> 23:03.720
时间最好是统一

23:03.720 --> 23:04.720
最好是统一

23:04.720 --> 23:05.720
不然的话

23:05.720 --> 23:06.720
这里5秒钟之后才进入

23:06.720 --> 23:08.720
但是你一秒钟就已经推出完了

23:08.720 --> 23:10.720
那么这里transition

23:10.720 --> 23:11.720
一秒钟

23:11.720 --> 23:13.720
我们这里写上那个

23:13.720 --> 23:14.720
嗯

23:14.720 --> 23:15.720
还写啥呢

23:15.720 --> 23:16.720
还有opacity

23:16.720 --> 23:17.720
等于0

23:17.720 --> 23:19.720
opacity等于0

23:20.720 --> 23:21.720
好

23:21.720 --> 23:22.720
然后

23:23.720 --> 23:24.720
enter

23:24.720 --> 23:25.720
enter

23:25.720 --> 23:27.720
enter进来的时候

23:28.720 --> 23:30.720
transition先把

23:30.720 --> 23:31.720
进来的时候

23:32.720 --> 23:34.720
opacity先把设为0

23:34.720 --> 23:36.720
然后等到enter active的时候

23:36.720 --> 23:38.720
transition

23:38.720 --> 23:40.720
设为1秒钟

23:40.720 --> 23:41.720
然后opacity

23:41.720 --> 23:42.720
设为1

23:42.720 --> 23:43.720
对吧

23:43.720 --> 23:44.720
就完了

23:45.720 --> 23:46.720
什么意思呢

23:46.720 --> 23:47.720
就是说你如果一个

23:47.720 --> 23:48.720
就是一个元素

23:48.720 --> 23:49.720
它一开始显示的时候

23:49.720 --> 23:50.720
一开始的时候

23:50.720 --> 23:52.720
显示的时候了

23:52.720 --> 23:53.720
然后它要退出

23:53.720 --> 23:54.720
退出的话

23:54.720 --> 23:55.720
它就应用这个样式

23:55.720 --> 23:57.720
把opacity设为0

23:57.720 --> 23:58.720
你忘了

23:58.720 --> 23:59.720
把它退出完了过后

23:59.720 --> 24:01.720
它肯定会移除掉

24:01.720 --> 24:03.720
把之前的元素移除掉

24:03.720 --> 24:04.720
移除掉过后

24:04.720 --> 24:05.720
再进入enter

24:05.720 --> 24:06.720
enter到进入的时候

24:06.720 --> 24:07.720
最开始进入的时候

24:07.720 --> 24:09.720
这个元素加进来过后

24:09.720 --> 24:10.720
先把它变成透明

24:10.720 --> 24:11.720
完全透明

24:11.720 --> 24:13.720
然后在1秒钟之后

24:13.720 --> 24:15.720
把它变成透明度变成1

24:15.720 --> 24:16.720
就不透明

24:16.720 --> 24:17.720
对吧

24:18.720 --> 24:20.720
就是你理解的原理之后

24:20.720 --> 24:21.720
你就知道这个样子

24:21.720 --> 24:22.720
该取什么去加了

24:22.720 --> 24:24.720
你不理解它的执行原理的话

24:24.720 --> 24:25.720
你去使用背

24:25.720 --> 24:26.720
那肯定不行

24:27.720 --> 24:28.720
OK

24:28.720 --> 24:29.720
那看一下吧

24:30.720 --> 24:31.720
看一下

24:32.720 --> 24:34.720
这里点击切换

24:35.720 --> 24:36.720
你看

24:36.720 --> 24:37.720
是不是完成了

24:37.720 --> 24:38.720
对吧

24:38.720 --> 24:39.720
看到没

24:40.720 --> 24:41.720
跟之前有啥不一样

24:41.720 --> 24:43.720
是不是它一个

24:43.720 --> 24:45.720
先后次序

24:45.720 --> 24:47.720
先退出再进入

24:47.720 --> 24:48.720
先退出再进入

24:48.720 --> 24:49.720
看到没

24:49.720 --> 24:50.720
这是一个先后次序

24:50.720 --> 24:52.720
这是跟之前最大的区别

24:52.720 --> 24:53.720
我们这里

24:53.720 --> 24:56.720
没有写两个CSS translation

24:56.720 --> 24:58.720
就用了一个

24:58.720 --> 24:59.720
对吧

24:59.720 --> 25:00.720
就用了一个

25:00.720 --> 25:02.720
它给里边的东西加上样式

25:02.720 --> 25:05.720
它来控制这里边的东西

25:05.720 --> 25:07.720
退出的时候该加什么样式

25:07.720 --> 25:08.720
退出完了过

25:08.720 --> 25:09.720
它会把动物对象移除

25:09.720 --> 25:10.720
然后再进入

25:10.720 --> 25:11.720
进入的时候

25:11.720 --> 25:12.720
就是一个全新的动物对象了

25:12.720 --> 25:13.720
就不像是之前的动物对象了

25:13.720 --> 25:14.720
你一定要理解

25:14.720 --> 25:16.720
它是一个全新的动物对象

25:16.720 --> 25:17.720
因为Key值不一样

25:17.720 --> 25:19.720
它是用这种方式来操作的

25:19.720 --> 25:20.720
那么这种方式来操作的话

25:20.720 --> 25:22.720
其实理想在这种场景下面

25:22.720 --> 25:24.720
用这个东西是不是非常简单变的

25:24.720 --> 25:25.720
变得非常简单

25:25.720 --> 25:27.720
要理解清楚

25:27.720 --> 25:32.220
可能有那么一点绕

25:32.220 --> 25:34.220
那么另外我再说一下

25:34.220 --> 25:35.220
这个switch translation里面

25:35.220 --> 25:37.220
有个属性叫做mode

25:37.220 --> 25:39.220
mode属性

25:39.220 --> 25:41.220
这个属性它有两个曲子

25:41.220 --> 25:42.220
一个是out in

25:42.220 --> 25:43.220
out in是什么

25:43.220 --> 25:47.220
先退出再进入

25:47.220 --> 25:48.220
就跟我们默认情况下

25:48.220 --> 25:49.220
是out in

25:49.220 --> 25:51.220
先退出再进入

25:51.220 --> 25:52.220
这个东西是可以改的

25:52.220 --> 25:53.220
改成什么

25:53.220 --> 25:55.220
改成in out

25:55.220 --> 25:57.220
先进入再退出

25:57.220 --> 25:59.220
那么我们看一下

25:59.220 --> 26:02.220
in out的情况

26:02.220 --> 26:04.220
in out的情况是怎么呢

26:04.220 --> 26:06.220
它一开始就直接渲染

26:06.220 --> 26:08.220
内部的动物元素

26:08.220 --> 26:10.220
重新渲染内部的动物元素

26:10.220 --> 26:15.220
但是保留之前的元素

26:15.220 --> 26:17.220
它不会把之前的元素移除

26:17.220 --> 26:19.220
因为它一定是一个全新的东西

26:19.220 --> 26:21.220
所以说我们这里只写了一个A期

26:21.220 --> 26:22.220
在切换的时候

26:22.220 --> 26:24.220
它一定是创建一个全新的动物对象

26:24.220 --> 26:26.220
保留之前的元素

26:27.220 --> 26:29.220
然后第二步

26:29.220 --> 26:31.220
为新渲染的

26:32.220 --> 26:33.220
先进入

26:33.220 --> 26:35.220
先把进入搞定

26:35.220 --> 26:37.220
把进入搞定

26:37.220 --> 26:40.220
搞定了之后

26:40.220 --> 26:42.220
就是enter down了之后

26:42.220 --> 26:43.220
然后再退

26:43.220 --> 26:45.220
再就是

26:45.220 --> 26:47.220
将

26:47.220 --> 26:50.220
之前的动物元素

26:53.220 --> 26:55.220
会将之前的动物元素

26:55.220 --> 26:57.220
添加退出样式

26:57.220 --> 26:58.220
然后最后

26:58.220 --> 27:00.220
移除

27:00.220 --> 27:01.220
退出完成之后

27:01.220 --> 27:02.220
移除搞定动物元素

27:02.220 --> 27:03.220
对吧

27:03.220 --> 27:04.220
先进入后退出

27:04.220 --> 27:05.220
好

27:05.220 --> 27:06.220
接下来我们看一下

27:06.220 --> 27:07.220
那么现在

27:07.220 --> 27:09.220
我们把它变成了in out

27:09.220 --> 27:10.220
变成了in out

27:10.220 --> 27:11.220
那么现在有什么区别呢

27:11.220 --> 27:12.220
先不用看界面

27:12.220 --> 27:14.220
主要是关注这

27:14.220 --> 27:15.220
主要是关注这

27:15.220 --> 27:16.220
看着

27:16.220 --> 27:17.220
点切换

27:17.220 --> 27:18.220
你看是不是

27:18.220 --> 27:19.220
两个A期出现了

27:19.220 --> 27:20.220
看到没

27:20.220 --> 27:21.220
太快了

27:21.220 --> 27:22.220
太快了

27:22.220 --> 27:24.220
这里我们写个5秒钟

27:24.220 --> 27:25.220
不用去管央视

27:25.220 --> 27:26.220
央视我一个

27:26.220 --> 27:27.220
感觉5秒钟

27:27.220 --> 27:28.220
5秒

27:30.220 --> 27:32.220
注意看这里

27:32.220 --> 27:34.220
看主要看这里的央视

27:34.220 --> 27:35.220
不用去看界面

27:35.220 --> 27:36.220
点切换

27:36.220 --> 27:37.220
你看

27:37.220 --> 27:38.220
enter into active

27:38.220 --> 27:39.220
对吧

27:39.220 --> 27:41.220
是不是出现两个了

27:41.220 --> 27:42.220
down

27:42.220 --> 27:43.220
然后这个时候再退出

27:43.220 --> 27:44.220
看到没

27:44.220 --> 27:45.220
对吧

27:45.220 --> 27:46.220
也就是我们

27:46.220 --> 27:47.220
再一次说明了

27:47.220 --> 27:48.220
什么了

27:48.220 --> 27:49.220
再一次说明了

27:49.220 --> 27:50.220
它在切换的时候

27:50.220 --> 27:51.220
使用的是不同的动物元素

27:51.220 --> 27:52.220
真实动物

27:52.220 --> 27:53.220
真实动物元素

27:53.220 --> 27:54.220
都是不一样的

27:54.220 --> 27:55.220
都是不一样的

27:55.220 --> 27:56.220
也不要把它理解成同一个了

27:56.220 --> 27:57.220
虽然我们在写的时候

27:57.220 --> 27:58.220
只写了一个

27:58.220 --> 27:59.220
但是实际上

27:59.220 --> 28:00.220
它是给你控制了这一块

28:00.220 --> 28:01.220
因为

28:01.220 --> 28:02.220
因为这个玩意是

28:02.220 --> 28:03.220
通过切组捲传给它的

28:03.220 --> 28:04.220
你就完全受到

28:04.220 --> 28:05.220
受到它的操作

28:05.220 --> 28:06.220
对吧

28:06.220 --> 28:07.220
它是

28:07.220 --> 28:08.220
不要认为这个东西

28:08.220 --> 28:09.220
是周底的控制

28:09.220 --> 28:10.220
受它的控制

28:10.220 --> 28:11.220
因为你是通过

28:11.220 --> 28:13.220
切组捲传给它的

28:13.220 --> 28:14.220
因此

28:14.220 --> 28:15.220
它可以找到

28:15.220 --> 28:16.220
切组捲属性里面的东西

28:16.220 --> 28:18.220
它可以把之前的东西保留起来

28:18.220 --> 28:20.220
明白这个意思吗

28:20.220 --> 28:21.220
这是这一块

28:21.220 --> 28:23.220
它是怎么来处理这个问题的

28:23.220 --> 28:25.220
那么就是先进入

28:25.220 --> 28:27.220
后退出的情况

28:27.220 --> 28:29.220
前进入后退出

28:29.220 --> 28:31.220
这是这一块

28:33.220 --> 28:34.220
那么如果说

28:34.220 --> 28:36.220
这里还是把它变回去

28:36.220 --> 28:37.220
变成奥茨因

28:37.220 --> 28:39.220
因为目前这个效果里面的奥茨因

28:39.220 --> 28:41.220
要正确一点

28:41.220 --> 28:42.220
先退出

28:42.220 --> 28:44.220
先退出再进入

28:45.220 --> 28:47.220
那如果说一开始

28:47.220 --> 28:49.220
一开始就要使用动画了

28:49.220 --> 28:50.220
怎么办呢

28:51.220 --> 28:52.220
是不是用Apple

28:52.220 --> 28:53.220
对不对

28:53.220 --> 28:55.220
加上一个Apple

28:55.220 --> 28:56.220
那么加了Apple之后

28:56.220 --> 28:57.220
咱们再看

28:58.220 --> 28:59.220
你看一下

28:59.220 --> 29:00.220
是不是有这个东西的

29:00.220 --> 29:01.220
对不对

29:01.220 --> 29:02.220
跟之前是不是一样的

29:02.220 --> 29:03.220
对吧

29:03.220 --> 29:04.220
有啥区别呢

29:04.220 --> 29:05.220
那么这里

29:05.220 --> 29:06.220
我们只需要搞定什么呢

29:06.220 --> 29:07.220
搞定

29:07.220 --> 29:08.220
这里

29:08.220 --> 29:09.220
Apple加上一个

29:09.220 --> 29:10.220
Apple

29:11.220 --> 29:12.220
Apple

29:12.220 --> 29:14.220
然后这里加上一个什么

29:14.220 --> 29:15.220
Enter

29:15.220 --> 29:16.220
Enter

29:17.220 --> 29:18.220
Apple

29:18.220 --> 29:19.220
Apple

29:19.220 --> 29:20.220
Apple

29:20.220 --> 29:21.220
对不对

29:21.220 --> 29:22.220
加上这个东西就行了

29:22.220 --> 29:23.220
刷新

29:23.220 --> 29:24.220
你看一下

29:24.220 --> 29:25.220
一开始是不是有一个

29:25.220 --> 29:26.220
进入的效果

29:26.220 --> 29:27.220
对不对

29:27.220 --> 29:29.220
这些东西都会变的

29:31.600 --> 29:32.600
我这些错了

29:33.600 --> 29:34.600
吓我一跳

29:34.600 --> 29:35.600
刷新

29:35.600 --> 29:36.600
一开始

29:36.600 --> 29:38.600
一开始是不是有动画的效果了

29:38.600 --> 29:39.600
对不对

29:39.600 --> 29:40.600
好

29:40.600 --> 29:41.600
这就是Switch

29:41.600 --> 29:42.600
好

29:42.600 --> 29:43.600
那么这里

29:43.600 --> 29:44.600
我们刚才举了这么一个

29:44.600 --> 29:45.600
例子

29:45.600 --> 29:46.600
再来一个吧

29:46.600 --> 29:48.600
我们结合的Animate来使用

29:48.600 --> 29:50.600
结合Animate来使用

29:50.600 --> 29:53.680
好

29:53.680 --> 29:54.680
这里的GS里边

29:54.680 --> 29:56.680
我们安装Animate.css

29:57.680 --> 29:58.680
好

29:58.680 --> 29:59.680
12add

29:59.680 --> 30:01.680
Animate.css

30:01.680 --> 30:07.130
这个东西

30:07.130 --> 30:08.130
这些常用东西

30:08.130 --> 30:09.130
我都应该

30:09.130 --> 30:11.130
把它安装到Master分支里边

30:11.130 --> 30:12.130
以后每次

30:12.130 --> 30:14.130
就是Checkout的时候

30:14.130 --> 30:15.130
我都

30:15.130 --> 30:16.130
新建分支的时候都可以

30:16.130 --> 30:17.130
因为新建分支我一般都是

30:17.130 --> 30:19.130
从Master分支里边去新建的

30:19.130 --> 30:20.130
这样子的话

30:20.130 --> 30:21.130
就可以保留这些库了

30:21.130 --> 30:22.130
常用的库

30:23.130 --> 30:24.130
好

30:24.130 --> 30:25.130
安装好了

30:25.130 --> 30:26.130
再启动起来

30:26.130 --> 30:29.270
好

30:29.270 --> 30:31.270
原来我们再做一个Animate的地址

30:32.270 --> 30:33.270
好

30:33.270 --> 30:34.270
这里再倒入一个css

30:34.270 --> 30:36.270
就是Animate.css

30:36.270 --> 30:37.270
倒入这个css

30:40.270 --> 30:42.270
那么Animate.css里边

30:42.270 --> 30:43.270
我们也要做

30:43.270 --> 30:44.270
类似的效果吧

30:44.270 --> 30:46.270
做一个类似的效果

30:46.270 --> 30:47.270
比方说

30:47.270 --> 30:49.270
这个H1元素

30:49.270 --> 30:51.270
我们怎么弄呢

30:52.270 --> 30:54.270
这个H1元素

30:54.270 --> 30:55.270
我们给它个宽度

30:55.270 --> 30:57.270
让它居中吧

30:57.270 --> 30:58.270
H1元素

30:58.270 --> 30:59.270
给它个宽度

30:59.270 --> 31:01.270
宽度的话

31:01.270 --> 31:02.270
或者说我们这样子

31:02.270 --> 31:04.270
把整个div

31:04.270 --> 31:05.270
给它个cssname

31:05.270 --> 31:06.270
container

31:06.270 --> 31:08.270
给整个div的一个宽度

31:09.270 --> 31:11.270
让它居中

31:11.270 --> 31:12.270
宽度呢

31:13.270 --> 31:14.270
无改参数

31:15.270 --> 31:16.270
Martin

31:18.270 --> 31:20.270
无改参数就觉得多了

31:21.270 --> 31:22.270
100个参数得了

31:25.030 --> 31:26.030
看一下

31:27.030 --> 31:28.030
没居中呢

31:30.030 --> 31:31.030
刚才改到哪去了

31:31.030 --> 31:32.030
改到这边去了

31:32.030 --> 31:33.030
改到这边去了

31:33.030 --> 31:34.030
改错了

31:35.030 --> 31:36.030
这边

31:37.030 --> 31:38.030
保存

31:39.030 --> 31:40.030
居中了

31:41.030 --> 31:42.030
然后

31:42.030 --> 31:45.030
我们要搞定这里的动画

31:45.030 --> 31:47.030
试一下搞定这里的动画

31:48.030 --> 31:50.030
默认字就是out in

31:50.030 --> 31:52.030
这个属性没有啥属性

31:52.030 --> 31:53.030
就这个属性

31:53.030 --> 31:54.030
默认还有什么

31:54.030 --> 31:55.030
还有一个c chosen

31:55.030 --> 31:56.030
c chosen就写到里边

31:57.030 --> 31:58.030
然后

31:58.030 --> 31:59.030
这里边

31:59.030 --> 32:00.030
我们写上

32:03.030 --> 32:05.030
写上classnames

32:06.030 --> 32:09.030
给它写上一些内样式

32:09.030 --> 32:11.030
就在分别控制一下

32:11.030 --> 32:13.030
首先我们搞定退出

32:13.030 --> 32:14.030
搞定退出

32:14.030 --> 32:15.030
一个set

32:16.030 --> 32:17.030
或者说一个set active

32:17.030 --> 32:18.030
都行

32:19.030 --> 32:21.030
因为它直接从进入的过程中

32:21.030 --> 32:22.030
到退出

32:22.030 --> 32:23.030
我们就写一个set

32:23.030 --> 32:24.030
一个set的内样式

32:24.030 --> 32:25.030
退出的内样式

32:25.030 --> 32:26.030
是什么呢

32:26.030 --> 32:27.030
比方说我们这里

32:27.030 --> 32:28.030
时间

32:28.030 --> 32:30.030
时间上我们写个

32:32.030 --> 32:33.030
无妙

32:33.030 --> 32:34.030
就保持无妙

32:34.030 --> 32:36.030
这些我们先暂时不写

32:36.030 --> 32:37.030
这些先暂时不写

32:37.030 --> 32:38.030
就不用写了

32:39.030 --> 32:40.030
一个set的样式

32:40.030 --> 32:41.030
我们找一找

32:41.030 --> 32:42.030
active的官方文的

32:43.030 --> 32:45.030
animate的官方文档

32:46.030 --> 32:47.030
要我记住

32:47.030 --> 32:48.030
我肯定是记不住的

32:51.030 --> 32:52.030
当然

32:52.030 --> 32:53.030
这个H1元素

32:53.030 --> 32:54.030
H1元素

32:54.030 --> 32:55.030
还有一个

32:56.030 --> 32:57.030
默认一个内样式

32:57.030 --> 32:58.030
默认什么

32:58.030 --> 32:59.030
animate的

32:59.030 --> 33:00.030
默认有这么一个内样式

33:00.030 --> 33:02.030
默认有这么一个内样式

33:02.030 --> 33:04.030
然后有一个时间

33:05.030 --> 33:06.030
时间

33:06.030 --> 33:07.030
我们用

33:07.030 --> 33:08.030
还是用fast

33:08.030 --> 33:09.030
所以说800毫秒

33:09.030 --> 33:10.030
还是用fast

33:10.030 --> 33:11.030
时间

33:11.030 --> 33:12.030
那现在我们先

33:12.030 --> 33:13.030
不用样式的看一下吧

33:13.030 --> 33:14.030
它会不会影响

33:14.030 --> 33:15.030
它自身的样式

33:15.030 --> 33:16.030
它会不会影响

33:16.030 --> 33:17.030
这个H自身的样式

33:20.030 --> 33:22.030
有些样式我没写

33:22.030 --> 33:23.030
它没有写

33:23.030 --> 33:24.030
它就是animate的

33:24.030 --> 33:25.030
没关系

33:25.030 --> 33:26.030
咱们来看一下

33:26.030 --> 33:27.030
是不是没有影响自身的样式

33:27.030 --> 33:28.030
对吧

33:28.030 --> 33:29.030
没有影响自身的样式

33:29.030 --> 33:30.030
点击过后

33:30.030 --> 33:31.030
它没有影响自身的样式

33:32.030 --> 33:33.030
好

33:33.030 --> 33:34.030
咱们看一下

33:34.030 --> 33:36.860
该应用什么样式

33:37.860 --> 33:38.860
应用个啥呢

33:39.860 --> 33:44.000
退出

33:44.000 --> 33:46.000
退出

33:46.000 --> 33:47.000
Bounce out

33:47.000 --> 33:48.000
你看退出

33:48.000 --> 33:49.000
用这个

33:49.000 --> 33:50.000
Bounce out

33:51.000 --> 33:52.000
我看一下

33:52.000 --> 33:53.000
还有什么退出

33:53.000 --> 33:55.000
Fade的一个设计

33:55.000 --> 33:56.000
Rotating

33:57.000 --> 33:58.000
旋转退出

33:58.000 --> 33:59.000
你们觉得哪个好看一点

34:00.000 --> 34:02.000
Snyding

34:03.000 --> 34:05.000
这样退出

34:05.000 --> 34:07.000
看一下吧

34:07.000 --> 34:08.000
Roo

34:08.000 --> 34:09.000
放大缩小

34:09.000 --> 34:10.000
这样退出

34:11.000 --> 34:12.000
随便吧

34:12.000 --> 34:13.000
我们哪一个

34:13.000 --> 34:15.000
就来个Bounce

34:15.000 --> 34:16.000
Bounce in

34:16.000 --> 34:17.000
Bounce in

34:18.000 --> 34:19.000
好

34:19.000 --> 34:20.000
那么我们退出

34:20.000 --> 34:21.000
样式的就再加上

34:21.000 --> 34:23.000
Bounce in

34:23.000 --> 34:24.000
Bounce in这个样式

34:24.000 --> 34:25.000
看一下吧

34:25.000 --> 34:26.000
退出

34:26.000 --> 34:27.000
看着

34:31.000 --> 34:32.000
我看一下

34:32.000 --> 34:33.000
加的样式

34:35.000 --> 34:36.000
加的是Bounce in去了

34:36.000 --> 34:37.000
应该是Bounce out

34:37.000 --> 34:38.000
退出是Bounce out

34:39.000 --> 34:41.000
退出变得呈现了

34:42.000 --> 34:43.000
看一下

34:43.000 --> 34:44.000
对吧

34:45.000 --> 34:46.000
退出了

34:46.000 --> 34:47.000
对不对

34:47.000 --> 34:48.000
那么进入

34:48.000 --> 34:49.000
进入的话

34:49.000 --> 34:50.000
我们是不是用

34:50.000 --> 34:51.000
Enter样式

34:51.000 --> 34:52.000
对不对

34:52.000 --> 34:53.000
进入用Enter样式

34:53.000 --> 34:54.000
Enter Active都行

34:54.000 --> 34:56.000
几乎是同一时间加的

34:57.000 --> 34:58.000
进入的话

34:58.000 --> 35:00.000
用Bounce in

35:00.000 --> 35:01.000
Bounce in这个样式

35:02.000 --> 35:03.000
你看一下

35:05.000 --> 35:06.000
你看这个切换

35:06.000 --> 35:07.000
你看这个切换

35:07.000 --> 35:09.000
是不是有个先后次序了

35:09.000 --> 35:10.000
那么之前我们用

35:10.000 --> 35:11.000
CSS全新的时候

35:11.000 --> 35:12.000
他们是同时进行的

35:12.000 --> 35:13.000
对不对

35:13.000 --> 35:14.000
他们是同时

35:14.000 --> 35:15.000
因为我们当时用了

35:15.000 --> 35:16.000
两个CSS全新主件

35:16.000 --> 35:17.000
他们是同时

35:17.000 --> 35:19.000
完成这个样式的

35:19.000 --> 35:20.000
因为他们互不影响

35:20.000 --> 35:21.000
对不对

35:21.000 --> 35:22.000
这东西跟另外一个东西

35:22.000 --> 35:23.000
没有什么关系

35:23.000 --> 35:25.000
现在它是有先后次序了

35:25.000 --> 35:26.000
这就是数以起

35:26.000 --> 35:27.000
全新的好处

35:27.000 --> 35:28.000
以后你们反而是要用到

35:28.000 --> 35:30.000
先后次序的地方

35:30.000 --> 35:31.000
反而是要应用

35:31.000 --> 35:32.000
先后次序的地方

35:32.000 --> 35:33.000
你们都可以使用

35:33.000 --> 35:34.000
这个

35:35.000 --> 35:37.000
都可以使用

35:39.000 --> 35:40.000
Switch全新

35:41.000 --> 35:42.000
如果说你们要进行

35:42.000 --> 35:44.000
同时发生切换的话

35:45.000 --> 35:46.000
那么你就按照

35:46.000 --> 35:47.000
上节课学到

35:47.000 --> 35:48.000
CSS全新就可以搞定了

35:49.000 --> 35:50.000
做两个

35:50.000 --> 35:51.000
对不对

35:51.000 --> 35:52.000
如果说你要做

35:52.000 --> 35:53.000
先后次序的话

35:53.000 --> 35:54.000
那么你就可以用

35:54.000 --> 35:55.000
Switch全新

35:55.000 --> 35:56.000
它专门来处理

35:56.000 --> 35:57.000
这个先后次序的

35:57.000 --> 35:58.000
它的处理原理

35:58.000 --> 35:59.000
也非常简单

36:00.000 --> 36:02.000
就是保留

36:02.000 --> 36:04.000
保留之前的动物元素

36:04.000 --> 36:05.000
这个东西

36:05.000 --> 36:06.000
它可以找到的

36:06.000 --> 36:07.000
动物元素是可以找到的

36:07.000 --> 36:08.000
它用的是一个旧的APM

36:08.000 --> 36:09.000
再说一下吧

36:09.000 --> 36:10.000
这个APM

36:10.000 --> 36:11.000
虽然现在不体装使用了

36:11.000 --> 36:12.000
因此它这个APM

36:12.000 --> 36:13.000
可能

36:13.000 --> 36:14.000
以后内部的时间会改

36:14.000 --> 36:15.000
叫做

36:17.000 --> 36:19.000
它用的是这个旧的APM

36:19.000 --> 36:20.000
这个就是

36:20.000 --> 36:21.000
我们当时只是体了一下

36:21.000 --> 36:22.000
对吧

36:22.000 --> 36:23.000
也没有学习

36:23.000 --> 36:24.000
这个东西

36:24.000 --> 36:25.000
官方已经明确说明

36:25.000 --> 36:26.000
要被淘汰了

36:26.000 --> 36:27.000
不过目前

36:27.000 --> 36:28.000
它还是用了这个旧的APM

36:28.000 --> 36:29.000
来找这个动物元素

36:29.000 --> 36:30.000
把这个动物元素

36:30.000 --> 36:31.000
就把某一个

36:31.000 --> 36:32.000
组件下面的

36:32.000 --> 36:33.000
它能够找到什么

36:33.000 --> 36:34.000
它能够找到

36:35.000 --> 36:36.000
能够找到

36:37.000 --> 36:38.000
我们把既要这儿吧

36:38.000 --> 36:39.000
既要底级里面

36:39.000 --> 36:40.000
顺便说一下

36:42.000 --> 36:43.000
就是

36:45.000 --> 36:46.000
该

36:46.000 --> 36:47.000
该库

36:48.000 --> 36:49.000
寻找

36:49.000 --> 36:51.000
动物元素的方式

36:52.000 --> 36:53.000
是使用

36:54.000 --> 36:55.000
已经快要

36:55.000 --> 36:57.000
过时的

36:58.000 --> 36:59.000
就是已经

36:59.000 --> 37:00.000
不是快要

37:00.000 --> 37:01.000
已经过时的APM

37:01.000 --> 37:02.000
哪个APM

37:02.000 --> 37:03.000
就是

37:04.000 --> 37:05.000
这个APM

37:06.000 --> 37:07.000
该

37:07.000 --> 37:08.000
方法

37:08.000 --> 37:09.000
可以找到

37:09.000 --> 37:10.000
某个

37:10.000 --> 37:11.000
组件

37:11.000 --> 37:12.000
下的

37:12.000 --> 37:13.000
某个组件

37:13.000 --> 37:14.000
内部的

37:15.000 --> 37:17.000
动物元素

37:18.000 --> 37:19.000
它可以找到某个

37:19.000 --> 37:20.000
组件下面的

37:20.000 --> 37:21.000
动物元素

37:21.000 --> 37:22.000
真实的动物元素

37:22.000 --> 37:23.000
所以说

37:23.000 --> 37:24.000
它就能够获取动物元素

37:24.000 --> 37:25.000
动物元素

37:25.000 --> 37:26.000
拿到过程

37:26.000 --> 37:27.000
它会把动物元素

37:27.000 --> 37:28.000
进行保留

37:28.000 --> 37:29.000
那么切换的时候

37:29.000 --> 37:30.000
它先渲染之前的

37:30.000 --> 37:31.000
它不会渲染新的

37:31.000 --> 37:32.000
它先渲染之前的

37:32.000 --> 37:33.000
把那样子

37:33.000 --> 37:34.000
切换来

37:34.000 --> 37:35.000
还去

37:35.000 --> 37:36.000
先渲染出来再说

37:36.000 --> 37:37.000
然后

37:37.000 --> 37:38.000
退出了之后

37:38.000 --> 37:39.000
然后再把

37:39.000 --> 37:40.000
再重新渲染新的

37:40.000 --> 37:41.000
因为反正是

37:41.000 --> 37:42.000
通过切组准传给它

37:42.000 --> 37:43.000
它要不要渲染切组准

37:43.000 --> 37:44.000
完全是它说的算

37:44.000 --> 37:45.000
对不对

37:45.000 --> 37:46.000
所以它可以控制

37:47.000 --> 37:48.000
那么加这个keyz的目的

37:48.000 --> 37:49.000
是为了保证

37:49.000 --> 37:50.000
它里边的动物元素

37:50.000 --> 37:51.000
跟之前是不一样的

37:51.000 --> 37:52.000
不然的话

37:52.000 --> 37:53.000
它得到动物元素

37:53.000 --> 37:54.000
是跟之前一样的

37:54.000 --> 37:55.000
那点麻烦了

37:55.000 --> 37:57.000
就是这么一个

37:57.000 --> 37:58.000
情况

37:58.000 --> 37:59.000
好

37:59.000 --> 38:00.000
这是关于元素的全世界

38:00.000 --> 38:01.000
非常非常的简单

