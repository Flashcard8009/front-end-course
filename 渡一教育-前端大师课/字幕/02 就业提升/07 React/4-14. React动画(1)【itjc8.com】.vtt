WEBVTT

00:00.620 --> 00:05.620
我们来补充一个知识就是Rex动画

00:05.620 --> 00:09.620
估摸着呢 这个东西呢 得讲这么好几页课

00:09.620 --> 00:12.620
之前呢 我忘了 我是真忘了

00:12.620 --> 00:15.620
做那个课程结构的时候呢 没办法夹进去

00:15.620 --> 00:19.620
后来讲到那个Rex Rotor就路由那一块的时候啊

00:19.620 --> 00:21.620
就后面的课程里面要学啊

00:21.620 --> 00:25.620
讲到那一块的时候 我说做一个页面切换动画吧

00:25.620 --> 00:27.620
你发现我之前少讲个东西

00:27.620 --> 00:30.620
咱们既然是视频教程 这些都不教事

00:30.620 --> 00:34.620
只要整体的结构框架没有变就完事了

00:34.620 --> 00:39.620
这些小的知识点呢 咱们把它夹入到一个合适的地方就完事了

00:39.620 --> 00:43.620
我这里把这些可能就夹到第三章 第三章的后边

00:43.620 --> 00:50.620
接着讲 因为这一块东西呢 它联系跟前面的知识联系没有那么多

00:50.620 --> 00:55.620
它就是一个简单的一些组件 教大家如何去使用它就完事了

00:56.620 --> 00:58.620
这个Rex动画呢 我们自己可以做

00:58.620 --> 01:03.620
我之前好像做了一些例子的时候 也做了一些动画效果 对吧

01:03.620 --> 01:08.620
那么如果说我们网页上有的时候呢 会经常出现一些动画

01:08.620 --> 01:14.620
或者说要利用什么CSS3这样的一种效果呢 去实现一些动画的时候呢

01:14.620 --> 01:20.620
我们就可以做一些公共的组件出来来帮助我们实现动画

01:20.620 --> 01:23.620
而这些公共的组件呢 我们可以自己做

01:23.620 --> 01:30.620
也可以利用网上现成的一些Rex的动画库 我们都可以选择

01:30.620 --> 01:36.620
这里呢 我讲动画的时候呢 我会使用第三方的动画库

01:36.620 --> 01:41.620
Rex动画库 这也是Rex社区里边他们制作的一个动画库

01:41.620 --> 01:44.620
它叫做Rex Transition Group

01:44.620 --> 01:46.620
这个动画库呢 我们学习的过程中呢

01:46.620 --> 01:50.620
也可以去探讨一下它里边的一些实现原理

01:50.620 --> 01:54.620
它他们的基本实现原理给大家提供一个思路

01:54.620 --> 01:57.620
所以大家可以发现了 在Rex里边实现动画呢

01:57.620 --> 02:00.620
跟在Viu里边就有一些区别了

02:00.620 --> 02:02.620
Viu里边呢 就好像有一些魔法一样 对吧

02:02.620 --> 02:05.620
你家外面掏了一个组件 它动画就实现了

02:05.620 --> 02:08.620
在Rex我们学习Rex动画的时候呢

02:08.620 --> 02:12.620
我们就知道Rex动画库呢 它没有什么特别的

02:12.620 --> 02:13.620
它就是给你做了一些组件

02:13.620 --> 02:17.620
这些组件呢 我们只要不怕麻烦 自己做也能做出来

02:17.620 --> 02:21.620
好吧 咱们学习这个动画库的名字叫做Rex Transition Group

02:21.620 --> 02:25.620
那么这个动画库啊 就是说 假如说我不讲

02:25.620 --> 02:29.620
我也不可能说把Rex的 虽然说讲的是Rex全家统

02:29.620 --> 02:32.620
对吧 我讲的都是最核心

02:32.620 --> 02:37.620
而且呢 在你们以后到了公司里边去开发的时候呢

02:37.620 --> 02:40.620
最容易用到的这些一些库

02:40.620 --> 02:43.620
但是呢 我们不可能讲到吧

02:43.620 --> 02:46.620
所有的Rex整个生态环境里边

02:46.620 --> 02:48.620
所有的跟Rex相关的库全部讲完了

02:48.620 --> 02:51.620
那是不可能的 那我基本上就不用干什么事了

02:51.620 --> 02:55.620
我下半辈子就讲这个吧 太多了 不太可能讲完

02:55.620 --> 02:58.620
所以说呢 大家呢 在学习我们的课程的时候呢

02:58.620 --> 03:01.620
一方面是学习我们课程本身的知识

03:01.620 --> 03:04.620
另外一方面呢 你要体会得到

03:04.620 --> 03:07.620
如果说我们要去接触一些第三方库的话

03:07.620 --> 03:12.620
那么你如何去查资料 如何去约读他官方的文档

03:12.620 --> 03:15.620
比方说我们这个讲动画的这一块呢

03:15.620 --> 03:18.620
讲这个动画库的时候呢 我就会带领大家

03:18.620 --> 03:22.620
一边呢 自己使用 一边呢 去看他的官方文档

03:22.620 --> 03:26.620
看他官方文档的解释 这些东西呢 你也不用去背

03:26.620 --> 03:28.620
比方说我们这个动画库学的完了过后

03:28.620 --> 03:31.620
这里边有很多的组件 组件里边有很多的API

03:31.620 --> 03:33.620
是不是我都要把背下来呢 不用

03:33.620 --> 03:36.620
以后呢 就对照的官方文档看一晚上

03:36.620 --> 03:38.620
他有什么样的功能 最常用的功能是什么

03:38.620 --> 03:40.620
就照照看一晚上了

03:40.620 --> 03:42.620
那么怎么来去查官方文档呢

03:42.620 --> 03:44.620
这就是一个很重要的知识啊

03:44.620 --> 03:47.620
我觉得这个知识呢 甚至比我们学到这些

03:47.620 --> 03:49.620
RAGTS那些什么的东西都重要

03:49.620 --> 03:52.620
就是如何去查看官方文档

03:52.620 --> 03:54.620
虽然很简单 但有的东西真不知道

03:54.620 --> 03:57.620
怎么查呢 我们现在不是要使用这个库吗

03:57.620 --> 04:00.620
叫RAGTS Transition Group啊 这个库

04:00.620 --> 04:03.620
那么这个库呢 他肯定要通过NPM安装

04:03.620 --> 04:05.620
对吧 那么我们就在哪里去查

04:05.620 --> 04:07.620
是不是就在NPM上去查 对不对

04:07.620 --> 04:09.620
进入这个NPM的官网

04:09.620 --> 04:12.620
然后来这官网去搜这个库就完了嘛

04:12.620 --> 04:14.620
对不对 复制一下

04:14.620 --> 04:16.620
一般搜出来的话 它的主页里边呢

04:16.620 --> 04:19.620
它就一般就会带有那个说明文档

04:19.620 --> 04:21.620
如果说没有说明文档的话

04:21.620 --> 04:24.620
它一般会有一个超链接 挑转到它的说明文档

04:24.620 --> 04:26.620
我怎么这么卡呢

04:29.620 --> 04:31.620
在这RAGTS Transition Group

04:31.620 --> 04:36.060
好 点进去啊 点进去

04:36.060 --> 04:38.060
有点卡呀 这个

04:39.060 --> 04:40.060
进去了啊

04:40.060 --> 04:42.060
进去过后呢 我们看看这个页面呢

04:42.060 --> 04:44.060
大概就这么的东西

04:44.060 --> 04:46.060
用脚响都知道 肯定没有

04:46.060 --> 04:48.060
说明文档肯定不在这 对不对 肯定不在这

04:48.060 --> 04:50.060
好 找一找 找一找 你会发现

04:50.060 --> 04:52.060
诶 它这个documentation

04:52.060 --> 04:55.060
是不是文档 文档说明 对不对

04:55.060 --> 04:57.060
诶 它这里呢什么 主文档说明

04:57.060 --> 04:59.060
对吧 主文档说明 还有什么呢

04:59.060 --> 05:02.060
还有这个v1 就是它之前那个版本的使用说明

05:03.060 --> 05:05.060
它前面也说到了 它说

05:05.060 --> 05:07.060
目前那个版本呢 跟那个

05:07.060 --> 05:10.060
第一个版本的 它的就是差别比较大

05:10.060 --> 05:13.060
如果说你要看之前的说明的话 点这个

05:13.060 --> 05:15.060
如果说你要看那个 就是

05:17.060 --> 05:19.060
用最新的就是

05:19.060 --> 05:22.060
它的API的话 那么你要看这个主文档说明

05:22.060 --> 05:25.060
好 咱们点进去 主文档说明 点一下

05:25.060 --> 05:27.060
好 点进去

05:27.060 --> 05:29.060
其实它这里面呢 就大概介绍了一下

05:29.060 --> 05:32.060
怎么去安装 它说用npm安装 用什么12来安装

05:32.060 --> 05:34.060
我们肯定是用12来安装

05:34.060 --> 05:36.060
然后呢 它也说到了 它这里面呢

05:36.060 --> 05:38.060
就这么一些组件 你看关键词吧

05:38.060 --> 05:41.060
我们也不用一句话 一句话 把这个文档读完

05:41.060 --> 05:44.060
对 是英文文档 英文文档

05:44.060 --> 05:46.060
很多的 就是

05:46.060 --> 05:49.060
一些第三方库 它的文档都是英文的

05:49.060 --> 05:51.060
都是英文的 不然的话

05:52.060 --> 05:54.060
那这个反应量还是蛮大的

05:54.060 --> 05:57.060
因为很多的第三方库的话

05:58.060 --> 06:00.060
它并不是一个大公司

06:00.060 --> 06:02.060
有可能只是一个个人开发者制作的

06:02.060 --> 06:05.060
所以它没有那么多时间和精力给你翻译成其他语言

06:05.060 --> 06:06.060
也没有这样的团队

06:06.060 --> 06:08.060
所以说它没有去给你翻译成中文

06:08.060 --> 06:11.060
而且可能它觉得自己的文档

06:11.060 --> 06:14.060
API比较少 看英文大概都能懂

06:14.060 --> 06:17.060
所以它没有翻译 像这种库很多很多

06:17.060 --> 06:19.060
所以说你如果说

06:19.060 --> 06:23.060
要在这个行业里面获得更好的发展的话

06:23.060 --> 06:26.060
看英文文档 是早晚跑不掉的

06:26.060 --> 06:28.060
你一开始恼火

06:28.060 --> 06:31.060
跟大家说 我一开始看英文文档也恼火

06:31.060 --> 06:32.060
也恼火

06:32.060 --> 06:34.060
我的英文 你们都懂的

06:34.060 --> 06:36.060
这种口语 英文能有多好呢

06:36.060 --> 06:39.060
但是我阅读是没有什么问题的

06:39.060 --> 06:42.060
阅读文档是没有任何问题的

06:42.060 --> 06:44.060
可能我口语稍微差一点

06:44.060 --> 06:45.060
那怎么回事呢

06:45.060 --> 06:48.060
被逼出来的 没办法 被逼出来的

06:49.060 --> 06:51.060
因为很多资料你只能从

06:51.060 --> 06:53.060
像你们还有我的校成 对不对

06:53.060 --> 06:54.060
还有很多老师的校成

06:54.060 --> 06:56.060
像老师的校成到哪去找呢

06:56.060 --> 06:57.060
就很难找了 对吧

06:57.060 --> 06:59.060
有的时候是市面上跟一些校成里面

06:59.060 --> 07:00.060
根本就没有的

07:00.060 --> 07:02.060
那怎么办的 只能去啃

07:02.060 --> 07:04.060
国内的文档 你们懂的

07:04.060 --> 07:05.060
不用说了

07:05.060 --> 07:08.060
那很多时候你要去国外去找资料

07:08.060 --> 07:10.060
谷歌里边找资料

07:10.060 --> 07:11.060
但是有的时候资料

07:11.060 --> 07:14.060
连国外的文档资料都很少

07:14.060 --> 07:15.060
就很恼火了

07:15.060 --> 07:17.060
那就可能要去啃原码了

07:17.060 --> 07:19.060
好 说一下

07:19.060 --> 07:20.060
那么从文档里面

07:20.060 --> 07:21.060
我们大概看到

07:21.060 --> 07:22.060
它这里边说了

07:22.060 --> 07:24.060
我们这里有一些组建

07:24.060 --> 07:25.060
还给你这个库

07:25.060 --> 07:26.060
给你加了一些组建

07:26.060 --> 07:27.060
哪些组建呢

07:27.060 --> 07:29.060
Transition CSS Transition

07:29.060 --> 07:31.060
Switch Transition Group

07:31.060 --> 07:32.060
就这么一些组建

07:32.060 --> 07:34.060
所以说我们大概上

07:34.060 --> 07:36.060
这个动画

07:36.060 --> 07:38.060
我们可能会分为世界课来讲

07:38.060 --> 07:40.060
北街课来讲一个组建

07:40.060 --> 07:41.060
那看上面的导航

07:41.060 --> 07:42.060
你看一下 导航

07:42.060 --> 07:43.060
不就是四个组建吗

07:43.060 --> 07:44.060
对不对

07:44.060 --> 07:45.060
就这么四个组建

07:45.060 --> 07:46.060
你学会怎么去使用就完事了

07:46.060 --> 07:47.060
好 咱们这些课

07:47.060 --> 07:48.060
现在学习这个组建

07:48.060 --> 07:50.060
Transition这个组建

07:50.060 --> 07:52.060
好 证了我们首先

07:52.060 --> 07:54.060
把这个动画库给安装上

07:56.060 --> 07:59.060
1 2 C D Rect

07:59.060 --> 08:01.060
1 2 ADD

08:01.060 --> 08:02.060
叫啥呀

08:02.060 --> 08:04.060
Rect

08:04.060 --> 08:06.060
Transition

08:06.060 --> 08:07.060
Group

08:07.060 --> 08:10.060
把这个动画库给安装上

08:10.060 --> 08:11.060
稍等一张

08:11.060 --> 08:12.060
这里有些警告

08:12.060 --> 08:13.060
这些警告

08:13.060 --> 08:14.060
跟你们没关系

08:14.060 --> 08:16.060
是我之前安装的一些库

08:16.060 --> 08:18.060
有些依赖项

08:18.060 --> 08:19.060
或者它自身有些过期了

08:19.060 --> 08:21.060
时间比较久远了

08:21.060 --> 08:22.060
所以不用管

08:23.060 --> 08:25.060
安装吧

08:25.060 --> 08:27.060
我刚才哪天把生机得了

08:28.060 --> 08:29.060
好了 安装好了

08:29.060 --> 08:30.060
安装好了

08:30.060 --> 08:32.060
安装好了动画库之后

08:32.060 --> 08:33.060
我们来看一下

08:33.060 --> 08:35.060
它里面五分就提供了一些组建

08:35.060 --> 08:36.060
这些组建如何去使用

08:36.060 --> 08:37.060
你知道怎么去使用就完事了

08:37.060 --> 08:38.060
其中第一个组建

08:38.060 --> 08:39.060
就是我们这里可要学习的

08:39.060 --> 08:41.060
就是Transition这个组建

08:41.060 --> 08:42.060
这个组建

08:42.060 --> 08:43.060
它说

08:44.060 --> 08:45.060
看一下第一段话吧

08:45.060 --> 08:47.060
它说Transition组建

08:47.060 --> 08:49.060
可以让你去描述

08:49.060 --> 08:51.060
一个Descript描述的意思

08:51.060 --> 08:53.060
描述一个过渡效果

08:53.060 --> 08:55.060
从一个组建状态

08:55.060 --> 08:59.060
到另外一个状态的一个过渡效果

08:59.060 --> 09:01.060
它用来描述这个东西的

09:02.060 --> 09:06.060
它提供了一个非常简单的

09:06.060 --> 09:08.060
一个声明式的API

09:08.060 --> 09:10.060
但是通常情况下

09:11.060 --> 09:14.060
如果说我们要去做一些

09:15.060 --> 09:16.060
怎么说

09:20.060 --> 09:21.060
大部分情况下

09:21.060 --> 09:24.060
它用于做一些

09:25.060 --> 09:27.060
挂斩

09:27.060 --> 09:29.060
和卸斩组建的动画

09:29.060 --> 09:31.060
就是组建一开始出来了

09:31.060 --> 09:33.060
然后以后一把卸斩了

09:33.060 --> 09:34.060
那么在出来的时候

09:34.060 --> 09:36.060
到卸斩的时候

09:36.060 --> 09:37.060
我们可能会用一些

09:37.060 --> 09:38.060
见面效果

09:38.060 --> 09:39.060
慢慢的隐藏

09:39.060 --> 09:40.060
或者是飞出去

09:40.060 --> 09:41.060
对不对

09:41.060 --> 09:42.060
来做一些动画

09:43.060 --> 09:45.060
就是这个意思

09:45.060 --> 09:46.060
然后下边

09:46.060 --> 09:47.060
它也说到了

09:47.060 --> 09:48.060
说到了什么

09:48.060 --> 09:50.060
它说如果说

09:50.060 --> 09:52.060
Tracitix的一个什么

09:53.060 --> 09:55.060
它是一个基础组建

09:55.060 --> 09:56.060
它是一个基础组建

09:56.060 --> 09:57.060
它说如果说

09:57.060 --> 09:59.060
你要使用什么

09:59.060 --> 10:02.060
在CSS里边使用Tracitix的属性

10:03.060 --> 10:04.060
那么你可能

10:04.060 --> 10:06.060
更加需要使用另外一个组建

10:06.060 --> 10:08.060
叫做CSSTracitix组建

10:08.060 --> 10:09.060
它说什么

10:09.060 --> 10:11.060
它说CSSTracitix这个组建

10:11.060 --> 10:15.060
它是基成了Tracitix这个组建

10:15.060 --> 10:16.060
就是后边我们学的

10:16.060 --> 10:17.060
CSSTracitix组建

10:17.060 --> 10:18.060
我们下节课学

10:18.060 --> 10:21.060
它基成了这个组建的所有特征

10:21.060 --> 10:22.060
所以说这个组建

10:22.060 --> 10:24.060
它是一个基础组建

10:24.060 --> 10:25.060
虽然CSSTracitix

10:25.060 --> 10:26.060
它基成了它的所有特征

10:26.060 --> 10:28.060
并且加入了一些

10:28.060 --> 10:30.060
额外的特性

10:30.060 --> 10:32.060
额外的必要的特性

10:32.060 --> 10:33.060
让这个CSS

10:33.060 --> 10:34.060
过度

10:34.060 --> 10:37.060
表现了更加友好

10:37.060 --> 10:38.060
就这么个意思

10:38.060 --> 10:39.060
所以说我们这节课学的

10:39.060 --> 10:40.060
Tracitix

10:40.060 --> 10:42.060
要说平时

10:42.060 --> 10:43.060
我们之后要用它

10:43.060 --> 10:44.060
用的不多

10:44.060 --> 10:46.060
几乎不怎么去用到它

10:46.060 --> 10:47.060
但是你学习它

10:47.060 --> 10:49.060
你能够理解

10:49.060 --> 10:51.060
就是这个组建

10:51.060 --> 10:53.060
RexTracitix Group这个组建

10:53.060 --> 10:55.060
它的实现原理

10:55.060 --> 10:56.060
因为这个组建

10:56.060 --> 10:58.060
它是一个非常非常基础的组建

10:58.060 --> 10:59.060
包括后面什么Switch

10:59.060 --> 11:00.060
Tracitix

11:00.060 --> 11:02.060
它也要依赖Tracitix组建

11:02.060 --> 11:04.060
包括后面Tracitix Group

11:04.060 --> 11:06.060
它也要依赖Tracitix组建

11:06.060 --> 11:08.060
虽然我们不会直接使用它

11:08.060 --> 11:09.060
但是我们后面

11:09.060 --> 11:11.060
学习的这些组建

11:11.060 --> 11:14.060
都是跟它有关系的

11:14.060 --> 11:16.060
那么这里我们看一下

11:16.060 --> 11:18.060
这个组建怎么去使用

11:18.060 --> 11:19.060
怎么去使用

11:19.060 --> 11:20.060
它这里举了这么一个例子

11:20.060 --> 11:22.060
其实我们通过这个例子

11:22.060 --> 11:24.060
都可以看到非常非常清楚了

11:24.060 --> 11:26.060
可以看到非常非常清楚

11:26.060 --> 11:29.060
它这里有两个例子

11:29.060 --> 11:33.060
我们把代码复制一下

11:33.060 --> 11:36.060
到这个app里边来

11:36.060 --> 11:37.060
咱们越读代码

11:37.060 --> 11:39.060
越读它给我们提供的这些势力代码

11:39.060 --> 11:41.060
这里有一个JSX

11:41.060 --> 11:43.060
所以说我们要导入RexTracitix

11:45.060 --> 11:46.060
越读一下这个势力代码

11:46.060 --> 11:47.060
那么通过这个势力代码

11:47.060 --> 11:49.060
就是我们讲动画的时候

11:49.060 --> 11:50.060
你可以发现了

11:50.060 --> 11:52.060
讲的风格跟之前讲RexTracitix

11:52.060 --> 11:53.060
不太一样了

11:53.060 --> 11:54.060
RexTracitix我几乎没有去

11:54.060 --> 11:56.060
怎么看官方文档

11:56.060 --> 11:58.060
因为我是给你重新设计的

11:58.060 --> 12:00.060
这个课程结构的

12:00.060 --> 12:02.060
所以说我们直接按照课程结构来讲

12:02.060 --> 12:03.060
但是我们讲动画的时候

12:03.060 --> 12:05.060
我们是对到官方文档来讲

12:05.060 --> 12:07.060
就是告诉大家

12:07.060 --> 12:08.060
当我们去制学一些东西的时候

12:08.060 --> 12:10.060
如何去学习

12:10.060 --> 12:11.060
那么这里的

12:11.060 --> 12:12.060
它不是有个势力代码吗

12:12.060 --> 12:13.060
OK

12:13.060 --> 12:15.060
那么咱们把这个势力代码拿过来

12:15.060 --> 12:17.060
然后下面还有段代码

12:17.060 --> 12:18.060
因为它这里没有导出

12:18.060 --> 12:19.060
你打开看一下吧

12:19.060 --> 12:20.060
它这里订了一些辨量

12:20.060 --> 12:21.060
对吧

12:21.060 --> 12:22.060
必须订了一些辨量

12:22.060 --> 12:23.060
是不是没有导出

12:23.060 --> 12:24.060
对不对

12:24.060 --> 12:25.060
没有导出任何东西

12:25.060 --> 12:26.060
那这里的

12:26.060 --> 12:27.060
它这里最后一段代码

12:27.060 --> 12:29.060
就是导出一个app

12:29.060 --> 12:30.060
导出一个app

12:30.060 --> 12:32.060
我们这里把导出

12:32.060 --> 12:33.060
export

12:33.060 --> 12:34.060
default

12:34.060 --> 12:35.060
导出得了

12:35.060 --> 12:36.060
导出得了

12:37.060 --> 12:38.060
那么这里有个status

12:38.060 --> 12:39.060
我们不管吧

12:39.060 --> 12:40.060
不管

12:40.060 --> 12:42.060
我们慢慢来看一下这个代码

12:42.060 --> 12:43.060
那么这个辨量好像没有用到

12:43.060 --> 12:44.060
对吧

12:44.060 --> 12:45.060
没有用到

12:45.060 --> 12:47.060
它只是起一个势力的作用

12:47.060 --> 12:48.060
起一个势力的作用

12:48.060 --> 12:49.060
没有用到

12:49.060 --> 12:50.060
没用到把删了

12:50.060 --> 12:52.060
咱们来看一下这个代码

12:52.060 --> 12:54.060
前边它定义了一个辨量

12:54.060 --> 12:55.060
叫做duration

12:55.060 --> 12:56.060
这个辨量好像

12:56.060 --> 12:57.060
好像后面也没怎么用

12:57.060 --> 12:58.060
也没怎么用

12:58.060 --> 12:59.060
无所谓吧

12:59.060 --> 13:00.060
放在这

13:00.060 --> 13:03.060
一个default style

13:03.060 --> 13:04.060
这个是啥呢

13:04.060 --> 13:05.060
是一个对象

13:05.060 --> 13:06.060
你觉得它啥意思呢

13:06.060 --> 13:07.060
是不是样式

13:07.060 --> 13:08.060
对不对

13:08.060 --> 13:09.060
它是不是样式的意思

13:09.060 --> 13:10.060
定义了这么一个对象

13:10.060 --> 13:11.060
这些都是势力代码

13:11.060 --> 13:13.060
我们通过这个势力代码

13:13.060 --> 13:15.060
可以看出它的就是

13:15.060 --> 13:16.060
使

13:16.060 --> 13:18.060
它的就是使用方式

13:18.060 --> 13:19.060
好

13:19.060 --> 13:20.060
咱们看一下这个代码

13:20.060 --> 13:22.060
这里有一个默认样式

13:22.060 --> 13:23.060
一个默认样式

13:23.060 --> 13:25.060
因为我们知道在rex里边

13:25.060 --> 13:28.060
如果说你要加一个内粘样式的话

13:28.060 --> 13:29.060
加了是不是对象

13:29.060 --> 13:31.060
那这里是不是可以提供了一个样式对象

13:31.060 --> 13:32.060
一个transition

13:32.060 --> 13:33.060
一个opacity

13:33.060 --> 13:34.060
对吧

13:34.060 --> 13:37.060
然后下面有一个transition样式

13:37.060 --> 13:39.060
这个样式它有点意思

13:39.060 --> 13:41.060
它是写了四个属性

13:41.060 --> 13:44.060
每个属性的代表启动一个样式

13:44.060 --> 13:45.060
entering

13:45.060 --> 13:47.060
我们现在可能不太清楚

13:47.060 --> 13:48.060
属性它为什么要这样命名

13:48.060 --> 13:49.060
对吧

13:49.060 --> 13:50.060
这肯定不是CSS的属性

13:50.060 --> 13:51.060
样式名

13:51.060 --> 13:53.060
这里边还是CSS样式名

13:53.060 --> 13:54.060
所以说我们知道

13:54.060 --> 13:55.060
这里边每一个属性的

13:55.060 --> 13:57.060
对应了一组CSS样式

13:57.060 --> 13:58.060
它为什么要这样命名

13:58.060 --> 13:59.060
我不知道

13:59.060 --> 14:00.060
因为它是势力代码

14:00.060 --> 14:01.060
不一定是它的写

14:01.060 --> 14:03.060
我们来看一下什么意思

14:03.060 --> 14:05.060
那么这里的opacity等于1

14:05.060 --> 14:06.060
exciting

14:06.060 --> 14:07.060
opacity等于0

14:07.060 --> 14:10.060
excited

14:10.060 --> 14:13.060
opacity等于0

14:13.060 --> 14:14.060
接下来我们看一下

14:14.060 --> 14:15.060
下面这个app主件

14:15.060 --> 14:16.060
代码其实很少

14:16.060 --> 14:17.060
并不多

14:17.060 --> 14:18.060
前面有这么两个对象

14:18.060 --> 14:21.060
咱们心中有个印象就行了

14:21.060 --> 14:23.060
那么现在这个app主件里边

14:23.060 --> 14:24.060
它使用了hook

14:24.060 --> 14:26.060
那咱们就用hook吧

14:26.060 --> 14:29.060
use state

14:30.060 --> 14:32.060
把use state导入进来

14:32.060 --> 14:34.060
接下来看这个主件

14:34.060 --> 14:35.060
它加了一个状态

14:35.060 --> 14:37.060
当然你是不是可以用内主件加状态

14:37.060 --> 14:38.060
所以一样的

14:38.060 --> 14:39.060
它加了一个状态

14:39.060 --> 14:42.060
这个状态的默认值叫做force

14:42.060 --> 14:44.060
也就是说这个状态

14:44.060 --> 14:46.060
大概率就是一个布尔类型

14:46.060 --> 14:47.060
要么为true

14:47.060 --> 14:49.060
要么为force

14:49.060 --> 14:51.060
那么这是设置这个状态的函数

14:51.060 --> 14:53.060
接下来开始返回东西了

14:53.060 --> 14:54.060
返回东西了

14:54.060 --> 14:55.060
它返回个啥呢

14:55.060 --> 14:58.060
首先它返回来这么一个东西

14:58.060 --> 15:00.060
一个transition

15:00.060 --> 15:01.060
返回来这么一个东西

15:01.060 --> 15:03.060
这个transition是不是我们就是

15:03.060 --> 15:05.060
它那个主件库里边

15:05.060 --> 15:07.060
就是这个第三方库里面

15:07.060 --> 15:08.060
提供了主件

15:08.060 --> 15:09.060
对吧

15:09.060 --> 15:10.060
transition这个主件

15:10.060 --> 15:12.060
它返回了一个transition主件

15:12.060 --> 15:14.060
然后它设置到一个属性

15:14.060 --> 15:16.060
叫做in

15:16.060 --> 15:17.060
in这个属性

15:17.060 --> 15:19.060
这个属性的值来自于哪呢

15:19.060 --> 15:21.060
来自于这个状态的值

15:21.060 --> 15:22.060
要么为true

15:22.060 --> 15:24.060
要么为force

15:24.060 --> 15:26.060
然后有个timeout属性

15:26.060 --> 15:28.060
timeout你猜一下啥意思

15:28.060 --> 15:30.060
猜一下啥意思呢

15:30.060 --> 15:32.060
哪怕你可能猜不到

15:32.060 --> 15:33.060
你可能猜不到

15:33.060 --> 15:34.060
猜不到都没关系

15:34.060 --> 15:36.060
猜不到都没关系

15:36.060 --> 15:38.060
没关系猜不到就没关系

15:38.060 --> 15:39.060
那么这里扔这吧

15:39.060 --> 15:40.060
这两个属性扔这

15:40.060 --> 15:42.060
然后接下来看它的指边数

15:42.060 --> 15:43.060
关键在这

15:44.060 --> 15:45.060
你至少现在知道了

15:45.060 --> 15:47.060
这个属性它有两个属性对吧

15:47.060 --> 15:48.060
in和timeout

15:48.060 --> 15:50.060
可能不太清楚什么意思

15:50.060 --> 15:52.060
我在教你怎么去掠读元旦

15:52.060 --> 15:54.060
如果说我要直接告诉你结果的话

15:54.060 --> 15:55.060
那没什么好说的

15:55.060 --> 15:58.060
我要交离去怎么去掠读元旦

15:58.060 --> 15:59.060
你现在只清楚

15:59.060 --> 16:02.060
这个trustation有两个属性

16:02.060 --> 16:03.060
一个是timeout

16:03.060 --> 16:04.060
一个是in

16:04.060 --> 16:05.060
这个in属性

16:05.060 --> 16:06.060
你看它是个布尔对吧

16:06.060 --> 16:07.060
给它的一个布尔值

16:07.060 --> 16:08.060
而且这个in的属性

16:08.060 --> 16:09.060
以为它来自于状态

16:09.060 --> 16:10.060
是不是可能会变化

16:10.060 --> 16:11.060
对吧

16:11.060 --> 16:12.060
它的属性可能会变化

16:12.060 --> 16:14.060
关键是它的指边数

16:14.060 --> 16:15.060
children

16:15.060 --> 16:17.060
它的children是一个函数

16:17.060 --> 16:18.060
看到没

16:18.060 --> 16:19.060
不是普通的节点

16:19.060 --> 16:20.060
对吧

16:20.060 --> 16:21.060
它是一个函数

16:21.060 --> 16:23.060
这个函数还有一个参数

16:23.060 --> 16:26.060
函数叫做stat

16:26.060 --> 16:27.060
管它是啥

16:27.060 --> 16:29.060
总之它有一个参数

16:29.060 --> 16:30.060
有这么一个参数

16:30.060 --> 16:31.060
这个参数里边

16:31.060 --> 16:32.060
有个小过号

16:32.060 --> 16:33.060
你要返回一个东西

16:33.060 --> 16:35.060
你再返回一个东西

16:35.060 --> 16:38.060
那么返回什么东西

16:38.060 --> 16:39.060
我们来看一下它的代码

16:39.060 --> 16:41.060
再结合之前的代码看一下

16:41.060 --> 16:42.060
因为有的时候

16:42.060 --> 16:44.060
官方的代码

16:44.060 --> 16:46.060
设置的不是很好

16:46.060 --> 16:47.060
不是一个完整的代码

16:47.060 --> 16:48.060
我们来看一下

16:48.060 --> 16:49.060
它这个地方没有写

16:49.060 --> 16:51.060
打了一个注释

16:51.060 --> 16:52.060
一个省率号

16:52.060 --> 16:53.060
可以写任何东西

16:53.060 --> 16:54.060
对吧

16:54.060 --> 16:55.060
可以写任何东西

16:55.060 --> 16:56.060
那么我们看一下

16:56.060 --> 16:57.060
推造一下之前的代码

16:57.060 --> 16:58.060
之前的代码

16:58.060 --> 17:00.060
是不是也在使用这个传输性

17:00.060 --> 17:01.060
我们之前做了一个费的

17:01.060 --> 17:02.060
什么的

17:02.060 --> 17:03.060
对不对

17:03.060 --> 17:05.060
是不是它也在使用这个传输性

17:05.060 --> 17:06.060
对不对

17:06.060 --> 17:07.060
是不是也在使用它

17:07.060 --> 17:08.060
OK

17:08.060 --> 17:09.060
那么它里边是不是也使用了

17:09.060 --> 17:10.060
这种方式

17:10.060 --> 17:11.060
对吧

17:11.060 --> 17:12.060
是不是也使用了这种方式

17:12.060 --> 17:13.060
OK

17:13.060 --> 17:15.060
我就把它那个东西扔过来

17:15.060 --> 17:17.060
把它的东西扔过来

17:17.060 --> 17:18.060
咱们来看一下这个代码

17:18.060 --> 17:20.060
就是

17:20.060 --> 17:22.060
这个东西没有什么定论

17:22.060 --> 17:23.060
没有什么定论

17:23.060 --> 17:24.060
你去约读代码的时候

17:24.060 --> 17:25.060
你总之要把它运

17:25.060 --> 17:26.060
先运出来看一下效果

17:26.060 --> 17:28.060
看一下效果就完事了

17:28.060 --> 17:29.060
好

17:29.060 --> 17:30.060
那么前面呢

17:30.060 --> 17:31.060
它还设置了

17:31.060 --> 17:32.060
这个属性

17:32.060 --> 17:33.060
对吧

17:33.060 --> 17:34.060
也设置了这个硬的属性

17:34.060 --> 17:35.060
它来自于这个组件的属性

17:35.060 --> 17:36.060
还设置了这个Timeout

17:36.060 --> 17:37.060
Timeout来自于

17:37.060 --> 17:38.060
之前的变量

17:38.060 --> 17:39.060
Duration

17:39.060 --> 17:40.060
因为Timeout

17:40.060 --> 17:41.060
这个值

17:41.060 --> 17:42.060
不是说固定为500

17:42.060 --> 17:43.060
它可以写任何的值

17:43.060 --> 17:44.060
那么可以写之前

17:44.060 --> 17:45.060
来自于变量300

17:45.060 --> 17:46.060
或者是这里

17:46.060 --> 17:47.060
直接写个数字

17:47.060 --> 17:48.060
300 500

17:48.060 --> 17:49.060
都行

17:49.060 --> 17:50.060
不要变量

17:50.060 --> 17:51.060
都行

17:51.060 --> 17:52.060
那么这里

17:53.060 --> 17:54.060
比方说

17:54.060 --> 17:55.060
这里的写

17:55.060 --> 17:56.060
就写Duration

17:56.060 --> 17:57.060
就写Duration

17:57.060 --> 18:00.080
一个变量

18:00.080 --> 18:01.080
设为500

18:01.080 --> 18:02.080
都行

18:03.080 --> 18:04.080
没问题吧

18:04.080 --> 18:05.080
接下来

18:05.080 --> 18:06.080
我们来先看效果

18:06.080 --> 18:07.080
再来猜测

18:07.080 --> 18:09.080
这里边是什么东西

18:10.080 --> 18:11.080
Start

18:12.080 --> 18:13.080
运行出来

18:13.080 --> 18:14.080
一边运行

18:14.080 --> 18:15.080
一边猜测

18:15.080 --> 18:16.080
它里边是什么东西

18:16.080 --> 18:17.080
我们现在知道了

18:17.080 --> 18:18.080
知道了什么

18:18.080 --> 18:19.080
知道就是说

18:19.080 --> 18:20.080
这个东西

18:20.080 --> 18:21.080
它里边传的Cutune

18:21.080 --> 18:22.080
是一个函数

18:22.080 --> 18:23.080
函数返回

18:23.080 --> 18:24.080
什么

18:24.080 --> 18:25.080
返回要选择的内容

18:25.080 --> 18:26.080
对吧

18:26.080 --> 18:27.080
要选择的内容

18:27.080 --> 18:28.080
看一下

18:28.080 --> 18:31.290
接下来

18:31.290 --> 18:33.290
我们点击下边的按钮

18:33.290 --> 18:34.290
这个按钮哪来的

18:34.290 --> 18:35.290
来自于这

18:35.290 --> 18:36.290
一个普普通通的按钮

18:36.290 --> 18:37.290
点击这个按钮过后

18:37.290 --> 18:38.290
你看

18:38.290 --> 18:40.290
是不是把State设为了Q

18:40.290 --> 18:41.290
对不对

18:41.290 --> 18:42.290
设为了Q

18:42.290 --> 18:43.290
没问题吧

18:43.290 --> 18:44.290
把这个状态设为去

18:44.290 --> 18:45.290
重新渲染

18:45.290 --> 18:46.290
咱们点了试一下

18:47.290 --> 18:48.290
看到没

18:48.290 --> 18:49.290
是不是一个

18:49.290 --> 18:50.290
逐渐

18:50.290 --> 18:52.290
淡入的效果

18:52.290 --> 18:53.290
再来一次

18:53.290 --> 18:57.180
是一个逐渐淡入的效果

18:57.180 --> 18:58.180
对不对

18:58.180 --> 18:59.180
好

18:59.180 --> 19:00.180
那么如果说

19:00.180 --> 19:01.180
我要再点一下淡出的话

19:01.180 --> 19:02.180
怎么办

19:02.180 --> 19:03.180
淡出的话

19:03.180 --> 19:04.180
我们是不是把这里

19:04.180 --> 19:05.180
设为Force

19:05.180 --> 19:06.180
对不对

19:06.180 --> 19:07.180
那么我把这个按钮的

19:07.180 --> 19:08.180
功能稍微改造一下

19:08.180 --> 19:09.180
你看

19:09.180 --> 19:11.180
约读文档的时候

19:11.180 --> 19:13.180
它给你取得一些例子

19:13.180 --> 19:14.180
你不要把那些例子

19:14.180 --> 19:16.180
升班硬套

19:16.180 --> 19:17.180
当你把这个效果

19:17.180 --> 19:19.180
看到效果之后

19:19.180 --> 19:20.180
你可以利用

19:20.180 --> 19:21.180
它的就是

19:21.180 --> 19:22.180
这些代码

19:22.180 --> 19:23.180
稍微做修改

19:23.180 --> 19:24.180
看一下自己的猜想

19:24.180 --> 19:25.180
是不是正确的

19:25.180 --> 19:26.180
其实这里边

19:26.180 --> 19:28.180
已经有很多的信息量了

19:28.180 --> 19:29.180
我们这里点了过后

19:29.180 --> 19:30.180
它显示了

19:30.180 --> 19:31.180
为什么它显示

19:31.180 --> 19:32.180
是不是它把它

19:32.180 --> 19:33.180
设为了Q

19:33.180 --> 19:34.180
对不对

19:34.180 --> 19:35.180
把它设为Q

19:35.180 --> 19:36.180
为什么一开始

19:36.180 --> 19:37.180
没有显示

19:37.180 --> 19:38.180
一开始它是不是Force

19:38.180 --> 19:39.180
那么我们是不是

19:39.180 --> 19:40.180
可以猜测这个

19:40.180 --> 19:41.180
硬这个属性

19:41.180 --> 19:42.180
是不是来控制

19:42.180 --> 19:43.180
它里边的显示

19:43.180 --> 19:44.180
隐藏的呢

19:44.180 --> 19:45.180
是不是来控制这个的呢

19:45.180 --> 19:46.180
好像是对吧

19:46.180 --> 19:47.180
好像是

19:47.180 --> 19:48.180
我们先有这么一个

19:48.180 --> 19:49.180
感性的认识

19:49.180 --> 19:50.180
这个硬

19:50.180 --> 19:51.180
这个属性值

19:51.180 --> 19:52.180
是来控制它里边的

19:52.180 --> 19:53.180
显示隐藏的

19:53.180 --> 19:54.180
好像是这个感觉

19:54.180 --> 19:55.180
但是

19:55.180 --> 19:56.180
是不是

19:56.180 --> 19:57.180
我们还要慢慢地实验

19:57.180 --> 19:58.180
把这个东西

19:58.180 --> 19:59.180
彻底搞清楚

19:59.180 --> 20:00.180
那么我们刚才

20:00.180 --> 20:01.180
把它设为Q

20:01.180 --> 20:02.180
它显示出来了

20:02.180 --> 20:03.180
那要把它隐藏

20:03.180 --> 20:04.180
是不是把

20:04.180 --> 20:05.180
设为Force用完了

20:05.180 --> 20:06.180
因此

20:06.180 --> 20:07.180
我们这里

20:07.180 --> 20:08.180
点击按钮

20:08.180 --> 20:09.180
我们稍微把它设置一下

20:09.180 --> 20:10.180
给它取反

20:10.180 --> 20:11.180
硬这个Prob

20:11.180 --> 20:12.180
就这个属性

20:12.180 --> 20:13.180
给它取反

20:13.180 --> 20:14.180
它之前是Q

20:14.180 --> 20:15.180
它还非变Force

20:15.180 --> 20:16.180
之前是Force

20:16.180 --> 20:17.180
变Q

20:17.180 --> 20:18.180
那么这个文本

20:18.180 --> 20:19.180
可以一个投狗

20:19.180 --> 20:20.180
投狗

20:20.180 --> 20:21.180
这个投狗的单词

20:21.180 --> 20:22.180
就表示

20:22.180 --> 20:24.180
怎么来发音呢

20:24.180 --> 20:26.180
这个就是切换

20:26.180 --> 20:28.180
看着

20:28.180 --> 20:30.180
单入

20:30.180 --> 20:31.180
单出

20:31.180 --> 20:32.180
看到没

20:32.180 --> 20:33.180
是不是一个动画

20:33.180 --> 20:34.180
单入单出

20:34.180 --> 20:35.180
单入

20:35.180 --> 20:36.180
单出

20:36.180 --> 20:37.180
说明了啥呢

20:37.180 --> 20:38.180
给我们的感觉

20:38.180 --> 20:39.180
越来越香了

20:39.180 --> 20:40.180
这个硬这个属性

20:40.180 --> 20:41.180
硬这个属性

20:41.180 --> 20:43.180
它就是来做

20:43.180 --> 20:45.180
就是来做什么了

20:45.180 --> 20:47.180
来做显示隐藏的

20:47.180 --> 20:48.180
对不对

20:48.180 --> 20:49.180
好

20:49.180 --> 20:50.180
那么真的是这样子吗

20:50.180 --> 20:51.180
好

20:51.180 --> 20:52.180
我们现在这个属性

20:52.180 --> 20:53.180
先大概知道

20:53.180 --> 20:54.180
这个属性有一个属性值

20:54.180 --> 20:55.180
要么为Q

20:55.180 --> 20:57.180
要么为Force

20:57.180 --> 20:58.180
好

20:58.180 --> 20:59.180
再看我们后面这个属性

20:59.180 --> 21:00.180
Timeout

21:00.180 --> 21:01.180
Timeout是什么意思呢

21:01.180 --> 21:02.180
你觉得是什么意思

21:02.180 --> 21:04.180
觉得是什么意思呢

21:04.180 --> 21:05.180
那拆呗

21:05.180 --> 21:06.180
它这里来自一个属性

21:06.180 --> 21:07.180
叫Diarration

21:07.180 --> 21:08.180
对吧

21:08.180 --> 21:10.180
它来自这个变量的值

21:10.180 --> 21:11.180
那我们看这个例子里边

21:11.180 --> 21:12.180
这个变量的值数

21:12.180 --> 21:13.180
也放到这了

21:13.180 --> 21:14.180
对吧

21:14.180 --> 21:15.180
一个渐变

21:15.180 --> 21:16.180
就过度的时间

21:16.180 --> 21:18.180
这个貪猫是不是好像就是在

21:18.180 --> 21:20.180
控制那个动画的时间的

21:20.180 --> 21:21.180
你不是一个渐变吗

21:21.180 --> 21:23.180
单入单出

21:23.180 --> 21:24.180
单出需要经过多少时间

21:24.180 --> 21:26.180
单入需要经过多少时间

21:26.180 --> 21:27.180
对不对

21:27.180 --> 21:29.180
好像是在控制这个时间的

21:29.180 --> 21:30.180
那么咱们试一下吧

21:30.180 --> 21:31.180
把这个设为

21:31.180 --> 21:33.180
设为多少呢

21:33.180 --> 21:35.180
设为5秒钟

21:35.180 --> 21:36.180
5秒钟

21:36.180 --> 21:37.180
保存

21:37.180 --> 21:39.180
接下来我们看一下

21:39.180 --> 21:41.180
点击

21:41.180 --> 21:42.180
是5秒钟之后

21:42.180 --> 21:44.180
才慢慢进入了

21:44.180 --> 21:46.180
然后咱们再点击

21:46.180 --> 21:48.180
是5秒钟之后

21:48.180 --> 21:50.180
再慢慢淡出

21:50.180 --> 21:51.180
没问题吧

21:51.180 --> 21:53.180
点击

21:53.180 --> 21:54.180
中途可以

21:54.180 --> 21:56.180
中途可以就是直接淡出了

21:56.180 --> 21:57.180
对不对

21:57.180 --> 21:59.180
这就是这一块的效果

21:59.180 --> 22:00.180
对吧

22:00.180 --> 22:02.180
这是Timeout

22:02.180 --> 22:03.180
这两个属性

22:03.180 --> 22:05.180
我们大概有这么一个感性认识

22:05.180 --> 22:06.180
Timeout表示什么呢

22:06.180 --> 22:07.180
动画的时间

22:07.180 --> 22:08.180
这个人表示的是

22:08.180 --> 22:09.180
显示隐藏

22:09.180 --> 22:10.180
我们现在是这种感觉

22:10.180 --> 22:11.180
接下来我们看这里边

22:11.180 --> 22:12.180
这里边你看懂了

22:12.180 --> 22:13.180
你看这两个属性

22:13.180 --> 22:14.180
我们现在又感性认识了

22:14.180 --> 22:16.180
那么再把里边看懂了

22:16.180 --> 22:18.180
你可能会纠正

22:18.180 --> 22:20.180
你之前的一些理解

22:20.180 --> 22:22.180
里边是什么呢

22:22.180 --> 22:24.180
他给了我一个参数

22:24.180 --> 22:26.180
他给了我这么一个东西

22:26.180 --> 22:27.180
这个参数

22:27.180 --> 22:28.180
在我们的小货号里边

22:28.180 --> 22:29.180
看一下是不是用到了

22:29.180 --> 22:31.180
所以在这里用到了

22:31.180 --> 22:32.180
我就闹了闹了

22:32.180 --> 22:35.180
这个参数到底是个啥呢

22:35.180 --> 22:36.180
这个参数到底是个啥

22:36.180 --> 22:38.180
你难道没有好奇吗

22:38.180 --> 22:39.180
这个参数到底是个啥

22:39.180 --> 22:40.180
是个啥呢

22:40.180 --> 22:42.180
你怎么知道这个参数是个啥

22:43.180 --> 22:46.180
打印出来不就完了吗

22:46.180 --> 22:47.180
打印出来

22:47.180 --> 22:50.180
我都把这个东西直接给它注释掉

22:50.180 --> 22:51.180
腰都不要它

22:51.180 --> 22:53.180
我就用一个最简单的

22:53.180 --> 22:54.180
你不用这个名字吗

22:54.180 --> 22:55.180
这个名字

22:55.180 --> 22:57.180
参数的名字是不是可以随便改

22:57.180 --> 22:58.180
对不对

22:58.180 --> 22:59.180
可以随便改这个名字

22:59.180 --> 23:00.180
我可以打印出来

23:00.180 --> 23:02.180
不完了吗

23:02.180 --> 23:03.180
打印什么

23:04.180 --> 23:05.180
看着

23:05.180 --> 23:07.180
这里一个我已经注释掉了

23:07.180 --> 23:09.180
它里边没有任何东西了

23:09.180 --> 23:11.180
这里味道看了效果

23:11.180 --> 23:13.180
我们这里还是反而回个东西吗

23:13.180 --> 23:14.180
还是反而回个东西

23:14.180 --> 23:17.180
A1随便写个东西

23:17.180 --> 23:20.180
上面的话就5秒钟

23:20.180 --> 23:21.180
就5秒钟

23:21.180 --> 23:22.180
保存

23:22.180 --> 23:23.180
看着

23:23.180 --> 23:24.180
看着

23:24.180 --> 23:26.180
我们看一下效果

23:26.180 --> 23:28.180
出现了一个很神奇的效果

23:28.180 --> 23:29.180
第一个

23:29.180 --> 23:30.180
它控制台里面打印了一个东西

23:30.180 --> 23:33.180
叫一个city的

23:33.180 --> 23:35.180
这个东西肯定是来自于参数的值

23:35.180 --> 23:36.180
对吧

23:36.180 --> 23:37.180
也只有这里打印的东西

23:37.180 --> 23:38.180
对不对

23:38.180 --> 23:39.180
来自于参数的值

23:39.180 --> 23:40.180
然后呢

23:40.180 --> 23:42.180
它还把这个A1显示出来了

23:42.180 --> 23:43.180
也就是说咋了

23:43.180 --> 23:46.180
我们之前理解这个印这个属性了

23:46.180 --> 23:48.180
所以理解的有偏差

23:48.180 --> 23:50.180
之前我们理解的时候

23:50.180 --> 23:51.180
是把它理解成为

23:51.180 --> 23:53.180
它来控制它里边东西

23:53.180 --> 23:55.180
到底要不要显示

23:55.180 --> 23:56.180
它来控制这个东西的

23:56.180 --> 23:57.180
实际上我们发现

23:57.180 --> 23:58.180
根本就不是

23:58.180 --> 24:00.180
因为我们一开始给它的force

24:00.180 --> 24:02.180
按理说是不应该显示的

24:02.180 --> 24:03.180
但它显示了没

24:03.180 --> 24:04.180
是不是显示的

24:04.180 --> 24:05.180
对吧

24:05.180 --> 24:07.180
说明刚才我们理解是有问题的

24:07.180 --> 24:08.180
那么好好理解

24:08.180 --> 24:10.180
你看一下

24:10.180 --> 24:12.180
也就是说这里

24:12.180 --> 24:14.180
好像是你返回什么

24:14.180 --> 24:16.180
我就显示什么

24:16.180 --> 24:18.180
我根本就不管你什么隐藏

24:18.180 --> 24:19.180
动画

24:19.180 --> 24:20.180
啥都不用

24:20.180 --> 24:21.180
啥都没管

24:21.180 --> 24:23.180
你返回什么我就显示什么

24:23.180 --> 24:25.180
然后我给你提供了一个什么

24:25.180 --> 24:26.180
一个参数

24:26.180 --> 24:28.180
这个参数表示

24:28.180 --> 24:30.180
当前的一个状态

24:30.180 --> 24:32.180
这个状态一开始打印出来是什么

24:32.180 --> 24:33.180
一个city的

24:33.180 --> 24:35.180
city的单词是什么意思

24:35.180 --> 24:36.180
比较什么意思

24:36.180 --> 24:37.180
这个是个字五串

24:37.180 --> 24:39.180
也就是说这个参数是一个字五串

24:39.180 --> 24:40.180
这个参数

24:40.180 --> 24:42.180
这个参数目前的只是什么意思呢

24:42.180 --> 24:45.180
表示已经完成了退出

24:45.180 --> 24:46.180
已退出

24:46.180 --> 24:49.180
为什么是它是已退出呢

24:49.180 --> 24:50.180
我们猜测一下

24:50.180 --> 24:52.180
为什么是已退出呢

24:52.180 --> 24:55.180
有没有可能是因为这个地方是force

24:55.180 --> 24:56.180
它是已退出

24:56.180 --> 24:58.180
那我们马上来试验一下

24:58.180 --> 24:59.180
你把这个地方改成q

24:59.180 --> 25:00.180
直接改成q

25:00.180 --> 25:03.180
看它是不是已退出呢

25:03.180 --> 25:05.180
这里保存一下

25:05.180 --> 25:06.180
刷新

25:06.180 --> 25:07.180
所以状态就变了

25:07.180 --> 25:08.180
变成什么

25:08.180 --> 25:09.180
entered

25:09.180 --> 25:11.180
entered表示已经入

25:11.180 --> 25:12.180
已经进入

25:12.180 --> 25:13.180
已经出现

25:13.180 --> 25:14.180
看到没

25:14.180 --> 25:16.180
是不是这个状态的值

25:16.180 --> 25:19.180
由这个组件来控制这个状态的值

25:19.180 --> 25:21.180
这个状态的值取决于什么呢

25:21.180 --> 25:24.180
取决于你这个印这个属性

25:24.180 --> 25:27.180
你取决于这个印这个属性

25:27.180 --> 25:29.180
它到底是q还是force

25:29.180 --> 25:30.180
对吧

25:30.180 --> 25:32.180
也就是我现在给我们提供了一个信息

25:32.180 --> 25:34.180
就是这个印这个属性

25:34.180 --> 25:36.180
至少跟我们刚才的分析是有差异的

25:36.180 --> 25:38.180
它不是控制什么显示隐藏

25:38.180 --> 25:39.180
它啥都没控制

25:39.180 --> 25:42.180
它只是来控制这个状态的值

25:42.180 --> 25:43.180
里边的这个函数

25:43.180 --> 25:45.180
它这个函数它会给你传进来

25:45.180 --> 25:46.180
那么这个状态的值是什么

25:46.180 --> 25:48.180
它只是控制这个

25:48.180 --> 25:49.180
如果你为q的话

25:49.180 --> 25:50.180
那么一开始的状态

25:50.180 --> 25:52.180
它的值是entered

25:52.180 --> 25:53.180
对吧

25:53.180 --> 25:54.180
表示已经入

25:54.180 --> 25:55.180
如果你的值是force的话

25:55.180 --> 25:57.180
那么它的状态的值呢

25:57.180 --> 25:58.180
是什么

25:58.180 --> 25:59.180
是一个city的

25:59.180 --> 26:00.180
一个city

26:00.180 --> 26:01.180
看到没

26:01.180 --> 26:02.180
它只是控制这个东西

26:02.180 --> 26:03.180
这个函数字不串

26:03.180 --> 26:04.180
好

26:04.180 --> 26:06.180
那么现在我们把写回到这个东西

26:06.180 --> 26:07.180
写回到这个东西

26:07.180 --> 26:08.180
接下来我们来看一下

26:09.180 --> 26:11.180
接下来我们来点击这个按钮

26:11.180 --> 26:12.180
切换这个属性值

26:12.180 --> 26:13.180
就切换这个值

26:13.180 --> 26:15.180
看它重新宣传过后

26:15.180 --> 26:17.180
会打印出什么

26:18.180 --> 26:19.180
点击

26:20.180 --> 26:22.180
重新宣传过后

26:22.180 --> 26:23.180
注意看这

26:24.180 --> 26:25.180
好

26:25.180 --> 26:26.180
看到一个线下面

26:26.180 --> 26:29.180
它先打印出来的两个值

26:29.180 --> 26:30.180
说明啥

26:31.180 --> 26:34.180
说明这里的函数是不是运行的三次

26:34.180 --> 26:35.180
最终会运行的三次

26:35.180 --> 26:36.180
对吧

26:36.180 --> 26:37.180
先运行两次

26:37.180 --> 26:38.180
等了一会

26:38.180 --> 26:39.180
它又运行的这个

26:40.180 --> 26:41.180
界面变美

26:41.180 --> 26:42.180
是完全没动

26:42.180 --> 26:43.180
对吧

26:43.180 --> 26:44.180
界面是完全没动

26:44.180 --> 26:45.180
再来一次

26:45.180 --> 26:46.180
重新来

26:47.180 --> 26:48.180
再看点击

26:48.180 --> 26:50.180
输出了两个

26:50.180 --> 26:52.180
然后等了一会

26:52.180 --> 26:53.180
等了一会

26:53.180 --> 26:54.180
它又输出了这个

26:54.180 --> 26:56.180
说明这个函数最终被运行的三次

26:57.180 --> 26:58.180
也就是这个组件

26:58.180 --> 26:59.180
它的干嘛呢

26:59.180 --> 27:02.180
它在维护它里边的一个状态

27:02.180 --> 27:04.180
它什么都没做

27:04.180 --> 27:05.180
什么动画效果

27:05.180 --> 27:06.180
什么狗屁动画效果

27:06.180 --> 27:07.180
一个都没做

27:07.180 --> 27:09.180
它就是在维护一个数据

27:09.180 --> 27:10.180
这个数据

27:12.180 --> 27:14.180
根据这个印这个属性的变化

27:14.180 --> 27:16.180
来进行切换

27:16.180 --> 27:18.180
一开始的时候是force

27:18.180 --> 27:19.180
那么一开始的时候

27:19.180 --> 27:20.180
如果是force的话

27:20.180 --> 27:21.180
它就是excited

27:21.180 --> 27:22.180
表示已退出

27:22.180 --> 27:23.180
那你想这个道理

27:23.180 --> 27:24.180
想这个逻辑

27:24.180 --> 27:25.180
它为force的话

27:25.180 --> 27:27.180
那么是不是一个已退出的状态

27:27.180 --> 27:28.180
那么如果它会去的话

27:28.180 --> 27:29.180
表示enter

27:29.180 --> 27:30.180
表示已进入

27:30.180 --> 27:32.180
然后我们点击这个按钮

27:32.180 --> 27:33.180
切换状态之后

27:33.180 --> 27:34.180
你看

27:34.180 --> 27:36.180
它第一次运行

27:36.180 --> 27:38.180
运行这个函数的时候

27:38.180 --> 27:39.180
那么每次运行函数

27:39.180 --> 27:40.180
是不是会得到一个

27:40.180 --> 27:41.180
得到一个渲染结果

27:41.180 --> 27:42.180
对吧

27:42.180 --> 27:43.180
它会把这个渲染结果

27:43.180 --> 27:44.180
元风不动的渲染出来

27:44.180 --> 27:45.180
这是我们现在理解的

27:45.180 --> 27:46.180
它会把这个结果

27:46.180 --> 27:47.180
元风不动的渲染

27:47.180 --> 27:48.180
渲染出来

27:48.180 --> 27:49.180
它只是给你提供一个状态

27:49.180 --> 27:51.180
这个状态它是自我控制的

27:51.180 --> 27:52.180
一开始

27:52.180 --> 27:54.180
你看你点了个切换

27:54.180 --> 27:55.180
一开始是不是已退出

27:55.180 --> 27:56.180
对吧

27:56.180 --> 27:57.180
首先运行一下

27:57.180 --> 27:58.180
已退出

27:58.180 --> 27:59.180
然后它现在要进入了

27:59.180 --> 28:00.180
对吧

28:00.180 --> 28:02.180
然后马上把状态切换为enter

28:02.180 --> 28:03.180
表示已进入

28:03.180 --> 28:05.180
已进入的状态

28:05.180 --> 28:06.180
正在进入

28:06.180 --> 28:07.180
正在进入

28:07.180 --> 28:08.180
然后等了一会

28:08.180 --> 28:09.180
等了多长时间

28:09.180 --> 28:10.180
你想一想

28:10.180 --> 28:11.180
取决于啥

28:11.180 --> 28:13.180
等多长时间发生变化

28:13.180 --> 28:15.180
是不是取决于这个timeout

28:15.180 --> 28:16.180
对吧

28:16.180 --> 28:18.180
等待这么一段时间之后

28:18.180 --> 28:21.180
它把状态切换到enter

28:21.180 --> 28:22.180
看到没

28:22.180 --> 28:24.180
它就是这样子玩的

28:24.180 --> 28:25.180
啥都没做

28:25.180 --> 28:27.180
就在不停的切换状态

28:27.180 --> 28:28.180
有几个状态

28:28.180 --> 28:29.180
至少我们目前分析出来

28:29.180 --> 28:30.180
有这么几个状态

28:30.180 --> 28:31.180
对吧

28:31.180 --> 28:32.180
有这个

28:32.180 --> 28:33.180
我们再来点一下

28:33.180 --> 28:34.180
再来点一下

28:34.180 --> 28:35.180
现在是已进入了

28:35.180 --> 28:36.180
对吧

28:36.180 --> 28:37.180
现在是已进入的状态

28:37.180 --> 28:38.180
然后再点一下

28:38.180 --> 28:39.180
目前是已进入

28:39.180 --> 28:41.180
然后马上把它变成一个setting

28:41.180 --> 28:43.180
表示正在退出

28:43.180 --> 28:44.180
然后等一会之后

28:44.180 --> 28:45.180
是一个setting的

28:45.180 --> 28:46.180
对吧

28:46.180 --> 28:47.180
一个setting的

28:47.180 --> 28:48.180
那么等多长时间

28:48.180 --> 28:49.180
目前是等5秒钟

28:49.180 --> 28:50.180
当然这个地方可以改

28:50.180 --> 28:51.180
改成500毫秒

28:51.180 --> 28:52.180
你看一下

28:52.180 --> 28:54.180
进入

28:54.180 --> 28:55.180
你看

28:55.180 --> 28:56.180
是不是快一些了

28:56.180 --> 28:57.180
退出

28:57.180 --> 28:58.180
你看是不是快一些了

28:58.180 --> 28:59.180
对吧

28:59.180 --> 29:00.180
那现在大概是不是明白了

29:00.180 --> 29:02.180
这个组建它啥都没做

29:02.180 --> 29:03.180
它只是给你提供了不同状态

29:03.180 --> 29:05.180
它只是在维护一个状态

29:05.180 --> 29:07.180
那么拿到这个状态之后

29:07.180 --> 29:08.180
你要干嘛

29:08.180 --> 29:09.180
随便你

29:09.180 --> 29:10.180
你爱干嘛干嘛

29:10.180 --> 29:11.180
这就解释了

29:11.180 --> 29:12.180
那之前我们说了

29:12.180 --> 29:14.180
做了一个就是单独单出的效果

29:14.180 --> 29:16.180
那如果我不单独单出了

29:16.180 --> 29:17.180
是不是也可以做

29:17.180 --> 29:18.180
跟这个状态来做呗

29:18.180 --> 29:19.180
不就完了吗

29:19.180 --> 29:20.180
对不对

29:20.180 --> 29:21.180
好

29:21.180 --> 29:22.180
那么我们再来看一下

29:22.180 --> 29:23.180
刚才

29:23.180 --> 29:26.180
单独单出效果是咋做的

29:26.180 --> 29:27.180
它是咋做的呢

29:27.180 --> 29:28.180
你看一下

29:28.180 --> 29:30.180
拿个代码人过来

29:30.180 --> 29:32.180
咋做的呢

29:32.180 --> 29:33.180
这样子

29:33.180 --> 29:35.180
把这个复制过来就行了

29:35.180 --> 29:37.180
它建了一个DIV

29:37.180 --> 29:38.180
一个DIV

29:38.180 --> 29:39.180
它有一个style

29:39.180 --> 29:40.180
这个style是一个对象

29:40.180 --> 29:42.180
这个对象来自于混合

29:42.180 --> 29:43.180
先混合默认一样式

29:43.180 --> 29:44.180
看没

29:44.180 --> 29:46.180
先混合默认一样式

29:46.180 --> 29:47.180
然后再混合

29:47.180 --> 29:48.180
transition style

29:48.180 --> 29:50.180
再混合这个对象的

29:50.180 --> 29:51.180
哪个属性

29:51.180 --> 29:52.180
它是把状态的值

29:52.180 --> 29:54.180
当成属性的名字

29:54.180 --> 29:55.180
把状态的值

29:55.180 --> 29:56.180
当成属性的名字

29:56.180 --> 29:57.180
你看这个属性

29:57.180 --> 29:58.180
是不是刚好有对应这四个

29:58.180 --> 30:00.180
比方说目前是entered

30:00.180 --> 30:01.180
目前是entered的状态

30:01.180 --> 30:03.180
那么它就使用这个样式

30:03.180 --> 30:04.180
Opacity等于1

30:04.180 --> 30:06.180
以后要切换到一个setting

30:06.180 --> 30:07.180
那么是把状态切换到这

30:07.180 --> 30:09.180
是不是完成了动画了

30:09.180 --> 30:10.180
对吧

30:10.180 --> 30:11.180
好好看一下

30:11.180 --> 30:12.180
是不是这样子

30:12.180 --> 30:14.180
也就这里的具体

30:14.180 --> 30:15.180
完成什么样的动画

30:15.180 --> 30:17.180
是不是我们完全自行操作

30:17.180 --> 30:19.180
自行操作

30:19.180 --> 30:20.180
它完全不管

30:20.180 --> 30:21.180
完全不管

30:21.180 --> 30:23.180
你自行操作

30:23.180 --> 30:25.180
那么这样子一来的话

30:25.180 --> 30:26.180
你想一想

30:26.180 --> 30:27.180
那我们是不是可以玩

30:27.180 --> 30:28.180
很多画样出来

30:28.180 --> 30:30.180
比方这里我们用的是这个styles

30:30.180 --> 30:31.180
对吧

30:31.180 --> 30:32.180
那可不可以不用styles

30:32.180 --> 30:33.180
用什么

30:33.180 --> 30:34.180
用class可不可以

30:34.180 --> 30:35.180
class name

30:35.180 --> 30:36.180
看着

30:36.180 --> 30:37.180
可不可以

30:37.180 --> 30:38.180
可以

30:38.180 --> 30:39.180
没问题

30:39.180 --> 30:40.180
你看着

30:40.180 --> 30:41.180
class name

30:41.180 --> 30:42.180
我们等于啥

30:42.180 --> 30:43.180
等于这个set的值

30:43.180 --> 30:44.180
我们直接把状态的值

30:44.180 --> 30:45.180
当然还可以拼接

30:45.180 --> 30:47.180
一些钱罪之类的东西

30:47.180 --> 30:48.180
把状态的值

30:48.180 --> 30:50.180
直接作为样式名

30:50.180 --> 30:51.180
直接作为样式名

30:51.180 --> 30:52.180
这个不要了

30:52.180 --> 30:53.180
直接作为样式名

30:53.180 --> 30:54.180
然后我们这里导

30:54.180 --> 30:55.180
写个样式

30:55.180 --> 30:57.180
app.css

30:57.180 --> 30:59.180
就是你理解来代码之后

30:59.180 --> 31:00.180
你就会发现

31:00.180 --> 31:01.180
这些事情

31:01.180 --> 31:02.180
你可以自如的操作了

31:02.180 --> 31:03.180
如果说你没有理解代码

31:03.180 --> 31:04.180
那肯定是写实的

31:04.180 --> 31:06.180
你啥都按了官方文章来写

31:06.180 --> 31:08.180
你都不知道他为什么

31:08.180 --> 31:09.180
就css

31:09.180 --> 31:11.180
把css引用进来

31:11.180 --> 31:12.180
好

31:12.180 --> 31:13.180
那么这里不是有四个状态吗

31:13.180 --> 31:14.180
对不对

31:14.180 --> 31:15.180
哪四个状态

31:15.180 --> 31:16.180
看一下

31:16.180 --> 31:17.180
我们把状态的名字

31:17.180 --> 31:18.180
一样式名字

31:18.180 --> 31:19.180
那么哪四个状态

31:19.180 --> 31:21.180
是不是一个city的

31:21.180 --> 31:22.180
对吧

31:22.180 --> 31:23.180
还有什么

31:23.180 --> 31:25.180
enter

31:25.180 --> 31:26.180
对不对

31:26.180 --> 31:27.180
还有什么

31:27.180 --> 31:29.180
还有那个entry

31:29.180 --> 31:30.180
entry

31:30.180 --> 31:31.180
还有什么

31:31.180 --> 31:33.180
还有那个city

31:33.180 --> 31:35.180
这么四个状态

31:35.180 --> 31:36.180
对不对

31:36.180 --> 31:37.180
好那么先给他一个默认样式

31:37.180 --> 31:38.180
DIV一个默认样式

31:38.180 --> 31:39.180
比方说我们

31:39.180 --> 31:40.180
就要实现弹路弹出

31:40.180 --> 31:43.180
干系个tristation

31:43.180 --> 31:45.180
多长时间呢

31:45.180 --> 31:46.180
多长时间弹路弹出呢

31:46.180 --> 31:47.180
那个时间呢

31:47.180 --> 31:48.180
跟这里一致

31:48.180 --> 31:49.180
保持一致

31:49.180 --> 31:50.180
比方说五百毫秒

31:50.180 --> 31:52.180
五百毫秒

31:52.180 --> 31:54.180
好这里写完了

31:54.180 --> 31:55.180
写完了

31:55.180 --> 31:57.180
好那么这里一个city的

31:57.180 --> 31:59.180
一个city的时候

31:59.180 --> 32:00.180
是不是使用这个状态

32:00.180 --> 32:01.180
对吧

32:01.180 --> 32:02.180
这个状态他就具有的这个内样式

32:02.180 --> 32:03.180
好

32:03.180 --> 32:04.180
这个内样式的话

32:04.180 --> 32:06.180
什么样式呢

32:06.180 --> 32:07.180
已经完成突出了

32:07.180 --> 32:09.180
是不是opacity的名字

32:09.180 --> 32:10.180
对吧

32:10.180 --> 32:11.180
我们用那个嘛

32:11.180 --> 32:12.180
opacity的名字

32:12.180 --> 32:13.180
然后enter的呢

32:13.180 --> 32:15.180
表示已经进入了

32:15.180 --> 32:17.180
已经入了样式是不是opacity的名字

32:17.180 --> 32:18.180
对不对

32:18.180 --> 32:19.180
好

32:19.180 --> 32:20.180
正在进入

32:20.180 --> 32:22.180
正在进入是不是也是opacity的名字

32:22.180 --> 32:23.180
对不对

32:23.180 --> 32:24.180
看一下吧

32:24.180 --> 32:25.180
刚才打印出来的结果

32:25.180 --> 32:27.180
现在目前是一个city的状态

32:27.180 --> 32:28.180
对不对

32:28.180 --> 32:29.180
目前是一个city的

32:29.180 --> 32:30.180
那么点击过后

32:30.180 --> 32:31.180
是不是他先从一个city的

32:31.180 --> 32:33.180
马上切换到intering

32:33.180 --> 32:34.180
对吧

32:34.180 --> 32:35.180
马上切换到intering

32:35.180 --> 32:36.180
那你是不是

32:36.180 --> 32:37.180
要把它opacity的名字

32:37.180 --> 32:38.180
对不对

32:38.180 --> 32:40.180
然后才能实现这个动画效果

32:40.180 --> 32:41.180
好那么咱们呢

32:41.180 --> 32:42.180
你看这个

32:42.180 --> 32:43.180
再看一下啊

32:43.180 --> 32:45.180
先稍微放长一点

32:45.180 --> 32:46.180
稍微放长一点

32:46.180 --> 32:47.180
5秒钟吧

32:47.180 --> 32:48.180
还是用5秒钟

32:48.180 --> 32:50.180
这里用5000毫秒

32:50.180 --> 32:51.180
来看一下啊

32:51.180 --> 32:52.180
点击

32:52.180 --> 32:53.180
一看是不是马上从这个状态

32:53.180 --> 32:54.180
切换到这个状态

32:54.180 --> 32:55.180
对不对

32:55.180 --> 32:56.180
看到没

32:56.180 --> 32:58.180
然后5秒钟之后再使用enter的

32:58.180 --> 32:59.180
对不对

32:59.180 --> 33:00.180
好那么这里呢

33:00.180 --> 33:01.180
我们就entering呢

33:01.180 --> 33:02.180
跟这个enter的

33:02.180 --> 33:03.180
目前我们这个需求里面

33:03.180 --> 33:04.180
是一样的

33:04.180 --> 33:05.180
一样的

33:05.180 --> 33:06.180
好一个city

33:06.180 --> 33:08.180
是不是跟着一个city

33:08.180 --> 33:09.180
是不是一样的

33:09.180 --> 33:10.180
对吧

33:10.180 --> 33:11.180
好

33:11.180 --> 33:12.180
那里来看一下

33:12.180 --> 33:13.180
看一下

33:13.180 --> 33:14.180
看一下

33:14.180 --> 33:15.180
现在是不是能够完成

33:15.180 --> 33:16.180
这个切换效果了

33:16.180 --> 33:17.180
好刷新

33:17.180 --> 33:19.180
一开始是不是看不见

33:19.180 --> 33:20.180
看不见吧

33:20.180 --> 33:21.180
对不对

33:21.180 --> 33:22.180
为什么看不见

33:22.180 --> 33:23.180
因为一开始

33:23.180 --> 33:24.180
它的状态是一个city的

33:24.180 --> 33:25.180
那么我们这个div

33:25.180 --> 33:26.180
就利用这个状态

33:26.180 --> 33:27.180
把那个内样式

33:27.180 --> 33:28.180
同时设为city的

33:28.180 --> 33:29.180
看到没

33:29.180 --> 33:30.180
opacity等于0

33:30.180 --> 33:31.180
自然看不见了

33:31.180 --> 33:32.180
好

33:32.180 --> 33:33.180
点击这个按钮之后

33:33.180 --> 33:34.180
干嘛呢

33:35.180 --> 33:36.180
点击这个按钮过后

33:36.180 --> 33:37.180
是不是它一开始

33:37.180 --> 33:38.180
是一个city的

33:38.180 --> 33:40.180
然后马上把它切换为entering

33:40.180 --> 33:41.180
opacity等于1了

33:41.180 --> 33:42.180
对吧

33:42.180 --> 33:43.180
你看一下

33:43.180 --> 33:44.180
是不是等于1了

33:44.180 --> 33:45.180
你看没

33:45.180 --> 33:46.180
这个样式

33:46.180 --> 33:47.180
看没等于1了

33:47.180 --> 33:48.180
好

33:48.180 --> 33:49.180
最后把它变成enter了

33:49.180 --> 33:50.180
看到没

33:50.180 --> 33:52.180
我们完全可以自如的控制

33:52.180 --> 33:53.180
好

33:53.180 --> 33:54.180
然后我们再点击

33:54.180 --> 33:55.180
是不是它的状态又变了

33:55.180 --> 33:56.180
又从enter变成了什么

33:56.180 --> 33:57.180
entering

33:57.180 --> 33:59.180
又变成了entering

33:59.180 --> 34:00.180
变成一个city

34:00.180 --> 34:01.180
点击

34:01.180 --> 34:02.180
你看

34:02.180 --> 34:03.180
是不是状态变成一个city

34:03.180 --> 34:04.180
opacity等于0了

34:04.180 --> 34:05.180
那么慢慢切换

34:05.180 --> 34:06.180
慢慢切换

34:06.180 --> 34:07.180
等切换完成之后

34:07.180 --> 34:08.180
切换完成之后

34:08.180 --> 34:09.180
干嘛呢

34:09.180 --> 34:10.180
看着

34:10.180 --> 34:11.180
等切换完成之后

34:11.180 --> 34:12.180
是不是把它变成了一个city的

34:12.180 --> 34:13.180
对吧

34:13.180 --> 34:14.180
opacity等于0了

34:14.180 --> 34:15.180
对不对

34:15.180 --> 34:18.180
因为我们完全可以自如的进行控制

34:18.180 --> 34:20.180
完全可以自如的进行控制

34:21.180 --> 34:22.180
你要对我意思吗

34:23.180 --> 34:24.180
好

34:24.180 --> 34:25.180
这是关于

34:25.180 --> 34:27.180
关于就是这个

34:27.180 --> 34:29.180
就这个

34:29.180 --> 34:31.180
这个stat

34:31.180 --> 34:32.180
这个参数

34:32.180 --> 34:33.180
这个参数就是

34:33.180 --> 34:35.180
它自己内部维护的一个状态

34:35.180 --> 34:37.180
那么大家可以发挥一下想象力

34:37.180 --> 34:39.180
你们如果说自己要写这么一个组件

34:39.180 --> 34:41.180
是不是很简单啊

34:41.180 --> 34:43.180
有多复杂呢

34:43.180 --> 34:45.180
就是如果说目前那个需求下面

34:45.180 --> 34:46.180
是不是很简单

34:46.180 --> 34:47.180
它里边有个状态吗

34:47.180 --> 34:49.180
这个状态里边

34:49.180 --> 34:51.180
有四种情况吗

34:51.180 --> 34:52.180
四种情况

34:52.180 --> 34:54.180
根据属性不同的值

34:54.180 --> 34:56.180
不同的属性值是不是切换不同的状态

34:56.180 --> 34:57.180
对不对

34:57.180 --> 34:58.180
然后一个set timeout

34:58.180 --> 35:00.180
可以想象里边有个技师器

35:00.180 --> 35:01.180
set timeout之后呢

35:01.180 --> 35:02.180
它可以

35:02.180 --> 35:03.180
把个状态切换

35:03.180 --> 35:05.180
然后再重新渲染它里边的

35:05.180 --> 35:07.180
调整它的切换

35:07.180 --> 35:08.180
对不对

35:08.180 --> 35:09.180
大概就这么一种情况

35:09.180 --> 35:11.180
它本身不做任何的动画

35:11.180 --> 35:13.180
它只是用来控制

35:13.180 --> 35:14.180
动画的状态

35:14.180 --> 35:15.180
那么根据这个状态

35:15.180 --> 35:16.180
你要做什么事情

35:16.180 --> 35:18.180
随便你咋做

35:18.180 --> 35:19.180
这就是这个基础逐渐

35:19.180 --> 35:21.180
transition的核心功能

35:21.180 --> 35:22.180
你就理解清楚了

35:22.180 --> 35:23.180
那么

35:23.180 --> 35:24.180
理解这个核心功能之后呢

35:24.180 --> 35:26.180
我们再来继续看文档

35:26.180 --> 35:27.180
你发现这个文档呢

35:27.180 --> 35:29.180
读起来呢就顺畅多了

35:29.180 --> 35:31.180
它说什么呢

35:31.180 --> 35:33.180
我们来看一下

35:33.180 --> 35:34.180
它说

35:34.180 --> 35:36.180
一共有四种主要的状态

35:36.180 --> 35:38.180
在这个transition主线里边

35:38.180 --> 35:39.180
它哪四种的enter

35:39.180 --> 35:40.180
enter的

35:40.180 --> 35:41.180
exceeding

35:41.180 --> 35:42.180
exceeding的

35:42.180 --> 35:43.180
那么它接下来

35:43.180 --> 35:44.180
它解释

35:44.180 --> 35:47.180
解释这种激动状态的情况

35:47.180 --> 35:48.180
它说transition state

35:48.180 --> 35:50.180
就是这个状态

35:50.180 --> 35:51.180
就是这个状态

35:51.180 --> 35:52.180
它说

35:52.180 --> 35:53.180
它会改变

35:53.180 --> 35:55.180
会切换状态

35:55.180 --> 35:56.180
怎么切换呢

35:56.180 --> 35:57.180
它是通过这个

35:57.180 --> 35:58.180
in这个属性

35:58.180 --> 35:59.180
看到没

35:59.180 --> 36:00.180
vial

36:00.180 --> 36:01.180
vial表示通过

36:02.180 --> 36:03.180
inprop

36:03.180 --> 36:04.180
通过in这个属性

36:04.180 --> 36:06.180
它会切换状态

36:06.180 --> 36:07.180
当这个

36:07.180 --> 36:09.180
当是true的时候

36:09.180 --> 36:11.180
当这个in这个属性是true的时候

36:11.180 --> 36:13.180
那么这个组件呢

36:13.180 --> 36:14.180
它的状态呢

36:14.180 --> 36:17.180
最开始是enter

36:17.180 --> 36:18.180
enter

36:18.180 --> 36:19.180
它这里写的这些问题

36:19.180 --> 36:21.180
应该是enter的

36:21.180 --> 36:22.180
应该就是enter state

36:22.180 --> 36:24.180
就表示进入阶段

36:24.180 --> 36:27.180
起始于进入阶段

36:27.180 --> 36:29.180
它说在这个阶段下面

36:29.180 --> 36:30.180
这个组件呢

36:30.180 --> 36:31.180
将切换

36:35.180 --> 36:36.180
它说

36:36.180 --> 36:37.180
将从当前状态

36:37.180 --> 36:39.180
切换到进入阶段

36:39.180 --> 36:41.180
将从当前状态

36:41.180 --> 36:43.180
切换到进入阶段

36:47.180 --> 36:48.180
下面说了

36:48.180 --> 36:49.180
具体的切换方式

36:49.180 --> 36:51.180
先把它变成entering

36:51.180 --> 36:53.180
先把它变成entering

36:53.180 --> 36:54.180
它说

36:54.180 --> 36:56.180
接下来把它变成enter的

36:56.180 --> 36:58.180
把它变成enter的

36:58.180 --> 37:00.180
什么时候变成enter的呢

37:00.180 --> 37:02.180
就是当 is complete

37:02.180 --> 37:03.180
当它完成的时候

37:03.180 --> 37:04.180
把它变成enter的

37:04.180 --> 37:05.180
什么时候完成了

37:05.180 --> 37:07.180
那就是time out了

37:07.180 --> 37:10.180
它就大概说了一下这个属像

37:10.180 --> 37:12.180
好 接下来我们继续看

37:12.180 --> 37:13.180
那么接下来它说了

37:13.180 --> 37:14.180
里面具体的一些属像

37:14.180 --> 37:15.180
第一个切换

37:15.180 --> 37:16.180
刚才我们看到过

37:16.180 --> 37:17.180
切换

37:17.180 --> 37:18.180
它说的这个切换

37:18.180 --> 37:20.180
它是一个函数

37:20.180 --> 37:23.180
而不是一个react元素

37:23.180 --> 37:26.180
而是使用了一个函数

37:26.180 --> 37:27.180
这个函数

37:27.180 --> 37:28.180
它的状态一共有四种

37:28.180 --> 37:30.180
就是四种

37:30.180 --> 37:33.180
那么你可以根据这四种状态

37:33.180 --> 37:34.180
根据这不同的状态

37:34.180 --> 37:36.180
你要去做什么事情

37:36.180 --> 37:37.180
属一遍你咋做

37:37.180 --> 37:39.180
它这里说到这么一个现象

37:39.180 --> 37:40.180
你可以利用这个状态

37:40.180 --> 37:44.180
把它变成那一样式的一部分

37:44.180 --> 37:46.180
你可以做任何事情

37:46.180 --> 37:48.180
那么就是个切换属性

37:48.180 --> 37:50.180
那么接下来它说的硬这个属性

37:50.180 --> 37:51.180
硬这个属性

37:51.180 --> 37:52.180
就是说

37:52.180 --> 37:55.180
表示这个动画

37:55.180 --> 37:56.180
不是说动画吗

37:56.180 --> 37:57.180
这个组件

37:57.180 --> 37:59.180
只是这个组件

37:59.180 --> 38:01.180
就是目前的状态

38:01.180 --> 38:02.180
它为处的话

38:02.180 --> 38:05.180
那么就表示进入阶段

38:05.180 --> 38:06.180
它如果为force的话

38:06.180 --> 38:07.180
就表示退出阶段

38:07.180 --> 38:09.180
但它不做任何具体的事情

38:09.180 --> 38:11.180
它只是给你切换状态

38:11.180 --> 38:14.180
这就是关于这两个属性

38:14.180 --> 38:16.180
那么最核心的东西就完了

38:16.180 --> 38:18.180
后边我们学习了

38:18.180 --> 38:20.180
什么CSS全随性

38:20.180 --> 38:21.180
还有什么Switch全随性

38:21.180 --> 38:23.180
跟它都有关系

38:23.180 --> 38:25.180
因为它如果直接用它的话

38:25.180 --> 38:28.180
确实不怎么好用

38:28.180 --> 38:29.180
但是你至少知道

38:29.180 --> 38:31.180
它的核心原理其实非常简单

38:31.180 --> 38:33.180
它就是控制状态

38:33.180 --> 38:34.180
根据状态要显示什么

38:34.180 --> 38:35.180
你自行决定

38:35.180 --> 38:38.180
这个组件本身是非常非常

38:38.180 --> 38:40.180
非常非常简单的

38:40.180 --> 38:42.180
那么接下来我们来看一下

38:42.180 --> 38:44.180
它里边还有哪些属性

38:44.180 --> 38:45.180
还有哪些属性

38:45.180 --> 38:46.180
大概看一下

38:46.180 --> 38:48.180
然后我这里属性比较多

38:48.180 --> 38:51.180
所以我这里说几个常用的

38:52.180 --> 38:53.180
第一个

38:53.180 --> 38:54.180
我们说一下这个

38:55.180 --> 38:56.180
它说什么

38:56.180 --> 38:58.180
它说Mount On

38:58.180 --> 38:59.180
Mount什么意思

38:59.180 --> 39:00.180
就是挂载

39:00.180 --> 39:01.180
On Enter

39:01.180 --> 39:02.180
什么意思

39:02.180 --> 39:04.180
它说默认情况下

39:04.180 --> 39:06.180
这个植柱件

39:06.180 --> 39:07.180
它是

39:07.180 --> 39:08.180
什么叫植柱件

39:08.180 --> 39:09.180
就是它里边的东西

39:09.180 --> 39:11.180
就是这里返回的东西

39:12.180 --> 39:13.180
它说默认情况下

39:13.180 --> 39:15.180
这个植柱件

39:15.180 --> 39:20.180
是直接立即挂载到

39:20.180 --> 39:22.180
植柱件里边去了

39:22.180 --> 39:23.180
也就是说它内部

39:23.180 --> 39:25.180
它去调整这个函数

39:25.180 --> 39:27.180
得到这个结果直接挂载进去

39:27.180 --> 39:28.180
它说

39:28.180 --> 39:30.180
如果说你想

39:30.180 --> 39:33.180
延迟挂载这个组件的话

39:33.180 --> 39:34.180
它说

39:34.180 --> 39:35.180
如果说一开始

39:35.180 --> 39:36.180
你这个硬的属性

39:36.180 --> 39:38.180
直接就是True

39:38.180 --> 39:41.180
如果说你想延迟挂载的话

39:41.180 --> 39:43.180
那么你就设置这个属性

39:43.180 --> 39:46.180
叫Mount On Enter

39:46.180 --> 39:48.180
那么这个属性把它设为什么

39:48.180 --> 39:49.180
把它设为True

39:49.180 --> 39:50.180
否认只是Force

39:50.180 --> 39:52.180
把它设为True就是延迟挂载

39:52.180 --> 39:54.180
延迟挂载

39:54.180 --> 39:56.180
好 那咱们看一下

39:56.180 --> 39:57.180
我们来这里

39:57.180 --> 39:59.180
直接给它设置这个属性

39:59.180 --> 40:01.180
主要是告诉大家

40:01.180 --> 40:02.180
怎么去约读这个文档

40:02.180 --> 40:03.180
把它设为True

40:03.180 --> 40:04.180
当然你可以指

40:04.180 --> 40:05.180
因为它是布尔属性

40:05.180 --> 40:06.180
你可以直接设置这个属性

40:06.180 --> 40:07.180
就完成了

40:07.180 --> 40:08.180
把它设为True

40:08.180 --> 40:09.180
保存

40:09.180 --> 40:11.180
咱们再看一下

40:11.180 --> 40:13.180
接下来看到有什么不同吗

40:13.180 --> 40:15.180
有没有什么不同

40:15.180 --> 40:17.180
你会发现一个神奇的现象

40:17.180 --> 40:18.180
我这里的输出呢

40:18.180 --> 40:20.180
输出是哪去了

40:20.180 --> 40:21.180
因为发现它根本就没有

40:21.180 --> 40:22.180
调用这个函数 对吧

40:22.180 --> 40:23.180
这里给它传了一个函数

40:23.180 --> 40:25.180
它根本就没有调用这个函数

40:25.180 --> 40:26.180
它为啥没有调用呢

40:26.180 --> 40:28.180
因为这个因这个属性呢

40:28.180 --> 40:29.180
它是Force

40:29.180 --> 40:30.180
Force的话

40:30.180 --> 40:32.180
它是根本就不会挂载这个组件的

40:32.180 --> 40:33.180
我们来看一下

40:33.180 --> 40:34.180
组件数

40:34.180 --> 40:36.180
Rectal的节点数

40:36.180 --> 40:37.180
你看一下

40:37.180 --> 40:38.180
这个Trace-in的组件里面

40:38.180 --> 40:39.180
说啥东西都没有

40:39.180 --> 40:40.180
对吧

40:40.180 --> 40:41.180
这个Trace-in的节点里面

40:41.180 --> 40:42.180
啥东西都没有

40:42.180 --> 40:43.180
那如果说

40:43.180 --> 40:44.180
我没有设置这个属性

40:44.180 --> 40:46.180
没有设置这个属性

40:46.180 --> 40:47.180
保存

40:49.810 --> 40:50.810
那么没有设置这个属性的时候

40:50.810 --> 40:51.810
你看一下这个组件数里面

40:51.810 --> 40:52.810
是不是

40:52.810 --> 40:53.810
虽然说它没有显示

40:53.810 --> 40:54.810
虽然说它没有显示

40:54.810 --> 40:56.810
但是它这个组件是不是存在的

40:56.810 --> 40:57.810
对不对

40:57.810 --> 40:59.810
那这就是个属性的作用

40:59.810 --> 41:00.810
以后这个属性是什么意思呢

41:00.810 --> 41:03.810
只有在进入的时候

41:03.810 --> 41:05.810
才会有这个

41:05.810 --> 41:06.810
才会有这个

41:06.810 --> 41:08.810
它才会调用这个函数

41:08.810 --> 41:10.810
只有它是应等于处的时候了

41:10.810 --> 41:12.810
它才会调用这个函数

41:12.810 --> 41:15.810
如果它没有显示的时候了

41:15.810 --> 41:16.810
就是没有进入的时候了

41:16.810 --> 41:17.810
它是不管的

41:17.810 --> 41:19.810
它是不管的

41:19.810 --> 41:20.810
就这么个意思

41:20.810 --> 41:21.810
它就不管这个节点了

41:21.810 --> 41:23.810
看了没

41:23.810 --> 41:24.810
就这么个意思

41:24.810 --> 41:25.810
只有个按钮

41:25.810 --> 41:28.810
那么现在我们点了过后

41:28.810 --> 41:30.810
才会出现这个DIV

41:30.810 --> 41:32.810
才会出现这个节点

41:32.810 --> 41:33.810
就这么个意思

41:33.810 --> 41:36.810
这是关于它的这个属性的作用

41:36.810 --> 41:37.810
另外一个属性的我们来看一下

41:37.810 --> 41:38.810
就没什么好说的了

41:38.810 --> 41:40.810
叫Amount on Exit

41:40.810 --> 41:42.810
就是默认情况下说到了

41:42.810 --> 41:43.810
默认情况下

41:43.810 --> 41:46.810
就是说你哪怕退出了

41:46.810 --> 41:48.810
我也不是说这个组件就不存

41:48.810 --> 41:49.810
它里边的东西就不存在了

41:49.810 --> 41:50.810
哪怕你退出了

41:50.810 --> 41:52.810
它里边的东西不是说就不存在了

41:52.810 --> 41:54.810
比方说我们一开始把它去掉

41:54.810 --> 41:57.810
这些东西都可以通过试验

41:57.810 --> 41:59.810
和阅读这个文档

41:59.810 --> 42:00.810
帮你理解清楚

42:00.810 --> 42:02.810
你看一下进入

42:02.810 --> 42:04.810
进入

42:04.810 --> 42:05.810
看一下

42:05.810 --> 42:07.810
我这里

42:07.810 --> 42:09.810
用那个React

42:10.810 --> 42:12.810
刷新一下

42:12.810 --> 42:13.810
React

42:13.810 --> 42:14.810
看一下

42:14.810 --> 42:17.810
进入

42:17.810 --> 42:19.810
然后我们再看退出

42:19.810 --> 42:20.810
再看退出

42:20.810 --> 42:22.810
退出

42:22.810 --> 42:24.810
看一下

42:24.810 --> 42:25.810
退出过

42:25.810 --> 42:27.810
你看这个节点是不是还在

42:27.810 --> 42:28.810
对吧

42:28.810 --> 42:29.810
这个节点是不是还在

42:29.810 --> 42:30.810
为什么

42:30.810 --> 42:31.810
因为它不会给你销毁掉

42:31.810 --> 42:33.810
不会给你销毁这个组件

42:33.810 --> 42:35.810
但是如果说你配置了这个属性的话

42:35.810 --> 42:36.810
那么

42:36.810 --> 42:38.810
当退出完成之后

42:38.810 --> 42:39.810
它不会再掉用这个函数了

42:39.810 --> 42:40.810
不会再掉用这个函数

42:40.810 --> 42:42.810
有给它配置到这个东西过后

42:42.810 --> 42:43.810
你看一下

42:43.810 --> 42:45.810
配置了这个东西

42:45.810 --> 42:46.810
配置到之后

42:46.810 --> 42:47.810
你再去运行

42:47.810 --> 42:48.810
看着

42:48.810 --> 42:50.810
我们把时间调短一点

42:50.810 --> 42:51.810
500毫秒

42:51.810 --> 42:53.810
这边CSS也是500毫秒

42:53.810 --> 42:55.810
看着

42:55.810 --> 42:57.810
一开始

42:57.810 --> 42:59.810
你看是退出状案的时候

42:59.810 --> 43:01.810
退出状案的时候

43:01.810 --> 43:02.810
你会发现

43:02.810 --> 43:03.810
它根本就没有这个组件

43:03.810 --> 43:05.810
这个组件根本就没有渲染出来

43:05.810 --> 43:07.810
你看看

43:07.810 --> 43:08.810
这个组件是不存在的

43:08.810 --> 43:09.810
包括控制台

43:09.810 --> 43:11.810
是不是没有打印任何东西

43:11.810 --> 43:13.810
然后我们这里点击进入

43:13.810 --> 43:14.810
有了

43:14.810 --> 43:15.810
看没

43:15.810 --> 43:16.810
为什么瞬间就出来了

43:16.810 --> 43:17.810
还没有经过动画

43:17.810 --> 43:18.810
为什么瞬间就出来了

43:18.810 --> 43:19.810
因为刚才没有这个元素

43:19.810 --> 43:21.810
瞬间给它加这个元素

43:21.810 --> 43:23.810
那动画效果是不是无效的

43:23.810 --> 43:24.810
对不对

43:24.810 --> 43:25.810
是无效的

43:25.810 --> 43:27.810
然后我们再点击退出

43:27.810 --> 43:29.810
控制台一个CT的

43:29.810 --> 43:30.810
一开始Enter

43:30.810 --> 43:31.810
Enter的

43:31.810 --> 43:33.810
然后再点退出

43:33.810 --> 43:34.810
退出完成

43:34.810 --> 43:35.810
退出过后

43:35.810 --> 43:37.810
你看这个组件是不是又销毁了

43:37.810 --> 43:39.810
组件又销毁掉了

43:39.810 --> 43:40.810
就这么回事

43:40.810 --> 43:41.810
这两个属性控制的东西

43:41.810 --> 43:42.810
当然

43:42.810 --> 43:43.810
不是说这两个属性很重要

43:43.810 --> 43:44.810
这两个属性一点都不重要

43:44.810 --> 43:45.810
我只是告诉你

43:45.810 --> 43:47.810
怎么去读这个文档

43:47.810 --> 43:48.810
好

43:48.810 --> 43:50.810
然后再看这个Appear

43:50.810 --> 43:51.810
Appear

43:51.810 --> 43:52.810
这个属性

43:52.810 --> 43:54.810
它是控制第一次

43:54.810 --> 43:55.810
第一次

43:55.810 --> 43:56.810
就是当组件

43:56.810 --> 43:57.810
挂载的时候

43:57.810 --> 43:59.810
Windows Transition Components

43:59.810 --> 44:00.810
挂载的时候

44:00.810 --> 44:01.810
当这个Transition

44:01.810 --> 44:02.810
组件挂载的时候

44:02.810 --> 44:03.810
就第一次加载

44:03.810 --> 44:04.810
对吧

44:04.810 --> 44:05.810
它说第一次加载

44:05.810 --> 44:07.810
是没有应用任何的

44:07.810 --> 44:09.810
没有应用任何的动画效果

44:09.810 --> 44:10.810
就是那个状态

44:10.810 --> 44:12.810
它没有进行任何的维护

44:12.810 --> 44:13.810
你给它喘到是什么属性

44:13.810 --> 44:15.810
它直接就进入最终的状态就完成了

44:15.810 --> 44:16.810
它没有一个过度的

44:16.810 --> 44:18.810
没有一个过度的状态

44:18.810 --> 44:21.810
如果说你想在第一次加载的时候

44:21.810 --> 44:23.810
也想要应用过度的状态的话

44:23.810 --> 44:24.810
你把这个Appear

44:24.810 --> 44:25.810
设为true就完成了

44:25.810 --> 44:26.810
你看

44:26.810 --> 44:29.810
if you want to transition on a first amount

44:29.810 --> 44:30.810
当第一次挂载的时候

44:30.810 --> 44:32.810
你想应用这个transition

44:32.810 --> 44:33.810
这个状态的过度

44:33.810 --> 44:34.810
那么你把这个Appear

44:34.810 --> 44:36.810
属性设为true就完成了

44:36.810 --> 44:38.810
它说

44:38.810 --> 44:39.810
它说什么呢

44:39.810 --> 44:40.810
它说这个组件

44:40.810 --> 44:41.810
它说这个组件

44:41.810 --> 44:42.810
就是一个transition组件

44:42.810 --> 44:44.810
它会尽快的

44:44.810 --> 44:46.810
当这个transition

44:46.810 --> 44:48.810
完成挂载之后

44:48.810 --> 44:49.810
它会尽快的去应用这个

44:49.810 --> 44:51.810
就是过度状态

44:51.810 --> 44:53.810
咱们试一下就完成了

44:53.810 --> 44:54.810
试一下

44:54.810 --> 44:56.810
把它设为Appear

44:56.810 --> 44:57.810
Appear

44:57.810 --> 44:59.810
给它设为true

44:59.810 --> 45:00.810
你看一下

45:00.810 --> 45:02.810
一开始把它设为true

45:02.810 --> 45:03.810
把这个属性

45:03.810 --> 45:04.810
一开始就让它显示

45:04.810 --> 45:05.810
保存

45:05.810 --> 45:06.810
你看一下

45:06.810 --> 45:07.810
这里

45:08.810 --> 45:09.810
重新来刷新

45:09.810 --> 45:10.810
这里虽然看不到效果

45:10.810 --> 45:11.810
但是你看到状态

45:11.810 --> 45:12.810
是不是经过了几个阶段

45:12.810 --> 45:13.810
对吧

45:13.810 --> 45:14.810
所以经过了几个阶段的状态

45:14.810 --> 45:16.810
一个set的

45:16.810 --> 45:17.810
entry

45:17.810 --> 45:18.810
然后enter的

45:18.810 --> 45:19.810
对不对

45:19.810 --> 45:21.810
它经过了这么几个状态了

45:21.810 --> 45:22.810
原来这个意思吧

45:22.810 --> 45:24.810
如果说它是force

45:24.810 --> 45:25.810
保存

45:25.810 --> 45:26.810
那么force的话

45:26.810 --> 45:29.810
它只有一个set的

45:29.810 --> 45:30.810
已经完全退出了

45:30.810 --> 45:31.810
反正都看不见

45:31.810 --> 45:32.810
对吧

45:32.810 --> 45:33.810
反正看不见

45:33.810 --> 45:34.810
Appear表示什么意思

45:34.810 --> 45:35.810
首次出现的意思

45:35.810 --> 45:36.810
首次出现

45:36.810 --> 45:38.810
如果说没有这个属性

45:38.810 --> 45:39.810
你看一下

45:39.810 --> 45:40.810
没有这个属性把它设为true

45:40.810 --> 45:42.810
它的状态过渡

45:42.810 --> 45:43.810
它只有最终的一个结果

45:43.810 --> 45:44.810
enter

45:44.810 --> 45:45.810
但是如果说

45:45.810 --> 45:47.810
你把它设为

45:47.810 --> 45:48.810
你把它设为Appear

45:48.810 --> 45:49.810
设为true

45:49.810 --> 45:50.810
那么

45:51.810 --> 45:53.810
你把它设为true之后

45:53.810 --> 45:54.810
保存

45:54.810 --> 45:55.810
所以经过了三个状态

45:55.810 --> 45:56.810
先从一个set的

45:56.810 --> 45:57.810
变到entry

45:57.810 --> 45:58.810
再变到enter的

45:58.810 --> 45:59.810
看到没

45:59.810 --> 46:01.810
这就是关于这一块

46:01.810 --> 46:02.810
Appear

46:03.810 --> 46:06.810
那么下面还有一些乱七八糟的属性

46:06.810 --> 46:07.810
还有什么就是

46:07.810 --> 46:08.810
是否

46:08.810 --> 46:09.810
启用

46:09.810 --> 46:11.810
是否启用进入状态

46:11.810 --> 46:13.810
如果说你把它设为force的话

46:13.810 --> 46:14.810
那么进入状态

46:14.810 --> 46:15.810
它就没有了

46:15.810 --> 46:16.810
没有过程了

46:16.810 --> 46:18.810
一个set

46:18.810 --> 46:20.810
是否启用结束过渡

46:20.810 --> 46:22.810
那么你把它设为force之后

46:22.810 --> 46:24.810
它就没有结束过程了

46:25.810 --> 46:26.810
这个timeout说过了

46:26.810 --> 46:27.810
没什么好说的

46:29.810 --> 46:30.810
然后这里

46:31.810 --> 46:32.810
有一个什么

46:34.810 --> 46:35.810
这个是属性什么意思呢

46:35.810 --> 46:36.810
我们大概看一下

46:36.810 --> 46:37.810
大概看一下这个属性

46:37.810 --> 46:39.810
add and listener

46:39.810 --> 46:40.810
什么意思呢

46:40.810 --> 46:41.810
它说

46:41.810 --> 46:44.810
添加一个自定义的

46:44.810 --> 46:46.810
过渡

46:46.810 --> 46:48.810
就是过渡结束

46:48.810 --> 46:50.810
触发事件

46:50.810 --> 46:52.810
过渡结束触发事件

46:52.810 --> 46:53.810
因为我们知道

46:53.810 --> 46:55.810
那个过渡结束

46:55.810 --> 46:57.810
不是多么里边讲过的

46:57.810 --> 46:58.810
里面学CSS3的时候

46:58.810 --> 46:59.810
应该学过

46:59.810 --> 47:00.810
就是有这么一个时间

47:00.810 --> 47:02.810
叫tracing and

47:02.810 --> 47:04.810
那么如果你想添加这个事件

47:04.810 --> 47:05.810
给里边的节点

47:05.810 --> 47:06.810
添加这个事件的话

47:06.810 --> 47:08.810
那么你就可以使用这个

47:08.810 --> 47:10.810
就是使用这个

47:10.810 --> 47:12.810
使用这个属性

47:12.810 --> 47:14.810
add and listener

47:14.810 --> 47:15.810
它说这个属性

47:15.810 --> 47:16.810
你要给它传什么呢

47:16.810 --> 47:17.810
你要给它传一个函数

47:17.810 --> 47:18.810
你看下面的例子

47:18.810 --> 47:19.810
是不是给它传了一个函数

47:19.810 --> 47:20.810
对吧

47:20.810 --> 47:21.810
那么它下面有解释

47:21.810 --> 47:22.810
解释这个函数

47:22.810 --> 47:23.810
什么时候运行

47:23.810 --> 47:24.810
什么时候运行呢

47:24.810 --> 47:25.810
它说cord

47:25.810 --> 47:26.810
被调用

47:26.810 --> 47:27.810
把这些常见的单子

47:27.810 --> 47:28.810
你要明白

47:28.810 --> 47:29.810
被调用

47:29.810 --> 47:30.810
这个函数被调用

47:30.810 --> 47:31.810
什么时候被调用呢

47:32.810 --> 47:33.810
我再说一次

47:33.810 --> 47:35.810
就这几个课了

47:35.810 --> 47:37.810
如果说我不看官方文档

47:37.810 --> 47:38.810
直接给你讲

47:38.810 --> 47:40.810
那里面学习的肯定简单

47:40.810 --> 47:41.810
但是那你真的样子

47:41.810 --> 47:42.810
你就学不到什么

47:42.810 --> 47:43.810
学不到什么东西了

47:43.810 --> 47:44.810
因为我是

47:44.810 --> 47:45.810
因为这个东西

47:45.810 --> 47:46.810
这个组件本来就很简单

47:46.810 --> 47:48.810
我是既然简单的话

47:48.810 --> 47:49.810
我们对照的官方文档看

47:49.810 --> 47:51.810
教大家组合去看这个文档

47:51.810 --> 47:52.810
cord

47:52.810 --> 47:54.810
它说这个函数被调用

47:54.810 --> 47:55.810
什么时候被调用呢

47:55.810 --> 47:57.810
cord

47:58.810 --> 47:59.810
它说什么呢

47:59.810 --> 48:01.810
当

48:01.810 --> 48:02.810
对这个dorm元素

48:02.810 --> 48:04.810
进行渐变的时候

48:04.810 --> 48:06.810
进行渐变的时候

48:06.810 --> 48:08.810
那么它会调用这个函数

48:08.810 --> 48:10.810
然后它会给你传一个什么呢

48:10.810 --> 48:12.810
传一个就是

48:12.810 --> 48:14.810
两个参数进来

48:14.810 --> 48:16.810
一个参数呢是load

48:16.810 --> 48:17.810
load是什么呢

48:17.810 --> 48:18.810
load就是个dorm

48:18.810 --> 48:19.810
看这个语意的话

48:19.810 --> 48:21.810
load表示的就是

48:21.810 --> 48:22.810
指的是dormload

48:22.810 --> 48:24.810
就是这个dorm对象

48:24.810 --> 48:26.810
就真实的动物对象

48:26.810 --> 48:28.810
然后呢有一个dorm callback

48:28.810 --> 48:30.810
callback

48:30.810 --> 48:31.810
那么咱们来看一下

48:31.810 --> 48:32.810
它什么意思

48:32.810 --> 48:34.810
我们把这个代码呢

48:34.810 --> 48:36.810
稍微自己写一下

48:36.810 --> 48:38.810
add and listen

48:38.810 --> 48:39.810
它会给我传两个东西

48:39.810 --> 48:40.810
一个load

48:40.810 --> 48:41.810
一个什么呢

48:41.810 --> 48:42.810
一个callback

48:42.810 --> 48:43.810
一个dorm

48:43.810 --> 48:44.810
这么一个函数

48:44.810 --> 48:45.810
当那个名字里随便去

48:45.810 --> 48:46.810
咱们呢

48:46.810 --> 48:48.810
就直接把输出看一下

48:48.810 --> 48:50.810
load

48:50.810 --> 48:52.810
dorm

48:52.810 --> 48:54.810
把输出保存

48:54.810 --> 48:55.810
看一下

48:55.810 --> 48:57.810
一开始这个状态

48:57.810 --> 48:59.810
然后点击投稿

48:59.810 --> 49:02.810
我们这里把时间放慢一点

49:02.810 --> 49:06.180
两秒钟

49:06.180 --> 49:07.180
两秒钟

49:07.180 --> 49:08.180
时间放慢一点

49:08.180 --> 49:09.180
看着啊

49:09.180 --> 49:11.180
投稿

49:11.180 --> 49:13.180
好完成

49:13.180 --> 49:14.180
那么你可以看到

49:14.180 --> 49:15.180
它这个输出

49:15.180 --> 49:17.180
它这个输出的顺序

49:17.180 --> 49:18.180
这一块呢

49:18.180 --> 49:19.180
这一块代码

49:19.180 --> 49:20.180
这一块代码

49:20.180 --> 49:21.180
是不是我们这里输出的

49:21.180 --> 49:22.180
对吧

49:22.180 --> 49:23.180
就这个函数的调用时间

49:23.180 --> 49:24.180
它的调用时间是什么样子呢

49:24.180 --> 49:26.180
你试验都试验得出来

49:26.180 --> 49:28.180
就是让它稳当说的

49:28.180 --> 49:29.180
什么时候调用呢

49:29.180 --> 49:31.180
当这个dorm元素

49:31.180 --> 49:33.180
正在渐变的时候

49:33.180 --> 49:34.180
它会调用

49:34.180 --> 49:35.180
正在渐变的时候

49:35.180 --> 49:36.180
就比如说

49:36.180 --> 49:38.180
你退出就是一个setting

49:38.180 --> 49:39.180
对吧

49:39.180 --> 49:41.180
把它的状态改成一个setting之后

49:41.180 --> 49:42.180
它会调用这个函数

49:42.180 --> 49:43.180
会调用这个函数

49:43.180 --> 49:44.180
好

49:44.180 --> 49:45.180
然后呢

49:45.180 --> 49:46.180
当进入的时候

49:46.180 --> 49:47.180
你看

49:47.180 --> 49:49.180
把它状态改为entering之后

49:49.180 --> 49:50.180
它会调用这个函数

49:50.180 --> 49:51.180
它会调用这个函数

49:51.180 --> 49:52.180
那么在这个函数里边

49:52.180 --> 49:53.180
你要干嘛

49:53.180 --> 49:55.180
你就随便你了

49:55.180 --> 49:56.180
你爱干嘛干嘛

49:56.180 --> 49:57.180
随便你

49:57.180 --> 49:58.180
随便你干嘛

49:59.180 --> 50:00.180
好

50:00.180 --> 50:02.180
那么当这个函数什么意思呢

50:02.180 --> 50:03.180
当这个函数什么意思呢

50:03.180 --> 50:04.180
那比方说

50:04.180 --> 50:06.180
它既然是个毁掉函数

50:06.180 --> 50:07.180
比方说我们在这里

50:07.180 --> 50:08.180
调用一下这个毁掉函数

50:08.180 --> 50:09.180
直接调用这个毁掉函数

50:09.180 --> 50:11.180
看一下会怎么样呢

50:11.180 --> 50:16.380
看到没

50:16.380 --> 50:17.380
再来

50:17.380 --> 50:18.380
有时候还没看清楚

50:18.380 --> 50:20.380
还不知道发生了什么事情

50:20.380 --> 50:21.380
再来 点击

50:23.380 --> 50:24.380
当这个函数干嘛用的

50:24.380 --> 50:26.380
虽然说这里的效果好像没变化

50:26.380 --> 50:27.380
但当这个函数干嘛用的

50:27.380 --> 50:29.380
是不是把它立即变成了

50:29.380 --> 50:31.380
结束状态了

50:31.380 --> 50:33.380
它就不等这个时间了

50:33.380 --> 50:34.380
不等这个时间了

50:34.380 --> 50:36.380
立即把它变成了结束状态

50:36.380 --> 50:37.380
再点击

50:37.380 --> 50:38.380
你看

50:38.380 --> 50:39.380
entered 是吧

50:39.380 --> 50:41.380
立即变成这个状态了

50:41.380 --> 50:42.380
对吧

50:42.380 --> 50:43.380
点击

50:45.380 --> 50:47.380
然后再点击

50:47.380 --> 50:49.380
立即把它变成entered的状态了

50:49.380 --> 50:50.380
就这么个意思

50:50.380 --> 50:52.380
当这个函数就起这么个作用

50:52.380 --> 50:53.380
就起这么个作用

50:53.380 --> 50:56.380
这个东西我都不用去记笔记

50:56.380 --> 50:59.380
我建议大家也不要去记笔记

50:59.380 --> 51:01.380
当里有一天

51:01.380 --> 51:02.380
因为这是第三方库

51:02.380 --> 51:04.380
第三方库还没有什么

51:04.380 --> 51:08.380
还没有什么那些复杂的原理

51:08.380 --> 51:11.380
也没有什么那些就是

51:11.380 --> 51:13.380
需要我们必须要支持掌握的

51:13.380 --> 51:15.380
经常要面试考证的东西

51:15.380 --> 51:16.380
不需要去记笔记

51:16.380 --> 51:18.380
我们要去理解它

51:18.380 --> 51:19.380
要去怎么

51:19.380 --> 51:21.380
就算我们忘了要知道怎么去看文档

51:21.380 --> 51:22.380
怎么去试验来得到结果

51:22.380 --> 51:25.380
当这个函数就是把它立即变成

51:25.380 --> 51:27.380
最终的状态

51:27.380 --> 51:28.380
就这么个意思

51:28.380 --> 51:30.380
这个函数你挨用就用

51:30.380 --> 51:31.380
不用拿到

51:31.380 --> 51:33.380
总之它提供这个函数

51:33.380 --> 51:34.380
比方说这里

51:34.380 --> 51:35.380
你就可以做一些事情

51:35.380 --> 51:37.380
因为你可以拿到这个动物对象

51:37.380 --> 51:39.380
可以拿到这个真实的动物对象

51:39.380 --> 51:41.380
那么这里你是不是可以做一些事情

51:41.380 --> 51:42.380
做什么事情

51:42.380 --> 51:43.380
挨做啥

51:43.380 --> 51:44.380
做啥

51:44.380 --> 51:45.380
比如说拿这个动物对象

51:45.380 --> 51:46.380
动物对象可以给它加上一个

51:46.380 --> 51:48.380
ADD event listener

51:48.380 --> 51:50.380
transition end

51:50.380 --> 51:51.380
当这个过度结束的时候

51:51.380 --> 51:53.380
我可能要做一些事情

51:53.380 --> 51:56.380
我这里就用那个建筑函数

51:56.380 --> 51:57.380
可能要做些事情

51:57.380 --> 51:59.380
这里比方说

51:59.380 --> 52:01.380
就直接打一个

52:01.380 --> 52:03.380
动画就是过度结束

52:03.380 --> 52:05.380
结束了

52:05.380 --> 52:06.380
保存

52:06.380 --> 52:07.380
你看一下

52:07.380 --> 52:10.380
这里变化

52:10.380 --> 52:11.380
过度结束了

52:11.380 --> 52:13.380
再变化

52:13.380 --> 52:14.380
过度结束了

52:14.380 --> 52:16.380
那为什么打印了两次

52:16.380 --> 52:18.380
因为它这个函数

52:18.380 --> 52:20.380
是不是会被多次调用

52:20.380 --> 52:21.380
多次调用过后

52:21.380 --> 52:22.380
你注册的时间

52:22.380 --> 52:23.380
是不是注册的越来越多

52:23.380 --> 52:24.380
越来越多

52:24.380 --> 52:25.380
那怎么办

52:25.380 --> 52:26.380
比如说

52:26.380 --> 52:28.380
如果说你要只注册一次的话

52:28.380 --> 52:29.380
那么你可以用个权具变量

52:29.380 --> 52:30.380
判断一下

52:30.380 --> 52:31.380
有没有注册过

52:31.380 --> 52:32.380
注册过就不要再注册了

52:32.380 --> 52:33.380
或者说你这里

52:33.380 --> 52:34.380
再加上一个第三个函数

52:34.380 --> 52:35.380
第三个函数

52:35.380 --> 52:36.380
里面不是一个彎

52:36.380 --> 52:37.380
对不对

52:37.380 --> 52:39.380
这个事件只运行一次

52:39.380 --> 52:40.380
把社会去

52:40.380 --> 52:42.380
表示这个事件只运行一次

52:42.380 --> 52:44.380
你可以做任何你想做的事情

52:44.380 --> 52:47.380
点击

52:47.380 --> 52:49.380
再点击

52:49.380 --> 52:50.380
你看一下

52:50.380 --> 52:51.380
是完事了

52:51.380 --> 52:52.380
对不对

52:52.380 --> 52:53.380
这就是

52:53.380 --> 52:56.380
agd and listener

52:56.380 --> 52:58.380
那么下面又有一些

52:58.380 --> 52:59.380
你想一想

52:59.380 --> 53:00.380
这些东西是什么

53:00.380 --> 53:01.380
是不是就是事件

53:01.380 --> 53:03.380
on enter

53:03.380 --> 53:04.380
当进入的时候

53:04.380 --> 53:05.380
它触发的事件

53:05.380 --> 53:06.380
在这个事件里面

53:06.380 --> 53:08.380
你可能会做一些事情

53:08.380 --> 53:10.380
你可能会做一些事情

53:10.380 --> 53:11.380
on enter这个事件里面

53:11.380 --> 53:13.380
它说什么呢

53:13.380 --> 53:14.380
它说

53:14.380 --> 53:16.380
在enter这个状态之前

53:16.380 --> 53:18.380
它会调用这个事件

53:18.380 --> 53:19.380
我们看到这个

53:19.380 --> 53:21.380
agd and listener

53:21.380 --> 53:22.380
它是在enter之后

53:22.380 --> 53:23.380
enter这个状态之后

53:23.380 --> 53:25.380
它会调用这个函数

53:25.380 --> 53:26.380
那么你这个函数

53:26.380 --> 53:27.380
如果你说你注册了

53:27.380 --> 53:29.380
它会在enter之前

53:29.380 --> 53:31.380
调用这个函数

53:31.380 --> 53:32.380
那么这个函数里边

53:32.380 --> 53:33.380
它会传两个函数

53:33.380 --> 53:36.380
一个是真实的动物对象

53:36.380 --> 53:37.380
你看它一表

53:37.380 --> 53:38.380
标出的类型是什么

53:38.380 --> 53:39.380
atm element

53:39.380 --> 53:40.380
是真实的动物对象

53:40.380 --> 53:41.380
另外一个

53:41.380 --> 53:42.380
表示的是

53:42.380 --> 53:43.380
这个是不是首次出现

53:43.380 --> 53:45.380
你看那个单词就明白了

53:45.380 --> 53:47.380
is a pairing

53:47.380 --> 53:50.380
是不是首次出现

53:50.380 --> 53:53.380
首次出现

53:53.380 --> 53:54.380
它这里解释了

53:54.380 --> 53:56.380
它说这个参数 is a pairing

53:56.380 --> 53:58.380
它说提供的参数呢

53:58.380 --> 53:59.380
它指定的是

53:59.380 --> 54:01.380
是否这个enter stage

54:01.380 --> 54:03.380
就是这个进入状态

54:03.380 --> 54:07.380
发生在初始化阶段

54:07.380 --> 54:08.380
是这么个意思

54:08.380 --> 54:09.380
on enter

54:09.380 --> 54:11.380
on entering这个事件

54:11.380 --> 54:12.380
on entering这个事件

54:12.380 --> 54:13.380
它是什么呢

54:13.380 --> 54:16.380
在after entering这个状态之后

54:16.380 --> 54:18.380
应用了这个entering状态之后

54:18.380 --> 54:19.380
它会触发这个事件

54:19.380 --> 54:21.380
就是一些钩子函数

54:21.380 --> 54:23.380
如果你学过5u的话

54:23.380 --> 54:25.380
大概明白它的什么意思了

54:25.380 --> 54:27.380
这个相当于是before enter

54:27.380 --> 54:30.380
这是after enter对不对

54:30.380 --> 54:32.380
然后呢这个

54:32.380 --> 54:33.380
on enter

54:33.380 --> 54:35.380
on enter的事件是什么

54:35.380 --> 54:37.380
它是在enter的这个状态触发

54:37.380 --> 54:40.380
变成这个状态之后触发这个事件

54:40.380 --> 54:41.380
同样的

54:41.380 --> 54:42.380
on一個city

54:42.380 --> 54:43.380
一个cs

54:43.380 --> 54:44.380
on一個city

54:44.380 --> 54:46.380
一个city的是一样的道理

54:46.380 --> 54:47.380
对不对

54:47.380 --> 54:48.380
好

54:48.380 --> 54:50.380
这就是关于这么一些钩子函数

54:50.380 --> 54:52.380
当这个钩子函数你拿过来要干嘛

54:52.380 --> 54:53.380
随便你

54:53.380 --> 54:54.380
ok

54:54.380 --> 54:55.380
其实我说了讲一些重点

54:55.380 --> 54:56.380
其实都讲完了

54:56.380 --> 54:57.380
对吧

54:57.380 --> 54:58.380
没啥好说的

54:58.380 --> 55:00.380
这个是一个非常非常简单的

55:00.380 --> 55:01.380
tracing组建

55:01.380 --> 55:02.380
这个组建我们平时

55:02.380 --> 55:04.380
如果说用这个第三方库

55:04.380 --> 55:06.380
regards tracing group的话

55:06.380 --> 55:08.380
基本上不太会用到它

55:08.380 --> 55:10.380
但是我之所以要讲它

55:10.380 --> 55:11.380
第一呢

55:11.380 --> 55:13.380
后边的这些组建跟它都有关系

55:13.380 --> 55:16.380
或者说都是利用它来实现的

55:16.380 --> 55:18.380
另外我通过这样讲这个组建

55:18.380 --> 55:20.380
告诉大家怎么去看这个文档

55:20.380 --> 55:21.380
就此一节课

55:21.380 --> 55:22.380
后边我就直接说了

55:22.380 --> 55:24.380
我就直接说怎么去用了

55:24.380 --> 55:25.380
我就此一节课

55:25.380 --> 55:26.380
我讲通过这个组建

55:26.380 --> 55:28.380
告诉大家怎么去看这个文档

55:28.380 --> 55:29.380
怎么去猜测它的意思

55:29.380 --> 55:31.380
怎么去试验

55:31.380 --> 55:34.380
这是关于tracing这个组建

55:34.380 --> 55:35.380
那么学校的组建之后

55:35.380 --> 55:36.380
我们后边的课程

55:36.380 --> 55:38.380
后边的就是关于动画的课程

55:38.380 --> 55:39.380
就很简单了

55:39.380 --> 55:40.380
就是具体怎么去使用

55:40.380 --> 55:42.380
学习它的API就完事了

55:42.380 --> 55:44.380
它基本上都是利用它来去实现的

55:44.380 --> 55:45.380
好吧

55:45.380 --> 55:47.380
这是关于这个tracing组建

