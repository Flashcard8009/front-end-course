WEBVTT

00:00.750 --> 00:08.150
这节课我们首先把登录功能和退出功能给它做了

00:08.150 --> 00:11.150
因为登录这一块没有远程的API

00:11.150 --> 00:16.650
所以说我们只能按照我们刚才写的笔记去模拟一下

00:16.650 --> 00:21.650
我们这里 张浩如果是儿童兵 密码如果是等于这个也不要登成功

00:21.650 --> 00:23.150
我们来模拟一下

00:23.150 --> 00:26.350
那么这里边肯定设计到数据 也设计到组件

00:26.350 --> 00:28.350
我们先把组件写了

00:28.450 --> 00:33.450
我们先把组件写了 写了之后我们再去写数据

00:33.450 --> 00:36.050
我们这里首先到组件里边 给它加一个组件

00:36.050 --> 00:38.690
就locking

00:38.690 --> 00:42.190
locking phone 登录表单组件

00:42.190 --> 00:44.190
这里边我们新建个页面

00:44.190 --> 00:45.590
新建个组件

00:45.590 --> 00:47.290
RF

00:47.290 --> 00:48.090
这个建哪呢?

00:48.090 --> 00:49.590
RFC吧

00:49.590 --> 00:52.090
你也适用一个韩数组件吧

00:52.090 --> 00:53.490
然后这里一个DIV

00:53.490 --> 00:56.190
然后我们就写简单一点 尽量写简单一点

00:56.290 --> 00:58.190
DIV item

00:59.390 --> 01:00.590
form item

01:00.590 --> 01:03.090
就item

01:03.090 --> 01:04.790
很那样 我们都先不写

01:04.790 --> 01:09.490
直接先写个DIV 每一项登录项有一个label

01:09.490 --> 01:10.790
label

01:10.790 --> 01:12.390
这个东西都不要了

01:12.390 --> 01:14.990
这个是张浩

01:14.990 --> 01:17.090
然后后面有一个input元素

01:17.090 --> 01:19.490
这里是张浩

01:19.490 --> 01:20.590
DIV

01:20.590 --> 01:22.290
然后label

01:22.290 --> 01:25.990
这里是密码

01:25.990 --> 01:27.990
然后一个input元素

01:27.990 --> 01:29.990
type password

01:29.990 --> 01:31.190
密码

01:33.790 --> 01:36.190
这里都不要了

01:36.190 --> 01:37.990
好 下面就一个按钮

01:37.990 --> 01:38.790
就一个按钮

01:38.790 --> 01:39.890
DIV

01:39.890 --> 01:40.790
button

01:40.790 --> 01:42.490
登录

01:42.490 --> 01:44.090
行了 就这么玩

01:44.090 --> 01:45.590
咱们把它应用进去吧

01:45.590 --> 01:47.190
我们到配级室里边

01:47.190 --> 01:48.790
locking里边不是有登录页吗

01:48.790 --> 01:49.390
对不对

01:49.390 --> 01:51.990
登录页 我们这里把它应用进去

01:52.190 --> 01:56.190
我们这里给它写上这么一个

01:56.190 --> 01:56.990
导入进来

01:56.990 --> 01:59.190
导入从component里面导入进来

01:59.190 --> 02:02.700
locking这个组件

02:02.700 --> 02:05.700
这里导入component

02:05.700 --> 02:07.100
locking phone

02:07.100 --> 02:08.300
locking phone

02:08.300 --> 02:09.300
导入这个组件

02:09.300 --> 02:11.400
OK 我们应用进去玩笑了

02:11.400 --> 02:12.300
走吧

02:14.300 --> 02:15.900
好 那么这个组件里边

02:15.900 --> 02:17.500
我们来看一下 看一下效果

02:19.100 --> 02:19.500
locking

02:21.300 --> 02:23.000
目前是这个样子

02:23.000 --> 02:24.200
很丑

02:24.200 --> 02:25.600
稍微的设置一下吧

02:25.600 --> 02:26.800
我现在就快速设置了

02:26.800 --> 02:28.600
这个东西央视这一块的话

02:28.600 --> 02:29.600
你们自行搞定

02:29.600 --> 02:30.800
自行搞定

02:30.800 --> 02:34.200
这里边我们写上一个css样式

02:34.200 --> 02:36.400
首先给它写上一个那样式

02:36.400 --> 02:36.800
locking

02:40.400 --> 02:42.600
然后这个那样式应用进来

02:42.600 --> 02:43.800
import

02:43.800 --> 02:44.400
locking

02:44.400 --> 02:45.800
stiles

02:45.800 --> 02:48.200
from

02:48.200 --> 02:48.800
locking

02:48.800 --> 02:50.600
css

02:50.600 --> 02:52.000
当然这个style是个名字

02:52.000 --> 02:53.600
这样你可以随便写

02:53.600 --> 02:55.800
这个不影响什么

02:55.800 --> 02:57.600
class name

02:57.600 --> 02:58.200
stiles

02:58.200 --> 03:00.000
locking

03:00.000 --> 03:02.000
然后这里写上个啥呢

03:02.000 --> 03:03.000
我想想

03:03.000 --> 03:04.600
整个这个区域的话

03:04.600 --> 03:06.000
诶

03:06.000 --> 03:07.000
这什么

03:07.000 --> 03:08.200
他说什么

03:08.200 --> 03:09.800
他说找不到这个模块

03:09.800 --> 03:11.000
locking css

03:11.000 --> 03:13.000
哦 我这里写错了

03:13.000 --> 03:14.600
这里应该写上index这个设置

03:14.600 --> 03:15.100
css

03:15.100 --> 03:17.000
是吧

03:17.000 --> 03:20.580
好 然后

03:20.580 --> 03:21.980
OK 没问题

03:21.980 --> 03:24.180
然后我们这里能让他居中

03:24.180 --> 03:26.580
我们把整个div让他居中

03:26.580 --> 03:27.180
居中的话

03:27.180 --> 03:29.380
我们把它设置为placing fixed

03:29.380 --> 03:31.380
把这样子设置

03:31.380 --> 03:32.980
然后再设置

03:32.980 --> 03:34.980
left 50%

03:34.980 --> 03:36.580
top 50%

03:36.580 --> 03:38.380
然后transform

03:38.380 --> 03:39.380
transnet

03:39.380 --> 03:40.980
附的50%

03:40.980 --> 03:42.180
附的50%

03:42.180 --> 03:45.730
OK 让他居中

03:45.730 --> 03:46.930
OK

03:46.930 --> 03:48.930
啊 居中了

03:48.930 --> 03:50.530
然后我们再设置一下

03:50.530 --> 03:53.130
这个locking下面的这些文本框

03:53.130 --> 03:55.130
文本框input元素

03:55.130 --> 03:56.130
input元素的话

03:56.130 --> 03:57.330
给他一个宽度

03:57.330 --> 03:58.130
宽度的话

03:58.130 --> 04:00.330
统一为300个相数

04:00.330 --> 04:01.130
高度的话

04:01.130 --> 04:04.130
统一为35个相数

04:04.130 --> 04:06.130
OK 我们看一下啊

04:06.130 --> 04:08.130
诶 差不多有这么个意思的啊

04:08.130 --> 04:09.130
有这么个意思的

04:09.130 --> 04:09.930
稍微设置一下

04:09.930 --> 04:10.730
快速的设置

04:10.730 --> 04:12.330
border radius 5个相数

04:12.330 --> 04:13.730
outline

04:13.730 --> 04:16.560
not

04:16.560 --> 04:17.160
好

04:17.160 --> 04:18.560
然后再设个border

04:18.560 --> 04:19.360
border

04:19.360 --> 04:20.160
一个相数

04:20.160 --> 04:24.270
solid css

04:24.270 --> 04:24.870
好

04:24.870 --> 04:26.470
然后再设置一个pending

04:26.470 --> 04:27.070
pending的话

04:27.070 --> 04:27.670
上下为0

04:27.670 --> 04:31.240
左右为10个相数

04:31.240 --> 04:32.040
好 差不多

04:32.040 --> 04:33.640
然后再设置一下fone size

04:33.640 --> 04:38.040
14个相数

04:38.040 --> 04:38.640
好 差不多

04:38.640 --> 04:39.640
啊 差不多

04:39.640 --> 04:39.840
啊

04:39.840 --> 04:40.240
然后呢

04:40.240 --> 04:41.240
这个locking下面呢

04:41.240 --> 04:42.440
我们再设置一下

04:42.440 --> 04:43.040
他的

04:43.040 --> 04:44.040
再写一个那样式啊

04:44.040 --> 04:44.640
item

04:44.640 --> 04:46.440
就每一个表单元素

04:46.440 --> 04:47.640
每一个表单项

04:47.640 --> 04:49.040
class name

04:49.040 --> 04:50.440
styles

04:50.440 --> 04:52.240
item

04:52.240 --> 04:52.840
啊

04:52.840 --> 04:53.440
OK

04:53.440 --> 04:54.240
我们这里呢

04:54.240 --> 04:55.240
再写上这个

04:55.240 --> 04:56.440
再写上这个

04:56.440 --> 04:56.840
然后呢

04:56.840 --> 04:58.640
让他上下时间有点距离

04:58.840 --> 04:59.440
margin

04:59.440 --> 05:00.240
上下之间呢

05:00.240 --> 05:01.440
有15个相数

05:01.440 --> 05:02.240
左右为0

05:04.040 --> 05:05.040
好 差不多了啊

05:05.040 --> 05:06.440
然后接下来是按钮啊

05:06.440 --> 05:07.240
按钮

05:07.240 --> 05:08.240
这个item下面呢

05:08.240 --> 05:09.040
有按钮

05:10.440 --> 05:11.240
button

05:11.240 --> 05:12.240
如果说有按钮的话

05:12.240 --> 05:13.840
我们把按钮的宽度呢

05:13.840 --> 05:14.640
稍微百分之百

05:14.640 --> 05:16.840
包括sizing border box

05:16.840 --> 05:18.640
然后border

05:18.640 --> 05:19.640
一个相数

05:19.640 --> 05:24.800
solid css

05:24.800 --> 05:25.600
差不多

05:25.600 --> 05:27.200
差不多有什么意思

05:27.200 --> 05:29.200
按钮的话

05:31.000 --> 05:32.200
我想想啊

05:32.200 --> 05:33.200
就就这样吧

05:33.200 --> 05:33.600
就这样

05:33.600 --> 05:34.200
差不多

05:34.200 --> 05:35.000
然后高度的话

05:35.000 --> 05:37.400
我们给他设置为40个相数

05:37.400 --> 05:38.600
land height

05:38.600 --> 05:39.000
land height

05:39.000 --> 05:39.600
不用设置了

05:39.600 --> 05:40.800
found size

05:40.800 --> 05:43.640
20mm

05:43.640 --> 05:44.840
20mm太多了

05:44.840 --> 05:45.640
1.3

05:45.640 --> 05:47.240
4.1

05:47.840 --> 05:48.640
然后呢

05:48.640 --> 05:51.240
cursor pointer

05:51.240 --> 05:54.040
border radius

05:54.040 --> 05:57.460
4个相数

05:57.460 --> 05:58.660
好

05:58.660 --> 05:59.660
再还设置个啥呢

05:59.660 --> 06:00.860
设置个背景颜色吧

06:00.860 --> 06:02.060
byground

06:03.060 --> 06:05.260
1008c8c

06:05.260 --> 06:06.260
随便设置一个

06:06.260 --> 06:10.400
color ff

06:10.400 --> 06:10.600
好

06:10.600 --> 06:11.600
差不多了

06:11.600 --> 06:12.800
要把outline去掉

06:12.800 --> 06:14.000
outline

06:14.000 --> 06:17.790
好

06:17.790 --> 06:18.790
差不多有这么意思的

06:18.790 --> 06:20.390
有这么意思的

06:20.390 --> 06:20.990
就这样吧

06:20.990 --> 06:21.590
就这样

06:21.590 --> 06:23.790
随便写个就得了

06:23.790 --> 06:24.990
那么这是登录

06:24.990 --> 06:27.990
登录我们的组件里边

06:27.990 --> 06:29.590
我们现在研究一下

06:29.590 --> 06:31.190
这个组件里边呢

06:31.190 --> 06:32.790
他肯定要触发一些事件

06:32.790 --> 06:33.990
就是点击登录的时候

06:33.990 --> 06:34.990
要触发一些事件

06:34.990 --> 06:35.390
对吧

06:35.390 --> 06:36.390
要触发一些事件

06:36.390 --> 06:36.790
OK

06:36.790 --> 06:37.990
我们这里登录的时候

06:37.990 --> 06:39.790
不是有一个unclick吗

06:39.790 --> 06:40.990
点击过后

06:40.990 --> 06:41.790
我们要干嘛

06:41.790 --> 06:43.990
是不是要得到这些文笨框的一些东西

06:43.990 --> 06:44.590
对吧

06:44.590 --> 06:45.790
把这文笨框的东西拿到

06:45.790 --> 06:47.190
来触发一些事件

06:47.190 --> 06:48.790
来触发一些事件

06:48.790 --> 06:49.190
好

06:49.190 --> 06:49.790
来吧

06:51.590 --> 06:53.190
我们这里unclick

06:53.190 --> 06:54.390
是不是要触发事件

06:54.390 --> 06:54.590
好

06:54.590 --> 06:55.390
那么这个事件里边

06:55.390 --> 06:57.190
是不是要拿到这个文笨框的纸

06:57.190 --> 06:57.390
好

06:57.390 --> 06:58.590
我们这里要干嘛

06:58.590 --> 07:01.190
是不是要用用到UseRef

07:01.190 --> 07:01.790
对吧

07:01.790 --> 07:03.190
UseRef

07:03.190 --> 07:04.190
要用到这个

07:04.190 --> 07:04.390
好

07:04.390 --> 07:04.790
这里呢

07:04.790 --> 07:05.990
我们写上几个变量

07:06.190 --> 07:06.990
一个是

07:08.790 --> 07:10.790
TST Locking ID

07:10.790 --> 07:11.590
啊

07:11.590 --> 07:12.390
等于什么呢

07:12.390 --> 07:14.590
等于UseRef

07:14.590 --> 07:15.890
这是一个

07:15.890 --> 07:16.690
再来一个

07:16.690 --> 07:17.390
两个

07:17.390 --> 07:19.890
TST Locking Password

07:19.890 --> 07:20.890
啊两个

07:20.890 --> 07:21.090
好

07:21.090 --> 07:21.490
来吧

07:21.490 --> 07:23.790
这里加上一个Ref

07:23.790 --> 07:27.420
TST Locking ID

07:27.420 --> 07:27.920
好

07:27.920 --> 07:28.820
这是

07:28.820 --> 07:32.420
TST Locking Password

07:32.420 --> 07:34.320
加上这么两个

07:34.320 --> 07:34.520
好

07:34.520 --> 07:35.420
加上两个过后呢

07:35.420 --> 07:36.320
我们登录的时候

07:36.320 --> 07:38.320
是不是要获取到这两个文笨框的纸

07:38.320 --> 07:38.520
好

07:38.520 --> 07:39.520
一个来啊

07:39.520 --> 07:40.920
一个是Locking ID

07:40.920 --> 07:43.120
是不是来自于TST Locking ID的

07:43.120 --> 07:44.920
Corrent.value

07:44.920 --> 07:45.120
好

07:45.120 --> 07:46.920
一个是Locking Password

07:46.920 --> 07:48.920
是不是来自于TST Locking Password的

07:48.920 --> 07:50.320
Corrent.value

07:50.320 --> 07:50.520
对吧

07:50.520 --> 07:51.320
我们输出一下

07:51.320 --> 07:52.720
Locking ID

07:52.720 --> 07:54.520
Locking Password

07:54.520 --> 07:55.620
输出一下

07:55.620 --> 07:57.120
保存

07:57.120 --> 07:58.220
咱们看一下

07:58.220 --> 07:59.620
右键检查

07:59.620 --> 08:00.320
控制台里边

08:02.520 --> 08:03.720
账号随便写个

08:03.720 --> 08:04.920
密码随便写个

08:04.920 --> 08:05.420
登录

08:05.420 --> 08:06.420
你看账号密码

08:06.420 --> 08:07.720
是不是全部得到了

08:07.720 --> 08:07.920
好

08:07.920 --> 08:08.320
这里呢

08:08.320 --> 08:09.720
我们触发视线

08:09.720 --> 08:11.020
咱们来触发视线

08:11.020 --> 08:11.220
好

08:11.220 --> 08:12.520
触发视线的话

08:12.520 --> 08:14.220
我们这里就可以使用

08:16.920 --> 08:18.220
Props里边

08:18.220 --> 08:19.720
给我传递一个事件进来

08:19.720 --> 08:22.840
Props

08:22.840 --> 08:23.540
这里边

08:23.540 --> 08:25.140
我们这样写Props

08:25.140 --> 08:26.440
Locking

08:26.440 --> 08:27.240
当登录的时候

08:27.240 --> 08:28.540
触发的事件

08:28.540 --> 08:28.840
有吗

08:28.840 --> 08:29.740
你给我传着吗

08:29.740 --> 08:30.440
如果传了

08:30.440 --> 08:33.140
我就会帮你运行这个事件

08:33.140 --> 08:34.140
Locking

08:34.140 --> 08:36.440
把Locking ID传进去

08:37.440 --> 08:38.440
就会运行这个事件

08:38.440 --> 08:39.440
就这么简单

08:39.440 --> 08:40.440
就没了

08:40.440 --> 08:41.440
没了

08:41.440 --> 08:42.440
没问题吧

08:42.440 --> 08:43.440
这就是登录这个组件

08:43.440 --> 08:44.440
是不是写完了

08:44.440 --> 08:45.440
好

08:45.440 --> 08:47.440
那么现在我们需要有数据

08:47.440 --> 08:49.440
已经能够处理这个事件的程序

08:49.440 --> 08:50.440
那么是不是要一代数据

08:50.440 --> 08:51.440
OK

08:51.440 --> 08:52.440
我们要这里的话

08:52.440 --> 08:53.440
会一代这个数据

08:53.440 --> 08:54.440
好

08:54.440 --> 08:55.440
因此我们会在这里呢

08:55.440 --> 08:57.440
建立这么一个model

08:57.440 --> 08:59.440
建立这么一个模型

08:59.440 --> 09:02.440
SRC里边建立模型

09:02.440 --> 09:05.440
这里我为什么把它建立成区域

09:05.440 --> 09:07.440
把它建立成全局模型的

09:07.440 --> 09:09.440
因为登录这个信息

09:09.440 --> 09:11.440
是可能会全局都要使用的

09:11.440 --> 09:12.440
比方说你删除了一个学生

09:12.440 --> 09:13.440
是谁删除的

09:13.440 --> 09:15.440
是当前登录用互续删除的

09:15.440 --> 09:17.440
那么如果说这个操作要记

09:17.440 --> 09:18.440
要做记录的话

09:18.440 --> 09:20.440
是不是也需要依赖这个数据

09:20.440 --> 09:21.440
所以这个数据

09:21.440 --> 09:23.440
我们把它作为全局的来使用

09:23.440 --> 09:24.440
model

09:26.440 --> 09:28.440
是model时还是model

09:28.440 --> 09:29.440
忘了

09:29.440 --> 09:30.440
我看一下

09:30.440 --> 09:32.440
看一下它的约定

09:32.440 --> 09:33.440
5米

09:33.440 --> 09:37.000
看一下那个目录级约定

09:37.000 --> 09:39.000
有一个model

09:39.000 --> 09:40.000
这下面

09:40.000 --> 09:42.000
又是5米的地方

09:44.000 --> 09:48.920
model

09:48.920 --> 09:49.920
我看一下

09:49.920 --> 09:50.920
models

09:50.920 --> 09:51.920
不对

09:51.920 --> 09:56.570
这是

09:56.570 --> 09:58.570
models

09:58.570 --> 09:59.570
加S的

09:59.570 --> 10:00.570
那么这里边

10:00.570 --> 10:01.570
我们写上一个模型

10:01.570 --> 10:03.570
就是登录的用户

10:03.570 --> 10:05.570
locking user

10:05.570 --> 10:07.570
locking user叫JS

10:07.570 --> 10:08.570
登录用户

10:08.570 --> 10:09.570
形容这么一个模型

10:09.570 --> 10:10.570
导出什么

10:10.570 --> 10:12.570
是不是导出一个低瓦格式

10:12.570 --> 10:13.570
低瓦格式的配置

10:13.570 --> 10:15.570
我们这里导出State

10:15.570 --> 10:17.570
它的默认

10:17.570 --> 10:18.570
命名空间就不用写了

10:18.570 --> 10:19.570
因为命名空间的名字

10:19.570 --> 10:20.570
跟文件的名字

10:20.570 --> 10:21.570
默认是一字的

10:21.570 --> 10:22.570
所以就不用写了

10:22.570 --> 10:24.570
那么状态

10:24.570 --> 10:25.570
登录的状态

10:25.570 --> 10:26.570
默认为

10:26.570 --> 10:27.570
lock

10:27.570 --> 10:28.570
默认为

10:28.570 --> 10:29.570
lock

10:29.570 --> 10:30.570
表示

10:30.570 --> 10:31.570
默认为

10:31.570 --> 10:32.570
lock

10:32.570 --> 10:33.570
表示

10:33.570 --> 10:35.570
没有任何

10:35.570 --> 10:36.570
用户登录

10:36.570 --> 10:38.570
没有任何用户登录

10:38.570 --> 10:40.570
不要这意思吧

10:40.570 --> 10:42.570
然后我们这里

10:42.570 --> 10:44.570
有一些reducers

10:44.570 --> 10:46.570
reducers

10:46.570 --> 10:47.570
就是我们要改变

10:47.570 --> 10:48.570
这个状态

10:48.570 --> 10:49.570
改变这个状态

10:49.570 --> 10:50.570
首先你改

10:50.570 --> 10:52.570
第一个改变的就是

10:52.570 --> 10:53.570
要

10:53.570 --> 10:54.570
就是把它变成

10:54.570 --> 10:56.570
以登录的状态

10:56.570 --> 10:57.570
set

10:57.570 --> 10:59.570
locking user

10:59.570 --> 11:00.570
那么你给我传一个

11:00.570 --> 11:02.570
传一个locking ID

11:02.570 --> 11:03.570
你给我传一个

11:03.570 --> 11:04.570
locking password的

11:04.570 --> 11:05.570
我干嘛呢

11:06.570 --> 11:07.570
这是reducer

11:07.570 --> 11:08.570
我干嘛呢

11:08.570 --> 11:09.570
set

11:10.570 --> 11:11.570
你把这个locking ID

11:11.570 --> 11:12.570
和locking password的

11:12.570 --> 11:13.570
就是账号和密码

11:13.570 --> 11:14.570
作为复杂

11:14.570 --> 11:15.570
加到这个

11:15.570 --> 11:16.570
x里边来

11:16.570 --> 11:17.570
加进来过后

11:17.570 --> 11:18.570
我状态自然

11:18.570 --> 11:19.570
给你改了

11:19.570 --> 11:20.570
改成什么状态呢

11:20.570 --> 11:21.570
返回一个新的状态

11:21.570 --> 11:23.570
locking ID

11:23.570 --> 11:24.570
为什么呢

11:24.570 --> 11:26.570
为x的payload里边的

11:26.570 --> 11:27.570
locking ID

11:27.570 --> 11:29.570
locking password的

11:29.570 --> 11:30.570
为什么

11:30.570 --> 11:32.570
x的payload

11:32.570 --> 11:34.570
locking password

11:34.570 --> 11:35.570
locking password的

11:35.570 --> 11:36.570
就这样干

11:36.570 --> 11:38.570
简单处理一下就完事了

11:38.570 --> 11:39.570
这是登录用户

11:39.570 --> 11:40.570
当然呢

11:40.570 --> 11:41.570
我们可能在仓库里边

11:41.570 --> 11:42.570
不需要记录密码

11:42.570 --> 11:44.570
我们一般也不太会记录密码

11:44.570 --> 11:45.570
所以说我们只需要

11:45.570 --> 11:46.570
得到一个locking ID就完事了

11:46.570 --> 11:47.570
就这样吧

11:47.570 --> 11:49.570
直接返回这个x里边的

11:49.570 --> 11:51.570
payload里边的

11:51.570 --> 11:52.570
locking ID

11:52.570 --> 11:54.570
我们直接把你的locking ID

11:54.570 --> 11:55.570
拿出来

11:55.570 --> 11:56.570
作为新的状态

11:56.570 --> 11:57.570
这是reducer

11:57.570 --> 11:58.570
它会导致状态发生变化

11:58.570 --> 12:00.570
那么有没有副作用呢

12:00.570 --> 12:01.570
肯定有副作用

12:01.570 --> 12:02.570
而fagots

12:02.570 --> 12:03.570
有哪些副作用呢

12:04.570 --> 12:06.570
副作用里边是不是要

12:06.570 --> 12:07.570
登录

12:07.570 --> 12:08.570
叫登录

12:08.570 --> 12:09.570
locking

12:09.570 --> 12:11.570
那么它应该是个什么

12:11.570 --> 12:12.570
应该是一个

12:15.570 --> 12:17.570
它应该是一个就是generator

12:17.570 --> 12:19.570
是一个generator

12:19.570 --> 12:21.570
那么这个locking里边

12:21.570 --> 12:22.570
要给我传啥呢

12:22.570 --> 12:24.570
这里边有什么东西要传

12:24.570 --> 12:25.570
要传的过来

12:25.570 --> 12:26.570
是不是第1个

12:26.570 --> 12:27.570
action要得到

12:27.570 --> 12:28.570
还有第2个是不是

12:28.570 --> 12:30.570
各种Saga而fags

12:30.570 --> 12:32.570
Saga而fags

12:32.570 --> 12:33.570
那么这里边

12:33.570 --> 12:34.570
你可以进行解构

12:34.570 --> 12:35.570
不要解构一个put

12:35.570 --> 12:36.570
解构什么delay

12:36.570 --> 12:37.570
这些东西

12:37.570 --> 12:38.570
你可以自行解构

12:38.570 --> 12:39.570
好吧

12:39.570 --> 12:40.570
OK

12:40.570 --> 12:41.570
我们这里

12:41.570 --> 12:42.570
当然

12:42.570 --> 12:43.570
比方我们登录的时候

12:43.570 --> 12:44.570
你要告诉我啥呢

12:44.570 --> 12:45.570
是不是action拿过来

12:45.570 --> 12:46.570
OK action里边

12:46.570 --> 12:48.570
需要拿一个登录账号和密码

12:48.570 --> 12:49.570
对吧

12:49.570 --> 12:50.570
你在出发这个副作用

12:50.570 --> 12:51.570
这个操作的时候

12:51.570 --> 12:53.570
你要给我一个账号和密码

12:53.570 --> 12:54.570
账号密码的话

12:54.570 --> 12:55.570
我们在这里进行解构

12:55.570 --> 12:56.570
payload的

12:57.570 --> 12:59.570
我们在这里进行解构

12:59.570 --> 13:00.570
就是

13:00.570 --> 13:01.570
locking ID

13:01.570 --> 13:03.570
locking password的

13:03.570 --> 13:05.570
你要通过payload的给我传过来

13:05.570 --> 13:07.570
从payload里面解构出来

13:07.570 --> 13:09.570
好解构了账号密码过后

13:09.570 --> 13:11.570
我要判断账号密码是否正确

13:11.570 --> 13:12.570
对吧

13:12.570 --> 13:13.570
要判断是否正确

13:13.570 --> 13:14.570
那么我们这里怎么判断呢

13:14.570 --> 13:15.570
是不是要远程

13:15.570 --> 13:16.570
阿迦克斯请求

13:16.570 --> 13:18.570
但是我这里没有阿迦克斯请求

13:18.570 --> 13:19.570
没有

13:19.570 --> 13:21.570
没有咋办呢

13:21.570 --> 13:23.570
没有这个阿迦克斯请求咋办呢

13:23.570 --> 13:25.570
我是不是就魔力就完事了

13:25.570 --> 13:27.570
我们这里直接魔力就完事了

13:27.570 --> 13:30.570
比方说我们这里在

13:30.570 --> 13:31.570
直接判断

13:31.570 --> 13:33.570
如果说你locking ID

13:33.570 --> 13:34.570
等于了什么

13:34.570 --> 13:36.570
等于了ardmin

13:36.570 --> 13:37.570
我们刚才说的

13:37.570 --> 13:39.570
然后locking password的

13:39.570 --> 13:40.570
等于了什么

13:40.570 --> 13:41.570
等于了123123

13:41.570 --> 13:43.570
那么是不是登录成功

13:43.570 --> 13:47.080
登录成功

13:47.080 --> 13:48.080
好登录从干嘛

13:48.080 --> 13:50.080
是不是要触发这个x

13:50.080 --> 13:51.080
对吧触发这个x

13:51.080 --> 13:52.080
好我们这里

13:52.080 --> 13:53.080
使用什么

13:53.080 --> 13:55.080
使用那个put

13:55.080 --> 13:57.080
ield

13:57.080 --> 13:58.080
put

13:58.080 --> 14:00.080
触发x

14:00.080 --> 14:02.080
触发什么x呢

14:02.080 --> 14:03.080
x的名称就这个

14:03.080 --> 14:04.080
对吧

14:04.080 --> 14:05.080
x的名称type

14:05.080 --> 14:06.080
就这个

14:06.080 --> 14:07.080
x的名称

14:07.080 --> 14:08.080
好然后呢

14:08.080 --> 14:10.080
给它的payload

14:10.080 --> 14:11.080
就是x

14:11.080 --> 14:13.080
里边是个对象

14:13.080 --> 14:15.080
它的

14:15.080 --> 14:17.080
这个payload

14:17.080 --> 14:18.080
payload

14:18.080 --> 14:19.080
payload是啥

14:19.080 --> 14:20.080
是不是一个账号

14:20.080 --> 14:21.080
传过去完事了

14:21.080 --> 14:22.080
咱们把locking id

14:22.080 --> 14:24.080
作为账号传过去完事了

14:24.080 --> 14:25.080
我们这里都不需要这个

14:25.080 --> 14:26.080
locking id了

14:26.080 --> 14:28.080
你直接通过payload

14:28.080 --> 14:29.080
通过payload

14:30.080 --> 14:31.080
传递

14:31.080 --> 14:33.080
登录成功的账号

14:33.080 --> 14:36.520
我们直接把账号

14:36.520 --> 14:37.520
放到payload里边

14:37.520 --> 14:38.520
传过去完事了

14:38.520 --> 14:40.520
就登录成功

14:40.520 --> 14:42.520
好如果说登录失败呢

14:42.520 --> 14:44.520
如果说登录失败呢

14:44.520 --> 14:45.520
l

14:45.520 --> 14:47.520
那么我们是不是要把它设置为null

14:47.520 --> 14:48.520
对吧

14:48.520 --> 14:49.520
put

14:49.520 --> 14:50.520
登录失败

14:50.520 --> 14:51.520
我们把它设置为null

14:51.520 --> 14:53.520
payload的

14:53.520 --> 14:55.520
把它设置为null

14:55.520 --> 14:56.520
所以完了

14:56.520 --> 14:57.520
你看呀

14:57.520 --> 14:59.520
登录功能是不是做完了

14:59.520 --> 15:00.520
对吧

15:00.520 --> 15:01.520
然后了登录成功之后

15:01.520 --> 15:02.520
无非我们

15:02.520 --> 15:03.520
无非我们还要做一件事

15:03.520 --> 15:04.520
就是使用local storage

15:04.520 --> 15:06.520
把它存到那个

15:06.520 --> 15:07.520
这副作用

15:07.520 --> 15:09.520
存到那个就是

15:09.520 --> 15:10.520
本地存处里边

15:10.520 --> 15:12.520
本地存处里边

15:12.520 --> 15:13.520
local storage

15:13.520 --> 15:14.520
set item

15:14.520 --> 15:17.520
我们把它设置为

15:17.520 --> 15:18.520
什么呢

15:18.520 --> 15:20.520
就是locking id

15:21.520 --> 15:22.520
value呢

15:22.520 --> 15:23.520
就为locking id

15:23.520 --> 15:24.520
对吧

15:24.520 --> 15:25.520
把设置进去

15:25.520 --> 15:27.520
存到本地存处里边

15:27.520 --> 15:28.520
如果说登录失败呢

15:28.520 --> 15:29.520
登录失败

15:29.520 --> 15:31.520
我们可以不用动它嘛

15:31.520 --> 15:32.520
甚至登录成功

15:32.520 --> 15:33.520
我们才改变它

15:33.520 --> 15:34.520
登录失败我们不动

15:34.520 --> 15:35.520
不动就行了

15:35.520 --> 15:36.520
好

15:36.520 --> 15:38.520
我们再写一个locking out

15:38.520 --> 15:39.520
登出

15:39.520 --> 15:40.520
就是助销

15:40.520 --> 15:42.520
助销的话也是一样的

15:42.520 --> 15:43.520
助销的话

15:43.520 --> 15:45.520
你挨个信号传过来嘛

15:45.520 --> 15:46.520
然后呢

15:46.520 --> 15:48.520
我解构出一个put

15:48.520 --> 15:49.520
助销就很简单

15:49.520 --> 15:50.520
助销呢

15:50.520 --> 15:51.520
我们把那个

15:51.520 --> 15:52.520
本地存处里边

15:52.520 --> 15:53.520
移除

15:53.520 --> 15:57.340
remove item

15:57.340 --> 15:59.340
把本地存处里边

15:59.340 --> 16:00.340
移除过后呢

16:00.340 --> 16:02.340
再去重新触发这个

16:02.340 --> 16:03.340
把设置为now

16:03.340 --> 16:04.340
对吧

16:04.340 --> 16:05.340
把设置为now

16:05.340 --> 16:06.340
这是locking out

16:06.340 --> 16:07.340
locking

16:07.340 --> 16:08.340
一个助销

16:08.340 --> 16:09.340
一个登录

16:09.340 --> 16:11.340
还有啥呢

16:11.340 --> 16:13.340
就没啥了吧

16:13.340 --> 16:15.340
就没啥了吧

16:15.340 --> 16:16.340
好

16:16.340 --> 16:17.340
然后再来看

16:17.340 --> 16:18.340
现在呢

16:18.340 --> 16:20.340
我们在这边

16:20.340 --> 16:22.340
其实这里还有些问题的

16:22.340 --> 16:24.340
首先大家要把这个看懂

16:24.340 --> 16:25.340
这是最基础的

16:25.340 --> 16:26.340
一个是Reduce

16:26.340 --> 16:27.340
改变数据

16:27.340 --> 16:28.340
它用这个数据来表示

16:28.340 --> 16:29.340
当前登录的用户

16:29.340 --> 16:30.340
一个是这个

16:30.340 --> 16:31.340
一个是这个

16:31.340 --> 16:33.340
就是登录

16:33.340 --> 16:34.340
或者是重新登录

16:34.340 --> 16:35.340
只要登录成功了过后

16:35.340 --> 16:36.340
我们把locking item

16:36.340 --> 16:37.340
设置进去

16:37.340 --> 16:38.340
当然这里呢

16:38.340 --> 16:39.340
最终以后呢

16:39.340 --> 16:40.340
是肯定要变成

16:40.340 --> 16:41.340
这个是请求的

16:41.340 --> 16:42.340
只不过我们现在

16:42.340 --> 16:43.340
根本就没有这样的接口

16:43.340 --> 16:44.340
然后这个是locking out

16:44.340 --> 16:47.340
就是登出助销

16:47.340 --> 16:48.340
助销的话

16:48.340 --> 16:49.340
我们这里呢

16:49.340 --> 16:51.340
就很简单

16:51.340 --> 16:52.340
把本地存处

16:52.340 --> 16:53.340
移除

16:53.340 --> 16:54.340
然后重新触发这个x

16:54.340 --> 16:55.340
让它把

16:55.340 --> 16:56.340
当前登录的用户

16:56.340 --> 16:58.340
设为null就完事了

16:58.340 --> 17:01.340
然后我们到一个登录这里来

17:01.340 --> 17:02.340
component

17:02.340 --> 17:03.340
locking这里来

17:03.340 --> 17:04.340
那么这里是不是可以

17:04.340 --> 17:05.340
给它跟数据仓库

17:05.340 --> 17:06.340
连接在一起了

17:06.340 --> 17:07.340
对吧

17:07.340 --> 17:08.340
可以跟数据仓库

17:08.340 --> 17:09.340
进行连接了

17:09.340 --> 17:11.340
但是大家要注意一下

17:11.340 --> 17:13.340
这一块大家注意一下

17:13.340 --> 17:14.340
就是说

17:14.340 --> 17:16.340
你这里有两种协法

17:16.340 --> 17:17.340
第一种协法就是

17:17.340 --> 17:19.340
你在这里直接进行连接

17:19.340 --> 17:20.340
跟我们之前

17:20.340 --> 17:21.340
是一样的

17:21.340 --> 17:23.340
在这里直接进行连接

17:23.340 --> 17:24.340
另一种协法

17:24.340 --> 17:25.340
这里开一个组件

17:25.340 --> 17:28.340
来专门来做连接

17:28.340 --> 17:29.340
我们以前都是

17:29.340 --> 17:30.340
直接在这里连接的

17:30.340 --> 17:31.340
对吧

17:31.340 --> 17:32.340
我们以前咋写的

17:32.340 --> 17:34.340
说在这里写上一个locking

17:34.340 --> 17:36.340
然后在下边写上导出

17:36.340 --> 17:37.340
导出的是什么

17:37.340 --> 17:38.340
是不是一个connect

17:38.340 --> 17:39.340
对吧

17:39.340 --> 17:40.340
在这里直接进行连接了

17:40.340 --> 17:41.340
那么这里呢

17:41.340 --> 17:42.340
其实还有种做法

17:42.340 --> 17:44.340
就是把写出去

17:44.340 --> 17:46.340
其实这两种做法

17:46.340 --> 17:48.340
就看你怎么去想

17:48.340 --> 17:49.340
如果说

17:49.340 --> 17:50.340
你认为这个组件

17:50.340 --> 17:52.340
一定是跟数据仓库连接

17:52.340 --> 17:54.340
它不可能做其他用处了

17:54.340 --> 17:55.340
不可能说有其他情况

17:55.340 --> 17:57.340
一定是跟数据仓库连接

17:57.340 --> 17:59.340
那么你就可以把它写到一起

17:59.340 --> 18:00.340
就用之前的协法

18:00.340 --> 18:01.340
比方说像这种场景

18:01.340 --> 18:02.340
也不可能有别的用法了

18:02.340 --> 18:03.340
对吧

18:03.340 --> 18:05.340
如果说你这个组件很灵活

18:05.340 --> 18:07.340
有可能会跟这个数据仓库的

18:07.340 --> 18:08.340
这个数据进行连接

18:08.340 --> 18:10.340
有可能会跟这个仓库的

18:10.340 --> 18:11.340
仓库里面的

18:11.340 --> 18:12.340
另外一个数据进行连接

18:12.340 --> 18:13.340
比方说系统大了过后

18:13.340 --> 18:15.340
就会出现这种情况

18:15.340 --> 18:16.340
因为这个组件

18:16.340 --> 18:17.340
它紧急做展示的

18:17.340 --> 18:19.340
它只是一个展示组件

18:19.340 --> 18:21.340
只是做了一个样子出来

18:21.340 --> 18:22.340
那么它的数据哪来

18:22.340 --> 18:24.340
根本就不知道

18:24.340 --> 18:25.340
如果说它的数据可能

18:25.340 --> 18:26.340
千变万化

18:26.340 --> 18:27.340
有可能一会跟这个连接

18:27.340 --> 18:28.340
一会跟另外一个连接

18:28.340 --> 18:29.340
OK

18:29.340 --> 18:30.340
那把你把分出去写

18:30.340 --> 18:32.340
就看你具体的情况

18:32.340 --> 18:33.340
比方说我们这里

18:33.340 --> 18:34.340
把分出去写一次

18:34.340 --> 18:36.340
又见个文件夹

18:36.340 --> 18:37.340
所以说我都不用见个文件夹了

18:37.340 --> 18:39.340
我们直接写一个

18:41.340 --> 18:42.340
叫做containers

18:42.340 --> 18:44.340
containers是什么呢

18:44.340 --> 18:46.340
就表示的是容器组件

18:46.340 --> 18:48.340
这里面存放的全是容器组件

18:48.340 --> 18:50.340
就是它把数据给你处理好

18:50.340 --> 18:53.340
那么其他地方都是一些展示组件

18:53.340 --> 18:55.340
我们比方在这里写上

18:55.340 --> 18:58.340
一个叫做locking phone

18:58.340 --> 18:59.340
containers

18:59.340 --> 19:01.340
调接式

19:01.340 --> 19:02.340
那么这个组件

19:02.340 --> 19:03.340
它是来做数据连接的

19:03.340 --> 19:05.340
它专门来做数据连接

19:05.340 --> 19:06.340
于是这个组件

19:06.340 --> 19:08.340
它就跟数据彻底的分离了

19:08.340 --> 19:11.340
这个文件跟这个数据彻底的分离了

19:11.340 --> 19:12.340
你看这个组件里面

19:12.340 --> 19:13.340
跟这个数据有什么关系的

19:13.340 --> 19:14.340
没有什么关系

19:14.340 --> 19:15.340
对吧

19:15.340 --> 19:16.340
OK

19:16.340 --> 19:18.340
我们在这里边来进行数据连接

19:18.340 --> 19:20.340
我们是不是要导入什么containers

19:20.340 --> 19:22.340
从哪里

19:22.340 --> 19:24.340
从diva里面导入

19:24.340 --> 19:26.340
说diva是不是要安装一个

19:26.340 --> 19:28.340
是不是要写插件

19:28.340 --> 19:29.340
插件已经安装好了

19:29.340 --> 19:31.340
我们是不是要把插件配置进去

19:31.340 --> 19:32.340
对吧

19:32.340 --> 19:34.340
插件plongins

19:34.340 --> 19:35.340
plongins

19:35.340 --> 19:36.340
插件是个数据

19:36.340 --> 19:39.340
每个插件里面配置

19:39.340 --> 19:41.340
如果说插件有配置的话

19:41.340 --> 19:42.340
你是不是还要写个数据

19:42.340 --> 19:44.340
数据的第一项是插件的名称

19:44.340 --> 19:46.340
插件的名称是啥

19:46.340 --> 19:48.340
名字叫做这个

19:49.340 --> 19:50.340
叫这个

19:50.340 --> 19:51.340
插件名称

19:51.340 --> 19:53.340
第二项是插件的配置

19:53.340 --> 19:54.340
插件的配置在我们这里

19:54.340 --> 19:55.340
把diva开启完事了

19:55.340 --> 19:56.340
其他也不用管

19:56.340 --> 19:58.340
直接把diva开启完事了

19:58.340 --> 20:00.340
没问题吧

20:00.340 --> 20:01.340
然后呢

20:01.340 --> 20:02.340
这边

20:02.340 --> 20:03.340
导入diva

20:03.340 --> 20:04.340
containers

20:04.340 --> 20:07.340
然后导出一个组件

20:07.340 --> 20:09.340
就是进行连接的

20:09.340 --> 20:12.840
containers

20:12.840 --> 20:13.840
连接哪个组件呢

20:13.840 --> 20:17.730
导入进来

20:18.730 --> 20:21.360
from

20:24.360 --> 20:25.360
重新启动了

20:25.360 --> 20:26.360
不管了

20:26.360 --> 20:27.360
no info

20:28.360 --> 20:29.360
最后呢

20:29.360 --> 20:30.360
我们肯定是要连接这个组件

20:30.360 --> 20:31.360
然后呢

20:31.360 --> 20:32.360
把导出一个sport

20:32.360 --> 20:33.360
就是我们把这个工作

20:33.360 --> 20:35.360
专门放到这个地方来完成

20:35.360 --> 20:37.360
这里边有哪些东西要写

20:37.360 --> 20:38.360
就是一个map

20:38.360 --> 20:40.360
map state

20:40.360 --> 20:42.360
to props

20:42.360 --> 20:43.360
对吧

20:43.360 --> 20:44.360
把一些状态

20:44.360 --> 20:45.360
印上了它的属性

20:45.360 --> 20:46.360
这里是不是没有

20:46.360 --> 20:47.360
并没有

20:48.360 --> 20:49.360
关键是

20:49.360 --> 20:50.360
第二,它需要一个事件

20:50.360 --> 20:51.360
那么就是map

20:51.360 --> 20:52.360
dispatch

20:52.360 --> 20:54.360
to props

20:54.360 --> 20:55.360
它需要一个事件

20:55.360 --> 20:57.360
dispatch

20:57.360 --> 20:58.360
这个东西写放

20:58.360 --> 20:59.360
没啥好说的

20:59.360 --> 21:00.360
没啥好说的

21:00.360 --> 21:01.360
导出就完事了

21:01.360 --> 21:02.360
它里边呢

21:02.360 --> 21:04.360
需要一个返回的对象里边

21:04.360 --> 21:05.360
需要有这么一个事件

21:05.360 --> 21:06.360
处理程序

21:06.360 --> 21:07.360
名字交做

21:07.360 --> 21:08.360
看一下这边

21:08.360 --> 21:09.360
名字交做啥

21:09.360 --> 21:10.360
名字交做

21:10.360 --> 21:11.360
unlocking

21:11.360 --> 21:13.360
OK,我们这里写上

21:13.360 --> 21:14.360
当登录的时候呢

21:14.360 --> 21:16.360
它会传递给我一个账号

21:16.360 --> 21:18.360
会传递给我一个密码

21:18.360 --> 21:20.360
它会传递给我这么两个东西

21:20.360 --> 21:21.360
然后我要干嘛呢

21:21.360 --> 21:23.360
我是不是出发x

21:23.360 --> 21:24.360
是不是出发x

21:24.360 --> 21:25.360
让它去

21:25.360 --> 21:26.360
仓库里面去完成操作

21:26.360 --> 21:27.360
对吧

21:27.360 --> 21:28.360
被出发x

21:28.360 --> 21:30.360
去仓库里面完成操作

21:30.360 --> 21:31.360
好,来吧

21:31.360 --> 21:32.360
dispatch

21:32.360 --> 21:33.360
dispatch

21:33.360 --> 21:34.360
出发x

21:34.360 --> 21:36.360
好,出发x过后呢

21:36.360 --> 21:37.360
什么x

21:39.360 --> 21:40.360
内形是啥

21:40.360 --> 21:41.360
内形是啥

21:42.360 --> 21:44.360
内形是不是模型里边的这个名字

21:44.360 --> 21:46.360
就命名空间

21:46.360 --> 21:47.360
locking user

21:47.360 --> 21:48.360
然后鞋杠

21:48.360 --> 21:49.360
拿个x

21:49.360 --> 21:50.360
是不是出发这个x

21:50.360 --> 21:51.360
locking

21:51.360 --> 21:52.360
对吧

21:52.360 --> 21:53.360
出发这么一个x

21:54.360 --> 21:56.360
好,这个payload的填啥

21:56.360 --> 21:57.360
我们刚才之前分析过的

21:57.360 --> 21:58.360
payload的填啥

21:58.360 --> 22:00.360
payload是不是要告诉它

22:00.360 --> 22:01.360
账号和密码

22:01.360 --> 22:02.360
对吧

22:02.360 --> 22:04.360
OK,那么payload直接拿过来

22:04.360 --> 22:05.360
locking id

22:05.360 --> 22:06.360
locking password

22:06.360 --> 22:08.360
账号密码直接拿过来

22:08.360 --> 22:09.360
是不是出发这个玩意儿

22:09.360 --> 22:10.360
好,行了

22:10.360 --> 22:12.360
咱们先简单的写一下

22:12.360 --> 22:13.360
先简单的写一下

22:13.360 --> 22:15.360
这里边还是有些问题要处理的

22:15.360 --> 22:17.360
好,现在我们就

22:17.360 --> 22:18.360
连接了这个逐渐了

22:18.360 --> 22:19.360
locking for

22:19.360 --> 22:20.360
那么我们一会儿用的时候

22:20.360 --> 22:21.360
在页面上用的时候

22:21.360 --> 22:23.360
肯定用的是这个容器逐渐

22:24.360 --> 22:25.360
用的就不是在这个

22:25.360 --> 22:26.360
那么名字可以写这个

22:26.360 --> 22:27.360
但是用的时候

22:27.360 --> 22:29.360
肯定是用的是containers里边的

22:29.360 --> 22:30.360
locking for

22:30.360 --> 22:31.360
我们containers

22:31.360 --> 22:32.360
用的是这个

22:33.360 --> 22:34.360
还是换个名字

22:35.360 --> 22:36.360
好,保存

22:37.360 --> 22:38.360
保存,咱们看一下

22:38.360 --> 22:42.510
好,这里我们把控制台打开

22:46.360 --> 22:48.360
然后我们这里访问登录

22:48.360 --> 22:49.360
登录也

22:49.360 --> 22:50.360
locking

22:51.360 --> 22:52.360
帮我登录也

22:52.360 --> 22:53.360
好,接下来

22:53.360 --> 22:55.360
我们把这个数据仓库打开

22:57.360 --> 22:59.360
这里open your panel

23:01.360 --> 23:03.360
目前的数据仓库里边

23:03.360 --> 23:04.360
你看一下

23:04.360 --> 23:05.360
是不是

23:05.360 --> 23:06.360
locking user

23:06.360 --> 23:07.360
有个locking user

23:07.360 --> 23:09.360
他会拉,表示目前没有登录用户

23:09.360 --> 23:11.360
对吧,没有登录用户

23:11.360 --> 23:12.360
那么账号比方说

23:12.360 --> 23:13.360
我们这里随便写一个

23:13.360 --> 23:14.360
下写一个

23:14.360 --> 23:15.360
点登录

23:15.360 --> 23:16.360
好,我们来看一下

23:16.360 --> 23:18.360
是不是有axing触发了

23:18.360 --> 23:19.360
是不是有axing触发了

23:19.360 --> 23:20.360
什么axing

23:20.360 --> 23:21.360
是不是locking user

23:21.360 --> 23:22.360
locking

23:22.360 --> 23:24.360
对吧,是不是触发了这个axing

23:24.360 --> 23:25.360
没问题吧

23:25.360 --> 23:26.360
触发这个axing

23:26.360 --> 23:28.360
最后搞了半天

23:28.360 --> 23:29.360
什么都没做

23:29.360 --> 23:30.360
什么都没做

23:30.360 --> 23:31.360
因为你登录失败了

23:31.360 --> 23:32.360
你登录失败了

23:32.360 --> 23:33.360
所以他什么都没做

23:33.360 --> 23:35.360
如果说登录成功

23:36.360 --> 23:37.360
额德密

23:37.360 --> 23:38.360
123,123

23:38.360 --> 23:39.360
点登录

23:39.360 --> 23:40.360
这也包错了

23:41.360 --> 23:42.360
看一下

23:42.360 --> 23:43.360
locking

23:43.360 --> 23:45.360
locking id is not defined

23:45.360 --> 23:47.360
这里哪个地方写错了

23:47.360 --> 23:48.360
模型里边

23:49.360 --> 23:50.360
locking

23:50.360 --> 23:51.360
这里locking id大写的

23:51.360 --> 23:52.360
大写的

23:52.360 --> 23:53.360
再来

23:55.360 --> 23:56.360
好,这里额德密

23:56.360 --> 23:57.360
123,123

23:57.360 --> 23:58.360
点登录

23:59.360 --> 24:01.360
好,点到登录过后

24:01.360 --> 24:02.360
我们来看一下

24:03.360 --> 24:04.360
locking

24:05.360 --> 24:06.360
在哪呢

24:09.360 --> 24:12.120
locking

24:13.120 --> 24:15.120
目前的状态

24:15.120 --> 24:16.120
目前的状态

24:17.120 --> 24:18.120
你看一下

24:18.120 --> 24:19.120
locking有的是不是额德密呢

24:19.120 --> 24:20.120
是不是记录下来了

24:20.120 --> 24:22.120
我们再看一下本地存处

24:22.120 --> 24:24.120
再看一下本地存处

24:24.120 --> 24:25.120
app

24:26.120 --> 24:27.120
这里个local storage

24:28.120 --> 24:30.120
你看locking id是不是记录下来了

24:30.120 --> 24:31.120
对吧

24:31.120 --> 24:32.120
没问题吧

24:33.120 --> 24:34.120
但是现在一个问题

24:34.120 --> 24:36.120
就是他没有提示

24:36.120 --> 24:38.120
他没有提示

24:38.120 --> 24:39.120
没有提示说我这里呢

24:39.120 --> 24:41.120
到底成功了

24:41.120 --> 24:43.120
还是失败了

24:43.120 --> 24:44.120
失败了

24:44.120 --> 24:45.120
失败了没有提示

24:45.120 --> 24:47.120
然后成功了过后

24:47.120 --> 24:48.120
没有跳转页面

24:48.120 --> 24:49.120
对吧

24:49.120 --> 24:50.120
是不是有这样的一个问题

24:50.120 --> 24:51.120
提示成功了过后

24:51.120 --> 24:52.120
没有跳转页面

24:52.120 --> 24:54.120
失败了过后

24:54.120 --> 24:55.120
也没有提示

24:55.120 --> 24:56.120
那怎么办呢

24:56.120 --> 24:57.120
这个时候应该怎么办

24:58.120 --> 24:59.120
这里呢

24:59.120 --> 25:01.120
实际上有两种做法

25:01.120 --> 25:02.120
第一种做法

25:02.120 --> 25:03.120
就是你把这些处理

25:03.120 --> 25:04.120
写到仓库里边

25:04.120 --> 25:05.120
如果你觉得

25:05.120 --> 25:06.120
这个东西是通用的

25:06.120 --> 25:07.120
无论是什么情况下

25:07.120 --> 25:09.120
不管你是什么界面登录的

25:09.120 --> 25:10.120
他都有这么一个处理

25:10.120 --> 25:11.120
可以写到仓库里边

25:11.120 --> 25:12.120
还有的做法呢

25:12.120 --> 25:13.120
是写到这

25:13.120 --> 25:14.120
写到哪呢

25:14.120 --> 25:15.120
写到这

25:15.120 --> 25:16.120
我看一下

25:16.120 --> 25:18.120
写到那个

25:18.120 --> 25:19.120
写到这

25:19.120 --> 25:21.120
这里触发完成之后

25:21.120 --> 25:22.120
迪斯帕体之后

25:22.120 --> 25:24.120
他返回一个结果

25:24.120 --> 25:25.120
他返回一个结果

25:25.120 --> 25:26.120
那么告诉我

25:26.120 --> 25:28.120
到底是成功还是失败

25:28.120 --> 25:30.120
我们两种都给大家写一下

25:30.120 --> 25:31.120
因为你们以后

25:31.120 --> 25:32.120
我也不知道

25:32.120 --> 25:33.120
你们会遇到什么样的场景

25:33.120 --> 25:35.120
两种都给大家写一下

25:35.120 --> 25:36.120
好 第一种

25:36.120 --> 25:38.120
登录成功

25:38.120 --> 25:39.120
登录成功

25:39.120 --> 25:40.120
我们是不是写到这

25:40.120 --> 25:41.120
挑转页面

25:41.120 --> 25:42.120
好

25:42.120 --> 25:45.810
怎么挑转页面的告诉我

25:45.810 --> 25:46.810
登录成功

25:46.810 --> 25:47.810
要创传到手页

25:47.810 --> 25:49.810
怎么来挑转页面呢

25:49.810 --> 25:50.810
这个History

25:50.810 --> 25:53.810
那哪里去获取History的问题是

25:53.810 --> 25:55.810
回忆一下

25:55.810 --> 25:56.810
咱们仓库里边

25:56.810 --> 25:58.810
是不是已经给你加了这么一个东西了

25:58.810 --> 25:59.810
Rotor

25:59.810 --> 26:00.810
对吧

26:00.810 --> 26:02.810
是不是把那个仓库

26:02.810 --> 26:05.810
跟那个路由已经连接好了

26:05.810 --> 26:07.810
你现在也要改变页面地址

26:07.810 --> 26:10.810
是不是去触发相应的X来改变的

26:10.810 --> 26:12.810
所以说这里挑转页面是不是要Pute

26:12.810 --> 26:13.810
对吧

26:13.810 --> 26:15.810
触发相应的X

26:15.810 --> 26:16.810
什么X呢

26:16.810 --> 26:18.810
是不是给你提供好了的X

26:18.810 --> 26:20.810
是不是给你提供好了的

26:20.810 --> 26:21.810
在哪里

26:21.810 --> 26:24.810
在哪里可以提供的

26:24.810 --> 26:26.810
回忆一下

26:26.810 --> 26:28.810
是不是在Diva

26:28.810 --> 26:30.810
在Diva里边

26:30.810 --> 26:32.810
有一个Rotor

26:32.810 --> 26:33.810
是吧

26:33.810 --> 26:34.810
Diva里边是不是一个Rotor

26:34.810 --> 26:36.810
那么这里呢

26:36.810 --> 26:39.810
有一个东西叫做

26:39.810 --> 26:41.810
Rotor Redux

26:41.810 --> 26:43.810
是不是这么一个东西

26:43.810 --> 26:44.810
那么这个东西里边

26:44.810 --> 26:46.810
是不是给你提供了

26:46.810 --> 26:47.810
提供了这个X

26:47.810 --> 26:48.810
对不对

26:48.810 --> 26:49.810
Pute

26:49.810 --> 26:52.810
是不是通过这个方法来得到一个X

26:52.810 --> 26:53.810
好

26:53.810 --> 26:54.810
挑转到哪个地址呢

26:54.810 --> 26:55.810
首页

26:55.810 --> 26:56.810
对不对

26:56.810 --> 26:57.810
成功挑转到这个地址

26:57.810 --> 26:59.810
L是如果是登陆失败

26:59.810 --> 27:02.810
如果说是登陆失败

27:02.810 --> 27:04.810
那么我们这里

27:04.810 --> 27:06.810
登陆失败的话

27:06.810 --> 27:08.810
我们这里就Windows.alert

27:08.810 --> 27:09.810
alert

27:09.810 --> 27:12.810
就账号密码错误

27:12.810 --> 27:14.810
这是一种做法

27:14.810 --> 27:16.810
这是其中一种做法

27:16.810 --> 27:17.810
好看一下啊

27:17.810 --> 27:19.810
随便写一个

27:19.810 --> 27:20.810
账号密码错误

27:20.810 --> 27:21.810
看没

27:21.810 --> 27:22.810
耳朵密

27:22.810 --> 27:23.810
123 123

27:23.810 --> 27:25.810
点登陆

27:25.810 --> 27:29.760
我看一下啊

27:29.760 --> 27:30.760
看一下仓库里边

27:30.760 --> 27:34.200
为什么没有反应呢

27:34.200 --> 27:37.200
登陆

27:38.200 --> 27:41.200
为什么没有反应

27:41.200 --> 27:42.200
这里没有写E有的

27:42.200 --> 27:43.200
没有写E有的

27:43.200 --> 27:45.200
当然识别不了

27:45.200 --> 27:47.200
再来啊

27:47.200 --> 27:48.200
耳朵密

27:48.200 --> 27:49.200
123 123

27:49.200 --> 27:50.200
点登陆

27:50.200 --> 27:51.200
所以挑过去了

27:51.200 --> 27:52.200
对不对

27:52.200 --> 27:54.200
这是第一种做法

27:54.200 --> 27:55.200
就是我们把挑转的逻辑

27:55.200 --> 27:56.200
登陆成功

27:56.200 --> 27:58.200
和失败过后的逻辑

27:58.200 --> 27:59.200
直接写到仓库里边

27:59.200 --> 28:00.200
这种做法

28:00.200 --> 28:01.200
适用于什么呢

28:01.200 --> 28:03.200
适用于逻辑是唯一的

28:03.200 --> 28:04.200
通用的

28:04.200 --> 28:05.200
无论你是怎么登的

28:05.200 --> 28:06.200
它都是这个逻辑

28:06.200 --> 28:07.200
那如果说

28:07.200 --> 28:09.200
如果变一种情况

28:09.200 --> 28:11.200
就是它逻辑不是通用的

28:11.200 --> 28:12.200
也就是说有可能会出现

28:12.200 --> 28:14.200
有很多个登陆页面

28:14.200 --> 28:16.200
有可能它登陆的形式不一样

28:16.200 --> 28:18.200
登陆成功之后

28:18.200 --> 28:20.200
不同的页面有做不同的处理

28:20.200 --> 28:22.200
那又怎么办呢

28:22.200 --> 28:24.200
我们也适用另外一种做法

28:24.200 --> 28:26.200
适用另外一种做法

28:26.200 --> 28:28.200
这个单码我就是把三了

28:28.200 --> 28:30.200
我就返回结果

28:30.200 --> 28:32.200
这里可以返回的

28:32.200 --> 28:34.200
这里是可以返回的

28:34.200 --> 28:36.200
就是返回一个去

28:36.200 --> 28:37.200
我这里

28:37.200 --> 28:39.200
可以返回一个force

28:39.200 --> 28:41.200
对吧可以返回

28:41.200 --> 28:43.200
好返回过后在这边

28:43.200 --> 28:44.200
Dispatch完了之后

28:44.200 --> 28:45.200
我就可以得到

28:45.200 --> 28:47.200
得到这个结果

28:47.200 --> 28:49.200
比方说这里result

28:49.200 --> 28:51.200
我们输出一下这个result

28:51.200 --> 28:52.200
看一下吧

28:52.200 --> 28:55.640
保存

28:55.640 --> 28:56.640
这里我们返回

28:56.640 --> 28:57.640
登陆

28:57.640 --> 28:58.640
随便写一个

28:58.640 --> 28:59.640
登陆

28:59.640 --> 29:01.640
你看是不是force

29:01.640 --> 29:03.640
但是它放到一个promise里面的

29:03.640 --> 29:04.640
所以说你要等待它完成

29:04.640 --> 29:06.640
如果说

29:06.640 --> 29:08.640
1,2,3,1,2,3,登陆

29:08.640 --> 29:09.640
是不是true

29:09.640 --> 29:10.640
是不是我们可以拿到这个结果

29:10.640 --> 29:12.640
所以它得到Promise

29:12.640 --> 29:14.640
当然玩笑可以把它变成一个异步方法

29:14.640 --> 29:15.640
来等待它

29:15.640 --> 29:16.640
await

29:16.640 --> 29:18.640
等待它结果

29:18.640 --> 29:19.640
你看

29:19.640 --> 29:20.640
再来

29:20.640 --> 29:22.640
true or force

29:22.640 --> 29:24.640
1,2,3,1,2,3

29:24.640 --> 29:25.640
true

29:25.640 --> 29:26.640
对吧

29:26.640 --> 29:28.640
因为我们知道这个中间键

29:28.640 --> 29:30.640
我们用的这些第三方的键键

29:30.640 --> 29:32.640
它都是把Dispatch的结果给你返回的

29:32.640 --> 29:34.640
所以说你这里可以获取到这个结果

29:34.640 --> 29:35.640
于是

29:35.640 --> 29:36.640
我们这里干嘛呢

29:36.640 --> 29:38.640
是不是可以判断这个结果

29:38.640 --> 29:40.640
如果说你登陆成功了

29:40.640 --> 29:42.640
我这里进行跳转

29:42.640 --> 29:43.640
我这里怎么跳转的

29:43.640 --> 29:44.640
是不是一样的

29:44.640 --> 29:46.640
这里跳转是不是一样的

29:46.640 --> 29:48.640
也是一样的

29:48.640 --> 29:50.640
你看着

29:50.640 --> 29:51.640
也是一样的

29:51.640 --> 29:52.640
把这个东西拿过来不完了

29:52.640 --> 29:53.640
对不对

29:55.640 --> 29:57.640
就这里Dispatch

29:57.640 --> 29:58.640
出发一个x形

29:58.640 --> 29:59.640
什么x形呢

29:59.640 --> 30:00.640
rotor redox

30:00.640 --> 30:01.640
里边push

30:01.640 --> 30:03.640
这个x形

30:03.640 --> 30:05.640
出发这个x形

30:05.640 --> 30:07.640
如果说登陆失败的话

30:07.640 --> 30:09.640
我们在这里写上

30:09.640 --> 30:11.640
这种做法能更加灵活一点

30:11.640 --> 30:13.640
但是你每一个地方登陆都要进行处理

30:13.640 --> 30:15.640
就看你具体的情况

30:15.640 --> 30:17.640
帐号

30:17.640 --> 30:19.640
密码

30:19.640 --> 30:21.640
错误

30:21.640 --> 30:23.640
保存

30:23.640 --> 30:26.210
你看一下

30:26.210 --> 30:28.210
它这里报错了

30:28.210 --> 30:29.210
报什么错

30:29.210 --> 30:31.210
use require

30:31.210 --> 30:33.210
divarrotor instead

30:33.210 --> 30:35.210
divarrotor

30:35.210 --> 30:37.210
明白了

30:37.210 --> 30:39.210
它是内部

30:39.210 --> 30:42.210
也是内部

30:42.210 --> 30:44.210
内部的那种问题导致的

30:44.210 --> 30:46.210
它内部的代码书写导致的

30:46.210 --> 30:47.210
不用管它

30:47.210 --> 30:49.210
帮它密码错误

30:49.210 --> 30:51.210
123

30:51.210 --> 30:52.210
点灯录

30:52.210 --> 30:53.210
说过去了

30:53.210 --> 30:54.210
对吧

30:54.210 --> 30:56.650
OK

30:56.650 --> 30:58.650
这一个状态

30:58.650 --> 31:02.350
我看一下能不能自己把改一下

31:02.350 --> 31:04.350
这个东西也不好改

31:04.350 --> 31:05.350
也不好改

31:05.350 --> 31:06.350
它内部实现的

31:06.350 --> 31:07.350
算了

31:07.350 --> 31:08.350
这个东西不用管它

31:08.350 --> 31:10.350
然后这里一块儿做出来了

31:10.350 --> 31:12.350
接下来我们看这里

31:12.350 --> 31:14.350
退出登陆

31:14.350 --> 31:16.350
退出登陆

31:16.350 --> 31:17.350
在哪里呢

31:17.350 --> 31:18.350
门路这里

31:18.350 --> 31:19.350
不是

31:19.350 --> 31:20.350
对

31:20.350 --> 31:21.350
在门路这里

31:21.350 --> 31:22.350
退出登陆

31:22.350 --> 31:23.350
那么这里呢

31:23.350 --> 31:25.350
我们是不是也要进行同样的处理

31:25.350 --> 31:26.350
对吧

31:26.350 --> 31:28.350
是不是也要进行同样的处理

31:28.350 --> 31:29.350
这里需要数据

31:29.350 --> 31:30.350
用户名是啥

31:30.350 --> 31:31.350
我也不知道

31:31.350 --> 31:32.350
对吧

31:32.350 --> 31:34.350
所以我也不知道用户名是啥

31:34.350 --> 31:35.350
对吧

31:35.350 --> 31:36.350
所以说这里的用户名呢

31:36.350 --> 31:38.350
我们应该来自于哪呢

31:38.350 --> 31:39.350
是不是来自于一个属性

31:39.350 --> 31:41.350
属性里边传过来的东西

31:41.350 --> 31:42.350
probs

31:42.350 --> 31:44.350
这里只是个展示组件而已

31:44.350 --> 31:45.350
probs

31:45.350 --> 31:47.350
locking id

31:47.350 --> 31:49.350
用户名给我传过来

31:49.350 --> 31:50.350
好退出登陆的时候

31:50.350 --> 31:52.350
我点击过后出发事件

31:52.350 --> 31:54.350
我也不知道你要干嘛

31:54.350 --> 31:55.350
退出登陆的时候

31:55.350 --> 31:57.350
我让一个传个事件过来

31:57.350 --> 31:59.660
locking out

31:59.660 --> 32:00.660
好

32:00.660 --> 32:01.660
这里显示用户账号

32:01.660 --> 32:02.660
这里呢

32:02.660 --> 32:03.660
要退出登陆

32:03.660 --> 32:05.660
ok 我们在container里边再加一个

32:05.660 --> 32:07.660
就是menu

32:07.660 --> 32:09.660
container

32:09.660 --> 32:10.660
解释

32:10.660 --> 32:11.660
它专门来做连接数据的

32:11.660 --> 32:12.660
这是容器组件

32:12.660 --> 32:14.660
专门来提供数据的

32:14.660 --> 32:18.480
好 来吧

32:18.480 --> 32:19.480
我们直接把这边的格式

32:19.480 --> 32:21.480
直接复制粘贴过来

32:21.480 --> 32:22.480
好 那么这里边

32:22.480 --> 32:23.480
我要找的组件

32:23.480 --> 32:25.480
就是这个组件

32:25.480 --> 32:27.480
menu组件

32:27.480 --> 32:28.480
这是menu组件

32:28.480 --> 32:31.800
我们要连接的是menu组件

32:31.800 --> 32:32.800
ok

32:32.800 --> 32:33.800
好 那么这里呢

32:33.800 --> 32:34.800
我们要写两个

32:34.800 --> 32:42.770
一个是map state to props

32:42.770 --> 32:45.770
好 反而回到一个props

32:45.770 --> 32:47.770
它需要什么属性呢

32:47.770 --> 32:48.770
不就需要一个locking id吗

32:48.770 --> 32:49.770
ok

32:49.770 --> 32:50.770
locking id在哪

32:50.770 --> 32:51.770
我是不是可以拿给你

32:51.770 --> 32:53.770
locking id在哪

32:53.770 --> 32:54.770
在哪呢

32:54.770 --> 32:55.770
locking id

32:55.770 --> 32:57.770
locking id是不是在哪

32:57.770 --> 32:59.770
是不是在仓库里边的

32:59.770 --> 33:01.770
就是locking user里边

33:01.770 --> 33:02.770
它的状态就是locking id

33:02.770 --> 33:03.770
对吧

33:03.770 --> 33:04.770
所以我们直接从状态里边

33:04.770 --> 33:06.770
从状态里边直接拿

33:06.770 --> 33:07.770
所以说我们直接从

33:07.770 --> 33:08.770
仓库里边的什么

33:08.770 --> 33:09.770
locking user里边

33:09.770 --> 33:11.770
直接拿到这个数据

33:11.770 --> 33:13.770
只有它的状态

33:13.770 --> 33:15.770
locking id给你

33:15.770 --> 33:16.770
好 然后呢

33:16.770 --> 33:17.770
也要等

33:17.770 --> 33:18.770
它有一个函数

33:18.770 --> 33:19.770
它有一个事件

33:19.770 --> 33:22.770
就是locking unlocking out

33:22.770 --> 33:23.770
有这么一个事件

33:23.770 --> 33:24.770
这个事件呢

33:24.770 --> 33:26.770
需要退出登录

33:26.770 --> 33:28.770
需要退出登录

33:28.770 --> 33:29.770
好 那个退出

33:29.770 --> 33:30.770
它没有传任何参数

33:30.770 --> 33:31.770
那么我们如何来退出呢

33:31.770 --> 33:33.770
是不是就触发相应的x

33:33.770 --> 33:34.770
就完事了

33:34.770 --> 33:36.770
就去触发相应的x

33:36.770 --> 33:37.770
就完事了

33:37.770 --> 33:38.770
触发什么x呢

33:38.770 --> 33:39.770
它不是有个x

33:39.770 --> 33:41.770
叫locking out

33:41.770 --> 33:42.770
out

33:42.770 --> 33:43.770
那么

33:43.770 --> 33:44.770
panel的

33:44.770 --> 33:45.770
没有

33:45.770 --> 33:48.720
panel的

33:48.720 --> 33:49.720
就完了

33:49.720 --> 33:50.720
就触发这么一个x

33:50.720 --> 33:52.720
它就可以登出了

33:52.720 --> 33:53.720
没了

33:53.720 --> 33:54.720
好 登出过后

33:54.720 --> 33:55.720
我们是不是要跳转

33:55.720 --> 33:56.720
对吧

33:56.720 --> 33:57.720
登出过后

33:57.720 --> 33:58.720
我们要是不是要跳转

33:58.720 --> 33:59.720
好 跳转的话

33:59.720 --> 34:00.720
再触发一个x

34:00.720 --> 34:01.720
type

34:01.720 --> 34:02.720
为什么呢

34:03.720 --> 34:04.720
登出过后

34:04.720 --> 34:05.720
我们要跳转

34:05.720 --> 34:07.720
type为

34:07.720 --> 34:10.720
要使用Rotor Redox

34:12.720 --> 34:13.720
Retox

34:13.720 --> 34:14.720
Push

34:14.720 --> 34:15.720
跳转

34:17.720 --> 34:18.720
Push

34:18.720 --> 34:19.720
locking

34:19.720 --> 34:20.720
跳转的动作也

34:20.720 --> 34:21.720
对吧

34:21.720 --> 34:22.720
说到这么一件事

34:22.720 --> 34:24.720
先触发这个x

34:24.720 --> 34:25.720
这个x呢

34:25.720 --> 34:26.720
在仓库里面干嘛

34:26.720 --> 34:29.720
仓库里面就把本地存出移除

34:29.720 --> 34:30.720
然后呢

34:30.720 --> 34:31.720
然后呢

34:31.720 --> 34:32.720
把locking out作为null

34:32.720 --> 34:33.720
然后呢

34:33.720 --> 34:34.720
我们在干嘛

34:34.720 --> 34:36.720
我们再去

34:37.720 --> 34:39.720
再去访问这个地址

34:39.720 --> 34:41.720
再去跳转到这个地址

34:41.720 --> 34:42.720
好 所以说

34:42.720 --> 34:43.720
我们在layout里面

34:43.720 --> 34:44.720
我们在layout里面

34:44.720 --> 34:45.720
是不是就可以直接使用

34:45.720 --> 34:47.720
menu的container

34:47.720 --> 34:48.720
对吧

34:48.720 --> 34:50.720
menucontainer

34:50.720 --> 34:52.720
不会遭晕了

34:52.720 --> 34:53.720
所以说这些东西

34:53.720 --> 34:54.720
很多技术

34:54.720 --> 34:56.720
都是像打击木的那样子

34:56.720 --> 34:57.720
一层一层打起来的

34:57.720 --> 34:58.720
如果说你前边

34:58.720 --> 34:59.720
没有掌握牢固的话

34:59.720 --> 35:02.720
后边肯定是多多少少有点晕

35:03.720 --> 35:05.720
好 就写好了

35:05.720 --> 35:07.720
来 试一下

35:07.720 --> 35:09.720
好 这里退出登录

35:09.720 --> 35:10.720
你看是不是到登录页了

35:10.720 --> 35:12.720
好 然后这里耳朵面

35:12.720 --> 35:14.720
123 123点登录进去

35:14.720 --> 35:15.720
这里是不是显示了耳朵面

35:15.720 --> 35:16.720
对吧

35:16.720 --> 35:18.720
为什么它来自于这个仓库里面

35:18.720 --> 35:19.720
然后点退出

35:19.720 --> 35:20.720
是不是就可以进去了

35:20.720 --> 35:21.720
对吧

35:21.720 --> 35:23.720
好 事情完了吗

35:23.720 --> 35:24.720
事情都还没有完

35:24.720 --> 35:27.720
如果说你直接刷新这个页面呢

35:27.720 --> 35:28.720
刷新这个页面呢

35:28.720 --> 35:29.720
你这里是得不到数据的

35:29.720 --> 35:31.720
为什么你看一下仓库

35:31.720 --> 35:33.720
仓库在一开始的时候

35:33.720 --> 35:35.720
这个locking user是不是闹

35:35.720 --> 35:36.720
对吧

35:36.720 --> 35:38.720
尽管说我们本地存储里面已经有了

35:38.720 --> 35:39.720
对吧

35:39.720 --> 35:40.720
本地存储已经有了

35:40.720 --> 35:41.720
说明啥

35:41.720 --> 35:42.720
本地存储里面

35:42.720 --> 35:43.720
已经有这个登录用户了

35:43.720 --> 35:44.720
你已经登录过了

35:44.720 --> 35:45.720
对吧

35:45.720 --> 35:46.720
你不是说刷新页面过后

35:46.720 --> 35:47.720
你得重新登录

35:47.720 --> 35:49.720
那不至于

35:49.720 --> 35:50.720
你已经登录过了

35:50.720 --> 35:51.720
所以说呢

35:51.720 --> 35:53.720
我这里呢

35:53.720 --> 35:55.720
按道理来说是不让你登录的

35:55.720 --> 35:57.720
但是我状态里面没有恢复

35:57.720 --> 35:58.720
状态

35:58.720 --> 36:00.720
因为刷新页面全部重新运行的

36:00.720 --> 36:01.720
状态里面

36:01.720 --> 36:03.720
它并没有从本地存储里面

36:03.720 --> 36:04.720
去恢复这个数据

36:04.720 --> 36:05.720
你明白这个意思吗

36:05.720 --> 36:07.720
并没有从本地存储里面

36:07.720 --> 36:08.720
去恢复

36:08.720 --> 36:10.720
这个数据

36:10.720 --> 36:11.720
所以说呢

36:11.720 --> 36:13.720
我们在最开始的时候

36:13.720 --> 36:15.720
我们要在这个仓库里面

36:15.720 --> 36:16.720
最开始的时候

36:16.720 --> 36:17.720
是不是要同步本地存储

36:17.720 --> 36:18.720
对吧

36:18.720 --> 36:20.720
在仓库最开始的时候

36:20.720 --> 36:21.720
要同步本地存储

36:21.720 --> 36:22.720
那怎么办呢

36:22.720 --> 36:23.720
是不是要写這個subscript形式

36:23.720 --> 36:25.720
是不是要写这么一个玩意

36:26.720 --> 36:28.720
就是

36:28.720 --> 36:29.720
在最开始的时候

36:29.720 --> 36:30.720
要运行的方法

36:30.720 --> 36:32.720
我们这里比方说

36:32.720 --> 36:34.720
sync

36:34.720 --> 36:36.720
local storage

36:37.720 --> 36:39.720
就同步本地存储

36:39.720 --> 36:40.720
干嘛呢

36:40.720 --> 36:43.720
这是同步本地存储

36:44.720 --> 36:45.720
同步本地存储

36:45.720 --> 36:46.720
在最开始的时候

36:46.720 --> 36:47.720
我们要做这么一件事

36:47.720 --> 36:48.720
同步本地存储

36:48.720 --> 36:49.720
好

36:49.720 --> 36:50.720
来吧

36:50.720 --> 36:51.720
我们来同步一下

36:51.720 --> 36:53.720
如果说

36:54.720 --> 36:55.720
local storage

36:55.720 --> 36:56.720
我们先拿到local storage

36:56.720 --> 36:57.720
local id

36:57.720 --> 36:58.720
拿到

36:58.720 --> 36:59.720
local storage

36:59.720 --> 37:01.720
就是get item

37:01.720 --> 37:03.720
local id

37:03.720 --> 37:06.720
如果说本地存储里面

37:06.720 --> 37:07.720
有这个东西

37:07.720 --> 37:08.720
它有值

37:08.720 --> 37:09.720
有值说明它

37:09.720 --> 37:10.720
是不是登陆成功了

37:10.720 --> 37:11.720
对吧

37:11.720 --> 37:12.720
是不是登陆成功了

37:12.720 --> 37:14.720
就已经登陆过了

37:14.720 --> 37:16.720
已经登陆过了

37:16.720 --> 37:17.720
那我要干嘛

37:17.720 --> 37:18.720
我要干嘛呢

37:18.720 --> 37:20.720
我是不是要设置这个状态

37:20.720 --> 37:21.720
是吧

37:21.720 --> 37:22.720
设置这个状态

37:22.720 --> 37:23.720
好

37:23.720 --> 37:24.720
那么这里

37:24.720 --> 37:25.720
这里

37:25.720 --> 37:27.720
我们是不是要去触发ind

37:27.720 --> 37:28.720
对吧

37:28.720 --> 37:29.720
好

37:29.720 --> 37:31.720
这里边我们可以解构出来

37:31.720 --> 37:32.720
dispatch

37:32.720 --> 37:33.720
它里边有个dispatch

37:33.720 --> 37:34.720
可以触发

37:34.720 --> 37:35.720
dispatch

37:35.720 --> 37:36.720
触发ind

37:36.720 --> 37:37.720
什么ind呢

37:37.720 --> 37:39.720
什么ind

37:39.720 --> 37:41.720
内容

37:41.720 --> 37:44.720
是不是就是set login user

37:44.720 --> 37:47.720
那么它的就是payload

37:47.720 --> 37:49.720
是不是就是login id

37:49.720 --> 37:50.720
对吧

37:50.720 --> 37:51.720
我们去触发这个ind

37:51.720 --> 37:54.720
一开始的时候就把这状态给它修改掉

37:54.720 --> 37:56.720
没问题吧

37:56.720 --> 37:57.720
好

37:57.720 --> 37:58.720
看一下

37:58.720 --> 38:00.720
那么现在我们在刷新页面

38:00.720 --> 38:01.720
你看是不是有了

38:01.720 --> 38:02.720
为什么

38:02.720 --> 38:03.720
因为本地存储里面有

38:03.720 --> 38:04.720
所以说它就有

38:04.720 --> 38:05.720
没有这意思吧

38:05.720 --> 38:06.720
本地存储有

38:06.720 --> 38:07.720
它就有

38:07.720 --> 38:09.720
那么现在退出登陆

38:09.720 --> 38:11.720
退登陆过后再看

38:11.720 --> 38:12.720
现在是不是防问不到了

38:12.720 --> 38:14.720
因为现在本地存储都没有了

38:14.720 --> 38:15.720
对吧

38:15.720 --> 38:16.720
好

38:16.720 --> 38:17.720
那么这里的问题解决了

38:17.720 --> 38:18.720
还有没有问题

38:18.720 --> 38:19.720
都还有问题

38:19.720 --> 38:21.720
登陆这一块其实东西还是蛮多的

38:21.720 --> 38:22.720
还有问题

38:22.720 --> 38:23.720
还有什么问题呢

38:23.720 --> 38:25.720
就是说你这里的虽然

38:25.720 --> 38:27.720
你这个显示到是没什么问题了

38:27.720 --> 38:29.720
工人也没什么问题了

38:29.720 --> 38:30.720
但是你都页面能访问吗

38:30.720 --> 38:32.720
这页面是不应该访问啊

38:32.720 --> 38:34.720
你怎么能访问这样的页面呢

38:34.720 --> 38:36.720
你都没有登陆能访问这些页面吗

38:36.720 --> 38:37.720
能访问吗

38:37.720 --> 38:38.720
是不是不能访问

38:38.720 --> 38:39.720
对不对

38:39.720 --> 38:40.720
是不是不能访问

38:40.720 --> 38:41.720
OK

38:41.720 --> 38:42.720
那既然你不能访问的话

38:42.720 --> 38:44.720
我是不是要就要进行处理

38:44.720 --> 38:46.720
是不是要进行处理

38:46.720 --> 38:47.720
好

38:47.720 --> 38:48.720
那么我们怎么来处理这个问题呢

38:48.720 --> 38:50.720
你都不能访问这个页面

38:50.720 --> 38:52.720
我该怎么来处理这个问题呢

38:52.720 --> 38:54.720
是不是又想到了

38:54.720 --> 38:57.720
我们之前做个什么全线的路由

38:57.720 --> 38:58.720
是这样吧

38:58.720 --> 39:01.720
是做个一个全线的路由

39:01.720 --> 39:02.720
来

39:02.720 --> 39:04.720
我们写上这么一个rotor

39:04.720 --> 39:06.720
我们这里呢

39:06.720 --> 39:08.720
加上一个前置的路由

39:08.720 --> 39:11.720
就是private rotor

39:11.720 --> 39:14.720
就是我在这个路由里面进行处理

39:14.720 --> 39:15.720
处理过后

39:15.720 --> 39:17.720
你必须要经过我的同意过后

39:17.720 --> 39:19.720
你才能就是访问

39:19.720 --> 39:20.720
对吧

39:20.720 --> 39:21.720
来吧

39:21.720 --> 39:24.720
这里我们写上这么一个private rotor

39:24.720 --> 39:26.720
那这个玩意儿其实它就是一个组件

39:26.720 --> 39:27.720
其实它就是一个组件

39:27.720 --> 39:28.720
我们之前说过

39:28.720 --> 39:30.720
之前是不是也写过这个玩意儿

39:30.720 --> 39:31.720
对吧

39:31.720 --> 39:33.720
那么我们这里写好之后

39:33.720 --> 39:34.720
是不是在页面

39:34.720 --> 39:36.720
只要需要全线控制的页面上

39:36.720 --> 39:38.720
给它加入这么一个前置的路由

39:38.720 --> 39:39.720
就完事了

39:39.720 --> 39:40.720
是不是这样子

39:40.720 --> 39:41.720
好

39:41.720 --> 39:43.720
那么这里呢

39:43.720 --> 39:45.720
我们这里甚至可以先把这个probs

39:45.720 --> 39:46.720
打印出来

39:46.720 --> 39:47.720
看下就明白了

39:47.720 --> 39:48.720
好

39:48.720 --> 39:49.720
我们这里呢

39:49.720 --> 39:50.720
有可能又忘了

39:50.720 --> 39:51.720
学到就忘了

39:51.720 --> 39:52.720
学到就忘了

39:52.720 --> 39:53.720
就是因为你们自己下来

39:53.720 --> 39:54.720
没有怎么去练习

39:54.720 --> 39:55.720
好

39:55.720 --> 39:57.720
我们在配极式里面怎么写的

39:57.720 --> 39:59.720
比方说index

39:59.720 --> 40:00.720
好

40:00.720 --> 40:02.720
这里面需要登录过后才能访问

40:02.720 --> 40:05.720
是不是要写上这么一个

40:05.720 --> 40:07.720
叫做rot

40:07.720 --> 40:09.720
配置

40:09.720 --> 40:10.720
rot

40:10.720 --> 40:11.720
这是yaml

40:11.720 --> 40:13.720
yaml注释

40:13.720 --> 40:14.720
对吧

40:14.720 --> 40:15.720
好

40:15.720 --> 40:16.720
写上

40:16.720 --> 40:17.720
哪个呢

40:17.720 --> 40:19.720
位置

40:19.720 --> 40:21.720
位置在

40:23.720 --> 40:24.720
在哪呢

40:24.720 --> 40:27.720
src目录下面的rot

40:27.720 --> 40:29.720
目录下面的private

40:29.720 --> 40:31.720
rot

40:31.720 --> 40:32.720
介石

40:32.720 --> 40:34.720
把这个介石都不用写

40:34.720 --> 40:35.720
好

40:35.720 --> 40:38.230
保存

40:38.230 --> 40:39.230
刷新

40:39.230 --> 40:41.230
我们这要重新启动一下

40:41.230 --> 40:43.230
是要重新启动一下

40:43.230 --> 40:44.230
对

40:44.230 --> 40:49.100
要重新启动一下

40:50.100 --> 40:53.440
好

40:53.440 --> 40:54.440
来看一下吧

41:02.610 --> 41:06.140
那么这样子的话

41:06.140 --> 41:08.140
它在运行这个路由的时候

41:08.140 --> 41:09.140
运行这个页面的时候

41:09.140 --> 41:11.140
它会把这个页面交给

41:11.140 --> 41:13.140
交给你指定的那个路由

41:13.140 --> 41:15.140
先处理一遍

41:15.140 --> 41:16.140
先处理一遍

41:16.140 --> 41:19.800
打印出来

41:19.800 --> 41:20.800
你看

41:20.800 --> 41:22.800
这个object里边

41:22.800 --> 41:23.800
object里边

41:23.800 --> 41:25.800
你首先看一下这个

41:25.800 --> 41:27.800
你首先看一下这个

41:27.800 --> 41:29.800
这边是不是没有显示什么

41:29.800 --> 41:30.800
欢迎首页

41:30.800 --> 41:31.800
是没有显示首页

41:31.800 --> 41:33.800
为什么没有显示首页

41:33.800 --> 41:35.800
为什么没有显示

41:35.800 --> 41:37.800
为什么没有显示

41:37.800 --> 41:39.800
是因为这个首页是交给谁在处理

41:39.800 --> 41:41.800
所以交给这个组件来处理的

41:41.800 --> 41:42.800
这个组件通过一个属性里边

41:42.800 --> 41:44.800
可以拿到是不是拿到一大堆东西

41:44.800 --> 41:45.800
对吧

41:45.800 --> 41:47.800
可以拿到一大堆东西

41:47.800 --> 41:48.800
通过这些东西

41:48.800 --> 41:49.800
它来进行处理

41:49.800 --> 41:50.800
看一下你有没有登录

41:50.800 --> 41:52.800
你乱七八糟的东西

41:52.800 --> 41:54.800
能不能访问这个东西

41:54.800 --> 41:55.800
你就可以进行控制了

41:55.800 --> 41:57.800
这里可以随意进行控制

41:57.800 --> 41:58.800
好

41:58.800 --> 42:00.800
那这里边怎么写呢

42:00.800 --> 42:02.800
这里边又怎么写呢

42:02.800 --> 42:03.800
这里边我们是不是就看一下

42:03.800 --> 42:05.800
你到底有没有登录

42:05.800 --> 42:07.800
你有登录我怎么办

42:07.800 --> 42:08.800
你没有登录又怎么办

42:08.800 --> 42:10.800
那么我希望你属性给我

42:10.800 --> 42:12.800
传递过来一个状态

42:12.800 --> 42:14.800
就是适逢登录的状态

42:14.800 --> 42:15.800
你给我传一个状态过来

42:15.800 --> 42:17.800
就适逢登录的状态过来

42:17.800 --> 42:19.800
就是

42:19.800 --> 42:21.800
就是

42:21.800 --> 42:22.800
login id

42:22.800 --> 42:23.800
你给我传个login id过来

42:23.800 --> 42:25.800
如果说你这个login id有值

42:25.800 --> 42:28.800
就表示你登录

42:28.800 --> 42:29.800
你登录干嘛

42:29.800 --> 42:32.800
我只是给你返回props children

42:32.800 --> 42:34.800
直接返回这个玩意就行了

42:34.800 --> 42:37.800
如果说没有登录

42:37.800 --> 42:39.800
未登录

42:39.800 --> 42:40.800
未登录我干嘛

42:40.800 --> 42:41.800
我是不是挑转页面

42:41.800 --> 42:42.800
对吧

42:42.800 --> 42:43.800
挑转页面

42:43.800 --> 42:45.800
我们挑转页面就完事了

42:45.800 --> 42:47.800
挑转页面就完事了

42:47.800 --> 42:48.800
好怎么来挑转页面呢

42:48.800 --> 42:49.800
这里边我们可以使用

42:49.800 --> 42:51.800
history来进行挑转

42:51.800 --> 42:53.800
也可以使用我们统一的方式

42:53.800 --> 42:55.800
就是使用x形来进行挑转

42:55.800 --> 42:57.800
我们这里比方说我们使用

42:57.800 --> 42:59.800
统一的x形来进行挑转

42:59.800 --> 43:01.800
那我们这里就触发事件嘛

43:01.800 --> 43:03.800
触发事件

43:03.800 --> 43:04.800
probs

43:04.800 --> 43:05.800
not

43:05.800 --> 43:06.800
login

43:06.800 --> 43:08.800
如果有这个事件的话

43:08.800 --> 43:09.800
probs

43:09.800 --> 43:10.800
not

43:10.800 --> 43:11.800
login

43:11.800 --> 43:16.450
触发这个事件

43:16.450 --> 43:17.450
未登录

43:17.450 --> 43:18.450
未登录就触发这个事件

43:18.450 --> 43:19.450
我们返回

43:19.450 --> 43:24.920
这里面我们把该导入的导入

43:24.920 --> 43:26.920
首先导入扛那个车

43:26.920 --> 43:27.920
因为它这里肯定要用到仓库

43:27.920 --> 43:29.920
所以说要从仓库里面导出这个东西

43:30.920 --> 43:31.920
connect

43:31.920 --> 43:32.920
from

43:32.920 --> 43:33.920
deva

43:33.920 --> 43:35.920
这个东西都不要了

43:36.920 --> 43:37.920
还有什么呢

43:38.920 --> 43:39.920
还有deva rotor

43:39.920 --> 43:42.930
就是

43:44.930 --> 43:45.930
rotary dance

43:45.930 --> 43:47.930
好来吧

43:47.930 --> 43:48.930
我们这里导出

43:48.930 --> 43:49.930
connect

43:53.010 --> 43:54.010
private

43:54.010 --> 43:55.010
rotor

43:55.010 --> 43:56.010
好

43:56.010 --> 43:57.010
第一个

43:57.010 --> 43:58.010
map

43:58.010 --> 43:59.010
stat

43:59.010 --> 44:00.010
probs

44:00.010 --> 44:05.400
stat

44:05.400 --> 44:07.400
这里面它需要一个数据叫做login ID

44:07.400 --> 44:08.400
这个数据

44:08.400 --> 44:09.400
我给它

44:09.400 --> 44:10.400
那么login ID来自于哪呢

44:10.400 --> 44:12.400
来自于状态里面的login

44:13.400 --> 44:15.400
什么仓库里面的login user

44:15.400 --> 44:16.400
对吧

44:16.400 --> 44:18.400
来自于仓库里面的login user

44:18.400 --> 44:19.400
这是login ID

44:19.400 --> 44:21.400
然后它还需要啥呢

44:21.400 --> 44:22.400
还需要map

44:22.400 --> 44:23.400
dispatch

44:23.400 --> 44:24.400
还需要一个事件

44:24.400 --> 44:25.400
to

44:25.400 --> 44:26.400
probs

44:26.400 --> 44:29.680
dispatch

44:29.680 --> 44:30.680
那么它需要什么事件呢

44:30.680 --> 44:31.680
就是not

44:31.680 --> 44:32.680
not

44:32.680 --> 44:33.680
login

44:33.680 --> 44:34.680
这个事件

44:34.680 --> 44:36.680
你没有传任何参数

44:36.680 --> 44:37.680
就是说

44:37.680 --> 44:38.680
如果你没有登录的时候

44:38.680 --> 44:39.680
我要干嘛

44:39.680 --> 44:40.680
我是不是要触发x型

44:40.680 --> 44:41.680
dispatch

44:41.680 --> 44:42.680
什么x型

44:42.680 --> 44:45.680
就是rotor

44:45.680 --> 44:47.680
就是大概是里面的probs

44:47.680 --> 44:48.680
触发这样的x型

44:48.680 --> 44:49.680
probs到哪

44:49.680 --> 44:50.680
probs要登录

44:51.680 --> 44:52.680
好

44:52.680 --> 44:53.680
把这两个传过去

44:54.680 --> 44:55.680
这两个传过去

44:55.680 --> 44:56.680
好

44:56.680 --> 44:59.120
你看着

44:59.120 --> 45:00.120
你看

45:00.120 --> 45:01.120
我现在

45:01.120 --> 45:02.120
我直接访问去

45:02.120 --> 45:03.120
访问主页

45:03.120 --> 45:04.120
访问不到了对吧

45:04.120 --> 45:05.120
为什么它会经过

45:05.120 --> 45:07.120
这个东西前置来进行处理

45:07.120 --> 45:08.120
它发现你没有登录

45:08.120 --> 45:09.120
它就跳转了

45:09.120 --> 45:10.120
它就跳转了

45:10.120 --> 45:11.120
好

45:11.120 --> 45:12.120
如果说登录了

45:12.120 --> 45:13.120
耳朵密

45:13.120 --> 45:14.120
123

45:14.120 --> 45:15.120
123

45:15.120 --> 45:16.120
登录

45:16.120 --> 45:17.120
好

45:17.120 --> 45:18.120
现在我们在刷新

45:18.120 --> 45:19.120
是没问题的

45:19.120 --> 45:20.120
对吧

45:20.120 --> 45:21.120
这都能正常显示的

45:21.120 --> 45:23.120
所以把这个逻辑就做出来了

45:23.120 --> 45:24.120
登录逻辑

45:24.120 --> 45:26.120
而且你不管怎么刷新都可以的

45:26.120 --> 45:27.120
这个是显示

45:27.120 --> 45:28.120
因为它刷新的时候

45:28.120 --> 45:29.120
它就会同步

45:29.120 --> 45:31.120
我们在仓库里面已经写好了

45:31.120 --> 45:32.120
刷新的时候

45:32.120 --> 45:34.120
它会同步本地存出

45:34.120 --> 45:35.120
会进行同步

45:35.120 --> 45:36.120
当然

45:36.120 --> 45:37.120
在仓库里面

45:37.120 --> 45:38.120
也可以进行同步

45:38.120 --> 45:39.120
同步在这

45:39.120 --> 45:41.120
如果说你没有登录的话

45:41.120 --> 45:43.120
那么由于有这个东西的限制

45:43.120 --> 45:45.120
你访问那些需要登录的页面

45:45.120 --> 45:46.120
它就会进行跳转

45:46.120 --> 45:48.120
因为它这里进行判断

45:48.120 --> 45:49.120
你给我的东西

45:49.120 --> 45:50.120
如果登录了

45:50.120 --> 45:51.120
我就正常显示

45:51.120 --> 45:52.120
如果没有登录的话

45:52.120 --> 45:53.120
我就给你跳转

45:54.120 --> 45:56.120
那么这个登录系统是不是写好了

45:56.120 --> 45:58.120
至少登录逻辑是写好了

45:58.120 --> 45:59.120
只不过

45:59.120 --> 46:00.120
我们现在没有用

46:00.120 --> 46:01.120
阿迦克斯请求仅此而已

46:01.120 --> 46:02.120
就是逻辑

46:02.120 --> 46:04.120
就是这个逻辑

46:04.120 --> 46:05.120
没问题吧

46:05.120 --> 46:07.430
我们写了半天

46:07.430 --> 46:09.430
还没有写到学生管理

46:09.430 --> 46:10.430
不管不着急

46:10.430 --> 46:12.430
因为我们是路博

46:12.430 --> 46:14.430
路博好处在于

46:14.430 --> 46:15.430
不限时间

46:15.430 --> 46:16.430
我们慢慢讲

46:16.430 --> 46:17.430
我希望了

46:17.430 --> 46:18.430
每一个地方

46:18.430 --> 46:20.430
大家都会能理解

46:20.430 --> 46:21.430
不然的话

46:21.430 --> 46:22.430
你学了半天

46:22.430 --> 46:23.430
你出去

46:23.430 --> 46:24.430
我们学了那么久

46:24.430 --> 46:25.430
我连登录都不会做

46:25.430 --> 46:26.430
所以我把登录给你

46:26.430 --> 46:27.430
完整的做一遍

46:27.430 --> 46:28.430
好吧

46:28.430 --> 46:29.430
那么剩下的事情

46:29.430 --> 46:31.430
就是一个学生查询了

46:31.430 --> 46:33.430
咱们还是休息一下吧

46:33.430 --> 46:34.430
大家下来

46:34.430 --> 46:36.430
把目前的登录这一块

46:36.430 --> 46:37.430
完成

46:37.430 --> 46:38.430
下来我们下节课

46:38.430 --> 46:40.430
再来实现学生的查询列表

46:40.430 --> 46:42.430
这个玩意就比较简单了

