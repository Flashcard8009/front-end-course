WEBVTT

00:00.940 --> 00:04.140
好 那么现在呢就插最后一个部分了啊 瑞大克斯

00:04.140 --> 00:07.740
呃 之前我们讲了X 原来干嘛的 描述你要干什么

00:07.740 --> 00:11.640
Reducer 做什么呢 就是具体改变数据的啊

00:11.640 --> 00:15.340
具体创建数据改变数据的 Reducer 跟数据打交道的

00:15.340 --> 00:17.640
那么还插最后一个就是Stone 啊

00:17.640 --> 00:21.340
Stone 它是一个数据仓库 它用来保存数据的啊

00:21.340 --> 00:24.140
这就和咱们学习Stone 非常非常简单啊

00:24.140 --> 00:25.540
这一块应该是最简单的

00:25.540 --> 00:29.040
Stone 是用于 呃 保存数据的啊

00:29.040 --> 00:31.640
它是个数据仓库 那么它其实这个东西呢

00:31.640 --> 00:35.740
它就连接了Action和Reducer 当你使用Stone

00:35.740 --> 00:37.140
去分发一个Action的时候呢

00:37.140 --> 00:41.240
它实际上是会把这个Action传递给Reducer 让它去处理

00:41.240 --> 00:43.340
通过Reducer处理过后呢 得到一个新的数据

00:43.340 --> 00:47.240
它把保存起来 当然那你一开始来创建Stone的时候呢

00:47.240 --> 00:49.740
一开始来创建这个Stone 什么意思

00:49.740 --> 00:52.140
就是保存的意思啊 存储的意思

00:52.140 --> 00:54.040
一开始创建这个仓库的时候呢

00:54.040 --> 00:56.840
它也会去调用这个Reducer啊

00:56.840 --> 00:58.840
就这么回事啊 就这么回事

00:58.840 --> 01:02.640
那么这个Stone 它是用于保存数据的啊

01:02.640 --> 01:05.140
那么这个Stone里边呢 它是怎么来创建的呢

01:05.140 --> 01:11.840
它是通过CreateStone 方法创建的对象

01:11.840 --> 01:13.940
那么这个对象呢 主要是这个对象

01:13.940 --> 01:15.940
它不是说我们保存的数据哦

01:15.940 --> 01:18.140
它指的是一个数据仓库啊

01:18.140 --> 01:20.640
通过CreateStone 创建的是一个数据仓库对象

01:20.640 --> 01:25.140
所以仓库对象里边它保存的数据 是这么回事啊

01:25.140 --> 01:28.540
好 咱们呢 可以在这个Index里边看一下吧

01:28.540 --> 01:32.740
看一下这个Index 这个Index里边看一下

01:32.740 --> 01:35.540
这里不是创建一个仓库吗 对吧 创建一个仓库

01:35.540 --> 01:38.140
这个仓库里边我们把它输出一下啊

01:38.140 --> 01:40.840
输出一下这个仓库 保存啊 你看一下

01:40.840 --> 01:42.040
这边输出一下

01:42.040 --> 01:43.540
那么这个仓库里边看一下

01:43.540 --> 01:45.340
是不是提供了一系列的方法 对吧

01:45.340 --> 01:46.640
来供你操作的方法

01:46.640 --> 01:49.040
一个是Dispatch 这个是我们用过的

01:49.040 --> 01:50.740
用于分发一个Action

01:50.740 --> 01:52.840
你要传一个Action作为参数传进去

01:52.840 --> 01:54.940
它用于来分发一个Action

01:54.940 --> 01:56.540
好 然后GetState

01:56.540 --> 01:59.440
这个是什么呢 得到仓库中当前的状态

01:59.440 --> 02:01.440
就是数据 就是仓库里边保存的数据

02:01.440 --> 02:04.640
当前保存的数据是啥 你通过这个方法来得到

02:04.640 --> 02:06.640
好 下面这个呢 下面这个我说一下就行了

02:06.640 --> 02:10.940
因为这个东西呢 我们平时基本上是不会用的

02:10.940 --> 02:13.540
它叫做什么呢 它叫做T幻Reducer

02:13.540 --> 02:15.540
就是说我们之前创建仓库的时候

02:15.540 --> 02:17.340
不是有一个Reducer吗 对吧

02:17.340 --> 02:20.040
那么有的时候呢 有些非常特殊的情况

02:20.040 --> 02:21.240
非常非常特殊的情况

02:21.240 --> 02:24.040
我们可能会T幻成另外一个Reducer

02:24.040 --> 02:25.840
Reducer不是个函数嘛 对不对

02:25.840 --> 02:27.540
那么你可以调用这个方法

02:27.540 --> 02:30.040
仓库保存不变 然后T幻成另外一个Reducer

02:30.040 --> 02:33.940
这个东西我们基本上不用的 了解一下就行了

02:33.940 --> 02:37.540
好 下面这个 Subscrap

02:37.540 --> 02:39.340
那么这个东西呢 表示什么意思呢

02:39.340 --> 02:42.140
它表示的是 添加一个监听器

02:42.140 --> 02:46.360
这个我们要终点说一下

02:46.360 --> 02:49.460
该对象的成员

02:49.460 --> 02:51.860
成员呢 我们刚才说了几个 对吧

02:51.860 --> 02:53.460
Dispatch

02:53.460 --> 02:56.760
分发一个Action

02:56.760 --> 02:58.960
好 然后什么GetState

02:58.960 --> 03:03.460
这是得到仓库中当前的数据

03:03.460 --> 03:06.260
当前的状态 也就是数据

03:06.260 --> 03:10.260
然后下面这个ReplaceReducer

03:10.260 --> 03:14.660
这个表示T幻掉当前的Reducer

03:14.660 --> 03:16.560
T幻掉当前的Reducer

03:16.560 --> 03:21.460
好 然后下一个呢 就是Subscrap

03:21.460 --> 03:26.560
这个表示的是注册一个监听器

03:26.560 --> 03:28.460
这个注册监听器是什么意思呢

03:28.460 --> 03:31.760
就有点类似于History

03:31.760 --> 03:34.260
我们以前讲ReactRotor那里

03:34.260 --> 03:36.960
History里边有一个Nation

03:36.960 --> 03:39.260
听起来一个监听器就相当于是那个

03:39.260 --> 03:40.860
那么这个监听器是啥呢

03:40.860 --> 03:43.960
监听器是一个无参函数

03:43.960 --> 03:46.060
没有参数的函数

03:46.060 --> 03:47.860
那么该函数什么时候运行的

03:47.860 --> 03:52.560
当分发一个Action之后

03:52.660 --> 03:57.360
会运行注册的监听器

03:57.360 --> 03:59.360
什么意思 咱们来举个例子

03:59.360 --> 04:01.760
比方说我们这里的这个仓库

04:01.760 --> 04:06.160
我们调了它的方法叫做Subscrap

04:06.160 --> 04:07.560
然后这里边传一个什么呢

04:07.560 --> 04:10.260
传的是一个函数 一个无参函数

04:10.260 --> 04:13.060
没有参数 没有参数 这么一个函数

04:13.060 --> 04:15.460
好 那么这里的函数里边我们写上一句话

04:15.460 --> 04:21.160
就是状态改变了

04:22.160 --> 04:24.160
好 写上这么一句话

04:24.160 --> 04:27.660
好 那么这个函数是什么时候运行的

04:27.660 --> 04:29.660
就相当于是天下的监听器了

04:29.660 --> 04:31.660
那么这个函数什么时候运行的

04:31.660 --> 04:36.160
它运行的时间点是在你分发了Action之后

04:36.160 --> 04:39.160
就在这个时间点去完成运行

04:39.160 --> 04:41.160
好 咱们保存看一下

04:41.160 --> 04:44.660
你看 状态改变了在这个时候运行

04:44.660 --> 04:46.160
看一下在哪里呢

04:46.160 --> 04:48.660
是不是刚好是分发完了Action之后

04:49.160 --> 04:52.160
它会触发这个监听器 它会运行这个

04:52.160 --> 04:54.160
运行完了过后来继续运行后边的代码

04:54.160 --> 04:56.160
对吧 先运行它

04:56.160 --> 04:58.160
然后再分发Action

04:58.160 --> 05:00.660
分发完Action过后它会运行这个代码

05:00.660 --> 05:02.160
注成了监听器

05:02.160 --> 05:04.660
然后再运行后边的代码

05:04.660 --> 05:06.660
它是这么一种运行过程

05:06.660 --> 05:07.660
就添加一个监听器

05:07.660 --> 05:09.660
它主要是监听状态发生变化

05:09.660 --> 05:12.160
状态怎么发生变化 是不是你要分发Action

05:12.160 --> 05:14.160
一分发Action 那么状态就发生

05:14.160 --> 05:15.660
它就有可能

05:15.660 --> 05:17.160
哪怕你状态没有变

05:17.660 --> 05:20.160
哪怕你状态没有变 它都会触发这个

05:22.160 --> 05:24.660
Listner 就是这个监听器

05:24.660 --> 05:25.660
分发一个Action之后

05:25.660 --> 05:27.160
它就会运行注册的监听器

05:27.160 --> 05:28.160
就这么回事

05:28.160 --> 05:29.660
那能不能注册多个监听器呢

05:29.660 --> 05:31.660
跟HistoryListner是一样的

05:31.660 --> 05:33.660
它是可以注册多个监听器的

05:34.660 --> 05:35.660
比方说这里

05:35.660 --> 05:38.160
你看一下 是不是两个监听器都一次运行了

05:38.160 --> 05:40.160
对不对 一次运行了这些函数

05:40.160 --> 05:41.160
非常非常简单

05:41.160 --> 05:43.160
这是监听器里面做的事情

05:43.160 --> 05:45.160
那么监听器里面你可以做一些

05:45.160 --> 05:47.160
比如说打印一些日字记录

05:48.160 --> 05:52.160
比如说我们这里可以通过store getState

05:52.160 --> 05:53.160
打印一些日字记录

05:53.160 --> 05:54.660
只要你状态发生变化

05:54.660 --> 05:56.660
那么我就给你打印一次

05:56.660 --> 05:58.660
那么我们这里就不用写了

05:58.660 --> 06:01.160
那么我们就只管去分发Action就行了

06:01.160 --> 06:02.660
每一次分发完Action过后了

06:02.660 --> 06:05.160
它都会给打印当前的状态

06:05.160 --> 06:07.660
看现在是不是三个 三个用户了

06:07.660 --> 06:10.160
分发完了过后得到的新的状态 就三个用户了

06:10.160 --> 06:11.160
那比如说这里

06:12.160 --> 06:14.160
这里我们三出个用户

06:14.160 --> 06:15.160
比方说

06:23.160 --> 06:25.160
这里ID可以干3

06:25.160 --> 06:27.160
三出个用户的时候

06:27.160 --> 06:28.160
我们给一个3

06:28.160 --> 06:30.160
三出ID为3这个用户

06:30.160 --> 06:33.160
于是我们这里是不是分发了两个Action

06:33.160 --> 06:35.160
分发了两个Action

06:35.160 --> 06:36.160
咱们保存看一下

06:36.160 --> 06:38.160
那么第一次分发完Action过后

06:38.160 --> 06:39.160
我们可以得到数据

06:39.160 --> 06:40.160
这个数据

06:40.160 --> 06:42.160
第二次分发完Action之后

06:42.160 --> 06:44.160
我们得到这样的数据

06:44.160 --> 06:46.160
那么可以便于日子记录

06:46.160 --> 06:48.160
便于我们查看日子

06:48.160 --> 06:50.160
这是添加一个监听器

06:50.160 --> 06:52.160
只要你分发了Action

06:52.160 --> 06:54.160
那么我就会收到这个通知

06:54.160 --> 06:56.160
那么这个监听器其实很重要的

06:56.160 --> 06:58.160
特别是在我们以后

06:58.160 --> 07:00.160
要跟Ragson联系的时候

07:00.160 --> 07:02.160
是不是一个监听器就很重要了

07:02.160 --> 07:04.160
Ragson就像有点类似于History

07:04.160 --> 07:06.160
Ragson Router一样

07:06.160 --> 07:07.160
地址变化了

07:07.160 --> 07:09.160
Ragson要收到通知

07:09.160 --> 07:10.160
也是一样

07:10.160 --> 07:12.160
我只要分发了Action

07:12.160 --> 07:14.160
那么数据也可能会发生变化

07:14.160 --> 07:15.160
那么这个时候

07:15.160 --> 07:17.160
我就需要一个东西监听它

07:17.160 --> 07:19.160
让Ragson里面的东西刷新

07:19.160 --> 07:20.160
重新选择

07:20.160 --> 07:22.160
这个东西我们后面会讲

07:22.160 --> 07:23.160
这个监听器

07:23.160 --> 07:25.160
实际上这个函数

07:25.160 --> 07:26.160
它跟History

07:26.160 --> 07:28.160
就是Ragson Router里面的History

07:28.160 --> 07:29.160
是一样的

07:29.160 --> 07:33.160
它会返回一个函数

07:33.160 --> 07:37.160
该函数会返回一个函数

07:37.160 --> 07:39.160
用于取消监听

07:39.160 --> 07:41.160
用于取消监听

07:41.160 --> 07:42.160
比方说

07:42.160 --> 07:43.160
咱们这里

07:46.160 --> 07:47.160
比方说这里

07:47.160 --> 07:49.160
我们这一次分发完了过后

07:49.160 --> 07:50.160
我先把它取消掉

07:50.160 --> 07:52.160
比方说我们这里写一个

07:56.160 --> 07:57.160
这里边

07:57.160 --> 07:59.160
我们第一次分发完了过后

08:02.160 --> 08:03.160
第一次分发完了过后

08:03.160 --> 08:04.160
我调用这个函数

08:04.160 --> 08:06.160
把监听器取消

08:07.160 --> 08:08.160
保存

08:08.160 --> 08:09.160
那你看一下

08:09.160 --> 08:10.160
现在是不是只输出了一个

08:10.160 --> 08:12.160
第二次分发的时候

08:12.160 --> 08:13.160
第二次分发这个Action的时候

08:13.160 --> 08:15.160
是不是没有在监听了

08:15.160 --> 08:16.160
没有运行这个函数了

08:16.160 --> 08:17.160
就这么一个意思

08:17.160 --> 08:18.160
非常简单

08:20.160 --> 08:22.160
这些可能其实主要说的就是

08:22.160 --> 08:24.160
也就是这个注册一个监听器

08:24.160 --> 08:25.160
对吧

08:25.160 --> 08:26.160
其他的没啥了

08:27.160 --> 08:28.160
然后它这里边

08:28.160 --> 08:29.160
我们看一下

08:29.160 --> 08:30.160
它的Stone里面还有啥的

08:30.160 --> 08:31.160
没有啥的

08:31.160 --> 08:32.160
没啥东西

08:32.160 --> 08:33.160
Stone里面的东西就那么几个

08:33.160 --> 08:34.160
保存

08:34.160 --> 08:35.160
看一下

08:35.160 --> 08:36.160
Stone里面

08:36.160 --> 08:37.160
还有这个

08:37.160 --> 08:38.160
还有这个Symbol

08:38.160 --> 08:39.160
这个玩意是啥的

08:39.160 --> 08:41.160
你看它的属性名字

08:41.160 --> 08:43.160
就知道它是一个私有的属性

08:43.160 --> 08:44.160
对吧

08:44.160 --> 08:45.160
一个私有的成员

08:45.160 --> 08:46.160
它用了这个符号

08:46.160 --> 08:47.160
Symbol 符号

08:47.160 --> 08:48.160
这一个要加那个名字叫做

08:50.160 --> 08:51.160
有这么一个符号

08:51.160 --> 08:52.160
那么它是个私有成员

08:52.160 --> 08:53.160
这个私有成员是一个方法

08:53.160 --> 08:54.160
因为这个方法

08:54.160 --> 08:55.160
它是一个内部方法

08:55.160 --> 08:56.160
内部方法跟我们没关系

08:56.160 --> 08:57.160
我们也用不了它

08:57.160 --> 08:58.160
对不对

08:58.160 --> 09:00.160
它是一个内部方法

09:00.160 --> 09:01.160
它用来做什么呢

09:01.160 --> 09:02.160
我们后面讲

09:02.160 --> 09:04.160
原码的时候再说吧

09:04.160 --> 09:06.160
应该是夏杰克

09:06.160 --> 09:07.160
夏杰克开始就讲那个

09:07.160 --> 09:08.160
Redux原码了

09:08.160 --> 09:10.160
因为Redux的东西很简单

09:10.160 --> 09:11.160
东西并不多

09:11.160 --> 09:12.160
所以说我们讲完了

09:12.160 --> 09:13.160
它怎么去使用之后

09:13.160 --> 09:15.160
我们就开始讲原码了

09:15.160 --> 09:16.160
OK

09:16.160 --> 09:19.160
那么这是Redux里面的这些东西

09:19.160 --> 09:20.160
没了

09:20.160 --> 09:22.160
其实还有一些小的细节

09:22.160 --> 09:24.160
比方说什么中间键的东西

09:24.160 --> 09:26.160
我们讲完原码之后再说

09:26.160 --> 09:27.160
因为那一块讲完原码之后

09:27.160 --> 09:30.160
你会对它有更加透彻的理解

09:30.160 --> 09:33.160
这是关于Redux的Stone这一块

09:33.160 --> 09:35.160
主要是讲讲这个监听器

09:35.160 --> 09:36.160
以及如何来取消监听

09:36.160 --> 09:39.160
那么这种做法跟History是一样的

09:39.160 --> 09:40.160
好了

09:40.160 --> 09:41.160
其他就没啥了

09:41.160 --> 09:42.160
那么夏杰克

09:42.160 --> 09:44.160
咱们就开始来讲这个原码

09:45.160 --> 09:46.160
行吧

09:46.160 --> 09:48.160
那这一块就到这里了

09:48.160 --> 09:49.160
把个代码就是个监听器

09:49.160 --> 09:50.160
去写一下

09:50.160 --> 09:51.160
写一下就完事了

09:51.160 --> 09:52.160
咱们看下几个

