WEBVTT

00:00.500 --> 00:04.500
轮波图又来了

00:04.500 --> 00:08.100
这个玩意儿咱们已经实现过很多很多遍了

00:08.100 --> 00:10.500
那么我们利用react里边的知识

00:10.500 --> 00:12.100
我们把它写成个主件

00:12.100 --> 00:13.900
写成个轮波图的主件

00:13.900 --> 00:17.500
轮波图一般情况下还有两种

00:17.500 --> 00:19.700
一种是比较简单一点的

00:19.700 --> 00:21.900
简单一点的就是那种

00:21.900 --> 00:24.700
就是不是无缝轮波图

00:24.700 --> 00:27.500
我这里看到的是一个无缝轮波图

00:27.500 --> 00:28.700
这是一个无缝轮波图

00:28.700 --> 00:30.100
你看已经到最后一张了

00:30.100 --> 00:30.900
继续往右的话

00:30.900 --> 00:32.900
你看还可以翻

00:32.900 --> 00:35.100
无缝轮波图稍微要懒一点

00:35.100 --> 00:37.300
在我的企业史基础视频里边

00:37.300 --> 00:39.900
我讲过一个无缝轮波图

00:39.900 --> 00:41.700
那么这些课我们实现的

00:41.700 --> 00:42.900
不是无缝轮波图

00:42.900 --> 00:44.700
就是不是无缝滚动的

00:44.700 --> 00:46.700
所以说要简单一些

00:46.700 --> 00:48.700
因为我们主要是考虑到

00:48.700 --> 00:51.300
我们目前主要是练习react

00:51.300 --> 00:54.500
不要把其他太多跟程序

00:54.500 --> 00:57.500
思维相关的东西套用了太多

00:57.700 --> 00:58.500
当然会有一些

00:58.500 --> 01:00.100
当然不要套用太多

01:00.100 --> 01:02.900
如果设计到太多的程序思维的话

01:02.900 --> 01:04.300
那么有些同学呢

01:04.300 --> 01:07.500
他本身神域思维是可能比较差

01:07.500 --> 01:10.100
加上react本身又是比较新的东西

01:10.100 --> 01:11.700
两个月混合在一起

01:11.700 --> 01:13.900
回来觉得难度就非常高了

01:13.900 --> 01:16.400
他可能会误认为是react的难度

01:16.400 --> 01:17.900
其实是不是的

01:19.100 --> 01:21.400
如果你要实现无缝轮波图的话

01:21.400 --> 01:24.200
那么你下来了自己去试着做一下

01:24.200 --> 01:26.300
其实整个代码结构的话

01:26.300 --> 01:28.100
差不多就是把某一些地方的

01:28.100 --> 01:30.800
把它改成无缝轮波图就完事了

01:30.800 --> 01:34.700
也就是说咱们这节课实现的东西

01:34.700 --> 01:36.300
它不是一个无缝轮波图

01:36.300 --> 01:37.600
不是一个无缝轮波图

01:37.600 --> 01:38.500
比方到最后一张

01:38.500 --> 01:40.900
我们再往摘点及翻翻页的时候

01:40.900 --> 01:43.500
它就跳回到就这样跳回到第一张了

01:43.500 --> 01:44.500
是这样的一个情况

01:46.300 --> 01:47.300
这一刻的东西

01:47.300 --> 01:53.900
不仅仅是我们会练习到reference属性

01:53.900 --> 01:55.500
而且我们还会练习到

01:55.500 --> 01:58.300
很多react之前的一些知识

01:58.300 --> 01:59.900
所以大家下来了一定要跟他做一遍

02:00.800 --> 02:02.900
这里我们首先看到我们的原代码

02:02.900 --> 02:04.500
我这里已经开了一个分支了

02:07.300 --> 02:10.100
我的分支叫做demo轮波图组件

02:10.100 --> 02:12.700
也就是说我们这里要写这么一个组件

02:12.700 --> 02:13.700
把它当成一个组件

02:13.700 --> 02:15.300
以后方便使用

02:15.300 --> 02:17.400
OK我们这里的新建个文件甲

02:17.400 --> 02:18.700
给他取个名字

02:18.700 --> 02:22.500
轮波图的组件我们就用banner吧

02:22.500 --> 02:22.900
banner

02:23.900 --> 02:25.500
大写的笔

02:25.500 --> 02:26.900
一个这么大写

02:26.900 --> 02:28.100
有这么一个组件

02:28.100 --> 02:29.300
当然这个组件里边

02:29.300 --> 02:31.700
我们可能会设计到更多的东西

02:31.700 --> 02:33.700
比方说两个左右切换

02:33.700 --> 02:34.100
对吧

02:34.100 --> 02:35.900
两个左右切换的按钮

02:35.900 --> 02:37.700
还有一个就是说

02:37.700 --> 02:38.700
下边的小底

02:38.700 --> 02:39.300
对吧

02:39.300 --> 02:41.900
还有一句中间这一份可以切换的图片

02:41.900 --> 02:42.500
对吧

02:42.500 --> 02:44.500
它可能会设计到很多东西

02:44.500 --> 02:47.100
那么现在我们既然是用组件化开发

02:47.100 --> 02:49.500
就尽量的把它分细

02:49.500 --> 02:50.900
我们在这个组件里边

02:50.900 --> 02:52.000
就在个banner组件里面

02:52.000 --> 02:54.400
我们只写一个容器

02:54.400 --> 02:56.200
咱们在这里直接个容器

02:56.200 --> 02:57.000
这是个内组件

02:59.000 --> 03:00.200
banner

03:00.200 --> 03:01.800
我们只写这么一个容器

03:01.800 --> 03:02.800
就是div

03:02.800 --> 03:04.200
然后class name

03:04.200 --> 03:06.200
为比方说banner

03:06.200 --> 03:07.700
container

03:07.700 --> 03:08.700
写这么一个内样式

03:08.700 --> 03:11.000
当然我们要去引用一个css

03:11.000 --> 03:15.310
这里把css也写上

03:15.310 --> 03:16.910
这里的import

03:16.910 --> 03:20.050
导入一个css

03:20.050 --> 03:21.950
index.css

03:21.950 --> 03:23.350
把css也写上

03:23.550 --> 03:24.750
banner container

03:24.750 --> 03:26.150
它只是提供一个容器

03:26.150 --> 03:27.150
咱们这个组件里面

03:27.150 --> 03:29.350
它只提供一个容器

03:29.350 --> 03:31.950
那里边我们可以把它分成三个部分

03:31.950 --> 03:33.950
也就是三个组件

03:33.950 --> 03:35.350
把它分成三个组件

03:35.350 --> 03:37.750
一个就是中间图片这个区域

03:37.750 --> 03:39.050
就是这个区域

03:39.050 --> 03:40.750
我先把结构划分好

03:40.750 --> 03:42.550
图片这个区域

03:42.550 --> 03:43.750
当然这个图片很长

03:43.750 --> 03:44.950
只是一处一处

03:44.950 --> 03:45.750
对不对

03:45.750 --> 03:47.850
这个图片当然可能很长

03:47.850 --> 03:50.850
然后还有左右两边两个按钮

03:50.850 --> 03:51.250
对吧

03:51.250 --> 03:51.950
还有这么一个区域

03:51.950 --> 03:53.050
这也是个组件

03:53.050 --> 03:54.750
然后还有下边这个区域

03:54.750 --> 03:56.250
这也是个组件

03:56.250 --> 03:57.850
把它分成这么三个部分

03:57.850 --> 03:59.950
把它尽量的拆分一下

03:59.950 --> 04:01.650
尽量的拆分一下

04:01.650 --> 04:01.850
好

04:01.850 --> 04:04.250
首先我们看到容器这一块

04:04.250 --> 04:05.350
这个容器

04:05.350 --> 04:06.850
就是说这个组件

04:06.850 --> 04:10.850
banner这个组件有哪些东西需要告诉我们

04:10.850 --> 04:12.450
咱们把它写一下

04:12.450 --> 04:14.350
写一下那个static

04:14.350 --> 04:15.250
就是prob

04:15.250 --> 04:16.850
pipes

04:16.850 --> 04:20.450
有哪些数据你需要告诉我们

04:20.450 --> 04:21.850
因为我们要把它做成组件

04:21.850 --> 04:23.450
可能就要尽量的通用对不对

04:23.450 --> 04:24.750
而且我们把它放到哪

04:24.750 --> 04:26.850
放到的common这个文件夹里边

04:26.850 --> 04:28.750
instead还有尽量的通用

04:28.750 --> 04:30.150
要尽量的通用

04:30.150 --> 04:30.850
所以说呢

04:30.850 --> 04:31.650
这一块呢

04:31.650 --> 04:32.850
我们希望呢

04:32.850 --> 04:34.650
他能够给我们提供一些属性

04:34.650 --> 04:37.250
能够帮助我们完成这个宣展

04:37.250 --> 04:41.250
我们把那个prob types倒入进来啊

04:41.250 --> 04:44.350
prob types倒入进来

04:44.350 --> 04:46.850
有哪些属性需要给我们呢

04:46.850 --> 04:48.250
咱们梳理一下啊

04:48.250 --> 04:50.250
首先是这个区域的宽高

04:50.250 --> 04:52.250
一般的说轮波图的话

04:52.250 --> 04:53.650
它是要定宽高的

04:53.650 --> 04:55.050
宽高是要固定的

04:55.050 --> 04:56.350
整个区域的宽高

04:56.350 --> 04:56.650
所以说呢

04:56.650 --> 04:57.850
你要给我一个东西啊

04:57.850 --> 05:00.050
就是整个区域的宽高啊

05:00.050 --> 05:01.450
容器的宽高

05:01.450 --> 05:02.250
这里那边呢

05:02.250 --> 05:04.850
我们给他写上一个位置

05:04.850 --> 05:06.250
宽度

05:06.250 --> 05:06.950
什么类型呢

05:06.950 --> 05:08.150
是一个数字啊

05:08.150 --> 05:09.550
就是prob types

05:09.550 --> 05:11.250
叫什么 number

05:11.250 --> 05:13.650
required

05:13.650 --> 05:14.450
这是宽度

05:14.450 --> 05:16.050
宽度你要给我

05:16.050 --> 05:17.650
容器宽度

05:17.650 --> 05:18.350
还要给我什么呢

05:18.350 --> 05:19.750
高度

05:19.750 --> 05:22.150
就是我们外边去使用这个轮波图的时候呢

05:22.150 --> 05:24.150
就直接使用这个组件就行了

05:24.150 --> 05:24.850
啊

05:24.850 --> 05:26.250
高度

05:26.250 --> 05:27.250
打算注射啊

05:27.250 --> 05:28.050
容器高度

05:28.050 --> 05:29.450
你要告诉我

05:29.450 --> 05:29.650
嗯

05:29.650 --> 05:30.950
还有什么要告诉我呢

05:30.950 --> 05:32.750
还有什么东西要告诉我

05:32.750 --> 05:34.550
是不是你再把图片告诉我啊

05:34.550 --> 05:36.450
有多少张图片对不对啊

05:36.450 --> 05:38.450
把每一张图片的路径

05:38.450 --> 05:39.550
你要告诉我

05:39.550 --> 05:40.050
ok啊

05:40.050 --> 05:41.850
所以说你还要告诉我一个数组啊

05:41.850 --> 05:42.950
images

05:42.950 --> 05:44.250
要告诉我这么一个数组

05:44.250 --> 05:46.550
这个数组里边是什么存放的是

05:46.550 --> 05:47.350
这样子起吧

05:47.350 --> 05:48.550
images

05:48.550 --> 05:49.550
cs

05:49.550 --> 05:50.550
这是

05:50.550 --> 05:53.150
图片路径数组

05:53.150 --> 05:53.650
ok

05:53.650 --> 05:55.350
你得把这个东西告诉我

05:55.350 --> 05:58.550
告诉我过后我才能把图片显示出来对不对

05:58.550 --> 05:59.450
哎

05:59.450 --> 05:59.750
好

05:59.750 --> 06:00.850
这是这一部分

06:00.850 --> 06:02.050
那么剩下的事情呢

06:02.050 --> 06:03.150
就

06:03.150 --> 06:04.050
比方说吧

06:04.050 --> 06:05.150
还可以告诉我一些东西啊

06:05.150 --> 06:06.050
比方说

06:06.050 --> 06:07.550
自动切换的时间

06:07.550 --> 06:08.250
你看这个的

06:08.250 --> 06:10.250
轮波图是可以自动切换的啊

06:10.250 --> 06:11.350
它是可以自动切换的

06:11.350 --> 06:12.750
你看一下

06:12.750 --> 06:13.750
哎

06:13.750 --> 06:16.940
算意思啊

06:16.940 --> 06:18.940
嗯

06:18.940 --> 06:20.140
哎

06:20.240 --> 06:21.840
我这个垃圾垃圾还没做吗

06:21.840 --> 06:22.840
没做自动切换啊

06:22.840 --> 06:24.040
可能当时没做啊

06:24.040 --> 06:25.940
它是应该能够自动切换的啊

06:25.940 --> 06:27.440
应该能够自动切换

06:27.440 --> 06:27.940
所以说呢

06:27.940 --> 06:30.040
自动切换的间隔时间

06:30.040 --> 06:31.040
要告诉我

06:31.040 --> 06:32.840
自动切换的间隔时间

06:32.840 --> 06:34.440
delation

06:34.440 --> 06:35.640
delation

06:35.640 --> 06:36.540
呃

06:36.540 --> 06:37.140
这样吗

06:37.140 --> 06:38.440
out to

06:38.440 --> 06:40.340
out to

06:40.340 --> 06:42.140
delation

06:42.140 --> 06:42.840
啊

06:42.840 --> 06:45.140
这是一个数字

06:45.140 --> 06:46.140
number

06:46.140 --> 06:47.240
is required

06:47.240 --> 06:47.440
好

06:47.440 --> 06:48.440
上面我写错了是吧

06:48.440 --> 06:49.940
应该是一个数组对不对

06:50.040 --> 06:51.340
应该是个数组

06:51.340 --> 06:52.240
prob types

06:52.240 --> 06:53.240
areal

06:53.940 --> 06:55.140
它什么类型的数组呢

06:55.140 --> 06:57.340
应该是一个制幅创的数组

06:57.340 --> 06:58.340
制幅创的数组

06:58.340 --> 06:59.540
图片路径数组嘛

06:59.540 --> 06:59.940
对不对

06:59.940 --> 07:00.940
制幅创数组

07:00.940 --> 07:01.140
啊

07:01.140 --> 07:02.240
那么这个东西是咋呢

07:02.240 --> 07:02.440
啊

07:02.440 --> 07:03.840
上面当也是必须的啊

07:03.840 --> 07:05.740
这些属性都是必须要告诉我的

07:05.740 --> 07:06.040
然后呢

07:06.040 --> 07:08.940
这是自动切换的啊

07:08.940 --> 07:12.180
间隔时间

07:12.180 --> 07:13.380
自动切换的间隔时间

07:13.380 --> 07:14.280
要给我

07:14.280 --> 07:15.780
还有什么东西要给我呢

07:15.780 --> 07:17.180
还有就是每一次切换

07:17.180 --> 07:19.180
你看一张图片切换到另一张图片

07:19.180 --> 07:21.180
它在多长时间内

07:21.180 --> 07:22.880
完成这个滚动

07:22.880 --> 07:23.080
啊

07:23.080 --> 07:24.980
这个时间你也要告诉我

07:24.980 --> 07:26.380
在多长时间内

07:26.380 --> 07:28.080
完成这个滚动

07:28.080 --> 07:28.480
啊

07:28.480 --> 07:29.080
那么这个你呢

07:29.080 --> 07:30.780
我们就直接使用direction嘛

07:30.780 --> 07:31.980
direction

07:31.980 --> 07:33.780
也是一个数字

07:33.780 --> 07:34.480
types

07:34.480 --> 07:35.380
number

07:35.380 --> 07:37.180
is required

07:37.180 --> 07:37.380
啊

07:37.380 --> 07:38.180
表示什么意思呢

07:38.180 --> 07:39.980
它表示

07:39.980 --> 07:42.980
完成一次切换

07:42.980 --> 07:44.980
需要的时间

07:44.980 --> 07:47.180
完成一次切换需要的时间

07:47.180 --> 07:47.480
好

07:47.480 --> 07:48.680
然后这些东西告诉我的过后

07:48.680 --> 07:50.080
还有什么呢

07:50.080 --> 07:51.880
好像也就没啥了吧

07:51.880 --> 07:52.480
啊没啥的

07:52.480 --> 07:53.080
行了吧

07:53.080 --> 07:54.280
那我们先写到这啊

07:54.280 --> 07:54.680
一会呢

07:54.680 --> 07:55.780
还遇到了更多的东西呢

07:55.780 --> 07:56.880
我们再说啊

07:56.880 --> 07:57.480
我们暂时呢

07:57.480 --> 07:59.180
能够想到这有这么一些属性

07:59.180 --> 07:59.680
好OK啊

07:59.680 --> 08:00.580
我们把这些属性呢

08:00.580 --> 08:02.280
给他写上一些默认值

08:02.280 --> 08:03.480
static

08:03.480 --> 08:04.080
嗯

08:04.080 --> 08:05.580
static

08:05.580 --> 08:06.780
yeah

08:06.780 --> 08:07.480
默认值啊

08:07.480 --> 08:09.480
default props

08:09.480 --> 08:10.680
默认值一个个来啊

08:10.680 --> 08:12.280
首先是宽度

08:12.280 --> 08:13.680
宽度的话

08:13.680 --> 08:15.080
如果你不传的话

08:15.080 --> 08:15.880
比方说吧

08:15.880 --> 08:17.180
给他个800吧

08:17.180 --> 08:18.880
我就按照这个宽高来吧

08:18.880 --> 08:19.480
行吧

08:19.480 --> 08:20.080
随便吧

08:20.080 --> 08:20.880
这个随便

08:20.880 --> 08:22.480
你宽高是个默认值吧

08:22.480 --> 08:23.880
这个默认值

08:23.880 --> 08:26.280
宽高520×280

08:26.280 --> 08:26.680
那行吧

08:26.680 --> 08:28.480
那就520×280

08:28.480 --> 08:30.280
啊520高度了

08:30.280 --> 08:32.480
280

08:32.480 --> 08:34.080
要把这些东西都告诉我

08:34.080 --> 08:35.180
对吧

08:35.180 --> 08:36.680
还有什么呢

08:36.680 --> 08:38.780
还有是图片的路径素组

08:38.780 --> 08:38.880
啊

08:38.880 --> 08:39.480
这个素组呢

08:39.480 --> 08:40.080
是一个空素

08:40.080 --> 08:40.980
空素组啊

08:40.980 --> 08:41.680
默认情况下

08:41.680 --> 08:43.380
里边没有图片

08:43.380 --> 08:43.780
然后呢

08:43.780 --> 08:44.180
还有什么呢

08:44.180 --> 08:45.880
out to

08:45.880 --> 08:47.280
duration

08:47.380 --> 08:49.180
自动就是每一间隔

08:49.180 --> 08:50.280
自动切换的时候

08:50.280 --> 08:51.480
间隔多长时间

08:51.480 --> 08:52.680
自动切换一次

08:52.680 --> 08:53.880
比方说三秒钟

08:53.880 --> 08:55.680
就300毫秒

08:55.680 --> 08:56.380
duration

08:56.380 --> 08:57.980
每一次切换的时候

08:57.980 --> 08:59.080
要经过多少时间

08:59.080 --> 08:59.980
比方说一秒钟

08:59.980 --> 09:01.280
这些东西你要知道什么意思啊

09:01.280 --> 09:02.680
比方说500毫秒吧

09:02.680 --> 09:04.780
给他一些默认值啊

09:04.780 --> 09:05.080
好了啊

09:05.080 --> 09:06.280
咱们现在呢

09:06.280 --> 09:07.380
把这个组件呢

09:07.380 --> 09:08.980
给他

09:08.980 --> 09:10.580
应用一下

09:10.580 --> 09:12.080
应用一下这个组件

09:12.080 --> 09:12.280
好

09:12.280 --> 09:13.080
就在这里边

09:13.080 --> 09:14.080
就在这里边

09:14.080 --> 09:14.180
好

09:14.180 --> 09:14.580
我们这里呢

09:14.580 --> 09:15.680
去导入这个组件

09:15.680 --> 09:16.780
来测试一下

09:16.780 --> 09:17.580
主要是测试一下

09:17.580 --> 09:18.780
或者说

09:18.780 --> 09:19.280
咱们呢

09:19.280 --> 09:20.480
直接把这个测试代码

09:20.480 --> 09:21.880
来写到这也可以

09:21.880 --> 09:23.080
test.js

09:23.080 --> 09:23.680
夜箱啊

09:23.680 --> 09:24.880
夜箱

09:24.880 --> 09:25.480
啊

09:25.480 --> 09:25.980
测试嘛

09:25.980 --> 09:26.280
对不对

09:26.280 --> 09:27.180
测试

09:27.180 --> 09:27.380
好

09:27.380 --> 09:27.880
这里呢

09:27.880 --> 09:28.580
导入一个啊

09:28.580 --> 09:30.180
rcc

09:30.180 --> 09:31.480
这是test

09:31.480 --> 09:34.980
导入一个组件啊

09:34.980 --> 09:35.980
叫做

09:35.980 --> 09:39.480
banner from the index

09:39.480 --> 09:40.680
把这个组件导入进来

09:40.680 --> 09:41.180
那么这里呢

09:41.180 --> 09:42.480
我就直接使用这个组件

09:42.480 --> 09:43.480
就完事了啊

09:43.480 --> 09:45.180
直接使用这个组件

09:45.180 --> 09:46.280
给他个容器嘛

09:46.280 --> 09:47.280
或者说

09:47.280 --> 09:48.280
给他个容器

09:48.280 --> 09:49.480
给他个容器

09:49.480 --> 09:51.280
div

09:51.280 --> 09:52.480
div

09:52.480 --> 09:53.680
呃

09:53.680 --> 09:54.580
container

09:54.580 --> 09:55.880
给他个容器

09:55.880 --> 09:56.480
然后呢

09:56.480 --> 09:58.480
这个banner组件导入进来

09:58.480 --> 09:58.680
好

09:58.680 --> 09:59.980
那么在app里边呢

09:59.980 --> 10:00.780
我们就

10:00.780 --> 10:01.780
直接使用这个组件

10:01.780 --> 10:02.680
就完事了

10:02.680 --> 10:03.780
import

10:03.780 --> 10:04.580
test

10:04.580 --> 10:06.780
front

10:06.780 --> 10:07.680
comment

10:07.680 --> 10:08.080
然后呢

10:08.080 --> 10:08.980
banner

10:08.980 --> 10:09.780
test

10:09.780 --> 10:11.780
测试一下啊

10:11.780 --> 10:14.490
test放过来

10:14.490 --> 10:14.590
好

10:14.590 --> 10:15.090
行了啊

10:15.090 --> 10:16.190
咱们把它运行出来啊

10:16.190 --> 10:17.690
首先看一下我们的div

10:17.690 --> 10:19.090
有没有出来

10:19.090 --> 10:19.990
ccd

10:19.990 --> 10:20.990
react

10:20.990 --> 10:22.090
ner

10:22.090 --> 10:23.590
yard start

10:23.590 --> 10:24.890
啊

10:24.890 --> 10:25.690
这个东西呢

10:25.690 --> 10:26.590
稍微有点多啊

10:26.590 --> 10:27.090
不着急的

10:27.090 --> 10:28.290
慢慢写

10:28.290 --> 10:29.190
写组件呢

10:29.190 --> 10:30.490
就是写起来

10:30.490 --> 10:32.090
虽然好像说时间长

10:32.090 --> 10:32.290
呃

10:32.290 --> 10:33.090
好像写的

10:33.090 --> 10:35.090
跟以前的原生的动物比起来

10:35.090 --> 10:35.590
好像

10:35.590 --> 10:37.190
做一些小功能的时候啊

10:37.190 --> 10:38.890
做一些小的功能的时候呢

10:38.890 --> 10:41.090
可能感觉时间上要写的长一点

10:41.090 --> 10:42.490
但是你非常非常稳健

10:42.490 --> 10:43.390
这样子写代码

10:43.390 --> 10:44.090
写代码呢

10:44.090 --> 10:45.490
质量是非常高的啊

10:45.590 --> 10:45.990
而且呢

10:45.990 --> 10:46.890
非常容易维护

10:46.890 --> 10:48.890
因为它是一块一块花纷的啊

10:48.890 --> 10:50.590
花纷的非常细啊

10:50.590 --> 10:51.390
咱们可以看到啊

10:51.390 --> 10:51.790
这么点

10:51.790 --> 10:52.690
container出来了啊

10:52.690 --> 10:53.590
这个banner contenter

10:53.590 --> 10:54.490
是不是也出来了

10:54.490 --> 10:55.390
对不对

10:55.390 --> 10:55.890
ok啊

10:55.890 --> 10:56.790
那咱们就认了

10:56.790 --> 10:58.390
就差不多写好了

10:58.390 --> 10:58.590
好

10:58.590 --> 10:59.290
这个组件写好了

10:59.290 --> 11:00.390
之后呢

11:00.390 --> 11:00.490
啊

11:00.490 --> 11:01.290
之后呢

11:01.290 --> 11:01.690
咱们呢

11:01.690 --> 11:03.190
可以给他传递一些属性

11:03.190 --> 11:03.790
对吧

11:03.790 --> 11:04.390
他不是有属

11:04.390 --> 11:05.790
他不是需要一些属性吗

11:05.790 --> 11:06.890
这里啊

11:06.890 --> 11:08.090
他需要这么多属性吗

11:08.090 --> 11:08.990
可以给他传递

11:08.990 --> 11:10.090
当然也可以不传递啊

11:10.090 --> 11:11.190
也可以不传递

11:11.190 --> 11:13.290
就是看你看你心情

11:13.290 --> 11:13.990
看你心情

11:14.090 --> 11:14.590
要不要传递

11:14.590 --> 11:16.290
因为这些都有默认值啊

11:16.290 --> 11:17.690
都有默认值

11:17.690 --> 11:17.790
好

11:17.790 --> 11:18.390
我们这里呢

11:18.390 --> 11:19.090
就假设啊

11:19.090 --> 11:20.890
这些属性都都传过来了

11:20.890 --> 11:22.390
管它是默认值也好

11:22.390 --> 11:24.090
或者说它传过来的也好

11:24.090 --> 11:24.990
无所谓啊

11:24.990 --> 11:27.490
咱们可以在这个rex这个结构里边

11:27.490 --> 11:29.290
可以看得非常清楚啊

11:29.290 --> 11:29.590
啊

11:29.590 --> 11:30.790
这个banner这个组件里边

11:30.790 --> 11:33.090
你看这些属性是不是都有默认值了

11:33.090 --> 11:34.090
对不对

11:34.090 --> 11:34.190
啊

11:34.190 --> 11:35.690
管它是哪来的

11:35.690 --> 11:36.090
咱们呢

11:36.090 --> 11:37.290
要根据这些数据呢

11:37.290 --> 11:38.690
来进行渲染

11:38.690 --> 11:41.390
首先我们最容易想到的就是这个div啊

11:41.390 --> 11:42.390
这个div

11:42.390 --> 11:43.390
这个div呢

11:43.390 --> 11:45.190
肯定有一些样式啊

11:45.190 --> 11:46.190
特别是宽高

11:46.190 --> 11:46.990
对不对

11:46.990 --> 11:47.890
好宽高呢

11:47.890 --> 11:49.490
由于是来自于属性

11:49.490 --> 11:50.190
所以说呢

11:50.190 --> 11:51.990
宽高这个位置的值呢

11:51.990 --> 11:54.190
我们就不能在css里边写了

11:54.190 --> 11:55.190
这里边写不了

11:55.190 --> 11:55.890
为什么写不了呢

11:55.890 --> 11:57.490
你看一下你咋写吧

11:57.490 --> 11:58.190
啊你这里

11:58.190 --> 11:59.190
把我复制一下啊

12:00.490 --> 12:01.990
这里比较写个那样式

12:01.990 --> 12:02.290
然后呢

12:02.290 --> 12:04.090
该写的是宽度的要式是多少呢

12:04.090 --> 12:04.890
这里没法写

12:04.890 --> 12:06.690
因为它是来自于属性的

12:06.690 --> 12:07.990
就这里没法写

12:07.990 --> 12:08.490
因此呢

12:08.490 --> 12:10.390
我们要把这个宽高写到哪呢

12:10.390 --> 12:11.390
写到这啊

12:11.390 --> 12:12.290
写到这

12:12.390 --> 12:13.090
有对象吧

12:13.090 --> 12:13.990
对不对啊

12:13.990 --> 12:15.190
咱们这个东西也做过的

12:16.290 --> 12:17.890
啊写成那点样式啊

12:17.890 --> 12:19.490
宽度来自于哪呢

12:19.490 --> 12:21.090
来自于z

12:21.390 --> 12:22.090
probs

12:22.590 --> 12:23.290
位置啊

12:23.290 --> 12:24.490
来自于这里宽度

12:24.490 --> 12:25.690
高度来自于哪呢

12:25.690 --> 12:26.690
来自于z

12:26.690 --> 12:27.290
probs

12:27.290 --> 12:28.290
der height

12:29.090 --> 12:29.890
宽高

12:29.890 --> 12:30.890
先给他设置一下

12:31.390 --> 12:32.090
保存

12:32.090 --> 12:32.990
咱们来看一下吧

12:35.320 --> 12:36.320
啊出来了啊

12:36.320 --> 12:36.720
这里呢

12:36.720 --> 12:38.320
我们看一下这个banner啊

12:38.320 --> 12:40.220
那么他里边有个div啊

12:40.220 --> 12:40.920
这个div呢

12:40.920 --> 12:41.920
你看style里边

12:41.920 --> 12:43.920
是不是宽度高度就加进去了啊

12:44.020 --> 12:44.920
啊我们可以看到这里

12:44.920 --> 12:45.320
你看

12:46.220 --> 12:47.120
放了一百百分之百

12:47.120 --> 12:47.620
你看

12:47.720 --> 12:49.120
这个区的宽高是不是出来了

12:49.120 --> 12:50.420
我们把放放过来吧

12:51.020 --> 12:52.120
啊你看这个区啊

12:53.620 --> 12:55.320
啊这个区区的宽高是不是出来了

12:55.320 --> 12:55.820
对不对

12:56.420 --> 12:57.720
好然后这一块

12:57.720 --> 12:58.620
这是容器啊

12:58.620 --> 13:00.320
容器这一块是不是属性

13:00.320 --> 13:01.420
宽高属性搞定的

13:01.420 --> 13:03.520
那么除了除了这个宽高之外呢

13:03.520 --> 13:05.220
这个容器里边还有哪些属性呢

13:05.220 --> 13:06.720
我们一会呢想到再写

13:06.720 --> 13:07.320
目前呢

13:07.320 --> 13:08.720
我能够想到的是什么

13:08.720 --> 13:11.020
他有个这么一个属性叫pration-relative

13:11.420 --> 13:12.920
为什么有这么一个属性呢

13:12.920 --> 13:13.720
你想啊

13:14.820 --> 13:16.020
这个轮波图里边

13:16.020 --> 13:17.520
他里边肯定有决定位

13:17.520 --> 13:18.920
你看这个东西是不是决定位

13:19.320 --> 13:20.420
包括下面这个啊

13:20.420 --> 13:21.120
这个按钮

13:21.320 --> 13:21.820
你看这里

13:22.020 --> 13:23.420
下面这个按钮是不是决定位

13:23.420 --> 13:23.820
对吧

13:23.820 --> 13:25.720
他有这么一些绝对定位的元素

13:25.920 --> 13:26.720
所以说呢

13:26.720 --> 13:27.520
这一块啊

13:28.320 --> 13:29.520
就是轮波图这一块呢

13:30.120 --> 13:30.820
咱们呢

13:31.320 --> 13:32.020
他的容器呢

13:32.020 --> 13:33.420
把它设成相对定位

13:33.520 --> 13:33.920
这样子呢

13:33.920 --> 13:35.120
他里边决定位的时候呢

13:35.120 --> 13:35.920
可以根据他来

13:36.020 --> 13:36.420
对吧

13:36.420 --> 13:37.620
这个东西没什么好说的

13:38.420 --> 13:40.220
好就说成这么一个东西了啊

13:40.220 --> 13:42.320
为了方便我们看到效果啊

13:42.320 --> 13:43.620
为了方便我们查看效果

13:43.620 --> 13:45.120
我先给他加上一个Border

13:45.720 --> 13:47.520
先给他加上一个啊

13:47.520 --> 13:49.520
这主要是为了我方便我们看到效果

13:49.520 --> 13:49.920
你看

13:50.320 --> 13:51.220
这个荒荒是不出来了

13:51.220 --> 13:51.520
对吧

13:51.520 --> 13:52.320
就是这个DIV

13:53.520 --> 13:53.720
好

13:53.720 --> 13:55.620
然后他里边有什么东西呢

13:55.720 --> 13:58.120
他里边首先有一个容器

13:58.120 --> 13:59.320
这个容器来干嘛呢

13:59.320 --> 14:01.120
他是在装图片的啊

14:01.120 --> 14:02.520
这个容器在专门来装

14:02.520 --> 14:03.720
这里边的图片啊

14:03.720 --> 14:05.020
专门来装这里边图片

14:05.420 --> 14:06.720
那么这个容器呢

14:06.920 --> 14:09.220
我们专门来写一个组件

14:09.220 --> 14:11.320
因为如果你全部都都在这里边写

14:11.320 --> 14:11.920
行不行

14:12.320 --> 14:14.320
现在不要去想什么Rave那些东西啊

14:14.320 --> 14:15.320
不要去想这些东西

14:15.320 --> 14:16.520
我们就根据思路来

14:16.820 --> 14:18.620
该用的时候自然而然就出现了

14:19.320 --> 14:20.020
那么现在呢

14:20.020 --> 14:23.220
我们要写他的这个DIV里边的东西

14:23.820 --> 14:25.220
那么如果全部在这里写

14:25.220 --> 14:25.620
行不行

14:25.620 --> 14:26.720
当然可以

14:26.720 --> 14:29.020
只不过这里的代码就显得非常非常复杂

14:29.020 --> 14:29.820
而雍重

14:30.120 --> 14:31.120
所以说有的时候呢

14:31.120 --> 14:33.720
我们在某一个组件的制作过程中

14:33.720 --> 14:36.120
我们可能会对他进行再一次拆分

14:36.120 --> 14:37.920
把它拆分的更加细一点

14:38.720 --> 14:39.320
我们现在呢

14:39.320 --> 14:41.620
把这个组件里边的像这个图片啊

14:41.820 --> 14:43.220
这肯定有很多图片对吧

14:43.220 --> 14:44.920
只是后边的我们看不见了啊

14:44.920 --> 14:46.120
一处隐藏掉了

14:46.120 --> 14:47.320
你看吧这里的DIV

14:47.320 --> 14:48.620
如果不怕那是为一处隐藏

14:48.620 --> 14:51.620
你看是实际上是冰层一排的这个图片

14:51.620 --> 14:52.220
对不对

14:52.220 --> 14:52.420
好

14:52.420 --> 14:53.520
我们把这个地方呢

14:54.520 --> 14:55.320
写成了容器

14:55.320 --> 14:57.020
这个容器里边的装了很多图片

14:57.320 --> 14:58.620
我们把整个这个容器呢

14:58.620 --> 14:59.720
又做成一个组件

15:00.520 --> 15:01.120
没问题吧

15:01.320 --> 15:02.520
但这个组件了

15:02.820 --> 15:03.820
这个组件呢

15:03.820 --> 15:06.720
他只跟这个Banner组件有关系

15:06.720 --> 15:07.720
就只跟他有关系

15:07.720 --> 15:10.620
他他是完全为为这个组件服务的

15:11.020 --> 15:11.420
所以说呢

15:11.420 --> 15:14.020
我们在组件的这个工程结构上呢

15:14.020 --> 15:15.820
我们就不在外面去建文件夹了

15:15.820 --> 15:18.020
而直接在这里边建一个文件夹

15:18.020 --> 15:19.420
比方说英力级

15:19.420 --> 15:21.420
Kantena 图片容器

15:22.620 --> 15:23.720
有这么一个文件夹

15:23.720 --> 15:24.920
他这个组件的作用呢

15:24.920 --> 15:26.620
仅仅是为了拆分代码啊

15:26.620 --> 15:29.320
让这个代码的更加容易阅读

15:29.320 --> 15:30.920
不要一块代码全部写到一起

15:30.920 --> 15:31.920
太复杂了

15:31.920 --> 15:33.120
是这么个意思啊

15:33.120 --> 15:34.020
是这么个意思

15:34.020 --> 15:34.620
那么这里呢

15:34.620 --> 15:36.120
我们写上一个index 而且是

15:36.120 --> 15:38.320
你看继续拆分啊

15:38.320 --> 15:39.620
那么这里还有什么index

15:40.420 --> 15:41.920
cc我们先暂时不写吧

15:41.920 --> 15:43.520
我现在也不能确定他里边要不要

15:43.520 --> 15:44.720
就是写一些内样式

15:45.720 --> 15:46.220
然后呢

15:46.220 --> 15:46.720
我们这里呢

15:46.720 --> 15:48.220
就是是不是就直接使用那个组件

15:48.220 --> 15:48.820
就完事了

15:48.820 --> 15:49.220
对吧

15:49.220 --> 15:50.520
把这个图件导入进来

15:50.520 --> 15:51.020
啊

15:51.020 --> 15:51.620
就是什么

15:51.620 --> 15:52.920
1米级Kantena

15:52.920 --> 15:54.820
有一个图片容器啊

15:54.820 --> 15:56.620
有一个图片容器啊

15:57.220 --> 15:58.620
把这个图片容器导入进来

15:59.320 --> 16:00.020
将来哎

16:00.020 --> 16:01.220
早办法把这个图片容器啊

16:01.220 --> 16:01.820
导入进来

16:02.620 --> 16:03.620
那么到这边来啊

16:03.620 --> 16:04.420
这边肯定也

16:04.420 --> 16:05.620
我们可以用内组件

16:05.620 --> 16:06.920
也可以用韩束组件

16:06.920 --> 16:07.820
其实无所谓啊

16:07.820 --> 16:08.420
无所谓的

16:09.020 --> 16:10.120
1米级Kantena

16:11.120 --> 16:11.720
啊比方说啊

16:11.720 --> 16:12.420
我们用内组件

16:13.220 --> 16:13.420
好

16:13.420 --> 16:14.620
那么在这个组件里边

16:14.620 --> 16:16.120
咱们来再来思考一下啊

16:16.120 --> 16:17.620
那么我们做组件开发的时候

16:17.620 --> 16:19.720
它的好处在于可以拆分功能

16:19.720 --> 16:21.220
我们就把功能尽量拆分细

16:21.920 --> 16:22.520
这个组件呢

16:22.520 --> 16:24.120
我们就不要去想什么

16:24.120 --> 16:26.120
就想这个什么这个安柳啊

16:26.120 --> 16:27.620
下面这个小圆点啊

16:27.620 --> 16:29.120
这些东西就不要去想啊

16:29.120 --> 16:31.020
就做这么一个图片容器啊

16:31.020 --> 16:32.520
就做这么一个图片容器

16:32.520 --> 16:34.420
那么他需要知道什么东西呢

16:34.420 --> 16:34.920
你告诉我

16:34.920 --> 16:36.420
他需要知道哪些东西

16:36.420 --> 16:37.920
我才能把这个容器写出来

16:38.920 --> 16:39.520
你想啊

16:39.520 --> 16:40.420
首先第一个啊

16:41.120 --> 16:42.720
他要知道这个图片有哪些

16:42.720 --> 16:43.220
对不对

16:44.020 --> 16:46.620
图片的src路径有哪些

16:46.620 --> 16:47.620
是不是要给告诉我

16:47.620 --> 16:48.020
不然的话

16:48.020 --> 16:49.620
我到时候怎么来生成1米级元素

16:49.620 --> 16:50.820
怎么来写进去了

16:50.820 --> 16:51.720
对不对啊

16:51.720 --> 16:52.520
写不出来

16:52.520 --> 16:52.920
所以说呢

16:52.920 --> 16:53.820
你得告诉我

16:53.820 --> 16:55.920
有哪些src路径

16:55.920 --> 16:58.220
你再把图片的src路径告诉我

16:58.220 --> 16:58.520
所以说呢

16:58.520 --> 16:59.220
我们这里呢

16:59.220 --> 17:00.820
约束一下这里的属性啊

17:00.820 --> 17:01.720
prob

17:01.720 --> 17:02.920
prob types

17:02.920 --> 17:03.320
不着急啊

17:03.320 --> 17:04.020
咱们慢慢写

17:04.020 --> 17:05.220
大家也可以体会到

17:05.220 --> 17:07.020
在组件化开发里边

17:07.120 --> 17:08.720
咱们来写这么一个轮波图

17:09.220 --> 17:11.420
会是用怎样的一种写法

17:12.220 --> 17:13.820
会用一种什么样的识路

17:14.720 --> 17:16.220
prob types

17:17.020 --> 17:18.320
那么这里一个个约束啊

17:18.320 --> 17:20.420
首先是1米级srcs

17:20.420 --> 17:22.520
它是一个字无串的数组

17:22.520 --> 17:24.020
prob types

17:24.020 --> 17:25.620
我们写这的时候就不要想太多啊

17:25.620 --> 17:27.120
就想这一个组件就行了

17:27.120 --> 17:27.920
而vr

17:28.320 --> 17:30.220
它是一个什么类型的数组呢

17:30.220 --> 17:33.020
它是一个字无串的数组

17:33.420 --> 17:34.320
字无串的数组

17:35.420 --> 17:36.920
这是图片路径数组

17:38.020 --> 17:40.220
图片路径的数组

17:43.660 --> 17:44.360
走一下啊

17:44.860 --> 17:46.260
好除了这个东西告诉我之外

17:46.260 --> 17:47.360
还要告诉我什么了

17:47.360 --> 17:48.460
你还要告诉我什么

17:49.060 --> 17:50.360
还要告诉我

17:50.360 --> 17:51.460
因为我这个容器啊

17:51.460 --> 17:52.960
我得设置宽度对吧

17:52.960 --> 17:54.060
你宽度不够的话

17:54.060 --> 17:55.460
它怎么来排成一排呢

17:55.460 --> 17:56.060
对不对

17:56.060 --> 17:58.160
我得设置这个图片的宽度啊

17:58.160 --> 17:59.360
我要设置它的宽度

17:59.360 --> 18:00.760
所以说要设置宽度的话

18:00.760 --> 18:02.460
就涉及到涉及到一个问题啊

18:02.460 --> 18:05.460
你要告诉我每一张图片的宽高啊

18:05.460 --> 18:07.560
你得把每一张图片的宽高告诉我

18:07.560 --> 18:08.660
1米级位置

18:09.260 --> 18:09.860
啊

18:09.860 --> 18:10.960
它是一个数字

18:11.960 --> 18:12.060
啊

18:12.060 --> 18:13.160
就是Number

18:13.160 --> 18:13.760
哎

18:13.760 --> 18:14.660
这里写的是

18:15.260 --> 18:18.860
Prob,Taps,Number isRequired

18:19.860 --> 18:20.060
好

18:20.060 --> 18:20.960
上边也是啊

18:20.960 --> 18:21.960
也是必填的

18:22.660 --> 18:22.860
啊

18:22.860 --> 18:25.160
这是单张图片宽度

18:25.560 --> 18:27.860
单张图片宽度

18:28.260 --> 18:28.460
好

18:28.460 --> 18:29.360
那么自然的

18:29.360 --> 18:31.060
还有单张图片的高度

18:31.060 --> 18:35.060
Prob,Taps,Number isRequired

18:35.460 --> 18:36.060
这是

18:37.060 --> 18:39.260
单张图片高度

18:39.960 --> 18:40.260
好

18:40.260 --> 18:41.260
单张图片宽度

18:41.260 --> 18:42.160
单张图片高度

18:42.160 --> 18:43.360
这些东西都告诉我

18:43.760 --> 18:43.960
好

18:43.960 --> 18:44.560
那么当然呢

18:44.560 --> 18:45.860
它也有默认值啊

18:45.860 --> 18:47.160
它仍然是有自己的默认值

18:47.160 --> 18:48.360
那默认值你随便写啊

18:48.360 --> 18:49.560
随便给一些默认值

18:49.660 --> 18:51.060
default props

18:51.760 --> 18:52.960
默认的属性有哪些呢

18:52.960 --> 18:53.660
就是1米级

18:53.660 --> 18:54.560
srcs

18:54.560 --> 18:55.260
这是个数组

18:55.260 --> 18:56.560
默认为空数组

18:56.560 --> 18:56.960
然后呢

18:56.960 --> 18:58.060
图片的宽度

18:58.460 --> 18:59.660
宽度为多少呢

18:59.860 --> 19:00.560
宽度呢

19:00.560 --> 19:01.860
比方说吧啊

19:02.260 --> 19:02.860
520

19:03.660 --> 19:04.660
1米级Height

19:04.660 --> 19:05.360
高度呢

19:05.360 --> 19:05.960
280

19:06.160 --> 19:07.360
比方说就这么一些

19:07.760 --> 19:09.060
都要告诉我

19:10.160 --> 19:10.760
没问题吧

19:10.960 --> 19:11.860
这是我们

19:11.960 --> 19:12.760
首先你要清楚啊

19:12.760 --> 19:13.960
我们这一块来做什么

19:14.060 --> 19:15.960
我们就做一个图片的容器

19:16.960 --> 19:18.160
就这个图片容器

19:18.160 --> 19:19.460
把这个图片装起来

19:20.760 --> 19:20.860
好

19:20.860 --> 19:21.960
那么现在呢

19:22.460 --> 19:24.360
我们来把这个地方的

19:24.960 --> 19:25.860
UI部分

19:25.860 --> 19:26.460
就是它

19:26.760 --> 19:28.460
渲染的时候把它完成

19:28.460 --> 19:29.760
为了测试方便

19:29.760 --> 19:30.660
那么我们这里呢

19:30.660 --> 19:31.360
使用这个组件

19:31.360 --> 19:32.260
它不是要传属性吗

19:32.260 --> 19:32.460
对吧

19:32.460 --> 19:33.660
我要把属性传给它

19:34.060 --> 19:35.860
srcs来自于哪呢

19:36.060 --> 19:37.060
所以来自于我

19:37.060 --> 19:38.360
又把我这个属性传过去

19:38.360 --> 19:38.860
对吧

19:39.060 --> 19:40.860
我这个属性不是为别人告诉我了

19:40.860 --> 19:42.060
我有哪些图片路线

19:42.060 --> 19:43.460
那先把我传给里边

19:43.760 --> 19:46.360
还有图片的单张图片的宽度

19:46.660 --> 19:47.360
为什么呢

19:47.560 --> 19:49.160
是不是就来自于这个容器的宽度

19:49.160 --> 19:50.660
这个容器的宽高是多少

19:50.660 --> 19:52.260
一张图片宽高就是多少

19:52.360 --> 19:52.860
对吧

19:52.860 --> 19:54.960
你看我们这边一个容器

19:55.060 --> 19:56.660
这个容器的宽高是多少

19:56.660 --> 19:58.760
那么一张图片的宽高就是多少

19:59.160 --> 20:00.160
所以说我们这里呢

20:00.260 --> 20:01.460
把一张图片的宽高呢

20:01.460 --> 20:02.760
来自于这个容器的

20:03.060 --> 20:04.560
srcs宽度

20:04.960 --> 20:06.860
然后呢一张图片的高度呢

20:06.860 --> 20:08.260
来自于这个容器的

20:08.260 --> 20:10.660
srcs height

20:11.260 --> 20:12.660
这里可以把换个航

20:14.460 --> 20:15.860
换个航来传辑这个属性

20:15.860 --> 20:16.660
就一个组件

20:18.160 --> 20:18.260
好

20:18.260 --> 20:18.760
行了啊

20:18.760 --> 20:20.060
这就是一个移密级抗体那

20:20.060 --> 20:21.260
那么剩下的事情交给你的

20:21.260 --> 20:22.060
我不管了

20:22.060 --> 20:23.060
你去完成它

20:24.160 --> 20:24.360
好

20:24.360 --> 20:25.560
那么到这里边来

20:26.060 --> 20:26.760
这里边呢

20:26.760 --> 20:28.860
我们要去给这个div呢

20:28.860 --> 20:30.060
设置样式

20:30.260 --> 20:30.560
对吧

20:30.560 --> 20:31.860
我们要给它设置样式

20:32.860 --> 20:33.260
好

20:33.260 --> 20:35.160
它的样式里边有哪些东西呢

20:35.660 --> 20:38.160
首先呢是整个div的宽度

20:38.560 --> 20:39.360
宽度有多少

20:40.460 --> 20:41.160
宽度有多少

20:41.360 --> 20:42.860
是不是有几张图片

20:42.960 --> 20:45.060
然后再去乘以每一张图片的宽度

20:45.060 --> 20:46.660
就是整个容器的宽度

20:46.660 --> 20:47.060
对吧

20:47.060 --> 20:48.260
就是整个容器的宽度

20:48.260 --> 20:48.660
所以说呢

20:48.660 --> 20:49.460
我们这个宽度呢

20:49.460 --> 20:50.060
很好算

20:50.160 --> 20:51.260
就是来自于

20:51.860 --> 20:52.860
属性里边的什么

20:52.860 --> 20:54.560
1m级srcs

20:54.660 --> 20:55.660
第二什么nance

20:56.560 --> 20:57.760
这个图片的数量

20:57.860 --> 20:58.860
乘以什么呢

20:59.060 --> 21:01.660
每一张图片的宽度

21:02.160 --> 21:02.460
对吧

21:02.460 --> 21:03.760
就是个容器的宽度

21:04.460 --> 21:04.560
好

21:04.560 --> 21:05.460
那么自然而然

21:05.460 --> 21:06.560
容器的高度呢

21:07.260 --> 21:08.360
容器的高度呢

21:08.760 --> 21:10.460
就是srcs

21:10.860 --> 21:11.560
1m级

21:12.360 --> 21:13.760
就是1m级Height

21:13.760 --> 21:14.960
高度只有一个

21:15.260 --> 21:15.560
对吧

21:15.560 --> 21:16.060
高度只有一个

21:16.060 --> 21:17.060
不用去野计算了

21:17.060 --> 21:18.660
就直接拿过来就行了

21:19.460 --> 21:19.660
好

21:19.660 --> 21:21.460
这就是一张图片的宽高

21:21.460 --> 21:22.360
是不是写出来了

21:22.460 --> 21:23.060
对不对

21:23.560 --> 21:23.960
好

21:24.160 --> 21:24.960
然后呢

21:24.960 --> 21:27.060
这里边是不是要写图片了啊

21:27.160 --> 21:27.460
注意啊

21:27.460 --> 21:28.860
我这里没有用什么A元数啊

21:28.860 --> 21:30.360
没有用什么超链阶类

21:30.360 --> 21:30.660
当然

21:30.660 --> 21:31.960
如果你要加超链阶的话

21:31.960 --> 21:33.360
你要多传一些属性过来

21:33.360 --> 21:34.660
我这里没有用这个东西

21:34.660 --> 21:34.760
好

21:34.760 --> 21:36.360
我们就直接只用图片吧

21:36.360 --> 21:37.760
比方说咱们只用图片

21:38.160 --> 21:38.560
好

21:38.960 --> 21:39.560
这里边呢

21:39.560 --> 21:41.360
我们写上这么一张图片啊

21:41.360 --> 21:41.760
一个

21:42.160 --> 21:43.660
有哪有多少张图片呢

21:43.660 --> 21:45.960
是不是这个src数组有多少

21:46.160 --> 21:47.360
数组里边有多少个

21:47.360 --> 21:48.960
那么这里的图片就多少张

21:48.960 --> 21:49.560
对不对

21:49.560 --> 21:50.560
他就有多少张

21:50.660 --> 21:51.160
因此呢

21:51.160 --> 21:52.460
我们这里边呢

21:52.560 --> 21:53.660
写上那个图片的

21:53.660 --> 21:55.460
根据这个图片的路径呢

21:55.560 --> 21:58.660
我们可以生成一个图片的组件数组

21:59.360 --> 22:00.660
他不是个数组吗

22:00.860 --> 22:01.460
他是一个什么

22:01.460 --> 22:02.660
图片路径的数组

22:02.660 --> 22:03.160
对不对

22:03.160 --> 22:03.360
好

22:03.360 --> 22:04.460
我们是用map

22:05.160 --> 22:06.660
把每一个路径拿到

22:07.060 --> 22:07.460
然后呢

22:07.460 --> 22:09.060
每一个路径对应一个什么呢

22:09.060 --> 22:09.860
对应一个

22:10.060 --> 22:11.160
1米级元素

22:11.760 --> 22:13.060
对一个1米级元素

22:13.560 --> 22:13.760
好

22:13.760 --> 22:14.860
每一个1米级呢

22:14.860 --> 22:16.460
是不是有src数形

22:16.660 --> 22:17.160
等于啥

22:17.160 --> 22:18.560
是不是就乃至于这个

22:18.560 --> 22:20.160
数形指 src

22:20.160 --> 22:20.760
对不对

22:21.160 --> 22:21.960
还有什么

22:21.960 --> 22:22.860
alt数形

22:22.860 --> 22:24.260
alt数形啥都不用写

22:24.260 --> 22:24.960
不用写就完事了

22:25.760 --> 22:26.160
对吧

22:26.160 --> 22:28.460
我们根据这个src这个数组呢

22:28.460 --> 22:30.860
来生成图片元素的数组

22:30.960 --> 22:32.260
当然由于这里

22:32.560 --> 22:33.360
说过很多次

22:33.360 --> 22:34.360
还要使用keyz

22:34.760 --> 22:35.460
key的话

22:35.460 --> 22:37.060
我们就直接使用in这个什么

22:37.660 --> 22:38.960
使用它的下标

22:40.660 --> 22:41.560
使用这个下标

22:42.260 --> 22:42.460
好

22:42.460 --> 22:42.960
这样子呢

22:42.960 --> 22:44.660
我们又得到了一个图片的数组

22:44.760 --> 22:46.160
得到这么一个图片的数组

22:46.960 --> 22:47.160
好

22:48.160 --> 22:48.560
这里呢

22:48.560 --> 22:50.360
我们把这个图片的数组直接放进来

22:50.760 --> 22:51.760
直接放进来就完事了

22:52.560 --> 22:52.760
对吧

22:52.760 --> 22:53.760
这个容器又写好了

22:53.760 --> 22:54.360
目前呢

22:54.360 --> 22:56.960
功能非常非常简单的那个容器就写好了

22:57.560 --> 22:57.860
好

22:57.860 --> 22:59.360
写好了之后呢

22:59.860 --> 23:00.760
写好了之后呢

23:00.960 --> 23:01.860
咱们在这里

23:03.360 --> 23:04.860
在那个tesa里边呢

23:05.360 --> 23:06.760
不是要传递图片路径吗

23:06.760 --> 23:07.160
对不对

23:07.160 --> 23:08.960
emg src s

23:08.960 --> 23:09.360
对吧

23:09.460 --> 23:10.860
要传一个数组进去

23:10.960 --> 23:11.360
ok啊

23:11.360 --> 23:12.060
咱们这里呢

23:12.060 --> 23:13.260
就给他给他一个数组

23:13.560 --> 23:14.360
就给他一个

23:14.760 --> 23:14.960
好

23:14.960 --> 23:15.260
这里呢

23:15.260 --> 23:16.260
为了测试啊

23:16.260 --> 23:17.960
我就干脆把这个图片

23:18.360 --> 23:19.360
把他放进来吧

23:19.560 --> 23:20.060
放进来

23:20.560 --> 23:21.260
复制一下啊

23:21.960 --> 23:23.260
把放到这个文件夹里边去

23:24.760 --> 23:25.460
把人测试嘛

23:25.460 --> 23:25.960
对不对

23:26.060 --> 23:27.060
都是测试的啊

23:28.060 --> 23:28.360
啊

23:28.360 --> 23:29.060
这个emg啊

23:29.060 --> 23:29.960
都是测试的啊

23:30.560 --> 23:31.260
咱们这里呢

23:31.260 --> 23:32.760
得到这些图片的路径啊

23:32.760 --> 23:33.760
得到这些图片路径

23:33.860 --> 23:34.560
import

23:35.160 --> 23:37.060
得到这个emg文件夹

23:37.060 --> 23:38.360
下边的所有图片路径啊

23:38.360 --> 23:39.760
这里稍微麻烦一点啊

23:39.760 --> 23:40.660
emg e

23:41.060 --> 23:41.160
啊

23:41.160 --> 23:43.360
就是或者是src e

23:43.560 --> 23:44.160
fran

23:44.560 --> 23:44.760
啊

23:44.760 --> 23:45.360
fran

23:45.560 --> 23:47.660
来自于emg

23:47.960 --> 23:48.360
是吧

23:48.360 --> 23:49.660
1.jpg

23:49.860 --> 23:50.360
ok啊

23:50.360 --> 23:52.260
咱们一共有五张吗

23:52.760 --> 23:53.360
测试

23:54.160 --> 23:54.560
2

23:54.960 --> 23:55.460
3

23:55.560 --> 23:56.160
4

23:56.360 --> 23:56.760
5

23:57.060 --> 23:57.260
好

23:57.260 --> 23:57.960
那么这里是

23:57.960 --> 23:59.860
2.webp

24:00.760 --> 24:03.560
这里是5.webp

24:04.760 --> 24:05.660
这里是4

24:06.160 --> 24:06.960
这里是3

24:07.160 --> 24:07.760
行了啊

24:07.960 --> 24:10.060
于是那么就把这些图片路径全部拿到

24:10.060 --> 24:10.360
对吧

24:10.360 --> 24:10.960
全部拿到

24:11.160 --> 24:12.260
拿到之后呢

24:12.260 --> 24:13.660
我们是不是可以把数组放进来了

24:13.660 --> 24:13.960
对吧

24:13.960 --> 24:14.860
反正测试嘛

24:14.860 --> 24:15.860
src2

24:15.860 --> 24:16.860
src3

24:16.860 --> 24:18.060
src4

24:18.360 --> 24:19.360
src5

24:20.360 --> 24:20.860
ok

24:21.160 --> 24:21.860
全部放进来

24:21.860 --> 24:22.260
保存

24:22.260 --> 24:22.960
看一下啊

24:22.960 --> 24:23.760
要不要看一下

24:24.160 --> 24:24.460
哎

24:24.460 --> 24:25.860
咱们这里图片是不是出来了

24:26.060 --> 24:26.460
对吧

24:26.460 --> 24:27.660
你看在这里啊

24:28.060 --> 24:29.160
图片是不是出来了

24:29.360 --> 24:29.860
对不对

24:30.260 --> 24:31.460
哎这里图片呢

24:31.460 --> 24:32.860
就全部放进去了啊

24:32.860 --> 24:33.860
你看啊

24:33.860 --> 24:34.760
emg content

24:34.760 --> 24:36.660
容器的宽高也设置好了啊

24:36.660 --> 24:37.660
这里边的图片呢

24:37.660 --> 24:38.460
也放进去了

24:38.860 --> 24:40.460
为了避免这里边的图片呢

24:40.460 --> 24:42.060
他出现一个现象就是说

24:42.060 --> 24:42.860
这里边的图片呢

24:42.860 --> 24:43.860
他可能宽高

24:43.860 --> 24:45.060
跟这个宽高不一样

24:45.560 --> 24:47.060
有可能跟这个宽高不一样

24:47.060 --> 24:47.960
为了防止这一点

24:47.960 --> 24:49.660
因为我们目前的这些图片是

24:49.660 --> 24:50.760
自动宽高的

24:50.760 --> 24:51.760
所以说呢

24:51.760 --> 24:52.760
我们这里呢

24:52.760 --> 24:54.060
需要啊

24:54.360 --> 24:56.460
手动的去给他图片设置一下宽高

24:56.660 --> 24:58.060
因为防止呢

24:58.060 --> 24:58.960
这个图片的宽高呢

24:58.960 --> 25:00.260
不是我们想要的宽高

25:00.560 --> 25:01.660
我们找到这里啊

25:01.660 --> 25:02.760
找到一个emg content

25:02.760 --> 25:03.860
那这里不是有很多图片啊

25:03.860 --> 25:04.860
对吧啊

25:04.860 --> 25:06.960
这个图片里边再给他写个style

25:07.260 --> 25:08.160
啊写个样式

25:09.360 --> 25:10.460
他的宽度呢

25:10.460 --> 25:11.760
也来自于proper

25:11.760 --> 25:13.960
属性里边不是一个emg位置吗

25:14.460 --> 25:15.460
他的高度呢

25:15.460 --> 25:18.860
也来自于属性里边emg height

25:19.860 --> 25:20.260
好

25:20.360 --> 25:21.760
把这个图片的宽高

25:22.060 --> 25:23.460
也给他设置一下啊

25:24.360 --> 25:24.760
嗯

25:24.760 --> 25:26.360
而且呢我们知道这个图片呢

25:26.360 --> 25:27.760
它是一个航河啊

25:27.960 --> 25:28.860
航河之间呢

25:28.860 --> 25:30.560
有可能会出现空白折叠呀

25:30.560 --> 25:31.860
有可能会出现什么

25:32.060 --> 25:32.560
嗯

25:32.560 --> 25:34.160
什么什么那个

25:34.160 --> 25:34.860
白边呀

25:34.860 --> 25:35.860
这些的东西对吧

25:36.160 --> 25:37.160
那么我们这里呢

25:37.160 --> 25:38.460
为了防止这种情况呢

25:38.460 --> 25:41.060
我们可以让这些图片全部浮动起来啊

25:41.060 --> 25:42.160
全部都浮动起来

25:42.460 --> 25:43.060
float

25:44.060 --> 25:44.560
net

25:44.860 --> 25:45.760
全部浮动起来

25:47.160 --> 25:48.160
啊变成快和了

25:48.160 --> 25:48.660
对不对

25:48.660 --> 25:49.860
一浮动就变成快和了

25:50.160 --> 25:51.760
好保存看一下啊

25:52.760 --> 25:53.060
好

25:53.060 --> 25:54.560
那效果呢是一样的啊

25:54.560 --> 25:54.960
你看

25:55.260 --> 25:56.360
说装到容器里边了

25:56.360 --> 25:57.160
对不对啊

25:57.160 --> 25:58.460
现在我们整个的图片呢

25:58.460 --> 25:59.560
他装到容器里边了

25:59.560 --> 26:00.260
看一下啊

26:00.660 --> 26:01.360
咱们banner的

26:01.360 --> 26:03.060
你看这个区域也只有这么一点

26:03.160 --> 26:04.660
然后呢里边这个container的

26:05.160 --> 26:05.560
哎

26:05.960 --> 26:08.060
哦这个这个banner的container

26:08.060 --> 26:08.860
这个容器的里边呢

26:08.860 --> 26:09.860
他只有这么一点

26:09.860 --> 26:10.960
但是他里边的container

26:10.960 --> 26:11.960
你看这个emg contenter

26:11.960 --> 26:12.960
他很宽对吧

26:12.960 --> 26:14.060
他非常非常宽

26:14.160 --> 26:15.460
然后emg里边呢

26:16.660 --> 26:17.360
设置了什么

26:17.360 --> 26:19.360
设置了这个就是嗯

26:20.160 --> 26:21.960
这里边啊有很多图片啊

26:21.960 --> 26:22.660
有很多图片

26:23.260 --> 26:24.060
不要的意思吧

26:24.460 --> 26:25.660
嗯好啊

26:25.660 --> 26:27.260
那么这里呢就搞定了

26:27.860 --> 26:29.460
把这个图片就设置进去了

26:30.860 --> 26:31.260
呃

26:31.260 --> 26:32.660
然后我们继续来看啊

26:32.660 --> 26:33.960
这里边我们看一下

26:33.960 --> 26:35.560
哎我刚才看看这个DAV

26:35.560 --> 26:36.860
哦没问题啊没问题

26:38.560 --> 26:39.060
好

26:39.260 --> 26:40.260
然后我们继续看啊

26:40.260 --> 26:41.260
那么现在这个

26:41.260 --> 26:43.560
这个emg contenter这个组件

26:43.860 --> 26:44.760
他要不要

26:44.860 --> 26:47.060
还要不要提供一下什么功能呢

26:48.060 --> 26:48.860
就说啊

26:49.460 --> 26:51.160
咱们这个图片呢

26:51.460 --> 26:53.160
啊就咱们这个图片呢

26:53.160 --> 26:54.560
他肯定要切换

26:54.860 --> 26:57.160
那么切换的时候是不是有一段动画

26:57.160 --> 26:57.660
对吧

26:58.160 --> 27:02.360
从某一张图片切换到另一张图片

27:02.460 --> 27:03.060
对不对

27:03.060 --> 27:05.060
他肯定有这么一个动画啊

27:05.060 --> 27:06.060
有这么一个动画

27:06.360 --> 27:08.160
所以说不管他怎么切换啊

27:08.160 --> 27:10.560
不管到时候我们点这个原点切换也好

27:10.660 --> 27:13.160
或者是点这个尖头来切换也好

27:13.260 --> 27:15.460
他始终会经过这么一段动画啊

27:15.460 --> 27:16.360
来进行切换

27:16.860 --> 27:19.260
嗯我们要在这个组件里边去实现

27:19.260 --> 27:20.260
那个动画呢

27:20.260 --> 27:23.160
其实要实现也不是不能实现

27:23.760 --> 27:25.260
只是比较麻烦

27:25.760 --> 27:28.560
就比方说我们这里的假设啊

27:28.760 --> 27:30.560
咱们希望在这个组件里边呢

27:30.560 --> 27:31.760
实现这么一个动画呢

27:32.060 --> 27:32.960
我希望呢

27:32.960 --> 27:35.260
他是能够直接操作动物元素

27:35.560 --> 27:37.160
直接操作动物元素呢

27:37.160 --> 27:39.060
是显得最简单的啊

27:39.060 --> 27:39.960
显得最简单

27:40.360 --> 27:41.360
因此呢

27:41.460 --> 27:42.460
我们以后呢

27:42.460 --> 27:44.260
肯定要得到动物元素

27:44.360 --> 27:45.960
来直接操动他

27:46.460 --> 27:48.160
那么得到哪个动物元素呢

27:48.160 --> 27:48.960
那就随意了啊

27:48.960 --> 27:50.560
看你这个动画该怎么来做

27:50.560 --> 27:51.660
那比方说吧

27:51.660 --> 27:52.360
我们到时候呢

27:52.360 --> 27:53.960
要得到这个div啊

27:54.060 --> 27:55.460
我们要设置这个div的什么呢

27:55.560 --> 27:57.360
设置他的marking left

27:58.060 --> 27:59.160
到时候我们设置这个东西

28:00.060 --> 28:01.260
啊设置这个div啊

28:01.260 --> 28:02.860
这个div设置他的什么呢

28:02.960 --> 28:04.560
设置他的marking left

28:05.560 --> 28:06.560
marking left

28:06.960 --> 28:07.760
设置这个玩意

28:08.060 --> 28:09.260
把它设置为几呢

28:09.560 --> 28:10.460
把它设置为多少呢

28:10.460 --> 28:11.060
不要说啊

28:11.260 --> 28:12.660
嗯第一张图片

28:12.660 --> 28:14.060
那就把它设置为0对吧

28:14.360 --> 28:15.360
那么第二张图片

28:15.360 --> 28:16.260
那就把它设置为多少

28:16.360 --> 28:18.460
把它设置为-520个相处

28:18.560 --> 28:19.660
你看说切换到第二张了

28:19.660 --> 28:20.160
对不对

28:20.560 --> 28:22.760
哎我们到时候就设置这个div

28:22.760 --> 28:24.760
就这个div的marking left

28:25.160 --> 28:27.460
来完成这个图片切换

28:28.560 --> 28:31.060
那么要完成图片切换的话

28:31.260 --> 28:32.460
你要告诉我

28:32.860 --> 28:34.960
切换到第几张啊

28:35.060 --> 28:37.160
你要把图片切换到第几张

28:37.360 --> 28:38.960
因此呢我希望呢

28:38.960 --> 28:40.160
这个组件里边呢

28:40.160 --> 28:42.060
给我提供这么一个函数

28:42.560 --> 28:43.160
叫做什么呢

28:43.160 --> 28:43.960
switch

28:44.260 --> 28:44.860
切换

28:45.660 --> 28:46.960
切换switch to

28:47.060 --> 28:49.060
切换到第几张图片

28:49.060 --> 28:50.660
你给我传一个下标进来

28:52.360 --> 28:52.860
这是

28:54.660 --> 28:57.860
切换到第几张啊

28:59.260 --> 29:01.760
图片啊切换到第几张图片

29:01.860 --> 29:02.960
你给我传个下标

29:02.960 --> 29:05.060
我只要一调用这个函数

29:06.660 --> 29:08.060
调用该函数

29:08.460 --> 29:09.860
调用该函数

29:14.300 --> 29:15.400
持组件

29:16.600 --> 29:18.600
会经过一段

29:19.400 --> 29:21.500
动画完成切换

29:21.700 --> 29:23.600
到时候呢你只要调用这个函数

29:23.600 --> 29:24.500
一调用的话

29:24.500 --> 29:27.600
那么我就会按照你指定的参数的值

29:27.700 --> 29:29.600
来切换到指定的张数

29:29.600 --> 29:31.000
切换到某一张图片

29:31.200 --> 29:32.000
你要这意思吗

29:32.600 --> 29:34.100
我们就写这么一个函数

29:34.600 --> 29:35.600
写上这么一个函数

29:36.400 --> 29:37.300
这个函数呢

29:37.300 --> 29:38.300
我调不调用呢

29:38.300 --> 29:39.200
我不调用啊

29:39.200 --> 29:39.700
我

29:39.700 --> 29:41.700
我只是个容器啊

29:41.800 --> 29:43.700
我没有能力去调用这个事情

29:43.700 --> 29:44.900
因为到时候呢

29:44.900 --> 29:46.200
什么自动切换呀

29:46.200 --> 29:47.600
点这个按钮啊

29:47.600 --> 29:48.900
还有点这个玩意啊

29:48.900 --> 29:49.700
这些东西对吧

29:49.700 --> 29:50.700
点这些东西呢

29:50.700 --> 29:52.100
都是外边的人去调用的

29:52.100 --> 29:52.900
比如说这个函数呢

29:52.900 --> 29:54.700
是提供给外边的人调用的

29:54.800 --> 29:56.800
那么到时候外边的人

29:56.800 --> 29:58.400
怎么去调用这个函数呢

29:58.400 --> 29:59.400
我们之后再说

29:59.400 --> 30:00.500
但是我现在不管

30:00.500 --> 30:01.500
我现在只是把这个

30:01.500 --> 30:03.300
我这个组件功能要提供出来

30:03.500 --> 30:04.200
对不对啊

30:04.200 --> 30:06.200
我只是把这个组件功能提供出来

30:06.300 --> 30:08.100
那么你才能进行切换啊

30:08.100 --> 30:08.800
switch to

30:09.800 --> 30:10.100
好

30:10.100 --> 30:12.800
现在的这个函数里边我要干嘛呢

30:12.800 --> 30:14.400
你现在现在不要去想

30:14.500 --> 30:16.100
我怎么去调用这个函数啊

30:16.200 --> 30:17.100
什么时候调用

30:17.100 --> 30:17.800
怎么去调用

30:17.800 --> 30:19.100
先不要去想这些问题

30:19.300 --> 30:21.400
我们就假设已经写出来了啊

30:21.600 --> 30:22.600
一开始没有经验吧

30:22.600 --> 30:24.100
你肯定想不到要写这个函数

30:24.100 --> 30:25.200
但是呢没关系啊

30:25.200 --> 30:26.200
你就假设他

30:26.600 --> 30:27.800
我已经有这个函数了

30:27.800 --> 30:29.000
这个结构已经设出来了

30:29.000 --> 30:30.600
你现在想要想的事情就是

30:30.800 --> 30:32.800
如何去把这个函数去实现

30:33.400 --> 30:35.400
如何去实现这个函数功能

30:36.900 --> 30:37.700
好这个东西是啥

30:37.700 --> 30:38.400
这个东西就是

30:39.700 --> 30:40.800
第几张图片对吧

30:40.800 --> 30:41.600
从零开始啊

30:41.600 --> 30:42.900
这个没什么好说的啊

30:43.400 --> 30:44.200
图片下标

30:45.200 --> 30:46.700
从零开始

30:46.700 --> 30:47.700
好那么现在我们想

30:47.700 --> 30:48.700
怎么去实现这个功能

30:49.700 --> 30:50.700
怎么实现呢

30:50.700 --> 30:53.700
我们到时候是不是要去设置这个div的什么

30:53.700 --> 30:54.900
margin left

30:54.900 --> 30:55.500
对不对

30:55.500 --> 30:57.700
要去设置他的margin left

30:58.500 --> 30:59.700
那么要设置他的时候

30:59.700 --> 31:01.100
我们可以怎么做呢

31:01.100 --> 31:02.100
我们可以呢

31:02.100 --> 31:03.000
用这种方式

31:03.000 --> 31:05.100
就这里有两种模式

31:05.100 --> 31:07.100
地动模式就是直接使用一个状态

31:07.400 --> 31:07.900
状态呢

31:07.900 --> 31:09.300
给他设置上一个margin

31:09.700 --> 31:10.700
margin left

31:10.900 --> 31:12.300
给他设置这么一个字啊

31:12.900 --> 31:13.900
默认为零啊

31:13.900 --> 31:14.900
默认为零

31:14.900 --> 31:15.300
然后呢

31:15.300 --> 31:15.700
这里呢

31:15.700 --> 31:17.900
就是给他写上这个啊

31:18.800 --> 31:19.600
在这啊

31:19.600 --> 31:22.800
给他写上这个什么margin left

31:22.900 --> 31:24.000
啊给他写上这个

31:24.100 --> 31:25.200
从零开始啊

31:25.200 --> 31:26.200
从那个什么z

31:26.200 --> 31:28.100
stats里边margin left

31:28.100 --> 31:29.000
从这里开始

31:29.000 --> 31:29.600
那么以后

31:29.600 --> 31:30.300
我要切换的时候

31:30.300 --> 31:31.800
是不是改动这个margin left

31:31.800 --> 31:33.000
只要一改动状态里边

31:33.000 --> 31:33.600
margin left

31:33.600 --> 31:35.400
是不是他就自动刷新了

31:35.400 --> 31:35.900
对不对

31:35.900 --> 31:37.000
他就自动刷新了啊

31:37.000 --> 31:38.100
因为重新宣展嘛

31:38.500 --> 31:39.800
重新宣展他自动刷新

31:40.300 --> 31:41.600
这是一种方案啊

31:41.600 --> 31:42.500
这是一种方案

31:42.900 --> 31:43.900
另外一种方案呢

31:43.900 --> 31:45.800
是我们直接改变动物对象

31:46.400 --> 31:48.400
那两种方案有什么区别呢

31:48.600 --> 31:49.300
就第一种方案

31:49.300 --> 31:50.300
用这种方案的话

31:50.300 --> 31:53.300
他更加符合react的设计啊原则

31:53.300 --> 31:54.100
但这种方案呢

31:54.100 --> 31:57.200
稍微效率上的稍微要低那么一丢丢

31:57.200 --> 31:58.300
不说这种方案不能用啊

31:58.300 --> 32:00.100
这种方案肯定是可以用的

32:00.200 --> 32:02.800
只不过他效率上稍微低那么一丢丢

32:02.800 --> 32:03.300
为什么呢

32:03.300 --> 32:05.000
因为他要重新去宣展

32:05.200 --> 32:05.900
重新去宣展

32:05.900 --> 32:08.700
也是不是要进入啊react生命周期

32:08.700 --> 32:09.200
对吧

32:09.300 --> 32:11.500
他要经过一场上的勾字函数

32:11.600 --> 32:13.900
还要干嘛重新增长蓄力动物对象

32:14.000 --> 32:14.300
然后呢

32:14.300 --> 32:16.300
还要对比以前真实的动物啊

32:16.300 --> 32:18.500
我们后边还会详细的讲这个过程啊

32:18.900 --> 32:20.600
啊还会对比真实的动物

32:20.600 --> 32:22.700
然后重新去宣展真实的动物啊

32:22.700 --> 32:23.700
这是一种方式

32:23.700 --> 32:24.500
当然这种方式呢

32:24.900 --> 32:26.700
他低也低低不了哪去啊

32:26.700 --> 32:28.700
也少了他也办不到哪去

32:28.900 --> 32:30.700
所以说这种方案完全是可行的

32:31.100 --> 32:34.000
那么现在既然我们现在在学习这个ref

32:34.300 --> 32:35.800
那么还有另外一种方案就是

32:35.900 --> 32:37.600
直接操作那个动物元素

32:37.700 --> 32:39.100
就不用去端下拔刀东西了啊

32:39.100 --> 32:40.400
你也不用重新宣展了

32:40.400 --> 32:42.400
我就直接给你操作那个动物元素完事

32:42.800 --> 32:44.600
啊直接给你操作操作这个动物元素

32:45.000 --> 32:46.900
好所以说呢我们这里

32:47.800 --> 32:48.200
啊

32:48.800 --> 32:50.500
这个switch to啊这里呢

32:50.600 --> 32:51.600
我们干嘛呢

32:51.900 --> 32:54.800
我们这里呢直接操作动物元素即可

32:55.500 --> 32:57.500
好怎么来直接操作动物元素呢

32:57.900 --> 33:00.000
我们就必须要得到这个动物元素的吧

33:00.000 --> 33:01.900
一都没有得到怎么来操作呢

33:02.200 --> 33:03.900
所以说如果来得到这个动物元素

33:03.900 --> 33:05.200
是不是要用ref了

33:05.300 --> 33:06.700
哎呀这个东西就出来了啊

33:07.000 --> 33:07.800
ref

33:08.300 --> 33:10.800
好为什么呢好ref这里呢

33:10.800 --> 33:12.700
我们可以给他写上这么一个

33:13.700 --> 33:14.900
写上这么一个函数吗啊

33:14.900 --> 33:16.900
写上这么一个函数啊ref

33:19.200 --> 33:20.700
为什么呢为一个函数啊

33:22.830 --> 33:24.330
有见头函数啊

33:24.330 --> 33:26.730
当我们当我们调用这个ref的时候

33:26.730 --> 33:28.130
就是this叫ref

33:29.630 --> 33:31.130
换个名字啊换个名字

33:31.230 --> 33:32.130
container

33:32.630 --> 33:33.430
ref

33:36.940 --> 33:38.940
避免跟这个聪明啊

33:40.040 --> 33:41.440
然后呢我们这里呢

33:41.940 --> 33:43.840
有这么一个ref它是个函数

33:43.840 --> 33:45.040
它什么是调用函数

33:45.040 --> 33:46.240
所以以前说过的对吧

33:46.340 --> 33:47.740
只如果是同一个函数呢

33:47.740 --> 33:50.140
它就是在什么component dd mount的时候

33:50.140 --> 33:52.040
调用一次啊调用一个函数

33:52.140 --> 33:53.340
那么调用函数的时候呢

33:53.340 --> 33:56.240
咱们就把这个元素呢保存起来啊

33:56.340 --> 33:58.340
保存起来保存到哪呢

33:58.740 --> 34:00.440
咱们把这个元素保存到哪呢

34:00.640 --> 34:02.040
可以把它保存到这个

34:02.640 --> 34:03.540
啊一个变量吧

34:03.540 --> 34:05.540
把它保存到一个变量里边去啊

34:05.540 --> 34:06.240
什么变量呢

34:06.740 --> 34:07.340
嗯

34:08.640 --> 34:10.840
container啊就div啊就div

34:11.040 --> 34:11.840
啊保存到这里边

34:12.440 --> 34:14.040
行吧啊没问题吧啊

34:14.040 --> 34:15.840
把它保存到这个变量里边啊

34:15.840 --> 34:17.040
保存到这个div里边

34:18.240 --> 34:20.040
好有了这个东西过后

34:20.040 --> 34:22.540
当我们再一次调用这个switch 2的时候呢

34:22.940 --> 34:24.940
当我们再一次调用它的时候呢

34:25.040 --> 34:25.740
怎么办呢

34:25.740 --> 34:28.340
我是不是可以拿到通过这个东西拿到这个div了

34:28.340 --> 34:28.940
对不对

34:29.240 --> 34:31.540
调用这个玩意的时候可以拿到这个div了

34:31.940 --> 34:32.640
没问题吧

34:33.440 --> 34:36.540
好啊为了让我们看到效果呢

34:36.540 --> 34:37.640
先来测试一下吧

34:38.040 --> 34:40.140
测试一下输出z使叫div

34:40.240 --> 34:42.340
看一下啊能不能拿到这个div

34:43.140 --> 34:44.440
好有了这个ref

34:45.240 --> 34:47.640
我们再看一下ref里边它是个函数

34:47.640 --> 34:51.140
它把这个元素呢保存到了这个属性div里边去

34:51.440 --> 34:54.740
后边呢我们就可以通过这个z使叫属性啊div

34:54.740 --> 34:56.340
能够拿到这个动物元素

34:56.340 --> 34:57.840
这就是个真实的动物元素了

34:59.340 --> 35:02.240
好啊为了看到效果呢

35:02.240 --> 35:04.340
我们这里呢我看一下调试器里边

35:04.340 --> 35:06.740
我这个这种事情我还没有试过啊

35:06.940 --> 35:09.940
就在调试器里边直接调用那个组件的函数

35:10.340 --> 35:12.540
好像是不着行不行啊

35:13.340 --> 35:13.940
不着行不行

35:14.840 --> 35:16.840
好咱们呢可以看到啊

35:16.840 --> 35:20.040
这里呢有个ref啊f是个函数

35:20.140 --> 35:21.740
然后呢这是我们的容器

35:22.340 --> 35:24.140
好像是不行啊

35:24.540 --> 35:25.540
好像是不行

35:26.340 --> 35:29.340
不行的话那咱们就这样子来

35:29.540 --> 35:30.340
这样子来

35:30.340 --> 35:31.240
我们还是在这里

35:31.240 --> 35:33.240
副元素里边去测试一下啊

35:33.540 --> 35:34.940
副元素里边去测试一下

35:34.940 --> 35:36.740
这里我们把这个in这个设计打印出来

35:37.540 --> 35:38.840
我们把这个结构写好

35:39.840 --> 35:42.140
到那个副主线里边去啊

35:42.140 --> 35:43.240
这里不在用这个主线吗

35:43.240 --> 35:44.240
对吧好

35:44.240 --> 35:45.640
我们什么时候比方说啊

35:45.640 --> 35:48.240
这个副主线里边有一个按钮啊

35:48.240 --> 35:49.440
一个按钮啊

35:49.440 --> 35:51.040
到第几张呢

35:51.240 --> 35:51.640
第

35:52.640 --> 35:53.840
第啊

35:54.440 --> 35:55.440
三张图片

35:56.340 --> 35:57.940
到第三张图片啊

35:57.940 --> 35:58.740
点击过后呢

35:58.740 --> 36:01.340
我们要把它就是选择到第三张图片

36:01.440 --> 36:02.040
onclick

36:02.540 --> 36:03.440
点击的时候

36:03.740 --> 36:04.540
我们要干嘛呢

36:06.710 --> 36:09.510
我们要切换到第三张图片啊

36:09.810 --> 36:10.610
切换到

36:11.910 --> 36:12.810
第三张图片

36:14.310 --> 36:14.910
没问题吧

36:15.310 --> 36:16.010
点击的时候呢

36:16.010 --> 36:18.410
我们切换到地这么张图片

36:18.510 --> 36:18.710
好

36:18.710 --> 36:20.910
我们可以也可以单独写个函数出来

36:20.910 --> 36:21.710
做这个事啊

36:22.010 --> 36:25.410
就是handle switch

36:25.710 --> 36:26.410
switch

36:27.510 --> 36:28.710
你给我一个参数啊

36:29.110 --> 36:31.010
告诉我切换到第几张图片

36:32.610 --> 36:33.410
写这么一个函数

36:36.740 --> 36:37.640
你给我一个参数啊

36:37.640 --> 36:40.140
in这个设切换到第几张图片

36:42.080 --> 36:42.980
切换到

36:42.980 --> 36:43.280
注意啊

36:43.280 --> 36:44.480
我们现在代码写到哪的

36:44.480 --> 36:45.380
现在写到这个

36:45.780 --> 36:47.180
banner这个组件里面的啊

36:47.180 --> 36:48.680
其实不是这个组件里面啊

36:48.680 --> 36:49.380
这个组件里面

36:49.680 --> 36:51.180
这个组件里面他也有个切换

36:51.180 --> 36:52.280
他两者有什么区别呢

36:52.280 --> 36:53.480
就这个组件里面啊

36:53.480 --> 36:54.480
就这个组件里面

36:55.280 --> 36:57.180
他只负责切换图片

36:57.180 --> 36:58.080
其他什么都不干

36:58.480 --> 36:59.680
那周里面要切换

36:59.680 --> 37:00.880
是不是要做很多事情了

37:00.980 --> 37:01.480
对不对

37:01.480 --> 37:02.780
他肯定要做很多事情啊

37:02.780 --> 37:04.180
他不光是要那个

37:04.180 --> 37:05.980
就是完成一个动画切换

37:06.080 --> 37:07.780
还要做比方说切换那个

37:07.780 --> 37:09.180
当前选中了的一个东西

37:09.180 --> 37:09.580
对吧

37:10.180 --> 37:11.480
这些东西都很会

37:11.580 --> 37:12.480
要设计

37:12.480 --> 37:13.680
因此呢这里呢

37:14.280 --> 37:16.380
需要这么个函数啊

37:16.480 --> 37:18.180
切换到第几张图片啊

37:18.380 --> 37:19.580
假设有这么个函数

37:20.380 --> 37:22.380
好那么在这个函数里边呢

37:22.380 --> 37:23.180
我们怎么来写呢

37:23.180 --> 37:24.880
其实我们就要调用什么

37:25.480 --> 37:26.380
我们在这里啊

37:26.680 --> 37:27.780
切换到第三张啊

37:27.780 --> 37:29.080
我们这里Z

37:30.580 --> 37:31.680
指向这个函数啊

37:31.880 --> 37:33.380
handle switch

37:34.080 --> 37:34.480
这里

37:37.280 --> 37:37.680
不行

37:37.680 --> 37:38.480
还有这样子写

37:38.480 --> 37:39.480
还是用这个剑断函数

37:39.480 --> 37:41.280
因为我们要要传个函数进去

37:41.480 --> 37:43.780
Z handle switch

37:43.880 --> 37:44.680
这里写3

37:45.180 --> 37:45.480
对吧

37:45.480 --> 37:47.080
我们这里点击按钮过后了

37:47.080 --> 37:48.480
可以切换到第三张图片

37:48.680 --> 37:50.780
那么关键是在这里边到这边来了

37:51.280 --> 37:53.480
这边我们要完成切换的话

37:53.680 --> 37:55.380
那么最终是不是要调用这个

37:55.380 --> 37:56.780
主键里边的方法

37:56.980 --> 37:57.280
对吧

37:57.280 --> 37:58.380
要调用这个里边的方法

37:58.380 --> 37:59.380
switch to对不对

37:59.680 --> 38:00.980
啊你看这个结构啊

38:01.180 --> 38:03.780
他要去得到多么元素来完成切换

38:03.880 --> 38:05.980
于是他他又提供了这么一个方法

38:06.080 --> 38:06.780
那么这个方法呢

38:06.780 --> 38:07.980
外边是不是要调用

38:07.980 --> 38:08.280
对吧

38:08.280 --> 38:09.680
外边要调用这个方法

38:09.680 --> 38:10.580
那么要调用一个方法

38:10.580 --> 38:11.580
是不是要设计的一个问题

38:11.580 --> 38:12.780
就是要得到什么

38:13.080 --> 38:14.680
得到1米级

38:15.980 --> 38:18.480
container的主键对象

38:18.480 --> 38:19.780
要把对象得到

38:19.780 --> 38:21.380
因为这是个对象里边的方法

38:21.380 --> 38:21.780
对吧

38:21.780 --> 38:22.880
你都没有对象的话

38:22.880 --> 38:24.180
怎么来去调用这个方法呢

38:24.980 --> 38:27.080
所以说这里是不是又要得阿耶夫了

38:27.680 --> 38:29.480
啊你没有这个阿耶夫的话

38:29.480 --> 38:30.580
你能得到他的对象吗

38:30.580 --> 38:31.580
你是得不到的啊

38:31.580 --> 38:32.580
得不到他的对象

38:32.780 --> 38:34.280
你休想调用他里边的方法

38:34.680 --> 38:34.980
所以说呢

38:34.980 --> 38:36.380
我们得把他得到好

38:36.380 --> 38:37.480
这里呢又来一个啊

38:39.080 --> 38:40.380
这是1米级

38:40.480 --> 38:41.280
container

38:41.480 --> 38:42.280
阿耶夫

38:42.680 --> 38:43.880
好也是个函数啊

38:45.080 --> 38:45.780
Z

38:45.980 --> 38:47.780
啊1米级container

38:48.680 --> 38:49.080
也

38:49.980 --> 38:50.880
好那么这里呢

38:50.880 --> 38:51.780
我们就可以把个

38:51.880 --> 38:53.480
reef加上啊Z

38:53.880 --> 38:54.880
1米级container

38:54.980 --> 38:55.480
reef

38:56.080 --> 38:57.280
好他也是个函数啊

38:57.280 --> 38:58.380
他的作用是一样的

38:58.480 --> 38:58.880
来

38:59.680 --> 39:01.580
获取这个他的主键对象

39:01.580 --> 39:02.680
因为他是个内主键吗

39:02.680 --> 39:04.380
他不是内置的ATM主键

39:04.380 --> 39:04.780
因此呢

39:04.780 --> 39:06.580
他得到了不是真实的动物元素

39:06.580 --> 39:08.280
得到了是这个主键的对象

39:08.980 --> 39:10.280
好那么现在我们得到主键对象了

39:10.280 --> 39:10.680
对吧

39:10.680 --> 39:11.780
我们就可以通过什么

39:11.980 --> 39:14.380
通过Z是1米级container

39:14.480 --> 39:16.080
通过这个属性值

39:16.180 --> 39:18.480
来得到这个属性对象啊

39:18.480 --> 39:19.480
得了个主键对象

39:19.480 --> 39:20.880
把打印出来看一下吧

39:22.280 --> 39:23.480
得了个主键对象

39:23.580 --> 39:25.380
那么通过这个对象里边啊

39:25.380 --> 39:27.480
是不是可以调用什么Switch2了

39:28.480 --> 39:29.980
是不是可以调用一个对象里边的方法

39:29.980 --> 39:31.680
Switch2把index传进去

39:31.880 --> 39:32.380
对吧

39:32.480 --> 39:34.780
他是这样一层一层引用过来的啊

39:34.980 --> 39:36.880
那么有些朋友感觉很复杂这里

39:36.880 --> 39:38.980
其实你如果你感觉很复杂的话

39:39.080 --> 39:40.880
你的思维又搅在一块了

39:40.980 --> 39:42.580
你老是在写这个主键的时候

39:42.580 --> 39:43.780
又去想到这个主键

39:43.980 --> 39:45.480
你不要去想这个问题

39:45.580 --> 39:46.780
你写这个主键的时候呢

39:46.780 --> 39:48.180
你就尽量只想这个主键

39:48.280 --> 39:49.580
我这个主键提供一个函数

39:49.580 --> 39:50.680
我来切换就完事了

39:51.380 --> 39:52.880
好那么这个主键要去调用这个函数

39:52.880 --> 39:54.880
那就必须要把对象获取到对吧

39:55.080 --> 39:55.980
你不获取到对象

39:55.980 --> 39:57.980
你是没法得到对象里面的方法的

39:57.980 --> 39:59.380
你是没法调用这个函数的

39:59.480 --> 40:00.980
他的目标主要是调用这个函数

40:00.980 --> 40:02.980
他就不用去想这个函数里边

40:02.980 --> 40:03.780
他做了什么事情

40:03.780 --> 40:04.380
他不用去想

40:05.780 --> 40:06.980
好那么写成这么一种结构

40:07.380 --> 40:08.180
保存看一下

40:08.880 --> 40:09.780
那么现在呢我们

40:10.780 --> 40:11.580
空载里边啊

40:13.280 --> 40:13.680
这里

40:15.480 --> 40:17.480
好这里点击切换到第三张图片

40:17.480 --> 40:19.380
你看一下打印出来的结果

40:19.580 --> 40:20.880
第一个是不是得到一个主键对象

40:20.880 --> 40:21.380
对吧

40:21.480 --> 40:22.880
主键对象里边是不是有个

40:23.480 --> 40:24.880
你看原型里边是不是个

40:25.080 --> 40:26.080
switch 2对吧

40:26.080 --> 40:27.080
有这么一个方法

40:27.180 --> 40:27.880
那么我们在

40:28.780 --> 40:29.780
歪层的主键里面

40:29.780 --> 40:31.080
就整个斑断主键里面

40:31.080 --> 40:32.380
我们得到的这么一个东西

40:32.380 --> 40:33.280
那么我们自然而然

40:33.280 --> 40:34.680
可以调用他里边的switch 2

40:34.980 --> 40:36.180
那么里边的主键

40:36.280 --> 40:37.780
容器里边得到了是不是

40:38.280 --> 40:39.380
一个真实的动物对象

40:39.380 --> 40:39.780
对吧

40:39.780 --> 40:41.780
而且得到了他当前要切换的下标

40:41.980 --> 40:42.480
看到没

40:42.780 --> 40:44.080
这些东西我们都能得到了

40:45.280 --> 40:45.880
那么现在呢

40:45.880 --> 40:46.480
我们就可以玩

40:46.480 --> 40:47.680
就完成这么一个操作了

40:47.780 --> 40:48.380
在版本里面

40:48.380 --> 40:50.280
我们直接去调用这个switch 2方法

40:50.280 --> 40:52.280
就可以完成图片的切换

40:52.680 --> 40:54.080
就可以完成图片的切换了

40:54.480 --> 40:55.480
所以说呢我们这里

40:55.880 --> 40:56.580
到这边来

40:56.580 --> 40:58.680
我们只要专心把这里写好就行了

40:58.880 --> 41:00.480
关键是这里怎么去切换

41:00.880 --> 41:01.980
那么怎么去切换呢

41:01.980 --> 41:03.380
其实跟那个什么Rx

41:03.380 --> 41:04.580
就没有什么关系了

41:04.580 --> 41:06.580
就是以前的多母操作

41:07.780 --> 41:08.680
怎么切换呢

41:09.680 --> 41:11.180
我们首先要算出

41:11.180 --> 41:12.880
你要切换到第几张图片

41:13.080 --> 41:15.580
那么有没有可能那个下标有问题

41:15.680 --> 41:18.180
比方说你给我的下标是小于0的

41:18.180 --> 41:18.780
有没有可能

41:19.280 --> 41:20.680
那我就直接把它复制为0

41:20.980 --> 41:22.580
那有可能小于0的呢

41:22.580 --> 41:24.680
也切换到第四一张图片

41:24.680 --> 41:25.380
不可能对吧

41:25.380 --> 41:26.580
就直接把它复制为0

41:27.480 --> 41:28.580
还有一种可能就是

41:28.680 --> 41:30.580
下标呢如果大于到最大值

41:31.280 --> 41:32.180
最大值是什么

41:32.480 --> 41:34.180
最大值是长度减1

41:34.480 --> 41:35.580
长度减1

41:36.180 --> 41:36.880
lcf

41:38.800 --> 41:39.500
lcf

41:39.900 --> 41:41.700
如果因这个设大于到什么

41:42.100 --> 41:45.100
就是zprops的emg src

41:45.300 --> 41:46.100
图片路径嘛

41:46.100 --> 41:47.400
点儿电视减1

41:47.900 --> 41:49.200
大于这个长度减1

41:49.200 --> 41:50.500
是不是也要重新复制

41:50.600 --> 41:51.100
对吧

41:51.300 --> 41:52.400
也要重新复制

41:53.500 --> 41:54.200
好这里

41:54.900 --> 41:55.700
重新复制

41:56.500 --> 41:57.600
也要完成重新复制

41:58.200 --> 41:58.900
好这样子的

41:58.900 --> 42:00.800
把因这个设值设为正确

42:01.100 --> 42:03.300
设置正确的因这个设

42:03.500 --> 42:04.600
先把这个东西处理好

42:05.700 --> 42:06.800
好处理好了之后

42:06.800 --> 42:07.600
就避免了什么

42:07.600 --> 42:09.400
避免了一个传一些乱七八糟的数据

42:09.400 --> 42:10.900
比方说我这里切换到复杉

42:11.800 --> 42:12.400
切换到复杉

42:12.400 --> 42:13.200
保存看一下

42:15.110 --> 42:15.610
点击

42:16.110 --> 42:17.710
那么这里是不是还是得到了0

42:17.810 --> 42:18.310
为什么

42:18.310 --> 42:20.110
因为经过了一串的判断

42:20.110 --> 42:20.510
对吧

42:20.510 --> 42:22.110
他经过了这么一串的判断

42:22.410 --> 42:23.310
判断过后了

42:23.410 --> 42:24.310
这个因这个设值呢

42:24.310 --> 42:26.110
他一定是正常判为类的值了

42:26.710 --> 42:27.510
好这是第一部分

42:27.510 --> 42:28.710
设置正确的因这个设

42:29.110 --> 42:30.110
那么第二步呢

42:30.110 --> 42:31.210
就是以前咱们做过的

42:31.610 --> 42:32.610
就是根据

42:34.110 --> 42:35.610
根据因这个设

42:35.910 --> 42:36.810
计算什么

42:36.910 --> 42:38.410
计算div的

42:38.910 --> 42:41.410
最终的margin left

42:42.110 --> 42:45.210
计算这个div最终的margin left

42:45.210 --> 42:46.210
要完成切换吗

42:47.110 --> 42:49.510
好那么怎么来计算他最终的margin left

42:49.510 --> 42:50.010
成了

42:50.010 --> 42:51.510
那么来找一下规律呗

42:52.310 --> 42:54.110
啊这个规律席子也很好找

42:54.210 --> 42:55.310
怎么来找呢

42:55.310 --> 42:55.810
比方说啊

42:55.810 --> 42:56.610
第一张图片

42:58.010 --> 43:00.110
第一张图片i等于0的时候

43:00.310 --> 43:01.710
margin left值是多少

43:02.110 --> 43:03.210
i等于0的时候

43:03.610 --> 43:04.810
所以margin left就为0

43:04.810 --> 43:05.310
对吧

43:05.610 --> 43:07.210
他就显示第一张就完成了对吧

43:07.810 --> 43:09.510
好那么i等于1的时候呢

43:09.510 --> 43:10.610
margin left等于多少

43:10.910 --> 43:12.110
是不是往右边移动

43:12.110 --> 43:14.210
右边移动是不是margin left是负数啊

43:14.310 --> 43:16.410
负多少是不是负一个宽度

43:16.910 --> 43:18.810
2的时候是不是负两个宽度

43:18.910 --> 43:20.610
对吧就这么简单啊

43:20.810 --> 43:22.410
所以说目标的margin left

43:22.410 --> 43:23.510
非常简单啊

43:23.510 --> 43:24.610
咱们定个辩量啊

43:24.810 --> 43:27.110
margin left

43:27.110 --> 43:28.310
目标的margin left

43:29.510 --> 43:32.410
或者叫做target left

43:32.910 --> 43:34.610
啊那么等于什么呢

43:34.610 --> 43:35.810
等于this

43:36.310 --> 43:38.510
嗯不是等于index

43:38.710 --> 43:39.610
诚意什么了

43:39.710 --> 43:41.210
诚意图片宽度

43:41.310 --> 43:42.610
emg weights

43:42.610 --> 43:43.110
对吧

43:43.710 --> 43:45.510
诚意图片宽度把他写成负数啊

43:45.610 --> 43:46.510
把他写成负数

43:47.310 --> 43:47.710
啊

43:48.110 --> 43:49.910
这就是目标的margin left

43:50.910 --> 43:52.310
好我们还要得到什么

43:52.310 --> 43:53.410
当前的margin left

43:53.410 --> 43:54.710
又要动画嘛对不对

43:54.910 --> 43:55.910
要完成动画

43:55.910 --> 43:57.710
如果没有动画的话那就很简单了

43:57.710 --> 43:58.510
如果不需要动画的话

43:58.510 --> 44:00.810
那就直接来div什么style

44:01.010 --> 44:02.610
啊直接设置动物元素嘛

44:02.610 --> 44:04.310
对不对啊div style

44:04.610 --> 44:05.610
嗯然后呢

44:06.410 --> 44:07.610
margin left

44:07.810 --> 44:09.210
啊等于什么呢

44:09.210 --> 44:10.510
等于target left

44:10.810 --> 44:11.710
拼接上px

44:13.510 --> 44:15.110
啊如果是这样的话一下就完了

44:15.410 --> 44:16.710
那这里呢把他写成三

44:16.710 --> 44:18.610
啊比方说切换到第三张图片看一下吧

44:19.410 --> 44:20.210
啊这边

44:21.010 --> 44:21.710
给你切换

44:23.410 --> 44:24.110
出问题了

44:24.310 --> 44:25.510
出问题了啊咱们看一下

44:25.710 --> 44:27.110
哪里哪里写的有问题

44:27.610 --> 44:30.410
啊这里呢算计算这个target left

44:30.410 --> 44:31.710
我们把这个target left

44:31.710 --> 44:33.010
只打印出来看一下

44:33.410 --> 44:33.810
啊

44:34.010 --> 44:35.210
打印出来是不是有问题的

44:36.410 --> 44:36.910
保存

44:38.510 --> 44:39.810
点击NAN

44:39.810 --> 44:41.710
哦这里的值算算得有问题啊

44:41.910 --> 44:43.810
那么看一下index付的

44:44.010 --> 44:45.010
啊诚意什么呢

44:45.110 --> 44:46.710
哦这里是this props

44:47.110 --> 44:48.410
props image weights

44:49.410 --> 44:50.110
啊切换了第三张

44:50.110 --> 44:51.310
你看是不是切换过去了

44:51.410 --> 44:51.910
对吧

44:52.310 --> 44:54.110
他就切换到第三张了啊就这么简单

44:54.410 --> 44:54.710
啊

44:56.310 --> 44:59.010
好那么现在呢我们无非就是要完成一个动画

44:59.510 --> 45:02.010
在一段时间内完成切换

45:02.010 --> 45:03.910
是不是要即时反复的设置

45:04.010 --> 45:05.810
不断的去设置他的margin left

45:06.010 --> 45:07.710
设置到目标的值为止

45:07.810 --> 45:08.810
对不对啊

45:09.010 --> 45:11.010
那么也就是说我们这里要完成动画

45:11.010 --> 45:12.010
要完成动画的话

45:12.010 --> 45:13.110
这就不能这样做了啊

45:13.210 --> 45:14.310
那要做什么

45:14.410 --> 45:17.910
要先得到啊得到当前的neft

45:18.410 --> 45:19.910
得到当前的neft值

45:21.410 --> 45:23.810
得到当前的margin left

45:24.410 --> 45:26.710
好如何来获取当前的margin left呢

45:27.810 --> 45:28.710
如何来获取

45:29.110 --> 45:31.510
是不是get computed style

45:31.610 --> 45:32.510
对吧

45:33.510 --> 45:35.210
对不对把动物对象传进去

45:35.610 --> 45:37.010
好然后得到他什么呢

45:37.110 --> 45:38.210
到他的margin left

45:39.310 --> 45:40.210
margin left

45:40.410 --> 45:43.210
这些都是最以前的动物操作了啊

45:43.210 --> 45:44.610
这个没什么好说的啊

45:45.310 --> 45:46.410
得到他的margin left

45:46.710 --> 45:48.510
得到这个her left

45:49.210 --> 45:50.210
把他转换成数字

45:50.610 --> 45:52.410
转换数字的话前面给他个加号嘛

45:52.410 --> 45:53.610
给这个表达是一个加号

45:53.610 --> 45:55.110
得到当前的margin left

45:55.210 --> 45:56.010
叔叔啊

45:56.110 --> 45:57.510
这是当前的margin left

45:57.510 --> 46:00.010
这是我们要切换到目标的margin left

46:00.610 --> 46:01.610
好保存一下看一下

46:01.810 --> 46:02.910
切换到第三章你看

46:02.910 --> 46:04.410
哎怎么是nav呢

46:04.810 --> 46:05.610
我看一下啊

46:06.310 --> 46:08.810
Z是dv啊这个没问题啊

46:08.910 --> 46:11.510
没问题得到一个得到好的元素

46:11.510 --> 46:12.310
哦这里

46:13.210 --> 46:13.910
哎没问题啊

46:13.910 --> 46:16.710
这个window啊get computed style

46:16.910 --> 46:17.610
切换过去

46:17.910 --> 46:19.310
哎怎么是nav呢

46:20.310 --> 46:21.110
我看一下了

46:22.010 --> 46:23.910
啊Z是dv

46:25.510 --> 46:26.510
Z是dv

46:26.610 --> 46:28.010
这个应该打印过的啊

46:28.010 --> 46:29.510
应该是得到的没问题的

46:30.110 --> 46:32.010
然后得到他里边的margin left

46:32.010 --> 46:33.410
他得到的是啊

46:33.410 --> 46:34.510
他转换出来是NNN

46:34.510 --> 46:35.510
那不转换了

46:35.710 --> 46:36.610
不转换是什么

46:37.410 --> 46:38.710
哦还有一个ps啊

46:38.810 --> 46:40.010
那就用post int啊

46:40.010 --> 46:41.210
用post int来转换

46:41.410 --> 46:42.310
把转的数字

46:43.410 --> 46:45.210
啊或者用post float也行

46:45.610 --> 46:47.110
post float要精确一些

46:47.710 --> 46:48.510
post float

46:48.810 --> 46:49.710
要精确一些

46:50.210 --> 46:52.110
好这是目前的margin left

46:52.410 --> 46:53.210
margin left

46:53.210 --> 46:55.610
这是我们要切换到目标的margin left

46:56.610 --> 46:57.210
你看呀

46:57.410 --> 46:58.610
我们要做的事情是什么

46:59.110 --> 47:01.410
就是不断的去设置他的margin left

47:01.410 --> 47:02.710
让他从这个字

47:02.910 --> 47:05.110
慢慢的变化到另一个字

47:05.210 --> 47:05.510
对吧

47:05.510 --> 47:06.910
我们无非就是要做这个事吗

47:07.410 --> 47:07.910
对不对

47:08.110 --> 47:09.310
无非就是要做这个事

47:09.310 --> 47:10.410
啊从这个字

47:10.410 --> 47:12.110
慢慢的变化到另一个字

47:12.310 --> 47:12.670
那么

47:12.670 --> 47:13.810
慢慢的变化

47:13.810 --> 47:15.510
是不是要告诉我一些变化的时间

47:15.510 --> 47:16.110
对不对

47:16.210 --> 47:17.410
要告诉我变化的时间

47:17.410 --> 47:18.610
但多少时间内

47:18.910 --> 47:19.510
完成变化

47:19.510 --> 47:21.010
是不是又要需要个属性

47:21.110 --> 47:21.710
the origin

47:22.310 --> 47:22.710
啊

47:23.110 --> 47:24.510
是一个proper types

47:24.910 --> 47:26.510
number is required

47:27.510 --> 47:30.810
在某段时间内

47:33.210 --> 47:33.710
在

47:35.110 --> 47:40.310
在多长时间内完成动画切换

47:41.610 --> 47:42.810
而其实这里我都懒得写

47:42.810 --> 47:44.810
这个默认属性字了

47:44.910 --> 47:45.410
啊

47:45.410 --> 47:45.810
为什么

47:45.810 --> 47:47.310
因为这个是个直主键

47:47.310 --> 47:48.710
一定这个主键一定是

47:48.710 --> 47:49.810
一看那个文件结构

47:49.910 --> 47:52.410
一定是在斑道主键里面调用的

47:52.410 --> 47:53.210
那么斑道主键呢

47:53.210 --> 47:54.810
一定会把这些东西全部传给你

47:54.810 --> 47:55.710
所以说我们这里呢

47:55.710 --> 47:57.310
就直接在这里传递了啊

47:57.910 --> 47:58.910
是在这里传递

47:59.110 --> 47:59.510
啊

47:59.710 --> 48:01.410
那么这里第二类型传递过去

48:01.710 --> 48:02.310
来自于什么呢

48:02.310 --> 48:03.410
来自于这个属性

48:03.410 --> 48:04.810
我不是一个属性第二类型吗

48:04.810 --> 48:05.210
对不对

48:05.210 --> 48:05.510
啊

48:05.510 --> 48:06.810
我那个属性传给你啊

48:06.810 --> 48:08.010
你看这里是不是有个属性

48:08.010 --> 48:08.510
对吧

48:08.710 --> 48:09.710
数据直接就这样子

48:09.710 --> 48:11.210
一层一层就传递过去了

48:11.310 --> 48:11.410
啊

48:11.410 --> 48:13.310
他一个默认值500毫秒啊

48:13.310 --> 48:14.210
为了看他清楚的话

48:14.210 --> 48:14.810
我们写个

48:15.310 --> 48:17.210
先写个两秒钟吗啊

48:17.710 --> 48:18.810
或者不动这里啊

48:18.810 --> 48:19.810
或者不动这里

48:19.910 --> 48:21.010
在这里测试的时候

48:21.010 --> 48:22.510
来写上一个两秒钟啊

48:22.510 --> 48:23.610
为了看得清楚一点

48:24.310 --> 48:25.010
第二类型

48:25.210 --> 48:26.210
给他设置为

48:26.710 --> 48:27.310
两秒钟

48:29.670 --> 48:30.070
好

48:30.070 --> 48:30.870
那么现在呢

48:30.870 --> 48:32.170
有了这个第二类型过后呢

48:32.170 --> 48:33.470
到这边又到这边来啊

48:33.570 --> 48:34.370
那么现在呢

48:34.370 --> 48:36.270
我们就要在这么短的时间内

48:36.670 --> 48:37.870
来完成

48:38.370 --> 48:39.270
这个切换

48:40.070 --> 48:41.870
那么首先我们要算一下

48:42.370 --> 48:43.570
啊首先要算一下什么

48:43.970 --> 48:44.570
就是

48:45.270 --> 48:47.270
我们一会肯定要写这么一个东西

48:47.270 --> 48:48.370
这是毫不疑问的

48:48.570 --> 48:50.070
肯定要写这么一个东西对吧

48:50.670 --> 48:51.770
要写这么一个东西

48:52.270 --> 48:53.570
好这个东西呢

48:53.670 --> 48:54.270
他你

48:55.270 --> 48:58.270
每一次运行的时候

48:58.270 --> 48:58.970
比方说啊

48:58.970 --> 49:00.970
咱们每隔16毫秒

49:01.670 --> 49:03.570
每隔16毫秒运行一次

49:04.070 --> 49:05.170
啊那么这个16毫秒

49:05.170 --> 49:06.670
为了以后改变方便了

49:06.670 --> 49:08.670
我们再把这个16毫秒写成一个属性

49:08.670 --> 49:10.070
啊写成个属性tick

49:10.470 --> 49:11.170
等于16

49:11.370 --> 49:12.370
啊写成这么一个属性

49:12.370 --> 49:13.570
属性是可以这样写的啊

49:13.970 --> 49:15.070
属性是可以这样写的

49:16.270 --> 49:17.770
啊你看我们之前写一个stats

49:17.770 --> 49:18.770
不就是这样写吗

49:18.770 --> 49:20.670
对不对啊属性是可以这样写的啊

49:20.870 --> 49:21.870
这叫做啊

49:22.370 --> 49:26.070
呃这是一esnex里边的版本里

49:26.070 --> 49:27.970
最新版本里边的语法

49:28.370 --> 49:30.370
啊现在流量其他也支持了啊

49:30.370 --> 49:31.170
如果不支持的话

49:31.170 --> 49:32.570
反正这里有百步转移啊

49:32.570 --> 49:33.370
有背部转移

49:33.370 --> 49:34.770
所以有背部进行编译

49:34.770 --> 49:36.270
所以说也无所谓啊

49:36.270 --> 49:37.670
这是间隔时间啊

49:37.670 --> 49:39.970
计时器的间隔时间

49:41.270 --> 49:42.770
好那么我们这里就传什么

49:42.770 --> 49:43.970
传这个z点tick

49:45.170 --> 49:46.870
好那么关键是这里

49:47.470 --> 49:48.670
他要运行多少次

49:49.470 --> 49:50.770
啊他要运行多少次

49:51.170 --> 49:52.070
就是这里呢

49:52.270 --> 49:54.070
肯定每个段时间啊

49:54.070 --> 49:56.070
往往这个curve上的加一段

49:56.070 --> 49:57.470
或者是减一段距离对吧

49:57.470 --> 49:58.570
最终变成这个距离

49:58.570 --> 49:58.970
对不对

49:58.970 --> 49:59.970
最终变成这个距离

49:59.970 --> 50:01.570
关键是这里要运行多少次

50:02.570 --> 50:03.270
啊要运行多少次

50:03.270 --> 50:04.370
因为我们要只有知道

50:04.370 --> 50:05.770
知道了次数过后呢

50:05.770 --> 50:07.070
我们才能在适当的时候呢

50:07.070 --> 50:08.170
把它停止掉

50:08.270 --> 50:09.770
不能不能不能永远的

50:09.770 --> 50:10.870
这样运行下去吧

50:10.970 --> 50:11.470
对不对

50:11.670 --> 50:12.070
所以说呢

50:12.070 --> 50:12.570
我们这里呢

50:12.570 --> 50:13.670
要做这么一件事啊

50:13.870 --> 50:14.770
就是计算

50:16.370 --> 50:18.570
计算运动的次数

50:19.070 --> 50:20.470
啊运动的次数

50:20.870 --> 50:22.670
啊怎么来计算运动的次数呢

50:23.070 --> 50:23.870
怎么来计算了

50:24.170 --> 50:25.670
啊怎么又写习惯了

50:26.070 --> 50:26.870
运动的次数呢

50:26.870 --> 50:28.870
我们可以通过啊times

50:29.270 --> 50:29.970
怎么来计算

50:30.170 --> 50:32.070
就是总时间

50:32.870 --> 50:35.270
运动的总时间什么叫reaching对吧

50:36.170 --> 50:36.970
时间间隔吗

50:37.070 --> 50:38.570
多长时间内完成动画切换

50:38.570 --> 50:39.470
就总时间

50:39.670 --> 50:41.370
总时间去处理什么

50:42.270 --> 50:43.470
间隔时间啊

50:43.470 --> 50:44.670
就是每隔多少

50:44.670 --> 50:46.170
多少毫秒运动一次

50:46.370 --> 50:48.270
这个处出来是不是就运动的次数

50:48.270 --> 50:49.070
比方说啊

50:50.070 --> 50:51.670
咱们总时间是一秒钟

50:52.070 --> 50:52.470
然后呢

50:52.470 --> 50:54.070
每时毫表运动一次

50:54.070 --> 50:54.970
要运动多少次

50:56.170 --> 50:57.270
这边运动100次

50:57.270 --> 50:58.870
每一次运动到距离我们先不管

50:59.070 --> 50:59.570
但是呢

50:59.570 --> 51:00.870
我们现在可以算出来运动

51:00.870 --> 51:02.170
要运动100次对吧

51:02.170 --> 51:03.270
要运动100次啊

51:03.270 --> 51:04.070
就这么个意思

51:05.170 --> 51:06.970
好那么有没有可能算出来是小数呢

51:06.970 --> 51:07.770
有可能比方说

51:07.770 --> 51:09.470
算出来是3.5次

51:09.470 --> 51:11.270
那么3.5次呢就算4次

51:11.370 --> 51:12.970
所以说我们这里向上取证

51:13.270 --> 51:13.670
seal

51:15.710 --> 51:16.410
向上取证

51:16.610 --> 51:18.410
好这里计算出运动的次数

51:18.510 --> 51:19.910
那么次数出来来过后呢

51:19.910 --> 51:21.010
是不是这里就可以比较了

51:21.410 --> 51:22.810
咱们首先这个变量啊

51:23.010 --> 51:23.910
curl times

51:24.310 --> 51:25.710
当前运动的次数啊

51:25.810 --> 51:29.110
当前运动的次数

51:29.410 --> 51:31.610
好每一次运动的干嘛呢

51:31.710 --> 51:33.010
我把这curl times

51:33.110 --> 51:34.610
加加啊加加

51:34.710 --> 51:35.610
每一次运动

51:35.810 --> 51:37.510
是不是加一运动了一次了啊

51:37.610 --> 51:39.910
如果发现运动的次数

51:41.210 --> 51:43.210
等于到什么等于到times

51:43.610 --> 51:44.610
两个相等了

51:44.610 --> 51:47.110
是不是要停止了啊停止运动

51:47.410 --> 51:48.810
啊要停止运动了

51:49.310 --> 51:50.410
好停止运动怎么停止

51:50.410 --> 51:51.610
是不是这里啊有个变量

51:51.610 --> 51:52.210
对不对啊

51:52.210 --> 51:53.510
咱们直接用个属性嘛啊

51:55.110 --> 51:55.610
times

51:58.080 --> 51:59.080
这是G17

52:00.280 --> 52:01.280
属性对象

52:01.980 --> 52:03.680
G17那个序号

52:04.080 --> 52:05.280
保存技术器的序号

52:05.480 --> 52:06.180
好那么这里呢

52:06.180 --> 52:07.580
我们就设置Zs

52:07.980 --> 52:08.780
什么times

52:09.080 --> 52:09.780
给它复制

52:09.980 --> 52:11.580
好停止运动怎么停止运动

52:11.580 --> 52:13.580
就是clear interval

52:14.080 --> 52:14.980
Zs timer

52:15.080 --> 52:15.580
对不对

52:16.580 --> 52:17.780
好咱们来看一下啊

52:18.080 --> 52:18.780
是不是可以

52:18.780 --> 52:19.780
是不是正常的可以

52:19.780 --> 52:21.080
也就是运行

52:21.780 --> 52:23.080
好咱们每次加一过后

52:23.080 --> 52:24.080
那么输出啊

52:24.080 --> 52:25.080
times的值

52:26.080 --> 52:27.080
每次加一输出

52:27.580 --> 52:29.180
好保存一下啊

52:29.380 --> 52:29.880
看一下

52:32.460 --> 52:33.460
这里点击

52:33.460 --> 52:33.960
你看

52:34.260 --> 52:35.360
输出输出

52:35.860 --> 52:37.260
啊运动了125次

52:37.260 --> 52:38.160
对吧停止了

52:38.560 --> 52:39.160
好再来

52:39.860 --> 52:41.160
又点击啊

52:41.160 --> 52:42.460
你看输出输出输出

52:42.860 --> 52:44.160
啊运动到这个值

52:44.160 --> 52:45.060
是不是停止了

52:45.160 --> 52:45.760
对不对

52:45.960 --> 52:47.060
就这么回事啊

52:47.060 --> 52:47.660
这就是

52:48.160 --> 52:48.960
把次数算出来

52:48.960 --> 52:50.160
我们就可以通过次数呢

52:50.160 --> 52:51.960
来控制他什么时候停止

52:54.320 --> 52:55.420
好既然写到这呢

52:55.420 --> 52:57.020
我又会又会想到一个问题啊

52:57.020 --> 52:57.520
就是说

52:58.220 --> 53:00.120
那如果会出现这么一种情况

53:00.120 --> 53:00.720
那咱们呢

53:00.720 --> 53:01.920
这里有两个按钮

53:02.620 --> 53:04.220
假设啊有两个按钮

53:04.420 --> 53:05.520
一个按钮的切换到3

53:05.520 --> 53:06.620
一个按钮切换到2

53:07.620 --> 53:09.220
那如果会出现这种情况的话

53:09.220 --> 53:10.320
那就又会出问题

53:10.320 --> 53:11.020
比方说啊

53:11.220 --> 53:12.020
咱们切换到第三张

53:12.020 --> 53:12.920
来切换过程中点

53:12.920 --> 53:14.220
又点击切换到第二张

53:18.570 --> 53:19.170
等一下啊

53:19.170 --> 53:20.270
这里切成2

53:22.500 --> 53:23.900
好这里切换到第三张

53:24.800 --> 53:26.100
啊这里有切换到第二张

53:26.900 --> 53:28.000
啊有切换到第二张

53:28.200 --> 53:28.800
你看看

53:29.400 --> 53:30.300
是不是出问题了

53:31.100 --> 53:33.100
哎呀他不停不停止了看到没

53:33.400 --> 53:34.400
他不停止了

53:34.800 --> 53:36.300
为什么不停止呢

53:37.000 --> 53:38.100
他为什么不停止呢

53:38.100 --> 53:38.500
现在

53:40.300 --> 53:42.500
是因为现在你启动了几个计时器了

53:43.900 --> 53:45.700
是不是启动了两个计时器了

53:46.200 --> 53:46.700
对不对

53:47.100 --> 53:48.200
你现在启动了两个计时器

53:48.200 --> 53:49.400
因为每点一次

53:49.400 --> 53:51.400
他都是要重新启动一个计时器

53:51.500 --> 53:53.000
每点一次是运行这个函数

53:53.000 --> 53:55.100
而这个函数里边说来重新启动计时器

53:55.200 --> 53:55.700
对吧

53:55.800 --> 53:57.600
每一次都要重新启动计时器

53:57.700 --> 54:00.100
那么之前那个计时器是不是不会结束了

54:00.100 --> 54:02.400
你最后清楚的是最后一次的计时器

54:02.400 --> 54:03.900
之前那个计时器还没有清楚

54:04.800 --> 54:05.800
那这么怎么办呢

54:06.100 --> 54:07.100
你想这个道理啊

54:07.400 --> 54:09.300
如果你切换到第三张的过程中

54:09.400 --> 54:10.400
都还没有切换完

54:10.400 --> 54:11.700
你突然切换到第二张

54:11.700 --> 54:13.200
是不是把之前的先停止

54:13.700 --> 54:15.000
之前动画就不要运行了

54:15.000 --> 54:16.100
停止之前动画

54:16.100 --> 54:17.700
然后马上做下一次动画

54:17.900 --> 54:19.800
所以说这里呢要做的事情很简单

54:20.200 --> 54:22.900
啊停止之前的动画

54:25.210 --> 54:25.910
先停止

54:25.910 --> 54:27.310
如果管他之前有没有动画

54:27.310 --> 54:28.110
先停止再说

54:28.710 --> 54:30.110
clear interval

54:30.710 --> 54:31.510
this timer

54:31.810 --> 54:32.810
现在停止再说

54:33.110 --> 54:33.810
停止再说

54:34.210 --> 54:34.710
对吧

54:35.210 --> 54:37.010
好然后呢再重新启动动画

54:37.610 --> 54:38.710
保存啊看一下

54:40.510 --> 54:42.110
好切换到第三张切换到第二张

54:42.110 --> 54:42.610
你看

54:44.210 --> 54:46.710
是不是第三张看前面的啊

54:46.910 --> 54:48.610
第三张还没有切换结束

54:50.310 --> 54:50.810
在这

54:51.210 --> 54:52.450
他到跳到二十次过后

54:52.450 --> 54:54.250
马上又切又切换到第二张的时候

54:54.250 --> 54:56.150
是不是之前之前的话又停止了

54:56.450 --> 54:58.050
停止到过后又重新来运行

54:58.250 --> 54:59.650
啊就变成这么一种结构了

55:00.950 --> 55:01.850
好都是这一块啊

55:01.850 --> 55:03.250
这这这这些东西都跟

55:03.450 --> 55:04.750
rex没有什么关系啊

55:04.750 --> 55:06.450
都是以前的程序逻辑

55:07.050 --> 55:08.050
好咱继续啊

55:10.410 --> 55:11.310
然后呢现在呢

55:11.310 --> 55:12.710
我们开始运动了啊

55:12.710 --> 55:13.710
要开始来运动

55:13.810 --> 55:15.110
怎么运动了

55:15.210 --> 55:17.010
是不是不断的去改变这个字啊

55:17.310 --> 55:17.510
对吧

55:17.510 --> 55:19.510
这是当他当前的marty left

55:20.210 --> 55:22.210
然后呢每隔一段时间要改一点

55:22.210 --> 55:23.310
每隔一段时间要改一点

55:23.310 --> 55:23.910
对不对

55:24.310 --> 55:24.910
ok啊

55:24.910 --> 55:26.810
那么我们这里要算一个东西

55:26.810 --> 55:27.810
什么算什么呢

55:27.810 --> 55:30.710
就是计算每次运动啊

55:30.710 --> 55:32.910
每次运动的距离

55:34.010 --> 55:35.010
要跑多远

55:36.610 --> 55:37.910
每次运动的距离

55:38.110 --> 55:39.210
这个距离怎么算的

55:40.210 --> 55:41.610
这是我们的目标值

55:42.110 --> 55:43.510
这是我们当前值

55:43.810 --> 55:46.210
那么目标值减当前值

55:46.210 --> 55:47.210
是不是种距离

55:47.410 --> 55:47.810
对吧

55:50.710 --> 55:51.810
这是种距离啊

55:51.810 --> 55:52.910
total distance

55:53.510 --> 55:54.710
就是目标值

55:55.010 --> 55:56.310
减当前值

55:56.310 --> 55:57.010
clap

55:57.410 --> 55:59.010
当然这个减出来有可能是复数啊

55:59.010 --> 55:59.510
无所谓

55:59.510 --> 56:01.110
复数的话就往左边运动呗

56:01.710 --> 56:03.210
正处的话就往右边运动呗

56:03.310 --> 56:03.910
无所谓吧

56:05.010 --> 56:06.810
好这是种每次运动的距离啊

56:06.810 --> 56:07.710
这个算出来啊

56:07.710 --> 56:08.310
算出来

56:08.910 --> 56:10.210
好然后呢

56:10.910 --> 56:11.910
然后我们这里呢

56:11.910 --> 56:13.610
还要算每次运动的距离

56:13.610 --> 56:14.110
就是什么

56:14.110 --> 56:14.910
every

56:15.110 --> 56:15.610
dis

56:15.610 --> 56:17.010
啊就是要取个名字dis吧

56:17.010 --> 56:18.210
这是每次运动的距离

56:18.210 --> 56:19.010
这是种距离

56:20.910 --> 56:22.510
好每次运动的距离等于什么

56:22.510 --> 56:23.610
等于种距离

56:24.010 --> 56:25.410
处于什么次数

56:25.410 --> 56:25.910
对不对

56:26.110 --> 56:27.610
一共要运动这么多次啊

56:27.910 --> 56:29.710
每次运动的距离

56:30.710 --> 56:31.810
每次运动的距离

56:32.010 --> 56:32.410
对吧

56:33.610 --> 56:34.010
哎

56:34.810 --> 56:36.010
好算出来这个东西过后

56:36.010 --> 56:36.610
干嘛呢

56:37.010 --> 56:37.610
干嘛呢

56:38.310 --> 56:39.810
好每一次运动干嘛

56:40.010 --> 56:41.210
每一次运动是不是

56:41.410 --> 56:43.210
把这个curl left

56:43.210 --> 56:43.710
对吧

56:43.910 --> 56:45.610
当前的margin left

56:45.610 --> 56:48.310
加上一段距离对不对

56:49.110 --> 56:50.310
加上一段距离

56:50.410 --> 56:51.310
然后呢

56:51.410 --> 56:53.310
再重新复制回去

56:55.110 --> 56:56.110
margin left

56:56.210 --> 56:57.910
复制curl left

56:59.210 --> 56:59.710
对吧

57:00.410 --> 57:01.610
就完了对不对

57:02.510 --> 57:03.910
重新复制回去就完了

57:04.310 --> 57:04.910
就完了

57:05.910 --> 57:06.610
那么最后呢

57:06.610 --> 57:08.310
就是有一点念啊细节就是

57:09.810 --> 57:10.710
当我们停

57:10.710 --> 57:12.610
因为我们这个都是小数计算嘛

57:12.610 --> 57:12.910
对吧

57:12.910 --> 57:14.510
都有可能算出来是小数

57:14.510 --> 57:15.410
啊这个是整数嘛

57:15.410 --> 57:17.010
但这个东西有可能是小数

57:17.310 --> 57:18.910
啊这个东西有可能是小数

57:19.110 --> 57:21.110
那么小数计算呢是不精确的啊

57:21.110 --> 57:23.410
为了防止呢不精确的这个情况

57:23.510 --> 57:25.210
因为不精确如果你不管他的话

57:25.410 --> 57:26.610
他每一次算出来不精确

57:26.610 --> 57:27.610
每一次算出来不精确

57:27.610 --> 57:28.910
那么久而久之呢

57:28.910 --> 57:30.810
这个不精确的值呢

57:30.810 --> 57:32.410
就会不精确的范围值呢

57:32.410 --> 57:34.010
就会越来越大越来越大

57:34.310 --> 57:36.410
所以说每一次在停止运动的时候

57:36.610 --> 57:38.010
我们直接干嘛呢

57:38.110 --> 57:40.510
直接把它设为目标值啊

57:40.510 --> 57:41.710
我最终不就要变到这吗

57:41.710 --> 57:43.110
对不对啊

57:43.110 --> 57:44.610
我最终最终就是要到这

57:44.610 --> 57:46.210
所以说直接把它设为目标值

57:46.310 --> 57:47.410
因为那个时候呢

57:47.610 --> 57:48.710
就已经相差不多了啊

57:48.710 --> 57:50.810
可能像他零点几个相处啊

57:50.810 --> 57:52.510
或者是零点零零几个相处

57:52.510 --> 57:53.610
所以看感觉不到的

57:54.710 --> 57:55.810
啊保存啊看一下

57:57.310 --> 57:58.110
切换到第三章

57:58.110 --> 57:59.410
你看是不是切换过去了

58:00.410 --> 58:02.410
啊这是第四章啊第四章

58:02.410 --> 58:03.310
下标为4

58:03.410 --> 58:05.310
切换到第三章啊有下标为2

58:05.910 --> 58:06.610
你看一下

58:07.210 --> 58:09.010
对啊2秒钟之内完成切换

58:09.610 --> 58:12.610
对吧我们可以完全可以通过属性来的进行控制啊

58:12.610 --> 58:13.610
比方说Dial Ration

58:13.610 --> 58:15.110
我只设置一秒钟啊

58:15.110 --> 58:16.110
一秒钟完成切换

58:16.310 --> 58:17.210
你看一下切换到底

58:17.210 --> 58:18.610
你看中途可以点的啊

58:18.910 --> 58:19.910
中途可以点的

58:20.510 --> 58:21.710
切换到这切换到这

58:22.210 --> 58:22.710
看没

58:23.410 --> 58:24.510
好这里500

58:25.010 --> 58:25.810
啊500毫秒

58:27.010 --> 58:28.410
看没有就可以切换了

58:28.710 --> 58:30.110
对吧可以切换了

58:31.410 --> 58:33.210
好那么这里呢我们是不是就写完了

58:33.210 --> 58:33.810
对不对

58:33.810 --> 58:36.210
ok我们把这个overflow还等这个样式呢

58:36.210 --> 58:36.810
给它加上

58:38.710 --> 58:40.310
overflow还等这个样式

58:40.810 --> 58:42.310
啊那么就看不见其他了啊

58:42.510 --> 58:43.210
把加上

58:44.110 --> 58:44.710
到时候呢

58:44.710 --> 58:47.410
我们就会调用这个按钮里边东西啊

58:47.410 --> 58:49.210
调用按钮里边来进行切换

58:49.610 --> 58:50.610
来进行切换

58:51.310 --> 58:53.210
好那么这个组件就写完了啊

58:53.210 --> 58:53.710
这个组件

58:53.710 --> 58:56.710
你看我给他怎么给他速度给他宽高给他

58:56.710 --> 58:57.910
然后见个时间给他

58:58.110 --> 58:59.910
那么给他过后他就自行来操作了啊

58:59.910 --> 59:01.410
他里边跟我们提供一个函数

59:01.410 --> 59:04.010
你看现在操作方式的就不是通过属性来控制了

59:04.110 --> 59:07.010
通过他里边的函数来控制他里边动画啊

59:07.010 --> 59:07.910
触发一些动画

59:09.310 --> 59:10.610
好那么这里就写完了

59:11.010 --> 59:12.610
那么接下来呢要做的事情呢

59:13.510 --> 59:14.410
就很简单了

59:14.410 --> 59:15.210
做什么事情呢

59:15.210 --> 59:17.510
就是说首先呢这里呢

59:17.510 --> 59:18.210
有这么一下

59:18.210 --> 59:19.310
有还有一些组件啊

59:19.310 --> 59:21.110
有这两个按钮啊

59:21.110 --> 59:22.310
按钮可以完成切换

59:22.310 --> 59:22.710
对吧

59:23.110 --> 59:24.510
好找了这么两个按钮啊

59:24.510 --> 59:25.610
可以完成切换

59:26.010 --> 59:27.510
好这个按钮呢

59:27.810 --> 59:28.910
咱们来

59:30.210 --> 59:31.410
一把写成组件吧啊

59:31.510 --> 59:32.410
把写成组件

59:33.510 --> 59:34.710
新建个文件夹

59:35.610 --> 59:36.710
叫做switch

59:37.310 --> 59:38.510
Iso啊

59:38.510 --> 59:39.510
这个组件很简单

59:39.910 --> 59:42.010
就是切换的箭头

59:43.410 --> 59:44.810
好这里面新建个文件啊

59:46.750 --> 59:47.950
好这里写个组件

59:49.050 --> 59:49.550
好这边呢

59:49.550 --> 59:51.150
我们把个组件导入进来用啊

59:51.150 --> 59:51.750
就这个种

59:51.750 --> 59:52.650
这边的容器呢

59:52.650 --> 59:54.250
他就是去使用这些内

59:54.350 --> 59:56.150
使用他里边的这些组件就完成了

59:56.250 --> 59:57.650
switch arrow啊

59:57.650 --> 59:58.150
from

59:58.250 --> 59:59.750
大家呢如果听着有点晕

59:59.850 --> 01:00:01.450
我先大家先挺一下啊

01:00:01.550 --> 01:00:02.850
先把之前那个

01:00:03.350 --> 01:00:03.950
就是这个

01:00:04.150 --> 01:00:05.950
img container先来写出来

01:00:07.550 --> 01:00:08.450
好这里

01:00:08.850 --> 01:00:09.650
加进去啊

01:00:10.350 --> 01:00:12.550
好了有了这么一个箭头啊

01:00:12.550 --> 01:00:13.250
这么一个组件

01:00:13.250 --> 01:00:14.750
就箭头这个

01:00:15.150 --> 01:00:15.750
按钮

01:00:15.950 --> 01:00:16.950
就这两个东西啊

01:00:16.950 --> 01:00:18.250
有了这么两个东西过后呢

01:00:18.250 --> 01:00:20.050
我们就把它样式写好啊

01:00:20.050 --> 01:00:21.750
就把样式写好啊

01:00:21.750 --> 01:00:23.250
switch arrow在这里面呢

01:00:23.250 --> 01:00:24.450
就写一个div

01:00:24.450 --> 01:00:25.750
给他个内样式嘛啊

01:00:25.750 --> 01:00:26.950
class name

01:00:28.050 --> 01:00:28.950
好class name

01:00:29.150 --> 01:00:30.050
给他取个名字啊

01:00:30.050 --> 01:00:32.450
叫做Iro吧啊Iro

01:00:32.950 --> 01:00:35.050
好Iro里面呢提供两个

01:00:36.050 --> 01:00:36.750
两个啥呢

01:00:37.450 --> 01:00:39.250
就两个span元素都行啊

01:00:39.250 --> 01:00:41.050
两个span元素都行啊

01:00:41.050 --> 01:00:42.850
左边那个span呢有个lot

01:00:43.250 --> 01:00:43.950
一个左箭头

01:00:43.950 --> 01:00:45.450
当然这里边也可以使用图片啊

01:00:45.450 --> 01:00:46.850
这些东西无所谓

01:00:46.850 --> 01:00:49.150
也可以通过属性来控制也无所谓

01:00:49.850 --> 01:00:50.450
RT

01:00:50.450 --> 01:00:51.450
不是GT

01:00:52.750 --> 01:00:53.150
好

01:00:53.350 --> 01:00:54.850
那么我们刚写上那样式啊

01:00:55.650 --> 01:00:59.890
in这个是css import

01:01:00.690 --> 01:01:02.290
这个玩意好像也没有什么

01:01:02.990 --> 01:01:04.390
属性要传递啊

01:01:04.390 --> 01:01:05.390
一会再说嘛啊

01:01:05.390 --> 01:01:06.590
如果有的话一会再说

01:01:07.390 --> 01:01:08.690
in这个是css

01:01:09.790 --> 01:01:11.590
好那么写上一下内样式啊

01:01:11.590 --> 01:01:13.190
这边我们已经引用起来了

01:01:13.990 --> 01:01:14.990
啊已经引用起来了

01:01:14.990 --> 01:01:15.790
看一下结构啊

01:01:18.860 --> 01:01:19.760
啊在那里边

01:01:19.760 --> 01:01:20.360
嗯

01:01:20.360 --> 01:01:22.260
哎目前只有一个img content那

01:01:22.360 --> 01:01:23.960
好像没有引用进来啊

01:01:24.560 --> 01:01:25.860
还没有引用进来

01:01:26.260 --> 01:01:26.860
这边啊

01:01:26.860 --> 01:01:28.160
这里没有引用啊

01:01:28.660 --> 01:01:29.960
叫做switch Iro

01:01:33.500 --> 01:01:34.500
好看一下啊

01:01:35.800 --> 01:01:37.100
嗯结构

01:01:38.800 --> 01:01:39.900
好哎

01:01:40.800 --> 01:01:44.100
哦有个主键的名字不能用in这个是in这个是太扯了

01:01:44.600 --> 01:01:46.300
switch Iro

01:01:47.200 --> 01:01:48.600
文件名是有in这个是

01:01:48.700 --> 01:01:50.000
文件名用in这个是目的呢

01:01:50.000 --> 01:01:52.600
是为了更加方便的去导入这个文件啊

01:01:52.600 --> 01:01:53.200
但是他的

01:01:53.700 --> 01:01:55.000
主键名不能用这个啊

01:01:55.200 --> 01:01:56.000
用这个主键名呢

01:01:56.000 --> 01:01:57.200
就不是很好调色的啊

01:01:57.200 --> 01:01:58.700
调色的时候你就看不清楚了

01:01:59.100 --> 01:02:00.200
好switch Iro你看

01:02:00.300 --> 01:02:00.700
是吧

01:02:01.000 --> 01:02:01.800
是不是出来了对吧

01:02:01.800 --> 01:02:02.700
两个span元素

01:02:02.700 --> 01:02:03.000
ok

01:02:03.000 --> 01:02:04.200
那么接着就设置样式了啊

01:02:04.200 --> 01:02:05.100
就设置样式的

01:02:05.500 --> 01:02:07.300
嗯这个div里边

01:02:07.300 --> 01:02:08.600
Iro里边的span呢

01:02:08.600 --> 01:02:09.600
反正都是绝对定位的

01:02:09.600 --> 01:02:10.600
一个靠左一个靠右呗

01:02:10.600 --> 01:02:11.200
对不对啊

01:02:11.200 --> 01:02:12.700
这两个span都是绝对定位的

01:02:12.900 --> 01:02:14.400
好找到啊找到

01:02:14.500 --> 01:02:16.700
这里边的Iro下边的什么

01:02:16.700 --> 01:02:18.300
span元素把它设成

01:02:18.300 --> 01:02:19.500
直接设成绝对定位

01:02:19.900 --> 01:02:21.600
那么相对于谁绝对定位呢

01:02:21.600 --> 01:02:22.700
就是相对于这个啊

01:02:22.700 --> 01:02:23.900
整个这个容器啊

01:02:23.900 --> 01:02:24.900
因为这个整个容器呢

01:02:24.900 --> 01:02:25.700
是相对定位的

01:02:25.700 --> 01:02:27.100
就相对于他俩绝对定位

01:02:27.300 --> 01:02:28.900
一个靠左一个靠右对吧

01:02:28.900 --> 01:02:29.600
好那么

01:02:30.200 --> 01:02:31.800
第一个靠左第二个靠右

01:02:31.800 --> 01:02:33.700
我们也可以用那样式吗啊

01:02:34.400 --> 01:02:38.170
class name left

01:02:39.370 --> 01:02:41.670
这个呢class name right

01:02:42.070 --> 01:02:43.370
一个靠左一个靠右

01:02:43.970 --> 01:02:45.370
好这里样式设置一下

01:02:46.270 --> 01:02:48.170
Iro left

01:02:48.470 --> 01:02:49.770
靠左的呢

01:02:49.770 --> 01:02:51.970
他们的宽高呢都差不多对吧

01:02:51.970 --> 01:02:53.570
他们的宽高都差不多

01:02:54.870 --> 01:02:56.770
而且他们的众作标是不是一样的

01:02:56.970 --> 01:02:58.170
众作标是一样的

01:02:58.870 --> 01:03:01.370
那么就把先把那个统一的样子先写了吧

01:03:01.570 --> 01:03:03.070
先把统一样子先写了

01:03:03.870 --> 01:03:04.770
就是

01:03:05.670 --> 01:03:06.670
首先决定定位

01:03:07.170 --> 01:03:09.170
决定定位的众作标是一样的

01:03:09.670 --> 01:03:11.470
文字颜色为白色

01:03:12.770 --> 01:03:13.270
好了

01:03:13.370 --> 01:03:14.170
为白色

01:03:15.070 --> 01:03:16.770
设置个宽高啊宽高

01:03:16.770 --> 01:03:17.970
宽高看一下这边啊

01:03:17.970 --> 01:03:18.770
这边是多少

01:03:20.170 --> 01:03:22.070
这边是二十乘三十

01:03:22.070 --> 01:03:22.670
那行吧

01:03:22.670 --> 01:03:24.670
二十乘以三十

01:03:25.270 --> 01:03:26.170
文字要居中

01:03:26.170 --> 01:03:26.970
nanheit

01:03:27.170 --> 01:03:28.070
三十个相处

01:03:28.470 --> 01:03:30.170
然后垂直居中

01:03:30.270 --> 01:03:31.770
top只能50%

01:03:31.870 --> 01:03:32.870
然后transfoam

01:03:33.470 --> 01:03:34.270
transfoam

01:03:36.170 --> 01:03:37.170
transnet y

01:03:37.770 --> 01:03:38.770
-50%

01:03:38.870 --> 01:03:40.070
这是垂直居中方案

01:03:40.470 --> 01:03:40.970
保存

01:03:41.770 --> 01:03:42.470
我看一下这边

01:03:43.370 --> 01:03:44.070
哎东西呢

01:03:44.570 --> 01:03:45.270
找一找啊

01:03:45.770 --> 01:03:46.570
跑哪去了

01:03:47.970 --> 01:03:48.370
这里

01:03:49.970 --> 01:03:50.770
哦在这了啊

01:03:50.770 --> 01:03:51.870
看到没在这了啊

01:03:52.270 --> 01:03:52.670
在这

01:03:52.970 --> 01:03:53.770
all right 在这

01:03:53.770 --> 01:03:55.070
看到不是很清楚的吧

01:03:55.170 --> 01:03:56.870
你看这里实际上是有的啊

01:03:56.870 --> 01:03:57.670
实际上是有的

01:03:58.270 --> 01:03:59.870
好然后给他设置个背景颜色啊

01:03:59.870 --> 01:04:00.870
设置个背景颜色

01:04:01.270 --> 01:04:02.770
背景颜色的话

01:04:02.770 --> 01:04:04.270
给他设置为这什么颜色

01:04:04.870 --> 01:04:06.370
哦他就是个半透明的啊

01:04:06.370 --> 01:04:07.170
半透明的

01:04:07.270 --> 01:04:08.470
ok 他设置一下呗

01:04:09.470 --> 01:04:10.370
白光的啊

01:04:10.370 --> 01:04:11.370
半透明的颜色

01:04:11.570 --> 01:04:12.270
背景颜色

01:04:12.570 --> 01:04:13.170
保存

01:04:13.970 --> 01:04:14.570
看一下

01:04:15.270 --> 01:04:15.670
哎

01:04:15.870 --> 01:04:16.770
现在是重叠在一起的

01:04:16.770 --> 01:04:16.970
对吧

01:04:16.970 --> 01:04:17.770
现在重叠在一起的

01:04:17.770 --> 01:04:18.370
没关系啊

01:04:18.370 --> 01:04:18.770
没关系

01:04:18.770 --> 01:04:19.770
我们一会再设置

01:04:20.370 --> 01:04:22.270
好那么never单独设置一下啊

01:04:22.270 --> 01:04:23.370
never他的never设置呢

01:04:23.370 --> 01:04:24.070
就是0

01:04:24.370 --> 01:04:25.370
然后呢right

01:04:25.370 --> 01:04:26.270
他的right设置呢

01:04:26.270 --> 01:04:26.870
就是0

01:04:27.270 --> 01:04:27.870
right

01:04:27.870 --> 01:04:29.170
他的right设置就是0

01:04:29.170 --> 01:04:30.370
先把位置设置一下

01:04:31.270 --> 01:04:32.470
好看一下啊

01:04:32.470 --> 01:04:33.670
一个靠左一个靠右

01:04:34.070 --> 01:04:36.370
嗯然后呢纹本的话

01:04:38.370 --> 01:04:39.070
纹本的话

01:04:39.070 --> 01:04:40.570
我们用pending来设置吧

01:04:40.770 --> 01:04:41.970
啊当然这前面用图片

01:04:41.970 --> 01:04:43.170
其实是最好的啊

01:04:43.470 --> 01:04:44.470
纹本的话

01:04:45.270 --> 01:04:46.770
先设置一下

01:04:47.570 --> 01:04:48.370
pending啊

01:04:48.370 --> 01:04:49.370
啊把bogs

01:04:49.370 --> 01:04:50.770
siden色为border box

01:04:51.970 --> 01:04:52.870
这样呢设置pending

01:04:52.870 --> 01:04:54.870
也不会改非常的尺寸啊

01:04:55.870 --> 01:04:57.170
啊左边的纹本的话

01:04:57.170 --> 01:04:57.970
都差不多了

01:04:57.970 --> 01:04:58.770
啊都差不多了

01:04:58.770 --> 01:05:00.070
然后把它变成一个圆角

01:05:00.070 --> 01:05:02.370
就是右上和右下有圆角

01:05:02.570 --> 01:05:03.770
其他没有啊

01:05:03.770 --> 01:05:04.970
border writers

01:05:05.170 --> 01:05:06.770
左上没有右上呢

01:05:06.770 --> 01:05:07.770
50%

01:05:08.170 --> 01:05:09.570
右下呢50%

01:05:09.970 --> 01:05:10.770
左下没有

01:05:11.070 --> 01:05:11.870
啊这Left

01:05:13.570 --> 01:05:15.670
Left好像不太够啊

01:05:15.670 --> 01:05:16.170
不太够啊

01:05:16.170 --> 01:05:17.070
30个相处吗

01:05:17.870 --> 01:05:18.770
30个相处

01:05:20.470 --> 01:05:21.170
好差不多了啊

01:05:21.170 --> 01:05:21.770
差不多了

01:05:22.470 --> 01:05:23.470
然后右边呢

01:05:23.470 --> 01:05:24.070
相反

01:05:26.340 --> 01:05:27.940
啊中间是两个零

01:05:29.740 --> 01:05:31.340
啊这样子就没什么好说的了

01:05:33.840 --> 01:05:34.840
好看一下啊

01:05:35.140 --> 01:05:36.840
啊然后右边这个文字呢

01:05:36.840 --> 01:05:37.840
写个pending嘛啊

01:05:37.840 --> 01:05:38.840
pending right

01:05:39.140 --> 01:05:41.040
Left设置一个

01:05:41.040 --> 01:05:42.540
比方说6个相处

01:05:43.640 --> 01:05:44.140
保存

01:05:45.240 --> 01:05:46.140
好差不多了啊

01:05:46.240 --> 01:05:49.040
然后把它的设成一个小手啊

01:05:49.040 --> 01:05:50.040
cursor pointer

01:05:51.340 --> 01:05:52.140
鼠标样式

01:05:52.840 --> 01:05:54.140
然后鼠标移入的时候呢

01:05:54.140 --> 01:05:55.640
有一个加深的效果

01:05:56.340 --> 01:05:57.540
鼠标移入的时候

01:05:58.140 --> 01:05:58.640
好本

01:05:59.140 --> 01:06:01.140
有个加深的效果就是设置

01:06:03.440 --> 01:06:04.140
byground

01:06:05.140 --> 01:06:06.440
rgba

01:06:06.840 --> 01:06:08.640
00.7

01:06:09.440 --> 01:06:09.940
保存

01:06:10.540 --> 01:06:11.440
好看一下啊

01:06:11.540 --> 01:06:13.040
移入啊有加深的效果

01:06:13.040 --> 01:06:14.040
行了啊差不多了

01:06:14.340 --> 01:06:15.440
没啥没啥了吧

01:06:15.740 --> 01:06:16.340
没啥了啊

01:06:16.840 --> 01:06:18.340
好那么这个区域做完了对吧

01:06:18.440 --> 01:06:20.240
然后呢他里边有点击事件

01:06:20.340 --> 01:06:21.840
点击的时候要干嘛了

01:06:21.840 --> 01:06:23.040
这个我是不知道了啊

01:06:23.040 --> 01:06:24.840
点击的时候要干嘛确实不知道

01:06:24.940 --> 01:06:25.940
好那么这个时候呢

01:06:25.940 --> 01:06:26.740
我们就可以这样

01:06:27.840 --> 01:06:28.440
在这个

01:06:29.040 --> 01:06:30.740
主键里面来加一个属性啊

01:06:31.540 --> 01:06:33.540
就约属一下这个属性prob types

01:06:34.940 --> 01:06:35.840
什么on

01:06:36.040 --> 01:06:39.140
什么就是当我们点击的时候啊

01:06:39.140 --> 01:06:40.340
当点击的时候

01:06:40.640 --> 01:06:41.140
on

01:06:41.340 --> 01:06:41.940
change

01:06:42.240 --> 01:06:44.840
当我们改变点击这个东西改变来

01:06:44.840 --> 01:06:46.640
来改变他的下标的时候啊

01:06:46.640 --> 01:06:47.840
来改变下标的时候

01:06:47.940 --> 01:06:48.740
on change

01:06:49.140 --> 01:06:50.240
好那么这里呢

01:06:50.540 --> 01:06:51.940
需要给我一个函数啊

01:06:51.940 --> 01:06:53.540
约属一下啊 import

01:06:53.940 --> 01:06:55.240
prob types

01:06:55.640 --> 01:06:57.540
prob types

01:06:58.440 --> 01:07:01.340
啊这里约属一下啊 prob types

01:07:01.340 --> 01:07:01.840
funk

01:07:02.740 --> 01:07:04.140
啊可以传可以不传

01:07:04.540 --> 01:07:06.140
如果你传了这个函数的话

01:07:06.140 --> 01:07:06.840
那么这里

01:07:07.440 --> 01:07:09.540
当我点击left的时候呢

01:07:10.340 --> 01:07:11.140
on click

01:07:11.740 --> 01:07:13.840
我就去调用你给我传的这个函数

01:07:14.740 --> 01:07:16.440
啊当我点击的时候调用什么

01:07:16.440 --> 01:07:17.540
this on change

01:07:17.540 --> 01:07:20.140
看有没有如果有的话去调用

01:07:20.540 --> 01:07:21.340
this props

01:07:22.740 --> 01:07:24.540
看有没有如果有的话

01:07:24.540 --> 01:07:25.940
我去调用一下你的

01:07:26.040 --> 01:07:26.840
on change

01:07:26.840 --> 01:07:27.540
这个函数

01:07:27.840 --> 01:07:29.240
然后给你传一个什么呢

01:07:29.340 --> 01:07:31.040
给你传一个参数什么参数

01:07:31.040 --> 01:07:33.140
因为我要告诉你我我点的是左还是右

01:07:33.140 --> 01:07:33.640
对吧

01:07:33.840 --> 01:07:34.840
我点的是左还是右

01:07:34.840 --> 01:07:36.140
我给你传一个参数啊

01:07:36.240 --> 01:07:38.240
点左的话我就给你写个left

01:07:38.540 --> 01:07:39.740
好点右的话

01:07:39.940 --> 01:07:41.340
我们这里复制一下啊

01:07:42.340 --> 01:07:44.040
点右的话我就给你写个right

01:07:44.140 --> 01:07:45.740
啊总之去触发这个视线

01:07:46.440 --> 01:07:48.340
啊组件事件我们都是用过的对吧

01:07:49.140 --> 01:07:49.940
好那么现在呢

01:07:49.940 --> 01:07:51.140
我们在这边来

01:07:51.740 --> 01:07:52.540
有了这个

01:07:54.040 --> 01:07:55.040
有了这个组件之后呢

01:07:55.040 --> 01:07:56.740
他里边不是提供了两个函数吗

01:07:56.840 --> 01:07:57.340
对不对

01:07:57.340 --> 01:07:58.740
什么on change

01:07:58.740 --> 01:07:59.740
对吧on change

01:07:59.740 --> 01:08:01.740
这个函数啊提供了那么一个事件

01:08:01.840 --> 01:08:03.140
那么我们去注册一下啊

01:08:03.140 --> 01:08:04.640
注册一下这个事件的回调

01:08:05.040 --> 01:08:06.440
注册一下这个事件的回调

01:08:07.640 --> 01:08:09.140
回调的话我们就直接写这吧

01:08:09.340 --> 01:08:09.940
或者说

01:08:10.640 --> 01:08:11.740
写到也行啊

01:08:11.740 --> 01:08:12.440
写到也行

01:08:15.010 --> 01:08:16.510
handle change

01:08:16.810 --> 01:08:17.810
handle change

01:08:18.610 --> 01:08:19.610
好这里面呢

01:08:19.610 --> 01:08:20.510
没写上啊

01:08:21.210 --> 01:08:21.710
type

01:08:22.210 --> 01:08:23.210
因为他给我一个字

01:08:23.210 --> 01:08:24.810
left还是是right

01:08:24.810 --> 01:08:26.010
对吧好我们这里

01:08:27.710 --> 01:08:30.010
绑定handle change

01:08:31.610 --> 01:08:32.210
好这里呢

01:08:32.210 --> 01:08:33.710
我们打印出这个type字啊

01:08:33.710 --> 01:08:34.810
打印出一个type字

01:08:34.910 --> 01:08:35.410
看一下

01:08:36.010 --> 01:08:36.610
保存

01:08:39.070 --> 01:08:40.170
嗯这里保错了啊

01:08:40.170 --> 01:08:40.970
看什么错误

01:08:41.270 --> 01:08:45.370
他说props types or defend as intents property

01:08:45.370 --> 01:08:46.570
啊明白了啊

01:08:46.970 --> 01:08:47.770
他报这个错误啊

01:08:47.770 --> 01:08:48.970
这里面有写静态的

01:08:50.470 --> 01:08:51.170
保存啊

01:08:51.370 --> 01:08:51.970
现在再看

01:08:52.370 --> 01:08:54.170
点这个你看得到是right对吧

01:08:54.170 --> 01:08:55.470
点这个得到是left

01:08:55.770 --> 01:08:57.070
那么点的是左还是右

01:08:57.070 --> 01:08:58.370
然后我们接着怎么再处理呢

01:08:58.370 --> 01:08:59.770
就在这里自行处理的啊

01:08:59.870 --> 01:09:02.170
就在我们这个这里面自行处理的

01:09:02.470 --> 01:09:02.970
我们这里呢

01:09:02.970 --> 01:09:04.170
比方说有这么一个状态

01:09:04.270 --> 01:09:05.670
有这么一个状态 state

01:09:08.140 --> 01:09:08.840
有这么个状态

01:09:09.040 --> 01:09:09.940
这状态里边呢

01:09:10.140 --> 01:09:11.040
curl index

01:09:11.040 --> 01:09:12.640
当前是第几张图片啊

01:09:12.640 --> 01:09:14.040
比方说我们有这么一个状态

01:09:14.240 --> 01:09:15.540
当前是第几张图片

01:09:15.640 --> 01:09:16.640
默认是0啊

01:09:16.640 --> 01:09:18.440
默认是0啊

01:09:18.640 --> 01:09:19.240
当前

01:09:20.440 --> 01:09:24.440
显示的第几张图片啊

01:09:24.440 --> 01:09:25.140
默认是0

01:09:26.040 --> 01:09:28.240
然后我们当我们转换的时候呢

01:09:28.240 --> 01:09:29.140
你看一下啊

01:09:29.340 --> 01:09:31.440
如果你给我的type

01:09:31.440 --> 01:09:32.540
指的是left

01:09:32.540 --> 01:09:34.240
那么我们是不是要切换对吧

01:09:34.640 --> 01:09:35.840
怎么怎么切换啊

01:09:35.840 --> 01:09:36.740
我们先得到嘛

01:09:36.940 --> 01:09:37.540
比方说啊

01:09:37.540 --> 01:09:39.440
我们先得到得到这个curl

01:09:39.640 --> 01:09:41.040
等于z state

01:09:41.140 --> 01:09:41.840
curl index

01:09:41.840 --> 01:09:42.440
先得到啊

01:09:42.440 --> 01:09:43.440
不能直接改变啊

01:09:43.440 --> 01:09:44.940
要先得到得到之后呢

01:09:44.940 --> 01:09:46.540
我们把先把他减减啊

01:09:46.940 --> 01:09:47.540
左边嘛

01:09:47.540 --> 01:09:47.740
对吧

01:09:47.740 --> 01:09:48.540
就减1嘛

01:09:49.040 --> 01:09:49.940
但减1过后呢

01:09:49.940 --> 01:09:51.240
他可能会出现一个情况

01:09:51.240 --> 01:09:52.540
就他小于0了

01:09:53.040 --> 01:09:53.940
啊小于0了

01:09:54.040 --> 01:09:54.940
那么小于0的时候

01:09:54.940 --> 01:09:56.440
是不是要把它切换到最后一张

01:09:56.640 --> 01:09:57.040
对吧

01:09:57.040 --> 01:09:58.340
把它切换到最后一张

01:09:58.440 --> 01:09:59.240
最后一张是多少

01:09:59.240 --> 01:09:59.940
是不是z

01:09:59.940 --> 01:10:00.540
probs

01:10:00.540 --> 01:10:01.140
image

01:10:01.140 --> 01:10:01.740
src

01:10:01.740 --> 01:10:02.740
s.nance

01:10:02.740 --> 01:10:03.340
-1

01:10:03.340 --> 01:10:03.640
对不对

01:10:03.640 --> 01:10:04.440
这是最后一张

01:10:05.440 --> 01:10:06.440
好 else

01:10:06.840 --> 01:10:07.340
啊

01:10:07.340 --> 01:10:08.740
他是相优的

01:10:08.940 --> 01:10:09.840
相优的话

01:10:09.840 --> 01:10:10.740
curl加加

01:10:11.340 --> 01:10:11.740
啊

01:10:12.240 --> 01:10:12.840
加1

01:10:12.940 --> 01:10:13.640
加1的话

01:10:13.640 --> 01:10:14.840
如果他大于了什么

01:10:14.840 --> 01:10:16.040
大于了z

01:10:16.040 --> 01:10:16.540
probs

01:10:16.740 --> 01:10:17.340
image

01:10:17.340 --> 01:10:17.740
src

01:10:17.740 --> 01:10:18.840
s.nance

01:10:18.840 --> 01:10:19.140
-1

01:10:19.140 --> 01:10:20.640
大于到最大下标

01:10:20.640 --> 01:10:22.040
那么把它设置为0

01:10:22.240 --> 01:10:22.540
对吧

01:10:22.540 --> 01:10:23.240
把设置为0

01:10:23.240 --> 01:10:24.140
就切换回去

01:10:24.640 --> 01:10:25.440
那就完了

01:10:25.840 --> 01:10:26.240
然后呢

01:10:26.240 --> 01:10:27.240
是不是重新设置状态

01:10:27.240 --> 01:10:27.740
对吧

01:10:27.940 --> 01:10:29.340
重新设置状态

01:10:29.540 --> 01:10:30.040
z

01:10:30.240 --> 01:10:31.140
set state

01:10:31.440 --> 01:10:32.340
重新设置状态

01:10:32.740 --> 01:10:33.640
什么状态呢

01:10:34.640 --> 01:10:36.340
状态的就是重新设置为什么

01:10:37.940 --> 01:10:39.240
curl index

01:10:39.240 --> 01:10:40.240
把设置为curl

01:10:41.540 --> 01:10:42.540
重新设置状态

01:10:44.450 --> 01:10:44.850
好

01:10:45.150 --> 01:10:46.350
重新设置状态过后

01:10:46.350 --> 01:10:47.950
你还是不是还在调用于是这个玩意

01:10:48.250 --> 01:10:48.650
对不对

01:10:48.650 --> 01:10:49.850
他才能完成切换吧

01:10:50.350 --> 01:10:50.750
对不对

01:10:50.850 --> 01:10:51.950
你还要调用于是这个玩意

01:10:51.950 --> 01:10:53.350
才能完成切换

01:10:53.450 --> 01:10:53.650
好

01:10:53.650 --> 01:10:54.250
那么这个

01:10:54.250 --> 01:10:54.850
这个玩意

01:10:55.850 --> 01:10:57.350
handle switch

01:10:57.650 --> 01:10:58.650
handle switch

01:10:58.850 --> 01:10:59.650
完成切换

01:11:00.050 --> 01:11:00.850
切换到哪呢

01:11:00.850 --> 01:11:02.150
是不是新的坐标

01:11:02.150 --> 01:11:02.450
对吧

01:11:02.450 --> 01:11:03.010
新的坐标

01:11:03.010 --> 01:11:03.450
curl

01:11:04.150 --> 01:11:04.850
切换到新的

01:11:04.850 --> 01:11:05.650
新的下标

01:11:06.150 --> 01:11:07.150
保存在那边看一下

01:11:08.250 --> 01:11:08.750
点击

01:11:08.850 --> 01:11:09.350
你看啊

01:11:09.450 --> 01:11:09.950
点击

01:11:09.950 --> 01:11:10.450
你看一下

01:11:10.450 --> 01:11:11.350
这边完成切换了

01:11:11.650 --> 01:11:12.150
对不对

01:11:12.650 --> 01:11:13.350
没问题吧

01:11:13.850 --> 01:11:14.450
啊你看

01:11:16.780 --> 01:11:17.080
看没有

01:11:17.080 --> 01:11:18.780
我现在不是无缝滚动啊

01:11:18.780 --> 01:11:20.080
所以他会跳回去

01:11:20.880 --> 01:11:21.780
就完成切换了

01:11:22.680 --> 01:11:23.180
ok

01:11:23.280 --> 01:11:23.780
就完了

01:11:26.950 --> 01:11:27.450
然后呢

01:11:27.450 --> 01:11:28.450
这里边还有一个

01:11:28.450 --> 01:11:29.550
还有一个小问题就是

01:11:29.550 --> 01:11:31.150
当我们鼠标移上去的时候呢

01:11:31.150 --> 01:11:31.550
这个

01:11:31.850 --> 01:11:32.550
才显示

01:11:32.550 --> 01:11:33.250
移开的时候呢

01:11:33.250 --> 01:11:34.250
它是消失的啊

01:11:34.350 --> 01:11:35.750
移开的时候它是消失的

01:11:35.750 --> 01:11:37.750
只有移上去的时候才会显示

01:11:37.750 --> 01:11:38.550
就是箭头

01:11:39.150 --> 01:11:39.750
那么这里呢

01:11:39.750 --> 01:11:40.750
我们就起个hopper

01:11:40.750 --> 01:11:41.750
起个样式就完成了

01:11:41.750 --> 01:11:42.550
这个很简单

01:11:42.950 --> 01:11:45.550
就是他本身默认情况下呢

01:11:45.550 --> 01:11:46.850
在这个主键里边啊

01:11:47.250 --> 01:11:49.350
在这个主键里边默认情况下

01:11:50.050 --> 01:11:50.750
iRoll呢

01:11:51.850 --> 01:11:53.150
是不显示的啊

01:11:53.150 --> 01:11:54.050
是不显示的

01:11:54.950 --> 01:11:55.550
display

01:11:55.950 --> 01:11:56.350
啦

01:11:57.550 --> 01:11:58.950
什么时候显示呢

01:11:59.050 --> 01:12:01.350
当我们鼠标移入上去的时候

01:12:01.350 --> 01:12:02.650
移入到整个banner

01:12:03.350 --> 01:12:04.350
banner container

01:12:04.550 --> 01:12:05.450
里边去的时候

01:12:05.850 --> 01:12:07.250
当我们移入到这里的时候呢

01:12:07.450 --> 01:12:08.950
再去显示这个iRoll

01:12:09.850 --> 01:12:11.050
display block

01:12:11.850 --> 01:12:12.450
啊保存啊

01:12:12.450 --> 01:12:13.250
这个很简单

01:12:13.750 --> 01:12:15.050
啊你看啊

01:12:15.250 --> 01:12:16.350
显示这么个效果啊

01:12:16.850 --> 01:12:18.150
好切换切换

01:12:20.650 --> 01:12:21.250
好了啊

01:12:21.650 --> 01:12:22.350
那么这里呢

01:12:22.350 --> 01:12:24.450
我们就已经把很核心的东西做完了

01:12:24.450 --> 01:12:25.250
那么还剩下

01:12:25.250 --> 01:12:26.150
还剩下一个

01:12:27.550 --> 01:12:28.250
什么玩意呢

01:12:28.550 --> 01:12:29.550
是不是小底儿

01:12:29.650 --> 01:12:31.050
用小底儿来切换

01:12:31.050 --> 01:12:31.550
对吧

01:12:31.550 --> 01:12:32.850
用小底儿来切换

01:12:32.850 --> 01:12:33.150
好

01:12:33.150 --> 01:12:34.250
给个文件夹啊

01:12:34.450 --> 01:12:35.050
dot

01:12:35.850 --> 01:12:37.150
switch dot

01:12:37.450 --> 01:12:38.150
switch

01:12:38.650 --> 01:12:39.150
dot

01:12:39.150 --> 01:12:40.050
dot表示小点

01:12:40.050 --> 01:12:40.750
小点

01:12:41.750 --> 01:12:43.450
创建小点来进行切换

01:12:43.950 --> 01:12:45.650
in这个是点解释

01:12:46.550 --> 01:12:48.150
创建个内样式

01:12:48.150 --> 01:12:48.850
内组件

01:12:49.450 --> 01:12:51.050
switch dot

01:12:53.620 --> 01:12:54.820
好你要给我哪些东西呢

01:12:54.820 --> 01:12:55.820
就生成这东西啊

01:12:55.920 --> 01:12:57.720
他说最终目标就生成这个玩意

01:12:58.120 --> 01:12:59.120
看下面这个玩意

01:13:00.220 --> 01:13:00.920
就这个东西

01:13:01.220 --> 01:13:02.720
最终目标是要生成他

01:13:02.820 --> 01:13:03.720
那么怎么来生成他呢

01:13:03.720 --> 01:13:05.220
他肯定有个DIV对吧

01:13:05.220 --> 01:13:05.920
他要居中

01:13:05.920 --> 01:13:07.120
他肯定也是觉得定位

01:13:07.120 --> 01:13:08.620
有大堆样式要设置

01:13:08.720 --> 01:13:11.020
那么关键点在于他有几个

01:13:11.920 --> 01:13:13.220
这个东西是关键

01:13:13.220 --> 01:13:14.020
他有几个

01:13:14.420 --> 01:13:15.620
当前是几

01:13:16.120 --> 01:13:17.620
他有几个是不是要告诉我

01:13:17.820 --> 01:13:19.620
你再告诉我这么个东西啊

01:13:19.920 --> 01:13:22.120
当前你选中的是第一个

01:13:22.320 --> 01:13:23.420
然后呢你还要告诉我

01:13:23.420 --> 01:13:24.620
一共有几个对吧

01:13:24.620 --> 01:13:26.420
所以他的属性呢很简单

01:13:26.620 --> 01:13:27.220
他的属性呢

01:13:27.220 --> 01:13:28.320
我们把他约束一下啊

01:13:28.320 --> 01:13:29.120
probe types

01:13:29.620 --> 01:13:30.820
养成这样的习惯啊

01:13:30.820 --> 01:13:31.420
总是好的

01:13:31.420 --> 01:13:32.520
不要怕麻烦

01:13:33.020 --> 01:13:35.820
嗯如果你说觉得很麻烦的话

01:13:36.820 --> 01:13:37.720
唯有简单

01:13:37.720 --> 01:13:38.220
但是呢

01:13:38.220 --> 01:13:40.020
唯有开发大动性项目的时候呢

01:13:40.020 --> 01:13:41.320
会遇到一些困难

01:13:42.820 --> 01:13:43.420
rx 呢

01:13:43.420 --> 01:13:45.020
他专门来开发大动性项目的

01:13:45.120 --> 01:13:45.920
所以说呢

01:13:46.920 --> 01:13:47.920
一些组件的时候呢

01:13:47.920 --> 01:13:49.120
还是尽量的啊

01:13:49.220 --> 01:13:50.720
把他把它优化一下

01:13:50.920 --> 01:13:52.120
你现在麻烦一点

01:13:52.120 --> 01:13:54.020
你将来呢会减少很多麻烦

01:13:55.020 --> 01:13:55.820
现在呢

01:13:55.820 --> 01:13:56.520
把他倒进来啊

01:13:56.520 --> 01:13:57.320
probe types

01:13:58.020 --> 01:14:00.820
probe types

01:14:01.020 --> 01:14:01.720
倒进来

01:14:02.020 --> 01:14:02.320
好

01:14:02.320 --> 01:14:03.520
然后这里边约束一下啊

01:14:03.520 --> 01:14:04.520
一个是toto

01:14:04.620 --> 01:14:06.520
一共总共的数量要告诉我

01:14:06.820 --> 01:14:09.020
一共有多少个数字啊按钮

01:14:09.420 --> 01:14:11.020
这里是一个probe types

01:14:11.320 --> 01:14:13.520
number is required

01:14:15.020 --> 01:14:15.620
然后呢

01:14:15.620 --> 01:14:17.220
还要告诉我就是当前

01:14:17.220 --> 01:14:18.820
当前是第幾啊

01:14:18.820 --> 01:14:20.220
curl index要告诉我

01:14:20.820 --> 01:14:22.520
probe types

01:14:23.120 --> 01:14:25.120
他是一个number is required

01:14:25.120 --> 01:14:27.120
这两个东西都要告诉我啊

01:14:27.120 --> 01:14:27.820
都要告诉我

01:14:28.920 --> 01:14:29.720
好行了啊

01:14:30.120 --> 01:14:30.520
假设

01:14:30.520 --> 01:14:31.920
那么这边我们用的时候呢

01:14:31.920 --> 01:14:32.920
要传过去啊

01:14:32.920 --> 01:14:33.820
要传过去

01:14:34.120 --> 01:14:35.320
这里面要倒进来啊

01:14:37.330 --> 01:14:38.030
import

01:14:39.030 --> 01:14:39.530
呃

01:14:40.030 --> 01:14:40.930
主件是

01:14:41.630 --> 01:14:42.830
switch dot

01:14:44.030 --> 01:14:44.830
啊这个主键

01:14:45.430 --> 01:14:46.930
好这里使用一下这个主键

01:14:51.290 --> 01:14:52.990
他有这么一些属性的传递啊

01:14:52.990 --> 01:14:53.790
一个是toto

01:14:53.790 --> 01:14:54.490
总数

01:14:54.690 --> 01:14:55.590
总数有多少个呢

01:14:55.590 --> 01:14:57.190
是不是跟当前的属性

01:14:57.190 --> 01:14:59.490
img srcs有关系

01:14:59.490 --> 01:14:59.890
对吧

01:15:00.390 --> 01:15:01.790
这个数组长度是多少

01:15:01.790 --> 01:15:03.290
那么就一共有多少个

01:15:03.490 --> 01:15:03.890
然后呢

01:15:03.890 --> 01:15:04.590
当前

01:15:04.590 --> 01:15:05.390
curl index

01:15:05.390 --> 01:15:07.690
是不是跟我们的那个状态里边的数据啊

01:15:07.690 --> 01:15:09.290
来自于我们状态里边的数据啊

01:15:09.290 --> 01:15:10.190
curl index

01:15:10.190 --> 01:15:10.490
对吧

01:15:10.490 --> 01:15:11.490
把这些东西传给你

01:15:12.290 --> 01:15:12.890
好了啊

01:15:12.990 --> 01:15:13.790
那这边来

01:15:13.890 --> 01:15:15.190
当然他在这点一会呢

01:15:15.190 --> 01:15:16.790
我们还会设计到一个事件啊

01:15:16.790 --> 01:15:18.290
就点了过后啊

01:15:18.290 --> 01:15:19.790
点了过后的时间啊

01:15:19.790 --> 01:15:20.090
行吧

01:15:20.090 --> 01:15:21.690
我们就想着就一起写什么啊

01:15:21.790 --> 01:15:22.590
on change

01:15:22.790 --> 01:15:23.690
on change

01:15:23.890 --> 01:15:25.190
点了过后的时间

01:15:25.690 --> 01:15:27.190
好那么点了过后的时间呢

01:15:27.390 --> 01:15:28.590
呃我们使用啊

01:15:28.590 --> 01:15:30.190
还是一个funk啊

01:15:30.190 --> 01:15:31.090
一个函数

01:15:31.990 --> 01:15:32.990
好那么这边来啊

01:15:32.990 --> 01:15:34.090
我们想着就把写了啊

01:15:34.290 --> 01:15:35.090
on change

01:15:35.190 --> 01:15:36.090
有这么一个函数

01:15:36.090 --> 01:15:36.990
要传给我啊

01:15:36.990 --> 01:15:39.790
当然你要要使用这个时间的话你就使用啊

01:15:39.790 --> 01:15:40.990
不使用这个时间的话就算了

01:15:40.990 --> 01:15:41.990
看你看你自己

01:15:42.590 --> 01:15:42.990
好

01:15:43.190 --> 01:15:43.590
然后呢

01:15:43.590 --> 01:15:44.490
这边函数的话

01:15:44.490 --> 01:15:45.690
我们就直接写到这吧

01:15:45.690 --> 01:15:46.090
干谁

01:15:46.090 --> 01:15:46.590
要不然

01:15:46.690 --> 01:15:48.190
或者是写到外面也行啊

01:15:48.390 --> 01:15:48.990
也行

01:15:48.990 --> 01:15:50.290
那之前的名字的改一下啊

01:15:50.290 --> 01:15:51.290
要区分一下

01:15:51.690 --> 01:15:53.490
handle arrow change啊

01:15:53.590 --> 01:15:55.490
当我们箭头发生改变的时候

01:15:55.490 --> 01:15:56.990
当我们点了箭头之后

01:15:57.390 --> 01:15:58.190
做的事情

01:15:58.490 --> 01:15:58.990
这个地方呢

01:15:58.990 --> 01:15:59.890
我们再写一个函数啊

01:15:59.890 --> 01:16:02.190
叫做handle dot change

01:16:03.390 --> 01:16:04.990
啊当我们点了点过后呢

01:16:04.990 --> 01:16:05.790
他要做的事情

01:16:06.490 --> 01:16:07.890
好再来写个写个这个

01:16:09.490 --> 01:16:10.990
好你要给我传一个参数进来

01:16:10.990 --> 01:16:11.690
什么参数呢

01:16:11.690 --> 01:16:13.390
就是一个新的下标啊

01:16:13.390 --> 01:16:14.790
你会把他到时候呢

01:16:14.790 --> 01:16:16.290
会把新的下标给我

01:16:16.290 --> 01:16:17.290
一点点那么一个点

01:16:17.290 --> 01:16:17.990
比方说啊

01:16:17.990 --> 01:16:18.890
我点的是他

01:16:18.890 --> 01:16:20.790
那么他就会传一个一进来

01:16:20.990 --> 01:16:21.990
点的是他呢

01:16:21.990 --> 01:16:23.990
他就会传一个五进来

01:16:23.990 --> 01:16:24.890
对吧啊

01:16:24.890 --> 01:16:26.290
把新的下标传给我

01:16:26.290 --> 01:16:27.390
那我这里干嘛呢

01:16:27.390 --> 01:16:27.990
非常简单

01:16:27.990 --> 01:16:29.090
就set state 呗

01:16:29.690 --> 01:16:30.590
curl index

01:16:30.990 --> 01:16:32.490
把设置为什么index

01:16:32.490 --> 01:16:33.590
对吧就完事了

01:16:33.590 --> 01:16:35.190
然后再调用一下handle

01:16:35.890 --> 01:16:36.590
switch

01:16:38.190 --> 01:16:38.890
调用一下这个

01:16:39.190 --> 01:16:40.390
把index传进去

01:16:41.690 --> 01:16:42.990
对吧就完事了啊

01:16:44.090 --> 01:16:45.690
好没了啊没了

01:16:46.490 --> 01:16:46.990
嗯

01:16:47.890 --> 01:16:49.490
看一下还还要干嘛呢

01:16:49.690 --> 01:16:50.690
其实这个地方呢

01:16:50.690 --> 01:16:52.390
我们可以把这个set state 放这

01:16:52.390 --> 01:16:52.890
对吧

01:16:53.090 --> 01:16:54.490
实际上是可以放这的啊

01:16:54.490 --> 01:16:54.990
放这

01:16:55.690 --> 01:16:56.290
没问题吧

01:16:56.290 --> 01:16:57.590
实际上是可以放这的啊

01:16:58.190 --> 01:16:59.390
嗯放这就行了

01:16:59.490 --> 01:17:00.990
然后呢这里面呢

01:17:02.290 --> 01:17:03.690
handle switch 就行了啊

01:17:03.690 --> 01:17:05.590
这里面我就直接使用handle switch

01:17:06.090 --> 01:17:07.090
就不要这个handle switch了啊

01:17:07.090 --> 01:17:08.290
就可以惊剪一下啊

01:17:08.890 --> 01:17:09.790
这个就不要了

01:17:09.890 --> 01:17:10.790
然后这边呢

01:17:10.790 --> 01:17:12.790
我们得到新的下标之后呢

01:17:12.790 --> 01:17:13.990
我们直接调用这个啊

01:17:13.990 --> 01:17:14.990
就不要这句话了

01:17:15.290 --> 01:17:16.690
直接调用这个就完事了啊

01:17:16.690 --> 01:17:18.690
因为在这里面统一的设置状态

01:17:19.290 --> 01:17:21.290
因为最终都是要调用他对吧

01:17:21.290 --> 01:17:22.790
在他里面统一设置状态

01:17:23.590 --> 01:17:24.990
好就没他了啊就没他了

01:17:25.090 --> 01:17:26.190
好那么现在我们把这个组件

01:17:26.190 --> 01:17:27.590
一写完那就完事了

01:17:27.890 --> 01:17:28.690
好这个组件里面呢

01:17:28.690 --> 01:17:29.690
给他个那样式啊

01:17:29.690 --> 01:17:30.390
class name

01:17:31.090 --> 01:17:32.490
嗯给他个dots吧

01:17:32.490 --> 01:17:33.090
dots

01:17:33.690 --> 01:17:34.890
好先接个问题啊

01:17:34.890 --> 01:17:35.590
css

01:17:38.540 --> 01:17:39.440
再导入进来啊

01:17:41.140 --> 01:17:41.840
import

01:17:42.640 --> 01:17:43.440
点儿写钢

01:17:43.440 --> 01:17:44.840
index css

01:17:47.110 --> 01:17:48.110
好这个css里边呢

01:17:48.110 --> 01:17:50.410
我们设置设置一下这个的样式啊

01:17:50.410 --> 01:17:50.910
dots

01:17:51.410 --> 01:17:52.510
他肯定是觉得定位

01:17:52.910 --> 01:17:53.610
abs note

01:17:54.110 --> 01:17:56.510
嗯宽度都不用设置了吧

01:17:56.510 --> 01:17:57.310
宽度

01:17:57.810 --> 01:17:58.410
不用设置啊

01:17:58.410 --> 01:17:59.010
然后自动

01:17:59.410 --> 01:18:00.310
pending呢

01:18:00.310 --> 01:18:02.410
设置为上下为5个相处啊

01:18:02.410 --> 01:18:03.710
左右为7个相处啊

01:18:03.710 --> 01:18:04.710
先随便设置一个

01:18:05.110 --> 01:18:06.210
背景颜色呢

01:18:06.210 --> 01:18:07.610
给他是这个半头名的啊

01:18:07.610 --> 01:18:08.510
rgba

01:18:08.610 --> 01:18:10.510
0.002

01:18:10.910 --> 01:18:11.310
呃

01:18:11.910 --> 01:18:13.110
我看一下这边是多少啊

01:18:13.610 --> 01:18:14.310
看下这边

01:18:15.910 --> 01:18:16.910
嗯这边呢

01:18:16.910 --> 01:18:18.210
哦他是这个这个啊

01:18:18.210 --> 01:18:19.610
他是一个白色的半头名

01:18:19.610 --> 01:18:20.810
那行吧啊无所谓

01:18:20.910 --> 01:18:21.810
白色的半头名

01:18:22.510 --> 01:18:23.230
呃然后呢

01:18:23.230 --> 01:18:24.010
pending呢

01:18:24.510 --> 01:18:25.410
啊没有设置啊

01:18:25.410 --> 01:18:26.610
没有设置啊

01:18:26.610 --> 01:18:27.710
pending2和4

01:18:27.710 --> 01:18:29.310
那行吧啊那就2和4呗

01:18:29.610 --> 01:18:31.110
啊pending2和4

01:18:32.210 --> 01:18:33.410
呃然后还有什么呢

01:18:34.310 --> 01:18:36.510
呃他里边有什么东西啊

01:18:36.510 --> 01:18:38.810
他本身是一个圆角啊

01:18:38.810 --> 01:18:39.410
border

01:18:40.410 --> 01:18:41.110
radius

01:18:41.410 --> 01:18:42.410
比方说是

01:18:44.010 --> 01:18:44.610
多少呢

01:18:44.610 --> 01:18:45.610
border radius

01:18:45.810 --> 01:18:47.010
8个相处啊

01:18:47.810 --> 01:18:49.310
呃然后他本身要居中

01:18:50.210 --> 01:18:50.710
nab

01:18:50.910 --> 01:18:51.810
50%

01:18:53.310 --> 01:18:54.010
嗯bottom呢

01:18:54.010 --> 01:18:54.710
你下边呢

01:18:54.710 --> 01:18:56.210
有30个相处啊

01:18:56.210 --> 01:18:56.910
比方说

01:18:57.110 --> 01:18:58.410
然后呢transform

01:18:58.710 --> 01:19:00.110
啊transnet x啊

01:19:00.110 --> 01:19:01.610
这些基础只是你不要忘了啊

01:19:01.610 --> 01:19:02.810
传统手艺不能丢

01:19:03.610 --> 01:19:04.610
啊保存啊

01:19:04.810 --> 01:19:05.510
看一下啊

01:19:07.210 --> 01:19:08.510
嗯看没出来了

01:19:08.510 --> 01:19:09.410
对吧出来了

01:19:10.410 --> 01:19:11.510
啊在这看没

01:19:12.110 --> 01:19:13.710
啊很小啊非常微浪小

01:19:13.810 --> 01:19:15.310
目前的看来不是很清楚啊

01:19:15.410 --> 01:19:16.610
在这看没在这

01:19:17.210 --> 01:19:18.710
啊你下边呢有一点运

01:19:18.710 --> 01:19:19.010
对吧

01:19:19.010 --> 01:19:20.010
你下边有点运

01:19:20.310 --> 01:19:21.610
八分十个像素吗啊

01:19:22.410 --> 01:19:23.410
在这啊在这

01:19:23.810 --> 01:19:24.910
啊行了啊放到这

01:19:25.510 --> 01:19:27.710
好然后呢往里边加小点啊

01:19:27.710 --> 01:19:28.710
往里边加小点

01:19:28.710 --> 01:19:29.810
就是一个一个小点的

01:19:29.810 --> 01:19:30.910
就是一个十半元素吗啊

01:19:30.910 --> 01:19:32.210
比方说一个十半元素

01:19:32.710 --> 01:19:34.610
好那么关键是有几个十半元素呢

01:19:34.610 --> 01:19:35.810
是不是按照偷头来

01:19:35.810 --> 01:19:37.610
对不对啊用这个东西来得到

01:19:37.710 --> 01:19:39.210
好我们这里呢就可以写个数组

01:19:39.810 --> 01:19:41.710
啊写个数组啊比方说啊

01:19:42.010 --> 01:19:43.510
spans写个数组

01:19:43.910 --> 01:19:44.710
啊这个数组呢

01:19:44.710 --> 01:19:46.910
我们就可以循环循环得到啊

01:19:48.110 --> 01:19:50.010
nate i等于0

01:19:50.210 --> 01:19:52.310
i小于什么spans

01:19:52.610 --> 01:19:53.410
spans

01:19:53.510 --> 01:19:54.010
点

01:19:54.510 --> 01:19:55.310
i小于什么

01:19:55.510 --> 01:19:56.410
this props

01:19:56.510 --> 01:19:58.010
点头头总数

01:19:58.310 --> 01:19:59.110
i加加

01:19:59.610 --> 01:20:00.510
没循环意思呢

01:20:00.510 --> 01:20:01.910
往里边加一个啊

01:20:01.910 --> 01:20:02.610
push一个

01:20:03.910 --> 01:20:04.510
push个啥呢

01:20:04.510 --> 01:20:05.210
push一个

01:20:06.210 --> 01:20:07.110
一个元素

01:20:07.110 --> 01:20:08.410
什么元素十半元素

01:20:08.810 --> 01:20:10.010
push一个十半元素

01:20:10.310 --> 01:20:12.310
好这十半元素里边有什么属性呢

01:20:12.310 --> 01:20:13.210
也没啥属性啊

01:20:13.210 --> 01:20:13.810
也没啥属性

01:20:13.810 --> 01:20:15.410
我们先把人人进来再说啊

01:20:17.410 --> 01:20:18.610
spans啊放进来

01:20:18.610 --> 01:20:19.710
当然要写个keyz啊

01:20:19.710 --> 01:20:21.010
不要忘记要写个keyz

01:20:21.510 --> 01:20:23.010
key的话就等于i吧

01:20:23.010 --> 01:20:23.810
啊等于i

01:20:24.210 --> 01:20:25.410
好吧 spans放进去

01:20:25.610 --> 01:20:26.810
好然后呢我们来设置一下

01:20:26.810 --> 01:20:28.010
这个span的样式啊

01:20:28.010 --> 01:20:29.510
设置一下他里边span的样式

01:20:29.610 --> 01:20:30.210
到此

01:20:31.910 --> 01:20:33.510
里边十半元素的样式啊

01:20:33.810 --> 01:20:34.710
然后

01:20:35.110 --> 01:20:35.910
按照这样吧

01:20:36.510 --> 01:20:37.810
咱们呢把这个dots呢

01:20:37.810 --> 01:20:39.410
变成一个弹性盒啊

01:20:39.410 --> 01:20:40.010
display

01:20:40.910 --> 01:20:42.610
flex而变成个弹性盒

01:20:42.910 --> 01:20:44.210
弹性盒里边啊

01:20:44.210 --> 01:20:45.010
我们这里呢

01:20:45.010 --> 01:20:45.910
往这个十半呢

01:20:45.910 --> 01:20:46.610
每个十半呢

01:20:46.610 --> 01:20:48.210
就是个弹性元素对吧

01:20:48.310 --> 01:20:50.010
然后设置一下十半的宽高

01:20:50.410 --> 01:20:51.210
宽度呢

01:20:51.210 --> 01:20:52.510
我看一下这边是多少吧

01:20:54.010 --> 01:20:55.310
这边每一个

01:20:55.710 --> 01:20:56.310
十边

01:20:57.110 --> 01:21:00.110
宽度八成一八好八个相处啊

01:21:00.310 --> 01:21:01.110
八个相处

01:21:01.110 --> 01:21:02.710
然后背景颜色为白色

01:21:04.210 --> 01:21:05.410
啊背景颜色为白色

01:21:05.510 --> 01:21:06.910
border writers啊

01:21:06.910 --> 01:21:08.310
为百分之五十

01:21:08.510 --> 01:21:10.110
然后呢设置个multim啊

01:21:10.110 --> 01:21:12.410
上下为零左右的话为三个相处

01:21:12.910 --> 01:21:14.010
保存看一下

01:21:15.410 --> 01:21:16.510
啊你看是不是出来了

01:21:16.510 --> 01:21:16.910
对吧

01:21:17.310 --> 01:21:18.510
上下的pan啊

01:21:18.510 --> 01:21:20.710
上下也加上三个相数嘛

01:21:21.110 --> 01:21:22.010
啊上下也加上

01:21:22.610 --> 01:21:23.810
啊差不多是这个意思啊

01:21:24.210 --> 01:21:25.410
有这个意思就行了啊

01:21:25.510 --> 01:21:27.210
然后呢把这个span呢变成一个cursor

01:21:27.210 --> 01:21:29.710
把pointer啊变成一个小手

01:21:30.610 --> 01:21:32.010
那么现在还有两个问题没解决

01:21:32.010 --> 01:21:32.710
第一个呢

01:21:32.810 --> 01:21:33.610
是就是

01:21:34.110 --> 01:21:36.110
当前有样式有个变化

01:21:36.110 --> 01:21:36.510
对吧

01:21:36.510 --> 01:21:38.910
当前选中的那个样式有个变化

01:21:39.110 --> 01:21:40.110
那么比方说吧

01:21:40.210 --> 01:21:41.410
我给其中一个span呢

01:21:41.410 --> 01:21:43.510
加上一个active样式啊

01:21:43.510 --> 01:21:44.410
加上这么个样式

01:21:44.510 --> 01:21:46.510
这个样式给它重新设置一下背景颜色

01:21:46.510 --> 01:21:47.110
就完事了

01:21:47.310 --> 01:21:49.010
重新设置一下背景颜色

01:21:49.210 --> 01:21:50.410
那么关键点在于

01:21:50.510 --> 01:21:53.310
我们什么时候给他加上这个active呢

01:21:53.310 --> 01:21:54.010
回到这边来

01:21:54.510 --> 01:21:55.310
什么时候呢

01:21:56.210 --> 01:21:57.310
就是这个i

01:21:58.010 --> 01:21:58.910
等于啥

01:21:58.910 --> 01:22:01.010
等于当前那个下标对吧

01:22:01.310 --> 01:22:02.710
当前的选中的图片下标

01:22:02.710 --> 01:22:03.510
就这个啊

01:22:05.010 --> 01:22:08.410
当前选中的下标啊

01:22:08.610 --> 01:22:09.410
那么这里呢

01:22:09.410 --> 01:22:11.210
我们只需要啊

01:22:11.810 --> 01:22:12.610
设置一下啊

01:22:12.610 --> 01:22:13.410
设置一下

01:22:13.510 --> 01:22:14.110
什么呢

01:22:14.910 --> 01:22:16.710
我们这里class name啊

01:22:17.010 --> 01:22:18.810
等于来最后一个表达式

01:22:18.810 --> 01:22:19.610
什么表达式呢

01:22:19.810 --> 01:22:21.410
如果i等于了

01:22:21.410 --> 01:22:22.810
什么vs props

01:22:22.810 --> 01:22:24.610
点什么curl index

01:22:24.610 --> 01:22:25.410
啊等于这个

01:22:25.510 --> 01:22:26.810
那么就给他一个那样式

01:22:26.810 --> 01:22:27.910
叫做什么active

01:22:28.210 --> 01:22:29.410
否则的话就给他空

01:22:29.510 --> 01:22:30.210
控制不错

01:22:30.210 --> 01:22:30.610
对吧

01:22:30.610 --> 01:22:31.910
给他设置这么一个东西

01:22:32.510 --> 01:22:33.510
好好把我穿看一下

01:22:34.510 --> 01:22:35.010
这边来

01:22:35.510 --> 01:22:36.510
目前是第一个对吧

01:22:36.510 --> 01:22:37.710
然后你看我们切换

01:22:38.210 --> 01:22:38.610
是不是

01:22:38.610 --> 01:22:39.410
他也跟着切换了

01:22:39.410 --> 01:22:39.910
为什么

01:22:39.910 --> 01:22:40.810
因为切换的时候

01:22:40.810 --> 01:22:41.810
状态是不是变了

01:22:42.010 --> 01:22:43.610
你状态一变啊

01:22:43.610 --> 01:22:44.310
你看这边

01:22:44.310 --> 01:22:45.010
状态一变

01:22:45.010 --> 01:22:46.010
因为他这个curl index

01:22:46.010 --> 01:22:47.010
是来自于状态的

01:22:47.010 --> 01:22:48.210
那这里是不是重新宣展

01:22:48.310 --> 01:22:48.610
对吧

01:22:48.610 --> 01:22:49.010
重新宣展

01:22:49.010 --> 01:22:49.410
他就

01:22:49.610 --> 01:22:50.810
这个属性是不是刷新了

01:22:50.910 --> 01:22:51.910
这个属性一变的话

01:22:51.910 --> 01:22:52.610
那么这里

01:22:52.610 --> 01:22:54.310
是不是重新来render一次

01:22:54.410 --> 01:22:54.910
对吧

01:22:55.510 --> 01:22:56.810
就变成这么一种结构了啊

01:22:57.310 --> 01:22:58.610
那么最后来就是点击

01:22:58.810 --> 01:23:00.310
当我们点击这个span的时候

01:23:00.610 --> 01:23:01.310
要做一些事

01:23:04.350 --> 01:23:04.950
onclick

01:23:05.350 --> 01:23:06.850
当点击这个span的时候

01:23:07.250 --> 01:23:08.050
要干嘛呢

01:23:08.650 --> 01:23:09.450
是不是一样的

01:23:09.850 --> 01:23:10.850
看一下你属性里边

01:23:10.850 --> 01:23:12.550
有没有传一个onchain级进来

01:23:12.750 --> 01:23:13.850
如果你传递了

01:23:13.850 --> 01:23:14.450
干嘛

01:23:15.150 --> 01:23:16.150
onchain级

01:23:16.650 --> 01:23:17.350
把什么传进去

01:23:17.350 --> 01:23:18.650
是不是把这个i传进去

01:23:19.150 --> 01:23:20.150
我要告诉你

01:23:20.150 --> 01:23:21.850
我点的是第几张图片

01:23:21.850 --> 01:23:22.250
对吧

01:23:22.650 --> 01:23:23.650
之前我们约定好了的

01:23:23.650 --> 01:23:24.250
你看这边

01:23:25.150 --> 01:23:27.250
这边注册的事件是handle switch

01:23:27.350 --> 01:23:28.850
handle switch里边有个index

01:23:28.850 --> 01:23:31.350
你要把我点的这个index传过去

01:23:32.150 --> 01:23:33.650
好这里就完成了啊

01:23:33.850 --> 01:23:34.950
保存看一下吧

01:23:35.250 --> 01:23:35.950
点这个

01:23:36.150 --> 01:23:37.550
哎出错了啊出错了

01:23:38.350 --> 01:23:41.050
this unchange is not functioning

01:23:41.850 --> 01:23:42.450
哦这里

01:23:42.750 --> 01:23:43.450
这里写错了啊

01:23:43.450 --> 01:23:45.650
in this props.unchange

01:23:46.750 --> 01:23:47.850
好演技啊

01:23:47.850 --> 01:23:48.450
你看一下

01:23:48.850 --> 01:23:49.850
这可以完成切换了

01:23:49.850 --> 01:23:50.250
对吧

01:23:50.350 --> 01:23:51.150
这边可以完成

01:23:51.150 --> 01:23:51.950
这边也可以完成

01:23:51.950 --> 01:23:52.750
这边也可以完成

01:23:54.050 --> 01:23:55.150
基本上结束了

01:23:56.150 --> 01:23:57.250
其实还有最后一件事

01:23:57.250 --> 01:23:58.050
什么事呢

01:23:58.250 --> 01:23:59.450
就自动啊

01:23:59.650 --> 01:24:01.450
就自动那个进行

01:24:02.050 --> 01:24:04.150
自动的切换

01:24:04.450 --> 01:24:05.650
我们把它写到班那里边

01:24:06.450 --> 01:24:07.250
啊班那里边

01:24:07.450 --> 01:24:08.550
自动进行切换

01:24:09.150 --> 01:24:10.650
什么时候自动进行切换呢

01:24:10.650 --> 01:24:11.350
我们这里呢

01:24:11.350 --> 01:24:12.350
在stats里边呢

01:24:12.350 --> 01:24:14.350
可以写一是要写上一个

01:24:15.050 --> 01:24:15.750
timer

01:24:16.450 --> 01:24:19.150
或者说我们就不用在stats里边写了

01:24:19.150 --> 01:24:20.650
啊直接直接在属性里边写了

01:24:20.850 --> 01:24:21.350
timer

01:24:22.150 --> 01:24:22.550
啊

01:24:23.250 --> 01:24:25.850
自动切换的技时器

01:24:26.650 --> 01:24:28.010
啊自动切换的技时器

01:24:28.550 --> 01:24:29.650
什么时候自动切换呢

01:24:29.650 --> 01:24:31.250
一开始就要自动切换

01:24:31.250 --> 01:24:31.650
对吧

01:24:31.750 --> 01:24:33.150
所以说我们在component

01:24:33.650 --> 01:24:35.350
component地的mount里边

01:24:35.650 --> 01:24:37.750
就开始一开始要进行自动切换

01:24:38.250 --> 01:24:38.550
啊

01:24:39.250 --> 01:24:41.550
好然后set interval

01:24:44.610 --> 01:24:45.510
每个多少时间呢

01:24:45.510 --> 01:24:47.310
比方说自动切换的时间在这

01:24:47.310 --> 01:24:47.810
对吧

01:24:48.110 --> 01:24:49.110
我们在属性里边

01:24:49.210 --> 01:24:50.110
把属性传过来

01:24:50.510 --> 01:24:51.010
props

01:24:51.410 --> 01:24:52.510
out to duration

01:24:53.110 --> 01:24:56.210
好每隔一段时间完成一次自动切换

01:24:56.910 --> 01:24:58.410
好每一次动切换干嘛呢

01:24:58.410 --> 01:24:59.510
怎么叫自动切换

01:25:00.210 --> 01:25:01.210
什么叫自动切换

01:25:01.510 --> 01:25:03.010
啊我们这里可以专门来写个函数

01:25:03.010 --> 01:25:04.010
晚上自动切换吧

01:25:04.010 --> 01:25:04.710
比方说啊

01:25:04.810 --> 01:25:05.910
我们来写个函数啊

01:25:06.010 --> 01:25:06.810
out to

01:25:07.210 --> 01:25:07.710
啊

01:25:08.510 --> 01:25:10.010
out to switch

01:25:10.810 --> 01:25:11.710
out to switch

01:25:11.910 --> 01:25:12.710
写这么一个函数

01:25:12.810 --> 01:25:13.610
好那么这里面呢

01:25:13.610 --> 01:25:15.210
我就直接调问这个函数就得了

01:25:15.310 --> 01:25:16.410
啊直接调问这个函数

01:25:16.410 --> 01:25:16.910
this

01:25:18.510 --> 01:25:19.210
在这里

01:25:19.910 --> 01:25:21.910
this out to switch switch

01:25:22.710 --> 01:25:23.110
啊

01:25:23.710 --> 01:25:24.510
自动切换

01:25:25.110 --> 01:25:28.310
嗯每一次自动切换干嘛呢

01:25:29.710 --> 01:25:31.510
每一次自动切换的话

01:25:31.510 --> 01:25:33.610
我们刚才刚才这里写吧

01:25:33.810 --> 01:25:34.910
我们全部写到这啊

01:25:34.910 --> 01:25:35.610
全部写到这

01:25:35.910 --> 01:25:36.810
为什么全部写到这呢

01:25:36.810 --> 01:25:37.710
因为我发现了

01:25:37.710 --> 01:25:38.210
一会呢

01:25:38.210 --> 01:25:41.510
我们可能还有个地方也要启动自动切换啊

01:25:41.510 --> 01:25:42.610
也要启动自动切换

01:25:42.910 --> 01:25:45.610
嗯为了避免重复的调用这个函数

01:25:45.610 --> 01:25:47.410
导致了开启的多个计时器

01:25:47.410 --> 01:25:47.710
所以说呢

01:25:47.710 --> 01:25:48.810
我们自动切换这里呢

01:25:48.910 --> 01:25:50.710
先把之前的计时器清空

01:25:50.810 --> 01:25:52.610
你只要调用这个函数

01:25:52.710 --> 01:25:54.710
我先把之前的计时器清空

01:25:55.210 --> 01:25:56.910
然后呢再重新收拾计时器

01:25:57.810 --> 01:25:59.810
好每一次自动切换怎么再切换呢

01:25:59.910 --> 01:26:01.310
就是首先呢

01:26:02.310 --> 01:26:04.810
拿到当前的下标对吧

01:26:05.510 --> 01:26:06.110
State里边

01:26:06.110 --> 01:26:07.810
Curr index 拿到这个下标

01:26:08.310 --> 01:26:09.510
拿到下标过后呢

01:26:09.510 --> 01:26:10.810
下标加加对不对

01:26:10.810 --> 01:26:13.910
加1如果发现了下标大于了什么

01:26:14.610 --> 01:26:15.010
啊

01:26:16.010 --> 01:26:17.710
我们或者是这样子设置也行

01:26:18.310 --> 01:26:19.310
啊给这个Curr呢

01:26:19.310 --> 01:26:22.210
重新复制复制为Curr加1

01:26:22.210 --> 01:26:22.910
除以

01:26:23.310 --> 01:26:24.210
多少的余数

01:26:24.610 --> 01:26:26.010
除以这个Z

01:26:26.710 --> 01:26:27.610
把扩起来啊

01:26:28.910 --> 01:26:29.610
加1

01:26:30.310 --> 01:26:31.210
除以Z

01:26:31.610 --> 01:26:32.210
Props

01:26:32.210 --> 01:26:32.810
Img

01:26:32.810 --> 01:26:33.610
SRCS

01:26:33.610 --> 01:26:34.810
Dial Nance 的余数

01:26:35.610 --> 01:26:36.910
啊这样能看到吗

01:26:37.010 --> 01:26:37.710
能不能看懂

01:26:38.910 --> 01:26:40.110
啊当然如果你加加

01:26:40.110 --> 01:26:42.510
然后再判断也是也行啊也行

01:26:42.810 --> 01:26:44.410
这样的解放了更加简洁一点

01:26:44.710 --> 01:26:46.010
比方说他一开始是0

01:26:46.010 --> 01:26:46.910
下标是0

01:26:47.210 --> 01:26:48.810
那么0加1呢

01:26:49.210 --> 01:26:50.110
是不是等于1

01:26:50.110 --> 01:26:51.810
那么比方说一共有5张啊

01:26:51.910 --> 01:26:53.110
那么一开始是0

01:26:53.110 --> 01:26:54.210
0加1等于1

01:26:54.210 --> 01:26:56.510
1除以5的余数是不是还是1

01:26:56.510 --> 01:26:56.910
对吧

01:26:56.910 --> 01:26:57.910
那么就变成1了

01:26:57.910 --> 01:26:58.810
重新复制嘛

01:26:59.210 --> 01:27:00.310
然后之前是1

01:27:00.310 --> 01:27:01.210
1加1等于2

01:27:01.210 --> 01:27:02.910
2除以5的余数是不是

01:27:02.910 --> 01:27:03.610
还是2

01:27:03.610 --> 01:27:04.610
是不是变成2了

01:27:05.210 --> 01:27:05.610
好

01:27:05.610 --> 01:27:07.010
那么如果他是4

01:27:07.110 --> 01:27:08.810
4加1呢是5

01:27:08.910 --> 01:27:11.010
5除以5的余数是不是0

01:27:11.010 --> 01:27:13.010
那么从4是不是变到0了

01:27:13.010 --> 01:27:13.610
对不对啊

01:27:13.610 --> 01:27:15.210
这样子写的更加简洁一点啊

01:27:15.610 --> 01:27:17.110
如果发现不用判断了啊

01:27:17.110 --> 01:27:17.610
不用判断了

01:27:17.610 --> 01:27:19.010
那么就重新Z

01:27:19.810 --> 01:27:20.810
Handle Switch

01:27:21.210 --> 01:27:22.110
Handle Switch

01:27:22.110 --> 01:27:23.210
把新的下标给你

01:27:24.210 --> 01:27:25.310
每隔一段时间

01:27:25.710 --> 01:27:26.610
重新切换下标

01:27:26.610 --> 01:27:27.510
把新的下标给你

01:27:27.510 --> 01:27:28.410
你去完成设置

01:27:29.310 --> 01:27:29.710
好

01:27:29.910 --> 01:27:31.110
当我们一开始的时候呢

01:27:31.110 --> 01:27:32.210
要调用这个东西啊

01:27:32.510 --> 01:27:33.310
要调用这个东西

01:27:33.310 --> 01:27:34.010
来启动

01:27:34.110 --> 01:27:35.010
启动计时器

01:27:35.410 --> 01:27:36.110
好看一下啊

01:27:36.110 --> 01:27:37.810
你看一看是不是自动切换了

01:27:37.810 --> 01:27:38.410
对不对

01:27:39.210 --> 01:27:40.110
哎没问题吧

01:27:40.410 --> 01:27:40.810
好

01:27:40.910 --> 01:27:43.310
然后什么时候要把这个计时器清空呢

01:27:43.310 --> 01:27:44.710
是不是鼠标移入上去的时候

01:27:44.710 --> 01:27:46.410
要把计时器清空

01:27:46.410 --> 01:27:47.410
对不对啊

01:27:47.410 --> 01:27:49.810
鼠标移入的时候清空计时器

01:27:50.310 --> 01:27:50.510
好

01:27:50.510 --> 01:27:52.610
那么我们可以给这个DIV设置一个事件

01:27:52.610 --> 01:27:53.910
DIV里边设置事件

01:27:54.210 --> 01:27:57.110
不是只不是说只能设置什么unclick啊

01:27:57.210 --> 01:27:58.310
这些事件都可以设置啊

01:27:58.310 --> 01:27:59.110
Mouse

01:27:59.710 --> 01:28:00.210
Enter

01:28:00.610 --> 01:28:02.810
当鼠标移入的时候啊

01:28:02.810 --> 01:28:04.410
当鼠标移入的时候

01:28:05.610 --> 01:28:06.210
我干嘛呢

01:28:07.010 --> 01:28:08.310
要清空啊

01:28:08.610 --> 01:28:11.110
就是clear interval

01:28:12.110 --> 01:28:13.510
this timer

01:28:14.410 --> 01:28:16.210
鼠标移入的时候清空计时器

01:28:17.010 --> 01:28:17.410
保存

01:28:18.610 --> 01:28:19.510
好看一下啊

01:28:20.210 --> 01:28:21.010
自动切换

01:28:21.210 --> 01:28:22.410
啊自动切换

01:28:23.610 --> 01:28:24.610
啊鼠标移入

01:28:24.810 --> 01:28:25.410
你看一样

01:28:26.510 --> 01:28:27.410
是不是没切换了

01:28:27.610 --> 01:28:28.910
对不对没切换了啊

01:28:29.310 --> 01:28:29.710
好

01:28:29.710 --> 01:28:33.110
然后鼠标移出的时候是不是要重新切换啊Mouse

01:28:33.710 --> 01:28:34.310
out

01:28:34.710 --> 01:28:36.110
不是 out live

01:28:37.610 --> 01:28:39.710
当鼠标移出的时候是不是要启动

01:28:39.810 --> 01:28:42.610
所以我就这就是为什么我刚才要写这个函数啊

01:28:42.810 --> 01:28:43.710
this 什么

01:28:44.010 --> 01:28:44.710
啊

01:28:45.610 --> 01:28:46.310
out to

01:28:46.510 --> 01:28:47.710
out to switch

01:28:47.810 --> 01:28:48.210
啊

01:28:48.910 --> 01:28:50.110
又开始自动切换了

01:28:50.710 --> 01:28:51.510
保存啊

01:28:52.910 --> 01:28:55.610
切换自动切换啊鼠标移入看着啊

01:28:55.910 --> 01:28:56.710
鼠标移入

01:28:58.010 --> 01:28:58.610
不动了

01:28:59.210 --> 01:29:00.210
然后鼠标移出

01:29:01.510 --> 01:29:02.210
看一下

01:29:02.710 --> 01:29:05.110
所以就开始重新自动切换了对吧

01:29:05.810 --> 01:29:07.310
好还有最后一个点就是

01:29:07.810 --> 01:29:10.010
当我们这个组件销毁的时候

01:29:10.010 --> 01:29:12.610
你不要忘了把这个计时器也要销毁啊

01:29:12.610 --> 01:29:14.510
免得这个计时器呢无休止的运行下去了

01:29:14.510 --> 01:29:15.010
因为

01:29:15.610 --> 01:29:16.610
这个组件一结束

01:29:16.610 --> 01:29:18.810
它就永远不可能鼠标移入了

01:29:18.810 --> 01:29:21.610
那么这个计时器就永远无休止的运行下去了

01:29:21.610 --> 01:29:23.610
所以说呢我们最好是在什么

01:29:23.810 --> 01:29:24.810
component

01:29:25.510 --> 01:29:26.110
will

01:29:27.710 --> 01:29:29.310
will amount

01:29:29.810 --> 01:29:30.510
amount

01:29:30.810 --> 01:29:31.810
在这个时间里边

01:29:32.010 --> 01:29:33.410
把这个计时器清空

01:29:34.210 --> 01:29:35.010
this timer

01:29:36.110 --> 01:29:37.010
好就喜欢了

01:29:37.710 --> 01:29:39.010
这就是这个band的组件

01:29:39.910 --> 01:29:43.010
那么这个组件甭管它牵掏了多少个层次

01:29:43.810 --> 01:29:46.010
我们以后有了这个组件之后

01:29:46.010 --> 01:29:48.210
要使用轮波图

01:29:48.410 --> 01:29:50.010
就会变得非常非常简单

01:29:50.010 --> 01:29:51.310
你看我这里使用轮波图

01:29:51.710 --> 01:29:52.610
你给它一个数组

01:29:52.710 --> 01:29:54.210
给它个第二维形就完事了

01:29:54.210 --> 01:29:55.510
它就会自动引切换了

01:29:56.410 --> 01:29:57.710
如果宽高不满足要求

01:29:57.710 --> 01:29:59.210
ok你自己去设置宽高

01:29:59.510 --> 01:30:00.410
自己去设置

01:30:00.810 --> 01:30:01.510
我不管你

01:30:02.710 --> 01:30:03.510
你要这意思吗

01:30:04.210 --> 01:30:04.910
ok啊

01:30:05.010 --> 01:30:06.410
那么这里就是啊

01:30:06.410 --> 01:30:07.410
轮波图这个组件

01:30:07.410 --> 01:30:08.410
通过练习这个组件呢

01:30:08.410 --> 01:30:10.510
我们不仅练习到了什么ref

01:30:11.210 --> 01:30:12.710
还练习到了之前的

01:30:13.410 --> 01:30:14.410
很多的知识

01:30:15.410 --> 01:30:16.210
好大家下来了

01:30:16.210 --> 01:30:17.210
把这个组件完成

