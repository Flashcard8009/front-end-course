WEBVTT

00:00.880 --> 00:03.880
这节课我们首先来学习无敏铃

00:03.880 --> 00:07.880
它处理的最好的 用起来最舒服的

00:07.880 --> 00:09.880
就是它的路由

00:09.880 --> 00:12.880
它把路由这一块给你做了封装

00:12.880 --> 00:14.880
封装之后咱们用路由

00:14.880 --> 00:19.880
不仅仅是不用去安装那些乱七八糟的这些裤了

00:19.880 --> 00:22.880
而且我们写代码也会写得非常非常的轻松

00:22.880 --> 00:24.880
那么它怎么来做到的呢

00:24.880 --> 00:26.880
它主要是通过两种方式

00:26.880 --> 00:28.880
一种是约定式

00:28.880 --> 00:34.880
一种是配置式 就是无敏对路由的处理

00:34.880 --> 00:37.880
主要通过两种方式

00:37.880 --> 00:41.880
一种是约定式

00:41.880 --> 00:42.880
什么叫约定式呢

00:42.880 --> 00:43.880
我们等一下再说

00:43.880 --> 00:46.880
一种是配置式

00:46.880 --> 00:48.880
什么叫约定式

00:48.880 --> 00:49.880
约定式的话

00:50.880 --> 01:05.880
使用约定好的文件夹和文件来代表页面

01:05.880 --> 01:16.880
无敏会根据开发者书写的页面生成路由配置

01:16.880 --> 01:18.880
也就是说什么意思呢

01:18.880 --> 01:22.880
就是说如果说你使用路由它有两种使用方式

01:22.880 --> 01:24.880
一种是约定式 约定式是最简单的

01:24.880 --> 01:27.880
如果说你使用约定式的话

01:27.880 --> 01:31.880
那么到时候你写的这些页面

01:31.880 --> 01:33.880
它会把它变成配置式

01:33.880 --> 01:36.880
最终起作用的还是配置式

01:36.880 --> 01:39.880
只不过我们平时书写在用无敏的时候

01:39.880 --> 01:41.880
一般情况下用的都是约定式

01:41.880 --> 01:44.880
因为约定式用起来真的是太舒服了

01:44.880 --> 01:47.880
但是它最终起作用的是它的配置

01:47.880 --> 01:50.880
配置式就是我们下节课要讲的

01:50.880 --> 01:54.880
就是直接书写路由配置文件

01:54.880 --> 01:56.880
像路由配置文件

01:56.880 --> 01:58.880
我们之前讲RectRotor的时候

01:58.880 --> 01:59.880
给大家讲过的吧

01:59.880 --> 02:01.880
在常见应用里面给大家讲过

02:01.880 --> 02:04.880
我们可以自己写些代码

02:04.880 --> 02:05.880
把它变成一种配置式

02:05.880 --> 02:08.880
因为我们以前在学习View的时候

02:08.880 --> 02:10.880
View就是配置式

02:10.880 --> 02:15.880
所以RectRotor本身原生不支持配置

02:15.880 --> 02:19.880
我们可以自己去书写配置

02:19.880 --> 02:22.880
这种做法在无敏里面得到体现

02:22.880 --> 02:24.880
它最终会把它转换成配置

02:24.880 --> 02:25.880
我们下节课再说配置

02:25.880 --> 02:29.880
我们这节课先来看它约定式如何来使用

02:29.880 --> 02:31.880
因为路由这里面涉及到的问题非常多

02:31.880 --> 02:34.880
所以说这节课的时间可能会稍微长一点

02:34.880 --> 02:37.880
如果不行的话把它分成两节课来讲

02:38.880 --> 02:41.880
那么我们这里课学习的是约定式路由

02:41.880 --> 02:43.880
那么看一下怎么来约定

02:44.880 --> 02:55.880
就是无敏约定工程中的配级式文件夹

02:55.880 --> 02:58.880
中存放的是页面

02:58.880 --> 03:00.880
所以说你在配级式文件夹里面

03:00.880 --> 03:01.880
写的那些介石

03:01.880 --> 03:02.880
写的那些组件

03:02.880 --> 03:04.880
那么其实就是页面

03:04.880 --> 03:10.880
如果工程包含src目录

03:10.880 --> 03:11.880
如果说你工程里面

03:11.880 --> 03:13.880
是有src目录的

03:13.880 --> 03:18.880
则src配级式页面文件夹

03:19.880 --> 03:21.880
其实我们之前在用Recton2的时候

03:21.880 --> 03:22.880
你看看这里

03:24.880 --> 03:25.880
这个分子没有记录

03:25.880 --> 03:28.880
其实我们在当时在用src目录的时候

03:28.880 --> 03:30.880
是不是也会在这里建一个配级式文件夹

03:30.880 --> 03:31.880
对吧 也是这么个意思

03:31.880 --> 03:33.880
所以说我们通常

03:33.880 --> 03:34.880
按照习惯上

03:34.880 --> 03:36.880
一般会去建一个src

03:36.880 --> 03:38.880
然后在这里边去建一个文件夹

03:38.880 --> 03:40.880
当然不建src也可以

03:40.880 --> 03:41.880
配级式

03:41.880 --> 03:43.880
注意名字不要写错了

03:43.880 --> 03:44.880
写错了它就找不到了

03:44.880 --> 03:46.880
因为它有约定的

03:46.880 --> 03:48.880
那么它使用配级式文件夹

03:48.880 --> 03:50.880
那么来表示这里面是有页面

03:50.880 --> 03:53.880
页面里边路由设计到的

03:53.880 --> 03:55.880
第一个问题就是

03:55.880 --> 03:56.880
你访问一个地址

03:56.880 --> 03:58.880
它会匹配到一个组件

03:58.880 --> 04:00.880
它会去渲染一个组件

04:00.880 --> 04:03.880
那么我们以前是用肉车组件

04:03.880 --> 04:04.880
来做了这件事情

04:04.880 --> 04:05.880
现在不需要了

04:05.880 --> 04:07.880
现在你根本就不需要肉车组件了

04:07.880 --> 04:09.880
你直接写就完事了

04:09.880 --> 04:11.880
因为它是有这么一个约定

04:11.880 --> 04:13.880
这是第一个约定

04:13.880 --> 04:15.880
它有很多很多的约定

04:15.880 --> 04:17.880
5米约定

04:17.880 --> 04:21.880
就是页面的文件名

04:21.880 --> 04:24.880
文件名

04:24.880 --> 04:28.880
以及页面的文件路径

04:28.880 --> 04:34.880
是该页面匹配的路由

04:34.880 --> 04:35.880
比方说什么意思呢

04:35.880 --> 04:36.880
就是在这里

04:36.880 --> 04:38.880
如果说你建立一个

04:38.880 --> 04:40.880
a.js

04:40.880 --> 04:42.880
比方说你建立一个a.js

04:42.880 --> 04:44.880
然后我们这里

04:44.880 --> 04:46.880
这里写上一个

04:46.880 --> 04:48.880
页面

04:48.880 --> 04:53.450
然后在这里建个b.js

04:53.450 --> 04:54.450
这里写上一个页面b

04:54.450 --> 04:56.450
我们来启动一下看一下

05:02.650 --> 05:03.650
你会发现

05:03.650 --> 05:05.650
当我们访问页面a的时候

05:05.650 --> 05:07.650
怎么访问是不是一个鞋杠a

05:07.650 --> 05:08.650
就可以访问了

05:08.650 --> 05:09.650
这个文件的路径

05:09.650 --> 05:11.650
相对于配极式文件夹

05:11.650 --> 05:12.650
相对于配极式文件夹

05:12.650 --> 05:14.650
是不是就是一个鞋杠a

05:14.650 --> 05:15.650
对不对

05:15.650 --> 05:17.650
配极式文件夹跟目录下面的a

05:17.650 --> 05:18.650
那么它访问的页面地址

05:18.650 --> 05:19.650
就是鞋杠a

05:19.650 --> 05:21.650
就这么简单

05:21.650 --> 05:23.650
再运行出来

05:23.650 --> 05:24.650
好 运行出来了

05:24.650 --> 05:26.650
首页没有

05:26.650 --> 05:27.650
它说

05:27.650 --> 05:29.650
我们的路由有哪些呢

05:29.650 --> 05:32.650
这个页面是无名自动给你生存的

05:32.650 --> 05:34.650
我们的页面有哪些呢

05:34.650 --> 05:35.650
有鞋杠a

05:35.650 --> 05:36.650
你看页面a

05:36.650 --> 05:37.650
对不对

05:37.650 --> 05:38.650
页面b

05:38.650 --> 05:39.650
页面b

05:39.650 --> 05:42.650
好 如果说它里边有纸文件夹呢

05:42.650 --> 05:44.650
如果有纸文件夹了

05:44.650 --> 05:45.650
比方说

05:45.650 --> 05:46.650
这里面有一个sub

05:46.650 --> 05:48.650
这里面有一个纸文件夹

05:48.650 --> 05:49.650
你看每一次

05:49.650 --> 05:50.650
我们对文件结构做出改变

05:50.650 --> 05:52.650
它都会进行重新变异

05:52.650 --> 05:54.650
然后我们写新件

05:54.650 --> 05:56.650
新件一个a.js

05:56.650 --> 05:59.650
就是rfc

05:59.650 --> 06:01.650
这里写个

06:01.650 --> 06:05.650
这个页面是suba

06:05.650 --> 06:06.650
复制一个

06:07.650 --> 06:09.650
这里没保存

06:09.650 --> 06:11.650
复制 粘贴过来

06:11.650 --> 06:12.650
这里是b

06:12.650 --> 06:19.510
这里是subb

06:19.510 --> 06:20.510
好

06:20.510 --> 06:21.510
再看一下

06:21.510 --> 06:22.510
那么现在我们的路由里边

06:22.510 --> 06:24.510
如果说我访问那个

06:24.510 --> 06:25.510
要访问这个

06:25.510 --> 06:27.510
要访问这个就是页面的话

06:27.510 --> 06:28.510
我们要访问这个页面的话

06:28.510 --> 06:29.510
那么是怎么访问

06:29.510 --> 06:31.510
那就是suba

06:31.510 --> 06:32.510
你看

06:32.510 --> 06:33.510
对吧

06:33.510 --> 06:34.510
然后呢

06:34.510 --> 06:35.510
这里subb

06:35.510 --> 06:36.510
你看

06:36.510 --> 06:37.510
是不是可以访问到了

06:37.510 --> 06:38.510
对吧 非常非常简单

06:38.510 --> 06:40.510
这就是无米对路由做的约定

06:40.510 --> 06:41.510
那么这样

06:41.510 --> 06:42.510
这些约定

06:42.510 --> 06:44.510
就是我们按照约定去写的话

06:44.510 --> 06:45.510
它最终会生成一个什么

06:45.510 --> 06:46.510
在这里边

06:46.510 --> 06:48.510
会编译成一个路由配置

06:48.510 --> 06:49.510
你看这rotr

06:49.510 --> 06:51.510
我们下期可以再详细的讲配置

06:51.510 --> 06:53.510
它会最终起作用的是这些配置

06:53.510 --> 06:55.510
最终起作用的是这些配置

06:55.510 --> 06:56.510
看没

06:57.510 --> 06:59.510
它最终会形成这么一种配置

06:59.510 --> 07:00.510
好吧

07:00.510 --> 07:01.510
这是这一块

07:01.510 --> 07:02.510
好 那么我们看一下

07:02.510 --> 07:04.510
它这里边还有哪些约定

07:04.510 --> 07:05.510
我们现在还有一个问题

07:05.510 --> 07:06.510
就是首页怎么办

07:06.510 --> 07:07.510
比方说

07:07.510 --> 07:09.510
我们如果说直接访问sub

07:09.510 --> 07:10.510
有页面吗

07:10.510 --> 07:11.510
没有页面 看没有

07:11.510 --> 07:13.510
它说404找不到页面

07:13.510 --> 07:14.510
对吧 这是它的

07:14.510 --> 07:16.510
无米给我们做了一个404的页面地址

07:16.510 --> 07:17.510
找不到页面

07:17.510 --> 07:19.510
好 那如果说我要配置首页的话

07:19.510 --> 07:20.510
怎么办

07:20.510 --> 07:21.510
好 无米决定

07:21.510 --> 07:26.510
如果页面的文件名是index

07:26.510 --> 07:30.510
则可以省略文件名

07:30.510 --> 07:31.510
那么什么意思

07:31.510 --> 07:32.510
就是首页的意思

07:32.510 --> 07:33.510
就是首页的意思

07:33.510 --> 07:35.510
好 比方说

07:35.510 --> 07:37.510
我们这里配置室里边

07:37.510 --> 07:40.510
再加一个index

07:40.510 --> 07:41.510
第二ges

07:41.510 --> 07:43.510
好 我们rfc

07:43.510 --> 07:45.510
这里就是给它写上一个首页

07:45.510 --> 07:47.510
保存 我们来看一下

07:47.510 --> 07:48.510
来看一下

07:48.510 --> 07:49.510
那么现在我们

07:49.510 --> 07:50.510
你看你是不是多了一个路由了

07:50.510 --> 07:52.510
对吧 这个地址就是首页

07:52.510 --> 07:54.510
直接访问根木路就是首页

07:54.510 --> 07:56.510
如果你现在再去访问一个index

07:56.510 --> 07:57.510
能不能访问了

07:57.510 --> 07:58.510
它反而不能访问了

07:58.510 --> 07:59.510
反而不能访问了

07:59.510 --> 08:00.510
那么这个index

08:00.510 --> 08:01.510
就是首页的意思

08:01.510 --> 08:03.510
因为你可以把它省略掉

08:03.510 --> 08:05.510
看没 就是首页

08:05.510 --> 08:06.510
好 如果说你在sub里边

08:06.510 --> 08:08.510
再建一个index

08:08.510 --> 08:10.510
第二ges

08:10.510 --> 08:12.510
再建这么一个东西

08:12.510 --> 08:14.510
rfc

08:14.510 --> 08:17.510
这里是sub index

08:17.510 --> 08:18.510
好

08:18.510 --> 08:20.510
这是sub的首页

08:20.510 --> 08:22.510
比方说这是一个拥护管理

08:22.510 --> 08:23.510
对吧 拥护管理

08:23.510 --> 08:25.510
它也有自己的首页

08:25.510 --> 08:26.510
那么这是

08:26.510 --> 08:28.510
子页面组的首页

08:28.510 --> 08:30.510
这里我们访问sub

08:30.510 --> 08:31.510
你看 不用跟后边后维

08:31.510 --> 08:33.510
那么它就是sub的首页

08:33.510 --> 08:35.510
对吧 是不是非常简单

08:35.510 --> 08:36.510
这里就会出现一个矛盾

08:36.510 --> 08:38.510
有些同学可能想得比较细

08:38.510 --> 08:39.510
就在配极式里边

08:39.510 --> 08:41.510
如果我们再建一个sub的ges

08:41.510 --> 08:43.510
会怎么样

08:43.510 --> 08:44.510
rfc

08:44.510 --> 08:45.510
我们这里

08:45.510 --> 08:48.510
hsub.ges

08:48.510 --> 08:49.510
那么这种情况下

08:49.510 --> 08:50.510
会怎么办

08:50.510 --> 08:52.510
比方说我们这里访问sub

08:52.510 --> 08:53.510
是不是还是sub的首页

08:53.510 --> 08:55.510
那这个玩意是不是没起作用

08:55.510 --> 08:56.510
这个玩意是不是没起作用

08:56.510 --> 08:59.510
其实你可以到配置里边去看一下

08:59.510 --> 09:01.510
我们的sub.ges

09:01.510 --> 09:02.510
你看一下

09:02.510 --> 09:04.510
在哪呢

09:05.510 --> 09:06.510
这样子写的过后

09:06.510 --> 09:07.510
你会看到它配置里边

09:07.510 --> 09:09.510
它说访问这个路径的时候

09:09.510 --> 09:11.510
访问这个路径的时候

09:11.510 --> 09:12.510
它读的是哪个组件

09:12.510 --> 09:14.510
什么读的是sub

09:14.510 --> 09:16.510
index.ges这个组件

09:16.510 --> 09:17.510
对吧

09:17.510 --> 09:18.510
然后你去访问这个地址的时候

09:18.510 --> 09:19.510
还是同样的地址

09:19.510 --> 09:21.510
它又要去读这个组件

09:21.510 --> 09:22.510
对不对

09:22.510 --> 09:23.510
它其实它内部使用了一个switch

09:23.510 --> 09:24.510
就是开关

09:24.510 --> 09:25.510
它只匹配一个

09:25.510 --> 09:26.510
匹配到了过后

09:26.510 --> 09:27.510
就不再匹配了

09:27.510 --> 09:29.510
就是它前面的先匹配

09:29.510 --> 09:30.510
前面的先匹配

09:30.510 --> 09:31.510
是不是匹配到了这个玩意

09:31.510 --> 09:32.510
对吧

09:32.510 --> 09:33.510
因此我们平时写的时候

09:33.510 --> 09:35.510
一定要避免这个问题

09:35.510 --> 09:36.510
要避免这个问题

09:36.510 --> 09:37.510
不然的话你这里就写的

09:37.510 --> 09:38.510
就白写了

09:38.510 --> 09:39.510
要避免文件名

09:39.510 --> 09:42.510
和当前目录下的文件夹的名字

09:42.510 --> 09:43.510
重名

09:45.510 --> 09:46.510
注意

09:48.510 --> 09:51.510
注意避免文件名

09:51.510 --> 09:56.510
和当前目录中的文件夹名字

09:56.510 --> 09:58.510
名称相同

09:58.510 --> 10:00.510
这个东西也不太容易出现

10:00.510 --> 10:01.510
不太容易出现

10:01.510 --> 10:02.510
因为我标了

10:02.510 --> 10:03.510
我们这里叫做user

10:03.510 --> 10:05.510
表示跟拥护管理相关的

10:05.510 --> 10:06.510
添加拥护

10:06.510 --> 10:08.510
修改拥护等等

10:08.510 --> 10:10.510
拥护的管理的首页

10:10.510 --> 10:12.510
那么你在这里写

10:12.510 --> 10:13.510
再写个拥护点

10:13.510 --> 10:14.510
是啥意思呢

10:14.510 --> 10:16.510
你应该把这个放到这里边去

10:16.510 --> 10:17.510
对吧

10:17.510 --> 10:18.510
如果是首页的话

10:18.510 --> 10:19.510
就应该是应这个写

10:19.510 --> 10:20.510
一般也不会这样写

10:21.510 --> 10:22.510
好 删除

10:23.510 --> 10:24.510
这是这么两个约定

10:25.510 --> 10:27.510
那么通过这个简单的约定了

10:27.510 --> 10:29.510
你就已经搞定了

10:29.510 --> 10:30.510
搞定了什么呢

10:30.510 --> 10:31.510
就已经搞定了

10:31.510 --> 10:32.510
搞定了就是

10:34.510 --> 10:36.510
就是不同的路径

10:36.510 --> 10:38.510
匹配不同的路由

10:38.510 --> 10:39.510
那么但是有的时候

10:39.510 --> 10:42.510
它会遇到千套的路由

10:42.510 --> 10:43.510
千套的路由是什么意思呢

10:43.510 --> 10:44.510
我给大家画个图

10:45.510 --> 10:46.510
给大家画个图

10:47.510 --> 10:49.510
比方说

10:49.510 --> 10:50.510
我们在这里

10:55.340 --> 10:57.340
比方说我们一个后台管理系统

10:57.340 --> 10:58.340
后台管理系统

10:58.340 --> 11:00.340
它可能会

11:00.340 --> 11:02.340
我们也不说后台管理系统

11:03.340 --> 11:04.340
也不是很像的

11:04.340 --> 11:05.340
我们比方说

11:05.340 --> 11:07.340
这里有一个

11:07.340 --> 11:09.340
我们的整个网站里边

11:09.340 --> 11:11.340
有一个标题栏

11:11.340 --> 11:12.340
标题栏

11:12.340 --> 11:14.340
这个标题栏

11:14.340 --> 11:16.340
每个页面都是一样的

11:17.340 --> 11:20.780
我们有一个标题栏

11:20.780 --> 11:21.780
这里

11:21.780 --> 11:22.780
标题

11:22.780 --> 11:24.780
就导航栏

11:24.780 --> 11:25.780
导航栏

11:25.780 --> 11:26.780
导航菜单

11:26.780 --> 11:28.780
每个页面的导航菜单都是一样的

11:28.780 --> 11:29.780
这是公共

11:29.780 --> 11:31.780
就是所有页面通用

11:32.780 --> 11:33.780
所有

11:34.780 --> 11:36.780
所有页面通用

11:37.780 --> 11:38.780
所有页面通用

11:38.780 --> 11:40.780
那么这种情况下怎么办呢

11:40.780 --> 11:42.780
我们怎么来实现这么一个

11:42.780 --> 11:43.780
这么一个效果了

11:43.780 --> 11:44.780
如果说按以前的做法

11:44.780 --> 11:45.780
对吧

11:45.780 --> 11:47.780
我们是不是要写上这么一个组件

11:47.780 --> 11:48.780
对不对

11:48.780 --> 11:49.780
写上这么一个页面组件

11:49.780 --> 11:50.780
这个页面组件

11:50.780 --> 11:51.780
它里边包含一个菜单

11:51.780 --> 11:53.780
然后下边是不是再要继续

11:53.780 --> 11:54.780
继续进行路由匹配

11:54.780 --> 11:55.780
对吧

11:55.780 --> 11:56.780
继续进行路由匹配

11:56.780 --> 11:57.780
在无名里边

11:57.780 --> 11:58.780
要做法就是

11:58.780 --> 12:00.780
下面是页面其他部分

12:01.780 --> 12:02.780
这是页面的

12:02.780 --> 12:03.780
其他页面的内容

12:05.780 --> 12:07.780
其他页面可

12:07.780 --> 12:09.780
变化的内容

12:11.780 --> 12:12.780
那么下边呢

12:12.780 --> 12:13.780
可能还有一个页角

12:13.780 --> 12:14.780
也是所有页面通用的

12:16.780 --> 12:17.780
下面是页角

12:22.330 --> 12:23.330
也是所有页面通用的

12:23.330 --> 12:24.330
那么如果面对这种

12:24.330 --> 12:26.330
所有页面的通用的东西

12:26.330 --> 12:27.330
我们怎么办呢

12:27.330 --> 12:28.330
我们可以使用

12:29.330 --> 12:30.330
另外一种决定

12:32.330 --> 12:33.330
无米决定

12:34.330 --> 12:36.330
如果src目录下面

12:36.330 --> 12:37.330
当然如果你没有src的话

12:37.330 --> 12:38.330
你直接写也可以

12:38.330 --> 12:41.330
我们这里都有按照src说吧

12:41.330 --> 12:42.330
只是不要告诉大家

12:42.330 --> 12:44.330
这个src是可以没有的

12:44.330 --> 12:46.330
如果src

12:46.330 --> 12:48.330
layout目录存在

12:49.330 --> 12:53.330
则该目录中的index.js

12:53.330 --> 12:54.330
你只能写一个

12:54.330 --> 12:56.330
只能写index.js

12:56.330 --> 12:59.330
那么这个index.js

12:59.330 --> 13:01.330
表示的是

13:01.330 --> 13:05.330
是全局的布局

13:05.330 --> 13:07.330
全局的通用布局

13:08.330 --> 13:10.330
布局中的

13:11.330 --> 13:12.330
确准

13:13.330 --> 13:15.330
则会添加

13:15.330 --> 13:17.330
具体的页面

13:17.330 --> 13:19.330
则会添加具体的页面

13:19.330 --> 13:20.330
那么这就形成了一个

13:20.330 --> 13:21.330
千条路由了

13:21.330 --> 13:22.330
咱们来看一下

13:22.330 --> 13:24.330
我们把配置则列起来

13:24.330 --> 13:25.330
在src里面

13:25.330 --> 13:26.330
新鲜的文件夹

13:26.330 --> 13:27.330
叫做layout

13:27.330 --> 13:28.330
layout是什么意思

13:29.330 --> 13:30.330
layout里面

13:30.330 --> 13:31.330
新鲜的文件

13:31.330 --> 13:33.330
index.js

13:33.330 --> 13:34.330
建成了一个文件

13:34.330 --> 13:35.330
这个文件

13:35.330 --> 13:37.330
我们导出一个

13:37.330 --> 13:39.330
我们淘个div

13:39.330 --> 13:40.330
里面表示

13:40.330 --> 13:43.330
这是导航菜单

13:43.330 --> 13:45.330
导航菜单

13:46.330 --> 13:48.330
然后下边再放一个

13:48.330 --> 13:50.330
这是叶脚

13:50.330 --> 13:52.330
叶脚

13:53.330 --> 13:54.330
那么这里

13:54.330 --> 13:55.330
我们放两个

13:55.330 --> 13:56.330
一个是导航菜单

13:56.330 --> 13:57.330
一个叶脚

13:57.330 --> 13:58.330
叶面出现在中间部分

13:58.330 --> 14:00.330
因为这两个都是完全一样的

14:00.330 --> 14:01.330
叶面出现在中间部分

14:01.330 --> 14:03.330
那么中间部分怎么写呢

14:03.330 --> 14:04.330
中间部分直接使用俱准

14:04.330 --> 14:06.330
它会给你传一个俱准进来

14:06.330 --> 14:08.330
就是会把叶面作为属性

14:08.330 --> 14:09.330
给你传进来

14:09.330 --> 14:10.330
所以说你这里

14:10.330 --> 14:12.330
直接写俱准就行了

14:12.330 --> 14:13.330
俱准

14:13.330 --> 14:14.330
就完了

14:14.330 --> 14:15.330
保存你看一下

14:15.330 --> 14:16.330
特别特别简单

14:17.330 --> 14:18.330
什么

14:24.330 --> 14:25.330
我这里

14:25.330 --> 14:27.330
刚才把这个sup3

14:27.330 --> 14:28.330
把这个sup3

14:28.330 --> 14:30.330
它还没有就是

14:30.330 --> 14:32.330
没有重新保存进来

14:32.330 --> 14:34.330
我们这里随便加个

14:34.330 --> 14:35.330
重新保存一次

14:37.330 --> 14:38.330
重新编译

14:38.330 --> 14:39.330
就完事了

14:39.330 --> 14:40.330
那么现在你看

14:40.330 --> 14:41.330
每个叶面

14:41.330 --> 14:42.330
是不是都有一个导航菜单

14:42.330 --> 14:43.330
叶脚

14:43.330 --> 14:44.330
那我们的叶面

14:44.330 --> 14:45.330
是不是放到中间的一部分

14:45.330 --> 14:47.330
我们看一下元素结构

14:47.330 --> 14:48.330
你看

14:48.330 --> 14:49.330
我们的叶面

14:49.330 --> 14:50.330
是不是放到中间这一部分

14:50.330 --> 14:51.330
这是我们的叶面

14:51.330 --> 14:52.330
这是通用的地方

14:52.330 --> 14:53.330
对不对

14:53.330 --> 14:54.330
就形成这么一种结构了

14:54.330 --> 14:56.330
所有的叶面都是如此

14:56.330 --> 14:57.330
你看一下

14:57.330 --> 14:58.330
所有的叶面都是

14:58.330 --> 14:59.330
首叶

15:00.330 --> 15:01.330
A叶面

15:01.330 --> 15:02.330
对不对

15:02.330 --> 15:03.330
是不是都是如此

15:03.330 --> 15:04.330
好

15:04.330 --> 15:06.330
那如果说你还要进行嵌套了

15:06.330 --> 15:07.330
比方说

15:07.330 --> 15:09.330
我们的sup

15:09.330 --> 15:10.330
sup这个叶面

15:10.330 --> 15:12.330
sup在这里

15:12.330 --> 15:14.330
这里边还要进行嵌套

15:14.330 --> 15:15.330
那么这些叶面

15:15.330 --> 15:17.330
他们又有共同的东西

15:17.330 --> 15:18.330
这是这些共同的东西

15:18.330 --> 15:20.330
只存在于这个紫叶面

15:20.330 --> 15:21.330
是什么意思呢

15:21.330 --> 15:22.330
就是说

15:23.330 --> 15:24.330
如果说

15:25.330 --> 15:27.330
我们sup里边

15:27.330 --> 15:28.330
又有这么一个东西

15:28.330 --> 15:32.150
sup的紫菜单

15:33.150 --> 15:35.150
这里也有一个紫菜单

15:36.150 --> 15:38.150
那么这个紫菜单是

15:38.150 --> 15:39.150
只有

15:40.150 --> 15:42.150
sup下面的

15:43.150 --> 15:44.150
叶面

15:44.150 --> 15:45.150
通用

15:45.150 --> 15:46.150
就这一部分是

15:46.150 --> 15:47.150
sup下面的

15:47.150 --> 15:48.150
叶面通用的

15:48.150 --> 15:49.150
那么这个该怎么处理呢

15:49.150 --> 15:50.150
你是不是就不能写

15:50.150 --> 15:51.150
全局的通用了

15:51.150 --> 15:52.150
对吧

15:52.150 --> 15:53.150
我们如果写到layout里边

15:53.150 --> 15:54.150
还约定好了

15:54.150 --> 15:55.150
这个layout五年甲下面的

15:55.150 --> 15:56.150
index的解释

15:56.150 --> 15:58.150
就是全局通用的

15:58.150 --> 15:59.150
布局

15:59.150 --> 16:01.150
那如果说你局部通用了

16:01.150 --> 16:02.150
怎么办呢

16:02.150 --> 16:03.150
局部还要通用了

16:03.150 --> 16:04.150
好

16:04.150 --> 16:05.150
那么5米又有约定

16:05.150 --> 16:06.150
5米约定

16:07.150 --> 16:08.150
如果配级

16:09.150 --> 16:10.150
中的

16:10.150 --> 16:11.150
中

16:11.150 --> 16:12.150
包含什么呢

16:12.150 --> 16:14.150
包含layout

16:14.150 --> 16:15.150
解释

16:15.150 --> 16:17.150
配级是文件甲中

16:18.150 --> 16:20.150
配级是文件甲中

16:20.150 --> 16:22.150
包含layout的解释

16:22.150 --> 16:23.150
则

16:23.150 --> 16:25.150
layout的解释

16:25.150 --> 16:27.150
所在的目录

16:27.150 --> 16:29.150
以及

16:29.150 --> 16:31.150
其

16:31.150 --> 16:34.150
所有的紫目录中的叶面

16:35.150 --> 16:36.150
共用

16:37.150 --> 16:38.150
共用

16:40.150 --> 16:41.150
该布局

16:41.150 --> 16:42.150
说起来好像比较抽象

16:42.150 --> 16:44.150
其实写写特别简单

16:44.150 --> 16:45.150
在sub里边

16:45.150 --> 16:46.150
我们比方说

16:46.150 --> 16:47.150
我们要希望这三个页面

16:47.150 --> 16:48.150
这三个页面

16:48.150 --> 16:49.150
通用一些布局

16:49.150 --> 16:50.150
OK

16:50.150 --> 16:51.150
我们这里新建的文件

16:51.150 --> 16:53.150
该取名为layout

16:53.150 --> 16:55.150
layout的解释

16:55.150 --> 16:56.150
取名为这个

16:56.150 --> 16:57.150
取名为这个之后

16:57.150 --> 16:58.150
我们来看

16:58.150 --> 17:00.150
关闭到右侧

17:00.150 --> 17:01.150
这里我们

17:01.150 --> 17:02.150
RFC

17:02.150 --> 17:03.150
我们这里

17:03.150 --> 17:04.150
就

17:04.150 --> 17:06.150
再输出一个HE

17:06.150 --> 17:08.150
在输出的DIV

17:08.150 --> 17:10.150
HE的话就表示说

17:10.150 --> 17:11.150
这是sub

17:13.150 --> 17:14.150
叶面

17:14.150 --> 17:15.150
的

17:15.150 --> 17:16.150
通用

17:16.150 --> 17:17.150
通用紫彩单

17:17.150 --> 17:19.150
只有sub

17:19.150 --> 17:20.150
这个文件

17:20.150 --> 17:21.150
才能用这个

17:21.150 --> 17:23.150
那么它的叶面放哪呢

17:23.150 --> 17:24.150
具体的叶面放哪呢

17:24.150 --> 17:26.150
也是用切尔遵来表示

17:26.150 --> 17:27.150
你想把它放哪就放哪

17:27.150 --> 17:28.150
比方说我们放到这

17:28.150 --> 17:30.150
也是用切尔遵来表示

17:30.150 --> 17:31.150
一样的

17:31.150 --> 17:34.230
probs

17:34.230 --> 17:35.230
切尔遵

17:35.230 --> 17:37.230
也是用切尔遵来表示

17:37.230 --> 17:38.230
保存

17:38.230 --> 17:39.230
你看一下

17:39.230 --> 17:40.230
这里

17:40.230 --> 17:41.230
叶面A和叶面B

17:41.230 --> 17:42.230
你看叶面A和叶面B

17:42.230 --> 17:43.230
有没有这个东西

17:43.230 --> 17:44.230
是没有

17:44.230 --> 17:45.230
因为它

17:45.230 --> 17:46.230
只存在于这个目录下面

17:46.230 --> 17:47.230
只有你访问这个目录

17:47.230 --> 17:48.230
以这个目录开头

17:48.230 --> 17:50.230
它才会访问到这些东西

17:50.230 --> 17:51.230
你看

17:51.230 --> 17:52.230
是不是没有

17:52.230 --> 17:53.230
对吧

17:53.230 --> 17:54.230
也没有

17:54.230 --> 17:55.230
但是如果说

17:55.230 --> 17:56.230
我们访问sub目录

17:59.230 --> 18:00.230
对呀

18:00.230 --> 18:01.230
这个名字是不是写错了

18:01.230 --> 18:02.230
是不是要加个下滑线

18:02.230 --> 18:04.230
好像是要加个下滑线

18:04.230 --> 18:05.230
对

18:05.230 --> 18:06.230
要加个下滑线

18:06.230 --> 18:08.230
要加个下滑线

18:09.230 --> 18:10.230
这里

18:10.230 --> 18:11.230
重新保存一次

18:11.230 --> 18:12.230
重新变异

18:12.230 --> 18:15.700
等一下

18:15.700 --> 18:16.700
重新保存一次

18:17.700 --> 18:18.700
刷新

18:18.700 --> 18:19.700
好

18:19.700 --> 18:20.700
那么现在可以了

18:20.700 --> 18:22.700
我可能写错了

18:22.700 --> 18:24.700
要加包含这个下滑线

18:24.700 --> 18:25.700
雷奥车

18:27.700 --> 18:28.700
你看一下

18:28.700 --> 18:29.700
是不是可以了

18:29.700 --> 18:30.700
sub只手也可以

18:30.700 --> 18:32.700
那么下面下面的A叶面

18:32.700 --> 18:33.700
是不是也有通用拆单

18:33.700 --> 18:34.700
下面下面的B叶面

18:34.700 --> 18:35.700
是不是也有通用拆单

18:35.700 --> 18:36.700
如果说

18:36.700 --> 18:38.700
sub里边还有sub

18:38.700 --> 18:39.700
还有个sub

18:39.700 --> 18:40.700
那么周里边

18:40.700 --> 18:41.700
比方说

18:41.700 --> 18:42.700
叶面A

18:42.700 --> 18:43.700
2GS

18:44.700 --> 18:45.700
RFC

18:46.700 --> 18:50.260
这是subA

18:51.260 --> 18:52.260
subA

18:54.260 --> 18:55.260
这个叶面

18:55.260 --> 18:56.260
比方说还有这个叶面

18:56.260 --> 18:57.260
那么这个叶面

18:57.260 --> 18:58.260
这个叶面

18:58.260 --> 18:59.260
访问地址是不是这个

18:59.260 --> 19:00.260
这个访问地址

19:00.260 --> 19:01.260
好 咱们来看一下

19:01.260 --> 19:05.620
好 回录

19:05.620 --> 19:06.620
那你看

19:06.620 --> 19:07.620
是不是也可以用

19:07.620 --> 19:09.620
只要你是处于这个目录下面的

19:09.620 --> 19:10.620
所有东西

19:10.620 --> 19:11.620
都会用到这个布局

19:11.620 --> 19:12.620
那如果说

19:12.620 --> 19:13.620
这个文件讲的

19:13.620 --> 19:14.620
又有自己的通用布局

19:14.620 --> 19:15.620
是不是又可以牵套

19:15.620 --> 19:16.620
对不对

19:16.620 --> 19:17.620
那这样的结构

19:17.620 --> 19:19.620
是不是特别清晰

19:19.620 --> 19:20.620
这就是它的

19:20.620 --> 19:21.620
这种约定

19:21.620 --> 19:22.620
关于这个布局的约定

19:22.620 --> 19:23.620
那么这个布局

19:23.620 --> 19:24.620
是不是就很容易搞定了

19:24.620 --> 19:25.620
对吧

19:26.620 --> 19:27.620
这是

19:27.620 --> 19:29.620
无米的这么一个约定

19:30.620 --> 19:31.620
继续

19:33.620 --> 19:34.620
现在我们搞定了

19:34.620 --> 19:36.620
千套的路由

19:36.620 --> 19:37.620
搞定了千套的路由

19:37.620 --> 19:39.620
然后我们来看一下

19:39.620 --> 19:40.620
这个东西

19:41.620 --> 19:42.620
就是

19:42.620 --> 19:44.620
关于404的约定

19:44.620 --> 19:45.620
约定

19:47.620 --> 19:50.620
无米约定

19:51.620 --> 19:54.620
佩吉斯目录中的

19:54.620 --> 19:55.620
佩吉斯目录

19:55.620 --> 19:56.620
就这个约定

19:57.620 --> 19:58.620
佩吉斯

19:58.620 --> 20:00.620
404.js

20:01.620 --> 20:02.620
表示

20:03.620 --> 20:04.620
404约定

20:04.620 --> 20:06.620
就是找不到的约定

20:06.620 --> 20:09.620
如果路由匹配

20:09.620 --> 20:10.620
就是无匹配

20:11.620 --> 20:13.620
则会渲染

20:13.620 --> 20:14.620
改约定

20:14.620 --> 20:15.620
改页面

20:15.620 --> 20:16.620
就这么简单

20:16.620 --> 20:17.620
但是这个页面

20:17.620 --> 20:19.620
我们要看效果的话

20:19.620 --> 20:20.620
只能在部署之后

20:20.620 --> 20:21.620
才能看到效果

20:21.620 --> 20:23.620
比方说404.js

20:23.620 --> 20:25.620
我们这里写上一个RFC

20:25.620 --> 20:27.620
这是一个404页面

20:28.620 --> 20:29.620
当然

20:29.620 --> 20:31.620
这就不能这样子写了

20:31.620 --> 20:32.620
保存

20:34.620 --> 20:35.620
什么玩意

20:40.620 --> 20:42.620
模块

20:42.620 --> 20:43.620
必有的失败

20:45.620 --> 20:49.020
什么

20:49.020 --> 20:55.150
Inspective token

20:55.150 --> 20:56.150
看一下

20:56.150 --> 20:57.150
怎么回事

20:58.150 --> 20:59.150
刷新的

21:00.150 --> 21:02.150
刚才抱什么错

21:02.150 --> 21:04.150
没有问题

21:05.150 --> 21:06.150
然后我们现在

21:06.150 --> 21:07.150
如果说我们访问

21:07.150 --> 21:08.150
一个不存在的地址

21:08.150 --> 21:09.150
看一下

21:10.150 --> 21:11.150
那么现在

21:11.150 --> 21:12.150
它为什么没有显示

21:12.150 --> 21:14.150
我们的404呢

21:14.150 --> 21:15.150
为什么没有显示

21:15.150 --> 21:16.150
我们的404呢

21:16.150 --> 21:17.150
是因为

21:18.150 --> 21:20.150
默认情况下是这样子

21:20.150 --> 21:22.150
默认情况下

21:22.150 --> 21:25.150
40就是在开发模式下边

21:25.150 --> 21:27.150
它不会显示我们的404页面

21:27.150 --> 21:29.150
只有在部署之后

21:29.150 --> 21:30.150
它才会起作用

21:30.150 --> 21:31.150
因为开发模式

21:31.150 --> 21:32.150
它为了方便你调

21:32.150 --> 21:34.150
你当你访问了一个地址之后

21:34.150 --> 21:35.150
它要告诉你

21:35.150 --> 21:36.150
它访问不到

21:36.150 --> 21:37.150
它要告诉你

21:37.150 --> 21:38.150
为什么访问不到

21:38.150 --> 21:39.150
比方说它这里

21:41.150 --> 21:42.150
目录下面这个文件

21:42.150 --> 21:43.150
是没有的

21:43.150 --> 21:44.150
是没有的

21:44.150 --> 21:45.150
是这么个意思

21:45.150 --> 21:46.150
然后告诉你

21:46.150 --> 21:47.150
我们的路由是哪些

21:47.150 --> 21:48.150
有哪些路由

21:48.150 --> 21:49.150
所以说默认情况下

21:49.150 --> 21:50.150
你是访问

21:50.150 --> 21:51.150
就是你

21:51.150 --> 21:53.150
这个404是不起作用的

21:53.150 --> 21:54.150
但是你以后

21:54.150 --> 21:55.150
一旦billed之后

21:55.150 --> 21:57.150
把它编译了之后

21:57.150 --> 21:58.150
把它部署了之后

21:58.150 --> 21:59.150
它就会起作用

21:59.150 --> 22:01.150
在开发模式下面

22:01.150 --> 22:02.150
不起作用

22:02.150 --> 22:03.150
这个它官方文章里边

22:03.150 --> 22:04.150
也特别说明了

22:04.150 --> 22:08.150
该约定在开发模式中

22:08.150 --> 22:09.150
无效

22:09.150 --> 22:11.150
只有部署后无效

22:11.150 --> 22:12.150
才生效

22:12.150 --> 22:14.150
只有部署后

22:15.150 --> 22:17.150
部署后生效

22:17.150 --> 22:18.150
那这个东西

22:18.150 --> 22:19.150
其实你就不用管了

22:19.150 --> 22:20.150
你只要写个404

22:20.150 --> 22:21.150
那么如果说

22:21.150 --> 22:22.150
你要看效果的话

22:22.150 --> 22:23.150
你就直接去访问

22:23.150 --> 22:24.150
这个404

22:24.150 --> 22:25.150
你直接去访问

22:25.150 --> 22:26.150
这个404就完事了

22:26.150 --> 22:27.150
对吧

22:27.150 --> 22:28.150
你要看这个页面效果

22:28.150 --> 22:29.150
直接去访问它就完事了

22:29.150 --> 22:31.150
开发模式里边是无效的

22:31.150 --> 22:33.150
这个来说明一下

22:33.150 --> 22:36.150
都是关于这个404的约定

22:36.150 --> 22:38.150
我们这里前面记一笔

22:38.150 --> 22:40.150
这里是

22:40.150 --> 22:41.150
那么现在至此

22:41.150 --> 22:43.150
我们就把那个路由

22:43.150 --> 22:45.150
匹配这一块就全部搞定了

22:45.150 --> 22:46.150
路由匹配

22:46.150 --> 22:48.150
这一块全部搞定了

22:48.150 --> 22:50.150
然后其实还有一点点

22:50.150 --> 22:51.150
还有一小部分知识

22:51.150 --> 22:52.150
我们一会再说

22:52.150 --> 22:53.150
我们现在还没遇到

22:53.150 --> 22:55.150
然后再说另外一个

22:55.150 --> 23:00.150
就是关于路由跳转

23:00.150 --> 23:01.150
路由跳转

23:01.150 --> 23:03.150
我们如何去跳转一个路由

23:03.150 --> 23:04.150
比方说我们要使用一个

23:04.150 --> 23:05.150
超链接来跳转

23:05.150 --> 23:06.150
怎么来跳转

23:06.150 --> 23:07.150
我们以前是用在Rotor

23:07.150 --> 23:09.150
就是RatRotor里边的NavLink

23:09.150 --> 23:10.150
或者是link

23:10.150 --> 23:11.150
对吧

23:11.150 --> 23:12.150
那么现在

23:12.150 --> 23:15.150
无米里边它实际上它给你用的

23:15.150 --> 23:16.150
你看无米的API里边

23:16.150 --> 23:17.150
它可以用了

23:17.150 --> 23:19.150
它可以导出了这么一个无米Link

23:19.150 --> 23:20.150
无米Link

23:20.150 --> 23:22.150
那么这里我们直接使用无米Link

23:22.150 --> 23:23.150
就可以只实现跳转了

23:23.150 --> 23:24.150
特别简单

23:24.150 --> 23:26.150
这里我们比方说

23:26.150 --> 23:28.150
在Layout里边

23:28.150 --> 23:29.150
在这里

23:29.150 --> 23:30.150
布局这里

23:30.150 --> 23:31.150
在这里的边

23:31.150 --> 23:33.150
我们使用导入

23:33.150 --> 23:36.150
link from

23:36.150 --> 23:38.150
无米写钢

23:38.150 --> 23:40.150
link导入这个

23:40.150 --> 23:41.150
那么我们这里

23:41.150 --> 23:42.150
要跳转的话

23:42.150 --> 23:43.150
导航探单这里要跳转

23:43.150 --> 23:45.150
我们这里就可以写些A元数

23:45.150 --> 23:48.150
写些A元数

23:48.150 --> 23:49.150
不是A元数

23:49.150 --> 23:50.150
link元数

23:50.150 --> 23:51.150
比方说我们跳转到哪呢

23:51.150 --> 23:52.150
用to

23:52.150 --> 23:53.150
这个to的用法

23:53.150 --> 23:55.150
跟我们之前学的NavLink

23:55.150 --> 23:57.150
是完全一样的

23:57.150 --> 23:58.150
完全一样的

23:58.150 --> 24:00.150
这里的首页

24:00.150 --> 24:01.150
跳转到什么

24:01.150 --> 24:02.150
sub页

24:06.150 --> 24:07.150
前面

24:08.150 --> 24:09.150
我看一下

24:09.150 --> 24:15.150
这里是跳转到A

24:16.150 --> 24:18.150
这是跳转到B

24:19.150 --> 24:20.150
这是A

24:20.150 --> 24:21.150
这是B

24:21.150 --> 24:22.150
保存

24:22.150 --> 24:23.150
保存

24:23.150 --> 24:24.150
看一下

24:24.150 --> 24:25.150
那么现在说的

24:25.150 --> 24:26.150
首页

24:26.150 --> 24:27.150
A页

24:27.150 --> 24:28.150
B页

24:28.150 --> 24:29.150
sub页

24:29.150 --> 24:30.150
这都可以跳转了

24:30.150 --> 24:31.150
就是个link

24:31.150 --> 24:32.150
特别简单

24:32.150 --> 24:33.150
而且我们看一下

24:33.150 --> 24:34.150
看一下

24:34.150 --> 24:35.150
这个link

24:36.150 --> 24:37.150
比方说我们现在

24:37.150 --> 24:38.150
跳转到sub页

24:38.150 --> 24:39.150
那么现在他有没有给你

24:39.150 --> 24:40.150
加上那个样式

24:41.150 --> 24:42.150
class active

24:42.150 --> 24:43.150
也没给你加上

24:43.150 --> 24:44.150
是没有

24:44.150 --> 24:45.150
我们知道以前在

24:45.150 --> 24:46.150
rexrotor里边

24:46.150 --> 24:48.150
使用那个NavLink

24:48.150 --> 24:49.150
对吧

24:49.150 --> 24:50.150
使用那个NavLink

24:50.150 --> 24:51.150
他是不是会给你加上

24:51.150 --> 24:52.150
一个class active

24:52.150 --> 24:53.150
对不对

24:53.150 --> 24:54.150
还可以进一配置

24:54.150 --> 24:55.150
那么实际上

24:55.150 --> 24:56.150
我们这里上使用的link

24:56.150 --> 24:57.150
实际上就是那个

24:57.150 --> 24:58.150
实际上

24:58.150 --> 24:59.150
实际上

24:59.150 --> 25:02.150
就是rotor

25:02.150 --> 25:03.150
rex

25:03.150 --> 25:05.150
rotor

25:05.150 --> 25:06.150
这

25:06.150 --> 25:07.150
洞里边的

25:07.150 --> 25:09.150
中的link

25:09.150 --> 25:10.150
link组建

25:10.150 --> 25:12.150
实际上就是这个组建

25:12.150 --> 25:13.150
那么如果说

25:13.150 --> 25:14.150
你要实现

25:14.150 --> 25:16.150
NavLink怎么办呢

25:16.150 --> 25:18.150
也是非常非常简单

25:18.150 --> 25:20.150
一导入NavLink就完事了

25:20.150 --> 25:21.150
NavLink

25:21.150 --> 25:22.150
虽然他官方文档

25:22.150 --> 25:23.150
里边好像没写

25:24.150 --> 25:25.150
他有写没有

25:26.150 --> 25:27.150
有

25:27.150 --> 25:28.150
写了

25:28.150 --> 25:29.150
navlink

25:30.150 --> 25:31.150
导入

25:31.150 --> 25:32.150
wumi

25:32.150 --> 25:33.150
navlink

25:33.150 --> 25:34.150
其实这里可以小写

25:34.150 --> 25:35.150
可以大写

25:35.150 --> 25:36.150
找的是文件

25:36.150 --> 25:37.150
windows里面

25:38.150 --> 25:39.150
然后呢

25:39.150 --> 25:40.150
这个就是

25:40.150 --> 25:42.150
实际上就是rex

25:42.150 --> 25:43.150
rotor

25:43.150 --> 25:44.150
洞中的

25:44.150 --> 25:46.150
navlink

25:46.150 --> 25:47.150
link

25:47.150 --> 25:48.150
组建

25:48.150 --> 25:49.150
实际上他就是把这两个东西

25:49.150 --> 25:50.150
重新导出了

25:50.150 --> 25:51.150
就完事了

25:51.150 --> 25:52.150
那么这里呢

25:52.150 --> 25:53.150
我们就使用

25:53.150 --> 25:55.150
比方说我们使用navlink

25:55.150 --> 25:56.150
改一下

25:56.150 --> 25:59.660
改成navlink

25:59.660 --> 26:00.660
改一下

26:00.660 --> 26:01.660
那么这里

26:01.660 --> 26:02.660
我把它注射了

26:02.660 --> 26:03.660
保存

26:03.660 --> 26:04.660
你看一下

26:04.660 --> 26:05.660
好

26:05.660 --> 26:06.660
那么现在呢

26:06.660 --> 26:07.660
我们这里点A

26:07.660 --> 26:08.660
你看

26:08.660 --> 26:09.660
这里

26:09.660 --> 26:10.660
毕业里边

26:10.660 --> 26:11.660
是不是加了一个class active

26:11.660 --> 26:12.660
那么他的用法

26:12.660 --> 26:13.660
跟他一样的

26:13.660 --> 26:14.660
你可以设置

26:14.660 --> 26:15.660
class的样式名都可以

26:15.660 --> 26:16.660
都可以

26:16.660 --> 26:17.660
好吧

26:17.660 --> 26:18.660
好

26:18.660 --> 26:19.660
这里是关于这个

26:21.660 --> 26:22.660
他的就是样式

26:22.660 --> 26:23.660
他的样

26:23.660 --> 26:24.660
就是他的就是那个

26:24.660 --> 26:26.660
超链接跳转

26:26.660 --> 26:27.660
这是超链接跳转

26:27.660 --> 26:28.660
第一个就是

26:28.660 --> 26:29.660
超链接

26:29.660 --> 26:31.660
跳转�接

26:31.660 --> 26:32.660
跳转链接

26:32.660 --> 26:34.660
那么他导入的是

26:34.660 --> 26:35.660
导入

26:36.660 --> 26:38.660
是那个

26:38.660 --> 26:40.660
一个是那个5米

26:40.660 --> 26:42.660
写杠link

26:44.660 --> 26:45.660
一个是

26:45.660 --> 26:46.660
5米

26:46.660 --> 26:47.660
写杠

26:47.660 --> 26:48.660
navlink

26:48.660 --> 26:50.660
这是链接跳转

26:50.660 --> 26:51.660
那如果说

26:51.660 --> 26:53.660
我不想使用链接跳转

26:53.660 --> 26:55.660
我们想使用那个

26:55.660 --> 26:56.660
就是用

26:56.660 --> 26:57.660
代码的方式来跳转

26:57.660 --> 26:58.660
怎么办呢

26:58.660 --> 26:59.660
比方说

26:59.660 --> 27:00.660
咱们在

27:00.660 --> 27:02.660
sub里边

27:02.660 --> 27:04.660
不要让sub里边

27:04.660 --> 27:06.660
或者说我们在这个A面

27:06.660 --> 27:08.660
A面里边加个按钮

27:08.660 --> 27:10.660
他要跳转到B页面

27:11.660 --> 27:13.660
跳转到

27:13.660 --> 27:15.660
B页面

27:15.660 --> 27:16.660
好

27:16.660 --> 27:17.660
那么我们要在这里

27:17.660 --> 27:18.660
在世界里边

27:18.660 --> 27:20.660
用代码的形式来进行跳转

27:20.660 --> 27:22.660
那么这个应该怎么来跳转呢

27:22.660 --> 27:23.660
怎么来跳转呢

27:23.660 --> 27:24.660
好

27:24.660 --> 27:25.660
那么在这里呢

27:25.660 --> 27:26.660
看着

27:26.660 --> 27:27.660
就是

27:27.660 --> 27:31.420
代码跳转

27:31.420 --> 27:32.420
那么这里要

27:32.420 --> 27:34.420
是不是要导入

27:34.420 --> 27:35.420
要导入这个

27:35.420 --> 27:36.420
wumi

27:36.420 --> 27:37.420
rotor

27:37.420 --> 27:39.420
那么导入的rotor

27:39.420 --> 27:40.420
它是一个对象

27:40.420 --> 27:41.420
我们先导入进来

27:41.420 --> 27:42.420
导入进来

27:42.420 --> 27:43.420
再打印出来

27:43.420 --> 27:44.420
看一下对象里边有什么东西

27:44.420 --> 27:45.420
import

27:45.420 --> 27:46.420
rotor

27:46.420 --> 27:47.420
from

27:47.420 --> 27:48.420
wumi

27:48.420 --> 27:49.420
rotor

27:49.420 --> 27:50.420
导入进来

27:50.420 --> 27:51.420
我们把对象打印出来

27:51.420 --> 27:53.420
rotor

27:53.420 --> 27:54.420
保存

27:54.420 --> 27:55.420
右键

27:55.420 --> 27:56.420
检查

27:56.420 --> 27:57.420
右键

27:57.420 --> 27:58.420
检查

27:58.420 --> 27:59.420
控制台里边

27:59.420 --> 28:00.420
它这里有些警告

28:00.420 --> 28:01.420
这些警告呢

28:01.420 --> 28:02.420
是因为它有

28:02.420 --> 28:03.420
在wumi里边

28:03.420 --> 28:04.420
它给你做了一些组件

28:04.420 --> 28:05.420
这些组件呢

28:05.420 --> 28:07.420
用了生命周期函数呢

28:07.420 --> 28:08.420
有点过时了

28:08.420 --> 28:09.420
就比方说

28:09.420 --> 28:10.420
它用了什么生命周期函数

28:10.420 --> 28:11.420
还告诉你用了什么

28:11.420 --> 28:12.420
component wheel mount

28:12.420 --> 28:13.420
对吧

28:13.420 --> 28:14.420
这个生命各周期函数

28:14.420 --> 28:15.420
我们之前是不是说了

28:15.420 --> 28:17.420
在现在新版本的react里边

28:17.420 --> 28:19.420
它不再推荐使用这个了

28:19.420 --> 28:20.420
这个官方呢

28:20.420 --> 28:22.420
也就是也提供

28:22.420 --> 28:23.420
就是很多的开发者呢

28:23.420 --> 28:25.420
也给官方提供了这么一个问题

28:25.420 --> 28:26.420
他们回答的是

28:26.420 --> 28:27.420
下个版本

28:27.420 --> 28:28.420
会解决

28:28.420 --> 28:29.420
现在的版本还没有解决

28:29.420 --> 28:30.420
把去掉吧

28:31.420 --> 28:32.420
去掉

28:32.420 --> 28:33.420
我们到毕业

28:33.420 --> 28:34.420
到A面去

28:34.420 --> 28:35.420
到A面

28:35.420 --> 28:36.420
你看

28:36.420 --> 28:37.420
我们打印出了这个rotor

28:37.420 --> 28:38.420
那你这个玩意

28:38.420 --> 28:40.420
是不是就是history里边的一些

28:40.420 --> 28:41.420
提供了一些常见的方法

28:41.420 --> 28:42.420
对吧

28:42.420 --> 28:43.420
它就是提供了一些常见的方法

28:43.420 --> 28:44.420
那么有了这一方法

28:44.420 --> 28:45.420
是不是就可以

28:45.420 --> 28:46.420
挑转一面了

28:46.420 --> 28:47.420
对不对

28:47.420 --> 28:48.420
然后呢

28:48.420 --> 28:49.420
我们这里是不是就可以

28:49.420 --> 28:50.420
点击过后

28:50.420 --> 28:51.420
要挑转一面

28:51.420 --> 28:52.420
rotor push

28:52.420 --> 28:53.420
对不对

28:53.420 --> 28:54.420
就挑转一面

28:54.420 --> 28:55.420
挑转到了

28:55.420 --> 28:56.420
比方挑转到B一面

28:56.420 --> 28:57.420
就挑转过去

28:57.420 --> 28:58.420
完事了

28:58.420 --> 29:00.420
特别特别简单

29:00.420 --> 29:01.420
保存

29:01.420 --> 29:02.420
好

29:02.420 --> 29:03.420
那么比方说这里点击

29:03.420 --> 29:04.420
你说是不是挑转过去了

29:04.420 --> 29:05.420
对吧

29:05.420 --> 29:06.420
好

29:06.420 --> 29:07.420
这就是这一块

29:07.420 --> 29:10.420
如何在代码里边进行挑转

29:10.420 --> 29:11.420
都有挑转

29:11.420 --> 29:12.420
是不是就完事了

29:12.420 --> 29:13.420
包括如果说你在

29:13.420 --> 29:14.420
主键里边挑转的话

29:14.420 --> 29:15.420
是不是一样的

29:15.420 --> 29:16.420
如果说你这里

29:16.420 --> 29:17.420
不是我们的页面

29:17.420 --> 29:19.420
因为你肯定还要做主键

29:19.420 --> 29:20.420
我们在这里

29:20.420 --> 29:21.420
src目的下面

29:21.420 --> 29:23.420
再建一个component

29:23.420 --> 29:25.420
component

29:25.420 --> 29:27.420
比方说我们这里建立一个menu

29:27.420 --> 29:29.420
一个menu

29:29.420 --> 29:30.420
点解释

29:31.420 --> 29:33.420
关闭到右侧

29:34.420 --> 29:35.420
fc

29:35.420 --> 29:36.420
这个menu解释里边

29:36.420 --> 29:38.420
提供了一些

29:38.420 --> 29:39.420
就是

29:40.420 --> 29:41.420
提供了一些

29:41.420 --> 29:43.420
超链接或者是按钮

29:43.420 --> 29:44.420
按钮

29:44.420 --> 29:45.420
超链接都行

29:45.420 --> 29:46.420
我们写两个超链接

29:46.420 --> 29:48.420
写一个超链接写个按钮

29:48.420 --> 29:50.420
比方说我们这里写个超链接

29:51.420 --> 29:52.420
import

29:52.420 --> 29:53.420
navlink

29:53.420 --> 29:54.420
from

29:54.420 --> 29:55.420
wumi

29:55.420 --> 29:56.420
navlink

29:56.420 --> 29:57.420
好

29:57.420 --> 29:58.420
这里边

29:58.420 --> 29:59.420
我们是不是一样的道理

29:59.420 --> 30:00.420
一样的道理

30:00.420 --> 30:02.420
我们把这个直接复制过来

30:02.420 --> 30:04.420
这两个是超链接

30:04.420 --> 30:06.420
然后再写两个按钮

30:06.420 --> 30:08.420
这是a

30:08.420 --> 30:09.420
调转到

30:09.420 --> 30:10.420
这是b

30:10.420 --> 30:11.420
调转到b

30:11.420 --> 30:12.420
这里写个按钮

30:12.420 --> 30:13.420
button

30:13.420 --> 30:14.420
这是调转到

30:14.420 --> 30:15.420
就是到a

30:15.420 --> 30:17.790
好

30:17.790 --> 30:18.790
再来一个

30:18.790 --> 30:20.790
button

30:20.790 --> 30:21.790
这是调转到

30:21.790 --> 30:23.790
就是按钮

30:23.790 --> 30:25.790
就是调转到sub

30:25.790 --> 30:26.790
好

30:26.790 --> 30:27.790
那么我们这里

30:27.790 --> 30:28.790
写上unclick

30:28.790 --> 30:29.790
是不是一样的

30:30.790 --> 30:31.790
我们以前要怎么做

30:31.790 --> 30:32.790
因为以前要调转

30:32.790 --> 30:34.790
要是否要获得History对象

30:34.790 --> 30:36.790
是否要获得History对象

30:36.790 --> 30:37.790
那么现在

30:37.790 --> 30:38.790
我们不需要了

30:38.790 --> 30:39.790
我们直接用这个

30:39.790 --> 30:40.790
就可以调转了

30:40.790 --> 30:41.790
我们以前还要用

30:41.790 --> 30:42.790
withrotor

30:42.790 --> 30:43.790
包装一下

30:43.790 --> 30:44.790
为了获取History对象

30:44.790 --> 30:45.790
它现在不需要了

30:45.790 --> 30:47.790
我们这里使用

30:47.790 --> 30:49.790
rotor

30:49.790 --> 30:50.790
from

30:50.790 --> 30:52.790
wumi

30:52.790 --> 30:55.790
rotor

30:55.790 --> 30:57.790
使用对象

30:58.790 --> 31:00.790
调转到a

31:00.790 --> 31:02.790
这里也是一样

31:02.790 --> 31:03.790
复制一下

31:03.790 --> 31:05.790
再调转到sub

31:05.790 --> 31:07.790
我们写到主键里面的

31:07.790 --> 31:08.790
它不是野棉

31:08.790 --> 31:09.790
它野也可以

31:09.790 --> 31:10.790
野棉问题

31:10.790 --> 31:11.790
我们这比方到

31:11.790 --> 31:12.790
layout里面

31:12.790 --> 31:13.790
使用这个主键

31:13.790 --> 31:17.300
把这块去掉

31:17.300 --> 31:19.300
把这块去掉

31:20.300 --> 31:22.300
这里导入主键

31:22.300 --> 31:25.300
import

31:25.300 --> 31:26.300
menu

31:26.300 --> 31:27.300
from

31:27.300 --> 31:29.300
点儿写钢

31:29.300 --> 31:31.300
component

31:31.300 --> 31:32.300
menu

31:32.300 --> 31:34.300
然后我们这里

31:34.300 --> 31:35.300
menu

31:35.300 --> 31:36.300
写进来

31:36.300 --> 31:37.300
也可以

31:37.300 --> 31:38.300
没问题

31:38.300 --> 31:39.300
看一下吧

31:39.300 --> 31:40.300
到a

31:40.300 --> 31:41.300
b

31:41.300 --> 31:42.300
sub

31:42.300 --> 31:43.300
手页

31:43.300 --> 31:44.300
没问题

31:44.300 --> 31:46.300
这里我们再顺便说一下

31:46.300 --> 31:47.300
导入主键的时候

31:47.300 --> 31:48.300
有的时候

31:48.300 --> 31:49.300
比方说

31:49.300 --> 31:51.300
你在页面中要使用主键

31:51.300 --> 31:52.300
或者在哪里要使用主键

31:52.300 --> 31:53.300
因为它可能

31:53.300 --> 31:55.300
嵌套的结构比较深

31:55.300 --> 31:58.300
因此你导入主键的时候

31:58.300 --> 31:59.300
你可能会

31:59.300 --> 32:01.300
不断的返回上进目录

32:01.300 --> 32:02.300
不断的返回上进目录

32:02.300 --> 32:03.300
有点烦人

32:03.300 --> 32:05.300
那么这里可以使用a

32:05.300 --> 32:06.300
a是不是

32:06.300 --> 32:07.300
它表示的意思就是

32:07.300 --> 32:09.300
src目录

32:09.300 --> 32:11.300
在src目录下面的component

32:11.300 --> 32:12.300
menu

32:12.300 --> 32:13.300
保存

32:13.300 --> 32:14.300
刷新

32:14.300 --> 32:15.300
这里

32:15.300 --> 32:16.300
a

32:16.300 --> 32:17.300
b

32:17.300 --> 32:18.300
sub

32:18.300 --> 32:19.300
手页

32:19.300 --> 32:21.300
你看这个主键是不是导入进来了

32:21.300 --> 32:22.300
导入进来了

32:22.300 --> 32:23.300
你用a它也可以

32:23.300 --> 32:25.300
这里顺便说一个小知识

32:25.300 --> 32:26.300
一个小知识

32:26.300 --> 32:29.740
就是

32:29.740 --> 32:31.740
使用a它

32:31.740 --> 32:32.740
导入

32:32.740 --> 32:34.740
导入就是cool的时候

32:34.740 --> 32:36.740
导入模块

32:36.740 --> 32:38.740
使

32:38.740 --> 32:39.740
a它

32:39.740 --> 32:41.740
这些东西其实可以配置的

32:41.740 --> 32:42.740
其实大家知道

32:42.740 --> 32:43.740
这个就是

32:43.740 --> 32:45.740
我也派给了一个插件的功能

32:45.740 --> 32:46.740
对不对

32:46.740 --> 32:47.740
表示

32:49.740 --> 32:51.740
src目录

32:51.740 --> 32:52.740
表示src目录

32:52.740 --> 32:53.740
如果说你没有

32:53.740 --> 32:55.740
src目录的话表示跟目录

32:57.740 --> 32:59.740
这是关于路由的跳转

32:59.740 --> 33:01.740
要么就是使用那个

33:01.740 --> 33:02.740
链接点跳转

33:02.740 --> 33:04.740
要么就是使用那个

33:04.740 --> 33:05.740
代码来跳转

33:05.740 --> 33:06.740
还有别的吗

33:06.740 --> 33:07.740
没有啥别的了

33:07.740 --> 33:09.740
然后还有另外一个问题

33:09.740 --> 33:12.740
就是路由信息的获取

33:12.740 --> 33:14.740
信息的获取

33:14.740 --> 33:16.740
如何来获取路由信息

33:16.740 --> 33:18.740
因为我们有的时候

33:18.740 --> 33:20.740
要在组建也好

33:20.740 --> 33:21.740
或者是页面也好

33:21.740 --> 33:23.740
知道当前的页面地址是啥

33:23.740 --> 33:24.740
对不对

33:24.740 --> 33:25.740
要获取路由信息

33:25.740 --> 33:27.740
不要传过来的一些参数

33:27.740 --> 33:29.740
传过来的一些什么东西

33:29.740 --> 33:31.740
那么我们怎么来获取路由信息呢

33:31.740 --> 33:32.740
我们只要看着

33:33.740 --> 33:34.740
在页面a中

33:34.740 --> 33:35.740
比方说

33:35.740 --> 33:36.740
我们要在页面a中

33:36.740 --> 33:38.740
以前我们可以获取到什么march

33:38.740 --> 33:39.740
是不是三个对象

33:39.740 --> 33:40.740
还记得吗

33:40.740 --> 33:41.740
march对象

33:41.740 --> 33:42.740
还有什么

33:42.740 --> 33:43.740
history对象

33:43.740 --> 33:45.740
还有什么location对象

33:45.740 --> 33:47.740
非常重要的三个对象

33:47.740 --> 33:49.740
这里边记录了很多的路由信息

33:49.740 --> 33:51.740
然后是学于rexrotor的时候

33:51.740 --> 33:52.740
告诉大家

33:52.740 --> 33:53.740
这三个东西

33:53.740 --> 33:55.740
它是保存到上下文里边的

33:55.740 --> 33:57.740
实际上现在也是

33:57.740 --> 33:59.740
那么它底层用的就是rexrotor

33:59.740 --> 34:01.740
那么怎么来获取这个信息呢

34:01.740 --> 34:02.740
还是一样

34:02.740 --> 34:03.740
通过probs

34:03.740 --> 34:05.740
我们把这个addprobs打印出来

34:05.740 --> 34:07.740
大家可以看得很清楚了

34:07.740 --> 34:08.740
好来吧

34:08.740 --> 34:09.740
看一下

34:09.740 --> 34:12.740
我们到这个a界面

34:12.740 --> 34:13.740
打印出来

34:13.740 --> 34:15.740
你看这个属性里边

34:15.740 --> 34:16.740
是吧

34:16.740 --> 34:17.740
有history

34:17.740 --> 34:18.740
对吧

34:18.740 --> 34:19.740
有march

34:19.740 --> 34:20.740
对吧

34:20.740 --> 34:21.740
还有其他属性

34:21.740 --> 34:23.740
我们一个个说吧

34:23.740 --> 34:26.740
路由信息的获取这一块

34:26.740 --> 34:29.740
凡是所有的

34:29.740 --> 34:31.740
所有的页面

34:31.740 --> 34:32.740
还有什么

34:32.740 --> 34:33.740
布局

34:33.740 --> 34:34.740
包括layout

34:34.740 --> 34:35.740
因为布局

34:35.740 --> 34:37.740
它也是配置到路由里边的

34:37.740 --> 34:38.740
也是要匹配这个逐渐的

34:38.740 --> 34:40.740
因为你看一下它的配置

34:40.740 --> 34:41.740
我们来看一下它的配置

34:41.740 --> 34:42.740
虽然说我们这几颗

34:42.740 --> 34:43.740
并不讲配置

34:43.740 --> 34:44.740
我们下几颗再说

34:44.740 --> 34:45.740
但是我们大概看一下吧

34:45.740 --> 34:47.740
你看匹配任何一个地址

34:47.740 --> 34:49.740
匹配任何一个地址

34:49.740 --> 34:50.740
是不是要到这个逐渐

34:50.740 --> 34:52.740
layout

34:52.740 --> 34:53.740
index.js

34:53.740 --> 34:54.740
这个逐渐

34:54.740 --> 34:55.740
是不是要到这个逐渐

34:55.740 --> 34:56.740
其实这里的配置

34:56.740 --> 34:58.740
就相当于是写到这个

34:58.740 --> 34:59.740
它最终会形成

34:59.740 --> 35:00.740
到那个roach

35:00.740 --> 35:01.740
那个逐渐里边去

35:01.740 --> 35:03.740
最终会形成到这里

35:03.740 --> 35:04.740
roach

35:04.740 --> 35:05.740
这个逐渐去

35:05.740 --> 35:06.740
我这里打住是

35:06.740 --> 35:07.740
里面不要去打住是

35:07.740 --> 35:08.740
这里的文件会被

35:08.740 --> 35:09.740
每一次编译

35:09.740 --> 35:10.740
它会不会被覆盖掉的

35:10.740 --> 35:12.740
它会形成这么一个逐渐

35:12.740 --> 35:13.740
这些配置

35:13.740 --> 35:14.740
会到这个逐渐里边去

35:15.740 --> 35:17.740
然后让你看一下

35:17.740 --> 35:18.740
它pass就是写杠

35:18.740 --> 35:19.740
pass有写杠

35:19.740 --> 35:22.740
pass等于什么写杠

35:22.740 --> 35:24.740
然后component

35:24.740 --> 35:25.740
等于什么呢

35:25.740 --> 35:26.740
component等于

35:26.740 --> 35:27.740
它用的是

35:27.740 --> 35:28.740
它用的是那个

35:28.740 --> 35:30.740
common介石的写法

35:30.740 --> 35:33.740
component是用的这个

35:33.740 --> 35:36.740
然后就匹配到这个

35:36.740 --> 35:38.740
而且它不是精确匹配

35:38.740 --> 35:39.740
是不是任何地址

35:39.740 --> 35:40.740
所有的地址

35:40.740 --> 35:41.740
它都会匹配过来

35:41.740 --> 35:42.740
我们下几颗再详细说

35:42.740 --> 35:43.740
下几颗再详细说

35:44.740 --> 35:45.740
对吧没问题吧

35:45.740 --> 35:47.740
好然后呢

35:47.740 --> 35:48.740
这个弱持里边

35:48.740 --> 35:49.740
我们再看啊

35:50.740 --> 35:52.740
如果说匹配到了

35:52.740 --> 35:55.740
这个就是这里

35:58.740 --> 36:00.740
如果说匹配到了

36:00.740 --> 36:01.740
这个就是

36:01.740 --> 36:02.740
那个

36:02.740 --> 36:03.740
add的话

36:03.740 --> 36:05.740
那么它里边有个弱持属性

36:05.740 --> 36:06.740
它里边又是个数组

36:06.740 --> 36:07.740
说明了

36:07.740 --> 36:08.740
它会在这个组建里边

36:08.740 --> 36:10.740
它的qo捲那个位置

36:10.740 --> 36:12.740
在它的qo捲那个位置

36:12.740 --> 36:13.740
是不是传递

36:13.740 --> 36:14.740
有一些配置

36:14.740 --> 36:16.740
有一些直逐件的匹配

36:16.740 --> 36:17.740
对不对

36:17.740 --> 36:19.740
又会传递直逐件的匹配

36:19.740 --> 36:20.740
那么下面的就是

36:20.740 --> 36:21.740
全是精确匹配

36:21.740 --> 36:22.740
看没

36:22.740 --> 36:23.740
全是精确匹配

36:23.740 --> 36:25.740
必须要精确匹配到这样的地址呢

36:25.740 --> 36:26.740
才能够去

36:26.740 --> 36:28.740
啊去那个

36:28.740 --> 36:29.740
渲染这样的组建

36:29.740 --> 36:30.740
所以它最终呢

36:30.740 --> 36:32.740
就是通过弱持来匹配的

36:32.740 --> 36:33.740
对吧

36:33.740 --> 36:34.740
因此呢我们这里

36:34.740 --> 36:35.740
访问这个地址

36:35.740 --> 36:36.740
就是访问任何的地址

36:36.740 --> 36:37.740
由于它最终会形成

36:37.740 --> 36:38.740
弱持的组建

36:38.740 --> 36:40.740
那么组建的component呢

36:40.740 --> 36:41.740
会匹配到对应的组建

36:41.740 --> 36:42.740
那么它是不是

36:42.740 --> 36:43.740
会往这个组建里面

36:43.740 --> 36:44.740
去注入路由信息啊

36:44.740 --> 36:46.740
这是rexrouter的功能

36:46.740 --> 36:47.740
对吧

36:47.740 --> 36:49.740
并不是无米它本身做的功能

36:49.740 --> 36:50.740
所以说呢

36:50.740 --> 36:52.740
我们所有的布局

36:52.740 --> 36:53.740
布局组建

36:53.740 --> 36:54.740
因为它会经过route来匹配

36:54.740 --> 36:56.740
还有什么页面组建

36:56.740 --> 36:59.740
所有的页面和布局组建

36:59.740 --> 37:03.740
都会收到

37:03.740 --> 37:04.740
收到

37:04.740 --> 37:05.740
下面的

37:05.740 --> 37:07.740
都会

37:07.740 --> 37:09.740
都会通过属性

37:09.740 --> 37:11.740
收到下面的属性

37:11.740 --> 37:12.740
哪些属性呢

37:12.740 --> 37:13.740
我们来看一下

37:13.740 --> 37:14.740
一个是march

37:14.740 --> 37:15.740
对吧

37:15.740 --> 37:16.740
等同于

37:16.740 --> 37:17.740
等同于什么

37:17.740 --> 37:18.740
history

37:18.740 --> 37:22.740
等同于就是rexrouter的march

37:22.740 --> 37:23.740
一样的

37:23.740 --> 37:24.740
一样的

37:25.740 --> 37:27.740
还有什么history

37:28.740 --> 37:30.740
等同于rexrouter的history

37:30.740 --> 37:31.740
但是呢

37:31.740 --> 37:32.740
这里做了一点改变

37:34.740 --> 37:35.740
history

37:35.740 --> 37:36.740
做什么改变呢

37:36.740 --> 37:37.740
就是说

37:37.740 --> 37:38.740
history

37:38.740 --> 37:41.740
的location属性

37:41.740 --> 37:43.740
的query

37:43.740 --> 37:46.740
被封装成了

37:46.740 --> 37:48.740
一个对象

37:48.740 --> 37:49.740
好

37:49.740 --> 37:50.740
我们来看一下吧

37:50.740 --> 37:51.740
history里边

37:51.740 --> 37:52.740
它的location

37:52.740 --> 37:53.740
对吧

37:53.740 --> 37:55.740
跟之前那个rexrouter是一样的

37:55.740 --> 37:56.740
它的query

37:56.740 --> 37:57.740
以前是啥

37:57.740 --> 37:58.740
以前是不是个字不错

37:58.740 --> 37:59.740
对吧

37:59.740 --> 38:00.740
就表示地址南参数

38:00.740 --> 38:01.740
就在这里

38:01.740 --> 38:02.740
地址南参数

38:02.740 --> 38:03.740
A等于1

38:03.740 --> 38:04.740
B等于2

38:04.740 --> 38:05.740
看一下吧

38:05.740 --> 38:06.740
这里

38:06.740 --> 38:07.740
再展开

38:08.740 --> 38:09.740
query

38:09.740 --> 38:10.740
它把它封装成对象了

38:10.740 --> 38:11.740
它怎么来封装的

38:11.740 --> 38:13.740
使用的是query stream

38:13.740 --> 38:17.740
使用的是query stream

38:17.740 --> 38:18.740
cool

38:18.740 --> 38:20.740
进行的封装

38:20.740 --> 38:22.740
我们之前是不是用过这个cool

38:22.740 --> 38:23.740
用过吧

38:23.740 --> 38:24.740
对吧

38:24.740 --> 38:25.740
它内部给你使用了这个cool

38:25.740 --> 38:26.740
然后对它进行封装

38:26.740 --> 38:27.740
封装的过后

38:27.740 --> 38:28.740
我们用起来

38:28.740 --> 38:29.740
是不是更加简单了

38:29.740 --> 38:30.740
更加简洁了

38:30.740 --> 38:31.740
可以直接使用

38:31.740 --> 38:32.740
我们就没有必要再去封装一次了

38:32.740 --> 38:34.740
那么history的location

38:34.740 --> 38:35.740
把它封装了

38:35.740 --> 38:36.740
location是不是也跟着封装了

38:36.740 --> 38:37.740
对吧

38:37.740 --> 38:38.740
因为它两个是一个东西

38:38.740 --> 38:42.740
所以说location属性是一起封装的

38:42.740 --> 38:47.740
location属性是一起封装的

38:47.740 --> 38:51.740
等同于就是这个属性

38:51.740 --> 38:54.740
只不过它这里使用了把它进行封装

38:54.740 --> 38:57.740
把location.query进行封装

38:57.740 --> 38:58.740
好吧

38:58.740 --> 38:59.740
就这么三个属性

38:59.740 --> 39:00.740
然后还有一些其他属性

39:00.740 --> 39:01.740
其他属性

39:01.740 --> 39:02.740
我们都

39:02.740 --> 39:03.740
像这个属性

39:03.740 --> 39:05.740
这个属性是跟服务端渲染有关系的

39:05.740 --> 39:06.740
我们不用管

39:06.740 --> 39:07.740
像tilted不用说了吧

39:07.740 --> 39:08.740
对吧

39:08.740 --> 39:10.740
然后像computedmarch

39:10.740 --> 39:12.740
这个东西是它的一个内部属性

39:12.740 --> 39:14.740
就是我们也可以不用管

39:14.740 --> 39:15.740
它内部属性

39:15.740 --> 39:17.740
它都不应该把它暴露出来

39:17.740 --> 39:18.740
这个玩意

39:18.740 --> 39:19.740
我们用的话就用march就行了

39:19.740 --> 39:21.740
这个computed的属性

39:21.740 --> 39:22.740
是Rathe-Rothe

39:22.740 --> 39:25.740
在实现Switch那个组件的时候

39:25.740 --> 39:26.740
使用了一个内部的东西

39:26.740 --> 39:28.740
它把它暴露出来了

39:28.740 --> 39:29.740
没有什么意义

39:29.740 --> 39:31.740
还有属性叫Rothe

39:31.740 --> 39:32.740
Rothe就是我们

39:32.740 --> 39:34.740
对应的路由配置

39:34.740 --> 39:36.740
这个Rothe对应的就是路由配置

39:38.740 --> 39:42.740
Rothe对应的是路由配置

39:42.740 --> 39:44.740
就是哪个路由配置匹配到了

39:44.740 --> 39:45.740
匹配到了这个结果

39:45.740 --> 39:46.740
你看

39:46.740 --> 39:47.740
路由配置

39:47.740 --> 39:48.740
斜槓A

39:48.740 --> 39:50.740
一个Rathe是不是要精确匹配

39:50.740 --> 39:52.740
我们这里的匹配到了

39:52.740 --> 39:53.740
运行的组件是啥

39:53.740 --> 39:55.740
是不是个函数A这个组件

39:55.740 --> 39:57.740
就匹配到这些信息

39:57.740 --> 39:58.740
那么这些信拿到过后

39:58.740 --> 40:00.740
我们是不是可以获取信息的

40:00.740 --> 40:01.740
对不对

40:01.740 --> 40:02.740
比方说我们可以获取到

40:02.740 --> 40:03.740
query

40:03.740 --> 40:05.740
的参数是不是全部可以获取了

40:05.740 --> 40:07.740
这是关于这一块

40:07.740 --> 40:08.740
路由信息的获取

40:08.740 --> 40:11.740
那如果说我们自己写的组件

40:11.740 --> 40:13.740
要获取路由信息呢

40:13.740 --> 40:15.740
比方说我们这里

40:15.740 --> 40:17.740
有个组件A.js

40:17.740 --> 40:18.740
有这么一个组件

40:18.740 --> 40:20.740
这个组件他也要获取路由信息

40:20.740 --> 40:22.740
我在这里获取路由信息

40:22.740 --> 40:24.740
能获取到吗

40:24.740 --> 40:25.740
大家想一想

40:25.740 --> 40:26.740
能不能获取到

40:26.740 --> 40:28.740
比方说我要

40:28.740 --> 40:30.740
我要获取到路由里边的

40:30.740 --> 40:32.740
什么就是

40:32.740 --> 40:34.740
location里边的passname

40:34.740 --> 40:37.740
能在这个组件里面获取到吗

40:37.740 --> 40:38.740
所以获取不到啊

40:38.740 --> 40:40.740
因为这个组件他不是通过

40:40.740 --> 40:41.740
road

40:41.740 --> 40:42.740
他底层不是通过

40:42.740 --> 40:44.740
road的那个组件匹配过来的

40:44.740 --> 40:46.740
所以他不会注入这样的信息

40:46.740 --> 40:47.740
对吧是获取不到的

40:47.740 --> 40:49.740
比方说我们在A里边

40:49.740 --> 40:50.740
去使用这个组件

40:50.740 --> 40:51.740
A import

40:51.740 --> 40:53.740
A from

40:53.740 --> 40:56.740
component

40:56.740 --> 40:58.740
然后

40:58.740 --> 40:59.740
好那么这里呢

40:59.740 --> 41:02.740
比方说我们写上这么一个A

41:02.740 --> 41:04.740
写上这么一个A组件

41:04.740 --> 41:05.740
那你看一下这个A组件

41:05.740 --> 41:07.740
能不能匹配到吗

41:07.740 --> 41:08.740
是不是匹配到

41:08.740 --> 41:10.740
how cannot read the property

41:10.740 --> 41:12.740
passname of undefend

41:12.740 --> 41:13.740
他说什么呢

41:13.740 --> 41:14.740
他说这个玩意是undefend

41:14.740 --> 41:16.740
他里边没有这个东西

41:16.740 --> 41:17.740
那怎么办呢

41:17.740 --> 41:18.740
我们以前打扮的

41:18.740 --> 41:19.740
是不是要用withrouter

41:19.740 --> 41:20.740
封装一下

41:20.740 --> 41:21.740
那这里是一样的

41:21.740 --> 41:22.740
也可以用withrouter

41:22.740 --> 41:23.740
封装一下

41:23.740 --> 41:24.740
那么这个withrouter

41:24.740 --> 41:25.740
在哪呢

41:25.740 --> 41:26.740
就说

41:26.740 --> 41:27.740
如果

41:27.740 --> 41:30.740
如果需要使用

41:30.740 --> 41:31.740
那个

41:31.740 --> 41:34.740
如果需要在

41:34.740 --> 41:36.740
普通组件中

41:36.740 --> 41:37.740
不是页面组件

41:37.740 --> 41:38.740
是普通组件中

41:38.740 --> 41:41.740
使用获取

41:41.740 --> 41:43.740
路由信息

41:43.740 --> 41:47.740
则需要使用withrouter

41:47.740 --> 41:48.740
封装

41:48.740 --> 41:49.740
那么这个withrouter

41:49.740 --> 41:51.740
在哪呢

41:51.740 --> 41:53.740
可以通过

41:53.740 --> 41:54.740
wumi

41:54.740 --> 41:59.740
就是withrouter

41:59.740 --> 42:00.740
导入

42:00.740 --> 42:01.740
好

42:01.740 --> 42:02.740
看一下吧

42:02.740 --> 42:03.740
其实在官方文档里边

42:03.740 --> 42:04.740
他也说到了这一点

42:04.740 --> 42:05.740
这

42:05.740 --> 42:06.740
withrouter

42:06.740 --> 42:07.740
对吧

42:07.740 --> 42:08.740
他就把reactiverouter

42:08.740 --> 42:09.740
里面的withrouter

42:09.740 --> 42:10.740
高階函数

42:10.740 --> 42:11.740
给导入进来了

42:11.740 --> 42:12.740
高階组件给导入进来了

42:12.740 --> 42:13.740
好

42:13.740 --> 42:14.740
那么这里呢

42:14.740 --> 42:15.740
我们可以用

42:15.740 --> 42:16.740
这种方式来做

42:16.740 --> 42:17.740
withrouter

42:17.740 --> 42:19.740
inport

42:19.740 --> 42:21.740
withrouter

42:21.740 --> 42:22.740
from

42:23.740 --> 42:25.740
wumi

42:25.740 --> 42:26.740
withrouter

42:26.740 --> 42:27.740
把

42:27.740 --> 42:28.740
封装一下

42:30.740 --> 42:31.740
对吧

42:31.740 --> 42:32.740
完了

42:32.740 --> 42:33.740
好

42:33.740 --> 42:34.740
保存

42:34.740 --> 42:35.740
看一下

42:35.740 --> 42:36.740
那么现在

42:36.740 --> 42:37.740
是不是在a页面

42:37.740 --> 42:38.740
a页面

42:38.740 --> 42:39.740
是不是可以获取到

42:39.740 --> 42:40.740
这个信息了

42:40.740 --> 42:41.740
对吧

42:41.740 --> 42:42.740
好

42:42.740 --> 42:44.740
这是关于路由信息的获取

42:44.740 --> 42:45.740
好

42:45.740 --> 42:46.740
那么现在我们说到

42:46.740 --> 42:47.740
路由信息

42:47.740 --> 42:48.740
那么就是另外一个问题

42:48.740 --> 42:49.740
我们路由里边

42:49.740 --> 42:50.740
不是有这么的东西吗

42:50.740 --> 42:51.740
大家还记得吗

42:51.740 --> 42:52.740
就是这个Parents

42:52.740 --> 42:53.740
还记得吗

42:53.740 --> 42:54.740
对吧

42:54.740 --> 42:56.740
就是路由的匹配参数

42:56.740 --> 42:57.740
不是地址男团

42:57.740 --> 42:58.740
它不是query

42:58.740 --> 42:59.740
也叫分清楚

42:59.740 --> 43:00.740
query是问号后边的

43:00.740 --> 43:01.740
对吧

43:01.740 --> 43:02.740
是问号后边的这个东西

43:02.740 --> 43:03.740
那么这个Parents

43:03.740 --> 43:05.740
是放到路由里边的

43:05.740 --> 43:06.740
这种信息

43:06.740 --> 43:07.740
那么这种怎么获取呢

43:07.740 --> 43:08.740
比方说

43:08.740 --> 43:09.740
比方说

43:09.740 --> 43:14.740
我这里有这么一个

43:14.740 --> 43:16.740
在sub里边

43:16.740 --> 43:17.740
sub里边

43:17.740 --> 43:20.740
比方说有这么一个页面

43:20.740 --> 43:21.740
这个页面

43:21.740 --> 43:23.740
它要接受这么一样一个地址

43:23.740 --> 43:24.740
看着

43:24.740 --> 43:25.740
在sub里边

43:25.740 --> 43:26.740
它比方有这么一个页面

43:26.740 --> 43:28.740
它要接受这么一个地址

43:28.740 --> 43:29.740
比

43:29.740 --> 43:31.740
就是detail

43:31.740 --> 43:33.740
后边有一个id

43:33.740 --> 43:34.740
那么这个页面

43:34.740 --> 43:35.740
它由于这个id

43:35.740 --> 43:36.740
它是不是会变化

43:36.740 --> 43:37.740
你不能说

43:37.740 --> 43:38.740
一个id写一个页面

43:38.740 --> 43:39.740
一个id写一个页面

43:39.740 --> 43:40.740
对吧

43:40.740 --> 43:41.740
那么这种东西

43:41.740 --> 43:42.740
叫做动态路由

43:42.740 --> 43:43.740
动态路由

43:43.740 --> 43:44.740
就是这个id会变化

43:44.740 --> 43:45.740
我们不管id怎么变化

43:45.740 --> 43:47.740
都匹配到同一个页面

43:47.740 --> 43:48.740
那么这个页面中

43:48.740 --> 43:49.740
去获取这个id

43:49.740 --> 43:50.740
我们以前打写的

43:50.740 --> 43:52.740
以前是要这样子写detail

43:52.740 --> 43:54.740
然后写个冒号id

43:54.740 --> 43:56.740
然后匹配到一个component

43:56.740 --> 43:58.740
匹配到一个就是主键

43:58.740 --> 43:59.740
这个主键里边

43:59.740 --> 44:00.740
是不是可以通过

44:00.740 --> 44:02.740
parons.id

44:02.740 --> 44:03.740
哪里

44:03.740 --> 44:07.740
就是march.parons.id

44:07.740 --> 44:08.740
是不是可以获取

44:08.740 --> 44:09.740
以前是不是这样做的

44:09.740 --> 44:11.740
那么现在怎么来做呢

44:11.740 --> 44:12.740
很简单

44:12.740 --> 44:13.740
你把这个页面

44:13.740 --> 44:16.740
它的文件名写成

44:16.740 --> 44:19.740
dolarid就行了

44:19.740 --> 44:21.740
dolarid.js

44:21.740 --> 44:23.740
就完了

44:23.740 --> 44:24.740
那么它就按照

44:24.740 --> 44:25.740
它这个情况

44:25.740 --> 44:27.740
它就会生成这么一个路由

44:27.740 --> 44:28.740
会生成这么一个路由

44:28.740 --> 44:29.740
匹配哪个主键呢

44:29.740 --> 44:30.740
匹配这个主键

44:30.740 --> 44:31.740
就是这个主键

44:31.740 --> 44:32.740
导出了主键

44:32.740 --> 44:33.740
所以我们这里记录一笔

44:33.740 --> 44:34.740
所以我们刚才说

44:34.740 --> 44:35.740
路由匹配还没有讲完

44:35.740 --> 44:36.740
就还那么一点点

44:36.740 --> 44:38.740
就这个东西

44:38.740 --> 44:40.740
使用dolar

44:40.740 --> 44:44.740
dolar就是名称

44:44.740 --> 44:47.740
会产生动态路由

44:47.740 --> 44:48.740
会产生动态路由

44:48.740 --> 44:49.740
什么意思呢

44:49.740 --> 44:51.740
就是

44:51.740 --> 44:52.740
这个东西不太好说

44:52.740 --> 44:53.740
大家看的一直就行了

44:53.740 --> 44:55.740
不太好用文字来表述

44:55.740 --> 44:56.740
我们来看一下

44:56.740 --> 44:58.740
把这个地方导出一个主键

44:58.740 --> 44:59.740
rfc

44:59.740 --> 45:01.740
给它取名为detail

45:01.740 --> 45:02.740
主键的名字就随便去

45:02.740 --> 45:03.740
就是文件名

45:03.740 --> 45:05.740
用这个名字名名就行了

45:05.740 --> 45:07.740
比较到这里一个probs

45:07.740 --> 45:08.740
我们这里

45:08.740 --> 45:09.740
显示一个

45:09.740 --> 45:10.740
显示一个

45:10.740 --> 45:11.740
显示什么呢

45:11.740 --> 45:12.740
显示probs里边

45:12.740 --> 45:14.740
march叫id

45:14.740 --> 45:16.740
march.id

45:16.740 --> 45:17.740
params

45:17.740 --> 45:19.740
march.params叫id

45:19.740 --> 45:20.740
好 咱们来看一下

45:20.740 --> 45:21.740
首先看一下

45:21.740 --> 45:22.740
它生成的路由配置

45:22.740 --> 45:24.740
路由配置里边

45:24.740 --> 45:25.740
我们的这个地方

45:25.740 --> 45:28.740
看一下那个

45:28.740 --> 45:29.740
你看

45:29.740 --> 45:30.740
它生成的路由配置

45:30.740 --> 45:31.740
是不是这个id

45:31.740 --> 45:32.740
那么为什么这里叫id

45:32.740 --> 45:33.740
是因为我们dolar

45:33.740 --> 45:34.740
后边跟着id

45:34.740 --> 45:35.740
它就叫id

45:35.740 --> 45:36.740
看到没

45:36.740 --> 45:38.740
它跟文件名是对应的

45:38.740 --> 45:39.740
看到没

45:39.740 --> 45:40.740
然后它匹配的主键

45:40.740 --> 45:42.740
是不是就读取相应的

45:42.740 --> 45:43.740
这个文件

45:43.740 --> 45:44.740
它的一边的主键

45:44.740 --> 45:45.740
把读取你出来放在这里

45:45.740 --> 45:46.740
就完事了

45:46.740 --> 45:48.740
它就做了这么一种匹配

45:48.740 --> 45:50.740
好 看一下吧

45:50.740 --> 45:52.740
我们在这里

45:52.740 --> 45:55.740
挑转到detail

45:55.740 --> 45:56.740
sub

45:56.740 --> 45:58.740
detail

45:58.740 --> 45:59.740
那么现在

45:59.740 --> 46:00.740
detail

46:00.740 --> 46:02.740
我们看一下

46:02.740 --> 46:05.740
detail

46:05.740 --> 46:06.740
对了

46:06.740 --> 46:07.740
那么现在

46:07.740 --> 46:08.740
我们这里的id

46:08.740 --> 46:09.740
是不是detail

46:09.740 --> 46:11.740
我这里好像还要建个detail文件夹

46:11.740 --> 46:12.740
对吧

46:12.740 --> 46:13.740
还要建个detail文件夹

46:13.740 --> 46:14.740
也可以不用建

46:14.740 --> 46:15.740
等一会来说吧

46:15.740 --> 46:16.740
那么这里写id

46:16.740 --> 46:17.740
比方说

46:17.740 --> 46:18.740
这里写id

46:18.740 --> 46:19.740
sub id

46:19.740 --> 46:20.740
是不是可以获取到了

46:20.740 --> 46:21.740
它是不是匹配到这个主键

46:21.740 --> 46:22.740
匹配到这个主键

46:22.740 --> 46:23.740
那么这个主键里面

46:23.740 --> 46:24.740
是不是可以把id获取到了

46:24.740 --> 46:25.740
对吧

46:25.740 --> 46:26.740
就这么简单

46:26.740 --> 46:27.740
它就把id

46:27.740 --> 46:29.740
传到march里边去了

46:29.740 --> 46:31.740
我们打印一下吧

46:31.740 --> 46:33.740
输出probs

46:33.740 --> 46:34.740
打印一下

46:34.740 --> 46:35.740
你看

46:35.740 --> 46:36.740
它这个march里边

46:36.740 --> 46:37.740
是不是parons id

46:37.740 --> 46:38.740
对吧

46:38.740 --> 46:39.740
因为这个文件名

46:39.740 --> 46:41.740
通过这个文件名就约定好了

46:41.740 --> 46:42.740
这个文件名就是id

46:42.740 --> 46:43.740
那如果说

46:43.740 --> 46:45.740
我想访问的是这样的一个地址

46:45.740 --> 46:47.740
比方说我们这要访问

46:47.740 --> 46:48.740
要访问的是detail

46:48.740 --> 46:49.740
后面写id

46:49.740 --> 46:50.740
那这个就怎么办了

46:50.740 --> 46:52.740
是不是你再建个文件夹就完事了

46:52.740 --> 46:54.740
一个时间的文件夹

46:54.740 --> 46:56.740
然后把这个id放进去

46:56.740 --> 46:57.740
对吧

46:57.740 --> 46:58.740
放到这里边去

46:58.740 --> 46:59.740
这是我们做法

46:59.740 --> 47:00.740
好

47:00.740 --> 47:01.740
那么这里

47:01.740 --> 47:02.740
我们这里

47:02.740 --> 47:04.740
要保存一下

47:04.740 --> 47:05.740
好

47:05.740 --> 47:07.740
这里重新生成了

47:08.740 --> 47:09.740
你看

47:09.740 --> 47:10.740
你看

47:10.740 --> 47:11.740
跑到这儿来了

47:11.740 --> 47:12.740
访问这个地址的时候

47:12.740 --> 47:13.740
id

47:13.740 --> 47:14.740
好

47:14.740 --> 47:15.740
这里刷新一下

47:16.740 --> 47:17.740
你看

47:17.740 --> 47:19.740
这要写detail了

47:23.740 --> 47:24.740
是不是写出来了

47:24.740 --> 47:25.740
对吧

47:25.740 --> 47:26.740
访问到了

47:26.740 --> 47:27.740
这是这种写法

47:27.740 --> 47:28.740
那如果说

47:28.740 --> 47:30.740
现在如果说放外面的话

47:30.740 --> 47:31.740
我们还有一种写法

47:31.740 --> 47:33.740
比方说我们前边

47:33.740 --> 47:34.740
比方说

47:34.740 --> 47:36.740
先把它放出来

47:38.740 --> 47:39.740
放出来

47:39.740 --> 47:40.740
好

47:40.740 --> 47:43.180
这里删掉

47:43.180 --> 47:44.180
然后我们在前面

47:44.180 --> 47:46.180
比方说再写一个detail

47:46.180 --> 47:47.180
看一下

47:47.180 --> 47:48.180
那么这东西是什么写法呢

47:48.180 --> 47:49.180
这东西是什么写法呢

47:49.180 --> 47:50.180
换不到右手

47:50.180 --> 47:52.180
我们看一下生成路由

47:52.180 --> 47:53.180
生成路由

47:53.180 --> 47:54.180
那么它就是这种写法

47:54.180 --> 47:56.180
那你这个玩意儿

47:56.180 --> 47:57.180
你这个玩意儿

47:57.180 --> 47:58.180
是不是就无效了

47:58.180 --> 47:59.180
它就是

47:59.180 --> 48:00.180
因为它识别不了这个玩意儿了

48:00.180 --> 48:01.180
如果说你真的要做

48:01.180 --> 48:02.180
这种操作的话

48:02.180 --> 48:04.180
你可能要自己单独写配置了

48:04.180 --> 48:05.180
它就生成这么一个玩意儿

48:05.180 --> 48:06.180
看没

48:06.180 --> 48:07.180
这个玩意儿是不是匹配不上了

48:07.180 --> 48:09.180
那你只能远方不动的匹配这个玩意儿

48:09.180 --> 48:11.180
这样子写是不行的

48:11.180 --> 48:13.180
就是多了一定要作为开始

48:13.180 --> 48:14.180
一定要作为开始

48:14.180 --> 48:15.180
好

48:15.180 --> 48:16.180
那如果说我们要做可选的呢

48:16.180 --> 48:18.180
就这个ID可以传可以不传

48:18.180 --> 48:19.180
比方说我们这里要做

48:19.180 --> 48:20.180
可以传可以不传

48:20.180 --> 48:21.180
那么就先俩

48:21.180 --> 48:23.180
后面加一个多了

48:23.180 --> 48:24.180
后面加一个多了

48:24.180 --> 48:25.180
就完成了

48:25.180 --> 48:26.180
好

48:26.180 --> 48:27.180
看一下

48:27.180 --> 48:29.180
那么这里我们

48:29.180 --> 48:31.180
比方说这个ID

48:31.180 --> 48:33.180
这里可以

48:33.180 --> 48:34.180
可以加这个

48:34.180 --> 48:35.180
那么可以不传

48:35.180 --> 48:36.180
当然不传的话

48:36.180 --> 48:37.180
就匹配到手页了

48:37.180 --> 48:38.180
匹配到手页了

48:38.180 --> 48:39.180
我们还是把它放到

48:39.180 --> 48:40.180
detail里面吧

48:42.180 --> 48:44.180
放到detail里面

48:44.180 --> 48:45.180
就看得清楚了

48:49.470 --> 48:50.470
好

48:50.470 --> 48:51.470
看一下

48:51.470 --> 48:52.470
里面的配置

48:52.470 --> 48:53.470
detail里面说

48:53.470 --> 48:54.470
ID还没加个问

48:54.470 --> 48:55.470
对不对

48:55.470 --> 48:56.470
你是可以不传的

48:56.470 --> 48:58.470
你是可以不传的

48:58.470 --> 48:59.470
那么现在放个detail

49:00.470 --> 49:01.470
好

49:01.470 --> 49:02.470
你写上可以

49:02.470 --> 49:03.470
你不写

49:03.470 --> 49:04.470
是不是也可以

49:04.470 --> 49:05.470
对吧

49:05.470 --> 49:06.470
也匹配到这个如今

49:06.470 --> 49:07.470
就是

49:07.470 --> 49:08.470
这是这种情况

49:08.470 --> 49:09.470
那如果说

49:09.470 --> 49:10.470
我们要匹配这样的地址

49:10.470 --> 49:11.470
如果我们要生成

49:11.470 --> 49:12.470
这样的路由怎么办

49:12.470 --> 49:13.470
比方说

49:13.470 --> 49:14.470
我们生成到

49:14.470 --> 49:15.470
sub

49:15.470 --> 49:16.470
下面的

49:16.470 --> 49:17.470
这样子

49:17.470 --> 49:18.470
name

49:18.470 --> 49:19.470
ID

49:19.470 --> 49:20.470
如果要生成

49:20.470 --> 49:21.470
这种东西

49:21.470 --> 49:22.470
要怎么办

49:22.470 --> 49:23.470
也简单

49:23.470 --> 49:24.470
也简单

49:24.470 --> 49:25.470
你这个玩意

49:25.470 --> 49:26.470
就形成一个文件夹

49:26.470 --> 49:27.470
这个呢

49:27.470 --> 49:28.470
形成文件名

49:28.470 --> 49:29.470
比方说

49:29.470 --> 49:30.470
我们这里

49:30.470 --> 49:31.470
写成那个

49:31.470 --> 49:32.470
写成多了

49:32.470 --> 49:33.470
name

49:33.470 --> 49:34.470
写成多了

49:34.470 --> 49:35.470
name

49:35.470 --> 49:36.470
这里写成多了

49:36.470 --> 49:37.470
ID

49:37.470 --> 49:38.470
多了ID

49:38.470 --> 49:39.470
那么现在我们看一下

49:39.470 --> 49:40.470
我们不仅输出ID

49:40.470 --> 49:41.470
我们再来输出一个

49:43.470 --> 49:44.470
前面再输出一个

49:45.470 --> 49:46.470
name

49:47.470 --> 49:48.470
prox

49:48.470 --> 49:49.470
march

49:53.470 --> 49:54.470
prox

49:54.470 --> 49:55.470
march

49:55.470 --> 49:56.470
parals

49:56.470 --> 49:57.470
name

49:58.470 --> 49:59.470
看一下

49:59.470 --> 50:00.470
保存

50:00.470 --> 50:01.470
你看

50:01.470 --> 50:02.470
看这里

50:02.470 --> 50:03.470
看这个rotor里面

50:03.470 --> 50:04.470
你看

50:04.470 --> 50:06.470
这里形成的结果

50:06.470 --> 50:08.470
我这里又要重新关键

50:08.470 --> 50:11.470
因为它每变化一下代码

50:11.470 --> 50:12.470
或者是变化一下结构

50:12.470 --> 50:14.470
它都会重新生成这个东西

50:14.470 --> 50:15.470
你看一下

50:15.470 --> 50:16.470
name

50:16.470 --> 50:17.470
ID

50:17.470 --> 50:18.470
说是形成这种结构了

50:18.470 --> 50:19.470
咱们来看一下

50:19.470 --> 50:20.470
这里呢

50:20.470 --> 50:21.470
我们随便写个

50:21.470 --> 50:22.470
再随便写个

50:23.470 --> 50:24.470
你看

50:24.470 --> 50:25.470
是不是name

50:25.470 --> 50:26.470
这一块也获取到了

50:26.470 --> 50:27.470
ID这一块也获取到了

50:27.470 --> 50:28.470
对吧

50:28.470 --> 50:29.470
就非常非常地简单

50:29.470 --> 50:30.470
那么现在呢

50:30.470 --> 50:31.470
我们就不用去配置

50:31.470 --> 50:32.470
这些路有乱七八糟的东西了

50:32.470 --> 50:33.470
绝大部分时候

50:33.470 --> 50:34.470
它的约定

50:34.470 --> 50:35.470
这种约定

50:35.470 --> 50:36.470
就完全够用了

50:36.470 --> 50:37.470
完全跟我们使用了

50:38.470 --> 50:39.470
好了

50:39.470 --> 50:42.470
这就是关于约定式路由

50:42.470 --> 50:43.470
如何来处理

50:44.470 --> 50:45.470
约定式路由

50:45.470 --> 50:46.470
其实还有一些东西

50:46.470 --> 50:47.470
但是那些东西

50:47.470 --> 50:48.470
我们到下节课

50:48.470 --> 50:50.470
配合那个配置式路由

50:50.470 --> 50:51.470
来一起来讲

50:51.470 --> 50:52.470
比方说路由

50:52.470 --> 50:53.470
还有设计到全线

50:53.470 --> 50:54.470
你能登

50:54.470 --> 50:55.470
登录了过后能否访问

50:55.470 --> 50:56.470
什么页面

50:56.470 --> 50:57.470
没有登录又能访问

50:57.470 --> 50:58.470
什么页面对吧

50:58.470 --> 50:59.470
还可能会设计到

50:59.470 --> 51:00.470
全线的控制

51:00.470 --> 51:01.470
那么我们下节课

51:01.470 --> 51:02.470
来统一讲

51:02.470 --> 51:03.470
在配置式路由内地

51:03.470 --> 51:04.470
讲了过后来

51:04.470 --> 51:07.470
再扩展一些约定式路由的东西

51:07.470 --> 51:08.470
好了

51:08.470 --> 51:09.470
约定式路由就这么一些东西了

51:09.470 --> 51:11.470
其实也非常方便

51:11.470 --> 51:12.470
也很好理解

51:12.470 --> 51:13.470
每个点都很好理解

51:13.470 --> 51:15.470
大家下去练习一下

51:15.470 --> 51:17.470
因为这个东西很简单

51:17.470 --> 51:18.470
但是练习一下

51:18.470 --> 51:19.470
加生产印象

