WEBVTT

00:00.940 --> 00:05.940
接下来我会简陆续的讲几个hook

00:05.940 --> 00:10.940
一节课可能就那么十来分钟或者是几分钟时间啊

00:10.940 --> 00:13.940
非常短 因为这些hook都非常非常简单

00:13.940 --> 00:16.940
这节课咱们来看一下这个hook

00:16.940 --> 00:18.940
这个叫做contact hook

00:18.940 --> 00:19.940
其实hook这一块啊

00:19.940 --> 00:24.940
你只要能够学习的就是那个statthook

00:24.940 --> 00:26.940
以及呢

00:26.940 --> 00:28.940
affect hook

00:28.940 --> 00:30.940
那么已经制定hook

00:30.940 --> 00:31.940
那么这些学习到之后呢

00:31.940 --> 00:33.940
其实绝大部分情况你都可以搞定的啊

00:33.940 --> 00:35.940
后边的几个hook呢

00:35.940 --> 00:37.940
还是有用 肯定是有用的

00:37.940 --> 00:39.940
只是它非常简单

00:39.940 --> 00:40.940
我们几句话就说清楚了

00:40.940 --> 00:42.940
好 第一个呢是contact hook

00:42.940 --> 00:43.940
这个hook用于干嘛呢

00:43.940 --> 00:45.940
它是用于获取

00:45.940 --> 00:49.940
获取上下文数据的

00:49.940 --> 00:53.940
我们之前讲过rex里边一个上下文对吧

00:53.940 --> 00:55.940
上下文的建议呢

00:55.940 --> 00:57.940
我们是使用create context

00:57.940 --> 00:59.940
对吧 我们举个例子吧

00:59.940 --> 01:01.940
来吧 直接来个例子

01:01.940 --> 01:03.940
这里呢 比方说app

01:03.940 --> 01:05.940
app它创建一个上下文

01:05.940 --> 01:06.940
好 来吧

01:06.940 --> 01:09.940
我们这里写上这么一个辩量

01:09.940 --> 01:11.940
react

01:11.940 --> 01:13.940
create context

01:13.940 --> 01:15.940
创建这么一个上下文

01:15.940 --> 01:18.940
默认值 默认值 没有没有没有

01:18.940 --> 01:19.940
没有默认值

01:19.940 --> 01:21.940
然后呢 这里边呢

01:21.940 --> 01:22.940
app里边呢

01:22.940 --> 01:24.940
我们给它写上这么一个东西

01:25.940 --> 01:26.940
大家还记不记得

01:26.940 --> 01:28.940
上下文这么写的

01:28.940 --> 01:30.940
然后呢 把b6值给它

01:30.940 --> 01:32.940
就是把我们的上下文的值给它

01:32.940 --> 01:33.940
比方说abc嘛

01:33.940 --> 01:35.940
就随便下给一个 无所谓

01:35.940 --> 01:37.940
无所谓

01:37.940 --> 01:38.940
然后呢 这里边呢

01:38.940 --> 01:39.940
写上一个组件

01:39.940 --> 01:41.940
比方说我们下面还有一个组件

01:41.940 --> 01:43.940
这个组件呢 来自于

01:43.940 --> 01:45.940
比方test嘛

01:45.940 --> 01:47.940
几句话就说清楚了

01:47.940 --> 01:50.940
htest

01:50.940 --> 01:52.940
然后上下文的值

01:52.940 --> 01:55.940
上下文的值是啥 以前咋写的

01:55.940 --> 01:57.940
以前咋写的 在函数组件里面

01:57.940 --> 01:59.940
要使用上下文的值 咋写的

01:59.940 --> 02:00.940
还记得嘛 兄弟们

02:00.940 --> 02:02.940
是不是应该这样子啊

02:02.940 --> 02:05.940
setx consumer对吧

02:05.940 --> 02:07.940
我们使用这个上下文的

02:07.940 --> 02:08.940
我们是这个上下文的消费者

02:08.940 --> 02:10.940
我们要消费它里边的数据

02:10.940 --> 02:12.940
然后这里边写啥 是不是写个函数

02:12.940 --> 02:14.940
对吧 写个函数

02:14.940 --> 02:16.940
哎 这个函数返回啥

02:16.940 --> 02:18.940
返回一个he

02:18.940 --> 02:20.940
上下文的值 上下文的值是啥

02:20.940 --> 02:22.940
来自于这个value

02:22.940 --> 02:24.940
别忘了 之前写的东西

02:24.940 --> 02:26.940
好 那么这里边写上什么

02:26.940 --> 02:28.940
test

02:28.940 --> 02:30.940
test

02:30.940 --> 02:31.940
好 保存

02:31.940 --> 02:33.940
好 看一下吧

02:33.940 --> 02:34.940
上下文的值abc是不达到了

02:34.940 --> 02:36.940
对吧 就这么简单

02:36.940 --> 02:37.940
但这样子一来呢

02:37.940 --> 02:38.940
react总觉得不太舒服

02:38.940 --> 02:40.940
我觉得react里边的

02:40.940 --> 02:42.940
很多开发者也是强迫症

02:42.940 --> 02:43.940
他认为呢 这样子呢

02:43.940 --> 02:45.940
你又给他多掏了一个组件

02:45.940 --> 02:47.940
对吧 掏了一个什么

02:47.940 --> 02:48.940
context consumer

02:48.940 --> 02:51.940
他希望了尽量少的去嵌套组件

02:51.940 --> 02:53.940
他出了这个后果的其中一个目的

02:53.940 --> 02:55.940
当然他目的有很多

02:55.940 --> 02:57.940
有什么可以把这些状态啊

02:57.940 --> 03:00.940
副作用啊全部分离出去对吧

03:00.940 --> 03:02.940
形成一个普通函数

03:02.940 --> 03:04.940
另外呢 他还有个目的就是

03:04.940 --> 03:07.940
尽量想少的去减上这种嵌套

03:07.940 --> 03:09.940
因为很多时候嵌套是来自于

03:09.940 --> 03:10.940
高阶组件啊

03:10.940 --> 03:11.940
或者是一些内置的组件

03:11.940 --> 03:13.940
比方说像这种组件

03:13.940 --> 03:15.940
他尽量少的去减上这种

03:15.940 --> 03:18.940
就是尽量少的发生嵌套

03:18.940 --> 03:20.940
让我们的组件结构呢

03:20.940 --> 03:22.940
更加的减结合纯净

03:22.940 --> 03:24.940
这是rex他的总体思路

03:24.940 --> 03:25.940
呃 这样子呢

03:25.940 --> 03:26.940
我们以前的那种做法呢

03:26.940 --> 03:28.940
当然没有什么问题

03:28.940 --> 03:29.940
只不过呢 这种做法呢

03:29.940 --> 03:31.940
呃 还有嵌套很多

03:31.940 --> 03:32.940
比方说有多个组件

03:32.940 --> 03:33.940
他提供了上下文

03:33.940 --> 03:34.940
我们这里是不是还要嵌套

03:34.940 --> 03:35.940
concumer对吧

03:35.940 --> 03:37.940
来自于不同上下文的concumer

03:37.940 --> 03:38.940
这样就很麻烦啊

03:38.940 --> 03:39.940
一是麻烦了

03:39.940 --> 03:40.940
二是呢 他增加了

03:40.940 --> 03:42.940
这个组件的层次结构

03:42.940 --> 03:44.940
于是呢 他现在提供了一种新的方式

03:44.940 --> 03:46.940
在函数组件里边

03:46.940 --> 03:47.940
也可以用新的方式

03:47.940 --> 03:48.940
来实现上下文

03:48.940 --> 03:49.940
更加的减结

03:49.940 --> 03:50.940
什么方式呢

03:50.940 --> 03:51.940
就是使用这个

03:52.940 --> 03:54.940
use context

03:54.940 --> 03:55.940
就这么简单

03:55.940 --> 03:57.940
有多复杂呢

03:57.940 --> 03:58.940
好 怎么来用呢

03:58.940 --> 03:59.940
use context

03:59.940 --> 04:00.940
你把上下文传给他

04:00.940 --> 04:02.940
完了 这样吧

04:02.940 --> 04:04.940
把这个注射掉

04:04.940 --> 04:05.940
好 下面来

04:05.940 --> 04:07.940
重新创建一个啊

04:07.940 --> 04:08.940
那么这样

04:08.940 --> 04:09.940
这里呢

04:09.940 --> 04:11.940
我们可以使用use context

04:11.940 --> 04:13.940
把上下文对象传给他

04:13.940 --> 04:15.940
他直接就给你返回上下文的职了

04:16.940 --> 04:18.940
直接给你返回上下文的职了

04:18.940 --> 04:19.940
好 value

04:19.940 --> 04:20.940
那你这里直接用就完了

04:20.940 --> 04:21.940
就这么简单

04:28.940 --> 04:29.940
直接这样用 完了

04:29.940 --> 04:30.940
没了

04:30.940 --> 04:32.940
这就是use context

04:32.940 --> 04:34.940
保存你看一下吧

04:34.940 --> 04:35.940
你看一下是不是拿到了

04:35.940 --> 04:36.940
对不对

04:36.940 --> 04:38.940
咱们再看这个组件结构

04:38.940 --> 04:39.940
这个组件结构里边

04:39.940 --> 04:40.940
是不是非常干净了

04:40.940 --> 04:41.940
现在

04:41.940 --> 04:42.940
是不是非常干净了

04:42.940 --> 04:44.940
好 咱们来选中这个

04:49.940 --> 04:50.940
跑了去了

04:51.940 --> 04:52.940
跑了去了

04:52.940 --> 04:55.700
连续

04:55.700 --> 04:56.700
跑了去了

04:57.700 --> 04:58.700
就是test

04:58.700 --> 04:59.700
这个组件

04:59.700 --> 05:00.700
这个组件

05:00.700 --> 05:02.700
他里边是不是就使用了这个hook

05:02.700 --> 05:03.700
对吧 使用这个hook

05:03.700 --> 05:05.700
这个hook里边提供了上下文

05:05.700 --> 05:07.700
从这个上下文里边

05:07.700 --> 05:08.700
豁去到了这个字

05:08.700 --> 05:09.700
就这么简单 没了

05:09.700 --> 05:10.700
没了

05:10.700 --> 05:11.700
这就是这里和讲的内容

05:11.700 --> 05:12.700
就是非常简单

05:12.700 --> 05:13.700
是非常简单

05:13.700 --> 05:14.700
没有啥别的用法了

05:14.700 --> 05:16.700
就直接把上下文拿过来就完了

05:18.700 --> 05:20.700
那么如果你要获取多个上下文的纸

05:20.700 --> 05:22.700
如果你要获取多个怎么办

05:22.700 --> 05:23.700
那是不是再来一句

05:23.700 --> 05:24.700
再来一句use context

05:24.700 --> 05:25.700
来自于另外一个上下文的纸

05:25.700 --> 05:26.700
对吧

05:26.700 --> 05:27.700
给它取不同的变量名

05:27.700 --> 05:28.700
直接用就行了

05:28.700 --> 05:30.700
这样子就减少了组件的牵套

05:30.700 --> 05:31.700
然而这里

05:31.700 --> 05:32.700
其实还是多了一个牵套

05:32.700 --> 05:33.700
就是这个provider

05:33.700 --> 05:35.700
目前rex

05:35.700 --> 05:36.700
他还没有打算

05:36.700 --> 05:38.700
对这个下毒手

05:38.700 --> 05:40.700
目前还没有打算

05:40.700 --> 05:41.700
将来他说不定

05:41.700 --> 05:42.700
说不准

05:42.700 --> 05:43.700
说不准

05:43.700 --> 05:44.700
他就有这个打算了

05:44.700 --> 05:46.700
可能对他要下毒手了

05:46.700 --> 05:49.700
尽量的保持组件结构的纯净

05:49.700 --> 05:50.700
和简单

05:50.700 --> 05:51.700
这是rex

05:51.700 --> 05:54.700
一直致力于的操作

05:54.700 --> 05:55.700
没了

05:55.700 --> 05:56.700
这就是use context

