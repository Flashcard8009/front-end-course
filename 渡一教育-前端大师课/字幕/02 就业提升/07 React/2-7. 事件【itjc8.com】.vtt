WEBVTT

00:00.430 --> 00:04.030
这些可能咱们来学习 组建的试渐

00:04.030 --> 00:07.430
试渐这一块学习完的话

00:07.430 --> 00:09.430
咱们很多东西都可以做了

00:09.430 --> 00:11.430
很多丰富的效果都可以做了

00:11.430 --> 00:16.230
在react里边 试渐的本质是什么玩意儿呢

00:16.230 --> 00:17.430
其实非常非常简单

00:17.430 --> 00:19.430
其实之前我讲课的时候

00:19.430 --> 00:21.430
很多时候话到嘴边

00:21.430 --> 00:23.430
我没把它说出来 对吧

00:23.430 --> 00:26.430
其实试渐真的真的非常简单

00:26.430 --> 00:28.430
在react中

00:29.430 --> 00:31.430
在react中

00:31.430 --> 00:33.430
组建的试渐

00:33.430 --> 00:37.430
本质上就是一个函数

00:37.430 --> 00:39.430
仅仅是一个函数

00:39.430 --> 00:42.430
本质上就是一个属性而已

00:42.430 --> 00:44.430
就是一个属性

00:44.430 --> 00:47.430
比方说吧 咱们来举个例子

00:47.430 --> 00:50.430
我这里有这么一个

00:50.430 --> 00:52.430
就是index这个介石里边

00:52.430 --> 00:56.430
我们比方说写这么一个button

00:57.430 --> 00:59.430
这么一个按钮 点击过

00:59.430 --> 01:00.430
点击过后呢

01:00.430 --> 01:03.430
我们希望弹出一个东西

01:03.430 --> 01:05.430
首先问大家一个问题

01:05.430 --> 01:06.430
我这样吧

01:06.430 --> 01:08.430
我把这个玩意儿放到这

01:08.430 --> 01:10.430
放到这 btn

01:10.430 --> 01:13.430
然后这里把这个东西放过来

01:13.430 --> 01:15.430
比方说

01:15.430 --> 01:16.430
问大家一个问题

01:16.430 --> 01:18.430
这个btn

01:18.430 --> 01:22.430
他给我抱他错了

01:22.430 --> 01:24.430
他给我抱他错了

01:24.430 --> 01:26.430
这什么东西

01:26.430 --> 01:30.450
关了重新打开

01:30.450 --> 01:32.450
这个东西

01:32.450 --> 01:34.450
这啥意思

01:34.450 --> 01:37.450
这玩意儿给我抱什么错了

01:37.450 --> 01:42.810
哎呀

01:42.810 --> 01:44.810
这个东西见鬼了

01:44.810 --> 01:45.810
我把这个打开看一下

01:45.810 --> 01:47.810
外观 状态

01:50.810 --> 01:55.140
没问题

01:55.140 --> 01:57.140
没问题

01:57.140 --> 01:58.140
抱什么错了

01:58.140 --> 02:01.780
我这句话把他去了

02:01.780 --> 02:06.240
还在抱错

02:06.240 --> 02:08.240
还在抱错

02:08.240 --> 02:10.240
重新打开

02:10.240 --> 02:13.240
建一个index的介石

02:13.240 --> 02:15.240
怎么抱错了吧

02:15.240 --> 02:17.240
来吧

02:17.240 --> 02:19.240
r

02:19.240 --> 02:20.240
inputs

02:20.240 --> 02:22.240
r

02:22.240 --> 02:23.240
m

02:23.240 --> 02:24.240
不对

02:24.240 --> 02:25.240
r

02:26.240 --> 02:27.240
然后呢

02:27.240 --> 02:30.240
我们这里写上一个const

02:30.240 --> 02:31.240
btn

02:31.240 --> 02:33.240
button

02:33.240 --> 02:35.240
点击

02:35.240 --> 02:37.240
然后下面写上一个document

02:37.240 --> 02:39.240
react

02:39.240 --> 02:41.240
react

02:41.240 --> 02:43.240
dont

02:43.240 --> 02:45.240
reender

02:45.240 --> 02:47.240
reender

02:47.240 --> 02:49.240
这里呢btn

02:49.240 --> 02:51.240
document

02:51.240 --> 02:53.240
这种感觉怪怪的

02:53.240 --> 02:54.240
这里写个分号嘛

02:54.240 --> 02:56.240
这种感觉怪怪的

02:56.240 --> 02:57.240
get

02:57.240 --> 02:59.240
anyment

02:59.240 --> 03:01.240
by id

03:02.240 --> 03:04.240
root

03:04.240 --> 03:05.240
保存

03:05.240 --> 03:06.240
看一下

03:06.240 --> 03:08.240
运行出来没问题啊

03:08.240 --> 03:09.240
没问题啊

03:09.240 --> 03:10.240
一个按钮啊看没

03:10.240 --> 03:11.240
好 现在呢

03:11.240 --> 03:13.240
我们这个按钮注册事件

03:13.240 --> 03:15.240
但是呢你不能想象成为

03:15.240 --> 03:17.240
这个东西呢

03:17.240 --> 03:18.240
它是一个

03:18.240 --> 03:19.240
你不能把它想象成为

03:19.240 --> 03:21.240
就是atm的事件

03:21.240 --> 03:23.240
在react里边呢

03:23.240 --> 03:25.240
这个东西本质上是啥呢

03:25.240 --> 03:26.240
我们之前说过啊

03:26.240 --> 03:28.240
哪怕你写的是一个react

03:28.240 --> 03:29.240
普通的react元素

03:29.240 --> 03:31.240
它的本质上呢也是一个组件

03:31.240 --> 03:32.240
也是一个组件

03:32.240 --> 03:34.240
只不过呢是内置的组件

03:34.240 --> 03:35.240
给你写好了的

03:35.240 --> 03:36.240
你直接用就行了

03:36.240 --> 03:37.240
这样的组件呢

03:37.240 --> 03:40.240
它是以小写字母开头的

03:40.240 --> 03:42.240
instagram你可以直接使用

03:42.240 --> 03:43.240
好 那么这里呢

03:43.240 --> 03:45.240
我就写上一个事件

03:45.240 --> 03:46.240
你看一下比方说

03:46.240 --> 03:47.240
我这里写个id

03:47.240 --> 03:49.240
那这个id是不是属像

03:49.240 --> 03:51.240
对吧 它肯定是属像吗

03:51.240 --> 03:52.240
有什么问题呢

03:52.240 --> 03:53.240
它肯定是一个属像

03:53.240 --> 03:54.240
那么比方说

03:54.240 --> 03:56.240
我们在这里写一个onclick

03:56.240 --> 03:57.240
那这个东西是不是属像

03:57.240 --> 03:58.240
它也是一个属像

03:58.240 --> 03:59.240
凭什么不是属像呢

03:59.240 --> 04:01.240
应该写法是完全一样的

04:01.240 --> 04:02.240
只不过呢

04:02.240 --> 04:03.240
这个属像呢

04:03.240 --> 04:04.240
传递的是啥呢

04:04.240 --> 04:06.240
传递的是一个函数

04:06.240 --> 04:08.240
传递的是一个函数

04:08.240 --> 04:10.240
仅此而已

04:10.240 --> 04:11.240
所以说这个东西

04:11.240 --> 04:13.240
跟之前学习的东西有啥区别呢

04:13.240 --> 04:14.240
我们之前说过

04:14.240 --> 04:16.240
属性可以传递任何东西

04:16.240 --> 04:17.240
可以传一个字符圈

04:17.240 --> 04:18.240
可以传一个对象

04:18.240 --> 04:21.240
可以传一个react元素

04:21.240 --> 04:23.240
当然也可以传一个函数

04:23.240 --> 04:25.240
函数不就是本质上就是对象吗

04:25.240 --> 04:27.240
当然可以传一个函数

04:27.240 --> 04:28.240
只不过大家注意一下

04:28.240 --> 04:30.240
就是这个属性的名字

04:30.240 --> 04:32.240
就是这些内置的组件

04:32.240 --> 04:34.240
就是我们可以把它认为

04:34.240 --> 04:35.240
是atm组件

04:35.240 --> 04:36.240
是atm

04:36.240 --> 04:38.240
它最终会生成atm元素

04:38.240 --> 04:40.240
最终会生成atm元素

04:40.240 --> 04:42.240
我们可以把它认为是atm组件

04:42.240 --> 04:45.240
那么这个atm组件里边的事件呢

04:45.240 --> 04:46.240
它的名字呢

04:46.240 --> 04:48.240
要用小陀封密名法

04:48.240 --> 04:50.240
它跟那个动物对象里边

04:50.240 --> 04:52.240
就是真实的动物对象里边

04:52.240 --> 04:53.240
那个事件呢

04:53.240 --> 04:55.240
感觉上是一致的

04:55.240 --> 04:56.240
感觉上

04:56.240 --> 04:57.240
所以真实动物里边

04:57.240 --> 04:58.240
它有事件

04:58.240 --> 04:59.240
它是小写的对不对

04:59.240 --> 05:00.240
那这边呢

05:00.240 --> 05:02.240
必须要使用小陀封密名法

05:02.240 --> 05:04.240
必须要使用小陀封密名法

05:04.240 --> 05:05.240
这个大家注意一下

05:05.240 --> 05:07.240
就是说我们这里

05:08.240 --> 05:14.240
按照之前react对组件的约定

05:15.240 --> 05:20.240
由于事件本质上是一个属性

05:20.240 --> 05:25.240
因此也需要使用小陀封密名法

05:25.240 --> 05:26.240
这个没问题吧

05:26.240 --> 05:28.240
因为组件本质上就是一个属性

05:28.240 --> 05:30.240
所以它是要使用小陀封密名法

05:30.240 --> 05:31.240
那么这个地方要传什么

05:31.240 --> 05:32.240
传一个函数

05:32.240 --> 05:34.240
那这个函数传递方式

05:34.240 --> 05:35.240
是不是有很多

05:35.240 --> 05:36.240
比方说我们这里呢

05:36.240 --> 05:37.240
写一个函数

05:37.240 --> 05:38.240
给大家取个名字

05:38.240 --> 05:40.240
handleclick

05:40.240 --> 05:42.240
表示一个函数

05:42.240 --> 05:43.240
那么这个函数里边呢

05:43.240 --> 05:47.240
我们就Consologue吧

05:49.240 --> 05:50.240
点击了

05:50.240 --> 05:51.240
比方说

05:51.240 --> 05:53.240
我们输出这个东西

05:53.240 --> 05:54.240
那么这里呢

05:54.240 --> 05:55.240
传这个函数就完事了

05:55.240 --> 05:57.240
handleclick对不对

05:57.240 --> 05:58.240
就完事了

05:58.240 --> 05:59.240
咱们来试一下吧

05:59.240 --> 06:00.240
保存

06:00.240 --> 06:02.240
这里右键检查

06:02.240 --> 06:03.240
看一下点击

06:03.240 --> 06:04.240
你看一下

06:04.240 --> 06:05.240
是不是下面显示出来了

06:05.240 --> 06:06.240
对吧

06:06.240 --> 06:07.240
就显示出来了

06:07.240 --> 06:08.240
没问题吧

06:08.240 --> 06:10.240
这就是一个事件

06:10.240 --> 06:11.240
非常非常简单

06:11.240 --> 06:12.240
或者呢

06:12.240 --> 06:14.240
你可以也可以把这个东西呢

06:14.240 --> 06:15.240
写到哪呢

06:15.240 --> 06:16.240
写到这

06:17.240 --> 06:20.240
在这里写一个匿名函数

06:20.240 --> 06:21.240
写个匿名函数

06:21.240 --> 06:23.240
我们这里使用那个

06:25.240 --> 06:26.240
箭头函数

06:26.240 --> 06:28.240
那么这里呢

06:28.240 --> 06:30.240
也可以注册事件

06:30.240 --> 06:31.240
点击了

06:31.240 --> 06:33.240
没有什么特别的

06:33.240 --> 06:34.240
它就是一个普通的属性

06:34.240 --> 06:35.240
只不过传递的

06:35.240 --> 06:37.240
是一个函数而已

06:37.240 --> 06:38.240
你看

06:38.240 --> 06:39.240
是不是也是一样的

06:39.240 --> 06:40.240
好

06:40.240 --> 06:41.240
另外呢

06:41.240 --> 06:42.240
我们在

06:42.240 --> 06:44.240
就是ATM组建里边呢

06:44.240 --> 06:45.240
就是像这种

06:45.240 --> 06:46.240
内置的组建里边

06:46.240 --> 06:48.240
因为它会对应到ATM元素

06:48.240 --> 06:49.240
因此呢

06:49.240 --> 06:50.240
它里边的事件

06:50.240 --> 06:52.240
以前学的ATM里边的事件呢

06:52.240 --> 06:53.240
是保持对应的

06:53.240 --> 06:55.240
比方说属标移入的事件

06:55.240 --> 06:56.240
用什么

06:56.240 --> 06:57.240
啊

06:57.240 --> 06:58.240
mouse

06:58.240 --> 06:59.240
啊

06:59.240 --> 07:00.240
inter

07:00.240 --> 07:01.240
对吧

07:01.240 --> 07:02.240
小陀封命运法

07:02.240 --> 07:04.240
都是用小陀封命运法

07:04.240 --> 07:05.240
那么这个事件里边

07:05.240 --> 07:06.240
我们

07:06.240 --> 07:07.240
输出啊

07:07.240 --> 07:09.240
属标移入了

07:09.240 --> 07:10.240
啊

07:10.240 --> 07:11.240
属标移入了

07:11.240 --> 07:12.240
看一下

07:12.240 --> 07:13.240
啊

07:13.240 --> 07:14.240
看一下

07:14.240 --> 07:16.240
下面是不是有显示

07:16.240 --> 07:17.240
对吧

07:17.240 --> 07:18.240
有显示

07:18.240 --> 07:19.240
其实是一样的

07:19.240 --> 07:20.240
以前我们学的动物事件里边

07:20.240 --> 07:21.240
的事件呢

07:21.240 --> 07:22.240
是一对应的

07:22.240 --> 07:23.240
只不过呢

07:23.240 --> 07:25.240
它终成了小陀封命运法

07:25.240 --> 07:26.240
然后呢

07:26.240 --> 07:27.240
你的传的是什么

07:27.240 --> 07:28.240
传的不是寒宿调用啊

07:28.240 --> 07:30.240
传的就是一个寒宿本身

07:30.240 --> 07:32.240
把寒宿本身传进去玩事

07:32.240 --> 07:34.240
那有的时候呢

07:34.240 --> 07:36.240
我们可能希望用到事件的参数

07:36.240 --> 07:37.240
因为我们知道在ATM里边

07:37.240 --> 07:39.240
它有一个事件参数

07:39.240 --> 07:41.240
我们可能会从事件参数里边呢

07:41.240 --> 07:43.240
获取到事件的一些相关信息

07:43.240 --> 07:45.240
那么这个事件参数怎么玩呢

07:45.240 --> 07:46.240
这个事件参数

07:46.240 --> 07:47.240
不就是一个参数

07:47.240 --> 07:48.240
一吗

07:48.240 --> 07:49.240
或者是event

07:49.240 --> 07:50.240
对不对

07:50.240 --> 07:52.240
它会自动的把这个参数给你传进来

07:52.240 --> 07:53.240
当触发事件的时候

07:53.240 --> 07:55.240
它会自动传递这个传输进来

07:55.240 --> 07:56.240
那ok

07:56.240 --> 07:57.240
我们这里输出一下

07:57.240 --> 07:58.240
这个一参数一

07:58.240 --> 08:00.240
看一下能不能得到结果

08:00.240 --> 08:01.240
保存

08:01.240 --> 08:02.240
你看一下

08:02.240 --> 08:03.240
是不是能得到结果

08:03.240 --> 08:04.240
对吧

08:04.240 --> 08:06.240
那这个东西跟我们以前学习的

08:06.240 --> 08:07.240
一个动物对象里面的参数

08:07.240 --> 08:08.240
是完全一致的

08:08.240 --> 08:09.240
就是那个东西

08:09.240 --> 08:10.240
就是那个参数

08:10.240 --> 08:12.240
它会把这个参数给你传进来

08:12.240 --> 08:13.240
你看这意思吧

08:13.240 --> 08:15.240
包括如果你写了一个

08:15.240 --> 08:16.240
额外的函数

08:16.240 --> 08:17.240
额外的函数

08:17.240 --> 08:18.240
那么这里

08:18.240 --> 08:19.240
比方说我们把这一块

08:19.240 --> 08:20.240
这一块注释掉

08:20.240 --> 08:23.240
不对

08:23.240 --> 08:24.240
这一块

08:24.240 --> 08:26.240
handle click

08:26.240 --> 08:27.240
那么这个函数里面

08:27.240 --> 08:28.240
是不是也可以

08:28.240 --> 08:29.240
也可以接受一个参数

08:29.240 --> 08:30.240
它会自动的把这个

08:30.240 --> 08:31.240
传输给你传进来

08:31.240 --> 08:33.240
保存

08:33.240 --> 08:34.240
看一下吧

08:34.240 --> 08:36.240
点击

08:36.240 --> 08:37.240
你看一下

08:37.240 --> 08:38.240
点击过后呢

08:38.240 --> 08:39.240
是不是也有这个参数

08:39.240 --> 08:40.240
对吧

08:40.240 --> 08:41.240
也有这个事件参数

08:41.240 --> 08:42.240
所以说我们可以通过

08:42.240 --> 08:43.240
这个事件参数呢

08:43.240 --> 08:44.240
比方说你要阻止

08:44.240 --> 08:45.240
默认行为

08:45.240 --> 08:46.240
那么就可以通过这个

08:46.240 --> 08:48.240
事件参数来进行完成

08:48.240 --> 08:50.240
通过这个事件参数完成

08:50.240 --> 08:51.240
就完了对不对

08:51.240 --> 08:54.240
这个事件非常非常简单

08:54.240 --> 08:55.240
这里呢

08:55.240 --> 08:56.240
我们刚才说的是什么

08:56.240 --> 08:58.240
是那些内置组件

08:58.240 --> 08:59.240
就是它会跟

08:59.240 --> 09:02.240
atm元素对应的组件

09:02.240 --> 09:03.240
它的事件

09:03.240 --> 09:04.240
那如果是

09:04.240 --> 09:07.240
我们自定义的组件呢

09:07.240 --> 09:08.240
如果是我们自定义的

09:08.240 --> 09:10.240
组件怎么办呢

09:10.240 --> 09:11.240
好

09:11.240 --> 09:12.240
那么我们接下来说一下

09:12.240 --> 09:14.240
就是我们自己的组件

09:14.240 --> 09:16.240
如何来设置事件

09:16.240 --> 09:18.240
其实本质道理是一样的

09:18.240 --> 09:19.240
你一定要清楚啊

09:19.240 --> 09:21.240
组世界的本质

09:21.240 --> 09:22.240
它就是很

09:22.240 --> 09:23.240
就是属性

09:23.240 --> 09:24.240
没有别的东西了

09:24.240 --> 09:26.240
就是一个属性

09:26.240 --> 09:28.240
比方说吧

09:28.240 --> 09:30.240
我们这里呢新建个文件

09:30.240 --> 09:31.240
新建个文件

09:31.240 --> 09:35.240
这里呢写上一个

09:35.240 --> 09:38.240
my funk

09:38.240 --> 09:40.240
也class嘛

09:40.240 --> 09:41.240
my comp

09:41.240 --> 09:42.240
就是我自己的一个组件

09:42.240 --> 09:43.240
然后呢这里呢

09:43.240 --> 09:45.240
我写上一个内组件

09:45.240 --> 09:46.240
一个内组件

09:46.240 --> 09:47.240
这个组件里边呢

09:47.240 --> 09:49.240
比方说

09:49.240 --> 09:51.240
我们做这么一个事吧

09:51.240 --> 09:53.240
这里一个atm元素

09:53.240 --> 09:54.240
atm元素

09:54.240 --> 09:55.240
这里呢

09:55.240 --> 09:57.240
一个就是倒计时

09:57.240 --> 09:58.240
之前做过的对吧

09:58.240 --> 09:59.240
做过的

09:59.240 --> 10:00.240
倒计时

10:00.240 --> 10:01.240
时间来自于哪

10:01.240 --> 10:02.240
我这就快速写了

10:02.240 --> 10:03.240
时间来自于哪呢

10:03.240 --> 10:04.240
来自于就是

10:04.240 --> 10:06.240
状态里边的浪板

10:06.240 --> 10:08.240
然后倒计时60秒

10:08.240 --> 10:09.240
倒计时60秒

10:09.240 --> 10:12.240
这里我们写个constructor

10:12.240 --> 10:17.190
constructor

10:17.190 --> 10:19.190
super

10:19.190 --> 10:21.190
初始化一下状态

10:21.190 --> 10:22.190
状态呢

10:22.190 --> 10:23.190
就是那个number呢

10:23.190 --> 10:24.190
一开始呢

10:24.190 --> 10:26.190
为这个属性里边的指

10:26.190 --> 10:28.190
属性里边的number

10:28.190 --> 10:29.190
然后呢

10:29.190 --> 10:30.190
启动一个计时器

10:30.190 --> 10:31.190
来倒计时

10:31.190 --> 10:33.190
consttimer

10:33.190 --> 10:34.190
启动一个计时器

10:34.190 --> 10:36.190
set interval

10:36.190 --> 10:38.190
每个一秒钟

10:38.190 --> 10:39.190
每个一秒钟干嘛呢

10:39.190 --> 10:41.190
我要重新设置这个状态

10:41.190 --> 10:43.190
set

10:43.190 --> 10:45.190
set

10:45.190 --> 10:47.190
重新设置状态

10:47.190 --> 10:48.190
这个状态的新的值呢

10:48.190 --> 10:50.190
新的number值等于什么呢

10:50.190 --> 10:53.190
等于原来状态的number值

10:53.190 --> 10:54.190
然后减1

10:54.190 --> 10:55.190
对吧

10:55.190 --> 10:56.190
判断一下啊

10:56.190 --> 10:57.190
如果number

10:57.190 --> 10:58.190
等于了0

10:58.190 --> 10:59.190
等于了0

10:59.190 --> 11:00.190
减到0了

11:00.190 --> 11:02.190
我们就把这个计时器清空

11:02.190 --> 11:03.190
clear interval

11:03.190 --> 11:04.190
我这个

11:04.190 --> 11:07.190
智能体是怎么跑没了

11:07.190 --> 11:09.190
写上这么一个组件

11:09.190 --> 11:11.190
这里写个分号

11:11.190 --> 11:13.190
这里

11:13.190 --> 11:14.190
set

11:14.190 --> 11:16.190
number

11:16.190 --> 11:17.190
好了

11:17.190 --> 11:18.190
这样写好了

11:18.190 --> 11:19.190
写上了这么一个

11:19.190 --> 11:21.190
倒计时的这么一个组件

11:21.190 --> 11:22.190
两下写完

11:22.190 --> 11:23.190
写完了过后

11:23.190 --> 11:24.190
让我们这里看一下

11:24.190 --> 11:25.190
把这个地方复制一下

11:25.190 --> 11:27.190
重新写

11:27.190 --> 11:29.190
这里让我们导入

11:29.190 --> 11:30.190
导入

11:30.190 --> 11:31.190
导入啥呢

11:31.190 --> 11:34.190
导入这个

11:34.190 --> 11:36.190
myComp

11:37.190 --> 11:40.570
myComp

11:40.570 --> 11:41.570
导入这个

11:41.570 --> 11:42.570
接下来呢

11:42.570 --> 11:44.570
我们这里就直接渲染

11:44.570 --> 11:47.570
渲染my comp

11:47.570 --> 11:48.570
给它一个number

11:48.570 --> 11:50.570
比方说

11:50.570 --> 11:51.570
十

11:51.570 --> 11:53.570
十秒钟倒计时

11:53.570 --> 11:54.570
保存看一下

11:54.570 --> 11:55.570
看一下我们这里

11:59.570 --> 12:01.570
它说不能

12:01.570 --> 12:04.660
嗯

12:04.660 --> 12:06.200
这里写错了

12:06.200 --> 12:08.200
没问题か

12:08.200 --> 12:11.280
再刷新看一下

12:13.740 --> 12:15.020
他说

12:16.300 --> 12:18.860
无法解析这个mic comp 组件

12:19.120 --> 12:20.660
解析不了

12:22.180 --> 12:23.720
找不到模块mic comp

12:24.740 --> 12:27.820
这里路径写错了,应该是路径写错了

12:28.080 --> 12:29.620
这路径应该是来自于

12:30.900 --> 12:31.660
对了

12:32.420 --> 12:33.460
这路径对了

12:34.480 --> 12:35.240
再看一下

12:36.260 --> 12:37.540
mic comp

12:38.320 --> 12:39.340
路径没问题

12:41.760 --> 12:43.000
这里是哪里错了

12:45.820 --> 12:47.340
他找不到这个模块

12:47.600 --> 12:50.940
这里要用相对定位

12:51.440 --> 12:53.760
保存,不然他从哪里去找去了

12:54.020 --> 12:56.060
他从load嘛就是里面去找去了

12:56.820 --> 12:59.120
OK,那么现在就可以倒计时了

12:59.640 --> 13:01.680
好,接下来我有一个事情要做

13:02.460 --> 13:03.480
什么事情呢

13:04.000 --> 13:07.840
就是说我这个倒计时这个组件倒是可以倒计时的

13:08.340 --> 13:11.160
但是倒计时完成之后就在这里

13:12.440 --> 13:13.980
倒计时完成

13:14.500 --> 13:16.800
倒计时完成之后

13:17.560 --> 13:22.420
可能使用这个组件的人希望做一些事情

13:22.680 --> 13:24.220
他希望做一些事情

13:24.980 --> 13:26.260
那么这个时候

13:26.520 --> 13:30.860
我现在目前这个情况就是我使用这个组件的人

13:31.120 --> 13:34.720
他不知道他什么时候倒计时完成,不知道

13:35.480 --> 13:38.560
你倒计时完成的时候我可能要做一些事情

13:39.540 --> 13:40.300
但是呢

13:40.560 --> 13:41.840
现在就是出现这么一个问题

13:42.100 --> 13:44.900
我这个组件里面他非常清楚

13:45.160 --> 13:46.700
倒计时什么时候完成

13:46.960 --> 13:49.000
他非常清楚,因为他是自我维护状态的

13:49.260 --> 13:51.060
他非常清楚什么时候倒计时完成

13:51.560 --> 13:52.840
但是他不知道

13:53.360 --> 13:56.440
倒计时完成之后要做什么

13:57.460 --> 13:58.480
懂我这个意思吗

13:59.760 --> 14:03.340
但是使用这个组件的人他非常清楚

14:03.600 --> 14:05.340
我如果倒计时完成了

14:05.600 --> 14:06.680
我要做一些事情

14:07.180 --> 14:08.460
我得做一些事情

14:09.440 --> 14:10.400
我举个例子

14:10.640 --> 14:11.640
我再举个例子

14:11.960 --> 14:13.560
我这里有这么一个组件

14:14.040 --> 14:15.400
我们把它改个名字吧

14:15.840 --> 14:16.440
改成tick

14:18.040 --> 14:19.000
那这里改成tick

14:20.800 --> 14:22.600
这边改成tick

14:27.060 --> 14:29.220
好,接下来我再来写个组件

14:29.660 --> 14:30.820
再来写个组件

14:33.260 --> 14:34.060
tick 康硕

14:36.490 --> 14:39.690
就是倒计时的控制

14:39.950 --> 14:42.690
当倒计时完成的时候,这个组件很简单

14:43.170 --> 14:44.930
当倒计时完成之后

14:45.130 --> 14:46.690
我显示一个东西就完成了

14:47.690 --> 14:48.290
import

14:49.890 --> 14:50.490
import

14:51.690 --> 14:52.190
tick

14:52.890 --> 14:53.390
fra

14:54.590 --> 14:55.090
tick

14:56.590 --> 15:00.370
这里边我们就把这个倒计时组件放进来

15:00.690 --> 15:01.890
tick 放进来

15:02.490 --> 15:03.290
给他个number

15:04.990 --> 15:05.490
10

15:06.690 --> 15:07.990
有这么一个倒计时组件

15:08.290 --> 15:10.290
然后下边有个p元数

15:10.790 --> 15:11.490
p元数

15:11.690 --> 15:13.090
这里边显示啥呢

15:13.190 --> 15:16.090
这里边如果倒计时完成了

15:16.090 --> 15:17.290
我要显示一个东西

15:17.290 --> 15:18.690
就显示一个什么

15:18.690 --> 15:19.690
就显示一个倒计时完成

15:19.690 --> 15:20.890
我们有h2元数吗

15:21.390 --> 15:22.890
好,那么这个组件里边呢

15:22.890 --> 15:24.090
他有一个自己的状态

15:24.290 --> 15:25.390
有个自己的状态

15:26.090 --> 15:26.590
state

15:28.490 --> 15:29.090
state

15:29.290 --> 15:29.890
一个状态

15:29.890 --> 15:30.490
什么状态呢

15:30.490 --> 15:31.090
就是说

15:31.590 --> 15:33.090
意思 over

15:33.490 --> 15:35.090
是否倒计时完成

15:35.390 --> 15:35.890
force

15:36.490 --> 15:39.090
倒计时是否完成

15:40.090 --> 15:41.190
倒计时当晚

15:41.190 --> 15:42.290
他一开始是force

15:42.590 --> 15:43.790
倒计时没有完成

15:44.190 --> 15:44.990
没有完成

15:45.090 --> 15:46.990
那如果倒计时完成了过后了

15:46.990 --> 15:48.390
我要显示一个东西

15:48.490 --> 15:49.690
所以说在render的时候

15:49.690 --> 15:50.790
我们可以这样子来处理

15:50.890 --> 15:51.690
判断一下

15:52.090 --> 15:55.490
if this state is over

15:56.090 --> 15:57.490
是否倒计时完成

15:57.690 --> 15:59.790
如果倒计时完成了

15:59.990 --> 16:01.590
那么我这里定一个辩量

16:01.790 --> 16:02.490
定一个辩量

16:03.690 --> 16:04.290
net吧

16:04.890 --> 16:05.590
定一个辩量

16:05.790 --> 16:06.790
就是

16:07.990 --> 16:08.790
status

16:09.690 --> 16:10.390
status

16:12.360 --> 16:13.060
一个字不错

16:13.060 --> 16:13.860
一个字不错

16:14.860 --> 16:16.860
如果倒计时完成了过后了

16:16.860 --> 16:18.660
我把这个辩量设置为

16:18.860 --> 16:19.660
设置为什么

16:20.660 --> 16:22.460
倒计时完成

16:23.060 --> 16:26.060
一开始我们这里设置正在倒计时

16:27.660 --> 16:28.660
正在倒计时

16:28.660 --> 16:29.760
如果倒计时完成了

16:29.760 --> 16:31.960
我们这里设置成这个东西

16:32.060 --> 16:33.760
好我们这里就存放什么

16:33.760 --> 16:35.060
存放这个status

16:35.660 --> 16:36.260
status

16:36.460 --> 16:37.360
这个能看懂吗

16:37.860 --> 16:39.060
非常非常简单

16:39.360 --> 16:40.360
我使用这个组件

16:40.360 --> 16:41.660
他来进行倒计时

16:41.760 --> 16:42.960
当他完成的时候

16:42.960 --> 16:44.660
我这里要显示倒计时完成

16:44.960 --> 16:45.160
好

16:45.160 --> 16:47.660
接下来我们在index里面去应用

16:48.660 --> 16:49.460
这个组件

16:49.960 --> 16:50.560
扛错

16:53.760 --> 16:54.760
去应用这个组件

16:54.760 --> 16:55.860
这个组件没有属性

16:55.860 --> 16:56.860
你不需要不需要

16:56.860 --> 16:57.960
不需要给他传递任何东西

16:58.460 --> 16:59.260
保存啊

16:59.360 --> 16:59.960
你看一下

17:00.260 --> 17:02.060
现在目前是正在倒计时

17:02.260 --> 17:04.360
等倒计时完成之后

17:04.360 --> 17:05.660
我这里要变化

17:05.760 --> 17:06.760
变化成什么了

17:06.760 --> 17:08.760
变化成倒计时完成

17:09.760 --> 17:10.960
那问题是来了

17:11.460 --> 17:13.260
我这里怎么来变呢

17:13.460 --> 17:15.160
因为目前的问题在于

17:15.260 --> 17:16.460
我这个组件

17:16.960 --> 17:18.260
他根本就不知道

17:18.260 --> 17:19.760
什么时候倒计时完成

17:19.860 --> 17:20.860
根本就不知道

17:21.660 --> 17:22.860
那假设

17:23.160 --> 17:25.260
假设这里边有个事件就好了

17:25.760 --> 17:26.360
什么事件呢

17:26.360 --> 17:27.260
我们比方说

17:27.460 --> 17:28.060
举个例子

17:28.160 --> 17:29.760
比方说这里有个事件叫做

17:29.760 --> 17:30.260
on

17:30.860 --> 17:31.460
over

17:31.860 --> 17:32.760
on over

17:33.060 --> 17:35.660
当他倒计时完成之后

17:35.660 --> 17:37.260
他会触发这个事件

17:37.460 --> 17:38.260
假设

17:38.360 --> 17:39.460
他有个事件就好了

17:39.760 --> 17:40.660
那这里边呢

17:41.260 --> 17:42.460
我们就书写啊

17:43.660 --> 17:45.660
当你倒计时完成之后

17:45.660 --> 17:47.160
我要做的事情很简单

17:47.160 --> 17:49.060
就是重新设置这个状态呗

17:49.260 --> 17:49.660
对吧

17:49.760 --> 17:50.660
重新设置个什么

17:50.660 --> 17:51.360
status

17:51.360 --> 17:52.160
这个状态

17:52.160 --> 17:53.160
把它设置为什么

17:53.160 --> 17:53.760
q

17:54.260 --> 17:55.660
不是status

17:55.860 --> 17:56.860
把它is over

17:57.260 --> 17:58.260
把它设置为q

17:58.460 --> 17:58.860
对吧

17:59.560 --> 18:00.460
倒计时完成过后

18:00.460 --> 18:01.360
我把它设为q

18:01.360 --> 18:02.560
那么这样子呢

18:02.560 --> 18:03.860
当这个事件触发的时候

18:03.860 --> 18:05.160
是不是要重新设置状态

18:05.260 --> 18:06.160
一重新设置状态

18:06.160 --> 18:07.260
是不是要重新渲染

18:07.760 --> 18:08.960
重新渲染这一块

18:08.960 --> 18:09.960
重新渲染过后呢

18:10.060 --> 18:11.260
他发现意思 over了

18:11.360 --> 18:12.960
那么他就倒计时完成了

18:14.460 --> 18:15.460
能看懂这个意思吗

18:15.760 --> 18:16.560
能不能看懂

18:17.960 --> 18:18.960
好好看一下

18:18.960 --> 18:19.760
好好看一下

18:19.760 --> 18:21.160
咱们有这么一种结构

18:21.160 --> 18:22.260
有这么一种结构

18:22.660 --> 18:24.160
关键点在哪呢

18:24.160 --> 18:25.860
关键点是我这个组件呢

18:25.860 --> 18:27.360
他根本就不知道这个

18:27.460 --> 18:30.260
这个东西什么时候倒计时完成了

18:30.260 --> 18:31.360
他根本就不知道

18:32.360 --> 18:32.960
但是呢

18:32.960 --> 18:33.960
这边知道

18:34.160 --> 18:35.560
这边知道什么时候倒计时完成

18:35.560 --> 18:36.160
非常清楚

18:36.160 --> 18:37.560
因为他自己的控制状态吗

18:37.560 --> 18:38.560
肯定非常清楚

18:38.760 --> 18:39.160
但是呢

18:39.160 --> 18:40.160
他不知道

18:40.560 --> 18:41.860
完车过后要干吗

18:41.860 --> 18:42.560
他不知道

18:42.660 --> 18:43.660
这种场景呢

18:43.660 --> 18:44.860
非常非常常见

18:45.160 --> 18:46.460
就是一个知道时间点

18:46.460 --> 18:47.660
他不知道要干吗

18:47.860 --> 18:48.460
另外一个呢

18:48.460 --> 18:49.160
知道要干吗

18:49.160 --> 18:50.160
他不知道时间点

18:50.460 --> 18:52.360
比方说我们的一面上有按钮

18:52.360 --> 18:53.460
假设一个按钮

18:54.060 --> 18:55.760
那个按钮是一个组件

18:55.860 --> 18:57.160
那个按钮非常清楚

18:57.160 --> 18:58.360
我什么时候被点击了

18:58.360 --> 18:59.160
因为他有监听器

18:59.160 --> 18:59.560
对吧

18:59.560 --> 19:01.260
你浏览器的监听啊

19:01.260 --> 19:02.960
这个按钮什么时候被点击了

19:02.960 --> 19:03.760
什么时候被点击了

19:03.760 --> 19:04.360
有没有点击我

19:04.360 --> 19:05.260
有没有点击我

19:05.660 --> 19:06.660
好你点了过后呢

19:06.660 --> 19:08.060
他他知道自己被点击了

19:08.060 --> 19:09.660
但他不知道要干吗呀

19:09.660 --> 19:10.860
他不知道要干吗

19:10.860 --> 19:12.360
所以说你需要注册时间

19:12.360 --> 19:14.060
告诉他我要干吗

19:14.460 --> 19:15.060
对吧

19:15.260 --> 19:16.660
这里是不是在注册时间

19:16.760 --> 19:17.260
对不对

19:17.260 --> 19:18.660
时间无非就是个属性嘛

19:18.660 --> 19:19.160
对不对

19:19.260 --> 19:21.260
他就通过属性传过去了

19:21.560 --> 19:22.460
于是呢

19:22.460 --> 19:23.760
你看一下这边啊

19:23.760 --> 19:25.160
我传了一个属性过去

19:25.160 --> 19:26.660
这个属性是一个函数

19:26.660 --> 19:27.960
那我们这里打印一下

19:27.960 --> 19:29.060
打印一下这个tick

19:32.670 --> 19:33.970
打印一下这个probs

19:33.970 --> 19:34.770
你看一下

19:36.170 --> 19:37.270
传过来的属性

19:37.770 --> 19:39.470
保存你打印一下啊

19:39.670 --> 19:41.870
你看一下是不是传了一个number进来

19:41.870 --> 19:43.970
同时传了一个属性on over进来

19:43.970 --> 19:45.270
他是一个函数对吧

19:45.270 --> 19:46.270
他是一个函数

19:46.870 --> 19:49.070
那现在都讲到这了

19:49.670 --> 19:50.970
你还不知道怎么做吗

19:51.870 --> 19:53.270
他就在属性里边啊

19:53.270 --> 19:54.470
他就在属性里边

19:54.470 --> 19:55.870
number on over

19:55.970 --> 19:56.870
要干吗

19:57.070 --> 19:57.670
你要干吗

19:57.670 --> 19:59.070
到底是完成过后

19:59.870 --> 20:00.570
是不是啊

20:00.570 --> 20:01.570
判断一下

20:02.170 --> 20:02.670
啊

20:02.970 --> 20:03.910
或者就是this

20:03.910 --> 20:04.870
probs都行啊

20:04.870 --> 20:05.570
因为我在

20:05.570 --> 20:06.170
我这里呢

20:06.170 --> 20:07.170
在扣造函数里边

20:07.170 --> 20:08.370
可以直接使用参数

20:08.370 --> 20:09.270
也可以直接使用

20:09.270 --> 20:10.470
这个this their purpose

20:10.470 --> 20:11.470
因为他这句话呢

20:11.470 --> 20:12.870
就完成了复职了

20:13.370 --> 20:14.170
都行啊

20:14.370 --> 20:17.170
就看一下这个on over是否存在

20:17.770 --> 20:17.970
啊

20:17.970 --> 20:19.770
如果他存在的话干吗呢

20:19.870 --> 20:21.870
是不是调用他啊

20:22.270 --> 20:23.670
调用这个函数

20:23.970 --> 20:24.970
是不是完了

20:25.970 --> 20:26.870
是不是就完了

20:27.770 --> 20:29.270
不就是一个属性吗

20:29.270 --> 20:30.670
只不过他传了一个函数进来

20:30.670 --> 20:32.370
也把当成函数来调用不完了吗

20:32.570 --> 20:34.270
我这里倒计是完成过后

20:34.270 --> 20:35.670
我去调用这个函数

20:35.970 --> 20:36.870
那么一调用这个函数

20:36.870 --> 20:38.670
是不是相当于是调用了这里

20:38.770 --> 20:39.270
对吧

20:39.270 --> 20:40.270
就调用了这里了

20:40.770 --> 20:41.370
对不对

20:41.470 --> 20:43.070
他不会就传了一个函数进来吗

20:43.270 --> 20:44.770
这不就是个回调函数吗

20:44.870 --> 20:45.870
保存看一下吧

20:47.270 --> 20:47.770
啊

20:47.970 --> 20:49.570
你看这就是得到属性的值吗

20:49.670 --> 20:50.170
对不对

20:50.870 --> 20:51.370
啊

20:51.970 --> 20:52.370
然后呢

20:52.370 --> 20:53.770
倒计时倒计时

20:53.870 --> 20:54.870
当倒计时完成过后

20:54.870 --> 20:55.870
我去调用这个函数

20:55.870 --> 20:57.370
你看是否倒计时完成了

20:57.870 --> 20:58.470
对不对

20:59.170 --> 21:00.670
这就是时间啊

21:00.670 --> 21:02.270
时间就这么简单啊

21:02.270 --> 21:03.670
没有什么复杂的啊

21:03.770 --> 21:05.970
千万不要把把事件想得太复杂了

21:06.370 --> 21:08.270
事件就是一个普普通通的属性

21:08.270 --> 21:09.970
只不过他传了一个函数进来

21:10.170 --> 21:11.870
我这个资金一组件里边

21:11.870 --> 21:13.570
在合适的时间点

21:13.570 --> 21:15.270
我去调用这个函数

21:15.470 --> 21:16.870
就完事了啊

21:17.670 --> 21:18.470
你看这个意思吧

21:18.470 --> 21:19.970
这就是一个时间

21:21.170 --> 21:21.670
好

21:22.070 --> 21:22.470
然后呢

21:22.470 --> 21:24.670
这个世界里边在资金一组件里边呢

21:24.670 --> 21:27.370
我们还有更多的事情要说啊

21:28.570 --> 21:29.470
就说这里啊

21:29.970 --> 21:30.770
我们回到这

21:33.670 --> 21:34.170
好

21:34.970 --> 21:36.370
刚才一定要理解清楚啊

21:36.370 --> 21:38.070
刚才那个姿势一定要理解清楚

21:38.070 --> 21:38.970
其实没有什么难的

21:38.970 --> 21:40.770
本质上就是传了一个函数过去

21:40.770 --> 21:41.370
那么那边呢

21:41.370 --> 21:42.470
在适当的时候呢

21:42.470 --> 21:44.070
去调用这个函数就完事了

21:45.170 --> 21:45.670
好

21:45.770 --> 21:46.870
然后这边呢

21:47.070 --> 21:49.170
我们现在把事件的处理程序

21:49.170 --> 21:49.970
就是个函数呢

21:49.970 --> 21:50.870
是写到这的

21:51.670 --> 21:52.870
如果有很多事件的话

21:52.870 --> 21:53.470
写到这呢

21:53.470 --> 21:55.570
也肯定是不是很合适啊

21:55.570 --> 21:56.870
也不是很合适

21:56.970 --> 21:58.570
哦等一下等一下等一下

21:58.870 --> 21:59.470
有些同学

21:59.470 --> 22:00.170
我记得啊

22:00.170 --> 22:01.670
之前我在讲这个react的时候

22:01.670 --> 22:03.070
有些同学有这么一个疑问

22:04.370 --> 22:05.170
什么疑问呢

22:05.870 --> 22:08.270
就说这里这里这里这个组件里边呢

22:08.270 --> 22:10.370
有这个h1元数啊

22:10.370 --> 22:11.570
有这个h1元数

22:11.570 --> 22:12.170
看到没有

22:12.170 --> 22:13.570
这个tick这个组件里边

22:14.370 --> 22:17.570
啊就倒计时期里边有个h1元数啊

22:17.670 --> 22:18.670
然后原来在问呢

22:18.670 --> 22:22.170
我说说我这里给他注册一个onclick事件

22:22.170 --> 22:23.970
那么点击这个h1呢

22:23.970 --> 22:29.070
会不会生效啊

22:29.970 --> 22:30.970
点击了啊

22:30.970 --> 22:31.670
点击了

22:31.970 --> 22:33.570
就说这个事件会不会生效

22:35.370 --> 22:36.270
你觉得呢

22:37.370 --> 22:38.070
你觉得呢

22:39.370 --> 22:40.270
好好想想啊

22:41.070 --> 22:42.070
他会不会生效

22:44.210 --> 22:44.910
想一想啊

22:45.410 --> 22:46.110
会不会生效

22:47.610 --> 22:48.510
他生效了

22:48.610 --> 22:49.410
如果他生效了

22:49.410 --> 22:50.910
我把这个电脑磁了

22:52.010 --> 22:53.010
看一下有没有生效

22:53.410 --> 22:54.610
肯定没有生效啊

22:54.810 --> 22:56.810
这个onclick这个事件

22:57.310 --> 22:59.210
我们之前为什么可以使用

22:59.510 --> 23:00.310
之前我们在这里

23:00.310 --> 23:01.810
为什么可以使用这个onclick

23:02.110 --> 23:03.710
是因为我们用的这个组件

23:03.910 --> 23:06.210
这个组件它在合适的时候

23:06.210 --> 23:07.910
它会调用这个

23:08.610 --> 23:09.910
属性给你传过来

23:10.110 --> 23:11.510
传过来的函数对吧

23:11.810 --> 23:14.210
你通过这个属性传过去的一个函数

23:14.410 --> 23:15.910
那么这个这个组件呢

23:15.910 --> 23:18.610
他会在适当的时候去调用这个函数

23:18.710 --> 23:20.310
所以说呢他才会生效

23:20.910 --> 23:23.210
那我这边呢是一个自定义组件

23:23.310 --> 23:25.410
我传过去了这个onclick函数

23:25.510 --> 23:26.110
传过去了

23:26.110 --> 23:27.010
倒是传过去了

23:27.010 --> 23:28.010
倒是没问题了

23:28.910 --> 23:30.610
那这边有没有调用这个函数

23:31.710 --> 23:32.910
属性肯定是传过去了

23:33.610 --> 23:34.810
你看一下吧打印一下

23:35.810 --> 23:37.910
千万不要不要想

23:37.910 --> 23:38.710
当然啊

23:39.510 --> 23:41.710
传这个props打印看一下吧

23:43.410 --> 23:45.110
传了是不是传了一个onclick过去

23:45.410 --> 23:46.610
你传的这个属性过去

23:46.610 --> 23:48.610
就是一个普普通通的属性

23:48.710 --> 23:50.310
不要把它想的太复杂

23:50.410 --> 23:52.310
它里边没有任何的魔法

23:52.510 --> 23:53.510
一点魔法都没有

23:53.510 --> 23:54.710
就是一个普普通通的属性

23:54.710 --> 23:55.910
你调用了它就有用

23:55.910 --> 23:57.010
没有调了它就没用

23:57.710 --> 23:58.710
那你给它传的这个属性

23:58.710 --> 23:59.310
它用吗

23:59.410 --> 24:00.110
它用了没

24:00.510 --> 24:01.910
完全没有用这个属性

24:01.910 --> 24:03.110
哪里用了这个属性啊

24:03.610 --> 24:04.310
onclick

24:04.610 --> 24:06.010
所以这个属性会不会调用

24:06.210 --> 24:07.410
它根本就不会调用

24:07.610 --> 24:08.410
所以会生效吗

24:08.410 --> 24:09.210
不会生效

24:10.010 --> 24:11.210
我们再来说一下啊

24:11.210 --> 24:12.510
那为什么这里会生效

24:12.510 --> 24:14.110
因为这是个内置组件

24:14.110 --> 24:17.510
它会在它会帮你在合适的时候

24:17.710 --> 24:19.010
调用这个函数

24:19.210 --> 24:20.710
所以说它会生效

24:21.810 --> 24:23.110
千万不要去想

24:23.210 --> 24:23.910
想着啊

24:23.910 --> 24:24.710
你这里写了这个

24:24.710 --> 24:26.710
也这里写了这个事件

24:26.910 --> 24:29.310
根据我们以前学习的atema的知识

24:29.410 --> 24:30.710
那么就是个点击事件

24:30.710 --> 24:32.010
任何东西都可以点击吗

24:32.010 --> 24:32.910
那么它也可以点击

24:32.910 --> 24:34.110
千万不要这样子想

24:34.310 --> 24:34.810
现在呢

24:34.810 --> 24:37.610
跟atema多么元素没有什么直接的关系

24:38.110 --> 24:40.410
它就是一个普普通通的属性而已

24:41.210 --> 24:42.610
你用了它就会有用

24:42.610 --> 24:43.610
没用它就没用

24:44.210 --> 24:45.610
那比如说我这里如果要用的话

24:45.610 --> 24:46.210
怎么用了

24:46.410 --> 24:48.910
比方说我真的要实现点击这个aqe

24:48.910 --> 24:50.610
那我就要触发这个事件

24:50.610 --> 24:51.210
那怎么用了

24:51.210 --> 24:53.410
那需要在这个组件里面进行控制

24:54.110 --> 24:56.110
那么当aqe被点击的时候

24:56.110 --> 24:57.010
我们在这里

24:57.810 --> 24:59.010
给aqe注册事件

24:59.010 --> 25:00.410
因为aqe它是个内置组件

25:00.410 --> 25:00.910
对吧

25:01.010 --> 25:01.810
它被点击了

25:01.810 --> 25:03.410
它会触发这个事件

25:03.510 --> 25:05.110
别人给我写好的

25:05.110 --> 25:06.310
它会帮我调用

25:06.410 --> 25:08.110
所以说当它点击的时候呢

25:08.410 --> 25:09.610
我就把它

25:10.410 --> 25:11.010
给谁

25:11.310 --> 25:13.710
是不是给这个属性里边的onclick

25:13.810 --> 25:14.310
对吧

25:14.710 --> 25:16.410
我把这个属性的onclick

25:16.710 --> 25:18.710
你不是传了这么一个东西给我吗

25:18.810 --> 25:19.610
好那行吧

25:19.710 --> 25:20.310
那行吧

25:20.410 --> 25:22.110
我把我这个东西又传递给它

25:22.310 --> 25:22.510
对吧

25:22.510 --> 25:24.610
是不是属性的一层一层传递

25:24.810 --> 25:25.110
对吧

25:25.110 --> 25:26.910
属性的一层一层传递过去了

25:27.110 --> 25:27.710
保存

25:28.110 --> 25:28.810
你看一下

25:29.110 --> 25:30.610
那么现在点击过后是不是可以

25:31.110 --> 25:31.810
触发点击了

25:31.810 --> 25:32.210
你看

25:33.110 --> 25:35.210
我们再来看一下这个元素结构啊

25:35.510 --> 25:36.110
这个元素

25:36.110 --> 25:36.610
这不

25:36.610 --> 25:37.610
这是组件结构

25:38.110 --> 25:38.810
你看一下

25:39.010 --> 25:40.710
这里面tick control里边

25:41.910 --> 25:43.410
他给他调用了这个

25:43.710 --> 25:44.710
调用了这个组件

25:44.810 --> 25:46.810
这个组件里面看一下是不是probs

25:47.010 --> 25:48.910
是不是就是一个普普通通的属性onclick

25:48.910 --> 25:49.610
传过去了

25:49.810 --> 25:51.010
好传过去过后呢

25:51.110 --> 25:51.710
他又传

25:51.710 --> 25:53.210
他又把这个onclick传给了谁

25:53.410 --> 25:54.610
传给了这个就是

25:54.810 --> 25:56.910
aqe你看aqe里面是不是onclick

25:57.010 --> 25:57.410
对吧

25:57.410 --> 25:58.310
也传过去了

25:58.610 --> 26:00.310
他把这个东西一次传过去了

26:00.410 --> 26:02.110
所以说当aqe去调用这个onclick

26:02.110 --> 26:02.710
的时候

26:02.710 --> 26:04.510
实际上调用的是谁调用的是这个

26:04.910 --> 26:06.310
这个的onclick

26:06.410 --> 26:09.210
那么这个onclick是不是调用了他的注册的时间

26:09.510 --> 26:10.010
对不对

26:11.210 --> 26:13.410
这是一层一层就是一个普普通通的属性啊

26:13.410 --> 26:14.210
传过去了

26:15.510 --> 26:16.310
好这里

26:16.510 --> 26:18.610
我主要说现在主要说一下这个问题啊

26:19.210 --> 26:20.010
就说我们现在呢

26:20.010 --> 26:21.510
如果有很多时间的话

26:21.510 --> 26:22.010
我们

26:22.710 --> 26:23.510
写到这呢

26:23.510 --> 26:24.310
可能不是很好

26:24.310 --> 26:26.210
比方说这里要处理的事情很多

26:26.410 --> 26:26.910
写到这呢

26:26.910 --> 26:27.710
看上去

26:29.010 --> 26:29.710
老活痛

26:30.010 --> 26:30.710
老活痛

26:31.110 --> 26:31.910
那怎么办呢

26:32.010 --> 26:34.110
我们肯定是希望把这个东西呢

26:34.110 --> 26:34.910
写到哪呢

26:35.110 --> 26:36.510
写到啊这个

26:37.010 --> 26:39.610
内组件里边的什么函数里边啊

26:39.610 --> 26:40.910
写到他的方法里边

26:41.210 --> 26:44.910
比方说啊我们这里写个handleclick

26:45.710 --> 26:46.710
handleclick

26:47.110 --> 26:48.310
写个这么一个方法

26:48.810 --> 26:50.510
啊那么这里呢输出啊

26:50.710 --> 26:51.310
点击了

26:52.710 --> 26:53.310
点击了

26:53.710 --> 26:55.010
好那么这里呢我们给他

26:56.810 --> 26:57.510
this

26:58.110 --> 26:59.510
this handleclick

26:59.910 --> 27:00.410
对吧

27:00.510 --> 27:02.310
还有这个就是handleover

27:02.710 --> 27:03.710
handleover

27:05.110 --> 27:06.510
好然后呢这里呢

27:07.410 --> 27:08.610
就重新设置状态

27:08.910 --> 27:10.310
啊重新设置状态

27:12.420 --> 27:14.820
啊这里是handleover

27:15.820 --> 27:16.220
对

27:16.320 --> 27:17.120
this啊

27:17.120 --> 27:17.620
this

27:17.720 --> 27:19.420
这样子看上去了要稍微舒服一点啊

27:19.420 --> 27:20.720
就是在有些程序里面呢

27:20.720 --> 27:22.820
可能属性比较多的情况下呢

27:22.820 --> 27:23.820
他会换个行

27:24.020 --> 27:25.520
啊他会把这些属性换个行

27:25.820 --> 27:28.920
啊这样子来显示啊看上去了比较清爽一点

27:29.820 --> 27:30.920
好这样子行不行啊

27:30.920 --> 27:32.220
当然可以啊当然可以

27:32.220 --> 27:33.620
只要把函数给他就行了

27:34.120 --> 27:36.920
但是呢这里面可能会遇到一点问题

27:37.120 --> 27:38.020
什么问题呢

27:38.220 --> 27:39.620
保存咱们来看一下

27:42.220 --> 27:43.220
好稍等一下啊

27:43.220 --> 27:45.020
咱们来看一下这里的问题是什么

27:49.420 --> 27:50.320
啊保存了啊

27:50.820 --> 27:51.520
他说什么呢

27:51.720 --> 27:55.920
他说this setState is not a function

27:56.620 --> 27:58.220
他不是一个函数

27:59.620 --> 28:00.420
你这不扯淡吗

28:00.420 --> 28:02.820
这个this setState还不是函数

28:02.920 --> 28:04.220
他怎么回事呢

28:04.820 --> 28:07.220
他是this关键字出了问题

28:07.320 --> 28:10.020
我们在这里啊打印出this

28:10.520 --> 28:12.820
打印出this看一下这个this关键字

28:13.220 --> 28:14.420
他出了什么样的问题

28:15.720 --> 28:16.220
点击

28:16.820 --> 28:17.920
他是一个undefend

28:18.420 --> 28:19.520
他是一个undefend

28:20.020 --> 28:22.220
所以说呢你自然得不到这个东西啊

28:22.320 --> 28:24.020
因为他的this是一个undefend

28:24.020 --> 28:25.020
他得不到这个东西

28:25.320 --> 28:26.420
那么也就是说

28:26.920 --> 28:29.520
如果你用这种方式啊

28:29.520 --> 28:30.920
来注册事件的话

28:30.920 --> 28:32.820
他的this呢是undefend

28:32.920 --> 28:34.020
为什么呢

28:34.920 --> 28:37.220
为什么他的this是undefend的呢

28:38.120 --> 28:38.520
啊

28:39.120 --> 28:40.820
他的this凭什么是undefend的呢

28:41.420 --> 28:42.520
他是这样子啊

28:42.620 --> 28:43.520
你在

28:43.520 --> 28:47.020
你看上去呢在这里去调用这个啊

28:47.120 --> 28:48.220
调用这个函数

28:48.720 --> 28:49.820
实际上呢

28:50.220 --> 28:51.820
他是通过谁调用的

28:52.520 --> 28:54.420
他是不是通过这个对象来调用的

28:54.520 --> 28:55.620
这个内的对象来调用的

28:55.620 --> 28:57.620
不是他通过这个props来调用的

28:57.920 --> 29:00.420
因此呢为了避免出问题啊

29:00.420 --> 29:01.220
这个reaction呢

29:01.220 --> 29:02.920
他自动把把这个this呢

29:02.920 --> 29:04.020
给变成undefend的

29:04.020 --> 29:05.520
他总不能把他当成props吧

29:05.620 --> 29:07.120
他总能把他当成这个东西吧

29:07.520 --> 29:08.220
所以说呢

29:08.520 --> 29:10.620
目前呢在事件里边啊

29:10.620 --> 29:12.220
有个地方有个注意点

29:12.420 --> 29:13.520
要注意就是说

29:13.820 --> 29:15.720
在事件处理函数中

29:16.420 --> 29:19.220
啊如果没有特殊处理

29:20.220 --> 29:23.220
在事件处理函数中

29:23.920 --> 29:26.920
this指向啊undefend

29:28.220 --> 29:29.620
啊指向的是undefend

29:30.620 --> 29:31.720
他会有这么一个问题

29:33.220 --> 29:33.620
好

29:34.820 --> 29:36.420
那么怎么来处理这个问题呢

29:36.820 --> 29:37.820
怎么来处理呢

29:39.120 --> 29:40.420
好刚才为什么没问题

29:40.420 --> 29:42.220
因为刚才我们是在这里用的是什么

29:42.520 --> 29:44.820
用的是那个就是啊啊

29:46.220 --> 29:47.220
那个函头函数

29:47.220 --> 29:48.920
函头函数它是绑定了this的啊

29:48.920 --> 29:51.720
它这是永远指向的是外层啊

29:51.720 --> 29:53.020
外层外层的this

29:53.020 --> 29:55.420
外层的this是不是就是当前对象

29:55.520 --> 29:56.020
对不对

29:56.220 --> 29:57.920
刚才我们的使用的是函头函数

29:58.320 --> 30:01.820
好这里如如果你写的是分开写的方法

30:01.820 --> 30:02.720
该怎么来处理呢

30:02.920 --> 30:05.120
这里有这么几种处理办法啊

30:05.120 --> 30:06.320
有这么几种处理办法

30:06.320 --> 30:08.120
第一种处理办法是

30:09.220 --> 30:10.920
呃使用band

30:11.320 --> 30:12.320
band函数

30:13.120 --> 30:15.320
绑定啊绑定this

30:16.120 --> 30:17.820
好这里边呢又有两种做法

30:17.820 --> 30:19.120
我们分开来说一下啊

30:19.220 --> 30:21.020
使用band函数来绑定this

30:21.420 --> 30:23.320
好也就是说我们这里呢可以这样子写

30:24.120 --> 30:24.720
看着啊

30:25.120 --> 30:26.920
我们可以在构造函数里边

30:27.120 --> 30:28.120
constructor

30:29.020 --> 30:30.120
构造函数里边

30:30.720 --> 30:32.520
super props

30:34.320 --> 30:37.120
然后通过这种写法就是this

30:37.320 --> 30:37.820
第二

30:38.420 --> 30:40.220
handle click

30:41.920 --> 30:42.820
等于什么呢

30:42.820 --> 30:45.120
等于this handle click

30:45.320 --> 30:45.920
第二

30:47.120 --> 30:47.720
呃

30:48.420 --> 30:50.020
band this

30:50.620 --> 30:52.020
我们把这个this呢

30:52.020 --> 30:54.020
重新给这个handle click

30:54.320 --> 30:56.320
不是说重新给它复制啊

30:56.520 --> 30:58.320
是把这个handle click呢

30:58.520 --> 31:00.720
放到它对象本身上面去

31:01.720 --> 31:03.320
放到对象本身上面去

31:03.420 --> 31:05.620
本来这个方法是在圆形上对吧

31:05.720 --> 31:07.220
本来是在圆形上啊

31:07.220 --> 31:09.320
我们把圆形上的方法拿到

31:09.420 --> 31:10.920
然后绑定了this

31:11.020 --> 31:12.320
是不是得到一个新的函数

31:12.520 --> 31:13.920
对吧得到一个新的函数

31:13.920 --> 31:14.920
我们之前讲过啊

31:14.920 --> 31:16.420
很早的时候讲过这么一个东西

31:16.720 --> 31:18.120
绑定了this过后呢

31:18.120 --> 31:19.920
它会得到一个绑定了this的

31:20.020 --> 31:21.320
新的函数啊

31:21.320 --> 31:22.520
会得到一个新的函数

31:22.520 --> 31:23.620
然后把这个新的函数呢

31:23.620 --> 31:25.020
复制到对象上面去

31:25.620 --> 31:26.520
好你看吧

31:30.160 --> 31:30.860
对象

31:30.960 --> 31:33.760
然后呢它对象是不是有一个隐私圆形啊

31:33.760 --> 31:34.760
隐私圆形

31:34.760 --> 31:36.060
隐私圆形指向谁

31:36.760 --> 31:38.460
proto指向的是

31:38.760 --> 31:40.460
这个构造函数的圆形对吧

31:40.460 --> 31:42.460
本来圆形里边是一个handle

31:42.460 --> 31:43.760
有一个handle click

31:44.460 --> 31:45.360
有个这个东西

31:45.460 --> 31:47.160
现在的通过这句话了

31:47.460 --> 31:49.260
把圆形的方法呢

31:49.460 --> 31:50.560
绑定了this

31:50.560 --> 31:52.260
是不是得到一个新的函数

31:52.460 --> 31:53.460
把这个新的函数

31:53.460 --> 31:55.460
给这个对象的handle click复制

31:55.560 --> 31:56.860
那么是不是放到这了

31:56.860 --> 31:58.960
那么这里呢有也有一个handle click了

31:58.960 --> 32:01.160
那么调用的时候肯定是调用了这个东西对吧

32:01.260 --> 32:02.360
因为还在对象上面

32:02.360 --> 32:04.160
根据圆形链的查到方式

32:04.160 --> 32:06.160
它先查到对象自身有没有这个

32:06.460 --> 32:07.960
啊这个成员

32:07.960 --> 32:09.560
如果有的话就直接使用了

32:09.860 --> 32:11.860
啊那么这个地方呢就是绑定了z的

32:12.060 --> 32:14.360
绑定了z的方法

32:15.160 --> 32:17.160
好于是呢我们就有这么一个东西了

32:17.760 --> 32:19.260
好当然同样道理呢我们可以

32:19.460 --> 32:22.160
z是什么handle over

32:22.360 --> 32:23.860
所以也是啊z

32:24.060 --> 32:25.560
handle over

32:25.860 --> 32:27.060
band this

32:27.760 --> 32:29.760
好我们把这个两个东西呢

32:30.360 --> 32:31.760
啊本来这里还有一个啊

32:32.360 --> 32:34.560
handle over

32:34.760 --> 32:35.760
好这里也是啊

32:36.360 --> 32:37.560
handle over

32:37.760 --> 32:39.660
好这个也是绑定了z的方法

32:40.960 --> 32:42.560
好把这两个绑定了z的方法呢

32:42.560 --> 32:43.760
放到对象上面去

32:44.560 --> 32:46.560
啊这个东西没有覆盖啊没有把它覆盖掉

32:47.060 --> 32:48.660
只是把它放到对象上面去了

32:48.960 --> 32:50.160
那么后边使用了这个吗

32:50.160 --> 32:52.460
z handle click是不是用了对象上面的东西

32:52.460 --> 32:54.060
对吧它都是绑定了z的

32:54.160 --> 32:55.260
好是这种方式

32:55.660 --> 32:57.260
你看一下吧点击你看

32:57.860 --> 32:59.960
哎点击的我我没有打印z是吗

33:00.360 --> 33:01.460
再打印一下z是吧

33:03.660 --> 33:04.160
z

33:04.660 --> 33:05.460
好保存啊

33:05.960 --> 33:08.360
点击你看z是不是tick control

33:08.460 --> 33:10.760
对吧对象就没问题了对不对

33:11.160 --> 33:13.960
好然后我们倒计师完成看一下z是会不会出问题

33:15.560 --> 33:17.560
好你看倒计师完成z是没有出问题了

33:18.260 --> 33:19.560
好这是一种方式啊

33:19.660 --> 33:21.760
不过这种方式呢写起来稍微麻烦一点啊

33:21.960 --> 33:23.560
就写起来稍微麻烦一点

33:24.360 --> 33:25.760
好第二种方式啊

33:25.860 --> 33:28.660
这种方式呢还有一种写法啊还有一种写法

33:28.860 --> 33:29.960
还有一种写法是什么呢

33:29.960 --> 33:31.860
就是在这里直接写啊

33:31.860 --> 33:34.860
就说我一开始呢没有啊没有就是

33:35.460 --> 33:38.360
嗯没有把它放到这啊没有把它放到这

33:39.060 --> 33:40.660
啊还是使用圆形上面的

33:40.760 --> 33:43.360
但是呢我在传递的时候呢

33:43.760 --> 33:44.660
绑定z

33:45.160 --> 33:48.260
传递的时候绑定z绑定z是不是返回一个新的函数

33:48.360 --> 33:49.760
对吧绑合一个新的函数

33:49.760 --> 33:51.860
然后返回给他啊复制给他

33:51.860 --> 33:54.360
那就这里就跟这个对象的属性没有什么关系了

33:54.360 --> 33:58.660
他就是返回一个新的函数复制给他啊绑定啊保存

33:58.860 --> 34:00.660
你看一下这个Z也没问题啊

34:00.660 --> 34:04.260
你看这个下面Tick controlZ也没问题啊

34:04.960 --> 34:06.060
这也是种写法

34:06.360 --> 34:08.260
但是呢这两种写法

34:08.260 --> 34:09.860
虽然说这种写法比较麻烦

34:09.860 --> 34:11.760
但是效率要高一些啊

34:11.760 --> 34:12.860
你看一下这种写法

34:13.160 --> 34:14.160
效率就没有那么高了

34:14.160 --> 34:14.760
为什么呢

34:14.860 --> 34:17.360
是因为每一次他只要一重新渲染

34:17.460 --> 34:19.160
是不是都要产生一个新的函数

34:19.560 --> 34:22.260
每一次重新渲染都要产生一个新的函数啊

34:22.260 --> 34:23.060
所以说这里呢

34:23.460 --> 34:24.760
效率上了就没有那么高了

34:24.760 --> 34:26.160
但是他写下来比较简变啊

34:26.160 --> 34:28.360
有的时候呢我们也会这样子写

34:29.160 --> 34:30.360
好这是啊

34:30.360 --> 34:32.460
你看这样子也可以得到正确结构啊

34:32.460 --> 34:34.660
这是第一种方式啊使用band

34:35.160 --> 34:36.760
使用band你要效率高一点的话

34:36.760 --> 34:37.860
你就使用这种方式

34:38.360 --> 34:39.860
如果你要写的简变一点的话

34:39.860 --> 34:41.160
你就使用这种方式

34:41.460 --> 34:42.360
但是这两种方式呢

34:42.360 --> 34:43.460
现在都用的比较少了啊

34:43.460 --> 34:44.460
都用的比较少了

34:44.460 --> 34:45.560
我们来看一下第二种

34:45.960 --> 34:47.260
第二种是什么

34:47.260 --> 34:48.560
使用箭头函数

34:48.660 --> 34:49.660
因为如果挨个成了

34:49.660 --> 34:51.660
出来的比时间比较早啊

34:51.760 --> 34:52.760
在早期的时候呢

34:52.760 --> 34:53.960
还没有es6

34:54.260 --> 34:55.360
还没有es6

34:55.360 --> 34:56.760
所以说呢那个时候呢

34:57.060 --> 34:58.360
只能用这种方式来做

34:58.460 --> 34:59.860
那么现在呢有了es6过后

34:59.860 --> 35:02.160
我们可以使用箭头函数啊

35:02.560 --> 35:03.460
绑定这一式

35:05.280 --> 35:06.580
箭头函数就不用绑定这一式了

35:06.580 --> 35:08.680
它本来就是指向外层的这一式

35:09.080 --> 35:10.880
好箭头函数又怎么来处理呢

35:11.280 --> 35:12.080
箭头函数呢

35:12.080 --> 35:14.180
我们也有两种写法啊

35:14.180 --> 35:15.180
也有两种写法

35:15.580 --> 35:16.680
第一种写法呢

35:16.680 --> 35:18.280
啊我们这里干脆复制一下吧

35:20.240 --> 35:21.440
这是刚才的这个啊

35:21.540 --> 35:23.040
那么看一下箭头函数的写法

35:23.240 --> 35:25.540
箭头函数的一种写法是这样子

35:25.740 --> 35:27.240
是不是把这个事件放到这

35:27.340 --> 35:27.840
对吧

35:27.940 --> 35:29.740
放到这当然没有任何问题对不对

35:30.040 --> 35:31.340
你箭头函数肯定是这一式的

35:31.340 --> 35:32.340
指向不会有任何问题

35:32.340 --> 35:33.140
直接放到这

35:33.140 --> 35:34.040
这是一种写法

35:34.040 --> 35:35.040
但这种写法呢

35:35.140 --> 35:36.640
就是我们像我们刚才说的

35:37.040 --> 35:39.140
这个Render里面的代码太复杂

35:39.140 --> 35:40.340
太庞大了啊

35:40.340 --> 35:42.340
所以说不太会使用这种写法

35:42.640 --> 35:44.240
好另一种写法呢是这样子

35:44.740 --> 35:45.540
是这样子

35:45.840 --> 35:46.540
把它放到这

35:47.840 --> 35:49.340
啊用这种这种格式来写

35:49.740 --> 35:50.840
啊用这种格式来写

35:51.840 --> 35:53.240
它是个箭头函数

35:53.240 --> 35:54.240
可以这样子写啊

35:54.240 --> 35:56.540
这是GS NEXT的语法

35:57.440 --> 35:59.440
啊新的语法

35:59.440 --> 36:00.940
目前还处于试验性简断

36:00.940 --> 36:03.140
但是有背部的存在的可以进行编译

36:03.740 --> 36:05.140
好这样子写的过后呢

36:05.140 --> 36:07.840
注意你就把它写成一个箭头函数了

36:07.940 --> 36:08.940
那么这样子呢

36:09.740 --> 36:11.640
它结果是结果是

36:12.240 --> 36:14.140
handle click

36:14.440 --> 36:17.540
不在原型上啊

36:17.540 --> 36:18.640
不在原型上

36:18.840 --> 36:21.340
而在对象上

36:21.640 --> 36:22.840
而在对象上

36:22.840 --> 36:24.540
这是箭头函数的特点对吧

36:24.540 --> 36:25.740
这是箭头函数的特点

36:25.740 --> 36:26.740
它不在原型上了

36:26.740 --> 36:28.040
而跑到对象上面去了

36:28.940 --> 36:29.740
好看一下吧

36:29.840 --> 36:31.240
啊这样子写的过后呢我们

36:31.640 --> 36:32.640
刚去打印一下吧

36:33.240 --> 36:34.640
打印一下这个tick control

36:38.770 --> 36:39.970
就6一个嘛啊

36:40.470 --> 36:41.270
就6一个

36:42.370 --> 36:45.350
const tc

36:45.550 --> 36:46.850
6一个tick control

36:50.550 --> 36:51.450
好然后呢

36:52.750 --> 36:54.250
输出啊tc

36:55.150 --> 36:56.450
保存啊看一下

36:58.050 --> 36:59.550
好6了一个tick control

36:59.550 --> 37:00.850
然后你看一下我们的

37:00.950 --> 37:02.250
这个unclick你看

37:02.850 --> 37:05.250
啊然后呢这个over你看

37:05.850 --> 37:06.950
是不是跑到这上面去了

37:07.250 --> 37:07.850
对不对

37:08.950 --> 37:10.750
哎是这个吗

37:10.950 --> 37:12.350
是这个吗我打印的是这个吗

37:12.350 --> 37:13.950
我之前打印了太多东西了啊

37:14.650 --> 37:15.350
啊这里

37:15.950 --> 37:17.250
嗯我看一下

37:17.650 --> 37:18.950
我之前打印了啥啊

37:19.250 --> 37:20.050
啥玩意啊

37:20.950 --> 37:21.850
t control

37:21.850 --> 37:24.050
哦应该之前还打印了这个东西

37:24.450 --> 37:25.250
啊这个地方

37:25.850 --> 37:27.450
还打印了的把猪吃掉啊

37:27.850 --> 37:28.550
保存啊

37:29.450 --> 37:31.150
啊你看都得到这个东西

37:31.150 --> 37:32.450
你看handle click

37:32.750 --> 37:34.750
是吧是不是跑到对象上面去了

37:34.750 --> 37:36.450
他不在原型上面啊

37:36.450 --> 37:37.550
原型上面没有了

37:37.950 --> 37:39.050
啊跑到对象上面去了

37:39.050 --> 37:40.150
这是箭头函数嘛

37:41.150 --> 37:42.550
这样子也不会出问题

37:42.850 --> 37:44.150
那么这种做法呢

37:44.250 --> 37:45.050
其实

37:45.650 --> 37:46.650
这种做法呢

37:47.550 --> 37:48.950
其实就类似于什么呢

37:49.050 --> 37:50.450
它类似于这种做法

37:51.050 --> 37:52.550
对吧这种做法是不是也在

37:52.650 --> 37:54.350
对象上面给他加了两个东西

37:54.350 --> 37:55.750
对吧加了两个函数

37:55.750 --> 37:56.850
他绑定了这一次

37:57.350 --> 37:59.550
啊甚至呢比这种做法的效率还

37:59.750 --> 38:00.450
更高一点

38:00.450 --> 38:01.250
因为这种做法呢

38:01.250 --> 38:03.050
他他原型上面有一个

38:03.050 --> 38:04.350
对象上面也有一个

38:04.450 --> 38:05.150
那这种做法呢

38:05.150 --> 38:06.250
写起来又简单

38:06.350 --> 38:08.650
并且呢只有对象上面有原型上面没有

38:09.350 --> 38:10.250
好这样子呢

38:10.250 --> 38:11.650
也可以搞定这一次

38:11.950 --> 38:13.250
所以大家注意一下啊

38:13.550 --> 38:15.450
在绑定事件的时候

38:15.450 --> 38:17.950
就是给这个事件属性复制的时候呢

38:18.150 --> 38:19.850
啊如果你要复制一个函数

38:19.850 --> 38:20.950
这个函数如果

38:21.050 --> 38:22.250
是你内里边的

38:22.350 --> 38:23.650
一个方法啊

38:23.650 --> 38:25.250
如果是你内里边的一个方法

38:25.350 --> 38:27.050
那么你要考虑到Z's的问题

38:27.150 --> 38:28.150
那么你要把这个方法

38:28.150 --> 38:29.850
来写成这个这种箭头函数

38:30.850 --> 38:32.050
好这是第二种做法啊

38:32.250 --> 38:33.550
一般就是这两种做法

38:33.550 --> 38:35.350
来处理这个Z's指向的问题

38:36.350 --> 38:37.750
好这是关于这个

38:37.950 --> 38:40.150
事件处理程序里边的Z's

38:40.150 --> 38:41.150
该怎么来处理

38:42.650 --> 38:44.350
嗯然后事件还有啥呢

38:45.050 --> 38:45.850
事件就没啥了

38:45.850 --> 38:46.750
就真没啥了

38:47.450 --> 38:49.150
事件本质上再过一遍啊

38:49.150 --> 38:50.950
事件本质上就是一个属性

38:50.950 --> 38:52.150
一个普通的属性

38:52.150 --> 38:53.150
只不过他传了一个

38:53.250 --> 38:55.150
传了一个函数过去

38:55.950 --> 38:57.150
啊传了个函数过去

38:57.350 --> 38:58.650
然后呢

38:59.650 --> 39:00.850
你在合适的时候

39:00.850 --> 39:01.950
组建在合适的时候

39:01.950 --> 39:03.150
会调用这个函数

39:03.550 --> 39:04.750
那么这边呢

39:04.750 --> 39:06.050
会给他一个处理程序

39:06.050 --> 39:08.350
那么调用函数就相当于是调用了这些函数

39:09.750 --> 39:10.150
怎么样

39:10.250 --> 39:10.750
onclick

39:10.750 --> 39:11.750
传一个属性过去

39:11.750 --> 39:12.750
传一个函数过去

39:12.850 --> 39:13.750
那么另外一边呢

39:13.750 --> 39:15.750
他会在适当的时候调用这个函数

39:15.750 --> 39:17.150
那么就相当于是调用了这个

39:17.150 --> 39:20.050
但是你要注意Z's绑定的问题啊

39:20.050 --> 39:21.050
Z's绑定的问题

39:21.050 --> 39:22.250
如果你不处理的话

39:22.250 --> 39:24.250
他会指向的是 onDefend

39:25.550 --> 39:26.050
好了

39:26.050 --> 39:28.350
其他的就没有什么了

39:28.350 --> 39:32.550
好这是关于Z's指向的问题

39:32.550 --> 39:33.750
以及事件处理

39:33.750 --> 39:34.450
好下的一颗啊

39:34.450 --> 39:36.350
还是按照惯例来做一个小的demo

