WEBVTT

00:00.430 --> 00:03.830
这一课是一个扩展课程

00:03.830 --> 00:06.430
我们讲一讲React 动作的事件

00:06.430 --> 00:09.630
也可以算是一个补充知识吧

00:09.630 --> 00:13.830
这一块的东西说实话了

00:13.830 --> 00:19.430
如果你开发的就是一个纯粹的React 应用的话

00:19.430 --> 00:21.430
这块东西根本就用不到

00:21.430 --> 00:23.430
这一块的知识完全用不到

00:23.430 --> 00:27.030
这一块的知识你需要在什么时候才能用到呢

00:27.030 --> 00:28.830
就比方说在React 里面

00:28.830 --> 00:32.430
你要跟一些第三方的动物插件

00:32.430 --> 00:34.830
比方说网上什么Jquery

00:34.830 --> 00:38.230
JqueryAnimate 动物化插件

00:38.230 --> 00:39.230
这些方式发招

00:39.230 --> 00:43.430
基于原生动物的这些插件混着用的时候

00:43.430 --> 00:46.830
你要注意一下React 里面的一些事件

00:46.830 --> 00:49.630
可能跟你想象的不太一样

00:49.630 --> 00:51.430
好 我们这里就来说一下

00:51.430 --> 00:53.030
React 里面的事件

00:53.030 --> 00:56.430
它的整个原理是怎么回事

00:56.430 --> 00:58.630
不会讲得太深

00:58.630 --> 01:02.030
因为这一块知识首先本身就不是很常见

01:02.030 --> 01:04.830
另外一块就是

01:04.830 --> 01:07.630
这里面的如果你要把透彻的讲清楚的话

01:07.630 --> 01:08.830
你还要设一道原

01:08.830 --> 01:11.030
所以说这一块我们不会讲得太深

01:11.030 --> 01:14.430
但是它的基本原理我们一定会讲清楚

01:14.430 --> 01:17.030
React 里面它是这样子的

01:17.030 --> 01:20.030
它是说就是React 它是在做这个框架的

01:20.030 --> 01:21.030
也不算框架吧

01:21.030 --> 01:23.630
做这个裤的时候它就想到这个问题了

01:23.630 --> 01:26.630
因为React 里面不是有很多内置组件吗

01:26.630 --> 01:27.230
对不对

01:27.230 --> 01:29.430
咱们这里说的事件

01:29.430 --> 01:31.030
说的还不是什么

01:31.030 --> 01:32.630
我们自定义组件里面的事件

01:32.630 --> 01:33.830
那个事件没什么好说的

01:33.830 --> 01:34.830
就是传递一个函数

01:34.830 --> 01:36.430
你自己去调用你玩的事

01:36.430 --> 01:38.030
不是说那种事件

01:38.030 --> 01:41.230
我们这里说的事件指的是

01:41.230 --> 01:42.630
这里的事件

01:42.630 --> 01:45.030
就是我们这一节课说的事件

01:45.030 --> 01:46.030
指的是什么呢

01:46.030 --> 01:51.940
指的是React 内置的框架组件

01:51.940 --> 01:52.940
中的事件

01:52.940 --> 01:55.940
什么按钮的onclick

01:55.940 --> 01:57.940
文门框的onfocus

01:57.940 --> 02:01.540
像这么一些跟动物组件很相似的这么一些事件

02:01.540 --> 02:02.940
说的是这么一个东西

02:02.940 --> 02:04.540
内置的动物组件中的事件

02:04.540 --> 02:05.940
我们指的是这么一块事件

02:05.940 --> 02:08.540
React 还在做这个框的时候

02:08.540 --> 02:09.540
他就想到了

02:09.540 --> 02:13.340
我得把我们ATM里面的很多的元素

02:13.340 --> 02:15.540
我都得把它做成一个一个的组件

02:15.540 --> 02:16.940
把它做成一个一个的组件

02:16.940 --> 02:18.140
但是这一组件是通用的

02:18.140 --> 02:19.740
你可以通过create

02:19.740 --> 02:20.740
我们还不知道

02:20.740 --> 02:23.740
我们还记不记得create element来创建

02:23.740 --> 02:24.740
对吧

02:24.740 --> 02:25.940
来创建这个组件

02:25.940 --> 02:27.340
你写像组件的名称就行了

02:27.340 --> 02:28.340
比方说div

02:28.340 --> 02:29.340
什么header

02:29.340 --> 02:30.540
你写像名称就行了

02:30.540 --> 02:32.340
它会自动给你创建这么一个组件

02:33.740 --> 02:35.140
指的是这么一块组件

02:35.140 --> 02:36.140
那么这些组件里面

02:36.140 --> 02:37.140
它有事件

02:37.140 --> 02:37.940
它就这样的想

02:37.940 --> 02:39.540
我在写这个库的时候

02:39.540 --> 02:44.540
如果说我给每一个真实的动物元素

02:44.540 --> 02:46.540
去给它写这个事件的话

02:46.540 --> 02:48.140
那么整个页面中

02:48.140 --> 02:49.940
会充斥着各种各样的事件

02:49.940 --> 02:51.340
事件会非常非常多

02:51.340 --> 02:55.740
会影响整个页面的执行效率

02:55.740 --> 02:57.340
它会影响执行效率

02:57.340 --> 02:59.140
所以从来它没有这样做

02:59.140 --> 03:02.940
而它转而使用了一种效率更高的做法

03:02.940 --> 03:03.540
怎么做呢

03:03.540 --> 03:04.540
它是这样子

03:04.540 --> 03:05.940
在react里面

03:05.940 --> 03:13.540
它是给document注册事件

03:13.540 --> 03:15.740
就是我们其实写的那些事件

03:15.740 --> 03:17.940
最一种都是在document里面注册的

03:18.340 --> 03:19.140
就react了

03:19.140 --> 03:20.540
它一开始给document

03:20.540 --> 03:22.140
document是真实的动物元素

03:22.140 --> 03:23.340
就是真实的动物节点

03:23.340 --> 03:24.740
它是包含整个网页的

03:24.740 --> 03:26.540
它给document来注册事件

03:26.540 --> 03:32.340
所有的元素事件处理

03:32.340 --> 03:35.540
事件处理

03:35.540 --> 03:38.140
军在

03:38.140 --> 03:40.340
应该说几乎

03:40.340 --> 03:43.340
几乎所有元素的事件处理

03:43.340 --> 03:44.140
军在

03:44.140 --> 03:44.740
以后我们再说

03:44.740 --> 03:45.940
为什么叫几乎

03:45.940 --> 03:47.740
几乎所有的元素的事件处理

03:47.940 --> 03:50.740
军在document的事件中

03:51.740 --> 03:52.140
处理

03:52.140 --> 03:53.340
因为我们知道

03:53.340 --> 03:55.140
元素它的事件

03:55.140 --> 03:56.340
它是会冒泡的

03:56.340 --> 03:57.740
比方说你点了一个DIV

03:57.740 --> 03:58.540
它会往上冒

03:58.540 --> 03:59.340
冒到复元素

03:59.340 --> 04:00.540
复元素再冒到复元素

04:00.540 --> 04:02.140
最终冒泡到

04:02.140 --> 04:03.140
冒泡到document

04:03.140 --> 04:03.540
对吧

04:03.540 --> 04:05.340
那么所性react

04:05.340 --> 04:07.340
它就根本就不去监听这些DIV

04:07.340 --> 04:08.340
什么安留的事件了

04:08.340 --> 04:09.340
一个都不监听

04:09.340 --> 04:11.540
它只监听document的事件

04:11.540 --> 04:13.740
在document里面进行统一处理

04:14.940 --> 04:16.340
那么在document里面

04:16.340 --> 04:17.140
它怎么来处理呢

04:17.140 --> 04:18.340
它就设计到它的原码了

04:18.340 --> 04:19.540
它会循环比方说

04:19.540 --> 04:21.740
我们整个有个组建素

04:21.740 --> 04:22.540
有个组建素

04:22.540 --> 04:23.540
在组建素里边

04:23.540 --> 04:24.740
用哪些事件注册的

04:24.740 --> 04:26.740
哪些事件的函数

04:26.740 --> 04:27.740
需要调用

04:27.740 --> 04:30.740
全部是在document里面进行处理的

04:30.740 --> 04:31.540
我们再说

04:31.540 --> 04:36.340
在document的事件处理中

04:36.340 --> 04:45.340
react会根据实际的虚拟动物数

04:46.340 --> 04:48.340
会根据虚拟动物数的结构

04:50.140 --> 04:51.340
不是真实的动物

04:51.340 --> 04:53.340
所以说我们当时之前讲那个portal

04:53.340 --> 04:54.540
就可以把一个元素

04:54.540 --> 04:56.540
眩亮到另外一个真实的动物里边去

04:56.540 --> 04:58.340
但是它的元素结构

04:58.340 --> 04:59.740
就是虚拟动物数结构

04:59.740 --> 05:00.940
还是没有发生变化

05:00.940 --> 05:02.540
会根据虚拟动物数

05:02.540 --> 05:06.140
完成事件函数的调用

05:06.140 --> 05:07.740
它会一次完成事件函数的调用

05:07.740 --> 05:09.140
举个例子吧

05:09.140 --> 05:11.340
比方说咱们的

05:11.340 --> 05:12.140
就这个嘛

05:12.140 --> 05:13.340
上一课咱们写的

05:13.340 --> 05:16.940
比方说这里写的是一个comp

05:16.940 --> 05:18.340
就随便写吧

05:18.340 --> 05:20.740
就随便写一个

05:20.740 --> 05:21.740
比方说这里

05:21.740 --> 05:23.740
我给他注册了一个unclick

05:23.740 --> 05:26.340
给他注册了一个unclick事件

05:26.340 --> 05:27.940
unclick

05:27.940 --> 05:29.340
unclick事件

05:29.340 --> 05:31.140
然后在这里注册了一个unclick

05:31.140 --> 05:32.740
也有一个unclick事件

05:32.740 --> 05:35.540
在这里有一个unclick事件

05:35.540 --> 05:37.740
那么它是怎么来冒泡

05:37.740 --> 05:38.340
来完成的

05:38.340 --> 05:39.740
它是这样子

05:39.740 --> 05:42.940
它跟真实的动物对象没有什么关系

05:42.940 --> 05:44.140
真实的动物对象是什么

05:44.140 --> 05:45.940
真实的动物对象是右边的课数

05:45.940 --> 05:47.140
我就画一个就行了

05:47.140 --> 05:47.940
document

05:47.940 --> 05:49.540
右边的是真实的动物对象

05:49.540 --> 05:53.120
真实的动物数

05:53.120 --> 05:55.820
右边这一块是真实的动物数

05:55.820 --> 05:58.020
然后这里有什么

05:58.020 --> 06:01.220
header

06:01.220 --> 06:01.720
body

06:01.720 --> 06:02.420
后面就不写了

06:02.420 --> 06:03.020
我就不写了

06:03.020 --> 06:04.320
就是个真实动物数

06:04.320 --> 06:07.120
它的事件监听全在这

06:07.120 --> 06:10.620
全部都在这

06:10.620 --> 06:11.820
也就是它不会去监听

06:11.820 --> 06:13.120
这些元素生成的事件

06:13.120 --> 06:14.120
它根本就不会监听

06:14.220 --> 06:15.320
它只在这里监听

06:15.320 --> 06:17.720
所以这些东西我们根本就不看了

06:17.720 --> 06:19.320
它只在这里监听事件

06:19.320 --> 06:21.920
当这里发生了一个unclick事件的时候

06:21.920 --> 06:24.520
它会从这个虚立的动物数里面去找

06:24.520 --> 06:26.320
我的虚立动物数的结构是什么样子的

06:26.320 --> 06:27.620
原来是这个样子

06:27.620 --> 06:29.620
有哪些节点注册的事件

06:29.620 --> 06:31.420
比方说这三个节点注册了事件的

06:31.420 --> 06:32.320
OK

06:32.320 --> 06:33.620
那么我调用了顺序

06:33.620 --> 06:34.320
我在这里

06:34.320 --> 06:35.120
是不是有一个对列

06:35.120 --> 06:35.320
对吧

06:35.320 --> 06:36.720
一个事件处理的对列

06:36.720 --> 06:37.020
OK

06:37.020 --> 06:38.120
我调用的顺序就是

06:38.120 --> 06:39.220
先调用它的

06:39.220 --> 06:40.220
再调用它的

06:40.220 --> 06:41.120
再调用它的

06:41.120 --> 06:42.720
是这么个意思

06:42.720 --> 06:43.320
注意

06:43.320 --> 06:44.920
它是这么一个意思

06:44.920 --> 06:45.820
一定要搞清楚

06:47.620 --> 06:49.320
没问题吧

06:49.320 --> 06:50.120
没问题吧

06:50.120 --> 06:51.420
它是这么一个意思

06:51.420 --> 06:52.820
它说这个元素结构

06:52.820 --> 06:54.320
跟那个真实的动物元素

06:54.320 --> 06:55.220
当然它有一定关系

06:55.220 --> 06:56.820
但是完全是粮骂事

06:56.820 --> 06:57.720
粮骂事

06:57.720 --> 06:59.820
它在事件处理的时候

06:59.820 --> 07:01.320
对于真实的动物的事件处理

07:01.320 --> 07:03.320
它只给它注册事件

07:03.320 --> 07:04.620
当它的事件出发的时候

07:04.620 --> 07:06.020
那一定是冒泡上来的

07:06.020 --> 07:07.320
管它谁冒泡上来的

07:07.320 --> 07:08.220
无所谓

07:08.220 --> 07:10.020
我无所谓管它谁冒泡上来的

07:10.020 --> 07:13.020
我完全看的是虚立的动物数

07:13.020 --> 07:14.020
我看一下虚立的动物数里边

07:14.020 --> 07:14.820
哪些注册了这个

07:14.820 --> 07:16.320
同一个名字的事件

07:16.320 --> 07:16.620
好

07:16.620 --> 07:17.920
那么我去找到这些事件

07:17.920 --> 07:19.520
挨在它的运行

07:19.520 --> 07:22.320
它是用这种模式来运行的

07:22.320 --> 07:23.520
所以说我们这里

07:23.520 --> 07:24.920
给大家看一个神奇的效果

07:26.620 --> 07:28.220
src里边

07:28.220 --> 07:29.720
这里边比方说

07:29.720 --> 07:31.220
这里边有个按钮

07:31.220 --> 07:32.720
一个按钮

07:32.720 --> 07:34.220
按钮

07:34.220 --> 07:35.320
那么点击这个按钮

07:35.320 --> 07:36.620
给它做一个onclick事件

07:37.920 --> 07:38.620
点击这个按钮

07:38.620 --> 07:41.420
我们输出一个简单的一句话

07:41.520 --> 07:42.220
按钮

07:42.220 --> 07:43.520
被点击了

07:43.520 --> 07:45.120
这是reactor的事件

07:45.120 --> 07:46.220
reactor的事件

07:46.220 --> 07:48.320
按钮被点击了

07:48.320 --> 07:50.020
现在我们做这么一件

07:50.020 --> 07:51.520
有意思的事情

07:51.520 --> 07:53.320
在index里边

07:53.320 --> 07:55.020
或者就我们就在这

07:55.020 --> 07:56.320
就在这

07:56.320 --> 07:57.820
我再写一代

07:57.820 --> 07:59.320
document

07:59.320 --> 08:01.620
query selector

08:01.620 --> 08:03.520
选中真实的动物元素

08:03.520 --> 08:05.620
这个是不是真实的动物元素

08:05.620 --> 08:06.120
是不是

08:06.120 --> 08:07.020
你不要告诉我是

08:07.020 --> 08:07.820
我讲了那么久了

08:07.820 --> 08:08.220
都快讲了

08:08.220 --> 08:09.220
经纪都快讲完了

08:09.220 --> 08:09.520
你告诉我

08:09.520 --> 08:11.120
这个是真实的动物元素

08:11.120 --> 08:14.420
这个是rex的虚力动物

08:14.420 --> 08:16.520
它本质上就是一个对象

08:16.520 --> 08:19.020
它的本质就是一个对象而已

08:19.020 --> 08:20.520
没问题吧

08:20.520 --> 08:22.720
那看我们的现在的组件数是这样子

08:22.720 --> 08:24.820
我们的现在的组件数是这个样子

08:24.820 --> 08:26.620
这个app下面有一个什么

08:26.620 --> 08:27.820
有一个div

08:27.820 --> 08:28.520
对吧

08:28.520 --> 08:29.620
app下面有一个div

08:29.620 --> 08:30.220
这是个组件

08:30.220 --> 08:31.120
对不对

08:31.120 --> 08:31.520
ok

08:31.520 --> 08:33.720
那么div下面有一个什么

08:33.720 --> 08:36.420
我们的组件数是button

08:36.420 --> 08:38.220
有一个button

08:38.220 --> 08:39.920
button里边有一个onclick事件

08:39.920 --> 08:40.420
对吧

08:40.420 --> 08:42.420
这是我们的虚力动物结构

08:42.420 --> 08:44.420
然后真实动物我们看都不用去看

08:44.420 --> 08:45.620
看都不要去看

08:45.620 --> 08:47.120
现在的我们比方说

08:47.120 --> 08:48.720
一面上我们去选中

08:48.720 --> 08:49.720
选中谁呢

08:49.720 --> 08:53.720
选中这个div

08:53.720 --> 08:57.220
比方说我们选中一面上的div

08:57.220 --> 08:59.320
或者说选中这个吗

08:59.320 --> 09:00.320
root

09:00.320 --> 09:02.220
我们这里不是有这么一个div吗

09:02.220 --> 09:02.720
对不对

09:02.720 --> 09:03.520
root

09:03.520 --> 09:04.720
我们选中它

09:04.720 --> 09:07.720
然后给它注册点击事件

09:07.720 --> 09:09.920
onclick

09:10.020 --> 09:10.620
onclick

09:10.620 --> 09:13.220
消息的点击事件

09:13.220 --> 09:15.620
点击事件里面我们写这么一件事

09:15.620 --> 09:16.820
输出什么

09:16.820 --> 09:21.020
输出id为

09:21.020 --> 09:22.320
这个是

09:22.320 --> 09:23.720
这是真实动物事件

09:23.720 --> 09:25.520
真实的

09:25.520 --> 09:28.620
真实的动物事件

09:28.620 --> 09:32.820
id为入彩的div被点击了

09:32.820 --> 09:33.820
咱们来看一下

09:33.820 --> 09:35.020
它的输出

09:35.020 --> 09:36.620
先后顺序

09:36.620 --> 09:37.620
保存

09:37.620 --> 09:38.420
看一下

09:38.420 --> 09:39.620
按理说的话

09:39.720 --> 09:40.920
我们点了这个按钮

09:40.920 --> 09:41.720
按钮里面有个事件

09:41.720 --> 09:42.020
对吧

09:42.020 --> 09:43.320
那么先输出按钮的文本

09:43.320 --> 09:44.120
然后再冒泡

09:44.120 --> 09:44.820
冒泡到这

09:44.820 --> 09:46.220
再输出这个div的文本

09:46.220 --> 09:47.520
那么咱们来看一下

09:47.520 --> 09:51.420
因为看到它先输出的是这个div的文本

09:51.420 --> 09:52.720
为什么呢

09:52.720 --> 09:55.120
因为按钮事件的调用

09:55.120 --> 09:56.920
它是在什么时候调用的

09:56.920 --> 09:58.420
它是要等到它冒泡到

09:58.420 --> 09:59.320
document的时候

09:59.320 --> 10:01.720
才会真正的去调用这个事件

10:01.720 --> 10:02.320
调用的顺序

10:02.320 --> 10:04.920
就是找到它的同一个onclick事件

10:04.920 --> 10:06.120
那么先调用它

10:06.120 --> 10:06.820
那么点到按钮

10:06.820 --> 10:07.120
对吧

10:07.120 --> 10:08.120
那就调用它

10:08.120 --> 10:09.620
调用它

10:09.620 --> 10:09.820
对吧

10:09.820 --> 10:11.020
点到是这个按钮去调用它

10:11.020 --> 10:12.720
那么如果div还有这个事件的话

10:12.720 --> 10:14.920
那么也会调用这个div的事件

10:14.920 --> 10:16.020
它会一次调用

10:16.020 --> 10:16.520
冒泡嘛

10:16.520 --> 10:16.920
对不对

10:16.920 --> 10:18.020
冒泡

10:18.020 --> 10:19.120
没想到这意思吧

10:19.120 --> 10:20.420
我们真实的动物

10:20.420 --> 10:22.420
就是rex的本核心原理

10:22.420 --> 10:23.920
在底层的原理里边

10:23.920 --> 10:26.120
它是为了document注册的事件

10:26.120 --> 10:26.720
因此呢

10:26.720 --> 10:27.920
document是事件的运行

10:27.920 --> 10:29.420
是不是要等到很后面了

10:29.420 --> 10:30.020
对吧

10:30.020 --> 10:30.820
最后一个动物

10:30.820 --> 10:32.620
就是最外层的动物元素了

10:32.620 --> 10:32.820
对吧

10:32.820 --> 10:34.820
最外层的动物了

10:34.820 --> 10:35.720
所以说

10:35.720 --> 10:37.220
它会于先运行

10:37.320 --> 10:39.220
它会先运行这个div

10:39.220 --> 10:40.420
然后再往上冒泡

10:40.420 --> 10:42.320
就真实的动物冒泡

10:42.320 --> 10:43.120
真实的动物冒泡

10:43.120 --> 10:43.620
往上冒泡

10:43.620 --> 10:44.320
往上冒泡

10:44.320 --> 10:45.420
冒泡到atm

10:45.420 --> 10:45.920
再往上

10:45.920 --> 10:46.820
就是document了

10:46.820 --> 10:48.720
再运行document的点击事件

10:48.720 --> 10:48.920
好

10:48.920 --> 10:51.220
document的点击事件里边呢

10:51.220 --> 10:53.020
在document的点击事件里边呢

10:53.020 --> 10:53.720
然后呢

10:53.720 --> 10:57.920
再去运行我们注册的react事件

10:57.920 --> 10:59.320
所以它是这么一种结构

10:59.320 --> 11:00.320
那如果说

11:00.320 --> 11:01.420
你在这里面

11:01.420 --> 11:02.820
在真实动物元素里边

11:02.820 --> 11:05.220
你如果阻止了事件冒泡

11:05.220 --> 11:06.320
在这里阻止了事件冒泡

11:06.520 --> 11:07.420
propagation

11:08.920 --> 11:10.520
会有什么样的结果

11:10.520 --> 11:12.320
想一想会有什么样的结果

11:12.320 --> 11:14.220
react的事件还能运行

11:14.220 --> 11:14.720
哎

11:16.120 --> 11:16.920
stop

11:16.920 --> 11:17.620
怎么写的啊

11:17.620 --> 11:18.820
怎么写的

11:18.820 --> 11:19.820
stop

11:19.820 --> 11:21.720
stoppropagation

11:24.040 --> 11:26.140
那么react的元素的事件还能运行吗

11:26.140 --> 11:26.840
你看

11:26.840 --> 11:28.440
react的事件是不能运行的

11:28.440 --> 11:29.540
为什么不能运行的

11:29.540 --> 11:30.940
因为现在事件

11:30.940 --> 11:32.440
真实的动物冒泡里边

11:32.440 --> 11:34.340
事件数到这就结束了

11:34.340 --> 11:35.840
那么document上就监听不到

11:35.840 --> 11:36.740
这个unclick的事件

11:36.740 --> 11:37.840
监听不到了

11:37.840 --> 11:38.840
document上

11:38.840 --> 11:40.240
unclick事件没有监听到

11:40.240 --> 11:41.540
没有监听到的话

11:41.540 --> 11:44.940
那它还能在事件里边去调用react里边的方法吗

11:44.940 --> 11:47.040
事件处理程序能调用吗

11:47.040 --> 11:48.040
是不是不能调用了

11:48.840 --> 11:49.040
哎

11:49.040 --> 11:51.540
这就是有这么一些神奇的特点

11:51.540 --> 11:52.040
啊

11:52.040 --> 11:52.840
神奇的特点

11:54.240 --> 11:54.840
没问题吧

11:56.040 --> 11:56.540
好

11:56.540 --> 11:57.940
这是这一块啊

11:57.940 --> 11:58.540
这一块

11:59.740 --> 12:01.140
那么另外一点呢

12:01.740 --> 12:03.940
就是咱们说一些注意事项

12:03.940 --> 12:04.740
注意事项

12:05.740 --> 12:07.240
其实这一注意事项呢

12:07.240 --> 12:09.040
你没有必要去使劲应备

12:09.040 --> 12:11.040
你只要理解它的原理的话

12:11.040 --> 12:12.340
你自然而然就清楚了

12:12.340 --> 12:13.440
由于呢

12:13.440 --> 12:14.340
react的事件呢

12:14.340 --> 12:16.640
最终是在document里边统一处理的

12:16.640 --> 12:18.440
还为了提高执行效率

12:18.440 --> 12:21.240
document里边用事件委托来统一处理

12:21.240 --> 12:27.040
就是如果给真实的动物注册事件

12:27.040 --> 12:29.240
跟真实的动物注册事件

12:29.240 --> 12:32.440
阻止了事件冒泡

12:32.440 --> 12:35.140
冒泡

12:36.140 --> 12:38.140
则会导致

12:38.140 --> 12:40.640
react的相用事件

12:41.640 --> 12:42.640
无法触犯

12:43.440 --> 12:46.240
这是如果大家在写一些代码的时候啊

12:46.240 --> 12:47.440
react程序呢

12:47.440 --> 12:50.140
可能跟第三方的一些动物程序结合

12:50.140 --> 12:51.640
结合的时候呢

12:51.640 --> 12:54.340
如果这个动物存在第三方的插件里边

12:54.340 --> 12:55.540
它跟react没有什么关系

12:55.540 --> 12:57.140
在动物第三方的插件里边

12:57.140 --> 12:58.140
它

12:58.140 --> 12:59.140
阻止了事件冒泡

12:59.140 --> 13:01.140
那么你会发现react的事件一个都运行不了

13:02.140 --> 13:03.140
那么相应的事件

13:03.140 --> 13:04.940
它阻止了unclick的事件冒泡

13:04.940 --> 13:07.740
那么react里边所有的unclick一个都运行不了

13:07.740 --> 13:09.140
什么谁都不要想运行

13:09.140 --> 13:10.140
实行吧

13:11.140 --> 13:12.140
这就是这一个点

13:12.140 --> 13:13.140
大家注意一下

13:14.740 --> 13:16.540
那么另外就是我们刚才看到的

13:16.540 --> 13:18.340
如果给真实动物注册事件的话

13:18.340 --> 13:21.340
那么事件会先于react的运行

13:21.340 --> 13:27.140
事件会先于react事件运行

13:27.140 --> 13:27.940
为什么

13:27.940 --> 13:29.840
一招不用去实行一倍

13:29.840 --> 13:31.240
一只到原理就行了

13:31.240 --> 13:33.740
因为它是给documenter注册的事件react的

13:33.740 --> 13:35.240
那等到documenter运行这个事件

13:35.240 --> 13:37.240
那都是很冒泡的最顶层了

13:37.240 --> 13:39.240
所以说那么先会执行前面的事件

13:40.440 --> 13:41.040
好吧

13:41.040 --> 13:43.950
这是关于这一块

13:43.950 --> 13:44.150
好

13:44.150 --> 13:47.350
那么如果说我在react的事件里边

13:47.350 --> 13:48.750
阻止了事件冒泡

13:48.750 --> 13:49.850
那就会怎么样了

13:51.750 --> 13:53.050
事件参数亿

13:53.050 --> 13:54.050
stop

13:54.050 --> 13:54.950
propagation

13:54.950 --> 13:56.950
在这里边阻止了事件冒泡

13:56.950 --> 13:59.550
点了按钮过后阻止了事件冒泡

13:59.550 --> 14:03.250
那么它会影响到我们真实动物的事件吗

14:03.250 --> 14:04.850
这句话会不会输出

14:04.850 --> 14:05.650
这句话会不会输出

14:05.650 --> 14:07.450
我们把这里注释掉

14:07.450 --> 14:09.650
这句话会不会输出

14:09.650 --> 14:12.150
这句话不但会输出

14:12.150 --> 14:14.750
而且它还要先于它输出

14:14.750 --> 14:16.550
能阻止真实动物的事件吗

14:16.550 --> 14:18.050
是不是不能阻止

14:18.050 --> 14:19.150
为什么不能阻止

14:19.150 --> 14:21.750
因为你在这里面去阻止事件冒泡

14:21.750 --> 14:22.950
有什么意义呢

14:22.950 --> 14:24.150
没有什么意义

14:24.150 --> 14:25.250
但是呢

14:25.250 --> 14:26.050
这个stop

14:26.050 --> 14:27.250
那这样来说的话

14:27.350 --> 14:28.350
stoppapropagation

14:28.350 --> 14:29.550
没有什么意义了

14:29.550 --> 14:30.450
在react里面

14:30.450 --> 14:31.750
这个东西有啥意义呢

14:31.750 --> 14:33.750
因为它已经是document了

14:33.750 --> 14:35.350
已经是document了

14:35.350 --> 14:36.950
还能往上冒吗

14:36.950 --> 14:38.150
没法往上冒了

14:38.150 --> 14:40.550
那你这里去阻止事件冒泡有什么意义呢

14:40.550 --> 14:41.950
没有任何意义了

14:41.950 --> 14:43.750
实际上会是怎么回事呢

14:43.750 --> 14:45.450
实际上是这个事件参数亿

14:45.450 --> 14:46.950
根本就不是

14:48.250 --> 14:49.550
真实的事件参数

14:51.150 --> 14:52.150
这个事件参数亿

14:52.150 --> 14:54.750
根本就不是一个真实的事件参数

14:54.750 --> 14:56.850
它是一个合成参数

14:56.850 --> 14:57.350
你看一下

14:58.350 --> 14:59.550
它是一个合成参数

14:59.550 --> 15:00.750
看上去了像

15:00.750 --> 15:01.850
它确实像

15:01.850 --> 15:02.750
但是呢

15:02.750 --> 15:05.850
它不是真实事件参数

15:05.850 --> 15:06.850
就是咱们这一记一笔

15:10.150 --> 15:14.450
react的事件中的事件参数

15:14.450 --> 15:18.050
并非真实的dome事件参数

15:19.650 --> 15:23.150
是react合成的一个对象

15:24.150 --> 15:28.150
该对象类似于

15:28.150 --> 15:34.450
类似于真实dome的事件参数

15:34.450 --> 15:36.550
它把真实dome里面事件参数的

15:36.550 --> 15:38.150
一些什么相应的函数

15:38.150 --> 15:39.550
什么相应的属性

15:39.550 --> 15:40.950
全部给你重新实现了一遍

15:40.950 --> 15:42.750
但是不是真实的

15:42.750 --> 15:44.350
因此呢

15:44.350 --> 15:46.350
这里边很多东西跟你想象的不一样

15:46.350 --> 15:47.550
比方说

15:47.550 --> 15:49.350
比方说那个这个事件参数

15:49.350 --> 15:49.850
动的是吧

15:49.850 --> 15:51.950
stop propagation

15:52.150 --> 15:52.650
对吧

15:52.650 --> 15:53.650
它比方说这个函数

15:53.650 --> 15:55.050
这个函数有什么用呢

15:55.050 --> 15:55.750
这个函数

15:55.750 --> 15:58.850
它组织的不是真实的事件冒泡

15:58.850 --> 16:03.150
组织的是事件在虚拟dome

16:03.750 --> 16:04.850
树中的冒泡

16:06.450 --> 16:07.750
它组织的是这个冒泡

16:08.950 --> 16:09.550
冒泡

16:10.750 --> 16:11.550
它是这样子

16:11.550 --> 16:12.450
你看那个图

16:12.450 --> 16:13.850
比方说它点击的

16:13.850 --> 16:15.350
那么如果在这里面组织的事件冒泡

16:15.350 --> 16:17.850
那么div这个点击事件是无效的

16:17.850 --> 16:18.250
那看

16:18.250 --> 16:20.850
我们在div里边写个点击事件

16:20.850 --> 16:22.850
在div里边写个点击事件

16:22.850 --> 16:26.520
cliq

16:26.520 --> 16:27.620
在这里边

16:27.620 --> 16:30.220
输出输出regs

16:30.220 --> 16:31.220
这是regs的事件

16:31.220 --> 16:33.020
div被点击了

16:33.020 --> 16:33.620
你看

16:33.620 --> 16:35.020
它组织的只是这个

16:36.320 --> 16:36.920
点击

16:36.920 --> 16:37.320
点击

16:37.320 --> 16:38.020
你看

16:38.020 --> 16:38.820
按钮被点击了

16:38.820 --> 16:39.920
然后组织的事件冒泡

16:39.920 --> 16:41.820
于是div的点击事件没有收到

16:41.820 --> 16:42.620
那它怎么回事呢

16:42.620 --> 16:43.420
你可以完全想象

16:43.420 --> 16:45.620
这个非常简单实现起来

16:45.620 --> 16:47.220
它是这样子

16:47.220 --> 16:48.620
那么

16:48.620 --> 16:50.620
它是做个标记

16:50.620 --> 16:52.420
就是说比方说做个布尔标记

16:53.820 --> 16:54.820
就是

16:54.820 --> 16:56.620
ease stopped

16:56.620 --> 16:58.220
ease stopped

16:58.220 --> 16:59.220
比方说

16:59.220 --> 17:00.220
当然不是这样子

17:00.220 --> 17:02.020
实际上原码里面不是这样子

17:02.020 --> 17:04.120
要做个布尔标记

17:04.120 --> 17:04.820
默认为force

17:04.820 --> 17:05.820
是不是阻止了

17:05.820 --> 17:07.420
那么这里开始循环

17:07.420 --> 17:08.420
循环

17:08.420 --> 17:09.120
循环什么的

17:09.120 --> 17:11.020
我们写到这吧

17:11.020 --> 17:12.620
大概是怎么回事

17:12.620 --> 17:13.720
大概是这样子

17:13.720 --> 17:14.320
做个标记

17:14.320 --> 17:15.420
然后循环

17:15.420 --> 17:16.420
循环什么

17:16.420 --> 17:18.620
循环它这里边的所有的事件

17:18.620 --> 17:18.920
对吧

17:18.920 --> 17:20.620
用forf循环

17:20.620 --> 17:23.020
循环比方说一个事件对列

17:23.120 --> 17:23.920
handle

17:23.920 --> 17:25.620
一个事件处理对列

17:25.620 --> 17:26.720
event handle

17:26.720 --> 17:28.120
它有个数组

17:28.120 --> 17:30.620
这个数组里面包含了所有的事件处理程序

17:30.620 --> 17:31.120
就比方说

17:31.120 --> 17:33.120
这里DIV不是一个unclick吗

17:33.120 --> 17:33.420
对吧

17:33.420 --> 17:34.120
unclick

17:34.120 --> 17:36.120
那么这些属性是不是有值

17:36.120 --> 17:37.620
那么它把这些属性的值

17:37.620 --> 17:38.820
放到一个数组里边

17:38.820 --> 17:40.220
咱们来循环调用

17:40.220 --> 17:41.320
循环调用

17:41.320 --> 17:42.320
怎么调用

17:42.320 --> 17:44.820
那么它就是循环这个数组

17:44.820 --> 17:45.720
然后去调用这个

17:45.720 --> 17:46.720
就大概写一下

17:46.720 --> 17:47.920
大概是这么个意思

17:47.920 --> 17:49.020
那么调用这个

17:49.020 --> 17:50.420
然后传入什么

17:50.420 --> 17:52.220
传入事件参数翼

17:52.220 --> 17:53.520
传入事件参数翼

17:53.520 --> 17:55.920
那么如果发现运行的事件过后

17:55.920 --> 17:56.720
运行的事件过后

17:56.720 --> 17:57.720
如果发现翼

17:57.720 --> 18:00.220
比方说这个事件参数翼

18:00.220 --> 18:01.920
这个stopped

18:01.920 --> 18:02.920
比方说

18:03.820 --> 18:05.020
已经被阻止了

18:05.020 --> 18:05.920
那么就break

18:05.920 --> 18:06.620
退出循环

18:06.620 --> 18:07.420
就不要再运行了

18:07.420 --> 18:09.020
它是用这种方式来做的

18:09.020 --> 18:10.120
能看懂吗

18:10.120 --> 18:10.820
当然这个属性

18:10.820 --> 18:12.120
它不是在外面的属性

18:12.120 --> 18:13.120
它实际上是在

18:13.120 --> 18:15.020
事件参数翼里边的属性

18:15.020 --> 18:16.420
is stopped

18:16.420 --> 18:18.420
实际上是这么个属性

18:18.420 --> 18:19.920
其实我们可以看到这个属性

18:19.920 --> 18:20.420
真的

18:20.420 --> 18:22.120
我们实际上是可以看到这个属性的

18:22.220 --> 18:23.420
属性在哪里看到呢

18:23.420 --> 18:25.120
我们把这里阻止事件爆炮之后

18:25.120 --> 18:26.420
我们看一下

18:26.420 --> 18:27.820
is stopped

18:27.820 --> 18:28.720
properation stopped

18:28.720 --> 18:29.720
就是这个属性

18:29.720 --> 18:30.920
就是这个属性

18:32.520 --> 18:34.720
这个属性好像是个函数

18:34.720 --> 18:35.720
它是个函数

18:35.720 --> 18:36.920
这个函数返回一个布尔

18:36.920 --> 18:38.520
是否是阻止了事件爆炮

18:38.520 --> 18:39.720
咱们先输出一个

18:39.720 --> 18:41.320
在阻止之前先输出一下

18:41.320 --> 18:42.120
在阻止之后

18:42.120 --> 18:43.320
先再输出一下

18:44.020 --> 18:44.920
看一下

18:45.720 --> 18:46.320
你看

18:46.320 --> 18:47.520
先输出了什么

18:47.520 --> 18:48.020
force

18:48.020 --> 18:48.820
再输出了什么

18:48.820 --> 18:49.920
to

18:49.920 --> 18:51.220
先输出了force

18:51.220 --> 18:52.820
再输出了to

18:52.820 --> 18:56.720
那么当循环运行这些事件的时候

18:56.720 --> 18:59.320
他发现这个事件参数里边

18:59.320 --> 19:00.420
他已经

19:00.420 --> 19:03.320
已经决定就是停止了

19:03.320 --> 19:04.320
那么停止之后

19:04.320 --> 19:06.720
他就不会再继续运行后边代码了

19:06.720 --> 19:08.420
就这么个意思

19:08.420 --> 19:08.820
好

19:08.820 --> 19:10.020
那么这样子

19:10.020 --> 19:10.720
也就是说

19:10.720 --> 19:12.520
这样子阻止的是啥

19:12.520 --> 19:13.120
再说一次

19:13.120 --> 19:15.820
阻止的是虚拟的动物的事件爆炮

19:15.820 --> 19:17.520
跟真实动物是没关系的

19:17.520 --> 19:18.720
真实动物还能阻止吗

19:18.720 --> 19:19.820
你告诉我还能阻止吗

19:19.820 --> 19:20.720
都爆炮到这了

19:20.720 --> 19:21.620
还能阻止吗

19:21.620 --> 19:22.820
说跟真实动物

19:22.820 --> 19:24.520
你看真实动物是阻止不了的

19:24.520 --> 19:25.520
是阻止不了的

19:25.520 --> 19:28.020
所以说咱们再记一笔

19:28.020 --> 19:33.220
react中的事件

19:33.220 --> 19:44.430
通过react中的事件中

19:44.430 --> 19:48.030
阻止事件爆炮

19:48.030 --> 19:52.630
无法阻止真实的动物事件

19:52.630 --> 19:55.530
这些东西其实你不用去背着这些东西

19:55.530 --> 19:57.630
只是说你要理解它的原理

19:57.630 --> 20:01.030
理解到它自然就理解这个东西了

20:01.030 --> 20:01.130
好

20:01.130 --> 20:02.930
然后我们再说

20:02.930 --> 20:06.930
然后react里边

20:06.930 --> 20:08.730
它还有这个东西

20:08.730 --> 20:10.330
就是说react里边我们得不到

20:10.330 --> 20:12.530
得到的是何层的事件对象

20:12.530 --> 20:13.830
对吧

20:13.830 --> 20:15.630
那如果我们要找到真实动物对象

20:15.630 --> 20:16.830
怎么办呢

20:16.830 --> 20:17.630
可以

20:17.630 --> 20:19.830
react里边给你提供了这个东西

20:19.830 --> 20:20.830
你可以通过这个事件参数

20:20.830 --> 20:25.530
意义里边有一个Event

20:25.530 --> 20:26.830
就是本地事件

20:26.830 --> 20:28.730
可以通过这个署项

20:28.730 --> 20:30.530
通过这个署项

20:30.530 --> 20:35.430
可以得到真实的动物事件对象

20:35.430 --> 20:37.630
就是它不是给documenter注册事件吗

20:37.630 --> 20:39.330
documenter里边不是一个事件对象吗

20:39.330 --> 20:39.530
对吧

20:39.530 --> 20:40.430
一个参数

20:40.430 --> 20:40.630
好

20:40.630 --> 20:42.630
那么那个是真实的事件参数

20:42.630 --> 20:43.530
就是这

20:43.530 --> 20:45.830
它是正常这种方式来注册事件的

20:45.830 --> 20:47.730
给documenter,add,event,listener

20:47.730 --> 20:49.830
比方说unclick

20:49.830 --> 20:52.030
unclick

20:52.030 --> 20:52.630
事件

20:52.630 --> 20:53.830
然后呢

20:53.830 --> 20:55.830
这个事件参数

20:55.830 --> 20:56.530
这个事件参数

20:56.530 --> 20:58.630
这个事件参数跟这个事件参数一不一样

20:58.630 --> 20:59.930
它肯定不一样

20:59.930 --> 21:01.330
肯定不一样

21:01.330 --> 21:03.030
这是何层的事件对象

21:03.030 --> 21:04.430
这是真实动物对象

21:04.430 --> 21:07.330
那如果你需要在这里得到真实动物对象怎么办呢

21:07.330 --> 21:11.690
你可以用这种方式

21:11.690 --> 21:12.790
就是这

21:12.790 --> 21:14.290
native event

21:14.290 --> 21:15.890
通过它来得到真实动物对象

21:15.890 --> 21:16.490
只不过呢

21:16.490 --> 21:18.890
我们通常情况下得到它干嘛呢

21:18.890 --> 21:19.490
你看

21:19.490 --> 21:21.690
这就是咱们熟悉的mouse event

21:21.690 --> 21:22.590
对吧

21:22.590 --> 21:24.490
这就是真实动物对象了

21:24.490 --> 21:25.290
得到它干嘛

21:25.290 --> 21:27.090
得到它又不是没什么意义

21:27.090 --> 21:28.590
我们平时要用的东西都给它

21:28.590 --> 21:30.290
它已经给我们提供好了

21:30.290 --> 21:31.590
基本上都给我们提供好了

21:31.590 --> 21:34.290
所以说我们都不太需要得到这个东西了

21:34.290 --> 21:35.690
那如果你真的要得到的话

21:35.690 --> 21:36.090
OK

21:36.090 --> 21:37.990
那么去得到它

21:37.990 --> 21:40.090
我之前看过有同学写的代码

21:40.090 --> 21:41.290
他有一天发现

21:41.290 --> 21:42.990
他这个主持事件爆炮

21:42.990 --> 21:44.690
因为他跟真实动物混用

21:44.690 --> 21:46.390
主持事件爆炮出了问题

21:46.390 --> 21:47.790
于是他在这里面

21:47.790 --> 21:48.890
他找了很多资料

21:48.890 --> 21:50.890
发现什么百度之道里面

21:50.890 --> 21:51.690
让他这样做

21:51.690 --> 21:52.190
他这样做

21:52.190 --> 21:53.490
发现还是无效

21:53.490 --> 21:55.490
你告诉我这个东西有效吗

21:55.490 --> 21:55.990
有效吗

21:55.990 --> 21:57.090
这个东西

21:57.090 --> 21:58.090
是不是还是没效

21:58.090 --> 21:59.790
他已经冒泡了document阶段了

21:59.790 --> 22:01.590
你再组织有意义吗

22:01.590 --> 22:02.690
是不是还是没意义

22:02.690 --> 22:04.190
对不对

22:04.190 --> 22:04.990
你看一下吧

22:04.990 --> 22:06.790
他能组织真实的冒泡

22:06.790 --> 22:07.690
真实动物时间吗

22:07.690 --> 22:08.990
是不是组织不了

22:08.990 --> 22:09.490
对吧

22:09.490 --> 22:11.390
组织不了

22:11.390 --> 22:12.490
而且这个东西

22:12.490 --> 22:14.590
不仅组织不了真实的事件爆炮

22:14.690 --> 22:15.990
甚至连什么的

22:15.990 --> 22:17.390
连这个东西都组织不了

22:17.390 --> 22:18.690
连虚拟的都组织不了

22:18.690 --> 22:19.990
对吧

22:19.990 --> 22:20.690
对不对

22:20.690 --> 22:23.590
因为你在原生的事件

22:23.590 --> 22:24.590
对象里面要去调用这个

22:24.590 --> 22:26.790
那只会组织原生的事件

22:26.790 --> 22:28.690
只会组织原生的事件

22:28.690 --> 22:29.790
你要对我意思吧

22:29.790 --> 22:29.990
哎

22:29.990 --> 22:31.790
这个钢笛翻了哪来的

22:31.790 --> 22:34.290
这个钢笛翻了哪来的

22:34.290 --> 22:36.670
哎

22:36.670 --> 22:36.870
哎

22:36.870 --> 22:39.070
我这个猪

22:39.070 --> 22:41.270
我怎么去输出这款啊

22:41.270 --> 22:43.970
怎么去输出这款啊

22:43.970 --> 22:44.970
OK啊

22:44.970 --> 22:47.470
这是关于真实动物对象啊

22:47.470 --> 22:49.570
和原生的动物对象来

22:49.570 --> 22:52.370
就是事件对象来混责用的时候

22:52.370 --> 22:53.270
另外一个呢

22:53.270 --> 22:55.170
就是说有些呢

22:55.170 --> 22:56.770
第三方插件里边呢

22:56.770 --> 22:58.670
可能一些第三方插件啊

22:58.670 --> 23:01.870
也会给document注册一些事件

23:01.870 --> 23:03.370
他用事件委托嘛

23:03.370 --> 23:04.770
那么这里面有没有组织

23:04.770 --> 23:07.170
有没有办法组织第三方插件

23:07.170 --> 23:09.070
给document注册的事件呢

23:09.070 --> 23:09.870
能不能组织呢

23:09.870 --> 23:10.070
哎

23:10.070 --> 23:11.570
这个东西是可以组织的

23:11.570 --> 23:12.570
怎么组织呢

23:12.570 --> 23:13.370
有这么一个函数啊

23:13.370 --> 23:14.970
就是原生的事件对象里边

23:14.970 --> 23:16.370
有这么一个函数叫做stop

23:16.370 --> 23:18.970
immediate propagation

23:18.970 --> 23:20.970
这个函数是什么意义呢

23:20.970 --> 23:21.770
这个函数

23:21.770 --> 23:24.770
这个函数是这么一个意识啊

23:24.770 --> 23:26.170
嗯

23:26.170 --> 23:27.170
这个函数是什么意思呢

23:27.170 --> 23:27.970
就比方说啊

23:27.970 --> 23:30.570
咱们给document注册了很多个事件

23:30.570 --> 23:31.670
啊

23:31.670 --> 23:33.270
document addimension的啊

23:33.270 --> 23:34.570
比方说unclick

23:34.570 --> 23:35.370
click

23:35.370 --> 23:42.280
注册了很多事件

23:42.280 --> 23:51.500
啊这里输出啊

23:51.500 --> 23:52.600
啊这里输出啊

23:52.600 --> 23:53.800
嗯输出呢

23:53.800 --> 23:56.600
当我们这里输出

23:56.600 --> 24:00.600
就是点document

24:00.600 --> 24:02.600
被点击了啊

24:02.600 --> 24:04.200
这是真实动啊

24:04.200 --> 24:05.600
真实动

24:05.600 --> 24:07.200
document被点击了

24:07.200 --> 24:07.400
好

24:07.400 --> 24:09.100
咱们来看一下啊

24:09.100 --> 24:10.600
运行哦

24:10.600 --> 24:11.600
目前还能输出啊

24:11.600 --> 24:13.600
目前输出的原因是因为这句话

24:13.600 --> 24:15.600
这句话他注册的时间很早啊

24:15.600 --> 24:16.300
很早

24:16.300 --> 24:17.800
那么我们把它放到这

24:17.800 --> 24:18.900
放到index里边

24:18.900 --> 24:20.000
放到render后边啊

24:20.000 --> 24:21.000
放到这

24:21.000 --> 24:22.000
保存啊

24:22.000 --> 24:24.000
看一下

24:24.000 --> 24:24.600
啊你看

24:24.600 --> 24:26.100
这句话是不是没有运行

24:26.100 --> 24:27.500
这句话是不是没有运行

24:27.500 --> 24:28.600
为什么没有运行

24:28.600 --> 24:30.800
他相当于是你这句话运行完了过后

24:30.800 --> 24:32.900
你倒入了rexdom之后

24:32.900 --> 24:34.000
那么rexdom呢

24:34.000 --> 24:35.500
他给你做了这么一件事

24:35.500 --> 24:37.900
他就已经给你注册了时间了啊

24:37.900 --> 24:40.800
addimension他就已经注册了时间了

24:40.800 --> 24:41.800
click

24:41.800 --> 24:43.300
啊

24:43.300 --> 24:44.700
他已经注册了时间了

24:44.700 --> 24:46.200
然后在这个事件里边呢

24:46.200 --> 24:47.800
他执行了一个函数

24:47.800 --> 24:50.500
最终他执行到这段代码

24:50.500 --> 24:53.400
他最终会执行到这段代码

24:53.400 --> 24:53.900
对吧

24:53.900 --> 24:55.200
你看这个native event

24:55.200 --> 24:57.600
这native event是不是就这个玩意

24:57.600 --> 24:58.600
对 就是这个玩意

24:58.600 --> 25:00.600
那么他最终会执行这个段代码

25:00.600 --> 25:02.400
这段代码的作用就是

25:02.400 --> 25:03.100
阻止

25:03.100 --> 25:05.100
如果你添加了多个事件处理程序

25:05.100 --> 25:06.500
那么阻止其他

25:06.500 --> 25:10.000
就剩余的事件处理程序运行

25:10.000 --> 25:16.600
阻止剩余的事件处理程序运行

25:16.600 --> 25:17.700
就是有的时候呢

25:17.700 --> 25:19.000
你给你一些第三方插件

25:19.000 --> 25:19.800
连用的时候呢

25:19.800 --> 25:21.900
你可能会需要这个东西

25:21.900 --> 25:23.900
所以说你在react里面

25:23.900 --> 25:26.400
去阻止不了真实的动物事件的

25:26.400 --> 25:28.500
真实的动物事件

25:28.500 --> 25:31.100
事件冒泡的

25:31.100 --> 25:31.700
但是呢

25:31.700 --> 25:33.300
你可以通过

25:33.300 --> 25:38.500
可以通过那个事件

25:38.500 --> 25:40.100
可以通过这个

25:40.100 --> 25:41.300
写过来吗

25:41.300 --> 25:42.500
可以通过这个

25:42.500 --> 25:44.600
这个东西

25:44.700 --> 25:47.800
阻止document上

25:47.800 --> 25:52.730
剩余事件的执行

25:52.730 --> 25:54.230
但是你可以做这件事

25:54.230 --> 25:56.830
在这点上很多事没有什么意义

25:56.830 --> 25:57.830
除非呢

25:57.830 --> 25:58.830
你真的是要阻止他

25:58.830 --> 25:59.230
并且呢

25:59.230 --> 26:00.030
这个东西呢

26:00.030 --> 26:01.930
他也在第三方主件

26:01.930 --> 26:03.530
第三方插件

26:03.530 --> 26:04.430
他在document上

26:04.430 --> 26:05.430
也又阻止了一些事件

26:05.430 --> 26:06.330
你需要阻止他们

26:06.330 --> 26:09.830
那么你是可以搬到的

26:09.830 --> 26:11.130
这是关于这个点

26:11.130 --> 26:11.930
那么下一个点

26:11.930 --> 26:12.930
前面是原理

26:12.930 --> 26:14.430
下面是注意事项

26:14.430 --> 26:16.130
主要是要理解原理

26:16.230 --> 26:16.930
那么语言

26:16.930 --> 26:17.630
就是在这里边

26:17.630 --> 26:19.230
我们再说一个

26:19.230 --> 26:20.430
就是说

26:20.430 --> 26:21.330
RoyalX里边

26:21.330 --> 26:23.130
他还做了这么一件事

26:23.130 --> 26:24.430
他是为了

26:24.430 --> 26:27.330
就是为了对象的从用

26:27.330 --> 26:29.130
为了就是节约内存空间

26:29.130 --> 26:35.760
为了提高执行效率

26:35.760 --> 26:39.160
RoyalX做了这么一个东西

26:39.160 --> 26:43.760
使用事件持

26:43.760 --> 26:46.960
使用事件对象持

26:46.960 --> 26:50.460
来处理事件对象

26:50.460 --> 26:51.960
什么意思呢

26:51.960 --> 26:54.560
就是说我们这里的事件参数

26:54.560 --> 26:56.760
这个事件参数亿

26:56.760 --> 26:59.160
可能跟DIV里边

26:59.160 --> 27:00.560
得到这个事件参数亿

27:00.560 --> 27:03.160
有可能是一样的

27:03.160 --> 27:04.760
他会从用对象

27:04.760 --> 27:04.960
哇

27:04.960 --> 27:06.160
这个东西神仇

27:06.160 --> 27:07.960
咱们来试一下吧

27:07.960 --> 27:08.560
怎么来试

27:08.560 --> 27:09.760
怎么来试一下

27:09.760 --> 27:11.560
我们这里比方说写个数字

27:11.560 --> 27:13.160
RoyalX

27:13.160 --> 27:14.660
就是Private嘛

27:14.660 --> 27:15.660
Private

27:15.660 --> 27:16.660
有什么变量

27:16.960 --> 27:18.360
那么当我们点击按钮的时候

27:18.360 --> 27:19.960
把这个变量设为亿

27:19.960 --> 27:21.960
把他设为这个事件参数亿

27:21.960 --> 27:23.760
然后在DIV里边

27:23.760 --> 27:24.860
在DIV里边

27:24.860 --> 27:26.460
我们再

27:26.460 --> 27:27.460
用一个事件参数亿

27:27.460 --> 27:27.760
对吧

27:27.760 --> 27:28.760
我们这里输出

27:28.760 --> 27:30.160
两个是不是一样的

27:30.160 --> 27:32.660
Private和亿是不是一样的

27:32.660 --> 27:35.160
Private是不是等于亿

27:35.160 --> 27:36.360
看一下吧

27:36.360 --> 27:38.260
保存

27:38.260 --> 27:39.560
点按钮

27:39.560 --> 27:41.760
你看居然是true

27:41.760 --> 27:42.860
说明了什么呢

27:42.860 --> 27:44.960
这个事件对象是被从用的

27:44.960 --> 27:47.260
是被从用的一个对象

27:47.260 --> 27:50.360
那么也就意味着啥呢

27:50.360 --> 27:52.960
也要千万小心

27:52.960 --> 27:54.660
啊

27:54.660 --> 27:56.360
如果

27:56.360 --> 27:58.660
如果在事件处理

27:58.660 --> 28:01.660
那么这现在是注意事项了啊

28:01.660 --> 28:08.260
如果在事件处理程序中

28:08.260 --> 28:11.060
需要亿步的用到

28:11.060 --> 28:12.160
啊

28:12.160 --> 28:13.260
不能说需要啊

28:13.260 --> 28:16.260
不能说如果在事件处理程序中

28:16.260 --> 28:18.860
不要亿步的

28:18.860 --> 28:22.560
亿步的使用事件对象

28:22.560 --> 28:24.460
千万千万不要这样做啊

28:24.460 --> 28:26.560
千万不要亿步的使用事件对象

28:26.560 --> 28:28.160
因为这个事件对象会被从用

28:28.160 --> 28:28.860
比方说啊

28:28.860 --> 28:30.060
你在这里边

28:30.060 --> 28:31.020
你在这里边

28:31.020 --> 28:34.560
console就是set timeout啊

28:34.560 --> 28:35.760
比方说一秒钟

28:35.760 --> 28:36.660
不用一秒钟了

28:36.660 --> 28:37.860
就0秒钟

28:37.860 --> 28:39.560
0秒钟过后

28:39.560 --> 28:40.960
输出这个什么

28:40.960 --> 28:42.760
输出这个事件参数

28:42.760 --> 28:43.760
1里面的type

28:43.760 --> 28:45.560
事件类型

28:45.960 --> 28:48.460
咱们来看一下啊

28:48.460 --> 28:52.790
输出这个事件类型

28:52.790 --> 28:54.690
你看一下

28:54.690 --> 28:55.590
得到的是now

28:55.590 --> 28:56.790
这是我们得到的结果

28:56.790 --> 28:57.190
然后呢

28:57.190 --> 28:58.590
他都告诉你一个警告了

28:58.590 --> 28:59.390
他说

28:59.390 --> 28:59.890
你这个

28:59.890 --> 29:01.690
这个单词是合成的意思啊

29:01.690 --> 29:03.590
这个合成事件

29:03.590 --> 29:05.090
他是呢

29:05.090 --> 29:06.090
被被从

29:06.090 --> 29:06.990
被用到什么呢

29:06.990 --> 29:07.890
被用到了

29:07.890 --> 29:10.190
for performance reasons

29:10.190 --> 29:13.220
啊

29:13.220 --> 29:13.820
我读一下

29:13.820 --> 29:15.920
我读一下这句话啊

29:15.920 --> 29:17.120
他就说这个意思啊

29:17.120 --> 29:17.920
他就说

29:17.920 --> 29:19.920
你这个合成的事件对象

29:19.920 --> 29:20.720
就这个玩意

29:22.020 --> 29:23.320
被用到哪了呢

29:23.320 --> 29:25.220
就是被重用了

29:25.220 --> 29:26.520
在什么地方重用了

29:26.520 --> 29:28.320
你可能是因为要重新显示

29:28.320 --> 29:29.020
某些东西啊

29:29.020 --> 29:30.820
重新一步的去显示某些东西

29:30.820 --> 29:31.920
可能因为是这些原因

29:31.920 --> 29:33.220
你去重用他

29:33.220 --> 29:33.920
那么这个时候呢

29:33.920 --> 29:34.920
他会包一个警告

29:34.920 --> 29:35.520
就这个玩意

29:35.520 --> 29:36.720
你不要重用

29:36.720 --> 29:37.320
什么叫重用

29:37.320 --> 29:39.620
就是等一段时间过后再去用

29:39.620 --> 29:40.720
那我这里等了你秒钟

29:40.720 --> 29:41.520
不管是等了多少

29:41.520 --> 29:42.520
他总是一个一步的

29:42.520 --> 29:43.220
对吧

29:43.220 --> 29:44.820
那么重新去使用他了

29:44.820 --> 29:46.220
那么这样子是不行的

29:46.220 --> 29:47.120
这样不行的

29:47.220 --> 29:48.420
他会包一个警告

29:48.420 --> 29:49.420
为什么不行呢

29:49.420 --> 29:50.420
因为他认为

29:50.420 --> 29:51.720
你这个世界这个世界对象

29:51.720 --> 29:52.720
他到时候

29:52.720 --> 29:54.520
我这个世界完成之后

29:54.520 --> 29:56.320
他会把这个世界对象还会保留

29:56.320 --> 29:57.720
他只不过会把这里边的属性

29:57.720 --> 29:58.720
全部变成闹

29:58.720 --> 29:59.620
全部清空

29:59.620 --> 30:00.220
下一次呢

30:00.220 --> 30:01.820
我又重新给这些属性复制

30:01.820 --> 30:03.120
下一次事件出发的时候

30:03.120 --> 30:04.720
他为了解冤内存空间嘛

30:04.720 --> 30:06.320
重用这个对象啊

30:06.320 --> 30:08.220
他会给重新给这些对象复制

30:08.220 --> 30:10.420
那么这个时候一段时间之后

30:10.420 --> 30:11.520
那么这个世界

30:11.520 --> 30:13.320
他这些东西全部被重置了

30:13.320 --> 30:14.420
这个对象里边的所有属性

30:14.420 --> 30:15.520
全部被重置了

30:15.520 --> 30:15.920
所以说呢

30:15.920 --> 30:17.820
你在一步的去使用这些东西的时候

30:17.820 --> 30:18.920
是得不到东西的

30:18.920 --> 30:20.720
很有可能是得不到东西的

30:20.720 --> 30:22.520
那如果说你一定要得到这个东西的

30:22.520 --> 30:23.820
他下面告诉你

30:23.820 --> 30:25.620
如果你一定要得到这个东西的话

30:25.620 --> 30:27.320
那么请你去调用这个函数

30:28.720 --> 30:30.420
去调用这个函数

30:30.420 --> 30:32.420
在世界里面去调用这个函数

30:32.420 --> 30:34.020
调用这个函数过后呢

30:34.020 --> 30:36.320
他会把这个世界对象持久化

30:36.320 --> 30:37.120
持久化

30:37.120 --> 30:38.520
就是他不会消失

30:38.520 --> 30:40.320
方便你后边重用

30:40.320 --> 30:40.820
保存

30:40.820 --> 30:42.520
你看一下现在

30:42.520 --> 30:43.220
点击这个按钮

30:43.220 --> 30:43.820
你看一下

30:43.920 --> 30:45.420
是不是就可以得到世界内心了

30:45.420 --> 30:45.920
对吧

30:45.920 --> 30:47.520
他持久化了

30:47.520 --> 30:48.020
比方说

30:48.020 --> 30:50.120
咱们一秒钟之后再得到

30:50.120 --> 30:51.220
看一下能不能得到

30:52.420 --> 30:53.020
点击

30:54.020 --> 30:55.220
可以得到

30:55.220 --> 30:56.420
这里为什么是force呢

30:56.420 --> 30:58.520
我这里把这个代码又把删掉了

30:59.820 --> 31:01.820
每一次世界里边仍然是去

31:02.220 --> 31:03.720
每一次世界里边仍然是去

31:04.120 --> 31:04.620
看没

31:05.220 --> 31:06.020
再点击

31:06.620 --> 31:07.020
看没

31:07.020 --> 31:07.820
是不是可以得到了

31:08.220 --> 31:09.620
但是这样子写的过后

31:09.620 --> 31:10.920
肯定效率要低一些

31:10.920 --> 31:11.420
为什么

31:11.420 --> 31:12.220
因为这个对象

31:12.220 --> 31:14.220
他把他持久的保存下来了

31:14.820 --> 31:16.720
他把对象持久的保存下来了

31:17.220 --> 31:19.020
以前是没有持久保存的

31:19.020 --> 31:21.120
以前的这些东西就是写

31:21.120 --> 31:22.120
你用完了这世界对象

31:22.120 --> 31:24.120
因为世界对象里面有很多数据

31:24.120 --> 31:25.420
数据超级超级多

31:25.620 --> 31:27.720
所以说他不太愿意去保存这个东西

31:28.420 --> 31:28.920
因此

31:28.920 --> 31:30.520
但是现在那你调用这个函数过后

31:30.520 --> 31:32.120
他会把持久的保存下来

31:32.120 --> 31:32.920
他的状态

31:33.720 --> 31:35.020
那么这样子一来了

31:36.420 --> 31:37.420
就会导致

31:37.520 --> 31:38.120
这个对象

31:38.120 --> 31:39.320
他里边的这些数据

31:39.320 --> 31:40.020
内部的数据

31:40.020 --> 31:41.020
他没有被销毁

31:41.420 --> 31:43.120
所以他最好不要去调用这个

31:43.120 --> 31:43.720
因此

31:43.720 --> 31:46.920
我们最好不要去在一部里边去使用这个东西

31:46.920 --> 31:47.920
如果一定要使用

31:48.720 --> 31:50.120
如果一定要使用

31:50.820 --> 31:52.520
需要调用

31:53.320 --> 31:54.020
这个函数

31:55.520 --> 31:56.220
percease

31:57.220 --> 31:58.220
percease函数

32:00.130 --> 32:00.730
好了

32:00.730 --> 32:02.230
就这么一些知识了

32:02.530 --> 32:03.330
这就是rex

32:03.330 --> 32:05.130
就是你核心点就是记住

32:05.130 --> 32:07.230
他就是在这里写的世界委托

32:07.930 --> 32:08.430
因此

32:08.830 --> 32:11.330
如果你跑去跟真实对象

32:11.430 --> 32:13.830
那真实对象的事件一定是先与他运行

32:13.830 --> 32:15.130
先与rex运行

32:17.030 --> 32:19.630
那么还有一个就是关于事件参数

32:19.630 --> 32:21.230
他是自己合成的对象

32:22.630 --> 32:23.130
对了

32:23.130 --> 32:23.930
还有这个地方

32:24.130 --> 32:25.030
刚才说了是吧

32:25.030 --> 32:26.330
几乎对吧

32:27.130 --> 32:28.630
为什么要说几乎呢

32:28.630 --> 32:30.830
因为有些事件是不冒号的

32:31.830 --> 32:33.430
有些事件是不冒号的

32:33.830 --> 32:34.630
比方说

32:36.670 --> 32:37.470
这个input

32:38.670 --> 32:40.270
他有一个on focus事件

32:43.080 --> 32:43.980
有这么一个事件

32:47.050 --> 32:48.750
on focus事件是不冒泡的

32:49.150 --> 32:50.050
他是不冒泡的

32:50.550 --> 32:51.350
咱们来看一下

32:52.050 --> 32:53.250
在这个事件里边

32:53.250 --> 32:54.850
咱们通过事件参数一

32:55.250 --> 32:55.950
这个参数一里边

32:55.950 --> 32:57.750
他不是给你准备好了一个talking程吗

32:57.750 --> 32:58.050
对吧

32:58.050 --> 32:59.750
他也是给你做的假的

32:59.750 --> 33:00.850
当然是真的

33:00.850 --> 33:03.350
但是不是真实动物对象里面的talking

33:03.350 --> 33:04.850
talking程是真实动物对象

33:05.050 --> 33:07.150
但是这个e不是真实的事件参数一

33:07.650 --> 33:09.250
我们把by6设成123

33:09.250 --> 33:10.150
比方说

33:11.050 --> 33:12.050
by6设成123

33:12.350 --> 33:14.350
或者说我们就输出一句话就完了

33:14.550 --> 33:15.250
输出一句话

33:15.350 --> 33:17.250
就是文本框

33:17.250 --> 33:18.350
就是rex事件

33:18.850 --> 33:22.050
文本框获得了焦点

33:23.250 --> 33:23.850
保存

33:24.450 --> 33:25.350
这边看一下

33:26.250 --> 33:27.250
看文本框获得了焦点

33:27.250 --> 33:27.650
对吧

33:28.650 --> 33:29.250
没问题吧

33:29.450 --> 33:29.650
好

33:29.650 --> 33:30.350
那么现在呢

33:30.350 --> 33:31.550
我阻止事件冒泡

33:31.850 --> 33:32.850
在真实的动物里边

33:32.850 --> 33:33.850
我阻止事件冒泡

33:34.650 --> 33:35.750
我们这里document

33:37.050 --> 33:37.650
document

33:38.150 --> 33:39.150
query is negative

33:39.850 --> 33:40.550
获取到什么

33:40.550 --> 33:41.050
root

33:43.150 --> 33:43.550
对吧

33:43.750 --> 33:45.450
然后给他说说怎么unfocus

33:47.590 --> 33:48.490
阻止事件冒泡

33:48.990 --> 33:49.290
好

33:49.290 --> 33:49.790
我们这里

33:50.490 --> 33:50.890
node

33:51.690 --> 33:52.290
阻止

33:53.490 --> 33:54.190
focus

33:54.490 --> 33:55.890
事件冒泡

33:56.690 --> 33:56.990
好

33:56.990 --> 33:57.890
然后这里呢

33:58.090 --> 34:00.290
我们这里就用事件参数一stop

34:01.190 --> 34:04.190
properation

34:05.390 --> 34:06.390
ok 保存啊

34:07.290 --> 34:08.890
这边这里咱们聚焦

34:10.290 --> 34:10.990
你看一下

34:11.190 --> 34:12.290
首先说这个肯定

34:12.290 --> 34:13.390
这个事件运行了对吧

34:13.390 --> 34:15.090
这个是rekt的事件运行了

34:15.590 --> 34:16.690
并且呢

34:17.690 --> 34:19.090
有这个事件有没有运行

34:19.090 --> 34:19.590
没有

34:19.590 --> 34:19.890
为什么

34:19.890 --> 34:21.390
因为这个东西不冒泡啊

34:21.690 --> 34:22.890
他根本就不冒泡

34:23.090 --> 34:24.190
那不冒泡的话

34:24.190 --> 34:25.890
他能在document上监听吗

34:25.890 --> 34:26.790
是不是监听不了

34:27.090 --> 34:28.290
所以说对一些特殊的事件

34:28.290 --> 34:29.790
他就是在元素上监听的啊

34:30.190 --> 34:31.690
对于一些特殊的事件

34:31.790 --> 34:33.290
他就是在元素上监听的

34:33.390 --> 34:34.690
并不是所有的事件啊

34:34.690 --> 34:36.190
都是在document上处理的

34:36.790 --> 34:37.090
好吧

34:37.090 --> 34:38.490
就是对一些不冒泡的事件

34:38.790 --> 34:39.490
包括什么

34:39.890 --> 34:40.590
包括什么

34:40.590 --> 34:42.690
有一些document上没有的事件啊

34:42.790 --> 34:43.190
就是

34:43.990 --> 34:44.790
一些

34:46.290 --> 34:48.190
不冒泡的事件

34:48.790 --> 34:51.790
是直接在元素上监听

34:52.790 --> 34:53.090
啊

34:53.190 --> 34:55.190
因为他在document上监听主要是为了提高效率

34:55.190 --> 34:56.390
但是有些事也没办法

34:56.590 --> 34:56.990
啊

34:57.090 --> 35:00.990
一些document上面没有的事件

35:01.590 --> 35:01.990
啊

35:02.790 --> 35:05.390
直接在元素上监听

35:05.590 --> 35:05.690
啊

35:05.690 --> 35:06.990
就对一些特殊的事件

35:07.090 --> 35:09.390
比方说一些播放器对吧

35:09.590 --> 35:10.890
unplay unpause

35:10.990 --> 35:12.290
对不对播放器里啊

35:12.290 --> 35:14.290
H5的播放器不是有很多事件吗

35:14.290 --> 35:15.490
这些事件当面都没有

35:15.890 --> 35:16.490
那没有的话

35:16.490 --> 35:17.990
只能在元素上面监听的

35:18.690 --> 35:18.990
啊

35:19.590 --> 35:20.590
好了其他就没啥了啊

35:20.690 --> 35:21.290
没啥了

35:21.290 --> 35:21.790
那么

35:22.490 --> 35:22.890
嗯

35:22.890 --> 35:23.490
这一句课

35:23.490 --> 35:25.290
我们讲的事件处理之后呢

35:25.290 --> 35:26.090
里面就知道了啊

35:26.090 --> 35:26.990
reacted in the mirror

35:26.990 --> 35:28.590
事件他到底是怎么回事了啊

35:28.690 --> 35:29.890
那么这些怪异的现象

35:29.890 --> 35:31.590
特别是跟真实那么对象混用的时候

35:31.590 --> 35:32.690
怪异的现象是怎么回事

