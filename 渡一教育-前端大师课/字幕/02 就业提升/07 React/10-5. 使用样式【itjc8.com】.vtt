WEBVTT

00:00.560 --> 00:05.260
好 来说一下那个在无米介石里边如何去使用样式

00:05.260 --> 00:08.060
这里为什么要单独说样式呢

00:08.060 --> 00:11.860
因为我们之前在做rex开发的时候呢

00:11.860 --> 00:14.860
没有过多的去关心这个样式

00:14.860 --> 00:18.460
这个样式里面其实还是有一些问题需要解决的啊

00:18.460 --> 00:20.060
比方说在大型项目里边

00:20.060 --> 00:24.260
比方说这个无米介石它本来就是为一个企业型应用

00:24.260 --> 00:26.060
提供这么一个框架的

00:26.060 --> 00:29.460
所以说它一般面向性的是大中型项目

00:29.460 --> 00:32.460
尽管呢你在小型项目中也可以使用

00:32.460 --> 00:34.660
就说在大中型项目里边

00:34.660 --> 00:38.460
样式的它也是有一定复杂度的

00:38.460 --> 00:39.960
比方说它有重复代码

00:39.960 --> 00:43.060
是不是我们得使用SARS或者是NES

00:43.060 --> 00:44.760
把它重复代码进行提取

00:44.760 --> 00:47.060
对吧 像这些预编意气

00:47.060 --> 00:50.360
而且呢为了避免样式的重复

00:50.360 --> 00:52.360
你们之前在学vue的时候

00:52.360 --> 00:54.560
是不是有一个style scope

00:54.560 --> 00:57.360
S-C-O-P-E

00:57.360 --> 00:58.760
是不是有这么一个玩意

00:58.760 --> 01:02.560
那么这个东西呢它会将你的内样式的名字

01:02.560 --> 01:04.260
给你加上一些潜质啊

01:04.260 --> 01:06.260
一些学习数啊之类的啊

01:06.260 --> 01:08.660
来保证这个内样式的唯一

01:08.660 --> 01:11.460
包括你们在学习wepack的时候呢也遇到过

01:11.460 --> 01:13.060
对吧

01:13.060 --> 01:14.460
那这个东西到底是啥呢

01:14.460 --> 01:17.460
这个东西我们把它叫做CSS module

01:17.460 --> 01:20.860
这个东西不知道以前你们学习wepack的时候呢

01:20.860 --> 01:24.360
有没有学习过这个东西啊

01:24.360 --> 01:26.760
可能之前旧的课程体系里边没有

01:26.860 --> 01:30.360
不过我后边会重新更新wepack

01:30.360 --> 01:33.460
所以说我会把这个东西加进去啊

01:33.460 --> 01:35.160
也就是说我们这央视这一块呢

01:35.160 --> 01:36.760
要解决两个问题啊

01:36.760 --> 01:38.560
央视这里的问题啊

01:38.560 --> 01:42.160
解决两个问题啊

01:42.160 --> 01:43.660
第一个问题呢就是

01:45.660 --> 01:48.360
就是保证啊

01:48.360 --> 01:53.160
内样式名称的唯一性啊

01:53.160 --> 01:54.560
你不管你写了多少样式

01:54.560 --> 01:56.060
比方说你最后加起来啊

01:56.160 --> 02:00.160
分散在由于有wepack的存在吗

02:00.160 --> 02:02.460
所以说你分散在不同文件里边的样式

02:02.460 --> 02:04.460
它会给你进行打包合并

02:04.460 --> 02:05.560
那么合并之后呢

02:05.560 --> 02:09.260
你得保证内样式的名称是唯一的啊

02:09.260 --> 02:10.960
要保证这个这一点

02:10.960 --> 02:12.460
那么这一点呢

02:12.460 --> 02:14.160
有很多很多的方式啊

02:14.160 --> 02:16.060
比方说有一些命名规范

02:16.060 --> 02:17.360
比方说BEM

02:17.360 --> 02:17.660
对吧

02:17.660 --> 02:19.060
大家应该听说过吧

02:19.060 --> 02:20.460
BEM命名规范

02:20.460 --> 02:22.560
就是CSS样式的命名规范

02:22.560 --> 02:22.860
当然呢

02:22.860 --> 02:23.960
还不止这一种规范呢

02:23.960 --> 02:24.860
还有很多了

02:24.960 --> 02:25.760
我们常见的呢

02:25.760 --> 02:27.960
就是BEM

02:27.960 --> 02:29.060
然后呢

02:29.060 --> 02:30.860
还有就是CSS码究啊

02:30.860 --> 02:32.160
我们现在常用的呢

02:32.160 --> 02:34.060
就是CSS码究啊

02:34.060 --> 02:34.960
CSS码究

02:34.960 --> 02:36.460
所以说我们第一个点呢

02:36.460 --> 02:38.860
要学习在5米解释里面

02:38.860 --> 02:43.460
如何跟CSS码究来进行结合啊

02:43.460 --> 02:44.660
这第一个

02:44.660 --> 02:44.960
好

02:44.960 --> 02:45.460
第二个呢

02:45.460 --> 02:46.760
就是如果要解决

02:46.760 --> 02:47.960
另另外一个问题

02:47.960 --> 02:51.160
就是样式代码的重复

02:51.160 --> 02:53.160
样式代码的重复

02:53.160 --> 02:54.760
那么其实CSS码究呢

02:54.760 --> 02:56.960
它也能解决于部分啊

02:56.960 --> 02:58.060
也能解决于部分

02:58.060 --> 02:58.660
如果说

02:58.660 --> 03:01.460
你现在没有学过CSS码究啊

03:01.460 --> 03:02.360
我们后边

03:02.360 --> 03:04.060
我更新webpack code

03:04.060 --> 03:04.760
webpack

03:05.960 --> 03:07.760
怎么放了下回来

03:07.760 --> 03:10.860
我简直说不清楚话了啊

03:10.860 --> 03:11.660
webpack

03:11.660 --> 03:13.360
更新webpack的课程的时候呢

03:13.360 --> 03:15.060
我就会给大家加上啊

03:15.060 --> 03:15.760
不用着急

03:15.760 --> 03:16.360
没关系啊

03:16.360 --> 03:18.760
你哪怕你没有学过CSS码究啊

03:18.760 --> 03:19.760
你可以听着解释

03:19.760 --> 03:20.960
没问题的啊

03:20.960 --> 03:21.260
第二个呢

03:21.260 --> 03:23.560
是要解决样式代码的重复

03:23.560 --> 03:24.360
那么这一块呢

03:24.360 --> 03:25.360
可以用sass

03:25.360 --> 03:26.960
或者是nace

03:26.960 --> 03:27.560
nace

03:27.560 --> 03:28.360
或者sass

03:28.360 --> 03:29.660
我们讲讲一个就完事了啊

03:29.660 --> 03:30.760
因为这两个都差不多

03:31.360 --> 03:32.160
好OK啊

03:32.160 --> 03:34.560
这是关于这两个问题要解决

03:34.560 --> 03:34.860
好

03:34.860 --> 03:36.460
第一个问题解决的方案呢

03:36.460 --> 03:39.060
它是使用局部样式和全局样式

03:39.060 --> 03:41.060
其他的底层啊

03:41.060 --> 03:43.060
底层使用了啊

03:43.060 --> 03:47.160
就是webpack的什么一个夹载器

03:48.260 --> 03:49.020
什么夹载器

03:49.020 --> 03:51.260
内置的一个夹载器对吧啊

03:51.260 --> 03:52.660
的夹载器什么夹载器呢

03:52.660 --> 03:54.360
就是cssloader啊

03:54.360 --> 03:55.760
使用了这么一个夹载器

03:55.760 --> 03:58.160
这个夹载器的内部啊

03:58.160 --> 03:59.260
这个夹载器的内部

04:00.960 --> 04:01.460
啊

04:02.260 --> 04:06.860
包含了css module的功能啊

04:06.860 --> 04:07.660
包含了这个功能

04:07.660 --> 04:09.260
所以说你直接用就行了

04:09.260 --> 04:10.560
因为无密GS呢

04:10.560 --> 04:13.660
它底层使用的是webpack来搭建我们的工程的

04:13.660 --> 04:14.960
来构建我们工程的

04:14.960 --> 04:16.060
来进行打包的

04:16.060 --> 04:16.760
所以说呢

04:16.760 --> 04:19.160
webpack里边它的夹载器cssloader

04:19.160 --> 04:20.460
它本来就具备的啊

04:20.460 --> 04:21.960
你直接使用就完事了

04:21.960 --> 04:22.960
那么它这里边呢

04:22.960 --> 04:23.960
怎么来使用呢

04:23.960 --> 04:24.960
它是这样子

04:24.960 --> 04:26.060
我们通常情况下呢

04:26.060 --> 04:27.760
在无密GS里边使用样式呢

04:27.760 --> 04:28.860
有这么几种情况

04:28.860 --> 04:30.360
我分开说一下啊

04:30.360 --> 04:30.960
第一种情况呢

04:30.960 --> 04:34.060
就是组建特有的

04:34.060 --> 04:38.660
就是某个组建特有的样式啊

04:38.660 --> 04:40.560
某个组建特有的样式

04:40.560 --> 04:42.660
就是不与其他组建共享

04:43.660 --> 04:46.160
不与其他组建共享

04:46.160 --> 04:48.960
就这个样式纯粹是这个组建单独具有的

04:48.960 --> 04:51.660
跟其他的组建没有什么关系啊

04:51.660 --> 04:52.960
那么像这种样式呢

04:52.960 --> 04:54.060
我们一般写到哪呢

04:54.060 --> 04:56.360
当然这里呢

04:56.360 --> 04:59.060
你可以写到任何地方都可以啊

04:59.060 --> 05:05.960
通常将该样式文件写到

05:05.960 --> 05:13.760
呃与组建放置在同一个目录

05:13.760 --> 05:15.660
来表示就是这个组建的

05:15.660 --> 05:16.760
别的组建也用不了啊

05:16.760 --> 05:17.960
也不不是用不了

05:17.960 --> 05:19.260
也不想用它

05:19.260 --> 05:20.860
所以说我们在目录结构上呢

05:20.860 --> 05:22.160
会把它放到一个目录啊

05:22.160 --> 05:23.760
当然这只是一种规范

05:23.760 --> 05:25.260
并不是说你必须要这样做

05:25.260 --> 05:26.260
你可以放到其他目录

05:26.260 --> 05:27.060
没问题的啊

05:27.060 --> 05:28.160
没问题的

05:28.160 --> 05:30.760
比方说吧

05:30.760 --> 05:33.560
我们之前做过啥呢

05:33.560 --> 05:34.560
counter gs

05:34.560 --> 05:35.860
啊就这个吧

05:35.860 --> 05:36.360
好行吗

05:36.360 --> 05:37.160
就这个啊

05:37.160 --> 05:38.660
我们先把运行出来啊

05:38.660 --> 05:42.070
先把运行出来

05:42.070 --> 05:43.670
哎我们这里呢

05:43.670 --> 05:44.270
新加一个

05:46.270 --> 05:47.570
cd 5里

05:48.870 --> 05:50.670
yark start

05:50.670 --> 05:51.970
把运行出来

05:52.170 --> 05:53.070
运行出来过后呢

05:53.070 --> 05:53.670
我们可以看到

05:53.670 --> 05:55.370
我们之前做过的这个计时器啊

05:55.370 --> 05:56.470
因为这节课的东西呢

05:56.470 --> 05:57.270
我们相当于

05:57.270 --> 06:00.170
我是把从上节课的分支里边导出来的啊

06:00.170 --> 06:02.070
所以说跟上节课最终的结果呢

06:02.070 --> 06:02.970
是一样的

06:02.970 --> 06:04.170
就是我们在这呢

06:04.170 --> 06:05.570
要给他加一些样式啊

06:05.570 --> 06:06.470
加一些样式

06:06.470 --> 06:07.470
那看怎么做呢

06:07.470 --> 06:08.770
我们你看一下啊

06:08.770 --> 06:09.770
比方说吧

06:09.770 --> 06:10.970
我们这个样式呢

06:10.970 --> 06:13.770
去跟这个就这个技术器啊

06:13.770 --> 06:15.470
这个组建他里边样式呢

06:15.470 --> 06:16.770
全是他自己特有的

06:16.770 --> 06:18.770
跟别的组建没有什么关系好

06:18.770 --> 06:19.770
那么这个时候呢

06:19.770 --> 06:20.770
我们就可以把样式

06:20.770 --> 06:21.670
代码放到哪儿呢

06:21.670 --> 06:23.670
给他放到同一个目录下边啊

06:23.670 --> 06:24.930
比方说你给他取名为

06:24.930 --> 06:27.270
counter.css

06:27.270 --> 06:28.570
放到这儿啊

06:28.570 --> 06:29.170
那么这里边呢

06:29.170 --> 06:31.870
我们就可以写上这么一些那样式啊

06:31.870 --> 06:32.870
比方说写什么呢

06:32.870 --> 06:34.270
那样式呢

06:34.270 --> 06:35.570
我们就给他写个那样式啊

06:35.570 --> 06:37.170
counter

06:37.170 --> 06:38.070
counter那样式

06:38.070 --> 06:39.170
就是这个dv啊

06:39.170 --> 06:41.470
这个dv一会就用这个那样式啊

06:41.470 --> 06:42.370
那么counter接

06:42.370 --> 06:43.170
counter

06:43.170 --> 06:44.570
给他加进去啊

06:44.570 --> 06:46.870
好我们现在跟之前的用法呢

06:46.870 --> 06:47.370
一样

06:47.370 --> 06:48.970
我们来试着用一下

06:49.070 --> 06:50.670
看一下有没有什么问题

06:51.670 --> 06:52.970
好保存啊

06:52.970 --> 06:53.770
那么这里呢

06:53.770 --> 06:56.870
加上一个counter

06:56.870 --> 06:57.970
这样这个那样式

06:57.970 --> 06:58.970
这个那样式

06:58.970 --> 06:59.870
我们干嘛呢

06:59.870 --> 07:01.470
给他设置一个marking

07:01.470 --> 07:02.270
marking

07:02.270 --> 07:04.270
比方说上下呢

07:04.270 --> 07:05.170
100个项书

07:05.170 --> 07:06.370
左右了o2

07:06.370 --> 07:07.570
局中啊

07:08.370 --> 07:09.670
好保存一下啊

07:09.670 --> 07:10.470
我们来看一下

07:10.470 --> 07:12.470
这个样式有没有生效

07:12.470 --> 07:13.470
有生效吗

07:13.470 --> 07:14.570
说没生效

07:14.570 --> 07:15.370
为什么没生效呢

07:15.370 --> 07:16.670
咱们来看一下

07:16.670 --> 07:17.570
我们会发现了

07:17.570 --> 07:18.270
这个dv

07:18.270 --> 07:19.170
他的样式呢

07:19.170 --> 07:20.270
已经加进去了

07:20.270 --> 07:21.070
看没

07:21.070 --> 07:22.570
这个dv class counter

07:22.570 --> 07:23.470
已经加进去了

07:23.470 --> 07:24.270
为什么加进去了

07:24.270 --> 07:26.170
因为我们给他写死了的啊

07:26.170 --> 07:26.970
counter

07:26.970 --> 07:28.270
他一定加进去了

07:28.270 --> 07:29.170
好加进去过后

07:29.170 --> 07:31.270
你会发现下面的样式没了

07:31.270 --> 07:31.470
哎

07:31.470 --> 07:33.070
我们写的样式代码呢

07:33.070 --> 07:34.370
我们这里也倒入进来了

07:34.370 --> 07:35.970
为什么没了呢

07:35.970 --> 07:36.270
好

07:36.270 --> 07:37.270
咱们来看一下

07:37.270 --> 07:39.970
这里的资源啊sources

07:39.970 --> 07:40.870
资源里边呢

07:40.870 --> 07:42.570
他会把我们的css

07:42.570 --> 07:44.070
代码的进行合并

07:44.070 --> 07:45.870
最终打包成为一个5米

07:46.870 --> 07:47.970
第二css

07:47.970 --> 07:49.970
打包成这么一个文件

07:49.970 --> 07:50.170
好

07:50.170 --> 07:50.970
打包之后呢

07:50.970 --> 07:51.570
我们来看一下

07:51.570 --> 07:52.770
我们的counter样式

07:52.770 --> 07:55.070
你看他的名称是不是变了

07:55.070 --> 07:55.470
看一下

07:55.470 --> 07:56.770
他说加了个权罪

07:56.770 --> 07:57.070
然后呢

07:57.070 --> 07:58.970
加了后面一个随机的

07:58.970 --> 07:59.670
字幕串

07:59.670 --> 08:00.170
对吧

08:00.170 --> 08:01.270
加了这么一个东西

08:01.270 --> 08:01.670
于是呢

08:01.670 --> 08:03.170
我们的内样是不是变了

08:03.170 --> 08:04.670
他为什么要变化

08:04.670 --> 08:06.970
这就是因为css

08:06.970 --> 08:08.970
marge的功能啊

08:08.970 --> 08:10.470
就这个东西的功能

08:10.470 --> 08:11.970
因为这个东西的存在

08:11.970 --> 08:15.470
他为了保证内样式的名称是唯一的

08:15.570 --> 08:18.070
为了避免你书写重复的样式

08:18.070 --> 08:20.070
比方说我们这里还有一些别的图件

08:20.070 --> 08:22.270
那个别的图件里边也用了同样的一个名字

08:22.270 --> 08:23.070
比方的counter

08:23.070 --> 08:24.870
啊像一些常见的名字

08:24.870 --> 08:27.370
比方Title啊Name啊

08:27.370 --> 08:28.870
还有什么Item啊

08:28.870 --> 08:29.670
这些样式的啊

08:29.670 --> 08:30.670
常见的这些名字

08:30.670 --> 08:32.270
我们可能到处会用

08:32.270 --> 08:33.370
在一个大型工程里边

08:33.370 --> 08:34.470
我们的css样式

08:34.470 --> 08:36.070
可能分布在不同的地方

08:36.070 --> 08:37.970
那么为了保证名称的唯一

08:37.970 --> 08:38.970
避免冲突

08:38.970 --> 08:39.670
所以说呢

08:39.670 --> 08:41.470
他在最终给你打包的时候呢

08:41.470 --> 08:43.070
给你加上这么一个东西啊

08:43.070 --> 08:44.670
像这个功能啊

08:44.670 --> 08:47.370
他不是说无必介绍的功能

08:47.370 --> 08:48.670
他本来就是用的

08:48.670 --> 08:52.270
webpack里边的css loader里边的

08:52.270 --> 08:54.270
css module的功能啊

08:54.270 --> 08:56.270
他本身就带着功能的

08:56.270 --> 08:56.370
好

08:56.370 --> 08:57.870
那么我们到时候怎么用呢

08:57.870 --> 08:59.270
跟我们之前啊

08:59.270 --> 09:00.270
跟你们以后啊

09:00.270 --> 09:01.770
我更新了webpack课程之后呢

09:01.770 --> 09:02.770
你们就知道了啊

09:02.770 --> 09:06.170
跟使用那个css module的方式一样

09:06.170 --> 09:06.870
怎么说呢

09:06.870 --> 09:09.270
你导这个css文件的时候呢

09:10.870 --> 09:11.770
这个文件

09:11.770 --> 09:15.170
它会交给css module啊

09:15.170 --> 09:17.170
module来进行处理

09:18.770 --> 09:18.970
啊

09:18.970 --> 09:19.770
就这个

09:19.770 --> 09:20.770
它怎么处理的

09:20.770 --> 09:22.770
就是css文件

09:22.770 --> 09:23.970
会交给谁呢

09:23.970 --> 09:28.870
交给css module来进行处理

09:28.870 --> 09:29.670
处理过后呢

09:29.670 --> 09:31.470
它会变成一个对象啊

09:31.470 --> 09:33.070
它变会变成一个对象

09:33.070 --> 09:34.870
那么你这个对象里边

09:34.870 --> 09:35.870
它的属性呢

09:35.870 --> 09:37.670
就是你那样式的名称啊

09:37.670 --> 09:39.070
咱们来演示一下吧

09:39.070 --> 09:40.870
这里styles from

09:41.170 --> 09:43.870
我们从这里css文件导入的时候呢

09:43.870 --> 09:45.170
它会有这么一个过程

09:45.170 --> 09:48.370
它会先交给css module来进行处理

09:48.370 --> 09:49.770
处理完了过后呢

09:49.770 --> 09:51.370
再放到这个变量里边

09:51.370 --> 09:52.670
那么这个变量是啥呢

09:52.670 --> 09:54.270
这个变量就是个对象

09:54.270 --> 09:54.570
好

09:54.570 --> 09:54.870
保存

09:54.870 --> 09:55.570
你看一下啊

09:57.170 --> 09:57.770
打印出来

09:57.770 --> 09:58.470
我们看一下这边

09:59.570 --> 09:59.870
哎

09:59.870 --> 10:01.170
你看到没

10:01.170 --> 10:02.470
看没

10:02.470 --> 10:03.670
是不是个对象

10:03.670 --> 10:05.670
这个对象里边有个属性counter

10:05.670 --> 10:06.670
counter是啥呢

10:06.670 --> 10:08.670
是不是就是我们的那样式的名称

10:08.670 --> 10:08.970
对吧

10:08.970 --> 10:10.370
是那样式的名称

10:10.370 --> 10:12.670
哎那样我们的那样式变成了啥

10:12.670 --> 10:15.570
是变成了它的属性名

10:15.570 --> 10:17.270
看没变成了属性名了

10:17.270 --> 10:17.870
对吧

10:17.870 --> 10:18.470
然后呢

10:18.470 --> 10:19.570
这里边呢

10:19.570 --> 10:20.270
写上了啥

10:20.270 --> 10:24.170
是不是最终那样式的名称放在这了

10:24.170 --> 10:25.770
所以说我们应该怎么做

10:25.770 --> 10:26.670
应该咋做

10:26.670 --> 10:28.470
这里的那样式到底是啥

10:28.470 --> 10:32.970
是不是来自于这个styles里边的属性counter

10:32.970 --> 10:33.470
啊

10:33.470 --> 10:33.870
看没

10:33.870 --> 10:35.970
我们把这个属性放到这来

10:35.970 --> 10:37.670
那么它最终生成的

10:37.770 --> 10:40.370
最终的样式名是不是放到这来了

10:40.370 --> 10:40.970
对吧

10:40.970 --> 10:41.170
好

10:41.170 --> 10:42.770
我们来看一下啊

10:42.770 --> 10:43.170
保存

10:45.810 --> 10:46.010
好

10:46.010 --> 10:46.510
我们看一下

10:46.510 --> 10:46.610
哎

10:46.610 --> 10:47.310
你们这里边

10:49.010 --> 10:49.810
哎哎

10:49.810 --> 10:50.710
跑了去

10:50.710 --> 10:51.410
哦在这啊

10:51.410 --> 10:52.210
在这

10:52.210 --> 10:53.310
那么这个div

10:53.310 --> 10:53.410
啊

10:53.410 --> 10:54.810
你看一下这个div

10:54.810 --> 10:56.310
这个div

10:56.310 --> 10:58.510
是不是样式名变成这个样式名了

10:58.510 --> 10:59.310
那么这个样式名

10:59.310 --> 11:00.510
是不是已经有效果了

11:00.510 --> 11:01.010
对吧

11:01.010 --> 11:02.810
上下100个项数左右了

11:02.810 --> 11:04.610
o2就完事了

11:04.610 --> 11:06.010
对不对

11:06.010 --> 11:07.010
好

11:07.010 --> 11:08.010
我们这里呢

11:08.110 --> 11:09.910
为什么哦没有定宽的

11:09.910 --> 11:11.710
宽度固定一下

11:11.710 --> 11:13.010
固定一下宽度

11:13.010 --> 11:13.810
宽度的话

11:13.810 --> 11:15.310
500个项数吧

11:15.310 --> 11:15.910
500个项数

11:17.410 --> 11:18.310
500个项数

11:18.310 --> 11:19.210
这放的太大了

11:19.210 --> 11:19.510
啊

11:21.510 --> 11:23.610
500个项数也

11:23.610 --> 11:24.410
那这样吧

11:24.410 --> 11:24.810
这样吧

11:26.410 --> 11:27.510
margin我不设置的

11:27.510 --> 11:28.010
take a stand

11:28.010 --> 11:29.010
我就说这个意思啊

11:29.010 --> 11:30.410
这里边的样式随便理解

11:30.410 --> 11:31.610
take a stand center

11:31.610 --> 11:32.410
啊

11:32.410 --> 11:32.810
完了

11:32.810 --> 11:33.210
对吧

11:33.210 --> 11:33.610
完了

11:34.410 --> 11:34.510
好

11:34.510 --> 11:37.410
那么如果说你要在里边进一步加样式的话

11:37.510 --> 11:38.310
也可以啊

11:38.310 --> 11:39.110
button

11:39.110 --> 11:40.410
里边的按钮呢

11:40.410 --> 11:40.810
按钮了

11:40.810 --> 11:42.210
我们该设置个margin

11:42.210 --> 11:43.010
上下为0

11:43.010 --> 11:44.210
左右了为34个项数

11:45.710 --> 11:46.310
好

11:46.310 --> 11:46.810
加

11:48.310 --> 11:49.110
做完了

11:49.110 --> 11:49.810
对不对

11:49.810 --> 11:50.010
好

11:50.010 --> 11:52.210
如果说这里边还有这么一个元素啊

11:52.210 --> 11:53.610
这里是一个啥元素

11:53.610 --> 11:54.710
se元素

11:54.710 --> 11:54.910
好

11:54.910 --> 11:56.910
比方说他里边的se

11:56.910 --> 11:58.410
也有样式名

11:58.410 --> 11:59.710
也有样式

11:59.710 --> 12:00.910
se

12:00.910 --> 12:01.010
啊

12:01.010 --> 12:03.210
比方说这种是用了成绩选择器的

12:03.210 --> 12:03.810
对吧

12:03.810 --> 12:05.410
选中了成绩样式的

12:05.410 --> 12:05.910
好

12:05.910 --> 12:07.110
选中这个se

12:07.510 --> 12:08.810
我们给他设置一下color

12:09.910 --> 12:10.910
color样式的话

12:10.910 --> 12:12.510
给他设为红色吧

12:12.510 --> 12:13.510
read

12:13.510 --> 12:13.810
好

12:13.810 --> 12:14.810
咱们保存

12:14.810 --> 12:15.510
不是

12:15.510 --> 12:16.210
title

12:16.210 --> 12:17.010
title

12:17.010 --> 12:17.710
换个名字嘛

12:17.710 --> 12:18.310
title

12:18.310 --> 12:19.010
保存

12:19.010 --> 12:19.310
好

12:19.310 --> 12:20.210
我们在这边

12:20.210 --> 12:21.610
是不是要应用样式名

12:21.610 --> 12:22.110
对吧

12:23.410 --> 12:25.710
这边是不是要把一个样式名加上

12:25.710 --> 12:27.410
那我们能不能直接

12:27.410 --> 12:28.610
直接加这个title

12:28.610 --> 12:29.410
能不能

12:29.410 --> 12:30.310
是不是不行

12:30.310 --> 12:30.510
好

12:30.510 --> 12:31.610
我们这里把输出一下

12:31.610 --> 12:32.010
看一下

12:33.610 --> 12:34.010
保存

12:35.510 --> 12:35.710
好

12:35.710 --> 12:37.110
我们这里看一下这里

12:37.110 --> 12:38.110
加了title之后

12:39.310 --> 12:40.710
加这个那样式之后

12:40.710 --> 12:40.910
诶

12:42.410 --> 12:43.510
这里

12:44.510 --> 12:44.910
加

12:45.610 --> 12:45.910
诶

12:45.910 --> 12:46.610
不对哦

12:46.610 --> 12:48.610
他这个那样式怎么着也得应用进去

12:48.610 --> 12:49.010
对了

12:50.310 --> 12:51.310
诶

12:51.310 --> 12:57.850
这为什么没有应用进去的样式

12:57.850 --> 13:03.890
这个是加减

13:03.890 --> 13:04.690
哦哦哦

13:04.690 --> 13:05.090
哦

13:05.090 --> 13:05.590
看错了啊

13:05.590 --> 13:06.090
不看

13:06.090 --> 13:06.790
看到这儿去了

13:06.790 --> 13:06.990
好

13:06.990 --> 13:07.290
在这

13:07.290 --> 13:07.890
对吧

13:07.890 --> 13:09.390
什么应用进去了样式

13:09.390 --> 13:09.690
好

13:09.690 --> 13:10.890
那么为什么没生效呢

13:10.890 --> 13:11.490
我们来看一下

13:11.490 --> 13:12.890
所以一样的问题

13:12.890 --> 13:13.890
一样的问题

13:13.890 --> 13:14.690
你看title

13:15.390 --> 13:16.390
title后边

13:16.390 --> 13:17.690
所以也给加这个东西

13:17.690 --> 13:17.990
对吧

13:17.990 --> 13:19.190
所以也加这个东西

13:19.890 --> 13:22.290
所以说我们是不是动态的来获取title

13:22.290 --> 13:23.290
那么我们看一下

13:23.290 --> 13:24.590
他跟我们生成的对

13:24.590 --> 13:26.090
对象里面的属性是咋

13:26.890 --> 13:27.890
我们虽然说

13:27.890 --> 13:29.890
写了成绩关系

13:29.890 --> 13:31.490
在这里面写了成绩关系没

13:31.490 --> 13:32.390
写了对吧

13:32.390 --> 13:34.490
这个title是在contour下面的

13:34.490 --> 13:35.290
但是呢

13:35.290 --> 13:36.690
他生成的时候呢

13:36.690 --> 13:37.690
他生成出来

13:37.690 --> 13:39.290
仍然是同一个级别的

13:39.890 --> 13:40.490
所以说呢

13:40.490 --> 13:41.390
你这里呢

13:41.790 --> 13:42.990
CSS module呢

13:42.990 --> 13:43.690
官方呢

13:43.690 --> 13:45.290
他建议你呢

13:45.290 --> 13:47.890
你在开启了CSS module之后

13:48.490 --> 13:50.190
建议你直接

13:50.590 --> 13:51.890
直接使用

13:51.990 --> 13:52.590
那个

13:53.390 --> 13:54.590
直接使用内央市民

13:54.590 --> 13:55.890
就不要有成绩

13:56.490 --> 13:57.990
内央市民直接来就行了

13:57.990 --> 13:58.990
不要有成绩

13:58.990 --> 14:00.590
他会给你处理一个

14:00.590 --> 14:01.490
我们用成绩

14:01.490 --> 14:02.990
无非就是为了唯一嘛

14:02.990 --> 14:03.390
对不对

14:03.390 --> 14:04.590
要精确的选中

14:04.590 --> 14:05.190
但是呢

14:05.190 --> 14:06.090
CSS module

14:06.090 --> 14:07.790
他已经给你解决这个问题了

14:07.790 --> 14:09.390
已经保证那样是唯一了

14:09.390 --> 14:11.090
所以说你不用去管这个问题

14:11.190 --> 14:12.290
直接使用就完事了

14:12.790 --> 14:13.390
保存

14:13.490 --> 14:15.690
那么我们这边是不是使用的是方式一样的

14:16.290 --> 14:16.790
这里

14:18.490 --> 14:19.290
styles

14:19.390 --> 14:20.190
title

14:20.690 --> 14:21.290
保存

14:21.790 --> 14:22.390
你看

14:22.790 --> 14:23.590
变成红色了

14:23.590 --> 14:24.090
对吧

14:24.290 --> 14:24.490
哎

14:24.490 --> 14:25.190
这是这一块

14:25.490 --> 14:26.890
这是第一种情况啊

14:26.890 --> 14:27.790
我就讲完了

14:28.790 --> 14:31.990
如果是某个组件特有的样式

14:32.190 --> 14:34.190
他不与其他组件共享

14:34.690 --> 14:35.990
那么这种情况下呢

14:36.090 --> 14:39.490
将该样式文件与组件放置到同一个目录

14:39.490 --> 14:40.590
这是我们通常的做法

14:40.990 --> 14:42.290
他不是强制性的啊

14:42.490 --> 14:43.890
这不是强制性的

14:44.290 --> 14:45.090
大主事啊

14:45.290 --> 14:45.890
非

14:46.890 --> 14:47.790
强制性

14:48.890 --> 14:49.290
好

14:49.290 --> 14:49.990
这是第一点

14:50.390 --> 14:51.390
第二个点呢

14:51.390 --> 14:54.690
是如果某些样式

14:55.290 --> 14:59.990
可能被某些组件共享啊

15:00.290 --> 15:01.990
可能被某些组件共享

15:02.990 --> 15:04.390
不是所有组件共享哦

15:04.390 --> 15:05.890
是某些组件共享

15:06.190 --> 15:07.590
那么这样的样式

15:07.990 --> 15:08.990
这样的样式

15:09.890 --> 15:11.690
通常放到

15:12.290 --> 15:13.190
assert

15:14.890 --> 15:18.190
文件夹下面的css文件夹中

15:18.890 --> 15:19.890
我们放到这里边

15:20.190 --> 15:20.890
我们通常呢

15:20.890 --> 15:22.690
你们在使用那个view的时候

15:22.690 --> 15:24.490
其实也有这么一个

15:25.090 --> 15:27.290
约定熟成的一种规范吧

15:27.590 --> 15:29.190
在src目录下边呢

15:29.190 --> 15:31.890
我们一般会新建个文件夹叫assert

15:32.390 --> 15:33.390
就表示的是

15:33.490 --> 15:35.190
我们的是迁入式的资源

15:35.190 --> 15:36.990
比方说什么svg啊

15:37.190 --> 15:39.390
还有什么png图片啊

15:39.390 --> 15:40.390
还有css啊

15:40.390 --> 15:40.890
对对吧

15:40.890 --> 15:42.090
一迁入式的资源

15:42.190 --> 15:42.390
好

15:42.390 --> 15:43.390
咱们放在这里边

15:43.790 --> 15:43.990
好

15:43.990 --> 15:45.590
那么这里边可以包含什么

15:46.490 --> 15:48.490
可以包含音乐级文件夹

15:48.490 --> 15:48.990
对吧

15:48.990 --> 15:51.290
还要包含css文件夹啊

15:51.290 --> 15:51.990
一些资源

15:52.290 --> 15:52.790
放到这

15:53.390 --> 15:53.690
好

15:53.690 --> 15:55.790
比方说我们有一些共享的样式

15:55.790 --> 15:56.890
我们可以放到这里边

15:57.290 --> 15:57.890
嗯

15:58.090 --> 15:59.090
就例子吧啊

15:59.290 --> 15:59.890
就例子

16:00.590 --> 16:03.090
嗯有一些共享的样式

16:03.090 --> 16:04.590
比方说吧

16:04.790 --> 16:06.890
我们这里写个这么一个样式吧

16:07.190 --> 16:08.090
随便写一个啊

16:08.690 --> 16:09.290
呃

16:11.500 --> 16:14.300
就是link.css

16:14.600 --> 16:15.800
link.css

16:15.800 --> 16:18.200
这里边专门来处理一些A元数的样式

16:18.400 --> 16:19.900
比方说A元数一个什么样式呢

16:19.900 --> 16:20.800
有个active

16:21.000 --> 16:21.300
对吧

16:21.300 --> 16:22.500
有这么一个样式啊

16:22.500 --> 16:24.300
active这么一个样式啊

16:24.400 --> 16:25.800
当我们激活的时候

16:25.800 --> 16:26.900
A元数的颜色呢

16:26.900 --> 16:28.200
我们该随便设置一个啊

16:28.200 --> 16:29.500
f4里面红色

16:30.000 --> 16:30.600
行吧啊

16:30.600 --> 16:31.900
我们写了这么一个样式

16:32.200 --> 16:32.400
好

16:32.400 --> 16:33.100
那么这个样式呢

16:33.100 --> 16:35.300
可能在不同的组件里面都可能用到

16:35.700 --> 16:37.100
它只要是激活的样式呢

16:37.100 --> 16:38.800
我们可能会统一的使用它

16:38.800 --> 16:39.200
当然呢

16:39.200 --> 16:40.900
你这里也可以专门来写啊

16:40.900 --> 16:41.600
active 1

16:41.600 --> 16:43.100
active 2啊等等

16:43.100 --> 16:44.500
不同的激活样式啊

16:44.500 --> 16:46.300
我们就就写一个就行了啊

16:46.500 --> 16:47.400
就这么个意思啊

16:47.400 --> 16:48.400
说这个意思就行了

16:48.400 --> 16:50.000
那比方说什么安柳的样式呢

16:50.000 --> 16:51.400
是不是也可以放进来对吧

16:51.400 --> 16:52.100
button

16:52.800 --> 16:53.300
button

16:53.300 --> 16:55.700
你可以把它分得很细啊

16:55.700 --> 16:56.400
link.css

16:56.400 --> 16:57.200
button css

16:57.200 --> 16:57.900
比方说啊

16:58.100 --> 16:58.400
呃

16:59.300 --> 17:00.240
给它这么个样式

17:00.240 --> 17:00.800
button

17:01.300 --> 17:02.400
宽度呢

17:02.900 --> 17:03.600
呃

17:03.600 --> 17:04.200
100

17:04.640 --> 17:05.800
150个像素

17:06.300 --> 17:07.300
高度呢

17:07.900 --> 17:09.400
40个像素啊

17:09.400 --> 17:10.100
然后呢

17:10.100 --> 17:10.900
nth

17:11.200 --> 17:12.000
40个像素

17:12.500 --> 17:13.000
呃

17:13.700 --> 17:14.300
border

17:15.300 --> 17:16.000
一个像素

17:16.000 --> 17:16.700
solid

17:17.500 --> 17:17.900
呃

17:19.000 --> 17:19.500
css

17:19.500 --> 17:20.800
我们随便写一下吧啊

17:20.800 --> 17:21.500
by ground

17:21.900 --> 17:22.800
背景颜色呢

17:22.800 --> 17:24.600
我们用008c8c啊

17:24.600 --> 17:25.100
colour呢

17:25.100 --> 17:26.200
用FF

17:27.000 --> 17:27.800
方size

17:28.100 --> 17:29.700
为1.5页

17:30.400 --> 17:30.700
好

17:30.700 --> 17:31.200
行了啊

17:31.200 --> 17:32.200
然后txtln

17:32.200 --> 17:32.900
都不用写了

17:33.100 --> 17:33.300
好

17:33.300 --> 17:34.600
我们就写了这么一个

17:35.400 --> 17:35.800
button

17:35.800 --> 17:36.500
这么一个

17:36.900 --> 17:38.200
也不算是通用吧

17:38.200 --> 17:38.400
啊

17:38.400 --> 17:39.600
也不算是通用

17:39.600 --> 17:40.200
但是呢

17:40.200 --> 17:41.400
它是一个就是

17:41.900 --> 17:44.700
被不不少的组件都会用这个样式

17:45.200 --> 17:45.400
啊

17:45.400 --> 17:47.700
我们既要保持它的名字为1

17:47.900 --> 17:48.400
并且呢

17:48.400 --> 17:49.100
又要共享

17:49.100 --> 17:51.000
我们通常会写到这啊

17:51.000 --> 17:52.800
有这两种情况啊

17:52.800 --> 17:54.600
就第一种情况和第二种情况

17:54.600 --> 17:56.400
他们都有共同特点啊

17:56.400 --> 17:57.300
要保证

17:58.600 --> 17:59.000
要

17:59.900 --> 18:00.700
保证

18:00.900 --> 18:02.200
央视名

18:03.400 --> 18:04.300
央视

18:04.700 --> 18:05.900
就那样是

18:06.900 --> 18:07.800
名称

18:07.800 --> 18:08.400
为一

18:08.500 --> 18:09.900
他们都有这么一个共同特点

18:10.100 --> 18:11.800
只是共享的程度不一样

18:11.800 --> 18:13.300
第一种的共享程度要低一点

18:13.300 --> 18:14.500
第二种的共享程度要高一点

18:14.500 --> 18:15.700
但是他们都要保证

18:15.800 --> 18:16.700
央视名为一

18:16.700 --> 18:19.000
所以说他们都需要使用css module

18:19.200 --> 18:20.500
那么在无密接式里边

18:20.500 --> 18:22.800
它本来默认就开启了css module

18:22.900 --> 18:24.100
所以你直接用短事了

18:24.400 --> 18:25.000
好来吧

18:25.000 --> 18:25.800
来吧来吧

18:26.000 --> 18:26.500
好比方说

18:26.500 --> 18:27.100
conter

18:27.200 --> 18:28.200
conter接式里边

18:28.200 --> 18:29.900
它除了用这个里边的样式呢

18:29.900 --> 18:31.100
还会用到button

18:32.100 --> 18:33.000
啊button

18:35.300 --> 18:36.100
来自于哪呢

18:36.500 --> 18:37.800
而set

18:38.600 --> 18:39.500
css

18:40.100 --> 18:40.600
button

18:40.900 --> 18:41.600
css

18:41.700 --> 18:43.000
还会用到这里边的样式对吧

18:43.000 --> 18:44.800
好那么这里有两个按钮来吧

18:45.100 --> 18:45.700
class name

18:45.700 --> 18:47.300
所以加上就完成了对吧

18:47.500 --> 18:48.000
button

18:48.400 --> 18:48.900
啊

18:49.500 --> 18:50.100
加上就完成了

18:50.100 --> 18:51.900
当然你还可以做出很多的

18:52.100 --> 18:52.900
按钮效果

18:53.000 --> 18:53.900
比方说小按钮

18:53.900 --> 18:54.400
大按钮

18:54.400 --> 18:55.300
中心按钮对吧

18:55.300 --> 18:56.000
都可以做出来

18:56.200 --> 18:57.000
好保存

18:58.300 --> 18:58.700
哎

18:59.800 --> 19:00.700
我看一下啊

19:01.100 --> 19:01.700
我看一下

19:02.200 --> 19:02.800
怎么回事

19:03.500 --> 19:04.300
刷新一下了

19:04.700 --> 19:05.500
啊对了啊

19:05.500 --> 19:06.400
没问题了对吧

19:07.200 --> 19:07.600
好

19:07.800 --> 19:08.500
所以做出来了

19:08.500 --> 19:08.900
对吧

19:08.900 --> 19:09.600
两个按钮

19:09.800 --> 19:12.400
好那么这两个样式是都可以共享的

19:12.400 --> 19:12.800
而且呢

19:12.800 --> 19:14.500
它保证了样式的唯一

19:14.500 --> 19:15.200
你看一下

19:16.500 --> 19:19.300
你看是不是也也是经过css module

19:19.300 --> 19:20.300
来进行处理的

19:20.400 --> 19:20.800
对吧

19:20.800 --> 19:21.900
也会进行处理

19:22.000 --> 19:23.700
好合并之后呢样式在这里边

19:23.900 --> 19:25.900
啊会被会被合并到一个文件

19:26.000 --> 19:27.700
你看是吧在这对吧

19:27.700 --> 19:29.500
它就不会造成样式的冲突

19:29.900 --> 19:31.100
啊这么个意识啊

19:31.500 --> 19:32.900
好这是这一块

19:33.900 --> 19:35.800
好那么比方说我们link对吧

19:35.800 --> 19:37.100
之前写过这个active

19:37.200 --> 19:39.800
好我们在菜单里边说也可以写了

19:39.800 --> 19:40.300
对吧

19:40.300 --> 19:41.900
菜单里边可以写了

19:42.100 --> 19:43.400
菜单里边我们name link

19:43.400 --> 19:44.700
它不是一个内样式

19:44.700 --> 19:45.500
class吗对吧

19:45.500 --> 19:46.600
选中的内样式

19:46.600 --> 19:47.600
你看一下啊

19:47.800 --> 19:48.300
这里

19:49.800 --> 19:52.100
啊就是当前激活的样式

19:52.100 --> 19:53.300
哎激活的样式class

19:53.300 --> 19:54.500
active没问题啊

19:54.600 --> 19:56.300
他为什么没有显示出来红色呢

19:56.300 --> 19:57.800
你看我们这里的样式

19:58.000 --> 20:00.300
哎不是给他设置的active吗

20:00.300 --> 20:00.800
对吧

20:00.800 --> 20:01.700
不是给他设置的吗

20:01.800 --> 20:03.200
他为什么没有显示出来呢

20:03.800 --> 20:04.400
为啥呢

20:05.100 --> 20:05.400
啊

20:05.800 --> 20:06.900
为啥没有显示出来

20:06.900 --> 20:08.900
是不是又还是因为那个

20:08.900 --> 20:10.800
css module的原因

20:11.000 --> 20:12.600
他会把他样式名字改了

20:12.600 --> 20:14.100
改成一个唯一的名称

20:14.400 --> 20:15.200
那怎么办呢

20:16.000 --> 20:16.800
那怎么办呢

20:16.900 --> 20:18.000
好那么这里呢

20:18.000 --> 20:20.700
我们是不是在name link里边可以设置啊

20:20.800 --> 20:22.900
说可以设置哎设置啥

20:22.900 --> 20:23.900
设置class

20:24.500 --> 20:25.800
啊不要叫什么

20:26.200 --> 20:29.000
嗯active class

20:29.000 --> 20:31.200
对吧active的样式名称

20:31.200 --> 20:32.500
是不是可以来自于

20:32.800 --> 20:33.300
哪

20:33.800 --> 20:36.600
是不是来自于link styles from

20:38.400 --> 20:39.100
assets

20:39.800 --> 20:41.900
啊这里link叫css

20:44.040 --> 20:45.040
好是不是来自于这

20:45.340 --> 20:46.140
对吧哎

20:46.340 --> 20:46.940
active

20:47.740 --> 20:48.940
说这样设置完事了

20:49.040 --> 20:50.640
好应该加上啊加上

20:52.830 --> 20:53.670
好保存

20:54.470 --> 20:55.570
好看一下哎

20:55.870 --> 20:56.470
这样了吗

20:57.110 --> 20:58.970
他说这个模块找不到

20:59.670 --> 21:01.070
哦还有css文件

21:01.670 --> 21:02.370
好保存

21:03.170 --> 21:03.970
好看一下

21:04.970 --> 21:05.370
来

21:06.470 --> 21:06.970
放心

21:09.100 --> 21:09.700
什么情况

21:10.200 --> 21:11.200
好登录业

21:11.600 --> 21:12.200
首业

21:12.800 --> 21:14.800
哎这里什么情况看一下啊

21:16.500 --> 21:18.600
呃这个哦这里

21:20.300 --> 21:23.200
呃这个名字这个属性的名字

21:23.400 --> 21:25.200
完了我有点忘了啊

21:25.200 --> 21:26.100
我有点忘了

21:26.200 --> 21:27.100
来吧查一下

21:27.900 --> 21:31.300
查一下就是rax rotaldome里边东西啊

21:33.900 --> 21:34.600
不要去查

21:34.700 --> 21:35.600
不要去看别的

21:35.800 --> 21:36.900
直接看npm上

21:38.400 --> 21:40.100
rax rotaldome查一下啊

21:40.200 --> 21:42.600
那个lamblin和那个属性名叫啥

21:44.380 --> 21:46.280
啊这里有个document

21:46.880 --> 21:47.880
他的文档

21:49.080 --> 21:52.080
他的文档在哪找一找啊github上面

21:52.280 --> 21:53.880
如果说一般找文档的话

21:53.880 --> 21:55.380
如果说npm没有的话

21:55.380 --> 21:56.780
我们直接去github

22:00.290 --> 22:02.090
我等一下啊如果有点忘了

22:07.150 --> 22:08.950
叫啥来着他的名字

22:09.650 --> 22:12.150
叫做active class name试一下呢

22:12.750 --> 22:13.450
是这个吗

22:16.380 --> 22:18.380
哦是这个啊我就不用找了啊

22:18.680 --> 22:20.680
啊看到了是这个啊

22:20.680 --> 22:23.680
于是他刚设置一下高速这个lamblin

22:23.680 --> 22:25.180
可这个组件哎

22:25.180 --> 22:27.880
当你激活的时候你的那样是名称

22:27.880 --> 22:30.680
为这个名称好这个名称是不是动态读取了

22:30.680 --> 22:32.280
对吧好那么你看一下

22:32.380 --> 22:33.480
欢迎啊

22:33.680 --> 22:35.680
首业登录业欢迎技术系

22:35.680 --> 22:37.180
好为什么首业也被选中了

22:37.180 --> 22:39.080
是因为啊没有加一个rex

22:40.720 --> 22:41.480
好保存

22:42.080 --> 22:43.580
好是没完事了对吧

22:44.080 --> 22:44.980
啊这是这一块

22:45.680 --> 22:46.980
好这是这种场景啊

22:47.080 --> 22:49.480
主要是大家说一下这些场景有完事了

22:49.880 --> 22:51.580
好第三个场景呢就是

22:52.180 --> 22:53.780
嗯全局样式

22:54.280 --> 22:57.280
啊前面两个的都算是局部样式啊

22:57.280 --> 22:58.180
局部共享

22:58.280 --> 22:59.880
他们由于他是局部的

22:59.880 --> 23:02.080
所以说呢有可能别的部分呢

23:02.080 --> 23:03.580
也要用同样的名称

23:03.780 --> 23:05.680
因此呢为了避免名称冲突

23:05.680 --> 23:07.880
所以说呢我们通常会啊

23:07.880 --> 23:09.080
在局部这一块呢

23:09.080 --> 23:10.880
他会自动使用sh module

23:11.380 --> 23:14.680
如果说我们要做一个全局的样式出来啊

23:14.680 --> 23:17.480
就是名称一定为一

23:18.280 --> 23:20.580
不需要css module

23:21.380 --> 23:23.080
啊不需要css module

23:23.480 --> 23:27.080
处理啊就我们写的啥名字就是啥名字

23:27.180 --> 23:28.380
不需要你来处理

23:30.780 --> 23:32.980
那么面对这种情况能不能操作呢

23:32.980 --> 23:33.580
可以

23:34.580 --> 23:37.780
在那个5米解释里边他有这么一个约定啊

23:39.760 --> 23:41.460
5米解释约定

23:42.760 --> 23:45.260
啊sh module下面的global

23:45.960 --> 23:47.120
的css

23:47.460 --> 23:48.160
样式

23:49.260 --> 23:50.960
是全局样式

23:51.460 --> 23:56.360
不会交给css module处理啊

23:56.360 --> 23:58.560
不会交给这个处理啊就这么简单

23:58.960 --> 24:01.760
所以说我要做一个全局样式应该写哪呢

24:01.860 --> 24:04.560
sh module下面直接建一个global

24:04.560 --> 24:06.760
的css直接建一个这个东西

24:07.260 --> 24:08.460
好比方说吧

24:08.460 --> 24:09.660
我就举个例子啊

24:09.860 --> 24:11.560
啊我们刚才那个active我们写的

24:12.060 --> 24:15.060
啊我们写这那么这里的active是不会被

24:15.060 --> 24:17.060
比方说我们这里先008c8c

24:18.160 --> 24:20.460
啊这里的active他是不会被

24:21.360 --> 24:22.960
css module来处理的

24:23.160 --> 24:25.060
咱们来看一下吧我们这里写好了

24:25.060 --> 24:27.660
你会发现哎我们这里刷新是啊

24:28.060 --> 24:29.460
然后呢我们看一下sources

24:30.160 --> 24:31.560
最终和平的样式里边

24:31.860 --> 24:34.660
你会发现啊active呢我们在link里边写的

24:34.660 --> 24:36.060
是不是局部样式啊对吧

24:36.060 --> 24:39.060
他这样子使用了啊全局里边呢

24:39.160 --> 24:41.860
也有一个哎全局的

24:42.660 --> 24:44.060
是不是要得重启一次啊

24:44.060 --> 24:45.860
这个东西得重启一次服务器

24:47.760 --> 24:49.760
yard start start

24:50.560 --> 24:51.460
啊重启一次

24:51.560 --> 24:53.060
你会发现这个样式呢

24:53.060 --> 24:54.860
它是远峰不动的

24:55.060 --> 24:57.660
直接和平到最终的样式代码里边

24:57.860 --> 24:58.660
那么这样子的

24:58.660 --> 25:00.960
你得不你这边这里写的是什么

25:00.960 --> 25:02.060
那样式的名称

25:02.260 --> 25:03.760
那么你到时候用的时候

25:03.760 --> 25:05.660
就用什么那样式的名称啊

25:05.660 --> 25:07.260
他会自己给你导入进来啊

25:07.260 --> 25:08.560
你都不用去手动导入

25:08.660 --> 25:09.860
他会自动导入进来

25:10.260 --> 25:11.060
好看一下吧

25:13.190 --> 25:14.390
啊起动起来了啊

25:15.190 --> 25:16.390
点击右键点他

25:16.490 --> 25:17.390
看一下sources

25:17.690 --> 25:19.190
最终和平了css里边

25:19.790 --> 25:21.690
你看一下是不是一个active对吧

25:21.990 --> 25:24.090
就这么一个玩意儿就这么简单啊

25:24.090 --> 25:25.590
给你和平一下了啊

25:25.590 --> 25:26.790
你看前面的active

25:26.890 --> 25:28.490
是不是他变成了一个

25:28.790 --> 25:31.490
嗯他经过了css module来进行处理的

25:31.590 --> 25:33.490
那么这个这个这个active呢

25:33.490 --> 25:35.990
他没有经过处理啊就这么简单

25:36.090 --> 25:37.390
所以说如果说你要做一个

25:37.390 --> 25:39.390
就是像这种名字的active的话

25:39.490 --> 25:41.490
啊你可以在这里啊

25:41.490 --> 25:43.090
比方说这里我就不需要这个玩意儿了

25:43.090 --> 25:45.390
对吧就不需要这个玩意儿了啊

25:45.490 --> 25:47.490
比方说有些样子他本来就是全局的

25:47.490 --> 25:48.990
全局通用的啊

25:49.290 --> 25:51.390
比方说比方说啊就是这个active

25:51.390 --> 25:53.990
那我就不需要加了还没啊保存

25:54.990 --> 25:55.690
啊你看

25:56.490 --> 25:57.890
所以仍然可以达到一样的效果

25:58.190 --> 26:00.490
对吧啊就这一块啊

26:00.890 --> 26:04.090
啊当然了如果说你了解更多的css module的

26:04.090 --> 26:05.890
知识的话你会知道啊

26:05.890 --> 26:07.090
其实在css module里边

26:07.090 --> 26:08.990
单一把里边还可以进一步

26:09.090 --> 26:10.290
精细的控制

26:11.290 --> 26:14.290
你这个那样是是全局的还是局部的啊

26:14.590 --> 26:16.790
当然了我不知道我估计啊

26:16.890 --> 26:20.490
可能如果说你之前没有看过我新翻版的

26:20.490 --> 26:23.090
那一版本的vpec的话

26:23.290 --> 26:25.090
你可能不知道这一块啊没关系

26:25.090 --> 26:26.190
不知道的话无所谓

26:26.190 --> 26:27.790
如果说你看过之前的

26:28.190 --> 26:30.790
就是更新过后的vpec的课程的话

26:31.090 --> 26:32.890
啊你这一块我就没什么好处的了

26:32.890 --> 26:35.690
我去啊你一说一说你就明白了

26:36.290 --> 26:37.290
好就这一块啊

26:38.190 --> 26:39.690
嗯然后下面

26:40.090 --> 26:42.090
第二个问题那么第一个问题是否解决了

26:42.190 --> 26:44.690
那样是名称的重复的问题是否解决了

26:44.690 --> 26:46.390
通过他的解决自动解决了啊

26:46.390 --> 26:48.690
你看我这里嗯在用的时候呢

26:48.690 --> 26:51.190
像这个文件像那个全局的css

26:51.290 --> 26:53.490
那么我这里都不用导入不用导入

26:53.490 --> 26:55.990
你不需要去导入这个global.css啊

26:55.990 --> 26:57.690
不需要去导入他自动给你导入的

26:57.690 --> 26:58.690
你直接用就完事了

26:59.190 --> 27:01.590
好嗯这是第一块解决了

27:01.590 --> 27:03.490
第二块呢是央视代码重复的问题

27:03.490 --> 27:04.490
也就是说

27:04.490 --> 27:06.490
如何在无敏监视里面使用nice

27:06.890 --> 27:07.890
或者是使用sass

27:08.490 --> 27:09.490
那直接用就完事了

27:09.690 --> 27:12.690
直接用啊nice是天生知识的啊

27:12.690 --> 27:14.690
sass的话你需要安装你们懂的

27:14.690 --> 27:15.690
对吧loader sass

27:15.690 --> 27:17.890
sassloader啊需要安装这两个库

27:18.290 --> 27:20.890
嗯如果是nice的话你直接使用啊

27:20.890 --> 27:22.490
因为sass的话他一带一些东西

27:22.490 --> 27:24.490
比如一带排神啊一带如如笔

27:24.490 --> 27:27.390
对吧嗯但是nice呢他直接用就完事了

27:27.890 --> 27:29.890
所以说我们这里呢比方类似为例啊

27:29.890 --> 27:30.890
直接用就完事了

27:30.990 --> 27:32.790
比方这个global.css里边

27:32.790 --> 27:34.690
我们直接来把它变成nice

27:34.690 --> 27:36.490
你看一下吧直接变成nice

27:37.290 --> 27:39.890
啊给nice订个变量啊color

27:40.790 --> 27:41.690
啊比方说

27:42.390 --> 27:43.290
0088

27:43.690 --> 27:45.490
好那么这边就直接使用这个变量

27:46.690 --> 27:48.990
啊color用就完事了啊直接用

27:49.290 --> 27:49.890
直接用

27:50.290 --> 27:51.190
我都没什么好说的了

27:51.190 --> 27:53.990
像这些css直接用啊直接用

27:54.090 --> 27:56.590
你无非就是把css变成nice

27:56.690 --> 27:58.590
书写nace代码就完事了啊

27:58.590 --> 27:59.690
其他的没有什么变化

28:00.290 --> 28:01.490
那么他会怎么做呢

28:01.590 --> 28:02.590
他会这样的来处理

28:02.790 --> 28:06.990
他会交给就是先把那个就是那个

28:07.590 --> 28:09.290
我们的nice代码

28:10.190 --> 28:10.990
交给谁呢

28:11.390 --> 28:12.590
交给niceloader

28:12.590 --> 28:15.090
对吧啊交给nice加载器

28:15.090 --> 28:16.490
之前学到那个webpack里边

28:16.490 --> 28:18.090
所以这么个东西对吧

28:18.090 --> 28:19.390
他来处理nice代码

28:19.590 --> 28:22.290
然后他会把它转换成什么css代码

28:22.590 --> 28:25.090
然后交给谁是不是交给那个css module

28:25.290 --> 28:26.790
对吧多了一层处理而已

28:27.190 --> 28:29.390
对吧进行了我们写到nice代码

28:29.390 --> 28:31.490
经过一次转换转换的css代码

28:31.490 --> 28:33.790
然后再经过css module

28:33.890 --> 28:36.690
然后最终把它交啊变成什么

28:36.690 --> 28:37.590
还是变成对象

28:37.590 --> 28:39.690
一样的啊一样的没有什么区别

28:39.890 --> 28:41.690
被变成nice过后我们来看一下吧

28:41.990 --> 28:42.690
啊这里

28:43.290 --> 28:46.190
呃css我们再重新启动了啊

28:47.490 --> 28:49.290
这个全剧文件我们再重新启动

28:50.690 --> 28:51.290
start

28:54.290 --> 28:55.690
而央视这一块呢很简单

28:55.690 --> 28:57.590
是有这些细节再说一下

28:58.190 --> 29:01.090
就是如果说你之前学webpack的时候

29:01.290 --> 29:02.590
学过了css module

29:02.890 --> 29:05.590
学过了这个css loader

29:05.590 --> 29:06.690
还有什么loader

29:06.690 --> 29:08.590
sass loader c 乱七八糟的东西对吧

29:08.590 --> 29:09.490
你学过了

29:09.690 --> 29:11.990
ok 那么这一块就是像一个新知识

29:11.990 --> 29:15.590
就是全剧的global.css global.nice

29:15.790 --> 29:17.390
啊就是像这一块知识的

29:17.390 --> 29:18.490
你看是不是仍然有效

29:18.690 --> 29:19.090
看没

29:19.890 --> 29:20.290
你看

29:20.790 --> 29:22.390
激活样式是不是仍然有效

29:22.690 --> 29:23.790
好我们看一下sauce s

29:23.990 --> 29:25.990
sauce s里边最终合并出来的一个tube

29:25.990 --> 29:26.890
是不是还是一个

29:26.990 --> 29:27.390
对吧

29:27.490 --> 29:28.190
说还是一个

29:28.690 --> 29:29.790
啊就这么简单啊

29:30.190 --> 29:31.890
好这是关于这一块

29:32.590 --> 29:33.590
就没他说的了啊

29:33.590 --> 29:35.390
那么就把样式给他先介绍一下

29:35.490 --> 29:35.890
好啊

