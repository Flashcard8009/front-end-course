WEBVTT

00:01.140 --> 00:03.140
咱们又来查询学生了

00:03.140 --> 00:05.140
就是这个功能呢反复做

00:05.140 --> 00:09.140
但是每一次做的呢做的方式呢会慢慢发生变化

00:09.140 --> 00:13.140
然后以前呢我们就把数据的处理啊各种处理是放到组建里边

00:13.140 --> 00:15.140
那么这就可能我们做查询学生

00:15.140 --> 00:19.140
就把查学生管理的数据呢放到Redux里边

00:19.140 --> 00:21.140
让Redux呢帮我们来管理整个数据

00:21.140 --> 00:23.140
好咱们先来看我们的Redux啊

00:23.140 --> 00:28.140
这个Redux呢是比较早期的咱们写的这个仓库里边的东西啊

00:28.140 --> 00:31.140
Action里边呢就一个Students有两个Action

00:31.140 --> 00:34.140
Action创建两个文件

00:34.140 --> 00:37.140
第一个文件呢是对于查询条件的变化啊

00:37.140 --> 00:39.140
它有这么一个Action创建函数Change

00:39.140 --> 00:42.140
你给它一个查询条件对象

00:42.140 --> 00:44.140
给它一个查询条件对象

00:44.140 --> 00:45.140
它给你返回一个Action

00:45.140 --> 00:48.140
那么到时候呢我们就可以通过这个函数

00:48.140 --> 00:50.140
来创建一个Action来进行触发

00:50.140 --> 00:52.140
好这是关于这个Action

00:52.140 --> 00:56.140
其实对于我们组建而言最终就是触发Action就完事了

00:56.140 --> 00:58.140
好另外一个呢是

00:58.140 --> 01:00.140
search result

01:00.140 --> 01:02.140
这里边呢有三个Action创建函数

01:02.140 --> 01:06.140
一个是能带有触发一个带有副作用的Action

01:06.140 --> 01:08.140
那么它会Saga然后会处理这个东西

01:08.140 --> 01:10.140
对于我们组建而言我管它那么多呢

01:10.140 --> 01:12.140
我就创掉那个函数

01:12.140 --> 01:14.140
触发一个Action就完事了

01:14.140 --> 01:16.140
剩下的事情让仓库自己去处理

01:16.140 --> 01:18.140
好另外一个呢是

01:18.140 --> 01:20.140
设置学生的总数还有什么学生数组对吧

01:20.140 --> 01:22.140
还有set is loading对吧

01:22.140 --> 01:24.140
就是这些Action

01:24.140 --> 01:26.140
然后在Saga里边呢我们看一下

01:26.140 --> 01:28.140
Reduce里边再看一下吧

01:28.140 --> 01:30.140
Reduce里边啊这个查询条件

01:30.140 --> 01:32.140
有key有什么sex有什么配级对吧

01:32.140 --> 01:34.140
有limit对吧这是我们的数据结构

01:34.140 --> 01:36.140
然后呢我们的查询结果里边呢

01:36.140 --> 01:38.140
传询结果里边一个data是表示学生数组

01:38.140 --> 01:40.140
一个偷偷表示学生的总数

01:40.140 --> 01:42.140
is loading表示释放正在加赞

01:42.140 --> 01:44.140
就这么一些数据

01:44.140 --> 01:46.140
好这是关于这里啊这一块

01:46.140 --> 01:50.140
然后呢在Saga里边呢我们当时

01:50.140 --> 01:52.140
哎呦这为什么多出这么些玩意

01:52.140 --> 01:56.140
在Saga里边呢我们这里呢

01:56.140 --> 01:58.140
当时用的是mode结构对吧算了算了算了

01:58.140 --> 02:00.140
我们还是用真实的啊用真实的

02:00.140 --> 02:02.140
import

02:02.140 --> 02:04.140
导入那个从学生里导入app

02:04.140 --> 02:07.900
services students

02:07.900 --> 02:11.900
导入那个search students

02:11.900 --> 02:13.900
好这里呢我们

02:13.900 --> 02:15.900
调用这个

02:15.900 --> 02:17.900
这里eod是用call

02:17.900 --> 02:19.900
调用这个函数

02:19.900 --> 02:21.900
然后呢把条件传进去

02:21.900 --> 02:23.900
把条件传进去

02:23.900 --> 02:25.900
啊这要往前扣

02:25.900 --> 02:27.900
条件的话我们就把那个状态啊

02:27.900 --> 02:29.900
就是把那个查询条件

02:29.900 --> 02:31.900
condition啊传进去

02:31.900 --> 02:33.900
这是我们之前写过的

02:33.900 --> 02:35.900
好了仓库也准备好了对吧仓库不已经写好了

02:35.900 --> 02:37.900
那么仓库中的格式呢

02:37.900 --> 02:39.900
呃其实你可以通过这个

02:39.900 --> 02:41.900
控制台就可以看得很清楚了

02:41.900 --> 02:43.900
通过控制台就可以看到

02:43.900 --> 02:45.900
看得很清楚仓库的格式

02:45.900 --> 02:47.900
呃怎么来看呢比方说

02:47.900 --> 02:49.900
我们这里就打印一下吧

02:49.900 --> 02:51.900
打印一下仓库的格式一开始打印一下

02:51.900 --> 02:53.900
store.getState

02:53.900 --> 02:55.900
打印一下

02:55.900 --> 02:57.900
后边呢我会教大家安装一个插件

02:57.900 --> 02:59.900
通过那个插件呢可以看到这个仓库的格式

02:59.900 --> 03:01.900
啊这里面呢

03:01.900 --> 03:03.900
我们打印一下这个仓库啊

03:03.900 --> 03:05.900
仓库里面的数据

03:05.900 --> 03:07.900
然后我们刚才我记得以前在

03:07.900 --> 03:09.900
saga里面我们还写了一些

03:09.900 --> 03:11.900
这些东西把这些console logo去掉

03:11.900 --> 03:13.900
这些什么

03:13.900 --> 03:15.900
这些完了去掉啊去掉

03:15.900 --> 03:17.900
好行了啊那咱们来看一下啊

03:17.900 --> 03:19.900
先出来看一下

03:19.900 --> 03:21.900
这仓库

03:21.900 --> 03:23.900
等他运行啊不管他了

03:23.900 --> 03:25.900
那他运行吧

03:25.900 --> 03:27.900
好那么这个是仓库

03:27.900 --> 03:29.900
仓库呢完了之后呢

03:29.900 --> 03:31.900
这笔记也不需要了

03:31.900 --> 03:33.900
然后呢我们看一下我们的以前写过的组件

03:33.900 --> 03:35.900
以前写过的组件

03:35.900 --> 03:37.900
component里面

03:37.900 --> 03:39.900
我们以前写过的这么两个东西

03:39.900 --> 03:41.900
一个是student search bar

03:41.900 --> 03:43.900
这个组件呢他以前呢

03:43.900 --> 03:45.900
你是给他一些属性对吧给他一些属性

03:45.900 --> 03:47.900
他有一个默认值

03:47.900 --> 03:49.900
他里面有两个东西

03:49.900 --> 03:51.900
一个是key查询关键字

03:51.900 --> 03:53.900
一个是性别只需要这两个东西

03:53.900 --> 03:55.900
对吧只需要这么两个东西

03:55.900 --> 03:57.900
好那么你这里呢

03:57.900 --> 03:59.900
这里呢

03:59.900 --> 04:01.900
你要给他这么一个默认值

04:01.900 --> 04:03.900
给他这么一个默认值

04:03.900 --> 04:05.900
那么他会把默认值呢放到状态里边

04:05.900 --> 04:07.900
也就是说这个查询条件这个search bar

04:07.900 --> 04:09.900
那么这个查询条件呢

04:09.900 --> 04:11.900
他有一个默认值你可以通过属性给他

04:11.900 --> 04:13.900
给他初始的条件

04:13.900 --> 04:15.900
事实啊对不对

04:15.900 --> 04:17.900
我们看一下啊刚才

04:17.900 --> 04:19.900
我们的仓库里边的结构

04:19.900 --> 04:21.900
你看counter student

04:21.900 --> 04:23.900
student里面有condition and result对吧

04:23.900 --> 04:25.900
好那么你把这个查询条件的默认值

04:25.900 --> 04:27.900
给他然后呢还要给他一个

04:27.900 --> 04:29.900
事件处理函数

04:29.900 --> 04:31.900
search对吧事件处理函数

04:31.900 --> 04:33.900
那么这个处理函数里面呢

04:33.900 --> 04:35.900
要来控制条件

04:35.900 --> 04:37.900
就是就当他点击提交的时候

04:37.900 --> 04:39.900
不是一个按钮吗点击查询的时候呢

04:39.900 --> 04:41.900
他会触发这个事件

04:41.900 --> 04:43.900
要进行处理

04:43.900 --> 04:45.900
也就是说我们这里呢要给他什么东西

04:45.900 --> 04:47.900
一个是条件的默认值

04:47.900 --> 04:49.900
一开始初始条件是啥

04:49.900 --> 04:51.900
另外呢你还要给他一个就是

04:51.900 --> 04:53.900
事件处理函数

04:53.900 --> 04:55.900
search

04:55.900 --> 04:57.900
那么这两个东西我不是

04:57.900 --> 04:59.900
是不是现在就可以给他了对吧就已经可以给他了

04:59.900 --> 05:01.900
因为这些这里呢我都可以跟仓库的

05:01.900 --> 05:03.900
进行连接好怎么做呢

05:03.900 --> 05:05.900
我们看着啊 import

05:05.900 --> 05:07.900
导入

05:07.900 --> 05:09.900
导入什么呢导入的connect

05:09.900 --> 05:11.900
你看我们马上就可以给他了

05:11.900 --> 05:13.900
当然了你也可以不在这里给

05:13.900 --> 05:15.900
我们最后呢你用一个统一的

05:15.900 --> 05:17.900
一个组件一起来提供数据

05:17.900 --> 05:19.900
也行啊也行

05:19.900 --> 05:21.900
这里呢写好这个组件

05:21.900 --> 05:23.900
写好这个组件之后呢马上给他提供数据

05:23.900 --> 05:25.900
也可以在

05:25.900 --> 05:27.900
外面另外一个组件里边

05:27.900 --> 05:29.900
我们到时候不是要把这个

05:29.900 --> 05:31.900
查询条件和学生表格

05:31.900 --> 05:33.900
以及分业的业马的一个东西全部合并

05:33.900 --> 05:35.900
合成一个整体嘛对不对

05:35.900 --> 05:37.900
在合成一个整体的时候

05:37.900 --> 05:39.900
数据也行啊都行

05:39.900 --> 05:41.900
或者说我们现在我们之前写过这种

05:41.900 --> 05:43.900
做法对吧直接在这里给给数据

05:43.900 --> 05:45.900
那行了那咱们

05:45.900 --> 05:47.900
换一种写法吧啊

05:47.900 --> 05:49.900
我们的component里面新建筒文件

05:49.900 --> 05:51.900
给他取个名字叫做student

05:51.900 --> 05:53.900
就相当于是个容器组件

05:53.900 --> 05:55.900
他来展示其他组件的给其他组件提供数据的

05:55.900 --> 05:57.900
student

05:57.900 --> 05:59.900
然后这里我们写上一个

05:59.900 --> 06:01.900
srg嘛

06:01.900 --> 06:03.900
点儿介绍想这么一个组件

06:03.900 --> 06:05.900
好这个组件就专门用于给其他组件提供数据

06:05.900 --> 06:07.900
首先要给他提供数据对吧

06:07.900 --> 06:09.900
student search bar提供数据

06:09.900 --> 06:11.900
好那么咱们呢这里导入

06:11.900 --> 06:13.900
from

06:13.900 --> 06:15.900
来自于student search bar

06:15.900 --> 06:19.530
首先把这个东西导进来

06:19.530 --> 06:21.530
导进来

06:21.530 --> 06:23.530
好

06:23.530 --> 06:25.530
然后呢我们这里给他提供数据怎么提供呢

06:25.530 --> 06:27.530
我们就利用redux里面

06:27.530 --> 06:29.530
就是我们上一课学的那个conneg

06:29.530 --> 06:31.530
给他提供数据

06:31.530 --> 06:33.530
用那个conneg给他提供数据

06:33.530 --> 06:35.530
他不是需要东西吗需要仓庚里面东西

06:35.530 --> 06:37.530
OK我提供给你

06:37.530 --> 06:39.530
你这个组件本身是不知道这个数据哪来的

06:39.530 --> 06:41.530
也不知道处理函数是怎么处理的

06:41.530 --> 06:43.530
跟仓庚有没有关系他啥都不知道

06:43.530 --> 06:45.530
那么我这里呢把他连接到仓庚里面去

06:45.530 --> 06:47.530
好那么连接的时候

06:47.530 --> 06:49.530
是不是有两件事情要做

06:49.530 --> 06:51.530
对吧

06:51.530 --> 06:53.530
conneg

06:53.530 --> 06:55.530
第一件就是第一个拆数是不是要给他

06:55.530 --> 06:57.530
映射数据啊

06:57.530 --> 06:59.530
映射数据那这里是不是一个函数

06:59.530 --> 07:01.530
之前呢我们是单独写了一个函数对吧

07:01.530 --> 07:03.530
当然也可以在这里写对不对

07:03.530 --> 07:05.530
映射数据的他给你传一个什么进来还记得吗

07:05.530 --> 07:07.530
所以传一个整体的状态进来

07:07.530 --> 07:09.530
然后你反回给他一个什么

07:09.530 --> 07:11.530
反回给他一个就是

07:11.530 --> 07:13.530
他要用到的数据

07:13.530 --> 07:15.530
要用到的数据他用到什么数据呢

07:15.530 --> 07:17.530
我们刚才分析他是不是要用到这个

07:17.530 --> 07:19.530
default value对吧

07:19.530 --> 07:21.530
他无非就要用到这个玩意吧

07:21.530 --> 07:23.530
他无非就是要用到这个东西

07:23.530 --> 07:25.530
default value那么他的默认指示啥呢

07:25.530 --> 07:27.530
对于这个函数而言

07:27.530 --> 07:29.530
对于这个函数而言他的默认指示啥呢

07:29.530 --> 07:31.530
或者我们这样子写吧

07:31.530 --> 07:33.530
所以写到一起就看得不是很清楚了

07:33.530 --> 07:35.530
map

07:35.530 --> 07:37.530
stat 2 props

07:37.530 --> 07:39.530
将我们的状态

07:39.530 --> 07:41.530
映射到属性里边

07:43.530 --> 07:45.530
对吧写成个箭头函数

07:45.530 --> 07:47.530
也叫

07:47.530 --> 07:49.530
或者说写成箭头函数

07:49.530 --> 07:51.530
反回的就直接反回个对象得了

07:51.530 --> 07:53.530
直接反回个对象得了

07:53.530 --> 07:55.530
那么反回的是一个对象

07:55.530 --> 07:57.530
这个对象里面不是一个default value属性对吧

07:57.530 --> 07:59.530
Value属性是啥呢

07:59.530 --> 08:01.530
我们这里就把这个mapstat放进来

08:01.530 --> 08:03.530
作为第一个参数

08:03.530 --> 08:05.530
那么这个属性是啥呢

08:05.530 --> 08:07.530
你看一下这里的结构

08:07.530 --> 08:09.530
这是整个stat对吧

08:09.530 --> 08:11.530
它里面那个属性叫students

08:11.530 --> 08:13.530
它里面一个属性

08:13.530 --> 08:15.530
stat里面一个属性叫students

08:15.530 --> 08:17.530
这个属性里面是不是有个condition

08:17.530 --> 08:19.530
对吧这不就是好凭条件吗

08:19.530 --> 08:21.530
对不对

08:21.530 --> 08:23.530
students里面是不是有个condition这个属性

08:23.530 --> 08:25.530
是这样吧对吧

08:25.530 --> 08:27.530
有这么一个属性

08:27.530 --> 08:29.530
好condition里面呢

08:29.530 --> 08:31.530
condition里面呢

08:31.530 --> 08:33.530
它是有了就有这么四个属性

08:33.530 --> 08:35.530
但是呢我是不是只需要

08:35.530 --> 08:37.530
两个一个key一个sex

08:37.530 --> 08:39.530
对吧无非就只需要这两个

08:39.530 --> 08:41.530
一个key一个sex

08:41.530 --> 08:43.530
好那么这里呢我们就

08:43.530 --> 08:45.530
直接从这里边

08:45.530 --> 08:47.530
直接从那个condition里边

08:47.530 --> 08:49.530
解构一下吧

08:49.530 --> 08:51.530
或者说我们这里

08:51.530 --> 08:53.530
要不然解构解构的话我就要多写一袋嘛

08:53.530 --> 08:55.530
我在这里要多写一袋嘛

08:55.530 --> 08:57.530
或者说我们在这里新建一个对象

08:57.530 --> 08:59.530
新建一个对象然后呢

08:59.530 --> 09:01.530
把这两个属性取出来都行啊都行

09:01.530 --> 09:03.530
那么比方说key

09:03.530 --> 09:05.530
我们就来自于condition的key

09:05.530 --> 09:07.530
sex呢就来自于condition的sex

09:07.530 --> 09:09.530
这样子写一袋

09:09.530 --> 09:11.530
总之呢它要什么数据

09:11.530 --> 09:13.530
我就从仓库里面取出来给它就完事了对吧

09:13.530 --> 09:15.530
看一下这代码没问题吧

09:15.530 --> 09:17.530
你给我一个状态整体的状态

09:17.530 --> 09:19.530
我这个函数呢给你返回一个新的对象

09:19.530 --> 09:21.530
这个对象里面有个属性

09:21.530 --> 09:23.530
就是d4-6就是这个逐渐要的属性

09:23.530 --> 09:25.530
这个属性的值呢是一个对象

09:25.530 --> 09:27.530
这个对象里面有个key一个sex

09:27.530 --> 09:29.530
不就是这个逐渐需要的吗

09:29.530 --> 09:31.530
一个逐渐不就需要一个key一个sex吗

09:31.530 --> 09:33.530
它跟它的默认值混合对吧

09:33.530 --> 09:35.530
那么咱们就把这个d4-6

09:35.530 --> 09:37.530
给它写过去了

09:37.530 --> 09:39.530
好那么这是这一块

09:39.530 --> 09:41.530
好然后呢还有个什么呢

09:41.530 --> 09:43.530
还有一个就是事件处理对吧

09:43.530 --> 09:45.530
事件处理那么这里

09:45.530 --> 09:47.530
MacDispatch

09:47.530 --> 09:49.530
to props

09:49.530 --> 09:51.530
就是我们当我们

09:51.530 --> 09:53.530
我们把这个dispatch

09:53.530 --> 09:55.530
映射到属性里面去

09:55.530 --> 09:57.530
因为事件处理它也是用属性的形式存在的

09:57.530 --> 09:59.530
好

09:59.530 --> 10:01.530
返回是不是一样的对吧

10:01.530 --> 10:03.530
是一样的啊

10:03.530 --> 10:05.530
你要给它一个什么事件处理函数呢

10:05.530 --> 10:07.530
名字叫做unsearch

10:07.530 --> 10:09.530
有这么一个事件处理函数

10:09.530 --> 10:11.530
这个事件处理函数里面呢

10:11.530 --> 10:13.530
它会给你一个参数

10:13.530 --> 10:15.530
它到时候会传给你一个参数

10:15.530 --> 10:17.530
表示新的查询条件

10:17.530 --> 10:19.530
这个新的查询条件里面

10:19.530 --> 10:21.530
那么当你有新的查询条件的时候

10:21.530 --> 10:23.530
我们干嘛呢

10:23.530 --> 10:25.530
当你有新的查询条件的时候

10:25.530 --> 10:27.530
我们这里看啊

10:27.530 --> 10:29.530
unsearch这个函数里面

10:29.530 --> 10:31.530
以前我们上一课呢都没有写参数对不对

10:31.530 --> 10:33.530
这里没有写任何参数

10:33.530 --> 10:35.530
没有写任何参数

10:35.530 --> 10:37.530
那么这里呢需要写个参数

10:37.530 --> 10:39.530
需要写个这么一个参数

10:39.530 --> 10:41.530
因为它这里要传给你参数

10:41.530 --> 10:43.530
你要用的啊就是六

10:43.530 --> 10:45.530
一个新的条件

10:45.530 --> 10:47.530
新的条件它会传递给你

10:47.530 --> 10:49.530
那么拿了这个新的条件之后

10:49.530 --> 10:51.530
你要干嘛呢

10:51.530 --> 10:53.530
拿这个新的条件之后你要干嘛

10:53.530 --> 10:55.530
你是不是第一件事情

10:55.530 --> 10:57.530
要重新设置条件对吧

10:57.530 --> 10:59.530
重新设置条件

10:59.530 --> 11:01.530
条件的重新设置

11:01.530 --> 11:03.530
一个新的条件来了

11:03.530 --> 11:05.530
你再重新设置条件

11:05.530 --> 11:07.530
那么这个重新设置条件的话

11:07.530 --> 11:09.530
我们是不是要去创建X

11:09.530 --> 11:11.530
要去Dispatch一个X

11:11.530 --> 11:13.530
对吧好我们这里呢导入

11:13.530 --> 11:15.530
导入我们机场的X创建函数

11:15.530 --> 11:17.530
就是时刻就知道你要干嘛

11:17.530 --> 11:19.530
Store

11:19.530 --> 11:21.530
X

11:21.530 --> 11:23.530
哪儿呢

11:23.530 --> 11:25.530
Student Condition

11:25.530 --> 11:27.530
它里边有个X叫做

11:27.530 --> 11:29.530
Change

11:29.530 --> 11:31.530
改变查讯条件

11:31.530 --> 11:33.530
改变查讯条件

11:33.530 --> 11:35.530
我们重新干命一个名字

11:35.530 --> 11:37.530
Change Condition

11:37.530 --> 11:39.530
改变查讯条件

11:39.530 --> 11:41.530
那么这里呢

11:41.530 --> 11:43.530
我们只需要通过这个

11:43.530 --> 11:45.530
创建这么一个X

11:45.530 --> 11:47.530
Dispatch它就完成了

11:47.530 --> 11:49.530
通过这个X创建函数

11:49.530 --> 11:51.530
创建一个新的查询条件

11:51.530 --> 11:53.530
新的X

11:53.530 --> 11:55.530
那么这个创建函数

11:55.530 --> 11:57.530
要传入一个新的查询条件

11:57.530 --> 11:59.530
我们只要把新的查询条件给

11:59.530 --> 12:01.530
它就完成了

12:01.530 --> 12:03.530
重新触发一个X

12:03.530 --> 12:05.530
去改变查询条件

12:05.530 --> 12:07.530
改变仓库里边的查询条件

12:07.530 --> 12:09.530
就完成了

12:09.530 --> 12:11.530
这是关于这一块

12:11.530 --> 12:14.530
我们MapDispatchPropos写进来

12:14.530 --> 12:16.530
好好看一下

12:16.530 --> 12:17.530
那么这样子一来

12:17.530 --> 12:18.530
我们再把那个

12:18.530 --> 12:19.530
我们要包装的组件

12:19.530 --> 12:20.530
对吧

12:20.530 --> 12:21.530
这是个高階组件吗

12:21.530 --> 12:23.530
我们要处理的组件放进来

12:23.530 --> 12:25.530
这样子是不是就连接了

12:25.530 --> 12:27.530
仓库已经了我们的组件

12:27.530 --> 12:28.530
就连接起来了

12:28.530 --> 12:29.530
连接起来的共同人

12:29.530 --> 12:30.530
还会返回一个新的组件

12:30.530 --> 12:31.530
那么这个新的组件呢

12:31.530 --> 12:33.530
我们就用SearchBar

12:33.530 --> 12:35.530
这里用个SearchBar来接受一下

12:35.530 --> 12:37.530
SearchBar

12:37.530 --> 12:39.530
接受一下

12:39.530 --> 12:41.530
就得到一个新的组件了

12:42.530 --> 12:46.530
连接数据和处理

12:46.530 --> 12:50.530
函数之后得到一个新的组件

12:50.530 --> 12:53.530
这个新的组件就带了数据处理和数据的

12:53.530 --> 12:54.530
那么接下来

12:54.530 --> 12:58.530
最终我们导出一个东西

12:58.530 --> 13:00.530
比方说导出一个组件

13:00.530 --> 13:04.530
这个组件就是把这些东西组合起来

13:04.530 --> 13:06.530
一个组件就是

13:06.530 --> 13:10.800
StudentsSearch

13:10.800 --> 13:12.800
最终我们导出这么一个组件

13:12.800 --> 13:13.800
这个组件直接返回

13:13.800 --> 13:14.800
返回什么呢

13:14.800 --> 13:15.800
就返回这个

13:15.800 --> 13:17.800
我都不写任何的

13:17.800 --> 13:20.800
不写任何的就是

13:20.800 --> 13:21.800
动物元素了

13:21.800 --> 13:23.800
直接把它或者是写个DIV也行

13:23.800 --> 13:26.800
我们这里把SearchBar导入进来

13:26.800 --> 13:28.800
SearchBar导入进来

13:28.800 --> 13:29.800
好 返回这么一个寒数

13:29.800 --> 13:31.800
哎呀 报什么错呢

13:31.800 --> 13:33.800
还要导入React

13:33.800 --> 13:34.800
Import

13:34.800 --> 13:37.800
React

13:37.800 --> 13:39.800
ImportR

13:39.800 --> 13:42.800
是这样写吧

13:42.800 --> 13:43.800
那个快捷键是哪呢

13:43.800 --> 13:44.800
我又忘了

13:44.800 --> 13:46.800
ImportReact

13:46.800 --> 13:47.800
是这个吧

13:47.800 --> 13:48.800
不是

13:49.800 --> 13:50.800
不去纠结这些细节

13:50.800 --> 13:53.800
fromReact

13:53.800 --> 13:54.800
好了 写好了

13:54.800 --> 13:55.800
那咱们来看一下吧

13:55.800 --> 13:56.800
Students写好了

13:56.800 --> 14:00.800
然后这里我们在app里边

14:00.800 --> 14:01.800
这里不用counter了

14:01.800 --> 14:02.800
counter不需要了

14:02.800 --> 14:04.800
我们导入这个students

14:04.800 --> 14:07.800
SearchStudents

14:08.800 --> 14:12.690
from

14:12.690 --> 14:14.690
ComponentStudentsSearch

14:14.690 --> 14:16.690
看一下吧

14:16.690 --> 14:18.690
咱们看一下这个主线

14:18.690 --> 14:19.690
保存

14:19.690 --> 14:23.130
你看啊 这是仓库里边的状态

14:23.130 --> 14:24.130
对吧

14:24.130 --> 14:25.130
仓库里边的状态

14:25.130 --> 14:27.130
由于现在的查询条件是这样子

14:27.130 --> 14:28.130
现在显示了这个

14:28.130 --> 14:30.130
因为我们目前仓库里边

14:30.130 --> 14:33.130
查询条件默认值就是这个

14:33.130 --> 14:34.130
那如果说我把仓库里边

14:34.130 --> 14:36.130
查询条件的默认值改一下

14:36.130 --> 14:38.130
改成k等于abc

14:38.130 --> 14:41.130
然后6等于1

14:41.130 --> 14:42.130
比方说改一下

14:42.130 --> 14:43.130
保存

14:43.130 --> 14:44.130
那你看一下

14:44.130 --> 14:45.130
默认值是个女

14:45.130 --> 14:46.130
关键值是个abc

14:46.130 --> 14:48.130
对吧 就是把仓库的数据硬设过去了

14:48.130 --> 14:49.130
那么现在数据呢

14:49.130 --> 14:51.130
就来出于仓库里边

14:51.130 --> 14:53.130
然后当我们去改变这个数据的时候

14:53.130 --> 14:54.130
比方说这里改成男

14:54.130 --> 14:55.130
关键值呢

14:55.130 --> 14:57.130
改成123

14:57.130 --> 14:58.130
点击查询的时候

14:58.130 --> 14:59.130
你看一下

14:59.130 --> 15:00.130
是不是又触发了千几

15:00.130 --> 15:01.130
对吧

15:01.130 --> 15:02.130
那么查询条件是不是变了

15:02.130 --> 15:03.130
查询条件

15:03.130 --> 15:04.130
你看 查询条件是不是变成

15:04.130 --> 15:05.130
k等于123

15:05.130 --> 15:06.130
然后呢什么

15:06.130 --> 15:07.130
limit

15:07.130 --> 15:08.130
limit

15:08.130 --> 15:10.130
这个6等于0

15:10.130 --> 15:11.130
对吧

15:11.130 --> 15:12.130
查询的蓝

15:12.130 --> 15:13.130
对不对

15:13.130 --> 15:14.130
查询条件是不是变了

15:14.130 --> 15:15.130
对吧 这样子

15:15.130 --> 15:16.130
就跟仓库结合起来

15:16.130 --> 15:17.130
对不对

15:17.130 --> 15:18.130
好 其实这里

15:18.130 --> 15:20.130
你如果说你仔细思考的话

15:20.130 --> 15:22.130
你这里还有一个细节的要处理

15:22.130 --> 15:23.130
有什么细节呢

15:23.130 --> 15:25.130
这个东西不是很容易想得到

15:25.130 --> 15:26.130
但是我也不知道

15:26.130 --> 15:28.130
我为什么就想到了

15:28.130 --> 15:30.130
不是很容易想得到

15:30.130 --> 15:31.130
就什么了

15:31.130 --> 15:33.130
就是你去改变查

15:33.130 --> 15:34.130
就在这里

15:34.130 --> 15:36.130
在这个组建里边

15:36.130 --> 15:38.130
当它去查询的时候

15:38.130 --> 15:39.130
on-serge的时候

15:39.130 --> 15:41.130
当改变查询条件的时候

15:41.130 --> 15:42.130
你要注意一个事

15:42.130 --> 15:43.130
就是你一定要把那个

15:43.130 --> 15:45.130
一页码的设置为一

15:45.130 --> 15:47.130
因为它有可能之前是设置

15:47.130 --> 15:49.130
比方说之前它的一页码是

15:49.130 --> 15:51.130
比方说之前的一页码是十

15:51.130 --> 15:53.130
之前才查到第十页了

15:53.130 --> 15:55.130
但是你现在查询条件一变

15:55.130 --> 15:57.130
查询条件一变

15:57.130 --> 15:58.130
点查询

15:58.130 --> 16:00.130
那么现在还是第十页

16:00.130 --> 16:02.130
这样子的实际上不好的

16:02.130 --> 16:03.130
你想百度搜索的那些

16:03.130 --> 16:04.130
进行搜索的时候

16:04.130 --> 16:05.130
你看每一次搜索

16:05.130 --> 16:07.130
是不是永远从第一页开始

16:07.130 --> 16:09.130
因为你在目前的搜索条件下面

16:09.130 --> 16:11.130
是不是就有可能

16:11.130 --> 16:13.130
有可能就是

16:13.130 --> 16:14.130
没有十页

16:14.130 --> 16:16.130
一共就只有三页

16:16.130 --> 16:17.130
它怎么办

16:17.130 --> 16:18.130
它还显示第十页

16:18.130 --> 16:20.130
它肯定找不到数据

16:20.130 --> 16:22.130
所以说你这个页码

16:22.130 --> 16:24.130
它再回归到一

16:24.130 --> 16:25.130
那么这个逻辑

16:25.130 --> 16:27.130
你不用去写到仓库里边

16:27.130 --> 16:29.130
建议你不要去写到仓库里边

16:29.130 --> 16:31.130
因为这是这个组建的逻辑

16:31.130 --> 16:33.130
这个逻辑是跟这个

16:33.130 --> 16:34.130
组建相关的

16:34.130 --> 16:36.130
因为这个组建它不管分页

16:36.130 --> 16:37.130
它跟分页和什么

16:37.130 --> 16:39.130
页容量没有任何关系

16:39.130 --> 16:41.130
它只管那个

16:41.130 --> 16:43.130
关键字和那个

16:43.130 --> 16:44.130
性别

16:44.130 --> 16:45.130
那么对这一块进行查询

16:45.130 --> 16:47.130
那么改变这两个的时候

16:47.130 --> 16:49.130
需要把页码设置为一

16:49.130 --> 16:50.130
那么面对这样的一种特殊

16:50.130 --> 16:52.130
场景怎么做呢

16:52.130 --> 16:53.130
这个还不简单吗

16:53.130 --> 16:54.130
对不对

16:54.130 --> 16:55.130
这还不简单

16:55.130 --> 16:56.130
又扛底性

16:56.130 --> 16:58.130
重新给它复职

16:58.130 --> 16:59.130
对不对

16:59.130 --> 17:00.130
怎么复职

17:00.130 --> 17:02.130
先把它自己展开

17:02.130 --> 17:04.130
它有一些属性

17:04.130 --> 17:06.130
这个加一个属性不

17:06.130 --> 17:07.130
对不对

17:07.130 --> 17:08.130
再加一个属性配级为多少

17:08.130 --> 17:10.130
配级为一

17:10.130 --> 17:12.130
那么这样子是不是合并成一个新的对象了

17:12.130 --> 17:14.130
或者说你直接给它加一个属性配级为一

17:14.130 --> 17:15.130
也行

17:15.130 --> 17:16.130
对不对

17:16.130 --> 17:17.130
也行

17:17.130 --> 17:19.130
这里不需要你做什么存汉数

17:19.130 --> 17:20.130
这里不需要

17:20.130 --> 17:21.130
你改就行了

17:21.130 --> 17:24.130
当然你也可以去新建一个变量

17:24.130 --> 17:25.130
然后去改

17:25.130 --> 17:26.130
加一个配级属性

17:26.130 --> 17:27.130
也行

17:27.130 --> 17:28.130
再加一个

17:28.130 --> 17:30.130
条件

17:31.130 --> 17:33.130
叶马回归

17:33.130 --> 17:34.130
到一

17:34.130 --> 17:35.130
保存

17:35.130 --> 17:37.130
那你现在看一下

17:37.130 --> 17:38.130
我们这里写个关键字

17:38.130 --> 17:39.130
查询囊

17:39.130 --> 17:40.130
一点击

17:40.130 --> 17:42.130
那么它之前的查询条件里边

17:42.130 --> 17:43.130
之前的查询条件里边

17:43.130 --> 17:44.130
叶马是十

17:44.130 --> 17:45.130
对不对

17:45.130 --> 17:46.130
那么

17:46.130 --> 17:47.130
触犯挨个行之后

17:47.130 --> 17:48.130
它的查询条件里边

17:48.130 --> 17:50.130
它叶马是不是变成一了

17:50.130 --> 17:52.130
就这么回事

17:52.130 --> 17:53.130
那么这里呢

17:53.130 --> 17:56.130
我只管把仓库里边的东西改变就完事了

17:56.130 --> 17:57.130
好

17:57.130 --> 17:58.130
那么这一块改变了过后

17:58.130 --> 17:59.130
完美

17:59.130 --> 18:00.130
其实还没完

18:00.130 --> 18:02.130
还要做一件事情

18:02.130 --> 18:03.130
你这里点了查询

18:03.130 --> 18:05.130
是不是要查询学生数据

18:05.130 --> 18:06.130
对吧

18:06.130 --> 18:07.130
尽管我们现在用都还没有用学生

18:07.130 --> 18:08.130
那个表格组件

18:08.130 --> 18:10.130
但是跟表格组件没关系

18:10.130 --> 18:12.130
这个逻辑上是不是要找到学生数据

18:12.130 --> 18:13.130
你看没有

18:13.130 --> 18:15.130
现在把数据和组件分开过

18:15.130 --> 18:16.130
就这么好处

18:16.130 --> 18:19.130
你可以根据数据逻辑来进行处理

18:19.130 --> 18:20.130
哪怕组件都还没有写

18:20.130 --> 18:22.130
但是学生的数据是不是得有

18:22.130 --> 18:23.130
对吧

18:23.130 --> 18:25.130
那这里是不是得触发

18:26.130 --> 18:29.130
获取学生数据的x

18:29.130 --> 18:30.130
对吧

18:30.130 --> 18:31.130
触发这个x

18:31.130 --> 18:32.130
那么这个x哪来呢

18:32.130 --> 18:33.130
在哪来呢

18:33.130 --> 18:35.130
是不是来自于这

18:35.130 --> 18:36.130
import

18:36.130 --> 18:37.130
来自于哪

18:37.130 --> 18:39.130
来自于那个

18:39.130 --> 18:41.130
我们要导入这个x

18:41.130 --> 18:43.130
store

18:43.130 --> 18:44.130
x

18:44.130 --> 18:45.130
student

18:45.130 --> 18:46.130
search result

18:46.130 --> 18:47.130
对吧

18:47.130 --> 18:48.130
这里不是一个x嘛

18:48.130 --> 18:49.130
叫fetch student

18:49.130 --> 18:51.130
当时我们触发这个x

18:51.130 --> 18:52.130
saga会接受对吧

18:52.130 --> 18:53.130
但是我们这里根本就不care

18:53.130 --> 18:54.130
什么saga不saga

18:54.130 --> 18:55.130
跟我没有什么关系

18:55.130 --> 18:56.130
我只管触发x

18:56.130 --> 18:57.130
怎么去处理的

18:57.130 --> 18:59.130
你自己去搞定

18:59.130 --> 19:02.130
常会跟那个组件就完全分开了

19:02.130 --> 19:03.130
我触发什么呢

19:03.130 --> 19:04.130
fetch student

19:04.130 --> 19:05.130
这里面的参数都不需要

19:05.130 --> 19:07.130
因为它就是根据查

19:07.130 --> 19:09.130
触发的x就是根据查询条件

19:09.130 --> 19:10.130
根据当前的查询条件

19:10.130 --> 19:12.130
来去查询学生的

19:12.130 --> 19:14.130
触发两个x

19:14.130 --> 19:15.130
保存

19:15.130 --> 19:16.130
咱们来看一下吧

19:17.130 --> 19:18.130
注意看

19:18.130 --> 19:20.130
上载状态的电话

19:21.130 --> 19:23.130
这里我们查询123

19:23.130 --> 19:24.130
电查询

19:24.130 --> 19:26.130
你看触发了多个x

19:26.130 --> 19:27.130
你看着吧

19:27.130 --> 19:29.130
一开始触发到千级

19:29.130 --> 19:30.130
这是改变查询条件

19:30.130 --> 19:31.130
查询条件变了

19:31.130 --> 19:33.130
第二个触发了fetch student

19:33.130 --> 19:34.130
fetch student

19:34.130 --> 19:35.130
reducer

19:35.130 --> 19:36.130
它并没有接受

19:36.130 --> 19:38.130
并没有处理这个东西

19:38.130 --> 19:39.130
它是saga在处理

19:39.130 --> 19:40.130
好

19:40.130 --> 19:41.130
saga怎么处理呢

19:41.130 --> 19:42.130
saga首先把is loading

19:42.130 --> 19:43.130
稍微去

19:43.130 --> 19:44.130
把is loading

19:44.130 --> 19:45.130
现在呢

19:45.130 --> 19:46.130
is loading是不是稍微去了

19:46.130 --> 19:47.130
对不对

19:47.130 --> 19:48.130
is loading稍微去了

19:48.130 --> 19:49.130
然后呢

19:50.130 --> 19:51.130
再看这

19:51.130 --> 19:52.130
is loading稍微去了

19:52.130 --> 19:53.130
然后呢

19:53.130 --> 19:55.130
再触发sets student

19:55.130 --> 19:56.130
产的头头

19:56.130 --> 19:58.130
就是把学生的数据装进去

19:58.130 --> 20:00.130
学生的数据results

20:00.130 --> 20:02.130
data里面只有一个数据

20:02.130 --> 20:03.130
只有一个数据

20:03.130 --> 20:04.130
然后呢is loading

20:04.130 --> 20:05.130
然后呢

20:05.130 --> 20:06.130
头头只有1

20:06.130 --> 20:07.130
查询出来的总结果

20:07.130 --> 20:09.130
因为123这个学生

20:09.130 --> 20:10.130
只有一个

20:10.130 --> 20:11.130
然后呢

20:11.130 --> 20:12.130
再把is loading稍微forced

20:12.130 --> 20:13.130
对吧

20:13.130 --> 20:14.130
总之数据状态的变化

20:14.130 --> 20:16.130
跟我们组建有没有什么关系

20:16.130 --> 20:17.130
它怎么变的

20:17.130 --> 20:18.130
跟我们组建没有任何关系

20:18.130 --> 20:19.130
这是仓库在处理

20:19.130 --> 20:21.130
现在结构就非常清晰了

20:21.130 --> 20:22.130
仓库处理数据

20:22.130 --> 20:24.130
以及数据的数据的变化

20:24.130 --> 20:25.130
跟我们组建没有什么关系

20:25.130 --> 20:26.130
组建呢

20:26.130 --> 20:27.130
它发生一件事情

20:27.130 --> 20:28.130
事情之后

20:28.130 --> 20:30.130
直观去触发一些合适的x

20:30.130 --> 20:31.130
那么神像的事情

20:31.130 --> 20:32.130
它不管了

20:32.130 --> 20:33.130
需要数据的时候

20:33.130 --> 20:34.130
从仓库里面取

20:34.130 --> 20:36.130
因为一定要跟仓库连接之后

20:36.130 --> 20:38.130
仓库里面的数据变化

20:38.130 --> 20:39.130
那么对应的组建呢

20:39.130 --> 20:40.130
它就会进行变化

20:40.130 --> 20:41.130
对吧

20:41.130 --> 20:42.130
好

20:42.130 --> 20:43.130
这是

20:43.130 --> 20:44.130
关于这一块

20:45.130 --> 20:46.130
map

20:46.130 --> 20:47.130
这些数据完了

20:47.130 --> 20:48.130
对吧

20:48.130 --> 20:49.130
完了

20:49.130 --> 20:50.130
就说起吧

20:50.130 --> 20:51.130
好

20:51.130 --> 20:52.130
那么我们再来看

20:52.130 --> 20:53.130
学生的表格

20:53.130 --> 20:54.130
我们下面要加一个学生表格

20:54.130 --> 20:55.130
对吧

20:55.130 --> 20:57.130
咱们再来看一个学生表格

20:57.130 --> 20:58.130
学生表格这一块

20:58.130 --> 20:59.130
组建已经做好了

20:59.130 --> 21:00.130
组建已经做好了

21:00.130 --> 21:01.130
它不知道什么了

21:01.130 --> 21:02.130
不知道一个学生

21:02.130 --> 21:03.130
要给它一个学生数据

21:03.130 --> 21:04.130
你把学生数据给

21:04.130 --> 21:05.130
它就完成了

21:05.130 --> 21:06.130
这个东西就简单

21:06.130 --> 21:07.130
这个东西就简单

21:07.130 --> 21:10.130
咱们这里又导入学生表格

21:10.130 --> 21:11.130
当然我们再说一次

21:11.130 --> 21:13.130
你可以直接在这里

21:13.130 --> 21:15.130
你可以直接在这里

21:15.130 --> 21:18.130
这里把这个组建跟仓库连接

21:18.130 --> 21:19.130
然后再返回

21:19.130 --> 21:20.130
这是一种做法

21:20.130 --> 21:22.130
也可以标上这里

21:22.130 --> 21:23.130
你可以直接在这里写个组建

21:23.130 --> 21:24.130
对不对

21:24.130 --> 21:25.130
然后直接在这里跟连接

21:25.130 --> 21:27.130
就像我们之前上节合作的一样

21:27.130 --> 21:28.130
在这里直接连接组建

21:28.130 --> 21:30.130
然后把连接到结果返回

21:30.130 --> 21:32.130
也可以统一放一个地方来进行连接

21:32.130 --> 21:34.130
两种做法都行

21:34.130 --> 21:37.130
看你们以后公司用的是哪种做法

21:38.130 --> 21:39.130
import

21:39.130 --> 21:41.130
我们这里呢

21:41.130 --> 21:43.130
再导入我们在这里连接

21:44.130 --> 21:45.130
下面打个注释

21:45.130 --> 21:47.130
这是连接

21:47.130 --> 21:49.130
连接这个什么

21:50.130 --> 21:51.130
search bar

21:51.130 --> 21:52.130
连接这个东西

21:52.130 --> 21:54.130
现在我们再导入这个学生

21:54.130 --> 21:55.130
学生表格

21:55.130 --> 21:57.130
student table

21:57.130 --> 21:58.130
from

21:58.130 --> 21:59.130
导入这个学生表格

21:59.130 --> 22:01.130
student table

22:01.130 --> 22:02.130
导入这个

22:02.130 --> 22:03.130
然后我们现在再连接

22:03.130 --> 22:04.130
学生表格

22:04.130 --> 22:07.440
连接

22:07.440 --> 22:09.440
student table

22:09.440 --> 22:10.440
好

22:10.440 --> 22:11.440
再来一次

22:11.440 --> 22:12.440
对不对

22:13.440 --> 22:15.440
重新给这个变量负责

22:15.440 --> 22:17.440
我之前我之所以用变量就是这个原因

22:17.440 --> 22:20.440
因为我一会还要连接别的东西

22:20.440 --> 22:21.440
那么返回一个新的对象

22:21.440 --> 22:23.440
它不就是要一个学生数组吗

22:23.440 --> 22:24.440
你给

22:24.440 --> 22:25.440
它不就完了吗

22:25.440 --> 22:27.440
学生数组的它要的名字叫做啥

22:27.440 --> 22:28.440
你看写组建的时候

22:28.440 --> 22:29.440
我们以前写这个组建的时候

22:29.440 --> 22:30.440
有没有考虑到仓库

22:30.440 --> 22:31.440
没有

22:31.440 --> 22:32.440
那有没有关系

22:32.440 --> 22:33.440
没关系

22:33.440 --> 22:34.440
我们直接用就行了

22:34.440 --> 22:35.440
你不是需要这个属性吗

22:35.440 --> 22:36.440
我给你

22:36.440 --> 22:37.440
这属性哪来的

22:37.440 --> 22:39.440
从状态里边

22:39.440 --> 22:40.440
从仓库里边

22:40.440 --> 22:41.440
拿到什么

22:41.440 --> 22:43.440
我们学了过后要多练习一下

22:43.440 --> 22:45.440
练习过后慢慢就熟悉了

22:45.440 --> 22:46.440
我都建议

22:46.440 --> 22:48.440
刚才我们写好这个地方过后了

22:48.440 --> 22:49.440
你先别着急往下看

22:49.440 --> 22:50.440
先练习一遍

22:50.440 --> 22:52.440
就是一开始觉得很生疏

22:52.440 --> 22:53.440
你写的写的慢慢就

22:53.440 --> 22:54.440
明白它怎么回事了

22:54.440 --> 22:56.440
那么这个仓库里边

22:56.440 --> 22:57.440
我们去什么呢

22:57.440 --> 22:58.440
我们看一下

22:58.440 --> 23:00.440
一开始刷新一下

23:00.440 --> 23:01.440
去什么

23:01.440 --> 23:02.440
去students里边的什么

23:02.440 --> 23:03.440
results里边的什么

23:03.440 --> 23:04.440
data时段

23:04.440 --> 23:05.440
不就是要这个东西吗

23:05.440 --> 23:06.440
我给你

23:06.440 --> 23:08.440
去仓库里边的什么

23:09.440 --> 23:11.440
那个students

23:11.440 --> 23:14.440
然后再去什么results

23:14.440 --> 23:15.440
再去什么data时

23:15.440 --> 23:17.440
就去这个东西

23:17.440 --> 23:18.440
没问题吧

23:18.440 --> 23:20.440
那么把它取出来

23:21.440 --> 23:22.440
做完了

23:22.440 --> 23:23.440
它就需要这个东西

23:23.440 --> 23:24.440
其他也不需要

23:24.440 --> 23:26.440
咱们得到这么一个组建

23:26.440 --> 23:28.440
取名为table

23:28.440 --> 23:29.440
connect

23:29.440 --> 23:32.440
然后map state to props

23:32.440 --> 23:33.440
它没有事件

23:33.440 --> 23:35.440
你不需要去认设什么事件

23:35.440 --> 23:36.440
不需要事件

23:36.440 --> 23:37.440
然后呢

23:37.440 --> 23:38.440
包装什么

23:38.440 --> 23:39.440
包装哪个组建

23:39.440 --> 23:40.440
包装这个组建

23:40.440 --> 23:41.440
以后返回一个新的组建

23:41.440 --> 23:42.440
table

23:42.440 --> 23:43.440
好了

23:43.440 --> 23:45.440
咱们把table放上

23:46.440 --> 23:47.440
好

23:47.440 --> 23:48.440
那么这个组建里面

23:48.440 --> 23:49.440
就连接到有数

23:49.440 --> 23:50.440
有数据的set bar

23:50.440 --> 23:51.440
有数据的table

23:51.440 --> 23:52.440
保存

23:53.440 --> 23:54.440
这些刷新

23:55.440 --> 23:56.440
你看呀

23:56.440 --> 23:57.440
目前没有学生

23:57.440 --> 23:58.440
长库里面没有学生

23:58.440 --> 23:59.440
自然这里看不见

23:59.440 --> 24:01.440
然后我这里去查去

24:01.440 --> 24:03.440
哪点查去

24:04.440 --> 24:06.440
没查出来学生吗

24:06.440 --> 24:07.440
看一下

24:07.440 --> 24:09.440
没有查出来学生

24:09.440 --> 24:10.440
学生没查出来

24:10.440 --> 24:12.440
长库里面学生是空

24:13.440 --> 24:14.440
查个1

24:14.440 --> 24:16.440
点击查新

24:16.440 --> 24:17.440
有了

24:17.440 --> 24:18.440
学生是不是出来了

24:18.440 --> 24:19.440
对不对

24:19.440 --> 24:21.440
你把学生数据给他就完了

24:21.440 --> 24:22.440
就非常简单你看

24:22.440 --> 24:23.440
这两个图线

24:23.440 --> 24:24.440
他有没有关心数据

24:24.440 --> 24:25.440
他不关心数据

24:25.440 --> 24:26.440
他只关心

24:26.440 --> 24:27.440
你给我数据

24:27.440 --> 24:28.440
我怎么去显示

24:28.440 --> 24:29.440
我出发的事件

24:29.440 --> 24:30.440
该干什么

24:30.440 --> 24:31.440
我只关心这一点

24:31.440 --> 24:32.440
其他的我不care

24:32.440 --> 24:33.440
没关系

24:34.440 --> 24:35.440
所以说

24:35.440 --> 24:37.440
这一块你不用管他

24:37.440 --> 24:38.440
你把数据给他就完了

24:38.440 --> 24:40.440
他要什么你给他吗

24:40.440 --> 24:41.440
好

24:41.440 --> 24:42.440
那么接下来是分页

24:42.440 --> 24:43.440
分页

24:43.440 --> 24:44.440
我们之前看一下

24:44.440 --> 24:45.440
我们之前写过了

24:45.440 --> 24:46.440
公共的逐渐

24:46.440 --> 24:47.440
你看之前很早的时候

24:47.440 --> 24:48.440
就写过这个分页逐渐

24:48.440 --> 24:49.440
他跟长库有关系吗

24:49.440 --> 24:50.440
没有任何关系

24:50.440 --> 24:51.440
你给他东西完成了

24:51.440 --> 24:53.440
他不就需要这么一些东西吗

24:53.440 --> 24:54.440
好来吧

24:54.440 --> 24:55.440
来吧

24:55.440 --> 24:56.440
我们给你东西

24:56.440 --> 24:57.440
给你东西

24:57.440 --> 24:58.440
那么倒入

24:58.440 --> 24:59.440
import

24:59.440 --> 25:00.440
page

25:00.440 --> 25:01.440
pager

25:01.440 --> 25:03.880
pager

25:03.880 --> 25:05.880
from

25:05.880 --> 25:07.880
com

25:07.880 --> 25:09.880
pager

25:09.880 --> 25:10.880
倒入这个pager

25:10.880 --> 25:11.880
那么现在我们连接

25:11.880 --> 25:12.880
pager

25:12.880 --> 25:15.640
连接

25:15.640 --> 25:16.640
pager

25:16.640 --> 25:17.640
连接pager里面

25:17.640 --> 25:19.640
他有哪些东西要给他呢

25:19.640 --> 25:20.640
咱们

25:20.640 --> 25:22.640
首先写上这么一个东西

25:22.640 --> 25:23.640
map to state

25:23.640 --> 25:24.640
又来一次

25:24.640 --> 25:25.640
好

25:25.640 --> 25:26.640
那么你看一下

25:26.640 --> 25:27.640
我们对照一下

25:27.640 --> 25:28.640
他需要什么

25:28.640 --> 25:29.640
一个是初始页码

25:29.640 --> 25:30.640
对吧

25:30.640 --> 25:32.640
初始页码是多少

25:32.640 --> 25:33.640
print

25:33.640 --> 25:34.640
好给他呗

25:34.640 --> 25:35.640
他不就需要这个吗

25:35.640 --> 25:36.640
页码是多少

25:36.640 --> 25:37.640
当前的页码是多少

25:37.640 --> 25:39.640
是不是来自于状态里面的

25:39.640 --> 25:40.640
又来了

25:40.640 --> 25:42.640
来自于状态里面的

25:42.640 --> 25:43.640
condition里面的

25:43.640 --> 25:44.640
pager

25:44.640 --> 25:45.640
来自于这个

25:45.640 --> 25:46.640
来吧

25:46.640 --> 25:47.640
students

25:47.640 --> 25:48.640
来自于students

25:48.640 --> 25:49.640
condition里面的

25:50.640 --> 25:51.640
pager

25:51.640 --> 25:52.640
来自于这个

25:52.640 --> 25:53.640
对吧

25:53.640 --> 25:54.640
你看

25:54.640 --> 25:55.640
然后现在他需要

25:55.640 --> 25:57.640
总的数量

25:57.640 --> 25:59.640
总的数量来自于哪呢

25:59.640 --> 26:00.640
是来自于

26:00.640 --> 26:02.640
students result里面的

26:02.640 --> 26:03.640
头头

26:03.640 --> 26:04.640
来自于state

26:04.640 --> 26:06.640
students result里面的

26:06.640 --> 26:07.640
头头

26:07.640 --> 26:08.640
你看

26:08.640 --> 26:09.640
现在是不是跟

26:09.640 --> 26:10.640
仓库完全没关系

26:10.640 --> 26:11.640
你这个组件是

26:11.640 --> 26:12.640
好早好早以前写的

26:12.640 --> 26:13.640
对吧

26:13.640 --> 26:14.640
这样子的

26:14.640 --> 26:15.640
我就反复的强调

26:15.640 --> 26:17.640
大家慢慢会去体会这一点

26:17.640 --> 26:19.640
就是由于redax的存在

26:19.640 --> 26:21.640
他可以跟彻底跟react分离

26:21.640 --> 26:22.640
处理数据的

26:22.640 --> 26:23.640
就处理数据

26:23.640 --> 26:24.640
处理主见的

26:24.640 --> 26:25.640
就处理主见

26:25.640 --> 26:26.640
他们之间互不干擾

26:26.640 --> 26:27.640
最后连接就完事了

26:27.640 --> 26:29.640
连接就是纯粹的体力活了

26:29.640 --> 26:31.640
你觉得这个东西有什么

26:31.640 --> 26:33.640
有什么那个思维逻辑在里面吗

26:33.640 --> 26:34.640
没有啥思维逻辑

26:34.640 --> 26:35.640
就来就行了

26:35.640 --> 26:37.640
他需要什么给他

26:37.640 --> 26:39.640
数字页码最多显得多少个

26:39.640 --> 26:40.640
这个仓库里面没有

26:40.640 --> 26:41.640
仓库里面没有的话

26:41.640 --> 26:42.640
我给他写词

26:42.640 --> 26:44.640
比方说五个页码直接写词

26:44.640 --> 26:45.640
数字页码一共

26:45.640 --> 26:46.640
最多有五个页码

26:46.640 --> 26:47.640
显示

26:47.640 --> 26:48.640
好

26:48.640 --> 26:49.640
那么还有个事件

26:49.640 --> 26:51.640
这个事件还有个limit的夜容量

26:51.640 --> 26:52.640
夜容量

26:52.640 --> 26:53.640
夜容量来自于哪呢

26:53.640 --> 26:55.640
students

26:55.640 --> 26:57.640
con-d型里面的limit

26:57.640 --> 26:59.640
d型里面的limit

26:59.640 --> 27:00.640
就完了

27:00.640 --> 27:01.640
就完了

27:01.640 --> 27:02.640
好

27:02.640 --> 27:04.640
咱们付了一下

27:04.640 --> 27:06.640
那么这个pager

27:06.640 --> 27:07.640
pager看一下

27:07.640 --> 27:08.640
要换个名字

27:08.640 --> 27:10.640
这前面有个pager的名字

27:13.950 --> 27:15.950
pager temp

27:15.950 --> 27:16.950
我也不知道去啥名了

27:16.950 --> 27:18.950
反正都是临时用一下的名字

27:18.950 --> 27:20.950
就是个变量名

27:20.950 --> 27:21.950
那么连接啥

27:21.950 --> 27:22.950
连接pager

27:22.950 --> 27:23.950
好吧

27:23.950 --> 27:24.950
这个东西给你

27:24.950 --> 27:25.950
这个东西给你

27:25.950 --> 27:26.950
好

27:26.950 --> 27:27.950
保存你看一下

27:28.950 --> 27:29.950
目前没有

27:29.950 --> 27:30.950
因为目前他没有总数

27:30.950 --> 27:31.950
对吧

27:31.950 --> 27:32.950
总数为0

27:32.950 --> 27:33.950
1

27:33.950 --> 27:34.950
我们查一个1

27:34.950 --> 27:36.950
产女

27:36.950 --> 27:37.950
好

27:37.950 --> 27:38.950
你看

27:38.950 --> 27:39.950
一共三页就出来了

27:39.950 --> 27:40.950
对吧

27:40.950 --> 27:41.950
总数出来了

27:41.950 --> 27:42.950
他就出来了

27:42.950 --> 27:43.950
因为他会响应总数的变化

27:43.950 --> 27:44.950
对不对

27:44.950 --> 27:45.950
响应这些属性的变化

27:45.950 --> 27:46.950
仓库里面的数据变化

27:46.950 --> 27:48.950
那么就会导致这样的变化

27:48.950 --> 27:50.950
最后我们会给大家画个图

27:50.950 --> 27:51.950
这里

27:51.950 --> 27:52.950
还有一个就是事件

27:52.950 --> 27:53.950
就点击过后

27:53.950 --> 27:54.950
它的出发事件

27:54.950 --> 27:55.950
这里没有写事件

27:55.950 --> 27:56.950
还有一个事件

27:56.950 --> 27:57.950
事件的话就是

27:57.950 --> 27:58.950
mab

27:58.950 --> 28:00.950
全确是体力活

28:00.950 --> 28:01.950
那么这里

28:02.950 --> 28:03.950
有一个事件

28:03.950 --> 28:04.950
什么事件呢

28:04.950 --> 28:05.950
就是安倍级迁迹

28:05.950 --> 28:06.950
当研磨改变了事件

28:06.950 --> 28:08.950
你要做什么

28:08.950 --> 28:09.950
安倍级迁迹

28:09.950 --> 28:11.950
你要给他这个东西

28:11.950 --> 28:12.950
他有没有参数

28:12.950 --> 28:13.950
处理函数

28:13.950 --> 28:14.950
有没有参数

28:15.950 --> 28:17.950
安倍级迁迹

28:17.950 --> 28:18.950
我还真没找到

28:18.950 --> 28:19.950
我这里找一下

28:19.950 --> 28:21.950
安倍迁迁迹

28:21.950 --> 28:23.950
有这么一个参数

28:23.950 --> 28:25.950
他会把新的研磨给你

28:25.950 --> 28:27.950
他会把新的研磨给你

28:27.950 --> 28:28.950
新的研磨会给你

28:28.950 --> 28:29.950
那你干嘛呢

28:29.950 --> 28:31.950
你是不是改变查询条件

28:31.950 --> 28:33.950
重新设置查询条件

28:33.950 --> 28:35.950
把新的研磨放进去

28:35.950 --> 28:36.950
然后呢

28:36.950 --> 28:37.950
是不是改

28:37.950 --> 28:38.950
重新去处罚获取学生

28:38.950 --> 28:41.950
把新的研磨放进去

28:41.950 --> 28:42.950
新的研磨

28:42.950 --> 28:43.950
那么查询条件里边

28:43.950 --> 28:44.950
不少给个对象

28:44.950 --> 28:45.950
新的条件

28:45.950 --> 28:46.950
新的条件

28:46.950 --> 28:47.950
其他条件不变

28:47.950 --> 28:48.950
我们只改变研磨

28:48.950 --> 28:49.950
只改变研磨

28:49.950 --> 28:50.950
那么这个研磨是什么

28:50.950 --> 28:51.950
就是新的研磨

28:52.950 --> 28:53.950
就完了就没了

28:54.950 --> 28:55.950
这个改变查询条件

28:55.950 --> 28:56.950
还记得吗

28:56.950 --> 28:57.950
我们之前写过

28:57.950 --> 28:58.950
这个X型创建寒书

28:58.950 --> 28:59.950
你可以回过头

28:59.950 --> 29:00.950
看一下这个代码

29:01.950 --> 29:02.950
看一下吧

29:03.950 --> 29:04.950
X型创建寒书

29:06.950 --> 29:07.950
设计考联系

29:07.950 --> 29:09.950
你给我一个新的条件

29:09.950 --> 29:10.950
那么一个对象

29:10.950 --> 29:11.950
我就把新的对象给力

29:11.950 --> 29:12.950
然后呢

29:12.950 --> 29:13.950
我们与丢社里面是怎么做的呢

29:13.950 --> 29:14.950
丢社里面

29:14.950 --> 29:15.950
就是把覆盖掉

29:15.950 --> 29:16.950
把培读到里面

29:16.950 --> 29:17.950
的新的查询条件

29:17.950 --> 29:19.950
覆盖掉之前的查询条件

29:19.950 --> 29:20.950
就已经覆盖就完事了

29:20.950 --> 29:21.950
那么我们只需要

29:21.950 --> 29:22.950
把研磨覆盖掉就完事了

29:22.950 --> 29:23.950
对吧

29:23.950 --> 29:24.950
改变查询条件

29:24.950 --> 29:25.950
然后重新获取学生

29:25.950 --> 29:26.950
没了

29:28.950 --> 29:29.950
保存

29:29.950 --> 29:30.950
保存

29:30.950 --> 29:31.950
接下来我们看一下吧

29:35.950 --> 29:37.950
如果说你一开始就要获取学生

29:37.950 --> 29:38.950
比方说

29:38.950 --> 29:40.950
咱们一开始就要获取学生

29:40.950 --> 29:42.950
那么这个时候怎么办呢

29:42.950 --> 29:44.950
一开始就要获取学生

29:44.950 --> 29:45.950
你可以这样子

29:46.950 --> 29:47.950
可以这样子

29:47.950 --> 29:49.950
你可以在一开始的时候

29:49.950 --> 29:50.950
就去触发一下

29:52.950 --> 29:53.950
这个就是

29:54.950 --> 29:56.950
就是在这个组件加载完成之后

29:56.950 --> 29:57.950
就在table组件

29:57.950 --> 29:58.950
或者说是哪个组件

29:58.950 --> 29:59.950
比方说这个组件吧

29:59.950 --> 30:01.950
这个组件加载完成之后

30:01.950 --> 30:03.950
你可以直接去触发一次

30:03.950 --> 30:04.950
触发一次这个x型

30:04.950 --> 30:05.950
这手动触发就完事了

30:05.950 --> 30:07.950
在这里直接手动触发

30:07.950 --> 30:08.950
比方说这里写的

30:08.950 --> 30:09.950
写的这么一个内组件

30:09.950 --> 30:10.950
导出的是一个内组件

30:10.950 --> 30:11.950
class

30:12.950 --> 30:13.950
is.tint

30:14.950 --> 30:15.950
right

30:15.950 --> 30:16.950
component

30:17.950 --> 30:19.950
防止一开始没有数据

30:19.950 --> 30:20.950
对吧

30:20.950 --> 30:21.950
render

30:21.950 --> 30:24.970
这些render里面

30:24.970 --> 30:26.970
就是可以很灵活的处理这件事情

30:26.970 --> 30:27.970
那么它在这里

30:27.970 --> 30:28.970
个生命周期函数

30:28.970 --> 30:30.970
component d-mount里边

30:30.970 --> 30:31.970
在这里面

30:31.970 --> 30:32.970
我们一开始就触发一下这个x型

30:32.970 --> 30:34.970
触发一下这个x型就完事了

30:34.970 --> 30:35.970
很简单

30:35.970 --> 30:36.970
这里能不能导入Stone

30:36.970 --> 30:38.970
直接触发也行

30:38.970 --> 30:40.970
导入这个Stone

30:40.970 --> 30:44.050
这里

30:44.050 --> 30:46.050
Stone from

30:46.050 --> 30:48.050
Stone

30:48.050 --> 30:50.050
直接用Stone去触发一个就行了

30:50.050 --> 30:52.050
Stone

30:52.050 --> 30:53.050
dispatch

30:53.050 --> 30:54.050
触发一个什么呢

30:54.050 --> 30:55.050
触发一个就是

30:55.050 --> 30:57.050
那个通过fade students

30:57.050 --> 30:58.050
来创建的x型

30:58.050 --> 30:59.050
触发一下

30:59.050 --> 31:00.050
触发一下就完事了

31:00.050 --> 31:01.050
保存

31:02.050 --> 31:03.050
你看一下

31:04.050 --> 31:06.050
我的学生数据了

31:06.050 --> 31:08.050
我的学生数据了

31:08.050 --> 31:10.620
看一下

31:10.620 --> 31:11.620
result

31:11.620 --> 31:12.620
一开始查询条件

31:12.620 --> 31:13.620
我当时设了一个问题

31:13.620 --> 31:15.620
仓库里边查询条件

31:15.620 --> 31:16.620
这次的一个问题

31:17.620 --> 31:18.620
查询条件

31:18.620 --> 31:20.620
这里配几11

31:20.620 --> 31:21.620
配几11

31:21.620 --> 31:22.620
保存

31:22.620 --> 31:23.620
看一下吧

31:23.620 --> 31:24.620
一开始是不是有学生了

31:24.620 --> 31:25.620
对吧

31:25.620 --> 31:26.620
那么改变研磨过后

31:26.620 --> 31:28.620
我这里还没硬撑过去

31:29.620 --> 31:31.620
当然这里也可以

31:31.620 --> 31:33.620
比如说学生表格里边有一个事件

31:33.620 --> 31:35.620
就是当学生表格加载完成过后

31:35.620 --> 31:37.620
就是当在这里边写上

31:37.620 --> 31:39.620
或者在这里边写上一个地的mount

31:39.620 --> 31:40.620
然后触发一个事件

31:40.620 --> 31:42.620
那么去连接也行

31:42.620 --> 31:44.620
这个做法有很多

31:45.620 --> 31:47.620
这里我们还没有连接进去

31:47.620 --> 31:48.620
就是on page签计里边

31:48.620 --> 31:49.620
改变查询条件

31:49.620 --> 31:50.620
重新去触发

31:50.620 --> 31:51.620
学生

31:51.620 --> 31:52.620
对吧

31:52.620 --> 31:53.620
保存

31:54.620 --> 31:55.620
就完了

31:55.620 --> 31:56.620
你看看

31:56.620 --> 31:57.620
这就没了

31:57.620 --> 31:58.620
对吧

31:58.620 --> 32:00.620
是不是就没了

32:00.620 --> 32:01.620
没问题吧

32:01.620 --> 32:02.620
没问题了

32:02.620 --> 32:04.620
如果说你还要做一个

32:04.620 --> 32:05.620
夹载中的效果

32:05.620 --> 32:07.620
就正在夹载中

32:07.620 --> 32:09.620
那么这个效果也很好做

32:09.620 --> 32:11.620
比方说我们之前不是写了个盟程吗

32:11.620 --> 32:12.620
我看一下

32:12.620 --> 32:13.620
model

32:13.620 --> 32:15.620
又写了这么一个盟程

32:15.620 --> 32:17.620
这个盟程

32:17.620 --> 32:19.620
我看一下

32:19.620 --> 32:23.250
写了这么一个盟程model

32:25.250 --> 32:26.250
这个盟程里边

32:26.250 --> 32:28.250
就给它写一个夹载中

32:28.250 --> 32:30.250
就给它写这么一个夹载中

32:30.250 --> 32:32.250
这么一个组件

32:32.250 --> 32:33.250
我们这里写这么一个组件

32:33.250 --> 32:34.250
loading

32:34.250 --> 32:35.250
马上写一个

32:35.250 --> 32:36.250
很快

32:36.250 --> 32:38.250
然后它就写完了

32:38.250 --> 32:39.250
loading

32:39.250 --> 32:40.250
loading这个组件

32:40.250 --> 32:42.250
这个组件去使用那个盟程

32:42.250 --> 32:43.250
使用那个盟程

32:43.250 --> 32:44.250
那么这里

32:44.250 --> 32:46.250
我们这个组件里边

32:46.250 --> 32:48.250
就导出一个函数组件

32:48.250 --> 32:49.250
loading

32:49.250 --> 32:50.250
给我一个probs

32:50.250 --> 32:51.250
给我属性

32:51.250 --> 32:52.250
这个属性里边带有一个

32:52.250 --> 32:54.250
是否显示

32:54.250 --> 32:55.250
表示秀

32:55.250 --> 32:56.250
属性里边

32:56.250 --> 32:57.250
属性

32:57.250 --> 33:01.030
属性

33:01.030 --> 33:03.030
包含秀

33:03.030 --> 33:05.030
是否显示盟程

33:05.030 --> 33:07.030
是否显示盟程

33:08.030 --> 33:10.030
那么这里怎么写呢

33:10.030 --> 33:11.030
就把一个model导进来

33:11.030 --> 33:13.030
之前我们写过了一个model

33:13.030 --> 33:14.030
model

33:14.030 --> 33:15.030
from

33:15.030 --> 33:16.030
第二鞋杠

33:16.030 --> 33:17.030
common

33:17.030 --> 33:18.030
model

33:18.030 --> 33:19.030
导进来

33:19.030 --> 33:20.030
那么这里呢

33:20.030 --> 33:21.030
就使用这个model组件

33:21.030 --> 33:22.030
怎么使用呢

33:22.030 --> 33:23.030
我们这里还要判断一下

33:23.030 --> 33:24.030
判断一下

33:24.030 --> 33:26.030
到底要不要显示

33:26.030 --> 33:27.030
这里呢

33:27.030 --> 33:28.030
我们就这样子

33:28.030 --> 33:30.030
如果说probs里边

33:30.030 --> 33:31.030
有一个秀

33:31.030 --> 33:33.030
有这个属性

33:33.030 --> 33:35.030
这个属性

33:35.030 --> 33:37.030
得到的只是

33:37.030 --> 33:39.030
表示要显示

33:39.030 --> 33:40.030
要显示的话

33:40.030 --> 33:41.030
我就给你显示一个model

33:41.030 --> 33:43.030
我就给你显示一个model

33:43.030 --> 33:44.030
这个model里边

33:44.030 --> 33:46.030
我们写上一个夹仔中

33:46.030 --> 33:47.030
我就随便写个

33:47.030 --> 33:48.030
当然你可以用图片

33:48.030 --> 33:49.030
用其他什么玩意都行

33:49.030 --> 33:50.030
都行

33:50.030 --> 33:51.030
我就说这么个意思

33:51.030 --> 33:52.030
就把这个写完了

33:52.030 --> 33:54.030
你给我一个属性

33:54.030 --> 33:55.030
秀

33:55.030 --> 33:56.030
我就给你显示这么个东西

33:56.030 --> 33:57.030
好那么这个图片

33:57.030 --> 33:58.030
是不是又可以连接了

33:58.030 --> 33:59.030
对吧

33:59.030 --> 34:01.030
又到这里连接model

34:01.030 --> 34:02.030
这里

34:02.030 --> 34:03.030
那么这个函数

34:03.030 --> 34:04.030
比方大海马朵

34:04.030 --> 34:05.030
其他函数很简单

34:05.030 --> 34:06.030
就是把常过的数据

34:06.030 --> 34:08.030
做一些体力活

34:08.030 --> 34:09.030
它不生产数据

34:09.030 --> 34:10.030
只是数据的搬运工

34:10.030 --> 34:11.030
它只是把数据

34:11.030 --> 34:12.030
从常过搬运到

34:12.030 --> 34:13.030
那个

34:13.030 --> 34:14.030
搬运到就是

34:14.030 --> 34:15.030
组件里面去

34:15.030 --> 34:16.030
这里呢

34:16.030 --> 34:17.030
就是students

34:17.030 --> 34:19.030
就是那个model

34:19.030 --> 34:21.030
model

34:21.030 --> 34:24.600
连接model

34:24.600 --> 34:25.600
连接model

34:25.600 --> 34:27.600
它不是需要一个属性吗

34:27.600 --> 34:28.600
是否显示

34:28.600 --> 34:29.600
对吧

34:29.600 --> 34:30.600
是否显示

34:30.600 --> 34:31.600
我们这里呢

34:31.600 --> 34:32.600
先把loading导入进来

34:32.600 --> 34:34.600
from

34:34.600 --> 34:35.600
loading

34:35.600 --> 34:36.600
是连接loading

34:36.600 --> 34:37.600
连接这个组件

34:37.600 --> 34:38.600
它封装了一次

34:38.600 --> 34:40.600
连接这个组件

34:40.600 --> 34:41.600
我们这里怎么连接

34:41.600 --> 34:42.600
它就是需要一个属性

34:42.600 --> 34:43.600
那是不是还是一样的

34:43.600 --> 34:45.600
map status to props

34:45.600 --> 34:46.600
stats给我

34:46.600 --> 34:47.600
我返回一个

34:47.600 --> 34:48.600
返回一个对象

34:48.600 --> 34:49.600
在对象里面

34:49.600 --> 34:50.600
提供属性

34:50.600 --> 34:51.600
什么属性

34:51.600 --> 34:52.600
你不是要个属性秀吗

34:52.600 --> 34:53.600
这秀的属性哪来

34:53.600 --> 34:54.600
是哪一句

34:54.600 --> 34:55.600
状态里边的

34:55.600 --> 34:56.600
看一下吧

34:56.600 --> 34:57.600
哪一句

34:57.600 --> 34:58.600
状态里边的

34:58.600 --> 34:59.600
一个students里边的

34:59.600 --> 35:00.600
我都记得了

35:00.600 --> 35:01.600
哪个状态里边

35:01.600 --> 35:03.600
这个students里边

35:03.600 --> 35:04.600
这个result里边

35:04.600 --> 35:05.600
一个isloading

35:05.600 --> 35:06.600
对吧

35:06.600 --> 35:07.600
isloading

35:07.600 --> 35:09.600
那个students里边

35:09.600 --> 35:11.600
result里边的

35:11.600 --> 35:13.600
一个isloading

35:13.600 --> 35:14.600
这个数

35:14.600 --> 35:15.600
这个数据变化了

35:15.600 --> 35:16.600
那么这个组件

35:16.600 --> 35:17.600
就会重新连接

35:17.600 --> 35:18.600
连接这个属性

35:18.600 --> 35:19.600
好

35:19.600 --> 35:20.600
那么现在呢

35:20.600 --> 35:22.600
我们这里就

35:22.600 --> 35:24.600
用connect

35:24.600 --> 35:25.600
得到一个

35:25.600 --> 35:27.600
loading

35:27.600 --> 35:28.600
temp

35:28.600 --> 35:29.600
刚才我再说一次

35:29.600 --> 35:31.600
你连接的这件事情

35:31.600 --> 35:32.600
可以分开

35:32.600 --> 35:33.600
做到各个组件里边

35:33.600 --> 35:34.600
连接过后导出

35:34.600 --> 35:35.600
也可以

35:35.600 --> 35:36.600
在统一的一个地方

35:36.600 --> 35:37.600
进行连接

35:37.600 --> 35:38.600
都行

35:38.600 --> 35:39.600
都行

35:39.600 --> 35:40.600
那么这里呢

35:40.600 --> 35:44.490
我们用connect

35:45.490 --> 35:46.490
那么这里

35:46.490 --> 35:48.490
map to props

35:48.490 --> 35:50.490
包装这个loading逐渐

35:53.310 --> 35:54.310
那么我们把个loadingtemp

35:54.310 --> 35:55.310
放进来

35:56.310 --> 35:57.310
就完了

36:01.390 --> 36:03.900
包装

36:04.900 --> 36:05.900
夹载中看到没

36:05.900 --> 36:06.900
对吧

36:06.900 --> 36:07.900
夹载中

36:07.900 --> 36:08.900
就完事了

36:08.900 --> 36:09.900
就完事了

36:09.900 --> 36:10.900
好

36:10.900 --> 36:11.900
然后呢

36:11.900 --> 36:12.900
我们点击下一步

36:12.900 --> 36:13.900
夹载中

36:13.900 --> 36:14.900
我们把文字射成白色嘛

36:14.900 --> 36:15.900
射成白色

36:15.900 --> 36:16.900
在这里

36:16.900 --> 36:17.900
loading

36:17.900 --> 36:18.900
夹载中的这里

36:18.900 --> 36:19.900
我们给个div

36:19.900 --> 36:20.900
夹载中

36:20.900 --> 36:21.900
夹载中

36:22.900 --> 36:23.900
然后呢

36:23.900 --> 36:25.900
我们给它写上这么一个样式

36:25.900 --> 36:26.900
style

36:26.900 --> 36:27.900
color

36:28.900 --> 36:29.900
白色

36:29.900 --> 36:30.900
自己大小

36:30.900 --> 36:31.900
fun size

36:32.900 --> 36:33.900
三眼

36:33.900 --> 36:34.900
好

36:34.900 --> 36:35.900
保存

36:35.900 --> 36:37.900
夹载中

36:37.900 --> 36:38.900
夹载中

36:38.900 --> 36:39.900
看到没

36:39.900 --> 36:40.900
对吧

36:40.900 --> 36:41.900
没问题吧

36:42.900 --> 36:43.900
包装我们这里写个条件

36:43.900 --> 36:44.900
1 查询

36:44.900 --> 36:45.900
对吧

36:45.900 --> 36:46.900
就完了

36:46.900 --> 36:47.900
就做完了

36:47.900 --> 36:48.900
而且现在的做法呢

36:49.900 --> 36:51.900
结构非常非常清晰

36:51.900 --> 36:52.900
整个rx车里边

36:52.900 --> 36:54.900
没有处理任何数据

36:54.900 --> 36:55.900
什么数据都没处理

36:55.900 --> 36:56.900
它只管显示逻辑

36:56.900 --> 36:57.900
我怎么去显示

36:57.900 --> 36:58.900
你给我什么我怎么去显示

36:58.900 --> 36:59.900
只管这个

36:59.900 --> 37:00.900
然后呢

37:00.900 --> 37:01.900
仓库里边再处理数据

37:01.900 --> 37:02.900
然后两个一连接起来

37:02.900 --> 37:03.900
就完成整个功能了

37:03.900 --> 37:04.900
那么现在呢

37:04.900 --> 37:05.900
我给大家画一张图

37:05.900 --> 37:06.900
啊

37:06.900 --> 37:07.900
用给ppt给大家画一张图

37:07.900 --> 37:08.900
那么整个过程是怎么

37:08.900 --> 37:09.900
它整个感

37:09.900 --> 37:10.900
整个就是

37:11.900 --> 37:12.900
感觉是什么呢

37:12.900 --> 37:13.900
是这样子

37:14.900 --> 37:15.900
我来画一张图啊

37:15.900 --> 37:16.900
通过这张图呢

37:16.900 --> 37:17.900
你又不会把那个

37:17.900 --> 37:18.900
rx啊

37:18.900 --> 37:19.900
rx就离得非常透彻了

37:19.900 --> 37:20.900
我们这里呢

37:20.900 --> 37:21.900
有一个仓库

37:21.900 --> 37:22.900
数据仓库

37:22.900 --> 37:24.900
这里边是不是有很多数据

37:24.900 --> 37:25.900
对不对

37:25.900 --> 37:27.900
这里边有很多数据

37:27.900 --> 37:28.900
那么这些数据呢

37:28.900 --> 37:30.900
它通过连接啊

37:30.900 --> 37:31.900
通过连接

37:31.900 --> 37:32.900
是不是把这些数据呢

37:32.900 --> 37:33.900
映射到了什么

37:33.900 --> 37:34.900
映射到了组建的

37:34.900 --> 37:35.900
组建里边

37:35.900 --> 37:36.900
对不对

37:36.900 --> 37:38.900
组建一啊

37:38.900 --> 37:40.900
比方说这个查询条件的个组建

37:40.900 --> 37:43.900
组建二比方说分业组建啊

37:43.900 --> 37:44.900
比方说组建三

37:44.900 --> 37:46.900
那个学生表格组建对吧

37:46.900 --> 37:48.900
那么他们是有各自的数据呢

37:48.900 --> 37:50.900
把仓库里边的数据是不是映射过去了

37:50.900 --> 37:51.900
对吧

37:51.900 --> 37:53.900
仓库里边的数据就映射过去了

37:53.900 --> 37:56.900
那么他们各自映射各自的数据

37:56.900 --> 37:57.900
我这里呢

37:57.900 --> 37:59.900
用箭头来表示这个数据就过去了

37:59.900 --> 38:00.900
对吧

38:00.900 --> 38:01.900
数据映射过去了

38:01.900 --> 38:04.900
只要仓库里边的数据发生变化

38:04.900 --> 38:06.900
那么它这里边呢

38:06.900 --> 38:09.900
它就会导致多硬的组建重新渲染

38:09.900 --> 38:10.900
我这里顺便说一下啊

38:10.900 --> 38:11.900
如果说

38:11.900 --> 38:12.900
它给这个组建的数据

38:12.900 --> 38:13.900
没有发生变化

38:13.900 --> 38:14.900
这个组建是不

38:14.900 --> 38:15.900
它为了提高效率

38:15.900 --> 38:16.900
这个组建是没有重新渲染的

38:16.900 --> 38:17.900
那它怎么实现的呢

38:17.900 --> 38:18.900
你听我后面讲那个

38:18.900 --> 38:19.900
它的原码

38:19.900 --> 38:20.900
你就知道了

38:20.900 --> 38:21.900
怎么实现的了

38:21.900 --> 38:22.900
你说这个组建要不要重新渲染

38:22.900 --> 38:24.900
取决于给这个组建的数据

38:24.900 --> 38:25.900
有没有发生变化

38:25.900 --> 38:27.900
如果给这个组建的数据

38:27.900 --> 38:28.900
没有发生变化

38:28.900 --> 38:30.900
那么它是不会重新渲染的

38:30.900 --> 38:31.900
实际上它可以做了一个存住件

38:31.900 --> 38:33.900
Pure Component

38:33.900 --> 38:35.900
可以做了一个这么一个存住件出来

38:35.900 --> 38:37.900
只要这个存住件依赖的数据

38:37.900 --> 38:38.900
没有发生

38:38.900 --> 38:39.900
就是前辟交嘛

38:39.900 --> 38:40.900
没有发生变化

38:40.900 --> 38:41.900
那就OK

38:41.900 --> 38:43.900
这个组建就不会重新渲染

38:43.900 --> 38:45.900
那么它把数据呢

38:45.900 --> 38:48.270
就映射过去了

38:48.270 --> 38:51.840
数据

38:51.840 --> 38:54.840
它们各自映射各自的数据

38:54.840 --> 38:55.840
需要什么数据

38:55.840 --> 38:57.840
我就从仓库里面去取数据给力

38:57.840 --> 38:58.840
而且你看这么一种结构

38:58.840 --> 38:59.840
仓库里边

38:59.840 --> 39:01.840
把数据映射到哪儿

39:01.840 --> 39:04.840
映射到组建里边

39:04.840 --> 39:05.840
那么现在呢

39:05.840 --> 39:06.840
当我们的组

39:06.840 --> 39:09.840
比方说其中一个组建发生了一件事

39:09.840 --> 39:10.840
举个例子吧

39:10.840 --> 39:11.840
我们这些

39:11.840 --> 39:12.840
还是稍微调整一下

39:12.840 --> 39:14.840
不然好话

39:14.840 --> 39:19.370
稍微调整一下

39:19.370 --> 39:35.170
总之把数据映射过去

39:35.170 --> 39:36.170
如果说一个组建

39:36.170 --> 39:37.170
它发生了一件事

39:37.170 --> 39:38.170
发生了一件事

39:38.170 --> 39:39.170
比方说这个组建

39:39.170 --> 39:40.170
比方这个组建

39:40.170 --> 39:42.170
它发生了一件事

39:42.170 --> 39:43.170
事件

39:43.170 --> 39:47.780
这个组建

39:47.780 --> 39:49.780
它发生了一个事件

39:49.780 --> 39:50.780
这个事件呢

39:50.780 --> 39:52.780
是不是给了我们的事件处理函数

39:52.780 --> 39:53.780
你看一下

39:53.780 --> 39:55.780
它给了我们的事件处理函数

39:55.780 --> 39:57.780
比方说我们刚才的搜索

39:59.780 --> 40:00.780
搜索这一块

40:00.780 --> 40:01.780
搜索这一块

40:01.780 --> 40:02.780
它不是一个事件吗

40:02.780 --> 40:03.780
它不是给这个事件处理函数

40:03.780 --> 40:04.780
映射过去了

40:04.780 --> 40:06.780
它把事件的参数传给我

40:06.780 --> 40:07.780
然后我去做一些事情

40:07.780 --> 40:09.780
给事件处理函数

40:09.780 --> 40:10.780
那么在事件处

40:10.780 --> 40:12.780
它会找到一个事件处理函数

40:16.780 --> 40:17.780
事件处理函数

40:17.780 --> 40:23.530
在事件处理函数里面

40:23.530 --> 40:24.530
做了什么事情呢

40:24.530 --> 40:25.530
做了什么事情

40:25.530 --> 40:26.530
当然这个事件处理函数

40:26.530 --> 40:27.530
随便你怎么处理

40:27.530 --> 40:28.530
但是我这里说

40:28.530 --> 40:29.530
通常情况下

40:29.530 --> 40:30.530
有可能了

40:30.530 --> 40:31.530
这个事件处理函数

40:31.530 --> 40:33.530
是不是会dispatch一个x

40:33.530 --> 40:34.530
对吧

40:34.530 --> 40:35.530
会dispatch一个x

40:35.530 --> 40:37.530
也可能会多次dispatch

40:37.530 --> 40:38.530
都有可能

40:38.530 --> 40:39.530
都有可能是说不准的

40:39.530 --> 40:40.530
所以说我给大家说

40:40.530 --> 40:42.530
这种解法是最灵活

40:43.530 --> 40:45.530
它可以支持接收参数

40:45.530 --> 40:46.530
也可以在这里面

40:46.530 --> 40:47.530
随意处理

40:47.530 --> 40:49.530
建议大家用这种解法

40:49.530 --> 40:50.530
那么在事件处理函数里面

40:50.530 --> 40:52.530
是不是要dispatch

40:55.530 --> 40:58.530
事件处理函数

40:58.530 --> 40:59.530
发生事件

40:59.530 --> 41:02.970
我们看一下整个过程是什么

41:02.970 --> 41:04.970
那么发生事件过后

41:04.970 --> 41:05.970
事件处理函数

41:05.970 --> 41:06.970
它会做什么

41:06.970 --> 41:08.970
它会dispatch一个x

41:08.970 --> 41:10.970
dispatch一个x

41:10.970 --> 41:13.790
一个x

41:14.790 --> 41:15.790
这个x 会交给谁

41:15.790 --> 41:17.790
是不是交给Reducer

41:17.790 --> 41:20.790
交给Stone 常库

41:20.790 --> 41:21.790
常库干嘛

41:21.790 --> 41:23.790
常库把这个x

41:23.790 --> 41:25.790
经过一系列的中间间

41:25.790 --> 41:26.790
对不对

41:26.790 --> 41:27.790
最终交给Reducer

41:27.790 --> 41:28.790
对不对

41:28.790 --> 41:29.790
我们就看最后

41:29.790 --> 41:31.790
最终这个x

41:31.790 --> 41:33.790
它会交给Reducer

41:33.790 --> 41:34.790
最终

41:34.790 --> 41:36.790
会交给Reducer来进行处理

41:37.790 --> 41:38.790
交给谁

41:38.790 --> 41:39.790
交给Reducer

41:40.790 --> 41:41.790
Reducer

41:41.790 --> 41:42.790
来进行处理

41:42.790 --> 41:45.790
那么这个Reducer处理完了之后

41:45.790 --> 41:47.790
这个Reducer处理完了之后

41:47.790 --> 41:48.790
是不是导致了

41:48.790 --> 41:50.790
常库里面的数据又发生变化

41:50.790 --> 41:51.790
对吧

41:51.790 --> 41:52.790
它不一定是这个数据发生变化

41:52.790 --> 41:53.790
又可能是别的

41:53.790 --> 41:54.790
不一定是跟这个组件

41:54.790 --> 41:55.790
相关的数据发生变化

41:55.790 --> 41:56.790
又可能是跟别的

41:56.790 --> 41:57.790
组件相关的数据发生变化

41:57.790 --> 41:58.790
总之常库变化了

41:58.790 --> 41:59.790
总之又变了

42:00.790 --> 42:01.790
那么常库一变化

42:01.790 --> 42:02.790
你想一想

42:02.790 --> 42:03.790
那么数据变化了

42:03.790 --> 42:04.790
它相应的组件

42:04.790 --> 42:05.790
是不是导致刷新

42:05.790 --> 42:06.790
对吧

42:06.790 --> 42:07.790
比方说

42:07.790 --> 42:08.790
我这个组件

42:08.790 --> 42:09.790
没有改变自己的数据

42:09.790 --> 42:10.790
别的组件需要的数据

42:10.790 --> 42:12.790
那么别的组件是不是刷新了

42:12.790 --> 42:13.790
那么这样子就完成了

42:13.790 --> 42:14.790
这么一种单向的数据流

42:14.790 --> 42:15.790
看不看

42:15.790 --> 42:16.790
这个数据流是单向的

42:16.790 --> 42:18.790
它并没有往回流

42:18.790 --> 42:20.790
也能实现这个组件

42:20.790 --> 42:22.790
之间互相传遞消息

42:22.790 --> 42:23.790
你只管往常库里面

42:23.790 --> 42:25.790
去派发action就完了

42:25.790 --> 42:27.790
那么相应的组件

42:27.790 --> 42:28.790
就会得到通知

42:28.790 --> 42:30.790
这也是一种订阅模式

42:30.790 --> 42:31.790
那么比方说这些组件

42:31.790 --> 42:32.790
就相当于是订阅的

42:32.790 --> 42:33.790
常库里面的数据

42:33.790 --> 42:34.790
你只要你数据更新了

42:34.790 --> 42:35.790
给我说一下

42:35.790 --> 42:36.790
它怎么订阅的

42:36.790 --> 42:37.790
就是利用那个常库里面的

42:37.790 --> 42:38.790
subscripting

42:38.790 --> 42:40.790
subscript

42:40.790 --> 42:41.790
这个函数来订阅的

42:41.790 --> 42:42.790
订阅的一个监听器

42:42.790 --> 42:44.790
只要常库的数据发生了变化

42:44.790 --> 42:46.790
那么这个组件就会刷新

42:46.790 --> 42:48.790
就形成了这么一种结构

42:48.790 --> 42:49.790
那么这里呢

42:49.790 --> 42:50.790
这些组件

42:50.790 --> 42:51.790
就导致了比方说

42:51.790 --> 42:52.790
比方说导致这个组件

42:52.790 --> 42:54.790
这个组件就刷新了

42:54.790 --> 42:56.790
就这么个意思

42:56.790 --> 42:57.790
明白这个意思吧

42:57.790 --> 42:59.790
就形成了这么一种结构了

42:59.790 --> 43:01.790
我们把这个图

43:01.790 --> 43:03.790
没有什么好画的

43:03.790 --> 43:04.790
就刷到它还是结一下

43:04.790 --> 43:05.790
刷了刷了

43:05.790 --> 43:06.790
这个图没有什么好画的

43:06.790 --> 43:07.790
这个图也很简单

43:07.790 --> 43:08.790
大家尽量下来

43:08.790 --> 43:09.790
自己可以画一个图

43:09.790 --> 43:10.790
去理解一下

43:10.790 --> 43:12.790
这就形成了

43:12.790 --> 43:13.790
react

43:13.790 --> 43:16.790
和reducts的这种结构

43:16.790 --> 43:17.790
对不对

43:17.790 --> 43:18.790
大家下来了

43:18.790 --> 43:20.790
一定要把这个练习做一遍

43:20.790 --> 43:22.790
你把能够把这个练习做一遍

43:22.790 --> 43:24.790
基本上你就没啥问题了

43:24.790 --> 43:25.790
没啥问题了

43:25.790 --> 43:26.790
你别看它这个练习简单

43:26.790 --> 43:28.790
别看就是个查询学生

43:28.790 --> 43:29.790
你把它做一遍

43:29.790 --> 43:31.790
它基本上就涵盖了很多东西了

43:31.790 --> 43:33.790
90%的场景都涵盖了

43:33.790 --> 43:34.790
所以说大家把做一遍

43:34.790 --> 43:36.790
做一遍就没有那么深述了

43:36.790 --> 43:37.790
好

43:37.790 --> 43:38.790
这是关于reacts

43:38.790 --> 43:40.790
reducts的一种使用方式

