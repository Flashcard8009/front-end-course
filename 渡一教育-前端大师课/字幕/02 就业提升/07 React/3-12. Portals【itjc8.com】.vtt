WEBVTT

00:00.430 --> 00:02.430
Portals

00:02.430 --> 00:06.430
这个东西我们把它翻译成为插槽

00:06.430 --> 00:10.430
这个插槽这个词容易搞成混淆

00:10.430 --> 00:14.430
就是你们在之前在学习那个Wheel的时候

00:14.430 --> 00:15.430
Wheel里面不是一个插槽吗

00:15.430 --> 00:17.430
它叫做Snot

00:17.430 --> 00:19.430
那么这个Wheel里面的插槽

00:19.430 --> 00:22.430
跟Reactors里面的插槽不是一码事

00:22.430 --> 00:24.430
Wheel里面那个插槽

00:24.430 --> 00:28.430
它更加接近Reactors里面的Children

00:28.430 --> 00:30.430
不过Wheel里面的插槽可以提供多个

00:30.430 --> 00:33.430
Reactors里面只能提供一个而切入均

00:33.430 --> 00:35.430
不过呢你可以达到同样的效果

00:35.430 --> 00:37.430
比方说你传递一些属性

00:37.430 --> 00:39.430
什么Render Props

00:39.430 --> 00:41.430
或者是一些其他自定义属性

00:41.430 --> 00:43.430
都可以作为类众给它传过去

00:43.430 --> 00:45.430
这些都无所谓

00:45.430 --> 00:48.430
那么Reactors里面的插槽是什么意思呢

00:48.430 --> 00:50.430
它的意思跟Wheel的插槽是完全不一样的

00:50.430 --> 00:52.430
意思指的是

00:52.430 --> 00:56.430
将一个Reactors元素

00:56.430 --> 00:57.430
我们知道与Reactors元素对吧

00:57.430 --> 00:58.430
就是一个组件嘛

00:58.430 --> 00:59.430
对不对

00:59.430 --> 01:00.430
生成出来就是一个元素

01:00.430 --> 01:01.430
Reactors元素

01:01.430 --> 01:04.430
就是我们说的虚拟的Dome

01:04.430 --> 01:06.430
将一个Reactors元素

01:06.430 --> 01:12.430
渲染到指定的Dome容器中

01:12.430 --> 01:13.430
Dome容器中

01:13.430 --> 01:15.430
这个Dome容器指的是真实的Dome

01:15.430 --> 01:17.430
指的是真实的Dome

01:17.430 --> 01:20.430
因为默认情况下呢它是这样子

01:20.430 --> 01:21.430
这些可很好讲啊

01:21.430 --> 01:23.430
然后就讲清楚了

01:23.430 --> 01:25.430
默认情况下是这样子

01:25.430 --> 01:27.430
比方说咱们有这么一个组件

01:27.430 --> 01:28.430
对吧

01:28.430 --> 01:29.430
这里有个DIV

01:29.430 --> 01:30.430
给它个类似嘛

01:30.430 --> 01:32.430
这个类似我也拿着去写了

01:32.430 --> 01:33.430
来表示

01:33.430 --> 01:36.430
这里是一个App这么一个组件

01:36.430 --> 01:37.430
它的容器

01:37.430 --> 01:39.430
然后下边有这么一个组件

01:39.430 --> 01:41.430
比方说这个组件的名字叫做

01:41.430 --> 01:43.430
child

01:43.430 --> 01:45.430
child

01:45.430 --> 01:46.430
有这么个组件

01:46.430 --> 01:49.430
这个组件返回了一些内容

01:49.430 --> 01:50.430
返回了一些内容

01:50.430 --> 01:51.430
比方说吧

01:51.430 --> 01:53.430
给它一个class

01:54.430 --> 01:56.430
child

01:57.430 --> 01:59.430
那么它里边又有一个组件

01:59.430 --> 02:00.430
叫方形

02:00.430 --> 02:01.430
child

02:01.430 --> 02:02.430
当然内组件是一样的

02:02.430 --> 02:03.430
是一样的

02:03.430 --> 02:04.430
没什么区别

02:04.430 --> 02:06.430
child b

02:06.430 --> 02:08.430
使用child b

02:08.430 --> 02:11.510
ok

02:11.510 --> 02:12.510
那么child b里边

02:12.510 --> 02:13.510
它又返回一个东西

02:13.510 --> 02:14.510
又返回一个东西

02:14.510 --> 02:15.510
DIV

02:15.510 --> 02:17.510
比方说给它个类似嘛

02:17.510 --> 02:19.510
这是类似class name

02:19.510 --> 02:21.510
child b

02:21.510 --> 02:23.510
是这么一个意思

02:23.510 --> 02:24.510
就这么个意思就行了

02:24.510 --> 02:25.510
那么在App里面

02:25.510 --> 02:27.510
我们把child a拿进来

02:27.510 --> 02:29.510
这个代码应该看懂吧

02:29.510 --> 02:30.510
不用我说吧

02:30.510 --> 02:32.510
就形成这么一种结构

02:32.510 --> 02:34.510
咱们来看一下这个组件数

02:34.510 --> 02:39.620
在这里

02:39.620 --> 02:40.620
来看一下

02:40.620 --> 02:42.620
看一下这个组件结构

02:42.620 --> 02:43.620
那么你会发现

02:43.620 --> 02:44.620
这个组件结构

02:44.620 --> 02:46.620
跟我们的元素结构是一样的

02:46.620 --> 02:47.620
你看

02:47.620 --> 02:48.620
跟组件是App

02:48.620 --> 02:49.620
里面有个child a

02:49.620 --> 02:51.620
child a里面有个child b

02:51.620 --> 02:52.620
对吧

02:52.620 --> 02:54.620
它的组件数的结构

02:54.620 --> 02:56.620
跟我们的元素结构

02:56.620 --> 02:57.620
是一样的

02:57.620 --> 02:58.620
你看

02:58.620 --> 02:59.620
App

02:59.620 --> 03:00.620
child a

03:00.620 --> 03:01.620
child b

03:01.620 --> 03:02.620
是一样的

03:02.620 --> 03:04.620
但是可能会出现一些情况

03:04.620 --> 03:06.620
这种情况很少很少

03:06.620 --> 03:08.620
但是有可能会出现一些情况

03:08.620 --> 03:10.620
就是说你在逻辑上

03:10.620 --> 03:12.620
是要把child a

03:12.620 --> 03:14.620
作为App的

03:14.620 --> 03:16.620
逻辑上作为它的指数建设

03:16.620 --> 03:17.620
放到这

03:17.620 --> 03:20.620
但是它在真实的动物元素里边

03:20.620 --> 03:22.620
它不一定是这样的结构

03:22.620 --> 03:23.620
我不希望它在真实的动物元素里边

03:23.620 --> 03:24.620
是这种结构

03:24.620 --> 03:25.620
比方说

03:25.620 --> 03:27.620
我们这里举个例子

03:27.620 --> 03:29.620
这个index的一面里边

03:29.620 --> 03:30.620
它还有一个div

03:30.620 --> 03:32.620
比方说model

03:32.620 --> 03:34.620
有这么一个div

03:34.620 --> 03:35.620
我希望

03:35.620 --> 03:38.620
就是child a

03:38.620 --> 03:39.620
它选择到哪

03:39.620 --> 03:40.620
选择到这里

03:40.620 --> 03:41.620
这个div里边

03:41.620 --> 03:42.620
比方说这是个盟程

03:42.620 --> 03:44.620
比方说这是个盟程

03:44.620 --> 03:46.620
这个盟程里边

03:48.620 --> 03:50.620
盟程就是写个pration

03:50.620 --> 03:51.620
fixed

03:51.620 --> 03:53.620
然后net

03:53.620 --> 03:54.620
top

03:54.620 --> 03:55.620
年

03:55.620 --> 03:56.620
宽度

03:56.620 --> 03:57.620
百分之百

03:57.620 --> 03:58.620
高度

03:58.620 --> 03:59.620
百分之百

03:59.620 --> 04:01.620
写上这么一个盟程

04:01.620 --> 04:03.620
写个背景颜色

04:03.620 --> 04:05.620
rgba

04:05.620 --> 04:07.620
我就随便写了

04:07.620 --> 04:08.620
就写到这里

04:08.620 --> 04:09.620
无所谓

04:09.620 --> 04:11.620
我希望

04:12.620 --> 04:14.620
child a

04:14.620 --> 04:16.620
它选择到真实的

04:16.620 --> 04:17.620
页面上的时候

04:17.620 --> 04:19.620
选择到这个div里边

04:19.620 --> 04:21.620
但是从逻辑上

04:21.620 --> 04:22.620
它又是这样的一个逻辑

04:22.620 --> 04:23.620
组建术

04:23.620 --> 04:24.620
它是这样的一个组建术

04:24.620 --> 04:25.620
app

04:25.620 --> 04:26.620
child a

04:26.620 --> 04:27.620
child b

04:27.620 --> 04:28.620
形成这么一个组建术

04:28.620 --> 04:29.620
但是它渲染的时候

04:29.620 --> 04:30.620
渲染它的时候

04:30.620 --> 04:32.620
要把它渲染到这个里边

04:32.620 --> 04:34.620
那么这个东西怎么来做呢

04:34.620 --> 04:35.620
这个东西

04:35.620 --> 04:36.620
非常简单

04:36.620 --> 04:37.620
我们就使用react里面

04:37.620 --> 04:39.620
跟我们提供了一个方法

04:39.620 --> 04:40.620
什么方法呢

04:40.620 --> 04:41.620
它的名字叫做

04:41.620 --> 04:43.620
react里面的方法叫做

04:44.620 --> 04:45.620
不是react

04:45.620 --> 04:47.620
react是动物里面了

04:47.620 --> 04:49.620
因为它是跟真实的动物元素相关的

04:49.620 --> 04:50.620
所以说

04:50.620 --> 04:52.620
我们就要精准的把这个函数

04:52.620 --> 04:53.620
放到这个

04:53.620 --> 04:54.620
这个组建

04:54.620 --> 04:55.620
这个模块里边了

04:55.620 --> 04:56.620
也就是我们要导入什么

04:56.620 --> 04:57.620
导入react动

04:58.620 --> 04:59.620
react

04:59.620 --> 05:03.020
动

05:03.020 --> 05:04.020
react

05:04.020 --> 05:05.020
动

05:05.020 --> 05:06.020
然后

05:06.020 --> 05:07.020
我们在

05:07.020 --> 05:09.020
渲染这个组建a的时候

05:09.020 --> 05:11.020
通过react动物

05:11.020 --> 05:12.020
它里面提供一个方法

05:12.020 --> 05:14.020
叫做create portal

05:15.020 --> 05:17.020
通过这个方法

05:17.020 --> 05:18.020
传入什么呢

05:18.020 --> 05:19.020
传入两个参数

05:19.020 --> 05:21.020
第一个参数是react元素

05:21.020 --> 05:22.020
就是你要渲染的react元素

05:22.020 --> 05:24.020
就是虚的动物

05:24.020 --> 05:26.020
第二参数是你的真实的

05:26.020 --> 05:28.020
动物容器

05:28.020 --> 05:29.020
那么这样子一来

05:29.020 --> 05:30.020
它在真实的渲染的时候

05:30.020 --> 05:32.020
它会把你这个虚的动物

05:32.020 --> 05:33.020
虚的动物

05:33.020 --> 05:35.020
渲染到真实的动物容器里边

05:35.020 --> 05:36.020
渲染到这个里边

05:36.020 --> 05:38.020
然后该函数

05:38.020 --> 05:40.020
返回

05:40.020 --> 05:41.020
一个组建

05:41.020 --> 05:43.020
它返回的是一个组建

05:44.020 --> 05:46.020
返回的是一个react元素

05:46.020 --> 05:48.020
返回的是一个react元素

05:48.020 --> 05:49.020
好

05:49.020 --> 05:50.020
那么我们来看一下

05:50.020 --> 05:51.020
那么这里的函数

05:51.020 --> 05:53.020
我们一会直接返回就行了

05:53.020 --> 05:54.020
为什么直接返回

05:54.020 --> 05:55.020
因为这个函数凋用过后

05:55.020 --> 05:57.020
它返回的就是一个react元素

05:57.020 --> 05:58.020
那么我们该传入什么呢

05:58.020 --> 05:59.020
第一个传入

05:59.020 --> 06:01.020
我们要渲染的真实动物

06:01.020 --> 06:04.020
要渲染的就是虚的动物

06:04.020 --> 06:06.020
这是它渲染的东西

06:06.020 --> 06:07.020
然后渲染到哪呢

06:07.020 --> 06:08.020
默认情况下

06:08.020 --> 06:09.020
它渲染到

06:09.020 --> 06:10.020
跟它的副组建

06:10.020 --> 06:11.020
就是副组建的容器里边

06:11.020 --> 06:13.020
这是默认的情况

06:13.020 --> 06:14.020
但是我们这里可以指定

06:14.020 --> 06:15.020
比方说

06:15.020 --> 06:17.020
我们这可以用document

06:17.020 --> 06:19.020
指定那样是为model的

06:19.020 --> 06:20.020
document

06:20.020 --> 06:21.020
你渲染到这里边去

06:21.020 --> 06:22.020
好

06:22.020 --> 06:23.020
咱们再保存看一下

06:23.020 --> 06:24.020
保存

06:25.020 --> 06:27.020
然后你看一下我们的元素结构

06:27.020 --> 06:29.020
首先看我们的组建结构

06:29.020 --> 06:30.020
组建结构

06:30.020 --> 06:31.020
它是没有任何变化的

06:31.020 --> 06:32.020
你看app里边

06:32.020 --> 06:34.020
还有什么class name app

06:34.020 --> 06:35.020
对吧

06:35.020 --> 06:36.020
然后child

06:37.020 --> 06:38.020
然后这里是

06:40.020 --> 06:43.020
它包了一个react portal

06:43.020 --> 06:45.020
它包了这么一个东西

06:45.020 --> 06:46.020
相当于你可以认为

06:46.020 --> 06:48.020
它是个高階组建

06:48.020 --> 06:49.020
实际上是返回的是一个元素

06:49.020 --> 06:51.020
它包装了这么一个东西

06:51.020 --> 06:52.020
然后呢

06:52.020 --> 06:53.020
这里边有什么

06:53.020 --> 06:54.020
有child a

06:54.020 --> 06:55.020
对不对

06:55.020 --> 06:56.020
dave

06:56.020 --> 06:57.020
dave里边有child b

06:57.020 --> 06:59.020
形成这么一种组建结构了

07:00.020 --> 07:01.020
然后我们再看

07:01.020 --> 07:02.020
真实动物元素里边

07:02.020 --> 07:03.020
真实动物元素里边

07:03.020 --> 07:04.020
入彻里边

07:04.020 --> 07:06.020
你看只有一个class app

07:06.020 --> 07:07.020
你看

07:07.020 --> 07:08.020
只有这么一个东西

07:08.020 --> 07:09.020
class app

07:09.020 --> 07:10.020
dave

07:10.020 --> 07:12.020
然后child a跑哪去了呢

07:12.020 --> 07:14.020
由于child a返回的是什么了

07:14.020 --> 07:15.020
返回的是这么一个东西

07:15.020 --> 07:17.020
于是它把child a渲染的时候

07:17.020 --> 07:19.020
react动

07:19.020 --> 07:20.020
就这个东西在完成渲染

07:20.020 --> 07:21.020
对吧

07:21.020 --> 07:22.020
它完成渲染的时候

07:22.020 --> 07:23.020
渲染到哪去了

07:23.020 --> 07:25.020
渲染到dave里边去了

07:25.020 --> 07:27.020
你看它把child a渲染到这来了

07:27.020 --> 07:29.020
它就起这么一个作用

07:29.020 --> 07:30.020
现在没它作用了

07:30.020 --> 07:31.020
它就起这么一个作用

07:31.020 --> 07:33.020
明白的意思吧

07:33.020 --> 07:37.020
咱们还可以在react里边

07:37.020 --> 07:39.020
child a里边写些东西

07:39.020 --> 07:40.020
随便写东西

07:40.020 --> 07:41.020
h1

07:41.020 --> 07:43.020
child a

07:43.020 --> 07:45.020
然后这里

07:45.020 --> 07:47.020
h1

07:47.020 --> 07:49.020
child b

07:49.020 --> 07:51.020
写些那种

07:51.020 --> 07:53.020
这里是app

07:53.020 --> 07:54.020
h1

07:54.020 --> 07:55.020
app

07:55.020 --> 07:56.020
你看一下吧

07:56.020 --> 07:57.020
在真实动物元素里边

07:57.020 --> 07:58.020
真实动物元素里边

07:58.020 --> 07:59.020
你看是不是重叠了

07:59.020 --> 08:01.020
这里边显示的是

08:01.020 --> 08:02.020
就一个文本

08:02.020 --> 08:03.020
就一个文本

08:03.020 --> 08:04.020
h1 app

08:04.020 --> 08:05.020
你看呗

08:05.020 --> 08:06.020
那么下边的mode里边

08:06.020 --> 08:08.020
它显示了这么一个东西

08:08.020 --> 08:10.020
就形成了这么一种元素结构了

08:10.020 --> 08:13.020
真实的动物结构变成这个样子了

08:13.020 --> 08:14.020
明白的意思吧

08:14.020 --> 08:16.020
真实的动物结构变成这个样子了

08:16.020 --> 08:18.020
但是react的主键结构了

08:18.020 --> 08:19.020
它是没有变化

08:19.020 --> 08:20.020
这说明了啥呢

08:20.020 --> 08:22.020
说明了react的虚拟动物数

08:22.020 --> 08:24.020
跟我们的真实的动物数

08:24.020 --> 08:26.020
它是可以有差异的

08:26.020 --> 08:28.020
是可以有差异的

08:28.020 --> 08:30.020
就说明这个点

08:30.020 --> 08:31.020
那么接下来

08:31.020 --> 08:32.020
为了让你看得清楚

08:32.020 --> 08:33.020
为了让你看得清楚

08:33.020 --> 08:34.020
我还是在child a里边

08:34.020 --> 08:35.020
给它写个样式

08:35.020 --> 08:36.020
写个样式

08:36.020 --> 08:39.020
然后让它有个margin

08:39.020 --> 08:40.020
margin

08:40.020 --> 08:41.020
top

08:41.020 --> 08:43.020
然后说良办

08:43.020 --> 08:45.020
让它看得清楚一点

08:45.020 --> 08:46.020
child a

08:46.020 --> 08:47.020
child b

08:47.020 --> 08:50.020
它形成这么一种结构了

08:50.020 --> 08:51.020
那么接下来我要说的是

08:51.020 --> 08:52.020
问题是

08:52.020 --> 08:55.020
这样子的一种结构形成之后

08:55.020 --> 08:56.020
那么有一个问题

08:56.020 --> 08:57.020
大家要注意

08:57.020 --> 09:00.020
就是关于事件包袍

09:00.020 --> 09:03.020
注意事件包袍

09:03.020 --> 09:04.020
这个事件包袍

09:04.020 --> 09:05.020
为什么要注意呢

09:05.020 --> 09:07.020
是因为在react里边

09:07.020 --> 09:09.020
react中的事件

09:09.020 --> 09:12.020
是包装过的

09:12.020 --> 09:14.020
也就是说react里边事件

09:14.020 --> 09:16.020
看上去跟动物的事件差不多

09:16.020 --> 09:17.020
unclick

09:17.020 --> 09:18.020
mouse over

09:18.020 --> 09:19.020
mouse move

09:19.020 --> 09:20.020
这些东西

09:20.020 --> 09:23.020
跟真实动物

09:23.020 --> 09:24.020
看上去差不多

09:24.020 --> 09:26.020
但是实际上是不一样的

09:26.020 --> 09:27.020
它是专门给你包装过的

09:27.020 --> 09:28.020
上一课我们好像有看到过的

09:28.020 --> 09:30.020
那个视线参数对吧

09:30.020 --> 09:31.020
视线参数

09:31.020 --> 09:32.020
它不是一个真实的

09:32.020 --> 09:34.020
动物的视线参数

09:34.020 --> 09:35.020
而是包装之后的

09:35.020 --> 09:37.020
所以说react里边的事件

09:37.020 --> 09:39.020
是包装过的

09:39.020 --> 09:41.020
它的事件冒泡

09:41.020 --> 09:46.020
所以说它的事件冒泡

09:46.020 --> 09:49.020
冒泡是根据

09:49.020 --> 09:55.020
虚拟动物数来冒泡的

09:55.020 --> 09:56.020
它的事件冒泡是根据

09:56.020 --> 09:57.020
虚拟的动物数来冒泡的

09:57.020 --> 09:58.020
跟真实的动物数

09:58.020 --> 09:59.020
无关

09:59.020 --> 10:04.020
与真实的动物数无关

10:04.020 --> 10:06.020
啥意思呢

10:06.020 --> 10:07.020
啥意思呢

10:07.020 --> 10:09.020
我给它看一下

10:10.020 --> 10:11.020
比方说

10:11.020 --> 10:14.020
这个div

10:14.020 --> 10:16.020
它有一个事件

10:16.020 --> 10:18.020
这样子

10:18.020 --> 10:20.020
给这个div

10:20.020 --> 10:21.020
加上一个事件

10:21.020 --> 10:23.020
给这个div加上一个事件

10:23.020 --> 10:24.020
那么我们给它加上一个

10:24.020 --> 10:28.100
unclick事件

10:28.100 --> 10:30.100
console log

10:30.100 --> 10:31.100
app

10:31.100 --> 10:33.100
被点击了

10:34.100 --> 10:36.100
咱们保存看一下

10:36.100 --> 10:37.100
保存

10:37.100 --> 10:38.100
过来

10:38.100 --> 10:40.100
然后这里

10:40.100 --> 10:41.100
关键是这里

10:41.100 --> 10:42.100
整个谋判

10:42.100 --> 10:44.100
把我们的元素折住了

10:44.100 --> 10:45.100
你看到没

10:45.100 --> 10:47.100
把我这个div折住了

10:47.100 --> 10:49.100
那你肯定点不上

10:49.100 --> 10:51.100
你肯定点不上它

10:51.100 --> 10:52.100
点不上它

10:52.100 --> 10:53.100
被折住了

10:53.100 --> 10:54.100
被折住了

10:54.100 --> 10:55.100
点不上

10:55.100 --> 10:56.100
那这样吧

10:56.100 --> 10:57.100
咱们给这个谋成

10:57.100 --> 10:58.100
稍微控制一下

10:58.100 --> 10:59.100
反正就说明这个道理

10:59.100 --> 11:00.100
就行了

11:00.100 --> 11:02.100
给这个谋成控制一下

11:02.100 --> 11:04.100
然后高度

11:04.100 --> 11:06.100
就不要100%了

11:06.100 --> 11:08.100
高度不要100%了

11:08.100 --> 11:10.100
80%

11:10.100 --> 11:12.100
然后button

11:12.100 --> 11:14.100
top就不是0了

11:14.100 --> 11:15.100
top不是0

11:15.100 --> 11:17.100
top的话20%

11:17.100 --> 11:19.100
这样子

11:19.100 --> 11:21.100
把空白流出来

11:21.100 --> 11:22.100
就这么个意思

11:22.100 --> 11:24.100
咱们首先看元素结构

11:24.100 --> 11:26.100
元素结构

11:26.100 --> 11:27.100
首先我们这个div里面

11:27.100 --> 11:29.100
这是真实动机结构

11:29.100 --> 11:30.100
div里面包裹了一个

11:30.100 --> 11:31.100
H1元素

11:31.100 --> 11:32.100
那么说明我们点击

11:32.100 --> 11:33.100
H1的时候

11:33.100 --> 11:36.100
它会冒泡到div

11:36.100 --> 11:37.100
它也会被点击

11:37.100 --> 11:38.100
那么来看一下吧

11:38.100 --> 11:39.100
点击H1

11:39.100 --> 11:40.100
你看一下

11:40.100 --> 11:41.100
是被点击了

11:41.100 --> 11:42.100
再点击你看

11:42.100 --> 11:43.100
点击到是H1元素

11:43.100 --> 11:45.100
那么这个东西也被点击了

11:45.100 --> 11:46.100
甚至我们可以

11:46.100 --> 11:47.100
这样子

11:47.100 --> 11:48.100
把输出

11:48.100 --> 11:49.100
输出

11:49.100 --> 11:50.100
被点击了

11:50.100 --> 11:52.100
输出世界元的元素名

11:52.100 --> 11:54.100
就是1.target

11:54.100 --> 11:55.100
把这个输出

11:55.100 --> 11:57.100
我们把这个参数

11:57.100 --> 11:59.100
1.target输出

11:59.100 --> 12:00.100
保存

12:00.100 --> 12:01.100
咱们再看

12:01.100 --> 12:02.100
点击

12:02.100 --> 12:03.100
你看点击是不是H1

12:03.100 --> 12:04.100
对吧

12:04.100 --> 12:05.100
点击到是H1元素

12:05.100 --> 12:06.100
它会冒泡

12:06.100 --> 12:07.100
这个没问题吧

12:07.100 --> 12:09.100
那么现在关键点在这

12:09.100 --> 12:12.100
我点击这个CHOW的A

12:12.100 --> 12:14.100
会不会野猫泡呢

12:14.100 --> 12:15.100
按你说的话

12:15.100 --> 12:16.100
如果按真实动物元素的话

12:16.100 --> 12:17.100
那肯定不会

12:17.100 --> 12:18.100
对不对

12:18.100 --> 12:19.100
有什么关系呢

12:19.100 --> 12:21.100
我点击这个CHOW的A

12:21.100 --> 12:22.100
点击这个CHOW的A

12:22.100 --> 12:23.100
跟它有什么关系呢

12:23.100 --> 12:24.100
对不对

12:24.100 --> 12:26.100
它是不是没有任何关系

12:26.100 --> 12:27.100
点击这个东西

12:27.100 --> 12:29.100
跟这个APP没有任何关系

12:29.100 --> 12:30.100
但是我们发现

12:30.100 --> 12:31.100
点这个

12:31.100 --> 12:32.100
它仍然会

12:32.100 --> 12:34.100
仍然会被点击

12:34.100 --> 12:35.100
它是说

12:35.100 --> 12:36.100
这个CHOW的A

12:36.100 --> 12:37.100
这个H1被点击了

12:37.100 --> 12:38.100
这个H1是不是

12:38.100 --> 12:40.100
CHOW的A元素里面了

12:40.100 --> 12:41.100
对吧

12:41.100 --> 12:42.100
那么我们点击CHOW的B

12:42.100 --> 12:43.100
你会发现

12:43.100 --> 12:44.100
它也会冒泡

12:44.100 --> 12:46.100
这就说明了这个问题

12:46.100 --> 12:47.100
就是说它的冒泡

12:47.100 --> 12:49.100
Rx里面的事件冒泡

12:49.100 --> 12:51.100
它是按照这个组件结构的

12:51.100 --> 12:53.100
它是按照这么一种结构的

12:53.100 --> 12:54.100
你看

12:54.100 --> 12:55.100
这是组件APP

12:55.100 --> 12:56.100
组件里面有个DIV组件

12:56.100 --> 12:57.100
有个H1组件

12:57.100 --> 12:59.100
它是按照这样的门冒泡的

12:59.100 --> 13:00.100
我们给谁注册的事件

13:00.100 --> 13:02.100
是不是给它注册的是

13:02.100 --> 13:03.100
给这个

13:03.100 --> 13:05.100
给它这个组件注册的事件

13:05.100 --> 13:06.100
对吧

13:06.100 --> 13:07.100
那么这个组件里边的

13:07.100 --> 13:08.100
任何一个组件被点击

13:08.100 --> 13:10.100
它都会冒泡了这个组件

13:10.100 --> 13:11.100
是这么个意思

13:11.100 --> 13:12.100
也就是它是按照这个

13:12.100 --> 13:14.100
Rx的元素结构

13:14.100 --> 13:15.100
来进行冒泡的

13:15.100 --> 13:17.100
跟这个真摄动物结构

13:17.100 --> 13:18.100
无关

13:18.100 --> 13:19.100
所以大家写代码的时候

13:19.100 --> 13:20.100
注意一下这个点

13:20.100 --> 13:21.100
如果你用了Portals

13:21.100 --> 13:22.100
你不要想象

13:22.100 --> 13:23.100
那么你要特别注意一下

13:23.100 --> 13:24.100
一个事件冒泡

13:24.100 --> 13:25.100
因为这个Rx事件

13:25.100 --> 13:26.100
是被包装过的

13:26.100 --> 13:29.100
咱们后边写补充知识

13:29.100 --> 13:31.100
就是讲补充知识的时候

13:31.100 --> 13:32.100
还会给大家讲一讲

13:32.100 --> 13:33.100
关于这个事件

13:33.100 --> 13:35.100
它是怎么包装的

13:35.100 --> 13:37.100
它是合成过的

13:37.100 --> 13:39.100
那么它这里边的事件

13:39.100 --> 13:42.100
它是跟那个真摄动物结构无关

13:42.100 --> 13:44.100
它是按照虚拟动物结构来进行冒泡的

13:44.100 --> 13:46.100
大家注意一下这个问题就行了

13:46.100 --> 13:47.100
其他人没啥了

13:47.100 --> 13:48.100
这是关于Portals

13:48.100 --> 13:50.100
一个非常简单的内容

