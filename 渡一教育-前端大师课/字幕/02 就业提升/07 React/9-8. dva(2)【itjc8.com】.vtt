WEBVTT

00:00.880 --> 00:04.240
在上课之前呢 咱们先说个问题啊

00:04.960 --> 00:10.000
之前呢 上天看我们报了这么一个错误啊 当时呢 我没有仔细看 嗯 这个错误呢

00:10.720 --> 00:18.160
我们自己解决不了 因为它是Diva原代码里面的错误 其实它也不是错误啊 是一个警告 它并没有影响Diva的功能

00:18.720 --> 00:25.360
刚才呢 我看了一下Diva的就是github上的主页啊 它里边有些开发者呢 已经提了一些issue

00:25.680 --> 00:30.800
就是提了一些问题啊 关于这个问题的 就是Diva安装好了之后呢 他会报这么一个警告

00:31.200 --> 00:39.280
那么这个警告是怎么回事呢 就Diva它的原代码里边呢 它使用了这么一个东西啊 就是有有这么一个hissue对象啊 history对象

00:39.760 --> 00:47.360
我们一会会讲 这个hissue对象呢 它如果说你没有给它传递配置的话 它会默认使用hassie history

00:47.520 --> 00:53.840
这就是为什么我们在地址栏看到的是这个玩意啊 是一个hassie history 为什么是这个玩意啊 这是它的原因

00:54.560 --> 01:02.800
嗯 嗯 但是它使用的方式是这样子啊 它用的是node接使 common接使的模块号标准啊 用required这种方式来使用的

01:03.040 --> 01:06.240
这种方式使用的话 由于有webpack的存在呢 倒是

01:07.040 --> 01:13.200
没有什么问题 嗯 不过呢 它用的方式呢有问题啊 用的方式的话 它现在呢

01:13.760 --> 01:17.760
它用的是这种方式啊 它用的是这种方式在导入模块的 但是呢

01:18.080 --> 01:24.160
如果你用common接使的话 现在呢已经不推荐使用这种方式了啊 让你使用第一种方式

01:24.240 --> 01:27.520
它就是包了这么一个警告啊 因为common接使规范里边

01:28.240 --> 01:32.240
现在呢就是说 尽量不要使用这种方式 而主要是使用这种方式啊

01:32.880 --> 01:37.760
如果你还要使用老的这种方式的话 它可能在未来的版本呢 会把这种方式移除掉

01:37.760 --> 01:45.040
它就包了这么一个警告啊 那个官方的回答是在下一个版本啊 在低瓦的下个版本 会把这个问题解决

01:45.520 --> 01:48.800
好吧 我说一下这个问题啊 然后呢 第二个问题呢 我说一下

01:49.600 --> 01:55.600
就是关于低瓦这一块 低瓦这一块呢 它的更新速度啊 就是它的版本更新速度呢

01:56.400 --> 02:02.080
没有那么快啊 它没有那么快 它其实我看它更新速度还可以 但是没有特别特别快

02:02.640 --> 02:09.280
因此呢 它可能有一些酷的版本呢 嗯 跟我们之前使用的最新版本呢 是有一些差异的

02:10.000 --> 02:11.680
比方说这个regs

02:12.080 --> 02:18.720
regs rotor的一个酷呢 它虽然说使用的是4.0以上 但是跟我们使用的最新版呢 是有一些差异的

02:19.040 --> 02:23.680
我后来呢 是发现这个问题啊 所以说大家呢 在用低瓦的时候呢 建议啊

02:24.080 --> 02:30.720
建议 在拍个几点节省里边 把之前我们使用的那些乱七八糟的酷啊 给它删掉啊 无关的酷给它删掉

02:31.200 --> 02:37.040
呃 这些酷的倒无所谓就可以保留吗啊 这些酷倒是可以保留啊 不过我们现在也用不到也可以把删掉啊

02:37.440 --> 02:46.800
就是关键是要把这个东西删掉啊regs rotor的这个酷给它删掉啊 因为现在regs rotor动物它已经出到5.0版本以上了啊 可能会有一些差异啊 把它删掉

02:47.360 --> 02:51.360
但是这个酷呢 我们目前用不到了啊 可以把它删掉啊regs cooler给它删掉

02:53.520 --> 02:57.760
啊 就保留这个regs最原式的状态 以及低瓦这个状态

02:58.160 --> 03:02.320
然后呢 把这个依赖相给它删掉 删掉之后呢 再把这个load bar juice给它删掉

03:02.800 --> 03:06.560
啊 把这个玩意删掉 删掉过后呢 再重新安装 知道怎么重新安装吧

03:06.960 --> 03:16.800
对吧 12 install对吧 重新安装啊 我这里已经安装过一次了 所以说不用再安装了 好 说一下这两个问题啊 好 这两个问题解决了之后呢 我们再继续来讲这个低瓦

03:18.720 --> 03:26.640
嗯 低瓦呢 我们上节课讲到了这个 它最核心的就是这个函数 mod定义一个模型 这是低瓦最核心最核心的功能

03:27.760 --> 03:33.840
像我们上节课的讲的东西呢 如果说你没有你如果说你没有听懂我建议你啊 先别着急往后看

03:34.480 --> 03:41.520
把上几个再反复看一遍啊 最好是最不说最好一定是要自己写一遍 不然的话一点的印象都没有

03:41.920 --> 03:48.160
啊 一定要自己写一遍写一遍出来 而且不能是抄啊 自己按照自己的理解来写一个啊 写一个例子出来

03:48.720 --> 03:56.720
嗯 因为我们后边用那个污秘结石的时候呢 因为污秘结石是一个极大成者 把我们之前学的所有知识全部融在一起了

03:57.200 --> 04:02.880
嗯 如果我们后边要学污秘结石的话 这个模型这一块 低瓦模型这一块是必须要搞清楚的

04:03.280 --> 04:07.040
啊 这是毫无疑问的 所以说上节课没听懂的啊 再好好看一下

04:07.840 --> 04:11.040
那么这就和我们讲什么呢 这就可能我们讲低瓦里边的路由

04:11.840 --> 04:15.760
其实低瓦里边他没有怎么去处理路由啊 他没有怎么处理

04:16.240 --> 04:21.200
他就是给你把 因为他就如果说他方便你做了 如果说他

04:21.760 --> 04:29.840
大家的一些方便的话 他仅仅是不让你去重新安装那个ratlrotl那个酷了啊 不让你去重新安装了 你直接使用低瓦里边提供的就行了

04:30.080 --> 04:34.080
他相当于是把那个ratlrotl那个酷啊 给你重新倒出了一遍

04:34.480 --> 04:39.040
他相当于做这么一件事 其他的也没有做什么事啊 他就相当于给你重新倒出了一遍

04:39.600 --> 04:44.000
所以说呢 我们这里呢 嗯 要用那个rotl的话也可以这样子使用

04:44.720 --> 04:47.760
啊 比方说我们在英这个社里边啊 我们这里

04:49.040 --> 04:57.440
我们刚才说了啊 这个apple呢 这里就相当于是一个函数 对吧 相当于是个函数 这个函数呢 我们甚至可以专门来写个文件啊 比方说要写个road

04:58.160 --> 04:59.680
啊 road config

05:00.560 --> 05:07.680
rotl config 点解释啊 那么这里面导出一个函数 他不就是要个函数吗 对不对 我可以导出一个函数不完了嘛

05:08.400 --> 05:11.120
啊 他不你要一个函数 ok 我可以导出一个函数

05:11.680 --> 05:15.600
好 那么这里呢 我就不用app了啊 不用app了 我们直接用这个函数

05:16.320 --> 05:19.360
rotl config from rotl

05:21.360 --> 05:26.640
rotl config 对吧 你不是要函数吗 我给你一个函数啊 这个函数呢 你返回一个组件 对吧 返回

05:26.960 --> 05:31.680
返回一个可以宣展的东西 他会进 他会帮你进行宣展 所以说这里连rex库都不要了

05:32.240 --> 05:39.360
对吧 我们在这个文件里边写 这也是通常在使用dbar的时候 它的使用方式啊 专门来单独写一个文件 来

05:39.680 --> 05:41.680
做个模块啊 来专门来配置路由

05:42.400 --> 05:47.840
啊 那么这个配置路由呢 其实就是一个函数 他返回一个组件 对吧 返回一个组件 那么这个东西呢 就替代了什么

05:48.160 --> 05:52.960
替代了这个app的功能啊 相当于把这个功能给他替代了 所以说我们把这个app里边呢 这样

05:53.680 --> 05:56.960
考备一下啊 放过来 把这个app里边刚考过来

05:58.720 --> 06:07.040
相当于是提供了这么一个功能啊 你看一下是不是一样的 对吧 是一样的啊 没有什么区别 对吧 没写return

06:08.800 --> 06:12.240
return ok 好 把这个下面去掉了啊

06:13.600 --> 06:22.240
还是按了标准把扩起来吧 好 ok啊 那么现在呢就把就就写好了啊 就写好了 那么就是这么一个函数

06:22.400 --> 06:27.360
你把这个函数给他 哎 他就可以这个函数 他就会调用这个函数 这个函数会返回一个

06:28.080 --> 06:33.040
返回一个可以渲染的东西 那么他就会去把他启动的时候呢 他就会把他渲染出来啊 就这么简单

06:33.680 --> 06:38.160
嗯 你看一下啊 现在是不是一样的效果 对吧 一样的效果 这个错误不管他了啊 不管他了

06:38.880 --> 06:41.920
好 那么这里呢 加啊 减啊 是不是 都没问题

06:42.400 --> 06:45.120
好 那么接下来我们来把它路由给他配置进去

06:45.840 --> 06:52.800
路由的话怎么来配置呢 比方说因为我们可能会有多个多个页面嘛 对不对 所以说我们肯定需要路由啊 根据不同的例子

06:53.120 --> 06:57.520
来显示不同的主件 比方说我们这里还有个主件 随便写个啊 home

06:58.080 --> 06:59.600
这个主件啊 一个首页

07:01.120 --> 07:01.440
首页

07:02.240 --> 07:07.520
好 那么我们如何来做一个路由呢 其实他没有可以做任何事情啊 他几乎没有给你做任何事情

07:07.760 --> 07:11.200
instead 你得全部自己做 全部得自己做啊 from

07:11.760 --> 07:16.400
来自于哪呢啊 那我们是不是要导入那个browser rotor 对吧 我们之前

07:17.040 --> 07:21.920
就得自己写啊 没有什么区别啊 就得自己写 好那个browser rotor在哪

07:22.320 --> 07:26.960
是不是在这个reaction rotor 多么这个库里面 对不对 是不是在这个库里面

07:27.520 --> 07:31.600
哎 那能不能直接使用这个库呢 可以啊 可以 因为diva他依赖

07:32.240 --> 07:36.960
他依赖了这个库 因此呢你安装diva的时候呢 他实际上是有这个库的啊 是可以直接使用的

07:37.200 --> 07:42.560
不过呢 他推荐你呢 你用这种方式来导入 就是在diva里边啊 有这么一个

07:43.200 --> 07:46.080
rotor啊 有这么一个导出啊 在这个文件里边

07:46.640 --> 07:53.760
有个有个导出 那么他导出了什么呢 他导出了reaction rotor里边的所有东西全部导出了 因此这里边可以直接导出

07:54.320 --> 07:56.960
rotor browser rotor 咱们来看一下他的文档吧

07:57.360 --> 08:03.680
文档里边这个api 文档里边有这么一个 对吧 看输出文件 对吧 就导出的文件 我们可以通过这个diva

08:04.160 --> 08:10.000
这个就是通过diva来导出他的那个函数啊 一个diva 创建diva对象的函数

08:10.640 --> 08:15.920
另外呢 也可以通过这些文件来导出 比如说这个dynamic 我们没什么用啊 这个saga

08:16.240 --> 08:22.400
对吧 我们要如果说要使用saga里边原生的一些东西的话 我们可以通过这个文件来导 导入saga里边的东西

08:23.120 --> 08:28.400
飞起呢 这个是一个远程请求啊 一个远程api的库 那么这个库呢

08:28.960 --> 08:37.200
他导普是他还不是那个es6的一个飞起啊 还不是es6的飞起 那么他模拟出了类似于es6的飞起的一模一样的功能

08:37.840 --> 08:42.960
你可以这样理解 然后呢 但是这个库 你说你要去用它 你还不如用x小时 对吧

08:43.920 --> 08:50.480
然后这divarotor 那么这个库呢 这个文件呢 他导出的就是关于rotor里边的所有东西

08:51.200 --> 08:52.720
都可以在这个里边导出

08:53.440 --> 09:01.680
好 那么 那么我们就可以把这个玩意当成什么rexrotor dorm那样子去使用 然后这里边还可以导入导入什么navlink

09:02.640 --> 09:10.000
都可以啊 都是一样的啊 是一样的 还可以导出rotor啊rotor 只不过它的版本呢 相对于我们之前讲的那个rotor

09:10.480 --> 09:14.480
rexrotor那个版本呢 相对要稍微低一点啊 不大字用法都是一样的

09:15.200 --> 09:18.480
区别不大 好 那咱们呢 来写写这么一个东西啊

09:18.880 --> 09:20.800
当然我们在外面套一个browserrotor

09:22.160 --> 09:26.640
那他来提供什么啊 上下文 我们使用history api啊 来把方里边啊

09:28.160 --> 09:32.880
然后呢 这里边呢 我们写上一些超链接吗 呦l li x2

09:33.680 --> 09:35.680
超链接啊 再成一个navlink

09:37.200 --> 09:46.400
好 然后到首页啊 这首页 这是那个技术器啊 技术器啊 有两个页面嘛 对不对 一个counter 一个home

09:46.800 --> 09:53.120
好 首页的话 我们就to一个鞋杠啊 然后技术器的话 我们to一个counter啊

09:54.160 --> 10:07.840
好 然后呢 下面呢 我们就配置那个路由啊 配置这个路由啊 路由的话 我们就是不是使用rotor对吧 根据不同的地址呢 去匹配不同的路由 甚至呢 我们还可以使用switch啊 都行 跟以前是一样的啊 没有什么区别

10:09.360 --> 10:13.040
switch 好 然后呢 我们写上一个rotor

10:14.000 --> 10:22.160
啊 这里太死 如果说匹配到那个counter的话 我们就宣传这个组件 哪个组件的counter啊  counter 就是

10:22.800 --> 10:29.600
底板了 它对这个路由这一块呢 没有做过得了处理啊 如果counter这里 写上红啊 如果说写刚的话 写上红

10:30.320 --> 10:33.120
好 写完了啊 保存看一下啊 看一下

10:34.480 --> 10:40.000
好 你看 现在是不是出来了 对吧 技术器 首页 技术器 首页 说出来了 没问题吧

10:40.960 --> 10:46.640
好 那么这里一块就就就没什么问题了啊 你这样子写可以啊 可以

10:47.200 --> 10:55.360
但是呢 你这样子写的话 你的路由呢 跟仓库是完全分隔的啊 分隔的 是完全分开的啊 他不是一个东西

10:56.080 --> 11:02.320
啊 就是我们现在写的路由 因为我们知道路由是一个单独的一块组件 叫做ratrotor的一个库 对吧

11:02.880 --> 11:06.720
我们的仓库呢 是说dux的一个库 这两者是没有什么关系的

11:07.440 --> 11:16.240
因此呢 如果说你要把路由的信息跟仓库里边进行配合的话 是不是要用我们之前学过了一个库啊 叫做connected

11:17.120 --> 11:21.600
reactrotor 是不是要用这个库 对吧 要用这个库才能把两者

11:22.640 --> 11:31.280
关联到一起 就是把路由的信息放到仓库里边 你现在是独立的 独立也不是说有什么问题的 但是呢 你在仓库里边就不要去管它了啊

11:31.680 --> 11:38.560
因此呢 你如果是你用这种方式来做的话 如果说你用这种方式来做 那么你在仓库里边

11:39.120 --> 11:42.160
啊 你注意看啊 你在仓库里边 我们之前写了个model

11:42.720 --> 11:49.120
就是这里其实又是仓库 你在仓库里边是绝对不能去使用什么history的 绝对不能的

11:49.840 --> 11:54.640
啊 为什么呢 因为你这个history来自于哪 是不是来自于路由啊

11:55.360 --> 11:56.880
这个history是不是来自于路由

11:57.680 --> 12:05.760
因为这个history来自于路由 但是呢 你现在呢又没有把路由跟那个仓库关联起来 你在仓库里边获得到这个history对象

12:06.400 --> 12:13.920
根本就不是路由这个browser roto 这个这个组件给你提供的history对象根本就不是 明白这个意思吗

12:14.640 --> 12:22.240
两个两个对象不是一个东西 所以说你在这里去使用history 你会发现一个问题 你监听不到 你看地址是否在变化

12:22.800 --> 12:28.400
地址是不在变化 结果呢 结果呢 它这个数字有没有减1 我们之前监听过了

12:29.280 --> 12:37.440
地址只要一变化 我们就把数就出发一个x 让数字减1 那么我们看一下瑞大个是 是不是一开始就减了一次 对吧 一开始就减了一次

12:38.240 --> 12:49.600
啊 一开始一开始第一次嘛 地址他认为地址有变化 他运行的一次啊 那个函数就减了一次 后面地址在变化 他就没监听不到了 因为他不是统一个history对象 明白这个意思吗

12:50.560 --> 13:03.840
啊 因为我们这里的路由呢 用的是browser rotor 他在内部新建了一个history对象啊 而我们这里的history对象呢 根本就不是那个history对象 所以说他观点不上了

13:04.560 --> 13:07.920
当然呢 如果说你不需要这样的观点的话 那无所谓啊 无所谓

13:08.480 --> 13:13.440
当然我们讲课的时候 肯定要告诉大家如何来观念 你看没有观点上的话 还会有个问题

13:13.840 --> 13:18.080
因为在仓库里边呢 他也会记录路由信息 你看他这里有个属性叫rotting

13:18.480 --> 13:27.440
对吧rotting这个属性 那么这个属性里边还要记录路由信息 他能得到的路由信息吗 这不得不到 对吧 他得不到这个路由信息啊 得不到这个路由信息

13:27.680 --> 13:32.880
看拿不到 因为这里的变化呢 他他监控不到 因为他不是统一个history对象

13:34.080 --> 13:37.440
因此呢 我们按照之前学习的这个库 那么

13:38.080 --> 13:42.960
是不是这个库里边 他要给你搞定这件事情 对吧 这个库里边是不是提供了三个东西啊

13:43.200 --> 13:51.760
一个是什么 一个是reducer 对不对 他通过一个函数抗那个册啊rotr这个函数来惨得到

13:52.320 --> 13:55.040
一个reducer 对不对 得到一个reducer 是不是

13:55.840 --> 13:59.520
要做这样的事情 对吧 要传入一个啊 传入一个

14:00.640 --> 14:06.800
传入history对象啊 那么得到一个reducer 还要做什么事情呢 还要就是

14:07.920 --> 14:10.320
嗯 通过什么函数呢 就是rotr

14:11.280 --> 14:16.880
made aware啊 这个函数啊 传入history对象

14:18.320 --> 14:26.000
得到一个reducer 中间键 对不对 是不是要做这个事情 还有一个什么呢 还有一个还有一个主键connected

14:26.400 --> 14:33.680
rotr主键啊 传入history对象 而且要保证这三个对象是同一个 如果说你之前听过我的

14:34.320 --> 14:39.760
那个课程的 就是原码分析的话 你就知道为什么了啊 如果没听过的话也没关系 那么

14:40.160 --> 14:43.920
你就记住 它要传入同一个history对象 那么这个是

14:46.160 --> 14:51.600
提供路由上下文 对吧 我们要做这么三件事情 才能把它关联到

14:52.720 --> 14:58.240
仓库里边 那么现在用了dva过后呢 它实际上它的内部本身就用到了这个库

14:58.480 --> 15:00.880
你去看一下dva的npm上的依赖

15:01.760 --> 15:05.200
它的依赖箱里面就有这个库啊 给大家看一下嘛 怎么去看依赖

15:06.000 --> 15:08.960
比方说我们在找到这个npmgs啊 找到的dva

15:10.080 --> 15:16.480
收一下啊 打开的dva dva这里不是有dependencies吗 对吧dependencies

15:16.960 --> 15:20.000
前面是关于type script的啊 不用管它 那么这里

15:20.480 --> 15:23.440
你看是不是用到这个库啊reacts rotor reduce

15:23.920 --> 15:29.360
他用的是库那个比老版本比较老一点啊 因为这个库呢其实已经更新了啊 更新了 更新成了

15:29.600 --> 15:34.080
connectedreacts rotor了啊 我们之前说过就是这个东西 同一个东西啊 用法都差不多

15:34.640 --> 15:39.600
好 那么他其实依赖了这个库 对不对 他依赖了这个 我看看 他就依赖了reacts啊

15:39.840 --> 15:43.680
依赖了reacts rotor dorm 对不对 是不是都依赖了 对不对

15:44.160 --> 15:47.360
他依赖了这还依赖了reacts啊 依赖了这么一些东西

15:47.840 --> 15:53.840
因此呢 它的内部呢 其实已经给你做了两件事了 第一件事呢 就是这个东西你不用做了

15:54.320 --> 16:01.600
他给你做好了啊 所以说你在你在dva里边你可以自动的看到 他已经把它放到仓库里边了 因为他加了reducer

16:02.160 --> 16:09.200
他加了reducer 所以说他已经把它放到仓库里边了 看到没 这是第一件事 他已经给你做了啊 第二件事呢是

16:11.280 --> 16:18.400
第二件事呢 就是这个 传入中间界啊 一个reacts中间界 他也给你做了啊 把这两件事已经给已经给你做完了

16:19.200 --> 16:23.840
但是呢 他不知道的是history对象是啥 他不知道

16:24.800 --> 16:30.560
他不知道怎么办呢 他不知道的话 他就会自动给你创建一个history对象 这就是为什么他这里爆错

16:31.840 --> 16:41.040
他为什么要爆错 他为什么要去创建 他为什么要去拥有个history 因为他发现你没有给他传history 因此呢 他用了一个默认的history 就是哈希history

16:42.240 --> 16:46.000
这就是这句话的意思啊 他内部使用了一个哈希history

16:47.200 --> 16:53.600
因此呢 我们这里呢 如果说你不给他传history 那么他就会给你默认创建一个哈希history

16:54.640 --> 17:00.320
雕用这个函数把history对象传进去 雕用这个函数把history对象传进去 对吧 他会做这么两件事情

17:00.720 --> 17:08.640
但是这件事情他没有做 这件事情他是要宣传的东西 他不敢做 这件事情他不敢做 他没有做 他让你自己来做这件事情

17:09.280 --> 17:15.040
因此呢 我们如果说要同步仓库的话 在第一把中要同步仓库 我们应该做什么呢

17:17.840 --> 17:23.760
在第一把中 同步仓库 同步路由到仓库

17:25.040 --> 17:29.280
应该怎么做呢 要做两件事情 第一件事情呢 就是这里

17:29.920 --> 17:34.800
他就前面两步了 他都给你做了 但是他不知道history对象啊 第一件事情就是

17:35.680 --> 17:39.200
在雕用diva函数时

17:40.800 --> 17:47.680
配置history对象 配置history对象 第二步使用connected

17:49.120 --> 17:49.920
connected

17:51.040 --> 17:51.920
rotor

17:53.920 --> 17:55.360
提供路由上下文

17:56.320 --> 18:01.280
这就是我们之前学过的 所以说之前的东西呢 每一节课都是有意义的啊

18:01.280 --> 18:05.520
所以大家学了过后一定要去练习一下 不然的话你根本一点印象都没有

18:05.920 --> 18:08.320
当时我们说的这个库的时候是不是要提供这么一个组件

18:08.720 --> 18:16.080
替换掉什么browserrotor对吧 那么现在要用使用这个rotor 那么现在我们只需要做两件事情就行了 而且特别简单 比之前简单太多了

18:16.480 --> 18:21.360
好 第一件事情呢配置history对象 那么history对象在哪里配置呢 在这

18:22.320 --> 18:25.280
在创建diva的时候呢 他其实有一些配置可以写的

18:25.680 --> 18:27.200
其中一个配置呢就是history

18:28.480 --> 18:31.120
history配置 那么这个history配置为啥呢

18:31.600 --> 18:36.560
当时我们咋写的是不是要导入一个history的库啊 我们这里就直接导入就行了

18:37.280 --> 18:39.440
导入history库 from history

18:40.400 --> 18:43.920
我没有安装这个库 为什么可以导入这个库呢 为什么可以导入呢

18:44.480 --> 18:50.400
是因为这个他本身有依赖啊 本身有依赖 所以依赖箱里面本身有history啊 直接用就行了

18:50.800 --> 18:58.880
这里边不是有一个create browser history嘛 对不对 你就调用这个方法啊 来创建一个基于浏览器history api的

18:59.840 --> 19:09.040
history对象啊 把这个history呢作为配置传进去 传到diva里面 这样子一传过去 他就明白了啊 原来我明白你的意思了啊

19:09.360 --> 19:14.880
原来呢 我到时候要创建这个函数 要调用这个函数的时候 传入的history呢 就不再是我默认的

19:15.200 --> 19:18.960
那个啥 那个哈希history了 而是我们这里提供的history对象

19:19.280 --> 19:25.840
就这么个意思啊 就这么个意思 那么将来呢 我们在模型里边得到的history呢 就是我们提供的history对象

19:26.720 --> 19:35.840
啊 就这么个意思啊 好 这是第一 第一步 第二步呢 我们要使用这个组件啊 这个组件 那么这个组件在哪里写了 看着啊

19:37.040 --> 19:44.640
这个组件呢 我们是不是在这里写 要替换叫browser rotor 那么这个组件在哪呢 我们这里打一下啊 你会发现打不出来

19:45.280 --> 19:49.440
打不出来说明什么 说明这里他根本没有这样导出 那么他导出来哪的呢

19:50.160 --> 19:57.200
由于他这里导出的是什么呢 导出的是react rotor里边的东西 你看这些东西是不是react rotor里边的东西

19:57.600 --> 20:01.680
对吧 但是我们要的东西是啥呢 我们要的是这个里面的东西

20:02.160 --> 20:05.440
那这个里边东西在哪呢 他是在封装了一个对象里边去了

20:06.000 --> 20:12.720
啊 他还是在这个位置啊 还是在这个文件 但是呢 他封装了一个对象里边去了 封装了什么对象呢 叫做rotor redux

20:13.440 --> 20:19.040
啊 这个rotor redux啊 他里边啊 里面包含了所有

20:19.680 --> 20:22.320
这个裤啊 就是这个裤里边的东西

20:23.280 --> 20:27.600
这东西 全部包含在这了啊 这个对象里边了 好 咱们把打印一下吧

20:29.360 --> 20:32.560
这里要包错了啊 先这样子写吧 先这样子写啊

20:33.520 --> 20:35.680
好 我们把打印一下吧 rotor redux

20:36.640 --> 20:38.880
好 保存啊 你看一下打印出来

20:39.600 --> 20:46.000
你看 这里边意思是不是一个铺席 对吧 铺席 go go back go forward 那么这些函数 他不是

20:46.160 --> 20:53.600
history里面的函数啊 他是产生的是一个axing啊 他这些函数是一个axing创建函数 产生的是一个axing

20:53.840 --> 20:57.920
那么他这里边是不是有一个 你找一下啊 是不是一个connected rotor 对吧 这是个组件

20:58.400 --> 21:00.320
哎 我们的组件在这啊 在这里面

21:00.800 --> 21:04.480
所以说我们这里呢 要把这个browser rotor替换成啥 替换成

21:05.360 --> 21:08.800
rotor redux第二connected rotor啊 改成这个

21:09.360 --> 21:15.680
对吧 把改成这个 好 那么这个组件呢 他还有还有个特点啊 他要传入一个history 对不对

21:15.920 --> 21:18.320
说要传入一个history 那么这里边我们怎么写呢

21:19.280 --> 21:24.560
之前咋写的 之前是不是我们在建了一个文件 专门来导出一个history 对不对

21:24.800 --> 21:29.040
然后是为了保证使用同一个history嘛 因此呢 我这里要传入导出那个history

21:29.360 --> 21:33.040
然后呢 这个位置又要使用那个history 对不对 我们以前是不是这样子写的

21:33.680 --> 21:36.560
哎 那么现在呢 还用用到这样子写吗 不用了

21:37.520 --> 21:40.160
因为啥呢 因为这个在diva里边

21:41.040 --> 21:48.080
他在用这个方法的时候 他这里不是有个函数吗 哎 这个函数呢 他会给你自动的传一个

21:48.400 --> 21:51.840
传一个参数 他会自动的往这个函数里边传一个参数

21:52.560 --> 21:53.760
啊 我们看一下啊 props

21:54.640 --> 21:59.120
往这个函数里边 他会自动传一个参数啊 这不 这东西不是主线啊 是一个普通函数而已

21:59.600 --> 22:03.840
好 他会传出一个参数 来看一下一个参数是啥 现在爆错啊 因为我没传history 没关系

22:04.400 --> 22:07.200
那么这个参数里边有两个属性 一个就是app

22:08.000 --> 22:13.680
这个app呢 是啥呢 就是diva对象本身 就是这个app对象 就这个玩意儿 他就把这个玩意儿传过来

22:14.000 --> 22:18.160
啊 这个玩意儿里ipon就用不用拉到啊 不用拉到 我们现在也用不到啊 也不会用它

22:19.200 --> 22:22.800
好 另外一个就是history对象 就是我们自己配置到history对象

22:23.280 --> 22:29.520
因此呢 我这里呢 没有必要去单单读写个文件了啊 因为他调用这个函数的时候 他会自动给你传进来

22:29.760 --> 22:33.040
好 那么这里呢 我们直接在这个里边解构解构出history

22:34.320 --> 22:39.280
啊 这个不是主件啊 不是主件再说一次啊 他是一个普通函数 还调用一次 得到结果就完事了

22:39.760 --> 22:41.680
好 然后呢 我们这里把history对象传进去

22:43.440 --> 22:46.480
传进去 好 保存啊 咱们再看一下

22:47.680 --> 22:54.160
那么现在呢 我们看一下仓库里边 你看 是不是触发了这样的一个型 对不对 那么保持了我们的仓库里边的什么

22:54.640 --> 22:58.480
history啊location啊这些是不是同步了 对不对 是不是同步到仓库里边了

22:58.880 --> 23:04.960
哎 我们再来看啊 然后呢 我们这里调转调转到首页 我们看一下这边 是不是又触发了这个 对吧

23:05.520 --> 23:10.880
location是不是又变了 对不对 是不是又变了 又变成这个样子了 看呗 哎 这就是

23:11.440 --> 23:15.040
他给我们提供的功能 把我们的路由数据呢 也保存到仓库里边了啊

23:15.040 --> 23:19.360
因此呢 我们的仓库里边就可以非常轻松的来获取到路由的信息

23:20.000 --> 23:25.760
可以非常轻松获取了 于是我们在仓库里边 是不是一下就可以获取到这个这个玩意了 对吧

23:26.320 --> 23:29.120
哎 这是关于这一块啊 关于这一块

23:30.480 --> 23:35.680
嗯 然后呢 我们既然都说到这了啊 我们就路由就说完了 其实路由

23:36.240 --> 23:41.680
没啥东西了啊 路由就说完了啊 包括我们这里监听 你看技术器每次点过合是不是要减

23:42.160 --> 23:48.320
为什么每次减2 因为点到首页过合 他数据也要变啊 数据也要变 对吧 地址变了嘛 这是我看不到了啊

23:48.800 --> 23:51.040
再点一下 所以点了两次啊 减2

23:52.000 --> 23:55.680
啊 那么路由这一块就说完了啊 就说完了 那么接下来我们就是说的是

23:56.320 --> 24:04.720
低瓦的配置 低瓦的配置其实有点多啊 有点多 我们看一下这个API里边 他这里这个API啊

24:06.240 --> 24:13.440
就是调那个低瓦函数的时候呢 他可以传一些配置啊 你看这个history 是不是可以传递个history 对吧

24:14.080 --> 24:14.320
嗯

24:15.280 --> 24:21.600
那么他这里包含了很多的 他这里用的是这个单子叫hooks 但是那个hooks呢 跟着我们那个react

24:22.240 --> 24:32.400
两个东西啊 他这里的hooks表示钩子函数啊 就是钩子啊 也不一定是函数 是个钩子 那么表示这一钩子呢 在某些时间点呢会有用

24:33.200 --> 24:39.760
好 我们看一下他这里边有很多的配置啊 一个是history 我们来看一下吧 稍微看一下 因为大部分的配置呢 我们平时也不怎么用得到

24:40.240 --> 24:47.040
好 下一个配置啊 initial state 就表示的是初始的状态啊 这个配置表示初始状态

24:47.920 --> 24:57.820
啊 我们看一下吧 initial state 这个初始状态呢 就是他在创建仓库的时候啊 我们来看一下配置啊 配置

24:59.660 --> 25:03.260
第一个history 这个是啊

25:04.700 --> 25:08.700
同步到仓库的history对象

25:10.700 --> 25:18.220
好 第二个 第二个呢 是initial state 表示创建仓库时啊 第一把他会帮你创建仓库

25:18.620 --> 25:23.500
就是redux仓库 你不用 你看你自己没有写吧 对吧 创建redux

25:24.460 --> 25:25.100
仓库时

25:27.500 --> 25:28.140
使用的

25:29.900 --> 25:37.820
默认状态 对吧 创建仓库的时候是不是要给一个默认状态 对吧 那么就是在这里配置啊 当然我们通常都不会不会配置这个

25:38.220 --> 25:44.780
为什么呢 因为我们在状态里边是不是已经配置了 对吧 state 里边每个每个就是他都有状态啊 比方说我们这里给他一个

25:45.580 --> 25:51.980
abc 123 bcd 156啊 随便给个吧啊 保存你看一下吧

25:53.740 --> 25:55.580
然后让我们看一下这个状态啊 initial

25:57.900 --> 26:02.380
刀式也没啥用 刀式也没啥用 因为你这个

26:08.060 --> 26:14.380
因为你现在 因为我这个状态呢 配置了过后了 跟那个我们那个模型不同意了啊 他这里已经爆错了啊

26:14.460 --> 26:21.900
跟模型不同意 其实我们平时开发的时候哪会配置这个嘛 我给你们把模型统一嘛啊 counter counter这个模型呢 是

26:23.260 --> 26:27.980
我们从123开始啊 这个students也不配置的啊 counter 配置一下啊

26:29.100 --> 26:33.180
啊 你看一下 是不是一开始是123 对不对啊 一开始是123

26:34.460 --> 26:39.660
就是说你可以配置一下默认状态 看呗啊 就这么简单啊 这是initial state

26:40.620 --> 26:44.140
啊 因为他一开始减1了嘛 为什么他坚定到地址变化了啊 减1了

26:45.180 --> 26:46.780
好 这是这个配置啊 下一个

26:48.220 --> 26:50.300
下一个啊 on error

26:50.940 --> 27:00.140
on error 是什么意思呢 就是当发生错误的时候啊 当发生错误的时候 我可能会做一些全局处理啊 on error

27:01.020 --> 27:04.380
当发生错误的时候

27:05.260 --> 27:10.140
运行的函数啊 当什么发生错误呢 当仓库的运行

27:10.860 --> 27:16.860
当仓库的运行发生错误的时候 运行的函数啊 这是on error

27:17.180 --> 27:20.700
好 那么这里呢 我们比方说这里写上这么一个on error吧

27:21.660 --> 27:26.700
我们先让他发生一个错误啊 先让他发生一个错误 counter 里边比方说

27:27.820 --> 27:32.540
呃 我们干嘛呢 我们在erfict里边吧

27:33.020 --> 27:36.060
erfict里边直接抛出错误啊 直接在这里抛出错误

27:36.780 --> 27:40.380
好吧 我们在这里啊 等待一秒钟过后啊 说

27:41.260 --> 27:47.100
new一个 error 抛出这么一个错误啊 就是测试的错误

27:48.380 --> 27:51.580
好 那么这里 我们如果说要对错误进行处理的话

27:52.220 --> 27:56.620
那么这里on error 就可以写上这么一个函数啊 写这么一个函数

27:56.620 --> 27:59.420
他传入一个error对象啊 传入一个error对象

28:00.220 --> 28:03.580
那么咱们呢 他其实还有第二个参数啊 就是dispatch

28:04.540 --> 28:08.460
dispatch 他两个都传过来了 就是你说发生错误的时候

28:08.460 --> 28:11.580
可能还会做一些事情 那么比方说你触发一个x形啊

28:11.580 --> 28:16.620
来改变仓库里的里面的某些状态啊之类的啊 你可能会通过全局来进行处理

28:16.620 --> 28:19.660
啊 那么你可以在这里进行配置啊 我们这里输出error

28:20.620 --> 28:23.980
好 保存啊 我们把error和dispatch都输出啊 都输出

28:24.620 --> 28:25.020
保存

28:26.540 --> 28:30.540
好 这里刚才我们是一步加速啊 等一秒钟啊 你看

28:31.340 --> 28:34.140
这里输出了这么一个东西 对吧 测试的错误

28:34.140 --> 28:37.660
然后呢 后边输出了测试的错误

28:38.860 --> 28:43.500
下面 看一下第二个参数呢 我的第二个参数跑到去了

28:43.500 --> 28:46.780
然后这里就输出message嘛 就输出message

28:46.780 --> 28:49.980
免得他 他会把他错误信息用那种特殊的方式打印出来

28:51.420 --> 28:53.660
测试的错误 你看dispatch是不是

28:53.660 --> 28:56.300
dispatch是不是个函数 对吧 一个函数

28:56.300 --> 28:59.740
你可以在这里去触发一些x形啊 就是关于on error

29:01.020 --> 29:06.620
发生错误的时候 他会运行这个函数 了解一下就行了啊 平时我们也不怎么会用到

29:07.820 --> 29:09.740
嗯 然后呢 我们下面继续看啊

29:10.620 --> 29:17.020
on x 这个东西有点有 on x 什么意思呢 就是当触发x的时候还要做什么事情

29:18.220 --> 29:23.820
那你想啊 当触发一个x的时候 我要做一些事 这个是啥呀

29:24.860 --> 29:29.740
好好回忆一下 当触发一个x的时候 我要做一些事 这个是啥啊

29:30.220 --> 29:33.900
这是不是就是redux中间键啊 是吧 是这个意思吧

29:34.380 --> 29:39.420
redux中间键是不是就是当x形触发的时候 我要做一些事 对吧 然后呢 会交给下个中间键 对不对

29:40.300 --> 29:43.980
on x 其实他这里配置的是啥呢 配置的就是redux中间键

29:44.940 --> 29:45.740
on x

29:47.980 --> 29:51.020
可以配置redux中间键

29:51.500 --> 29:56.620
那么他这有两种写法啊 这个东西我稍微详细的说一下 第一个呢 传入一个

29:56.940 --> 30:04.940
中间键对象 这是一种写法 这个是传入一个中间键数组啊 两种写法都可以 比方说你要

30:05.420 --> 30:11.500
给redux加多个中间键的话 那么你可以使用一个数组传进去 如果你只加一个中间键的话 那么你传

30:11.900 --> 30:17.500
传一个对象就行了 啊 比方说我们这里测试一下嘛 自己自己写个中间键啊 直接自己写一个

30:18.060 --> 30:18.700
不要nogo

30:20.220 --> 30:22.940
中间键拿下来啊 中间键拿下来

30:24.060 --> 30:24.300
nogo

30:25.020 --> 30:25.980
拿下来stone

30:26.780 --> 30:27.660
然后呢next

30:28.140 --> 30:33.100
然后呢x 对吧 不就中间键吗 好 我们这里呢 先输出啊 先输出

30:33.580 --> 30:34.460
老状态啊

30:35.340 --> 30:41.740
老状态啊 当然也可以去倒入那个nogo那个中间键对吧 然后呢 再

30:42.380 --> 30:42.780
就是

30:44.380 --> 30:44.700
什么

30:45.660 --> 30:46.940
stone get state

30:48.780 --> 30:53.900
啊得到之前的老状态 然后交给下一个来进行处理 然后呢 再输出新状态

30:54.700 --> 30:56.380
啊 新状态

30:57.660 --> 30:58.860
好 然后呢stone

31:01.170 --> 31:02.370
stone get state

31:03.650 --> 31:07.890
好 然后呢 前后换一个行嘛 前后换一个行

31:08.690 --> 31:14.050
啊 后边换一行就行了啊 好 那么这不中间键对吧 好啊 一个行呢 我们直接把中间键配置进去

31:14.450 --> 31:18.850
那么这样子呢 我们就可以给日大个使呢 去定制一些中间键了 好看一下吧

31:20.530 --> 31:24.370
好 我们这里 你看 老状态 新状态是不是都出来了 对吧

31:24.850 --> 31:32.610
甚至呢 你还可以把相应的x也打印出来 对不对啊 我们切换页面的时候啊 切换页面的时候 它会导致啊 它这些发生变化

31:33.170 --> 31:39.090
对吧 好 这就是关于onx 啊 它是来配置redux中间键的

31:40.530 --> 31:43.250
好 下面这个啊 on state change

31:44.210 --> 31:53.410
啊 on state change 这个配置呢 它做什么用的呢 它是当状态 你看那个名字就知道了啊 它当状态发生变化的时候会运行的函数

31:54.530 --> 32:02.290
当状态 就是我们的仓库的状态啊 仓库中的状态发生变化时

32:04.050 --> 32:09.490
变化时 也就是触发了x运行的reduter的时候啊 运行的函数

32:10.290 --> 32:12.850
运行的函数 好 比方说吧 我们在这里

32:14.690 --> 32:17.650
我们在这里呢 再配置一个啊 这个logo 我都可以

32:17.970 --> 32:21.330
免得看到演化了乱的啊 这个logo可以给它注释掉了

32:23.090 --> 32:29.570
on state change 它是一个函数 它传入一个啊 它传入一个就是state

32:30.130 --> 32:37.410
然后呢 啊 里边就可以做任何处理 比方说我们这里输出啊 这个新的状态里边的counter 输出一下

32:38.050 --> 32:41.570
保存啊 看一下吧 好 这里技术器

32:42.290 --> 32:47.490
啊 你看一下 这里点加 你看是不是这里得到新的状态了 对吧 点加得到新的状态了

32:48.050 --> 32:54.210
啊 那它这个东西有什么用呢 你爱咋用咋用 反正要提供给你的啊 就当状态发生变化的时候 它

32:54.690 --> 32:59.970
你要做什么事情啊 你爱做什么事情就怎么去做啊 这是有这么一个勾指函数啊

33:01.650 --> 33:04.770
好 然后呢 下边这一个on reducer

33:05.970 --> 33:10.210
哎 这个是什么玩意儿呢 他这个玩意儿啊 我们平时根本就用不到

33:11.090 --> 33:17.410
他是做什么呢 他是对 reducer 进行进一步封装 你看我们之前在模型里边是不是取了一些reducer

33:17.730 --> 33:22.850
对吧 写了一些reducer 那么这这些就是一个reducer函数 对不对啊 他处理

33:23.170 --> 33:29.890
stats 处理x 对吧 根据x来处理不同 根据x来处理这个状态 那么这些是reducer

33:30.290 --> 33:36.530
那么在执行这些reducer的时候要干嘛 他就是做了这么一件事啊 那么这里就是on reducer

33:37.250 --> 33:39.090
那么他这个函数呢 我这里写一下啊

33:40.050 --> 33:41.330
他这个函数是什么意思

33:42.290 --> 33:48.930
on reducer 他是对模型中的reducer

33:50.050 --> 33:55.410
的进一步封装 进一步封装 就是可以做一些统一的事情

33:55.810 --> 34:02.130
比方说吧 我们这里这样子写啊 他的格式是这样子 他传入一个原始的reducer函数

34:02.850 --> 34:05.250
你要返回一个新的reducer函数

34:05.570 --> 34:13.890
新的reducer函数 他就做这么一件事啊 返回 他给你一个原来的reducer函数 那么他要得到一个新的reducer函数

34:14.210 --> 34:21.970
好 比方说 我们这里呢 输出一下reducer.name 就是原来的reducer函数的名字 好 保存 你看一下

34:23.970 --> 34:26.610
好 没 是吧

34:26.610 --> 34:29.010
conoperative property counter of undefend

34:29.970 --> 34:35.490
哦 这里 这里去掉了啊

34:36.610 --> 34:40.370
去掉了 为什么去掉了 就是因为这里有影响啊 我们以后的以后就知道了

34:41.170 --> 34:41.570
然后呢

34:42.930 --> 34:48.370
map state 哦 那些全部没了 是吧 全部没了啊 实际 跟说大家说一下原因啊

34:49.170 --> 34:52.130
原因原因是什么呢 原因就是你这里呢

34:52.770 --> 34:54.530
当他运行reducer的时候

34:55.250 --> 34:56.370
你实际上这里啥都没做

34:57.010 --> 35:01.330
状态也没有发生变化 什么事情都没有做 状态也没有摸论值 对吧 啥都没有做

35:01.730 --> 35:06.770
而且呢 他把原来的reducer给你 连没有去运行原来的reducer

35:07.010 --> 35:12.850
就是这个reducer是什么呢 就是原来你在模型里边配置的reducer函数 他把这个函数给你传过来

35:13.170 --> 35:16.610
但是你这里没有运行 没有运行函数是不是reducer没有执行啊

35:17.090 --> 35:20.210
相当于reducer没有执行没有执行的话 他就没有没有得不到状态

35:20.530 --> 35:23.170
所以说你这里呢得把reducer去执行一下啊

35:24.130 --> 35:29.410
我们在这个reducer执行之前 就是他给你原来的reducer 你返回一个新的reducer

35:29.650 --> 35:31.970
他到时候呢会运行你这个新的reducer

35:32.450 --> 35:36.130
好 运行这个新的reducer的时候呢 你挨干嘛干嘛 挨干嘛干嘛

35:36.530 --> 35:40.770
那么这个新的reducer里边 其实我们刚才可以 您可以看到上面肯定有输出

35:40.930 --> 35:45.250
他把函数名字给你变了啊 他又重新给你封装了一个函数

35:45.570 --> 35:47.250
那么我们这里就不管嘛 不管

35:47.490 --> 35:52.210
我们把这个reducer往下面传递啊 往下面传递 就是把状态和action

35:52.530 --> 35:55.010
传递过去 不要那么前面可以输出这么一句话

35:56.130 --> 35:59.090
reducer即将被执行

35:59.970 --> 36:04.930
下面呢reducer执行完了 过后了我们输出一句话reducer执行结束

36:06.610 --> 36:12.930
好 保存 嗯 这里这里的还有错误 我看一下啊 这里还有什么错误

36:16.450 --> 36:18.450
这个主持人啊

36:18.770 --> 36:19.250
呃

36:21.490 --> 36:27.140
这里他说 counter不存在 counter不存在

36:29.810 --> 36:33.730
我看一下啊 看一下为什么他会告诉我 counter不存在

36:34.930 --> 36:40.050
呃 我们看一下这个reduce decrease state state变成 undefended

36:40.690 --> 36:41.570
啊 undefended

36:42.290 --> 36:44.770
unreducer 哎 我看一下这里哪里写错了

36:45.570 --> 36:49.730
哦 明白了啊 这是一个reducer函数 你是不是得把他返回啊

36:50.210 --> 36:55.890
对吧 你得把新状态返回啊 对不对 我是没有返回啊 我没有返回一个新状态

36:56.530 --> 37:01.250
啊 新状态相当于就是返回了一个undefended 他就会把undefended保存到仓库里边啊

37:01.410 --> 37:05.170
所以说你得返回啊 因为这是个reducer嘛 保存啊 你看一下

37:05.890 --> 37:10.370
你看 是不是 对吧reducer即将被执行 即将被执行执行结束

37:12.530 --> 37:18.210
对吧 那每一次reducer运行之前啊 每一次reducer运行之前

37:18.530 --> 37:22.850
那么他都会运行这个函数啊 都会运行这个reducer函数

37:23.170 --> 37:25.250
那么你写了多少个reducer 他就会运行多少次

37:26.050 --> 37:31.490
对吧 你相当于是你他的每一个reducer 他都被封装了一次 就是increase呢 他变成了

37:32.210 --> 37:35.890
把increase传进来啊 得到一个新的increase啊 放到这儿

37:36.530 --> 37:41.330
那么dcrease呢 他相当于把dcrease这个函数传进来啊 传进来

37:41.410 --> 37:45.410
然后呢 返回一个新的函数 然后放到原来的位置啊 他做了一个封装

37:45.890 --> 37:48.610
啊 你没啥用啊 你没啥用

37:49.970 --> 37:53.250
好 这里 至少我们我们目前肯定没有用

37:54.450 --> 37:59.490
好 另外一个是unrefect 是不是一样的道理 对吧 是不是一样的道理

38:00.450 --> 38:03.010
unrefect 那么来吧 unrefect

38:04.210 --> 38:08.050
这个玩意呢 他其实跟那个unreducer啊 差不多

38:08.850 --> 38:13.170
unreducer做什么呢 对reducer进行封装 对吧 再一次封装

38:13.570 --> 38:18.850
那么这个unrefect呢 他是对啊 对

38:20.050 --> 38:25.090
但是呢 严格来说他也不是对模型中的refect进行进一步封装

38:26.130 --> 38:35.970
怎么说呢 类似于对模型中的refect啊 就这里特别特别细这些知识点

38:36.610 --> 38:39.650
所以大家也不用太过于去

38:40.850 --> 38:41.730
去教这个字

38:42.610 --> 38:48.530
大概了解一下就行了 因为平时说如果说你不卸底层模块的话 你根本就用不到这些东西

38:49.250 --> 38:54.130
对于模特别特别细对于模型中的refect的进一步封装

38:54.850 --> 38:59.730
所以说我有的时候啊 觉得咱们前端可能要发展到后端那么成熟

39:00.290 --> 39:01.650
真的还需要一段时间

39:02.690 --> 39:09.010
前端的话 哪怕像这些阿利这些大大厂 他做的酷呢 其实他有的时候呢 做的心思

39:09.490 --> 39:15.490
就在异用性方面啊 真的有些时候真的是有欠考虑的啊 真的是欠考虑的

39:17.330 --> 39:24.290
以我的这么多年的经验吧 就是说前端呢 目前还真的没有产生一个

39:24.690 --> 39:29.570
像后端那么成熟的一个框架 还真的没有 就有的时候呢 他

39:30.530 --> 39:35.170
就是你要学习他 你真的必须要生入到原码 你不生入到原码 你都不知道他的干嘛

39:35.650 --> 39:37.570
有的时候你真的莫名其妙的

39:38.130 --> 39:43.970
像后端的这么多年的积累呢 他已经做成了已经形成了一个非常非常成熟的就是

39:44.610 --> 39:50.050
嗯 最佳实验了 但是前端还这段路呢 还有点长啊 就是有的时候

39:50.690 --> 39:52.530
说说就感慨一下吧 感慨一下

39:53.250 --> 39:56.850
这个on而非格成呢 为什么说内视于呢 他有点不一样

39:57.810 --> 40:04.770
他是什么意思呢 就是说我们之前呢 对对在这啊 我们之前不是写过类似这么一个玩意吗 对不对

40:05.410 --> 40:07.810
他实际上他内部的实现是这样子的

40:08.610 --> 40:12.770
你看我们模型里边配着而非格成 他是内部的实现是这样子的take every

40:13.250 --> 40:17.090
当我们发生某一个action的时候呢 他会去运行相关的函数 对吧

40:17.490 --> 40:22.450
会运行相关的函数 那么这个函数呢 他还不是直接说他不是说直接把这个函数放这

40:22.930 --> 40:27.890
能不能把直接直接把这个函数放这 不能 为什么呢 因为这个函数是不是要两个参数

40:27.970 --> 40:31.730
一个action 一个是生语的参数 对吧 是不是得两个参数啊

40:32.290 --> 40:35.650
但是呢 这里呢 是不是两个参数 他不是两个参数啊

40:35.890 --> 40:40.290
一看我们之前学saga的时候 这里这个函数啊 他当然是一个generator函数

40:41.250 --> 40:47.650
啊 这个函数是不是只有一个参数 就是他把把action传给你 他就完了 对吧 这是saga做的

40:48.050 --> 40:51.490
你能干涉saga的做的事情吗 你干涉不了 对吧 这是saga做的事情

40:51.810 --> 40:56.930
当他匹配到这个action的时候 他会去运行这个generator函数 并且呢把action对象传给你

40:57.090 --> 40:58.690
他并不会给你传第二个参数

40:59.330 --> 41:02.610
并不会传给你 那么他怎么回事呢 那这个函数怎么调用的呢

41:02.930 --> 41:05.730
他是在diva内部 在这个函数里边

41:06.210 --> 41:09.810
进一步进行的封装调用啊 就在这个函数里边去调用了这个

41:10.210 --> 41:14.370
在这里边去调用了eod async increase

41:14.850 --> 41:20.770
他调用了这个action传进去 然后呢再把saga啊 他去导入这个saga的所有的就是erfix

41:21.330 --> 41:24.130
这样子传进去了 他是这样子来调用的 看到没

41:24.690 --> 41:31.730
他是用这种方式来调用 那么这边 onerfix他封装的是啥呢 他替换的是啥呢 他替换的是这个玩意儿

41:33.250 --> 41:38.210
看没 他替换的是这个玩意儿 他把原来的这个玩意儿 就是这个函数传给你

41:38.690 --> 41:43.970
然后呢 你返回给他一个新的函数 他用新的函数放到这儿 看到没 他是这么回事

41:45.090 --> 41:48.370
所以说呢 他这个函数的设计啊 他设计成这个样子了

41:49.250 --> 41:55.890
嗯 然后第一个 他有四个函数 第一个函数呢 是原来的啊 原来的就是erfix

41:57.170 --> 42:01.250
啊 就是原来的 就这个函数啊 他不是不是不是这个

42:02.050 --> 42:05.570
他不是这个 他不是这个函数传给你的 他是这个函数传给你的

42:06.290 --> 42:07.810
他把原的这个东西传给你

42:08.530 --> 42:15.970
好 然后呢 第二个函数是所有的saga而fix 这个东西简单 他直接从saga里面导出就完成了 所以说你很多次

42:16.530 --> 42:23.570
你要理解有些框架的话 你真的要深入原嘛 特别是潜能框架 他的异用性方面真的有的时候欠考虑

42:24.290 --> 42:32.690
好 第三个参数呢 他是给你传一个模型 因为他匹配嘛 匹配到这个东西肯定是对应一个模型嘛 对吧 他把这个模型传给你 你可能会用

42:33.410 --> 42:36.850
好 第四个参数呢 是x型的内型啊 x型的内型

42:37.890 --> 42:43.890
他可以传这么四个参数 让你返回一个啥呢 返回一个新的监导业传函数 他会替换到这

42:44.770 --> 42:51.330
他会替换到这 让你去返回这么一个新的监导业传函数 那么这个监导业传函数是不是只有一个x

42:51.810 --> 42:53.010
对吧 是不是只有一个x

42:53.810 --> 43:00.530
你看这个 是不是只有一个x吗 还能 还能用啥呢 对不对 说没了啊 或者说你用一个圣语参数嘛

43:00.930 --> 43:07.570
你用一个圣语参数啊 比方说我们在这里打印一下吧 打印一下这个arcus

43:08.370 --> 43:18.370
arcus 打印一下吧啊 保存 你看一下 我们这里比方说这里写了arphys了啊 然后呢 我们比方说我们调用一个副作用啊 比方说一部加

43:19.010 --> 43:24.610
你看我们的参数里边 第一个参数里边是不是就是一个type值 对吧 type值不就是一个x吗

43:25.170 --> 43:29.810
还能说啥呢 不就是一个x嘛 这是我们这些玩意儿不用管啊 这些玩意儿是第一家的

43:30.210 --> 43:33.250
不用管 那么这里是不是就是一个x 对吧 就是一个x

43:33.650 --> 43:39.010
好 所以说呢 我们这里呢 其实就一个产数就一个产数x 没别的了啊 没别的了

43:39.650 --> 43:43.890
好 然后呢 你这里边啊 你这里边要做什么呢 你挨做什么做什么

43:44.450 --> 43:46.850
比方说你可以先输出啊即将

43:47.250 --> 43:50.210
呃 执行副作用代码

43:50.930 --> 43:55.890
好 然后呢 最后输出啊 副作用代码执行完毕

43:56.610 --> 43:59.330
好 中间呢 就放原来的啊 old arphys

43:59.970 --> 44:05.410
old arphys 然后呢 把这个就是什么action传进去啊 当然呢 你要用eo的啊

44:06.130 --> 44:09.250
因为这个old arphys old arphys呢 它本身

44:09.970 --> 44:15.090
是一个generator啊 你得用eo的啊 让它去执行一个 就是执行一个任务

44:16.050 --> 44:20.690
没什么意思吗 啊 保存看一下吧 啊 这里一不加

44:22.130 --> 44:28.130
哎 这边抱错了 哦 这是我之前之前 counter 里边啊 counter 里边 我自己跑了个错误

44:28.850 --> 44:32.450
啊 这里是increase 好 保存啊 看一下

44:34.370 --> 44:42.690
一不加 你看 是不是执行完毕 对吧 啊 这就是这么一个逻辑啊 啊 执行这么一个逻辑

44:43.410 --> 44:51.170
没问题吧 没问题吧啊 好 这是这一块啊 当然 你在处理这个副作用过程中啊 你可能要做

44:51.410 --> 44:55.970
你可能要利用到这个玩意儿 利用到这个玩意儿 利用到这个玩意儿啊 你随便去啊 随便去用

44:56.850 --> 45:03.410
好吧 这是 on arphys 说一下 就是如果你不写底层框架的话 你真的是用不到这些东西 这些东西也太复杂了啊

45:04.850 --> 45:12.130
嗯 这个东西我们就不讲了啊 这是mmr就是那个热梯患啊 热梯患不讲了 那个 那个是wipak的知识

45:13.010 --> 45:13.970
extra reducers

45:15.410 --> 45:19.250
嗯 这个玩意儿有什么用呢 他是让你可以配置额外的 reducers

45:20.530 --> 45:22.690
我们看一下吧 记录一下啊

45:24.450 --> 45:28.610
他可以用于啊 用于配置额外的 reducer

45:31.010 --> 45:35.570
嗯 我们看一下这边 咱们这里呢 我们的仓库里边 其实你看我们这里

45:36.130 --> 45:41.250
有哪些 reducer呢 就这个东西是我们自己写的一个模型 他最终会转换成一个 reducer 对吧 合并到

45:41.730 --> 45:48.770
我们redux里边的根的 reducer里边去啊 reducer里边是不是只能有一个 reducer 对吧 他很会合并进去

45:49.170 --> 45:54.530
好 那么这个student是不是我们自己写的 reducer 就是 reducer 对吧 写的模型他最终会转换成 reducer

45:54.850 --> 46:03.810
这个呢 是他那一部给你做的一个 reducer啊 就是关于基督的一个路由信息的啊 这个玩意儿不用管他啊 他就做了一个标识 标识他是dva里边的管理的仓库

46:04.290 --> 46:05.250
啊 这种不用管他

46:05.810 --> 46:06.690
好 那么现在呢

46:07.650 --> 46:15.010
我们要做的是啥事呢 咱们要做的是 如果说我们自己还要给他往里边加一些 reducer 那么就可以通过这个配置

46:15.730 --> 46:23.170
extra reducer 是啊 额外的 reducer 而且呢 这个配置呢 他是一个对象啊 他是一个对象

46:24.130 --> 46:29.570
对象的每一个属性是一个是一个方法

46:31.090 --> 46:31.890
每个方法

46:32.130 --> 46:41.010
每个方法就是一个需要合并的 reducer 就是合并的跟的 reducer 里面去的 reducer

46:41.490 --> 46:43.810
合并进去的 reducer 那么方法的名

46:45.490 --> 46:51.330
基就是属性名 就是仓库里面的属性名 咱们的写一个就知道了啊

46:52.130 --> 46:53.650
我们这里呢 给他配置一下

46:55.090 --> 46:56.130
extra reducers

46:56.850 --> 46:58.850
好 给他配置一下

46:59.170 --> 47:07.490
这为什么要还要讲的东西呢 因为后边我们下一个课要讲那个dva差践dva中间键 讲dva中间键的时候就要用到有些配置啊

47:07.490 --> 47:09.650
我们要知道它的原理的话 就必须要用到一些配置

47:10.050 --> 47:15.490
比方说我们这里写上这么一个嘛 写上一个abc 这么一个函数

47:16.050 --> 47:19.490
好 他这里边不就是写个 reducer嘛 你看这个玩意是不是一个 reducer嘛

47:20.050 --> 47:25.730
给他一个除死值嘛 除死值123 返回了 我也不做任何处理 就返回一个state就完事了

47:26.850 --> 47:35.410
就是一个 reducer 然后bcd state等于456 action 返回一个state 我也不做任何改变

47:36.290 --> 47:38.130
好 就写完了啊 保存一下 看一下吧

47:39.010 --> 47:45.330
好 看一下我们的dux仓库里边 是不是多了一个abc多了一个bcd 对吧 是不是他把合并到跟的 reducer里边去了

47:45.730 --> 47:50.530
把合并到入车 reducer里边去了 因为我们dux只能有一个 reducer 他会进行合并

47:50.850 --> 47:53.010
这些东西 这些函数呢 他就会把合并进去

47:53.650 --> 47:55.810
就这么个意思啊 extra reducers

47:56.290 --> 47:57.170
好 这是这个配置啊

47:58.290 --> 48:03.650
下面那个就是extra enhancers 表示的是额外的增强

48:05.330 --> 48:10.370
额外的增强又是啥玩意呢 extra enhancers

48:11.330 --> 48:12.530
它呢 它是这样子

48:13.490 --> 48:14.290
嗯 它

48:15.490 --> 48:20.370
是用于封装什么呢 封装create stone 函数的

48:21.090 --> 48:27.010
它是用来封装这个的 就是我们create stone 是创建仓库对吧 reducer里边有这么一个函数来创建仓库

48:27.410 --> 48:34.370
那可能你会在创建仓库的时候 你要去做一些额外的事情 或者是你要用一些特别的方法来创建仓库

48:34.690 --> 48:39.170
那么它会怎么样呢 它会把原始的创建仓库的函数传给你

48:40.050 --> 48:44.290
然后呢 你返回一个新的函数 它会用你返回的新的函数

48:44.930 --> 48:46.690
然后来创建仓库啊

48:47.650 --> 48:49.090
呃 第吧 惠江

48:50.370 --> 48:57.090
惠江原来的呃 仓库创建函数传递

48:58.530 --> 48:59.810
啊 作为参数传递

49:01.170 --> 49:05.650
参数传递 然后呢 你得到的是呃 得到

49:06.530 --> 49:14.770
返回一个呃 新的用于创建仓库的函数 就在这个地方的一个扩展点

49:15.250 --> 49:21.890
啊 它可以扩展仓库的创建啊 比方说我们这里随便写一个吧啊 就是看一下这个配置啊 extra

49:22.610 --> 49:24.850
inhansels inhansels是比较增强的意思

49:25.650 --> 49:27.330
好 比方说我们这里写这么一个函数

49:28.610 --> 49:31.890
呃 它有原来一个产原来有个东西啊 原来一个quiz store

49:32.450 --> 49:37.090
原来有这么一个函数 那么这里呢 比方说我们这里即将创建

49:37.970 --> 49:45.170
仓库 好 然后呢 你返返回回来给它的是一个新的函数啊 应该在这里 返回给它一个新的函数

49:46.290 --> 49:49.250
啊 然后呢 函数有些参 函数有些参数

49:52.000 --> 49:56.000
有些参数啊 创建仓库的时候不是要传参数嘛 对不对 好 然后呢 这边

49:56.800 --> 50:00.320
我们先输出一句话 即将创建仓库 然后呢 我们这里返回的

50:01.520 --> 50:06.720
返回的是quiz store这个函数的返回值啊 把参数传进去

50:07.680 --> 50:16.580
好 保存 你看一下吧 呃 哦 它必须是个字 它必须是个数组啊 它还必须是个数组啊

50:18.100 --> 50:26.500
传递的函数 函数必须放到数组中 函数必须放至到数组中 因为它可能会有多个增强

50:27.060 --> 50:30.740
它可能会有多个增强 所以说呢 每一个增强函数呢 要放到数组立边

50:31.460 --> 50:34.660
每个增强函数放到数组立边 保存啊 你看一下

50:35.540 --> 50:39.300
好 那看一下 仓库创建的时候呢 会运行一下这句话 后边就不会运行了

50:39.620 --> 50:45.540
它只是起一个仓库创建的这么一个作用 好 那比如说 你要制定意义来创建一些仓库就可以这样子写

50:46.100 --> 50:50.660
好吧 好 而且呢 如果说啊 如果说你传了多个函数

50:51.620 --> 50:55.460
了解一下就行了啊 那么它的执行顺序是什么呢 你看一下它执行顺序

50:56.260 --> 50:57.700
保存 呃

50:58.900 --> 51:03.060
执行顺序就是顺序执行 对吧 顺序执行啊 执行顺序 顺序执行

51:04.020 --> 51:09.060
啊 其实呢 它合并的顺序呢 是导致合并的 你如果说你听了我之前的

51:09.860 --> 51:15.620
那个瑞拉克斯的原码解析的话 你会有这么个印象有一个叫做compose这个函数

51:16.020 --> 51:20.900
compose这个函数是不是就合并函数的啊 它就是合并函数的 它里没听过原码就耽误扯单

51:21.380 --> 51:26.100
就耽误扯单 就耽误扯字没说 那么它合并的时候呢 是吧 函数呢 从后

51:26.500 --> 51:32.980
从右向左来合并的 但是一调用的时候 是不是就跟中间键一样顺序调用的 对吧 调用的时候是顺序

51:33.700 --> 51:37.060
合并的时候是从右向左合并的 就这么一个原理啊

51:38.260 --> 51:45.540
好 就差不多了啊 这些东西就了解一下 有这么个很印象就行了啊 这些东西平时根本就不会用用 用不到的 用不到的话很快就会忘记了

51:45.940 --> 51:53.060
我们下节课可能会用到啥呢 可能会用到这个玩意儿 可能会用到这个玩意儿 就可能会用到这两个点啊 其他的也不太会用到啊

51:53.860 --> 51:59.620
ok 这就是咱们这一颗讲的东西 就是告诉大家 第一版的这里边呢 是可以进行配置的

52:00.020 --> 52:05.220
它是可以进行很详细的配置 它提供了很多的扩展点 让你可以扩展它的功能

52:06.100 --> 52:13.460
好吧 这是关于这几颗啊 终点呢 是这一颗其实讲了那么多 其实终点在哪呢 终点在路由那一块 就是如何把

52:14.180 --> 52:22.740
我们的路由跟我们的仓库连接到一起 所以说大家要住 这几颗其实你们核心要学习的是这一个东西 如何来同步路由

52:23.220 --> 52:30.260
这个学习好了就行了 后面的配置了了解一下 知道有这么一些配置就完事了 那么杀个的所有功能 全部功能就这么一些的

52:30.820 --> 52:35.780
虽然说它是一个框架 但是呢 它的框架很简单啊 用起来很简单

52:36.660 --> 52:38.660
好吧 最核心的是它实际上是它的模型

52:39.940 --> 52:42.980
好 那么下节课呢 我们讲啥呢 讲低瓦里边如何来

52:44.020 --> 52:49.620
就是使用低瓦给低瓦加一个中间键啊 低瓦里边是可以加中间键的啊 我们要学习如何使用

52:50.180 --> 52:54.900
如何自己写一个中间键 以及呢 如何使用一个第三方的中间键啊

52:56.020 --> 53:01.460
目前的低瓦 目前第三方的中间键还是有那么一些啊 不过大部分呢 我们是在那个5米解释里边

53:02.180 --> 53:03.540
有一些呢 是在那个就是

53:04.260 --> 53:09.220
有有那么一个啊 我们可以再直接跟低瓦来联用 就是低瓦楼顶啊 我们下节课再说

