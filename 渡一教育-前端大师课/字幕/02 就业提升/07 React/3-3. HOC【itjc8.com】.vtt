WEBVTT

00:00.430 --> 00:05.810
高阶组建HOC

00:08.390 --> 00:11.990
这个东西其实可以算是Rx里面

00:12.490 --> 00:14.790
玩的最花的东西了

00:15.830 --> 00:21.450
因为Rx里面它是充分的利用了解释它灵活的这么一个特点

00:21.710 --> 00:23.250
所以说它最终

00:23.750 --> 00:26.830
它实际上是经过深思熟虑的

00:27.150 --> 00:32.470
像Wu这些前端框架

00:33.230 --> 00:36.310
它是把那个包括Angla它也是这样子

00:36.810 --> 00:40.390
它会把那个咱们的代码就写到Atman里面

00:41.170 --> 00:46.550
而Rx它最终决定的把它写到GS里面它是经过深思熟虑的

00:46.810 --> 00:53.710
因为它从一个思考方向上来说的话它认为GS语言它本身是非常非常灵活的

00:54.110 --> 00:56.790
那么它对这个Rx的定位它是一个

00:59.090 --> 01:02.930
最基础的最通用的这么一个前端UI库

01:03.430 --> 01:04.470
所以说

01:06.250 --> 01:09.830
它把这个GS它把这个界面写到GS里面

01:10.090 --> 01:14.190
就非常容易利用GS的语言灵活性这么一个特点

01:14.450 --> 01:16.490
来完成各种各样的烧操作

01:16.750 --> 01:20.070
那么这一套烧操作它不是说Rx自己玩出来的

01:20.330 --> 01:22.890
它是本身就是GS本来就有的

01:23.350 --> 01:26.170
所以说它自然而然就产生了这些灵活的应用了

01:26.690 --> 01:31.030
因此别看Rx的代码它本身的原代码没有多少我们之前说过

01:31.290 --> 01:32.310
就3000来行

01:32.570 --> 01:36.670
它可以玩出的花样非常非常多因为GS玩出的花样就非常多

01:37.430 --> 01:39.490
在GS里面我们之前

01:40.250 --> 01:41.790
你肯定接触过这么一个概念

01:45.800 --> 01:49.380
在GS里面你肯定接触过这么一个概念叫做HOF

01:49.640 --> 01:51.680
它叫做高阶函数

01:52.400 --> 01:54.200
高阶函数是什么意思呢

01:54.460 --> 01:55.460
它指的是意思是

01:55.980 --> 01:59.060
这个东西有狭义有广义广义高阶函数的就是说

01:59.320 --> 02:02.640
你给我传了一个函数作为参数呢我也算高阶函数

02:02.900 --> 02:05.200
你返回来一个函数呢也算高阶函数

02:05.460 --> 02:08.520
狭义上的高阶函数呢它指的是这样子的

02:08.780 --> 02:09.540
指的是

02:09.800 --> 02:11.080
以函数

02:12.880 --> 02:13.900
作为参数

02:14.160 --> 02:15.180
并且

02:16.460 --> 02:18.500
返回一个函数

02:18.760 --> 02:20.040
像这样的一个函数呢

02:20.320 --> 02:23.000
它就是个高阶函数比方说咱们随便

02:23.260 --> 02:24.500
随便写一个方形

02:24.760 --> 02:27.160
你给我传一个啥一个传一个方可进来

02:27.420 --> 02:31.000
你给我传一个函数进来我返回了你一个新的函数

02:31.260 --> 02:32.740
这就是个高阶函数

02:33.000 --> 02:35.360
比方说里面之前学习的什么科理化呀

02:35.620 --> 02:38.420
什么那个函数防斗啊

02:38.680 --> 02:41.500
函数节流啊是不是这些都是高阶函数啊

02:41.760 --> 02:45.080
对对反回了一个新的函数接受一个函数反回一个新的函数

02:45.600 --> 02:46.620
这个高阶函数

02:46.880 --> 02:47.640
实际上呢

02:47.940 --> 02:51.180
高阶组件本质上就是高阶函数啊

02:51.940 --> 02:53.700
那个这个的说写怎么来的呢它叫做

02:53.980 --> 02:54.500
higher

02:54.760 --> 02:55.520
higher

02:55.780 --> 02:56.540
order

02:56.800 --> 02:57.580
方形

02:58.080 --> 02:58.860
高阶函数

02:59.120 --> 03:01.160
高阶组件的是hoc

03:01.920 --> 03:02.700
就是higher

03:02.960 --> 03:03.980
order

03:04.240 --> 03:05.520
然后component

03:06.020 --> 03:08.080
因为在riq车里边呢

03:08.320 --> 03:10.620
一个组件呢它本质上就是函数对吧

03:10.880 --> 03:11.920
我们之前看一个组件

03:12.180 --> 03:14.980
组件里边它不是这样的写的吗对不对啊这样的写的

03:15.240 --> 03:17.280
那这个玩意不就是个函数吗

03:17.480 --> 03:19.540
这个倒不是函数

03:19.800 --> 03:21.060
这个倒不是函数

03:21.320 --> 03:23.580
这个是一个reaction元素啊

03:23.840 --> 03:24.660
一个reaction元素

03:24.920 --> 03:27.980
但是这个组件啊这个组件本身是不是函数

03:28.240 --> 03:28.760
对吧

03:29.020 --> 03:30.540
组件本身不就是个函数吗

03:32.080 --> 03:33.100
组件不是这样的写的吗

03:33.880 --> 03:35.660
组件本身不就是个函数吗

03:35.920 --> 03:38.740
那有些同学说内组件啊内组件的话

03:39.000 --> 03:41.300
内组件的话那不是也是个函数吗

03:41.560 --> 03:43.860
因为内我们知道es6里边的内啊

03:44.120 --> 03:45.380
它就是一个语法堂

03:45.640 --> 03:47.180
它本质上就是个构造函数

03:47.480 --> 03:51.420
所以说呢无论是内组件也好还是一个普通的函数组件也好

03:51.840 --> 03:53.780
它都是函数啊都是函数

03:54.040 --> 03:57.280
那你返回到一个组件是不是返回到要么就返回个内组件

03:57.520 --> 03:59.520
要么就返回一个函数组件对吧

03:59.780 --> 04:00.560
所以说这一块呢

04:00.820 --> 04:03.100
啊组件啊它仍然就是函数

04:03.360 --> 04:05.280
所以说它就是高阶函数的一种

04:05.660 --> 04:06.300
啊它是高

04:06.560 --> 04:07.980
我们把它叫做高阶组件

04:08.940 --> 04:10.020
它指的是什么意思呢

04:10.280 --> 04:12.320
以组件作为参数

04:13.340 --> 04:15.640
啊并返回一个组件

04:15.900 --> 04:17.180
啊组件是不是函数

04:17.300 --> 04:18.500
还是函数作为参数

04:18.760 --> 04:19.700
并返回一个组件

04:19.960 --> 04:22.100
这个组件还不是还不就是函数对吧

04:22.360 --> 04:23.540
它其实又是高阶函数

04:24.300 --> 04:25.980
啊这里我说明一下啊有些人

04:26.240 --> 04:27.260
脑袋里面开始晕了

04:27.520 --> 04:29.700
老师你不对啊你这个说的

04:30.460 --> 04:35.420
一会说组件呢无非就是个reaction元素一会呢又说组件就是一个

04:35.920 --> 04:37.200
函数它到底是啥呢

04:37.460 --> 04:41.820
是这样子的啊因为咱们的中文里边呢它没有做严格区分

04:42.320 --> 04:43.760
啊就是很多时候呢

04:44.020 --> 04:47.180
这些概念的模糊啊跟翻译有很大的关系

04:47.660 --> 04:51.860
就你看原版的官方文档了他做了很严格的区分的

04:52.100 --> 04:54.400
就组件是什么的组件就这个东西叫组件

04:54.660 --> 04:55.680
这东西叫组件

04:56.200 --> 04:59.520
啊那么你平时用的这个东西呢就像这个东西呢

05:00.280 --> 05:04.500
啊就这个东西呢它叫做reaction元素啊

05:04.760 --> 05:06.440
呃reaction元素有两种

05:06.680 --> 05:09.340
一种呢是reaction etym元素

05:09.760 --> 05:12.580
像这种啊我们的这种用法对吧

05:12.840 --> 05:14.880
这种呢叫做reaction etym elements

05:15.880 --> 05:18.120
etym elements

05:18.680 --> 05:23.920
这内置的啊内置的就是呃元素啊reaction内置的元素

05:24.160 --> 05:27.240
那么这个东西也可以认为它本身是一个组件啊

05:27.240 --> 05:31.160
然后呢我们这里去使用这个组件呢得到的是一个reaction etym元素

05:31.520 --> 05:34.320
然后呢我们这种方式使用的呢是reaction

05:34.680 --> 05:37.040
component elements

05:37.360 --> 05:40.720
啊组件元素叫做啊其实本质上一样的啊

05:41.720 --> 05:48.400
五分的这个东西就是用的是什么reaction里边用好写好的组件啊

05:48.400 --> 05:52.760
一起一这个呢是我们自己写的组件啊自己写的组件用它使用它

05:53.080 --> 05:55.840
使用它过后就变成了一个reaction component elements

05:56.040 --> 05:59.520
相当于是一个组件的实力如果是内组件的话就是它对象对吧

05:59.680 --> 06:02.600
如果是函数组件的话就相当于是它是它调用的结果

06:03.080 --> 06:08.000
啊先把这个区分看啊是要严格的就是有的时候呢我们国内呢没有那么严格的区分

06:08.040 --> 06:13.760
我们说他这个东西也是组件啊也是个组件加了一个组件嘛啊那个我们也说他是个组件啊

06:14.080 --> 06:16.600
就是没有做严格的区分但是心里面知道什么意思就行了

06:17.640 --> 06:21.800
啊这是关于那个高间组件啊那么高间组件有什么用的

06:22.600 --> 06:26.720
他啥意义呢他这个东西啊比方说咱们随便写个高点组件啊随便写一个

06:27.520 --> 06:32.120
非常好写啊非常好写就是比方说咱们写这么一个

06:33.880 --> 06:35.320
新疆文件养马啊hoc

06:36.320 --> 06:39.760
然后呢这里面写一个就是名字叫做

06:40.600 --> 06:43.520
wiz啊高点组件呢我们通常命名上啊

06:43.920 --> 06:48.760
啊他没有严格说命名规范是什么样子但是我们平时习惯他们都是有位置开头的

06:49.080 --> 06:53.400
加上一些东西啊加上一些功能我们以后再说啊他具体的具体的这意义

06:53.960 --> 06:55.560
啊wiz呢比方说test

06:56.200 --> 06:56.760
wiz test

06:57.680 --> 07:00.160
第二件事啊比方说我们这导出一个函数

07:02.310 --> 07:06.590
导出这么一个函数啊这个函数也没有什么名字啊没有什么名字

07:06.830 --> 07:07.990
你传一个组件过来

07:09.190 --> 07:15.950
然后呢我给你返回一个新的组件返回的时候返回什么了返回一个class啊class啊

07:16.470 --> 07:20.110
就是个全名为wiz啊test吧啊一个是添子

07:22.190 --> 07:24.870
import or react from react

07:26.070 --> 07:27.750
啊一个添子吗react

07:28.470 --> 07:34.590
component啊我给你返回返回的是不是是不是还是个组件对不对你给我一个组件我给你返回一个新的组件

07:34.750 --> 07:38.870
这就是个高线组件啊就完了就这么简单啊就这么简单

07:39.390 --> 07:42.910
那咱们用的时候怎么用了比方说咱们有一个组件啊有一个组件 a

07:44.030 --> 07:46.990
比方说是函数组件吧啊不说喂啊有这么一个组件 a

07:48.510 --> 07:53.390
啊然后呢我们可以使利用利用这个函数啊可以利用这个函数比方说wiz

07:56.430 --> 08:02.430
test啊函数名字叫wiz test那这个class就不不命名了啊就不要名字啊wiz test

08:03.070 --> 08:13.150
wiz test啊调用它把这个组件a传进去那么就会得到一个新的组件对吧得到一个新的组件b啊这个新的组件b呢就是我们的

08:13.550 --> 08:18.990
高阶组件就这么简单啊就这么简单给他一个组件返回一个新的组件你看一下这个结构吧

08:19.790 --> 08:22.510
高阶组件无非就是我的我的这种操作

08:23.390 --> 08:31.710
那么他有什么意义呢高阶组件呢可以实现啊可以利用通常情况下啊通常可以利用

08:32.910 --> 08:35.790
hoc就高阶组件实现啊

08:36.990 --> 08:38.990
实现什么了实现横切

08:39.870 --> 08:40.510
关注点

08:41.630 --> 08:42.510
这什么意思啊

08:43.710 --> 08:56.240
啊我这里就个例子吧啊比方说我们咱们呢有距离啊比方说咱们有20个组件

08:57.120 --> 08:58.800
20个组件的每一个组件

08:59.760 --> 09:12.400
都在创建啊在创建组件和销毁组件时啊在创建和销毁组件的时候需要干嘛呢需要做日制记录

09:14.160 --> 09:20.560
就是在日制里面记录一下啊记录一下我这个组件创建了我这个指键什么时间点创建的边于后边调试啊

09:21.120 --> 09:26.720
啊这个组件啊什么时候销毁的啊比方说组件发生错误的时候要做一些日制记录等等等等

09:27.680 --> 09:28.560
像这些事情呢

09:29.200 --> 09:30.240
20个组件都需要

09:30.800 --> 09:35.760
那怎么办呢我是不是在20个组件里面每个组件里面都是重新写的代码了是不是挺麻烦的

09:36.320 --> 09:39.680
好我们就可以把这个功能点的分离出来

09:40.000 --> 09:42.000
就是你这些组件的你不用去管这些事情

09:42.320 --> 09:46.720
我专门来写个高阶组件他来专门来负责这个事情专门来负责日制记录

09:47.520 --> 09:50.080
啊就这么个例子啊居然我们现在还不知道怎么写啊

09:50.800 --> 09:51.440
以后再说嘛

09:52.320 --> 09:54.720
好然后再比方说啊再比方说

09:55.680 --> 09:57.600
有20个组件

09:58.960 --> 10:02.640
他们需要显示啊他们需要

10:03.760 --> 10:04.560
显示

10:05.520 --> 10:07.520
一些内容啊一些内容

10:08.160 --> 10:12.240
得到的数据结构啊结构完全一致

10:12.880 --> 10:17.200
这是什么例子呢对于类似于我们之前一起来个公共组件你看这这几个

10:17.760 --> 10:22.640
啊这几个他们需要的数据是不是非常类似的啊你看这两个基本上是完全一样的

10:22.960 --> 10:24.240
radio box group

10:24.480 --> 10:27.360
不是这个啊是那个是这两个对吧

10:27.600 --> 10:28.320
radio group

10:28.560 --> 10:35.520
radio box group和那个是那个是两个东西他们需要的数据呢是完全一致的只是选择的内容不同

10:36.480 --> 10:40.960
啊包括这些属性呢什么他的解属性检查呀这些东西是不是全是一致的

10:41.360 --> 10:42.720
他只是数据不同而已

10:43.120 --> 10:45.520
那么这个地方我们是不是有很多重复带吗在这里边

10:45.920 --> 10:48.880
对吧我们就可以把这些东西抽离出来啊抽离出来

10:49.200 --> 10:50.320
使用高阶组件

10:51.280 --> 10:52.320
去管制这些功能

10:52.560 --> 10:56.000
而他们只需要做自己有差异性的东西就行了

10:56.640 --> 10:59.040
啊高阶组件可以做很多很多的事

10:59.280 --> 11:01.520
包括我们后边还会学习什么redax

11:01.840 --> 11:04.720
redax里边他给提供了一些东西他就是高阶组件

11:05.760 --> 11:08.880
啊所以高阶组件咱们reactor里边是特别特别有用的

11:09.280 --> 11:10.320
啊咱们这些可能

11:11.520 --> 11:12.720
先来讲解

11:13.840 --> 11:18.560
高阶组件的语法就是该怎么来去使用啊该怎么来携带嘛

11:19.520 --> 11:24.720
呃他呃执行的时候呢有哪些地方需要注意啊咱们先把支持点讲啊

11:24.960 --> 11:29.520
讲了过后下节课呢我们咱们来做一个demo就把这些啊这些相似的组件啊他里边

11:29.760 --> 11:31.360
重复带马就给去掉了

11:32.400 --> 11:39.280
好呃这里呢我们来写这么一个例子啊写这么个例子比方说啊就以什么做日治基督为例

11:40.320 --> 11:44.800
比方说咱们呢有一个组件啊有个组件这个组件呢我们

11:45.440 --> 11:48.000
给他取名为啊comps

11:49.280 --> 11:54.880
这里面呢就导出两个组件啊导出两个组件啊都是函数组件吧因为我们这里就

11:55.680 --> 11:58.240
简单一点啊所以做简单一点函数组件 a

11:59.360 --> 12:05.840
好这个a在创建的时候呢要做日子的记录啊要做日子记录 a 销毁的时候呢也要做日子记录

12:05.920 --> 12:08.720
那我们就使用类组件吧因为类组件才有生命周期对吧

12:09.280 --> 12:14.560
那无所谓啊无所谓其实这个东西无所谓的class啊一个天子啊reactor

12:15.280 --> 12:17.760
第二component

12:18.720 --> 12:21.600
导入进来啊import react

12:22.320 --> 12:24.320
reactor from

12:24.960 --> 12:29.760
好这导出一个呢a这个呢这个组件啊然后呢我们这里选了

12:29.760 --> 12:34.960
Render啊反而回到什么一个a起源说啊里面就写个a啊表示是组件a

12:34.960 --> 12:36.960
然后呢还有一个组件b

12:38.480 --> 12:40.480
还有一个组件b

12:40.480 --> 12:42.480
这个组件b呢也要做同样的事情啊

12:42.480 --> 12:44.480
他也要做日子记录

12:44.480 --> 12:48.480
但是这两个如果在全部在这里边写的话是不是很麻烦对吧

12:48.480 --> 12:54.480
我们要写很多重复代码我们就可以把这些通用性的重复代码呢就把抽离出去啊抽离出去

12:54.480 --> 13:00.480
好那么怎么来抽领的我们现在在a和b里边就不再关注什么日子记录了啊

13:00.480 --> 13:02.480
不再关注

13:02.480 --> 13:04.480
跟该组件

13:04.480 --> 13:06.480
跟该组件

13:06.480 --> 13:08.480
不相关的事情

13:08.480 --> 13:12.490
啊事情

13:12.490 --> 13:14.490
这里也是啊

13:14.490 --> 13:19.490
b里边也是什么日子记录啊这些东西乱七八糟的玩意啊我不再关心了

13:19.490 --> 13:24.490
我们放到哪呢放了专门抽离一个高阶组件出来就是高阶组件其实本质上就是一个函数

13:24.490 --> 13:26.490
给他换个名字啊

13:26.490 --> 13:28.490
wish log

13:28.490 --> 13:34.490
表示我这里呢有一个专门来做日子记录的高阶组件啊这是个高阶组件

13:34.490 --> 13:40.490
高阶组件啊高阶组件他本质上本质上就是个函数给我一个组件我给你返回一个新的组件

13:41.490 --> 13:49.490
好我这个高阶组件里边啊高阶组件里边干什么呢你看啊你给我的是一个啥是个组件对吧

13:49.490 --> 13:55.490
你给我一个组件然后呢我为了做日子记录啊于是呢我返回了一个新的组件

13:55.490 --> 14:01.490
这个新的组件是一个内组件啊甚至可以给给这个class取个名字取名字的主要作用其实都是为了

14:01.490 --> 14:06.490
在调试的时候啊流量机调试的时候我们可以清楚的看到他的组件结构啊比方说

14:07.490 --> 14:10.490
log wiper啊一个包装器啊

14:12.490 --> 14:14.490
返回一个组件啊传入的是一个组件

14:15.490 --> 14:19.490
返回的是一个新的组件这个用这个组件来做日子记录

14:19.490 --> 14:23.490
这个组件里边很简单他没有任何的额外的东西要渲染

14:23.490 --> 14:26.490
但他也可以让他有额外的东西要渲染啊这个无所谓的

14:26.490 --> 14:32.490
他有个render render里面渲染返回啥呢返回啥直接就返回这个组件啊

14:33.490 --> 14:34.490
啊

14:35.490 --> 14:36.490
直接返回这个组件

14:37.490 --> 14:40.490
你这个组件是啥就是啥啊直接给你返回

14:40.490 --> 14:46.490
然后呢如果这个组件需要参需要这个参数呢我们以后再说参数啊现在不先不管参数

14:46.490 --> 14:53.490
好那么现在呢你看这个是不是新的组件了这个组件返回啥是不是利用必包就返回了这个东西啊返回了

14:53.490 --> 14:59.490
这个组件的字对吧就是这个组件要做啥他显示就是这个东西只不过呢在这个基础上

15:00.490 --> 15:04.490
我可以加一些功能啊在这个基础上我返回的还是他

15:05.490 --> 15:09.490
但是呢我在基础上加一些功能什么功能的比方说啊我们在constructor里边

15:10.490 --> 15:15.490
或者在component地的mount里边啊在这里边

15:16.490 --> 15:23.490
出出一个日字啊日字啊然后呢我们这里写上啊这样的拼接吧啊日字啊

15:23.490 --> 15:24.490
日字啊

15:26.490 --> 15:32.120
组件啊组件然后comp

15:33.120 --> 15:38.120
comp 第二组件里面好像有没有这个component name这个属性啊

15:39.120 --> 15:45.120
好像我们输出type嘛啊输出type啊组件这个组件啊被创建了

15:46.120 --> 15:53.120
被创建了我们从可以从可以从可以从这个组件组件那个类型里边啊可以有内啊可以有内

15:53.120 --> 16:00.120
因为组件本身就是函数嘛对不对函数里边他不是一个name属性吗name属性表示函数的名称吗啊组件这个东西被创建了

16:01.120 --> 16:04.120
啊后面可以跟上一个时间啊跟上一个时间

16:05.120 --> 16:15.120
就是dead now啊跟上一个时间啊这是个时间戳嘛好然后呢下面我们组件销毁的时候啊

16:16.120 --> 16:17.120
component

16:18.120 --> 16:21.120
component will

16:22.120 --> 16:24.120
component will amount

16:25.120 --> 16:33.630
啊组件销毁的时候我们再记录日字啊组件被销毁了啊被销毁了

16:34.630 --> 16:41.630
好我们这样子说日子就完成了我这里边的东西他不需要关心日字啊这些东西跟他本身无关我就不需要关心了

16:42.630 --> 16:47.630
把它放到高阶组件里边那你看一下我们怎么来玩啊比方说我们带app里边

16:48.630 --> 16:51.630
我们导入啊导入一个组件a和b都导入进来

16:53.630 --> 17:00.630
component里边什么comps啊从这里边导入a和b然后再导入高阶组件with look

17:01.630 --> 17:07.630
高阶组件里边啊with look导入进来过后呢我们这里这样子玩看着啊

17:08.630 --> 17:13.630
我们呢先把这个组件a呢包装一下啊包装一下啊

17:14.630 --> 17:21.630
a look比方说吧a look啊with look他不是个函数吗把组件a传进去反回一个新的组件啊concept b

17:22.630 --> 17:26.630
with look啊把b传进去啊这里b look

17:27.630 --> 17:34.630
是不是我们给给他一个组件得到一个新的组件而这个新的组件所以得到的这个东西啊得到的就不是原来那个组件了

17:35.630 --> 17:42.630
对吧得到的是这个东西的他把包装了一层看没好然后呢我们这里去调用啊a look啊a look

17:43.630 --> 17:45.630
他在调用b look你看一下吧

17:46.630 --> 17:55.630
保存啊咱们看一下一面啊这里面没有运行啊cdrexner一二start看一下吧非常非常舒服

17:56.470 --> 18:00.630
这样子呢我们就把这些功能点了就给抽离出来了抽离到我们的

18:01.390 --> 18:05.510
单独的高阶组件里面去完成了而不需要在那个原来的组件里面去做这些

18:05.750 --> 18:09.630
烦说的事情那些组件里面我们只需要关心他自己特殊的事情就行了

18:10.630 --> 18:20.230
啊燃运行出来啊a和b仍然显示出来了看上去的显示就是a和b那么你看一下组件a被创建了组件b被创建了哎就是啊方可行到啊我这里哦

18:21.430 --> 18:23.430
哦这里要这样子去啊

18:24.510 --> 18:26.310
这个时间戳啊时间戳

18:28.070 --> 18:34.870
哎这个这个这个给太马给太马看一下啊

18:35.990 --> 18:40.550
哎没有这个函数我让我连这个东西都忘了啊那行吧我要再试一下啊

18:40.950 --> 18:46.150
这次闹是啥了哦是一个函数啊然后呢是什么

18:47.350 --> 18:52.230
给成闹他是个函数啊他是个函数他不是一个把他的属性买使用的啊

18:54.420 --> 18:56.540
你肯定以为我这里错了

18:57.740 --> 19:02.180
因为我c下不写习惯了c下不他就是一个属性啊保存

19:03.620 --> 19:11.460
好你看一下啊组件a和强行解释的组件a和组件b来创建了对吧啊当然他他他们他们销毁的时候呢

19:11.620 --> 19:19.300
他们依然会运行对吧虽然组件a和组件b没有没有这个功能但是呢我们通过高阶组件是不可以很轻松的给他附加功能

19:19.700 --> 19:27.220
所以说因此呢你可以认为啊这个高阶组件呢就类似于啥呢就类似于好像一个插件一样可以增强这个组件的功能

19:27.940 --> 19:28.980
啊可以增强他的功能

19:30.180 --> 19:38.740
好这是高阶组件用法那么再来看啊我们这个这个原这个rex的组件结构你看组件结构是不是会有变化对吧

19:39.220 --> 19:43.380
他里边多了一个什么log wiper对吧log wiper他里边才放的是a组件

19:43.620 --> 19:48.260
然后这里也是log wiper他里边放的是b组件看没他变成这样的一种结构了

19:48.500 --> 19:51.620
因为由于呢log wiper里面呢他什么都不显示啊

19:52.020 --> 19:57.540
通常情况下高阶组件他是为了为了增强功能的他一般不会做任何的显示啊

19:57.860 --> 20:00.900
不太会做也不说完全一定这东西没有强制要求

20:01.300 --> 20:07.220
一般来说啊他是做功能增强的一般不会不太会去做一些跟显示相关的东西

20:08.180 --> 20:15.700
所以说呢由于他看上去呢不会显示所以说呢你看感觉上呢好像还是用的a和b就非常神奇给他加上那个功能了

20:16.740 --> 20:19.460
那么这里有个问题就是如果传递属性怎么办呢

20:20.100 --> 20:23.700
如果你叫传一个属性啊比方说这个a里边要传个属性啊

20:24.020 --> 20:31.060
传一个e进去啊b里边要传个属性啊传个b进去啊那么这个东西a里边你看啊

20:31.540 --> 20:35.860
咱们在这个组件里边a里边还有显示属性啊显示属性

20:36.580 --> 20:40.820
就是this props 当然这个是韩式组件也可以啊也可以

20:41.860 --> 20:43.140
yes this props a

20:45.140 --> 20:46.340
好这个呢要显示

20:48.100 --> 20:49.460
this props b

20:50.180 --> 20:53.300
那如果显示属性怎么办呢你看一下现在属性能不能传过去啊

20:53.620 --> 20:54.660
现在属性能不能传过去

20:55.140 --> 20:57.060
这拿不到为什么拿不到你看一下

20:57.620 --> 20:59.300
我由于我刚包了一层了

20:59.300 --> 21:04.020
他相当于是这个组件得到那个高阶组件返回到那个组件他有这个属性了

21:04.740 --> 21:08.500
你把属性加到哪去了你看这里我们用了这个组件这个组件是哪个组件

21:09.620 --> 21:13.780
这个组件是不是这个返回到这个玩意对不对你是不是把属性加到他身上去了

21:14.740 --> 21:19.780
对吧属性加到他身上去了所以说你看到这个看到这个属性是在这对吧是在这

21:20.100 --> 21:22.100
他并没有把这个属性继续往下面传递

21:22.660 --> 21:24.660
所以说这里下面呢是没有这个属性的a和b

21:25.700 --> 21:26.500
那怎么办呢

21:27.300 --> 21:30.340
非常非常简单我们这里呢其实我都

21:30.740 --> 21:32.900
很多同学应该对很多同学而言啊都不用说

21:34.340 --> 21:44.820
是把这个我的属性展开给你就完事了啊管管他用户给我传的什么属性反正我把属性全部给你啊我反正又不用这个属性啊这个属性对我来说没啥用啊我把全部给你呗

21:45.540 --> 21:47.540
看到没哎怎么保存

21:49.140 --> 21:52.740
啊你看是不是可以显示出来了这样子你看他怎么传递的

21:53.540 --> 21:57.540
我属性传掉传到他身上去了然后他再把属性传到这了看没

21:58.660 --> 22:03.700
这样子一层一层传递传递过去了啊就属性了也可以非常轻松的给他传递过去

22:04.980 --> 22:07.060
好咱们再举个例子啊比方说

22:07.940 --> 22:12.980
有些组件呢他有这么一个特点啊比方说这个还是这两个组件吗a和b这两个组件

22:13.780 --> 22:19.700
咱们网页里边呢可能有些组件呢他要根据情况才能决定他显不显示比方说啊

22:21.460 --> 22:25.860
很多组件呢他依赖有要登录如果你登录了ok我给你显示

22:26.420 --> 22:27.460
我给你显示这个组件

22:28.100 --> 22:33.540
如果你没有登录了我就不不不做任何显示了啊很多组件可能有这么一种需求

22:34.260 --> 22:40.420
那么这种需求呢我如果我们把他功能写到组件里边就很麻烦因为我每次要判断啊衣服

22:40.740 --> 22:48.580
当前的probs里边啊是不是ease no gain啊是不是登录了如果登录了过后呢我给他返回这个啊然后呢我再返回一个

22:49.460 --> 22:49.620
啊

22:50.260 --> 22:52.820
对吧没有动作就啥都不显示嘛对不对啥都不显示

22:53.700 --> 22:58.740
好那么面对这样的情况他必是不是也要做同样的处理对吧假设很多组件都要做这样的处理

22:58.980 --> 23:02.580
那么这样的情况下呢我们是不是可以利用高阶组件来完成这个东西

23:03.140 --> 23:08.100
啊好这里呢我们再写个高阶组件啊waze啊比方说permission

23:08.820 --> 23:13.300
还有带全线的啊带全线应该是waze no gain吧啊waze no gain

23:15.700 --> 23:21.940
表示是朋友登录啊我们这里又返回一个高阶组件啊default啊什么方形

23:22.980 --> 23:24.020
啊waze

23:25.140 --> 23:29.380
login啊login好给我一个组件啊给我一个组件

23:29.780 --> 23:34.180
然后呢我干嘛呢我现在接下来的做法就是啊

23:36.180 --> 23:46.180
返回与他一个组件啊同样用类组件嘛啊同样用类组件啊或者是用函数组件其实都无所谓啊都无所谓那就用函数组件嘛那就用函数组件

23:46.660 --> 23:54.260
啊方形啊返回一个组件啊叫做login啊login不是log了啊两个单词有点像啊login表示登录啊登录

23:54.980 --> 23:58.340
withlogin viper啊比方说返回这么一个组件

23:59.060 --> 24:11.220
他给我一些属性啊然后我这里干嘛呢我这里判断一下啊如果属性里边包含了什么意思login啊意思login包含了当然你还可以再给他属性加上啊加上一个验证对吧

24:11.780 --> 24:20.500
给他加上一个验证啊login viper给他加上什么什么default props对吧或者是proper types啊proper types

24:20.660 --> 24:23.060
这都可以玩对不对都可以玩

24:23.780 --> 24:30.580
好如果他一时登一时login登录了如果他登录了返回什么呢就返回这个组件啊就返回这个组件

24:31.860 --> 24:34.180
好这里呢把属性给他传过去啊

24:35.700 --> 24:36.900
property属性给他传过去

24:38.820 --> 24:40.580
没问题吧嗯 没错

24:42.580 --> 24:48.100
呃react 说什么呢react 哦react 没道路啊

24:49.060 --> 24:57.460
input react 啊如果他没有登录的话就返回了哦你看我们用高階组件来完成那么这些主线是不是完全可以不用些了

24:57.780 --> 25:05.140
这些主线就就做到自己的事情就完成了剩下的事情交给高階高階主线这些主线呢他的压力就很小了就没有那些乱七八糟的

25:05.220 --> 25:06.260
所事产生了

25:07.060 --> 25:12.740
好今天我们再看这里啊那么我们用的时候呢现在比方说啊我们再倒入这个啊 import with

25:13.540 --> 25:17.780
login啊这个该读login还是login啊login好像是

25:18.580 --> 25:21.780
withlogin好那么这里呢我们就使用withlogin

25:23.700 --> 25:25.380
啊withlogin你看一下

25:26.420 --> 25:27.860
包穿啊包穿

25:29.380 --> 25:36.420
你看现在没有显示因为为什么没有显示啊你看login wipe有了啊有了但是没有显示为什么没有显示因为他现在没登录

25:36.820 --> 25:41.460
好那么现在我把他一直login传给他啊传给他你看主线功能是不是增强了

25:42.500 --> 25:43.780
啊或者就直接把它

25:44.500 --> 25:48.260
这样子写啊一次login登录了啊登录了保存你看一下

25:49.140 --> 25:52.820
是不是可以显示出来了对吧他就可以显示出来了看到没啊

25:54.820 --> 25:56.340
你看一些情绪这么弄结构了

25:56.820 --> 25:57.300
看没

25:58.420 --> 25:59.380
好而且呢

26:00.100 --> 26:04.980
这高階主件的还可以组合你看着啊非常非常有意思啊贼又意思

26:05.460 --> 26:10.900
啊我们这里换个名字吧啊换个名字f a f2 a comp

26:11.860 --> 26:14.260
啊这里换个名字b comp

26:15.060 --> 26:16.660
啊你看着啊net

26:18.260 --> 26:23.300
neta呢他先应用了一个就是先开包装的一个高階主件

26:23.780 --> 26:25.620
哎他要他要登录才能显示

26:25.940 --> 26:29.220
然后呢我们还希望哎里边呢还有一个功能就是日子记录

26:29.460 --> 26:31.540
所以我们再包装一层重新给大家复制

26:31.940 --> 26:33.140
再来一个withlog

26:34.180 --> 26:37.220
啊把这个a comp又传进去对吧

26:37.700 --> 26:41.140
先包装一层再包装一层对吧是不是可以组合

26:41.700 --> 26:47.780
现在是功能是不是增强了两次一次呢是你看是不是横切横切点关注什么叫横切点关注

26:48.020 --> 26:49.460
就把功能横向划分

26:49.940 --> 26:54.980
一块就是个功能点把功能点抽离出去登录抽离出去日子记录抽离出去

26:55.220 --> 26:59.140
然后呢我们可以通过这样的来重复的包装给他加上这两个功能

26:59.460 --> 27:01.220
那b也是一样啊

27:02.820 --> 27:06.420
那是太爽了这个东西啊我都无法用语言来形容这个

27:06.900 --> 27:08.980
这个有多爽啊这个有多灵活了这个

27:09.540 --> 27:13.700
啊保存你看一下那么现在呢他既有日子记录看到没既有日子记录

27:13.940 --> 27:18.820
并且呢又有什么登录啊登录控制你看外面包了一个loglog啊

27:18.820 --> 27:22.660
因为最后一次教的是log嘛对吧外面都包了一个log里边来包了一个logging

27:22.900 --> 27:28.260
看到没对吧他包了两层我们用起来非常非常方便甚至我们可以这样用啊这样子用

27:30.500 --> 27:34.100
啊然后呢这里写上什么呢就是withlog

27:35.060 --> 27:40.260
啊哎你看没有这样子来传啊那么这里也是一样啊啊这里

27:41.140 --> 27:44.340
啊这样子就是包装的顺序稍微变一下这个顺序其实都无所谓的

27:45.300 --> 27:48.420
啊你看包装两次对不对包装两次

27:49.620 --> 27:54.340
啊我们甚至还可以专门来写个函数就是传递这些高阶主见吧高阶主见传进去

27:54.500 --> 27:58.660
传进去我来给你完成包装啊也可以啊也可以

27:59.220 --> 28:00.980
你看现在仍然是一样的效果

28:01.940 --> 28:02.420
对不对

28:03.620 --> 28:06.260
好这是这个小技巧啊这个小技巧

28:07.540 --> 28:13.380
啊其实高阶主见里面还可以很多玩玩法比方说这里呢这是个函数函数是不是还可以写额外的参数

28:14.020 --> 28:18.420
对吧是不是还可以写额外的参数那么这些额外的参数呢我们也可能会啊

28:18.980 --> 28:26.580
发挥作用啊也可能会发挥发挥作用啊这里呢我实在想不到一些好的例子啊想想想想不到一些好的例子啊比方说吧

28:27.380 --> 28:34.660
就比方说啊我们下来一个啊下来一个啊这里呢传一个制服串啊传一个制服串啊str

28:35.220 --> 28:41.780
好我们到时候写宣传的时候呢不但要宣传这个东西还要把这个制服串也宣传出来啊假设嘛啊假设

28:42.340 --> 28:46.260
啊有这么一个有这么一个需求啊这里边呢我们这样子写啊

28:47.540 --> 28:50.260
不但要宣传这个东西还要把制服串宣传出来

28:51.060 --> 28:54.500
啊再写个a7嘛啊把这个制服串宣传出来

28:56.900 --> 29:02.340
就这样子可以就是有很多的玩法他这里可以还可以传额外的参数对吧使用高阶主见的时候

29:02.980 --> 29:07.300
好保存啊现在没有宣传出来对吧因为宣传现在这个制服串没有传递是undefend

29:07.700 --> 29:13.700
那么我们可以传递啊可以传递那么在withnog里边是不是可以传递对吧是可以传递的啊abc

29:14.580 --> 29:15.700
啊这个是bcd

29:17.140 --> 29:18.340
包村啊你看一下

29:19.540 --> 29:20.980
bcd是不是也加上了对吧

29:21.700 --> 29:25.860
这个a和b主见里边自己没有的功能呢可以通过高阶主见呢给他增强

29:26.820 --> 29:33.060
啊就高阶主见啊那么当我们使用高阶主见的时候呢有一些细节啊大家要注意一下啊不要去

29:33.620 --> 29:36.180
不要去踩坑就是注意的注意点

29:37.380 --> 29:40.660
啊第一个呢就是不要在啊不要在

29:41.540 --> 29:43.700
render中啊在render中

29:44.340 --> 29:52.180
使用高阶主见啊千万不要在render的时候不要在函数里边啊如果是函数主见的话也不要也不要在函数主见里边使用高阶主见啊

29:52.900 --> 29:54.740
最好是就一开始给他订一号

29:55.300 --> 29:57.700
像我刚才这样子啊一开始就给他订一号

29:58.580 --> 30:04.340
啊为什么不要在render里边使用高阶主见呢是这样子啊就是说如果你在render里边在这里写了啊

30:05.220 --> 30:11.300
哎我这我这里是用函数主见啊那比方说吧它是个内主见啊比方说它是个内主见

30:11.460 --> 30:11.860
class

30:12.660 --> 30:13.220
extends

30:13.540 --> 30:14.260
reacts

30:14.500 --> 30:15.140
component

30:15.380 --> 30:18.660
啊比方说它是个内主见然后呢这里把它放到一个render里边

30:22.100 --> 30:27.540
是这样子的啊那如果呢如果你把这两句话写到这呢

30:28.100 --> 30:30.020
写到这呢它会有个问题啊就是说

30:30.420 --> 30:35.620
嗯如果你这两句话写到外面的话是没问题的因为我们知道啊内主见了它是

30:36.260 --> 30:41.620
它会把对对相来重用就内里边的对象重用我们之前讲生命周期的时候也说过对吧

30:41.860 --> 30:48.420
一个内主见的对对相呢它会反复的重用如果你在这里面这样子写了过后是不是每一次得到一个新的内

30:48.820 --> 30:50.820
对不对每次得到是不是一个新的内

30:50.900 --> 30:56.260
尽管这个内呢跟以前完全一样它反回的是一个新的内啊每次反回了一个新的

30:56.660 --> 30:59.140
那于是呢它这里就必须要重新创建对象

30:59.700 --> 31:02.980
那么就会导致之前的主见被销毁啊不断的去销毁主见

31:03.700 --> 31:06.260
啊咱们来看一下吧啊如果你写到这的话你会发现

31:06.820 --> 31:07.620
哎等一下啊

31:08.020 --> 31:12.020
嗯啊主要是我现在没有现在没有切换啊没有切换

31:12.580 --> 31:17.140
嗯比方说吧我们下面一个按钮啊一个按钮这个按钮什么都不做啊点击

31:18.580 --> 31:19.140
unclick

31:22.260 --> 31:24.180
呃就是this set state

31:24.740 --> 31:29.220
啊主要是为了刷新啊主要是为了重新宣的搞啥重新宣的啊保存啊

31:29.700 --> 31:30.500
咱们来看一下啊

31:30.820 --> 31:33.700
点下面的按钮点击你看是不是之前的主见被销毁了

31:34.020 --> 31:35.700
又有新的主见被创建了对吧

31:35.940 --> 31:37.460
这样子呢会非常浪费效率

31:37.460 --> 31:41.540
这是一个另外一个呢他由于重新创建的对象他一切的状态是不是丢失了

31:41.780 --> 31:44.420
那些内主见的状态是不是全部丢失掉了之前的状态

31:44.820 --> 31:48.100
啊他全部又重新开始了啊状态状态失去了

31:48.340 --> 31:51.380
所以说呢不要在render里面使用啊你在外面使用就没问题

31:51.860 --> 31:54.260
由于他使用的是同一个内啊由于他

31:54.820 --> 31:59.380
这里就得到他的内的对吧内主见嘛得到他的内的那么由于他使用的是同一个内

31:59.620 --> 32:02.900
因此呢他不会导致这个问题他会反复的重用这个内的对象

32:03.380 --> 32:08.340
啊你看一下点击你看点击多少时还是啊没有新的主见创建也没有销毁

32:08.820 --> 32:14.180
对吧这是符合逻辑的这是第一个啊第一个大家要使用的时候要注意的一个点

32:14.900 --> 32:18.420
嗯第二个呢就是不要在高阶主见内部

32:19.380 --> 32:19.620
在

32:20.980 --> 32:25.940
高阶主见内部更改啊传入的主见

32:26.580 --> 32:31.380
就是有些同学呢可能他因为介石里面稍稍多实在是太多了啊

32:31.620 --> 32:38.100
他可能在高阶主见里面去这样玩你看这里不是加生命周期吗我干嘛要用这种方式加了你看他会他会这样子来加

32:38.580 --> 32:38.900
com

32:39.380 --> 32:43.140
第二什么啊prototype对吧他不就不就是个对象吗

32:44.260 --> 32:48.820
type啊他的原型啊不是就是个不就是个函数吗他的原型里面不是有这个

32:49.140 --> 32:55.540
什么component did mount对吧我在这里给他重新写这个函数啊重新给这个函数复制

32:55.940 --> 33:00.260
千万不要这样做这样做不好的点在哪呢你去改了这个

33:00.740 --> 33:04.740
你去改动了这个啊主见了你不要去改动他呀

33:04.980 --> 33:08.340
因为为什么呢因为你这样你改动这个主见压力特别大

33:08.820 --> 33:09.780
为什么压力特别大

33:10.740 --> 33:17.140
第一个问题他有可能根本你不是一个很内主见他可以有可能是函数主见你写这个东西没用那假的他就是一个内主见嘛

33:17.860 --> 33:22.820
那他压力为什么大呢他始终要考虑将来会有哪些高阶主见来拥我

33:23.220 --> 33:28.260
那拥我的时候他会更改哪些东西他就不敢写了这个东西你知道吗啊他就不敢

33:29.700 --> 33:34.180
component did mount他就不敢写这个东西了因为写了过后他有可能会被覆改掉

33:34.500 --> 33:39.940
他就会非常非常小心那么这样子以来这个主见写书写起来的时候压力还是很大

33:40.500 --> 33:45.460
他要考虑到很多情况他要考虑到别人将来有会有什么样的高阶主见来用他

33:46.020 --> 33:49.700
实际上他根本就不应该去考虑这些事情他就做自己的事情就行了

33:50.020 --> 33:54.740
那别人要怎么用他随便他随便你管你怎么用我啊我就把我自己的事情干好

33:55.620 --> 33:58.500
我们之所以使用高阶主见就是要做横切点

33:59.220 --> 34:04.980
分离把这关注点要把分离开那你现在还是要去考虑这些问题只是你没有写这个呆嘛

34:05.460 --> 34:09.380
那你这个地方写这个主见了还是非常非常痛苦

34:10.020 --> 34:13.860
所以说不要去改动在高阶主见里面就不要去改动这个主见任何相关的东西

34:14.100 --> 34:17.940
你要做一些事情你自己去封装一个主见来做啊不要去改动他内部的东西

34:18.740 --> 34:20.020
好都是这两个点啊

34:20.500 --> 34:23.060
把这两个点记住啊其他的也没啥了啊

34:23.220 --> 34:28.820
其实高阶主见里面还有一个东西就是关于那个瑞福传递瑞福传递呢由于我们现在还没有学习瑞福

34:28.820 --> 34:30.500
所以说现在讲不了啊后面讲了再说

34:31.940 --> 34:37.620
行了啊这是高高阶主见那么下节课呢咱们还是按照惯例啊来做出这么一个demo啊

