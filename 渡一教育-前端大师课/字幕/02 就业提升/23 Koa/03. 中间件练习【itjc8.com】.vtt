WEBVTT

00:00.430 --> 00:05.250
这里我想来想去还是做一个最实用的中键键

00:05.250 --> 00:07.550
就是静态资源服务器的中键键

00:07.550 --> 00:11.470
因为它中键键要做的事情确实要太多了

00:11.470 --> 00:12.670
包括API这些东西

00:12.670 --> 00:15.910
但是我们绝大部分情况下都是用线程的

00:15.910 --> 00:18.550
但是我们还是要去熟悉一下

00:18.550 --> 00:20.510
ka怎么去自己写中键键

00:20.510 --> 00:22.750
来通过写中键键来说它的原理

00:22.750 --> 00:26.070
我们这里比方说有个public目录

00:26.070 --> 00:28.910
public目录有两个文件夹CSSGS

00:28.910 --> 00:30.470
我们这里就随便写一些吧

00:30.470 --> 00:32.750
比方public目录里边那么新建个文件

00:32.750 --> 00:33.870
index掉 atml

00:35.390 --> 00:37.910
然后我们这里就写上一个Hello

00:39.230 --> 00:40.910
然后我们在这里加上一个CSS

00:41.670 --> 00:43.630
总之呢你们懂得都不解释了吧

00:43.630 --> 00:44.830
这个东西不用解释了

00:45.990 --> 00:47.030
这里我写上个包底

00:47.870 --> 00:48.430
background

00:49.430 --> 00:50.190
黑色

00:50.190 --> 00:51.150
color

00:51.150 --> 00:51.510
白色

00:53.790 --> 00:55.750
页面一面上去引用这个CSS

00:57.780 --> 00:58.780
CSS引用它

00:59.580 --> 01:00.780
GS也加一个

01:01.340 --> 01:02.340
index的GS

01:03.100 --> 01:03.740
就输出吧

01:05.020 --> 01:05.380
随便吧

01:06.660 --> 01:08.540
这都是运行在客户端上的

01:08.540 --> 01:10.140
我们现在要把这个目录

01:10.140 --> 01:12.300
把它变成一个静态资源的目录

01:12.300 --> 01:15.220
希望我们访问服务器的时候

01:16.020 --> 01:17.460
它能够从这个目录区匹配

01:17.460 --> 01:18.380
匹配到文件过后

01:18.380 --> 01:20.660
就给我把文件内容响应给我

01:20.660 --> 01:22.500
我们也想写这么一个中键

01:22.500 --> 01:24.540
现在的ka已经创建好了

01:24.540 --> 01:25.620
应用已经在这了

01:25.620 --> 01:27.780
然后也接听了端口9527

01:27.820 --> 01:28.700
现在我们把它启动起来

01:31.060 --> 01:32.900
来边看效果边写

01:34.260 --> 01:34.660
start

01:36.140 --> 01:37.540
服务器启动起来了

01:37.540 --> 01:38.500
然后让我们去访问

01:38.500 --> 01:40.540
localhost9527

01:41.980 --> 01:42.940
现在肯定是找不到

01:42.940 --> 01:43.340
对不对

01:43.340 --> 01:44.660
没有任何处理

01:44.660 --> 01:46.100
现在我们去写这么一个中间键

01:48.180 --> 01:49.180
比如说给它取个名字

01:49.180 --> 01:50.340
叫做ka static

01:51.340 --> 01:52.860
一个静态资源的中间键

01:52.860 --> 01:54.060
那么既然是中间键

01:54.900 --> 01:56.380
那我们导出什么呢

01:56.460 --> 01:58.020
我们可以导应该按理说

01:58.020 --> 01:59.740
是不是应该导出一个函数

01:59.740 --> 02:00.460
对不对

02:00.460 --> 02:01.740
setx next

02:01.740 --> 02:03.300
是不是应该导出这么一个函数

02:03.300 --> 02:03.940
那么

02:03.940 --> 02:05.500
但是如果说你这样导出的话

02:05.500 --> 02:06.580
那么我们怎么去使用的

02:06.580 --> 02:07.500
你想一想

02:07.500 --> 02:09.780
看一下我们该怎么去设计这个东西

02:09.780 --> 02:12.380
这能不能导入ka static

02:12.380 --> 02:12.780
最快

02:14.500 --> 02:15.620
ka static

02:15.620 --> 02:16.540
好我们这里使用

02:16.540 --> 02:17.820
app use

02:17.820 --> 02:18.660
那么我们怎么使用

02:18.660 --> 02:20.180
是不是就直接把个放进来就完了

02:20.180 --> 02:21.180
因为它本身是一个函数

02:21.180 --> 02:21.940
对不对

02:21.940 --> 02:22.820
但是这样子一来了

02:22.820 --> 02:23.780
就会出现一个问题

02:23.780 --> 02:24.500
什么问题呢

02:24.540 --> 02:26.660
我没有办法去指定它的目录

02:27.460 --> 02:29.500
它怎么知道一定是public目录呢

02:29.500 --> 02:30.940
万一是static目录呢

02:30.940 --> 02:32.300
万一是别的什么目录呢

02:32.300 --> 02:32.900
对不对

02:32.900 --> 02:34.100
是没有办法指定

02:34.100 --> 02:34.780
那你想一想

02:34.780 --> 02:36.180
我们以前是怎么做的

02:36.180 --> 02:37.900
以前是不是这是一个函数啊

02:37.900 --> 02:38.540
这个函数

02:38.540 --> 02:39.220
第二个用过后

02:39.220 --> 02:41.820
在这里去设置什么路径

02:41.820 --> 02:43.660
比方说我们把public目录给它

02:43.660 --> 02:44.380
那么它就知道了

02:44.380 --> 02:46.660
我要把它映射到这个public目录

02:46.660 --> 02:47.100
对吧

02:47.100 --> 02:48.020
所以说这里呢

02:48.020 --> 02:49.980
最好的做法是写成一个什么

02:49.980 --> 02:51.820
写成一个高阶函数

02:51.820 --> 02:53.100
就你给我一个root

02:53.100 --> 02:54.380
给我一个根目录

02:54.420 --> 02:55.100
那么这个根目录

02:55.100 --> 02:56.420
是我要做映射的根目录

02:56.420 --> 02:57.900
我会给你返回一个什么呢

02:57.900 --> 02:58.860
返回一个

02:59.860 --> 03:00.820
中间键

03:01.620 --> 03:02.060
对吧

03:02.060 --> 03:02.860
是不是返回一个中间键

03:02.860 --> 03:04.300
写成这么一个高阶函数

03:04.300 --> 03:04.500
好

03:04.500 --> 03:05.060
那么这边呢

03:05.060 --> 03:05.780
我们怎么用

03:05.780 --> 03:06.500
就这样子

03:06.500 --> 03:07.340
我给它一个root

03:07.340 --> 03:08.020
root是什么呢

03:08.020 --> 03:09.180
我们可以给它决定度计

03:10.180 --> 03:10.780
就是

03:11.900 --> 03:12.740
pass

03:12.740 --> 03:13.980
require

03:13.980 --> 03:15.020
pass

03:15.020 --> 03:15.900
我们把这个什么

03:15.900 --> 03:17.380
把这个pass

03:17.380 --> 03:18.380
result

03:18.380 --> 03:19.740
当前目录下面的

03:19.740 --> 03:21.420
和public这个文件夹

03:21.420 --> 03:21.820
对吧

03:21.820 --> 03:22.500
把这个目录给它

03:23.620 --> 03:24.260
没问题吧

03:24.300 --> 03:25.980
这是我们以前就是这样用的

03:25.980 --> 03:26.340
对不对

03:26.340 --> 03:26.580
对吧

03:26.580 --> 03:27.380
express

03:27.380 --> 03:28.140
standic

03:28.140 --> 03:28.380
对吧

03:28.380 --> 03:29.460
是不是就是这样用的

03:29.460 --> 03:29.620
好了

03:29.620 --> 03:31.260
那么现在我们关键是在这里怎么写

03:32.460 --> 03:33.380
怎么写呢

03:33.380 --> 03:36.300
无非就是你请求什么样的路径

03:36.300 --> 03:36.500
诶

03:36.500 --> 03:38.140
我给你印设到

03:38.140 --> 03:42.300
我把这个文件的文件的文件的内容给你

03:42.300 --> 03:42.740
对吧

03:42.740 --> 03:44.620
那么要得到文件内容

03:44.620 --> 03:44.860
对吧

03:44.860 --> 03:47.340
我们这里无非就是要得到文件内容吗

03:47.340 --> 03:48.860
要得到文件内容

03:48.860 --> 03:51.260
是不是就一定要得到文件的路径

03:51.260 --> 03:51.460
对吧

03:51.460 --> 03:52.620
文件的绝对路径

03:52.620 --> 03:53.300
因为我们知道

03:53.340 --> 03:54.580
我们现在有一个什么模块呢

03:54.580 --> 03:56.140
fs模块

03:56.140 --> 03:58.660
这个模块里面是不是可以拿文件的内容

03:58.660 --> 03:59.700
是不是可以读

03:59.700 --> 04:00.500
但是呢

04:00.500 --> 04:02.100
我们必须要知道文件名

04:02.100 --> 04:03.620
也就是文件的路径在哪

04:03.620 --> 04:04.380
我们才能读

04:04.380 --> 04:05.980
所以说我这里可以写个函数

04:05.980 --> 04:08.140
叫做getfile内

04:08.140 --> 04:09.540
这个函数用来干嘛的呢

04:09.540 --> 04:12.580
用来得到文件的路径

04:12.580 --> 04:15.300
用于获取文件路径

04:15.300 --> 04:16.900
那么获取文件路径的时候

04:16.900 --> 04:18.180
我们需要知道什么信息了

04:19.900 --> 04:20.860
那里看啊

04:20.860 --> 04:22.380
我如果说请求这个地址

04:22.420 --> 04:23.460
那么它的路径应该是什么

04:23.460 --> 04:24.220
就是一个鞋杠

04:24.220 --> 04:24.860
对吧

04:24.860 --> 04:26.420
那如果说我请求这样的地址

04:26.420 --> 04:27.460
那么它的路径就是鞋杠

04:27.460 --> 04:28.300
哎

04:28.300 --> 04:29.780
那如果说我请求这样的地址

04:29.780 --> 04:30.940
它的路径就是鞋杠

04:30.940 --> 04:32.580
应该是的ATML

04:32.580 --> 04:34.500
那么也就是说我要知道文件的路径

04:34.500 --> 04:36.220
是不是要把这个路径告诉我

04:36.220 --> 04:36.620
对吧

04:36.620 --> 04:37.220
那么这个东西呢

04:37.220 --> 04:40.060
我们可以把它命名为urlpass

04:40.060 --> 04:42.300
就是我们url地址里面的pass

04:42.300 --> 04:43.900
是不是要把这个东西告诉我

04:43.900 --> 04:44.100
好

04:44.100 --> 04:45.740
告诉我这个东西过后

04:45.740 --> 04:46.460
还有什么呢

04:46.460 --> 04:47.380
是不是还要把这个

04:47.380 --> 04:49.540
还要把你的音色的目录名

04:49.540 --> 04:51.580
就是我们要预设到这个public目录下面

04:51.620 --> 04:53.060
要把这个目录名要告诉我

04:53.060 --> 04:53.300
对吧

04:53.300 --> 04:54.820
也是把入录告诉我

04:54.820 --> 04:55.060
好

04:55.060 --> 04:55.820
比方说啊

04:55.820 --> 04:56.460
这个函数

04:56.460 --> 04:57.340
我们来看一下

04:57.340 --> 04:58.060
如果说

05:00.060 --> 05:00.300
哎

05:00.300 --> 05:01.340
我们如果说

05:01.340 --> 05:02.660
把这个折叠一下啊

05:04.540 --> 05:05.420
再折叠一下

05:06.420 --> 05:07.820
我们的urlpass

05:08.820 --> 05:09.580
是什么路径呢

05:09.580 --> 05:11.700
比方说我们路径是这样子的

05:11.700 --> 05:13.180
发现到这个地方吧

05:13.180 --> 05:14.260
看得好看一点

05:14.260 --> 05:15.500
urlpass

05:15.500 --> 05:16.580
如果说它的路径呢

05:16.580 --> 05:18.860
是比方说鞋杠

05:18.860 --> 05:20.180
鞋杠的格式

05:20.220 --> 05:22.060
index的atm

05:22.060 --> 05:23.020
那么我们的入程呢

05:23.020 --> 05:23.860
给我的路径呢

05:23.860 --> 05:24.700
是啊

05:24.700 --> 05:25.700
比方说鞋杠

05:25.700 --> 05:26.620
User是啊

05:26.620 --> 05:28.020
我的电脑啊

05:28.020 --> 05:28.860
就是决定路径嘛

05:28.860 --> 05:29.380
对不对

05:29.380 --> 05:31.700
某个盘开始一直到什么什么什么

05:31.700 --> 05:32.260
然后呢

05:32.260 --> 05:33.780
public

05:33.780 --> 05:35.780
那么我最重要给它的路径是什么呢

05:35.780 --> 05:36.980
返回的东西是什么呢

05:36.980 --> 05:38.460
就应该是

05:38.460 --> 05:39.260
说应该是这个

05:41.220 --> 05:41.900
是吧

05:41.900 --> 05:43.460
我们叫返回这个文件的决定

05:43.460 --> 05:45.220
在服务器上的决定路径

05:45.220 --> 05:45.780
没了意思吧

05:46.940 --> 05:47.060
好

05:47.060 --> 05:49.100
那么现在我们基于这么一个逻辑来写

05:49.140 --> 05:50.260
来写这个代码

05:50.260 --> 05:51.900
好接下来我们来看怎么来写呢

05:51.900 --> 05:52.980
这是我们的root

05:52.980 --> 05:53.740
这是我们的pass

05:53.740 --> 05:56.180
我们是不是把这两个连接下去玩一稍了

05:56.180 --> 05:57.300
所以连接下去玩一稍了

05:58.620 --> 05:58.900
对不对

05:58.900 --> 05:59.660
那么怎么来连接呢

05:59.660 --> 06:00.860
我们是不是可以用这个模块

06:00.860 --> 06:01.460
pass模块

06:02.780 --> 06:04.580
require pass模块

06:05.740 --> 06:05.900
好

06:05.900 --> 06:07.020
那么我们这里怎么做

06:07.020 --> 06:08.220
是不是用pass

06:08.220 --> 06:09.420
resolve

06:09.420 --> 06:10.980
把这个root

06:10.980 --> 06:13.660
和什么Urlpass来进行连接

06:13.660 --> 06:14.220
对不对

06:14.220 --> 06:15.460
不然连接起来

06:15.460 --> 06:16.820
好连接起来过后呢

06:16.820 --> 06:17.700
得到一个路径

06:17.740 --> 06:19.020
我们就是file name

06:19.020 --> 06:19.420
对吧

06:19.420 --> 06:20.820
是不是得到一个文件路径

06:20.820 --> 06:22.300
我们来输出一下这个文件路径

06:22.300 --> 06:22.860
看一下吧

06:24.820 --> 06:25.780
接下来我们在这边呢

06:25.780 --> 06:26.900
我们就去调问这个还说

06:27.900 --> 06:29.620
来得到文件文件的名字

06:29.620 --> 06:31.180
因为我们只有得到了文件名字

06:31.180 --> 06:32.900
我们才能得到文件的内容

06:32.900 --> 06:33.980
得到文件名字

06:33.980 --> 06:35.380
把这个Urlpass传进去

06:35.380 --> 06:36.220
pass呢是哪呢

06:36.220 --> 06:36.740
来自于哪呢

06:36.740 --> 06:38.860
是不是就是ctx的pass

06:38.860 --> 06:39.620
是不是在这

06:39.620 --> 06:40.660
对吧

06:40.660 --> 06:42.860
我们的根路根部路呢

06:42.860 --> 06:43.900
root

06:43.900 --> 06:44.140
好

06:44.140 --> 06:45.380
我们来看一下file name

06:46.380 --> 06:48.620
当然了

06:48.620 --> 06:49.100
我这里呢

06:49.100 --> 06:49.980
就直接把这个file name

06:49.980 --> 06:50.660
返回吧

06:50.660 --> 06:51.380
直接返回

06:51.380 --> 06:52.700
这个file name

06:52.700 --> 06:52.940
好

06:52.940 --> 06:53.340
这边呢

06:53.340 --> 06:54.300
我们输出这个file name

06:55.660 --> 06:55.940
好

06:55.940 --> 06:56.380
保存

06:56.380 --> 06:58.100
接下来我们来看一下

06:58.100 --> 06:59.300
清空

06:59.300 --> 07:00.700
现在我们刷新一下

07:00.700 --> 07:01.740
刷新

07:01.740 --> 07:02.820
那么这边输出啥

07:02.820 --> 07:03.620
输出一个写稿

07:05.260 --> 07:05.460
好

07:05.460 --> 07:05.780
然后呢

07:05.780 --> 07:07.140
如果说我们写这个

07:08.340 --> 07:09.260
输出了啥

07:09.260 --> 07:10.660
输出的是这个东西

07:10.660 --> 07:11.700
这就起得怪了

07:11.700 --> 07:13.300
跟我们这里分析的是不是

07:13.300 --> 07:14.860
跟我们希望输出的是这个

07:14.860 --> 07:15.100
对吧

07:15.180 --> 07:16.660
结果给我输出的是这个

07:16.660 --> 07:17.660
那么是不是出了问题

07:17.660 --> 07:19.260
那么我们把这两个打印出来看一下

07:19.260 --> 07:20.940
这两个打印出来看是不是正确的

07:20.940 --> 07:21.100
好

07:21.100 --> 07:22.380
我们这里打印一下

07:22.380 --> 07:24.420
urlpass和root

07:24.420 --> 07:25.540
打印一下看是不是正确的

07:26.780 --> 07:26.940
好

07:26.940 --> 07:27.260
刷新

07:28.340 --> 07:30.300
你看这两个是不是正确的

07:30.300 --> 07:30.620
对吧

07:30.620 --> 07:32.420
这是root根部路

07:32.420 --> 07:34.340
这是我们的请求的路径

07:34.340 --> 07:36.300
那么他得到为什么是这个呢

07:36.300 --> 07:37.940
就是因为这个东西

07:37.940 --> 07:40.220
去用resolve去连接他的时候

07:40.220 --> 07:42.420
因为他前面有一个写稿

07:42.420 --> 07:43.580
在我们的地址里边

07:43.620 --> 07:45.020
如果说直接一个写稿开头

07:45.020 --> 07:46.020
表示决定路径

07:46.020 --> 07:47.460
那么一定是根部路开始

07:47.460 --> 07:49.460
那么他就忽略了前面这个路径了

07:49.460 --> 07:50.380
明白我的意思吧

07:50.380 --> 07:52.580
他第二个就是拼接了第二个片段

07:52.580 --> 07:53.580
就这个片段里边

07:53.580 --> 07:55.300
他第一个位置是写稿

07:55.300 --> 07:56.460
那么他表示决定路径

07:56.460 --> 07:59.020
就是从根盘幅开始

07:59.020 --> 08:00.460
因为我是麦克系统

08:00.460 --> 08:02.460
麦克系统没有盘幅

08:02.460 --> 08:04.100
所以说我们这里就是根部路开始

08:04.100 --> 08:05.700
最最基础的目的开始

08:05.700 --> 08:07.580
然后去寻找index设调一天庙

08:07.580 --> 08:09.300
所以他就把前面那个东西忽略了

08:09.300 --> 08:11.300
他就没有以这个目的为基础

08:11.300 --> 08:12.660
所以说我们现在要做的事情

08:12.660 --> 08:14.140
我会就是去掉这个写稿

08:14.140 --> 08:15.180
好那么怎么去掉呢

08:15.180 --> 08:17.540
我们是不是在这里可以写上一个

08:18.820 --> 08:20.620
叫subpass

08:22.180 --> 08:24.740
去掉这个uipass前面的写稿

08:24.740 --> 08:25.620
非常简单

08:25.620 --> 08:28.220
从这个字幕上的第一个位置开始去

08:28.220 --> 08:29.580
到第二个位置开始去

08:29.580 --> 08:30.700
是不是就取出来了

08:30.700 --> 08:32.020
没有写稿的一部分

08:32.020 --> 08:34.340
我们把没有写稿的一部分加上放到这

08:34.340 --> 08:35.740
那就没问题了

08:35.740 --> 08:37.060
那我们现在再说说一下

08:37.060 --> 08:38.300
subpass

08:38.300 --> 08:39.540
root

08:39.540 --> 08:41.660
那么我们看一下这或者反过来说出吧

08:41.700 --> 08:42.660
可能清楚点

08:42.660 --> 08:43.260
root

08:43.260 --> 08:44.140
subpass

08:44.140 --> 08:45.140
那么这两个拼接起来

08:45.140 --> 08:46.860
就是我们想象的结果了

08:46.860 --> 08:47.140
好

08:47.140 --> 08:48.860
先来再看

08:48.860 --> 08:50.300
刷新

08:50.300 --> 08:50.540
好

08:50.540 --> 08:51.860
哪里看

08:51.860 --> 08:53.340
这是

08:54.340 --> 08:55.900
我们这是这第一部分

08:55.900 --> 08:57.420
你看这第一部分的root

08:57.420 --> 08:58.460
这是什么

08:58.460 --> 08:59.220
subpass

08:59.220 --> 08:59.460
对吧

08:59.460 --> 09:00.460
这两个拼接起来

09:00.460 --> 09:01.540
就变成这个

09:01.540 --> 09:03.940
这就是我们想要的文件名

09:03.940 --> 09:04.700
对不对

09:04.700 --> 09:05.860
但是你要知道

09:05.860 --> 09:07.820
这个文件名呢

09:07.820 --> 09:09.820
它有可能是一个目录

09:09.820 --> 09:10.660
有可能存在

09:10.660 --> 09:11.420
有可能不存在

09:11.420 --> 09:13.300
而且还有可能是一个目录

09:13.300 --> 09:13.820
对不对

09:13.820 --> 09:15.740
它的情况有很多

09:15.740 --> 09:16.860
那么现在我们

09:16.860 --> 09:19.460
你看这里会有这么几种情况

09:19.460 --> 09:21.900
比方说它有可能是UILpass

09:21.900 --> 09:22.980
它有可能是不存

09:22.980 --> 09:25.340
它有可能是一个目录

09:25.340 --> 09:26.980
比方说就一个写稿

09:26.980 --> 09:29.020
然后root

09:29.020 --> 09:29.980
users

09:29.980 --> 09:31.580
比方说root没变

09:31.580 --> 09:31.900
对吧

09:31.900 --> 09:34.300
root没变我就不写了

09:34.300 --> 09:35.700
那么这种情况下呢

09:35.700 --> 09:37.580
我们现在得到了结果

09:37.580 --> 09:38.740
比方说像的那种情况

09:38.740 --> 09:39.100
就这里

09:39.100 --> 09:40.100
我不写

09:40.100 --> 09:41.220
一回说你看这里的

09:41.340 --> 09:42.740
我们这里得到的东西

09:42.740 --> 09:44.180
所以public这个目录了

09:44.180 --> 09:44.900
那这个东西

09:44.900 --> 09:46.220
你不能把目录给它

09:46.220 --> 09:46.620
对不对

09:46.620 --> 09:48.460
你不能给它一个目录

09:48.460 --> 09:49.820
你看这个pass是不空的

09:49.820 --> 09:51.220
什么pass是空的

09:51.220 --> 09:52.100
那么这个有可能

09:52.100 --> 09:53.340
它得到的是一个目录

09:53.340 --> 09:54.060
那么目录的话

09:54.060 --> 09:55.500
我们默认给它加上

09:55.500 --> 09:56.100
IN这个数量

09:56.100 --> 09:58.420
没听到没听到的意思吧

09:58.420 --> 09:59.700
那么这里目录的

09:59.700 --> 10:01.220
得到的结果还是这个

10:01.220 --> 10:02.180
所以说我们这里

10:02.180 --> 10:03.420
这是这种情况

10:03.420 --> 10:04.420
还有什么情况呢

10:04.420 --> 10:06.260
还有就是文件不存在

10:06.260 --> 10:07.420
你给我的不是目录

10:07.420 --> 10:08.300
是一个文件

10:08.300 --> 10:09.140
但是不存在

10:09.140 --> 10:10.660
我们把总结一下吧

10:10.700 --> 10:11.700
如果是目录

10:13.140 --> 10:14.100
是目录

10:15.460 --> 10:16.740
是目录的情况下

10:16.740 --> 10:17.340
就三种情况

10:17.860 --> 10:19.300
是目录了就是

10:19.940 --> 10:20.940
添加上

10:23.460 --> 10:24.620
添加上

10:25.420 --> 10:26.300
IN这个数量

10:26.300 --> 10:28.780
还没有重新查找

10:29.580 --> 10:29.860
对吧

10:29.860 --> 10:30.580
重新查找

10:31.060 --> 10:31.220
好

10:31.220 --> 10:32.420
那么是文件

10:32.420 --> 10:33.380
是文件就简单了

10:33.380 --> 10:33.660
对吧

10:33.660 --> 10:37.020
直接返回文件名

10:37.620 --> 10:39.020
还有什么情况呢

10:39.020 --> 10:39.620
不存在

10:40.180 --> 10:41.300
无论是目录也好

10:41.340 --> 10:42.100
反正是文件也好

10:42.100 --> 10:42.820
目录也不存在

10:42.820 --> 10:43.500
文件也不存在

10:43.500 --> 10:44.340
总之不存在

10:44.340 --> 10:45.460
不存在的话

10:45.460 --> 10:45.940
对吧

10:45.940 --> 10:46.860
都算是怎么办了

10:46.860 --> 10:47.500
返回了

10:47.500 --> 10:48.900
比方说我们这里有返回了

10:49.500 --> 10:50.540
是不这三种情况

10:50.980 --> 10:51.140
好

10:51.140 --> 10:51.940
那么如果说

10:51.940 --> 10:53.300
那么怎么来处理呢

10:53.980 --> 10:55.260
我要知道它到底是目录

10:55.260 --> 10:56.060
还是文件

10:56.660 --> 10:57.540
还是不存在

10:58.660 --> 10:59.660
我怎么来处理呢

11:00.540 --> 11:01.300
怎么来处理呢

11:01.300 --> 11:02.140
我就可以这样子

11:02.540 --> 11:04.540
比方说我这里再写个辅助函数

11:06.060 --> 11:07.940
这个函数就是得到文件的状态

11:07.940 --> 11:09.980
因为我们之前学过这个Fs模块

11:10.020 --> 11:11.620
里面是不是可以得到文件状态

11:11.620 --> 11:12.020
对不对

11:12.020 --> 11:12.660
getState

11:13.660 --> 11:15.100
或者我不用在学之前学

11:15.100 --> 11:16.180
还说就在这来吧

11:16.540 --> 11:17.700
我们直接用什么呢

11:17.700 --> 11:19.740
Fs里面一个promises

11:20.740 --> 11:21.180
State

11:21.780 --> 11:24.140
把这个文件路径传进去

11:24.140 --> 11:25.860
来得到这个文件路径的状态

11:25.860 --> 11:26.860
那么这是个异部的

11:26.860 --> 11:27.780
所以说我们要等待

11:27.780 --> 11:28.340
而位置

11:28.340 --> 11:29.700
那么这里自然而然

11:29.700 --> 11:31.300
也要把它变成sync

11:31.300 --> 11:31.940
那么同样的

11:31.940 --> 11:32.940
这样这里的自然而然

11:32.940 --> 11:33.780
要写而位置

11:33.780 --> 11:34.540
那么自然而然

11:34.540 --> 11:35.580
这里要写sync

11:37.340 --> 11:37.700
好

11:37.700 --> 11:38.580
那么接下来再看

11:39.580 --> 11:40.900
得到这个文件的状态

11:43.220 --> 11:45.380
那么这里是不是有可能会爆错

11:45.380 --> 11:45.980
对不对

11:45.980 --> 11:46.940
那么以哪些情况

11:46.940 --> 11:48.460
我们把它揣开写一下

11:48.460 --> 11:49.300
爆错是什么情况

11:49.300 --> 11:50.420
爆错是文件不存在

11:50.940 --> 11:51.980
那么这里看起

11:53.900 --> 11:55.340
这种情况下就是文件

11:56.460 --> 11:57.380
不存在

11:59.380 --> 12:00.260
那么这里呢

12:00.260 --> 12:01.060
我们一个个来

12:01.860 --> 12:02.740
文件不存在

12:02.740 --> 12:03.620
那这里呢

12:04.020 --> 12:04.780
这里不输出了

12:06.900 --> 12:07.460
这里呢

12:07.460 --> 12:10.300
我们就可以判断State is directory

12:10.300 --> 12:11.180
是不是目录

12:12.020 --> 12:12.940
是目录

12:13.620 --> 12:14.660
那么我们就输出

12:14.660 --> 12:16.060
是目录

12:16.060 --> 12:17.660
l就输出

12:17.660 --> 12:18.820
是文件

12:19.780 --> 12:19.980
好

12:19.980 --> 12:21.260
我们把三种情况看一下

12:21.260 --> 12:23.220
看这三种情况是不是正确的输出

12:24.220 --> 12:24.940
情况

12:24.940 --> 12:26.500
像你们开发代码的时候

12:26.500 --> 12:27.940
就这样子一步一步来

12:27.940 --> 12:28.100
好

12:28.100 --> 12:28.620
跟目录

12:29.460 --> 12:29.900
得到什么

12:29.900 --> 12:30.740
是不是目录

12:30.740 --> 12:31.060
对吧

12:31.060 --> 12:33.300
那如果说我这里写个

12:33.300 --> 12:35.300
index的atm

12:35.300 --> 12:36.020
这是什么

12:36.020 --> 12:37.180
说是文件

12:37.180 --> 12:38.580
那如果说我这里再写个

12:39.580 --> 12:39.860
这种

12:40.860 --> 12:41.820
所以文件不存在

12:41.820 --> 12:42.060
对吧

12:42.060 --> 12:43.820
那么上三种情况是不是正确的得到了

12:44.260 --> 12:45.300
我们这个代码结构是不是

12:45.300 --> 12:46.460
反映了这三种情况

12:46.460 --> 12:47.340
那么一个个来

12:47.340 --> 12:49.220
如果说是目录的情况下怎么办

12:51.100 --> 12:52.540
是目录的情况下怎么办

12:52.540 --> 12:53.420
怎么办呢

12:53.420 --> 12:54.740
我就在这个基础上

12:54.740 --> 12:56.820
再拼接一个index的atm

12:56.820 --> 12:57.380
对不对

12:57.900 --> 12:58.780
所以在这个基础上

12:58.780 --> 12:59.620
我们又可以用什么

12:59.620 --> 13:01.380
a pass join

13:01.380 --> 13:02.340
拼接

13:02.340 --> 13:03.700
unl pass

13:03.700 --> 13:05.100
然后来拼接上什么

13:05.100 --> 13:06.660
拼接上那个就是

13:08.540 --> 13:09.340
index

13:09.540 --> 13:10.380
一天没有

13:10.380 --> 13:10.700
对吧

13:10.700 --> 13:12.380
那么这个东西其实还可以在这

13:12.380 --> 13:13.540
还可以在这里进行配置

13:13.540 --> 13:14.500
我这也难得配置的

13:14.500 --> 13:15.900
那么直接拼接上这个

13:15.900 --> 13:16.740
拼接上这个过后

13:16.740 --> 13:18.300
是不是得到一个新的路径

13:18.300 --> 13:19.380
对不对

13:19.380 --> 13:20.940
new url pass

13:20.940 --> 13:21.700
然后新的路径

13:21.700 --> 13:23.140
然后重新调用

13:24.660 --> 13:25.500
get file name

13:25.500 --> 13:27.340
同样的这个方法用地规嘛

13:27.340 --> 13:28.940
然后把这个新的路径给他

13:28.940 --> 13:31.100
那这个东西总归是文件了吗

13:31.100 --> 13:32.260
这个东西不可能

13:32.260 --> 13:33.660
不可能海事目录

13:33.660 --> 13:34.260
对不对

13:34.260 --> 13:35.860
总归是文件了

13:35.860 --> 13:36.860
那么比方说我们这个

13:36.860 --> 13:37.940
把这个东西给他

13:37.940 --> 13:39.060
Rus给他

13:39.100 --> 13:40.860
然后重新去重新去

13:40.860 --> 13:42.580
重新去搞定这件事

13:43.820 --> 13:44.380
没啥意思吧

13:44.380 --> 13:45.300
那么我们再来看啊

13:45.300 --> 13:45.980
再来看

13:45.980 --> 13:47.660
现在呢我们如果说

13:47.660 --> 13:50.140
写上index的atmail

13:50.140 --> 13:51.940
你看这里是文件嘛

13:51.940 --> 13:52.180
好

13:52.180 --> 13:53.260
如果说我们现在

13:53.260 --> 13:53.860
这样子写

13:55.140 --> 13:56.180
是不是还是文件

13:56.180 --> 13:56.500
对不对

13:56.500 --> 13:57.220
他怎么回事

13:57.220 --> 13:58.380
我们给他的是这个

13:58.380 --> 13:59.340
他本来是目录的

13:59.340 --> 14:01.180
然后给他拼接上index的atmail

14:01.180 --> 14:02.180
变成了写杠

14:02.180 --> 14:03.180
index的atmail

14:03.180 --> 14:03.700
对吧

14:03.700 --> 14:04.460
然后他去调

14:04.460 --> 14:05.380
再重新调用一个函数

14:05.380 --> 14:08.060
是不是把这个写杠index的atmail传进去了

14:08.060 --> 14:08.540
是吧

14:08.580 --> 14:10.020
那么他按照他的逻辑处理

14:10.020 --> 14:10.780
那么是变

14:10.780 --> 14:11.620
下一次调用的时候

14:11.620 --> 14:12.740
是不是跑车来了

14:12.740 --> 14:13.180
对不对

14:13.180 --> 14:14.020
那变成是文件了

14:14.020 --> 14:15.220
这是目录的情况

14:15.220 --> 14:17.260
那么是文件的情况就很简单了

14:17.260 --> 14:18.060
是文件的情况

14:18.060 --> 14:18.820
我们就返回

14:18.820 --> 14:19.540
file

14:20.060 --> 14:20.500
对吧

14:20.500 --> 14:21.220
是目录的情况

14:21.220 --> 14:22.420
我们拼接上这个东西过后

14:22.420 --> 14:22.980
再返回

14:22.980 --> 14:23.740
再调用函数

14:23.740 --> 14:25.020
再重新返回这个file

14:26.540 --> 14:26.740
好

14:26.740 --> 14:28.220
那么如果说文件不存在的话

14:28.220 --> 14:28.900
我们就返回什么

14:28.900 --> 14:29.660
返回哪儿

14:31.860 --> 14:32.140
好

14:32.140 --> 14:33.300
那么现在我们来看一下啊

14:33.300 --> 14:33.900
看一下这边

14:33.900 --> 14:35.060
我们输出这个file

14:35.620 --> 14:36.380
看一下这边

14:36.380 --> 14:36.580
好

14:36.580 --> 14:37.100
保存

14:38.060 --> 14:38.260
好

14:38.260 --> 14:39.500
现在我们刷新

14:39.500 --> 14:40.060
你看

14:40.780 --> 14:41.900
得到这个路径对不对

14:41.900 --> 14:43.020
说正确的

14:43.020 --> 14:43.580
然后呢

14:43.580 --> 14:44.460
我们这里斜杠

14:44.460 --> 14:45.020
in这个设计

14:45.020 --> 14:45.100
哎

14:45.100 --> 14:46.420
听没啊

14:46.420 --> 14:47.540
得到这个路径是不是正确的

14:47.540 --> 14:48.860
说还是同样的路径

14:48.860 --> 14:49.220
然后呢

14:49.220 --> 14:50.220
我们这里呢

14:50.220 --> 14:51.100
给他的表面

14:51.100 --> 14:53.100
给他的是一个css

14:53.100 --> 14:53.940
in这个设计

14:53.940 --> 14:54.980
css

14:54.980 --> 14:55.780
得到路径是什么

14:55.780 --> 14:56.540
是不是这个路径

14:56.540 --> 14:56.740
对吧

14:56.740 --> 14:57.900
这个文件是存在的

14:57.900 --> 14:58.060
好

14:58.060 --> 14:58.900
如果说我这里呢

14:58.900 --> 15:00.900
写到写到一个不存在的

15:00.900 --> 15:01.900
这里是不是得到nau

15:01.900 --> 15:02.500
对吧

15:02.500 --> 15:03.620
是不是没问题了

15:03.620 --> 15:05.420
那么这个路径是不是得到了

15:05.420 --> 15:05.900
我们这里呢

15:05.900 --> 15:07.620
无非就是要做这么一件事啊

15:07.620 --> 15:08.700
首先判断一下

15:10.420 --> 15:13.180
这个文件是不是nau

15:13.180 --> 15:15.060
如果说他没不存在

15:15.060 --> 15:16.300
也就是snau

15:16.300 --> 15:17.540
那么表示什么呢

15:17.540 --> 15:19.300
文件不存在

15:19.300 --> 15:19.580
对不对

15:19.580 --> 15:20.060
他是nau

15:20.060 --> 15:21.620
他就是文件不存在吗

15:21.620 --> 15:23.860
那么文件不存在怎么办呢

15:23.860 --> 15:25.460
我这个中间件是不是处理不了了

15:25.460 --> 15:27.180
我这个中间件是硬设静态资源的

15:27.180 --> 15:28.820
静态资源都没有对应用

15:28.820 --> 15:29.940
那我该怎么办

15:29.940 --> 15:31.180
是不是下一步

15:31.180 --> 15:32.020
注意哦

15:32.020 --> 15:32.980
这个地方

15:32.980 --> 15:34.620
如果说你自己写中间件的时候

15:34.620 --> 15:36.260
容易出错的地方就出现了

15:37.260 --> 15:40.740
这个地方一定要去写上而为者

15:40.740 --> 15:42.180
一定要写上

15:42.180 --> 15:45.140
特别是你在编写些同用中间件的时候

15:45.140 --> 15:46.500
一定要把这个而为者写上

15:46.500 --> 15:48.100
为什么

15:48.100 --> 15:51.140
这个地方要解释起来还真绕

15:51.140 --> 15:52.660
还是真绕

15:52.660 --> 15:55.580
因为如果你不写上的话

15:55.580 --> 15:58.700
就表示我要不要也要给下一个要

15:58.700 --> 16:00.340
但是我不等他

16:00.340 --> 16:03.460
不等他就意味着啥呢

16:03.460 --> 16:04.300
你看着啊

16:05.300 --> 16:07.260
不等他就会意味着比发说啊

16:07.260 --> 16:08.460
这是第一个中间件

16:08.460 --> 16:09.660
中间件一

16:09.660 --> 16:13.150
做了一些事

16:13.150 --> 16:15.590
你叫个中间件二

16:15.590 --> 16:19.910
你看控制权

16:19.910 --> 16:22.030
控制权的变化啊

16:22.030 --> 16:23.590
中间件一中间件二呢

16:23.590 --> 16:25.310
是一个一步的比发说中间件二

16:25.310 --> 16:26.550
要去读取数据库

16:26.550 --> 16:29.190
他里边要读取数据库

16:29.190 --> 16:32.790
那么比方读取数据库需要两秒钟

16:32.790 --> 16:34.590
需要两秒钟才能完成

16:34.590 --> 16:35.910
然后得到数据

16:36.590 --> 16:38.470
然后设置什么消息体

16:38.470 --> 16:39.670
这中间件二要做的事

16:39.670 --> 16:40.750
中间件一呢

16:40.750 --> 16:42.110
我没就是这个东西啊

16:42.110 --> 16:43.790
我没有等待他

16:43.790 --> 16:45.510
我没有等待中间件二完成

16:45.510 --> 16:47.870
那么中间件一造成的结果是什么

16:47.870 --> 16:50.750
就是移交给第二个

16:50.750 --> 16:52.150
下一个中间件

16:52.150 --> 16:54.030
一个中间件

16:54.030 --> 16:56.190
那么移交给下一个中间件过后了

16:56.190 --> 16:57.990
由于他是中间件二是一个一步的

16:57.990 --> 16:59.630
但是中间一没有等他

16:59.630 --> 17:00.950
是不是

17:00.950 --> 17:02.630
马上又获取了控制权

17:02.630 --> 17:03.270
对不对

17:03.270 --> 17:05.350
因为马上就运行结束了

17:05.390 --> 17:07.190
他返回的是一个Promise

17:07.190 --> 17:08.710
马上就运行结束了

17:08.710 --> 17:10.590
他得到一个Promise他又没有等

17:10.590 --> 17:11.550
那么就意味着

17:11.550 --> 17:13.310
中间件二数据库还没有读出来

17:13.310 --> 17:15.430
中间件一是不是运行完了

17:15.430 --> 17:16.430
运行完了过后

17:16.430 --> 17:18.870
那么就已经完成响应了

17:18.870 --> 17:21.390
如果说我要用图来画的话

17:21.390 --> 17:22.630
比较说我要画个图的话

17:22.630 --> 17:23.390
应该是这个样子

17:24.830 --> 17:25.590
看着啊

17:25.590 --> 17:27.030
中间件一

17:27.030 --> 17:27.390
你看啊

17:27.390 --> 17:29.270
中间件先到中间件一

17:29.270 --> 17:30.710
中间件一做了一些事

17:30.710 --> 17:32.790
我们没有中间件三

17:32.790 --> 17:33.870
交给中间件二

17:33.910 --> 17:34.910
中间件二呢

17:34.910 --> 17:36.350
他做了一些事是同步的

17:36.350 --> 17:38.070
接下来他有一些一步的操作

17:38.070 --> 17:39.950
比方说这里边有一些一步的操作

17:41.830 --> 17:43.190
换个颜色啊

17:43.190 --> 17:46.470
这一些是一步的操作

17:46.470 --> 17:47.470
我们把它画到下面了

17:48.630 --> 17:49.270
怎么画了

17:49.270 --> 17:50.510
这才是真实一个问题啊

17:50.510 --> 17:51.230
怎么画

17:51.230 --> 17:52.470
比方说这个蓝色的啊

17:52.470 --> 17:53.950
这个区域是一步操作

17:53.950 --> 17:55.990
但是中间件一没有等他呀

17:55.990 --> 17:58.270
没有等这个一步操作完成

17:58.270 --> 17:59.070
他没有等他

17:59.070 --> 18:00.310
他认为中间件二运行完了

18:00.310 --> 18:01.230
因为我没有等他

18:01.230 --> 18:03.430
因此他就认为中间二运行完了

18:03.470 --> 18:04.950
运行完了过后又回到中间件一

18:04.950 --> 18:05.790
对吧

18:05.790 --> 18:06.830
所以又回到中间件一

18:08.550 --> 18:09.350
又回到中间件一

18:09.350 --> 18:11.150
然后中间件一就认为没了

18:11.150 --> 18:11.830
没东西了

18:11.830 --> 18:13.590
然后中间件一运行完了过后

18:14.870 --> 18:16.910
KLA认为没有中间件可以运行了

18:16.910 --> 18:18.030
于是输出结果了

18:19.110 --> 18:19.630
但是呢

18:19.630 --> 18:21.230
过了一会两秒钟过后

18:21.230 --> 18:22.190
也输了一户读出来了

18:22.190 --> 18:23.390
这个时候响应还有意义吗

18:23.390 --> 18:24.950
没有任何意义的

18:24.950 --> 18:25.470
明白的意思吧

18:25.470 --> 18:27.390
所以说我们在绝大部分情况

18:27.390 --> 18:29.150
除非你真的需要啊

18:29.150 --> 18:30.430
不要影响我响应的时间

18:30.430 --> 18:31.350
我们马上就要响应

18:31.390 --> 18:33.790
那个东西响应之后再去做无所谓

18:33.790 --> 18:36.630
除非你真的认为这个东西是可以这样子的

18:36.630 --> 18:39.510
否则的话你一定要去等待他

18:39.510 --> 18:41.390
等待他就是我等中间间二

18:41.390 --> 18:43.030
这一部分一一步操作完了过后

18:43.030 --> 18:44.990
我再去回到中间件一

18:44.990 --> 18:47.030
然后再去解除

18:47.030 --> 18:47.670
明白的意思吧

18:47.670 --> 18:49.110
所以说我们这里的一定要去

18:49.110 --> 18:51.790
当我们在KLA里边去调容下一个的时候

18:51.790 --> 18:52.750
绝大部分情况下

18:52.750 --> 18:54.710
99%的情况下都应该去等待他

18:56.230 --> 18:57.750
这是关于这个啊

18:57.750 --> 18:58.390
一定要注意

18:58.390 --> 19:00.030
也要非常非常小心

19:00.150 --> 19:02.470
这是这个情况

19:02.470 --> 19:03.230
文件不存在

19:03.230 --> 19:04.310
那我直接给下一课了

19:05.430 --> 19:06.030
好

19:06.030 --> 19:06.510
那么这里呢

19:06.510 --> 19:07.670
我就结束这个海出了

19:07.670 --> 19:09.070
我没有什么可做的了

19:09.070 --> 19:12.190
那么下面下面就是文件存在的情况下

19:12.190 --> 19:14.470
文件存在的情况下怎么办呢

19:14.470 --> 19:15.390
我要干嘛

19:15.390 --> 19:17.190
我是不是就是给body复职

19:17.190 --> 19:18.070
对不对

19:18.070 --> 19:20.070
给body复职怎么复职

19:20.070 --> 19:21.990
我可以把这个留给他嘛

19:21.990 --> 19:22.870
fs

19:22.870 --> 19:24.510
press read string

19:24.510 --> 19:26.390
把这个file name把这个留读出来

19:26.390 --> 19:27.110
对吧

19:27.110 --> 19:28.150
管道嘛对吧

19:28.150 --> 19:31.150
把这个留输出到body里边

19:31.150 --> 19:31.910
给他这个留

19:31.910 --> 19:32.790
那么给他这个留的话

19:32.790 --> 19:33.950
KLA会自动帮你处理

19:35.110 --> 19:35.630
那就完事了

19:37.110 --> 19:37.510
好

19:37.510 --> 19:40.510
那么我们就不需要往后移交了

19:40.510 --> 19:41.910
因为我这里已经处理完了

19:41.910 --> 19:42.030
好

19:42.030 --> 19:43.190
这样我们来试一下吧

19:43.190 --> 19:44.030
这个地方

19:44.030 --> 19:44.870
那么肯定得不到的

19:44.870 --> 19:45.070
对吧

19:45.070 --> 19:45.910
他往后移交了

19:45.910 --> 19:47.310
往后移交还是404对吧

19:47.310 --> 19:48.630
从来没给body复职

19:48.630 --> 19:51.590
那如果说得到的是index.css呢

19:51.590 --> 19:52.670
是不是就有东西

19:52.670 --> 19:52.910
哎

19:52.910 --> 19:54.190
那为什么变成下载了呢

19:54.190 --> 19:56.110
为什么变成下载了

19:56.110 --> 19:56.950
因为你给他的留

19:56.950 --> 19:59.310
他并不知道他这个小型内型是啥

19:59.310 --> 20:00.910
他并不知道一个响应内型是啥

20:00.910 --> 20:02.670
所以他把进行了下载

20:02.670 --> 20:03.590
那怎么办呢

20:03.590 --> 20:05.390
那我这里什么告诉他不就完了吗

20:05.390 --> 20:07.350
告诉他的内型是啥

20:07.350 --> 20:10.110
那么这里是不是要填个mi me内型

20:10.110 --> 20:10.950
有哪些情况

20:10.950 --> 20:11.950
是不是有tex atml

20:11.950 --> 20:13.590
告诉他我是一个atml 页面

20:13.590 --> 20:14.910
或者是tex css

20:14.910 --> 20:15.590
告诉他什么

20:15.590 --> 20:16.710
我是css

20:16.710 --> 20:17.950
或者是告诉他

20:17.950 --> 20:20.190
我是什么tex javascript

20:20.190 --> 20:20.910
对吧

20:20.910 --> 20:22.430
或者是application javascript

20:22.430 --> 20:22.790
都行

20:22.790 --> 20:24.230
这些mi me内型

20:24.230 --> 20:26.110
我们把它叫mime内型

20:26.150 --> 20:27.150
这些mime内型呢

20:27.150 --> 20:27.830
就告诉他

20:27.830 --> 20:28.750
告诉他流量器

20:28.750 --> 20:30.550
我到底给的是一个什么东西

20:30.550 --> 20:31.030
对吧

20:31.030 --> 20:33.670
你不要给我出发下载行为了

20:33.670 --> 20:34.990
你把宣传出来

20:34.990 --> 20:35.750
那怎么来告诉他呢

20:35.750 --> 20:37.270
因为我这里的情况很多

20:37.270 --> 20:38.550
有可能是atml

20:38.550 --> 20:39.670
有可能是jss

20:39.670 --> 20:40.550
有可能是css

20:40.550 --> 20:41.990
我也不知道是啥玩意

20:41.990 --> 20:42.190
哎

20:42.190 --> 20:43.550
我们这里呢

20:43.550 --> 20:45.870
我们是不是可以根据这个文件路径

20:45.870 --> 20:48.110
文件路径里面不是有后维名吗

20:48.110 --> 20:48.350
对不对

20:48.350 --> 20:49.590
我之前说出过了

20:49.590 --> 20:50.910
文件路径后面是不是有后维名

20:50.910 --> 20:53.190
我们可以根据这个后维名

20:53.190 --> 20:53.430
啊

20:53.430 --> 20:54.630
去匹配这个

20:54.630 --> 20:55.790
mime内型

20:55.790 --> 20:57.790
那么怎么来根据后续名区匹配呢

20:57.790 --> 20:59.230
其实就是一张很大的表格

20:59.230 --> 21:00.310
一张硬设表

21:00.310 --> 21:01.230
什么内型

21:01.230 --> 21:02.510
硬设到什么mi

21:02.510 --> 21:03.710
mi内型

21:03.710 --> 21:04.310
那么这东西呢

21:04.310 --> 21:05.110
我们不用去写

21:05.110 --> 21:07.670
我们可以利用一个第三方库

21:07.670 --> 21:09.710
就叫做mime

21:09.710 --> 21:10.790
就这么一个第三方库

21:10.790 --> 21:11.910
很简单

21:11.910 --> 21:13.230
让我们再把运行

21:13.230 --> 21:14.070
我们你看一下这个

21:14.070 --> 21:15.030
这个mime这个库啊

21:15.030 --> 21:16.670
特别有意思

21:16.670 --> 21:18.830
在这里我先把注释掉

21:18.830 --> 21:19.390
怎么用呢

21:19.390 --> 21:24.870
就是导入一块mime

21:24.910 --> 21:26.870
这里面就是个get

21:26.870 --> 21:27.310
就这么讲

21:27.310 --> 21:28.590
它就一个函数

21:28.590 --> 21:29.350
你给它一个路径

21:29.350 --> 21:30.190
随便啥路径都行

21:30.190 --> 21:31.390
随便啥路径都行

21:31.390 --> 21:32.830
它就根据这个路径的后续名

21:32.830 --> 21:33.990
来得到一个mime内型

21:35.990 --> 21:39.160
without

21:39.160 --> 21:40.160
输出without

21:43.000 --> 21:44.280
mime

21:44.280 --> 21:46.880
对对啊

21:46.880 --> 21:48.680
without

21:48.680 --> 21:49.200
这里又导

21:49.200 --> 21:50.240
哦 这里写出来了

21:50.240 --> 21:51.600
好

21:51.600 --> 21:52.200
保存

21:52.200 --> 21:53.120
你看一下

21:53.120 --> 21:54.280
是不是得到这个东西

21:54.280 --> 21:55.160
对吧

21:55.160 --> 21:57.840
那如果说这里写的世界是呢

21:58.800 --> 21:59.360
就得到app

21:59.360 --> 22:00.240
可以写java script

22:00.240 --> 22:00.480
对吧

22:00.480 --> 22:01.640
它就帮我们处理这个事

22:01.640 --> 22:03.840
根据一个路径里面的后续名

22:03.840 --> 22:05.160
来得到一个mime内型

22:05.160 --> 22:06.560
那还不简单

22:06.560 --> 22:07.360
扔过来

22:10.040 --> 22:10.720
那么这里呢

22:10.720 --> 22:14.930
我们是不是可以得到mime了

22:14.930 --> 22:16.130
就是得到

22:16.130 --> 22:17.490
这里我们直接来吧

22:17.490 --> 22:19.250
就是mime

22:19.250 --> 22:20.410
get type

22:20.410 --> 22:22.130
然后把这个finally传进去

22:22.130 --> 22:22.370
对吧

22:22.370 --> 22:24.130
是不是可以得到这个mime内型

22:24.130 --> 22:25.930
它放到这个content type里边

22:25.930 --> 22:27.210
这是一个别名

22:27.210 --> 22:27.530
对不对

22:27.530 --> 22:30.530
它真实的地方在response里边

22:30.530 --> 22:30.810
好了

22:30.810 --> 22:32.370
那么我们这里就写完了

22:32.370 --> 22:32.810
你看一下

22:34.490 --> 22:37.740
好 保存

22:37.740 --> 22:40.140
现在让我们看一下刷新

22:40.140 --> 22:41.140
这个地方是不存在的

22:41.140 --> 22:41.620
对吧

22:41.620 --> 22:42.660
index的css

22:42.660 --> 22:43.420
出不出来了

22:43.420 --> 22:45.940
那么访问页面

22:45.940 --> 22:47.140
访问页面出不出来了

22:47.140 --> 22:47.980
那么它的js

22:47.980 --> 22:50.300
你看js输出的是

22:50.300 --> 22:52.460
js好像出了问题

22:52.460 --> 22:54.900
看看这边的js

22:54.900 --> 22:56.500
js

22:56.500 --> 22:57.380
这个js

22:57.380 --> 22:59.260
我们在页面上引用对不对

23:00.260 --> 23:02.620
src

23:02.620 --> 23:03.700
js

23:03.700 --> 23:05.020
index

23:05.020 --> 23:06.740
js

23:06.740 --> 23:07.420
好 保存

23:07.420 --> 23:08.060
刷新

23:08.060 --> 23:08.460
你看

23:08.460 --> 23:09.100
说这些

23:09.100 --> 23:10.260
css显示出来了

23:10.260 --> 23:11.180
页面显示出来了

23:11.180 --> 23:12.500
js也显示出来了

23:12.500 --> 23:13.980
对吧

23:13.980 --> 23:15.300
好 那么这个东西我们就写完了

23:15.300 --> 23:16.700
一个静态资源服务器

23:16.700 --> 23:18.900
也并不复杂对不对

23:18.900 --> 23:20.820
啊

23:20.820 --> 23:21.580
再来一个吧

23:21.580 --> 23:23.220
再来一个

23:23.220 --> 23:24.420
我们在写vure

23:24.420 --> 23:26.300
react这些应用程序的时候呢

23:26.300 --> 23:27.700
我们部署到服务器上过后

23:27.700 --> 23:28.620
是不是只有一个页面

23:28.660 --> 23:29.660
叫单页应用程序

23:29.660 --> 23:30.100
对吧

23:30.100 --> 23:32.180
那么我们希望我们访问别的地址

23:32.180 --> 23:34.220
比方访问这样的地址

23:34.220 --> 23:35.660
也要定位到这个页面

23:35.660 --> 23:36.380
对吧

23:36.380 --> 23:37.340
通过js

23:37.340 --> 23:38.540
通过这个js

23:38.540 --> 23:40.380
让js根据这个路径

23:40.380 --> 23:41.740
来宣传不同的东西

23:41.740 --> 23:41.940
对吧

23:41.940 --> 23:44.140
但是页面还是同样有一个页面

23:44.140 --> 23:44.340
对吧

23:44.340 --> 23:46.300
我们以前在express里面讲过的

23:46.300 --> 23:47.180
不再最初了

23:47.180 --> 23:48.220
那么这个玩意怎么做呢

23:48.220 --> 23:49.340
以前我们是不是用现成的

23:49.340 --> 23:49.580
对吧

23:49.580 --> 23:51.060
这里其实也可以用现成的

23:51.060 --> 23:53.980
我们现在去手动写一下

23:53.980 --> 23:54.980
来手动写一下吧

23:54.980 --> 23:56.380
这个其实也并不复杂

23:56.380 --> 23:57.300
真的不复杂

23:57.340 --> 24:00.540
我们这里写个KLA叫4BIKE

24:00.540 --> 24:01.900
就是你请求别的路径的时候

24:01.900 --> 24:03.100
我让你回去

24:03.100 --> 24:05.900
回去还是用这个index ATM

24:05.900 --> 24:08.140
原理特别简单

24:08.140 --> 24:09.340
我就直接来了

24:09.340 --> 24:10.100
RIG

24:10.100 --> 24:10.900
没有

24:10.900 --> 24:11.620
看这个是

24:11.620 --> 24:12.220
那个是

24:13.740 --> 24:14.580
既然它有那个是

24:14.580 --> 24:17.340
所以说我们一定是意图的

24:17.340 --> 24:18.660
基本上我们最后肯定是

24:18.660 --> 24:19.980
肯定无论如何都送往

24:19.980 --> 24:21.620
要往后移交的

24:21.620 --> 24:24.420
然后我们在这边index里面

24:24.420 --> 24:25.900
去使用它

24:26.340 --> 24:26.860
Use

24:29.420 --> 24:30.140
叫做什么呢

24:31.260 --> 24:32.100
就直接来吧

24:32.100 --> 24:32.940
require

24:32.940 --> 24:35.380
KLA4BIKE

24:35.380 --> 24:36.820
直接把它扔进去就行

24:36.820 --> 24:38.500
它就是个中间键

24:38.500 --> 24:40.180
那么这个中间键要干嘛呢

24:40.180 --> 24:42.660
它就是凡是别的路径

24:44.060 --> 24:45.460
请求过来了过后

24:45.460 --> 24:47.700
比方说你请求路径过来了

24:47.700 --> 24:49.740
你的CTX pass等于什么呢

24:49.740 --> 24:52.420
本来是本来是等于这个的

24:52.420 --> 24:53.700
然后我把改了

24:53.780 --> 24:55.300
还是改成

24:55.300 --> 24:56.020
改成了什么

24:56.020 --> 24:57.980
改成这个index的

24:59.260 --> 25:00.500
就这么简单

25:00.500 --> 25:02.260
我把改成这个玩意就行了

25:02.260 --> 25:03.860
但是你不能什么都改

25:03.860 --> 25:06.540
比方说你对GS的请求就不能改

25:06.540 --> 25:08.420
你对GS的请求是不能改的

25:08.420 --> 25:09.980
比方说你这里很粗暴的

25:09.980 --> 25:12.140
你这样子写pass等于什么呢

25:12.140 --> 25:13.060
写个index的

25:13.060 --> 25:14.260
那交给下一个

25:14.260 --> 25:16.100
那么下一个中间键是不是这个玩意

25:16.100 --> 25:18.460
这个玩意获得的pass是什么

25:18.460 --> 25:19.620
这个地方获得的pass

25:19.620 --> 25:22.100
是不是一定是这个index的

25:22.580 --> 25:24.380
那如果说这样太粗暴了

25:24.380 --> 25:26.260
你这样子结果是什么呢

25:27.140 --> 25:28.460
结果页面都没问题

25:28.460 --> 25:30.780
你看这些东西就全出问题了

25:30.780 --> 25:32.300
当我去请求CSS的时候

25:32.300 --> 25:34.060
得到的结果还是个页面

25:34.060 --> 25:34.980
当我请求index的

25:34.980 --> 25:36.980
解释的时候得到的结果还是个页面

25:36.980 --> 25:37.340
对吧

25:37.340 --> 25:40.180
因为它把什么形式变成这个样子的

25:40.180 --> 25:42.500
那么我们一般来说是有条件的

25:42.500 --> 25:43.620
你可以回顾一下

25:43.620 --> 25:45.860
以前我们学习那个express的时候

25:45.860 --> 25:47.940
当时有个酷叫做

25:47.940 --> 25:48.540
什么

25:48.540 --> 25:49.940
就这个酷

25:49.940 --> 25:51.780
这个酷它就是有条件的

25:51.820 --> 25:52.820
它什么条件呢

25:52.820 --> 25:54.260
它说这是一个gatter请求

25:54.260 --> 25:54.740
首先

25:55.740 --> 25:57.580
那么我们是不是可以判断

25:57.580 --> 26:00.100
包括我们这里是不是也应该一样的

26:00.100 --> 26:01.580
静态资源访问的时候

26:01.580 --> 26:03.180
一般也是gatter请求

26:03.180 --> 26:05.780
就说如果说你CTA是master的

26:05.780 --> 26:07.500
一请求不等于gatter

26:09.970 --> 26:11.170
而且往上一点

26:11.170 --> 26:11.730
不等于gatter

26:11.730 --> 26:12.490
你不是gatter请求

26:12.490 --> 26:13.770
那肯定是跟我静态资源

26:13.770 --> 26:14.570
没有什么关系

26:14.570 --> 26:16.530
我就挑过下

26:16.530 --> 26:17.730
下一个结束

26:19.250 --> 26:19.810
对不对

26:19.810 --> 26:20.970
这个地方我们把写一下

26:20.970 --> 26:22.690
那么这里也是一样

26:22.730 --> 26:23.410
判断一下

26:23.410 --> 26:25.570
首先你得是一个什么

26:25.570 --> 26:26.370
gatter请求

26:27.530 --> 26:28.810
这是第一个条件

26:28.810 --> 26:30.330
还有什么呢

26:30.330 --> 26:32.570
你的请求是能够接收

26:34.130 --> 26:35.170
是能够接收Tex

26:35.170 --> 26:35.890
ATML的

26:35.890 --> 26:37.010
这是什么意思呢

26:37.010 --> 26:38.490
就是每一次发动请求的时候

26:38.490 --> 26:40.890
浏览器会向服务器的请求头里边

26:40.890 --> 26:44.210
加上一个东西叫做Arsept

26:44.210 --> 26:44.570
你看一下

26:46.290 --> 26:47.770
看一下这请求A

26:47.770 --> 26:48.970
请求页面的时候

26:48.970 --> 26:50.370
加上一个Arsept

26:50.410 --> 26:51.050
就表示了

26:51.050 --> 26:55.850
我希望服务器给我一些什么东西

26:55.850 --> 26:56.970
给我什么呢

26:56.970 --> 26:57.730
给我

26:57.730 --> 27:00.450
比方说这里就可以给我一个ATML

27:00.450 --> 27:01.850
也可以给我这么一个内容

27:01.850 --> 27:02.970
也可以给我这么一个内容

27:02.970 --> 27:03.450
X没有

27:03.450 --> 27:03.970
对吧

27:03.970 --> 27:05.850
也可以给我图片

27:05.850 --> 27:07.090
各种图片

27:07.090 --> 27:08.690
或者是什么内容都行

27:08.690 --> 27:09.370
什么内容都行

27:09.370 --> 27:10.290
还给你写这么一些

27:10.290 --> 27:10.850
就像服务器

27:10.850 --> 27:11.770
高速服务器

27:11.770 --> 27:13.450
我希望你给我一个啥玩意

27:13.450 --> 27:14.250
对吧

27:14.250 --> 27:15.850
那么比方说CSS这一块

27:15.850 --> 27:17.730
那么这一块就比较粗暴了

27:17.730 --> 27:18.450
这里写的就是

27:19.450 --> 27:20.890
请求CSS的时候

27:20.890 --> 27:22.410
他希望服务器给他一个什么

27:22.410 --> 27:22.970
CSS

27:25.970 --> 27:26.690
给他一个什么

27:29.410 --> 27:30.890
Texas CSS

27:30.890 --> 27:32.890
或者是其他任何东西都可以

27:32.890 --> 27:34.370
GS的时候

27:34.370 --> 27:36.730
希望服务器给他一个任何内容

27:37.850 --> 27:39.010
明白你的意思吗

27:39.010 --> 27:40.290
所以说我们这里

27:40.290 --> 27:42.250
你看以前他这边是怎么做的

27:42.250 --> 27:43.770
他就是说服务器里边

27:43.770 --> 27:46.690
就是请求的消息头里边有个Arsept

27:47.650 --> 27:48.810
要包含这个东西

27:49.970 --> 27:51.690
那么我们这里就很简单了

27:51.690 --> 27:52.210
怎么来说

27:53.490 --> 27:54.890
CSS请求头

27:55.770 --> 27:56.290
Texas

27:57.090 --> 27:57.610
对吧

27:57.610 --> 27:58.610
请求头里边

27:58.610 --> 27:59.090
然后呢

27:59.090 --> 27:59.730
Arsept

28:00.930 --> 28:01.610
Arsept

28:02.690 --> 28:03.850
然后包含

28:03.850 --> 28:04.970
这个字幕出来的包含

28:04.970 --> 28:05.410
什么了

28:05.410 --> 28:06.770
包含Texas

28:06.770 --> 28:07.290
看前面

28:09.050 --> 28:09.530
对吧

28:09.530 --> 28:10.370
必须是页面

28:10.370 --> 28:10.650
对吧

28:10.650 --> 28:12.090
你请求GS请求CSS

28:12.090 --> 28:12.810
我不管了

28:12.810 --> 28:14.050
你这个东西

28:14.050 --> 28:15.690
他就是在判定是不是页面的

28:15.690 --> 28:16.930
对页面的请求

28:16.930 --> 28:17.970
这第二条件

28:17.970 --> 28:19.170
第三个条件呢

28:19.210 --> 28:20.450
就是个请求路径里边

28:20.450 --> 28:21.450
不包含一个底

28:22.130 --> 28:23.170
包含底儿的话

28:23.170 --> 28:24.210
你看像这种

28:24.210 --> 28:25.410
底儿CSS

28:25.410 --> 28:26.570
A底儿CSS

28:26.570 --> 28:27.210
那我一般来说

28:27.210 --> 28:29.050
就是直接请求一个资源文件的

28:29.050 --> 28:29.570
对吧

28:29.570 --> 28:30.970
所以说我还有种情况就是

28:30.970 --> 28:32.810
CTSTexas里边

28:32.810 --> 28:33.650
Includes

28:34.250 --> 28:35.050
Includes

28:35.730 --> 28:36.370
包含什么

28:36.370 --> 28:36.770
底儿

28:37.770 --> 28:38.930
他不包含底儿

28:38.930 --> 28:41.250
那么这三种情况都满足

28:41.730 --> 28:42.490
说明什么呢

28:42.970 --> 28:45.170
我要改动这个路径

28:46.770 --> 28:47.170
对吧

28:47.170 --> 28:47.890
我要改动路径

28:47.890 --> 28:48.890
其他情况我也不改

28:49.650 --> 28:50.450
就这么简单

28:51.290 --> 28:51.570
好

28:51.570 --> 28:52.010
包含

28:53.970 --> 28:54.450
你看一下

28:56.050 --> 28:56.650
刷新

28:56.650 --> 28:57.490
诶这里包错了

28:57.490 --> 28:58.410
看一下什么错误

28:59.130 --> 28:59.970
Includes

28:59.970 --> 29:00.530
啊

29:00.530 --> 29:01.570
这个地方写错了

29:02.330 --> 29:03.010
Includes

29:06.500 --> 29:06.740
好

29:06.740 --> 29:07.620
再来啊刷新

29:08.260 --> 29:08.460
好

29:08.460 --> 29:09.340
还有错误

29:09.340 --> 29:09.900
他说的呢

29:09.900 --> 29:10.700
Includes

29:11.620 --> 29:12.500
Of Undefend

29:13.500 --> 29:15.420
他说有个东西是Undefend

29:15.420 --> 29:16.620
这个玩意肯定不是Undefend

29:18.140 --> 29:18.900
这个玩意

29:18.900 --> 29:19.860
那就是这个玩意

29:20.580 --> 29:21.580
Orccept

29:21.580 --> 29:22.380
啊这些错误

29:24.580 --> 29:24.780
好

29:24.780 --> 29:25.260
再来啊

29:27.580 --> 29:27.940
刷新

29:28.700 --> 29:29.180
啊你看

29:29.180 --> 29:29.900
GS

29:29.900 --> 29:30.980
CTST都没问题了

29:30.980 --> 29:31.980
然后我们请求别的

29:32.340 --> 29:32.700
A

29:33.100 --> 29:33.820
说没问题

29:33.820 --> 29:34.340
对吧

29:34.340 --> 29:35.260
B没问题

29:35.260 --> 29:35.500
对吧

29:35.500 --> 29:37.060
都跑了这个一个页面了

29:37.060 --> 29:37.860
就中间界

29:38.860 --> 29:39.020
好

29:39.020 --> 29:40.180
那么现在我们请求A

29:40.180 --> 29:40.620
B

29:41.620 --> 29:42.300
有什么问题

29:43.020 --> 29:44.500
CTSS和GS找不到了

29:44.500 --> 29:45.340
为什么找不到了

29:46.060 --> 29:46.700
你看一下

29:46.700 --> 29:48.180
啊这些都是一些细节问题啊

29:48.180 --> 29:50.060
你看他请求的路径就看得很明白了

29:50.060 --> 29:51.260
他请求路径是什么

29:51.300 --> 29:52.860
他跑了之后你去请求CTSS

29:53.380 --> 29:53.940
为啥呢

29:54.460 --> 29:55.580
因为浏览器呢

29:55.580 --> 29:56.780
认为你访问了这个地址

29:56.780 --> 29:57.580
拿到页面

29:57.580 --> 29:59.220
但是你页面中写的是啥

29:59.220 --> 30:00.820
页面中写的是不是相对路径

30:00.820 --> 30:01.820
那么他就根据这个

30:01.820 --> 30:03.100
他相对路径相对于谁的

30:03.100 --> 30:05.060
相对的是这个URL路径

30:05.820 --> 30:07.540
相对的不是什么文件夹

30:07.540 --> 30:08.500
哪有什么文件夹呀

30:08.500 --> 30:09.540
浏览器

30:09.540 --> 30:11.020
相对的是这个路径

30:11.020 --> 30:12.060
那么他就是认为

30:12.060 --> 30:13.380
你的页面是这个路径

30:13.380 --> 30:15.300
那么相对这个路径下面呢

30:15.300 --> 30:16.500
你又去得到

30:16.500 --> 30:17.540
下面的CS

30:17.540 --> 30:19.220
下面的indexcess

30:19.220 --> 30:20.060
那肯定发不到

30:20.060 --> 30:20.460
对不对

30:20.500 --> 30:21.260
404

30:21.260 --> 30:22.060
拿不到的

30:22.060 --> 30:22.700
那怎么办

30:22.700 --> 30:23.500
所以说你

30:23.500 --> 30:24.700
你看一下无诱生成的

30:24.700 --> 30:25.300
静态页面

30:25.300 --> 30:26.660
他一定是写的绝对路径

30:27.660 --> 30:27.980
对吧

30:27.980 --> 30:29.260
一定是从这个URL地址的

30:29.260 --> 30:30.140
跟目录开始

30:30.620 --> 30:31.420
来去寻找

30:31.780 --> 30:32.780
把这个改一下

30:33.620 --> 30:34.220
说明问题了

30:34.220 --> 30:34.620
对吧

30:34.620 --> 30:36.020
那么这样子请求任何路径

30:36.020 --> 30:37.900
说都定位到了index的ATM

30:37.900 --> 30:39.420
就单页订用程序的配置

30:41.300 --> 30:42.100
那么整个过程

30:42.100 --> 30:43.460
其实也很简单

30:43.460 --> 30:44.140
整个过程是什么呢

30:44.140 --> 30:45.100
整个过程就是

30:46.820 --> 30:47.980
比方说我们请求这样的路径

30:48.820 --> 30:49.460
比方说

30:49.540 --> 30:50.460
我们请求这样的路径

30:52.060 --> 30:52.980
这个路径扔过去

30:52.980 --> 30:54.420
然后到服务器了

30:54.420 --> 30:55.580
服务器第一个中间键

30:55.580 --> 30:55.900
对吧

30:55.900 --> 30:56.980
中间键

30:56.980 --> 30:58.140
就是KOA

30:58.140 --> 30:58.820
什么的

30:58.820 --> 31:00.660
4BIKE中间键

31:00.660 --> 31:01.300
根据这个路径

31:01.300 --> 31:02.820
根据还发现条件满足

31:02.820 --> 31:03.940
条件满足干嘛呢

31:03.940 --> 31:04.820
他就把这个

31:04.820 --> 31:05.940
con tex

31:07.060 --> 31:08.180
con tex

31:08.180 --> 31:08.780
pass

31:08.780 --> 31:09.220
从什么呢

31:09.220 --> 31:10.460
从这个路径

31:10.460 --> 31:11.140
改成了

31:12.940 --> 31:13.620
改成了什么呢

31:13.620 --> 31:14.100
改成了

31:15.100 --> 31:15.860
index的

31:15.860 --> 31:16.660
也听到没有

31:16.660 --> 31:18.500
然后交给下个中间键

31:18.500 --> 31:18.660
好

31:18.700 --> 31:19.420
下一个中间键

31:19.420 --> 31:20.340
static

31:20.340 --> 31:21.140
那么他就是读到了

31:21.140 --> 31:22.020
读到了路径是什么呢

31:22.020 --> 31:22.460
读到了路径

31:22.460 --> 31:23.420
就是这个路径的

31:23.420 --> 31:24.580
那么他根据这个路径

31:24.580 --> 31:25.580
来拿到

31:25.580 --> 31:26.780
页面的内容

31:26.780 --> 31:27.700
返回

31:27.700 --> 31:28.340
对吧

31:28.340 --> 31:29.500
就完事了

31:29.500 --> 31:30.900
当然这些中间键

31:30.900 --> 31:32.260
都是有线程的

31:32.260 --> 31:33.180
可以我们下节课

31:33.180 --> 31:34.980
再说一些线程的中间键

31:34.980 --> 31:36.700
给大家立刻表格出来就行了

31:36.700 --> 31:36.820
好

31:36.820 --> 31:37.860
这就是基本上

31:37.860 --> 31:39.460
这些课给大家练习一下

31:39.460 --> 31:40.540
也练一下KOA里面

31:40.540 --> 31:41.540
怎么去写个中间键

31:41.540 --> 31:42.300
其实并不复杂

31:43.540 --> 31:43.860
好了

31:43.860 --> 31:44.900
这就是这一课的内容

