WEBVTT

00:01.280 --> 00:06.800
好 接下来我们来看一下 使用哪些第三方库可以减化我们的操作流程

00:07.360 --> 00:11.400
我们之前要完成运行 先要编译 再要运行 挺麻烦的

00:11.920 --> 00:15.680
其实有些第三方库可以减化这个流程 首先给大家介绍第一个库

00:16.200 --> 00:20.840
叫做ts load的这个库 这个库来做什么用的呢 他可以

00:21.880 --> 00:23.480
将ts代码

00:24.480 --> 00:26.400
将ts代码

00:27.200 --> 00:28.640
编在内存中

00:29.440 --> 00:32.680
在内存中编译完成编译

00:33.280 --> 00:41.360
我们之前编译总是要把它编译到电视目录里边去 对吧 现在呢 使用这个库呢 它只需要在内存中就可以完成编译

00:41.920 --> 00:44.160
同时完成运行

00:45.120 --> 00:48.480
这样子呢 就可以省略掉先编译再运行的这个流程了

00:48.920 --> 00:50.480
OK 我们来安装一下这个库

00:51.440 --> 00:56.880
通过CMPI 横杠计 权绝安装 因为它里面有命令行

00:57.520 --> 01:03.440
安装这个ts load 当然也可以使用这个工程化的安装 安装到工程里面

01:04.080 --> 01:07.520
也可以没问题 但是我这里 我就权绝安装吧 方便一点

01:08.240 --> 01:13.760
好 安装完成 安装完成之后呢 我们就可以使用这个命令了ts load这个命令

01:14.480 --> 01:20.640
然后呢 书写上 我的要编译的文件名src index.ts

01:21.200 --> 01:26.720
我们总有一个入口文件嘛 我们要启动工程总需要一个入口文件 因此呢 这里必须要指定一个文件名

01:27.360 --> 01:34.960
不用担心 这里的文件名指定之后呢 它仍然会使用这里的配置啊 这个ts config里面的配置呢 仍然是可以使用的

01:35.280 --> 01:38.080
啊 这里不用担心 好 回车 我看一下啊

01:39.040 --> 01:42.880
你看 输出了结果 它就完成了编译 并同时

01:43.440 --> 01:44.400
仔细了我们的代码

01:45.360 --> 01:49.360
而且呢 大家发现没有 它编译完成过后 有没有地上目录

01:50.240 --> 01:51.920
没有 有没有介绍文件

01:52.480 --> 01:59.360
也没有 对吧 这样子呢 我们在开发阶段呢 很有用 我们开发阶段不需要把它生成一个最终的结果

01:59.600 --> 02:05.680
就跟我们开发react 开发无诱的时候啊 不需要你为pike去把它打包成一个文件

02:05.920 --> 02:11.520
不需要啊 我们在内存中完成这个编译就完成了就完事了啊 这是使用这个包啊

02:12.320 --> 02:17.760
但是呢 这个包有了之后呢 还是有些麻烦 因为我们每一次改动了代码 用到这里改动了代码

02:18.160 --> 02:21.120
改动了之后呢 我们又得去书写一次个命令

02:21.520 --> 02:25.040
虽然已经减轻了很多负担了 但是觉得还是有点麻烦

02:25.600 --> 02:33.040
有没有更简单的呢 可以监控我们代码的变化 如果代码变化了一保存 它就重新自动完成编译和运行

02:33.440 --> 02:37.920
有没有呢 有的啊 大家应该接触过这么一个包

02:38.480 --> 02:44.560
叫loader 应该接触过啊 你们开发express 开发ka这样的

02:45.200 --> 02:52.640
服务端应用程序的时候 需要去监测文件的变化 文件变化之后呢 去执行一些东西 那么就需要使用这个包

02:53.360 --> 02:59.600
这个包里面其他的东西啊 跟ts没有什么直接的关系 我们只是要用它呢 做什么事情呢

03:00.000 --> 03:04.160
要用它监测我们文件的变化啊 它主要是用于

03:05.440 --> 03:05.840
用于

03:07.120 --> 03:07.760
监测

03:08.480 --> 03:10.000
文件的变化

03:11.200 --> 03:16.400
好 我们来安装一下这么一个包啊 还是c n p m i全球安装啊

03:17.280 --> 03:17.600
loader

03:19.280 --> 03:24.000
好 那安装这个包安装完了过后呢 我们就可以使用这个loader这个命令

03:24.560 --> 03:26.880
然后呢来监测文件的变化

03:28.000 --> 03:29.120
好 我们来试一下啊

03:29.760 --> 03:30.160
清楚

03:30.960 --> 03:34.320
现在我们这样子写代码啊 这样子写命令loader

03:35.040 --> 03:36.400
监测文件的变化

03:36.960 --> 03:37.520
然后呢

03:38.480 --> 03:40.480
当文件发生变化的时候

03:41.280 --> 03:42.080
去执行

03:43.040 --> 03:44.160
执行expute

03:44.560 --> 03:45.040
expute

03:45.600 --> 03:46.000
执行

03:46.400 --> 03:49.440
执行啥呢 执行ts load这个命令

03:49.760 --> 03:52.720
文件一发生变化就去执行ts load这个命令

03:53.120 --> 03:56.160
然后呢ts load 执行哪个文件呢 执行src

03:56.560 --> 03:58.160
index.ts这个文件

03:58.640 --> 04:00.160
好 我们这样子来写这个命令

04:00.480 --> 04:00.880
回车

04:01.280 --> 04:01.680
看一下

04:02.400 --> 04:04.080
你看 现在watch模式打开了

04:04.400 --> 04:06.960
正在监测文件的变化 现在输出了结果

04:07.360 --> 04:10.000
这个结果是谁输出的 是这个ts load输出的

04:10.960 --> 04:14.000
现在我们到文件里边去改一下这个代码啊 随便改

04:14.320 --> 04:14.800
随便改

04:15.360 --> 04:19.680
一保存 你看文件变化了 它会重新变异 重新执行这个命令

04:20.080 --> 04:21.280
然后我们看到新的结果

04:21.840 --> 04:26.160
好 之后就很方便了啊 我们只需要改代码 改了过后一保存 结果就出来了

04:27.120 --> 04:32.080
好 但是每次写这个命令还是有点长对吧 我可以把这个命令

04:33.040 --> 04:33.600
复制一下

04:34.160 --> 04:37.760
把它放到哪 放到package 叫json里边

04:38.000 --> 04:39.760
放到这里边 给它写成一个脚本

04:40.720 --> 04:41.520
好 script

04:42.320 --> 04:45.840
写这么一个脚本 比方说dev吧 咱们开发模式

04:46.240 --> 04:47.600
然后运行这么一个命令

04:48.240 --> 04:52.720
好 之后呢 我要启动工程 启动开发模式 我们就可以这样子

04:54.640 --> 04:55.840
npng

04:56.320 --> 04:58.960
dev 通过这种模式来进行启动

04:59.360 --> 05:03.840
那么它会运行这个入口文件 index 点ts 你看监测模式打开了

05:04.160 --> 05:06.720
我们后边改动代码 过后一保存就可以了

05:08.160 --> 05:11.200
当然这里还有一些细节的问题 我把它说了一下吧

05:12.160 --> 05:16.000
嗯 现在呢 这个loadmone啊 它监测的范围有点广

05:16.720 --> 05:17.920
什么文件都在监测

05:18.320 --> 05:19.520
比方说这个json文件

05:20.320 --> 05:23.360
这个json文件一改变它 我加几个空格一改变它

05:23.520 --> 05:25.040
它同样要完成重新变异

05:25.680 --> 05:26.640
我们希望呢

05:27.360 --> 05:30.160
它只需要去监测ts文件就想了

05:30.480 --> 05:33.840
其他的文件对它没有什么关系 跟我们的元代码没有什么关系

05:34.000 --> 05:36.320
你就不用去监控了啊 只需要去监控

05:36.800 --> 05:37.840
ts文件就够了

05:38.480 --> 05:41.520
因此呢 我们这里可以配置一下啊 顶楼的网进行配置

05:42.480 --> 05:46.320
这里 在这个命令后边呢 加上这么一个横杠义

05:46.720 --> 05:50.000
横杠义表示extension 文件的扩展名

05:50.320 --> 05:53.360
你要监控的文件扩展名是ts

05:54.000 --> 05:55.120
再加上这么一个配置

05:55.760 --> 05:56.800
好 保存之后

05:57.200 --> 05:58.080
咱们再来看一下

05:58.720 --> 05:59.520
再重新启动

06:01.440 --> 06:02.480
npm-run

06:03.680 --> 06:04.320
重新启动

06:05.200 --> 06:06.400
好 启动完成

06:06.640 --> 06:07.440
然后运行出来

06:08.240 --> 06:12.320
现在我们去尝试改变一下这个json 这json文件试一下啊

06:12.640 --> 06:14.080
json文件 加几个空格

06:14.320 --> 06:14.800
保存

06:15.360 --> 06:16.080
有没有反应

06:16.480 --> 06:17.440
是不是还是没有反应

06:17.840 --> 06:19.120
因为像这些文件呢

06:19.280 --> 06:21.760
它已经补在它的监控范围之内了

06:22.000 --> 06:23.280
把这些文件就排除掉了

06:23.520 --> 06:26.080
我们只需要去监控这个ts 就行了

06:26.640 --> 06:27.920
这是第一个细节

06:28.720 --> 06:29.760
第二个细节呢

06:30.000 --> 06:32.320
就是有的时候呢 我们可能啊

06:32.560 --> 06:36.400
可能在这个文件夹之外呢 还有一些ts文件

06:37.440 --> 06:39.120
比方说这里 有个ts文件

06:39.680 --> 06:41.920
好 这个ts文件一改变 你看

06:42.400 --> 06:43.840
因为它是ts后维嘛

06:44.080 --> 06:45.600
所以说它也会被监控

06:45.920 --> 06:49.760
这个ts文件一改变 它同样会导致它重新执行

06:50.320 --> 06:51.600
这其实是没有必要的

06:51.760 --> 06:52.320
为什么呢

06:52.560 --> 06:54.720
因为我们的代码全在src目录下面

06:54.720 --> 06:55.840
外面的文件里别挂了

06:56.320 --> 06:58.320
所以说这里我们还可以对它进行配置

06:58.800 --> 06:59.680
进一步配置

07:00.240 --> 07:02.400
加上这个配置watch

07:03.200 --> 07:07.200
它监控的文件夹是src这个目录

07:07.600 --> 07:08.800
只监控这个目录

07:09.200 --> 07:10.240
好 咱们保存一下

07:10.640 --> 07:12.160
因此我这里重新运行

07:13.040 --> 07:14.080
重新运行

07:14.080 --> 07:15.120
npm装

07:15.440 --> 07:15.840
对

07:16.880 --> 07:18.160
好 重新运行之后

07:18.160 --> 07:19.360
我们再来看一下啊

07:19.600 --> 07:21.600
我们改动外面的ts文件

07:21.600 --> 07:22.560
这里随便改动

07:23.200 --> 07:24.720
改动外面的ts文件保存

07:25.280 --> 07:26.640
有没有触发重新变异

07:27.360 --> 07:28.640
并没有触发重新变异

07:28.880 --> 07:30.080
好 这样的目的就达到了

07:31.120 --> 07:33.680
ok 这就是使用这么两个库

07:33.680 --> 07:36.320
使用这么两个库来减化我们的开发流程

07:36.880 --> 07:37.840
是不是非常简单

07:37.840 --> 07:39.200
这一节是非常简单的

07:39.760 --> 07:40.480
而支持呢

07:40.480 --> 07:44.000
我们就达到这么一个简单的开发环境

07:44.320 --> 07:45.920
我们在开发的过程中

07:45.920 --> 07:46.960
可以使用这个命令

07:48.080 --> 07:49.040
npm

07:49.760 --> 07:50.240
div

07:50.240 --> 07:50.880
这个命令

07:50.880 --> 07:51.760
来完成运行

07:52.400 --> 07:53.920
当我们开发完成之后

07:53.920 --> 07:55.120
可以使用tsc

07:56.000 --> 07:56.960
可以使用这个命令

07:58.320 --> 07:59.360
开发完成之后

07:59.360 --> 08:00.480
使用tsc

08:00.480 --> 08:02.640
来完成最终的打包和编译

08:02.640 --> 08:04.320
那么生成到第十目录

08:04.320 --> 08:05.520
可以看到编译的结果

08:06.320 --> 08:09.520
ok 我们达到了这么一个简单的开发环境

08:09.520 --> 08:10.400
环境准备好了

08:10.400 --> 08:11.760
那么咱们下节课呢

08:11.760 --> 08:13.760
就开始正式的来学习

08:13.760 --> 08:15.040
TypeScript了

08:15.040 --> 08:16.400
ok 这节课就到这里了

08:17.040 --> 08:17.440
拜拜

