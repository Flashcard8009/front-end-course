WEBVTT

00:00.880 --> 00:06.880
我们来看如何向我们的工程中去添加一个TS的配置文件

00:06.880 --> 00:08.880
这里有两种办法

00:08.880 --> 00:12.880
第一种办法是直接在你的资源管理器这边

00:12.880 --> 00:15.880
点击右键去新建这么一个文件

00:16.880 --> 00:21.880
这个文件名就要取名为一个叫TSConfig.json

00:21.880 --> 00:23.880
它是一个json格式的文件

00:23.880 --> 00:24.880
建这么一个文件

00:24.880 --> 00:27.880
然后在这个文件里面去写配置

00:27.880 --> 00:29.880
这是第一种方式

00:29.880 --> 00:32.880
第二种方式是使用迷你行

00:32.880 --> 00:34.880
迷你行的方式

00:34.880 --> 00:37.880
使用TSC 两个横杠

00:37.880 --> 00:39.880
然后使用Init

00:39.880 --> 00:42.880
这样子一回车来生成这么一个配置文件

00:42.880 --> 00:43.880
你看这里提示的

00:43.880 --> 00:48.880
successfully created TSConfig.json file

00:48.880 --> 00:51.880
它生成了一个这么一个配置文件

00:51.880 --> 00:55.880
OK 我们来看一下这个配置文件它里面有什么内容

00:55.880 --> 00:59.880
这个配置文件里面它有很多很多的配置

00:59.880 --> 01:01.880
而且每一个配置后边它都有注释

01:01.880 --> 01:04.880
告诉你这个配置是做什么用的

01:04.880 --> 01:08.880
这些配置我们目前不需要一个一个去学习

01:08.880 --> 01:10.880
咱们在后边要用到的时候

01:10.880 --> 01:12.880
再往这个配置文件里面去添

01:12.880 --> 01:17.880
我们目前先把这些配置一个个全部把删掉

01:18.880 --> 01:21.880
删掉之后我来说一下这个配置

01:21.880 --> 01:23.880
这个配置是在配置什么

01:23.880 --> 01:26.880
这个配置实际上就是我们之前说的

01:26.880 --> 01:29.880
配置的是编译选项

01:29.880 --> 01:30.880
编译选项

01:30.880 --> 01:32.880
我们之前说

01:32.880 --> 01:35.880
TSC在编译我们的代码的时候

01:35.880 --> 01:38.880
它有很多的就是假设

01:38.880 --> 01:40.880
这些假设实际上是什么

01:40.880 --> 01:44.880
实际上就是编译选项的默认值

01:44.880 --> 01:45.880
我们在这些配置文件里边

01:45.880 --> 01:48.880
可以去修改这些编译选项

01:48.880 --> 01:52.880
好 这里我先介绍几个最基本的编译选项

01:52.880 --> 01:54.880
好 第一个编译选项

01:54.880 --> 01:56.880
Target

01:56.880 --> 01:58.880
这个编译选项指的是什么意思呢

01:58.880 --> 02:02.880
指的是它去编译我们的TS代码

02:02.880 --> 02:03.880
编译是什么结果

02:03.880 --> 02:05.880
编译成GS对吧

02:05.880 --> 02:07.880
它编译成GS的结果的时候

02:07.880 --> 02:10.880
它到底使用的是什么样的标准

02:10.880 --> 02:12.880
我们知道TS代码

02:12.880 --> 02:13.880
它是有各种各样标准的

02:13.880 --> 02:17.880
比如说ES3,ES5,ES6,ES7

02:17.880 --> 02:19.880
这些都是不同的标准

02:19.880 --> 02:21.880
不同的标准下面使用的代码格式

02:21.880 --> 02:23.880
可能会有一些差异

02:23.880 --> 02:25.880
因此这个地方配置

02:25.880 --> 02:27.880
它是告诉TS

02:27.880 --> 02:29.880
编译的时候,编译的结果

02:29.880 --> 02:31.880
它使用的是什么ES标准

02:31.880 --> 02:33.880
使用的是哪一套标准

02:33.880 --> 02:36.880
这里面的默认值是ES3

02:36.880 --> 02:38.880
这个标准的话就太低了

02:38.880 --> 02:39.880
完全太低了

02:39.880 --> 02:40.880
因为我们现在知道

02:40.880 --> 02:42.880
我们编写的是漏的环境

02:42.880 --> 02:44.880
漏的环境下面实际上

02:44.880 --> 02:46.880
目前已经支持到哪了

02:46.880 --> 02:48.880
支持到ES7了对吧

02:48.880 --> 02:50.880
所以说我们可以改一下

02:50.880 --> 02:52.880
这里改成什么呢

02:52.880 --> 02:53.880
改成ES7

02:53.880 --> 02:54.880
但是大家要注意

02:54.880 --> 02:58.880
这里实际上是没有ES7这个选项的

02:58.880 --> 02:59.880
为什么呢

02:59.880 --> 03:02.880
因为ES7并不是标准的教法

03:02.880 --> 03:03.880
我们知道之前

03:03.880 --> 03:05.880
好像第几个的时候就说过了

03:05.880 --> 03:07.880
我们的ES呢

03:07.880 --> 03:08.880
到ES6的时候

03:08.880 --> 03:10.880
它使用的是连份作为编号

03:10.880 --> 03:12.880
因此我们要选择ES7

03:12.880 --> 03:14.880
就选择ES2016

03:14.880 --> 03:17.880
ES7这个版本是2016年发布的

03:17.880 --> 03:19.880
我们选择ES2016

03:19.880 --> 03:20.880
这是这个配置

03:20.880 --> 03:21.880
很简单

03:21.880 --> 03:22.880
这是配置什么呢

03:22.880 --> 03:24.880
这是配置

03:24.880 --> 03:28.880
编译目标代码的

03:28.880 --> 03:29.880
标准

03:29.880 --> 03:31.880
版本标准

03:31.880 --> 03:32.880
使用的是哪一块

03:32.880 --> 03:34.880
版本标准

03:34.880 --> 03:35.880
好 第二个配置

03:35.880 --> 03:36.880
第二个配置呢

03:36.880 --> 03:38.880
我们通常还会写的这个东西

03:39.880 --> 03:40.880
这一块配置呢

03:40.880 --> 03:42.880
对我们目前学习没有什么用

03:42.880 --> 03:43.880
我说一下吧

03:43.880 --> 03:45.880
这个指的配置什么呢

03:45.880 --> 03:46.880
配置的是

03:46.880 --> 03:47.880
这一块配置

03:47.880 --> 03:48.880
它配置的是

03:48.880 --> 03:49.880
编译目标

03:49.880 --> 03:50.880
也就是编译结果

03:50.880 --> 03:52.880
也就是介石代码

03:52.880 --> 03:54.880
编译目标使用的

03:54.880 --> 03:58.880
模块化标准

03:58.880 --> 04:00.880
使用的是模块化标准

04:00.880 --> 04:02.880
使用的是哪一套模块化标准

04:02.880 --> 04:03.880
我们平时

04:03.880 --> 04:05.880
建的模块化标准呢

04:05.880 --> 04:06.880
一般有这么两个

04:06.880 --> 04:08.880
一个呢是common介石

04:08.880 --> 04:10.880
就是漏的环境里边的标准

04:10.880 --> 04:12.880
一个呢是

04:12.880 --> 04:14.880
就是ES6里面的标准

04:14.880 --> 04:15.880
这两个都可以

04:15.880 --> 04:16.880
这两个都可以

04:16.880 --> 04:17.880
这里面呢

04:17.880 --> 04:19.880
由于我们使用的是漏的环境

04:19.880 --> 04:20.880
所以说我们这里呢

04:20.880 --> 04:22.880
配置为common介石

04:22.880 --> 04:25.880
这个有智能提示的common介石

04:25.880 --> 04:26.880
但是呢

04:26.880 --> 04:27.880
目前呢

04:27.880 --> 04:28.880
还不涉及到模块化

04:28.880 --> 04:29.880
所以说

04:29.880 --> 04:30.880
我们这里先把写着吧

04:30.880 --> 04:31.880
写着以后再说

04:31.880 --> 04:32.880
以后呢

04:32.880 --> 04:33.880
我讲模块化的时候呢

04:33.880 --> 04:34.880
再详细说

04:34.880 --> 04:35.880
好

04:35.880 --> 04:36.880
这是关于这个配置

04:36.880 --> 04:37.880
好

04:37.880 --> 04:38.880
这两个配置完了

04:38.880 --> 04:39.880
其实你看一下

04:39.880 --> 04:40.880
看一下这个代码

04:40.880 --> 04:41.880
它就已经不爆出了

04:41.880 --> 04:42.880
已经不爆出了

04:42.880 --> 04:44.880
为什么不爆出了呢

04:44.880 --> 04:46.880
因为我们现在的编译目标

04:46.880 --> 04:47.880
是2016

04:47.880 --> 04:48.880
是最新的版本

04:48.880 --> 04:49.880
ES7这个版本

04:49.880 --> 04:50.880
也不算最新的

04:50.880 --> 04:52.880
是ES7这个版本

04:52.880 --> 04:54.880
那么在ES7这个版本里边呢

04:54.880 --> 04:55.880
内彻这个关键字

04:55.880 --> 04:57.880
它编译的结果还是内彻

04:57.880 --> 04:58.880
咱们来试一下

04:58.880 --> 05:00.880
试一下这个编译

05:00.880 --> 05:01.880
好

05:01.880 --> 05:02.880
这里呢

05:02.880 --> 05:03.880
我书写一个命令

05:03.880 --> 05:04.880
TSC来完成编译

05:04.880 --> 05:05.880
注意

05:05.880 --> 05:07.880
现在由于我们

05:07.880 --> 05:09.880
添加了配置文件

05:09.880 --> 05:10.880
因此呢

05:10.880 --> 05:12.880
我们在编译的时候呢

05:12.880 --> 05:14.880
不能再跟文件

05:14.880 --> 05:15.880
文件名了

05:15.880 --> 05:16.880
不能像之前那样子

05:16.880 --> 05:17.880
跟一下这个文件名

05:17.880 --> 05:18.880
不能再跟了

05:18.880 --> 05:20.880
为什么不能再跟了呢

05:20.880 --> 05:21.880
有了配置文件之后

05:21.880 --> 05:22.880
你再写

05:22.880 --> 05:24.880
再跟一个文件名的话

05:24.880 --> 05:26.880
它会忽略掉配置文件

05:26.880 --> 05:27.880
这里呢

05:27.880 --> 05:28.880
我们把它记一笔

05:28.880 --> 05:30.880
使用了配置文件之后

05:30.880 --> 05:32.880
使用了配置文件后

05:34.880 --> 05:36.880
使用TSC

05:36.880 --> 05:38.880
进行编译时

05:38.880 --> 05:40.880
不能

05:41.880 --> 05:44.880
不能跟上文件名

05:44.880 --> 05:45.880
不能跟上文件名

05:45.880 --> 05:47.880
如果跟上文件名的话

05:47.880 --> 05:49.880
它就会忽略掉配置文件

05:49.880 --> 05:51.880
如果跟上文件名

05:51.880 --> 05:54.880
会忽略配置文件

05:54.880 --> 05:56.880
这个地方大家注意一下

05:56.880 --> 05:57.880
所以说后面呢

05:57.880 --> 05:58.880
我们编译的时候呢

05:58.880 --> 05:59.880
直接输入这个

05:59.880 --> 06:00.880
TSC这个命令

06:00.880 --> 06:01.880
回车就行了

06:01.880 --> 06:03.880
让它往前编译

06:03.880 --> 06:04.880
好

06:04.880 --> 06:05.880
编译完成之后

06:05.880 --> 06:07.880
咱们再看一下这个编译结果

06:07.880 --> 06:08.880
你看

06:08.880 --> 06:09.880
这个编译结果里边

06:09.880 --> 06:10.880
是不是就是那次了

06:10.880 --> 06:11.880
对吧

06:11.880 --> 06:12.880
因此呢不会有

06:12.880 --> 06:13.880
全局辩量的污染了

06:13.880 --> 06:15.880
现在就没有什么问题了

06:15.880 --> 06:17.880
然后我们再继续看

06:17.880 --> 06:18.880
比方说我们在

06:18.880 --> 06:19.880
输写单码的时候呢

06:19.880 --> 06:20.880
在TS里面

06:20.880 --> 06:21.880
输写单码的时候

06:21.880 --> 06:22.880
你会发现

06:22.880 --> 06:24.880
现在我们去可以使用什么

06:24.880 --> 06:25.880
可以使用document

06:25.880 --> 06:27.880
可以使用这些

06:27.880 --> 06:28.880
这些对象

06:28.880 --> 06:29.880
为什么可以使用呢

06:29.880 --> 06:30.880
还温度

06:30.880 --> 06:32.880
因为它默认的环境

06:32.880 --> 06:34.880
是浏览器的环境

06:34.880 --> 06:35.880
这是它的默认值

06:35.880 --> 06:36.880
因此呢

06:36.880 --> 06:37.880
我们现在编写的是

06:37.880 --> 06:38.880
漏的环境

06:38.880 --> 06:39.880
我们不需要这些东西

06:39.880 --> 06:40.880
有的时候呢

06:40.880 --> 06:42.880
有的人我们反而容易写错

06:42.880 --> 06:44.880
我们不需要使用这些对象

06:44.880 --> 06:46.880
因此我们要更改一下

06:46.880 --> 06:47.880
它的环境

06:47.880 --> 06:48.880
环境的话

06:48.880 --> 06:49.880
我们这里

06:49.880 --> 06:51.880
通过这个命令

06:51.880 --> 06:52.880
表示什么呢

06:52.880 --> 06:54.880
表示默认情况下

06:54.880 --> 06:56.880
TS使用的是哪一个库

06:56.880 --> 06:57.880
就是使用的

06:57.880 --> 06:58.880
全局环境

06:58.880 --> 07:00.880
是一些怎么样的一个环境

07:00.880 --> 07:01.880
那么这里面呢

07:01.880 --> 07:02.880
有很多曲子

07:02.880 --> 07:04.880
它这里是个

07:04.880 --> 07:05.880
输主

07:05.880 --> 07:06.880
也就是说这里面

07:06.880 --> 07:07.880
有很多环境

07:07.880 --> 07:08.880
给它加进来

07:08.880 --> 07:09.880
我们给它加的环境呢

07:09.880 --> 07:12.880
首先是一个ES2016

07:12.880 --> 07:14.880
就是ES7的这个环境

07:14.880 --> 07:16.880
ES7里面一些全局的东西呢

07:16.880 --> 07:17.880
可以在这里面

07:17.880 --> 07:18.880
可以在TS代码里面使用

07:18.880 --> 07:20.880
它默认情况下呢

07:20.880 --> 07:21.880
还会有这个环境

07:21.880 --> 07:22.880
多么这个环境

07:22.880 --> 07:23.880
但是呢

07:23.880 --> 07:24.880
现在呢

07:24.880 --> 07:25.880
我们不给它加这个环境了

07:25.880 --> 07:26.880
这个环境去掉

07:26.880 --> 07:29.880
只保留一个ES2016的环境

07:29.880 --> 07:31.880
好,有同学想问了

07:31.880 --> 07:32.880
老师啊

07:32.880 --> 07:33.880
你不说

07:33.880 --> 07:35.880
现在我们开发的是漏的环境吗

07:35.880 --> 07:37.880
我们就去加一个漏的呢

07:37.880 --> 07:38.880
因为这里没有

07:38.880 --> 07:40.880
它这里没默认情况下

07:40.880 --> 07:41.880
它没有这个环境

07:41.880 --> 07:42.880
可以跟我们配置

07:42.880 --> 07:43.880
那么

07:43.880 --> 07:45.880
如果你没有漏的这个环境

07:45.880 --> 07:46.880
会怎么样呢

07:46.880 --> 07:47.880
大家看一下啊

07:47.880 --> 07:48.880
看一下

07:48.880 --> 07:49.880
我们在TS代码里面

07:49.880 --> 07:51.880
写一个console

07:51.880 --> 07:53.880
大克门车的一些肯定没有了

07:53.880 --> 07:54.880
大克门车肯定没有了

07:54.880 --> 07:55.880
现在我们写一个console

07:55.880 --> 07:56.880
输出

07:56.880 --> 07:58.880
你会发现console都没有了

07:58.880 --> 07:59.880
我们写一个输出

07:59.880 --> 08:00.880
它要爆错了

08:00.880 --> 08:02.880
它说没有这个对象

08:02.880 --> 08:03.880
console

08:03.880 --> 08:04.880
为什么呢

08:04.880 --> 08:05.880
因为现在我们把这个

08:05.880 --> 08:07.880
浏览器环境给它去掉之后

08:07.880 --> 08:09.880
它又不是漏的环境

08:09.880 --> 08:11.880
它不知道这是漏的环境

08:11.880 --> 08:12.880
它就不知道

08:12.880 --> 08:14.880
有这么一个全局对象

08:14.880 --> 08:15.880
console

08:15.880 --> 08:16.880
所以说

08:16.880 --> 08:18.880
这个地方就有点麻烦了

08:18.880 --> 08:20.880
我们现在把浏览器环境去掉了

08:20.880 --> 08:22.880
没有那些温度对象啊

08:22.880 --> 08:23.880
大克门车对象进行干扰

08:23.880 --> 08:24.880
但是呢

08:24.880 --> 08:25.880
由于

08:25.880 --> 08:26.880
去掉了浏览器环境

08:26.880 --> 08:28.880
这个console也没了

08:28.880 --> 08:29.880
好,这个时候怎么办呢

08:29.880 --> 08:30.880
我们应该

08:30.880 --> 08:31.880
给它加入一些

08:31.880 --> 08:33.880
漏的环境的全局辩量

08:33.880 --> 08:34.880
但是呢

08:34.880 --> 08:36.880
这个里面是没法配置漏的环境的

08:36.880 --> 08:37.880
这个时候怎么办

08:37.880 --> 08:38.880
我们需要安装一个

08:38.880 --> 08:40.880
第三方库

08:40.880 --> 08:41.880
这个地方

08:41.880 --> 08:42.880
三方库的名字叫做

08:42.880 --> 08:44.880
taps

08:44.880 --> 08:45.880
漏的

08:45.880 --> 08:46.880
这个东西

08:46.880 --> 08:47.880
我们以后

08:47.880 --> 08:49.880
使用第三方库的时候

08:49.880 --> 08:50.880
还会经常用到

08:50.880 --> 08:52.880
我先大概提一下

08:52.880 --> 08:53.880
这个东西是什么东西

08:53.880 --> 08:55.880
这个taps

08:55.880 --> 08:57.880
taps是一个官方

08:57.880 --> 08:59.880
就是ts官方的标准

08:59.880 --> 09:00.880
内型库

09:00.880 --> 09:01.880
是一个ts

09:01.880 --> 09:04.880
官方的内型库

09:04.880 --> 09:06.880
其中包含了

09:06.880 --> 09:09.880
很多很多

09:09.880 --> 09:11.880
很多

09:11.880 --> 09:14.880
对ts代码的

09:14.880 --> 09:16.880
内型描述

09:16.880 --> 09:18.880
好,这里简单解释一下

09:18.880 --> 09:20.880
这里是什么意思

09:20.880 --> 09:21.880
就是我们之后

09:21.880 --> 09:23.880
使用ts编写代码的时候呢

09:23.880 --> 09:25.880
会遇到一个问题

09:25.880 --> 09:27.880
就是我可能要去

09:27.880 --> 09:29.880
使用一些第三方的库

09:29.880 --> 09:30.880
第三方说咱们之前

09:30.880 --> 09:32.880
有学到很多的第三方库了

09:32.880 --> 09:33.880
对吧

09:33.880 --> 09:34.880
什么exus

09:34.880 --> 09:35.880
什么nodash

09:35.880 --> 09:36.880
什么mock

09:36.880 --> 09:37.880
什么jekrary

09:37.880 --> 09:39.880
这些都是第三方库

09:39.880 --> 09:41.880
我们会去使用一些

09:41.880 --> 09:42.880
第三方的库

09:42.880 --> 09:43.880
但是呢

09:43.880 --> 09:44.880
这些第三方的库呢

09:44.880 --> 09:46.880
它不是用ts编写的

09:46.880 --> 09:48.880
它是用ts编写的

09:48.880 --> 09:50.880
那么现在就测教一个问题

09:50.880 --> 09:52.880
我在ts代码里边

09:52.880 --> 09:54.880
能不能使用ts的库呢

09:54.880 --> 09:56.880
没问题

09:56.880 --> 09:57.880
可以使用

09:57.880 --> 09:59.880
但是问题在啥呢

09:59.880 --> 10:01.880
你去使用一个ts的库的时候

10:01.880 --> 10:04.880
ts的库它是没有内型检查的

10:04.880 --> 10:06.880
那么就

10:06.880 --> 10:08.880
我们既然在使用ts

10:08.880 --> 10:09.880
我们希望

10:09.880 --> 10:10.880
不仅我们的代码

10:10.880 --> 10:12.880
可以接受内型检查

10:12.880 --> 10:13.880
其他那些代码

10:13.880 --> 10:16.880
我们也需要对它进行内型检查

10:16.880 --> 10:17.880
但是它写的代码

10:17.880 --> 10:18.880
是用ts写的

10:18.880 --> 10:19.880
没有内型检查

10:19.880 --> 10:21.880
没有内型系统

10:21.880 --> 10:22.880
那么这个时候呢

10:22.880 --> 10:23.880
就可以去

10:23.880 --> 10:25.880
这个库里面去找一找

10:25.880 --> 10:26.880
相应的

10:26.880 --> 10:29.880
有没有对应的内型库

10:29.880 --> 10:31.880
比方说jQuery吧

10:31.880 --> 10:32.880
比方说

10:32.880 --> 10:33.880
我举个例子

10:33.880 --> 10:34.880
jQuery

10:34.880 --> 10:36.880
jQuery是用什么写的

10:36.880 --> 10:38.880
用js写的对吧

10:38.880 --> 10:40.880
没有内型检查

10:40.880 --> 10:42.880
没有内型检查

10:42.880 --> 10:43.880
但是呢

10:43.880 --> 10:44.880
我们现在用ts代码里边

10:44.880 --> 10:46.880
想去使用这个jQuery

10:46.880 --> 10:47.880
怎么办呢

10:47.880 --> 10:49.880
我们可以去安装

10:49.880 --> 10:51.880
可以安装

10:51.880 --> 10:52.880
Types

10:52.880 --> 10:53.880
斜杠

10:53.880 --> 10:55.880
然后jQuery

10:55.880 --> 10:57.880
那么这个包里面

10:57.880 --> 10:58.880
它有什么东西呢

10:58.880 --> 11:02.880
它是为jQuery库

11:02.880 --> 11:05.880
添加内型定义

11:05.880 --> 11:06.880
添加内型定义

11:06.880 --> 11:08.880
jQuery里面多了符号

11:08.880 --> 11:09.880
是什么样的内型

11:09.880 --> 11:10.880
然后多了

11:10.880 --> 11:11.880
它是个函数

11:11.880 --> 11:12.880
函数里面的参数

11:12.880 --> 11:13.880
是什么内型

11:13.880 --> 11:15.880
都是在这种库里面去定义的

11:15.880 --> 11:16.880
咱们在后边的时候

11:16.880 --> 11:17.880
在进阶部分

11:17.880 --> 11:19.880
我们还会学习

11:19.880 --> 11:20.880
我们自己写的js代码

11:20.880 --> 11:21.880
自己写的js库

11:21.880 --> 11:23.880
我不想把它改成ts

11:23.880 --> 11:25.880
我可以专门写一个文件

11:25.880 --> 11:27.880
来对这个js代码进行描述

11:27.880 --> 11:29.880
描述这个js代码里边

11:29.880 --> 11:31.880
用到了哪些内型

11:31.880 --> 11:32.880
每个函数是什么内型

11:32.880 --> 11:33.880
可以专门来写个文件

11:33.880 --> 11:34.880
进行描述的

11:34.880 --> 11:35.880
所以说

11:35.880 --> 11:37.880
这些库就是用来描述

11:37.880 --> 11:39.880
那些已有的js代码

11:39.880 --> 11:41.880
他们是一个什么样的内型

11:41.880 --> 11:43.880
而我们的load环境

11:43.880 --> 11:44.880
load环境里面

11:44.880 --> 11:45.880
都是用js写的

11:45.880 --> 11:46.880
所以说

11:46.880 --> 11:48.880
我们得安装一个相应的库

11:48.880 --> 11:50.880
去安装一个相应的库

11:50.880 --> 11:52.880
来去描述load环境下面的

11:52.880 --> 11:54.880
各种各样的内型

11:54.880 --> 11:55.880
浏览器环境

11:55.880 --> 11:56.880
ts是自带的

11:56.880 --> 11:57.880
默认给你搞定的

11:57.880 --> 11:58.880
但是load环境

11:58.880 --> 11:59.880
它没有搞定

11:59.880 --> 12:00.880
所以说你得去安装一个

12:00.880 --> 12:02.880
这么一些库

12:02.880 --> 12:04.880
关于这个Types这个库

12:04.880 --> 12:07.880
我们后边讲自定义

12:07.880 --> 12:08.880
内型文件的时候

12:08.880 --> 12:09.880
我会详细的说

12:09.880 --> 12:11.880
现在先了解一下就行了

12:11.880 --> 12:12.880
OK

12:12.880 --> 12:13.880
我们现在去安装一下

12:13.880 --> 12:14.880
同样的

12:14.880 --> 12:16.880
可以使用CMP去安装

12:16.880 --> 12:18.880
i

12:18.880 --> 12:20.880
横杠加个D

12:20.880 --> 12:22.880
表示开发一带

12:22.880 --> 12:23.880
因为这个东西

12:23.880 --> 12:24.880
在运行的时候

12:24.880 --> 12:25.880
我们就不需要了

12:25.880 --> 12:26.880
只是在开发的阶段

12:26.880 --> 12:27.880
需要这个东西

12:27.880 --> 12:30.880
Types 写杠load

12:31.880 --> 12:32.880
安装一下

12:32.880 --> 12:33.880
稍等片刻等

12:33.880 --> 12:34.880
安装完成

12:34.880 --> 12:36.880
安装完成之后

12:36.880 --> 12:37.880
我们以后

12:37.880 --> 12:38.880
在ts代码里面

12:38.880 --> 12:40.880
你看就不知道错了

12:40.880 --> 12:41.880
因为现在有了

12:41.880 --> 12:42.880
内型文件

12:42.880 --> 12:43.880
内型约束文件

12:43.880 --> 12:44.880
我们看一下吧

12:45.880 --> 12:46.880
load嘛就是

12:46.880 --> 12:47.880
你看这里有个Types这个库

12:47.880 --> 12:48.880
这个库里面

12:48.880 --> 12:50.880
它就有各种各样的ts文件

12:50.880 --> 12:51.880
看到没

12:51.880 --> 12:52.880
各种各样的ts文件

12:52.880 --> 12:53.880
用来做什么呢

12:53.880 --> 12:55.880
用来描述

12:55.880 --> 12:57.880
我们的load的环境下面的

12:57.880 --> 12:58.880
这些常用的库

12:58.880 --> 12:59.880
比方说fs

12:59.880 --> 13:00.880
文件处理库

13:00.880 --> 13:01.880
或者是pass

13:01.880 --> 13:02.880
或者是ul

13:02.880 --> 13:04.880
这些库就可以描述出来了

13:04.880 --> 13:05.880
好

13:05.880 --> 13:07.880
这里不爆错了

13:07.880 --> 13:08.880
这是这一步

13:08.880 --> 13:09.880
我们配置一下

13:09.880 --> 13:11.880
我们的执行环境

13:11.880 --> 13:12.880
好 接下来

13:12.880 --> 13:13.880
我们继续完善这个配置

13:13.880 --> 13:15.880
今天把这个配置

13:15.880 --> 13:16.880
做的好一点

13:16.880 --> 13:18.880
现在的我们的代码

13:18.880 --> 13:19.880
都在根目录下面

13:19.880 --> 13:21.880
我觉得不太好

13:21.880 --> 13:22.880
我们应该像哪一种

13:22.880 --> 13:24.880
应该像reaction

13:24.880 --> 13:26.880
或者是像vue那样子

13:26.880 --> 13:27.880
我们把我们的代码

13:27.880 --> 13:30.880
放到src目录下边

13:30.880 --> 13:32.880
里面存放的是我们的原代码

13:32.880 --> 13:33.880
好 OK

13:33.880 --> 13:34.880
我们这里

13:34.880 --> 13:37.880
新建一个文件夹src

13:37.880 --> 13:39.880
在这个文件夹里边

13:39.880 --> 13:40.880
来存放

13:40.880 --> 13:42.880
来存放我们的

13:42.880 --> 13:43.880
原代码文件

13:43.880 --> 13:45.880
我们先把这个编译结果商调

13:46.880 --> 13:48.880
然后把我们的ts代码

13:48.880 --> 13:50.880
放到src目录下边

13:50.880 --> 13:51.880
移动过去

13:52.880 --> 13:53.880
好 这里

13:53.880 --> 13:54.880
放出一下

13:55.880 --> 13:56.880
好 现在我们的代码

13:56.880 --> 13:57.880
以后我们的ts代码

13:57.880 --> 13:58.880
全部放到

13:58.880 --> 14:00.880
这个src目录下边

14:00.880 --> 14:01.880
让他看一下

14:01.880 --> 14:02.880
放到这个目录下边

14:03.880 --> 14:04.880
然后也就是说

14:04.880 --> 14:05.880
我现在要告诉

14:05.880 --> 14:07.880
告诉这个ts

14:07.880 --> 14:09.880
这个编译器

14:09.880 --> 14:11.880
以后你找代码的时候

14:11.880 --> 14:13.880
应该在src目录下面去找

14:13.880 --> 14:16.880
他现在会不会考虑src呢

14:16.880 --> 14:17.880
咱们来试一下

14:18.880 --> 14:19.880
咱们来试一下

14:19.880 --> 14:20.880
好 这里

14:20.880 --> 14:21.880
把它清空

14:22.880 --> 14:24.880
然后使用tsc命令回车

14:24.880 --> 14:25.880
看一下能不能找到

14:25.880 --> 14:27.880
这个index的ts

14:27.880 --> 14:28.880
你会发现

14:28.880 --> 14:29.880
他仍然能找到

14:29.880 --> 14:31.880
并且完成了编译

14:31.880 --> 14:32.880
给他编译结果

14:32.880 --> 14:33.880
他完成了编译

14:33.880 --> 14:34.880
也就是说

14:34.880 --> 14:35.880
默认情况下

14:35.880 --> 14:38.880
当我们使用这个命令的时候

14:38.880 --> 14:39.880
他编译的是哪里呢

14:39.880 --> 14:41.880
编译的是整个工程

14:42.880 --> 14:44.880
包括src目录

14:44.880 --> 14:45.880
包括src目录下面的

14:45.880 --> 14:46.880
所有目录

14:46.880 --> 14:48.880
全部都包含进来

14:48.880 --> 14:50.880
整个工程都会参与编译

14:50.880 --> 14:51.880
只要他看见了ts代码

14:51.880 --> 14:53.880
他就会把它编译成为

14:53.880 --> 14:54.880
解释

14:54.880 --> 14:55.880
但是这样子呢

14:55.880 --> 14:57.880
不是我们想要的

14:57.880 --> 14:59.880
我们想要的只是让他去

14:59.880 --> 15:01.880
查找src这个目录

15:01.880 --> 15:03.880
其他的目录你不用管

15:03.880 --> 15:04.880
好 这个时候怎么办呢

15:04.880 --> 15:05.880
比方说我在跟目录下面

15:05.880 --> 15:07.880
学一些ts你不要管

15:07.880 --> 15:08.880
你只需要去看

15:08.880 --> 15:10.880
src目录就行了

15:10.880 --> 15:11.880
那么怎么办

15:11.880 --> 15:13.880
我们可以进行这样的配置

15:13.880 --> 15:14.880
在配置文件里边

15:14.880 --> 15:16.880
我们书写上

15:16.880 --> 15:18.880
注意就不再是编译选项了

15:18.880 --> 15:19.880
不再是这个了

15:19.880 --> 15:21.880
我们在下边继续书写

15:21.880 --> 15:23.880
一个东西叫做include

15:23.880 --> 15:24.880
表什么意思呢

15:24.880 --> 15:25.880
表示的是

15:25.880 --> 15:27.880
要编译的文件夹

15:27.880 --> 15:30.880
编译哪个文件夹里面的代码

15:30.880 --> 15:32.880
好 这个时候是一个数组

15:32.880 --> 15:34.880
你可以写多个文件夹路径

15:34.880 --> 15:35.880
好 这里呢

15:35.880 --> 15:37.880
我只需要写一个就行了

15:37.880 --> 15:38.880
写一个路径就行了

15:38.880 --> 15:42.880
就是当前目录下面的src目录

15:42.880 --> 15:44.880
只需要编译这里就行了

15:44.880 --> 15:46.880
好 咱们再保存一下

15:46.880 --> 15:48.880
现在src下面

15:48.880 --> 15:50.880
我们把这个商调

15:50.880 --> 15:53.880
src下面有一个ts文件

15:53.880 --> 15:55.880
我在跟目录下面呢

15:55.880 --> 15:57.880
再去建一个ts文件

15:57.880 --> 15:59.880
也是in这个时候ts

15:59.880 --> 16:01.880
好 咱们不写代码

16:01.880 --> 16:05.880
直接试一下tsc命令 回车

16:05.880 --> 16:07.880
好 完成编译

16:07.880 --> 16:10.880
你会发现src目录下面的

16:10.880 --> 16:12.880
这个ts文件得到了编译

16:12.880 --> 16:15.880
但是跟目录下面的就没有编译了

16:15.880 --> 16:17.880
这是我们想要的东西

16:17.880 --> 16:19.880
我们想 以后咱们的ts代码

16:19.880 --> 16:22.880
全部写到src目录下面

16:22.880 --> 16:24.880
好 这是这一块

16:24.880 --> 16:26.880
那么这里我再顺便说一下

16:26.880 --> 16:28.880
如果有这么一个需求

16:28.880 --> 16:32.880
就是说我不是编译整个文件夹

16:32.880 --> 16:35.880
而是编译文件夹里面的

16:35.880 --> 16:37.880
某一个文件

16:37.880 --> 16:38.880
那么这个时候怎么办呢

16:38.880 --> 16:40.880
这个时候你可以写这个配置

16:40.880 --> 16:42.880
叫做files

16:42.880 --> 16:43.880
就不写include

16:43.880 --> 16:44.880
就写files

16:44.880 --> 16:46.880
好 写files的时候

16:46.880 --> 16:48.880
这里面我就可以指定一个

16:48.880 --> 16:50.880
指定其中一个文件

16:50.880 --> 16:52.880
当然这里可以写多个文件

16:52.880 --> 16:54.880
那么它只会去编译这个文件

16:54.880 --> 16:56.880
以及这个文件

16:56.880 --> 16:58.880
它所依赖的文件

16:58.880 --> 16:59.880
它只会去完成这样的编译

16:59.880 --> 17:01.880
就好像一个入口一样

17:01.880 --> 17:03.880
不过我觉得目前没有必要

17:03.880 --> 17:06.880
目前我们直接编译整个src目录就行了

17:06.880 --> 17:08.880
好 这是关于编译的目标

17:08.880 --> 17:11.880
编译的目标目录

17:11.880 --> 17:13.880
OK 我们再来看

17:13.880 --> 17:16.880
现在它的编译结果

17:16.880 --> 17:18.880
是放到同一个位置的

17:18.880 --> 17:21.880
跟我们的原代码是放到同一个位置的

17:21.880 --> 17:23.880
这不是我们想要的

17:23.880 --> 17:24.880
我们想要的是啥呢

17:24.880 --> 17:25.880
跟这个rex

17:25.880 --> 17:27.880
跟5u是一样的

17:27.880 --> 17:30.880
我们希望它把编译的结果

17:30.880 --> 17:31.880
放到哪呢

17:31.880 --> 17:32.880
专门放一个目录

17:32.880 --> 17:33.880
什么目录啊

17:33.880 --> 17:35.880
大家应该都非常熟悉的

17:35.880 --> 17:36.880
dist

17:36.880 --> 17:39.880
我们希望它把编译的结果放到这个目录

17:39.880 --> 17:41.880
那么这个时候怎么办呢

17:41.880 --> 17:42.880
好 这个时候呢

17:42.880 --> 17:44.880
我们可以进行配置

17:44.880 --> 17:45.880
在哪里配置呢

17:45.880 --> 17:48.880
在编译选项里边进行配置

17:48.880 --> 17:49.880
配置啥呢

17:49.880 --> 17:50.880
配置这个东西

17:50.880 --> 17:54.880
叫做out dir

17:54.880 --> 17:55.880
out directory

17:55.880 --> 17:57.880
输出的目录在了

17:57.880 --> 17:58.880
就是编译的结果

17:58.880 --> 18:00.880
把它放到哪个目录下面

18:00.880 --> 18:01.880
这里呢

18:01.880 --> 18:03.880
我们指定dist这个目录

18:03.880 --> 18:04.880
好 保存一下

18:04.880 --> 18:06.880
咱们再来完成编译

18:06.880 --> 18:09.880
tsc 轨车

18:09.880 --> 18:11.880
OK 完成了编译

18:11.880 --> 18:12.880
咱们看一下啊

18:12.880 --> 18:13.880
dist这个目录

18:13.880 --> 18:14.880
你看

18:14.880 --> 18:15.880
这就是编译结果

18:15.880 --> 18:16.880
这是我们的原代码

18:16.880 --> 18:18.880
这是编译结果

18:18.880 --> 18:21.880
现在就是我们想要的这个场景了

18:21.880 --> 18:24.880
我们希望src下面放我们的原代码

18:24.880 --> 18:28.880
dist里面放我们的编译结果

18:28.880 --> 18:29.880
好了

18:29.880 --> 18:32.880
就是关于在ts里面

18:32.880 --> 18:34.880
如何来完成这个配置

18:34.880 --> 18:37.880
这里其实还有很多很多的编译选项了

18:37.880 --> 18:39.880
我们后边用到的时候呢

18:39.880 --> 18:40.880
再具体的说

18:40.880 --> 18:42.880
OK 现在呢

18:42.880 --> 18:44.880
我们控制了编译的目录

18:44.880 --> 18:46.880
以及我们的原代码的目录

18:46.880 --> 18:47.880
都得到的控制

18:47.880 --> 18:48.880
但是呢

18:48.880 --> 18:50.880
之后开发的时候呢

18:50.880 --> 18:52.880
还是觉得有点烦

18:52.880 --> 18:53.880
怎么个烦呢

18:53.880 --> 18:55.880
就是说我们这里写好了个代码

18:55.880 --> 18:57.880
比方说我要运行

18:57.880 --> 18:58.880
怎么运行

18:58.880 --> 18:59.880
我们可以用这种方式

18:59.880 --> 19:01.880
可以用这种方式运行

19:01.880 --> 19:04.880
先使用tsc

19:04.880 --> 19:06.880
完成编译

19:06.880 --> 19:07.880
编译完了过后

19:07.880 --> 19:09.880
再使用load

19:09.880 --> 19:10.880
怎么了dist

19:10.880 --> 19:11.880
对吧

19:11.880 --> 19:13.880
然后index.js

19:13.880 --> 19:14.880
再完成运行

19:14.880 --> 19:16.880
因为它只能运行结束文件

19:16.880 --> 19:17.880
这样做呢

19:17.880 --> 19:19.880
有点繁琐

19:19.880 --> 19:20.880
我们希望

19:20.880 --> 19:21.880
有没有什么命令

19:21.880 --> 19:24.880
直接就可以完成编译

19:24.880 --> 19:26.880
并且同时完成运行

19:26.880 --> 19:27.880
而且呢

19:27.880 --> 19:28.880
还希望它能够监测

19:28.880 --> 19:30.880
我们代码的变化

19:30.880 --> 19:31.880
文件一改变

19:31.880 --> 19:33.880
它又会重新的完成

19:33.880 --> 19:35.880
编译和运行

19:35.880 --> 19:36.880
那么这个时候怎么办呢

19:36.880 --> 19:37.880
我们就需要

19:37.880 --> 19:39.880
使用一些第三方的库

19:39.880 --> 19:41.880
来帮助我们完成这个需求

19:41.880 --> 19:42.880
好 接下来呢

19:42.880 --> 19:43.880
我就来看一下啊

19:43.880 --> 19:45.880
如何使用一些第三方库

19:45.880 --> 19:46.880
来帮助我们

19:46.880 --> 19:48.880
简化编译和运行的过程

