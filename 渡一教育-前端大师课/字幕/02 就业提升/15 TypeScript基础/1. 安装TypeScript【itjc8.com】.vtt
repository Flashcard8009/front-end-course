WEBVTT

00:00.940 --> 00:04.280
大家好 我是杜一教育 未保钱乱讲师 元晋

00:05.040 --> 00:07.340
这一课呢 咱们继续来学习TS

00:08.100 --> 00:11.680
在这一课中 我们会学习到如何在TS里面去

00:11.940 --> 00:16.820
应该是如何在load环境里边去搭建TS的开发环境

00:17.580 --> 00:22.440
为什么要选择在load环境里边搭建 而不在浏览器环境里边搭建呢

00:22.960 --> 00:28.080
不是说浏览器环境里边就不能使用TS 当然是可以使用的 咱们上去可以说到了啊

00:28.340 --> 00:29.360
TS是超级

00:30.240 --> 00:35.760
为什么在load环境里边 因为我们现在的前期的学习呢 主要是要关注的是

00:36.020 --> 00:37.800
这个TS语言本身

00:38.060 --> 00:43.180
因此呢 我们会把更多的精力放在他代码这个语言语法本身上面

00:43.440 --> 00:44.980
而不太关注呢

00:45.240 --> 00:48.560
他运行出来是一个什么样的效果 我们上去可以说到了

00:48.820 --> 00:50.860
TS没有给你做任何的

00:51.120 --> 00:51.880
就是

00:52.400 --> 00:53.940
GS完成不了的事情

00:54.200 --> 00:56.760
不是说GS完成不了的事情TS就可以完成了

00:57.000 --> 00:57.780
没有这回事

00:57.980 --> 01:01.820
他只是在语法层面的给他给了他更多的约束力

01:02.860 --> 01:06.180
ok 所以说我们一开始学习的时候呢 关注语言本身

01:06.440 --> 01:09.760
因此呢 我们使用最简单的环境就是load环境

01:10.540 --> 01:14.880
好 首先我们需要做什么呢 需要安装啊 安装

01:15.140 --> 01:18.480
既然我们学习那个TS 叫安装TypeScript

01:19.240 --> 01:23.340
这一步非常非常的简单 你使用npm命令去安装就行了

01:23.600 --> 01:25.120
好 我们来安装一下吧

01:25.840 --> 01:27.380
好 这里可以使用npm

01:27.640 --> 01:28.920
也可以使用Cnpm

01:29.180 --> 01:31.720
也可以使用呀 看你自己习惯哪一种

01:31.980 --> 01:33.780
比方说我这里就使用Cnpm

01:34.540 --> 01:39.160
安装的时候呢 我们可以这里可以使用全聚安装 建议大家使用全聚安装

01:39.660 --> 01:41.960
为什么建议大家使用全聚安装呢

01:42.220 --> 01:44.780
是因为这个包里边他有一个

01:45.300 --> 01:48.820
编译的命令行工具是TSC

01:49.080 --> 01:52.460
咱们上一课也演示过的吧 他里面包含了一个命令行

01:52.720 --> 01:54.260
因此呢你全聚安装过后呢

01:54.460 --> 01:57.660
我们后边使用这个命令的时候就到处可以使用了

01:58.560 --> 01:59.860
好 我们安装完成了

02:00.260 --> 02:02.660
安装完成了 我们看一下啊 看一下怎么来用

02:03.460 --> 02:06.260
其实现在呢 最简单的开发环境就已经达现出来了

02:06.660 --> 02:08.860
我们这里建一个文件 就比方说

02:09.160 --> 02:11.860
index.ts 这么一个文件

02:12.360 --> 02:14.260
好 建了这个文件之后呢

02:14.520 --> 02:17.060
我们这里写这么一个辩量吧

02:17.460 --> 02:18.060
写个辩量

02:19.560 --> 02:21.060
当然你可以用其他的net

02:21.660 --> 02:24.460
ok 我们写个辩量 辩量名呢就随便吧

02:24.860 --> 02:26.260
打招呼

02:27.260 --> 02:28.660
好 写个制服创好了

02:28.760 --> 02:31.060
完了啊 就是个普通的TS代码

02:31.260 --> 02:33.660
当然这个代码跟GS本质上没有任何区别

02:34.060 --> 02:35.560
接着我们给他加一点区别

02:35.860 --> 02:37.760
加一点TS特有的东西

02:38.460 --> 02:40.660
我们在这个辩量后面呢写个帽号啊

02:40.660 --> 02:41.660
当然是英文帽号

02:41.860 --> 02:43.560
后边我们写上street

02:44.160 --> 02:46.960
表示说这个辩量是一个制服创类型

02:47.460 --> 02:49.660
好 我们现在不去过多的解释这个东西

02:49.760 --> 02:52.260
什么含义啊 我们下节课再详细来说

02:52.260 --> 02:53.860
我们这几课呢 大家开发环境

02:54.460 --> 02:56.560
写好了这个TS代码之后呢

02:56.660 --> 03:01.460
接下来我们使用TSC这个全局的命令

03:01.460 --> 03:02.660
对他进行编译

03:03.060 --> 03:03.860
怎么编译呢

03:04.160 --> 03:05.060
编译的时候呢

03:05.060 --> 03:08.060
我们跟上我们要编译的文件名

03:08.260 --> 03:10.660
文件是哪一个index.ts

03:10.860 --> 03:12.360
好 我们要编译这个文件

03:12.660 --> 03:13.660
好 这里回车

03:15.460 --> 03:16.360
好 稍等片刻

03:16.860 --> 03:18.060
接下来我们就会发现

03:19.060 --> 03:20.660
我们就会发现这里呢

03:20.860 --> 03:22.460
多了一个GS代码了

03:23.060 --> 03:25.060
这个GS代码里边也有一个辩量

03:25.060 --> 03:27.060
C 你看这就是我们的编译结果

03:27.460 --> 03:28.660
编译结果里边

03:29.860 --> 03:31.560
这一部分和这一部分

03:31.560 --> 03:33.060
你看一下是不是

03:33.360 --> 03:34.660
它们是对应的 对吧

03:34.660 --> 03:36.860
这个地方编译成了这种结果

03:37.060 --> 03:37.860
少了什么

03:37.860 --> 03:40.060
少了这个TS特有的代码

03:40.260 --> 03:41.460
所以说编译结果里边

03:41.460 --> 03:43.460
也是我们上节课反复强调的

03:43.460 --> 03:44.560
编译结果里边

03:44.560 --> 03:46.460
它不存在任何TS的东西

03:46.460 --> 03:47.860
而我们运行的时候呢

03:47.860 --> 03:49.260
运行的是这个GS

03:49.460 --> 03:51.060
因此在运行的过程中

03:51.060 --> 03:53.060
跟TS也没有任何关系了

03:53.760 --> 03:55.060
好 现在就完成了

03:55.060 --> 03:56.460
当时我们执行执行哪一个

03:56.460 --> 03:59.060
执行的当然是index.ts

03:59.060 --> 04:00.160
执行的当然是这个

04:00.960 --> 04:02.160
最简单的开发环境

04:02.160 --> 04:03.560
就已经搭建完成了

04:04.360 --> 04:06.060
但是现在还有一些问题

04:06.060 --> 04:07.060
有什么问题呢

04:07.260 --> 04:09.360
大家可能刚才看到这里爆错了

04:09.360 --> 04:09.860
对吧

04:10.060 --> 04:10.860
它说

04:11.460 --> 04:13.960
无法重新声明块

04:13.960 --> 04:15.460
范围辩量C

04:15.660 --> 04:16.160
啥意思

04:16.160 --> 04:17.560
就是说这个东西已经有了

04:18.160 --> 04:18.860
已经有了

04:18.860 --> 04:20.060
你不能重新声明

04:20.760 --> 04:22.760
为什么会这里会爆错呢

04:23.360 --> 04:25.260
是因为默认情况下

04:25.560 --> 04:26.560
默认情况下

04:26.560 --> 04:28.060
这里我把它记录一下

04:30.280 --> 04:31.480
默认情况下

04:32.380 --> 04:33.580
默认情况下

04:34.380 --> 04:37.480
TS会有做下面几种假设

04:37.880 --> 04:42.880
TS会做出下面几种假设

04:44.080 --> 04:44.980
因为它要编译嘛

04:44.980 --> 04:46.480
它要知道你的环境是什么

04:46.480 --> 04:48.680
它也不知道你现在在流浪器环境里边

04:48.680 --> 04:49.780
还是在漏的环境里边

04:49.780 --> 04:50.580
它并不知道的

04:51.080 --> 04:52.880
它会做出下面几种假设

04:53.080 --> 04:54.180
哪几种假设呢

04:54.180 --> 04:54.980
它第一

04:55.080 --> 04:58.180
假设当前的执行环境

04:58.580 --> 05:01.280
是动流浪器环境

05:02.080 --> 05:02.780
你看一下

05:03.680 --> 05:05.180
我们不信的话在这里看一下

05:05.380 --> 05:06.380
写document

05:06.380 --> 05:06.780
你看

05:06.980 --> 05:08.280
它可以打出这个document

05:08.280 --> 05:09.680
这是不是流浪器里面的对象

05:09.780 --> 05:10.280
对不对

05:10.380 --> 05:11.780
还有什么温斗

05:12.080 --> 05:13.580
这也是流浪器里面对象

05:13.880 --> 05:15.580
因此它会做出这么一种假设

05:15.680 --> 05:17.880
假设目前是在流浪器环境里边

05:18.380 --> 05:19.380
第二种假设

05:20.380 --> 05:21.680
如果代码中

05:21.880 --> 05:23.980
如果代码中

05:24.280 --> 05:27.980
没有使用磨块化语句

05:28.880 --> 05:30.180
磨块化语句

05:30.380 --> 05:31.580
什么叫磨块化语句

05:33.080 --> 05:34.880
import import

05:35.180 --> 05:37.380
或者是export

05:37.480 --> 05:38.880
像这些磨块化语句

05:38.980 --> 05:41.380
如果你的代码里面没有这个磨块化语句的话

05:41.780 --> 05:44.980
它变认为

05:46.380 --> 05:47.280
该代码

05:47.980 --> 05:49.780
是全局执行的

05:50.380 --> 05:52.380
就是说他认为这是个流浪器环境

05:52.480 --> 05:54.880
并且你这个index.js.ts

05:54.880 --> 05:55.780
这里的代码

05:55.980 --> 05:57.080
是会这样子做的

05:57.080 --> 05:59.280
是会在流浪器用这种标签的形式

05:59.280 --> 06:00.580
直接引入进来的

06:01.080 --> 06:02.180
直接引入进来的

06:02.280 --> 06:03.780
它会有这样的假设

06:04.180 --> 06:05.880
因此它现在为什么爆错了

06:06.080 --> 06:07.280
爆错的原因就是

06:07.480 --> 06:08.380
他认为

06:08.480 --> 06:09.480
你这里

06:09.780 --> 06:11.980
已经有了一个json文件

06:12.280 --> 06:14.480
他并不知道这个json文件就是我们的编译结果

06:14.480 --> 06:15.380
他并不知道的

06:15.380 --> 06:17.380
他说你已经有了一个json文件

06:17.480 --> 06:20.280
这个json文件里面有一个变量set

06:20.680 --> 06:23.480
好你这里在写代码的时候再写一个变量set

06:23.680 --> 06:25.580
那么就会导致重复

06:25.780 --> 06:26.880
就会导致重复

06:27.480 --> 06:28.680
有些同学又想问了

06:28.680 --> 06:29.580
又想问了

06:29.680 --> 06:31.180
那你就很奇怪啊

06:31.180 --> 06:31.980
就很奇怪

06:32.180 --> 06:33.980
你这里使用的是net

06:34.580 --> 06:35.880
使用的是net

06:36.080 --> 06:38.880
net它是有快极作用语的

06:38.880 --> 06:40.480
它并不是全局的

06:40.780 --> 06:42.580
那么为什么它还要爆错呢

06:42.980 --> 06:44.580
大家看一下编译的结果

06:44.880 --> 06:46.280
编译的结果是不是net

06:46.780 --> 06:47.580
它不是

06:47.880 --> 06:48.980
不是net是var

06:49.080 --> 06:50.380
var是全局的

06:50.680 --> 06:51.480
因此呢

06:51.480 --> 06:52.680
他写这个代码的时候

06:52.680 --> 06:53.380
他认为

06:53.480 --> 06:55.080
之前已经有个json

06:55.080 --> 06:56.780
他并不知道这个json是编译出来的

06:56.780 --> 06:57.580
他并不知道

06:57.680 --> 06:58.680
他说已经有个json了

06:58.680 --> 07:00.780
这个json能全局进入的变量set

07:01.080 --> 07:01.780
没问题

07:01.880 --> 07:03.780
那我这里再使用一个set

07:03.780 --> 07:04.580
一会儿编译出来

07:04.580 --> 07:05.780
它又是一个全局的

07:05.780 --> 07:07.680
那么就会造成名称的冲突

07:08.180 --> 07:09.180
明白这个意思吧

07:09.380 --> 07:10.580
总之他就冲突了

07:11.180 --> 07:13.280
那么也就是他还有一种假设就是

07:14.580 --> 07:15.680
编译等目标

07:16.280 --> 07:17.780
编译的目标代码

07:18.180 --> 07:19.380
编译的目标代码

07:19.480 --> 07:20.080
是什么呢

07:20.280 --> 07:20.780
是

07:22.480 --> 07:22.980
是

07:23.580 --> 07:24.480
es3

07:24.880 --> 07:25.880
它是这种假设

07:26.180 --> 07:28.580
就是很低的一个es版本

07:28.680 --> 07:29.680
它为什么用这么低呢

07:29.680 --> 07:31.780
它可以做到最大的兼容性

07:31.980 --> 07:33.380
当然我们现在是漏的环境

07:33.380 --> 07:35.280
漏的环境需不需要这么低的版本

07:35.780 --> 07:36.680
实际上是不需要的

07:36.680 --> 07:37.080
对吧

07:37.080 --> 07:38.180
实际上是不需要的

07:38.280 --> 07:38.780
因此呢

07:38.780 --> 07:40.180
我们现在要做的就是

07:40.180 --> 07:41.980
改变他下面的

07:42.180 --> 07:43.180
这几种假设

07:43.380 --> 07:44.480
不要去这样认为

07:44.480 --> 07:45.980
我可以手动的去告诉他

07:46.180 --> 07:47.180
怎么告诉他呢

07:47.280 --> 07:48.480
有两种方式

07:49.380 --> 07:50.780
有两种方式

07:51.280 --> 07:51.980
更改

07:52.780 --> 07:53.780
以上假设

07:55.080 --> 07:55.980
第一种方式

07:56.480 --> 07:57.180
方式一

07:58.480 --> 07:59.180
使用

07:59.780 --> 08:02.480
贴时命令行的时候

08:03.180 --> 08:03.780
时候

08:04.080 --> 08:04.780
加上

08:05.580 --> 08:06.180
选项

08:07.380 --> 08:07.980
参数

08:08.480 --> 08:10.580
就是我们在使用贴时

08:10.680 --> 08:11.880
在编译的时候呢

08:11.980 --> 08:13.780
加上一些选项作为参数

08:14.180 --> 08:15.780
加上一些选项作为参数

08:16.080 --> 08:17.480
这是使用这种模式

08:18.080 --> 08:19.180
这种模式呢

08:19.680 --> 08:20.180
可不可以呢

08:20.180 --> 08:20.980
当然可以

08:20.980 --> 08:23.380
只是我们平时要加的很多

08:23.480 --> 08:24.580
就比较麻烦

08:24.780 --> 08:26.580
第二种方式是我们常见的

08:27.280 --> 08:27.880
使用

08:28.580 --> 08:29.780
配置文件

08:30.380 --> 08:32.280
使用ts配置文件

08:33.180 --> 08:34.180
来更改

08:35.280 --> 08:37.280
更改编译选项

08:37.680 --> 08:38.480
编译选项

08:38.580 --> 08:39.680
就是第一种方式

08:39.680 --> 08:41.080
是在写命令行的时候

08:41.080 --> 08:42.280
直接把选项加上

08:42.480 --> 08:44.280
第二种方式是使用配置文件

08:44.280 --> 08:45.380
来改变这个选项

08:45.480 --> 08:47.680
我们当然会选择第二种方式

08:48.180 --> 08:50.180
来更改它的这些假设

08:50.180 --> 08:51.280
它里面有很多配置

08:51.280 --> 08:51.680
好

08:51.680 --> 08:52.180
我们接下来

08:52.180 --> 08:53.380
那就慢慢来聊一下

08:53.380 --> 08:54.380
它里面的配置

