WEBVTT

00:01.010 --> 00:06.010
好 本期后的最后呢 我来讲一讲关于模块解析

00:06.010 --> 00:09.010
其实这一块知识非常非常简单

00:09.010 --> 00:13.010
在天使中有两种模块解析策略

00:13.010 --> 00:16.010
有两种模块解析策略

00:16.010 --> 00:18.010
什么叫做模块解析呢

00:18.010 --> 00:20.010
就是模块解析的概念很简单

00:20.010 --> 00:25.010
就是说 应该从什么位置

00:25.010 --> 00:28.010
从什么位置寻找模块

00:28.010 --> 00:31.010
就是我们的模块在哪 它应该去怎么去寻找

00:31.010 --> 00:34.010
我们要导入的模块 就这么一回事

00:34.010 --> 00:36.010
它有两种模块解析策略

00:36.010 --> 00:39.010
一种是classic

00:39.010 --> 00:42.010
表示经典的 经典模块解析策略

00:42.010 --> 00:46.010
这个策略是在ES6出来之前它就有了

00:46.010 --> 00:49.010
它是有自己的那么一套模块解析策略

00:49.010 --> 00:53.010
但是这一套东西呢 已经过时了

00:53.010 --> 00:56.010
因为ES6出来之后

00:56.010 --> 00:59.010
而且漏的发展起来过后

00:59.010 --> 01:02.010
它使用的都是漏的环境下面的模块解析策略

01:02.010 --> 01:05.010
因此它第二种策略是漏的

01:05.010 --> 01:08.010
表示漏的解析策略

01:08.010 --> 01:10.010
我们常用的其实也是漏的

01:10.010 --> 01:13.010
classic可能还有那么一点点用

01:13.010 --> 01:15.010
什么用处呢

01:15.010 --> 01:17.010
就是你遇到一些工程

01:17.010 --> 01:19.010
它是很早很早以前

01:19.010 --> 01:22.010
比如45年前使用TS写的

01:22.010 --> 01:25.010
但是这个工程极少 极少 非常非常少

01:25.010 --> 01:27.010
在那个时候用TS写的

01:27.010 --> 01:30.010
它当时可能使用的是经典的模块解析策略

01:30.010 --> 01:32.010
为了兼容的话

01:32.010 --> 01:34.010
那么你在项目里面应该使用

01:34.010 --> 01:36.010
这种方式来解析模块

01:36.010 --> 01:39.010
但是如果你是现在开发新的一个

01:39.010 --> 01:42.010
新的一个工程的开发

01:42.010 --> 01:44.010
使用的是TS的话

01:44.010 --> 01:47.010
不用想那么多 直接统一上

01:47.010 --> 01:49.010
漏的解析策略

01:49.010 --> 01:51.010
漏的解析模块是怎么解析的呢

01:51.010 --> 01:53.010
就跟你们学习漏的的时候

01:53.010 --> 01:55.010
它是怎么解析模块的

01:55.010 --> 01:57.010
是完全一致的

01:57.010 --> 02:01.010
在TS里面使用这种策略来解析模块的话

02:01.010 --> 02:03.010
很漏的完全一致

02:03.010 --> 02:05.010
只不过又有那么一点点变化

02:05.010 --> 02:07.010
什么变化呢

02:07.010 --> 02:10.010
唯一的变化是

02:10.010 --> 02:16.010
是将GST换为TS

02:16.010 --> 02:19.010
就是以前漏的解析策略的时候

02:19.010 --> 02:20.010
如果你不写后维名

02:20.010 --> 02:21.010
它找的是什么文件

02:21.010 --> 02:23.010
找的是GS文件对吧

02:23.010 --> 02:24.010
那么现在呢

02:24.010 --> 02:26.010
它找的是TS文件

02:26.010 --> 02:28.010
当然编译之后

02:28.010 --> 02:29.010
它还是找的是GS的

02:29.010 --> 02:30.010
在编译之前

02:30.010 --> 02:32.010
它要看这个模块是否存在

02:32.010 --> 02:34.010
它去找一下这个模块

02:34.010 --> 02:35.010
里面的内形

02:35.010 --> 02:36.010
有哪些变量

02:36.010 --> 02:37.010
有哪些属性

02:37.010 --> 02:38.010
有哪些对象

02:38.010 --> 02:39.010
那么它怎么找的

02:39.010 --> 02:40.010
是吧

02:40.010 --> 02:41.010
只需要把GST换成TS

02:41.010 --> 02:42.010
就完事了

02:42.010 --> 02:44.010
它通过这种方式来寻找

02:44.010 --> 02:45.010
那么漏的解析策略呢

02:45.010 --> 02:46.010
你可以去

02:46.010 --> 02:48.010
如果你忘了这一块知识的话

02:48.010 --> 02:49.010
拜托一下

02:49.010 --> 02:51.010
我们在这里就不举场开了

02:51.010 --> 02:53.010
其实也很简单的

02:53.010 --> 02:54.010
就找什么

02:54.010 --> 02:55.010
找当前

02:55.010 --> 02:56.010
如果你是

02:56.010 --> 03:00.010
说不讲怎么又开始讲了

03:00.010 --> 03:02.010
如果你是相对路径

03:02.010 --> 03:03.010
你使用的是相对路径

03:03.010 --> 03:04.010
什么意思呢

03:04.010 --> 03:06.010
就是使用这种方式来导入的

03:06.010 --> 03:07.010
require

03:07.010 --> 03:09.010
或者是import什么什么

03:09.010 --> 03:11.010
使用的是相对路径来导入的

03:11.010 --> 03:12.010
那么这种情况下

03:12.010 --> 03:13.010
它先找什么

03:13.010 --> 03:15.010
先找当前目录下面有没有

03:15.010 --> 03:16.010
对吧

03:16.010 --> 03:18.010
先找当前目录下面有没有

03:18.010 --> 03:20.010
如果当前目录下面没有的话

03:20.010 --> 03:22.010
那么看一下Packy的节省

03:22.010 --> 03:24.010
看一下这里有没有这个配置

03:24.010 --> 03:26.010
有没有这个配置

03:26.010 --> 03:27.010
如果有这个配置的话

03:27.010 --> 03:29.010
那么比方说这个配置的是

03:29.010 --> 03:32.010
配置的是Made.ts

03:32.010 --> 03:34.010
比方说是Made.ts

03:34.010 --> 03:36.010
如果是这种配置的话

03:36.010 --> 03:37.010
那么它去找啥呢

03:37.010 --> 03:38.010
它去找

03:38.010 --> 03:40.010
当这个文件夹

03:40.010 --> 03:41.010
把它当成一个文件夹

03:41.010 --> 03:43.010
这个文件夹下面有没有这个文件

03:43.010 --> 03:45.010
有没有这个文件

03:45.010 --> 03:47.010
如果还是没找到的话

03:47.010 --> 03:48.010
那么它去找一找

03:48.010 --> 03:49.010
这个文件夹下面

03:49.010 --> 03:51.010
有没有这个Made.ts

03:51.010 --> 03:52.010
这个文件

03:52.010 --> 03:54.010
这是相对路径的寻找方式

03:54.010 --> 03:56.010
还有一个就是

03:56.010 --> 03:58.010
这个叫什么

03:58.010 --> 03:59.010
全局模块

03:59.010 --> 04:01.010
全局模块

04:01.010 --> 04:03.010
就是非相对路径

04:03.010 --> 04:04.010
应该这样说

04:04.010 --> 04:06.010
非相对路径

04:06.010 --> 04:07.010
那么就是这样子书写的

04:07.010 --> 04:08.010
require

04:08.010 --> 04:09.010
啥啥啥

04:09.010 --> 04:10.010
这种方式它找的是啥呢

04:10.010 --> 04:12.010
它找的是

04:12.010 --> 04:14.010
loaded module下面

04:14.010 --> 04:15.010
有没有相应的模块

04:15.010 --> 04:16.010
先看当前文件夹

04:16.010 --> 04:18.010
有没有loaded module

04:18.010 --> 04:19.010
如果没有的话

04:19.010 --> 04:20.010
往上找往上找

04:20.010 --> 04:21.010
一直找到个 module

04:21.010 --> 04:22.010
大概解释一下

04:22.010 --> 04:23.010
这跟loaded

04:23.010 --> 04:24.010
这是loaded相关的知识

04:24.010 --> 04:26.010
那么在ts里边

04:26.010 --> 04:28.010
它有两种解决方式

04:28.010 --> 04:29.010
我们这里呢

04:29.010 --> 04:30.010
之后为了

04:30.010 --> 04:32.010
如果你要开发一个新工程

04:32.010 --> 04:34.010
或者是比较新的工程

04:34.010 --> 04:35.010
哪怕是一两年前

04:35.010 --> 04:36.010
开发的

04:36.010 --> 04:37.010
用ts开发的工程

04:37.010 --> 04:39.010
那么他们一般都是使用loaded

04:39.010 --> 04:41.010
这种解析策略

04:41.010 --> 04:43.010
因此为了避免出问题

04:43.010 --> 04:45.010
因为有的时候

04:45.010 --> 04:47.010
在某些环境下面

04:47.010 --> 04:49.010
它会使用这个策略

04:49.010 --> 04:51.010
为了避免出问题

04:51.010 --> 04:52.010
我建议大家

04:52.010 --> 04:54.010
在写配置的时候

04:54.010 --> 04:56.010
直接强行把它固定使

04:56.010 --> 04:58.010
把它固定为loaded

04:58.010 --> 04:59.010
这个配置

04:59.010 --> 05:00.010
loaded解析策略

05:00.010 --> 05:01.010
因此我们把这个配置

05:01.010 --> 05:02.010
加上

05:02.010 --> 05:03.010
就这个配置

05:03.010 --> 05:05.010
marge resolution

05:05.010 --> 05:07.010
表示模块解析的策略

05:07.010 --> 05:08.010
怎么解析

05:08.010 --> 05:09.010
怎么来寻找模块

05:09.010 --> 05:11.010
再加上这个配置

05:11.010 --> 05:14.900
把它设为loaded

05:14.900 --> 05:15.900
就行了

05:15.900 --> 05:16.900
使用loaded这种方式

05:16.900 --> 05:17.900
来解析模块

05:18.900 --> 05:19.900
这就是

05:19.900 --> 05:20.900
本节课

05:20.900 --> 05:21.900
我们要讲的

05:21.900 --> 05:23.900
模块化的知识

05:23.900 --> 05:24.900
其实模块化里边

05:24.900 --> 05:25.900
还有没有其他内容呢

05:25.900 --> 05:27.900
其实还有蛮多的

05:27.900 --> 05:28.900
还蛮多的

05:28.900 --> 05:29.900
但是我觉得

05:29.900 --> 05:30.900
咱们

05:30.900 --> 05:31.900
做的是教程

05:31.900 --> 05:32.900
不是工具书

05:32.900 --> 05:33.900
不是字典

05:33.900 --> 05:35.900
我要像官方文档那样子

05:35.900 --> 05:37.900
把这些模块化的

05:37.900 --> 05:38.900
所有设计到

05:38.900 --> 05:39.900
所有知识全部

05:39.900 --> 05:40.900
全部讲出来的话

05:40.900 --> 05:41.900
你早就没兴趣了

05:41.900 --> 05:42.900
因为平时

05:42.900 --> 05:43.900
我们都不怎么用得到的

05:43.900 --> 05:44.900
我只讲那些

05:44.900 --> 05:45.900
我们平时用的

05:45.900 --> 05:46.900
非常多的

05:46.900 --> 05:48.900
会经常遇到的东西

05:48.900 --> 05:49.900
如果你要查询

05:49.900 --> 05:50.900
还有哪些

05:50.900 --> 05:52.900
模块化的相关知识的话

05:52.900 --> 05:53.900
你可以去官网

05:53.900 --> 05:55.900
当然我建议大家去官网

05:55.900 --> 05:56.900
因为官网里边

05:56.900 --> 05:57.900
至少呢

05:57.900 --> 05:59.900
它的文档准确性也好

05:59.900 --> 06:00.900
而且呢

06:00.900 --> 06:02.900
文档的实效性也好

06:02.900 --> 06:03.900
都比

06:03.900 --> 06:04.900
之前给大家介绍的中文网

06:04.900 --> 06:05.900
这样好得多

06:05.900 --> 06:06.900
在这里面

06:06.900 --> 06:07.900
handbook

06:07.900 --> 06:09.900
就是它的手册里边

06:09.900 --> 06:11.900
下面这个margeuse

06:11.900 --> 06:12.900
这是关于模块的

06:12.900 --> 06:13.900
它的详细解释

06:13.900 --> 06:14.900
这里面有哪些东西

06:14.900 --> 06:15.900
就东西很多了

06:15.900 --> 06:16.900
包括什么

06:16.900 --> 06:18.900
重新导出啊这些东西

06:18.900 --> 06:19.900
大家有兴趣的话

06:19.900 --> 06:20.900
可以去看一下

06:20.900 --> 06:21.900
还有一个

06:21.900 --> 06:23.900
还有一个点的话就是这里

06:23.900 --> 06:24.900
margeuse losing

06:24.900 --> 06:26.900
就是模块解析

06:26.900 --> 06:27.900
关于模块怎么去解析的话

06:27.900 --> 06:28.900
它用来整个

06:28.900 --> 06:30.900
整篇文章来书写

06:30.900 --> 06:31.900
如何来解析个模块

06:31.900 --> 06:33.900
就内容还是蛮多的

06:33.900 --> 06:34.900
如果你看英文

06:34.900 --> 06:36.900
实在是非常非常劳火

06:36.900 --> 06:38.900
那么你可以去它那个中文

06:38.900 --> 06:39.900
中文叫啥子

06:39.900 --> 06:41.900
叫Tesla

06:41.900 --> 06:43.900
就这个中文网

06:43.900 --> 06:44.900
首先说一下

06:44.900 --> 06:45.900
这不是官方的

06:45.900 --> 06:47.900
这里面写错了东西的话

06:47.900 --> 06:48.900
自行负责

06:48.900 --> 06:50.900
我不负责的

06:50.900 --> 06:51.900
这不是官方的

06:51.900 --> 06:52.900
那么这里有个模块

06:52.900 --> 06:54.900
以及模块解析

06:54.900 --> 06:55.900
这个网站我大概看一下

06:55.900 --> 06:56.900
还是翻译的蛮不错的

06:56.900 --> 06:57.900
翻译的蛮不错的

06:57.900 --> 06:58.900
至少有吗

06:58.900 --> 06:59.900
至少有这个中文网

06:59.900 --> 07:00.900
还是可以的

07:02.900 --> 07:03.900
这就是这一刻

07:03.900 --> 07:04.900
我们讲的模块化

07:04.900 --> 07:05.900
那么接下来了

07:05.900 --> 07:06.900
老规矩

07:06.900 --> 07:08.900
我们把之前做的那个卡牌

07:08.900 --> 07:11.900
那个铺客牌那个练习

07:11.900 --> 07:12.900
又把它优化一下

07:12.900 --> 07:14.900
使用模块化来优化一下

