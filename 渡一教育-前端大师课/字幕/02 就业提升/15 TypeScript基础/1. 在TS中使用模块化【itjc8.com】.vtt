WEBVTT

00:00.820 --> 00:04.180
OK 大家好 我是多余教育 卫尾前掌讲师 元静

00:04.180 --> 00:06.580
这一刻咱们接着来学习TES

00:06.900 --> 00:09.740
前面我们已经讲过了一些内容了

00:09.740 --> 00:12.340
随着我们代码的不断增加

00:12.340 --> 00:16.020
我们越来越需要一个模块

00:16.020 --> 00:19.900
把我们的代码分开放置到不同的模块里边

00:19.900 --> 00:24.460
然后使用导出语句把每一个模块里面的东西暴露在外边

00:24.460 --> 00:28.380
然后使用导入语句把模块里面的内容导进来

00:28.740 --> 00:32.420
我们之前接触过的模块有ES6 对吧

00:32.420 --> 00:34.580
有CommonJS

00:34.580 --> 00:36.500
通常我们平时开发的时候

00:36.500 --> 00:39.660
一般就使用这两个模块标准就行了

00:39.660 --> 00:42.780
在TES里边它同样支持模块化

00:42.780 --> 00:44.940
那么这节课我们就来研究

00:44.940 --> 00:47.940
在TES代码里边如何来导出一个模块

00:47.940 --> 00:50.300
如何来导入一个模块

00:50.300 --> 00:53.860
那么在TES里面书写的模块化代码

00:53.860 --> 00:56.540
它编译的结果又是什么样子的

00:56.620 --> 00:59.980
好 这就是这节课咱们要讨论的内容

00:59.980 --> 01:04.100
这节课里边我们可能会涉及到一些配置

01:04.100 --> 01:08.940
就是我们之前不是说TES config这个文件对吧

01:08.940 --> 01:09.980
这个文件里边

01:09.980 --> 01:13.780
这里可能会做一些更改或者是做一些添加一些内容

01:13.780 --> 01:15.740
那么这里我使用了个表格

01:15.740 --> 01:18.980
把我们这节课可能会涉及到的更改写到这里

01:18.980 --> 01:20.060
后面讲课的时候

01:20.060 --> 01:23.020
如果我遇到了一些需要进行的配置

01:23.020 --> 01:25.420
我来这个表格里面查一查

01:25.500 --> 01:27.060
为什么我要写个表格

01:27.060 --> 01:27.980
是不是我忘了

01:27.980 --> 01:29.180
我容易忘记

01:29.180 --> 01:30.860
是不是我忘记了

01:30.860 --> 01:32.340
还真是我容易忘记

01:32.340 --> 01:34.700
因为这个东西谁记得住呢

01:34.700 --> 01:35.900
我反正记不住

01:35.900 --> 01:37.620
大家也不用去使劲用备

01:37.620 --> 01:39.060
我查一下官方文档

01:39.060 --> 01:42.380
然后把它相关的我们涉及到的那种写下来

01:42.380 --> 01:45.460
我们需要的时候就去查一查就行了

01:45.460 --> 01:46.740
OK 首先这节课之前

01:46.740 --> 01:48.620
我们首先来说一下

01:48.620 --> 01:52.980
我们在目前前端领域中的模块化标准

01:53.020 --> 01:58.060
除了我们接触过的ES-6这个模块化标准之外

01:58.060 --> 01:59.860
还有在ES-6出来之前

01:59.860 --> 02:03.220
因为ES-6这个标准是2015年出来的

02:03.220 --> 02:04.500
时间比较晚了

02:04.500 --> 02:08.100
因此在它之前就已经出现了一些模块化标准

02:08.100 --> 02:10.540
比方说我们学习load接识的时候

02:10.540 --> 02:12.420
还学习过这个模块化标准

02:12.420 --> 02:13.620
common接识

02:13.620 --> 02:14.540
还有什么呢

02:14.540 --> 02:19.620
还有AMD UMD 以及CMD

02:19.780 --> 02:23.980
AMD UMD 以及System

02:23.980 --> 02:25.420
这些都是模块化标准

02:25.420 --> 02:26.180
System

02:27.380 --> 02:27.980
好

02:27.980 --> 02:29.740
在这些模块化标准里面

02:29.740 --> 02:34.620
咱们这节课只研究ES-6和common接识

02:34.620 --> 02:36.820
因为其他的模块化标准呢

02:36.820 --> 02:40.380
有些是还没有成为正式的标准

02:40.380 --> 02:41.460
比方说还有这个

02:41.460 --> 02:42.700
叫ES

02:42.700 --> 02:43.940
ES-6

02:45.180 --> 02:47.140
这其实也是一个模块化标准

02:47.140 --> 02:48.940
也是一个模块化标准

02:48.980 --> 02:50.740
这里面也有模块化标准

02:50.740 --> 02:53.420
只不过它还没有成为一个正式的标准

02:53.420 --> 02:55.100
不在我们讨论范围之列

02:55.100 --> 02:56.820
还有像这些模块化标准

02:56.820 --> 02:58.820
我们已经很少很少使用了

02:58.820 --> 03:00.660
也不在我们讨论范围之列

03:00.660 --> 03:02.260
所以说我们讨论的模块化

03:02.260 --> 03:05.180
只讨论这两个ES-6和common接识

03:06.180 --> 03:08.060
在咱们这节课的讲解过程中

03:09.060 --> 03:11.140
由于我们涉及到两套语言

03:11.140 --> 03:13.700
我们书写的单码使用的是TS

03:13.700 --> 03:15.340
就是TypeScript

03:15.340 --> 03:18.220
而编译的结果是介识

03:18.220 --> 03:22.060
所以说咱们在讨论这里的模块化的时候

03:22.060 --> 03:23.660
会分成两个部分

03:24.380 --> 03:31.100
就是说一个是TS中如何书写模块化语句

03:31.740 --> 03:34.820
在TS里边如何来书写模块化语句

03:34.820 --> 03:37.100
另外一个讨论的是

03:37.980 --> 03:43.940
另外一个讨论的是编译结果使用的是

03:43.940 --> 03:46.780
什么模块化标准

03:47.260 --> 03:48.820
它的编译结果到底是什么

03:48.820 --> 03:50.580
或者说这里简单一点

03:50.580 --> 03:53.020
就是编译结果到底是什么东西

03:53.020 --> 03:55.780
这是我们这节课主要要讨论的内容

03:55.780 --> 03:57.180
一个是我们写单码

03:57.180 --> 03:59.380
在TS里边如何来书写模块化

03:59.380 --> 04:00.820
怎么去导出一个模块

04:00.820 --> 04:02.620
怎么去导入一个模块

04:02.620 --> 04:05.460
另一部分我们要研究的是

04:05.460 --> 04:07.340
我们书写好模块化单码之后

04:07.340 --> 04:09.940
它编译的结果到底是什么玩意

04:09.940 --> 04:13.500
这两个地方都需要大家去理解

04:13.540 --> 04:14.660
好 首先我们看第一个

04:15.780 --> 04:22.060
第一个TS中如何书写模块化语句

04:22.060 --> 04:23.780
如何来书写

04:23.780 --> 04:25.740
这个部分非常简单

04:25.740 --> 04:29.620
因为2015年ES6标准出来之后

04:30.260 --> 04:35.060
TS就已经完全支持了ES6的模块化标准

04:35.060 --> 04:36.620
其实在ES6出来之前

04:36.620 --> 04:38.940
它有自己的一套模块化东西

04:38.940 --> 04:41.140
它也不是Common GS也不是AMD

04:41.140 --> 04:42.300
也不是UMD

04:42.340 --> 04:44.020
它有一套自己的模块化标准

04:44.740 --> 04:48.620
所以说当时取莫乱舞的时候

04:48.620 --> 04:51.420
那个时候还没有受到大家的忠实

04:51.420 --> 04:52.940
那个时候TS也还不流行

04:53.580 --> 04:55.180
所以说没人管它

04:55.700 --> 04:59.420
到了2015年之后ES6标准出来了之后

05:00.620 --> 05:03.260
TS就已经支持了ES6的标准

05:03.260 --> 05:05.500
那么之前的那种模块化书写方式

05:05.500 --> 05:06.660
我们就不用管了

05:06.660 --> 05:07.380
不用管了

05:07.380 --> 05:09.660
已经淹没在历史的长河里边了

05:10.100 --> 05:10.580
好

05:10.580 --> 05:12.180
所以说在TS中

05:12.180 --> 05:17.420
TS中导入和导出模块

05:17.420 --> 05:23.100
统一使用ES6的模块化标准

05:23.820 --> 05:24.700
就完事了

05:24.700 --> 05:26.100
其实在TS里边

05:26.100 --> 05:28.300
我们本节课后边会看到

05:28.300 --> 05:30.980
还有一些模块化导入导出的写法

05:30.980 --> 05:32.980
还有一种导入导出的写法

05:32.980 --> 05:35.620
只不过不推荐

05:35.620 --> 05:38.180
大家写单哪的时候去使用那种方式

05:38.260 --> 05:41.460
而使用的是ES6的模块化标准

05:41.860 --> 05:42.140
好

05:42.140 --> 05:43.620
咱们来试一下

05:43.620 --> 05:45.660
这里我去建一个文件

05:45.660 --> 05:46.380
建一个文件

05:46.380 --> 05:48.260
比方说取个名字

05:48.260 --> 05:49.260
MyMaju

05:50.020 --> 05:51.860
我的模块TS

05:52.380 --> 05:53.900
比方说我要导出一些东西

05:53.900 --> 05:55.420
我们用ES6的模块要标准

05:55.420 --> 05:56.380
看怎么导出

05:56.620 --> 05:57.900
EXPORT

05:58.180 --> 05:59.420
比方导出一个变量

05:59.420 --> 06:00.660
导出一个变量

06:00.660 --> 06:01.700
NAME

06:02.300 --> 06:03.060
这个变量

06:03.060 --> 06:04.020
随便写

06:04.020 --> 06:04.820
随便写

06:06.380 --> 06:07.820
然后再导出一个函数

06:08.340 --> 06:09.140
EXPORT

06:09.900 --> 06:10.900
一个方形

06:10.900 --> 06:11.580
上

06:11.580 --> 06:13.260
把两个数字相加

06:13.260 --> 06:14.580
两个数字相加

06:14.580 --> 06:15.380
把导出

06:15.380 --> 06:16.380
返回的结果

06:16.380 --> 06:17.500
当然也是NUMBER

06:17.500 --> 06:18.420
A加B

06:18.780 --> 06:19.620
让它推导出来

06:19.620 --> 06:20.660
返回一个NUMBER

06:21.020 --> 06:21.340
好

06:21.340 --> 06:22.420
导出这么两个东西

06:22.420 --> 06:22.900
完事

06:22.900 --> 06:23.660
完事

06:23.900 --> 06:24.380
好

06:24.380 --> 06:26.780
这样子我们使用了ES6的方式

06:26.780 --> 06:27.940
来完成了导出

06:28.060 --> 06:29.180
导入呢

06:29.380 --> 06:30.900
到了index社里面去

06:30.900 --> 06:31.580
我去导入

06:31.580 --> 06:32.900
设导入一下

06:32.900 --> 06:33.900
那么怎么导入

06:33.900 --> 06:35.820
跟ES6是一样的

06:35.820 --> 06:37.700
是一样的EXPORT

06:37.860 --> 06:38.740
然后呢

06:38.740 --> 06:40.140
FRONT

06:40.140 --> 06:41.060
MAJU

06:41.060 --> 06:41.740
对吧

06:41.740 --> 06:42.220
好

06:42.220 --> 06:43.060
这里呢

06:43.060 --> 06:44.380
我们书写什么呢

06:44.380 --> 06:45.100
书写

06:47.100 --> 06:47.540
上

06:47.540 --> 06:48.700
你看这个函数

06:48.700 --> 06:49.340
以及呢

06:49.340 --> 06:49.940
还有什么

06:49.940 --> 06:50.540
还有一个变量

06:50.540 --> 06:50.860
NAME

06:50.860 --> 06:51.460
对吧

06:52.340 --> 06:52.580
好

06:52.580 --> 06:53.020
我们这里

06:53.020 --> 06:53.620
输出

06:53.620 --> 06:54.900
ConsolNAME

06:54.900 --> 06:55.620
然后呢

06:55.620 --> 06:56.500
再调用这个函

06:56.500 --> 06:57.500
再输出这个函数

06:57.500 --> 06:58.580
调用的结果

06:58.580 --> 06:59.420
上

06:59.420 --> 07:00.820
随便写两个数字吧

07:01.620 --> 07:02.900
运行一下

07:02.900 --> 07:04.660
其实都没有什么好运行的

07:04.660 --> 07:05.140
真的

07:05.780 --> 07:06.500
那运行一下

07:06.980 --> 07:07.980
走个流程吗

07:07.980 --> 07:10.380
运行一下

07:10.380 --> 07:10.980
OK

07:10.980 --> 07:12.060
输出了CAMMEN

07:12.060 --> 07:13.300
和香香的结果

07:13.300 --> 07:14.180
7

07:14.180 --> 07:15.540
这就是ES6

07:15.540 --> 07:17.300
这就是TS里面的模块

07:17.300 --> 07:18.020
导入导出

07:18.020 --> 07:18.900
简不简单

07:18.900 --> 07:20.380
非常简单

07:20.380 --> 07:21.860
其实不仅如此

07:21.860 --> 07:23.940
大家在用这个模块的时候

07:23.940 --> 07:26.180
可以没有必要去写这个东西

07:26.180 --> 07:27.020
没有必要写

07:27.020 --> 07:27.740
不是说不能

07:27.740 --> 07:28.820
不是说不写

07:28.820 --> 07:29.940
不是说不写

07:29.940 --> 07:30.580
而是呢

07:30.580 --> 07:31.940
可以利用它的智能提示

07:31.940 --> 07:33.380
比方说这里

07:33.380 --> 07:34.940
你输写一个NAME的时候

07:34.940 --> 07:35.980
这里它没有这个模

07:35.980 --> 07:37.140
它没有这个变量

07:37.140 --> 07:37.660
对吧

07:37.740 --> 07:38.860
它没有这个函数

07:38.860 --> 07:40.140
其实我们指着它的时候

07:40.140 --> 07:41.180
有个快速修复

07:41.180 --> 07:42.220
看一下

07:42.220 --> 07:43.060
它告诉你

07:43.060 --> 07:44.260
哪些模块里边

07:44.260 --> 07:45.980
我们可以导入NAME

07:45.980 --> 07:46.820
你选择一个

07:46.820 --> 07:48.340
这些模块里面都有NAME

07:48.340 --> 07:49.340
那么从哪个模块里面

07:49.340 --> 07:50.100
可以导入

07:50.100 --> 07:51.140
从这个模块

07:51.140 --> 07:52.860
MyModule里面

07:52.860 --> 07:53.940
导入NAME

07:53.940 --> 07:54.540
然后这里

07:54.540 --> 07:56.220
这个函数快速修复

07:56.220 --> 07:58.100
这里导入进来

07:58.100 --> 07:59.300
它会自动给你完成

07:59.300 --> 08:00.620
自动完成

08:00.620 --> 08:01.220
当然了

08:01.220 --> 08:02.460
也可以这样子

08:02.460 --> 08:03.300
也可以这样子

08:03.300 --> 08:06.180
我们在输出CAM Log上

08:06.180 --> 08:07.420
直接输写这个函数

08:07.460 --> 08:08.420
你看

08:08.420 --> 08:09.740
它在提示里

08:09.740 --> 08:10.700
从这个模块里边

08:10.700 --> 08:11.740
可以自动导入

08:11.740 --> 08:13.060
那么怎么一回车

08:13.060 --> 08:14.500
你看它就自动导入进来了

08:14.500 --> 08:16.060
说非常非常的方便

08:16.060 --> 08:17.460
非常的方便的

08:17.460 --> 08:18.500
所以在TS里边

08:18.500 --> 08:20.940
由于它有完整的类型检查

08:20.940 --> 08:24.220
它不能出现一个不存在的东西

08:24.220 --> 08:27.740
所以说当一个不存在的东西

08:27.740 --> 08:28.860
出现的时候

08:28.860 --> 08:30.300
它会从模块里面去找

08:30.300 --> 08:31.980
看一下哪个模块里面有这个东西

08:31.980 --> 08:34.580
然后自动帮你导入进来

08:34.580 --> 08:36.700
但是前提条件是

08:36.740 --> 08:38.380
前提条件是

08:38.380 --> 08:39.700
你导出的时候

08:39.700 --> 08:42.260
使用的是这种普通导出的方式

08:42.260 --> 08:44.660
使用的是这种方式来导出

08:44.660 --> 08:45.980
就是导出声明

08:45.980 --> 08:47.700
export导出一个声明

08:47.700 --> 08:48.940
用这种方式来导出

08:48.940 --> 08:51.140
而不能使用默认导出

08:51.140 --> 08:53.220
如果你使用默认导出的话

08:53.220 --> 08:55.020
它是没有这样的智能提示的

08:55.020 --> 08:55.740
比方说

08:55.740 --> 08:57.340
咱们export

08:57.340 --> 08:58.500
default

08:58.500 --> 09:00.340
默认导出一个对象

09:00.340 --> 09:01.740
默认导出一个对象

09:01.740 --> 09:03.820
这个对象里面有个Name属性

09:03.820 --> 09:04.540
Kevin

09:04.540 --> 09:06.580
然后这个对象里面有个函数

09:06.620 --> 09:08.300
一个函数上

09:08.300 --> 09:09.940
a number

09:09.940 --> 09:10.740
b number

09:10.740 --> 09:12.300
这是个默认导出

09:12.300 --> 09:14.820
return a加b

09:14.820 --> 09:16.740
如果你使用默认导出的话

09:16.740 --> 09:18.740
它是没有办法帮你推导出来的

09:18.740 --> 09:20.340
没有办法推导出来的

09:20.340 --> 09:21.220
为什么呢

09:21.220 --> 09:23.700
因为默认导出的名字

09:23.700 --> 09:26.260
就是整个对象是没有名字的

09:26.260 --> 09:27.180
默认导出的话

09:27.180 --> 09:28.900
你是可以更改名字的

09:28.900 --> 09:30.060
比方说这里

09:30.060 --> 09:32.220
这里

09:32.220 --> 09:32.900
mime module

09:32.900 --> 09:34.100
我们可以刚取个名字

09:34.100 --> 09:35.140
mime module

09:35.140 --> 09:36.100
通过这种方式

09:36.140 --> 09:37.700
我们要调用这个函数的话

09:37.700 --> 09:39.420
我们要这样的调用

09:39.420 --> 09:39.980
mime module

09:39.980 --> 09:40.820
del上

09:40.820 --> 09:41.380
对吧

09:41.380 --> 09:43.620
我们要调用这个Name属性的话

09:43.620 --> 09:44.660
通过这种方式

09:44.660 --> 09:46.540
这都是以前你们学习过的知识

09:46.540 --> 09:47.740
对不对

09:47.740 --> 09:50.580
所以说由于这里的名字是可以更改的

09:50.580 --> 09:53.900
所以说它没有办法知道你要做什么

09:53.900 --> 09:56.340
因此使用默认导出可不可以

09:56.340 --> 09:58.100
可以没有任何问题

09:58.100 --> 10:00.020
但是你就享受不到

10:00.020 --> 10:02.900
它的自动帮你导入的功能了

10:02.900 --> 10:03.900
就像刚才那样子

10:03.900 --> 10:04.740
写个函数上

10:04.780 --> 10:07.620
它马上就知道在哪个模块里面给你自动导入型了

10:07.620 --> 10:09.420
你就没有办法享受了

10:09.420 --> 10:11.140
因此我个人

10:11.140 --> 10:12.620
建议大家

10:12.620 --> 10:14.420
导出的时候

10:14.420 --> 10:16.100
尽量使用这种方式导出

10:16.100 --> 10:18.220
这样子可以享受它的智能提示

10:18.220 --> 10:19.340
我们再来试一下

10:19.340 --> 10:19.940
很舒服的

10:19.940 --> 10:21.100
真的很舒服的

10:21.100 --> 10:24.940
console.log.name

10:24.940 --> 10:26.740
它提示你从哪里进行导入

10:26.740 --> 10:27.580
回车

10:27.580 --> 10:28.700
导入进来了

10:28.700 --> 10:33.620
console.log上回车

10:34.220 --> 10:35.860
自动帮你导入进来了

10:35.860 --> 10:37.460
我们接着写就行了

10:37.460 --> 10:39.260
三四

10:39.260 --> 10:40.300
另外这个意思

10:40.300 --> 10:45.180
这就是在TS里面如何来进行导入导出

10:45.180 --> 10:46.700
如何来进行导入导出

10:46.700 --> 10:48.940
这里值得注意的一个点

10:48.940 --> 10:51.380
刚才只是如果利用默认导出

10:51.380 --> 10:52.380
不是说不可以

10:52.380 --> 10:52.900
再说一次

10:52.900 --> 10:53.900
不是说不可以

10:53.900 --> 10:55.580
只是说你享受不到

10:55.580 --> 10:57.780
这种自动的帮你导入的方式了

10:57.780 --> 11:00.060
享受不到了

11:00.060 --> 11:01.300
再说一个点就是

11:01.300 --> 11:02.900
大家特别留意的

11:02.940 --> 11:04.940
在导入模块的时候

11:04.940 --> 11:08.020
千万不要去加后罪名

11:08.020 --> 11:09.860
千万不要这样做

11:09.860 --> 11:12.700
千万不要去加点TS

11:12.700 --> 11:14.900
为什么不要去加这个后罪名

11:14.900 --> 11:16.020
其实你一加

11:16.020 --> 11:18.460
你看它直接给你报错了

11:18.460 --> 11:21.020
它告诉你不要去添加这个东西

11:21.020 --> 11:22.780
为什么不要去添加

11:22.780 --> 11:26.340
你想这个东西它是会进行编译的

11:26.340 --> 11:27.940
它是会进行编译的

11:27.940 --> 11:29.700
编译的结果里边

11:29.700 --> 11:32.340
如果把这个东西编译到

11:32.380 --> 11:33.540
GS里边

11:33.540 --> 11:36.340
那么GS里边有没有这个TS文件

11:36.340 --> 11:38.060
它就没有这个TS文件了

11:38.060 --> 11:40.220
不信咱们编译试一下

11:40.220 --> 11:41.460
编译试一下

11:41.460 --> 11:42.780
这里报错了还能编译吗

11:42.780 --> 11:43.740
还能编译的

11:43.740 --> 11:45.700
还能编译的

11:45.700 --> 11:46.300
编译

11:46.300 --> 11:47.420
它只是在提示里错误

11:47.420 --> 11:48.860
还是会进行编译的

11:48.860 --> 11:50.060
好 编译完成之后

11:50.060 --> 11:51.940
咱们看一下一个编译结果里边

11:51.940 --> 11:53.620
你看

11:53.620 --> 11:55.540
它把这个东西导入进来了

11:55.540 --> 11:56.660
把一个TS

11:56.660 --> 11:57.980
那这里面有没有TS

11:57.980 --> 12:00.100
你先别管这里面代码写的是啥

12:00.100 --> 12:01.340
有没有TS

12:01.420 --> 12:02.940
这个我念甲里边没有

12:02.940 --> 12:04.420
它就会出问题

12:04.420 --> 12:06.620
所以说大家在导入一个模块的时候

12:06.620 --> 12:07.540
老老实实的

12:07.540 --> 12:08.780
不要去加后嘴米

12:08.780 --> 12:10.220
不要多此一句

12:10.220 --> 12:11.740
就要注意这个点就行了

12:11.740 --> 12:14.300
使用TS的模块化非常简单

12:14.300 --> 12:17.140
你就使用ES6的模块化标准

12:17.140 --> 12:18.740
导入导出 完事了

12:18.740 --> 12:21.380
不管你开发的是漏的环境

12:21.380 --> 12:22.700
开发的是浏览性环境

12:22.700 --> 12:23.500
无所谓

12:23.500 --> 12:24.580
它会进行编译

12:24.580 --> 12:25.580
它会帮你搞定

12:25.580 --> 12:26.860
剩下的事情你不用管

12:26.860 --> 12:29.780
你只需要使用ES6的模块化标准

12:29.780 --> 12:31.220
来进行导入导出

12:31.300 --> 12:33.260
就可以完成在TS中

12:33.260 --> 12:35.180
书写模块化的语句了

12:35.180 --> 12:36.700
好 这是咱们这一部分

12:36.700 --> 12:37.580
你要了解的

12:37.580 --> 12:40.740
如何在TS中书写一个模块化语句

