WEBVTT

00:01.010 --> 00:06.010
好 老规矩啊 老规矩 我们还是用停止的

00:06.010 --> 00:13.010
还是用Git切换过去啊 切换分支 Check out practice poker

00:13.010 --> 00:15.010
好 切换过去

00:15.010 --> 00:19.010
好 那么现在呢 我们使用模块化的方式来改造程序

00:19.010 --> 00:21.010
使用模块化

00:21.010 --> 00:24.010
其实代码没有什么变动了 就是把它做成模块化

00:24.010 --> 00:26.010
两下就做完了 非常简单

00:26.010 --> 00:30.010
之前呢 我们全部挤在一个文件里面

00:30.010 --> 00:34.010
我们现在把它分开 首先呢 我们把这些美剧单独提出来

00:34.010 --> 00:37.010
把这些美剧单独提出来 我们新建一个文件

00:37.010 --> 00:41.010
要取个名字就是Innance

00:41.010 --> 00:45.010
专门来存放美剧 这里面全部专门写美剧

00:45.010 --> 00:48.010
于是呢 我把这两个美剧直接扔出来了

00:48.010 --> 00:50.010
把这两个美剧直接扔出来

00:50.010 --> 00:54.010
这里点一下 剪切

00:55.010 --> 00:57.010
整体过来

00:57.010 --> 01:02.010
把这两个美剧呢 使用ES6的方式直接扔出

01:02.010 --> 01:05.010
扔出

01:05.010 --> 01:07.010
好 这边

01:07.010 --> 01:09.010
这边 我们要使用美剧 对吧

01:09.010 --> 01:12.010
要使用美剧 那么再一次扔入

01:12.010 --> 01:13.010
来一次扔入

01:13.010 --> 01:17.640
这里扔出 这边扔入

01:17.640 --> 01:19.640
这边扔入

01:19.640 --> 01:22.640
这里的 怎么代码提示不过来呢

01:22.640 --> 01:24.640
我们再看一下 这里出错了

01:24.640 --> 01:26.640
快速修复 非常简单

01:26.640 --> 01:28.640
快速修复 倒入就完事了

01:28.640 --> 01:31.640
这里快速修复 倒入就完事了

01:31.640 --> 01:32.640
就完了

01:32.640 --> 01:35.640
然后呢 还有这些类型 这些类型

01:35.640 --> 01:38.640
这些类型呢 建一个文件吧

01:38.640 --> 01:39.640
建一个文件

01:39.640 --> 01:42.640
taps.ts

01:42.640 --> 01:44.640
我们把这些类型啊

01:44.640 --> 01:46.640
这些字定的这些类型别名

01:46.640 --> 01:48.640
也专门放到一个文件里边

01:48.640 --> 01:51.640
ok 我们这里 把它剪切

01:51.640 --> 01:53.640
粘贴过来

01:53.640 --> 01:54.640
粘贴过来

01:54.640 --> 01:56.640
是有倒出 一个是port

01:56.640 --> 01:58.640
一样的啊 这种类型的声明

01:58.640 --> 01:59.640
也可以直接倒出了

01:59.640 --> 02:00.640
这里爆错了 爆错了

02:00.640 --> 02:02.640
快速修复 倒入

02:02.640 --> 02:04.640
倒入 没有什么难度对吧

02:04.640 --> 02:06.640
好 这边

02:06.640 --> 02:07.640
这些地方也爆错了

02:07.640 --> 02:10.640
怎么修复 倒入

02:10.640 --> 02:12.640
还有啥 没了

02:12.640 --> 02:14.640
好 我们把这两个

02:14.640 --> 02:16.640
这两个函数也专门提到文件里面去

02:16.640 --> 02:18.640
启动这个文件里面

02:18.640 --> 02:20.640
index这个文件里面尽量干净一些

02:20.640 --> 02:22.640
尽量干净一些

02:22.640 --> 02:24.640
我们把这两个函数提出来

02:24.640 --> 02:25.640
我们给它建个文件

02:25.640 --> 02:27.640
放个型 是吧

02:27.640 --> 02:29.640
表示我们的功能函数

02:29.640 --> 02:31.640
好 到这边来

02:31.640 --> 02:33.640
把这两个函数

02:33.640 --> 02:35.640
这里

02:35.640 --> 02:37.640
这里 剪切

02:37.640 --> 02:39.640
直接粘贴过来

02:39.640 --> 02:41.640
这里倒出

02:41.640 --> 02:44.640
isport

02:45.640 --> 02:47.640
倒出 这里

02:47.640 --> 02:49.640
倒过去 倒入

02:50.640 --> 02:52.640
倒出

02:52.640 --> 02:56.340
倒出

02:56.340 --> 02:58.340
我记得它是有这个功能的

02:58.340 --> 03:00.340
就是这里快速修复

03:00.340 --> 03:03.340
这里add all missing imports

03:03.340 --> 03:05.340
倒入所有的

03:05.340 --> 03:06.340
就是需要倒入

03:06.340 --> 03:08.340
但是还没有倒入的东西

03:08.340 --> 03:10.340
一起来点击一下

03:10.340 --> 03:12.340
我记得是有这个东西

03:12.340 --> 03:13.340
好 倒入了

03:13.340 --> 03:15.340
那么这个文件搞定了

03:15.340 --> 03:16.340
那还有啥呢

03:16.340 --> 03:18.340
还有啥呢 这边啥都不需要了

03:18.340 --> 03:20.340
这边就是在index里面做一下测试

03:20.340 --> 03:22.340
来呗

03:22.340 --> 03:23.340
修复

03:23.340 --> 03:24.340
倒入

03:24.340 --> 03:25.340
完事了

03:25.340 --> 03:27.340
就把分到不同的文件里面了

03:27.340 --> 03:28.340
那么每一个文件的东西

03:28.340 --> 03:29.340
就少了很多

03:29.340 --> 03:31.340
这样的阅读代码也好

03:31.340 --> 03:33.340
我们编写代码也好

03:33.340 --> 03:34.340
维护代码也好

03:34.340 --> 03:35.340
都方便了很多

03:35.340 --> 03:36.340
那么运行一下

03:36.340 --> 03:38.340
拿回去还是运行一下吧

03:38.340 --> 03:40.340
npng

03:41.340 --> 03:42.340
看一下

03:42.340 --> 03:43.340
结果

03:43.340 --> 03:45.340
是完全一样的

03:45.340 --> 03:47.340
OK 这就是关于模块化

03:47.340 --> 03:49.340
把它做成模块化

03:49.340 --> 03:50.340
这里我有一个点

03:50.340 --> 03:51.340
既然想到了

03:51.340 --> 03:52.340
我就说明一下

03:52.340 --> 03:54.340
这里我再重新编译一下

03:54.340 --> 03:56.340
再编译一下

03:56.340 --> 03:57.340
编译完成之后

03:57.340 --> 03:59.340
咱们来看一下这个编译结果

03:59.340 --> 04:00.340
看一下这个编译结果

04:00.340 --> 04:02.340
这个编译结果里边呢

04:02.340 --> 04:03.340
我们看一下这个文件

04:03.340 --> 04:04.340
Types这个文件

04:04.340 --> 04:06.340
就这个文件

04:06.340 --> 04:07.340
这个文件呢

04:07.340 --> 04:08.340
大家看一下

04:08.340 --> 04:09.340
我导出的是啥

04:09.340 --> 04:12.340
是两个类型别名

04:12.340 --> 04:14.340
导出的是两个类型别名

04:14.340 --> 04:15.340
那么我们知道

04:15.340 --> 04:16.340
类型别名

04:16.340 --> 04:18.340
它会不会出现在编译结果里边

04:18.340 --> 04:20.340
是不是不会出现

04:20.340 --> 04:21.340
对不对

04:21.340 --> 04:22.340
类型别名是不会出现在

04:22.340 --> 04:23.340
编译结果里边了

04:23.340 --> 04:24.340
那么咱们看一下

04:24.340 --> 04:25.340
编译结果是啥呢

04:25.340 --> 04:27.340
你看是不是空的

04:27.340 --> 04:28.340
啥都没有

04:28.340 --> 04:29.340
啥都没有

04:29.340 --> 04:31.340
那么这个类型

04:31.340 --> 04:33.340
它需要在哪个文件里面用呢

04:33.340 --> 04:34.340
看一下

04:34.340 --> 04:35.340
这个类型需要在

04:35.340 --> 04:36.340
这个文件里面用

04:36.340 --> 04:38.340
你看从类型里面导入了Dec

04:38.340 --> 04:39.340
需要在这个文件里面用

04:39.340 --> 04:40.340
那么我们到

04:40.340 --> 04:42.340
编译结果里面去看一下

04:42.340 --> 04:43.340
编译结果里边

04:43.340 --> 04:45.340
有没有导入Types

04:45.340 --> 04:47.340
有没有导入这个Types文件

04:47.340 --> 04:48.340
看一下

04:48.340 --> 04:49.340
说没导入

04:49.340 --> 04:50.340
因为他发现

04:50.340 --> 04:52.340
那里面有东西我压根就用不上

04:52.340 --> 04:53.340
那是TS的东西

04:53.340 --> 04:54.340
到我这里已经没用了

04:54.340 --> 04:55.340
已经没用了

04:55.340 --> 04:57.340
所以说TS是非常智能的

04:57.340 --> 04:59.340
他知道

04:59.340 --> 05:00.340
这些东西到编译结果里面

05:00.340 --> 05:01.340
就没有什么意义了

05:01.340 --> 05:03.340
所以说他没有做任何的导入

05:03.340 --> 05:05.340
因此呢

05:05.340 --> 05:07.340
编译结果是非常干净的

05:07.340 --> 05:09.340
这是一个点我要说的

05:09.340 --> 05:11.340
另外一个点

05:11.340 --> 05:12.340
另外一个点

05:12.340 --> 05:13.340
是关于这个目录的

05:13.340 --> 05:15.340
看一下这个目录

05:15.340 --> 05:16.340
这个目录里边

05:16.340 --> 05:17.340
还保留了以前的一些东西

05:17.340 --> 05:18.340
比方这个东西

05:18.340 --> 05:20.340
MimeBot就有点介绍

05:20.340 --> 05:22.340
这是以前的一些东西

05:22.340 --> 05:23.340
对吧

05:23.340 --> 05:24.340
我们希望

05:24.340 --> 05:26.340
就跟React和View一样

05:26.340 --> 05:28.340
在编译的时候

05:28.340 --> 05:30.340
在生成这个工程的时候

05:30.340 --> 05:32.340
最好把这个文件夹清理一下

05:32.340 --> 05:33.340
清理之后

05:33.340 --> 05:35.340
把清理完了过后

05:35.340 --> 05:36.340
再重新编译

05:36.340 --> 05:37.340
也就是说

05:37.340 --> 05:38.340
换句话说

05:38.340 --> 05:40.340
先把这个文件夹给我删了

05:40.340 --> 05:41.340
删了过后

05:41.340 --> 05:43.340
再重新进行编译

05:43.340 --> 05:44.340
不然的话

05:44.340 --> 05:45.340
之前有些

05:45.340 --> 05:46.340
我可能写错了的文件

05:46.340 --> 05:47.340
我把删了

05:47.340 --> 05:48.340
他还保留在编译结果里面

05:48.340 --> 05:49.340
就很烦

05:49.340 --> 05:50.340
那么怎么办

05:50.340 --> 05:51.340
非常简单

05:51.340 --> 05:53.340
我们到了Packy的

05:53.340 --> 05:54.340
这个文件

05:54.340 --> 05:56.340
Packy的结设

05:56.340 --> 05:58.340
这个文件里面去

05:58.340 --> 05:59.340
因为我还念不好

05:59.340 --> 06:01.340
Packy的结设

06:01.340 --> 06:03.340
Packy的结设

06:03.340 --> 06:05.340
要慢一点

06:05.340 --> 06:07.340
好 下面我写个命令

06:07.340 --> 06:09.340
表示的是

06:09.340 --> 06:11.340
建立工程

06:11.340 --> 06:12.340
部署工程

06:12.340 --> 06:13.340
这里面运行什么命令呢

06:13.340 --> 06:15.340
其实就运行的是TSC

06:15.340 --> 06:17.340
但是在运行这个命令之前

06:17.340 --> 06:19.340
我先删除一个文件夹

06:19.340 --> 06:21.340
使用Windows下面使用RD

06:21.340 --> 06:23.340
RemoveDirectory

06:23.340 --> 06:25.340
删除一个文件夹

06:25.340 --> 06:27.340
但是呢

06:27.340 --> 06:28.340
如果你直接删除的话

06:28.340 --> 06:29.340
还要抱错

06:29.340 --> 06:30.340
因为这个文件夹下面有内容

06:30.340 --> 06:32.340
它只能删除空文件夹

06:32.340 --> 06:35.340
如果你要删除这个文件夹

06:35.340 --> 06:37.340
以及文件夹里边的内容的话

06:37.340 --> 06:39.340
也要加上一个斜杠S

06:39.340 --> 06:41.340
加上一个斜杠S

06:41.340 --> 06:43.340
表示个命令的参数

06:43.340 --> 06:44.340
但是这样子一来呢

06:44.340 --> 06:45.340
我们来试一下

06:45.340 --> 06:46.340
加个and符号

06:46.340 --> 06:47.340
先运行前面的命令

06:47.340 --> 06:48.340
再运行后面的命令

06:48.340 --> 06:50.340
我们来看一下

06:50.340 --> 06:53.340
通过NPMZoneBuild

06:53.340 --> 06:55.340
你看一下

06:55.340 --> 06:57.340
语法不正确

06:57.340 --> 06:59.340
怎么回语法不正确

06:59.340 --> 07:01.340
RD

07:01.340 --> 07:03.340
把杠S去掉

07:04.340 --> 07:07.340
语法不正确

07:15.340 --> 07:17.340
语法不正确

07:17.340 --> 07:18.340
是这个命令

07:18.340 --> 07:20.340
RDRemoveDirectory

07:20.340 --> 07:21.340
咱们试一下

07:21.340 --> 07:22.340
试一下

07:22.340 --> 07:23.340
看一下怎么回事

07:23.340 --> 07:24.340
RD

07:24.340 --> 07:25.340
对了

07:25.340 --> 07:26.340
没问题

07:27.340 --> 07:29.340
我忘了指定了那个

07:29.340 --> 07:31.340
我忘了指定目录了

07:31.340 --> 07:32.340
要删除哪个目录

07:33.340 --> 07:34.340
删除这个目录

07:34.340 --> 07:35.340
忘了指定目录了

07:35.340 --> 07:36.340
我们再来试

07:36.340 --> 07:38.340
NPMZoneBuild

07:40.340 --> 07:41.340
这个时候

07:41.340 --> 07:42.340
它会问你

07:42.340 --> 07:44.340
是不是确定要删除

07:44.340 --> 07:45.340
就很烦

07:45.340 --> 07:46.340
它问什么呢

07:46.340 --> 07:47.340
我就不想删除

07:47.340 --> 07:49.340
如何来让它不去询问呢

07:49.340 --> 07:50.340
我们选外

07:50.340 --> 07:52.340
如何来让它不要询问

07:52.340 --> 07:54.340
我们直接删除就行了

07:54.340 --> 07:56.340
再加上一个命令

07:56.340 --> 07:58.340
表示所有都选Yes

07:58.340 --> 07:59.340
OK

07:59.340 --> 08:01.340
那么咱们再来试一下

08:01.340 --> 08:03.340
NPMZoneBuild

08:04.340 --> 08:05.340
你看

08:05.340 --> 08:06.340
每次编印的时候

08:06.340 --> 08:07.340
都会先删除这个目录

08:07.340 --> 08:08.340
再重新创建

08:08.340 --> 08:09.340
这样子

08:09.340 --> 08:10.340
这里面就干净了很多了

08:10.340 --> 08:11.340
OK

08:11.340 --> 08:12.340
这里我们把一个小技巧

08:12.340 --> 08:13.340
给大家说一下

08:13.340 --> 08:14.340
好

08:14.340 --> 08:15.340
本节课

08:15.340 --> 08:16.340
就讲完了

08:16.340 --> 08:17.340
我们讲了模块化

08:17.340 --> 08:18.340
那么之后

08:18.340 --> 08:19.340
咱们开发代码的时候

08:19.340 --> 08:20.340
就尽量的

08:20.340 --> 08:21.340
把代码分开编写

08:21.340 --> 08:23.340
分到不同的模块里边

08:23.340 --> 08:25.340
这是一个非常重要的一个技能

08:25.340 --> 08:26.340
这就课很简单

08:26.340 --> 08:27.340
对吧

08:27.340 --> 08:28.340
很简单

08:28.340 --> 08:29.340
好

08:29.340 --> 08:30.340
到这里了

08:30.340 --> 08:31.340
谢谢

08:31.340 --> 08:32.340
拜拜

