WEBVTT

00:00.560 --> 00:04.140
接着呢咱们再来研究下一个问题

00:04.660 --> 00:11.820
就是我们现在知道了我们去怎么去写这个模块化代码非常非常简单就用ES6的标准就完事了

00:12.340 --> 00:14.380
那么接下来我要研究的是

00:15.160 --> 00:16.440
编译结果

00:19.660 --> 00:23.500
编译结果中的模块化它到底是一个什么样子

00:24.020 --> 00:28.360
因为我们知道到了GS代码里边世界其实没有那么清晋的

00:28.820 --> 00:32.100
世界本来我们写代码的时候呢都使用的是ES6对吧

00:32.360 --> 00:35.460
但是这个真实的事件是很残酷的是很混乱的

00:35.720 --> 00:42.400
一会呢是ES6的标准一会呢又是common介石的标准那么它编译结果里边它会进行处理

00:42.660 --> 00:46.740
它是怎么处理的编译结果里边它使用的是什么样的模块化标准

00:47.500 --> 00:50.340
首先大家要知道的是这一块可配置

00:50.840 --> 00:56.100
是可以配置的就是编译结果里边到底使用哪一个模块化标准使用的是ES6

00:56.320 --> 01:00.560
还是使用的是common介石这个地方是可以配置的

01:00.920 --> 01:01.920
在哪里配置呢

01:02.440 --> 01:04.760
在tsconfig.json里边

01:05.280 --> 01:06.280
哪个地方配置

01:06.540 --> 01:07.240
就在这个地方

01:08.600 --> 01:09.620
这个地方配置的是啥

01:09.880 --> 01:13.200
配置的是我们写的代码编译完成之后

01:13.460 --> 01:17.820
到了GS那边GS使用什么样的模块化标准

01:18.580 --> 01:21.140
之前呢咱们说我们这个环境是漏的环境对吧

01:21.400 --> 01:24.200
漏的环境里边我们使用common介石标准

01:24.560 --> 01:26.360
当然这里也可以输写什么层吗

01:26.600 --> 01:28.640
输写成ES2015

01:29.000 --> 01:31.040
也就是ES6这两种写法都可以

01:31.520 --> 01:32.960
输写成这种标准也可以

01:33.240 --> 01:35.420
好咱们把它输写成这种标准

01:35.680 --> 01:37.200
我们来编译试一下啊

01:37.460 --> 01:40.800
编译试一下看它的生存的结果到底是什么

01:41.560 --> 01:42.960
好我们把写好了啊

01:43.600 --> 01:45.760
这里呢我们这样子来测试

01:47.200 --> 01:50.160
这样子来测试我们使用编译命令tsc

01:51.040 --> 01:53.840
然后呢加上一个参数两个横杠watch

01:54.400 --> 01:55.200
就啥意思呢

01:55.560 --> 01:57.760
表示的是让这个编译

01:58.240 --> 02:00.800
监听文件的内容的变化

02:01.060 --> 02:04.400
文件内容一变化它就可以自动重新编译

02:04.660 --> 02:06.700
有点类似于loader-mode对吧

02:06.960 --> 02:09.200
只不过我们之前用loader-mode的时候呢

02:09.460 --> 02:13.100
是要去执行啥我们以前在用loader-mode的时候

02:13.600 --> 02:16.300
是要去执行ts-load的这个命令

02:16.560 --> 02:17.900
需要去执行这个命令

02:18.160 --> 02:20.600
这个命令呢可以在内存里面完成编译

02:20.860 --> 02:22.200
并同时完成执行

02:22.600 --> 02:26.200
那么这里tsc呢它是不完成执行的啊

02:26.260 --> 02:28.660
它会把编译的生成到编译结果里边

02:28.760 --> 02:31.800
生成到文件里边但是呢同时不会执行的

02:32.100 --> 02:35.300
它只是监听文件变化文件一变化重新编译

02:35.300 --> 02:36.260
但不会执行

02:36.600 --> 02:38.060
我们把这个选项加上啊

02:38.560 --> 02:39.060
回车

02:40.000 --> 02:41.660
好就让它编译呗

02:41.800 --> 02:43.700
我们不用管啊把这个界面

02:44.200 --> 02:44.800
放下来

02:45.260 --> 02:48.100
然后呢这里有两个文件啊有两个文件

02:48.360 --> 02:51.400
这两个文件呢我这个文件麦妈就这个文件

02:51.400 --> 02:53.600
使用了es6的标准导出

02:53.800 --> 02:56.260
这个文件呢使用了es6的标准导入

02:56.260 --> 02:59.500
我们来看一下对比一下它生成的结果

02:59.500 --> 03:00.600
我们这里分个屏

03:01.100 --> 03:02.400
啊这边呢我们就

03:03.100 --> 03:05.400
显示index显示marge

03:05.800 --> 03:07.100
好我们把这边框掉

03:07.400 --> 03:08.700
好我们来对比一下啊

03:09.200 --> 03:11.500
首先是麦妈就这个文件

03:11.800 --> 03:12.600
就这个文件

03:13.240 --> 03:14.900
大家看一下它编译的结果

03:15.460 --> 03:16.800
你看一下编译的结果

03:17.300 --> 03:18.700
是不是一模一样的

03:19.200 --> 03:20.400
为什么一模一样

03:20.500 --> 03:23.600
因为我们使用的本身就是es6的标准

03:24.300 --> 03:26.400
而我们编译的结果我们也配置了

03:26.400 --> 03:27.700
你看我们之前配置了

03:28.200 --> 03:29.700
tsconfig配置了的

03:30.000 --> 03:31.200
配置了我说我们

03:31.200 --> 03:34.200
我们说编译的结果里边使用的模坏化标准

03:34.200 --> 03:36.000
也是es6的标准啊

03:36.000 --> 03:37.700
使用的还是es6的标准

03:37.700 --> 03:39.200
那两个就没有啥差异了

03:39.500 --> 03:40.400
有啥差异呢

03:40.400 --> 03:42.600
我这里使用的是es6标准的蛋了

03:42.600 --> 03:44.200
那你这里把内型剪

03:44.200 --> 03:46.400
把内型约束去掉就完事了

03:46.400 --> 03:47.600
你看是一样的

03:48.100 --> 03:49.300
好再看index

03:49.800 --> 03:51.300
index这个蛋码呢

03:51.300 --> 03:52.300
你看是不是一样的

03:52.900 --> 03:53.600
你看一下

03:54.400 --> 03:55.500
是完全一样的

03:55.600 --> 03:56.900
完全一样的

03:56.900 --> 03:58.000
没有什么区别

03:58.200 --> 03:59.100
因此呢

03:59.100 --> 04:01.000
如果你ts

04:01.000 --> 04:02.900
反正你ts使用的是es6

04:03.000 --> 04:05.900
如果你的编译结果使用的是模坏化标准

04:05.900 --> 04:07.200
也是es6的话

04:07.400 --> 04:08.300
没有啥区别

04:08.500 --> 04:10.000
没有啥区别都是一样的

04:11.500 --> 04:14.200
这里我顺便说一个小知识

04:14.700 --> 04:16.100
就是你看这里的注释

04:16.600 --> 04:17.700
你看这里的注释

04:17.900 --> 04:20.500
注释他也会编译到编译结果里边

04:20.900 --> 04:22.900
他会原封不动到到编译结果里边

04:23.100 --> 04:26.800
如果你不希望把注释编译到结果里边

04:26.900 --> 04:28.200
你可以配置一下

04:28.400 --> 04:29.100
配置一下

04:29.200 --> 04:30.100
怎么配置呢

04:31.100 --> 04:32.600
在tsconfig里边

04:33.000 --> 04:34.100
tsconfig里边

04:34.600 --> 04:35.200
在这里

04:35.300 --> 04:36.500
给他加上一个配置

04:36.900 --> 04:37.600
在这里

04:38.300 --> 04:40.700
这个配置叫做remove comments

04:41.000 --> 04:42.200
remove comments

04:42.400 --> 04:46.000
把设为去表示移除注释

04:46.200 --> 04:47.400
移除掉注释

04:47.500 --> 04:49.600
编译的结果里边移除掉注释

04:50.100 --> 04:51.200
好保存一下

04:51.700 --> 04:53.200
这里我们重新编译一下

04:53.200 --> 04:54.700
我这里稍微改东西下代码

04:54.900 --> 04:56.300
保存重新编译一下

04:56.300 --> 04:57.200
你看注释没了

04:57.800 --> 04:59.100
编译结果里面注释就没了

04:59.700 --> 05:01.300
ok 这是这种情况

05:01.700 --> 05:02.400
就是说

05:03.300 --> 05:05.900
编译的结果我们如果配置为

05:07.100 --> 05:08.000
我们再看一下这里

05:08.800 --> 05:09.900
编译结果里边

05:09.900 --> 05:12.600
如果我配置为es6的话

05:12.600 --> 05:14.800
那么两者是完全一样的

05:14.800 --> 05:15.700
没有什么区别

05:16.600 --> 05:17.600
好接下来呢

05:17.600 --> 05:19.400
我再把这个东西改一下

05:19.500 --> 05:21.400
改成common.js

05:21.900 --> 05:23.400
改成common.js

05:23.400 --> 05:24.400
我们保存一下

05:24.400 --> 05:25.900
看它的编译结果会怎么样

05:26.800 --> 05:27.900
好再重新来啊

05:28.100 --> 05:28.900
这边再来

05:29.300 --> 05:30.500
现在的编译

05:30.700 --> 05:32.100
编译结果

05:32.200 --> 05:33.100
编译目标

05:33.100 --> 05:35.100
也就是编译结果里边的模块化标准

05:35.100 --> 05:36.000
发生了变化

05:36.300 --> 05:36.800
这里呢

05:36.800 --> 05:38.100
我们稍微改中一下文件

05:38.100 --> 05:39.100
重新保存一次

05:39.100 --> 05:40.200
让文件发生变动

05:40.400 --> 05:40.900
保存

05:41.000 --> 05:42.100
你看他编译的结果

05:42.500 --> 05:43.000
变了

05:43.400 --> 05:44.800
他就不再是es6了

05:44.900 --> 05:46.900
因为我们之前配置的是es6

05:47.000 --> 05:49.300
现在呢配置的是common.js

05:49.500 --> 05:51.300
这边使用的模块化标准呢

05:51.300 --> 05:52.700
是common.js

05:53.200 --> 05:54.700
好我们来看一下这一块的单码

05:56.600 --> 05:57.100
首先呢

05:57.100 --> 05:57.800
这里说一下

05:57.800 --> 05:59.000
他会加入这个东西

05:59.000 --> 06:00.300
eos strict

06:00.600 --> 06:02.100
就是使用严格模式

06:02.700 --> 06:05.700
如果你不了解什么叫严格模式的话

06:05.700 --> 06:07.000
可以去摆渡一下啊

06:07.200 --> 06:07.900
可以去摆渡一下

06:07.900 --> 06:09.600
介石里面的严格模式

06:10.000 --> 06:10.400
但是呢

06:10.400 --> 06:10.800
这里呢

06:10.800 --> 06:12.300
其实很多时候呢

06:12.300 --> 06:14.000
我们觉得没有怎么必要了

06:14.000 --> 06:15.400
因为我们写的ts

06:15.400 --> 06:17.400
代码基金足够严格了啊

06:17.400 --> 06:19.300
比这种严格模式还要严格的多

06:19.500 --> 06:20.200
因此呢

06:20.200 --> 06:21.300
他生成的结果里面

06:21.300 --> 06:22.200
我们觉得这句话

06:22.200 --> 06:23.900
实际上是没有什么必要的啊

06:24.000 --> 06:24.700
没有什么必要

06:24.700 --> 06:26.100
把他生成到编译结果里面

06:26.500 --> 06:26.900
因此呢

06:26.900 --> 06:28.700
我们可以进行一下配置啊

06:28.700 --> 06:29.000
这里

06:30.000 --> 06:30.400
在这

06:30.800 --> 06:31.600
来看一下啊

06:31.800 --> 06:32.800
这个配置啊

06:32.800 --> 06:34.200
刚才说的这个码就对吧

06:34.300 --> 06:36.100
还有这个啊这里啊

06:36.400 --> 06:39.300
no implicit use strict

06:39.500 --> 06:40.600
编译结果里面

06:40.700 --> 06:42.300
不包含 use strict

06:42.400 --> 06:43.700
把这个配置开启就行了

06:44.000 --> 06:44.800
非常简单

06:44.900 --> 06:45.100
好

06:45.100 --> 06:46.100
咱们来开启一下

06:47.400 --> 06:47.800
这里

06:47.800 --> 06:48.600
task config

06:50.200 --> 06:50.400
好

06:50.400 --> 06:51.000
这里呢

06:51.400 --> 06:52.500
把这个配置开起来

06:54.600 --> 06:55.100
no

06:56.100 --> 06:56.800
input

06:57.700 --> 06:58.300
use

06:59.600 --> 07:00.300
strict

07:00.600 --> 07:01.200
把开启

07:01.800 --> 07:02.800
好开启到之后呢

07:02.800 --> 07:04.200
咱们再重新编译一次啊

07:04.200 --> 07:05.000
重新编译一次

07:05.300 --> 07:06.700
你看严格模式没了

07:07.400 --> 07:07.700
好

07:07.700 --> 07:09.700
咱们来看一下他的编译结果

07:11.400 --> 07:12.900
第一行不用看啊

07:12.900 --> 07:13.900
第一行不用看

07:14.200 --> 07:15.600
第一行实际上做什么呢

07:15.600 --> 07:16.700
实际在做什么呢

07:17.000 --> 07:18.600
实际在他在做这么一件事情

07:19.200 --> 07:21.200
往这个exports里面啊

07:21.200 --> 07:22.000
exports啥

07:22.100 --> 07:24.600
是个common gs里面的那个导出的对象

07:24.600 --> 07:25.100
对吧

07:25.500 --> 07:27.000
module.exports

07:27.200 --> 07:29.700
也可以通过直接通过exports来导出

07:29.700 --> 07:31.000
就是那个导出的对象

07:31.400 --> 07:31.700
嗯

07:31.700 --> 07:33.900
往exports里面加入一个属性

07:33.900 --> 07:36.600
这个属性的名字叫两个加滑线es mode

07:36.600 --> 07:38.600
把他把他的值的设为chue

07:38.900 --> 07:39.000
啊

07:39.000 --> 07:41.100
整个这句话就相当于是在做这么一件事

07:41.700 --> 07:42.700
我把重写一次吧

07:43.400 --> 07:45.000
整个这句话还在做这么一件事

07:45.900 --> 07:48.400
es module等于chue

07:48.600 --> 07:50.500
他做这件事情有什么用啊

07:50.500 --> 07:52.300
现在先别管啊

07:52.300 --> 07:54.300
现在先别管别管他有什么用

07:54.300 --> 07:55.600
我们之后再说啊

07:55.700 --> 07:56.400
这个东西

07:56.500 --> 07:57.800
这个东西让他放着吧

07:57.800 --> 07:58.300
放着

07:59.900 --> 08:00.700
怎么再来一次啊

08:00.700 --> 08:01.300
再来一次

08:01.900 --> 08:02.400
保存

08:02.900 --> 08:03.300
好

08:03.500 --> 08:05.500
我们主要是关注下面的

08:05.700 --> 08:06.600
就这一部分

08:06.800 --> 08:07.900
关注这一部分

08:08.500 --> 08:10.000
这一部分在做什么呢

08:10.100 --> 08:10.700
大家看

08:10.800 --> 08:12.400
他导出了两个东西

08:13.100 --> 08:13.900
第一个

08:14.400 --> 08:17.400
在导出的对象里边有一个name属性

08:17.400 --> 08:18.600
给他复制为caven

08:18.800 --> 08:19.700
他对应到这

08:20.100 --> 08:20.600
大家看

08:20.600 --> 08:21.500
他对应到这

08:22.100 --> 08:24.100
这是用es6的方式导出的

08:24.400 --> 08:25.800
但是comment.js里面

08:25.800 --> 08:27.100
他肯定没有这个东西对吧

08:27.200 --> 08:29.400
comment.js里面他导出只能通过他

08:29.600 --> 08:31.800
要么通过module.exports

08:32.100 --> 08:33.600
只能通过这两个东西来导出

08:33.800 --> 08:34.200
啊

08:34.300 --> 08:36.300
而且导出的只能是一个对象

08:36.400 --> 08:37.200
啊一个对象

08:37.200 --> 08:38.200
我们他于是呢

08:38.200 --> 08:39.600
他只能把这些东西

08:39.600 --> 08:41.300
要导出了一个一个的东西

08:41.300 --> 08:42.500
放到对象里边

08:42.600 --> 08:43.800
啊放到对象里边

08:44.400 --> 08:46.200
然后对象里边有个name属性

08:46.200 --> 08:47.300
把它复制为caven

08:47.800 --> 08:49.000
然后写了个函数

08:49.000 --> 08:50.500
这个函数就是我们这里的函数

08:50.500 --> 08:51.000
你看看

08:51.100 --> 08:52.000
就这里的函数

08:52.500 --> 08:53.400
写了个函数

08:53.400 --> 08:54.800
然后呢把这个函数

08:54.800 --> 08:56.400
也作为一个属性导出

08:56.700 --> 08:59.200
其实这一段单码相当于是啥呢

08:59.400 --> 09:02.400
相当于是我们之前长写的这个

09:02.700 --> 09:04.400
啊导出为啥呢

09:04.500 --> 09:06.100
导出为name

09:06.600 --> 09:07.300
caven

09:07.700 --> 09:09.300
然后sum

09:10.200 --> 09:10.800
b

09:11.200 --> 09:12.000
为啥呢

09:12.400 --> 09:14.100
return a加b

09:14.400 --> 09:15.600
就相当于是这个东西

09:15.700 --> 09:16.700
啊相当于是这个东西

09:16.700 --> 09:17.900
或者是我这样子写吧

09:18.700 --> 09:19.300
这样子写

09:19.700 --> 09:20.400
那么应该吧

09:20.500 --> 09:21.600
相当于是这个东西

09:21.700 --> 09:24.100
他把我们这里的export导出

09:24.100 --> 09:25.700
变成了这种格式

09:25.700 --> 09:26.100
啊

09:26.100 --> 09:27.200
怎么他的写法呢

09:27.300 --> 09:28.700
使用的是export而已

09:29.000 --> 09:30.000
啊使用的是这个

09:30.200 --> 09:30.900
export

09:31.700 --> 09:33.000
好这是他导出

09:33.300 --> 09:34.700
我们再来看导入呢

09:35.100 --> 09:36.500
这边切换到index

09:36.900 --> 09:38.000
这边切换到

09:38.300 --> 09:39.000
解释

09:39.200 --> 09:40.100
他导入

09:41.100 --> 09:42.000
好这里呢

09:42.000 --> 09:43.500
我们来完成编译啊

09:43.500 --> 09:44.500
来完成编译

09:45.900 --> 09:47.400
好编译完成

09:47.800 --> 09:48.800
编译完成之后

09:48.800 --> 09:50.200
我们来看一下他的导入

09:50.500 --> 09:51.500
他是怎么导入的

09:51.900 --> 09:53.600
第一行同样不用看啊

09:53.600 --> 09:54.600
第一行不用看

09:54.900 --> 09:56.200
就从第二行开始看

09:57.200 --> 09:59.800
common.js里边有没有什么 import from

09:59.800 --> 10:00.700
因为这东西

10:01.000 --> 10:02.700
肯定是没有这个东西啊

10:02.800 --> 10:04.000
他只有什么呢

10:04.000 --> 10:05.200
他只有require

10:05.300 --> 10:07.000
他是通过require来导入的

10:07.500 --> 10:08.000
于是呢

10:08.000 --> 10:10.700
他帮你自动的生成了一个变量啊

10:10.900 --> 10:12.300
这个变量的名字呢

10:12.400 --> 10:13.400
使用的什么名字呢

10:13.400 --> 10:14.900
就是文件的名字

10:15.000 --> 10:16.100
加上一个下滑线

10:16.100 --> 10:17.400
加上一个编号啊

10:17.600 --> 10:18.800
如果你有多次导入的话

10:18.800 --> 10:20.100
就编号就一时之争

10:20.200 --> 10:22.600
他是用这种方式给你生成了一个变量

10:23.100 --> 10:25.900
然后require把整个模块拿进来啊

10:25.900 --> 10:27.400
拿进来就是那个对象

10:27.400 --> 10:29.400
你看这边导出的是一个对象

10:29.500 --> 10:30.840
对象里面有两个属性

10:30.840 --> 10:32.000
name和上啊

10:32.000 --> 10:34.000
因为common.js只能用这种方式导出

10:34.000 --> 10:34.700
没办法

10:35.200 --> 10:36.100
好这边呢

10:36.200 --> 10:37.400
他又得到这个对象

10:37.600 --> 10:39.000
然后我们输出这个name的时候

10:39.000 --> 10:40.600
你看这边输出这个name的时候

10:40.600 --> 10:42.700
他就输出了是这个对象的属性name

10:43.200 --> 10:43.900
啊你看到没

10:43.900 --> 10:47.300
他就通过这种方式来帮你搞定

10:47.400 --> 10:48.600
啊来帮你搞定

10:48.900 --> 10:50.500
啊就是es6的代码

10:50.600 --> 10:51.600
转换到

10:52.200 --> 10:54.100
common.js的模块化标准啊

10:54.100 --> 10:55.600
他通过这种方式来搞定的

10:56.700 --> 10:58.100
好我们再来看一个啊

10:58.100 --> 10:59.000
再来看一个

10:59.500 --> 11:01.300
刚才呢我们看到的是

11:01.800 --> 11:03.400
刚才我们看到的是啥呢

11:03.700 --> 11:04.700
看到的是

11:05.100 --> 11:06.900
通过这种方式来导出

11:07.500 --> 11:10.000
那如果我有一个默认导出呢

11:10.300 --> 11:11.300
那怎么办呢

11:11.700 --> 11:13.400
如果我有一个默认导出咋办

11:13.900 --> 11:14.700
export

11:15.300 --> 11:16.000
default

11:16.400 --> 11:18.800
啊然后呢我这里写个函数吧

11:18.800 --> 11:19.700
随便写个函数

11:20.000 --> 11:20.800
say hello吧

11:21.100 --> 11:22.100
随便写个啥函数

11:22.100 --> 11:22.700
无所谓

11:22.700 --> 11:24.200
现在这个函数名字都不重要啊

11:24.200 --> 11:25.600
对吧这个函数名字不重要

11:25.600 --> 11:26.600
因为他是默认嘛

11:26.800 --> 11:29.100
默认导出的函数名字可以没有的

11:29.100 --> 11:30.200
可以是个匿名函数

11:30.700 --> 11:31.600
那就随便写吧

11:32.400 --> 11:32.800
hello

11:34.600 --> 11:35.600
myju

11:37.600 --> 11:39.400
好我写了一个默认导出

11:39.700 --> 11:40.500
那你想啊

11:40.800 --> 11:42.700
在comment.js里面有没有这个玩意啊

11:42.700 --> 11:43.600
肯定没有

11:44.500 --> 11:46.300
我们保存一下看他会生成什么

11:47.500 --> 11:48.800
好这边到这边来

11:49.600 --> 11:51.000
你看看他会生成啥呢

11:51.500 --> 11:52.700
他会生成这么一个东西

11:53.000 --> 11:55.400
有一个函数这个函数是啥不重要啊

11:55.400 --> 11:56.400
名字叫啥不重要

11:56.800 --> 11:58.900
然后他把这个函数复制给他啥呢

11:59.300 --> 12:02.700
复制给了一个一个sport的一个属性叫default

12:03.100 --> 12:04.800
他只能这样做没办法

12:04.900 --> 12:07.100
因为es6里面有默认导出啊

12:07.100 --> 12:08.000
有这种导出

12:08.200 --> 12:10.600
但是comment.js里面只有一种导出方式

12:11.000 --> 12:11.900
就是一个sport

12:12.000 --> 12:12.800
他是一个对象

12:12.800 --> 12:14.200
以往对象里面加东西

12:14.400 --> 12:15.800
他只能这样子没办法

12:16.200 --> 12:19.500
因此呢我们的默认导出到了comment.js里边

12:19.600 --> 12:20.300
变成了啥

12:20.700 --> 12:22.500
变成了一个属性default

12:22.800 --> 12:24.600
变成了一个属性default

12:24.800 --> 12:25.700
他只能这样子做

12:25.800 --> 12:26.700
他没有办法

12:27.400 --> 12:27.900
好

12:28.000 --> 12:30.200
他变成了一个属性default过后了

12:30.300 --> 12:31.400
咱们到这边来看

12:31.600 --> 12:33.500
我们来写个默认导入啊

12:33.600 --> 12:34.500
默认导入

12:34.800 --> 12:35.700
比方说

12:36.700 --> 12:37.600
shallow

12:38.000 --> 12:39.500
这是他的默认导入对吧

12:39.800 --> 12:40.900
好我们这里

12:41.800 --> 12:43.600
调用这个shallow这个函数

12:43.900 --> 12:46.000
看一下到了index里边

12:46.000 --> 12:47.900
他导入的时候又变成了啥

12:48.300 --> 12:49.100
保存一下

12:50.200 --> 12:50.900
你看一下

12:51.600 --> 12:53.500
我们写的函数明明叫shallow

12:53.800 --> 12:54.500
但是呢

12:54.700 --> 12:56.600
变到他这里呢变成了啥了

12:56.700 --> 12:57.800
变成了default

12:58.200 --> 12:59.100
因为那边导

12:59.200 --> 12:59.800
你看

13:00.100 --> 13:01.200
导入一个对象

13:01.200 --> 13:03.900
整个comment.js里面导入的就是整个对象

13:04.100 --> 13:07.600
对象里面lamb属性上这个函数

13:07.700 --> 13:09.100
还有一个default函数

13:09.400 --> 13:10.900
也是这个对象的成员

13:11.200 --> 13:13.600
因为导出的时候他就是用这种方式导出的

13:13.700 --> 13:15.000
他跟lamb上

13:15.300 --> 13:17.100
一样成为一个是

13:17.100 --> 13:18.300
是这个对象的

13:18.500 --> 13:19.600
一个一个的成员

13:19.600 --> 13:21.100
那么这边使用的时候呢

13:21.100 --> 13:22.500
也只能这样子使用

13:23.500 --> 13:24.100
实际上呢

13:24.100 --> 13:26.300
我们在做开发过程中啊

13:26.500 --> 13:28.800
很多时候呢都不用去太关心

13:29.200 --> 13:30.900
关于他这个导入导出

13:30.900 --> 13:32.300
编印的结果是什么

13:32.600 --> 13:34.800
但是了解这个编印结果呢

13:34.900 --> 13:37.000
对你处理一些很细节的问题呢

13:37.000 --> 13:38.400
是有有所帮助的

13:38.400 --> 13:39.600
是有所帮助的

13:40.200 --> 13:41.100
ok 这就是

13:41.700 --> 13:42.400
这里啊

13:43.800 --> 13:44.800
笔记一下

13:46.610 --> 13:48.510
这里我们把这边的窗口关掉

13:49.110 --> 13:50.310
好 这里笔记记一下啊

13:51.910 --> 13:52.710
好 配置完了

13:52.710 --> 13:54.110
配置完了过后呢

13:54.110 --> 13:56.210
我们来看一下ts

13:57.410 --> 13:58.010
中的

13:59.010 --> 14:00.210
模块化

14:01.210 --> 14:01.510
啊

14:02.410 --> 14:04.410
在编印结果中

14:04.510 --> 14:05.910
这是一个什么样的格式

14:06.310 --> 14:06.910
第一个

14:07.310 --> 14:10.910
如果编印结果的

14:11.610 --> 14:14.410
模块化标准

14:14.710 --> 14:16.210
是es6

14:16.410 --> 14:20.010
如果编印结果就是GS里面使用的模块化标准是es6

14:20.010 --> 14:21.110
也就是说

14:21.110 --> 14:23.210
你这里配置的是es6的话

14:23.410 --> 14:23.910
那么

14:25.310 --> 14:26.510
没有区别啊

14:26.610 --> 14:27.510
没有区别

14:27.710 --> 14:28.910
结果就是没有区别

14:30.720 --> 14:32.720
我们在ts里面写的什么东西

14:32.720 --> 14:34.420
到了GS还是什么东西

14:34.420 --> 14:36.120
因为都是使用的是es6

14:36.120 --> 14:36.620
对吧

14:36.620 --> 14:37.520
没有什么区别

14:38.220 --> 14:38.620
好

14:39.220 --> 14:40.420
另外一种情况

14:40.520 --> 14:43.920
如果编印结果的模块化标准

14:45.800 --> 14:49.700
模块化标准是commonGS

14:50.800 --> 14:52.600
那么我们导出的

14:53.000 --> 14:54.000
导出的

14:55.800 --> 14:56.600
声明

14:57.300 --> 14:58.700
导出的一个一个的声明

14:58.700 --> 14:59.400
就是我们这里

14:59.400 --> 14:59.900
你看

15:00.300 --> 15:00.700
这里

15:00.900 --> 15:02.800
你看导出的一个一个的声明

15:03.000 --> 15:04.200
会变成什么呢

15:04.500 --> 15:07.000
会变成export

15:07.700 --> 15:12.000
变成export的属性

15:13.200 --> 15:15.100
默认的导出

15:15.500 --> 15:20.600
会变成export的default属性

15:20.800 --> 15:23.300
会变成export的default属性

15:23.900 --> 15:24.000
好

15:24.000 --> 15:24.900
这是导出

15:25.300 --> 15:26.400
导入的时候呢

15:26.400 --> 15:27.100
当然呢

15:27.100 --> 15:28.100
你自己就明白了

15:28.100 --> 15:29.000
我就不写了

15:29.100 --> 15:30.000
导入的时候呢

15:30.000 --> 15:30.600
他就会

15:31.100 --> 15:32.300
把整个对象拿到

15:32.300 --> 15:34.400
一次从里面去取我们的属性

15:34.400 --> 15:35.500
取我们的属性

15:35.500 --> 15:36.600
你要用默认值

15:36.800 --> 15:37.700
默认导出的东西

15:37.700 --> 15:39.200
他就取这个属性default

15:39.500 --> 15:41.000
你要用他的具体的声明

15:41.000 --> 15:42.800
就去取这些相应的属性

15:43.200 --> 15:44.000
明白这个意思吗

15:44.700 --> 15:45.800
是用这种方式

15:45.900 --> 15:47.300
是用这种方式完成的

15:48.200 --> 15:48.500
ok

15:48.500 --> 15:51.000
这是关于commonGS

15:51.000 --> 15:52.100
TS里边

15:52.100 --> 15:53.100
他导出

15:53.100 --> 15:54.400
导入导出的代码

15:54.500 --> 15:56.100
在编印结果里边

15:57.000 --> 15:58.000
是一个什么样子

15:58.900 --> 16:00.400
其实你把这些东西了解了

16:00.400 --> 16:01.100
过后呢

16:01.100 --> 16:02.700
就已经知道差不多了

16:02.700 --> 16:04.400
破坏话这里就已经差不多了

16:04.800 --> 16:05.700
只不过呢

16:05.700 --> 16:06.700
有的时候呢

16:06.700 --> 16:10.300
可能会遇到一些比较的特殊的情况

16:10.400 --> 16:11.300
我们有的时候呢

16:11.300 --> 16:13.000
会发现他要爆错

16:13.100 --> 16:13.900
比方说

16:13.900 --> 16:14.800
我们在这里

16:15.200 --> 16:16.100
ts里边

16:16.200 --> 16:17.700
我们想使用load

16:18.300 --> 16:19.900
loads里面一个东西

16:20.000 --> 16:23.500
我们使用export fs from

16:23.900 --> 16:24.900
我们的使用这个

16:25.600 --> 16:26.700
使用这个的时候

16:26.700 --> 16:28.300
你会发现他要出问题

16:28.300 --> 16:29.200
他要爆错

16:29.500 --> 16:30.400
面对

16:31.500 --> 16:32.700
面对这种情况

16:35.500 --> 16:36.800
他说没有去使用他的纸

16:36.800 --> 16:37.000
对吧

16:37.000 --> 16:38.200
实际上不是这个错误

16:38.300 --> 16:39.200
实际上不是这个错误

16:39.200 --> 16:40.300
你看他提示都没有了

16:40.700 --> 16:41.600
提示都没有了

16:41.600 --> 16:42.500
他读不出来

16:42.600 --> 16:43.800
读不出来这个类型是啥

16:44.300 --> 16:46.700
他说 fs没有默认导出

16:46.900 --> 16:48.100
没有默认导出

16:48.300 --> 16:50.100
那么这个东西是怎么回事

16:50.200 --> 16:51.600
又该如何来解决

16:51.600 --> 16:53.100
这就是一些特殊情况了

16:53.400 --> 16:54.300
特殊情况下

16:54.300 --> 16:56.800
我们该如何来控制一下他的模块化

16:57.000 --> 16:57.500
好

16:57.600 --> 16:59.600
我们等下一节

16:59.600 --> 17:02.000
下一个小节来讲这个问题

