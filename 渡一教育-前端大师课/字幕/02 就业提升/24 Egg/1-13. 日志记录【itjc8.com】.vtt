WEBVTT

00:00.180 --> 00:02.480
这些可能说一下的日字

00:03.240 --> 00:06.840
日字这个玩意呢 它是蛮边缘的功能了

00:07.340 --> 00:09.400
但是呢 有的时候呢 也蛮重要的

00:10.420 --> 00:14.520
有的 我们一般来说 查看什么事情的话 我们是会查看日字

00:14.780 --> 00:17.840
就是有客户反应啊 包了一个bug

00:18.100 --> 00:21.160
怎么网站呢 有些地方呢 他有的时候爆错啊

00:21.420 --> 00:26.540
平时呢 我们测试呢 没有测试出来 但是呢 用客户给我们反馈了 这种情况呢 也经常遇到过

00:27.320 --> 00:29.100
那么这个时候呢 你要去

00:29.560 --> 00:37.040
你要问客户 到底是什么情况 他也可以描述不清楚 所以说一般来说 他给你说一个大概的时间段 在什么时间段 他爆了个错

00:37.540 --> 00:38.840
他是什么样的用户 对吧

00:39.600 --> 00:41.640
那么这个时候呢 你可以去查看一下你的日字

00:42.920 --> 00:44.960
看一下当时他的访问情况是怎么样子的

00:46.000 --> 00:48.800
那么到底是怎么回事 怎么报的错

00:49.320 --> 00:49.840
就这么个意思

00:50.360 --> 00:57.000
另外呢 有的时候呢 我们会可能会对访问的某一些关键页面啊 或者是一些关键接口呢 做一些记录

00:57.460 --> 01:03.100
你没访问一次呢 我做一些记录 我看一下他的调用频率怎么样啊 可能做一些商用的分析

01:03.620 --> 01:08.980
那么这些记录呢 也不一定要日子来做了 日子可以做 以别的东西呢也可以做 比方说一些

01:09.240 --> 01:11.540
战场战的分析工具啊 或者是

01:12.060 --> 01:14.620
一些那个操作系统上面的一些

01:15.900 --> 01:17.180
请求端口的一些

01:17.440 --> 01:21.020
分析的工具都可以做啊 日子只是其中一种方案而已

01:21.540 --> 01:24.340
总之呢 这个日子呢 他有的时候呢 能发挥他的用处

01:25.040 --> 01:31.000
好 我们这就可能再说一下这个日子 首先说一下日子的路径啊 就是日子保存在哪儿呢 他保存到这

01:32.400 --> 01:38.400
那个是啊 这种目标目录 摸着你喜欢一下是这样子啊 再跟目录下面的那个是火箭甲 下面

01:38.720 --> 01:42.640
然后呢 后边又是一个工程名 但是呢 我说明的工程名呢

01:43.120 --> 01:45.280
你看啊 我见目前的工程名呢

01:46.000 --> 01:54.240
使用了命名空间啊 又导致了他把东西当成两个目录了啊 这是一个目录 然后这是一个目录啊 别成这个样子啊 放到这个目录下面的

01:54.720 --> 02:01.720
那意思吧啊 日子不不 这是日子的路径 那么这个东西可不可以配置呢 可以配置 比方说我们怎么配置呢 我们就可以在

02:02.320 --> 02:03.520
呃 配置文件里边

02:04.440 --> 02:09.440
咖啡一个里边 当然这样子呢 可以根据不同的环境呢 来进行配置啊 比方说我们再配置一下吧 export

02:10.600 --> 02:13.040
呃 配置然后呢 log log

02:13.880 --> 02:16.960
那么所有的跟日子相关的啊 配置呢 全部写到这

02:17.940 --> 02:21.540
啊 与日子相关的配置写到这

02:22.300 --> 02:29.220
好 那么写到这的过后呢 这边里边有哪些配置呢 一个是天儿啊 就是日子的路径 那么这个路径呢 你可以用一个pace

02:31.940 --> 02:36.180
呃 给他一个决定路径 告诉他 手中的告诉他你的日子放到什么位置

02:37.220 --> 02:37.540
pace

02:39.220 --> 02:39.660
result

02:41.180 --> 02:46.380
我们比方说当前目录啊 当前配置文件这个模块所在的目录呢 反回上级目录啊 logs

02:46.800 --> 02:50.720
保障这啊 你就不要在里边给我搞一些花链辅兆的就是

02:52.080 --> 02:56.400
文件夹了啊 这样子呢也可以啊 比方说配置好了 接下来来启动一下吧

02:59.760 --> 03:05.470
啊 np 我们把这个三的啊 np 装带

03:08.250 --> 03:18.090
啊 你看 这个日子目录是不是生成出来了 对吧 那么这里边是不是直接就是里边的日子了 对不对啊 有一个日子呢 比较特殊 它是放到这的啊 我们这里说一下

03:18.510 --> 03:26.550
好了 那么现在呢 就是这个这个日子 本来啊 其实这个这个这个日子文件

03:27.070 --> 03:33.510
它本来不是放到指部都里边去的 它是怎么回事呢 它是你的工程名字加上一个横杠web

03:33.830 --> 03:40.230
我而我的工程名字是atadoe的横杠edu啊 然后一个鞋杠那个鞋杠他就认为是一个目录了啊

03:40.510 --> 03:43.590
他就把它变成那个 因为他转换路径的时候就认为他是一个目录了

03:43.850 --> 03:48.530
所以说呢 它导致这个问题啊 本来是不是放到一个文件家里边的啊 这里我说一下就行了

03:49.290 --> 03:50.690
好 这是关于这一块

03:51.850 --> 04:02.290
日子的位置 一般情况下呢 我们日子路径呢 开发环境可以不用去动它 生产环境呢 我们会一般会放到一个统一的目录里边去

04:02.690 --> 04:10.130
像你那个是稍作系统 他有一个统一的日子目录 对吧 在这啊 var logs里边 你们可以给个工程名字

04:10.870 --> 04:14.990
或者是就直接用xgs的logs 给个工程名字也可以 把放到这

04:16.030 --> 04:18.510
啊 这是关于日子的路径啊 需要的时候就配置一下

04:19.470 --> 04:25.150
好 关键来了啊 就后边怎么来用这个日子 我们怎么去记录一些东西到日子里边去 我们首先就要了解

04:25.590 --> 04:30.230
aggs里边他对日子的分类 他呢 他是把日子分为四个大类

04:31.110 --> 04:38.350
分别是应用日子啊 框架内核日子 以及呢 错误日子和那个A进程日子 我们一个个说吧 一个是

04:40.350 --> 04:47.350
应用内日子 那么这个日子呢 是跟我们密切相关的啊 像我们平时记录日子的话 一般就是记录到应用日子

04:47.630 --> 04:55.710
我们看整个程序 整个服务器在应用的 在这个运行的过程中 有哪些地方啊 我们需要记录一下 那么一般都使用的是应用日子

04:56.230 --> 05:01.350
那么这个应用日子呢 它默认的文件名呢 是保存到一个目录下面的 就是日子目录下面的这个地方

05:01.790 --> 05:05.910
虾目名很干坏的 你看 虾目名字 这是个虾目名字

05:07.390 --> 05:09.830
只不过呢 我的虾目名呢 你看 我的虾目名是这样子的

05:11.070 --> 05:19.430
我的虾目名是at都一 横杠edu 写杠 都一ag 这是我的虾目名 再再跟上一个横杠web

05:20.310 --> 05:25.750
是不是变成这样子的 对吧 所以他给我现在给我念一下啊 这是我用了秘名空间导致的

05:26.470 --> 05:31.070
好 这是关于这个applog 那么它是

05:33.190 --> 05:39.990
它是最常见的啊 最常见的就是我们要使用的日子 那么我们怎么来用记录这样的日子呢 是通过contact

05:40.270 --> 05:44.750
无论你在什么地方 你只要能够获取contact 是 那么这里面提供了一个对象角楼格

05:45.550 --> 05:49.230
那么通过这个对象来记录日子 当然究竟怎么记录我一会再说啊

05:50.030 --> 05:52.030
然后呢 第二种方式呢 是通过app

05:52.750 --> 05:58.630
里面提供了一个对象角楼格啊 通过它来记录 那么这两种有什么区别呢 区别就在于

05:59.030 --> 06:03.030
如果是你是利用了第一种的话 那么记录的日子是跟上下文相关的

06:03.630 --> 06:07.750
那么上下文怎么来的 上下文是不是跟请求相关 对吧 有请求才会有上下文

06:08.250 --> 06:16.890
那么这个上下文里面呢 还会记录到咱们的请求的路径啊 请求的ip地址啊 也就是哪个ip地址发出来的请求 它说都会自动记录进去

06:17.410 --> 06:22.970
如果说通过app 来记录的话 那么也是应用跟应用相关的 记录的都是都记录到同一个文件

06:23.450 --> 06:28.970
只不过这个这个东西来记录的话 它就是跟整个应用程序相关的啊 就是跟不是跟请求有关啊

06:29.690 --> 06:31.170
啊 比方说像什么的时候呢

06:32.150 --> 06:32.910
像那个

06:33.670 --> 06:34.790
咱们在做

06:37.270 --> 06:42.070
应用启动的时候可能要做一些事情 那么应用启动的时候 这些事情能为可以用这个东西来记录

06:42.390 --> 06:45.430
绝大部分情况下 我们都使用它来记录 要那意思吧

06:45.990 --> 06:52.790
好 这是这个applogger 后面几个logger呢 我们了解一下啊 一个是calllogger 那么这是一般来说是框架内核

06:53.230 --> 07:01.150
就是 egg接是内部啊 底层它要使用的一些日子记录 还有那就是一些插件啊 它可能会把日子记录的放到

07:01.470 --> 07:03.910
这个地方啊 那么这个是 egg waver

07:07.230 --> 07:14.910
放到这的啊 egg waver 那么这里边你看什么 egg ready是插件对吧 那么它这个告诉你server已经连上了这个ready是啊等等等等

07:14.910 --> 07:22.990
这里是有些插件了 有些内核的日记录 那么这个call就是内核啊 egg内核 它告诉你啊 这个完成了

07:23.990 --> 07:26.950
四毫秒内完成了这个操作 就这么意思啊

07:28.550 --> 07:31.750
好 然后airlogger呢 它是对应的文件是这个

07:32.730 --> 07:38.530
我说一下是内核吧 内核的app是这个通过context 呢 得到一个对象叫calllogger

07:39.290 --> 07:43.090
用法呢 跟上面这个logger的用法一会我会讲用法啊 用法的差不多

07:43.650 --> 07:48.010
那么它记录的东西呢 就是内核日子啊 你就通过如果说通过它来记录的话 就会跑到这

07:48.850 --> 07:57.130
要的是吧 好 那么还有个airlogger就表示的是日错误级别的日子 那么错误级别的日子呢 它会放到这个commer error

07:57.710 --> 08:03.830
就任何地方有了错误 它会自动的放到这 任何地方有错误 不管你是内核有错误

08:04.310 --> 08:11.270
还是说我们的这个应用里边的日子有错误啊 就记录的是错误日子 那么它除了在这里边记录之外

08:11.430 --> 08:17.030
它还会记录到commer error里边 只要有错误就会记录啊 那么这个什么情况下会有错误呢

08:17.990 --> 08:21.350
我们就要设计到日子级别了啊 我们一会来说这个日子级别

08:22.330 --> 08:27.330
好 那么接下来就是这个agent程的logger 我们之前是不是讲了这个ag里边是多进程的 对不对

08:27.690 --> 08:31.490
那么其中一个进程的就是agent 单个进程什么 张货内核全是他看

08:32.090 --> 08:39.250
那么这里边的我们一般来说不用去关心这一点啊 就agent程的运行过程中 它的日子呢是放到这个agent程日子的 它退运的地方是这个

08:40.130 --> 08:43.970
这里边有日子 这些日子呢我们一般都不会管 我们一般来说就是看这个日子

08:44.690 --> 08:48.370
就看这个就是工程民很耽误这个日子 原来的意思吧

08:49.190 --> 08:55.110
好 那么这是关于各种日子的类别以及我们怎么样去记录到这个类别这边去

08:56.190 --> 08:59.190
我们最关键的是记住这个 需要知道这个

09:00.910 --> 09:04.390
其实啊 这个框架这个东西 顺便说一句

09:05.550 --> 09:09.470
不要把它看的那么恐怖啊 看那么可怕

09:10.630 --> 09:16.510
你要从战略上去描述它 框架其实本质上无论你是什么框架

09:17.130 --> 09:22.770
都是把一些常用的第三方库 我们平时经常用到的功能

09:23.730 --> 09:29.450
而以及呢 有这些功能设计到的第三方库给你整合到一起 形成一个完整的整体

09:30.050 --> 09:34.490
然后使用统一的开发风格和统一的约束 统一的约定

09:34.970 --> 09:43.170
去进行开发 然后呢 向上来又提供了一些接口来可以安装一些插件来扩展框架的功能 无非就是这么一回事

09:43.710 --> 09:48.470
就是这么一个东西 什么叫从战略上描述它呢 就是你一定能够好搞听的

09:48.470 --> 09:51.590
他很多时候呢 就是告诉你怎么去用 你按照他的用法去用就行了

09:52.430 --> 09:55.830
所以说他你一定会用会的 你一定会学能学懂的

09:56.790 --> 10:01.070
怎么样 那我们在具体的用的时候呢 你要去重视他 比方说我们要

10:01.590 --> 10:06.150
我们知道日子大概是怎么回事就行了 那到时候呢 我们真的要去记录日子的时候呢

10:06.150 --> 10:11.230
我们要去详细的认真的去看他的app到底是怎么回事 我们该怎么去记录啊 就这么一个东西

10:12.210 --> 10:20.410
没有那么恐怖啊 那么证人呢 我说一下关于对应的日子级别 这个日子级别是什么意思呢 其实你们之前用学过那个log4

10:21.330 --> 10:26.010
啊借借也是啊 那么里边呢 其实就涉及到日子级别了 对吧

10:26.810 --> 10:29.530
那么这里也是一样 他把日子呢 分为四个级别

10:30.330 --> 10:31.530
debug 调日子

10:32.690 --> 10:33.130
info

10:34.130 --> 10:37.530
普通日子就是一个信息 world 警告 error 错误

10:38.510 --> 10:42.350
那么以后 error 记录到错误的日子呢 他会自动的记录到这个

10:42.870 --> 10:43.430
啊 就是

10:44.790 --> 10:51.310
哪里呢 error local 里边啊 common local 里边就除了在原来的地方该记录记录的话 之外啊 他还会记录到

10:51.710 --> 10:56.630
common error 里边 那么前面的日子对象是什么意思呢 前面的日子对象呢是

10:57.430 --> 10:57.950
就这个东西

10:58.710 --> 11:06.110
日子对象 看呗 就这个东西啊 就这些东西 那你不用不同的日子对象 他就带对应了不同的日子类别

11:06.370 --> 11:12.330
他就对应了不同的文件 记录到不同的文件里边去 那到时候你要用哪个 随便你 你按用哪个用哪个

11:13.690 --> 11:23.210
那么这里一点呢 就是一个 error 呢 他比较特殊 比方说啊 我用这个ctx local 然后点 error 去记录一个错误 那么这里的记录的错误之后呢

11:23.770 --> 11:26.970
啊 当然他会自动记录错误啊 如果说包了错 他会自动记录错误

11:27.770 --> 11:31.730
如果说我们自己手动记录了一个 error 记录了个错误之后呢

11:32.390 --> 11:33.670
他不仅会在这里边

11:34.510 --> 11:37.790
加入一条错误日子 同时还会在 error 里边加出一条

11:38.510 --> 11:42.630
没意思吧 就这里边他拦破了所有的错误 做了这么一回事

11:44.590 --> 11:50.110
那么包括这个东西也是个日子对象啊 就看你用哪个日子对象 哪个日子对象就对应了哪个类别

11:50.590 --> 11:55.150
他又记录到不同的位置 哪个日子级别呢 他又对应了

11:56.870 --> 12:01.070
不同的级别啊 在日子里面他会做一个区分啊 他这个道理是一个什么级别的

12:01.790 --> 12:07.310
那么这里呢 就是有一个 error 呢 也要知道一点 就是你记录 error 的时候呢 你不要给他什么一个制服串

12:07.590 --> 12:10.950
你尽量的是给一个 error 对象 因为你给一个制服串的话

12:11.830 --> 12:15.510
他的制服串里边是无法得到堆战信息的 啥意思呢 就是说

12:16.030 --> 12:20.830
你这个记录的一个制服串 因为制服串不是一个 error 对象吧 error 对象里边是不是堆战信息

12:20.950 --> 12:25.790
对吧 他交往什么方法 什么方法 又交往了什么方法 才导致了这个错误 他会把这些信息记录下来

12:26.310 --> 12:29.510
那你给他一个制服串的话 都无法得到堆战信息啊 就说一下

12:30.290 --> 12:36.690
好 那么我们现在来试一下吧 来试一下啊 比方说我们在这个

12:37.850 --> 12:39.970
一般说还有这个玩意儿了 这个玩意儿我一会再说

12:41.250 --> 12:44.970
呃 比方说在我们conclusion里边

12:45.850 --> 12:50.210
访问首页的时候 我们记录一个日子啊 比方说我们在这里呢 记录一个

12:51.850 --> 12:54.850
记录一个 怎么来记录呢 我们可以用 this

12:55.670 --> 13:00.670
context 对吧 点log 拿到一个日子对象 什么日子内行

13:01.470 --> 13:05.230
就是普通的应用内想 对吧 我们平时用的最多的日子就是这个日子

13:05.790 --> 13:09.950
好 然后我们在这里记录 我们记录一个什么级别呢 我们记录一个info 级别

13:11.030 --> 13:17.390
啊 比方说一个消息 呃 用户访问了首页 对吧 就记录这么一个点就行了

13:18.270 --> 13:20.270
把关键信息写进去 然后呢 我们再看一下

13:20.770 --> 13:25.770
接下来呢 我们访问这个地址 打开我们的浏览器

13:27.450 --> 13:31.850
好 访问首页 访问首页 你看这里是不是生成了两个日子 对吧

13:33.650 --> 13:39.170
第一个日子 第二个日子 控制台会输出同时的文件里边也会记录 看呗

13:40.290 --> 13:42.890
啊 那这东西到底是个啥呢 这个东西

13:43.970 --> 13:48.170
时间嘛 看到没 这是时间啊 服务系的时间 什么时间点 后边是毫无要求

13:48.870 --> 13:57.110
啊 日子级别是info 对吧 日子级别就起这么一个作用 在这里标注一下啊 是什么级别的日子啊 这是进程号 是哪个进程号在处理

13:57.590 --> 14:00.590
处理请求 然后后边呢 是什么呢 后边是那个

14:02.110 --> 14:06.590
是哪个请求地址 就是客户那边的ip地址是多少 是哪个ip地址来请求我们

14:07.390 --> 14:10.990
一共给他响应 从请求到响应 一共有多少个时间 129毫秒

14:11.790 --> 14:16.750
那么是什么可以请求 给他请求 请求的路径是跟路径 对吧 后边就是我们自定义的消息

14:17.730 --> 14:22.170
同康特克斯里边去记录日子的话 这些信息会自动记录进来 你都什么 你完全不用管他

14:23.090 --> 14:27.690
原来的意思吧 他就记录了 记录了 就这么简单啊 就这么简单 比方我再记录一个

14:28.570 --> 14:31.930
我啊 不要防卫手艺啊 不要

14:32.530 --> 14:33.530
防卫手艺

14:37.430 --> 14:40.390
比方说水源下记录一些 刷新 再刷新

14:41.350 --> 14:47.190
是不是记录了两次 对吧 无非就变化了是什么 变化了就是 因为我重新启动了 进程号可能会有变化

14:49.110 --> 14:53.710
然后呢 我们这里是无非就是变成锅了 对吧 其他都一样啊 现在都一样 就这么个意思

14:54.350 --> 14:56.990
明白吧 这就是关于这个日子记录啊

14:58.750 --> 15:05.190
好 那么我们接下来说一下这个配置啊 因为有的时候呢 举他部分情况下 我们其实就不用配置的 就直接按照这个来就行了

15:05.870 --> 15:12.230
嗯 就有的情况下呢 我们可能会有一些自定义的配置 简单说一下 你们只要配置的话 事情搞定

15:12.670 --> 15:16.390
配置的话就在配置文件里边 当然也可以根据环境不同的 进行不同的配置

15:16.690 --> 15:23.570
比方说目录 我之前说过了啊 这次目录在哪里可以配置一下 当然我这里最好给决定路径啊 我这里就是决定路径对吧

15:24.450 --> 15:26.810
然后呢 这里是那个 还有是

15:28.410 --> 15:34.690
不同的就是默认级别 对吧 默认内别里边还有不同的文件名 那么这些文件名如果说你看的不爽 你想改

15:35.410 --> 15:37.890
啊 你可以改一下 比方说按个按键

15:38.410 --> 15:42.770
那么这个时候呢 我们可以改一下 我看着这个过程文件要有不舒服啊 我就改一下吧

15:43.270 --> 15:47.670
啊 那我改成了什么呢 改成那个past result

15:50.440 --> 15:52.560
改成那个杜一

15:53.400 --> 15:54.040
啊 app

15:55.680 --> 16:04.170
那个啊 改一下哦 就改一下文件名吧 改一下文件名就行了 不用给全部全部的路径

16:05.010 --> 16:07.290
因为路径你前面应给了 是吧 文件下的名字已经给了

16:09.050 --> 16:15.650
这个喂 我感情这个样子 改了之后呢 我们看一下你是不是就生成了这个杜一这个东西没用了

16:16.350 --> 16:21.550
跟他一没什么关系了 变这个东西了 好 咱们再再双新两次一次两次

16:22.290 --> 16:27.450
啊 你看这里边 第二次啊 你看是不是记录下了 对吧 就这么回事啊

16:29.130 --> 16:33.210
好 然后呢 什么什么call log name 对吧 关于这个东西的文件名

16:34.050 --> 16:37.570
啊 agent log name 关于这个东西的文件名 error log name

16:38.330 --> 16:43.010
关于什么呢 关于这个东西的文件名 对不对啊 就这么个意思 好 那么下面呢是这样子

16:43.830 --> 16:47.870
配置级别 配置级别是什么意思呢 就是我什么情况下

16:49.390 --> 16:49.750
会把

16:51.310 --> 16:53.830
日字写入文件里面去 他不是一定的

16:54.350 --> 17:02.030
默正情况下呢 他是把info 级别和info 级别以上的日字可以写到文件里边 那就包含什么呢 包含info

17:02.390 --> 17:06.750
他会写到文件 包含我会写到文件 包含 error 会写到文件

17:07.550 --> 17:12.720
啊 比方后面再记录一个 error 观察一下啊 我们这里呢

17:13.380 --> 17:14.420
6 一个 error

17:17.380 --> 17:20.300
好 保存 保存过后来我们访问一下手艺

17:21.820 --> 17:26.300
好 那看我这里是不是包了个错 对吧 啊 这个 error 是什么 他会输出到控制台

17:26.740 --> 17:30.380
控制台里面会输出 error 同时呢 你看由于我们使用的是log

17:30.740 --> 17:36.980
因此他保存了哪儿的 保存了这个 egg 保存了这儿的 是吧 保存了个 error 这里说有对战信息 调用什么样的方法

17:37.340 --> 17:38.180
啊 就给你显示出来了

17:39.140 --> 17:43.780
好 然后呢 还有个什么呢 还有一个就是他会 以为他是一个 error 啊 因此呢

17:44.000 --> 17:51.280
他会跑到这儿的 对吧 康曼 error 里面也会记录 这几栋记录错误 这里面全是错误啊 就这么个意思啊

17:53.200 --> 17:57.920
嗯 那么这里呢 默认情况下的是info or error 他都会记录到日子文件

17:59.480 --> 18:05.120
如果说呢 你要全部都记录的话 那就配置 debug 因为 debug 呢 他默认不会记录到日子文件的

18:05.760 --> 18:08.480
默认不会记录到日子文件 debug 收为 debug 就行了

18:09.460 --> 18:16.020
啊 比方说啊 咱们试一下吧 没什么好事的啊 一看一看就明白了

18:16.940 --> 18:20.540
好 这里呢刷新 刷新过后呢 你看这里有没有输出

18:22.340 --> 18:25.740
有没有输出 就没有输出 空谈没有输出 那日子文件里面有记录吗

18:26.700 --> 18:33.580
有没有 debug 的记录 没有 对吧 debug 他是不会记录到日子的 默认情况下是这样子 那如果说你希望 debug 他这种

18:34.040 --> 18:40.080
这种调这种就是级别 但是这个级别有什么意义 没什么意义 对吧 他只是缠述一个描述一个日子他的类

18:40.280 --> 18:47.560
他的级别是什么 道理严不严重啊 就描述这么一个东西 那么如果说你希望要全记录的话 那就调成 debug

18:48.240 --> 18:52.320
那么如果说调成这个东西的话 日子文件里面所有东西啊 包括 debug 他都会记录

18:53.160 --> 18:56.800
那我们调一下吧 那么比方说在这个里边调一下这个label

18:57.540 --> 18:58.900
把调成 debug

19:00.900 --> 19:08.180
好 接下来我们访问一下首页 访问了之后呢 你看 这里是不会显示的 空谈没有显示 我们一会再说空谈 那么这里至少

19:09.860 --> 19:13.500
记住了一个 debug 不要访问首页 那么这这是什么呢

19:14.500 --> 19:25.180
哦 我给了他一个 debug 对吧 是 debug 但是一个 error 对象 他遇到了 error 对象 他就会打击他的对战信息 看上去像是个错误 对吧 实际上是一个 debug 我只不过给了一个 debug 一个 error 对象

19:26.860 --> 19:29.740
这样吧 好 保存 刷新

19:31.620 --> 19:33.140
这里再回来 说说再看一下

19:36.170 --> 19:41.650
debug 是不是记录进来了 就这么个意思啊 就配置这个记录日子的级别 那有空置台呢

19:42.490 --> 19:45.250
啊 如果说你不希望记录到 记录任何东西的话 就配置为那

19:46.010 --> 19:51.890
配置为那 就不会记录任何东西的 那么空置台呢 空置台是一个单独的配置啊 叫 console level level

19:52.190 --> 19:58.750
就空置台输出什么级别的日子 默认是音货 那空置台你要把所有东西全部输出的话 就用使用 debug

19:59.750 --> 20:01.190
就这么个意思啊 就这么个意思

20:02.830 --> 20:11.550
好 那么下面是日子文件的默认编码啊 编码的话 默认是邮帖钢吧 这个东西反正不用去改它吧 如果说你要改成别的编码的话 你通过这个来配置

20:12.190 --> 20:16.150
还有一个点呢 就是人 是不是把日子的格式输出为阶层

20:17.130 --> 20:20.290
啊 就这个关于这个点 我说一下 是不是要输出为阶层

20:20.690 --> 20:23.730
那么说你把我一说 这为出的话 就是阶层格式来输出 我们来看一下

20:24.370 --> 20:29.770
挺有意思的 好 然后呢 我们这里呢 再来把它配置一下啊

20:30.850 --> 20:32.050
叫做 out to 节省

20:33.250 --> 20:39.130
设为处 设为处了过后呢 我们这里 保存一下 重新启动了 然后呢 我们这里刷新一下

20:40.730 --> 20:42.090
好 然后我们看一下这里的日子

20:43.210 --> 20:45.610
你看这里 每个日子是不是有一个对应的阶层

20:46.330 --> 20:48.850
每个日子的一个对应的阶层 对吧

20:50.010 --> 20:54.770
这是阶层格式的 那么这个阶层格式有什么意义呢 当然还有这种原始格式啊

20:55.410 --> 21:01.770
阶层格式有什么意义呢 一般意义就在于有的时候呢 我可能要用一些工具或者是用一些自己写的程序

21:02.170 --> 21:05.450
要看一下日子 对吧 我把日子读出来在界面上展示出来

21:06.290 --> 21:12.050
给一个接口 通过请求一个地址 那么我们服务器呢 把日子文件读出来 展示到一面上

21:12.470 --> 21:19.550
那么这个时候用阶层格式是不是更加容易获取到这样的数据 更加容易分析 对吧 更加容易得到一个界对象 然后组装页面

21:20.550 --> 21:25.630
比这个格式要好分析一点 但是呢 一般来说一些工具啊 它就可以完成这种东西的一些事情

21:26.270 --> 21:27.470
总之就这么一个东西啊

21:28.590 --> 21:34.550
好了 这是日子配置啊 最后呢 我说一下最近一日子 这个东西就更加少见了啊 一般来说我们用它类制的这几个级别

21:35.030 --> 21:36.270
类别就完全够了

21:37.090 --> 21:43.650
但是呢 有的时候呢 我们可能会去新增一些分类啊 对自己新增一个分类 其实你看 大家看到这个东西

21:44.330 --> 21:48.290
schedule 这个玩意呢 它就是新增的分类啊 就是新增的分类

21:49.170 --> 21:55.770
那么这个新增的分类它怎么来的呢 就是制定日子啊 就新增一个分类 怎么配置到呢 custom logo

21:57.170 --> 21:58.170
这个名字固定了啊

21:58.950 --> 22:06.550
其实 logo 里面就可以进行其他配置 前面说了啊 一天忘记发到的配置 然后呢 就加个配置 custom logo 就制定一种日子啊日子那边

22:06.990 --> 22:11.030
那么后边呢 给一个属性名的就是日子那边的名称 比如说我给他取个名字 my logo

22:11.790 --> 22:17.830
然后后边就对这个my logo 进行配置有很多地方配置啊 比方说什么啊 这个日子的完整的路径

22:18.910 --> 22:20.870
日子文件在哪 完整的路径是什么

22:21.990 --> 22:26.390
他能够显示的一级别 对吧 这东西都是一样的 跟上面的配置是一样的 是一样的含义

22:26.650 --> 22:34.130
然后后面有两个含书 这两个含书呢 就是一个是用调用那个 app logo 去记录的时候 他是什么样的格式

22:34.690 --> 22:39.810
你可以把那个没他打印出来 打印出来什么都明白了啊 我这里使用的是时间啊 叫消息

22:40.530 --> 22:44.250
你也可以呢 设置那个context的时候了 他日子的格式

22:44.930 --> 22:52.970
那么这个时间打印出来看到了啊 那么这里时间啊context的请求方法 请求的 url 地址啊 这是我们日子里边制定一消息

22:53.470 --> 22:56.550
就格式化一下 把日子到底怎么记录 因为你是自定义嘛

22:57.110 --> 23:02.750
然后怎么用呢 用的话非常简单 就是app 调get local 那么这个时候呢 记录日子的时候 还会记录到

23:03.310 --> 23:06.950
还都是同一个文件啊 都同一个文件 记录他就格式就是这个格式

23:07.510 --> 23:14.910
啊 你使用context的get local啊 把那个logo名称传进去 得到日子对象 通过他点什么info啊 点什么debug啊这东西 对吧

23:15.390 --> 23:18.070
通过他去记录的日子呢 他就就使用这个格式

23:18.930 --> 23:24.250
没什么好说的 那就制定日子 我就想说一下这个schedule日子就是一个制定日子啊

23:24.250 --> 23:29.730
他的字字那边名为schedule logo啊 所以说你要对他的日子进行配置的话 怎么配置呢

23:31.250 --> 23:33.050
要对他的日子配置的话 比较说啊

23:34.530 --> 23:35.450
我们就是custom

23:38.810 --> 23:39.370
custom

23:41.290 --> 23:43.930
然后呢 这个名字叫做schedule logo

23:46.560 --> 23:47.160
schedule logo

23:47.880 --> 23:48.800
然后配置他的file

23:49.880 --> 23:50.240
pass

23:51.020 --> 23:51.500
result

23:52.780 --> 23:59.340
当前目录 下面的logs 下面的schedule吧 我们就不用一个了啊

23:59.700 --> 24:00.180
schedule

24:02.380 --> 24:03.260
好 我们就这样配置

24:04.500 --> 24:05.660
行了 我们来试一下吧

24:09.070 --> 24:11.750
啊 三重 重新启动一次

24:14.760 --> 24:16.680
跑了咖啡给我目录里边去了

24:18.900 --> 24:23.820
很便宜没说 好 你看啊

24:25.060 --> 24:28.020
schedule 哎 我这里没有声效是吧

24:28.680 --> 24:29.200
哎呀啊

24:30.400 --> 24:33.880
schedule日子 日子名字为schedule logo 没问题啊

24:35.560 --> 24:36.840
配置custom logo

24:38.040 --> 24:38.920
custom logo

24:40.720 --> 24:41.400
schedule logo

24:42.040 --> 24:46.320
配置file 没问题啊 来吧 查文档 查文档就搞定了

24:47.560 --> 24:47.800
a

24:53.570 --> 24:53.890
子弹

24:55.530 --> 24:58.730
然后找到这个定时任务

24:59.770 --> 25:00.370
执行日子

25:02.170 --> 25:03.450
custom logo

25:05.850 --> 25:08.490
他是配到这了 custom logo

25:08.930 --> 25:14.770
哦 不对不对不对 不对 那我这里写错了 我再写错了 我再确认一下 他这个我地方的文档配置这里

25:16.010 --> 25:17.530
没事 在那个日子

25:21.540 --> 25:21.860
日子

25:23.740 --> 25:24.460
制定日子

25:25.580 --> 25:27.500
哦 我这里看错了啊看错了

25:28.820 --> 25:31.900
他这样子啊 他不是在log里面配置的 他直接就是custom logo

25:32.820 --> 25:34.220
直接是custom logo

25:35.380 --> 25:45.520
这制定一配置啊 配置制定级别 好来吧 他是这样子

25:46.880 --> 25:52.880
那里是吧 他是这样子的啊 他这样子配置的 好 那么我们这里知道知道这一点过后了 我就可以在这里去设置

25:53.480 --> 25:55.680
好 那么这边呢 就是这边就是拿过来

25:56.560 --> 25:57.080
export

25:59.040 --> 25:59.800
custom logo

25:59.940 --> 26:11.250
他就对象拿过去 他不是在配置到这了 那么也就这里的log配置呢 就是跟配置的是什么呢 配置的是他非制定日子

26:12.210 --> 26:13.370
哪个喜欢写少了吗

26:15.740 --> 26:15.940
好了

26:16.900 --> 26:22.580
好 现在你看 schedule 是不是出来了 schedule 对吧 那么这两个地方就没用了啊 就这个地方就没用了

26:24.660 --> 26:30.660
这两个就没用了 他记录的就是任计划任务里边每一次执行的时候呢 他会记录一下这个日子

26:30.960 --> 26:38.720
好 这就是跟日子相关的东西啊 关于更多的日子功能那里可以参考这个就是这个地址

26:39.360 --> 26:44.000
这个地址啊 这里边就想起了几多各种日子的情况啊 文档写的还是蛮全的

26:45.400 --> 26:48.600
好了 这是关于日子啊 我们用的话 平时就用这个玩意就行了

