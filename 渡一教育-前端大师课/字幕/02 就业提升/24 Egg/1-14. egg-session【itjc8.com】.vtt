WEBVTT

00:00.000 --> 00:02.000
说一下这个session

00:02.000 --> 00:06.000
session呢 为什么要单独拿出来说一下呢

00:06.000 --> 00:08.000
它用法了其实没有什么简 没有什么复杂的

00:08.000 --> 00:11.000
就是context session 跟那个ka一样

00:11.000 --> 00:14.000
session 然后属性名人 属性值 跟复值

00:14.000 --> 00:16.000
读属性的时候呢 就是session属性

00:16.000 --> 00:18.000
没什么好说的

00:18.000 --> 00:20.000
为什么单独来说呢 因为它不太一样

00:20.000 --> 00:22.000
我们不一样

00:22.000 --> 00:26.000
ag在内部使用ag session的插件来完成session功能

00:26.000 --> 00:29.000
它可以配置的 也可以启用它 进用它

00:29.000 --> 00:34.000
而这个session插件 它内部呢 它又使用了ka session

00:34.000 --> 00:36.000
来完成session功能

00:36.000 --> 00:37.000
所以它是一层一层关系

00:37.000 --> 00:39.000
ag使用了session

00:39.000 --> 00:42.000
ag session使用了ka session

00:42.000 --> 00:44.000
它之所以不一样 就是因为ka session

00:44.000 --> 00:47.000
它处理的模式呢 有点区别

00:47.000 --> 00:51.000
我们在设置session的属性名的时候呢

00:51.000 --> 00:53.000
它是不能以下滑线开头的

00:53.000 --> 00:56.000
而且这个属性名呢 它是不能是16的

00:56.000 --> 00:58.000
至于session的原理我不再重复了

00:58.000 --> 01:00.000
这是我们之前讲漏的介绍讲的

01:00.000 --> 01:02.000
原理理是一定不能忘的

01:02.000 --> 01:04.000
你可以忘这API全部忘完 忘干净都没事

01:04.000 --> 01:06.000
原理一定不能忘

01:06.000 --> 01:08.000
为什么它不能以这个东西开头呢

01:08.000 --> 01:10.000
你开它的原码 看到原码就知道了

01:10.000 --> 01:16.080
原码里边呢 它有这么一个地方

01:16.080 --> 01:18.080
就这里 你看吧

01:18.080 --> 01:20.080
如果keyz是16

01:20.080 --> 01:23.080
或者是keyz的第一个制服是下滑线

01:23.080 --> 01:25.080
它直接就给你取消掉了

01:25.080 --> 01:28.080
它就不认为是 应该保存写的内容

01:28.080 --> 01:30.080
那么这一块至于它为什么呢

01:30.080 --> 01:32.080
因为它下滑线开头的东西呢

01:32.080 --> 01:34.080
是它内部的属性

01:34.080 --> 01:36.080
还有一个就是16呢

01:36.080 --> 01:38.080
它是有一个特殊的属性叫16

01:38.080 --> 01:42.080
所以说这里一块 你不要有这两个属性开头

01:42.080 --> 01:44.080
不要以这两个属性就行了

01:44.080 --> 01:46.080
使用了session 其他的没什么好说的

01:46.080 --> 01:49.080
那么这里我说 当时说它的原理

01:49.080 --> 01:51.080
给大家一些启示性作用

01:51.080 --> 01:55.080
因为目前世界上的保存到服务器

01:55.080 --> 01:57.080
保存到服务器 因为这正是保存到服务器的嘛

01:57.080 --> 01:59.080
就这种模式呢

01:59.080 --> 02:01.080
就越来越少见了

02:01.080 --> 02:02.080
越来越少了

02:02.080 --> 02:05.080
因为我们现在一般都会利用加密的技术

02:05.080 --> 02:06.080
保存到cookie里面

02:06.080 --> 02:07.080
或者是用什么

02:07.080 --> 02:10.080
用像jwt这种方式来保存到cookie里面

02:10.080 --> 02:12.080
本质上也是加密嘛

02:12.080 --> 02:16.080
因此呢 就是防篡改 而且加密

02:16.080 --> 02:18.080
加密过后了防篡改

02:18.080 --> 02:19.080
因此呢

02:19.080 --> 02:21.080
KVSE型的它的默认方式

02:21.080 --> 02:23.080
就不是以前的传统方式了

02:23.080 --> 02:24.080
它是怎么回事呢

02:24.080 --> 02:26.080
它是把session里面的数据保存到

02:26.080 --> 02:29.080
加密保存到客户端的cookie里面

02:29.080 --> 02:30.080
好 我们来回顾一下

02:30.080 --> 02:31.080
传统的session模式

02:31.080 --> 02:32.080
就这一部分呢

02:32.080 --> 02:36.080
我们回顾一下以前的这些原理

02:36.080 --> 02:38.080
以前是什么回事呢

02:38.080 --> 02:40.080
浏览器 请求服务器

02:40.080 --> 02:42.080
服务器设置session

02:42.080 --> 02:44.080
那么服务器设置session过后会做什么事呢

02:44.080 --> 02:45.080
它自动会完成

02:45.080 --> 02:47.080
生成一个session key

02:47.080 --> 02:49.080
就是session id 对吧

02:49.080 --> 02:50.080
也生成一个session id

02:50.080 --> 02:52.080
生成一个key 这里应该写个session id

02:52.080 --> 02:53.080
比较好一点

02:53.080 --> 02:56.080
生成session id

02:56.080 --> 02:58.080
就session id

02:58.080 --> 03:00.520
这样子呢

03:00.520 --> 03:02.520
说好一点

03:02.520 --> 03:04.520
生成一个session id

03:04.520 --> 03:06.520
然后呢 是不是把根据的

03:06.520 --> 03:08.520
用一个键子队保存到服务器上

03:08.520 --> 03:09.520
服务器有个session id

03:09.520 --> 03:10.520
对应什么呢

03:10.520 --> 03:11.520
对应一个session对象

03:11.520 --> 03:12.520
这个session对象里面

03:12.520 --> 03:13.520
不是有很多属性吧

03:13.520 --> 03:14.520
你自己随便设置

03:14.520 --> 03:17.520
ABCDE 有个叫ID随便设置

03:17.520 --> 03:18.520
它就无非就是个对象

03:18.520 --> 03:20.520
那么在服务器的内存里边

03:20.520 --> 03:21.520
或者是在什么别的地方

03:21.520 --> 03:22.520
默认是在内存

03:22.520 --> 03:24.520
然后有一个

03:24.520 --> 03:25.520
这个键子队

03:25.520 --> 03:27.520
一个键的就是session id

03:27.520 --> 03:28.520
值呢 就是一个对象

03:28.520 --> 03:30.520
session里面对象

03:30.520 --> 03:31.520
然后呢

03:31.520 --> 03:32.520
数据是保存在服务器上的

03:32.520 --> 03:33.520
然后把session id

03:33.520 --> 03:35.520
作为key 扔到浏览器

03:35.520 --> 03:36.520
浏览器下一次请求

03:36.520 --> 03:38.520
是不是会把session id带过来

03:38.520 --> 03:39.520
对不对

03:39.520 --> 03:40.520
那么服务器那边

03:40.520 --> 03:41.520
通过这个session id

03:41.520 --> 03:42.520
是不是可以拿到这个session

03:42.520 --> 03:43.520
session对象

03:43.520 --> 03:44.520
之前的完成session对象

03:44.520 --> 03:45.520
对吧

03:45.520 --> 03:46.520
不同的浏览器中端

03:46.520 --> 03:47.520
它生成的session id

03:47.520 --> 03:48.520
是不一样的

03:48.520 --> 03:49.520
这是个全局的

03:49.520 --> 03:50.520
全局唯一的

03:50.520 --> 03:51.520
所以说就可以获取到了

03:51.520 --> 03:52.520
这过去传统的方式

03:52.520 --> 03:54.520
这种方式不好出的地方

03:54.520 --> 03:55.520
在哪

03:55.520 --> 03:56.520
好的地方当然是特别

03:56.520 --> 03:57.520
特别安全的吧

03:57.520 --> 03:58.520
可能只有一个session id

03:58.520 --> 04:00.520
你要说它特别安全的

04:00.520 --> 04:01.520
也不能一定

04:01.520 --> 04:03.520
因为如果说这个session id

04:03.520 --> 04:04.520
泄漏了

04:04.520 --> 04:06.520
是不是还是有可能会导致

04:06.520 --> 04:08.520
数据被泄漏对不对

04:08.520 --> 04:09.520
所以还是有可能导致

04:09.520 --> 04:10.520
session id

04:10.520 --> 04:11.520
因为它对到服务器上的数据

04:11.520 --> 04:13.520
虽然说我们无法直观的看到

04:13.520 --> 04:14.520
服务器上的数据

04:14.520 --> 04:16.520
但是呢 如果说拿到这个session id

04:16.520 --> 04:17.520
是不是就间接的

04:17.520 --> 04:18.520
拿到了服务器的数据

04:18.520 --> 04:19.520
对不对

04:19.520 --> 04:20.520
有什么个情况

04:20.520 --> 04:21.520
绝对安全是办不到的

04:21.520 --> 04:23.520
这世界上没有绝对安全

04:24.520 --> 04:26.520
好 那么既然没有绝对安全的话

04:26.520 --> 04:27.520
我们属于是

04:27.520 --> 04:28.520
xsession的它的处理模式

04:28.520 --> 04:29.520
因为它内部使用了

04:29.520 --> 04:30.520
kossession

04:30.520 --> 04:32.520
它的处理模式变成这样子了

04:32.520 --> 04:33.520
它这样

04:33.520 --> 04:34.520
请求服务器

04:34.520 --> 04:36.520
服务器设置session

04:36.520 --> 04:38.520
然后呢 我就不再去生成什么session id了

04:38.520 --> 04:40.520
session id不再生成了

04:40.520 --> 04:41.520
我直接就把这个session对象

04:41.520 --> 04:43.520
不管你里边设置的

04:43.520 --> 04:44.520
无所谓

04:44.520 --> 04:45.520
以往的属性都无所谓

04:45.520 --> 04:46.520
我就把它蓄裂化

04:47.520 --> 04:48.520
蓄裂化

04:48.520 --> 04:49.520
然后过后加密

04:49.520 --> 04:50.520
就生成一个置无串

04:50.520 --> 04:52.520
这个置无串里边就是一个加密信息

04:52.520 --> 04:54.520
这个加密信息

04:54.520 --> 04:56.520
这个加密信息

04:56.520 --> 04:57.520
加密信息里边

04:57.520 --> 04:58.520
它就保存了

04:58.520 --> 04:59.520
这些个整个对象的里边的信息

04:59.520 --> 05:00.520
但是用户看不到

05:00.520 --> 05:02.520
它们也解不了密

05:02.520 --> 05:03.520
那么然后呢

05:03.520 --> 05:05.520
把这个加密信息

05:05.520 --> 05:06.520
扔到cookie里边

05:06.520 --> 05:07.520
划出那里面的案件

05:07.520 --> 05:08.520
也就是它是

05:08.520 --> 05:09.520
服务器本身

05:09.520 --> 05:10.520
不存处session里面的数据了

05:10.520 --> 05:12.520
不存处session里面的数据

05:12.520 --> 05:13.520
所以它叫session

05:13.520 --> 05:14.520
那它实际上

05:14.520 --> 05:15.520
它已经

05:15.520 --> 05:16.520
跟我们的传承的session

05:16.520 --> 05:17.520
没有什么关系的

05:17.520 --> 05:18.520
服务器不存处session的数据

05:18.520 --> 05:19.520
过后呢

05:19.520 --> 05:21.520
整个置无串扔到榴弹器

05:21.520 --> 05:22.520
然后榴弹器这边

05:22.520 --> 05:23.520
下一件事情就是

05:23.520 --> 05:24.520
附带个cookie

05:24.520 --> 05:25.520
服务器直接解密

05:25.520 --> 05:26.520
然后反蓄的话

05:26.520 --> 05:27.520
得到这个对象

05:27.520 --> 05:28.520
把对象安到session里面去

05:28.520 --> 05:29.520
那么我就可以

05:29.520 --> 05:31.520
获取到这个session了

05:31.520 --> 05:32.520
它是这种模式

05:32.520 --> 05:33.520
那么这个模式

05:33.520 --> 05:34.520
好处显而易见

05:34.520 --> 05:35.520
怎么呢

05:35.520 --> 05:37.520
服务器是不是可以

05:37.520 --> 05:38.520
可以做什么呢

05:38.520 --> 05:40.520
可以就是保存这个

05:40.520 --> 05:41.520
就是服务器的压力

05:41.520 --> 05:42.520
就会小很多

05:42.520 --> 05:43.520
没有保存session

05:43.520 --> 05:44.520
但是呢

05:44.520 --> 05:45.520
它不好的地方在什么呢

05:45.520 --> 05:46.520
不好的地方

05:46.520 --> 05:47.520
在于服务器里边

05:47.520 --> 05:48.520
你要在session里面存一个

05:48.520 --> 05:49.520
函数里不好存的

05:49.520 --> 05:50.520
对吧

05:50.520 --> 05:51.520
它没发蓄力的话

05:51.520 --> 05:52.520
而且呢

05:52.520 --> 05:53.520
服务器它的蓄力的话

05:53.520 --> 05:55.520
就是存的内容是不是有限的

05:55.520 --> 05:56.520
对吧

05:56.520 --> 05:57.520
因为它蓄力化的cookie

05:57.520 --> 05:59.520
cookie的装的东西是有限的

05:59.520 --> 06:00.520
对不对

06:00.520 --> 06:01.520
榴弹器里边一般来说

06:01.520 --> 06:03.520
就十几个kb

06:03.520 --> 06:04.520
就装不下了

06:04.520 --> 06:06.520
所以说呢

06:06.520 --> 06:08.520
内容是有限的

06:08.520 --> 06:09.520
这种模式

06:09.520 --> 06:10.520
它各有各有的优缺点

06:10.520 --> 06:11.520
默认的

06:11.520 --> 06:12.520
它选择的是这种模式

06:12.520 --> 06:14.520
这它的原理我说清楚

06:14.520 --> 06:15.520
然后接下来是配置

06:15.520 --> 06:16.520
配置

06:16.520 --> 06:18.520
这里边的话很简单

06:18.520 --> 06:20.520
keyz表示

06:20.520 --> 06:22.520
keyz表示cookie的key

06:22.520 --> 06:24.520
你无论如何都会发这个cookie吗

06:24.520 --> 06:26.520
无关是用哪种模式

06:26.520 --> 06:27.520
摸的是这种模式

06:27.520 --> 06:28.520
那么这种模式

06:28.520 --> 06:29.520
它会发一个cookie

06:29.520 --> 06:30.520
cookie的keyz是什么

06:30.520 --> 06:32.520
它摸的是ag session

06:32.520 --> 06:33.520
那么你可以改

06:33.520 --> 06:34.520
随便改

06:34.520 --> 06:35.520
max age

06:35.520 --> 06:37.520
cookie的过去时间

06:37.520 --> 06:38.520
好妙数

06:38.520 --> 06:39.520
24小时

06:39.520 --> 06:40.520
1小时3600秒

06:40.520 --> 06:41.520
1000乘以1000

06:41.520 --> 06:43.520
那就是cookie的过去时间

06:43.520 --> 06:44.520
默认值

06:45.520 --> 06:46.520
atb only

06:46.520 --> 06:47.520
默认值处

06:47.520 --> 06:49.520
表示这个cookie是不是仅允许

06:49.520 --> 06:50.520
atb传说不允许

06:50.520 --> 06:51.520
cookie介绍过去

06:51.520 --> 06:52.520
为了安全这是一定的

06:52.520 --> 06:53.520
session的

06:53.520 --> 06:54.520
像session的东西尽量的

06:54.520 --> 06:56.520
不要让客户让过去到

06:56.520 --> 06:58.520
increase 是不是要加密

06:58.520 --> 06:59.520
咱们说密要呢

06:59.520 --> 07:01.520
密要在这

07:01.520 --> 07:03.520
密要在这

07:03.520 --> 07:06.960
这是它的密要

07:06.960 --> 07:07.960
这里有顺便说一下

07:07.960 --> 07:09.960
这个密要是可以写多个的

07:09.960 --> 07:10.960
是可以写多个的

07:10.960 --> 07:12.960
因为我之前学过ka

07:12.960 --> 07:13.960
它里面是可以一个

07:13.960 --> 07:14.960
运行加密法

07:14.960 --> 07:16.960
对是可以写多个的

07:16.960 --> 07:18.960
这是关于密要

07:18.960 --> 07:19.960
redu

07:19.960 --> 07:21.960
就是这个东西有说一下

07:21.960 --> 07:22.960
more than force

07:22.960 --> 07:24.960
如果说你把它设为true的话

07:24.960 --> 07:26.960
那么还会有这么一个神奇的现象

07:26.960 --> 07:28.960
就是比方说

07:28.960 --> 07:30.960
cookie到一天过期

07:30.960 --> 07:31.960
我马上就要过期了

07:31.960 --> 07:32.960
已经快马上满一天了

07:32.960 --> 07:33.960
快要过期了

07:33.960 --> 07:34.960
那么这个时候呢

07:34.960 --> 07:35.960
我只要去访问一下

07:35.960 --> 07:36.960
我们的服务器

07:36.960 --> 07:38.960
它马上就会刷新这个时间

07:38.960 --> 07:39.960
又等一周

07:39.960 --> 07:40.960
就这么个意思

07:40.960 --> 07:41.960
它延长这个时间

07:41.960 --> 07:42.960
redu

07:42.960 --> 07:44.960
把它给你给它

07:44.960 --> 07:46.960
设置一个新的过期时间

07:46.960 --> 07:47.960
more than force

07:47.960 --> 07:48.960
more than force的话

07:48.960 --> 07:49.960
拿我不管

07:49.960 --> 07:51.960
虽然说马上要过期了

07:51.960 --> 07:52.960
我访问了网站

07:52.960 --> 07:53.960
几分钟过后

07:53.960 --> 07:54.960
我可能还是要过期

07:54.960 --> 07:55.960
如果说你用redu的话

07:55.960 --> 07:56.960
马上要到一天了

07:56.960 --> 07:57.960
我访问一下

07:57.960 --> 07:58.960
下一次呢

07:58.960 --> 07:59.960
又延长一天

07:59.960 --> 08:00.960
就这么个意思

08:00.960 --> 08:02.960
redu它more than force

08:02.960 --> 08:04.960
那么我们说一下这个setion

08:04.960 --> 08:05.960
setion怎么来用

08:05.960 --> 08:06.960
用法的话就很简单

08:06.960 --> 08:08.960
你可以把任何需要的信息

08:08.960 --> 08:09.960
存到setion里面去

08:09.960 --> 08:10.960
反正是加密的

08:10.960 --> 08:11.960
但是你不要存大量的信息

08:11.960 --> 08:13.960
因为它最终是放到口气里面了

08:13.960 --> 08:15.960
比如说我们之前的用户信息

08:15.960 --> 08:17.960
我们之前登录的时候

08:19.960 --> 08:20.960
看一下

08:20.960 --> 08:22.960
现在哪里玩出来的

08:22.960 --> 08:23.960
登录

08:23.960 --> 08:24.960
登录

08:24.960 --> 08:25.960
这个头衡

08:25.960 --> 08:27.960
这个头衡我都可以不用了

08:27.960 --> 08:28.960
我们来看一下吧

08:28.960 --> 08:29.960
登录

08:29.960 --> 08:31.960
登录成功过后

08:31.960 --> 08:32.960
登录成功过后

08:32.960 --> 08:33.960
我不用去设置口气了

08:33.960 --> 08:35.960
我直接把它放到setion里面

08:35.960 --> 08:37.960
你不是给我反回那个用户对象吗

08:37.960 --> 08:38.960
对不对

08:38.960 --> 08:39.960
所以反回那个用户对象

08:39.960 --> 08:40.960
我直接放到setion里面

08:41.960 --> 08:43.960
这个是setion

08:45.960 --> 08:46.960
setion

08:46.960 --> 08:48.960
直接写

08:48.960 --> 08:50.960
然后这里边写上user ID

08:52.960 --> 08:54.960
或者直接把整个对象传进去

08:54.960 --> 08:56.960
就整个user放进去

08:56.960 --> 08:58.960
放进去就完事了

08:58.960 --> 09:00.960
然后保存到哪呢

09:00.960 --> 09:01.960
保存到这个就是

09:02.960 --> 09:03.960
这里边

09:03.960 --> 09:04.960
results里面

09:04.960 --> 09:05.960
应该是有个user的

09:05.960 --> 09:06.960
刚才之前

09:06.960 --> 09:07.960
user

09:07.960 --> 09:08.960
OK

09:08.960 --> 09:09.960
就把results

09:09.960 --> 09:11.960
user直接保存到这里面

09:11.960 --> 09:14.960
当然我也可以建议你只保存一个user ID

09:14.960 --> 09:15.960
也可以

09:15.960 --> 09:16.960
对不对

09:16.960 --> 09:17.960
直接保存到这里面

09:19.960 --> 09:20.960
好

09:20.960 --> 09:22.960
然后我们重新想到手页

09:22.960 --> 09:23.960
然后呢

09:23.960 --> 09:25.960
现在还有不是之前还写过一个medalware吗

09:25.960 --> 09:26.960
对吧

09:26.960 --> 09:27.960
verify

09:27.960 --> 09:28.960
token

09:28.960 --> 09:29.960
就是验证token

09:29.960 --> 09:30.960
那么这个时候

09:30.960 --> 09:31.960
我们不用存户

09:31.960 --> 09:32.960
出口里面获取了

09:32.960 --> 09:33.960
直接判断

09:33.960 --> 09:34.960
如果说

09:34.960 --> 09:35.960
contact

09:35.960 --> 09:36.960
setion

09:36.960 --> 09:37.960
里面有什么user存在

09:37.960 --> 09:38.960
如果说存在的话

09:38.960 --> 09:39.960
那一定是登录成功了的

09:39.960 --> 09:40.960
对不对

09:40.960 --> 09:41.960
登录成功了过后

09:41.960 --> 09:42.960
我干嘛呢

09:42.960 --> 09:43.960
我就把保存到这

09:44.960 --> 09:45.960
为了方便获取

09:45.960 --> 09:46.960
其实这个东西都不用了

09:46.960 --> 09:47.960
别人就直接可以

09:47.960 --> 09:48.960
从那个locals里面获取就行了

09:48.960 --> 09:50.960
直接从setion里面获取就行了

09:50.960 --> 09:51.960
setion

09:51.960 --> 09:52.960
保存到这里面

09:52.960 --> 09:53.960
locals

09:53.960 --> 09:54.960
好

09:54.960 --> 09:57.270
然后呢

09:57.270 --> 09:58.270
dx

09:58.270 --> 09:59.270
那么 else

09:59.270 --> 10:00.270
l is

10:00.270 --> 10:01.270
就是没有登录

10:01.270 --> 10:02.270
没有登录的话

10:02.270 --> 10:03.270
就重新想

10:03.270 --> 10:04.270
对吧

10:04.270 --> 10:06.270
这都不要了

10:06.270 --> 10:08.270
你看变成这种模式了

10:08.270 --> 10:09.270
直接从setion里面拿

10:09.270 --> 10:10.270
就完事了

10:10.270 --> 10:11.270
但是你要知道

10:11.270 --> 10:12.270
这个user实际上

10:12.270 --> 10:13.270
如果说这里面信息

10:13.270 --> 10:14.270
特别特别多

10:14.270 --> 10:15.270
那就不适合了

10:15.270 --> 10:16.270
你比如说你存一个

10:16.270 --> 10:17.270
token也好

10:17.270 --> 10:18.270
存一个user id也好

10:18.270 --> 10:19.270
都可以

10:19.270 --> 10:20.270
根据巨头的情况

10:20.270 --> 10:21.270
因为这个东西

10:21.270 --> 10:22.270
你要知道保存到

10:22.270 --> 10:23.270
cookie里面去了

10:23.270 --> 10:24.270
整个信息

10:24.270 --> 10:25.270
全部保存到

10:25.270 --> 10:26.270
cookie的

10:26.270 --> 10:27.270
好了

10:27.270 --> 10:28.270
那么现在我们来运行一下

10:28.270 --> 10:31.860
np wrong there

10:31.860 --> 10:32.860
现在我们放微信

10:32.860 --> 10:33.860
好

10:33.860 --> 10:34.860
那么现在我们没有

10:34.860 --> 10:35.860
setion

10:35.860 --> 10:36.860
肯定要登录

10:36.860 --> 10:37.860
看一下吧

10:37.860 --> 10:38.860
我们这里

10:38.860 --> 10:39.860
setion

10:39.860 --> 10:40.860
这是以前的token

10:40.860 --> 10:41.860
对吧

10:41.860 --> 10:42.860
然后我们这里

10:42.860 --> 10:43.860
123

10:43.860 --> 10:44.860
123登

10:44.860 --> 10:45.860
登录成功了

10:45.860 --> 10:46.860
你看可以进去了

10:46.860 --> 10:47.860
对吧

10:47.860 --> 10:48.860
为什么可以进去了

10:48.860 --> 10:49.860
多了一个cookie

10:49.860 --> 10:50.860
一个setion

10:50.860 --> 10:52.860
你看这里面信息

10:52.860 --> 10:53.860
对吧

10:53.860 --> 10:54.860
那么你信息越多

10:54.860 --> 10:55.860
这里是不是

10:55.860 --> 10:57.860
加密的支付串率越长

10:57.860 --> 10:58.860
好

10:58.860 --> 10:59.860
那么这就是

10:59.860 --> 11:00.860
setion的用法

11:00.860 --> 11:01.860
保存cookie里面

11:01.860 --> 11:02.860
那有些人说

11:02.860 --> 11:03.860
那如果说

11:03.860 --> 11:04.860
我想用传统的方式呢

11:04.860 --> 11:05.860
官方他是不建议你

11:05.860 --> 11:07.860
根据阿里巴巴的时间

11:07.860 --> 11:08.860
他不建议你

11:08.860 --> 11:09.860
他就建议你保存在

11:09.860 --> 11:10.860
cookie里面

11:10.860 --> 11:11.860
因此呢

11:11.860 --> 11:12.860
还有边说了一个

11:12.860 --> 11:14.860
加出语句告诉你

11:14.860 --> 11:15.860
如果说你也要

11:15.860 --> 11:16.860
把这个setion

11:16.860 --> 11:17.860
放到外部存处

11:17.860 --> 11:18.860
什么叫外部存处

11:18.860 --> 11:19.860
比方存到服务器的

11:19.860 --> 11:21.860
存到服务器的内存里边

11:21.860 --> 11:22.860
或者是存到

11:22.860 --> 11:24.860
那个redis里边

11:24.860 --> 11:25.860
存到mysoc里边

11:25.860 --> 11:26.860
就放到外部存处里边

11:26.860 --> 11:27.860
就是用传统的模式

11:27.860 --> 11:28.860
那么用传统的模式

11:28.860 --> 11:30.860
它会自动生成setion id

11:30.860 --> 11:31.860
它会自动生成setion id

11:31.860 --> 11:34.860
如果是用传统的模式的话

11:34.860 --> 11:35.860
那么就意味着

11:35.860 --> 11:36.860
这个系统将强依难以

11:36.860 --> 11:37.860
这个外部存从

11:37.860 --> 11:39.860
一旦这个外部存处挂了

11:39.860 --> 11:40.860
那么就完全无法使用

11:40.860 --> 11:41.860
setion的相关功能了

11:41.860 --> 11:43.860
所以说它更加推荐大家

11:43.860 --> 11:44.860
使用必要的信息

11:44.860 --> 11:46.860
存到setion中

11:46.860 --> 11:48.860
只存少量的信息

11:48.860 --> 11:49.860
到setion里边

11:49.860 --> 11:51.860
保持setion的经济

11:51.860 --> 11:52.860
而且使用默认的

11:52.860 --> 11:54.860
cookie的方式来存处

11:54.860 --> 11:56.860
没什么意思吧

11:56.860 --> 11:58.860
那么就告诉你

11:58.860 --> 11:59.860
用户级别的缓存

11:59.860 --> 12:01.860
就不要存到setion里边

12:01.860 --> 12:04.860
总之就是我们

12:04.860 --> 12:06.860
外部存处那里可以做

12:06.860 --> 12:08.860
一个做法是在app.js里边

12:08.860 --> 12:09.860
就启动过后

12:09.860 --> 12:11.860
你往app里边设置一个属性

12:11.860 --> 12:12.860
它如果只要发现

12:12.860 --> 12:13.860
你设置了这个属性

12:13.860 --> 12:15.860
它就会应用外部存处

12:15.860 --> 12:16.860
这个属性怎么设置呢

12:16.860 --> 12:17.860
复制一下吧

12:17.860 --> 12:18.860
拿过来

12:18.860 --> 12:20.860
找到这个app.js

12:20.860 --> 12:21.860
比方说

12:21.860 --> 12:23.860
我们这里

12:23.860 --> 12:24.860
直接设置一下

12:24.860 --> 12:25.860
它就是个对象

12:25.860 --> 12:26.860
对象里边get key

12:26.860 --> 12:28.860
当读去setion值的时候

12:28.860 --> 12:29.860
它会运行这个

12:29.860 --> 12:30.860
我们输出一下

12:30.860 --> 12:31.860
get cc

12:31.860 --> 12:34.860
把key置放过来

12:34.860 --> 12:36.860
这里我们把key放到哪呢

12:36.860 --> 12:38.860
就放到这吧

12:38.860 --> 12:40.860
就放到这吧

12:40.860 --> 12:42.860
用个对象

12:42.860 --> 12:43.860
temp

12:43.860 --> 12:45.860
这个写法太粗糙了

12:45.860 --> 12:47.860
就随便写个吧

12:47.860 --> 12:48.860
temp

12:48.860 --> 12:49.860
return

12:49.860 --> 12:50.860
temp

12:50.860 --> 12:51.860
key

12:51.860 --> 12:55.860
然后setion的时候

12:55.860 --> 12:57.860
setion的时候

12:57.860 --> 13:00.860
我就把键字堆放进去

13:00.860 --> 13:02.860
temp

13:02.860 --> 13:03.860
key

13:04.860 --> 13:05.860
evalu

13:05.860 --> 13:06.860
max age

13:06.860 --> 13:07.860
我就不要了

13:07.860 --> 13:10.860
输出setion

13:10.860 --> 13:12.860
key

13:12.860 --> 13:13.860
evalu

13:13.860 --> 13:14.860
max age

13:14.860 --> 13:15.860
看一下它的运行就行了

13:15.860 --> 13:16.860
dstory

13:16.860 --> 13:17.860
dstory

13:17.860 --> 13:18.860
我就不写了

13:18.860 --> 13:19.860
就这样了

13:19.860 --> 13:21.860
那么我现在就设置到外部存处

13:21.860 --> 13:23.860
用了外部存处的方案

13:23.860 --> 13:24.860
那么现在那么刷新

13:24.860 --> 13:25.860
所以又变得能路了

13:25.860 --> 13:26.860
来看一下我们这里输出

13:26.860 --> 13:28.860
get cc

13:28.860 --> 13:29.860
get cc

13:29.860 --> 13:31.860
那么这里是要读去setion

13:31.860 --> 13:32.860
读去setion的时候

13:32.860 --> 13:34.860
我们这里的

13:34.860 --> 13:36.860
这啥

13:36.860 --> 13:38.860
get cc

13:38.860 --> 13:39.860
key

13:39.860 --> 13:40.860
这个key

13:40.860 --> 13:42.860
它给生成的key是这个

13:42.860 --> 13:44.860
生成的key是这个

13:44.860 --> 13:45.860
然后呢

13:45.860 --> 13:47.860
设置setion的时候

13:47.860 --> 13:49.860
设置setion的时候

13:49.860 --> 13:50.860
看一下

13:50.860 --> 13:51.860
setion

13:51.860 --> 13:53.860
我们现在还没有登录对吧

13:53.860 --> 13:54.860
登录一下

13:54.860 --> 13:56.860
123

13:56.860 --> 13:57.860
运行

13:57.860 --> 13:59.860
设置setion的时候

13:59.860 --> 14:00.860
setion

14:00.860 --> 14:02.860
那么这是它的key值

14:02.860 --> 14:04.860
key值给你加密过的

14:04.860 --> 14:05.860
然后呢这里呢

14:05.860 --> 14:07.860
都是得到它的

14:07.860 --> 14:08.860
整个对象

14:08.860 --> 14:09.860
对象

14:09.860 --> 14:10.860
然后这里

14:10.860 --> 14:12.860
get cc 它又把个加密过后的key值

14:12.860 --> 14:13.860
给给给的

14:13.860 --> 14:14.860
就这么个意思

14:14.860 --> 14:15.860
然后这样现在的客户端

14:15.860 --> 14:16.860
存在是什么呢

14:16.860 --> 14:17.860
客户端现在存在

14:17.860 --> 14:18.860
get cc

14:18.860 --> 14:19.860
我们把它删掉

14:19.860 --> 14:20.860
删掉

14:20.860 --> 14:21.860
重新刷新

14:21.860 --> 14:23.860
123

14:23.860 --> 14:24.860
好我们看一下

14:24.860 --> 14:25.860
现在客户端有没有存这个setion

14:25.860 --> 14:26.860
有

14:26.860 --> 14:27.860
它存的就是什么呢

14:27.860 --> 14:28.860
setion id

14:28.860 --> 14:30.860
固定的长度的之后存这个setion id

14:30.860 --> 14:31.860
就这么个意思

14:31.860 --> 14:33.860
就传到了模式了

14:33.860 --> 14:35.860
不建议大家使用这种模式

14:35.860 --> 14:37.860
这是个阿里根据自己的实现

14:37.860 --> 14:39.860
认为不建议使用这种模式

14:39.860 --> 14:41.860
如果说你要用外部存存的话

14:41.860 --> 14:42.860
你还可以安装一个插件叫

14:42.860 --> 14:43.860
agsetion release

14:43.860 --> 14:44.860
既然不建议使用这种模式

14:44.860 --> 14:45.860
我简单说一下就行了

14:45.860 --> 14:47.860
安装好这个插件直接安装

14:47.860 --> 14:48.860
安装好插件过后

14:48.860 --> 14:49.860
这里面懂的对吧

14:49.860 --> 14:50.860
是不是之前

14:50.860 --> 14:51.860
我想Retix的时候

14:51.860 --> 14:52.860
要用过这个玩意

14:52.860 --> 14:54.860
叫koasetion release

14:54.860 --> 14:55.860
它安装后的启用它就行了

14:55.860 --> 14:56.860
它是个插件

14:57.860 --> 14:59.860
在这你直接找了个插件

14:59.860 --> 15:00.860
把启用就完成了

15:00.860 --> 15:03.860
因为它内部一带于Retix

15:03.860 --> 15:04.860
Retix你安装好了

15:04.860 --> 15:05.860
就完成了

15:05.860 --> 15:06.860
ag release安装好了

15:06.860 --> 15:07.860
也配置好了

15:07.860 --> 15:09.860
我们之前ag release是配置好了的

15:10.860 --> 15:12.860
内部的就是使用ag release

15:12.860 --> 15:13.860
就完成了

15:13.860 --> 15:14.860
这就是关于setion

15:14.860 --> 15:15.860
我们一般情况下

15:15.860 --> 15:16.860
就什么都不用去管它

15:16.860 --> 15:17.860
如果说你要配置的话

15:17.860 --> 15:20.860
你就配置一下这些东西

15:21.860 --> 15:22.860
其他就不用管了

15:22.860 --> 15:24.860
那这里有一个小的细节

15:25.860 --> 15:27.860
那我们的setion

15:27.860 --> 15:28.860
它这里是全聚配置

15:28.860 --> 15:29.860
影响所有的setion

15:29.860 --> 15:32.860
那么我们可能在对某一次的setion

15:32.860 --> 15:33.860
放到cooking里边

15:33.860 --> 15:34.860
那么这个cooking

15:34.860 --> 15:36.860
它可能过些时间

15:36.860 --> 15:37.860
要动态的变化

15:37.860 --> 15:39.860
就是有可能会发生变化

15:39.860 --> 15:41.860
那么你可以直接设置到max edge

15:41.860 --> 15:42.860
比方说我们在这里

15:42.860 --> 15:44.860
我们max edge本来是一周

15:44.860 --> 15:45.860
本来是一周

15:45.860 --> 15:46.860
那么这里

15:46.860 --> 15:47.860
有可能会出现这种情况

15:47.860 --> 15:50.860
界面上有可能有这么一种情况

15:50.860 --> 15:53.860
就是它用户有没有勾选

15:54.860 --> 15:56.860
记住我7天

15:56.860 --> 15:57.860
如果说记住我7天

15:57.860 --> 15:58.860
我就设置7天时间过期

15:58.860 --> 16:00.860
那么我这里可以判断一下

16:00.860 --> 16:01.860
比方说

16:01.860 --> 16:03.860
当然这里有一个伟代

16:03.860 --> 16:06.860
如果说用户选择了

16:06.860 --> 16:11.860
记住7天保持登录

16:11.860 --> 16:13.860
那么我这里就可以动态的设置

16:13.860 --> 16:14.860
它有可能是1天

16:14.860 --> 16:15.860
有可能是7天

16:15.860 --> 16:17.860
那么就是max edge

16:17.860 --> 16:19.860
它一个特殊属性max edge

16:19.860 --> 16:24.860
关于7×1 24×1 3600×1 1000

16:24.860 --> 16:26.860
就这样子

16:26.860 --> 16:29.860
好了这是关于C型的用法

16:29.860 --> 16:31.860
那么这个C型的技术

16:31.860 --> 16:33.860
它不会影响服务器的效率

16:33.860 --> 16:35.860
因为它根本就没有存在服务器

16:35.860 --> 16:37.860
它直接最终蓄力化到头腐端去了

16:37.860 --> 16:39.860
所以说你不要存太多那种

16:39.860 --> 16:41.860
因此你之前用C型的方案

16:41.860 --> 16:43.860
本质上是一样的

16:43.860 --> 16:44.860
好这句说这个

16:44.860 --> 16:46.860
其他的没啥了

