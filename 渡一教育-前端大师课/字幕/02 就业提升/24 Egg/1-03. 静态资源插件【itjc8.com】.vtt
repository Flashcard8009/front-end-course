WEBVTT

00:00.180 --> 00:03.120
上节课咱们就看到这个控制器

00:03.120 --> 00:05.760
这节课我们再说一下静态支援

00:05.760 --> 00:08.500
就像你学的KOA学Express

00:08.500 --> 00:10.020
它里边是不是一个public目录

00:10.020 --> 00:12.100
对吧 这个目录还可以给别的名字

00:12.100 --> 00:17.060
你只需要使用一个中间键就可以指定静态支援目录了

00:17.060 --> 00:20.100
那么在XGS里边你都不用任何配置

00:20.100 --> 00:21.780
你直接在这个地方

00:22.780 --> 00:25.700
app 我念夹里边 夹一个目录叫public

00:25.700 --> 00:28.180
这个目录下面的东西就全是静态支援

00:28.180 --> 00:31.180
比方说咱们这里加一个index

00:31.180 --> 00:33.180
加了这么一个东西

00:33.180 --> 00:36.180
我们这里起个hello egg

00:36.180 --> 00:40.180
然后我这里再加一个CSS文件

00:40.180 --> 00:44.180
CSS body

00:44.180 --> 00:49.180
白色

00:49.180 --> 00:51.180
行了

00:51.180 --> 00:53.180
然后我们现在去运行一下

00:53.180 --> 00:54.180
运行出来过后

00:54.180 --> 00:57.180
这个目录就已经是静态支援目录了

00:57.180 --> 00:59.180
其实不需要任何的配置

00:59.180 --> 01:02.180
比方说咱们npm装

01:02.180 --> 01:04.180
对了

01:04.180 --> 01:06.180
运行出来了

01:06.180 --> 01:08.180
过后我们进入这个页面去看一下

01:08.180 --> 01:10.180
就这个地址

01:10.180 --> 01:13.180
它这里告诉你4040 not found

01:13.180 --> 01:16.180
跟我们之前的中间键是不是有点不一样

01:16.180 --> 01:18.180
那我们该怎么去访问静态支援呢

01:18.180 --> 01:21.180
在XGS里面默认情况下

01:21.180 --> 01:22.180
你要用这种方式去访问

01:22.180 --> 01:24.180
public

01:24.180 --> 01:27.180
通过这么一个前置路径

01:27.180 --> 01:28.180
前罪

01:28.180 --> 01:30.180
然后后边才去访问静态支援

01:30.180 --> 01:32.180
比方说index一天秒

01:32.180 --> 01:34.180
就访问到了hello egg

01:34.180 --> 01:36.180
包括CSS

01:36.180 --> 01:37.180
是不是也能访问

01:37.180 --> 01:39.180
它得用这种方式大家注意一下

01:39.180 --> 01:41.180
这是它默认的情况

01:41.180 --> 01:43.180
就是静态支援就没了

01:43.180 --> 01:44.180
这是它默认的情况

01:44.180 --> 01:47.180
那么我们主要是要通过静态支援的学习

01:47.180 --> 01:50.180
主要是要理解那个ag的插件

01:50.180 --> 01:52.180
静态支援我们是通过

01:52.180 --> 01:55.180
请求路径里面的public这个前罪

01:55.180 --> 01:56.180
然后后边这个位置的东西

01:56.180 --> 02:00.180
它就映射到app public的目录

02:00.180 --> 02:01.180
它为什么能够做这个映射呢

02:01.180 --> 02:02.180
其实这个映射

02:02.180 --> 02:04.180
它不是说ag自己做的

02:04.180 --> 02:07.180
ag里面还没有写任何代码去映射静态支援

02:07.180 --> 02:09.180
那它怎么去映射的

02:09.180 --> 02:12.180
是它内部去使用了一个插件

02:12.180 --> 02:13.180
使用插件

02:13.180 --> 02:15.180
这个插件的官方地址在这

02:15.180 --> 02:17.180
我们一会会用到这个官方地址

02:17.180 --> 02:18.180
好那么接下来我们再说一下

02:18.180 --> 02:20.180
ag里面的插件

02:20.180 --> 02:21.180
它是这样子

02:21.180 --> 02:24.180
这个介石它实际上是给你提供了一套规范

02:24.180 --> 02:26.180
就是说你这个目录结构

02:26.180 --> 02:28.180
你必须是有个app有个config

02:28.180 --> 02:29.180
这里边是配置

02:29.180 --> 02:31.180
这里边是核心代码

02:31.180 --> 02:32.180
然后这里有空置器

02:32.180 --> 02:33.180
应该放到这个目录下面

02:33.180 --> 02:34.180
它就是一套规范

02:34.180 --> 02:36.180
然后它有一套启动流程

02:36.180 --> 02:37.180
就没了

02:37.180 --> 02:39.180
它没有任何功能在里面

02:39.180 --> 02:42.180
而它如果说要加入别的功能

02:42.180 --> 02:44.180
比方说什么对Cookie的解析

02:44.180 --> 02:48.180
对什么C性的使用

02:48.180 --> 02:50.180
包括静态支援的映射

02:50.180 --> 02:53.180
全是靠插件去完成

02:53.180 --> 02:54.180
全是靠插件

02:54.180 --> 02:56.180
那么对于静态支援的映射

02:56.180 --> 02:58.180
是靠什么样的插件呢

02:58.180 --> 02:59.180
它是靠这个插件

02:59.180 --> 03:02.180
叫做ag static

03:02.180 --> 03:03.180
是这么一个插件

03:03.180 --> 03:04.180
我们来看一下

03:04.180 --> 03:05.180
当你安装好了过后

03:05.180 --> 03:08.180
它里面就带了一个内置的插件

03:08.180 --> 03:09.180
ag static

03:09.180 --> 03:10.180
你看是不是在这

03:10.180 --> 03:12.180
还包括什么ag session

03:12.180 --> 03:13.180
这些东西都有

03:13.180 --> 03:14.180
包括ag cookies

03:14.180 --> 03:16.180
你看这些东西全是插件

03:16.180 --> 03:18.180
因此能ag里面的很多

03:18.180 --> 03:19.180
默认的功能

03:19.180 --> 03:20.180
它是靠插件完成的

03:20.180 --> 03:22.180
ag本身它没有做任何事情

03:22.180 --> 03:23.180
它只是觉得

03:23.180 --> 03:24.180
这些插件

03:24.180 --> 03:25.180
我们一般来说

03:25.180 --> 03:26.180
开发一个服务器

03:26.180 --> 03:27.180
都可能会用到

03:27.180 --> 03:28.180
所以说它给你内置进去了

03:28.180 --> 03:30.180
将来呢

03:30.180 --> 03:32.180
我们还会使用一些

03:32.180 --> 03:33.180
它没用内置的插件

03:33.180 --> 03:35.180
就是别的插件

03:35.180 --> 03:36.180
那么就需要我们安装了

03:36.180 --> 03:38.180
它只是内置一个插件而已

03:38.180 --> 03:39.180
仅此而已

03:39.180 --> 03:40.180
那么我们要认识插件

03:40.180 --> 03:42.180
插件可以增强ag的功能

03:42.180 --> 03:43.180
将来我们还会自己

03:43.180 --> 03:45.180
去写一些插件

03:45.180 --> 03:47.180
插件呢

03:47.180 --> 03:48.180
我们首先看看

03:48.180 --> 03:49.180
插件三个方面

03:49.180 --> 03:50.180
就怎么去用

03:50.180 --> 03:52.180
第一个就是插件的名称

03:52.180 --> 03:54.180
ag在启动的过程中

03:54.180 --> 03:55.180
它会加载插件

03:55.180 --> 03:57.180
第一个插件的命名

03:57.180 --> 03:58.180
ag里边

03:58.180 --> 03:59.180
它告诉你

03:59.180 --> 04:00.180
插件的名称要有个规范

04:00.180 --> 04:01.180
就是以ag开头

04:01.180 --> 04:02.180
然后的一个横杠

04:02.180 --> 04:03.180
后边写插件的名字

04:03.180 --> 04:04.180
比方说

04:04.180 --> 04:05.180
我们静态资源

04:05.180 --> 04:06.180
印刷的插件名次

04:06.180 --> 04:07.180
就叫做ag static

04:07.180 --> 04:08.180
对吧

04:08.180 --> 04:09.180
如果说

04:09.180 --> 04:11.180
对cookie解析的插件

04:11.180 --> 04:13.180
就是ag cookies

04:13.180 --> 04:14.180
对session的处理

04:14.180 --> 04:15.180
就是ag session

04:15.180 --> 04:16.180
等等

04:16.180 --> 04:17.180
总之呢

04:17.180 --> 04:18.180
你自己去命一个名字

04:18.180 --> 04:19.180
将来我们自己写插件的时候

04:19.180 --> 04:20.180
也要用这种类似的方式

04:20.180 --> 04:21.180
去命一个名字

04:21.180 --> 04:22.180
在插件的名称

04:22.180 --> 04:23.180
第二呢

04:23.180 --> 04:24.180
有了插件过后

04:24.180 --> 04:25.180
比方说我要安装个插件

04:25.180 --> 04:26.180
就通过这个名称

04:26.180 --> 04:27.180
这个就是包的名字

04:27.180 --> 04:28.180
对吧

04:28.180 --> 04:29.180
我们安装好就行了

04:29.180 --> 04:30.180
第二就是

04:30.180 --> 04:31.180
我们要启用这个插件

04:31.180 --> 04:33.180
怎么去启用插件呢

04:33.180 --> 04:34.180
是这样子的

04:34.180 --> 04:35.180
启用插件呢

04:35.180 --> 04:37.180
你需要写一个配置

04:37.180 --> 04:39.180
在config模组下面

04:39.180 --> 04:41.180
在这个模组下面

04:41.180 --> 04:42.180
新建一个文件

04:42.180 --> 04:44.180
叫做plugging

04:44.180 --> 04:45.180
是不是插件的意思

04:45.180 --> 04:46.180
就这么一个配置

04:46.180 --> 04:48.180
这个配置里边写啥呢

04:48.180 --> 04:49.180
这个配置里边写的是

04:49.180 --> 04:51.180
导出一个对象

04:51.180 --> 04:53.180
这个对象的属性名

04:53.180 --> 04:54.180
就是插件的名称

04:54.180 --> 04:56.180
你要启用哪一个插件

04:56.180 --> 04:58.180
因为你光是安装的插件

04:58.180 --> 04:59.180
还没用

04:59.180 --> 05:01.180
它默认是没有启动的

05:01.180 --> 05:02.180
那有同学就问了

05:02.180 --> 05:03.180
为什么我这里呢

05:03.180 --> 05:05.180
能够看到这个结果呢

05:05.180 --> 05:07.180
是因为它是内置插件

05:07.180 --> 05:08.180
大部分的内置插件

05:08.180 --> 05:09.180
它是自动启用的

05:09.180 --> 05:10.180
跟你已经配置好了

05:10.180 --> 05:11.180
只不过以后

05:11.180 --> 05:12.180
你安装了一些

05:12.180 --> 05:13.180
第三方的插件

05:13.180 --> 05:14.180
就是它没有内置的插件

05:14.180 --> 05:15.180
它是默认情况下

05:15.180 --> 05:16.180
是没有启用的

05:16.180 --> 05:18.180
我这里就顺便说一下

05:18.180 --> 05:19.180
那么如果说你要启用它

05:19.180 --> 05:20.180
或者是对于内置插件

05:20.180 --> 05:21.180
你要关闭它

05:21.180 --> 05:22.180
你都需要去配置

05:22.180 --> 05:23.180
plugging.js

05:23.180 --> 05:24.180
就像一个开关一样

05:24.180 --> 05:25.180
你要不要用它

05:25.180 --> 05:27.180
你安装过了过后

05:27.180 --> 05:28.180
你要不要使用它

05:28.180 --> 05:29.180
就一个开关

05:29.180 --> 05:31.180
这里就专门来管理

05:31.180 --> 05:32.180
我这个应用中

05:32.180 --> 05:33.180
要用到哪些插件

05:33.180 --> 05:35.180
专门来做这个管理的

05:35.180 --> 05:36.180
plugging.js

05:36.180 --> 05:38.180
那么这里边怎么配置呢

05:38.180 --> 05:39.180
配置的方式

05:39.180 --> 05:40.180
就是一个module

05:40.180 --> 05:41.180
export

05:41.180 --> 05:42.180
导出一个对象

05:42.180 --> 05:43.180
一个完整的对象

05:43.180 --> 05:46.180
这个对象里边就是插件的名字

05:46.180 --> 05:49.180
然后后面就要不要启用它

05:49.180 --> 05:51.180
怎么配置要启用它呢

05:51.180 --> 05:52.180
就是enable

05:52.180 --> 05:54.180
我们首先说一下

05:54.180 --> 05:55.180
插件的名字

05:55.180 --> 05:56.180
插件的名字

05:56.180 --> 06:00.180
我们这里要对应这个地方

06:00.180 --> 06:01.180
就是这个

06:01.180 --> 06:03.180
横杠后面这个东西

06:03.180 --> 06:04.180
插件的名字

06:04.180 --> 06:05.180
后面我们讲

06:05.180 --> 06:06.180
自己写插件的时候

06:06.180 --> 06:07.180
还会详细说

06:07.180 --> 06:09.180
这里边我们就写上一个static

06:09.180 --> 06:11.180
就表示我配置的是怎么插件

06:11.180 --> 06:12.180
配置的static插件

06:12.180 --> 06:13.180
我要不要用呢

06:13.180 --> 06:14.180
要用

06:14.180 --> 06:15.180
其他部分就是要用的

06:15.180 --> 06:16.180
比方说我不用它

06:16.180 --> 06:18.180
所以forwards就可以了

06:18.180 --> 06:20.180
其中还有一个配置

06:20.180 --> 06:21.180
也很关键

06:21.180 --> 06:22.180
叫做tackage

06:22.180 --> 06:23.180
这个配置

06:23.180 --> 06:25.180
这个配置叫做插件的

06:25.180 --> 06:27.180
包的名字

06:27.180 --> 06:28.180
插件包的名字

06:28.180 --> 06:29.180
其实它包的名字

06:29.180 --> 06:31.180
可能跟这个名字也不一样

06:31.180 --> 06:32.180
所以说你要给它写个包的名字

06:32.180 --> 06:33.180
包在哪呢

06:33.180 --> 06:35.180
如果说你在loading module

06:35.180 --> 06:36.180
是module下面

06:36.180 --> 06:37.180
那么你就直接写包的名字

06:37.180 --> 06:38.180
就行了

06:38.180 --> 06:39.180
比如它的ag static

06:39.180 --> 06:40.180
包的名字是这个

06:40.180 --> 06:41.180
好了

06:41.180 --> 06:42.180
包的名字的ag

06:42.180 --> 06:43.180
是不是就能够找到

06:43.180 --> 06:45.180
插件的代码位置了

06:45.180 --> 06:46.180
对不对

06:46.180 --> 06:47.180
这是插件本身的名字

06:47.180 --> 06:48.180
这是包的名字

06:48.180 --> 06:49.180
原来的意思吧

06:49.180 --> 06:50.180
好

06:50.180 --> 06:51.180
那么现在我们这样子写了过后

06:51.180 --> 06:52.180
是不是就把插件禁用了

06:52.180 --> 06:53.180
好

06:53.180 --> 06:54.180
保存

06:54.180 --> 06:55.180
我们来看一下

06:55.180 --> 06:56.180
现在刷新

06:56.180 --> 06:57.180
是不是404

06:57.180 --> 06:58.180
静态资源

06:58.180 --> 06:59.180
这个插件就被禁用了

06:59.180 --> 07:01.180
我们把它设备起用起来

07:01.180 --> 07:02.180
保存

07:02.180 --> 07:03.180
刷新

07:03.180 --> 07:04.180
是不是可以用了

07:04.180 --> 07:06.180
只不过内置插件是默认起用的

07:06.180 --> 07:07.180
通过这个例子

07:07.180 --> 07:08.180
我说一下

07:08.180 --> 07:09.180
插件的起用

07:09.180 --> 07:10.180
后面我们还会用到插件

07:10.180 --> 07:11.180
你要知道怎么去用

07:11.180 --> 07:13.180
还有一个东西叫

07:13.180 --> 07:14.180
PASS

07:14.180 --> 07:16.180
就是将来我们可能会自己写插件

07:16.180 --> 07:17.180
这些插件插件的话

07:17.180 --> 07:18.180
我们可能不会在

07:18.180 --> 07:19.180
露着毛90的目录下面

07:19.180 --> 07:21.180
那么你要给它一个PASS

07:21.180 --> 07:23.180
给它插件的决定路径在哪

07:23.180 --> 07:24.180
这个配置

07:24.180 --> 07:27.180
跟这个配置是相互互斥的

07:27.180 --> 07:28.180
就有它

07:28.180 --> 07:29.180
不能有它

07:29.180 --> 07:30.180
有它

07:30.180 --> 07:31.180
不能有它

07:31.180 --> 07:32.180
就两个配置是相互互斥的

07:32.180 --> 07:33.180
目前我们用不到一个PASS

07:33.180 --> 07:34.180
因为目前我们用的插件

07:34.180 --> 07:36.180
都是别人写好的

07:36.180 --> 07:37.180
露着毛90的目录下面

07:37.180 --> 07:38.180
原来的意思吧

07:39.180 --> 07:42.180
这是关于插件的起用和禁用

07:42.180 --> 07:44.180
那么如果说你是一个内置

07:44.180 --> 07:46.180
当然我们还写法了有很多

07:46.180 --> 07:47.180
这是一种写法

07:47.180 --> 07:48.180
能不能用这种写法

07:49.180 --> 07:50.180
那有什么区域变的

07:50.180 --> 07:51.180
对吧

07:51.180 --> 07:52.180
有什么区域变的

07:52.180 --> 07:53.180
就是对象里面

07:53.180 --> 07:54.180
Exports不就是这个玩意吗

07:54.180 --> 07:55.180
对吧

07:55.180 --> 07:56.180
往对象里面加一个属性

07:56.180 --> 07:57.180
Static

07:57.180 --> 07:58.180
所以这种地方

07:58.180 --> 07:59.180
更加简洁一点

07:59.180 --> 08:01.180
官方也比较建议

08:01.180 --> 08:02.180
大家使用这种写法

08:02.180 --> 08:03.180
Static

08:03.180 --> 08:04.180
因为这种写法

08:04.180 --> 08:05.180
我可以在不同

08:05.180 --> 08:06.180
写不同的插件

08:06.180 --> 08:07.180
对吧

08:07.180 --> 08:08.180
它是插件的配置

08:08.180 --> 08:09.180
对吧

08:09.180 --> 08:10.180
分开写

08:10.180 --> 08:11.180
看你自己

08:11.180 --> 08:12.180
保存

08:12.180 --> 08:13.180
当然如果你觉得

08:13.180 --> 08:14.180
插件太多了

08:14.180 --> 08:15.180
你还可以分文件

08:15.180 --> 08:16.180
对吧

08:16.180 --> 08:17.180
导入在这里

08:17.180 --> 08:18.180
无所谓

08:18.180 --> 08:19.180
其实就是一个

08:19.180 --> 08:20.180
插件的起用和禁用

08:20.180 --> 08:21.180
也不需要分文件

08:21.180 --> 08:22.180
这里是一样的

08:23.180 --> 08:25.180
这是插件的起用和禁用

08:25.180 --> 08:27.180
如果你是内置插件的话

08:27.180 --> 08:28.180
你还可以更加简单

08:28.180 --> 08:29.180
因为内置插件的话

08:29.180 --> 08:30.180
他都知道

08:30.180 --> 08:31.180
我都知道

08:31.180 --> 08:32.180
我按在哪儿

08:32.180 --> 08:33.180
我按在就在

08:33.180 --> 08:34.180
露着毛90目录下面

08:34.180 --> 08:35.180
所以说你直接

08:35.180 --> 08:36.180
起用和禁用就行了

08:36.180 --> 08:37.180
所以他还可以给你

08:37.180 --> 08:39.180
提供了这种简单的写法

08:39.180 --> 08:40.180
这里就写错了

08:40.180 --> 08:42.180
这里应该就这样写了

08:42.180 --> 08:44.180
如果说内置插件的话

08:44.180 --> 08:45.180
你可以这样子写

08:45.180 --> 08:47.180
起用

08:47.180 --> 08:48.180
刷新

08:48.180 --> 08:49.180
没问题

08:49.180 --> 08:50.180
对吧

08:50.180 --> 08:51.180
然后禁用

08:51.180 --> 08:52.180
因为他知道

08:52.180 --> 08:53.180
这个包在哪儿

08:53.180 --> 08:54.180
你不用告诉他包在哪儿

08:54.180 --> 08:55.180
是吧

08:55.180 --> 08:56.180
可以

08:56.180 --> 08:57.180
没问题吧

08:57.180 --> 08:58.180
这是我们一般来说

08:58.180 --> 08:59.180
用统一的写法

08:59.180 --> 09:00.180
更好

09:01.180 --> 09:02.180
注意

09:02.180 --> 09:03.180
Plugging.js

09:03.180 --> 09:04.180
这个文件

09:04.180 --> 09:06.180
它只是做插件的起用和禁用

09:06.180 --> 09:07.180
它只是个开关

09:07.180 --> 09:08.180
咱们很多插件

09:08.180 --> 09:10.180
全在这个文件里边

09:10.180 --> 09:11.180
哪些插件要用

09:11.180 --> 09:12.180
哪些插件不用

09:12.180 --> 09:13.180
全在这个文件里边配置

09:13.180 --> 09:15.180
它只是做开关的

09:15.180 --> 09:17.180
那么插件的具体功能上

09:17.180 --> 09:19.180
比方说我们这个静态音设

09:19.180 --> 09:20.180
这个静态音设

09:20.180 --> 09:21.180
目前好像还有很多问题

09:21.180 --> 09:22.180
你看

09:22.180 --> 09:23.180
如果说不写这个音

09:23.180 --> 09:24.180
这个是聊一天

09:25.180 --> 09:26.180
是不是找不到

09:26.180 --> 09:27.180
对不对

09:27.180 --> 09:28.180
而且他有个潜罪

09:28.180 --> 09:29.180
public

09:29.180 --> 09:30.180
我不想要这个潜罪怎么办

09:30.180 --> 09:31.180
对不对

09:31.180 --> 09:32.180
还是不是还有很多功能性

09:32.180 --> 09:33.180
专门针对插件

09:33.180 --> 09:35.180
本身的功能性质的配置

09:35.180 --> 09:36.180
那么这个配置

09:36.180 --> 09:38.180
它不是写到Plugging.js

09:38.180 --> 09:39.180
所以框架

09:39.180 --> 09:41.180
框架就是有约束的

09:41.180 --> 09:43.180
它要让你该怎么去开发

09:43.180 --> 09:44.180
它怎么配置插件呢

09:44.180 --> 09:45.180
插件的功能

09:45.180 --> 09:48.180
它是要配置到这儿的

09:48.180 --> 09:50.180
configdefault.js

09:50.180 --> 09:51.180
这个文件里边

09:51.180 --> 09:52.180
就这个文件

09:52.180 --> 09:53.180
因为Agg

09:53.180 --> 09:54.180
它是这样子认为的

09:54.180 --> 09:56.180
它认为

09:56.180 --> 09:58.180
所有的功能性质的配置

09:58.180 --> 10:00.180
应该全在这个文件

10:00.180 --> 10:01.180
集中配置

10:01.180 --> 10:02.180
那么到时候

10:02.180 --> 10:03.180
我要找

10:03.180 --> 10:04.180
对某一个功能进行配置

10:04.180 --> 10:05.180
全在这个文件里边去找

10:05.180 --> 10:06.180
所以说

10:06.180 --> 10:07.180
它用这种模式来进行的

10:07.180 --> 10:09.180
这里面只是起个开关的作用

10:09.180 --> 10:11.180
那么这边怎么来配置它的功能呢

10:11.180 --> 10:13.180
它的理念是集中配置

10:13.180 --> 10:14.180
集中管理

10:14.180 --> 10:16.180
功能它是这样子配置的

10:16.180 --> 10:17.180
export

10:17.180 --> 10:18.180
后面是插件的名字

10:18.180 --> 10:19.180
比方说你要针对

10:20.180 --> 10:21.180
static这个插件

10:21.180 --> 10:22.180
对它进行配置

10:22.180 --> 10:23.180
那么你就

10:23.180 --> 10:24.180
这样子写

10:24.180 --> 10:25.180
后面就写配置相

10:25.180 --> 10:27.180
那么这个配置相写啥呢

10:27.180 --> 10:29.180
那就看这个插件本身了

10:29.180 --> 10:30.180
这个插件

10:30.180 --> 10:31.180
比方说这个插件你去

10:31.180 --> 10:32.180
约着它的官网

10:32.180 --> 10:33.180
它就会告诉你怎么去配置

10:33.180 --> 10:34.180
看一下官网吧

10:34.180 --> 10:35.180
很好看

10:35.180 --> 10:36.180
很好看懂的

10:36.180 --> 10:37.180
这个插件

10:37.180 --> 10:41.260
它就会赌到这个配置

10:41.260 --> 10:42.260
这个插件运行的过程中

10:42.260 --> 10:43.260
它就会赌到这个配置

10:43.260 --> 10:44.260
你像

10:44.260 --> 10:46.260
上面这个keyz这个配置

10:46.260 --> 10:47.260
会被谁赌到了

10:47.260 --> 10:49.260
会被这个cookie插件赌到

10:49.260 --> 10:50.260
那有些人说

10:50.260 --> 10:51.260
那个名字好像不一样了

10:51.260 --> 10:53.260
这个地方倒是不适的要求

10:53.260 --> 10:54.260
一定要一样

10:54.260 --> 10:55.260
关键是看插件

10:55.260 --> 10:56.260
它里面赌到了是什么

10:57.260 --> 10:58.260
那么这边

10:58.260 --> 10:59.260
它的插件赌到了

10:59.260 --> 11:00.260
是什么配置呢

11:00.260 --> 11:01.260
它就是Static

11:01.260 --> 11:03.260
官方网它就会告诉你

11:03.260 --> 11:04.260
它赌的是什么配置呢

11:04.260 --> 11:05.260
它赌的是Static

11:05.260 --> 11:06.260
一般来说

11:06.260 --> 11:08.260
它就是赌那个插件的名字相同的

11:08.260 --> 11:10.260
这里边配置为啥呢

11:10.260 --> 11:11.260
它告诉你

11:11.260 --> 11:13.260
这个ag static

11:13.260 --> 11:14.260
实际上它用到的是什么呢

11:14.260 --> 11:16.260
用到的是ka的一个中间线

11:16.260 --> 11:17.260
它的一部

11:17.260 --> 11:19.260
ka static catch

11:19.260 --> 11:20.260
对吧

11:20.260 --> 11:21.260
你学过ka你应该知道

11:21.260 --> 11:23.260
我们讲过这个中间线

11:23.260 --> 11:24.260
对不对

11:24.260 --> 11:25.260
它就是精灵态资源

11:25.260 --> 11:26.260
再加上一个缓存

11:26.260 --> 11:28.260
你做了一个缓存

11:28.260 --> 11:29.260
那么这里边有哪些配置呢

11:29.260 --> 11:30.260
你是不是就开进去

11:30.260 --> 11:31.260
这里边去看

11:31.260 --> 11:32.260
它告诉你

11:32.260 --> 11:33.260
它支持所有的配置

11:33.260 --> 11:34.260
跟这个配置

11:34.260 --> 11:35.260
一样的所有配置

11:35.260 --> 11:36.260
那么你去看一下

11:36.260 --> 11:37.260
这里边该怎么去配置

11:37.260 --> 11:38.260
Static catch

11:38.260 --> 11:39.260
那这里边怎么配置呢

11:39.260 --> 11:40.260
你自己看

11:40.260 --> 11:41.260
就这么一些配置

11:41.260 --> 11:42.260
DIR

11:42.260 --> 11:43.260
不用说了吧

11:43.260 --> 11:44.260
它告诉你

11:44.260 --> 11:46.260
哪个就是

11:46.260 --> 11:47.260
把哪个目录

11:47.260 --> 11:48.260
变成静态资源目录

11:48.260 --> 11:49.260
默认是什么呢

11:49.260 --> 11:50.260
默认它这里边

11:50.260 --> 11:51.260
这个插件里边

11:51.260 --> 11:52.260
还可以默认为这个

11:52.260 --> 11:53.260
app public目录

11:53.260 --> 11:54.260
了解的话就可以改

11:54.260 --> 11:55.260
对不对

11:55.260 --> 11:57.260
还要包括什么呢

11:57.260 --> 11:58.260
prefix

11:58.260 --> 11:59.260
那么这个插件里边

11:59.260 --> 12:01.260
还把prefix给你改了

12:01.260 --> 12:02.260
改成什么呢

12:02.260 --> 12:03.260
public

12:03.260 --> 12:04.260
也就是什么意思呢

12:04.260 --> 12:05.260
就是我访问的前追里边

12:05.260 --> 12:06.260
带一个public

12:06.260 --> 12:07.260
才去进行硬设

12:07.260 --> 12:08.260
硬设后边的东西

12:08.260 --> 12:10.260
那如果说你不希望public怎么办

12:10.260 --> 12:11.260
那你看

12:11.260 --> 12:12.260
针对的插件哪一辈

12:12.260 --> 12:14.260
prefix重新给它设一下

12:14.260 --> 12:15.260
设置成什么

12:15.260 --> 12:16.260
一个邪道

12:16.260 --> 12:17.260
保存

12:17.260 --> 12:18.260
保存过后来

12:18.260 --> 12:19.260
我们来看一下

12:19.260 --> 12:20.260
现在我们的能访问

12:20.260 --> 12:21.260
不能访问了

12:21.260 --> 12:23.260
而我们现在访问这儿呢

12:23.260 --> 12:24.260
是不是可以访问

12:24.260 --> 12:25.260
对吧

12:25.260 --> 12:26.260
就可以访问了

12:26.260 --> 12:27.260
包括CSS

12:27.260 --> 12:28.260
是不是可以访问了

12:28.260 --> 12:29.260
对吧

12:29.260 --> 12:30.260
根据这个插件的

12:30.260 --> 12:31.260
官方文档自行配置

12:31.260 --> 12:32.260
就行了

12:32.260 --> 12:34.260
包括还有什么呢

12:34.260 --> 12:36.260
还有这个就是

12:36.260 --> 12:37.260
默认

12:37.260 --> 12:38.260
这里我说一下

12:38.260 --> 12:40.260
默认的就是

12:40.260 --> 12:42.260
如果说你访问的是这个地址

12:42.260 --> 12:43.260
不要说

12:43.260 --> 12:44.260
咱们访问这个地址

12:44.260 --> 12:45.260
它默认的就是

12:45.260 --> 12:46.260
in这个设置

12:46.260 --> 12:47.260
那么这个东西

12:47.260 --> 12:48.260
该怎么配置呢

12:48.260 --> 12:49.260
这个东西

12:49.260 --> 12:50.260
其实他这里边

12:50.260 --> 12:51.260
已经告诉你的

12:51.260 --> 12:52.260
他说

12:52.260 --> 12:54.260
这个QA的这个重点键

12:54.260 --> 12:55.260
因为插件内部

12:55.260 --> 12:56.260
使用的这个重点键

12:56.260 --> 12:57.260
像完全一样

12:57.260 --> 12:58.260
这个重点键

12:58.260 --> 13:00.260
它

13:00.260 --> 13:02.260
它不支持对目录的访问

13:02.260 --> 13:03.260
它不支持对目录的访问

13:03.260 --> 13:05.260
也不支持in这个

13:05.260 --> 13:06.260
听不到这个东西

13:06.260 --> 13:07.260
它不支持

13:07.260 --> 13:08.260
它不支持就没办法了

13:08.260 --> 13:09.260
不过呢

13:09.260 --> 13:10.260
它倒是有一个

13:10.260 --> 13:12.260
可以缓解这个问题的

13:12.260 --> 13:13.260
叫做什么

13:13.260 --> 13:14.260
Orlias

13:14.260 --> 13:16.260
Orlias叫做别名

13:16.260 --> 13:17.260
叫做别名

13:17.260 --> 13:18.260
就是你访问

13:18.260 --> 13:19.260
某一个路径的时候

13:19.260 --> 13:20.260
它认为你访问的是

13:20.260 --> 13:21.260
别的路径

13:21.260 --> 13:24.260
Orlias

13:25.260 --> 13:26.260
比如说

13:26.260 --> 13:27.260
什么意思呢

13:27.260 --> 13:28.260
当你访问这个路径的时候

13:28.260 --> 13:29.260
你就告诉他

13:29.260 --> 13:30.260
你访问的

13:30.260 --> 13:31.260
实际上是这个路径

13:33.260 --> 13:34.260
这样子

13:34.260 --> 13:36.260
可以解决这个问题

13:36.260 --> 13:37.260
刷新这样没问题

13:37.260 --> 13:38.260
对吧

13:38.260 --> 13:39.260
当你访问这个路径的时候

13:39.260 --> 13:40.260
你看是不是也没问题

13:40.260 --> 13:41.260
因为有个别名

13:41.260 --> 13:42.260
这个东西

13:42.260 --> 13:43.260
无非就是根据

13:43.260 --> 13:44.260
这个插件的配置来续写

13:44.260 --> 13:45.260
具体的插件

13:45.260 --> 13:46.260
有具体的配置

13:46.260 --> 13:47.260
这个我就不详细讲了

13:47.260 --> 13:48.260
我们只是说

13:48.260 --> 13:50.260
插件的逻辑是什么

13:50.260 --> 13:51.260
名字

13:51.260 --> 13:52.260
A个开头

13:52.260 --> 13:53.260
一个横杠

13:53.260 --> 13:55.260
其用牌是禁用

13:55.260 --> 13:56.260
要不要用它

13:56.260 --> 13:58.260
在procgin.ds里边配置

13:58.260 --> 13:59.260
第三方

13:59.260 --> 14:01.260
手动安装的插件

14:01.260 --> 14:03.260
它默认是没有其用的

14:03.260 --> 14:04.260
而内置的插件

14:04.260 --> 14:06.260
默认都是其用的

14:06.260 --> 14:08.260
你可以在这里进行开关

14:08.260 --> 14:10.260
然后对具体的功能的配置

14:10.260 --> 14:11.260
那么去看插件的官方文档

14:11.260 --> 14:13.260
它会告诉你怎么去配置

14:13.260 --> 14:14.260
要配置到哪呢

14:14.260 --> 14:16.260
配置到config.default.ds里边

14:16.260 --> 14:17.260
ok

14:17.260 --> 14:18.260
这就是

14:18.260 --> 14:20.260
插件的基本使用

14:20.260 --> 14:21.260
所以这一刻

14:21.260 --> 14:22.260
虽然说讲的是静态资源

14:22.260 --> 14:23.260
但是更重要的是

14:23.260 --> 14:24.260
插件的使用

14:24.260 --> 14:25.260
因为后面还会用到

14:25.260 --> 14:26.260
很多的插件

14:26.260 --> 14:28.260
这是关于

14:28.260 --> 14:30.260
这一刻的知识

