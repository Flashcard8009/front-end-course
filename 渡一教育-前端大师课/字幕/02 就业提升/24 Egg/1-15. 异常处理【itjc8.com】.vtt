WEBVTT

00:00.050 --> 00:04.050
来说一下这个Agg里面的异常处理模式

00:04.050 --> 00:06.050
也就是错误处理

00:06.050 --> 00:09.050
其实呢 咱们学习这个Agg呢

00:09.050 --> 00:12.050
除了学习Agg本身之外

00:12.050 --> 00:15.050
更重要的是让大家体验到

00:15.050 --> 00:19.050
在不同的 就服务器应对不同的问题

00:19.050 --> 00:21.050
和不同的场景

00:21.050 --> 00:24.050
它的一些成熟的处理方式

00:24.050 --> 00:27.050
因为这个Agg呢 它本来就是一个

00:27.050 --> 00:30.050
服务器应用程序的一个框架

00:30.050 --> 00:33.050
框架呢 它有一种成熟性在里边

00:33.050 --> 00:34.050
它有一种沉淀

00:34.050 --> 00:36.050
就是我们平时处理这种问题

00:36.050 --> 00:38.050
该怎么用怎么样的方式去处理

00:38.050 --> 00:41.050
大家可以去体会一下

00:41.050 --> 00:44.050
不是说它这个这种处理方式呢

00:44.050 --> 00:48.050
就一定是在任何场景都是完美的

00:48.050 --> 00:50.050
那肯定是不一定的

00:50.050 --> 00:52.050
有的时候呢 需要遇到一些特殊场景的

00:52.050 --> 00:53.050
可能会凝活处理

00:53.050 --> 00:56.050
不过呢 它给你提供了这么一种方式呢

00:56.050 --> 00:57.050
大家可以借鉴

00:57.050 --> 01:00.050
将来呢 你们理解后端

01:00.050 --> 01:03.050
对你们理解后端就很有帮助了

01:03.050 --> 01:04.050
因为后端处理这些问题呢

01:04.050 --> 01:07.050
也差不多是使用类似的方式

01:07.050 --> 01:09.050
好 咱们来看一下吧

01:09.050 --> 01:11.050
当然这些东西我仍然建议啊

01:11.050 --> 01:13.050
就是我们录了这么多课

01:13.050 --> 01:15.050
Agg呢 其实不是说

01:15.050 --> 01:16.050
它这个各种处理呢

01:16.050 --> 01:18.050
那么重要 要一个个去看

01:18.050 --> 01:19.050
一个个去计

01:19.050 --> 01:20.050
没有必要

01:20.050 --> 01:22.050
你要注意的就是这个

01:22.050 --> 01:25.050
它的这种处理方式和思维

01:26.050 --> 01:29.050
这些东西呢 处理方式忘了

01:29.050 --> 01:31.050
将来比方说你开发服务器

01:31.050 --> 01:32.050
开发服务器的时候

01:32.050 --> 01:35.050
你忘了Agg里边异常处理

01:35.050 --> 01:37.050
该怎么处理呢 我该怎么去配置呢

01:37.050 --> 01:39.050
你查一查官方文档

01:39.050 --> 01:41.050
你查一查我这个课程的文档

01:41.050 --> 01:43.050
就可以很快的回忆起来

01:44.050 --> 01:46.050
好 我们这里说一下它的异常处理

01:46.050 --> 01:49.050
就当发生错误的时候

01:49.050 --> 01:51.050
你看它是怎么想的

01:51.050 --> 01:54.050
首先它保留了KOA的处理模式

01:54.050 --> 01:56.050
就是我们KOA里面不是一个APP嘛

01:56.050 --> 01:59.050
APP里面是不是可以注册一个error时间

01:59.050 --> 02:02.050
对不对 这里第一个参数是错误

02:02.050 --> 02:04.050
第二参数是一个contact

02:04.050 --> 02:06.050
里面包含request response

02:07.050 --> 02:09.050
那么遇到这样的错误的时候

02:09.050 --> 02:12.050
那么它就会运行这个代码

02:13.050 --> 02:14.050
那么你要做什么事情

02:14.050 --> 02:15.050
你随便去做

02:15.050 --> 02:17.050
这是KOA的处理模式

02:17.050 --> 02:19.050
这个模式它给你保留下来了

02:19.050 --> 02:20.050
你可以用

02:20.050 --> 02:23.050
但是它更加建议你使用

02:23.050 --> 02:26.050
更好的更成熟的处理模式

02:26.050 --> 02:27.050
就是呢

02:27.050 --> 02:28.050
因为这种处理模式

02:28.050 --> 02:30.050
它具体要干上的事情太灵活了

02:30.050 --> 02:31.050
它保留了灵活性

02:31.050 --> 02:33.050
但是就不是那么方便

02:33.050 --> 02:35.050
因为我们研究了一下

02:35.050 --> 02:38.050
我们研究一下这个服务器发生的错误

02:38.050 --> 02:40.050
一般来说服务器发生错误

02:40.050 --> 02:41.050
是在什么时候

02:42.050 --> 02:44.050
是不是在请求对不对

02:44.050 --> 02:46.050
那如果说启动的时候就发生错误了

02:46.050 --> 02:49.050
那这种事情

02:49.050 --> 02:52.050
一般早就排除掉了

02:52.050 --> 02:53.050
对不对

02:53.050 --> 02:54.050
很快就排除掉了

02:54.050 --> 02:56.050
我们主要的问题发生错误的问题

02:56.050 --> 02:59.050
是在请求和响应的过程中

02:59.050 --> 03:01.050
比方说你调用service

03:01.050 --> 03:03.050
你service里边调用数据库

03:03.050 --> 03:05.050
或者调用免程请求等等

03:05.050 --> 03:07.050
请求处理的过程中

03:07.050 --> 03:08.050
它要做很多事情

03:08.050 --> 03:10.050
那么在这个事情处理过程中

03:10.050 --> 03:11.050
可能会发生错误

03:11.050 --> 03:13.050
那么当服务器请求服务器

03:13.050 --> 03:15.050
服务器发生了一个错误

03:15.050 --> 03:17.050
一般来说会怎么样

03:17.050 --> 03:18.050
一般来说

03:18.050 --> 03:21.050
你觉得你应该可以用户响应什么的

03:22.050 --> 03:23.050
日制记录

03:23.050 --> 03:24.050
日制记录我们是不是已经讲过了

03:24.050 --> 03:26.050
它已经自动的会进行日制记录了

03:26.050 --> 03:28.050
也不用去管它

03:28.050 --> 03:30.050
那么我们现在要关注的是

03:30.050 --> 03:32.050
你应该给用户什么东西

03:32.050 --> 03:33.050
给用户什么东西呢

03:33.050 --> 03:35.050
我们其实随便总结起来

03:35.050 --> 03:37.050
都可以很容易明白

03:37.050 --> 03:39.050
如果说用户请求的是一个页面

03:39.050 --> 03:43.050
请求页面发生错误

03:43.050 --> 03:44.050
那么这个时候

03:44.050 --> 03:46.050
用户应该得到什么呢

03:46.050 --> 03:48.050
应该得到一个500页面

03:48.050 --> 03:50.050
就应该得到500页面

03:50.050 --> 03:51.050
或者就是得到一个

03:51.050 --> 03:54.050
或者是一个自定义的错误页面

03:54.050 --> 03:55.050
对不对

03:55.050 --> 03:56.050
一般来说

03:56.050 --> 03:59.050
我们自定义的错误页面要好一点

03:59.050 --> 04:01.050
就是有的是发文网站

04:01.050 --> 04:03.050
网络告诉你这里出错了

04:03.050 --> 04:05.050
有一个小人很可爱的告诉你

04:05.050 --> 04:06.050
这里出错了

04:06.050 --> 04:07.050
给你一个引导

04:07.050 --> 04:09.050
给一个超链接让你回去

04:09.050 --> 04:11.050
或者让你报告错误都可以

04:11.050 --> 04:12.050
这是这个

04:12.050 --> 04:13.050
另外一个呢

04:13.050 --> 04:15.050
如果说请求接口

04:15.050 --> 04:18.050
请求接口发生错误

04:18.050 --> 04:19.050
那么这个时候

04:19.050 --> 04:21.050
是要给一个接生格式的500

04:21.050 --> 04:22.050
对吧

04:22.050 --> 04:23.050
比方说像这种

04:23.050 --> 04:26.050
扣的500

04:26.050 --> 04:27.050
或者是message

04:27.050 --> 04:28.050
什么什么什么

04:28.050 --> 04:29.050
对吧

04:29.050 --> 04:30.050
一个错误消息

04:30.050 --> 04:31.050
所以就这两种情况

04:31.050 --> 04:32.050
还有别的吗

04:32.050 --> 04:34.050
一般来说就没有别的了

04:34.050 --> 04:36.050
那么面对这两种情况呢

04:36.050 --> 04:37.050
ag.js呢

04:37.050 --> 04:38.050
就给你考虑进来

04:38.050 --> 04:39.050
它就给你处理掉了

04:39.050 --> 04:40.050
所以说你们分析问题

04:40.050 --> 04:41.050
也不是分析问题

04:41.050 --> 04:44.050
就可以用这个模式来分析

04:44.050 --> 04:45.050
ag的内部呢

04:45.050 --> 04:46.050
使用ag on error

04:46.050 --> 04:48.050
就当错误发生的时候

04:48.050 --> 04:49.050
就给你处理

04:49.050 --> 04:51.050
那么这个插件来处理这个异常

04:51.050 --> 04:52.050
默认情况下

04:52.050 --> 04:53.050
ag on error

04:53.050 --> 04:55.050
会对异常做以下处理

04:55.050 --> 04:56.050
做什么处理呢

04:56.050 --> 04:58.050
你看着吧

04:58.050 --> 04:59.050
这三行

04:59.050 --> 05:01.050
前面这个表格的三行

05:01.050 --> 05:03.050
是用户请求的是页面

05:03.050 --> 05:05.050
他怎么知道用户是请求的页面

05:05.050 --> 05:07.050
用户请求页面的时候

05:07.050 --> 05:14.740
相信啊

05:14.740 --> 05:18.180
用户请求页面的时候

05:18.180 --> 05:19.180
你看啊

05:19.180 --> 05:20.180
他在头里边说

05:20.180 --> 05:21.180
你会加一个东西

05:21.180 --> 05:22.180
except

05:22.180 --> 05:23.180
这个玩意

05:23.180 --> 05:24.180
对不对

05:24.180 --> 05:25.180
他就用这个东西来判断

05:25.180 --> 05:27.180
用户请求的需要的是不是页面

05:27.180 --> 05:28.180
好

05:28.180 --> 05:30.180
如果说用户需要的是页面

05:33.180 --> 05:35.180
然后他就看环境

05:35.180 --> 05:38.180
如果说环境是本地开发环境

05:38.180 --> 05:39.180
就开发环境

05:39.180 --> 05:40.180
或者是测试环境

05:40.180 --> 05:41.180
如果是这种环境的话

05:41.180 --> 05:43.180
发生了错误

05:43.180 --> 05:45.180
那么他就会

05:45.180 --> 05:47.180
给你一个自带的错误页面

05:47.180 --> 05:49.180
来给你展示详细的错误信息

05:49.180 --> 05:50.180
好

05:51.180 --> 05:52.180
他为什么要这样做呢

05:52.180 --> 05:54.180
因为开发阶段遇到了错误

05:54.180 --> 05:55.180
最重要的是什么

05:55.180 --> 05:56.180
我倒不是看到那个

05:56.180 --> 05:57.180
漂亮的错误页面

05:57.180 --> 05:58.180
我不需要

05:58.180 --> 05:59.180
我是开发者

05:59.180 --> 06:01.180
我最希望看到错误的详细信息

06:01.180 --> 06:02.180
对不对

06:02.180 --> 06:03.180
这是最希望看到的

06:03.180 --> 06:05.180
所以说在开发的模式下面

06:05.180 --> 06:06.180
你学习学习

06:06.180 --> 06:08.180
他的那种模式和思路

06:08.180 --> 06:11.180
当用户请求的是页面的时候

06:11.180 --> 06:13.180
那么我就给你一个

06:13.180 --> 06:15.180
详细展示错误的页面

06:16.180 --> 06:17.180
比方说

06:17.180 --> 06:18.180
我们在这里呢

06:18.180 --> 06:20.180
给他一个

06:20.180 --> 06:22.180
在ctrl里边吧

06:23.180 --> 06:25.180
在这里扔个错误出去吧

06:25.180 --> 06:26.180
16

06:26.180 --> 06:27.180
6

06:32.510 --> 06:33.510
接下来我们来访问一下

06:33.510 --> 06:37.230
你看

06:37.230 --> 06:38.230
是不是给了一个错误页面

06:38.230 --> 06:39.230
500

06:39.230 --> 06:40.230
对不对

06:40.230 --> 06:41.230
错误的消息

06:41.230 --> 06:43.230
然后这个错误的对战信息

06:43.230 --> 06:44.230
对不对

06:44.230 --> 06:45.230
最后发生错误的位置

06:45.230 --> 06:46.230
下面还有

06:46.230 --> 06:47.230
还有很多信息

06:47.230 --> 06:48.230
你可以看一下

06:49.230 --> 06:50.230
好

06:50.230 --> 06:51.230
那么这下面有一些配置

06:51.230 --> 06:52.230
给你展示出来

06:52.230 --> 06:53.230
那么这样子

06:53.230 --> 06:55.230
是不是变引你分析错误

06:55.230 --> 06:56.230
这是开发阶段

06:57.230 --> 06:59.230
如果说不是开发环境

06:59.230 --> 07:00.230
是生产环境的

07:00.230 --> 07:02.230
那如果说你访问页面的时候

07:02.230 --> 07:03.230
它是一个生产环境

07:03.230 --> 07:04.230
它会怎么来处理呢

07:04.230 --> 07:05.230
它关键看你

07:05.230 --> 07:07.230
有没有配置个arrow配gyl

07:07.230 --> 07:08.230
这是个配置

07:08.230 --> 07:10.230
我们以后会说这个配置

07:10.230 --> 07:11.230
那么这是什么意思呢

07:11.230 --> 07:13.230
就表示错误页面的地址

07:13.230 --> 07:15.230
如果说你配置到这个

07:15.230 --> 07:16.230
那么很简单

07:16.230 --> 07:18.230
它就给你重新向到这个地址

07:18.230 --> 07:19.230
那么这个地址呢

07:19.230 --> 07:20.230
你提供一个页面

07:20.230 --> 07:21.230
一个就是错误页面

07:21.230 --> 07:22.230
把它做好看一点

07:22.230 --> 07:23.230
对吧

07:23.230 --> 07:24.230
就完事了

07:24.230 --> 07:25.230
如果说你是

07:25.230 --> 07:27.230
你没有配置这个东西呢

07:27.230 --> 07:29.230
它还是给你展示一个自带的错误页面

07:29.230 --> 07:30.230
但是呢

07:30.230 --> 07:32.230
这个错误信息比较简单

07:32.230 --> 07:34.230
但是不推荐这种方式

07:34.230 --> 07:35.230
因为生产环境的

07:35.230 --> 07:36.230
最好不要让用户看到

07:36.230 --> 07:38.230
这种原始的错误页面

07:38.230 --> 07:39.230
最好不要

07:39.230 --> 07:41.230
这是关于这个

07:41.230 --> 07:43.230
那么我们来用生产环境

07:43.230 --> 07:45.230
看一下吧

07:45.230 --> 07:47.230
这方面好像之前写过的

07:47.230 --> 07:48.230
NPM Start

07:48.230 --> 07:53.720
5001

07:53.720 --> 07:57.030
5001

07:57.030 --> 07:59.030
变这个

08:00.030 --> 08:02.030
那如果说我配置的一个什么呢

08:02.030 --> 08:03.030
我停止了

08:03.030 --> 08:06.980
如果说我配置了

08:06.980 --> 08:08.980
配置的就是这个

08:08.980 --> 08:09.980
L2HUI

08:09.980 --> 08:10.980
它就会重新向我们配置的

08:10.980 --> 08:11.980
指定的地址

08:11.980 --> 08:13.980
这是请求页面

08:13.980 --> 08:14.980
那如果说请求接上

08:14.980 --> 08:15.980
或者是接上P的话

08:15.980 --> 08:16.980
它也分为两种

08:16.980 --> 08:18.980
跟这个东西就没关系了

08:18.980 --> 08:20.980
接上和接上P

08:20.980 --> 08:22.980
就是你要请求一个接口

08:22.980 --> 08:23.980
你希望得到的是

08:23.980 --> 08:25.980
接一个接上格式的东西

08:25.980 --> 08:27.980
那如果说你是生产

08:27.980 --> 08:28.980
开发环境的话

08:28.980 --> 08:29.980
那么它可以带一个

08:29.980 --> 08:30.980
可以反回一个对象

08:30.980 --> 08:32.980
它的对象是这个样子

08:32.980 --> 08:34.980
它对象

08:34.980 --> 08:36.980
Message

08:36.980 --> 08:38.980
它把一个信息给力

08:38.980 --> 08:40.980
把一个错误信息给力

08:40.980 --> 08:41.980
大概是可以

08:41.980 --> 08:43.980
在这种格式

08:43.980 --> 08:47.980
如果说你是生产环境

08:47.980 --> 08:48.980
那么它这个时候

08:48.980 --> 08:50.980
它不带错误的详细信息

08:50.980 --> 08:52.980
就这么个意思

08:53.980 --> 08:54.980
那么现在我们说一下

08:54.980 --> 08:55.980
这个插件的配置

08:55.980 --> 08:57.980
因为插件的启用很简单

08:57.980 --> 08:59.980
对吧 在perbugging里边

08:59.980 --> 09:00.980
在这里

09:00.980 --> 09:01.980
那就可以启用

09:01.980 --> 09:03.980
然后插件的配置

09:03.980 --> 09:06.980
我们在这里配置的是Unlair

09:06.980 --> 09:08.980
那么这边有个对象

09:08.980 --> 09:09.980
把它复制一下

09:09.980 --> 09:10.980
给它看一下

09:10.980 --> 09:15.700
Coffee

09:15.700 --> 09:17.700
配置错误处理

09:18.700 --> 09:19.700
我们一个说一下

09:19.700 --> 09:21.700
第一个Aerial配置Url

09:21.700 --> 09:23.700
表示什么意思呢

09:23.700 --> 09:24.700
表示的是

09:24.700 --> 09:25.700
这个如果说发生错误

09:25.700 --> 09:27.700
它重定向到另外一个地址

09:27.700 --> 09:29.700
重定向到另外一个地址

09:29.700 --> 09:30.700
我们再写一下吧

09:30.700 --> 09:32.700
这个地址我们就配置一下路由

09:34.700 --> 09:35.700
配置一下路由

09:35.700 --> 09:37.700
然后我们这里写个Router

09:37.700 --> 09:39.700
或者是写个镜头一枚

09:39.700 --> 09:40.700
还是写路由吗

09:40.700 --> 09:41.700
Gate

09:41.700 --> 09:43.700
如果说Error

09:43.700 --> 09:45.700
那么我就交给

09:45.700 --> 09:48.700
ErrorIndex

09:51.660 --> 09:53.660
ErrorIndex

09:55.660 --> 10:00.250
写了啥玩意

10:01.250 --> 10:05.390
这边我们复制一下吧

10:06.390 --> 10:10.280
这个是

10:11.280 --> 10:12.280
那么这边

10:12.280 --> 10:13.280
一个统一的错误页面

10:13.280 --> 10:14.280
我们直接选择

10:14.280 --> 10:15.280
选择一个模型

10:15.280 --> 10:16.280
试图

10:16.280 --> 10:18.280
试图的话就用Error吧

10:19.280 --> 10:21.280
模型也没有什么模型

10:21.280 --> 10:22.280
没有什么模型

10:22.280 --> 10:23.280
当然如果说

10:23.280 --> 10:24.280
你要传递一些信息的话

10:24.280 --> 10:25.280
就传递过去就行了

10:25.280 --> 10:26.280
就这样吧

10:26.280 --> 10:27.280
好了

10:27.280 --> 10:28.280
然后我们在这边

10:28.280 --> 10:29.280
在那个

10:30.280 --> 10:31.280
在试图里边

10:32.280 --> 10:34.280
新建一个Error

10:34.280 --> 10:35.280
一节试

10:35.280 --> 10:36.280
那么同样的

10:36.280 --> 10:37.280
跟这边一样

10:37.280 --> 10:38.280
这边倒入

10:38.280 --> 10:41.780
这边倒入

10:41.780 --> 10:44.290
中间呢

10:44.290 --> 10:47.290
我们写上一个A

10:47.290 --> 10:50.290
发生了位置

10:50.290 --> 10:52.290
位置错误

10:52.290 --> 10:53.290
当然这个页面

10:53.290 --> 10:54.290
你可以随便一些

10:54.290 --> 10:55.290
你甚至可以加上

10:55.290 --> 10:56.290
一些超链接

10:56.290 --> 10:57.290
然后让它回去

10:57.290 --> 10:58.290
都可以

10:58.290 --> 10:59.290
那么现在呢

10:59.290 --> 11:00.290
我们来试一下

11:00.290 --> 11:01.290
我现在只能启动

11:01.290 --> 11:02.290
那个生产环境

11:03.290 --> 11:07.260
好

11:07.260 --> 11:08.260
现在我们刷新

11:11.260 --> 11:12.260
哦

11:12.260 --> 11:13.260
这里没保存

11:13.260 --> 11:15.260
把这些配置先阻止掉

11:16.260 --> 11:17.260
保存

11:17.260 --> 11:18.260
重新来

11:18.260 --> 11:19.260
停止

11:19.260 --> 11:22.730
生产环境

11:22.730 --> 11:23.730
好了

11:23.730 --> 11:24.730
然后来我们刷新

11:24.730 --> 11:27.100
Error

11:28.100 --> 11:29.100
到Error

11:29.100 --> 11:30.100
它说

11:30.100 --> 11:31.100
重定向的次数过多

11:31.100 --> 11:32.100
什么意思

11:33.100 --> 11:35.100
到Error页面

11:35.100 --> 11:37.100
Error页面

11:37.100 --> 11:38.100
这个页面

11:38.100 --> 11:39.100
它又发生了错误了

11:40.100 --> 11:41.100
这个页面

11:41.100 --> 11:42.100
它又发生了错误了

11:42.100 --> 11:43.100
我看一下

11:45.800 --> 11:46.800
没问题

11:46.800 --> 11:49.560
没问题

11:50.560 --> 11:51.560
我就把这个

11:52.560 --> 11:54.560
把这个上面来取掉

11:54.560 --> 11:55.560
这个取掉

11:55.560 --> 11:56.560
这个取掉

11:56.560 --> 12:01.180
我先这样子

12:01.180 --> 12:03.180
先用开发模式试一下

12:03.180 --> 12:04.180
开发模式试一下

12:04.180 --> 12:06.180
看到问题出来了

12:06.180 --> 12:09.640
加上

12:10.640 --> 12:12.640
Npng

12:20.010 --> 12:21.010
好

12:21.010 --> 12:22.010
这里报错了

12:23.010 --> 12:25.010
它说哪里报错了

12:25.010 --> 12:26.010
哦

12:26.010 --> 12:27.010
这个报错正常的

12:27.010 --> 12:28.010
我们直接跑到Error

12:28.010 --> 12:29.010
为什么会报错

12:32.410 --> 12:33.410
References

12:33.410 --> 12:34.410
Error

12:34.410 --> 12:36.410
Npng

12:36.410 --> 12:38.410
发生了位置错误

12:38.410 --> 12:43.830
好像在重复的渲染了

12:43.830 --> 12:45.830
好像在重复的渲染

12:45.830 --> 12:46.830
我看一下

12:46.830 --> 12:53.240
Error

12:53.240 --> 12:55.240
意见是没问题

12:55.240 --> 12:56.240
你看

12:57.240 --> 12:58.240
请求

12:58.240 --> 13:00.240
路由里边的配置

13:00.240 --> 13:01.240
是

13:04.380 --> 13:05.380
我找一找

13:06.380 --> 13:07.380
访问这个地址

13:07.380 --> 13:08.380
交给Error Index

13:08.380 --> 13:09.380
交给它

13:09.380 --> 13:12.380
那么它这边不用管别的

13:12.380 --> 13:13.380
就直接渲染试图

13:13.380 --> 13:14.380
Error

13:14.380 --> 13:16.380
给它的模型是一个空模型

13:16.380 --> 13:17.380
什么都没有

13:17.380 --> 13:18.380
不用给它任何模型

13:19.380 --> 13:20.380
然后呢

13:20.380 --> 13:22.380
就渲染到这个试图

13:22.380 --> 13:23.380
这个试图里边

13:23.380 --> 13:25.380
它要渲染这个东西

13:25.380 --> 13:26.380
这个东西

13:26.380 --> 13:28.380
它的就是黑道里边

13:28.380 --> 13:30.380
它要得到GlobeTitle

13:30.380 --> 13:31.380
还有Title

13:31.380 --> 13:33.380
这两个东西

13:33.380 --> 13:34.380
这两个东西

13:34.380 --> 13:35.380
我这里有吗

13:36.380 --> 13:37.380
我这里有提供吗

13:37.380 --> 13:38.380
这里没有提供

13:39.380 --> 13:40.380
但是

13:41.380 --> 13:43.380
我得给一个Title是吧

13:43.380 --> 13:47.660
Title没有

13:47.660 --> 13:48.660
错误页

13:50.660 --> 13:51.660
GlobeTitle我们已经订了的

13:51.660 --> 13:52.660
对不对

13:52.660 --> 13:53.660
好

13:53.660 --> 13:54.660
刷新

13:54.660 --> 13:55.660
OK

13:55.660 --> 13:56.660
好了

13:56.660 --> 13:57.660
那么现在我们再启动

13:57.660 --> 13:58.660
启动才能看

13:58.660 --> 13:59.660
正常环境

13:59.660 --> 14:02.420
Start

14:06.200 --> 14:07.200
现在给你们看

14:07.200 --> 14:08.200
像我们访问首页

14:08.200 --> 14:09.200
首页有个错误

14:09.200 --> 14:11.200
它就会重力向到这个Error

14:11.200 --> 14:12.200
就会重力向到这个地址

14:12.200 --> 14:13.200
当然开发模式它不会

14:13.200 --> 14:14.200
开发模式它有错误的话

14:16.200 --> 14:17.200
开发模式有错误的话

14:17.200 --> 14:19.200
它并不会有这个操作

14:19.200 --> 14:20.200
总之这是个错误处理

14:20.200 --> 14:22.200
你自己去设置就行

14:22.200 --> 14:24.200
然后这里边还有一些

14:25.200 --> 14:26.200
配置

14:26.200 --> 14:28.200
这里边还有一些配置

14:29.200 --> 14:32.150
就这些东西

14:32.150 --> 14:33.150
一个个一个的函数

14:34.150 --> 14:35.150
也就是说

14:35.150 --> 14:36.150
如果说你不希望

14:36.150 --> 14:37.150
它这种默认的处理方式

14:37.150 --> 14:38.150
你想自定义

14:38.150 --> 14:39.150
写些代码

14:39.150 --> 14:40.150
那怎么办

14:40.150 --> 14:42.150
你不用去写

14:42.150 --> 14:43.150
App.on

14:43.150 --> 14:44.150
不用去配置

14:44.150 --> 14:45.150
这个Error时间

14:45.150 --> 14:47.150
那么你自动会给你

14:47.150 --> 14:48.150
交给这些函数来处理

14:48.150 --> 14:50.150
你把这些函数写上就行了

14:50.150 --> 14:51.150
第一个函数是

14:52.150 --> 14:54.150
这个函数就是任何错误

14:54.150 --> 14:55.150
只要有错误来了

14:55.150 --> 14:57.150
那么我就把Error给力

14:57.150 --> 14:58.150
把context给力

14:58.150 --> 15:00.150
它就相当于是这个玩意儿

15:00.150 --> 15:02.150
就相当于是在这里边写上

15:02.150 --> 15:03.150
App.on

15:03.150 --> 15:04.150
相当于是写上

15:04.150 --> 15:05.150
App.on

15:05.150 --> 15:06.150
Error

15:06.150 --> 15:07.150
然后这里

15:07.150 --> 15:08.150
Error

15:08.150 --> 15:09.150
context

15:09.150 --> 15:10.150
就相当于是这个玩意儿

15:10.150 --> 15:11.150
你要的意思

15:12.150 --> 15:13.150
这是

15:13.150 --> 15:14.150
意思是

15:14.150 --> 15:15.150
后面的配置就失效了

15:15.150 --> 15:16.150
就失效了

15:16.150 --> 15:17.150
那么同样的

15:17.150 --> 15:18.150
这个东西也会失效

15:18.150 --> 15:19.150
这是Error

15:20.150 --> 15:21.150
然后

15:21.150 --> 15:22.150
这个atm

15:22.150 --> 15:23.150
这什么意思呢

15:23.150 --> 15:24.150
这个表示的是

15:24.150 --> 15:26.150
如果说用户请求的是页面

15:26.150 --> 15:28.150
它处理过程中出了错

15:28.150 --> 15:30.150
它会给你运行这个函数

15:30.150 --> 15:31.150
那么这个函数要怎么处理

15:31.150 --> 15:32.150
随便你

15:33.150 --> 15:35.150
接上了就顾名思义

15:35.150 --> 15:36.150
如果说用户请求的是

15:36.150 --> 15:37.150
我需要获取一个接口

15:37.150 --> 15:39.150
而且可是请求过来的

15:39.150 --> 15:40.150
那么这个时候

15:40.150 --> 15:41.150
它发生了错误

15:41.150 --> 15:42.150
还会运行这个函数

15:42.150 --> 15:43.150
就这么有意思

15:43.150 --> 15:44.150
你可以自定义

15:44.150 --> 15:45.150
一般来说

15:45.150 --> 15:46.150
如果说我们做担严应用程序的话

15:46.150 --> 15:47.150
这个网上一般

15:48.150 --> 15:49.150
自定义

15:49.150 --> 15:50.150
就是我们的body

15:50.150 --> 15:52.150
设成一个统一的格式

15:52.150 --> 15:53.150
这样的意思吧

15:53.150 --> 15:54.150
好

15:54.150 --> 15:55.150
这是关于

15:55.150 --> 15:57.150
这里错误处理

15:58.150 --> 16:00.150
最后让我们说一下404吧

16:00.150 --> 16:01.150
因为这个404

16:01.150 --> 16:02.150
按理说

16:02.150 --> 16:03.150
它并不是一个错误

16:03.150 --> 16:04.150
它并不是一个错误

16:04.150 --> 16:05.150
它找不到页面

16:05.150 --> 16:07.150
找不到它不是一个错误

16:07.150 --> 16:08.150
那么这个时候

16:08.150 --> 16:09.150
从逻辑上来说

16:09.150 --> 16:11.150
Egg还没有把它当成一个错误

16:11.150 --> 16:12.150
于是

16:12.150 --> 16:14.150
框架它不会把它当成

16:14.150 --> 16:15.150
异常处理

16:15.150 --> 16:16.150
它跟异常处理没有关系

16:16.150 --> 16:17.150
但是有的时候

16:17.150 --> 16:19.150
我们可能需要

16:19.150 --> 16:21.150
去调整到一个页面

16:21.150 --> 16:22.150
可能会做一些处理

16:22.150 --> 16:23.150
那怎么办呢

16:23.150 --> 16:24.150
它是这样子

16:24.150 --> 16:25.150
如果你

16:25.150 --> 16:27.150
响应了一个404状态

16:27.150 --> 16:28.150
因为我知道

16:28.150 --> 16:29.150
KOA默认的状态

16:29.150 --> 16:30.150
是不是404

16:30.150 --> 16:32.150
当你给body复制的时候

16:32.150 --> 16:34.150
所以就不再是404了

16:34.150 --> 16:36.150
最后就不给你改过来了

16:36.150 --> 16:37.150
那么这个时候

16:37.150 --> 16:39.150
如果说你没有给予响应题

16:39.150 --> 16:40.150
那么就默认404

16:40.150 --> 16:42.150
但是有的时候

16:42.150 --> 16:43.150
设置的404

16:43.150 --> 16:44.150
同时就给予了响应题

16:44.150 --> 16:45.150
什么情况呢

16:45.150 --> 16:46.150
比如说

16:46.150 --> 16:47.150
我就要给它404

16:47.150 --> 16:49.150
我就要手动给它404

16:49.150 --> 16:51.150
比方说随便找一个吧

16:51.150 --> 16:54.590
随便找一个

16:54.590 --> 16:55.590
比方说的Home里面

16:55.590 --> 16:56.590
我就不这样来了

16:56.590 --> 16:57.590
我就

16:57.590 --> 16:59.590
就要给你404

16:59.590 --> 17:00.590
this context

17:00.590 --> 17:01.590
Status

17:01.590 --> 17:03.590
我给你404

17:03.590 --> 17:04.590
然后我还是要

17:04.590 --> 17:05.590
给你设置响应题

17:05.590 --> 17:06.590
可不可以呢

17:06.590 --> 17:08.590
当然可以

17:08.590 --> 17:12.990
比方说

17:12.990 --> 17:13.990
这边

17:13.990 --> 17:14.990
所以

17:14.990 --> 17:16.990
这就没问题的

17:16.990 --> 17:18.990
一看着

17:18.990 --> 17:20.990
它是404

17:20.990 --> 17:21.990
对吧

17:21.990 --> 17:23.990
这种情况

17:23.990 --> 17:24.990
就是如果说

17:24.990 --> 17:25.990
你设置的404

17:25.990 --> 17:27.990
又没有设置响应题

17:27.990 --> 17:28.990
那么这个时候

17:28.990 --> 17:30.990
A个他会自动给予响应题

17:30.990 --> 17:31.990
他的方式是什么呢

17:31.990 --> 17:33.990
他的方式是

17:33.990 --> 17:34.990
如果说

17:34.990 --> 17:35.990
他认为你要想

17:35.990 --> 17:36.990
接受的是节省

17:36.990 --> 17:39.990
他就会给你一个message

17:39.990 --> 17:41.990
如果说他想给予的是

17:41.990 --> 17:42.990
你想得到的是

17:42.990 --> 17:43.990
请求的是一页面

17:43.990 --> 17:44.990
像浏览器里面

17:44.990 --> 17:45.990
请求的是一页面

17:45.990 --> 17:46.990
那么这个时候

17:46.990 --> 17:47.990
他会给你一段

17:47.990 --> 17:48.990
给这么一份

17:48.990 --> 17:50.990
就这么简单

17:50.990 --> 17:51.990
他会默认给你

17:51.990 --> 17:52.990
填充一个响应题

17:52.990 --> 17:53.990
比方说

17:53.990 --> 17:54.990
就个例子

17:54.990 --> 17:55.990
我们这里

17:55.990 --> 17:57.990
访问一个不存在的地址

17:57.990 --> 17:58.990
你看

17:58.990 --> 18:00.990
看元旦吧

18:00.990 --> 18:02.990
就是个H

18:02.990 --> 18:03.990
就是个玩意

18:03.990 --> 18:04.990
另外的意思

18:04.990 --> 18:05.990
他又给你

18:05.990 --> 18:06.990
填充一个响应题

18:06.990 --> 18:07.990
其他没啥了

18:07.990 --> 18:08.990
那么

18:08.990 --> 18:09.990
如果说

18:09.990 --> 18:10.990
你要自定义一个页面

18:10.990 --> 18:11.990
比如说

18:11.990 --> 18:12.990
要重新一下

18:12.990 --> 18:13.990
那么这个时候

18:13.990 --> 18:14.990
你配置这个玩意

18:14.990 --> 18:15.990
他会重新下来

18:15.990 --> 18:16.990
另外一个地址

18:16.990 --> 18:17.990
比方说

18:17.990 --> 18:19.990
咱们在这里配置一下

18:19.990 --> 18:21.990
这些东西都很简单

18:21.990 --> 18:22.990
体会一下

18:22.990 --> 18:23.990
他的处理

18:23.990 --> 18:24.990
模式就行了

18:24.990 --> 18:25.990
配置一个404

18:25.990 --> 18:26.990
那么我们这里怎么写呢

18:26.990 --> 18:28.990
我这里是不是又要写一个

18:28.990 --> 18:29.990
写一个

18:29.990 --> 18:30.990
写一个

18:30.990 --> 18:32.990
柔杆里面

18:32.990 --> 18:34.990
加上一个s

18:34.990 --> 18:36.990
404

18:36.990 --> 18:37.990
那么这里呢

18:38.990 --> 18:39.990
那么这里呢

18:49.390 --> 18:50.390
那么这边呢

18:50.390 --> 18:51.390
我们就宣扬吧

18:54.390 --> 18:56.390
宣扬一个404

18:56.390 --> 18:58.390
标题

18:58.390 --> 19:02.980
页面找不到

19:02.980 --> 19:04.980
后来找不到资源

19:04.980 --> 19:06.980
那么这边呢

19:06.980 --> 19:07.980
加一个

19:09.980 --> 19:10.980
这边

19:11.980 --> 19:13.980
这边写的是404

19:13.980 --> 19:14.980
那边

19:14.980 --> 19:18.420
这边复制一下

19:18.420 --> 19:20.420
找不到颜面

19:22.420 --> 19:23.420
好

19:23.420 --> 19:24.420
那么现在我们来看一下

19:24.420 --> 19:25.420
小心

19:25.420 --> 19:26.420
是不是找到没有颜面

19:26.420 --> 19:27.420
调整到这个地址了

19:27.420 --> 19:29.420
就这么意思

19:29.420 --> 19:30.420
这是关于404的处理

19:30.420 --> 19:31.420
其他就没了

19:31.420 --> 19:32.420
我就说一下

19:32.420 --> 19:33.420
它的异常处理模式

19:33.420 --> 19:34.420
那么主要的点呢

19:34.420 --> 19:35.420
不是说

19:35.420 --> 19:36.420
怎么用其API

19:36.420 --> 19:37.420
一点都不重要

19:37.420 --> 19:38.420
我讲完就忘了

19:38.420 --> 19:39.420
重点是什么

19:39.420 --> 19:40.420
重点是

19:40.420 --> 19:41.420
你要去体会

19:41.420 --> 19:42.420
它这种处理

19:42.420 --> 19:44.420
你能想到这种处理方式吗

19:44.420 --> 19:45.420
对吧

19:45.420 --> 19:46.420
用这种方式来做配置

19:46.420 --> 19:47.420
用这种配置呢

19:47.420 --> 19:50.420
影响不同环境里边的行为

19:50.420 --> 19:51.420
对吧

19:51.420 --> 19:52.420
你能想到吗

19:52.420 --> 19:53.420
这是一种非常优雅的方式

19:53.420 --> 19:54.420
可以学习一下

19:54.420 --> 19:55.420
所以说后端呢

19:55.420 --> 19:56.420
这个街市呢

19:56.420 --> 19:58.420
其实就是讲的后端的东西了

19:58.420 --> 19:59.420
你可以发现

19:59.420 --> 20:01.420
后端遇到的问题

20:01.420 --> 20:02.420
要面对的一些

20:02.420 --> 20:03.420
各种处理的

20:03.420 --> 20:04.420
还是蛮多的

