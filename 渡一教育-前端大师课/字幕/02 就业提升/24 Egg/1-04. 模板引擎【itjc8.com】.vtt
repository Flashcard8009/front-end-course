WEBVTT

00:00.620 --> 00:05.260
你们将来在公司里面使用一个解释

00:05.260 --> 00:07.080
如果说使用一个解释

00:07.080 --> 00:10.060
一般来说是作为中间服务器

00:10.060 --> 00:13.820
跟我们之前使用Express以及KoA

00:13.820 --> 00:16.260
他们都是会作为中间服务器

00:16.260 --> 00:19.820
一般来说不会让你直接写什么业务逻辑

00:19.820 --> 00:21.660
比如什么呢 登陆注册

00:21.660 --> 00:23.820
这些都是属于业务逻辑

00:23.820 --> 00:27.460
包括发布一篇文章 发布一篇博客

00:27.460 --> 00:29.500
获取博客 获取文章

00:29.980 --> 00:31.740
发布一件商品等等等等

00:31.740 --> 00:34.180
这些都是属于业务逻辑

00:34.180 --> 00:35.420
你们一般不会去写

00:35.420 --> 00:39.140
因为一般会有传统的后端来负责业务逻辑

00:39.140 --> 00:42.260
然后给你提供一个接口 让你去调用

00:42.260 --> 00:44.460
而我们的写中间服务器

00:44.460 --> 00:47.940
它就有很多很多灵活的场景

00:47.940 --> 00:50.860
其中有两种场景大家需要知道

00:50.860 --> 00:52.940
所以其实我以前也讲过

00:52.940 --> 00:55.340
这里我把它再明确一下

00:55.340 --> 00:57.100
第一个场景就是

00:57.140 --> 01:00.780
你这个中间服务器是用于替代后端服务器

01:00.780 --> 01:03.460
拖拌静态资源什么GS啊 CSS啊

01:03.460 --> 01:05.900
当然这东西也可以放到CTN上去

01:05.900 --> 01:07.340
拖拌一些静态资源

01:07.340 --> 01:09.580
一些图片等等等等

01:09.580 --> 01:10.540
还有做什么呢

01:10.540 --> 01:13.820
还有就是动态渲染页面

01:13.820 --> 01:15.580
什么叫动态渲染页面

01:15.580 --> 01:19.220
就是我们比方说访问一个通过一个URL地址

01:19.220 --> 01:21.420
拿到的就是一个完整的页面

01:21.420 --> 01:23.860
那么这个东西跟静态页面有什么区别呢

01:23.860 --> 01:26.260
静态页面比方说我们用单页应用程序做得出来的

01:26.300 --> 01:27.260
是不是只有一个页面

01:27.260 --> 01:27.660
对吧

01:27.660 --> 01:28.860
那个页面就是一个静态页面

01:28.860 --> 01:31.820
静态页面里边就有一个DIV ID为APP

01:31.820 --> 01:32.820
就这么个回事

01:32.820 --> 01:33.860
那动态页面不一样

01:33.860 --> 01:38.300
动态页面的比方我们随便访问一个网站

01:38.300 --> 01:41.140
比方德某

01:41.140 --> 01:42.340
我们点击优先啊

01:42.340 --> 01:44.500
查看网页元代嘛

01:44.500 --> 01:45.100
你看

01:45.100 --> 01:48.540
是不是网站的数据就直接从服务器给我了

01:48.540 --> 01:48.780
对吧

01:48.780 --> 01:51.220
在服务器那边组装好整个页面

01:51.220 --> 01:52.540
然后直接发送到客户端

01:52.540 --> 01:53.740
这就是动态页面

01:53.740 --> 01:55.060
宣传出来的页面

01:55.060 --> 01:57.300
这也叫做服务端宣传

01:57.340 --> 01:59.300
你们之前学过那个

01:59.300 --> 02:00.700
Vue SSR

02:00.700 --> 02:02.060
以及Rex SSR

02:02.060 --> 02:02.460
对吧

02:02.460 --> 02:04.140
这两个东西就是做动态宣传的

02:04.140 --> 02:05.300
就是我服务端宣传的

02:06.780 --> 02:07.140
然后呢

02:07.140 --> 02:08.380
有没有还要做什么呢

02:08.380 --> 02:10.220
有可能你的这个中间服务器呢

02:10.220 --> 02:12.300
还要提供一些少量的API

02:12.300 --> 02:13.700
比方说这个网页里边

02:13.700 --> 02:15.300
你给我那个网页的网页里边

02:15.300 --> 02:18.300
可能会用阿迦克斯来去访问一些动态的

02:18.300 --> 02:19.420
一些API啊

02:19.420 --> 02:20.420
也会提供

02:20.420 --> 02:23.460
这就是最传统的开发模式啊

02:23.460 --> 02:24.820
非常非常传统

02:24.860 --> 02:25.780
以前呢

02:28.020 --> 02:30.500
在前端星期之前

02:30.500 --> 02:31.220
这些事呢

02:31.220 --> 02:33.460
全是由后端服务器做的

02:33.460 --> 02:34.020
后端服务器

02:34.020 --> 02:36.020
他不是提供业务数据API

02:36.020 --> 02:37.460
就他就提供这么一些功能

02:37.460 --> 02:38.660
脱贯静态资源

02:38.660 --> 02:40.180
动态宣传页面

02:40.180 --> 02:41.300
服务端宣传

02:41.300 --> 02:43.260
然后提供少量的API访问

02:43.260 --> 02:46.180
以前后端服务器做这么一件事

02:46.180 --> 02:48.460
但是现在有了专业的前端之后呢

02:48.460 --> 02:49.300
这些事情呢

02:49.300 --> 02:51.900
可能会交给前端来处理

02:51.900 --> 02:52.980
后端服务器

02:53.020 --> 02:54.780
就用加把写代码的人

02:54.780 --> 02:56.580
他只会提供一些业务的API

02:56.580 --> 02:57.860
比方请求一个接口

02:57.860 --> 02:58.900
用Gate方法

02:58.900 --> 02:59.900
用Pose方法

02:59.900 --> 03:01.660
或者用PoseDate方法啊

03:01.660 --> 03:03.780
去操作这些业务数据

03:03.780 --> 03:04.260
然后呢

03:04.260 --> 03:06.580
凡是所有的跟

03:06.580 --> 03:08.660
前端就跟用户打交道的

03:08.660 --> 03:09.780
包括服务器

03:09.780 --> 03:12.060
那么都让前端开发者来做

03:12.060 --> 03:14.060
客户端这边你要写些也是

03:14.060 --> 03:14.620
然后呢

03:14.620 --> 03:16.020
你的中间服务器里边呢

03:16.020 --> 03:17.060
也要写一些代码

03:17.060 --> 03:19.020
脱贯静态资源

03:19.020 --> 03:21.420
然后动态业面就服务端宣传

03:21.460 --> 03:23.020
还有一些提供少量的API

03:24.060 --> 03:25.180
我们下节课吧

03:25.180 --> 03:27.220
下节课给大家举个完整的例子

03:27.220 --> 03:28.540
让大家认识清楚这一点

03:29.300 --> 03:30.860
这是第一种场景

03:30.860 --> 03:32.580
这种场景下边的会不会用到什么

03:32.580 --> 03:33.140
5u啊

03:33.140 --> 03:33.820
reacts呢

03:33.820 --> 03:34.780
会不会呢

03:34.780 --> 03:35.780
一般不会啊

03:35.780 --> 03:36.820
一般不会

03:36.820 --> 03:38.540
那可不可以用了也可以啊

03:38.540 --> 03:39.300
那要结合起来

03:39.300 --> 03:42.180
我觉得场景特别特别灵活啊

03:42.180 --> 03:44.140
所以说为什么给大家讲课的时候

03:44.140 --> 03:46.420
翻来覆去说这些原理

03:46.420 --> 03:47.700
就是希望呢

03:47.700 --> 03:49.420
你在公司里面遇到各种场景的

03:49.420 --> 03:50.700
你都能够灵活处理

03:51.620 --> 03:55.620
我刚刚给大家总结的是两个常见场景

03:55.620 --> 03:59.500
那么这种情况跟5u啊reacts就没有什么关系的

03:59.500 --> 04:01.340
第二种场景呢

04:01.340 --> 04:02.820
就是单业应用程序

04:03.660 --> 04:06.580
利用5u reacts写好了一个单业应用程序

04:06.580 --> 04:08.860
那么只有一个业面对不对

04:08.860 --> 04:10.700
那我们的中间服务器提供什么呢

04:10.700 --> 04:12.100
就是单业应用程序的资源

04:12.100 --> 04:14.740
就是5u啊reacts生成的这些静态业面啊

04:14.740 --> 04:16.620
GS啊CSS啊

04:16.620 --> 04:18.260
一国老的扔到服务器上去

04:18.260 --> 04:19.060
来托管

04:19.060 --> 04:20.700
那么我们访问某一个地址的话

04:20.740 --> 04:21.700
给我们这个业面

04:22.420 --> 04:23.980
然后由于是前后端翻

04:23.980 --> 04:25.180
你这些GS呢

04:25.180 --> 04:26.460
是在客户端执行的

04:26.460 --> 04:27.980
客户端执行的过程中呢

04:27.980 --> 04:29.620
他可能会用到一些数据

04:29.620 --> 04:29.900
好

04:29.900 --> 04:32.060
那么可以请求中间服务器

04:32.060 --> 04:32.660
中间服务器呢

04:32.660 --> 04:34.020
他就提供一个代理功了

04:34.020 --> 04:35.420
这个代理功能呢

04:35.420 --> 04:36.820
他就可以访问后端服务器

04:36.820 --> 04:37.740
去拿这个数据

04:38.740 --> 04:39.980
那么我们这里的中间服务器

04:39.980 --> 04:41.620
可以看到这里边花了一个数据库

04:41.620 --> 04:42.140
对吧

04:42.140 --> 04:43.740
那么这个数据库是什么意思呢

04:43.740 --> 04:44.820
也后端也有数据库

04:44.820 --> 04:45.780
后端的数据库呢

04:45.780 --> 04:47.020
存在的是业务数据

04:47.500 --> 04:49.660
那么中间服务器一般存什么的

04:49.660 --> 04:51.180
一般存比方说什么

04:51.180 --> 04:53.300
上传了一些文件啊等等的吧

04:53.300 --> 04:54.540
跟前端打交道的

04:54.540 --> 04:57.700
跟业面直接打交道的一些资源

04:57.700 --> 04:58.900
上传的文件啊

04:58.900 --> 05:00.500
上传的图片啊

05:00.500 --> 05:03.340
比方说请求的日字啊

05:03.340 --> 05:05.100
再比方说一些session啊

05:05.100 --> 05:05.300
对吧

05:05.300 --> 05:07.500
我们可以把记住记住到Redis里边去

05:07.500 --> 05:09.100
做一些缓存啊等等的

05:09.100 --> 05:10.700
可能会用到一些数据库

05:10.700 --> 05:12.620
他一般不存业不数据

05:12.620 --> 05:13.820
明儿的意思吧

05:13.820 --> 05:14.060
好

05:14.060 --> 05:15.140
这是中间服务器啊

05:15.220 --> 05:17.540
中间服务器的职能是非常非常灵活的

05:17.540 --> 05:18.900
不要把它记死了

05:18.900 --> 05:21.180
但是我们常见的场景就这么两个

05:21.180 --> 05:22.060
那么这两个场景呢

05:22.060 --> 05:24.780
我在这门客里边都会举相应的例子

05:24.780 --> 05:25.860
来给大家说明啊

05:25.860 --> 05:28.260
具体是怎么去做的

05:28.260 --> 05:29.460
我们周杰克说什么呢

05:29.460 --> 05:31.740
周杰克要讲一个东西叫做模板引擎

05:31.740 --> 05:32.980
因为第一种场景

05:32.980 --> 05:34.180
在第一种场景里边

05:34.180 --> 05:35.940
他就会使用的模板引擎啊

05:35.940 --> 05:37.220
就是服务端渲染

05:37.220 --> 05:38.380
但是有些人说服务端渲染

05:38.380 --> 05:41.300
我不能用VueSSR吗

05:41.300 --> 05:43.500
我不能用RexSSR吗

05:43.580 --> 05:44.180
可不可以用呢

05:44.180 --> 05:45.740
当然可以用

05:45.740 --> 05:48.540
就是说如果说你不用VueSSR

05:48.540 --> 05:49.340
不用RexSSR

05:49.340 --> 05:50.900
什么情况下可以不用

05:50.900 --> 05:52.740
如果说你这个页面特别特别简单

05:52.740 --> 05:55.820
就使那个页面东西也不多

05:55.820 --> 05:58.420
你用不到了VueSSR

05:58.420 --> 06:01.700
这么的这种量级的东西

06:01.700 --> 06:03.180
但能不能用也可以用

06:03.180 --> 06:05.940
就是如果说你拖你的VueSSR

06:05.940 --> 06:08.020
那么如果说你用传统的方式

06:08.020 --> 06:09.060
去做页面的话

06:09.060 --> 06:09.980
应该去怎么做

06:09.980 --> 06:10.580
我把这个强

06:10.580 --> 06:11.180
所以说为什么说

06:11.180 --> 06:13.020
这门客是一个玄修呢

06:13.020 --> 06:15.660
因为现在毕竟用VueSSR和RexSSR多一点

06:15.660 --> 06:16.860
如果说用传统的方式

06:16.860 --> 06:17.540
该怎么去做呢

06:17.540 --> 06:18.660
不过你学习这个东西呢

06:18.660 --> 06:22.100
也能够帮你理清楚服务端技术的

06:22.100 --> 06:23.860
一些核心原理

06:23.860 --> 06:25.900
那么我们如果说传统的方式呢

06:25.900 --> 06:27.580
我们就需要使用模板引擎了

06:27.580 --> 06:29.660
以前在咱们讲的Load接试的时候

06:29.660 --> 06:31.180
不是讲过一个模板引擎吗

06:31.180 --> 06:32.860
叫做EGS

06:32.860 --> 06:35.020
那节课是一个选修课

06:35.020 --> 06:36.180
是一个扩展课程

06:36.180 --> 06:38.180
那么大家要学习这节课

06:38.180 --> 06:39.700
需要把这几课看一下

06:39.700 --> 06:41.740
可以翻一翻那个目录看一下

06:41.780 --> 06:43.500
那么我这里就假设得已经学过了

06:43.500 --> 06:44.820
一节试模板引擎

06:44.820 --> 06:46.620
那么我们就看一下在EGS中

06:46.620 --> 06:48.060
如何来使用模板引擎

06:48.060 --> 06:50.300
所谓模板引擎就是一个字幕刷

06:50.300 --> 06:52.900
它能够把一个字幕刷和一个对象

06:52.900 --> 06:54.540
渲染成一个新的字幕刷

06:54.540 --> 06:55.980
比方说这个例子

06:55.980 --> 06:57.020
它能把一个字幕刷

06:57.020 --> 06:58.900
字幕刷是什么

06:58.900 --> 06:59.740
比方说字幕刷是这个

07:03.100 --> 07:03.500
说什么呢

07:03.500 --> 07:08.030
是这个Lin

07:08.030 --> 07:08.910
比方说这里

07:11.190 --> 07:14.140
EG

07:14.140 --> 07:15.100
这是字幕刷

07:15.100 --> 07:16.540
然后数据

07:16.540 --> 07:18.260
数据你给它一个对象

07:18.260 --> 07:19.260
对象里面一个属性

07:19.260 --> 07:20.180
Lin

07:20.180 --> 07:22.500
等于成功

07:24.780 --> 07:26.060
那么它就渲染的结果

07:26.060 --> 07:26.900
就是返回

07:26.900 --> 07:27.780
它返回什么呢

07:27.780 --> 07:32.620
返回的是这么一个东西

07:32.620 --> 07:32.980
对吧

07:32.980 --> 07:34.420
这就是一个模板引擎

07:34.420 --> 07:35.340
实际上说白了

07:35.340 --> 07:37.380
伍继尔这个东西不就是一个模板引擎吗

07:37.380 --> 07:37.740
对吧

07:37.740 --> 07:39.020
它叫Master Catch

07:39.020 --> 07:40.380
Master Edge

07:40.380 --> 07:41.380
模板引擎

07:41.380 --> 07:44.860
叫做Master Catch

07:44.860 --> 07:46.740
这个单词的名字好像是

07:46.900 --> 07:48.060
胡须的意思

07:48.060 --> 07:49.580
胡子的意思

07:49.580 --> 07:50.660
就这么一个模板引擎

07:50.660 --> 07:53.100
那么我们平时在服务器端宣党的时候

07:53.100 --> 07:54.260
用EG-S

07:54.260 --> 07:56.420
用的相对比较多一点

07:56.420 --> 07:58.220
那么在EG-S里边

07:58.220 --> 08:00.060
它也支持模板引擎

08:00.060 --> 08:01.020
而且他们的支持

08:01.020 --> 08:02.260
是要满足它的约束的

08:02.260 --> 08:03.660
因为我们知道EG它是什么

08:03.660 --> 08:06.140
它就是搭在一套规范上面

08:06.140 --> 08:06.900
搭到一个东西

08:06.900 --> 08:07.660
搭到一个框架

08:07.660 --> 08:08.220
对吧

08:08.220 --> 08:10.820
所以说在EG里边使用模板引擎的时候

08:10.820 --> 08:13.100
要满足一些约束

08:13.100 --> 08:15.060
满足一些框架的规范

08:15.060 --> 08:15.700
我们来看一下

08:15.700 --> 08:18.460
这个EG怎么如何来使用模板引擎

08:18.460 --> 08:20.660
如果说你要用传统的方式来进行服装宣展

08:20.660 --> 08:22.420
就需要用到模板引擎

08:22.420 --> 08:23.980
EG里边它有个插件

08:23.980 --> 08:25.100
它已经类制了

08:25.100 --> 08:26.420
你不需要去安装它

08:26.420 --> 08:28.100
叫做EG-VU

08:28.100 --> 08:28.820
什么意思

08:28.820 --> 08:32.940
就是用于处理模板引擎的这么一个插件

08:32.940 --> 08:35.220
它本身并不是模板引擎

08:35.220 --> 08:36.740
它不能做这件事情

08:36.740 --> 08:37.860
它并不能做

08:37.860 --> 08:39.340
它是能够做什么呢

08:39.340 --> 08:41.620
它是对不同的其他的

08:41.620 --> 08:42.700
你安装的模板引擎

08:42.700 --> 08:43.820
做统一的配置

08:43.820 --> 08:44.780
统一的处理

08:44.860 --> 08:46.340
它主要是做这么一个件事

08:46.340 --> 08:48.460
比方说你在工程里边

08:48.460 --> 08:50.380
你要使用EG-S

08:50.380 --> 08:51.220
那么就告诉它

08:51.220 --> 08:52.260
告诉这个EG-VU

08:52.260 --> 08:54.020
我要使用EG-S的模板引擎

08:54.020 --> 08:55.220
你帮我处理一下

08:55.220 --> 08:56.420
它就帮你处理

08:56.420 --> 08:57.780
比方说你要在工程里边

08:57.780 --> 08:58.940
使用别的模板引擎

08:58.940 --> 08:59.700
你可以告诉它

08:59.700 --> 09:01.740
它的官方网站在这

09:01.740 --> 09:02.940
这是简单介绍一下

09:02.940 --> 09:03.940
它里边类制一个插件

09:03.940 --> 09:05.060
EG-VU

09:05.060 --> 09:05.660
那么第一步

09:05.660 --> 09:07.100
我们要使用模板引擎的第一步

09:07.100 --> 09:09.580
那就你要选择一个模板引擎

09:09.580 --> 09:11.340
有的时候可能工程比较复杂

09:11.340 --> 09:12.980
可能还有一些别的原因

09:13.020 --> 09:15.220
可能你在工程里边

09:15.220 --> 09:17.460
可以使用多种模板引擎

09:17.460 --> 09:18.300
穿插着用

09:18.300 --> 09:18.820
可不可以呢

09:18.820 --> 09:19.180
也可以

09:19.180 --> 09:20.500
但是这种情况很少见

09:21.780 --> 09:22.540
有没有这种可能呢

09:22.540 --> 09:23.060
有

09:23.060 --> 09:25.020
比方说你们几个开发者

09:25.020 --> 09:27.100
一起协同开发一个引擎程序

09:27.100 --> 09:28.900
你比较熟悉EG-S

09:28.900 --> 09:31.300
而别人比较熟悉NANJUMS

09:31.300 --> 09:33.100
这也是个模板引擎

09:33.100 --> 09:34.420
它可能会用这个

09:34.420 --> 09:35.460
你可能会用这个

09:35.460 --> 09:37.060
大家一起来协同工作

09:37.060 --> 09:37.540
可不可以呢

09:37.540 --> 09:38.140
可以的

09:38.140 --> 09:39.300
可以的

09:39.300 --> 09:40.340
EG-VU

09:40.340 --> 09:41.940
它是支持多种模板引擎

09:41.940 --> 09:42.940
一起来使用的

09:42.940 --> 09:43.740
以后就知道了

09:43.740 --> 09:45.340
它们可以去配置一下就行了

09:45.340 --> 09:47.860
我们这里的当然只需要使用一种

09:47.860 --> 09:50.500
我们就安装这个EG-VU EG-S

09:50.500 --> 09:51.620
官方的文档里面

09:51.620 --> 09:52.620
它用的是这个模板引擎

09:52.620 --> 09:53.220
不过无所谓

09:53.220 --> 09:54.260
这个模板引擎

09:54.260 --> 09:55.420
你可以有兴趣的话

09:55.420 --> 09:57.220
可以看一下官方的文档

09:57.220 --> 09:59.100
模板引擎随便选一个就行了

09:59.100 --> 10:01.380
那比方说我们这里就用这个EG-S

10:01.380 --> 10:03.700
它也是一个EG-S插件

10:03.700 --> 10:04.500
你安装它的时候

10:04.500 --> 10:06.580
来安装EG-VU EG-S

10:06.580 --> 10:07.060
来吧

10:07.060 --> 10:07.460
我们安装

10:11.940 --> 10:16.820
安装你需要用到的模板引擎EG-VU EG-S

10:16.820 --> 10:18.620
安装它

10:18.620 --> 10:20.140
安装好了之后呢

10:20.140 --> 10:21.220
第二步

10:21.220 --> 10:22.380
因为我知道它是个插件

10:22.380 --> 10:23.180
它是个EG-S插件

10:23.180 --> 10:24.340
你是不是要启用插件

10:24.340 --> 10:25.580
是不是讲过了

10:25.580 --> 10:27.940
你在这里的是不是要新建一个plugging

10:27.940 --> 10:29.900
plugging.js

10:29.900 --> 10:33.920
然后来这边

10:33.920 --> 10:34.800
.js

10:34.800 --> 10:37.320
然后这边是不是要导出一个配置

10:37.320 --> 10:38.880
就是启不启用

10:38.880 --> 10:40.760
什么模板引擎EG-S

10:40.760 --> 10:42.560
然后Enable

10:42.640 --> 10:43.640
true

10:43.640 --> 10:44.560
然后Party

10:46.480 --> 10:49.240
就是EG-VU EG-S

10:49.240 --> 10:50.080
所以把它启用

10:50.080 --> 10:50.440
对吧

10:50.440 --> 10:52.800
启用EG-S的模板引擎

10:52.800 --> 10:53.800
但是启用过后

10:53.800 --> 10:54.800
我们刚才说了

10:54.800 --> 10:57.000
在EG里面的所有的模板引擎

10:57.000 --> 10:57.840
都是通过什么

10:57.840 --> 10:59.400
通过EG-VU来管理的

10:59.400 --> 11:00.640
它来管理模板引擎

11:00.640 --> 11:02.240
你目前只是安装了这个

11:02.240 --> 11:03.160
这个模板引擎

11:03.160 --> 11:04.200
还要把它启用了

11:04.200 --> 11:05.720
但是要管理要靠它来管理

11:05.720 --> 11:07.280
怎么来靠它管理的

11:07.280 --> 11:09.040
这里第三步要配置

11:09.040 --> 11:10.280
配置给谁配置

11:10.320 --> 11:13.320
给配置的不是EG-S模板引擎

11:13.320 --> 11:14.280
配置的是谁

11:14.280 --> 11:16.720
配置的是VU EG-VU

11:16.720 --> 11:18.400
配置的是这个插线

11:18.400 --> 11:20.400
让它来帮我们管理模板引擎

11:20.400 --> 11:21.880
那么它怎么来管理呢

11:21.880 --> 11:22.760
你看

11:22.760 --> 11:24.120
配置权在这

11:24.120 --> 11:25.360
配置权在这

11:25.360 --> 11:27.240
我们把这个就不要了

11:27.240 --> 11:28.360
EG-Sport

11:29.520 --> 11:30.160
配置什么

11:30.160 --> 11:32.880
配置一个配置叫VU

11:32.880 --> 11:34.280
就这个配置

11:34.280 --> 11:35.520
这个配置里面有什么东西

11:35.520 --> 11:39.720
我把它复制过来看一下

11:39.720 --> 11:41.520
第一个Root

11:41.560 --> 11:42.360
表示什么意思呢

11:42.360 --> 11:43.520
表示模板引

11:43.520 --> 11:44.720
就是你不是模板引擎

11:44.720 --> 11:45.720
要宣传一些模板

11:45.720 --> 11:45.920
对吧

11:45.920 --> 11:47.000
一些模板文件

11:47.000 --> 11:48.200
模板文件在哪

11:48.200 --> 11:50.680
它的模板文件的根目录在哪

11:50.680 --> 11:51.360
也说EG-Sport

11:51.360 --> 11:54.320
它希望你把模板的放到一个根目录下面

11:54.320 --> 11:55.680
放到一个目录下面

11:55.680 --> 11:56.960
那么这个目录在哪

11:56.960 --> 11:59.160
它默认的情况是在这

11:59.160 --> 12:02.480
是在App文件夹下面的VU文件夹

12:02.480 --> 12:04.720
它希望你的把模板

12:04.720 --> 12:05.720
就是模板全部放在这

12:05.720 --> 12:09.560
比方说我们在这里写上一个Home EG-S

12:09.560 --> 12:09.960
对吧

12:09.960 --> 12:11.480
写上这么一个模板

12:12.480 --> 12:14.480
就是手艺

12:15.480 --> 12:17.280
然后我们在这里边是不是可以用

12:19.280 --> 12:20.880
就是EG-S的代码

12:20.880 --> 12:21.280
对不对

12:21.280 --> 12:24.480
把这个手艺的标题放到这

12:24.480 --> 12:24.880
对吧

12:24.880 --> 12:26.480
我可以把手艺的标题放到这

12:26.480 --> 12:27.880
这里也放标题

12:28.880 --> 12:30.080
是不是可以这样子

12:30.080 --> 12:31.080
对不对

12:31.080 --> 12:32.680
那么这里就是我们把

12:32.680 --> 12:34.280
要告诉它的就是模

12:34.280 --> 12:37.880
就是我们的模板锁在的文件夹

12:37.880 --> 12:39.880
你可以通过给它一个决定度庆

12:40.080 --> 12:42.080
它也可以给多个决定路径

12:42.080 --> 12:44.280
多个决定路径之间的用逗号分隔

12:45.280 --> 12:46.480
那么它到时候找的时候

12:46.480 --> 12:47.080
一个找不到

12:47.080 --> 12:48.880
它就会从另一个去找

12:48.880 --> 12:50.080
就这么一个意思

12:50.080 --> 12:51.080
那么如果说你不设置的话

12:51.080 --> 12:52.480
就放在这了

12:52.480 --> 12:53.680
所以说我这里可以不设置它

12:55.080 --> 12:57.080
第二个配置的是Catch

12:57.080 --> 12:58.580
表示是不是要缓存

12:58.580 --> 12:59.480
它啥意思呢

12:59.480 --> 13:01.680
就是我们的EG-S启动的时候

13:01.680 --> 13:04.080
如果说你这个字为去的话

13:04.080 --> 13:05.080
它默认就是去

13:06.280 --> 13:07.480
它会把这个目录

13:07.480 --> 13:09.080
刚才配置的目录下面的东西

13:09.080 --> 13:10.280
全部读出来读出来

13:11.480 --> 13:12.080
它读的是什么呢

13:12.080 --> 13:13.480
文件路径

13:13.480 --> 13:15.780
就是我们这里边有哪些模板

13:15.780 --> 13:17.880
有哪些就是试图

13:17.880 --> 13:19.480
这东西叫做试图

13:19.480 --> 13:20.880
你叫做模板

13:20.880 --> 13:23.080
哪些试图它会把全部读出来

13:23.080 --> 13:23.680
方便后面

13:23.680 --> 13:24.180
后边什么呢

13:24.180 --> 13:25.480
方便后面呢

13:25.480 --> 13:26.880
如果说我要宣展启动一个模板

13:26.880 --> 13:27.980
我要宣展Home模板

13:27.980 --> 13:28.680
它马上就知道了

13:28.680 --> 13:30.480
Home模板的路径是什么

13:30.480 --> 13:32.280
它马上就可以把通过一个路径

13:32.280 --> 13:33.480
把这个文件读出来

13:33.480 --> 13:35.080
就是缓存路径的

13:35.080 --> 13:37.580
它可以提高后续的宣展效率

13:37.680 --> 13:38.580
默认是开启的

13:39.780 --> 13:41.980
第三个这个东西是必须要配置的

13:41.980 --> 13:42.980
这个是什么意思呢

13:42.980 --> 13:46.480
这个是表示一个映射

13:46.480 --> 13:46.980
什么意思

13:46.980 --> 13:48.680
就是这是一个文件后维

13:48.680 --> 13:49.280
这个文件

13:49.280 --> 13:50.380
这种文件

13:50.380 --> 13:52.780
它就交给这个模板引擎来处理

13:52.780 --> 13:53.680
那么这个文件

13:53.680 --> 13:55.380
它就交给另一个模板引擎来处理

13:55.380 --> 13:57.080
当然我们这里只有一个模板引擎

13:57.080 --> 13:57.380
对吧

13:57.380 --> 13:58.680
所以说我都交给它

13:58.680 --> 13:59.780
那么这样子一来的话

13:59.780 --> 14:00.680
我这个写错了

14:01.780 --> 14:02.880
这样子一配置的话

14:02.880 --> 14:03.580
你看

14:03.580 --> 14:04.480
我们这个后续明

14:04.480 --> 14:05.480
是不是它到时候

14:05.480 --> 14:06.780
这个插件

14:06.780 --> 14:08.280
它就会交给这个模板引擎

14:08.280 --> 14:09.380
我们刚才配置的是吧

14:09.380 --> 14:10.380
是这个模板引擎

14:10.380 --> 14:12.080
它就会交给它来处理

14:12.080 --> 14:12.880
如果说以后

14:12.880 --> 14:14.480
我写一个1.8秒

14:14.480 --> 14:15.680
那么它也是一个模板引擎

14:15.680 --> 14:17.480
比方说它也是一个模板引擎

14:19.480 --> 14:20.780
那么这个时候

14:20.780 --> 14:22.780
它又交给谁来处理呢

14:22.780 --> 14:23.880
虽然它后续是1.8秒

14:23.880 --> 14:25.680
但是它无非就是个文件

14:25.680 --> 14:26.680
文件后续不重要

14:26.680 --> 14:27.280
对不对

14:27.280 --> 14:29.180
那么它到底交给哪个模板引擎呢

14:29.180 --> 14:29.980
我给它配置一下

14:29.980 --> 14:30.980
也是一节也是

14:30.980 --> 14:33.280
如果说你没有配置怎么办

14:33.280 --> 14:33.980
没有配置的话

14:33.980 --> 14:36.680
它就会使用默认的模板引擎

14:37.180 --> 14:37.880
默认的模板引擎

14:37.880 --> 14:38.980
我给它配置一节也是

14:38.980 --> 14:40.180
就这么个意思

14:40.180 --> 14:41.980
如果说它这里配置找不到的话

14:41.980 --> 14:44.180
那么它就会使用默认的模板引擎

14:44.180 --> 14:45.980
这两个配置是必须要配的

14:45.980 --> 14:47.180
必须要配的

14:47.180 --> 14:47.380
好

14:47.380 --> 14:48.380
最后一个配置就是

14:48.380 --> 14:49.880
Default Extension

14:49.880 --> 14:50.680
什么意思呢

14:50.680 --> 14:52.680
就是默认的后续名

14:52.680 --> 14:53.980
那么这个东西有什么用呢

14:53.980 --> 14:55.980
比方到时候我在渲染的时候

14:55.980 --> 14:57.680
我让它渲染

14:57.680 --> 14:58.280
渲染什么呢

14:58.280 --> 14:59.880
渲染Home

14:59.880 --> 15:01.080
我不用给后续

15:01.080 --> 15:02.180
那么它就默认的后续呢

15:02.180 --> 15:04.480
就是一节也是

15:04.480 --> 15:06.680
它就会找到这个Home.exe

15:06.680 --> 15:07.380
原来的意思吧

15:07.380 --> 15:08.480
默认的后续

15:08.480 --> 15:09.280
可配可不配

15:11.480 --> 15:11.780
好了

15:11.780 --> 15:14.380
那么这就是模板引擎的配置

15:14.380 --> 15:14.580
好

15:14.580 --> 15:15.380
配置好了过后

15:15.380 --> 15:17.380
这些准备工作就完成了

15:17.380 --> 15:18.180
完成过后

15:18.180 --> 15:20.280
我们就可以利用模板引擎来渲染了

15:20.280 --> 15:23.080
那么在Age.exe里边是如何来利用模板引擎

15:23.080 --> 15:23.880
渲染的呢

15:23.880 --> 15:25.980
它是要在Controller的Action中

15:25.980 --> 15:27.080
修写对应的代码

15:27.080 --> 15:27.780
啥意思呢

15:27.780 --> 15:28.780
我给大家看一下

15:28.780 --> 15:29.880
我们在Controller的时候

15:29.880 --> 15:32.280
我们在Router配置一下吧

15:32.280 --> 15:32.980
配置一下

15:32.980 --> 15:33.580
稍微配置一下

15:34.680 --> 15:37.480
如果说访问这个首页的话

15:37.480 --> 15:38.780
访问这个路径的话

15:38.780 --> 15:41.380
我就给它Home点介绍

15:41.380 --> 15:44.540
把这两个删了

15:44.540 --> 15:46.040
访问这个的话

15:46.040 --> 15:48.540
我们找到Home.index

15:49.740 --> 15:51.240
进入首页

15:51.240 --> 15:51.440
好

15:51.440 --> 15:52.240
首页的时候呢

15:52.240 --> 15:53.040
在这里边

15:53.040 --> 15:54.140
这里边我们写什么呢

15:54.140 --> 15:56.440
我们就可以写ZesContext

15:56.440 --> 15:58.140
然后Render

15:58.140 --> 15:59.240
渲染

15:59.240 --> 16:00.140
渲染什么呢

16:00.140 --> 16:03.240
第一个参数传递模板的名称

16:03.240 --> 16:04.340
模板的名称是什么呢

16:04.340 --> 16:06.140
模板的名称是Home

16:06.240 --> 16:07.640
你看我这样子一传递

16:07.640 --> 16:08.640
它会选择什么呢

16:08.640 --> 16:09.540
它就到时候呢

16:09.540 --> 16:11.340
它就会找到这个

16:11.340 --> 16:12.540
找到这个Vue目录

16:12.540 --> 16:13.740
因为你这边配置了的

16:13.740 --> 16:14.040
对吧

16:14.040 --> 16:16.040
配置了跟目录就是这个Vue

16:16.040 --> 16:17.540
找到Vue下面的什么呢

16:17.540 --> 16:19.240
Home.ejs

16:19.240 --> 16:20.740
它为什么知道找了这个ejs

16:20.740 --> 16:21.740
因为这里配置了的

16:21.740 --> 16:23.440
默认后就是ejs

16:23.440 --> 16:25.740
所以它就会找这个Home.ejs

16:25.740 --> 16:26.340
能不能找到

16:26.340 --> 16:27.340
能找到

16:27.340 --> 16:27.940
找到过后呢

16:27.940 --> 16:30.140
就把这个文件读出来

16:30.140 --> 16:32.440
就是这个文件的内容读出来

16:32.440 --> 16:34.440
然后通过ejs这个模板行情

16:34.440 --> 16:35.340
来进行宣展

16:35.340 --> 16:37.040
为什么它会知道用ejs来宣展

16:37.040 --> 16:38.140
因为这里配置了的

16:38.140 --> 16:41.140
这个文件它就要用ejs来宣展

16:41.140 --> 16:42.940
这里有个配置

16:42.940 --> 16:44.440
明白的意思吧

16:44.440 --> 16:45.940
好那么这里我就宣展Home

16:45.940 --> 16:47.140
但是在宣展的过程中

16:47.140 --> 16:49.140
模板里边是不是要用到数据

16:49.140 --> 16:50.140
这些是不是要用到数据

16:50.140 --> 16:51.240
那数据怎么办呢

16:51.240 --> 16:52.240
你可以通过一个

16:52.240 --> 16:53.740
第二个参数给它传过去

16:53.740 --> 16:54.940
我们给它一个数据

16:54.940 --> 16:55.840
数据是什么呢

16:55.840 --> 16:56.940
title

16:56.940 --> 16:59.040
Vue

16:59.040 --> 17:03.640
就是服务端宣展的页面

17:03.640 --> 17:04.840
给它的对象

17:04.940 --> 17:06.940
那么这个对象就会传递到模板里边去

17:06.940 --> 17:09.440
模板呢就会把这个数据宣展出来

17:09.440 --> 17:10.340
把这个数据放到这

17:11.540 --> 17:12.540
好接下来我们来看一下

17:14.240 --> 17:15.140
npm

17:15.140 --> 17:15.540
drop

17:20.200 --> 17:21.200
打开这个页面

17:21.200 --> 17:22.100
首页去看一下

17:23.300 --> 17:24.600
诶 40是放

17:24.600 --> 17:25.700
not found

17:25.700 --> 17:26.700
找不到

17:26.700 --> 17:27.300
哎呀

17:29.000 --> 17:29.700
解放

17:29.700 --> 17:31.300
Home.index

17:32.200 --> 17:33.300
哦这里还少了一件

17:33.300 --> 17:34.400
还少了一件事啊

17:34.400 --> 17:36.100
还要await

17:36.100 --> 17:37.400
还要等待它

17:37.400 --> 17:38.400
不然的话这个函数

17:38.400 --> 17:39.800
因为它宣展需要一个过程

17:39.800 --> 17:40.400
你想吧

17:40.400 --> 17:42.500
这个宣展的过程是不是一定要读去文件

17:42.500 --> 17:44.200
它一定是一个异部的

17:44.200 --> 17:45.800
如果说你很快就结束了的话

17:45.800 --> 17:49.000
那么你整个处理结束过后

17:49.000 --> 17:50.700
我们知道学过那个ka中间键

17:50.700 --> 17:51.200
对吧

17:51.200 --> 17:51.900
ka中间键里面

17:51.900 --> 17:53.100
所有处理结束过后

17:53.100 --> 17:55.000
结果文件都还没有读完

17:55.000 --> 17:55.900
都还没有宣展出来

17:55.900 --> 17:56.400
那么这个时候

17:56.400 --> 17:57.800
发生了客户端端一定是

17:57.800 --> 17:58.300
什么都没有

17:58.300 --> 17:59.400
没有给包地复职

17:59.400 --> 18:00.300
没有给包地复职

18:00.300 --> 18:01.100
就相当于是

18:01.100 --> 18:01.700
40是

18:01.700 --> 18:03.200
它就认为找不到资源

18:03.200 --> 18:04.000
好保存啊

18:04.000 --> 18:04.500
重新来

18:04.500 --> 18:05.500
刷新

18:05.500 --> 18:06.600
是不是就显算了

18:07.600 --> 18:08.700
查看元代吧

18:08.700 --> 18:10.100
那么这个页面

18:10.100 --> 18:11.500
就是服务端宣展出来的页面

18:11.500 --> 18:12.200
你看

18:12.200 --> 18:13.300
是不是这里就服务端

18:13.300 --> 18:15.100
直接把这个东西交给我们了

18:15.100 --> 18:16.500
对不对

18:16.500 --> 18:17.100
我们下几课

18:17.100 --> 18:19.100
会写一个完整的例子

18:19.100 --> 18:21.000
来说明这个说明这种模式

18:21.000 --> 18:22.400
这种就是传统的

18:22.400 --> 18:25.300
以前很多年前加把程序而

18:25.300 --> 18:27.200
他们做页面的方式

18:27.200 --> 18:27.900
就是这样做的

18:29.600 --> 18:30.600
这是

18:30.600 --> 18:32.100
这通过Render

18:32.100 --> 18:33.000
模板名称

18:33.000 --> 18:33.400
然后呢

18:33.400 --> 18:34.600
给他一个数据

18:34.600 --> 18:35.400
然后还有

18:35.400 --> 18:36.900
他还提供了两个方法

18:37.000 --> 18:39.200
一个是RenderViewRenderStream

18:39.200 --> 18:40.200
我们来看一下吧

18:40.200 --> 18:40.900
这两个

18:40.900 --> 18:41.500
这个方法呢

18:41.500 --> 18:42.700
就是Render这个方法

18:42.700 --> 18:43.700
它是把渲染出来

18:43.700 --> 18:44.700
然后直接给什么

18:44.700 --> 18:46.500
CTX Body复职

18:46.500 --> 18:47.300
给Body一复职

18:47.300 --> 18:48.800
是不是响应体就有了

18:48.800 --> 18:50.100
那么就响应给客户乱了

18:50.100 --> 18:51.100
那么还有种方式呢

18:51.100 --> 18:51.900
就这样子

18:51.900 --> 18:53.400
我们自己手动来写

18:53.400 --> 18:54.700
CTX Render

18:55.700 --> 18:57.200
RenderView

18:57.200 --> 18:57.800
叫什么

18:57.800 --> 18:58.400
RenderView

18:59.700 --> 19:00.200
后边我们又写

19:00.200 --> 19:00.700
确定了什么

19:00.700 --> 19:01.200
确定了Home

19:02.600 --> 19:03.900
抬头一样

19:03.900 --> 19:04.800
随便写啊

19:04.800 --> 19:05.300
然后呢

19:05.300 --> 19:06.500
我们他这个就会

19:06.500 --> 19:07.200
返回

19:09.000 --> 19:10.600
返回一个AT秒

19:10.600 --> 19:12.000
我们输出一下AT秒

19:12.000 --> 19:12.200
好

19:12.200 --> 19:15.040
保存啊

19:15.040 --> 19:16.140
接下来来访问

19:16.140 --> 19:16.640
访问手艺

19:18.040 --> 19:18.440
刷新

19:18.440 --> 19:19.840
这里是40是他放的

19:19.840 --> 19:21.040
然后我们看一下服务端

19:21.040 --> 19:22.640
服务端这边是不是输出了一个结果

19:23.640 --> 19:24.640
也就是说呢

19:24.640 --> 19:25.340
这个方法呢

19:25.340 --> 19:28.340
他会直接把这个渲染的结果

19:28.340 --> 19:29.840
做一个制无串返回

19:31.040 --> 19:31.540
但是呢

19:31.540 --> 19:32.840
他不会给什么

19:32.840 --> 19:33.540
Body复职

19:33.540 --> 19:34.040
那么你这里

19:34.040 --> 19:35.540
是不是可以手动处理

19:35.540 --> 19:36.040
对吧

19:36.040 --> 19:37.840
CTX body等于AT秒

19:37.840 --> 19:39.440
说手动处理就完事了

19:39.440 --> 19:39.740
好

19:40.740 --> 19:41.240
刷新

19:41.240 --> 19:42.840
你看是不是没问题了

19:42.840 --> 19:44.440
然后我们这边看一下就原代了

19:44.440 --> 19:45.340
刷新

19:45.340 --> 19:46.340
是不是没问题了

19:46.340 --> 19:47.440
对吧

19:47.440 --> 19:48.440
就这么个意思啊

19:48.440 --> 19:49.440
那么这种做法呢

19:49.440 --> 19:49.940
有的时候呢

19:49.940 --> 19:50.840
还是蛮有用的

19:50.840 --> 19:52.440
比方说你拿到AT秒过后呢

19:52.440 --> 19:53.640
可能要做一些缓存啊

19:53.640 --> 19:54.840
可能要做一些别的事情

19:54.840 --> 19:55.140
什么事情

19:55.140 --> 19:56.440
状态发达的事情

19:56.440 --> 19:57.440
你自己去做

19:57.440 --> 19:58.340
做完就完事了

19:58.340 --> 19:59.740
就可以自己去做一些别的事情

19:59.740 --> 20:00.540
拿到制无串

20:00.540 --> 20:02.040
比方说还要做一些过滤啊

20:02.040 --> 20:03.140
等等等等啊

20:03.140 --> 20:04.240
但是一般的情况下呢

20:04.240 --> 20:05.240
我们一般就是用他

20:05.340 --> 20:07.040
像锅律啊这些东西缓存这些东西

20:07.040 --> 20:08.540
我们一般用中间键啊

20:08.540 --> 20:09.440
KOA中间键

20:09.440 --> 20:11.640
那么KOA至于KO中间键怎么来写

20:11.640 --> 20:12.840
我们后续再说啊

20:13.640 --> 20:14.740
这是RenderView

20:14.740 --> 20:16.140
还有一个就是RenderScreen

20:17.440 --> 20:19.140
那就跟View没有什么关系了

20:20.140 --> 20:21.040
RenderScreen

20:22.540 --> 20:23.240
宣展制无串

20:23.240 --> 20:25.240
比方说我制无串里边写上这么一个东西

20:26.340 --> 20:27.040
标题

20:27.040 --> 20:27.740
帽号

20:29.240 --> 20:29.840
开拓对吧

20:29.840 --> 20:30.940
这就是个模办

20:30.940 --> 20:31.540
然后呢

20:31.540 --> 20:33.140
我这边给他提供一个开拓

20:34.140 --> 20:35.140
好

20:35.140 --> 20:35.440
这边

20:36.440 --> 20:36.740
拿到

20:37.740 --> 20:38.140
Altimel

20:38.840 --> 20:39.240
Await

20:39.840 --> 20:40.640
输出Altimel

20:42.340 --> 20:43.440
当然我也可以用什么

20:43.440 --> 20:44.040
CTX

20:46.280 --> 20:46.880
CTX

20:47.180 --> 20:48.880
body等于什么Altimel

20:49.380 --> 20:50.280
一样的刷新

20:50.280 --> 20:50.780
保存啊

20:51.380 --> 20:51.780
刷新

20:52.080 --> 20:53.180
你看这边成这个样子了

20:53.880 --> 20:54.680
哎不对不对

20:56.080 --> 20:56.780
哎不对不对

20:56.780 --> 20:57.180
没有

20:58.380 --> 20:59.180
我怎么用这个

20:59.580 --> 21:00.080
我的天呐

21:01.880 --> 21:02.180
抬头

21:04.700 --> 21:05.000
好

21:05.000 --> 21:05.400
保存

21:06.700 --> 21:07.200
刷新

21:07.200 --> 21:08.100
你看是不是这个

21:08.400 --> 21:08.900
对不对

21:09.000 --> 21:10.800
拿过来到客户上就这个

21:11.100 --> 21:11.900
他就这么个意思啊

21:11.900 --> 21:13.000
模办引擎是很简单

21:13.000 --> 21:15.000
他就是把一个制无串里边包含的一些

21:15.200 --> 21:16.500
一些占位服务

21:16.500 --> 21:16.900
对吧

21:16.900 --> 21:17.200
然后呢

21:17.200 --> 21:17.900
给他数据

21:17.900 --> 21:19.200
把这数据来击券了

21:19.500 --> 21:19.800
对不对

21:19.800 --> 21:20.400
我们平时呢

21:20.400 --> 21:21.900
这两种都用的比较少一点

21:22.100 --> 21:22.800
一般用的最多的

21:22.800 --> 21:23.400
就是这个

21:23.400 --> 21:24.200
这个方式

21:24.600 --> 21:26.600
然后把数据给他扔过去就行了

21:27.300 --> 21:27.600
好

21:27.600 --> 21:28.800
这就是模办引擎

21:29.500 --> 21:30.100
那么接下来

21:30.100 --> 21:30.800
我们来看一下

21:30.800 --> 21:32.800
有一个模式就显现出来了

21:32.800 --> 21:34.400
叫做MVC模式

21:34.700 --> 21:35.700
对MVC模式

21:35.800 --> 21:37.000
我反正记得以前讲过的

21:37.000 --> 21:38.000
在哪个课里边讲过了

21:38.000 --> 21:38.900
我现在记不住了

21:39.200 --> 21:40.500
MVC模式是什么意思呢

21:40.500 --> 21:41.600
就是这张图

21:42.300 --> 21:43.000
很简单

21:43.800 --> 21:45.300
请求到来了

21:45.800 --> 21:46.600
谁在处理

21:47.100 --> 21:47.900
康仇人

21:48.500 --> 21:49.900
你看请求来了过后

21:50.100 --> 21:51.000
我们这里路有配置啊

21:51.000 --> 21:51.500
对吧

21:51.500 --> 21:52.200
请求来了过后

21:52.200 --> 21:53.600
是交给康仇人来处理

21:54.400 --> 21:56.000
康仇人来处理过程中

21:56.000 --> 21:58.300
是不是组装出来了一个数据

21:58.700 --> 21:59.200
这个数据呢

21:59.200 --> 22:02.200
可能来自于别的服务器远程过去的

22:02.200 --> 22:04.700
比如说新闻列表新闻的一个数组等等等等

22:05.000 --> 22:08.200
可能来自于一个远程的远程的获取

22:08.200 --> 22:09.400
因为可能来自于数据库

22:09.400 --> 22:10.600
你甭管它哪来的

22:10.600 --> 22:12.100
总之呢会拿到一些数据

22:12.400 --> 22:12.700
对不对

22:12.700 --> 22:13.400
这个就是数据

22:13.400 --> 22:14.700
我们把它叫做模型

22:15.100 --> 22:16.700
康仇人在运行的过程中

22:16.700 --> 22:17.800
会拿到这个模型

22:17.800 --> 22:18.900
你甭管它哪来的

22:19.800 --> 22:21.400
那对于这个模型的解释

22:21.400 --> 22:22.700
你会看到有些教程

22:22.700 --> 22:24.700
或者是有些博客里面乱说

22:24.700 --> 22:26.700
他说这个模型就是数据库的模型

22:27.200 --> 22:28.900
它可不可以是数据库的模型可以

22:29.500 --> 22:31.400
可不可以是来自于远程过去可以

22:31.600 --> 22:33.400
可不可以来自于就是这个一个字面量

22:33.400 --> 22:34.100
可以随便

22:35.000 --> 22:36.800
模型可以是任何东西

22:37.000 --> 22:38.700
这个模型它的本质是什么的

22:38.700 --> 22:40.800
本质叫做UI渲染模型

22:41.400 --> 22:42.800
它是用来渲染印面的

22:42.800 --> 22:44.200
所以说叫做UI模型

22:44.300 --> 22:46.000
那么UI模型可以是数据库的

22:46.100 --> 22:47.100
可以是自己构建的

22:47.100 --> 22:47.900
可以是任何东西

22:47.900 --> 22:49.400
总之你甭管它哪来的

22:49.400 --> 22:50.300
它就是一个模型

22:51.000 --> 22:53.100
然后拿到这个模型把模型交给谁

22:53.100 --> 22:53.900
交给仕途

22:54.300 --> 22:56.200
把这个模型交给这个仕途

22:56.300 --> 22:59.100
这个仕途就是通过一个模板引擎构建的东西

22:59.700 --> 23:00.400
是不是仕途

23:00.800 --> 23:02.500
仕途是不是在渲染的过程中

23:02.500 --> 23:04.500
就把一个模型渲染出来了

23:04.600 --> 23:05.000
对不对

23:05.300 --> 23:06.500
好渲染出来了过后

23:07.100 --> 23:08.900
那么为什么为什么这里有个箭头呢

23:09.200 --> 23:11.300
其他渲染出来过后是不是就交给客户端了

23:11.800 --> 23:14.200
然后比方说这个模型里边有一个文本框

23:14.600 --> 23:16.200
一个封表单

23:17.100 --> 23:17.700
封表单

23:18.300 --> 23:21.000
然后这里边有一个文本框

23:21.000 --> 23:21.800
然后一个按钮

23:23.100 --> 23:23.600
提交

23:27.260 --> 23:28.160
那么你想一想

23:28.160 --> 23:29.160
你点这个提交

23:29.160 --> 23:30.960
是不是又要重新去请求服务器

23:30.960 --> 23:32.360
这是一个仕途

23:32.360 --> 23:32.560
对吧

23:32.560 --> 23:34.760
渲染出来的东西交给了浏览器

23:35.060 --> 23:36.360
而拥护的操作过程中

23:36.360 --> 23:37.460
是不是有可能会提交

23:37.460 --> 23:39.060
有可能会重新访问服务器

23:39.060 --> 23:39.460
对吧

23:39.560 --> 23:40.960
那么这里的我只是没写完

23:41.560 --> 23:42.760
重新访问服务器

23:42.860 --> 23:43.760
那么这个时候呢

23:43.760 --> 23:45.060
是不是又请求到了康夺乐

23:45.060 --> 23:45.860
新的康夺乐

23:45.860 --> 23:47.260
或者是之前的康夺乐

23:47.260 --> 23:48.060
或者是新的康夺乐

23:48.060 --> 23:49.860
都想总之又又请求服务器

23:50.160 --> 23:51.860
服务器是不是又根据模型

23:51.860 --> 23:53.960
又来选择一个新的仕途交给客户端

23:54.160 --> 23:55.660
客户端里面操作了过后呢

23:55.660 --> 23:57.760
又请求服务器

23:57.760 --> 23:59.160
整个过程就在这里循环

23:59.160 --> 24:00.360
就是MVC模式

24:00.360 --> 24:01.160
其中的模式呢

24:01.160 --> 24:01.960
跟那个5U

24:02.460 --> 24:04.460
根据按钮是不是非常非常类似

24:05.160 --> 24:08.160
5U不是也把数据交给一个模板来渲染

24:08.660 --> 24:09.160
对不对

24:10.260 --> 24:11.260
只不过5U呢

24:11.260 --> 24:12.460
它是没有Controller

24:13.060 --> 24:13.960
它是一个什么呢

24:13.960 --> 24:15.760
它是一个叫MV

24:15.760 --> 24:16.960
Model View

24:16.960 --> 24:18.160
叫VM

24:18.160 --> 24:19.460
就是5U模的

24:19.460 --> 24:21.060
它出来来做双向绑定的

24:21.260 --> 24:23.760
仕途更新直接导致模型更新

24:23.760 --> 24:25.560
而模型更新又重新渲染仕途

24:25.560 --> 24:26.560
这是5U的模式

24:26.660 --> 24:27.460
而MVC里面

24:27.460 --> 24:29.460
它就对一个核心就是Controller

24:29.560 --> 24:31.260
它是来接触用户请求的

24:31.260 --> 24:32.360
所以MVC模式呢

24:32.360 --> 24:34.060
比较适合在客户端使用

24:34.960 --> 24:35.960
那就是MVC模式

24:35.960 --> 24:37.960
我希望我打开给大家解释清楚了

24:38.160 --> 24:38.660
那么这一刻呢

24:38.660 --> 24:40.260
没有什么具体的例子

24:40.460 --> 24:41.060
具体的例子呢

24:41.060 --> 24:41.960
我们下一课呢

24:41.960 --> 24:43.460
来做一个用模板引擎

24:43.460 --> 24:45.360
用传统的方式来做一个

24:46.260 --> 24:47.060
完整的例子

24:47.660 --> 24:49.260
这是关于这个模板引擎

