WEBVTT

00:00.180 --> 00:06.020
说一下这个安全 安全这一块呢没有什么好讲的啊

00:06.020 --> 00:08.380
他就是告诉你怎么去使用就完事了啊

00:08.380 --> 00:11.140
搞他怎么去防护的怎么去使用就完事了

00:11.140 --> 00:13.300
我就怕你们的官网文档又看不懂

00:13.300 --> 00:14.380
所以给他讲一讲吧

00:15.420 --> 00:17.420
啊 再多啰嗦几句啊

00:17.420 --> 00:18.820
就咱们学技术呢

00:18.820 --> 00:22.540
一定要重视原理 原理还是最核心的东西

00:22.540 --> 00:26.340
你像这些商城建筑随便这门闭也还跑不出原理的

00:26.340 --> 00:29.740
你看SAS 这个跨战脚奔攻击和那个什么

00:31.500 --> 00:34.900
CS2F攻击这两个东西是在斗斗斗里面讲过的

00:34.900 --> 00:36.260
对不对 他原理都讲到了的

00:36.260 --> 00:38.300
他跑不出这个原理的你放心

00:38.300 --> 00:41.500
他无非就是提供了一些方案去解决他而已啊

00:41.500 --> 00:43.660
这些方案呢其实我们也讲过的啊

00:43.660 --> 00:45.380
他只是给你做做好了

00:45.380 --> 00:47.220
你怎么直接去拥就完事了

00:47.220 --> 00:47.900
所以说以后呢

00:47.900 --> 00:49.700
哪怕有一天不用Agg了

00:49.700 --> 00:52.980
利用别的什么服务器应用框架

00:52.980 --> 00:53.580
那无所谓吧

00:53.620 --> 00:55.700
他就只是改了一个API

00:55.700 --> 00:56.780
改了一些配置

00:56.780 --> 00:58.260
改了一些约定 仅此而已

00:58.260 --> 01:00.300
他跑不出这个原理的

01:00.300 --> 01:02.380
因此呢你技术学到后边

01:02.380 --> 01:05.620
特别是你们到公司里去问一下里面的技术总监

01:05.620 --> 01:06.820
你可以观察一下

01:06.820 --> 01:08.100
或者是你们公司有家口师

01:08.100 --> 01:10.140
你去问一下或者是观察一下

01:10.140 --> 01:13.060
你会发现他写单码是真写不过你

01:13.060 --> 01:14.580
他写单码不看文档的话

01:14.580 --> 01:16.060
他真的啥都写不出来

01:16.060 --> 01:18.220
但是呢他天天吹牛

01:18.220 --> 01:19.860
说得是偷偷知道

01:19.860 --> 01:20.300
为什么呢

01:20.300 --> 01:22.580
他重视的是核心原理

01:22.620 --> 01:23.740
他知道就那么回事

01:23.740 --> 01:24.860
那个东西

01:24.860 --> 01:26.340
我肯定是能够实现他的

01:26.340 --> 01:28.300
只不过呢我记不住那么多API

01:28.300 --> 01:29.420
记不住那么多配置

01:29.420 --> 01:30.860
我需要去查学文档

01:30.860 --> 01:32.980
但核心的方式呢就这么一切

01:32.980 --> 01:34.900
我知道他核心的方式就行了

01:34.900 --> 01:36.580
那么以后呢

01:36.580 --> 01:40.020
你们会成为公司技术的中间力量

01:41.140 --> 01:42.260
你们到时候就明白了

01:43.540 --> 01:45.340
当你去选择一个技术的时候

01:45.340 --> 01:47.340
你只要知道他解决什么问题

01:47.340 --> 01:48.380
他怎么去解决的

01:48.380 --> 01:49.380
他的原理是什么

01:49.380 --> 01:51.180
那么按照这样的原理去解决

01:51.220 --> 01:51.860
有什么优点

01:51.860 --> 01:52.420
有什么缺点

01:52.420 --> 01:54.180
一分析就出来了

01:54.180 --> 01:54.740
OK

01:54.740 --> 01:56.300
那么我们觉得他可以用

01:56.300 --> 01:57.340
那你就把它选进来

01:57.340 --> 01:58.980
是符合我们这个项目的选进来

01:58.980 --> 02:00.700
哪怕我一次都没用过

02:00.700 --> 02:01.380
那么这些人呢

02:01.380 --> 02:03.820
就是找恶人去研究一下

02:03.820 --> 02:05.220
然后呢给大家一培训

02:05.220 --> 02:07.780
把这个关键点培训到就完事了

02:07.780 --> 02:09.940
那么就接下来就开始应用这个技术了

02:09.940 --> 02:11.260
就这么一回事

02:11.260 --> 02:14.340
无非就是开发效率的高和低的问题

02:14.340 --> 02:15.460
包括了这些框架

02:15.460 --> 02:17.500
他这一过呢使用了一些

02:17.500 --> 02:20.980
软件上的一些非常优秀的设计

02:20.980 --> 02:22.420
其实不管他怎么去设计

02:22.420 --> 02:23.700
设计也是有原则的

02:23.700 --> 02:24.700
对不对

02:24.700 --> 02:26.260
设计原则什么什么开闭原则

02:26.260 --> 02:26.500
对吧

02:26.500 --> 02:27.460
里面学了设计模式

02:27.460 --> 02:28.620
把开闭原则啊

02:28.620 --> 02:29.780
什么你是替换原则啊

02:29.780 --> 02:30.940
等等等等

02:30.940 --> 02:32.740
按照这些原则去设计就完事了

02:32.740 --> 02:34.220
设计出来不同的框架了

02:34.220 --> 02:35.220
不一定一致

02:35.220 --> 02:36.620
但是呢基本思想差不多

02:37.940 --> 02:38.580
好我们说一下

02:38.580 --> 02:41.020
这个xss的防护

02:41.020 --> 02:42.540
叫CSS防护

02:42.540 --> 02:44.260
因为他明智冲突了

02:44.260 --> 02:45.300
跟CSS的明智冲突了

02:45.300 --> 02:46.700
刚才变成XSS

02:46.700 --> 02:48.220
还夸张着脚本攻击啥意思呢

02:48.220 --> 02:50.860
就是用户提交了一个带脚本的东西

02:50.860 --> 02:52.140
莫名其妙的脚本的东西

02:52.140 --> 02:54.140
就被其他用户运行了

02:54.140 --> 02:55.300
就造成了攻击

02:55.300 --> 02:56.020
那怎么解决呢

02:56.020 --> 02:56.940
他就给你

02:56.940 --> 02:58.140
他里边要提供了一个就是

02:58.140 --> 03:00.300
ag security插件

03:00.300 --> 03:01.420
我就是个插件

03:01.420 --> 03:03.180
这插件他给你提供了一套

03:03.180 --> 03:05.060
成熟的安全实践

03:05.060 --> 03:07.860
就阿里在具体的开发过程中

03:07.860 --> 03:09.220
他觉得有些地方的

03:09.220 --> 03:11.260
我们用这种方式就行了

03:11.260 --> 03:12.380
就特别好了

03:12.380 --> 03:14.260
于是他可以提供了一些东西

03:14.260 --> 03:15.500
首先关于这个防护了

03:15.500 --> 03:16.260
他怎么防护的呢

03:16.300 --> 03:18.580
他是在helper里边给你扩展了一些方法

03:18.580 --> 03:20.460
我们之前说过helper是不可以扩展的

03:20.460 --> 03:20.980
对不对

03:20.980 --> 03:22.220
那方法可以扩展的

03:22.220 --> 03:23.300
那可以扩展什么方法

03:23.300 --> 03:24.500
扩展了这么几个方法

03:24.500 --> 03:25.220
其实还有一些

03:25.220 --> 03:25.980
大家有兴趣的话

03:25.980 --> 03:27.780
去看一下官方网站

03:27.780 --> 03:28.580
我们平时用的话

03:28.580 --> 03:29.980
就如果说要用的话

03:29.980 --> 03:31.100
无非就是这么一些

03:31.100 --> 03:32.220
一个是escape

03:32.220 --> 03:32.940
那么这个名字呢

03:32.940 --> 03:34.220
一听就是进行编码的

03:34.220 --> 03:35.420
对不对

03:35.420 --> 03:37.380
他会过滤掉一些危险制服

03:37.380 --> 03:39.500
制服就是把一个监控号给你过滤掉

03:39.500 --> 03:41.140
比方说一个字幕串

03:41.140 --> 03:42.180
有这么一个内容

03:42.180 --> 03:43.100
然后把这个内容呢

03:43.100 --> 03:44.540
经过这个helper的escape

03:44.540 --> 03:45.900
把字幕设传进去

03:45.940 --> 03:46.620
返回的是什么呢

03:46.620 --> 03:48.060
返回到一个新的制服串

03:48.060 --> 03:49.140
这个新的制服串是啥呢

03:49.140 --> 03:51.060
你看这个监控号是不是全没了

03:51.060 --> 03:51.340
对不对

03:51.340 --> 03:52.380
就是一个aT版编码

03:52.380 --> 03:52.660
对吧

03:52.660 --> 03:53.500
就无所谓的

03:53.500 --> 03:54.660
就没了

03:54.660 --> 03:55.780
就这么个方法

03:55.780 --> 03:57.580
那么这种方法呢

03:57.580 --> 04:00.140
如果说你使用的是eJs模板

04:00.140 --> 04:01.500
eJs模板的话

04:01.500 --> 04:03.260
那个你都不用去管这个方法

04:03.260 --> 04:05.140
因为如果说你在模板里面渲染的话

04:05.140 --> 04:06.100
因为我们说过

04:06.100 --> 04:06.980
模板里面渲染的话

04:06.980 --> 04:09.300
用这个方式是不是就已经进行编码了

04:09.300 --> 04:09.580
对吧

04:09.580 --> 04:10.460
从这种方式来显示

04:10.460 --> 04:12.060
就已经已经进行编码了

04:12.060 --> 04:13.500
就你都不用管啊

04:13.500 --> 04:14.620
当然有的时候呢

04:14.620 --> 04:15.700
如果说你需要啊

04:15.740 --> 04:17.340
你知道有什么个方法存在就行了

04:17.340 --> 04:18.540
他给你搞定了

04:18.540 --> 04:19.100
另外一个呢

04:19.100 --> 04:20.340
就是sJs

04:20.340 --> 04:21.220
s表示什么意思呢

04:21.220 --> 04:23.100
表示那个security

04:23.100 --> 04:23.980
安就safe

04:23.980 --> 04:25.860
安全的js

04:25.860 --> 04:26.340
什么意思呢

04:26.340 --> 04:27.060
就是有的时候呢

04:27.060 --> 04:28.020
用户提交的东西呢

04:28.020 --> 04:31.140
你可能会生成一些动态的js代码

04:31.140 --> 04:32.180
你在模板里边也好

04:32.180 --> 04:32.900
在什么地方也好

04:32.900 --> 04:34.780
可能会生成一些动态的js代码

04:34.780 --> 04:35.740
那么动态的js代码

04:35.740 --> 04:37.780
其中一部分是乃至于用户的东西

04:37.780 --> 04:39.580
比方说这个东西是乃至于用户的

04:39.580 --> 04:41.220
它里面用户就给你乱填

04:41.220 --> 04:42.020
填了你什么呢

04:42.020 --> 04:44.020
填了你一个双硬号进去

04:44.020 --> 04:44.420
你看吧

04:44.420 --> 04:45.060
你不处理

04:45.060 --> 04:46.300
你看要出什么问题

04:46.300 --> 04:49.420
如果说你不使用那个sjs

04:49.420 --> 04:50.220
你看

04:50.220 --> 04:53.140
我把它拼接到我们的js代码里边去

04:53.140 --> 04:53.340
对吧

04:53.340 --> 04:55.100
因为我知道js代码也可以动态生成

04:55.100 --> 04:56.100
模板渲染嘛

04:56.100 --> 04:56.300
对吧

04:56.300 --> 04:57.660
渲染啥都可以

04:57.660 --> 04:58.500
你看在这里去

04:58.500 --> 04:59.700
渲染一个什么

04:59.700 --> 05:01.340
渲染一个sqrt元素

05:01.340 --> 05:03.420
在这里边去写什么js代码

05:03.420 --> 05:03.940
对吧

05:03.940 --> 05:05.300
那么这边是不是可以

05:05.300 --> 05:07.300
把用户的东西拿过来了

05:07.300 --> 05:08.700
把用户填的东西说出来

05:08.700 --> 05:09.580
可以拿过来

05:09.580 --> 05:10.500
用户填的东西拿过来了

05:10.500 --> 05:13.100
过后在这个位置

05:13.100 --> 05:14.100
你不用去管它

05:14.140 --> 05:16.340
保存它不会真的保存的

05:16.340 --> 05:18.100
把这里双硬号

05:19.460 --> 05:20.780
把用户填的东西拿过来

05:20.780 --> 05:21.300
拿过来的话

05:21.300 --> 05:23.900
用户填的有js代码怎么办

05:23.900 --> 05:25.740
那么如果说用户填的是这个

05:27.620 --> 05:28.260
是不是就出问题了

05:28.260 --> 05:29.060
这个代码对吧

05:29.060 --> 05:30.020
到时候生成到一面上

05:30.020 --> 05:30.940
就出问题了

05:30.940 --> 05:32.540
那如果说用户再恶心一点

05:32.540 --> 05:34.860
它给你填更多的东西

05:34.860 --> 05:36.260
它可以这样填

05:36.260 --> 05:37.420
用户填的是什么呢

05:37.420 --> 05:38.980
用户填的是这个

05:38.980 --> 05:40.660
填的是一个

05:40.660 --> 05:41.780
只有一个双硬号

05:42.500 --> 05:44.980
那么后边是不是可以写

05:44.980 --> 05:48.660
它可以把用户写来代码来在你的页面

05:48.660 --> 05:50.580
在别人用户的页面上可以运行

05:50.580 --> 05:51.660
这是很危险的

05:51.660 --> 05:52.900
所以说就是这么回事

05:52.900 --> 05:54.020
就是用户填的东西

05:54.020 --> 05:55.700
莫名其妙地跑到页面上去了

05:55.700 --> 05:57.340
跑到页面上去运行去了

05:57.340 --> 05:58.540
那么遇到这种情况

05:58.540 --> 05:59.580
你可以使用这个

05:59.580 --> 06:00.860
对js进行编码

06:00.860 --> 06:02.660
对js刚才是atmc

06:02.660 --> 06:03.940
js去进行编码的话

06:03.940 --> 06:06.260
那你可以使用这个sjs

06:06.260 --> 06:07.340
你看看它

06:07.340 --> 06:08.860
如果说不使用的话

06:08.860 --> 06:09.900
得到几个就这个

06:10.060 --> 06:11.380
那肯定是不对的

06:11.380 --> 06:13.180
那如果说使用了sjs

06:13.180 --> 06:14.580
你在这里拼接的时候

06:14.580 --> 06:18.540
你把这个sjs编码之后的结果

06:18.540 --> 06:19.700
拼接到这个位置

06:19.700 --> 06:21.540
那拼接到位置它就变成这个玩意儿

06:21.540 --> 06:22.860
那么这个玩意儿是咋的

06:22.860 --> 06:25.020
这个玩意儿其实就是它的制服编码

06:25.020 --> 06:26.780
16进资的制服编码

06:26.780 --> 06:29.140
席杠X变成这种格式了

06:29.140 --> 06:31.140
这样就是避免安全问题

06:33.140 --> 06:35.780
然后第三个就是针对一些

06:35.780 --> 06:37.780
一整段的ATM

06:37.780 --> 06:38.900
一整段的ATM

06:39.180 --> 06:40.900
一整段的ATM比方说

06:40.900 --> 06:42.740
特别像富文门框上传

06:42.740 --> 06:44.900
富文门框提交到服务系

06:44.900 --> 06:46.140
不就是一段ATM吗

06:46.140 --> 06:48.340
那么ATM里边你不能把所有的东西都编码了

06:48.340 --> 06:49.740
你如果说用第1个的话

06:49.740 --> 06:51.380
那是不是把所有的全部编码了

06:51.380 --> 06:52.340
肯定不行

06:52.340 --> 06:54.180
但是我要过滤掉危险制服

06:54.180 --> 06:57.180
那么这个时候用ssafe安全的ATM

06:57.180 --> 06:58.140
怎么用呢

06:58.140 --> 06:58.620
你看吧

06:58.620 --> 07:00.100
这里有一个字幕上

07:00.100 --> 07:01.460
里边是不是有一些元素

07:01.460 --> 07:03.700
还先端起拔招的一些属性

07:03.700 --> 07:04.020
对吧

07:04.020 --> 07:05.220
你端起拔招的一些属性

07:05.220 --> 07:06.100
那么这个玩意儿

07:06.100 --> 07:08.860
你把通过ATM编码过后

07:08.860 --> 07:09.380
你看

07:09.380 --> 07:11.100
端起拔招的属性没了

07:11.100 --> 07:12.420
只有一个title

07:12.420 --> 07:16.180
然后scripps危险的元素给你编码过了

07:16.180 --> 07:16.500
对吧

07:16.500 --> 07:19.180
它就给你成为这么一个效果

07:19.180 --> 07:20.020
那有一些同学说

07:20.020 --> 07:21.540
这里有顺便多说一句

07:21.540 --> 07:23.380
就是你看这个属性是不是没了

07:23.380 --> 07:24.980
这个属性不是正常属性吗

07:24.980 --> 07:26.500
为什么没了呢

07:26.500 --> 07:27.500
是因为这个他认为

07:27.500 --> 07:28.420
你访问的玉民

07:28.420 --> 07:30.380
跟当前的玉民是不一致的

07:30.380 --> 07:31.980
他不允许你访问战万的玉民

07:31.980 --> 07:33.380
只是他默认的规则

07:33.380 --> 07:33.940
默认的规则

07:33.940 --> 07:34.580
我们来看一下

07:37.060 --> 07:38.820
放哪了

07:38.820 --> 07:39.900
放就放Home

07:39.900 --> 07:41.500
就放这吧

07:41.500 --> 07:44.720
这个东西不要了

07:44.720 --> 07:45.400
好你看吧

07:45.400 --> 07:47.000
我们这里的CTS

07:47.000 --> 07:48.400
像这个

07:48.400 --> 07:51.880
原来到流量器里面去

07:53.160 --> 07:55.960
localhost127

07:55.960 --> 07:58.240
7000

07:58.240 --> 07:58.440
好

07:58.440 --> 07:59.960
然后我们看看服务器

07:59.960 --> 08:01.480
服务器输出的结果是什么的

08:01.480 --> 08:02.560
你看title有值

08:02.560 --> 08:03.160
对吧

08:03.160 --> 08:04.320
refer是什么没值的

08:04.320 --> 08:05.560
那么后边scripps的元素

08:05.560 --> 08:07.000
是不是给你编码过了

08:07.000 --> 08:07.560
对不对

08:07.560 --> 08:08.200
好那么这里

08:08.200 --> 08:09.560
这个下面一个就是警告

08:09.560 --> 08:11.480
这个警告是他内部的

08:11.480 --> 08:13.400
内部的有一些方法已经过期了

08:13.400 --> 08:14.120
他没有改

08:14.120 --> 08:15.720
那么将来他们升级过后了

08:15.720 --> 08:17.040
应该会改一下

08:17.040 --> 08:19.040
这里就是编码过后

08:19.040 --> 08:21.080
你看这些无效的属性是不是没了

08:21.080 --> 08:22.160
那么这个属性为什么没了

08:22.160 --> 08:23.840
因为他跟自己的地址不一致

08:23.840 --> 08:26.120
那如果说你这个属性是这样子写的

08:26.120 --> 08:27.320
那就没问题

08:27.320 --> 08:28.560
好

08:28.560 --> 08:29.480
现在我们看一下吧

08:31.080 --> 08:32.480
刷新

08:32.480 --> 08:33.520
你看是不是没问题

08:33.520 --> 08:34.360
就这么一回事

08:34.520 --> 08:37.400
他有一些默证的安全行为

08:37.400 --> 08:39.000
那么这个东西行为能不能改变

08:39.000 --> 08:39.720
是可以改变的

08:39.720 --> 08:40.560
怎么改变呢

08:40.560 --> 08:43.040
你因为它是放到harper方法里边的

08:43.040 --> 08:43.920
所以说你配置的时候

08:43.920 --> 08:45.560
来针对harper经营配置

08:45.560 --> 08:46.240
配置的时候

08:46.240 --> 08:49.280
你对satmail这个函数的经营配置

08:49.280 --> 08:50.200
那么这个配置呢

08:50.200 --> 08:51.000
你就可以得到

08:51.000 --> 08:52.040
你看可以看到

08:52.040 --> 08:53.840
外置里是表示白名单

08:53.840 --> 08:54.440
白名单呢

08:54.440 --> 08:56.680
就是说哪些元素我要

08:56.680 --> 08:58.960
我不过滤是正常的

08:58.960 --> 09:01.880
这个元素里边的哪些属性是正常的

09:01.880 --> 09:03.320
就是表示个白名单

09:03.360 --> 09:05.440
他默认你自己有自己的一套白名单

09:05.440 --> 09:05.600
好

09:05.600 --> 09:06.400
那么我们比较说

09:06.400 --> 09:08.080
那么下面还有一个do me whiteness的

09:08.080 --> 09:09.720
表示哪些域名

09:09.720 --> 09:11.560
我是可以链接的

09:11.560 --> 09:12.600
不管是超链接也好

09:12.600 --> 09:13.360
还是图片也好

09:13.360 --> 09:14.880
哪些域名我是允许的

09:14.880 --> 09:16.440
那么我们比方把这个加进去

09:16.440 --> 09:17.680
而如果说我们这样子写

09:18.640 --> 09:19.920
在这里

09:24.760 --> 09:26.320
那么如果说我们这样子配置到过后

09:26.320 --> 09:27.560
然后呢在这边

09:27.560 --> 09:28.120
嗯

09:28.120 --> 09:29.720
那么就使用这个吧

09:29.720 --> 09:30.800
那么现在我们

09:30.800 --> 09:31.440
清空一下啊

09:32.960 --> 09:33.720
刷新

09:33.720 --> 09:34.440
来这边来看一下

09:36.280 --> 09:36.720
刷一下

09:39.560 --> 09:41.000
哎他现在改了啊

09:41.000 --> 09:42.440
现在改了有改动

09:42.440 --> 09:43.120
他说什么呢

09:43.120 --> 09:44.600
黑耳朵这个玩意

09:44.600 --> 09:46.440
他说这个东西已经过时了

09:46.440 --> 09:47.720
这种配置已经过时了

09:47.720 --> 09:50.320
他让你去配置到security里边啊

09:50.320 --> 09:52.200
do me whiteness

09:52.200 --> 09:52.960
他让你配置到这儿

09:54.000 --> 09:54.440
那行吗

09:54.440 --> 09:55.880
那么按照他说的

09:55.880 --> 09:56.600
把这个whiteness

09:56.600 --> 09:57.920
do me whiteness配置到这儿

10:03.540 --> 10:04.500
简切

10:04.500 --> 10:06.580
配置到之前的这个security

10:06.580 --> 10:07.780
security里边放上

10:08.780 --> 10:09.780
好

10:09.780 --> 10:10.860
对呀

10:10.860 --> 10:12.580
就配置位置变了一下

10:12.580 --> 10:14.900
他就这样子逻辑更加清晰一点

10:14.900 --> 10:15.420
好刷新

10:16.660 --> 10:17.460
让你看

10:17.460 --> 10:18.940
就正常了对不对

10:18.940 --> 10:20.220
那就正常了

10:20.220 --> 10:21.500
就这么一回事啊

10:23.380 --> 10:24.460
好就是关于这个

10:24.460 --> 10:24.820
但是呢

10:24.820 --> 10:25.900
我这里说一下

10:25.900 --> 10:27.220
根据他官方文章的描述呢

10:27.220 --> 10:28.260
就这种

10:28.260 --> 10:30.020
啊你可以自己都可以想象的到

10:30.020 --> 10:31.060
因为一般来说

10:31.060 --> 10:32.500
你提交到复文闷框里边

10:32.500 --> 10:33.860
这个元素是不是特别特别多

10:33.860 --> 10:34.060
对吧

10:34.060 --> 10:35.620
你对每一个元素要检查一遍

10:35.620 --> 10:37.380
是不是非常影响效率

10:37.380 --> 10:38.100
所以说呢

10:38.100 --> 10:39.780
他认为了这个东西呢

10:39.780 --> 10:40.580
一般来说

10:40.580 --> 10:43.180
指示人用来处理用户的复文闷框

10:43.180 --> 10:44.500
不要去耐用他

10:44.500 --> 10:47.140
因为这个东西一旦耐用的话

10:47.140 --> 10:50.780
他会严重的影响效率

10:50.780 --> 10:51.820
如果说比方说

10:51.820 --> 10:53.980
有些内容他不是复文闷框

10:53.980 --> 10:55.900
他就是一个普通的文闷框

10:55.900 --> 10:56.620
那么这种东西呢

10:56.620 --> 10:59.220
你直接使用escape就行了

10:59.220 --> 10:59.700
复文闷框

10:59.700 --> 11:01.100
因为他要提交元素嘛

11:01.100 --> 11:02.020
对不对

11:02.020 --> 11:02.540
啊其实呢

11:02.540 --> 11:04.940
你不用在显示的时候呢

11:04.940 --> 11:06.420
他其实不用在显示的时候

11:06.460 --> 11:08.540
把他编码过来输出

11:08.540 --> 11:08.980
一般来说

11:08.980 --> 11:10.940
上传到复文闷框提交的时候呢

11:10.940 --> 11:12.340
就直接把这个东西

11:12.340 --> 11:13.980
编码过后的结果存到数据户了

11:13.980 --> 11:15.060
到时候直接把数据户拿回来

11:15.060 --> 11:16.860
直接显示了

11:16.860 --> 11:18.700
因为存只有一次

11:18.700 --> 11:20.260
而读是不是很多次

11:20.260 --> 11:20.700
对吧

11:20.700 --> 11:22.420
尽量的提高效率

11:22.420 --> 11:25.060
好这是xss防护

11:25.060 --> 11:25.780
那么这个东西呢

11:25.780 --> 11:26.500
还有更多的东西

11:26.500 --> 11:28.540
你可以参考一下官方文道

11:28.540 --> 11:29.300
接下来说一下

11:29.300 --> 11:31.020
这个csi防护

11:31.020 --> 11:33.860
就是跨战请求伪造

11:33.860 --> 11:34.700
这就是啥意思呢

11:34.700 --> 11:39.140
就是用户了访问过我的网站

11:39.140 --> 11:41.260
将来有一天他就访问别的网站去了

11:41.260 --> 11:41.980
在别的网站呢

11:41.980 --> 11:43.980
有个链接刷就电到我这儿了

11:43.980 --> 11:44.780
可能是一个表单

11:44.780 --> 11:46.020
提交到我这儿了

11:46.020 --> 11:47.060
那么这样子以来呢

11:47.060 --> 11:50.820
用户就在别人的通过别人的网站

11:50.820 --> 11:53.700
把我的网站的cookie给我提过来了

11:53.700 --> 11:55.140
他都莫名其妙的

11:55.140 --> 11:56.620
他认为是提交的是别人的网站

11:56.620 --> 11:57.700
结果是提交的是我的网站

11:57.700 --> 11:59.340
我们来看一下那边

11:59.340 --> 12:00.780
它的解决方式呢

12:00.780 --> 12:02.140
是使用token的方式来解决

12:02.140 --> 12:03.580
这是我们在逗的介事里面讲过的

12:03.580 --> 12:03.980
对吧

12:04.020 --> 12:06.180
那么它的具体的解决方式是这样子的

12:06.180 --> 12:06.940
就浏览器呢

12:06.940 --> 12:08.340
他请求我们的服务器

12:08.340 --> 12:08.780
服务器呢

12:08.780 --> 12:10.780
他就会自动生成一个token

12:10.780 --> 12:11.380
这个token呢

12:11.380 --> 12:13.420
现在我是把关掉了啊

12:13.420 --> 12:14.540
现在我是把关掉了

12:15.980 --> 12:16.380
在这

12:18.980 --> 12:20.700
这4s rf是把关掉了

12:20.700 --> 12:21.100
对吧

12:21.100 --> 12:21.940
避免之前出问题

12:21.940 --> 12:22.940
那么现在把打开啊

12:22.940 --> 12:23.740
他默认就打开了

12:23.740 --> 12:25.140
你不用配置打开了

12:25.140 --> 12:25.780
好打开过后

12:25.780 --> 12:26.660
我们再看一下刷新

12:28.820 --> 12:29.220
你看

12:29.220 --> 12:31.580
褲里面还会多一个4s rf token

12:31.580 --> 12:33.580
生成一个水系的token

12:33.620 --> 12:34.940
那么这个token有什么用呢

12:34.940 --> 12:36.460
他会把这个token加到cookie里面

12:36.460 --> 12:37.860
发送到浏览器

12:37.860 --> 12:38.620
同时呢

12:38.620 --> 12:39.620
你要做的事情就是

12:39.620 --> 12:42.100
还要把这个token加到表达里面去

12:42.100 --> 12:43.500
然后回馈给浏览器

12:43.500 --> 12:44.580
那么就有一个表达页面了

12:44.580 --> 12:44.980
对吧

12:44.980 --> 12:46.140
那不一定有表达页面啊

12:46.140 --> 12:46.780
就是说

12:46.780 --> 12:47.780
他针对的主要是

12:47.780 --> 12:49.500
他要验证安全的

12:49.500 --> 12:51.140
主要是针对迫射请求

12:51.140 --> 12:51.660
因为盖着请求

12:51.660 --> 12:53.500
我们之前的读的介事都讲过对吧

12:53.500 --> 12:54.180
盖着请求了

12:54.180 --> 12:56.300
一般不要去改变资源

12:56.300 --> 12:57.180
所以影响不大

12:57.180 --> 12:59.060
主要是关于是迫射请求

12:59.060 --> 13:01.260
要改动资源的

13:01.260 --> 13:02.020
那么这个时候呢

13:04.220 --> 13:04.820
开启过后呢

13:04.820 --> 13:06.860
我们表达里面是没有这个token的

13:06.860 --> 13:07.060
对吧

13:07.060 --> 13:08.700
表达里面是没有这个token的

13:08.700 --> 13:09.740
那么这个时候呢

13:09.740 --> 13:10.140
你看

13:10.140 --> 13:12.500
他扔到表达页面给浏览器

13:12.500 --> 13:14.380
浏览器提交迫射请求的时候呢

13:14.380 --> 13:15.740
服务器要对比token

13:15.740 --> 13:17.980
就是把表达通常token

13:17.980 --> 13:19.900
和我们这里的token要进行对比

13:19.900 --> 13:21.940
那由于现在表达里面有没有token

13:21.940 --> 13:22.420
没有token

13:22.420 --> 13:23.380
所以说他对比失败

13:23.380 --> 13:24.780
是零三不必的

13:24.780 --> 13:27.700
然后什么无销的CSRFtoken

13:27.700 --> 13:28.900
表达里面没有给他token

13:28.900 --> 13:29.620
他就没有办法

13:29.620 --> 13:31.500
跟那个cookie里面的token进对比

13:31.500 --> 13:32.740
因为我们下一次请求的时候

13:32.780 --> 13:34.100
是不是要把cookie传过去

13:34.100 --> 13:35.380
同时把表达传过去

13:35.380 --> 13:36.420
表达里面要带个token

13:37.940 --> 13:38.620
明白的意思吧

13:38.620 --> 13:40.140
他其实不一定在表达里面

13:40.140 --> 13:41.100
请提交的时候

13:41.100 --> 13:43.420
你可以在地址南参数里面加token也行

13:43.420 --> 13:44.380
总之把两个

13:44.380 --> 13:46.100
cookie的token还会自动传递

13:46.100 --> 13:48.900
同时你要还要手动的传递一个token到服务器

13:48.900 --> 13:49.940
那么服务器要对比

13:49.940 --> 13:50.500
自动对比呢

13:50.500 --> 13:52.380
还可以两个相等

13:52.380 --> 13:53.940
然后对比ok

13:53.940 --> 13:55.420
不一定要也不一定要相等

13:55.420 --> 13:57.420
比方说我把这个token的进行用一个

13:57.420 --> 13:58.980
力药加密加密过后

13:58.980 --> 14:00.300
或者自己加一个水积数

14:00.300 --> 14:01.620
然后生成一个水积的支付出来

14:01.660 --> 14:02.900
总之两个要对应

14:02.900 --> 14:04.180
你不管他用什么样的算法

14:04.180 --> 14:05.580
总之要对应就行了

14:05.580 --> 14:06.700
如果说对比成功的话

14:06.700 --> 14:07.540
那就ok

14:07.540 --> 14:07.700
对吧

14:07.700 --> 14:08.700
这正常情况

14:08.700 --> 14:10.380
那么有了这个防护过后了

14:10.380 --> 14:11.340
我们来看一下

14:11.340 --> 14:12.980
有人他

14:12.980 --> 14:15.300
他针对一些恶意的服务器

14:15.300 --> 14:16.700
能不能再进行攻击了

14:16.700 --> 14:18.740
我们浏览器去请求恶意服务器

14:18.740 --> 14:19.700
敌方服务器

14:19.700 --> 14:21.100
服务器给了一个表达页面

14:21.100 --> 14:22.220
因为他没法给你一个token

14:22.220 --> 14:22.540
对吧

14:22.540 --> 14:24.100
他不知道你的token是啥

14:24.100 --> 14:25.020
他不知道之前

14:25.020 --> 14:26.220
那个cookie里面的token是啥

14:26.220 --> 14:27.700
他又获取不到你的token

14:27.700 --> 14:28.420
所以他没办法

14:28.420 --> 14:30.060
他只能给一个纯粹的表达页面

14:30.100 --> 14:31.340
那么他就希望一个表达页面

14:31.340 --> 14:32.180
能够进行攻击

14:32.180 --> 14:33.420
因为他的表达页面里边

14:33.420 --> 14:34.340
他这个action

14:34.340 --> 14:35.860
他就提交到我的服务器了

14:35.860 --> 14:36.060
对吧

14:36.060 --> 14:38.220
他希望通过这个表达页面进行攻击

14:38.220 --> 14:39.020
那么浏览器那边

14:39.020 --> 14:39.580
他不知道

14:39.580 --> 14:42.500
因为拥护他不知道这些技术细节

14:42.500 --> 14:43.540
他认为那个表达页面的

14:43.540 --> 14:44.340
就是这个服务器的

14:44.340 --> 14:45.620
他不认为他完全想不到

14:45.620 --> 14:46.260
这个表达页面

14:46.260 --> 14:47.300
会跟另外一个服务器

14:47.300 --> 14:48.820
就是跟我们的服务器打交道

14:48.820 --> 14:51.820
比方说我们做的是新浪

14:51.820 --> 14:52.820
新浪有一个表达

14:52.820 --> 14:54.020
那么在新浪的表达

14:54.020 --> 14:57.620
在新浪里边处理用户是没问题的

15:00.780 --> 15:02.140
一个小网站

15:02.140 --> 15:02.740
那个小网站

15:02.740 --> 15:03.740
他向攻击新浪

15:03.740 --> 15:04.660
他就给你提供一个表达

15:04.660 --> 15:06.140
那个表达就提了新浪的服务器

15:06.140 --> 15:07.060
但拥护不知道

15:07.060 --> 15:08.020
他认为他访问的是

15:08.020 --> 15:09.620
这个网站给新浪有什么关系呢

15:09.620 --> 15:10.860
于是他就提交

15:10.860 --> 15:13.020
结果他就把琴球说到了

15:13.020 --> 15:14.580
这个我的服务器了

15:14.580 --> 15:16.660
但是有一些人有验证

15:16.660 --> 15:19.140
我们要对比他提交过来的头肯

15:19.140 --> 15:20.460
他没有头肯对吧

15:20.460 --> 15:20.900
他没有头肯

15:20.900 --> 15:22.020
他会哭泣会不会传过来

15:22.020 --> 15:22.340
会

15:22.340 --> 15:23.780
因为他统一个域名厦

15:23.780 --> 15:25.340
就在我们这个服务器的域名厦

15:25.340 --> 15:26.420
他会把我们服务器的

15:26.420 --> 15:28.700
域名厦里面的头肯传过来

15:28.700 --> 15:29.740
但是他由于表达

15:29.740 --> 15:30.460
你没有头肯

15:30.460 --> 15:31.500
他就没法对比

15:31.500 --> 15:32.580
对比就失败了

15:32.580 --> 15:33.780
这个琴球就失败了

15:33.780 --> 15:35.460
他就起了这么一个作用

15:35.460 --> 15:36.300
就是我们要做的

15:36.300 --> 15:37.860
就是在我们的网站里面了

15:37.860 --> 15:39.180
只需要

15:39.180 --> 15:40.220
他提交表达的时候

15:40.220 --> 15:41.980
把头肯带过来就完成了

15:41.980 --> 15:43.500
那怎么带过来了

15:43.500 --> 15:44.620
怎么带过来呢

15:44.620 --> 15:45.260
比方说吧

15:45.260 --> 15:46.100
我随便举个例子

15:46.100 --> 15:47.540
随便举个例子

15:49.540 --> 15:50.500
比方说这吧

15:50.500 --> 15:52.860
这里我们的locking里边

15:52.860 --> 15:55.460
这边我们加一个input元素

15:55.500 --> 15:56.980
加个input元素

15:56.980 --> 15:58.620
然后呢

15:58.620 --> 16:00.540
他这个就是自断的名字的

16:00.540 --> 16:03.780
他默认是csrf

16:03.780 --> 16:05.460
自断的名字默认是这个

16:05.460 --> 16:07.580
你需要在表达里面加入这个自断

16:07.580 --> 16:09.300
然后把值写成什么呢

16:09.300 --> 16:11.300
值可以写成跟头肯完全一样

16:11.300 --> 16:12.820
比方说我们来看一下

16:12.820 --> 16:13.180
放心

16:13.180 --> 16:14.100
就多了一个文门框

16:14.100 --> 16:15.020
那你这个文门框里面

16:15.020 --> 16:17.460
你只需要把这个头肯让用户

16:17.460 --> 16:18.660
把这个头肯复制过来

16:18.660 --> 16:20.020
那都是扯淡

16:20.020 --> 16:22.740
把这个头肯复制过来

16:22.740 --> 16:24.020
好提交

16:24.020 --> 16:25.020
是不是服务器就扔了

16:25.300 --> 16:26.500
两个头肯一样

16:26.500 --> 16:27.740
表达里面有头肯

16:27.740 --> 16:28.820
提交到服务器有头肯

16:28.820 --> 16:30.340
然后cookie他会自动会带过去

16:30.340 --> 16:31.500
什么两个一对比就一样

16:31.500 --> 16:32.420
那么就是正常的

16:32.420 --> 16:34.700
按照正常的业务逻辑处理就行了

16:34.700 --> 16:36.940
他实际上是给你加了个中间键

16:36.940 --> 16:38.100
当然这种写法不可能的

16:38.100 --> 16:38.340
对吧

16:38.340 --> 16:39.540
你不可能让用户去点这个

16:39.540 --> 16:40.620
然后复制过来

16:40.620 --> 16:42.060
所以说我们要这里可以手动的

16:42.060 --> 16:42.780
给它夹过来

16:42.780 --> 16:44.220
那么这里是不是可以写CS代码

16:44.220 --> 16:46.700
把手动的把cookie里面的东西放过来

16:46.700 --> 16:47.100
而且呢

16:47.100 --> 16:49.300
其实这里更简单的是什么呢

16:49.300 --> 16:50.740
是直接服务器里面

16:50.740 --> 16:51.460
给有个函数

16:51.460 --> 16:54.140
叫context里面CSIF函数

16:54.140 --> 16:54.740
不是函数

16:54.740 --> 16:55.980
一个属性

16:55.980 --> 16:57.300
直接通过这个属性

16:57.300 --> 16:59.060
是不是就会拿到这个头肯的

16:59.060 --> 17:00.980
而且这个头肯呢

17:00.980 --> 17:01.700
发现

17:01.700 --> 17:02.180
亲兄

17:02.180 --> 17:02.980
你看是不是拿到了

17:02.980 --> 17:05.180
但这个头肯每一次是不会变化的

17:05.180 --> 17:06.060
这个头肯是怎么来的

17:06.060 --> 17:07.340
就是根据这个

17:07.340 --> 17:08.780
cookie里面的头肯生成的

17:08.780 --> 17:09.780
那两个是对应的

17:09.780 --> 17:10.620
不是完全一样

17:10.620 --> 17:11.180
是对应的

17:11.180 --> 17:12.540
它服务器能解析的

17:12.540 --> 17:13.260
那么这样子

17:13.260 --> 17:14.300
是不是也没问题

17:14.300 --> 17:15.340
只不过这种看上去

17:15.340 --> 17:16.180
很不舒服对吧

17:16.180 --> 17:17.420
所以发力隐藏掉就行了

17:17.420 --> 17:18.540
拍一张

17:18.540 --> 17:19.940
这是最常见的

17:19.980 --> 17:21.140
这是最常见的做法

17:22.900 --> 17:23.220
拍一张

17:23.220 --> 17:26.310
隐藏掉就完事了

17:26.310 --> 17:27.510
隐藏掉就完事了

17:27.510 --> 17:28.950
现在就没事了

17:28.950 --> 17:29.470
对不对

17:29.470 --> 17:30.550
就这么一个处理

17:30.550 --> 17:32.190
都是放到表单里面

17:32.190 --> 17:32.710
那么放的

17:32.710 --> 17:33.390
还有一种方式

17:33.390 --> 17:34.590
是放到地址栏树里面

17:34.590 --> 17:35.150
地址栏树

17:35.150 --> 17:37.910
它也是加上一个参数

17:37.910 --> 17:39.270
加上一个参数

17:39.270 --> 17:42.660
然后把这个放进去

17:42.660 --> 17:44.940
对吧

17:44.940 --> 17:46.580
这个写上去了好像要简单一点

17:46.580 --> 17:47.780
都要少写个元素

17:47.780 --> 17:48.460
但是这样子

17:48.460 --> 17:49.500
我不是很推荐

17:49.500 --> 17:49.900
为什么呢

17:49.900 --> 17:52.340
你提交

17:52.380 --> 17:53.500
是暴露在这了

17:53.500 --> 17:54.300
对吧

17:54.300 --> 17:54.980
不是很好

17:54.980 --> 17:55.420
不是很好

17:55.420 --> 17:56.660
不要暴露在这

17:56.660 --> 17:57.940
这是关于这个

17:57.940 --> 18:00.500
最好就是要放到表单里面

18:00.500 --> 18:02.100
就关于这个

18:02.100 --> 18:03.180
所以说这两种方式

18:03.180 --> 18:05.780
很容易解决的

18:05.780 --> 18:05.980
好

18:05.980 --> 18:06.340
然后呢

18:06.340 --> 18:09.060
是这个在

18:09.060 --> 18:11.860
就是有可以进行一些配置

18:11.860 --> 18:12.740
可以进行一些配置

18:12.740 --> 18:13.180
那么如果说

18:13.180 --> 18:14.900
你针对阿迦克斯请求的话

18:14.900 --> 18:16.260
比方说我这里不是表单提交

18:16.260 --> 18:20.060
我是用7S代码进行阿迦克斯请求

18:20.060 --> 18:21.620
我一个阿迦克斯函数

18:21.820 --> 18:22.900
请求

18:22.900 --> 18:24.700
那么请求了一个地址

18:24.700 --> 18:26.140
什么UIL地址

18:26.140 --> 18:27.060
然后请求的时候

18:27.060 --> 18:29.020
你无非就是把UIL地址

18:29.020 --> 18:30.180
加上个query对吧

18:30.180 --> 18:31.020
参数

18:31.020 --> 18:31.820
query呢

18:31.820 --> 18:32.980
就是不管你用什么框架

18:32.980 --> 18:34.100
总之你把加到一个地址

18:34.100 --> 18:34.900
参数里面

18:34.900 --> 18:35.540
加上一个什么

18:35.540 --> 18:37.180
加上一个CSRF

18:37.180 --> 18:39.220
CSRF

18:39.220 --> 18:39.980
然后呢

18:39.980 --> 18:41.340
把Cookie里面对吧

18:41.340 --> 18:42.300
get cookie

18:42.300 --> 18:44.860
Cookie里面的这个什么CSRF

18:44.860 --> 18:46.660
token

18:46.660 --> 18:47.980
把Cookie数读出来

18:47.980 --> 18:49.460
就是把Cookie读出来

18:49.460 --> 18:51.060
两个一样就行了

18:51.140 --> 18:52.140
因为到了客户端的话

18:52.140 --> 18:54.620
你是无法使用到服务器那些东西的

18:54.620 --> 18:55.060
对吧

18:55.060 --> 18:55.860
你把得到就行了

18:55.860 --> 18:57.260
能到服务器就可以了

18:57.260 --> 18:58.380
也很简单

18:58.380 --> 18:59.860
当然你可以用一个小时的话

18:59.860 --> 19:01.140
是不是可以封装一下

19:01.140 --> 19:01.300
对吧

19:01.300 --> 19:02.660
这一段都做过的

19:04.020 --> 19:04.180
好

19:04.180 --> 19:06.620
这是关于这个验证

19:07.780 --> 19:08.540
它可以进行配置

19:08.540 --> 19:09.580
因为它本质上的表现

19:09.580 --> 19:10.660
就是一个中间键

19:10.660 --> 19:11.660
所以它配置的时候

19:11.660 --> 19:12.500
中间键能配置的

19:12.500 --> 19:13.860
它也能配置

19:13.860 --> 19:15.380
它首先有一些自己的特有的配置

19:15.380 --> 19:17.420
比方说UILC的用品

19:17.420 --> 19:18.220
都用不到

19:18.220 --> 19:19.500
它就是把它保存到Cookie里面

19:19.500 --> 19:20.860
要不要保存到Cookie里面

19:20.860 --> 19:21.660
如果说要的话

19:21.660 --> 19:23.500
它就会自动保存到Cookie

19:23.500 --> 19:25.460
那么如果这里Cookie name

19:25.460 --> 19:27.420
表示这个就是Cookie的名字

19:27.420 --> 19:28.740
Cookie name

19:28.740 --> 19:29.860
不需要

19:29.860 --> 19:30.940
不需要

19:30.940 --> 19:31.940
CSRF

19:31.940 --> 19:32.340
对吧

19:32.340 --> 19:33.420
就是这么一个意思

19:33.420 --> 19:34.380
它还可以配置什么

19:34.380 --> 19:36.340
还可以配置这个Body

19:36.340 --> 19:38.660
叫Body name

19:38.660 --> 19:39.420
Body name

19:39.420 --> 19:40.740
那么配置Modern值

19:40.740 --> 19:42.540
就是CSRF

19:42.540 --> 19:45.620
还有什么Query name

19:45.620 --> 19:46.540
这里要不要打一下

19:46.540 --> 19:48.900
好像要打一下

19:48.900 --> 19:49.900
插一下光光的

19:49.940 --> 19:53.580
没人能别的搞错了

19:53.580 --> 19:55.940
是哪

19:55.940 --> 19:58.940
安全

19:58.940 --> 19:59.820
CSRF

19:59.820 --> 20:01.620
应该是有Query name

20:01.620 --> 20:02.180
Body name

20:02.180 --> 20:05.070
没问题

20:05.070 --> 20:05.670
那么这里

20:05.670 --> 20:07.510
两个Modern值都是CSRF

20:07.510 --> 20:08.950
也可以配置为别的什么玩意

20:08.950 --> 20:11.230
这个东西都无所谓的

20:11.230 --> 20:12.830
因为它本身是一个中间键

20:12.830 --> 20:14.390
所以说它支持中间键的配置

20:14.390 --> 20:15.030
我们之前讲过了

20:15.030 --> 20:15.230
对吧

20:15.230 --> 20:15.750
Inlabel

20:15.750 --> 20:18.790
之前我们就配置了Inlabel

20:18.790 --> 20:20.830
之前也配置了Inlabel

20:20.830 --> 20:21.990
对不对

20:22.030 --> 20:23.150
还有什么March

20:23.150 --> 20:23.670
一个LOG

20:23.670 --> 20:25.590
就是匹配到什么地址的时候

20:25.590 --> 20:28.350
我才会使用这个中间键

20:28.350 --> 20:29.630
匹配到另一些地址的时候

20:29.630 --> 20:30.710
我就不使用了

20:30.710 --> 20:33.310
比方说我在这里去写一个LOG

20:33.310 --> 20:35.430
可以设置API

20:35.430 --> 20:36.630
反正是也API开头的

20:36.630 --> 20:39.030
我就不使用安全验证了

20:39.030 --> 20:40.070
当然所谓前提条件

20:40.070 --> 20:43.790
你得知道你自己来干嘛

20:43.790 --> 20:44.150
好了

20:44.150 --> 20:45.670
因为API有一个问题

20:45.670 --> 20:46.190
就是跨域

20:46.190 --> 20:46.750
对不对

20:46.750 --> 20:47.830
它有个跨域验证

20:47.830 --> 20:49.950
所以说你要在别的网站里面

20:49.950 --> 20:51.270
像跨域访问我这个地方

20:51.430 --> 20:52.110
也跨域不了

20:53.670 --> 20:54.150
好了

20:54.150 --> 20:58.590
那么这就是关于这一块的

20:58.590 --> 21:00.350
这些内容安全

21:00.350 --> 21:01.430
那么更多的安全方式

21:01.430 --> 21:02.110
下面还有很多

21:02.110 --> 21:03.310
大家有兴趣的话可以看一看

