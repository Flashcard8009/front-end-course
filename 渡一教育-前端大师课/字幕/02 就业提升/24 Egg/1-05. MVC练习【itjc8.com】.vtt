WEBVTT

00:00.000 --> 00:03.600
好 来啊 咱们做一个练习

00:03.600 --> 00:06.000
首先模式这一块的场景呢

00:06.000 --> 00:08.600
我们就是有比方说有个后端服务器

00:08.600 --> 00:09.600
这个后端服务器呢

00:09.600 --> 00:11.600
就利用我之前给大家写好的吧

00:11.600 --> 00:12.800
一个服务器

00:12.800 --> 00:14.000
然后呢

00:14.000 --> 00:16.400
它提供了一些业务数据的API

00:16.400 --> 00:18.000
就是通过接生格式返回

00:18.000 --> 00:18.800
那么这个呢

00:18.800 --> 00:19.500
我们这边呢

00:19.500 --> 00:21.000
得做一个中间服务器

00:21.000 --> 00:22.200
这个中间服务器呢

00:22.200 --> 00:23.100
没有什么数据库

00:23.100 --> 00:24.400
目前不设计的数据库

00:24.400 --> 00:25.900
就是把业务数据呢

00:25.900 --> 00:28.000
封装成一些动态的页面

00:28.000 --> 00:29.900
然后提供一些静态资源

00:29.900 --> 00:31.800
供科普端访问

00:31.800 --> 00:33.300
我们要实现一个什么样的功能呢

00:33.300 --> 00:35.000
我们实现这么一个功能

00:35.000 --> 00:36.600
简单一点啊

00:36.600 --> 00:41.800
我们要实现的功能是一个是登录

00:41.800 --> 00:44.600
一个是访问的是首页

00:44.600 --> 00:45.800
一个登录一个首页

00:45.800 --> 00:48.800
首页必须要登录之后才能访问

00:48.800 --> 00:53.000
首页必须要登录之后才能访问

00:53.000 --> 00:55.100
通过这么一个简单的例子呢

00:55.100 --> 00:57.500
来给大家说明这个MVC模式

00:57.500 --> 01:00.000
它到底是一个怎么样的开发模式

01:00.000 --> 01:02.500
实际上MVC呢是一个以前啊

01:02.500 --> 01:04.700
是存后端的知识啊

01:04.700 --> 01:06.700
现在呢后端不想做了

01:06.700 --> 01:08.700
觉得我去搞这个MVC

01:08.700 --> 01:10.000
把我的精力分散呢

01:10.000 --> 01:12.000
我还是专心搞业务数据

01:12.000 --> 01:15.100
所以现在呢这一块呢有可能啊

01:15.100 --> 01:16.600
可能会交给前端来做

01:16.600 --> 01:19.200
那么如果说你将来在公司里面遇到了

01:19.200 --> 01:21.500
公司要你去用服务端渲染

01:21.500 --> 01:24.100
并且要使用传统的这种MVC模式

01:24.100 --> 01:26.000
而不是使用唯有SSR

01:26.000 --> 01:27.800
也不使用ReactSSR

01:27.800 --> 01:29.500
用传统的这种模式来做的话

01:29.600 --> 01:31.200
你可以选择ReactSSR

01:31.200 --> 01:33.600
ReactSSR特别适合干这种事情

01:33.600 --> 01:35.100
原来的意思吧

01:35.100 --> 01:36.200
但是呢我要告诉大家

01:36.200 --> 01:38.800
为什么这门课是选修课呢

01:38.800 --> 01:40.100
绝大部分情况下

01:40.100 --> 01:40.800
你到了公司

01:40.800 --> 01:42.600
他都不会让你干这个事

01:42.600 --> 01:45.000
因为凡是学后端的

01:45.000 --> 01:46.700
他不可能没有学过这个玩意儿

01:46.700 --> 01:47.700
不可能

01:47.700 --> 01:49.500
他一定学过这个玩意儿

01:49.500 --> 01:51.500
所以说呢如果说这个

01:51.500 --> 01:53.500
真的是用以前的那种传统的方式

01:53.500 --> 01:54.200
来做的话

01:54.200 --> 01:55.400
基本上就交给后端了

01:55.400 --> 01:56.300
也不用管啊

01:56.300 --> 01:58.100
你就写写一面效果就完事了

01:58.200 --> 01:59.600
也不用也不需要用Viu

01:59.600 --> 02:00.700
也不需要用React

02:00.700 --> 02:01.700
有可能会用到

02:01.700 --> 02:03.000
总之呢他按照他的要求

02:03.000 --> 02:06.500
你写这个存存客户端的代码就行了

02:06.500 --> 02:07.800
如果说你到公司里边

02:07.800 --> 02:09.500
哎我们确实需要服务端渲染的

02:09.500 --> 02:11.800
后端又不想做这个事

02:11.800 --> 02:16.500
那么一般会让你去用ViuSSR和ReactSSR

02:16.500 --> 02:18.000
或者是你啥都不用管

02:18.000 --> 02:19.000
他们那边

02:19.000 --> 02:21.100
我们因为我们之前学过ReactSSR

02:21.100 --> 02:21.800
对吧

02:21.800 --> 02:23.800
里边不是不是有一个pray render吗

02:23.800 --> 02:24.100
对吧

02:24.100 --> 02:26.100
预渲染这个一个cool

02:26.100 --> 02:27.600
那么你就跟你就没有什么关系了

02:27.600 --> 02:30.500
还是老老实实写客户端代码

02:30.500 --> 02:33.200
说这个Agg呢也挺尴尬的

02:33.200 --> 02:35.000
他能不能做单业应用程序呢

02:35.000 --> 02:36.700
能不能搭建单业应用程序可以

02:36.700 --> 02:38.200
但是能搭建单业应用程序

02:38.200 --> 02:39.300
何必用到他呢

02:39.300 --> 02:41.000
杀鸡烟用刘刀呢

02:41.000 --> 02:42.000
何必用到他呢

02:42.000 --> 02:43.000
没有什么必要的

02:43.000 --> 02:44.700
啊

02:44.700 --> 02:46.200
所以说就是这么一个情况啊

02:46.200 --> 02:47.800
情况就这么个情况

02:47.800 --> 02:49.700
嗯我们既然在学Agg

02:49.700 --> 02:52.000
那么还是用传统的这种模式来

02:52.000 --> 02:52.600
来吧

02:52.600 --> 02:55.300
一个登录一个首页登录的话

02:55.300 --> 02:57.200
我决定用这个这个地址来登录

02:58.200 --> 03:00.800
首页的话我就用这个地址

03:00.800 --> 03:01.000
好

03:01.000 --> 03:02.200
那怎么来写呢

03:02.200 --> 03:05.200
我们首先到这个这个里边去

03:05.200 --> 03:06.200
plugin

03:06.200 --> 03:07.900
app里边去找到这个楼头

03:07.900 --> 03:09.600
首先来注册这个路由

03:09.600 --> 03:12.100
路由的话鞋杠就用home index

03:12.100 --> 03:13.900
就用这个home index

03:13.900 --> 03:15.700
如果说登录的话

03:15.700 --> 03:16.000
get

03:17.600 --> 03:20.200
登录我们就用鞋杠

03:20.200 --> 03:20.600
login

03:22.200 --> 03:23.000
找到什么

03:23.000 --> 03:23.700
home

03:23.700 --> 03:25.400
找到user点login

03:26.500 --> 03:26.800
对不对

03:27.300 --> 03:28.300
好登录的时候呢

03:28.300 --> 03:30.000
因为是传统的这种模式啊

03:30.000 --> 03:32.300
登录其实是有两个访问的

03:32.300 --> 03:32.900
什么访问呢

03:32.900 --> 03:35.500
如果说用get请求请求这个地址的话

03:35.500 --> 03:37.000
我们看到的是一个登录页面

03:37.000 --> 03:37.200
对吧

03:37.200 --> 03:39.900
有两个文凳框账号密码让你填写

03:39.900 --> 03:41.700
它是给力的一个页面

03:41.700 --> 03:43.900
而如果说我们点击的登录提交

03:43.900 --> 03:45.900
是不是一个poser请求又到服务器了

03:45.900 --> 03:46.200
对吧

03:46.200 --> 03:47.000
不是阿迦克斯哦

03:47.000 --> 03:48.400
现在是传统的这种模式

03:48.400 --> 03:49.600
他不是阿迦克斯

03:49.600 --> 03:51.500
那么有一个新的请求到服务器了

03:51.500 --> 03:51.900
所以说呢

03:51.900 --> 03:54.700
我们还要给他注册一个poser请求啊

03:54.700 --> 03:55.500
比方说我们这里呢

03:55.500 --> 03:56.900
可以这样子去

03:58.200 --> 03:59.200
get

03:59.200 --> 04:00.200
posed

04:02.200 --> 04:03.500
还是请求这个地址

04:03.500 --> 04:04.200
当然这个地址呢

04:04.200 --> 04:05.200
也可以变一变啊

04:05.200 --> 04:07.200
我们交给这个这个来处理

04:07.200 --> 04:09.700
user handle login来处理

04:09.700 --> 04:11.000
啊因为那意思啊

04:11.000 --> 04:12.200
我们就注册了三个路由

04:12.200 --> 04:13.500
一个是请求首页

04:13.500 --> 04:14.900
一个是请求登录页

04:14.900 --> 04:16.400
一个是提交登录

04:16.400 --> 04:17.800
对吧提交登录也是个请求

04:17.800 --> 04:19.700
一个poser请求交给服务器处理

04:19.700 --> 04:21.100
跟阿迦克斯没有什么关系的

04:21.100 --> 04:22.700
这是非常非常传统的模式

04:22.700 --> 04:25.000
啊咱们还可以体会一下啊

04:25.000 --> 04:26.700
传统就是很早很早以前

04:27.000 --> 04:30.400
加把这一程序员是怎么来开发页面的

04:30.400 --> 04:31.700
也挺有意思的

04:31.700 --> 04:35.000
只不过跟现在的前段空下笔写就很now了

04:36.100 --> 04:37.800
好咱们写好了啊

04:37.800 --> 04:38.300
把个删掉

04:39.400 --> 04:41.100
然后接下来我们来写action

04:41.100 --> 04:41.900
Home里边呢

04:41.900 --> 04:43.200
我们有个啊

04:43.200 --> 04:43.800
因这个事呢

04:43.800 --> 04:45.500
我们就宣了就宣这个模板吧

04:45.500 --> 04:47.200
Home啊

04:47.200 --> 04:48.200
要不要给他数据呢

04:48.200 --> 04:48.900
暂时不给吗

04:48.900 --> 04:50.200
以后我们想到了再给

04:51.200 --> 04:52.700
这是宣了Home啊

04:52.700 --> 04:53.000
然后呢

04:53.000 --> 04:54.800
我们还需要写一个user

04:54.800 --> 04:55.600
对吧

04:55.600 --> 04:57.200
user的解释

04:57.200 --> 04:57.400
好

04:57.400 --> 04:58.500
这边复制一下吧

05:00.000 --> 05:02.200
刚才我就直接直接这样导出得了

05:03.400 --> 05:04.500
直接导出得了

05:04.500 --> 05:05.800
一个立名类

05:05.800 --> 05:06.800
这边也写

05:06.800 --> 05:08.400
这样子写来简洁一点啊

05:09.800 --> 05:10.200
复制

05:11.100 --> 05:11.600
没问题吧

05:11.600 --> 05:12.800
一波不要告诉我看不懂啊

05:13.700 --> 05:14.800
看不懂我就去撞墙了

05:16.600 --> 05:17.800
这边呢

05:17.800 --> 05:18.400
user啊

05:18.400 --> 05:20.400
这是user里面不是要提供两个吗

05:20.400 --> 05:21.700
两个一个写一个是什么呢

05:21.700 --> 05:22.600
locking

05:22.600 --> 05:23.100
对吧

05:23.100 --> 05:23.600
做登录的

05:24.600 --> 05:26.600
那么我宣的什么模板呢

05:26.600 --> 05:27.400
我就宣了

05:27.400 --> 05:28.000
宣

05:28.000 --> 05:28.600
先不着急

05:28.600 --> 05:29.600
宣的模板

05:29.600 --> 05:30.300
然后呢

05:30.300 --> 05:31.600
是一个handle lock

05:31.600 --> 05:34.200
一个是提供登录页面的

05:34.200 --> 05:35.800
这个玩意是提供登录页面

05:35.800 --> 05:38.400
提供登录页面

05:38.400 --> 05:39.800
这个玩意是处理登录

05:41.400 --> 05:42.400
处理登录

05:44.400 --> 05:45.200
没啥意思吧

05:45.200 --> 05:46.700
咱们一个提供登录页面

05:46.700 --> 05:47.600
一个处理登录

05:48.600 --> 05:49.100
好了

05:49.900 --> 05:51.300
这两个页面写好

05:51.300 --> 05:52.400
这两个x型写好了

05:52.400 --> 05:53.500
x型我们是不是写完了

05:54.300 --> 05:54.700
好写完了

05:54.700 --> 05:55.300
x型接下来

05:55.300 --> 05:57.300
那我们要用现在到了哪呢

05:57.300 --> 05:57.900
到了这

05:57.900 --> 05:58.900
对吧

05:58.900 --> 06:00.900
杭川热是格式是写的

06:00.900 --> 06:02.000
结构是写的差不多了

06:02.000 --> 06:02.300
然后呢

06:02.300 --> 06:04.100
我们要写什么模型

06:04.100 --> 06:04.800
先暂时放一放

06:04.800 --> 06:05.600
我们来写无忧

06:06.900 --> 06:07.600
来写无忧

06:07.600 --> 06:08.500
我们的试图

06:08.500 --> 06:08.900
试图呢

06:08.900 --> 06:10.800
我们要准备几个试图呢

06:10.800 --> 06:11.900
实际上我们准备两个试图

06:11.900 --> 06:13.500
就试图就是用户看到的东西

06:13.500 --> 06:14.200
你想一想

06:14.200 --> 06:15.300
脑袋里面想一想

06:15.300 --> 06:18.100
登录的话用户看到的不就是

06:18.100 --> 06:18.700
什么的

06:18.700 --> 06:20.700
一个登录页面

06:20.700 --> 06:21.000
然后呢

06:21.000 --> 06:21.500
一个首页

06:21.500 --> 06:21.700
对吧

06:21.700 --> 06:22.700
用户看到的东西

06:22.700 --> 06:23.900
不是就是这两个吗

06:23.900 --> 06:24.300
对不对

06:24.300 --> 06:24.700
所以说呢

06:24.700 --> 06:26.900
我们准备一个首页

06:26.900 --> 06:28.400
然后再准备一个登录页面

06:29.500 --> 06:30.700
logging

06:31.700 --> 06:32.400
这登录页面

06:34.300 --> 06:34.900
那么这里呢

06:34.900 --> 06:36.900
就出现一个问题了啊

06:36.900 --> 06:39.400
这些页面之间有没有共同的东西呢

06:39.400 --> 06:41.000
比方说home和logging之间

06:41.000 --> 06:42.600
它是不是有可能会有共同的东西

06:42.600 --> 06:43.400
比方叶头啊

06:43.400 --> 06:44.000
叶脚啊

06:44.000 --> 06:44.800
等等等等

06:44.800 --> 06:45.000
对吧

06:45.000 --> 06:46.700
是不是有可能会有共同的东西

06:46.700 --> 06:48.000
包括了他们的就是内容

06:48.000 --> 06:49.900
可能都包含在一个

06:49.900 --> 06:51.100
一个div

06:51.100 --> 06:53.400
内名为container里边

06:53.400 --> 06:55.500
他肯定肯定会有共同的东西

06:55.500 --> 06:57.200
那么这个共同的东西怎么办呢

06:57.200 --> 06:59.900
我们可以建立一个文念夹在这里

06:59.900 --> 07:01.900
这个这就是无忧的模板引擎了

07:01.900 --> 07:03.500
模板引擎的知识了

07:03.500 --> 07:05.600
比方说我们建立一个com

07:05.600 --> 07:08.400
这就是共同的一些东西啊

07:08.400 --> 07:08.900
或者是呢

07:08.900 --> 07:10.500
你用一个特殊的名字来写这个模板

07:10.500 --> 07:11.400
不要下滑线开头

07:11.400 --> 07:12.900
不要是一个特殊的东西啊

07:12.900 --> 07:13.500
比方说我们这里呢

07:13.500 --> 07:14.400
写个header吧

07:14.400 --> 07:15.600
一个叶头

07:15.600 --> 07:16.100
这些呢

07:16.100 --> 07:18.400
我就不管好不好看了啊

07:18.400 --> 07:18.900
反正呢

07:18.900 --> 07:19.900
就这么回事啊

07:19.900 --> 07:21.400
你们要把个要做好看的话

07:21.400 --> 07:21.900
自己去写

07:21.900 --> 07:22.900
写写写写写

07:22.900 --> 07:23.100
好

07:23.100 --> 07:23.700
叶头呢

07:23.700 --> 07:25.900
比方说啊

07:25.900 --> 07:26.500
叶头呢

07:26.500 --> 07:28.400
我就提供我们整个页面的

07:28.400 --> 07:29.600
大概是这个样子

07:29.600 --> 07:32.100
就是我无论是首页也好啊

07:32.100 --> 07:34.000
还是那个登录页也好

07:34.000 --> 07:35.900
他们都在这个div里边

07:35.900 --> 07:38.100
首页和登录页都在这个div里边啊

07:38.100 --> 07:38.700
比方说啊

07:38.700 --> 07:39.900
有这么一个情况

07:39.900 --> 07:41.100
那么这个标题呢

07:41.100 --> 07:42.100
他有可能会变动啊

07:42.100 --> 07:42.900
所以说这个标题

07:42.900 --> 07:44.400
让我们可以用这个

07:44.400 --> 07:45.300
对吧

07:45.300 --> 07:46.300
来得到他的标题

07:46.300 --> 07:48.500
把标题放这

07:48.600 --> 07:49.900
明白了意思吧

07:49.900 --> 07:51.100
那么我们的页面呢

07:51.100 --> 07:51.700
在这里边

07:51.700 --> 07:52.100
然后呢

07:52.100 --> 07:52.800
我们的页面上呢

07:52.800 --> 07:54.600
还有一些公共的css

07:54.600 --> 07:55.400
比方说这里呢

07:55.400 --> 07:56.800
我就把这些东西删掉啊

07:56.800 --> 07:58.500
这里面提供一些静态资源

07:58.500 --> 08:01.800
比方说recept css

08:01.800 --> 08:02.800
就重置样式

08:04.300 --> 08:05.500
我们找一个重置样式吧

08:07.800 --> 08:08.400
就他啊

08:08.400 --> 08:09.200
我比较喜欢他

08:12.800 --> 08:14.200
重置样式都有啊

08:14.200 --> 08:14.800
然后呢

08:14.800 --> 08:17.200
有全局的样式也有啊

08:17.300 --> 08:17.700
global

08:18.700 --> 08:19.900
叫css

08:19.900 --> 08:20.700
全局的样式

08:20.700 --> 08:22.700
全局好像也没有什么好写的啊

08:22.700 --> 08:24.000
因为有的话就加

08:24.000 --> 08:25.300
那么我们在head里边呢

08:25.300 --> 08:26.300
无论是什么页面

08:26.300 --> 08:27.500
他都会有一个

08:27.500 --> 08:29.500
缺都会有一个就是

08:30.300 --> 08:31.500
怎么访问

08:31.500 --> 08:32.700
是不是public

08:32.700 --> 08:35.400
从根路径开始放public

08:35.400 --> 08:36.600
然后呢

08:36.600 --> 08:38.000
recept css

08:38.000 --> 08:38.800
这里说的根路径

08:38.800 --> 08:40.800
指的不是这个文件路径啊

08:40.800 --> 08:42.500
是我们访问的根路径

08:42.500 --> 08:43.200
访问的根路径

08:43.200 --> 08:44.400
是要通过这个地址来访问

08:44.400 --> 08:45.900
访问这个recept css

08:45.900 --> 08:46.200
对吧

08:46.300 --> 08:47.200
所以说我们的页面

08:47.200 --> 08:48.400
在模板里面写上这个

08:48.400 --> 08:49.100
那么就css

08:49.100 --> 08:49.900
什么导致进来了

08:51.000 --> 08:52.000
好这是个head啊

08:52.000 --> 08:52.500
head呢

08:52.500 --> 08:54.500
我们就到这就可以了

08:55.100 --> 08:56.100
到这就可以了

08:56.100 --> 08:56.500
好

08:56.500 --> 08:57.200
futter呢

08:57.600 --> 08:58.900
是不是把后边粘过去

08:58.900 --> 08:59.500
是futter

09:00.500 --> 09:01.000
对吧

09:01.000 --> 09:02.800
head是前面这一部分

09:03.000 --> 09:03.500
futter呢

09:03.500 --> 09:04.600
是后边这一部分

09:04.700 --> 09:05.100
然后呢

09:05.100 --> 09:06.000
我们在home

09:06.000 --> 09:07.200
这里边怎么来用呢

09:07.200 --> 09:08.200
我们可以这样子写

09:09.000 --> 09:10.400
ejs inclo

09:10.700 --> 09:12.500
他有一个指令叫 inclo

09:12.500 --> 09:14.900
表示我包含哪一个东西呢

09:14.900 --> 09:16.700
包含comment下边的

09:18.100 --> 09:19.800
head.ejs

09:20.800 --> 09:21.200
好

09:21.200 --> 09:21.600
然后呢

09:21.600 --> 09:23.000
中间就是自己的内容了啊

09:23.000 --> 09:23.600
自己的

09:24.300 --> 09:25.800
首页的内容

09:26.600 --> 09:27.000
下边呢

09:27.000 --> 09:29.700
就是ejs inclo

09:30.600 --> 09:35.200
comment下边的futter.ejs

09:35.200 --> 09:35.700
对吧

09:35.700 --> 09:37.600
就是把这个这个文件的代码的

09:37.600 --> 09:38.400
拷贝过来

09:38.600 --> 09:39.200
把

09:39.600 --> 09:41.100
futter这个代码的拷贝到这

09:41.100 --> 09:42.400
然后中间就随便写

09:42.400 --> 09:43.100
懂这个意思吗

09:43.100 --> 09:44.600
那么head代码这一块

09:44.700 --> 09:45.600
是跑到哪了

09:45.900 --> 09:47.200
这一块是不是跑到这个

09:47.800 --> 09:49.300
home这个地方了

09:49.600 --> 09:49.800
好

09:49.800 --> 09:50.200
然后呢

09:50.200 --> 09:51.200
futter这一块呢

09:51.200 --> 09:52.400
是跑到哪呢

09:52.400 --> 09:54.300
跑到那个home的这个地方了

09:54.300 --> 09:54.500
对吧

09:54.500 --> 09:55.700
中间写自己的内容

09:56.300 --> 09:57.200
啊

09:57.200 --> 09:59.100
像那个nong.js这个模板引擎呢

09:59.100 --> 10:00.900
就是官方出推荐的模板引擎呢

10:00.900 --> 10:02.400
他是可以写模板的

10:02.400 --> 10:04.100
就是可以写布局的啊

10:04.100 --> 10:04.600
但是呢

10:04.600 --> 10:05.300
ejs呢

10:05.300 --> 10:05.800
比较简单

10:05.800 --> 10:07.500
他不能不能写模板

10:07.500 --> 10:08.600
不能写块啊

10:09.000 --> 10:11.000
有兴趣的朋友可以有兴趣的朋友

10:11.000 --> 10:13.300
可以去看一下那个nong.js模板

10:14.300 --> 10:15.700
我们这里就用ejs了

10:15.700 --> 10:16.400
就用它了

10:16.400 --> 10:17.200
没什么

10:17.400 --> 10:19.100
没什么麻烦啊

10:19.100 --> 10:19.800
还行

10:20.200 --> 10:22.200
然后login里边是不是也一样的

10:23.200 --> 10:23.600
对吧

10:23.600 --> 10:24.400
其他都一样啊

10:24.400 --> 10:25.900
就是登录页的那种

10:25.900 --> 10:27.200
登录页的那种

10:28.300 --> 10:28.500
好

10:28.500 --> 10:30.100
那么我们在宣传模板的时候

10:30.100 --> 10:30.900
你看一下啊

10:30.900 --> 10:32.600
CSS是不是加起来了

10:32.600 --> 10:32.800
对吧

10:32.800 --> 10:34.400
所有的人都有这个CSS

10:34.400 --> 10:34.700
好

10:34.700 --> 10:36.000
那么我们在

10:36.300 --> 10:37.000
宣传的时候呢

10:37.000 --> 10:38.200
是要给他提供一个Title

10:38.200 --> 10:39.000
为什么要提供Title呢

10:39.000 --> 10:40.800
因为黑道里边说要用这个Title

10:40.800 --> 10:41.100
对吧

10:41.100 --> 10:41.900
所以说我们在

10:41.900 --> 10:42.300
提

10:42.300 --> 10:43.200
在宣传的时候呢

10:43.400 --> 10:44.200
要给他一个数据

10:44.400 --> 10:44.900
Title

10:44.900 --> 10:46.200
这个表示了首页

10:47.800 --> 10:49.800
比方说我们这里是一个

10:50.600 --> 10:51.600
地区数据库

10:52.100 --> 10:53.500
我们来查询地区的

10:54.100 --> 10:55.100
然后这边

10:57.100 --> 10:58.600
U在里边登录的时候呢

10:58.600 --> 10:59.400
是不是也是一样

10:59.700 --> 11:00.200
登录的时候

11:00.200 --> 11:01.400
我们选择了个login模板

11:01.600 --> 11:02.000
模板呢

11:02.000 --> 11:03.300
它里边是登录页

11:03.300 --> 11:04.600
登录地区数据库

11:05.900 --> 11:06.300
当然了

11:06.300 --> 11:07.400
我这个标题呢

11:07.400 --> 11:08.400
除了放到页面上了

11:08.400 --> 11:09.000
也可以放

11:09.000 --> 11:10.000
我们先看一下

11:10.300 --> 11:11.000
先看一下再说

11:12.200 --> 11:13.000
npmraw

11:19.280 --> 11:19.780
好

11:19.780 --> 11:20.880
你看是不是首页

11:20.880 --> 11:22.280
看个标题是不是出来了

11:22.280 --> 11:23.580
然后我们来访问login

11:24.980 --> 11:26.580
是不是登录地区数据库

11:26.580 --> 11:26.980
对吧

11:26.980 --> 11:27.380
而且呢

11:27.380 --> 11:29.380
这个是服务器渲染好的

11:29.380 --> 11:29.780
对吧

11:29.780 --> 11:30.480
你看啊

11:30.880 --> 11:33.580
我们整个过程就是访问什么login

11:33.980 --> 11:34.680
交给了谁

11:34.680 --> 11:35.680
是不交给这个control

11:35.680 --> 11:36.580
交给哪个control

11:36.580 --> 11:37.480
交给这个

11:37.980 --> 11:38.880
这个control

11:38.880 --> 11:40.380
而这个control干嘛呢

11:40.380 --> 11:41.980
它是不是组装到了一个模型

11:41.980 --> 11:42.180
对吧

11:42.180 --> 11:43.280
组装了一个数据

11:43.280 --> 11:44.280
拿到这个数据

11:44.280 --> 11:45.380
把这个数据交给谁呢

11:45.380 --> 11:46.280
交给这个login

11:46.280 --> 11:47.080
这个无忧

11:47.080 --> 11:47.980
这个试图

11:48.080 --> 11:49.180
login试图呢

11:49.180 --> 11:49.980
就渲染对吧

11:49.980 --> 11:51.420
它渲染可能用到这个

11:51.420 --> 11:51.980
这个试图

11:51.980 --> 11:53.280
这个试图要一起渲染

11:53.280 --> 11:54.980
渲染成为一个完整的atm

11:54.980 --> 11:56.380
就发给客户端了

11:56.780 --> 11:57.780
那么就发给客户端了

11:57.780 --> 11:58.980
我们看一下框架元带吧

11:59.380 --> 12:00.380
是发过来了

12:00.380 --> 12:00.980
对不对

12:01.180 --> 12:01.580
好

12:02.480 --> 12:05.880
那么我们简单的写一下一些样式吧

12:06.280 --> 12:06.380
好

12:06.380 --> 12:07.980
咱们还是加一个globo

12:08.380 --> 12:08.980
globo

12:08.980 --> 12:09.880
叫css

12:10.580 --> 12:10.980
然后呢

12:10.980 --> 12:12.680
在黑道里边再引用一个globo

12:13.780 --> 12:15.880
你看是不是非常非常传统的这种做法

12:16.680 --> 12:19.080
我们很多学的怎么钱都放下都用不上了

12:19.080 --> 12:19.480
对不对

12:20.080 --> 12:20.980
我们在这里呢

12:21.880 --> 12:23.380
globo在这边写什么呢

12:23.380 --> 12:24.580
就它不是跟那样式吗

12:24.580 --> 12:25.280
container

12:25.280 --> 12:25.980
有一个

12:26.380 --> 12:28.080
我看黑道里边不是有个那样式吗

12:28.080 --> 12:28.880
container

12:28.880 --> 12:30.480
所有的都有的这个那样式

12:30.480 --> 12:31.980
我应该稍微写一下代码吧

12:32.480 --> 12:33.680
martin30

12:37.180 --> 12:37.780
写它什么呢

12:37.780 --> 12:38.880
takes12的center

12:39.580 --> 12:40.580
我也不知道写啥了

12:41.780 --> 12:42.480
takes12呢

12:42.880 --> 12:43.280
center

12:43.280 --> 12:44.280
就随便下写一下

12:46.280 --> 12:47.480
就这么这么个意思啊

12:47.480 --> 12:47.980
这么个意思

12:47.980 --> 12:50.080
然后把aq研究再调大一点吧

12:50.080 --> 12:52.280
aq fonsize2em

12:58.840 --> 12:59.240
好

12:59.240 --> 13:00.840
那有时候要说那每一个页面

13:00.840 --> 13:01.540
每一个试图

13:01.540 --> 13:04.840
还有自己的独特的css呢

13:04.840 --> 13:05.740
那你就再做写一本

13:05.740 --> 13:07.040
在这里写个另一个元素

13:07.040 --> 13:08.340
另一个元素可以写到任何位置

13:08.340 --> 13:08.640
对

13:08.640 --> 13:09.940
是可以在这里写

13:09.940 --> 13:10.640
引用就行了

13:12.140 --> 13:12.540
好了

13:13.040 --> 13:13.440
当然了

13:13.440 --> 13:14.940
这个做法很多很多啊

13:14.940 --> 13:16.240
比方说你在试图

13:16.240 --> 13:18.040
你在模型里边给他一个数组

13:18.040 --> 13:20.240
表示我要引用哪些css

13:20.240 --> 13:22.840
把css的路径做成一个数组给他

13:22.840 --> 13:23.140
然后呢

13:23.140 --> 13:25.640
在在这个header里边

13:25.640 --> 13:27.340
在这个header里边是不是可以循环

13:27.340 --> 13:27.640
对吧

13:27.640 --> 13:29.640
循环这个数组生成另一个元素

13:30.340 --> 13:31.140
都可以

13:31.140 --> 13:31.940
做法太多了

13:33.240 --> 13:33.540
好

13:33.540 --> 13:35.140
那么我们现在一页面写好了

13:35.140 --> 13:35.640
一样是呢

13:35.640 --> 13:37.040
有那么个意思就行了

13:37.040 --> 13:38.340
接下来我们开始来做啊

13:38.340 --> 13:38.740
首先呢

13:38.740 --> 13:39.740
我们来做这个登录

13:40.640 --> 13:41.540
先把登录做了

13:41.540 --> 13:44.040
做登录的过程中就可以学到很多东西了

13:44.040 --> 13:44.840
登录里面呢

13:44.840 --> 13:46.040
我们给他提供了一个数据

13:46.040 --> 13:46.840
对吧

13:46.840 --> 13:48.840
那么我们这边就来写这个试图

13:48.840 --> 13:49.740
locking

13:49.740 --> 13:50.840
登录里面有什么东西呢

13:50.840 --> 13:52.440
我们可以有个form表达

13:52.440 --> 13:54.440
非常非常传统的做法

13:54.440 --> 13:55.340
每个表单里边呢

13:55.340 --> 13:57.240
有一个什么form item

13:57.240 --> 13:58.840
就拿着就写个吧

13:58.840 --> 14:00.240
form item写个那样式

14:01.440 --> 14:02.040
一个label

14:03.540 --> 14:04.640
也不用for了

14:04.640 --> 14:07.040
就来一个帐号

14:07.040 --> 14:08.140
一个帐号嘛

14:08.140 --> 14:08.840
然后一个input

14:10.440 --> 14:11.040
帐号

14:11.040 --> 14:12.000
那么帐号的文门

14:12.000 --> 14:13.240
可能要给个内面属性对吧

14:13.240 --> 14:14.540
因为我们倒是提交表达

14:14.540 --> 14:16.540
一天如果说你做存钱段开发

14:17.540 --> 14:18.140
做reaction

14:18.140 --> 14:19.040
需不需要这个name

14:19.040 --> 14:20.040
完全不需要

14:20.040 --> 14:20.540
但是呢

14:20.540 --> 14:22.440
传统的那种模式就需要

14:22.440 --> 14:22.840
为什么呢

14:22.840 --> 14:24.940
传统模式一个按钮点了提交过后呢

14:24.940 --> 14:27.440
他就把以这个name属性为键

14:27.440 --> 14:28.040
键字对嘛

14:28.040 --> 14:29.440
提交的键字对到服务器

14:29.440 --> 14:30.340
放到包体里边

14:30.340 --> 14:31.340
那么包体里边的键

14:31.340 --> 14:32.640
就是这个name属性的字

14:32.640 --> 14:33.240
所以说我们这里呢

14:33.240 --> 14:34.240
可以使用locking id

14:36.040 --> 14:38.040
用来一个form item

14:38.040 --> 14:39.940
体验一下存钱段

14:39.940 --> 14:41.740
以前的那种存后端的做法

14:41.740 --> 14:43.140
存服务器的渲染

14:43.140 --> 14:44.540
该怎么来做密码

14:46.540 --> 14:47.040
input

14:48.040 --> 14:49.440
那么这里是password

14:52.140 --> 14:53.040
然后呢

14:53.040 --> 14:55.440
再来一个giv form item

14:56.240 --> 14:57.240
按button

14:57.240 --> 14:57.540
提交

15:00.240 --> 15:00.940
刷新

15:00.940 --> 15:02.240
就这么

15:02.240 --> 15:02.640
天啊

15:02.640 --> 15:03.140
太丑了

15:06.040 --> 15:06.740
还是写个

15:06.740 --> 15:08.040
写个css吧

15:08.040 --> 15:09.240
还是写个css

15:09.240 --> 15:09.940
这是locking

15:10.640 --> 15:12.140
叫css

15:12.140 --> 15:13.640
那么这边我就写个form item

15:16.040 --> 15:17.240
写一个啥呢

15:17.240 --> 15:18.040
写一个

15:19.240 --> 15:23.240
Marking

15:23.240 --> 15:25.240
20ps

15:27.240 --> 15:29.240
那么这边去引用这个css

15:30.240 --> 15:32.240
写个public

15:32.240 --> 15:33.240
然后呢

15:33.240 --> 15:35.240
locking css

15:35.240 --> 15:36.240
刷新

15:36.240 --> 15:38.240
有这么可以的意思就行了

15:38.240 --> 15:39.240
好

15:39.240 --> 15:40.240
那么现在呢

15:40.240 --> 15:42.240
我们这里就可以写登录了

15:42.240 --> 15:43.240
那么这个页面

15:43.240 --> 15:45.240
我们写试图的时候一定要清楚

15:46.240 --> 15:47.240
写试图的时候呢

15:47.240 --> 15:48.240
这个试图上

15:49.240 --> 15:50.240
什么东西是固定的

15:50.240 --> 15:52.240
什么东西是不固定的

15:52.240 --> 15:53.240
我们来好好想一想

15:53.240 --> 15:55.240
什么东西是固定的呢

15:56.240 --> 15:57.240
就通过服务器给客户端了过后

15:57.240 --> 15:58.240
什么东西固定的

15:58.240 --> 15:59.240
这个

15:59.240 --> 16:00.240
两个字肯定对吧

16:00.240 --> 16:01.240
这些东西

16:01.240 --> 16:02.240
固定的东西全是静态的

16:02.240 --> 16:03.240
你直接写就完事了

16:03.240 --> 16:05.240
那么什么东西不固定的

16:06.240 --> 16:07.240
什么东西不固定的

16:07.240 --> 16:08.240
比方说有没有错误消息

16:09.240 --> 16:10.240
到时候你点了登录过后

16:10.240 --> 16:11.240
是不是又要到服务器

16:12.240 --> 16:13.240
服务器如果说

16:13.240 --> 16:15.240
服务器如果说那边错了

16:15.240 --> 16:16.240
出了问题

16:16.240 --> 16:17.240
比方说登录失败

16:17.240 --> 16:18.240
账号密码不正确

16:19.240 --> 16:20.240
那么给力的页面

16:20.240 --> 16:21.240
是不是还是这个页面

16:22.240 --> 16:23.240
是不是还是这个试图

16:23.240 --> 16:24.240
那么到时候

16:24.240 --> 16:25.240
那个给力的试图里边

16:25.240 --> 16:26.240
是不是会多一个错误信息

16:27.240 --> 16:28.240
对不对

16:28.240 --> 16:29.240
你看这是纯

16:29.240 --> 16:31.240
以前的传统的做法就是这样子的

16:32.240 --> 16:34.240
服务器给力这个页面

16:34.240 --> 16:35.240
有两种情况

16:35.240 --> 16:36.240
一个就是直接访问的时候

16:36.240 --> 16:37.240
给力一个空的

16:37.240 --> 16:38.240
啥都没有

16:38.240 --> 16:40.240
一个就是服务器那边

16:40.240 --> 16:41.240
给力一个

16:41.240 --> 16:44.240
但有错误消息的水

16:44.240 --> 16:45.240
顺的

16:45.240 --> 16:46.240
就是这么一个页面

16:46.240 --> 16:47.240
所以说我们这里

16:47.240 --> 16:48.240
还可以写个EIP error

16:50.240 --> 16:51.240
这是错误消息

16:53.240 --> 16:54.240
是不是这个页面有可能

16:54.240 --> 16:55.240
会显示错误消息

16:55.240 --> 16:56.240
那么这个错误消息

16:56.240 --> 16:57.240
是不是有可能显示

16:57.240 --> 16:58.240
有可能不显示

16:59.240 --> 17:00.240
那么到底显不显示

17:00.240 --> 17:01.240
那就怎么办

17:01.240 --> 17:02.240
就需要取决于什么

17:03.240 --> 17:04.240
取决于模型

17:04.240 --> 17:05.240
模型里边我就可以

17:05.240 --> 17:06.240
给他提供一个

17:06.240 --> 17:08.240
比方说给他提供一个

17:08.240 --> 17:09.240
我们这里

17:09.240 --> 17:10.240
直接就在这吧

17:10.240 --> 17:11.240
在这写吧

17:11.240 --> 17:14.240
模型

17:17.510 --> 17:18.510
当然这个模型

17:18.510 --> 17:19.510
只是个普通对象

17:19.510 --> 17:20.510
你可以通过任何方式

17:20.510 --> 17:21.510
来过去

17:21.510 --> 17:23.510
也可以把进一步封装

17:23.510 --> 17:24.510
通过一些函数

17:24.510 --> 17:25.510
来返回一个模型

17:26.510 --> 17:27.510
然后这里

17:27.510 --> 17:30.510
我们也可以写个EIP error

17:30.510 --> 17:32.510
有没有错误消息是什么

17:32.510 --> 17:33.510
错误消息没有的话

17:33.510 --> 17:34.510
我就是空

17:34.510 --> 17:35.510
有的话

17:35.510 --> 17:37.510
这是一个账号密码错误

17:38.510 --> 17:39.510
非常非常像

17:39.510 --> 17:40.510
这个5U

17:40.510 --> 17:41.510
和Rag车里边

17:41.510 --> 17:42.510
给他数据

17:42.510 --> 17:43.510
模板

17:43.510 --> 17:44.510
就这么个意思

17:44.510 --> 17:45.510
我把数据

17:45.510 --> 17:46.510
给他

17:46.510 --> 17:47.510
然后模板进行渲染

17:47.510 --> 17:48.510
那么渲染的时候

17:48.510 --> 17:49.510
根据这个错误消息来渲染

17:49.510 --> 17:50.510
只不过现在是在服务端渲染

17:50.510 --> 17:51.510
对吧

17:51.510 --> 17:52.510
那么服务端1GS

17:52.510 --> 17:53.510
这个模板引行里边

17:53.510 --> 17:54.510
我们可以用EIP

17:55.510 --> 17:56.510
判断条件

17:56.510 --> 17:57.510
什么有没有Error

17:57.510 --> 17:58.510
如果说有Error的话

17:58.510 --> 18:00.510
我就给他显示这个玩意

18:00.510 --> 18:01.510
错误消息写上了

18:01.510 --> 18:03.510
1GS Alt

18:03.510 --> 18:04.510
就是什么 Error

18:04.510 --> 18:05.510
就把Error显示到这

18:05.510 --> 18:06.510
保存

18:06.510 --> 18:07.510
相信

18:07.510 --> 18:08.510
就是张航迷码错误

18:08.510 --> 18:10.510
那如果说没有错误的话

18:10.510 --> 18:11.510
那我给他一个空置

18:11.510 --> 18:12.510
没有错误他

18:12.510 --> 18:13.510
但是要给

18:13.510 --> 18:14.510
不给的话要报错

18:14.510 --> 18:15.510
他会使用这个数据

18:15.510 --> 18:16.510
所以没有这个DIV

18:16.510 --> 18:17.510
注意

18:17.510 --> 18:18.510
现在是服务器传过来的

18:18.510 --> 18:19.510
你看

18:20.510 --> 18:21.510
现在是不是服务器

18:21.510 --> 18:22.510
看服务器这里是没有DIV

18:23.510 --> 18:24.510
如果说给他写上

18:25.510 --> 18:26.510
一刷新

18:26.510 --> 18:27.510
刷新

18:28.510 --> 18:29.510
看一下服务器那边

18:29.510 --> 18:31.510
服务器那边是有这个DIV

18:31.510 --> 18:32.510
全是服务器传过来的

18:32.510 --> 18:33.510
跟客户端这边

18:33.510 --> 18:34.510
客户端连GS都没有

18:34.510 --> 18:35.510
你看

18:35.510 --> 18:37.510
客户端那边连GS代码都没有

18:37.510 --> 18:38.510
全是靠服务器给你传

18:38.510 --> 18:39.510
直接传过来的

18:39.510 --> 18:40.510
这是非常传统的做法

18:41.510 --> 18:42.510
这是这个错误消息

18:42.510 --> 18:44.510
我们稍微还是写个样式吧

18:44.510 --> 18:45.510
意思意思

18:46.510 --> 18:47.510
意思意思是什么意思

18:47.510 --> 18:48.510
小意思

18:49.510 --> 18:50.510
color

18:51.510 --> 18:52.510
F40

18:54.510 --> 18:55.510
就这么个意思

18:56.510 --> 18:57.510
还有一种情况

18:57.510 --> 18:59.510
就是比方说你填了过后

18:59.510 --> 19:00.510
你点了灯录

19:00.510 --> 19:01.510
点了灯录过后

19:01.510 --> 19:02.510
他可能错了

19:02.510 --> 19:03.510
错了过后你看

19:04.510 --> 19:05.510
这东西是不是不见了

19:05.510 --> 19:06.510
为什么不见了

19:06.510 --> 19:07.510
因为你重新访问了服务器

19:07.510 --> 19:08.510
服务器给你的东西

19:08.510 --> 19:09.510
就没有错误了

19:09.510 --> 19:10.510
就没有这个东西了

19:10.510 --> 19:12.510
服务器他就是给你返回一个

19:12.510 --> 19:13.510
这个玩意

19:13.510 --> 19:14.510
这个模板

19:14.510 --> 19:16.510
服务器就把模板给你返回一次

19:16.510 --> 19:17.510
一模板里面

19:17.510 --> 19:18.510
这个仕图里面

19:18.510 --> 19:19.510
并没有给他扶出纸

19:19.510 --> 19:20.510
对不对

19:20.510 --> 19:22.510
那么服务器给你传过来的时候

19:22.510 --> 19:23.510
你看

19:23.510 --> 19:24.510
服务器给传过来的时候

19:24.510 --> 19:25.510
就是一个蒲蒲蒙蒙蒙蒙框

19:25.510 --> 19:26.510
里边啥都没有

19:27.510 --> 19:28.510
没什么意思吧

19:28.510 --> 19:29.510
所以说

19:29.510 --> 19:30.510
有可能

19:30.510 --> 19:31.510
张红密码说的时候

19:31.510 --> 19:32.510
服务器可能还要保留账号

19:32.510 --> 19:33.510
但是密码我可以不保留

19:33.510 --> 19:34.510
但是账号我要保留

19:34.510 --> 19:35.510
那怎么办

19:35.510 --> 19:37.510
我是不是又需要数据了

19:38.510 --> 19:39.510
那么我就比较说

19:39.510 --> 19:40.510
一个MoginID

19:40.510 --> 19:41.510
我给他

19:42.510 --> 19:44.510
摸我这账号

19:44.510 --> 19:45.510
对吧

19:45.510 --> 19:46.510
把这个东西给他

19:46.510 --> 19:47.510
好在模板里边

19:47.510 --> 19:48.510
我们是不是可以用Value

19:49.510 --> 19:51.510
这里是不是来自于这

19:51.510 --> 19:52.510
ejs out

19:52.510 --> 19:54.510
来自于什么MoginID

19:55.510 --> 19:56.510
好你看

19:56.510 --> 19:57.510
现在服务团

19:57.510 --> 19:58.510
给了他这个数据

19:58.510 --> 19:59.510
那么渲染出来的模板

19:59.510 --> 20:00.510
渲染出来的仕图

20:00.510 --> 20:01.510
那就有这个

20:01.510 --> 20:02.510
服务器没有给他这个数据

20:02.510 --> 20:04.510
那么服务器渲染出来的模板

20:04.510 --> 20:06.510
就没有这个

20:06.510 --> 20:07.510
对吧

20:07.510 --> 20:08.510
所以我们服务器是

20:08.510 --> 20:09.510
这边Controller

20:09.510 --> 20:10.510
里边是不是可以控制

20:10.510 --> 20:11.510
你看这个再回顾一下

20:11.510 --> 20:13.510
我们服务器团运行的模式

20:13.510 --> 20:15.510
Controller提供

20:15.510 --> 20:16.510
组装一些模型

20:16.510 --> 20:17.510
把模型交给仕图

20:17.510 --> 20:18.510
仕图渲染出来的那个客户

20:19.510 --> 20:20.510
对吧

20:20.510 --> 20:21.510
好

20:21.510 --> 20:22.510
那么现在呢

20:22.510 --> 20:23.510
我们一开始的时候

20:23.510 --> 20:24.510
肯定是没有的

20:24.510 --> 20:25.510
没有的

20:25.510 --> 20:26.510
接下来我们回到

20:26.510 --> 20:27.510
MoginIDs里

20:27.510 --> 20:28.510
现在我们要做登录了

20:28.510 --> 20:29.510
怎么都登录了

20:29.510 --> 20:30.510
其实非常简单

20:30.510 --> 20:31.510
基本上

20:31.510 --> 20:32.510
你看我整个过程

20:32.510 --> 20:34.510
可能连客户团的JS都不用写

20:34.510 --> 20:35.510
如果说客户团需要JS的话

20:35.510 --> 20:36.510
在这里添加一个JS

20:36.510 --> 20:38.510
在这里去移动它就行了

20:38.510 --> 20:39.510
客户团

20:39.510 --> 20:40.510
当然也可以在这里写什么

20:40.510 --> 20:41.510
script元素

20:41.510 --> 20:43.510
这些都是运行在客户团的JS

20:43.510 --> 20:44.510
那么现在呢

20:44.510 --> 20:45.510
我们在这里加上一个

20:45.510 --> 20:46.510
内容属性

20:46.510 --> 20:48.510
LoginPassword

20:48.510 --> 20:49.510
就完了

20:49.510 --> 20:50.510
客户团就可以提交了

20:50.510 --> 20:52.510
我们把Action控制一下

20:52.510 --> 20:53.510
Action就是当前地址

20:53.510 --> 20:54.510
写个空就行了

20:54.510 --> 20:55.510
空就当前地址

20:55.510 --> 20:57.510
MessageLanguagePost

20:57.510 --> 20:58.510
好

20:58.510 --> 20:59.510
接下来我们来看一下

20:59.510 --> 21:01.510
点击

21:01.510 --> 21:02.510
这里重新来

21:02.510 --> 21:03.510
Login

21:03.510 --> 21:04.510
点击右键检查

21:05.510 --> 21:08.510
我们到Letswork里面去

21:08.510 --> 21:09.510
刷新

21:10.510 --> 21:12.510
这里边我们写上一个账号

21:12.510 --> 21:13.510
账号随便写

21:13.510 --> 21:14.510
密码也随便写

21:14.510 --> 21:15.510
看一下

21:15.510 --> 21:16.510
点灯录

21:16.510 --> 21:17.510
现在是403

21:17.510 --> 21:18.510
403就403吧

21:18.510 --> 21:19.510
无所谓

21:19.510 --> 21:20.510
现在我们来看一下Login

21:22.510 --> 21:23.510
Login

21:23.510 --> 21:24.510
Login在这里

21:24.510 --> 21:25.510
一看一下

21:25.510 --> 21:26.510
是不是个抛射琴球

21:26.510 --> 21:28.510
发动了服务器的

21:28.510 --> 21:30.510
刷新页面的抛射琴球

21:30.510 --> 21:32.510
因为风表还会点击的

21:32.510 --> 21:33.510
提交按钮过后

21:33.510 --> 21:35.510
它就会把整个风表达的数据提交过去

21:35.510 --> 21:36.510
数据是什么呢

21:36.510 --> 21:37.510
就是建置队

21:37.510 --> 21:38.510
你看下面的建置队

21:38.510 --> 21:39.510
它就这种格式

21:40.510 --> 21:41.510
Login ID

21:41.510 --> 21:42.510
这个玩意儿

21:43.510 --> 21:44.510
Login Password

21:44.510 --> 21:45.510
这么一个玩意儿

21:45.510 --> 21:47.510
就是建置队的数据

21:47.510 --> 21:48.510
它建置队哪来的呢

21:48.510 --> 21:49.510
它就用Lame作为键

21:49.510 --> 21:50.510
Value作为值

21:50.510 --> 21:51.510
Lame作为键

21:51.510 --> 21:52.510
Value作为值

21:52.510 --> 21:53.510
直接提交到服务器了

21:53.510 --> 21:55.510
这是浏览器的自动的功能

21:55.510 --> 21:57.510
因为很少学前端的

21:57.510 --> 21:58.510
后边学到

21:58.510 --> 22:00.510
后边很少用到这种模式的

22:00.510 --> 22:01.510
现在你传统的方式

22:01.510 --> 22:03.510
现在做了个表单提交

22:03.510 --> 22:04.510
一般都是用R加克斯的

22:04.510 --> 22:05.510
所以说一般都会需要

22:05.510 --> 22:06.510
ViewR Reaction

22:06.510 --> 22:08.510
这种单眼应用程序的框架

22:08.510 --> 22:09.510
这种传统的方式

22:09.510 --> 22:11.510
用的越来越少

22:11.510 --> 22:12.510
我们还是要学习一下

22:14.510 --> 22:15.510
好了

22:15.510 --> 22:16.510
现在我们这个地方

22:16.510 --> 22:17.510
可以提交到服务器了

22:17.510 --> 22:18.510
提交到服务器

22:18.510 --> 22:20.510
刚才发生了一个什么错误呢

22:20.510 --> 22:22.510
刚才发生了一个403

22:22.510 --> 22:23.510
403是个什么错误

22:23.510 --> 22:24.510
无权限

22:24.510 --> 22:25.510
它这里包了一个具体的错误

22:25.510 --> 22:27.510
叫Invanted CSRF Token

22:27.510 --> 22:29.510
它是一个防止CSRF

22:29.510 --> 22:31.510
攻击的这么一种方式

22:31.510 --> 22:32.510
它什么意思呢

22:32.510 --> 22:33.510
我们后边会讲戏的

22:33.510 --> 22:34.510
讲这个安全性

22:34.510 --> 22:35.510
安全性的时候

22:35.510 --> 22:36.510
我们再讲戏的讲

22:37.510 --> 22:38.510
这里我就不说了

22:38.510 --> 22:39.510
这里我就不说了

22:39.510 --> 22:40.510
我们现在要把禁用

22:40.510 --> 22:41.510
禁用它

22:41.510 --> 22:42.510
那怎么来禁用呢

22:42.510 --> 22:43.510
禁用它的安全检查

22:44.510 --> 22:46.510
禁用安全检查的话

22:46.510 --> 22:47.510
我们在这

22:47.510 --> 22:48.510
config default

22:48.510 --> 22:49.510
配置这里

22:49.510 --> 22:50.510
配置这里呢

22:50.510 --> 22:52.510
这里有个export secure

22:52.510 --> 22:55.020
写对面

22:56.020 --> 22:57.020
不知道写对面

22:57.020 --> 22:59.020
就去查一下官方文章

22:59.020 --> 23:02.220
查一下官方文章

23:02.220 --> 23:04.220
这些东西都不用去背

23:04.220 --> 23:05.220
看官方文章

23:05.220 --> 23:06.220
配置就完事了

23:06.220 --> 23:08.220
跟安全相关的

23:08.220 --> 23:09.220
安全相关的

23:09.220 --> 23:10.220
它这里

23:10.220 --> 23:11.220
对 就是security

23:13.220 --> 23:15.220
跟安全相关的配置

23:16.220 --> 23:18.220
安全配置

23:19.220 --> 23:20.220
这个配置呢

23:20.220 --> 23:21.220
它里边有很多

23:21.220 --> 23:22.220
跟安全

23:22.220 --> 23:23.220
不同的安全性相关的

23:23.220 --> 23:25.220
那么我们现在要搞定的是

23:25.220 --> 23:27.220
CSRF这个安全性

23:27.220 --> 23:28.220
把它enable

23:29.220 --> 23:30.220
enable

23:31.220 --> 23:32.220
setway force

23:33.220 --> 23:35.220
禁用这个CSRF

23:35.220 --> 23:37.220
这个安全性检查

23:37.220 --> 23:38.220
把它设置一下

23:38.220 --> 23:40.220
那么现在我们再看一下

23:40.220 --> 23:42.220
回去再提交

23:43.220 --> 23:44.220
是不是

23:44.220 --> 23:45.220
就不是403了吧

23:45.220 --> 23:46.220
对吧 但是呢

23:46.220 --> 23:47.220
为什么是404

23:47.220 --> 23:48.220
为什么是404

23:49.220 --> 23:51.220
知道为什么是404吗

23:51.220 --> 23:53.220
清秋

23:53.220 --> 23:55.220
然后路由匹配

23:56.220 --> 23:57.220
能匹配到吗

23:57.220 --> 23:58.220
能匹配到

23:58.220 --> 23:59.220
poser清球吗

23:59.220 --> 24:00.220
清球怎么了

24:00.220 --> 24:01.220
login

24:01.220 --> 24:02.220
你看现在是不是清球login

24:03.220 --> 24:04.220
能清球login吗

24:04.220 --> 24:05.220
能匹配到

24:05.220 --> 24:06.220
但是呢

24:06.220 --> 24:08.220
匹配到这个x里边

24:08.220 --> 24:10.220
这个x里边我们看一下写了啥

24:10.220 --> 24:11.220
啥都没写

24:11.220 --> 24:12.220
啥都没写

24:12.220 --> 24:13.220
是不是就运行完了

24:13.220 --> 24:15.220
运行完了会是什么效果

24:15.220 --> 24:17.220
是不是body里边没有数据

24:17.220 --> 24:18.220
想硬体里边没数据

24:18.220 --> 24:19.220
那么我们知道

24:19.220 --> 24:21.220
ka默认是404

24:21.220 --> 24:22.220
所以它得到404

24:24.220 --> 24:25.220
那么现在我们来处理登录

24:25.220 --> 24:26.220
处理登录的话

24:26.220 --> 24:27.220
我们是不是要得到它的账号并

24:27.220 --> 24:28.220
怎么来得到账号并

24:28.220 --> 24:30.220
关于body的解析

24:30.220 --> 24:31.220
它已经给你完成了

24:31.220 --> 24:32.220
你什么都不用做

24:32.220 --> 24:33.220
我们再输出一下吧

24:33.220 --> 24:35.220
cts request body

24:36.220 --> 24:37.220
这边我们来看一下

24:37.220 --> 24:38.220
之前学过的

24:39.220 --> 24:40.220
现在我们来

24:40.220 --> 24:41.220
这边

24:41.220 --> 24:42.220
刷新一次

24:42.220 --> 24:43.220
重新体教表达

24:44.220 --> 24:45.220
继续

24:47.220 --> 24:48.220
回到这

24:48.220 --> 24:49.220
就达到了

24:49.220 --> 24:50.220
login id

24:50.220 --> 24:51.220
login password

24:51.220 --> 24:52.220
就拿到了

24:52.220 --> 24:53.220
拿到过后

24:53.220 --> 24:54.220
我现在要做登录

24:55.220 --> 24:58.300
咱们现在要做登录

24:58.300 --> 24:59.300
做登录的话

24:59.300 --> 25:00.300
怎么来做呢

25:01.300 --> 25:02.300
我们可以

25:02.300 --> 25:03.300
现在我们看

25:03.300 --> 25:04.300
继续看这个图

25:04.300 --> 25:06.300
现在数据是不是传过来了

25:06.300 --> 25:07.300
在mvc里边

25:07.300 --> 25:08.300
是不是就这种模式

25:08.300 --> 25:10.300
一开始我访问login的时候

25:10.300 --> 25:11.300
你给了我一个试图

25:11.300 --> 25:12.300
是不是

25:12.300 --> 25:13.300
给了我一个试图

25:13.300 --> 25:14.300
是不是就这个玩意

25:14.300 --> 25:16.300
然后填写账号密码

25:16.300 --> 25:17.300
然后一点击

25:17.300 --> 25:18.300
是不是重新请求服务器

25:18.300 --> 25:19.300
服务器是不是运行

25:19.300 --> 25:20.300
另外一个controller

25:20.300 --> 25:21.300
另外一个就是x

25:21.300 --> 25:22.300
或者是

25:22.300 --> 25:23.300
另外一个controller都行

25:23.300 --> 25:25.300
我这里只是

25:25.300 --> 25:26.300
就是运行的是

25:26.300 --> 25:28.300
同一个controller的不同的x

25:28.300 --> 25:30.300
当然也可以运行不同的controller

25:30.300 --> 25:32.300
关键是看路由怎么去指定

25:32.300 --> 25:33.300
路由我只指定到

25:33.300 --> 25:35.300
同一个controller的一个区别

25:35.300 --> 25:37.300
现在是不是又到了controller

25:37.300 --> 25:38.300
又到了controller过后

25:38.300 --> 25:39.300
这个controller来处理

25:39.300 --> 25:40.300
用户了这一次请求

25:40.300 --> 25:42.300
这次就post请求了

25:42.300 --> 25:44.300
处理用户在这一次请求

25:44.300 --> 25:45.300
这次请求的话

25:45.300 --> 25:46.300
账号密码已经拿到了

25:46.300 --> 25:48.300
现在又到了这了

25:48.300 --> 25:50.300
接下来是不是要处理业务功能的

25:50.300 --> 25:52.300
登录是一个业务功能

25:52.300 --> 25:54.300
业务功能我这里没有

25:54.300 --> 25:56.300
需要依托于后端服务器

25:56.300 --> 25:57.300
那么登录功能的

25:57.300 --> 26:00.300
以前我好像哪一门客

26:00.300 --> 26:02.300
机型越来越差了

26:02.300 --> 26:05.300
有一门客我记得我是写过的

26:05.300 --> 26:07.300
登录就请求这个地址

26:07.300 --> 26:09.300
post请求这个地址

26:09.300 --> 26:10.300
然后包底里边

26:10.300 --> 26:12.300
你用这个模式也好

26:12.300 --> 26:13.300
你用那个节省格式也好

26:13.300 --> 26:14.300
无所谓都可以

26:14.300 --> 26:16.300
总之干扔过去扔过去

26:16.300 --> 26:18.300
是不是请求这个地址

26:18.300 --> 26:19.300
对吧

26:19.300 --> 26:20.300
好请求这个地址的时候

26:20.300 --> 26:22.300
用post请求把这个数据扔过去

26:22.300 --> 26:24.300
那么就可以登录了

26:24.300 --> 26:26.300
它就是服务器返回的结果

26:26.300 --> 26:29.300
那么这里我们怎么去请求服务器呢

26:29.300 --> 26:30.300
Age这个框架

26:30.300 --> 26:32.300
它可以加上这么一个东西

26:32.300 --> 26:33.300
叫做App

26:33.300 --> 26:35.300
你在这里边是可以获取

26:35.300 --> 26:37.300
整个Age运用程序的对象的

26:37.300 --> 26:40.300
这是整个Age运用程序的对象

26:40.300 --> 26:42.300
这个是跟这一次请求相关的

26:42.300 --> 26:43.300
上下位

26:43.300 --> 26:44.300
一个是App全局的

26:44.300 --> 26:47.300
一个是跟这一次请求相关的

26:47.300 --> 26:49.300
那么我们在全局里边

26:49.300 --> 26:52.300
它又给你提供了一个叫做CURL

26:53.300 --> 26:54.300
这个函数呢

26:54.300 --> 26:56.300
它其实就是给你封装了一下

26:56.300 --> 26:59.300
NoteGN是原生的ATTP对象

26:59.300 --> 27:01.300
通过它来创建一个请求客户端

27:01.300 --> 27:03.300
去请求一个URL地址

27:03.300 --> 27:04.300
但是这个东西我看了一下

27:04.300 --> 27:05.300
不是那么好用

27:05.300 --> 27:07.300
我还是喜欢用什么呢

27:07.300 --> 27:08.300
AgeS

27:08.300 --> 27:10.300
所以说我停止了

27:10.300 --> 27:12.300
安装一个AgeS

27:12.300 --> 27:14.300
我还是喜欢用AgeS

27:14.300 --> 27:15.300
那么AgeS夹起来过后

27:15.300 --> 27:16.300
怎么用呢

27:16.300 --> 27:18.300
用法一样

27:18.300 --> 27:22.300
导入AgeS

27:22.300 --> 27:23.300
RequireAgeS

27:23.300 --> 27:24.300
导入它就行了

27:24.300 --> 27:27.300
那么这里边可以用AgeS Get

27:27.300 --> 27:30.300
这里还有Default

27:30.300 --> 27:32.300
可以用AgeS Get

27:32.300 --> 27:34.300
Pose去请求就完事了

27:34.300 --> 27:37.300
但是这样子用的不是很方便

27:37.300 --> 27:38.300
你想啊

27:38.300 --> 27:40.300
咱们如果说是这种模式的话

27:40.300 --> 27:42.300
是不是经常都会跟后端服务下打交道

27:42.300 --> 27:44.300
到处都要去导入AgeS

27:44.300 --> 27:46.300
其实就是不是很方便

27:46.300 --> 27:47.300
其他还没啥

27:47.300 --> 27:48.300
那么怎么办呢

27:48.300 --> 27:49.300
告诉大家

27:49.300 --> 27:50.300
在AgeS里边

27:50.300 --> 27:52.300
它可以提供一些扩展功能

27:52.300 --> 27:55.300
就是你可以扩展

27:55.300 --> 27:57.300
一些常见的一些对象

27:57.300 --> 28:00.300
比方说像我们现在这个App对象

28:00.300 --> 28:01.300
App对象是不是全决的

28:01.300 --> 28:03.300
我们现在想在这里边加一个属性

28:03.300 --> 28:04.300
一个小时

28:04.300 --> 28:05.300
那么后边用起来

28:05.300 --> 28:06.300
是不是就不用去导入了

28:06.300 --> 28:07.300
直接用就行了

28:07.300 --> 28:08.300
就非常方便了

28:08.300 --> 28:10.300
那么我们怎么来扩展这个位象呢

28:10.300 --> 28:12.300
其实非常简单

28:12.300 --> 28:15.300
你在项目跟目录的下边

28:15.300 --> 28:18.300
有一个文件叫做App叫GS

28:18.300 --> 28:19.300
这个文件

28:19.300 --> 28:20.300
这个文件呢

28:20.300 --> 28:23.300
你导出一个函数

28:23.300 --> 28:25.300
这个函数有一个参数App

28:25.300 --> 28:26.300
啥意思

28:26.300 --> 28:29.300
AgeGS启动过后

28:29.300 --> 28:30.300
Age

28:30.300 --> 28:36.300
创建好了App之后

28:36.300 --> 28:41.300
如果存在使文件

28:41.300 --> 28:43.300
使文件

28:43.300 --> 28:46.300
并且是一个方法

28:46.300 --> 28:52.300
则其会自动运行该方法一次

28:52.300 --> 28:53.300
它就启动了过后

28:53.300 --> 28:55.300
它创建好了App应用

28:55.300 --> 28:56.300
然后呢

28:56.300 --> 28:57.300
它就会

28:57.300 --> 28:58.300
如果我发现有这个文件

28:58.300 --> 29:00.300
都是约定好的

29:00.300 --> 29:01.300
而现在它是一个函数

29:01.300 --> 29:02.300
那么它就会运行这个函数

29:02.300 --> 29:04.300
并且把这个App传进来

29:04.300 --> 29:06.300
那剩下的事情

29:06.300 --> 29:07.300
你懂的

29:07.300 --> 29:08.300
它无非就是个对象嘛

29:08.300 --> 29:09.300
我对对对象里边

29:09.300 --> 29:10.300
水一边加啥都可以

29:10.300 --> 29:11.300
对吧

29:11.300 --> 29:12.300
就可以扩展它的功能

29:12.300 --> 29:13.300
不要它们加个AgeGS

29:13.300 --> 29:14.300
等于什么呢

29:14.300 --> 29:16.300
RequireAgeGS

29:16.300 --> 29:17.300
Default

29:17.300 --> 29:19.300
是不是这样子可以

29:19.300 --> 29:21.300
除此之外呢

29:21.300 --> 29:23.300
它还允许的用这种邪法

29:23.300 --> 29:24.300
Module.export

29:24.300 --> 29:25.300
你导出一个对象

29:25.300 --> 29:27.300
它会把对象里边的东西

29:27.300 --> 29:30.300
给你合并到App里边

29:30.300 --> 29:31.300
比方说

29:31.300 --> 29:32.300
对象里边有一个AgeGS属性

29:32.300 --> 29:33.300
那么它这个属性

29:33.300 --> 29:35.300
就会合并到App里边

29:35.300 --> 29:37.300
那么这里是不是也可以

29:37.300 --> 29:38.300
但是这种邪法呢

29:38.300 --> 29:39.300
你就找不到这个

29:39.300 --> 29:40.300
原来的App对象

29:40.300 --> 29:41.300
就找不到了

29:41.300 --> 29:42.300
那么

29:42.300 --> 29:43.300
如果说你需要用到

29:43.300 --> 29:44.300
原来的App对象

29:44.300 --> 29:45.300
你用这种邪法

29:45.300 --> 29:46.300
你如果说只需要

29:46.300 --> 29:47.300
注入一些属性

29:47.300 --> 29:48.300
不需要用到原来的App对象

29:48.300 --> 29:49.300
你可以用这种邪法

29:49.300 --> 29:50.300
当然这种邪法

29:50.300 --> 29:51.300
你可以简化成

29:51.300 --> 29:52.300
Export

29:52.300 --> 29:53.300
AgeGS

29:53.300 --> 29:54.300
对吧

29:54.300 --> 29:55.300
这都是很灵活的

29:55.300 --> 29:56.300
不要学识

29:56.300 --> 29:57.300
都可以

29:57.300 --> 29:58.300
你们懂的

30:00.300 --> 30:01.300
好了

30:01.300 --> 30:02.300
那么现在我是不是

30:02.300 --> 30:03.300
往App里边

30:03.300 --> 30:04.300
注入了一个属性

30:04.300 --> 30:05.300
加了一个属性

30:05.300 --> 30:06.300
加了一个属性过后

30:06.300 --> 30:07.300
那这边就不用导入了

30:07.300 --> 30:08.300
直接来

30:08.300 --> 30:09.300
App

30:09.300 --> 30:10.300
AgeGS

30:10.300 --> 30:11.300
然后呢

30:11.300 --> 30:12.300
Pose的请求

30:12.300 --> 30:13.300
请求哪里

30:13.300 --> 30:15.300
看一下请求哪里

30:15.300 --> 30:16.300
咱们请求的

30:16.300 --> 30:17.300
是不是这个地址

30:17.300 --> 30:18.300
好

30:18.300 --> 30:19.300
那么这里问题又来了

30:19.300 --> 30:20.300
这个地址呢

30:20.300 --> 30:21.300
如果说我直接这样子

30:21.300 --> 30:22.300
写的话

30:22.300 --> 30:23.300
不是很好

30:23.300 --> 30:24.300
为什么不是很好

30:24.300 --> 30:25.300
前面这一段是基本不动的

30:25.300 --> 30:26.300
对不对

30:26.300 --> 30:27.300
那如果说前面

30:27.300 --> 30:28.300
有一天这个东西变了

30:28.300 --> 30:29.300
是不是我倒出去

30:29.300 --> 30:30.300
要去改

30:30.300 --> 30:31.300
因为我们这个

30:31.300 --> 30:32.300
因为我们现在

30:32.300 --> 30:33.300
既然是这种模式

30:33.300 --> 30:34.300
既然是这种模式

30:34.300 --> 30:35.300
那就很有可能

30:35.300 --> 30:36.300
经常跟后端服务

30:36.300 --> 30:37.300
打交道

30:37.300 --> 30:38.300
不管是登陆也好

30:38.300 --> 30:39.300
还是别的也好

30:39.300 --> 30:40.300
那么怎么办呢

30:40.300 --> 30:41.300
很简单

30:41.300 --> 30:42.300
我可以把这一部分的东西

30:42.300 --> 30:43.300
提到哪呢

30:43.300 --> 30:44.300
提到一个配置里边

30:44.300 --> 30:45.300
然后配置里边

30:45.300 --> 30:46.300
全是配置

30:46.300 --> 30:47.300
就在这里边配置

30:47.300 --> 30:48.300
这里边还可以写

30:48.300 --> 30:49.300
自定义配置

30:50.300 --> 30:51.300
自定义配置

30:51.300 --> 30:52.300
你随便写

30:52.300 --> 30:53.300
随便写

30:53.300 --> 30:54.300
那边或许就完成了

30:54.300 --> 30:56.300
比方说我这里可以写啥呢

30:57.300 --> 30:58.300
可以写

30:58.300 --> 31:00.300
API base

31:00.300 --> 31:01.300
就是基础的UIL

31:01.300 --> 31:03.300
但是我个人建议

31:03.300 --> 31:04.300
你写这个配置的时候

31:04.300 --> 31:06.300
前面加一个潜质

31:06.300 --> 31:07.300
比方说加个下滑线

31:07.300 --> 31:08.300
加个多的都可以

31:08.300 --> 31:09.300
为什么呢

31:09.300 --> 31:11.300
因为这里边有些配置

31:11.300 --> 31:12.300
是跟插件相关的

31:12.300 --> 31:14.300
那么怕名字冲突

31:14.300 --> 31:16.300
我建议加上一个潜质

31:16.300 --> 31:17.300
避免名字冲突

31:17.300 --> 31:18.300
那么这里边

31:18.300 --> 31:19.300
我们比方说

31:19.300 --> 31:21.300
我们的路径就是这个路径

31:21.300 --> 31:22.300
就是API

31:22.300 --> 31:24.300
就是后端服务器的

31:24.300 --> 31:26.300
API的基础路径

31:26.300 --> 31:27.300
就这个路径

31:28.300 --> 31:29.300
好了

31:29.300 --> 31:30.300
那有了这个路径过后呢

31:30.300 --> 31:31.300
我们在这边

31:33.300 --> 31:34.300
这边是不是UIL

31:34.300 --> 31:35.300
比方说得到一个UIL

31:35.300 --> 31:37.300
UIL是不是来自于

31:38.300 --> 31:39.300
怎么来得到这个配置

31:39.300 --> 31:40.300
ZSconfig

31:40.300 --> 31:41.300
在这边可以得到

31:41.300 --> 31:42.300
整个配置对象

31:42.300 --> 31:44.300
整个这个配置对象

31:44.300 --> 31:45.300
配置对象里面一个属性

31:45.300 --> 31:46.300
API base

31:46.300 --> 31:48.300
就可以拿到

31:48.300 --> 31:50.300
拿一个API base

31:50.300 --> 31:51.300
然后接下来拼接

31:51.300 --> 31:52.300
API user

31:52.300 --> 31:53.300
login

31:53.300 --> 31:56.300
这是我们请求的UIL地址

31:56.300 --> 31:58.300
请求的UIL地址拿到了

31:58.300 --> 31:59.300
然后呢

31:59.300 --> 32:00.300
是不是把这个对象

32:00.300 --> 32:01.300
传过去玩笑了

32:01.300 --> 32:02.300
login id

32:02.300 --> 32:03.300
login password的

32:03.300 --> 32:04.300
正巧

32:04.300 --> 32:06.300
页面上的建置队

32:06.300 --> 32:07.300
跟我们这个服务器

32:07.300 --> 32:08.300
需要的建置队

32:08.300 --> 32:09.300
是一样

32:09.300 --> 32:10.300
然后如果不一样的话

32:10.300 --> 32:11.300
你自己封装

32:11.300 --> 32:12.300
封装了你从一个别的对象

32:12.300 --> 32:13.300
改一下就行了

32:13.300 --> 32:14.300
那么我们是不是只需要

32:14.300 --> 32:15.300
把这个request

32:15.300 --> 32:16.300
ZS context

32:16.300 --> 32:17.300
request

32:18.300 --> 32:19.300
是不是扔过去

32:19.300 --> 32:20.300
扣着行就嘛

32:20.300 --> 32:21.300
扔过去

32:21.300 --> 32:22.300
好了就等待它吧

32:22.300 --> 32:24.300
等待它吧

32:24.300 --> 32:28.380
看一下响应的结果

32:31.380 --> 32:32.380
好了保存

32:32.380 --> 32:34.380
接下来我们来登录

32:36.380 --> 32:37.380
没运气

32:42.380 --> 32:45.720
好了

32:45.720 --> 32:46.720
这是什么呢

32:46.720 --> 32:47.720
是

32:48.720 --> 32:52.720
app.js must export boot class

32:52.720 --> 32:53.720
一个启动的

32:53.720 --> 32:55.720
一个启动的内

32:55.720 --> 32:56.720
它现在是要要求的

32:56.720 --> 32:58.720
用一个启动的内的

32:58.720 --> 32:59.720
我以后下来查一下

32:59.720 --> 33:01.720
现在肯定是也可以的

33:02.720 --> 33:03.720
点击

33:03.720 --> 33:04.720
爆错了

33:04.720 --> 33:05.720
它什么呢

33:06.720 --> 33:08.720
它说Pose of Undefend

33:09.720 --> 33:11.720
它说有一个

33:11.720 --> 33:13.720
这个地方确实不行

33:13.720 --> 33:17.160
这个地方app.js

33:17.160 --> 33:19.160
它现在不允许这种写法

33:19.160 --> 33:20.160
好我查一下吧

33:20.160 --> 33:21.160
直接查一下

33:21.160 --> 33:23.160
这东西叫做框架扩展

33:24.160 --> 33:26.160
扩展一下app.js

33:26.160 --> 33:28.160
扩展方式

33:28.160 --> 33:35.610
现在属性扩展

33:35.610 --> 33:36.610
我看一下

33:36.610 --> 33:37.610
属性扩展

33:44.270 --> 33:46.270
现在它得用这种方式

33:46.270 --> 33:48.270
它得用这种方式

33:50.270 --> 33:52.270
我这么有影响

33:52.270 --> 33:54.270
它是可以用之前的方式

33:54.270 --> 33:55.270
那现在不行了

33:55.270 --> 33:56.270
只能用这种方式

33:56.270 --> 33:58.270
这种方式就这种方式

33:59.270 --> 34:00.270
影响

34:00.270 --> 34:03.480
好

34:03.480 --> 34:05.480
现在我们再来

34:05.480 --> 34:07.480
重新继续

34:07.480 --> 34:08.480
好今天我们看一下这边

34:08.480 --> 34:10.480
得到的是服务器得到响应的结果

34:10.480 --> 34:11.480
对不对

34:11.480 --> 34:12.480
账号密码不正确

34:12.480 --> 34:14.480
那么这个结果是谁给我的

34:14.480 --> 34:15.480
是不是后端服务器

34:15.480 --> 34:16.480
我请求到了这儿

34:16.480 --> 34:18.480
我们提交登录

34:18.480 --> 34:19.480
账号密码到了这儿

34:19.480 --> 34:21.480
然后我通过这个app

34:22.480 --> 34:24.480
通过这边的app去请求服务

34:24.480 --> 34:25.480
后端服务器

34:25.480 --> 34:27.480
后端服务器告诉我的结果

34:27.480 --> 34:29.480
就是账号密码不正确

34:29.480 --> 34:30.480
那么现在我们

34:30.480 --> 34:32.480
分成两种情况来说

34:32.480 --> 34:33.480
一个是正确

34:33.480 --> 34:34.480
一个是不正确

34:34.480 --> 34:35.480
不正确的话

34:35.480 --> 34:37.480
我们之前好像用过这个结果

34:37.480 --> 34:38.480
不正确的话

34:38.480 --> 34:39.480
这个扣的是失败

34:39.480 --> 34:40.480
已经是大于零的

34:40.480 --> 34:41.480
所以我们这里判断了

34:41.480 --> 34:42.480
wisp data

34:44.480 --> 34:45.480
这是什么扣的

34:45.480 --> 34:46.480
是吧

34:46.480 --> 34:47.480
这个扣的属性

34:47.480 --> 34:48.480
是不是有值

34:48.480 --> 34:50.480
有值的话是登录失败

34:51.480 --> 34:53.480
好登录失败的话怎么办

34:55.480 --> 34:56.480
怎么办

34:56.480 --> 34:57.480
我是不是又要把

34:57.480 --> 34:58.480
之前的登录试图

34:58.480 --> 34:59.480
重新给他

34:59.480 --> 35:00.480
对吧

35:00.480 --> 35:01.480
你不能进手页

35:01.480 --> 35:02.480
现在进不了手页

35:02.480 --> 35:04.480
我得把试图重新给你

35:04.480 --> 35:05.480
把登录试图

35:05.480 --> 35:06.480
所以说在这里边

35:06.480 --> 35:07.480
我干吗呢

35:08.480 --> 35:10.480
我该重新删了个试图

35:11.480 --> 35:12.480
登录

35:12.480 --> 35:13.480
地区数据后

35:13.480 --> 35:14.480
有没有错误消息

35:14.480 --> 35:15.480
有了

35:15.480 --> 35:16.480
现在错误消息是什么呢

35:16.480 --> 35:18.480
就是这里的输

35:18.480 --> 35:19.480
没涉及

35:20.480 --> 35:21.480
对不对

35:21.480 --> 35:22.480
是不是这里的没涉及

35:22.480 --> 35:23.480
这个数据

35:24.480 --> 35:25.480
然后呢

35:25.480 --> 35:26.480
账号是什么呢

35:26.480 --> 35:27.480
账号是不是就是

35:27.480 --> 35:28.480
之前你填写的账号

35:28.480 --> 35:29.480
如果说你这个地方不写

35:29.480 --> 35:30.480
不写的话

35:30.480 --> 35:31.480
看一下会怎么样

35:31.480 --> 35:32.480
重新选择了个老点试图

35:33.480 --> 35:34.480
你看这个试图可以

35:34.480 --> 35:36.480
被不同的X型反复使用

35:36.480 --> 35:37.480
好

35:37.480 --> 35:38.480
加上来看一下保存

35:39.480 --> 35:40.480
现在我们这里重新

35:40.480 --> 35:42.480
体销一下表达

35:42.480 --> 35:43.480
说账号密码不正确

35:43.480 --> 35:45.480
然后重新写一个点击

35:45.480 --> 35:47.480
说账号密码不正确

35:47.480 --> 35:48.480
但是你看一下

35:48.480 --> 35:49.480
重新过来过来

35:49.480 --> 35:50.480
是不是这个东西都没了

35:50.480 --> 35:51.480
对吧

35:51.480 --> 35:52.480
账号密码全部过清空了

35:52.480 --> 35:53.480
我希望账号给我保留下来

35:53.480 --> 35:54.480
那怎么办呢

35:55.480 --> 35:56.480
你就看试图里边吧

35:57.480 --> 35:58.480
试图里边

35:58.480 --> 35:59.480
我们不是渲染这个

35:59.480 --> 36:01.480
locking这个试图的时候

36:01.480 --> 36:03.480
这个input它有可能有直

36:03.480 --> 36:04.480
对吧

36:04.480 --> 36:05.480
这个直是否locking id

36:06.480 --> 36:08.480
是不是要通过模型传给它

36:08.480 --> 36:09.480
那如果说你登录失败的时候

36:09.480 --> 36:11.480
我就把之前你填写的模型

36:11.480 --> 36:12.480
给力不就完了吗

36:15.050 --> 36:16.050
填写在这个保底里边的

36:16.050 --> 36:17.050
什么locking id

36:17.050 --> 36:18.050
对吧

36:18.050 --> 36:19.050
为初你发现登录失败

36:19.050 --> 36:21.050
他会把数据重新扔给你

36:21.050 --> 36:22.050
重新选择试图

36:22.050 --> 36:24.050
试图不知道怎么回事

36:24.050 --> 36:25.050
他只认这个模型

36:25.050 --> 36:26.050
你把模型给他

36:26.050 --> 36:27.050
他就选择

36:27.050 --> 36:28.050
就这么个意思

36:29.050 --> 36:30.050
好 相信

36:31.050 --> 36:32.050
你看

36:32.050 --> 36:33.050
之前的账号是不是在这了

36:33.050 --> 36:35.050
随便写个账号

36:36.050 --> 36:37.050
密码没了

36:37.050 --> 36:38.050
账号还在这

36:38.050 --> 36:39.050
对吧

36:39.050 --> 36:40.050
就这么个意思

36:41.050 --> 36:42.050
好 那么现在呢

36:42.050 --> 36:43.050
我们在里重新登录

36:43.050 --> 36:44.050
好 这顺便再说一下

36:44.050 --> 36:46.050
重新登录的时候

36:46.050 --> 36:48.050
比较多 这里重新输入内容

36:48.050 --> 36:49.050
登录的时候

36:49.050 --> 36:51.050
我希望把这个消去掉

36:51.050 --> 36:52.050
那怎么消去呢

36:52.050 --> 36:54.050
这个时候就跟服务器没有关系了

36:54.050 --> 36:56.050
这个时候是不是在刻铺端的动作

36:57.050 --> 36:58.050
刻铺端的动作

36:58.050 --> 36:59.050
我打一些东西

36:59.050 --> 37:01.050
我希望把它消除掉

37:01.050 --> 37:02.050
那怎么办呢

37:02.050 --> 37:04.050
我这里可以写个GS

37:04.050 --> 37:05.050
locking GS

37:05.050 --> 37:07.050
这个就是在刻铺端运行的GS

37:07.050 --> 37:09.050
然后我们在试图里边

37:09.050 --> 37:10.050
去引用这个GS

37:12.050 --> 37:13.050
src

37:13.050 --> 37:15.050
非常传统的模式

37:15.050 --> 37:17.050
locking叫GS

37:17.050 --> 37:18.050
好 这个GS里边

37:18.050 --> 37:19.050
我就注册时间了

37:19.050 --> 37:21.050
这两个文明方有时间

37:21.050 --> 37:22.050
对不对

37:22.050 --> 37:23.050
我就注册一个时间

37:23.050 --> 37:25.050
比方说我就可以

37:26.050 --> 37:27.050
注册input时间

37:28.050 --> 37:30.050
给账号注册input的时间

37:30.050 --> 37:31.050
那么我们得到

37:34.490 --> 37:35.490
input

37:35.490 --> 37:36.490
document

37:36.490 --> 37:38.490
getElementByTechnique

37:39.490 --> 37:41.490
得到了所谓的input

37:42.490 --> 37:43.490
然后来循环

37:43.490 --> 37:45.490
用forObe循环

37:45.490 --> 37:46.490
input

37:46.490 --> 37:48.490
好 每一个文明方

37:48.490 --> 37:50.490
给它注册一个input时间

37:50.490 --> 37:52.490
当按下去的时候

37:52.490 --> 37:53.490
当打字的时候

37:53.490 --> 37:54.490
我干嘛呢

37:54.490 --> 37:56.490
我就把这个给它消除掉

37:56.490 --> 37:57.490
这个玩意儿

37:57.490 --> 37:58.490
这个玩意儿是什么

37:58.490 --> 37:59.490
class with error

38:01.490 --> 38:03.490
Error这个DIV

38:03.490 --> 38:07.570
给它remove表

38:07.570 --> 38:08.570
当然要前条件

38:08.570 --> 38:09.570
看有没有

38:11.570 --> 38:13.570
如果有的话

38:14.570 --> 38:15.570
remove

38:16.570 --> 38:18.570
那么这个GS就在客户端运行的

38:18.570 --> 38:19.570
好 再来

38:20.570 --> 38:21.570
错误

38:21.570 --> 38:23.570
一看是不是遗书掉了

38:23.570 --> 38:25.570
这个服务器没什么关系

38:25.570 --> 38:26.570
而一提交

38:26.570 --> 38:27.570
然后服务器传过来的过后

38:27.570 --> 38:28.570
又有这个东西

38:28.570 --> 38:29.570
这个东西是服务器传的

38:29.570 --> 38:30.570
选择的

38:30.570 --> 38:31.570
然后后续

38:31.570 --> 38:33.570
客户端接管后续的东西

38:33.570 --> 38:35.570
然后重新提交到服务器

38:35.570 --> 38:37.570
服务器又给我选择一个新的页面

38:37.570 --> 38:39.570
这是传统的模式

38:39.570 --> 38:40.570
再来看一下

38:40.570 --> 38:41.570
mvc

38:41.570 --> 38:42.570
控制器登入

38:42.570 --> 38:43.570
控制器

38:43.570 --> 38:44.570
组装一个模型

38:44.570 --> 38:46.570
给我一个试图

38:46.570 --> 38:48.940
控制器

38:48.940 --> 38:50.940
组装模型

38:50.940 --> 38:51.940
给我试图

38:52.940 --> 38:53.940
然后呢

38:53.940 --> 38:54.940
接下来就是用户在试图里面

38:54.940 --> 38:55.940
各种操作了

38:55.940 --> 38:56.940
操作完了过后

38:56.940 --> 38:58.940
再提交

38:58.940 --> 39:01.940
到了另一个控制器的X型

39:01.940 --> 39:02.940
然后呢

39:02.940 --> 39:04.940
组装模型给我试图

39:04.940 --> 39:05.940
对不对

39:05.940 --> 39:06.940
都登入失败

39:06.940 --> 39:08.940
好 那么登入成功呢

39:08.940 --> 39:12.640
登入成功是不是要基督Cookie

39:13.640 --> 39:14.640
是要基督Cookie

39:14.640 --> 39:15.640
那么那个Cookie呢

39:15.640 --> 39:17.640
如果说成功了

39:17.640 --> 39:19.640
我们之前看到的服务器

39:19.640 --> 39:20.640
它会给我一个

39:20.640 --> 39:22.640
享用头里面会有一个Otterization

39:23.640 --> 39:24.640
对吧

39:24.640 --> 39:26.640
那么我们在这里是不是可以通过Rave

39:26.640 --> 39:27.640
Headers

39:28.640 --> 39:29.640
通过这个玩意儿拿到

39:29.640 --> 39:30.640
对不对

39:30.640 --> 39:31.640
这是不是Token

39:32.640 --> 39:33.640
这是服务器

39:33.640 --> 39:35.640
后端服务器给我们享用的Token

39:35.640 --> 39:36.640
看一下吧

39:36.640 --> 39:37.640
登入成功

39:37.640 --> 39:38.640
有的

39:38.640 --> 39:39.640
123

39:39.640 --> 39:40.640
登入

39:42.640 --> 39:43.640
怎么了

39:43.640 --> 39:46.850
没问题

39:47.850 --> 39:49.850
这就不是123

39:49.850 --> 39:50.850
我看一下

39:50.850 --> 39:51.850
123

39:51.850 --> 39:54.670
123

39:54.670 --> 39:55.670
再来啊

39:56.670 --> 39:58.670
后面有多了一些空格

39:59.670 --> 40:00.670
123

40:00.670 --> 40:01.670
123

40:01.670 --> 40:04.240
登入

40:04.240 --> 40:05.240
好 那么这边是404

40:05.240 --> 40:06.240
没关系

40:06.240 --> 40:07.240
因为这边为什么是404

40:07.240 --> 40:08.240
因为这里边没有处理

40:08.240 --> 40:09.240
没有做任何处理

40:10.240 --> 40:11.240
好 你看这里

40:11.240 --> 40:13.240
是不是服务器给我的Token

40:13.240 --> 40:14.240
那么现在我要做的是什么呢

40:14.240 --> 40:15.240
就是把这个Token

40:15.240 --> 40:16.240
直接扔给客服端

40:16.240 --> 40:17.240
就玩笑了

40:17.240 --> 40:18.240
对吧

40:18.240 --> 40:19.240
然后你也可以根据你的需要

40:19.240 --> 40:21.240
要不要对它再一步进一步进行加密

40:21.240 --> 40:23.240
因为这个Age解释里边

40:23.240 --> 40:25.240
它会默正对Cookie进行加密

40:25.240 --> 40:26.240
为什么呢

40:26.240 --> 40:27.240
因为你看这里不留配置

40:28.240 --> 40:30.240
默正会给Cookie进行加密

40:30.240 --> 40:31.240
那就加密

40:31.240 --> 40:32.240
再进一步加密

40:32.240 --> 40:33.240
好 那么来看一下

40:33.240 --> 40:34.240
这边我们是不是可以

40:34.240 --> 40:35.240
怎么样呢

40:35.240 --> 40:36.240
Z

40:37.240 --> 40:38.240
就是这个用法

40:38.240 --> 40:39.240
Cookie的用法

40:39.240 --> 40:40.240
跟那个KOS完全一样的

40:40.240 --> 40:42.240
Cookie is the set

40:42.240 --> 40:43.240
Cookie的名字

40:44.240 --> 40:45.240
就Token

40:46.240 --> 40:47.240
Cookie的值

40:47.240 --> 40:48.240
就Token

40:49.240 --> 40:50.240
后面是Cookie的一些配置

40:50.240 --> 40:51.240
你懂的

40:52.240 --> 40:53.240
就設置Cookie

40:53.240 --> 40:55.240
好 設置完Cookie过后

40:55.240 --> 40:56.240
还要干嘛呢

40:57.240 --> 40:58.240
登陆成功要干嘛

40:58.240 --> 40:59.240
是不是跳到哪儿手页

41:01.240 --> 41:02.240
跳到哪儿手页是什么呢

41:02.240 --> 41:03.240
我就不渲染试图了

41:04.240 --> 41:05.240
我用什么呢

41:05.240 --> 41:06.240
我就用Redirex

41:06.240 --> 41:07.240
重定箱

41:07.240 --> 41:08.240
302重定箱

41:08.240 --> 41:10.240
高速客服端给我跳转

41:10.240 --> 41:11.240
跳到哪儿手页去

41:11.240 --> 41:12.240
手页的地址不就这个吗

41:13.240 --> 41:14.240
对吧

41:14.240 --> 41:15.240
那么现在的情况就是

41:15.240 --> 41:17.240
到了Controller登陆成功了

41:18.240 --> 41:19.240
我又没有模型

41:19.240 --> 41:21.240
成功了我就不给你组装模型了

41:21.240 --> 41:22.240
直接返回客服端

41:22.240 --> 41:24.240
然后告诉他302重定箱

41:24.240 --> 41:25.240
重新请求手页

41:25.240 --> 41:27.240
于是302客服端又重新请求手页

41:27.240 --> 41:28.240
又到了Controller

41:28.240 --> 41:29.240
到了哪个Controller

41:29.240 --> 41:30.240
到了Home

41:30.240 --> 41:32.240
然后又给模型

41:32.240 --> 41:33.240
模型是什么

41:33.240 --> 41:34.240
这个

41:34.240 --> 41:35.240
渲染试图

41:35.240 --> 41:36.240
渲染试图是什么

41:36.240 --> 41:37.240
Home

41:37.240 --> 41:38.240
把肉渲染出来了

41:38.240 --> 41:39.240
可以客服端

41:39.240 --> 41:40.240
整个就是这个过程

41:41.240 --> 41:42.240
好 咱们来看一下吧

41:42.240 --> 41:44.240
现在我们重新登陆一次

41:44.240 --> 41:45.240
成功

41:46.240 --> 41:47.240
对不对

41:47.240 --> 41:48.240
好 然后看一下Cookie

41:48.240 --> 41:51.260
Cookie

41:52.260 --> 41:53.260
或者是之前的

41:57.530 --> 41:58.530
得到了

41:58.530 --> 41:59.530
得到了手页

41:59.530 --> 42:00.530
为什么Cookie这里有两个呢

42:00.530 --> 42:02.530
为什么有两个呢

42:02.530 --> 42:04.530
为什么有两个就是Token

42:04.530 --> 42:05.530
一个是加密的

42:05.530 --> 42:06.530
一个是原式的

42:06.530 --> 42:07.530
一个是原式的

42:07.530 --> 42:09.530
原式就是我这里给他发的

42:09.530 --> 42:10.530
这个东西

42:10.530 --> 42:11.530
一个是

42:11.530 --> 42:13.530
因为他会自动给Cookie加密

42:13.530 --> 42:14.530
会给加密

42:14.530 --> 42:15.530
那么到时候他会验证

42:15.530 --> 42:17.530
Cookie没有被创改

42:17.530 --> 42:18.530
总之你不用管

42:18.530 --> 42:20.530
这些东西你都不用管

42:20.530 --> 42:21.530
好 那么现在呢

42:21.530 --> 42:22.530
我们就把Cookie扔过去了

42:23.530 --> 42:25.530
好 接下来就是手页了

42:25.530 --> 42:26.530
手页我要干嘛呢

42:26.530 --> 42:27.530
手页呢

42:27.530 --> 42:28.530
我首先要做的事情

42:28.530 --> 42:30.530
你能不能进手页

42:31.530 --> 42:32.530
是不是要做这么一件事

42:33.530 --> 42:35.530
你能不能进入手页

42:35.530 --> 42:36.530
我们在X里边

42:36.530 --> 42:38.530
能不能进入手页

42:38.530 --> 42:39.530
看那个图

42:40.530 --> 42:41.530
请求到了手页

42:41.530 --> 42:42.530
我先不着急

42:42.530 --> 42:43.530
给你什么模型试图

42:43.530 --> 42:45.530
我看一下能不能进这个X

42:45.530 --> 42:47.530
不能的话你给我回到登录页去

42:48.530 --> 42:49.530
如果能的话

42:49.530 --> 42:50.530
我在X里主导什么模型

42:50.530 --> 42:51.530
要这些东西

42:51.530 --> 42:53.530
那么首先能不能进手页呢

42:53.530 --> 42:55.530
是不是要把Cookie给我

42:55.530 --> 42:56.530
对吧

42:56.530 --> 42:57.530
是不是要我要看Cookie

42:57.530 --> 42:59.530
那么我这里是不是可以拿到

42:59.530 --> 43:00.530
Cookie

43:03.530 --> 43:04.530
对不对

43:04.530 --> 43:05.530
是把Cookie拿到

43:08.290 --> 43:13.540
好 保存

43:13.540 --> 43:14.540
接下来我们看一下手页

43:14.540 --> 43:15.540
刷新

43:15.540 --> 43:17.540
这边是把拿到这个Cookie

43:17.540 --> 43:18.540
头肯你看 是不是拿到了

43:18.540 --> 43:20.540
拿到这个头肯过后

43:21.540 --> 43:22.540
首先你有没有

43:22.540 --> 43:24.540
比方说你都没有的话

43:25.540 --> 43:26.540
那我肯定是不允许你进的

43:26.540 --> 43:28.540
因为我们这个需求里边

43:28.540 --> 43:29.540
看需求 具体看需求

43:29.540 --> 43:31.540
我们这个需求里边

43:32.540 --> 43:33.540
刷新

43:33.540 --> 43:35.540
我们这个需求里边是什么呢

43:35.540 --> 43:38.540
是手页必须要登录之后才能进

43:38.540 --> 43:40.540
手页必须要登录之后才能进

43:40.540 --> 43:41.540
看需求

43:41.540 --> 43:43.540
那么现在我们没有这个头肯怎么办

43:43.540 --> 43:44.540
没有这个头肯

43:44.540 --> 43:45.540
如果说

43:45.540 --> 43:46.540
头肯不存在

43:48.540 --> 43:49.540
头肯不存在

43:51.540 --> 43:52.540
怎么办

43:52.540 --> 43:53.540
怎么办

43:53.540 --> 43:54.540
回到登录页

43:54.540 --> 43:55.540
你还在干嘛

43:55.540 --> 43:56.540
ZX

43:58.540 --> 43:59.540
ZX

44:00.540 --> 44:02.540
又回去登录

44:04.540 --> 44:05.540
这个函数就结束了

44:05.540 --> 44:06.540
不要往后面运行了

44:07.540 --> 44:08.540
都是这种情况

44:10.540 --> 44:12.540
另外一种就是头肯存在

44:12.540 --> 44:13.540
存在的话

44:13.540 --> 44:14.540
我怎么办

44:15.540 --> 44:16.540
存在的话

44:16.540 --> 44:17.540
我是不是可以通过

44:17.540 --> 44:20.540
之前一个互MI

44:20.540 --> 44:21.540
来吧

44:21.540 --> 44:22.540
我去请求这个地址

44:22.540 --> 44:24.540
把这个什么传过去对吧

44:24.540 --> 44:26.540
把这个什么authorization

44:26.540 --> 44:27.540
authorization

44:27.540 --> 44:28.540
这前面加个barrel

44:28.540 --> 44:30.540
是不是传过去

44:30.540 --> 44:31.540
来吧

44:31.540 --> 44:32.540
如果说存在

44:32.540 --> 44:33.540
存在的话

44:33.540 --> 44:36.540
我们这里使用什么ZX

44:36.540 --> 44:38.540
然后用什么get请求

44:38.540 --> 44:39.540
请求什么地址

44:39.540 --> 44:40.540
请这个地址

44:41.540 --> 44:42.540
header

44:44.540 --> 44:45.540
加上一个什么

44:45.540 --> 44:46.540
authorization

44:48.540 --> 44:49.540
加上这个玩意

44:50.540 --> 44:51.540
消息吧

44:51.540 --> 44:52.540
然后呢

44:52.540 --> 44:54.540
后边写上barrel

44:54.540 --> 44:58.820
然后后边拼接上什么

44:58.820 --> 44:59.820
token

44:59.820 --> 45:00.820
再扔过去

45:00.820 --> 45:02.820
就得到我当前登录的用户是谁

45:02.820 --> 45:03.820
对不对

45:03.820 --> 45:04.820
await

45:04.820 --> 45:05.820
是不是拿数据

45:05.820 --> 45:06.820
我要开始组装模型了

45:18.940 --> 45:19.940
保存

45:19.940 --> 45:20.940
我们来看一下

45:20.940 --> 45:21.940
登录成功之后

45:21.940 --> 45:22.940
现在肯定是不行的

45:22.940 --> 45:23.940
回到登录页了

45:24.940 --> 45:25.940
现在是谁跳转的

45:25.940 --> 45:26.940
是服务器跳转的

45:26.940 --> 45:27.940
服务器给了一个302

45:27.940 --> 45:28.940
你根本就不会给你

45:28.940 --> 45:29.940
首页的任何东西

45:29.940 --> 45:30.940
这跟以前

45:30.940 --> 45:32.940
我们在用学5u的时候那些跳转

45:32.940 --> 45:33.940
说完全不一样

45:33.940 --> 45:34.940
5u是在客户端跳转的

45:34.940 --> 45:35.940
不是

45:35.940 --> 45:37.940
全都是用get是搞定的

45:37.940 --> 45:38.940
客户端

45:38.940 --> 45:39.940
这现在是服务器

45:39.940 --> 45:40.940
根本就不给你这个页面

45:40.940 --> 45:41.940
那么现在我们登录

45:41.940 --> 45:42.940
有点123

45:42.940 --> 45:43.940
123

45:43.940 --> 45:44.940
登录

45:44.940 --> 45:47.940
为什么他又给我个空格

45:47.940 --> 45:49.940
为什么脑会给我一个空格

45:49.940 --> 45:50.940
我看一下

45:51.940 --> 45:52.940
我哪里

45:52.940 --> 45:53.940
刚才登录这里

45:54.940 --> 45:56.940
这里后边有多一个空格

45:56.940 --> 45:57.940
后边多一个空格

45:58.940 --> 45:59.940
好刷新

45:59.940 --> 46:00.940
来

46:03.940 --> 46:04.940
123

46:04.940 --> 46:05.940
123

46:05.940 --> 46:06.940
登录

46:08.940 --> 46:09.940
爆错

46:09.940 --> 46:10.940
爆啥错呀

46:13.500 --> 46:14.500
爆错

46:21.310 --> 46:22.310
我这里

46:22.310 --> 46:23.310
登

46:23.310 --> 46:24.310
HOME页面

46:25.310 --> 46:26.310
来个小事

46:26.310 --> 46:27.310
请求这个地址

46:28.310 --> 46:29.310
请求这个地址

46:30.310 --> 46:31.310
然后呢

46:31.310 --> 46:32.310
Headers里边

46:32.310 --> 46:33.310
Authorization

46:33.310 --> 46:34.310
Bearer

46:34.310 --> 46:35.310
Token

46:35.310 --> 46:37.310
现在Token肯定是可以拿到字的

46:37.310 --> 46:39.310
肯定是可以拿到字的

46:39.310 --> 46:40.310
没问题的

46:41.310 --> 46:42.310
你看啊

46:42.310 --> 46:43.310
Authorization

46:43.310 --> 46:44.310
Bearer

46:45.310 --> 46:47.310
后边是Token的字

46:48.310 --> 46:49.310
这个Token的字

46:50.310 --> 46:51.310
看一下啊

46:51.310 --> 46:56.380
UI

46:56.380 --> 46:57.380
没问题啊

46:58.380 --> 46:59.380
Token的字传过去

47:01.380 --> 47:02.380
怎么呢

47:03.380 --> 47:04.380
不行啊

47:09.060 --> 47:10.060
我们现在试一下吧

47:10.060 --> 47:11.060
试一下

47:11.060 --> 47:12.060
把这个

47:12.060 --> 47:13.060
把这个字

47:13.060 --> 47:14.060
复制一下

47:15.060 --> 47:16.060
然后Postman里边去

47:21.180 --> 47:22.180
转过来

47:22.180 --> 47:23.180
然后这边改一下

47:23.180 --> 47:24.180
改一下地址

47:24.180 --> 47:29.820
前边

47:30.820 --> 47:31.820
明白了

47:31.820 --> 47:32.820
明白了

47:32.820 --> 47:41.960
这也是ColorFig

47:41.960 --> 47:42.960
这是

47:43.960 --> 47:44.960
什么呢

47:45.960 --> 47:46.960
之前写的什么

47:46.960 --> 47:47.960
API Base

47:49.960 --> 47:51.960
一会儿有地址没给签罪

47:51.960 --> 47:52.960
好

47:52.960 --> 47:53.960
现在我们刷新

47:54.960 --> 47:55.960
看一下这里

47:55.960 --> 47:56.960
所以服务器告诉我

47:56.960 --> 47:57.960
你登注的用户找到了

47:57.960 --> 47:58.960
对吧 找到是这个

47:59.960 --> 48:01.960
那如果说这个字被穿改过了

48:01.960 --> 48:03.960
比方说被穿改过了

48:03.960 --> 48:06.270
被穿改过了

48:07.270 --> 48:08.270
那么现在我们刷新

48:09.270 --> 48:10.270
告诉我什么

48:10.270 --> 48:11.270
未收选或收存一过期

48:11.270 --> 48:12.270
对吧

48:12.270 --> 48:13.270
那么这种情况是不是也不行

48:13.270 --> 48:14.270
那么通过什么来判断

48:14.270 --> 48:15.270
通过一个扣子来判断

48:15.270 --> 48:16.270
对吧

48:16.270 --> 48:17.270
那么我们这里又来判断

48:19.840 --> 48:21.840
如果说res

48:21.840 --> 48:22.840
调data

48:22.840 --> 48:23.840
调什么扣子

48:23.840 --> 48:24.840
如果说有值

48:25.840 --> 48:26.840
登入过期

48:26.840 --> 48:28.840
或被穿改

48:29.840 --> 48:30.840
那么这个时候呢

48:30.840 --> 48:31.840
干嘛呢

48:31.840 --> 48:32.840
return

48:33.840 --> 48:34.840
return肯定要写的

48:34.840 --> 48:36.840
然后是不是还是重定一下

48:36.840 --> 48:37.840
对吧 还是重定一下

48:39.840 --> 48:40.840
保存

48:40.840 --> 48:41.840
接下来我们来看

48:41.840 --> 48:42.840
被穿改过后

48:43.840 --> 48:44.840
加上了钱粹

48:44.840 --> 48:45.840
被穿改过后

48:47.840 --> 48:48.840
刷新

48:48.840 --> 48:49.840
是不是还是到登录页了

48:49.840 --> 48:50.840
对吧 你仍然不行

48:51.840 --> 48:52.840
必须要不能创改

48:52.840 --> 48:53.840
又到登录页了

48:53.840 --> 48:54.840
为什么到了首页过后

48:54.840 --> 48:55.840
又发现又不行了

48:56.840 --> 48:57.840
好 那么现在呢

48:57.840 --> 48:58.840
改正确

49:00.840 --> 49:01.840
就到了首页了

49:01.840 --> 49:02.840
那么首页的时候呢

49:02.840 --> 49:03.840
是不是就可以拿到

49:03.840 --> 49:04.840
当前登录的用户信息了

49:05.840 --> 49:06.840
对不对

49:06.840 --> 49:07.840
好 我们现在组装模型

49:07.840 --> 49:09.840
比方说首页上要显示什么呢

49:09.840 --> 49:10.840
首页上

49:10.840 --> 49:11.840
首页现在要显示

49:11.840 --> 49:12.840
当前登录的用户

49:12.840 --> 49:14.840
我们把当前登录的用户信息

49:14.840 --> 49:15.840
比方邮件

49:15.840 --> 49:16.840
当前登录的用户

49:16.840 --> 49:17.840
是谁呢

49:18.840 --> 49:20.840
是race.data

49:22.840 --> 49:23.840
data

49:23.840 --> 49:26.150
对吧

49:26.150 --> 49:27.150
这是消息体嘛

49:27.150 --> 49:28.150
消息体

49:28.150 --> 49:30.150
消息体里边的data属性

49:30.150 --> 49:31.150
然后呢

49:31.150 --> 49:32.150
我还要得到一些地区

49:32.150 --> 49:33.150
得到一些省份数据

49:33.150 --> 49:34.150
省份数据在这

49:38.150 --> 49:39.150
通过这个地址

49:39.150 --> 49:40.150
去拿省份数据

49:40.150 --> 49:41.150
来吧

49:41.150 --> 49:42.150
我们再去拿省份数据

49:43.150 --> 49:44.150
这里边

49:44.150 --> 49:45.150
又来

49:46.150 --> 49:47.150
visper2

49:47.150 --> 49:48.150
but wait

49:49.150 --> 49:50.150
this app

49:51.150 --> 49:52.150
actuals

49:52.150 --> 49:53.150
get

49:55.780 --> 49:56.780
this config

49:58.780 --> 49:59.780
actuals

49:59.780 --> 50:00.780
评价上

50:00.780 --> 50:01.780
评价上这个玩意儿

50:01.780 --> 50:03.780
可以拿到所谓的地区数据

50:03.780 --> 50:05.780
好 我们把这个地区数据呢

50:05.780 --> 50:07.780
加到这个model里边来

50:07.780 --> 50:08.780
model

50:09.780 --> 50:10.780
到什么

50:11.780 --> 50:12.780
province

50:12.780 --> 50:13.780
provinces

50:13.780 --> 50:15.780
visper2.data

50:15.780 --> 50:16.780
输出

50:16.780 --> 50:17.780
model

50:17.780 --> 50:18.780
看一下我们的模型是啥

50:18.780 --> 50:20.780
我们自己去组装模型

50:21.780 --> 50:22.780
看一下我们的模型是啥

50:25.930 --> 50:26.930
这边

50:26.930 --> 50:27.930
发现

50:29.930 --> 50:30.930
我们的模型里边

50:30.930 --> 50:32.930
是不是有各种地区数据

50:32.930 --> 50:33.930
地区数据

50:33.930 --> 50:34.930
还包括什么

50:34.930 --> 50:35.930
用户数据都有了

50:35.930 --> 50:36.930
两个属性

50:36.930 --> 50:37.930
一个user 一个province

50:37.930 --> 50:39.930
好 那么把这个模型

50:39.930 --> 50:40.930
扔给

50:40.930 --> 50:41.930
扔给什么呢

50:41.930 --> 50:42.930
我在这里把展开

50:43.930 --> 50:44.930
展开 扔给谁

50:44.930 --> 50:45.930
扔给这个仕图

50:45.930 --> 50:47.930
那么生下来就交给仕图了

50:47.930 --> 50:48.930
你把渲染出来就完事了

50:48.930 --> 50:49.930
仕图里边比

50:49.930 --> 50:51.930
比方说吧 随便下举个例子

50:51.930 --> 50:53.930
仕图里边我们要得到

50:53.930 --> 50:54.930
当前用户

50:54.930 --> 50:55.930
就离好谁呢

50:56.930 --> 50:57.930
ejs out

50:58.930 --> 51:00.930
我只能提示

51:00.930 --> 51:01.930
ejs

51:02.930 --> 51:03.930
ejs

51:04.930 --> 51:05.930
我觉得这样吧

51:06.930 --> 51:07.930
这边我得到什么呢

51:07.930 --> 51:10.930
得到user数据的

51:10.930 --> 51:11.930
什么呢

51:11.930 --> 51:12.930
user里边有啥

51:13.930 --> 51:14.930
nickname

51:15.930 --> 51:16.930
保存

51:16.930 --> 51:17.930
刷新

51:17.930 --> 51:19.930
你好 不同用户

51:19.930 --> 51:21.930
然后后边我想写个

51:21.930 --> 51:22.930
li

51:22.930 --> 51:23.930
里边选择什么呢

51:23.930 --> 51:25.930
选择列表

51:25.930 --> 51:26.930
ejs

51:28.930 --> 51:29.930
for

51:29.930 --> 51:30.930
循环

51:30.930 --> 51:32.930
或者一起

51:32.930 --> 51:33.930
循环什么呢

51:33.930 --> 51:34.930
哪个数据

51:34.930 --> 51:36.930
province也是数据

51:36.930 --> 51:39.930
每个就是一个province

51:39.930 --> 51:40.930
好 来吧

51:40.930 --> 51:41.930
得到的是一个li

51:43.930 --> 51:45.930
得到的li

51:45.930 --> 51:46.930
然后每个li里边

51:46.930 --> 51:48.930
就是显示什么名称吗

51:48.930 --> 51:49.930
显示什么名称

51:49.930 --> 51:50.930
ejs

51:50.930 --> 51:56.220
p的nickname

51:57.220 --> 51:58.220
保存 刷新

51:59.220 --> 52:00.220
nickname没有吗

52:01.220 --> 52:02.220
叫什么

52:02.220 --> 52:05.940
simple name

52:05.940 --> 52:06.940
刷新

52:07.940 --> 52:08.940
我觉得

52:08.940 --> 52:10.940
这个愁愁无所谓

52:10.940 --> 52:11.940
就这么个意思

52:11.940 --> 52:12.940
就是服务端圈的

52:12.940 --> 52:14.940
这是最传统的

52:14.940 --> 52:15.940
服务端圈的模式

52:15.940 --> 52:16.940
mvc

52:16.940 --> 52:17.940
你看整个过程

52:17.940 --> 52:18.940
运行在客户端的

52:18.940 --> 52:19.940
json是不是很少

52:19.940 --> 52:20.940
这个东西

52:20.940 --> 52:21.940
好处在于什么呢

52:21.940 --> 52:23.940
好处的就是

52:23.940 --> 52:25.940
拥护感觉的速度很快

52:25.940 --> 52:26.940
它没有什么json

52:26.940 --> 52:27.940
没有什么在客户端

52:27.940 --> 52:29.940
这些地方去购建

52:29.940 --> 52:30.940
就是购建我们的网页

52:30.940 --> 52:31.940
宣传我们的网页

52:31.940 --> 52:32.940
全是在服务期宣传好的

52:32.940 --> 52:33.940
直接扔给你

52:33.940 --> 52:34.940
把拆做好了

52:34.940 --> 52:35.940
对于那样

52:35.940 --> 52:37.940
一到餐厅里边去吃饭

52:37.940 --> 52:38.940
传统的就是什么呢

52:38.940 --> 52:39.940
一直拆做好

52:39.940 --> 52:40.940
什么都可以弄好

52:40.940 --> 52:41.940
然后全部给

52:41.940 --> 52:42.940
端到里面前来

52:42.940 --> 52:43.940
直接用就行了

52:43.940 --> 52:45.940
那什么叫客户端圈

52:45.940 --> 52:46.940
什么呢

52:46.940 --> 52:47.940
vorex这些东西

52:47.940 --> 52:48.940
就是把配料

52:48.940 --> 52:50.940
就像有链箱吃自主产

52:50.940 --> 52:51.940
对吧

52:51.940 --> 52:52.940
或者是吃火锅

52:52.940 --> 52:53.940
全部把配料

52:53.940 --> 52:54.940
全部打给你自己去搞定

52:54.940 --> 52:56.940
就两种模式

52:56.940 --> 52:57.940
好了

52:57.940 --> 52:58.940
这就是这一块

52:58.940 --> 52:59.940
当然这个mvc里边

52:59.940 --> 53:01.940
还有很多很多的细节

53:01.940 --> 53:02.940
包括一些重复代码的体讯

53:02.940 --> 53:03.940
你看现在的

53:03.940 --> 53:04.940
像这一块的代码

53:04.940 --> 53:05.940
肯定是不是很合适的

53:05.940 --> 53:07.940
这块代码是不合适

53:07.940 --> 53:08.940
如果说

53:08.940 --> 53:09.940
你现在不仅手机

53:09.940 --> 53:10.940
还有很多别的页面

53:10.940 --> 53:11.940
别的x型

53:11.940 --> 53:12.940
它都要进行检查

53:12.940 --> 53:14.940
全部到处都要写重复代码

53:14.940 --> 53:15.940
那么这代码怎么处理

53:15.940 --> 53:16.940
我们后边来说吧

