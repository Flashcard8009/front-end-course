WEBVTT

00:00.050 --> 00:03.050
好 这节课咱们讲这个中间见

00:03.050 --> 00:06.050
上节课我们说了模板引擎

00:06.050 --> 00:08.050
老师呢

00:08.050 --> 00:11.050
总是害怕大家把这个知识学死了

00:11.050 --> 00:13.050
那上节课我们是不是举了个例子

00:13.050 --> 00:16.050
用模板引擎干嘛呢 用模板引擎来渲染夜面

00:16.050 --> 00:19.050
对吧 咱们渲染出来一些夜面

00:19.050 --> 00:22.050
但实际上的这个模板引擎啊

00:22.050 --> 00:24.050
它是不是可以渲染任何东西啊

00:24.050 --> 00:27.050
因为模板引擎的本质就是把一个制服串一个对象

00:27.050 --> 00:29.050
然后给你生成一个制服串

00:29.050 --> 00:31.050
无非就是做这么一件事对吧

00:31.050 --> 00:33.050
而且模板引擎很多 我们用的是EJS

00:33.050 --> 00:35.050
当然还要non jacks

00:35.050 --> 00:38.050
这我用的模板引擎我觉得最好用的

00:38.050 --> 00:41.050
当然前端没有啊 前端没有这个模板引擎

00:41.050 --> 00:44.050
是c sharp的一个模板引擎 叫Razor

00:44.050 --> 00:46.050
这个模板引擎特别特别好用

00:46.050 --> 00:49.050
好用到爆炸 但是前端的可惜没有

00:49.050 --> 00:51.050
EJS还有non jacks

00:51.050 --> 00:54.050
他们做的都是一件事 把一个制服串

00:54.050 --> 00:57.050
选择成一个对象 选择成另外一个制服串

00:57.050 --> 00:59.050
那你知道它的本质过后呢

00:59.050 --> 01:02.050
你就可以灵活处理了 像咱们学技术啊

01:02.050 --> 01:06.050
特别是你们将来有了几年工作经验之后

01:06.050 --> 01:09.050
你会发现技术特别特别灵活

01:09.050 --> 01:11.050
而不是死的 死的是什么意思呢

01:11.050 --> 01:13.050
你去技术那种几个场景

01:13.050 --> 01:15.050
除了这几个场景 你就不知道该怎么办了

01:15.050 --> 01:17.050
其实技术呢 就是一个工具

01:17.050 --> 01:19.050
我给你模板引擎 你多了一个工具

01:19.050 --> 01:21.050
我给你ka 多了一个工具

01:21.050 --> 01:23.050
给了一些中间 多了一些工具

01:23.050 --> 01:25.050
也有整合了一些工具

01:25.050 --> 01:28.050
它本身的也是个工具 技术就是工具

01:28.050 --> 01:30.050
让你用工具去解决问题

01:30.050 --> 01:33.050
让你像我们上级课学的模板引擎

01:33.050 --> 01:35.050
你还能想到什么呢

01:35.050 --> 01:37.050
我们除了渲染页面

01:37.050 --> 01:39.050
能不能渲染CSS呢

01:39.050 --> 01:41.050
那我们来试一下吧

01:41.050 --> 01:44.050
你可以一想天开地去做任何你想做的事情

01:44.050 --> 01:48.050
比方说 我要有一个CSS

01:48.050 --> 01:50.050
CSS我们都是静态的嘛 对不对

01:50.050 --> 01:52.050
一般来说都是静态的文件 写实的

01:52.050 --> 01:55.050
那有的时候 我的CSS能不能变成动态的文件呢

01:55.050 --> 01:57.050
变成动态的呢 能不能呢

01:57.050 --> 01:59.050
当然可以 我就用模板引擎来做呗

01:59.050 --> 02:02.050
比方说 我随便举个下举个例子

02:02.050 --> 02:05.050
我就说Home里边

02:05.050 --> 02:07.050
Adder CSS

02:07.050 --> 02:09.050
如果说你访问这样的例子

02:09.050 --> 02:12.050
我交给Home.CSS来出一个

02:12.050 --> 02:13.050
就随便下写一个

02:13.050 --> 02:15.050
那你看一下吧

02:15.050 --> 02:17.050
我就再写一个函数

02:17.050 --> 02:20.050
I think

02:20.050 --> 02:22.050
Home 对吧

02:22.050 --> 02:24.050
CSS

02:24.050 --> 02:26.050
那我这里干嘛呢 我这里就选了

02:26.050 --> 02:28.050
CTS

02:28.050 --> 02:30.050
This CTS

02:30.050 --> 02:31.050
然后呢 用什么

02:31.050 --> 02:34.050
Render Stream

02:34.050 --> 02:37.050
Render View

02:37.050 --> 02:39.050
来选择一个试图

02:39.050 --> 02:40.050
试图的名字呢

02:40.050 --> 02:43.050
也就叫做

02:44.050 --> 02:46.050
试图的名字 我就叫做

02:48.050 --> 02:50.050
给它一个对象

03:03.420 --> 03:05.420
那么这里呢 是不是生成一个制服串

03:05.420 --> 03:08.420
对不对 这是一个制服串

03:09.420 --> 03:11.420
那么我现在要做的事情就是

03:11.420 --> 03:13.420
把这个制服串呢 放到

03:13.420 --> 03:15.420
Body里边

03:15.420 --> 03:17.420
然后呢 设置一下

03:17.420 --> 03:19.420
Counting Type

03:19.420 --> 03:21.420
我的QA里边设置Type好像就是

03:21.420 --> 03:23.420
Context

03:23.420 --> 03:25.420
查一下啊 这些API忘了

03:25.420 --> 03:28.860
你就查一下官方文档

03:28.860 --> 03:31.370
看一下吧

03:31.370 --> 03:34.370
看一下Context里边有没有什么

03:34.370 --> 03:36.370
设置Content Type

03:36.370 --> 03:38.370
当然你也可以直接用Adder来设置

03:38.370 --> 03:39.370
对吧

03:39.370 --> 03:41.370
来找啊

03:41.370 --> 03:43.370
Response

03:43.370 --> 03:44.370
Type

03:44.370 --> 03:47.370
OK 就Type

03:47.370 --> 03:49.370
Type呢 我把设置为什么呢

03:49.370 --> 03:51.370
设置为Text CSS

03:51.370 --> 03:52.370
对不对

03:52.370 --> 03:54.370
那么我们现在就是在这里边

03:54.370 --> 03:55.370
去渲染出来就换一双了

03:55.370 --> 03:56.370
我们在Vue里面新建设文件

03:56.370 --> 03:58.370
CSS EGS

03:58.370 --> 04:00.370
好 那么这个里边号就写CSS代码

04:00.370 --> 04:02.370
Background

04:02.370 --> 04:04.370
那么这边我们是不是

04:04.370 --> 04:06.370
可以用那个模板引擎的代码

04:06.370 --> 04:07.370
对不对 它把这个制服串

04:07.370 --> 04:09.370
渲染出来就变成一个CSS代码了

04:09.370 --> 04:10.370
对不对 那么这边呢

04:10.370 --> 04:11.370
我们可以用什么呢

04:11.370 --> 04:13.370
可以用这个Ease Black and White

04:13.370 --> 04:16.370
就有的时候一些名人去世了

04:16.370 --> 04:18.370
那么我们的网站可能会变成黑板色

04:18.370 --> 04:21.370
当然它不是一定是用这种方式来做的

04:21.370 --> 04:22.370
我就说明这个道理

04:22.370 --> 04:24.370
就CSS它也可以变成动态的

04:24.370 --> 04:26.370
我不一定要有这个文件

04:26.370 --> 04:27.370
我可以通过模板引擎来渲染出来

04:27.370 --> 04:30.370
我甚至都可以不用这个模板引擎文件

04:30.370 --> 04:31.370
我用制服串

04:31.370 --> 04:32.370
模板引擎可以渲染制服串的

04:32.370 --> 04:34.370
等于是渲染制服串

04:34.370 --> 04:36.370
这些灵活处理

04:36.370 --> 04:38.370
我们这里可以写上什么呢

04:38.370 --> 04:39.370
如果说黑白了

04:39.370 --> 04:42.370
那么我们背景颜色呢就是

04:43.370 --> 04:44.370
否则的话

04:44.370 --> 04:46.370
我的背景颜色呢就是

04:48.370 --> 04:50.370
Night Blue

04:51.370 --> 04:52.370
Color

04:55.450 --> 04:56.450
一样的

04:56.450 --> 04:58.450
如果说它是一个黑白色的

04:58.450 --> 05:00.450
那么我们的就是白色

05:00.450 --> 05:02.450
否则的话就是

05:05.450 --> 05:06.450
比方说随便想写一个

05:09.400 --> 05:10.400
不能各说

05:10.400 --> 05:12.400
保存 保存过后启动

05:12.400 --> 05:16.860
运出来看一下

05:23.340 --> 05:24.340
我们访问这个

05:29.340 --> 05:30.340
检查一下

05:30.340 --> 05:32.340
检查一下重新

05:32.340 --> 05:33.340
刷新

05:34.340 --> 05:36.340
contentive css

05:36.340 --> 05:37.340
这个是没问题的

05:37.340 --> 05:39.340
Response里边为什么是只有这个

05:40.340 --> 05:42.340
Response里边只有这个

05:42.340 --> 05:43.340
我们来设处一下

05:43.340 --> 05:45.340
输出一下这个view

05:45.340 --> 05:46.340
输出view

05:47.340 --> 05:48.340
我知道了

05:49.340 --> 05:50.340
位置

05:50.340 --> 05:52.340
说要等待

05:52.340 --> 05:53.340
等待

05:53.340 --> 05:56.340
保存 再来刷新

05:56.340 --> 05:57.340
你看

05:57.340 --> 05:59.340
目前是这个对吧

05:59.340 --> 06:01.340
那如果说我把这个地方改成

06:01.340 --> 06:02.340
改成force呢

06:02.340 --> 06:04.340
改成force

06:04.340 --> 06:05.340
刷新

06:05.340 --> 06:07.340
刷新 你看随便成这样子的

06:07.340 --> 06:08.340
对不对

06:08.340 --> 06:09.340
那么我们这个地方

06:09.340 --> 06:10.340
是不是还可以通过

06:10.340 --> 06:12.340
地址栏参数来进行决定

06:12.340 --> 06:13.340
到底是true还是force

06:13.340 --> 06:15.340
那么我们说可以这样子写

06:16.340 --> 06:17.340
ctx

06:17.340 --> 06:18.340
就是

06:19.340 --> 06:20.340
query

06:20.340 --> 06:22.340
query里边有一个

06:22.340 --> 06:23.340
随便写的属性吗

06:24.340 --> 06:25.340
special

06:25.340 --> 06:26.340
随便写的属性

06:26.340 --> 06:28.340
如果我们写成这个样子的话

06:28.340 --> 06:29.340
那么我们就可以再通过

06:29.340 --> 06:30.340
地址栏参数

06:31.340 --> 06:32.340
special

06:33.340 --> 06:34.340
special

06:35.340 --> 06:37.340
那么如果说不加这个

06:38.340 --> 06:39.340
special等于1

06:40.340 --> 06:41.340
如果说不加这个special

06:41.340 --> 06:42.340
或者是等于0

06:43.340 --> 06:44.340
或者是不写

06:46.340 --> 06:47.340
或者是不加吗

06:47.340 --> 06:48.340
不加

06:48.340 --> 06:49.340
不加这个special

06:50.340 --> 06:51.340
就变这个样子

06:51.340 --> 06:52.340
对吧

06:52.340 --> 06:53.340
如果说加上special

06:54.340 --> 06:55.340
就变这个样子

06:55.340 --> 06:56.340
对不对

06:56.340 --> 06:57.340
那么ctx

06:57.340 --> 06:58.340
一变动态的

06:58.340 --> 06:59.340
总之呢

06:59.340 --> 07:00.340
这个

07:00.340 --> 07:02.340
知识是非常非常灵活的

07:02.340 --> 07:03.340
非常非常灵活的

07:03.340 --> 07:04.340
模板引擎呢

07:04.340 --> 07:05.340
你可以在服务端

07:05.340 --> 07:06.340
渲染任何东西

07:06.340 --> 07:07.340
包括什么atmail

07:07.340 --> 07:08.340
还有动态的GS

07:08.340 --> 07:10.340
就是GS代码是不动态的

07:10.340 --> 07:12.340
代码本身是不动态的

07:12.340 --> 07:13.340
都可以依托于

07:13.340 --> 07:14.340
这个模板引擎来做

07:14.340 --> 07:16.340
它不一定是要渲染液面的

07:16.340 --> 07:18.340
我希望大家不要把知识决死了

07:18.340 --> 07:19.340
尽管呢

07:19.340 --> 07:20.340
绝大部分情况下

07:20.340 --> 07:21.340
它都是渲染液面

07:22.340 --> 07:23.340
好这就和我们回到这里

07:23.340 --> 07:24.340
讲中间键

07:24.340 --> 07:25.340
说讲中间

07:25.340 --> 07:26.340
我们也会举一个例子

07:26.340 --> 07:28.340
当然也不要把它决死了

07:29.340 --> 07:30.340
第一个就是编写中间键

07:30.340 --> 07:32.340
这个中间键是什么中间键呢

07:32.340 --> 07:33.340
就是kua的中间键

07:33.340 --> 07:34.340
只不过呢

07:34.340 --> 07:35.340
ag还希望你呢

07:35.340 --> 07:37.340
我们用统一的一种方式

07:37.340 --> 07:39.340
来编写kua的中间键

07:39.340 --> 07:40.340
我们以前怎么编写的

07:40.340 --> 07:41.340
就写个函数

07:41.340 --> 07:42.340
然后呢

07:42.340 --> 07:43.340
这个函数可以放到任何位置

07:44.340 --> 07:47.340
然后我们就可以利用app.use

07:47.340 --> 07:48.340
使用它的中间键

07:48.340 --> 07:49.340
这个ag里边呢

07:49.340 --> 07:50.340
还有统一的规范

07:50.340 --> 07:51.340
他认为呢

07:51.340 --> 07:52.340
你的中间键呢

07:52.340 --> 07:53.340
应该放到一个文件夹

07:53.340 --> 07:54.340
放到这个mw里边

07:54.340 --> 07:55.340
就这么一个文件夹

07:55.340 --> 07:56.340
这个文件夹里边写一张呢

07:56.340 --> 07:58.340
就写一个文件就是个中间键

07:58.340 --> 08:00.340
比方说我要写个文件

08:00.340 --> 08:01.340
随便写个嘛

08:01.340 --> 08:02.340
就是manmade

08:02.340 --> 08:06.220
我这里把一个代码复制一下

08:06.220 --> 08:09.750
下面那个代码

08:09.750 --> 08:11.750
这里新建一个manmade

08:11.750 --> 08:12.750
叫js

08:12.750 --> 08:13.750
那么这就是个中间键

08:13.750 --> 08:14.750
你看导说是什么呢

08:14.750 --> 08:16.750
导说是这么一种情况

08:16.750 --> 08:17.750
就是导说是一个函数

08:17.750 --> 08:18.750
导说是一个函数

08:18.750 --> 08:19.750
这个函数呢

08:19.750 --> 08:20.750
有两个函数

08:20.750 --> 08:21.750
一个是option

08:21.750 --> 08:23.750
表示这个中间键的配置

08:23.750 --> 08:24.750
那么一个呢

08:24.750 --> 08:25.750
是app

08:25.750 --> 08:27.750
app是整个ag的应用的对象

08:27.750 --> 08:28.750
对吧

08:28.750 --> 08:29.750
ag

08:29.750 --> 08:30.750
应用权利对象

08:30.750 --> 08:31.750
然后呢

08:31.750 --> 08:32.750
反回的是什么呢

08:32.750 --> 08:33.750
你看反回的不就是个中间键吗

08:33.750 --> 08:34.750
count

08:34.750 --> 08:36.750
也就是这个文件玩意儿是什么呢

08:36.750 --> 08:37.750
实际上是一个高间函数

08:37.750 --> 08:39.750
他为什么会这样子来处理呢

08:39.750 --> 08:40.750
因为他认为啊

08:40.750 --> 08:41.750
很多中间键

08:41.750 --> 08:43.750
我们以前用的很多中间键呢

08:43.750 --> 08:45.750
他都是通过一个高间函数来得到的

08:45.750 --> 08:47.750
他一个option是反回的中间键

08:47.750 --> 08:48.750
什么情况呢

08:48.750 --> 08:50.750
你看一下你回忆一下以前吧

08:50.750 --> 08:52.750
以前咱们不是用那个什么express

08:54.750 --> 08:55.750
第二

08:55.750 --> 08:56.750
static

08:56.750 --> 08:57.750
是不是一个函数

08:57.750 --> 08:59.750
这个函数反回的是这个中间键

08:59.750 --> 09:00.750
对吧

09:00.750 --> 09:01.750
还有什么express

09:01.750 --> 09:03.750
这里面还可以传那个参数配置

09:03.750 --> 09:04.750
节省是这个中间键

09:04.750 --> 09:05.750
对不对

09:05.750 --> 09:06.750
还有什么呢

09:06.750 --> 09:08.750
比方说什么ka

09:08.750 --> 09:11.750
ka里面也没有用过什么中间

09:11.750 --> 09:12.750
对吧

09:12.750 --> 09:13.750
那就是一个press吧

09:13.750 --> 09:14.750
然后呢

09:14.750 --> 09:15.750
rotor

09:15.750 --> 09:17.750
是不是反回个中间键

09:17.750 --> 09:18.750
对吧

09:18.750 --> 09:19.750
等等等等

09:19.750 --> 09:21.750
很多中间键都是通过一个函数反回的

09:21.750 --> 09:22.750
这个函数里边可以传一些

09:22.750 --> 09:24.750
对针对这个中间键本身的配置

09:24.750 --> 09:25.750
于是呢

09:25.750 --> 09:26.750
qa

09:26.750 --> 09:28.750
他把这种模式固定下来了

09:28.750 --> 09:30.750
他就当你必须要写这种模式

09:30.750 --> 09:31.750
那么他额外呢

09:31.750 --> 09:32.750
他会给

09:32.750 --> 09:33.750
除了配置之外

09:33.750 --> 09:35.750
他还会给你传一个app

09:35.750 --> 09:36.750
就整个a的全对象

09:36.750 --> 09:37.750
你要用就用

09:37.750 --> 09:38.750
不用拿着

09:38.750 --> 09:41.830
好

09:41.830 --> 09:42.830
这是关于中间的写法

09:42.830 --> 09:43.830
就在这

09:43.830 --> 09:44.830
就这样这样写

09:44.830 --> 09:45.830
那么怎么来用呢

09:45.830 --> 09:46.830
因为写了喊数过后

09:46.830 --> 09:47.830
你还要用进去对吧

09:47.830 --> 09:48.830
那么他用的时候呢

09:48.830 --> 09:50.830
a他分为两种

09:50.830 --> 09:51.830
一种是要全对中间键

09:51.830 --> 09:52.830
什么意思呢

09:52.830 --> 09:54.830
就是所有的

09:54.830 --> 09:56.830
情况下他都会运行这个中间键

09:56.830 --> 09:58.830
实际上在kong里边

09:58.830 --> 09:59.830
kong里边是不是一定是

09:59.830 --> 10:00.830
所有情况都会

10:00.830 --> 10:01.830
你只要注册这个中间键

10:01.830 --> 10:02.830
他所有情况都会运行

10:02.830 --> 10:04.830
但是a他里边

10:04.830 --> 10:05.830
他给你控制了一下

10:05.830 --> 10:06.830
他给你封装了一下

10:06.830 --> 10:07.830
控制了一下

10:07.830 --> 10:09.830
你可以进行配置

10:09.830 --> 10:10.830
分情况

10:10.830 --> 10:11.830
来运行中间

10:11.830 --> 10:12.830
他有两种注册方式

10:12.830 --> 10:13.830
两种应用方式

10:13.830 --> 10:14.830
一种是全局

10:14.830 --> 10:15.830
一种是路由级别

10:15.830 --> 10:17.830
我们首先看全局

10:17.830 --> 10:18.830
全局的话就很简单

10:18.830 --> 10:20.830
你只需要配置就行了

10:20.830 --> 10:23.830
那么a可能他追寻的一种思想就是

10:23.830 --> 10:25.830
配置全部统一写到一个地方

10:25.830 --> 10:26.830
到时候改的时候

10:26.830 --> 10:28.830
他就在一个地方改

10:28.830 --> 10:29.830
因此你建议你

10:29.830 --> 10:31.830
他把这个配置写到这

10:31.830 --> 10:33.830
config.default.js

10:33.830 --> 10:34.830
写到这

10:34.830 --> 10:35.830
这边咋写呢

10:35.830 --> 10:36.830
这边写法呢

10:36.830 --> 10:37.830
很简单

10:37.830 --> 10:39.830
export

10:39.830 --> 10:40.830
第二

10:40.830 --> 10:41.830
导出一个什么呢

10:41.830 --> 10:43.830
metal wears

10:43.830 --> 10:45.830
我看一下名字写对没有

10:45.830 --> 10:46.830
metal wear

10:46.830 --> 10:47.830
没有s

10:47.830 --> 10:50.830
那么这边写上的是一个书主

10:50.830 --> 10:52.830
这个书主里边呢

10:52.830 --> 10:53.830
一个个就是一个制服串

10:53.830 --> 10:55.830
比方刚才写的中间键叫manmade

10:55.830 --> 10:56.830
对吧

10:56.830 --> 10:57.830
那么这个制服串对应什么呢

10:57.830 --> 11:00.830
对应就是这边的文件名

11:00.830 --> 11:01.830
那就这样子呢

11:01.830 --> 11:03.830
一配置好了就告诉

11:03.830 --> 11:04.830
我到时候呢

11:04.830 --> 11:05.830
要加入一个中间键

11:05.830 --> 11:06.830
这个中间键的名字呢

11:06.830 --> 11:07.830
叫manmade

11:07.830 --> 11:08.830
那么这个中间在哪呢

11:08.830 --> 11:09.830
是不是在这个文件

11:09.830 --> 11:10.830
下面的manmade

11:10.830 --> 11:11.830
对吧

11:11.830 --> 11:13.830
他会去自动去寻找

11:13.830 --> 11:15.830
那么他就会找到这个中间键

11:15.830 --> 11:16.830
为什么是一个书主呢

11:16.830 --> 11:17.830
也就是说这里边是不是可以写

11:17.830 --> 11:18.830
多个中间键

11:18.830 --> 11:19.830
比如说日词记录啊

11:19.830 --> 11:20.830
做缓存啊

11:20.830 --> 11:23.830
这些其他的事情等等等等

11:23.830 --> 11:25.830
那是不是可以写很多

11:25.830 --> 11:26.830
这些中间是不是可以写到这

11:26.830 --> 11:27.830
写到这的话

11:27.830 --> 11:28.830
还按照个书主的顺序呢

11:28.830 --> 11:29.830
到时候会

11:29.830 --> 11:30.830
每日寝求到来过后呢

11:30.830 --> 11:33.830
还会一次的运行这些中间键

11:33.830 --> 11:34.830
这就是全局的中间键

11:34.830 --> 11:35.830
就写完了

11:35.830 --> 11:36.830
一个中间键

11:36.830 --> 11:37.830
一个配置就完事了

11:37.830 --> 11:38.830
接下来呢

11:38.830 --> 11:40.830
我们来随便刷新一个吧

11:40.830 --> 11:42.830
哪怕就刷新这个刷新

11:42.830 --> 11:43.830
你看这里是不是

11:43.830 --> 11:46.830
中间键开始中间键结束

11:46.830 --> 11:47.830
中间键开始

11:47.830 --> 11:48.830
然后交给下一个

11:48.830 --> 11:49.830
对吧

11:49.830 --> 11:50.830
中间键结束

11:50.830 --> 11:51.830
那么这个option是

11:51.830 --> 11:52.830
得到的是什么呢

11:52.830 --> 11:53.830
因为他没有配置

11:53.830 --> 11:54.830
得到的是空对象

11:54.830 --> 11:56.830
那如果说我想写配置怎么办呢

11:56.830 --> 11:57.830
就这个中间键

11:57.830 --> 11:58.830
他到底要做什么事情

11:58.830 --> 12:00.830
可能还要对这个

12:00.830 --> 12:02.830
还要依赖于这个配置

12:02.830 --> 12:03.830
那么配置的话

12:03.830 --> 12:05.830
我们统一还是一样的思想啊

12:05.830 --> 12:06.830
他也用的思想

12:06.830 --> 12:07.830
就是配置全部写到一个地方

12:07.830 --> 12:08.830
那么怎么来配置呢

12:08.830 --> 12:10.830
你就这样子写

12:10.830 --> 12:11.830
中间键是什么

12:11.830 --> 12:13.830
你就写名字

12:13.830 --> 12:15.830
你要针对这个中间键进行配置

12:15.830 --> 12:16.830
ok

12:16.830 --> 12:18.830
那么你就在这里写就行了

12:18.830 --> 12:19.830
也让eab等于2

12:19.830 --> 12:20.830
随便写写什么配置

12:20.830 --> 12:22.830
写任何配置都可以

12:22.830 --> 12:23.830
保存

12:23.830 --> 12:24.830
接下来我们再刷新看一下

12:24.830 --> 12:25.830
当然不一定是

12:25.830 --> 12:26.830
不一定是这个地址

12:26.830 --> 12:28.830
比方我们就访问login吧

12:30.830 --> 12:31.830
你看

12:31.830 --> 12:32.830
是不是也运行的

12:32.830 --> 12:33.830
中间键开始

12:33.830 --> 12:34.830
中间键结束

12:34.830 --> 12:35.830
然后我们刷新一下

12:35.830 --> 12:36.830
中间键开始

12:36.830 --> 12:37.830
中间键结束

12:37.830 --> 12:38.830
对不对

12:38.830 --> 12:39.830
这就是

12:39.830 --> 12:41.830
整理中间键的配置

12:42.830 --> 12:44.830
那么现在大家

12:45.830 --> 12:46.830
回忆一下

12:46.830 --> 12:48.830
我们之前呢

12:48.830 --> 12:50.830
有这么一个

12:50.830 --> 12:52.830
security

12:52.830 --> 12:53.830
那么这个玩意儿

12:53.830 --> 12:54.830
这个玩意儿

12:54.830 --> 12:56.830
实际上他就是一个中间键

12:56.830 --> 12:58.830
是他内置的一个中间键

12:58.830 --> 12:59.830
那么这个玩意儿

12:59.830 --> 13:00.830
就是针对这个中间键

13:00.830 --> 13:01.830
进行的配置

13:01.830 --> 13:02.830
那么也就是说

13:02.830 --> 13:03.830
这个中间键的名字

13:03.830 --> 13:04.830
是不是叫做security

13:04.830 --> 13:05.830
对吧

13:05.830 --> 13:06.830
实际上他就是个中间键

13:06.830 --> 13:08.830
我们以后还会讲到

13:08.830 --> 13:10.830
这是全中间键

13:10.830 --> 13:12.830
全中间键里边配置的时候

13:12.830 --> 13:13.830
大家可以注意

13:13.830 --> 13:15.830
还有三个配置是通用的

13:15.830 --> 13:17.830
就是你自己的

13:17.830 --> 13:18.830
中间键也好

13:18.830 --> 13:19.830
别人的中间键也好

13:19.830 --> 13:21.830
还有几个配置是通用的

13:21.830 --> 13:22.830
就什么配置呢

13:22.830 --> 13:23.830
一个是enable

13:24.830 --> 13:25.830
就这个配置

13:25.830 --> 13:26.830
他可以

13:26.830 --> 13:27.830
他会交给你

13:27.830 --> 13:28.830
他会交给你这个参数

13:28.830 --> 13:29.830
但是

13:29.830 --> 13:31.830
他有他特殊的意识

13:31.830 --> 13:33.830
就是是否启用中间键

13:33.830 --> 13:34.830
默认是启用

13:34.830 --> 13:35.830
他设为force过后

13:35.830 --> 13:36.830
我们来看一下

13:37.830 --> 13:38.830
设为force过后

13:38.830 --> 13:39.830
我们这里再刷新

13:39.830 --> 13:40.830
有没有运行

13:40.830 --> 13:41.830
是没有运行

13:41.830 --> 13:42.830
因为这个配置

13:42.830 --> 13:43.830
它是会被ag来处理

13:43.830 --> 13:44.830
这两个

13:44.830 --> 13:45.830
这些其他的配置

13:45.830 --> 13:47.830
ag就不管了

13:47.830 --> 13:48.830
那么你去处理

13:48.830 --> 13:49.830
你要針对这些配置

13:49.830 --> 13:50.830
要做什么事情

13:50.830 --> 13:51.830
你去处理

13:51.830 --> 13:52.830
那么这个配置

13:52.830 --> 13:53.830
是ag会处理的

13:53.830 --> 13:54.830
不要那么把社会

13:55.830 --> 13:56.830
刷新

13:56.830 --> 13:57.830
这边是不是又运行了

13:57.830 --> 13:58.830
对吧

13:58.830 --> 13:59.830
而且他们会把配置

13:59.830 --> 14:00.830
传给你

14:00.830 --> 14:01.830
而且这个配置

14:01.830 --> 14:02.830
已经启用了

14:02.830 --> 14:03.830
另外

14:03.830 --> 14:04.830
它还有两个配置

14:04.830 --> 14:05.830
一个是march

14:05.830 --> 14:06.830
一个是log

14:06.830 --> 14:07.830
你懂的

14:07.830 --> 14:08.830
一个是匹配到

14:08.830 --> 14:09.830
什么样的路径的时候

14:09.830 --> 14:11.830
我才会去使用这个中间键

14:11.830 --> 14:12.830
一个是

14:12.830 --> 14:13.830
忽略掉什么路径

14:13.830 --> 14:15.830
其他路径都可以使用

14:15.830 --> 14:16.830
一个是匹配

14:16.830 --> 14:17.830
一个是忽略

14:17.830 --> 14:18.830
对不对

14:18.830 --> 14:20.830
那么它可以配置字不串

14:20.830 --> 14:21.830
这个字不串

14:21.830 --> 14:22.830
只要前面匹配就行了

14:22.830 --> 14:23.830
就像认为是极路径

14:23.830 --> 14:24.830
也可以匹配正则

14:24.830 --> 14:25.830
你懂的

14:25.830 --> 14:26.830
也可以匹配一个函数

14:26.830 --> 14:27.830
它会把上下文传给你

14:27.830 --> 14:29.830
通过反回处合force

14:29.830 --> 14:30.830
来判断是否匹配

14:30.830 --> 14:32.830
银合处理一完事

14:32.830 --> 14:33.830
随便举个例子

14:33.830 --> 14:34.830
比方说我们这里

14:34.830 --> 14:37.830
配置一个march

14:37.830 --> 14:43.830
只有匹配到以logging开头的

14:43.830 --> 14:44.830
以logging

14:44.830 --> 14:45.830
我们用字不串的方式

14:45.830 --> 14:46.830
用logging开头的

14:46.830 --> 14:47.830
那么我就使用这个中间

14:47.830 --> 14:49.830
我就会运行这个中间键

14:49.830 --> 14:50.830
运行

14:50.830 --> 14:52.830
是不是可以运行

14:52.830 --> 14:53.830
对吧

14:53.830 --> 14:54.830
那么我们现在

14:54.830 --> 14:55.830
访问别的

14:55.830 --> 14:56.830
比方说

14:56.830 --> 15:00.830
访问Adder CSS

15:00.830 --> 15:01.830
是没有运行

15:01.830 --> 15:02.830
对吧

15:02.830 --> 15:03.830
清空一下

15:03.830 --> 15:04.830
是没有运行

15:04.830 --> 15:05.830
对不对

15:05.830 --> 15:06.830
它还有具有这样的功能

15:06.830 --> 15:09.830
是不是把功能都增强了

15:09.830 --> 15:11.830
这是关于这一块

15:11.830 --> 15:12.830
这是全局

15:12.830 --> 15:13.830
还有路由级别

15:13.830 --> 15:14.830
就是有些东西

15:14.830 --> 15:15.830
现在它没有应用的范围

15:15.830 --> 15:16.830
没有那么过

15:16.830 --> 15:19.830
它可能只是针对某一个路由

15:19.830 --> 15:20.830
前面会

15:20.830 --> 15:22.830
某一个或者是某一些路由

15:22.830 --> 15:23.830
前边会使用

15:23.830 --> 15:24.830
比方说

15:24.830 --> 15:25.830
我举个例子

15:25.830 --> 15:26.830
就是你咱们上节课

15:26.830 --> 15:27.830
不是遇到一个问题吗

15:27.830 --> 15:28.830
什么问题

15:28.830 --> 15:30.830
上节课的遇到的问题

15:30.830 --> 15:32.830
不就是咱们

15:32.830 --> 15:34.830
这个就是

15:34.830 --> 15:36.830
扛出来

15:36.830 --> 15:38.830
就针对这个

15:38.830 --> 15:39.830
这个的

15:39.830 --> 15:41.830
action的访问

15:41.830 --> 15:42.830
是需要经过健全的

15:42.830 --> 15:43.830
对吧

15:43.830 --> 15:44.830
你能不能进入这个action

15:44.830 --> 15:46.830
是不是要坚定你的权限

15:46.830 --> 15:47.830
有没有这样的权限

15:47.830 --> 15:48.830
对不对

15:48.830 --> 15:49.830
是要进行健全

15:49.830 --> 15:51.830
那么我们可以推而广之

15:51.830 --> 15:52.830
认为

15:52.830 --> 15:53.830
可能很多的action

15:53.830 --> 15:55.830
它都要进行健全

15:55.830 --> 15:56.830
都要进行健全

15:56.830 --> 15:57.830
不仅这一个

15:57.830 --> 15:58.830
但是我也不是

15:58.830 --> 15:59.830
全部都需要健全

15:59.830 --> 16:00.830
对吧

16:00.830 --> 16:01.830
有的时候需要

16:01.830 --> 16:02.830
有的时候不需要

16:02.830 --> 16:03.830
那么这个时候怎么办

16:03.830 --> 16:04.830
这个时候

16:04.830 --> 16:05.830
你就可以

16:05.830 --> 16:07.830
使用这个路由中间键

16:07.830 --> 16:08.830
当然你也可以

16:08.830 --> 16:09.830
利用什么政策

16:09.830 --> 16:11.830
在权局里面进行排除

16:11.830 --> 16:12.830
也可以

16:12.830 --> 16:13.830
总之你可以用灵活的方式

16:13.830 --> 16:14.830
来进行处理

16:14.830 --> 16:15.830
比方说

16:15.830 --> 16:16.830
我们就可以用这种方式

16:16.830 --> 16:18.830
我们在这里

16:18.830 --> 16:20.830
这里写一个新的中间键

16:20.830 --> 16:22.830
比方说写个名字

16:23.830 --> 16:24.830
写个啥呢

16:24.830 --> 16:25.830
写个

16:25.830 --> 16:27.830
perma一起吗

16:29.830 --> 16:30.830
perma一起吗

16:30.830 --> 16:31.830
有权限

16:32.830 --> 16:34.830
for a very fine token

16:34.830 --> 16:37.830
very fine token

16:37.830 --> 16:39.830
验证 token

16:40.830 --> 16:44.830
这是验证健全的中间键

16:45.830 --> 16:46.830
那么怎么写呢

16:46.830 --> 16:47.830
marge your export

16:47.830 --> 16:48.830
导出什么呢

16:48.830 --> 16:49.830
options

16:51.830 --> 16:52.830
这是个函数

16:52.830 --> 16:53.830
return a sync

16:53.830 --> 16:54.830
方形

16:55.830 --> 16:57.830
this ctx next

16:57.830 --> 16:58.830
导出一个中间键

16:59.830 --> 17:00.830
这第二个材料

17:00.830 --> 17:01.830
Apple用就用

17:01.830 --> 17:02.830
不用拿到

17:02.830 --> 17:03.830
我们在这里

17:03.830 --> 17:06.830
我们就可以把健全的地方的代码

17:06.830 --> 17:07.830
是不是可以扔过来了

17:07.830 --> 17:08.830
拂子

17:08.830 --> 17:09.830
三天过来

17:09.830 --> 17:10.830
我们稍微去感一下

17:11.830 --> 17:12.830
首先我们从Cookie里面

17:12.830 --> 17:13.830
获取token

17:14.830 --> 17:16.830
token如果说没有token的话

17:16.830 --> 17:18.830
我就回到登录页

17:18.830 --> 17:19.830
就回到登录

17:19.830 --> 17:21.830
如果说有token的话

17:21.830 --> 17:22.830
那么我就

17:22.830 --> 17:23.830
我这里还

17:23.830 --> 17:25.830
我这里还真要这样用这个app

17:25.830 --> 17:26.830
所以说把这个app放进来

17:27.830 --> 17:28.830
还真要用

17:30.830 --> 17:32.830
通过这个x小时

17:32.830 --> 17:33.830
能够

17:33.830 --> 17:34.830
这里就是contact

17:34.830 --> 17:35.830
就不是这个

17:36.830 --> 17:37.830
contact

17:37.830 --> 17:39.830
然后我们再继续看

17:40.830 --> 17:41.830
检查一下

17:41.830 --> 17:43.830
这个通过config

17:44.830 --> 17:45.830
config

17:45.830 --> 17:47.830
那么就通过这个app

17:48.830 --> 17:49.830
app的config

17:49.830 --> 17:50.830
是一样的

17:51.830 --> 17:52.830
然后找到

17:52.830 --> 17:54.830
看一下有没有这个用户

17:54.830 --> 17:55.830
有这个用户的话

17:55.830 --> 17:56.830
我就

17:57.830 --> 17:59.830
我把token传过去

17:59.830 --> 18:01.830
如果说用户存在的话

18:01.830 --> 18:02.830
登录会过期

18:02.830 --> 18:03.830
或者被篡改的话

18:03.830 --> 18:04.830
我还是

18:04.830 --> 18:05.830
返回到登录页

18:06.830 --> 18:08.830
其他的情况是不是正常了

18:09.830 --> 18:10.830
对不对

18:10.830 --> 18:11.830
其他的情况就正常了

18:11.830 --> 18:12.830
正常的话

18:12.830 --> 18:14.830
我就把这个用户拿到

18:14.830 --> 18:15.830
拿到这个用户

18:15.830 --> 18:17.830
拿到这个用户

18:17.830 --> 18:18.830
这是模型

18:18.830 --> 18:19.830
拿到这个用户

18:19.830 --> 18:20.830
拿到这个用户过后

18:20.830 --> 18:22.830
我把它保存到哪儿呢

18:22.830 --> 18:24.830
我就把它保存到app里边

18:25.830 --> 18:27.830
或者保存到contact里边

18:27.830 --> 18:28.830
比方说user

18:29.830 --> 18:30.830
或者是state

18:32.830 --> 18:33.830
user

18:33.830 --> 18:34.830
保存到这

18:34.830 --> 18:35.830
risk

18:35.830 --> 18:36.830
data

18:36.830 --> 18:37.830
data

18:37.830 --> 18:39.830
把登录进来的用户

18:39.830 --> 18:41.830
保存到这个数据里边

18:41.830 --> 18:42.830
接下来我又干嘛呢

18:42.830 --> 18:43.830
这个东西

18:43.830 --> 18:44.830
我就交给后边运行的

18:44.830 --> 18:45.830
对不对

18:45.830 --> 18:47.830
这个东西我交给后边了

18:47.830 --> 18:48.830
接下来我们await

18:48.830 --> 18:49.830
next

18:49.830 --> 18:50.830
交给后边了

18:50.830 --> 18:51.830
你看

18:51.830 --> 18:52.830
这是不是一个健全的连接

18:52.830 --> 18:53.830
拿到一个

18:53.830 --> 18:54.830
通过这个cooking

18:54.830 --> 18:55.830
拿到token

18:55.830 --> 18:56.830
如果token不存在

18:56.830 --> 18:57.830
说明你没有登录

18:57.830 --> 18:58.830
回到登录页

18:59.830 --> 19:01.830
如果说你存在的话

19:01.830 --> 19:02.830
我们就通过一个小时

19:02.830 --> 19:06.830
来得到你的用户

19:06.830 --> 19:07.830
我们的用户

19:08.830 --> 19:09.830
用户信息

19:09.830 --> 19:11.830
然后拿到一个用户信息过后

19:11.830 --> 19:12.830
如果说一个用户信息

19:12.830 --> 19:13.830
被创改过了

19:13.830 --> 19:14.830
我还是回到登录页

19:14.830 --> 19:15.830
如果说用户信息

19:15.830 --> 19:16.830
用户信息没有创改

19:16.830 --> 19:17.830
我就把用户信息保存到

19:17.830 --> 19:18.830
一个命名空间

19:18.830 --> 19:19.830
我们以前绝过KLA

19:19.830 --> 19:20.830
对吧

19:20.830 --> 19:21.830
保存到state命名空间里边

19:21.830 --> 19:22.830
U字

19:22.830 --> 19:23.830
然后交给下个中间

19:23.830 --> 19:24.830
那么下个中间

19:24.830 --> 19:25.830
可能会用到这个U字

19:25.830 --> 19:26.830
那么后边的中间

19:26.830 --> 19:27.830
比方说home

19:27.830 --> 19:28.830
这里

19:28.830 --> 19:29.830
那么我们前面大码

19:29.830 --> 19:30.830
是不是都可以不用写了

19:30.830 --> 19:32.830
这大码是不是可以不用写了

19:33.830 --> 19:34.830
那么这些大码

19:34.830 --> 19:35.830
不用写的过后

19:35.830 --> 19:36.830
我们U字从哪里来了

19:36.830 --> 19:37.830
这个U字

19:37.830 --> 19:38.830
是不是就可以来自于

19:39.830 --> 19:40.830
this

19:40.830 --> 19:41.830
app

19:41.830 --> 19:42.830
state

19:42.830 --> 19:43.830
不

19:43.830 --> 19:44.830
contact是state

19:44.830 --> 19:45.830
state

19:45.830 --> 19:46.830
U字

19:46.830 --> 19:47.830
可以来自于这

19:48.830 --> 19:49.830
对吧没问题吧

19:49.830 --> 19:50.830
好了

19:50.830 --> 19:51.830
再获取到这个

19:51.830 --> 19:52.830
地区数据

19:52.830 --> 19:54.830
然后再合并一下

19:55.830 --> 19:56.830
好了

19:56.830 --> 19:57.830
我们这样子写好了过后

19:57.830 --> 19:58.830
但这个中间

19:58.830 --> 19:59.830
我不希望它

19:59.830 --> 20:00.830
影响的范围太广

20:00.830 --> 20:01.830
它可能

20:01.830 --> 20:03.830
我们要在用某一个x

20:03.830 --> 20:04.830
的时候

20:04.830 --> 20:05.830
只针对性的对我们

20:05.830 --> 20:06.830
有一些x

20:06.830 --> 20:07.830
要应用这个中间键

20:07.830 --> 20:08.830
那么我们怎么办

20:08.830 --> 20:09.830
我们就可以在rotor

20:09.830 --> 20:10.830
rotor里边这样子写

20:10.830 --> 20:12.830
你看这里怎么写的

20:12.830 --> 20:13.830
我们通过app

20:13.830 --> 20:15.830
里边有个medalware属性

20:15.830 --> 20:16.830
那么这里边就记录了

20:16.830 --> 20:17.830
很多的中间键

20:17.830 --> 20:19.830
我们找到我们自己的中间键

20:20.830 --> 20:21.830
找到自己的中间键

20:21.830 --> 20:22.830
然后这个中间键

20:22.830 --> 20:23.830
我们的名字

20:23.830 --> 20:25.830
后面就是中间键的名字

20:25.830 --> 20:26.830
名字的话就是

20:26.830 --> 20:27.830
verify token

20:27.830 --> 20:28.830
对吧

20:28.830 --> 20:29.830
我们就可以通过

20:29.830 --> 20:30.830
在这里输出一下吧

20:30.830 --> 20:32.830
我们就可以通过这个app

20:32.830 --> 20:33.830
里边的什么的

20:33.830 --> 20:34.830
medalware

20:35.830 --> 20:36.830
medalware

20:36.830 --> 20:37.830
然后后面就是

20:37.830 --> 20:39.830
verify token

20:39.830 --> 20:40.830
我们不用配置

20:40.830 --> 20:41.830
那么它会把中间键

20:41.830 --> 20:42.830
加到这里边

20:43.830 --> 20:44.830
没问题吧

20:44.830 --> 20:45.830
好

20:45.830 --> 20:46.830
咱们输出一下

20:46.830 --> 20:47.830
那么这就是个中间键

20:47.830 --> 20:48.830
对不对

20:48.830 --> 20:49.830
我们现在主要做的

20:49.830 --> 20:50.830
调整这个函数

20:50.830 --> 20:51.830
来拿到这个中间键

20:55.300 --> 20:56.300
调整这个函数

20:56.300 --> 20:57.300
传一个配置进去

20:57.300 --> 20:59.300
当然我这里没有什么配置

20:59.300 --> 21:00.300
没有什么配置

21:00.300 --> 21:01.300
就啥都不用传

21:01.300 --> 21:02.300
然后呢

21:02.300 --> 21:03.300
这边

21:05.300 --> 21:06.300
得到一个中间键

21:06.300 --> 21:07.300
就是verify

21:08.300 --> 21:09.300
token得到中间键

21:10.300 --> 21:11.300
然后我们只需要把中间键

21:11.300 --> 21:12.300
放到合适的位置就行了

21:12.300 --> 21:13.300
比方放到这

21:14.300 --> 21:16.300
当你访问这个x型的时候

21:16.300 --> 21:17.300
我要前置

21:17.300 --> 21:18.300
要用这个中间键

21:18.300 --> 21:20.300
比方说在另外放一个

21:20.300 --> 21:21.300
是不是非常灵活了

21:21.300 --> 21:22.300
我要在哪个x型上面

21:22.300 --> 21:23.300
放的这个中间键

21:23.300 --> 21:24.300
就直接放就行了

21:25.300 --> 21:26.300
保存

21:27.300 --> 21:28.300
接下来我们来看一下

21:28.300 --> 21:29.300
现在我们再去访问

21:29.300 --> 21:30.300
这个手页

21:31.300 --> 21:32.300
这里保错了

21:32.300 --> 21:33.300
我看一下什么错误

21:34.300 --> 21:35.300
先清空一下

21:35.300 --> 21:36.300
再刷新

21:37.300 --> 21:39.670
保错了

21:39.670 --> 21:40.670
还有什么呢

21:40.670 --> 21:41.670
axiose of undefend

21:44.240 --> 21:46.240
cannot read property

21:47.240 --> 21:48.240
axiose of undefend

21:49.240 --> 21:50.240
它有个东西是undefend

21:51.240 --> 21:52.240
我看一下

21:52.240 --> 21:53.240
咱们重启一次

21:54.240 --> 21:55.240
重启一次

22:02.360 --> 22:03.360
再来

22:03.360 --> 22:04.360
放心

22:04.360 --> 22:05.360
还是有问题

22:08.360 --> 22:09.360
不能读取

22:10.360 --> 22:11.360
从undefend里面

22:11.360 --> 22:12.360
读取axiose

22:12.360 --> 22:13.360
找一找

22:15.360 --> 22:16.360
verify

22:16.360 --> 22:17.360
也就是它运行到这了

22:17.360 --> 22:18.360
对不对

22:19.360 --> 22:20.360
axiose

22:20.360 --> 22:22.360
那么也就是说

22:22.360 --> 22:24.360
这个中间键

22:25.360 --> 22:26.360
这个时候

22:26.360 --> 22:28.360
app里边还没有axiose

22:30.360 --> 22:31.360
也不对

22:32.360 --> 22:33.360
这个app

22:33.360 --> 22:34.360
为什么是undefend

22:36.360 --> 22:37.360
它不应该是undefend

22:40.630 --> 22:41.630
我明白了

22:42.630 --> 22:43.630
我明白了

22:43.630 --> 22:44.630
我这里要把手动的

22:44.630 --> 22:45.630
把app传进去

22:45.630 --> 22:46.630
因为我这里掉了

22:46.630 --> 22:47.630
verify

22:47.630 --> 22:48.630
掉了的是这个函数

22:48.630 --> 22:49.630
我没有把手动

22:49.630 --> 22:50.630
把app传进去

22:50.630 --> 22:51.630
我要把app传进去

22:51.630 --> 22:52.630
配置了为空

22:52.630 --> 22:53.630
app传进去

22:57.100 --> 22:58.100
因为它不是选举

22:58.100 --> 22:59.100
选举它会自动给你传进去

22:59.100 --> 23:00.100
这局部

23:00.100 --> 23:01.100
它不会给你自动传进去

23:01.100 --> 23:02.100
就到了登录页了

23:02.100 --> 23:03.100
对不对

23:03.100 --> 23:04.100
到了登录页了

23:05.100 --> 23:06.100
然后我们再访问

23:06.100 --> 23:07.100
A.CSS

23:08.100 --> 23:09.100
这边也会到登录页

23:09.100 --> 23:10.100
对吧

23:10.100 --> 23:11.100
我们登录一下

23:11.100 --> 23:12.100
User

23:12.100 --> 23:13.100
123

23:13.100 --> 23:14.100
123

23:14.100 --> 23:15.100
登录进去了

23:15.100 --> 23:16.100
现在就可以了

23:16.100 --> 23:17.100
没问题了

23:17.100 --> 23:18.100
对吧

23:18.100 --> 23:19.100
然后访问A.CSS

23:19.100 --> 23:20.100
也没问题了

23:20.100 --> 23:21.100
对不对

23:21.100 --> 23:22.100
那么这样子

23:22.100 --> 23:23.100
就是灵活处理的

23:23.100 --> 23:24.100
它不是权局

23:24.100 --> 23:25.100
我在这里面都没有配置

23:25.100 --> 23:26.100
它不是权局

23:26.100 --> 23:27.100
它是在局部的

23:27.100 --> 23:28.100
某一些x里边

23:28.100 --> 23:29.100
给它加上

23:29.100 --> 23:31.100
加上这些中间键

23:31.100 --> 23:32.100
是不是在这里边

23:32.100 --> 23:34.100
由于我们是写代码的模式

23:34.100 --> 23:35.100
这里边是不是可以

23:35.100 --> 23:36.100
还可以判断

23:36.100 --> 23:37.100
各种灵活的处理

23:37.100 --> 23:38.100
对吧

23:38.100 --> 23:39.100
根据各种情况

23:39.100 --> 23:40.100
我要不要加

23:40.100 --> 23:41.100
加哪些

23:41.100 --> 23:42.100
都可以灵活的处理

23:42.100 --> 23:44.100
这就是这种模式了

23:44.100 --> 23:45.100
好

23:45.100 --> 23:46.100
接下来那么要说一下

23:46.100 --> 23:47.100
内置的中间键

23:47.100 --> 23:48.100
实际上

23:48.100 --> 23:49.100
A.CSS里边

23:49.100 --> 23:51.100
它除了你自己写中间键之外

23:51.100 --> 23:52.100
它还有

23:52.100 --> 23:54.100
本身就带了很多中间键

23:54.100 --> 23:55.100
那么这些中间键

23:55.100 --> 23:56.100
它放到另外一个数组里边

23:56.100 --> 23:57.100
它是在配置里边

23:57.100 --> 23:58.100
这个配置

23:58.100 --> 23:59.100
它内部有一个配置

23:59.100 --> 24:00.100
我们这个配置

24:00.100 --> 24:01.100
它夹着配置对吧

24:01.100 --> 24:02.100
那么到时候呢

24:02.100 --> 24:03.100
它在处理配置的时候

24:03.100 --> 24:04.100
它会把我们的配置

24:04.100 --> 24:06.100
合并到内部的配置

24:06.100 --> 24:07.100
它内部的配置里边

24:07.100 --> 24:08.100
有一个配置叫Core

24:08.100 --> 24:09.100
Midwares

24:09.100 --> 24:11.100
它有这么一个东西

24:11.100 --> 24:12.100
咱们这个东西

24:12.100 --> 24:13.100
也是一个数组

24:13.100 --> 24:14.100
它记录了

24:14.100 --> 24:15.100
它内部使用的

24:15.100 --> 24:16.100
哪些中间键

24:16.100 --> 24:17.100
我们把这个数组打印出来

24:17.100 --> 24:18.100
在哪里打印

24:18.100 --> 24:19.100
随便找个地方打印

24:19.100 --> 24:20.100
随便下找个地方

24:20.100 --> 24:21.100
比方说

24:21.100 --> 24:22.100
我们在这里

24:22.100 --> 24:23.100
输出一下

24:23.100 --> 24:26.100
保存

24:26.100 --> 24:27.100
这边

24:27.100 --> 24:29.100
我们随便刷新吧

24:30.100 --> 24:34.650
好

24:34.650 --> 24:35.650
我们这边刷新

24:35.650 --> 24:36.650
你看

24:36.650 --> 24:37.650
这里边是记录了

24:37.650 --> 24:38.650
很多中间键

24:38.650 --> 24:39.650
对不对

24:39.650 --> 24:40.650
那么这些中间键

24:41.650 --> 24:43.650
都是它内置的中间键

24:43.650 --> 24:44.650
那么我们看到

24:44.650 --> 24:45.650
其中一个中间键

24:45.650 --> 24:48.650
叫做Securities

24:48.650 --> 24:49.650
那么这个东西

24:49.650 --> 24:50.650
是不是安全

24:50.650 --> 24:52.650
跟安全相关的中间键

24:52.650 --> 24:53.650
对不对

24:53.650 --> 24:54.650
那么这个中间键

24:54.650 --> 24:55.650
它就是用到

24:55.650 --> 24:56.650
我们这里的配置

24:57.650 --> 24:58.650
用到我们这里的

24:59.650 --> 25:01.650
Security的配置

25:02.650 --> 25:03.650
没意思吧

25:03.650 --> 25:04.650
这是它的配置

25:04.650 --> 25:05.650
这些中间键

25:05.650 --> 25:07.650
它内部使用的中间键

25:07.650 --> 25:08.650
然后它接下来

25:08.650 --> 25:09.650
会怎么处理呢

25:09.650 --> 25:10.650
当它启动过后

25:10.650 --> 25:11.650
它会把我们

25:11.650 --> 25:12.650
配置的中间键

25:12.650 --> 25:13.650
Middleware

25:13.650 --> 25:15.650
和它CoreMiddleware

25:15.650 --> 25:16.650
来进行合并

25:16.650 --> 25:17.650
然后合并成

25:17.650 --> 25:18.650
是不是更多的

25:18.650 --> 25:19.650
一个支付串数组

25:19.650 --> 25:20.650
然后它会把

25:20.650 --> 25:22.650
这些中间键

25:22.650 --> 25:23.650
全部合并到

25:23.650 --> 25:24.650
一个真正的中间键

25:24.650 --> 25:25.650
函数数组里面

25:25.650 --> 25:27.650
叫做AppMiddleware

25:27.650 --> 25:28.650
Middleware

25:28.650 --> 25:29.650
没有s

25:29.650 --> 25:30.650
它会合并到这

25:30.650 --> 25:31.650
现在这里

25:31.650 --> 25:32.650
在我们这里

25:32.650 --> 25:34.650
使用的是AppMiddleware

25:34.650 --> 25:36.650
它会把全部合并到这

25:36.650 --> 25:37.650
那么这里面

25:37.650 --> 25:38.650
Middleware里面有什么东西

25:38.650 --> 25:39.650
我们来输出一下

25:39.650 --> 25:41.650
AppMiddleware

25:42.650 --> 25:43.650
保存

25:43.650 --> 25:44.650
把这个地方取掉

25:46.650 --> 25:47.650
我们来看一下

25:47.650 --> 25:48.650
大家了解一下

25:48.650 --> 25:50.650
它里面的一些实现原理

25:50.650 --> 25:51.650
刷新

25:54.650 --> 25:55.650
这里面

25:56.650 --> 25:57.650
Router

25:57.650 --> 25:58.650
启动的时候

25:58.650 --> 25:59.650
运行了过后

25:59.650 --> 26:01.650
我们在这边输出

26:01.650 --> 26:05.470
在这边输出

26:05.470 --> 26:06.470
保存

26:06.470 --> 26:08.470
这边刷新

26:08.470 --> 26:09.470
然后这边

26:09.470 --> 26:10.470
你看一下

26:10.470 --> 26:11.470
说一个函数数组

26:11.470 --> 26:13.470
这个看不同的中间键

26:13.470 --> 26:14.470
有不同的名字

26:14.470 --> 26:16.470
这是一个函数的输出

26:16.470 --> 26:17.470
这个输出里面

26:17.470 --> 26:18.470
我们的中间键在哪呢

26:18.470 --> 26:19.470
它也封装在这

26:19.470 --> 26:21.470
它封装了一个函数

26:21.470 --> 26:22.470
因为我们这个中间键

26:22.470 --> 26:23.470
是局部的

26:23.470 --> 26:25.470
是路由级别的中间键

26:25.470 --> 26:26.470
如果说拳句的话

26:26.470 --> 26:27.470
它就会显示出来

26:27.470 --> 26:29.470
不要说我们把这个Mart

26:29.470 --> 26:30.470
去掉

26:30.470 --> 26:32.470
接下来重启一次

26:32.470 --> 26:37.220
刷新

26:38.220 --> 26:39.220
你看

26:39.220 --> 26:41.220
这里边我们的Mind

26:41.220 --> 26:42.220
是不是在这

26:42.220 --> 26:43.220
Mind在这

26:44.220 --> 26:45.220
这就是我们的中间键

26:45.220 --> 26:46.220
我们中间键可以看出

26:46.220 --> 26:47.220
我们的中间键

26:47.220 --> 26:48.220
写到哪的呢

26:48.220 --> 26:50.220
是不是写到路由之前的

26:50.220 --> 26:52.220
而写到什么静态之后的

26:52.220 --> 26:53.220
你看我们之前

26:53.220 --> 26:54.220
是不是有一个静态中间键的配置

26:54.220 --> 26:55.220
那么当初配置的

26:55.220 --> 26:56.220
配置的时候

26:56.220 --> 26:57.220
怎么配置的

26:57.220 --> 26:59.220
是不是导出一个Static的配置

26:59.220 --> 27:00.220
对不对

27:00.220 --> 27:01.220
跟中间键的名字是匹配的

27:01.220 --> 27:02.220
就这么个意思

27:02.220 --> 27:03.220
我们的中间键就在这

27:04.220 --> 27:05.220
对不对

27:05.220 --> 27:06.220
在路由之前

27:06.220 --> 27:07.220
也就是说

27:07.220 --> 27:08.220
访问静态页面的时候

27:08.220 --> 27:09.220
它会不会运行

27:09.220 --> 27:10.220
我们的中间键

27:10.220 --> 27:11.220
访问静态资源的时候

27:11.220 --> 27:13.220
它不会运行我们的中间键

27:13.220 --> 27:14.220
没有意思吗

27:14.220 --> 27:15.220
总之

27:15.220 --> 27:16.220
这些东西

27:16.220 --> 27:17.220
灵活处理

27:17.220 --> 27:18.220
是非常非常灵活的

27:18.220 --> 27:19.220
这中间键

27:19.220 --> 27:21.220
它就能够让我们做什么呢

27:21.220 --> 27:22.220
能够让我们提取

27:22.220 --> 27:23.220
一些共同的

27:23.220 --> 27:25.220
有一些共同行为的东西

27:25.220 --> 27:26.220
这样子

27:26.220 --> 27:27.220
就不会干扰我们

27:27.220 --> 27:30.220
在那个Control里边的行为

27:30.220 --> 27:31.220
Control里边就

27:31.220 --> 27:33.220
专心做好自己的事情

27:33.220 --> 27:34.220
那么我们中间键

27:34.220 --> 27:36.220
写的时候有全局有路由

27:36.220 --> 27:37.220
如果说你中间键

27:37.220 --> 27:38.220
因为应用的范围很广

27:38.220 --> 27:40.220
不要说日日记录

27:40.220 --> 27:42.220
或者是做一些缓存

27:42.220 --> 27:43.220
等等等等

27:43.220 --> 27:45.220
应用范围非常广的话

27:45.220 --> 27:47.220
不会影响到很多的X型的话

27:47.220 --> 27:48.220
那么你就写全局

27:48.220 --> 27:49.220
你就配置全局

27:49.220 --> 27:50.220
写的话都是一样

27:50.220 --> 27:51.220
对吧

27:51.220 --> 27:52.220
然后如果说你的中间键

27:52.220 --> 27:54.220
应用范围没有那么广

27:54.220 --> 27:55.220
那你用的

27:55.220 --> 27:56.220
用这个中间键的时候

27:56.220 --> 27:58.220
你就可以用这种路由级别

27:58.220 --> 27:59.220
针对某一些

27:59.220 --> 28:00.220
或者某几个路由

28:00.220 --> 28:02.220
灵活的去使用中间键

28:02.220 --> 28:03.220
这里可以写多个的

28:03.220 --> 28:04.220
这里有一个兜号

28:04.220 --> 28:05.220
如果说可以

28:05.220 --> 28:06.220
这里可以一式写的

28:06.220 --> 28:07.220
可以写多个中间键的

28:07.220 --> 28:09.220
没什么意思吧

28:09.220 --> 28:12.220
这就是中间键

28:12.220 --> 28:14.220
它的就是处理方式

28:14.220 --> 28:16.220
好 最后我说一个

28:16.220 --> 28:18.220
就是一个思想叫做横切关注点

28:18.220 --> 28:20.220
横切关注点什么意思呢

28:20.220 --> 28:22.220
你看看我们这个图就明白了

28:22.220 --> 28:24.220
它叫做LOP

28:24.220 --> 28:26.780
LOP

28:26.780 --> 28:28.780
其实这是存后端的内容了

28:28.780 --> 28:30.780
但是这个东西

28:30.780 --> 28:32.780
也不是说一定属于后端

28:32.780 --> 28:33.780
这种思想

28:33.780 --> 28:34.780
啥意思呢

28:34.780 --> 28:36.780
就有的时候我们处理

28:36.780 --> 28:38.780
不同的处理一些问题的时候

28:38.780 --> 28:40.780
会遇到一些

28:40.780 --> 28:42.780
步骤也好

28:42.780 --> 28:43.780
功能也好

28:43.780 --> 28:45.780
几乎是一致的情况

28:45.780 --> 28:46.780
比方说我们处理

28:46.780 --> 28:47.780
首页的时候

28:47.780 --> 28:48.780
它需要经过键权

28:48.780 --> 28:50.780
然后再运行首页功能

28:50.780 --> 28:52.780
我们要处理新闻页的时候

28:52.780 --> 28:53.780
也需要进行键权

28:53.780 --> 28:54.780
再运行新闻页的功能

28:54.780 --> 28:55.780
那么这个时候

28:55.780 --> 28:57.780
键权是不是永远是第一步

28:57.780 --> 28:58.780
对于这两个功能来说

28:58.780 --> 28:59.780
键权一定是第一步

28:59.780 --> 29:01.780
步骤一致

29:01.780 --> 29:03.780
而且功能是不一致的

29:03.780 --> 29:04.780
功能也一致

29:04.780 --> 29:05.780
那么这个地方是不是

29:05.780 --> 29:06.780
可以抽离出来

29:06.780 --> 29:07.780
就把这个关注点

29:07.780 --> 29:08.780
你就不要去考虑了

29:08.780 --> 29:10.780
把切出来

29:10.780 --> 29:11.780
这就叫做LOP

29:11.780 --> 29:12.780
其实我们在

29:12.780 --> 29:14.780
具体的代码表现形式上

29:14.780 --> 29:15.780
特别是在A格里边

29:15.780 --> 29:17.780
或者是在KOA里边

29:17.780 --> 29:19.780
表现形式就是个中间间

29:19.780 --> 29:20.780
不同的语言

29:20.780 --> 29:21.780
不同的技术中

29:21.780 --> 29:22.780
它表现形式不太一样

29:22.780 --> 29:23.780
它的思想是一样的

29:23.780 --> 29:24.780
就是有一件事情

29:24.780 --> 29:25.780
有多件事情

29:25.780 --> 29:27.780
它们本身互不相关

29:27.780 --> 29:28.780
但是它们的处理

29:28.780 --> 29:29.780
流程大致差不多

29:29.780 --> 29:31.780
而且这些处理流程里边

29:31.780 --> 29:33.780
某一步几乎是一样的

29:33.780 --> 29:34.780
那么这个时候

29:34.780 --> 29:36.780
就可以把这一步抽离出来

29:36.780 --> 29:38.780
就是让我们本身这里的处理

29:38.780 --> 29:40.780
完全不受它的影响

29:40.780 --> 29:42.780
就处理自己的事情就行了

29:42.780 --> 29:44.780
然后它自动就会加入到

29:44.780 --> 29:45.780
具体的步骤

29:45.780 --> 29:46.780
那就利用中间间

29:46.780 --> 29:47.780
请求来了过后

29:47.780 --> 29:49.780
我先写好了个中间间

29:49.780 --> 29:50.780
你先进行键权

29:50.780 --> 29:51.780
我在交给你手页功能

29:51.780 --> 29:52.780
有一天我不想

29:52.780 --> 29:53.780
手页不想键权

29:53.780 --> 29:55.780
我只需要把这个去掉就行了

29:55.780 --> 29:56.780
完全不用去改动

29:56.780 --> 29:57.780
手页的代码

29:57.780 --> 29:58.780
手页我不需要权限

29:58.780 --> 30:00.780
我就把这个地方去掉

30:00.780 --> 30:04.780
就把这个地方去掉就完事了

30:04.780 --> 30:07.780
然后这里也是一样的意思

30:07.780 --> 30:08.780
再说一下这个思想

30:08.780 --> 30:09.780
其他就没啥了

30:09.780 --> 30:10.780
总之KLA的中间间

30:10.780 --> 30:12.780
在ag里边就得这样编写

30:12.780 --> 30:13.780
写到这儿

30:13.780 --> 30:14.780
然后有全局有局部

30:14.780 --> 30:16.780
您或去使用就完事了

