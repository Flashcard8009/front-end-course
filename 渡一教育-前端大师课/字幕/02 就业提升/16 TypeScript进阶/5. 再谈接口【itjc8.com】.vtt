WEBVTT

00:01.070 --> 00:04.470
大家好 我是杜一教育 微博前辈奖势 元静

00:04.470 --> 00:09.070
咱们接着来啊 接着来这个TS的面向对象

00:09.070 --> 00:13.570
可能有一开始骁龙逐渐凝固了 是吧

00:13.570 --> 00:19.570
需要的过程 这一块的东西 所有的开发者 学到面向对象这一块

00:19.570 --> 00:24.070
他都需要一段时间 慢慢的积累 慢慢的去适应这种开发方式

00:24.070 --> 00:25.570
这种思维方式

00:25.570 --> 00:30.070
所以说呢 大家如果觉得晕 会觉得这个东西

00:30.070 --> 00:34.070
感觉没什么用 都是非常正常的 正常的一种感觉

00:34.070 --> 00:37.070
需要的时间 大家慢慢多念多想

00:37.070 --> 00:41.070
然后后面我们会做一个练习 跟着我去把个练习做一遍

00:41.070 --> 00:44.070
你就会慢慢的体会到这种开发模式了

00:44.070 --> 00:47.070
需要过程 不要着急

00:47.070 --> 00:51.070
这节课呢 咱们再来谈一谈接口

00:51.070 --> 00:55.070
咱们在TS基础部分呢 已经讲过接口了 对吧

00:55.070 --> 00:59.070
当时接口的时候 讲他的时候 我们说 这个接口啊

00:59.070 --> 01:07.070
是用约 约束什么呢 约束内 约束对象 或者是函束

01:07.070 --> 01:12.070
它是一个内形区 是一个内形契约

01:12.070 --> 01:14.070
它具有强约束力

01:14.070 --> 01:17.070
但是呢 我们之前 只用它约束了对象

01:17.070 --> 01:20.070
约束某一个边量 它必须是一个接口内情

01:20.070 --> 01:23.070
或者说 把它约束为一个函束

01:23.070 --> 01:25.070
它必须是一个什么格式

01:25.070 --> 01:28.070
我们当时没有去把它用于约束内

01:28.070 --> 01:33.070
而且我们当时说 接口和那个内情别名

01:33.070 --> 01:37.070
最大的区别呢 就在于接口和一个内进行联用

01:37.070 --> 01:41.070
那么这节课呢 我们再回过头来看一下这个接口

01:41.070 --> 01:46.070
关于这个接口 怎么跟内联用呢 这里需要个例子啊

01:46.070 --> 01:49.070
没有一个例子的话 大家理解起来很困难

01:49.070 --> 01:54.070
很难搞清楚为什么需要接口这个东西

01:54.070 --> 01:58.070
好 咱们来说这么一个例子 大家注意听啊

01:58.070 --> 02:02.070
大家想一想这个例子 如果用面向对方的方式来实现的话

02:02.070 --> 02:04.070
应该怎么去实现

02:04.070 --> 02:08.070
说马戏团 有一个马戏团

02:08.070 --> 02:14.070
马戏团 马戏团中呢

02:14.070 --> 02:18.070
有很多动物啊 很多动物

02:18.070 --> 02:22.070
呃 包含包括啊 包括哪些 包括

02:22.070 --> 02:26.070
呃 包括这些啊 狮子

02:26.070 --> 02:29.070
呃 老虎

02:29.070 --> 02:32.070
呃 老虎

02:32.070 --> 02:33.070
猴子

02:33.070 --> 02:37.070
然后再狗吧 啊 再个狗

02:37.070 --> 02:40.070
不能再写多了啊 再写多了

02:40.070 --> 02:43.070
倒不是说我怕单马写的麻烦

02:43.070 --> 02:46.070
说是再写多的话 我单词我就不知道是啥了

02:46.070 --> 02:48.070
这几个单词我还知道是啥

02:48.070 --> 02:50.070
呃 然后有这么一些动物啊

02:50.070 --> 02:57.070
这些动物都具有共同的一些特征啊 特征

02:57.070 --> 03:02.070
哪些特征呢 呃 这些动物呢都有名字

03:02.070 --> 03:05.070
有年龄啊 有名字有年龄

03:05.070 --> 03:08.070
就马戏团里面的动物呢 都会给他取个名字 对吧

03:08.070 --> 03:11.070
有名字 有年龄 还有呢 种类

03:11.070 --> 03:14.070
他是狮子还是老虎还是猴子还是狗啊

03:14.070 --> 03:17.070
有个种类的名称啊 种类名称

03:17.070 --> 03:22.070
呃 然后呢 有一个还还包含

03:22.070 --> 03:25.070
一个共同的方法

03:25.070 --> 03:27.070
什么方法呢 就是

03:27.070 --> 03:30.070
打招呼 打招呼的方法

03:30.070 --> 03:32.070
我们到处来用啊 这些动物呢

03:32.070 --> 03:34.070
也可以给大家打个招呼啊

03:34.070 --> 03:37.070
就打出一句话嘛 打出 打印出一句话

03:37.070 --> 03:39.070
好 这是其实看到这呢

03:39.070 --> 03:42.070
大家应该知道这个东西该怎么来去实现 对吧

03:42.070 --> 03:45.070
就建立一个负类吧 建立一个抽象负类

03:45.070 --> 03:47.070
就是动物 动物的负类

03:47.070 --> 03:50.070
然后呢 这些东西呢 都是纸类 对吧

03:50.070 --> 03:52.070
这些东西都是纸类啊 这个很简单

03:52.070 --> 03:55.070
共有的东西呢 就写到负类里面

03:55.070 --> 03:58.070
好 接下来我们再来看啊

03:58.070 --> 04:02.070
他们各自有各自的技能

04:02.070 --> 04:04.070
也就是说他们有差异点

04:04.070 --> 04:07.070
差异点我们怎么样 把它写到纸类里面

04:07.070 --> 04:10.070
对不对 把它写到纸类里面 但是

04:10.070 --> 04:14.070
但是 这里的差异点呢 它比较特殊

04:14.070 --> 04:20.070
技能是可以通过训练改变的

04:20.070 --> 04:23.070
它技能是有可能会变化的 江南

04:23.070 --> 04:26.070
不说程序写完了过后 比方说啊

04:26.070 --> 04:30.070
狮子能够跳火圈 狮子能够跳火圈

04:30.070 --> 04:32.070
猴子呢 可以表演走独木桥

04:32.070 --> 04:35.070
然后狗呢 可以表演

04:35.070 --> 04:38.070
比方说做算数题吧 做算数题

04:38.070 --> 04:39.070
但是呢 过了一段时间

04:39.070 --> 04:41.070
我们程序功能可能会有变

04:41.070 --> 04:43.070
我们经过我们的训练过后呢

04:43.070 --> 04:46.070
狗也可以跳火圈了

04:46.070 --> 04:48.070
那么这个时候我们要考虑到这一点

04:48.070 --> 04:51.070
所以说呢 他们我们把这个要求加上

04:51.070 --> 04:53.070
技能是有可能会通过改变

04:53.070 --> 04:56.070
通过训练改变的

04:56.070 --> 04:58.070
马戏团中 我这里把记一下

04:58.070 --> 05:01.070
马戏团中有哪些常见技能

05:01.070 --> 05:05.070
哪些技能呢 第一个技能

05:05.070 --> 05:09.070
就是比方说火 我们把它叫做火圈表演

05:09.070 --> 05:12.070
先把这个需求理解清楚 理解清楚

05:12.070 --> 05:15.070
我们再去写单吧 火圈表演

05:15.070 --> 05:17.070
比方说表演火圈的时候呢

05:17.070 --> 05:20.070
要表演两套节目 一个是单火圈

05:20.070 --> 05:22.070
就是有一个火圈

05:22.070 --> 05:24.070
一个火圈 一个火圈

05:24.070 --> 05:27.070
一个火圈 一个火圈

05:27.070 --> 05:30.070
一个火圈 一个火圈

05:30.070 --> 05:32.070
一个火圈 跳火圈就行了

05:32.070 --> 05:34.070
然后还有一个双火圈

05:34.070 --> 05:36.070
双火圈 有两个火圈 难度要高一点

05:36.070 --> 05:37.070
对吧 把跳火圈就行了

05:37.070 --> 05:39.070
比方说火圈表演这么回事

05:39.070 --> 05:42.070
然后呢 还有看一下啊

05:42.070 --> 05:44.070
想一想 还有什么呢

05:44.070 --> 05:46.070
还有平衡表演

05:46.070 --> 05:48.070
平衡表演

05:48.070 --> 05:50.070
平衡表演表演什么呢

05:50.070 --> 05:52.070
表演独木桥 走独木桥

05:52.070 --> 05:54.070
然后还要表演什么呢

05:54.070 --> 05:57.070
走钢丝 钢丝

05:57.070 --> 06:01.070
其实我这个例子啊 真的是想了好久

06:01.070 --> 06:03.070
想出了这么一个例子呢

06:03.070 --> 06:04.070
它既不复杂啊

06:04.070 --> 06:06.070
我们可以通过console

06:06.070 --> 06:08.070
就是在控制台打印来模拟

06:08.070 --> 06:12.070
并且又能说明这个接口的问题

06:12.070 --> 06:14.070
因为接口要真人八经的

06:14.070 --> 06:15.070
真的要去用接口的话

06:15.070 --> 06:17.070
它一般是比较复杂的场景

06:17.070 --> 06:19.070
因为我尽量想来想去呢

06:19.070 --> 06:21.070
也就这个场景了

06:21.070 --> 06:22.070
它既不没有那么复杂

06:22.070 --> 06:24.070
也可以把接口的问题说清楚

06:24.070 --> 06:27.070
智慧表演 比方说做算数题

06:27.070 --> 06:30.070
算数题 带来个跳舞吧

06:30.070 --> 06:32.070
跳舞

06:32.070 --> 06:34.070
好 现在有这么一个场景

06:34.070 --> 06:36.070
来吧 大家想一想

06:36.070 --> 06:38.070
这个场景下边

06:38.070 --> 06:40.070
我们如果用面向对象的方式

06:40.070 --> 06:42.070
来实现的话

06:42.070 --> 06:43.070
怎么来实现

06:43.070 --> 06:45.070
怎么来实现这个问题

06:45.070 --> 06:47.070
好 我们来实现一次

06:47.070 --> 06:48.070
先不想接口

06:48.070 --> 06:50.070
我们就用之前学习的面向对象的方式

06:50.070 --> 06:52.070
来实现一下这个

06:52.070 --> 06:54.070
这个例子

06:54.070 --> 06:55.070
怎么实现呢

06:55.070 --> 06:56.070
这里边

06:56.070 --> 06:58.070
我先把这张代码先

06:58.070 --> 07:00.070
先上架

07:00.070 --> 07:05.070
然后这里我去建立这么一个

07:05.070 --> 07:06.070
建个文件吧

07:06.070 --> 07:08.070
因为个代码会有点多

07:08.070 --> 07:09.070
我建立一个文件

07:09.070 --> 07:10.070
这个文件呢

07:10.070 --> 07:11.070
我给它取名为

07:11.070 --> 07:13.070
Animals动物

07:13.070 --> 07:15.070
这么一个文件

07:15.070 --> 07:16.070
这个文件呢

07:16.070 --> 07:17.070
我就存放所有动物类

07:17.070 --> 07:18.070
存放所有动物类

07:18.070 --> 07:21.070
这里面我首先写一个抽象类

07:21.070 --> 07:22.070
抽象类

07:22.070 --> 07:23.070
怎么抽象呢

07:23.070 --> 07:25.070
我们按照上级课的知识

07:25.070 --> 07:27.070
应该是上上级课的知识

07:27.070 --> 07:28.070
抽象类呢

07:28.070 --> 07:29.070
我给它写个Animal

07:29.070 --> 07:31.070
表示动物

07:31.070 --> 07:32.070
动物

07:32.070 --> 07:33.070
它里边呢

07:33.070 --> 07:34.070
包含了动物的所有特征

07:34.070 --> 07:35.070
有哪些特征呢

07:35.070 --> 07:37.070
比方说我写个狗爪寒朔

07:37.070 --> 07:40.070
在狗爪寒朔里边写上一些属性

07:40.070 --> 07:41.070
属性那边

07:41.070 --> 07:42.070
哪些特征呢

07:42.070 --> 07:43.070
比方说

07:43.070 --> 07:45.070
我们刚才说的特征里边

07:45.070 --> 07:49.070
包含了那个名字和年龄

07:49.070 --> 07:51.070
名字是什么年龄

07:51.070 --> 07:52.070
是什么你得告诉我

07:52.070 --> 07:53.070
通过参数传议

07:53.070 --> 07:54.070
名字

07:54.070 --> 07:55.070
年龄

07:55.070 --> 07:56.070
A级

07:56.070 --> 07:57.070
Number

07:57.070 --> 08:00.070
有了这么两个属性了

08:00.070 --> 08:02.070
还有什么属性呢

08:02.070 --> 08:03.070
还有种类名称

08:03.070 --> 08:04.070
好

08:04.070 --> 08:05.070
种类名称

08:05.070 --> 08:06.070
在负类里边是不知道的

08:06.070 --> 08:07.070
但是

08:07.070 --> 08:08.070
纸类的话非常清楚

08:08.070 --> 08:10.070
因为狮子是一个类

08:10.070 --> 08:11.070
那么它的名称是啥

08:11.070 --> 08:12.070
种类名称

08:12.070 --> 08:13.070
就是狮子

08:13.070 --> 08:14.070
狗的话

08:14.070 --> 08:16.070
它的种类也是狗

08:16.070 --> 08:18.070
把种类和名字分开

08:18.070 --> 08:19.070
就像你养虫屋一样

08:19.070 --> 08:20.070
你养一只狗

08:20.070 --> 08:22.070
那么你给它取

08:22.070 --> 08:23.070
可以给它取一只

08:23.070 --> 08:24.070
取个别的名字

08:24.070 --> 08:25.070
不要说该取个猫

08:25.070 --> 08:26.070
我以前养虫屋的时候

08:26.070 --> 08:27.070
我就经常这么干

08:27.070 --> 08:28.070
好

08:28.070 --> 08:29.070
这里呢

08:29.070 --> 08:30.070
我给它

08:30.070 --> 08:31.070
就给它设置一个属性

08:31.070 --> 08:32.070
这个属性呢

08:32.070 --> 08:33.070
我把它设置为抽象的

08:33.070 --> 08:34.070
Abstracts

08:34.070 --> 08:35.070
种类

08:35.070 --> 08:36.070
就是Type

08:36.070 --> 08:37.070
它是个字无窜

08:37.070 --> 08:38.070
你的纸类呢

08:38.070 --> 08:40.070
需要去把它实现

08:40.070 --> 08:41.070
需要给它复制

08:41.070 --> 08:42.070
进行实现

08:42.070 --> 08:43.070
好

08:43.070 --> 08:44.070
我写到这

08:44.070 --> 08:45.070
OK

08:45.070 --> 08:46.070
然后呢

08:46.070 --> 08:47.070
还有什么呢

08:47.070 --> 08:48.070
打招呼

08:48.070 --> 08:49.070
对吧

08:49.070 --> 08:50.070
共同的方法

08:50.070 --> 08:51.070
打招呼

08:51.070 --> 08:52.070
OK

08:52.070 --> 08:53.070
我就写到附类里边吧

08:53.070 --> 08:55.070
那就直接输出吧

08:55.070 --> 08:56.070
输出

08:56.070 --> 08:57.070
输出

08:57.070 --> 08:58.070
假设动物会说话

08:58.070 --> 09:00.070
那么我们就来呗

09:00.070 --> 09:03.070
各位观众

09:03.070 --> 09:05.070
各位观众

09:05.070 --> 09:07.070
观众

09:07.070 --> 09:10.830
大家

09:10.830 --> 09:12.830
我是

09:12.830 --> 09:14.830
我是这个种类

09:14.830 --> 09:15.830
把种类放在这

09:15.830 --> 09:16.830
把种类放在这

09:17.830 --> 09:18.830
Type

09:18.830 --> 09:19.830
我是狮子

09:19.830 --> 09:20.830
我是狗

09:20.830 --> 09:21.830
我是什么

09:21.830 --> 09:22.830
好

09:22.830 --> 09:23.830
然后呢

09:23.830 --> 09:24.830
继续写

09:24.830 --> 09:26.830
我叫

09:26.830 --> 09:28.830
我叫啥呢

09:28.830 --> 09:29.830
this

09:29.830 --> 09:31.830
this

09:31.830 --> 09:33.830
点

09:33.830 --> 09:34.830
今年

09:34.830 --> 09:35.830
多大了

09:35.830 --> 09:37.830
今年

09:37.830 --> 09:38.830
this

09:38.830 --> 09:39.830
点

09:39.830 --> 09:40.830
A几岁

09:40.830 --> 09:41.830
好

09:41.830 --> 09:43.830
我们把打招呼的方法写完

09:43.830 --> 09:44.830
写好了之后

09:44.830 --> 09:45.830
附类就做好了

09:45.830 --> 09:46.830
就自做好了

09:46.830 --> 09:47.830
你看这个

09:47.830 --> 09:48.830
这个需求就满足了

09:48.830 --> 09:50.830
这个需求

09:50.830 --> 09:51.830
这个需求就满足了

09:51.830 --> 09:52.830
好

09:52.830 --> 09:53.830
那么接下来

09:53.830 --> 09:54.830
我们来一次来写

09:54.830 --> 09:55.830
他的纸类

09:55.830 --> 09:57.830
只能我们放一个文件

09:57.830 --> 09:58.830
当然也可以

09:58.830 --> 09:59.830
把每一个纸类

09:59.830 --> 10:00.830
放到不同的文件里边

10:00.830 --> 10:02.830
其实如果开放一个大的工程的话

10:02.830 --> 10:03.830
我们通常会放到

10:03.830 --> 10:04.830
不同的文件里边

10:04.830 --> 10:05.830
一个文件

10:05.830 --> 10:06.830
就是一个类

10:06.830 --> 10:07.830
通常会这样做

10:07.830 --> 10:08.830
这里的代码比较简单

10:08.830 --> 10:09.830
因此

10:09.830 --> 10:10.830
我就不做那么多文件了

10:10.830 --> 10:12.830
就是一个文件

10:12.830 --> 10:14.830
导出另外一个类

10:14.830 --> 10:15.830
一个个来

10:15.830 --> 10:17.830
十字 蓝拥

10:19.830 --> 10:20.830
十字呢

10:20.830 --> 10:21.830
它去继承负类

10:21.830 --> 10:22.830
一个天字

10:23.830 --> 10:24.830
继承哪个类啊

10:24.830 --> 10:25.830
继承animal

10:27.830 --> 10:28.830
好 实现负类

10:29.830 --> 10:30.830
因为它里边

10:30.830 --> 10:31.830
有一些抽象成员

10:31.830 --> 10:32.830
需要你实现

10:32.830 --> 10:33.830
这里呢

10:33.830 --> 10:34.830
给它负责

10:35.830 --> 10:36.830
这是十字

10:36.830 --> 10:37.830
十字

10:37.830 --> 10:38.830
OK

10:38.830 --> 10:39.830
好 再来一个

10:39.830 --> 10:40.830
这是十字

10:40.830 --> 10:42.830
然后一共有四个吧

10:42.830 --> 10:43.830
四个

10:43.830 --> 10:44.830
十字还有啥

10:44.830 --> 10:45.830
还有

10:45.830 --> 10:47.830
老虎 猴子 狗

10:48.830 --> 10:49.830
老虎 猴子 狗

10:49.830 --> 10:50.830
这几个动物

10:50.830 --> 10:51.830
都是我经过

10:51.830 --> 10:52.830
我精挑戏选的

10:52.830 --> 10:53.830
大家要知道吗

10:54.830 --> 10:55.830
因为

10:55.830 --> 10:56.830
我要看一下

10:56.830 --> 10:57.830
我哪些单词是会的

10:58.830 --> 10:59.830
猴子

10:59.830 --> 11:00.830
猴子

11:00.830 --> 11:01.830
这边呢

11:01.830 --> 11:02.830
monkey

11:03.830 --> 11:04.830
就是说

11:04.830 --> 11:05.830
这个单词啊

11:06.830 --> 11:07.830
有一说一

11:08.830 --> 11:09.830
导个

11:09.830 --> 11:10.830
先写了吧

11:10.830 --> 11:11.830
先说下个单词

11:11.830 --> 11:12.830
就很多同学在问

11:13.830 --> 11:14.830
他说 袁老师

11:14.830 --> 11:16.830
我英语不太好

11:16.830 --> 11:17.830
我能学正好吗

11:18.830 --> 11:19.830
其实我英语也不太好

11:20.830 --> 11:22.830
我如果你让我去看一篇

11:22.830 --> 11:23.830
技术文档的话

11:23.830 --> 11:25.830
那我能看没问题

11:25.830 --> 11:27.830
但是如果你让我看一些

11:27.830 --> 11:28.830
什么美剧啊

11:28.830 --> 11:31.830
一些生活中的一些英语

11:31.830 --> 11:33.830
或者是一些新闻里边的英语

11:33.830 --> 11:34.830
那我不行了

11:34.830 --> 11:35.830
我就不行了

11:35.830 --> 11:36.830
比方说咱们电视里边的

11:36.830 --> 11:38.830
什么cctv4

11:38.830 --> 11:39.830
是个中和频道

11:39.830 --> 11:40.830
还是国际频道

11:40.830 --> 11:41.830
它里边有一些

11:41.830 --> 11:43.830
新闻用英语播的新闻

11:43.830 --> 11:44.830
我也完全听不懂

11:44.830 --> 11:45.830
但是如果是技术的话

11:45.830 --> 11:47.830
技术的专业术语的话

11:47.830 --> 11:48.830
还行

11:48.830 --> 11:50.830
因为技术文档我经常看嘛

11:50.830 --> 11:51.830
像这种生活中的

11:51.830 --> 11:52.830
这些英语

11:52.830 --> 11:53.830
我还真不知道

11:53.830 --> 11:54.830
有些东西真不知道

11:54.830 --> 11:55.830
好 这些

11:55.830 --> 11:56.830
把改一下

11:56.830 --> 11:57.830
老虎

12:06.270 --> 12:08.270
这个是猴子

12:09.270 --> 12:11.270
这个是狗

12:11.270 --> 12:12.270
它们的种类

12:12.270 --> 12:13.270
把它设置一下

12:13.270 --> 12:14.270
好了

12:14.270 --> 12:16.270
就建好了这么

12:16.270 --> 12:18.270
这要一种类结构

12:18.270 --> 12:19.270
有附类

12:19.270 --> 12:20.270
有四个籽类

12:20.270 --> 12:21.270
每个籽类还有不同的类型

12:21.270 --> 12:23.270
它们有共同的一些

12:23.270 --> 12:25.270
共同的一些属性

12:25.270 --> 12:27.270
有些成员

12:27.270 --> 12:29.270
好 现在我们看后边的

12:29.270 --> 12:32.270
它们各自有各自的技能

12:32.270 --> 12:34.270
但是这里没有说

12:34.270 --> 12:36.270
没有说现在有哪些技能

12:36.270 --> 12:38.270
比方说打个比方吧

12:38.270 --> 12:39.270
比方说

12:40.270 --> 12:43.270
现在狮子和老虎

12:43.270 --> 12:45.270
和老虎

12:45.270 --> 12:47.270
它们都能够

12:47.270 --> 12:51.270
能进行火圈表演

12:51.270 --> 12:54.650
然后猴子呢

12:54.650 --> 12:59.650
能进行平衡表演

12:59.650 --> 13:01.650
然后狗呢

13:02.650 --> 13:05.650
能进行智慧表演

13:05.650 --> 13:06.650
比方说

13:06.650 --> 13:08.650
老虎和狮子能进行火圈表演

13:08.650 --> 13:09.650
猴子呢

13:09.650 --> 13:10.650
能进行平衡表演

13:10.650 --> 13:11.650
狗呢

13:11.650 --> 13:12.650
能进行智慧表演

13:12.650 --> 13:14.650
如果在这种需求下

13:14.650 --> 13:15.650
我们写单码该怎么写呢

13:15.650 --> 13:17.650
写单码就这样写

13:17.650 --> 13:18.650
来看一下

13:19.650 --> 13:20.650
狮子

13:20.650 --> 13:21.650
老虎

13:21.650 --> 13:22.650
它们两个是一样的

13:22.650 --> 13:23.650
OK

13:23.650 --> 13:24.650
那么咱们写一下

13:24.650 --> 13:26.650
它们两个里边有方法

13:26.650 --> 13:28.650
火圈表演里面有单火圈

13:28.650 --> 13:29.650
有双火圈对吧

13:29.650 --> 13:30.650
我们用这种方式

13:30.650 --> 13:33.650
Single Fire

13:33.650 --> 13:34.650
单火圈

13:35.650 --> 13:37.650
我们这里就直接输出吧

13:37.650 --> 13:38.650
就直接输出

13:38.650 --> 13:42.980
this

13:42.980 --> 13:44.980
this.net

13:44.980 --> 13:46.980
进行单

13:47.980 --> 13:50.980
穿越了单火圈

13:51.980 --> 13:52.980
比方说

13:52.980 --> 13:53.980
就这么写下就完事了

13:53.980 --> 13:54.980
然后双火圈呢

13:54.980 --> 13:56.980
把它复制一下

13:56.980 --> 13:57.980
这里

13:57.980 --> 13:59.980
double fire

13:59.980 --> 14:00.980
说到double

14:00.980 --> 14:02.980
就像这些double queue

14:02.980 --> 14:04.980
这里把它改成双火圈

14:04.980 --> 14:05.980
双火圈

14:06.980 --> 14:08.980
狮子这里写完了

14:08.980 --> 14:09.980
我边写的时候

14:09.980 --> 14:11.980
大家边想一想

14:11.980 --> 14:13.980
这可能会遇到一些什么样的问题

14:15.980 --> 14:16.980
这里

14:16.980 --> 14:18.980
老虎这里也是

14:18.980 --> 14:20.980
单火圈和双火圈

14:20.980 --> 14:21.980
这里

14:21.980 --> 14:22.980
一样的

14:22.980 --> 14:23.980
没有什么差别

14:23.980 --> 14:24.980
当然它们可不可以有差别

14:24.980 --> 14:26.980
当然可以有差别

14:26.980 --> 14:28.980
应不应该把它分开写

14:28.980 --> 14:30.980
应该分开写

14:30.980 --> 14:31.980
应该分开写

14:31.980 --> 14:32.980
没有什么问题

14:32.980 --> 14:34.980
因为老虎

14:34.980 --> 14:35.980
和

14:35.980 --> 14:36.980
狮子

14:36.980 --> 14:37.980
他们实现

14:37.980 --> 14:38.980
跳火圈的方式

14:38.980 --> 14:39.980
可能完全不一样

14:39.980 --> 14:40.980
现在一样

14:40.980 --> 14:41.980
可以一样

14:41.980 --> 14:42.980
也可以完全不一样

14:42.980 --> 14:44.980
因为他们两个是单独的

14:44.980 --> 14:45.980
不是公有的函数

14:45.980 --> 14:46.980
因此这里

14:46.980 --> 14:47.980
没有必要把它提到

14:47.980 --> 14:48.980
附列一边去

14:48.980 --> 14:49.980
只不过我们现在写上去

14:49.980 --> 14:51.980
看上去是一样的

14:51.980 --> 14:52.980
碰巧了

14:52.980 --> 14:53.980
碰巧了这两个东西

14:53.980 --> 14:54.980
这两个动物

14:54.980 --> 14:55.980
表演火圈的节目

14:55.980 --> 14:56.980
都是一样的

14:56.980 --> 14:58.980
但他们是可以不一样的

14:58.980 --> 14:59.980
所以说把它分开写

14:59.980 --> 15:01.980
是没问题的

15:01.980 --> 15:03.980
然后是猴子

15:03.980 --> 15:05.980
它会的是平衡表演

15:05.980 --> 15:07.980
独木桥和狼狮

15:07.980 --> 15:08.980
完了

15:08.980 --> 15:11.980
这又到了我英语的盲区了

15:11.980 --> 15:13.980
独木桥

15:13.980 --> 15:16.980
独木桥

15:16.980 --> 15:18.980
但是我可以保证我写拼音

15:18.980 --> 15:19.980
不会写出

15:19.980 --> 15:21.980
这里输出吧

15:24.980 --> 15:26.980
用一样的吧

15:26.980 --> 15:27.980
ZS

15:27.980 --> 15:29.980
ZS.NET

15:29.980 --> 15:30.980
表演

15:30.980 --> 15:32.980
走独木桥

15:34.980 --> 15:35.980
下边

15:35.980 --> 15:36.980
还有一个是

15:36.980 --> 15:38.980
走钢丝

15:50.870 --> 15:52.870
猴子写完了

15:52.870 --> 15:54.870
再来狗

15:54.870 --> 15:56.870
狗又上了

15:56.870 --> 15:58.870
狗又做算数题

15:58.870 --> 16:00.870
可以跳舞

16:00.870 --> 16:04.530
来吧

16:04.530 --> 16:06.530
算数题

16:08.530 --> 16:10.530
输出

16:10.530 --> 16:12.530
再复制一下吧

16:12.530 --> 16:13.530
其实这句话

16:13.530 --> 16:15.530
这里面实现的话

16:15.530 --> 16:17.530
我现在只是在模拟

16:17.530 --> 16:19.530
模拟输出一句话就完了

16:19.530 --> 16:21.530
给大家一个印象

16:21.530 --> 16:23.530
这里的实现是可以有差异的

16:23.530 --> 16:25.530
是可以有其他实现的

16:25.530 --> 16:26.530
这里

16:26.530 --> 16:27.530
表演走

16:27.530 --> 16:29.530
表演算数

16:29.530 --> 16:31.530
做算数题

16:32.530 --> 16:34.530
下面这个

16:34.530 --> 16:35.530
下面还有一个是

16:35.530 --> 16:36.530
跳舞

16:37.530 --> 16:39.530
这里就用

16:39.530 --> 16:40.530
Dance

16:40.530 --> 16:42.530
跳舞还知道

16:42.530 --> 16:43.530
复制一下

16:43.530 --> 16:47.160
表演跳舞

16:47.160 --> 16:49.160
好了 写完了

16:49.160 --> 16:50.160
现在我们写完了过

16:50.160 --> 16:52.160
形成这么一种结构

16:52.160 --> 16:53.160
这也是

16:53.160 --> 16:56.160
面向对象做开发的时候

16:56.160 --> 16:58.160
如果遇到这种问题

16:58.160 --> 17:00.160
你不了解接口的情况下

17:00.160 --> 17:02.160
很有可能会写出这样的代码

17:02.160 --> 17:03.160
这样的代码

17:03.160 --> 17:05.160
还有什么样的问题

17:05.160 --> 17:07.160
首先第一个问题

17:08.160 --> 17:10.160
你看一下老虎

17:10.160 --> 17:12.160
和狮子

17:12.160 --> 17:14.160
这两个人

17:14.160 --> 17:15.160
这两个不是人

17:15.160 --> 17:16.160
这两个动物

17:16.160 --> 17:18.160
他们是不是有共同的能力

17:18.160 --> 17:19.160
对不对

17:19.160 --> 17:21.160
有共同的能力

17:21.160 --> 17:22.160
但是个能力实现起来

17:22.160 --> 17:23.160
可能不一样

17:23.160 --> 17:24.160
实现起来可能不一样

17:24.160 --> 17:25.160
狮子跳火圈

17:25.160 --> 17:26.160
可能

17:26.160 --> 17:27.160
跟老虎跳火圈

17:27.160 --> 17:28.160
不太一样

17:28.160 --> 17:29.160
因为他的实现是不一样的

17:29.160 --> 17:31.160
但是他们的能力

17:31.160 --> 17:32.160
是相同的

17:32.160 --> 17:34.160
那么就有可能会造成

17:34.160 --> 17:35.160
这种现象

17:35.160 --> 17:37.160
现在我并没有在代码里面

17:37.160 --> 17:39.160
明确的表示出

17:39.160 --> 17:42.160
老虎和狮子

17:42.160 --> 17:44.160
拥有一样的能力

17:44.160 --> 17:45.160
我并没有在代码里面

17:45.160 --> 17:46.160
明确的表示出

17:46.160 --> 17:49.160
那也就是说啥呢

17:49.160 --> 17:51.160
我如果在老虎这里

17:51.160 --> 17:54.160
写了写这个函数的时候

17:54.160 --> 17:55.160
比方说

17:55.160 --> 17:57.160
我没有把跳单火圈

17:57.160 --> 17:59.160
我可能写成这个

17:59.160 --> 18:00.160
写成六一个单词

18:00.160 --> 18:01.160
Fire

18:01.160 --> 18:02.160
表示跳单火圈

18:02.160 --> 18:04.160
他会不会爆错

18:04.160 --> 18:06.160
没有任何的强约数理

18:06.160 --> 18:08.160
约数它一定要写成这个名字

18:08.160 --> 18:10.160
并且也没有强约数理

18:10.160 --> 18:12.160
约数它一定是没有参数

18:12.160 --> 18:13.160
一定是没有反悔值

18:13.160 --> 18:15.160
它没有进行任何的强约数

18:15.160 --> 18:17.160
这就是我们遇到了

18:17.160 --> 18:19.160
第一个问题

18:19.160 --> 18:24.940
不使用接口实现时

18:24.940 --> 18:25.940
是

18:25.940 --> 18:27.940
接口实现时

18:27.940 --> 18:29.940
遇到了第一个问题

18:29.940 --> 18:31.940
能力

18:31.940 --> 18:34.940
就是这些表演的能力

18:34.940 --> 18:36.940
不管是火圈表演

18:36.940 --> 18:37.940
平衡表演

18:37.940 --> 18:38.940
还是智慧表演

18:38.940 --> 18:39.940
他们都是能力

18:39.940 --> 18:41.940
有些动物还有相同的能力

18:41.940 --> 18:43.940
对能力

18:43.940 --> 18:45.940
对能力

18:45.940 --> 18:49.940
没有强约数理

18:49.940 --> 18:51.940
能够做的事情

18:51.940 --> 18:52.940
能力是什么

18:52.940 --> 18:53.940
其实就是函数

18:53.940 --> 18:55.940
成员函数

18:55.940 --> 18:57.940
成员函数

18:57.940 --> 18:59.940
没有强约数理

18:59.940 --> 19:01.940
比方说这里是獅子

19:01.940 --> 19:03.940
獅子要能够完成火圈表演

19:03.940 --> 19:05.940
并没有任何一个东西

19:05.940 --> 19:06.940
告诉他

19:06.940 --> 19:07.940
你要完成火圈表演

19:07.940 --> 19:08.940
你必须要有这两个函数

19:08.940 --> 19:10.940
他可以少写一个函数

19:10.940 --> 19:11.940
他也不抱错的

19:11.940 --> 19:13.940
但是咱们火圈表演

19:13.940 --> 19:14.940
它是必须要有两个函数的

19:14.940 --> 19:16.940
一定要表演一个单火圈

19:16.940 --> 19:17.940
一定要表演一个双火圈

19:17.940 --> 19:19.940
这是我们系统里面约定好的

19:19.940 --> 19:21.940
它没有任何的强制约数理

19:21.940 --> 19:23.940
约数说你必须要有这两个函数

19:23.940 --> 19:25.940
每个函数的残数有哪些

19:25.940 --> 19:26.940
反悔内形是什么

19:26.940 --> 19:27.940
函数名是什么

19:27.940 --> 19:28.940
必须要有

19:28.940 --> 19:30.940
它没有任何的强约数理

19:30.940 --> 19:32.940
这是咱们看到的第一个问题

19:32.940 --> 19:33.940
当然你现在去想

19:33.940 --> 19:34.940
脚筋脑子去想

19:34.940 --> 19:36.940
也会发现这个问题不好解决

19:36.940 --> 19:39.940
目前没有什么好的解决办法

19:39.940 --> 19:41.940
好 咱们再看第二个问题

19:41.940 --> 19:43.940
第二个问题它真的是比较严重

19:43.940 --> 19:44.940
我们到了这个

19:44.940 --> 19:46.940
英登社的TS里面来

19:46.940 --> 19:48.940
好 在这里面我来使用了

19:48.940 --> 19:52.940
首先我这里有个动物的宿主

19:52.940 --> 19:54.940
Animus

19:54.940 --> 19:55.940
来约数一下

19:55.940 --> 20:00.940
是动物的宿主

20:00.940 --> 20:02.940
宿主里面有哪些动物呢

20:02.940 --> 20:05.940
我来一次创建一些动物

20:05.940 --> 20:07.940
先创建一只狮子

20:07.940 --> 20:08.940
蓝肉

20:08.940 --> 20:10.940
一只狮子

20:10.940 --> 20:13.940
狮子的名字叫做王富贵

20:13.940 --> 20:15.940
怎么这么喜欢这个名字

20:15.940 --> 20:17.940
怎么这么容易想到这个名字

20:17.940 --> 20:19.940
好像是听一个乡神

20:19.940 --> 20:21.940
好像是郭德纲的乡神

20:21.940 --> 20:22.940
我想想

20:22.940 --> 20:24.940
还算真是郭德纲的乡神

20:24.940 --> 20:25.940
里面说什么

20:25.940 --> 20:27.940
布什的秘书王富贵

20:27.940 --> 20:28.940
特别有印象

20:28.940 --> 20:30.940
老想到这个字

20:30.940 --> 20:32.940
想到这个词

20:32.940 --> 20:34.940
给他一个年龄 十二岁

20:34.940 --> 20:36.940
一只狮子

20:36.940 --> 20:37.940
然后来一只老虎

20:37.940 --> 20:38.940
他一个

20:38.940 --> 20:40.940
来一只老虎

20:40.940 --> 20:42.940
老虎呢

20:42.940 --> 20:46.320
老虎是什么

20:46.320 --> 20:48.320
昆昆

20:48.320 --> 20:50.320
老在里面想到什么词

20:50.320 --> 20:52.320
就蹦出来

20:52.320 --> 20:54.320
二十一岁

20:54.320 --> 20:55.320
比方说

20:55.320 --> 20:56.320
六一个

20:56.320 --> 20:58.320
再来一个Monkey猴子

20:58.320 --> 21:00.320
来两只猴子

21:00.320 --> 21:02.320
猴子呢

21:02.320 --> 21:04.320
给他取个名字

21:04.320 --> 21:07.320
猴子里面

21:07.320 --> 21:09.320
叫什么

21:09.320 --> 21:11.320
小六

21:11.320 --> 21:13.320
有些同学会心一笑

21:13.320 --> 21:15.320
猴子

21:15.320 --> 21:16.320
再来

21:16.320 --> 21:18.320
再来两只狗

21:18.320 --> 21:20.320
两只狗

21:20.320 --> 21:22.320
一只狗叫旺财

21:22.320 --> 21:24.320
旺财

21:24.320 --> 21:26.320
三岁

21:26.320 --> 21:28.320
再来一只狗

21:28.320 --> 21:30.320
叫狗圣

21:30.320 --> 21:32.320
非常阶梯气

21:32.320 --> 21:34.320
这些名字

21:34.320 --> 21:36.320
随便写

21:36.320 --> 21:37.320
就写这么一些动物

21:37.320 --> 21:38.320
玩算了

21:38.320 --> 21:40.320
想这些名字

21:40.320 --> 21:41.320
太牢火了

21:41.320 --> 21:44.320
有这么一个宿主动物

21:44.320 --> 21:45.320
那么现在呢

21:45.320 --> 21:47.320
我要做这么各种各样的操作

21:47.320 --> 21:48.320
接下来

21:48.320 --> 21:49.320
动物

21:49.320 --> 21:50.320
黄狼的宿主里面

21:50.320 --> 21:51.320
他那个宿主的字呢

21:51.320 --> 21:53.320
我现在是写死的

21:53.320 --> 21:55.320
有没有可能不是写死的呢

21:55.320 --> 21:57.320
他可能来自于服务器的响应结果

21:57.320 --> 21:59.320
有可能来自一些函数的其他要用

21:59.320 --> 22:01.320
有可能来自于水系产生

22:01.320 --> 22:02.320
水面

22:02.320 --> 22:03.320
总之呢他有个动物的宿主

22:03.320 --> 22:05.320
我也不知道这个宿主里面

22:05.320 --> 22:06.320
每一只动物有哪些

22:06.320 --> 22:07.320
有哪些动物我不知道

22:07.320 --> 22:09.320
我也不知道这些动物

22:09.320 --> 22:10.320
有多少猴子

22:10.320 --> 22:11.320
有多少狮子

22:11.320 --> 22:12.320
我也不知道啥都不知道

22:12.320 --> 22:13.320
总之我只知道

22:13.320 --> 22:14.320
动物的权在这里面

22:14.320 --> 22:16.320
接下来我要做这么一些操作

22:16.320 --> 22:18.320
第一件事

22:18.320 --> 22:19.320
所有的动物

22:19.320 --> 22:20.320
动物来了

22:20.320 --> 22:21.320
开场了

22:21.320 --> 22:22.320
所有动物

22:22.320 --> 22:24.320
打招呼

22:25.320 --> 22:26.320
这个简单

22:26.320 --> 22:28.320
因为你甭管你是啥动物

22:28.320 --> 22:30.320
我根本就不care你是啥动物

22:30.320 --> 22:32.320
你一定有这么一个打招呼的

22:32.320 --> 22:34.320
打招呼的这个函数

22:34.320 --> 22:35.320
因为它是在负累地边

22:35.320 --> 22:36.320
所以说

22:36.320 --> 22:38.320
这里面这居然是个动物的宿主

22:38.320 --> 22:40.320
那么每一只动物都能打招呼

22:40.320 --> 22:41.320
来呗循环呗

22:41.320 --> 22:42.320
扶一起

22:42.320 --> 22:43.320
扶一起

22:46.320 --> 22:47.320
你看

22:47.320 --> 22:48.320
每个动物他都有这个函数

22:48.320 --> 22:50.320
打招呼的这个函数

22:50.320 --> 22:52.320
好 咱们保存一下

22:53.320 --> 22:54.320
你看

22:54.320 --> 22:56.320
各种动物都打招呼

22:56.320 --> 22:57.320
打招呼了

22:57.320 --> 22:58.320
没问题的对吧

22:58.320 --> 22:59.320
好

22:59.320 --> 23:00.320
然后接下来

23:00.320 --> 23:01.320
第二步

23:02.320 --> 23:04.320
打完招呼过后呢

23:04.320 --> 23:05.320
我先把这个注释掉

23:05.320 --> 23:06.320
不让他干扰我们

23:06.320 --> 23:07.320
第二步

23:07.320 --> 23:09.320
所有

23:09.320 --> 23:11.320
会跳

23:11.320 --> 23:13.320
火圈的

23:13.320 --> 23:14.320
动物

23:15.320 --> 23:17.320
会进行

23:17.320 --> 23:20.320
火圈表演的动物

23:20.320 --> 23:23.320
完成火圈表演

23:23.320 --> 23:24.320
来吧

23:24.320 --> 23:26.320
这个就麻烦了

23:26.320 --> 23:27.320
这个就不简单了

23:27.320 --> 23:29.320
我第二件事先就是

23:29.320 --> 23:30.320
我们先表演

23:30.320 --> 23:32.320
先进行火圈表演

23:32.320 --> 23:35.320
我也不知道哪些动物能进行火圈表演

23:35.320 --> 23:36.320
你只要会

23:36.320 --> 23:37.320
那就来

23:37.320 --> 23:39.320
来完成火圈表演

23:39.320 --> 23:40.320
好 接下来

23:40.320 --> 23:41.320
我们的代码会怎么写

23:41.320 --> 23:43.320
大家会怎么写就代码

23:43.320 --> 23:45.320
首先肯定是循环吧

23:45.320 --> 23:47.320
循环

23:47.320 --> 23:49.320
循环的时候

23:49.320 --> 23:51.320
判断

23:51.320 --> 23:52.320
判断啥呢

23:52.320 --> 23:53.320
判断A

23:53.320 --> 23:55.320
会不会

23:55.320 --> 23:58.320
会不会进行火圈表演

23:58.320 --> 23:59.320
对不对

23:59.320 --> 24:00.320
按照逻辑来说

24:00.320 --> 24:02.320
我们应该进行这样的判断

24:02.320 --> 24:04.320
但是我这里能判断吗

24:04.320 --> 24:07.320
我怎么知道他能不能进行火圈表演呢

24:07.320 --> 24:09.320
我现在没有这个东西进行约束

24:09.320 --> 24:11.320
我不知道火圈表演是啥意思

24:11.320 --> 24:13.320
就是这个系统中没有任何一个定义

24:13.320 --> 24:15.320
没有任何一个东西来定义

24:15.320 --> 24:17.320
什么叫做火圈表演

24:17.320 --> 24:18.320
没有

24:18.320 --> 24:20.320
整个系统里面只有这些类

24:20.320 --> 24:21.320
有动物

24:21.320 --> 24:22.320
有狮子

24:22.320 --> 24:23.320
有老虎

24:23.320 --> 24:24.320
有猴子

24:24.320 --> 24:25.320
有狗

24:25.320 --> 24:26.320
但是没有任何一个东西在定义

24:26.320 --> 24:28.320
什么叫做火圈表演

24:28.320 --> 24:29.320
他不知道

24:29.320 --> 24:30.320
这个系统里面不知道

24:30.320 --> 24:32.320
那这里怎么来判断呢

24:32.320 --> 24:33.320
我只能

24:33.320 --> 24:34.320
目前的话只能这样判断了

24:34.320 --> 24:35.320
没办法了

24:35.320 --> 24:36.320
怎么判断

24:36.320 --> 24:38.320
我只能去看一下

24:38.320 --> 24:39.320
我们的动物里面

24:39.320 --> 24:40.320
哪些能够跑圈表演呢

24:40.320 --> 24:42.320
狮子和老虎

24:42.320 --> 24:43.320
对不对

24:43.320 --> 24:45.320
狮子和老虎能进行火圈表演

24:45.320 --> 24:47.320
于是我就会这样判断

24:47.320 --> 24:48.320
OK

24:48.320 --> 24:49.320
INSTANCE

24:49.320 --> 24:50.320
INSTANCE

24:50.320 --> 24:51.320
什么呢

24:58.460 --> 24:59.460
我现在没办法了

24:59.460 --> 25:00.460
我只能这样子判断

25:00.460 --> 25:01.460
因为

25:01.460 --> 25:03.460
本来我是想判断的势力

25:03.460 --> 25:05.460
会不会火圈表演

25:05.460 --> 25:06.460
但是我们这个系统里面

25:06.460 --> 25:07.460
没有任何东西

25:07.460 --> 25:09.460
定义了什么叫做火圈表演

25:09.460 --> 25:11.460
没有这个类型

25:11.460 --> 25:12.460
因此呢

25:12.460 --> 25:14.460
我只能去这样子判断

25:14.460 --> 25:15.460
我只能认为

25:15.460 --> 25:17.460
狮子他会火圈表演

25:17.460 --> 25:18.460
通过这个判断过后

25:18.460 --> 25:20.460
有了类型保护

25:20.460 --> 25:21.460
有了类型保护过后

25:21.460 --> 25:23.460
我在这里就可以调用

25:23.460 --> 25:25.460
火圈表演

25:25.460 --> 25:27.460
single fire

25:27.460 --> 25:28.460
然后

25:28.460 --> 25:30.460
double fire

25:30.460 --> 25:31.460
你看

25:31.460 --> 25:32.460
就可以了

25:32.460 --> 25:34.460
除了狮子之外

25:34.460 --> 25:36.460
我们还可以判断

25:36.460 --> 25:38.460
INSTANCE

25:38.460 --> 25:39.460
什么呢

25:39.460 --> 25:40.460
Tiger

25:40.460 --> 25:42.460
是不是老虎

25:42.460 --> 25:43.460
如果是老虎的话

25:43.460 --> 25:46.460
我们也可以进行火圈表演

25:46.460 --> 25:47.460
也可以进行

25:47.460 --> 25:49.460
double fire

25:49.460 --> 25:50.460
好

25:50.460 --> 25:51.460
我们代码就写成了这个样子

25:51.460 --> 25:53.460
这个样子的代码呢

25:53.460 --> 25:55.460
是有隐患的

25:55.460 --> 25:56.460
什么隐患的

25:56.460 --> 25:57.460
大家可能会觉得

25:57.460 --> 25:58.460
这里有重复代码

25:58.460 --> 25:59.460
这个还是不是重点

25:59.460 --> 26:00.460
这重复代码是可以消除的

26:00.460 --> 26:02.460
在这里

26:02.460 --> 26:04.460
加上个霍子

26:04.460 --> 26:06.460
Tiger

26:06.460 --> 26:08.460
是可以消除的

26:08.460 --> 26:09.460
你看

26:09.460 --> 26:10.460
他这样类型保护出来的话

26:10.460 --> 26:11.460
也就是

26:11.460 --> 26:12.460
他有可能是狮子

26:12.460 --> 26:13.460
有可能是老虎

26:13.460 --> 26:14.460
那么无论你是狮子

26:14.460 --> 26:15.460
还是老虎

26:15.460 --> 26:18.460
你都有这两个函数

26:18.460 --> 26:19.460
因此

26:19.460 --> 26:21.460
这个代码倒是

26:21.460 --> 26:22.460
重复代码倒是好说

26:22.460 --> 26:24.460
关键是现在语异上的变化

26:24.460 --> 26:25.460
大家发现没有

26:25.460 --> 26:28.460
有个非常隐患的语异

26:28.460 --> 26:30.460
这里本来我要判断的是

26:30.460 --> 26:32.460
你会不会火圈表演

26:32.460 --> 26:34.460
结果变成了啥呢

26:34.460 --> 26:37.460
变成了判断狮子和老虎去了

26:37.460 --> 26:39.460
变成了判断这个东西去了

26:39.460 --> 26:40.460
那么变成了这个东西

26:40.460 --> 26:42.460
过后有什么样的隐患

26:42.460 --> 26:44.460
如果有一天

26:45.460 --> 26:47.460
我在这个代码里边

26:47.460 --> 26:48.460
我的狮子

26:48.460 --> 26:51.460
可能我后来马戏团里边

26:51.460 --> 26:53.460
商一批狮子

26:53.460 --> 26:54.460
不知道怎么回事

26:54.460 --> 26:55.460
已经没了

26:55.460 --> 26:58.460
后面就是这些狮子

26:58.460 --> 26:59.460
还没有经过训练

26:59.460 --> 27:01.460
已经不具有了这两个函数

27:01.460 --> 27:03.460
我把这两个已删掉

27:03.460 --> 27:04.460
代码已删掉

27:04.460 --> 27:05.460
你看一下

27:05.460 --> 27:07.460
这边是不是马上就爆错了

27:07.460 --> 27:08.460
对不对

27:08.460 --> 27:09.460
那么这里

27:09.460 --> 27:11.460
狮子不再具有人火圈表演了

27:11.460 --> 27:12.460
那你觉得

27:12.460 --> 27:13.460
也没啥问题

27:13.460 --> 27:15.460
我把这个删了就行了吗

27:15.460 --> 27:16.460
删了

27:16.460 --> 27:17.460
那你想一想

27:17.460 --> 27:18.460
如果这个代码

27:18.460 --> 27:19.460
这是在使用这个类对吧

27:19.460 --> 27:20.460
使用这个对象

27:20.460 --> 27:22.460
这个使用的场景是非常丰富的

27:22.460 --> 27:24.460
如果一个代码到处来使用

27:24.460 --> 27:25.460
我们到处来判断

27:25.460 --> 27:27.460
为了判断你是不是能火圈表演

27:27.460 --> 27:29.460
我们到处都要进行这样的判断

27:29.460 --> 27:32.460
那里个代码改动量是有点搭的

27:32.460 --> 27:33.460
是非常搭的

27:33.460 --> 27:35.460
还有一种情况就是

27:35.460 --> 27:37.460
如果有一天

27:37.460 --> 27:40.460
猴子他也能进行火圈表演了

27:40.460 --> 27:42.460
他除了能够做平衡表演之外

27:42.460 --> 27:44.460
也能进行火圈表演了

27:44.460 --> 27:45.460
那里看这里面

27:45.460 --> 27:47.460
他连错误都不报了

27:47.460 --> 27:49.460
连错误都不报了

27:49.460 --> 27:50.460
那我们怎么知道哪些地方

27:50.460 --> 27:51.460
要给他加一个条件呢

27:51.460 --> 27:53.460
是不是这里要加条件

27:53.460 --> 27:54.460
加一个货者

27:54.460 --> 27:56.460
就会出现这样的问题

27:56.460 --> 27:58.460
这些问题发生了根源是什么

27:58.460 --> 27:59.460
根源就是我刚才说的

27:59.460 --> 28:01.460
我明明要判断的是

28:01.460 --> 28:03.460
你有没有某种能力

28:03.460 --> 28:05.460
我并不关心你是谁

28:05.460 --> 28:06.460
你是狮子也好

28:06.460 --> 28:07.460
你是老虎也好

28:07.460 --> 28:08.460
其实我不care

28:08.460 --> 28:09.460
我只care你

28:09.460 --> 28:11.460
有没有拥有某种能力

28:11.460 --> 28:12.460
那么这个时候呢

28:12.460 --> 28:13.460
我的判断了

28:13.460 --> 28:14.460
本来是要判断能力的

28:14.460 --> 28:17.460
结果我变成了判断内行

28:17.460 --> 28:19.460
变成了判断内行

28:19.460 --> 28:20.460
所以说呢

28:20.460 --> 28:22.460
这里就会导致这样的结果

28:22.460 --> 28:25.460
根源的情况

28:25.460 --> 28:27.460
就第二个问题

28:27.460 --> 28:29.460
就是

28:29.460 --> 28:32.460
如果不使用接口的话

28:32.460 --> 28:37.460
容易将内行和能力

28:37.460 --> 28:38.460
和能力

28:38.460 --> 28:39.460
就是你能做什么

28:39.460 --> 28:40.460
你能做什么

28:40.460 --> 28:41.460
和能力

28:41.460 --> 28:43.460
偶和在一起

28:43.460 --> 28:47.540
就是我明明要判断

28:47.540 --> 28:48.540
你有没有的能力

28:48.540 --> 28:49.540
我就必须要知道

28:49.540 --> 28:51.540
你是什么样的内行

28:51.540 --> 28:52.540
我明明只是判断你

28:52.540 --> 28:54.540
能不能进行火圈表演

28:54.540 --> 28:56.540
结果变成了我要判断

28:56.540 --> 28:58.540
你是不是某种内行

28:58.540 --> 28:59.540
是不是狮子

28:59.540 --> 29:00.540
是不是老虎

29:00.540 --> 29:01.540
变成了这种

29:01.540 --> 29:02.540
什么叫偶和

29:02.540 --> 29:03.540
就是粘连

29:03.540 --> 29:04.540
粘连站到一起

29:04.540 --> 29:05.540
但是这两个东西

29:05.540 --> 29:06.540
明明是分开的

29:06.540 --> 29:08.540
你不是说我是老虎

29:08.540 --> 29:09.540
我就一定有火圈

29:09.540 --> 29:10.540
跳火圈的能力

29:10.540 --> 29:12.540
也不是说我是猴子

29:12.540 --> 29:14.540
我就一定没有跳火圈的能力

29:14.540 --> 29:16.540
它是有可能会变化的

29:16.540 --> 29:17.540
你看这里

29:17.540 --> 29:20.540
技能是可以通过训练改变的

29:20.540 --> 29:21.540
明白了吗

29:21.540 --> 29:23.540
那么现在这个问题

29:23.540 --> 29:25.540
就有点棘手了

29:25.540 --> 29:27.540
根本的问题是什么呢

29:27.540 --> 29:29.540
这两个问题加在一起

29:29.540 --> 29:31.540
根本的问题是

29:31.540 --> 29:36.540
系统中缺少对能力的定义

29:36.540 --> 29:37.540
缺少一个内行

29:37.540 --> 29:39.540
这个内行来专门定义

29:39.540 --> 29:40.540
什么定义

29:40.540 --> 29:42.540
你有没有什么能力

29:42.540 --> 29:45.540
而这种内行在面向对象里边

29:45.540 --> 29:46.540
是啥呢

29:46.540 --> 29:48.540
是接口

29:48.540 --> 29:49.540
所以说接口

29:49.540 --> 29:50.540
语意上

29:50.540 --> 29:52.540
接口的语意

29:52.540 --> 29:54.540
它是什么含义呢

29:54.540 --> 29:55.540
它表达了

29:55.540 --> 29:57.540
应该是这样说

29:57.540 --> 30:00.540
面向对象领域中的

30:00.540 --> 30:02.540
领域中的接口

30:02.540 --> 30:03.540
它的含义

30:03.540 --> 30:04.540
含义是什么呢

30:04.540 --> 30:07.540
它表达了某个内

30:07.540 --> 30:11.540
是否拥有某种能力

30:11.540 --> 30:13.540
它表达了这么一个概念

30:13.540 --> 30:17.540
某个内是否拥有某种能力

30:17.540 --> 30:19.540
好那么现在呢

30:19.540 --> 30:22.540
我们如果要用一个接口

30:22.540 --> 30:23.540
来定义能力的话

30:23.540 --> 30:25.540
我们会怎么做呢

30:25.540 --> 30:26.540
很简单

30:26.540 --> 30:28.540
咱们把这些东西

30:28.540 --> 30:29.540
这些东西

30:29.540 --> 30:30.540
全部定义成接口

30:30.540 --> 30:31.540
一个接口

30:31.540 --> 30:32.540
火圈表演

30:32.540 --> 30:33.540
一个接口

30:33.540 --> 30:34.540
平衡表演

30:34.540 --> 30:35.540
一个接口

30:35.540 --> 30:36.540
智慧表演

30:37.540 --> 30:39.540
这里面我新建一个文件

30:39.540 --> 30:40.540
给它取名为

30:40.540 --> 30:41.540
interfaces

30:42.540 --> 30:43.540
TS

30:43.540 --> 30:44.540
或者是能力

30:44.540 --> 30:45.540
what can I do

30:45.540 --> 30:46.540
能力

30:47.540 --> 30:49.540
这里面我定义三个接口

30:49.540 --> 30:50.540
看用接口过后

30:50.540 --> 30:52.540
会变成会怎么样

30:52.540 --> 30:54.540
第一个接口是

30:54.540 --> 30:56.540
火圈表演

30:56.540 --> 30:58.540
fire show

30:58.540 --> 30:59.540
一般接口的话

30:59.540 --> 31:01.540
还有一种命名规范

31:01.540 --> 31:03.540
第一个字母来写上

31:03.540 --> 31:05.540
当然之前我没有强制说

31:05.540 --> 31:07.540
但是在有些公司里边

31:07.540 --> 31:08.540
或者是

31:08.540 --> 31:09.540
在有些语言里边

31:09.540 --> 31:11.540
它有这样一种规范

31:11.540 --> 31:13.540
当然要看你具体的公司

31:13.540 --> 31:14.540
到了公司里边

31:14.540 --> 31:15.540
他们是怎么规定的

31:15.540 --> 31:16.540
我这里比方说

31:16.540 --> 31:18.540
习惯上给接口

31:18.540 --> 31:20.540
给它一个手字母i

31:20.540 --> 31:21.540
表示interface

31:21.540 --> 31:22.540
表示是一个接口

31:22.540 --> 31:23.540
通过名字就可以看出

31:23.540 --> 31:24.540
它是个接口

31:24.540 --> 31:25.540
火圈表演

31:25.540 --> 31:26.540
你有两个函数

31:26.540 --> 31:29.540
single fire void

31:29.540 --> 31:30.540
这是一个函数

31:30.540 --> 31:31.540
你要实现的

31:31.540 --> 31:32.540
第二个函数

31:32.540 --> 31:34.540
是double fire

31:34.540 --> 31:36.540
双火圈表演

31:36.540 --> 31:38.540
我这里没有任何实现

31:38.540 --> 31:39.540
在接口里面

31:39.540 --> 31:40.540
我们之前讲过接口

31:40.540 --> 31:41.540
接口是不参与编译的

31:41.540 --> 31:43.540
编译结果里表面有

31:43.540 --> 31:44.540
所以说这些东西

31:44.540 --> 31:45.540
都不能写任何实现的

31:45.540 --> 31:46.540
只是表

31:46.540 --> 31:47.540
但是现在不一样了

31:47.540 --> 31:50.540
现在多了这么一个内形

31:50.540 --> 31:51.540
以前没有这个内形

31:51.540 --> 31:52.540
我不知道怎么来判断

31:52.540 --> 31:55.540
你是不是有火圈表演的能力

31:55.540 --> 31:56.540
那么现在多了这个接口

31:56.540 --> 31:57.540
我就知道了

31:57.540 --> 31:58.540
有这么一个内形

31:58.540 --> 31:59.540
我可以

31:59.540 --> 32:01.540
我可以通过这个内形来判断

32:01.540 --> 32:02.540
你有没有某种能力

32:02.540 --> 32:04.540
好了

32:04.540 --> 32:05.540
export

32:05.540 --> 32:06.540
下面再来

32:06.540 --> 32:07.540
再来定一个接口

32:07.540 --> 32:09.540
智慧表演

32:09.540 --> 32:12.540
wisdom show

32:12.540 --> 32:14.540
智慧表演

32:14.540 --> 32:16.540
智慧表演里边

32:16.540 --> 32:17.540
接口

32:17.540 --> 32:19.540
智慧表演里边有啥呢

32:19.540 --> 32:21.540
我看一下之前咋写的

32:21.540 --> 32:23.540
智慧表演

32:23.540 --> 32:27.540
算数题和跳舞

32:27.540 --> 32:28.540
接口里边来

32:28.540 --> 32:30.540
算数题

32:30.540 --> 32:33.540
跳舞

32:33.540 --> 32:35.540
还有什么表演呢

32:35.540 --> 32:37.540
平衡表演对吧

32:37.540 --> 32:40.540
balance

32:40.540 --> 32:43.540
平衡表演

32:43.540 --> 32:44.540
怎么老实去吧

32:44.540 --> 32:45.540
还写成函数

32:45.540 --> 32:47.540
平衡表演有什么呢

32:47.540 --> 32:49.540
我们看一下之前的

32:49.540 --> 32:51.540
独木桥和

32:51.540 --> 32:52.540
走钢丝

32:52.540 --> 32:54.540
独木桥

32:54.540 --> 32:56.920
当然接口里面

32:56.920 --> 32:57.920
能不能有属性

32:57.920 --> 32:58.920
当然可以有属性

32:58.920 --> 32:59.920
只不过在我们这个

32:59.920 --> 33:01.920
例子里边是没有属性的

33:01.920 --> 33:05.230
独木桥和走钢丝

33:05.230 --> 33:06.230
好了

33:06.230 --> 33:08.230
现在我定义了三个接口

33:08.230 --> 33:09.230
定义好了之后

33:09.230 --> 33:11.230
就表示我们系统中

33:11.230 --> 33:14.230
有三个东西来表示能力

33:14.230 --> 33:15.230
分别表示

33:15.230 --> 33:17.230
这里少许个i

33:17.230 --> 33:19.230
这里少许个i

33:19.230 --> 33:20.230
分别表示

33:20.230 --> 33:21.230
火圈表演

33:21.230 --> 33:22.230
智慧表演

33:22.230 --> 33:24.230
和平衡表演

33:24.230 --> 33:26.230
表达了有这么三种能力

33:26.230 --> 33:27.230
在我们系统中

33:27.230 --> 33:29.230
然后我们现在再回到

33:29.230 --> 33:31.230
这个内里边来

33:31.230 --> 33:33.230
现在

33:33.230 --> 33:35.230
这个傅内武先不看

33:35.230 --> 33:36.230
看纸的

33:36.230 --> 33:38.230
狮子是一只动物

33:38.230 --> 33:39.230
它描述了啥呢

33:39.230 --> 33:41.230
描述了

33:41.230 --> 33:43.230
这个狮子是什么

33:43.230 --> 33:45.230
但是它没有描述啥呢

33:45.230 --> 33:47.230
没有描述它有什么样的能力

33:47.230 --> 33:49.230
它没有把能力描述出来

33:49.230 --> 33:51.230
那么怎么来描述能力呢

33:51.230 --> 33:53.230
描述能力

33:53.230 --> 33:55.230
其实就是实现接口

33:55.230 --> 33:57.230
就是某个内

33:58.230 --> 33:59.230
某个内

33:59.230 --> 34:02.230
具有某种能力

34:02.230 --> 34:04.230
某种能力

34:05.230 --> 34:07.230
其实就是

34:07.230 --> 34:10.230
实现了某种接口

34:11.230 --> 34:13.230
就接口表达是这么一个含义

34:13.230 --> 34:14.230
你是不是拥有某种能力

34:14.230 --> 34:16.230
它是从另外一种方向来表达

34:16.230 --> 34:18.230
表达现实世界里面的一些场景

34:20.230 --> 34:21.230
那么这里呢

34:21.230 --> 34:23.230
我们要表达

34:23.230 --> 34:25.230
这个狮子拥有

34:25.230 --> 34:27.230
表演火圈的

34:27.230 --> 34:28.230
就是火圈表现的能力

34:28.230 --> 34:30.230
我们需要在这里就表达出来

34:30.230 --> 34:31.230
怎么表达呢

34:31.230 --> 34:33.230
这里通过implement

34:33.230 --> 34:35.230
通过实现

34:35.230 --> 34:36.230
implement什么意思啊

34:36.230 --> 34:38.230
就是实现的意思

34:38.230 --> 34:39.230
它要写到继承后边

34:39.230 --> 34:41.230
如果没有继承的话就直接这样子写

34:41.230 --> 34:43.230
如果有继承的话就写到继承后边

34:43.230 --> 34:45.230
表示implement

34:45.230 --> 34:46.230
实现了什么

34:46.230 --> 34:47.230
后边要写接口

34:47.230 --> 34:48.230
好接口呢

34:48.230 --> 34:49.230
什么接口

34:49.230 --> 34:51.230
火圈的能力

34:51.230 --> 34:53.230
iFireShow

34:53.230 --> 34:54.230
实现这个接口

34:55.230 --> 34:56.230
让它这里修复一下

34:56.230 --> 34:57.230
导入进来

34:58.230 --> 35:00.230
实现这个接口就意味着啥呢

35:00.230 --> 35:02.230
如果你这个狮子里边

35:02.230 --> 35:04.230
没有写这两个函数

35:04.230 --> 35:05.230
它是要抱错的

35:05.230 --> 35:06.230
它抱错的

35:06.230 --> 35:07.230
因为你说了

35:07.230 --> 35:08.230
你要有这个能力

35:08.230 --> 35:09.230
那这里面

35:09.230 --> 35:10.230
这个能力还要求你

35:10.230 --> 35:12.230
必须要能够表演

35:12.230 --> 35:13.230
单火圈

35:13.230 --> 35:14.230
必须要能够表演

35:14.230 --> 35:15.230
双火圈

35:15.230 --> 35:16.230
这就是强约数理

35:16.230 --> 35:17.230
你看到没

35:17.230 --> 35:18.230
之前第一个问题解决了

35:18.230 --> 35:20.230
对这些成员函数

35:20.230 --> 35:22.230
没有强约数理的问题解决了

35:22.230 --> 35:23.230
那么现在呢

35:23.230 --> 35:25.230
要求它有这么两个函数

35:25.230 --> 35:26.230
如果你忘了写

35:26.230 --> 35:27.230
它要抱错的

35:27.230 --> 35:28.230
你看点击修复

35:28.230 --> 35:29.230
实现接口

35:29.230 --> 35:30.230
还会把这两个函数给加上

35:30.230 --> 35:32.230
当然我们刚才已经写出来了

35:32.230 --> 35:33.230
已经写出来了

35:33.230 --> 35:35.230
如果这个函数冥写错了

35:35.230 --> 35:36.230
它也要抱错的

35:36.230 --> 35:37.230
它说你

35:37.230 --> 35:39.230
怎么少了一个成员呢

35:39.230 --> 35:40.230
少了一个成员

35:40.230 --> 35:41.230
不对呀

35:41.230 --> 35:42.230
还有一个single fire

35:42.230 --> 35:43.230
没有实现

35:43.230 --> 35:44.230
对吧

35:44.230 --> 35:45.230
它会进行提示

35:45.230 --> 35:47.230
强约数理这一块问题解决了

35:47.230 --> 35:48.230
因为这里不可能写错

35:48.230 --> 35:49.230
不可能写错的

35:49.230 --> 35:51.230
比方这里多了一个参数

35:51.230 --> 35:52.230
多了一个参数

35:52.230 --> 35:53.230
那也不行啊

35:53.230 --> 35:54.230
也不行

35:54.230 --> 35:56.230
这个地方是没有参数的

35:56.230 --> 35:58.230
这是强约数理

35:58.230 --> 36:00.230
好 同样的道理

36:00.230 --> 36:01.230
那么下面

36:01.230 --> 36:02.230
保护这里

36:02.230 --> 36:04.230
给它加上接口

36:04.230 --> 36:06.230
好 下面猴子这里呢

36:06.230 --> 36:07.230
给它加上接口

36:07.230 --> 36:08.230
那么猴子的接口呢

36:08.230 --> 36:10.230
是一个iwiston

36:10.230 --> 36:12.230
iwiston show

36:12.230 --> 36:13.230
是这样吗

36:13.230 --> 36:14.230
不是

36:14.230 --> 36:16.230
ibalance show

36:16.230 --> 36:17.230
好 狗呢

36:17.230 --> 36:18.230
给它加上接口

36:18.230 --> 36:21.230
iwiston show

36:21.230 --> 36:23.230
好 这里包错了

36:24.230 --> 36:25.230
包错了

36:25.230 --> 36:26.230
那说明

36:26.230 --> 36:27.230
咱们有函数

36:27.230 --> 36:29.230
实现了有问题

36:29.230 --> 36:30.230
我这里写的是挑舞

36:30.230 --> 36:31.230
对吧

36:31.230 --> 36:32.230
像这样的错误的话

36:32.230 --> 36:33.230
就可以避免

36:33.230 --> 36:34.230
因为它会不断的提示你

36:34.230 --> 36:35.230
这里有问题

36:35.230 --> 36:36.230
但是我觉得

36:36.230 --> 36:37.230
这种单词好一点吧

36:37.230 --> 36:39.230
用单词好一点

36:39.230 --> 36:41.230
把接口那边名字改一下

36:41.230 --> 36:43.230
用单词好一点

36:44.230 --> 36:45.230
好了 那么这边呢

36:45.230 --> 36:47.230
就完成了

36:47.230 --> 36:49.230
对内的描述

36:49.230 --> 36:50.230
描述这个内

36:50.230 --> 36:51.230
先不看它怎么去实现的

36:51.230 --> 36:52.230
这个不重要

36:52.230 --> 36:53.230
重要的是

36:53.230 --> 36:54.230
它通过这个内的描述

36:54.230 --> 36:55.230
就描述出来了

36:55.230 --> 36:57.230
这个东西是一个动物

36:57.230 --> 36:59.230
并且它具有某种能力

36:59.230 --> 37:01.230
具有某种能力

37:01.230 --> 37:02.230
看没

37:02.230 --> 37:03.230
就通过这么方式来描述出来了

37:03.230 --> 37:04.230
好了

37:04.230 --> 37:08.180
然后再回到这边

37:08.180 --> 37:09.180
好 现在到了这边

37:09.180 --> 37:11.180
这边该怎么来判断

37:11.180 --> 37:13.180
它是不是拥有某种能力呢

37:13.180 --> 37:14.180
就是A

37:14.180 --> 37:16.180
是否拥有

37:16.180 --> 37:18.180
跳

37:18.180 --> 37:21.180
跳火圈的能力

37:21.180 --> 37:23.180
好 这里我要说一下

37:23.180 --> 37:24.180
这里呢

37:24.180 --> 37:26.180
如果是

37:26.180 --> 37:28.180
传统的面向对向语言

37:28.180 --> 37:31.180
比方说java

37:31.180 --> 37:34.180
java里边是可以这样判断的

37:34.180 --> 37:36.180
instance

37:36.180 --> 37:37.180
什么呢

37:37.180 --> 37:39.180
I fire

37:39.180 --> 37:41.180
I fire show

37:41.180 --> 37:42.180
就是这个接口

37:42.180 --> 37:44.180
通过这个接口来判断

37:44.180 --> 37:46.180
java里边是可以通过这样判断的

37:46.180 --> 37:48.180
这样判断会非常的方便

37:48.180 --> 37:50.180
看一下你这个东西

37:50.180 --> 37:51.180
你这个内

37:51.180 --> 37:53.180
里边有没有实现这个接口

37:53.180 --> 37:55.180
就可以判断你有没有拥有这个能力了

37:55.180 --> 37:57.180
但是在很遗憾的是

37:57.180 --> 38:00.180
在ts里边不行

38:00.180 --> 38:01.180
为啥不行

38:01.180 --> 38:02.180
他们没办法

38:02.180 --> 38:04.180
为什么没办法

38:04.180 --> 38:06.180
因为这个代码是什么呀

38:06.180 --> 38:09.180
是在运行过程中才能判定的

38:09.180 --> 38:12.180
就是这个代码需要运行起来的

38:12.180 --> 38:14.180
而运行起来的时候

38:14.180 --> 38:15.180
接口还存不存在

38:15.180 --> 38:17.180
根本就不存在了

38:17.180 --> 38:19.180
代码在运行的过程中

38:19.180 --> 38:20.180
就不存在了

38:20.180 --> 38:22.180
不存在这个东西了

38:22.180 --> 38:24.180
所以说这就导致了这个问题

38:24.180 --> 38:25.180
导致了这个问题

38:25.180 --> 38:27.180
这个问题目前

38:27.180 --> 38:30.180
ts还没有一种很好的解决办法

38:30.180 --> 38:32.180
但它肯定可以解决

38:32.180 --> 38:34.180
可以通过一些方式来解决

38:34.180 --> 38:35.180
但是目前还没有找到一种

38:35.180 --> 38:37.180
特别好的解决办法

38:37.180 --> 38:39.180
因为在运行的过程中

38:39.180 --> 38:41.180
ts已经内行检查已经不存在了

38:41.180 --> 38:42.180
而这个地方

38:42.180 --> 38:45.180
又特别需要在运行的时候

38:45.180 --> 38:46.180
进行内行检查

38:46.180 --> 38:47.180
你看在判断

38:47.180 --> 38:48.180
判断是不是既然是运行的时候

38:48.180 --> 38:50.180
才会发生的代码

38:50.180 --> 38:51.180
对不对

38:51.180 --> 38:52.180
因此这里怎么办呢

38:52.180 --> 38:55.180
这里得这样做

38:55.180 --> 38:58.180
给大家讲一个就是ts里面

38:58.180 --> 39:00.180
一个新的概念

39:00.180 --> 39:03.180
叫做内行保护

39:03.180 --> 39:05.180
内行保护函数

39:05.180 --> 39:06.180
什么叫内行保护函数呢

39:06.180 --> 39:07.180
我们知道内行保护

39:07.180 --> 39:08.180
我们以前讲过的

39:08.180 --> 39:10.180
就是之前我们在判断

39:10.180 --> 39:11.180
男人的时候

39:11.180 --> 39:12.180
对吧

39:12.180 --> 39:13.180
当这样完成判断过后

39:13.180 --> 39:15.180
他会触发他的内行保护

39:15.180 --> 39:16.180
他觉得在这个判断

39:16.180 --> 39:17.180
如果违真的话

39:17.180 --> 39:19.180
如果这个判断违真的话

39:19.180 --> 39:21.180
那么就意味着

39:21.180 --> 39:22.180
这个里面的A

39:22.180 --> 39:24.180
一定是这个男人的内行

39:24.180 --> 39:26.180
他会触发在编译时探

39:26.180 --> 39:27.180
就是在写代码的时候

39:27.180 --> 39:28.180
他的内行保护

39:28.180 --> 39:29.180
那么这里的A

39:29.180 --> 39:31.180
就缩减成了更精准的内行

39:31.180 --> 39:32.180
男人

39:32.180 --> 39:33.180
有的时候

39:33.180 --> 39:34.180
我们要判断

39:34.180 --> 39:35.180
某一个东西

39:35.180 --> 39:36.180
是不是某一个内行

39:36.180 --> 39:37.180
可能需要经过

39:37.180 --> 39:39.180
更多的一些代码

39:39.180 --> 39:40.180
比方说我这里

39:40.180 --> 39:41.180
要在运行的时候

39:41.180 --> 39:42.180
怎么来判断

39:42.180 --> 39:43.180
他有没有这两个能力

39:43.180 --> 39:44.180
怎么来判断

39:44.180 --> 39:45.180
有没有这两个能力

39:45.180 --> 39:46.180
只能这样的写代码

39:46.180 --> 39:47.180
还能怎么样呢

39:47.180 --> 39:48.180
判断一下

39:48.180 --> 39:50.180
Single Fire

39:50.180 --> 39:51.180
Single Fire

39:51.180 --> 39:52.180
你有没有这个函数

39:52.180 --> 39:53.180
这个函数是不是存在

39:53.180 --> 39:55.180
并且Adder

39:55.180 --> 39:57.180
还有一个函数叫Double Fire

39:57.180 --> 39:58.180
看一下这两个函数

39:58.180 --> 40:01.180
你是不是存在这两个函数

40:01.180 --> 40:02.180
没办法

40:02.180 --> 40:03.180
只能这样的判断

40:03.180 --> 40:04.180
因为TS

40:04.180 --> 40:07.180
目前是一个精彩的内行监察

40:07.180 --> 40:09.180
他没有在运行时探

40:09.180 --> 40:10.180
有内行监察

40:10.180 --> 40:11.180
所以说

40:11.180 --> 40:12.180
这里没办法

40:12.180 --> 40:13.180
只能这样判断

40:13.180 --> 40:14.180
好 这里判断要爆出

40:14.180 --> 40:15.180
爆出的原因

40:15.180 --> 40:16.180
他就认为

40:16.180 --> 40:18.180
有可能是其他类型

40:18.180 --> 40:19.180
有可能是其他类型

40:19.180 --> 40:20.180
有可能是猴子

40:20.180 --> 40:23.180
可能是猴子

40:23.180 --> 40:24.180
可能是狗

40:24.180 --> 40:25.180
所以说

40:25.180 --> 40:26.180
他认为

40:26.180 --> 40:27.180
他有可能没有这两个属性

40:27.180 --> 40:28.180
因此

40:28.180 --> 40:29.180
你这样子写的

40:29.180 --> 40:30.180
要爆出的

40:30.180 --> 40:31.180
那这里怎么写呢

40:31.180 --> 40:32.180
我们可以用内行断言

40:32.180 --> 40:33.180
用内行断言

40:33.180 --> 40:35.180
二是

40:35.180 --> 40:36.180
二是什么

40:36.180 --> 40:38.180
I Fire Show

40:38.180 --> 40:39.180
用内行断言

40:39.180 --> 40:41.180
来进行这样的方式

40:41.180 --> 40:42.180
来进行书写

40:42.180 --> 40:43.180
然后内行断言过后

40:43.180 --> 40:44.180
他又爆出了

40:44.180 --> 40:45.180
所以说

40:45.180 --> 40:46.180
这里这一块

40:46.180 --> 40:47.180
目前没有一个

40:47.180 --> 40:49.180
非常完美的解决办法

40:49.180 --> 40:50.180
没有

40:50.180 --> 40:51.180
将来我希望

40:51.180 --> 40:53.180
TS能够把这一块问题修复

40:53.180 --> 40:54.180
因为所谓的

40:54.180 --> 40:55.180
边上对象

40:55.180 --> 40:56.180
后端语言

40:56.180 --> 40:57.180
这一块都是可以

40:57.180 --> 40:58.180
很轻松的判断的

40:58.180 --> 40:59.180
但目前他确实

40:59.180 --> 41:00.180
也没有办法

41:00.180 --> 41:01.180
因为他是

41:01.180 --> 41:02.180
静态的内行监察系统

41:02.180 --> 41:03.180
运行出来

41:03.180 --> 41:05.180
没有内行监察

41:05.180 --> 41:06.180
就导致了这一系列的问题

41:06.180 --> 41:07.180
好 这里

41:07.180 --> 41:08.180
他怎么回事呢

41:08.180 --> 41:09.180
他说

41:09.180 --> 41:10.180
你这个A

41:10.180 --> 41:11.180
现在可以确定

41:11.180 --> 41:13.180
他一定是一个animal内行

41:13.180 --> 41:14.180
但是animal内行

41:14.180 --> 41:15.180
它是里边

41:15.180 --> 41:17.180
是没有这两个内行的

41:17.180 --> 41:18.180
没有这两个函数的

41:18.180 --> 41:19.180
你这样做的话

41:19.180 --> 41:20.180
有可能

41:20.180 --> 41:21.180
他就在说

41:21.180 --> 41:22.180
你这样的内行断言

41:22.180 --> 41:23.180
可能会有危险的

41:23.180 --> 41:25.180
它不一定有这两个函数

41:25.180 --> 41:26.180
你这样的去断言

41:26.180 --> 41:27.180
所以他建议你

41:27.180 --> 41:29.180
如果你一定要这样做的话

41:29.180 --> 41:30.180
建议你手动去

41:30.180 --> 41:31.180
书写一个代码

41:31.180 --> 41:33.180
就是先把它断言

41:33.180 --> 41:34.180
成为一个关键字

41:34.180 --> 41:35.180
叫做Android

41:35.180 --> 41:36.180
位置的

41:36.180 --> 41:38.180
然后再把它断言成这个

41:39.180 --> 41:40.180
再把它断言成这个

41:40.180 --> 41:42.180
他为什么要要求这样子写呢

41:42.180 --> 41:43.180
他实际上通过你

41:43.180 --> 41:44.180
这种语法的形式

41:44.180 --> 41:46.180
你确实知道

41:46.180 --> 41:47.180
反复的提醒你

41:47.180 --> 41:48.180
不要犯错

41:48.180 --> 41:49.180
确实知道

41:49.180 --> 41:50.180
他确实

41:50.180 --> 41:51.180
我确实把它

41:51.180 --> 41:52.180
转换成这个内行

41:52.180 --> 41:53.180
要把它当成这个内行

41:53.180 --> 41:55.180
如果你直接这样子写的话

41:55.180 --> 41:56.180
就是有的时候

41:56.180 --> 41:57.180
我们写习惯了

41:57.180 --> 41:58.180
直接这样子一写

41:59.180 --> 42:01.180
都不去考虑后果

42:01.180 --> 42:02.180
会造成一些隐患

42:02.180 --> 42:03.180
他认为呢

42:03.180 --> 42:04.180
如果你这个A

42:04.180 --> 42:05.180
确实里面

42:05.180 --> 42:06.180
他没有这两个东西

42:06.180 --> 42:07.180
我推断出来

42:07.180 --> 42:08.180
他没有你这两个东西

42:08.180 --> 42:09.180
你是真的要把它

42:09.180 --> 42:10.180
转换吗

42:10.180 --> 42:12.180
就是相当于是给他确认一下

42:12.180 --> 42:13.180
给他确认一下

42:13.180 --> 42:14.180
我先把它转换成

42:14.180 --> 42:15.180
I'm the one

42:15.180 --> 42:16.180
I'm the one

42:16.180 --> 42:17.180
就是我位置对

42:17.180 --> 42:18.180
我不知道它是什么类型

42:18.180 --> 42:19.180
然后再把它转换成这个

42:20.180 --> 42:21.180
好吧

42:21.180 --> 42:22.180
那么这边也是一样

42:22.180 --> 42:23.180
这边也是一样

42:25.180 --> 42:26.180
进行内行断言

42:27.180 --> 42:28.180
那么这样子呢

42:28.180 --> 42:30.180
断言完成过后

42:30.180 --> 42:31.180
我这里可以判断

42:31.180 --> 42:32.180
当然一会编译结果

42:32.180 --> 42:33.180
我们可以看一下

42:33.180 --> 42:34.180
编译结果里面

42:34.180 --> 42:35.180
其实就是A.singlefire

42:35.180 --> 42:36.180
他没有这些东西

42:36.180 --> 42:37.180
没这些东西

42:37.180 --> 42:38.180
就是判断

42:38.180 --> 42:39.180
就这两个函数

42:39.180 --> 42:41.180
但是这样子一判断的话

42:41.180 --> 42:43.180
由于这个人的代码比较复杂

42:43.180 --> 42:45.180
他无法完成内行保护

42:45.180 --> 42:47.180
他无法智能的推断出

42:47.180 --> 42:49.180
20行和21行

42:49.180 --> 42:50.180
一定是

42:50.180 --> 42:52.180
一定是包含了这两个函数

42:52.180 --> 42:53.180
他推断不出来

42:53.180 --> 42:54.180
所以又会出

42:54.180 --> 42:55.180
有这么一个问题

42:55.180 --> 42:57.180
那么这一系列的问题呢

42:57.180 --> 43:00.180
怎么解决内行保护函数

43:00.180 --> 43:01.180
通过它来解决

43:01.180 --> 43:02.180
好

43:02.180 --> 43:04.180
我们来写这么一个内行保护函数

43:04.180 --> 43:06.180
写这么一个内行保护函数

43:06.180 --> 43:07.180
这个内行保护函数

43:07.180 --> 43:08.180
我们就写在这儿吧

43:08.180 --> 43:09.180
就写在这儿

43:09.180 --> 43:10.180
其实就是一个函数

43:10.180 --> 43:11.180
就是一个函数

43:11.180 --> 43:13.180
给他取个名字

43:13.180 --> 43:15.180
名字就叫做

43:15.180 --> 43:17.180
Is

43:17.180 --> 43:19.180
是不是拥有某种能力

43:19.180 --> 43:21.180
Is Fire Show

43:21.180 --> 43:23.180
这么一个函数

43:23.180 --> 43:25.180
传一个对象进来

43:25.180 --> 43:27.880
Animo

43:27.880 --> 43:28.880
内行是Animo

43:28.880 --> 43:29.880
传一个对象进来

43:29.880 --> 43:30.880
好

43:30.880 --> 43:32.880
这个函数的返回指是什么呢

43:32.880 --> 43:33.880
返回内行是什么呢

43:33.880 --> 43:36.880
这个返回内行比较特殊

43:36.880 --> 43:37.880
返回内行

43:37.880 --> 43:38.880
这样子写的

43:38.880 --> 43:39.880
它判断的是一个东西

43:39.880 --> 43:40.880
判断什么东西

43:40.880 --> 43:42.880
判断的是这个参数

43:42.880 --> 43:44.880
参数

43:44.880 --> 43:45.880
意识

43:45.880 --> 43:46.880
用这个意识关键字

43:46.880 --> 43:48.880
是不是某一个内行

43:48.880 --> 43:49.880
什么内行

43:49.880 --> 43:51.880
Is Fire Show

43:51.880 --> 43:53.880
判断的是这个东西

43:53.880 --> 43:55.880
判断的是这个东西

43:55.880 --> 43:56.880
是不是这个内行

43:56.880 --> 43:58.880
如果这个函数返回去

43:58.880 --> 44:00.880
如果这个函数返回去

44:00.880 --> 44:01.880
就表示的是

44:01.880 --> 44:04.880
这个参数是这个内行

44:04.880 --> 44:06.880
它就会触发内行保护

44:06.880 --> 44:07.880
好

44:07.880 --> 44:08.880
如果返回的是Force

44:08.880 --> 44:09.880
那么表示这个参数

44:09.880 --> 44:10.880
不是这个内行

44:10.880 --> 44:11.880
好

44:11.880 --> 44:12.880
我们来判断一下

44:12.880 --> 44:13.880
那么怎么判断呢

44:13.880 --> 44:16.880
就是这里的写法

44:16.880 --> 44:17.880
把这个A

44:17.880 --> 44:20.880
干成Animo

44:20.880 --> 44:24.220
把这个A

44:24.220 --> 44:26.220
干成Animo

44:26.220 --> 44:27.220
好

44:27.220 --> 44:28.220
如果这个判断为真

44:28.220 --> 44:29.220
如果这个判断为真

44:29.220 --> 44:31.220
我就返回去

44:31.220 --> 44:32.220
A else

44:32.220 --> 44:33.220
我就返回家

44:33.220 --> 44:35.220
Force

44:35.220 --> 44:36.220
好

44:36.220 --> 44:37.220
好

44:37.220 --> 44:38.220
但是呢

44:39.220 --> 44:40.220
它还是老问题

44:40.220 --> 44:41.220
什么老问题呢

44:41.220 --> 44:42.220
它觉得

44:42.220 --> 44:44.220
这个贴是觉得

44:44.220 --> 44:45.220
你这个东西是不可能

44:45.220 --> 44:46.220
成为这个内行的

44:46.220 --> 44:47.220
你干嘛

44:47.220 --> 44:48.220
你在干嘛

44:48.220 --> 44:49.220
你这样子的写法

44:49.220 --> 44:50.220
是不是要出问题

44:50.220 --> 44:51.220
它说

44:51.220 --> 44:52.220
你这个Animo

44:52.220 --> 44:53.220
这是个Animo内行

44:53.220 --> 44:55.220
Animo内行是怎么可能

44:55.220 --> 44:56.220
它里面有

44:56.220 --> 44:57.220
Is Fire Show

44:57.220 --> 44:58.220
这里面的东西呢

44:58.220 --> 45:00.220
就是我这个能力里面

45:00.220 --> 45:01.220
有这么两个函数

45:01.220 --> 45:02.220
看到没

45:02.220 --> 45:03.220
有这么两个函数

45:03.220 --> 45:05.220
但是你这个Animo里面

45:05.220 --> 45:06.220
是不可能有这两个函数的

45:06.220 --> 45:07.220
因为Animo内行

45:07.220 --> 45:08.220
我们都知道

45:08.220 --> 45:10.220
Animo内行只有这些东西

45:10.220 --> 45:11.220
对吧

45:11.220 --> 45:12.220
它没有这两个函数

45:12.220 --> 45:13.220
所以说你它在问你

45:13.220 --> 45:14.220
你这样做

45:14.220 --> 45:15.220
到底对不对

45:15.220 --> 45:16.220
你这样做

45:16.220 --> 45:17.220
是不是要出问题

45:17.220 --> 45:18.220
因为它就不知道

45:18.220 --> 45:19.220
这个Animo

45:19.220 --> 45:20.220
它后面还有指内

45:20.220 --> 45:22.220
它还有指内内行

45:22.220 --> 45:23.220
它不知道的

45:23.220 --> 45:25.220
所以说这个怎么办呢

45:25.220 --> 45:26.220
那么这里

45:26.220 --> 45:27.220
我们好好想一想

45:27.220 --> 45:29.220
这里其实是我们想错了

45:29.220 --> 45:31.220
我们想错了

45:31.220 --> 45:33.220
你看一下

45:33.220 --> 45:34.220
这个东西

45:34.220 --> 45:35.220
我们要判断

45:35.220 --> 45:36.220
是不是这个内行

45:36.220 --> 45:38.220
它一定要吃动物吗

45:38.220 --> 45:40.220
一定要吃动物吗

45:40.220 --> 45:42.220
什么东西拥有某种能力

45:42.220 --> 45:43.220
那人能不能拥有某种能力

45:43.220 --> 45:44.220
我人也可以跳火圈

45:44.220 --> 45:46.220
任何东西都可以

45:46.220 --> 45:48.220
干嘛一定要吃动物呢

45:48.220 --> 45:49.220
所以说这里

45:49.220 --> 45:50.220
我们通常来判断

45:50.220 --> 45:51.220
在进行

45:51.220 --> 45:53.220
这个内行保护的时候

45:53.220 --> 45:55.220
写这么内行保护函数的时候

45:55.220 --> 45:56.220
如果要判断成

45:56.220 --> 45:57.220
它是不是

45:57.220 --> 45:58.220
某一个接口的时候

45:58.220 --> 45:59.220
我们通常呢

45:59.220 --> 46:00.220
这里直接写

46:00.220 --> 46:01.220
哦不接个字

46:01.220 --> 46:03.220
你直接给我个对象就行了

46:03.220 --> 46:04.220
直接给我个对象

46:04.220 --> 46:05.220
我判断那个对象

46:05.220 --> 46:08.220
是不是拥有某种能力

46:08.220 --> 46:10.220
不用去写具体的内行

46:10.220 --> 46:11.220
我其实

46:11.220 --> 46:12.220
我在这里判断了

46:12.220 --> 46:13.220
判断就是这个对象里边

46:13.220 --> 46:14.220
有没有啥

46:14.220 --> 46:16.220
有没有这个single fire

46:16.220 --> 46:17.220
有没有啥

46:17.220 --> 46:19.220
有没有这个double fire

46:19.220 --> 46:20.220
我就判断这个东西

46:20.220 --> 46:21.220
对吧

46:21.220 --> 46:22.220
我不用去关心它里边的

46:22.220 --> 46:23.220
什么内行

46:23.220 --> 46:24.220
这是这个场景

46:24.220 --> 46:26.220
不一定适合于所有的场景

46:26.220 --> 46:28.220
我写了这么一个

46:28.220 --> 46:30.220
内行保护函数过后

46:30.220 --> 46:31.220
这里听到有点冰

46:31.220 --> 46:32.220
对吧没关系

46:32.220 --> 46:33.220
我讲完了过后

46:33.220 --> 46:36.220
我再来好好解释一下

46:36.220 --> 46:37.220
fire show

46:37.220 --> 46:38.220
我这里可以判断了

46:38.220 --> 46:42.220
把这个AZN进去

46:42.220 --> 46:43.220
好这样你判断

46:43.220 --> 46:47.230
你看一下就完了

46:47.230 --> 46:48.230
我们先看一下

46:48.230 --> 46:50.230
编译的结果是什么

46:50.230 --> 46:52.230
我们从编译的结果上理解

46:52.230 --> 46:55.610
从编译的结果上理解

46:55.610 --> 46:57.610
你看就是答案已经正确了

46:57.610 --> 46:58.610
我没有关心

46:58.610 --> 46:59.610
它到底是失责

46:59.610 --> 47:00.610
还是老虎

47:00.610 --> 47:01.610
无所谓的

47:01.610 --> 47:02.610
只要你会跳火圈

47:02.610 --> 47:03.610
那么你就去跳

47:03.610 --> 47:05.610
我管理是啥呢

47:05.610 --> 47:06.610
我们来看一下

47:06.610 --> 47:08.610
最多生成的代码

47:08.610 --> 47:09.610
NPN

47:09.610 --> 47:15.420
ZoomBuild

47:15.420 --> 47:18.420
看一下最多生成的代码

47:18.420 --> 47:19.420
这里

47:19.420 --> 47:20.420
讲了一些动物

47:20.420 --> 47:21.420
你看这个函数

47:21.420 --> 47:22.420
High Fire Show

47:22.420 --> 47:25.420
变成了一个非常非常普通的函数

47:25.420 --> 47:27.420
这个函数里判断的是啥呢

47:27.420 --> 47:28.420
判断的是这个堆箱里边

47:28.420 --> 47:30.420
有没有这两个函数

47:30.420 --> 47:31.420
有这两个函数表示

47:31.420 --> 47:32.420
你能跳火圈

47:32.420 --> 47:33.420
没有这两个函数

47:33.420 --> 47:36.420
表示你不能跳火圈

47:36.420 --> 47:38.420
因此这里在循环动物的时候

47:38.420 --> 47:39.420
你看

47:39.420 --> 47:41.420
我只要拿到每个动物

47:41.420 --> 47:43.420
我看一下你能不能跳火圈

47:43.420 --> 47:45.420
能不能有火圈表演

47:45.420 --> 47:47.420
有的话我就去进行火圈表演

47:47.420 --> 47:49.420
现在这个语异的话

47:49.420 --> 47:51.420
是不是顺畅多了

47:51.420 --> 47:52.420
对不对

47:52.420 --> 47:54.420
就顺畅了很多

47:54.420 --> 47:55.420
然后再来过来解

47:55.420 --> 47:56.420
回过头来解释

47:56.420 --> 47:57.420
这是什么东西

47:57.420 --> 47:59.420
再来解释一遍

47:59.420 --> 48:01.420
我这里要判断

48:01.420 --> 48:03.420
是不是你有某种能力

48:03.420 --> 48:04.420
本来呢

48:04.420 --> 48:06.420
本来应该是怎么判断的呢

48:06.420 --> 48:07.420
本来应该是

48:07.420 --> 48:09.420
按这种方式判断的

48:09.420 --> 48:11.420
I Fire Show

48:11.420 --> 48:13.420
这种方式是最容易理解

48:13.420 --> 48:14.420
最简单的写法

48:14.420 --> 48:15.420
但是遗憾的是

48:15.420 --> 48:17.420
现在TS

48:17.420 --> 48:19.420
他没有办法写这种代码

48:19.420 --> 48:21.420
因为TS里边呢

48:21.420 --> 48:23.420
他在运行的时候

48:23.420 --> 48:25.420
结果已经不存在了

48:25.420 --> 48:26.420
这东西已经不存在了

48:26.420 --> 48:27.420
而这个代码是会到

48:27.420 --> 48:29.420
编译结果里边了

48:29.420 --> 48:30.420
他会到编译结果里边

48:30.420 --> 48:31.420
所以说

48:31.420 --> 48:32.420
到编结果里面

48:32.420 --> 48:33.420
这个东西不存在的

48:33.420 --> 48:34.420
他不允许你这样子写

48:34.420 --> 48:36.420
而这样写要出问题的

48:36.420 --> 48:37.420
因为到编译结果里面

48:37.420 --> 48:38.420
没有接口

48:38.420 --> 48:39.420
没有接口的东西

48:39.420 --> 48:40.420
你看编译结果里面

48:40.420 --> 48:41.420
这里有啥

48:41.420 --> 48:42.420
啥都没有

48:42.420 --> 48:44.420
接口的什么都没有了

48:44.420 --> 48:45.420
因此在TS里面

48:45.420 --> 48:47.420
确实有这个问题存在

48:47.420 --> 48:49.420
他这里没有办法这样子写

48:49.420 --> 48:50.420
如果是加碼语言

48:50.420 --> 48:51.420
如果是cshop语言

48:51.420 --> 48:52.420
直接就这样子写了

48:52.420 --> 48:54.420
没有任何问题

48:54.420 --> 48:55.420
因为现在TS呢

48:55.420 --> 48:57.420
缺少在运行时代的内行检查

48:57.420 --> 48:59.420
所以说他没法这样子写

48:59.420 --> 49:01.420
没法这样子写怎么办呢

49:01.420 --> 49:03.420
我们就需要一个函数

49:03.420 --> 49:05.420
来帮助我们来判断

49:05.420 --> 49:07.420
他是不是拥有某种能力

49:07.420 --> 49:09.420
这个函数需要在运行的过程中检查

49:09.420 --> 49:11.420
在运行的过程中来进行检查

49:11.420 --> 49:14.420
他是不是拥有某种能力

49:14.420 --> 49:16.420
好那么这个函数呢

49:16.420 --> 49:17.420
我需要

49:17.420 --> 49:18.420
这个函数要返回个结果

49:18.420 --> 49:19.420
他是不是拥有某种能力

49:19.420 --> 49:22.420
我需要让TS编辑器

49:22.420 --> 49:23.420
编译器知道

49:23.420 --> 49:24.420
如果他有

49:24.420 --> 49:26.420
我就能够把它推断出什么内行

49:26.420 --> 49:28.420
就像刚才的样子

49:28.420 --> 49:29.420
刚才的样子

49:29.420 --> 49:30.420
你看

49:30.420 --> 49:32.420
我这个函数这样的过程很神奇

49:32.420 --> 49:34.420
这个A本来是一个animal内行

49:34.420 --> 49:35.420
本来是个animal内行

49:35.420 --> 49:36.420
animal内行里面

49:36.420 --> 49:37.420
它是没有这两个函数的

49:37.420 --> 49:38.420
它是要爆错的

49:38.420 --> 49:40.420
但是我经过了这个函数判断之后

49:40.420 --> 49:41.420
你看

49:41.420 --> 49:42.420
它识别出来

49:42.420 --> 49:43.420
A

49:43.420 --> 49:45.420
识别A的时候呢

49:45.420 --> 49:47.420
识别这个A的时候呢

49:47.420 --> 49:49.420
它就能够把它识别成为

49:49.420 --> 49:50.420
iFireShow

49:50.420 --> 49:52.420
能够把它识别成为这个内行

49:52.420 --> 49:54.420
它认为它具有了这个内行

49:54.420 --> 49:55.420
它用了一个交叉内行

49:55.420 --> 49:56.420
也就是它这里面

49:56.420 --> 49:58.420
它认为A它既是animal

49:58.420 --> 50:00.420
因为这里它推断出来是animal

50:00.420 --> 50:01.420
并且呢

50:01.420 --> 50:02.420
它又是一个什么内行呢

50:02.420 --> 50:04.420
又是一个iFireShow

50:04.420 --> 50:06.420
它又具有火圈表演的能力

50:06.420 --> 50:08.420
又具有这个能力

50:08.420 --> 50:09.420
它能推断出来

50:09.420 --> 50:11.420
怎么能够让它推断出来呢

50:11.420 --> 50:13.420
就必须要在这个函数上做文章

50:13.420 --> 50:16.420
这个函数的返回结果要标注一下

50:16.420 --> 50:18.420
我这个函数返回的结果呢

50:18.420 --> 50:20.420
可以帮你判断

50:20.420 --> 50:22.420
帮助TS来判断

50:22.420 --> 50:24.420
它是否具有某种

50:24.420 --> 50:26.420
是否是某一个内行

50:26.420 --> 50:27.420
通过这个表达是

50:27.420 --> 50:29.420
高速TS

50:29.420 --> 50:30.420
我这个函数干嘛

50:30.420 --> 50:32.420
是在判断它的内行呢

50:32.420 --> 50:34.420
只在编译期间起作用

50:34.420 --> 50:35.420
在运行的时候

50:35.420 --> 50:37.420
这些东西全部消失了

50:37.420 --> 50:39.420
只在编译期间起作用

50:39.420 --> 50:41.420
于是TS编译期看到

50:41.420 --> 50:43.420
你这个函数在判断

50:43.420 --> 50:44.420
你看

50:44.420 --> 50:45.420
在判断

50:45.420 --> 50:46.420
这个东西是不是这个东西

50:46.420 --> 50:47.420
是不是这个东西

50:47.420 --> 50:48.420
它做这么一个判断

50:48.420 --> 50:49.420
它就知道了

50:49.420 --> 50:50.420
如果这个判断为真

50:50.420 --> 50:52.420
那么我就可以把这个内行呢

50:52.420 --> 50:53.420
给它加上

50:53.420 --> 50:54.420
到了衣服的代码里边

50:54.420 --> 50:56.420
我就可以给它加上

50:56.420 --> 50:58.420
以前在用Instance

50:58.420 --> 51:00.420
和Type Ofs的时候

51:00.420 --> 51:02.420
我们没有做任何的特殊处理

51:02.420 --> 51:03.420
因为它是自动完成的

51:03.420 --> 51:05.420
这个内行保护是自动完成的

51:05.420 --> 51:06.420
但是到了这里

51:06.420 --> 51:09.420
这个内行保护需要我们手动完成的

51:09.420 --> 51:10.420
手动的高速TS

51:10.420 --> 51:12.420
我这个函数就是在判断

51:12.420 --> 51:13.420
它是不是这个内行

51:13.420 --> 51:15.420
如果这个函数反会为真

51:15.420 --> 51:16.420
那么说明它一定是这个内行

51:16.420 --> 51:17.420
我就会把

51:17.420 --> 51:19.420
TS编译期就会把内行加上

51:19.420 --> 51:21.420
于是下面写的代码

51:21.420 --> 51:23.420
就不会爆错了

51:23.420 --> 51:26.420
好好理解一下这一块东西

51:26.420 --> 51:27.420
其实这里是 over 写的

51:27.420 --> 51:29.420
那么这里就没有必要写港的文了

51:29.420 --> 51:31.420
就没有必要写了

51:31.420 --> 51:34.420
它就不会有这个问题了

51:34.420 --> 51:37.420
写完了之后

51:37.420 --> 51:39.420
当然这里也可以写成什么

51:39.420 --> 51:40.420
写成 n 粒

51:40.420 --> 51:41.420
也可以写成 n 粒

51:41.420 --> 51:42.420
一样的

51:42.420 --> 51:43.420
写成 n 粒的话

51:43.420 --> 51:45.420
连这个都不用写了

51:45.420 --> 51:48.420
当然如果获得完整的智能提示的话

51:48.420 --> 51:50.420
你还是把写上

51:50.420 --> 51:52.420
写 over 写的好一点

51:52.420 --> 51:53.420
n 粒的话

51:53.420 --> 51:54.420
它可能会传一些字无串的一段

51:54.420 --> 51:55.420
去把它写

51:55.420 --> 51:56.420
好了

51:56.420 --> 51:58.420
这样子写到有什么好处

51:58.420 --> 52:00.420
虽然我们多写了一点代码

52:00.420 --> 52:01.420
但是有什么好处

52:01.420 --> 52:02.420
大家看一下

52:02.420 --> 52:06.420
今后我们要改变

52:06.420 --> 52:07.420
你看着

52:07.420 --> 52:08.420
我说

52:08.420 --> 52:09.420
师子

52:09.420 --> 52:11.420
师子你不能进行火圈表演了

52:11.420 --> 52:12.420
你退休了

52:12.420 --> 52:14.420
你不要进行火圈表演了

52:14.420 --> 52:17.920
把师子的火圈表演去掉

52:17.920 --> 52:19.920
你看我只需要改动这里

52:19.920 --> 52:20.920
就完事了

52:20.920 --> 52:22.920
我这边动不动

52:22.920 --> 52:23.920
这边需不需要动

52:23.920 --> 52:25.920
不需要动

52:25.920 --> 52:26.920
来运行一下

52:26.920 --> 52:28.920
一行代码都不敢

52:28.920 --> 52:29.920
因为现在我们判断了

52:29.920 --> 52:32.920
它是否能完成火圈表演

52:32.920 --> 52:33.920
跟它具体是什么动物

52:33.920 --> 52:35.920
没有任何关系

52:35.920 --> 52:36.920
你只要拥有这个能力

52:36.920 --> 52:37.920
你就去火圈表演

52:37.920 --> 52:39.920
我管你是什么动物

52:39.920 --> 52:40.920
跟我没关系

52:40.920 --> 52:41.920
再来

52:41.920 --> 52:43.920
比方说有一天

52:43.920 --> 52:44.920
这些动物

52:44.920 --> 52:46.920
师子里面

52:46.920 --> 52:48.920
这个猴子

52:48.920 --> 52:49.920
也能完成火圈表演了

52:49.920 --> 52:51.920
我给猴子加上

52:51.920 --> 52:53.920
并且它让猴子去实现那个接口

52:53.920 --> 52:55.920
接口可以实现多个的

52:55.920 --> 52:56.920
可以实现多个接口

52:56.920 --> 52:57.920
iFire Show

52:57.920 --> 52:59.920
去实现那个接口

52:59.920 --> 53:00.920
保存一下

53:00.920 --> 53:01.920
这边

53:01.920 --> 53:03.920
看一下

53:03.920 --> 53:05.920
猴子也能够完成火圈表演了

53:05.920 --> 53:07.920
这就是它的好处

53:07.920 --> 53:09.920
我们把那一行

53:09.920 --> 53:11.920
就是把它的能力

53:11.920 --> 53:12.920
和那一行的偶和

53:12.920 --> 53:14.920
它之前的偶和

53:14.920 --> 53:16.920
给它分离开了

53:16.920 --> 53:17.920
能力是能力

53:17.920 --> 53:19.920
那一行是内行

53:20.920 --> 53:22.920
某个内行可以拥有某个能力

53:22.920 --> 53:24.920
也可以没有这个能力

53:24.920 --> 53:26.920
它是可以随意组合的

53:27.920 --> 53:28.920
所以说

53:28.920 --> 53:30.920
现在我们在写代码的时候

53:30.920 --> 53:32.920
有的时候我只关心它

53:32.920 --> 53:33.920
有没有什么能力

53:33.920 --> 53:34.920
而不用关心它

53:34.920 --> 53:36.920
是不是某一个师子

53:36.920 --> 53:38.920
是不是某个老虎

53:38.920 --> 53:39.920
具体是某个内行

53:39.920 --> 53:40.920
我不关心

53:40.920 --> 53:42.920
我只关心它有没有能力

53:42.920 --> 53:43.920
比方说我们再来一次

53:43.920 --> 53:44.920
再来一次

53:44.920 --> 53:45.920
我们再写一个

53:45.920 --> 53:47.920
这是让所有的

53:47.920 --> 53:48.920
发生表演的动物

53:48.920 --> 53:49.920
完成火圈表演

53:49.920 --> 53:50.920
我们再来一个

53:51.920 --> 53:53.920
所有

53:53.920 --> 53:54.920
会

53:54.920 --> 53:55.920
什么呢

53:55.920 --> 53:56.920
会

53:56.920 --> 53:58.920
智慧表演的

53:58.920 --> 54:01.920
智慧表演的动物

54:01.920 --> 54:03.920
完成智慧表演

54:04.920 --> 54:05.920
再写这么一个

54:05.920 --> 54:06.920
同样的

54:06.920 --> 54:07.920
需要一个函数

54:07.920 --> 54:08.920
再判断一下

54:08.920 --> 54:10.920
Heist, Wisdom

54:10.920 --> 54:11.920
Show

54:11.920 --> 54:12.920
是不是有

54:12.920 --> 54:15.920
智慧表演的能力

54:15.920 --> 54:16.920
给我一个Object

54:16.920 --> 54:17.920
我来进行判断

54:17.920 --> 54:18.920
Any

54:20.920 --> 54:21.920
Is

54:21.920 --> 54:22.920
I

54:23.920 --> 54:24.920
叫什么

54:24.920 --> 54:25.920
Wisdom Show

54:25.920 --> 54:26.920
OK

54:26.920 --> 54:27.920
那么判断的方式一样

54:27.920 --> 54:28.920
一样

54:28.920 --> 54:29.920
Any点

54:30.920 --> 54:31.920
断言一下

54:31.920 --> 54:33.920
是I Wisdom Show

54:33.920 --> 54:34.920
看一下你一边的

54:34.920 --> 54:36.920
Dance的适合存在

54:36.920 --> 54:37.920
并且判断一下

54:37.920 --> 54:38.920
Any

54:38.920 --> 54:39.920
是

54:39.920 --> 54:40.920
I Wisdom Show

54:42.920 --> 54:43.920
算数体是不是存在

54:43.920 --> 54:45.920
如果这两个存在的话

54:45.920 --> 54:46.920
返回处

54:46.920 --> 54:47.920
OK

54:47.920 --> 54:48.920
返回Force

54:49.920 --> 54:50.920
好了

54:50.920 --> 54:51.920
写好这么两个之后

54:51.920 --> 54:52.920
我们再来看

54:52.920 --> 54:53.920
Animals

54:53.920 --> 54:55.920
你看这个语音就非常清晰了

54:55.920 --> 54:57.920
for一起循环

54:57.920 --> 54:59.920
让所有会智慧表演的动物

54:59.920 --> 55:00.920
完成智慧表演

55:00.920 --> 55:01.920
我管你是什么动物

55:01.920 --> 55:04.920
只要你拥有智慧表演的能力

55:04.920 --> 55:06.920
你就去完成智慧表演

55:07.920 --> 55:08.920
算数体

55:10.920 --> 55:11.920
然后

55:13.920 --> 55:14.920
Dance

55:16.920 --> 55:17.920
保存

55:19.920 --> 55:20.920
完成了火箭表演之后

55:20.920 --> 55:23.920
又完成了智慧表演

55:23.920 --> 55:25.920
明白这个意思吗

55:25.920 --> 55:26.920
OK

55:26.920 --> 55:28.920
这里有两个动物

55:28.920 --> 55:29.920
完成智慧表演

55:29.920 --> 55:30.920
是两个吗

55:30.920 --> 55:31.920
我看一下

55:31.920 --> 55:32.920
Wisdom Show

55:32.920 --> 55:33.920
有两个动物

55:33.920 --> 55:34.920
有两只狗

55:34.920 --> 55:35.920
有两只狗

55:35.920 --> 55:36.920
两只狗都有完成的

55:36.920 --> 55:37.920
有两只狗

55:37.920 --> 55:39.920
各有本身具有智慧表演的能力

55:39.920 --> 55:40.920
所以说

55:40.920 --> 55:41.920
他这里有两只狗

55:41.920 --> 55:42.920
都做了智慧表演

55:42.920 --> 55:43.920
因此

55:43.920 --> 55:44.920
我们在开发的过程中

55:44.920 --> 55:45.920
写单码的过程中

55:45.920 --> 55:47.920
我就在某些场景下面

55:47.920 --> 55:48.920
我就不用去关心你

55:48.920 --> 55:49.920
到底是什么内容

55:49.920 --> 55:50.920
你只要用了某种能力

55:50.920 --> 55:52.920
你就去做这些强硬的事情

55:52.920 --> 55:53.920
这就是接口

55:53.920 --> 55:55.920
它带来的好处

55:55.920 --> 55:56.920
好了

55:56.920 --> 55:57.920
当然我们可以把

55:57.920 --> 55:58.920
这两个函数

55:58.920 --> 55:59.920
这两个函数是跟

55:59.920 --> 56:01.920
判断某个接口相关的函数

56:01.920 --> 56:02.920
其实这个函数

56:02.920 --> 56:03.920
我也可以把它写到这个

56:03.920 --> 56:04.920
接口这里

56:04.920 --> 56:05.920
写到这边也可以

56:05.920 --> 56:07.920
这也是一种常见的做法

56:07.920 --> 56:08.920
这个函数

56:08.920 --> 56:09.920
我把剪切

56:09.920 --> 56:11.920
把粘贴过来

56:11.920 --> 56:14.680
粘贴过来

56:14.680 --> 56:15.680
然后呢

56:15.680 --> 56:16.680
刚才的函数

56:16.680 --> 56:17.680
也是

56:17.680 --> 56:18.680
剪切

56:18.680 --> 56:23.380
粘贴过来

56:23.380 --> 56:24.380
那么这边

56:24.380 --> 56:27.880
就导入小英的接口就完成了

56:27.880 --> 56:28.880
好

56:28.880 --> 56:29.880
这是这一块的知识

56:29.880 --> 56:30.880
这一块的知识有点难度

56:30.880 --> 56:31.880
它有点绕

56:31.880 --> 56:32.880
特别是

56:32.880 --> 56:34.880
在这个位置有点绕

56:34.880 --> 56:36.880
它是设计到一个东西叫做

56:36.880 --> 56:38.880
内情保护函数

56:38.880 --> 56:39.880
通过函函数

56:39.880 --> 56:40.880
记一下吧

56:40.880 --> 56:43.880
通过函函数的反

56:43.880 --> 56:45.880
通过调用函函数

56:45.880 --> 56:47.880
会触发

56:47.880 --> 56:49.880
会触发什么呢

56:49.880 --> 56:52.880
TS的内情保护

56:52.880 --> 56:53.880
这个函数

56:53.880 --> 56:54.880
它一定要反回一个处

56:54.880 --> 56:55.880
或者是反回Force

56:55.880 --> 56:57.880
那么通过这个函数的描述

56:57.880 --> 56:59.880
它可以触发内情保护

56:59.880 --> 57:01.880
如果函数反回处

57:01.880 --> 57:02.880
那么

57:02.880 --> 57:03.880
用的时候

57:03.880 --> 57:04.880
如果函数反回处

57:04.880 --> 57:06.880
它就会把这个内情

57:06.880 --> 57:07.880
给这个A加上

57:07.880 --> 57:08.880
加上这个内情

57:08.880 --> 57:10.880
来完成内情的推导

57:10.880 --> 57:11.880
看一下你这里写的

57:11.880 --> 57:12.880
是不是正确了

57:12.880 --> 57:13.880
这就是内情保护

57:13.880 --> 57:15.880
这就是内情保护

57:15.880 --> 57:17.880
函函数必须反回Force

57:17.880 --> 57:21.880
函函数必须反回Force

57:21.880 --> 57:23.880
好,这是这一块的知识

57:23.880 --> 57:24.880
就是关于

57:24.880 --> 57:26.880
接口这一块的知识

57:26.880 --> 57:27.880
那么接口

57:27.880 --> 57:28.880
现在我们的学校

57:28.880 --> 57:29.880
学校这一块之后

57:29.880 --> 57:31.880
我们就可以知道了

57:31.880 --> 57:35.880
接口和内情别名

57:35.880 --> 57:36.880
就是Type

57:36.880 --> 57:39.880
的最大区别在哪呢

57:39.880 --> 57:44.880
接口可以被内实现

57:44.880 --> 57:47.880
而内情别名不可以

57:47.880 --> 57:49.880
内情别名是不能跟内

57:49.880 --> 57:50.880
进行联用的

57:50.880 --> 57:52.880
而接口是可以被内实现的

57:52.880 --> 57:53.880
当然

57:53.880 --> 57:54.880
现在TS

57:54.880 --> 57:56.880
一个最大的问题就是

57:56.880 --> 57:58.880
它是静态的内情检查系统

57:58.880 --> 57:59.880
它在运行的过程中

57:59.880 --> 58:01.880
是没有内情检查的

58:01.880 --> 58:02.880
没有任何的内情检查

58:02.880 --> 58:03.880
因此

58:03.880 --> 58:04.880
这里

58:04.880 --> 58:05.880
你要像加拿大

58:05.880 --> 58:06.880
是下巴那样子写

58:06.880 --> 58:07.880
就不行

58:07.880 --> 58:08.880
必须要用这种写法

58:08.880 --> 58:10.880
这是它的一个缺陷

58:10.880 --> 58:11.880
但是至少

58:11.880 --> 58:13.880
比没有内情检查系统

58:13.880 --> 58:15.880
要好的太多太多了

58:15.880 --> 58:16.880
对吧

58:16.880 --> 58:17.880
好了

58:17.880 --> 58:18.880
这是关于

58:18.880 --> 58:20.880
接口的这一块知识

58:20.880 --> 58:22.880
后边我再说一个

58:22.880 --> 58:24.880
最后一个扩展知识

58:24.880 --> 58:25.880
就是TS里面

58:25.880 --> 58:27.880
特有的一些东西

58:27.880 --> 58:29.880
就是

58:29.880 --> 58:31.880
做一个扩展吧

58:31.880 --> 58:34.880
接口可以继承内

58:34.880 --> 58:35.880
这个情况

58:35.880 --> 58:36.880
我就随便举个例子

58:36.880 --> 58:37.880
就不在这个例子里面了

58:37.880 --> 58:39.880
接口可以继承内

58:39.880 --> 58:41.880
表示该内的

58:41.880 --> 58:43.880
所有成员

58:43.880 --> 58:45.880
都在接口中

58:45.880 --> 58:46.880
什么意思呢

58:46.880 --> 58:48.880
我这里随便举个例子

58:48.880 --> 58:50.880
我这里把全部注释掉

58:50.880 --> 58:51.880
这里

58:51.880 --> 58:53.880
比方说有一个内

58:53.880 --> 58:55.880
Class A

58:55.880 --> 58:57.880
里面有

58:57.880 --> 58:58.880
三个成员

58:58.880 --> 58:59.880
三个成员

58:59.880 --> 59:00.880
N1

59:00.880 --> 59:01.880
是不错吧

59:01.880 --> 59:03.880
随便写

59:03.880 --> 59:05.880
然后N2

59:05.880 --> 59:07.880
是不错

59:07.880 --> 59:08.880
N3

59:08.880 --> 59:09.880
是不错

59:09.880 --> 59:11.880
注意这是一个内

59:11.880 --> 59:14.880
然后有一个内B

59:14.880 --> 59:17.260
这样吧

59:17.260 --> 59:18.260
A1

59:18.260 --> 59:19.260
A2

59:19.260 --> 59:20.260
A3

59:20.260 --> 59:21.260
B1

59:21.260 --> 59:23.260
N0

59:23.260 --> 59:24.260
B2

59:24.260 --> 59:26.260
N0

59:26.260 --> 59:27.260
B3

59:27.260 --> 59:29.260
N0

59:29.260 --> 59:30.260
比方说

59:30.260 --> 59:32.260
有这么两个内

59:32.260 --> 59:33.260
有这么两个内

59:33.260 --> 59:34.260
有的时候

59:34.260 --> 59:36.260
我想做一个新的内容出来

59:36.260 --> 59:37.260
这个内形

59:37.260 --> 59:38.260
它不是一个内

59:38.260 --> 59:39.260
它不是一个内

59:39.260 --> 59:40.260
它就是一个内形

59:40.260 --> 59:41.260
进行内形约束的

59:41.260 --> 59:42.260
就是一个接口

59:42.260 --> 59:43.260
这个接口

59:43.260 --> 59:44.260
它要有

59:44.260 --> 59:45.260
它要求

59:45.260 --> 59:46.260
有A1

59:46.260 --> 59:47.260
A2

59:47.260 --> 59:49.260
就是有A里面的所有成员

59:49.260 --> 59:51.260
同时要要求有B里面的所有成员

59:51.260 --> 59:52.260
比方说

59:52.260 --> 59:53.260
要做这么一个接口出来

59:53.260 --> 59:55.260
Interface

59:55.260 --> 59:56.260
比方说

59:56.260 --> 59:57.260
这个接口名字要C

59:57.260 --> 59:59.260
它拥有A里面的所有成员

59:59.260 --> 01:00:00.260
拥有B里面的所有成员

01:00:00.260 --> 01:00:01.260
怎么做呢

01:00:01.260 --> 01:00:02.260
A

01:00:02.260 --> 01:00:05.260
B

01:00:05.260 --> 01:00:07.260
接口是可以实现多继承的

01:00:07.260 --> 01:00:10.260
接口它可以组合其他的内形

01:00:10.260 --> 01:00:11.260
来实现多继承

01:00:11.260 --> 01:00:12.260
当然这个代码

01:00:12.260 --> 01:00:14.260
到了结构里面

01:00:14.260 --> 01:00:15.260
是不是不存在的

01:00:15.260 --> 01:00:16.260
接口到了编印结构里面

01:00:16.260 --> 01:00:17.260
是不存在的

01:00:17.260 --> 01:00:18.260
是会消失的

01:00:18.260 --> 01:00:19.260
那么咱们看一下

01:00:19.260 --> 01:00:20.260
比方有个变量

01:00:20.260 --> 01:00:21.260
D

01:00:21.260 --> 01:00:23.260
比方变成C吧

01:00:23.260 --> 01:00:25.260
它约束为这个接口C

01:00:25.260 --> 01:00:26.260
那么就意味着

01:00:26.260 --> 01:00:28.260
它里面要有哪些东西

01:00:28.260 --> 01:00:29.260
要有A1

01:00:29.260 --> 01:00:32.260
要有A2

01:00:32.260 --> 01:00:33.260
要有啥

01:00:33.260 --> 01:00:34.260
要有A3

01:00:34.260 --> 01:00:35.260
要有A3

01:00:35.260 --> 01:00:36.260
还得有啥

01:00:36.260 --> 01:00:37.260
还不够

01:00:37.260 --> 01:00:38.260
还得有B1数字

01:00:38.260 --> 01:00:40.260
B2数字

01:00:40.260 --> 01:00:42.260
B3数字

01:00:42.260 --> 01:00:43.260
必须要这样子

01:00:43.260 --> 01:00:45.260
接口可以实现这样的功能

01:00:45.260 --> 01:00:47.260
有的时候内穷约束的时候

01:00:47.260 --> 01:00:49.260
我们需要合并

01:00:49.260 --> 01:00:51.260
多个接口或者是多个内的

01:00:51.260 --> 01:00:52.260
里边的内穷的话

01:00:52.260 --> 01:00:54.260
可以使用这种方式

01:00:54.260 --> 01:00:55.260
这种方式

01:00:55.260 --> 01:00:56.260
如果以后遇到的时候

01:00:56.260 --> 01:00:57.260
我们再说吧

01:00:57.260 --> 01:00:59.260
大家先有这么一个印象

01:00:59.260 --> 01:01:02.260
那么这种做法

01:01:02.260 --> 01:01:03.260
就是让接口去

01:01:03.260 --> 01:01:05.260
继承内这种做法

01:01:05.260 --> 01:01:07.260
这个内形别名

01:01:07.260 --> 01:01:08.260
也是做不到的

01:01:08.260 --> 01:01:10.260
这不是我们这里和的核心

01:01:10.260 --> 01:01:11.260
这里和的核心

01:01:11.260 --> 01:01:12.260
你一定要理解这个

01:01:12.260 --> 01:01:14.260
接口的含义是什么

01:01:14.260 --> 01:01:15.260
表达了某一个内

01:01:15.260 --> 01:01:17.260
是否拥有某种能力

01:01:17.260 --> 01:01:18.260
这是它跟内来

01:01:18.260 --> 01:01:19.260
进行联用的时候

01:01:19.260 --> 01:01:21.260
它的这么一个特点

01:01:21.260 --> 01:01:22.260
好了

01:01:22.260 --> 01:01:23.260
这一块的知识

01:01:23.260 --> 01:01:24.260
是比较的抽象

01:01:24.260 --> 01:01:25.260
比较的

01:01:25.260 --> 01:01:27.260
感觉上比较难以理解

01:01:27.260 --> 01:01:28.260
大家可以

01:01:28.260 --> 01:01:29.260
特别是在这一段

01:01:29.260 --> 01:01:30.260
这一段代码

01:01:30.260 --> 01:01:31.260
最好是多看几遍

01:01:31.260 --> 01:01:32.260
多看几遍

01:01:32.260 --> 01:01:34.260
就是视频里边多看几遍

01:01:34.260 --> 01:01:35.260
保证自己

01:01:35.260 --> 01:01:37.260
你理解得越好

01:01:37.260 --> 01:01:39.260
就是越能理解越好

01:01:39.260 --> 01:01:41.260
就是如果实在不理解的话

01:01:41.260 --> 01:01:42.260
是不是后面的代码

01:01:42.260 --> 01:01:43.260
就不能写的

01:01:43.260 --> 01:01:44.260
那也不是

01:01:44.260 --> 01:01:46.260
咱们前段开发

01:01:46.260 --> 01:01:47.260
你要说

01:01:47.260 --> 01:01:48.260
不理解面向

01:01:48.260 --> 01:01:49.260
就不能写代码

01:01:49.260 --> 01:01:50.260
那也不一定

01:01:50.260 --> 01:01:51.260
也可以写代码

01:01:51.260 --> 01:01:52.260
只不过

01:01:52.260 --> 01:01:54.260
如果你要成为一个

01:01:54.260 --> 01:01:56.260
如果你要在开发行业里边

01:01:56.260 --> 01:01:58.260
以后要有更好的发展

01:01:58.260 --> 01:01:59.260
这些东西

01:01:59.260 --> 01:02:00.260
这些东西

01:02:00.260 --> 01:02:02.260
你肯定是要理解的

01:02:02.260 --> 01:02:03.260
因为

01:02:03.260 --> 01:02:04.260
我之前也说过

01:02:04.260 --> 01:02:06.260
如果你的目标

01:02:06.260 --> 01:02:08.260
只是成为一个马龙

01:02:08.260 --> 01:02:10.260
上面给你交代任务

01:02:10.260 --> 01:02:11.260
你每天去敲敲代码

01:02:11.260 --> 01:02:12.260
把任务实现

01:02:12.260 --> 01:02:15.260
拿着不高不低的工资

01:02:15.260 --> 01:02:16.260
这样的婚姻备制的话

01:02:16.260 --> 01:02:17.260
来无所谓

01:02:17.260 --> 01:02:18.260
前段目前

01:02:18.260 --> 01:02:20.260
还不太需要面向对象

01:02:20.260 --> 01:02:23.260
不需要前段开发者

01:02:23.260 --> 01:02:24.260
能够掌握

01:02:24.260 --> 01:02:26.260
面向对象的这些知识

01:02:26.260 --> 01:02:28.260
但是如果你以后

01:02:28.260 --> 01:02:30.260
你希望成为一个大神

01:02:30.260 --> 01:02:32.260
或者是成为一个

01:02:32.260 --> 01:02:33.260
高级的程序

01:02:33.260 --> 01:02:35.260
那么这个时候

01:02:35.260 --> 01:02:38.260
你需要让你去写框架

01:02:38.260 --> 01:02:40.260
或者是需要你去写

01:02:40.260 --> 01:02:41.260
一些公共的模块

01:02:41.260 --> 01:02:42.260
那么这个时候

01:02:42.260 --> 01:02:43.260
你就会需要

01:02:43.260 --> 01:02:46.260
面向对象的一些知识了

01:02:46.260 --> 01:02:47.260
就看你自己了

01:02:47.260 --> 01:02:48.260
这一块东西

01:02:48.260 --> 01:02:51.260
我只是给你打开一扇门

01:02:51.260 --> 01:02:52.260
这扇门

01:02:52.260 --> 01:02:54.260
后边还有很多很多的东西

01:02:54.260 --> 01:02:57.260
如果你的目标很小

01:02:57.260 --> 01:02:59.260
你仅仅是做一个马龙的话

01:02:59.260 --> 01:03:00.260
那么你看完之后

01:03:00.260 --> 01:03:02.260
了解这个世界上存在这么个东西

01:03:02.260 --> 01:03:05.260
你想想把这个门关上就完事了

01:03:05.260 --> 01:03:06.260
只不过大家要做一个

01:03:06.260 --> 01:03:07.260
做一些复杂系统

01:03:07.260 --> 01:03:09.260
或者说在这个行业里边

01:03:09.260 --> 01:03:10.260
要有更好的发展

01:03:10.260 --> 01:03:12.260
最好把这些东西都了解

01:03:12.260 --> 01:03:13.260
会有点困难

01:03:13.260 --> 01:03:14.260
但是但是呢

01:03:14.260 --> 01:03:17.260
谁都是通过这样子的过来的

01:03:17.260 --> 01:03:18.260
好

01:03:18.260 --> 01:03:20.260
这是关于接口这部分

01:03:20.260 --> 01:03:21.260
讲的东西比较多

01:03:21.260 --> 01:03:23.260
笔墨也比较多

01:03:23.260 --> 01:03:26.260
大家下来好好去梳理一下

01:03:26.260 --> 01:03:27.260
好了

01:03:27.260 --> 01:03:28.260
那么这一刻就到这了

01:03:28.260 --> 01:03:29.260
拜拜

