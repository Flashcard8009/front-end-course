WEBVTT

00:01.140 --> 00:04.340
首先我要去开发服务器端

00:04.340 --> 00:06.140
那么我们进入这个文件夹

00:06.140 --> 00:07.640
servar这个文件夹

00:07.640 --> 00:09.640
到这里面去

00:09.640 --> 00:11.140
到这个文件夹里边来

00:11.140 --> 00:13.540
我们首先要做这么两件事

00:13.540 --> 00:16.140
一件事是初始化

00:16.140 --> 00:19.140
初始化的工程

00:19.140 --> 00:20.940
就是用npm初始化工程

00:20.940 --> 00:22.140
我这里能使用一样

00:22.140 --> 00:24.140
一使用npm也是一样的

00:24.140 --> 00:28.140
init很刚歪回车

00:28.140 --> 00:30.940
就生成这么一个package的节省

00:31.940 --> 00:33.940
生成之后我们还要做另一件事

00:33.940 --> 00:36.940
由于我们使用的是ts军情开发

00:36.940 --> 00:38.940
所以说我们还要做另一件事

00:38.940 --> 00:42.940
这件事就是使用tsc初始化工程

00:42.940 --> 00:45.940
也就是帮我们生成另外一个配置文件

00:45.940 --> 00:47.940
就是tsconfig这个配置文件

00:47.940 --> 00:49.940
生成好了之后

00:49.940 --> 00:51.940
我们首先来改动一下这个配置文件

00:51.940 --> 00:54.940
tsconfig稍微改动一下

00:54.940 --> 00:57.940
我们这里先把它删掉

00:57.940 --> 00:59.940
我们自己手动写一下

00:59.940 --> 01:01.940
首先我们能想到的配置有哪些呢

01:01.940 --> 01:03.940
首先是topic

01:03.940 --> 01:05.940
就是我们编译的目标

01:05.940 --> 01:07.940
由于这是服务器环境

01:07.940 --> 01:09.940
我们之前做过服务器是loader环境

01:09.940 --> 01:11.940
loader环境呢

01:11.940 --> 01:14.940
它能够识别的GS版本就已经比较高了

01:14.940 --> 01:17.940
所以说我们这里就可以直接用一些高的版本

01:17.940 --> 01:19.940
标算2016 s7

01:20.940 --> 01:22.940
好下一个配置呢使用模块

01:22.940 --> 01:24.940
就是编译结果的模块化标准

01:24.940 --> 01:26.940
使用的是什么标准

01:26.940 --> 01:27.940
由于这是服务器环境

01:27.940 --> 01:29.940
所以说我们使用common.js

01:29.940 --> 01:31.940
使用common.js

01:31.940 --> 01:33.940
然后还有什么样的配置的呢

01:33.940 --> 01:35.940
好直接编译结果

01:35.940 --> 01:37.940
编译结果的话

01:37.940 --> 01:39.940
我们希望把编译结果输出到一个目录

01:39.940 --> 01:41.940
就是outdir

01:41.940 --> 01:43.940
输出到哪个目录呢

01:43.940 --> 01:45.940
输出到比如说地射这个目录

01:45.940 --> 01:47.940
输出到地射这个目录

01:47.940 --> 01:49.940
当然配置的编译目录

01:49.940 --> 01:51.940
我们马上就要想到还要配置啥

01:51.940 --> 01:53.940
还要配置我们的

01:53.940 --> 01:55.940
原代码目录

01:55.940 --> 01:57.940
我们的ts代码放到哪个目录下边的

01:57.940 --> 01:59.940
我们通过include

01:59.940 --> 02:01.940
来进行配置

02:01.940 --> 02:03.940
配置的时候我们就给它选择src

02:03.940 --> 02:05.940
那么到时候我们的代码写到哪呢

02:05.940 --> 02:07.940
就写到这个src这个目录下边

02:07.940 --> 02:09.940
它会把这个目录下边的内容

02:09.940 --> 02:11.940
进行编译

02:11.940 --> 02:13.940
输出到disk这个目录

02:13.940 --> 02:15.940
好写完了之后

02:15.940 --> 02:17.940
我们继续来写编译选项

02:17.940 --> 02:19.940
继续来写编译选项

02:19.940 --> 02:21.940
编译选项里边我们要

02:21.940 --> 02:23.940
由于我们到时候要使用

02:23.940 --> 02:25.940
一个验证库对吧

02:25.940 --> 02:27.940
class validator验证库

02:27.940 --> 02:29.940
所以说我们这里开启两个配置

02:29.940 --> 02:31.940
就是我们在学装饰器那一块

02:31.940 --> 02:33.940
学习了两个配置

02:33.940 --> 02:35.940
一个是叫做experimental

02:35.940 --> 02:37.940
decorators

02:37.940 --> 02:39.940
这个配置是

02:39.940 --> 02:41.940
开启实验性质的装饰器功能

02:41.940 --> 02:43.940
把装饰器功能开启

02:43.940 --> 02:45.940
然后另外一个配置是amd

02:45.940 --> 02:47.940
decorator meddata

02:47.940 --> 02:49.940
把这个也开启

02:49.940 --> 02:51.940
这样子的话它会把

02:51.940 --> 02:53.940
我们ts里边的内形约束

02:53.940 --> 02:55.940
把它作为原数据

02:55.940 --> 02:57.940
把它作为装饰器

02:57.940 --> 02:59.940
放到原数据里边去

02:59.940 --> 03:01.940
然后还有一些配置

03:01.940 --> 03:03.940
比方常见的

03:03.940 --> 03:05.940
now check

03:05.940 --> 03:07.940
把这个配置我也该开启

03:07.940 --> 03:09.940
开启这个配置

03:09.940 --> 03:11.940
这个配置的好处在于

03:11.940 --> 03:13.940
开启了之后 now

03:13.940 --> 03:15.940
amd fan 只能复制给自己

03:15.940 --> 03:17.940
就不能复制给其他内容了

03:17.940 --> 03:19.940
避免出问题

03:19.940 --> 03:21.940
想想还有什么要配置的呢

03:21.940 --> 03:23.940
想想

03:23.940 --> 03:25.940
好像也没啥了

03:25.940 --> 03:27.940
好像还有啥

03:27.940 --> 03:29.940
我们把这个也去掉吧

03:29.940 --> 03:31.940
remove comments

03:31.940 --> 03:33.940
这个是移除掉注释

03:33.940 --> 03:35.940
就是在ts里边有些注释

03:35.940 --> 03:37.940
我们可以在编印结果里面给它移除掉

03:37.940 --> 03:39.940
不要注释

03:39.940 --> 03:41.940
再看一下还有啥配置

03:41.940 --> 03:43.940
还有什么配置

03:45.940 --> 03:47.940
好像还有这个now image

03:47.940 --> 03:49.940
把它设为出

03:49.940 --> 03:51.940
那么这个配置是做什么呢

03:51.940 --> 03:53.940
是当我写单码写错了

03:53.940 --> 03:55.940
没有通过内容验证的时候

03:55.940 --> 03:57.940
你就不要生存结果了

03:57.940 --> 03:59.940
当发生错误的时候

03:59.940 --> 04:01.940
就不要做

04:01.940 --> 04:03.940
不要生存结果了

04:03.940 --> 04:05.940
再来看一下还有什么配置

04:07.940 --> 04:09.940
还有这个lib

04:09.940 --> 04:11.940
就是我们的环境

04:11.940 --> 04:13.940
我们的环境是由于是now的环境

04:13.940 --> 04:15.940
它默认是浏览器环境

04:15.940 --> 04:17.940
什么还有window

04:17.940 --> 04:19.940
document这些内容

04:19.940 --> 04:21.940
我们就不要了

04:21.940 --> 04:23.940
我们只需要一个纯粹的es20

04:23.940 --> 04:25.940
或者es next的环境

04:25.940 --> 04:27.940
使用这个环境

04:27.940 --> 04:29.940
因为无所谓的

04:29.940 --> 04:31.940
因为我们最终还是要编印的

04:31.940 --> 04:33.940
最终是要通过编印的

04:33.940 --> 04:35.940
所以说我们环境可以尽量新一点

04:35.940 --> 04:37.940
都无所谓

04:37.940 --> 04:39.940
然后我们看一下还有什么配置

04:39.940 --> 04:41.940
还有什么配置

04:41.940 --> 04:43.940
差不多了吧

04:43.940 --> 04:45.940
我们之后如果发现了

04:45.940 --> 04:47.940
有一些需要配置的地方

04:47.940 --> 04:49.940
我们再具体来处理

04:49.940 --> 04:51.940
好,先这样

04:51.940 --> 04:53.940
好,现在我把tsconfig

04:53.940 --> 04:55.940
这个文件搞定了

04:55.940 --> 04:57.940
那我们来测试一下吧

04:57.940 --> 04:59.940
现在测试一下

04:59.940 --> 05:01.940
我在src目录下边建一个文件

05:01.940 --> 05:03.940
index.ts这个文件

05:03.940 --> 05:05.940
就随便写个辨量吧

05:05.940 --> 05:07.940
随便写个辨量

05:09.940 --> 05:11.940
然后这里

05:11.940 --> 05:13.940
随便写

05:13.940 --> 05:15.940
试一下能不能完成编印

05:15.940 --> 05:17.940
这里清空

05:17.940 --> 05:19.940
然后我们干脆配置一个脚本

05:19.940 --> 05:21.940
让那个脚本来帮我们完成编印

05:21.940 --> 05:23.940
我们以前也做过这样的配置

05:25.940 --> 05:27.940
这里我写了

05:27.940 --> 05:29.940
写这么一个build

05:29.940 --> 05:31.940
运行这个命令的时候

05:31.940 --> 05:33.940
它就完成编印

05:33.940 --> 05:35.940
这里我书写这么一个东西

05:35.940 --> 05:37.940
rd

05:37.940 --> 05:39.940
叫做三重目录

05:39.940 --> 05:41.940
三重目录的时候

05:41.940 --> 05:43.940
如果这个目录不为空

05:43.940 --> 05:45.940
强制把这个目录下边的内容

05:45.940 --> 05:47.940
全部删除

05:47.940 --> 05:49.940
那么删除的时候

05:49.940 --> 05:51.940
你不要问我到底要不要删除

05:51.940 --> 05:53.940
你直接删除就行了

05:53.940 --> 05:55.940
加个切杠Q不要询问

05:55.940 --> 05:57.940
然后删除哪个目录呢

05:57.940 --> 05:59.940
删除Disk这个目录

05:59.940 --> 06:01.940
删除完了之后先清除目录

06:01.940 --> 06:03.940
然后再运行tsc

06:03.940 --> 06:05.940
把这个目录建立起来

06:05.940 --> 06:07.940
重新编印

06:07.940 --> 06:09.940
build

06:09.940 --> 06:11.940
看一下能不能完成编印

06:11.940 --> 06:13.940
编印完成

06:13.940 --> 06:15.940
这个目录产生了

06:15.940 --> 06:17.940
说明我们的编印

06:17.940 --> 06:19.940
没有什么问题了

06:19.940 --> 06:21.940
配置文件差不多了

06:21.940 --> 06:23.940
然后还有开发阶段

06:23.940 --> 06:25.940
开发阶段的时候

06:25.940 --> 06:27.940
我们还需要监测文件的变化

06:27.940 --> 06:29.940
文件变化的时候

06:29.940 --> 06:31.940
在内存里面完成编印

06:31.940 --> 06:33.940
然后在内存里面运行

06:33.940 --> 06:35.940
因此我们跟之前的配置一样

06:35.940 --> 06:37.940
是配置loadable

06:37.940 --> 06:39.940
watch

06:39.940 --> 06:41.940
监控文件发生变化

06:41.940 --> 06:43.940
那么监控的目录是哪个目录呢

06:43.940 --> 06:45.940
监控的是src这个目录

06:45.940 --> 06:47.940
监控的文件后追名呢

06:47.940 --> 06:49.940
监控的文件后追名是ts

06:49.940 --> 06:51.940
监控的文件后追名是ts

06:51.940 --> 06:53.940
当这些文件发生变化的时候呢

06:53.940 --> 06:55.940
我们去执行

06:55.940 --> 06:57.940
执行什么呢

06:57.940 --> 06:59.940
执行tsload

06:59.940 --> 07:01.940
由于我之前都是全剧安装的

07:01.940 --> 07:03.940
所以说直接可以使用这些命令

07:03.940 --> 07:05.940
执行tsload

07:05.940 --> 07:07.940
tsload的执行啥呢

07:07.940 --> 07:09.940
执行src目录下面的index

07:09.940 --> 07:11.940
ts

07:11.940 --> 07:13.940
好 写好之后我们再来试一下

07:13.940 --> 07:15.940
再来试一下

07:15.940 --> 07:17.940
测试的时候我们把A辨量输出吧

07:17.940 --> 07:19.940
好 这个时候你会发现一个问题

07:19.940 --> 07:21.940
console没有了

07:21.940 --> 07:23.940
没有了

07:23.940 --> 07:25.940
怎么回算呢

07:25.940 --> 07:27.940
是因为咱们的环境里面

07:27.940 --> 07:29.940
console这个对象是load的环境给我们提供的

07:29.940 --> 07:31.940
load的环境呢

07:31.940 --> 07:33.940
它并没有声明有这么一个类型

07:33.940 --> 07:35.940
所以说我们上节课不是

07:35.940 --> 07:37.940
做了这么一件事吗

07:37.940 --> 07:39.940
就是上一个章节

07:39.940 --> 07:41.940
就是讲声明文件的时候

07:41.940 --> 07:43.940
我们也解释过对吧

07:43.940 --> 07:45.940
像load的环境里面呢

07:45.940 --> 07:47.940
我们需要去安装一个load的类型户

07:47.940 --> 07:49.940
我们这里去安装

07:49.940 --> 07:51.940
通过一样

07:51.940 --> 07:53.940
我这里添加add

07:53.940 --> 07:55.940
橫钢D开发依赖

07:55.940 --> 07:57.940
然后安装load的类型户

07:57.940 --> 07:59.940
load

07:59.940 --> 08:01.940
这个压安装起来就非常快

08:01.940 --> 08:03.940
因为它有缓存

08:03.940 --> 08:05.940
之前安装过了所以马上就安装完成了

08:05.940 --> 08:07.940
把这个类型户给安装上

08:07.940 --> 08:09.940
这个load的类型户

08:09.940 --> 08:11.940
安装上之后我们再来运行

08:11.940 --> 08:13.940
npm

08:13.940 --> 08:15.940
先写上一个输出

08:15.940 --> 08:17.940
console load

08:17.940 --> 08:19.940
把这个A输出

08:19.940 --> 08:21.940
来运行一下

08:21.940 --> 08:23.940
npm转

08:23.940 --> 08:25.940
能不能输出

08:25.940 --> 08:27.940
OK 没有什么问题了

08:27.940 --> 08:29.940
开发环境的服务器的开发环境

08:29.940 --> 08:31.940
就搭建的差不多了

08:31.940 --> 08:33.940
如果之后还要对配置珠更改的时候

08:33.940 --> 08:35.940
我们之后遇到问题再说吧

08:35.940 --> 08:37.940
现在差不多了

08:37.940 --> 08:39.940
好 这是开发环境的搭建

