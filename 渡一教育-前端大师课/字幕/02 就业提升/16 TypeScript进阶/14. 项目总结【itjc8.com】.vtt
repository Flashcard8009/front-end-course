WEBVTT

00:01.200 --> 00:04.520
好 作为这个项目的收尾

00:04.520 --> 00:06.060
我们这节课呢

00:06.060 --> 00:07.600
对这个项目啊

00:07.600 --> 00:08.880
做个总结

00:08.880 --> 00:12.720
也是对我们面向对向的学习做个总结

00:12.720 --> 00:16.300
咱们面向对向学习多少时间了

00:16.300 --> 00:18.100
有10个小时了吧

00:18.100 --> 00:20.140
就光是受课时间啊

00:20.140 --> 00:21.940
应该都有10个小时了

00:21.940 --> 00:26.040
为什么花这么长的篇幅来讲这一块呢

00:26.040 --> 00:28.080
我们首先说第一个问题啊

00:28.080 --> 00:30.900
为什么要讲

00:30.900 --> 00:32.940
面向对向

00:32.940 --> 00:36.280
其实这个问题呢我之前也说过

00:36.280 --> 00:40.380
那么现在项目做完了之后呢我再给他总结一遍

00:40.380 --> 00:42.940
为什么要讲面向对向

00:42.940 --> 00:44.460
几个这么几个原因

00:44.460 --> 00:45.760
第一个原因呢

00:45.760 --> 00:47.800
是面向对向

00:47.800 --> 00:49.840
带来了新的

00:49.840 --> 00:51.900
开发方式

00:51.900 --> 00:54.700
这个新的开发方式呢不是说

00:54.700 --> 00:58.300
他很新啊这种开发方式他已经很多很多年了

00:58.300 --> 01:00.080
只是对大家来说的话

01:00.180 --> 01:05.660
特别是对前端开发者来说的话这种开发方式呢是比较新银的

01:05.660 --> 01:09.260
之前呢大家是没有怎么去接触过的

01:09.260 --> 01:12.820
之前大家学过内也学过对象

01:12.820 --> 01:16.660
但是呢没有用这种思维来去开发程序

01:16.660 --> 01:19.740
那么通过我们面向对向这一块的学习呢

01:19.740 --> 01:22.820
以及这个这个项目花了这么长时间

01:22.820 --> 01:27.940
就是大家认识到啊有这么一种新的开发方式

01:28.040 --> 01:31.380
哪怕这10个小时我也没有确切去算过啊

01:31.380 --> 01:32.680
有多少时间

01:32.680 --> 01:35.180
哪怕这10个小时大家只能体会到

01:35.180 --> 01:37.600
哦原来有这么一种开发方式

01:37.600 --> 01:38.900
尽管我啥都不懂

01:38.900 --> 01:41.880
但是我看到了这么一种开发方式

01:41.880 --> 01:43.600
我觉得就这一点

01:43.600 --> 01:45.520
对大家也是有帮助的

01:45.520 --> 01:50.940
因此呢我会我在这里花了这么多的篇幅来讲这个东西

01:50.940 --> 01:56.180
而且呢面向对象呢他的这种开发方式啊是非常成熟的啊

01:56.180 --> 02:01.020
面向对象开发已经非常成熟

02:01.020 --> 02:05.140
啊他是一种非常成熟的开发方式

02:05.140 --> 02:09.700
特别善于解决复杂问题

02:10.900 --> 02:17.580
当然你要说我们平时用的这种面向过程这种开发

02:17.580 --> 02:21.940
或者是呢大家可能听说过的韩素式编程

02:21.940 --> 02:24.100
那么这两种开发方式

02:24.140 --> 02:27.820
他跟面向对象相比谁好谁坏呢

02:27.820 --> 02:29.700
我觉得把这个东西

02:29.700 --> 02:31.660
人者见人自者见智

02:31.660 --> 02:33.060
我是这样觉得的啊

02:33.060 --> 02:36.980
我很难去说哪个一定好哪个一定差

02:36.980 --> 02:38.620
不能去做这种比较

02:38.620 --> 02:41.420
但是呢我们接触了新的开发方式

02:41.420 --> 02:44.500
对我们自己啊对个人技能的提升

02:44.500 --> 02:47.900
以及呢对视野的视野的

02:47.900 --> 02:50.980
啊开阔都是有所帮助的

02:51.180 --> 02:52.380
特别是你们之后

02:52.380 --> 02:54.660
我不知道前端今后会怎么发展

02:54.660 --> 02:55.780
说实话我是真不知道

02:55.780 --> 02:56.900
我也不敢吹牛

02:56.900 --> 02:59.700
不然说前端以后一定是走面向对象这条路

02:59.700 --> 03:01.980
我也不敢去说这种话

03:01.980 --> 03:05.140
很多人的随时都是没有方向的

03:05.140 --> 03:07.700
那么万一以后真的是

03:07.700 --> 03:09.260
走了面向对象这条路呢

03:09.260 --> 03:12.420
大家接触过通过这个ts的学习

03:12.420 --> 03:15.140
接触过了面向对象这种开发方式呢

03:15.140 --> 03:18.220
那对以后的发展肯定是有所帮助的

03:18.260 --> 03:20.580
而且呢就算以后不走

03:20.580 --> 03:22.860
前端没往这个方向发展

03:22.860 --> 03:25.140
比方说往韩束式方向发展了

03:25.140 --> 03:29.220
或者是魔坏化又有了新的方式

03:29.220 --> 03:30.780
来改进整个程序

03:31.940 --> 03:36.420
可能面向对象呢也是会深入到前端的某些领域

03:36.420 --> 03:40.060
其实现在有一些酷有一些第三方的酷

03:40.060 --> 03:42.860
他的面向对象的理念已经非常非常强了

03:42.860 --> 03:44.380
就比方说像

03:44.420 --> 03:47.100
安格拉像什么rex

03:47.100 --> 03:50.100
他们的面向对象这种思维已经

03:50.100 --> 03:54.220
已经发现了他们在渗透到这个整个框架里边去了

03:54.220 --> 03:55.100
所以说呢

03:55.100 --> 03:57.020
面向对象这一块的知识呢

03:57.020 --> 03:58.340
作为前端开发者

03:58.340 --> 04:00.620
以前我可能不太要求

04:00.620 --> 04:02.020
但是现在呢

04:02.020 --> 04:06.180
已经是必须要至少要见过这种开发方式

04:06.180 --> 04:08.260
你至少要去见一下

04:08.260 --> 04:08.820
因此呢

04:08.820 --> 04:12.380
这是我们去学习面向对象的第一个原因

04:13.380 --> 04:14.620
然后第二个原因呢

04:14.620 --> 04:19.500
是因为TypeScript的某些

04:19.500 --> 04:20.380
某些语法

04:23.380 --> 04:26.700
是专门为面向对象准备的

04:28.380 --> 04:30.100
所以说我们要讲ts

04:30.100 --> 04:32.980
为什么我们把面向对象不单独把一门客来说

04:32.980 --> 04:34.580
而要放到ts里边呢

04:34.580 --> 04:36.780
是因为ts里边还有些语法

04:36.780 --> 04:38.940
就是为面向对象设计的

04:38.940 --> 04:40.180
比方说

04:40.300 --> 04:42.420
我们最常见的这个游戏里边

04:46.020 --> 04:47.300
这些私有的

04:47.300 --> 04:48.780
就是访问关键制

04:48.780 --> 04:50.180
访问修饰服

04:50.180 --> 04:52.420
这就是面向对象特有的东西

04:52.420 --> 04:55.060
很早的后端语言

04:55.060 --> 04:55.900
面向对象的语言

04:55.900 --> 04:57.220
他都有这些东西

04:57.220 --> 04:58.740
Private以及Protected

04:59.740 --> 05:00.580
以及什么呢

05:00.580 --> 05:02.740
以及Epstract抽象类

05:03.740 --> 05:06.380
比方说像这个方块组合

05:06.380 --> 05:08.380
我们完全可以把它做成一个抽象类

05:08.380 --> 05:08.900
对吧

05:08.940 --> 05:10.860
我们不希望它去创建

05:10.860 --> 05:12.860
不希望去创建它的对象

05:12.860 --> 05:15.340
我觉得创建它的对象是不合理的

05:15.340 --> 05:17.420
你应该去创建它指内的对象

05:17.420 --> 05:20.980
它只是把指内的一些公共的功能

05:20.980 --> 05:22.220
把它提到附列里边了

05:23.260 --> 05:25.900
所以说面向对象里边有一些东西

05:25.900 --> 05:27.580
就是ts里边有一些东西

05:27.580 --> 05:29.340
跟面向对象是密切相关的

05:29.340 --> 05:30.100
比方说

05:30.100 --> 05:32.420
我跟你大家说这个Epstract的关键词

05:32.420 --> 05:35.220
我只给大家讲这个语法

05:35.220 --> 05:37.420
可能大家对这个东西没有什么印象

05:37.460 --> 05:40.060
因为不知道什么时候会去用

05:40.060 --> 05:41.820
比方说我讲访问关键词

05:41.820 --> 05:43.420
我也访问修饰服

05:43.420 --> 05:44.820
我也只讲它的语法

05:44.820 --> 05:46.700
大家也不会知道怎么去用

05:46.700 --> 05:48.700
因此我必须要拿一个项目

05:48.700 --> 05:51.620
花一个项目的时间来讲解这些东西

05:51.620 --> 05:53.140
把它渗入到项目里边去

05:54.100 --> 05:55.340
这是它第二个原因

05:55.340 --> 05:56.980
因为我们学习ts

05:56.980 --> 05:58.420
需要学它的一些语法

05:58.420 --> 06:00.940
而这些语法是专门为面向对象准备的

06:02.180 --> 06:04.540
以前的介石为什么

06:04.540 --> 06:06.620
不是说它不能使用面向对象

06:06.620 --> 06:08.300
还是我反复强调的

06:08.300 --> 06:09.860
介石可以用面向对象

06:09.860 --> 06:12.420
但它由于没有内形检查

06:12.420 --> 06:14.780
比方说没有这些访问修饰服

06:14.780 --> 06:18.540
那介石里面实现私有的属性就很麻烦

06:18.540 --> 06:20.020
要使用symbol

06:20.020 --> 06:22.620
可不可以实现可以实现要使用symbol

06:22.620 --> 06:24.100
如果你不使用symbol的话

06:24.100 --> 06:26.060
那么把这些属性暴露出去

06:26.060 --> 06:27.380
非常容易出问题

06:27.380 --> 06:29.220
因为外边的人可能会乱用

06:30.340 --> 06:31.900
你看这些项目一复杂了

06:31.900 --> 06:33.900
这么多的属性这么多制断

06:33.900 --> 06:35.340
啥都允许外面访问

06:35.380 --> 06:36.100
那得了吗

06:36.100 --> 06:37.260
肯定不得了

06:37.260 --> 06:39.460
你看外边可以直接访问这个私有制断

06:39.460 --> 06:41.980
也可以访问这个访问器

06:41.980 --> 06:44.340
那么外边的操作太过于自由了

06:44.340 --> 06:46.500
没有任何限制就很容易出问题

06:48.060 --> 06:49.500
这是关于这么一点

06:50.540 --> 06:56.980
第三个点是为了学习一些设计模式

06:56.980 --> 06:58.820
其实我们这个项目里边

06:58.820 --> 07:01.700
没有设计到太多的设计模式

07:01.700 --> 07:03.780
可能设计到一些单粒

07:03.780 --> 07:08.660
可能设计到一种接口

07:08.660 --> 07:10.060
就是用这种方式

07:10.060 --> 07:11.260
你看一下这里

07:12.900 --> 07:14.940
显示和数据分离

07:14.940 --> 07:15.540
对吧

07:15.540 --> 07:17.420
使用接口的这种方式

07:17.420 --> 07:19.860
然后让接口去实现具体的显示

07:19.860 --> 07:22.060
我这里只是去调用接口的函数

07:23.060 --> 07:24.820
那么像这些模式

07:24.820 --> 07:27.060
在以前的面向对象的语言里边

07:27.060 --> 07:29.420
已经应用的非常成熟了

07:29.420 --> 07:30.860
用了很多次了

07:30.860 --> 07:32.740
因此我们不用去过于

07:32.780 --> 07:34.980
分析它这样做合不合适

07:34.980 --> 07:36.020
不用去探究它

07:36.020 --> 07:37.500
我们遇到这种场景直接用

07:37.500 --> 07:38.580
一定没有什么问题

07:38.580 --> 07:40.940
因为已经用了很多很多年了

07:40.940 --> 07:42.060
那么这些设计模式

07:42.060 --> 07:44.940
会给我们开发了注入的新的活力

07:44.940 --> 07:48.100
比方说我们做了很多小方块

07:48.100 --> 07:49.060
对吧

07:49.060 --> 07:50.660
我们可以这样做

07:50.660 --> 07:52.460
比方说我们现在要做多做一个方块

07:52.460 --> 07:55.700
你会发现扩展起来非常非常简单

07:55.700 --> 07:58.380
Terrace里面我们之前做了很多形状了

07:58.380 --> 07:59.380
现在我们加一个形状

07:59.380 --> 08:00.500
比方马上加一个

08:00.500 --> 08:02.500
你看计时大家计时

08:02.540 --> 08:04.380
需要几分钟的时间

08:04.380 --> 08:05.380
随便写

08:05.380 --> 08:06.180
随便写一个

08:07.820 --> 08:08.740
再写一个形状

08:08.740 --> 08:10.100
比方说优雄

08:10.100 --> 08:10.740
优雄

08:11.980 --> 08:15.220
这里给他设置一下他的形状坐标

08:15.220 --> 08:19.100
x就是-1y0

08:19.100 --> 08:22.460
然后中心点坐标在00

08:22.460 --> 08:24.820
然后10

08:24.820 --> 08:25.900
这个都没问题

08:25.940 --> 08:29.740
然后是-1

08:32.740 --> 08:34.100
做一个u的形状

08:34.100 --> 08:35.540
u的形状

08:35.540 --> 08:36.700
然后再加一个

08:36.700 --> 08:37.940
再加一个

08:37.940 --> 08:39.500
然后1-1

08:40.940 --> 08:42.540
写好之后

08:42.540 --> 08:44.180
这个不要了

08:44.180 --> 08:46.340
你看我们一个新的形状就做出来了

08:46.340 --> 08:48.260
就完全搞定了

08:48.260 --> 08:49.500
我们只需要把这个形状

08:49.500 --> 08:50.780
加入到这个数组里面去

08:50.780 --> 08:52.060
就完成了

08:52.060 --> 08:52.820
马上看一下

08:53.140 --> 08:54.140
马上看一下

08:54.140 --> 08:55.340
我们新的形状

08:57.860 --> 09:00.180
你看新的形状是不是出来了

09:00.180 --> 09:01.460
一看变换

09:01.460 --> 09:02.340
变

09:03.340 --> 09:05.020
你看是不是出来了

09:05.020 --> 09:06.660
就非常方便

09:06.660 --> 09:08.180
要扩展整个程序

09:08.180 --> 09:09.900
是非常方便的

09:09.900 --> 09:11.860
这就是面向对向的好处

09:11.860 --> 09:13.180
大家通过开发这个程序

09:13.180 --> 09:15.180
也可以慢慢的体会到这一点

09:16.540 --> 09:18.620
然后接下来我要解释的问题

09:18.620 --> 09:19.140
就是说

09:19.140 --> 09:21.540
为什么要选择这么一个游戏的项目

09:24.450 --> 09:30.340
为什么选择做游戏

09:30.340 --> 09:32.620
基于还是这么几个原因吧

09:32.620 --> 09:33.740
一个是

09:33.740 --> 09:35.740
游戏特别容易

09:37.380 --> 09:42.940
容易使用面向对向的思维

09:42.940 --> 09:43.940
就是在讲

09:43.940 --> 09:45.820
使用把面向对向的思维

09:45.820 --> 09:47.180
要融入到项目里面

09:47.180 --> 09:49.660
游戏是最合适的

09:49.660 --> 09:52.220
因为游戏里面有很多现实的场景

09:52.220 --> 09:55.060
比较让大家比较容易理解的场景

09:55.140 --> 09:57.460
那么这些我们可以使用什么

09:57.460 --> 09:58.900
继承啊

09:58.900 --> 09:59.740
接口啊

09:59.740 --> 10:02.020
这些东西都可以融入进去

10:02.020 --> 10:03.780
所以说我们选择了做游戏

10:03.780 --> 10:06.260
但是游戏它本身有一定复杂度

10:06.260 --> 10:08.020
比方说这个俄罗斯方块游戏

10:08.020 --> 10:09.420
虽然它规则很简单

10:09.420 --> 10:11.420
但是它本身有一定复杂度

10:11.420 --> 10:12.980
因此开发起来的

10:12.980 --> 10:18.900
可能大家有点不太舒服

10:18.900 --> 10:20.260
没有那么顺畅

10:20.260 --> 10:22.740
因为游戏它本身的复杂度造成的

10:22.740 --> 10:24.580
而不是面向对向造成的

10:24.620 --> 10:26.740
面向对向只会把它变得简单

10:26.740 --> 10:28.740
它不会把它变得更加复杂

10:28.740 --> 10:31.020
所以说我们使用游戏这种

10:31.020 --> 10:32.980
我也是纠缺了蛮半天的

10:32.980 --> 10:35.620
因为如果我用其他项目的话

10:35.620 --> 10:37.180
倒是做得简单

10:37.180 --> 10:40.220
但是面向对向思维的锻炼不了

10:40.220 --> 10:42.420
因此我最好还是选择了游戏

10:42.420 --> 10:44.860
还有第二个原因的就是

10:44.860 --> 10:51.300
目前就是听这个课的学生

10:51.300 --> 10:53.020
听这个课的同学

10:53.020 --> 10:56.220
目前同学们有一定的

10:56.220 --> 11:00.140
应该是这门课的受众

11:00.140 --> 11:00.660
要专业点

11:00.660 --> 11:01.260
对吧

11:01.260 --> 11:06.720
这门课的受众群体

11:06.720 --> 11:10.160
它是有一定的开发经验的

11:10.160 --> 11:11.280
有一定的开发经验

11:11.280 --> 11:12.640
它做过react

11:12.640 --> 11:14.040
你们都做过react

11:14.040 --> 11:15.160
做过5u的项目

11:15.160 --> 11:15.640
对吧

11:15.640 --> 11:17.000
有一定的开发经验

11:17.000 --> 11:18.480
因此大家的逻辑思维

11:18.480 --> 11:19.880
不会很差

11:19.880 --> 11:21.520
所以说可以选择游戏

11:21.520 --> 11:23.520
如果是给一个后端的开发者

11:23.560 --> 11:25.320
刚刚接触程序的开发者

11:25.320 --> 11:26.240
刚讲完面向对象

11:26.240 --> 11:27.320
就跟他讲这个玩意的话

11:27.320 --> 11:28.960
那他肯定会封掉

11:28.960 --> 11:30.960
所以说这一纪录这两个原因吧

11:30.960 --> 11:33.080
我就选择了去做这么一个项目

11:34.760 --> 11:36.880
我这里不会去打算

11:36.880 --> 11:37.840
总结这一块

11:37.840 --> 11:39.840
不会去打算去细讲

11:39.840 --> 11:42.720
我们之前面向对象学了哪些东西

11:42.720 --> 11:44.880
因为之前的视频教程里面都有

11:44.880 --> 11:45.640
我们是视频

11:45.640 --> 11:46.920
大家可以回看的

11:46.920 --> 11:47.600
而且目录

11:47.600 --> 11:50.160
我给大家也划分的非常清楚了

11:50.160 --> 11:51.400
主要是这一节

11:51.600 --> 11:54.880
我们就是从整体上去理解一下

11:54.880 --> 11:56.520
这个面向对象

11:56.520 --> 11:57.640
我们来理解一下

11:57.640 --> 12:00.680
我们之前做这个项目的时候

12:00.680 --> 12:02.360
特别是做这个项目的时候

12:02.360 --> 12:04.040
应用到了哪些东西

12:04.040 --> 12:06.360
首先我们应用到了两个原则

12:06.360 --> 12:07.360
我这里就不记了

12:07.360 --> 12:10.080
因为我们之前已经记过这个笔记了

12:10.080 --> 12:11.560
两个原则

12:11.560 --> 12:14.680
一个是单一只能原则

12:14.680 --> 12:18.800
每个内只做他跟他相关的一件事

12:18.800 --> 12:20.800
你看这个内

12:20.840 --> 12:22.920
比方说这个square的内

12:22.920 --> 12:24.880
我们再来看这个方块

12:24.880 --> 12:26.480
这个方块做了啥事

12:26.480 --> 12:30.160
因为发现他好像啥事都没做

12:30.160 --> 12:30.880
他做了什么呢

12:30.880 --> 12:33.280
他就建了一些属性

12:33.280 --> 12:37.320
然后给些属性设置了访问器

12:37.320 --> 12:39.560
完了你看就没了

12:39.560 --> 12:42.560
但是这个内饰非常基础的一个内

12:42.560 --> 12:43.760
他能够做什么呢

12:43.760 --> 12:47.440
他能够就是出了一个小方块的逻辑

12:47.440 --> 12:48.720
那么这个小方块

12:48.840 --> 12:51.440
可能跟游戏都没有什么关系

12:51.440 --> 12:52.480
他只是用来

12:52.480 --> 12:54.240
可以把它显示到界面上

12:54.240 --> 12:55.120
可以设置颜色

12:55.120 --> 12:56.240
可以设置坐标

12:56.240 --> 12:58.200
当你设置坐标的时候

12:58.200 --> 12:59.400
当你设置坐标的时候

12:59.400 --> 13:00.920
我会重新进行显示

13:00.920 --> 13:02.240
就完了

13:02.240 --> 13:04.000
但是有了这个基础的内过后

13:04.000 --> 13:06.160
当时大家有没有印象

13:06.160 --> 13:07.200
做到这个内之后

13:07.200 --> 13:09.520
你会发现就已经可以做显示了

13:09.520 --> 13:10.480
已经可以移动了

13:10.480 --> 13:11.400
已经可以显示了

13:11.400 --> 13:14.560
你就控制他这么一个整体就行了

13:14.560 --> 13:15.760
这就是单一只能原则

13:15.840 --> 13:19.120
每一个内只做跟他相关的事

13:19.120 --> 13:22.040
而这个内的显示我都把它完全分开的

13:22.040 --> 13:23.280
我不做任何显示

13:23.280 --> 13:25.880
我只提供了一个显示接口

13:25.880 --> 13:28.400
需要你去实现这个接口

13:28.400 --> 13:29.720
那么实现这个接口

13:29.720 --> 13:32.360
我有专门一个内去做这个处理

13:32.360 --> 13:34.840
比如Square page 512

13:34.840 --> 13:35.760
他做什么呢

