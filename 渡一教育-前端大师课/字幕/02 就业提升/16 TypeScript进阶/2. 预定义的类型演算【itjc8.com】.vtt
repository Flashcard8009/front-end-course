WEBVTT

00:00.560 --> 00:03.560
大家好 我是杜亦教育 微博前段讲师 袁济

00:03.560 --> 00:08.560
这些课呢 我们继续来学习TS里面的类型演算

00:08.560 --> 00:14.560
也就是说 根据已有的类型 来计算得到一个新的类型

00:14.560 --> 00:25.560
其实在TS里面 它其实已经给我们做了很多的 已经做好了很多的类型演算方式了

00:25.560 --> 00:34.560
比方说我这里已经列出来这么一些 这些都是TS给我们做好的一些类型演算方式

00:34.560 --> 00:41.560
我们只需要去使用它 就可以在某些场景里面 轻松的完成类型的演算

00:41.560 --> 00:44.560
好 我们这些课呢 其实就是学习这么一东西

00:44.560 --> 00:49.560
咱们本章其实没有多少东西 其实没有多少东西 很简单的

00:50.560 --> 00:55.560
只是说 这一趟的东西 大家可能学了之后 不太清楚它用到什么时候

00:55.560 --> 00:59.560
没关系 我们先快速的把它过一遍 有这么一个印象

00:59.560 --> 01:06.560
我们后边在做项目的时候 说不好 保无其 我们就可能会用上这些类型演算

01:06.560 --> 01:11.560
好 我们一个个看 这一课很简单 就是学习下这些 已经做好的类型演算

01:11.560 --> 01:15.560
好 第一个 Partial

01:15.560 --> 01:20.560
Partial这个东西呢 我们上节课是不是已经做过了 对吧 我们自己手动做了一个

01:20.560 --> 01:25.560
那么其实呢 这个东西TS已经给我们做好了 它的作用是什么呢

01:25.560 --> 01:32.560
它是一个饭型 它的作用是把这个类型T里边的所有成员 变成可选

01:32.560 --> 01:39.560
好 我们来看一下 就比方说 我有这么一个类型 有这么一个类型

01:40.560 --> 01:49.560
U字 给它设设设成年龄 姓名 嗯 随便吧 就这两个吧

01:49.560 --> 01:53.560
然后呢 我们这里得到一个变量 这个变量

01:53.560 --> 01:57.560
这个变量啥类型呢 我用这样的方式来进行约束

01:57.560 --> 02:01.560
比方说 我们可以使用 Partial

02:01.560 --> 02:05.560
它已经做好了 然后把这个用户传进去

02:05.560 --> 02:09.560
把类型传进去 传进去之后呢 其实这个U啊

02:09.560 --> 02:13.560
这个U里边 它这里没有提示 其实这里U 这个变量U

02:13.560 --> 02:20.560
它里边的所有的属性都是可选的 有哪些属性呢 有A级属性

02:20.560 --> 02:24.560
有Name属性 但是呢 这两个属性都是可选的

02:24.560 --> 02:28.560
我们比方说复制啊 复制的时候呢 你看 什么都不复制

02:28.560 --> 02:32.560
它也不报错 当然你复制的时候呢 你要复制这些

02:32.560 --> 02:37.560
存在的属性 加了温泡表示可选

02:37.560 --> 02:40.560
非常简单的 我们其实可以看一下

02:40.560 --> 02:44.560
这里是怎么写的啊 我们这里点击

02:44.560 --> 02:48.560
F12 进去 你看一下

02:48.560 --> 02:52.560
它这里的写法 跟我们上节课的写法

02:52.560 --> 02:56.560
是不是一致的 对吧 是完全一样的 也就是说这个东西呢

02:56.560 --> 03:00.560
它其实是帮我们做好了 直接去使用就行了

03:01.560 --> 03:04.560
好 下一个啊 下一个

03:04.560 --> 03:06.560
Required

03:06.560 --> 03:08.560
顾名思义呢 这种方式呢

03:08.560 --> 03:11.560
它是把内询T里边的变成必填

03:11.560 --> 03:14.560
如果以前它有可选的属性

03:14.560 --> 03:17.560
那么现在呢 经过了它进行演算之后

03:17.560 --> 03:21.560
得到了新的内询呢 它里边是全部必填的

03:21.560 --> 03:23.560
我们来看一下这管理啊

03:23.560 --> 03:28.560
比方说我这里呢 这个接口里边有一些可选的属性

03:28.560 --> 03:31.560
然后呢 这边

03:31.560 --> 03:34.560
我这里呢使用Required

03:34.560 --> 03:38.190
使用Required

03:38.190 --> 03:40.190
然后接下来我们看这个变量U 变量U

03:40.190 --> 03:43.190
你现在再给它复制一个普通对象

03:43.190 --> 03:47.190
因为它里边的所有属性都必须要填写

03:47.190 --> 03:49.190
必须要填写

03:49.190 --> 03:51.190
A级必须要填写

03:51.190 --> 03:53.190
还不够 还有Lame属性

03:53.190 --> 03:55.190
也必须要填写

03:55.190 --> 03:56.190
就这么简单

03:56.190 --> 03:58.190
我们来看一下它又是怎么写的啊

03:59.190 --> 04:01.190
点击一下F12

04:01.190 --> 04:03.190
看一下它什么写的

04:03.190 --> 04:06.190
它其实用了一个大家很特别的语法

04:06.190 --> 04:07.190
大家没见过

04:07.190 --> 04:10.190
它写了一个简号 一个问号

04:10.190 --> 04:13.190
表示什么呢 表示去掉可选

04:13.190 --> 04:15.190
这是一个特殊的语法

04:15.190 --> 04:17.190
一个简号 一个问号

04:17.190 --> 04:20.190
表示把这里的可选状态给它去掉

04:20.190 --> 04:23.190
这是关于Required

04:23.190 --> 04:26.190
把一个内询里边所有的

04:26.190 --> 04:28.190
这些东西不是函数

04:28.190 --> 04:30.190
看上去好像是函数一样

04:30.190 --> 04:32.190
给一个东西得到一个新的东西

04:32.190 --> 04:34.190
不是函数 是内询的演算

04:34.190 --> 04:37.190
这些演算在编译之后

04:37.190 --> 04:39.190
是完全不存在的

04:39.190 --> 04:41.190
编译之后这些演算就完全不存在的

04:41.190 --> 04:44.190
只是在编写代码的期间

04:44.190 --> 04:48.190
我们可以通过它来去演算出一些新的内询

04:48.190 --> 04:50.190
下一个

04:50.190 --> 04:51.190
Read only

04:51.190 --> 04:52.190
没什么好说的 对吧

04:52.190 --> 04:54.190
表示止读

04:54.190 --> 04:57.190
也就是说我这里呢

04:57.190 --> 05:00.190
可以设置Read only

05:00.190 --> 05:02.190
你这次复完止之后呢

05:02.190 --> 05:04.190
那么它里面的属性呢

05:04.190 --> 05:06.190
你就不能再重新复制了

05:06.190 --> 05:07.190
不能再重新复制了

05:07.190 --> 05:08.190
就是Read only

05:08.190 --> 05:11.190
把一个内询里边所有的成员

05:11.190 --> 05:13.190
变成止读

05:13.190 --> 05:15.190
很简单

05:15.190 --> 05:16.190
下一个内询

05:16.190 --> 05:17.190
Explode

05:17.190 --> 05:20.190
这个内询特别有意思

05:20.190 --> 05:22.190
它表示的是

05:22.190 --> 05:24.190
从这个内询里面

05:24.190 --> 05:25.190
T除掉

05:25.190 --> 05:28.190
能够复制给这个内询的内询

05:28.190 --> 05:29.190
啥意思呢

05:29.190 --> 05:30.190
啥意思呢

05:30.190 --> 05:32.190
往往这个东西

05:32.190 --> 05:34.190
这个内询演算

05:34.190 --> 05:36.190
它是配合联合内询使用的

05:36.190 --> 05:39.190
就是这两边都有可能是联合内询

05:39.190 --> 05:40.190
那么这个联合内询

05:40.190 --> 05:41.190
还有很多内询 对吧

05:41.190 --> 05:43.190
那么从内询里面T除掉一些

05:43.190 --> 05:45.190
T除掉哪些呢

05:45.190 --> 05:47.190
T除掉那些可以复制给它的

05:47.190 --> 05:48.190
匹配它的

05:48.190 --> 05:49.190
什么意思

05:49.190 --> 05:51.190
我们举个例子吧

05:51.190 --> 05:52.190
比方说

05:52.190 --> 05:54.190
这边

05:54.190 --> 05:56.190
我们来看一下这么一个情况

05:56.190 --> 05:59.190
有个变量

05:59.190 --> 06:01.190
随便写

06:01.190 --> 06:03.190
然后这里使用

06:03.190 --> 06:05.190
Explode

06:05.190 --> 06:07.190
然后这里是一个翻译形容

06:07.190 --> 06:09.190
翻译形容要传两个

06:09.190 --> 06:10.190
第一个翻译形容

06:10.190 --> 06:12.190
比方说我就要传一个

06:12.190 --> 06:14.190
A

06:14.190 --> 06:16.190
B

06:16.190 --> 06:18.190
C

06:18.190 --> 06:19.190
D

06:19.190 --> 06:20.190
有四个内询

06:20.190 --> 06:23.190
四个内询组合成了联合内询

06:23.190 --> 06:24.190
好 第二个内询呢

06:24.190 --> 06:27.190
比方说给它传一个B

06:27.190 --> 06:29.190
B

06:29.190 --> 06:31.190
C

06:31.190 --> 06:33.190
好 最终就闹到结果是啥呢

06:33.190 --> 06:35.190
就是从这个内询里边

06:35.190 --> 06:37.190
T除掉一些内询

06:37.190 --> 06:39.190
T除掉哪些内询呢

06:39.190 --> 06:40.190
匹配这边的内询

06:40.190 --> 06:41.190
把T除掉

06:41.190 --> 06:43.190
这边哪些内询可以匹配这边

06:43.190 --> 06:45.190
B和C 对吧

06:45.190 --> 06:47.190
那么T除掉之后呢

06:47.190 --> 06:49.190
就剩下A和D了

06:49.190 --> 06:51.190
看没 看结果

06:51.190 --> 06:53.190
结果就是A和D

06:53.190 --> 06:55.190
这就是Explode

06:55.190 --> 06:57.190
其实这样子呢

06:57.190 --> 06:59.190
我们可以做这么一些事情

06:59.190 --> 07:01.190
比方说有些内询

07:01.190 --> 07:03.190
是这样子

07:03.190 --> 07:05.190
比方说这个内询已经做好了

07:05.190 --> 07:07.190
已经做好了

07:09.190 --> 07:11.190
就T吧

07:11.190 --> 07:12.190
这个内询呢

07:12.190 --> 07:13.190
它是这样子的

07:13.190 --> 07:16.190
它有可能复制为蓝

07:16.190 --> 07:18.190
有可能复制为蓝

07:18.190 --> 07:20.190
还有可能是鸟

07:20.190 --> 07:22.190
还有可能是鸦迪泛

07:22.190 --> 07:24.190
都有可能

07:24.190 --> 07:26.190
做到这么个内询

07:26.190 --> 07:28.190
做到这么个内询之后呢

07:28.190 --> 07:30.190
我现在啊

07:30.190 --> 07:32.190
要从这个内询里边

07:32.190 --> 07:34.190
T除掉鸦迪泛

07:34.190 --> 07:36.190
不要了

07:36.190 --> 07:38.190
好 怎么办呢

07:38.190 --> 07:40.190
我又不想去改动这个内询

07:40.190 --> 07:42.190
因为这个内询还有别的用处

07:42.190 --> 07:43.190
这个时候呢

07:43.190 --> 07:45.190
我们就可以使用

07:46.190 --> 07:47.190
这样子

07:47.190 --> 07:48.190
用这个

07:48.190 --> 07:50.190
Explode

07:50.190 --> 07:52.190
把T传进去

07:52.190 --> 07:53.190
然后呢

07:53.190 --> 07:54.190
把鸦

07:54.190 --> 07:56.190
把鸦

07:56.190 --> 07:58.190
和Undefend

07:58.190 --> 07:59.190
传进去

07:59.190 --> 08:00.190
这样子一来

08:00.190 --> 08:01.190
就把T里边的鸦

08:01.190 --> 08:02.190
和Undefend

08:02.190 --> 08:03.190
T除掉

08:03.190 --> 08:04.190
T除掉过后呢

08:04.190 --> 08:05.190
我们看一下这个内询

08:05.190 --> 08:07.190
那只剩蓝和蓝

08:07.190 --> 08:08.190
我们就可以通过

08:08.190 --> 08:09.190
语言用的内询

08:09.190 --> 08:11.190
来制作一个新的内询

08:11.190 --> 08:13.190
好 这是Explode

08:13.190 --> 08:15.190
好 另外一个相反的就是

08:15.190 --> 08:17.190
extract

08:17.190 --> 08:19.190
那么这个东西呢

08:19.190 --> 08:20.190
刚才是T除

08:20.190 --> 08:22.190
那么现在extract

08:22.190 --> 08:24.190
表示保留

08:24.190 --> 08:27.190
就是只保留那些

08:27.190 --> 08:29.190
能够复制给U的内询

08:29.190 --> 08:31.190
能够复制给U的内询

08:31.190 --> 08:33.190
好 什么意思呢

08:33.190 --> 08:35.190
再比方说

08:35.190 --> 08:36.190
那么看一下

08:36.190 --> 08:38.190
extract

08:39.190 --> 08:41.190
如果我把这一块

08:41.190 --> 08:43.190
如果我把这一块

08:43.190 --> 08:46.190
换成了extract

08:46.190 --> 08:47.190
换成了这个

08:47.190 --> 08:49.190
那么这个U的内询是啥呢

08:49.190 --> 08:51.190
我们来想一想

08:51.190 --> 08:52.190
那就相反的情况吧

08:52.190 --> 08:53.190
对吧

08:53.190 --> 08:55.190
刚才是explode

08:55.190 --> 08:56.190
那么得到的结果呢

08:56.190 --> 08:58.190
是A和D

08:58.190 --> 09:00.190
那么现在是extract

09:00.190 --> 09:01.190
保留

09:01.190 --> 09:03.190
得到的结果就是B和C

09:03.190 --> 09:05.190
得到的结果就是B和C

09:05.190 --> 09:06.190
当然呢

09:06.190 --> 09:07.190
第二个内询

09:07.190 --> 09:08.190
如果有更多的

09:08.190 --> 09:09.190
如果有更多的

09:10.190 --> 09:12.190
E

09:12.190 --> 09:13.190
F

09:13.190 --> 09:15.190
那么这个时候会怎么样呢

09:15.190 --> 09:16.190
看结果

09:16.190 --> 09:18.190
还是只有B和C

09:18.190 --> 09:19.190
为什么呢

09:19.190 --> 09:21.190
从这里边找到那些

09:21.190 --> 09:22.190
从这里边

09:22.190 --> 09:24.190
范围是从这里边找

09:24.190 --> 09:26.190
从这里边找到那些

09:26.190 --> 09:28.190
能够复制给

09:28.190 --> 09:30.190
这些内询的内询

09:30.190 --> 09:31.190
那么从这里边找的话

09:31.190 --> 09:32.190
只能找到B和C

09:32.190 --> 09:33.190
对吧

09:33.190 --> 09:34.190
只能找到B和C

09:34.190 --> 09:35.190
于是呢

09:35.190 --> 09:36.190
就复制过去

09:36.190 --> 09:38.190
其实我们就可以看一下

09:38.190 --> 09:41.190
这个extract

09:41.190 --> 09:42.190
以及explode

09:42.190 --> 09:43.190
它怎么写的

09:43.190 --> 09:44.190
它怎么写的

09:44.190 --> 09:45.190
也不十二

09:45.190 --> 09:46.190
它这个写放呢

09:46.190 --> 09:48.190
大家又没有见过

09:48.190 --> 09:49.190
其实ts里边

09:49.190 --> 09:51.190
在内询演算的时候

09:51.190 --> 09:53.190
提供了很多很多的语法

09:53.190 --> 09:54.190
这个语法呢

09:54.190 --> 09:56.190
是一个三目运算符

09:56.190 --> 09:57.190
你看

09:57.190 --> 09:58.190
三目运算符

09:58.190 --> 09:59.190
居然可以写在

09:59.190 --> 10:00.190
内询演算的时候

10:00.190 --> 10:01.190
可以的

10:01.190 --> 10:03.190
它演算什么呢

10:03.190 --> 10:04.190
演算

10:04.190 --> 10:05.190
你这里面

10:05.190 --> 10:06.190
传了个内询过来

10:06.190 --> 10:07.190
对吧

10:07.190 --> 10:09.190
你这个内询里边

10:09.190 --> 10:11.190
有没有包含了

10:11.190 --> 10:13.190
有没有extract

10:13.190 --> 10:14.190
你这个内询里边

10:14.190 --> 10:16.190
有没有包含

10:16.190 --> 10:17.190
哪些内询是包含

10:17.190 --> 10:18.190
在U里边的

10:18.190 --> 10:21.190
是能够匹配U的extent

10:21.190 --> 10:22.190
这里不能用

10:22.190 --> 10:24.190
不能用继承的方式来想

10:24.190 --> 10:25.190
这里表示匹配

10:25.190 --> 10:26.190
匹配

10:26.190 --> 10:27.190
其实

10:27.190 --> 10:28.190
继承就是匹配

10:28.190 --> 10:29.190
对吧

10:29.190 --> 10:30.190
纸内是可以匹配

10:30.190 --> 10:31.190
负物类的

10:31.190 --> 10:33.190
因为牙齿变相法

10:33.190 --> 10:34.190
所以呢

10:34.190 --> 10:35.190
这里呢

10:35.190 --> 10:37.190
找到T里边的

10:37.190 --> 10:39.190
能够匹配U的内询

10:39.190 --> 10:40.190
能不能找到了

10:40.190 --> 10:41.190
如果能找到的话

10:41.190 --> 10:43.190
就把找到了结果返回

10:44.190 --> 10:46.190
如果不能找到的话

10:46.190 --> 10:47.190
如果找不到的话

10:47.190 --> 10:48.190
那么连维

10:48.190 --> 10:50.190
连维就是不存在的东西

10:50.190 --> 10:51.190
不存在的

10:52.190 --> 10:53.190
关于这个三目运算符

10:53.190 --> 10:55.190
了解一下就行了

10:55.190 --> 10:56.190
OK

10:56.190 --> 10:57.190
这是这个内询

10:57.190 --> 10:59.190
然后下面这个

10:59.190 --> 11:01.190
Lonelable

11:01.190 --> 11:02.190
Lonelable

11:02.190 --> 11:04.190
那么这个是什么意思呢

11:04.190 --> 11:06.190
就是从T里边

11:06.190 --> 11:07.190
T除掉Low

11:07.190 --> 11:08.190
Undefend

11:08.190 --> 11:09.190
这个时候

11:09.190 --> 11:11.190
也是经常做的一件事

11:11.190 --> 11:12.190
就是有些内询的

11:12.190 --> 11:13.190
它有可能是Low

11:13.190 --> 11:14.190
有可能是Undefend

11:14.190 --> 11:15.190
我们想把它

11:15.190 --> 11:16.190
它Low

11:16.190 --> 11:17.190
Undefend的T除掉

11:17.190 --> 11:18.190
好

11:18.190 --> 11:20.190
其实我们有的是用这个I

11:20.190 --> 11:21.190
还记得吗

11:21.190 --> 11:22.190
我们有的是用这个感叹

11:22.190 --> 11:23.190
对吧

11:23.190 --> 11:24.190
内询断言

11:24.190 --> 11:25.190
其实也有这个作用

11:25.190 --> 11:27.190
它把Undefend都去掉

11:27.190 --> 11:29.190
那么通过这个演算了

11:29.190 --> 11:30.190
可以去掉Low

11:30.190 --> 11:31.190
Undefend

11:31.190 --> 11:32.190
两个都去掉

11:32.190 --> 11:33.190
比方说

11:33.190 --> 11:34.190
很简单的

11:34.190 --> 11:35.190
都是很简单的

11:35.190 --> 11:37.190
Type

11:37.190 --> 11:38.190
STR

11:38.190 --> 11:39.190
这个内询呢

11:39.190 --> 11:40.190
是一个字幕创

11:40.190 --> 11:41.190
是一个字幕创

11:41.190 --> 11:42.190
也有可能是Low

11:42.190 --> 11:44.190
也有可能是Undefend

11:44.190 --> 11:46.190
是Undefend

11:46.190 --> 11:47.190
好

11:47.190 --> 11:49.190
我们制作一个新的内询

11:49.190 --> 11:51.190
Lot

11:51.190 --> 11:52.190
Lotend

11:52.190 --> 11:54.190
永远不可能为空的

11:54.190 --> 11:55.190
那么我就用

11:55.190 --> 11:57.190
以前的内询来进行演算

11:57.190 --> 11:58.190
比方说

11:58.190 --> 11:59.190
我们可以这样子写

11:59.190 --> 12:01.190
Lonelable

12:01.190 --> 12:03.190
把以前的内询扔进去

12:03.190 --> 12:04.190
扔进去

12:04.190 --> 12:06.190
返回了新的内询

12:06.190 --> 12:07.190
那么只有字幕创了

12:07.190 --> 12:08.190
你看

12:09.190 --> 12:11.190
这是关于这个演算

12:11.190 --> 12:12.190
非常非常简单

12:12.190 --> 12:13.190
好

12:13.190 --> 12:14.190
下一个

12:14.190 --> 12:15.190
一个

12:15.190 --> 12:17.190
这个是过去寒树

12:17.190 --> 12:19.190
返回值的内询

12:19.190 --> 12:20.190
就是有的时候

12:20.190 --> 12:21.190
我拿到了一个寒树

12:21.190 --> 12:22.190
我想知道

12:22.190 --> 12:23.190
我想把他的

12:23.190 --> 12:25.190
返回值的内询拿到

12:25.190 --> 12:26.190
或者说

12:26.190 --> 12:27.190
我拿到一个寒树的内询

12:27.190 --> 12:28.190
我想把他

12:28.190 --> 12:30.190
返回值拿到

12:30.190 --> 12:31.190
这个时候怎么办呢

12:31.190 --> 12:32.190
看例子

12:32.190 --> 12:34.190
比方说

12:34.190 --> 12:36.190
我这里定义了一个寒树内询

12:36.190 --> 12:38.190
Bunk

12:38.190 --> 12:40.190
这个寒树内询没有参数

12:40.190 --> 12:41.190
没有参数

12:41.190 --> 12:42.190
然后呢

12:42.190 --> 12:43.190
返回的结果

12:43.190 --> 12:45.190
返回的结果是Lumber

12:45.190 --> 12:46.190
好

12:46.190 --> 12:47.190
有的时候呢

12:47.190 --> 12:48.190
这个内询是别人做的

12:48.190 --> 12:49.190
我想知道

12:49.190 --> 12:50.190
这个内询

12:50.190 --> 12:51.190
他是一个寒树

12:51.190 --> 12:52.190
我能清楚

12:52.190 --> 12:53.190
我想知道他的

12:53.190 --> 12:54.190
返回内询是啥

12:54.190 --> 12:56.190
这个寒树的返回内询是啥

12:56.190 --> 12:57.190
好

12:57.190 --> 12:58.190
我们这里

12:59.190 --> 13:00.190
返回内询

13:00.190 --> 13:02.190
我们可以用这个来计算

13:02.190 --> 13:03.190
就是

13:06.190 --> 13:08.190
然后把这个寒树内询给他

13:08.190 --> 13:10.190
所以给他的是寒树内询

13:10.190 --> 13:12.190
给他的是寒树内询

13:12.190 --> 13:14.190
寒树内询给他

13:14.190 --> 13:15.190
你看得到的结果

13:15.190 --> 13:17.190
就是寒树的返回值

13:17.190 --> 13:19.190
把这个寒树内询给他

13:19.190 --> 13:21.190
他能够把返回值算出来

13:21.190 --> 13:23.190
一个把返回值算出来

13:23.190 --> 13:24.190
那么他这里面呢

13:24.190 --> 13:26.190
用到一个关键词

13:26.190 --> 13:27.190
用到了一个关键词

13:27.190 --> 13:28.190
这个关键词呢

13:28.190 --> 13:30.190
了解一下就行了

13:30.190 --> 13:31.190
了解一下就行了

13:31.190 --> 13:32.190
我们f12

13:32.190 --> 13:33.190
转掉定义

13:33.190 --> 13:34.190
这个关键词呢

13:34.190 --> 13:36.190
叫做infer

13:36.190 --> 13:37.190
infer

13:37.190 --> 13:38.190
infer这个关键词呢

13:38.190 --> 13:39.190
表示什么意思呢

13:39.190 --> 13:40.190
表示推断

13:40.190 --> 13:42.190
推断出一个内询

13:42.190 --> 13:44.190
推断出某一个东西的内询

13:44.190 --> 13:45.190
这里推断的是什么呢

13:45.190 --> 13:46.190
推断的是

13:46.190 --> 13:49.190
这个寒树的返回内询

13:49.190 --> 13:52.190
监一下这个关键词就行了

13:52.190 --> 13:53.190
我们在开发中

13:53.190 --> 13:54.190
可以用到的

13:54.190 --> 13:55.190
用到的

13:55.190 --> 13:56.190
监一下就行了

13:56.190 --> 13:58.190
了解一下有这么关键词就行了

13:58.190 --> 13:59.190
好

13:59.190 --> 14:00.190
然后下一个

14:00.190 --> 14:02.190
还有一种情况

14:02.190 --> 14:03.190
还有一种情况

14:03.190 --> 14:04.190
就是有的时候呢

14:04.190 --> 14:05.190
我们写了一个寒树

14:05.190 --> 14:07.190
写了一个寒树

14:07.190 --> 14:08.190
然后这个上

14:08.190 --> 14:09.190
我想知道

14:09.190 --> 14:11.190
这个寒树的返回内询是什么

14:11.190 --> 14:12.190
我要把返回内询

14:12.190 --> 14:14.190
拿来进行约束

14:17.190 --> 14:19.190
我想把这个寒树的返回内询

14:19.190 --> 14:20.190
拿来约束

14:20.190 --> 14:21.190
这个时候呢

14:21.190 --> 14:22.190
我们可以动态的

14:22.190 --> 14:24.190
来获取这个寒树的返回约束

14:24.190 --> 14:25.190
return

14:27.190 --> 14:28.190
定个辨量

14:28.190 --> 14:30.190
这个辨量必须要是

14:30.190 --> 14:32.190
这个寒树的返回内询

14:32.190 --> 14:35.190
来定一下就是return type

14:35.190 --> 14:37.190
这里写啥呢

14:37.190 --> 14:38.190
这里写啥

14:38.190 --> 14:39.190
有些朋友说

14:39.190 --> 14:42.190
这里应该写这个寒树上

14:42.190 --> 14:43.190
不对

14:43.190 --> 14:44.190
不对

14:44.190 --> 14:45.190
因为这里呢

14:45.190 --> 14:47.190
应该写的是内形

14:47.190 --> 14:48.190
你这里是寒树

14:48.190 --> 14:50.190
寒树是不是内形

14:50.190 --> 14:51.190
寒树不是内形

14:51.190 --> 14:53.190
什么是内形

14:53.190 --> 14:55.190
这个玩意是内形

14:55.190 --> 14:56.190
这个玩意是内形

14:56.190 --> 14:58.190
这个是寒树

14:58.190 --> 15:00.190
应该说寒树

15:00.190 --> 15:02.190
能够匹配某个内形

15:02.190 --> 15:04.190
或者说寒树居有某个内形

15:04.190 --> 15:06.190
但是寒树本身它不是内形

15:06.190 --> 15:07.190
那怎么办呢

15:07.190 --> 15:11.400
Typew运算浮

15:11.400 --> 15:12.400
Typew运算浮

15:12.400 --> 15:14.400
就是把某一个东西

15:14.400 --> 15:16.400
它的内形给它取出来

15:16.400 --> 15:17.400
那么取出来之后呢

15:17.400 --> 15:19.400
这就传入了一个寒树内形了

15:19.400 --> 15:20.400
寒树内形

15:20.400 --> 15:23.400
那么就得到这个寒树的返回之内形

15:23.400 --> 15:25.400
看一下A

15:25.400 --> 15:26.400
你看

15:26.400 --> 15:28.400
那么寒树是返回的内形

15:28.400 --> 15:29.400
是number

15:29.400 --> 15:30.400
于是这个A的内形是number

15:30.400 --> 15:32.400
那么于是这个边量呢

15:32.400 --> 15:36.400
它就永远是跟寒树返回之保持一致的

15:36.400 --> 15:38.400
那比方说这个寒树改

15:38.400 --> 15:39.400
改一下

15:39.400 --> 15:41.400
把一个寒树体改一下

15:41.400 --> 15:43.400
改成这种格式

15:43.400 --> 15:45.400
改成这种格式

15:45.400 --> 15:47.400
好改了之后

15:47.400 --> 15:49.400
那么这个寒树的返回内形你看

15:49.400 --> 15:50.400
变成了支付串

15:50.400 --> 15:52.400
变成了支付串

15:52.400 --> 15:55.400
也变成了支付串

15:55.400 --> 15:57.400
这个内形演算就是这个好处

15:57.400 --> 15:58.400
有的时候呢

15:58.400 --> 16:00.400
内形之间是有逻辑关系的

16:00.400 --> 16:02.400
我们可以通过以有的东西呢

16:02.400 --> 16:04.400
来运算出新的东西

16:04.400 --> 16:06.400
那么以有的东西变化了之后呢

16:06.400 --> 16:08.400
新的东西也会变化

16:08.400 --> 16:09.400
好

16:09.400 --> 16:11.400
下面这个最后一个了

16:11.400 --> 16:13.400
instance type

16:13.400 --> 16:14.400
获取什么呢

16:14.400 --> 16:18.400
获取勾造寒树内形的实力内形

16:18.400 --> 16:21.400
获取勾造寒树内形的实力内形

16:21.400 --> 16:22.400
这啥意思呢

16:22.400 --> 16:23.400
啥意思

16:23.400 --> 16:25.400
跟寒树这里差不多

16:25.400 --> 16:29.400
只不过获取的是勾造寒树的返回内形

16:29.400 --> 16:31.400
勾造寒树返回内形

16:31.400 --> 16:33.400
是不是就是内本身的对象

16:33.400 --> 16:35.400
我们比方说

16:35.400 --> 16:37.400
写这么一个内

16:37.400 --> 16:40.780
就这样写吧

16:40.780 --> 16:42.780
就这样写

16:42.780 --> 16:43.780
然后呢

16:43.780 --> 16:45.780
我要获取这个内

16:45.780 --> 16:48.780
它的实力内形

16:48.780 --> 16:49.780
实力内形是啥

16:49.780 --> 16:50.780
就是有的

16:50.780 --> 16:52.780
好像是没有啥意义

16:52.780 --> 16:54.780
好像是没有啥意义

16:54.780 --> 16:56.780
我们先写吧写再说吧

16:56.780 --> 16:58.780
比方说我有一个变量

16:58.780 --> 17:00.780
有个变量u

17:00.780 --> 17:02.780
我要看他约束的内形吗

17:02.780 --> 17:05.780
我要让他约束为这个内的

17:05.780 --> 17:06.780
实力内形

17:06.780 --> 17:08.780
其实我最终的目的就是要约束为有的

17:08.780 --> 17:10.780
最终的目的就是要约束为有的

17:10.780 --> 17:12.780
我们看一下可以怎么写

17:12.780 --> 17:13.780
我可以这样的写

17:13.780 --> 17:15.780
instance type

17:15.780 --> 17:18.780
这里写上type user

17:18.780 --> 17:21.410
就完了

17:21.410 --> 17:23.410
我把构造函数的内形给他

17:23.410 --> 17:24.410
我们之前学过

17:24.410 --> 17:27.410
U2就是内前面加上type

17:27.410 --> 17:28.410
得到的是构造函数

17:28.410 --> 17:30.410
构造函数的内形

17:30.410 --> 17:32.410
把构造函数的内形给他

17:32.410 --> 17:34.410
然后呢让他来帮我生成

17:34.410 --> 17:36.410
这个构造函数的结果

17:36.410 --> 17:39.410
调用的结果那就是U2

17:39.410 --> 17:40.410
就是这个构造函数溜了之后

17:40.410 --> 17:41.410
得到的是什么东西

17:41.410 --> 17:43.410
那就是U2

17:43.410 --> 17:44.410
当然就大家知道这个

17:44.410 --> 17:46.410
这个写法好像没有什么意义

17:46.410 --> 17:47.410
好像没什么意义

17:47.410 --> 17:48.410
那么有的时候呢

17:48.410 --> 17:50.410
我们可能会捐这种情况

17:50.410 --> 17:51.410
有的时候我们可能用了用了

17:51.410 --> 17:53.410
用了一个内形别名

17:53.410 --> 17:55.410
来约束构造函数

17:55.410 --> 17:56.410
约束构造函数

17:56.410 --> 17:57.410
比方说啊

17:57.410 --> 17:59.410
一个内形别名

17:59.410 --> 18:00.410
呃

18:00.410 --> 18:01.410
就随便学会

18:01.410 --> 18:02.410
呃

18:04.410 --> 18:07.410
有两个参数的构造函数

18:07.410 --> 18:09.410
比方说我会有这么一个内形

18:09.410 --> 18:10.410
约束

18:10.410 --> 18:11.410
那这里咋写了

18:11.410 --> 18:13.410
我可以这样写啊

18:13.410 --> 18:15.410
有两个参数吧

18:15.410 --> 18:16.410
RQ1

18:16.410 --> 18:18.410
RQ2

18:18.410 --> 18:19.410
RQ3

18:19.410 --> 18:20.410
RQ4

18:20.410 --> 18:21.410
RQ5

18:21.410 --> 18:22.410
RQ6

18:22.410 --> 18:23.410
RQ7

18:23.410 --> 18:24.410
RQ8

18:24.410 --> 18:25.410
RQ10

18:25.410 --> 18:26.410
RQ11

18:26.410 --> 18:27.410
RQ12

18:27.410 --> 18:28.410
RQ12

18:28.410 --> 18:29.410
RQ13

18:29.410 --> 18:30.410
RQ16

18:30.410 --> 18:31.410
RQ16

18:31.410 --> 18:32.410
RQ16

18:32.410 --> 18:33.410
RQ16

18:33.410 --> 18:34.410
RQ17

18:34.410 --> 18:35.410
RQ18

18:35.410 --> 18:36.410
RQ18

18:36.410 --> 18:37.410
RQ19

18:37.410 --> 18:38.410
RQ19

18:38.410 --> 18:39.410
RQ19

18:39.410 --> 18:40.410
RQ19

18:40.410 --> 18:41.410
RQ20

18:41.410 --> 18:42.410
RQ21

18:42.410 --> 18:43.410
RQ22

18:43.410 --> 18:44.410
RQ22

18:44.410 --> 18:45.410
RQ23

18:45.410 --> 18:46.410
RQ23

18:46.410 --> 18:47.410
RQ24

18:47.410 --> 18:48.410
RQ24

18:48.410 --> 18:49.410
RQ24

18:49.410 --> 18:50.410
RQ24

18:50.410 --> 18:51.410
RQ24

18:51.410 --> 18:52.410
RQ25

18:52.410 --> 18:53.410
RQ25

18:53.410 --> 18:54.410
RQ26

18:54.410 --> 18:55.410
RQ27

18:55.410 --> 18:56.410
RQ28

18:56.410 --> 18:57.410
RQ28

18:57.410 --> 18:58.410
RQ28

18:58.410 --> 18:59.410
RQ28

18:59.410 --> 19:00.410
RQ29

19:00.410 --> 19:01.410
RQ30

19:01.410 --> 19:02.410
RQ31

19:02.410 --> 19:03.410
RQ31

19:03.410 --> 19:04.410
RQ32

19:04.410 --> 19:05.410
RQ33

19:05.410 --> 19:06.410
RQ34

19:06.410 --> 19:07.410
RQ35

19:07.410 --> 19:08.410
RQ36

19:08.410 --> 19:09.410
RQ37

19:09.410 --> 19:10.410
RQ38

19:10.410 --> 19:11.410
RQ38

19:11.410 --> 19:12.410
RQ38

19:12.410 --> 19:13.410
RQ38

19:13.410 --> 19:14.410
RQ38

19:14.410 --> 19:15.410
RQ38

19:15.410 --> 19:16.410
RQ39

19:16.410 --> 19:17.410
RQ38

19:17.410 --> 19:18.410
RQ39

19:18.410 --> 19:19.410
RQ39

19:20.410 --> 19:21.410
这样子

19:21.410 --> 19:22.410
约束了过后

19:22.410 --> 19:23.410
RQ39

19:23.410 --> 19:24.410
RQ39

19:24.410 --> 19:25.410
RQ39

19:25.410 --> 19:26.410
RQ39

19:26.410 --> 19:27.410
RQ39

19:27.410 --> 19:28.410
RQ39

19:28.410 --> 19:29.410
RQ39

19:29.410 --> 19:30.410
RQ40

19:30.410 --> 19:31.410
RQ40

19:31.410 --> 19:32.410
RQ41

19:32.410 --> 19:33.410
RQ41

19:33.410 --> 19:34.410
RQ42

19:34.410 --> 19:35.410
RQ42

19:35.410 --> 19:36.410
RQ42

19:36.410 --> 19:37.410
RQ43

19:37.410 --> 19:38.410
RQ44

19:38.410 --> 19:39.410
RQ45

19:39.410 --> 19:40.410
RQ46

19:40.410 --> 19:41.410
RQ47

19:41.410 --> 19:42.410
RQ48

19:42.410 --> 19:43.410
RQ48

19:43.410 --> 19:44.410
RQ48

19:44.410 --> 19:45.410
RQ48

19:45.410 --> 19:46.410
RQ50

19:46.410 --> 19:48.410
RQ Yoshio

19:48.410 --> 19:50.410
RQ50

19:50.410 --> 19:52.170
RQ50

19:52.170 --> 19:53.170
RQ60

19:53.170 --> 19:54.410
RQ50

19:54.410 --> 19:55.410
RQ11

19:55.410 --> 19:56.410
RQ12

19:56.410 --> 19:57.410
RQ16

19:57.410 --> 19:58.410
RQ18

19:58.410 --> 19:59.410
RQ18

19:59.410 --> 20:00.770
RQ19

20:00.770 --> 20:01.770
RQ19

20:01.770 --> 20:03.270
RQ16

20:03.270 --> 20:05.410
RQ18

20:05.410 --> 20:07.410
RQ17

20:07.410 --> 20:09.410
RQ20

20:09.410 --> 20:11.410
RQ20

20:11.410 --> 20:13.410
RQ20

20:13.410 --> 20:14.410
RQ20

20:14.410 --> 20:20.810
两个参数没问题,两个参数没问题,一个参数,没有参数,都没问题

20:20.810 --> 20:26.950
然后呢,你要得到的内询是user,得到的内询是user

20:26.950 --> 20:31.570
那我这里没有得到的user内询啊,我这里反回的内询是什么?Test

20:31.570 --> 20:36.690
它为什么又不爆出?反回的内询不一致,它为什么又不爆出?

20:36.690 --> 20:43.850
这还是压制变想法,因为这个user里面有东西吗?没有东西啊,没有东西

20:43.930 --> 20:48.970
那没有东西的话在这里面,你东西可以多,但不能少,那我没有没有少,对吧

20:48.970 --> 20:52.810
没有少,我创建的对象跟user是完全匹配的

20:52.810 --> 20:56.650
那如果user里面有东西了,就要说罗金埃及

20:56.650 --> 21:00.490
有东西了,那一看马上就爆出了,马上就爆出了

21:00.490 --> 21:05.610
它说你这个地方呢跟这个内询不匹配,那我这里也必须要有什么

21:05.610 --> 21:10.210
也有罗金埃及,也必须要有罗金埃及,我可以有多的一些东西

21:10.370 --> 21:14.770
但是呢,必须至少得有罗金埃及

21:14.770 --> 21:18.610
当然最简单的就是把它继承一下,继承自由转

21:18.610 --> 21:20.610
继承自由转

21:20.610 --> 21:22.450
好,我们这里调整修法

21:22.450 --> 21:28.290
因为这个意思嘛,总之呢,不是要讲这个玩意儿啊

21:28.290 --> 21:33.970
总之是这一块可以对勾罩函数进行约束,可以对勾罩函数进行约束

21:34.370 --> 21:39.090
好了,有了这个玩意儿之后呢,我有的时候呢,想得到它的

21:39.090 --> 21:45.250
勾罩函数返回的内行是啥?我想得到它勾罩函数返回的内行是啥?

21:45.250 --> 21:54.210
我们就可以使用instance type

21:54.210 --> 22:00.210
把这个toherconstructor传进去

22:01.170 --> 22:07.330
那么这样子运算之后呢,这边就可以读取出它来返回的内行

22:07.330 --> 22:11.570
好,将来这里东西发生变化,比方说变了

22:11.570 --> 22:17.650
变成了RT口,变成了RT口

22:17.650 --> 22:20.850
那么这边也会跟着变,也会跟着变

22:20.850 --> 22:26.690
这就是内行演算的好处,它是可以根据遗忧的东西演算出新的东西

22:26.690 --> 22:29.890
那么遗忧的东西变化之后呢,新的东西也会变化

22:30.850 --> 22:34.130
好了,那么就结束了,就结束了

22:34.130 --> 22:38.450
这一个章节和东西其实不复杂啊,不复杂

22:38.450 --> 22:41.250
就是感觉上好像没有什么用

22:41.250 --> 22:44.770
我们后边做项目的时候,还会用到其中一些

22:44.770 --> 22:50.530
现在有这么一个印象吧,我们知道在TS里面是可以进行演算的

22:50.530 --> 22:53.570
而演算的时候呢,很多时候关键

22:53.570 --> 22:57.410
就是用到的关键字,在于typel,tl和in

22:57.570 --> 23:01.090
其实在TS里面还有一些关键字

23:01.090 --> 23:05.010
不过那些关键字,我们开发真的是太少见了,又比较绕

23:05.010 --> 23:08.770
因此就不做讲解了,比方说刚才我们看到了一个infer

23:09.730 --> 23:12.290
好,我们这张学期完了之后呢

23:12.290 --> 23:16.770
其实基本上TS的支持部分就已经结束了

23:16.770 --> 23:18.530
支持部分就已经结束了

23:18.530 --> 23:21.170
我们下一个章节呢,还有一个声明文件

23:21.170 --> 23:25.490
声明文件呢,其实都涉及不到太多的支持了

23:25.570 --> 23:30.050
只是做,我们下一个章节再说吧

23:30.050 --> 23:34.210
好,我们这个章节先到这,大家可以回归一下

23:34.210 --> 23:35.810
这个章节也学了一些东西

23:35.810 --> 23:41.330
有三个关键字,已经一些一定好的一些内容演算

23:42.210 --> 23:45.890
好,我们本张呢就到此结束了,拜拜

