WEBVTT

00:00.560 --> 00:04.560
OK 大家好 我是杜一教育微博前端讲师 元静

00:04.560 --> 00:08.560
好了 那我们接着来呗 接着来啊

00:08.560 --> 00:11.560
其实呢 现在就已经差不多了

00:11.560 --> 00:15.560
还剩下最后一个问题 就是文件上传的问题

00:15.560 --> 00:18.560
就是 写到这吧

00:18.560 --> 00:23.560
就是文件 文件上传的问题

00:23.560 --> 00:27.560
我也不太清楚你们学习express的时候

00:27.560 --> 00:30.560
有没有处理过文件上传啊

00:30.560 --> 00:34.560
因为我之前上课的时候呢 发现有些同学呢 学到了

00:34.560 --> 00:37.560
学完了reactor之后呢 告诉我

00:37.560 --> 00:41.560
没搞清楚文件上传 他说他没有学过

00:41.560 --> 00:44.560
所以说 这里呢 我还是把它讲一下吧

00:44.560 --> 00:47.560
把express的文件上传讲一下啊

00:47.560 --> 00:50.560
其实也花不了多少时间啊 把这一块讲一下

00:50.560 --> 00:54.560
因为不想 因为这个小的问题呢 耽误了大家就是

00:54.560 --> 00:57.560
对服务器开发这一块的进度

00:57.560 --> 01:01.560
因为你可能没有学过文件上传的话 这一块会一直卡住

01:01.560 --> 01:04.560
其实也没有多少东西啊 非常非常简单

01:04.560 --> 01:08.560
文件上传啊 我们这里首先说这么一个点啊

01:08.560 --> 01:12.560
就是通常情况下 服务器呢

01:12.560 --> 01:17.560
会提供一个统一的API接口

01:17.560 --> 01:22.560
用于处理上传的文件

01:22.560 --> 01:24.560
这是服务器通用的处理办法

01:24.560 --> 01:28.560
就是说 不是说我要上传一个电影封面 去请求一个接口

01:28.560 --> 01:31.560
我到时候上传一个用户头像 又去请求另一个接口

01:31.560 --> 01:33.560
一般来说不太会 不太会

01:33.560 --> 01:38.560
一般都是提供一个统一的API接口 用于处理上传的文件

01:38.560 --> 01:43.560
所以说呢 这里文件上传呢 我们会使用一个统一的路由来处理

01:43.560 --> 01:46.560
因此呢 我们不会把文件上传的路由写到这里边

01:46.560 --> 01:50.560
不会写到这里边 我们会去新建一个路由在这里

01:50.560 --> 01:54.560
通常情况下 我们把它命名为update

01:54.560 --> 01:57.560
upload 表上传的意思

01:57.560 --> 02:00.560
upload.rotts

02:00.560 --> 02:03.560
这是我们会写这么一个路由 来专门处理这个问题

02:03.560 --> 02:06.560
于是呢 我们到时候 我们先建一个路由吧

02:06.560 --> 02:09.560
现在这里建 把这个路由建好

02:09.560 --> 02:13.560
express 先导入进来 这里

02:13.560 --> 02:16.560
express 导入进来过后呢 这里产生一个路由

02:16.560 --> 02:18.560
rotr

02:19.560 --> 02:22.560
创建个路由

02:22.560 --> 02:25.560
然后呢 这个路由呢 肯定是一个poster 请求对吧

02:25.560 --> 02:28.560
文件上传 你还能用cat请求吗 对不对

02:28.560 --> 02:31.560
肯定是不行 文件上传的数据量肯定很大的

02:31.560 --> 02:36.560
因为有个文件数据嘛 比我们普通的一个文本数据要大得太多太多了

02:36.560 --> 02:40.560
我们写一个100行的文本 也充其量也就

02:40.560 --> 02:43.560
1kb左右吧 不得了

02:43.560 --> 02:46.560
100行的文本1kb 可能还不到1kb

02:46.560 --> 02:49.560
但是呢 一个文件 随随便便就是

02:49.560 --> 02:52.560
几十kb 甚至上百kb 甚至一兆

02:52.560 --> 02:56.560
所以说呢 这里肯定是poster请求 能够接收大量的数据

02:56.560 --> 02:59.560
好 请求地址呢 就是这个当前地址

02:59.560 --> 03:03.560
只要你去请求这个地址 那么它来处理文件上传

03:03.560 --> 03:06.560
处理文件上传

03:06.560 --> 03:09.560
我们往往会这样子来写 这里处理文件上传

03:09.560 --> 03:13.560
再说说一句话吧 处理文件上传

03:14.560 --> 03:17.560
好 然后呢 我们把这个路由导出

03:17.560 --> 03:20.560
导出这个路由 before the rotor

03:20.560 --> 03:23.560
把路由导出

03:23.560 --> 03:25.560
好 写好之后呢 我们到这边来

03:25.560 --> 03:28.560
就可以跟之前一样啊 导入这个路由

03:28.560 --> 03:31.560
upload road

03:31.560 --> 03:34.560
from road

03:34.560 --> 03:36.560
然后这个

03:36.560 --> 03:39.560
upload road 导入进来

03:39.560 --> 03:42.560
导入进来过后了这里 我们就使用统一的一个

03:43.560 --> 03:46.560
当我们请求这个地址的时候

03:46.560 --> 03:48.560
请求API upload的时候呢

03:48.560 --> 03:51.560
我们去使用这个路由来处理文件上传

03:51.560 --> 03:53.560
这是第一个点 大家要知道

03:53.560 --> 03:55.560
我们通常情况下会使用一个

03:55.560 --> 03:58.560
统一的API接口来处理文件上传

03:58.560 --> 04:01.560
好 第二个点呢 我们要知道

04:01.560 --> 04:03.560
文件上传的时候

04:03.560 --> 04:07.560
它的attp请求 它的请求格式是什么

04:07.560 --> 04:10.560
首先它必须是Poster请求

04:10.560 --> 04:13.560
首先必须是Poster请求 我们这里干脆记录一下吧

04:13.560 --> 04:16.560
因为文件上传这一块啊 有些朋友可能没有接触过

04:16.560 --> 04:19.560
关于文件上传这一块啊 把它记录一下

04:21.560 --> 04:23.560
刚才说到第一个点 就是服务器呢

04:23.560 --> 04:26.560
会提供一个统一的接口

04:26.560 --> 04:28.560
来处理文件上传

04:29.560 --> 04:31.560
这第一个点

04:31.560 --> 04:33.560
好 第二个点的话 就是客户端这边

04:33.560 --> 04:35.560
客户端这边

04:35.560 --> 04:39.560
客户端会使用Poster请求

04:39.560 --> 04:42.560
请求服务器 就是请求服务器之前那个接口

04:42.560 --> 04:44.560
比方说我们刚才开发的接口是什么

04:44.560 --> 04:48.560
是API Upload这个接口 对吧

04:48.560 --> 04:50.560
请求这个接口会使用Poster请求

04:50.560 --> 04:55.560
并且Poster请求里边 它的消息体有很多种选择

04:55.560 --> 04:57.560
那么它会选择哪一种消息体呢

04:57.560 --> 05:00.560
看一下啊 通常情况下

05:00.560 --> 05:02.560
我们这里新建一个 新建个请求

05:02.560 --> 05:04.560
就是文件上传

05:04.560 --> 05:08.060
文件上传 这里

05:08.060 --> 05:10.060
首先它是Poster请求

05:10.060 --> 05:13.700
之前的关闭调

05:13.700 --> 05:16.700
好 请求的底是这个地址

05:16.700 --> 05:19.700
Local Host 3000

05:19.700 --> 05:22.700
然后API Upload

05:22.700 --> 05:23.700
请求这个地址

05:23.700 --> 05:25.700
好 请求的时候

05:25.700 --> 05:27.700
客户端使用的是Poster请求

05:27.700 --> 05:29.700
那么文件数据放哪了

05:29.700 --> 05:32.700
文件数据是放到请求体里边的

05:32.700 --> 05:34.700
放到这里边的

05:34.700 --> 05:35.700
好 在这里边

05:35.700 --> 05:37.700
它怎么来存放它的请求体呢

05:37.700 --> 05:39.700
是在这里

05:39.700 --> 05:40.700
它这里有很多种格式 对吧

05:40.700 --> 05:42.700
我们之前选择的是这种格式

05:42.700 --> 05:45.700
一个原式的格式对象

05:45.700 --> 05:47.700
原式的格式

05:47.700 --> 05:48.700
请求的话

05:48.700 --> 05:50.700
如果是文件上传的话

05:50.700 --> 05:52.700
它会用这种格式

05:52.700 --> 05:54.700
好 这里

05:54.700 --> 05:56.700
我看一下

05:56.700 --> 05:57.700
这个地方

05:57.700 --> 05:58.700
它会使用

05:58.700 --> 05:59.700
对 测这

05:59.700 --> 06:00.700
我已经搞晕了

06:00.700 --> 06:02.700
是Form Data这种格式

06:02.700 --> 06:04.700
好 这种格式里边

06:04.700 --> 06:05.700
它在上传的时候呢

06:05.700 --> 06:08.700
它会把请求的文件数据

06:08.700 --> 06:10.700
放到请求体里边

06:10.700 --> 06:11.700
比方说这里呢

06:11.700 --> 06:12.700
我们写一个keyz

06:12.700 --> 06:13.700
比方说

06:13.700 --> 06:16.700
我们写一个my file

06:16.700 --> 06:17.700
我们知道

06:17.700 --> 06:18.700
消息体里边

06:18.700 --> 06:19.700
请求体里边

06:19.700 --> 06:21.700
无非就是建置队 对不对

06:21.700 --> 06:22.700
无非就是建置队

06:22.700 --> 06:23.700
好

06:23.700 --> 06:25.700
这个是一个建my file

06:25.700 --> 06:26.700
直呢

06:26.700 --> 06:27.700
它就不是一个普通字无创了

06:27.700 --> 06:29.700
就不是一个普通字无创了

06:29.700 --> 06:30.700
直的话

06:30.700 --> 06:31.700
它是一个

06:31.700 --> 06:32.700
什么呢

06:32.700 --> 06:33.700
是一个文件

06:33.700 --> 06:35.700
好 在PosterMan里面

06:35.700 --> 06:37.700
怎么来处理这个文件呢

06:37.700 --> 06:38.700
这里面呢

06:38.700 --> 06:40.700
我们其实可以选择

06:40.700 --> 06:43.700
选择这里的内容为file

06:43.700 --> 06:45.700
选择这里的内容为file

06:45.700 --> 06:47.700
内容为file过后

06:47.700 --> 06:48.700
你看这里

06:48.700 --> 06:50.700
它就让你选择一个文件

06:50.700 --> 06:51.700
好

06:51.700 --> 06:53.700
我们在这里选择一个文件

06:53.700 --> 06:54.700
就随便选择一张

06:54.700 --> 06:55.700
一个图片

06:55.700 --> 06:56.700
随便选择

06:56.700 --> 06:58.700
就随便选一张

06:58.700 --> 06:59.700
好

06:59.700 --> 07:00.700
然后呢

07:00.700 --> 07:01.700
我们来发送消息

07:01.700 --> 07:02.700
发送请求

07:02.700 --> 07:03.700
我们来看一下

07:03.700 --> 07:04.700
它的消息体的格式

07:04.700 --> 07:05.700
send

07:05.700 --> 07:06.700
这里

07:06.700 --> 07:08.700
服务器那边没有响应结果

07:08.700 --> 07:09.700
所以它一直挂起

07:09.700 --> 07:10.700
没关系

07:10.700 --> 07:11.700
它一直挂起没关系

07:11.700 --> 07:13.700
我们来看一下它的请求

07:13.700 --> 07:15.700
请求的发送的消息

07:15.700 --> 07:16.700
以及请求头

07:16.700 --> 07:17.700
到底是什么玩意

07:17.700 --> 07:18.700
正面

07:18.700 --> 07:20.700
我们点击扣的

07:20.700 --> 07:21.700
来看一下

07:21.700 --> 07:22.700
来看一下

07:23.700 --> 07:25.700
首先我们可以看到

07:25.700 --> 07:27.700
它是一个Poster请求

07:27.700 --> 07:30.700
然后请求的消息内容

07:30.700 --> 07:32.700
内容的内容

07:32.700 --> 07:33.700
你看它内容是

07:33.700 --> 07:35.700
multipart

07:35.700 --> 07:36.700
表示

07:36.700 --> 07:37.700
我这个消息体那边

07:37.700 --> 07:39.700
有多个数据

07:39.700 --> 07:40.700
多个数据

07:40.700 --> 07:42.700
multipart form data

07:42.700 --> 07:43.700
总之它用这种

07:43.700 --> 07:45.700
用这种方式来表示

07:45.700 --> 07:48.700
我这里的上传的消息体格式

07:48.700 --> 07:49.700
是这种格式

07:49.700 --> 07:51.700
也就是我们上传文件的时候

07:51.700 --> 07:52.700
大家注意一下

07:52.700 --> 07:54.700
上传文件的时候

07:54.700 --> 07:55.700
它当然是这种格式

07:55.700 --> 07:57.700
当然是这种格式的数据

07:57.700 --> 07:59.700
然后后面有一个boundary

07:59.700 --> 08:01.700
boundary什么意思呢

08:01.700 --> 08:02.700
表示分割

08:02.700 --> 08:03.700
就是它消息体那边

08:03.700 --> 08:05.700
可能有多个文件

08:05.700 --> 08:07.700
还有可能会夹杂一些

08:07.700 --> 08:10.700
会夹杂一些普通的文本

08:10.700 --> 08:12.700
那么这些不同的数据之间

08:12.700 --> 08:14.700
它是用一个分割符来进行分割

08:14.700 --> 08:16.700
那么它先规定

08:16.700 --> 08:18.700
先随机生成一个分割符

08:18.700 --> 08:19.700
当然这个生成的方式

08:19.700 --> 08:20.700
大家不用管

08:20.700 --> 08:22.700
生成这么一个分割符

08:22.700 --> 08:23.700
这个分割符呢

08:23.700 --> 08:25.700
是这个分割符

08:25.700 --> 08:26.700
那么大家看下面

08:26.700 --> 08:27.700
你看下面

08:27.700 --> 08:28.700
这个分割符

08:28.700 --> 08:29.700
是不是就是上面

08:29.700 --> 08:30.700
标识的这种分割符

08:30.700 --> 08:31.700
对不对

08:31.700 --> 08:32.700
刚好是一样的

08:32.700 --> 08:33.700
好

08:33.700 --> 08:34.700
下标这个是消息体

08:34.700 --> 08:36.700
下标这个是消息体

08:36.700 --> 08:37.700
这个消息体里边

08:37.700 --> 08:39.700
你看记住了哪些东西

08:39.700 --> 08:41.700
首先我们这个间

08:41.700 --> 08:42.700
我们知道

08:42.700 --> 08:44.700
任何数据上传

08:44.700 --> 08:46.700
像这种格式上传到服务器

08:46.700 --> 08:48.700
都是兼值队的数据

08:48.700 --> 08:50.700
兼的名字叫做my file

08:50.700 --> 08:52.700
就是我们刚才这里写的名字

08:52.700 --> 08:54.700
my file

08:54.700 --> 08:55.700
然后值呢

08:55.700 --> 08:57.700
值在下标

08:57.700 --> 08:58.700
值在这个位置

08:58.700 --> 09:00.700
这个位置它这里没有显示出来

09:00.700 --> 09:01.700
这里存放的是啥

09:01.700 --> 09:03.700
这里存放的是图片的二进制数据

09:03.700 --> 09:05.700
它是图片的二进制数据

09:05.700 --> 09:07.700
放到这个位置

09:07.700 --> 09:08.700
好

09:08.700 --> 09:09.700
后边有一个file name

09:09.700 --> 09:10.700
这个东西呢

09:10.700 --> 09:11.700
没啥用

09:11.700 --> 09:12.700
没啥用

09:12.700 --> 09:14.700
这个东西值在的是

09:14.700 --> 09:15.700
科普端那边

09:15.700 --> 09:16.700
它的文件

09:16.700 --> 09:18.700
它的文件所在位置

09:18.700 --> 09:19.700
就是科普端那边的文件

09:19.700 --> 09:20.700
所在位置

09:20.700 --> 09:21.700
这个东西服务器

09:21.700 --> 09:22.700
也没啥用

09:22.700 --> 09:23.700
也没啥用

09:23.700 --> 09:24.700
这是服务器

09:24.700 --> 09:26.700
这是请求的消息体格式

09:26.700 --> 09:28.700
我们再来加一个文件

09:28.700 --> 09:29.700
再来加一个文件

09:29.700 --> 09:31.700
比方说my file

09:31.700 --> 09:33.700
还是一样的件

09:33.700 --> 09:35.700
给它选择一个内销

09:35.700 --> 09:36.700
file

09:36.700 --> 09:37.700
这里

09:37.700 --> 09:38.700
再建一个02

09:38.700 --> 09:39.700
这张图片

09:39.700 --> 09:41.700
然后再加一个文件

09:41.700 --> 09:42.700
my file

09:42.700 --> 09:44.700
再加一个普通的数据吧

09:44.700 --> 09:45.700
a

09:45.700 --> 09:46.700
1

09:46.700 --> 09:47.700
然后再加一个文件

09:47.700 --> 09:49.700
你就可以上传多个文件的

09:49.700 --> 09:51.700
my file2

09:51.700 --> 09:52.700
这里是一个文件

09:52.700 --> 09:53.700
表示一下

09:53.700 --> 09:55.700
这里是一个文件

09:55.700 --> 09:57.700
这里随便写一张图片

09:57.700 --> 09:59.700
我们再请求服务器

09:59.700 --> 10:00.700
我们这里服务器

10:00.700 --> 10:01.700
刚才这样子吧

10:01.700 --> 10:02.700
服务器这边

10:02.700 --> 10:04.700
我们先这样子来处理

10:04.700 --> 10:05.700
我们不打印了

10:05.700 --> 10:06.700
我们直接输出吧

10:06.700 --> 10:07.700
让它一直挂起

10:07.700 --> 10:08.700
扣断

10:08.700 --> 10:11.700
上传文件成功

10:11.700 --> 10:13.700
就这样写

10:13.700 --> 10:15.700
保存一下

10:15.700 --> 10:17.700
过来再看

10:17.700 --> 10:19.700
send

10:19.700 --> 10:21.700
上传文件成功

10:21.700 --> 10:22.700
服务器完成响应了

10:22.700 --> 10:24.700
然后我们看一下请求体

10:24.700 --> 10:26.700
继续看一下请求体

10:26.700 --> 10:28.700
这里扣的

10:28.700 --> 10:29.700
你看一下

10:29.700 --> 10:31.700
这个请求体里边

10:31.700 --> 10:32.700
你看一下它数据

10:32.700 --> 10:34.700
有几个数据

10:34.700 --> 10:36.700
是不是有四个数据

10:36.700 --> 10:37.700
第一个数据

10:37.700 --> 10:39.700
它的签名为my file

10:39.700 --> 10:41.700
这个东西可以不用管

10:41.700 --> 10:43.700
但是里边的数据

10:43.700 --> 10:44.700
我们看不到

10:44.700 --> 10:45.700
它是二镜子数据

10:45.700 --> 10:47.700
因为是图片文件的数据

10:47.700 --> 10:49.700
好 第二个数据

10:49.700 --> 10:51.700
签名也为my file

10:51.700 --> 10:53.700
这里两个数据了

10:53.700 --> 10:55.700
第三个数据

10:55.700 --> 10:57.700
签的名字叫A

10:57.700 --> 10:58.700
它是一个支付串数据

10:58.700 --> 11:00.700
1

11:00.700 --> 11:02.700
然后第四个数据

11:02.700 --> 11:03.700
签的名字叫my file2

11:03.700 --> 11:06.700
下面是一个图片数据

11:06.700 --> 11:08.700
是一个图片数据

11:08.700 --> 11:09.700
明白这个意思吗

11:09.700 --> 11:11.700
它是用这种格式

11:11.700 --> 11:14.700
来完成数据上传的

11:14.700 --> 11:16.700
好 我们首先清楚

11:16.700 --> 11:17.700
科普端这边

11:17.700 --> 11:19.700
它在上传文件的时候

11:19.700 --> 11:21.700
使用的是一个什么样的格式

11:21.700 --> 11:22.700
先清楚这么一个点

11:22.700 --> 11:24.700
它可以上传多个文件

11:24.700 --> 11:25.700
可以上传一个文件

11:25.700 --> 11:27.700
也可以夹杂这一些

11:27.700 --> 11:28.700
普通的支付串上传

11:28.700 --> 11:30.700
先把这个搞清楚

11:30.700 --> 11:31.700
那么现在的问题

11:31.700 --> 11:33.700
回到服务端

11:33.700 --> 11:37.260
服务端

11:37.260 --> 11:38.260
我们这里记住一下

11:38.260 --> 11:39.260
科普端的请求

11:39.260 --> 11:41.260
content-cap的格式

11:41.260 --> 11:45.260
是multipart form data

11:45.260 --> 11:47.260
请求的是这种格式

11:47.260 --> 11:49.260
然后现在回到服端

11:49.260 --> 11:52.260
就是服务端如何处理

11:52.260 --> 11:55.260
如何得到上传的文件

11:56.260 --> 11:57.260
刚才我们上传的文件

11:57.260 --> 11:58.260
服务器如何得到

11:58.260 --> 12:00.260
这里我们要使用一个中间键

12:00.260 --> 12:04.260
使用express的中间键

12:04.260 --> 12:06.260
这个中间键的名字叫做

12:06.260 --> 12:09.260
multipart

12:09.260 --> 12:11.260
multipart表示的是

12:11.260 --> 12:13.260
多个的意思

12:13.260 --> 12:16.260
其实它有点对应着multipart

12:16.260 --> 12:18.260
其实用这种格式上传

12:18.260 --> 12:19.260
这种格式发送消息的话

12:19.260 --> 12:21.260
往往是上传文件

12:21.260 --> 12:22.260
那么这个multipart

12:22.260 --> 12:24.260
中间键专门来处理这个问题

12:25.260 --> 12:28.260
我们可以在npm里边

12:28.260 --> 12:30.260
找到这个中间键

12:30.260 --> 12:32.260
我们去搜一下

12:32.260 --> 12:33.260
搜一下这个

12:33.260 --> 12:38.750
看到这个中间键

12:40.750 --> 12:41.750
用的还是蛮多的

12:41.750 --> 12:44.750
你看周下载量有43万

12:44.750 --> 12:45.750
这个文档里边

12:45.750 --> 12:47.750
终于有中文文档了

12:47.750 --> 12:48.750
不错

12:48.750 --> 12:49.750
挺好的

12:49.750 --> 12:50.750
我们点击一下

12:50.750 --> 12:54.750
点击一下中文

12:54.750 --> 12:55.750
看一下

12:55.750 --> 12:56.750
还有中文文档的

12:56.750 --> 12:57.750
那么怎么去使用

12:57.750 --> 12:58.750
它说的很清楚

12:58.750 --> 12:59.750
管它那么多

12:59.750 --> 13:00.750
我先把它安装了

13:00.750 --> 13:02.750
先安装了再说

13:02.750 --> 13:03.750
这里呢

13:03.750 --> 13:05.750
我们

13:05.750 --> 13:08.750
这里停止一下

13:08.750 --> 13:09.750
首先安装它

13:09.750 --> 13:10.750
add

13:10.750 --> 13:12.750
multipart

13:12.750 --> 13:15.450
安装它

13:15.450 --> 13:16.450
稍等一下

13:16.450 --> 13:17.450
安装完了过后

13:17.450 --> 13:19.450
由于它是用介式写的

13:19.450 --> 13:20.450
所以说

13:20.450 --> 13:21.450
老规矩

13:21.450 --> 13:23.450
安装内型固

13:23.450 --> 13:24.450
taps

13:24.450 --> 13:25.450
multipart

13:25.450 --> 13:27.450
安装它的内型固

13:28.450 --> 13:29.450
安装完了

13:29.450 --> 13:30.450
好

13:30.450 --> 13:31.450
这个中间键

13:31.450 --> 13:33.450
这个中间键安装好了过后

13:33.450 --> 13:34.450
我们现在

13:34.450 --> 13:36.450
看一下中间键怎么去使用

13:36.450 --> 13:38.450
怎么使用的

13:38.450 --> 13:40.950
看一下

13:40.950 --> 13:42.950
它其实使用起来了

13:42.950 --> 13:44.950
非常非常的简单

13:44.950 --> 13:46.950
它告诉你

13:46.950 --> 13:47.950
首先

13:47.950 --> 13:49.950
你把这个中间键

13:49.950 --> 13:50.950
导入进来

13:50.950 --> 13:52.950
把这个中间键导入进来

13:52.950 --> 13:53.950
你看

13:53.950 --> 13:54.950
通过这种方式

13:54.950 --> 13:56.950
把这个中间键导入进来

13:56.950 --> 13:57.950
先导入进来

13:57.950 --> 13:58.950
先导入进来

13:58.950 --> 13:59.950
把multipart

13:59.950 --> 14:01.950
但是我们这里肯定不使用require的

14:01.950 --> 14:02.950
这种方式

14:02.950 --> 14:03.950
我们使用es6的这种方式

14:03.950 --> 14:04.950
导入进来

14:04.950 --> 14:05.950
multipart

14:05.950 --> 14:07.950
我们到代码里边来

14:07.950 --> 14:08.950
先在这里

14:08.950 --> 14:09.950
导入进来

14:09.950 --> 14:13.330
multipart

14:13.330 --> 14:14.330
说

14:14.330 --> 14:15.330
multipart

14:15.330 --> 14:16.330
导入进来

14:16.330 --> 14:17.330
导入进来过后

14:17.330 --> 14:18.330
又如何来使用呢

14:18.330 --> 14:20.330
我们看它的文档

14:20.330 --> 14:21.330
它说

14:21.330 --> 14:22.330
然后

14:22.330 --> 14:23.330
你可以调用这个东西

14:23.330 --> 14:24.330
它是一个函数

14:24.330 --> 14:26.330
你可以调用它

14:26.330 --> 14:27.330
调用它的时候

14:27.330 --> 14:28.330
配置对象

14:28.330 --> 14:29.330
像这种东西

14:29.330 --> 14:30.330
我怎么知道是配置对象

14:30.330 --> 14:32.330
真的不是我用过的

14:32.330 --> 14:35.330
其实我好久都没用过这个玩意了

14:35.330 --> 14:36.330
因为我看到这个东西

14:36.330 --> 14:38.330
就猜到它是个配置对象

14:38.330 --> 14:39.330
好

14:39.330 --> 14:40.330
配置对象里面

14:40.330 --> 14:41.330
你看我都不用看下面的文档

14:41.330 --> 14:42.330
它都告诉我

14:42.330 --> 14:44.330
配置对象里面有一个属性叫dest

14:44.330 --> 14:46.330
你觉得啥意思呢

14:46.330 --> 14:48.330
它应该是一个单词叫destination

14:48.330 --> 14:50.330
表示的是目标

14:50.330 --> 14:51.330
保存的位置

14:51.330 --> 14:53.330
我要把上传的文件保存到那

14:53.330 --> 14:55.330
保存的目标

14:55.330 --> 14:56.330
那么这里肯定要给个路径

14:56.330 --> 14:57.330
对吧

14:57.330 --> 14:58.330
给一个路径

14:58.330 --> 14:59.330
保存到这个文件夹

14:59.330 --> 15:02.330
Upload这个文件夹

15:02.330 --> 15:03.330
好

15:03.330 --> 15:04.330
让我们试一下吧

15:04.330 --> 15:05.330
试一下

15:05.330 --> 15:07.330
我们调用这个函数

15:07.330 --> 15:08.330
把配置给它传进去

15:08.330 --> 15:10.330
它会得到一个新的东西

15:10.330 --> 15:12.330
这个新的东西一会儿肯定有用

15:12.330 --> 15:14.330
我们先这样子来做

15:14.330 --> 15:15.330
这里呢

15:15.330 --> 15:17.330
我们先

15:17.330 --> 15:19.330
调用这个函数

15:19.330 --> 15:21.330
传一个配置对象进去

15:21.330 --> 15:22.330
配置对象传进去

15:22.330 --> 15:23.330
你看

15:23.330 --> 15:24.330
它这里

15:24.330 --> 15:25.330
TS里面有提示

15:25.330 --> 15:26.330
配置

15:26.330 --> 15:27.330
它是个什么配置呢

15:27.330 --> 15:29.330
叫matter options

15:29.330 --> 15:31.330
也可以不配置

15:31.330 --> 15:32.330
因为它是可选的

15:32.330 --> 15:33.330
这里呢

15:33.330 --> 15:36.330
我跟它一样传一个destination

15:36.330 --> 15:37.330
表示目标

15:37.330 --> 15:39.330
保存的目标位置在哪呢

15:39.330 --> 15:40.330
我给它写一个

15:40.330 --> 15:41.330
比方说

15:41.330 --> 15:42.330
保存

15:42.330 --> 15:44.330
保存

15:44.330 --> 15:46.330
我们这里干脆给它一个绝对路径

15:46.330 --> 15:48.330
我希望

15:48.330 --> 15:50.330
把这些文件保存到这个目标下边

15:50.330 --> 15:52.330
public

15:52.330 --> 15:54.330
public目标下边的

15:54.330 --> 15:57.330
plode

15:57.330 --> 15:59.330
我希望保存到这个目标下边

15:59.330 --> 16:00.330
所以说我这里

16:00.330 --> 16:02.330
还是给它一个路径

16:02.330 --> 16:04.330
给它一个路径

16:04.330 --> 16:05.330
我们这里呢

16:05.330 --> 16:07.330
把这个导入进来

16:07.330 --> 16:09.330
pass

16:09.330 --> 16:10.330
pass

16:10.330 --> 16:12.330
把这个处理路径的这个

16:12.330 --> 16:14.330
模块保存进来

16:14.330 --> 16:15.330
然后呢

16:15.330 --> 16:17.330
这边我可以使用这种方式

16:17.330 --> 16:20.330
passresult

16:20.330 --> 16:21.330
做什么呢

16:21.330 --> 16:23.330
它是把一个路径处理成为

16:23.330 --> 16:26.330
把一块一块的路径处理成为一个

16:26.330 --> 16:27.330
绝对路径

16:27.330 --> 16:29.330
处理成为一个绝对路径

16:29.330 --> 16:31.330
首先是当前目的

16:31.330 --> 16:32.330
di2.0

16:32.330 --> 16:33.330
然后呢

16:33.330 --> 16:35.330
我们要返回上一期

16:35.330 --> 16:37.330
稍微上一期就是src对吧

16:37.330 --> 16:40.330
再返回上一期就是server

16:40.330 --> 16:42.330
然后找到public

16:42.330 --> 16:43.330
找到public

16:43.330 --> 16:45.330
找到upload

16:45.330 --> 16:47.330
这个文件夹

16:47.330 --> 16:48.330
好

16:48.330 --> 16:49.330
先写好这个配置

16:49.330 --> 16:51.330
我们要把文件保存到这

16:51.330 --> 16:53.330
保存到这

16:53.330 --> 16:54.330
好

16:54.330 --> 16:55.330
那么写好这个配置过后

16:55.330 --> 16:56.330
创建了一个对象

16:56.330 --> 16:57.330
创建了一个对象

16:57.330 --> 16:59.330
我们要到时候用

16:59.330 --> 17:00.330
根据官方文章的说明

17:00.330 --> 17:01.330
我们到时候要用

17:01.330 --> 17:03.330
叫upload的对象

17:03.330 --> 17:04.330
我先建好

17:04.330 --> 17:05.330
建好这个对象

17:05.330 --> 17:07.330
我们这里放个行吧

17:07.330 --> 17:08.330
放个行

17:08.330 --> 17:10.330
这里放个行

17:15.240 --> 17:16.240
这样子

17:16.240 --> 17:18.240
好 这样子

17:18.240 --> 17:19.240
好 写好了之后

17:19.240 --> 17:21.240
我们看看接下来怎么用

17:21.240 --> 17:22.240
接下来它说

17:22.240 --> 17:23.240
在你请求的时候呢

17:23.240 --> 17:26.240
这个upload对象里面有些函数

17:26.240 --> 17:28.240
这些函数可以返回一个处理器

17:28.240 --> 17:29.240
拿去看一下

17:29.240 --> 17:30.240
它既然能放在这

17:30.240 --> 17:32.240
是不是一定可以处理请求

17:32.240 --> 17:33.240
对吧

17:33.240 --> 17:34.240
它一定可以处理请求的

17:34.240 --> 17:36.240
所以说你可以把它放到这

17:36.240 --> 17:38.240
来处理这个请求

17:38.240 --> 17:40.240
好 它里面有些函数

17:40.240 --> 17:41.240
一个是single

17:41.240 --> 17:43.240
一个是array

17:43.240 --> 17:44.240
一个是single

17:44.240 --> 17:45.240
一个是array

17:45.240 --> 17:46.240
那么你想一想

17:46.240 --> 17:48.240
你想一想

17:48.240 --> 17:50.240
这个single和array

17:50.240 --> 17:52.240
表啥意思呢

17:52.240 --> 17:53.240
表啥意思

17:53.240 --> 17:55.240
其实你看一下后边的说明

17:55.240 --> 17:56.240
你就明白了

17:56.240 --> 17:57.240
其实这里可以猜得到

17:57.240 --> 18:00.240
single它是处理单个文件的

18:00.240 --> 18:02.240
那么array是处理上

18:02.240 --> 18:04.240
是处理多个文件的

18:04.240 --> 18:06.240
由于我们这个系统里边

18:06.240 --> 18:09.240
就只处理单个文件

18:09.240 --> 18:10.240
就只处理单个文件

18:10.240 --> 18:12.240
所以说这里我们用single就够了

18:12.240 --> 18:13.240
当然如果你要处理多个的话

18:13.240 --> 18:15.240
你看一下这个函数

18:15.240 --> 18:17.240
好 我们这里

18:17.240 --> 18:19.240
我们就在这

18:19.240 --> 18:20.240
加一个处理器

18:20.240 --> 18:21.240
因为这里我们知道

18:21.240 --> 18:22.240
在处理的时候可以加

18:22.240 --> 18:24.240
可以有多个处理器

18:24.240 --> 18:26.240
我们这里再加一个处理器

18:26.240 --> 18:29.240
就是upload single

18:29.240 --> 18:31.240
single

18:31.240 --> 18:32.240
这里面

18:32.240 --> 18:33.240
要传一个字符串

18:33.240 --> 18:35.240
这个字符串是啥意思呢

18:35.240 --> 18:36.240
它告诉我

18:36.240 --> 18:38.240
是feel的name

18:38.240 --> 18:40.240
feel的name

18:40.240 --> 18:42.240
这个feel的name啥意思

18:42.240 --> 18:44.240
这个feel的name啥意思

18:44.240 --> 18:45.240
这个feel的name的意思呢

18:45.240 --> 18:47.240
指的就是这个玩意

18:47.240 --> 18:49.240
要对应到这个玩意

18:49.240 --> 18:51.240
要对应到它

18:51.240 --> 18:53.240
它会用这个件去取

18:53.240 --> 18:55.240
它的相应文件

18:55.240 --> 18:56.240
如果你上传了多个文件

18:56.240 --> 18:57.240
那么它取多个

18:57.240 --> 18:58.240
如果你上传了单个文件

18:58.240 --> 18:59.240
它取单个

18:59.240 --> 19:00.240
那么到底要取单个

19:00.240 --> 19:01.240
还是取多个

19:01.240 --> 19:02.240
你通过这个函数告诉它

19:02.240 --> 19:04.240
如果你调用的是single函数

19:04.240 --> 19:05.240
它只取一个

19:05.240 --> 19:07.240
如果你调用的是

19:07.240 --> 19:08.240
Array这个函数

19:08.240 --> 19:09.240
它取多个

19:09.240 --> 19:11.240
就这么简单

19:11.240 --> 19:12.240
让它来进行处理

19:12.240 --> 19:14.240
它会把你上传的文件

19:14.240 --> 19:15.240
保存到这个目录

19:15.240 --> 19:16.240
就这么简单

19:16.240 --> 19:17.240
好

19:17.240 --> 19:18.240
single里边

19:18.240 --> 19:19.240
我们写啥呢

19:19.240 --> 19:20.240
这个single里边

19:20.240 --> 19:21.240
这个字符刷参数

19:21.240 --> 19:22.240
我们写的是

19:22.240 --> 19:24.240
输写的是这个件值

19:24.240 --> 19:25.240
好

19:25.240 --> 19:26.240
那么这里你要约定好

19:26.240 --> 19:27.240
你要进行约定

19:27.240 --> 19:30.240
约定它的件的名称呢

19:30.240 --> 19:31.240
比方说

19:31.240 --> 19:33.240
比方说咱们上传的话

19:33.240 --> 19:34.240
一般就上传图片

19:34.240 --> 19:35.240
对吧

19:35.240 --> 19:36.240
我这个系统里面

19:36.240 --> 19:37.240
还不考虑其他的东西上传

19:37.240 --> 19:39.240
你自己去约定一个东西吧

19:39.240 --> 19:42.240
我们这里上传比方说

19:42.240 --> 19:44.240
upload

19:44.240 --> 19:47.240
或者叫img file

19:47.240 --> 19:48.240
好

19:48.240 --> 19:49.240
我们约定

19:49.240 --> 19:50.240
你的文件名字

19:50.240 --> 19:54.240
你的件名必须要叫做img file

19:54.240 --> 19:55.240
好

19:55.240 --> 19:56.240
保存一下

19:56.240 --> 19:57.240
到这边来

19:57.240 --> 19:59.240
我们把这里改一下

19:59.240 --> 20:01.240
img file

20:01.240 --> 20:03.240
然后这里

20:03.240 --> 20:04.240
其他的不要了

20:04.240 --> 20:05.240
我们就看这个文件

20:05.240 --> 20:07.240
就看这一个文件就行了

20:07.240 --> 20:08.240
好

20:08.240 --> 20:09.240
上传

20:09.240 --> 20:11.620
来看一下

20:11.620 --> 20:12.620
哎呀

20:12.620 --> 20:13.620
呼吸这边

20:13.620 --> 20:14.620
这边还没运行

20:15.620 --> 20:16.620
还没运行

20:16.620 --> 20:18.620
运行出来

20:18.620 --> 20:19.620
好

20:19.620 --> 20:21.620
现在我们再来上传

20:21.620 --> 20:23.620
发送请求

20:23.620 --> 20:24.620
好

20:24.620 --> 20:25.620
它上传文件成功

20:25.620 --> 20:26.620
真的成功了吗

20:26.620 --> 20:28.620
我们来看一下

20:28.620 --> 20:29.620
我们来看一下这里

20:29.620 --> 20:31.620
你看这个upload文件夹里边

20:31.620 --> 20:33.620
说有了一个文件了

20:33.620 --> 20:35.620
就已经有了一个文件了

20:35.620 --> 20:36.620
这个文件为什么打不开呢

20:36.620 --> 20:37.620
因为这个文件

20:37.620 --> 20:38.620
它没有后坠

20:38.620 --> 20:40.620
发现没

20:40.620 --> 20:42.620
这个文件它是没有后坠的

20:43.620 --> 20:44.620
它怎么会没有后坠呢

20:44.620 --> 20:45.620
它就没有后坠

20:45.620 --> 20:46.620
因为这个插件

20:46.620 --> 20:47.620
这个中间件

20:47.620 --> 20:48.620
它保存文件

20:48.620 --> 20:49.620
不可以保存后坠的

20:49.620 --> 20:51.620
不可以保存后坠的文件

20:51.620 --> 20:52.620
好

20:52.620 --> 20:53.620
我们这里从命名一下

20:53.620 --> 20:54.620
因为我们知道

20:54.620 --> 20:55.620
它是个接脾气文件

20:55.620 --> 20:56.620
所以说给它加一个后坠

20:56.620 --> 20:57.620
接脾气

20:57.620 --> 20:58.620
你看

20:58.620 --> 20:59.620
所以我图片就出来了

20:59.620 --> 21:00.620
好

21:00.620 --> 21:01.620
因此呢

21:01.620 --> 21:02.620
它就上传了

21:02.620 --> 21:03.620
完成了上传图片

21:03.620 --> 21:04.620
我发现这里

21:04.620 --> 21:05.620
G成

21:05.620 --> 21:06.620
它把这个东西也找完了

21:06.620 --> 21:07.620
把这个目录也找完了

21:07.620 --> 21:08.620
这个目录

21:08.620 --> 21:09.620
我希望忽略掉

21:09.620 --> 21:10.620
跟G成一样忽略掉

21:10.620 --> 21:11.620
然后我这里

21:11.620 --> 21:12.620
加一个upload的目录

21:12.620 --> 21:13.620
upload的目录

21:13.620 --> 21:14.620
不要去管

21:14.620 --> 21:16.620
把这个地方忽略掉

21:17.620 --> 21:18.620
好

21:18.620 --> 21:19.620
现在呢

21:19.620 --> 21:21.620
我们已经能够完成图片上传了

21:21.620 --> 21:23.620
并且的图片保存到这个目录下面

21:23.620 --> 21:25.620
现在有一些问题

21:25.620 --> 21:26.620
有一些问题要处理

21:26.620 --> 21:28.620
第一个问题

21:28.620 --> 21:29.620
第一个问题

21:29.620 --> 21:30.620
我们来

21:30.620 --> 21:33.120
问题

21:33.120 --> 21:35.120
发现问题要处理

21:35.120 --> 21:37.120
第一个问题

21:37.120 --> 21:39.120
如何

21:39.120 --> 21:40.120
设置

21:40.120 --> 21:42.120
上传的

21:42.120 --> 21:44.120
文件名

21:44.120 --> 21:47.120
文件名如何来设置

21:47.120 --> 21:49.120
你不能老是给我

21:49.120 --> 21:50.120
不给我文件名

21:50.120 --> 21:51.120
不给我文件名

21:51.120 --> 21:52.120
我到时候怎么咋用呢

21:52.120 --> 21:53.120
没法用啊

21:53.120 --> 21:54.120
这个文件

21:54.120 --> 21:55.120
所以说

21:55.120 --> 21:56.120
我要能够设置

21:56.120 --> 21:57.120
上传的文件名

21:57.120 --> 21:59.120
而上传的文件名

21:59.120 --> 22:01.120
是根据什么来设置的呢

22:01.120 --> 22:03.120
是根据你的文件来设置的

22:03.120 --> 22:04.120
啥意思

22:04.120 --> 22:06.120
就是说你上传的这个文件

22:06.120 --> 22:07.120
是啥后续名

22:07.120 --> 22:08.120
你看你这上传的是PNG对吧

22:08.120 --> 22:09.120
其实我这里

22:09.120 --> 22:11.120
应该用PNG才对

22:11.120 --> 22:13.120
如果你上传的是GIF

22:13.120 --> 22:14.120
那么我这里的后续名

22:14.120 --> 22:16.120
也应该是GIF

22:16.120 --> 22:18.120
要根据你的file name

22:18.120 --> 22:20.120
来定你的文件扩展名

22:20.120 --> 22:21.120
到底是啥

22:21.120 --> 22:22.120
所以说

22:22.120 --> 22:24.120
这里的文件名

22:24.120 --> 22:26.120
应该是

22:26.120 --> 22:28.120
根据客户端

22:28.120 --> 22:30.120
客户端的文件

22:30.120 --> 22:32.120
后续名

22:32.120 --> 22:34.120
决定

22:34.120 --> 22:36.120
文件后续名

22:36.120 --> 22:37.120
后续名

22:37.120 --> 22:38.120
好

22:38.120 --> 22:39.120
那么这个东西

22:39.120 --> 22:40.120
该怎么来做呢

22:40.120 --> 22:41.120
要先解决

22:41.120 --> 22:42.120
怎么来做呢

22:43.120 --> 22:45.120
我们看一下它的文档

22:45.120 --> 22:46.120
它的文档下边

22:46.120 --> 22:48.120
说到了这么一些东西

22:48.120 --> 22:50.120
说到了这么一些东西

22:50.120 --> 22:51.120
它说

22:51.120 --> 22:52.120
我们看一下

22:52.120 --> 22:53.120
在哪

22:55.120 --> 22:57.120
我们看一下在哪

22:58.120 --> 22:59.120
下面

22:59.120 --> 23:00.120
下面

23:00.120 --> 23:01.120
好 这里

23:02.120 --> 23:03.120
它说如果你要

23:03.120 --> 23:05.120
手动的控制文件名的话

23:05.120 --> 23:07.120
它的文件名是随隙生成的

23:07.120 --> 23:08.120
如果你要

23:08.120 --> 23:09.120
手动的控制文件名的话

23:09.120 --> 23:11.120
需要去配置这么一个东西

23:12.120 --> 23:13.120
叫做storage

23:14.120 --> 23:15.120
怎么配置呢

23:15.120 --> 23:16.120
是通过mouter

23:16.120 --> 23:17.120
你管它是

23:17.120 --> 23:18.120
为什么有这样的规则

23:18.120 --> 23:19.120
我跟着它用就行了

23:19.120 --> 23:21.120
这无非就是一个中间键而已

23:21.120 --> 23:23.120
不用考虑得太过于深入

23:23.120 --> 23:24.120
它怎么说我们就怎么用

23:24.120 --> 23:26.120
它说你要通过mouter

23:26.120 --> 23:27.120
调用一个函数

23:27.120 --> 23:28.120
叫做disk

23:28.120 --> 23:30.120
disk表示磁盘

23:30.120 --> 23:32.120
storage表示磁盘存储

23:32.120 --> 23:33.120
这里面有个配置

23:33.120 --> 23:36.120
这个函数里面有两个地方可以配置

23:36.120 --> 23:37.120
一个配置呢

23:37.120 --> 23:38.120
它告诉你

23:38.120 --> 23:40.120
一个配置是保存的目标

23:40.120 --> 23:42.120
你可以动态生成保存的目标

23:42.120 --> 23:44.120
我们刚才是写实的

23:44.120 --> 23:46.120
但是你可以动态生成的

23:46.120 --> 23:48.120
第二个是文件的名字

23:48.120 --> 23:51.120
文件的名字你也可以动态生成

23:51.120 --> 23:53.120
好 写好这个配置过后

23:53.120 --> 23:54.120
保存了一个对象里边

23:54.120 --> 23:55.120
然后一会儿

23:55.120 --> 23:57.120
我们调用mouter这个函数的时候

23:57.120 --> 23:59.120
把这个对象传进去

23:59.120 --> 24:00.120
把这个对象传进去

24:00.120 --> 24:01.120
这样子

24:01.120 --> 24:03.120
它就能按照我们配置的要求

24:03.120 --> 24:05.120
来生成文件名

24:05.120 --> 24:07.120
以及保存的目标位置

24:07.120 --> 24:08.120
就是有的时候

24:08.120 --> 24:10.120
你可能会根据不同的情况

24:10.120 --> 24:12.120
一会儿表面的商品是图片

24:12.120 --> 24:13.120
保存了这个位置

24:13.120 --> 24:15.120
一旦看到是另外一个表格

24:15.120 --> 24:16.120
保存到另外一个位置

24:16.120 --> 24:19.120
那么就可以通过这种方式来进行配置了

24:19.120 --> 24:21.120
好了 那我们就按照它来

24:21.120 --> 24:23.120
它这么说我们就怎么做

24:24.120 --> 24:26.120
要听话 要乖

24:26.120 --> 24:28.120
它这么说我们就怎么做

24:28.120 --> 24:29.120
它开发的东西

24:29.120 --> 24:30.120
我们要用它的

24:30.120 --> 24:31.120
不然怎么办呢

24:31.120 --> 24:36.380
这里

24:36.380 --> 24:39.380
我们这里通过disk storage

24:39.380 --> 24:40.380
来进行配置

24:40.380 --> 24:41.380
两个地方要配置

24:41.380 --> 24:43.380
一个是disk destination

24:43.380 --> 24:44.380
一个是disk destination

24:44.380 --> 24:45.380
我们看一下

24:45.380 --> 24:47.380
这里面它说了一个什么问题

24:47.380 --> 24:49.380
这里是tsn int

24:49.380 --> 24:52.380
出现的一个错误

24:52.380 --> 24:54.380
它说

24:54.380 --> 24:56.380
它说你这样子写呢

24:56.380 --> 24:57.380
不是不能写

24:57.380 --> 24:58.380
它说它建议你咋写呢

24:58.380 --> 25:00.380
它建议你用这种写法

25:00.380 --> 25:01.380
挺好的

25:01.380 --> 25:02.380
我觉得挺好的

25:02.380 --> 25:03.380
我就用这种写法吧

25:03.380 --> 25:05.380
就用这种写法

25:05.380 --> 25:07.380
它是disk destination

25:07.380 --> 25:08.380
你这里的配置呢

25:08.380 --> 25:10.380
你这里的配置是一个函数

25:10.380 --> 25:12.380
你可以动态的来生成

25:12.380 --> 25:14.380
你要保存的目标位置

25:14.380 --> 25:16.380
我们刚才配置的是

25:16.380 --> 25:17.380
你看写死的 对吧

25:17.380 --> 25:18.380
写死的

25:18.380 --> 25:20.380
那么其实保存的文件夹呢

25:20.380 --> 25:21.380
我们本来就是写死的

25:21.380 --> 25:22.380
我看一下它能不能直接配置

25:22.380 --> 25:23.380
为一个植物串

25:23.380 --> 25:25.380
我看一下能不能直接配置

25:25.380 --> 25:26.380
为一个植物串

25:26.380 --> 25:27.380
它是可以的 对吧

25:27.380 --> 25:28.380
它可以的

25:28.380 --> 25:29.380
那我就把这个地方

25:29.380 --> 25:31.380
我就把这个代码放在

25:31.380 --> 25:33.380
表示我的目标

25:33.380 --> 25:34.380
存出的目标位置

25:34.380 --> 25:36.380
就是文件夹的路径

25:37.380 --> 25:39.380
当然它也支持用函数来书写

25:39.380 --> 25:40.380
函数返回的结果

25:40.380 --> 25:41.380
就是函数里边

25:41.380 --> 25:42.380
可以给它指定

25:42.380 --> 25:43.380
它保存的位置在那

25:43.380 --> 25:44.380
可以动态决定

25:44.380 --> 25:46.380
那我这里就写死吧

25:46.380 --> 25:47.380
因为我这里呢

25:47.380 --> 25:49.380
也没有什么好动态决定的

25:50.380 --> 25:51.380
好 再看另外一个

25:51.380 --> 25:52.380
文件名

25:52.380 --> 25:53.380
我就要搞定这一块

25:53.380 --> 25:54.380
文件名

25:56.380 --> 25:57.380
文件名这一块呢

25:57.380 --> 25:59.380
我要去生成一个文件名

26:00.380 --> 26:01.380
那么这个文件名呢

26:01.380 --> 26:03.380
我应该怎么来得到呢

26:03.380 --> 26:04.380
看一下我们刚才分析的

26:04.380 --> 26:05.380
我应该根据

26:05.380 --> 26:06.380
客户端的文件

26:06.380 --> 26:07.380
候决民决定

26:08.380 --> 26:09.380
根据客户端的文件

26:09.380 --> 26:10.380
候决民来决定

26:11.380 --> 26:12.380
好 那么

26:12.380 --> 26:13.380
我这里呢

26:13.380 --> 26:14.380
就要产生

26:14.380 --> 26:15.380
要做这么两件事情

26:15.380 --> 26:16.380
第一个

26:16.380 --> 26:18.380
文件名是啥

26:18.380 --> 26:19.380
第二个

26:19.380 --> 26:21.380
候决民是啥

26:21.380 --> 26:22.380
一个个来

26:22.380 --> 26:23.380
我把候决民得到了

26:23.380 --> 26:24.380
文件名得到了

26:24.380 --> 26:25.380
一拼接

26:25.380 --> 26:26.380
是不是就产生

26:26.380 --> 26:27.380
一个完整的文件名呢

26:27.380 --> 26:28.380
对不对

26:28.380 --> 26:29.380
好 第一个问题

26:30.380 --> 26:31.380
文件名是啥

26:32.380 --> 26:34.380
文件名还不简单吗

26:34.380 --> 26:35.380
文件名用这个

26:36.380 --> 26:38.380
你这里是1.PNG

26:38.380 --> 26:40.380
那我这里保存到服务器

26:40.380 --> 26:41.380
还是1.PNG

26:42.380 --> 26:43.380
行不行

26:43.380 --> 26:45.380
你觉得好不好这样子

26:46.380 --> 26:47.380
肯定是不好

26:48.380 --> 26:49.380
为啥呢

26:49.380 --> 26:50.380
他要重复

26:50.380 --> 26:52.380
他肯定要重复

26:52.380 --> 26:54.380
你这里用的1.PNG

26:54.380 --> 26:55.380
保存到服务器

26:55.380 --> 26:56.380
也用1.PNG

26:56.380 --> 26:57.380
你这里用的1.PNG

26:57.380 --> 26:58.380
你这里用的1.PNG

26:58.380 --> 26:59.380
你这里用的1.PNG

26:59.380 --> 27:00.380
保存到服务器

27:00.380 --> 27:01.380
也用1.PNG

27:01.380 --> 27:02.380
那么下一次

27:02.380 --> 27:03.380
我上传到

27:03.380 --> 27:05.380
另外一个文件家里的1.PNG

27:05.380 --> 27:06.380
是不是把服务器的那一块

27:06.380 --> 27:07.380
都覆盖掉了

27:08.380 --> 27:10.380
或者说你没有覆盖掉

27:10.380 --> 27:11.380
别人上传的文件

27:11.380 --> 27:13.380
也是一个1.PNG

27:13.380 --> 27:14.380
因为服务器时候

27:14.380 --> 27:15.380
给很多人访问的

27:15.380 --> 27:17.380
那别人访问上传的文件

27:17.380 --> 27:18.380
也是1.PNG

27:18.380 --> 27:20.380
那么我是不是也不敢要了

27:20.380 --> 27:21.380
所以文件名

27:21.380 --> 27:22.380
肯定是不能用

27:22.380 --> 27:23.380
科普端的这个名字

27:23.380 --> 27:25.380
肯定是不能用他的名字

27:25.380 --> 27:27.380
那么文件名用啥呢

27:27.380 --> 27:28.380
文件名呢

27:29.380 --> 27:31.380
最好可以随机生成

27:31.380 --> 27:33.380
比方说我们用一个时间戳

27:33.380 --> 27:34.380
一个时间戳

27:37.380 --> 27:38.380
得到一个日期

27:38.380 --> 27:39.380
日期里面不是有个get time吗

27:39.380 --> 27:40.380
对吧

27:40.380 --> 27:41.380
得到当前的好秒数

27:41.380 --> 27:43.380
我们可以用个时间戳

27:43.380 --> 27:45.380
甚至再加上一段随机数

27:45.380 --> 27:47.380
保证文件名不能重复

27:48.380 --> 27:49.380
我们比方说

27:49.380 --> 27:50.380
用这个时间戳

27:50.380 --> 27:51.380
来表示的是

27:51.380 --> 27:52.380
来表示文件名

27:56.170 --> 27:58.170
用这个来表示文件名

27:58.170 --> 27:59.170
这个就简单了

28:00.170 --> 28:02.170
后罪名是啥呢

28:03.170 --> 28:04.170
后罪名是啥呢

28:05.170 --> 28:07.170
后罪名我们应该根据

28:07.170 --> 28:08.170
这个文件

28:08.170 --> 28:09.170
就是你科普端

28:09.170 --> 28:11.170
这边你的文件

28:11.170 --> 28:12.170
后罪名是啥

28:12.170 --> 28:13.170
那么我就用啥

28:13.170 --> 28:15.170
这个应该是符合逻辑的吧

28:15.170 --> 28:17.170
后罪名我可以根据你的来

28:17.170 --> 28:20.170
不然你的是一个动土GIF

28:20.170 --> 28:21.170
到了我这边变成一个PNG

28:21.170 --> 28:22.170
那就动不了了

28:22.170 --> 28:23.170
对吧

28:23.170 --> 28:24.170
我应该根据你的后罪名

28:24.170 --> 28:26.170
所以后罪名

28:26.170 --> 28:28.170
我可以按照你的要求来

28:28.170 --> 28:30.170
因此我这里就设计到一个问题

28:30.170 --> 28:32.170
我怎么读到这个东西

28:32.170 --> 28:34.170
我在服务器怎么读到这个东西

28:34.170 --> 28:35.170
怎么办

28:35.170 --> 28:39.610
文档里面肯定有说

28:39.610 --> 28:40.610
你看这个函数里面

28:40.610 --> 28:42.610
可以传达三个函数简单

28:42.610 --> 28:43.610
一个是request对象

28:43.610 --> 28:45.610
一个是file对象

28:45.610 --> 28:47.610
十字八九的file对象里面

28:47.610 --> 28:48.610
就有这个信息

28:48.610 --> 28:49.610
甚至说你可以在这里

28:49.610 --> 28:50.610
打印出来

28:50.610 --> 28:51.610
你都可以得到

28:51.610 --> 28:52.610
我们来看一下

28:52.610 --> 28:53.610
文档里面肯定有说

28:55.610 --> 28:57.610
我们看一下file

28:59.610 --> 29:01.610
它说每个文件都具有下面的信息

29:01.610 --> 29:02.610
说的是啥

29:02.610 --> 29:03.610
说就是个函数

29:03.610 --> 29:04.610
file

29:05.610 --> 29:06.610
everyfile

29:07.610 --> 29:08.610
information

29:08.610 --> 29:09.610
对于下面的信息

29:09.610 --> 29:11.610
其中有一个信息

29:11.610 --> 29:13.610
叫做file name

29:13.610 --> 29:15.610
file name

29:15.610 --> 29:16.610
不对

29:16.610 --> 29:17.610
应该是在你们看一下

29:17.610 --> 29:19.610
应该是这

29:19.610 --> 29:21.610
orange name

29:21.610 --> 29:22.610
orange name

29:22.610 --> 29:23.610
这个表示的是

29:23.610 --> 29:25.610
用户计算机上的文件名称

29:25.610 --> 29:27.610
用户计算机上的文件名称

29:28.610 --> 29:30.610
我们先假设

29:30.610 --> 29:32.610
那么我们这个

29:32.610 --> 29:33.610
假设我们先

29:33.610 --> 29:35.610
它是正确的

29:35.610 --> 29:37.610
orange name

29:37.610 --> 29:38.610
file name

29:38.610 --> 29:40.610
就来自于file name

29:40.610 --> 29:41.610
orange name

29:41.610 --> 29:42.610
file name

29:42.610 --> 29:43.610
你看现在有智能提示

29:43.610 --> 29:45.610
我们就不怕写错了

29:45.610 --> 29:46.610
先把得到

29:46.610 --> 29:47.610
或者说它这个代码也不长

29:47.610 --> 29:48.610
对吧

29:48.610 --> 29:49.610
我直接用它就行了

29:49.610 --> 29:51.610
我要得到这个路径的文件

29:51.610 --> 29:52.610
后续名

29:52.610 --> 29:53.610
怎么得到

29:53.610 --> 29:55.610
我怎么得到一个路径的

29:55.610 --> 29:57.610
我现在把这个东西拿到了

29:57.610 --> 29:59.610
假设我们现在已经把它拿到了

29:59.610 --> 30:01.610
我怎么得到这个png

30:01.610 --> 30:03.610
怎么得到这个玩意

30:03.610 --> 30:05.610
怎么得到

30:05.610 --> 30:07.610
这里面不是有方法吗

30:07.610 --> 30:09.610
hands里边

30:09.610 --> 30:11.610
hands里边有一个ext name

30:11.610 --> 30:13.610
extension name

30:13.610 --> 30:14.610
表示后续名

30:14.610 --> 30:15.610
你给我一个文件路径

30:15.610 --> 30:18.610
我能得到一个后续名

30:18.610 --> 30:20.610
能得到一个后续名

30:20.610 --> 30:21.610
它就怎么得到

30:21.610 --> 30:23.610
就是读最后一个点

30:23.610 --> 30:25.610
我们自己写代码也可以

30:25.610 --> 30:27.610
把这个文件路径传进去

30:27.610 --> 30:30.610
文件路径传进去

30:30.610 --> 30:32.610
它会返回一个啥呢

30:32.610 --> 30:34.610
返回一个后续名

30:34.610 --> 30:36.610
你也是听得懂

30:36.610 --> 30:37.610
你看现在

30:37.610 --> 30:39.610
有了文件名

30:39.610 --> 30:40.610
有了后续名

30:40.610 --> 30:42.610
最后就是设置了

30:42.610 --> 30:47.610
就是设置文件的全称

30:47.610 --> 30:48.610
它怎么设置呢

30:48.610 --> 30:49.610
它这里文档

30:49.610 --> 30:51.610
官方文档里面说了

30:51.610 --> 30:53.610
你只要调用这个函数就完成了

30:53.610 --> 30:54.610
调用这个函数

30:54.610 --> 30:55.610
这是一个函数

30:55.610 --> 30:56.610
一个毁掉函数

30:56.610 --> 30:58.610
你只要调用这个函数

30:58.610 --> 30:59.610
第一个参数表示错误

30:59.610 --> 31:01.610
第一个参数表示错误

31:01.610 --> 31:03.610
如果你没有错误的话就行了

31:03.610 --> 31:05.610
这里没有错误

31:05.610 --> 31:06.610
没有错误的话

31:06.610 --> 31:08.610
第一个参数行了

31:08.610 --> 31:09.610
然后第二个参数

31:09.610 --> 31:11.610
第二个参数你就给我文件后续名

31:11.610 --> 31:13.610
给我文件的全称就行了

31:13.610 --> 31:14.610
全称哪些

31:14.610 --> 31:16.610
它凭结一个点

31:16.610 --> 31:17.610
不用凭结点了

31:17.610 --> 31:18.610
我这里用一个

31:18.610 --> 31:19.610
我版字无窗

31:19.610 --> 31:20.610
我版字无窗

31:20.610 --> 31:21.610
就是

31:21.610 --> 31:22.610
看

31:22.610 --> 31:23.610
然后在凭结上

31:23.610 --> 31:25.610
也是挺内

31:28.610 --> 31:30.610
这样子我就完成了

31:30.610 --> 31:31.610
这个块的配置

31:31.610 --> 31:33.610
就是保存文件的配置

31:33.610 --> 31:38.180
文件保存的配置

31:38.180 --> 31:40.180
配置完成了之后

31:40.180 --> 31:43.180
我把这个对象配置到这边来

31:43.180 --> 31:46.180
按照它官方文档的要求

31:46.180 --> 31:48.180
我把这个story集配置到这边来

31:48.180 --> 31:49.180
它保存的时候

31:49.180 --> 31:52.180
就是按照这里的配置来进行保存了

31:52.180 --> 31:53.180
咱们再来试一下

31:53.180 --> 31:56.180
再来试一下保存一下

31:56.180 --> 31:58.180
到这边来

31:58.180 --> 32:01.180
发送请求

32:01.180 --> 32:02.180
文件上传成功

32:02.180 --> 32:04.180
我们看一下这边

32:04.180 --> 32:05.180
你看

32:05.180 --> 32:06.180
就出来了

32:06.180 --> 32:08.180
这个文件就上传成功了

32:08.180 --> 32:09.180
我们再来试一下

32:09.180 --> 32:10.180
再来试一下

32:10.180 --> 32:12.180
别的

32:12.180 --> 32:13.180
看一下

32:13.180 --> 32:16.180
这里换个文件

32:16.180 --> 32:18.180
这边

32:18.180 --> 32:20.180
随便换一张

32:20.180 --> 32:21.180
随便换一张

32:21.180 --> 32:22.180
发送

32:22.180 --> 32:24.180
上传成功

32:24.180 --> 32:25.180
你看

32:25.180 --> 32:27.180
这张图片也有

32:27.180 --> 32:28.180
OK

32:28.180 --> 32:29.180
那么现在我们完成了

32:29.180 --> 32:31.180
上传文件

32:31.180 --> 32:33.180
还有哪些事情没有做呢

32:33.180 --> 32:36.180
还有下面一件事情

32:36.180 --> 32:40.180
如何限制

32:40.180 --> 32:44.180
文件的上传尺寸

32:44.180 --> 32:46.180
这个尺寸指的是空间

32:46.180 --> 32:47.180
空间大小

32:48.180 --> 32:49.180
不是图片的尺寸

32:49.180 --> 32:50.180
不是图片都宽多高

32:50.180 --> 32:52.180
指的是占用的空间

32:52.180 --> 32:53.180
比方说一兆两兆

32:53.180 --> 32:55.180
你最多只能上传一兆的图片

32:55.180 --> 32:59.180
如何来限制文件的上传尺寸

32:59.180 --> 33:01.180
文档里边有

33:01.180 --> 33:03.180
这个文档里边有

33:03.180 --> 33:05.180
它会告诉你怎么来上传文件的尺寸

33:05.180 --> 33:07.180
往下找一找

33:07.180 --> 33:09.180
往下找一找

33:09.180 --> 33:10.180
我们看一下

33:10.180 --> 33:12.180
好 这里

33:12.180 --> 33:14.180
它说你在配置这个mouter的时候

33:14.180 --> 33:16.180
有很多的配置像

33:16.180 --> 33:19.180
其中一个配置像叫做Limits

33:19.180 --> 33:20.180
Limits

33:20.180 --> 33:22.180
这个配置像指的是什么呢

33:22.180 --> 33:25.180
指的是文件的数据大小

33:25.180 --> 33:27.180
文件的数据大小

33:27.180 --> 33:29.180
那么这里面有很多很多的限制

33:29.180 --> 33:30.180
各种各样的配置

33:30.180 --> 33:32.180
你可以自己去看一下

33:32.180 --> 33:33.180
这里面有哪些配置呢

33:33.180 --> 33:36.180
其中一个配置叫做feel的size

33:36.180 --> 33:39.180
就是每一个文件寓的最大长度

33:39.180 --> 33:41.180
默认为一兆

33:41.180 --> 33:43.180
默认为一兆

33:43.180 --> 33:45.180
那么我们可以看到有哪些曲子

33:45.180 --> 33:46.180
让我们看一下

33:46.180 --> 33:49.180
它说详细的特性可以在这里面看到

33:49.180 --> 33:51.180
把spoilers配置

33:51.180 --> 33:52.180
把它点开

33:52.180 --> 33:54.180
它告诉我会怎么来配置

33:54.180 --> 33:55.180
我们先把这个配置先写到这

33:55.180 --> 33:57.180
我们来去去来说

33:57.180 --> 33:59.180
这里

33:59.180 --> 34:01.180
除了有这个配置之外

34:01.180 --> 34:03.180
我们还有一个配置

34:03.180 --> 34:05.180
Limits

34:05.180 --> 34:09.180
Limits里面有一个配置叫feel的size

34:09.180 --> 34:11.180
feel的size

34:11.180 --> 34:12.180
有什么一个配置

34:12.180 --> 34:14.180
那么这个配置具体怎么写呢

34:14.180 --> 34:16.180
我们来看一下这边怎么说的

34:16.180 --> 34:18.180
这边怎么说的

34:18.180 --> 34:19.180
feel的size

34:19.180 --> 34:21.180
它说它是一个数字

34:21.180 --> 34:23.180
是一个种数

34:23.180 --> 34:26.180
那么它是说配置的单位

34:26.180 --> 34:29.180
是字节为单位

34:29.180 --> 34:31.180
以字节为单位

34:31.180 --> 34:33.180
那么我们知道1024个字节

34:33.180 --> 34:35.180
等于1kb

34:35.180 --> 34:37.180
1020kb等于一兆

34:37.180 --> 34:40.180
所以说我们这里怎么设置呢

34:40.180 --> 34:43.180
我们设置了就是1024

34:43.180 --> 34:46.180
一个1kb再乘以1024

34:46.180 --> 34:48.180
所以一兆

34:48.180 --> 34:52.180
文件注意多一兆

34:52.180 --> 34:54.180
最多一兆

34:54.180 --> 34:56.180
当然它好像默认就是一兆

34:56.180 --> 34:57.180
默认就是一兆

34:57.180 --> 34:58.180
当然你如果要改的话

34:58.180 --> 35:00.180
就用按照这种方式来配置

35:00.180 --> 35:02.180
好 这是文件的

35:02.180 --> 35:04.180
上传尺寸的问题

35:04.180 --> 35:06.180
好 那么现在我把限制为一兆了

35:06.180 --> 35:07.180
我们来看一下

35:07.180 --> 35:09.180
如果我上传的文件超过了一兆

35:09.180 --> 35:10.180
会怎么样

35:10.180 --> 35:12.180
超过了一兆

35:12.180 --> 35:14.180
好像这个文件就比较大

35:14.180 --> 35:16.180
上传

35:16.180 --> 35:17.180
它这里显示上传成功

35:17.180 --> 35:18.180
我们来看一下

35:18.180 --> 35:19.180
是不是真的成功了

35:19.180 --> 35:22.550
那这个

35:22.550 --> 35:24.550
那这个还不止一兆

35:24.550 --> 35:26.550
那个这个就没有一兆

35:26.550 --> 35:27.550
我们来看一下

35:27.550 --> 35:28.550
应该有一个图片

35:28.550 --> 35:30.550
我是超过一兆的

35:30.550 --> 35:31.550
咱们来看一下

35:31.550 --> 35:33.550
刚刚的图片是超过一兆的

35:33.550 --> 35:34.550
放在这里

35:34.550 --> 35:35.550
我先写一个图

35:35.550 --> 35:37.550
桌面

35:38.550 --> 35:40.550
这个也是

35:40.550 --> 35:41.550
这里

35:41.550 --> 35:43.550
我这个图片2.25兆

35:43.550 --> 35:44.550
它居然上传成功了

35:44.550 --> 35:45.550
那这里配置

35:45.550 --> 35:46.550
还不对

35:46.550 --> 35:47.550
还不对

35:47.550 --> 35:48.550
我们来看一下

35:48.550 --> 35:49.550
到底

35:49.550 --> 35:50.550
这里的配置不对

35:50.550 --> 35:51.550
不太对

35:51.550 --> 35:52.550
我们来看一下

35:52.550 --> 35:53.550
这边

35:53.550 --> 35:54.550
我配置错了

35:54.550 --> 35:55.550
我配置错了

35:55.550 --> 35:56.550
不好意思

35:56.550 --> 35:58.550
我配置成field size的

35:58.550 --> 36:00.550
我应该配置的是file size

36:00.550 --> 36:01.550
配置的是file size

36:01.550 --> 36:02.550
field size的话

36:02.550 --> 36:04.550
它只指的是field的值

36:04.550 --> 36:06.550
就是如果你是一个文字的话

36:06.550 --> 36:07.550
文字的话

36:07.550 --> 36:09.550
它是多少的限制

36:09.550 --> 36:11.550
就是如果你是文字的话

36:11.550 --> 36:12.550
你这个兼职队

36:12.550 --> 36:13.550
它的值是文字的话

36:13.550 --> 36:15.550
它的限制是最大的长度

36:15.550 --> 36:17.550
我这里应该配置的是file size

36:17.550 --> 36:18.550
file size

36:18.550 --> 36:20.550
我们再保存一次

36:21.550 --> 36:22.550
我们再来

36:22.550 --> 36:24.550
发动语琴球

36:25.550 --> 36:26.550
出错了

36:26.550 --> 36:27.550
出错就对了

36:27.550 --> 36:28.550
出错就对了

36:28.550 --> 36:29.550
我们看一下

36:29.550 --> 36:30.550
它出了问题

36:30.550 --> 36:31.550
什么问题呢

36:31.550 --> 36:34.550
它说file to large

36:34.550 --> 36:35.550
你的文件太大了

36:35.550 --> 36:37.550
它出了这样的问题

36:37.550 --> 36:38.550
那么这个地方

36:38.550 --> 36:39.550
我们就限制好了

36:39.550 --> 36:41.550
这是文件的

36:41.550 --> 36:42.550
这是

36:44.550 --> 36:49.930
这是文件的尺寸限制

36:49.930 --> 36:51.930
还有什么限制呢

36:51.930 --> 36:53.930
还有文件的后罪名限制

36:54.930 --> 36:57.930
如何限制文件的后罪名

36:58.930 --> 37:00.930
怎么来限制文件的后罪名

37:00.930 --> 37:01.930
就是说

37:01.930 --> 37:04.930
你这个文件

37:04.930 --> 37:06.930
你这个文件保存了之后

37:06.930 --> 37:07.930
保存了之后

37:07.930 --> 37:08.930
不是保存之后

37:08.930 --> 37:10.930
应该是保存之前

37:10.930 --> 37:11.930
我要看一下你的文件

37:11.930 --> 37:12.930
后罪名是啥

37:12.930 --> 37:14.930
比方说你给我上传一个ES1文件

37:14.930 --> 37:15.930
一个可执行文件

37:15.930 --> 37:17.930
我肯定是不想跟你保存的

37:17.930 --> 37:19.930
服务器怎么能存在这种文件

37:19.930 --> 37:20.930
太危险了

37:20.930 --> 37:21.930
比方说一个ES1

37:21.930 --> 37:23.930
像这种可执行文件

37:23.930 --> 37:25.930
往往就可能会包含一些病毒

37:25.930 --> 37:26.930
服务器那边

37:26.930 --> 37:27.930
一不小心运行到这个文件

37:27.930 --> 37:28.930
那就出问题了

37:28.930 --> 37:29.930
所以说

37:29.930 --> 37:31.930
我不允许你上传一些文件

37:31.930 --> 37:32.930
比方说我们这个系统里边

37:32.930 --> 37:34.930
只允许你上传图片

37:34.930 --> 37:36.930
只允许你上传图片

37:36.930 --> 37:38.930
其他的文件你都不能上传

37:38.930 --> 37:39.930
那么这种情况下

37:39.930 --> 37:40.930
如何来限制

37:40.930 --> 37:42.930
其实限制的话

37:42.930 --> 37:44.930
它官方这里的

37:44.930 --> 37:45.930
你看一下这个文档里边

37:45.930 --> 37:46.930
它并没有说到

37:46.930 --> 37:47.930
怎么来

37:47.930 --> 37:48.930
怎么来

37:48.930 --> 37:50.930
就是限制文件

37:50.930 --> 37:53.930
必须要你进行手动的配置

37:53.930 --> 37:55.930
以手动来进行处理

37:55.930 --> 37:56.930
怎么处理呢

37:56.930 --> 37:57.930
它其中一个地方

37:57.930 --> 38:00.930
叫做File Filter

38:00.930 --> 38:03.930
它说你可以通过这个配置

38:03.930 --> 38:05.930
可以通过这个配置

38:05.930 --> 38:08.930
来控制哪些文件

38:08.930 --> 38:09.930
是可以上传的

38:09.930 --> 38:12.930
哪些文件是不能上传的

38:12.930 --> 38:14.930
可以通过这个来配置

38:14.930 --> 38:17.930
来配置一下

38:17.930 --> 38:19.930
这里那边是配置好了过

38:19.930 --> 38:20.930
我再来配置这个东西

38:20.930 --> 38:22.930
File Filter

38:22.930 --> 38:24.930
那么它是个什么东西呢

38:24.930 --> 38:25.930
只是它

38:25.930 --> 38:26.930
它会告诉你

38:26.930 --> 38:27.930
它是一个函数

38:27.930 --> 38:29.930
它会传入三个函数

38:29.930 --> 38:31.930
一个是请求对象

38:31.930 --> 38:32.930
一个是文件

38:32.930 --> 38:33.930
一个是文件

38:33.930 --> 38:35.930
还有一个是又是一个毁掉函数

38:35.930 --> 38:36.930
是不是跟上面是一样的

38:36.930 --> 38:37.930
对吧

38:37.930 --> 38:39.930
前面是一样的

38:39.930 --> 38:40.930
在这个里边

38:40.930 --> 38:44.930
如果你通过了它的限制

38:44.930 --> 38:45.930
那么你觉得没问题

38:45.930 --> 38:47.930
那么你就这样子调用

38:47.930 --> 38:49.930
去表示OK

38:49.930 --> 38:50.930
OK

38:50.930 --> 38:51.930
可以的

38:51.930 --> 38:53.930
可以让你上传

38:53.930 --> 38:55.930
如果这个文件是不允许的

38:55.930 --> 38:57.930
那么你就通过这样的调用

38:57.930 --> 38:58.930
不允许你上传

38:58.930 --> 38:59.930
总之

38:59.930 --> 39:01.930
你判断一下这个文件的后维名

39:01.930 --> 39:03.930
怎么来得到后维名呢

39:03.930 --> 39:05.930
是不是又是一样的办法

39:05.930 --> 39:08.930
Pass

39:08.930 --> 39:10.930
Extension Name

39:10.930 --> 39:13.930
把这个Original Name传进去

39:13.930 --> 39:15.930
来得到它的后维名

39:15.930 --> 39:18.430
它的后维名

39:18.430 --> 39:19.430
好

39:19.430 --> 39:20.430
看一下这个后维名

39:20.430 --> 39:21.430
是否满足要求

39:21.430 --> 39:23.430
比方说我们这里写一个数组

39:23.430 --> 39:24.430
比方到外面

39:24.430 --> 39:26.430
在外面我们写一个数组

39:26.430 --> 39:28.430
Allowed

39:28.430 --> 39:29.430
Extension

39:31.870 --> 39:34.870
Extension

39:34.870 --> 39:35.870
表示的是

39:35.870 --> 39:37.870
我这个数组里边出现的后维名

39:37.870 --> 39:38.870
都可以

39:38.870 --> 39:39.870
都没问题

39:39.870 --> 39:40.870
哪些后维名呢

39:40.870 --> 39:42.870
比方说GPG可以允许

39:42.870 --> 39:44.870
PNG可以允许

39:44.870 --> 39:46.870
GIF可以

39:46.870 --> 39:48.870
什么BMP

39:48.870 --> 39:49.870
这些常见的图片格式

39:49.870 --> 39:50.870
我都允许

39:50.870 --> 39:52.870
什么现在比较流行的GIF

39:52.870 --> 39:54.870
像这些图片的格式

39:54.870 --> 39:55.870
我都允许

39:55.870 --> 39:56.870
好

39:56.870 --> 39:57.870
那么这里呢

39:57.870 --> 39:58.870
我就判断一下

39:58.870 --> 39:59.870
简单的

39:59.870 --> 40:01.870
Allowed

40:01.870 --> 40:02.870
Extension

40:02.870 --> 40:03.870
是不是包含

40:03.870 --> 40:05.870
包含我现在的后维名

40:05.870 --> 40:06.870
如果不包含的话

40:06.870 --> 40:08.870
那是不是就

40:08.870 --> 40:09.870
通过

40:09.870 --> 40:10.870
通过

40:10.870 --> 40:11.870
Ls

40:11.870 --> 40:12.870
如果不包含的话

40:12.870 --> 40:14.870
就不通过

40:14.870 --> 40:15.870
就不通过

40:15.870 --> 40:16.870
好

40:16.870 --> 40:17.870
我们这样子来设置

40:17.870 --> 40:18.870
这样子来设置

40:18.870 --> 40:19.870
好

40:19.870 --> 40:20.870
保存一下

40:20.870 --> 40:21.870
那么现在我们再看一下

40:21.870 --> 40:22.870
如果给它一个

40:22.870 --> 40:23.870
不正确的后维名

40:23.870 --> 40:25.870
会怎么样

40:25.870 --> 40:26.870
好

40:26.870 --> 40:27.870
再选择一个文件

40:27.870 --> 40:28.870
选择个文件

40:28.870 --> 40:29.870
比方说

40:29.870 --> 40:30.870
很桌面上

40:30.870 --> 40:31.870
桌面上

40:31.870 --> 40:32.870
随便给一个吧

40:32.870 --> 40:33.870
比方说给一个

40:33.870 --> 40:34.870
给这个TST文件

40:34.870 --> 40:35.870
好

40:35.870 --> 40:37.870
发送请求

40:37.870 --> 40:38.870
好 这边

40:38.870 --> 40:40.870
我们来看一下

40:40.870 --> 40:42.870
有没有保存这个文件呢

40:42.870 --> 40:43.870
没有保存

40:43.870 --> 40:44.870
但是它也没有爆错

40:44.870 --> 40:45.870
对吧

40:45.870 --> 40:46.870
它也没有爆错

40:46.870 --> 40:47.870
它就直接略过掉了

40:47.870 --> 40:49.870
如果你希望它爆错的话

40:49.870 --> 40:51.870
如果你希望它爆错

40:51.870 --> 40:52.870
不希望它略过掉

40:52.870 --> 40:53.870
略过这个文件

40:53.870 --> 40:54.870
希望它爆错的话

40:54.870 --> 40:55.870
那么这里呢

40:55.870 --> 40:58.870
可以给它传一个

40:58.870 --> 41:00.870
传一个错误对象

41:00.870 --> 41:02.870
传一个错误对象

41:02.870 --> 41:03.870
换个文章也是这样说的

41:03.870 --> 41:04.870
就说

41:04.870 --> 41:05.870
如果

41:05.870 --> 41:06.870
你要爆错的话

41:06.870 --> 41:08.870
你可以传递一个错误对象

41:08.870 --> 41:09.870
这个错误对象

41:09.870 --> 41:10.870
给它个错误消息

41:10.870 --> 41:11.870
给它个错误消息

41:11.870 --> 41:12.870
比方说

41:12.870 --> 41:13.870
给它个什么消息呢

41:13.870 --> 41:15.870
文件后维

41:15.870 --> 41:17.870
文件后维

41:17.870 --> 41:18.870
不正确

41:18.870 --> 41:20.870
文件内情不正确

41:20.870 --> 41:21.870
不正确

41:21.870 --> 41:25.850
好

41:25.850 --> 41:26.850
就写好了

41:26.850 --> 41:27.850
它到底爆错

41:27.850 --> 41:29.850
它必须要有两个参数

41:29.850 --> 41:31.850
这个地方是它的问题

41:31.850 --> 41:32.850
跟我们没关系

41:32.850 --> 41:33.850
是它自己的问题

41:33.850 --> 41:35.850
这个地方的实际上

41:35.850 --> 41:36.850
是可以只有一个参数的

41:36.850 --> 41:38.850
而且官方文章也是这样说的

41:38.850 --> 41:39.850
对吧

41:39.850 --> 41:40.850
官方文章也可以只给一个参数

41:40.850 --> 41:42.850
应该是它内情生命的时候出了问题

41:42.850 --> 41:43.850
没有写好

41:43.850 --> 41:44.850
那第二个参数呢

41:44.850 --> 41:45.850
随便给一个

41:45.850 --> 41:46.850
随便给一个

41:46.850 --> 41:48.850
FORCE

41:48.850 --> 41:50.850
保存一下

41:50.850 --> 41:51.850
保存一下

41:51.850 --> 41:52.850
那么现在我们再来

41:52.850 --> 41:54.850
保存行囚

41:54.850 --> 41:55.850
爆错

41:55.850 --> 41:56.850
文件内情不正确

41:56.850 --> 41:57.850
好

41:57.850 --> 41:58.850
现在就对了

41:58.850 --> 41:59.850
好

41:59.850 --> 42:00.850
最后一个问题

42:00.850 --> 42:01.850
现在问题都解决的差不多了

42:01.850 --> 42:02.850
对吧

42:02.850 --> 42:03.850
都解决的差不多了

42:03.850 --> 42:04.850
最后一个问题

42:04.850 --> 42:06.850
就是啥呢

42:06.850 --> 42:09.850
如何当发生错误的时候

42:09.850 --> 42:11.850
当发生错误时

42:11.850 --> 42:16.850
如何想应给客户端

42:16.850 --> 42:17.850
好

42:17.850 --> 42:18.850
当发生错误的时候

42:18.850 --> 42:19.850
如何想应客户端

42:19.850 --> 42:21.850
然后正确时

42:21.850 --> 42:23.850
如果是没问题的时候

42:23.850 --> 42:25.850
如何想应

42:25.850 --> 42:26.850
又如何想应

42:26.850 --> 42:27.850
就是无论客户端

42:27.850 --> 42:28.850
发生了错误

42:28.850 --> 42:29.850
还是没有发生错误

42:29.850 --> 42:30.850
我当地要给客户端

42:30.850 --> 42:31.850
想应什么东西

42:31.850 --> 42:32.850
这个很好理

42:32.850 --> 42:34.850
这个逻辑是这样子的

42:34.850 --> 42:36.850
如果是正确的话

42:36.850 --> 42:38.850
给客户端想应啥

42:38.850 --> 42:42.850
想应文件的路径

42:42.850 --> 42:44.850
就是服务器保存文件

42:44.850 --> 42:45.850
那么客户端到时候要起

42:45.850 --> 42:47.850
到时候可以请求这个文件

42:47.850 --> 42:48.850
可以请求这张图片

42:48.850 --> 42:50.850
那么这个路径是啥

42:50.850 --> 42:52.850
想应给客户端

42:52.850 --> 42:53.850
好

42:53.850 --> 42:54.850
如果是错误

42:54.850 --> 42:58.850
那么想应错误消息

42:58.850 --> 42:59.850
好

42:59.850 --> 43:00.850
这个再怎么来处理

43:00.850 --> 43:02.850
又来看官方文档

43:02.850 --> 43:04.850
它这里下面就说到了

43:04.850 --> 43:07.850
错误的处理机制

43:07.850 --> 43:08.850
它说如果你想捕捉

43:08.850 --> 43:10.850
它这里面的错误的话

43:10.850 --> 43:13.850
你需要自己在中间键里面去调用

43:13.850 --> 43:14.850
手动去上传

43:14.850 --> 43:17.850
刚才是它自动完成保存的

43:17.850 --> 43:18.850
自动完成保存

43:18.850 --> 43:20.850
那么建立这里

43:20.850 --> 43:23.850
要手动去上传

43:23.850 --> 43:26.850
我们把这个代码复制一下

43:26.850 --> 43:27.850
复制一下

43:27.850 --> 43:28.850
也就是说它让你写到这儿

43:28.850 --> 43:29.850
把这个代码写到这儿

43:29.850 --> 43:31.850
这个东西就不要了

43:31.850 --> 43:32.850
就这么个意思

43:32.850 --> 43:33.850
就这么个意思

43:33.850 --> 43:35.850
非常非常简单

43:35.850 --> 43:37.850
那么我们来写一下

43:37.850 --> 43:38.850
看一下这里

43:38.850 --> 43:39.850
直接看各地报处

43:39.850 --> 43:41.850
保存给搞一个声音

43:42.850 --> 43:45.850
它说无法调用内行缺少

43:45.850 --> 43:47.850
无法调用内行缺少调用天名

43:47.850 --> 43:50.850
那表达是内行InstanceO

43:50.850 --> 43:52.850
没有减重的调用前名

43:53.850 --> 43:54.850
我明白了

43:54.850 --> 43:55.850
我这里写错了

43:55.850 --> 43:57.850
它这里看一下官方文道

43:57.850 --> 43:59.850
它这里是要要求你这样子写

43:59.850 --> 44:01.850
就是你调用了Mouter之后

44:01.850 --> 44:03.850
你调用了这个配置之后

44:03.850 --> 44:05.850
我这里调用了Mouter这个配置

44:05.850 --> 44:06.850
调用这个Mouter之后

44:06.850 --> 44:08.850
它返回的是一个对象

44:08.850 --> 44:09.850
这个对象里面不是有方法

44:09.850 --> 44:10.850
什么Single

44:10.850 --> 44:11.850
Array

44:11.850 --> 44:12.850
这些方法对吧

44:12.850 --> 44:14.850
你再调用一次

44:14.850 --> 44:15.850
你再调用一次

44:15.850 --> 44:17.850
调用一次之后

44:17.850 --> 44:18.850
你看一下

44:18.850 --> 44:20.850
我们回去

44:20.850 --> 44:24.160
你看一下

44:24.160 --> 44:25.160
通过这样一调用之后

44:25.160 --> 44:27.160
你想一想这个道理

44:27.160 --> 44:29.160
这个调用之后

44:29.160 --> 44:30.160
这个玩意是不是个函数

44:30.160 --> 44:31.160
我现在框住这一部分

44:31.160 --> 44:33.160
是不是个函数

44:33.160 --> 44:35.160
肯定是个函数

44:35.160 --> 44:36.160
如果它不是一个函数的话

44:36.160 --> 44:38.160
它返回的不是一个函数的话

44:38.160 --> 44:40.160
它凭什么能放在这

44:40.160 --> 44:41.160
它凭什么能放在这

44:41.160 --> 44:43.160
这里放置的只能是处理函数

44:43.160 --> 44:45.160
就是中间间的处理函数

44:45.160 --> 44:46.160
所以说

44:46.160 --> 44:47.160
调用这个东西

44:47.160 --> 44:48.160
可以得到一个函数

44:48.160 --> 44:49.160
就是处理函数

44:49.160 --> 44:50.160
那么无非就是

44:50.160 --> 44:51.160
把这里的处理

44:51.160 --> 44:53.160
变成了我们手动起台马来调用

44:53.160 --> 44:54.160
无非就是函数

44:54.160 --> 44:55.160
所以说

44:55.160 --> 44:56.160
我们这里可以先

44:56.160 --> 44:58.160
把这个东西写到这

44:58.160 --> 44:59.160
写到这

44:59.160 --> 45:00.160
写到这之后

45:00.160 --> 45:01.160
之后这个东西就是函数了

45:01.160 --> 45:02.160
对吧

45:02.160 --> 45:03.160
就是一个普通函数了

45:03.160 --> 45:04.160
就相当于是这里

45:04.160 --> 45:05.160
可以这样子写

45:05.160 --> 45:07.160
它是一个普通的处理函数

45:07.160 --> 45:08.160
那么现在我们要

45:08.160 --> 45:10.160
手动处理错误

45:10.160 --> 45:11.160
因此我们要在这里边

45:11.160 --> 45:13.160
手动地去调用这个函数

45:13.160 --> 45:15.160
而调用的方式就是这样

45:15.160 --> 45:17.160
就是这样的方式

45:17.160 --> 45:19.160
来看一下

45:19.160 --> 45:21.160
就是这样的方式

45:21.160 --> 45:22.160
把它

45:22.160 --> 45:24.160
请求对象传进去

45:24.160 --> 45:26.160
响应对象传进去

45:26.160 --> 45:28.160
这里得到了

45:28.160 --> 45:30.160
它说

45:30.160 --> 45:32.160
这里应该写个箭头函数

45:32.160 --> 45:33.160
它随便写吧

45:33.160 --> 45:34.160
就写了

45:34.160 --> 45:36.160
那是你TS名字的规则

45:36.160 --> 45:37.160
然后最后

45:37.160 --> 45:39.160
会得到一个毁掉函数

45:39.160 --> 45:41.160
它完成保存之后

45:41.160 --> 45:43.160
它就会调用这个函数

45:43.160 --> 45:44.160
完成保存之后

45:44.160 --> 45:45.160
就会调用这个函数

45:45.160 --> 45:47.160
这个函数里边

45:47.160 --> 45:48.160
这个函数里边

45:48.160 --> 45:49.160
我们把这个导进来

45:53.660 --> 45:54.660
好

45:54.660 --> 45:55.660
如果这里

45:55.660 --> 45:56.660
有错误的话

45:56.660 --> 45:57.660
发生了错误

45:57.660 --> 45:58.660
它说如果这个错误的内形

45:58.660 --> 45:59.660
是这个什么

45:59.660 --> 46:00.660
mater and error

46:00.660 --> 46:01.660
它是

46:01.660 --> 46:03.660
它写了一个错误内形

46:03.660 --> 46:05.660
如果有这么一个错误内形

46:05.660 --> 46:06.660
如果有这么一个错误内形

46:06.660 --> 46:08.660
那么就表示的是

46:08.660 --> 46:10.660
我这里发生了错误

46:10.660 --> 46:11.660
发生了错误怎么办

46:11.660 --> 46:13.660
是不是以前的做法

46:13.660 --> 46:16.660
Response Helper

46:16.660 --> 46:17.660
send

46:17.660 --> 46:18.660
send error

46:18.660 --> 46:20.660
发生了一个错误

46:20.660 --> 46:21.660
错误在哪儿呢

46:21.660 --> 46:22.660
就通过这个错误消息来

46:22.660 --> 46:24.660
通过这个错误消息

46:24.660 --> 46:26.660
我们把这个错误

46:26.660 --> 46:28.660
看一个错误消息

46:28.660 --> 46:30.660
这个错误消息

46:30.660 --> 46:31.660
这个错误消息

46:31.660 --> 46:33.660
应该是一个 error 对象

46:33.660 --> 46:35.660
应该是一个 error 对象

46:35.660 --> 46:36.660
这里呢

46:36.660 --> 46:37.660
我们这样子

46:37.660 --> 46:38.660
这样子

46:38.660 --> 46:39.660
很小

46:39.660 --> 46:41.660
这里

46:41.660 --> 46:42.660
它这个TS

46:42.660 --> 46:44.660
这个结构没有设置好

46:44.660 --> 46:46.660
没有设置得很好

46:47.660 --> 46:48.660
那么这个

46:48.660 --> 46:49.660
这个错误对象

46:49.660 --> 46:50.660
我们这样子来处理吧

46:50.660 --> 46:52.660
先把它转为N力

46:52.660 --> 46:55.550
转为N力

46:55.550 --> 46:57.550
它本来就是N力对吧

46:57.550 --> 46:58.550
本来就是N力

46:58.550 --> 46:59.550
看一下是不是N力没想到

46:59.550 --> 47:00.550
N力

47:00.550 --> 47:01.550
那么直接写

47:01.550 --> 47:02.550
Message

47:02.550 --> 47:04.550
Message

47:04.550 --> 47:05.550
转为NL

47:05.550 --> 47:06.550
第一个参数

47:06.550 --> 47:07.550
第一个参数是

47:07.550 --> 47:09.550
相应对象

47:09.550 --> 47:11.550
因为它这个是N力的一项

47:11.550 --> 47:13.550
这里可以不用写

47:13.550 --> 47:14.550
可以不用写

47:14.550 --> 47:16.550
我们做的老大一点云呢

47:16.550 --> 47:17.550
可以不用写

47:17.550 --> 47:18.550
N力的一项

47:18.550 --> 47:20.550
可以匹配再合的一项

47:20.550 --> 47:23.550
好 这是有错误的情况

47:23.550 --> 47:25.550
有错误的情况

47:25.550 --> 47:27.550
L是其他的错误

47:27.550 --> 47:28.550
是其他的错误

47:28.550 --> 47:29.550
其实这里呢

47:29.550 --> 47:30.550
如果

47:30.550 --> 47:31.550
只要你有错误

47:31.550 --> 47:32.550
不管你是啥错误

47:32.550 --> 47:33.550
我都要做同样的处理

47:33.550 --> 47:34.550
对吧

47:34.550 --> 47:36.550
我就感觉这样判断

47:36.550 --> 47:37.550
感觉这样判断

47:37.550 --> 47:38.550
甭管你是啥错误

47:38.550 --> 47:39.550
甭管你是啥错误

47:39.550 --> 47:40.550
只要你有错误

47:40.550 --> 47:42.550
我就给你发生错误

47:42.550 --> 47:43.550
这是这种情况

47:43.550 --> 47:44.550
L是

47:44.550 --> 47:46.550
L是表示你没有错误

47:46.550 --> 47:47.550
没有错误的话

47:47.550 --> 47:48.550
我给你发生啥呢

47:48.550 --> 47:50.550
我给你发生的是

47:50.550 --> 47:52.550
我保存的文件路径

47:52.550 --> 47:55.550
我把我的文件路径发送给你

47:55.550 --> 47:57.550
我的文件路径在哪呢

47:57.550 --> 47:58.550
我先发送

47:58.550 --> 48:00.550
this one's helper send

48:00.550 --> 48:01.550
data

48:01.550 --> 48:02.550
发送数据

48:02.550 --> 48:04.550
文件路径是啥呢

48:04.550 --> 48:05.550
文件路径

48:05.550 --> 48:07.550
通过这个

48:07.550 --> 48:09.550
通过这个

48:09.550 --> 48:10.550
rig

48:10.550 --> 48:11.550
通过这个rig

48:11.550 --> 48:12.550
里面来

48:12.550 --> 48:13.550
就这里面呢

48:13.550 --> 48:14.550
它给你处理的

48:14.550 --> 48:15.550
处理的这个文件

48:15.550 --> 48:17.550
它会把我这个文件的路径

48:17.550 --> 48:18.550
放到这里面

48:18.550 --> 48:20.550
我们前面文档里面

48:20.550 --> 48:21.550
有说

48:21.550 --> 48:22.550
有说到这个问题

48:22.550 --> 48:23.550
就是

48:23.550 --> 48:24.550
我如何来获取它

48:24.550 --> 48:26.550
得到的文件路径

48:26.550 --> 48:27.550
看怎么来获取

48:27.550 --> 48:30.860
看一下

48:30.860 --> 48:32.860
上面

48:32.860 --> 48:36.560
上面

48:36.560 --> 48:37.560
这里

48:37.560 --> 48:38.560
这里说到了

48:38.560 --> 48:39.560
它说

48:39.560 --> 48:41.560
rig file

48:41.560 --> 48:42.560
就可以获取到

48:42.560 --> 48:44.560
它的文件对象

48:44.560 --> 48:45.560
就可以获取到文件对象

48:45.560 --> 48:47.560
而文件对象里面

48:47.560 --> 48:49.560
不是有这个属性吗

48:49.560 --> 48:50.560
保存的

48:50.560 --> 48:52.560
就是

48:52.560 --> 48:54.560
这个

48:54.560 --> 48:55.560
file in

48:55.560 --> 48:57.560
file in就是保存它的文件名

48:57.560 --> 48:59.560
保存的文件名就在这

48:59.560 --> 49:00.560
好

49:00.560 --> 49:01.560
然后这里呢

49:01.560 --> 49:02.560
我们得到发送查了

49:02.560 --> 49:03.560
发送

49:03.560 --> 49:04.560
file

49:04.560 --> 49:05.560
file

49:05.560 --> 49:06.560
里面吧

49:06.560 --> 49:07.560
this information

49:07.560 --> 49:09.560
那就是file in

49:09.560 --> 49:10.560
file in

49:10.560 --> 49:11.560
this

49:11.560 --> 49:12.560
get

49:13.560 --> 49:14.560
好了

49:14.560 --> 49:16.560
我们再来处理一下

49:17.560 --> 49:19.560
当我完成请求的时候

49:19.560 --> 49:21.560
当我完成请求的时候

49:21.560 --> 49:23.560
完成

49:23.560 --> 49:25.560
就是当我拿到文件的时候

49:25.560 --> 49:27.560
在请求里面

49:27.560 --> 49:29.560
我们先让它处理上传的文件

49:29.560 --> 49:31.560
处理完了过后有一个回调

49:31.560 --> 49:34.560
这个回调如果有错误的话

49:34.560 --> 49:35.560
输出错误结果

49:35.560 --> 49:37.560
如果没有错误的话

49:37.560 --> 49:39.560
我把这个文件的信息里面

49:39.560 --> 49:40.560
文件名得到

49:40.560 --> 49:41.560
给输出回去

49:41.560 --> 49:42.560
好

49:42.560 --> 49:44.560
保存一下

49:44.560 --> 49:45.560
看一下

49:45.560 --> 49:46.560
现在来

49:46.560 --> 49:49.560
现在我刚刚上传一个txt文件

49:49.560 --> 49:50.560
运行

49:50.560 --> 49:52.560
文件内容不正确

49:52.560 --> 49:53.560
这就是我们想要的结果

49:53.560 --> 49:54.560
对吧

49:54.560 --> 49:55.560
好

49:55.560 --> 49:56.560
然后再来

49:56.560 --> 49:58.560
我们给它上传一个很大的文件

49:58.560 --> 49:59.560
很大的文件

49:59.560 --> 50:01.560
比方说图片这里

50:01.560 --> 50:02.560
图片这里

50:02.560 --> 50:04.560
测试

50:04.560 --> 50:05.560
这里

50:05.560 --> 50:07.560
上传这个文件

50:07.560 --> 50:08.560
发送

50:08.560 --> 50:10.560
file to large

50:10.560 --> 50:11.560
文件太大了

50:11.560 --> 50:14.560
给它上传一个正常的文件

50:14.560 --> 50:15.560
你是

50:15.560 --> 50:16.560
发送

50:16.560 --> 50:17.560
你看

50:17.560 --> 50:19.560
文件名告诉你的

50:19.560 --> 50:21.560
当然我不仅可以告诉你文件名

50:21.560 --> 50:23.560
我甚至可以告诉你一个UIL入境

50:23.560 --> 50:25.560
这个文件的请求入境

50:25.560 --> 50:27.560
我会这样子告诉你

50:27.560 --> 50:28.560
我会这样子告诉你

50:28.560 --> 50:29.560
我生成一个PASS

50:29.560 --> 50:31.560
生成一个UIL地址

50:31.560 --> 50:33.560
这个UIL地址

50:33.560 --> 50:34.560
模板支付串

50:34.560 --> 50:36.560
首先拼接啥呢

50:36.560 --> 50:37.560
拼接你

50:37.560 --> 50:38.560
就是这样的

50:38.560 --> 50:40.560
比方说我们来这样的访问吧

50:40.560 --> 50:42.560
我们希望图片是这样的访问的

50:42.560 --> 50:43.560
upload

50:43.560 --> 50:45.560
下边的

50:45.560 --> 50:47.560
在凭借上文件名

50:47.560 --> 50:49.560
wakefile.file

50:49.560 --> 50:50.560
到时候文

50:50.560 --> 50:52.560
这个图片就是这样的访问

50:52.560 --> 50:54.560
把UIL地址

50:54.560 --> 50:55.560
发送回去

50:55.560 --> 50:57.560
保存

50:57.560 --> 50:59.560
再来看

50:59.560 --> 51:01.560
发送请求

51:01.560 --> 51:02.560
你看

51:02.560 --> 51:03.560
反过来的结果

51:03.560 --> 51:05.560
就这个结果

51:05.560 --> 51:06.560
好了

51:06.560 --> 51:08.560
那么现在文件上传是否搞定了

51:08.560 --> 51:09.560
好

51:09.560 --> 51:10.560
最后呢

51:10.560 --> 51:11.560
最后

51:12.560 --> 51:13.560
就是这个路径

51:13.560 --> 51:15.560
我如何去访问这个路径

51:15.560 --> 51:17.560
如何访问这个路径

51:17.560 --> 51:18.560
来得到这张图片呢

51:18.560 --> 51:19.560
现在肯定是访问不到的

51:19.560 --> 51:21.560
怎么来得到了

51:21.560 --> 51:23.560
这个姿势大家应该知道吧

51:23.560 --> 51:26.560
就是一个静态资源访问的东西

51:26.560 --> 51:29.560
静态资源如何在express里面访问

51:29.560 --> 51:31.560
我在这里面

51:31.560 --> 51:33.560
在写上这么一个东西

51:33.560 --> 51:35.560
app use

51:35.560 --> 51:37.560
use是啥呢

51:37.560 --> 51:40.560
当你去请求upload的时候

51:43.510 --> 51:44.510
然后呢

51:44.510 --> 51:46.510
我们使用一个中间键

51:46.510 --> 51:49.510
express static中间键

51:49.510 --> 51:52.510
然后把它定位到哪呢

51:52.510 --> 51:54.510
定位到

51:54.510 --> 51:56.510
public部落下边的

51:56.510 --> 51:58.510
app load的文件讲

51:58.510 --> 52:00.510
明白这个意思吗

52:00.510 --> 52:02.510
就是当我去请求这个路径的时候

52:02.510 --> 52:04.510
那么我们请求的是

52:04.510 --> 52:06.510
这个文件夹里边的东西

52:06.510 --> 52:07.510
这样子写了就完事了

52:07.510 --> 52:08.510
对吧

52:08.510 --> 52:10.510
这样子写了就完事了

52:10.510 --> 52:11.510
对吧

52:11.510 --> 52:13.510
我们再刷新一次

52:13.510 --> 52:15.510
图片是不是得到了

52:15.510 --> 52:16.510
得到了

52:16.510 --> 52:17.510
或者说

52:17.510 --> 52:19.510
我们如果请求的是这个地址

52:19.510 --> 52:20.510
那么我们请求的是

52:20.510 --> 52:22.510
public这个部落

52:22.510 --> 52:24.510
直接把它映射到public的这种部落

52:24.510 --> 52:26.510
这个部落里面有的东西

52:26.510 --> 52:27.510
我们就可以请求

52:27.510 --> 52:29.510
没有东西不能请求

52:29.510 --> 52:30.510
比方说

52:30.510 --> 52:32.510
我们还是用app load的这种方式吧

52:32.510 --> 52:34.510
还是用这种方式

52:34.510 --> 52:35.510
好吧

52:35.510 --> 52:36.510
那么现在就搞定了

52:36.510 --> 52:37.510
就搞定了

52:37.510 --> 52:38.510
好 至此呢

52:38.510 --> 52:40.510
咱们服务器端

52:40.510 --> 52:42.510
文件上传也有了

52:42.510 --> 52:44.510
对这些数据的真相改查

52:44.510 --> 52:46.510
也有了

52:46.510 --> 52:47.510
服务器端

52:47.510 --> 52:49.510
至此开发完毕

52:49.510 --> 52:50.510
开发完毕

52:50.510 --> 52:52.510
好 那么开发完毕过后了

52:52.510 --> 52:53.510
最后我们可以打包

52:53.510 --> 52:55.510
我们来测试一下打包的结果

52:56.510 --> 52:57.510
停止

52:57.510 --> 52:59.510
我们可以是用npm装

52:59.510 --> 53:00.510
bio的

53:00.510 --> 53:01.510
我们之前写过的命令

53:01.510 --> 53:02.510
对吧

53:02.510 --> 53:04.510
完成打包

53:04.510 --> 53:06.510
生成电神幕

53:06.510 --> 53:07.510
打包过后

53:07.510 --> 53:09.510
就形成了一个一个的GS文件

53:09.510 --> 53:11.510
就形成了全部都是GS文件

53:11.510 --> 53:13.510
就不再是TS了

53:13.510 --> 53:14.510
那么我们来运行一下

53:14.510 --> 53:15.510
GS文件

53:15.510 --> 53:16.510
看会不会出问题

53:16.510 --> 53:17.510
load的

53:17.510 --> 53:18.510
DS的目录

53:18.510 --> 53:19.510
DS的目录

53:19.510 --> 53:21.510
下边的哪个呢

53:21.510 --> 53:24.510
下边的

53:24.510 --> 53:26.510
index

53:26.510 --> 53:27.510
第二

53:27.510 --> 53:29.510
GS

53:29.510 --> 53:31.510
好 启动起来

53:31.510 --> 53:33.510
好 点击数据成功

53:33.510 --> 53:35.510
看一下会不会出问题

53:35.510 --> 53:37.510
我们这里

53:37.510 --> 53:39.510
再上传一个文件

53:39.510 --> 53:40.510
上传文件正确

53:40.510 --> 53:41.510
没问题

53:41.510 --> 53:43.510
你看文件有多了一个

53:43.510 --> 53:44.510
然后呢

53:44.510 --> 53:45.510
我们测试一下

53:45.510 --> 53:47.510
以前或许单个电影

53:47.510 --> 53:48.510
没问题

53:48.510 --> 53:51.510
或许多个电影测试

53:51.510 --> 53:52.510
没问题

53:52.510 --> 53:56.510
然后添加电影测试

53:56.510 --> 53:57.510
没问题

53:57.510 --> 53:59.510
修改电影

53:59.510 --> 54:00.510
没问题

54:00.510 --> 54:03.510
删除

54:03.510 --> 54:05.510
这里我好像没保存

54:05.510 --> 54:06.510
删除算了

54:06.510 --> 54:08.510
文件上传已经测试过了

54:08.510 --> 54:09.510
说明打包之后

54:09.510 --> 54:10.510
仍然是没有问题的

54:10.510 --> 54:11.510
仍然没有问题

54:11.510 --> 54:13.510
那么支持我们这一块

54:13.510 --> 54:14.510
开发完毕

54:14.510 --> 54:15.510
开发完毕

54:15.510 --> 54:17.510
好 那么下来大家呢

54:17.510 --> 54:19.510
可能文件上传我这里讲的比较多

54:19.510 --> 54:21.510
因为我确定你们有没有学过

54:21.510 --> 54:22.510
这一块

54:22.510 --> 54:23.510
如果你们学过这一块

54:23.510 --> 54:26.270
文件上传的话

54:26.270 --> 54:28.270
就是伤害就完事了

54:28.270 --> 54:29.270
就是安装的内容度

54:29.270 --> 54:31.270
其他都没什么好说的

54:31.270 --> 54:33.270
那么大家下来

54:33.270 --> 54:36.270
请期待这一块的开发完整

54:36.270 --> 54:37.270
开发完整准备好了测试

54:37.270 --> 54:38.270
没问题到之后了

54:38.270 --> 54:40.270
我们下来头听

54:40.270 --> 54:41.270
喝不住

54:41.270 --> 54:43.270
那么 后段到此结束

54:43.270 --> 54:44.270
拜拜

