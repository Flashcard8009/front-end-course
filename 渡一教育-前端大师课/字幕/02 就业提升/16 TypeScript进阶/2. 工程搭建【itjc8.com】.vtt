WEBVTT

00:00.880 --> 00:04.380
好 车节课呢 咱们来开始搭建这个工程

00:04.880 --> 00:08.380
由于现在呢 我们的环境啊 已经发生了变化了

00:08.380 --> 00:11.380
以前我们之前的开发环境呢 是漏的环境 对吧

00:11.380 --> 00:14.380
现在我们的环境呢 变成了浏览器环境

00:14.880 --> 00:17.880
好 浏览器环境呢 我们又希望使用啊

00:18.380 --> 00:20.380
希望使用模块化

00:21.380 --> 00:24.380
就浏览器环境里面 我们要使用模块化

00:24.380 --> 00:28.380
所以说呢 我决定了 这里呢 使用webpack来搭建这个

00:28.880 --> 00:31.880
这个环境 因为webpack这个东西啊

00:31.880 --> 00:34.880
大家应该多或少有听说过 对吧

00:34.880 --> 00:37.880
它是一个构建工具 构建工具

00:37.880 --> 00:41.880
后边呢 咱们可能会有专门的课程啊

00:41.880 --> 00:43.880
专门一个webpack的课程

00:43.880 --> 00:46.880
大家可以关注一下啊 关注一下杜宇轩的相关课程

00:46.880 --> 00:49.880
后边可能会有这么一个课程啊

00:49.880 --> 00:52.880
webpack的课程 我们会具体的讲啊

00:52.880 --> 00:55.880
它里边有哪些东西 这是其实是一个

00:55.880 --> 00:57.880
里面东西有特别特别的多

00:58.380 --> 01:02.380
所以说这些可能 我不可能把webpack给大家重新讲一遍

01:02.380 --> 01:06.380
那估计我讲这个工程搭建的话

01:06.380 --> 01:10.380
可能就十几二十个小时的 光是搭建一个环境 那里太恐怖了

01:10.380 --> 01:14.380
因此呢 这里呢 我们简单的搭建一下就行了啊

01:14.380 --> 01:17.380
webpack就是个构建工具 它是可以将什么呢

01:17.380 --> 01:21.380
将 根据入口文件

01:21.380 --> 01:24.380
根据入口文件 就根据一个启动文件

01:24.880 --> 01:26.880
找寻依赖

01:26.880 --> 01:28.880
可以找出这个文件 它依赖哪些东西

01:28.880 --> 01:30.880
就是咱们有魔幻化的话 对吧

01:30.880 --> 01:33.880
一个文件 它要导入另一个文件 这就是依赖

01:33.880 --> 01:37.880
找寻这些整个工程里面的文件依赖

01:37.880 --> 01:39.880
然后打包

01:39.880 --> 01:41.880
对这些依赖进行打包

01:41.880 --> 01:43.880
它就是这么一个构建工具

01:43.880 --> 01:46.880
打包的过程中呢 会用到一些插件

01:46.880 --> 01:49.880
以及一些家载器 这是webpack里面的东西

01:49.880 --> 01:53.880
如果你不太清楚webpack该怎么来去使用的话

01:54.380 --> 01:57.380
你跟着我做 我怎么做 你又怎么写

01:57.380 --> 02:00.380
你又怎么做 完全一样 不会有什么问题的

02:00.380 --> 02:01.380
好 首先呢

02:01.380 --> 02:04.380
我们要去安装这个webpack

02:04.380 --> 02:07.380
就第一步 安装

02:07.380 --> 02:11.380
这里不用 安装webpack

02:11.380 --> 02:15.380
安装webpack

02:15.380 --> 02:16.380
安装的时候怎么安装呢

02:16.380 --> 02:18.380
我们这里有很多安装办法

02:18.380 --> 02:20.380
可以安装3.2G的版本

02:20.380 --> 02:22.380
也可以安装它的最新版本4.0

02:22.880 --> 02:24.880
它们的差异还是蛮大的

02:24.880 --> 02:26.880
我这里的话就直接安装最新版的

02:26.880 --> 02:28.880
安装的话就到这个工程目录里边去

02:28.880 --> 02:30.880
你建一个新建一个文件夹

02:30.880 --> 02:32.880
到这个目录里边去

02:32.880 --> 02:33.880
在命令行里边写上

02:33.880 --> 02:35.880
你可以使用npm安装

02:35.880 --> 02:37.880
也可以使用Cnpm安装

02:37.880 --> 02:39.880
都行 看你自己习惯

02:39.880 --> 02:41.880
我这里能使用压览安装

02:41.880 --> 02:42.880
为什么呢 因为这种安装呢

02:42.880 --> 02:43.880
我在讲课的时候要快一些

02:43.880 --> 02:45.880
它可以 这种安装呢

02:45.880 --> 02:46.880
它可以有缓存

02:46.880 --> 02:47.880
以前安装过的话

02:47.880 --> 02:50.880
把后边安装起来就比较快了

02:50.880 --> 02:52.380
首先添加一个异弹

02:52.380 --> 02:55.380
我这里使用开发异弹加在横杠地

02:55.380 --> 02:58.880
就相当于是npmi横杠地

02:58.880 --> 03:00.380
是一样的道理

03:00.380 --> 03:02.380
这里呢

03:02.380 --> 03:03.880
安装这个webpack

03:03.880 --> 03:06.880
以及webpack CLI

03:06.880 --> 03:08.380
我这里使用局部安装

03:08.380 --> 03:09.880
没有全局安装

03:09.880 --> 03:11.380
好 回录

03:11.380 --> 03:13.380
好 等它安装

03:13.380 --> 03:14.380
安装完成过后

03:14.380 --> 03:16.380
我们就可以使用webpack命令

03:16.380 --> 03:17.380
来进行打包了

03:17.380 --> 03:18.380
如果你不理解的话

03:18.380 --> 03:19.380
由于我们这个课

03:19.880 --> 03:20.880
你跟着我做就行了

03:20.880 --> 03:22.880
好 安装完成

03:23.880 --> 03:25.880
安装完成之后呢

03:25.880 --> 03:27.880
咱们的依赖里边

03:27.880 --> 03:28.880
我之前好像又忘了

03:28.880 --> 03:30.880
先去初始化工程了

03:30.880 --> 03:32.380
好像又忘了初始化工程

03:32.380 --> 03:33.380
那行吧

03:33.380 --> 03:34.880
我把这个复制一下

03:34.880 --> 03:36.380
我这里先用那个

03:36.380 --> 03:38.380
一二init

03:38.380 --> 03:39.380
很刚歪

03:39.380 --> 03:40.880
再初始一下工程

03:40.880 --> 03:42.880
初始完了

03:42.880 --> 03:45.380
就是加入这个package.get上

03:45.380 --> 03:47.380
再加入一些必要的之段

03:47.380 --> 03:48.380
好

03:48.380 --> 03:49.880
初始完了过后呢

03:49.880 --> 03:51.380
我们刚才安装了webpack

03:51.380 --> 03:52.880
对吧 安装了webpack

03:52.880 --> 03:54.880
其实现在就已经具有打包的功能了

03:54.880 --> 03:55.880
只不过webpack

03:55.880 --> 03:57.880
它里边有很多配置呢

03:57.880 --> 04:00.880
跟那个ts是一样的

04:00.880 --> 04:02.380
它里边有很多的配置

04:02.380 --> 04:04.380
我们需要对它进行配置一下

04:04.380 --> 04:05.380
我再说一次

04:05.380 --> 04:06.880
我们这些课讲的不是webpack

04:06.880 --> 04:07.880
所以说很多东西

04:07.880 --> 04:09.880
我只是简单的提一下就行了

04:09.880 --> 04:10.880
我们后边会有专门的

04:10.880 --> 04:11.880
这个webpack的课程

04:11.880 --> 04:13.380
大家持续关注

04:13.380 --> 04:14.880
建立这么一个配置文件

04:14.880 --> 04:17.880
webpack.config

04:17.880 --> 04:19.380
点解释

04:19.380 --> 04:20.880
你看 这个图标都变了

04:20.880 --> 04:23.880
就是webpack的这个logo

04:23.880 --> 04:25.380
好 这个配置文件里边

04:25.380 --> 04:26.380
我们写这样子写

04:26.380 --> 04:28.880
module is port

04:28.880 --> 04:29.880
这是什么

04:29.880 --> 04:31.880
这是那个loader环境里边的

04:31.880 --> 04:33.880
common.get这个导出语法

04:33.880 --> 04:35.880
对吧 也只有这个文件里边

04:35.880 --> 04:36.880
需要这样子写

04:36.880 --> 04:37.880
其他文件我们就可以使用

04:37.880 --> 04:40.380
s6里边的这种模块号语法

04:40.380 --> 04:42.880
这个文件需要用这种语法来导出

04:42.880 --> 04:45.380
因为这个文件是需要被loader环境

04:45.380 --> 04:47.380
需要在loader环境下读取的

04:47.380 --> 04:50.880
因此它不支持用其他的模块法方式

04:50.880 --> 04:53.880
好 这里面我们写上一些配置

04:53.880 --> 04:55.880
导出这个对象其实就是webpack的配置

04:55.880 --> 04:57.880
这个配置里边有一些配置

04:57.880 --> 04:58.880
我们是必须要写的

04:58.880 --> 04:59.880
一个是entry

04:59.880 --> 05:01.380
表示入口文件

05:01.380 --> 05:03.380
就像咱们loader.get一样

05:03.380 --> 05:04.880
它有个启动文件对吧

05:04.880 --> 05:06.880
那么相当于这里就是启动文件

05:06.880 --> 05:08.380
我们到时候运行的时候

05:08.380 --> 05:10.380
需要从哪个文件里面运行

05:10.380 --> 05:12.380
这里我跟一般通常

05:12.380 --> 05:14.380
我们会把启动文件放到

05:14.380 --> 05:16.380
src目录下面的

05:16.380 --> 05:17.380
哪个位置呢

05:17.380 --> 05:19.380
index.js

05:19.380 --> 05:21.380
我们放到这个文件里边

05:21.380 --> 05:22.880
把它作为启动文件

05:22.880 --> 05:24.880
好 那个启动文件可以有依赖

05:24.880 --> 05:26.380
可以使用模块化对吧

05:26.380 --> 05:27.380
来进行依赖

05:27.380 --> 05:29.880
就这个文件里面可能会依赖其他文件

05:29.880 --> 05:31.380
那么我们不管

05:31.380 --> 05:34.380
让这个webpack来帮我们

05:34.380 --> 05:35.880
进行依赖管理

05:35.880 --> 05:38.380
好 这里我就可以新建这么一个文件

05:38.380 --> 05:40.380
src

05:40.380 --> 05:41.880
新建这么一个文件

05:41.880 --> 05:44.880
文件下面要建一个index.js

05:44.880 --> 05:46.880
这个文件里面随便写个吧

05:46.880 --> 05:48.880
随便写个

05:48.880 --> 05:50.880
测试一下

05:50.880 --> 05:52.880
这是我们的入口文件

05:52.880 --> 05:54.880
还有一个配置呢 就是出口文件

05:54.880 --> 05:56.880
output

05:56.880 --> 05:58.880
就是出口文件在哪

05:58.880 --> 05:59.880
要配置

05:59.880 --> 06:01.880
它这里的配置的话是一个对象

06:01.880 --> 06:03.880
你需要配置这么一些东西

06:03.880 --> 06:05.880
第一个是我们的出口文件

06:05.880 --> 06:07.880
它的根目录在哪

06:07.880 --> 06:09.880
咱们的入口文件根目录到src

06:09.880 --> 06:10.880
对吧

06:10.880 --> 06:12.880
我们的出口文件的根目录在哪呢

06:12.880 --> 06:14.880
我们要配置一下

06:14.880 --> 06:16.880
比方说我们通常都是这样的写的

06:16.880 --> 06:17.880
pass

06:17.880 --> 06:19.880
根目录在哪呢

06:19.880 --> 06:21.880
这个文件夹

06:21.880 --> 06:23.880
disk的文件夹

06:23.880 --> 06:25.880
让它给我们生成disk的文件夹

06:25.880 --> 06:27.880
来存放我们打包的结果

06:27.880 --> 06:28.880
它会把这个文件

06:28.880 --> 06:30.880
以它的所有依赖进行打包

06:30.880 --> 06:31.880
打包到这个文件夹里面

06:31.880 --> 06:32.880
如果你不太理解的话

06:32.880 --> 06:33.880
你跟着我写就行了

06:33.880 --> 06:35.880
因为我们现在讲的不是webpack

06:35.880 --> 06:36.880
而这里的配置的话

06:36.880 --> 06:39.880
我也只会使用最简单的配置

06:39.880 --> 06:40.880
好 这里呢

06:40.880 --> 06:41.880
由于这里这个路径

06:41.880 --> 06:43.880
它必须使用绝对路径

06:43.880 --> 06:45.880
它不能使用这种相对路径

06:45.880 --> 06:46.880
所以说这一块呢

06:46.880 --> 06:47.880
我们需要用到

06:47.880 --> 06:50.880
这个漏的环境里边的pass

06:51.880 --> 06:53.880
它把我们根据相对路径

06:53.880 --> 06:55.880
来生成一个绝对路径

06:55.880 --> 06:57.880
ok 这里pass

06:57.880 --> 06:58.880
result

06:58.880 --> 07:02.770
把它转变成绝对路径

07:02.770 --> 07:05.770
这代码是把它转变成绝对路径

07:05.770 --> 07:06.770
好 配置过去过后

07:06.770 --> 07:07.770
还有一个配置

07:07.770 --> 07:08.770
就是file

07:08.770 --> 07:10.770
打包的GS文件

07:10.770 --> 07:12.770
它的文件名是什么

07:12.770 --> 07:13.770
放到哪里

07:13.770 --> 07:15.770
放到这个目录下的哪个地方

07:15.770 --> 07:17.770
可以在这里配置

07:17.770 --> 07:18.770
放到哪呢

07:18.770 --> 07:21.770
放到script里边的

07:21.770 --> 07:23.770
这个目录下面的bond

07:23.770 --> 07:25.770
bond啥意思呢

07:25.770 --> 07:27.770
bond表示捆的意思

07:27.770 --> 07:29.770
你可以当然也可以用其他的文件名

07:29.770 --> 07:31.770
不知道大家有没有

07:31.770 --> 07:33.770
小时候有没有在农村呆过

07:33.770 --> 07:34.770
农村里边

07:34.770 --> 07:35.770
它有很多那种稻草

07:35.770 --> 07:36.770
一道浓芒季节

07:36.770 --> 07:37.770
有很多那种稻草

07:37.770 --> 07:39.770
它就是扎成一捆一捆的

07:39.770 --> 07:40.770
就这个意思

07:40.770 --> 07:41.770
就是把打包

07:41.770 --> 07:43.770
把这些文件打包成一个解释文件

07:43.770 --> 07:45.770
打包到这一个位置

07:45.770 --> 07:47.770
好 打包完成

07:47.770 --> 07:49.770
我们看一下那个

07:49.770 --> 07:50.770
运行的效果吧

07:50.770 --> 07:51.770
运行的效果的话

07:51.770 --> 07:53.770
我们先配置一个运行的命令

07:53.770 --> 07:55.770
现在这边配置一个运行的命令

07:55.770 --> 07:57.770
script

07:57.770 --> 08:00.770
命令的话我们就使用build

08:00.770 --> 08:02.770
然后有这么一个命令

08:02.770 --> 08:04.770
这个命令的话就是完成打包

08:04.770 --> 08:05.770
打包的时候

08:05.770 --> 08:07.770
我们调用webpack这个命令

08:07.770 --> 08:08.770
我们刚才安装了

08:08.770 --> 08:09.770
它会有这么一个命令

08:09.770 --> 08:10.770
webpack

08:10.770 --> 08:12.770
这个命令下面我们再配置一下

08:12.770 --> 08:14.770
配置一下mod

08:14.770 --> 08:15.770
就是模式

08:15.770 --> 08:17.770
模式的话它有

08:17.770 --> 08:18.770
通常我们配置为两种

08:18.770 --> 08:19.770
一种是开发模式

08:19.770 --> 08:21.770
一种是生产模式

08:21.770 --> 08:23.770
这里一般打包的时候

08:23.770 --> 08:25.770
我们都要使用生产模式

08:28.770 --> 08:29.770
表示生产模式

08:29.770 --> 08:30.770
这写错了

08:30.770 --> 08:31.770
什么叫生产模式

08:31.770 --> 08:33.770
就是我们的代码写完了

08:33.770 --> 08:34.770
要发布了

08:34.770 --> 08:35.770
要真的去投入使用了

08:35.770 --> 08:36.770
要放到服务系上了

08:36.770 --> 08:38.770
那么这个时候

08:38.770 --> 08:39.770
要进行打包

08:39.770 --> 08:40.770
打包的时候

08:40.770 --> 08:42.770
需要它进行一下优化

08:42.770 --> 08:44.770
压缩能不能操作

08:44.770 --> 08:45.770
所以说我们这里的模式

08:45.770 --> 08:47.770
要选用生产模式

08:47.770 --> 08:49.770
一会我们会配置开发模式

08:49.770 --> 08:51.770
开发模式的话又不一样

08:51.770 --> 08:53.770
这里我们先试着做一下

08:53.770 --> 08:54.770
运行一下

08:54.770 --> 08:56.770
np build

08:56.770 --> 08:58.770
运行一下

08:58.770 --> 08:59.770
完成

08:59.770 --> 09:00.770
你看

09:00.770 --> 09:01.770
它告诉我

09:01.770 --> 09:03.770
这个文件已经生成了

09:03.770 --> 09:04.770
放到哪呢

09:04.770 --> 09:06.770
放到第10目录下边的

09:06.770 --> 09:07.770
第10目录下边

09:07.770 --> 09:09.770
有一个script文件夹

09:09.770 --> 09:11.770
这就是帮到点解释

09:11.770 --> 09:13.770
这里面有压缩

09:13.770 --> 09:14.770
有压缩

09:14.770 --> 09:15.770
它加入了一些代码

09:15.770 --> 09:16.770
这就是我们刚才写的

09:16.770 --> 09:17.770
concentrate的代码

09:18.770 --> 09:20.770
现在

09:20.770 --> 09:22.770
做了一些基本配置过后

09:22.770 --> 09:24.770
我们还需要做一些额外的东西

09:24.770 --> 09:26.770
现在我们还差页面

09:26.770 --> 09:28.770
没有页面

09:28.770 --> 09:29.770
页面的话

09:29.770 --> 09:30.770
根据我们以前

09:30.770 --> 09:31.770
其实大家学过react

09:31.770 --> 09:32.770
学过vue

09:32.770 --> 09:33.770
应该知道我来做什么

09:33.770 --> 09:34.770
对吧

09:34.770 --> 09:35.770
我们页面一般放哪呢

09:35.770 --> 09:36.770
一般放的这个文件

09:36.770 --> 09:37.770
public

09:37.770 --> 09:39.770
就是页面模板

09:39.770 --> 09:40.770
我们放这

09:40.770 --> 09:42.770
这个模板里边

09:42.770 --> 09:43.770
我们建立一个文件

09:43.770 --> 09:44.770
给大家取名为

09:44.770 --> 09:45.770
index.atmail

09:45.770 --> 09:47.770
就是我们的模板文件

09:47.770 --> 09:48.770
这个文件里边

09:48.770 --> 09:49.770
我们写个啥呢

09:49.770 --> 09:50.770
就随便写个吧

09:50.770 --> 09:52.770
取个标题

09:52.770 --> 09:53.770
俄罗斯

09:53.770 --> 09:54.770
方块

09:55.770 --> 09:56.770
标题

09:56.770 --> 09:58.770
然后这里有个div

09:58.770 --> 09:59.770
其他也没啥了

09:59.770 --> 10:00.770
就是一个div

10:00.770 --> 10:02.770
剩下的事情

10:02.770 --> 10:03.770
全部用js搞定

10:03.770 --> 10:05.770
因为它就提供一个div

10:06.770 --> 10:07.770
对

10:07.770 --> 10:08.770
就这样子吧

10:08.770 --> 10:09.770
先这样子

10:10.770 --> 10:11.770
这个div里边

10:11.770 --> 10:12.770
我们想想要不要加些东西

10:12.770 --> 10:13.770
先就这样子吧

10:13.770 --> 10:14.770
我们之后再说吧

10:14.770 --> 10:15.770
之后再说

10:16.770 --> 10:18.770
这个页面我们建好了之后

10:18.770 --> 10:19.770
现在我希望

10:19.770 --> 10:20.770
他打包的时候

10:20.770 --> 10:21.770
他打包的时候

10:21.770 --> 10:23.770
是根据这个页面的内容

10:23.770 --> 10:24.770
把这个页面

10:24.770 --> 10:26.770
也要打包到这个结果里边

10:26.770 --> 10:27.770
这个时候

10:28.770 --> 10:29.770
微派个本身

10:29.770 --> 10:30.770
他做不到

10:30.770 --> 10:31.770
他做不到

10:31.770 --> 10:33.770
需要去安装一个插件

10:33.770 --> 10:35.770
这个插件的名字

10:35.770 --> 10:36.770
它叫做

10:37.770 --> 10:38.770
它叫做

10:40.770 --> 10:41.770
atmail

10:41.770 --> 10:43.770
webpack

10:43.770 --> 10:44.770
plunge

10:44.770 --> 10:46.770
它是个webpack的插件

10:46.770 --> 10:47.770
关于这个插件

10:47.770 --> 10:49.770
具体是怎么使用的

10:49.770 --> 10:50.770
你要让我记得住

10:50.770 --> 10:51.770
我也记不住

10:51.770 --> 10:52.770
我也背不住

10:52.770 --> 10:53.770
这些

10:53.770 --> 10:54.770
里面的插件太多了

10:54.770 --> 10:55.770
那么怎么去使用呢

10:55.770 --> 10:57.770
大家可以去查

10:57.770 --> 10:58.770
查官方稳当

10:58.770 --> 10:59.770
查官方稳当

11:00.770 --> 11:01.770
打开一个网页

11:02.770 --> 11:03.770
这里

11:04.770 --> 11:06.770
在npm去查一下

11:06.770 --> 11:07.770
npm解释的

11:08.770 --> 11:11.980
我们搜一下这个插件

11:11.980 --> 11:13.980
atmail webpack plunge

11:13.980 --> 11:15.980
它是用来处理atmail文件的

11:17.980 --> 11:18.980
可以看一下它的说明

11:19.980 --> 11:20.980
用法非常简单

11:20.980 --> 11:21.980
你首先要安装它

11:21.980 --> 11:23.980
你只需要用开发一代就行了

11:23.980 --> 11:25.980
因为这些都是在打包阶段

11:25.980 --> 11:26.980
打包完了之后

11:26.980 --> 11:27.980
他们就不存在了

11:27.980 --> 11:29.980
这有点类似于TS对吧

11:30.980 --> 11:31.980
这里安装

11:31.980 --> 11:32.980
我这种使用一样

11:32.980 --> 11:33.980
add

11:33.980 --> 11:35.980
还是用鞋杠横杠地

11:35.980 --> 11:36.980
表示开发依赖

11:36.980 --> 11:41.980
安装atmail webpack plunge

11:42.980 --> 11:43.980
安装

11:43.980 --> 11:44.980
然后我们这里看一下

11:44.980 --> 11:46.980
这个文档怎么去使用

11:47.980 --> 11:48.980
其实这些都是

11:48.980 --> 11:49.980
一般是查文档完成的

11:49.980 --> 11:50.980
谁背得住

11:50.980 --> 11:52.980
用法非常简单

11:52.980 --> 11:53.980
怎么用呢

11:53.980 --> 11:55.980
你只需要在这

11:55.980 --> 11:56.980
使用在这

11:56.980 --> 11:58.980
首先把它导入进来

11:58.980 --> 12:01.980
跟着它的官方文档的说法来用就行了

12:01.980 --> 12:02.980
这里

12:03.980 --> 12:04.980
在配置目录下面

12:04.980 --> 12:05.980
在配置里边

12:05.980 --> 12:06.980
先把它导入进来

12:07.980 --> 12:08.980
导入进来过后

12:09.980 --> 12:10.980
既然是插件应该放哪呢

12:10.980 --> 12:13.980
应该放plunge

12:14.980 --> 12:15.980
放这个数组里边

12:16.980 --> 12:18.980
这里就可以去溜一个

12:18.980 --> 12:20.980
新创建一个插件

12:20.980 --> 12:21.980
atmail webpack plunge

12:21.980 --> 12:22.980
创建这个插件

12:23.980 --> 12:25.980
这个插件里面可以有很多的配置

12:25.980 --> 12:26.980
有很多的配置

12:26.980 --> 12:28.980
那么这里面有些配置我们是需要的

12:28.980 --> 12:30.980
因为它默认情况下

12:30.980 --> 12:31.980
它是不知道

12:32.980 --> 12:33.980
生存的页面

12:33.980 --> 12:34.980
生存的页面

12:34.980 --> 12:36.980
以哪个文件为模板

12:36.980 --> 12:37.980
它是不知道的

12:37.980 --> 12:39.980
我们应该要告诉他

12:39.980 --> 12:41.980
告诉他你生存页面的时候

12:41.980 --> 12:42.980
他可以帮助我们生存页面

12:42.980 --> 12:43.980
生存页面的时候

12:43.980 --> 12:45.980
以这个页面为模板

12:45.980 --> 12:47.980
其实大家以前用的

12:47.980 --> 12:49.980
WuRX的搅手架就是这样做的

12:49.980 --> 12:50.980
对吧

12:50.980 --> 12:51.980
我看一下

12:51.980 --> 12:53.980
它这里面下面有

12:53.980 --> 12:54.980
各种各样的配置

12:54.980 --> 12:55.980
OK我看到了

12:56.980 --> 12:58.980
这个template

13:00.980 --> 13:02.980
这个template

13:02.980 --> 13:03.980
就配置了模板文件

13:03.980 --> 13:04.980
模板文件在哪

13:05.980 --> 13:07.980
我们复制一下

13:07.980 --> 13:08.980
给他进行配置

13:08.980 --> 13:09.980
这里有一个配置对象

13:09.980 --> 13:11.980
配置一下它的template

13:11.980 --> 13:12.980
模板文件在哪呢

13:12.980 --> 13:13.980
告诉他

13:13.980 --> 13:15.980
模板文件在public目标下面的

13:15.980 --> 13:16.980
应得的是atmail

13:16.980 --> 13:18.980
以这个页面为模板

13:18.980 --> 13:19.980
你去帮我生存一个

13:19.980 --> 13:20.980
最终的打包结果

13:20.980 --> 13:21.980
在打包结果里面

13:21.980 --> 13:22.980
去给我生存页面

13:22.980 --> 13:23.980
好了

13:23.980 --> 13:25.980
我们现在再来

13:25.980 --> 13:27.980
可以只好查件过后

13:27.980 --> 13:28.980
再来运行一下

13:28.980 --> 13:29.980
再来运行一下

13:34.980 --> 13:35.980
运行完成

13:35.980 --> 13:36.980
你会发现

13:36.980 --> 13:37.980
它多了一个文件

13:37.980 --> 13:38.980
应得的是atmail

13:38.980 --> 13:39.980
在哪呢

13:39.980 --> 13:40.980
在这

13:40.980 --> 13:41.980
生存了个文件

13:41.980 --> 13:43.980
并且在这个文件里面

13:43.980 --> 13:44.980
它已经完成了

13:44.980 --> 13:45.980
JS的引用了

13:45.980 --> 13:46.980
它会把JS

13:46.980 --> 13:47.980
放到这个位置

13:47.980 --> 13:48.980
前面都是

13:48.980 --> 13:49.980
我们模板文件里面

13:49.980 --> 13:50.980
写的东西对吧

13:50.980 --> 13:51.980
它会把JS

13:51.980 --> 13:52.980
加入到这里

13:52.980 --> 13:53.980
好这是这一块

13:53.980 --> 13:55.980
这是关于这个查件

13:55.980 --> 13:56.980
还有其实

13:56.980 --> 13:57.980
还有些其他的

13:57.980 --> 13:58.980
比方说到时候

13:58.980 --> 13:59.980
我们打包的时候

13:59.980 --> 14:00.980
有的时候

14:00.980 --> 14:02.980
有些JS已经没有用了

14:02.980 --> 14:03.980
已经没有用了

14:03.980 --> 14:04.980
比方说

14:05.980 --> 14:06.980
怎么说呢

14:06.980 --> 14:07.980
我这里

14:07.980 --> 14:09.980
写一个abc.js

14:10.980 --> 14:11.980
这个js

14:11.980 --> 14:13.980
导出export

14:13.980 --> 14:14.980
defort

14:14.980 --> 14:15.980
随便导出吧

14:15.980 --> 14:16.980
导出一个支付刷

14:16.980 --> 14:17.980
随便

14:17.980 --> 14:18.980
然后这个应得是

14:18.980 --> 14:19.980
.js里面去导入

14:19.980 --> 14:22.980
导入abc from

14:23.980 --> 14:24.980
abc

14:24.980 --> 14:25.980
defort

14:25.980 --> 14:26.980
abc

14:26.980 --> 14:27.980
去导入

14:27.980 --> 14:28.980
导入完了过后

14:28.980 --> 14:29.980
我现在在生成

14:29.980 --> 14:30.980
你会发现

14:34.980 --> 14:35.980
我清理一下

14:35.980 --> 14:36.980
清理一下工程

14:36.980 --> 14:37.980
这个地方还不会

14:37.980 --> 14:38.980
还不会导致问题

14:39.980 --> 14:40.980
就是说

14:40.980 --> 14:41.980
我们有的时候

14:41.980 --> 14:42.980
我们打包的时候

14:42.980 --> 14:43.980
它里边可能

14:43.980 --> 14:44.980
已经有一些东西了

14:44.980 --> 14:46.980
刚刚的例子不太好

14:47.980 --> 14:48.980
这里面

14:48.980 --> 14:49.980
可能已经有一些东西了

14:49.980 --> 14:51.980
就之前打包的结果

14:51.980 --> 14:52.980
那么现在打包呢

14:52.980 --> 14:54.980
比方说这一次打包呢

14:54.980 --> 14:55.980
它这些东西

14:55.980 --> 14:56.980
应该消失才对

14:56.980 --> 14:57.980
就是以前有些东西

14:57.980 --> 14:58.980
已经删除掉了

14:58.980 --> 14:59.980
不需要了

14:59.980 --> 15:00.980
不需要了

15:00.980 --> 15:01.980
那么现在我们需要

15:01.980 --> 15:03.980
把它的工程清理一下

15:03.980 --> 15:04.980
就是先把这个

15:04.980 --> 15:05.980
第四文件删除

15:05.980 --> 15:06.980
再重新打包

15:06.980 --> 15:07.980
就这个意思

15:07.980 --> 15:08.980
我解释那么多干嘛呢

15:09.980 --> 15:10.980
就是把这个文件

15:10.980 --> 15:11.980
先删除再重新打包

15:11.980 --> 15:13.980
那么这个时候怎么办呢

15:13.980 --> 15:14.980
这个时候呢

15:14.980 --> 15:15.980
需要你去安装

15:15.980 --> 15:17.980
另外一个插件

15:17.980 --> 15:18.980
另外一个插件

15:18.980 --> 15:19.980
这个插件的名字

15:19.980 --> 15:20.980
叫做

15:20.980 --> 15:22.980
叫做安装

15:22.980 --> 15:24.980
叫做klin

15:24.980 --> 15:25.980
klin

15:25.980 --> 15:26.980
klin

15:26.980 --> 15:28.980
webpack

15:28.980 --> 15:29.980
plange

15:29.980 --> 15:30.980
你看它后维都是一样的

15:30.980 --> 15:31.980
对吧

15:31.980 --> 15:32.980
都表示的是

15:32.980 --> 15:34.980
webpack的插件

15:34.980 --> 15:35.980
我们看一下

15:35.980 --> 15:36.980
这个插件

15:36.980 --> 15:37.980
同样的

15:37.980 --> 15:38.980
往上去

15:38.980 --> 15:39.980
收一下

15:39.980 --> 15:40.980
收一下

15:41.980 --> 15:42.980
就这个插件

15:42.980 --> 15:43.980
好

15:43.980 --> 15:44.980
首先安装它

15:44.980 --> 15:45.980
安装它也是使用

15:45.980 --> 15:46.980
开发一旦

15:46.980 --> 15:47.980
安装一下

15:47.980 --> 15:48.980
现在安装

15:48.980 --> 15:49.980
一二

15:49.980 --> 15:50.980
add

15:50.980 --> 15:51.980
横杠地

15:51.980 --> 15:52.980
然后这里

15:53.980 --> 15:54.980
klin

15:54.980 --> 15:55.980
webpack

15:56.980 --> 15:57.980
plange

15:57.980 --> 15:58.980
好

15:58.980 --> 15:59.980
安装

15:59.980 --> 16:00.980
看一下这个插件怎么用啊

16:00.980 --> 16:01.980
这个插件用法很简单

16:01.980 --> 16:02.980
非常非常简单

16:02.980 --> 16:03.980
你看

16:03.980 --> 16:04.980
这里说了就怎么用了

16:05.980 --> 16:06.980
复制

16:06.980 --> 16:07.980
把这个代码复制一下

16:07.980 --> 16:08.980
先把这个插件导入进来

16:08.980 --> 16:10.980
然后在plange里面

16:10.980 --> 16:11.980
给它创建这么一个插件

16:11.980 --> 16:12.980
就完事了

16:12.980 --> 16:13.980
好

16:13.980 --> 16:14.980
来吧

16:14.980 --> 16:16.980
我们在webpack里边

16:16.980 --> 16:17.980
先这里

16:17.980 --> 16:18.980
先去引用这个插件

16:18.980 --> 16:19.980
好

16:19.980 --> 16:20.980
引用进来过后

16:20.980 --> 16:21.980
在这里

16:21.980 --> 16:22.980
再去雕用一下

16:22.980 --> 16:23.980
六一个

16:23.980 --> 16:24.980
klin

16:24.980 --> 16:25.980
webpack

16:25.980 --> 16:26.980
plange

16:26.980 --> 16:27.980
OK

16:27.980 --> 16:28.980
好

16:28.980 --> 16:29.980
那么

16:29.980 --> 16:30.980
现在咱们

16:30.980 --> 16:31.980
把这个插件安装上过后

16:31.980 --> 16:32.980
咱们再看

16:32.980 --> 16:33.980
在打包的时候

16:33.980 --> 16:34.980
它会先清理这个目录

16:34.980 --> 16:35.980
先把这个目录清理干净

16:35.980 --> 16:36.980
然后再重新打包

16:36.980 --> 16:37.980
NPM装

16:37.980 --> 16:38.980
有的

16:38.980 --> 16:39.980
好

16:39.980 --> 16:40.980
现在

16:40.980 --> 16:42.980
我们把这个插件

16:42.980 --> 16:43.980
放

16:44.980 --> 16:45.980
有的

16:45.980 --> 16:46.980
运行

16:47.980 --> 16:48.980
你看

16:48.980 --> 16:49.980
那种先清理干净

16:49.980 --> 16:50.980
然后再重新打包

16:50.980 --> 16:51.980
起正妹的作用

16:51.980 --> 16:52.980
其他也没啥了

16:52.980 --> 16:53.980
好

16:53.980 --> 16:54.980
安装好了

16:54.980 --> 16:55.980
这两个插件之后

16:55.980 --> 16:57.980
我们还需要一个

16:57.980 --> 16:59.980
还需要一个东西

16:59.980 --> 17:00.980
就是咱们启动

17:00.980 --> 17:01.980
启动的时候

17:01.980 --> 17:02.980
我们现在

17:02.980 --> 17:03.980
都是要先完成打包

17:03.980 --> 17:04.980
才能运行

17:04.980 --> 17:05.980
对吧

17:05.980 --> 17:06.980
运行咋运行

17:06.980 --> 17:07.980
我只能去双击这个文件

17:07.980 --> 17:08.980
来进行运行

17:08.980 --> 17:09.980
对不对

17:09.980 --> 17:10.980
我们来看一下

17:10.980 --> 17:11.980
在这里

17:11.980 --> 17:12.980
双击这个文件

17:12.980 --> 17:13.980
我们看一下输出没有

17:13.980 --> 17:14.980
结果

17:14.980 --> 17:15.980
你看是不是输出了

17:15.980 --> 17:16.980
我们刚才那个

17:16.980 --> 17:17.980
index的介石里面

17:17.980 --> 17:18.980
就输出结果了

17:18.980 --> 17:20.980
需要在打包结果里面去运行

17:20.980 --> 17:21.980
这样的显得

17:21.980 --> 17:23.980
会比较的麻烦

17:23.980 --> 17:24.980
我们希望

17:24.980 --> 17:25.980
就像rex

17:25.980 --> 17:26.980
像vue那样子

17:26.980 --> 17:27.980
你直接运行

17:27.980 --> 17:28.980
输入一个命令

17:28.980 --> 17:29.980
它就给你启动起来了

17:29.980 --> 17:30.980
启动起来过后

17:30.980 --> 17:31.980
你单码一更改

17:31.980 --> 17:32.980
它就会

17:32.980 --> 17:33.980
页面就会

17:33.980 --> 17:34.980
做出响应的更改

17:34.980 --> 17:35.980
最好是这样子

17:35.980 --> 17:36.980
那么这个时候

17:36.980 --> 17:38.980
你需要去安装一个插件

17:38.980 --> 17:40.980
这个插件的名字叫做

17:41.980 --> 17:42.980
叫做

17:44.980 --> 17:45.980
webpack

17:47.980 --> 17:49.980
安装webpack

17:50.980 --> 17:51.980
dev server

17:52.980 --> 17:53.980
这么一个插件

17:53.980 --> 17:55.980
就是启动一个开发服务器

17:55.980 --> 17:56.980
通常在开发的

17:56.980 --> 17:57.980
环境下面

17:57.980 --> 17:58.980
那么会需要它

17:58.980 --> 17:59.980
咱们

18:00.980 --> 18:01.980
再来收一下这个插件

18:03.980 --> 18:04.980
就这个

18:04.980 --> 18:05.980
webpack dev server

18:06.980 --> 18:07.980
用法非常非常简单

18:07.980 --> 18:08.980
我们先安装一下

18:08.980 --> 18:09.980
先安装一下

18:09.980 --> 18:10.980
还是开发依赖

18:10.980 --> 18:12.980
因为它只在开发模式下有效

18:13.980 --> 18:14.980
安装

18:15.980 --> 18:16.980
add

18:17.980 --> 18:18.980
名字叫做

18:18.980 --> 18:21.980
webpack dev server

18:22.980 --> 18:23.980
安装一下

18:23.980 --> 18:24.980
怎么用呢

18:24.980 --> 18:26.980
它其实这个插件

18:26.980 --> 18:27.980
它可以配置

18:27.980 --> 18:29.980
也不需要配置太多东西

18:29.980 --> 18:31.980
甚至可以一行都不配置

18:31.980 --> 18:32.980
也可以不配置

18:32.980 --> 18:34.980
我们要做的事情是什么呢

18:34.980 --> 18:36.980
我们要做的事情就是

18:36.980 --> 18:37.980
它会生存一个命令

18:37.980 --> 18:39.980
我们去运行这个命令

18:39.980 --> 18:40.980
就完事了

18:40.980 --> 18:41.980
就完事了

18:41.980 --> 18:43.980
我们只要把命令复制一下

18:43.980 --> 18:44.980
这是个命令

18:44.980 --> 18:47.980
然后我们到Packy的节省里边

18:48.980 --> 18:49.980
给它加一个配置

18:49.980 --> 18:50.980
这里

18:50.980 --> 18:52.980
开发模式

18:52.980 --> 18:53.980
开发模式

18:53.980 --> 18:55.980
你帮我去启动一个

18:55.980 --> 18:57.980
运行这个命令

18:57.980 --> 18:58.980
来启动一个服务器

18:58.980 --> 18:59.980
就完事了

18:59.980 --> 19:00.980
咱们来试一下

19:00.980 --> 19:02.980
起到这么一个命令过后来试一下

19:02.980 --> 19:05.290
clear

19:05.290 --> 19:06.290
这里

19:06.290 --> 19:08.290
我们是用nprandave

19:09.290 --> 19:10.290
来启动起来

19:10.290 --> 19:11.290
把这个服务器

19:12.290 --> 19:13.290
它告诉我们

19:13.290 --> 19:14.290
下面试一些信息

19:14.290 --> 19:15.290
不用管它

19:15.290 --> 19:16.290
上面它告诉我们

19:16.290 --> 19:17.290
已经启动起来了

19:17.290 --> 19:19.290
这个端口号在哪呢

19:19.290 --> 19:20.290
localhost8080

19:20.290 --> 19:22.290
在这个端口号里边

19:22.290 --> 19:23.290
我们点击一下

19:24.290 --> 19:25.290
我们可以看到

19:25.290 --> 19:26.290
可以看到

19:26.290 --> 19:27.290
这里

19:27.290 --> 19:29.290
它就启动到一个服务器了

19:29.290 --> 19:30.290
一个开发服务器

19:30.290 --> 19:31.290
我们输出了我们的结果

19:31.290 --> 19:32.290
而且好处在什么呢

19:32.290 --> 19:34.290
好处在我们后边改了代码

19:34.290 --> 19:35.290
代码改变了之后

19:37.290 --> 19:38.290
这个是

19:38.290 --> 19:39.290
我们随便写

19:39.290 --> 19:40.290
这个文件不要了

19:42.290 --> 19:43.290
这里随便写

19:44.290 --> 19:45.290
写完了之后

19:45.290 --> 19:46.290
不要写成中文

19:46.290 --> 19:47.290
写完了之后一保存

19:48.290 --> 19:49.290
这边看

19:49.290 --> 19:51.290
它就跟着变化了

19:51.290 --> 19:53.290
其实跟我们5U React之处一样的

19:53.290 --> 19:54.290
差不多的

19:54.290 --> 19:55.290
简单配置一下就行了

19:55.290 --> 19:57.290
简单处理一下就行了

19:57.290 --> 19:59.290
不用搞得那么复杂

19:59.290 --> 20:00.290
因为我们重点

20:00.290 --> 20:01.290
不是在vipack里边

20:01.290 --> 20:03.290
vipack其实就

20:03.290 --> 20:04.290
这一块就差不多了

20:05.290 --> 20:07.290
那接下来是ts的问题了

20:07.290 --> 20:08.290
ts

20:08.290 --> 20:09.290
ts怎么来处理

20:09.290 --> 20:10.290
怎么我们

20:10.290 --> 20:11.290
之前使用vipack的话

20:11.290 --> 20:13.290
都是使用的是ts文件

20:13.290 --> 20:15.290
那么现在要处理ts文件

20:15.290 --> 20:17.290
那么ts文件的话

20:17.290 --> 20:20.290
你可以安装ts的

20:20.290 --> 20:23.290
相应loader

20:23.290 --> 20:24.290
相应loader

20:24.290 --> 20:25.290
loader是什么

20:25.290 --> 20:26.290
就夹载器

20:26.290 --> 20:28.290
就是vipack把这些文件

20:28.290 --> 20:29.290
依赖读出来过后

20:29.290 --> 20:31.290
有些文件他不认识

20:31.290 --> 20:32.290
比方说什么

20:32.290 --> 20:34.290
图片文件他不认识

20:34.290 --> 20:35.290
还有什么

20:35.290 --> 20:36.290
ts文件他不认识

20:36.290 --> 20:37.290
他只认识js

20:37.290 --> 20:39.290
只认识正确的js代码

20:39.290 --> 20:41.290
如果是ts文件

20:41.290 --> 20:42.290
他也不认识

20:42.290 --> 20:43.290
那么这些不认识的文件

20:43.290 --> 20:45.290
你需要告诉他

20:45.290 --> 20:47.290
把这些文件交给相应的夹载器

20:47.290 --> 20:48.290
让他们去夹载

20:48.290 --> 20:50.290
他们去完成处理

20:50.290 --> 20:52.290
那么你需要去安装

20:52.290 --> 20:54.290
相应的夹载器

20:54.290 --> 20:55.290
那么ts里面的夹载器

20:55.290 --> 20:57.290
我们通常会使用两个

20:57.290 --> 20:58.290
一个是tsloader

20:58.290 --> 21:00.290
它是专门为vipack开发的

21:00.290 --> 21:03.290
一个是叫osong

21:03.290 --> 21:06.290
osong

21:06.290 --> 21:07.290
tsloader

21:07.290 --> 21:09.290
这么两个都可以

21:09.290 --> 21:10.290
这个是官方的

21:10.290 --> 21:11.290
这个是官方的

21:11.290 --> 21:12.290
这个是民间的

21:12.290 --> 21:13.290
看你自己喜欢的

21:13.290 --> 21:14.290
其实都差不多

21:14.290 --> 21:17.290
就我们这一块的话

21:17.290 --> 21:19.290
用哪个都可以

21:19.290 --> 21:21.290
ts

21:21.290 --> 21:23.290
我们搜一下tsloader

21:23.290 --> 21:25.290
tsloader

21:25.290 --> 21:26.290
我们看哪个好用

21:26.290 --> 21:27.290
哪个就是下载人量多

21:27.290 --> 21:28.290
我们就用哪个

21:28.290 --> 21:30.290
看一下tsloader下载量多少

21:30.290 --> 21:35.290
每周下载量是100万左右

21:35.290 --> 21:38.290
我们看一下osong

21:38.290 --> 21:41.290
tsloader

21:41.290 --> 21:43.290
我这里打错了

21:43.290 --> 21:46.290
应该是个单词

21:46.290 --> 21:48.290
这里叫做这个东西

21:48.290 --> 21:50.290
叫osong typescriptsloader

21:50.290 --> 21:51.290
这些错了

21:51.290 --> 21:54.290
osong typescriptsloader

21:54.290 --> 21:56.290
我们进去看一下下载量多少

21:56.290 --> 21:58.290
42万

21:58.290 --> 22:00.290
我们就使用官方的

22:00.290 --> 22:02.290
tsloader

22:02.290 --> 22:04.290
进去看一下

22:04.290 --> 22:05.290
那么这个东西怎么用

22:05.290 --> 22:06.290
这个东西你先安装

22:06.290 --> 22:08.290
它告诉你先安装

22:08.290 --> 22:10.290
首先我们这里可以使用压

22:10.290 --> 22:11.290
安装

22:11.290 --> 22:13.290
还是使用开发模式

22:13.290 --> 22:14.290
安装

22:17.290 --> 22:18.290
停止

22:18.290 --> 22:21.290
这里要add

22:21.290 --> 22:23.290
很杠地tsloader

22:23.290 --> 22:25.290
先把这个loader安装起来

22:25.290 --> 22:27.290
安装到loader之后

22:27.290 --> 22:29.290
我们就要进行配置了

22:29.290 --> 22:30.290
但是安装的过程中

22:30.290 --> 22:31.290
它给你包了一个问题

22:31.290 --> 22:32.290
一个警告

22:32.290 --> 22:33.290
这个警告

22:33.290 --> 22:34.290
咱们在安装过程中

22:34.290 --> 22:35.290
发现了警告

22:35.290 --> 22:36.290
你需要把它处理一下

22:36.290 --> 22:37.290
需要去处理一下

22:37.290 --> 22:38.290
它说啥意思呢

22:38.290 --> 22:40.290
它说你这个

22:40.290 --> 22:41.290
我这个已经成功安装了

22:41.290 --> 22:42.290
但是呢

22:42.290 --> 22:44.290
这个tsloader

22:44.290 --> 22:45.290
它需要什么呢

22:45.290 --> 22:46.290
需要一个依赖

22:46.290 --> 22:48.290
就是type script

22:48.290 --> 22:49.290
需要这个依赖

22:49.290 --> 22:50.290
那你想

22:50.290 --> 22:52.290
它要夹载ts文件

22:52.290 --> 22:54.290
它要把ts代码进行解析

22:54.290 --> 22:56.290
它是不是需要type script

22:56.290 --> 22:57.290
对吧

22:57.290 --> 22:58.290
那么这个type script

22:58.290 --> 23:00.290
我们是全局安装了之前

23:00.290 --> 23:01.290
但是呢

23:01.290 --> 23:02.290
它这里要求的type script

23:02.290 --> 23:03.290
是在工程目录下边

23:03.290 --> 23:05.290
它从工程目录下边去读

23:05.290 --> 23:06.290
所以说

23:06.290 --> 23:08.290
这里我们还需要去安装

23:08.290 --> 23:10.290
一个type script

23:10.290 --> 23:12.290
这里我们记一下了

23:14.290 --> 23:17.290
他们依赖type script

23:17.290 --> 23:18.290
所以说你需要去安装一下

23:18.290 --> 23:19.290
在工程环境下面

23:19.290 --> 23:21.290
去安装一下type script

23:21.290 --> 23:22.290
这里我们安装一下

23:22.290 --> 23:24.290
一样

23:24.290 --> 23:25.290
add

23:25.290 --> 23:26.290
方钢D

23:26.290 --> 23:28.290
type script

23:28.290 --> 23:30.290
好,等它安装

23:30.290 --> 23:31.290
好,安装过后呢

23:31.290 --> 23:32.290
它就不会报这个警告了

23:32.290 --> 23:33.290
这个警告就消失了

23:33.290 --> 23:35.290
你看,现在没有警告了

23:35.290 --> 23:36.290
好,现在我们接下来

23:36.290 --> 23:37.290
安装好了

23:37.290 --> 23:39.290
这个就是tsloader之后

23:39.290 --> 23:40.290
我们需要进行配置

23:40.290 --> 23:42.290
要告诉webpack

23:42.290 --> 23:43.290
我们之后使用的

23:43.290 --> 23:45.290
你读到的ts文件

23:45.290 --> 23:48.290
需要把它交给tsloader

23:48.290 --> 23:49.290
去夹展

23:49.290 --> 23:50.290
那么这里怎么配置呢

23:50.290 --> 23:51.290
配置方式非常简单

23:51.290 --> 23:52.290
一个module

23:52.290 --> 23:54.290
module就是模块

23:54.290 --> 23:55.290
模块里边呢

23:55.290 --> 23:57.290
我们配置

23:57.290 --> 23:58.290
一个配置叫做弱式

23:58.290 --> 23:59.290
规则

23:59.290 --> 24:00.290
就是夹展规则

24:00.290 --> 24:02.290
这个规则里边呢

24:02.290 --> 24:03.290
是一个数组

24:03.290 --> 24:05.290
它有很多的规则可以配置

24:05.290 --> 24:06.290
有很多的规则可以配置

24:06.290 --> 24:08.290
一个规则就是一个对象

24:08.290 --> 24:09.290
好,我们来配置一下

24:09.290 --> 24:11.290
我给它加一条规则就够了

24:11.290 --> 24:12.290
什么规则呢

24:12.290 --> 24:13.290
test

24:13.290 --> 24:15.290
表示的是

24:15.290 --> 24:16.290
它匹配的时候

24:16.290 --> 24:18.290
它夹展这些模块的时候

24:18.290 --> 24:20.290
读到什么样的文件

24:20.290 --> 24:22.290
然后交给谁来处理

24:22.290 --> 24:23.290
就这个意思

24:23.290 --> 24:25.290
test是一个正轴表达式

24:25.290 --> 24:27.290
表示的是

24:27.290 --> 24:30.290
当我们读到什么文件的时候呢

24:30.290 --> 24:32.290
当我们读到

24:32.290 --> 24:34.290
以后最名为

24:34.290 --> 24:37.290
ts结尾的文件的时候

24:37.290 --> 24:38.290
多多表示

24:38.290 --> 24:39.290
真的表达式结束,对吧

24:39.290 --> 24:42.290
以ts结尾的文件的时候

24:42.290 --> 24:44.290
好,找到这样的文件之后呢

24:44.290 --> 24:45.290
我们让它交给谁呢

24:45.290 --> 24:47.290
交给loader

24:47.290 --> 24:48.290
通过loader来配置

24:48.290 --> 24:51.290
配置它交给谁来处理这个文件

24:51.290 --> 24:53.290
交给tsloader来处理

24:53.290 --> 24:55.290
因为WePycle他本身

24:55.290 --> 24:57.290
他处理不了这种代码的文件

24:57.290 --> 24:59.290
因此交给他来处理

24:59.290 --> 25:00.290
他可以处理

25:00.290 --> 25:01.290
好,这样子一配置的话

25:01.290 --> 25:03.290
我们之后就可以写ts文件了

25:03.290 --> 25:04.290
在这里

25:04.290 --> 25:06.290
出写ts

25:06.290 --> 25:08.290
入口文件把它变成ts

25:08.290 --> 25:09.290
那么这里的入口文件

25:09.290 --> 25:11.290
我也把它变成ts

25:11.290 --> 25:13.290
好,变成ts之后

25:13.290 --> 25:15.290
我们这里刚写一个ts代码

25:15.290 --> 25:16.290
试一下

25:16.290 --> 25:19.290
我们订一个辨量吧

25:19.290 --> 25:20.290
Hello

25:20.290 --> 25:21.290
一个字幕串

25:21.290 --> 25:22.290
你看,这是ts代码

25:22.290 --> 25:24.290
给它输入一个字幕串

25:24.290 --> 25:26.290
然后这里输出Hello

25:26.290 --> 25:28.290
好,看一下能不能正常处理

25:28.290 --> 25:29.290
保存一下

25:29.290 --> 25:30.290
这里打包

25:30.290 --> 25:33.290
NPROD

25:33.290 --> 25:34.290
打包

25:34.290 --> 25:36.290
好,稍等片刻

25:37.290 --> 25:39.290
好,它这里爆错了

25:39.290 --> 25:41.290
它爆出的原因是说

25:41.290 --> 25:42.290
在完成编译的时候呢

25:42.290 --> 25:44.290
它需要有一个编译的配置文件

25:44.290 --> 25:46.290
叫tsconfig.json

25:46.290 --> 25:48.290
它需要这么一个配置文件

25:48.290 --> 25:49.290
那好吧

25:49.290 --> 25:50.290
我们按照以前的做法

25:50.290 --> 25:52.290
我给它建立这么一个配置文件就行了

25:52.290 --> 25:55.290
是用tsc,两个横杠,一列尺

25:55.290 --> 25:57.290
再创建一个tsconfig.json

25:57.290 --> 25:58.290
这个配置文件

25:58.290 --> 26:00.290
好,这个配置文件里面呢

26:00.290 --> 26:01.290
我给它

26:01.290 --> 26:03.290
先随便弄一些配置吧

26:03.290 --> 26:04.290
先随便弄一些配置

26:04.290 --> 26:05.290
无所谓的

26:05.290 --> 26:06.290
先随便写一些配置

26:06.290 --> 26:07.290
就把它默认直吧

26:07.290 --> 26:09.290
我先看一下能不能打包了

26:09.290 --> 26:11.290
来,这里

26:11.290 --> 26:13.290
好,再来一次

26:14.290 --> 26:15.290
完毕的

26:15.290 --> 26:16.290
完成打包

26:16.290 --> 26:17.290
看一下

26:17.290 --> 26:21.430
好,打包完成

26:21.430 --> 26:22.430
打包完成之后呢,咱们到

26:22.430 --> 26:24.430
结果里面去看一下

26:24.430 --> 26:26.430
现在就是把ts代码

26:26.430 --> 26:29.430
就编译成为了js代码

26:29.430 --> 26:31.430
把ts代码就编译成为了js代码

26:31.430 --> 26:33.430
最终它就是编译成这个结果

26:33.430 --> 26:34.430
console log

26:34.430 --> 26:35.430
这个东西

26:35.430 --> 26:36.430
连编量都不见了

26:36.430 --> 26:37.430
连编量都不见了

26:37.430 --> 26:39.430
那么它是经过优化过后的

26:39.430 --> 26:40.430
因为优化过后

26:40.430 --> 26:41.430
优化过后你看这个代码

26:41.430 --> 26:42.430
是不是

26:42.430 --> 26:43.430
这个编量

26:43.430 --> 26:44.430
可以不需要了

26:44.430 --> 26:46.430
因为这个编量的作用就是来直接输出

26:46.430 --> 26:48.430
因此它经过了优化

26:48.430 --> 26:50.430
把这个编量直接给你取消掉了

26:50.430 --> 26:51.430
当然这个内形别墅也不见了

26:51.430 --> 26:53.430
因为最终的是js文件

26:53.430 --> 26:55.430
总之呢,现在呢

26:55.430 --> 26:57.430
由ts来编译我们的

26:57.430 --> 26:59.430
用tsloader

26:59.430 --> 27:00.430
由这个东西

27:00.430 --> 27:02.430
来编译这个文件

27:02.430 --> 27:04.430
对它进行编译

27:04.430 --> 27:05.430
编译的方式呢

27:05.430 --> 27:07.430
我们可以在tsconfig里面进行配置

27:07.430 --> 27:08.430
那么这个配置呢

27:08.430 --> 27:10.430
我们根据以前学习过的知识

27:10.430 --> 27:12.430
学习过的知识

27:12.430 --> 27:13.430
把这个配置

27:13.430 --> 27:14.430
我之前写好的配置

27:14.430 --> 27:15.430
直接复制

27:15.430 --> 27:16.430
粘贴过来

27:16.430 --> 27:17.430
然后解释一下呗

27:17.430 --> 27:19.430
解释一下这一块的配置

27:19.430 --> 27:21.430
其实也没多少可以说的

27:21.430 --> 27:23.430
这个地方表示啥意思呢

27:23.430 --> 27:25.430
表示的是编译的目标版本

27:25.430 --> 27:26.430
使用了哪个版本

27:26.430 --> 27:28.430
我这里使用了比较新的版本

27:28.430 --> 27:30.430
js7的版本

27:30.430 --> 27:31.430
当然你这里可以改

27:31.430 --> 27:32.430
改成比方说

27:32.430 --> 27:34.430
改成js5也没什么问题

27:34.430 --> 27:36.430
然后模块化标准

27:36.430 --> 27:38.430
我这里使用的是snext

27:38.430 --> 27:39.430
snext

27:39.430 --> 27:41.430
就是最新的模块化标准

27:41.430 --> 27:44.430
当然它完全支持snext的模块化

27:44.430 --> 27:45.430
最新的模块化标准的

27:45.430 --> 27:46.430
可以动态的导入

27:46.430 --> 27:48.430
可以动态的导入的

27:48.430 --> 27:49.430
当然你不用担心

27:49.430 --> 27:50.430
这种新问题

27:50.430 --> 27:52.430
因为它最终还是snext

27:52.430 --> 27:53.430
这里是我们的环境

27:53.430 --> 27:55.430
你看现在环境有变化

27:55.430 --> 27:57.430
现在我们是在做浏览器

27:57.430 --> 27:58.430
环境的开发

27:58.430 --> 28:00.430
因此我加入了洞

28:00.430 --> 28:02.430
加入了洞

28:02.430 --> 28:03.430
这个是outdr

28:03.430 --> 28:05.430
其实这个东西不用配置

28:05.430 --> 28:06.430
其实这个东西还不用配置

28:06.430 --> 28:07.430
因为

28:07.430 --> 28:08.430
现在呢

28:08.430 --> 28:10.430
不是由它来进行

28:10.430 --> 28:12.430
是由那个就是

28:12.430 --> 28:14.430
tsnode来进行打包

28:14.430 --> 28:16.430
而是交给了wippack来进行打包

28:16.430 --> 28:18.430
交给了wippack来进行打包

28:18.430 --> 28:19.430
因此这个配置

28:19.430 --> 28:20.430
我们之前写的这个配置

28:20.430 --> 28:21.430
可以不要了

28:21.430 --> 28:23.430
下一个配置sourcemap

28:23.430 --> 28:25.430
这个表示的是

28:25.430 --> 28:27.430
应该了解sourcemap吧

28:27.430 --> 28:29.430
sourcemap表示

28:29.430 --> 28:30.430
代码地图

28:30.430 --> 28:31.430
这个代码地图有什么用呢

28:31.430 --> 28:33.430
就是我们咱们最后

28:33.430 --> 28:34.430
最终运行的是啥

28:34.430 --> 28:37.430
运行的是最终的这个js

28:37.430 --> 28:39.430
这是我们运行的东西

28:39.430 --> 28:40.430
那么在运行它的时候

28:40.430 --> 28:42.430
如果它包了错

28:42.430 --> 28:44.430
我看这里面的错误能看懂吗

28:44.430 --> 28:45.430
能看懂吗

28:45.430 --> 28:46.430
看这里面的错误

28:46.430 --> 28:48.430
肯定是看不懂的对吧

28:48.430 --> 28:50.430
那么你开启这个代码地图之后呢

28:50.430 --> 28:51.430
它的好处在哪呢

28:51.430 --> 28:52.430
就是

28:52.430 --> 28:53.430
如果

28:53.430 --> 28:55.430
它最终js里面包错了

28:55.430 --> 28:58.430
它会给你反映到ts代码里边去

28:58.430 --> 29:00.430
就是你告诉你ts代码里边

29:00.430 --> 29:01.430
是哪里出了问题

29:01.430 --> 29:02.430
它就是这么一个好处

29:02.430 --> 29:04.430
它相当于建了个地图过后呢

29:04.430 --> 29:05.430
我们可以

29:05.430 --> 29:07.430
相当于是有个字典

29:07.430 --> 29:08.430
它告诉你

29:08.430 --> 29:09.430
你这个ts代码

29:09.430 --> 29:10.430
对应到

29:10.430 --> 29:11.430
你这个ts代码

29:11.430 --> 29:13.430
最对应到ts的哪个地方

29:13.430 --> 29:14.430
这样子呢

29:14.430 --> 29:15.430
它就能完成关联了

29:15.430 --> 29:17.430
大还这么一个意思

29:17.430 --> 29:18.430
我们后边

29:18.430 --> 29:21.430
有webpack的课程

29:21.430 --> 29:23.430
我们再详细的去显示这个东西

29:23.430 --> 29:26.430
好 这里是使用严格模式

29:26.430 --> 29:27.430
所有东西

29:27.430 --> 29:29.430
所有东西都完全

29:29.430 --> 29:31.430
进行严格的内容检查

29:31.430 --> 29:33.430
把这个开启

29:33.430 --> 29:34.430
然后这个部分的配置呢

29:34.430 --> 29:35.430
表示的是

29:36.430 --> 29:37.430
移除注释

29:37.430 --> 29:39.430
就咱们在ts里面的注释

29:39.430 --> 29:40.430
ts里面的注释

29:40.430 --> 29:41.430
我要把它移除掉

29:41.430 --> 29:43.430
移除掉注释

29:43.430 --> 29:45.430
好 然后这一块呢是

29:45.430 --> 29:47.430
指的是咱们的

29:48.430 --> 29:49.430
讲过了是吧

29:49.430 --> 29:51.430
就是用es6的模块化

29:51.430 --> 29:54.430
用es标准里面的模块化方式

29:54.430 --> 29:56.430
和非es进行交互

29:56.430 --> 29:57.430
就是有的时候呢

29:57.430 --> 29:59.430
我们要使用一些

29:59.430 --> 30:01.430
不是用es6写的代码

30:01.430 --> 30:02.430
我们要对它进行

30:02.430 --> 30:04.430
用es6的方式进行交互

30:04.430 --> 30:05.430
我们要使用这个配置

30:05.430 --> 30:07.430
这是关于我讲

30:07.430 --> 30:08.430
模块化的一个位置

30:08.430 --> 30:11.430
专门提到过这个配置的

30:11.430 --> 30:13.430
好 下面是个模块解析方式

30:13.430 --> 30:14.430
解析方式的话

30:14.430 --> 30:15.430
使用是漏的

30:15.430 --> 30:17.430
使用是漏的方式解析

30:17.430 --> 30:18.430
也是讲过的

30:18.430 --> 30:19.430
好 这个是呢

30:19.430 --> 30:21.430
把每一个单独的文件

30:21.430 --> 30:23.430
强制要求他们

30:23.430 --> 30:24.430
强制要求

30:24.430 --> 30:25.430
每一个单独的文件

30:25.430 --> 30:26.430
必须是一个模块

30:26.430 --> 30:27.430
你看一下

30:27.430 --> 30:28.430
现在这个文件是不是爆错了

30:28.430 --> 30:30.430
爆错为什么爆错

30:30.430 --> 30:32.430
因为它不能识别这个文件

30:32.430 --> 30:33.430
是一个模块

30:33.430 --> 30:35.430
它没有办法把这个文件

30:35.430 --> 30:36.430
当成一个模块

30:36.430 --> 30:37.430
所以说它会爆错

30:37.430 --> 30:38.430
如果你这个文件里面

30:38.430 --> 30:39.430
使用了导出

30:39.430 --> 30:40.430
导出预计的话

30:40.430 --> 30:41.430
它就不爆错了

30:41.430 --> 30:44.430
强制要求每一个文件

30:44.430 --> 30:46.430
是放到一个模块环境里面的

30:46.430 --> 30:48.430
就这么一个配置

30:48.430 --> 30:50.430
好 了解了这些配置之后呢

30:50.430 --> 30:52.430
咱们再来编一次

30:52.430 --> 30:54.430
把配置加上过后再编一次

30:54.430 --> 30:56.430
NPM run build

30:57.430 --> 30:59.430
运行一下

30:59.430 --> 31:00.430
清理

31:00.430 --> 31:01.430
清理完成过后

31:01.430 --> 31:02.430
完成编译

31:02.430 --> 31:04.430
可以 编译通过

31:04.430 --> 31:05.430
没有什么问题

31:05.430 --> 31:06.430
好了 那么现在

31:06.430 --> 31:08.430
TS环境就大进去了

31:08.430 --> 31:09.430
但是这里边呢

31:09.430 --> 31:11.430
其实还有一个问题

31:11.430 --> 31:13.430
目前呢没有发现

31:13.430 --> 31:14.430
但是我们只要代码

31:14.430 --> 31:15.430
再多写个文件

31:15.430 --> 31:17.430
你就发现这个问题了

31:17.430 --> 31:18.430
什么问题呢

31:18.430 --> 31:20.430
给大家看一下

31:21.430 --> 31:23.430
my module

31:23.430 --> 31:25.430
tsts

31:25.430 --> 31:26.430
这里面我导出一个东西吧

31:26.430 --> 31:28.430
导出一个default

31:28.430 --> 31:29.430
一个制服串

31:29.430 --> 31:30.430
导出

31:30.430 --> 31:32.430
先去导入这个制服串

31:32.430 --> 31:34.430
import

31:34.430 --> 31:36.430
my from

31:36.430 --> 31:38.430
my module

31:38.430 --> 31:39.430
这里呢

31:39.430 --> 31:40.430
我们输出

31:40.430 --> 31:42.430
console log

31:42.430 --> 31:44.430
my

31:44.430 --> 31:45.430
输出

31:45.430 --> 31:46.430
好了

31:46.430 --> 31:47.430
我们现在呢

31:47.430 --> 31:49.430
再来看一下

31:49.430 --> 31:57.840
NPM run build

31:57.840 --> 31:59.840
好 它这个时候报错了

31:59.840 --> 32:00.840
报错了

32:00.840 --> 32:03.840
它说无法处理这个文件

32:03.840 --> 32:04.840
无法处理这个模块

32:04.840 --> 32:06.840
它为什么无法处理呢

32:06.840 --> 32:08.840
为什么无法处理这个模块呢

32:08.840 --> 32:11.840
是因为在webpack的环境下边

32:11.840 --> 32:12.840
在webpack的环境下边

32:12.840 --> 32:14.840
它读的是ts

32:14.840 --> 32:15.840
它不会读ts的

32:15.840 --> 32:17.840
你看这里有没有跟后罪名

32:17.840 --> 32:19.840
没有写后罪名对吧

32:19.840 --> 32:20.840
没有后罪名在webpack

32:20.840 --> 32:22.840
来进行打包的时候

32:22.840 --> 32:23.840
它读的是ts

32:23.840 --> 32:25.840
而读的不是ts文件

32:25.840 --> 32:28.840
它压根不知道ts文件是啥东西

32:28.840 --> 32:29.840
那么这个时候呢

32:29.840 --> 32:31.840
由于这里不存在ts

32:31.840 --> 32:33.840
因此在webpack打包的时候

32:33.840 --> 32:34.840
它认为文件不存在

32:34.840 --> 32:36.840
这个依赖读不出来

32:36.840 --> 32:37.840
读不出来

32:37.840 --> 32:38.840
那就更加谈不上

32:38.840 --> 32:39.840
把这个依赖交给谁

32:39.840 --> 32:42.840
交给那个tsloader

32:42.840 --> 32:43.840
它不是要把这个文件

32:43.840 --> 32:44.840
交给tsloader来处理吧

32:44.840 --> 32:46.840
但它ts文件读的都读不出来

32:46.840 --> 32:47.840
因为它读的是ts

32:47.840 --> 32:49.840
根本就不会去读ts

32:49.840 --> 32:50.840
所以说它报错了

32:50.840 --> 32:51.840
那么这里呢

32:51.840 --> 32:52.840
你能不能在这里

32:52.840 --> 32:53.840
这样子写呢

32:53.840 --> 32:56.840
能不能点ts这样子写呢

32:56.840 --> 32:58.840
不行啊 不行

32:58.840 --> 32:59.840
因为你这样写过

32:59.840 --> 33:00.840
编译结果里边

33:00.840 --> 33:02.840
它也是使用了ts

33:02.840 --> 33:04.840
编译结果里面没有ts

33:04.840 --> 33:05.840
所以你不能这样子写

33:05.840 --> 33:06.840
不能这样写

33:06.840 --> 33:08.840
ts还有认为通不过

33:08.840 --> 33:10.840
不能用这种方式

33:10.840 --> 33:12.840
那怎么办呢这个时候

33:12.840 --> 33:14.840
这个时候很简单

33:14.840 --> 33:17.840
你只需要让webpack知道

33:17.840 --> 33:20.840
有读文件的时候

33:20.840 --> 33:21.840
看一下ts

33:21.840 --> 33:23.840
顺便再看一下ts

33:23.840 --> 33:24.840
就完事了

33:24.840 --> 33:27.840
那么这个怎么配置呢

33:27.840 --> 33:29.840
你需要加上这么一个配置

33:29.840 --> 33:31.840
这个配置的名字叫做

33:31.840 --> 33:34.840
result表示处理

33:34.840 --> 33:36.840
表示的是解析

33:36.840 --> 33:38.840
这个配置里边有一个tensions

33:38.840 --> 33:41.840
tensions表示是扩展名

33:41.840 --> 33:43.840
哪些扩展名我解析的时候

33:43.840 --> 33:45.840
要加入解析

33:45.840 --> 33:47.840
这里面写上点ts

33:47.840 --> 33:49.840
还要包含ts

33:49.840 --> 33:51.840
把这两个写上就完事了

33:51.840 --> 33:53.840
就是解析模块的时候呢

33:53.840 --> 33:55.840
后绝名为ts

33:55.840 --> 33:56.840
后绝名为ts

33:56.840 --> 33:57.840
我都进行解析

33:57.840 --> 33:59.840
那么它查到的方式呢

33:59.840 --> 34:01.840
先查找

34:01.840 --> 34:03.840
有没有这个ts文件存在

34:03.840 --> 34:05.840
这个ts文件是不是存在

34:05.840 --> 34:06.840
如果ts文件不存在的话

34:06.840 --> 34:07.840
找ts

34:07.840 --> 34:09.840
这样就完事了

34:09.840 --> 34:11.840
那么现在这样的配置过后

34:11.840 --> 34:14.840
我们再来npm装

34:14.840 --> 34:16.840
为什么给大家说这一错误

34:16.840 --> 34:17.840
这一错误大家都是在

34:17.840 --> 34:19.840
说的时候经常常见的

34:19.840 --> 34:21.840
这里

34:21.840 --> 34:23.840
我看一下

34:23.840 --> 34:24.840
这里报错了

34:24.840 --> 34:26.840
我这里写错了

34:26.840 --> 34:27.840
单词写错了

34:27.840 --> 34:29.840
这里的单词应该是

34:29.840 --> 34:30.840
你看没有内容检查

34:30.840 --> 34:32.840
是不是经常就会导致这些错误

34:32.840 --> 34:34.840
仅仅是一个这么小的一个配置文件

34:34.840 --> 34:35.840
都会经常导致错误

34:35.840 --> 34:37.840
所以说为什么需要内容检查

34:37.840 --> 34:39.840
你看很极致吧

34:39.840 --> 34:40.840
这个地方都可以

34:40.840 --> 34:41.840
明明是自己的问题

34:41.840 --> 34:43.840
真的是这样子

34:43.840 --> 34:45.840
对吧

34:45.840 --> 34:47.840
真的是这样子的

34:47.840 --> 34:49.840
经常会写错一些单词

34:49.840 --> 34:51.840
编译

34:51.840 --> 34:53.840
你看现在就成功了

34:53.840 --> 34:54.840
OK那么现在呢

34:54.840 --> 34:55.840
我们就搭建了

34:55.840 --> 34:58.840
好了这么一个简单的

34:58.840 --> 35:00.840
这么一个webpack的环境

35:00.840 --> 35:01.840
不会整得太复杂了

35:01.840 --> 35:03.840
因为我们的重心不在这

35:03.840 --> 35:05.840
好搭建好了过后

35:05.840 --> 35:06.840
我们后边就会在这里边

35:06.840 --> 35:08.840
来写各种各样的代码

35:08.840 --> 35:11.840
最终实现我们整个游戏的功能

35:11.840 --> 35:13.840
好了这是关于

35:13.840 --> 35:15.840
如何来搭建环境

35:15.840 --> 35:17.840
大家下去一定要

35:17.840 --> 35:19.840
跟着我去做一遍

35:19.840 --> 35:20.840
一定要跟着我去做一遍

35:20.840 --> 35:21.840
做一遍之后

35:21.840 --> 35:22.840
把这个环境搭建起来

35:22.840 --> 35:24.840
我们后边还能写代码

35:24.840 --> 35:25.840
关于怎么写代码呢

35:25.840 --> 35:26.840
对不对

35:26.840 --> 35:28.840
好OK那么早点闷嘴

35:28.840 --> 35:29.840
也可能到此结束了

35:29.840 --> 35:30.840
拜拜

