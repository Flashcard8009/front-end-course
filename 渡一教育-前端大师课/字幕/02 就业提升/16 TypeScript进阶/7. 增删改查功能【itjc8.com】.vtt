WEBVTT

00:00.430 --> 00:03.510
大家好 我是杜义教育 我有钱能讲是元进

00:04.010 --> 00:08.110
那么这节课呢 我们就继续来开发这个服务端的程序

00:08.630 --> 00:11.950
我们这节课把数据库给他做完

00:12.470 --> 00:16.810
我们上节课呢 做了数据库的模型 也就是他的数据库的结构

00:17.330 --> 00:19.110
然后提供了一个入口

00:19.370 --> 00:21.430
这些入口呢 导出了这个模型

00:21.930 --> 00:25.270
以后呢 我们有更多的模型了 就可以直接写到这个文件下面

00:25.770 --> 00:28.850
好 现在呢 我们去写一个内

00:29.050 --> 00:33.190
来完成对这个电影的增三改查的操作

00:33.710 --> 00:35.510
我这里呢 去新建一个文件夹

00:36.270 --> 00:37.290
给他取名为

00:37.810 --> 00:38.570
Services

00:38.830 --> 00:39.610
Services

00:41.130 --> 00:43.190
这里面呢 我去建立一些

00:43.450 --> 00:43.950
内

00:44.730 --> 00:48.050
这个内呢 比方说我们建立一个Movie Service

00:49.070 --> 00:50.090
建立这么一个内

00:50.350 --> 00:53.170
这个内做什么操作呢 他就是把

00:53.430 --> 00:57.010
数据库跟电影相关的增三改查

00:57.270 --> 00:58.290
全部给他做好

00:58.750 --> 01:00.030
啊 写成一个一个的函数

01:00.550 --> 01:03.610
当然呢 比这个地方也可以不用内啊 也可以不用内

01:03.870 --> 01:06.170
直接写函数 也行 也行

01:06.430 --> 01:10.010
啊 我们既然用了面向对象多练习一下吧 多练习一下内

01:10.270 --> 01:11.550
啊 这里导出一个内啊

01:11.810 --> 01:12.570
Export

01:12.830 --> 01:13.610
Class

01:13.870 --> 01:15.910
Movie Service

01:16.430 --> 01:17.430
导出这么一个内

01:17.690 --> 01:20.250
这个内里面呢 提供了很多的

01:20.510 --> 01:21.790
函数啊 也就是方法

01:22.050 --> 01:23.330
来完成操作

01:23.590 --> 01:26.650
而这些方法呢 我认为啊 全部都可以是静态方法

01:26.910 --> 01:27.430
因为

01:27.730 --> 01:30.210
我觉得没有必要去建立这个内的对象

01:30.450 --> 01:32.250
啊 这个内的对象没有必要去建立

01:32.510 --> 01:34.050
我们直接去调用方法就行了

01:34.290 --> 01:38.250
所以说我这里呢 为了使用方便啊 我这里全部使用

01:38.510 --> 01:39.410
静态方法

01:39.930 --> 01:40.950
啊 这里写Public

01:41.210 --> 01:41.970
Static

01:42.230 --> 01:43.250
啊 然后呢

01:43.510 --> 01:47.090
比方说我们先做这么一个方法啊 就添加一个电影

01:47.350 --> 01:48.370
啊 添加一个电影

01:48.890 --> 01:49.650
ADD

01:49.910 --> 01:51.010
啊 ADD

01:51.450 --> 01:51.970
Movie

01:52.210 --> 01:53.490
啊 添加一个电影

01:54.010 --> 01:56.050
添加一个电影你要告诉我啥呢

01:56.630 --> 01:57.550
要给我传个啥

01:58.050 --> 01:59.790
就是要给我传一个电影对象

02:00.050 --> 02:01.390
对吧 一个电影对象

02:01.630 --> 02:03.950
好 OK 你给我传一个电影对象进来

02:04.950 --> 02:06.510
好 这个电影对象是咋类型呢

02:07.270 --> 02:07.790
咋类型

02:08.030 --> 02:10.590
我们之前不是做过 做过这个实体吗 对吧

02:10.850 --> 02:11.870
做过这个实体

02:12.130 --> 02:13.910
我们就使用那个实体的类型

02:14.430 --> 02:15.110
Movie

02:16.230 --> 02:16.730
好

02:16.990 --> 02:19.810
就使用那个实体的类型啊 作为参数的类型

02:20.590 --> 02:22.270
好 发音回啥呢

02:22.630 --> 02:23.910
发音回什么类型呢

02:24.670 --> 02:25.710
啊 我们可以认为

02:26.110 --> 02:27.390
它有两种情况

02:27.750 --> 02:29.510
第一种情况呢 是添加成功

02:29.910 --> 02:31.950
第二种情况呢 是添加失败

02:32.470 --> 02:33.910
啊 这两种情况呢

02:34.190 --> 02:36.430
我们分别给它一个不同的返回值吧

02:36.950 --> 02:38.910
如果添加成功的话

02:39.150 --> 02:40.710
啊 如果添加成功的话

02:41.110 --> 02:42.510
发音回的是一个啥呢

02:42.750 --> 02:44.190
发音回的是一个制服串

02:44.910 --> 02:46.030
发音回的是一个制服串

02:46.630 --> 02:47.830
这个制服串表示啥呢

02:48.030 --> 02:48.950
表示的是

02:50.070 --> 02:51.750
啊 就是电影的ID

02:51.990 --> 02:53.550
啊 新增电影的ID

02:54.070 --> 02:54.950
啊 给它一个制服串

02:55.130 --> 02:57.970
或者说 发音回的是一个电影对象

02:58.290 --> 02:59.650
发音回的是一个电影对象

03:02.250 --> 03:03.970
发音回的是一个iMovie

03:05.970 --> 03:07.290
发音回的是一个iMovie

03:07.370 --> 03:08.570
哦 这里没导出对吧

03:08.810 --> 03:10.170
数据库那一块没导出

03:11.530 --> 03:12.170
我们这里

03:12.490 --> 03:13.890
把数据库这一块啊

03:13.890 --> 03:16.410
把这个interface接口导出

03:18.170 --> 03:18.570
好

03:19.130 --> 03:20.250
发音回的是一个iMovie

03:20.330 --> 03:21.810
因为iMovie这个接口里边

03:21.810 --> 03:23.330
它本身就带了ID了对吧

03:23.330 --> 03:24.610
它本身就带了ID了

03:25.610 --> 03:27.810
因为这个类型

03:27.810 --> 03:28.810
Movie这个内

03:28.810 --> 03:29.970
它里边是没有ID的

03:29.970 --> 03:30.410
你看

03:30.410 --> 03:31.650
它里面是没有ID的

03:32.450 --> 03:33.210
但是呢

03:33.370 --> 03:34.370
通过这个玩意儿

03:35.890 --> 03:36.650
就这个玩意儿

03:36.810 --> 03:38.610
由于它基层了Document

03:38.850 --> 03:40.690
所以说它里边已经带了ID了

03:40.810 --> 03:41.210
对吧

03:41.210 --> 03:42.370
已经带了ID了

03:42.370 --> 03:43.650
所以说我们反回的时候呢

03:43.650 --> 03:45.250
反回它iMovie

03:46.530 --> 03:47.650
或者是呢

03:48.050 --> 03:48.970
或者是呢

03:48.970 --> 03:49.770
反回啥呢

03:49.770 --> 03:51.610
反回一些错误信息

03:52.170 --> 03:53.850
反回的是一些错误信息

03:54.030 --> 03:54.990
比方说是一个

03:54.990 --> 03:56.510
shtune的支付创

03:56.750 --> 03:57.910
shtune的支付创

03:57.910 --> 03:59.150
就是有哪些错误

03:59.150 --> 04:01.430
你这个添加有问题

04:01.590 --> 04:02.790
我们要进行验证

04:02.790 --> 04:03.270
对吧

04:03.270 --> 04:04.470
验证出来的过后呢

04:04.470 --> 04:05.670
可能会有一些问题

04:05.670 --> 04:07.110
那么有哪些错误信息

04:07.110 --> 04:07.910
我给你返回

04:08.550 --> 04:10.070
也就是说返回的情况呢

04:10.070 --> 04:11.390
有这么两种情况啊

04:11.390 --> 04:12.510
有这么两种情况

04:13.790 --> 04:14.350
好

04:14.790 --> 04:16.950
这个函数怎么写的

04:17.270 --> 04:18.070
怎么写的

04:18.070 --> 04:19.230
首先第一步

04:19.830 --> 04:20.870
首先第一步

04:20.870 --> 04:21.750
你要做啥

04:21.950 --> 04:22.710
你要做

04:23.990 --> 04:24.990
转换类型

04:25.830 --> 04:26.670
转换类型

04:26.670 --> 04:27.750
就是这个玩意儿

04:27.750 --> 04:28.590
传过来的

04:28.590 --> 04:31.590
有可能是一个平面对象

04:31.590 --> 04:33.110
就是Planet object

04:33.630 --> 04:34.910
它有可能是个平面对象

04:35.310 --> 04:36.550
到时候怎么调用的

04:36.550 --> 04:37.350
我也不清楚

04:37.350 --> 04:38.870
到时候怎么去调用这个函数

04:39.470 --> 04:40.310
各种情况

04:40.310 --> 04:42.550
所以说它这里有可能是一个平面对象

04:42.830 --> 04:43.270
因此呢

04:43.270 --> 04:44.750
我要把它转换成

04:44.950 --> 04:45.790
move的对象

04:45.790 --> 04:47.430
把它转换成move的对象

04:48.030 --> 04:49.350
把它转换成内的对象

04:49.510 --> 04:50.550
这第一个要做的

04:50.750 --> 04:51.030
好

04:51.030 --> 04:52.710
转换完类型之后呢

04:52.770 --> 04:53.970
我们还要做第二步

04:54.250 --> 04:55.810
就是数据验证

04:56.250 --> 04:57.130
数据验证

04:58.250 --> 04:59.850
如果数据验证失败

04:59.850 --> 05:00.970
那直接返回错误

05:01.970 --> 05:02.410
好

05:02.410 --> 05:04.210
如果数据验证通过的话

05:04.210 --> 05:05.930
我们再进行第三步

05:06.250 --> 05:07.090
第三步做啥

05:07.410 --> 05:08.930
第三步做的事情就是

05:08.930 --> 05:10.330
添加到数据库

05:11.610 --> 05:12.530
所以说这里呢

05:12.530 --> 05:14.850
实际上是有三件事情要做的

05:15.650 --> 05:15.890
好

05:15.890 --> 05:16.690
我们一见见来

05:17.210 --> 05:19.690
我们首先看到前面两件事情

05:19.810 --> 05:22.450
类型转换和数据验证

05:23.210 --> 05:24.130
那么大家想一想

05:24.130 --> 05:25.130
想想这个道理

05:25.810 --> 05:27.210
这一块的操作

05:28.090 --> 05:30.370
是只有这个函数要进行

05:30.570 --> 05:34.730
还是说其他的函数也会有类似的操作

05:34.930 --> 05:35.810
想想这个问题

05:36.930 --> 05:39.930
内形的转换

05:39.930 --> 05:41.330
以及数据的验证

05:41.690 --> 05:42.930
这一块东西

05:42.930 --> 05:44.970
它是只有这个地方

05:45.290 --> 05:46.770
只有这个地方有这个操作

05:46.770 --> 05:48.210
还是其他的函数也会有

05:49.530 --> 05:50.330
想一想

05:50.890 --> 05:52.490
是不是其他的函数他也会有

05:53.210 --> 05:55.210
什么情况下还会有这样的操作

05:55.210 --> 05:55.970
比方说

05:56.370 --> 05:57.890
我到时候要修改电影

05:58.570 --> 05:59.570
修改电影的话

05:59.570 --> 06:01.730
会不会是不是也要传一个电影对象进来

06:02.130 --> 06:02.610
对吧

06:02.610 --> 06:04.530
他也要传一个电影对象进来

06:04.930 --> 06:05.890
因此呢

06:06.290 --> 06:07.210
这里的操作

06:07.210 --> 06:09.890
就修改电影的时候

06:10.090 --> 06:11.530
他也有这样的操作

06:11.530 --> 06:12.930
他也要进行内形转换

06:12.930 --> 06:14.730
也要进行数据验证

06:14.930 --> 06:16.290
因此这一块代码了

06:16.290 --> 06:18.130
我们希望把他提出来

06:18.770 --> 06:19.010
好

06:19.010 --> 06:19.770
怎么提呢

06:19.830 --> 06:20.390
当然了

06:20.390 --> 06:21.350
你可以在这里

06:21.870 --> 06:23.150
写一些私有的

06:23.390 --> 06:25.670
静态函数来帮助完成这样的转换

06:26.030 --> 06:26.990
也可以

06:27.470 --> 06:29.670
也可以在上面写些函数

06:29.670 --> 06:31.710
来帮助完成这样的操作

06:32.350 --> 06:33.950
其实这里的写法非常多

06:34.510 --> 06:36.190
我这里想到一种写法

06:36.590 --> 06:37.870
我把它写到哪儿去了

06:38.510 --> 06:39.070
跟电影

06:39.070 --> 06:40.350
这是内形转换

06:40.350 --> 06:42.630
把什么内形转换成电影对象

06:42.630 --> 06:43.030
对吧

06:44.110 --> 06:45.270
这是数据验证

06:46.230 --> 06:47.830
就是我有一个电影对象

06:47.830 --> 06:49.670
我要验证它的数据是否正确

06:50.230 --> 06:51.110
我觉得吧

06:51.110 --> 06:52.950
这些东西都是跟电影

06:52.950 --> 06:55.070
这个实体相关的操作

06:55.070 --> 06:57.270
你看内形转换是不是跟实体相关的

06:57.270 --> 06:58.950
跟这个move相关的操作

06:59.270 --> 07:02.390
数据验证也是跟这个move实体相关的操作

07:02.910 --> 07:03.630
于是呢

07:03.870 --> 07:06.110
我想把这两个操作写到哪儿了

07:06.270 --> 07:07.110
我想写到这

07:08.030 --> 07:09.630
我想写到这个实体内里边

07:09.990 --> 07:11.910
你看我们之前写的实体内里边

07:11.910 --> 07:13.190
只有一些什么

07:13.350 --> 07:15.710
只有一些函数

07:15.710 --> 07:16.110
对吧

07:16.110 --> 07:17.630
只有一些函数

07:18.370 --> 07:19.770
只有一些属性

07:19.770 --> 07:21.690
它并没有方法

07:21.690 --> 07:23.130
那么我们给大家加一些方法

07:24.330 --> 07:25.210
比方说

07:27.130 --> 07:28.810
我们这里先写这么一个方法

07:28.810 --> 07:29.690
就是验证

07:31.530 --> 07:32.970
我们写个公共方法

07:32.970 --> 07:33.770
public

07:33.770 --> 07:37.930
然后写上validates

07:37.930 --> 07:38.970
所以它进行验证

07:39.970 --> 07:41.410
验证的时候呢

07:43.450 --> 07:45.530
我们验证的时候要不要传参数呢

07:46.090 --> 07:47.610
可能有些朋友会觉得

07:47.770 --> 07:49.530
我这里应该传一个参数

07:49.530 --> 07:50.170
为什么呢

07:50.170 --> 07:51.530
因为我要告诉我

07:51.530 --> 07:53.130
验证的是哪一个对象

07:53.690 --> 07:54.890
但是你不要忘记了

07:55.690 --> 07:58.690
这个方法是被谁调用的

07:59.170 --> 08:01.930
是不是被当前的电影对象调用的

08:02.170 --> 08:02.410
对吧

08:02.410 --> 08:04.010
到时候我们写好这个方法之后

08:04.730 --> 08:06.170
我们写好这个方法之后

08:06.170 --> 08:08.770
到时候我们调用的时候是咋调用的呢

08:09.090 --> 08:10.130
调用的时候

08:10.130 --> 08:11.450
数据验证的时候

08:11.450 --> 08:14.850
我们是通过一个电影对象去调用的对吧

08:14.990 --> 08:17.550
那么这样子以来是不是验证的就是它

08:18.430 --> 08:20.230
验证的就是调用的对象

08:21.110 --> 08:22.110
因此呢

08:22.110 --> 08:23.310
这里的方法

08:23.310 --> 08:24.830
我们是不需要传输的

08:25.590 --> 08:26.710
它验证啥呢

08:26.710 --> 08:28.350
它验证的就是当前对象

08:28.790 --> 08:29.550
验证

08:30.030 --> 08:31.390
当前对象

08:31.950 --> 08:33.110
当前电影对象

08:33.590 --> 08:34.910
就是验证的是啥

08:34.910 --> 08:35.870
验证的

08:36.110 --> 08:37.110
就是ziz

08:37.670 --> 08:38.870
把ziz拿去验证

08:40.110 --> 08:41.350
根据我们以前的写法

08:41.350 --> 08:42.150
这里咋写呢

08:42.390 --> 08:42.910
验证

08:43.370 --> 08:46.570
我们首先通过validate

08:47.130 --> 08:48.330
validate是这个函数

08:50.010 --> 08:50.890
通过这个函数

08:51.890 --> 08:52.930
对 通过这个函数

08:53.570 --> 08:55.370
它的这个函数在哪呢

08:55.370 --> 08:56.890
在class validate号里边

08:57.650 --> 08:58.970
通过这个函数呢

08:58.970 --> 09:00.730
对哪个定型验证呢

09:00.730 --> 09:01.570
对ziz

09:02.570 --> 09:03.250
对ziz

09:03.250 --> 09:04.930
当前对象进行验证

09:05.650 --> 09:06.290
注意

09:06.290 --> 09:07.250
验证呢

09:07.250 --> 09:08.490
它是一个异步的

09:08.490 --> 09:09.930
它是一个异步的

09:10.250 --> 09:11.090
因此呢

09:11.430 --> 09:13.090
你这里可以可以使用

09:13.430 --> 09:15.870
可以使用任关键是来得到结果

09:15.870 --> 09:18.270
其实你要得到验证结果

09:18.270 --> 09:20.750
由于验证本身是异步的

09:20.750 --> 09:22.550
由于验证本身是异步的

09:22.550 --> 09:23.710
那么你想啊

09:23.710 --> 09:26.150
你这个函数是不是也是应该异步的

09:26.150 --> 09:27.070
对不对

09:27.070 --> 09:28.510
验证本身是异步的

09:28.510 --> 09:29.950
所以说你这个函数呢

09:29.950 --> 09:31.150
也应该是异步的

09:31.150 --> 09:31.870
我给他表几位

09:31.870 --> 09:32.510
而sync

09:33.190 --> 09:35.030
表示个函数也是异步的

09:36.350 --> 09:38.350
如果这个函数是异步的话

09:39.310 --> 09:40.230
大家想一想

09:40.290 --> 09:41.970
如果这个函数是异步的

09:42.490 --> 09:45.730
那么就意味着这个函数的返回内行是啥

09:46.610 --> 09:47.730
我们以前呢

09:48.130 --> 09:49.490
都还没有接触过啊

09:49.490 --> 09:51.370
在ts里面接触过异步函数

09:51.370 --> 09:53.690
那么现在我们可以学习一个新知识啊

09:54.570 --> 09:56.690
这个函数它标记为异步的

09:57.250 --> 09:59.690
那么回忆一下我们以前介绍的知识

10:00.250 --> 10:02.730
异步的函数它返回的内行是啥

10:04.250 --> 10:05.370
记不记得啊

10:05.370 --> 10:06.010
有些同学呢

10:06.010 --> 10:07.410
应该能够想起啊

10:08.150 --> 10:10.110
返回来内行是不是一定是promise

10:10.710 --> 10:11.750
它还能是啥呢

10:11.750 --> 10:13.870
它一定是一个promise啊

10:13.870 --> 10:15.430
只要是异步的函数

10:15.430 --> 10:17.150
标记为sync的函数

10:17.150 --> 10:19.550
那么它返回的一定是promise

10:20.590 --> 10:21.190
好

10:21.190 --> 10:22.670
返回的是promise

10:22.670 --> 10:25.790
那么我们以前还会接触一个东西

10:25.790 --> 10:29.350
就是promise它完成之后

10:29.350 --> 10:30.710
它是个任务嘛对吧

10:30.710 --> 10:33.230
完成之后是不是一定要得到一个东西

10:33.230 --> 10:34.670
对吧一定要得到一个东西

10:34.670 --> 10:35.830
那么这里呢

10:35.890 --> 10:39.970
在ts里边它把promise啊做成了一个翻雄

10:39.970 --> 10:40.730
你看看

10:40.730 --> 10:42.170
做成了一个翻雄

10:42.170 --> 10:43.890
这个翻雄是啥意思呢

10:43.890 --> 10:45.810
这个翻雄表示的意思就是

10:45.810 --> 10:47.650
你任务完成之后

10:47.650 --> 10:49.330
你是一个异步任务对吧

10:49.330 --> 10:51.130
异步任务完成之后呢

10:52.050 --> 10:53.250
它的内行是啥

10:53.250 --> 10:55.330
就得到了数据的内行是啥

10:55.330 --> 10:57.890
你异步任务完成之后总会要得到一个数据

10:57.890 --> 10:59.970
哪怕没有数据的话也是voy的对吧

10:59.970 --> 11:01.050
也是voy的

11:01.050 --> 11:02.730
那么表示的是

11:02.730 --> 11:03.970
你这个任务完成之后

11:03.990 --> 11:04.990
你要得到啥内行

11:05.790 --> 11:07.110
好我们这里写啥呢

11:07.110 --> 11:08.510
我们这里进行验证

11:08.510 --> 11:10.510
验证的结果是个啥

11:10.510 --> 11:13.030
是一个错误的消息数据

11:13.030 --> 11:15.710
我们可以用一个制服串数据来表示

11:16.950 --> 11:17.830
我得到啥呢

11:17.830 --> 11:19.110
得到的是一个制服串数据

11:20.230 --> 11:21.350
得到的是一个制服串数据

11:22.750 --> 11:24.190
如果验证通过

11:24.190 --> 11:25.350
如果验证通过的话

11:26.230 --> 11:28.270
我这个数据的长度就为0

11:28.270 --> 11:29.470
如果验证失败的话

11:29.470 --> 11:31.470
这个数据里面就有东西

11:31.470 --> 11:33.150
我们通过这样的方式

11:33.210 --> 11:34.210
来对它进行验证

11:34.210 --> 11:35.210
进行验证

11:36.410 --> 11:37.930
好voy的

11:37.930 --> 11:39.610
由于现在我们这个函数

11:40.210 --> 11:42.810
voy的使用了sync

11:42.810 --> 11:43.890
也就是异步的

11:43.890 --> 11:45.970
因此下面我们可以等待

11:45.970 --> 11:46.650
我们来看一下

11:47.490 --> 11:48.730
voy的是这个函数

11:48.730 --> 11:50.330
这样子感觉上很有点准

11:51.450 --> 11:53.490
大家可能觉得这两个名字一样

11:53.490 --> 11:55.530
有点如意婚姻小是吧

11:55.530 --> 11:56.890
好我们改个名字吧

11:56.890 --> 11:57.490
改个名字

11:59.490 --> 12:00.690
voy的

12:01.670 --> 12:02.670
this

12:02.670 --> 12:04.150
这样子再写

12:04.150 --> 12:05.670
不然的话容易混淆

12:05.670 --> 12:08.470
就是验证当前对象

12:08.470 --> 12:09.590
vay的this

12:10.390 --> 12:12.230
那么我们调用vay的函数

12:12.230 --> 12:13.550
就是这个库里边的函数

12:13.550 --> 12:15.230
对当前对象来进行验证

12:15.230 --> 12:16.670
它由于是一个异步的操作

12:16.670 --> 12:18.750
你看它返回的类型是啥

12:18.750 --> 12:20.350
返回的类型也是个promise

12:20.350 --> 12:21.630
说明它是异步的

12:21.630 --> 12:23.190
有的时候我们在TS里面

12:23.190 --> 12:24.430
看一个函数是不是异步的

12:24.430 --> 12:25.350
就非常方便

12:25.350 --> 12:26.390
你指着它

12:26.390 --> 12:28.190
你看一下返回的是不是promise

12:28.190 --> 12:29.430
就知道它是不是异步了

12:30.170 --> 12:31.570
这个异步函数

12:31.570 --> 12:34.690
完成之后得到了是一个错误的数组

12:34.690 --> 12:36.770
甭管这个数组的每一项是咋玩意儿

12:36.770 --> 12:37.450
我们先看

12:37.450 --> 12:38.290
这是一个数组

12:38.290 --> 12:38.690
对吧

12:38.690 --> 12:40.210
这是一个数组

12:40.210 --> 12:40.650
好

12:40.650 --> 12:42.330
拿到这个数组之后

12:42.330 --> 12:44.570
我们就可以用等待的方式

12:44.570 --> 12:45.330
await

12:45.330 --> 12:46.330
等待的方式

12:46.330 --> 12:47.970
等待它完成

12:47.970 --> 12:49.130
等待它完成之后

12:49.130 --> 12:51.170
我们会得到一个错误

12:51.170 --> 12:52.370
我们会得到一个错误

12:52.370 --> 12:52.930
arrows

12:54.370 --> 12:54.530
好

12:54.530 --> 12:55.930
我们来看一下

12:55.930 --> 12:57.210
再来看一下类型

12:57.210 --> 12:58.250
validate

12:58.350 --> 13:00.110
类型是非常合理的

13:00.110 --> 13:01.550
它是一个异步的

13:01.550 --> 13:02.870
当异步完成之后

13:02.870 --> 13:04.790
得到了是这么一个数组

13:04.790 --> 13:06.470
而这里我等待了

13:06.470 --> 13:07.510
等待了过后

13:07.510 --> 13:08.510
你看一下

13:08.510 --> 13:09.630
推断出来的结果

13:09.630 --> 13:11.910
你看是不是就是一个arrows的数组

13:11.910 --> 13:13.270
就是一个arrows对象的数组

13:14.790 --> 13:17.950
我们这里就可以拿到这个arrows的数组

13:17.950 --> 13:20.110
就是错误的数组

13:20.110 --> 13:21.390
拿到之后

13:21.390 --> 13:22.790
我们再来试一下

13:22.790 --> 13:25.950
我们现在返回的是一个制服创的数组

13:25.950 --> 13:27.710
那么我们来看一下这个arrows里边

13:27.730 --> 13:29.770
每一个这个对象里边有哪些东西

13:29.770 --> 13:31.050
其实我们之前已经看到过了

13:31.050 --> 13:31.490
对吧

13:31.490 --> 13:32.490
已经看到过了

13:32.490 --> 13:33.570
我们来看一下

13:33.570 --> 13:35.250
这里面每一个有哪些东西

13:36.410 --> 13:37.930
之前在节目里面

13:37.930 --> 13:40.570
我们只能怎么样来查看这里的结构呢

13:40.570 --> 13:41.770
我们怎么来查看了

13:41.770 --> 13:43.010
我们只能这样子来查看

13:43.010 --> 13:44.290
就是说

13:44.290 --> 13:46.650
你这里边我们把它打印出来

13:46.650 --> 13:48.690
看一下对象的结构是啥

13:48.690 --> 13:49.690
它有哪些属性

13:49.690 --> 13:51.250
属性里边有什么东西

13:51.250 --> 13:52.890
我们只能这样打印出来

13:52.890 --> 13:54.170
但是在TS里面

13:54.170 --> 13:55.090
我们不需要打印

13:55.730 --> 13:56.970
不需要打印

13:56.990 --> 13:58.830
我们就用智能提示就可以看

13:58.830 --> 14:00.750
比方说这个arrows

14:00.750 --> 14:02.030
这个arrows

14:02.030 --> 14:04.030
我们随便给它使用一个数组函数

14:04.030 --> 14:05.310
比方说map

14:05.310 --> 14:07.870
随便使用一个数组函数

14:07.870 --> 14:09.830
这个由于它是一个数组

14:09.830 --> 14:11.110
那么map函数里边

14:11.110 --> 14:12.750
它是不是要传一个

14:12.750 --> 14:13.510
传个啥

14:13.510 --> 14:15.350
是不是要传一个就是函数进去

14:15.350 --> 14:16.150
对吧

14:16.150 --> 14:17.910
对每一项

14:17.910 --> 14:19.390
进行处理

14:19.390 --> 14:21.110
我们在这个map函数里边

14:21.110 --> 14:22.350
这个e你看推断出来

14:22.350 --> 14:26.270
就是一个validation error

14:26.330 --> 14:28.130
我们这里对这个e

14:28.130 --> 14:29.890
使用智能提示你看一下

14:29.890 --> 14:31.650
它就已经非常明显的提示里了

14:31.650 --> 14:33.130
它这里面有哪些东西

14:33.130 --> 14:35.090
这就是TS的好处

14:35.090 --> 14:36.490
它处处都有智能提示

14:36.490 --> 14:37.770
处处都有内容检查

14:38.850 --> 14:39.970
我们可以看到

14:39.970 --> 14:40.930
这里边有哪些东西

14:40.930 --> 14:43.130
probability表示的是

14:43.130 --> 14:44.490
我这个错误

14:44.490 --> 14:46.410
是哪个属性导致的

14:46.410 --> 14:47.170
talking成的

14:47.170 --> 14:49.450
表示我这个错误是哪个对象导致的

14:49.450 --> 14:50.650
Validation表示的是

14:50.650 --> 14:51.690
这个错误

14:51.690 --> 14:53.810
验证的数据的值是啥

14:53.810 --> 14:54.610
等等

14:54.610 --> 14:55.810
但是我们要的是啥

14:55.870 --> 14:56.870
我们要的是这个

14:57.750 --> 14:58.950
我们要的是这个

14:58.950 --> 14:59.870
这个是啥

14:59.870 --> 15:01.510
这个是得到了

15:01.510 --> 15:02.870
得到的就是

15:02.870 --> 15:04.510
当前这个属性

15:04.510 --> 15:05.550
当前这个属性

15:05.550 --> 15:07.510
产生的错误结果

15:07.510 --> 15:09.510
产生的错误结果

15:09.510 --> 15:10.830
那么这个错误结果

15:10.830 --> 15:12.470
它是一个什么内容呢

15:12.470 --> 15:12.870
你看一下

15:12.870 --> 15:13.910
它这里已经标出出来了

15:13.910 --> 15:15.270
什么内容

15:15.270 --> 15:16.070
它是一个对象

15:19.110 --> 15:21.110
constant

15:21.110 --> 15:22.350
它是一个对象

15:22.350 --> 15:23.910
你看一下

15:23.910 --> 15:25.110
它是它的内容

15:25.130 --> 15:26.050
是一个对象

15:26.050 --> 15:28.370
这个对象里面有很多很多的属性

15:28.370 --> 15:30.130
每一个它是用了一个锁印器

15:30.130 --> 15:30.930
看到没有

15:30.930 --> 15:31.890
用一个锁印器

15:31.890 --> 15:34.090
也就是它这里的属性是不确定的

15:34.090 --> 15:36.850
不能确定这里面有哪些属性

15:36.850 --> 15:37.370
所以说

15:37.370 --> 15:38.970
那么这里的对象里面

15:38.970 --> 15:40.490
它可能属性很多

15:40.490 --> 15:43.610
每一个属性就代表的是一个错误

15:43.610 --> 15:44.730
我们要的是什么呢

15:44.730 --> 15:47.050
要的是这个属性的值

15:47.050 --> 15:47.490
对吧

15:47.490 --> 15:48.810
我们要的是这个对象的

15:48.810 --> 15:50.370
所有的属性值

15:50.370 --> 15:51.570
每一个属性值

15:51.570 --> 15:52.770
就是一个错误

15:52.770 --> 15:54.450
就是一个错误消息

15:54.470 --> 15:55.910
如果你这一块还是理解不了

15:55.910 --> 15:56.190
ok

15:56.190 --> 15:57.270
那你把它打印出来

15:57.270 --> 15:58.510
你可以把它打印出来看一下

16:00.670 --> 16:02.030
那么我们这里知道了

16:02.030 --> 16:05.990
它这里面我们要的是这个对象的所有属性值

16:05.990 --> 16:07.270
所有属性值

16:07.270 --> 16:09.350
因此我们这里就很简单了

16:09.350 --> 16:10.910
我们可以使用

16:10.910 --> 16:12.430
objects

16:12.430 --> 16:14.110
the values

16:14.110 --> 16:16.310
得到这个对象的所有属性值

16:16.310 --> 16:17.950
你看这样子是不是得到所有属性值的

16:18.910 --> 16:19.710
我们再看一下

16:19.710 --> 16:21.870
Values得到的结果是啥

16:21.870 --> 16:22.310
得到结果

16:22.310 --> 16:23.830
是不是一个字不错数组

16:23.850 --> 16:25.370
它为什么是一个字不错的数组

16:25.370 --> 16:26.850
因为它这里告诉我们了

16:26.850 --> 16:29.090
每一个属性的值都是字不错

16:29.090 --> 16:31.810
所以通过它得到的是一个字不错的数组

16:31.810 --> 16:33.570
字不错的数组

16:33.570 --> 16:33.730
好

16:33.730 --> 16:35.770
这个字不错的数组得到的是啥

16:35.770 --> 16:37.970
就是一个属性的

16:37.970 --> 16:40.050
就是一个属性的啥

16:40.050 --> 16:41.810
一个属性的

16:41.810 --> 16:43.130
呃

16:43.130 --> 16:43.650
怎么说

16:43.650 --> 16:46.610
一个属性的所有错误

16:46.610 --> 16:48.530
放到这个数组里边

16:48.530 --> 16:48.730
好

16:48.730 --> 16:51.130
放到这个数组里边过后呢

16:51.130 --> 16:52.210
我们接下来怎么操作

16:52.230 --> 16:54.150
我直接把这个数组返回

16:54.150 --> 16:56.110
直接把这个数组返回

16:56.110 --> 16:57.230
这样子

16:57.230 --> 16:59.190
直接返回这个数组

16:59.190 --> 16:59.510
好

16:59.510 --> 17:00.590
我们来理一下

17:00.590 --> 17:02.070
来梳理一下

17:02.070 --> 17:04.270
它突然可能是这么一种结构

17:04.270 --> 17:05.750
就这个Aeroz的结构呢

17:05.750 --> 17:07.750
它可能是这么一种结构

17:07.750 --> 17:09.070
就是说

17:09.070 --> 17:10.390
我们这里用多行做事吧

17:12.030 --> 17:13.590
这个Aeroz

17:13.590 --> 17:14.990
它里面的结构呢

17:14.990 --> 17:15.990
它是这么一种结构

17:15.990 --> 17:16.990
它手月

17:16.990 --> 17:18.390
是一个数组

17:18.390 --> 17:19.590
数组里面每一个数组呢

17:19.590 --> 17:20.310
里面有个对象

17:21.290 --> 17:22.610
对象有很多属性

17:22.610 --> 17:23.810
其他的属性我们不管

17:23.810 --> 17:25.890
其他的属性我们不管

17:25.890 --> 17:27.290
我们只看这个属性

17:27.290 --> 17:29.290
叫做Constrant

17:30.450 --> 17:31.970
Constrant这个属性

17:31.970 --> 17:32.690
而它呢

17:32.690 --> 17:34.130
又是一个对象

17:34.130 --> 17:36.450
这个对象里边记录了这个属性的

17:36.450 --> 17:37.890
很多错误信息

17:37.890 --> 17:39.170
比方说啊

17:39.170 --> 17:42.210
第一个第一个错误信息啊是

17:42.210 --> 17:46.330
比方说是EaseLotsEmpty

17:46.330 --> 17:47.210
这个错误

17:47.210 --> 17:49.610
那里面具体的错误消息呢是

17:49.710 --> 17:53.630
比方说电影名称不可以

17:53.630 --> 17:56.630
不能围空

17:56.630 --> 17:58.990
然后呢这是第一个错误啊

17:58.990 --> 18:00.430
然后第二个错误

18:00.430 --> 18:01.550
我们又来一遍

18:01.550 --> 18:03.150
我先把它结构搞清楚

18:03.150 --> 18:06.070
我们最终是返回的是一个字幕刷的数组

18:06.070 --> 18:07.910
第二个错误呢是

18:07.910 --> 18:09.830
是什么呢

18:09.830 --> 18:11.830
比方说这里

18:11.830 --> 18:13.590
这里时长不可以围空

18:13.590 --> 18:15.230
时长必须是整数

18:15.230 --> 18:18.750
比方说啊这里时长不可以围空

18:18.810 --> 18:21.530
然后呢还有一些其他的错误啊

18:21.530 --> 18:22.370
也是int

18:25.370 --> 18:29.210
时长必须是整数啊

18:29.210 --> 18:32.170
就可能会产生这么一种结构

18:32.170 --> 18:33.210
会产生这么一种结构

18:35.250 --> 18:36.050
仔细看一下啊

18:36.050 --> 18:39.330
这是Aerous就得到原始的错误对象

18:39.330 --> 18:40.410
它是一个数组

18:40.410 --> 18:42.010
那么数组里面每一项是个对象

18:42.010 --> 18:43.850
它会形成这么一种结构

18:43.850 --> 18:45.890
而我现在需要的是什么结果呢

18:45.890 --> 18:49.490
我现在需要的是这么一个结果

18:49.510 --> 18:51.230
这个数组的第一项

18:52.470 --> 18:52.790
这个

18:54.150 --> 18:55.750
数组的第二项

18:55.750 --> 18:58.230
然后这个数组的第三项

18:59.150 --> 18:59.350
对吧

18:59.350 --> 19:01.430
我现在需要的是这样一个结果

19:01.430 --> 19:04.790
我想把这里面里面的所有错误消息排成数组返回出去

19:05.830 --> 19:08.670
那我现在目前得到的是啥呢

19:08.670 --> 19:09.630
我通过map

19:10.470 --> 19:12.150
通过数组的映射

19:12.150 --> 19:13.670
把数组的每一项拿进去

19:13.670 --> 19:16.110
看第一项拿进去得到一个结果

19:16.110 --> 19:18.230
第二项拿进去得到一个结果

19:18.290 --> 19:20.290
我们现在的通过这种模式

19:20.290 --> 19:22.810
通过这种方式得到一个什么结果呢

19:22.810 --> 19:24.210
得到了结果是

19:24.210 --> 19:25.970
我们目前得到的结果是这个

19:28.090 --> 19:29.530
你得到一个数组了

19:29.530 --> 19:31.210
数组的每一项呢

19:31.210 --> 19:31.930
是一个数组

19:34.970 --> 19:36.650
电影不能为空

19:37.730 --> 19:39.210
这是数组的第一项

19:39.210 --> 19:40.690
数组的第二项是这个

19:44.030 --> 19:47.110
这是我们目前得到的数组

19:47.110 --> 19:48.830
我要把这个数一看一下

19:48.830 --> 19:52.110
我们现在通过它得到了它

19:52.170 --> 19:53.090
怎么得到的

19:53.090 --> 19:54.410
就这么一句话

19:54.410 --> 19:55.210
map

19:56.330 --> 19:58.330
我每一个对象拿进去

19:58.330 --> 19:59.450
拿进去过后

19:59.450 --> 20:02.010
我得到这个对象的construnt

20:02.010 --> 20:04.810
这个对象里面的所有属性值

20:04.810 --> 20:06.930
得到的是一个支付错数组

20:06.930 --> 20:09.010
得到这个对象的所有属性值

20:10.130 --> 20:11.530
于是我得到这么一个数组

20:11.530 --> 20:13.290
现在我要把这个数组

20:14.410 --> 20:17.530
转换成这个数组

20:17.530 --> 20:18.570
我要把这个数组

20:18.570 --> 20:20.130
转换成这个数组

20:20.130 --> 20:21.690
那怎么转换了

20:21.710 --> 20:23.270
这里有很多方式

20:23.270 --> 20:25.870
比方说我们用最好理解的方式

20:25.870 --> 20:27.470
我新建一个数组

20:27.470 --> 20:28.510
新建一个数组

20:28.510 --> 20:29.830
result

20:29.830 --> 20:30.470
支付错数组

20:32.070 --> 20:33.310
好 新建的数组

20:33.310 --> 20:35.510
然后呢去循环

20:35.510 --> 20:36.430
去循环这个

20:38.350 --> 20:41.270
我们这里用一个地方

20:41.270 --> 20:42.470
就有error是吧

20:42.470 --> 20:44.110
就重新给error是负责

20:44.110 --> 20:44.630
不行

20:44.630 --> 20:45.710
它类型不一样

20:45.710 --> 20:47.230
我们重新定一个辩量吧

20:47.230 --> 20:48.590
重新定一个辩量

20:48.590 --> 20:49.430
temp

20:49.430 --> 20:50.550
temp

20:50.570 --> 20:53.010
你看 得到的结果是一个支付错数组的数组

20:54.330 --> 20:56.450
那么也就是对应到这里

20:56.450 --> 20:57.090
对应到这里

20:57.090 --> 20:58.530
数组的数组

20:58.530 --> 21:00.330
好 现在我要把它转换成它

21:00.330 --> 21:01.170
下面的它

21:01.170 --> 21:03.050
那么这里我得到一个result

21:03.050 --> 21:03.890
它是个支付错数组

21:03.890 --> 21:05.210
来装这里面的东西

21:05.210 --> 21:06.690
那就循环呗

21:06.690 --> 21:08.290
temp

21:08.290 --> 21:09.690
循环for each

21:12.210 --> 21:14.210
每一次循环

21:14.210 --> 21:15.570
拿到的是啥

21:15.570 --> 21:17.690
拿到是不是一个支付错数组

21:17.690 --> 21:19.090
对到下面的看

21:19.090 --> 21:20.210
对到下面的看

21:20.270 --> 21:22.390
每一次循环是不是拿到一个数组

21:22.390 --> 21:22.910
对吧

21:22.910 --> 21:23.990
这是数组的第一项

21:23.990 --> 21:25.950
数组的第二项

21:25.950 --> 21:27.590
我要做的就是把这个数组的内容

21:27.590 --> 21:28.350
加到哪去

21:28.350 --> 21:30.550
加到这个result里面去

21:30.550 --> 21:31.390
就加呗

21:31.390 --> 21:33.630
result push

21:33.630 --> 21:34.670
往里面加

21:34.670 --> 21:36.750
把这个数组展开

21:36.750 --> 21:38.390
把t这个数组展开

21:38.390 --> 21:39.550
通过这种方式

21:39.550 --> 21:40.470
把这个数组加进去

21:41.670 --> 21:43.150
好 这样子呢

21:43.150 --> 21:45.750
这个循环远远运行结束之后呢

21:45.750 --> 21:49.350
这个result里面是不是装了所有的东西了

21:49.410 --> 21:50.090
好 最后呢

21:50.090 --> 21:52.250
我们把这个result返回

21:53.930 --> 21:55.250
把这个result返回

21:55.250 --> 21:56.610
你看 这个函数又写完了

21:57.690 --> 21:58.770
好 咱们来试一下

21:58.770 --> 21:59.730
咱们来试一下

21:59.730 --> 22:01.730
这个函数包里行不行

22:01.730 --> 22:02.930
我们这里先不着急写

22:03.930 --> 22:05.330
这里先不着急写

22:05.330 --> 22:06.610
这里注射药吧 都注射药

22:07.730 --> 22:09.770
好 我们在in这个时候里面再试一下

22:09.770 --> 22:11.050
再试一下

22:11.050 --> 22:13.770
比方说我们这里创建了一个电影对象

22:13.770 --> 22:14.610
in

22:14.610 --> 22:16.050
你有一个movey

22:16.050 --> 22:17.570
创建了一个电影对象

22:17.590 --> 22:19.710
然后呢给这movey里面一些地方复职

22:19.710 --> 22:21.590
就随便复一些职吧

22:21.590 --> 22:23.230
复完职之后

22:23.230 --> 22:24.070
这里放错了

22:24.070 --> 22:26.710
这里就说有了多好多个空行

22:26.710 --> 22:27.670
不允许

22:27.670 --> 22:29.070
只能有一个

22:29.070 --> 22:32.510
好 这里写好了这个对象之后呢

22:32.510 --> 22:34.510
我们之后验证就非常简单了

22:34.510 --> 22:36.430
我们可以通过这种方式来验证

22:36.430 --> 22:38.710
MDRVDX

22:39.710 --> 22:41.710
验证当前对象

22:41.710 --> 22:42.790
它是一个异部的

22:42.790 --> 22:43.870
你看看它是一个返回的

22:43.870 --> 22:45.310
是一个promise

22:45.310 --> 22:46.830
是一个异部的

22:46.890 --> 22:47.690
那么这里呢

22:47.690 --> 22:49.010
我们点Ring

22:49.010 --> 22:50.530
得到它的验证结果

22:50.530 --> 22:51.810
看一下现在的验证结果

22:51.810 --> 22:53.210
就不像之前那样子的

22:53.210 --> 22:54.330
有那么复杂的结构

22:54.330 --> 22:56.090
现在验证结果非常简单

22:56.090 --> 22:57.690
就是一个输阻

22:57.690 --> 22:59.690
就是一个输阻

22:59.690 --> 23:00.490
保存一下

23:00.490 --> 23:01.210
咱们来看一下

23:02.810 --> 23:07.860
这里我们进入这个server

23:07.860 --> 23:09.540
然后npmrondev

23:10.780 --> 23:14.570
看一下

23:14.570 --> 23:15.690
好 你看

23:15.690 --> 23:16.850
现在的验证结果

23:16.850 --> 23:18.570
就直接是这么一个输阻了

23:18.570 --> 23:19.170
对吧

23:19.170 --> 23:19.970
整个结果

23:19.990 --> 23:21.510
我们用起来的就非常舒服了

23:22.630 --> 23:23.870
这是这个函数

23:23.870 --> 23:25.670
这个函数我们搞定了

23:25.670 --> 23:27.350
然后根据刚才所说

23:27.350 --> 23:29.470
我们要搞定另外一个函数

23:29.470 --> 23:31.430
还要搞定另外一个函数

23:31.430 --> 23:33.030
就是我之前做了

23:33.030 --> 23:34.190
一要做数据验证

23:34.190 --> 23:35.590
那么数据验证现在搞定了

23:35.590 --> 23:37.430
通过vdxz

23:37.430 --> 23:39.150
来进行数据验证

23:39.150 --> 23:40.150
还有另外一个情况

23:40.150 --> 23:42.870
就是要进行内形转换

23:42.870 --> 23:44.710
要做内形转换

23:44.710 --> 23:46.870
内形转换的话

23:46.870 --> 23:48.110
我们咋做呢

23:48.170 --> 23:50.410
首先我们肯定也是要写个函数

23:50.410 --> 23:50.890
对吧

23:50.890 --> 23:52.690
要写个函数来完成

23:52.690 --> 23:52.930
好

23:52.930 --> 23:55.450
我们比方说写这么一个函数

23:55.450 --> 23:57.890
这个函数名字叫做chancefoam

23:59.330 --> 24:00.050
chancefoam

24:02.650 --> 24:03.930
表示转换

24:03.930 --> 24:04.770
转换啥呢

24:04.770 --> 24:07.130
你给我一个普通对象

24:07.130 --> 24:08.290
你给我一个普通对象

24:11.410 --> 24:13.290
你给我一个平面对象

24:13.290 --> 24:14.850
他内形的跟他约束一下

24:14.850 --> 24:16.370
就是一个函数

24:16.370 --> 24:17.810
就是一个函数

24:17.810 --> 24:19.070
也给我一个普通对象

24:19.070 --> 24:21.030
我来帮你完成转换

24:21.030 --> 24:22.150
转换成啥呢

24:22.150 --> 24:23.950
返回的是一个啥

24:23.950 --> 24:26.430
返回的是一个Movey对象

24:26.430 --> 24:28.550
返回的是一个Movey对象

24:28.550 --> 24:29.870
就往上这样转换就完事了

24:31.550 --> 24:32.030
好

24:32.030 --> 24:33.670
那么大家想一想

24:33.670 --> 24:34.510
这个方法

24:35.710 --> 24:37.390
它是静态的

24:37.390 --> 24:39.630
还是非静态的

24:39.630 --> 24:40.070
想一想

24:43.790 --> 24:46.950
那么如果它是一个非静态方法

24:46.970 --> 24:48.690
那就意味着啥呢

24:48.690 --> 24:50.850
就意味着我这里要调用这个方法

24:50.850 --> 24:54.210
我是不是得还得先去建一个Movey对象

24:54.210 --> 24:54.690
对吧

24:54.690 --> 24:56.610
我要创建了Movey对象之后

24:56.610 --> 24:58.810
我才能去调用它里面的啥呢

24:58.810 --> 25:00.370
chancefoam

25:00.370 --> 25:01.010
完成转换

25:02.170 --> 25:02.770
因此呢

25:02.770 --> 25:04.090
这个好怪啊

25:04.090 --> 25:05.490
你不觉得好怪吗

25:05.490 --> 25:07.370
我就是没有Movey对象

25:07.370 --> 25:08.810
我有个平面对象

25:08.810 --> 25:10.570
我没有Movey对象

25:10.570 --> 25:12.490
你还得让我去创建一个Movey对象

25:12.490 --> 25:13.210
来调用方法

25:13.210 --> 25:13.930
就觉得很怪

25:13.930 --> 25:14.490
就比方说

25:15.770 --> 25:16.570
就比方说

25:16.590 --> 25:17.070
这里

25:18.030 --> 25:20.350
我们这里是一个不是一个Movey对象

25:20.350 --> 25:22.070
是一个普通的平面对象

25:23.270 --> 25:24.270
原理

25:24.270 --> 25:25.350
是一个普通的平面对象

25:26.470 --> 25:27.790
像这么一个对象

25:27.790 --> 25:28.110
好

25:28.110 --> 25:30.510
我要把它转换成一个Movey对象

25:30.510 --> 25:32.430
那么我得怎么样了

25:32.430 --> 25:35.350
我得先去先创建一个Movey

25:36.870 --> 25:40.150
然后再通过这个Movey去调用Chancefoam

25:41.470 --> 25:42.550
Chancefoam

25:42.550 --> 25:44.070
然后把这个M传进去

25:44.070 --> 25:45.630
它给我返回一个新的Movey

25:46.630 --> 25:48.830
它给我返回一个新的Movey

25:48.830 --> 25:51.190
你觉得这个这个调用太奇怪了吧

25:51.190 --> 25:51.590
对不对

25:51.590 --> 25:52.870
太奇怪了啊

25:52.870 --> 25:54.070
我就是没有Movey对象

25:54.070 --> 25:55.110
我要得到一个Movey对象

25:55.110 --> 25:56.990
我还得去先建一个Movey

25:56.990 --> 25:58.030
就很奇怪

25:58.030 --> 25:59.870
而我希望是怎么调用的

25:59.870 --> 26:01.270
最好是这样子调用

26:03.350 --> 26:04.070
对吧

26:04.070 --> 26:05.030
你没有Movey对象

26:05.030 --> 26:05.310
对吧

26:05.310 --> 26:06.870
我们这里一个静态函数

26:08.030 --> 26:09.310
通过这个静态函数

26:09.310 --> 26:11.030
你可以得到一个Movey对象

26:11.030 --> 26:12.790
一把一个平面对象传进来

26:13.710 --> 26:14.550
所以说这一块

26:14.550 --> 26:17.990
我们会把它做成一个静态的静态的

26:18.730 --> 26:21.730
加上个Static静态的函数Chancefoam

26:22.810 --> 26:22.970
好

26:22.970 --> 26:24.410
那么这里来做吧

26:24.410 --> 26:25.650
就非常简单啊

26:25.650 --> 26:26.450
怎么来做呢

26:26.450 --> 26:30.250
就是Plane to class

26:30.250 --> 26:31.210
Plane to class

26:31.210 --> 26:32.370
这个函数

26:32.370 --> 26:34.010
前面上面导入进来

26:34.010 --> 26:35.850
Plane to class

26:35.850 --> 26:36.650
导入进来过后

26:36.650 --> 26:38.810
把这个我们要转换的目标传进去

26:38.810 --> 26:40.650
转换的目标就是Movey

26:40.650 --> 26:41.690
然后呢

26:41.690 --> 26:43.330
把哪个对象进行转换了

26:43.390 --> 26:46.430
就是这个Plane to class

26:46.430 --> 26:48.030
把它来进行转换

26:48.030 --> 26:48.550
好

26:48.550 --> 26:49.830
这个返回的结果是啥呢

26:49.830 --> 26:51.230
返回的结果就是Movey对吧

26:51.230 --> 26:52.750
直接返回就完事了

26:52.750 --> 26:53.830
直接返回就完事了

26:55.550 --> 26:58.670
他车里包了一个TS另车的错误

26:58.670 --> 26:59.070
他说

27:00.710 --> 27:04.790
他说把他定一个公共的静态方法不允许

27:05.670 --> 27:06.230
不允许

27:07.230 --> 27:08.390
然后静态方法了

27:08.390 --> 27:11.230
不允许出现在实力方法

27:11.230 --> 27:13.030
实力方法之后

27:13.930 --> 27:15.330
静态方法应该放到哪

27:15.330 --> 27:16.930
放到最开始的位置

27:18.010 --> 27:19.090
他说应该放到这个位置

27:21.250 --> 27:22.450
放到这个位置

27:22.450 --> 27:24.690
我不太喜欢这种方式

27:24.690 --> 27:25.810
不太喜欢

27:25.810 --> 27:27.570
如果公司里面有这样的要求的话

27:27.570 --> 27:28.890
那么你就老老实实做

27:28.890 --> 27:29.290
总之呢

27:29.290 --> 27:32.650
TS另车是来限制你的代码书写方式的

27:32.650 --> 27:33.970
书写风格的

27:33.970 --> 27:37.290
我这里把这个更改一下

27:37.290 --> 27:38.770
每个提示下面都有告诉你

27:38.770 --> 27:40.010
他这个是哪个配置

27:40.010 --> 27:41.250
Member Ordering

27:42.230 --> 27:43.390
就是

27:43.390 --> 27:45.150
这个叫做

27:45.150 --> 27:48.590
成员的排序

27:49.590 --> 27:50.430
社会False

27:52.740 --> 27:53.740
到这边来

27:54.500 --> 27:56.060
那么这里我们返回去玩事

27:56.060 --> 27:56.980
返回去玩事

27:57.620 --> 27:59.340
当然我们要考虑多一点的话

27:59.340 --> 28:01.060
我们这里还可以多想一想

28:01.700 --> 28:02.780
比方说这里

28:02.780 --> 28:05.140
这里传的是一个Object车

28:05.140 --> 28:07.540
有没有可能直接传那个无位对象进来了

28:07.540 --> 28:10.020
他有没有可能直接传了一个无位对象进来

28:10.020 --> 28:11.580
这是有可能会发生的

28:11.800 --> 28:12.560
有可能会发生

28:12.560 --> 28:14.480
他这里直接传了一个无位对象

28:14.480 --> 28:15.560
也就是说这里

28:15.560 --> 28:17.920
他可能这个本身就是个无位对象

28:17.920 --> 28:19.880
可能他本身就是一个无位对象

28:19.880 --> 28:20.520
有一个无位

28:22.040 --> 28:22.920
一不小心

28:22.920 --> 28:25.080
你要还要对他进行转换

28:25.080 --> 28:25.880
那他转换啥了

28:25.880 --> 28:27.720
他本身就是无位对象

28:27.720 --> 28:29.680
所以说这里我们可以判断一下

28:29.680 --> 28:31.680
他是不是无位对象

28:31.680 --> 28:32.680
可以判断一下

28:32.680 --> 28:33.280
怎么判断呢

28:33.280 --> 28:34.680
其实非常简单

28:34.680 --> 28:35.600
也就是说

28:35.600 --> 28:37.000
这样判断就完事了

28:37.000 --> 28:37.720
如果

28:38.520 --> 28:40.400
这个PlanObject

28:40.460 --> 28:42.260
我们判断是不是一个内的对象

28:42.260 --> 28:42.900
咋判断

28:43.940 --> 28:46.100
InstanceMove

28:46.100 --> 28:46.940
对吧

28:46.940 --> 28:48.780
通过这种方式来判断

28:48.780 --> 28:50.900
他是不是一个无位对象

28:50.900 --> 28:52.340
如果是无位对象的话

28:52.340 --> 28:54.900
那么我们直接一看这里

28:54.900 --> 28:55.860
我们直接把这个

28:56.540 --> 28:57.140
返回就行了

28:57.140 --> 28:58.140
你看他这推倒

28:58.140 --> 29:00.700
推倒出来都可以推到出无位对象了

29:00.700 --> 29:02.980
我们之前决过内行保护

29:02.980 --> 29:04.900
当进行了这样的判断之后呢

29:04.900 --> 29:06.100
在判断里边

29:06.100 --> 29:07.940
他已经推倒出来还是个无位对象

29:07.940 --> 29:09.860
我们直接把他返回就完事了

29:09.920 --> 29:11.320
返回就行了

29:11.320 --> 29:12.280
你看返回的话

29:12.280 --> 29:13.480
也满足内行的要求

29:14.760 --> 29:15.440
下面多了一下

29:17.440 --> 29:18.560
就写完了

29:18.560 --> 29:19.400
那么这个内里面

29:19.400 --> 29:21.680
他提供了内情转换

29:21.680 --> 29:23.280
就是将一个

29:25.800 --> 29:34.000
将一个平面对象转换为无位内的对象

29:35.280 --> 29:37.640
他提供了内情转换

29:37.640 --> 29:38.760
那这里又爆了问题

29:38.780 --> 29:40.180
他说参数了没有注释

29:40.180 --> 29:41.300
没有注释

29:41.300 --> 29:42.900
那么加上注释吧

29:42.900 --> 29:45.260
这是个平面对象

29:47.940 --> 29:49.380
我们有了这个函数之后

29:49.380 --> 29:50.340
有了这个函数之后

29:50.340 --> 29:51.620
我们到这边来

29:51.620 --> 29:53.220
这边操作起来就很舒服了

29:53.220 --> 29:54.020
就非常舒服了

29:55.340 --> 29:57.620
这边我们要写这个

29:57.620 --> 30:00.460
要写这个新增方法

30:00.460 --> 30:02.060
先要做内情转换

30:02.060 --> 30:04.580
要哪一边做内情转换

30:04.580 --> 30:07.660
无位里边有一个静态函数

30:08.440 --> 30:10.560
内情转换

30:10.560 --> 30:12.080
我把这个无位扔进去

30:12.080 --> 30:14.200
我也不知道他是不是一个平面对象

30:14.200 --> 30:15.800
他这里标注的是无位

30:15.800 --> 30:17.080
但是运行出来过后

30:17.080 --> 30:19.240
我也不知道他是不是一个平面对象

30:19.240 --> 30:21.160
总之我让你进行转换

30:21.160 --> 30:24.160
你总之会给我一个正确的对象

30:24.160 --> 30:26.280
转换之后

30:26.280 --> 30:28.320
我们把它得到这个无位

30:28.320 --> 30:29.720
重新复辞

30:29.720 --> 30:31.720
转换完了过后做数据验证

30:31.720 --> 30:33.240
做数据验证

30:33.240 --> 30:34.840
验证的时候

30:34.840 --> 30:36.840
就是调用无位的

30:36.900 --> 30:38.100
无位的那个方法

30:38.100 --> 30:39.860
是Validate

30:39.860 --> 30:41.780
Validate is this

30:41.780 --> 30:44.020
验证当前对象

30:44.020 --> 30:45.060
返回的是一个什么呢

30:45.060 --> 30:45.740
返回的注意

30:45.740 --> 30:46.580
它在提示里

30:46.580 --> 30:48.540
返回的是一个异步的对象

30:48.540 --> 30:50.020
叫Promise

30:50.020 --> 30:52.340
因此我们要通过进

30:52.340 --> 30:54.260
或者是把这个函数

30:54.260 --> 30:56.780
也转换成异步的

30:56.780 --> 30:57.780
都可以

30:57.780 --> 30:59.540
如果你想在这里使用而为者

30:59.540 --> 31:00.460
对吧

31:00.460 --> 31:02.100
这些都是以前的知识

31:02.100 --> 31:03.860
如果你想在这里使用而为者的话

31:03.860 --> 31:05.100
那么是不是要在这里

31:05.100 --> 31:06.020
放入什么

31:06.080 --> 31:07.920
放入Async对不对

31:07.920 --> 31:09.240
放入这个玩意儿

31:09.240 --> 31:10.400
写上这个玩意儿

31:10.400 --> 31:11.280
好写上这个玩意儿过后

31:11.280 --> 31:12.680
它马上就爆错了

31:12.680 --> 31:14.160
都是一全是逻辑

31:14.160 --> 31:16.320
以前的我们不太在关心这些逻辑

31:16.320 --> 31:18.640
所以说经常出问题

31:18.640 --> 31:21.840
那么现在有了类型检查之后呢

31:21.840 --> 31:23.520
它处处要要求你

31:23.520 --> 31:25.280
写代码要符合逻辑

31:25.280 --> 31:27.880
你已经标注了这个函数

31:27.880 --> 31:29.360
是一个异步函数

31:29.360 --> 31:31.640
怎么可能会返回这个东西

31:31.640 --> 31:32.840
怎么可能

31:32.840 --> 31:34.160
它返回的是啥

31:34.180 --> 31:36.780
返回的一定是Promise

31:36.780 --> 31:39.660
返回的一定是Promise

31:41.580 --> 31:42.780
你这里面的玩意儿

31:42.780 --> 31:43.820
你这里面的玩意儿

31:43.820 --> 31:47.020
只是异步函数完成之后

31:47.020 --> 31:48.540
它返回的结果

31:48.540 --> 31:50.020
但是它本身是异步函数

31:50.020 --> 31:51.700
返回的一定是Promise

31:51.700 --> 31:52.460
你明白这意思吗

31:54.180 --> 31:55.020
不要这个东西

31:55.020 --> 31:56.660
代码一多了看不懂

31:56.660 --> 31:57.860
这里面表示的是啥

31:57.860 --> 32:00.660
表示的是这个异步函数

32:00.660 --> 32:01.900
结束之后

32:01.900 --> 32:03.460
它的返回结果

32:03.520 --> 32:04.360
由于它是Async

32:04.360 --> 32:06.120
所以说你这里可以直接返回

32:06.120 --> 32:07.080
I'm moving

32:07.080 --> 32:09.160
或者是返回视频的制服创

32:10.520 --> 32:11.040
好

32:11.040 --> 32:11.800
我们到这里

32:11.800 --> 32:13.560
做了数据验证之后

32:13.560 --> 32:14.960
做了数据验证之后

32:16.080 --> 32:17.480
然后我们这里await

32:17.480 --> 32:19.200
你看这里其实很好理解

32:19.200 --> 32:19.800
对吧

32:19.800 --> 32:20.640
你看这里

32:20.640 --> 32:21.560
反正这是解释

32:21.560 --> 32:22.360
它返回的是啥

32:22.360 --> 32:23.680
返回的是一个Promise

32:23.680 --> 32:24.080
就是

32:25.200 --> 32:26.800
异步任务完成之后

32:26.800 --> 32:29.000
返回的是一个制服创数组

32:29.000 --> 32:30.600
返回的是一个制服创数组

32:30.600 --> 32:32.280
但是你这样以等待完成

32:32.280 --> 32:33.240
等待它

32:33.300 --> 32:33.980
以等待的话

32:33.980 --> 32:36.300
是不是一步任务必须要完成

32:36.300 --> 32:37.420
必须要完成之后

32:37.420 --> 32:39.300
我们才能继续往下运行

32:39.300 --> 32:39.780
所以说这里

32:39.780 --> 32:40.860
一等待

32:40.860 --> 32:41.780
等待之后

32:41.780 --> 32:42.580
你得到了结果

32:44.460 --> 32:45.060
等待之后

32:45.060 --> 32:45.740
你得到的结果

32:45.740 --> 32:46.300
你看一下

32:46.300 --> 32:48.220
是不是就是一个制服创数组了

32:48.220 --> 32:49.140
Promise就不厌了

32:50.540 --> 32:51.660
明白这个意思吗

32:51.660 --> 32:52.900
或者是

32:52.900 --> 32:55.500
或者是这里你使用Zin

32:55.500 --> 33:00.320
你使用Zin的时候

33:00.320 --> 33:02.080
就当我们任务完成之后

33:02.080 --> 33:02.840
你看这个Error

33:02.840 --> 33:04.520
是不是也是制服创数组

33:04.580 --> 33:05.620
是一样的道理

33:05.620 --> 33:06.620
都是一样的道理

33:06.620 --> 33:09.780
它返回的是一个Promise制服创数组

33:09.780 --> 33:10.540
完成之后

33:10.540 --> 33:12.140
就剩下制服创数组了

33:12.140 --> 33:12.700
同样的道理

33:12.700 --> 33:14.500
这边也是这样子

33:14.500 --> 33:15.700
由于它是一个异步函数

33:15.700 --> 33:17.660
它一定要返回Promise

33:17.660 --> 33:18.580
而任务完成之后

33:18.580 --> 33:20.300
返回的要么是个电影对象

33:20.300 --> 33:21.100
添加完成了

33:21.100 --> 33:23.220
就是一个新的电影对象

33:23.220 --> 33:26.420
要么就是一个制服创数组

33:26.420 --> 33:27.500
要么就是个制服创数组

33:27.500 --> 33:28.580
表示有错误消息

33:29.740 --> 33:29.900
好

33:29.900 --> 33:31.780
这里我们通过这种方式

33:31.840 --> 33:34.200
来得到Await

33:34.200 --> 33:37.040
来得到它验证的结果

33:37.040 --> 33:39.600
就是我们写ts只需要在关键点

33:39.600 --> 33:40.960
给它加上内行

33:40.960 --> 33:41.840
内行就行了

33:41.840 --> 33:42.840
你看这些代码

33:42.840 --> 33:43.720
有没有内行啊

33:43.720 --> 33:45.280
哪有写的内行

33:45.280 --> 33:47.280
没有写的怎么内行

33:47.280 --> 33:49.400
让它进行内行推到就完事了

33:51.560 --> 33:53.680
这里我们得到一个制服创数组

33:53.680 --> 33:56.000
我们怎么来知道有没有错误呢

33:56.000 --> 33:56.600
很简单

33:57.880 --> 34:00.040
ErrorNance

34:00.040 --> 34:03.900
如果大云林是不是有错误

34:03.900 --> 34:04.780
对吧

34:04.780 --> 34:06.020
有错误怎么办

34:06.020 --> 34:09.060
有错误是不是把这个错误数组返回

34:09.060 --> 34:10.300
那还进行下去吗

34:10.300 --> 34:11.700
就不进行下去了

34:11.700 --> 34:12.460
因为有错误

34:13.700 --> 34:13.900
好

34:13.900 --> 34:16.940
以前的就是内行转换和数据验证

34:16.940 --> 34:18.620
要写很多很多的代码的

34:18.620 --> 34:19.820
那么到了这里呢

34:19.820 --> 34:21.460
就变成了短短计划

34:21.460 --> 34:22.420
因为这些事情呢

34:23.340 --> 34:24.500
这个东西啊

34:24.500 --> 34:26.820
这个东西已经帮我们做了

34:27.800 --> 34:28.880
其实呢

34:28.880 --> 34:30.320
这个地方啊

34:30.320 --> 34:32.000
其实这个地方

34:32.000 --> 34:34.520
甚至可以一行代码都不用写

34:34.520 --> 34:36.400
这里一行代码都不用写

34:36.400 --> 34:37.040
然后这里呢

34:37.040 --> 34:38.800
我只给大家留个思考题

34:38.800 --> 34:40.000
这个有点难度啊

34:41.000 --> 34:42.080
怎么做呢

34:42.080 --> 34:43.160
用装饰器

34:44.600 --> 34:46.760
用装饰器来处理

34:46.760 --> 34:48.960
比方说我在这里可以加个装饰器

34:48.960 --> 34:50.360
假设有这么一个装饰器

34:50.360 --> 34:51.080
Many days

34:54.520 --> 34:56.480
假设有这么一个装饰器

34:56.500 --> 34:57.260
标准一下啊

34:59.260 --> 35:00.020
肯定是没有啊

35:00.020 --> 35:00.940
现在没有

35:00.940 --> 35:02.060
有这个装饰器

35:02.060 --> 35:02.780
然后呢

35:02.780 --> 35:04.620
我们这里可以写个装饰器

35:04.620 --> 35:05.940
对参数也写个装饰器

35:07.300 --> 35:10.140
比方说验证这个参数

35:10.140 --> 35:12.020
验证的方式呢是啊

35:12.020 --> 35:12.500
是什么的

35:14.180 --> 35:15.260
要把它用

35:15.260 --> 35:17.020
验证的方式是验证的是Movie

35:18.100 --> 35:18.820
验证的是Movie

35:19.660 --> 35:21.860
或者把它用一个翻译型吗

35:21.860 --> 35:22.860
用个翻译型

35:22.860 --> 35:23.900
翻译型方法Movie

35:24.740 --> 35:26.060
好再写个装饰器转换

35:26.540 --> 35:27.380
Chance

35:29.380 --> 35:30.620
比如说转换

35:30.620 --> 35:32.220
转换的目标是Movie

35:34.580 --> 35:35.460
比方说啊

35:35.460 --> 35:37.300
我给参数加上这两个装饰器

35:38.220 --> 35:40.060
然后给这里抓加上的装饰器

35:40.060 --> 35:41.580
让装饰器来处理这个问题

35:42.460 --> 35:44.380
大家可以自行去思考啊

35:44.380 --> 35:45.980
那么这样子加装饰器过后

35:45.980 --> 35:47.060
这里一行代码不用写

35:48.100 --> 35:49.140
一行代码不用写

35:49.140 --> 35:51.380
直接写数据库的操作就行了

35:51.380 --> 35:52.460
这是分理关注点

35:52.460 --> 35:53.740
啊就是AOP

35:53.740 --> 35:55.620
面向切面编程

35:55.720 --> 35:57.000
大家可以自行去思考

35:57.000 --> 35:59.000
因为这里可能写的比较复杂

35:59.000 --> 36:00.480
我就不做这样的练习了

36:02.520 --> 36:04.400
我们这里完成了内形转换

36:04.400 --> 36:05.880
完成了数据验证

36:05.880 --> 36:06.960
最后呢

36:06.960 --> 36:08.360
如果数据验证没有通过

36:08.360 --> 36:10.560
反过来就是一个错误的数组

36:10.560 --> 36:11.560
通过了之后

36:11.560 --> 36:12.600
我们做什么

36:12.600 --> 36:15.520
就把它添加到数据库

36:16.560 --> 36:17.360
大功高层

36:17.360 --> 36:17.760
完成

36:18.840 --> 36:19.920
添加数据库

36:19.920 --> 36:22.600
那是不是我们要调用数据库的操作啊

36:22.600 --> 36:23.560
对不对

36:23.560 --> 36:24.960
要使用数据库的操作

36:25.020 --> 36:26.900
我们先把这个数据库里面

36:26.900 --> 36:28.500
那个导入进来啊

36:28.500 --> 36:30.300
叫什么move mode

36:30.300 --> 36:30.740
对吧

36:30.740 --> 36:31.940
把导入进来

36:31.940 --> 36:32.700
导入进来里面

36:32.700 --> 36:35.060
move mode里面不是有相应的方法吗

36:35.060 --> 36:35.740
对吧

36:35.740 --> 36:37.500
什么create对吧

36:37.500 --> 36:38.660
create

36:38.660 --> 36:40.380
创建一个

36:40.380 --> 36:41.100
创建一个啥

36:41.100 --> 36:42.980
创建一个对象啊

36:42.980 --> 36:44.820
我们把数据给扔进去

36:44.820 --> 36:47.660
我们要添加了电影给扔进去啊

36:47.660 --> 36:49.140
扔进去之后

36:49.140 --> 36:51.140
你看他返回的是个啥

36:51.140 --> 36:52.660
返回的是不是一个异步的

36:52.660 --> 36:53.540
你看这些

36:53.560 --> 36:55.160
就不停的在提示里

36:55.160 --> 36:57.040
他的内想是什么

36:57.040 --> 36:58.680
你现在GS哪有这些提示啊

36:58.680 --> 37:00.000
你蒙着头写代嘛

37:00.000 --> 37:01.640
只全靠自己的记忆

37:01.640 --> 37:02.240
我现在呢

37:02.240 --> 37:04.320
其实我的记忆里算很差的

37:04.320 --> 37:05.760
很差很差的了啊

37:05.760 --> 37:07.240
有一些同学应该知道我的记忆里

37:07.240 --> 37:08.360
真的是鱼的记忆

37:08.360 --> 37:09.640
就七秒钟

37:09.640 --> 37:10.560
我的记忆里这么差

37:10.560 --> 37:12.880
我就特别需要TS啊

37:12.880 --> 37:15.040
专门为我这种残障人士使用的

37:16.160 --> 37:17.320
这里promise你看

37:17.320 --> 37:18.640
返回的就是一个异步啊

37:18.640 --> 37:19.800
我知道我知道异步

37:19.800 --> 37:21.120
我就知道要等待他对吧

37:21.120 --> 37:22.000
要等待他

37:22.020 --> 37:22.900
等待他之后呢

37:22.900 --> 37:24.500
得到就是一个imov

37:24.500 --> 37:25.580
imov

37:25.580 --> 37:26.940
为什么是imov

37:26.940 --> 37:29.060
就是因为之前我们配置了这个玩意儿

37:30.260 --> 37:31.220
如果没有配置这个玩意儿

37:31.220 --> 37:32.900
他就不知道是啥了

37:32.900 --> 37:34.380
所以说我当时为什么要配置他

37:34.380 --> 37:34.980
就是个原因

37:35.980 --> 37:36.620
好这里呢

37:36.620 --> 37:37.660
得到了imov之后

37:37.660 --> 37:38.860
我们等待他

37:38.860 --> 37:39.380
等待他

37:45.660 --> 37:47.180
好等待完成之后

37:47.180 --> 37:48.100
然后完成之后

37:48.100 --> 37:50.420
你看到race out是不是就是个imov

37:50.420 --> 37:50.940
对不对

37:50.960 --> 37:52.560
你直接把这个race out返回

37:52.560 --> 37:55.240
或者说你直接返回这个玩意儿

37:55.240 --> 37:55.720
都行

37:59.240 --> 37:59.520
好了

37:59.520 --> 38:02.400
那么这个函数就写完了

38:02.400 --> 38:03.160
就写完了

38:03.160 --> 38:04.560
添加一个电影

38:04.560 --> 38:06.400
这个函数你可能有些同学说

38:07.280 --> 38:08.720
哇这么写这么复杂

38:08.720 --> 38:10.120
以前我做一个添加电影

38:10.120 --> 38:12.320
不就一句话就完了吗

38:12.320 --> 38:13.680
怎么写这么带嘛

38:13.680 --> 38:15.680
那你以前做验证了吗

38:15.680 --> 38:16.360
兄弟

38:16.360 --> 38:17.760
你以前做验证了吗

38:17.760 --> 38:20.360
你以前做内情转换了吗

38:20.360 --> 38:21.540
你不做内情转换了

38:21.540 --> 38:23.260
又怎么验证了

38:23.260 --> 38:24.260
所以说你以前

38:24.260 --> 38:25.940
是不是经常导致这个问题

38:25.940 --> 38:29.380
明明说好的数据库里边

38:29.380 --> 38:31.940
明明说好的是一个一种内情

38:31.940 --> 38:33.740
结果你保存的是保存另一种内情

38:33.740 --> 38:34.860
他也不抱错

38:34.860 --> 38:36.340
也没有问题

38:36.340 --> 38:37.860
是不是要出这些问题啊

38:37.860 --> 38:39.060
是不是要出这些问题

38:39.060 --> 38:41.420
那现在有了有了严格的验证之后

38:41.420 --> 38:42.980
是不是不出问题了

38:42.980 --> 38:45.180
以前的你的服务器是根本

38:45.180 --> 38:46.580
不能拿上台面用的

38:46.580 --> 38:48.020
真的是不能拿上台面用的

38:48.020 --> 38:49.620
因为太容易出问题了

38:49.640 --> 38:51.320
随便给你传协数据的都认

38:51.320 --> 38:53.920
那么这里现在我们经过严格的验证的话

38:53.920 --> 38:55.520
这里就不会出问题

38:55.520 --> 38:56.880
明白这个意思吗

38:56.880 --> 38:58.040
好

38:58.040 --> 38:58.480
现在呢

38:58.480 --> 38:59.560
我们来测试一下

38:59.560 --> 39:03.190
测试一下

39:03.190 --> 39:05.510
我们这里测试一下这个

39:05.510 --> 39:08.030
movie service

39:08.030 --> 39:09.590
movie service

39:09.590 --> 39:11.430
add movie

39:11.430 --> 39:13.350
添加一个电影

39:13.350 --> 39:15.150
添加一个电影

39:15.150 --> 39:15.910
好添加电影

39:15.910 --> 39:19.390
那么这里可以创建一个

39:19.390 --> 39:20.470
一个普通对象

39:20.530 --> 39:21.570
NG对象

39:21.570 --> 39:23.090
一个平面对象

39:23.090 --> 39:24.290
我们直接写

39:24.290 --> 39:25.930
我们写了一个电影的名称

39:25.930 --> 39:26.730
我们就随便想

39:26.730 --> 39:27.970
不用去记忆

39:27.970 --> 39:30.130
写了一个电影的海报

39:30.130 --> 39:31.490
海报地址

39:31.490 --> 39:33.090
还写了一个电影的描述

39:33.090 --> 39:34.650
description

39:34.650 --> 39:36.090
写了一个电影的描述

39:36.090 --> 39:37.210
然后还写了一个咋了

39:37.210 --> 39:38.970
还写了一个电影的

39:38.970 --> 39:40.050
时长

39:40.050 --> 39:41.130
time long

39:41.130 --> 39:43.330
时长33分钟

39:43.330 --> 39:44.770
好写好之后

39:44.770 --> 39:46.690
我们把这个M对象扔进去

39:46.690 --> 39:47.610
扔进去

39:47.630 --> 39:49.470
然后完成添加

39:49.470 --> 39:50.510
Z

39:50.510 --> 39:51.510
得到一个结果

39:51.510 --> 39:52.630
得到一个结果

39:52.630 --> 39:53.790
当然这个结果

39:53.790 --> 39:55.750
有可能是一个

39:55.750 --> 39:57.030
有可能是一个movie对象

39:57.030 --> 39:58.630
有可能是一个支付串数组

39:58.630 --> 40:00.030
所以说我们要判断一下

40:00.030 --> 40:01.310
判断一下

40:01.310 --> 40:02.310
如果

40:02.310 --> 40:04.110
如果

40:04.110 --> 40:05.310
二位

40:05.310 --> 40:06.190
一是二位

40:06.190 --> 40:09.110
判断一下他是不是数组

40:09.110 --> 40:11.470
是不是个数组

40:11.470 --> 40:13.070
如果他是一个数组的话

40:13.070 --> 40:13.950
那么

40:13.950 --> 40:14.510
results

40:14.510 --> 40:15.830
我们输出

40:15.850 --> 40:18.090
直接输出这个results就行了

40:18.090 --> 40:20.210
直接输出这个results就行了

40:20.210 --> 40:21.010
他是一个数组

40:21.010 --> 40:22.210
肯定是有问题

40:22.210 --> 40:22.690
对吧

40:22.690 --> 40:25.010
肯定是有问题

40:25.010 --> 40:25.690
那么

40:25.690 --> 40:27.050
如果不是数组

40:27.050 --> 40:28.490
如果是一个mv的话

40:28.490 --> 40:30.570
那么我们就输出results里面

40:30.570 --> 40:32.090
他各种各样的属性

40:32.090 --> 40:34.250
什么arrious

40:34.250 --> 40:34.890
你看

40:34.890 --> 40:35.850
他这里呢

40:35.850 --> 40:37.770
能够给我们完成推导

40:37.770 --> 40:39.570
你看有内情保护

40:39.570 --> 40:40.170
因为他这里

40:40.170 --> 40:41.250
他知道你

40:41.250 --> 40:43.970
你看他知道你这里判断了是不是数组

40:43.970 --> 40:45.170
所以说他能推导处理

40:45.230 --> 40:47.510
你到了一副里边一定是数组

40:47.510 --> 40:49.590
那么到了一副里边一定是数组

40:49.590 --> 40:51.390
到了l4里边一定不是数组

40:51.390 --> 40:51.870
对吧

40:51.870 --> 40:53.230
一定不是数组

40:53.230 --> 40:55.550
所以说他这里可以推导出来

40:55.550 --> 40:57.150
他的内情是

40:57.150 --> 40:58.190
immovie

40:58.190 --> 41:00.030
immovie

41:00.030 --> 41:02.230
明白这个意思吗

41:02.230 --> 41:04.230
当然你也可能比方说

41:04.230 --> 41:06.510
我们这里也可以用这种方式来操作

41:06.510 --> 41:08.670
用这种方式来操作

41:08.670 --> 41:09.590
比方说

41:09.590 --> 41:10.990
如果你这里确定

41:10.990 --> 41:12.510
你一定没有问题

41:12.510 --> 41:13.310
一定没有问题

41:13.370 --> 41:15.570
又希望他能推导出这里是电影的话

41:15.570 --> 41:18.290
我们还可以使用我们学习过的内情演算

41:18.290 --> 41:19.330
我是

41:19.330 --> 41:21.610
我真的是强行把这个支点加在这

41:21.610 --> 41:23.490
实际上是

41:23.490 --> 41:25.010
不太合适的

41:25.010 --> 41:26.290
不太合适的

41:26.290 --> 41:28.090
我们可以用内情演算

41:28.090 --> 41:29.450
怎么演算的

41:29.450 --> 41:30.210
怎么演算的

41:30.210 --> 41:32.970
不是内情演算里面一个exclude的吗

41:32.970 --> 41:34.290
对不对

41:34.290 --> 41:35.530
有一个exclude的

41:35.530 --> 41:36.130
对吧

41:36.130 --> 41:37.210
exclude的这个

41:37.210 --> 41:38.810
也不是

41:38.810 --> 41:40.490
应该是

41:40.490 --> 41:41.570
我们可以使用

41:41.570 --> 41:42.810
比方说定的变量

41:43.790 --> 41:46.510
它的内情是exclude的

41:46.510 --> 41:48.670
然后给它一个

41:48.670 --> 41:49.830
给它一个内情

41:49.830 --> 41:52.470
type of result

41:52.470 --> 41:53.790
type of result是什么内想

41:53.790 --> 41:54.910
它是什么内想

41:54.910 --> 41:56.190
它说一个immovie

41:56.190 --> 41:57.950
或者是一个联合内想

41:57.950 --> 41:59.830
或者是制不错的输出

41:59.830 --> 42:00.030
好

42:00.030 --> 42:01.230
另一个内情

42:01.230 --> 42:03.950
再给它写一个制不错的输出

42:03.950 --> 42:06.150
这样子一一出掉

42:06.150 --> 42:06.790
你看r

42:06.790 --> 42:08.470
是不是只剩immovie了

42:08.470 --> 42:09.070
对吧

42:09.070 --> 42:11.670
把这里面拥有了这个内情里面的东西

42:11.730 --> 42:14.090
看一下这个内情里面去找对应的

42:14.090 --> 42:15.650
如果找到了就把一出掉

42:15.650 --> 42:16.770
那么就相当于是

42:16.770 --> 42:18.090
把这里面的内情中

42:18.090 --> 42:19.490
中的内情一出掉

42:19.490 --> 42:20.610
制不错输出

42:20.610 --> 42:23.490
那么得到的结果就是r

42:23.490 --> 42:25.770
这里把result负责给它

42:25.770 --> 42:27.610
负责给它

42:27.610 --> 42:29.610
负责给它

42:29.610 --> 42:30.450
这就怎么了

42:30.450 --> 42:32.050
不看一下

42:32.050 --> 42:33.810
它说不能将内情这样的负责

42:33.810 --> 42:35.490
我们这里手动转换一下

42:35.490 --> 42:36.930
immovie

42:36.930 --> 42:39.090
我强行把这个东西扔进来

42:39.090 --> 42:40.650
其实是不太合适的

42:40.790 --> 42:41.990
是不太合适

42:41.990 --> 42:43.630
就像讲到一顺便说一句吧

42:45.550 --> 42:46.470
那么这里

42:46.470 --> 42:49.190
我们就如果添加成功了

42:49.190 --> 42:50.990
我们就输出电影的id

42:51.990 --> 42:53.150
result

42:53.150 --> 42:53.990
下发现id

42:56.310 --> 42:57.750
它又说啥呢

42:57.750 --> 42:59.590
它又说你这个l

42:59.590 --> 43:01.790
你不应该把它写成一行

43:01.790 --> 43:02.670
因为这个l

43:02.670 --> 43:04.990
它让你用这种风格来写

43:04.990 --> 43:07.350
让你用这种风格来写

43:07.350 --> 43:09.710
就是看你个人习惯吧

43:09.770 --> 43:11.610
我不太习惯用这种风格来写

43:11.610 --> 43:14.610
而且还要看公司里面的书写代码

43:14.610 --> 43:16.210
代码书写到习惯

43:16.210 --> 43:18.250
所以说这里我把这个去掉吧

43:18.250 --> 43:19.610
把这个挽难

43:19.610 --> 43:20.570
把这个规则去掉

43:23.090 --> 43:23.890
挽难

43:25.930 --> 43:26.810
把它去掉

43:26.810 --> 43:27.650
把社会force

43:29.770 --> 43:30.010
好

43:30.010 --> 43:31.090
设好了之后呢

43:31.090 --> 43:32.210
我们再来看

43:32.210 --> 43:32.970
到这边来

43:32.970 --> 43:33.250
这边

43:35.690 --> 43:37.050
这里又出问题了

43:37.050 --> 43:38.410
没问题了

43:38.410 --> 43:39.170
好

43:39.230 --> 43:40.710
我们来运行看一下

43:40.710 --> 43:41.470
运行看一下

43:42.870 --> 43:45.070
这里打开

43:45.070 --> 43:46.910
其实已经运行出来了

43:46.910 --> 43:48.070
他说什么呢

43:48.070 --> 43:50.430
他说我们这里验证出

43:50.430 --> 43:51.670
验证出了问题

43:51.670 --> 43:52.910
验证出了问题

43:52.910 --> 43:54.710
电影内详必须是一个宿主

43:54.710 --> 43:57.110
我们没有写电影内详

43:57.110 --> 43:59.030
电影内详也也也为空了

43:59.030 --> 43:59.710
对吧

43:59.710 --> 44:00.870
taps

44:00.870 --> 44:03.230
给他写一个喜剧

44:03.230 --> 44:05.230
你看现在就有明确的提示

44:05.230 --> 44:06.550
告诉我们哪里出了问题

44:06.550 --> 44:07.950
以前有这样的提示吗

44:07.970 --> 44:10.650
以前我们可能连检查都没有检查

44:10.650 --> 44:11.650
就直接放了出去

44:11.650 --> 44:12.210
库里面去了

44:12.210 --> 44:14.050
这肯定是不合适的

44:14.050 --> 44:17.010
然后又说电影地区地区

44:17.010 --> 44:19.890
reals也必须是一个宿主

44:19.890 --> 44:22.090
至少有一个中国大陆

44:23.730 --> 44:24.810
比方说

44:24.810 --> 44:26.610
然后再来老春

44:26.610 --> 44:27.450
看还有什么错误

44:29.250 --> 44:29.650
老春

44:31.730 --> 44:33.570
时长过长

44:33.570 --> 44:34.970
还是时长最小

44:34.970 --> 44:36.570
没有时长对吧

44:36.590 --> 44:37.070
没有时长

44:37.070 --> 44:38.990
因为我们不是写的时长吗

44:38.990 --> 44:41.190
一检查发现这里应该是大写

44:43.230 --> 44:44.630
三三分钟

44:44.630 --> 44:45.230
保存一下

44:46.670 --> 44:47.750
稍微等一下

44:47.750 --> 44:48.710
连接数据库成功

44:48.710 --> 44:49.070
然后

44:50.350 --> 44:52.270
添加了一条数据

44:52.270 --> 44:53.070
我们来看一下

44:53.070 --> 44:55.270
数据是不是真正的添加进去了

44:55.270 --> 44:56.430
到这边来

44:56.430 --> 44:58.030
然后到了这里

45:01.470 --> 45:02.230
数据库

45:02.230 --> 45:03.270
这个

45:03.270 --> 45:04.470
robo3t

45:05.510 --> 45:06.510
打开它

45:06.890 --> 45:07.370
连接

45:08.370 --> 45:10.050
我们看到有这么一个数据库产生的

45:10.050 --> 45:11.090
无畏地避

45:11.090 --> 45:12.770
我这个窗口没有办法放大

45:12.770 --> 45:13.370
我试了一下

45:13.370 --> 45:14.570
好像没办法放大

45:14.570 --> 45:16.170
因此大家就能将就地看

45:16.170 --> 45:17.930
将就看一下

45:17.930 --> 45:19.930
我们这里打开这个集合

45:19.930 --> 45:20.930
你看有一条数据

45:22.250 --> 45:24.210
只要看到有这么一条数据产生就行了

45:25.130 --> 45:28.250
而且这个是经过严格的验证的

45:28.250 --> 45:29.490
经过了严格的验证

45:29.490 --> 45:31.530
所以说这个数据是不会出问题的

45:32.450 --> 45:32.730
OK

45:32.730 --> 45:36.450
我们现在写好了这么一个添加的方法

45:36.770 --> 45:38.730
添加的方法写好了

45:38.730 --> 45:38.930
好

45:38.930 --> 45:40.730
接下来我们来继续书写

45:40.730 --> 45:42.170
比方说修改

45:42.170 --> 45:44.130
我们要修改数据

45:44.130 --> 45:44.410
OK

45:44.410 --> 45:46.370
我们继续到service里面写

45:46.370 --> 45:47.610
添加电影完成了

45:47.610 --> 45:49.570
现在我们来修改电影

45:49.570 --> 45:52.730
public static sync

45:52.730 --> 45:54.530
同样是异步的对吧

45:54.530 --> 45:56.890
adds movie

45:56.890 --> 45:57.810
adds movie

45:57.810 --> 45:58.650
或者说呢

45:58.650 --> 46:01.070
这里我们都把add movie

46:01.070 --> 46:02.570
开始省略一下

46:02.570 --> 46:04.050
把名字给它简洁一点

46:04.050 --> 46:05.930
就add添加

46:05.950 --> 46:06.630
因为为什么呢

46:06.630 --> 46:07.950
从语异上来说

46:07.950 --> 46:10.310
我这个add方法是从什么来调用的

46:10.310 --> 46:12.150
是从这个movie service来调用的

46:12.150 --> 46:14.550
那肯定是跟电影的相关的操作

46:14.550 --> 46:15.830
通过它来调用的

46:15.830 --> 46:18.470
肯定是跟电影的相关操作

46:18.470 --> 46:20.110
因此我直接写一个同意的方法

46:20.110 --> 46:20.830
add

46:20.830 --> 46:23.390
那么这里adds表示修改

46:23.390 --> 46:24.470
修改

46:24.470 --> 46:26.070
或者是multi fan

46:26.070 --> 46:27.070
或者是multi fan

46:27.070 --> 46:28.630
或者是update

46:28.630 --> 46:29.110
这单词

46:29.110 --> 46:31.430
常见的单词大家都知道对吧

46:31.430 --> 46:31.590
好

46:31.590 --> 46:33.470
这里adds修改

46:33.470 --> 46:33.830
好

46:33.830 --> 46:34.630
修改的时候

46:34.690 --> 46:36.090
你要告诉我两个东西

46:37.090 --> 46:38.290
哪两个东西呢

46:38.290 --> 46:40.530
一个是电影的ad

46:41.650 --> 46:42.890
你要告诉我电影的ad

46:43.930 --> 46:45.650
你要修改哪个电影

46:45.650 --> 46:46.290
第二个

46:46.290 --> 46:47.410
你要告诉我啥

46:47.410 --> 46:49.850
你要告诉我电影的对象

46:50.610 --> 46:51.290
电影的对象

46:52.610 --> 46:53.010
movie

46:54.170 --> 46:55.970
需要告诉我这么两个东西

46:55.970 --> 46:58.450
我来帮你完成这个修改

46:58.450 --> 46:59.730
返回的是啥呢

46:59.730 --> 47:00.570
返回的是

47:01.810 --> 47:03.330
就是错误的

47:03.330 --> 47:04.530
我们这样的返回吧

47:04.530 --> 47:05.870
因为修改的话

47:05.870 --> 47:08.790
我就不返回你电影对象了

47:08.790 --> 47:10.910
因为修改已经拿到电影对象了

47:10.910 --> 47:13.230
所以说我就不返回你电影对象了

47:14.390 --> 47:16.830
所以说我们这里返回到啥呢

47:16.830 --> 47:18.790
就给他返回一个支不错数组吧

47:19.590 --> 47:21.830
表示你这个修改有没有错误

47:21.830 --> 47:22.750
如果有错误的话

47:22.750 --> 47:24.550
这个数组就不为空

47:24.550 --> 47:25.670
就有东西

47:25.670 --> 47:27.790
如果没有错误的话

47:27.790 --> 47:29.270
如果有错误的话

47:29.270 --> 47:31.030
如果没有错误的话

47:31.030 --> 47:32.110
这个数组就为空

47:32.110 --> 47:33.510
没有东西

47:33.570 --> 47:34.690
这个返回一个错误的数组

47:36.210 --> 47:37.890
当然你可以打上注释

47:37.890 --> 47:39.210
其实不打注释的话

47:39.210 --> 47:40.770
你到时候调用这个方法的时候

47:40.770 --> 47:42.290
一看他的返回内容是这个

47:42.290 --> 47:43.730
你一下就明白了

47:43.730 --> 47:44.930
这就是TS的好处

47:45.970 --> 47:47.450
那么具体怎么做修改了

47:47.450 --> 47:49.170
其实前边是一样的

47:49.170 --> 47:50.050
对吧

47:50.050 --> 47:54.010
数据内行转发内行数据验证是一样的

47:54.010 --> 47:55.570
然后第三步了不一样

47:55.570 --> 47:57.330
第三步是修改数据库

47:58.570 --> 47:59.210
修改数据库

47:59.210 --> 48:00.250
我们怎么做

48:00.250 --> 48:02.590
就直接await

48:02.590 --> 48:04.030
await

48:04.030 --> 48:06.870
movie mode

48:06.870 --> 48:08.910
然后create

48:08.910 --> 48:10.150
不是create

48:10.150 --> 48:11.790
update one

48:11.790 --> 48:13.350
修改其中一个

48:13.350 --> 48:14.790
第一个是条件

48:14.790 --> 48:15.830
第一个参数是条件

48:15.830 --> 48:18.670
条件就是用ID去匹配

48:18.670 --> 48:20.070
ID打去匹配

48:20.070 --> 48:22.150
第二个是你要修改的值

48:22.150 --> 48:22.830
修改的值是什么

48:22.830 --> 48:23.510
就是movie

48:23.510 --> 48:23.870
对吧

48:23.870 --> 48:24.510
就是movie

48:25.870 --> 48:28.270
这样子就去拿去完成修改

48:28.270 --> 48:28.950
完成这个修改

48:29.930 --> 48:30.970
好

48:30.970 --> 48:32.730
修改完成之后

48:32.730 --> 48:34.530
修改完成之后

48:34.530 --> 48:36.610
那么我们还要返回个东西

48:36.610 --> 48:37.810
因为如果你修改完成了

48:37.810 --> 48:39.170
那就是一定没有错误了

48:39.170 --> 48:39.770
对不对

48:39.770 --> 48:41.050
一定是没有错误的

48:41.050 --> 48:41.690
没有错误

48:41.690 --> 48:42.890
你看如果有错误的话

48:42.890 --> 48:43.850
这里就已经返回了

48:43.850 --> 48:44.490
对吧

48:44.490 --> 48:46.370
那么也就说单码到了第29行

48:46.370 --> 48:49.050
是不是表示没有错误

48:49.050 --> 48:49.890
没有错误的话

48:49.890 --> 48:51.770
我们还是返回这个arrows

48:51.770 --> 48:52.930
还是返回这个arrows

48:52.930 --> 48:55.290
当然这里也可以返回一个空数组

48:55.290 --> 48:56.850
也可以返回一个空数组都没问题

48:57.830 --> 48:58.070
好

48:58.070 --> 48:58.790
看你自己吧

48:59.750 --> 48:59.950
好

48:59.950 --> 49:01.590
写好了这个修改之后

49:02.910 --> 49:04.870
我们要思考一个问题

49:04.870 --> 49:06.510
什么问题呢

49:06.510 --> 49:08.110
就比方说

49:08.110 --> 49:09.230
我们这里的代码

49:10.510 --> 49:12.590
这里的代码比方说啊

49:12.590 --> 49:14.550
我这里我这里这样子写啊

49:14.550 --> 49:17.620
就这样子写

49:17.620 --> 49:19.460
我们这里输出结果

49:19.460 --> 49:20.340
输出结果

49:20.340 --> 49:21.260
console log

49:24.140 --> 49:26.420
我刚才已经把这个地方改了啊

49:26.420 --> 49:27.580
我这里的代码这样子写

49:29.460 --> 49:31.500
就是我这里呢

49:31.500 --> 49:33.460
有可能有这么一个需求

49:33.460 --> 49:34.780
我要修改的时候呢

49:34.780 --> 49:37.460
只修改他电影的名称

49:37.460 --> 49:39.620
只修改电影的名称

49:39.620 --> 49:41.940
把电影的名称修改成流浪地球

49:43.260 --> 49:45.220
然后我去调用修改方法

49:45.220 --> 49:46.380
我去修改这个id

49:47.940 --> 49:49.660
修改就是刚才的一条基督的id

49:50.700 --> 49:51.900
修改这个id

49:51.900 --> 49:54.460
然后把我新的对象传进去

49:54.460 --> 49:56.540
那你觉得这样子行不行呢

49:56.540 --> 49:57.500
你觉得这样子行不行呢

49:57.520 --> 49:58.960
我们保存一下

49:58.960 --> 49:59.520
看一下结果

50:02.600 --> 50:04.200
验证通不过

50:04.200 --> 50:04.760
对吧

50:04.760 --> 50:06.360
验证是没有办法通过的

50:07.280 --> 50:08.480
那么这个时候

50:08.480 --> 50:11.160
但是我们鲁火器也又确实是对的

50:11.160 --> 50:12.640
又确实是对的

50:12.640 --> 50:13.680
只是验证没有通过

50:14.800 --> 50:16.920
那么这个时候怎么处理呢

50:16.920 --> 50:18.600
这个时候怎么处理呢

50:18.600 --> 50:20.480
我们现在验证的时候

50:20.480 --> 50:22.560
希望的是啥

50:22.560 --> 50:24.680
我没有传递的数据

50:24.680 --> 50:26.520
你就不要验证了

50:26.580 --> 50:29.420
只验证那些我传递了的数据

50:29.420 --> 50:30.780
没有传递的数据

50:30.780 --> 50:31.420
不要验证

50:32.620 --> 50:32.820
好

50:32.820 --> 50:34.940
那么这个东西怎么来处理呢

50:34.940 --> 50:38.340
如何来略过没有传递的数据呢

50:38.340 --> 50:39.900
就是像我们添加的时候

50:39.900 --> 50:40.780
每个数据都要验证

50:40.780 --> 50:42.420
那个是毫无疑问的

50:42.420 --> 50:43.660
但是像这种情况下

50:43.660 --> 50:44.660
修改的时候

50:44.660 --> 50:46.940
我们只验证那些传递的数据

50:46.940 --> 50:50.220
因为我们只需要修改传递的数据

50:50.220 --> 50:52.100
那这个时候怎么处理呢

50:52.100 --> 50:53.660
这个时候其实啊

50:53.680 --> 50:55.520
这个验证库啊

50:55.520 --> 50:58.040
验证这个库class validator里边

50:59.040 --> 51:00.960
有这么一个方式

51:00.960 --> 51:02.320
他调用这个函数的时候

51:02.320 --> 51:03.920
你看除了第一个参数

51:03.920 --> 51:05.880
验证的对象之外

51:05.880 --> 51:07.160
还有第二个参数

51:07.160 --> 51:08.720
验证配置

51:08.720 --> 51:10.880
validator options

51:10.880 --> 51:12.240
验证配置

51:12.240 --> 51:14.320
我们看一下个验证配置

51:14.320 --> 51:17.080
这个验证配置里边有很多的配置像

51:17.080 --> 51:18.320
有很多的配置像

51:18.320 --> 51:20.920
比方说验证分组啊等等等等

51:20.920 --> 51:22.480
我们这里的可以按f12

51:22.500 --> 51:24.140
我都不用去官方文档

51:24.140 --> 51:25.500
不用去看官方文档

51:25.500 --> 51:27.380
我这里按f12转到定义

51:28.940 --> 51:29.500
这里呢

51:29.500 --> 51:31.420
他就有一个就是函数的签名

51:31.420 --> 51:32.900
就是函数的声名

51:32.900 --> 51:33.580
声名的时候呢

51:33.580 --> 51:34.740
他告诉你

51:34.740 --> 51:36.020
有这么一个参数

51:36.020 --> 51:38.860
这个参数的类型叫validator options

51:38.860 --> 51:40.380
好管它是啥吧

51:40.380 --> 51:42.460
我们来按f12转到定义

51:42.460 --> 51:43.940
看这里面有啥东西可以配置

51:44.980 --> 51:46.020
f12转过来

51:47.380 --> 51:48.340
其中第一个配置

51:48.340 --> 51:50.780
你看他打好了注射啊都

51:50.880 --> 51:54.200
如果把这个设为处的话

51:54.200 --> 51:55.600
他说验证器呢

51:55.600 --> 51:56.920
会挑过那些

51:58.040 --> 52:00.280
没有设置的属性

52:00.280 --> 52:02.200
挑过那些没有设置的属性

52:02.200 --> 52:03.640
skip validation

52:03.640 --> 52:05.160
挑过验证验证什么了

52:05.160 --> 52:10.120
挑过那些all properties that are missing in the valid

52:10.120 --> 52:13.480
validating objects

52:13.480 --> 52:15.280
就是在我要验证的对象上面

52:15.280 --> 52:16.640
有些属性是没有设置的

52:16.640 --> 52:17.960
这些属性呢

52:17.960 --> 52:19.080
挑过

52:19.080 --> 52:19.520
因此呢

52:19.520 --> 52:20.480
我们要做的事情很简单

52:20.480 --> 52:22.540
把这个东西配置为处就行了

52:22.540 --> 52:24.780
把这个东西配置为处就行了

52:24.780 --> 52:24.980
好

52:24.980 --> 52:26.740
那么这个时候就遇到一个问题

52:26.740 --> 52:28.620
我啥时候这个玩意是true

52:28.620 --> 52:30.900
啥时候是force呢

52:30.900 --> 52:31.660
啥时候是true

52:31.660 --> 52:32.380
啥时候是force呢

52:32.380 --> 52:34.460
添加的时候它是force对吧

52:34.460 --> 52:36.300
不能跳过

52:36.300 --> 52:37.300
修改的时候呢

52:37.300 --> 52:38.940
它是true

52:38.940 --> 52:40.340
那我也不知道了

52:40.340 --> 52:41.820
你告诉我

52:41.820 --> 52:43.580
你告诉我

52:43.580 --> 52:45.300
skip

52:45.300 --> 52:47.860
比方说skip missing

52:47.880 --> 52:51.840
是不是要挑过那些缺失的属性

52:51.840 --> 52:52.960
它的默认值

52:52.960 --> 52:54.000
给它一个默认值

52:54.000 --> 52:55.480
默认值为force

52:55.480 --> 52:57.520
不能跳过

52:57.520 --> 52:59.680
那么它推断出来就是布尔

52:59.680 --> 52:59.840
好

52:59.840 --> 53:00.800
那这里呢

53:00.800 --> 53:02.560
我就使用这个参数对吧

53:02.560 --> 53:05.760
我们缺失的信息就使用参数来处理

53:05.760 --> 53:05.960
好

53:05.960 --> 53:07.600
那么到这边

53:07.600 --> 53:08.960
我要做修改的时候

53:08.960 --> 53:09.680
在验证的时候

53:09.680 --> 53:11.840
我是不是把它设置为true

53:11.840 --> 53:13.240
要挑过那些

53:13.240 --> 53:16.760
要挑过那些就是缺失的属性

53:17.960 --> 53:18.840
好这样子来

53:18.840 --> 53:20.480
我们再保存

53:20.480 --> 53:21.280
看一下结果

53:23.080 --> 53:23.560
再保存

53:25.400 --> 53:26.280
没有错误

53:26.280 --> 53:26.920
没有错误

53:26.920 --> 53:28.080
验证通过

53:28.080 --> 53:29.440
现在我们看一下数据库

53:29.440 --> 53:31.920
电影的名称是不是修改过了

53:31.920 --> 53:32.800
这里重新打开

53:34.520 --> 53:36.640
这里电影的名称你看

53:36.640 --> 53:38.680
修改成了流浪地球

53:38.680 --> 53:39.800
修改成了流浪地球

53:41.560 --> 53:41.840
好

53:41.840 --> 53:43.280
然后我们再看

53:43.280 --> 53:44.320
我们再看

53:45.400 --> 53:46.960
还有没有问题呢

53:46.960 --> 53:47.640
这样做了之后

53:47.740 --> 53:49.020
还有没有问题呢

53:49.020 --> 53:49.780
我们再来看一下

53:51.500 --> 53:52.060
比方说

53:53.020 --> 53:55.220
我在这里边

53:55.220 --> 53:55.980
英斗社里边

53:58.260 --> 53:59.540
我在这里的时候

53:59.540 --> 54:01.060
我做这么一个处理

54:02.580 --> 54:07.220
我先把这个东西

54:07.220 --> 54:09.860
意思是true

54:11.220 --> 54:12.140
就是热门影片

54:12.140 --> 54:13.820
把它设置为热门影片

54:13.820 --> 54:13.940
好

54:13.940 --> 54:14.500
咱们来修改

54:15.500 --> 54:15.820
修改

54:16.800 --> 54:17.760
等一下看一下结果

54:18.960 --> 54:19.160
好

54:19.160 --> 54:20.360
修改完成

54:20.360 --> 54:21.040
修改完成之后

54:21.040 --> 54:21.800
我们看一下数据库

54:21.800 --> 54:22.960
看一下数据库

54:24.280 --> 54:25.080
close others

54:26.280 --> 54:28.320
热门影片

54:28.320 --> 54:29.120
你看了

54:29.120 --> 54:30.000
结果已经修改过来了

54:30.000 --> 54:30.480
对吧

54:30.480 --> 54:31.960
已经修改过来了

54:31.960 --> 54:32.280
好

54:32.280 --> 54:33.920
我下一次修改的时候

54:34.920 --> 54:36.840
我下一次修改的时候

54:36.840 --> 54:38.880
我只修改电影的名字

54:38.880 --> 54:41.480
比方说把它变成什么

54:41.480 --> 54:42.400
疯狂的外星人

54:43.560 --> 54:44.120
外星人

54:44.860 --> 54:47.020
只修改电影名字

54:47.020 --> 54:48.100
不修改电影的

54:48.100 --> 54:49.820
就是其他的属性

54:49.820 --> 54:50.900
保存

54:50.900 --> 54:54.360
看一下

54:54.360 --> 54:55.640
稍微等待一下

54:55.640 --> 54:57.160
第一次连接数据库需要点时间

54:57.160 --> 54:58.520
修改完成

54:58.520 --> 54:59.320
我们再来看

54:59.320 --> 55:00.000
注意

55:00.000 --> 55:02.480
之前是把它一直 hot 修改为处的

55:02.480 --> 55:03.400
那么现在我们再看一下

55:05.240 --> 55:08.280
一直 hot 变成了 force

55:10.280 --> 55:10.720
怎么回事

55:12.480 --> 55:13.160
这是怎么回事

55:13.900 --> 55:16.260
这是怎么回事

55:16.260 --> 55:18.740
这涉及到内形转换的问题

55:19.700 --> 55:20.060
在这

55:21.420 --> 55:21.740
在这

55:23.340 --> 55:26.500
当我把它进行内形转换之后

55:26.500 --> 55:28.540
由于它之前是一个平面对象

55:28.540 --> 55:30.580
平面对象很多属性都是缺失的

55:30.580 --> 55:32.580
我们刚才看到了只有一个属性

55:33.460 --> 55:36.420
但是我把它转换成内的对象之后

55:36.420 --> 55:37.980
你看一下内的对象

55:37.980 --> 55:40.180
里边是不是有些默认值

55:40.180 --> 55:41.940
你看这里对吧

55:41.960 --> 55:43.800
有一些默认值

55:43.800 --> 55:46.880
因此这些属性全部变成自动由值了

55:46.880 --> 55:48.880
全部变成了自动由值

55:49.960 --> 55:51.200
那这个时候

55:51.200 --> 55:51.600
咋办

55:53.040 --> 55:54.200
咋办

55:54.200 --> 55:56.080
当然一种办法就是

55:56.080 --> 55:57.600
一种办法就是

55:57.600 --> 55:58.960
不要默认值

55:58.960 --> 56:01.160
全部都不要默认值

56:01.160 --> 56:02.440
这是一种办法

56:02.440 --> 56:04.800
第二种办法是在这

56:04.800 --> 56:06.360
你修改数据库的时候

56:06.360 --> 56:08.200
就是你刚才验证的时候要转换

56:08.200 --> 56:09.240
这个没问题

56:09.240 --> 56:11.800
但是你修改这个数据库的时候

56:11.860 --> 56:13.780
就用原始的对象

56:13.780 --> 56:16.220
就使用原始的对象

56:16.220 --> 56:17.620
原始对象是咋样子

56:17.620 --> 56:18.460
就是咋样子

56:18.460 --> 56:20.140
两种方式都可以

56:20.140 --> 56:21.580
第一种方式

56:21.580 --> 56:22.860
去掉默认值

56:22.860 --> 56:23.900
不要默认值

56:23.900 --> 56:25.860
在实际里面不设置默认值

56:25.860 --> 56:27.340
因为防止这样的问题发生

56:28.740 --> 56:30.260
理解什么问题啊

56:30.260 --> 56:31.380
除了什么问题

56:31.380 --> 56:32.740
就是你转换对象的时候

56:32.740 --> 56:34.340
特别是修改的时候就会出问题

56:34.340 --> 56:35.540
修改的事情转换

56:35.540 --> 56:37.740
有一些属性本来没有给它负责的

56:37.740 --> 56:39.260
结果还有了默认值

56:39.260 --> 56:40.780
我不希望有这些默认值

56:40.800 --> 56:41.560
有了默认值过河

56:41.560 --> 56:42.640
到时候我去修改

56:42.640 --> 56:44.880
他就把之前的纸给我覆盖掉了

56:44.880 --> 56:46.720
使用默认值覆盖掉了

56:46.720 --> 56:46.920
好

56:46.920 --> 56:48.200
第二种做法是

56:48.200 --> 56:49.680
我这里修改的时候

56:49.680 --> 56:51.920
就不要传这个movey对象了

56:51.920 --> 56:54.280
就传原始的参数这里

56:54.280 --> 56:55.880
传原始的参数对象

56:55.880 --> 56:59.520
也就是我这里就不要把参数给覆盖掉

56:59.520 --> 57:02.920
比方说我们这里新定义的变量

57:03.880 --> 57:05.720
把这只movey OB借

57:06.720 --> 57:09.440
这边我是用movey OB借来调用

57:09.460 --> 57:10.340
那这里呢

57:10.340 --> 57:12.540
参数保持它的平面对象

57:12.540 --> 57:13.620
如果是平面对象的话

57:13.620 --> 57:16.100
我就保持你的平面对象

57:16.100 --> 57:17.740
当然如果你就是一个movey对象的话

57:17.740 --> 57:20.020
那你肯定知道他有默认值的情况

57:20.020 --> 57:21.540
那我这里就保持你的平面对象

57:22.540 --> 57:23.500
明白这个意思吗

57:23.500 --> 57:23.620
好

57:23.620 --> 57:25.060
我们再来看一下

57:25.060 --> 57:26.460
这两种方式都可以

57:26.460 --> 57:27.140
并不是哪种好

57:27.140 --> 57:28.660
哪种差都可以

57:28.660 --> 57:29.420
都没有任何问题

57:30.380 --> 57:30.660
好

57:30.660 --> 57:31.540
我们这里保存一下

57:33.380 --> 57:35.780
这里我们看一下

57:35.780 --> 57:37.340
先把它设为

57:37.400 --> 57:38.040
一直好

57:39.120 --> 57:39.640
设为去

57:40.840 --> 57:41.240
保存

57:43.240 --> 57:43.840
稍等一下啊

57:45.680 --> 57:46.320
好完成

57:47.240 --> 57:47.840
我先看啊

57:49.920 --> 57:51.520
这里一直好回处了

57:51.520 --> 57:52.520
啊回处

57:52.520 --> 57:53.400
那么现在呢

57:53.400 --> 57:54.920
我再把它去掉

57:54.920 --> 57:56.120
这里也换成流量地球

57:57.880 --> 57:58.920
流量地球

58:00.200 --> 58:00.680
好保存

58:04.020 --> 58:05.020
稍等一下啊

58:05.020 --> 58:05.380
完成

58:06.100 --> 58:06.220
好

58:06.220 --> 58:09.140
这个这里再来看一下

58:09.160 --> 58:10.760
你看这些属性没动了

58:10.760 --> 58:12.280
因为它现在修改的时候

58:12.280 --> 58:14.480
使用的是这个对象

58:14.480 --> 58:16.600
使用的是这个传入的对象

58:16.600 --> 58:18.000
使用的是这个参数对象

58:18.000 --> 58:18.640
参数是啥

58:18.640 --> 58:19.640
我就修改成长

58:19.640 --> 58:21.920
前面这个转换了只是为了验证

58:21.920 --> 58:22.880
只是为了处理验证

58:24.000 --> 58:25.440
明白这个意思吗

58:25.440 --> 58:26.640
我就说一下这个点

58:27.920 --> 58:28.160
好了

58:28.160 --> 58:29.640
这是关于修改

58:29.640 --> 58:31.320
这是关于修改

58:31.320 --> 58:33.240
那么修改完成之后呢

58:33.240 --> 58:35.560
还有哪些事情要做

58:35.560 --> 58:37.040
还有哪些事情

58:37.040 --> 58:38.480
还有删除对吧

58:38.540 --> 58:40.620
删除就很简单了

58:40.620 --> 58:42.260
删除就很简单了

58:42.260 --> 58:43.380
Static

58:43.380 --> 58:45.260
Async

58:45.260 --> 58:45.940
Delete

58:45.940 --> 58:49.180
删除或者叫Remove都行啊

58:49.180 --> 58:50.620
删除的时候你告诉我啥了

58:50.620 --> 58:52.780
你告诉我一个ID就完事了

58:52.780 --> 58:54.340
告诉我一个ID就完事了

58:54.340 --> 58:56.940
而且删除了我认为啊

58:58.340 --> 58:59.260
一定成功

58:59.260 --> 59:00.860
它没有什么失败的

59:00.860 --> 59:02.540
有啥失败的呢

59:02.540 --> 59:03.260
当然呢

59:03.260 --> 59:04.500
你要认为啊

59:04.500 --> 59:07.220
我如果没有删除到任何数据

59:07.240 --> 59:08.600
我就认为是失败

59:08.600 --> 59:09.920
那的也可以也可以

59:09.920 --> 59:11.440
但是我觉得

59:11.440 --> 59:12.360
删除也要删吧

59:12.360 --> 59:13.640
如果匹配不到的话

59:13.640 --> 59:14.800
就什么都没做对吧

59:14.800 --> 59:15.520
就什么都没有做

59:15.520 --> 59:16.840
总共要去删引式

59:16.840 --> 59:18.760
所以说我这里直接反回一个

59:18.760 --> 59:20.440
反回内容就直接实处

59:20.440 --> 59:21.680
一个字面量内容

59:21.680 --> 59:23.120
永远为处

59:23.120 --> 59:24.720
当然这个地方按道理

59:24.720 --> 59:26.040
或者是按到公式的要求

59:26.040 --> 59:26.840
自行设置啊

59:26.840 --> 59:28.200
反回内容

59:28.200 --> 59:28.360
好

59:28.360 --> 59:29.480
那么这里删除来吧

59:29.480 --> 59:31.000
直接删就完事了啊

59:31.000 --> 59:31.760
Movie mode

59:33.520 --> 59:34.040
Delete

59:35.960 --> 59:36.760
删除一个

59:37.360 --> 59:39.040
条件就是id

59:39.040 --> 59:41.080
啊来进行匹配

59:41.080 --> 59:42.800
删除也许删除完事了

59:42.800 --> 59:44.000
删除就完事了

59:44.000 --> 59:46.200
甚至我给它反回握有的都可以

59:46.200 --> 59:47.360
没有反回之

59:47.360 --> 59:48.120
没有反回之

59:48.120 --> 59:48.760
反回啥嘛

59:48.760 --> 59:50.200
没有反回之

59:50.200 --> 59:50.360
好

59:50.360 --> 59:51.280
就是删除

59:51.280 --> 59:51.440
好

59:51.440 --> 59:52.440
咱们来试一下啊

59:52.440 --> 59:53.880
试一下删除

59:53.880 --> 59:54.680
啊这里呢

59:54.680 --> 59:56.080
我们

59:56.080 --> 59:56.880
注释掉啊

59:56.880 --> 59:58.000
就把这个id拿来删掉

59:59.200 --> 59:59.800
Movie

01:00:01.920 --> 01:00:03.440
Service

01:00:03.440 --> 01:00:04.120
Delete

01:00:05.160 --> 01:00:06.920
id传进去

01:00:06.940 --> 01:00:07.900
然后

01:00:07.900 --> 01:00:09.100
Z

01:00:09.100 --> 01:00:09.940
Z

01:00:09.940 --> 01:00:10.340
Zout

01:00:12.180 --> 01:00:14.020
嘿没啥事情可以做对吧

01:00:14.020 --> 01:00:15.620
它都没有参数啊

01:00:15.620 --> 01:00:16.900
这个Z里面是没有参数的

01:00:16.900 --> 01:00:17.740
因为

01:00:17.740 --> 01:00:18.620
为什么没有参数

01:00:18.620 --> 01:00:19.420
因为

01:00:19.420 --> 01:00:21.420
它这个删除完了过后得到是握以的啊

01:00:21.420 --> 01:00:22.420
得到是握以的

01:00:22.420 --> 01:00:23.780
什么都没有给你

01:00:23.780 --> 01:00:24.940
好这里我们直接输出

01:00:24.940 --> 01:00:26.220
删除成功

01:00:26.220 --> 01:00:27.020
删除

01:00:27.020 --> 01:00:28.380
成功

01:00:28.380 --> 01:00:29.700
啊试一下吧

01:00:29.700 --> 01:00:30.220
试一下

01:00:31.500 --> 01:00:31.820
保存

01:00:35.270 --> 01:00:36.550
等一下啊稍微等一下

01:00:36.550 --> 01:00:37.550
删除成功

01:00:37.570 --> 01:00:38.210
大家看一下啊

01:00:39.410 --> 01:00:40.330
好没有数据了

01:00:41.330 --> 01:00:41.850
好现在呢

01:00:41.850 --> 01:00:43.650
我们玩就完成了啥

01:00:43.650 --> 01:00:44.850
完成了

01:00:44.850 --> 01:00:45.250
真

01:00:46.170 --> 01:00:47.290
三

01:00:47.290 --> 01:00:48.370
改

01:00:48.370 --> 01:00:49.810
完成了这么三个方法

01:00:49.810 --> 01:00:51.170
那么之后呢

01:00:51.170 --> 01:00:54.010
我之后的对数据户的处理那一块就非常简单了

01:00:54.010 --> 01:00:55.930
我们直接去调用这些相应的方法就完成了

01:00:57.050 --> 01:00:57.850
那么现在呢

01:00:57.850 --> 01:00:59.970
还剩下查询

01:00:59.970 --> 01:01:01.610
还剩下查询

01:01:01.610 --> 01:01:03.370
查询的话

01:01:03.370 --> 01:01:04.370
我们这里呢

01:01:04.370 --> 01:01:06.170
可以写这么一个函数

01:01:07.650 --> 01:01:09.250
就是先查一个啊

01:01:09.250 --> 01:01:10.050
先查一个

01:01:12.250 --> 01:01:13.050
查的是什么呢

01:01:13.050 --> 01:01:14.250
比方说fan的啊

01:01:14.250 --> 01:01:14.650
fan的

01:01:15.610 --> 01:01:16.570
查一个

01:01:16.570 --> 01:01:18.970
根据id来查询

01:01:18.970 --> 01:01:20.570
根据id来查询

01:01:20.570 --> 01:01:23.370
或者叫做fan的by id

01:01:23.370 --> 01:01:24.650
fan的by id

01:01:25.650 --> 01:01:27.810
根据一个id来进行查询

01:01:27.810 --> 01:01:28.130
好

01:01:28.130 --> 01:01:29.650
反而或者是啥呢

01:01:29.650 --> 01:01:31.410
反而或者当然肯定是个promise

01:01:31.410 --> 01:01:33.370
只要是一步函数一定是promise

01:01:33.370 --> 01:01:34.330
不用想

01:01:34.330 --> 01:01:36.810
关键是你要思考一下promise里边是啥东西

01:01:36.830 --> 01:01:37.750
就是任务完成之后

01:01:37.750 --> 01:01:39.310
反复的是啥东西

01:01:39.310 --> 01:01:40.870
反复是不是就是个imv

01:01:40.870 --> 01:01:41.630
对不对

01:01:41.630 --> 01:01:42.870
就是个imv

01:01:42.870 --> 01:01:45.110
那么有没有可能为空呢

01:01:45.110 --> 01:01:46.550
当然有可能为空啊

01:01:46.550 --> 01:01:47.910
当然有可能为空

01:01:47.910 --> 01:01:49.230
所以说呢

01:01:49.230 --> 01:01:50.390
有可能是什么

01:01:50.390 --> 01:01:52.550
有可能是undefined

01:01:52.550 --> 01:01:53.790
什么都没找到

01:01:53.790 --> 01:01:54.950
空的

01:01:54.950 --> 01:01:56.390
有可能是undefined

01:01:56.390 --> 01:01:56.750
因此呢

01:01:56.750 --> 01:01:57.070
这里呢

01:01:57.070 --> 01:01:57.950
要考虑清楚啊

01:01:57.950 --> 01:01:59.630
有可能没有找到

01:01:59.630 --> 01:02:00.230
好

01:02:00.230 --> 01:02:01.670
我们这里查询怎么查呢

01:02:01.670 --> 01:02:02.710
这个很简单啊

01:02:02.710 --> 01:02:03.910
就是movie mode

01:02:03.910 --> 01:02:05.390
跟以前一样啊

01:02:05.390 --> 01:02:06.630
跟以前一样

01:02:06.650 --> 01:02:08.090
fender他本来就有一个函数

01:02:08.090 --> 01:02:09.690
叫fender by id

01:02:09.690 --> 01:02:11.130
本来就有这么一个函数

01:02:11.130 --> 01:02:12.770
你把id传进去

01:02:12.770 --> 01:02:14.130
你把id传进去

01:02:14.130 --> 01:02:15.890
剩下的事情不用管了啊

01:02:15.890 --> 01:02:17.490
跟你没什么关系了

01:02:17.490 --> 01:02:18.890
你传进去就行了

01:02:18.890 --> 01:02:19.890
那么他反而回的是啥呢

01:02:19.890 --> 01:02:21.450
他这里反回的是啊

01:02:21.450 --> 01:02:23.490
他这里反回的是啊

01:02:24.570 --> 01:02:25.090
看一下啊

01:02:25.090 --> 01:02:26.450
我这里

01:02:26.450 --> 01:02:28.170
整个这个函数

01:02:29.210 --> 01:02:30.930
反而回的是一个document

01:02:30.930 --> 01:02:32.050
document query

01:02:32.050 --> 01:02:33.610
可能是一个imv

01:02:33.610 --> 01:02:34.930
可能是一个imv

01:02:34.930 --> 01:02:36.010
可能是now

01:02:36.030 --> 01:02:37.030
我们把它

01:02:37.030 --> 01:02:38.550
而位置一下啊

01:02:38.550 --> 01:02:39.910
等待一下

01:02:39.910 --> 01:02:41.070
等待他完成

01:02:41.070 --> 01:02:42.030
而位置

01:02:42.030 --> 01:02:43.470
我们看一下他反回结果

01:02:43.470 --> 01:02:44.630
constresult

01:02:46.790 --> 01:02:47.750
看一下

01:02:47.750 --> 01:02:48.470
要么是imv

01:02:48.470 --> 01:02:49.190
要么是now

01:02:49.190 --> 01:02:49.950
他是用到now

01:02:49.950 --> 01:02:51.230
那我们也用now吧

01:02:51.230 --> 01:02:52.630
不然的话要进行转换

01:02:52.630 --> 01:02:53.670
麻烦了

01:02:53.670 --> 01:02:55.230
我们只也用now

01:02:55.230 --> 01:02:57.190
那么直接反回就完事了

01:02:57.190 --> 01:02:58.030
这个没什么好说的

01:02:59.310 --> 01:03:00.630
fender by id

01:03:00.630 --> 01:03:01.870
我就不用去测试了啊

01:03:01.870 --> 01:03:03.070
不用去测试了

01:03:03.070 --> 01:03:04.070
我们测试一下吧

01:03:04.070 --> 01:03:05.230
还是测试一下

01:03:05.290 --> 01:03:06.090
好刚才

01:03:06.090 --> 01:03:06.490
哎呦

01:03:06.490 --> 01:03:08.090
刚才我应该做添加对吧

01:03:08.090 --> 01:03:10.250
添加把个海数不要删掉

01:03:10.250 --> 01:03:11.370
添加一个吧

01:03:11.370 --> 01:03:12.490
添加一个

01:03:12.490 --> 01:03:14.010
流量地球

01:03:15.850 --> 01:03:17.890
这里我们刚才使用add

01:03:17.890 --> 01:03:20.550
添加

01:03:20.550 --> 01:03:24.340
添加

01:03:24.340 --> 01:03:25.740
这里

01:03:25.740 --> 01:03:26.540
n 传进去

01:03:28.100 --> 01:03:31.980
删除注视量

01:03:31.980 --> 01:03:33.020
看一下啊

01:03:33.020 --> 01:03:34.620
首先是time and now

01:03:34.620 --> 01:03:35.780
time and now

01:03:35.780 --> 01:03:38.980
好像是120分钟

01:03:38.980 --> 01:03:40.340
120分钟

01:03:40.340 --> 01:03:43.480
然后呢是reals

01:03:43.480 --> 01:03:44.480
上映地区

01:03:44.480 --> 01:03:46.760
中国大陆啊

01:03:46.760 --> 01:03:48.040
然后美国

01:03:49.200 --> 01:03:49.640
然后呢

01:03:49.640 --> 01:03:51.800
还有是caps

01:03:51.800 --> 01:03:54.920
内详内详是灾难篇

01:03:54.920 --> 01:03:57.920
灾难灾难

01:03:57.920 --> 01:03:59.360
然后是科幻

01:04:01.520 --> 01:04:01.840
科幻

01:04:02.880 --> 01:04:03.240
好

01:04:03.240 --> 01:04:05.120
然后呢是

01:04:05.120 --> 01:04:07.040
地区内询还有啥呢

01:04:07.040 --> 01:04:07.960
我不要忘记了

01:04:07.960 --> 01:04:09.000
没关系让他添

01:04:09.000 --> 01:04:09.840
让他添加

01:04:09.900 --> 01:04:10.740
如果出了问题的话

01:04:10.740 --> 01:04:12.020
自然会自然会告诉我

01:04:12.020 --> 01:04:12.500
有问题

01:04:14.140 --> 01:04:15.820
稍微等一下啊

01:04:15.820 --> 01:04:16.860
添加成功

01:04:16.860 --> 01:04:17.980
添加数据库成功

01:04:19.420 --> 01:04:20.100
添加成功之后

01:04:20.100 --> 01:04:21.340
我们打印出来的对象

01:04:21.340 --> 01:04:22.340
打印出来的对象

01:04:22.340 --> 01:04:23.420
我们看一下数据库

01:04:23.420 --> 01:04:24.140
啊

01:04:24.140 --> 01:04:25.820
看一下数据库

01:04:25.820 --> 01:04:26.900
有一条数据添加成功了

01:04:29.060 --> 01:04:29.540
这数据

01:04:31.540 --> 01:04:32.420
那么现在呢

01:04:32.420 --> 01:04:34.060
我们来做查询

01:04:34.060 --> 01:04:34.660
来做查询

01:04:34.660 --> 01:04:35.660
看到他的id是多少

01:04:36.480 --> 01:04:37.560
ad

01:04:38.920 --> 01:04:40.440
id复制过来

01:04:41.640 --> 01:04:42.920
然后这边

01:04:42.920 --> 01:04:43.400
啊

01:04:43.400 --> 01:04:45.480
我们这边上面注释掉了啊

01:04:45.480 --> 01:04:46.880
测试的代码注释掉了

01:04:46.880 --> 01:04:48.760
好像我们做一下查询啊

01:04:48.760 --> 01:04:49.960
movie

01:04:49.960 --> 01:04:50.800
service

01:04:50.800 --> 01:04:52.600
fan的版id

01:04:52.600 --> 01:04:53.440
id传进去

01:04:53.440 --> 01:04:54.640
看能不能把查出来

01:04:54.640 --> 01:04:55.760
ZIN

01:04:55.760 --> 01:04:56.880
result

01:04:56.880 --> 01:04:58.440
查出来

01:04:58.440 --> 01:05:00.040
console log

01:05:00.040 --> 01:05:00.600
result

01:05:04.670 --> 01:05:05.510
保存

01:05:05.510 --> 01:05:08.860
看能不能查出来啊

01:05:09.000 --> 01:05:10.680
稍微等一下啊

01:05:10.680 --> 01:05:11.280
查出来了

01:05:11.280 --> 01:05:12.320
表示没问题

01:05:12.320 --> 01:05:13.760
那如果我id写错了

01:05:13.760 --> 01:05:15.280
或者是这个id不存在

01:05:15.280 --> 01:05:15.960
再查一下

01:05:18.000 --> 01:05:19.000
我把a改成b了

01:05:21.120 --> 01:05:23.200
说明这个还是没问题的

01:05:23.200 --> 01:05:25.080
这是查询一个

01:05:25.080 --> 01:05:27.280
那么现在真杉改查是会做完了

01:05:27.280 --> 01:05:28.560
就做完了

01:05:28.560 --> 01:05:29.680
你看有兵起了

01:05:29.680 --> 01:05:31.360
做的非常的稳健

01:05:31.360 --> 01:05:32.560
有了验证

01:05:32.560 --> 01:05:33.200
有了验证

01:05:33.200 --> 01:05:34.960
那就不容易出错了

01:05:34.960 --> 01:05:36.360
不仅在编译的情况下

01:05:36.360 --> 01:05:38.680
我们代码不会不容易写错

01:05:38.680 --> 01:05:42.580
而且呢在运行的过程中有了验证

01:05:42.580 --> 01:05:43.660
有了这个库

01:05:43.660 --> 01:05:44.740
有了这两个库

01:05:44.740 --> 01:05:46.100
来帮我们完成验证

01:05:46.100 --> 01:05:47.900
也不容易出错

01:05:47.900 --> 01:05:50.740
那么做了一个非常稳健的服务器出来啊

01:05:50.740 --> 01:05:51.420
做完了之后呢

01:05:51.420 --> 01:05:53.020
现在还差一个东西

01:05:53.020 --> 01:05:54.620
就是根据条件

01:05:54.620 --> 01:05:56.220
查询多个

01:05:56.220 --> 01:05:58.100
大家可以想一想啊

01:05:58.100 --> 01:06:00.060
查询多部电影

01:06:00.060 --> 01:06:02.100
多个数据应该怎么来处理

01:06:02.100 --> 01:06:03.900
大家可以想一想啊

01:06:03.900 --> 01:06:05.260
我们这里可能先到这里

01:06:05.260 --> 01:06:07.180
我们下节课再来讲

01:06:07.240 --> 01:06:09.800
查询多个如何来处理

01:06:09.800 --> 01:06:10.840
因为查多个的话

01:06:10.840 --> 01:06:12.560
你要告诉一些条件对吧

01:06:12.560 --> 01:06:14.040
想一想啊怎么来处理

01:06:14.040 --> 01:06:14.880
好我们这一刻呢

01:06:14.880 --> 01:06:16.360
先到此结束

01:06:16.360 --> 01:06:17.520
OK啊

01:06:17.520 --> 01:06:18.600
大家好好理解啊

01:06:18.600 --> 01:06:19.920
跟着写一遍

01:06:19.920 --> 01:06:21.360
好啊

01:06:21.360 --> 01:06:22.060
就这样吧

01:06:22.060 --> 01:06:22.560
拜拜

