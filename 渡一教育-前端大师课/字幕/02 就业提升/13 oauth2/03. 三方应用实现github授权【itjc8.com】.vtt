WEBVTT

00:00.240 --> 00:04.340
各位同学 大家好 这期课呢 我们就通过上几课学的

00:05.360 --> 00:10.220
Also2授权的相关的一个知识来完成一个三方应用

00:10.480 --> 00:13.300
通过github账号登录的这样一个案例

00:13.800 --> 00:16.620
那我们首先明确一下它的这个实现原理

00:17.140 --> 00:20.980
其实呢 我们上几课就已经知道所谓的第三方登录

00:21.240 --> 00:24.300
实质上就是一个Also授权的这么一个过程

00:25.320 --> 00:27.640
如果说用户想要登录github网站

00:28.140 --> 00:29.160
那么github网站呢

00:29.160 --> 00:33.000
首先让用户提供第三方的一个网站数据来证明自己的身份

00:33.520 --> 00:37.860
获取到第三方网站的一个身份数据就需要Also的一个授权

00:38.380 --> 00:41.200
那实现流程呢 其实大概分了这几步

00:41.460 --> 00:43.240
然后这里面呢给大家画了一张图

00:43.760 --> 00:47.340
这个图里面其实是有前端来实现的 也有后端

00:47.600 --> 00:50.400
比如说我这个应用服务来做的操作

00:50.660 --> 00:54.000
包括github的一些账号的一个登录信息

00:54.240 --> 00:56.800
然后也就是说同一授权这么一个过程

00:57.580 --> 00:58.340
是什么样的呢

00:58.540 --> 00:59.300
跟大家说一下

00:59.820 --> 01:05.200
首先呢A网站啊 此时呢我们这个里面暂且把我们一会要实现案例的这个应用

01:05.460 --> 01:07.000
作为A网站来说啊

01:07.260 --> 01:10.060
A网站让用户跳转到github

01:10.060 --> 01:12.380
发起一个认证的请求

01:12.620 --> 01:13.400
然后呢

01:13.660 --> 01:17.500
我们啊 将这个请求重定向到github网站

01:17.740 --> 01:19.540
也就是说其实这个地址请求呢

01:19.800 --> 01:22.620
可能是在我这个当前服务里来完成的

01:22.880 --> 01:27.220
但是呢 我由后台的服务直接把这个地址跳转到github上

01:27.680 --> 01:31.980
然后呢github通过这个地址打开一个登录界面

01:32.240 --> 01:33.980
然后在这个登录界面里面呢

01:34.240 --> 01:39.720
他来明确一点是否允许这个三方应用进行授权的一些操作

01:39.980 --> 01:42.280
如果说他同意的话 那这时候呢

01:42.280 --> 01:45.220
他就给我返回一个什么扣的职

01:45.340 --> 01:48.160
并且呢重定向到我们这个A网站

01:48.680 --> 01:50.720
重定向到A网站之后

01:51.140 --> 01:53.920
他因为发送给我们一个授权码

01:53.960 --> 01:55.440
我们拿到这个授权码

01:55.700 --> 02:00.320
直接再进行github请求令牌的这么一个请求处理

02:00.580 --> 02:03.900
然后呢github检测之后 返回给我们令牌

02:04.160 --> 02:05.440
当我们拿到令牌之后

02:05.700 --> 02:10.560
我们就可以向github真正的请求一些用户的数据

02:10.820 --> 02:13.640
那么整个流程呢 就是这几步来实现的

02:13.900 --> 02:14.400
我们呢

02:14.660 --> 02:17.480
一会呢 就把整个的这个内容来做一下

02:17.740 --> 02:20.540
这个呢 就是他整个的一个实现原理

02:20.760 --> 02:22.800
其实呢 我们接下来要做的

02:22.800 --> 02:23.560
也就是说

02:23.820 --> 02:26.900
通过代码的形式把这个里面的几个步骤

02:27.160 --> 02:29.200
我们给他跑一下就ok了

02:29.460 --> 02:31.000
那么首先我们知道

02:31.240 --> 02:33.300
他这个里面是有一个A网站

02:33.300 --> 02:35.860
也就是说我们一定得创建一个应用

02:35.860 --> 02:37.900
所以说呢 那我们实现流程第一步

02:37.900 --> 02:40.980
就是必须得有一个自己的这个应用服务

02:41.740 --> 02:43.520
那么这个应用服务啊 其实

02:43.780 --> 02:45.580
我这里啊 已经给大家写好了

02:45.580 --> 02:48.660
这里面呢 创建了一个note的一个服务

02:49.060 --> 02:51.780
我们在这个里面打开index.js

02:52.340 --> 02:54.380
然后呢 这里面定义好了静态文件

02:54.620 --> 02:56.420
包括我们的这个模板文件啊

02:56.420 --> 02:59.580
模板文件我放在这个vius文件下面 非常简单

03:00.020 --> 03:01.980
只有一个login以及home

03:01.980 --> 03:03.740
然后atmi文件

03:04.060 --> 03:06.820
然后呢 public下面存放了一些图片

03:06.820 --> 03:08.780
包括这个cfd的样式啊

03:09.140 --> 03:11.540
其实只有一个登入界面和一个home界面

03:11.780 --> 03:14.620
然后呢 我们跑起这个3000端口就可以了

03:14.820 --> 03:16.500
首先呢 我把这个服务跑起来啊

03:17.060 --> 03:18.660
跑起来之后呢 这个里面

03:18.660 --> 03:19.820
同学们要保证一点

03:19.820 --> 03:22.660
就是把这个note的models啊 提前下来一下

03:23.020 --> 03:26.100
因为这个eline啊 我已经在这个里面给大家准备好了

03:26.100 --> 03:28.660
非常简单啊 只有一个excel eds

03:28.660 --> 03:30.620
包括一个color的一个简单应用

03:31.020 --> 03:33.660
首先呢 我们第一步要把这个静态文件

03:33.660 --> 03:35.860
也就是说我们这个模板要给处理一下

03:35.860 --> 03:38.020
对不对 那也就是说模板处理啊

03:39.420 --> 03:40.740
模板路由处理

03:40.740 --> 03:43.460
那首先模板路由处理 处理哪几个模板

03:43.540 --> 03:47.740
第一个就是啊 我们要把这个logan和home来进行一下显示

03:47.740 --> 03:51.980
也就是说 我们第一步router.get

03:51.980 --> 03:55.860
那get这个路径 假如说我们要是logan的话

03:55.860 --> 03:59.500
那我这个里面就给它来进行一个渲染

03:59.500 --> 04:03.460
所以说那我这里面avaitctx.render

04:03.460 --> 04:05.580
直接的渲染logan就ok了

04:05.580 --> 04:07.860
那我们来看一眼啊 是否可以

04:07.860 --> 04:09.300
我们打开瀏覽器

04:09.300 --> 04:12.020
首先呢 localhost 3000

04:12.100 --> 04:13.940
ok 3000没有 是因为什么

04:13.940 --> 04:16.700
我们定义的路由是不是这个logan 对吧

04:16.700 --> 04:18.140
所以说呢 我在这里面

04:18.140 --> 04:19.580
localhost 3000logan

04:19.580 --> 04:20.660
这样就可以了

04:20.660 --> 04:21.780
这是第一步

04:21.780 --> 04:24.980
我们开启了一个3000的应用啊

04:24.980 --> 04:26.740
当我们开启这个3000应用之后呢

04:26.740 --> 04:28.300
这样啊 我们同时呢

04:28.300 --> 04:31.020
再把这个home来给进行一下开启

04:32.740 --> 04:34.100
home进行开启

04:34.100 --> 04:36.860
同样的 我让它去渲染我们的home

04:36.860 --> 04:38.860
那给大家看一下home是什么样子的啊

04:39.740 --> 04:43.100
同样的 我们打开localhost的3000之后呢

04:43.100 --> 04:45.340
后面是跟这个home的路径

04:45.340 --> 04:47.460
其实我们要做的是非常简单的

04:47.460 --> 04:48.340
怎么做呢

04:48.340 --> 04:49.980
这里面有传统的登录方式

04:49.980 --> 04:50.620
但是这个呢

04:50.620 --> 04:51.980
我们是不需要实现的

04:51.980 --> 04:53.140
我们实现什么呢

04:53.140 --> 04:57.060
我们点击这个get hub的一个账户进行登录

04:57.060 --> 04:57.860
那这样呢

04:57.860 --> 04:59.900
给我们跳转到get hub

04:59.900 --> 05:01.500
跳转到get hub之后呢

05:01.500 --> 05:04.860
它来给我们进行一个授权码的一个返回

05:04.860 --> 05:07.500
我们拿到这个授权码再去请求令牌

05:07.540 --> 05:09.100
请求完令牌之后

05:09.100 --> 05:09.660
然后呢

05:09.660 --> 05:13.700
我们根据这个令牌存放在我们的这个hiders里面

05:13.700 --> 05:16.940
然后再重新的进行用户信息的获取

05:16.940 --> 05:18.820
当获取完用户信息之后

05:18.820 --> 05:22.060
我们直接的跳转到这个聊天室见面

05:22.060 --> 05:23.740
聊天室见面我们做什么

05:23.740 --> 05:25.700
因为这些都是静态数据

05:25.700 --> 05:26.300
所以说呢

05:26.300 --> 05:28.340
同学们不要纠结左面这一部分

05:28.340 --> 05:31.380
我们只要把它的这个用户头像

05:31.380 --> 05:34.740
也就是说这个avata和这个用户的这个泥叉

05:34.740 --> 05:36.660
给它添加进来

05:36.700 --> 05:39.220
那这个案例基本上就OK了

05:39.220 --> 05:39.780
所以说呢

05:39.780 --> 05:41.740
其实我们现在已经完成了

05:41.740 --> 05:43.340
实现流程里面的第一步

05:43.340 --> 05:45.620
我们创建了一个本地应用服务

05:46.620 --> 05:47.260
那之后呢

05:47.260 --> 05:51.140
我们接下来就要开始做这种应用的一个登记

05:51.140 --> 05:52.100
为什么做登记

05:52.100 --> 05:57.220
因为你首先得让get hub明确是谁来要进行

05:57.220 --> 05:58.980
也就是说哪三方

05:58.980 --> 06:02.820
这个三方是谁来进行我这个账户

06:02.820 --> 06:06.420
也就是说get hub的账户的一个信息的一个获取

06:06.740 --> 06:07.220
其实呢

06:07.220 --> 06:08.580
上几课我们也说到了

06:08.580 --> 06:11.540
不管是四种授权方式中的哪一种

06:11.540 --> 06:13.660
比如说我们这种授权码的形式

06:13.660 --> 06:15.180
或者是我们密码的形式

06:15.180 --> 06:16.660
以及其他两种形式

06:16.660 --> 06:19.900
我们首先如果说要实现这种三方应用

06:19.900 --> 06:23.180
跳转到这种get hub进行一个数据获取的话

06:23.180 --> 06:26.060
那一定是先要有一个应用登记

06:26.060 --> 06:26.860
这么一个过程

06:26.860 --> 06:29.420
也就是说我们上几课说的这种备案的形式

06:29.420 --> 06:30.180
为什么这么做

06:30.180 --> 06:33.220
其实就是为了让get hub认识你

06:33.220 --> 06:35.020
那我们现在其实是要做什么呢

06:35.060 --> 06:39.060
首先我们在本地创建了一个3000的这个应用服务

06:39.060 --> 06:39.580
所以说呢

06:39.580 --> 06:43.380
我们是需要将这个应用服务在get hub上做一个备案

06:44.420 --> 06:44.860
所以说呢

06:44.860 --> 06:48.060
我在这里面给大家写成了直接这里面有地址

06:48.060 --> 06:49.100
那你打开链接

06:49.100 --> 06:52.220
ok 直接就跳转了这个get hub上地址了

06:52.220 --> 06:53.100
那怎么来做呢

06:53.100 --> 06:54.300
首先第一点

06:54.300 --> 06:56.700
你要保证你是一个登录的状态

06:56.700 --> 06:59.340
也就是说你在自己的用户下面

06:59.340 --> 07:01.060
来完成这个操作的

07:01.060 --> 07:02.780
而不是说其他的用户

07:02.780 --> 07:03.980
那怎么来实现呢

07:04.020 --> 07:05.060
在这个里面

07:05.060 --> 07:07.540
我们点击右上角的这一块

07:07.540 --> 07:08.860
那右上角的这一块呢

07:08.860 --> 07:11.500
直接在这里面有一个settings

07:11.500 --> 07:12.700
点击settings

07:12.700 --> 07:13.820
跳转过来之后

07:13.820 --> 07:17.260
这里面有一个developer settings

07:17.260 --> 07:20.020
也就是说我们的一个开发设置

07:20.020 --> 07:20.540
然后呢

07:20.540 --> 07:22.660
我们点击这个开发设置

07:22.660 --> 07:23.700
这个里面呢

07:23.700 --> 07:26.780
有这个also的一个apps

07:26.780 --> 07:27.340
所以说呢

07:27.340 --> 07:30.780
我们直接的点击这个also的这个apps

07:30.780 --> 07:32.060
点击它之后

07:32.100 --> 07:33.740
这里面会提示我们

07:33.740 --> 07:35.220
no also application

07:35.220 --> 07:37.940
也就是说没有这种授权营用

07:37.940 --> 07:38.980
所以说我们怎么办呢

07:38.980 --> 07:40.260
我们在这个底下

07:40.260 --> 07:41.660
如果说你注册过之后

07:41.660 --> 07:43.220
这里面是会有一个应用的

07:43.220 --> 07:43.540
当然了

07:43.540 --> 07:45.060
我给大家背了方便啊

07:45.060 --> 07:48.020
我把我之前注册的应用给删除掉了

07:48.020 --> 07:50.180
那我们就一起来实现一下啊

07:50.180 --> 07:51.260
这个里面呢

07:51.260 --> 07:53.260
我们直接使用这个

07:53.260 --> 07:54.980
renders的new application

07:54.980 --> 07:57.820
也就是说重新的申请一个应用

07:57.820 --> 07:59.020
大家这里面

07:59.020 --> 08:01.100
马上就出现了一个表单

08:01.100 --> 08:01.980
那这个表单呢

08:01.980 --> 08:04.860
就是说对于我们整个的这个

08:04.860 --> 08:07.500
想做授权的应用的一个描述

08:07.500 --> 08:08.300
那首先呢

08:08.300 --> 08:10.620
他有几个点啊

08:10.620 --> 08:12.180
同学们要知道一下

08:12.180 --> 08:13.340
这个apps

08:13.340 --> 08:15.100
我们可以随便添一下

08:15.100 --> 08:16.100
这个到无所谓的

08:16.100 --> 08:17.100
比如说我们添

08:17.100 --> 08:18.700
tests的also

08:19.860 --> 08:20.300
ok

08:20.300 --> 08:21.060
添完之后呢

08:21.060 --> 08:22.380
这里面有一个home

08:22.380 --> 08:22.780
page

08:22.780 --> 08:23.540
url

08:23.540 --> 08:24.500
这个添什么

08:24.500 --> 08:27.100
其实我在这个本地也开开的是这个

08:27.100 --> 08:29.100
adb localhost的3000

08:29.100 --> 08:29.660
所以说呢

08:29.660 --> 08:33.260
我就把这个adb localhost的3000添上几个

08:33.260 --> 08:35.740
也就是说http

08:35.740 --> 08:37.300
localhost

08:37.300 --> 08:38.980
tmr 3000

08:38.980 --> 08:40.500
作为我们的这个

08:40.500 --> 08:41.980
请求的一个地址啊

08:41.980 --> 08:43.420
也就是说跟路件

08:43.420 --> 08:45.940
localhost的也应用的跟路件

08:45.940 --> 08:46.460
之后呢

08:46.460 --> 08:49.580
这里面是一个我们应用的description

08:49.580 --> 08:50.380
描述啊

08:50.380 --> 08:50.780
然后呢

08:50.780 --> 08:51.900
我们这里面随便写

08:51.900 --> 08:53.180
比如说测试啊

08:53.180 --> 08:55.980
然后授权过程

08:55.980 --> 08:57.140
随便写一点

08:57.140 --> 08:57.820
这里面啊

08:57.820 --> 09:00.460
有一个什么的authorization callback

09:00.460 --> 09:01.380
url

09:01.380 --> 09:02.660
那这个是个啥东西啊

09:02.660 --> 09:04.500
其实我们上几个一直说

09:04.500 --> 09:06.540
就是我们在请求的时候啊

09:06.540 --> 09:08.020
比如说我们获取授权码

09:08.020 --> 09:08.780
或者是呢

09:08.780 --> 09:11.100
我们获取这个令牌的时候

09:11.100 --> 09:13.900
我们都会有一个回调的地址

09:13.900 --> 09:15.300
那这个回调的地址呢

09:15.300 --> 09:17.940
其实就是我们啊

09:17.940 --> 09:19.420
想让他授权

09:19.420 --> 09:21.060
比如说我们授权码啊

09:21.060 --> 09:22.260
获取完成之后

09:22.260 --> 09:24.740
他给我们也就是说github

09:24.740 --> 09:26.060
给我们跳转到

09:26.060 --> 09:28.060
我们localhost的3000的地址

09:28.060 --> 09:28.740
所以说呢

09:28.740 --> 09:29.420
这个地址

09:29.420 --> 09:30.300
我们得添一下

09:30.300 --> 09:31.020
那我们怎么添

09:31.020 --> 09:33.220
我们可以http

09:33.220 --> 09:34.220
local

09:34.220 --> 09:35.820
这个就是我们自己定义的了

09:35.820 --> 09:38.100
localhost的marhar 3000

09:38.100 --> 09:38.740
然后路径呢

09:38.740 --> 09:39.620
我们随便写

09:39.620 --> 09:42.500
比如说我们callback

09:42.500 --> 09:43.180
然后呢

09:43.180 --> 09:44.820
直接的gith

09:44.820 --> 09:46.780
好吧github callback

09:46.780 --> 09:47.900
或者是github

09:47.900 --> 09:49.580
callback callback github

09:49.580 --> 09:50.340
都ok啊

09:50.340 --> 09:50.620
当然了

09:50.620 --> 09:53.100
你指定好这个路由之后

09:53.100 --> 09:55.220
那你本地一定得有这个

09:55.260 --> 09:55.780
也就是说

09:55.780 --> 09:56.940
你这个应用服务里面

09:56.940 --> 09:58.420
是一定得有这个地址的

09:58.420 --> 09:59.300
否则呢

09:59.300 --> 10:00.820
如果说没有的话

10:00.820 --> 10:02.380
github是找不到你这个地址的

10:02.380 --> 10:03.940
因为他这个授权码

10:03.940 --> 10:05.300
是要通过这个地址

10:05.300 --> 10:08.300
来给你进行返回的啊

10:08.300 --> 10:09.740
那我们创建完成之后呢

10:09.740 --> 10:12.500
这里面就点击renters的application

10:12.500 --> 10:15.420
也就是说给他做一个注册

10:15.420 --> 10:15.780
ok

10:15.780 --> 10:16.500
这个里面呢

10:16.500 --> 10:17.420
就注册完成了

10:17.420 --> 10:18.860
那注册完成之后

10:18.860 --> 10:20.460
这里面还有一个问题

10:20.460 --> 10:22.260
就是说什么呢

10:22.260 --> 10:24.780
我们这里面有了一个client id

10:24.820 --> 10:27.140
也就是说我们本个应用的

10:27.140 --> 10:28.380
也就是说

10:28.380 --> 10:31.540
唯一的一个标识在github里面

10:31.540 --> 10:32.860
这个标识有了之后

10:32.860 --> 10:34.340
我们还得有一个密钥

10:34.340 --> 10:36.820
也就是说client securities

10:36.820 --> 10:37.460
在这里面呢

10:37.460 --> 10:40.420
我们可以generator new client securities

10:40.420 --> 10:42.300
生成一个我们的这个密钥

10:42.300 --> 10:43.340
密钥做什么用

10:43.340 --> 10:46.420
密钥就是在我们获取令牌的时候

10:46.420 --> 10:47.940
把它和client id

10:47.940 --> 10:51.260
同时传给我们的这个github

10:51.260 --> 10:51.660
然后呢

10:51.660 --> 10:54.740
这样由github来进行一个身份的确认

10:54.780 --> 10:55.380
如果可以

10:55.380 --> 10:57.740
他就给我们返回这个令牌

10:57.740 --> 10:58.060
ok

10:58.060 --> 10:59.300
那我点击一下

10:59.300 --> 11:00.900
生成一个generator

11:00.900 --> 11:02.620
new client securities

11:02.620 --> 11:03.380
那这样呢

11:03.380 --> 11:04.740
我们这个密钥

11:04.740 --> 11:08.540
以及我们的这个应用的id标识就有了

11:08.540 --> 11:09.260
有了之后呢

11:09.260 --> 11:13.020
我们下一步就可以来实现整个的其他的

11:13.020 --> 11:14.180
接下来流程了啊

11:15.780 --> 11:16.100
好的

11:16.100 --> 11:17.020
那接下来呢

11:17.020 --> 11:19.540
我们就使用这种代码的形式

11:19.540 --> 11:20.420
来实现一下

11:20.420 --> 11:22.460
因为我们现在有了这个client id

11:22.460 --> 11:24.580
包括这个client securities

11:24.580 --> 11:25.020
密钥

11:25.020 --> 11:28.460
那我们直接的就来进行这个请求

11:28.460 --> 11:29.060
就发送

11:29.060 --> 11:30.260
就ok了啊

11:30.260 --> 11:30.660
然后呢

11:30.660 --> 11:31.980
我们打开编辑啊

11:31.980 --> 11:33.180
在打开编辑之前呢

11:33.180 --> 11:35.140
其实在这里面跟大家说一下

11:35.140 --> 11:36.460
我们这个代码实验呢

11:36.460 --> 11:38.620
主要就是由这几部分来完成的

11:38.620 --> 11:39.420
首先呢

11:39.420 --> 11:42.940
我们前前段进行登录地址的一个创建

11:42.940 --> 11:44.660
那登录地址指的是哪一个

11:44.660 --> 11:47.100
在这里已经给大家写好了

11:47.100 --> 11:51.460
就是我们这里面使用一个github的一个账户进行登录

11:51.460 --> 11:52.740
那在这个登录的时候

11:52.740 --> 11:54.060
因为之前我们也说过了

11:54.060 --> 11:55.180
第一次登录的时候

11:55.180 --> 11:58.060
我们一定要写在一个client id

11:58.060 --> 11:58.980
那在这个里面呢

11:58.980 --> 12:00.140
给大家也描述清楚了

12:00.140 --> 12:01.580
就是说我们这个里面

12:01.580 --> 12:03.340
有一个请求方法为gith的

12:03.340 --> 12:05.300
我们要带一个client id

12:05.300 --> 12:06.620
client id是哪一个

12:06.620 --> 12:10.660
就是我们刚才在这个里面生成的这个client id

12:10.660 --> 12:10.980
ok

12:10.980 --> 12:12.620
那我们就来实现一下啊

12:12.620 --> 12:14.180
那这client id在哪儿写

12:14.180 --> 12:15.460
我们直接打开login

12:15.460 --> 12:17.820
login这里面有一个alieng

12:17.820 --> 12:19.020
alieng里面

12:19.020 --> 12:19.900
这个里面呢

12:19.900 --> 12:23.420
我们会有一个login by github

12:23.420 --> 12:24.380
有这样一个地址

12:24.380 --> 12:27.020
那有一个login by github地址呢

12:27.020 --> 12:29.060
那我们在这个路由里面

12:29.060 --> 12:30.580
把这个给定义一下

12:30.580 --> 12:32.660
也就是说在我们自己的应用里

12:32.660 --> 12:34.380
把它给做一个处理

12:34.380 --> 12:35.340
首先第一步

12:35.340 --> 12:37.500
我们这个蓝结

12:37.500 --> 12:38.340
这是什么

12:38.340 --> 12:41.940
蓝结前端的一个alieng跳转

12:41.940 --> 12:49.790
前端的alieng跳转

12:49.790 --> 12:51.190
那我们怎么蓝结

12:51.190 --> 12:53.270
其实就是router.get

12:53.270 --> 12:54.070
非常简单

12:54.070 --> 12:55.790
直接在这里面反斜杠

12:55.790 --> 13:00.110
然后sync cdx之后呢

13:00.110 --> 13:02.150
我们直接拿到这个地址之后

13:02.150 --> 13:03.230
我们什么都不做

13:03.230 --> 13:08.270
ctx.redirect让它做一个跳转

13:08.270 --> 13:09.270
那跳转呢

13:09.270 --> 13:10.390
比如说我们在这个里面

13:10.390 --> 13:12.110
让它跳转哪个地址

13:12.110 --> 13:14.430
地址我在这里面可以定一个什么呢

13:14.430 --> 13:15.750
pass对吧

13:15.750 --> 13:16.550
那我们在这里面

13:16.550 --> 13:19.910
const pass等于一个什么地址

13:19.910 --> 13:20.910
等于这个地址呢

13:20.910 --> 13:23.150
其实就是我们在这里面

13:23.150 --> 13:24.190
已经给大家写好了

13:24.190 --> 13:24.710
第一个

13:24.710 --> 13:27.150
我们要获取受签码的一个用户地址

13:27.150 --> 13:28.590
也就是说这个地址

13:28.590 --> 13:31.270
我们给它粘贴过去

13:31.270 --> 13:32.430
粘贴过去之后啊

13:32.430 --> 13:34.510
并且这个地址呢

13:34.510 --> 13:35.830
它首先第一

13:35.830 --> 13:37.350
它需要我们传一个参数

13:37.350 --> 13:39.110
叫clant id

13:39.110 --> 13:41.550
以这种clant下滑线id的形式

13:41.550 --> 13:43.190
那我就写一下

13:43.190 --> 13:46.270
传参数clant下滑线id

13:46.270 --> 13:47.270
等于一个值

13:47.270 --> 13:48.870
那这个id值是哪一个值

13:48.870 --> 13:51.430
就是我们在这个里面

13:51.430 --> 13:53.030
生成的这个clant id

13:53.030 --> 13:54.630
我们给它做一个复制

13:54.630 --> 13:56.430
这是我们的这个第一步

13:56.430 --> 13:59.150
把clant id给它传过去

13:59.150 --> 14:00.830
const pass之后呢

14:00.830 --> 14:03.710
我们重定向到这个pass里面

14:03.710 --> 14:04.550
那这样啊

14:04.550 --> 14:06.870
其实我们大家可以想一下

14:06.870 --> 14:09.070
如果说我现在

14:09.070 --> 14:10.310
去点击这个登录

14:10.310 --> 14:11.630
当然这个先不考虑啊

14:11.630 --> 14:12.790
我们点击这个登录

14:12.790 --> 14:13.430
其实呢

14:13.430 --> 14:15.990
它是先走到我们的这个

14:15.990 --> 14:16.790
自己应用的

14:16.790 --> 14:18.830
后端的这个指定路路地址里面

14:18.830 --> 14:19.390
然后呢

14:19.390 --> 14:21.390
我们重新整理了一个pass

14:21.390 --> 14:22.270
根据这个pass

14:22.270 --> 14:23.790
我们给它redirect

14:23.790 --> 14:25.270
这个当前的pass

14:25.270 --> 14:25.870
也就是说

14:25.870 --> 14:27.190
那这样操作之后

14:27.190 --> 14:29.310
它其实就是跳转到了

14:29.310 --> 14:30.750
get hub指定的地址

14:30.750 --> 14:31.310
对不对

14:31.310 --> 14:31.830
这个呢

14:31.830 --> 14:33.430
同学们要知道一下

14:33.430 --> 14:33.670
好的

14:33.670 --> 14:34.390
那现在呢

14:34.390 --> 14:35.670
我们就来点击一下

14:35.670 --> 14:36.750
点击我们都知道

14:36.750 --> 14:38.790
它会跳转到get hub上

14:38.790 --> 14:41.030
因为我们这里面已经做了这种

14:41.030 --> 14:43.470
get hub的一个拦截啊

14:43.470 --> 14:43.830
ok

14:43.830 --> 14:44.910
那来实现一下

14:44.910 --> 14:46.590
首先我点击

14:46.590 --> 14:47.310
点击之后

14:47.310 --> 14:48.270
ok过来了

14:48.270 --> 14:48.910
过来之后

14:48.910 --> 14:49.590
这个里面呢

14:49.590 --> 14:50.390
有两个logo

14:50.390 --> 14:51.550
一个是get hub的

14:51.550 --> 14:52.030
一个呢

14:52.030 --> 14:53.070
就是我们的

14:53.070 --> 14:54.230
我们这个是因为什么呢

14:54.230 --> 14:57.150
刚才我们做这个应用配置的时候

14:57.150 --> 14:58.510
其实是没添加logo的

14:58.510 --> 14:59.070
所以说呢

14:59.070 --> 15:00.750
他给了一个位置图标

15:00.750 --> 15:01.870
这个里面是啥意思呢

15:01.870 --> 15:03.630
就是现在啊

15:03.630 --> 15:05.270
get hub接收到了我们

15:05.270 --> 15:09.350
要获取这个授权码的这么一个请求

15:09.350 --> 15:12.190
那如果说我要点击了这个console呢

15:12.190 --> 15:12.870
这次请求

15:12.870 --> 15:13.990
那就算game over了

15:13.990 --> 15:15.270
也就是说完蛋了

15:15.270 --> 15:17.030
它不会有任何处理的

15:17.030 --> 15:20.230
如果说我要是点击这个out of the thing

15:20.230 --> 15:21.310
hg958

15:21.310 --> 15:24.990
也就是说同意授权给他这个授权码

15:24.990 --> 15:25.790
那这个时候呢

15:25.790 --> 15:27.710
其实他就应该是做这一步

15:27.710 --> 15:30.390
哪一步就是根据我们的这个地址啊

15:30.390 --> 15:31.190
来给我们

15:31.190 --> 15:32.670
因为我们刚才已经啊

15:32.670 --> 15:34.030
在这个创建应用的时候

15:34.030 --> 15:36.150
指定好了这个回调地址

15:36.150 --> 15:36.510
对不对

15:36.510 --> 15:37.110
所以说呢

15:37.110 --> 15:39.350
他这个就是根据这个回调地址

15:39.350 --> 15:44.550
给我们把这个授权码拼接到这个回调地址里面

15:44.590 --> 15:45.350
所以说呢

15:45.350 --> 15:48.350
我们对这个应用

15:48.350 --> 15:49.630
也就是说我们自己的应用

15:49.630 --> 15:51.670
还要创建一个什么呢

15:51.670 --> 15:57.190
创建一个授权码的一个地址路由

15:57.190 --> 15:57.830
对吧

15:57.830 --> 15:59.950
我们这个就是要做这个授权码地址

15:59.950 --> 16:01.230
如果说他同意的话

16:01.230 --> 16:03.510
那我们就使用这个路由来接一下啊

16:03.510 --> 16:03.870
接呢

16:03.870 --> 16:07.070
首先是我们定义的叫callback

16:07.070 --> 16:08.910
然后呢gate half

16:08.910 --> 16:13.470
这里面再接一些asyncctx之后呢

16:13.470 --> 16:14.150
这个里面啊

16:14.150 --> 16:14.950
刚才咱们也说了

16:14.950 --> 16:16.110
如果说他成功之后

16:16.110 --> 16:19.070
他会给我们一个query这个查询参数

16:19.070 --> 16:20.270
那这个查询参数呢

16:20.270 --> 16:23.270
就是我们需要获取的这个授权码

16:23.270 --> 16:24.750
在这里面给大家写一下

16:24.750 --> 16:27.550
code等于一个ctx

16:27.550 --> 16:28.710
点query

16:28.710 --> 16:29.270
ok

16:29.270 --> 16:29.910
那我们这样

16:29.910 --> 16:31.830
首先如果说我们点击授权之后

16:31.830 --> 16:33.710
我们先给他进行一个打印

16:33.710 --> 16:34.190
然后呢

16:34.190 --> 16:36.470
看他是否ok啊

16:36.470 --> 16:38.750
把这个评清一下

16:38.750 --> 16:40.990
clear no them

16:40.990 --> 16:41.950
好的准备啊

16:41.990 --> 16:43.750
准备如果说我们点击之后

16:43.750 --> 16:46.750
那看一下是不是有这个授权码啊

16:46.750 --> 16:47.070
好的

16:47.070 --> 16:48.630
123走你

16:48.630 --> 16:50.950
authorizationaj958

16:50.950 --> 16:51.230
好的

16:51.230 --> 16:51.870
现在啊

16:51.870 --> 16:52.710
已经跳过来了

16:52.710 --> 16:53.310
跳来之后

16:53.310 --> 16:54.110
你看啊

16:54.110 --> 16:55.550
atp localhost3000

16:55.550 --> 16:57.550
callbackgate half code

16:57.550 --> 16:58.630
此时这个呢

16:58.630 --> 17:01.350
就是我们获取到的gate half

17:01.350 --> 17:03.350
给我们返回的这个code

17:03.350 --> 17:05.390
也就是说我们这个授权码

17:05.390 --> 17:07.470
那拿到这个授权码之后

17:07.470 --> 17:09.550
我们现在要做些什么事呢

17:09.550 --> 17:11.430
其实我们现在要进行

17:11.430 --> 17:12.750
第二步操作了

17:12.750 --> 17:13.230
也就是说

17:13.230 --> 17:14.350
哪一步操作

17:14.350 --> 17:16.830
我们要根据这个授权码去

17:16.830 --> 17:19.230
请求我们的这个令牌

17:19.230 --> 17:20.230
也就是说在这个里面

17:20.230 --> 17:21.430
我们准备

17:23.070 --> 17:24.950
请求令牌

17:24.950 --> 17:26.270
那这个请求令牌呢

17:26.270 --> 17:28.110
在这里给大家写了一下啊

17:28.110 --> 17:28.910
我们这里面呢

17:28.910 --> 17:30.510
是有这个地址的

17:30.510 --> 17:31.750
也就是说是这个地址

17:31.750 --> 17:34.150
atpgate half.com

17:34.150 --> 17:36.150
login also access token

17:36.150 --> 17:39.510
是用这个地址来进行令牌的去请求的

17:39.510 --> 17:40.270
那请求的时候

17:40.270 --> 17:42.110
它请求方案是post的

17:42.110 --> 17:42.510
这个呢

17:42.510 --> 17:43.830
我们要知道一下

17:43.830 --> 17:44.270
并且呢

17:44.270 --> 17:46.230
这里面是有相关的参数的

17:46.230 --> 17:47.070
有几个呢

17:47.070 --> 17:48.310
有一二三

17:48.310 --> 17:50.470
分别是我们创建应用的时候

17:50.470 --> 17:51.150
client ID

17:51.150 --> 17:53.230
包括client secret

17:53.230 --> 17:54.590
然后这两个是必须的

17:54.590 --> 17:56.430
还有一个就是我们刚才获取到的

17:56.430 --> 17:57.590
这个code值

17:57.590 --> 17:58.070
也就是说呢

17:58.070 --> 17:59.110
我在这个里面

17:59.110 --> 18:00.990
首先创建一个请求

18:00.990 --> 18:02.350
那比如说我这个里面

18:02.350 --> 18:03.390
const

18:04.670 --> 18:07.830
access token

18:07.830 --> 18:09.110
比如说access token

18:09.110 --> 18:11.110
等于一个

18:11.110 --> 18:12.110
avate

18:12.110 --> 18:13.110
avate

18:13.110 --> 18:14.110
那我这里面

18:14.110 --> 18:16.230
因为已经写了这个excel

18:16.230 --> 18:18.350
我在这个package.json里面

18:18.350 --> 18:19.830
给大家写好了

18:19.830 --> 18:20.910
给大家可以看一下

18:20.910 --> 18:23.110
我们在这个package.json里面

18:23.110 --> 18:23.950
有这个excel

18:23.950 --> 18:24.550
所以说呢

18:24.550 --> 18:26.870
我可以使用这种excel的形式啊

18:26.870 --> 18:28.830
那也就是const

18:28.830 --> 18:31.030
excel等于requireexcel

18:31.030 --> 18:31.710
ok

18:31.710 --> 18:34.030
那我就用excel来进行请求了

18:34.030 --> 18:35.990
avateexcel.post

18:37.990 --> 18:39.070
post里面

18:39.070 --> 18:41.670
首先是我们这个请求地址

18:41.670 --> 18:42.830
请求地址是哪一个

18:42.830 --> 18:44.510
就是在这里面写好的这个

18:44.510 --> 18:46.190
所以说我们给它粘贴过来

18:46.190 --> 18:47.710
这个呢是请求地址

18:47.710 --> 18:48.310
第二个呢

18:48.310 --> 18:51.030
就是需要我们给它传递的

18:51.030 --> 18:52.870
这个相关的这个参数

18:52.870 --> 18:53.350
所以说呢

18:53.350 --> 18:55.870
我们要把这个参数整理好啊

18:55.870 --> 18:57.110
那这参数都有哪些呢

18:57.110 --> 18:58.550
其实这个参数啊

18:58.550 --> 19:00.030
就是一个对象

19:00.030 --> 19:01.550
那这里面分别是

19:02.830 --> 19:04.590
我们什么client

19:04.590 --> 19:10.880
client ID

19:10.880 --> 19:13.240
就是我们获取到的那个值啊

19:13.240 --> 19:15.360
那获取到的这个client ID在哪呢

19:15.360 --> 19:18.240
其实我们在gate hub上定义的时候

19:18.240 --> 19:19.640
这里面我们找一下

19:19.640 --> 19:20.640
就是这个值

19:20.640 --> 19:22.840
我们给它进行一下复制啊

19:22.840 --> 19:23.640
client ID

19:23.640 --> 19:23.960
ok

19:23.960 --> 19:24.720
显然

19:24.720 --> 19:25.480
然后呢

19:25.480 --> 19:27.040
除了client ID之后

19:27.040 --> 19:31.240
你这个里面还要传一个client

19:32.440 --> 19:33.520
securities

19:33.520 --> 19:35.160
那这个securities写成了

19:35.160 --> 19:38.160
这个里面我们也是有的

19:38.160 --> 19:40.000
我们直接把这个给做一个复制

19:40.960 --> 19:41.360
然后呢

19:41.360 --> 19:42.560
把它放在这里面

19:42.560 --> 19:43.000
之后呢

19:43.000 --> 19:44.320
除了这两个参数之外

19:44.320 --> 19:45.760
我们还需要传一个

19:45.760 --> 19:47.440
就是我们刚才的这个

19:47.440 --> 19:48.360
code的值

19:48.360 --> 19:49.920
把它也给传递过去

19:49.920 --> 19:50.600
之后呢

19:50.600 --> 19:52.360
我们打印一下这个

19:52.360 --> 19:53.760
access token

19:53.760 --> 19:55.080
也就是说

19:55.080 --> 19:55.600
现在呢

19:55.600 --> 19:59.160
我们根据刚才获得的这个数悬码

19:59.160 --> 20:00.840
来进行这个

20:00.840 --> 20:02.800
我们的令牌的一个请求

20:02.800 --> 20:04.160
传递了三个参数

20:04.160 --> 20:05.520
就这么一个流程啊

20:05.520 --> 20:05.920
答应一下

20:05.920 --> 20:06.960
其实我们现在啊

20:06.960 --> 20:07.760
也不需要做什么

20:07.760 --> 20:09.000
我们只需要刷新一下

20:09.000 --> 20:09.960
时候就ok了

20:09.960 --> 20:11.800
因为这个就是我们刚才获取到的

20:11.800 --> 20:12.640
这个数悬码啊

20:12.640 --> 20:13.760
看行不行

20:13.760 --> 20:14.080
好的

20:14.080 --> 20:15.400
那咱们来试一下

20:15.400 --> 20:15.840
好的

20:15.840 --> 20:16.520
没问题啊

20:16.520 --> 20:18.200
现在已经拿到了一个什么

20:18.200 --> 20:19.600
拿到了一个data

20:19.600 --> 20:20.200
那所以说呢

20:20.200 --> 20:22.280
我们access token data

20:22.280 --> 20:23.640
给大家看一下啊

20:23.640 --> 20:26.160
这个data是个啥东西

20:26.160 --> 20:26.880
点击一下

20:26.880 --> 20:27.760
data里面

20:27.760 --> 20:30.360
这里面有一些error错误信息啊

20:30.360 --> 20:32.120
那这个错误信息指的是啥呢

20:32.120 --> 20:32.840
指的是啊

20:32.840 --> 20:35.840
刚才我们传递的本次操作是有问题的

20:35.840 --> 20:37.040
因为我们是

20:37.080 --> 20:39.160
不是去真正的去请求的

20:39.160 --> 20:39.800
而是什么呢

20:39.800 --> 20:42.240
而是从原来刚才那次请求上

20:42.240 --> 20:43.360
重新来获取的

20:43.360 --> 20:44.560
这里是有点问题的

20:44.560 --> 20:45.240
并且呢

20:45.240 --> 20:46.640
他对这个返回值啊

20:46.640 --> 20:48.520
也不是我们需要的这种格式

20:48.520 --> 20:49.040
对不对

20:49.040 --> 20:49.480
所以说呢

20:49.480 --> 20:51.320
我们给他做一下解析啊

20:51.320 --> 20:52.040
怎么解析

20:52.040 --> 20:53.080
那我们这里面可以

20:53.080 --> 20:56.600
couse的qs等于一个requireqs

20:56.600 --> 20:57.920
我用qs.pass

20:57.920 --> 20:59.240
把它给解析出来啊

20:59.240 --> 21:02.160
可以看一下qs.pass

21:03.880 --> 21:04.040
好

21:04.040 --> 21:05.640
那咱们再来看一眼啊

21:05.640 --> 21:06.760
qs.pass之后

21:06.800 --> 21:07.040
当然了

21:07.040 --> 21:07.920
我就刷新这个啊

21:09.480 --> 21:10.200
刷新之后

21:10.200 --> 21:10.920
那咱们看一眼

21:10.920 --> 21:11.720
这里面有这个

21:11.720 --> 21:12.520
air信息

21:12.520 --> 21:13.960
bidware code

21:13.960 --> 21:15.960
也就是说我们这个

21:15.960 --> 21:17.960
获取到的这个

21:17.960 --> 21:19.120
咱们这个请求

21:19.120 --> 21:19.560
状态码

21:19.560 --> 21:20.600
这个不正确是吧

21:20.600 --> 21:21.200
请求码

21:21.200 --> 21:21.560
然后呢

21:21.560 --> 21:22.320
我们怎么

21:22.320 --> 21:23.120
重新来一次啊

21:23.120 --> 21:24.160
非常简单

21:24.160 --> 21:25.320
回去

21:25.320 --> 21:26.520
我们首先回到哪

21:26.520 --> 21:27.960
回到我们这个界面

21:27.960 --> 21:28.880
然后呢

21:28.880 --> 21:30.640
现在是我们要做授权嘛

21:30.640 --> 21:31.240
对不对

21:31.240 --> 21:31.560
ok

21:31.560 --> 21:32.600
这个也过去了

21:32.600 --> 21:33.800
那咱们从这来啊

21:33.800 --> 21:34.840
当然你从这来之后啊

21:34.840 --> 21:36.280
因为我们刚才已经做了

21:36.320 --> 21:37.640
这个授权的点击

21:37.640 --> 21:38.040
可能啊

21:38.040 --> 21:39.080
我们再进行

21:39.080 --> 21:40.680
给他帮账户登录的时候

21:40.680 --> 21:41.440
授权这一步啊

21:41.440 --> 21:42.200
就过掉了

21:42.200 --> 21:42.640
但是呢

21:42.640 --> 21:43.480
他也会给我们

21:43.480 --> 21:45.160
反悔这个code值的

21:45.160 --> 21:46.320
我们来看一眼

21:46.320 --> 21:46.560
好了

21:46.560 --> 21:47.160
又回来了

21:47.160 --> 21:47.680
但是呢

21:47.680 --> 21:48.320
这次回来

21:48.320 --> 21:50.080
你会发现和上一次啊

21:50.080 --> 21:50.680
不太一样

21:50.680 --> 21:51.240
这个是

21:51.240 --> 21:52.240
为啥不一样呢

21:52.240 --> 21:53.680
因为刚才我们是在这个

21:53.680 --> 21:55.680
原来请求的基础上啊

21:55.680 --> 21:56.320
他这个值啊

21:56.320 --> 21:57.960
其实新鲜度已经过了

21:57.960 --> 21:58.360
对不对

21:58.360 --> 21:59.920
也就是说我们这个

21:59.920 --> 22:01.120
请求的这个状态码啊

22:01.120 --> 22:01.720
已经过了

22:01.720 --> 22:02.160
所以说呢

22:02.160 --> 22:03.680
怎么呢

22:03.680 --> 22:04.840
我们接下来啊

22:04.840 --> 22:05.960
其实

22:05.960 --> 22:07.440
我们又重新的发了一次

22:07.440 --> 22:08.360
发了一次之后呢

22:08.360 --> 22:09.240
这个code的值啊

22:09.240 --> 22:10.840
是最新鲜获取到的

22:10.840 --> 22:11.760
那最新鲜获取到

22:11.760 --> 22:13.600
也就是说通过getup获取的

22:13.600 --> 22:14.320
那这时候呢

22:14.320 --> 22:16.040
我们给他发过去

22:16.040 --> 22:17.680
那他就不会给我报这种

22:17.680 --> 22:20.040
by the verification code的这个错误

22:20.040 --> 22:20.720
也就是说

22:20.720 --> 22:22.560
我们这个啊

22:22.560 --> 22:25.000
状态码过期的这种形式了啊

22:25.000 --> 22:25.640
那这时候呢

22:25.640 --> 22:27.320
我们拿到了值了

22:27.320 --> 22:27.960
拿到值

22:27.960 --> 22:29.680
分别拿到什么值呢

22:29.680 --> 22:30.320
我们这里面

22:30.320 --> 22:32.080
拿到了一个access token

22:32.080 --> 22:33.920
此时这个access token

22:33.920 --> 22:37.040
就是我们需要获取到的值

22:37.040 --> 22:40.120
也就是说我们couns的access token

22:40.120 --> 22:41.200
等于一个什么

22:41.200 --> 22:43.360
我们把它解析出来啊

22:43.360 --> 22:46.960
这个值其实就是我们的令牌

22:46.960 --> 22:48.720
我们拿到它就ok了

22:50.600 --> 22:50.920
好的

22:50.920 --> 22:51.920
我们在这个里面呢

22:51.920 --> 22:58.080
打印一下这个access token

22:58.080 --> 22:58.720
好吧

22:58.720 --> 22:59.160
打印一下

22:59.160 --> 23:00.200
看ok啊

23:00.200 --> 23:01.360
来刷新

23:01.360 --> 23:02.160
刷新如果不行

23:02.160 --> 23:03.040
那我们再重新回去

23:03.040 --> 23:04.000
重新去请求啊

23:04.000 --> 23:05.000
这倒无错为的事

23:05.000 --> 23:05.240
好的

23:05.240 --> 23:06.080
没有是吧

23:06.120 --> 23:06.560
没有啊

23:06.560 --> 23:07.120
不要紧啊

23:07.120 --> 23:07.680
那也就是说

23:07.680 --> 23:08.360
刚才这次啊

23:08.360 --> 23:09.440
又挂掉了啊

23:09.440 --> 23:10.160
重新刷新

23:10.160 --> 23:11.680
我们走一下这个流程啊

23:11.680 --> 23:13.280
再来想一下这个流程

23:13.280 --> 23:14.840
首先第一步是什么呢

23:14.840 --> 23:17.680
我们把这个按钮的这个请求地址啊

23:17.680 --> 23:19.240
我们给他做一个拦截

23:19.240 --> 23:20.080
拦截之后呢

23:20.080 --> 23:21.920
我们给他进行一个重定项

23:21.920 --> 23:23.120
这个里面重定项

23:23.120 --> 23:23.840
第一步是什么呢

23:23.840 --> 23:27.040
我们跳转到gate的一个获取收钱码的

23:27.040 --> 23:28.160
那么一个地址啊

23:28.160 --> 23:28.960
这里给大家写一下

23:30.320 --> 23:35.640
跳转到gate获取收钱码的一个地址

23:35.640 --> 23:36.960
ok 这是第一步

23:36.960 --> 23:37.640
那第一步呢

23:37.640 --> 23:39.920
并且我们这里边一定要注意啊

23:39.920 --> 23:41.480
鞋带了一个参数

23:41.480 --> 23:42.960
鞋带了我们的

23:44.240 --> 23:46.400
克兰特id的一个参数啊

23:46.400 --> 23:48.440
这个参数是一定要有的啊

23:48.440 --> 23:49.120
之后呢

23:49.120 --> 23:51.440
我们gate如果说

23:51.440 --> 23:52.680
他要是通过

23:52.680 --> 23:54.360
允许我们获取收钱码之后

23:54.360 --> 23:56.640
他会给我们返回一个code

23:56.640 --> 24:00.480
那我们接下来就是请求令牌的一个处理了

24:00.480 --> 24:01.720
请求令牌处理这里面

24:01.720 --> 24:02.840
一定要注意啊

24:02.840 --> 24:04.840
他是这个请求方法是post的

24:04.880 --> 24:05.800
然后还有这个

24:05.800 --> 24:08.280
就是我们的这个pamrys

24:08.280 --> 24:10.440
pamrys参数的一个问题啊

24:10.440 --> 24:11.640
pamrys参数呢

24:11.640 --> 24:14.120
他把除了这个code之外

24:14.120 --> 24:15.600
还要传一个client

24:15.600 --> 24:16.240
securacy

24:16.240 --> 24:19.720
也就是说我们刚才申请这个应用的时候

24:19.720 --> 24:21.320
获得的这个密要

24:21.320 --> 24:22.800
要把它给传过去啊

24:22.800 --> 24:24.040
这是要有的

24:24.040 --> 24:25.400
然后我们这一步呢

24:25.400 --> 24:26.520
其实就是来测试

24:26.520 --> 24:28.960
是否拿到了这个token值啊

24:30.200 --> 24:30.560
好的

24:30.560 --> 24:31.400
那再来一遍啊

24:32.880 --> 24:33.720
走第一步

24:33.720 --> 24:34.760
点击gate hub

24:34.760 --> 24:36.600
那其实剩下的我们是看不到了

24:36.600 --> 24:38.680
但我们要知道这个过程啊

24:38.680 --> 24:39.040
好

24:39.040 --> 24:41.200
你现在已经拿到了这个值

24:41.200 --> 24:41.840
这个值呢

24:41.840 --> 24:43.320
就是我们需要的

24:43.320 --> 24:44.840
他的这个

24:44.840 --> 24:46.760
我们的这个令牌token值

24:46.760 --> 24:48.960
那拿到这个令牌token值

24:48.960 --> 24:49.800
我们干点什么

24:49.800 --> 24:51.320
其实接下来

24:51.320 --> 24:53.080
我们是不是就可以做一件事了

24:53.080 --> 24:53.880
做一件什么事

24:53.880 --> 24:56.080
我们直接的现在有令牌了

24:56.080 --> 24:57.520
那是不是就可以啊

24:57.520 --> 24:59.640
获取用户的一个什么了

24:59.640 --> 25:01.080
信息了对不对

25:01.080 --> 25:02.200
那获取用信息

25:02.200 --> 25:02.800
地址呢

25:02.800 --> 25:03.760
也给大家写好了

25:03.760 --> 25:04.560
是哪一个

25:04.560 --> 25:06.720
是这个API gate hub user

25:06.720 --> 25:08.520
那请求方式是gate

25:08.520 --> 25:09.720
他这个里面请求呢

25:09.720 --> 25:11.280
不需要传递请求

25:11.280 --> 25:12.360
请求体里面

25:12.360 --> 25:14.080
不需要传进任何彩数

25:14.080 --> 25:15.520
但是请求头里面

25:15.520 --> 25:17.040
你要添一个hiders

25:17.040 --> 25:19.560
以以这种australization的形式

25:19.560 --> 25:21.240
来进行添加啊

25:21.240 --> 25:21.800
这个呢

25:21.800 --> 25:23.800
我们要知道一下

25:23.800 --> 25:24.640
并且呢

25:24.640 --> 25:26.840
你在这个添加的形式的时候

25:26.840 --> 25:29.120
你这里面还会有一个什么的bair

25:29.120 --> 25:30.600
为什么要有一个这个bair呢

25:30.600 --> 25:31.400
因为这里面

25:31.400 --> 25:33.560
他给我返回这个令牌的时候

25:33.560 --> 25:36.280
就是以这种australization的形式啊

25:36.280 --> 25:39.760
使用这种bair加上我们这个token的形式

25:39.760 --> 25:41.640
来进行啊

25:41.640 --> 25:43.480
请求头的一个定义的啊

25:43.480 --> 25:44.680
那所以说这里面怎么写

25:44.680 --> 25:46.080
比如说Constar

25:46.080 --> 25:46.600
我们这里面

25:46.600 --> 25:49.280
UtherInfo等于一个什么呢

25:49.280 --> 25:54.760
我们这里面等于excel.gate

25:54.760 --> 25:56.880
gate请求把这个地址写成

25:56.880 --> 25:57.680
地址是哪一个

25:57.680 --> 26:00.080
是这个给大家沾一下

26:00.080 --> 26:00.880
好的

26:00.880 --> 26:02.520
把这个地址写完成之后呢

26:02.520 --> 26:04.280
我们这个里面啊

26:04.280 --> 26:05.720
不需要传递别的

26:05.720 --> 26:06.160
但是呢

26:06.160 --> 26:08.160
我们这里面要配置一个什么

26:08.160 --> 26:10.000
配置一个请求头

26:10.000 --> 26:10.680
请求头呢

26:10.680 --> 26:11.320
我们这里面

26:11.320 --> 26:14.320
Headers好了

26:14.320 --> 26:15.720
Headers

26:15.720 --> 26:20.480
首先我们要添一个Australization

26:20.480 --> 26:21.600
Australization

26:21.600 --> 26:22.120
然后呢

26:22.120 --> 26:22.840
我们这里面

26:22.840 --> 26:23.440
格式呢

26:23.440 --> 26:25.600
就是以这种格式叫bair

26:25.600 --> 26:25.960
这个呢

26:25.960 --> 26:28.080
是Australization的一个标准格式啊

26:28.080 --> 26:28.520
然后呢

26:28.520 --> 26:29.320
你这个里面

26:29.320 --> 26:31.640
后面一定要跟一个空行

26:31.680 --> 26:33.280
千万要跟一个空行

26:33.280 --> 26:34.280
在这里给大家写一下

26:34.280 --> 26:35.880
比如说我们的这个

26:37.320 --> 26:37.840
bair

26:37.840 --> 26:38.400
然后呢

26:38.400 --> 26:39.360
后面啊

26:39.360 --> 26:40.960
记得跟一个空行

26:40.960 --> 26:43.080
记得跟一个

26:43.080 --> 26:45.200
然后我们的这个空格啊

26:45.200 --> 26:46.040
空行

26:46.040 --> 26:46.240
好的

26:46.240 --> 26:47.320
跟一个空格之后

26:47.320 --> 26:49.880
那我们直接的要把谁放进去

26:49.880 --> 26:53.400
要把这个excel token放进去啊

26:53.400 --> 26:55.360
然后直接放进去之后

26:55.360 --> 26:56.320
在这个里面

26:56.320 --> 26:59.040
我们拿这个UtherInfo

26:59.040 --> 27:01.160
看它是不是能获取到

27:01.160 --> 27:04.160
这个内容值就ok了啊

27:04.160 --> 27:05.200
那我们这里面呢

27:05.200 --> 27:07.000
还需要把这个avait

27:07.000 --> 27:07.720
修实谱啊

27:07.720 --> 27:08.760
给加一下

27:08.760 --> 27:11.160
也就是说把这个avait关键字加一下

27:11.160 --> 27:11.640
否则啊

27:11.640 --> 27:13.400
它是不会返回

27:14.840 --> 27:16.040
返回我们的这个

27:16.040 --> 27:17.960
要不然它返回一个promise对象

27:17.960 --> 27:19.400
我们直接就给它解析出来

27:19.400 --> 27:20.360
有点音效

27:20.360 --> 27:20.640
好的

27:20.640 --> 27:21.160
可以的话

27:21.160 --> 27:22.840
我们来进行一下登录啊

27:22.840 --> 27:24.320
重新的进行一下操作

27:25.880 --> 27:26.760
首先点击啊

27:26.760 --> 27:28.160
它是相对有一点慢啊

27:28.160 --> 27:29.640
因为这是有一个请求过程

27:29.640 --> 27:30.520
ok呀

27:30.520 --> 27:31.240
想用回来了

27:31.240 --> 27:32.120
想用回来之后呢

27:32.120 --> 27:33.520
这个里面就拿到了

27:33.520 --> 27:35.720
我的这个相关的用信息

27:35.720 --> 27:36.480
比如说这里面

27:36.480 --> 27:38.120
有我的这个登录的用户名

27:38.120 --> 27:40.000
而包括我的这个头像

27:40.000 --> 27:41.840
也就是说avaita URL

27:41.840 --> 27:42.600
我们点击一下

27:42.600 --> 27:43.480
看一眼

27:43.480 --> 27:45.600
是不是整个这个头像就回来了

27:45.600 --> 27:46.120
对吧

27:46.120 --> 27:47.520
那我们拿到这个信息怎么办

27:47.520 --> 27:48.560
其实我们拿到信息

27:48.560 --> 27:51.000
就可以进行一些相关的渲染

27:51.000 --> 27:52.520
跟重新向了对不对

27:52.520 --> 27:52.920
首先呢

27:52.920 --> 27:54.160
我们要把这个信息啊

27:54.160 --> 27:55.040
给保存起来

27:55.040 --> 27:56.120
就是这啥意思呢

27:56.120 --> 27:57.680
因为我们要使用这个信息

27:57.680 --> 27:58.000
对不对

27:58.000 --> 27:59.160
那我们怎么办

27:59.720 --> 28:00.880
这个就简单了

28:00.880 --> 28:02.520
其实跟咱们这个例子

28:02.520 --> 28:03.680
没有太大的关系了

28:03.680 --> 28:05.120
那我这里面写一个什么的

28:05.120 --> 28:07.120
UserInfo啊

28:07.120 --> 28:09.720
因为这个里面我们也不需要这个

28:09.720 --> 28:11.240
做一个其他的传递了

28:11.240 --> 28:13.440
直接我们就给它保存一下就可以了

28:13.440 --> 28:13.920
在这里啊

28:15.040 --> 28:15.840
Const

28:15.840 --> 28:17.440
首先我们出实话

28:17.440 --> 28:19.720
这样我们使用这种light的形式

28:19.720 --> 28:22.640
UserInfo等于一个空对象

28:22.640 --> 28:23.360
好吧

28:23.360 --> 28:23.960
然后呢

28:23.960 --> 28:26.600
我让这个UserInfo在这个里面

28:26.600 --> 28:29.440
我直接的就给它做一个复职了

28:29.440 --> 28:31.120
也就是说在这个里面啊

28:31.120 --> 28:32.200
这个就都不要了

28:32.200 --> 28:33.120
那此时呢

28:33.120 --> 28:36.040
这个UserInfo从这个局部作用域里的变量

28:36.040 --> 28:37.360
变成了全局变量

28:37.360 --> 28:38.320
那这时候呢

28:38.320 --> 28:40.880
我直接在这个我们的这个后幕里面

28:40.880 --> 28:42.480
就能拿到了对不对

28:42.480 --> 28:42.920
也就是说

28:42.920 --> 28:45.840
因为我要获取登录信息之后

28:45.840 --> 28:47.200
咱们正常操作是什么

28:47.200 --> 28:47.960
就是说

28:47.960 --> 28:50.760
我从这个我们登录这个界面

28:50.760 --> 28:52.600
是要做一个跳转的对不对

28:52.600 --> 28:53.960
那我跳转之后

28:53.960 --> 28:57.640
那直接的是要到我们的这个首页面的

28:57.640 --> 28:58.200
所以说呢

28:58.200 --> 29:00.440
这里边是要做这样一步操作的

29:01.720 --> 29:01.960
好的

29:01.960 --> 29:03.320
那我们就来做一下

29:03.320 --> 29:06.480
首先我把这个UserInfo啊

29:06.480 --> 29:07.360
把它给删除掉

29:07.360 --> 29:07.960
然后呢

29:07.960 --> 29:09.440
我们如果说成功之后

29:09.440 --> 29:12.160
那我们cds比较ready ranked

29:12.160 --> 29:13.080
我们跳转一下

29:13.080 --> 29:15.000
跳转到我们这个Home界面

29:15.000 --> 29:17.680
由于我现在已经把这个UserInfo获取到了

29:17.680 --> 29:19.920
这样我们再看下这个UserInfo啊

29:19.920 --> 29:22.560
因为UserInfo它是不是我们需要的

29:22.560 --> 29:23.720
所有的内容

29:23.720 --> 29:24.520
其实这里面啊

29:24.520 --> 29:25.680
同学们可以看一下

29:25.680 --> 29:28.360
它整个返回的这个内容比较多

29:28.360 --> 29:28.680
然后呢

29:28.680 --> 29:30.320
我们具体是需要哪个呢

29:30.320 --> 29:32.040
其实我们是需要它这个里面的

29:32.040 --> 29:33.720
这个data对不对

29:33.720 --> 29:34.240
所以说呢

29:34.240 --> 29:35.800
这个值啊是不对的

29:35.800 --> 29:37.800
那我们直接的console.log

29:37.800 --> 29:40.960
我们UserInfo其实就应该等于一个什么呢

29:40.960 --> 29:43.960
获取它里面的这个data值就ok了

29:43.960 --> 29:44.760
那这个咋办呢

29:45.920 --> 29:48.800
我们UserInfo重新让它等于一下

29:48.800 --> 29:50.280
反正都是一个什么了

29:50.280 --> 29:53.640
UserInfo等于UserInfo.data

29:54.320 --> 29:55.840
给它重新付一下值啊

29:57.480 --> 30:01.200
也就是说我们只需要获取它的这个data值就ok了

30:02.640 --> 30:03.360
来咱们这样啊

30:03.360 --> 30:04.200
重新跑一遍

30:04.200 --> 30:05.760
先别着急

30:05.760 --> 30:07.440
这样已经跳转过来了

30:07.440 --> 30:08.240
这无所谓的事

30:08.240 --> 30:10.240
跳转之后也可以过去的

30:10.240 --> 30:11.480
然后点击登陆

30:11.480 --> 30:12.920
ok走你

30:12.920 --> 30:14.600
现在去发请求之后呢

30:14.600 --> 30:17.240
看一下我们获取到的这个内容啊

30:17.240 --> 30:18.640
相对稍微有一点慢啊

30:18.640 --> 30:19.800
这个同学们

30:19.800 --> 30:21.720
因为我们是请求get hub

30:21.720 --> 30:23.920
有时候它这个不是特别的稳定啊

30:25.280 --> 30:26.240
ok还是有点慢

30:26.240 --> 30:28.000
这样重新刷新一下

30:28.000 --> 30:31.600
刷新之后再点击get hub来做一个登陆处理

30:35.250 --> 30:36.490
这样特别慢

30:36.490 --> 30:38.210
那我直接让我看一眼啊

30:38.210 --> 30:40.450
这个里面get hub

30:41.530 --> 30:42.730
好了过来了

30:42.730 --> 30:43.770
现在已经过来之后呢

30:43.770 --> 30:44.370
咱们看一眼

30:44.370 --> 30:44.890
它过来了

30:44.890 --> 30:45.410
过来之后呢

30:45.410 --> 30:46.490
我就看一眼

30:46.490 --> 30:49.170
这个data就是我们需要的结果值

30:49.170 --> 30:50.250
而且有两次了

30:50.250 --> 30:52.170
其实我们都刷新了一次啊

30:52.170 --> 30:53.090
那这样是不是

30:53.130 --> 30:54.970
这个值就满足我们的需求了

30:54.970 --> 30:56.330
满足需求打完之后呢

30:56.330 --> 30:57.770
我们把这个u的info

30:57.770 --> 30:59.930
其实刚才在这个home里面

30:59.930 --> 31:01.010
你只要过来之后

31:01.010 --> 31:03.450
那我这里面给你传过去就ok的吧

31:03.450 --> 31:04.850
因为我这里面大家也知道

31:04.850 --> 31:06.570
使用的这种异级S模板

31:06.570 --> 31:07.050
所以说呢

31:07.050 --> 31:08.210
我在这个里面啊

31:08.210 --> 31:09.770
就用异级S模板形式

31:09.770 --> 31:12.370
给大家来进行一个简单的渲染就ok了

31:12.370 --> 31:13.290
当然这个啊

31:13.290 --> 31:15.530
是根据各位同学的一个业务场景

31:15.530 --> 31:18.890
比如说你要是或者是其他的前无端分离的

31:18.890 --> 31:21.010
那你可能你会发一个阿迦克斯请求啊

31:21.010 --> 31:22.290
这个都不确定

31:22.330 --> 31:22.770
所以说呢

31:22.770 --> 31:25.090
根据自己的业务来做一些处理

31:25.090 --> 31:25.530
这样呢

31:25.530 --> 31:27.690
我直接的就是在后端的模板里面

31:27.690 --> 31:29.530
给做一个渲染就可以了

31:29.530 --> 31:30.810
首先衣服

31:30.810 --> 31:31.490
然后呢

31:31.490 --> 31:33.890
我这里面定义这个Alz

31:35.450 --> 31:36.690
定义一下Alz

31:36.690 --> 31:39.610
当然Alz前面有这个衣服的B盒

31:39.610 --> 31:42.290
然后我这个里面添加上

31:42.290 --> 31:43.090
添加什么呢

31:43.090 --> 31:44.530
最后再来一个B盒

31:46.050 --> 31:49.090
B盒的这个ok搞定之后

31:49.090 --> 31:49.930
这个表达是

31:49.930 --> 31:52.090
我首先我写的时候就怎么写呢

31:52.090 --> 31:53.290
因为我知道

31:53.290 --> 31:56.970
UserInfo下面有我的一个什么需要的值

31:56.970 --> 31:59.330
我就要这个Aveta UAL

31:59.330 --> 32:01.610
那所以说我这个Home.atml

32:01.610 --> 32:05.330
如果说UserInfo.Aveta UAL有值

32:05.330 --> 32:07.250
那我这个img渲染的时候

32:07.250 --> 32:08.690
也就是说在这个里面

32:08.690 --> 32:10.610
你渲染的时候就别这么渲染了

32:10.610 --> 32:12.850
我就让你把这个Aveta UAL

32:12.850 --> 32:15.010
给做一个渲染就ok了

32:15.010 --> 32:20.130
也就是说百分之二空格UserInfo.Aveta UAL

32:20.130 --> 32:21.450
来做这个后端

32:21.490 --> 32:24.730
我们获取到的这个Gate的图片来获取

32:24.730 --> 32:26.770
否则那你就渲染本地的就ok了

32:26.770 --> 32:28.490
就是这么一个处理

32:28.490 --> 32:30.690
那咱们来试一下看行不行

32:30.690 --> 32:30.930
好的

32:32.530 --> 32:33.610
来我刷新一下界面

32:33.610 --> 32:34.770
刷新一下界面

32:34.770 --> 32:36.130
现代没有值是吧

32:36.130 --> 32:37.170
没有值是因为什么

32:37.170 --> 32:39.290
是因为我们刚才啊

32:39.290 --> 32:42.450
重新的写了这个模板之后

32:42.450 --> 32:45.010
那它这个里面重新整个的

32:45.010 --> 32:46.290
把这个做了一个复制

32:46.290 --> 32:46.970
那此时啊

32:46.970 --> 32:48.130
它这里面应该是没有值

32:48.130 --> 32:49.530
那咱们来试一下

32:49.530 --> 32:50.330
首先我退出去

32:50.330 --> 32:52.370
退出去重新登录一下

32:52.370 --> 32:56.930
来给他走你

32:56.930 --> 32:57.290
ok

32:57.290 --> 32:58.970
现在这个机器猫就有了

32:58.970 --> 32:59.450
对不对

32:59.450 --> 33:01.410
然后这个机器猫有了之后啊

33:01.410 --> 33:02.210
稍微有点大

33:02.210 --> 33:03.810
那我给他做一个简单调整

33:03.810 --> 33:05.610
当然这个不纠结了

33:05.610 --> 33:07.530
max等于一个50

33:07.530 --> 33:08.050
ok

33:08.050 --> 33:08.690
px

33:08.690 --> 33:09.530
好了

33:09.530 --> 33:10.890
直接写50就可以了

33:10.890 --> 33:12.690
那这样他就保证他不是特别大了

33:12.690 --> 33:13.450
对吧

33:13.450 --> 33:14.970
那整个这么一个过程啊

33:14.970 --> 33:17.090
我们基本上就搞定了

33:17.090 --> 33:17.570
搞定了

33:17.570 --> 33:19.690
那是我们再来回顾一下

33:19.690 --> 33:21.490
首先我们做这个事情啊

33:21.530 --> 33:22.850
第一步我们是做什么呢

33:22.850 --> 33:25.450
我们肯定要创建一个自己的应用

33:25.450 --> 33:26.010
并且呢

33:26.010 --> 33:27.610
我们拿着这个应用

33:27.610 --> 33:31.690
去上这个Gate上做了一个认证

33:31.690 --> 33:32.290
然后呢

33:32.290 --> 33:33.410
整个的一个认证

33:33.410 --> 33:34.610
我们通过这个认证

33:34.610 --> 33:35.850
最主要的是什么呢

33:35.850 --> 33:37.210
其实最主要的核心目的

33:37.210 --> 33:38.970
就是让Gate认识我这个应用

33:38.970 --> 33:40.450
也就是说认识我这个

33:40.450 --> 33:42.370
local host的三千这个应用

33:42.370 --> 33:45.410
他给我生成了一个应标识

33:45.410 --> 33:46.050
然后呢

33:46.050 --> 33:48.570
我们去请求的一个securities

33:48.570 --> 33:49.730
也就是说密要

33:49.730 --> 33:50.770
拿到这两个之后

33:50.810 --> 33:52.090
那我就来做操作了

33:52.090 --> 33:53.010
做啥操作呢

33:53.010 --> 33:53.690
当然了

33:53.690 --> 33:55.650
这个里面我们还添加了一个什么

33:55.650 --> 33:56.490
回调地址啊

33:56.490 --> 33:59.170
这个回调地址就是授权码给我们之后

33:59.170 --> 34:01.490
那我们直接通过这个授权码啊

34:01.490 --> 34:04.250
通过这个地址来进行授权码的一个获取啊

34:05.450 --> 34:06.410
这些搞定之后

34:06.410 --> 34:07.370
我们做的啥事儿

34:07.370 --> 34:10.210
我们直接的是不是在这个灯路店面

34:10.210 --> 34:11.810
一点击这个Gate Hub

34:11.810 --> 34:13.410
点击这个Gate Hub之后

34:13.410 --> 34:14.570
我们这个地址啊

34:14.570 --> 34:16.970
做了一个什么蓝节前端地址

34:16.970 --> 34:17.490
之后呢

34:17.490 --> 34:21.850
就把这个第一次获取授权码的请求给创建了一下

34:21.850 --> 34:22.370
并且呢

34:22.370 --> 34:25.170
我们传递了一个这个ClientID

34:25.170 --> 34:26.450
传递完成之后

34:26.450 --> 34:28.130
如果说后端正常

34:28.130 --> 34:30.050
也就是说如果说是Gate

34:30.050 --> 34:32.610
正常给我们返回这个授权码

34:32.610 --> 34:34.050
那代表着他已经授权了

34:34.050 --> 34:34.530
对不对

34:34.530 --> 34:37.570
刚才我们也看到了点击那个授权的过程

34:37.570 --> 34:38.810
如果说点击授权了

34:38.810 --> 34:39.570
那这时候呢

34:39.570 --> 34:43.290
我们就根据他反给我们的这个

34:43.290 --> 34:45.010
里面的这个回调地址

34:45.010 --> 34:46.570
因为这个是我们定一好的嘛

34:46.610 --> 34:48.410
我们去拿一个授权码

34:48.410 --> 34:49.090
并且呢

34:49.090 --> 34:50.490
根据我们这个授权码

34:50.490 --> 34:52.570
以及我们的这个身份标识

34:52.570 --> 34:53.930
以及这个sacrace

34:53.930 --> 34:56.370
再去进行令牌的请求

34:56.370 --> 34:57.650
拿到这个令牌之后

34:57.650 --> 34:58.970
我做了个啥事呢

34:58.970 --> 35:02.410
我是不是开始正常的进行我们Gate上的这个

35:02.410 --> 35:04.090
账户信息的一个获取

35:04.090 --> 35:04.890
获取到之后

35:04.890 --> 35:07.050
那我这里面进行了一个解析啊

35:07.050 --> 35:07.970
解析完成之后

35:07.970 --> 35:09.730
我就跳转到Home界面

35:09.730 --> 35:11.850
然后Home界面跳转ok之后

35:11.850 --> 35:12.890
把它传进去

35:12.890 --> 35:13.650
传进去之后

35:13.650 --> 35:15.850
这里面做了一个简单的渲染

35:15.850 --> 35:16.410
那这样呢

35:16.410 --> 35:19.170
就能看到我们刚才的这个

35:19.170 --> 35:20.010
我们打开啊

35:20.010 --> 35:20.970
这里面这个过程

35:20.970 --> 35:22.730
因为它是有一个三方认证

35:22.730 --> 35:23.210
并且呢

35:23.210 --> 35:24.170
我们这个三方认证

35:24.170 --> 35:25.450
都是从后端实现的

35:25.450 --> 35:26.050
对不对

35:26.050 --> 35:27.490
相对有一些慢啊

35:27.490 --> 35:27.850
然后呢

35:27.850 --> 35:30.130
这个里面就看到我这个吉祥毛头像了

35:30.130 --> 35:30.810
当然了

35:30.810 --> 35:31.490
你剩下的

35:31.490 --> 35:33.290
比如说我们的这个账户信息啊

35:33.290 --> 35:34.530
包括尼克内蒙

35:34.530 --> 35:35.170
这些呢

35:35.170 --> 35:37.530
你都可以从这个数据里面来进获取

35:37.530 --> 35:40.130
因为他返回的是有好多内容的

35:40.130 --> 35:40.570
这个呢

35:40.570 --> 35:42.690
就是一个非常经典的

35:42.690 --> 35:44.130
我们这个Auto

35:44.130 --> 35:46.570
来进行这种授权码形式

35:46.570 --> 35:48.970
进行授权的这么一个过程

35:48.970 --> 35:49.290
好的

35:49.290 --> 35:50.730
那咱们这几个课就到这里

