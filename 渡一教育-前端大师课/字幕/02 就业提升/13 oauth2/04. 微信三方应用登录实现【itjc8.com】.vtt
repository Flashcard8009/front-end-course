WEBVTT

00:00.050 --> 00:01.450
各位同学 大家好

00:01.450 --> 00:04.550
这几课我们继续OS2的一个学习

00:04.550 --> 00:07.450
上几课我们通过OS2这种形式

00:07.450 --> 00:10.050
实现了Gate的一个三方登录

00:10.050 --> 00:13.350
那么这几课我们来把这个微信扫码登录

00:13.350 --> 00:14.850
来给实现一下

00:14.850 --> 00:16.650
其实它的这个实现原理呢

00:16.650 --> 00:20.250
跟这个Gate基本上就是比较类似的

00:20.250 --> 00:22.650
首先呢就是说微信扫码登录指的

00:22.650 --> 00:26.050
就是通过这种OS2这种形式授权

00:26.050 --> 00:27.550
让我们的微信用户

00:27.550 --> 00:29.550
也就是说使用微信的身份

00:29.550 --> 00:33.150
安全的进行一个第三方网站的一个登录

00:33.150 --> 00:35.150
那在这个微信用户授权登录

00:35.150 --> 00:37.350
以接入的这个三方应用后

00:37.350 --> 00:41.350
我们三方就可以获取到用户的接口调评证

00:41.350 --> 00:43.750
然后呢其实就是我们那个令牌

00:43.750 --> 00:45.550
然后通过这个令牌

00:45.550 --> 00:47.550
也就是那个XS Token

00:47.550 --> 00:49.650
可以进行微信开发平台的

00:49.650 --> 00:52.650
一些授权关系的一个接口调用

00:52.650 --> 00:55.550
比如说我们获取微信里面的用户信息

00:55.550 --> 00:57.850
或者是一些其他的相关内容

00:57.850 --> 01:00.150
然后呢从而来达到一个

01:00.150 --> 01:02.950
我们这个微信用户基本开放信息

01:02.950 --> 01:06.650
和帮助用户实现基础开放功能这么一个需求

01:06.650 --> 01:09.350
开发流程呢其实也非常简单的

01:09.350 --> 01:14.250
首先呢它是由我们这个第三方发起微信授权的

01:14.250 --> 01:15.550
一个登录请求

01:15.550 --> 01:17.250
也就是说我比如说我们想一下

01:17.250 --> 01:19.050
昨天知乎那个场景啊

01:19.050 --> 01:20.550
当我访问知乎之后

01:20.550 --> 01:21.850
这样我给大家打开一个

01:21.850 --> 01:24.450
比如说我们这里面搜索这个知乎

01:25.750 --> 01:27.550
当我打开知乎之后

01:27.550 --> 01:28.550
那这个时候呢

01:28.550 --> 01:31.350
我们有这种这样我先退出一下

01:31.350 --> 01:33.850
退出之后我们有这种常规的登录形式

01:33.850 --> 01:37.550
还有这种就是微信扫码来进行登录

01:37.550 --> 01:39.250
那他这个指的是什么意思呢

01:39.250 --> 01:42.350
就是说我在这个知乎这个三方应用里

01:42.350 --> 01:43.850
当然账户是我啊

01:43.850 --> 01:46.850
然后呢我准备做这个微信登录

01:46.850 --> 01:51.750
首先呢我要由这个三方调用微信的一个接口

01:51.750 --> 01:53.750
也就是说我们这个第一步

01:53.750 --> 01:57.150
就是微信用户第三方发起微信授权的

01:57.150 --> 01:58.450
一个登录请求

01:58.450 --> 01:59.150
这个时候呢

01:59.150 --> 02:00.950
其实是有一个接口请求的

02:00.950 --> 02:03.750
也就是说有一个接口请求请求到微信之后

02:03.750 --> 02:05.650
然后呢微信这个时候呢

02:05.650 --> 02:07.850
他会做一件事是做什么事呢

02:07.850 --> 02:12.150
如果说我允许授权给这个第三方应用

02:12.150 --> 02:14.550
也就是说我们拉取一个授权码

02:14.550 --> 02:16.750
然后就是那个扣的对不对

02:16.750 --> 02:19.750
我会返回给这个三方网站

02:19.750 --> 02:21.850
也就是说重新定向到三方网站

02:21.850 --> 02:23.650
然后我们再通过扣的

02:23.650 --> 02:28.550
加上我们一开始备案时候的app id和这个app security

02:28.550 --> 02:31.950
通过这种app换取我们的这个xs token

02:31.950 --> 02:33.650
也就是这个令牌

02:33.650 --> 02:36.450
通过这个令牌呢进行一个接口的调用

02:36.450 --> 02:39.250
获取一个用户的基本数据资源

02:39.250 --> 02:42.150
然后呢或者帮助用户实现一些基本操作

02:42.150 --> 02:43.450
其实理论上来讲

02:43.450 --> 02:45.750
他也是一种授权码的形式

02:45.750 --> 02:48.750
实现的这种os2的一个授权过程

02:48.750 --> 02:52.250
然后呢他跟这种gate的使用啊

02:52.250 --> 02:54.250
几乎啊就是完全一致的

02:54.250 --> 02:56.850
但是呢微信也不同于gate是什么呢

02:56.850 --> 02:59.750
他对我们这种个人开发者啊

02:59.750 --> 03:02.050
相对不是特别的友好啊

03:02.050 --> 03:05.150
他这个主要是面向企业级的这个应用

03:05.150 --> 03:07.850
所以说呢这个如果说我们要实现的时候

03:07.850 --> 03:11.050
一会呢我们可能会通过这种三方插件

03:11.050 --> 03:13.450
来实现这种微信登录的形式

03:13.450 --> 03:15.250
但这里面指的是个人用户啊

03:15.250 --> 03:16.750
如果说是企业级用户

03:16.850 --> 03:19.250
就不会涉及到这个问题

03:19.250 --> 03:20.650
首先在这里给大家写了

03:20.650 --> 03:22.550
这里面有微信开发者文档

03:22.550 --> 03:25.450
包括微信的一个开放平台链接样

03:25.450 --> 03:29.050
然后呢如果说我们想调用这种微信的

03:29.050 --> 03:32.650
这个os2的形式来进行三方授权的话

03:32.650 --> 03:36.150
那你直接看这个微信开发者文档就可以了

03:36.150 --> 03:39.650
在这里面有一个网站应用微信登录开发指南

03:39.650 --> 03:41.550
准备工作呢几乎类似啊

03:41.550 --> 03:44.350
其实首先来讲就是做一个备案

03:44.350 --> 03:47.350
它这里面有整个的一个实现流程图

03:47.350 --> 03:50.950
首先也就是说我在三方访问的

03:50.950 --> 03:52.750
也就是我但是我呢

03:52.750 --> 03:54.850
必须保证是一个微信用户

03:54.850 --> 03:57.450
我请求第三方应用对不对

03:57.450 --> 03:58.950
然后第三方应用呢

03:58.950 --> 04:01.950
去请求os2的一个授权登录

04:01.950 --> 04:04.850
然后呢授权登录请求用户

04:04.850 --> 04:06.750
这时候我需要有一个确认

04:06.750 --> 04:08.150
也就是说现在啊

04:08.150 --> 04:11.750
在直户上给我打开这个二维码的窗口之后

04:11.750 --> 04:12.750
那我这个时候呢

04:12.750 --> 04:14.550
我就要进行一个扫码确认

04:14.550 --> 04:16.150
这个呢是一个关键点

04:16.150 --> 04:17.550
我扫码确认之后

04:17.550 --> 04:22.350
然后呢三方二就会给我带上一个临时的这个相应码

04:22.350 --> 04:24.150
也就是说授权码扣的

04:24.150 --> 04:25.250
扣的带上之后

04:25.250 --> 04:27.550
我在通过这种扣的APID

04:27.550 --> 04:31.250
包括APP security换取我们这个令牌

04:31.250 --> 04:32.450
拿到令牌之后

04:32.450 --> 04:36.550
那我们就可以在这个hiders里面

04:36.550 --> 04:38.450
以authorization的形式

04:38.450 --> 04:42.550
来进行我们接下来的一些数据的获取

04:42.550 --> 04:44.250
就是这么一个过程啊

04:44.250 --> 04:45.350
然后这里面都有

04:45.350 --> 04:48.850
如果说同学们在这个工作当中使用到的话

04:48.850 --> 04:50.150
你可以看一下这个文档

04:50.150 --> 04:52.350
几乎和get是完全一致的

04:52.350 --> 04:53.750
但这里面刚才也说了

04:53.750 --> 04:56.150
有一个问题就是什么问题呢

04:56.150 --> 04:56.750
我们啊

04:56.750 --> 04:58.450
这个是他的开发文档

04:58.450 --> 05:01.050
然后这里面还有一个开放平台链接

05:01.050 --> 05:03.350
开放平台链接是做什么用的

05:03.350 --> 05:06.650
其实这个开放平台链接主要的作用

05:06.650 --> 05:11.250
其实就是让我们进行一个微信的一个三方备案

05:11.250 --> 05:12.950
这个三方备案里面啊

05:12.950 --> 05:16.350
其实你首先需要去注册

05:16.350 --> 05:17.450
然后注册之后呢

05:17.450 --> 05:21.150
就可以来实现他里面的一些备案相关内容了

05:21.150 --> 05:21.650
但是呢

05:21.650 --> 05:23.850
你这个里面啊

05:23.850 --> 05:25.150
不光是注册完了

05:25.150 --> 05:26.850
你还要做一个什么呢

05:26.850 --> 05:30.250
你还要填写一个很详细的一个资料

05:30.250 --> 05:31.050
并且啊

05:31.050 --> 05:33.250
有一个问题就是呢

05:33.250 --> 05:34.550
如果说你是个人账户啊

05:34.550 --> 05:38.550
是没办法做这种三方的这个授权登录的

05:38.550 --> 05:39.250
因为什么呢

05:39.250 --> 05:41.250
他需要有一个营业执照

05:41.250 --> 05:41.950
而且呢

05:41.950 --> 05:44.250
还必须得有一个备案的预明

05:44.250 --> 05:45.050
并且呢

05:45.050 --> 05:47.050
你要花三百元钱

05:47.050 --> 05:47.750
然后呢

05:47.750 --> 05:48.650
审核十天

05:48.650 --> 05:50.350
一般的是一到三天

05:51.450 --> 05:53.650
如果同学们具备这几个特点的话

05:53.650 --> 05:54.750
那可以OK

05:54.750 --> 05:55.850
那我们来做一下

05:55.850 --> 05:56.650
但是如果说

05:57.450 --> 05:58.650
你是个人账户的话

05:58.650 --> 06:00.250
一般这个是搞不定的

06:00.250 --> 06:00.950
怎么办呢

06:00.950 --> 06:04.850
我们一般的会使用这种三方插件的形式啊

06:04.850 --> 06:06.950
来进行一个微信

06:06.950 --> 06:08.850
扫码登录的一个模拟

06:08.850 --> 06:10.350
当然了三方插件有很多

06:10.350 --> 06:10.750
然后呢

06:10.750 --> 06:12.050
我们在这个里面

06:12.050 --> 06:15.050
主要使用的就是一种叫马上登录的

06:15.050 --> 06:16.350
这个三方插件

06:16.350 --> 06:16.850
这里面呢

06:16.850 --> 06:18.750
有他的这个官网地址啊

06:18.750 --> 06:20.050
我们可以打开看一下

06:20.050 --> 06:22.150
在这里已经提前给大家打开了

06:22.150 --> 06:22.550
他呢

06:22.550 --> 06:23.950
就相对简单了

06:23.950 --> 06:25.050
你只要注册一下

06:25.050 --> 06:25.650
然后呢

06:25.650 --> 06:27.450
就有一个整个的流程图

06:27.450 --> 06:29.030
虽然他不是完整的

06:29.030 --> 06:31.150
outdoor的一个形式登录的

06:31.150 --> 06:31.850
但是呢

06:31.850 --> 06:34.950
他可以实现一个我们自己的个人网站

06:34.950 --> 06:37.050
来进行这种微信登录

06:37.050 --> 06:40.050
他的实现相对就比较简单了

06:40.050 --> 06:40.650
这个呢

06:40.650 --> 06:42.450
就是偶尔速兔的这个过程

06:42.450 --> 06:44.050
是由这种马上登录啊

06:44.050 --> 06:45.850
给我们做了一个中间代理

06:45.850 --> 06:47.750
其实我们可以这么理解啊

06:47.750 --> 06:48.350
怎么来做

06:48.350 --> 06:50.350
首先我这里面是已经登录过的

06:50.350 --> 06:51.650
当我退出之后

06:51.650 --> 06:54.250
那他主介面应该是这个样子的

06:54.250 --> 06:55.150
我们怎么办

06:55.150 --> 06:57.450
直接在右上角有一个微信登录

06:57.450 --> 06:58.650
我们点击一下

06:58.650 --> 06:59.350
点击一下

06:59.350 --> 07:01.950
直接这时候出了一个二维码啊

07:01.950 --> 07:02.850
我们直接呢

07:02.850 --> 07:05.150
通过扫一下这个二维码

07:05.150 --> 07:06.250
当你扫完之后啊

07:06.250 --> 07:08.650
这里面就是说在手机上

07:08.650 --> 07:11.450
微信里面就有一个立即登录的一个提示

07:11.450 --> 07:12.950
当我们登录成功之后

07:12.950 --> 07:15.750
那这个就回到我们那个应用的界面了

07:15.750 --> 07:17.050
如果说你没有应用啊

07:17.050 --> 07:18.650
这个里面是什么都没有的

07:18.650 --> 07:18.950
然后呢

07:18.950 --> 07:20.550
我点击创建应用

07:20.550 --> 07:22.350
创建应用你这个随便写啊

07:22.350 --> 07:24.450
比如说太司他然后哦

07:25.650 --> 07:27.050
also to

07:27.050 --> 07:29.550
然后直接这个写一个名字就可以啊

07:29.550 --> 07:31.550
那我这时候就创建应用

07:31.550 --> 07:31.950
此时呢

07:31.950 --> 07:34.850
这个里面也是需要一个什么的回调函数

07:34.850 --> 07:37.650
也就是说我们直接的去

07:37.650 --> 07:41.450
进行这个三方的一个授权的一个请求的时候

07:41.450 --> 07:41.850
然后呢

07:41.850 --> 07:45.850
如果说马上能够同意我们这个授权的请求之后

07:45.850 --> 07:48.050
他会给我们返回一个UIL

07:48.050 --> 07:49.250
那这个UIL呢

07:49.250 --> 07:51.250
是我们这头要做定义的

07:51.250 --> 07:51.850
所以说呢

07:51.850 --> 07:53.350
这个UIL还有一个特点

07:53.350 --> 07:53.950
之上呢

07:53.950 --> 07:56.950
他必须得是这个外网的UIL

07:56.950 --> 07:59.150
而且是必须得是备案的

07:59.150 --> 07:59.750
这个是呢

07:59.750 --> 08:01.150
最低的一个标准

08:01.150 --> 08:02.850
当然但是这个马上登录呢

08:02.850 --> 08:04.350
他不限制你是个人账户

08:04.350 --> 08:05.550
以及企业账户

08:05.550 --> 08:06.450
谁都可以用啊

08:06.450 --> 08:08.850
但是这个备案这个条件是必须的

08:08.850 --> 08:10.950
也就是说你在这里添的域名

08:10.950 --> 08:12.650
一定不能是内网的

08:12.650 --> 08:14.650
而是一个外网的应设地址

08:14.650 --> 08:15.650
所以说这个咋办呢

08:15.650 --> 08:18.050
我们如果说有外网的备案

08:18.050 --> 08:18.750
域名的话

08:18.750 --> 08:20.750
那我们可以做一个穿墙

08:20.750 --> 08:22.650
内网穿透来实现这个

08:22.650 --> 08:23.550
如果说没有呢

08:23.550 --> 08:24.350
也不要紧啊

08:24.350 --> 08:27.550
因为我们真实的这个企业开发里

08:27.550 --> 08:29.650
都会有这种真实的域名的

08:29.650 --> 08:30.550
所以说在这里边呢

08:30.550 --> 08:32.150
我就使用我自己的域名

08:32.150 --> 08:32.950
来给同学们啊

08:32.950 --> 08:33.950
做一个掩饰

08:33.950 --> 08:36.050
这个是不要紧的啊

08:36.050 --> 08:37.250
如果说我创业一个

08:37.250 --> 08:38.950
比如说我在这里边输入一个域名

08:40.850 --> 08:51.650
httvs.mahal.api.hvafaset.com

08:51.650 --> 08:52.050
然后呢

08:52.050 --> 08:53.250
这个就创业好了

08:53.250 --> 08:54.350
我这里面写一个

08:54.350 --> 08:54.850
当然有

08:54.850 --> 08:56.750
可以有这个2D目录的啊

08:56.750 --> 08:58.450
我这里面写一个Test

08:58.450 --> 08:59.250
ok

08:59.250 --> 09:00.650
那创业好应用之后啊

09:00.650 --> 09:03.250
它是会针对这个应用

09:03.250 --> 09:05.150
给你一个secret key

09:05.150 --> 09:06.250
这个secret key呢

09:06.250 --> 09:09.250
就是我们一会儿来实现它的时候

09:09.250 --> 09:10.250
所用到的

09:10.250 --> 09:12.550
也就是说我们给这个

09:12.550 --> 09:14.750
马上登陆获取收钱码的时候

09:14.750 --> 09:17.050
我们需要传递的这么一个值啊

09:17.050 --> 09:18.750
然后你放到这里就ok了

09:18.750 --> 09:20.050
拿到这个地址怎么办呢

09:20.050 --> 09:21.050
拿到这个地址啊

09:21.050 --> 09:24.350
其实我们实现的功能也非常简单

09:24.350 --> 09:26.750
就是把我们上级课通过gate

09:26.750 --> 09:28.850
来实现的这个情况呢

09:28.850 --> 09:31.350
我们通过这种马上登陆的形式

09:31.350 --> 09:33.150
也就是说通过扫码的形式

09:33.150 --> 09:35.050
来实现一下就ok了

09:35.050 --> 09:36.050
那怎么来实现呢

09:36.050 --> 09:36.650
首先呢

09:36.650 --> 09:39.450
我们得先看一下它这个API文档啊

09:39.450 --> 09:41.250
实现起来是非常简单的

09:41.250 --> 09:43.950
它这里面有一个实现的流程图

09:43.950 --> 09:44.250
然后呢

09:44.250 --> 09:45.850
我们跟着它这个流程图

09:45.850 --> 09:47.650
或者跟着它的这个

09:47.650 --> 09:49.350
底下的这个相关的API啊

09:49.350 --> 09:51.650
就一步一步的就能完成啊

09:51.650 --> 09:53.050
咱们来看一下这个API吧

09:53.050 --> 09:53.750
其实图呢

09:53.750 --> 09:54.850
和这个微信啊

09:54.850 --> 09:56.350
工作的这个情况

09:56.350 --> 09:57.550
几乎是差不多的

09:57.650 --> 09:58.350
只不过呢

09:58.350 --> 10:00.850
它中间给我们做了一个封装

10:00.850 --> 10:03.650
那这个我们之前介绍的这个OAZUTOR

10:03.650 --> 10:05.350
四种授权形式里面

10:05.350 --> 10:07.750
其实是不会有这种形式的

10:07.750 --> 10:09.850
因为它是一个完全独立的

10:09.850 --> 10:11.450
因为主要啊

10:11.450 --> 10:12.750
做这种微信授权

10:12.750 --> 10:15.350
其实是由它做完成之后

10:15.350 --> 10:15.850
然后呢

10:15.850 --> 10:18.750
让我们来进行对它的一个扫码调用

10:18.750 --> 10:19.550
来实现的

10:19.550 --> 10:22.150
而并不是我们真正的扫的这种微信

10:22.150 --> 10:23.850
给我们提供的这个二维码

10:23.850 --> 10:24.950
同学们这个要知道

10:24.950 --> 10:26.850
但是它实现效果呢

10:26.850 --> 10:27.950
也是完全意志的

10:27.950 --> 10:29.050
然后我们扫码之后

10:29.050 --> 10:32.450
也是会获取我们自己的微信的

10:32.450 --> 10:33.650
相关的个人信息

10:33.650 --> 10:34.850
这个是没问题的

10:34.850 --> 10:35.150
好的

10:35.150 --> 10:36.450
那咱们看一下

10:36.450 --> 10:39.050
获取登录二维码的相关信息接口

10:39.050 --> 10:39.750
这个里边呢

10:39.750 --> 10:41.150
首先第一个就是

10:41.150 --> 10:43.350
我们微信扫码登录本网站后

10:43.350 --> 10:44.250
会自动跳转

10:44.250 --> 10:46.150
能用列表的一个创新应用

10:46.150 --> 10:47.750
然后直接输入英明城

10:47.750 --> 10:49.550
这一步咱们是不是已经做过了

10:49.550 --> 10:49.950
这个呢

10:49.950 --> 10:51.950
就是一会我们是需要使用到的

10:51.950 --> 10:52.650
所以说

10:52.650 --> 10:54.250
我们要把这个继装在哪啊

10:54.250 --> 10:56.050
就是在我们的这个

10:56.450 --> 10:57.750
比如说我点击一下

10:57.750 --> 10:58.650
那刚才这个呢

10:58.650 --> 10:59.950
其实我不会使用这个

10:59.950 --> 11:01.150
我就是使用上面这个

11:01.150 --> 11:02.650
给大家做一下演示

11:02.650 --> 11:04.150
首先这个secrets key

11:04.150 --> 11:05.650
还是这个

11:05.650 --> 11:07.450
包括这个UIL

11:07.450 --> 11:09.150
然后这个是必须的啊

11:09.150 --> 11:10.050
这个我们要记住

11:10.050 --> 11:10.550
而且呢

11:10.550 --> 11:11.650
这里面说了

11:11.650 --> 11:13.650
就是这个UIL必须是公网的

11:13.650 --> 11:15.050
你要是内网呢

11:15.050 --> 11:16.850
你就得做一个内网传透

11:16.850 --> 11:17.750
然后呢

11:17.750 --> 11:19.650
而且你必须保证有一个公网的

11:19.650 --> 11:20.850
被语按IP啊

11:20.850 --> 11:22.450
这个是一定要有的

11:22.450 --> 11:23.450
那这就是这一块

11:23.450 --> 11:25.450
我们直接再看这个APM

11:25.550 --> 11:27.650
获取到这个secrets key之后

11:27.650 --> 11:29.050
这里面就开始

11:29.050 --> 11:29.850
首先第一步

11:29.850 --> 11:32.250
进行我们这个请求了啊

11:32.250 --> 11:33.650
请求打请求呢

11:33.650 --> 11:34.050
这个呢

11:34.050 --> 11:35.750
是一个基础的请求地址

11:35.750 --> 11:37.250
我们直接拿回去就好了

11:37.250 --> 11:38.350
然后呢

11:38.350 --> 11:40.650
我们要把我们这个secrets key

11:40.650 --> 11:42.750
要给他进行一个添加

11:42.750 --> 11:44.450
那这个是一定要有的

11:44.450 --> 11:45.450
才说secrets key

11:45.450 --> 11:46.350
他这里面说了

11:46.350 --> 11:48.450
就是我们要马上登录服务器时

11:48.450 --> 11:50.750
需要进行验证的一个评证

11:50.750 --> 11:52.650
也就是说刚才我们在这一块

11:52.650 --> 11:54.050
注册被按的时候

11:54.150 --> 11:56.550
给我们生成的这个secrets key啊

11:57.850 --> 11:59.050
我们首先呢

11:59.050 --> 12:01.050
是需要请求这个接口

12:01.050 --> 12:01.550
然后呢

12:01.550 --> 12:03.150
请求这个接口之后

12:03.150 --> 12:03.850
这里面啊

12:03.850 --> 12:05.050
有一个说明

12:05.050 --> 12:06.850
登录二维码的相关信息

12:06.850 --> 12:09.450
通过开发者项目专属secrets key

12:09.450 --> 12:10.350
获取到

12:10.350 --> 12:12.450
然后那个二维码相关的

12:12.450 --> 12:13.950
temporate user ID

12:13.950 --> 12:18.050
包括我们的QR code的return URL

12:18.050 --> 12:19.150
也就是说

12:19.150 --> 12:20.750
他给我们返回一个什么呢

12:20.750 --> 12:23.450
返回我们一个绘画的这个评证

12:23.450 --> 12:24.950
你也可以把它理解为

12:24.950 --> 12:26.950
就是我们这次的

12:26.950 --> 12:28.350
一个什么呢

12:28.350 --> 12:30.550
授权的一个授权码啊

12:30.550 --> 12:31.650
可以这么理解啊

12:31.650 --> 12:33.350
把这个temporate user ID

12:33.350 --> 12:34.650
理解为授权码

12:34.650 --> 12:35.350
之后呢

12:35.350 --> 12:37.250
我们这个就是

12:37.250 --> 12:39.450
通过返回的这个code

12:39.450 --> 12:40.350
return URL

12:40.350 --> 12:42.550
生成一个二维码

12:42.550 --> 12:43.450
然后这个里面

12:43.450 --> 12:45.950
有一些参数的描述信息

12:45.950 --> 12:48.050
然后包括每个k值

12:48.050 --> 12:48.550
y值

12:48.550 --> 12:51.150
包括他的错误码的一个描述状态

12:51.150 --> 12:51.450
这样

12:51.450 --> 12:53.550
其实我们可以去访问一下

12:53.550 --> 12:55.550
我们虽然不生成这个二维码

12:55.550 --> 12:57.550
但是我们可以直接拿着他

12:57.550 --> 12:58.850
来进行一下调用

13:00.150 --> 13:02.350
就在这个里面进行调用就可以啊

13:02.350 --> 13:03.550
那调用怎么调用呢

13:03.550 --> 13:04.050
首先啊

13:04.050 --> 13:05.850
我们这个secret key啊

13:05.850 --> 13:07.550
是要进行一个替换的

13:07.550 --> 13:08.450
也就是说

13:08.450 --> 13:09.450
这个secret key

13:09.450 --> 13:11.850
是要替换成我们直接生成的

13:11.850 --> 13:13.250
这一个就ok了

13:13.250 --> 13:14.150
把它换过来

13:14.150 --> 13:15.150
ok

13:15.150 --> 13:15.850
这时候呢

13:15.850 --> 13:16.850
我们就成功了

13:16.850 --> 13:19.050
因为这个应用是我们自己创建的吗

13:19.050 --> 13:20.850
他给了我们一个

13:20.850 --> 13:22.450
临时的token

13:22.450 --> 13:22.950
然后呢

13:22.950 --> 13:23.650
并且了

13:23.650 --> 13:26.650
给了我们一个二维码的UAL地址

13:26.650 --> 13:27.550
那我们呢

13:27.550 --> 13:29.850
就可以其实出示化的时候

13:29.850 --> 13:31.150
比如说我前端

13:31.150 --> 13:33.750
咱们之前已经做了这个gate

13:33.750 --> 13:35.750
我在添加一个微信扫码登录

13:35.750 --> 13:36.750
1.1

13:36.750 --> 13:37.950
去请求这个接口

13:37.950 --> 13:38.850
请求这个接口

13:38.850 --> 13:41.850
返回这个二维码的这个q的

13:41.850 --> 13:43.050
Return URL之后

13:43.050 --> 13:44.550
那我重新的

13:44.550 --> 13:46.950
生成一个二维码图片

13:46.950 --> 13:47.350
然后呢

13:47.350 --> 13:48.450
我们来进行扫码

13:48.450 --> 13:49.750
这个是第一步啊

13:50.950 --> 13:53.050
接下来你这个第一步做完之后呢

13:53.050 --> 13:55.650
其实你就是继续往下走了

13:55.650 --> 13:57.650
没有几步非常简单的

13:57.650 --> 13:58.050
然后呢

13:58.050 --> 14:00.450
我们就是这个请求完成之后

14:00.450 --> 14:01.850
这个请求也是盖的请求啊

14:01.850 --> 14:02.850
这就不说了

14:02.850 --> 14:04.050
登陆成功之后

14:04.050 --> 14:05.250
我们扫码吗

14:05.250 --> 14:07.350
扫完码登陆成功之后

14:07.350 --> 14:07.950
他呢

14:07.950 --> 14:10.150
会回调给开发者服务器

14:10.150 --> 14:12.750
也就是说会回调给我们一个什么呢

14:12.750 --> 14:14.850
给我们一个地址啊

14:14.850 --> 14:15.950
那这个地址呢

14:15.950 --> 14:17.050
是告诉我们

14:17.050 --> 14:18.350
就是说

14:18.350 --> 14:19.750
地址里面就是

14:19.750 --> 14:22.150
返回给我们一些相关的信息

14:22.150 --> 14:24.050
比如说这里面有u的id

14:24.050 --> 14:25.350
他们的u的id

14:25.350 --> 14:28.250
包括我们微信的nickname以及vita

14:28.250 --> 14:30.750
包括我们的这个ip address

14:30.750 --> 14:32.950
这些内容是都会有的啊

14:32.950 --> 14:33.650
请求呢

14:33.650 --> 14:34.450
是post的

14:34.450 --> 14:34.850
有

14:34.850 --> 14:36.050
也就是说这个请求

14:36.050 --> 14:38.150
其实是由他来请求我们

14:38.150 --> 14:38.750
但是呢

14:38.750 --> 14:40.750
他给我们的一个

14:40.750 --> 14:42.950
我们这个请求的纸里面

14:42.950 --> 14:44.650
是有这些相关信息的

14:44.650 --> 14:45.650
我们并且呢

14:45.650 --> 14:47.650
会给他一个返回值

14:47.650 --> 14:48.750
他把这些信息

14:48.750 --> 14:50.650
作为这个请求穿梭

14:50.650 --> 14:52.550
请求体里面给我们传过来

14:52.550 --> 14:53.050
然后呢

14:53.050 --> 14:55.350
我们再给他返回一个想体

14:55.350 --> 14:58.550
那整个这个过程就ok

14:58.550 --> 14:59.050
搞定了

14:59.050 --> 15:00.750
那我们就能实现一个登入了

15:00.750 --> 15:01.950
这样啊

15:01.950 --> 15:03.050
我们接来呢

15:03.050 --> 15:03.950
就来实现一下

15:03.950 --> 15:04.350
然后呢

15:04.350 --> 15:05.350
我们共同啊

15:05.350 --> 15:06.850
看一下这个流程

15:06.850 --> 15:08.150
那么实现这个案例呢

15:08.150 --> 15:09.650
首先刚才我们也说了

15:09.650 --> 15:10.350
这个里面呢

15:10.350 --> 15:11.850
他使用一个公网ip

15:11.850 --> 15:13.350
所以说在这个里面

15:13.350 --> 15:15.450
我就使用自己的服务器来做一下

15:15.450 --> 15:17.350
然后我也不做内网穿透了

15:17.350 --> 15:18.750
同学们要实现的时候

15:18.750 --> 15:20.850
最好搞一个外网的这个域名啊

15:20.850 --> 15:22.350
然后咱们来实现

15:22.350 --> 15:24.150
嗯怎么来实现呢

15:24.150 --> 15:25.150
其实也非常简单啊

15:25.150 --> 15:28.650
就是把昨天我们实现的这种效果

15:28.650 --> 15:31.850
也就是说这种login登录和这个home界面

15:31.850 --> 15:32.450
一会呢

15:32.450 --> 15:34.150
我获取到这个二维码

15:34.150 --> 15:35.150
请求成功之后

15:35.150 --> 15:36.850
也就是说授权成功

15:36.850 --> 15:37.350
然后呢

15:37.350 --> 15:38.650
我把这个

15:38.650 --> 15:41.050
我的微信的信息给做一个渲染

15:41.050 --> 15:42.650
就ok了

15:42.650 --> 15:43.250
流程呢

15:43.250 --> 15:44.550
其实非常简单

15:44.550 --> 15:46.550
昨天咱们在这个

15:46.550 --> 15:47.950
我们下面啊

15:47.950 --> 15:48.850
正常登录下面

15:48.850 --> 15:50.550
有一个get hub账户登录

15:50.550 --> 15:51.550
那我接下来呢

15:51.550 --> 15:52.250
再写一个

15:52.250 --> 15:53.650
比如说我这个里面呢

15:53.650 --> 15:56.250
我们就使用一部的形式来进行请求了

15:56.250 --> 15:58.350
然后再测试一种形式

15:58.350 --> 16:00.650
那比如说我在这个里面再订一个标签

16:00.650 --> 16:01.350
这个标签呢

16:01.350 --> 16:04.350
我们就是使用微信扫码形式进行登录

16:04.350 --> 16:05.050
就可以了

16:05.050 --> 16:06.250
这里面写一下

16:06.250 --> 16:11.150
使用微信扫码形式进行登录

16:12.350 --> 16:13.150
ok 之后呢

16:13.150 --> 16:14.750
我把这个服务开起来啊

16:14.750 --> 16:16.250
这个服务是

16:16.250 --> 16:17.450
7000的端口啊

16:17.450 --> 16:18.050
那我跑起来

16:18.050 --> 16:18.450
一会呢

16:18.450 --> 16:20.050
我得给他部署上线啊

16:20.050 --> 16:22.250
否则咱们是在这个外网访问不到的

16:23.250 --> 16:24.450
localhost的7000

16:24.450 --> 16:26.550
testablechild的这个就可以了

16:26.550 --> 16:27.350
可以了之后呢

16:27.350 --> 16:28.450
我们首先第一步

16:28.450 --> 16:31.350
我们是要去请求这个接口

16:31.350 --> 16:32.450
那请求这个接口呢

16:32.450 --> 16:34.750
其实我们去要获取

16:34.750 --> 16:36.550
二维码的一个连接地址啊

16:36.550 --> 16:37.650
我们通过这个地址

16:37.650 --> 16:38.850
生成一个二维码

16:38.850 --> 16:39.650
但这个里面呢

16:39.650 --> 16:41.650
有一个敏感信息是什么

16:41.650 --> 16:42.550
secret key

16:42.550 --> 16:43.150
所以说呢

16:43.150 --> 16:44.050
我们啊

16:44.050 --> 16:46.250
用我们自己的这个服务

16:46.250 --> 16:47.550
来做一下中转

16:47.550 --> 16:48.550
也就是说

16:48.550 --> 16:50.150
我一会点击这个时候

16:50.150 --> 16:52.550
我去请求我本地的一个接口

16:52.550 --> 16:52.950
然后呢

16:52.950 --> 16:54.550
我本服务的接口呢

16:54.550 --> 16:57.250
再来去请求这个内容值

16:57.250 --> 16:58.750
也就是说请求这个接口

17:00.050 --> 17:00.650
马上登录

17:00.650 --> 17:02.050
给我们提供的这个接口

17:02.050 --> 17:04.650
那请求完这个马上登录的接口之后

17:04.650 --> 17:05.650
我们返回值

17:05.650 --> 17:07.850
然后再由我们自己的服务器啊

17:07.850 --> 17:09.850
传递给我们的前端

17:09.850 --> 17:10.650
就ok了

17:10.650 --> 17:11.850
就是这么一个流程

17:11.850 --> 17:12.450
那首先呢

17:12.450 --> 17:14.650
我给他绑定一个点击实践

17:14.650 --> 17:15.850
比如说这个叫

17:16.650 --> 17:17.450
login

17:17.450 --> 17:19.650
给他一个ID名称

17:19.650 --> 17:21.850
叫login by wordchild

17:23.150 --> 17:24.050
好

17:24.050 --> 17:26.950
把这个ID绑定完成之后

17:26.950 --> 17:28.550
那我们就创建一下

17:28.550 --> 17:29.550
这个实践

17:29.550 --> 17:33.150
add event listener

17:33.150 --> 17:35.050
然后直接的这是click

17:35.050 --> 17:35.950
由于是一步的

17:35.950 --> 17:37.850
我们这里面采取这种

17:37.850 --> 17:39.150
废驰的写法

17:39.150 --> 17:41.550
所以说给他一个sync

17:41.550 --> 17:42.250
修始佛

17:42.250 --> 17:42.950
然后呢

17:42.950 --> 17:45.650
我们这里面是一个箭头函数

17:45.650 --> 17:47.550
那这样我们就开始定义了

17:47.550 --> 17:49.450
is等于一个废尺

17:49.450 --> 17:49.850
当然了

17:49.850 --> 17:51.450
你做这个废尺

17:51.450 --> 17:52.450
定义的时候

17:52.450 --> 17:54.050
那我们这里面就得有一个

17:54.050 --> 17:57.050
我们自己的后端的地址啊

17:57.050 --> 17:58.150
那这个地址是什么呢

17:58.150 --> 17:59.650
我们在哪里创建

17:59.650 --> 18:00.850
其实在这个里面

18:00.850 --> 18:01.650
给大家看一下

18:01.650 --> 18:03.050
我在router test里面

18:03.050 --> 18:04.550
这里面有这个我child的

18:04.550 --> 18:05.550
两个静态界面

18:05.550 --> 18:06.450
处理完成之后

18:06.450 --> 18:07.550
那我定一个什么呢

18:08.550 --> 18:12.550
定义一个获取我们的这个

18:12.550 --> 18:17.550
二维码url的一个地址啊

18:17.550 --> 18:18.550
请求地址

18:18.550 --> 18:21.550
请求接口

18:21.550 --> 18:22.550
然后呢

18:22.550 --> 18:24.550
我们这里面router.get

18:24.550 --> 18:26.550
比如说那我们这个叫什么

18:26.550 --> 18:29.550
这个叫giturl

18:29.550 --> 18:31.550
qrcode

18:31.550 --> 18:35.120
code

18:35.120 --> 18:37.120
url

18:38.120 --> 18:39.120
然后呢

18:39.120 --> 18:40.120
这里面写一下

18:42.120 --> 18:43.120
然后其实

18:43.120 --> 18:45.120
我们就是想在这个里面

18:45.120 --> 18:47.120
来真正的获取到

18:47.120 --> 18:49.120
也就是说

18:49.120 --> 18:52.120
进行这个接口的调用啊

18:52.120 --> 18:54.120
那我就把它写到这里面

18:54.120 --> 18:56.120
那首先你要使用的时候

18:56.120 --> 18:58.120
这里面一定要还是使用

18:58.120 --> 18:59.120
excel对吧

18:59.120 --> 19:00.120
那我就写一下

19:00.120 --> 19:03.120
const res等于一个

19:03.120 --> 19:04.120
avait

19:04.120 --> 19:05.120
然后呢

19:05.120 --> 19:06.120
我们这个是

19:06.120 --> 19:07.120
git

19:07.120 --> 19:08.120
首先是它的地址

19:08.120 --> 19:09.120
其实也没有其他的

19:09.120 --> 19:10.120
我们直接的

19:10.120 --> 19:12.120
就把这个secret key

19:12.120 --> 19:13.120
给它添加上了

19:13.120 --> 19:15.120
或者说你想要是

19:15.120 --> 19:16.120
我们做这种

19:16.120 --> 19:17.120
就是说

19:17.120 --> 19:18.120
一个长量的话

19:18.120 --> 19:19.120
那我这里面提前写了

19:19.120 --> 19:20.120
所以说呢

19:20.120 --> 19:21.120
那我就把它

19:21.120 --> 19:23.120
给它加一个反应号

19:23.120 --> 19:24.120
也就是说

19:24.120 --> 19:25.120
使用模板字幕串

19:25.120 --> 19:26.120
引入一个长量

19:26.120 --> 19:27.120
那这样呢

19:27.120 --> 19:28.120
就方便我们

19:28.120 --> 19:30.120
以后的代码做一个

19:30.120 --> 19:32.120
美护对吧

19:32.120 --> 19:35.120
那就是secret access key

19:35.120 --> 19:36.120
好的

19:36.120 --> 19:37.120
那之后呢

19:37.120 --> 19:38.120
我就可以打印一下

19:38.120 --> 19:39.120
我们这个响应结果

19:39.120 --> 19:40.120
啊

19:40.120 --> 19:41.120
那当然了

19:41.120 --> 19:42.120
前端呢

19:42.120 --> 19:43.120
现在是需要做一件事

19:43.120 --> 19:46.120
就是去请求我这个地址

19:46.120 --> 19:47.120
那地址前面呢

19:47.120 --> 19:48.120
你是需要加上

19:48.120 --> 19:49.120
前址链接的

19:49.120 --> 19:50.120
也就是说

19:50.120 --> 19:51.120
test的watch out的

19:51.120 --> 19:53.120
那我这里面就加一下

19:53.120 --> 19:55.120
给它test

19:55.120 --> 19:57.120
下面的watch out的

19:57.120 --> 19:58.120
去请求这个地址

19:58.120 --> 19:59.120
当然前端

19:59.120 --> 20:00.120
现在我们

20:00.120 --> 20:02.120
也不需要让它返回什么呢

20:02.120 --> 20:03.120
咱们先看

20:03.120 --> 20:04.120
后端这个请求

20:04.120 --> 20:06.120
因为我们是

20:06.120 --> 20:07.120
主要通过后端

20:07.120 --> 20:08.120
去请求它

20:08.120 --> 20:09.120
来返回

20:09.120 --> 20:10.120
刚才我们看到的

20:10.120 --> 20:11.120
这个结果值

20:11.120 --> 20:12.120
之后呢

20:12.120 --> 20:13.120
再返回给我们

20:13.120 --> 20:14.120
前端就ok了

20:14.120 --> 20:15.120
对不对

20:15.120 --> 20:16.120
那首先第一步

20:16.120 --> 20:17.120
其实就是

20:17.120 --> 20:18.120
由这个前端处发

20:18.120 --> 20:19.120
处发

20:19.120 --> 20:20.120
调用我们后端这个接口

20:20.120 --> 20:21.120
由后端接口

20:21.120 --> 20:23.120
真正的调用

20:23.120 --> 20:24.120
这个

20:24.120 --> 20:25.120
我们微信的这个

20:25.120 --> 20:26.120
二维码的

20:26.120 --> 20:29.120
获取这样一个接口啊

20:29.120 --> 20:30.120
好

20:30.120 --> 20:31.120
那我们来看一下

20:31.120 --> 20:32.120
首先我们点击

20:32.120 --> 20:33.120
这个

20:33.120 --> 20:34.120
进行登录

20:34.120 --> 20:35.120
点击完成之后

20:35.120 --> 20:36.120
那我们看我们这边

20:36.120 --> 20:37.120
是不是有

20:37.120 --> 20:38.120
ok 这时候呢

20:38.120 --> 20:39.120
我们已经拿到

20:39.120 --> 20:40.120
这个马上登录

20:40.120 --> 20:41.120
给我们返回的

20:41.120 --> 20:42.120
这个响应值

20:42.120 --> 20:43.120
那响应值

20:43.120 --> 20:44.120
咱们也看到了

20:44.120 --> 20:45.120
应该是在这个

20:45.120 --> 20:47.120
res.data里面

20:47.120 --> 20:49.120
我们可以一起查看一下啊

20:49.120 --> 20:50.120
再刷新一下

20:50.120 --> 20:51.120
我们点击

20:51.120 --> 20:52.120
使用微信扫码登录

20:52.120 --> 20:53.120
ok 整个的这个呢

20:53.120 --> 20:55.120
就是我们需要的值啊

20:55.120 --> 20:56.120
然后呢

20:56.120 --> 20:57.120
但是我们需要的值呢

20:57.120 --> 20:58.120
也没有这么多

20:58.120 --> 20:59.120
我们给它做一个包装

20:59.120 --> 21:00.120
那这个包装里面

21:00.120 --> 21:02.120
首先明确一点

21:02.120 --> 21:03.120
它已经给我们标识了

21:03.120 --> 21:04.120
如果说

21:04.120 --> 21:05.120
arricode

21:05.120 --> 21:07.120
它要是等于等于零

21:07.120 --> 21:08.120
我们在做这事

21:08.120 --> 21:09.120
也就是说

21:09.120 --> 21:10.120
不等于零的时候

21:10.120 --> 21:11.120
那我们给它等吧

21:11.120 --> 21:13.120
直接就给它return掉

21:13.120 --> 21:14.120
也就是说

21:14.120 --> 21:16.120
不让它做下面的事了啊

21:16.120 --> 21:17.120
之后呢

21:17.120 --> 21:18.120
我们想返给

21:18.120 --> 21:20.120
我们自己的前端

21:20.120 --> 21:22.120
cdx.body

21:22.120 --> 21:23.120
等于

21:23.120 --> 21:24.120
我们首先code

21:24.120 --> 21:25.120
自己的code

21:25.120 --> 21:26.120
为零

21:26.120 --> 21:27.120
然后呢

21:27.120 --> 21:28.120
我们再给它一个

21:28.120 --> 21:29.120
data值

21:29.120 --> 21:31.120
那这个data值里面呢

21:31.120 --> 21:32.120
我们就挑一些

21:32.120 --> 21:33.120
现在这个里面

21:33.120 --> 21:34.120
我们需要的值

21:34.120 --> 21:36.120
比如说IS.data

21:36.120 --> 21:39.120
然后呢

21:39.120 --> 21:40.120
或者说我直接这样

21:40.120 --> 21:41.120
我们把这个值啊

21:41.120 --> 21:42.120
统一的

21:42.120 --> 21:43.120
就给它拿过去

21:43.120 --> 21:44.120
就可以了

21:44.120 --> 21:45.120
data值

21:45.120 --> 21:46.120
就让它等于

21:46.120 --> 21:47.120
IS.data

21:47.120 --> 21:48.120
然后这里面

21:48.120 --> 21:49.120
IS.data

21:49.120 --> 21:50.120
是输出第一层

21:50.120 --> 21:51.120
第二层呢

21:51.120 --> 21:52.120
是里面

21:52.120 --> 21:53.120
还有一个对象

21:53.120 --> 21:54.120
那我直接的点data

21:54.120 --> 21:55.120
那这样呢

21:55.120 --> 21:57.120
它就返回给我这个前端了

21:57.120 --> 21:58.120
好的

21:58.120 --> 21:59.120
那我们看一下

21:59.120 --> 22:00.120
是不是可以

22:00.120 --> 22:01.120
我在login.atml里面

22:01.120 --> 22:02.120
做完这步之后

22:02.120 --> 22:03.120
那我直接的

22:03.120 --> 22:05.120
要解析出来

22:05.120 --> 22:06.120
它的一个

22:06.120 --> 22:07.120
我们的这个

22:07.120 --> 22:09.120
json形式的这个

22:09.120 --> 22:10.120
想结果

22:10.120 --> 22:11.120
那我直接的就是

22:11.120 --> 22:13.120
IS.json

22:13.120 --> 22:14.120
之后呢

22:14.120 --> 22:16.120
我就打印这个result

22:16.120 --> 22:17.120
就可以了

22:17.120 --> 22:18.120
const

22:18.120 --> 22:19.120
result

22:21.120 --> 22:22.120
之后

22:22.120 --> 22:23.120
好的

22:23.120 --> 22:24.120
看一下可不可以啊

22:24.120 --> 22:26.120
检查一下元素

22:26.120 --> 22:27.120
然后呢

22:27.120 --> 22:28.120
我们刷新一下

22:28.120 --> 22:29.120
刷新一下

22:29.120 --> 22:31.120
使用微信扫码形式登录

22:31.120 --> 22:32.120
OK

22:32.120 --> 22:33.120
那这个值呢

22:33.120 --> 22:34.120
已经拿过来

22:34.120 --> 22:35.120
arraycode的也脑底翻了

22:35.120 --> 22:36.120
这个里面

22:36.120 --> 22:37.120
有问题啊

22:37.120 --> 22:38.120
有爆错

22:38.120 --> 22:39.120
那我们来看一下

22:39.120 --> 22:40.120
是

22:40.120 --> 22:41.120
为什么爆错

22:41.120 --> 22:43.120
是因为我们的IS

22:43.120 --> 22:44.120
应该是什么

22:44.120 --> 22:46.120
IS.data

22:46.120 --> 22:47.120
点arraycode的

22:47.120 --> 22:48.120
对不对

22:48.120 --> 22:49.120
少写了一个

22:49.120 --> 22:50.120
IS.data

22:50.120 --> 22:51.120
应该是这样

22:51.120 --> 22:52.120
那咱们再来试一下

22:52.120 --> 22:53.120
好的我一点击

22:53.120 --> 22:54.120
使用微信扫码形式登录

22:54.120 --> 22:55.120
OK

22:55.120 --> 22:56.120
code呢和data

22:56.120 --> 22:57.120
都已经过来了

22:57.120 --> 22:58.120
那拿过来之后呢

22:58.120 --> 23:02.120
其实我们是想用data.qrcode

23:02.120 --> 23:03.120
returnurl

23:03.120 --> 23:05.120
来生成一个二维码

23:05.120 --> 23:06.120
这个二维码怎么生成呢

23:06.120 --> 23:07.120
就是在前端

23:07.120 --> 23:09.120
好多种生成二维码的形式

23:09.120 --> 23:11.120
那在这个里面呢

23:11.120 --> 23:12.120
有一个三方插件

23:12.120 --> 23:13.120
就是

23:13.120 --> 23:14.120
qrcode的js

23:14.120 --> 23:16.120
专门用来进行

23:16.120 --> 23:17.120
二维码生成的

23:17.120 --> 23:18.120
我们可以使用它

23:18.120 --> 23:19.120
当然这个

23:19.120 --> 23:20.120
你说的这个

23:20.120 --> 23:21.120
API文档在哪

23:21.120 --> 23:22.120
其实

23:22.120 --> 23:24.120
它这个是非常方便的

23:24.120 --> 23:25.120
我们这样

23:25.120 --> 23:26.120
我们随便百度

23:26.120 --> 23:27.120
找一个API文档

23:27.120 --> 23:29.120
在这个w3c

23:29.120 --> 23:30.120
school里面

23:30.120 --> 23:31.120
就应该是有这个

23:31.120 --> 23:32.120
菜手教审里面

23:32.120 --> 23:33.120
也是有这种的

23:33.120 --> 23:34.120
怎么使用

23:34.120 --> 23:36.120
首先你创建一个什么

23:36.120 --> 23:37.120
创建一个容器

23:37.120 --> 23:38.120
容器呢来做

23:38.120 --> 23:40.120
整个二维码的一个

23:40.120 --> 23:41.120
包裹容器之后呢

23:41.120 --> 23:43.120
你就可以实力化

23:43.120 --> 23:45.120
出来这个qrcode之后呢

23:45.120 --> 23:46.120
New出来一个

23:46.120 --> 23:47.120
就是我们需要的二维码

23:47.120 --> 23:48.120
当然这个里面

23:48.120 --> 23:49.120
有一个text的

23:49.120 --> 23:50.120
text的呢

23:50.120 --> 23:51.120
就是我们

23:51.120 --> 23:53.120
获取到的这个地址

23:53.120 --> 23:54.120
也就是说一会

23:54.120 --> 23:55.120
我们渲染的时候

23:55.120 --> 23:56.120
生成二维码的时候

23:56.120 --> 23:57.120
就是通过这个

23:57.120 --> 23:58.120
code的return URL

23:58.120 --> 23:59.120
来实现的

23:59.120 --> 24:00.120
那首先

24:00.120 --> 24:01.120
第一步呢

24:01.120 --> 24:02.120
我们是要引入它

24:02.120 --> 24:03.120
引入它怎么引入

24:03.120 --> 24:04.120
这里面我给大家

24:04.120 --> 24:05.120
写了一个

24:05.120 --> 24:07.120
CDN的一个地址

24:07.120 --> 24:08.120
那我们直接的就是

24:08.120 --> 24:10.120
在我们的这个工程里面

24:10.120 --> 24:11.120
给它添加进去

24:11.120 --> 24:12.120
就OK了

24:12.120 --> 24:13.120
也就是说在这个

24:13.120 --> 24:14.120
sdrib

24:14.120 --> 24:15.120
我这里面src

24:15.120 --> 24:17.120
首先把它的这个

24:17.120 --> 24:19.120
生成二维码的js

24:19.120 --> 24:20.120
插件

24:20.120 --> 24:22.120
给它引入

24:22.120 --> 24:23.120
引入之后

24:23.120 --> 24:24.120
这里面也说了

24:24.120 --> 24:25.120
说的要生成一个什么呢

24:25.120 --> 24:26.120
生成一个二维码

24:26.120 --> 24:28.120
必须有一个容器

24:28.120 --> 24:29.120
那我在这个里面呢

24:29.120 --> 24:30.120
就准备了一个

24:30.120 --> 24:31.120
masker container

24:31.120 --> 24:32.120
masker container呢

24:32.120 --> 24:34.120
它其实给大家看一下

24:34.120 --> 24:35.120
说实话的时候

24:35.120 --> 24:36.120
它是不显示的

24:36.120 --> 24:37.120
我的想法是什么呢

24:37.120 --> 24:38.120
我一点击

24:38.120 --> 24:40.120
弹出一个整平的磨板

24:40.120 --> 24:41.120
然后呢

24:41.120 --> 24:42.120
这个整平的磨板

24:42.120 --> 24:44.120
也就是说这个磨板呢

24:44.120 --> 24:45.120
它是有一个

24:45.120 --> 24:46.120
里面

24:46.120 --> 24:47.120
中心位置

24:47.120 --> 24:48.120
显示这个二维码

24:48.120 --> 24:49.120
就OK了

24:49.120 --> 24:50.120
比如说那我把这个

24:50.120 --> 24:51.120
zindex999

24:51.120 --> 24:52.120
background

24:52.120 --> 24:53.120
position fix

24:53.120 --> 24:54.120
display now

24:54.120 --> 24:55.120
哎 你看

24:55.120 --> 24:56.120
是不是就出来了

24:56.120 --> 24:57.120
然后呢

24:57.120 --> 24:58.120
在里面

24:58.120 --> 24:59.120
把这个qrcode

24:59.120 --> 25:00.120
生成一下

25:00.120 --> 25:01.120
就OK了

25:01.120 --> 25:02.120
因为它是生成一个

25:02.120 --> 25:03.120
cars比较强

25:03.120 --> 25:04.120
这个是相对比较简单的

25:04.120 --> 25:05.120
所以说咱们就按着

25:05.120 --> 25:06.120
它这个

25:06.120 --> 25:07.120
API文的

25:07.120 --> 25:08.120
来就可以了

25:08.120 --> 25:09.120
那当我拿到

25:09.120 --> 25:10.120
这个result

25:10.120 --> 25:11.120
结果之后

25:11.120 --> 25:12.120
也就是说这个

25:12.120 --> 25:13.120
result

25:13.120 --> 25:14.120
当我去请求

25:14.120 --> 25:15.120
刷新一下

25:15.120 --> 25:16.120
咱们可以看一下

25:16.120 --> 25:17.120
我拿到这个结果之后

25:17.120 --> 25:19.120
其实我就用这种

25:19.120 --> 25:20.120
qrcode的return URL

25:20.120 --> 25:21.120
就可以了

25:21.120 --> 25:22.120
对不对

25:22.120 --> 25:23.120
所以说呢

25:23.120 --> 25:24.120
这种

25:24.120 --> 25:25.120
二维码生成的

25:25.120 --> 25:26.120
一个操作了

25:26.120 --> 25:29.120
那我就按着这个来啊

25:29.120 --> 25:30.120
比如说

25:30.120 --> 25:31.120
我把这一段

25:31.120 --> 25:32.120
复制一下啊

25:32.120 --> 25:33.120
这里面呢

25:33.120 --> 25:35.120
我们简单的了解一下

25:35.120 --> 25:36.120
首先呢

25:36.120 --> 25:38.120
我们cars的qrcode

25:38.120 --> 25:39.120
new qrcode的

25:39.120 --> 25:40.120
第一个

25:40.120 --> 25:41.120
这个type的指的是谁呢

25:41.120 --> 25:43.120
指的是我们这个id

25:43.120 --> 25:44.120
指啊

25:44.120 --> 25:45.120
那我把这个元素

25:45.120 --> 25:46.120
也就是说标签的id

25:46.120 --> 25:47.120
指啊

25:47.120 --> 25:48.120
我把它放上去

25:48.120 --> 25:49.120
第二个呢

25:49.120 --> 25:50.120
就是我们获取到

25:50.120 --> 25:51.120
生成二维码的

25:51.120 --> 25:52.120
这个链接地址啊

25:52.120 --> 25:54.120
那这个链接地址是啥呢

25:54.120 --> 25:55.120
在我们这个里面

25:55.120 --> 25:56.120
链接地址

25:56.120 --> 25:57.120
其实就是

25:57.120 --> 25:58.120
我们获取到的这个

25:58.120 --> 26:00.120
qrcode的return URL

26:00.120 --> 26:01.120
对不对

26:01.120 --> 26:02.120
那我直接的

26:02.120 --> 26:03.120
就把它给重新写一下

26:03.120 --> 26:04.120
is

26:04.120 --> 26:05.120
也就是说

26:05.120 --> 26:09.120
result.data.qr

26:09.120 --> 26:10.120
urlcode

26:10.120 --> 26:11.120
那宽度和高度

26:11.120 --> 26:12.120
咱就不说了

26:12.120 --> 26:13.120
其他的咱们这个

26:13.120 --> 26:14.120
color level

26:14.120 --> 26:15.120
这无所谓的事啊

26:15.120 --> 26:16.120
咱们直接的

26:16.120 --> 26:17.120
就放在这里

26:17.120 --> 26:18.120
就ok了

26:18.120 --> 26:19.120
那最后呢

26:19.120 --> 26:20.120
它就能在这个基础上

26:20.120 --> 26:21.120
生成一个二维码

26:21.120 --> 26:22.120
啊

26:22.120 --> 26:23.120
当你生成完成之后呢

26:23.120 --> 26:24.120
那我们这个

26:24.120 --> 26:25.120
masker

26:25.120 --> 26:26.120
contenter呢

26:26.120 --> 26:27.120
那我让它显示出来

26:27.120 --> 26:28.120
就可以了对不对

26:28.120 --> 26:29.120
那也就是说在这一步

26:29.120 --> 26:34.120
maskercontenter.style.daceplay

26:34.120 --> 26:35.120
由于这个里面呢

26:35.120 --> 26:36.120
使用了容器里面

26:36.120 --> 26:37.120
使用了flex布局

26:37.120 --> 26:38.120
所以说呢

26:38.120 --> 26:40.120
从这个那变成flex就ok了

26:40.120 --> 26:41.120
那好的

26:41.120 --> 26:42.120
我们点击一下

26:42.120 --> 26:43.120
点击一下之后

26:43.120 --> 26:44.120
这个二维码就显示出来了

26:44.120 --> 26:45.120
当然那比较小

26:45.120 --> 26:47.120
我们可以通过这个文字

26:47.120 --> 26:48.120
数字

26:48.120 --> 26:49.120
也就是说把它的这个

26:49.120 --> 26:50.120
尺寸单位

26:50.120 --> 26:51.120
点击

26:51.120 --> 26:52.120
这个二维码就比较大了

26:52.120 --> 26:53.120
然后如果说

26:53.120 --> 26:54.120
你再想加入其他一些

26:54.120 --> 26:56.120
比如说使用微信

26:56.120 --> 26:57.120
登录二维码

26:57.120 --> 26:59.120
这些修式的文字啊

26:59.120 --> 27:00.120
也是可以的

27:00.120 --> 27:01.120
这个呢就不做

27:01.120 --> 27:02.120
过多的描述了

27:02.120 --> 27:03.120
那咱们获取到

27:03.120 --> 27:04.120
二维码之后啊

27:04.120 --> 27:05.120
现在就开始

27:05.120 --> 27:06.120
要做一个

27:06.120 --> 27:07.120
我们扫码的操作了

27:07.120 --> 27:09.120
其实在扫码操作的里面

27:09.120 --> 27:10.120
我们这里面

27:10.120 --> 27:11.120
其实要准备

27:11.120 --> 27:12.120
接下来的内容

27:12.120 --> 27:13.120
如果说

27:13.120 --> 27:14.120
你一旦扫码成功之后

27:14.120 --> 27:16.120
也就是说用户

27:16.120 --> 27:17.120
登录成功之后

27:17.120 --> 27:18.120
马上登录呢

27:18.120 --> 27:19.120
这个app

27:19.120 --> 27:21.120
服务器会给开发者服务器

27:21.120 --> 27:22.120
也就是说

27:22.120 --> 27:23.120
我们这个服务器

27:23.120 --> 27:25.120
他要发送一个用户信息

27:25.120 --> 27:27.120
这个请求呢

27:27.120 --> 27:28.120
是一个post的类型

27:28.120 --> 27:29.120
然后内容格式呢

27:29.120 --> 27:31.120
就为接责格式

27:31.120 --> 27:32.120
参数呢

27:32.120 --> 27:33.120
是这种形式

27:33.120 --> 27:34.120
那他的这个

27:34.120 --> 27:35.120
请求参数里面

27:35.120 --> 27:36.120
就包含了

27:36.120 --> 27:37.120
我们的这个UDRID

27:37.120 --> 27:38.120
temporary UDRID

27:38.120 --> 27:40.120
包括我们的Nikoname

27:40.120 --> 27:41.120
Veta

27:41.120 --> 27:42.120
包括我们的登录地址

27:42.120 --> 27:43.120
是都有的

27:43.120 --> 27:44.120
所以说

27:44.120 --> 27:45.120
我们要怎么做

27:45.120 --> 27:46.120
我们在这个里面

27:46.120 --> 27:47.120
其实也非常简单

27:47.120 --> 27:48.120
就是说

27:48.120 --> 27:49.120
我刚才

27:49.120 --> 27:50.120
创建应用的时候

27:50.120 --> 27:51.120
登录过期啊

27:51.120 --> 27:52.120
重新扫一下

27:52.120 --> 27:53.120
我这个

27:53.120 --> 27:54.120
创建应用的时候

27:54.120 --> 27:56.120
其实就是会有一个

27:56.120 --> 27:58.120
我们的回调的地址

27:58.120 --> 27:59.120
那这个回调的地址呢

27:59.120 --> 28:00.120
其实就是

28:00.120 --> 28:01.120
由我们

28:01.120 --> 28:03.120
在自己的服务器上定义的啊

28:03.120 --> 28:04.120
那我们把这个

28:04.120 --> 28:05.120
服务器的这个

28:05.120 --> 28:06.120
回调地址啊

28:06.120 --> 28:07.120
来定义一下

28:07.120 --> 28:08.120
也就是说

28:08.120 --> 28:10.120
其实我们监听的是什么

28:10.120 --> 28:11.120
是这个Test

28:11.120 --> 28:12.120
Watchat

28:12.120 --> 28:13.120
Callback

28:13.120 --> 28:14.120
那这个地址呢

28:14.120 --> 28:15.120
由我们来进监听

28:15.120 --> 28:17.120
如果说马上登录

28:17.120 --> 28:18.120
也就是说

28:18.120 --> 28:19.120
它识别到

28:19.120 --> 28:20.120
我们扫码成功之后

28:20.120 --> 28:21.120
它就会调用

28:21.120 --> 28:22.120
我们自己服务器的

28:22.120 --> 28:23.120
这个请求

28:23.120 --> 28:24.120
然后调用请求之后呢

28:24.120 --> 28:26.120
传递给我们的参数

28:26.120 --> 28:27.120
其实就是

28:27.120 --> 28:28.120
我们这个

28:28.120 --> 28:30.120
微信里面的用户信息

28:30.120 --> 28:31.120
之后呢

28:31.120 --> 28:32.120
我们还需要

28:32.120 --> 28:33.120
给他传一个

28:33.120 --> 28:34.120
这里面不也说了吗

28:34.120 --> 28:35.120
我们给他传什么呢

28:35.120 --> 28:36.120
我们要给他

28:36.120 --> 28:37.120
传一个状态码

28:37.120 --> 28:38.120
比如说

28:38.120 --> 28:39.120
Ivercode

28:39.120 --> 28:40.120
以及这个Message

28:40.120 --> 28:41.120
告诉他呢

28:41.120 --> 28:43.120
我们这个请求成功了

28:43.120 --> 28:44.120
然后呢

28:44.120 --> 28:45.120
他就会在我们的

28:45.120 --> 28:46.120
手机里面

28:46.120 --> 28:48.120
来进行显示的

28:48.120 --> 28:49.120
那我们来做一下

28:49.120 --> 28:50.120
首先呢

28:50.120 --> 28:51.120
我们在自己的这个

28:51.120 --> 28:52.120
服务器下面

28:52.120 --> 28:53.120
我们要把这个

28:53.120 --> 28:55.120
接收信息的接口

28:55.120 --> 28:56.120
给定一下

28:56.120 --> 28:57.120
这个叫接收

28:57.120 --> 28:58.120
我们的这个

28:58.120 --> 28:59.120
微信

28:59.120 --> 29:02.120
账户信息接口

29:02.120 --> 29:03.120
好

29:03.120 --> 29:04.120
把他先给定一下

29:04.120 --> 29:05.120
这个接口啊

29:05.120 --> 29:06.120
这里面呢

29:06.120 --> 29:07.120
还得跟同学们说一下

29:07.120 --> 29:08.120
他的这个请求方式呢

29:08.120 --> 29:09.120
是Post的请求的

29:09.120 --> 29:10.120
所以说

29:10.120 --> 29:11.120
这个我们要知道一下

29:11.120 --> 29:13.120
Router.post

29:13.120 --> 29:14.120
把这个地址写上

29:14.120 --> 29:15.120
写上之后

29:15.120 --> 29:16.120
Sync

29:16.120 --> 29:17.120
然后呢

29:17.120 --> 29:18.120
CTX

29:19.120 --> 29:20.120
这个里面

29:20.120 --> 29:21.120
我们先接

29:21.120 --> 29:22.120
他的这个

29:22.120 --> 29:23.120
给我们的这个

29:23.120 --> 29:24.120
返回值

29:25.120 --> 29:26.120
也就是说

29:26.120 --> 29:27.120
UtherInfo

29:27.120 --> 29:28.120
那这个返回值呢

29:28.120 --> 29:29.120
其实就是

29:29.120 --> 29:30.120
代表着我们的

29:30.120 --> 29:31.120
这个相关的

29:31.120 --> 29:32.120
微信的用户信息啊

29:32.120 --> 29:33.120
这个是

29:33.120 --> 29:34.120
获取

29:34.120 --> 29:35.120
微信的

29:35.120 --> 29:37.120
用户信息

29:37.120 --> 29:38.120
怎么获取

29:38.120 --> 29:41.120
从这个CDS.request

29:43.820 --> 29:44.820
request.body里面

29:44.820 --> 29:45.820
具有获取

29:45.820 --> 29:46.820
然后呢

29:46.820 --> 29:47.820
其实

29:47.820 --> 29:48.820
我就能打印出来

29:48.820 --> 29:49.820
这个UtherInfo

29:49.820 --> 29:50.820
但现在有一种情况

29:50.820 --> 29:51.820
什么呢

29:51.820 --> 29:52.820
我们打印不出来的

29:52.820 --> 29:53.820
因为什么呢

29:53.820 --> 29:54.820
因为他这个是

29:54.820 --> 29:55.820
呃

29:55.820 --> 29:56.820
内网地址

29:56.820 --> 29:57.820
如果说我们Local

29:57.820 --> 29:58.820
的期间开内网地址

29:58.820 --> 29:59.820
是看不到的

29:59.820 --> 30:00.820
所以说呢

30:00.820 --> 30:01.820
我们得使用外网

30:01.820 --> 30:03.820
这样可以给大家试一下啊

30:03.820 --> 30:04.820
我们现在给他

30:04.820 --> 30:05.820
做一个监听

30:05.820 --> 30:06.820
然后我们刷新一下

30:06.820 --> 30:07.820
走一遍这个流程

30:07.820 --> 30:08.820
好的

30:08.820 --> 30:09.820
我使用微信

30:09.820 --> 30:10.820
扫码金登入

30:10.820 --> 30:11.820
那此时呢

30:11.820 --> 30:12.820
我们这时候

30:12.820 --> 30:13.820
就可以使用这种

30:13.820 --> 30:14.820
形式

30:14.820 --> 30:15.820
来进行登录了

30:15.820 --> 30:16.820
微信

30:16.820 --> 30:17.820
当我点击

30:17.820 --> 30:18.820
立即登录之后啊

30:18.820 --> 30:19.820
然后呢

30:19.820 --> 30:20.820
这个里面

30:20.820 --> 30:21.820
会给我反回一个

30:21.820 --> 30:22.820
什么呢

30:22.820 --> 30:23.820
登录成功

30:23.820 --> 30:24.820
然后登录成功

30:24.820 --> 30:25.820
但是这个里面

30:25.820 --> 30:26.820
有一个问题

30:26.820 --> 30:27.820
我这是什么也没收到的

30:27.820 --> 30:28.820
对不对

30:28.820 --> 30:29.820
因为这个呢

30:29.820 --> 30:30.820
是本地环境

30:30.820 --> 30:31.820
它其实反给我的

30:31.820 --> 30:32.820
登录成功

30:32.820 --> 30:33.820
是在这种

30:33.820 --> 30:34.820
线上环境下

30:34.820 --> 30:35.820
来实现登录成功

30:35.820 --> 30:36.820
那咋办呢

30:36.820 --> 30:37.820
我需要把我们的工程

30:37.820 --> 30:38.820
打包线上

30:38.820 --> 30:39.820
给大家来看一下

30:39.820 --> 30:40.820
打包过程呢

30:40.820 --> 30:42.820
也是相对简单的

30:42.820 --> 30:43.820
然后呢

30:43.820 --> 30:44.820
我做一个推送

30:44.820 --> 30:45.820
推送完成之后呢

30:45.820 --> 30:47.820
那我就可以来进行

30:47.820 --> 30:48.820
我们线上的一个

30:48.820 --> 30:49.820
PMR发布了啊

30:49.820 --> 30:51.820
我把这个给他发布一下

30:51.820 --> 30:53.820
发布完成之后

30:53.820 --> 30:55.820
我就做一个监听

30:55.820 --> 30:56.820
这样呢

30:56.820 --> 30:57.820
我重新再打开一个中端

30:57.820 --> 30:58.820
这个中端呢

30:58.820 --> 30:59.820
就做我们线上环境的

30:59.820 --> 31:00.820
一个监听

31:00.820 --> 31:02.820
这里面PMR

31:02.820 --> 31:03.820
我们把这个

31:03.820 --> 31:04.820
线上的服务器

31:04.820 --> 31:05.820
打开啊

31:05.820 --> 31:06.820
给大家来看一下

31:06.820 --> 31:07.820
这些东西

31:07.820 --> 31:08.820
这些东西

31:08.820 --> 31:09.820
这些东西

31:09.820 --> 31:10.820
这些东西

31:10.820 --> 31:12.820
把这个线上的服务器

31:12.820 --> 31:13.820
打开啊

31:13.820 --> 31:14.820
给大家看一下

31:14.820 --> 31:15.820
PMR

31:15.820 --> 31:16.820
在这个线上

31:16.820 --> 31:17.820
来看一下日志

31:17.820 --> 31:18.820
好的

31:18.820 --> 31:19.820
那此时呢

31:19.820 --> 31:20.820
我就把这个

31:20.820 --> 31:21.820
线上的地址

31:21.820 --> 31:22.820
给打开

31:22.820 --> 31:23.820
ATTP

31:23.820 --> 31:24.820
S

31:24.820 --> 31:25.820
帽号

31:25.820 --> 31:26.820
反省

31:26.820 --> 31:27.820
好

31:27.820 --> 31:28.820
打开之后

31:28.820 --> 31:29.820
这里面有一个问题

31:29.820 --> 31:30.820
啊

31:30.820 --> 31:31.820
其实我们还得

31:31.820 --> 31:32.820
重新进行

31:32.820 --> 31:33.820
打包

31:33.820 --> 31:34.820
因为我们这个地址

31:34.820 --> 31:35.820
啊

31:35.820 --> 31:36.820
其实前面修饰啊

31:36.820 --> 31:37.820
没有必要加上

31:37.820 --> 31:38.820
这个Test

31:38.820 --> 31:39.820
顺行夹

31:39.820 --> 31:40.820
以作为路径

31:40.820 --> 31:41.820
来进查找的

31:41.820 --> 31:42.820
所以说我只需要

31:42.820 --> 31:43.820
一个

31:43.820 --> 31:44.820
Callback

31:44.820 --> 31:45.820
就ok的啊

31:45.820 --> 31:46.820
所以说呢

31:46.820 --> 31:47.820
在这个里面呢

31:47.820 --> 31:48.820
我还需要

31:48.820 --> 31:49.820
重新进行一下

31:49.820 --> 31:50.820
打包

31:50.820 --> 31:52.820
Gate Commits

31:52.820 --> 31:53.820
然后Gate Push一下

31:53.820 --> 31:54.820
Push一下之后

31:54.820 --> 31:55.820
我们重新呢

31:55.820 --> 31:56.820
给他做一下

31:57.820 --> 31:58.820
不属

31:58.820 --> 31:59.820
不属之后

31:59.820 --> 32:00.820
同学们

32:00.820 --> 32:01.820
注意观察这里

32:01.820 --> 32:02.820
如果说

32:02.820 --> 32:03.820
这个不属成功之后

32:03.820 --> 32:04.820
那我们这里面呢

32:04.820 --> 32:05.820
就应该是有一个

32:05.820 --> 32:06.820
响应的

32:06.820 --> 32:07.820
也就是说

32:07.820 --> 32:08.620
操作处理啊

32:09.620 --> 32:09.820
好的

32:09.820 --> 32:14.420
那我把这个界面呢调到左面供咱们方便来进行查看啊

32:14.420 --> 32:14.620
好的

32:14.620 --> 32:15.720
已经部署完成了

32:15.720 --> 32:16.820
部署完成之后呢

32:16.820 --> 32:19.020
那我现在就开始来做一个操作

32:19.020 --> 32:20.320
使用微信扫码登作

32:20.320 --> 32:21.320
首先你注意

32:21.320 --> 32:23.420
现在已经是线上的环境了

32:23.420 --> 32:25.720
因为他需要我们外网来进行访问

32:25.720 --> 32:26.420
对吧

32:26.420 --> 32:29.420
那我们直接呢打开我们的手机微信

32:29.420 --> 32:30.420
点击扫码登作

32:30.420 --> 32:31.020
此时啊

32:31.020 --> 32:32.220
我这个手机里面

32:32.220 --> 32:34.820
其实现在就有了一个我们这个应用

32:34.820 --> 32:36.320
因为这个应用的名字

32:36.320 --> 32:37.820
叫斯达雷的太斯的

32:37.820 --> 32:39.120
可以给大家看一下啊

32:39.120 --> 32:39.820
这个里面呢

32:39.820 --> 32:44.620
我就会有了这个斯达雷的太斯的来给大家看一下名字

32:44.620 --> 32:46.420
是叫斯达雷的太斯的

32:46.420 --> 32:47.020
然后呢

32:47.020 --> 32:49.520
我这个里面显示的也是这个名字

32:49.520 --> 32:49.920
之后呢

32:49.920 --> 32:51.720
我点击立即登录

32:51.720 --> 32:54.920
我这个里面就应该会有这个响应值的啊

32:54.920 --> 32:55.320
好的

32:55.320 --> 32:56.320
我点击登录了

32:56.320 --> 32:57.120
点击登录呢

32:57.120 --> 33:00.520
但是我这个里面现在提示的是回调服务器失败

33:00.520 --> 33:01.420
这个是因为呢

33:01.420 --> 33:05.820
是因为我们现在还没有给他添加我们的一个

33:05.820 --> 33:06.620
响应值

33:06.620 --> 33:07.920
因为这个文档里面说了

33:07.920 --> 33:09.420
就是你成功之后

33:09.420 --> 33:11.320
你得给我一个响应值

33:11.320 --> 33:13.520
也就是说在最下面这一块

33:13.520 --> 33:15.620
我们直接的在开发这个服务器

33:15.620 --> 33:17.120
要给马上开发

33:17.120 --> 33:18.220
做一个响应

33:18.220 --> 33:19.020
响应结果呢

33:19.020 --> 33:23.920
就是以接责性是输出一个Ivercode和message就ok了

33:23.920 --> 33:24.920
但是目前来看

33:24.920 --> 33:27.420
我们这个基本上是已经成功了

33:27.420 --> 33:27.920
为什么呢

33:27.920 --> 33:32.320
因为我们已经拿到了我的微信上的相关的信息

33:32.320 --> 33:33.720
所以说拿到之后呢

33:33.720 --> 33:35.420
那我们要做两件事

33:35.420 --> 33:36.720
第一件事是什么呢

33:36.720 --> 33:39.220
我们肯定是要进行一个跳转的

33:39.220 --> 33:40.520
也就是说这个界面

33:40.520 --> 33:42.920
其实我们在登录完成之后

33:42.920 --> 33:44.520
在这个里面给大家看一下

33:44.520 --> 33:45.620
我们登录完成之后

33:45.620 --> 33:46.420
他是要跳转

33:46.420 --> 33:49.620
但是这种阿甲克斯的跳转是没办法实现的

33:49.620 --> 33:50.820
所以说怎么办呢

33:50.820 --> 33:54.420
我们可以简单的使用一种轮巡的形式来做跳转

33:54.420 --> 33:54.820
然后呢

33:54.820 --> 33:57.620
如果说我查询到某一个接口里面

33:57.620 --> 33:59.020
需要获取到的信息

33:59.020 --> 34:01.420
也就是说这个UserInfo的信息

34:01.420 --> 34:02.820
它里面有值的话

34:02.820 --> 34:03.820
那我就让它跳转

34:03.820 --> 34:05.020
跳转到Home界面

34:05.020 --> 34:07.720
也就是说直接的从这个界面跳转到Home

34:07.720 --> 34:08.820
是这种形式

34:08.820 --> 34:13.420
Home再去请求指定了某一个接口来进渲染就OK了

34:13.420 --> 34:14.820
那怎么来做这个事呢

34:14.820 --> 34:15.720
首先啊

34:15.720 --> 34:20.320
我们要在这个我们Login界面发出这个阿维码

34:20.320 --> 34:22.120
也就是说显示出阿维码之后

34:22.120 --> 34:25.020
我们做一个跳转的检测

34:25.020 --> 34:29.520
比如说我们这个trickUserInfo

34:29.520 --> 34:32.320
那我们定义这么一个函数

34:32.320 --> 34:32.820
然后呢

34:32.820 --> 34:33.920
在这个函数里面

34:33.920 --> 34:36.820
我们做一个阿迦克斯的轮寻就可以了

34:36.820 --> 34:41.720
也就是说Counts的trickUserInfo等于一个减头寒朔

34:41.720 --> 34:42.220
然后呢

34:42.220 --> 34:48.720
这个里面我直接的Counts的RES等于一个VitVit

34:48.720 --> 34:49.320
然后呢

34:49.320 --> 34:51.920
这个里面就是TestWordChill的

34:51.920 --> 34:55.320
那我这个里面就叫guideUserInfo

34:55.320 --> 34:57.720
guideUserInfo

34:57.720 --> 34:58.120
OK

34:58.120 --> 34:58.920
这是前端

34:58.920 --> 34:59.920
这里面给大家写

34:59.920 --> 35:00.920
这个叫什么

35:00.920 --> 35:03.020
获取用户区区

35:03.020 --> 35:06.720
轮群获取用户信息

35:06.720 --> 35:08.220
也就是说你微信那头

35:08.220 --> 35:10.720
你如果说用户在手机上扫码之后

35:10.720 --> 35:13.220
那你一定会返回这个用户信息的

35:13.220 --> 35:13.520
对不对

35:13.520 --> 35:15.020
那我在这个里面是收到料的

35:15.020 --> 35:15.820
所以说呢

35:15.820 --> 35:18.320
我就不断的去请求你这个UserInfo

35:18.320 --> 35:19.420
什么时候你有职了

35:19.420 --> 35:21.120
那我就什么时候就给你拿过来

35:21.120 --> 35:23.920
然后这里面加一个async修制服务

35:23.920 --> 35:24.420
之后呢

35:24.420 --> 35:29.420
我们再打印一个ResultCounts的Result

35:29.420 --> 35:33.520
等于一个Vit as.json值

35:33.520 --> 35:35.520
我们就获取他的这个结果值

35:35.520 --> 35:36.020
之后呢

35:36.020 --> 35:39.920
我把这个Result结果给打印出来就OK

35:39.920 --> 35:40.920
如果说你有了

35:40.920 --> 35:42.120
那我直接就给你停

35:42.120 --> 35:43.420
但是说咱们轮选

35:43.420 --> 35:44.420
轮选怎么办

35:44.420 --> 35:45.920
我直接的这个外面

35:45.920 --> 35:51.120
我还得做一个什么Count timer

35:51.120 --> 35:54.220
等于setInterview

35:54.220 --> 35:57.320
也就是说用这种setInterview的形式

35:57.320 --> 35:59.820
来做一个轮选就可以了

35:59.820 --> 36:00.420
时间呢

36:00.420 --> 36:02.420
我们就给他订两秒钟

36:02.420 --> 36:04.720
去请求一次这个接口啊

36:04.720 --> 36:04.920
好的

36:04.920 --> 36:06.320
那这面做完了之后

36:06.320 --> 36:07.120
后段这一块

36:07.120 --> 36:09.820
我们还得需要把这个接口订一下

36:09.820 --> 36:13.320
那我这个里面获取用户信息

36:13.320 --> 36:14.820
咱们都知道这个用户信息

36:14.820 --> 36:17.020
其实是在这个UserInfo

36:17.020 --> 36:18.820
也就是说马上开发

36:18.820 --> 36:20.320
请求我们这个接口的时候

36:20.320 --> 36:23.620
他作为这个请求题给我们反过来了

36:23.620 --> 36:25.120
那在这个请求题理由

36:25.120 --> 36:25.920
我们怎么办

36:25.920 --> 36:27.220
我这样为了简单

36:27.220 --> 36:30.520
我在这里面创建了一个全局的一个变量

36:30.520 --> 36:32.220
那我可以用全局的变量

36:32.220 --> 36:34.320
来把它给进行一下接收

36:34.320 --> 36:36.020
也就是说这里面UserInfo

36:36.020 --> 36:38.020
因为我这里已经定义好UserInfo了

36:38.020 --> 36:38.520
所以说呢

36:38.520 --> 36:41.120
我直接的让他来做一个复制就可以了

36:41.120 --> 36:41.620
然后呢

36:41.620 --> 36:42.520
我把刚才啊

36:42.520 --> 36:44.420
马上开发给我们提的问题

36:44.420 --> 36:46.520
也给他进行一下处理

36:46.520 --> 36:46.920
也就是说

36:46.920 --> 36:49.420
其实我们是没有给他响应值的

36:49.420 --> 36:50.420
响应值的要什么呢

36:50.420 --> 36:50.920
在这个里面

36:50.920 --> 36:54.120
他说了要一个Iricode和Message

36:54.120 --> 36:56.120
那我这里面都给他添上

36:56.120 --> 36:56.920
Iricode

36:56.920 --> 36:57.920
那我给他一个链

36:57.920 --> 37:00.320
链代表着他说的请求成功了

37:00.320 --> 37:00.920
对不对

37:00.920 --> 37:01.620
Message呢

37:01.620 --> 37:04.420
然后我直接这里面写一句话

37:04.420 --> 37:08.420
叫我已经请求成功了

37:08.420 --> 37:09.220
OK

37:09.220 --> 37:09.420
好的

37:09.420 --> 37:10.920
当这个处理完成之后呢

37:10.920 --> 37:12.720
我这个UserInfo有值了

37:12.720 --> 37:13.620
并且呢

37:13.620 --> 37:15.320
我给马上开发也返回值了

37:15.320 --> 37:16.420
这样在我手机上

37:16.420 --> 37:19.220
就能看到是一个正确的请求成功的

37:19.220 --> 37:20.320
这么一个状态了

37:20.320 --> 37:20.820
之后呢

37:20.820 --> 37:22.620
我就把这个接口来定一下

37:22.620 --> 37:23.120
也就是说

37:23.120 --> 37:25.520
getUserInfo这个接口

37:25.520 --> 37:26.620
那我在这个里面呢

37:26.620 --> 37:27.720
就来写一下

37:27.720 --> 37:29.220
router.get

37:29.220 --> 37:30.920
然后这个里面是

37:30.920 --> 37:33.120
getUserInfo

37:33.120 --> 37:36.420
然后thinkctx

37:36.420 --> 37:38.320
之后在这个里面我来做

37:38.320 --> 37:40.120
那我直接的怎么做呢

37:40.120 --> 37:43.420
其实我就把这个ctx.body

37:43.420 --> 37:44.120
我就给谁发

37:44.120 --> 37:45.920
我觉得是不是把UserInfo给他发

37:45.920 --> 37:47.020
我就可以了

37:47.020 --> 37:47.720
code零

37:47.720 --> 37:49.120
然后我们这里面写一个

37:49.120 --> 37:53.320
UserInfo这个结果给他输出

37:53.320 --> 37:54.020
但是输出啊

37:54.020 --> 37:54.820
咱们刚才也说了

37:54.820 --> 37:55.820
为什么轮寻

37:55.820 --> 37:57.120
因为这个请求

37:57.120 --> 37:57.920
如果说

37:57.920 --> 37:59.320
你看我在这个里面

37:59.320 --> 38:00.120
如果说用户

38:00.120 --> 38:02.120
他还没有进行扫码的时候

38:02.120 --> 38:03.120
那其实这个接口

38:03.120 --> 38:06.320
我是一直得决轮寻计

38:06.320 --> 38:08.020
也就是说一直得调用的

38:08.020 --> 38:09.420
什么时候不调用了

38:09.420 --> 38:10.620
当你扫码成功之后

38:10.620 --> 38:11.220
马上开发

38:11.220 --> 38:13.520
调用了我这个callback接口

38:13.520 --> 38:14.120
那之后呢

38:14.120 --> 38:15.720
他有返回值了

38:15.720 --> 38:16.720
有返回值之后

38:16.720 --> 38:18.020
我UserInfo复制

38:18.020 --> 38:20.320
如果说UserInfo已经复制了

38:20.320 --> 38:21.820
在前端用户

38:21.820 --> 38:24.020
某一次的这个轮寻当中

38:24.020 --> 38:26.120
一定是能拿到这个UserInfo值的

38:26.120 --> 38:27.120
因为他说实话是闹嘛

38:27.120 --> 38:27.720
对不对

38:27.720 --> 38:28.620
经过这个复制的

38:28.620 --> 38:29.620
他就有值了

38:29.620 --> 38:30.520
有值之后

38:30.520 --> 38:31.520
那我在这个里面

38:31.520 --> 38:32.720
其实到最后

38:32.720 --> 38:34.520
我一定能获取到的值的

38:34.520 --> 38:36.120
那我在这里面判断一下

38:36.120 --> 38:41.120
if result.UserInfo一开始为闹

38:41.120 --> 38:41.520
对不对

38:41.520 --> 38:42.920
如果说有值了

38:42.920 --> 38:47.720
我clear把那个定时器给做一个

38:47.720 --> 38:50.520
清除clearinterview

38:50.520 --> 38:51.020
然后呢

38:51.020 --> 38:52.020
我们直接的

38:52.020 --> 38:53.420
就是把这个开门

38:54.620 --> 38:55.320
给干掉

38:55.320 --> 38:56.820
是不是就可以了

38:56.820 --> 38:57.120
好的

38:57.120 --> 38:57.720
那这样呢

38:57.720 --> 38:59.020
我们就是说

38:59.020 --> 39:01.020
不但拿到了这个结果值

39:01.020 --> 39:01.620
并且呢

39:01.620 --> 39:02.820
把这个

39:02.820 --> 39:04.220
我们定时器这个轮寻

39:04.220 --> 39:05.020
给他停止掉

39:05.020 --> 39:05.520
那这个呢

39:05.520 --> 39:06.620
就是我们的一个逻辑

39:06.620 --> 39:07.320
这样啊

39:07.320 --> 39:09.020
在打包线上测试一下

39:09.020 --> 39:11.020
打包其实速度也是比较快的

39:11.020 --> 39:12.820
然后直接我们在这个里面

39:12.820 --> 39:13.320
嗯

39:13.320 --> 39:15.320
直接的给他补出一下就可以了

39:15.320 --> 39:17.020
只要你推送到仓库之后

39:17.020 --> 39:19.120
然后这头马上就可以部署啊

39:19.120 --> 39:19.920
我在这个里面呢

39:19.920 --> 39:21.920
还是做一个pmr的监听

39:21.920 --> 39:23.320
让我们来看一下

39:23.320 --> 39:23.620
当然了

39:23.620 --> 39:25.520
这个其实监听不监听都无所谓了

39:25.520 --> 39:26.320
因为什么呢

39:26.320 --> 39:28.020
因为我们前端是可以看到

39:28.020 --> 39:29.020
想一结果值的了

39:29.020 --> 39:29.520
对吧

39:29.520 --> 39:32.420
那这样我就先暂时给大家监听上了

39:32.420 --> 39:34.120
pmr log

39:34.120 --> 39:34.620
OK

39:34.620 --> 39:35.620
监听完成之后呢

39:35.620 --> 39:37.920
那我们还得看线上这一版的啊

39:37.920 --> 39:38.520
线上这一版

39:38.520 --> 39:40.020
我们刷新一下

39:40.020 --> 39:40.720
那此时呢

39:40.720 --> 39:42.020
我需要检查元素

39:42.020 --> 39:42.520
然后呢

39:42.520 --> 39:44.220
我看这个network

39:44.220 --> 39:44.520
OK

39:44.520 --> 39:46.820
这里面好像有一个爆错

39:46.820 --> 39:50.320
那我们看一下await only wide async function

39:50.320 --> 39:52.320
此时这个爆错是说什么爆错

39:52.320 --> 39:53.520
我们看一下啊

39:53.520 --> 39:55.920
因为我们刚才调整到timer里了

39:55.920 --> 39:56.720
所以说呢

39:56.720 --> 39:58.520
这个async应该放在哪

39:58.520 --> 39:59.620
set the interval

39:59.620 --> 40:01.920
这个函数里面作为修饰服对不对

40:01.920 --> 40:02.620
所以说呢

40:02.620 --> 40:05.620
我们这个还得要重新处理一下

40:05.620 --> 40:06.120
然后呢

40:06.120 --> 40:07.920
最后给他铺实进去

40:07.920 --> 40:08.820
铺实进去之后

40:08.820 --> 40:11.220
我这里面再进行一个部署

40:11.220 --> 40:12.520
其实他速度是非常快的

40:12.520 --> 40:13.920
因为我们代码没有多少

40:13.920 --> 40:14.820
打包速度

40:14.820 --> 40:16.720
所以说是相对较快的

40:16.820 --> 40:17.620
我们刷新一下

40:17.620 --> 40:18.220
此时呢

40:18.220 --> 40:19.420
就不会有这种问题了

40:19.420 --> 40:21.220
然后我们进行扫码登录

40:21.220 --> 40:22.220
扫码登录的时候

40:22.220 --> 40:23.220
我们注意观察

40:23.220 --> 40:24.620
我们这个network里面

40:24.620 --> 40:28.020
确实看它是否发生了这个请求

40:28.020 --> 40:28.620
此时你看啊

40:28.620 --> 40:30.020
现在请求已经开始了

40:30.020 --> 40:30.620
对不对

40:30.620 --> 40:32.820
并且我们获取到的这个u的应放

40:32.820 --> 40:34.220
它是没有任何值的

40:34.220 --> 40:34.720
所以说呢

40:34.720 --> 40:37.120
那我们现在重新正式的进行一下扫码

40:37.120 --> 40:37.420
好的

40:37.420 --> 40:40.020
当我点击了这个立即登录之后

40:40.020 --> 40:42.220
我这边提示登录成功了

40:42.220 --> 40:43.220
并且你看啊

40:43.220 --> 40:44.420
这个请求也不发了

40:44.420 --> 40:45.920
不发的原因是什么呢

40:46.020 --> 40:47.420
我们两秒执行一次

40:47.420 --> 40:48.220
但是呢

40:48.220 --> 40:48.920
前几次

40:48.920 --> 40:51.020
它这个U的音方里面是没有值的

40:51.020 --> 40:52.220
到最后这一次呢

40:52.220 --> 40:55.220
U的音方已经拿到这个结果值的

40:55.220 --> 40:55.820
对不对

40:55.820 --> 40:57.220
那拿到结果值的这个事啊

40:57.220 --> 40:57.820
就简单了

40:57.820 --> 40:58.020
对吧

40:58.020 --> 40:59.620
那我们来怎么做

40:59.620 --> 41:01.820
如果说你这个result有值

41:01.820 --> 41:04.120
并且我清除了这个定时器

41:04.120 --> 41:05.120
那我直接的

41:05.120 --> 41:07.720
就是让你温到点location

41:08.820 --> 41:10.220
让你做一个跳转

41:10.220 --> 41:11.020
跳转到哪

41:11.020 --> 41:13.320
跳转到我们直接的这个

41:13.920 --> 41:14.620
home界面

41:14.620 --> 41:15.520
是不是就ok了

41:15.520 --> 41:16.420
也就是说

41:16.420 --> 41:18.620
你从原来的这个

41:18.620 --> 41:19.420
我们

41:19.420 --> 41:19.820
test

41:19.820 --> 41:20.520
我跳的

41:20.520 --> 41:22.620
直接的去跳到这个界面

41:22.620 --> 41:23.620
就ok了

41:23.620 --> 41:25.120
也就是说让它跳到这里

41:25.120 --> 41:25.520
之后呢

41:25.520 --> 41:26.620
我们从这个test

41:26.620 --> 41:28.720
我跳的home里面呢

41:28.720 --> 41:30.220
来进行一次

41:30.220 --> 41:31.820
还是这个接口的请求

41:31.820 --> 41:32.720
是不是就可以了

41:32.720 --> 41:33.420
对吧

41:33.420 --> 41:35.420
那我们把它快速完成一下

41:35.420 --> 41:36.420
其实到这里面呢

41:36.420 --> 41:38.020
我们这个扫码过程

41:38.020 --> 41:38.820
登录过程

41:38.820 --> 41:39.620
已经ok了

41:39.620 --> 41:40.220
只不过是呢

41:40.220 --> 41:43.320
我们把这个home里面的这个业务逻辑啊

41:43.320 --> 41:45.220
再给他写一下就可以了

41:45.220 --> 41:47.120
首先我们这个里面

41:47.120 --> 41:48.920
这个就不叫check

41:48.920 --> 41:49.720
有点音报了

41:49.720 --> 41:54.320
那我们叫in8UserInfo

41:54.320 --> 41:54.820
此时呢

41:54.820 --> 41:56.020
我定义完成之后

41:56.020 --> 41:57.520
我们这里面

41:57.520 --> 41:59.620
给他做一个调用啊

41:59.620 --> 42:00.120
然后呢

42:00.120 --> 42:05.620
这个就是初始化获取用户信息

42:05.620 --> 42:07.220
然后这个其实就不用轮旋了

42:07.220 --> 42:07.620
为啥呢

42:07.620 --> 42:11.620
因为你只有在这个有数据的情况下

42:11.620 --> 42:13.620
也就是说LoganAPML

42:13.620 --> 42:16.020
已经获得获取到了UserInfo之后

42:16.020 --> 42:19.020
你才会跳转到我们这个home里面

42:19.020 --> 42:19.520
所以说呢

42:19.520 --> 42:20.220
那这个里面

42:20.220 --> 42:22.120
你直接来进行使用就可以了

42:22.120 --> 42:22.920
那使用的时候

42:22.920 --> 42:23.820
其实这个里面

42:23.820 --> 42:25.420
我们的这个result结果值啊

42:25.420 --> 42:27.420
是一定会有值的

42:27.420 --> 42:28.120
对不对

42:28.120 --> 42:31.820
也就是说我们一定能获取到这个用户信息了

42:31.820 --> 42:32.820
所以说

42:32.820 --> 42:34.220
获取到用户信息

42:34.220 --> 42:36.120
其实这一步就不用做了

42:36.120 --> 42:37.220
那用户信息是啥呢

42:37.220 --> 42:38.720
我们可以看一下

42:38.720 --> 42:41.920
从刚才我们这个例子里面获取到的

42:42.020 --> 42:44.420
用户信息是不是有这个Aveta对吧

42:44.420 --> 42:47.220
其实我们就想要这个Aveta和Nikoname啊

42:47.220 --> 42:49.920
然后给它来做一个复职就可以了

42:49.920 --> 42:55.320
那我们这个里面ID给它一个Nikoname

42:55.320 --> 42:56.020
好吧

42:56.020 --> 42:56.620
然后呢

42:56.620 --> 43:00.320
我们再给它一个mg这个UserAveta

43:00.320 --> 43:02.820
把它的src给它改变一下

43:02.820 --> 43:06.020
直接的如果说你获取到值之后点src

43:06.020 --> 43:08.020
其实这个我们都会做了

43:08.020 --> 43:08.720
等于谁呢

43:08.720 --> 43:11.820
就是等于我们result点

43:11.820 --> 43:14.720
我们直接的result点里面有一个什么

43:14.720 --> 43:16.320
UserInfo对不对

43:16.320 --> 43:17.920
UserInfo.Aveta

43:22.140 --> 43:22.540
好的

43:22.540 --> 43:24.140
那这个获取到之后呢

43:24.140 --> 43:25.540
也就是说投向获取了

43:25.540 --> 43:26.840
投向获取完成之后

43:26.840 --> 43:30.240
我们现在就是再把它的这个Nikoname

43:30.240 --> 43:31.740
给来做一个获取

43:31.740 --> 43:33.540
是不是就可以了

43:33.540 --> 43:33.940
这样啊

43:33.940 --> 43:36.940
那我们直接的就拿这个Nikoname

43:36.940 --> 43:40.940
然后呢点innerhtml

43:40.940 --> 43:43.040
等于谁等于result点

43:43.040 --> 43:46.940
UserInfo.一个这里边还得找一样

43:46.940 --> 43:48.740
这个叫什么叫Nikoname

43:48.740 --> 43:49.340
同样的

43:49.340 --> 43:50.540
他们是相同的

43:50.540 --> 43:50.840
好的

43:50.840 --> 43:51.640
搞定之后呢

43:51.640 --> 43:54.240
我们在这个里面由于使用了这种fate

43:54.240 --> 43:54.840
aveta

43:54.840 --> 43:57.040
所以说我在这里面加一个sync

43:57.040 --> 43:57.440
之后呢

43:57.440 --> 43:58.940
我就进行一下打包

43:58.940 --> 44:00.540
get add点

44:00.540 --> 44:02.640
然后get call me的提交一下

44:02.640 --> 44:05.040
然后之后是get push

44:05.040 --> 44:07.040
做一个推送推送完成之后呢

44:07.040 --> 44:08.740
我做一个部署

44:08.740 --> 44:09.540
部署完成之后

44:09.540 --> 44:10.840
咱们就可以来测试一下

44:10.840 --> 44:12.140
如果说他改了之后

44:12.140 --> 44:14.240
那这个代表着我们这个

44:14.240 --> 44:15.540
基本上扫码登录

44:15.540 --> 44:17.140
这个简单的实现啊

44:17.140 --> 44:19.140
就ok了

44:19.140 --> 44:19.340
好了

44:19.340 --> 44:20.240
刷新一下界面

44:20.240 --> 44:22.640
但同时是要保证你这个部署

44:22.640 --> 44:23.840
已经成功的情况下

44:23.840 --> 44:26.340
你在做这个操作

44:26.340 --> 44:27.140
扫码登录

44:27.140 --> 44:27.740
点击

44:27.740 --> 44:28.540
然后呢

44:28.540 --> 44:30.140
我在这个手机上操作

44:30.140 --> 44:31.240
操作完成之后呢

44:31.240 --> 44:32.940
我进行立即登录

44:32.940 --> 44:33.540
立即登录

44:33.540 --> 44:36.240
我这边有登录成功之后呢

44:36.240 --> 44:38.240
它由原来的这个静态的内容

44:38.240 --> 44:40.740
变成了我微信上的这个

44:41.040 --> 44:41.740
头像

44:41.740 --> 44:42.240
然后呢

44:42.240 --> 44:42.840
照顾名呢

44:42.840 --> 44:44.440
也变成了这个多拉一梦

44:44.440 --> 44:44.940
那这样呢

44:44.940 --> 44:47.040
我们整个案例就实现了

44:47.040 --> 44:48.740
咱们在回忆头来看一下

44:48.740 --> 44:50.040
虽然说整个案例啊

44:50.040 --> 44:51.540
它不属于完整的一个

44:51.540 --> 44:54.940
奥特兔的一个授权形式来实现的

44:54.940 --> 44:55.640
但是呢

44:55.640 --> 44:58.640
对于我们做这种扫码测试的一个了解啊

44:58.640 --> 45:00.940
其实是有一个帮助的

45:00.940 --> 45:03.440
如果说你在以后开发过程当中

45:03.440 --> 45:06.040
真的要用到这种微信扫码的形式的话

45:06.040 --> 45:06.740
那怎么办

45:06.740 --> 45:08.540
你肯定是有一个企业账号的

45:08.540 --> 45:10.240
在实际的开发过程当中

45:10.240 --> 45:11.940
最简单如果说我们有条件的话

45:11.940 --> 45:15.440
也可以做一个应用的一个注册啊

45:15.440 --> 45:17.240
如果说你真的要注册了之后呢

45:17.240 --> 45:18.040
这种形式啊

45:18.040 --> 45:20.640
它也是在我们任何应用里面

45:20.640 --> 45:21.940
都可以进行实现的

45:21.940 --> 45:23.140
也是比较方便的

45:23.140 --> 45:25.840
其实真正的这个微信的这个介入

45:25.840 --> 45:26.440
这一块啊

45:26.440 --> 45:28.040
三方介入奥特兔的时候

45:29.040 --> 45:32.240
它就是完全就是使用这种授权码的形式了

45:33.540 --> 45:34.840
然后同学们可以看一下

45:34.840 --> 45:36.240
整个的一个过程

45:36.240 --> 45:38.340
是不是和授权码的形式是完全一致的

45:38.340 --> 45:39.540
包括它这个里面

45:39.540 --> 45:41.340
redirect uil

45:41.340 --> 45:43.640
with false type scope state

45:43.640 --> 45:44.840
然后整个这些

45:44.840 --> 45:46.840
就是我们获取令牌的

45:46.840 --> 45:48.140
一个奥特兔里面

45:48.140 --> 45:50.840
请求参数的一个标准模式啊

45:50.840 --> 45:51.140
然后呢

45:51.140 --> 45:51.940
其实如果说

45:51.940 --> 45:53.640
你想测整个这个流程的话

45:53.640 --> 45:55.140
那你也可以使用这种

45:55.140 --> 45:56.740
马上登录这种三方插件

45:56.740 --> 45:57.040
当然了

45:57.040 --> 45:58.440
三方插件有好多啊

45:58.440 --> 45:59.340
然后我们可以

45:59.340 --> 46:01.840
也可以使用其他的来做一下测试

46:01.840 --> 46:02.140
好的

46:02.140 --> 46:03.240
那这个案例就到这里

