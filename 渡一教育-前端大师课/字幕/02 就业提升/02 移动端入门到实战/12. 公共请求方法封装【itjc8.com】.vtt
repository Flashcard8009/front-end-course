WEBVTT

00:00.110 --> 00:04.970
各位同学 大家好 这节课我们继续按立制作的一个学习

00:04.970 --> 00:09.070
本节课我们来完成一下请求方法的一个公务封装

00:09.070 --> 00:12.910
那么我们为什么要对请求方法进行一个封装呢

00:12.910 --> 00:16.750
其实它的本质就是为了减少我们的一个代码戎鱼

00:16.750 --> 00:20.850
以及优化代码的一个可读性 包括它的这个可维护性

00:20.850 --> 00:25.450
所以说我们会对一些请求方法统一做一个封装处理

00:25.450 --> 00:27.510
我们可以想一下一个问题

00:27.710 --> 00:33.270
这个呢 是我们上节课请求我们选项卡的一个请求处理

00:33.270 --> 00:37.350
那这个请求处理面 我们使用了uniclode.call function

00:37.350 --> 00:40.070
其实它这个里面有两个问题 首先第一个

00:40.070 --> 00:45.270
如果说我多个请求的话 每一次我都得调用这种uniclode.call function

00:45.270 --> 00:47.950
这种形式来进行接口的一个请求

00:47.950 --> 00:51.910
还有第二个呢 就是说在这个请求之前以及请求之后

00:51.910 --> 00:57.230
我们没办法对它的这个请求的一个状态做出一些判断

00:57.230 --> 01:02.430
那可能说同学们有的想 我们在这个里面可以获取到它的一个fail

01:02.430 --> 01:04.350
也就是说失败的一个函数

01:04.350 --> 01:06.070
那我们直接在这个里面可以调用

01:06.070 --> 01:08.150
但是你想一些失败的操作

01:08.150 --> 01:10.430
我们是不是可以进行一些公共的处理

01:10.430 --> 01:12.910
所以说这里面就衍生出来什么呢

01:12.910 --> 01:14.750
我们的一个请求方法封装

01:14.750 --> 01:18.870
将一些我们公共的处理呢 统一的来进行一个维护

01:18.870 --> 01:21.870
这样呢就减少了我们一个代码的鱼

01:21.870 --> 01:26.550
并且呢我们这个代码以后的维护性这样呢也会强了很多

01:26.590 --> 01:27.910
那怎么来实现这个呢

01:27.910 --> 01:30.310
其实这个里面给同学们写了几个步骤

01:30.310 --> 01:32.870
我们按着这个步骤来实现就ok了

01:32.870 --> 01:36.670
首先呢如果说我想实现整个的这个方法封装

01:36.670 --> 01:41.310
那我第一先要定一个公共的atp请求的方法

01:41.310 --> 01:43.030
那定一ap请求方法怎么办呢

01:43.030 --> 01:46.270
我们可以先创建一个atp.js

01:46.270 --> 01:48.910
它呢是一个封装好的promise对象

01:48.910 --> 01:49.990
我们把它导出来

01:49.990 --> 01:52.950
作为我们每次请求的调用使用

01:52.950 --> 01:54.910
然后这个里面啊我们要注意一下

01:54.910 --> 01:57.590
就是我们这个atp.js文件

01:57.590 --> 01:59.870
它导出的这个promise对象里面

01:59.870 --> 02:04.750
一定是内部进行了我们uniclode.co.function的一个方法调用

02:04.750 --> 02:06.990
因为这个呢是我们一个请求的核心

02:06.990 --> 02:09.430
所以说这个呢是肯定缺一个不可的啊

02:09.430 --> 02:12.430
然后在这个里面我们对这个成功失败

02:12.430 --> 02:16.630
以及完成之后在这个里面添加相应的一些其他的处理

02:16.630 --> 02:17.990
比如说我成功之后

02:17.990 --> 02:19.110
那在这个里面呢

02:19.110 --> 02:23.510
我可以来判断一下这个我们返回的状态码是否为0

02:23.510 --> 02:25.670
如果说是错误状态码为0的话

02:25.670 --> 02:29.750
ok 那这个代表着我们没有错过正常的获取结果值

02:29.750 --> 02:32.950
那我就把他的这个默认result给打印出来就ok了

02:32.950 --> 02:33.470
对不对

02:33.470 --> 02:34.230
如果失败了

02:34.230 --> 02:37.910
那我通过调用uniclode.co.function的给它一个提示

02:37.910 --> 02:39.110
这个是不是可以啊

02:39.110 --> 02:43.270
并且呢我们在每次使用这个atp.js

02:43.270 --> 02:44.950
封装好的这个请求方法

02:44.950 --> 02:47.750
这个时候呢我们可以通过uniclode.co.loading

02:47.750 --> 02:49.510
也就是说请求开始之前

02:49.510 --> 02:51.750
我开启一个loading谈框

02:51.750 --> 02:52.550
结束之后呢

02:52.550 --> 02:56.150
我可以把uniclode.co.loading啊给它关掉

02:56.150 --> 02:58.470
也就是说调用它Hey的loading方法

02:58.470 --> 03:02.070
这个呢就是我们一个atp请求方法的一个封装

03:02.070 --> 03:03.510
那封装好了之后

03:03.510 --> 03:05.910
我们呢在使用的时候怎么来使用呢

03:05.910 --> 03:11.110
其实我们可以创建这种接口文件进行一个公共方法的一个调用

03:11.110 --> 03:13.270
比如说我导出这个

03:13.270 --> 03:15.910
刚才我们封装好的这个atx方法

03:15.910 --> 03:18.070
然后呢我定义这么一个函数

03:18.070 --> 03:19.110
那这个函数里面

03:19.110 --> 03:22.710
其实就是把这个promise对象做了一个输出

03:22.710 --> 03:26.230
然后呢定义了一个名字叫getLabelList的

03:26.230 --> 03:29.990
这个呢我们就作为前台来进行使用就ok了

03:29.990 --> 03:33.270
然后我们继续把这个getLabelList的

03:33.270 --> 03:35.830
挂载到我们vail的原形上

03:35.830 --> 03:39.750
然后呢供每个界面来进行使用

03:39.750 --> 03:40.790
那我们这个里面

03:40.870 --> 03:42.790
其实呢那如果说做到这一步

03:42.790 --> 03:45.510
方法的一个封装啊就差不多了

03:45.510 --> 03:47.830
那这个呢就是我们实现的一个过程

03:47.830 --> 03:49.990
但是呢这里面还有一个优化的方案

03:49.990 --> 03:51.030
什么方案呢

03:51.030 --> 03:53.670
如果说啊我们一些接口假如说

03:53.670 --> 03:54.950
请求越来越多的话

03:54.950 --> 03:57.030
那在这个里面可能会有一些分类

03:57.030 --> 03:58.950
而且呢每一个接口啊

03:58.950 --> 04:00.390
我们导出的时候

04:00.390 --> 04:02.630
不可能保证每个文件里的接口

04:02.630 --> 04:03.990
我们都进行一次导出

04:03.990 --> 04:04.710
那咋办呢

04:04.710 --> 04:05.510
在这个里面

04:05.510 --> 04:09.270
我们就可以借助webpack的requirecontext的方法

04:09.270 --> 04:12.310
对所有的请求函数进行一个收集

04:12.310 --> 04:13.190
那在这个里面呢

04:13.190 --> 04:14.790
就是一个收集的过程

04:14.790 --> 04:16.630
一会呢我们也来实现一下

04:16.630 --> 04:17.430
最后呢

04:17.430 --> 04:19.270
将我们的这个

04:19.270 --> 04:22.070
请求的这些方法收集出来的

04:22.070 --> 04:23.670
那我统一挂载到

04:23.670 --> 04:24.870
我们vail的原形上

04:24.870 --> 04:26.710
让我们扩展一个DollarATP

04:26.710 --> 04:28.310
之后呢在我们页面组件

04:28.310 --> 04:30.630
就可以实现这种DollarATP

04:30.630 --> 04:31.830
方法的一个调用

04:31.830 --> 04:33.590
那如果说我通过这种方式

04:33.590 --> 04:34.710
实现调用的话

04:34.710 --> 04:36.470
就可以使用这种osync

04:36.470 --> 04:38.230
以及ewe的修制服的形式

04:38.310 --> 04:39.030
这种看起来

04:39.030 --> 04:40.550
最后我们实现的效果

04:40.550 --> 04:42.070
是不是非常简洁了

04:42.070 --> 04:42.710
对吧

04:42.710 --> 04:43.190
我们呢

04:43.190 --> 04:44.230
其实实现起来

04:44.230 --> 04:46.150
就是刚才说的这几步

04:46.150 --> 04:46.630
首先呢

04:46.630 --> 04:47.830
我要封装一个方法

04:47.830 --> 04:48.630
然后呢

04:48.630 --> 04:50.310
我进行这个接口文件

04:50.310 --> 04:51.670
公共方法的一个调用

04:51.670 --> 04:52.150
最后呢

04:52.150 --> 04:53.990
我将这个方法挂载到

04:53.990 --> 04:55.670
我们的一个vail原形上

04:55.670 --> 04:57.670
供每个界面来进行使用

04:57.670 --> 04:58.870
就ok了

04:58.870 --> 04:59.270
好的

04:59.270 --> 05:00.550
那分析完了

05:00.550 --> 05:02.150
它在这个实现过程之后呢

05:02.150 --> 05:03.430
那我们就用代码的形式

05:03.430 --> 05:04.310
来做一下

05:04.310 --> 05:05.110
我们首先呢

05:05.110 --> 05:07.350
先要定义一个这个

05:07.430 --> 05:08.630
公共的aktp

05:08.630 --> 05:09.590
请求方法

05:09.590 --> 05:10.630
所以说怎么办呢

05:10.630 --> 05:11.910
我们在这个项目里面

05:11.910 --> 05:14.390
需要创建新的文件家

05:14.390 --> 05:14.790
然后呢

05:14.790 --> 05:16.630
方便我们的一个管理

05:16.630 --> 05:17.430
那我们在这个里面

05:17.430 --> 05:18.870
创建一个什么文件家呢

05:18.870 --> 05:20.150
我们可以定一个

05:20.150 --> 05:21.270
Adex文件家

05:21.270 --> 05:21.750
对吧

05:21.750 --> 05:22.230
或者是呢

05:22.230 --> 05:22.790
名字

05:22.790 --> 05:24.710
我们可以随便起

05:24.710 --> 05:26.630
只要是跟我们接口啊

05:26.630 --> 05:28.070
它的这个描述啊

05:28.070 --> 05:29.350
贴近就ok了

05:29.350 --> 05:30.070
那这个里面

05:30.070 --> 05:31.350
我定一个目录

05:31.350 --> 05:32.070
这个目录呢

05:32.070 --> 05:33.670
我就叫做

05:33.670 --> 05:34.630
ajx

05:34.630 --> 05:35.270
ok

05:35.270 --> 05:36.710
那这个ajx里面呢

05:36.710 --> 05:37.270
首先啊

05:37.270 --> 05:39.670
它有两个同级的文件

05:39.670 --> 05:40.310
或者目录

05:40.310 --> 05:40.950
那第一个呢

05:40.950 --> 05:43.110
我们新建一个GS

05:43.110 --> 05:45.030
就是我们需要的这个

05:45.030 --> 05:46.710
http.js

05:46.710 --> 05:47.990
ok创建完成之后

05:47.990 --> 05:48.790
我在这个里面

05:48.790 --> 05:49.910
再订一个目录

05:49.910 --> 05:51.350
那这个目录是干嘛用呢

05:51.350 --> 05:52.470
这个目录存放

05:52.470 --> 05:55.190
我们所有接口的这个APN

05:55.190 --> 05:57.190
那这里面我就定一个APN

05:57.190 --> 05:58.150
APN里面

05:58.150 --> 05:59.830
我定义几个文件

05:59.830 --> 06:00.630
首先呢

06:00.630 --> 06:01.510
我在这个里面

06:01.510 --> 06:02.950
再订一个目录

06:02.950 --> 06:03.910
这个目录叫什么呢

06:03.910 --> 06:04.950
叫我们

06:04.950 --> 06:06.470
interface

06:06.550 --> 06:07.030
ok

06:07.030 --> 06:08.550
那所有的接口请求

06:08.550 --> 06:10.950
都在这个里面来进行处理

06:10.950 --> 06:11.430
那这个呢

06:11.430 --> 06:13.750
就是我们的interface文件啊

06:13.750 --> 06:15.350
那跟interface文件

06:15.350 --> 06:15.990
同级的

06:15.990 --> 06:17.190
我们这里面还有什么呢

06:17.190 --> 06:19.590
还有一个index.js

06:19.590 --> 06:20.070
在这里面

06:20.070 --> 06:21.030
我也定义一下

06:21.030 --> 06:22.950
新建一个文件

06:22.950 --> 06:25.110
叫index.js

06:25.110 --> 06:25.910
这个干嘛用

06:25.910 --> 06:26.310
这个呢

06:26.310 --> 06:27.750
就作为我们一会儿

06:27.750 --> 06:28.470
对这个

06:28.470 --> 06:30.710
整个所有的interface里面的

06:30.710 --> 06:31.990
相关的

06:31.990 --> 06:33.670
封装好的这个请求方法

06:33.670 --> 06:36.150
做一个导出操作就ok了啊

06:36.150 --> 06:38.070
好的那我们依次来实现一下

06:38.070 --> 06:39.270
首先我们第一个

06:39.270 --> 06:40.470
先实现我们的

06:40.470 --> 06:41.910
atv.js

06:41.910 --> 06:43.270
atv.js

06:43.270 --> 06:43.910
最后呢

06:43.910 --> 06:45.990
我们是要导出一个

06:45.990 --> 06:46.870
promise对象

06:46.870 --> 06:48.390
所以说在这个里面就写一下

06:48.390 --> 06:50.230
export default

06:50.230 --> 06:51.430
我们这里面

06:51.430 --> 06:53.270
默认导出一个函数

06:53.270 --> 06:54.470
那这个函数是什么呢

06:54.470 --> 06:55.030
这里面啊

06:55.030 --> 06:56.150
我们需要有参数

06:56.150 --> 06:57.190
首先第一个呢

06:57.190 --> 06:58.630
我们每一个

06:58.630 --> 07:00.470
呃云函数的调用都会有name

07:00.470 --> 07:00.870
对不对

07:00.870 --> 07:02.630
然后这里面还会有什么

07:02.630 --> 07:03.750
我们可能有的时候

07:03.750 --> 07:04.710
会传数据

07:04.710 --> 07:05.830
所以说这里面

07:05.830 --> 07:07.350
定一个name和data

07:07.350 --> 07:07.830
并且呢

07:07.830 --> 07:09.910
data给他一个默认值

07:09.910 --> 07:10.230
然后呢

07:10.230 --> 07:11.350
导出一个函数

07:11.350 --> 07:12.710
这个函数咱们说了

07:12.710 --> 07:13.510
是最后

07:13.510 --> 07:14.310
导出一个什么

07:14.310 --> 07:15.510
promise对象

07:15.510 --> 07:16.150
那所以说

07:16.150 --> 07:17.270
我在这里面

07:17.270 --> 07:20.710
就定义一个promise对象

07:20.710 --> 07:21.990
promise对象里面

07:21.990 --> 07:23.350
有两个状态

07:23.350 --> 07:26.390
一个是reject和reject

07:26.390 --> 07:26.790
ok

07:26.790 --> 07:27.590
那在这里面

07:27.590 --> 07:29.510
开始我们的一个编写

07:29.510 --> 07:30.790
呃那编写什么呢

07:30.790 --> 07:32.470
比如说我们发起请求之前

07:32.470 --> 07:33.590
那首先呢

07:33.590 --> 07:35.030
我们要做一个什么

07:35.030 --> 07:36.310
unit.show

07:36.310 --> 07:37.670
我们做一个loading

07:37.670 --> 07:38.230
也就是说

07:38.230 --> 07:39.830
让他有一个等待状态

07:39.830 --> 07:40.630
然后这里面呢

07:40.630 --> 07:41.430
其实我们不需要

07:41.430 --> 07:42.550
传一些文字了

07:42.550 --> 07:43.990
直接的就是一个

07:43.990 --> 07:45.670
unit.show

07:45.670 --> 07:46.950
loading就ok了

07:46.950 --> 07:48.070
然后开始

07:48.070 --> 07:49.430
我们的unit.show的

07:49.430 --> 07:50.150
点一个

07:50.150 --> 07:51.910
call function的一个调用

07:51.910 --> 07:52.630
call function

07:52.630 --> 07:53.350
首先呢

07:53.350 --> 07:54.230
我们要指定

07:54.230 --> 07:55.590
他的name属性

07:55.590 --> 07:56.150
并且呢

07:56.150 --> 07:57.590
这个里面有success

07:57.590 --> 07:59.350
成功的一个箱子

07:59.350 --> 08:00.470
那如果说成功

08:00.470 --> 08:01.910
这里面我们就要判断一下

08:01.910 --> 08:02.390
什么呢

08:02.390 --> 08:04.070
判断他一个状态

08:04.070 --> 08:05.110
如果说

08:05.110 --> 08:05.750
那但是呢

08:05.750 --> 08:06.390
我们知道啊

08:06.390 --> 08:07.430
这个result里面

08:07.430 --> 08:08.790
是不是有一个result

08:08.790 --> 08:09.750
所以说我们这里面

08:09.750 --> 08:11.110
写一个result

08:11.110 --> 08:11.990
结构出来

08:11.990 --> 08:13.750
如果说那我们这个

08:13.750 --> 08:15.350
result结构出来的

08:15.350 --> 08:16.150
点扣的

08:16.150 --> 08:17.990
假如说等于等于零

08:17.990 --> 08:19.510
那代表着我们这次请求

08:19.510 --> 08:20.310
是不是成功了

08:20.310 --> 08:20.870
对不对

08:20.870 --> 08:21.350
否则呢

08:21.350 --> 08:23.110
那这次请求就失败了

08:23.110 --> 08:24.710
如果说我请求成功

08:24.710 --> 08:25.190
怎么办呢

08:25.190 --> 08:27.030
我这里面就去result

08:27.030 --> 08:28.790
也就是说给他返回值

08:28.790 --> 08:30.070
那返回值是什么呢

08:30.070 --> 08:31.270
我们是不是

08:31.270 --> 08:33.990
就是result点一个什么

08:34.070 --> 08:35.910
我们result点data

08:35.910 --> 08:36.870
是不是就可以了

08:36.870 --> 08:37.670
但是呢

08:37.670 --> 08:38.630
我们上一次啊

08:38.630 --> 08:39.990
就是刚才定义的这个

08:39.990 --> 08:41.510
云寒书里面有一个问题

08:41.510 --> 08:41.990
是什么呢

08:41.990 --> 08:43.350
我们可以来看一下

08:43.350 --> 08:45.270
打开我们uniclode.function

08:45.270 --> 08:46.390
第一个云寒书

08:46.390 --> 08:47.910
getLabelList的

08:47.910 --> 08:48.710
在这个里面

08:48.710 --> 08:49.830
我们定义的时候

08:49.830 --> 08:50.790
刚才我们返回的

08:50.790 --> 08:51.990
叫LabelList的

08:51.990 --> 08:52.550
所以说呢

08:52.550 --> 08:53.590
我们这个里面啊

08:53.590 --> 08:54.710
统一的处理了吗

08:54.710 --> 08:55.670
那我们这时候

08:55.670 --> 08:57.190
就是说如果他成功了

08:57.190 --> 08:57.990
那我们统一的

08:57.990 --> 08:59.670
给他一个data就ok了

08:59.670 --> 09:00.950
那这个里面

09:00.950 --> 09:02.150
我们由于啊

09:02.150 --> 09:03.910
把这个给处理了一下之后

09:03.910 --> 09:04.790
那我们在这个里面

09:04.790 --> 09:06.070
是不是就直接的

09:06.070 --> 09:07.510
每一个都去

09:07.510 --> 09:08.630
如果成功

09:08.630 --> 09:10.870
都去result点data

09:10.870 --> 09:11.670
是不是就ok了

09:11.670 --> 09:12.230
对吧

09:12.230 --> 09:13.510
那我们改完了这个

09:13.510 --> 09:14.790
getLabelList的之后

09:14.790 --> 09:16.710
我们再进行一下上传部署啊

09:17.430 --> 09:17.830
好的

09:17.830 --> 09:19.590
那上传完成之后呢

09:19.590 --> 09:20.870
那我们继续来想

09:20.870 --> 09:22.070
如果说你成功了

09:22.070 --> 09:23.030
那我直接的

09:23.030 --> 09:24.390
去让你result的

09:24.390 --> 09:25.830
一个result点data

09:25.830 --> 09:26.630
假如说

09:26.630 --> 09:28.150
你在这个里面失败了

09:28.150 --> 09:29.510
那我就给你一个提示呗

09:29.510 --> 09:29.990
对吧

09:29.990 --> 09:32.230
那我们uniclode.host

09:32.310 --> 09:33.670
这里面给他一个提示

09:33.670 --> 09:34.390
首先呢

09:34.390 --> 09:35.590
我们这个icon

09:35.590 --> 09:36.790
什么也不想让他输出

09:36.790 --> 09:38.950
那我这里面给他一个icon

09:38.950 --> 09:40.390
那然后呢

09:40.390 --> 09:42.390
再继续写给他一个title

09:42.390 --> 09:43.350
假如说你失败了

09:43.350 --> 09:44.790
那你后段给我返回一个值

09:44.790 --> 09:45.670
是不是就可以了

09:45.670 --> 09:47.590
也就是说我调用result

09:48.550 --> 09:49.990
点msg

09:49.990 --> 09:51.830
把这个result点msg

09:51.830 --> 09:53.990
在我们弹出这个multi框里面

09:53.990 --> 09:56.310
给进行一下展示就ok了

09:56.310 --> 09:57.990
这个呢就是我们一个

09:57.990 --> 09:59.670
成功状态的一个封装

09:59.670 --> 10:01.270
但是呢如果说

10:01.270 --> 10:03.190
因为一些网络的原因

10:03.190 --> 10:04.790
这里面还会有一个什么

10:04.790 --> 10:05.190
fail

10:05.190 --> 10:06.390
也就是说错误了

10:06.390 --> 10:07.270
那错误怎么办呢

10:07.270 --> 10:08.150
我这里面

10:08.150 --> 10:09.990
把这个reject error

10:09.990 --> 10:11.270
给他打印出去

10:11.270 --> 10:12.310
是不是就可以了

10:12.310 --> 10:13.590
这是fail的处理

10:13.590 --> 10:15.910
不管你是成功还是失败

10:15.910 --> 10:18.950
当你这次请求完成之后

10:18.950 --> 10:19.830
那你这个里面

10:19.830 --> 10:21.190
是不是有一个component

10:21.190 --> 10:23.110
也就是说代表我此次完成了

10:23.110 --> 10:24.710
那你完成之后你做什么

10:24.710 --> 10:26.630
因为我们在请求开始的时候

10:26.630 --> 10:28.070
是不是受了一个loading

10:28.070 --> 10:28.550
对不对

10:28.550 --> 10:29.750
那我完成的时候

10:29.750 --> 10:31.670
将这个loading给它关闭

10:31.670 --> 10:32.630
是不是就可以了

10:32.630 --> 10:33.270
也就是说

10:33.270 --> 10:35.190
unit.head的loading

10:35.190 --> 10:35.830
ok

10:35.830 --> 10:36.550
那这个呢

10:36.550 --> 10:39.430
就是我们一个方法的基本封装

10:39.430 --> 10:40.710
我们来看一下

10:40.710 --> 10:41.190
首先呢

10:41.190 --> 10:43.110
我们要知道本身这个里面

10:44.150 --> 10:45.190
核心就是

10:45.190 --> 10:47.270
返回一个promise对象

10:47.270 --> 10:48.390
这里面写一下

10:48.390 --> 10:52.710
返回一个promise对象

10:52.710 --> 10:53.510
这是第一步

10:53.510 --> 10:55.590
然后在这个promise对象里面

10:55.590 --> 10:57.190
我们第一步做了一个什么事

10:57.190 --> 10:58.790
我们第一步就是说

10:58.870 --> 11:02.150
打开我们的一个loading

11:02.150 --> 11:02.870
弹窗

11:02.870 --> 11:03.990
因为咱们去请求嘛

11:03.990 --> 11:05.110
请求不知道什么回

11:05.110 --> 11:06.390
什么时候回来对不对

11:06.390 --> 11:07.270
所以说在这个里面

11:07.270 --> 11:08.550
我开启一个弹窗

11:08.550 --> 11:10.230
当你这个弹窗开启之后

11:10.230 --> 11:11.190
那我接下来

11:11.190 --> 11:12.950
是不是就开始进行什么了

11:12.950 --> 11:14.710
我们这个close的function

11:14.710 --> 11:17.350
也就是说unit.close的

11:17.350 --> 11:19.190
的一个函数调用

11:19.190 --> 11:19.590
其实呢

11:19.590 --> 11:21.110
这个是说白了

11:21.110 --> 11:21.750
这个是什么

11:21.750 --> 11:26.150
真正的一个发起数据的一个请求

11:26.150 --> 11:26.710
ok

11:26.710 --> 11:28.070
这就是发起请求

11:28.070 --> 11:29.030
那么这一块呢

11:29.030 --> 11:30.550
就是我们这个

11:30.550 --> 11:33.270
云函数的一个什么名字对吧

11:33.270 --> 11:35.030
云函数的名字

11:35.030 --> 11:35.750
ok

11:35.750 --> 11:37.990
然后samsaise代表着我们的一个什么

11:37.990 --> 11:40.550
成功的状态

11:40.550 --> 11:41.110
好了

11:41.110 --> 11:42.150
那这个否则呢

11:42.150 --> 11:44.710
否则这个我们这个义父里面啊

11:44.710 --> 11:46.310
这个是我们真正的

11:46.310 --> 11:48.790
就是能够拿到数据值啊

11:48.790 --> 11:51.030
这个是能够拿到数据值

11:51.030 --> 11:52.950
但是如果说我们拿不到数据值呢

11:52.950 --> 11:55.430
其实我这时候是不想让全都渲染的

11:55.430 --> 11:55.910
所以说呢

11:56.070 --> 11:58.150
给他一个什么提示框

11:58.150 --> 12:00.150
那这个提示框里面

12:00.150 --> 12:01.270
我们其实呢

12:02.310 --> 12:03.510
这种提示框

12:03.510 --> 12:05.270
一般的是什么

12:05.270 --> 12:08.150
后端没有查询到数据值啊

12:09.590 --> 12:10.950
后端

12:10.950 --> 12:15.270
然后没有查询到数据值

12:15.270 --> 12:15.990
那这个呢

12:15.990 --> 12:17.350
其实不是请求失败了

12:17.350 --> 12:18.470
什么时候失败了

12:18.470 --> 12:19.270
其实呢

12:19.270 --> 12:22.070
我们这个fail里面才是请求失败

12:22.070 --> 12:23.030
那请求失败呢

12:23.030 --> 12:26.230
一般是网络的一个什么原因

12:26.230 --> 12:29.110
或者是我们后端的一个错误

12:29.110 --> 12:29.590
对吧

12:29.590 --> 12:31.030
那如果说是这个错误的时候

12:31.030 --> 12:32.390
我直接reject error

12:32.390 --> 12:33.350
或者是这个呢

12:33.350 --> 12:34.870
就没有必要给前端打出来了

12:34.870 --> 12:36.630
因为你这个请求已经失败了

12:36.630 --> 12:37.110
最后呢

12:37.110 --> 12:39.110
这个是完成的一个状态啊

12:39.110 --> 12:40.470
我们这里面写一下

12:40.470 --> 12:43.110
完成的状态

12:43.110 --> 12:44.710
在这个里面我们干什么

12:44.710 --> 12:46.230
其实我们只做一件事

12:46.230 --> 12:46.790
关闭

12:47.910 --> 12:48.790
弹窗

12:48.790 --> 12:49.590
什么弹窗

12:49.590 --> 12:51.510
就是我们打开的这个

12:52.470 --> 12:53.670
loading弹窗

12:53.670 --> 12:54.550
是不是就可以了

12:54.550 --> 12:54.950
对吧

12:54.950 --> 12:55.510
那这个呢

12:55.510 --> 12:56.950
就是我们一个封装

12:56.950 --> 12:58.070
当你封装好了之后

12:58.070 --> 12:59.030
这是第一步

12:59.030 --> 12:59.830
那接下来

12:59.830 --> 13:00.310
第二步

13:00.310 --> 13:01.350
我们应该做什么

13:01.350 --> 13:03.670
是不是对它要进行一个调用了

13:03.670 --> 13:04.150
对吧

13:04.150 --> 13:05.830
也就是说我们需要使用它

13:07.110 --> 13:08.310
怎么来进行使用呢

13:08.310 --> 13:09.750
这里面有espo的default

13:09.750 --> 13:10.790
它是不是导出了

13:10.790 --> 13:11.990
那你既然导出了

13:11.990 --> 13:13.590
我在这个里面使用的时候

13:13.590 --> 13:15.430
比如说我这里面interface

13:15.430 --> 13:16.870
因为咱们有好多页面

13:16.870 --> 13:17.990
把所有的接口

13:17.990 --> 13:19.670
咱们按摩块进行划分

13:19.670 --> 13:20.230
怎么办

13:20.310 --> 13:22.630
我在这个interface里面

13:22.630 --> 13:24.470
定义一个js文件

13:24.470 --> 13:25.830
首先定义第一个

13:25.830 --> 13:26.310
第一个呢

13:26.310 --> 13:27.990
就是我们的home

13:27.990 --> 13:30.470
这里面是interface

13:30.470 --> 13:32.390
或者是你直接写home也可以

13:32.390 --> 13:33.750
那代表着我们所有

13:33.750 --> 13:34.790
首页面的请求

13:34.790 --> 13:37.030
都在这个里面来进行定义

13:37.030 --> 13:38.070
那这个home

13:38.070 --> 13:38.790
首先呢

13:38.790 --> 13:40.950
我们要把刚才定义好的

13:40.950 --> 13:41.910
这个模块

13:41.910 --> 13:42.470
导进来

13:42.470 --> 13:43.910
input的ax

13:43.910 --> 13:44.470
forrom

13:44.470 --> 13:45.510
我们点点刚

13:45.510 --> 13:46.070
点点刚

13:46.070 --> 13:47.350
atb.js

13:47.350 --> 13:48.710
那此时这个ax

13:48.790 --> 13:50.550
就是我们刚才定义好的

13:50.550 --> 13:52.150
这个promise对象了

13:52.150 --> 13:52.630
对不对

13:52.630 --> 13:53.430
那我直接

13:53.430 --> 13:55.350
input const

13:55.350 --> 13:56.070
我们在这个里面

13:56.070 --> 13:56.950
做一个什么

13:56.950 --> 14:00.710
get label list

14:00.710 --> 14:02.230
等于我们一个值

14:02.230 --> 14:03.430
那这个里面有可能

14:03.430 --> 14:04.550
会去传tata

14:04.550 --> 14:05.750
当然你也有可能不传

14:05.750 --> 14:06.230
对不对

14:06.230 --> 14:06.950
这个无所谓

14:06.950 --> 14:08.790
因为我在这个adx里面

14:08.790 --> 14:10.710
已经对它进行了

14:10.710 --> 14:11.990
一个默认值的处理

14:11.990 --> 14:13.910
那这里面有两个参数

14:13.910 --> 14:14.950
首先第一个

14:14.950 --> 14:17.110
就是我们的内幕

14:17.110 --> 14:17.830
内幕呢

14:17.830 --> 14:18.710
和这个名字

14:18.710 --> 14:19.510
我们可以起一样

14:19.510 --> 14:20.070
只不过是呢

14:20.070 --> 14:21.030
这个是真实的

14:21.030 --> 14:22.550
我们云函数的名字

14:22.550 --> 14:24.310
get label list的

14:24.310 --> 14:24.710
当然了

14:24.710 --> 14:26.390
这个名字是我们调用

14:26.390 --> 14:28.550
本次get label list的

14:28.550 --> 14:30.070
云函数的一个方法的

14:30.070 --> 14:31.030
名乘定义

14:31.030 --> 14:31.910
你这个可以改

14:31.910 --> 14:33.270
但是这个绝对不能改

14:33.270 --> 14:34.550
这个我们要知道一下

14:34.550 --> 14:35.990
然后如果说你有data

14:35.990 --> 14:37.110
那我就给你们

14:37.110 --> 14:37.830
传递过去

14:37.830 --> 14:39.350
这个就ok了

14:39.350 --> 14:40.790
然后这个你定义好之后

14:40.790 --> 14:41.990
其实现代如果说

14:41.990 --> 14:43.030
我们不想扩展的话

14:43.030 --> 14:44.070
我在这个里面呢

14:44.070 --> 14:45.350
现在就可以使用了

14:45.350 --> 14:46.070
我们来试一下

14:47.350 --> 14:48.230
怎么来使用呢

14:48.230 --> 14:49.510
我们回到pages

14:49.510 --> 14:51.510
那我们要想使用的话

14:51.510 --> 14:52.790
那对于这个

14:52.790 --> 14:53.670
ATTP

14:53.670 --> 14:55.110
对于这个我们home.js

14:55.110 --> 14:57.830
这个里面的get label list

14:57.830 --> 14:59.350
我们是不是得做一个

14:59.350 --> 14:59.990
引入啊

14:59.990 --> 15:00.390
对不对

15:00.390 --> 15:01.110
那这里面

15:01.110 --> 15:02.550
我们就可以使用

15:02.550 --> 15:04.870
import get label list的

15:04.870 --> 15:05.430
然后呢

15:05.430 --> 15:06.390
我们从哪儿引入的

15:06.390 --> 15:07.590
这个方法from

15:07.590 --> 15:08.630
那你就去

15:08.630 --> 15:09.670
要去找了

15:09.670 --> 15:10.710
那我们点点

15:10.710 --> 15:11.030
gump

15:11.030 --> 15:11.590
点点gump

15:11.590 --> 15:13.190
adax interface

15:13.190 --> 15:14.550
home.js

15:14.550 --> 15:15.910
那首先你先看一下

15:15.910 --> 15:17.030
get label list的

15:17.350 --> 15:18.230
是否有这个方法

15:18.230 --> 15:19.110
你先不要调用

15:19.110 --> 15:20.390
咱们来筹验

15:20.390 --> 15:21.990
看他有没有这方法

15:21.990 --> 15:22.310
好的

15:22.310 --> 15:23.590
这里面有一个爆装

15:23.590 --> 15:25.590
我们找到他console.log

15:25.590 --> 15:27.510
get label list的

15:27.510 --> 15:27.910
ok

15:27.910 --> 15:28.870
我们来

15:28.870 --> 15:29.350
看一下

15:29.350 --> 15:30.150
在这个里面

15:30.150 --> 15:31.670
是多了一个扩号

15:31.670 --> 15:33.670
那我们把它给调过去

15:33.670 --> 15:33.910
好了

15:35.270 --> 15:36.390
来我们再来看一下

15:36.390 --> 15:37.830
连接服务器超时

15:37.830 --> 15:39.030
这里面有什么问题

15:39.030 --> 15:39.350
ok

15:39.350 --> 15:39.910
这里面

15:39.910 --> 15:40.550
这个方法

15:40.550 --> 15:41.270
反正是引入了

15:41.270 --> 15:41.830
对不对

15:41.830 --> 15:42.630
那这个方法

15:42.630 --> 15:43.350
引入之后

15:43.350 --> 15:44.390
我们再来看一下

15:44.390 --> 15:45.510
怎么来使用呢

15:45.510 --> 15:46.470
其实使用的时候

15:46.470 --> 15:47.590
就非常简单了

15:47.590 --> 15:49.350
我们直接的在这个里面

15:49.350 --> 15:50.470
由于我们返回的是

15:50.470 --> 15:51.590
一个promise对象

15:51.590 --> 15:51.990
所以说

15:51.990 --> 15:53.190
这里面就可以用

15:53.190 --> 15:55.430
async await这种修饰语

15:55.430 --> 15:55.990
对吧

15:55.990 --> 15:58.470
as等于一个wait

15:58.470 --> 15:58.870
然后呢

15:58.870 --> 16:00.710
我们这是get label list的

16:00.710 --> 16:01.350
此时呢

16:01.350 --> 16:03.350
你就可以把底下的这些

16:03.350 --> 16:04.630
给做一个注释了

16:04.630 --> 16:05.670
因为我上面

16:05.670 --> 16:07.270
是不是经过封装之后

16:07.270 --> 16:08.950
直接的就可以拿到

16:08.950 --> 16:10.070
我们的这个as

16:10.070 --> 16:10.950
想结果

16:10.950 --> 16:11.190
来

16:11.190 --> 16:12.230
大家看一下

16:12.230 --> 16:13.830
result as

16:13.830 --> 16:14.870
然后atd

16:14.870 --> 16:15.510
第11行

16:15.510 --> 16:16.790
有一个错误

16:16.790 --> 16:17.830
http

16:17.830 --> 16:19.030
第11行

16:19.030 --> 16:19.830
那这个呢

16:19.830 --> 16:20.870
是result

16:20.870 --> 16:22.710
我们把它给拿到

16:22.710 --> 16:23.830
result.date

16:23.830 --> 16:24.070
ok

16:24.070 --> 16:25.270
我们再来看一下

16:25.270 --> 16:26.230
此时你会发现

16:26.230 --> 16:27.190
前端后端开发

16:27.190 --> 16:28.550
这些指纸是不是就有了

16:28.550 --> 16:29.030
对吧

16:29.030 --> 16:29.910
也就是说

16:29.910 --> 16:32.950
你在我们的这个index里面

16:32.950 --> 16:34.390
as调用的时候

16:34.390 --> 16:35.990
这个是不是已经获取到

16:35.990 --> 16:37.430
我们想要的这个列表了

16:37.430 --> 16:37.910
对吧

16:37.910 --> 16:39.430
那我们获取到这个列表之后

16:39.430 --> 16:41.830
我这里面就可以重新写一下了

16:41.830 --> 16:44.230
这次点 label list等于

16:44.230 --> 16:46.310
我们定义的这个 label list

16:46.310 --> 16:47.750
是不是此时就ok了

16:47.750 --> 16:48.470
你会发现

16:48.470 --> 16:49.910
结果是不是正常的

16:49.910 --> 16:51.510
也可以进行一个什么

16:51.510 --> 16:51.910
渲染

16:51.910 --> 16:52.390
对吧

16:52.390 --> 16:52.790
这个呢

16:52.790 --> 16:55.270
就是我们一个方法的封装

16:55.270 --> 16:55.830
但是呢

16:55.830 --> 16:56.870
这里面有一个问题

16:56.870 --> 16:57.830
是啥问题呢

16:57.830 --> 16:59.110
其实我们刚才做了

16:59.110 --> 17:00.870
这部期的操作之后

17:00.870 --> 17:02.470
我们忽略了几个环节

17:02.470 --> 17:03.350
哪几个环节呢

17:03.350 --> 17:04.310
首先就是

17:04.310 --> 17:05.510
我们方法挂载到

17:05.510 --> 17:06.390
未有原形上

17:06.390 --> 17:07.590
这个我们没有做

17:07.590 --> 17:08.070
而且呢

17:08.070 --> 17:09.590
如何进行一个倒除

17:09.590 --> 17:09.990
这个呢

17:09.990 --> 17:10.870
我们也没实现

17:10.870 --> 17:11.510
对不对

17:11.510 --> 17:12.710
为什么要这么做

17:12.710 --> 17:13.270
也就是说

17:13.270 --> 17:15.190
你为什么要对它进行倒除

17:15.190 --> 17:16.470
因为我们现在使用

17:16.470 --> 17:17.110
是通过这种

17:17.110 --> 17:18.470
guide label list的方式

17:18.470 --> 17:19.590
来进行使用的

17:19.590 --> 17:20.950
但你这种使用方法

17:20.950 --> 17:22.230
首先第一个问题

17:22.230 --> 17:23.030
假如说

17:23.030 --> 17:24.790
它这个请求特别多的话

17:24.790 --> 17:26.230
你是不是得在这个里面

17:26.230 --> 17:27.590
写好多好多内容啊

17:27.590 --> 17:28.630
假如说我这里面有一个

17:28.630 --> 17:29.510
guide label list的

17:29.510 --> 17:29.750
对吧

17:30.790 --> 17:32.870
如果说我在这个

17:32.870 --> 17:33.350
home里面

17:33.350 --> 17:34.230
我再定一个

17:34.230 --> 17:34.950
当然这个呢

17:34.950 --> 17:36.870
不是咱们真正的一个请求了

17:36.870 --> 17:37.190
这个呢

17:37.190 --> 17:38.310
我们要知道一下

17:38.310 --> 17:39.510
这是第一个

17:39.510 --> 17:40.310
那如果说

17:40.310 --> 17:41.910
我这里面还有一个呢

17:41.910 --> 17:42.630
对吧

17:42.710 --> 17:44.230
expod default

17:44.230 --> 17:45.190
我们在这个里面

17:45.190 --> 17:46.630
给它复制一套

17:46.630 --> 17:47.750
过来

17:47.750 --> 17:48.310
然后呢

17:48.310 --> 17:49.990
这个是guide label list的

17:49.990 --> 17:51.750
一或者是 label list的二

17:51.750 --> 17:52.710
都可以啊

17:52.710 --> 17:53.590
那你这时候

17:53.590 --> 17:54.710
假如说你再想使用

17:54.710 --> 17:55.990
guide label list的二的话

17:55.990 --> 17:56.710
那你怎么办

17:56.710 --> 17:57.990
你是不是还得在这个里面

17:57.990 --> 17:59.270
进入一个导入操作呀

17:59.270 --> 18:01.030
也就是说再给它导进来啊

18:01.030 --> 18:01.750
并且呢

18:01.750 --> 18:02.470
这个还好

18:02.470 --> 18:04.070
如果说你只有一个

18:04.070 --> 18:05.270
home.js

18:05.270 --> 18:05.910
那OK了

18:05.910 --> 18:06.550
但是呢

18:06.550 --> 18:07.350
你这里面

18:07.350 --> 18:08.150
假如说

18:08.150 --> 18:10.550
你再有一个test.js

18:10.550 --> 18:12.070
比如说我这里面复制一下

18:12.710 --> 18:14.550
我们复制一个

18:14.550 --> 18:16.150
或者说新建一个吧

18:16.150 --> 18:18.630
新建一个js文件

18:18.630 --> 18:19.430
在这个里面

18:19.430 --> 18:21.750
假如说我有一个test.js

18:21.750 --> 18:23.190
test.js呢

18:23.190 --> 18:23.990
同样的

18:23.990 --> 18:25.750
它跟home的作用差不多

18:25.750 --> 18:26.230
然后呢

18:26.230 --> 18:28.870
它也是一些接口的一个输出

18:28.870 --> 18:30.230
比如说这个接口输出

18:30.230 --> 18:31.350
它是针对于谁呢

18:31.350 --> 18:33.270
针对于我们其他的几个界面

18:33.270 --> 18:34.710
因为我们还有两个界面了嘛

18:34.710 --> 18:35.190
对不对

18:35.190 --> 18:36.550
可能它是针对于关注

18:36.550 --> 18:37.750
或者我的界面

18:37.750 --> 18:38.790
然后这个时候

18:38.790 --> 18:40.790
那我们想对这个

18:40.790 --> 18:41.910
所有的这个方法

18:41.910 --> 18:42.630
导出的话

18:42.630 --> 18:44.630
那你是不是得分门别类给它导出

18:44.630 --> 18:45.830
比较麻烦对不对

18:45.830 --> 18:46.790
那这个里面呢

18:46.790 --> 18:47.670
我们就可以

18:47.670 --> 18:49.670
因为这里面定义了一个index.js

18:49.670 --> 18:50.150
对不对

18:50.150 --> 18:51.110
那我们这个里面

18:51.110 --> 18:54.230
就可以通过index.js

18:54.230 --> 18:56.310
做一个我们interface里面

18:56.310 --> 18:57.910
所有的一个数据的

18:57.910 --> 18:59.430
一个输出的收集

18:59.430 --> 19:00.790
也就是说把所有API

19:00.790 --> 19:02.150
给它进行一个收集

19:02.150 --> 19:03.990
那这个怎么来收集呢

19:03.990 --> 19:06.550
这里面我们就会用到一个

19:06.550 --> 19:08.550
require.context

19:08.550 --> 19:09.590
环境上下文

19:09.590 --> 19:10.790
这个呢是wipag

19:10.790 --> 19:11.830
给我们提供的

19:11.830 --> 19:13.510
它是一个什么呢

19:13.510 --> 19:15.750
它呢是一个wipag的API

19:15.750 --> 19:18.070
通过执行require.context

19:18.070 --> 19:20.390
能获取到一个特定的上下文

19:20.390 --> 19:21.750
然后呢主要来实现

19:21.750 --> 19:23.510
自动化模块的一个导注

19:23.510 --> 19:24.710
然后在前端工程中

19:24.710 --> 19:26.310
如果遇到一个文件家

19:26.310 --> 19:27.510
引入很多模块的话

19:27.510 --> 19:28.950
可以使用这个API

19:28.950 --> 19:30.470
它呢会便利文件家中

19:30.470 --> 19:31.510
指定的文件

19:31.510 --> 19:33.030
也就是说它不光是把

19:33.030 --> 19:34.150
home.js

19:34.150 --> 19:35.430
还有test.js

19:35.430 --> 19:36.710
它也可以做一个便利

19:36.710 --> 19:38.390
然后呢做一个自动导入

19:38.390 --> 19:40.630
不需要每次显示的调用引炮的

19:40.710 --> 19:42.630
那这样呢就方便的多了

19:42.630 --> 19:44.070
那这个我们怎么来实现呢

19:44.070 --> 19:46.150
其实我们就是根据这个API

19:46.150 --> 19:47.590
来做就ok了

19:47.590 --> 19:49.910
但这里面有分别有几个值啊

19:49.910 --> 19:51.030
那我们要注意一下

19:51.030 --> 19:53.510
首先我们先定一个变量

19:53.510 --> 19:54.470
require

19:54.470 --> 19:56.310
然后呢API

19:56.310 --> 19:57.270
这里面写一下

19:57.270 --> 19:58.630
conts的require.pi

19:58.630 --> 20:00.150
等于我们的require

20:01.670 --> 20:02.710
require里面

20:02.710 --> 20:05.270
我们调用一个context的方法

20:06.390 --> 20:07.910
这个呢是wipag

20:07.910 --> 20:08.950
给我们提供的

20:08.950 --> 20:10.070
这个呢我们要明确一下

20:10.070 --> 20:11.350
首先它有几个参数

20:11.350 --> 20:12.710
第一个呢我们写一个

20:13.590 --> 20:14.630
del 自不创

20:14.630 --> 20:15.670
这个代表什么呢

20:15.670 --> 20:17.990
代表着我们API目录的一个

20:17.990 --> 20:19.030
相对路径

20:19.030 --> 20:21.990
第二个呢我传递一个参数为触

20:21.990 --> 20:23.670
触呢其实它就是

20:23.670 --> 20:25.590
是否查询里面的子目录

20:25.590 --> 20:26.870
那你比如说这个API里面

20:26.870 --> 20:28.070
是不是还有interface

20:28.070 --> 20:29.990
所以说它就去interface里面查

20:29.990 --> 20:31.510
其实也可以理解为是一个

20:31.510 --> 20:32.630
地规调用啊

20:32.630 --> 20:33.830
然后第三个呢

20:33.830 --> 20:34.950
它是一个政格

20:34.950 --> 20:36.470
那这个政格做什么用

20:36.470 --> 20:38.550
它就是匹配什么样的文件

20:38.550 --> 20:39.430
那这里面呢

20:39.510 --> 20:42.630
我匹配以deljs结尾的文件

20:42.630 --> 20:44.310
ok 那这个就写完了

20:44.310 --> 20:45.750
一共有三个参数

20:45.750 --> 20:47.030
这个呢不要错了啊

20:47.030 --> 20:49.030
那电影完这个requireAPI

20:49.030 --> 20:49.670
长量之后

20:49.670 --> 20:50.790
那我们这个里面呢

20:50.790 --> 20:52.870
我们再创建一个什么呢

20:52.870 --> 20:54.550
接收所有的

20:54.550 --> 20:55.990
我们这个requireAPI

20:55.990 --> 20:58.390
导出的这个API方法的一个模块

20:58.390 --> 20:59.270
那在这个里面啊

20:59.270 --> 21:00.390
我太似的

21:00.390 --> 21:01.750
太似的deljs的时候

21:02.550 --> 21:04.470
我这个是三和四啊

21:04.470 --> 21:05.990
要不然咱们提出不开

21:05.990 --> 21:07.350
因为home里面是这个

21:07.350 --> 21:09.910
getlist和getlist.2对吧

21:10.950 --> 21:13.350
好了那此时这个搞定之后呢

21:13.350 --> 21:14.550
那我这个里面啊

21:14.550 --> 21:18.150
把这个还是回到我们index.js里面

21:18.150 --> 21:18.950
定一个model

21:18.950 --> 21:20.470
然后呢我们这个里面

21:20.470 --> 21:23.030
其实这个时候requireAPI

21:23.030 --> 21:23.910
就会有一个什么呢

21:23.910 --> 21:25.670
就会有一个case文件

21:25.670 --> 21:28.230
那我这里面使用它的require

21:30.550 --> 21:31.830
requireAPI

21:31.830 --> 21:34.230
然后呢我们点kys

21:34.230 --> 21:35.110
这个case啊

21:35.190 --> 21:37.590
其实是找到我们这个里面啊

21:37.590 --> 21:38.310
所有的文件

21:38.310 --> 21:40.710
那此时找到的就是home和太似的

21:40.710 --> 21:43.190
然后呢我对它进行一个

21:43.190 --> 21:45.750
for each来进行一个便利

21:45.750 --> 21:46.710
那便利的时候

21:46.710 --> 21:47.910
我们这里面是k

21:48.390 --> 21:50.710
之后呢这个时候是index

21:51.750 --> 21:53.750
ok那便利循环

21:53.750 --> 21:54.870
它的作用是什么呢

21:54.870 --> 21:55.750
我在这个里面

21:55.750 --> 21:57.590
其实就是想对它

21:57.590 --> 21:59.910
哎这个case for each

21:59.910 --> 22:00.950
少了个括号

22:00.950 --> 22:02.550
我们这里面加一个括号

22:02.550 --> 22:04.950
其实我就是想对它里面的

22:05.030 --> 22:07.510
每一个文件的API方法

22:07.510 --> 22:09.430
进行一个读取就ok了

22:09.430 --> 22:11.190
这里面我再加一个括号

22:11.190 --> 22:12.470
那这里面怎么做

22:12.470 --> 22:13.910
我这个判断一下

22:13.910 --> 22:15.590
如果说你这个k

22:16.310 --> 22:17.430
等于等于啊

22:17.430 --> 22:18.310
sorry这个

22:18.310 --> 22:20.310
我们这个k应该是等于什么呢

22:20.310 --> 22:23.030
等于我们的点刚index.js

22:23.030 --> 22:24.470
也就是说它自己本身

22:24.470 --> 22:25.430
那自己本身

22:25.430 --> 22:27.190
你就不要读取它方法了

22:27.190 --> 22:28.710
因为这些不是API的方法

22:28.710 --> 22:29.190
对不对

22:29.190 --> 22:31.110
那我直接就给它return掉

22:31.110 --> 22:31.750
否则呢

22:31.750 --> 22:34.150
我就通过object.sync

22:34.230 --> 22:35.750
给它做一个合并

22:35.750 --> 22:36.870
合并怎么合并

22:36.870 --> 22:39.110
我就往model里面做一个扩展

22:39.110 --> 22:40.710
首先第一个是model

22:40.710 --> 22:42.310
然后呢第二个是

22:42.310 --> 22:46.150
我们这个requireAPI的一个k方法啊

22:46.150 --> 22:48.310
requireAPI把里面的这个k

22:48.310 --> 22:49.990
都给它填充进去

22:49.990 --> 22:50.710
那这样呢

22:50.710 --> 22:53.830
它就能给我们获取到一个什么

22:53.830 --> 22:55.670
所有的把这个方法

22:55.670 --> 22:58.230
都给它输出的这样一个对象

22:58.230 --> 22:59.830
那我们直接的给它做一个

22:59.830 --> 23:01.830
导出export

23:01.910 --> 23:03.270
然后呢default

23:03.270 --> 23:04.550
给它导出谁

23:04.550 --> 23:06.950
把我们的model给它进行一个导出

23:06.950 --> 23:07.830
导出之后

23:07.830 --> 23:08.870
那我们这时候呢

23:08.870 --> 23:11.110
就可以将它进行一个挂载

23:11.110 --> 23:12.310
我们挂载到哪

23:12.310 --> 23:14.470
回到我们慢点js里面

23:14.470 --> 23:15.670
慢点js里面

23:15.670 --> 23:18.470
对它进行一个挂载就可以了

23:18.470 --> 23:19.350
我们首先呢

23:19.350 --> 23:22.070
对这个模块进行一个导入

23:22.070 --> 23:25.270
那是我们importmodel

23:25.270 --> 23:27.110
from从哪来啊

23:27.110 --> 23:30.150
从我们的这个查一下路径

23:30.230 --> 23:33.670
Adex interface API index.js

23:33.670 --> 23:34.470
是不是在这

23:34.470 --> 23:36.390
然后呢对它进行一个挂载

23:36.390 --> 23:37.350
如何来挂载呢

23:37.350 --> 23:40.070
就是我们的vill原形上

23:40.070 --> 23:42.150
那proto type

23:42.150 --> 23:43.430
然后呢定一个方法

23:43.430 --> 23:44.950
dollarhttp

23:44.950 --> 23:46.870
这里面定一个dollarhttp

23:46.870 --> 23:47.430
等于谁呢

23:47.430 --> 23:48.870
等于我们的model

23:48.870 --> 23:49.350
那这样呢

23:49.350 --> 23:51.350
我们就可以来进行一个什么呢

23:51.350 --> 23:52.550
查看使用了啊

23:52.550 --> 23:52.950
现在呢

23:52.950 --> 23:53.750
我们刷新界面

23:53.750 --> 23:55.510
来看一下什么也没有对吧

23:55.510 --> 23:56.150
什么也没有

23:56.150 --> 23:57.910
我们给它进行一个打印

23:57.910 --> 23:59.350
也就是说刚才

23:59.430 --> 24:01.830
我们定一好的这个index.js里面

24:01.830 --> 24:02.790
导出的这个模块

24:02.790 --> 24:03.430
然后看一下

24:03.430 --> 24:05.270
它每一步都是什么内容

24:05.270 --> 24:05.990
这个里面

24:05.990 --> 24:07.030
我们首先看一下

24:07.030 --> 24:08.230
require.contex的

24:08.230 --> 24:08.470
OK

24:09.270 --> 24:09.990
这个政策啊

24:09.990 --> 24:11.030
应该是一个dollar

24:11.030 --> 24:11.430
这个呢

24:11.430 --> 24:12.310
调整一下

24:12.310 --> 24:15.510
我们第一个先打印require api.case

24:15.510 --> 24:16.630
看它是什么内容啊

24:16.630 --> 24:17.590
这里面打印

24:17.590 --> 24:18.070
好的

24:18.070 --> 24:18.950
那放到这里面

24:18.950 --> 24:19.670
你看一下

24:19.670 --> 24:21.110
分别是三个文件

24:21.110 --> 24:22.630
一个是index.js

24:22.630 --> 24:24.070
一个是interface home

24:24.070 --> 24:25.510
test.js对吧

24:25.510 --> 24:26.630
这样一个数组

24:26.630 --> 24:28.790
我们通过它的这个case方法

24:28.790 --> 24:30.630
就可以获得一个数组之后

24:30.630 --> 24:32.070
就可以进行for each

24:32.070 --> 24:33.590
那在这个for each里面

24:33.590 --> 24:35.190
其实我们还做了一步操作

24:35.190 --> 24:36.470
那我们可以看一下

24:36.470 --> 24:38.230
这个require api.k

24:38.230 --> 24:39.110
它是干嘛用的

24:39.110 --> 24:40.550
我们可以看一下啊

24:40.550 --> 24:43.110
require api.下面的k

24:44.310 --> 24:48.470
我们找到它require api.下面的这个k

24:48.470 --> 24:49.750
来做一个打印

24:49.750 --> 24:50.390
来看一眼啊

24:51.110 --> 24:51.830
你会发现啊

24:51.830 --> 24:53.510
require api.下面的k

24:53.510 --> 24:54.710
打印出来之后

24:54.710 --> 24:55.750
这个每一次

24:55.750 --> 24:57.350
你看第一次在home里面

24:57.430 --> 24:59.430
它获取到了一个get label list的

24:59.430 --> 25:00.790
以及list的2

25:00.790 --> 25:01.350
然后呢

25:01.350 --> 25:02.230
它又有一个

25:02.230 --> 25:02.870
第二次呢

25:02.870 --> 25:04.550
是get label list的3

25:04.550 --> 25:06.470
以及label list的4

25:06.470 --> 25:07.990
那这样四个方法

25:07.990 --> 25:10.310
是不是完成了统一的输出

25:10.310 --> 25:11.990
也就是说每次循环的时候

25:11.990 --> 25:14.310
我对这个objectsync

25:14.310 --> 25:14.710
然后呢

25:14.710 --> 25:16.950
给这个空对下进行一个填充

25:16.950 --> 25:17.750
把这几个方法

25:17.750 --> 25:19.030
是不是都填充进去了

25:19.030 --> 25:20.550
在这个填充的过程里面

25:20.550 --> 25:21.670
你需要注意一点啊

25:21.670 --> 25:22.710
不要重明啊

25:22.710 --> 25:24.230
那你重明你会发现

25:24.230 --> 25:26.070
objectsync这个事

25:26.070 --> 25:27.030
是不是后面的

25:27.110 --> 25:28.230
默认就把前面的

25:28.230 --> 25:29.030
给覆盖掉了

25:29.030 --> 25:29.510
对吧

25:29.510 --> 25:29.910
这个呢

25:29.910 --> 25:31.190
我们要明确一下

25:31.190 --> 25:32.150
那你现在

25:32.150 --> 25:33.670
既然有了这个方法之后

25:33.670 --> 25:35.190
那我们再回到

25:35.190 --> 25:37.590
刚才的这个index.vio里面

25:37.590 --> 25:38.630
我们看一下啊

25:38.630 --> 25:39.910
在unload里面

25:39.910 --> 25:41.270
我们直接调用

25:41.270 --> 25:43.590
這次.dollarhttp

25:43.590 --> 25:45.350
看它里面有什么内容

25:45.350 --> 25:48.470
le 这次.dollarhttp

25:48.470 --> 25:49.350
OK

25:49.350 --> 25:50.390
看一下这个里面

25:50.390 --> 25:52.550
是不是有我们需要的这个API

25:52.550 --> 25:53.590
那这个API

25:53.590 --> 25:54.630
咱们看一下啊

25:54.630 --> 25:57.350
这次.dollarhttp

25:57.350 --> 25:58.870
我们直接在这里面

25:58.870 --> 26:00.390
是不是有guide label list的

26:00.390 --> 26:01.670
guide label list的2

26:01.670 --> 26:02.870
以及3和4

26:02.870 --> 26:03.750
这是不是都有了

26:03.750 --> 26:04.390
对吧

26:04.390 --> 26:06.150
那你既然都有了之后

26:06.150 --> 26:07.270
那我们这个里面

26:07.270 --> 26:09.430
是不是就可以来直接使用

26:09.430 --> 26:10.790
而不需要用这种形式呢

26:10.790 --> 26:11.190
对吧

26:11.190 --> 26:12.070
这是第一种形式

26:12.070 --> 26:12.950
那我们直接的

26:12.950 --> 26:13.990
这个怎么来使用

26:13.990 --> 26:15.270
其实非常简单了

26:15.270 --> 26:17.190
我们只要把这个avit

26:17.190 --> 26:18.070
这个里面

26:18.070 --> 26:19.990
前面添上一个

26:19.990 --> 26:21.910
这次.dollarhttp

26:21.910 --> 26:22.390
然后呢

26:22.470 --> 26:24.230
第二guide label list的

26:24.230 --> 26:25.910
这种形式是不是就可以了

26:25.910 --> 26:27.110
然后咱们来看一下

26:27.110 --> 26:27.910
可以看到啊

26:27.910 --> 26:29.430
现在我们的这个结果值

26:29.430 --> 26:31.270
和我们刚才是不是完全一致

26:31.270 --> 26:32.390
那这样做的好处

26:32.390 --> 26:33.350
可能现在第一个

26:33.350 --> 26:34.230
我们看不出来

26:34.230 --> 26:35.750
但是如果说接下来

26:35.750 --> 26:36.710
我们再有更多的

26:36.710 --> 26:37.910
结果请求的时候

26:37.910 --> 26:38.790
那这样的使用

26:38.790 --> 26:39.990
是不是比较方便了

26:39.990 --> 26:41.430
你只需要

26:41.430 --> 26:42.310
UI部分

26:42.310 --> 26:43.670
只需要进行数据的获取

26:43.670 --> 26:44.230
就OK了

26:44.230 --> 26:44.790
对不对

26:44.790 --> 26:45.270
然后呢

26:45.270 --> 26:46.710
剩下的业务逻辑那一块

26:46.710 --> 26:47.830
我们统一的

26:47.830 --> 26:48.950
在哪个里面来做

26:48.950 --> 26:50.710
我们就在这个interface里面

26:50.710 --> 26:51.190
来做

26:51.190 --> 26:52.070
是不是就可以了

26:52.150 --> 26:52.550
然后呢

26:52.550 --> 26:53.830
你把所有的接口

26:53.830 --> 26:55.430
可以进行模块的划分

26:55.430 --> 26:56.150
比如说home

26:56.150 --> 26:57.350
那你就放在这个里面

26:57.350 --> 26:58.550
那假如说

26:58.550 --> 27:00.150
我们有这个其他的

27:00.150 --> 27:00.870
那follow啊

27:00.870 --> 27:02.310
或者是self模块的

27:02.310 --> 27:03.110
那你在定义

27:03.110 --> 27:04.870
其他的这个模块的接口

27:04.870 --> 27:05.510
就OK了

27:05.510 --> 27:06.950
当我们这个test

27:06.950 --> 27:08.230
暂时是不需要的

27:08.230 --> 27:09.830
咱们就把它给删除掉

27:09.830 --> 27:10.230
然后呢

27:10.230 --> 27:11.830
这个guide label list的2

27:11.830 --> 27:12.470
咱们也没有

27:12.470 --> 27:12.790
OK

27:12.790 --> 27:14.710
那这个我们也不需要使用

27:14.710 --> 27:15.910
回到我们的这个界面

27:15.910 --> 27:16.390
然后呢

27:16.390 --> 27:17.510
咱们还得印证一点啊

27:17.510 --> 27:17.990
是什么呢

27:17.990 --> 27:19.750
就是我们的这个

27:19.750 --> 27:20.790
原来数里面

27:20.790 --> 27:23.030
我们这个时候是返回正常

27:23.030 --> 27:24.310
如果说我们扣的

27:24.310 --> 27:25.110
不是零呢

27:25.110 --> 27:25.910
扣的是一呢

27:25.910 --> 27:26.390
对不对

27:26.390 --> 27:27.750
那这时候呢

27:27.750 --> 27:29.590
我们要明确的指导

27:29.590 --> 27:30.470
如果说是一

27:30.470 --> 27:31.590
因为我们定义的

27:31.590 --> 27:32.710
atp方法里面

27:32.710 --> 27:34.790
要接一个msg

27:34.790 --> 27:36.150
那这个里面

27:36.150 --> 27:37.110
是不是我们要给它

27:37.110 --> 27:38.310
返回一个msg

27:38.310 --> 27:39.110
所以说这个里面

27:39.110 --> 27:40.070
我们就测试一下

27:40.070 --> 27:40.710
msg

27:40.710 --> 27:41.990
我们给一个什么值呢

27:41.990 --> 27:44.710
我们这个查询数据失败

27:44.710 --> 27:45.350
对吧

27:45.350 --> 27:46.390
数据失败

27:46.390 --> 27:48.550
这个给他做一个测试啊

27:48.550 --> 27:49.430
然后这个时候呢

27:49.510 --> 27:51.670
我们给他做一个上传部署

27:51.670 --> 27:52.870
你看一下什么呢

27:52.870 --> 27:54.710
看一下我们这个atp.js

27:54.710 --> 27:56.790
是不是能给他抓取到

27:56.790 --> 27:57.590
因为在这个里面

27:57.590 --> 27:58.310
咱们是有一个

27:58.310 --> 27:59.510
用你一点收头子的

27:59.510 --> 28:01.030
进行抓取的啊

28:01.030 --> 28:01.270
好的

28:01.270 --> 28:03.110
那咱们再来测试一下啊

28:03.110 --> 28:04.150
你会发现这时候

28:04.150 --> 28:05.030
查询数据失败

28:05.030 --> 28:05.510
而且呢

28:05.510 --> 28:07.030
这个也不做渲染了

28:07.030 --> 28:07.590
对不对

28:07.590 --> 28:08.550
那这个就说明什么

28:08.550 --> 28:09.910
说明我们这个

28:09.910 --> 28:11.030
整个的封装

28:11.030 --> 28:11.510
OK

28:11.510 --> 28:13.990
那是不是就已经搞定了

28:13.990 --> 28:14.870
对吧

28:14.870 --> 28:15.110
好的

28:15.110 --> 28:15.670
那这个呢

28:15.670 --> 28:17.510
就是我们一个完整的

28:17.510 --> 28:19.030
基础的API封装的

28:19.990 --> 28:21.590
那它都有哪些步骤

28:21.590 --> 28:22.390
来实现的

28:22.390 --> 28:23.110
在这个里面呢

28:23.110 --> 28:24.950
我们可以再回顾一下

28:24.950 --> 28:25.430
首先呢

28:25.430 --> 28:26.390
就是我们定义了

28:26.390 --> 28:27.190
一个公共的

28:27.190 --> 28:28.390
atp.js请求方法

28:28.390 --> 28:28.870
之后呢

28:28.870 --> 28:30.470
就是创建接口文件

28:30.470 --> 28:31.590
进行公共方法的

28:31.590 --> 28:32.390
一个调用

28:32.390 --> 28:32.790
之后呢

28:32.790 --> 28:33.910
我们将这些方法

28:33.910 --> 28:35.510
挂载到位有原形上

28:35.510 --> 28:36.790
供我们每个界面

28:36.790 --> 28:37.670
来进行使用

28:37.670 --> 28:38.310
这里面

28:38.310 --> 28:39.750
我们使用vipack

28:39.750 --> 28:40.790
给我们提供的

28:40.790 --> 28:42.470
require context的方法

28:42.470 --> 28:44.790
来进行我们每一个

28:44.790 --> 28:45.510
文件里面

28:45.510 --> 28:46.710
方法的一个便利

28:46.710 --> 28:47.190
并且呢

28:47.190 --> 28:47.910
这个便利是

28:48.390 --> 28:49.590
做一个便利处理的

28:49.590 --> 28:50.150
对不对

28:50.150 --> 28:51.190
统一收集到

28:51.190 --> 28:52.630
我们一个对象上面

28:52.630 --> 28:53.270
并且呢

28:53.270 --> 28:54.310
将这个对象

28:54.310 --> 28:55.190
挂载到我们

28:55.190 --> 28:56.630
vip的原形上面

28:56.630 --> 28:57.350
这就是刚才

28:57.350 --> 28:58.790
我们时间的这个步骤

28:58.790 --> 28:59.590
最后呢

28:59.590 --> 29:01.270
我们就是在组件里面

29:01.270 --> 29:02.630
可以非常轻松的

29:02.630 --> 29:03.750
调用这一次点

29:03.750 --> 29:04.710
dollard.atp

29:04.710 --> 29:06.390
也就是vip原形上

29:06.390 --> 29:07.430
扩展的这个方法

29:07.430 --> 29:08.790
guide label list的

29:08.790 --> 29:10.070
是不是就ok了

29:10.070 --> 29:10.630
那这个呢

29:10.630 --> 29:11.190
就是我们

29:11.190 --> 29:13.110
整个的一个时间过程

29:13.110 --> 29:13.430
好的

29:13.430 --> 29:14.550
我们本节课

29:14.550 --> 29:15.110
就到这里

