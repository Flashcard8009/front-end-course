WEBVTT

00:00.690 --> 00:05.170
各位同学 大家好 这几课我们继续小程序的一个学习

00:05.170 --> 00:09.210
通过上几课的学习 我们对小程序的一个基本结构

00:09.210 --> 00:14.410
以及小程序这个工具里面的一些操作 我们有了一个简单的了解

00:14.410 --> 00:18.210
那么这几课我们来实现一下 如何把自己的业务代码

00:18.210 --> 00:21.010
从初始化进行一个小程序的构建

00:21.010 --> 00:23.490
这里面我们主要是看一些哪些内容呢

00:23.490 --> 00:26.490
首先我们看一下生命周期 函数

00:26.490 --> 00:29.170
包括我们的一些小程序的基本操作

00:29.290 --> 00:32.050
比如说界面跳转 还有一些数据绑定

00:32.050 --> 00:35.090
包括条件渲染 以及我们的列表渲染

00:35.090 --> 00:38.610
最后我们再这个创建一个组件的使用

00:38.610 --> 00:42.130
包括事件的一些处理 这些我们都来实现一下

00:42.130 --> 00:45.730
那怎么来实现呢 这样我们就开始一步一步的来做一下

00:45.730 --> 00:48.250
首先打开我们的这个微信开发者工具

00:48.250 --> 00:50.730
在开发者工具里面 我这面初始化的时候

00:50.730 --> 00:54.050
已经把它模板 定义好的两个界面给删除了

00:54.050 --> 00:56.810
我们创建自己的两个界面 来测试一下

00:56.850 --> 00:59.210
怎么来创建呢 这里面非常简单

00:59.210 --> 01:02.650
我们首先右键在配置字下面 新键文件夹

01:02.650 --> 01:05.170
那这个文件夹 我定一个Home

01:05.170 --> 01:08.770
在Home里面我选择新键配置

01:08.770 --> 01:10.810
然后最好是跟它同名

01:10.810 --> 01:14.090
当你会完成之后 你会发现这里面就定义好了

01:14.090 --> 01:17.970
Home.js,JSON,XML,以及XSS

01:17.970 --> 01:20.330
也就是说一个页面所需要的几个文件

01:20.330 --> 01:23.450
我们在这个里面都已经默认给我们生成好了

01:23.450 --> 01:26.450
我们一次的在这个app.json里面

01:26.450 --> 01:28.850
也就是说最外层的app.json里面

01:28.850 --> 01:32.250
进行一下配置 我们就可以来进行使用了

01:32.250 --> 01:34.530
那怎么来做呢 我们创建好第一个了

01:34.530 --> 01:37.250
那我这里面再定义一个定义

01:37.250 --> 01:39.330
新键一个文件夹 Other

01:39.330 --> 01:43.410
然后里面同样的给做一个配置的定义

01:43.410 --> 01:45.010
注意不要写扩展名

01:45.010 --> 01:47.090
它自动默认就会给我们生成

01:47.090 --> 01:49.210
那这里面是生成了4个

01:49.210 --> 01:52.410
那生成4个之后 我们在这里面定一下配置

01:52.410 --> 01:55.170
我们这里面写一个什么Home

01:55.170 --> 01:57.650
然后它的这个界面也是Home

01:57.650 --> 02:02.090
之后我配置这次下面是 Other

02:02.090 --> 02:03.690
好的 写完成之后

02:03.690 --> 02:05.410
这里面会有一个未能保存

02:05.410 --> 02:07.290
app.json文件的内容

02:07.290 --> 02:09.210
然后脚心 请你将的这个版本

02:09.210 --> 02:11.410
与此文件内容进行一个比较

02:11.410 --> 02:14.010
那这时候我直接做一个覆盖就OK了

02:14.010 --> 02:16.730
那此时它里面的页面文件

02:16.730 --> 02:18.650
就是我们定义好的这个文件了

02:18.650 --> 02:19.490
那我们来看一下

02:19.490 --> 02:21.450
比如说这个XML里面

02:21.490 --> 02:23.090
我们可以给它改一句话

02:23.090 --> 02:26.090
叫什么 叫Page Home Page

02:26.090 --> 02:27.730
OK 定义好的之后

02:27.730 --> 02:29.970
它会有一个Home Page的展示

02:29.970 --> 02:31.650
我们把它的这个合上

02:31.650 --> 02:34.050
合上之后我们依次的来看一下

02:34.050 --> 02:37.130
首先我们看这个app.js

02:37.130 --> 02:38.290
我们出手话的时候

02:38.290 --> 02:39.250
它会给我们一套

02:39.250 --> 02:40.530
然后我们自己定义

02:40.530 --> 02:41.250
怎么定义呢

02:41.250 --> 02:43.170
在这个里面我们app

02:43.170 --> 02:46.010
OK 一回车这里面就会有一些

02:46.010 --> 02:48.250
全局可执行的生命周期函数

02:48.250 --> 02:49.610
比如说这里面有Online

02:49.770 --> 02:50.610
以及on show

02:50.610 --> 02:51.890
包括on hide

02:51.890 --> 02:53.650
还有一个错误处理的on error

02:53.650 --> 02:55.090
这样我们看一下

02:55.090 --> 02:58.090
依次看一下它的执行时机

02:58.090 --> 03:02.090
我在这个里面使用on launch

03:03.450 --> 03:05.090
然后给它做一个打印

03:05.090 --> 03:06.690
每一个都给它打印一下

03:06.690 --> 03:08.850
这个就是on show

03:08.850 --> 03:13.490
最后一个log是我们的on hide

03:13.490 --> 03:15.010
然后把这三个看一下

03:15.010 --> 03:16.090
首先你会发现

03:16.090 --> 03:17.570
我们出手话的时候

03:17.730 --> 03:20.210
它首先执行的是on launch

03:20.210 --> 03:21.810
on launch是干嘛用它

03:21.810 --> 03:24.850
这个是在当小程区出手话完成的时候

03:24.850 --> 03:26.490
会处发on launch一次

03:26.490 --> 03:28.810
也就是说你打开一个小程区

03:28.810 --> 03:32.170
这个里面就会执行一次on launch

03:32.170 --> 03:35.250
我们看到执行完on launch之后

03:35.250 --> 03:37.810
它马上就执行了一个on show

03:37.810 --> 03:40.250
on show指的是当小程区启动

03:40.250 --> 03:41.930
或从后台进入前台时候

03:41.930 --> 03:43.490
会处发一个on show

03:43.490 --> 03:44.250
在这个里面

03:44.250 --> 03:45.770
我们刚才定一个on hide

03:45.770 --> 03:47.530
on hide是没有被处发的

03:47.610 --> 03:50.490
这个时候小程区从前台进入后台

03:50.490 --> 03:51.850
会处发一次on hide

03:51.850 --> 03:53.290
那什么时候会进入后台

03:53.290 --> 03:56.130
其实我们在这个里面还可以做一个模拟

03:56.130 --> 03:57.410
怎么来实现模拟呢

03:57.410 --> 04:00.450
我们这个里面原来有一个什么后台切换

04:00.450 --> 04:00.730
对吧

04:00.730 --> 04:02.290
所以说我们把它给调整出来

04:02.290 --> 04:05.410
怎么把切后台给调整出来

04:05.410 --> 04:06.610
咱们之前也知道了

04:06.610 --> 04:08.530
我们在工具里面

04:08.530 --> 04:10.530
有一个什么工具栏管理

04:10.530 --> 04:11.650
在工具栏管理

04:11.650 --> 04:13.050
我们选择切后台

04:13.050 --> 04:14.530
OK 点击确定

04:14.530 --> 04:17.450
那这样就有了一个切后台的操作按钮

04:17.450 --> 04:18.530
我们来试一下

04:18.530 --> 04:21.010
现在我们是在后面见面

04:21.010 --> 04:22.970
然后我点击切后台

04:22.970 --> 04:25.250
此时你会发现on hide是不是又执行了

04:25.250 --> 04:28.370
然后我再由后台切入到前台之后

04:28.370 --> 04:31.970
你会发现on show又开始进行了执行一次

04:31.970 --> 04:34.170
但是on launch是执行了一次

04:34.170 --> 04:35.210
这个指的是什么呢

04:35.210 --> 04:37.330
我们小程区创建它在执行

04:37.330 --> 04:39.970
但如果说你是一个后台与前台

04:39.970 --> 04:41.610
进行切换操作的时候

04:41.610 --> 04:43.010
这个就不执行了

04:43.010 --> 04:44.970
那这一点我们要注意一下

04:44.970 --> 04:46.970
这个就是整个全局里面

04:46.970 --> 04:50.090
我们使用的比较多的几个生命周期函数

04:50.090 --> 04:51.410
那我们接下来再看一下

04:51.410 --> 04:52.890
生命周期函数还有哪些

04:52.890 --> 04:55.170
首先刚才看的是全局的生命周期函数

04:55.170 --> 04:56.730
那么接下来我们看一下什么呢

04:56.730 --> 04:58.810
页面级别的生命周期函数

04:58.810 --> 05:00.170
在页面生命周期函数

05:00.170 --> 05:01.610
我们可以打开这个链接

05:01.610 --> 05:03.010
看一下这个里面

05:03.010 --> 05:05.690
是整个页面生命周期函数的一些内容

05:05.690 --> 05:06.890
然后这个我们怎么看

05:06.890 --> 05:09.170
其实我们用小程序

05:09.170 --> 05:11.930
默认创建好的界面里面

05:11.930 --> 05:14.890
它就会给我们提供一些生命周期函数

05:14.970 --> 05:17.210
在我们每个页面的这个

05:17.210 --> 05:18.170
执行文件里面

05:18.170 --> 05:19.130
Home点这颜色

05:19.130 --> 05:20.530
也就是说我们的业务逻辑

05:20.530 --> 05:21.690
代码存放处

05:21.690 --> 05:22.970
这里面有Unload

05:22.970 --> 05:25.530
Unload指的是页面加载

05:25.530 --> 05:29.050
然后还有Unread页面出色

05:29.050 --> 05:29.850
渲染完成

05:29.850 --> 05:32.130
还有Unshow生命周期函数

05:32.130 --> 05:33.810
坚定页面的一个显示

05:33.810 --> 05:36.330
那我们依次可以来看一下

05:36.330 --> 05:39.810
这里面我们分别的对它进行一个打印

05:39.810 --> 05:42.570
这里面是Unload的

05:42.570 --> 05:44.210
把它给加一个引号

05:44.250 --> 05:47.850
然后我们再来看一下它的Unread

05:49.410 --> 05:52.130
logUnread

05:52.130 --> 05:54.050
然后是Unshow

05:54.050 --> 05:58.310
在这里面打印一下

05:58.310 --> 05:59.030
Unshow

05:59.030 --> 06:02.310
最后页面里面还有一个Unhead

06:02.310 --> 06:03.510
我们看一下

06:03.510 --> 06:04.750
Unhead

06:04.750 --> 06:06.390
OK

06:06.390 --> 06:08.430
我们这样只要编一完了之后

06:08.430 --> 06:10.390
马上就会继续重新执行

06:10.390 --> 06:11.990
那我们依次来看一下

06:11.990 --> 06:12.790
首先看的时候

06:12.790 --> 06:13.630
我们从右边看

06:13.630 --> 06:14.590
这个里面

06:14.590 --> 06:16.750
它出指化第一个执行的是

06:16.750 --> 06:18.670
我们全局的Unline函数

06:18.670 --> 06:21.350
也就是说代表小程序加载完成

06:21.350 --> 06:23.950
之后又执行了一个Unshow

06:23.950 --> 06:26.150
Unshow执行的是FV.js里面

06:26.150 --> 06:26.990
这个

06:26.990 --> 06:28.670
也就是说小程序启动之后

06:28.670 --> 06:31.670
马上执行了一个Unshow这样一个函数

06:31.670 --> 06:33.990
然后它依次执行完了

06:33.990 --> 06:35.030
我们全局的之后

06:35.030 --> 06:37.270
开始进行页面级别的执行

06:37.270 --> 06:38.350
页面执行的时候

06:38.350 --> 06:40.710
首先执行Unload

06:40.710 --> 06:41.470
在这个里面

06:41.470 --> 06:43.950
第15行打印出来一个Unload

06:43.950 --> 06:46.630
代表着我们坚挺页面加载

06:46.630 --> 06:49.150
然后19行是一个Unready

06:49.150 --> 06:50.750
然后这个里面

06:50.750 --> 06:52.870
Unload的执行完了之后

06:52.870 --> 06:54.430
是我们的一个Unshow

06:54.430 --> 06:55.190
Sorry

06:55.190 --> 06:56.110
Unshow执行

06:56.110 --> 06:56.990
这个指的是什么呢

06:56.990 --> 06:59.510
坚挺页面显示

06:59.510 --> 07:01.270
那显示还有一个是什么呢

07:01.270 --> 07:01.950
Unready

07:01.950 --> 07:03.790
Radi指的是显示这个

07:03.790 --> 07:05.350
我们渲染完成了

07:05.350 --> 07:07.350
它就会执行一个Unready

07:07.350 --> 07:08.630
这个有点类似于什么呢

07:08.630 --> 07:11.430
我们Mountate和BeforeMount

07:11.430 --> 07:11.790
对吧

07:11.790 --> 07:13.550
这两个勾的函数

07:13.590 --> 07:15.990
其实在Viu里面是不是也有类似的

07:15.990 --> 07:17.750
还有一个就是Unhead

07:17.750 --> 07:19.630
坚挺页面的一个隐藏

07:19.630 --> 07:22.350
那这样我们先来考虑一个问题

07:22.350 --> 07:22.910
就是什么呢

07:22.910 --> 07:24.830
我们直接的看切后台之后

07:24.830 --> 07:27.990
它这个执行又是什么样的过程

07:27.990 --> 07:29.470
我们现在点击切后台

07:29.470 --> 07:31.550
3621分别执行了

07:31.550 --> 07:33.670
也就是说它的执行顺序

07:33.670 --> 07:38.070
先执行我们页面里面的Unhead

07:38.070 --> 07:41.270
然后再进行全局的Unhead执行

07:41.270 --> 07:42.950
这个我们要明确一下

07:42.990 --> 07:44.430
它的这个执行顺序

07:44.430 --> 07:46.190
也就是说隐藏的时候

07:46.190 --> 07:48.110
是先进行页面隐藏

07:48.110 --> 07:50.710
然后再进行全局的一个隐藏

07:50.710 --> 07:52.990
然后我们切到前台之后

07:52.990 --> 07:55.590
同样它这个执行的时候

07:55.590 --> 07:58.070
显示首先显示的是我们最外面

07:58.070 --> 08:00.270
App.js里面的这个Unshow

08:00.270 --> 08:04.030
其次在执行我们页面里面的这个Unshow

08:04.030 --> 08:07.270
我们看一下这个Home里面的这个Unshow

08:07.270 --> 08:09.550
也就是29行的这个Unshow

08:09.550 --> 08:11.590
说完页面2的生命周期函数之后

08:11.590 --> 08:13.630
我们再来说一下这个组价里面的

08:13.630 --> 08:14.990
生命周期函数

08:14.990 --> 08:16.670
组价里面的生命周期函数

08:16.670 --> 08:17.590
我们怎么来看

08:17.590 --> 08:19.390
首先我们要定义组价

08:19.390 --> 08:22.150
如何来进行小程序里面的组价定义

08:22.150 --> 08:24.550
首先我们要创建一个文件家

08:25.870 --> 08:28.190
这个文件家我们就叫它Components

08:28.190 --> 08:30.790
Components专门存放我们的一个组价

08:30.790 --> 08:33.190
这个里面我们首先要做一件事

08:33.190 --> 08:36.830
定义先是要把这个组价进行一下定义

08:36.830 --> 08:37.710
怎么来定义呢

08:37.710 --> 08:39.350
为了组价的这个方面管理

08:39.350 --> 08:41.390
我们先创建一个文件家

08:41.470 --> 08:44.830
那叫TestComponent

08:44.830 --> 08:46.830
TestComponent我定义好之后

08:46.830 --> 08:48.190
在这个里面右键

08:48.190 --> 08:49.790
这里面有几个选项

08:49.790 --> 08:51.790
我在里面选新建Component

08:51.790 --> 08:53.470
最好跟它同名

08:53.470 --> 08:55.790
这样方便我们查看

08:55.790 --> 08:58.110
TestComponent我们定义好的之后

08:58.110 --> 08:59.670
回车回车此时

08:59.670 --> 09:02.590
它就会给我生成组价的几个文件

09:02.590 --> 09:05.150
组价文件其实我们观察的时候

09:05.150 --> 09:09.190
它这个结构里面其实没有什么太多的区别

09:09.190 --> 09:10.670
我在这里面重新给它写一下

09:10.670 --> 09:13.870
TestComponentPage

09:13.870 --> 09:16.510
写完之后我们依次来看一下

09:16.510 --> 09:18.070
其实这个组建里面

09:18.070 --> 09:21.310
它和我们这个页面有一个比较大的区别

09:21.310 --> 09:21.710
是什么呢

09:21.710 --> 09:24.670
原来我们的页面里面的后面点这颜色

09:24.670 --> 09:25.750
它叫Page

09:25.750 --> 09:27.510
也就是说实力化一个Page

09:27.510 --> 09:29.430
但是在TestComponent里面

09:29.430 --> 09:32.270
它其实是实力化出来一个Component对象

09:32.270 --> 09:34.070
这个我们要区分一下

09:34.070 --> 09:35.470
那这个做完了之后

09:35.470 --> 09:36.270
这是第一步

09:36.270 --> 09:37.510
我们定义好组价

09:37.510 --> 09:40.430
第二步我们再需要使用组价的

09:40.430 --> 09:43.430
页面进行一个组价的引用

09:43.430 --> 09:44.430
如何来做

09:44.430 --> 09:47.030
比如说我想在Home里面进行组价的使用

09:47.030 --> 09:48.270
那我在这个里面

09:48.270 --> 09:50.110
它有一个JsonPage文件

09:50.110 --> 09:52.230
这里面有一个YougeneComponents

09:52.230 --> 09:54.310
我就在这个里面进行定义

09:54.310 --> 09:56.390
首先它的结构是K和Value

09:56.390 --> 10:00.470
K就是我们在这个里面使用到组价的一个标签

10:00.470 --> 10:02.870
那我这时候可以定义一下

10:02.870 --> 10:04.910
叫TestComponent

10:04.910 --> 10:06.870
TestComponent定义好之后

10:06.870 --> 10:10.190
第二个它的值就是我们引入的路径

10:10.230 --> 10:11.190
点了钢 点了钢

10:11.190 --> 10:14.470
找到Components下面的TestComponent

10:14.470 --> 10:17.390
然后跟它同名的Component

10:17.390 --> 10:18.950
OK 我保存完成

10:18.950 --> 10:19.910
保存完成之后

10:19.910 --> 10:20.950
现在目前来讲

10:20.950 --> 10:22.790
它是没有一个什么爆错

10:22.790 --> 10:24.750
那这时候就代表着我们这个组价

10:24.750 --> 10:26.790
引入的关系是没问题的

10:26.790 --> 10:30.470
之后打扮回到我们后面点WXML

10:30.470 --> 10:32.990
在这个里面我们进行一下引用

10:32.990 --> 10:36.750
那我这里面写一下叫使用组价

10:38.590 --> 10:39.710
OK 完成之后

10:39.710 --> 10:42.830
我们把TestComponent写一下

10:42.830 --> 10:44.150
因为我们已经定义好了

10:44.150 --> 10:46.390
所以说直接拿来使用就可以

10:46.390 --> 10:48.350
我保存一下TestComponent

10:48.350 --> 10:50.510
你会发现组价已经引入了

10:50.510 --> 10:52.470
那这个里面其实我们引入组价

10:52.470 --> 10:53.350
分为了几波

10:53.350 --> 10:55.950
其实我们是通过三步来实现的

10:55.950 --> 10:56.950
那第一个就是什么呢

10:56.950 --> 10:59.390
是我们定义组价 对吧

10:59.390 --> 11:00.990
这个第一个给大家写一下

11:00.990 --> 11:02.390
这个叫定义组价

11:02.390 --> 11:06.310
然后第二步我们是引用组价

11:06.310 --> 11:07.750
第三步就是

11:07.790 --> 11:11.710
我们在这个模板里面使用组价

11:11.710 --> 11:13.310
一次是我创建组价

11:13.310 --> 11:16.230
然后引入是在Jason里面

11:16.230 --> 11:17.670
包括我们的这个使用

11:17.670 --> 11:21.470
是在我们的WXML文件里面

11:21.470 --> 11:23.350
这个我们要明确一下

11:23.350 --> 11:24.870
OK 这几步搞定之后

11:24.870 --> 11:28.150
咱们就来看一下组价的这个生命周期

11:28.150 --> 11:30.150
在这个里面组价生命周期

11:30.150 --> 11:32.590
它的新版本 核气玩本有些区别

11:32.590 --> 11:35.590
那新版本推荐我们写的时候

11:35.590 --> 11:37.910
不要跟这个原来的这个写法一样

11:37.910 --> 11:40.750
你看我们配置里面写这个组价的时候

11:40.750 --> 11:42.390
我们直接的这里面有

11:42.390 --> 11:43.590
unloaded,unready

11:43.590 --> 11:46.070
直接在这个配置实力化对象写了

11:46.070 --> 11:48.310
但是新版本我们一般的写的时候

11:48.310 --> 11:49.190
在哪写呢

11:49.190 --> 11:51.110
我们这里面会有一个

11:51.110 --> 11:52.030
left times

11:52.030 --> 11:54.190
然后在这个里面定义所有的

11:54.190 --> 11:55.830
生命周期函数

11:55.830 --> 11:57.030
那它都有哪些呢

11:57.030 --> 11:57.710
这个里面

11:57.710 --> 11:59.830
其实我已经给同学们准备好了

11:59.830 --> 12:01.030
这里面有created

12:01.030 --> 12:04.150
created就是组价实力刚刚被创建好

12:04.150 --> 12:06.070
然后生命周期被出发

12:06.070 --> 12:07.310
还有这个attached

12:07.310 --> 12:08.830
就是组价实力进入页面

12:08.830 --> 12:10.470
节点数的时候执行

12:10.470 --> 12:11.550
然后还有就是什么

12:11.550 --> 12:13.270
还有这个组价实力

12:13.270 --> 12:15.310
从页面节点数移除的时候

12:15.310 --> 12:16.030
它会执行

12:16.030 --> 12:18.430
那我们一次把它给粘贴过来就OK了

12:19.990 --> 12:21.190
实在三个

12:21.190 --> 12:22.310
这三个怎么办呢

12:22.310 --> 12:24.390
在我们的这个开发者工区里面

12:24.390 --> 12:25.390
我们来写一下

12:26.470 --> 12:27.630
好的 那我保存

12:27.630 --> 12:29.030
保存之后你会发现

12:29.030 --> 12:30.190
它的这个执行顺序

12:30.190 --> 12:33.270
首先是执行全局的unlunch以及unshow

12:33.270 --> 12:35.590
之后它会执行组价的created

12:36.590 --> 12:39.430
然后再一次执行组价的attached

12:39.430 --> 12:40.630
执行完成之后

12:40.630 --> 12:43.550
再执行页面的low的show以及ready

12:43.550 --> 12:45.070
那代表着所有的这个

12:45.070 --> 12:47.870
我们需要渲染的结构都已经OK了

12:47.870 --> 12:48.430
那这些呢

12:48.430 --> 12:50.670
就是我们初始化执行的这些内容

12:50.670 --> 12:52.830
然后我如果说切了后台

12:52.830 --> 12:53.590
那切了后台

12:53.590 --> 12:54.270
你会发现

12:54.270 --> 12:56.630
其实它这个里面执行的时候

12:56.630 --> 12:57.990
是不是unhide对吧

12:57.990 --> 12:59.030
两个unhide的

12:59.030 --> 13:00.790
然后再切回前台unshow

13:00.790 --> 13:02.870
那跟组价其实没有太多关系了

13:02.870 --> 13:04.270
这个呢 我们要明确一下

13:05.550 --> 13:07.470
那生命周期这一块的内容呢

13:07.470 --> 13:08.750
我们就介绍到这里

13:08.750 --> 13:10.550
分别为我们的全局的

13:10.550 --> 13:11.430
以及页面的

13:11.430 --> 13:13.830
包括我们组价级别的生命周期

13:13.830 --> 13:16.670
如果说同学们想更加详细的了解

13:16.670 --> 13:17.270
这个里面

13:17.270 --> 13:19.350
我们还要结合文档更加细致的

13:19.350 --> 13:21.910
进行一个查看以及测试

13:21.910 --> 13:23.190
那说完了生命周期之后

13:23.190 --> 13:24.590
我们再来说一下

13:24.590 --> 13:26.630
我们页面之间的一个跳转

13:26.630 --> 13:27.630
是如何实现的

13:27.630 --> 13:28.990
也就是说我们可以理解

13:28.990 --> 13:30.670
为是一个路由的跳转

13:30.670 --> 13:32.390
因为我们在配置词下面

13:32.390 --> 13:34.430
是创建了两个文件

13:34.430 --> 13:36.350
加也就是说两个页面

13:36.350 --> 13:37.230
分别为home

13:37.230 --> 13:37.910
以及other

13:37.910 --> 13:39.550
如果说我现在有一种需求

13:39.550 --> 13:41.350
就是我们从home下面

13:41.350 --> 13:42.390
跳转到other

13:42.390 --> 13:43.550
是如何实现的

13:43.550 --> 13:44.190
这里面呢

13:44.190 --> 13:45.430
小程序给我们提供了

13:45.430 --> 13:47.030
两种形式的一个跳转

13:47.030 --> 13:50.230
分别是一种编程式的跳转

13:50.230 --> 13:52.230
也就是说调用VX

13:52.230 --> 13:54.510
也就是全局的这个VX对象

13:54.510 --> 13:55.590
点navigator2

13:55.590 --> 13:56.990
这种形式的一个跳转

13:56.990 --> 13:58.030
还有一种呢

13:58.030 --> 13:59.870
就是使用这种navigator

13:59.870 --> 14:02.070
也就是说调用组件的形式

14:02.990 --> 14:04.870
具体它更加详细的

14:04.870 --> 14:06.550
这个我们的一个文档

14:06.550 --> 14:07.510
咱们可以看一下

14:07.510 --> 14:09.230
这里面有一个页面路由的

14:09.230 --> 14:10.470
这个跳转文档

14:10.470 --> 14:10.910
然后呢

14:10.910 --> 14:12.270
整个的这个里面

14:12.270 --> 14:14.190
会有一个详细的介绍

14:14.190 --> 14:16.030
比如说VX.navigator2

14:16.030 --> 14:17.190
包括navigator

14:17.190 --> 14:18.910
我们可以点进去看一下

14:18.910 --> 14:19.710
navigator呢

14:19.710 --> 14:22.430
它会有一些我们的这个相关的

14:22.430 --> 14:23.950
组件的一些属性

14:23.950 --> 14:25.910
比如说这个Target, URL

14:25.910 --> 14:27.710
以及我们的这个OpenTap

14:27.710 --> 14:29.110
其实OpenTap在这里面

14:29.110 --> 14:30.550
我也给同学们写了

14:30.670 --> 14:31.270
这时候呢

14:31.270 --> 14:32.150
就是有几种

14:32.150 --> 14:33.110
一种是什么呢

14:33.110 --> 14:34.710
我们新界面打开

14:34.710 --> 14:35.150
这个呢

14:35.150 --> 14:37.190
会存储一个路由的

14:37.190 --> 14:38.870
这个历史的这个记录站

14:38.870 --> 14:40.230
还有一种是重庭相

14:40.230 --> 14:40.950
重庭相这种

14:40.950 --> 14:43.190
不会有历史记录站的存在

14:43.190 --> 14:44.510
包括我们一面反回

14:44.510 --> 14:46.590
这种形式是都有的

14:46.590 --> 14:48.110
那我们就来实现一下

14:48.110 --> 14:48.590
实现一下

14:48.590 --> 14:49.030
怎么办呢

14:49.030 --> 14:50.070
我们就使用这种

14:50.070 --> 14:51.550
navigator2的组件形式

14:51.550 --> 14:52.670
来实现一下

14:52.670 --> 14:53.110
但是呢

14:53.110 --> 14:54.390
我们得指定一个地址

14:54.390 --> 14:55.230
你看这个里面

14:55.230 --> 14:56.710
是不是有一个UR

14:56.710 --> 14:57.190
也就是说

14:57.190 --> 14:58.710
我们必须得有一个UR

14:58.750 --> 15:00.830
才能实现它的一个跳转的

15:00.830 --> 15:02.870
这种操作处理完成

15:03.030 --> 15:04.070
那我们怎么做

15:05.070 --> 15:06.870
首先这里面已经给大家写了

15:06.870 --> 15:08.390
这里面有一个navigator

15:08.390 --> 15:08.870
对吧

15:08.870 --> 15:10.630
那我们就来先写一下

15:11.510 --> 15:12.550
怎么来写

15:12.550 --> 15:13.470
在这个里面

15:13.470 --> 15:15.590
我们找到后面点插ML

15:15.590 --> 15:16.870
比如说我们这里面

15:16.870 --> 15:18.470
navigator

15:18.990 --> 15:19.670
OK

15:19.670 --> 15:20.670
这个navigator

15:20.670 --> 15:21.950
我们这里面写一个什么

15:21.950 --> 15:24.710
跳转到Azure界面

15:25.550 --> 15:25.990
好了

15:25.990 --> 15:27.830
把几个属性先写上

15:27.870 --> 15:28.790
首先一个什么

15:28.790 --> 15:30.710
就是我们的OpenTap

15:30.710 --> 15:32.150
这个是一定要写的

15:32.150 --> 15:34.030
那我们加一个OpenTap

15:34.030 --> 15:34.990
等于一个什么

15:34.990 --> 15:36.230
这里面有几个选择

15:36.230 --> 15:37.310
navigatorBat

15:37.310 --> 15:38.350
readyWracked

15:38.350 --> 15:39.310
还有一个是什么

15:39.310 --> 15:40.070
还有一个是

15:40.070 --> 15:41.390
追加历史记录站的

15:41.390 --> 15:42.430
navigator2

15:42.430 --> 15:42.870
对吧

15:42.870 --> 15:44.590
那我们直接就来使用

15:44.590 --> 15:46.070
这种navigator2的形式

15:46.590 --> 15:47.430
来进行跳转

15:47.430 --> 15:48.510
然后这个写完之后

15:48.510 --> 15:50.190
你得写一个跳转的地址

15:50.710 --> 15:52.150
这个跟我们VIP里面

15:52.150 --> 15:54.030
使用路由非常相似

15:54.030 --> 15:54.630
那我这里面

15:54.630 --> 15:55.470
地址是什么

15:55.470 --> 15:57.150
就是我们在这个

15:57.150 --> 15:58.630
app.json定义的

15:58.630 --> 16:00.590
pages下面的描述信息

16:00.590 --> 16:03.590
比如说我们这个是pagesAzure

16:03.590 --> 16:05.590
然后我直接在这个里面

16:05.590 --> 16:07.350
就来给它指定上

16:07.350 --> 16:09.710
这个叫pages下面的Azure

16:09.710 --> 16:10.390
OK

16:10.390 --> 16:11.150
那这个完成之后

16:11.150 --> 16:12.430
我们就来测试一下

16:12.430 --> 16:13.790
我把这里面都关掉

16:15.030 --> 16:16.270
保存一下

16:16.270 --> 16:18.150
这个时候就会有这个提示

16:18.150 --> 16:20.310
让我们跳转到Azure界面

16:20.310 --> 16:21.710
那我来进行一下跳转

16:21.710 --> 16:23.150
正好我们也看一下

16:23.150 --> 16:25.350
这个神明周期的一个执行顺序

16:25.350 --> 16:25.750
好的

16:25.750 --> 16:26.030
OK

16:26.030 --> 16:28.790
走你跳转到我们的这个Azure界面

16:28.790 --> 16:29.990
此时它执行了一个

16:29.990 --> 16:31.830
Home.js的Unhide

16:31.830 --> 16:33.990
也就是说我们一个界面隐藏了

16:33.990 --> 16:34.590
对不对

16:34.590 --> 16:35.790
那这是这一块

16:35.790 --> 16:36.870
然后我们这里面

16:36.870 --> 16:39.030
如果说你有这个历史记录站的话

16:39.030 --> 16:40.590
这里面就会有一个什么

16:40.590 --> 16:41.790
返回按钮对吧

16:41.790 --> 16:43.150
那它可以返回来

16:43.150 --> 16:45.670
如果说你要是其他形式

16:45.830 --> 16:46.990
比如说我这里面

16:46.990 --> 16:48.750
给同学们展示的好一种形式

16:48.750 --> 16:49.590
这里面还有这个

16:49.590 --> 16:50.990
redirect2对不对

16:50.990 --> 16:52.110
我们也可以试一下

16:52.110 --> 16:54.750
看它还有没有这种历史记录站

16:55.750 --> 16:56.990
redirect2

16:56.990 --> 16:57.470
OK

16:58.670 --> 16:59.950
我们来保存一下

17:00.830 --> 17:02.150
这样把它关掉

17:02.150 --> 17:03.830
然后我跳转到Azure

17:03.830 --> 17:05.150
那此时你会发现

17:05.150 --> 17:06.950
由这个迴退变成什么了

17:06.950 --> 17:08.550
变成我们的Home.js面了

17:08.550 --> 17:09.150
对不对

17:09.150 --> 17:11.430
然后你这时候还有一个是什么

17:11.430 --> 17:12.430
在组件实力

17:12.430 --> 17:14.750
被从页面上移除的时候执行

17:14.750 --> 17:16.270
你会发现我们这个

17:16.270 --> 17:18.950
Test Components下面的有一个什么

17:18.950 --> 17:20.470
Detached

17:20.470 --> 17:23.950
是不是已经执行了神明周期函数

17:23.950 --> 17:24.470
对吧

17:24.510 --> 17:25.790
那这个也印证一点

17:25.790 --> 17:26.630
就是说啥意思

17:26.630 --> 17:28.990
其实我们这个组件已经被销毁掉了

17:28.990 --> 17:31.150
那所以说它才会执行的

17:31.150 --> 17:33.030
这个我们要明确一下

17:33.030 --> 17:35.590
这也就是说一种路由的跳转形式

17:35.590 --> 17:37.590
那我们接下来再看一下

17:37.590 --> 17:38.830
使用编程的形式

17:38.830 --> 17:40.950
怎么进行路由的一个跳转

17:40.950 --> 17:43.070
那编程形式就是调用这种

17:43.070 --> 17:47.590
VX.NETGATE2或者redirect2这种形式了

17:47.590 --> 17:48.990
那我们来试一下

17:48.990 --> 17:49.590
怎么办

17:49.590 --> 17:51.510
这个里面如果说使用编程形式

17:51.510 --> 17:53.430
肯定得有这个实践绑定对吧

17:53.470 --> 17:55.710
所以说我们来做一下

17:55.710 --> 17:57.590
到Home.XML里面

17:57.590 --> 18:01.070
我们这个里面就写一下定一个Vil

18:02.070 --> 18:05.670
然后这里面使用编程的形式

18:05.670 --> 18:08.590
进行路由的跳转

18:08.590 --> 18:09.310
OK

18:09.310 --> 18:12.950
写完之后我这里面给它绑定一个事件

18:12.950 --> 18:14.270
这里面绑定事件怎么绑

18:14.270 --> 18:16.390
就是用这种Band type的形式

18:16.390 --> 18:19.110
那我们写一下Go Author

18:19.110 --> 18:19.990
配置

18:19.990 --> 18:20.470
好了

18:20.470 --> 18:23.110
那这时候我们到Home.js里面

18:24.110 --> 18:25.870
我们写一下注释

18:25.870 --> 18:29.390
这个叫跳转到Other界面

18:30.590 --> 18:32.190
然后把这个事件还说

18:32.190 --> 18:34.430
首先我们确保它执行

18:34.430 --> 18:36.550
在这个里面先进行一个打印

18:38.030 --> 18:43.430
打印这里面就是logGoOther配置

18:43.430 --> 18:43.830
好的

18:43.830 --> 18:44.830
那我们来看一下

18:44.830 --> 18:45.510
保存一下

18:45.510 --> 18:48.230
保存一下之后我们来点击

18:48.230 --> 18:50.270
点击出发GoOther配置了

18:50.270 --> 18:53.070
其实编程式路由它也比较方便

18:53.070 --> 18:55.230
我们直接的先选中Vx

18:55.230 --> 18:56.510
然后打点

18:56.510 --> 19:00.350
这个里面就默认给我们提示了Navigator 2

19:00.350 --> 19:03.550
那这个UIL其实和我们刚才的这个语法

19:03.550 --> 19:04.390
是完全一致的

19:04.390 --> 19:07.430
也就是说把Other的路件写上就OK了

19:07.430 --> 19:10.190
那我这里面就是Other下面的Other

19:10.190 --> 19:11.630
然后咱们看一下跳转

19:13.070 --> 19:14.630
点击直接的

19:14.630 --> 19:15.750
这是不是也过来了

19:15.750 --> 19:17.190
也叫Other配置

19:17.190 --> 19:20.230
那这个就是两种我们路由

19:20.230 --> 19:21.950
也就是说我们界面跳转的

19:21.990 --> 19:23.150
两种基本形式

19:23.150 --> 19:24.790
它的基本演示

19:24.790 --> 19:26.870
如果说同学们想详细的了解

19:26.870 --> 19:27.630
还是这样

19:27.630 --> 19:31.790
我们得把这个API文档要做一个详细的查看

19:31.790 --> 19:33.230
那这样才能知道

19:33.230 --> 19:35.950
它里面的每一个属性都是做什么用的

19:35.950 --> 19:37.750
比如说这里面还有一些回调

19:37.750 --> 19:39.750
你像SugSize它代表什么

19:39.750 --> 19:41.110
我们页面打开之后

19:41.110 --> 19:42.670
一个成功的处理

19:42.670 --> 19:45.150
包括我们路由之间的一个传参

19:45.150 --> 19:47.910
都这里面会有一个详细的介绍

19:47.910 --> 19:50.510
在这里面我们就不做过多的演示了

19:51.470 --> 19:52.750
接下来我们说一个什么

19:52.750 --> 19:54.550
就是数据的绑定

19:54.550 --> 19:56.750
它这种数据绑定非常简单

19:56.750 --> 19:59.310
和我们的位有里面数据绑定

19:59.310 --> 20:00.510
几乎是一致的

20:00.510 --> 20:01.590
比如说我们这个里面

20:01.590 --> 20:03.230
你看使用中国号

20:03.230 --> 20:04.790
这种差值表达式的形式

20:04.790 --> 20:07.710
进行一个动态数据的定义

20:07.710 --> 20:09.750
然后这里面就是一个展示

20:09.750 --> 20:12.070
我这里面给同学们来做一下

20:12.070 --> 20:13.070
我们来测试一下

20:13.070 --> 20:14.590
把这个先关掉

20:14.590 --> 20:16.910
我们在Home.xml里面

20:16.910 --> 20:18.670
想进行数据的展示

20:18.670 --> 20:19.590
那怎么做

20:19.670 --> 20:21.110
我这里面写一个vill

20:21.110 --> 20:23.310
这里面就给一个msg

20:23.310 --> 20:25.510
然后给一个闭合的大货号

20:25.510 --> 20:28.550
如果说这里面你想使用这个msg

20:28.550 --> 20:31.030
那我在这个Home.x里面就要定义一下

20:31.030 --> 20:31.910
在哪里定义

20:31.910 --> 20:33.350
在这个data里面

20:33.350 --> 20:34.230
msg

20:34.230 --> 20:36.950
然后我写一个Hello World

20:36.950 --> 20:37.510
OK

20:37.510 --> 20:39.670
让它做一个展示

20:39.670 --> 20:41.350
是不是Hello World就显示出来了

20:41.350 --> 20:43.390
那如果说我想去修改这个值

20:43.390 --> 20:44.110
怎么办呢

20:44.110 --> 20:46.630
这里面修改值也非常简单

20:46.630 --> 20:49.350
我们还是回到Home.wxml

20:49.350 --> 20:52.350
我这里面用事件的形式

20:52.350 --> 20:54.750
给它做一个修改班的Type

20:54.750 --> 20:57.510
等于一个称之msg

20:57.510 --> 21:00.430
然后这里面写一下称之msg

21:01.710 --> 21:01.950
好的

21:01.950 --> 21:05.310
那你这个里面就得定义一下称之msg

21:05.310 --> 21:08.470
所以说我再回到Home.js

21:08.470 --> 21:11.310
这个里面就是我们的修改

21:11.310 --> 21:13.390
我们的msg数据

21:13.390 --> 21:14.030
好的

21:14.030 --> 21:17.390
在这里面我们就写一下称之msg

21:17.430 --> 21:17.990
然后呢

21:17.990 --> 21:19.550
这个里面会有一个方法

21:19.550 --> 21:20.550
方法是什么呢

21:20.550 --> 21:21.190
是这种

21:21.190 --> 21:22.310
这次点

21:22.310 --> 21:23.510
set data

21:23.510 --> 21:26.070
set data就是专门的修改我们

21:26.070 --> 21:27.710
你看这里面有文档

21:27.710 --> 21:29.070
这次要改变的数据

21:29.070 --> 21:30.190
kvalue的形式

21:30.190 --> 21:31.790
这次点data中的k

21:31.790 --> 21:33.390
对应值变成一个什么

21:33.390 --> 21:34.110
value

21:34.110 --> 21:37.310
那这个k值我们就添一个msg

21:37.310 --> 21:38.030
那此时呢

21:38.030 --> 21:40.790
我们拧好一个Chainer

21:40.790 --> 21:41.550
OK

21:41.550 --> 21:43.190
让它我们点击的时候

21:43.190 --> 21:45.190
把这个Hello World变成

21:45.190 --> 21:46.510
拧好Chainer就可以了

21:46.510 --> 21:47.510
我们一点击

21:47.510 --> 21:48.430
是不是就过来了

21:48.430 --> 21:49.950
这也就是说我们一个

21:49.950 --> 21:51.590
动态数据的一个改变

21:51.590 --> 21:53.670
其实和我们Vio的这个使用

21:53.670 --> 21:54.830
是几乎类似的

21:54.830 --> 21:55.870
所以说这个同学

21:55.870 --> 21:58.350
上手起来应该是非常快的

21:58.350 --> 21:59.310
那么继续来说

21:59.310 --> 22:00.710
说完这个数据绑定之后

22:00.710 --> 22:02.230
我们这里面还有一个什么呢

22:02.230 --> 22:04.070
条件渲染

22:04.070 --> 22:05.510
条件渲染这个

22:05.510 --> 22:07.430
以前我们使用这种

22:07.430 --> 22:08.390
eve的形式

22:08.390 --> 22:08.710
对吧

22:08.710 --> 22:09.550
v-eve

22:09.550 --> 22:11.150
但这个里面使用一个什么

22:11.150 --> 22:13.230
vx冒号eve的形式

22:13.230 --> 22:15.190
来进行一个展示

22:15.230 --> 22:16.790
那这个咋来改变呢

22:16.790 --> 22:17.830
我们来写一下

22:17.830 --> 22:19.630
或者是我们重新写一个也行

22:19.630 --> 22:20.550
在这个里面

22:20.550 --> 22:23.630
我们写一个数据的展示

22:23.630 --> 22:26.990
这个里面我写一个Vio

22:26.990 --> 22:29.590
然后根据

22:29.590 --> 22:30.710
重新给大家写一下

22:30.710 --> 22:32.630
叫根据条件

22:32.630 --> 22:38.040
进行数据的一个展示

22:38.040 --> 22:38.360
好了

22:38.360 --> 22:39.520
那这里面怎么写

22:39.520 --> 22:40.560
刚才咱们也看到了

22:40.560 --> 22:44.200
首先是wx冒号eve

22:44.200 --> 22:46.120
然后这个里面我写一个值

22:47.120 --> 22:47.920
ok

22:47.920 --> 22:48.840
那你这个写完之后

22:48.840 --> 22:50.920
我们这里面就可以进行一个什么

22:50.920 --> 22:52.040
定义

22:52.040 --> 22:54.200
我在这个home.js里面

22:54.200 --> 22:56.840
将这个值来进行一个定义

22:56.840 --> 22:58.280
出示化的时候

22:58.280 --> 23:00.400
如果说我们要给它一个false

23:00.400 --> 23:02.560
那它默认就是不会展示的

23:02.560 --> 23:04.360
此时我这么写了之后

23:04.360 --> 23:05.320
它会理解为什么

23:05.320 --> 23:06.280
是一个字不创

23:06.280 --> 23:07.120
那我打扮呢

23:07.120 --> 23:08.720
我给它用中号的形式

23:08.720 --> 23:09.480
包裹上

23:09.480 --> 23:10.880
那这样是不是就ok了

23:10.880 --> 23:12.040
我点击的时候

23:12.040 --> 23:13.600
让它进行一个展示

23:13.600 --> 23:15.000
那这个展示怎么来做

23:15.040 --> 23:17.160
我们到这个home.js里面

23:17.160 --> 23:19.680
将它我们去点击的时候

23:19.680 --> 23:22.240
不光改变我们这个msg值

23:22.240 --> 23:24.080
我们还改变一个什么

23:24.080 --> 23:25.960
改变这个e子寿的值

23:25.960 --> 23:28.000
那我直接的e子寿

23:28.000 --> 23:29.160
等于一个什么呢

23:29.160 --> 23:30.560
非这次点e子寿

23:30.560 --> 23:32.320
这个里面应该写一个非

23:32.320 --> 23:33.760
我们来试一下

23:33.760 --> 23:35.120
trademsg

23:35.120 --> 23:37.480
这个根据条件进行数据展示

23:37.480 --> 23:38.800
是不是就显示出来了

23:38.800 --> 23:39.360
那这个呢

23:39.360 --> 23:40.600
就是我们一种

23:40.600 --> 23:42.320
根据条件进行模板

23:42.320 --> 23:43.640
渲染的这么一个过程

23:43.640 --> 23:45.000
然后它的这个

23:45.000 --> 23:46.600
实现和我们这种微杠衣服

23:46.600 --> 23:49.080
首先是它这个k值的时候

23:49.080 --> 23:50.520
是用帽号的形式

23:50.520 --> 23:51.720
然后这里面

23:51.720 --> 23:53.360
会有一个中括号的形式

23:53.360 --> 23:53.720
这个呢

23:53.720 --> 23:55.360
我们要注意一点

23:55.360 --> 23:57.920
最后一个就是我们的列表渲染

23:57.920 --> 23:59.000
那列表渲染里面

23:59.000 --> 23:59.680
它这个呢

23:59.680 --> 24:01.240
其实比较简单

24:01.240 --> 24:02.440
如果说我们列表

24:02.440 --> 24:04.720
这里面我们定一下

24:04.720 --> 24:06.400
在这个home.js里面

24:06.400 --> 24:08.280
我们创建一个列表

24:08.280 --> 24:09.480
data下面

24:09.480 --> 24:10.640
我们写一个什么

24:10.640 --> 24:12.600
list这里面有这个

24:13.600 --> 24:14.160
或者是呢

24:14.160 --> 24:15.320
我们定一两个字符创

24:15.320 --> 24:17.320
a和这个b

24:17.320 --> 24:19.000
ok 定义完成之后

24:19.000 --> 24:21.160
这个写语法是怎么来做

24:21.160 --> 24:22.520
我们就写一下

24:22.520 --> 24:23.840
渲染列表

24:23.840 --> 24:24.760
我在这个里面

24:24.760 --> 24:25.240
vio

24:25.240 --> 24:25.880
然后呢

24:25.880 --> 24:29.480
这里面是一个wxvfo

24:29.480 --> 24:31.200
vfo这个等于一个什么呢

24:31.200 --> 24:33.520
等于我们需要渲染的这个值

24:33.520 --> 24:35.760
在这里面已经给同学们写了

24:35.760 --> 24:36.960
然后我们要渲染谁

24:36.960 --> 24:38.080
是不是这个list

24:38.080 --> 24:40.040
同样的我们使用中锅号的形式

24:40.040 --> 24:42.520
给它进行一个包裹

24:42.520 --> 24:43.520
那在这个里面呢

24:43.520 --> 24:46.280
我们给它写一下叫list

24:46.280 --> 24:46.720
然后呢

24:46.720 --> 24:47.800
给它包裹一下

24:47.800 --> 24:48.280
包裹一下

24:48.280 --> 24:48.720
此时啊

24:48.720 --> 24:50.080
我们先不打印任何值

24:50.080 --> 24:51.400
我们来看一下

24:51.400 --> 24:52.960
那此时两个一是不是出来了

24:52.960 --> 24:54.760
也就是说两次是没问题的

24:54.760 --> 24:55.200
然后呢

24:55.200 --> 24:57.680
我在这个里面写一下

24:57.680 --> 25:00.280
首先txt

25:00.280 --> 25:03.760
我先写一个这里面默认的item

25:03.760 --> 25:05.040
咱们来看一下

25:05.040 --> 25:05.840
每一个呢

25:05.840 --> 25:07.120
是这个a和b

25:07.120 --> 25:07.680
然后呢

25:07.680 --> 25:10.280
我再来写一下这个item

25:10.320 --> 25:12.160
刚加一个什么呢

25:12.160 --> 25:13.240
index

25:13.240 --> 25:15.640
他们认如果说你循环出来之后

25:15.640 --> 25:17.320
就会有两个默认的值

25:17.320 --> 25:18.800
一个是每一项的值

25:18.800 --> 25:19.520
还有一个呢

25:19.520 --> 25:21.200
是我们的这个index值

25:21.200 --> 25:23.560
如果说它是一个复杂的数据类型

25:23.560 --> 25:25.240
比如说它不是一个字幕创

25:25.240 --> 25:26.080
那我们怎么渲染

25:26.080 --> 25:27.560
其实也非常简单

25:27.560 --> 25:28.600
我们这里面

25:28.600 --> 25:30.280
就像我们刚才在文档里面

25:30.280 --> 25:32.120
看到的这个内墨

25:32.120 --> 25:33.680
我这里面写一个Alan

25:33.680 --> 25:35.000
再写一个啊

25:35.000 --> 25:35.680
这个叫什么呢

25:35.680 --> 25:36.760
这个叫内墨

25:36.760 --> 25:37.160
然后呢

25:37.160 --> 25:38.400
我写一个job

25:38.400 --> 25:38.800
ok

25:38.800 --> 25:39.600
两个

25:39.600 --> 25:40.560
两个渲染的时候

25:40.560 --> 25:41.640
其实你这时候呢

25:41.640 --> 25:44.360
我就可以item点一个name

25:44.360 --> 25:45.600
来咱们看一眼啊

25:45.600 --> 25:47.720
是不是Alan job就出来了

25:47.720 --> 25:48.200
对吧

25:48.200 --> 25:49.480
那整个的这一块呢

25:49.480 --> 25:51.880
就是我们小程序的一个列表

25:51.880 --> 25:53.440
渲染的一个基本处理啊

25:53.440 --> 25:56.440
但如果说你要想改变我们的这个item

25:56.440 --> 25:58.400
以及我们的这个index

25:58.400 --> 26:01.400
你还可以通过这种vfall-index

26:01.400 --> 26:03.400
然后改变一下也可以的

26:03.400 --> 26:04.960
我们来试一下啊

26:04.960 --> 26:06.720
我们在这个里面来做啊

26:06.720 --> 26:07.560
也就是说默认

26:07.560 --> 26:09.200
我不想是叫item

26:09.200 --> 26:10.240
那想换一个名字

26:10.240 --> 26:11.080
怎么办呢

26:11.080 --> 26:13.280
我们直接的就在这里面

26:13.280 --> 26:17.240
vxmallfall-item

26:17.240 --> 26:18.200
等于一个值

26:18.200 --> 26:18.880
那这个值呢

26:18.880 --> 26:19.960
我们叫item

26:19.960 --> 26:25.040
或者是我们叫itemname

26:25.040 --> 26:25.400
好了

26:25.400 --> 26:26.080
那此时啊

26:26.080 --> 26:27.240
你找这个

26:27.240 --> 26:28.960
我们的这个item就没有了

26:28.960 --> 26:30.600
那我们现在就变成什么了

26:30.600 --> 26:31.640
itemname

26:31.640 --> 26:33.920
那我们来定一下

26:33.920 --> 26:34.720
到这个里面

26:34.720 --> 26:36.000
是不是Alan job

26:36.000 --> 26:36.880
一样也有了

26:36.880 --> 26:37.360
对不对

26:37.440 --> 26:38.960
如果说你想把一个index

26:38.960 --> 26:40.560
也进行一个修改

26:40.560 --> 26:44.880
那就是vxfall-index

26:44.880 --> 26:47.040
等于一个新的值

26:47.040 --> 26:49.520
vfall-index

26:49.520 --> 26:51.480
等于一个idx

26:51.480 --> 26:52.080
好吧

26:52.080 --> 26:52.800
那此时呢

26:52.800 --> 26:55.400
你再进行一个索引值获取的时候

26:55.400 --> 26:58.480
那就是用这种idx的形式

26:58.480 --> 27:00.160
来进行索引值获取

27:00.160 --> 27:02.080
是不是同样也可以获取到了

27:02.080 --> 27:03.000
以上这些啊

27:03.000 --> 27:05.440
就是我们小程序的一个基本

27:05.440 --> 27:06.920
操作的相关API

27:07.000 --> 27:08.520
我们的这个目的是什么呢

27:08.520 --> 27:09.840
其实就是为了啊

27:09.840 --> 27:12.880
在我们马上要接下来学习的unit app

27:12.880 --> 27:13.400
当中啊

27:13.400 --> 27:15.040
不至于一列蒙的状态

27:15.040 --> 27:15.440
所以说

27:15.440 --> 27:17.760
如果说同学们想更加深入的了解

27:17.760 --> 27:18.800
这个小程序

27:18.800 --> 27:21.080
那我们可以关注我们的这个其他课程

27:21.080 --> 27:21.760
或者是呢

27:21.760 --> 27:23.400
可以先行的查看我们的

27:23.400 --> 27:25.280
这个小程序的API文的

27:25.280 --> 27:25.600
好的

27:25.600 --> 27:27.080
那本节课就到这里

