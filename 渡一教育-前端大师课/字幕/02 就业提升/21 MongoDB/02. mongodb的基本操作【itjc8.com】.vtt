WEBVTT

00:00.050 --> 00:05.930
这节课咱们来说一下这个mongerDB里边的一些常见的命令

00:06.190 --> 00:07.730
就跟mongerDB进行交互

00:07.990 --> 00:10.550
我们之前学的那个麦斯克的时候是学社口语句

00:10.810 --> 00:11.050
对不对

00:11.310 --> 00:12.330
进行交互

00:12.590 --> 00:14.650
monger里边是没有什么社口语句的

00:15.150 --> 00:16.690
我们通过这个蟹蛾进行交互

00:16.950 --> 00:17.970
那么什么是蟹蛾呢

00:18.230 --> 00:18.730
就这个玩意

00:18.990 --> 00:21.050
比方说我们这里是一个monger

00:21.810 --> 00:22.830
是不是用这个命令

00:23.090 --> 00:24.370
进入这个蟹蛾交互环境

00:24.630 --> 00:26.930
之前没写到什么命令

00:27.190 --> 00:28.470
显示所谓的数据户

00:28.970 --> 00:30.010
这就是蟹蛾环境

00:30.250 --> 00:34.090
这个环境里边它实际上使用的语句就是GSE语句

00:34.870 --> 00:37.690
不过大部分语句都是GSE语句

00:37.930 --> 00:39.990
像这个倒不是 这是一个命令

00:40.750 --> 00:42.290
那么通过这些语句和命令

00:42.550 --> 00:44.090
对这个mongerDB进行控制

00:44.350 --> 00:46.130
你会发现这些语句非常简单

00:46.390 --> 00:48.170
当然我们这节课也学不完

00:48.430 --> 00:51.250
因为我们绝大部分时候操作这个mongerDB

00:51.510 --> 00:52.270
是在

00:52.790 --> 00:54.330
loadGSE里边进行操作的

00:54.590 --> 00:55.850
而不是在这个蟹蛾环境里边

00:56.110 --> 00:57.910
所以我们重点还是放在loadGSE里边

00:58.170 --> 00:59.690
我们这个蟹蛾环境里边

00:59.890 --> 01:01.310
我们来简单体验一下

01:01.690 --> 01:04.510
其实我们到时候学loadGSE里边的交互

01:04.770 --> 01:06.450
跟那个蟹蛾环境里边的交互

01:06.710 --> 01:07.430
大同小异

01:07.690 --> 01:10.650
基本上是相同的 很多的操作方式都是相同的

01:10.910 --> 01:12.430
因为它不存在说射口语句

01:12.690 --> 01:13.470
就是GSE代码

01:13.730 --> 01:14.750
咱们来看一下

01:15.270 --> 01:16.230
设置你看一下这里

01:16.490 --> 01:18.070
我们用个GSE代码这样子写都可以

01:20.130 --> 01:20.890
是不是GSE代码

01:21.150 --> 01:22.670
里面就是操作的GSE代码

01:23.190 --> 01:24.990
我们这里看首先是查学所有数据库

01:25.250 --> 01:26.010
这个很简单对不对

01:26.270 --> 01:27.290
我们之前已经看到了

01:27.790 --> 01:28.830
然后这里还有一个命令

01:29.030 --> 01:29.810
要DBS

01:30.330 --> 01:32.110
可以看到当前的数据库

01:32.370 --> 01:33.910
DB表示当前的数据库

01:34.150 --> 01:35.450
当前的数据库是TESTS

01:35.710 --> 01:36.710
目前用的是TESTS

01:37.230 --> 01:38.510
那么一边同学就问了

01:38.770 --> 01:40.810
我这里没有用TESTS数据库

01:41.070 --> 01:42.110
我哪里用TESTS数据库了

01:42.350 --> 01:43.110
我们来看一下

01:43.370 --> 01:44.910
这个就是Rubber

01:47.430 --> 01:48.970
你看这里有没有TESTS数据库

01:49.230 --> 01:50.970
而且我们可以在这个命令进行看

01:51.230 --> 01:52.050
修DBS

01:52.810 --> 01:53.830
有没有TESTS数据库

01:54.090 --> 01:54.590
没有

01:56.350 --> 01:57.170
那么就奇怪了

01:57.430 --> 01:58.450
怎么回事

01:58.710 --> 02:00.230
他说当前的数据库是TESTS数据库

02:00.430 --> 02:01.230
是这样子

02:01.470 --> 02:02.490
Mongodb里面

02:02.750 --> 02:03.510
他跟Mexico不一样

02:03.770 --> 02:06.010
Mexico是必须要有这个数据库

02:06.270 --> 02:07.090
你才能使用它

02:07.350 --> 02:07.850
对不对

02:08.110 --> 02:09.650
Mongodb它不是的

02:09.910 --> 02:11.450
如果说你没有这个数据库

02:11.710 --> 02:12.730
我仍然可以操作它

02:13.230 --> 02:14.010
操作的时候

02:14.270 --> 02:16.050
如果说你往数据库里边加了数据

02:16.310 --> 02:17.850
它就会自动帮你生存这个数据库

02:18.110 --> 02:19.130
一会我们就可以看到了

02:19.390 --> 02:21.690
所以说你完全可以使用一个不存在的数据库

02:22.970 --> 02:23.990
那么我们可以看到这个

02:24.250 --> 02:26.290
下面这个代码就是

02:26.550 --> 02:27.570
就是调用一个函数

02:27.830 --> 02:29.370
查看当前数据库的状态

02:29.630 --> 02:30.130
用Db

02:30.430 --> 02:30.950
TESTS

02:31.710 --> 02:33.390
可以看到当前数据库的状态

02:33.630 --> 02:34.530
那么这个状态里边

02:34.790 --> 02:36.030
他告诉你这个数据库里面

02:36.270 --> 02:36.870
collecting

02:37.110 --> 02:38.070
所有的集合

02:38.310 --> 02:39.670
我们数据库里面有很多集合

02:39.910 --> 02:41.510
说到集合的数量是0

02:41.790 --> 02:43.030
没有东西

02:43.270 --> 02:44.270
这个数据库就不显示

02:44.510 --> 02:46.570
只不过它是存在这个数据库的

02:46.830 --> 02:48.350
我们也可以使用这个

02:48.610 --> 02:50.670
秀collecting

02:50.910 --> 02:52.950
来显示当前数据库里边的

02:53.990 --> 02:54.510
写错了吗

02:54.750 --> 02:56.670
显示当前数据库的所有集合

02:56.910 --> 02:58.230
当然我们这里

02:58.470 --> 02:59.510
这个数据库里面没有集合

02:59.550 --> 03:00.350
所以显示不出来

03:00.590 --> 03:02.550
那么我们可以用下面这个命令来切换数据库

03:02.790 --> 03:04.070
就是use数据库的名字

03:04.310 --> 03:05.950
比方说我们看一下秀dbs

03:06.230 --> 03:06.950
一共有三个数据库

03:07.190 --> 03:08.550
那么我们用那个local

03:08.790 --> 03:09.430
随便找一个

03:09.670 --> 03:11.510
我们比方说use local

03:11.750 --> 03:12.630
使用这个数据库

03:12.870 --> 03:13.550
那么我们看一下db

03:13.790 --> 03:14.830
当前local数据库了

03:15.070 --> 03:16.110
然后db is TESTS

03:16.870 --> 03:18.150
当前local数据库的状态

03:18.390 --> 03:19.350
还有一个collecting

03:19.590 --> 03:20.550
有一个集合

03:20.790 --> 03:21.630
那么咱们来看一下

03:21.870 --> 03:25.070
一个集合就是秀collecting

03:26.070 --> 03:27.910
看了一个形式

03:28.150 --> 03:30.910
你看是不是就有这么一个集合在这里

03:31.150 --> 03:31.670
对吧

03:31.910 --> 03:32.950
特别简单

03:33.470 --> 03:35.710
我们也可以切换到一个不存在的数据库

03:35.950 --> 03:36.190
刚才说了

03:36.430 --> 03:37.430
比方说我们用use

03:37.670 --> 03:39.710
比方说TESTS3

03:40.950 --> 03:41.550
有没有这个数据库

03:41.790 --> 03:42.110
没有

03:42.350 --> 03:45.510
他也告诉你已经成功的切换到TESTS3的数据库了

03:45.750 --> 03:47.230
我们来秀dbs

03:47.470 --> 03:48.150
你看有没有这个数据库

03:48.390 --> 03:48.590
没有

03:48.830 --> 03:49.430
但是没关系

03:49.670 --> 03:50.910
你对这个数据库操作的时候

03:51.150 --> 03:52.670
他就会自动帮你充电数据库

03:53.590 --> 03:53.670
好

03:53.710 --> 03:54.870
那么我们怎么来操作呢

03:55.110 --> 03:56.030
我们对数据库的操作呢

03:56.270 --> 03:58.230
无非就是往集合里边就增长改查

03:58.990 --> 04:00.110
往集合里边加数据

04:00.350 --> 04:01.310
往集合里边删数据

04:01.550 --> 04:02.070
查询数据

04:02.310 --> 04:02.630
然后呢

04:03.110 --> 04:03.830
修改数据

04:04.070 --> 04:04.630
比方说我们这里

04:04.870 --> 04:05.230
首先说

04:05.470 --> 04:07.470
往集合里边添加一个文档

04:07.710 --> 04:08.550
就是添加数据

04:08.790 --> 04:10.270
我们之前上节课学了

04:10.550 --> 04:11.950
我们的数据库里边

04:12.710 --> 04:14.110
跟埋搜库里边的一行

04:14.350 --> 04:15.030
就相当于是

04:15.270 --> 04:16.750
mongerDB里边的一个文档

04:16.990 --> 04:17.790
一个文档就是个对象

04:18.030 --> 04:18.270
对吧

04:18.510 --> 04:19.350
那怎么来添加一个文档呢

04:19.590 --> 04:20.230
非常简单

04:20.470 --> 04:21.430
你通过这种方式

04:21.670 --> 04:22.230
DB

04:23.870 --> 04:24.670
可得可信表这么一声

04:24.910 --> 04:26.230
表示你的集合名字

04:26.470 --> 04:28.030
比方说我们随便来一个吧

04:28.270 --> 04:29.830
集合的名字

04:30.310 --> 04:31.110
U2是吧

04:31.870 --> 04:32.950
就是我们的集合名字

04:33.190 --> 04:34.030
随便写个集合名字

04:34.270 --> 04:35.430
这个集合存不存在不存在

04:35.670 --> 04:36.950
不存在你往里边加数据

04:37.190 --> 04:37.870
加数据的时候呢

04:38.110 --> 04:38.990
还会自动给你加

04:39.230 --> 04:40.350
会自动给你加

04:40.630 --> 04:41.790
添加这个集合

04:42.070 --> 04:43.550
所以说你直接写就行了

04:43.790 --> 04:45.190
我们往U2里边加数据

04:45.430 --> 04:46.350
我们用两种方式

04:46.590 --> 04:47.750
一种是insert1

04:47.990 --> 04:49.230
一种是insert1里

04:49.470 --> 04:51.030
实际上它还有一个方法叫insert

04:51.270 --> 04:52.950
我们用了最好的

04:52.990 --> 04:53.670
使用这两个

04:53.910 --> 04:54.790
这两个还给你反过来

04:55.030 --> 04:56.030
新型的更加完整一点

04:56.270 --> 04:57.550
好比方说我们用insert1

04:59.110 --> 05:00.630
添加一条数据

05:00.870 --> 05:02.430
一条数据里边我们可以写上一个对象

05:02.670 --> 05:04.230
因为一个文档就是个对象嘛

05:04.470 --> 05:05.510
添加一个对象

05:05.990 --> 05:07.550
比方说我们怎么写呢

05:15.230 --> 05:15.990
回车

05:16.510 --> 05:17.030
你看

05:17.270 --> 05:18.030
他告诉你

05:18.550 --> 05:20.590
添加成功了吗

05:20.850 --> 05:21.630
然后呢

05:21.830 --> 05:23.630
我们新增的对象的组件

05:23.870 --> 05:24.910
它会给你生成一个组件

05:25.150 --> 05:25.670
是这个组件

05:26.190 --> 05:27.470
好,咱们来看一下这个数据

05:28.750 --> 05:29.510
照这个

05:30.790 --> 05:32.070
Robo3T里边

05:32.590 --> 05:33.870
右键刷新一下

05:35.910 --> 05:37.190
你看是不是有个Tesla3了

05:37.430 --> 05:37.710
对不对

05:37.950 --> 05:39.710
Tesla3里面Client是不是有个U2似的

05:39.950 --> 05:40.270
对不对

05:40.510 --> 05:41.710
本来是没有的

05:41.950 --> 05:42.590
本来是没有的

05:42.830 --> 05:43.350
但是我们加了一条

05:43.590 --> 05:44.630
它就会给你新建

05:44.870 --> 05:45.630
它看到没有这个集合

05:45.870 --> 05:46.910
它就会给你新建这个集合

05:47.190 --> 05:47.950
非常简单

05:48.190 --> 05:49.230
然后打开之后你会看到

05:49.470 --> 05:50.750
这里边是不是有一篇文档了

05:50.950 --> 05:51.470
这个文档是啥

05:51.710 --> 05:52.470
这个文档就是一个对象

05:52.710 --> 05:53.510
看看就是个对象

05:53.750 --> 05:54.990
这个对象里面有三个字段

05:55.230 --> 05:56.430
三个feel的字段

05:56.670 --> 05:57.470
Name是不是橫格

05:57.710 --> 05:58.390
对吧,A级是吧

05:58.630 --> 05:59.670
就这么简单

05:59.910 --> 06:01.030
就非常简单加出去

06:01.270 --> 06:02.750
对吧,它不存在什么深口语句

06:02.990 --> 06:04.270
而且你会看到

06:04.510 --> 06:05.870
它给你生成了一个

06:06.110 --> 06:07.590
它给你生成了一个组件

06:07.830 --> 06:09.070
就是一个下滑线ID

06:09.310 --> 06:10.430
这里是什么逻辑呢

06:10.670 --> 06:12.710
如果说你添加一个文档的时候

06:12.950 --> 06:15.270
你没有指定字段ID

06:15.790 --> 06:17.870
那么它会自动给你添加一个字段

06:18.110 --> 06:18.870
ID作为组件

06:19.350 --> 06:21.270
我们一般用它自动添加就可以了

06:21.750 --> 06:24.190
那么这个ID的组件到底是一个什么玩意儿呢

06:24.430 --> 06:25.230
有一个同学一看

06:25.470 --> 06:27.110
它像倒是像是一个制服串

06:27.350 --> 06:28.390
对吧,像是一个制服串

06:28.630 --> 06:30.350
但是它实际上不是一个制服串

06:31.110 --> 06:32.110
它是一个对象

06:32.390 --> 06:34.150
这个对象是封装过的

06:34.390 --> 06:36.230
是用OBGXID给你封装过的

06:36.750 --> 06:39.110
那么这个对象OBGXID到底是一个什么玩意儿呢

06:39.550 --> 06:40.750
当你去雕

06:40.990 --> 06:41.870
它实际上是一个函数

06:42.110 --> 06:42.670
在MGD里面

06:42.910 --> 06:43.750
实际上是一个函数

06:43.990 --> 06:45.190
就是OBGXID

06:45.430 --> 06:46.230
我们来看一下吧

06:47.110 --> 06:48.150
我们雕用这个函数

06:48.350 --> 06:49.270
OBGXID

06:49.510 --> 06:52.630
它就会给你生成一个全球唯一的编码

06:53.390 --> 06:55.670
给你生成一个全球唯一的编码

06:56.190 --> 06:57.230
那么这个编码呢

06:57.470 --> 06:58.390
它到底是什么意思呢

06:58.630 --> 06:59.510
它是怎么来编码出来的

06:59.750 --> 07:01.270
它是怎么来保证全球唯一的呢

07:01.510 --> 07:02.070
它是这样子

07:02.510 --> 07:04.470
它的原理是时间戳

07:05.510 --> 07:06.430
然后加上时间戳

07:06.670 --> 07:06.950
知道吧

07:07.190 --> 07:07.910
我们不用解释了吧

07:08.150 --> 07:09.430
然后加上机器码

07:10.070 --> 07:11.830
机器码是本机的MAC地址

07:12.070 --> 07:12.390
对吧

07:12.630 --> 07:13.670
每台机器都不一样

07:14.230 --> 07:16.470
然后你机器上有可能运行多个

07:16.550 --> 07:17.550
那个MGDB进程

07:17.550 --> 07:19.350
所以说它还给你加上进程的ID

07:19.590 --> 07:20.710
每个进程有个ID

07:20.950 --> 07:24.350
然后后边为了防止同一个进程里面重复

07:24.350 --> 07:25.550
它又给你加上一个自征量

07:26.790 --> 07:27.190
对吧

07:27.430 --> 07:28.230
那么这样子

07:28.470 --> 07:30.630
通过这个样子一拼接出来

07:30.870 --> 07:32.550
然后再把它进行16进制化

07:32.790 --> 07:34.750
就把它变成一个16进制的制补串

07:34.910 --> 07:36.830
那么就生成了一个全球唯一的制补串

07:36.830 --> 07:37.990
每一次生成都不一样

07:38.270 --> 07:41.590
就是OBGXID创建了这么一个制补串

07:42.470 --> 07:44.150
使用这个函数呢

07:46.510 --> 07:47.190
这里写错了

07:48.870 --> 07:51.230
我们使用这个OBGXID函数

07:51.230 --> 07:52.430
如果说不带参数的话

07:52.430 --> 07:54.230
它就可以生成一个唯一的制补串

07:54.470 --> 07:55.910
当然也可以给它带参数

07:56.350 --> 07:57.230
带参数的话

07:57.230 --> 07:59.590
那么就带一个制补串作为参数

07:59.590 --> 08:00.390
然后这样子去

08:00.750 --> 08:02.150
那么就是把这个制补串

08:02.430 --> 08:04.390
还原成一个OBGXID对象

08:04.390 --> 08:05.550
你不要给我自动生成吧

08:05.550 --> 08:06.910
我把这个制补串提供给你

08:07.150 --> 08:09.270
然后帮你还原成为OBGXID对象

08:09.510 --> 08:10.150
没啥意思吧

08:10.630 --> 08:11.470
那么这样子呢

08:11.470 --> 08:12.790
一来我们来看一下

08:13.030 --> 08:13.630
这样一来呢

08:13.630 --> 08:15.430
它就得到了是一个OBGXID对象了

08:15.430 --> 08:16.150
直接得到了

08:16.790 --> 08:17.550
那么这个对象里面

08:17.550 --> 08:18.430
其实还有一些方法

08:18.430 --> 08:19.070
比方说

08:19.070 --> 08:20.150
给它许便看一下吧

08:20.430 --> 08:21.270
就是GET

08:22.430 --> 08:23.030
GET

08:23.390 --> 08:23.870
TEM

08:23.870 --> 08:24.470
STEM

08:25.590 --> 08:26.470
这个方法干嘛呢

08:26.470 --> 08:27.150
这个方法就是

08:27.150 --> 08:28.270
通过这个对象

08:28.270 --> 08:29.870
对象里面有一个方法叫GETSTEM

08:29.870 --> 08:30.590
TEMSTEM

08:30.950 --> 08:31.550
得到了什么

08:31.550 --> 08:32.430
得到它的时间戳

08:32.430 --> 08:33.990
因为这里面是不是记录了时间戳

08:33.990 --> 08:35.630
前面几个就是记录了时间戳

08:35.630 --> 08:36.390
你看一下

08:36.670 --> 08:37.470
就是得到一个

08:39.390 --> 08:40.350
ISO的时间

08:40.350 --> 08:40.750
对不对

08:40.750 --> 08:42.030
是得到一个时间戳

08:42.030 --> 08:42.750
就这么个意思

08:43.750 --> 08:46.550
那么这是关于添加一个文档

08:46.550 --> 08:47.630
它会自动给你生产ID

08:47.630 --> 08:48.230
这个ID呢

08:48.230 --> 08:49.310
实际上是一个对象

08:49.950 --> 08:50.990
另外一个呢

08:50.990 --> 08:52.350
就是你可以多

08:52.350 --> 08:53.630
插入多个文档

08:53.630 --> 08:54.950
加入多个文档

08:54.950 --> 08:55.710
停用个数组

08:55.710 --> 08:56.550
数组里面写对象

08:56.550 --> 08:56.750
对吧

08:56.750 --> 08:57.230
多个对象

08:57.230 --> 08:57.630
直接写

08:57.630 --> 08:58.830
你们可以自己去试一下

08:59.150 --> 09:00.230
这是添加文档

09:00.230 --> 09:01.830
我们简单的去用一下就行了

09:01.830 --> 09:02.910
我们主要的

09:02.910 --> 09:04.350
就是主要的APN

09:04.350 --> 09:05.670
我们在后边学习

09:05.670 --> 09:06.630
DOD解决室里面

09:06.630 --> 09:08.030
在操作通过DB的时候

09:08.030 --> 09:09.350
我们再进行具体的学习

09:09.350 --> 09:10.550
我们简单体验一下

09:11.270 --> 09:13.110
接下来再次查讯文档

09:13.110 --> 09:14.950
查讯文档也非常简单

09:14.950 --> 09:16.710
你看就是介石代

09:16.710 --> 09:19.990
DB可能性就是集合的名字

09:19.990 --> 09:22.470
比方说有点Fant

09:22.470 --> 09:23.830
那么这里边写查讯对象

09:23.830 --> 09:24.950
比方查讯条件

09:24.950 --> 09:25.830
查讯的结果

09:25.830 --> 09:27.310
进行筛选之类的

09:27.310 --> 09:29.350
就是查讯的相关的配置

09:29.350 --> 09:30.670
如果说你没有什么可写的

09:30.670 --> 09:31.390
没有什么可写的

09:31.390 --> 09:31.830
你就回车

09:33.070 --> 09:34.190
就回车

09:34.190 --> 09:34.870
回车完了过去

09:34.870 --> 09:36.230
是不是查讯所有的了

09:36.230 --> 09:36.790
对不对

09:36.790 --> 09:38.310
就查讯所有的了

09:38.310 --> 09:39.630
目前只有一个

09:39.670 --> 09:40.830
目前只有一个

09:40.830 --> 09:43.550
这就是查询

09:43.550 --> 09:45.990
然后接下来是修改文档

09:45.990 --> 09:47.630
修改文档可以用updates1

09:47.630 --> 09:49.830
updates many replace one

09:49.830 --> 09:50.950
简单说一下吧

09:50.950 --> 09:52.630
这是修改一个

09:52.630 --> 09:54.070
第一个是条件

09:54.070 --> 09:57.110
第二个是修改的值

09:57.110 --> 09:58.790
这是修改多个

09:58.790 --> 10:00.070
条件值

10:00.070 --> 10:01.270
这是替换

10:01.270 --> 10:03.030
根据条件直接替换

10:03.030 --> 10:03.990
啥意思呢

10:03.990 --> 10:04.910
我们干脆

10:04.910 --> 10:06.070
这里没有那么多数据

10:06.070 --> 10:09.430
我刚才在官网里面去看一下

10:09.470 --> 10:10.630
蒙古地避

10:10.630 --> 10:11.310
去官网里边

10:11.310 --> 10:12.830
我觉得他官网

10:12.830 --> 10:14.310
这文档呢

10:14.310 --> 10:17.150
以前我做的很差

10:17.150 --> 10:17.710
现在呢

10:17.710 --> 10:18.430
一旦收费了

10:18.430 --> 10:19.710
一旦商业化了过后

10:19.710 --> 10:22.110
他的文档做的特别特别好

10:22.110 --> 10:25.190
我都感受到快跳眼泪了

10:25.190 --> 10:28.750
真的很多那些软件或者是技术

10:28.750 --> 10:30.390
他一旦变成商用过后了

10:30.390 --> 10:32.430
他把做的特别特别好

10:32.430 --> 10:34.150
免费开源的时候

10:34.150 --> 10:35.630
简直没法看

10:35.630 --> 10:37.270
也不说不能看吧

10:37.270 --> 10:38.750
就写的没那么友好

10:38.790 --> 10:42.030
你看这里有个CRUT操作

10:42.030 --> 10:43.110
这个操作里边你看

10:43.110 --> 10:46.430
蒸 查询 修改 删除

10:46.430 --> 10:47.830
其实这个文档很好懂的

10:47.830 --> 10:48.510
很好懂的

10:48.510 --> 10:49.670
有兴趣的可以看一下

10:49.670 --> 10:50.550
不过这不是重点

10:50.550 --> 10:52.590
重点我们还是要后边学习

10:52.590 --> 10:53.310
他的驱动

10:53.310 --> 10:54.630
弄到解释里边如何去操作

10:54.630 --> 10:55.190
我们来看一下吧

10:55.190 --> 10:55.990
简单看一下

10:55.990 --> 10:57.350
update是document

10:57.350 --> 10:58.110
那么他告诉你

10:58.110 --> 10:59.830
查入一些测试数据

10:59.830 --> 11:01.910
这是一些商品的名字

11:01.910 --> 11:03.870
商品的数量吧

11:03.870 --> 11:05.470
应该是数量

11:05.470 --> 11:06.830
这里是商品的尺寸

11:06.830 --> 11:07.710
这些东西

11:07.750 --> 11:08.990
状态 什么玩意

11:08.990 --> 11:09.950
我们这里的

11:09.950 --> 11:12.310
把个代码复制一下

11:12.310 --> 11:14.030
往这数据里边加一些

11:14.030 --> 11:14.990
你看加到过后

11:14.990 --> 11:16.390
他会可以返回

11:16.390 --> 11:18.510
每一个新增的OBJ-ID

11:18.510 --> 11:20.270
你看每个都不一样

11:20.270 --> 11:20.670
好

11:20.670 --> 11:22.430
那么现在我们有两个集合了

11:22.430 --> 11:24.990
在这里边看一下

11:24.990 --> 11:27.070
当然你也可以在命令里边去查看

11:27.070 --> 11:28.350
vintry

11:28.350 --> 11:29.870
就是多个文档了

11:29.870 --> 11:30.910
每个就是个文档

11:30.910 --> 11:32.030
它一个组件

11:32.030 --> 11:32.630
对不对

11:32.630 --> 11:32.750
好

11:32.750 --> 11:33.670
那么现在我们

11:33.670 --> 11:36.390
他说我们可以在这里边进行修改

11:36.430 --> 11:38.470
而且他这里还可以做一个控制台

11:38.470 --> 11:40.350
你看做的多好

11:40.350 --> 11:41.190
可以做一个控制台

11:41.190 --> 11:42.790
可以在这里边直接写代码

11:42.790 --> 11:44.710
在这里边直接写代码进行操作

11:44.710 --> 11:46.190
数据已经有了

11:46.190 --> 11:47.310
我们这个就看一下

11:47.310 --> 11:48.070
他怎么来操作呢

11:48.070 --> 11:48.710
他说

11:48.710 --> 11:50.790
如果说你要修改一个的话

11:50.790 --> 11:52.430
那么你可以用这种方式来操作

11:52.430 --> 11:55.870
我们再把它复制一下

11:55.870 --> 11:56.750
体验一下就行了

11:56.750 --> 11:58.190
这一颗主要是体验的

11:58.190 --> 11:59.110
那么他这个写法

11:59.110 --> 12:02.270
就是说我这里呢

12:02.270 --> 12:04.110
这是条件第1个参数

12:04.110 --> 12:05.310
就是我要查找

12:05.310 --> 12:06.350
我要修改的是什么

12:06.350 --> 12:07.670
只修改一个

12:07.710 --> 12:09.910
item等于paper

12:09.910 --> 12:10.430
对吧

12:10.430 --> 12:11.510
我要查的

12:11.510 --> 12:14.630
我要修改的就是item等于paper

12:14.630 --> 12:16.030
等于这个式子

12:16.030 --> 12:16.390
然后呢

12:16.390 --> 12:17.670
我要怎么来修改呢

12:17.670 --> 12:20.510
修改成为把sets

12:20.510 --> 12:22.710
修改成把size点

12:22.710 --> 12:26.450
这个是哪个单子这么读的

12:26.450 --> 12:27.490
这什么

12:27.490 --> 12:29.290
这应该是尺寸单位

12:29.290 --> 12:30.810
这应该是尺寸单位

12:30.810 --> 12:33.330
把尺寸单位修改为cm limit

12:33.330 --> 12:34.730
denters 尺寸为p

12:34.730 --> 12:35.690
大家看啊

12:35.690 --> 12:36.290
这个玩意

12:36.290 --> 12:37.010
我们在麦社会里面

12:37.010 --> 12:38.290
是不可能有这种写法的

12:38.330 --> 12:39.930
但是在mongodb里面就可以

12:39.930 --> 12:40.530
为什么呢

12:40.530 --> 12:43.170
因为你看mongodb里面的数据库结构

12:43.170 --> 12:44.970
它是个文档型数据库

12:44.970 --> 12:45.570
你看一下

12:45.570 --> 12:46.690
每个地方有个size

12:46.690 --> 12:47.050
对吧

12:47.050 --> 12:49.290
size里面是不是还有属性

12:49.290 --> 12:50.090
看没

12:50.090 --> 12:51.450
size里面还有属性

12:51.450 --> 12:51.610
对吧

12:51.610 --> 12:52.410
它又是一个对象

12:52.410 --> 12:52.850
你看

12:52.850 --> 12:54.090
它的内形是一个对象

12:54.090 --> 12:55.050
object

12:55.050 --> 12:55.330
对吧

12:55.330 --> 12:56.170
它是一个对象

12:56.170 --> 12:57.210
它里面还有属性

12:57.210 --> 12:57.930
所以这个意思呢

12:57.930 --> 12:58.770
就是我匹配

12:58.770 --> 13:00.530
我找文档的时候呢

13:00.530 --> 13:01.930
我在找这个文档的时候呢

13:01.930 --> 13:03.570
一个文档一个文档去匹配

13:03.570 --> 13:04.370
找文档的时候呢

13:04.370 --> 13:06.250
我要找的是item等于paper

13:06.250 --> 13:07.410
但是我设置的时候呢

13:07.450 --> 13:08.130
设置老板

13:08.130 --> 13:09.930
它每一个文档里面的size

13:09.930 --> 13:10.450
del

13:10.450 --> 13:12.050
UOM

13:12.050 --> 13:13.010
就size

13:13.010 --> 13:14.410
del UOM设置为

13:14.410 --> 13:15.650
CNN

13:15.650 --> 13:15.970
对吧

13:15.970 --> 13:16.690
是这么个意思

13:16.690 --> 13:19.130
那么这个东西是什么呢

13:19.130 --> 13:20.090
这东西你不用管

13:20.090 --> 13:23.810
这个东西是给它加一个就是

13:23.810 --> 13:25.530
设修改的时间

13:25.530 --> 13:26.810
加一个修改的时间

13:26.810 --> 13:28.730
如果说你把它设为处的话

13:28.730 --> 13:29.170
就表示

13:29.170 --> 13:30.810
如果说它之前没有纪录修改时间的话

13:30.810 --> 13:31.970
会给你增加一个

13:31.970 --> 13:33.010
这个东西不用管

13:33.010 --> 13:34.370
平时也不怎么用

13:34.370 --> 13:36.010
回车

13:36.810 --> 13:37.610
它表示

13:38.770 --> 13:39.970
我们匹配到了一个

13:39.970 --> 13:40.650
修改了几个了

13:40.650 --> 13:41.770
修改了一个

13:41.770 --> 13:42.050
然后呢

13:42.050 --> 13:43.050
我这里刷新一下

13:45.490 --> 13:46.090
refresh

13:49.400 --> 13:52.700
怎么刷新的

13:52.700 --> 13:53.540
刷新的吗

13:53.540 --> 13:54.540
我看一下

13:54.540 --> 13:55.780
我们这里直接用mini

13:55.780 --> 13:56.980
我们来查询一下

13:56.980 --> 13:59.020
db inventory

13:59.020 --> 13:59.900
fand

13:59.900 --> 14:01.780
这里边是不是可以给条件

14:01.780 --> 14:03.060
条件是什么呢

14:03.060 --> 14:05.180
条件就是item等于paper

14:06.940 --> 14:08.540
我们来查询一下这个结果

14:08.540 --> 14:09.220
查询出来的过后

14:09.220 --> 14:09.980
你看一下

14:10.020 --> 14:12.660
它的item等于paper quality

14:12.660 --> 14:13.580
然后size

14:13.580 --> 14:15.180
size里面是不是这个东西被修改了

14:15.180 --> 14:16.140
修改成CM了

14:16.140 --> 14:17.020
对不对

14:17.020 --> 14:17.740
Status

14:17.740 --> 14:19.060
而且它会给你加了一个

14:19.060 --> 14:19.940
last modified

14:19.940 --> 14:21.980
它是一个日期内容

14:21.980 --> 14:24.340
它是一个全球标准的日期内容

14:24.340 --> 14:25.820
那么变成一个日期

14:25.820 --> 14:26.300
对吧

14:26.300 --> 14:29.220
因为它加了这个东西

14:29.220 --> 14:29.900
加了这个东西的话

14:29.900 --> 14:31.500
如果说它没有这个制端的话

14:31.500 --> 14:32.420
会给你形成

14:32.420 --> 14:33.620
那现在我们来看一下

14:33.620 --> 14:35.340
这个地方是不是有

14:35.340 --> 14:37.540
这里怎么刷新的呢

14:37.540 --> 14:42.440
refresh

14:42.480 --> 14:43.520
你看其中有一个

14:43.520 --> 14:44.560
是不是六个制端

14:44.560 --> 14:44.840
对吧

14:44.840 --> 14:45.400
六个制端

14:45.400 --> 14:46.440
这六个制端是不是多了一个

14:46.440 --> 14:47.480
搭设目的盖的

14:47.480 --> 14:48.960
这就说明到我们上节课说的

14:48.960 --> 14:49.640
它每一个文档

14:49.640 --> 14:51.400
它不是说要求必须一致的

14:51.400 --> 14:52.440
可以不一致的

14:52.440 --> 14:53.480
可以有任何属性

14:53.480 --> 14:54.600
任何的属性质

14:54.600 --> 14:56.440
任何的属性数量

14:56.440 --> 14:56.600
好

14:56.600 --> 14:58.480
这是修改

14:58.480 --> 15:00.680
修改当然还可以修改多个

15:00.680 --> 15:02.040
还可以修改多个

15:02.040 --> 15:03.120
replay 40000是什么意思呢

15:03.120 --> 15:03.760
replay 40000

15:03.760 --> 15:04.920
我们刚才修改的时候

15:04.920 --> 15:07.480
它只是你设置了哪些有修改哪些

15:07.480 --> 15:08.480
而replay 40000的话

15:08.480 --> 15:10.320
就是完全覆盖之前的文档

15:10.320 --> 15:11.320
你用一个新的文档

15:11.320 --> 15:13.320
我们就完全覆盖

15:13.320 --> 15:14.400
最后的三处文档

15:14.400 --> 15:15.440
delete's many details

15:15.440 --> 15:16.040
一个是三处

15:16.040 --> 15:17.280
一个是三处多个

15:17.280 --> 15:18.920
这里一个查询对象

15:18.920 --> 15:20.600
满足要求的就是三处

15:20.600 --> 15:22.040
比方说我这里三处

15:22.040 --> 15:25.270
item等于paper的

15:25.270 --> 15:28.270
一笔invintory

15:28.270 --> 15:29.670
delete

15:29.670 --> 15:32.490
one

15:33.610 --> 15:35.330
item等于paper

15:35.330 --> 15:37.530
这个查询对象也非常好写

15:37.530 --> 15:38.050
回收

15:38.050 --> 15:38.690
那他告诉你

15:38.690 --> 15:39.330
删除了几个

15:39.330 --> 15:40.330
删除了一个

15:40.330 --> 15:41.490
给你反复了一个对象

15:41.490 --> 15:42.730
我们来看一下吧

15:43.730 --> 15:44.810
delete

15:44.810 --> 15:49.120
然后这里用invintory

15:49.120 --> 15:49.720
fand

15:49.720 --> 15:53.120
我们来看一下

15:53.120 --> 15:55.240
这里看不出人清楚

15:55.240 --> 15:56.280
我在这里

15:56.280 --> 15:58.040
这个id为6e

15:58.040 --> 15:59.560
6e都应该就没了

15:59.560 --> 16:00.280
点击优先

16:00.280 --> 16:03.130
不用

16:03.130 --> 16:04.330
其实在这里也可以写

16:04.330 --> 16:05.490
在这里也可以写

16:05.490 --> 16:07.970
id为6e

16:07.970 --> 16:08.570
是不是没了

16:08.570 --> 16:09.010
对吧

16:09.010 --> 16:10.490
被删除掉了

16:10.490 --> 16:10.730
好了

16:10.730 --> 16:12.130
这就是关于

16:12.130 --> 16:14.050
mongo delete在蟹尔环境里边

16:14.050 --> 16:15.130
该如何去

16:15.130 --> 16:16.930
书写这个命令

16:16.970 --> 16:18.370
也可以在这里进行书写

16:18.370 --> 16:19.370
都行

16:19.370 --> 16:21.770
只不过我们经常情况下

16:21.770 --> 16:22.730
因为他没有捨口

16:22.730 --> 16:24.490
所以说不用在这个数据库的

16:24.490 --> 16:25.930
蟹尔环境里边去处理

16:25.930 --> 16:27.970
我们一般就是在直接弄的环境

16:27.970 --> 16:29.970
在其他环境里面去进行处理

16:29.970 --> 16:31.290
那么这是咱们这几课

16:31.290 --> 16:32.410
简单的了解一下

16:32.410 --> 16:33.650
你可以自己去书写

16:33.650 --> 16:34.970
我又玩试一试

16:34.970 --> 16:35.530
有兴趣的话

16:35.530 --> 16:36.690
也可以去多看一下这个文档

16:36.690 --> 16:37.930
这个文档写得特别特别好

16:37.930 --> 16:39.090
当然他选择英文的

16:39.090 --> 16:40.570
不过我觉得你看这个例子

16:40.570 --> 16:42.290
应该也能看得懂

16:42.290 --> 16:43.010
没关系

16:43.010 --> 16:44.450
就算我们终点不在这

16:44.450 --> 16:45.610
终点我们在下几课

16:45.610 --> 16:46.290
后边的内容

