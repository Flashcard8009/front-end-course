WEBVTT

00:01.140 --> 00:06.140
好了 这一颗咱们来讲这个更新update

00:07.140 --> 00:13.140
还是老规矩啊 先讲原生 然后呢再讲这个就是mongos里边的用法

00:13.140 --> 00:16.140
因为mongos里边的用法跟原生的基本上差不多

00:16.140 --> 00:22.140
咱们来看原生啊 就是在在控制台里边就直接输入这个mongo

00:22.140 --> 00:24.140
来操作数据后

00:25.140 --> 00:30.140
这里呢我们可以也可以在这吧也可以在robo3t里边

00:31.140 --> 00:33.140
在这里边来操作也行

00:34.140 --> 00:38.140
打开啊 随便打开一个吧 打开users

00:38.140 --> 00:42.140
我们更新的话我们更新就不要更新全部的吧

00:42.140 --> 00:45.140
随便找一个更新吧 就比方说找这个吧 找这个来更新

00:45.140 --> 00:49.140
所以说我们查讯的时候呢 我们查讯的时候就这样查讯

00:49.140 --> 00:51.140
查讯下方先id

00:51.140 --> 00:53.140
啊不 这个是id

00:54.140 --> 00:57.140
然后呢等于某一个值 这里

00:58.140 --> 01:00.140
copy value

01:01.140 --> 01:05.140
赶紧过来啊 就查这个啊 就查这一条记录

01:06.140 --> 01:10.140
呃 然后我们再看一个啊 在这里边我们去完成更新 好来吧

01:11.140 --> 01:15.140
呃 原生里边更新的话 它的语法格式啊 就是db

01:15.140 --> 01:18.140
然后呢 后边跟上你的集合名字 就是users

01:18.140 --> 01:21.140
比如说operations啊 这集合名字

01:21.140 --> 01:23.140
然后呢 两种更新方式 我们以前说过了对吧

01:23.140 --> 01:25.140
一个是update one更新一条

01:26.140 --> 01:29.140
无论你的条件匹配多少条 但是我只更新第一天文档

01:29.140 --> 01:35.140
好 一个就是update many更新多篇文档啊 这两条啊 这两个方法都可以

01:35.140 --> 01:37.140
那么我们这里呢 更新一条就可以了啊

01:37.140 --> 01:40.140
update many呢 是一样的 就是更新多条而已 其他都一样

01:40.140 --> 01:43.140
好 咱们来更新一条啊 不要影响太广了

01:44.140 --> 01:48.140
呃 这里呢 我们使用db usersupdate one

01:50.140 --> 01:53.140
好 更新一条 那么这里边呢 有三个参数啊

01:53.140 --> 01:57.140
第一个参数呢 是过滤条件 过滤条件跟查讯是完全一样的

01:57.140 --> 02:02.140
一个查讯怎么写 这里就怎么写 就是把查出来的结果呢来进行更新

02:02.140 --> 02:05.140
过滤条件 那么这个条件呢 我们这里就简单写一下

02:05.140 --> 02:08.140
这个条件写吧 跟上一条说的完全一样啊 你没什么好说的

02:08.140 --> 02:12.140
呃 id啊 就这个条件啊 条件是一样的

02:12.140 --> 02:15.140
然后呢 第二个参数呢 是一个对象

02:16.140 --> 02:20.140
第二参数 第二参数什么意思呢 第二参数呢 是表示更新内容

02:20.140 --> 02:25.140
就是你要更新哪个 哪些字段啊 那么它的写法呢 有 有这么一些

02:25.140 --> 02:30.140
有这么一些 第一个呢 是设置字段的操作啊 那么我们这里的哪些写法呢

02:30.140 --> 02:35.140
第一个呢 使用一个操作符叫做set 设置某一些字段的值

02:35.140 --> 02:39.140
好 设置哪些字段的值呢 把name设置为邓哥啊 还有把这个

02:39.140 --> 02:43.140
而对象里面的ct属性呢 设置为哈尔滨 比方说咱们这样子写

02:43.140 --> 02:46.140
复制一下 能过来

02:47.140 --> 02:48.140
好 咱们运行一下

02:52.140 --> 02:53.140
update

02:54.140 --> 02:57.140
ok 那么我们点这个吧 点这个文笨结果

02:57.140 --> 03:00.140
那么这样子呢 就更新完成了 更新完成了

03:00.140 --> 03:04.140
那么这个地方呢 有返回的结果呢 有这么一些属性啊

03:04.140 --> 03:08.140
咱们来看一下 一个是 ACNology

03:08.140 --> 03:12.140
这个东西是什么呢 就表示啊 它是一个写入级别

03:12.140 --> 03:17.140
如果说这个东西出现为处的话 就表示你配置的写入级别呢

03:17.140 --> 03:20.140
是啊 就是那个 ACNology

03:20.140 --> 03:25.140
什么意思呢 就是说我们在更新数据库的时候呢 有可能会遇到一些情况

03:25.140 --> 03:29.140
就是有些时候呢 我们写入数据库可能写入不成功

03:29.140 --> 03:33.140
比方什么情况呢 我正在写入的时候 因为词汉操作是比较慢的

03:33.140 --> 03:36.140
我们正在写入数据库的时候呢 可能突然断电了

03:36.140 --> 03:38.140
是不是就写入不成功 对不对

03:38.140 --> 03:41.140
那么 ACNology的这个配置呢 是什么意思呢 还指的是

03:41.140 --> 03:46.140
我无论如何都要保证这个数据呢 尽量的保证这个数据能够写入成功

03:46.140 --> 03:49.140
无论遇到什么样的情况 我都要尽量保证

03:49.140 --> 03:51.140
这个了解一下就行了 设计到数据库底层了

03:51.140 --> 03:53.140
数据库底层实际上是比较复杂的

03:53.140 --> 03:56.140
我们了解一下就行了 这个东西我们不用去管

03:56.140 --> 04:01.140
另外两个属性的就是我们需要知道的 一个是 Merged Court

04:01.140 --> 04:06.140
什么意思呢 就是它这个匹配啊 就是这个条件匹配了多少条记录

04:06.140 --> 04:08.140
它匹配了多少条记录 就这个意思

04:08.140 --> 04:14.140
然后 Modified Court表示什么意思呢 就是我们在这个条件下修改了多少条记录

04:14.140 --> 04:17.140
修改了一条 匹配到了一条 修改了一条

04:17.140 --> 04:19.140
好 在修改之后呢 我们来看一下这边啊

04:19.140 --> 04:21.140
我们还用这个方式来显示 我们刷新

04:21.140 --> 04:25.140
你看 是不是Lame变成了凳哥 然后State变成了哈尔滨

04:25.140 --> 04:29.140
就这么简单 这就是修改 其他的属性都没有变化

04:29.140 --> 04:32.140
好 这是关于这一块啊

04:32.140 --> 04:35.140
那么你们可以想象 如果说你跟Express来结合的话

04:35.140 --> 04:39.140
那么用户那边传过来的修改的数据 是不是可以放到这

04:39.140 --> 04:41.140
对不对 放到这就完事了

04:41.140 --> 04:42.140
这是关于这个set

04:42.140 --> 04:44.140
set指令呢 我们再继续看

04:44.140 --> 04:47.140
有这么一些例子呢 大家可以熟悉一下它里面的一些指令

04:47.140 --> 04:51.140
比方说像这种写法 那么什么意思呢 就是把名字设置为凳哥

04:51.140 --> 04:53.140
啊 等一下啊

04:53.140 --> 04:56.140
然后我们再 如果说这个指令不变 就是个语句不变

04:56.140 --> 04:59.140
我们再重新运行一下 你看一下这个结果

04:59.140 --> 05:01.140
运行 那么这个时候呢 匹配的结果还是一条

05:01.140 --> 05:03.140
但是修改的数量是不是0 对吧

05:03.140 --> 05:07.140
因为现在的修改的东西 是不是跟之前旧的文档是一样的

05:07.140 --> 05:10.140
如果说跟旧的文档是一样的的话 它就不会执行修改了

05:10.140 --> 05:13.140
那么这就是修改的数量就是0 认识一下就行了

05:13.140 --> 05:16.140
好 下一个的话 就是把那个设置为凳哥

05:16.140 --> 05:22.140
同时 特别是并且关系啊 就是我们还要做的一些事情

05:22.140 --> 05:25.140
这个指令 这个就是操作符什么意思呢

05:25.140 --> 05:29.140
它表示新增 增加 在原诱的基础上增加

05:29.140 --> 05:32.140
A级为2 什么意思呢

05:32.140 --> 05:37.510
表示把凳哥的年龄呢 增加两岁 复制一下

05:37.510 --> 05:41.510
这就把名字修改为凳哥 然后把年龄增加为两岁

05:41.510 --> 05:44.510
那么我们看一下目前凳哥的年龄是多少呢

05:44.510 --> 05:47.510
33岁 对吧 然后我们这里运行

05:47.510 --> 05:51.510
又修改了一条 接下来我们看过 过来 刷新

05:51.510 --> 05:54.510
是不是35岁 对不对 就这么简单

05:54.510 --> 05:56.510
好 这是关于这个ink

05:56.510 --> 05:57.510
好 接下来我们再看啊

05:57.510 --> 06:00.510
如果说用这种方式呢 就是冒 冒什么意思呢

06:00.510 --> 06:04.510
冒表示的是 惩罚 就是多少倍

06:04.510 --> 06:07.510
把它修改为原来的两倍 复制一下

06:07.510 --> 06:11.510
刚才那个东西ink 如果说你要减少的话怎么办

06:11.510 --> 06:13.510
减少一些复数 复数就减少

06:13.510 --> 06:15.510
好 这里能复制一下

06:15.510 --> 06:21.340
好 运行 这边来 刷新

06:21.340 --> 06:23.340
这边人70岁了 对吧

06:23.340 --> 06:25.340
好 这是这个惩罚

06:25.340 --> 06:28.340
然后下面这个呢 是可以修改文档里边的

06:28.340 --> 06:31.340
就是它的属性名 就相当于是字段名字

06:31.340 --> 06:34.340
这个东西是不是跟那个麦社会就有很大的区别

06:34.340 --> 06:37.340
麦社会里边是不是不能修改那个列的名字

06:37.340 --> 06:38.340
那这里边是不是可以 对吧

06:38.340 --> 06:40.340
那个名字是可以修改的

06:40.340 --> 06:41.340
那么我们的写法是rename

06:41.340 --> 06:43.340
后边跟上你的属性名

06:43.340 --> 06:46.340
把原来的字段修改为一个新的名字

06:46.340 --> 06:47.340
那么这个什么意思呢 就是把

06:47.340 --> 06:49.340
name这个属性名修改为full name

06:49.340 --> 06:51.340
好 咱们试一下吧

06:51.340 --> 06:54.340
好 复制啊 这边来

06:54.340 --> 06:56.340
暂停

06:56.340 --> 06:57.340
好 运行

06:57.340 --> 06:58.340
好 这边来 刷新

06:58.340 --> 07:01.340
你看 是变成了full name 对吧

07:01.340 --> 07:04.340
好 其他都没变化

07:04.340 --> 07:05.340
好 下一个

07:05.340 --> 07:09.340
下一个呢 就是把有一些属性的去掉

07:09.340 --> 07:11.340
去掉某一些属性

07:11.340 --> 07:12.340
那么这个东西是怎么写的

07:12.340 --> 07:14.340
你可以这样写 on set

07:14.340 --> 07:15.340
表示去掉

07:15.340 --> 07:17.340
去掉一些属性

07:17.340 --> 07:19.340
A级 去到什么属性呢 把A级去掉

07:19.340 --> 07:20.340
那么后边的指令是不用写的

07:20.340 --> 07:22.340
因为这里呢 你只需要提供属性名就行了

07:22.340 --> 07:23.340
对吧

07:23.340 --> 07:24.340
你把A级这个属性去掉

07:24.340 --> 07:27.340
然后再把adress province这个属性去掉

07:27.340 --> 07:32.030
好 不要了 我们这个复制一下

07:32.030 --> 07:34.730
整体过来

07:34.730 --> 07:35.730
好 运行

07:35.730 --> 07:37.730
那么现在就去掉了A级属性

07:37.730 --> 07:39.730
去掉了province属性

07:39.730 --> 07:40.730
刷新 看一下

07:40.730 --> 07:41.730
就是province没了

07:41.730 --> 07:43.730
然后A级属性是不是没了

07:43.730 --> 07:44.730
对不对

07:44.730 --> 07:47.730
也就是在那个mongerDB里边进行修改的话

07:47.730 --> 07:48.730
它是非常灵活的

07:48.730 --> 07:50.730
它不仅仅是可以修改数据

07:50.730 --> 07:52.730
而且可以修改这些属性的名字

07:52.730 --> 07:55.730
还有去掉属性等等等等

07:55.730 --> 07:56.730
明儿这意思吧

07:56.730 --> 07:59.730
如果说要增加属性怎么办呢

07:59.730 --> 08:01.730
要增加属性的话是非常简单

08:01.730 --> 08:02.730
你就用set

08:02.730 --> 08:04.730
比如说我们现在把ad属性增加上

08:04.730 --> 08:07.730
A级为20运行

08:07.730 --> 08:08.730
好 这边来

08:08.730 --> 08:09.730
放心

08:09.730 --> 08:10.730
如果说它没有这个属性的话

08:10.730 --> 08:11.730
就会自动新增

08:11.730 --> 08:12.730
就这么简单

08:12.730 --> 08:16.730
这是关于这个普通的就是制断操作

08:16.730 --> 08:17.730
像这些制断操作的话

08:17.730 --> 08:21.730
就已经能够完成90%的事情了

08:21.730 --> 08:23.730
那么还有一些比较特殊的事情

08:23.730 --> 08:25.730
我们下面举了一些例子

08:25.730 --> 08:26.730
那么这些例子就举不完了

08:26.730 --> 08:27.730
因为我们都知道

08:27.730 --> 08:28.730
在软件开发领域里边

08:28.730 --> 08:30.730
反而是一些特殊的事情

08:30.730 --> 08:32.730
需要的API就很多了

08:32.730 --> 08:33.730
比如说下面这个

08:33.730 --> 08:35.730
针对数组的操作

08:35.730 --> 08:37.730
什么叫针对数组的操作呢

08:37.730 --> 08:39.730
就是说我们在更新的文档里边

08:39.730 --> 08:41.730
它可能会出现一些数组

08:41.730 --> 08:43.730
你看这里

08:43.730 --> 08:44.730
你看是不是这里有数组

08:44.730 --> 08:45.730
对吧

08:45.730 --> 08:47.730
针对这个数组有些特别的操作

08:47.730 --> 08:49.730
如果说你没有学习到

08:49.730 --> 08:50.730
这些特别的操作的话

08:50.730 --> 08:52.730
那么就可能会出现一个问题

08:52.730 --> 08:53.730
比方说

08:53.730 --> 08:55.730
我们在这里用set来设置

08:55.730 --> 08:56.730
这个数组的话

08:57.730 --> 08:58.730
设置这个数组

08:58.730 --> 09:00.730
我们给它加一个属性

09:00.730 --> 09:02.730
比方说音乐

09:04.730 --> 09:05.730
编程

09:08.740 --> 09:09.740
然后其他

09:10.740 --> 09:11.740
运行

09:11.740 --> 09:12.740
咱们来看一下

09:12.740 --> 09:14.740
这样子就相当于是把这个数组

09:14.740 --> 09:15.740
给它覆盖掉

09:15.740 --> 09:16.740
我们这边刷新

09:16.740 --> 09:17.740
你看是不是把覆盖掉了

09:17.740 --> 09:19.740
之前的直接完全覆盖掉了

09:19.740 --> 09:22.740
包括对对象的操作也是

09:22.740 --> 09:24.740
如果说直接给而对手覆止的话

09:24.740 --> 09:26.740
那么就覆止为一个完全

09:26.740 --> 09:27.740
新的一个对象了

09:27.740 --> 09:28.740
就把之前的对象给它覆盖掉了

09:28.740 --> 09:29.740
那么有的时候

09:29.740 --> 09:30.740
我们可能不希望把它覆盖掉

09:30.740 --> 09:32.740
而是对它里边的东西进行操作

09:32.740 --> 09:33.740
对纸文档

09:33.740 --> 09:34.740
这是一篇文档

09:34.740 --> 09:36.740
对纸文档内部的一些东西

09:36.740 --> 09:38.740
内部的一个数组进行操作

09:38.740 --> 09:39.740
那么这个东西该怎么办呢

09:39.740 --> 09:42.740
它需要通过一些特殊的指令来完成

09:42.740 --> 09:44.740
一个是add2set

09:44.740 --> 09:47.740
就是我们要添加一个纸

09:47.740 --> 09:48.740
到一个数组里边

09:48.740 --> 09:50.740
那么就可以这样子写

09:50.740 --> 09:52.740
我们把它复制一下

09:52.740 --> 09:55.310
拿过来

09:55.310 --> 09:56.310
这什么意思呢

09:56.310 --> 09:57.310
就是set什么意思

09:57.310 --> 09:58.310
就是一个集合

09:58.310 --> 09:59.310
对吧

09:59.310 --> 10:02.310
我们把要添加一个纸到集合里边去

10:02.310 --> 10:03.310
那么这个东西怎么写呢

10:03.310 --> 10:04.310
怎么来写呢

10:04.310 --> 10:06.310
比如说我们添加到这个集合

10:06.310 --> 10:07.310
添加什么纸呢

10:07.310 --> 10:08.310
添加秋葵

10:08.310 --> 10:10.310
邓哥喜欢吃香菜和秋葵

10:10.310 --> 10:11.310
那么运行一下

10:11.310 --> 10:12.310
我们看一下这边

10:12.310 --> 10:13.310
刷新多了一个秋葵

10:13.310 --> 10:14.310
对不对

10:14.310 --> 10:15.310
就这么简单

10:15.310 --> 10:16.310
好

10:16.310 --> 10:17.310
那么如果说

10:17.310 --> 10:18.310
我们再一次运行

10:18.310 --> 10:19.310
再一次运行

10:19.310 --> 10:20.310
我们运行一下

10:20.310 --> 10:22.310
看一下这边会不会多一个呢

10:22.310 --> 10:23.310
它就不会了

10:23.310 --> 10:24.310
所以说这个add set

10:24.310 --> 10:25.310
这个逻辑它是什么呢

10:25.310 --> 10:27.310
就是如果输逐里边不存在

10:27.310 --> 10:28.310
那么就进行添加

10:28.310 --> 10:29.310
如果说存在的话

10:29.310 --> 10:31.310
就不起进行任何操作

10:31.310 --> 10:32.310
这是add to set

10:32.310 --> 10:35.310
还有另外一种添加方式叫做push

10:35.310 --> 10:36.310
其他都不变

10:36.310 --> 10:37.310
就是把add to set

10:37.310 --> 10:38.310
ad to set

10:38.310 --> 10:40.310
把它变成了push

10:40.310 --> 10:41.310
如果是用这种模式的话

10:41.310 --> 10:42.310
那么就表示了说

10:42.310 --> 10:45.310
如果说不管你存不存在

10:45.310 --> 10:46.310
我都要给你添加

10:46.310 --> 10:47.310
运行

10:47.310 --> 10:48.310
你看是不是一个

10:48.310 --> 10:49.310
再来一个运行

10:49.310 --> 10:50.310
是不是又一个

10:50.310 --> 10:51.310
你看

10:51.310 --> 10:52.310
是不是多了两个

10:52.310 --> 10:53.310
对吧

10:53.310 --> 10:54.310
这就是两个的区别

10:54.310 --> 10:56.310
根据你们之后的在

10:56.310 --> 10:57.310
具体的场景里面

10:57.310 --> 10:58.310
你们具体去选择

10:58.310 --> 10:59.310
某一种区别就行了

10:59.310 --> 11:02.310
像咱们讲数据库mongerDB

11:02.310 --> 11:04.310
因为之前已经学习了loaded.js

11:04.310 --> 11:05.310
所以说mongerDB

11:05.310 --> 11:06.310
我们就纯粹讲mongerDB

11:06.310 --> 11:08.310
本身以及monger故事的用法

11:08.310 --> 11:09.310
那么之后

11:09.310 --> 11:10.310
怎么去跟express结合

11:10.310 --> 11:11.310
我相信

11:11.310 --> 11:13.310
单凡有一点点程序

11:13.310 --> 11:14.310
思维的能力的人

11:14.310 --> 11:15.310
你学的loaded.js

11:15.310 --> 11:16.310
都应该知道怎么做了

11:16.310 --> 11:18.310
无非就是改动model

11:18.310 --> 11:19.310
就是模型程

11:19.310 --> 11:21.310
就是数据操作程

11:21.310 --> 11:22.310
和那个就是surface

11:22.310 --> 11:23.310
无非就是改动这两层

11:23.310 --> 11:25.310
其他的express那些东西

11:25.310 --> 11:27.310
完全没有任何变化

11:27.310 --> 11:29.310
这里我们看一下下面

11:29.310 --> 11:31.310
如果说我要添加多项

11:31.310 --> 11:33.310
怎么办呢

11:33.310 --> 11:34.310
如果说我要添加多项

11:34.310 --> 11:35.310
你不能这样子写

11:35.310 --> 11:36.310
如果说我要添加多项的话

11:36.310 --> 11:38.310
你能不能这样子写

11:38.310 --> 11:39.310
比方说我们这里

11:39.310 --> 11:40.310
要添加多项

11:40.310 --> 11:42.310
写个秋葵

11:43.310 --> 11:44.310
还有香菜

11:44.310 --> 11:48.260
能不能这样子写呢

11:48.260 --> 11:49.260
这样子写

11:49.260 --> 11:50.260
你看那个结果

11:50.260 --> 11:51.260
运行

11:51.260 --> 11:52.260
好 成功了

11:52.260 --> 11:53.260
然后我们看一下

11:53.260 --> 11:54.260
这里的结果

11:55.260 --> 11:56.260
所以说这个东西

11:56.260 --> 11:58.260
它是一项一项添加的

11:58.260 --> 11:59.260
如果说你要添加多项

11:59.260 --> 12:00.260
怎么办呢

12:00.260 --> 12:01.260
你应该把这个东西

12:01.260 --> 12:03.260
再进一步封装

12:03.260 --> 12:05.260
我要往labs里边添加东西

12:05.260 --> 12:07.260
添加什么呢

12:08.260 --> 12:09.260
添加什么呢

12:09.260 --> 12:10.260
我们这里写上另外一个指令

12:10.260 --> 12:11.260
叫做一起

12:11.260 --> 12:13.260
一个一个添加

12:13.260 --> 12:14.260
把这个数组里边

12:14.260 --> 12:15.260
一个一个添加进去

12:15.260 --> 12:17.260
要配合这个一起

12:17.260 --> 12:18.260
我们来看一下

12:18.260 --> 12:21.260
这个就是代码的逻辑

12:21.260 --> 12:22.260
逻辑是什么呢

12:22.260 --> 12:23.260
就是我要往里边添加一项

12:23.260 --> 12:24.260
不管你有没有

12:24.260 --> 12:25.260
我都要往里边添加

12:25.260 --> 12:26.260
添加什么像呢

12:26.260 --> 12:28.260
往这个集合labs里面添加

12:28.260 --> 12:29.260
怎么添加呢

12:29.260 --> 12:30.260
我要添加多项

12:30.260 --> 12:31.260
所以说我们用一起

12:31.260 --> 12:32.260
一个一个添加

12:32.260 --> 12:33.260
因为它只能

12:33.260 --> 12:34.260
这东西只能添加一项一项添加

12:34.260 --> 12:36.260
所以说我们用一起

12:36.260 --> 12:37.260
表示它一个一个添加

12:37.260 --> 12:38.260
添加第1个

12:38.260 --> 12:39.260
添加第2个

12:39.260 --> 12:40.260
运行

12:41.260 --> 12:42.260
刷新

12:42.260 --> 12:43.260
你看是不是多了两项

12:43.260 --> 12:44.260
当然了

12:44.260 --> 12:45.260
如果说你用那个什么

12:45.260 --> 12:46.260
ad to set

12:46.260 --> 12:48.260
逻辑是一样的

12:48.260 --> 12:49.260
运行

12:49.260 --> 12:50.260
那么这里就是0

12:50.260 --> 12:51.260
因为它里边已经有

12:51.260 --> 12:52.260
秋葵和香菜了

12:53.260 --> 12:55.260
这就是关于添加

12:56.260 --> 12:57.260
好

12:57.260 --> 12:58.260
添加说完了过后了

12:58.260 --> 12:59.260
这就是一起

12:59.260 --> 13:01.260
然后我们来说删除

13:01.260 --> 13:02.260
删除的话

13:02.260 --> 13:03.260
比方说

13:03.260 --> 13:04.260
我们要删除的就是

13:04.260 --> 13:06.260
我们删除的指令是用破

13:06.260 --> 13:08.260
用破来删除

13:08.260 --> 13:09.260
比方说我们给它写一下

13:10.260 --> 13:11.260
用破来删除

13:12.260 --> 13:13.260
怎么来删除呢

13:13.260 --> 13:14.260
删除的话

13:14.260 --> 13:15.260
我们就看

13:15.260 --> 13:16.260
比方删除这个集合

13:16.260 --> 13:17.260
里边的一项

13:17.260 --> 13:18.260
它就匹配的一个集合

13:18.260 --> 13:19.260
里边一样一样去匹配

13:19.260 --> 13:21.260
看哪一项能够满足要求

13:22.260 --> 13:24.260
怎么来匹配了

13:24.260 --> 13:26.260
比方说我们这里就直接写个香菜

13:28.260 --> 13:29.260
好运行

13:29.260 --> 13:30.260
它什么意思

13:30.260 --> 13:33.260
表示删除这个数组里边

13:33.260 --> 13:37.260
凡是等于香菜这个值的数据

13:37.260 --> 13:38.260
运行

13:38.260 --> 13:39.260
一样香菜是不是没了

13:39.260 --> 13:40.260
对吧

13:40.260 --> 13:42.260
那如果说我们这样子写的

13:43.260 --> 13:44.260
如果说是这样子写的

13:44.260 --> 13:45.260
啥意思呢

13:45.260 --> 13:47.260
表示的是删除这个集合

13:47.260 --> 13:48.260
删除这个数组中

13:48.260 --> 13:50.260
凡是等于这个数组的值

13:50.260 --> 13:52.260
那么这个东西是不是等于这个数组

13:52.260 --> 13:53.260
我们来运行

13:54.260 --> 13:55.260
好 这边

13:55.260 --> 13:56.260
刷新

13:56.260 --> 13:57.260
说这个数组没了

13:57.260 --> 13:58.260
对不对

13:58.260 --> 14:00.260
我们这边后边还可以写条件

14:00.260 --> 14:02.260
那么这就是查询条件了

14:02.260 --> 14:04.260
凡是满足查询条件的都可以

14:04.260 --> 14:06.260
比方说我们这里怎么写的

14:06.260 --> 14:07.260
我们可以写印

14:08.260 --> 14:10.260
就是这个数组里边某一项

14:10.260 --> 14:16.260
它在香菜和秋葵当中

14:16.260 --> 14:18.260
表示说数组里边

14:18.260 --> 14:19.260
如果说有一项

14:19.260 --> 14:20.260
要么是香菜

14:20.260 --> 14:21.260
要么是秋葵

14:21.260 --> 14:22.260
只要满足这个条件

14:22.260 --> 14:23.260
那么都要被删除

14:23.260 --> 14:24.260
就这么个意思

14:24.260 --> 14:25.260
运行

14:26.260 --> 14:27.260
是不是都没了

14:27.260 --> 14:28.260
对吧

14:28.260 --> 14:29.260
这就是删除

14:29.260 --> 14:30.260
所以很简单

14:30.260 --> 14:32.260
好 接下来我们再看下一个

14:32.260 --> 14:33.260
下一个

14:33.260 --> 14:35.260
我们再说一个比较特殊的操作符

14:35.260 --> 14:37.260
有的时候可能会有点用

14:37.260 --> 14:38.260
比方说我们要

14:38.260 --> 14:41.260
把数组里边某一些满足条件

14:41.260 --> 14:43.260
等一项修改为其他的东西

14:43.260 --> 14:45.260
比方说我们有这么一个需求

14:45.260 --> 14:47.260
把这个数组里边凡是

14:47.260 --> 14:49.260
就是我们所有的数组里边

14:49.260 --> 14:51.260
凡是有这个其他的

14:51.260 --> 14:54.260
把这一项修改为别的值

14:54.260 --> 14:55.260
比方说修改为other

14:55.260 --> 14:57.260
那怎么来修改呢

14:58.260 --> 14:59.260
那怎么修改呢

14:59.260 --> 15:00.260
那么这个东西

15:00.260 --> 15:02.260
你就必须要配合

15:02.260 --> 15:04.260
配合那个就是

15:05.260 --> 15:06.260
配合update的前面

15:06.260 --> 15:08.260
那个条件语句来使用了

15:08.260 --> 15:09.260
你看这个代码

15:09.260 --> 15:10.260
就表示说

15:10.260 --> 15:12.260
我要把user里边修改

15:12.260 --> 15:15.260
凡是love里边包含其他的

15:16.260 --> 15:17.260
这个条件我们以前学过的

15:17.260 --> 15:18.260
对吧

15:18.260 --> 15:19.260
上一课学过了

15:19.260 --> 15:21.260
love是就是个数组里边包含了其他

15:21.260 --> 15:23.260
找到因为我们要把其他修改为别的

15:23.260 --> 15:24.260
所以说我们肯定要查询

15:24.260 --> 15:25.260
有没有其他

15:25.260 --> 15:26.260
如果说包含了其他

15:26.260 --> 15:28.260
那么我们就把这一项修改为other

15:28.260 --> 15:29.260
那怎么修改呢

15:29.260 --> 15:31.260
我们用set来进行修改

15:31.260 --> 15:32.260
修改的时候呢

15:32.260 --> 15:33.260
我们用一个多的符号

15:33.260 --> 15:34.260
用这种符号

15:34.260 --> 15:36.260
表示这个数组里边

15:36.260 --> 15:37.260
多的表示这么意思呢

15:37.260 --> 15:38.260
表示的是

15:38.260 --> 15:39.260
之前查询条件

15:39.260 --> 15:41.260
匹配的那一项

15:41.260 --> 15:43.260
比方说我们这个

15:43.260 --> 15:44.260
其他匹配的是第几项呢

15:44.260 --> 15:46.260
匹配的是第012

15:46.260 --> 15:47.260
对吧

15:47.260 --> 15:48.260
匹配的是下标为2

15:48.260 --> 15:49.260
那么这个多的

15:49.260 --> 15:50.260
就相当于是下标为2

15:50.260 --> 15:51.260
对吧

15:51.260 --> 15:52.260
它是动态的

15:52.260 --> 15:53.260
它能够得到

15:53.260 --> 15:54.260
之前在查询的时候

15:54.260 --> 15:56.260
匹配到的那一项

15:56.260 --> 15:57.260
明儿的意思吧

15:57.260 --> 15:58.260
那么把它修改成other

15:58.260 --> 15:59.260
就变成这个样子了

15:59.260 --> 16:00.260
好

16:00.260 --> 16:03.730
咱们来运行看一下

16:03.730 --> 16:04.730
这个地方

16:04.730 --> 16:06.730
我们还是自己写写吧

16:06.730 --> 16:08.730
这是id对吧

16:08.730 --> 16:09.730
还有一个什么呢

16:09.730 --> 16:11.730
还有一个就是love

16:11.730 --> 16:13.730
其他

16:13.730 --> 16:14.730
然后呢

16:14.730 --> 16:15.730
我们把它修改的时候呢

16:15.730 --> 16:16.730
我们用set

16:16.730 --> 16:17.730
来进行修改

16:17.730 --> 16:21.040
set

16:21.040 --> 16:22.040
set的时候呢

16:22.040 --> 16:25.040
我们在这里写上那个

16:25.040 --> 16:27.040
love

16:27.040 --> 16:28.040
属性名

16:28.040 --> 16:29.040
我们用这种属性名

16:29.040 --> 16:31.040
然后修改为other

16:31.040 --> 16:32.040
那么这个属性名

16:32.040 --> 16:33.040
就表示这个

16:33.040 --> 16:35.040
这个数组里边匹配到了那一项

16:35.040 --> 16:36.040
对吧

16:36.040 --> 16:38.040
它配合这个条件来使用

16:38.040 --> 16:39.040
运行

16:39.040 --> 16:40.040
没问题

16:40.040 --> 16:41.040
好

16:41.040 --> 16:42.040
这边

16:42.040 --> 16:43.040
对吧

16:43.040 --> 16:44.040
好像这些东西呢

16:44.040 --> 16:45.040
都

16:45.040 --> 16:46.040
比较特殊

16:46.040 --> 16:47.040
你们一般来开发的话

16:47.040 --> 16:48.040
也不会再用得到

16:48.040 --> 16:49.040
如果说这些

16:49.040 --> 16:50.040
这些东西啊

16:50.040 --> 16:51.040
你们不千万不要去背

16:51.040 --> 16:52.040
这些东西背了

16:52.040 --> 16:53.040
就当场死亡了

16:53.040 --> 16:54.040
不要去背

16:54.040 --> 16:56.040
我们以后的作为查询来使用

16:56.040 --> 16:57.040
就是如果说遇到不会的了

16:57.040 --> 16:58.040
我们去可以看一下

16:58.040 --> 17:00.040
这里面有没有解决办法

17:00.040 --> 17:01.040
如果说这里面都没有解决办法的话

17:01.040 --> 17:03.040
那确实你的东西太特殊了

17:03.040 --> 17:05.040
那么你可以去参考一下

17:05.040 --> 17:07.040
这个文档

17:07.040 --> 17:09.040
可以参考一下

17:09.040 --> 17:11.040
这是官方的mongo db文档

17:11.040 --> 17:13.040
里边关于查询

17:13.040 --> 17:14.040
updates operators

17:14.040 --> 17:16.040
就是查询的操作服

17:16.040 --> 17:18.040
跟修改制断相关的

17:18.040 --> 17:20.040
看一下是不是有这么一些

17:20.040 --> 17:22.040
然后跟修改宿主相关的

17:22.040 --> 17:24.040
有这么一些

17:24.040 --> 17:26.040
那么这里的特区查询

17:26.040 --> 17:27.040
就是

17:27.040 --> 17:29.040
看有没有满足你的要求的

17:29.040 --> 17:30.040
如果说

17:30.040 --> 17:32.040
官方文档里面都没有满足要求的

17:32.040 --> 17:34.040
没有让你可以使用的

17:34.040 --> 17:35.040
说明你的东西

17:35.040 --> 17:36.040
确实特殊到一定程度了

17:36.040 --> 17:37.040
那么这种时候呢

17:37.040 --> 17:39.040
你要想别的办法了

17:39.040 --> 17:41.040
就不能死摆在这个文档不动

17:41.040 --> 17:42.040
不变了

17:42.040 --> 17:43.040
你要想别的办法

17:43.040 --> 17:45.040
这是关于这个就是

17:45.040 --> 17:47.040
mongo db原生的操作

17:47.040 --> 17:48.040
那么接下来

17:48.040 --> 17:49.040
还有一个

17:49.040 --> 17:50.040
其他配置

17:50.040 --> 17:51.040
其他配置指的是什么呢

17:51.040 --> 17:53.040
指的是就是那个mongo db里边

17:53.040 --> 17:55.040
mongo db里边

17:55.040 --> 17:56.040
如果说

17:56.040 --> 17:58.040
就是第三个参数

17:58.040 --> 18:00.040
就是这个updates的第三个参数

18:00.040 --> 18:01.040
其他配置里面

18:01.040 --> 18:02.040
其实有一些

18:02.040 --> 18:03.040
我们跟我们

18:03.040 --> 18:04.040
现在没有什么关系

18:04.040 --> 18:05.040
我们主要是在乎了这个

18:05.040 --> 18:06.040
updates

18:06.040 --> 18:07.040
什么意思呢

18:07.040 --> 18:08.040
它莫名为forge

18:08.040 --> 18:09.040
这个东西如果说

18:09.040 --> 18:10.040
配置为forge的话

18:10.040 --> 18:11.040
就表示如果说

18:11.040 --> 18:13.040
无法找到匹配箱

18:13.040 --> 18:14.040
那么就进行添加

18:14.040 --> 18:15.040
啥意思呢

18:15.040 --> 18:16.040
我给大家看一下吧

18:16.040 --> 18:18.040
比方说我们到这个

18:18.040 --> 18:20.040
到这边来

18:20.040 --> 18:21.040
修改的时候

18:21.040 --> 18:22.040
我们set的时候

18:22.040 --> 18:24.040
我们这样子写

18:24.040 --> 18:26.040
查照这个id

18:26.040 --> 18:27.040
然后呢

18:27.040 --> 18:28.040
我们这里写上

18:28.040 --> 18:30.040
比方说name设之为

18:30.040 --> 18:32.040
dng

18:32.040 --> 18:33.040
然后呢

18:33.040 --> 18:35.040
age设之为

18:35.040 --> 18:36.040
是吧

18:36.040 --> 18:37.040
然后呢

18:37.040 --> 18:38.040
adres

18:38.040 --> 18:41.860
设之为一个对象

18:41.860 --> 18:43.860
设之为一个对象

18:43.860 --> 18:44.860
然后呢

18:44.860 --> 18:46.860
这里province

18:46.860 --> 18:48.860
a

18:48.860 --> 18:49.860
city

18:49.860 --> 18:50.860
rb

18:50.860 --> 18:54.750
还有什么呢

18:54.750 --> 18:55.750
login id

18:55.750 --> 18:56.750
随便设置一些吧

18:56.750 --> 18:58.750
login id

18:58.750 --> 18:59.750
随便设置一些

18:59.750 --> 19:00.750
那么我们

19:00.750 --> 19:01.750
这样子写了过后

19:01.750 --> 19:02.750
我们在第三个参数

19:02.750 --> 19:04.750
给大家加上一个

19:04.750 --> 19:06.750
upstart

19:06.750 --> 19:07.750
v2

19:07.750 --> 19:08.750
好

19:08.750 --> 19:09.750
我们接下来

19:09.750 --> 19:10.750
来做一个实验

19:10.750 --> 19:11.750
我们先把这个数据

19:11.750 --> 19:12.750
给它删除掉

19:12.750 --> 19:16.700
把这个dng给它删除掉

19:16.700 --> 19:17.700
这个给它删除掉

19:17.700 --> 19:19.700
delete document

19:19.700 --> 19:20.700
好 删除掉

19:20.700 --> 19:21.700
那么现在是不是

19:21.700 --> 19:22.700
这个查询结果里面

19:22.700 --> 19:23.700
不会有数据

19:23.700 --> 19:24.700
对吧

19:24.700 --> 19:25.700
这个查询结果

19:25.700 --> 19:26.700
是不是不会有数据了

19:26.700 --> 19:27.700
那么没有数据的话

19:27.700 --> 19:28.700
如果说你查不到的话

19:28.700 --> 19:29.700
由于这个配置为处

19:29.700 --> 19:30.700
它就会给你新增一条

19:30.700 --> 19:31.700
就这么个意思

19:31.700 --> 19:33.700
查不到就给你新增

19:33.700 --> 19:34.700
运行

19:34.700 --> 19:36.700
这里保错了

19:37.700 --> 19:40.700
它说unknown modifier

19:40.700 --> 19:45.830
我看一下

19:45.830 --> 19:49.270
到哪里出了问题

19:49.270 --> 19:51.270
明白了

19:51.270 --> 19:52.270
这个地方

19:52.270 --> 19:53.270
应该写到这儿了

19:54.270 --> 19:56.270
应该写到这儿

19:57.270 --> 20:02.570
运行

20:02.570 --> 20:03.570
运行完了

20:03.570 --> 20:04.570
然后我们来这边

20:04.570 --> 20:05.570
来看一下

20:06.570 --> 20:07.570
运行

20:07.570 --> 20:08.570
是不是多了一个数据了

20:08.570 --> 20:09.570
对吧

20:09.570 --> 20:10.570
查不到它就给你新增

20:10.570 --> 20:11.570
就这么个意思

20:11.570 --> 20:12.570
那么这里

20:12.570 --> 20:14.570
告诉你upstarted ID

20:14.570 --> 20:15.570
新增的ID

20:15.570 --> 20:16.570
告诉你

20:16.570 --> 20:18.570
没有就是匹配的

20:18.570 --> 20:20.570
MarchCord0

20:20.570 --> 20:21.570
没有匹配的

20:21.570 --> 20:22.570
也没有进行修改

20:22.570 --> 20:24.570
而是给你进行的新增

20:24.570 --> 20:26.570
这是关于这个配置

20:26.570 --> 20:27.570
其他没啥

20:27.570 --> 20:29.570
好 接下来我们看mongles

20:29.570 --> 20:30.570
mongles里面的用法

20:30.570 --> 20:32.570
你学会到mongledb里面的用法

20:32.570 --> 20:33.570
mongles就非常简单了

20:33.570 --> 20:35.570
mongles有两种方式

20:35.570 --> 20:36.570
可以进行修改

20:36.570 --> 20:37.570
第一种方式是这样子

20:37.570 --> 20:39.570
我们把这个给它删除掉

20:40.570 --> 20:42.570
这个已经不符合我们的模型了

20:43.570 --> 20:44.570
删除掉

20:44.570 --> 20:46.570
我们换一个UserID

20:48.570 --> 20:49.570
换一个UserID

20:51.940 --> 20:52.940
这些单码

20:52.940 --> 20:53.940
到里面那边

20:53.940 --> 20:54.940
你肯定要去改一下

20:54.940 --> 20:55.940
因为里面ID都不一样

20:57.940 --> 20:59.940
我们在这边找到这个

20:59.940 --> 21:01.940
mongles里面的第一种方式

21:01.940 --> 21:02.940
就是你如果说

21:02.940 --> 21:03.940
拿到了实力模型

21:03.940 --> 21:04.940
模型实力

21:04.940 --> 21:05.940
就通过

21:05.940 --> 21:07.940
无论你是通过查询来拿到的

21:07.940 --> 21:08.940
或者是通过创建

21:08.940 --> 21:09.940
堆下来拿到的

21:09.940 --> 21:10.940
对吧

21:10.940 --> 21:11.940
总之威力

21:11.940 --> 21:12.940
模型的实力

21:12.940 --> 21:13.940
就这个东西

21:13.940 --> 21:14.940
拿到这个实力过后

21:14.940 --> 21:15.940
我们之前说过

21:15.940 --> 21:16.940
它会跟踪对不对

21:16.940 --> 21:17.940
会跟踪你的实力

21:17.940 --> 21:18.940
其实本质上

21:18.940 --> 21:20.940
它就是你在你保存的时候

21:20.940 --> 21:22.940
对比两个文档

21:22.940 --> 21:23.940
就是你改动之后的文档

21:23.940 --> 21:25.940
你现在这个实力里面的数据

21:25.940 --> 21:27.940
和我们数据库里面

21:27.940 --> 21:28.940
就文档的数据

21:28.940 --> 21:29.940
它会进行对比

21:29.940 --> 21:30.940
对比了之后

21:30.940 --> 21:31.940
如果说它发现了有差异

21:31.940 --> 21:33.940
它会自动的去完成更新

21:33.940 --> 21:35.940
因此这种修改方式

21:35.940 --> 21:36.940
非常简单的

21:36.940 --> 21:37.940
咱们来看一下吧

21:40.380 --> 21:41.380
到这边来

21:42.380 --> 21:43.380
随便写个函数吧

21:43.380 --> 21:45.890
Test

21:46.890 --> 21:47.890
拿过来

21:49.890 --> 21:51.890
这边我们重新换一个

21:51.890 --> 21:52.890
函数的名字

21:52.890 --> 21:54.890
重新换一个ID

21:54.890 --> 21:56.890
ID重新换一个

21:56.890 --> 22:00.290
这边来

22:00.290 --> 22:04.110
复制一下

22:05.110 --> 22:06.110
再进过来

22:06.110 --> 22:07.110
咱们首先看一下

22:07.110 --> 22:08.110
目前这个ID

22:08.110 --> 22:13.220
目前这个ID里面的数据

22:15.220 --> 22:17.220
这是目前的数据

22:17.220 --> 22:19.220
然后我要把新名修改为

22:20.220 --> 22:21.220
修改为

22:24.220 --> 22:27.220
然后在这里边加上一个编程

22:27.220 --> 22:28.220
咱们来看一下吧

22:28.220 --> 22:30.220
加上一个秋葵香菜

22:30.220 --> 22:31.220
我们看一下

22:31.220 --> 22:32.220
是不是用JS的语法来写的

22:32.220 --> 22:33.220
得到这个用户

22:33.220 --> 22:34.220
得到用户过后

22:34.220 --> 22:36.220
我们直接进行修改

22:38.220 --> 22:39.220
然后City等于

22:41.220 --> 22:43.220
然后往这个数据里面加两下

22:43.220 --> 22:44.220
对吧

22:44.220 --> 22:45.220
这是不是非常熟悉的

22:45.220 --> 22:46.220
然后再直接保存

22:46.220 --> 22:47.220
保存的时候

22:47.220 --> 22:48.220
对比新就稳当

22:48.220 --> 22:49.220
然后自动完成更新

22:49.220 --> 22:50.220
就这么简单

22:51.220 --> 22:52.220
然后我们这里运行一下

22:52.220 --> 22:53.220
试一下

22:53.220 --> 22:55.530
推出

22:58.900 --> 22:59.900
他这里包错了

22:59.900 --> 23:00.900
他说什么

23:01.900 --> 23:02.900
他说

23:04.900 --> 23:07.900
无法把这个秋葵和香菜

23:08.900 --> 23:09.900
转换

23:09.900 --> 23:10.900
这里写错了

23:11.900 --> 23:12.900
图形里面

23:12.900 --> 23:13.900
加两个字

23:13.900 --> 23:14.900
应该是这样子写的

23:14.900 --> 23:15.900
对不对

23:15.900 --> 23:16.900
这个写错了

23:17.900 --> 23:18.900
加两个字

23:19.900 --> 23:20.900
现在再看

23:21.900 --> 23:22.900
这边保存

23:24.900 --> 23:25.900
没问题了

23:25.900 --> 23:27.900
然后我们到这边来刷新一下

23:27.900 --> 23:28.900
刷新

23:28.900 --> 23:29.900
就加进来了

23:29.900 --> 23:31.900
这种方式特别简单

23:31.900 --> 23:33.900
更不需要任何特殊的语法

23:33.900 --> 23:34.900
直接修改模型就行了

23:35.900 --> 23:37.900
用你学过的JS的方式

23:37.900 --> 23:38.900
也修改模型

23:38.900 --> 23:39.900
修改完了之后

23:39.900 --> 23:40.900
只要一保存

23:40.900 --> 23:41.900
它会对比新就稳当

23:41.900 --> 23:42.900
自动完成更新

23:42.900 --> 23:43.900
第二种方式

23:43.900 --> 23:44.900
就是使用那个

23:44.900 --> 23:46.900
MangoDB的原生方式

23:46.900 --> 23:47.900
就是使用两个函数

23:47.900 --> 23:48.900
Update1

23:48.900 --> 23:49.900
UpdateMany

23:49.900 --> 23:51.900
写法完全一样

23:51.900 --> 23:52.900
就不再说了

23:52.900 --> 23:53.900
也都在这里

23:53.900 --> 23:54.900
在代码里面

23:54.900 --> 23:55.900
可以怎么写的

23:55.900 --> 23:58.900
UserUpdate1

23:58.900 --> 24:00.900
一个是UpdateMany

24:00.900 --> 24:02.900
使用这两个来进行更新

24:03.900 --> 24:04.900
现在不太推荐使用

24:04.900 --> 24:05.900
他以前用的Update

24:05.900 --> 24:06.900
现在不太推荐了

24:06.900 --> 24:08.900
现在推荐使用Update1

24:08.900 --> 24:09.900
和UpdateMany

24:09.900 --> 24:11.900
用这两个东西来进行更新

24:11.900 --> 24:12.900
写法的用法

24:12.900 --> 24:13.900
就跟之前是一样的

24:13.900 --> 24:14.900
同样它是一步的

24:14.900 --> 24:15.900
你要等待它

24:16.900 --> 24:17.900
那么这里我们看一下

24:17.900 --> 24:19.900
第一个就是查询条件

24:19.900 --> 24:20.900
第二个就是

24:20.900 --> 24:21.900
要更新的文档

24:21.900 --> 24:22.900
第三个就是一些配置

24:22.900 --> 24:24.900
我来说一下区别在哪

24:24.900 --> 24:25.900
区别就是

24:25.900 --> 24:26.900
如果说你要匹配的时候

24:26.900 --> 24:27.900
ID是可以使用

24:27.900 --> 24:28.900
支付刷匹配的

24:28.900 --> 24:30.900
你看我们之前的ID

24:30.900 --> 24:31.900
在这里的ID

24:31.900 --> 24:32.900
是不是要用ObjectID来匹配

24:32.900 --> 24:33.900
那么这边是要用

24:33.900 --> 24:34.900
支付刷ID

24:34.900 --> 24:35.900
就可以直接使用

24:35.900 --> 24:36.900
支付刷ID进行匹配

24:36.900 --> 24:37.900
第二个区别

24:37.900 --> 24:38.900
是Dock里面

24:38.900 --> 24:39.900
是可以省略set的

24:39.900 --> 24:40.900
直接修改就可以了

24:40.900 --> 24:41.900
比方说

24:41.900 --> 24:42.900
比方说

24:42.900 --> 24:43.900
比方说

24:43.900 --> 24:44.900
咱们在这里

24:44.900 --> 24:45.900
可以使用这样的方式

24:45.900 --> 24:46.900
UserUpdate

24:47.900 --> 24:48.900
修改

24:48.900 --> 24:49.900
第一个条件

24:49.900 --> 24:50.900
ID是

24:51.900 --> 24:52.900
这个ID

24:53.900 --> 24:54.900
支付刷

24:54.900 --> 24:55.900
这个ID

24:55.900 --> 24:57.900
条件就写完了

24:57.900 --> 24:58.900
还有别的条件

24:58.900 --> 24:59.900
你自己去写

24:59.900 --> 25:00.900
修改的时候

25:00.900 --> 25:01.900
我们可以

25:01.900 --> 25:02.900
不用去写这个set

25:02.900 --> 25:03.900
当然写的话

25:03.900 --> 25:04.900
也没有问题

25:04.900 --> 25:05.900
那么我们可以

25:05.900 --> 25:06.900
直接使用

25:06.900 --> 25:07.900
修改为

25:10.900 --> 25:11.900
我们这里

25:12.900 --> 25:13.900
保存

25:14.900 --> 25:17.600
看一下

25:17.600 --> 25:19.600
这里有一个什么

25:19.600 --> 25:20.600
这里写错了

25:20.600 --> 25:22.600
它说Object已经过时了

25:22.600 --> 25:23.600
请使用Object1

25:23.600 --> 25:24.600
ObjectMenu

25:24.600 --> 25:26.600
咱们使用Object1

25:27.600 --> 25:28.600
保存

25:28.600 --> 25:29.600
那么现在我们看

25:29.600 --> 25:30.600
这边

25:30.600 --> 25:31.600
刷新

25:31.600 --> 25:32.600
这边成哥了

25:32.600 --> 25:33.600
对不对

25:33.600 --> 25:34.600
就这么简单

25:35.600 --> 25:36.600
然后再来

25:37.600 --> 25:38.600
这个区别

25:38.600 --> 25:39.600
就是Dock里面

25:39.600 --> 25:40.600
可以省略set

25:40.600 --> 25:41.600
还有第三个就是

25:41.600 --> 25:42.600
默认情况下

25:42.600 --> 25:44.600
它是不会触发验证的

25:44.600 --> 25:45.600
啥意思呢

25:45.600 --> 25:46.600
比方说

25:46.600 --> 25:47.600
咱们这里的loginID

25:47.600 --> 25:49.600
loginID不是有个验证吗

25:49.600 --> 25:51.600
我们之前在模型里边

25:51.600 --> 25:52.600
loginID

25:53.600 --> 25:54.600
loginID

25:54.600 --> 25:55.600
不是有个验证吗

25:55.600 --> 25:56.600
对吧

25:56.600 --> 25:57.600
那么验证的最小长度是3

25:57.600 --> 25:59.600
如果说我这里写个A

25:59.600 --> 26:00.600
你看它会不会触发验证

26:01.600 --> 26:02.600
保存

26:03.600 --> 26:04.600
是不是没有触发验证

26:04.600 --> 26:05.600
然后我们来看一下数据库

26:06.600 --> 26:07.600
是不是变成A了

26:07.600 --> 26:08.600
没有触发验证

26:08.600 --> 26:09.600
默认情况下

26:09.600 --> 26:10.600
在忙故事里边

26:10.600 --> 26:11.600
update更新操作的话

26:11.600 --> 26:13.600
它是不会触发验证的

26:13.600 --> 26:15.600
因为更新操作太过于灵活了

26:15.600 --> 26:16.600
它不会触发验证

26:16.600 --> 26:17.600
因此呢

26:17.600 --> 26:18.600
如果说你要触发验证的话

26:18.600 --> 26:20.600
需要写第三个参数配置

26:20.600 --> 26:21.600
配置里边除了可以配置

26:21.600 --> 26:22.600
这个upset之外

26:22.600 --> 26:23.600
跟之前一样

26:23.600 --> 26:24.600
跟那个数据库里边一样

26:24.600 --> 26:26.600
除了可以配置这个东西之外呢

26:26.600 --> 26:27.600
还可以配置这个就是

26:29.600 --> 26:30.600
是否要触发验证

26:30.600 --> 26:31.600
如果说你把它写为处的话

26:31.600 --> 26:33.600
那么它就会触发验证了

26:33.600 --> 26:34.600
保存

26:34.600 --> 26:35.600
你看现在是不是验证失败了

26:35.600 --> 26:36.600
它告诉你什么

26:36.600 --> 26:37.600
validate error

26:37.600 --> 26:38.600
验证失败

26:38.600 --> 26:39.600
loginID是太多了

26:41.600 --> 26:43.600
那么建议大家在更新的时候

26:43.600 --> 26:44.600
还是把验证写上

26:44.600 --> 26:45.600
看你具体的情况

26:45.600 --> 26:46.600
要不要写验证

26:46.600 --> 26:47.600
根据你的情况来

26:48.600 --> 26:50.600
这是关于这个猛故事

26:50.600 --> 26:52.600
以及猛狗地币里边的更新操作

26:52.600 --> 26:53.600
其实呢

26:53.600 --> 26:54.600
绝大部分情况下

26:54.600 --> 26:55.600
更新操作

26:55.600 --> 26:56.600
就这个玩意儿

26:56.600 --> 26:57.600
就已经够用了

26:57.600 --> 26:58.600
你想象这个场景

26:58.600 --> 26:59.600
就改一下属性名吧

26:59.600 --> 27:01.600
无非就是改属性名吗

27:01.600 --> 27:03.600
偶尔可能会用到这个

27:03.600 --> 27:05.600
就是铺鞋往数组里边加

27:05.600 --> 27:06.600
或者是铺铺往在数组里边删除

27:06.600 --> 27:08.600
有可能会用到这个

27:08.600 --> 27:09.600
但绝大部分情况下

27:09.600 --> 27:10.600
用到这个设计就够了

27:10.600 --> 27:12.600
但是这些我都跟你们讲下来

27:12.600 --> 27:13.600
你们以后

27:13.600 --> 27:14.600
如果说遇到了一些

27:14.600 --> 27:15.600
特殊的操作的话

27:15.600 --> 27:16.600
可以在这里表姐来查

