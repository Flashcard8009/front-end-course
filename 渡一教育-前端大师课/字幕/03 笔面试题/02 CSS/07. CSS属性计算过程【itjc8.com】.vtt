WEBVTT

00:00.940 --> 00:02.980
大家好 我是谢老师

00:02.980 --> 00:06.820
而这节课的话 我们来看一下关于CSS属性

00:06.820 --> 00:09.380
它的一个计算的过程

00:09.380 --> 00:11.580
你看这边有到这个面试题

00:11.580 --> 00:16.300
请你检数一下CSS中属性的计算过程

00:16.300 --> 00:18.100
是怎么样子的

00:18.100 --> 00:20.660
那什么叫做属性的计算过程呢

00:20.660 --> 00:22.180
那你看我这边

00:22.180 --> 00:27.060
我这边的话 以一个最简单的代码来做实例

00:27.060 --> 00:28.580
比如说你看我这边

00:28.580 --> 00:30.380
我写一个P

00:31.140 --> 00:33.200
然后这边随便写一点东西

00:33.200 --> 00:35.240
然后接下来我给这个P

00:35.240 --> 00:38.580
我来写一个样式 样式也很简单

00:38.580 --> 00:41.380
Color read

00:41.380 --> 00:43.940
然后回头的话 我们在这边来看一下

00:43.940 --> 00:44.720
说心

00:44.720 --> 00:47.020
好 你看这边是不是有一个这个段落

00:47.020 --> 00:49.060
然后既然它这边显示的是什么呢

00:49.060 --> 00:50.100
红色

00:50.100 --> 00:52.660
那这里的话 我就抛出一个问题

00:52.660 --> 00:53.680
什么问题呢

00:53.680 --> 00:56.240
那我们这个P这个元素

00:56.240 --> 01:00.340
它就只有这个Color属性吗

01:00.340 --> 01:02.140
有的同学会说对呀

01:02.140 --> 01:04.180
因为你只设置了Color呀

01:04.180 --> 01:06.480
对不对 有的同学说你这里只设置了Color呀

01:06.480 --> 01:09.040
那它当然就只有Color这个属性啊

01:09.040 --> 01:10.580
其实不是

01:10.580 --> 01:13.400
其实不是 你看我这边的话 我把这个打开

01:13.400 --> 01:15.440
我把这个检查打开

01:15.440 --> 01:18.000
检查打开 然后接下来我们找到什么呢

01:18.000 --> 01:19.280
找到这边

01:19.280 --> 01:22.600
computed

01:22.600 --> 01:23.380
computed

01:23.380 --> 01:25.940
我们选择中这个P

01:25.940 --> 01:27.220
选择中这个P

01:27.220 --> 01:30.800
我们这边找到 你看

01:30.800 --> 01:32.600
Color的话

01:32.600 --> 01:33.880
Color是在哪里

01:33.880 --> 01:35.680
我把这边稍微折一下

01:35.680 --> 01:37.960
Color

01:37.960 --> 01:40.280
DecorationColor 这里

01:40.280 --> 01:42.320
这里是用我们设置的

01:42.320 --> 01:45.920
我们设置的Color 你看这边 它是用的是RGB来表示的

01:45.920 --> 01:47.700
是255000

01:47.700 --> 01:48.920
是不是红色

01:48.920 --> 01:53.160
对不对 但是其实除了我们设置的这个Color以外

01:53.160 --> 01:55.760
它所有的属性

01:55.760 --> 01:58.320
其实都是有值的

01:58.320 --> 01:59.340
Color没有

01:59.340 --> 02:01.900
都是有值的 比如说你都封了上一字

02:01.900 --> 02:06.000
你没设置是吧 没关系 我这边我其实是有值的

02:06.000 --> 02:08.560
Color没有 包括什么Fontestretch

02:08.560 --> 02:10.100
Fontestyle

02:10.100 --> 02:14.460
我这些都是有值的 也就是说我所有的属性

02:14.460 --> 02:18.540
所有属性 我其实都是有值的

02:18.540 --> 02:19.820
就你没设置了

02:19.820 --> 02:21.860
你没设置了 但你这边设置了

02:21.860 --> 02:25.460
就看这边你设置了 让我是不是用你设置了这个值

02:25.460 --> 02:29.300
但是你没有设置的 我这边是有值的

02:29.300 --> 02:33.660
明白没有 所以这边是第一点 一定要确认的

02:33.660 --> 02:34.680
就是什么呢

02:34.680 --> 02:40.040
就是每个属性都是有默认值的

02:40.040 --> 02:41.840
每个属性都是有默认值

02:41.840 --> 02:45.160
那我们这边要讨论什么呢 我们就要讨论这个属性

02:45.160 --> 02:50.300
它最终从这个默认值到使用我给它设置的这个值

02:50.300 --> 02:53.360
究竟是怎么样一个过程

02:53.360 --> 02:57.200
有同学说这个很简单 我给它设置了就用我的

02:57.200 --> 02:59.500
我没给它设置就用默认值

02:59.500 --> 03:01.560
应该就这个逻辑

03:01.560 --> 03:02.320
不是

03:02.320 --> 03:05.140
其实我们整个属性

03:05.140 --> 03:08.720
值的计算方法 其实大致的话有这么四种

03:08.720 --> 03:13.340
其实也是它的顺序 首先第一个就是确定声明值

03:13.340 --> 03:16.400
就看你又没有声明 比如我们刚才这边

03:16.400 --> 03:18.200
这边我们是不是声明了

03:18.200 --> 03:21.000
对不对 这个就是你声明的这个值

03:21.000 --> 03:22.280
但是呢

03:22.280 --> 03:28.680
不是说你声明了 我就用你这个值 为什么呢 因为它有可能发生冲突

03:28.680 --> 03:34.060
有可能发生冲突 所以我这边要解决什么呢 解决这个沉叠冲突

03:34.060 --> 03:35.840
这个的话我到时候会

03:35.840 --> 03:37.640
专门画一节课来讲

03:37.640 --> 03:42.000
到时候我专门会有一节课来讲这个沉叠冲突它是怎么解决的

03:42.000 --> 03:46.080
我们这节课的话先简单提一下 我们借这节课的重点是

03:46.080 --> 03:47.640
确定这个顺序

03:47.640 --> 03:48.900
确定这个顺序

03:48.900 --> 03:53.520
好 然后这边它解决冲突 解决冲突之后的价最终是不确定

03:53.520 --> 03:55.300
究竟用哪个值啊

03:55.300 --> 03:55.820
对不对

03:55.820 --> 04:00.680
好了 现在如果没有值 没有值怎么办呢 没有值使用计程

04:00.680 --> 04:02.980
我看我能不能计程得到

04:02.980 --> 04:06.820
对不对 我能不能计程到 如果计程也计程不到

04:06.820 --> 04:10.660
那就干嘛呢 那就使用默认值

04:10.660 --> 04:11.420
看到没有

04:11.420 --> 04:14.240
好 那我们这边一个一个来 我们来举个例子

04:14.240 --> 04:15.780
比如这边有个HE

04:15.780 --> 04:17.820
然后这边有一个这个Test

04:18.040 --> 04:22.380
我们没有书写任何的这个代码 这个是采用的就是什么呢 默认样式

04:22.380 --> 04:26.480
我们这边我们来看一下嘛 比如说我们这边

04:26.480 --> 04:28.780
写一个这个HE 这个就不要了

04:28.780 --> 04:31.340
这个要不要都无所谓 反正也不影响它 是吧

04:31.340 --> 04:34.660
大家这边我们来看一下HE

04:34.660 --> 04:36.460
刷新一下

04:36.460 --> 04:40.040
刷新一下之后我们来看一下这边

04:40.040 --> 04:41.980
找到这个HE

04:41.980 --> 04:43.740
封的Size是多少

04:43.740 --> 04:45.020
是不是32

04:45.060 --> 04:46.420
Fontweight是多少

04:46.420 --> 04:47.540
是不是700

04:47.540 --> 04:50.980
对不对 你看它这边会有这么一个默认值

04:50.980 --> 04:55.020
好 然后结果完事之后 假设我们给这个HE设置一个样式

04:55.020 --> 04:57.740
比较FontSize是二十项书

04:57.740 --> 05:00.540
那这个就是什么呢 这个就是我们的作者样式

05:00.540 --> 05:02.140
我们是不是就是作者 对不对

05:02.140 --> 05:04.300
所以这个就是我们设置的作者样式

05:04.300 --> 05:08.500
那当作者样式和浏览器样式

05:08.500 --> 05:11.660
它这个就是样式的这个生命值冲突的时候

05:11.660 --> 05:14.700
用哪个 那肯定是用作者样式

05:14.740 --> 05:17.100
看到没有 肯定是用作者样式

05:17.100 --> 05:18.900
然后比如说我们这边

05:18.900 --> 05:25.020
我们把这个HE设置一下FontSize二十匹差

05:25.020 --> 05:27.900
好 那接下来的话 你注意一下 这边现在是不是32

05:27.900 --> 05:30.660
对不对 大家我这边一刷新

05:30.660 --> 05:33.420
那现在这里是不是就是二十匹差

05:33.420 --> 05:34.460
但是这个Fontweight

05:34.460 --> 05:38.540
Fontweight由于你没有设置作者样式

05:38.540 --> 05:41.300
所以说我这边那就是仍然是使用这个默认的

05:41.420 --> 05:45.140
这是第一个 就是确定生命值

05:45.140 --> 05:47.700
好 第二个 就是你在确定生命值的时候

05:47.700 --> 05:50.540
可能会发生一种情况 什么情况呢

05:50.540 --> 05:53.020
就是这个沉叠冲突

05:53.020 --> 05:54.180
比如我们这边举个例子

05:54.180 --> 05:56.740
我们这边就直接看 比如你看我这边

05:56.740 --> 05:59.540
我这边HE外面套了一个什么

05:59.540 --> 06:02.460
套了个DIV 然后给了一个内名是比较Test的

06:02.460 --> 06:04.140
好 然后接下来你看我这边

06:04.140 --> 06:07.540
我这边都是在设置这个字体大小

06:07.540 --> 06:12.500
一个是点TestHE 一个是HE

06:12.500 --> 06:15.980
那很明显这个的权重是比较重一些

06:15.980 --> 06:19.900
这个我说了 我到时候会单独开一节课的

06:19.900 --> 06:22.180
讲一下这个沉叠冲突是怎么解决的

06:22.180 --> 06:24.100
那我们这边写个最简单的

06:24.100 --> 06:27.140
最简单的是不是就是点Test然后HE

06:27.140 --> 06:28.740
这个的话是不是 这个是内

06:28.740 --> 06:30.140
那加这个是这个标签

06:30.140 --> 06:32.020
它的权重是不是比你大呀

06:32.020 --> 06:35.780
说最终它就是确认的这个字体大小是什么

06:35.780 --> 06:37.020
是不是这个

06:37.020 --> 06:40.220
对不对 封的Size 50pX

06:40.220 --> 06:42.580
看到没有 你这边的话你来看一下

06:42.580 --> 06:44.860
这个就会被划掉

06:44.860 --> 06:46.460
这个就会被划掉

06:49.220 --> 06:51.900
这是关于这个沉叠冲突

06:51.900 --> 06:52.740
然后完了之后

06:52.740 --> 06:55.180
然后接下来的话是这个使用继承

06:55.180 --> 06:57.500
如果你这边的话你比如说

06:57.500 --> 07:00.940
比如我们来看这个DIV下面有一个P

07:00.940 --> 07:02.820
然后这样我在设置这个颜色的时候

07:02.820 --> 07:04.980
我有没有给这个P设置颜色呢

07:04.980 --> 07:06.180
我没有给这个P设置颜色

07:06.220 --> 07:09.060
我是给谁 我是不给DIV设置的

07:09.060 --> 07:12.060
你看DIV 然后接下来这边点Test

07:12.060 --> 07:14.180
ConnerRaid

07:14.180 --> 07:17.660
看到没有 我是给这个DIV设置的

07:17.660 --> 07:18.740
给DIV设置之后

07:18.740 --> 07:20.940
然后接下来我这个Conner这个属性

07:20.940 --> 07:22.660
它是可以继承的

07:22.660 --> 07:23.980
它是可以继承的

07:23.980 --> 07:24.900
可以继承的话

07:24.900 --> 07:26.580
让我这边我追踪我这个P

07:26.580 --> 07:28.100
它也会显示为什么

07:28.100 --> 07:31.060
所以也会显示为红色 对不对

07:31.060 --> 07:32.820
这些都很简单

07:32.820 --> 07:34.780
我这都懒得试了

07:34.860 --> 07:39.310
比如说我们这边的话DIV

07:39.310 --> 07:42.910
DIVConnerRaid

07:42.910 --> 07:45.150
最终这个P设置也应该是红色

07:46.670 --> 07:48.150
说心 对不对

07:48.150 --> 07:49.150
也应该是红色

07:49.830 --> 07:53.470
好 接下来如果继承都拿不到

07:53.470 --> 07:56.430
如果你没有写这个作者样式

07:56.430 --> 07:58.110
我继承的话我也拿不到

07:58.110 --> 07:58.750
就是这个属性

07:58.750 --> 08:00.350
它有些它是没办法继承的

08:00.350 --> 08:01.870
CSS里面有些属性

08:01.870 --> 08:03.030
它是没办法继承的

08:03.030 --> 08:04.750
好 那这个时候就干嘛呢

08:04.750 --> 08:06.550
这个时候最终就使用

08:06.670 --> 08:09.150
浏览器的默认样式

08:10.310 --> 08:11.150
明白没

08:11.150 --> 08:13.750
所以它整个流程是这个样子的

08:13.750 --> 08:15.710
先确定声明值

08:15.710 --> 08:16.910
确定了声明值之后

08:16.910 --> 08:17.750
然后接下来

08:17.750 --> 08:20.310
看你这个有没有成叠冲突

08:20.310 --> 08:22.630
如果有冲突我解决一下冲突

08:22.630 --> 08:23.630
解决冲突之后

08:23.630 --> 08:25.870
再将我使用你的声明值

08:25.870 --> 08:27.270
如果你没有成叠冲突

08:27.270 --> 08:28.790
但是你也没有这个声明值

08:28.790 --> 08:30.150
你要不然就没有做这个声明值

08:30.150 --> 08:31.470
让我看这个属性值

08:31.470 --> 08:33.590
能不能继承得到

08:33.590 --> 08:34.870
如果能够继承得到

08:34.870 --> 08:37.430
让我使用继承下来的属性值

08:37.430 --> 08:38.550
如果不能够继承的话

08:38.550 --> 08:40.190
那最终我才使用什么呢

08:40.190 --> 08:43.350
最终我才使用默认值

08:43.350 --> 08:44.270
明白没有

08:44.270 --> 08:46.710
所以说回到这道面试题

08:46.710 --> 08:48.270
请减速一下

08:48.270 --> 08:51.950
CCS中属性的计算过程是什么样子的

08:51.950 --> 08:53.870
那是不是就是这四个步骤

08:53.870 --> 08:54.590
对不对

08:54.590 --> 08:55.710
你把这四个步骤

08:55.710 --> 08:59.630
你按照按照把它达出来就可以了

08:59.630 --> 09:00.430
好吧

09:00.430 --> 09:03.190
好 这期课就先到这里

09:03.230 --> 09:05.790
讲了一下关于这个属性的计算过程

09:05.790 --> 09:09.870
下去自己把这部分看一看

09:09.870 --> 09:10.870
再见

