WEBVTT

00:00.000 --> 00:04.000
这一颗很简单,我们来聊一道面试题就可以了

00:04.000 --> 00:09.000
这道面试题问的是npm模块的安装机制是什么

00:09.000 --> 00:15.000
注意,它问的是安装机制,它问的不是查找机制

00:15.000 --> 00:22.000
什么叫查找机制呢?就好比说我们在代码里边写一个require或者是import都行

00:22.000 --> 00:25.000
有时候我们这里require一个gequire

00:25.000 --> 00:30.000
查找机制是不是要从loaded module去找,对不对

00:30.000 --> 00:37.000
这是查找机制,查找机制不是这道题所问的,这道题问的是安装机制

00:37.000 --> 00:41.000
什么叫安装机制呢?就是我们使用npm去install

00:41.000 --> 00:45.000
安装一个模块的时候,它到底是怎么安装的

00:45.000 --> 00:50.000
这里其实这个题也很简单,你只要知道了,就非常容易回答出来

00:50.000 --> 00:59.000
它是这样,npm它会为了加快安装的速度,它其实是做了一些处理的

00:59.000 --> 01:06.000
它首先会检查一下本地的loaded module里面是否已经安装过模块了

01:06.000 --> 01:09.000
如果说已经安装过了,它就不会再重新安装

01:09.000 --> 01:15.000
如果说没有安装过,它还会去检查一下缓存中的是否有相同的模块

01:15.000 --> 01:21.000
如果说有的话,直接从缓存里面读取,就不会从仓库下载了

01:21.000 --> 01:27.000
如果说本地和缓存里面都不存在,那么npm将会从registry

01:27.000 --> 01:32.000
我们做了淘宝镜像的,那么从淘宝镜像里面直接下载安装包

01:32.000 --> 01:36.000
然后写入到本地的loaded module里面,然后缓存起来

01:36.000 --> 01:38.000
就这三步,给它演示一下吧

01:38.000 --> 01:48.000
比方说我们这里有一个文件夹,然后来一个npmi

01:48.000 --> 01:53.000
给它出示化一下,接下来我们来安装一个接query吧

01:53.000 --> 02:01.570
好,第一次假设,第一次没有缓存,本地也没有

02:01.570 --> 02:05.570
于是从网络上下载下来,然后进行安装

02:05.570 --> 02:08.570
安装了之后,它就会写入到loaded module里面

02:08.570 --> 02:14.570
你看这里是不是有接query,然后同时进行缓存

02:14.570 --> 02:18.570
那么下一次安装的时候,比方说我现在把网断了

02:18.570 --> 02:22.570
断了网之后,我们再重新安装这个接query

02:22.570 --> 02:26.570
我们来安装一下,接query,你会发现它仍然可以安装成功

02:26.570 --> 02:30.570
为什么呢,因为它发现本地就有这个接query

02:30.570 --> 02:32.570
所以说它不需要再重新安装了

02:32.570 --> 02:36.570
懂得意思吗,所以说它没有通过网络去下载

02:36.570 --> 02:40.570
那如果说本地它也没有这个接query呢

02:40.570 --> 02:43.570
那是不是必须要从网络下载呢,也不一定

02:43.570 --> 02:46.570
比方说我们现在再安装接query

02:46.570 --> 02:49.570
你会发现它仍然能够安装成功,为什么呢

02:49.570 --> 02:53.570
因为它有缓存,它会有一个缓存目录

02:53.570 --> 02:55.570
它把它缓存,它把它缓存起来了

02:55.570 --> 02:58.570
因此它从缓存里面直接读去

02:58.570 --> 03:02.570
这样子都是为了加快安装的速度

03:02.570 --> 03:04.570
好,就是这道题的回答

03:04.570 --> 03:08.570
那么这里我顺便再说一下吧,关于这个缓存

03:08.570 --> 03:14.570
缓存我们平时用的话,不太会用到缓存

03:14.570 --> 03:18.570
但是我们有可能一些比较少的情况下

03:18.570 --> 03:21.570
可能我们会关心一下缓存的一些相关的命令

03:21.570 --> 03:23.570
这里我就介绍三个命令

03:23.570 --> 03:25.570
一个是清除缓存

03:25.570 --> 03:29.570
通过这个命令,MPM catch,clean,清除

03:29.570 --> 03:33.570
Hunger F表示Force,表示强制清除

03:33.570 --> 03:37.570
强制清除缓存,就相当于是把缓存那个文件夹

03:37.570 --> 03:39.570
给它里面的东西全部删掉

03:39.570 --> 03:41.570
那么这样子删掉缓存之后

03:41.570 --> 03:45.570
就可以保证下一次安装一定是从网络上去下载

03:45.570 --> 03:48.570
以后你们再用MPM安装的时候

03:48.570 --> 03:50.570
如果说发现一些莫名其妙的错误

03:50.570 --> 03:54.570
你们可以先尝试着把缓存清除一下

03:54.570 --> 03:56.570
把本地的loaded modules删除掉

03:56.570 --> 03:58.570
然后再把缓存清除一下

03:58.570 --> 04:01.570
再重新安装,很多时候可以解决问题的

04:01.570 --> 04:05.570
比方说现在,我们把本地的loaded modules删除掉

04:05.570 --> 04:12.200
然后我们再清除缓存,MPM catch,clean,Hunger F

04:12.200 --> 04:17.150
现在仍然是断网的状态

04:17.150 --> 04:21.720
缓存已经删除了,然后我们现在再安装借宽

04:21.720 --> 04:23.720
你会发现现在安装不了了

04:23.720 --> 04:26.720
为什么?因为没有缓存,它需要从网络上下载

04:26.720 --> 04:28.720
但是网络连接不上,你看这里

04:29.720 --> 04:31.720
那么现在我把网络打开

04:31.720 --> 04:37.290
比如说现在安装的话,它就必须要从网络下载

04:37.290 --> 04:45.290
一般情况下,这种命令是用于解决一些莫名其妙的错误

04:45.290 --> 04:48.290
其他的两个命令就用的更少了

04:48.290 --> 04:51.290
一个是获取缓存的位置

04:51.290 --> 04:53.290
通过这个命令,复制一下吧

04:53.290 --> 04:57.290
通过这个命令,可以看到你的缓存在哪个目录里面

04:57.290 --> 04:59.290
我这边是在这个目录里面

04:59.290 --> 05:00.290
你们可以试一下

05:00.290 --> 05:03.290
通过下面这个命令,可以修改缓存的位置

05:03.290 --> 05:06.290
我基本上没有这么用过

05:06.290 --> 05:08.290
这就是跟缓存相关的事情

05:08.290 --> 05:10.290
其他都没啥了,这很简单

05:10.290 --> 05:12.290
就把这个面试题给大家回答一下

