WEBVTT

00:00.750 --> 00:03.270
好 再说一下这个ESLint

00:03.270 --> 00:07.430
这个ESLint它不会出面是题

00:07.430 --> 00:11.430
对你们开发影响也不是很大

00:11.430 --> 00:14.190
但是如果说你完全不知道的话

00:14.190 --> 00:16.470
那就有点说不过去了

00:16.470 --> 00:20.070
比方说有一个你以后的公司里面去

00:20.070 --> 00:24.150
突然有一天你的写代码爆错了

00:24.150 --> 00:27.070
那个代码你看了半天你没有发现什么错误

00:27.070 --> 00:28.870
但它实际上就是爆错了

00:29.030 --> 00:31.270
然后你去询问你的同事

00:31.270 --> 00:32.670
或者是询问你的领导

00:32.670 --> 00:35.910
领导告诉你你这个是代码风格没有检查通过

00:35.910 --> 00:37.710
ESLint没有检查通过

00:37.710 --> 00:39.270
那么这是一个什么情况呢

00:39.270 --> 00:40.870
你说你ESLint是啥

00:40.870 --> 00:42.470
你这个问题就不要问了

00:42.470 --> 00:44.230
我主要是来解决这个问题的

00:44.230 --> 00:46.230
不要出去闹这个笑话

00:46.230 --> 00:48.190
那么这个ESLint到底是啥呢

00:48.190 --> 00:50.990
这里首先给大家说一下它的由来

00:50.990 --> 00:55.030
因为我们编写的前端代码主要是GS

00:55.030 --> 00:56.750
当然CSS也比较多

00:56.750 --> 00:58.110
ATM是最少的

00:58.310 --> 00:59.670
最多的就是GS

00:59.670 --> 01:03.310
GS这个语言它本身是一个非常非常灵活的语言

01:03.310 --> 01:06.710
由于它的灵活性就会导致很多问题

01:06.710 --> 01:08.510
怎么问题呢主要是两个方面

01:08.510 --> 01:10.510
一个是代码质量的问题

01:10.510 --> 01:14.150
比方说你在代码里边我们平时老师

01:14.150 --> 01:18.390
给大家说的应该尽量的使用什么严格相等

01:18.390 --> 01:20.030
不要使用这个两个等号

01:20.030 --> 01:22.390
应该尽量使用三个等号

01:22.390 --> 01:26.310
像这些都是属于代码质量的范畴

01:26.310 --> 01:27.870
就是如果说你使用两个等号

01:27.870 --> 01:29.670
行不行有的说也行

01:29.670 --> 01:33.870
只剩下容易出现一些你意想不到的问题

01:33.870 --> 01:35.470
像这些情况

01:35.470 --> 01:36.670
就是代码质量

01:36.670 --> 01:38.470
另外一些另外一个情况

01:38.470 --> 01:41.270
就是我企业里边这么多员工

01:41.270 --> 01:43.670
对吧我怎么让这些开发者

01:43.670 --> 01:46.190
输写代码风格的保持一致

01:46.190 --> 01:48.670
因为GS他由于太过灵活了

01:48.670 --> 01:51.270
有些同学喜欢加分号

01:51.270 --> 01:52.670
一句话后边喜欢加分号

01:52.670 --> 01:54.870
有些同学又不喜欢加

01:54.870 --> 01:56.870
像这些问题如何来保存统一

01:56.870 --> 01:58.270
当我们代码的阅读起来

01:58.270 --> 02:00.470
就好像是一个人编写的

02:00.470 --> 02:01.670
那么比方说这个

02:01.670 --> 02:03.870
只不错有的人喜欢的用双引号

02:03.870 --> 02:05.670
有的人喜欢用单引号

02:05.670 --> 02:07.870
那这些都是一些问题

02:07.870 --> 02:10.270
那么这个问题怎么解决呢

02:10.270 --> 02:12.270
就这个问题代表的两方面

02:12.270 --> 02:13.470
一个是代码的质量

02:13.470 --> 02:15.470
一个是代码的风格

02:15.470 --> 02:19.270
如果说我们全部依靠人工来进行检查的话

02:19.270 --> 02:21.270
那么可以想象的了

02:21.270 --> 02:22.670
不仅费时费利

02:22.670 --> 02:24.870
还特别容易检查漏了

02:24.870 --> 02:26.870
检查粗粗

02:26.870 --> 02:28.870
所以说我们需要一个工具

02:28.870 --> 02:30.870
这个工具能够自动的

02:30.870 --> 02:31.870
帮我们进行检查

02:31.870 --> 02:33.870
这个工具就是ESLint

02:33.870 --> 02:35.870
实际上把概念给他说一下

02:35.870 --> 02:37.870
然后这里有两个网站

02:37.870 --> 02:39.870
一个是ESLint的官网

02:39.870 --> 02:40.870
一个是民间中文网

02:40.870 --> 02:42.870
官网的话全是英文

02:42.870 --> 02:43.870
你们可以自己看一下

02:43.870 --> 02:44.870
这个民间中文网

02:44.870 --> 02:46.870
有兴趣的话可以去看一下

02:46.870 --> 02:47.870
没兴趣的话也无所谓

02:47.870 --> 02:48.870
因为这个网要对你们开发

02:48.870 --> 02:50.870
其实影响不大

02:50.870 --> 02:51.870
一会我会说

02:51.870 --> 02:52.870
这个学乐之后

02:52.870 --> 02:53.870
你们对你们以后开发

02:53.870 --> 02:55.870
有什么样的影响

02:55.870 --> 02:56.870
其实影响非常细微

02:56.870 --> 02:57.870
因为很多事

02:57.870 --> 02:59.870
你刚刚出去工作

02:59.870 --> 03:01.870
很多事不是由你来做的

03:01.870 --> 03:03.870
一般是由你的领导来做的

03:03.870 --> 03:04.870
好ESLint它是一个工具

03:04.870 --> 03:06.870
它是做怎么来做呢

03:06.870 --> 03:08.870
它首先要配置好各种规则

03:08.870 --> 03:10.870
一开始就要配置好

03:10.870 --> 03:12.870
做项目之前就要配置好

03:12.870 --> 03:13.870
那么通过这些规则

03:13.870 --> 03:15.870
来自动的检验你的代码

03:15.870 --> 03:16.870
甚至自动修复

03:16.870 --> 03:18.870
不过它能自动修复的地方

03:18.870 --> 03:19.870
其实不多

03:19.870 --> 03:20.870
主要是检查

03:20.870 --> 03:22.870
比方说我下面一张图

03:22.870 --> 03:24.870
这里一个ESLint它就是一个工具

03:24.870 --> 03:26.870
一开始给它配置一些规则

03:26.870 --> 03:27.870
比方说其中一个规则就是

03:27.870 --> 03:29.870
你必须要使用严格项等

03:29.870 --> 03:30.870
你不能使用两个等号

03:30.870 --> 03:32.870
你使用的两个等号就检查通不过

03:32.870 --> 03:35.870
那这里呢比方说有两段代码

03:35.870 --> 03:37.870
你一开始提交代码的时候

03:37.870 --> 03:38.870
里边的代码写完了

03:38.870 --> 03:40.870
写完了过后呢你想提交

03:40.870 --> 03:42.870
一提交的时候都不用人去检查

03:42.870 --> 03:43.870
只有工具给你检查了

03:43.870 --> 03:45.870
一检查发现不行

03:45.870 --> 03:46.870
通不过

03:46.870 --> 03:47.870
为什么呢

03:47.870 --> 03:48.870
因为这里指数用了两个等号

03:48.870 --> 03:50.870
没有用三个等号

03:50.870 --> 03:51.870
那一把代码改了之后

03:51.870 --> 03:53.870
改成三个等号之后呢就通过了

03:53.870 --> 03:54.870
就这么简单

03:54.870 --> 03:56.870
当然它规则有很多很多

03:56.870 --> 03:58.870
不是只有一个

03:58.870 --> 04:00.870
来我们来看一下ESLint的基本使用

04:00.870 --> 04:02.870
我们简单的了解一下它的基本使用

04:02.870 --> 04:04.870
你熟悉一下这个概念就行了

04:04.870 --> 04:05.870
像这些事啊

04:05.870 --> 04:07.870
以后到公司里边

04:07.870 --> 04:09.870
一开始都会有人帮你做好

04:09.870 --> 04:10.870
就像技术领导啊

04:10.870 --> 04:12.870
就是打工程的时候就会帮你打好

04:12.870 --> 04:13.870
所以你之后呢

04:13.870 --> 04:14.870
只需要你写代码就行了

04:14.870 --> 04:15.870
你写代码码的时候

04:15.870 --> 04:17.870
有些时候抱错了

04:17.870 --> 04:18.870
你要知道

04:18.870 --> 04:19.870
原来是一个ESLint的错误

04:19.870 --> 04:21.870
你要知道如何去解决它

04:21.870 --> 04:22.870
就可以了

04:22.870 --> 04:24.870
但是我这里会带大家简单的做一下

04:24.870 --> 04:26.870
因为它功能特别特别多

04:26.870 --> 04:28.870
我这里简单带大家多做一下

04:28.870 --> 04:30.870
首先呢你要安装这个ESLint

04:30.870 --> 04:31.870
比如说我在这里呢

04:31.870 --> 04:33.870
去新建一个文件夹

04:33.870 --> 04:37.870
我给它写个名字叫做ESLint Basic

04:37.870 --> 04:39.870
一些基本的使用

04:39.870 --> 04:43.700
OK 我在通通通去打开它

04:43.700 --> 04:45.700
好 接下来我们在这里呢

04:45.700 --> 04:48.700
我们这里呢去安装一下这个ESLint

04:48.700 --> 04:49.700
复制

04:49.700 --> 04:50.700
好 暂天过来

04:52.700 --> 04:53.700
安装一下

04:53.700 --> 04:54.700
当然我因为我这里

04:54.700 --> 04:55.700
因为这个ESLint

04:55.700 --> 04:57.700
它最终它跟我们运行代码

04:57.700 --> 04:58.700
没有什么关系

04:58.700 --> 04:59.700
它只是来检查代码的

04:59.700 --> 05:01.700
所以说我这里是开发一带

05:01.700 --> 05:03.700
只有开发阶段我才会使用它

05:03.700 --> 05:04.700
对吧 之后开发完成的话

05:04.700 --> 05:05.700
就没有什么关系了

05:05.700 --> 05:07.700
所以说我这里有开发一带

05:07.700 --> 05:09.700
好 安装完成了

05:09.700 --> 05:10.700
安装完成了之后呢

05:10.700 --> 05:12.700
我们在这里的新建一个目录吧

05:12.700 --> 05:13.700
SRC

05:13.700 --> 05:15.700
比如说我们把原代码

05:15.700 --> 05:16.700
全部写到这个目录里边

05:16.700 --> 05:19.700
比如说这里有一个index.js

05:19.700 --> 05:20.700
好 OK

05:20.700 --> 05:22.700
我在这里边随便写一行代码吧

05:22.700 --> 05:23.700
写一行

05:23.700 --> 05:25.700
比如说我订了一个辨量A

05:25.700 --> 05:28.700
然后我判断了一下EF

05:28.700 --> 05:29.700
A是不是等于EA

05:29.700 --> 05:30.700
我这里使用了两个等号

05:30.700 --> 05:32.700
那看看它能不能检查呢

05:32.700 --> 05:35.700
接下来如何来检查

05:35.700 --> 05:37.700
使用一个命令

05:37.700 --> 05:38.700
NPS

05:38.700 --> 05:40.700
因为它提供了一个命令工具

05:40.700 --> 05:41.700
NPS运行这个命令

05:41.700 --> 05:43.700
命令的名字叫做ESLint

05:43.700 --> 05:45.700
后面跟上一个文件名

05:45.700 --> 05:46.700
就检查单个文件

05:46.700 --> 05:47.700
那怎么来写呢

05:47.700 --> 05:49.700
NPS ESLint

05:49.700 --> 05:51.700
检查哪个文件呢

05:51.700 --> 05:53.700
SRC下边的index.js

05:53.700 --> 05:54.700
好又回车

05:54.700 --> 05:56.700
它就会帮我们检查这个文件

05:56.700 --> 05:58.700
看一下有没有通过啊

05:58.700 --> 06:00.700
那么这个时候检查的时候

06:00.700 --> 06:01.700
它告诉你

06:01.700 --> 06:03.700
OPS

06:03.700 --> 06:05.700
这里有一些东西出了问题

06:05.700 --> 06:07.700
倒是不是说

06:07.700 --> 06:09.700
两个等号出了问题

06:09.700 --> 06:10.700
什么出了问题呢

06:10.700 --> 06:11.700
它告诉你

06:11.700 --> 06:12.700
它没有配置文件

06:12.700 --> 06:13.700
因为我们刚才怎么说的

06:13.700 --> 06:15.700
它是不是需要一些规则

06:15.700 --> 06:16.700
对吧

06:16.700 --> 06:18.700
那么这里有没有告诉它规则

06:18.700 --> 06:20.700
它并没有告诉它规则

06:20.700 --> 06:22.700
所以它不知道用什么样的规则来检查文件

06:22.700 --> 06:25.700
但是检查的话就用这个命令

06:25.700 --> 06:27.700
当然我们也可以使用这个命令

06:27.700 --> 06:29.700
检查一个目录下边的所有文件

06:29.700 --> 06:31.700
比方说我们可以使用

06:31.700 --> 06:33.700
NPS ESLint

06:33.700 --> 06:37.700
然后检查SRC下边的所有文件

06:37.700 --> 06:39.700
当然它也会告诉你这个

06:39.700 --> 06:40.700
问题

06:40.700 --> 06:41.700
没有配置文件

06:41.700 --> 06:43.700
这是关于如何来检查

06:43.700 --> 06:45.700
后来我们有了配置文件之后

06:45.700 --> 06:46.700
我们就会使用这个命令

06:46.700 --> 06:47.700
来对它进行检查

06:47.700 --> 06:49.700
当然你也可以把它写到哪呢

06:49.700 --> 06:51.700
写到拍给你点节省里面

06:51.700 --> 06:52.700
对吧

06:52.700 --> 06:53.700
之前没有出事的话

06:53.700 --> 06:54.700
这个拍给你点节省

06:54.700 --> 06:56.700
没关系我就在这里写一个script

06:56.700 --> 06:57.700
好

06:57.700 --> 07:00.700
然后我们在这里写那个Lint吧

07:00.700 --> 07:01.700
运行什么命令呢

07:01.700 --> 07:03.700
运行ESLint

07:03.700 --> 07:05.700
然后SRC下边的所有东西

07:05.700 --> 07:07.700
这样子我们就可以使用

07:07.700 --> 07:09.700
NPMROINLint

07:09.700 --> 07:11.700
来进行检查

07:11.700 --> 07:12.700
对吧

07:12.700 --> 07:13.700
这个问题

07:13.700 --> 07:14.700
现在没有配置文件

07:14.700 --> 07:15.700
那么接下来我们来

07:15.700 --> 07:18.700
配置文件中写一些规则

07:18.700 --> 07:20.700
那怎么来写配置文件呢

07:20.700 --> 07:22.700
ESLint它会支持三种格式的文件

07:22.700 --> 07:24.700
一种是节省格式

07:24.700 --> 07:25.700
一种是GS格式

07:25.700 --> 07:28.700
一种是压抹格式

07:28.700 --> 07:29.700
这个压抹格式的同学们

07:29.700 --> 07:30.700
可能没见过

07:30.700 --> 07:32.700
它的格式是这样子的

07:32.700 --> 07:33.700
大概说一下就行了

07:33.700 --> 07:35.700
比方说我们的节省格式

07:35.700 --> 07:36.700
比方一个对象

07:36.700 --> 07:37.700
节省格式是这样子的

07:37.700 --> 07:39.700
比方A等于1

07:39.700 --> 07:41.700
B等于2

07:41.700 --> 07:43.700
压抹格式它是这样子写的

07:43.700 --> 07:47.460
它是A

07:47.460 --> 07:49.460
我们这里这样吧

07:49.460 --> 07:53.460
这里写一个OB界

07:53.460 --> 07:55.460
OB界

07:55.460 --> 07:57.460
然后这里是一个对象

07:57.460 --> 07:59.460
我们写个千套格式的

07:59.460 --> 08:05.620
A等于1

08:05.620 --> 08:07.620
然后B

08:07.620 --> 08:08.620
然后2

08:08.620 --> 08:10.620
压抹格式它是这样子写的

08:10.620 --> 08:11.620
OB界

08:11.620 --> 08:12.620
帽号

08:12.620 --> 08:13.620
回车

08:13.620 --> 08:15.620
用一个Type键

08:15.620 --> 08:17.620
字表符说进一下

08:17.620 --> 08:19.620
然后直接写A等于1

08:19.620 --> 08:21.620
B等于2

08:21.620 --> 08:23.620
这是压抹格式

08:23.620 --> 08:24.620
就是一种特殊的格式

08:24.620 --> 08:25.620
但是结构的是一样的

08:25.620 --> 08:27.620
就看你自己用哪种格式

08:27.620 --> 08:29.620
我们这里就选择用GS格式

08:29.620 --> 08:31.620
GS格式就是用这种方式

08:31.620 --> 08:33.620
Modulator Export

08:33.620 --> 08:35.620
导出一个对象

08:35.620 --> 08:37.620
对象里面一个属性叫Rules

08:37.620 --> 08:39.620
对象里面其实有很多配置

08:39.620 --> 08:40.620
我们简单的说一下

08:40.620 --> 08:43.620
这里我们现在就用其中一个配置叫Rules

08:43.620 --> 08:44.620
叫做规则

08:44.620 --> 08:46.620
规则里面又是个对象

08:46.620 --> 08:47.620
里面就写很多规则

08:47.620 --> 08:48.620
第一个规则

08:48.620 --> 08:49.620
第二个规则

08:49.620 --> 08:51.620
咱们来写一下

08:51.620 --> 08:54.620
在这个项目的根部录下边

08:54.620 --> 08:56.620
新建一个文件

08:56.620 --> 08:58.620
点开头

08:58.620 --> 09:00.620
ESLintRC

09:00.620 --> 09:02.620
点GS

09:02.620 --> 09:05.620
这个就是一个ESLint的配置文件

09:05.620 --> 09:08.620
我们在这里写上一个Modulator Export

09:08.620 --> 09:09.620
导出一个对象

09:09.620 --> 09:12.620
对象里面一个属性叫Rules

09:12.620 --> 09:14.620
Rules又是个对象

09:14.620 --> 09:16.620
这就是一个ESLint的配置

09:16.620 --> 09:17.620
那么配置里面

09:17.620 --> 09:19.620
它要写很多的规则

09:19.620 --> 09:20.620
那么每一个规则

09:20.620 --> 09:23.620
它是一个规则的名字和一个级别

09:23.620 --> 09:24.620
这个名字是什么意思呢

09:24.620 --> 09:26.620
名字就决定了你要检查啥

09:26.620 --> 09:28.620
比如你要检查等号

09:28.620 --> 09:29.620
你要检查一个辨量的声明

09:29.620 --> 09:30.620
等等的

09:30.620 --> 09:32.620
你要检查什么东西

09:32.620 --> 09:34.620
级别是什么呢

09:34.620 --> 09:36.620
所有的规则在这

09:36.620 --> 09:37.620
它规则有很多

09:37.620 --> 09:39.620
这是官方的文纳

09:39.620 --> 09:40.620
这是中文文纳

09:40.620 --> 09:42.620
你可以看一下

09:42.620 --> 09:44.620
规则非常非常多

09:44.620 --> 09:45.620
特别特别多

09:45.620 --> 09:47.620
而且你还可以制定一规则

09:47.620 --> 09:48.620
它没有这个规则

09:48.620 --> 09:49.620
你可以新建的规则

09:49.620 --> 09:50.620
用一个函数来写

09:50.620 --> 09:53.620
那么你就必须要了解ESLintRC的原理了

09:53.620 --> 09:55.620
这一块我们就不去考虑它了

09:55.620 --> 09:58.620
那么我们再看级别是什么呢

09:58.620 --> 10:00.620
级别就表示

10:00.620 --> 10:01.620
它就只有三种曲子

10:01.620 --> 10:05.620
0,1,2或者是off, on, error

10:05.620 --> 10:08.620
表示如果说验证通不过怎么办

10:08.620 --> 10:10.620
0的话就表示关闭规则

10:10.620 --> 10:12.620
就是你不检查了

10:12.620 --> 10:13.620
1的话就表示的是

10:13.620 --> 10:15.620
如果说验证通不过就报警告

10:15.620 --> 10:17.620
error表示验证不通过的话

10:17.620 --> 10:19.620
就报戳退出程序

10:19.620 --> 10:21.620
它就比较严重的了

10:21.620 --> 10:22.620
它是一个级别

10:22.620 --> 10:23.620
好,咱们来看一下

10:23.620 --> 10:24.620
比方说

10:24.620 --> 10:26.620
我们这里来去找一个规则吧

10:26.620 --> 10:28.620
随便找一个规则

10:28.620 --> 10:31.620
这里边我们去找这个

10:31.620 --> 10:33.620
EQ,EQ,EQ

10:33.620 --> 10:35.620
这就是跟等号相关的

10:35.620 --> 10:38.620
我们可以点进去看一下规则的详细描述

10:38.620 --> 10:39.620
然后它告诉你呢

10:39.620 --> 10:40.620
什么意思呢

10:40.620 --> 10:43.620
就是说如果说

10:43.620 --> 10:46.620
要求就是你使用比较的时候

10:46.620 --> 10:49.620
应该使用严格相等和严格不相等

10:49.620 --> 10:50.620
你不能使用两个

10:50.620 --> 10:51.620
比方说它现在

10:51.620 --> 10:53.620
如果说你开启的这个规则之后

10:53.620 --> 10:55.620
这个东西就会爆出错误

10:55.620 --> 10:57.620
这个玩意就会爆出错误

10:57.620 --> 11:00.620
包括这个东西都会爆出错误

11:00.620 --> 11:02.620
好,那咱们来看一下

11:02.620 --> 11:04.620
那比方说我们在这里就可以写上

11:04.620 --> 11:05.620
属性名是什么呢

11:05.620 --> 11:07.620
EQ,EQ,EQ

11:07.620 --> 11:08.620
那么级别呢

11:08.620 --> 11:09.620
那就会看你

11:09.620 --> 11:10.620
如果说碰不过的时候

11:10.620 --> 11:12.620
你希望爆错还是爆警告

11:12.620 --> 11:14.620
那我比方说我认为这个问题比较严重

11:14.620 --> 11:16.620
我就可以让它爆警告

11:16.620 --> 11:17.620
那么你可以写个2

11:17.620 --> 11:19.620
也可以写个error都可以

11:19.620 --> 11:20.620
一样的效果

11:20.620 --> 11:21.620
好,保存

11:21.620 --> 11:22.620
保存之后呢

11:22.620 --> 11:23.620
我们再看

11:23.620 --> 11:24.620
你看这里

11:24.620 --> 11:25.620
我们再去验证

11:25.620 --> 11:26.620
怎么验证呢

11:26.620 --> 11:28.620
是不是通过npmronglink

11:28.620 --> 11:30.620
来进行验证

11:30.620 --> 11:31.620
验证的时候

11:31.620 --> 11:32.620
就有一个error了

11:32.620 --> 11:34.620
但如果说你前面是警告的话

11:34.620 --> 11:35.620
那么这里就是一个警告

11:35.620 --> 11:37.620
他告诉你这个代码里边

11:37.620 --> 11:38.620
有一个错误

11:38.620 --> 11:40.620
那么这里就是错误消息

11:40.620 --> 11:42.620
他希望的是3个等号

11:42.620 --> 11:43.620
但是呢

11:43.620 --> 11:44.620
你给我的是

11:44.620 --> 11:46.620
他看到的是2个等号

11:46.620 --> 11:48.620
后边是规则的名字

11:48.620 --> 11:49.620
规则就是这个名字

11:49.620 --> 11:51.620
然后上面是代码的位置

11:51.620 --> 11:52.620
你可以按住ctrl

11:52.620 --> 11:53.620
点一下

11:53.620 --> 11:54.620
就可以定位到代码了

11:54.620 --> 11:56.620
代码的位置

11:56.620 --> 11:58.620
要定位对

11:59.620 --> 12:00.620
这个定位

12:00.620 --> 12:01.620
其实是第三行

12:01.620 --> 12:03.620
第三行第七个制服

12:03.620 --> 12:04.620
应该在这

12:04.620 --> 12:05.620
他的定位啊

12:06.620 --> 12:07.620
不管他吧

12:07.620 --> 12:09.620
好,那么这里就是

12:09.620 --> 12:11.620
他的验证

12:11.620 --> 12:13.620
好,那么其实这里面

12:13.620 --> 12:14.620
有很多很多的规则

12:14.620 --> 12:15.620
同学们有兴趣的话

12:15.620 --> 12:16.620
可以看一下

12:16.620 --> 12:17.620
没兴趣的话算了

12:17.620 --> 12:18.620
这里边呢

12:18.620 --> 12:19.620
这里有个问题

12:19.620 --> 12:20.620
如果说

12:20.620 --> 12:21.620
每一次我都写

12:21.620 --> 12:22.620
我写了代码之后

12:22.620 --> 12:23.620
都要用这种方式

12:23.620 --> 12:24.620
去验证的话

12:24.620 --> 12:25.620
太麻烦了

12:25.620 --> 12:26.620
对吧

12:26.620 --> 12:27.620
能不能立即看到

12:27.620 --> 12:28.620
这个错误呢

12:28.620 --> 12:29.620
其实同学们看到这

12:29.620 --> 12:30.620
是不是已经报了一个错误了

12:30.620 --> 12:31.620
而且你指着他

12:31.620 --> 12:32.620
你会发现

12:32.620 --> 12:33.620
他告诉你的

12:33.620 --> 12:35.620
其实你点这里

12:35.620 --> 12:36.620
按ctrl

12:36.620 --> 12:37.620
加上一个底

12:37.620 --> 12:38.620
大语符号

12:38.620 --> 12:39.620
ctrl加大语符号

12:39.620 --> 12:40.620
就是个底

12:40.620 --> 12:41.620
那么他就会告诉你

12:42.620 --> 12:43.620
这里有

12:43.620 --> 12:45.620
这里是有问题的

12:45.620 --> 12:47.620
然后他的建议是什么

12:47.620 --> 12:48.620
其实你指着他的时候

12:48.620 --> 12:49.620
他也会告诉你

12:50.620 --> 12:51.620
那么他会告诉你

12:51.620 --> 12:52.620
他期望看到的是

12:52.620 --> 12:53.620
三个等号

12:53.620 --> 12:54.620
但是你看到的是两个

12:54.620 --> 12:56.620
他是ES另测的错误

12:56.620 --> 12:58.620
后面告诉你

12:58.620 --> 12:59.620
他的规则名字叫

12:59.620 --> 13:01.300
qq eq

13:01.300 --> 13:02.300
等号

13:02.300 --> 13:03.300
eq相等的意思

13:03.300 --> 13:04.860
eq eq eq

13:04.860 --> 13:05.620
三个相等

13:05.620 --> 13:06.220
那么这是他

13:06.220 --> 13:06.920
规则的名字

13:08.200 --> 13:09.260
同学们如果跟我

13:09.260 --> 13:10.120
做的话

13:10.120 --> 13:10.620
你会发现

13:10.620 --> 13:11.620
这里你们看不见的

13:11.620 --> 13:13.500
看不见这个饼色的波浪的

13:13.500 --> 13:14.620
我这里анс

13:14.620 --> 13:15.620
看得见

13:15.620 --> 13:16.820
那么就是下一步

13:17.020 --> 13:17.700
我们希望

13:17.700 --> 13:18.700
在vsco 编写代码的时候

13:18.700 --> 13:19.900
能够及时的发现问题

13:19.900 --> 13:21.620
不要去运行命令

13:21.620 --> 13:22.620
那怎么做呢

13:22.620 --> 13:23.900
其实非常简单

13:23.900 --> 13:24.620
你只需要按针的

13:24.620 --> 13:25.860
插件就可以了

13:25.860 --> 13:28.420
這個插件的名字呢就叫做ESLint

13:30.380 --> 13:31.900
你把安裝就完事了

13:31.900 --> 13:33.700
啥也不用管,你安裝就完事了

13:33.700 --> 13:35.740
安裝完了之後啊它就會發現

13:36.260 --> 13:37.800
最好你重新打開一次工程吧

13:38.060 --> 13:41.640
它就會發現因為你這個工程裡面你是安裝了ESLint的

13:41.900 --> 13:43.940
它發現NoteMod就是裡面有ESLint

13:43.940 --> 13:45.740
那麼你在寫代碼的時候呢

13:45.980 --> 13:47.780
它就會自動的給你進行檢查

13:48.280 --> 13:50.860
當它發現有問題的時候你就不用去輸這個命令了

13:50.860 --> 13:52.380
你直接可以得到這個檢查結果了

13:52.900 --> 13:53.660
懂得意思嗎

13:53.920 --> 13:54.700
這就是

13:55.200 --> 13:57.260
安裝這個插件的好處

13:57.460 --> 14:01.140
當然如果說你是用全局安裝ESLint

14:01.660 --> 14:02.680
是用全局安裝的話

14:02.940 --> 14:04.720
那麼你這個項目裡面都可以不用安裝這個了

14:05.500 --> 14:06.780
都不用安裝ESLint了

14:07.020 --> 14:09.580
你可以直接配置好文件就可以了

14:09.840 --> 14:10.880
配置好文件然後呢

14:11.120 --> 14:12.400
它就可以自動幫你檢查

14:12.660 --> 14:13.680
但是全局安裝呢

14:13.940 --> 14:17.520
有一個版本的問題所以我們盡量建議大家局部安裝

14:18.540 --> 14:20.080
OK這是VSCode裡面去安裝

14:20.340 --> 14:22.140
然後現在我們再說一個

14:22.900 --> 14:25.980
情況就是ESLint它的規則由於它特別龐大

14:26.700 --> 14:27.980
規則特別特別多

14:28.500 --> 14:32.080
而且呢不僅是這些這些規則只是官方給你定義的規則

14:32.340 --> 14:34.380
其實我們還它的很強大的地方在於

14:34.640 --> 14:35.920
我們可以自定義規則

14:36.180 --> 14:37.700
可以做很多很多的自定義

14:38.220 --> 14:40.520
而我們需不需要自定義呢需要特別需要

14:40.780 --> 14:42.580
因為它官方的規則其實不夠用的

14:43.340 --> 14:44.880
那麼規則就變得更多

14:45.140 --> 14:47.180
那麼這就會導致了我們

14:47.440 --> 14:51.020
開發程序的時候光是定義規則都非常非常麻煩

14:51.280 --> 14:53.320
所以說我們一般情況下呢

14:53.580 --> 14:54.860
除了一些大廠

14:55.060 --> 14:58.140
在開發項目的時候它有這個成本

14:58.400 --> 15:01.460
能夠承受這個成本所以說它可以去自定義規則

15:01.720 --> 15:02.960
但是一般情況下呢

15:03.220 --> 15:04.020
中小型企業

15:04.280 --> 15:07.620
還有這個經濟去支取定義的這套非常複雜的規則

15:08.120 --> 15:09.660
所以說我們一般情況下使用的是

15:09.920 --> 15:11.460
別人已經定義好的規則

15:12.220 --> 15:15.500
那麼這些規則當中呢其中一方一個做的比較好的是一家

15:15.760 --> 15:17.600
名叫AirBnB的公司

15:17.860 --> 15:20.160
這家公司呢其實是做的一個

15:20.920 --> 15:22.960
短珠啊做什麼那個

15:23.260 --> 15:26.500
民宿啊這種方面的啊就是房屋出租的

15:27.020 --> 15:30.260
那麼這家公司它在開發一個錢開發一些前端項目的時候呢

15:30.500 --> 15:31.700
它也遇到了這些問題

15:31.960 --> 15:34.260
它使用的是ES另一套來進行檢查

15:34.520 --> 15:36.740
但檢查的時候呢它這些規則全部是自己

15:37.000 --> 15:38.460
自己寫的一套統一出來

15:38.720 --> 15:40.260
而且這套規則呢做的非常好

15:40.520 --> 15:41.960
而且它把它開源出來了

15:42.360 --> 15:45.460
因此呢別的企業都可以使用這套規則

15:46.200 --> 15:48.000
所以說我們將來呢在

15:48.260 --> 15:50.500
使用ES另一套的時候一般都是使用現成的

15:50.760 --> 15:52.260
其中比較有名的就是AirBnB

15:52.760 --> 15:55.260
那麼我們來試著用一下AirBnB

15:55.520 --> 15:56.960
我們先來新開一個

15:58.260 --> 15:58.760
文件

15:59.020 --> 15:59.560
文件夾

16:00.160 --> 16:02.560
給它取個名字叫做ESLint

16:03.260 --> 16:05.260
AirBnB

16:05.860 --> 16:06.760
來測試一下吧

16:07.060 --> 16:08.960
那麼我們這裡來這裡去安裝它

16:10.160 --> 16:11.360
首先還是初始化一下吧

16:11.660 --> 16:12.160
英里茲

16:12.660 --> 16:14.260
OK

16:14.860 --> 16:16.660
創建一個Packet接受文件

16:17.160 --> 16:18.560
好初始完了之後呢

16:18.760 --> 16:21.460
我們現在要去使用這個AirBnB

16:21.560 --> 16:24.160
那麼我們可以不需要安裝ESLint了

16:24.460 --> 16:25.660
因為你安裝它的時候呢

16:25.760 --> 16:27.360
其實就已經安裝了ESLint了

16:27.960 --> 16:30.160
而且最好就不要安裝ESLint了

16:30.260 --> 16:30.660
為什麼

16:30.760 --> 16:32.660
因為它跟那個ESLint的版本呢

16:33.260 --> 16:34.160
是有要求的

16:34.960 --> 16:37.060
萬一出現版本衝突就不好辦了

16:37.260 --> 16:38.760
所以說你直接安裝它就可以了

16:40.900 --> 16:41.600
但這些事情啊

16:41.700 --> 16:43.300
其實你們以後都不需要理在做的

16:45.570 --> 16:47.770
我們等待它安裝完成

16:48.670 --> 16:49.970
安裝完成了之後呢

16:50.070 --> 16:50.770
你要做的事情呢

16:50.870 --> 16:52.870
就是在配置文件裡面加上這麼一行帶

16:54.870 --> 16:57.870
叫做ESLint RC

16:59.070 --> 17:00.070
叫GS

17:00.670 --> 17:02.470
你只需要加上這麼一行帶碼就行了

17:02.570 --> 17:03.670
這行帶碼是什麼意思呢

17:03.770 --> 17:04.670
表示繼承

17:05.270 --> 17:06.170
繼承的意思

17:06.570 --> 17:07.670
就是我這一套規則呢

17:07.770 --> 17:08.670
我自己沒有規則

17:08.870 --> 17:10.470
當然我可不可以有規則可以

17:10.970 --> 17:13.070
我的規則主要繼承至AirBnB

17:13.470 --> 17:14.170
就可以了

17:14.570 --> 17:15.470
比方說我們在這裡呢

17:15.570 --> 17:17.770
去寫一個文件

17:18.770 --> 17:20.670
你會發現了它就已經開啟了驗證了

17:20.770 --> 17:22.570
比方說我們還是剛才的那套帶碼吧

17:23.370 --> 17:25.870
好這個時候你看它都給你抱錯了

17:25.970 --> 17:26.770
它說為什麼呢

17:26.970 --> 17:27.870
它說盡量

17:28.470 --> 17:30.770
它就是不應該使用話來定義

17:30.870 --> 17:32.770
應該使用net或者是const

17:33.370 --> 17:33.770
對吧

17:33.870 --> 17:35.170
當然你看不懂英文的話

17:35.270 --> 17:36.070
那怎麼辦呢

17:36.670 --> 17:37.470
看不懂英文

17:37.770 --> 17:38.870
你可以點擊這個

17:39.070 --> 17:40.270
這裡是個超鏈接

17:40.370 --> 17:41.570
它會點擊到這

17:41.670 --> 17:43.070
這裡也是英文的

17:43.870 --> 17:46.670
不過它會這裡面會有一些代碼的提示

17:46.770 --> 17:48.370
會告訴你爭取的代碼該怎麼寫

17:48.470 --> 17:49.770
那麼這個規則的名字叫Lowall

17:50.770 --> 17:52.670
那這裡的解釋比較容易看得懂

17:52.770 --> 17:54.870
因此把它換成const就行了

17:54.970 --> 17:56.070
好這裡又抱錯了

17:56.170 --> 17:56.470
對吧

17:56.570 --> 17:58.170
這些錯誤其實不是壞事

17:58.270 --> 17:59.970
我看網站上

18:00.370 --> 18:01.570
網上很多人都在說

18:01.670 --> 18:03.270
怎麼去關閉ES領子

18:03.370 --> 18:04.370
因為它不太繁

18:05.070 --> 18:06.470
但是有些時候錯誤

18:06.570 --> 18:08.470
特別是在團隊開發的時候

18:08.570 --> 18:09.970
及時給你發現錯誤

18:10.070 --> 18:11.170
並不是一件壞事

18:11.370 --> 18:12.570
你不要等到以後

18:13.070 --> 18:13.970
剛剛寫代碼的時候

18:14.070 --> 18:15.670
就發現這個地方有問題馬上更改

18:15.770 --> 18:16.070
對吧

18:16.170 --> 18:18.070
你等到以後再去處理這些錯誤

18:18.370 --> 18:18.970
那就

18:19.170 --> 18:20.070
更加麻煩了

18:20.170 --> 18:21.170
那這裡說的什麼呢

18:21.270 --> 18:23.470
他說A is assigned

18:23.570 --> 18:24.870
就是A已經被覆職了

18:24.970 --> 18:26.770
但是從來沒有使用過它

18:26.870 --> 18:28.970
那這裡這個A是不是沒有必要存在

18:29.070 --> 18:30.770
像這些東西都能檢查得到

18:30.870 --> 18:32.970
比方說我們這裡可以使用console load A

18:33.870 --> 18:34.870
是不是沒問題了

18:34.970 --> 18:36.170
那這裡又抱了一個警告

18:36.270 --> 18:37.170
它又告訴你說

18:38.170 --> 18:39.870
你不應該使用這個console

18:40.270 --> 18:42.170
你不應該使用這個console迷你

18:43.070 --> 18:43.670
為什麼呢

18:44.570 --> 18:45.070
為什麼呢

18:45.170 --> 18:46.870
因為有些它就會認為

18:46.970 --> 18:47.570
console這個迷你

18:47.570 --> 18:48.770
迷你的是在檔驗在控制台

18:48.870 --> 18:50.070
是在做一些測試的

18:50.370 --> 18:51.870
做一些測試的

18:52.870 --> 18:53.370
這裡呢

18:53.470 --> 18:54.670
因此它覺得這裡

18:54.970 --> 18:57.270
最好在最後最終代碼裡面

18:57.370 --> 18:58.570
就不應該有這個

18:58.970 --> 19:00.170
測試代碼存在

19:00.370 --> 19:00.870
但是一開始

19:00.970 --> 19:01.570
所以說它這裡呢

19:01.670 --> 19:02.670
它沒有那麼嚴格

19:02.770 --> 19:03.770
它給你報的是一個什麼

19:03.870 --> 19:05.370
報的是一個黃色的警告

19:05.470 --> 19:05.770
對吧

19:05.870 --> 19:06.670
你可以有

19:06.770 --> 19:07.970
那麼你測試完了過後

19:08.070 --> 19:09.170
你記得把它關一下

19:09.370 --> 19:10.170
把它刪一下

19:10.570 --> 19:11.270
懂得意思嗎

19:11.370 --> 19:12.270
那麼現在我們再來看

19:12.370 --> 19:14.170
A是不是等於A呢

19:14.970 --> 19:15.470
那麼這裡呢

19:15.570 --> 19:16.370
又抱了一些錯誤

19:16.570 --> 19:18.170
它告訴你必須要用三個等號

19:18.770 --> 19:20.270
用了三個等號之後呢

19:21.170 --> 19:23.070
它其實前面一些錯誤是一些代碼風格

19:23.170 --> 19:24.570
比方說衣服後邊

19:24.770 --> 19:25.970
應該有一個空格

19:26.170 --> 19:27.470
所以說這裡應該有一個空格

19:28.270 --> 19:28.570
然後呢

19:28.670 --> 19:30.570
這裡邊也應該左右兩邊

19:30.670 --> 19:31.370
應該有一個空格

19:31.470 --> 19:32.570
這是代碼風格的問題

19:34.170 --> 19:36.070
那麼這裡邊你要去做什麼事

19:36.170 --> 19:37.970
比方說你等A 乘以等於2

19:38.970 --> 19:39.770
兩次又抱錯了

19:39.870 --> 19:40.770
還要沒有空格

19:40.870 --> 19:44.070
其實你安裝Pretier的隔世化工具之後

19:44.170 --> 19:45.770
你保存它就會給你隔世化

19:45.870 --> 19:46.970
隔世化之後就有了

19:47.070 --> 19:47.470
對吧

19:48.570 --> 19:49.470
那麼這裡又抱錯了

19:49.570 --> 19:50.770
它告訴你A是一個廠量

19:50.870 --> 19:51.870
它不能更改

19:51.970 --> 19:53.670
是不是這些錯誤其實是好事

19:54.170 --> 19:55.170
它在不斷地提醒你

19:55.270 --> 19:57.370
你應該寫一個高質量的代碼

19:58.370 --> 19:59.570
好 那麼現在你沒有錯誤了

19:59.770 --> 20:00.770
懂得意思嗎

20:01.370 --> 20:03.670
ok 這就是使用Air BnB

20:04.170 --> 20:05.370
好 後邊我們再說一下

20:05.470 --> 20:06.570
在框架中如何使用

20:06.670 --> 20:07.570
比方說我們平時用的是

20:07.670 --> 20:09.770
VU開發Rx開發對吧

20:09.870 --> 20:11.670
那麼在框架裡面如何去使用它

20:11.770 --> 20:13.570
那麼這一塊大家更不用關心了

20:13.670 --> 20:15.570
因為你在搭建框架的時候

20:16.170 --> 20:18.170
一般來說框架都有一些預定義的

20:18.270 --> 20:20.570
自定義的一些ESLint

20:20.670 --> 20:22.670
對定義好的規則

20:22.770 --> 20:23.970
你直接使用就完事了

20:24.070 --> 20:25.570
當然你如果說你看不慣它

20:25.670 --> 20:27.670
當然你成為技術領導之後

20:27.770 --> 20:29.070
你可以去隨意地更改它

20:29.170 --> 20:30.270
當然你要更改它的話

20:30.870 --> 20:33.170
你最好了對ESLint有個深入的了解

20:33.270 --> 20:35.070
但是不是現階段的事

20:35.170 --> 20:38.670
比方說我們現在用VU搭一個吧

20:38.770 --> 20:41.670
我用VU craze VU APP

20:43.070 --> 20:45.170
好 這個時候它會彈出一個導航

20:45.670 --> 20:46.670
稍微等一下

20:46.770 --> 20:48.670
導航廊比方說我們選擇第四個

20:48.770 --> 20:51.670
手動的選擇你要使用哪些功能

20:51.770 --> 20:54.570
好 這裡邊這個bable表示

20:55.870 --> 20:58.470
第一個就讓你選擇VU的版本

20:58.570 --> 20:59.770
是吧 以後就把個選上

20:59.870 --> 21:02.170
以後它就會提示你選擇哪個版本

21:02.270 --> 21:03.570
第二個是bable

21:03.670 --> 21:05.470
這個是來做介夜式兼容性處理的

21:05.570 --> 21:07.170
跟我們這裡沒有啥關係

21:07.270 --> 21:08.970
下邊就是個Lintr for matter

21:09.670 --> 21:11.670
就是設置的是ESLint

21:11.770 --> 21:14.170
我們現在就把這個回測

21:14.470 --> 21:16.670
接下來讓你選擇VU的版本2.0G

21:16.770 --> 21:19.170
好 接下來它就問你ESLint的時候

21:19.270 --> 21:21.170
應該使用什麼樣的配置

21:21.270 --> 21:22.970
是使用ESLint的標準配置呢

21:23.070 --> 21:24.070
還是加上Pretier

21:24.170 --> 21:26.470
Pretier也是一個代碼風格的檢查

21:26.570 --> 21:27.770
然後我們這裡選擇

21:27.870 --> 21:30.770
一般來選擇是ESLint加上Air BnB

21:30.870 --> 21:32.170
好 我們這裡回測

21:32.270 --> 21:34.970
它問你那麼這個

21:35.070 --> 21:37.170
Lint什麼時候我們檢查

21:37.270 --> 21:39.370
是保存的時候就檢查嗎

21:39.470 --> 21:41.770
還是提交的時候再檢查

21:41.870 --> 21:42.470
這個無所謂

21:42.470 --> 21:44.770
其實我們安裝了VSCode的查件之後

21:44.870 --> 21:46.370
幾乎都無所謂的

21:46.470 --> 21:48.070
好 我們這裡選擇第一個吧

21:48.170 --> 21:49.270
好 問你這些配置

21:49.370 --> 21:50.970
像什麼bableESLint的配置

21:51.070 --> 21:52.470
是放到單獨的文件裡面

21:52.570 --> 21:54.270
還是放到這個packet.json裡面

21:54.370 --> 21:55.670
那麼這裡可以給大家說一下

21:55.770 --> 21:56.970
packet.json這個文件裡面

21:57.070 --> 21:58.770
也可以寫配置的

21:58.870 --> 22:00.370
就是我們可以把ESLint的配置

22:00.470 --> 22:01.970
放到這裡邊也可以

22:02.070 --> 22:04.570
我們一般來說放到單獨的文件

22:04.670 --> 22:06.970
問你是不是保存剛才的這些配置

22:07.070 --> 22:07.870
我就不保存了

22:07.970 --> 22:09.870
直接創建工程

22:09.970 --> 22:11.370
那麼工程創建好了之後

22:11.370 --> 22:13.370
它就會把ESLint給你安裝好

22:13.470 --> 22:15.770
包括AirBnb也給你安裝好

22:15.870 --> 22:17.270
然後給你完成配置

22:17.370 --> 22:18.770
給它進行配置

22:18.870 --> 22:22.740
配置好就行了

22:22.840 --> 22:26.240
我們稍微的等一下

22:26.340 --> 22:27.940
那麼等這段時間

22:28.040 --> 22:29.840
我給大家往後邊講一講

22:29.940 --> 22:31.240
就是將來我們到公司裡面

22:31.340 --> 22:32.440
去做開發的時候

22:32.540 --> 22:34.940
這個ESLint包括AirBnb

22:35.040 --> 22:36.540
對我們有什麼影響呢

22:36.640 --> 22:37.840
那麼首先大家了解一下

22:37.940 --> 22:39.440
在企業裡面做開發的時候

22:39.540 --> 22:42.140
那麼這個ESLint是怎麼玩的

22:42.240 --> 22:42.940
是這樣子

22:43.040 --> 22:45.640
首先這個前端的Leader

22:45.740 --> 22:46.740
就是領導人

22:46.840 --> 22:49.140
他會給你先定義一套規則

22:49.240 --> 22:51.640
那麼這套規則可能是他自己定義的

22:51.740 --> 22:53.640
一般來說就是大廠

22:53.740 --> 22:56.940
也有可能是直接使用別人已經定義好的

22:57.040 --> 22:58.240
反正他會有一套規則

22:58.340 --> 23:00.140
他打算用什麼樣的規則

23:00.240 --> 23:01.940
這套規則定義好了之後

23:02.040 --> 23:05.740
他會分發到或者是寫成一套文檔

23:05.840 --> 23:07.640
告訴你你們那邊開發的時候

23:07.740 --> 23:09.140
要用什麼樣的規則

23:09.240 --> 23:10.140
他會告訴你

23:10.240 --> 23:12.740
那麼你當時把這個規則的配置文件

23:12.940 --> 23:14.140
拷貝過來就行了

23:14.240 --> 23:15.940
要怎麼去安裝那個規則

23:16.040 --> 23:17.740
如何配置

23:17.840 --> 23:19.740
他會告訴你用文檔來告訴你

23:19.840 --> 23:21.740
一般來說都不需要什麼配置

23:21.840 --> 23:23.640
都把工程給打好放到倉庫裡面

23:23.740 --> 23:24.940
你直接從倉庫裡面拿

23:25.040 --> 23:26.940
那些規則就全部都有了

23:27.040 --> 23:30.140
同時他會把這個規則放到生產線裡面

23:30.240 --> 23:32.340
生產在流水線上

23:32.440 --> 23:34.840
那麼一會兒我們來說一下生產流水線

23:34.940 --> 23:36.440
它是怎麼來進行驗證的

23:36.540 --> 23:39.440
那麼這些地方都是我們的開發者

23:39.540 --> 23:40.840
就是我們那個團隊

23:40.940 --> 23:42.440
那麼從倉庫拿下的時候

23:42.440 --> 23:44.340
他其實就已經有ES領車了

23:44.440 --> 23:45.540
已經有這些配置了

23:45.640 --> 23:46.440
你啥都不用管

23:46.540 --> 23:47.440
你只需要安裝依賴

23:47.540 --> 23:49.140
然後開始開發就完事了

23:49.240 --> 23:50.840
開發的過程中你可能會遇到爆錯了

23:50.940 --> 23:51.840
就是ES領車

23:51.940 --> 23:52.440
很有可能

23:52.540 --> 23:53.240
如果說你爆錯的時候

23:53.340 --> 23:57.470
他提示了有ES領車

23:57.570 --> 23:58.670
現在就安裝好了

23:58.770 --> 24:01.170
我們一會兒再看

24:01.270 --> 24:03.370
然後這裡

24:03.470 --> 24:05.470
那麼可以後面看到這個ES領車面

24:05.570 --> 24:05.970
看到沒

24:06.070 --> 24:07.770
那麼這就是ES領車的錯誤

24:07.870 --> 24:09.170
所以對我們來說的話

24:09.270 --> 24:10.670
開發過程中只要看到錯誤

24:10.770 --> 24:11.770
看一下是什麼錯誤

24:11.870 --> 24:13.270
比如說ES領車的錯誤的話

24:13.470 --> 24:14.770
那麼根據他的提示

24:14.870 --> 24:16.570
你修改代碼就完事了

24:16.670 --> 24:18.570
就我們只管開發

24:18.670 --> 24:19.870
好開發完了之後

24:19.970 --> 24:20.670
其實開發階段

24:20.770 --> 24:22.270
我們也在不斷的檢測錯誤

24:22.370 --> 24:22.670
對吧

24:22.770 --> 24:25.270
因為我們VS Code上面有插線

24:25.370 --> 24:25.870
通過這個規則

24:25.970 --> 24:27.770
不斷的去檢測錯誤

24:27.870 --> 24:29.670
因為他說我改這個規則行不行

24:29.770 --> 24:30.870
你改了沒用

24:30.970 --> 24:31.870
為什麼沒用呢

24:31.970 --> 24:33.570
因為如果說你強行改規則

24:33.670 --> 24:35.770
讓你這裡通過了

24:35.870 --> 24:38.170
但是你最後完成代碼之後

24:38.270 --> 24:40.070
你要提交代碼

24:40.170 --> 24:40.970
提交代碼的話

24:41.070 --> 24:42.270
他就會到了一個流水線上

24:42.270 --> 24:44.970
那個流水線都是自動完成的

24:45.070 --> 24:46.870
首先他就會做一個規則檢查

24:46.970 --> 24:48.470
因為流水線上

24:48.570 --> 24:50.470
他會安裝ES領車

24:50.570 --> 24:52.970
會用一套自動化工具來進行檢查

24:53.070 --> 24:54.670
首先他檢查通不過

24:54.770 --> 24:55.770
直接打回來了

24:55.870 --> 24:58.270
代碼你還在把這個規則安裝上

24:58.370 --> 25:00.170
所以說一旦配置好規則之後

25:00.270 --> 25:01.570
你是改了是沒用的

25:01.670 --> 25:03.570
你只能說你在自己這邊看著爽一點

25:03.670 --> 25:05.070
但是一提交就完蛋了

25:05.170 --> 25:07.170
所以說不要去改這個規則

25:07.270 --> 25:08.270
也沒什麼意義

25:08.370 --> 25:09.570
你就按照這個規則來

25:09.670 --> 25:10.570
他只說有錯

25:10.670 --> 25:11.870
反正你提交通不過了

25:11.870 --> 25:14.170
你還不如在本地改好了之後再提交

25:14.270 --> 25:15.470
就這麼一套東西

25:16.770 --> 25:18.470
那現在我們剛才把Viu安裝好了

25:18.570 --> 25:19.670
你可以看到Viu下面

25:19.770 --> 25:22.070
是不是也有一個ES領車RC.GS

25:22.170 --> 25:25.070
那麼這裏邊有一些自己訂的RuOS

25:25.170 --> 25:27.170
包括了它RuOS裏邊

25:27.270 --> 25:28.470
還根據不同的情況

25:28.570 --> 25:29.570
根據不同的環境

25:29.670 --> 25:31.070
如果說你是生產環境的話

25:31.170 --> 25:33.570
那我就提供一個就是警告

25:33.670 --> 25:35.170
不應該使用抗收

25:35.270 --> 25:36.870
如果說你是一個開發環境的話

25:36.970 --> 25:38.170
那我就把這個規則關了

25:38.270 --> 25:39.270
你就可以使用抗收

25:39.370 --> 25:41.470
這就是為什麼在Viu裏邊可以使用抗收

25:41.570 --> 25:43.070
沒有報錯的原因

25:43.170 --> 25:45.670
那這些還有一些就是EXTENSE

25:45.770 --> 25:47.670
那麼它就繼承了什麼

25:47.770 --> 25:48.970
繼承了一個AirBnB

25:49.070 --> 25:51.170
不過這個AirBnB是針對Viu

25:51.270 --> 25:53.370
又單獨做了一個一套東西出來

25:53.470 --> 25:54.870
那其他的還有一些插件

25:54.970 --> 25:55.970
我們就不用去管了

25:56.070 --> 25:57.170
這就是它的配置

25:57.970 --> 26:00.570
OK 那麼這就是關於這個ES領車

26:00.670 --> 26:02.370
最後我們再總結一下

26:02.470 --> 26:04.070
將來我們在開發的時候

26:04.170 --> 26:06.170
ES領車我們要做什麼事情呢

26:06.270 --> 26:07.270
就做兩件事

26:07.370 --> 26:11.170
第一個你就把ES扣的ES領車插件給我安裝好

26:11.970 --> 26:15.070
然後你要學會查看ES領車的錯誤提示

26:15.170 --> 26:16.770
就是這兩件事就行了

26:16.870 --> 26:18.270
然後你這裡報了錯了

26:18.370 --> 26:20.370
你要知道這個為什麼報錯

26:20.470 --> 26:21.770
錯誤原因在那

26:21.870 --> 26:22.770
怎麼看呢

26:22.870 --> 26:24.870
你這裡如果說你這裡看不懂的話

26:24.970 --> 26:26.370
其實可以翻譯翻譯

26:28.870 --> 26:30.770
安裝一個預期三個等號

26:30.870 --> 26:32.370
而看到的是兩個等號

26:32.470 --> 26:34.670
如果這一塊你還看不明白的話

26:34.770 --> 26:36.470
你點這按住控制鍵

26:36.570 --> 26:38.170
點一下打開超鏈接

26:38.270 --> 26:39.970
那麼在它的官網裏邊

26:40.270 --> 26:42.270
去看一下它的錯誤是什麼

26:42.370 --> 26:43.870
表上像這裡官網的一個錯誤

26:43.970 --> 26:45.670
其實你不用去讀它的英文

26:45.770 --> 26:47.870
你就看它的下面的例子就行了

26:47.970 --> 26:49.870
下面這上面肯定是錯誤的

26:49.970 --> 26:50.970
下面是正確的

26:51.070 --> 26:52.470
你對比一下就明白了

26:53.170 --> 26:53.670
懂得意思嗎

26:53.770 --> 26:55.170
你看上面跟下面有什麼區別呢

26:55.270 --> 26:57.170
就是有R變成了什麼ness and constant

26:58.170 --> 27:00.370
OK 這就是關於這個ES領車

