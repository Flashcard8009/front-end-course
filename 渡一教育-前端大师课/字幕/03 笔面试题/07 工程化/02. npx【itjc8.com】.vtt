WEBVTT

00:00.000 --> 00:03.600
好 这些课呢 我们来聊一聊这个NPX

00:03.600 --> 00:05.920
也就是我们说的NPX

00:05.920 --> 00:08.320
这是一个命令

00:08.320 --> 00:10.880
这个命令起身一个什么样的作用呢

00:10.880 --> 00:12.800
我这里给大家简单点了一下

00:12.800 --> 00:14.880
就是说啊 我们有的时候啊

00:14.880 --> 00:19.040
我们为了去得到一个能够随时运行的命令

00:19.040 --> 00:21.440
比方说我们得到的一个命令叫做view

00:21.440 --> 00:22.880
大家都用过对吧

00:22.880 --> 00:25.360
我们凭说搭一个工程用什么样的方式呢

00:25.360 --> 00:26.880
用view这个命令

00:26.880 --> 00:28.720
然后呢 调用这个crazy

00:28.800 --> 00:30.720
创建一个新的工程

00:30.720 --> 00:32.240
然后后边我们写工程的名字

00:32.240 --> 00:34.080
比方说viewabp

00:34.080 --> 00:35.920
对吧 那么这个玩意是啥呀

00:35.920 --> 00:37.840
这个玩意就是命令

00:37.840 --> 00:40.800
这个命令是需要我们全局安装的

00:40.800 --> 00:43.440
当初你们学view的时候是不是全局安装

00:43.440 --> 00:46.000
对吧 全局安装 为什么要全局安装呢

00:46.000 --> 00:48.240
就是因为我们希望在任何时候

00:48.240 --> 00:50.080
都可以使用这个view这个命令

00:50.080 --> 00:51.520
比方说在任何一个目录下边

00:51.520 --> 00:53.600
我们都可以写个view来运行这个命令

00:53.600 --> 00:54.960
但我这里没有全局安装

00:54.960 --> 00:56.720
所以说我这里得不到一个命令

00:56.720 --> 00:58.080
当你全局安装完成之后呢

00:58.160 --> 01:00.320
我们可以在任何地方使用这个命令

01:00.320 --> 01:02.320
来完成项目的搭建

01:02.320 --> 01:04.880
当然不只是view这个命令

01:04.880 --> 01:06.640
一向一些别的一些cool

01:06.640 --> 01:08.320
可能会给你提供一些命令

01:08.320 --> 01:09.600
你如果说

01:09.600 --> 01:14.080
你希望在任何时候都能够运行这个命令的话

01:14.080 --> 01:15.840
那你只能全局安装

01:15.840 --> 01:17.840
全局安装就是干这个事的

01:17.840 --> 01:20.240
让你在任何一个目录下边

01:20.240 --> 01:21.600
都可以运行这个命令

01:21.600 --> 01:24.480
但是这样做有什么样的不好的地方呢

01:24.480 --> 01:25.520
那么假设

01:25.520 --> 01:27.040
你们以后到了公司里边

01:27.120 --> 01:29.920
你们公司有10个项目

01:30.800 --> 01:32.160
最早的这个项目呢

01:32.160 --> 01:33.680
可能是用5又1

01:33.680 --> 01:36.240
因为我们知道这个命令是谁提供的

01:36.240 --> 01:38.160
是不是5又可力这个工具库

01:38.160 --> 01:38.560
对吧

01:38.560 --> 01:39.520
他来提供这个命令

01:39.520 --> 01:41.040
你全局安装他之后呢

01:41.040 --> 01:43.040
你就获得了这个5又的这个命令

01:43.680 --> 01:44.960
那你想一想

01:44.960 --> 01:46.480
你们公司有10个项目

01:47.360 --> 01:48.400
第1个项目呢

01:48.400 --> 01:51.360
是用的是可力的版本是1.0

01:51.920 --> 01:53.040
第2个项目呢

01:53.040 --> 01:55.600
可力的版本是2.0

01:55.680 --> 01:56.640
第3个项目呢

01:56.640 --> 01:57.440
可力的版本呢

01:57.440 --> 01:58.400
是3.0

01:59.440 --> 02:00.960
现在的可力的版本呢

02:00.960 --> 02:02.000
可能4.0

02:02.000 --> 02:02.800
举个例子

02:02.800 --> 02:03.520
有4个项目

02:04.080 --> 02:06.160
每个项目用的可力的版本不一样

02:07.360 --> 02:08.640
那么这个时候呢

02:08.640 --> 02:11.520
如果说你要去搭建这4个工程的话

02:11.520 --> 02:12.480
那有问题就来了

02:13.440 --> 02:15.680
你如果说全局安装的话

02:15.680 --> 02:16.320
安装的时候

02:16.320 --> 02:17.520
是不是可以指定版本

02:17.520 --> 02:18.400
你指定哪个版本

02:19.360 --> 02:20.640
你指定哪个版本都不行

02:21.280 --> 02:22.560
你指定他这个版本呢

02:22.560 --> 02:24.960
你这第3个项目是没问题

02:25.040 --> 02:25.440
但是呢

02:25.440 --> 02:27.840
如果说第1个第2个第4个呢

02:27.840 --> 02:28.800
你没法弄了

02:28.800 --> 02:31.440
那你只能把全局安装又把卸载掉了

02:31.440 --> 02:32.240
卸载掉之后呢

02:32.240 --> 02:33.520
又用这个版本

02:33.520 --> 02:34.720
是不是就一个版本的问题

02:34.720 --> 02:36.560
因为全局安装只能安装一个

02:37.280 --> 02:37.920
对吧

02:37.920 --> 02:39.760
所以只能安装其中一个版本

02:39.760 --> 02:41.200
这就造成了问题

02:41.200 --> 02:42.640
所以我们最好的做法呢

02:42.640 --> 02:44.400
就是不要全局安装

02:44.400 --> 02:46.160
就越来越多的现在目前

02:46.160 --> 02:47.440
新的项目里边

02:47.440 --> 02:48.240
越来越多的项目呢

02:48.240 --> 02:50.000
都不希望你进行全局安装了

02:50.000 --> 02:52.800
因为全局安装特别不容易控制版本

02:52.880 --> 02:55.040
我们希望呢每一个工程使用

02:55.040 --> 02:56.160
他自己的一套版本

02:56.800 --> 02:57.600
这是最好的

02:58.080 --> 02:59.200
那么这个怎么来处理呢

02:59.200 --> 03:00.160
因为你如果说

03:00.160 --> 03:01.920
你每一个工程使用一个版本的话

03:03.040 --> 03:04.320
就会造成一个问题就是

03:04.880 --> 03:06.640
我这个命令就被发到处使用了

03:06.960 --> 03:08.960
因此呢就出现了这个NPS

03:08.960 --> 03:09.840
来解决这个问题

03:10.240 --> 03:11.520
我这里给大家举个例子

03:12.080 --> 03:13.440
比方说我们呢

03:13.440 --> 03:14.240
有一个项目

03:14.640 --> 03:15.360
这个项目呢

03:16.320 --> 03:18.320
我们知道我们工程化了一块学过了

03:18.320 --> 03:18.560
对吧

03:18.560 --> 03:19.200
一个waypack

03:20.080 --> 03:21.680
这个玩意它其实提供了命令的

03:21.920 --> 03:23.920
有个包叫做waypack.cd

03:23.920 --> 03:24.560
这个包

03:24.560 --> 03:25.920
这个包呢还提供了一个命令

03:25.920 --> 03:26.720
叫做waypack

03:28.640 --> 03:30.800
这个玩意呢以前很早的时候

03:30.800 --> 03:32.240
是要进行全局安装的

03:32.240 --> 03:34.240
因为你不前人全局安装的话

03:34.240 --> 03:35.840
那你这个命令没法运行

03:35.840 --> 03:36.160
对吧

03:36.160 --> 03:36.800
不好运行

03:37.520 --> 03:38.240
所以说呢

03:38.240 --> 03:40.240
它全出来又会设计到版本的问题

03:40.240 --> 03:41.120
那怎么办呢

03:42.560 --> 03:44.720
好比方说我们现在有一个工程1

03:44.720 --> 03:45.600
Pro解1

03:46.640 --> 03:47.600
这个工程呢

03:47.600 --> 03:49.200
我们希望用的版本呢

03:49.200 --> 03:50.240
是waypack4

03:51.200 --> 03:53.200
希望用的版本是waypack4

03:53.600 --> 03:54.560
那么这个时候呢

03:54.560 --> 03:55.360
我们比方说

03:55.360 --> 03:56.560
我们在中端中打开

03:57.520 --> 03:58.320
我们可以

03:58.320 --> 04:00.000
我们就不进行全局安装了

04:00.400 --> 04:02.160
我就在工程内部

04:02.160 --> 04:03.600
就进行本地安装

04:03.600 --> 04:04.560
我们怎么安装呢

04:04.560 --> 04:05.520
我们安装两个包

04:05.920 --> 04:08.080
一个呢叫做waypack

04:09.040 --> 04:10.560
我们给它打个4

04:11.280 --> 04:12.560
然后呢waypack可以

04:13.120 --> 04:13.840
也打个4

04:15.840 --> 04:16.160
好

04:16.640 --> 04:17.120
你看啊

04:18.320 --> 04:19.680
表示安装4这个版本

04:24.140 --> 04:24.540
好了

04:29.550 --> 04:30.510
这没卡住了

04:31.310 --> 04:32.430
应该是安装成功了

04:32.430 --> 04:33.630
它这里卡住了

04:33.630 --> 04:34.110
好了

04:34.910 --> 04:36.030
安装完成了之后

04:36.030 --> 04:36.750
我们来看一下

04:37.310 --> 04:38.510
我们的安装东西在哪呢

04:38.510 --> 04:40.270
是不是在这个load mortgages里面

04:40.270 --> 04:40.990
是不是在这里面

04:41.550 --> 04:41.870
对吧

04:42.350 --> 04:43.550
好在这里面呢

04:43.550 --> 04:44.030
时候呢

04:44.030 --> 04:45.630
我们如何来使用这个命令呢

04:45.630 --> 04:47.150
因为我们不是全局安装的

04:47.150 --> 04:48.670
我们是本地安装的

04:48.670 --> 04:50.190
本地安装的命令在哪呢

04:50.190 --> 04:51.470
在load mortgages里面

04:51.470 --> 04:53.310
有一个目录叫做底儿并

04:53.310 --> 04:54.350
这个目录

04:54.350 --> 04:56.030
这个目录里面就记录了

04:56.110 --> 04:57.790
所有我能使用的命令

04:57.790 --> 04:58.430
waypack

04:58.430 --> 04:59.150
waypack可以

04:59.150 --> 04:59.390
对吧

04:59.390 --> 05:00.750
就这两个命令都可以使用

05:01.310 --> 05:02.270
好那么比方说

05:02.270 --> 05:03.070
我们在这里呢

05:03.070 --> 05:04.670
去新建一个src目录

05:05.390 --> 05:05.950
src

05:07.070 --> 05:08.350
当然我们现在不是去讲

05:08.350 --> 05:09.550
不同的版本有什么差异

05:09.550 --> 05:10.750
这个不是我们的重点

05:10.750 --> 05:12.350
我们就在看这么一个现象

05:12.350 --> 05:13.310
就是不同的工程呢

05:13.310 --> 05:14.670
它可能要依赖不同的版本

05:14.670 --> 05:15.870
我就随便写一个吧

05:15.870 --> 05:16.990
那么现在我们来打包

05:17.470 --> 05:18.270
怎么打包呢

05:18.270 --> 05:18.590
现在

05:19.390 --> 05:21.630
我全局有没有这个waypack命令啊

05:21.630 --> 05:22.910
又没有进行全局安装

05:22.910 --> 05:24.030
所以说就没有这个命令

05:24.510 --> 05:25.950
没有全局安装嘛

05:26.750 --> 05:28.030
但是我又不能全局安装

05:28.030 --> 05:28.830
因为全局安装的话

05:28.830 --> 05:30.190
版本就不好控制了

05:30.190 --> 05:32.830
我就把vpack安装到我这个工程里

05:32.830 --> 05:33.870
本地安装

05:34.990 --> 05:36.030
那怎么来运行呢

05:36.030 --> 05:37.390
那我就这样运行呗

05:37.390 --> 05:39.070
过去就是这样运行的啊

05:39.070 --> 05:40.510
load module是底儿并

05:41.550 --> 05:42.110
然后呢

05:43.070 --> 05:48.190
找到这个下边的waypack这个命令

05:48.190 --> 05:51.070
通过这种方式来进行打包

05:51.070 --> 05:52.190
你看一下能不能打包啊

05:52.190 --> 05:52.590
我们回车

05:54.030 --> 05:54.750
是不是打包了

05:54.750 --> 05:54.910
对吧

05:54.990 --> 05:55.870
它又保密警告

05:55.870 --> 05:57.070
因为我没有写配置文件啊

05:57.070 --> 05:57.710
无所谓

05:57.710 --> 05:58.510
是不是打包了嘛

05:59.150 --> 05:59.870
那就打包了

06:00.670 --> 06:00.990
OK

06:00.990 --> 06:02.750
这就是waypack4打包出来的结果

06:03.630 --> 06:03.950
好

06:03.950 --> 06:04.910
另外一个工程呢

06:06.510 --> 06:07.710
我就现在又来一个工程

06:07.710 --> 06:09.150
proj2

06:09.950 --> 06:10.190
好

06:10.190 --> 06:10.990
这个工程

06:10.990 --> 06:12.990
然后我们现在又进入这个proj2

06:12.990 --> 06:13.710
proj2

06:14.830 --> 06:15.550
这个工程

06:15.550 --> 06:16.830
我们又来一次啊

06:16.830 --> 06:18.350
又安装那个waypack

06:18.830 --> 06:20.190
现在就是五拉最新版本

06:20.190 --> 06:20.990
waypack3

06:23.070 --> 06:24.350
你看刚才安装的时候

06:24.430 --> 06:25.790
拍一件接生里边说的四

06:25.790 --> 06:26.590
都是四这个版本

06:27.070 --> 06:27.230
好

06:27.230 --> 06:28.670
我们看这个proj2啊

06:28.670 --> 06:29.790
安装版本是不是

06:29.790 --> 06:31.150
它这个版本还是四啊

06:31.150 --> 06:32.590
但是waypack的版本是五了

06:33.390 --> 06:33.630
好

06:33.630 --> 06:35.070
接下来我们在这个工程里边

06:35.070 --> 06:36.430
又写一个src目录

06:36.910 --> 06:38.430
你看它里边是不是也有个并

06:38.430 --> 06:38.670
对吧

06:38.670 --> 06:40.430
这里边表示我可以执行的命令

06:40.750 --> 06:42.670
就是我安装到这个工程里边的命令

06:43.310 --> 06:45.790
src里边我们再去建一个in这个设计

06:45.790 --> 06:46.190
src

06:46.830 --> 06:47.070
好

06:47.070 --> 06:48.510
我们这里呢再输出一个123

06:48.990 --> 06:50.110
接下来我们再进行打包

06:51.950 --> 06:52.910
我们就怎么打包了

06:52.910 --> 06:54.110
load modules

06:55.070 --> 06:56.430
bim.waypack

06:57.230 --> 06:58.270
好来先打包

06:58.270 --> 07:00.270
完成打包了

07:00.830 --> 07:01.710
你可以看到

07:01.710 --> 07:03.710
waypack5打包出来是不是简洁的很多

07:03.710 --> 07:03.950
对吧

07:04.670 --> 07:05.870
这个我们不凶其关系

07:06.910 --> 07:08.350
总之呢我们发现这两个工程

07:08.350 --> 07:09.630
是不是有不同的版本

07:09.630 --> 07:09.870
对吧

07:10.350 --> 07:11.870
版本的命令也不一样

07:11.870 --> 07:12.670
不同的版本

07:13.630 --> 07:15.470
命令一样但是功能是不一样的

07:16.190 --> 07:17.790
那我们这样子好处在于什么呢

07:17.790 --> 07:19.790
好处在于我不用全具安装了

07:19.790 --> 07:21.070
每个工程有自己的版本

07:21.070 --> 07:22.190
我运行的时候怎么运行呢

07:22.190 --> 07:23.550
我找到这个load module

07:23.710 --> 07:25.150
就是下面的并步路去运行

07:25.870 --> 07:27.310
好我就说清楚了

07:27.310 --> 07:28.270
也没有不理解的

07:28.270 --> 07:29.470
应该是都没问题

07:30.030 --> 07:32.510
好那现在呢有一个小问题

07:32.510 --> 07:33.470
什么小问题呢

07:33.950 --> 07:35.550
这样写麻烦

07:35.550 --> 07:36.670
就这么个小问题

07:37.390 --> 07:38.670
是不是这样子写麻烦啊

07:39.150 --> 07:40.270
那你要去在这里去

07:40.750 --> 07:41.470
挨在那去找

07:42.270 --> 07:44.670
于是呢为了减少我们的麻烦

07:45.950 --> 07:48.030
npm呢它就提供了一个小工具

07:48.030 --> 07:48.830
它自动安装的话

07:48.830 --> 07:49.870
你们都不需要做任何事情

07:49.870 --> 07:50.910
你安装load的时候

07:50.910 --> 07:52.030
它就自动安装了npm

07:52.750 --> 07:54.750
还安装了一个东西叫做npx

07:55.550 --> 07:58.590
这个玩意呢就是专门来执行命令的

07:59.070 --> 08:00.190
执行什么命令

08:00.190 --> 08:03.710
执行本地load module是并步路下面的命令

08:04.350 --> 08:05.790
所以说呢我们现在要打包

08:05.790 --> 08:07.550
非常简单npx未拍的

08:08.270 --> 08:09.790
它会从哪里去找这个命令呢

08:09.790 --> 08:11.470
它就会从load module里面

08:11.470 --> 08:12.990
并步路下面去找到这个命令

08:13.390 --> 08:14.590
懂不懂意思吗就这么简单

08:15.310 --> 08:15.870
好又回头

08:17.070 --> 08:17.630
打包了

08:17.630 --> 08:19.310
那么上面这个也是要有些警告

08:19.310 --> 08:20.910
不用管啊因为我们有些配置文件

08:21.630 --> 08:22.910
好我们这里再来一个npx

08:23.790 --> 08:24.750
project1也是

08:25.150 --> 08:26.510
是不是就可以打包

08:27.230 --> 08:29.950
这就是npx的最基本最基本的用法

08:31.230 --> 08:32.350
npx的作用呢就是

08:33.310 --> 08:34.830
它可以非常简

08:34.830 --> 08:38.350
它可以简化我们运行本地工程里边的命令

08:38.350 --> 08:39.310
对吧你像这句话

08:39.950 --> 08:40.750
我放大一点啊

08:41.230 --> 08:42.590
这句话它实际上运行的时候

08:42.590 --> 08:44.350
就load module是并步路下面的每个位拍

08:45.790 --> 08:47.630
另外一个小的细节呢

08:47.630 --> 08:49.870
就是如果说啊有的时候呢

08:49.950 --> 08:51.470
我们很多时候都这样做啊

08:51.470 --> 08:52.750
在package.json里边

08:52.750 --> 08:54.030
我们是不是可以配置脚本

08:54.750 --> 08:56.430
对吧配置脚本的时候呢

08:56.430 --> 08:57.950
是可以省略npx的

08:57.950 --> 08:58.590
什么意思啊

08:58.590 --> 09:00.110
就比方说哈我在这里呢

09:00.110 --> 09:01.710
呃我去配置一个脚本

09:01.710 --> 09:02.270
script

09:03.470 --> 09:04.910
那么我这里比方写个build

09:06.430 --> 09:10.750
啊build我当我去运行npm run build的时候呢

09:10.750 --> 09:11.390
它这里呢

09:11.390 --> 09:12.670
我它就运行这个命令

09:12.670 --> 09:13.230
vpact

09:14.030 --> 09:16.510
完整的写法呢应该叫npx vpact

09:16.510 --> 09:18.350
让我来试一下啊运行

09:19.310 --> 09:20.910
你看运行的是npx vpact

09:20.910 --> 09:21.710
是不是一样打包

09:22.510 --> 09:24.270
那么在配置脚本的时候呢

09:24.270 --> 09:25.870
是可以省略到npx的啊

09:25.870 --> 09:27.230
就这个地方是可以省略的

09:28.750 --> 09:29.310
是一样的

09:30.990 --> 09:31.630
没问题吧

09:31.630 --> 09:32.830
啊就这个小细节啊

09:32.830 --> 09:34.910
这是npx的第一个作用啊

09:34.910 --> 09:36.350
运行本地命令

09:39.100 --> 09:40.140
好第二个作用呢

09:40.140 --> 09:42.380
是临时下载执行

09:42.380 --> 09:43.420
这是啥意思啊

09:43.900 --> 09:45.020
就是有的时候啊

09:45.020 --> 09:47.260
我可能我本地都没有安装

09:47.820 --> 09:49.420
本地都没有安装这个包

09:49.580 --> 09:50.380
包都没有安装

09:51.500 --> 09:52.380
我这里还安装了

09:52.380 --> 09:52.620
对吧

09:52.620 --> 09:54.380
我还用npm去安装了两个包

09:54.380 --> 09:55.100
一个vpact

09:55.100 --> 09:55.980
一个vpact可立

09:55.980 --> 09:57.100
你看是不是安装了两个包

09:57.980 --> 09:58.220
对吧

09:58.220 --> 10:00.140
这里边也是安装了两个包

10:00.140 --> 10:00.620
但有的时候

10:00.620 --> 10:02.140
我可能连包都没有安装

10:03.180 --> 10:04.540
这种情况是什么情况呢

10:04.540 --> 10:06.460
有的时候我就想临时用一下这个命令

10:06.460 --> 10:07.420
我懒得去下载了

10:07.420 --> 10:07.820
对吧

10:07.820 --> 10:08.860
懒得去安装了

10:08.860 --> 10:10.460
我就是临时用一下

10:10.460 --> 10:11.100
有的时候呢

10:11.100 --> 10:12.220
是为了大工程啊

10:12.220 --> 10:13.980
我以后一会都会举例子啊

10:13.980 --> 10:15.580
比方说我这里有一个情况

10:16.220 --> 10:16.700
就是呢

10:16.700 --> 10:18.460
我有一个有一个包的名字

10:18.540 --> 10:19.740
叫做Pretty Jason

10:19.740 --> 10:21.340
这个包大家没用过啊

10:21.340 --> 10:22.540
我也没用过

10:22.540 --> 10:23.580
我随便找了一个啊

10:23.580 --> 10:24.220
就这个包呢

10:24.220 --> 10:25.100
还提供了一个命令

10:25.100 --> 10:26.380
我就想临时用一下

10:26.780 --> 10:28.460
那么这个命令是做什么事呢

10:28.460 --> 10:29.660
我先给他说一下啊

10:30.380 --> 10:32.060
比方说我这里有一个json文件

10:32.860 --> 10:33.580
1点json

10:36.140 --> 10:37.260
json格式的文件呢

10:37.260 --> 10:38.140
a等于1

10:39.100 --> 10:39.340
b

10:40.540 --> 10:41.260
等于2

10:43.500 --> 10:44.060
然后呢

10:44.620 --> 10:46.620
c等于123

10:47.020 --> 10:47.740
比方说有这么一个

10:47.820 --> 10:48.780
json格式的文件

10:48.780 --> 10:49.740
这是json格式

10:50.380 --> 10:52.460
我想把它转成另外一种格式

10:52.460 --> 10:53.340
另外一种格式呢

10:53.340 --> 10:55.020
叫做yamo格式

10:55.820 --> 10:57.020
yamo格式是什么格式呢

10:57.020 --> 10:57.820
简单聊一下

10:57.820 --> 10:59.500
跟你们平时也不太

10:59.900 --> 11:01.020
不太会用这种格式的

11:01.420 --> 11:02.060
yamo格式呢

11:02.060 --> 11:02.860
是另外一种写法

11:02.860 --> 11:04.140
就是一样的

11:04.140 --> 11:04.940
一样的效果啊

11:04.940 --> 11:06.140
表达一样的意识

11:06.140 --> 11:07.420
那就它是这样的写的

11:07.420 --> 11:07.900
a

11:08.460 --> 11:08.700
b

11:08.700 --> 11:09.020
2

11:09.660 --> 11:10.300
然后c

11:12.300 --> 11:13.100
一个列表

11:13.340 --> 11:13.820
1

11:15.740 --> 11:16.220
2

11:17.100 --> 11:18.860
这是yamo格式的写法

11:19.660 --> 11:20.460
懂我的意思吧

11:20.460 --> 11:21.500
它就是这种的

11:21.500 --> 11:22.460
比较特殊的写法

11:22.460 --> 11:24.300
我想把这种格式转成这种格式

11:24.300 --> 11:25.740
有没有工具可以帮我们转的

11:25.740 --> 11:26.460
有一个工具

11:26.780 --> 11:28.460
这个工具叫做prettyjson

11:28.460 --> 11:29.820
你不要学这个工具

11:29.820 --> 11:30.700
没啥意义的啊

11:31.340 --> 11:32.620
我主要说npx

11:33.180 --> 11:33.820
这工具呢

11:34.460 --> 11:35.500
有了这个工具之后

11:35.500 --> 11:36.460
它会提供一个命令

11:36.460 --> 11:37.500
叫做prettyjson

11:37.900 --> 11:38.940
有它的命令的名字呢

11:38.940 --> 11:40.220
跟包的名字是一样的

11:40.780 --> 11:42.540
然后后边你只需要写上一个

11:42.540 --> 11:43.580
json的文件

11:43.580 --> 11:44.540
你把文件给它

11:44.540 --> 11:45.900
它就会给你转成这种格式

11:47.020 --> 11:48.140
那么现在呢

11:48.140 --> 11:50.540
我能不能去下载安装这个包

11:50.540 --> 11:51.580
可不可以完成

11:51.580 --> 11:52.140
来可以啊

11:52.140 --> 11:52.780
我来吧

11:52.780 --> 11:53.580
npm i

11:53.580 --> 11:54.700
我就随便你来一个吧

11:55.340 --> 11:56.060
捷杠地

11:56.060 --> 11:58.460
来一个名字教堂

11:58.460 --> 11:59.340
我都忘了

11:59.340 --> 12:00.620
平时我也没使用过它

12:01.180 --> 12:01.900
prettyjson

12:02.700 --> 12:02.940
好

12:02.940 --> 12:03.900
来我们来安装一个

12:05.180 --> 12:05.740
好

12:05.740 --> 12:06.460
然后我这边呢

12:06.460 --> 12:07.340
就安装到哪儿了呢

12:08.540 --> 12:09.500
安装到prettyjson的

12:10.780 --> 12:11.420
我出来吧

12:12.060 --> 12:13.420
安装到跟木炉

12:13.420 --> 12:13.980
npm i

12:14.940 --> 12:15.580
捷杠地

12:15.580 --> 12:16.460
开发一旦

12:16.460 --> 12:17.420
叫做prettyjson

12:18.380 --> 12:18.780
来

12:19.180 --> 12:20.140
安装好了过后了

12:20.140 --> 12:21.340
你看它就给我们提供了一个命令

12:21.340 --> 12:22.220
叫做prettyjson

12:22.220 --> 12:23.180
那我们就怎么来

12:23.180 --> 12:26.300
npm是prettyjson

12:27.580 --> 12:28.300
然后呢

12:28.300 --> 12:28.940
一点儿json

12:29.420 --> 12:30.860
把文件给它

12:31.180 --> 12:32.700
那么它就可以帮我们翻译成

12:32.700 --> 12:33.580
这种格式

12:33.580 --> 12:34.060
看呗

12:34.060 --> 12:34.780
就是压帽格式

12:35.420 --> 12:36.380
它就起众没个作用

12:37.100 --> 12:38.380
那如果说现在

12:38.780 --> 12:40.380
我这个东西就是临时用一下

12:40.380 --> 12:42.140
你不要给我来这些乱七八糟的

12:42.140 --> 12:42.940
我安装啥

12:42.940 --> 12:43.260
安装

12:43.340 --> 12:44.220
你就给我下载

12:44.220 --> 12:45.180
用一下就完事了

12:45.900 --> 12:46.460
可不可以呢

12:46.460 --> 12:46.940
可以

12:47.500 --> 12:48.380
怎么做呢

12:48.380 --> 12:49.900
直接写npm

12:50.780 --> 12:51.580
prettyjson

12:51.980 --> 12:53.660
当它发现本地的

12:53.660 --> 12:54.860
你看这个木炉下边

12:54.860 --> 12:55.660
我们跟木炉下边

12:55.660 --> 12:57.180
有没有这个prettyjson这个

12:57.660 --> 12:59.740
有没有连那个nodemortius都没有

12:59.740 --> 12:59.900
对吧

12:59.900 --> 13:00.940
那个文件夹都没有

13:00.940 --> 13:02.540
它肯定本地没有这个东西

13:02.540 --> 13:03.420
没有的话

13:03.420 --> 13:04.220
那么这个时候

13:04.220 --> 13:05.180
它就会去下载

13:05.180 --> 13:06.460
它发现这个命令不存在

13:06.860 --> 13:08.540
那么它就会下载同名的包

13:08.540 --> 13:09.740
它就会去下载这个包

13:09.740 --> 13:10.540
那么你回车

13:11.580 --> 13:12.780
我这里就打印出来了

13:12.940 --> 13:14.220
因为我之前已安装过了

13:14.220 --> 13:15.100
我测试了一下

13:15.100 --> 13:16.620
正常就是如果说

13:16.620 --> 13:18.060
你之前没有安装过的话

13:18.060 --> 13:19.420
那么它就会给你

13:19.980 --> 13:20.940
它就会问你

13:20.940 --> 13:22.300
你是不是要安装这个包

13:22.300 --> 13:23.500
那么你写一个Y

13:23.500 --> 13:25.980
它会问你要不要安装

13:25.980 --> 13:26.620
那你写个Y

13:26.620 --> 13:27.180
一回车

13:27.180 --> 13:29.020
那么它就会自动的给你下载

13:29.020 --> 13:29.900
下载到哪呢

13:29.900 --> 13:31.020
下载到不是权剧

13:31.020 --> 13:32.460
下载到一个临时木炉

13:34.060 --> 13:36.060
这个临时木炉跟这些操作系统不同

13:36.060 --> 13:37.100
还不一样

13:37.100 --> 13:38.860
反正它下载到一个临时木炉

13:38.860 --> 13:40.780
这个临时木炉是不可靠的

13:40.780 --> 13:41.980
将来很有可能

13:42.060 --> 13:43.260
它就给你删掉了

13:43.260 --> 13:44.540
临时下载下来

13:44.540 --> 13:46.540
然后临时运行下这个命令

13:46.540 --> 13:47.660
运行完了过后

13:47.660 --> 13:48.780
它在一个合适的时间

13:48.780 --> 13:49.900
它就会给你删掉

13:49.900 --> 13:50.940
可能过了一段时间

13:50.940 --> 13:52.540
你再去运行这个命令的时候

13:52.540 --> 13:53.740
它要重新下载

13:53.740 --> 13:54.540
懂了意思吧

13:54.540 --> 13:55.820
这就可以用这种方式来

13:55.820 --> 13:58.140
临时来运行一个命令

13:58.140 --> 14:00.140
你看这里是不是没有弄得毛90

14:00.140 --> 14:01.180
没有吧

14:01.180 --> 14:03.180
它不需要下载到本地

14:03.180 --> 14:04.700
还有这么一个作用

14:04.700 --> 14:06.220
如果说本地不存在

14:06.220 --> 14:07.020
它就会下载

14:08.140 --> 14:09.580
好那么有的时候

14:09.580 --> 14:11.260
我们会临时运行一个命令

14:11.740 --> 14:12.460
有的时候

14:12.460 --> 14:14.940
临时运行命令出现的最多的场景是什么呢

14:14.940 --> 14:15.900
就是搭建工程

14:15.900 --> 14:18.300
比方说你像用5U

14:18.300 --> 14:19.500
比方说也在这里

14:19.500 --> 14:21.420
用5U去搭建工程

14:21.420 --> 14:23.420
那么这个5U是不是一个命令

14:23.420 --> 14:24.700
是这个命令吧

14:24.700 --> 14:27.420
那么我们只是为了临时搭一下工程

14:27.420 --> 14:28.140
搭到工程之后

14:28.140 --> 14:29.100
就跟它没什么关系了

14:29.100 --> 14:29.500
对吧

14:29.500 --> 14:31.740
我也不想全聚安装

14:31.740 --> 14:32.460
那我怎么办呢

14:32.460 --> 14:34.060
我就可以使用NPS

14:34.060 --> 14:34.940
我就写

14:34.940 --> 14:36.380
比方说我用5U搭一个工程

14:36.380 --> 14:37.020
我怎么写

14:37.020 --> 14:37.740
NPS

14:37.740 --> 14:39.260
你看我现在没有全聚命令

14:39.260 --> 14:41.020
我把全聚铀卸掉了

14:41.100 --> 14:41.900
没有这个命令

14:41.900 --> 14:43.260
那我就临时安装一下

14:43.260 --> 14:44.220
NPS是5U

14:44.220 --> 14:46.140
CREATE 5U APP

14:46.140 --> 14:47.660
帮我来搭个工程

14:48.220 --> 14:49.340
好那么这个时候呢

14:49.340 --> 14:50.220
它爆错了

14:50.220 --> 14:51.660
为什么爆错了呢

14:51.660 --> 14:53.980
是因为它默认情况下

14:53.980 --> 14:55.420
它看到这个命令有没有啊

14:55.420 --> 14:56.060
没有

14:56.060 --> 14:57.340
它会去下载什么包

14:57.340 --> 14:58.940
下载5U那个包

14:58.940 --> 15:00.860
但是5U那个包里边

15:00.860 --> 15:02.140
是没有命令的

15:02.140 --> 15:03.740
回忆一下

15:03.740 --> 15:05.580
这个玩意这个命令是谁

15:05.580 --> 15:06.620
哪个包提供的

15:06.620 --> 15:08.620
是一个名叫5U

15:08.620 --> 15:10.060
克力这个包提供的

15:10.540 --> 15:11.660
就是包的名字

15:11.660 --> 15:13.660
跟那个命令的名字不一样

15:13.660 --> 15:14.700
刚才那个情况

15:14.700 --> 15:16.700
刚才那个Pretty接上那个情况

15:16.700 --> 15:18.460
是包的名字跟命令的名字一样

15:18.460 --> 15:18.780
对吧

15:18.780 --> 15:19.500
现在不一样了

15:19.500 --> 15:20.940
不一样怎么办呢

15:20.940 --> 15:22.540
下边的一句话

15:22.540 --> 15:23.180
你看

15:23.180 --> 15:24.380
用这种方式

15:25.660 --> 15:27.340
这种方式是什么意思呢

15:27.340 --> 15:28.620
这种方式表示的是

15:28.620 --> 15:30.380
NPS

15:30.380 --> 15:31.500
HKP

15:31.500 --> 15:33.020
HKP呢叫做Packy

15:33.020 --> 15:36.380
指定包的名字叫做5U克力

15:36.380 --> 15:37.340
用这个包

15:37.340 --> 15:38.940
里边提供了一个命令叫5U

15:38.940 --> 15:39.740
后边就一样了

15:39.820 --> 15:40.700
5U命令

15:40.700 --> 15:42.060
克力是5UAPP

15:42.060 --> 15:44.220
你前面如果说不指定的话

15:44.220 --> 15:45.100
它是傻的

15:45.100 --> 15:46.620
它就去瞎载5U那个包

15:46.620 --> 15:48.140
5U那个包没有命令

15:48.140 --> 15:49.580
所以说给它指定一个包

15:49.580 --> 15:50.700
包的名字叫这个

15:50.700 --> 15:51.500
这样子呢

15:51.500 --> 15:53.020
可以告诉它

15:53.020 --> 15:54.140
这个命令在哪里

15:54.140 --> 15:55.180
在这个包里边

15:55.180 --> 15:55.580
好了

15:55.580 --> 15:56.620
于是它就会下载哪个包

15:56.620 --> 15:57.340
下载这个包

15:57.340 --> 15:57.580
好

15:57.580 --> 15:58.380
我们接下回彻

15:58.380 --> 16:01.840
同样的

16:01.840 --> 16:03.040
你第一次的时候

16:03.040 --> 16:04.080
我这里没有第一次

16:04.080 --> 16:05.360
我刚才已经安装过了

16:05.360 --> 16:06.400
已经用过了

16:06.400 --> 16:07.520
在临时部路里边

16:07.520 --> 16:08.960
但是如果说你第一次

16:08.960 --> 16:10.080
用这样的方式的话

16:10.080 --> 16:11.120
它会问你

16:11.200 --> 16:12.720
是不是要你去安装这个包

16:12.720 --> 16:13.840
你写一个Y

16:13.840 --> 16:14.800
就安装就完事了

16:14.800 --> 16:15.760
那你后边都一样了

16:15.760 --> 16:16.000
对吧

16:16.000 --> 16:16.560
5U克力

16:16.560 --> 16:17.280
搭建工程

16:17.280 --> 16:18.000
都一样了

16:18.000 --> 16:19.120
所以我这里不掩饰

16:20.240 --> 16:20.960
明白吧

16:20.960 --> 16:21.840
这就是npx

16:21.840 --> 16:23.200
用起来非常非常简单

16:23.200 --> 16:25.600
就是有了npx之后

16:25.600 --> 16:27.840
我们是不需要全局安装东西的

16:27.840 --> 16:29.040
不需要的

16:29.040 --> 16:30.720
都使用npx就可以搞定了

16:30.720 --> 16:32.080
这样子好处在于

16:32.080 --> 16:34.880
我们可以在不同的工程里边

16:34.880 --> 16:36.560
使用不同的版本

16:36.560 --> 16:37.440
两个作用

16:37.440 --> 16:38.400
一个是

16:38.400 --> 16:40.080
直接运行本地的命令

16:40.160 --> 16:41.440
一个是本地没有命令

16:41.440 --> 16:42.640
就去下载

16:42.640 --> 16:43.440
下载的时候

16:43.440 --> 16:45.440
如果说发现包名跟命令名不一样的话

16:45.440 --> 16:46.240
指定一下

16:46.240 --> 16:47.200
都不要去背

16:47.200 --> 16:48.640
到时候真的需要的时候

16:48.640 --> 16:49.600
查一查就行了

16:50.560 --> 16:50.720
好

16:50.720 --> 16:51.680
最后我给大家说一下

16:51.680 --> 16:53.440
这个npm in列车是什么意思

16:53.440 --> 16:54.880
这个玩意其实同学们都知道

16:55.520 --> 16:56.480
这个玩意是什么东西呢

16:56.480 --> 16:57.840
比方说我们要新建个工程

17:00.220 --> 17:00.940
或者解散

17:01.740 --> 17:02.780
这个工程里边

17:02.780 --> 17:03.420
我们一开始

17:03.420 --> 17:04.380
最开始要做的事情

17:04.380 --> 17:05.580
是不是要初始化工程

17:05.580 --> 17:05.820
对吧

17:05.820 --> 17:07.660
npm刚刚都忘了

17:07.660 --> 17:08.620
要初始化工程

17:08.620 --> 17:09.340
npm in列车

17:09.340 --> 17:09.740
那么这个时候

17:09.820 --> 17:11.740
他会问你工程的名字叫啥

17:11.740 --> 17:13.260
这里不能用中文

17:13.260 --> 17:15.100
就是英文加上博文线

17:15.100 --> 17:16.140
这种写法

17:16.140 --> 17:16.940
然后呢

17:16.940 --> 17:18.380
版本是啥

17:18.380 --> 17:18.940
对吧

17:18.940 --> 17:19.580
描述是啥

17:19.580 --> 17:20.540
一般去发到离大堆

17:21.580 --> 17:22.220
那么这里会

17:22.220 --> 17:23.340
他就会给你生成

17:23.340 --> 17:24.460
一个拍给点节省文件

17:24.460 --> 17:25.580
主要就是生成这个文件

17:26.460 --> 17:27.500
这是一种做法

17:27.500 --> 17:28.300
还一种做法呢

17:28.300 --> 17:29.740
是npm in列车

17:29.740 --> 17:30.700
npm in列车

17:30.700 --> 17:32.140
就是你不要问我了

17:32.140 --> 17:33.100
全部都是业史

17:33.100 --> 17:34.300
全部都是默认的

17:34.300 --> 17:35.340
那么这样子他就自动

17:36.060 --> 17:36.940
全部用默认值

17:36.940 --> 17:38.060
给你生成这么一个文件

17:39.020 --> 17:40.780
那么为什么要说这个音列车呢

17:40.780 --> 17:41.500
是因为音列车

17:41.500 --> 17:42.460
还有一种用法

17:43.260 --> 17:44.140
还有什么用法呢

17:44.860 --> 17:45.420
比方说

17:45.420 --> 17:46.220
你看这

17:47.340 --> 17:48.300
我给你写来

17:48.300 --> 17:50.380
如果说你写的是npm in列车

17:50.380 --> 17:51.820
后面跟了一个包的名字

17:52.460 --> 17:54.060
就后面不是横杠弯

17:54.060 --> 17:55.500
是跟的是一个包的名字

17:56.060 --> 17:57.100
那么这个时候呢

17:57.100 --> 17:59.100
他等效于npmx

17:59.660 --> 18:00.860
前面加一个前罪

18:00.860 --> 18:01.420
craze

18:01.900 --> 18:02.620
包名

18:02.620 --> 18:03.580
这啥意思啊

18:03.580 --> 18:04.620
我给大家介绍一个

18:04.620 --> 18:05.580
教授家工具

18:06.140 --> 18:07.420
类似于无忧的

18:07.500 --> 18:08.460
你们以后呢

18:08.460 --> 18:09.180
会接触啊

18:09.180 --> 18:10.380
以后才会接触啊

18:10.380 --> 18:11.180
是无忧3

18:11.660 --> 18:12.300
带出来的

18:12.780 --> 18:13.820
一个工具呢

18:13.820 --> 18:15.260
名字叫做craze byte

18:16.140 --> 18:17.020
有这么一个工具

18:17.900 --> 18:19.900
这工具也可以搭建工程的

18:19.900 --> 18:20.540
也可以的

18:20.540 --> 18:21.020
比方说

18:21.020 --> 18:22.220
我这个随便举个例子

18:22.220 --> 18:23.100
就proj3吧

18:24.700 --> 18:25.580
我怎么搭工程呢

18:26.700 --> 18:28.140
就是搭5u3的工程呢

18:28.700 --> 18:32.140
我就可以使用npmxcrazevite

18:32.140 --> 18:32.860
craze byte

18:32.860 --> 18:35.660
然后后面写上一个proj3

18:36.620 --> 18:38.540
于是他就会下载这个包

18:38.540 --> 18:39.260
对不对

18:39.260 --> 18:40.060
下载这个包

18:40.060 --> 18:41.340
包的名字叫做craze byte

18:41.340 --> 18:41.820
vite

18:42.540 --> 18:43.260
下载这个包

18:43.260 --> 18:43.660
然后呢

18:44.380 --> 18:45.580
搭建一个proj3的工程

18:45.580 --> 18:46.460
因为这个参数呢

18:46.460 --> 18:47.740
是这个包要求的

18:48.300 --> 18:48.620
好

18:48.620 --> 18:49.020
我们回车

18:50.140 --> 18:51.020
他就会问你

18:51.020 --> 18:52.060
他就问你什么

18:52.060 --> 18:53.580
他就说craze byte

18:53.580 --> 18:54.300
不存在

18:54.300 --> 18:55.660
没这里本地有这个包吗

18:55.660 --> 18:56.300
没有这个包

18:56.300 --> 18:57.580
所以说要不要下载啊

18:57.580 --> 18:57.820
对吧

18:57.820 --> 18:59.020
就是刚才我说的

18:59.020 --> 19:00.300
第一次的时候他会问你

19:00.300 --> 19:00.940
我就下载

19:01.740 --> 19:03.580
于是他就会先把这个包下载下来

19:03.580 --> 19:04.780
那后来就进入了

19:05.740 --> 19:06.940
搭建工程的流程吧

19:06.940 --> 19:08.540
我就随便搭建个无忧吧

19:10.140 --> 19:10.380
好

19:10.380 --> 19:11.020
搭完了

19:12.540 --> 19:13.660
再刷新一下吧

19:14.700 --> 19:14.940
哎

19:14.940 --> 19:15.820
我搭到哪去了

19:16.380 --> 19:16.700
哦

19:16.700 --> 19:18.300
我刚才已经

19:18.940 --> 19:20.380
搭到回收站里面去了

19:20.380 --> 19:20.780
你看

19:20.780 --> 19:22.300
却也去搭到回收站里面去了

19:22.300 --> 19:23.260
我再重新看一下

19:23.260 --> 19:24.300
跟目录里面来

19:25.020 --> 19:25.180
好

19:25.180 --> 19:25.820
再来一次啊

19:27.900 --> 19:28.460
你看第二次

19:28.460 --> 19:29.420
他就不需要下载了

19:29.420 --> 19:30.780
因为零是目录已经有了

19:30.780 --> 19:30.940
好

19:30.940 --> 19:31.660
我们搭建无忧

19:33.820 --> 19:34.140
好

19:34.140 --> 19:34.620
你看

19:34.620 --> 19:35.420
是不是搭出来了

19:35.500 --> 19:36.780
然后这里面没有安装遗弹

19:38.380 --> 19:38.780
好

19:38.780 --> 19:40.060
那么这种写法

19:40.060 --> 19:43.020
就是NPS CreateVisProject3

19:43.020 --> 19:43.740
这种写法

19:43.740 --> 19:48.300
等效于NPM音列之VisProject3

19:48.300 --> 19:48.780
一样的

19:49.500 --> 19:50.540
你自己对应一下吧

19:51.100 --> 19:52.220
就这样子写

19:52.220 --> 19:53.500
等于NPS

19:53.500 --> 19:55.820
他会自动的把V次前面加上一个Create

19:57.100 --> 19:57.740
懂了意思吧

19:57.740 --> 19:58.220
一样的

19:59.180 --> 20:00.220
你看是不是一样的

20:00.220 --> 20:00.460
对吧

20:00.460 --> 20:01.180
后边演示了

20:01.660 --> 20:02.140
一样的

20:02.780 --> 20:04.300
我就要说的就是这个

20:04.300 --> 20:05.100
那么后边几个呢

20:05.820 --> 20:07.820
如果说你的包名是这种写法的话

20:07.820 --> 20:08.540
那么等效于

20:08.540 --> 20:09.420
因为有些包的名字

20:09.420 --> 20:11.020
他有个前面的Ata命名空间

20:11.580 --> 20:12.460
就像有些企业

20:13.420 --> 20:14.940
企业下面有很多的包

20:14.940 --> 20:16.060
那么企业的名字

20:16.060 --> 20:17.020
就是命名空间

20:17.740 --> 20:18.220
然后呢

20:18.220 --> 20:18.940
或者是

20:18.940 --> 20:21.740
一些大的产品的名字就要命名空间

20:21.740 --> 20:22.860
然后后边写杠

20:22.860 --> 20:24.140
后边是具体的包的名字

20:24.140 --> 20:25.260
它可能是这种写法

20:25.260 --> 20:26.620
那么如果说你这样的写的话

20:26.620 --> 20:27.980
等效于NPS

20:28.540 --> 20:30.300
命名空间写杠Create

20:30.300 --> 20:31.900
如果说你是这样的写法的话

20:31.900 --> 20:34.780
等效于NPS命名空间Create包名

20:34.860 --> 20:36.460
你自己去对应一下就完事了

20:37.100 --> 20:38.620
这就不再追溯了

20:38.620 --> 20:40.220
这些东西都不用去计

20:40.220 --> 20:41.580
了解一下就行了

20:41.580 --> 20:43.180
直到NPS大概是做什么事的

20:43.180 --> 20:45.340
它就是来下载一个命令

20:45.340 --> 20:46.140
然后执行

20:46.540 --> 20:47.580
如果说本地有的话

20:47.580 --> 20:48.540
就直接用本地的

20:48.540 --> 20:49.500
就起这么一个作用

20:49.900 --> 20:50.380
好吧

20:50.380 --> 20:51.820
OK 这是关于这个NPS

20:51.820 --> 20:53.500
面试的时候不太会考这个

20:53.900 --> 20:55.580
当然也没什么好考的对吧

20:55.580 --> 20:58.780
只是让大家作为一个常识了解一下

20:59.420 --> 20:59.820
OK

