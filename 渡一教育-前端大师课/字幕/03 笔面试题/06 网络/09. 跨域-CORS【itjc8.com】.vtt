WEBVTT

00:00.240 --> 00:05.740
好 同学们 这些课呢 咱们来学习用CORS这种方案来解决跨域

00:05.740 --> 00:09.740
这种方案呢 首先同学们要知道 对于前端开发者啊

00:09.740 --> 00:14.740
他不需要做任何事情 你只需要去请求 你就发现

00:14.740 --> 00:17.740
神奇的就可以跨域了 比方说我们举个例子

00:17.740 --> 00:21.740
比方我们在百度里面 百度里面呢 我们去请求那个京东

00:21.740 --> 00:24.740
所以有跨域啊 对吧 跟原地址不一样嘛

00:24.740 --> 00:32.960
您是我们去请求京东啊 ATPS 3W.京东 调抗

00:32.960 --> 00:36.960
你会发现他没有爆错 说明啥呀 说明跨域成功了

00:36.960 --> 00:39.960
请求成功了 只是我们没有去拿他的结果

00:39.960 --> 00:44.460
其实我们完全可以去拿一下他的结果 拿一下节省

00:44.460 --> 00:49.960
各式转换一下 然后再来个任 把输出

00:54.720 --> 00:57.720
不能转换人的节省啊 因为他得到了网页

00:57.720 --> 01:00.720
他不是节省各式 那我们就把它转换成一个纯纹

01:00.720 --> 01:03.720
你看是不是拿到京东的这个页面的响应结果

01:03.720 --> 01:07.220
是一个完整的ATPS 后边没有显示的啊

01:07.220 --> 01:10.220
还有很多很多 还有154个字节

01:10.220 --> 01:14.220
总之呢 这一块呢 他就没有造成跨域

01:14.220 --> 01:17.220
他明明跨域的 但是没有任何的跨域问题产生

01:17.220 --> 01:20.220
对吧 那说明啥呢 所以他跨域问题已经解决了

01:20.220 --> 01:23.220
我们前端做了啥事 前端啥事没做

01:23.220 --> 01:25.220
就一个飞机代码去请求 就发现解决了

01:25.220 --> 01:29.720
所以说 他怎么解决的呢 他就是使用CORS的方案来解决的

01:29.720 --> 01:33.220
那么这种方案呢 会对我们服务器开发造成影响

01:33.220 --> 01:35.220
就是如果说我们开发服务器的话

01:35.220 --> 01:38.720
是一个后端开发人员 那么他要编写一段代码

01:38.720 --> 01:40.720
来解决这个跨域问题

01:40.720 --> 01:43.720
对我们前端开发者而言 只需要去请求就行了

01:43.720 --> 01:47.720
但是我们前端开发者还是必须要了解这种跨域方案

01:47.720 --> 01:51.720
这种跨域方案呢 他虽然代码没有什么代码

01:51.720 --> 01:54.720
但是呢 他的原理呢 还是比较多的

01:54.720 --> 01:59.220
不过大家放心 我们需要花一点时间 给他详细讲解

01:59.220 --> 02:01.220
讲完了之后你就明白了

02:01.220 --> 02:06.220
所以我们大概来了解一下 他是ATB 1.1的一种跨域方案 解决方案

02:06.220 --> 02:09.720
那么在ATB 1.1这个版本之前呢 是没有这种方案的

02:09.720 --> 02:12.220
我们过去呢 使用的是另一种方案 叫做接胜P

02:12.220 --> 02:14.720
接胜P的限制就有点多了

02:14.720 --> 02:20.220
所以现在呢 如果说要解决跨域 那么使用CORS这种方案是非常多的

02:20.720 --> 02:25.720
他的全身叫做CORS Origin Resource Sharing 叫做跨域支援共享

02:26.720 --> 02:28.720
那么他到底是啥意思呢?

02:28.720 --> 02:30.720
他的意思非常简单

02:30.720 --> 02:33.720
浏览器为什么要设置这些跨域的障碍

02:33.720 --> 02:37.720
是因为他觉得跨域访问的 不可能会带来一些安全性的问题

02:37.720 --> 02:41.720
但是如果说的跨域访问 得到了服务器的允许

02:41.720 --> 02:44.720
服务器说 哎呀 都是自己人 给你给你给你

02:44.720 --> 02:47.720
那服务器都说话了 那浏览器没有必要再拒绝了

02:48.220 --> 02:50.220
因此呢 他的总体思路就是

02:50.220 --> 02:55.220
你要访问 跨域访问你服务器的资源 那么需要得到服务器的允许

02:55.220 --> 02:58.220
那么大概就是这样子 浏览器发出一个消息说

02:58.220 --> 03:02.220
我这一块确实是阿迪克斯请求来跨域访问了

03:02.220 --> 03:05.220
那么你要不要让我获取你的资源啊

03:05.220 --> 03:07.220
服务器说 可以 有败款

03:07.220 --> 03:09.220
那么这个时候呢 浏览器就会把这个结果

03:09.220 --> 03:11.220
它就不会再说限制直接给你

03:11.220 --> 03:13.220
就这么一个简单的意思

03:13.720 --> 03:16.220
但是呢 我们要知道啊 一个请求啊

03:16.220 --> 03:17.720
它会带到很多的信息

03:17.720 --> 03:20.720
比方说我可能是一个简单的获取一些新闻

03:20.720 --> 03:24.220
获取一些产品 一些获取的请求 比方说GET请求

03:24.220 --> 03:27.720
但是也有可能我会修改一些数据 比方说PoS请求

03:27.720 --> 03:30.720
对吧 或者要删除一些数据GET请求

03:30.720 --> 03:33.220
或者是只是做一个登录PoS请求

03:33.220 --> 03:37.220
就它的请求呢 附带的信息有可能是不一样的

03:37.220 --> 03:40.220
不同的信息呢 它可能会对服务器造成不同的影响

03:40.220 --> 03:42.720
比方说你只是拿一些新闻数据

03:42.720 --> 03:44.720
那服务器影响很小 对吧

03:44.720 --> 03:46.720
我只是给力的一些数据而已

03:46.720 --> 03:48.720
但是如果说你要删除一个东西

03:48.720 --> 03:51.720
或者是你要修改一个东西 你要添加一个东西

03:51.720 --> 03:53.720
那么对服务器的影响可能就比较大了

03:53.720 --> 03:58.720
所以说COR也是它规定了三种不同的交互模式

03:58.720 --> 04:00.720
第一个呢 是简单请求

04:00.720 --> 04:02.720
简单请求的意思就是

04:02.720 --> 04:05.720
我对你造成了没有太大的影响

04:05.720 --> 04:07.720
就是拿一些东西而已

04:07.720 --> 04:09.220
或者是简单的处理一些东西而已

04:09.220 --> 04:10.720
没有太大的影响

04:10.720 --> 04:13.220
第二种呢 是需要预检的请求

04:13.220 --> 04:17.220
这种请求的可能就会对服务器造成一些影响

04:17.220 --> 04:19.220
比方说我要删除一个东西

04:19.220 --> 04:20.220
要修改一个东西

04:20.220 --> 04:22.220
可能会造成一些比较严重的影响

04:22.220 --> 04:25.220
第三种呢 就是附带身份评据的请求

04:25.220 --> 04:27.220
那这种影响就比较大了

04:27.220 --> 04:29.220
我是要把用户的身份给力

04:29.220 --> 04:31.220
我要通过这个身份去做一些事

04:31.220 --> 04:33.220
比方说我是一个管理员的身份

04:33.220 --> 04:35.220
我也通过Cookie发送给力

04:35.220 --> 04:38.220
然后告诉你 我希望通过管理员去

04:38.220 --> 04:40.220
处理一些事

04:40.220 --> 04:42.220
比方说我要添加另外一个管理员

04:42.220 --> 04:45.220
我或者是要添加一篇文章等等

04:45.220 --> 04:47.220
就把身份评证发过去了

04:47.220 --> 04:49.220
那么这些情况呢

04:49.220 --> 04:52.220
到对服务器造成的严重程度

04:52.220 --> 04:53.220
都是不相同的

04:53.220 --> 04:56.220
从上到下对服务器造成的影响

04:56.220 --> 04:57.220
越来越大

04:57.220 --> 04:58.220
你看是不是这个样子

04:58.220 --> 05:00.220
获取数据没什么影响

05:00.220 --> 05:02.220
但是你要去

05:02.220 --> 05:04.220
比方说你要添加一个数据

05:04.220 --> 05:05.220
添加一个数据

05:05.220 --> 05:08.220
或者是你要去删除一个数据

05:08.220 --> 05:09.220
影响就可能比较大了

05:09.220 --> 05:11.220
那你待要身份评证有权限的

05:11.220 --> 05:13.220
那么影响可能更大了

05:13.220 --> 05:16.220
从上到下影响一事地争

05:16.220 --> 05:18.220
由于它的影响越来越大

05:18.220 --> 05:20.220
所以说呢

05:20.220 --> 05:23.220
要求也就越来越严格

05:23.220 --> 05:25.220
因此在CORS里边

05:25.220 --> 05:26.220
它没有一刀切

05:26.220 --> 05:28.220
不是说允许和不允许

05:28.220 --> 05:30.220
它要分情况的

05:30.220 --> 05:32.220
有的时候我们面试提到

05:32.220 --> 05:33.220
它就会考虑

05:33.220 --> 05:34.220
第一个请求

05:34.220 --> 05:37.220
它问你这种请求属于哪一种请求

05:37.220 --> 05:39.220
就属于CORS里边哪一种请求

05:39.220 --> 05:40.220
它是简单的请求

05:40.220 --> 05:41.220
还是这种请求

05:41.220 --> 05:42.220
还是这种请求

05:42.220 --> 05:44.220
你要把它区分出来

05:44.220 --> 05:45.220
那么最重要的

05:45.220 --> 05:47.220
你要区分出简单请求

05:47.220 --> 05:48.220
因为你简单请求

05:48.220 --> 05:50.220
一旦知道它是不是简单请求

05:50.220 --> 05:51.220
就很容易区分出

05:51.220 --> 05:52.220
后边两种请求

05:52.220 --> 05:55.220
好 我们首先来看简单请求

05:55.220 --> 05:57.220
当你用阿迦克斯

05:57.220 --> 05:59.220
去发送一个请求的时候

05:59.220 --> 06:01.220
无论你是用什么样的阿迦克斯

06:01.220 --> 06:03.220
过去的XML-ATB request

06:03.220 --> 06:05.220
我们把它简称为XHR

06:05.220 --> 06:07.220
或者是废起API

06:07.220 --> 06:09.220
对吧 我们现在常用的废起API

06:09.220 --> 06:10.220
无论你是用哪一种

06:10.220 --> 06:11.220
都是阿迦克斯

06:11.220 --> 06:13.220
你只要用阿迦克斯发送请求

06:13.220 --> 06:15.220
那么刘亮奇他会首先判断

06:15.220 --> 06:18.220
你到底是属于哪一种请求

06:18.220 --> 06:20.220
那么首先看简单请求

06:20.220 --> 06:21.220
它怎么来判断

06:21.220 --> 06:23.220
它是不是一个简单请求

06:23.220 --> 06:25.220
只要同时满足

06:25.220 --> 06:26.220
下面三个条件

06:26.220 --> 06:28.220
它就是一个简单请求

06:28.220 --> 06:29.220
第一个条件

06:29.220 --> 06:31.220
它并请求方法必须是

06:31.220 --> 06:32.220
这三个当中的一个

06:32.220 --> 06:34.220
一个黑的我们不用管

06:34.220 --> 06:36.220
就这两个GetPost

06:36.220 --> 06:37.220
是比较常见的

06:37.220 --> 06:39.220
所以说我们简单请求的

06:39.220 --> 06:40.220
也不一定是GetPost请求

06:40.220 --> 06:41.220
它有可能是Post请求

06:41.220 --> 06:43.220
Post请求也有可能会是简单请求

06:43.220 --> 06:45.220
总之请求方法必须是

06:45.220 --> 06:47.220
这三个当中的一个的

06:47.220 --> 06:48.220
第一个条件

06:48.220 --> 06:49.220
同时满足

06:49.220 --> 06:50.220
第二个条件

06:50.220 --> 06:52.220
请求头里边

06:52.220 --> 06:53.220
必须要包含

06:53.220 --> 06:56.220
只包含安全的之段

06:56.220 --> 06:58.220
就是没有其他乱七八糟的之段

06:58.220 --> 07:00.220
安全之段就这么一些

07:00.220 --> 07:01.220
你不用去计

07:01.220 --> 07:02.220
你只需要知道

07:02.220 --> 07:04.220
你不要在里边随随便便的

07:04.220 --> 07:06.220
去加一些请求头

07:06.220 --> 07:08.220
你加了一些请求头之后

07:08.220 --> 07:10.220
它就不再是一个简单请求了

07:10.220 --> 07:11.220
举个例子吧

07:11.220 --> 07:12.220
比方说我这里

07:12.220 --> 07:13.220
去百度去请求京东

07:13.220 --> 07:14.220
我们刚才可以看到

07:14.220 --> 07:15.220
可以跨域的对吧

07:15.220 --> 07:17.220
我们用Get请求去跨域的

07:17.220 --> 07:18.220
那么我们现在

07:18.220 --> 07:20.220
去用这种方式

07:20.220 --> 07:22.220
3W点

07:22.220 --> 07:23.220
京东点抗

07:23.220 --> 07:26.220
然后我给它加一个

07:26.220 --> 07:30.720
加一个Header吧

07:30.720 --> 07:31.720
加一个Header

07:31.720 --> 07:33.720
等于123

07:33.720 --> 07:35.720
你看是不是有跨域问题了

07:35.720 --> 07:37.720
为什么说明京东

07:37.720 --> 07:40.720
说明京东它只允许简单请求

07:40.720 --> 07:41.720
不是简单请求

07:41.720 --> 07:42.720
它就不允许了对吧

07:42.720 --> 07:43.720
为什么不是简单请求了

07:43.720 --> 07:44.720
因为我们带了一个

07:44.720 --> 07:46.720
自定义的请求头

07:46.720 --> 07:48.720
它就不再是简单请求了

07:48.720 --> 07:50.720
它不允许跨域了

07:50.720 --> 07:52.720
总之请求头这个条件

07:52.720 --> 07:54.720
你不需要去记着些

07:54.720 --> 07:55.720
你只需要知道

07:55.720 --> 07:56.720
你没有去额外的一些

07:56.720 --> 07:58.720
乱七八糟的请求头

07:58.720 --> 07:59.720
就行了

07:59.720 --> 08:00.720
第三个条件

08:00.720 --> 08:02.720
其中有一个请求头

08:02.720 --> 08:03.720
叫做content type

08:03.720 --> 08:05.720
这个一般在pose请求

08:05.720 --> 08:06.720
就是提交的时候

08:06.720 --> 08:07.720
会有这个字段对吧

08:07.720 --> 08:09.720
表示高速服务器

08:09.720 --> 08:10.720
我的请求体里边

08:10.720 --> 08:13.720
到底是一个什么样的内想

08:13.720 --> 08:15.720
我们通常用RTX的时候

08:15.720 --> 08:16.720
是不是会把它设为

08:16.720 --> 08:18.720
IPDK请节省

08:18.720 --> 08:19.720
对不对

08:19.720 --> 08:20.720
其实它的曲子

08:20.720 --> 08:22.720
它的曲子还有这么一些

08:22.720 --> 08:24.720
它都是合法的content type

08:26.720 --> 08:27.720
当我们的content type

08:27.720 --> 08:30.720
只限于下边这三个指的时候

08:30.720 --> 08:32.720
它认为是一个简单请求

08:32.720 --> 08:34.720
就是这样的指

08:34.720 --> 08:35.720
你发现没

08:35.720 --> 08:38.720
它没有包含IPDK请节省

08:38.720 --> 08:40.720
是不是没有包含IPDK请节省

08:40.720 --> 08:41.720
对吧

08:41.720 --> 08:43.720
我们平时去请求服务器的时候

08:43.720 --> 08:45.720
是不是content透着请求的时候

08:45.720 --> 08:49.720
content type都会设为IPDK请节省

08:49.720 --> 08:51.720
它没有包含这个字段

08:51.720 --> 08:53.720
没有包含这个字段

08:53.720 --> 08:54.720
说明啥

08:54.720 --> 08:56.720
说明我们如果说

08:56.720 --> 08:59.720
用RTX请求发送这样的一个请求体过去

08:59.720 --> 09:01.720
那么它会认为

09:01.720 --> 09:03.720
这不是一个简单请求

09:03.720 --> 09:05.720
简单请求必须要三个条件

09:05.720 --> 09:06.720
都要满足

09:06.720 --> 09:08.720
好 那么我们来复习一下

09:08.720 --> 09:10.720
看一下下边这些例子

09:10.720 --> 09:12.720
他们到底是不是简单请求

09:12.720 --> 09:13.720
首先第一个请求

09:13.720 --> 09:14.720
我们通过RTX飞起

09:14.720 --> 09:15.720
去请求这个地址

09:15.720 --> 09:16.720
比方都是跨域的

09:16.720 --> 09:18.720
都是跨域请求

09:18.720 --> 09:20.720
这个玩意是不是简单请求呢

09:20.720 --> 09:21.720
首先看第一个条件

09:21.720 --> 09:23.720
它是什么方法

09:23.720 --> 09:25.720
请求方法介绍

09:25.720 --> 09:26.720
是不是满足

09:26.720 --> 09:27.720
第二个条件

09:27.720 --> 09:28.720
请求头里边

09:28.720 --> 09:30.720
有没有附带一些乱七八糟的东西

09:30.720 --> 09:31.720
没有

09:31.720 --> 09:33.720
那么第二条件满足

09:33.720 --> 09:34.720
第三个条件

09:34.720 --> 09:35.720
请求中的content type

09:35.720 --> 09:36.720
它不是铺设请求

09:36.720 --> 09:37.720
它是介绍请求

09:37.720 --> 09:39.720
个人没有content type

09:39.720 --> 09:40.720
所以说呢

09:40.720 --> 09:43.720
这种请求它就是一个简单请求

09:43.720 --> 09:45.720
好 看第二个

09:45.720 --> 09:46.720
我给它发送一个铺设请求

09:46.720 --> 09:48.720
这是不是简单请求

09:48.720 --> 09:49.720
它就不是

09:49.720 --> 09:51.720
因为铺设请求

09:51.720 --> 09:52.720
它不属于这个

09:52.720 --> 09:53.720
三种请求方法中的一个

09:53.720 --> 09:55.720
它不是简单请求

09:55.720 --> 09:56.720
第三个

09:56.720 --> 09:57.720
我们看这个请求

09:57.720 --> 09:59.720
是不是简单请求

09:59.720 --> 10:01.720
加了一个乱七八糟的消息头

10:01.720 --> 10:02.720
是不是

10:02.720 --> 10:03.720
它不是简单请求

10:03.720 --> 10:04.720
第四个

10:04.720 --> 10:05.720
铺设请求

10:05.720 --> 10:06.720
是不是简单请求

10:06.720 --> 10:08.720
没有加乱七八糟的消息头

10:08.720 --> 10:09.720
也没有content type

10:09.720 --> 10:10.720
也没有去设置

10:10.720 --> 10:11.720
没有设置的话

10:11.720 --> 10:12.720
content type

10:12.720 --> 10:14.720
默认为这个

10:14.720 --> 10:16.720
对

10:16.720 --> 10:17.720
它默认为这个

10:17.720 --> 10:18.720
所以说

10:18.720 --> 10:20.720
它是一个简单请求

10:20.720 --> 10:21.720
对吧

10:21.720 --> 10:22.720
然后呢

10:22.720 --> 10:24.720
我们再看下面

10:24.720 --> 10:25.720
这个content

10:25.720 --> 10:26.720
这个呢

10:26.720 --> 10:28.720
它是不是简单请求呢

10:28.720 --> 10:29.720
它不是

10:29.720 --> 10:30.720
因为我们把content type

10:30.720 --> 10:31.720
改成什么了

10:31.720 --> 10:32.720
改成IPTK请节省

10:32.720 --> 10:33.720
对吧

10:33.720 --> 10:34.720
它就不是简单请求

10:34.720 --> 10:35.720
懂得意思吗

10:35.720 --> 10:36.720
我们要学会

10:36.720 --> 10:37.720
怎么来判断

10:37.720 --> 10:39.720
它是不是一个简单请求

10:39.720 --> 10:40.720
好

10:40.720 --> 10:41.720
知道了

10:41.720 --> 10:42.720
怎么来判断简单请求之后

10:42.720 --> 10:43.720
如果说

10:43.720 --> 10:44.720
它是一个简单请求

10:44.720 --> 10:45.720
它是怎么交互的呢

10:45.720 --> 10:46.720
我们一个个看

10:46.720 --> 10:47.720
首先第一步

10:47.720 --> 10:49.720
它请求发出去的时候

10:49.720 --> 10:51.720
浏览器会自动的

10:51.720 --> 10:52.720
给请求头里边

10:52.720 --> 10:53.720
添加一个

10:53.720 --> 10:54.720
特殊的制断

10:54.720 --> 10:55.720
叫做ORIGIN

10:56.720 --> 10:57.720
这个制断是要

10:57.720 --> 10:58.720
高速服务器

10:58.720 --> 10:59.720
我这个请求的

10:59.720 --> 11:01.720
页面圆

11:01.720 --> 11:02.720
是什么

11:03.720 --> 11:04.720
我们在

11:04.720 --> 11:05.720
统原策略那一节课

11:05.720 --> 11:06.720
是不是学过了

11:06.720 --> 11:07.720
页面的圆

11:07.720 --> 11:08.720
一面的圆说简单的

11:08.720 --> 11:09.720
就是这个

11:09.720 --> 11:10.720
对吧

11:10.720 --> 11:11.720
它把这个圆

11:11.720 --> 11:12.720
给它带过去

11:12.720 --> 11:13.720
就高速服务器

11:13.720 --> 11:14.720
我现在是这个圆

11:14.720 --> 11:15.720
我现在这个圆

11:15.720 --> 11:16.720
发育请求里的

11:16.720 --> 11:17.720
这个东西

11:17.720 --> 11:18.720
懂的意思吧

11:18.720 --> 11:19.720
它会高速服务器

11:19.720 --> 11:21.720
页面的圆

11:21.720 --> 11:23.720
我们来看一下吧

11:23.720 --> 11:24.720
比方说

11:24.720 --> 11:25.720
我们现在去请求京东

11:25.720 --> 11:26.720
在这

11:26.720 --> 11:27.720
找到这个

11:27.720 --> 11:28.720
network

11:28.720 --> 11:29.720
把这个控制台拿开

11:29.720 --> 11:31.720
把这个取掉

11:31.720 --> 11:32.720
完了

11:32.720 --> 11:36.930
现在我们去请求京东

11:36.930 --> 11:37.930
三点

11:37.930 --> 11:41.460
好

11:41.460 --> 11:42.460
回车

11:42.460 --> 11:43.460
这是不是简单请求

11:43.460 --> 11:44.460
肯定是一个简单请求

11:44.460 --> 11:45.460
对吧

11:45.460 --> 11:46.460
然后我们来看一下

11:46.460 --> 11:48.960
这个请求

11:48.960 --> 11:50.960
request headers

11:50.960 --> 11:51.960
你看这里面

11:51.960 --> 11:53.960
是不是一个orange

11:53.960 --> 11:54.960
看到没

11:54.960 --> 11:55.960
是不是把百度

11:55.960 --> 11:56.960
目前页面的圆

11:56.960 --> 11:57.960
带过去了

11:57.960 --> 11:58.960
那么那边

11:58.960 --> 11:59.960
京东的服务器

11:59.960 --> 12:00.960
我们请求的是什么

12:00.960 --> 12:01.960
请求的是京东

12:01.960 --> 12:02.960
但是我们把

12:02.960 --> 12:03.960
页面的圆带过去了

12:03.960 --> 12:04.960
那么这样子

12:04.960 --> 12:05.960
京东的服务器

12:05.960 --> 12:06.960
是不是只知道

12:06.960 --> 12:07.960
原来你那边

12:07.960 --> 12:08.960
在跨域过来

12:08.960 --> 12:09.960
谁在跨域

12:09.960 --> 12:10.960
还是百度在跨域

12:10.960 --> 12:11.960
懂的意思吧

12:11.960 --> 12:12.960
它会把这个东西

12:12.960 --> 12:13.960
带给服务器

12:13.960 --> 12:14.960
就询问服务器

12:14.960 --> 12:15.960
行不行吗

12:15.960 --> 12:16.960
你就说吧

12:16.960 --> 12:17.960
给个通话

12:17.960 --> 12:18.960
好

12:18.960 --> 12:19.960
接下来服务器

12:20.960 --> 12:21.960
要响应了

12:21.960 --> 12:22.960
响应的时候

12:22.960 --> 12:23.960
它就要告诉你行不行

12:24.960 --> 12:25.960
如果说服务器

12:25.960 --> 12:26.960
觉得可以

12:26.960 --> 12:27.960
没问题的话

12:27.960 --> 12:29.960
它会在响应头里边

12:29.960 --> 12:31.960
加上这么一个东西

12:31.960 --> 12:32.960
xs

12:32.960 --> 12:34.960
表示访问

12:34.960 --> 12:35.960
ctrl

12:35.960 --> 12:36.960
访问控制

12:36.960 --> 12:37.960
allow

12:37.960 --> 12:38.960
允许orange

12:38.960 --> 12:39.960
远

12:39.960 --> 12:40.960
访问控制

12:40.960 --> 12:42.960
允许哪些远

12:42.960 --> 12:43.960
它会通过

12:43.960 --> 12:44.960
这个字段告诉你

12:44.960 --> 12:45.960
告诉你乱七

12:45.960 --> 12:46.960
它会告诉你

12:46.960 --> 12:47.960
它的曲直

12:47.960 --> 12:48.960
有这么两种

12:48.960 --> 12:49.960
一种是新号

12:49.960 --> 12:50.960
表示服务器说

12:50.960 --> 12:52.960
哎呀我很开放的

12:52.960 --> 12:53.960
朋友多

12:53.960 --> 12:54.960
你跨域访问

12:54.960 --> 12:55.960
我就允许吧

12:55.960 --> 12:56.960
我允许所有的

12:56.960 --> 12:58.960
远来进行跨域访问

12:58.960 --> 12:59.960
当然也包括你

12:59.960 --> 13:01.960
那么就把个新号

13:01.960 --> 13:02.960
给它

13:02.960 --> 13:03.960
都是一种写法

13:03.960 --> 13:04.960
那么我们来看一下

13:04.960 --> 13:05.960
京东这一块

13:05.960 --> 13:07.960
它服务器的响应结果里边

13:07.960 --> 13:08.960
它为什么可以跨域

13:08.960 --> 13:09.960
因为服务器的

13:09.960 --> 13:10.960
响应结果里边

13:10.960 --> 13:11.960
有了

13:11.960 --> 13:13.960
肯定是有这么一句话

13:13.960 --> 13:14.960
你看

13:14.960 --> 13:15.960
xs

13:15.960 --> 13:16.960
ctrl

13:16.960 --> 13:17.960
新号

13:18.960 --> 13:19.960
是告诉你乱七

13:19.960 --> 13:21.960
我允许你跨域

13:21.960 --> 13:22.960
对所有的网站

13:22.960 --> 13:23.960
我都允许跨域

13:24.960 --> 13:25.960
另外一种写法

13:25.960 --> 13:27.960
是具体的源

13:27.960 --> 13:28.960
比方说我只允许

13:28.960 --> 13:30.960
百度来跨域

13:31.960 --> 13:32.960
那么比方说

13:32.960 --> 13:33.960
这边

13:33.960 --> 13:34.960
这个新号

13:35.960 --> 13:36.960
如果说它不这样的写

13:36.960 --> 13:37.960
不这样的写法

13:37.960 --> 13:38.960
它会有另外一种写法

13:38.960 --> 13:39.960
比方说它允许

13:39.960 --> 13:40.960
actps

13:40.960 --> 13:41.960
3w.

13:41.960 --> 13:42.960
百度.com

13:43.960 --> 13:44.960
那么说

13:44.960 --> 13:46.960
我只有跟你是朋友

13:46.960 --> 13:47.960
对吧

13:47.960 --> 13:49.960
我跟其他人就不是朋友

13:49.960 --> 13:50.960
我跟你是朋友

13:50.960 --> 13:52.960
然后允许你来跨域访问

13:52.960 --> 13:53.960
其他就说

13:53.960 --> 13:55.960
就这么个意思

13:55.960 --> 13:56.960
这就是

13:56.960 --> 13:58.960
它的两种书写方式

13:58.960 --> 13:59.960
那么这一块

14:00.960 --> 14:01.960
因为你们倒是

14:01.960 --> 14:03.960
不太会去开发服务器

14:03.960 --> 14:04.960
如果说将来

14:04.960 --> 14:05.960
你们设计到开发服务器

14:05.960 --> 14:06.960
我准备多说一句

14:06.960 --> 14:08.960
最好使用这种方式

14:08.960 --> 14:10.960
你别看京东使用的是新号

14:10.960 --> 14:12.960
最好使用这种方式

14:12.960 --> 14:13.960
不要使用新号

14:13.960 --> 14:14.960
避免造成问题

14:14.960 --> 14:16.960
除非你掌握这一块掌握的

14:16.960 --> 14:17.960
特别的

14:18.960 --> 14:20.960
离业的特别的就是彻底

14:20.960 --> 14:21.960
那么你才可以

14:21.960 --> 14:22.960
随心所欲的去使用

14:22.960 --> 14:23.960
但是如果说

14:23.960 --> 14:24.960
离业没有那么彻底的话

14:24.960 --> 14:26.960
使用这种方式

14:26.960 --> 14:27.960
要好得多

14:27.960 --> 14:28.960
那你就敢问了

14:28.960 --> 14:30.960
那用这种方式的话

14:30.960 --> 14:31.960
那不是

14:31.960 --> 14:32.960
如果说我向对所有人开发

14:32.960 --> 14:33.960
怎么办呢

14:33.960 --> 14:34.960
也可以做得到

14:34.960 --> 14:36.960
你动态的设置

14:36.960 --> 14:37.960
比方说

14:37.960 --> 14:38.960
从百度跨域

14:38.960 --> 14:39.960
去访问京东的时候

14:39.960 --> 14:40.960
京东这一块

14:40.960 --> 14:42.960
比方说我们现在通过百度

14:43.960 --> 14:48.530
去访问京东

14:48.530 --> 14:49.530
访问京东的时候

14:49.530 --> 14:50.530
京东这一块的奖因

14:50.530 --> 14:51.530
就是百度

14:51.530 --> 14:53.530
AGPS3W9.0 百度点抗

14:53.530 --> 14:54.530
那如果说

14:54.530 --> 14:55.530
我们通过淘宝去访问京东的话

14:55.530 --> 14:57.530
那么他想应该淘宝的就变了

14:57.530 --> 14:58.530
他变成了

14:58.530 --> 15:00.530
AGPS3W.0淘宝点抗

15:00.530 --> 15:01.530
他动态的

15:01.530 --> 15:03.530
这一块可以在服务器动态的设置

15:03.530 --> 15:05.530
根据你是哪个源过来的

15:05.530 --> 15:07.530
我给你设置不同的语

15:07.530 --> 15:09.530
也要比写新号要强

15:09.530 --> 15:11.530
写新号倒是写程序

15:11.530 --> 15:12.530
比较简单一点

15:12.530 --> 15:13.530
但是

15:13.530 --> 15:14.530
他会造成一些

15:14.530 --> 15:16.530
后续的一些问题

15:16.530 --> 15:17.530
建议不要用新号

15:17.530 --> 15:18.530
多说一句

15:18.530 --> 15:19.530
其实跟你们开发

15:19.530 --> 15:22.970
没有什么关系的

15:22.970 --> 15:23.970
那么假设

15:23.970 --> 15:24.970
服务器说出了以下响应

15:24.970 --> 15:25.970
那么就是

15:25.970 --> 15:26.970
高速浏览器

15:26.970 --> 15:29.970
我允许这个语跨源

15:29.970 --> 15:31.970
浏览器看到服务器

15:31.970 --> 15:32.970
允许了之后

15:32.970 --> 15:33.970
就非常高兴了

15:33.970 --> 15:34.970
于是

15:34.970 --> 15:36.970
他就把这个响应结果

15:36.970 --> 15:37.970
顺利的交给介绍室

15:37.970 --> 15:38.970
他就没有跨越问题了

15:38.970 --> 15:40.970
已完成了后续操作

15:40.970 --> 15:42.970
下面这张图就非常清楚了

15:42.970 --> 15:43.970
其实简单请求

15:43.970 --> 15:45.970
就是我通过这个Origin

15:45.970 --> 15:46.970
告诉你

15:46.970 --> 15:47.970
我是哪个语过来的

15:47.970 --> 15:48.970
服务器看

15:48.970 --> 15:49.970
允许允许

15:49.970 --> 15:50.970
然后他就告诉你

15:50.970 --> 15:51.970
这个语我是允许的

15:51.970 --> 15:52.970
那浏览器

15:52.970 --> 15:54.970
他就不会再进行逐致了

15:54.970 --> 15:55.970
他会把东西交给介绍室

15:55.970 --> 15:57.970
来完成后续操作

15:57.970 --> 15:59.970
这就是简单请求

15:59.970 --> 16:00.970
一样了吧

16:00.970 --> 16:01.970
简单请求

16:01.970 --> 16:02.970
首先判定

16:02.970 --> 16:03.970
什么是

16:03.970 --> 16:04.970
是不是简单请求

16:04.970 --> 16:05.970
如果是

16:05.970 --> 16:08.970
就进入这样的一个规则

16:08.970 --> 16:09.970
好

16:09.970 --> 16:10.970
那么接下来我们继续往后看

16:10.970 --> 16:13.970
如果他不是一个简单请求

16:13.970 --> 16:16.970
如果说不是一个简单请求

16:16.970 --> 16:18.970
那么十之八九

16:18.970 --> 16:23.970
他就是一个需要预见的请求

16:23.970 --> 16:24.970
好

16:24.970 --> 16:27.970
如果说他是一个需要预见的请求

16:27.970 --> 16:30.970
那么又会按照什么逻辑来走

16:30.970 --> 16:31.970
所以我们只需要

16:31.970 --> 16:32.970
判断到底是什么请求

16:32.970 --> 16:33.970
我们只需要知道

16:33.970 --> 16:34.970
什么叫简单请求

16:34.970 --> 16:35.970
他不是简单请求

16:35.970 --> 16:36.970
我们就可以认为

16:36.970 --> 16:38.970
他是一个需要预见的请求

16:38.970 --> 16:39.970
还有一种请求

16:39.970 --> 16:40.970
你会再说

16:40.970 --> 16:42.970
这个请求比较特殊

16:42.970 --> 16:43.970
如果说你是一个

16:43.970 --> 16:44.970
需要预见的请求的话

16:44.970 --> 16:46.970
那么就可能会对服务器

16:46.970 --> 16:47.970
造成一些威胁

16:47.970 --> 16:48.970
可能在这个威胁

16:48.970 --> 16:49.970
还不算特别大

16:49.970 --> 16:52.970
最大的是这个身份评论

16:52.970 --> 16:53.970
那么这个时候

16:53.970 --> 16:56.970
他会按照下面的流程来走

16:56.970 --> 16:58.970
首先优烂器

16:58.970 --> 17:00.970
会发送一个预见请求

17:00.970 --> 17:01.970
询问服务器

17:01.970 --> 17:02.970
允不允许

17:02.970 --> 17:03.970
比方说

17:03.970 --> 17:04.970
我现在要修改服务器的数据

17:04.970 --> 17:05.970
我发送了一个迫托请求

17:05.970 --> 17:06.970
对吧

17:06.970 --> 17:08.970
他就肯定是一个预见请求

17:08.970 --> 17:09.970
但是

17:09.970 --> 17:10.970
如果说遇到预见请求的时候

17:10.970 --> 17:11.970
但是我会

17:11.970 --> 17:13.970
不会立即给你发送消息

17:13.970 --> 17:14.970
我会先问一下

17:14.970 --> 17:15.970
你在敲窗门

17:15.970 --> 17:17.970
拍一个秘书过去

17:17.970 --> 17:18.970
先问一下

17:18.970 --> 17:19.970
万一别人根本不允许

17:19.970 --> 17:21.970
我提交了办

17:21.970 --> 17:22.970
我提交了一大堆数据过去

17:22.970 --> 17:23.970
他不是浪费时间吗

17:23.970 --> 17:24.970
对吧

17:24.970 --> 17:25.970
他不允许去说按那边

17:25.970 --> 17:27.970
所以他会进行一个预见

17:27.970 --> 17:29.970
询问服务器是否允许

17:29.970 --> 17:31.970
如果说服务器允许了

17:31.970 --> 17:32.970
那么流烂器

17:32.970 --> 17:33.970
才会发送真实的请求

17:33.970 --> 17:34.970
然后服务器

17:34.970 --> 17:35.970
才会完成真实的想念

17:35.970 --> 17:36.970
对吧

17:36.970 --> 17:37.970
他会通过两次请求

17:37.970 --> 17:39.970
因此简单请求了

17:39.970 --> 17:40.970
他只是一次

17:40.970 --> 17:42.970
一个过来一个过去就完了

17:42.970 --> 17:43.970
而需要预见的请求

17:43.970 --> 17:45.970
还会发送两次

17:45.970 --> 17:47.970
预见请求

17:47.970 --> 17:48.970
OK

17:48.970 --> 17:49.970
服务器那边允许

17:49.970 --> 17:51.970
然后再发送真实的请求

17:51.970 --> 17:52.970
那如果说预见的时候

17:52.970 --> 17:53.970
服务器不允许了

17:53.970 --> 17:54.970
不允许

17:54.970 --> 17:55.970
那就完蛋了

17:55.970 --> 17:57.970
那后面的真实请求

17:57.970 --> 17:58.970
不会发出去了

17:58.970 --> 17:59.970
有的时候

17:59.970 --> 18:00.970
我们可以通过这个

18:00.970 --> 18:01.970
网络消息

18:01.970 --> 18:03.970
可以看到有这么一个现象出现

18:03.970 --> 18:05.970
比方说我们去请求京东

18:06.970 --> 18:08.970
给他发送一个预见请求吧

18:08.970 --> 18:09.970
这里我该带一个header

18:09.970 --> 18:11.970
所谓预见请求了

18:11.970 --> 18:12.970
发过去

18:12.970 --> 18:13.970
你看这里是个预见

18:13.970 --> 18:14.970
造成的跨域

18:14.970 --> 18:15.970
我们来看一下这个请求

18:15.970 --> 18:16.970
这个请求在流烂器里面

18:16.970 --> 18:17.970
显示的就是

18:17.970 --> 18:19.970
没有给你标识出预见请求

18:19.970 --> 18:20.970
流烂器里面

18:20.970 --> 18:21.970
他觉得没有必要

18:21.970 --> 18:22.970
给你标识出来

18:22.970 --> 18:23.970
但是我们可以看到

18:23.970 --> 18:24.970
他有个特点

18:24.970 --> 18:25.970
他出现这么一个警告

18:25.970 --> 18:26.970
对吧

18:26.970 --> 18:27.970
说明

18:27.970 --> 18:28.970
这个警告说明啥

18:28.970 --> 18:29.970
说明这个请求

18:29.970 --> 18:31.970
根本就没有真实的发出去

18:32.970 --> 18:34.970
为什么没有真实的发出去

18:34.970 --> 18:36.970
预见阶段就失败了

18:36.970 --> 18:37.970
有这么一个意识

18:37.970 --> 18:38.970
好

18:38.970 --> 18:39.970
那么他具体

18:39.970 --> 18:40.970
比方说我们看一下

18:40.970 --> 18:41.970
这个一个例子

18:41.970 --> 18:44.970
我们现在在我们这个预里面

18:44.970 --> 18:45.970
页面是这个页面

18:45.970 --> 18:47.970
页面的圆是这个

18:47.970 --> 18:48.970
地址南上是这个

18:48.970 --> 18:50.970
然后我们发出一个跨域请求

18:50.970 --> 18:52.970
我们给他设置了一个

18:52.970 --> 18:53.970
特殊的消息头

18:53.970 --> 18:54.970
不光设置特殊的消息头

18:54.970 --> 18:55.970
我们还给他设置

18:55.970 --> 18:56.970
这个content type

18:56.970 --> 18:57.970
等于IPTK已经节省

18:57.970 --> 18:59.970
我们不是常这样做吗

18:59.970 --> 19:00.970
发送预见请求的时候

19:00.970 --> 19:01.970
我们要提交消息

19:01.970 --> 19:03.970
我们一般都是节省格式

19:03.970 --> 19:04.970
那我们这样子发出去

19:04.970 --> 19:06.970
肯定是一个需要预见的请求

19:06.970 --> 19:08.970
那么这个时候他怎么做

19:08.970 --> 19:09.970
第一步

19:09.970 --> 19:10.970
那肯定是两个两次请求了

19:10.970 --> 19:12.970
第一是预见

19:12.970 --> 19:13.970
预见的时候

19:13.970 --> 19:16.970
他的请求方法是opins

19:18.970 --> 19:20.970
这是一种特殊的请求方法

19:20.970 --> 19:21.970
他高速服务器

19:21.970 --> 19:23.970
我现在正在预见

19:23.970 --> 19:24.970
我不是要做什么事情

19:24.970 --> 19:25.970
我就是在检查

19:25.970 --> 19:27.970
像你能不能让我发送

19:27.970 --> 19:29.970
询问服务器是否允许

19:29.970 --> 19:30.970
那么在这个请求里边

19:30.970 --> 19:31.970
他会给他附加

19:31.970 --> 19:33.970
三个消息头

19:33.970 --> 19:34.970
一个是orange

19:34.970 --> 19:35.970
跟那个

19:35.970 --> 19:37.970
我们刚刚看那个简单请求是一样的

19:37.970 --> 19:39.970
高速服务器我是哪个园过来的

19:40.970 --> 19:43.970
然后还有两个额外的消息头

19:43.970 --> 19:44.970
一个是

19:44.970 --> 19:45.970
access control

19:45.970 --> 19:47.970
表示访问控制

19:47.970 --> 19:49.970
request method

19:49.970 --> 19:50.970
啥意思

19:50.970 --> 19:51.970
请求方法

19:51.970 --> 19:52.970
我用的请求方法

19:52.970 --> 19:54.970
我接下来要真实的请求

19:54.970 --> 19:55.970
我真实的请求用的方法是什么

19:55.970 --> 19:57.970
不是预见请求的方法

19:57.970 --> 19:59.970
我真实的请求是不是post

19:59.970 --> 20:00.970
我接下来一会

20:00.970 --> 20:02.970
我会来一个post请求

20:02.970 --> 20:03.970
行不行

20:03.970 --> 20:05.970
然后还有一个

20:05.970 --> 20:06.970
就是access control

20:06.970 --> 20:07.970
request headers

20:07.970 --> 20:08.970
告诉服务器

20:09.970 --> 20:11.970
我一会会来一个post请求

20:11.970 --> 20:14.970
我会带一些特殊的请求头

20:15.970 --> 20:16.970
一个是a

20:16.970 --> 20:17.970
一个是b

20:17.970 --> 20:18.970
一个是content type

20:18.970 --> 20:19.970
都是比较特殊的请求头

20:19.970 --> 20:20.970
a

20:20.970 --> 20:21.970
b

20:21.970 --> 20:22.970
content type

20:22.970 --> 20:23.970
到时候你简

20:23.970 --> 20:24.970
到时候如果说你允许的

20:24.970 --> 20:26.970
我带这些特殊的请求头的话

20:26.970 --> 20:27.970
你就告诉我一声

20:27.970 --> 20:28.970
不允许那就算了

20:29.970 --> 20:30.970
好

20:30.970 --> 20:33.970
这就是预见请求发出去的东西

20:33.970 --> 20:34.970
他不是说

20:34.970 --> 20:36.970
他不是一个真实的请求

20:36.970 --> 20:37.970
他不是一个真实的

20:37.970 --> 20:38.970
我们的就是

20:38.970 --> 20:39.970
要做那个post的请求

20:39.970 --> 20:41.970
而是一个简常的请求

20:41.970 --> 20:42.970
他只有消息想应的

20:43.970 --> 20:45.970
请求中不包含我们的

20:45.970 --> 20:46.970
就是请求头

20:49.280 --> 20:50.280
他也没有请求体

20:53.280 --> 20:54.280
对

20:54.280 --> 20:55.280
他请求里边

20:55.280 --> 20:56.280
他不包含ab吧

20:56.280 --> 20:57.280
包含没

20:57.280 --> 20:58.280
没包含吗

20:58.280 --> 20:59.280
也不包含content type

20:59.280 --> 21:00.280
他只是告诉我

21:00.280 --> 21:01.280
告诉服务器一会

21:01.280 --> 21:02.280
我会来一个ab

21:02.280 --> 21:03.280
来一个content type

21:05.280 --> 21:06.280
他是这个意思

21:08.980 --> 21:09.980
那么预见请求

21:09.980 --> 21:10.980
他有这么几个特征

21:10.980 --> 21:11.980
一个是

21:11.980 --> 21:12.980
请求方法为all请示

21:12.980 --> 21:13.980
他没有请求体

21:13.980 --> 21:14.980
请求头里边包含这三个

21:15.980 --> 21:16.980
好 接下来我们来看服务器那边

21:16.980 --> 21:17.980
服务器那边

21:17.980 --> 21:18.980
收到过后他就会进行处理

21:18.980 --> 21:20.980
那么这要写服务器程序了

21:20.980 --> 21:21.980
跟里面就没有多好关系了

21:22.980 --> 21:23.980
服务器那边他会进行处理

21:23.980 --> 21:25.980
如果说他不允许的话

21:25.980 --> 21:26.980
那就啥也别管了

21:26.980 --> 21:27.980
他这些东西一个不带

21:27.980 --> 21:29.980
只要少带一个他就不允许

21:31.980 --> 21:32.980
他如果说允许的话

21:32.980 --> 21:33.980
跟简单请求一样

21:33.980 --> 21:35.980
简单请求如果说服务器不允许的话

21:35.980 --> 21:36.980
那么他这个东西他就不带

21:36.980 --> 21:38.980
比方说简单请求我们看一下

21:38.980 --> 21:40.980
我们去请求fetch

21:45.060 --> 21:46.060
比方请求淘宝吧

21:48.060 --> 21:49.060
好 我们来看

21:49.060 --> 21:50.060
他不允许

21:50.060 --> 21:51.060
我们看一下淘宝

21:51.060 --> 21:53.060
淘宝的响应头里边

21:53.060 --> 21:54.060
响应头里边

21:55.060 --> 21:57.060
对吧 他没有

21:57.060 --> 21:58.060
只要他少了这个响应头

21:58.060 --> 22:00.060
那他肯定是不允许

22:02.060 --> 22:03.060
我们去看看

22:03.060 --> 22:04.060
如果说他允许怎么办

22:05.060 --> 22:06.060
允许的话

22:06.060 --> 22:08.060
还是要加一个

22:12.840 --> 22:14.840
一个还是要跟简单请求一样

22:14.840 --> 22:15.840
要加这个东西

22:15.840 --> 22:16.840
你可以写信号

22:16.840 --> 22:17.840
也可以写具体的域名

22:17.840 --> 22:19.840
表示我允许你访问

22:19.840 --> 22:20.840
这是第一个必须要加的

22:21.840 --> 22:22.840
除此之外

22:22.840 --> 22:24.840
还要加一些东西

22:24.840 --> 22:25.840
一个是这个

22:26.840 --> 22:28.840
你不是许认我poster请求

22:28.840 --> 22:29.840
你不允许吗

22:29.840 --> 22:30.840
那我就告诉你

22:30.840 --> 22:31.840
我允许哪些请求

22:31.840 --> 22:32.840
我就告诉你

22:32.840 --> 22:33.840
我允许poster

22:33.840 --> 22:34.840
没问题

22:35.840 --> 22:36.840
然后你不是许认我

22:36.840 --> 22:38.840
你要加一些消息头过来吗

22:38.840 --> 22:40.840
ab content type

22:40.840 --> 22:41.840
那我告诉你

22:41.840 --> 22:43.840
可以允许a

22:43.840 --> 22:44.840
可以允许b

22:44.840 --> 22:45.840
可以允许content type

22:45.840 --> 22:46.840
对吧

22:46.840 --> 22:47.840
这叫允许

22:47.840 --> 22:48.840
那如果说

22:48.840 --> 22:49.840
这个东西跟前面的对不上

22:49.840 --> 22:50.840
对不上就完蛋了

22:50.840 --> 22:51.840
对不上的话

22:51.840 --> 22:52.840
那就不允许了

22:52.840 --> 22:54.840
比方说你

22:54.840 --> 22:55.840
请求poster过来

22:55.840 --> 22:56.840
那我允许的请求是

22:56.840 --> 22:57.840
poster

22:57.840 --> 22:58.840
那对不上

22:58.840 --> 22:59.840
流量器对不上

22:59.840 --> 23:00.840
那就完蛋了

23:00.840 --> 23:01.840
然后还要

23:01.840 --> 23:03.840
这个东西是可写可不写的

23:03.840 --> 23:04.840
这个东西告诉你

23:04.840 --> 23:05.840
流量器是什么呢

23:05.840 --> 23:07.840
就是你现在预检了

23:07.840 --> 23:10.840
之后我一直都是这种规则

23:10.840 --> 23:11.840
你也不用再重复了预检

23:11.840 --> 23:13.840
就是我这一次预检完成之后

23:13.840 --> 23:14.840
你之后给我通信

23:14.840 --> 23:15.840
你把这个事情求过来

23:15.840 --> 23:17.840
你就不用再重新预检了

23:17.840 --> 23:18.840
相当于是我缓存

23:18.840 --> 23:20.840
这个就是缓存的时间

23:20.840 --> 23:23.840
86400秒

23:23.840 --> 23:24.840
缓存这么久

23:24.840 --> 23:26.840
相当于是一天

23:26.840 --> 23:28.840
3600乘以24乘以24

23:28.840 --> 23:30.840
一天

23:30.840 --> 23:32.840
这就是缓存的时间

23:32.840 --> 23:33.840
如果说没有这个东西的话

23:33.840 --> 23:34.840
它每一次后续的

23:34.840 --> 23:35.840
凡是所有预检请求

23:35.840 --> 23:37.840
它都要先预检

23:37.840 --> 23:38.840
有了这个东西过后

23:38.840 --> 23:39.840
它只有第一次预检

23:39.840 --> 23:40.840
那后续呢

23:40.840 --> 23:41.840
在一天之内

23:41.840 --> 23:42.840
就不用再重新预检了

23:42.840 --> 23:44.840
我后边的规则都一样的

23:44.840 --> 23:45.840
就这么个意思

23:45.840 --> 23:46.840
好 那么

23:46.840 --> 23:47.840
这就是完成了

23:47.840 --> 23:48.840
前面两次交互了

23:48.840 --> 23:49.840
对不对

23:49.840 --> 23:51.840
一次预检请求

23:51.840 --> 23:52.840
好 那么后续呢

23:52.840 --> 23:53.840
如果说服务性允许了

23:53.840 --> 23:54.840
后续还发动真实的请求

23:54.840 --> 23:55.840
好 咱们来看

23:55.840 --> 23:56.840
真实的请求

23:56.840 --> 23:57.840
后续的真实请求

23:57.840 --> 24:01.840
就跟那个简单请求差不多了

24:01.840 --> 24:03.840
就是一样的了

24:03.840 --> 24:04.840
发动真实请求的时候

24:04.840 --> 24:06.840
顺便带一个orange

24:06.840 --> 24:07.840
到服务器

24:07.840 --> 24:09.840
服务器呢

24:09.840 --> 24:11.840
告诉你

24:11.840 --> 24:12.840
允不允许这个orange

24:12.840 --> 24:13.840
后续的请求

24:13.840 --> 24:15.840
跟简单请求是一样的了

24:15.840 --> 24:16.840
后续处理简单请求相当于

24:16.840 --> 24:17.840
它只不过前面

24:17.840 --> 24:18.840
会加一个预检

24:18.840 --> 24:20.840
那么整个消息的交互过程的就是

24:20.840 --> 24:21.840
你看

24:21.840 --> 24:22.840
预检

24:23.840 --> 24:24.840
然后真实请求

24:24.840 --> 24:26.840
真实请求跟简单请求是一样的

24:26.840 --> 24:30.840
只不过它这里多了一丝预检

24:30.840 --> 24:31.840
好 这就是这一块

24:31.840 --> 24:34.840
需要预检的请求

24:34.840 --> 24:35.840
好 最后一个

24:35.840 --> 24:38.840
需要附带身份评证的请求

24:38.840 --> 24:39.840
就是你们之前做项目的时候

24:39.840 --> 24:41.840
也会发现好像做了

24:41.840 --> 24:42.840
了解机器人的时候

24:42.840 --> 24:43.840
应该就会有这个现象

24:43.840 --> 24:44.840
对吧

24:44.840 --> 24:47.840
我要带一个cookie过去

24:47.840 --> 24:48.840
如果说

24:48.840 --> 24:51.840
不知道当时有没有去带那个cookie

24:51.840 --> 24:53.840
如果说当时不用的不是cookie的话

24:53.840 --> 24:54.840
我们学过cookie的对不对

24:54.840 --> 24:55.840
我们要带一个cookie过去

24:55.840 --> 24:57.840
cookie是浏览器自动带过去的

24:57.840 --> 24:59.840
但是如果说你是跨域的话

24:59.840 --> 25:00.840
它不会给你自动带过去

25:00.840 --> 25:02.840
它不会带的

25:02.840 --> 25:04.840
跨域的情况下

25:04.840 --> 25:06.840
如果说你要带cookie过去的话

25:06.840 --> 25:07.840
你要加上这么一句话

25:07.840 --> 25:10.840
如果说你用那个xhr的话

25:10.840 --> 25:12.840
那么你要加上这么一句话

25:12.840 --> 25:13.840
如果说你用非鞋api的话

25:13.840 --> 25:15.840
你要加上这么一个东西

25:15.840 --> 25:18.840
它才会把cookie给它带过去

25:18.840 --> 25:19.840
那么带cookie的话

25:19.840 --> 25:20.840
就有身份认证了

25:20.840 --> 25:22.840
那么这个时候呢

25:22.840 --> 25:25.840
浏览器觉得带了cookie的话

25:25.840 --> 25:26.840
要求就要搞一些了

25:26.840 --> 25:28.840
限制就要更严格一些了

25:28.840 --> 25:29.840
那么它会怎么做呢

25:29.840 --> 25:32.840
它就跟那个预检请求一样

25:32.840 --> 25:35.840
还是要先预检

25:35.840 --> 25:37.840
那么在预检的时候

25:37.840 --> 25:39.840
它会在这里加上一个cookie

25:39.840 --> 25:40.840
要预检的时候

25:40.840 --> 25:43.840
不然这里会加上一个cookie

25:43.840 --> 25:45.840
除了这两个消息头之外

25:45.840 --> 25:47.840
我还会带一个cookie过来

25:47.840 --> 25:50.840
就是要先要进行预检

25:50.840 --> 25:51.840
那么预检的时候

25:51.840 --> 25:52.840
服务器要响应啊

25:52.840 --> 25:54.840
服务器要告诉它

25:54.840 --> 25:57.840
允不允许这样的一个东西

25:57.840 --> 26:00.840
那么它要带上这么一个响应头

26:00.840 --> 26:01.840
就在预检的时候

26:01.840 --> 26:03.840
它要带上这么一个响应头

26:03.840 --> 26:06.840
就是xs control allow credentials

26:06.840 --> 26:10.840
就评证把设为true就可以了

26:10.840 --> 26:12.840
如果说服务器没有带

26:12.840 --> 26:14.840
没有再带这个东西

26:14.840 --> 26:16.840
那么浏览器仍然认为

26:16.840 --> 26:19.840
服务器是拒绝的

26:19.840 --> 26:21.840
那么这里有还有一个规则

26:21.840 --> 26:22.840
就是对于预检的

26:22.840 --> 26:25.840
就是对于带身份评证的寻求

26:25.840 --> 26:28.840
服务器是不能设置为这个为信号的

26:28.840 --> 26:30.840
浏览器觉得这个太危险了

26:30.840 --> 26:33.840
可能你为了写代码简单

26:33.840 --> 26:34.840
你给我来个信号

26:34.840 --> 26:36.840
那么就针对所有的网站

26:36.840 --> 26:37.840
所有的话语都可以附带

26:37.840 --> 26:39.840
哭泣过来

26:39.840 --> 26:41.840
这样子可能危险程度就比较高了

26:41.840 --> 26:43.840
所以它让你多写点代码

26:43.840 --> 26:46.840
提醒你自己你在做什么

26:46.840 --> 26:47.840
就是这么个意思

26:47.840 --> 26:48.840
所以说我故意什么推荐大家

26:48.840 --> 26:49.840
不要使用信号

26:49.840 --> 26:50.840
就是这个原因

26:50.840 --> 26:54.840
其实官方也不是很推荐大家使用信号

26:54.840 --> 26:56.840
好 这是关于一个身份评证的寻求

26:56.840 --> 26:58.840
那么这些致使呢

26:58.840 --> 27:01.840
整个交通了就基本完成了

27:01.840 --> 27:03.840
最后来做一个额外的补充

27:03.840 --> 27:05.840
就是有的时候呢

27:05.840 --> 27:07.840
就跨域访问的时候

27:07.840 --> 27:10.840
虽然说浏览器服务器允许了

27:10.840 --> 27:12.840
但是浏览器也不会把

27:12.840 --> 27:15.840
浏览的服务器的享用头给力

27:15.840 --> 27:18.840
服务器有些享用它不会给力的

27:18.840 --> 27:19.840
那么这个时候呢

27:19.840 --> 27:22.840
服务器要主动告诉浏览器

27:22.840 --> 27:25.840
它能够获取到哪些享用头

27:25.840 --> 27:27.840
那么比方说服务器给

27:27.840 --> 27:30.840
服务器跟那个浏览器的消息里边

27:30.840 --> 27:32.840
包含了Authorization AB

27:32.840 --> 27:33.840
我记得这个事情

27:33.840 --> 27:35.840
好像就是在聊天机器的那边

27:35.840 --> 27:36.840
就出现过

27:36.840 --> 27:39.540
来看一下吧

27:39.540 --> 27:40.540
在聊天机器的那边

27:40.540 --> 27:44.940
我记得登录的时候就出现过

27:44.940 --> 27:45.940
比方说我们这里呢

27:45.940 --> 27:46.940
项目API一个登录

27:46.940 --> 27:48.940
我们来看一下一个登录吧

27:48.940 --> 27:49.940
我们在百度里边

27:49.940 --> 27:51.940
这是百度的控制台

27:51.940 --> 27:54.940
我在百度里边去访问我们这个地址

27:54.940 --> 27:55.940
这个地址是

27:55.940 --> 27:57.940
aptps

27:57.940 --> 28:00.940
starly.edu.com

28:00.940 --> 28:04.940
API user login

28:04.940 --> 28:07.940
然后呢请求方法

28:07.940 --> 28:10.940
messure post

28:10.940 --> 28:12.940
然后

28:12.940 --> 28:16.720
请求方法

28:16.720 --> 28:18.720
然后是

28:18.720 --> 28:20.720
Pedals刚设置一下

28:20.720 --> 28:27.960
那我们看

28:27.960 --> 28:30.960
干脆就在这里写吧

28:30.960 --> 28:38.370
在代码里面写吧

28:38.370 --> 28:43.520
Pedals里边我们加上一个

28:43.520 --> 28:45.520
不加什么请求的

28:45.520 --> 28:47.520
加上那个content type要加

28:47.520 --> 28:48.520
content type

28:48.520 --> 28:51.890
IPK型

28:51.890 --> 28:56.440
接收

28:56.440 --> 28:59.440
然后呢给它发一个消息过去

28:59.440 --> 29:00.440
body

29:00.440 --> 29:01.440
接收

29:01.440 --> 29:02.440
是军机犯

29:02.440 --> 29:03.440
登录嘛

29:03.440 --> 29:04.440
登录的话

29:04.440 --> 29:05.440
它要填两个东西

29:05.440 --> 29:06.440
一个是login id

29:06.440 --> 29:07.440
也是

29:07.440 --> 29:08.440
它的密码

29:08.440 --> 29:10.440
账号密码

29:10.440 --> 29:12.440
login password

29:12.440 --> 29:13.440
23

29:13.440 --> 29:15.440
好我们来完成一个登录

29:15.440 --> 29:16.440
来吧

29:16.440 --> 29:18.440
来看一下啊

29:18.440 --> 29:20.440
这肯定跨越了对不对

29:20.440 --> 29:21.440
那肯定是跨越了

29:21.440 --> 29:22.440
毫无疑问的

29:22.440 --> 29:24.440
我们再等来一个输出吧

29:24.440 --> 29:39.180
来一个输出

29:39.180 --> 29:41.180
好拿到消息结果了对吧

29:41.180 --> 29:43.180
那么说明跨越成功了

29:43.180 --> 29:45.180
我们好像没有什么感觉

29:45.180 --> 29:47.180
服务器那边实际上是做了事的

29:47.180 --> 29:50.180
我们来看一下这个服务器想应的过程

29:50.180 --> 29:51.180
login

29:51.180 --> 29:53.180
他这个预检肯定有预检

29:53.180 --> 29:54.180
预检请求大家没有

29:54.180 --> 29:57.180
他没有那个把各位标出来了

29:57.180 --> 29:59.180
这里有个现象就是

29:59.180 --> 30:00.180
服务器那边是不是在想应头里边

30:00.180 --> 30:02.180
给我们加了一个authorization啊

30:02.180 --> 30:04.180
是不是加了这么一个东西

30:04.180 --> 30:05.180
对不对

30:05.180 --> 30:07.180
那我们这边能不能获取到这个authorization啊

30:07.180 --> 30:09.180
我们来这边获取一下

30:09.180 --> 30:11.180
在这里获取吧

30:11.180 --> 30:16.990
我打印一下啊

30:16.990 --> 30:19.990
打印一下好像是在哪个哪个里边

30:19.990 --> 30:20.990
Headers里边啊

30:20.990 --> 30:22.990
Headers里边

30:22.990 --> 30:24.990
Headers

30:24.990 --> 30:26.990
authorization

30:26.990 --> 30:27.990
能不能获取到

30:27.990 --> 30:29.990
大写的吗

30:29.990 --> 30:33.810
Response

30:33.810 --> 30:36.810
Headers

30:36.810 --> 30:38.810
这用介绍

30:38.810 --> 30:40.810
用介绍慢慢来获取

30:40.810 --> 30:42.810
authorization

30:42.810 --> 30:43.810
是不是可以获取到

30:43.810 --> 30:45.810
能够拿到服务器的想应头

30:45.810 --> 30:47.810
想应头里边一个authorization

30:47.810 --> 30:48.810
很重要的对不对

30:48.810 --> 30:50.810
用来健全认证的

30:50.810 --> 30:52.810
这是我们的token

30:52.810 --> 30:53.810
就是我们的那个

30:53.810 --> 30:55.810
就是像那个证件

30:55.810 --> 30:56.810
那这个东西

30:56.810 --> 30:58.810
我为什么能获取到呢

30:58.810 --> 30:59.810
实际上

30:59.810 --> 31:01.810
如果说服务器想应结果里边

31:01.810 --> 31:02.810
没有这一行

31:02.810 --> 31:04.810
我是获取不到的

31:04.810 --> 31:06.810
因为这是一个特殊的想应头

31:06.810 --> 31:08.810
它不是一个

31:08.810 --> 31:09.810
常见的一些想应头

31:09.810 --> 31:11.810
比方说像content type

31:11.810 --> 31:13.810
content list啊这些

31:13.810 --> 31:14.810
它是一个特殊的

31:14.810 --> 31:15.810
服务器额外加的

31:15.810 --> 31:16.810
一个想应头

31:16.810 --> 31:17.810
默认情况下

31:17.810 --> 31:19.810
浏览器会阻止你获取这个东西

31:19.810 --> 31:20.810
你获取不到的

31:20.810 --> 31:21.810
你直水获取得到

31:21.810 --> 31:22.810
是因为浏览

31:22.810 --> 31:24.810
服务器高速的浏览器

31:24.810 --> 31:25.810
算了你就不要去

31:25.810 --> 31:26.810
限制他获取这个了

31:26.810 --> 31:27.810
告诉他这个

31:27.810 --> 31:30.810
想应头是可以被获取的

31:30.810 --> 31:31.810
是ok的

31:31.810 --> 31:33.810
加了这个东西

31:33.810 --> 31:34.810
浏览器才能获取

31:34.810 --> 31:35.810
尽管对我们前转开发

31:35.810 --> 31:36.810
没有什么影响

31:36.810 --> 31:38.810
但是你要知道这一点

31:38.810 --> 31:40.810
实际上服务器是做了事的

31:40.810 --> 31:41.810
ok

31:41.810 --> 31:42.810
这就是咱们这几个的全部内容

31:42.810 --> 31:43.810
然后呢

31:43.810 --> 31:44.810
给他说一下

31:44.810 --> 31:46.810
这一块面试题会怎么考

31:46.810 --> 31:48.810
首先他会考虑

31:48.810 --> 31:49.810
怎么去判定

31:49.810 --> 31:51.810
他到底是什么类型的

31:51.810 --> 31:52.810
请求简单请求

31:52.810 --> 31:53.810
还是需要预简的

31:53.810 --> 31:54.810
还是带身份评证的

31:54.810 --> 31:56.810
你怎么去验责

31:56.810 --> 31:59.810
首先看他是不是简单的

31:59.810 --> 32:00.810
好指

32:00.810 --> 32:01.810
对首先看这个

32:01.810 --> 32:03.810
首先看他是不是带身份评据的

32:03.810 --> 32:04.810
只要加了这个

32:04.810 --> 32:05.810
加了这个

32:05.810 --> 32:06.810
毫不疑问

32:06.810 --> 32:07.810
他肯定是带身份评据的

32:07.810 --> 32:08.810
肯定是使用这种方式

32:08.810 --> 32:09.810
要不要预检

32:09.810 --> 32:10.810
要预检的时候

32:10.810 --> 32:12.810
还要加上Cookie

32:12.810 --> 32:13.810
他是需要预简的请求

32:13.810 --> 32:15.810
这是一个

32:15.810 --> 32:18.810
如果说他不需要身份评证

32:18.810 --> 32:19.810
那么就看

32:19.810 --> 32:20.810
他是不是简单请求

32:20.810 --> 32:21.810
简单请求判定

32:21.810 --> 32:22.810
这样的判定

32:22.810 --> 32:24.810
这样判定是不是简单请求

32:24.810 --> 32:25.810
好

32:25.810 --> 32:26.810
那如说判定成功

32:26.810 --> 32:27.810
他就是简单请求

32:27.810 --> 32:28.810
判定失败

32:28.810 --> 32:29.810
他就是需要预简单请求

32:29.810 --> 32:30.810
再说一次

32:30.810 --> 32:32.810
先判断有没有带Cookie

32:32.810 --> 32:33.810
要不要带这个东西

32:33.810 --> 32:34.810
要

32:34.810 --> 32:35.810
那就说在这个东西

32:35.810 --> 32:36.810
如果说他不带

32:36.810 --> 32:37.810
那么就看他是不是简单请求

32:37.810 --> 32:38.810
不是

32:38.810 --> 32:39.810
那就是预简

32:39.810 --> 32:40.810
是

32:40.810 --> 32:41.810
就是简单

32:41.810 --> 32:42.810
是

32:42.810 --> 32:43.810
就是简单

32:43.810 --> 32:44.810
懂了意思吗

32:44.810 --> 32:45.810
好

32:45.810 --> 32:46.810
然后预简的请求

32:46.810 --> 32:47.810
身份评证的请求

32:47.810 --> 32:48.810
他都要来两次

32:48.810 --> 32:50.810
都要来两次的

32:50.810 --> 32:51.810
一次过去

32:51.810 --> 32:53.810
一次预简

32:53.810 --> 32:55.810
一次真实

32:55.810 --> 32:56.810
懂了意思吗

32:56.810 --> 32:57.810
真实请求跟简单请求

32:57.810 --> 32:59.810
就是一样的

32:59.810 --> 33:00.810
好

33:00.810 --> 33:01.810
OK

33:01.810 --> 33:03.810
这就是咱们CORS

33:03.810 --> 33:04.810
他的规则

33:04.810 --> 33:05.810
再说一次

33:05.810 --> 33:06.810
这个玩意儿

33:06.810 --> 33:07.810
跟我们平时开发

33:07.810 --> 33:08.810
没有太多影响

33:08.810 --> 33:09.810
主要的影响

33:09.810 --> 33:10.810
是在服务器团

33:10.810 --> 33:12.810
后端开发者要去处理

33:12.810 --> 33:13.810
OK

