WEBVTT

00:03.180 --> 00:07.180
好 我来聊一聊这个CSR2F 攻击

00:07.180 --> 00:10.180
这个玩意过去

00:10.180 --> 00:14.180
把那些做网站的那些公司下的头皮发码

00:14.180 --> 00:18.180
因为这种攻击方式特别的低成本

00:18.180 --> 00:20.180
就它基本上不要成不成本

00:20.180 --> 00:22.180
只要你只要知道它的攻击原理之后

00:22.180 --> 00:25.180
你两三行代码就可以完成攻击

00:25.180 --> 00:27.180
成本非常非常低

00:27.180 --> 00:30.180
而且攻击的效果特别好

00:30.180 --> 00:32.180
实现攻击特别简单

00:32.180 --> 00:34.180
就是它的特点

00:34.180 --> 00:37.180
而且它造成的影响和范围特别巨大

00:37.180 --> 00:39.180
损失也特别巨大

00:39.180 --> 00:42.180
它成本低到什么程度呢

00:42.180 --> 00:44.180
就是我只要做一个页面

00:44.180 --> 00:46.180
然后这个就是个静态页面 啥都没有

00:46.180 --> 00:49.180
连服务器那边我就把个页面放到服务器就完事了

00:49.180 --> 00:51.180
啥都没有

00:51.180 --> 00:52.180
就这么一个页面

00:52.180 --> 00:54.180
然后我就用各种标题党

00:54.180 --> 00:56.180
男人看到流泪

00:56.180 --> 00:58.180
男人看到沉默 女人看到流泪

00:58.180 --> 01:01.180
或者是什么10个男人9个受不了

01:01.180 --> 01:03.180
就是这种各种标题党

01:03.180 --> 01:05.180
然后把这个链接地址给你发出来

01:05.180 --> 01:06.180
到处发

01:06.180 --> 01:08.180
甚至我看你之前有些新闻

01:08.180 --> 01:10.180
国外就发这个地址

01:10.180 --> 01:12.180
都形成了一个传销组织

01:12.180 --> 01:14.180
它就是它把地址全世界发

01:14.180 --> 01:15.180
只要你点了这个地址

01:15.180 --> 01:16.180
啥都不用操作

01:16.180 --> 01:18.180
你点了这个地址你就完了

01:18.180 --> 01:21.180
就有这么厉害

01:21.180 --> 01:24.180
但是现在基本上这个玩意儿都会防

01:24.180 --> 01:27.180
所以我们网站的攻击和防护

01:27.180 --> 01:29.180
它是有这么一个大概的对应关系

01:29.180 --> 01:32.180
攻击越容易那么防护就越容易

01:32.180 --> 01:34.180
但是为什么这个CSRF攻击

01:34.180 --> 01:36.180
还会受到这么大的关注呢

01:36.180 --> 01:38.180
是因为最早的时候大家都没有发现

01:38.180 --> 01:40.180
所以说当时那些攻击者

01:40.180 --> 01:42.180
就特别容易产生攻击

01:42.180 --> 01:44.180
最早的时候是国外

01:44.180 --> 01:47.180
美国2000年2000年的时候

01:47.180 --> 01:49.180
可能很多朋友还没出事

01:49.180 --> 01:51.180
2000年的时候就发现了

01:51.180 --> 01:53.180
有这么一个问题存在

01:53.180 --> 01:54.180
有这么一个漏洞存在

01:54.180 --> 01:55.180
国内要晚一点

01:55.180 --> 01:57.180
国内也起不晚

01:57.180 --> 02:01.180
到2006年的时候才发现有这个东西

02:01.180 --> 02:03.180
后来发现之后就必须要做防护了

02:03.180 --> 02:05.180
其他防护并不复杂

02:05.180 --> 02:07.180
这一块会产生一个面试题

02:07.180 --> 02:08.180
面试题就问你

02:08.180 --> 02:10.180
让你谈一谈CSRF攻击

02:10.180 --> 02:11.180
现在基本上后端

02:11.180 --> 02:13.180
这个主要是要后端防护的话

02:13.180 --> 02:16.180
前端不需要你太多做什么事情

02:16.180 --> 02:17.180
后端那边要去做

02:17.180 --> 02:19.180
做任何一个网站

02:19.180 --> 02:20.180
那肯定要防护这个东西

02:20.180 --> 02:22.180
必须要把这个都补上

02:22.180 --> 02:24.180
基本上现在很多的后端框架

02:24.180 --> 02:26.180
它都是默认支持这个东西的

02:26.180 --> 02:28.180
那我们来调一调

02:28.180 --> 02:29.180
它到底是怎么攻击的

02:29.180 --> 02:31.180
为什么这么厉害

02:31.180 --> 02:33.180
现在我给他举个例子

02:33.180 --> 02:36.180
比方说你一看有一个银行

02:36.180 --> 02:38.180
它的网站叫band.com

02:38.180 --> 02:40.180
那么用户它是一个正常的网站

02:40.180 --> 02:42.180
是一个银行的网站

02:42.180 --> 02:44.180
然后用户去登录这个网站

02:44.180 --> 02:45.180
登录之后

02:45.180 --> 02:47.180
我们按照之前学习的技术

02:47.180 --> 02:48.180
是不是要给它一个抠戏

02:48.180 --> 02:49.180
对不对

02:49.180 --> 02:51.180
那么抠戏里面就会记录一个token

02:51.180 --> 02:53.180
我们这个用户表示一个令牌

02:53.180 --> 02:55.180
它表示之前登录过了

02:55.180 --> 02:56.180
那么用户自然而来

02:56.180 --> 02:58.180
它就会把一个token的记录下来

02:58.180 --> 03:00.180
就是一个小饼干

03:00.180 --> 03:02.180
那么cookie的就是这个

03:02.180 --> 03:04.180
含义就是个小饼干

03:04.180 --> 03:05.180
一个小文件

03:05.180 --> 03:06.180
把它记录下来之后

03:06.180 --> 03:08.180
它会记录一下cookie的域名

03:08.180 --> 03:09.180
就是band.com

03:09.180 --> 03:11.180
那么记住域名的

03:11.180 --> 03:12.180
那肯定是必要的

03:12.180 --> 03:13.180
为什么呢

03:13.180 --> 03:14.180
因为为了安全

03:14.180 --> 03:16.180
你不能把别的网站的cookie

03:16.180 --> 03:17.180
带到另外一个网站

03:17.180 --> 03:18.180
对吧

03:18.180 --> 03:19.180
所以说它会把一个域名记录下来

03:19.180 --> 03:21.180
只有以后访问这个网站的时候

03:21.180 --> 03:23.180
那么它才会把cookie带过去

03:23.180 --> 03:24.180
没问题吧

03:24.180 --> 03:25.180
第一步是一切都正常

03:25.180 --> 03:27.180
没有任何问题

03:27.180 --> 03:28.180
然后到了第二步

03:28.180 --> 03:30.180
这个时候攻击者

03:30.180 --> 03:32.180
他就到处全世界发各种链接

03:32.180 --> 03:33.180
他做了一个网页

03:33.180 --> 03:35.180
当然那个网页是涵盖了

03:35.180 --> 03:38.180
非常危险的代码

03:38.180 --> 03:39.180
做了这么一个网页

03:39.180 --> 03:40.180
他全世界发

03:40.180 --> 03:43.180
用各种标题让你去点击

03:43.180 --> 03:44.180
只要你点击了

03:44.180 --> 03:46.180
会产生什么样的后果呢

03:46.180 --> 03:47.180
那么比方说现在

03:47.180 --> 03:50.180
你这一步去点击了这个网站

03:50.180 --> 03:51.180
是一个非常危险的网站

03:51.180 --> 03:52.180
你不知道

03:52.180 --> 03:53.180
你就看那个标题党就进去了

03:53.180 --> 03:54.180
对吧

03:54.180 --> 03:55.180
滴滴热吧

03:55.180 --> 03:56.180
今天大肥温

03:56.180 --> 03:57.180
马上把点进去了

03:57.180 --> 03:59.180
然后点进去了之后呢

03:59.180 --> 04:00.180
这个网站呢

04:00.180 --> 04:02.180
后果给你响应一个页面

04:02.180 --> 04:03.180
这个页面响应啥

04:03.180 --> 04:04.180
其实已经不重要了

04:04.180 --> 04:06.180
只要给你想应了

04:06.180 --> 04:08.180
就已经完成攻击了

04:08.180 --> 04:09.180
你不需要做任何事情

04:09.180 --> 04:10.180
为什么呢

04:10.180 --> 04:11.180
你看一下

04:11.180 --> 04:12.180
响应这个页面

04:12.180 --> 04:13.180
这一步到是没有什么问题

04:13.180 --> 04:14.180
好像没有什么问题

04:14.180 --> 04:15.180
对吧

04:15.180 --> 04:16.180
然后接下来

04:16.180 --> 04:18.180
它会在页面里边加一行代码

04:18.180 --> 04:19.180
代码的非常简单

04:19.180 --> 04:20.180
就是一个图片

04:20.180 --> 04:21.180
这个图片呢

04:21.180 --> 04:22.180
JSA是把隐藏掉了

04:22.180 --> 04:24.180
Display

04:24.180 --> 04:25.180
无所谓吧

04:25.180 --> 04:27.180
反正我给你了这么一张图片

04:27.180 --> 04:28.180
这个图片呢

04:28.180 --> 04:29.180
不是目的

04:29.180 --> 04:30.180
目的是让你

04:30.180 --> 04:31.180
让你这个浏览器

04:31.180 --> 04:32.180
在渲染的过程中

04:32.180 --> 04:34.180
去请求这个地址

04:34.180 --> 04:35.180
请求到了谁呢

04:35.180 --> 04:36.180
你看吧

04:36.180 --> 04:38.180
他请求到了银行这个服务器

04:38.180 --> 04:40.180
然后比方说

04:40.180 --> 04:42.180
银行那边有一个接口

04:42.180 --> 04:43.180
叫Transfer

04:43.180 --> 04:44.180
表示转帐

04:44.180 --> 04:45.180
那么这个时候

04:45.180 --> 04:46.180
他比方说他

04:46.180 --> 04:47.180
他要求你传一些参数

04:47.180 --> 04:48.180
转帐给谁

04:48.180 --> 04:49.180
转多少钱

04:49.180 --> 04:50.180
那么他就会

04:50.180 --> 04:51.180
传两个参数

04:51.180 --> 04:52.180
比方说他传两个参数

04:52.180 --> 04:53.180
一个是two

04:53.180 --> 04:54.180
转给谁

04:54.180 --> 04:56.180
比方说他转给那个

04:56.180 --> 04:58.180
黑客的就是

04:58.180 --> 04:59.180
做这个页面的

04:59.180 --> 05:00.180
这个攻击者的

05:00.180 --> 05:01.180
自己的账户

05:01.180 --> 05:02.180
转多少钱呢

05:02.180 --> 05:04.180
比方说转十万块钱

05:04.180 --> 05:05.180
好那么这个图片

05:05.180 --> 05:06.180
链接都在这了

05:06.180 --> 05:07.180
放在这

05:07.180 --> 05:09.180
然后用户一渲染这个页面

05:09.180 --> 05:10.180
渲染这个的

05:10.180 --> 05:11.180
危险的页面

05:11.180 --> 05:12.180
理想一下这个道理

05:12.180 --> 05:13.180
他是不是得请求这个

05:13.180 --> 05:14.180
那这个跑不了吧

05:14.180 --> 05:15.180
他肯定得请求吧

05:15.180 --> 05:16.180
都是当途

05:16.180 --> 05:17.180
他也不知道这是啥玩意

05:17.180 --> 05:18.180
他只能请求

05:18.180 --> 05:20.180
那请求的时候你看

05:20.180 --> 05:22.180
那么就发生了一个

05:22.180 --> 05:23.180
转帐请求

05:23.180 --> 05:24.180
请求的是谁

05:24.180 --> 05:25.180
请求的是银银行

05:25.180 --> 05:27.180
由于请求的是银银行

05:27.180 --> 05:28.180
那之前的Cookie

05:28.180 --> 05:29.180
是不会带过去

05:29.180 --> 05:31.180
对吧

05:31.180 --> 05:32.180
请求银银行

05:32.180 --> 05:33.180
本身没有什么问题

05:33.180 --> 05:34.180
问题在这

05:34.180 --> 05:35.180
Cookie带过去了

05:35.180 --> 05:36.180
为什么Cookie会带过去

05:36.180 --> 05:37.180
因为你现在

05:37.180 --> 05:38.180
请求的地址

05:38.180 --> 05:39.180
跟你这个地址

05:39.180 --> 05:40.180
是不是一样的

05:40.180 --> 05:42.180
就是一样的

05:42.180 --> 05:43.180
那Cookie是不是

05:43.180 --> 05:44.180
肯定应该带过去

05:44.180 --> 05:45.180
那肯定应该带过去

05:45.180 --> 05:46.180
对吧

05:46.180 --> 05:47.180
Cookie带过去

05:47.180 --> 05:48.180
那么带过去

05:48.180 --> 05:49.180
银行一看

05:49.180 --> 05:50.180
Cookie没问题

05:50.180 --> 05:51.180
让你登陆过的

05:51.180 --> 05:52.180
你是这个用户

05:52.180 --> 05:53.180
你之前已经登过

05:53.180 --> 05:54.180
势力本人

05:54.180 --> 05:55.180
势力本人

05:55.180 --> 05:56.180
然后他就完成了

05:56.180 --> 05:57.180
这个转帐了

05:57.180 --> 05:58.180
那就OK了

05:59.180 --> 06:00.180
就这么简单

06:00.180 --> 06:01.180
可不可怕

06:02.180 --> 06:03.180
产生了

06:03.180 --> 06:04.180
原地特别简单

06:04.180 --> 06:06.180
这就是跨战请求伪造

06:06.180 --> 06:07.180
什么叫跨战请求伪造

06:07.180 --> 06:08.180
只能是攻击者

06:09.180 --> 06:10.180
他利用了

06:10.180 --> 06:11.180
用户的身份信息

06:11.180 --> 06:12.180
这个身份信息

06:12.180 --> 06:13.180
是什么的

06:13.180 --> 06:14.180
不是什么身份证

06:14.180 --> 06:15.180
就是这个东西

06:15.180 --> 06:16.180
利用了这个东西

06:16.180 --> 06:17.180
用户想不想转账

06:17.180 --> 06:18.180
不想转账

06:18.180 --> 06:19.180
他不知道

06:19.180 --> 06:20.180
用户啥都不知道

06:20.180 --> 06:22.180
他知道我点了这个网页

06:22.180 --> 06:23.180
然后后面

06:23.180 --> 06:24.180
这个网页可能啥都没有

06:24.180 --> 06:25.180
就一片空白

06:25.180 --> 06:26.180
标题党骗人就关了

06:26.180 --> 06:27.180
但他不知道

06:27.180 --> 06:29.180
这个请求已经发出去了

06:29.180 --> 06:32.180
这就是跨战请求伪造

06:32.180 --> 06:33.180
他的攻击方式

06:35.180 --> 06:36.180
那么这种攻击方式

06:36.180 --> 06:37.180
怎么来防御

06:37.180 --> 06:38.180
我们来先看一下

06:38.180 --> 06:40.180
现在这些网站上

06:40.180 --> 06:43.180
其实现在你还能不能找到

06:43.180 --> 06:45.180
有这个漏洞的网页

06:45.180 --> 06:46.180
还有

06:46.180 --> 06:47.180
但是我肯定不会给你们说

06:47.180 --> 06:48.180
有那些

06:48.180 --> 06:49.180
结果我也不知道权

06:49.180 --> 06:50.180
对吧

06:50.180 --> 06:51.180
我有的时候看到一些

06:51.180 --> 06:52.180
比较旧的网页

06:52.180 --> 06:54.180
这样我会去试一下

06:54.180 --> 06:55.180
还有

06:55.180 --> 06:57.180
但是我肯定不能说了

06:57.180 --> 06:59.180
比方说我们现在那个

07:00.180 --> 07:01.180
因为这个远离

07:01.180 --> 07:02.180
大家都知道

07:02.180 --> 07:04.180
非常为产生攻击的这个玩意

07:04.180 --> 07:05.180
现在我们

07:05.180 --> 07:06.180
但是大家不要去做

07:06.180 --> 07:07.180
这种事情

07:07.180 --> 07:08.180
现在

07:08.180 --> 07:09.180
我给你们说

07:09.180 --> 07:11.180
现在国内的互联网

07:11.180 --> 07:13.180
都是经过实名认证的

07:13.180 --> 07:15.180
就是你在哪里上网

07:15.180 --> 07:16.180
做了什么事情

07:16.180 --> 07:17.180
都疫情而出的

07:17.180 --> 07:18.180
不要去做这些事情

07:18.180 --> 07:19.180
特别是

07:19.180 --> 07:21.180
不要产生一些

07:21.180 --> 07:22.180
不好的想法

07:22.180 --> 07:23.180
现在我们这里

07:23.180 --> 07:24.180
比方说

07:24.180 --> 07:25.180
去访问百度

07:25.180 --> 07:26.180
百度里面不是有

07:26.180 --> 07:27.180
很多的请求吗

07:27.180 --> 07:28.180
我们随便导一个请求吧

07:28.180 --> 07:29.180
假设

07:29.180 --> 07:30.180
假设

07:31.180 --> 07:32.180
假设就

07:33.180 --> 07:34.180
这个请求

07:35.180 --> 07:36.180
我看一下

07:37.180 --> 07:38.180
看一下

07:38.180 --> 07:39.180
有没有一些

07:39.180 --> 07:40.180
请求

07:40.180 --> 07:41.180
他是要带枯梯的

07:42.180 --> 07:44.620
我要找一个

07:44.620 --> 07:45.620
找一个请求

07:45.620 --> 07:46.620
你看

07:46.620 --> 07:47.620
这个请求

07:47.620 --> 07:48.620
这个请求是要带枯梯的

07:48.620 --> 07:49.620
ok

07:49.620 --> 07:50.620
那么比方说

07:50.620 --> 07:51.620
这个请求

07:51.620 --> 07:53.620
就是一个转账请求

07:53.620 --> 07:54.620
假设

07:54.620 --> 07:55.620
我就举个例子

07:55.620 --> 07:56.620
假设

07:56.620 --> 07:57.620
我就把这个请求地址

07:57.620 --> 07:58.620
复制一下

07:58.620 --> 07:59.620
然后我再变来去

07:59.620 --> 08:01.620
新建一个页面

08:03.620 --> 08:04.620
我这里写个emg

08:04.620 --> 08:05.620
把这个请求地址

08:05.620 --> 08:06.620
粘过来

08:06.620 --> 08:07.620
就这么简单

08:07.620 --> 08:08.620
就这么简单

08:08.620 --> 08:09.620
好

08:09.620 --> 08:10.620
然后我把这个页面

08:10.620 --> 08:11.620
表上部署到服务器

08:11.620 --> 08:12.620
让用户去访问

08:12.620 --> 08:13.620
那用户去访问

08:13.620 --> 08:14.620
这个页面

08:14.620 --> 08:15.620
他看到啥都没有

08:15.620 --> 08:16.620
标题党对吧

08:16.620 --> 08:18.620
但是你看那个请求发出去了

08:18.620 --> 08:19.620
我

08:19.620 --> 08:20.620
他访问的是谁

08:20.620 --> 08:21.620
访问的是这个地址

08:21.620 --> 08:22.620
请求的是谁

08:22.620 --> 08:23.620
请求的是百度

08:23.620 --> 08:24.620
Cookie有没有带过去

08:25.620 --> 08:26.620
Cookie是不是带过去了

08:27.620 --> 08:28.620
对吧

08:28.620 --> 08:29.620
是不是就相当于

08:29.620 --> 08:30.620
是我这里的情况

08:31.620 --> 08:32.620
对不对

08:32.620 --> 08:33.620
有时候他百度

08:33.620 --> 08:34.620
是不是被攻击了

08:34.620 --> 08:35.620
没有

08:35.620 --> 08:36.620
好

08:36.620 --> 08:37.620
我们一会再说

08:37.620 --> 08:38.620
怎么去防御他

08:38.620 --> 08:40.620
为什么能够产生攻击

08:40.620 --> 08:41.620
好

08:41.620 --> 08:42.620
防御方式

08:42.620 --> 08:43.620
防御方式

08:43.620 --> 08:45.620
我这里列了四种

08:45.620 --> 08:46.620
第一种

08:47.620 --> 08:48.620
就是最狠的

08:48.620 --> 08:50.620
不使用Cookie

08:50.620 --> 08:51.620
因为他这个

08:51.620 --> 08:52.620
为什么危险

08:52.620 --> 08:54.620
是因为他利用了

08:54.620 --> 08:55.620
用户的身份

08:55.620 --> 08:56.620
什么叫用户的身份

08:56.620 --> 08:57.620
就这个东西

08:57.620 --> 08:58.620
利用了这个东西

08:58.620 --> 08:59.620
那如果说

08:59.620 --> 09:00.620
你那边登陆成功之后

09:00.620 --> 09:02.620
你完全就不用Cookie保存

09:02.620 --> 09:03.620
不用Cookie的

09:03.620 --> 09:04.620
用什么

09:04.620 --> 09:06.620
用H5的local storage

09:06.620 --> 09:07.620
还有这个问题吗

09:07.620 --> 09:08.620
那就没有Cookie的

09:08.620 --> 09:09.620
对吧

09:09.620 --> 09:10.620
没有Cookie就意味着什么

09:10.620 --> 09:11.620
没有Cookie就意味着

09:11.620 --> 09:12.620
他流烂期

09:12.620 --> 09:15.620
不会自动的附带身份信息

09:15.620 --> 09:16.620
那这个转转机

09:16.620 --> 09:17.620
有没有发出去

09:17.620 --> 09:18.620
有发出去

09:18.620 --> 09:19.620
但是转转会失败

09:19.620 --> 09:20.620
失败就OK了

09:20.620 --> 09:21.620
请求发出去

09:21.620 --> 09:22.620
他防不了的

09:22.620 --> 09:23.620
没办法

09:23.620 --> 09:24.620
但是失败就OK了

09:24.620 --> 09:25.620
你那边不会

09:25.620 --> 09:26.620
真正产生转转

09:26.620 --> 09:27.620
因为他没有身份

09:27.620 --> 09:28.620
身份是需要

09:28.620 --> 09:29.620
用GS代码

09:29.620 --> 09:31.620
加到琴球头里面的

09:31.620 --> 09:32.620
对吧

09:32.620 --> 09:33.620
我不是用Cookie的

09:33.620 --> 09:34.620
那有时候

09:34.620 --> 09:35.620
我这个网利人里面

09:35.620 --> 09:36.620
写一段GS的

09:36.620 --> 09:38.620
写一段GS

09:38.620 --> 09:40.620
然后给他加到头

09:40.620 --> 09:41.620
给他加到头里面

09:41.620 --> 09:42.620
可不可以呢

09:42.620 --> 09:43.620
没办法

09:43.620 --> 09:44.620
因为你现在使用的是

09:44.620 --> 09:45.620
图片去琴球对吧

09:45.620 --> 09:46.620
那有时候

09:46.620 --> 09:47.620
为什么不用GS琴球呢

09:47.620 --> 09:48.620
因为GS琴球

09:48.620 --> 09:50.620
是不是有跨余问题

09:50.620 --> 09:51.620
是不是要造成跨余

09:51.620 --> 09:52.620
现在就知道了吧

09:52.620 --> 09:53.620
为什么要测试

09:53.620 --> 09:54.620
同源策略

09:54.620 --> 09:55.620
为了安全

09:55.620 --> 09:56.620
那么跨余的

09:56.620 --> 09:57.620
跨余的通不过

09:57.620 --> 09:58.620
那更加不要说

09:58.620 --> 09:59.620
后边的

09:59.620 --> 10:00.620
所以他没办法

10:00.620 --> 10:01.620
就不使用Cookie

10:01.620 --> 10:02.620
是最狠的

10:02.620 --> 10:03.620
就很一下子

10:03.620 --> 10:04.620
解决所有问题

10:05.620 --> 10:06.620
福气不响应Cookie就行了

10:06.620 --> 10:07.620
现在好多网人

10:07.620 --> 10:08.620
在做的时候

10:08.620 --> 10:09.620
特别是现在的网站

10:09.620 --> 10:10.620
在做的时候

10:10.620 --> 10:11.620
都不太会使用Cookie了

10:11.620 --> 10:12.620
都使用了

10:12.620 --> 10:13.620
Cookie的存俗

10:13.620 --> 10:14.620
特别是单一运用程序

10:15.620 --> 10:16.620
那么你不使用Cookie

10:16.620 --> 10:17.620
有没有坏处呢

10:17.620 --> 10:18.620
有坏处

10:18.620 --> 10:19.620
这就是为什么

10:19.620 --> 10:20.620
百度他不能这样去做

10:20.620 --> 10:21.620
最大的原因呢

10:21.620 --> 10:22.620
就是兼容性略差

10:22.620 --> 10:23.620
因为

10:23.620 --> 10:25.620
H5是什么时候出来的

10:25.620 --> 10:26.620
好像是

10:27.620 --> 10:28.620
2008年

10:28.620 --> 10:29.620
13年

10:29.620 --> 10:30.620
怎么我忘了

10:30.620 --> 10:31.620
我忘了

10:31.620 --> 10:32.620
反正就是

10:33.620 --> 10:35.620
虽然有一定的年头了

10:35.620 --> 10:37.620
但是也不算很久

10:37.620 --> 10:38.620
这个

10:38.620 --> 10:39.620
第一个就是兼容性略差

10:39.620 --> 10:40.620
那么如果说

10:40.620 --> 10:41.620
一线非常旧的浏览器

10:41.620 --> 10:43.620
特别是一些政府部门

10:43.620 --> 10:45.620
甚至还有用IE6的

10:45.620 --> 10:46.620
那么这种情况

10:46.620 --> 10:47.620
你就没办法了

10:47.620 --> 10:48.620
你刚使用的东西

10:48.620 --> 10:49.620
根本就不认

10:49.620 --> 10:50.620
没有这个东西

10:50.620 --> 10:51.620
那你怎么办呢

10:51.620 --> 10:53.620
你要考虑所有的

10:53.620 --> 10:54.620
兼容性的话

10:54.620 --> 10:55.620
特别是一些大工赞

10:56.620 --> 10:57.620
面向全球的

10:57.620 --> 10:58.620
各种用户都有

10:58.620 --> 11:00.620
什么浏览器都会遇到

11:00.620 --> 11:01.620
那么他必须要

11:01.620 --> 11:02.620
兼容性

11:02.620 --> 11:03.620
所以说

11:03.620 --> 11:04.620
兼容性略差这个问题

11:04.620 --> 11:05.620
就不好解决

11:05.620 --> 11:06.620
这是第一个

11:06.620 --> 11:07.620
第二个

11:07.620 --> 11:08.620
SSR会遇到困难

11:08.620 --> 11:09.620
可以

11:09.620 --> 11:10.620
但是这个问题

11:10.620 --> 11:11.620
可以解决

11:11.620 --> 11:12.620
这是什么意思呢

11:12.620 --> 11:13.620
就是说

11:13.620 --> 11:14.620
我们现在你们学的

11:14.620 --> 11:15.620
VU

11:15.620 --> 11:17.620
这些框架

11:17.620 --> 11:18.620
都是客户端

11:18.620 --> 11:19.620
都是浮浮器

11:19.620 --> 11:20.620
你们请求浮浮器

11:20.620 --> 11:21.620
请求页面的时候

11:21.620 --> 11:23.620
请求到是一个空页面

11:23.620 --> 11:24.620
对吧

11:24.620 --> 11:25.620
有很多的介石

11:25.620 --> 11:26.620
然后再介

11:26.620 --> 11:27.620
用介石

11:27.620 --> 11:29.620
去生成整个页面

11:29.620 --> 11:30.620
是在客户端

11:30.620 --> 11:32.620
完成多么的创建

11:32.620 --> 11:34.620
和渲染的

11:34.620 --> 11:35.620
这叫客户端渲染

11:35.620 --> 11:36.620
实际上

11:36.620 --> 11:37.620
从浮浮器拿到的

11:37.620 --> 11:38.620
是不是空页面

11:38.620 --> 11:39.620
对吧

11:39.620 --> 11:40.620
这个没问题吧

11:40.620 --> 11:42.620
什么叫浮浮端渲染的

11:42.620 --> 11:44.620
浮浮端渲染的指的是

11:44.620 --> 11:46.620
就是浮浮器那边

11:46.620 --> 11:47.620
就已经把页面

11:47.620 --> 11:48.620
创建好了

11:49.620 --> 11:50.620
把整个页面的

11:50.620 --> 11:51.620
ATML结构

11:51.620 --> 11:52.620
全部创建好了

11:52.620 --> 11:53.620
然后把整个页面

11:53.620 --> 11:54.620
发过来

11:54.620 --> 11:55.620
发过来就不是空页面

11:55.620 --> 11:56.620
是在浮浮器那边

11:56.620 --> 11:57.620
创建的

11:57.620 --> 11:58.620
这叫浮浮端渲染

11:58.620 --> 11:59.620
最早的时候

11:59.620 --> 12:00.620
我们的页面都是浮浮端渲染

12:00.620 --> 12:01.620
现在的慢慢过度

12:01.620 --> 12:03.620
掏客户端渲染

12:04.620 --> 12:05.620
好 那么这两种模式

12:05.620 --> 12:06.620
各有各的好处

12:06.620 --> 12:07.620
客户端渲染的

12:07.620 --> 12:09.620
好处在什么呢

12:09.620 --> 12:10.620
好处在浮浮器

12:10.620 --> 12:11.620
压力特别小

12:11.620 --> 12:12.620
它只是要给我

12:12.620 --> 12:14.620
想一个空页面就行了

12:14.620 --> 12:15.620
然后所有的事情

12:15.620 --> 12:16.620
在客户端做

12:16.620 --> 12:17.620
对吧

12:17.620 --> 12:18.620
也是现在

12:18.620 --> 12:19.620
前端

12:19.620 --> 12:20.620
比较火的方案

12:20.620 --> 12:21.620
但浮浮端渲染

12:21.620 --> 12:22.620
仍然有它的优势

12:22.620 --> 12:23.620
什么优势呢

12:23.620 --> 12:26.620
就是它利于SEO

12:27.620 --> 12:29.620
叫做搜索引擎优化

12:29.620 --> 12:30.620
SEO

12:31.620 --> 12:33.620
为什么它利于SEO呢

12:33.620 --> 12:34.620
就是搜索引擎

12:34.620 --> 12:36.620
它更喜欢浮浮端渲染的

12:36.620 --> 12:37.620
比方说

12:37.620 --> 12:40.620
为什么它更加喜欢浮浮端渲染

12:40.620 --> 12:42.620
如果说是客户端渲染的话

12:42.620 --> 12:43.620
那么拿到的

12:43.620 --> 12:44.620
是不是一个空页面

12:44.620 --> 12:45.620
对吧

12:45.620 --> 12:46.620
是一个空页面

12:46.620 --> 12:47.620
啥都没有

12:47.620 --> 12:48.620
那么搜索引擎

12:48.620 --> 12:49.620
在搜入的页面的时候

12:49.620 --> 12:50.620
搜索引擎

12:50.620 --> 12:52.620
它不会去运行你的GS

12:52.620 --> 12:54.620
它不运行你的GS

12:54.620 --> 12:55.620
它就不知道

12:55.620 --> 12:56.620
因为它老是空页面

12:56.620 --> 12:57.620
所以它记住

12:57.620 --> 12:58.620
这个页面怎么是空的呢

12:58.620 --> 13:00.620
当然现在搜索引擎在升级

13:00.620 --> 13:02.620
慢慢的也开始执行你的GS

13:02.620 --> 13:03.620
去拿到页面了

13:03.620 --> 13:06.620
但是它更加喜欢的是浮端渲染页面

13:06.620 --> 13:08.620
所以说为了搜索引擎优化

13:08.620 --> 13:09.620
当然还有一些别的问题

13:09.620 --> 13:11.620
以后里面会学习SSR

13:11.620 --> 13:12.620
你们就知道了

13:14.620 --> 13:15.620
现在就是说

13:15.620 --> 13:16.620
为了搜索引擎优化了

13:16.620 --> 13:18.620
还有一些别的问题

13:18.620 --> 13:19.620
有些网站

13:19.620 --> 13:21.620
特别是对外的网站

13:21.620 --> 13:23.620
就给广大用户使用的网站

13:23.620 --> 13:26.620
它都会使用浮物端渲染

13:26.620 --> 13:27.620
当然浮物端渲染

13:27.620 --> 13:28.620
也可以使用无忧的一些技术

13:28.620 --> 13:29.620
也可以使用的

13:29.620 --> 13:31.620
你们以后会学习

13:31.620 --> 13:34.620
它就会使用浮物端渲染

13:34.620 --> 13:35.620
懂得意思吧

13:35.620 --> 13:37.620
那么浮物端渲染就叫做SSR

13:37.620 --> 13:40.620
先把浮物端渲染说清楚

13:40.620 --> 13:41.620
那为什么说浮物端渲染

13:41.620 --> 13:43.620
会遇到困难

13:43.620 --> 13:44.620
会遇到困难

13:44.620 --> 13:45.620
遇到什么样的困难

13:45.620 --> 13:46.620
这个模式

13:46.620 --> 13:47.620
就是不使用Cookie的

13:47.620 --> 13:48.620
会遇到什么样的困难

13:48.620 --> 13:49.620
那么我们来想想

13:49.620 --> 13:50.620
这个情况

13:50.620 --> 13:51.620
现在我们的页面

13:51.620 --> 13:54.620
不是由客户端渲染的

13:54.620 --> 13:55.620
那么比方说

13:55.620 --> 13:57.620
我们访问它的一个首页

13:57.620 --> 14:00.620
访问这个页面的时候

14:00.620 --> 14:03.620
由于浮物期要构建整个页面

14:03.620 --> 14:04.620
那你想

14:04.620 --> 14:05.620
很多网站都是这样子

14:05.620 --> 14:07.620
你登录之后看到的页面

14:07.620 --> 14:09.620
和登录之前看到的页面

14:09.620 --> 14:10.620
都是有些差别的

14:10.620 --> 14:11.620
对不对

14:11.620 --> 14:12.620
元素上内容上都是有些差别的

14:12.620 --> 14:13.620
你登录之后

14:13.620 --> 14:15.620
在页面上给你推荐一些

14:15.620 --> 14:16.620
你喜欢的东西

14:16.620 --> 14:17.620
你没有登录的时候

14:17.620 --> 14:20.620
可能就是一些通用的东西

14:20.620 --> 14:21.620
说你请求的时候

14:21.620 --> 14:24.620
由于页面是在浮物期创建的

14:24.620 --> 14:25.620
那么浮物期就必须要知道

14:25.620 --> 14:27.620
你有没有登录

14:27.620 --> 14:28.620
是不是这个道理

14:28.620 --> 14:30.620
因为他要知道登录之后

14:30.620 --> 14:32.620
我可能要给你一些别的元素

14:32.620 --> 14:34.620
但是由于你没有使用Cookie

14:34.620 --> 14:35.620
浮物期他就不知道你

14:35.620 --> 14:36.620
有没有登录

14:36.620 --> 14:37.620
你使用的是Local Storage

14:37.620 --> 14:38.620
Local Storage

14:38.620 --> 14:39.620
戴上不完了吗

14:39.620 --> 14:40.620
兄弟

14:40.620 --> 14:42.620
你这一次第一次请求

14:42.620 --> 14:43.620
你是在这里写的

14:43.620 --> 14:45.620
地子栏第一次请求

14:45.620 --> 14:46.620
那这个时候

14:46.620 --> 14:48.620
你怎么给他戴Local Storage

14:48.620 --> 14:49.620
一回车

14:49.620 --> 14:50.620
对吧

14:50.620 --> 14:52.620
浏览器只会自动的发送Cookie

14:52.620 --> 14:54.620
它不会自动的发送Local Storage

14:54.620 --> 14:55.620
所以说这一困了

14:55.620 --> 14:56.620
浮物期会遇到一些困难

14:56.620 --> 14:58.620
这种困难是可以解决的

14:58.620 --> 15:00.620
通过一些方式可以解决的

15:00.620 --> 15:03.620
比方说浮物期先引导

15:03.620 --> 15:05.620
先引导你到一个

15:05.620 --> 15:06.620
另外一个页面

15:06.620 --> 15:07.620
我现在不知道你

15:07.620 --> 15:08.620
有没有登录

15:08.620 --> 15:10.620
我先引导你到另外一个页面

15:10.620 --> 15:11.620
然后另外一个页面

15:11.620 --> 15:12.620
使用Local Storage

15:12.620 --> 15:13.620
再发动到浮物期

15:13.620 --> 15:15.620
浮物期就知道你什么回事了

15:15.620 --> 15:16.620
等到用这种方式

15:16.620 --> 15:17.620
总之可以解决

15:17.620 --> 15:18.620
但是有点麻烦而已

15:18.620 --> 15:20.620
最重要的是它兼容性略差

15:20.620 --> 15:22.620
这是第一种方案

15:22.620 --> 15:25.620
第二种方案就是使用Cookie

15:25.620 --> 15:26.620
还是使用Cookie

15:26.620 --> 15:27.620
但是Cookie里边

15:27.620 --> 15:28.620
使用一个特殊的字段

15:28.620 --> 15:30.620
叫做Same Sight

15:30.620 --> 15:31.620
我们当时讲Cookie的时候

15:31.620 --> 15:32.620
没有讲

15:32.620 --> 15:34.620
对吧 那我们这里给他说一下

15:34.620 --> 15:35.620
Same Sight

15:35.620 --> 15:36.620
这个Same Sight

15:36.620 --> 15:37.620
出来没几年

15:37.620 --> 15:39.620
而且最早是

15:39.620 --> 15:40.620
谷歌流浪期要求的

15:40.620 --> 15:42.620
有多了这么一个字段

15:42.620 --> 15:43.620
一开始还不是标准

15:43.620 --> 15:45.620
这个Same Sight是什么意思呢

15:45.620 --> 15:47.620
我们来看一下这个Cookie

15:47.620 --> 15:51.770
随便找一个吧

15:51.770 --> 15:52.770
Cookie

15:52.770 --> 15:53.770
下边

15:54.770 --> 15:56.770
好像他这里没有记录

15:56.770 --> 15:57.770
没有记录

15:57.770 --> 15:58.770
我们来看一下

15:58.770 --> 16:00.770
浮物期给我们发的Cookie吧

16:00.770 --> 16:01.770
看一下

16:01.770 --> 16:02.770
看百度的浮物期

16:02.770 --> 16:03.770
给我们发这样的Cookie

16:04.770 --> 16:05.770
我把这个取消掉

16:05.770 --> 16:06.770
刷新

16:08.770 --> 16:09.770
Document

16:09.770 --> 16:10.770
Doc

16:11.770 --> 16:13.770
看一下百度的浮物期

16:14.770 --> 16:15.770
好像也没有发

16:15.770 --> 16:17.770
好 那我们这里说一下吧

16:17.770 --> 16:18.770
Same Sight是什么意思

16:18.770 --> 16:19.770
就是我们这里

16:19.770 --> 16:21.770
浮物期给我们发Cookie的时候

16:21.770 --> 16:22.770
表面登录成功了

16:22.770 --> 16:24.770
表面登录成功了

16:24.770 --> 16:25.770
那么他这次Cookie的时候

16:25.770 --> 16:26.770
是不是可以传什么

16:26.770 --> 16:27.770
Domain啊

16:27.770 --> 16:28.770
Pass啊

16:28.770 --> 16:29.770
还过期时间 对吧

16:29.770 --> 16:30.770
那么在这里

16:30.770 --> 16:32.770
还可以额外的加一个字段

16:32.770 --> 16:33.770
叫做Same Sight

16:35.770 --> 16:36.770
加这么一个字段

16:36.770 --> 16:38.770
这个字段是什么意思呢

16:38.770 --> 16:39.770
它表示的是

16:39.770 --> 16:41.770
就是来防止CSRF攻击的

16:41.770 --> 16:43.770
就是来防止攻击的

16:43.770 --> 16:45.770
这个字段有三个取直

16:45.770 --> 16:46.770
其中一个直

16:46.770 --> 16:47.770
Dom

16:47.770 --> 16:48.770
Dom就相当于是你没会写

16:48.770 --> 16:49.770
它就跟没写是一样的

16:49.770 --> 16:50.770
就没有什么

16:50.770 --> 16:51.770
那就相当于没写了

16:52.770 --> 16:53.770
然后呢

16:53.770 --> 16:55.770
还有个直叫做Street

16:56.770 --> 16:57.770
那么写到Street的时候

16:57.770 --> 16:58.770
表示什么意思呢

16:58.770 --> 17:00.770
表示说这个Cookie啊

17:00.770 --> 17:02.770
不能就是避

17:02.770 --> 17:03.770
就是避 要遵守同源策略

17:03.770 --> 17:04.770
就是说

17:04.770 --> 17:06.770
你只有

17:06.770 --> 17:08.770
在这个网站下

17:09.770 --> 17:10.770
然后的所有请求

17:10.770 --> 17:12.770
才能发送这个Cookie

17:12.770 --> 17:13.770
其他的网站不可以

17:13.770 --> 17:14.770
那么如果说

17:14.770 --> 17:15.770
加了这个Street的时候

17:15.770 --> 17:17.770
结果是什么了

17:17.770 --> 17:18.770
结果就是

17:18.770 --> 17:19.770
你用户

17:19.770 --> 17:21.770
访问这个页面没问题

17:21.770 --> 17:23.770
访问这个页面没问题

17:23.770 --> 17:24.770
拿到这个响应页面没问题

17:24.770 --> 17:25.770
因为就请求没问题

17:25.770 --> 17:26.770
它会发动请求

17:26.770 --> 17:28.770
但是携带Cookie的时候

17:28.770 --> 17:30.770
他发现Cookie有个Same Sight

17:30.770 --> 17:31.770
他就想了

17:31.770 --> 17:32.770
他就开始琢磨了

17:32.770 --> 17:34.770
我这个Cookie啊

17:34.770 --> 17:35.770
是谁给我的

17:35.770 --> 17:37.770
是Bank页面给我的

17:37.770 --> 17:39.770
我目前处在哪个页面

17:39.770 --> 17:40.770
虽然我这一次请求

17:40.770 --> 17:41.770
请求的是Bank

17:41.770 --> 17:43.770
但是我目前处在哪个页面

17:43.770 --> 17:45.770
处在的是这个页面

17:45.770 --> 17:46.770
对吧

17:46.770 --> 17:47.770
目前位于这个页面

17:47.770 --> 17:48.770
那么由于受到

17:48.770 --> 17:49.770
这个属性的影响

17:49.770 --> 17:50.770
虽然说我发

17:50.770 --> 17:51.770
请求的地址

17:51.770 --> 17:53.770
还是Bank页面

17:53.770 --> 17:54.770
跟Cookie一样

17:54.770 --> 17:56.770
但是由于我所在的页面

17:56.770 --> 17:57.770
是这个页面

17:57.770 --> 17:59.770
那就不是相同的占点了

17:59.770 --> 18:00.770
Same Sight表示

18:00.770 --> 18:01.770
是相同的占点

18:01.770 --> 18:03.770
不是相同的占点

18:03.770 --> 18:05.770
于是Cookie不带

18:05.770 --> 18:07.770
他就这么个意思

18:07.770 --> 18:08.770
是不是就解决了

18:08.770 --> 18:09.770
这个问题就解决了

18:09.770 --> 18:10.770
这是Street个字

18:10.770 --> 18:11.770
这Street个字

18:11.770 --> 18:12.770
由于他太过于

18:12.770 --> 18:13.770
严格了

18:13.770 --> 18:15.770
严格的有点残酷了

18:15.770 --> 18:16.770
所以说

18:16.770 --> 18:18.770
我们一般来说

18:18.770 --> 18:20.770
如果说要使用这一套的话

18:20.770 --> 18:21.770
我们一般来说

18:21.770 --> 18:23.770
使用另外一个Same Sight

18:23.770 --> 18:25.770
使用Lex

18:25.770 --> 18:27.770
叫做宽松的

18:27.770 --> 18:28.770
宽松的是什么意思呢

18:28.770 --> 18:29.770
就是有些请求

18:29.770 --> 18:31.770
我可以给你带Cookie过去

18:31.770 --> 18:33.770
但是有些请求就不行

18:33.770 --> 18:35.770
它里边简单的说

18:35.770 --> 18:36.770
我这一块不去

18:36.770 --> 18:38.770
郭多乐去讲解

18:38.770 --> 18:40.770
简单的说

18:40.770 --> 18:42.770
盖着请求给你带Cookie过去

18:42.770 --> 18:44.770
但是Pose的请求

18:44.770 --> 18:45.770
它不带

18:45.770 --> 18:46.770
为什么呢

18:46.770 --> 18:48.770
因为像银行转账

18:48.770 --> 18:49.770
特别是对服务器

18:49.770 --> 18:51.770
对数据产生影响的操作

18:51.770 --> 18:53.770
往往是Pose的请求

18:53.770 --> 18:55.770
往往不是盖着

18:55.770 --> 18:57.770
这个大家已经达成故事了

18:57.770 --> 18:59.770
对吧 全网站都达成故事了

18:59.770 --> 19:00.770
说你像这种转账

19:00.770 --> 19:02.770
不可能看得到

19:02.770 --> 19:04.770
用盖着请求

19:04.770 --> 19:05.770
你得去完成转账

19:05.770 --> 19:06.770
不太可能看得到

19:06.770 --> 19:07.770
他就说

19:07.770 --> 19:08.770
如果说换成Pose

19:08.770 --> 19:09.770
不是所有问题都解决了吗

19:09.770 --> 19:10.770
不是的

19:10.770 --> 19:12.770
因为如果说你换成Pose的话

19:12.770 --> 19:13.770
它不会使用Image

19:13.770 --> 19:15.770
它就不会使用Image了

19:15.770 --> 19:16.770
它会使用什么

19:16.770 --> 19:18.770
它会使用这种方式

19:18.770 --> 19:20.770
它会在页面上加一个表单

19:22.770 --> 19:23.770
加个表单

19:23.770 --> 19:25.770
然后我们给它写一个Message的

19:25.770 --> 19:26.770
Pose

19:28.770 --> 19:30.770
这个表单里边

19:30.770 --> 19:32.770
我们写上一些字段吧

19:35.770 --> 19:37.770
字段就是to

19:37.770 --> 19:38.770
value

19:39.770 --> 19:41.770
给它转账

19:41.770 --> 19:42.770
转账多少钱呢

19:42.770 --> 19:44.770
转账Money

19:44.770 --> 19:49.580
转账10万吧

19:49.580 --> 19:50.580
100万了

19:50.580 --> 19:52.580
然后我都不写按钮了

19:52.580 --> 19:59.350
我就在这里写段介绍脚本

19:59.350 --> 20:00.350
写段脚本

20:00.350 --> 20:01.350
这个脚本非常简单

20:01.350 --> 20:03.350
我就用Documents

20:06.350 --> 20:07.350
然后调它的方法

20:07.350 --> 20:08.350
刷个名字

20:08.350 --> 20:12.620
这就请求过去了

20:12.620 --> 20:14.620
好 咱们来试一下

20:14.620 --> 20:16.620
如果说为了不影响

20:16.620 --> 20:17.620
就是网易的浏览

20:17.620 --> 20:19.620
我甚至还可以给它加上一个ifreem

20:19.620 --> 20:20.620
对吧

20:20.620 --> 20:21.620
不要让我先看一下吧

20:21.620 --> 20:22.620
就这样

20:22.620 --> 20:23.620
请求都可以过去

20:23.620 --> 20:24.620
只不过这样过去

20:24.620 --> 20:26.620
用户是有感知的

20:26.620 --> 20:28.620
我这里提交到百度吧

20:28.620 --> 20:32.920
刷新

20:32.920 --> 20:37.550
这边我把这个打开

20:37.550 --> 20:40.760
刷新

20:40.760 --> 20:42.760
你看我哪里写错了

20:47.760 --> 20:48.760
这里包了一个错

20:48.760 --> 20:50.760
它说什么呢

20:50.760 --> 20:52.760
这122

20:52.760 --> 20:53.760
没关系

20:53.760 --> 20:54.760
服务器那边响应

20:54.760 --> 20:56.760
什么东西都没关系

20:56.760 --> 21:00.140
刷新

21:00.140 --> 21:03.450
这里是怎么回事

21:03.450 --> 21:04.450
我这个

21:04.450 --> 21:07.450
我认定不说端了吗 难道

21:07.450 --> 21:08.450
对了

21:08.450 --> 21:10.450
现在对了

21:10.450 --> 21:11.450
不管啊

21:11.450 --> 21:12.450
服务器怎么响应不管

21:12.450 --> 21:13.450
服务器肯定不认的

21:13.450 --> 21:14.450
好 咱们来试一下

21:14.450 --> 21:15.450
再来

21:15.450 --> 21:17.450
把这个地址

21:17.450 --> 21:20.450
再刷新一次

21:20.450 --> 21:22.450
再这边来

21:22.450 --> 21:24.450
刷新一次

21:25.450 --> 21:26.450
我们首先访问这个页面

21:26.450 --> 21:28.450
这个页面里边有一段代码

21:28.450 --> 21:29.450
一段介绍代码

21:29.450 --> 21:30.450
提交了表单

21:30.450 --> 21:31.450
是不是我们请求到了百度

21:31.450 --> 21:32.450
对吧

21:32.450 --> 21:33.450
那里看

21:33.450 --> 21:35.450
首先Cookie有没有带过去

21:35.450 --> 21:36.450
带过去了

21:36.450 --> 21:37.450
对吧

21:37.450 --> 21:38.450
然后呢

21:38.450 --> 21:40.450
数据代表带过去

21:40.450 --> 21:42.450
是不是抛射请求

21:42.450 --> 21:43.450
对吧

21:43.450 --> 21:44.450
带过去了

21:44.450 --> 21:45.450
这种方式用户有感知

21:45.450 --> 21:46.450
用户发现

21:46.450 --> 21:47.450
诶 请求不对

21:47.450 --> 21:48.450
怎么抛到银行的界面来了

21:48.450 --> 21:49.450
对吧

21:49.450 --> 21:50.450
怎么请求到银行

21:50.450 --> 21:51.450
我大概一下就警觉了

21:51.450 --> 21:52.450
可能就报警了

21:52.450 --> 21:53.450
各种方式

21:53.450 --> 21:55.450
如果说希望用户没有感知

21:55.450 --> 21:56.450
都不知道

21:56.450 --> 21:57.450
那我还可以

21:57.450 --> 21:59.450
用iPhone

21:59.450 --> 22:03.590
好 这个iPhone怎么玩呢

22:03.590 --> 22:05.590
我再去建一个页面

22:05.590 --> 22:06.590
之前写一个

22:06.590 --> 22:07.590
现在写两个了

22:07.590 --> 22:09.590
其实写不到很多东西

22:09.590 --> 22:10.590
然后我把这个代码

22:10.590 --> 22:12.590
不知道第二个页面应该去

22:14.590 --> 22:15.590
我第一个页面呢

22:15.590 --> 22:17.590
我就给它写一个

22:17.590 --> 22:18.590
二点

22:19.590 --> 22:20.590
我让这个页面

22:20.590 --> 22:21.590
去完成攻击

22:21.590 --> 22:22.590
对吧

22:22.590 --> 22:23.590
我这里用iPhone去引用它

22:23.590 --> 22:24.590
就行了

22:24.590 --> 22:25.590
这个页面到时候提交的时候

22:25.590 --> 22:27.590
自动提交的时候跳转

22:27.590 --> 22:28.590
它不会影响这个页面

22:28.590 --> 22:30.590
所以用户就感知不到了

22:30.590 --> 22:32.590
好 咱们来看一下

22:32.590 --> 22:33.590
你看

22:33.590 --> 22:34.590
iPhone里边是不是提交了

22:34.590 --> 22:36.590
这个请求肯定又过去了

22:36.590 --> 22:37.590
你看

22:37.590 --> 22:38.590
我们现在去找一找

22:38.590 --> 22:39.590
是不是个请求又过去了

22:39.590 --> 22:40.590
Poser请求没问题吧

22:40.590 --> 22:42.590
Coke带过去了吧

22:42.590 --> 22:43.590
然后呢

22:43.590 --> 22:44.590
数据也带过去了

22:44.590 --> 22:45.590
对吧 还是请求过去了

22:45.590 --> 22:46.590
那用户可以看到这个呀

22:46.590 --> 22:48.590
那还不好说吗

22:48.590 --> 22:50.590
Style

22:50.590 --> 22:52.590
Display now

22:53.590 --> 22:54.590
看不见了呗

22:54.590 --> 22:58.100
好 刷新

22:58.100 --> 22:59.100
刷新

22:59.100 --> 23:00.100
请求过去了没

23:00.100 --> 23:01.100
过去了

23:01.100 --> 23:02.100
Poser的请求

23:02.100 --> 23:03.100
Coke带过去了

23:03.100 --> 23:04.100
然后呢

23:04.100 --> 23:05.100
这两个带过去了

23:05.100 --> 23:07.100
它还是完成攻击了

23:07.100 --> 23:08.100
懂的意思吧

23:08.100 --> 23:09.100
所以说它Poser

23:09.100 --> 23:10.100
光靠的

23:10.100 --> 23:12.100
改成Poser请求

23:12.100 --> 23:13.100
肯定要做的

23:13.100 --> 23:14.100
这是要做的

23:14.100 --> 23:16.100
但是光靠改成Poser请求

23:16.100 --> 23:17.100
还是不够的

23:17.100 --> 23:18.100
所以说

23:18.100 --> 23:19.100
多了这个Same Size

23:19.100 --> 23:20.100
Same Size

23:20.100 --> 23:21.100
我刚才讲的

23:21.100 --> 23:23.100
一个是严格Strict

23:23.100 --> 23:24.100
那么就是任何请求

23:24.100 --> 23:26.100
都不能带这个Coke

23:26.100 --> 23:27.100
就是这种

23:27.100 --> 23:28.100
跟那个当前一面地址

23:28.100 --> 23:30.100
不一样的Coke都不能带

23:30.100 --> 23:31.100
这样子的话

23:31.100 --> 23:32.100
有点太严格了

23:32.100 --> 23:33.100
所以一般我们来使用Lex

23:33.100 --> 23:34.100
宽松

23:34.100 --> 23:35.100
宽松的话就是

23:35.100 --> 23:36.100
Gate请求还不会带

23:36.100 --> 23:37.100
Gate请求会带

23:37.100 --> 23:38.100
但是Poser请求

23:38.100 --> 23:39.100
它就不会带

23:39.100 --> 23:41.100
好 这是关于Same Size

23:41.100 --> 23:42.100
Same Size的兼容性

23:42.100 --> 23:43.100
就比较差了

23:43.100 --> 23:44.100
那就

23:44.100 --> 23:45.100
它还不如第一种

23:45.100 --> 23:47.100
对吧 还不如第一种

23:47.100 --> 23:48.100
而且呢

23:48.100 --> 23:49.100
就是容易挡住自己人

23:49.100 --> 23:50.100
是什么意思呢

23:50.100 --> 23:51.100
就是有的时候呢

23:51.100 --> 23:52.100
大公司

23:52.100 --> 23:53.100
它的网站

23:53.100 --> 23:55.100
它的资源

23:55.100 --> 23:57.100
都是要夸占访问的

23:57.100 --> 23:59.100
你看我们百度的一些图片

23:59.100 --> 24:00.100
这百度

24:00.100 --> 24:01.100
很多的图片

24:01.100 --> 24:03.100
它都在别的网站上

24:03.100 --> 24:04.100
你不要像这个

24:04.100 --> 24:06.100
我看一下吧

24:06.100 --> 24:08.100
BD Static

24:08.100 --> 24:10.100
都是夸占访问

24:10.100 --> 24:12.100
说你这样去限制的话

24:12.100 --> 24:14.100
它还容易把自己人挡住

24:14.100 --> 24:16.100
这是它的问题

24:16.100 --> 24:18.100
但是它防御力是很好的

24:18.100 --> 24:19.100
然后呢

24:19.100 --> 24:20.100
就会出现了

24:20.100 --> 24:22.100
第三种的防御力

24:22.100 --> 24:23.100
非常不错

24:23.100 --> 24:24.100
而且呢

24:24.100 --> 24:26.100
这些问题都能够解决

24:26.100 --> 24:28.100
它有一个小问题

24:28.100 --> 24:29.100
不过那个小问题

24:29.100 --> 24:30.100
由于机率太低

24:30.100 --> 24:31.100
我们可以认为

24:31.100 --> 24:33.100
它不太容易发生

24:33.100 --> 24:35.100
那么这叫做CSR token

24:35.100 --> 24:37.100
那么这是什么意思呢

24:37.100 --> 24:39.100
就是说

24:39.100 --> 24:40.100
现在

24:40.100 --> 24:43.100
你做任何重要的操作

24:43.100 --> 24:44.100
像什么转账

24:44.100 --> 24:47.100
这些就特别有影响的

24:47.100 --> 24:49.100
对你这个用户有影响的操作

24:49.100 --> 24:51.100
对我们网站数据

24:51.100 --> 24:52.100
有影响的操作

24:52.100 --> 24:53.100
就是反而是我认为

24:53.100 --> 24:54.100
你这个请求

24:54.100 --> 24:55.100
被伪造了

24:55.100 --> 24:56.100
我就有危险

24:56.100 --> 24:57.100
像这种操作呢

24:57.100 --> 24:59.100
我都做这么一个处理

24:59.100 --> 25:02.100
就是我要经过这么一个步骤

25:02.100 --> 25:05.100
我不光光会验证你的身份

25:05.100 --> 25:07.100
我还会验证一个东西

25:07.100 --> 25:10.100
叫做CSRF token

25:10.100 --> 25:12.100
那这又是啥意思呢

25:12.100 --> 25:16.180
我这里给他举个例子

25:16.180 --> 25:17.180
什么意思呢

25:17.180 --> 25:18.180
比方说

25:18.180 --> 25:20.180
用户要去做一个转账操作

25:20.180 --> 25:21.180
他正常的做法

25:21.180 --> 25:22.180
应该是怎么做的

25:22.180 --> 25:23.180
比方说这是个用户

25:23.180 --> 25:24.180
这是服务器

25:24.180 --> 25:25.180
他要做个转账操作

25:25.180 --> 25:27.180
首先是不是要去

25:27.180 --> 25:30.180
找拿到这个请求

25:30.180 --> 25:32.180
拿到这个就是转账的页面

25:32.180 --> 25:33.180
对不对

25:33.180 --> 25:34.180
这还没有转账

25:34.180 --> 25:35.180
这是凤姆表达

25:35.180 --> 25:37.180
拿到这个页面

25:37.180 --> 25:38.180
然后拿到页面之后

25:38.180 --> 25:40.180
用户填写转账的信息

25:40.180 --> 25:41.180
对吧

25:41.180 --> 25:42.180
各种信息

25:42.180 --> 25:44.180
填好了之后

25:44.180 --> 25:45.180
然后点击提交

25:45.180 --> 25:48.180
这个时候才真正的发生转账

25:48.180 --> 25:49.180
对吧

25:49.180 --> 25:51.180
这个时候才是真正的转账

25:51.180 --> 25:52.180
所以还会经过两步

25:52.180 --> 25:54.180
这是以前也是这样做的对吧

25:54.180 --> 25:56.180
那么以前只是没有在这一步

25:56.180 --> 25:57.180
加入一些安全验证

25:57.180 --> 25:59.180
那么现在我们加入一个安全验证

25:59.180 --> 26:00.180
怎么来验证呢

26:00.180 --> 26:03.180
当你去请求这个表单的时候

26:03.180 --> 26:06.180
那么服务器会随机的

26:06.180 --> 26:08.180
生成一个东西

26:08.180 --> 26:10.680
一个token

26:10.680 --> 26:12.680
这不是用户登入的一个token

26:12.680 --> 26:14.680
这是随机生成的

26:14.680 --> 26:15.680
而且这个token是一次

26:15.680 --> 26:17.680
用一次就没就扔

26:17.680 --> 26:19.680
同时服务器那边

26:19.680 --> 26:20.680
记录一下这个token

26:20.680 --> 26:22.680
一般来说通过session来记录

26:22.680 --> 26:23.680
session

26:23.680 --> 26:25.680
你们现在应该学过了

26:25.680 --> 26:27.680
通过session来记录这个token

26:27.680 --> 26:28.680
同时呢

26:28.680 --> 26:31.680
把这个token又发给客户端

26:31.680 --> 26:33.680
客户端那边也有了

26:33.680 --> 26:35.680
注意这个token是一次性的

26:35.680 --> 26:36.680
只能用一次

26:36.680 --> 26:38.680
用一次就失效了

26:38.680 --> 26:39.680
那么用户当时候

26:39.680 --> 26:41.680
提交转账提交的时候

26:41.680 --> 26:43.680
他需要把这个token也带过来

26:43.680 --> 26:44.680
当然这个发送的话

26:44.680 --> 26:46.680
一般就可以把放到口渠里边

26:46.680 --> 26:48.680
或者是放到forum表单里边

26:48.680 --> 26:49.680
一个input里边都可以

26:49.680 --> 26:50.680
总之你下次提交的时候

26:50.680 --> 26:51.680
要把token带过来

26:51.680 --> 26:53.680
那么除了这个token之外

26:53.680 --> 26:55.680
就要csr的token

26:55.680 --> 26:57.680
还有自己的身份信息

26:57.680 --> 26:59.680
还有身份信息

26:59.680 --> 27:01.680
就是你之前登入的个身份信息

27:01.680 --> 27:03.680
都提交过来

27:03.680 --> 27:06.680
身份信息是可以保存一段时间的

27:06.680 --> 27:08.680
但是这个token是一次性的

27:08.680 --> 27:10.680
那么这样子就提交到了服务器

27:10.680 --> 27:11.680
服务器一验证

27:11.680 --> 27:12.680
以这个token

27:12.680 --> 27:14.680
跟我之前保存的token一不一样

27:14.680 --> 27:16.680
一样的话是说明什么

27:16.680 --> 27:19.680
说明你是通过我的网页

27:19.680 --> 27:20.680
给我提交的

27:20.680 --> 27:22.680
不是通过别的地方给我提交的

27:22.680 --> 27:23.680
是通过我的网页

27:23.680 --> 27:24.680
因为只有通过我的网页

27:24.680 --> 27:27.680
我才会给你办法这个token

27:27.680 --> 27:28.680
懂了意思吗

27:28.680 --> 27:30.680
他这个token主要的目的就是

27:30.680 --> 27:31.680
要验证你这也是提交

27:31.680 --> 27:32.680
是不是就是

27:32.680 --> 27:34.680
通过我那个网页提交的

27:34.680 --> 27:36.680
他就是这么一个目的

27:36.680 --> 27:38.680
身份验证是验证你有没有登录

27:38.680 --> 27:40.680
之前有没有登录过

27:40.680 --> 27:42.680
于是多了这个验证的时候

27:42.680 --> 27:44.680
我们再来看一下

27:44.680 --> 27:46.680
那么他还能不能完成攻击

27:46.680 --> 27:47.680
现在的就是

27:47.680 --> 27:48.680
他银行那边

27:48.680 --> 27:50.680
我先看银行

27:50.680 --> 27:53.680
就这银行那边登录了

27:53.680 --> 27:54.680
登录了之后

27:54.680 --> 27:56.680
他有cookie这个没问题

27:56.680 --> 27:57.680
好 访问危险网站

27:57.680 --> 27:58.680
响应页面

27:58.680 --> 27:59.680
无论是他这里使用amg

27:59.680 --> 28:00.680
还是使用iframe

28:00.680 --> 28:02.680
用pods请求还是get请求

28:02.680 --> 28:03.680
无所谓

28:03.680 --> 28:06.680
那么请求的时候

28:06.680 --> 28:08.680
请求转账请求发过去了

28:08.680 --> 28:10.680
发过去了cookie会不会带过去

28:10.680 --> 28:11.680
带过去带过去

28:12.680 --> 28:14.680
但是他没有这个token

28:14.680 --> 28:16.680
是不是这个token没了没有

28:16.680 --> 28:18.680
没有这个token的服务器就验证通不过

28:18.680 --> 28:20.680
通不过他就无法转账

28:20.680 --> 28:22.680
这就是这么一种方式

28:22.680 --> 28:24.680
一般都是服务器那边做

28:24.680 --> 28:26.680
服务器那边就自动给你做

28:26.680 --> 28:27.680
要么给你收到cookie

28:27.680 --> 28:29.680
牛奶器就自动放到cookie里面了

28:29.680 --> 28:32.680
好 那么就要问了

28:32.680 --> 28:33.680
那这个cookie

28:33.680 --> 28:35.680
他会带自己登录的cookie

28:35.680 --> 28:37.680
他会不会带这个cookie呢

28:37.680 --> 28:38.680
这个身份验证的cookie也是个cookie

28:38.680 --> 28:40.680
他会不会带呢

28:40.680 --> 28:42.680
那如果说有的话肯定会带

28:42.680 --> 28:44.680
关键是大家也没用

28:44.680 --> 28:45.680
为什么没用呢

28:45.680 --> 28:49.680
因为cookie只有一次是一次性的

28:49.680 --> 28:50.680
是不是一次性的

28:50.680 --> 28:53.680
然后之前用户在银行转账国

28:53.680 --> 28:54.680
拿到这个token

28:54.680 --> 28:57.680
然后转账往上个token就失效了

28:57.680 --> 28:58.680
就没有意义了

28:58.680 --> 28:59.680
那么一般来说服务器

28:59.680 --> 29:00.680
会把个token散了

29:00.680 --> 29:01.680
散了就没了

29:01.680 --> 29:02.680
下一次你要转账

29:02.680 --> 29:03.680
又通过银行

29:03.680 --> 29:04.680
又打一个新的token

29:04.680 --> 29:05.680
所以说呢

29:05.680 --> 29:07.680
哪怕服务器不散

29:07.680 --> 29:09.680
哪怕服务器不给你把token散了

29:09.680 --> 29:11.680
都保留在那之前的token

29:11.680 --> 29:12.680
但是已经失效了

29:12.680 --> 29:13.680
你把之前的token发过去

29:13.680 --> 29:14.680
服务器不认了

29:14.680 --> 29:16.680
就这么个意思吧

29:16.680 --> 29:19.680
但是他有一个比较特别的场景

29:19.680 --> 29:21.680
仍然会有安全隐患

29:21.680 --> 29:22.680
什么隐患呢

29:22.680 --> 29:23.680
看这个图

29:23.680 --> 29:26.680
用户有可能会产生这么一个操作

29:26.680 --> 29:28.680
他去访问银行

29:28.680 --> 29:29.680
我想转账

29:29.680 --> 29:31.680
拿到token了吗

29:31.680 --> 29:32.680
说拿到token了

29:32.680 --> 29:34.680
这个时候啊

29:34.680 --> 29:36.680
他没有完成转账

29:36.680 --> 29:37.680
他没有提交

29:37.680 --> 29:38.680
没有完成转账

29:38.680 --> 29:39.680
有些别的原因

29:39.680 --> 29:40.680
对吧

29:40.680 --> 29:41.680
但是在等待

29:41.680 --> 29:42.680
在这个过程中

29:42.680 --> 29:44.680
在这个时间段内

29:44.680 --> 29:46.680
去点击了那个危险网站

29:46.680 --> 29:48.680
是不是又出问题了

29:48.680 --> 29:49.680
对吧

29:49.680 --> 29:50.680
这个token也带过去了

29:50.680 --> 29:51.680
身份信息也带过去了

29:51.680 --> 29:52.680
又出问题了

29:52.680 --> 29:54.680
所以说他不是一个

29:54.680 --> 29:56.680
非常非常完美的

29:56.680 --> 29:57.680
他接近完美

29:57.680 --> 29:58.680
但是这种情况

29:58.680 --> 30:00.680
他也少太少了

30:00.680 --> 30:01.680
所以呢

30:01.680 --> 30:02.680
就没有去处理了

30:02.680 --> 30:03.680
一般来说呢

30:03.680 --> 30:04.680
我们可以通过一些其他情况

30:04.680 --> 30:05.680
其他处理

30:05.680 --> 30:07.680
来组织一些危险操作

30:07.680 --> 30:08.680
然后说

30:08.680 --> 30:09.680
我让他再一次

30:09.680 --> 30:11.680
重新输入一次密码

30:11.680 --> 30:12.680
对吧

30:12.680 --> 30:13.680
是不是

30:13.680 --> 30:14.680
那这样子

30:14.680 --> 30:15.680
拥护在访问这个危险网站的时候

30:15.680 --> 30:16.680
他不可能把银行密码

30:16.680 --> 30:17.680
再重新输入一遍

30:17.680 --> 30:18.680
对吧

30:18.680 --> 30:19.680
让他重新输入一次密码

30:19.680 --> 30:20.680
或者是呢

30:20.680 --> 30:21.680
我给他作为

30:21.680 --> 30:22.680
手机号发一个验证信息

30:22.680 --> 30:23.680
那么这些呢

30:23.680 --> 30:24.680
他就完全没办法

30:24.680 --> 30:26.680
这个就攻击不了

30:26.680 --> 30:27.680
好

30:27.680 --> 30:28.680
这是这一块的防御

30:28.680 --> 30:30.680
使用csrftoken

30:30.680 --> 30:31.680
还有一种方式呢

30:31.680 --> 30:32.680
我给大家说一下

30:32.680 --> 30:33.680
这种方式呢

30:33.680 --> 30:34.680
现在就不要用了

30:34.680 --> 30:36.680
过去很常用

30:36.680 --> 30:37.680
我后边漏的课程里边

30:37.680 --> 30:38.680
也用的是这种方式

30:38.680 --> 30:39.680
做防护对吧

30:39.680 --> 30:40.680
后来我查了一下

30:40.680 --> 30:41.680
这种方式呢

30:41.680 --> 30:42.680
现在已经有漏洞

30:42.680 --> 30:43.680
已经发现了

30:43.680 --> 30:44.680
这种方式是用

30:44.680 --> 30:46.680
防护起来非常非常简单

30:46.680 --> 30:47.680
过去也很多网站

30:47.680 --> 30:48.680
包括IBM

30:48.680 --> 30:49.680
都是使用这种方式

30:49.680 --> 30:50.680
来做防护的

30:50.680 --> 30:51.680
现在不要用了

30:51.680 --> 30:52.680
他叫做使用Riverer

30:52.680 --> 30:53.680
来进行防护

30:53.680 --> 30:55.680
这是什么意思呢

30:55.680 --> 30:57.680
我们任何一个请求

30:57.680 --> 30:58.680
你看我这里

30:58.680 --> 30:59.680
做了一个夸占请求

30:59.680 --> 31:02.500
对吧

31:02.500 --> 31:04.500
关键

31:04.500 --> 31:05.500
无论是Poser请求

31:05.500 --> 31:07.500
还是Gate请求

31:07.500 --> 31:09.500
因为发现请求的时候

31:09.500 --> 31:10.500
会有一个字段

31:10.500 --> 31:11.500
叫Riverer

31:11.500 --> 31:13.500
这个字段表示什么意思呢

31:13.500 --> 31:15.500
会发到服务器

31:15.500 --> 31:16.500
是高速服务器

31:16.500 --> 31:18.500
我这个请求来源的页面

31:18.500 --> 31:20.500
是哪个页面

31:20.500 --> 31:22.500
是从哪个页面来的

31:22.500 --> 31:23.500
懂了意思吗

31:23.500 --> 31:24.500
这叫Riverer

31:24.500 --> 31:26.500
那么他跟Origin

31:26.500 --> 31:27.500
Origin有点像

31:27.500 --> 31:28.500
但是Riverer

31:28.500 --> 31:30.500
基本上是

31:30.500 --> 31:31.500
大部分的就是

31:31.500 --> 31:32.500
在页面内的请求

31:32.500 --> 31:33.500
他都未发过去

31:33.500 --> 31:35.500
Origin还不太会

31:35.500 --> 31:36.500
所以我们一般来服务

31:36.500 --> 31:37.500
现在怎么来看

31:37.500 --> 31:38.500
你这个请求

31:38.500 --> 31:39.500
是不是正常的请求呢

31:39.500 --> 31:41.500
就看Riverer

31:41.500 --> 31:42.500
你这个地址

31:42.500 --> 31:43.500
如果说发现一个

31:43.500 --> 31:45.500
莫名其妙的地址

31:45.500 --> 31:47.500
不是我的白名单里面的

31:47.500 --> 31:48.500
或者跟我的预就不一样

31:48.500 --> 31:50.500
不是Bank.com

31:50.500 --> 31:51.500
那么说明你这个请求

31:51.500 --> 31:53.500
是从别的网站来的

31:53.500 --> 31:55.500
那有可能是伪造请求

31:55.500 --> 31:57.500
利用用户的身份

31:57.500 --> 31:59.500
只要判断Riverer

31:59.500 --> 32:00.500
就可以

32:00.500 --> 32:01.500
这是过去

32:01.500 --> 32:02.500
非常简单

32:02.500 --> 32:04.500
也非常有效的方式

32:04.500 --> 32:05.500
但为什么说

32:05.500 --> 32:06.500
现在已经发现漏洞呢

32:06.500 --> 32:09.500
是因为这种东西

32:09.500 --> 32:11.500
它访不了BS64编码

32:11.500 --> 32:13.500
我给大家看一下

32:13.500 --> 32:16.500
大家可能知道BS64编码吧

32:16.500 --> 32:17.500
现在我们这里

32:17.500 --> 32:23.860
做一个BS64编码

32:23.860 --> 32:25.860
现在我们在这里

32:25.860 --> 32:26.860
在线编码前

32:26.860 --> 32:28.860
其实我要做的事情

32:28.860 --> 32:32.860
就是把这一段内容

32:32.860 --> 32:34.860
就是把这一段内容

32:34.860 --> 32:36.860
放到这个位置

32:36.860 --> 32:38.860
对吧 这个iFrame这个位置

32:38.860 --> 32:39.860
我就把这一段内容

32:39.860 --> 32:41.860
来做一个BS64编码

32:41.860 --> 32:43.860
我把这个编码接过了

32:43.860 --> 32:44.860
放这儿

32:44.860 --> 32:46.860
放到src里面

32:46.860 --> 32:47.860
就不是2.atml了

32:47.860 --> 32:49.860
叫做data

32:49.860 --> 32:51.860
是个data链接

32:51.860 --> 32:55.860
然后使用text.atml

32:55.860 --> 32:59.750
后边又是BS64

32:59.750 --> 33:02.750
用这种模式

33:02.750 --> 33:05.750
我们运行看一下

33:05.750 --> 33:06.750
刷新

33:06.750 --> 33:07.750
有没有寻求到百度

33:07.750 --> 33:08.750
有

33:08.750 --> 33:10.750
现在你看一下有没有带refer

33:10.750 --> 33:12.750
是没带了

33:12.750 --> 33:13.750
对吧

33:13.750 --> 33:14.750
这是纽纷

33:14.750 --> 33:15.750
我又不知道纽纷

33:15.750 --> 33:17.750
它为什么会有这么一种

33:17.750 --> 33:18.750
规则存在

33:18.750 --> 33:19.750
我也不知道

33:19.750 --> 33:20.750
可能跟纽纷期的

33:20.750 --> 33:21.750
内部实现有关系

33:21.750 --> 33:22.750
那么这种情况

33:22.750 --> 33:23.750
它就没有带refer了

33:23.750 --> 33:24.750
所以这个refer的方式

33:24.750 --> 33:26.750
是可以被绕过的

33:26.750 --> 33:27.750
所以现在就不要去

33:27.750 --> 33:28.750
用这种refer的防护了

33:28.750 --> 33:29.750
所以我给大家说一下

33:29.750 --> 33:31.750
这是它的防护方式

33:31.750 --> 33:32.750
于是到最后

33:32.750 --> 33:33.750
我们来总结一下

33:33.750 --> 33:35.750
介绍一下CSRF攻击

33:35.750 --> 33:36.750
首先告诉它是什么

33:36.750 --> 33:39.750
这是一个跨战请求伪造

33:39.750 --> 33:40.750
它的主要作用

33:40.750 --> 33:43.750
就是拿到用户

33:43.750 --> 33:46.750
利用用户的身份信息

33:46.750 --> 33:48.750
比较用户登录了一些网站

33:48.750 --> 33:49.750
那么在这些网站上

33:49.750 --> 33:50.750
就会产生一些身份信息

33:50.750 --> 33:51.750
就是Copy

33:51.750 --> 33:53.750
然后让它访问

33:53.750 --> 33:54.750
受攻击的占点

33:54.750 --> 33:56.750
去执行一些非本益的操作

33:56.750 --> 33:57.750
来打到攻击

33:57.750 --> 33:59.750
然后它具体的做法是

33:59.750 --> 34:01.750
首先把用户引导

34:01.750 --> 34:02.750
首先用户要有登录

34:02.750 --> 34:04.750
然后把用户引导到一个危险网站

34:04.750 --> 34:05.750
用户访问网站之后

34:05.750 --> 34:07.750
网站会通过各种手段

34:07.750 --> 34:08.750
用iFrame也好

34:08.750 --> 34:09.750
用Image也好

34:09.750 --> 34:11.750
来发送请求到被攻击的占点

34:11.750 --> 34:12.750
那么这次请求

34:12.750 --> 34:13.750
由于用户之前

34:13.750 --> 34:15.750
对这个目标占点已经登录过了

34:15.750 --> 34:16.750
所以说它会有

34:16.750 --> 34:17.750
携带用户的Cookie发送过去

34:17.750 --> 34:19.750
就完成了攻击

34:19.750 --> 34:20.750
防护方式

34:20.750 --> 34:22.750
第一种不是用Cookie

34:22.750 --> 34:24.750
第二种为表达添加Token验证

34:24.750 --> 34:26.750
CSRFToken

34:26.750 --> 34:28.750
还有就是用Cookie

34:28.750 --> 34:30.750
在Cookie上使用Stame Size

34:30.750 --> 34:32.750
或者是服务器检查refer

34:32.750 --> 34:35.750
现在这种方式基本上不太常见了

34:35.750 --> 34:38.750
这就是关于CSRF攻击

