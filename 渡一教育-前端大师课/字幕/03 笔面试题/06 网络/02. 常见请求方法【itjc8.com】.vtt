WEBVTT

00:00.000 --> 00:05.920
好 这期课呢 咱们来聊一聊请求方法的一些本质

00:05.920 --> 00:09.600
以及呢 重点聊一聊gatter pose的区别

00:09.600 --> 00:15.000
而实际上大家要知道啊 这个请求方法到底是一个什么东西

00:15.000 --> 00:20.000
看一下这段文字 这段文字呢 聊起来可能有点抽象 我们慢慢解释

00:20.000 --> 00:25.000
请求方法其实它就是请求行中的一个单词而已

00:25.000 --> 00:29.000
我们都学过adb请求 对吧 请求的时候是不是有请求行

00:29.000 --> 00:34.000
第一行 然后有请求头 建置队 然后接下来是请求体

00:34.000 --> 00:38.000
请求行里边的第一个单词就表示的是请求方法

00:38.000 --> 00:43.000
它啥意思呢 它向服务器描述了你要干嘛

00:43.000 --> 00:46.000
就好似说你到银行里边去办你业务

00:46.000 --> 00:50.000
你跑过去第一句话 对吧 你可以说我要取钱

00:50.000 --> 00:54.000
我要存钱 我要办卡 对吧 这就是请求方法

00:54.000 --> 00:57.000
它简短的描述了一下你到底要干嘛

00:57.000 --> 01:00.000
然后接下来你再去详细的描述啊

01:00.000 --> 01:04.000
你要取钱 你得有卡 对不对 你得有账号密码

01:04.000 --> 01:08.000
你要办卡的话得填写一张表格 然后再去具体的事情

01:08.000 --> 01:13.000
就第一个单词就表示它的一个总体的描述一下你要干嘛

01:13.000 --> 01:19.000
那么在ATP协议里边 其实它并没有对请求方法

01:19.000 --> 01:23.000
规定说你必须要用什么样的请求方法 它没有规定

01:23.000 --> 01:26.000
它只是有了这么一个位置让你写一个单词

01:26.000 --> 01:29.000
具体这个单词写啥 你自己去定

01:29.000 --> 01:33.000
ATP协议里边有建议

01:33.000 --> 01:36.000
比如说你写一个概册 表示什么意思呢

01:36.000 --> 01:41.000
表示的是我向服务器要一个东西 我拿一个东西

01:41.000 --> 01:45.000
如果说你写的是post 表示我要提交一些东西

01:45.000 --> 01:49.000
它就有一些简单的规定 简单的建议

01:49.000 --> 01:52.000
它并不是强行的约束 是这么个意思

01:52.000 --> 01:57.000
所以说在ATP协议里边 它并不是说你必须要用什么样的请求方法

01:57.000 --> 02:00.000
具体用什么样的请求方法 它只是建议

02:00.000 --> 02:03.000
那么具体用什么 你自己去定

02:03.000 --> 02:08.000
那么谁来定呢 就需要服务器和浏览器来共同的决定

02:08.000 --> 02:11.000
就你给我这个方法 那么是什么意思

02:11.000 --> 02:13.000
你给我那个方法是什么意思

02:13.000 --> 02:16.000
把下面一张图可以非常明调地说明这个问题

02:16.000 --> 02:19.000
比如说一个客户端 向服务器发送了一个请求

02:19.000 --> 02:21.000
他写了一个gats 表示啥意思呢

02:21.000 --> 02:26.000
他就给服务器说 我来取钱 我要拿一些东西

02:26.000 --> 02:30.000
给他写一个post 表示说我要提交一些东西

02:30.000 --> 02:33.000
就这么一个意思 就是约定熟成的

02:33.000 --> 02:35.000
就好像你说你去奶茶店

02:35.000 --> 02:39.000
服务员总是来一句欢迎光临 很高兴为的服务

02:39.000 --> 02:40.000
是这个意思

02:40.000 --> 02:43.000
那么下面这个大码拿来看一下

02:43.000 --> 02:45.000
这是一段阿迦克斯的大码

02:45.000 --> 02:49.000
他啥意思呢 他想请求服务器 百度的服务器

02:49.000 --> 02:53.000
我这意思呢 去约定了一个请求方法 method

02:53.000 --> 02:55.000
给他写了一个嘿嘿嘿

02:55.000 --> 02:57.000
啥意思呢 就高出百度

02:57.000 --> 02:59.000
我这次请求是过来嘿嘿嘿的

02:59.000 --> 03:03.000
那么这个请求呢 实际上是可以发出去的

03:03.000 --> 03:05.000
他并不是一个无效请求

03:05.000 --> 03:07.000
他是一个正常的请求

03:07.000 --> 03:10.000
只不过服务器 他不知道你啥意思

03:10.000 --> 03:12.000
然后你跑到银行里边办业务

03:13.000 --> 03:15.000
对方不知道你要干嘛

03:15.000 --> 03:17.000
你能不能说出来 肯定能说出来

03:17.000 --> 03:18.000
就这么个意思

03:18.000 --> 03:20.000
大家看一下这个方法其实可以请求他

03:20.000 --> 03:22.000
比方说 我们去百度

03:24.000 --> 03:28.000
然后我给他发一个 我在那个network里边

03:28.000 --> 03:30.000
打开控制台

03:30.000 --> 03:34.210
我给他发一个请求

03:34.210 --> 03:36.210
你看 这个请求是不是发出去了

03:36.210 --> 03:37.210
发出去了百度

03:37.210 --> 03:40.210
你看我们request 我看view source

03:40.210 --> 03:42.210
是不是那个请求方法 第一个单词

03:42.210 --> 03:44.210
嘿嘿嘿 百度听不懂

03:44.210 --> 03:45.210
他不知道你要干嘛

03:45.210 --> 03:48.210
所以说 他给你的响应的是一个

03:48.210 --> 03:49.210
302重定项

03:49.210 --> 03:51.210
一个302重定项

03:51.210 --> 03:52.210
他重定上哪儿了

03:52.210 --> 03:53.210
重定上到一个错误野面

03:53.210 --> 03:55.210
他不知道你要干嘛

03:55.210 --> 03:56.210
就这么个意思

03:56.210 --> 03:57.210
所有请求方法呢

03:57.210 --> 03:59.210
实际上是可以自定义的

03:59.210 --> 04:00.210
那么这个自定义呢

04:00.210 --> 04:01.210
我们平时开发

04:01.210 --> 04:03.210
会不会遇到呢

04:03.210 --> 04:04.210
不太会遇到

04:04.210 --> 04:07.210
可能有一些公司呢

04:07.210 --> 04:08.210
因为种种原因

04:08.210 --> 04:10.210
可能会自定义的一些请求方法

04:10.210 --> 04:12.210
但是一般来说不会

04:12.210 --> 04:14.210
因为我们平时约定俗层的

04:14.210 --> 04:17.210
一些现成的方法就完全够用了

04:17.210 --> 04:19.210
因此我们平时用的一些请求方法

04:19.210 --> 04:21.210
实际在实践里边

04:21.210 --> 04:24.210
客户端和服务器慢慢的形成一个共识

04:24.210 --> 04:25.210
你不要乱说话

04:25.210 --> 04:26.210
对吧 你就进来就说

04:26.210 --> 04:29.210
你要干嘛 你要取钱 你要办卡

04:29.210 --> 04:31.210
你要存钱

04:31.210 --> 04:33.210
你简单的说一下就行了

04:33.210 --> 04:36.210
你不要去乱去约定一些方法

04:36.210 --> 04:38.210
我就不知道你啥意思了

04:38.210 --> 04:40.210
所以说我们目前的方法都是约定俗层的

04:40.210 --> 04:42.210
那么我们平时约定俗层的方法

04:42.210 --> 04:45.210
有哪些呢 有下面的一些

04:45.210 --> 04:47.210
那么我一个看一下

04:47.210 --> 04:48.210
一个是Gate

04:48.210 --> 04:49.210
比较常见的对吧

04:49.210 --> 04:51.210
表示向服务器获取资源

04:51.210 --> 04:53.210
那么这个方法呢

04:53.210 --> 04:57.210
我们约定你的业务数据呢

04:57.210 --> 04:58.210
在请求行一边

04:58.210 --> 05:00.210
不需要请求题

05:00.210 --> 05:01.210
所以我们平时说Gate请求

05:01.210 --> 05:02.210
没有请求题

05:02.210 --> 05:04.210
其实并不完全正确

05:04.210 --> 05:06.210
Gate请求是可以有请求题的

05:06.210 --> 05:07.210
是可以有的

05:07.210 --> 05:08.210
只不过呢

05:08.210 --> 05:11.210
我们浏览器和服务器约定好了

05:11.210 --> 05:13.210
Gate你要拿东西你就不需要

05:13.210 --> 05:15.210
给我提交太多数据了

05:15.210 --> 05:16.210
你就不需要请求题了

05:16.210 --> 05:18.210
只是我们约定的而已

05:18.210 --> 05:19.210
是这么一个回事

05:19.210 --> 05:21.210
那么这句话啥意思呢

05:21.210 --> 05:24.210
业务数据在请求行中

05:24.210 --> 05:26.210
首先什么是业务数据

05:26.210 --> 05:28.210
业务数据比方离到银行里边办业务

05:28.210 --> 05:30.210
你去办办卡

05:30.210 --> 05:31.210
是不是要提交你的身份信息

05:31.210 --> 05:34.210
对吧 身份证 姓名 年年

05:34.210 --> 05:36.210
家能年 铸旨 电话号码

05:36.210 --> 05:38.210
这些信息就是业务数据

05:38.210 --> 05:40.210
根这件事相关的

05:40.210 --> 05:44.210
比方说你在网页上去找第二页的电影

05:44.210 --> 05:46.210
我要拿一个电影列表

05:46.210 --> 05:48.210
第二页的主要电影

05:48.210 --> 05:50.210
第二页它就是业务数据

05:50.210 --> 05:52.210
跟这个功能是相关的

05:52.210 --> 05:53.210
那么这个业务数据

05:53.210 --> 05:55.210
放到请求行里边又是什么意思呢

05:55.210 --> 05:57.210
我们平时说Gate请求的数据

05:57.210 --> 06:00.210
把主任放到UID纸里边的

06:00.210 --> 06:02.210
其实我们说的更专业一点

06:02.210 --> 06:09.850
只在请求行里边 为啥这样说呢 你看任何的get请求啊 我们就拿一个翻页的吧 让我们随便输一个

06:12.410 --> 06:18.970
啊 你看这就这吧 你看这里边是不是地址哪里边有些有些数据对吧 这些都是相关的一些业务数据 我们打开我们的

06:19.450 --> 06:21.330
列车啊 那我们再刷新一下吧

06:22.170 --> 06:27.610
你看这是我们第一个请求就get请求这get请求呢 我们来看一下这个request headers

06:27.610 --> 06:32.690
5u source 看它原式格式啊 请求行就在第一行对吧 因为它太多了换行了

06:33.650 --> 06:35.370
其实它本质没有换行是显示不下了

06:36.210 --> 06:42.490
啊 这这就是这个请求行请求行里边 第一个单词是不是请求方法 第二个单词是不是我们请求的路径啊

06:43.010 --> 06:48.530
也请求路径里边是不是包含了我们的业务数据 所以说这个业务数据呢 本质上是在请求行里边

06:49.570 --> 06:54.970
我的意思吧啊 这是get请求啊 它业务数据在请求行中无需请求体

06:55.970 --> 07:02.450
然后post请求呢 表示向服务器提交信息 用于产生 通常用于产生新的数据 比方说注册啊

07:02.890 --> 07:05.970
对吧 这种数据 但是有的时候呢 也不一定产生新的数据 比方说登录

07:06.490 --> 07:11.410
没有产生新的数据 对不对 我们只是登录 它这种情形呢 我们一般也用post请求

07:12.170 --> 07:14.570
那么这种请求呢 业务数据在请求体里边

07:15.650 --> 07:18.730
啊 这里不用想起说了吧 这个好理解 然后post请求

07:19.370 --> 07:26.650
这个请求呢 我们在开发了一个个人不恨的设书也遇到过 表示希望修改服务器的数据 通常用于修改

07:27.490 --> 07:31.810
然后我们改动一篇文章啊 改动一个评论啊 这些可以用post请求啊 当然你

07:32.130 --> 07:38.210
我不用post请求 我用post请求行不行 可以 没有任何问题啊 你跟服务器之间自行去决定

07:38.770 --> 07:43.370
那么这个 因为我们只是写前端嘛 还有一个后端开发人员啊 再写服务器

07:43.730 --> 07:48.530
服务器那边他会给你一个文档 他会告诉你到底用什么请求来完成那个功能

07:48.730 --> 07:56.410
我还给你写好 那么这个post请求的业务数据呢 也一般在请求体里边 比方说你修改文章的标题 那么修改成什么新的标题

07:56.650 --> 08:05.690
新的标题呢 就在请求体里边 然后定内层的表示想删除数据啊 这个是请求了一般请求业务数据呢 在请求行中 比方你占出了文章的id

08:06.210 --> 08:09.970
可以放到地址栏里边 对吧 它是也是无需请求体的

08:10.650 --> 08:15.970
然后下面这个option是请求的是跟跨域相关的啊 大家现在如果说没有学过跨域的话

08:16.330 --> 08:22.450
我们有单独的议节课来讲解跨域 那么这个跨域里边我们会详细讲解这个option是这个请求

08:23.130 --> 08:27.490
然后trash 和connected呢 这个跟里面就没有什么关系的 这是运维的时候可能会用到的

08:28.170 --> 08:34.050
trash一般用于测试和诊断 看是不是这个服务器那边请求是没问题的 用脸通的

08:34.610 --> 08:41.930
connected一般用于做那个运维的代理 这个里面一般遇不到的 就简单说一下 这里有这么一些请求方法

08:42.410 --> 08:47.410
关于请求方法 请求方法的话 大家一定要记住 请求方法本质上就是

08:48.890 --> 08:50.770
发送那个消息里边的第一个单词

08:52.130 --> 08:58.650
这个单词表达了 我想干嘛 就这么意思啊 接下来来说get a post的区别

08:59.130 --> 09:06.890
其实你们以后在这个面试题问的比较多啊 在问到面试题问到这个问题的时候 大家一定要加上前面这段话

09:07.850 --> 09:13.770
他们本质上的其实没有什么区别 他们就是一个单词不同而已 对吧 只有语义上的区别

09:14.810 --> 09:21.850
就是他的含义不一样 但是具体他们有什么区别呢 需要服务器和浏览器共同来约定

09:22.370 --> 09:31.730
那么在长期的实践过程中 浏览器和服务器约定好了get a post成了get a 你就最好没有消息题 就是没有请求题

09:32.690 --> 09:34.370
所有的业务数据在地址里边

09:35.490 --> 09:42.530
然后呢 post上的就需要带请求题 你的业务数据呢 一般放到请求题里边 那么就形成这个约定

09:43.530 --> 09:50.490
由于这个约定的存在 所以说才造成了他们的具体区别 是这么一回事 逻辑要给他解释清楚

09:50.930 --> 09:55.650
那么造成了什么样的区别呢 首先我们一个看啊 浏览器在发送get的请求的时候不会负担请求题

09:56.450 --> 10:02.650
对不对 哪怕你在浏览器里边写了请求题 比方说你用一个阿加克斯给他写了一个请求题 用get请求题请求

10:03.170 --> 10:09.850
他也不会认 比方说我们这里随便写一个哈 就请求百度吧 我们现在不不care他到底

10:11.170 --> 10:19.210
甩不甩我们 我们只是把请求发出去 我们来观察一下他个请求体存不存在 比方说我们这写了个废棋啊 这里呢我们请求百度

10:20.250 --> 10:21.570
然后给他带一个请求底吧

10:22.570 --> 10:23.570
Body

10:24.570 --> 10:27.570
然后给他写一个一二叉吧

10:28.570 --> 10:29.570
回头

10:32.570 --> 10:33.570
什么意思啊

10:36.570 --> 10:43.570
他这里就已经给你提示错误了 他说get和head请求他不能有请求题

10:44.570 --> 10:47.570
这个head请求 我们也不care 但不能有请求题

10:48.570 --> 10:54.570
那么这就是浏览器他的这个行为跟我们造成的区别 实际上他能不能有请求题的能

10:55.570 --> 11:02.570
如果说你以后学了路德街式 路德街式也是在环境里边也是可以发动请求的 那么那个时候你就可以在get请求里边带请求题了

11:03.570 --> 11:07.570
所以浏览器他不准利单啊 因为他觉得没有意义 就这么一个区别啊

11:08.570 --> 11:15.570
第二个点呢 get请求的传递信息量有限 主要要解释一下 为什么传递信息量有限

11:16.570 --> 11:23.570
他不是说这个地方呢 是因为浏览器他对那个在请求的时候 请求里面不是包含三个部分吗

11:24.570 --> 11:32.570
一个是请求行 地行对吧 然后请求题 请求头 很多建制队

11:33.570 --> 11:39.570
然后两个换行 接下来是请求题 这是一个完整的请求里边的所有数据

11:40.570 --> 11:48.570
浏览器规定这一块的内容 就包含请求行 包含请求头 这一块他的内容呢

11:49.570 --> 11:56.570
大小是有限制的 你不能说无限多 不要请求头里边 你很多很多的建制队 信息量特别特别巨大 那不行

11:57.570 --> 12:04.570
那么请求行呢也是不能太多 那么每个浏览器不同的浏览器 他在规定的大小是不一样的

12:04.570 --> 12:13.570
ADTP协议里边 他并没有规定说这里边必须是有多少大小的限制 他没有规定

12:14.570 --> 12:19.570
是浏览器规定的 所以以后脱离到浏览器环境 你是完全可以无视这里边的大小的

12:20.570 --> 12:28.570
是这么个意思 浏览器有尺寸的约定 比方说像请求行里边 像谷歌的约定好像是4kb 超过4kb他就不认了

12:29.570 --> 12:43.570
那么由于他对这两块的尺寸有规定 所以说盖浙请求他就无法传递大量数据 是因为浏览器有规定

12:44.570 --> 12:50.570
但是浏览器他没有规定请求体里边有多少数据 所以请求体理论上是无限的 你随便放多少都可以

12:51.570 --> 12:57.570
所以说铺设请求 传递的信息量他放到请求体里边了 因此他没有限制 适合传递大量数据

12:58.570 --> 13:02.570
所以说我们平时做文件上传 是不是把文件数据放到请求体里边 用铺设请求

13:04.570 --> 13:11.570
如果说像一个我获取第几页 第几页的内容了 那倒无所谓 你放请求 放gith请求行里边就可以了

13:12.570 --> 13:16.570
比方说你要获取新闻的第二页新闻 你说可以这样子写 是吧 第二页新闻

13:16.570 --> 13:22.570
这个信息量是非常有限的 这就是第二个区别 强调的信息量是有限制的

13:23.570 --> 13:34.570
第三个就是浏览器 他gith请求只能传递ask数据 什么叫ask数据 ask编码数据 他只能编码英文 英文符号 数字 阿拉伯式数字

13:35.570 --> 13:42.570
那么这种数据gith请他只能传递这样的一个数据

13:43.570 --> 13:49.570
如果说遇到非ask数据的信号去行编码 那么首先我一个个解释 为什么gith请求他只能传递这个数据

13:50.570 --> 13:57.570
他只能传递英文字母 英文符号以及数字 为什么呢 还是因为浏览器

13:58.570 --> 14:06.570
有规定说这个请求头里边和请求行里边 这一部分只能是ask数据 他不能是别的

14:07.570 --> 14:16.570
要这里面是不能有中文的 不能有非ask数据 不能有别的特殊符号 比方说中文符号 这也是不行的

14:17.570 --> 14:21.570
那可能说他就奇怪了 那我如果说在百度里面去搜索一个 比方说邓哥

14:24.570 --> 14:30.570
那么请求 你看这个请求行里边 这是就是给我们请求的地址 对吧

14:31.570 --> 14:35.570
请求行里边不是有一个汉字吗 他不是说不能传递非ask数据吗

14:36.570 --> 14:41.570
那是怎么回事呢 实际上浏览器当遇到这种情况 他会自动的帮我们进行编码

14:42.570 --> 14:45.570
自动帮我们进行编码 那帮我们来看一下

14:48.570 --> 14:58.860
我们打开调时控制台 然后找到这个网络 我们在这里搜索邓哥

14:58.860 --> 15:00.860
邓哥 好 回头

15:07.060 --> 15:10.060
邓哥 我们看第一个

15:11.060 --> 15:14.060
我们会发现这里的我们找到的他原式格式

15:14.060 --> 15:19.060
request headers 电车的时候 我们本来是关键字wd

15:19.060 --> 15:24.060
你看wd 是邓哥 对吧 这里看见邓哥 明明是汉字

15:24.060 --> 15:28.060
但是我们在请求的时候 实际上他变了 他变成这个玩意了

15:28.060 --> 15:34.060
邓哥变成了100% 19% 82% 93% 这是怎么回事呢

15:34.060 --> 15:38.060
这就是他浏览器自动的完整的uild 地址编码

15:39.060 --> 15:42.060
他把这个非ask制服给你转换成ask制服

15:42.060 --> 15:48.060
那么这个100%是英文制服 支持1英文制服 支持9英文制服 支持

15:49.060 --> 15:57.060
他其实就是用utf8的编码方式 把每一个汉字编码成3个这么一种特殊符号

15:58.060 --> 16:02.060
这就是邓 后面就是哥 具体编码过程你不用去管

16:02.060 --> 16:06.060
其实这件事呢 以前在早期的时候呢

16:06.060 --> 16:10.060
我们是需要开发者自行处理的 浏览器他不帮我们处理

16:11.060 --> 16:14.060
但是现在呢 不需要了 现在浏览器都能自动帮我们处理

16:14.060 --> 16:18.060
发现有非ask制服呢 他就会进行编码制服

16:19.060 --> 16:24.060
那么如果说我们以前在以前的那个开发里边

16:25.060 --> 16:28.060
那我们要怎么来进行处理呢 比方说我们要发送一个阿迦赫斯请求

16:29.060 --> 16:32.060
这个请求里边 比方说哈 我要发送一个阿迦赫斯请求

16:33.060 --> 16:37.060
这个请求里边呢 是adps啊 我们就约是本站嘛

16:37.060 --> 16:38.060
我们就仔细用路径得了

16:39.060 --> 16:43.060
swt啊 登革 现在这个请求能不能发出去呢

16:43.060 --> 16:45.060
是能够发 正常发出去的啊 我们来看一下

16:47.060 --> 16:50.060
回头 好 接下来我们到网络那边去看一下

16:50.060 --> 16:52.060
网络那边 我们找到这个阿迦赫斯

16:53.060 --> 16:55.060
刚才我们发送了一个阿迦赫斯请求 你看

16:56.060 --> 16:59.060
他会自动的帮我们变成自动格式编码

16:59.060 --> 17:01.060
现在是可以的 他以前不行啊

17:01.060 --> 17:03.060
以前的怎么选呢 我们以前的得先把

17:04.060 --> 17:06.060
邓哥进行编码啊 in code

17:07.060 --> 17:10.060
把这个邓哥进一编码 怎么来办编码呢

17:10.060 --> 17:13.060
是有一个喊恩数叫做url

17:13.060 --> 17:17.060
叫incodeurlicomponent

17:18.060 --> 17:23.500
把邓哥进行编码 然后这个这个

17:23.500 --> 17:25.500
编码里面就保存了编码的结果

17:25.500 --> 17:28.500
然后再把这个编码结果拼接到这个这个里面

17:28.500 --> 17:30.500
不好意思啊 以前得这么做啊 现在不需要了

17:30.500 --> 17:31.500
他自动完成了

17:32.500 --> 17:35.500
但是现在的有些地方的还是 这个玩意还是有用的

17:35.500 --> 17:39.500
比方说你要请求的 你要查询的关键字是这个

17:39.500 --> 17:42.500
我觉得例子啊 比方说你要查询的关键字是

17:43.500 --> 17:49.010
问号的这个符号

17:52.010 --> 17:54.010
比方说你要查查这个东西

17:56.010 --> 17:58.010
你看查这个东西的时候 你看这里

17:58.010 --> 18:00.010
我们把这个地址复制一下

18:00.010 --> 18:07.420
我们看看wd吧

18:14.780 --> 18:15.780
写个汉字了

18:19.780 --> 18:21.780
我们直接在这里写吧 直接在这里写

18:23.780 --> 18:29.780
wd 等于我要查的是

18:29.780 --> 18:31.780
三and a等于

18:31.780 --> 18:33.780
你就看到问题了 是吧

18:33.780 --> 18:34.780
我们要查的是这个东西

18:34.780 --> 18:36.780
但是这里面有一些特殊符号

18:36.780 --> 18:38.780
这种特殊符号的话

18:38.780 --> 18:41.780
就会造成了产生的起义

18:41.780 --> 18:43.780
好像你查的是关键字3

18:43.780 --> 18:45.780
然后呢 有另外一个

18:45.780 --> 18:47.780
地址男参数 a等于1

18:47.780 --> 18:49.780
对吧 但是我们查的实际上是这个字

18:50.780 --> 18:51.780
懂了意思吧

18:51.780 --> 18:53.780
那么这两个字实际上你查的是3

18:53.780 --> 18:55.780
就这么一回事

18:55.780 --> 18:57.780
那么这种情况 如果说我们要

18:57.780 --> 18:59.780
要处理的话 怎么处理呢

18:59.780 --> 19:00.780
在写代码的时候

19:00.780 --> 19:02.780
这个地方就需要我们单独处理一下

19:02.780 --> 19:04.780
比方说我们这里可以怎么这样处理

19:04.780 --> 19:06.780
incode

19:06.780 --> 19:08.780
那么把这个a

19:08.780 --> 19:10.780
把这个3and a等于1

19:10.780 --> 19:12.780
编成

19:12.780 --> 19:14.780
先进行编码 编码过后

19:14.780 --> 19:16.780
它会把特殊符号也进行编码

19:17.780 --> 19:18.780
然后再去拼接

19:18.780 --> 19:20.780
我们废弃

19:20.780 --> 19:22.780
https

19:22.780 --> 19:24.780
对吧 就是s

19:24.780 --> 19:26.780
wd等于

19:26.780 --> 19:27.780
incode

19:27.780 --> 19:29.780
这样的拼接 这样的去查

19:29.780 --> 19:31.780
那么这样子我们看一下

19:31.780 --> 19:33.780
也是我可理表

19:33.780 --> 19:35.780
它查的就是这个东西

19:36.780 --> 19:38.780
ok 这是关于

19:38.780 --> 19:40.780
这一点 我说的多一点

19:40.780 --> 19:41.780
然后下一点呢

19:41.780 --> 19:42.780
就大部分get请求

19:42.780 --> 19:43.780
传递的数据呢

19:43.780 --> 19:45.780
都是附带在

19:45.780 --> 19:46.780
地址栏树中

19:46.780 --> 19:47.780
因此呢 它可以通过

19:47.780 --> 19:49.780
分享地址完整的重现页面

19:49.780 --> 19:51.780
但同时也暴露了数据

19:51.780 --> 19:53.780
又有敏感数据

19:53.780 --> 19:54.780
不应该使用get

19:54.780 --> 19:55.780
至少不应该放在pass中

19:55.780 --> 19:56.780
这说的啥意思呢

19:56.780 --> 19:58.780
就是说你这个地址啊

20:02.780 --> 20:04.780
这个是get请求

20:04.780 --> 20:06.780
这个get请求里边

20:06.780 --> 20:07.780
你会发现

20:07.780 --> 20:08.780
我们要请求的信息

20:08.780 --> 20:10.780
全在地址栏树里边

20:10.780 --> 20:11.780
就地址栏树里边

20:11.780 --> 20:12.780
包含了所有业务数据

20:12.780 --> 20:13.780
因为它没有请求体

20:13.780 --> 20:14.780
对吧

20:14.780 --> 20:15.780
所以说你把这个地址啊

20:15.780 --> 20:16.780
只要一分享给别人

20:16.780 --> 20:17.780
别人一暂停到

20:17.780 --> 20:18.780
他的浏览器里边

20:18.780 --> 20:21.780
他就能够完整的重现这个页面

20:21.780 --> 20:23.780
完整的重现这个页面

20:23.780 --> 20:25.780
你看 如果说我这边翻页了

20:25.780 --> 20:28.780
放到第二页 第三页

20:28.780 --> 20:29.780
好 你看

20:29.780 --> 20:30.780
放到第三页过后

20:30.780 --> 20:31.780
地址栏树肯定有一个地方

20:31.780 --> 20:33.780
进入了目前是第三页

20:33.780 --> 20:36.780
然后你把这个地址放过来

20:36.780 --> 20:37.780
因此你也会看到

20:37.780 --> 20:38.780
目前是第三页

20:38.780 --> 20:39.780
它可以完整的重现一面

20:39.780 --> 20:41.780
它便于分享

20:42.780 --> 20:44.780
因为它没有请求体

20:44.780 --> 20:45.780
你只需要

20:45.780 --> 20:46.780
它的所有信息都在地址里边

20:46.780 --> 20:47.780
你把地址复制过去

20:47.780 --> 20:49.780
就包含了我这个页面

20:49.780 --> 20:50.780
需要的所有信息

20:50.780 --> 20:52.780
它的页面就能够重现

20:52.780 --> 20:54.780
但是POSE的请求就不行

20:54.780 --> 20:55.780
POSE的请求

20:55.780 --> 20:57.780
它的所有信息在这吗

20:57.780 --> 20:58.780
它根本就不在这

20:58.780 --> 20:59.780
比方说

20:59.780 --> 21:00.780
如果说百度

21:00.780 --> 21:01.780
它做的这个页面

21:01.780 --> 21:02.780
它不是用Gate的请求做的

21:02.780 --> 21:04.780
它是用POSE的请求做的

21:04.780 --> 21:06.780
就是你这里搜索的时候

21:06.780 --> 21:08.780
发送一个POSE的请求

21:08.780 --> 21:09.780
因此

21:09.780 --> 21:10.780
所有的信息都在

21:10.780 --> 21:11.780
地址南参数里

21:11.780 --> 21:12.780
都在请求体里边

21:12.780 --> 21:14.780
因此是用这种情况下

21:14.780 --> 21:15.780
你该复制这个地址

21:15.780 --> 21:16.780
复制给别人

21:16.780 --> 21:17.780
别人能看到吗

21:17.780 --> 21:18.780
不行

21:18.780 --> 21:19.780
因为你只复制了地址

21:19.780 --> 21:21.780
你没有办法复制请求体

21:21.780 --> 21:22.780
而且这里边

21:22.780 --> 21:23.780
你就算能复制请求体

21:23.780 --> 21:24.780
该沾过去

21:24.780 --> 21:26.780
别人也无法在地址南里边

21:26.780 --> 21:28.780
把请求体重现出来

21:28.780 --> 21:29.780
POSE的请求是

21:29.780 --> 21:31.780
没有办法分享页面

21:32.780 --> 21:34.780
当然这有好处有坏处

21:34.780 --> 21:35.780
Gate请求

21:35.780 --> 21:37.780
它这样做的坏处是什么呢

21:37.780 --> 21:38.780
当然所有的信息

21:38.780 --> 21:40.780
都被暴露在地址南了

21:40.780 --> 21:41.780
那如果说你做登录

21:41.780 --> 21:42.780
你能用Gate吗

21:42.780 --> 21:43.780
你就不能

21:43.780 --> 21:44.780
为什么呢

21:44.780 --> 21:45.780
你用登录的时候

21:45.780 --> 21:46.780
利用Gate请求的话

21:46.780 --> 21:47.780
那么就意味着

21:47.780 --> 21:48.780
比方说

21:48.780 --> 21:49.780
有一个地址

21:49.780 --> 21:50.780
登录的时候

21:50.780 --> 21:51.780
locking

21:51.780 --> 21:53.780
你请求这个地址

21:53.780 --> 21:55.780
那么你登录的时候

21:55.780 --> 21:56.780
利用Gate请求来

21:56.780 --> 21:57.780
请求登录的话

21:57.780 --> 21:59.780
那就就造成一个问题

21:59.780 --> 22:00.780
它会把这个locking

22:00.780 --> 22:01.780
ID

22:01.780 --> 22:02.780
然后登录账号

22:02.780 --> 22:04.780
然后登录密码

22:04.780 --> 22:05.780
是不是只能用

22:05.780 --> 22:07.780
这种方式发送给服务器

22:07.780 --> 22:08.780
因为它没有请求帖

22:08.780 --> 22:09.780
那么这样子

22:09.780 --> 22:10.780
你把地址分享出去的话

22:10.780 --> 22:11.780
是不是就造成

22:11.780 --> 22:12.780
不管你分不分享

22:12.780 --> 22:13.780
这个地址南

22:13.780 --> 22:14.780
南上一看

22:14.780 --> 22:15.780
是不是就容易看到

22:15.780 --> 22:16.780
你的账号密码

22:16.780 --> 22:17.780
明文显示的

22:18.780 --> 22:19.780
所以这样会造成不安全

22:19.780 --> 22:20.780
Pose

22:20.780 --> 22:21.780
相对安全一些

22:21.780 --> 22:22.780
是因为它的信息

22:22.780 --> 22:23.780
放在请求帖里边了

22:23.780 --> 22:25.780
你在地址南看不到

22:25.780 --> 22:26.780
它并没有加密

22:26.780 --> 22:27.780
没有任何加密

22:27.780 --> 22:28.780
ATB信息

22:28.780 --> 22:30.780
是不涉及任何加密的

22:30.780 --> 22:31.780
它传输的过程

22:31.780 --> 22:32.780
仍然是明文传输

22:32.780 --> 22:33.780
只不过

22:33.780 --> 22:35.780
它只是地址南看不到而已

22:35.780 --> 22:36.780
比方说

22:36.780 --> 22:38.780
你在网吧上网的时候

22:38.780 --> 22:39.780
你登录

22:39.780 --> 22:40.780
后边有人在看

22:40.780 --> 22:42.780
就容易看到你的

22:42.780 --> 22:43.780
地址南那边的账号密码

22:43.780 --> 22:44.780
所以Gate请求

22:44.780 --> 22:46.780
会有一些安全性问题

22:46.780 --> 22:47.780
好

22:47.780 --> 22:49.780
然后下边第五个

22:49.780 --> 22:50.780
刷新页面的时候

22:50.780 --> 22:51.780
如果说当前页面

22:51.780 --> 22:52.780
是用Pose请求得到的

22:52.780 --> 22:53.780
则柳烂青

22:53.780 --> 22:54.780
会提示用户

22:54.780 --> 22:55.780
是否重新提交

22:55.780 --> 22:57.780
若是Gate请求得到的

22:57.780 --> 22:58.780
就没有提示

22:58.780 --> 22:59.780
这啥意思呢

22:59.780 --> 23:00.780
比方说这个页面

23:00.780 --> 23:01.780
我们是怎么来的

23:01.780 --> 23:02.780
是不是通过Gate请求

23:02.780 --> 23:03.780
请求来的

23:04.780 --> 23:06.780
百度的这个页面

23:06.780 --> 23:07.780
就是用Gate请求

23:07.780 --> 23:08.780
请求来的

23:08.780 --> 23:09.780
因此你刷新它的时候

23:09.780 --> 23:10.780
它就直接刷新了

23:10.780 --> 23:11.780
它没有什么

23:11.780 --> 23:12.780
额外的事情可以做

23:12.780 --> 23:13.780
那如果说

23:13.780 --> 23:14.780
有个页面

23:14.780 --> 23:15.780
比方说这里有个页面

23:15.780 --> 23:16.780
你看一下这个页面

23:16.780 --> 23:17.780
我这里写个风表单

23:17.780 --> 23:18.780
用非常原式的

23:18.780 --> 23:19.780
不是用阿迪克斯

23:19.780 --> 23:20.780
我现在说的是

23:20.780 --> 23:21.780
非常原式的方式

23:21.780 --> 23:23.780
提交到这个地址

23:23.780 --> 23:24.780
用Pose请求

23:24.780 --> 23:25.780
写个账号密码

23:25.780 --> 23:26.780
写到这

23:26.780 --> 23:27.780
那我们来看一下

23:27.780 --> 23:28.780
这个页面

23:28.780 --> 23:30.780
我们随便写个账号密码

23:30.780 --> 23:31.780
全部成功

23:31.780 --> 23:32.780
无所谓

23:32.780 --> 23:33.780
提交

23:33.780 --> 23:34.780
提交到这个地址

23:34.780 --> 23:35.780
这个地址哪来的

23:35.780 --> 23:36.780
这个页面哪来的

23:36.780 --> 23:39.780
是不是通过Pose请求得到的

23:39.780 --> 23:40.780
对不对

23:40.780 --> 23:41.780
那么这个时候

23:41.780 --> 23:42.780
如果说你在刷新页面

23:42.780 --> 23:43.780
它会提示你

23:43.780 --> 23:45.780
因为这个时候

23:45.780 --> 23:47.780
确实要让用户注意一下

23:47.780 --> 23:48.780
你这个地方

23:48.780 --> 23:49.780
可不是Gate请求

23:49.780 --> 23:50.780
如果说我要重新

23:50.780 --> 23:51.780
刷新这个页面

23:51.780 --> 23:53.780
那我得重新提交一次

23:53.780 --> 23:55.780
我不能把请求体扔掉

23:55.780 --> 23:56.780
因为它会提示你

23:56.780 --> 23:58.780
是不是要重新提交

23:58.780 --> 24:00.780
你点继续就重新提交一次

24:00.780 --> 24:02.780
请求体跟之前的请求体一样

24:02.780 --> 24:03.780
就这么个意思

24:03.780 --> 24:05.780
这个地方还有一个小的细节

24:05.780 --> 24:06.780
就是如果说你打开

24:06.780 --> 24:08.780
这个调试工具的话

24:08.780 --> 24:09.780
它就不会提示你的

24:09.780 --> 24:10.780
比方说这个时候

24:10.780 --> 24:11.780
刷新它就不会提示你的

24:11.780 --> 24:13.780
它直接用之前的请求体

24:13.780 --> 24:14.780
重新提交一次

24:14.780 --> 24:15.780
为什么呢

24:15.780 --> 24:16.780
它觉得你都打开调试工具了

24:16.780 --> 24:18.780
说明你肯定是开发者

24:18.780 --> 24:19.780
你想做一些调试

24:19.780 --> 24:21.780
你肯定清楚自己在干嘛

24:21.780 --> 24:23.780
如果说你没有打开调试工具的话

24:23.780 --> 24:25.780
它就认为你是个普通用户

24:25.780 --> 24:26.780
普通用户的话

24:26.780 --> 24:27.780
你不能

24:27.780 --> 24:28.780
万一你重复

24:28.780 --> 24:30.780
就会容易导致重复提交

24:30.780 --> 24:31.780
所以说

24:31.780 --> 24:32.780
它会给你一个油耗的提示

24:32.780 --> 24:34.780
就这么个意思

24:34.780 --> 24:36.780
这是那个

24:36.780 --> 24:37.780
第五个

24:37.780 --> 24:38.780
第六个

24:38.780 --> 24:39.780
接着请求的地址

24:39.780 --> 24:40.780
可能可以被保存在

24:40.780 --> 24:41.780
浏览起输签

24:41.780 --> 24:42.780
迫射请求不可以

24:42.780 --> 24:43.780
这个不可以想象得到

24:43.780 --> 24:44.780
对不对

24:44.780 --> 24:46.780
如果说你怎么来

24:46.780 --> 24:48.780
无论如何都保存不了迫射请求

24:48.780 --> 24:49.780
比方说你现在要保存一个输签

24:49.780 --> 24:51.780
保存一个输签在这

24:51.780 --> 24:53.780
可不可以保存了可以

24:53.780 --> 24:54.780
但是你保存的是用

24:54.780 --> 24:56.780
到时候你重现这个请求的时候

24:56.780 --> 24:58.780
是用Gate请求去形容这个地址

24:58.780 --> 25:00.780
它不可能重新用Pose请求

25:00.780 --> 25:01.780
就这么个意思

25:01.780 --> 25:02.780
因为它没有办法保存

25:02.780 --> 25:05.780
它的之前提交的那个请求体

25:05.780 --> 25:06.780
对不对

25:06.780 --> 25:08.780
是这么个意思

25:08.780 --> 25:10.780
而其实这些东西

25:10.780 --> 25:12.780
怎么去记忆呢

25:12.780 --> 25:14.780
反正我是没有记忆的

25:14.780 --> 25:16.780
我是不会去记这些东西的

25:16.780 --> 25:18.780
都是可以推到出来的

25:18.780 --> 25:21.780
由于Gate请求没有请求体

25:21.780 --> 25:22.780
而请求行

25:22.780 --> 25:24.780
请求头是有尺寸限制的

25:24.780 --> 25:25.780
所以说Gate请求

25:25.780 --> 25:27.780
它就提交不了太多数据

25:27.780 --> 25:28.780
由于它没有请求体

25:28.780 --> 25:30.780
它的信息只能附着在地址

25:30.780 --> 25:32.780
或者是请求头里边

25:32.780 --> 25:33.780
对吧

25:33.780 --> 25:35.780
我们常见的是附着在地址上面

25:35.780 --> 25:37.780
由于Pose请求是有请求体的

25:37.780 --> 25:38.780
所以说它的数据

25:38.780 --> 25:40.780
一般是放到请求体里边

25:40.780 --> 25:41.780
但是能不能放到地址里边

25:41.780 --> 25:44.780
也可以也没有任何问题

25:44.780 --> 25:47.780
那由于那个浏览器

25:47.780 --> 25:49.780
由于那个Gate请求行

25:49.780 --> 25:50.780
和请求头里边

25:50.780 --> 25:51.780
它只能有Ask字符

25:51.780 --> 25:52.780
所以说Gate请求

25:52.780 --> 25:54.780
它的业务数据

25:54.780 --> 25:55.780
Ask字符

25:55.780 --> 25:56.780
或者是特殊字符

25:56.780 --> 25:57.780
需要编码

25:57.780 --> 25:59.780
Pose请求在请求体里边

25:59.780 --> 26:02.780
无所谓

26:02.780 --> 26:03.780
所以说这些东西

26:03.780 --> 26:05.780
都是完全可以推论的出来的

26:05.780 --> 26:06.780
所以说

26:06.780 --> 26:07.780
没有必要去记忆

26:07.780 --> 26:08.780
理解就行了

26:08.780 --> 26:09.780
好 接下来看两个面

26:09.780 --> 26:11.780
这两个面是其实我已经讲完了

26:11.780 --> 26:12.780
第一个问题

26:12.780 --> 26:13.780
就是问题

26:13.780 --> 26:14.780
ADP请求

26:14.780 --> 26:15.780
常见的请求

26:15.780 --> 26:16.780
帮法有蓝性

26:16.780 --> 26:17.780
我给它打出来就行了

26:17.780 --> 26:19.780
Gate和Pose请求

26:19.780 --> 26:20.780
有什么样的区别

26:20.780 --> 26:21.780
首先先说

26:21.780 --> 26:22.780
它们本质上的

26:22.780 --> 26:23.780
没有什么区别

26:23.780 --> 26:25.780
只是语异的不同

26:25.780 --> 26:26.780
都是请求行的

26:26.780 --> 26:27.780
第一个单词

26:27.780 --> 26:28.780
它们之所以发生区别

26:28.780 --> 26:30.780
是因为浏览器和服务器的

26:30.780 --> 26:31.780
一些约定

26:31.780 --> 26:32.780
以及浏览器的

26:32.780 --> 26:33.780
一些默认行为造成的

26:33.780 --> 26:34.780
比方说它规定了

26:34.780 --> 26:37.780
请求行和请求头的大小

26:37.780 --> 26:38.780
所以说

26:38.780 --> 26:40.780
受这个浏览器的影响

26:40.780 --> 26:41.780
在实际开发里边的

26:41.780 --> 26:42.780
Gate和Pose

26:42.780 --> 26:43.780
有一些区别

26:43.780 --> 26:44.780
OK

26:44.780 --> 26:45.780
那么这个前面

26:45.780 --> 26:46.780
你说清楚了过后

26:46.780 --> 26:47.780
它就觉得你了解的

26:47.780 --> 26:48.780
特别特别透彻

26:48.780 --> 26:49.780
甚至很多面

26:49.780 --> 26:50.780
是关东北

26:50.780 --> 26:51.780
不是特别清楚

26:51.780 --> 26:52.780
OK 这是关于

26:52.780 --> 26:53.780
这个请求方法

26:53.780 --> 26:54.780
我要说的事

