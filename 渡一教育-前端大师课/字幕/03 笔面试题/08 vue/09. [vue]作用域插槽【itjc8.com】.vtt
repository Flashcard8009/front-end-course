WEBVTT

00:00.000 --> 00:02.560
来聊一聊这个插槽

00:02.820 --> 00:06.660
我们从一个问题出发来讲这个作用与插槽

00:07.160 --> 00:08.200
看一下吧

00:08.440 --> 00:12.040
因为我们之前在就业阶段的第一节课还记得吧

00:12.300 --> 00:14.840
第一节课我们当时说了主见的通信

00:15.100 --> 00:17.920
还有一种就是插槽和作用与插槽

00:18.180 --> 00:19.960
这也是一种主见通信的方式

00:20.480 --> 00:22.780
我们这就可以把作用与插槽讲了

00:23.300 --> 00:25.860
我们可以参加他的官方文档我们一会看官方文档吧

00:26.120 --> 00:28.420
我们现在主要是通过一个问题来讲解

00:28.680 --> 00:29.700
看一下这个问题

00:30.000 --> 00:32.820
我们这里的有个函数这个函数是模拟

00:33.080 --> 00:36.400
阿迦克斯的函数 当我这里没有服务器就模拟吧

00:36.920 --> 00:38.960
我就返回一个Promise因为是一步的嘛

00:39.220 --> 00:42.020
所以说我就模拟一下一秒钟之后呢

00:42.280 --> 00:45.620
我就根据情况得到要么就是成功要么就失败

00:45.880 --> 00:47.920
模拟网络通信有可能失败对吧

00:48.440 --> 00:52.020
要么成功成功的话我就给他一个数组吧数组里面有一些商品

00:53.560 --> 00:54.320
0.5

00:54.580 --> 00:55.860
有可能成功有可能失败

00:57.140 --> 00:59.440
如果说失败的话我就给他一个

00:59.660 --> 01:00.420
Error对象

01:01.180 --> 01:02.220
好了这就是我们的

01:02.980 --> 01:04.260
阿迦克斯的模拟函数

01:05.540 --> 01:07.340
当然我们在真实项目里面呢

01:07.580 --> 01:10.920
是把它保存在某一个文念甲一个模块里面的吧

01:11.180 --> 01:11.940
模拟函数

01:12.960 --> 01:13.980
好我们就这样子吧

01:14.740 --> 01:18.340
现在我要做一件事啊就是我要在这个组建里面呢

01:19.100 --> 01:23.200
显示通过这个函数得到一些商品来显示这些商品

01:23.460 --> 01:26.020
所以说我们这里面肯定会写一个Message

01:27.000 --> 01:29.240
这个Message呢非常简单啊就是Gate

01:29.500 --> 01:30.520
就是Fetch

01:33.400 --> 01:36.680
这个函数呢也非常简单我要做的事情就是Return

01:37.440 --> 01:38.520
Gate Product

01:38.780 --> 01:43.880
通过API函数来拿到所有的商品然后返回当然他有可能会爆出对吧

01:44.140 --> 01:44.920
他有可能会爆错的

01:45.940 --> 01:49.520
好那么返回的是一个什么呢返回的肯定是一个Promise对吧

01:50.040 --> 01:51.840
那我们的界面上要显示啥呢

01:52.080 --> 01:54.900
界面上呢我们希望这样子显示分成三种情况

01:56.020 --> 01:56.780
三种情况

01:58.320 --> 02:00.880
地动情况的是正在夹载中

02:01.400 --> 02:02.160
情况一

02:03.200 --> 02:03.960
正在

02:04.220 --> 02:07.280
夹载中那么这个时候呢我们可能会显示一个

02:09.080 --> 02:13.940
一个正在夹载中那么几个字有可能会显示一个图片啊转圈圈都有可能啊

02:14.200 --> 02:15.480
然后呢情况二

02:17.000 --> 02:19.320
我们可能要显示啊显示商品

02:20.840 --> 02:22.120
然后情况三

02:26.450 --> 02:27.230
情况三

02:27.690 --> 02:30.770
要显示错误对吧一共就这么三种情况

02:31.290 --> 02:34.350
那么这种情况其实其实挺好写的用vif

02:34.610 --> 02:36.650
vlcif以及vls

02:36.910 --> 02:39.970
对吧来确定到底是哪一种情况然后把显示出来就行了

02:40.490 --> 02:41.770
但是我们要考虑的是

02:42.030 --> 02:44.850
这种现象啊他不仅仅出现在

02:45.110 --> 02:46.390
显示商品这一块

02:47.150 --> 02:52.010
他又可能会出现在任何阿加克斯请求你看很多出现不是都有这样子情况吗对吧

02:52.270 --> 02:53.290
有这么几种情况

02:53.810 --> 02:56.370
我们之前在入门阶段的时候是不是遇到过

02:56.930 --> 03:01.450
你看我们的文章页文章详情页以及我们的首页以及我们的

03:01.950 --> 03:09.390
还有就是项目项目列表页对吧那么这些页面的很多组件他都会出现有这么一个共同的需求

03:09.890 --> 03:14.750
就是我要远程获取数据获取数据拿到数据之前呢我们可能要显示一个加载中

03:15.270 --> 03:16.550
拿到数据之后呢我们要

03:17.310 --> 03:22.190
根据不同的情况来显示不同格式的一个页面显示不同格式的数据

03:22.570 --> 03:28.450
然后呢如果说发生错误当然我们之前没有考虑错误啊如果说发生错误错误的话我们可能要显示一些别的东西

03:29.130 --> 03:32.450
那么这个共同的功能我们能不能提取出去了

03:32.890 --> 03:36.810
我们之前是咋提取的我们之前呢是提取的方式呢是通过一个mixing

03:37.130 --> 03:40.330
对吧通过一个混合我们把一些共同的数据啊什么loading

03:40.730 --> 03:45.610
这个状态啊我们的生死数据啊data呀就把提取到一个混合里面

03:45.930 --> 03:52.130
通过混合了就可以避免重复代码把这些共同的状态呢混合到我当前的组件里边

03:52.650 --> 03:56.730
但是如果说你只用混合混合都行不行当然可以啊我们之前也实现过

03:57.330 --> 03:59.210
但是你如果说只用混合的话

03:59.770 --> 04:04.490
他有一个不好的地方在哪呢不好的地方在于我们无办中会出现重复代码

04:04.930 --> 04:07.730
因为我们混合只能是混合我们这个组件配置对吧

04:08.290 --> 04:11.370
无办中的重复代码呢也要混合的话就不是那么方便了

04:12.130 --> 04:14.610
那么无办中的重复代码怎么办了就很麻烦

04:15.770 --> 04:18.970
因此呢我们能不能想一些别的办法呢

04:19.550 --> 04:22.190
于是呢我打算呢用一个组件来搞定

04:22.870 --> 04:26.350
这个组件呢我把名字叫做秘密叫做async content

04:27.070 --> 04:29.230
这个组件要做的事情就是

04:30.310 --> 04:33.470
你给我传一个东西啊比方说你给我传一个promise

04:34.150 --> 04:38.670
因为我们一部数据呢他得到的东西就是一个promise对吧我们这里呢传一个内容

04:41.830 --> 04:45.310
content就是内容promise他的内容呢就是一个promise

04:46.290 --> 04:50.170
好那么这边呢我就去使用这个组件啊我希望达成个什么效果啊

04:50.890 --> 04:53.290
我就希望有这么一个组件啊async content

04:54.050 --> 04:56.930
这个组件呢他里边给我提供了一些插槽

04:57.530 --> 04:59.330
比方说有这么一个插槽tenpage

04:59.890 --> 05:04.250
这个插槽呢他是一个具名插槽我们之前学过的啊这个不再重复讲了

05:04.650 --> 05:07.210
具名插槽通过一个名字比方说叫loading

05:08.250 --> 05:11.890
好那么这边呢就是当他处于一个loading效果的时候

05:12.390 --> 05:13.430
当他处于一个就是

05:14.710 --> 05:17.790
正在夹载中的时候他要显示啥我通过这个车传过去

05:18.030 --> 05:19.310
比方说显示一个夹载中

05:19.830 --> 05:23.670
啊如果说你不传的话可能他会问有一个默认值啊一个默认显示

05:24.190 --> 05:26.990
假设啊有这么一些插槽然后呢还有一个默认插槽

05:32.080 --> 05:35.420
default啊当然default的话可以不写的对吧默认插槽

05:35.660 --> 05:38.740
那么这边能有显示显示了什么的显示数据

05:39.500 --> 05:41.300
就数据夹载出来了我就显示这个

05:41.820 --> 05:43.860
然后呢还有一个插槽是

05:44.360 --> 05:45.660
就是 error 显示错误

05:46.660 --> 05:49.740
对吧我们该传三个插槽就是我希望达成这么一个效果

05:50.500 --> 05:54.340
那么由这个组件来决定到底显示哪一个插槽

05:54.860 --> 05:57.180
那么是不是我要把一个数据传给他呀

05:57.420 --> 05:58.960
什么数据呢就是这个属性

05:59.220 --> 06:00.500
content is promise

06:01.260 --> 06:03.820
给他传一个什么呢给他传一个promise

06:06.280 --> 06:06.800
你看啊

06:07.060 --> 06:09.620
我给他传一个调用函数fetch product

06:09.880 --> 06:11.920
那么这个函数返回来是不是一个promise

06:12.440 --> 06:13.960
是不是把一个promise传过去了

06:14.420 --> 06:20.060
那么传过去promise过后这个组件是不是可以根据promise的状态来决定写到底

06:20.820 --> 06:23.140
显示哪一个我传过去了插槽

06:23.380 --> 06:25.420
有可能显示他有可能显示他有可能显示他

06:25.940 --> 06:32.100
那么这样子做的做法呢他就不仅是封装了那些数据就通过这个组件就封装了这个

06:32.340 --> 06:35.940
什么loading 效果呀还有什么data 数据啊还有什么那个

06:36.200 --> 06:39.260
error 错误的数据啊又他来进行封装

06:39.520 --> 06:41.560
而且呢我们还可以减少样板代码

06:41.820 --> 06:43.100
就是这个模板里面的代码

06:43.480 --> 06:47.400
我们就避免的去写什么vf啊vls啊这些东西对吧那些判断

06:47.920 --> 06:49.640
对吧我们只需要把插槽传过去就行了

06:49.800 --> 06:50.760
而且他还有默认值

06:51.600 --> 06:53.560
明不明白这意思吧我们现在要做这么一件事

06:54.320 --> 06:57.320
那么这件事情能不能做呢当然可以做啊非常的简单

06:58.000 --> 07:01.760
啊我们用以前学过的之手呢其实就就可以完成了那怎么来做

07:02.240 --> 07:06.000
比方说这里呢我们有个div div里面呢有三个插槽是not

07:06.600 --> 07:07.000
第一个

07:08.520 --> 07:12.800
这个插槽呢用于显示错误那么就是默认加载中的效果

07:13.840 --> 07:18.240
如果说你不传递的话我就选择他给他一个插槽的一个名字啊叫做楼顶

07:19.520 --> 07:21.920
好还有两个插槽啊这个呢是default

07:22.760 --> 07:24.440
这是默认数据

07:25.920 --> 07:28.080
默认数据显示

07:29.120 --> 07:31.760
啊这个呢是默认的加载中啊

07:31.760 --> 07:33.600
默认不这是默认的错误

07:34.640 --> 07:36.520
默认错误显示

07:37.040 --> 07:38.480
那么我们就写出了写三个插槽

07:38.680 --> 07:41.280
当然这三个插槽呢我们你看啊现在其实效果就已经

07:41.780 --> 07:45.660
出来了啊目前的显示是不是三个都传过去了加载中你看

07:45.940 --> 07:48.540
把这个玩意儿就传递给了谁传递给了他

07:49.460 --> 07:51.860
对吧所以说这里显示加载中然后呢这里

07:52.820 --> 07:55.420
这边把这个显示数据呢就传给了他

07:56.140 --> 07:59.540
对吧那个如果说你不传不传递的话那么自然而然就是

08:00.340 --> 08:02.420
啊就这里其实就是三个插槽啊

08:07.230 --> 08:09.990
他他对吧三个插槽传过去了

08:10.950 --> 08:13.550
啊当然如果说你不传递的话他就使用的是默认值

08:14.710 --> 08:16.590
那比较多我这个加载中不传递

08:17.150 --> 08:19.070
然后你看什么默认加载中的效果

08:20.230 --> 08:23.550
对吧好那么现在呢我们还要进一步完善他

08:23.550 --> 08:25.990
因为这三个插槽并不是全部都显示的

08:25.990 --> 08:29.350
他只没动情话下只显示一个对不对

08:29.350 --> 08:31.790
那么我怎么来控制他们到底显示哪一个呢

08:32.030 --> 08:35.750
其实非常简单我在这个组件里边啊我就去写一个数据

08:35.750 --> 08:38.230
因为他给我传了一个属性性哪一个promise

08:38.230 --> 08:40.070
我可以根据这个promise的状态

08:41.230 --> 08:43.270
来到决定到底显示哪一个

08:44.010 --> 08:47.410
对不对好那么我们可以在这里来写个数据

08:48.410 --> 08:52.970
有三种情况第一种情况呢是loading

08:56.070 --> 08:58.790
或者叫意思loading是否正在加载中

08:58.790 --> 09:01.230
默认为去嘛一开始就是都在加载中

09:01.710 --> 09:03.470
然后呢数据别他

09:04.110 --> 09:08.910
就content的吧我们的内容是哪然后我们的错误消息呢也是哪

09:09.710 --> 09:13.830
有这么三个数据那么这三个数据我就这里呢就可以根据这三个数据的值

09:13.930 --> 09:17.250
来决定到底显示哪一个比较说这里的可以加加个什么vif

09:18.730 --> 09:20.370
如果说他是意思loading的话

09:20.370 --> 09:22.850
那我就显示他好再加个vlc

09:25.350 --> 09:26.190
如果说是

09:27.350 --> 09:31.990
不是啊那么肯定不是他如果说他为粗的话肯定显示他

09:31.990 --> 09:34.470
如果他不为粗为forced的话

09:34.470 --> 09:36.390
那么不再加载中了不再加载中的话

09:36.390 --> 09:38.910
我们就根据这两个的值比方说有错误

09:40.470 --> 09:42.750
比方说有内容有内容

09:42.750 --> 09:44.430
那么这个时候呢我就显示内容

09:45.310 --> 09:46.950
好来吧

09:46.950 --> 09:49.590
那么我就显示他如果说vls

09:50.790 --> 09:52.790
有错误的话那么我就显示错误

09:53.990 --> 09:58.990
对吧啊没有内容啊或者是有有有错误把写前面吗

09:58.990 --> 10:00.390
把错误判断判断在前面

10:00.390 --> 10:01.670
因为有的有的时候呢

10:01.670 --> 10:03.710
阿迦克是从原层可能就拿不到数据啊

10:03.710 --> 10:04.790
福奇没给我数据

10:04.790 --> 10:06.430
但是他同志没有错误啊

10:06.430 --> 10:08.270
我们就看如果说有错误的话

10:10.430 --> 10:14.630
这样vlc有错误的话就显示错误

10:14.650 --> 10:17.170
没有错误的话就是没有加载中也没有错误了

10:17.170 --> 10:18.690
就正常数据了我就显示数据

10:19.610 --> 10:21.650
没问题吧那么显示错误的时候呢

10:21.650 --> 10:23.610
我们先这样吧就先这样

10:23.610 --> 10:25.850
好那么现在的目前的肯定只显示加载中

10:25.850 --> 10:27.650
因为另外两个查草虽然传过来了

10:27.650 --> 10:28.850
但是他没有显示

10:28.850 --> 10:30.690
这两个传过来但是没有显示对吧

10:31.850 --> 10:34.650
好但是为了这个状态不能永远是这样子呀

10:34.650 --> 10:35.850
是不是要有可能会改变

10:35.850 --> 10:37.330
那么这个改变又怎么来处理呢

10:37.330 --> 10:39.290
我写一个什么你都去勾字函数

10:39.290 --> 10:41.730
我们可以在可以通过这个promise

10:41.730 --> 10:43.930
来进行确定状态怎么来弄了

10:43.950 --> 10:45.830
你看啊非常简单

10:45.830 --> 10:47.430
我就等待这个promise

10:48.430 --> 10:50.030
content promise

10:50.030 --> 10:51.550
对吧他是个promise

10:51.550 --> 10:52.430
是不是可以等待他

10:53.230 --> 10:57.150
好如果说成功了是不是他会返回一个东西

10:57.150 --> 10:59.990
他会返回一个什么成功的之后的数据

10:59.990 --> 11:01.030
这是基础

11:01.030 --> 11:03.390
然后成功之后的数据呢我就可以怎么样了

11:03.390 --> 11:08.270
我就可以把this content设为这个成功之后的数据

11:08.270 --> 11:10.990
他们那么这样content是不是有值了

11:10.990 --> 11:12.750
但是他有没有可能有错误呢

11:12.750 --> 11:13.470
有可能有错误

11:13.490 --> 11:14.810
所以说我们可以用个try catch

11:16.810 --> 11:18.050
如果说他成功了

11:18.050 --> 11:19.490
那么就把他设为这个

11:19.490 --> 11:21.890
然后同时把这个error设为now

11:21.890 --> 11:23.450
你可能之前有值

11:23.450 --> 11:24.610
好 catch

11:24.610 --> 11:26.570
如果说他有错误的话

11:26.570 --> 11:27.690
那么我就干嘛呀

11:27.690 --> 11:31.490
我就把content设为now

11:31.490 --> 11:33.330
然后呢把这个错误呢

11:33.330 --> 11:34.130
error

11:34.130 --> 11:36.290
这个错误数据呢设为这个错误对象

11:37.250 --> 11:39.690
最终呢无论是成功还是失败

11:39.710 --> 11:43.310
我最终呢就要把这个意思揉紧设为force

11:45.150 --> 11:45.870
明儿这意思吧

11:45.870 --> 11:46.470
你看啊

11:46.470 --> 11:48.030
是不是这个逻辑嘛

11:48.030 --> 11:49.910
那么这个逻辑我就把他封装到这个主键里边

11:49.910 --> 11:51.750
他等待prome是完成

11:51.750 --> 11:52.590
完成了过后

11:52.590 --> 11:54.830
我就把内容设为完成

11:54.830 --> 11:56.150
把错误了设为now

11:56.150 --> 11:57.150
如果说失败了

11:57.150 --> 11:58.830
那我就把内容设为now

11:58.830 --> 12:00.750
错误设为一个错误对象

12:00.750 --> 12:00.990
对吧

12:00.990 --> 12:04.510
那边那边会越接个词的时候会抛出一个错误

12:04.510 --> 12:05.350
好

12:05.350 --> 12:06.270
最终完成过后了

12:06.270 --> 12:08.150
我就把他揉紧效果的设为force

12:08.170 --> 12:10.010
那你看现在目前

12:10.010 --> 12:11.650
夹在中显示错误

12:11.650 --> 12:13.970
夹在中显示数据

12:13.970 --> 12:14.250
对吧

12:14.250 --> 12:14.890
那么我这里呢

12:14.890 --> 12:16.090
是用了一个水技术啊

12:16.090 --> 12:17.970
来确定到底是成功还是失败

12:17.970 --> 12:19.370
总之这个玩意是魔力的啊

12:19.370 --> 12:21.450
他到时候作为一个真实的废起函数

12:23.210 --> 12:26.370
是不是这样子效果就已经格式就已经出来了

12:26.370 --> 12:27.450
但是有没有问题呢

12:27.450 --> 12:28.290
还有一些问题

12:28.290 --> 12:30.210
我们把问题一个个完善

12:30.210 --> 12:31.010
楼定效果了

12:31.010 --> 12:32.450
这里没什么问题啊

12:32.450 --> 12:34.130
这个给他一个默认的楼定效果

12:34.130 --> 12:34.770
然后呢

12:34.770 --> 12:36.290
如果说你传过来就用你的

12:36.290 --> 12:37.650
那这里可以传任何东西啊

12:37.670 --> 12:38.550
你可以传个辟源书

12:38.550 --> 12:40.310
可以传任何东西都行

12:41.430 --> 12:43.070
然后数据呢

12:43.070 --> 12:45.510
那如果如果说有错误呢

12:45.510 --> 12:47.070
如果说有错误的情况下呢

12:47.070 --> 12:48.350
我应该就显示一个什么了

12:48.350 --> 12:49.430
不是显示几个字

12:49.430 --> 12:52.310
我是不是应该把这个错误显示出来啊

12:52.310 --> 12:53.590
我们这人的比方说啊

12:53.590 --> 12:55.070
我们用一个表达式

12:55.070 --> 12:58.390
把这个 error 是不是可以显示出来啊

12:58.390 --> 13:00.270
如果说我不传递这个错误的话啊

13:00.270 --> 13:02.670
不传递这个错误插草的话啊

13:03.790 --> 13:05.710
你看是不是把这个错误显示出来了啊

13:06.570 --> 13:08.170
我这里争了一个错误啊

13:08.170 --> 13:09.650
表示这个地址找不到

13:09.650 --> 13:11.130
老子放的魔力的个错误

13:12.050 --> 13:12.850
没了意思吗

13:12.850 --> 13:14.450
那如果说有数据的话

13:14.450 --> 13:16.690
我是不是应该把数据显示出来啊

13:16.690 --> 13:19.930
那么这里显示数据是不是content

13:19.930 --> 13:21.690
那个数据显示出来

13:21.690 --> 13:24.570
那么这边如果说我不传递这个插草的话

13:24.570 --> 13:27.050
你看他是不是默认叫显示数据

13:27.050 --> 13:28.530
我明显还挺不错的啊

13:28.530 --> 13:29.450
现在就显示数据了

13:30.970 --> 13:31.290
没问题吧

13:31.290 --> 13:32.970
你看可以显示夹带中

13:32.970 --> 13:33.810
可以显示错误

13:33.810 --> 13:35.750
可以显示数据

13:40.950 --> 13:42.110
你看可以显示数据

13:43.550 --> 13:44.630
但是现在问题来了

13:46.390 --> 13:48.430
夹带中的效果倒是没什么问题啊

13:48.430 --> 13:49.710
你只要什么夹带中效果

13:49.710 --> 13:51.550
如果说你不喜欢我那个默认效果的话

13:51.550 --> 13:53.030
你可以给我传进来

13:53.030 --> 13:54.870
不要传个图片啊传个一些别的东西

13:54.870 --> 13:55.710
什么都可以自定义

13:56.670 --> 13:59.310
那问题是数据和错误怎么自定义呢

14:00.390 --> 14:03.110
首先你在这边能不能去去显了

14:03.110 --> 14:04.850
这边可以写个默认的

14:04.850 --> 14:06.570
但是呢这个默认效果

14:08.250 --> 14:09.250
他没法定制啊

14:10.410 --> 14:11.490
对不对

14:11.490 --> 14:13.130
那你这里不要这个内容内容

14:13.130 --> 14:14.610
你也不知道这个这个组件里边

14:14.610 --> 14:16.210
他是一个通用的组件

14:16.210 --> 14:18.170
你也不知道他是啥内容

14:18.170 --> 14:20.130
错误的话你也不知道他是啥错误

14:20.130 --> 14:21.930
我只能这样子显示我还能咋显示呢

14:21.930 --> 14:22.610
没法显示的

14:23.530 --> 14:24.610
比较的他是一个数据的话

14:24.610 --> 14:26.290
我可能会生成一个ULI

14:26.290 --> 14:28.290
也可能会生成一个很多DIV

14:28.290 --> 14:30.130
说不准他会显示啥

14:30.130 --> 14:32.410
错误的话可能我可以根据不同的错误状态

14:32.430 --> 14:33.550
要显示不同的东西

14:33.550 --> 14:35.150
我也不知道要显示啥

14:35.150 --> 14:36.470
那么我只能给他一个默认的

14:37.590 --> 14:39.070
那我希望的是什么呢

14:39.070 --> 14:40.710
如果说你觉得我这个显示不爽

14:40.710 --> 14:41.990
那肯定不爽啊这个错误

14:41.990 --> 14:44.710
错误显示和这个数据显示肯定不爽

14:44.710 --> 14:46.470
那你自己去定义

14:46.470 --> 14:47.270
那么问题来了

14:47.270 --> 14:49.230
我怎么自己定义

14:49.230 --> 14:49.990
表扬一个个来吧

14:51.790 --> 14:53.390
好我要显示错误的话

14:53.390 --> 14:55.430
我比我比方我要显示数据

14:58.010 --> 14:59.490
那我这里要自己定义

14:59.490 --> 15:01.250
定义的时候怎么定义呢

15:01.250 --> 15:02.850
那比较说我这里数据拿到了过后

15:02.850 --> 15:03.810
我要显示一个什么呢

15:03.870 --> 15:05.710
要显示一个ULLI

15:05.710 --> 15:07.150
要变异这个LI

15:07.150 --> 15:08.910
生成因为我这里要得到

15:08.910 --> 15:10.670
我知道我这个副组建啊

15:10.670 --> 15:13.910
我知道这里边肯定是会生成很多的商品

15:13.910 --> 15:14.950
是一个商品的数据

15:14.950 --> 15:16.830
因为这边他并不知道一个数据到底是啥

15:16.830 --> 15:19.070
他是通用的任何组件都可以用他

15:19.070 --> 15:20.190
他只是来管理

15:21.230 --> 15:22.630
一个Promise的不同状态

15:22.630 --> 15:25.150
不同的Promise状态来显示不同的东西

15:25.150 --> 15:26.950
他只是来管理这个东西的

15:26.950 --> 15:28.550
但是具体显示啥

15:28.550 --> 15:30.390
我要通过插槽去传过去

15:30.390 --> 15:32.110
比如说我这里我知道他显示的

15:32.110 --> 15:33.190
他得到的是一个数据

15:33.210 --> 15:35.050
我是不是应该用个v4循环

15:35.050 --> 15:36.210
循环这个数据

15:36.210 --> 15:36.810
那问题来了

15:36.810 --> 15:38.290
我这个数据拿来

15:39.050 --> 15:39.570
拿不到

15:40.610 --> 15:42.210
有时候我这个数据拿来了

15:42.210 --> 15:43.690
拿不到这个数据

15:43.690 --> 15:44.370
你看没

15:44.370 --> 15:45.410
是不是拿不到这个数据啊

15:45.410 --> 15:46.450
哪里可以拿到这个数据

15:46.450 --> 15:48.490
这个数据既不是我这个组建的属性

15:49.610 --> 15:51.090
既不是我这个组建的属性

15:51.090 --> 15:52.930
这个属性没有属性

15:52.930 --> 15:55.130
也不是这个组建的data

15:55.130 --> 15:55.450
对吧

15:55.450 --> 15:56.250
他是谁的数据

15:56.250 --> 15:57.250
这个数据拿来的

15:57.250 --> 15:59.770
是不是这边这个组建的数据啊

15:59.770 --> 16:01.810
这边那个组建是不是可以拿到这个数据

16:01.830 --> 16:03.550
但是我这边拿不到

16:03.550 --> 16:04.910
原来的意思吧

16:04.910 --> 16:07.230
主要你这里不能使用content

16:07.230 --> 16:09.030
你这个在这个组建里边

16:09.030 --> 16:11.070
只能使用这个组建里边的东西

16:11.070 --> 16:12.630
这个组建上下文字里边的东西

16:12.630 --> 16:13.750
这个组建上下文字里边的东西

16:13.750 --> 16:15.470
要么就是probs

16:15.470 --> 16:17.110
就这个组建实力里边的东西啊

16:17.110 --> 16:17.750
要么就是probs

16:17.750 --> 16:18.990
要么就是data

16:18.990 --> 16:20.430
要么就是message

16:20.430 --> 16:20.750
对不对

16:20.750 --> 16:21.790
你没办法

16:21.790 --> 16:22.190
拿不到

16:23.550 --> 16:25.310
那如果说你在这里加个data的属性

16:25.310 --> 16:26.790
再重新调用一下这个方法的话

16:26.790 --> 16:28.310
你这边就过去了一次

16:28.310 --> 16:30.990
这边传过去的时候又过去了一次

16:31.010 --> 16:32.610
所以这个地方还挺麻烦的

16:32.610 --> 16:33.290
那怎么办呢

16:33.290 --> 16:36.130
这个时候就要用作用寓意插槽了

16:36.130 --> 16:37.490
作用寓意插槽什么意思呢

16:37.490 --> 16:39.450
就是把这个组建

16:39.450 --> 16:40.570
直属建

16:40.570 --> 16:42.570
它里边的一些状态

16:42.570 --> 16:43.890
比方说它根据不同的情况

16:43.890 --> 16:45.650
显示不同的插槽

16:45.650 --> 16:49.410
我把这个状态的传递到副组建里边去

16:49.410 --> 16:51.530
让副组建使用那个状态

16:51.530 --> 16:52.730
那怎么具体怎么做呢

16:52.730 --> 16:53.890
其实非常简单

16:53.890 --> 16:55.850
比方说我在订这个插槽的时候

16:55.850 --> 16:56.410
我就可以

16:56.410 --> 16:57.850
我希望把这个数据啊

16:57.850 --> 17:00.610
传递到副组建这个插槽那个位置

17:00.630 --> 17:02.910
让插槽那个位置可以用这个数据

17:02.910 --> 17:03.830
因为现在用不了

17:03.830 --> 17:04.590
对吧

17:04.590 --> 17:06.950
要知道这个问题的地方啊

17:06.950 --> 17:08.270
那怎么来传过去了

17:08.270 --> 17:09.710
就特别简单

17:09.710 --> 17:11.390
我这里只需要一个vband

17:12.430 --> 17:12.830
绑定

17:13.950 --> 17:14.910
绑定什么呢

17:14.910 --> 17:17.870
绑定这个数据到副元素

17:17.870 --> 17:19.830
副元素的插槽那个位置

17:19.830 --> 17:20.590
绑定什么数据呢

17:20.590 --> 17:21.470
就绑定这个content

17:23.390 --> 17:24.270
那么这样子呢

17:24.270 --> 17:25.630
我们就通过了

17:25.630 --> 17:27.750
通过vband

17:27.750 --> 17:32.170
将指组建的数据

17:33.450 --> 17:34.650
的插槽数据

17:38.440 --> 17:44.280
绑定到了副组建插槽的位置

17:47.040 --> 17:48.440
就通过这么一个方式

17:48.440 --> 17:50.440
那么副组建的那边就可以用这个数据了

17:50.440 --> 17:51.120
怎么用呢

17:51.120 --> 17:52.240
到副组建这边来

17:52.800 --> 17:54.040
他就可以这样子使用啊

17:54.040 --> 17:55.960
就不能用这个锁写了啊

17:55.960 --> 17:58.000
这个我们都知道它是锁写

17:58.020 --> 17:59.740
它的全写是什么呢

17:59.740 --> 18:00.940
是vslot

18:00.940 --> 18:01.740
冒号对吧

18:02.740 --> 18:03.060
好

18:03.060 --> 18:03.580
那么当然了

18:03.580 --> 18:05.740
这个默认插槽的这个default

18:05.740 --> 18:06.900
可以省略的

18:06.900 --> 18:09.180
然后这后边还可以继续写

18:09.180 --> 18:11.100
我这个插槽里边

18:11.100 --> 18:13.300
我这个是对应到这个默认插槽对吧

18:13.300 --> 18:15.060
对应到这边这个默认插槽

18:15.060 --> 18:16.660
那么默认插槽里边呢

18:16.660 --> 18:18.140
他会给我们提供了一个数据

18:18.140 --> 18:19.540
我这边要用这个数据

18:19.540 --> 18:20.660
我希望把这个数据呢

18:20.660 --> 18:24.340
传递给我这边的一个临时变量吧

18:24.340 --> 18:26.540
比方说我们就data是吧

18:26.540 --> 18:27.860
那么这样子一来的话

18:27.880 --> 18:28.920
副主键宣展他

18:28.920 --> 18:30.520
执著键宣展他的时候

18:30.520 --> 18:32.400
当我们执着键要宣展他的时候

18:32.400 --> 18:32.920
他就知道了

18:32.920 --> 18:33.920
我要绑定个数据

18:33.920 --> 18:35.840
他就会把这个数据啊

18:35.840 --> 18:37.000
也就是这个东西

18:37.000 --> 18:38.880
传递给这边

18:38.880 --> 18:40.120
定义的这个临时变量

18:40.120 --> 18:41.560
data是那么这边呢

18:41.560 --> 18:42.960
我们是不是就可以通过data

18:42.960 --> 18:43.800
来循环

18:43.800 --> 18:44.480
当然这个名字呢

18:44.480 --> 18:46.280
也可以命名任意命名啊

18:46.280 --> 18:48.920
随便命名什么都可以传过来的

18:48.920 --> 18:49.080
好

18:49.080 --> 18:49.560
那么这边呢

18:49.560 --> 18:50.920
我们就可以绑定key

18:50.920 --> 18:53.120
key是item.id

18:53.120 --> 18:53.800
然后这里边呢

18:53.800 --> 18:56.560
我们可以写商品名

18:56.780 --> 18:59.780
然后是item.name

18:59.780 --> 19:05.620
然后是库存item.stock

19:05.620 --> 19:05.860
对吧

19:05.860 --> 19:07.460
这都是在这里面的数据啊

19:07.460 --> 19:08.420
stock.name.id

19:09.860 --> 19:10.060
好

19:10.060 --> 19:11.220
今天能保存一下

19:12.620 --> 19:13.540
看一下正常情况

19:18.370 --> 19:22.090
你看是不是就可以显示我这边定义的插槽

19:23.050 --> 19:24.290
对不对

19:24.290 --> 19:25.450
刚才定义插槽没法定义

19:25.450 --> 19:26.730
因为我拿不到数据

19:26.730 --> 19:27.970
现在我们是不是可以拿到数据了

19:27.970 --> 19:29.010
这就是作用一插槽

19:29.990 --> 19:31.510
那么这个数据其他地方不能用啊

19:31.510 --> 19:33.510
只能在这个插槽里面用

19:33.510 --> 19:35.190
那这意思吧

19:35.190 --> 19:37.350
一泡过再说这个插槽的原理是什么

19:37.350 --> 19:38.670
简单说一下就行了

19:38.670 --> 19:38.750
好

19:38.750 --> 19:40.830
另外的错误这边也是一样

19:40.830 --> 19:42.150
错误这边呢

19:42.150 --> 19:46.190
我这边是不是也可以用vband

19:46.190 --> 19:47.870
绑定这个错误对象

19:47.870 --> 19:49.470
到里面去

19:49.470 --> 19:49.670
好

19:49.670 --> 19:50.030
然后呢

19:50.030 --> 19:50.990
我们这边呢

19:50.990 --> 19:53.190
是不是就可以拿到这个错误对象了

19:53.190 --> 19:54.870
我们通过这个什么vslot

19:56.910 --> 19:57.910
插槽名字

19:57.930 --> 19:59.010
就是error

20:00.810 --> 20:02.650
那么他给我的数据是什么了

20:02.650 --> 20:03.490
给我的数据是这个

20:03.490 --> 20:05.050
那么我把它保存在个边疆里面

20:05.050 --> 20:05.930
临时边疆里面

20:05.930 --> 20:06.450
那么于是呢

20:06.450 --> 20:08.730
这个边疆在这个插槽位置就可以使用了

20:11.050 --> 20:13.010
我们这里面就显示一个P元素吧

20:13.010 --> 20:13.770
给他一个样式

20:16.010 --> 20:17.730
最好写成这个样式

20:17.730 --> 20:20.290
这边我就显示一个error

20:20.290 --> 20:21.130
这样message

20:22.970 --> 20:23.370
好

20:23.370 --> 20:24.610
保存

20:24.610 --> 20:25.210
看一下错误

20:26.410 --> 20:27.330
这里遇到一个问题

20:27.970 --> 20:29.370
就是这个错误显示不出来

20:29.370 --> 20:30.330
为什么呢

20:30.330 --> 20:32.130
这里有一个问题就是

20:32.130 --> 20:33.570
这个东西是响应式数据

20:34.490 --> 20:35.730
这个东西是响应式数据

20:35.730 --> 20:37.010
比方说给他一个错误

20:37.010 --> 20:37.890
给他的是什么了

20:37.890 --> 20:39.570
给他的是一个error对象

20:39.570 --> 20:41.250
一个error对象

20:41.250 --> 20:43.330
因为我那边抛出来是一个error嘛

20:43.330 --> 20:44.770
那么给他一个error对象

20:44.770 --> 20:47.290
但是那error对象是没法

20:47.290 --> 20:48.530
因为他给他复制的时候

20:48.530 --> 20:49.210
我们知道了

20:49.210 --> 20:50.170
想数据响应式

20:50.170 --> 20:52.050
他会把这个对象变成响应式的

20:52.050 --> 20:54.290
但是error对象这个玩意儿呢

20:54.290 --> 20:56.330
他就没法变成响应式的

20:56.330 --> 20:57.370
他没法变成响应式的

20:57.390 --> 20:58.070
因此呢

20:58.070 --> 20:58.550
怎么办呢

20:58.550 --> 21:00.910
他就没有对他进行响应式

21:00.910 --> 21:01.910
处理

21:01.910 --> 21:03.470
没有进行响应式处理的

21:03.470 --> 21:04.550
他里边的很多属性

21:04.550 --> 21:05.590
他就辨历不到

21:05.590 --> 21:06.550
其实这个对象传过去了

21:06.550 --> 21:08.750
但是很多属性他辨历不到

21:08.750 --> 21:10.990
这里边是一些小的细节

21:10.990 --> 21:13.830
那么这里我们就可以简单处理一下

21:13.830 --> 21:16.510
把这个error对象放到一个普通的对象里边

21:16.510 --> 21:21.710
我们叫orangeerror

21:21.710 --> 21:23.670
把它放到一个普通对象里边

21:23.670 --> 21:25.630
然后给他一个message属性

21:25.630 --> 21:29.510
就是error.message

21:29.570 --> 21:31.810
只是这里有出现这么一种特殊的情况

21:31.810 --> 21:33.490
因为我们这个error对象太特殊了

21:35.610 --> 21:36.010
好

21:36.010 --> 21:37.210
那么这样

21:37.210 --> 21:38.530
这样子放过来了

21:38.530 --> 21:39.810
那么它就是个普通对象了

21:39.810 --> 21:40.010
对吧

21:40.010 --> 21:42.250
那么就可以正常传过去了

21:42.250 --> 21:43.490
这个普通对象就可以正常传过去了

21:43.490 --> 21:44.690
所以我们这里中容率超吵

21:44.690 --> 21:46.090
就尽量给他一个普通对象

21:47.530 --> 21:48.770
那么给他一个普通对象过后了

21:48.770 --> 21:49.970
这边来

21:49.970 --> 21:51.690
是不是就可以拿到这个数据了

21:51.690 --> 21:53.370
我们就显示这个error.message

21:53.370 --> 21:54.330
就显示了这个数据

21:55.290 --> 21:55.730
保存

21:55.730 --> 21:57.170
我们再看一下

21:57.170 --> 21:58.650
你看是不是显示个脑子胖的

21:58.670 --> 22:00.030
于是这个就做好了

22:00.030 --> 22:00.910
夹载中

22:00.910 --> 22:01.670
错误消息

22:02.870 --> 22:03.550
错误消息

22:04.830 --> 22:05.710
正常的

22:05.710 --> 22:06.470
对吧

22:06.470 --> 22:07.470
这就是中容率超吵

22:07.470 --> 22:09.870
中容超吵的本质就是在指数件里边

22:09.870 --> 22:13.630
能够通过超吵位置绑定一些数据

22:13.630 --> 22:15.470
让副组件这个超吵那个位置

22:15.470 --> 22:16.550
可以用这个数据

22:16.550 --> 22:17.430
这就是中容率超吵

22:18.910 --> 22:19.030
好

22:19.030 --> 22:19.670
OK

22:19.670 --> 22:25.370
然后我们来看一下官方稳当吧

22:25.370 --> 22:26.730
你看他就这里说了

22:26.730 --> 22:28.090
比方说有一个组件

22:28.110 --> 22:29.270
这个组件呢

22:29.270 --> 22:32.790
他用于显示用户的名字

22:32.790 --> 22:34.590
他有可能会显示用户的first name

22:34.590 --> 22:35.910
有可能会显示nust name

22:35.910 --> 22:37.110
有可能会显示full name

22:37.110 --> 22:39.070
也不知道会显示啥

22:39.070 --> 22:41.350
于是做这个组件的时候

22:41.350 --> 22:43.350
我给他定一个默认的插槽

22:43.350 --> 22:45.190
给他一个默认值

22:45.190 --> 22:47.590
然后默认显示nust name

22:47.590 --> 22:48.070
显示性

22:49.310 --> 22:51.990
然后副组件可以通过这个插槽来进行更改

22:51.990 --> 22:52.430
刚刚副

22:53.630 --> 22:55.350
当前我们用的时候

22:55.350 --> 22:56.750
我们用这个组件的时候

22:56.750 --> 22:57.470
用这个current

22:58.050 --> 22:59.890
我们希望不想显示nust name

22:59.890 --> 23:01.570
我想显示first name

23:01.570 --> 23:02.130
怎么办

23:02.130 --> 23:03.450
我给他传一个first name

23:03.450 --> 23:04.450
但是这样子是不费

23:04.450 --> 23:06.370
这个代码是不复发正常工作的

23:06.370 --> 23:06.970
为什么呢

23:06.970 --> 23:09.730
因为这个user是值组件里面的

23:09.730 --> 23:11.410
副组件拿不到这个user

23:11.410 --> 23:12.290
于是怎么办呢

23:12.290 --> 23:13.610
你看值组件他就这样子写

23:14.690 --> 23:15.850
他默认显示nust name吧

23:15.850 --> 23:16.170
对吧

23:16.170 --> 23:18.050
同时该绑定一个中用域

23:18.050 --> 23:18.930
绑定一个user

23:20.570 --> 23:21.210
绑定进去

23:23.250 --> 23:25.490
他是通过这个vband的

23:25.510 --> 23:27.550
某一个属性来不进行绑定的

23:27.550 --> 23:29.310
他绑定到一个属性里面去

23:29.310 --> 23:30.230
这也是一种邪法

23:30.230 --> 23:32.230
当然也可以直接绑定整个对象

23:32.230 --> 23:33.550
把整个优点绑进去

23:33.550 --> 23:34.910
不同的邪法

23:34.910 --> 23:35.910
写的不一样

23:35.910 --> 23:37.030
我们一个个看吧

23:38.830 --> 23:41.470
那么如果说通过这个东西绑定进去的话

23:41.470 --> 23:42.830
就相当于是怎么写的

23:42.830 --> 23:44.470
就相当于是用vband

23:45.350 --> 23:47.110
绑定的vband等于了

23:48.630 --> 23:49.870
一个普通对象

23:49.870 --> 23:50.950
对象里面有个user

23:52.270 --> 23:52.870
明白的意思吧

23:53.850 --> 23:54.770
这种邪法

23:54.770 --> 23:56.330
就相当于是这种邪法

23:56.330 --> 23:57.170
那这种邪法

23:57.170 --> 23:57.810
好处在于

23:57.810 --> 24:00.530
就是最终生成的一定是一个普通对象

24:00.530 --> 24:03.250
刚才有你看我们个error对象是不是遇到问题了

24:03.250 --> 24:05.010
所以说这里就可以生成一个普通对象

24:05.010 --> 24:06.290
那我们来改造一下吧

24:08.210 --> 24:09.690
我们这里就可以用vband

24:10.330 --> 24:10.810
error

24:11.570 --> 24:12.930
这里我们可以用vband

24:13.330 --> 24:13.890
content

24:15.930 --> 24:16.690
这样子

24:16.690 --> 24:19.170
我这边就不用这样子写法了

24:22.010 --> 24:22.530
就是error

24:25.170 --> 24:26.530
因为它这样子通过这种方式

24:26.530 --> 24:28.130
就绑定到一定是一个普通对象

24:28.130 --> 24:29.130
你看现在就

24:29.130 --> 24:31.010
这个东西就相当于是之前

24:31.010 --> 24:32.050
之前我们这样子写的

24:32.050 --> 24:32.810
你看

24:32.810 --> 24:34.610
之前我们是绑定的是error

24:34.610 --> 24:34.930
是吧

24:34.930 --> 24:36.290
是直接绑定error的邪象

24:36.290 --> 24:37.970
那么现在绑定的是

24:39.330 --> 24:40.450
这样子写的邪法

24:42.290 --> 24:43.770
那么就相当于是什么了

24:44.450 --> 24:45.890
相当于是下面的一个邪法

24:47.530 --> 24:48.530
绑定了一个对象

24:48.530 --> 24:49.850
一个普通对象

24:49.850 --> 24:52.450
对象里面有一个error的属性

24:53.610 --> 24:54.650
没了意思吧

24:55.850 --> 24:56.610
这种邪法了

24:56.610 --> 24:59.170
这种邪法就往一个普通对象里面加个属性error

24:59.170 --> 25:00.250
里面的意思吧

25:05.610 --> 25:06.890
那么这样子绑定过

25:06.890 --> 25:07.970
还有这边接受的时候

25:07.970 --> 25:09.010
你要注意一下

25:09.010 --> 25:09.810
接受的时候

25:09.810 --> 25:11.810
我们这里应该怎么接受呢

25:11.810 --> 25:13.970
就是它传的叫是一个普通对象进来

25:13.970 --> 25:17.410
普通对象里边有一个属性叫做content

25:17.410 --> 25:19.210
那么这边我们应该循环

25:19.210 --> 25:21.370
这是拿到整个对象

25:21.370 --> 25:23.250
拿到整个对象里面的content

25:23.870 --> 25:26.950
那么这边error拿到的是整个对象

25:28.470 --> 25:29.870
拿到的是整个对象

25:29.870 --> 25:33.470
我要使用整个对象里面的那个error属性

25:34.830 --> 25:36.830
使用这个error属性

25:36.830 --> 25:39.830
那么这边我就应该是error.message

25:41.110 --> 25:41.790
效果是一样的

25:43.870 --> 25:44.430
错误

25:45.670 --> 25:46.550
数据对吧

25:46.550 --> 25:47.150
都是一样的

25:48.270 --> 25:49.390
那你看我们这里用的时候

25:49.390 --> 25:51.630
你看绑定的一个游热进去

25:51.630 --> 25:52.270
名字出

25:52.330 --> 25:53.250
这是一个普通对象

25:53.250 --> 25:55.090
普通对象一个属性叫做游热

25:55.090 --> 25:56.730
游热的值等于它

25:56.730 --> 25:58.170
那么这边用的时候

25:58.170 --> 26:02.650
你看就是插槽对应的是默认插槽

26:02.650 --> 26:04.490
你看这边是对应的默认插槽

26:04.490 --> 26:06.170
然后它传了一个数据过来

26:06.170 --> 26:07.770
我们就可以把个数据拿到

26:07.770 --> 26:08.730
拿到是个普通对象

26:08.730 --> 26:10.370
一个普通对象里面有个属性游热

26:10.370 --> 26:12.170
你看普通对象一个属性游热

26:12.170 --> 26:14.490
这个值的就是它这边传过来的值

26:14.490 --> 26:14.890
对吧

26:14.890 --> 26:15.810
就可以使用了

26:15.810 --> 26:18.130
这就是作用于插槽

26:18.130 --> 26:21.250
那么下面还给你说了一些特殊的邪法

26:21.270 --> 26:24.430
比方说你一个组建插槽里边

26:24.430 --> 26:25.390
只有一个插槽

26:25.390 --> 26:26.510
就是只有一个默认插槽

26:26.510 --> 26:27.510
没有别的插槽了

26:27.510 --> 26:28.430
那么你用的时候

26:28.430 --> 26:31.430
可以把这个vSnaught直接用到组建上面去

26:31.430 --> 26:34.270
就是把个vSnaught直接写到这上面

26:34.270 --> 26:36.270
但是潜力条件它只有一个默认插槽

26:36.270 --> 26:37.110
只有一个默认插槽

26:37.110 --> 26:37.750
没有别的

26:37.750 --> 26:39.190
你才能这样子写

26:39.190 --> 26:41.110
你明白是吧

26:41.110 --> 26:42.150
好

26:42.150 --> 26:45.310
然后我接下来要说一下作用于插槽

26:45.310 --> 26:46.830
不能已经做出来了

26:46.830 --> 26:49.310
作用于插槽它的原理是什么

26:49.310 --> 26:53.010
其他的原理也很简单

26:53.010 --> 26:54.370
它就是把插槽

26:54.370 --> 26:56.330
当你是一个作用于插槽的时候

26:56.330 --> 26:58.890
它会把这个东西当成一个函数

26:58.890 --> 27:01.570
也就是我们下面这个vSnaught的节点的生成了

27:01.570 --> 27:03.010
它不是直接生成的

27:03.010 --> 27:04.690
它是作为一个函数调用

27:04.690 --> 27:05.730
以后这个地方的代码

27:05.730 --> 27:06.730
它相当于是什么呢

27:06.730 --> 27:08.130
相当于这个

27:08.130 --> 27:10.660
看着

27:10.660 --> 27:12.940
它会把这一坨变成一个函数

27:16.060 --> 27:20.890
这个函数的格式大概是这样子

27:21.310 --> 27:23.590
一个函数

27:23.590 --> 27:24.590
为什么是d4s呢

27:24.590 --> 27:26.550
因为插槽名字是d4s

27:26.550 --> 27:28.390
这个默认插槽传过去的时候

27:28.390 --> 27:30.150
传的是一个函数过去

27:30.150 --> 27:31.270
这个函数有一个参数

27:31.270 --> 27:32.630
data式

27:32.630 --> 27:35.430
这个函数的作用是反而回一个vload

27:35.430 --> 27:40.310
就是反而回vload

27:40.310 --> 27:41.750
但这个vload的可以是一个节点

27:41.750 --> 27:42.430
可以是多个节点

27:42.430 --> 27:43.470
无所谓

27:43.470 --> 27:45.590
那么这个函数会是传到哪呢

27:45.590 --> 27:46.990
传到植柱键

27:46.990 --> 27:49.110
植柱键会雕用这个函数

27:49.170 --> 27:51.210
然后把这个数据传过去

27:51.210 --> 27:52.490
植柱键怎么雕用函数

27:52.490 --> 27:55.010
植柱键雕用这个d4s函数

27:55.010 --> 27:57.410
比方说我现在目前要渲染这个默认插槽

27:57.410 --> 27:58.850
于是我就会雕用这个函数

28:00.050 --> 28:01.210
雕用这个函数的时候

28:01.210 --> 28:03.650
我就会把这个传一个对象进去

28:04.650 --> 28:06.010
在对象里面有个属性

28:06.010 --> 28:06.890
康天子

28:06.890 --> 28:07.890
属性的植呢

28:07.890 --> 28:08.410
就这个植

28:09.610 --> 28:10.250
要传过去

28:11.130 --> 28:12.410
是不是雕用这个函数

28:12.410 --> 28:14.490
雕用这个函数是不是拿到一个vload

28:14.490 --> 28:18.250
来进行把这个vload放到相应的位置

28:18.270 --> 28:18.870
没有这意思吧

28:18.870 --> 28:20.790
他是用这种方式来处理的

28:20.790 --> 28:21.710
因此他本质上是

28:21.710 --> 28:23.270
由于他本质上是一个函数的话

28:23.270 --> 28:23.830
其实在这里呢

28:23.830 --> 28:25.110
我们还可以解构

28:25.110 --> 28:26.190
你这是函数的参数吗

28:26.190 --> 28:29.620
你看啊

28:29.620 --> 28:31.140
这是函数的参数对吧

28:31.140 --> 28:33.780
那么我们这里是不是可以对参数进行解构

28:33.780 --> 28:34.900
他不是对象的语法

28:34.900 --> 28:36.820
是函数解构的语法

28:36.820 --> 28:37.940
我解构出一个什么呢

28:37.940 --> 28:38.900
解构出一个康天子

28:42.760 --> 28:43.800
这里是不是可以这样用

28:43.800 --> 28:44.480
那同样道理

28:44.480 --> 28:45.760
这边AIROR

28:45.760 --> 28:47.560
其实这边也就是个函数

28:49.080 --> 28:51.040
查朝名字的叫AIROR方形

28:52.020 --> 28:52.340
AIROR

28:54.020 --> 28:55.180
那么这边调用的时候

28:55.180 --> 28:56.540
他就会传一个对象进来

28:56.540 --> 28:56.740
对吧

28:56.740 --> 28:58.260
他传的是什么对象呢

28:58.260 --> 29:00.700
到时候指数键调用的时候

29:00.700 --> 29:01.540
他会传个对象

29:02.500 --> 29:04.060
你看这边怎么写的

29:04.060 --> 29:04.820
传的对象呢

29:04.820 --> 29:10.020
他就是一个普通对象里面一个属性叫AIROR

29:10.020 --> 29:11.620
AIROR一个属性

29:11.620 --> 29:13.620
来自于他里边的数据

29:13.620 --> 29:14.780
他里边的数据一个AIROR

29:15.820 --> 29:15.940
好

29:15.940 --> 29:17.940
那么这边我们是不是可以对这个

29:17.940 --> 29:19.420
传的对象进行解构

29:19.420 --> 29:19.820
解构出来

29:19.820 --> 29:21.260
我们只需要用这个AIROR对吧

29:21.320 --> 29:22.480
所以说我们这里面就可以

29:23.600 --> 29:25.440
解构一个AIROR出来

29:27.000 --> 29:27.560
是不是可以这样

29:29.320 --> 29:32.200
当然这边也可以绑定多个数据

29:32.200 --> 29:35.080
绑定违半的多个数据进去

29:35.080 --> 29:35.560
没了意思吧

29:35.560 --> 29:36.880
当然违半的也是可以省略的

29:40.440 --> 29:40.760
保存

29:44.080 --> 29:45.760
有数据有错误

29:46.480 --> 29:46.960
这都可以了

29:48.040 --> 29:50.600
这就是咱们的作用与查朝

29:50.600 --> 29:53.160
然后最后来我说一下两个属性

29:53.180 --> 29:55.780
就是当我们一个组建里边还有查朝的情况下

29:55.780 --> 29:58.580
他可以通过两个属性来

29:58.580 --> 30:00.780
拿到他的查朝相关信息

30:00.780 --> 30:02.180
一个属性的是ZS

30:02.180 --> 30:04.180
来写一下叫做ZSCOB

30:05.380 --> 30:06.500
来叫做SNOTS

30:07.940 --> 30:09.180
ZSNOTS

30:10.100 --> 30:12.020
一个属性的叫做SKOPT SNOTS

30:12.940 --> 30:14.740
SKOPT SNOTS

30:17.770 --> 30:20.090
来自于SKOPT SNOTS

30:20.090 --> 30:20.330
好

30:20.330 --> 30:22.130
咱们来打印出来看一下这两个属性

30:22.910 --> 30:24.910
简单说一下

30:24.910 --> 30:26.510
这个评论我们也不这么会用的

30:27.950 --> 30:28.430
好

30:29.150 --> 30:29.750
小心

30:30.350 --> 30:31.550
第一个属性SNOTS

30:31.550 --> 30:33.070
这里边传递的是什么呢

30:33.070 --> 30:34.670
传递的是那些普

30:34.670 --> 30:36.910
这里边记录的是那些普通查朝

30:36.910 --> 30:39.470
你看我们复原数传过来的查朝

30:39.470 --> 30:40.390
是不是有三个

30:40.870 --> 30:43.270
我们哪个是普通查朝是不是他

30:43.270 --> 30:43.950
对不对

30:44.550 --> 30:45.870
好普通查朝

30:45.870 --> 30:48.710
他记录的是普通查朝里边生存的VDL的

30:49.470 --> 30:50.310
因为普通查朝的话

30:50.310 --> 30:51.630
他不需要调用函数

30:51.930 --> 30:53.930
其实他本质最终还是会调用函数

30:53.930 --> 30:55.210
他只是没有传过东西过来

30:56.010 --> 30:58.890
他也可以把普通查朝理解为这样一个东西

31:00.960 --> 31:01.640
普通查朝

31:01.640 --> 31:02.920
比方说刚才还有一个楼顶

31:02.920 --> 31:04.680
楼顶有这么一个查朝

31:04.680 --> 31:05.600
他就是一个普通函数

31:05.600 --> 31:06.320
他没有参数

31:07.240 --> 31:07.680
没意思

31:07.680 --> 31:08.600
他没有参数

31:08.600 --> 31:10.480
然后这边调用的时候就直接调用他

31:10.480 --> 31:11.960
不传的任何东西

31:11.960 --> 31:12.760
这是普通查朝

31:15.120 --> 31:18.200
但是他会记录到这个属性SNOTS里边

31:18.200 --> 31:19.480
得到的是普通查

31:19.480 --> 31:20.480
而且拿到的是什么呢

31:20.540 --> 31:22.980
拿到的是普通查朝生存的VDL的

31:23.620 --> 31:25.500
如果说你以后开发一些高级主件的话

31:26.780 --> 31:28.660
特别是一些底层的一些公共主件的话

31:28.660 --> 31:30.660
有可能需要这些东西

31:30.660 --> 31:32.020
那么我们来看一下

31:32.820 --> 31:33.980
是不是一个数组

31:33.980 --> 31:35.660
为什么是数组不是一个对象呢

31:35.660 --> 31:37.700
因为他这里面可能会传多个

31:37.700 --> 31:39.380
你也不知道他会传几个VDL的

31:39.380 --> 31:40.900
所以他会生成一个数组

31:40.900 --> 31:42.060
这数组里面第一个VDL的

31:42.060 --> 31:43.220
是不是就是这个文本

31:43.940 --> 31:45.020
夹仔中

31:45.020 --> 31:45.940
对不对

31:45.940 --> 31:47.500
这是SNOTS这个属性

31:47.500 --> 31:49.420
还有一个属性叫做SNOTS

31:49.440 --> 31:50.440
表示作用与查朝

31:51.080 --> 31:53.680
实际上本质上你可以把所有的查朝都理解

31:53.680 --> 31:55.880
我作用与查朝都是一个函数传过去了

31:56.440 --> 31:57.600
那么这个作用与查朝里边

31:57.600 --> 31:59.000
他会记录所有的查朝

31:59.640 --> 32:01.040
你看每个查朝名字DFOR的

32:01.040 --> 32:02.280
是一个函数开没

32:02.280 --> 32:03.400
AIROR是一个函数开没

32:03.400 --> 32:04.400
LOGIN是一个函数开没

32:06.200 --> 32:06.960
是不是都是一个函数

32:08.120 --> 32:08.840
对不对

32:08.840 --> 32:09.680
那么都会拿到

32:11.840 --> 32:13.440
那么这些函数调用的结果呢

32:13.440 --> 32:14.560
调用之后

32:14.560 --> 32:15.680
调用的结果是什么呢

32:15.680 --> 32:18.240
调用结果就是一个VDL的数组

32:18.240 --> 32:19.000
为什么是数组呢

32:19.020 --> 32:20.700
因为他有可能多个VDL的节点

32:20.700 --> 32:21.580
比方说这里还有一个

32:23.420 --> 32:23.620
好

32:23.620 --> 32:26.820
那么这就是关于这个作用与查朝

32:26.820 --> 32:28.140
我们最核心的是要知道

32:28.140 --> 32:29.980
他能解决什么样的问题

32:29.980 --> 32:30.820
当然这些东西

32:30.820 --> 32:33.260
你们之后可能也用的比较少一点

32:33.260 --> 32:35.820
因为一般这些东西都是开发一些

32:36.540 --> 32:39.060
通用组件的时候才会用的

32:39.060 --> 32:40.140
你看他普通组件的时候

32:40.140 --> 32:41.580
你可能只会用别人的

32:41.580 --> 32:43.140
就是你至少能会用

32:43.140 --> 32:44.260
比方说这个组件他告诉你

32:44.260 --> 32:45.780
他有些作用与查朝

32:45.780 --> 32:47.100
那么你根据他的势力

32:47.100 --> 32:48.300
你要知道怎么去用

32:48.320 --> 32:49.480
怎么去拿到他的数据

32:49.480 --> 32:51.720
比方说我这里边要拿到的数据

32:51.720 --> 32:53.440
我选择一些东西

32:53.440 --> 32:54.360
显示这个查朝的时候

32:54.360 --> 32:57.000
我要拿一些数据选择一些东西

32:57.000 --> 32:58.960
你至少要会用

32:58.960 --> 32:59.280
OK

32:59.280 --> 33:00.560
这是咱们这些可能内容

