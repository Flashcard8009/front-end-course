WEBVTT

00:00.620 --> 00:03.180
这一刻咱们来聊一聊这个KeeperLive

00:04.200 --> 00:06.000
这个玩意是

00:06.260 --> 00:08.820
伍佑的一个内置组件 有的时候

00:09.320 --> 00:11.360
面试题里边问到你性能优化

00:11.620 --> 00:13.680
它是在性能优化里面

00:13.940 --> 00:15.220
是要占益其之地的

00:15.980 --> 00:19.060
另外面试题的时候它也可能会直接问你

00:19.300 --> 00:21.100
关于这个KeeperLive的

00:21.360 --> 00:22.640
原理和作用

00:22.900 --> 00:24.940
那么你就可以把它详细的说一说

00:26.220 --> 00:30.060
这个KeeperLive是伍佑的一个内置组件 其实咱们之前的也

00:30.260 --> 00:34.620
多多少少接触过伍佑的一些内置组件了 那么这个玩意就已经是最后一个了

00:34.880 --> 00:35.380
来看一下吧

00:36.660 --> 00:37.700
我记住这个伍佑的官网

00:38.460 --> 00:39.500
找到它的那个API

00:43.220 --> 00:43.740
网项啊

00:44.260 --> 00:48.340
这里边伍佑的一个内置的组件 你看是不是学习完了

00:48.600 --> 00:49.880
transition group

00:50.140 --> 00:51.940
这两个玩意是做动画的

00:52.700 --> 00:55.260
然后snaught是一个插槽对吧

00:55.520 --> 00:58.840
component我们之前是用过 我记得是用过啊

00:59.100 --> 01:00.120
它是做动态组件的

01:00.480 --> 01:03.660
就有的时候呢 你这个组件它生成什么元素你并不知道

01:03.920 --> 01:04.420
比方说

01:04.940 --> 01:08.520
它这个组件可能生成A1元素 可能生成A2元素 可能生成A3

01:08.780 --> 01:11.580
你并不知道 那么你可能会做的做法呢 就是在

01:11.840 --> 01:12.880
data里面呢 给它

01:13.140 --> 01:16.200
动态生成一个数据啊 比方说我们的AO

01:18.660 --> 01:19.700
是A1

01:20.200 --> 01:21.480
比方说啊 就个例子吧

01:21.740 --> 01:22.500
是A1

01:22.760 --> 01:25.580
那么我们在模板里面呢 我们就可以这样子写

01:26.340 --> 01:30.140
因为这个这个生存的元素是动态的 所以说你这里呢没办法去

01:30.400 --> 01:31.480
写这个元素的名字

01:31.920 --> 01:33.680
那怎么办呢 我们就可以用component

01:33.940 --> 01:37.660
里面一个数据不是意思吧 对不对 我们可以读取这个AO

01:39.200 --> 01:42.520
对吧 就这么简单 那么这个component呢 它就会根据这个意思

01:43.800 --> 01:45.340
来生成相应的元素

01:45.600 --> 01:48.000
而且呢 这个意思呢 它不一定还是一个四五串

01:48.400 --> 01:51.360
比方说你这个玩意呢 它可以是一个四五串 还可以是什么呢

01:51.620 --> 01:52.760
还可以是一个组件对象

01:54.040 --> 01:55.580
比方说我们这里导入一个组件

01:56.100 --> 01:56.600
import

01:57.120 --> 01:58.140
导入一个comp

01:59.680 --> 02:00.600
就是我们的一个组件

02:02.280 --> 02:04.540
那么我们其实可以把这个组件对象呢

02:05.300 --> 02:06.000
把它返回

02:06.640 --> 02:07.400
明白了意思吧

02:07.660 --> 02:09.960
那么这里呢 也可以 还会生成这个组件

02:10.220 --> 02:12.740
就这个组件啊 它本身的作用就是

02:13.240 --> 02:14.560
用来生成别的组件

02:15.080 --> 02:17.900
用来生成别的元素 生成别的组件 就其中一个作用

02:18.680 --> 02:21.240
明白吧 这是关于这一点 说一下

02:23.440 --> 02:25.740
然后剩下的最后一个就是Keeper Live

02:26.260 --> 02:28.040
那么这个组件是用来做什么用的呢

02:29.040 --> 02:32.260
它是用于缓存内部组件实力的

02:32.260 --> 02:35.160
就是这个组件本身呢 它并不生成任何的元素

02:35.580 --> 02:38.040
它是用来缓存它里边的组件实力的

02:38.660 --> 02:40.180
因为我们知道每一个组件啊

02:40.300 --> 02:41.860
当我们一面上去使用组件的时候

02:41.860 --> 02:43.380
每个组件是不是就是一个

02:43.860 --> 02:46.060
会创建一个组件实力对吧

02:46.060 --> 02:48.520
通过为用的构造函数来创建个组件实力

02:48.520 --> 02:50.060
会进入各种生命周期

02:51.680 --> 02:53.780
那为什么它要去缓存这个实力呢

02:54.220 --> 02:55.420
它的目的在于啊

02:55.640 --> 02:57.820
如果说我们遇到一些组件

02:58.240 --> 03:00.020
切换不断的去切换

03:00.020 --> 03:01.420
什么时候会遇到组件切换

03:03.520 --> 03:04.440
最常见的

03:05.440 --> 03:06.200
首先是这种

03:06.680 --> 03:08.840
你可以比方有一个组件啊 组件1

03:09.200 --> 03:10.240
你可能写个vif

03:10.960 --> 03:13.200
它某一些条件下才会渲染出来

03:13.560 --> 03:14.720
然后那个组件2

03:15.320 --> 03:16.760
vlsif

03:17.600 --> 03:19.440
又是一个条件渲染出来

03:19.920 --> 03:20.880
然后组件3

03:21.720 --> 03:22.920
vls

03:23.400 --> 03:24.440
那么又是一个条件

03:24.680 --> 03:27.040
那么你看啊 这三个组件是不是只会显示一个

03:27.880 --> 03:29.200
对不对 是不是只会显示一个

03:29.420 --> 03:31.820
根据条件的不同来些 选择

03:32.220 --> 03:33.500
渲染不同的组件

03:33.940 --> 03:34.420
对吧

03:34.980 --> 03:38.580
那么也就这个位置呢 它有可能会极意发生那种组件的切换

03:38.980 --> 03:40.300
它有可能会显示它

03:40.820 --> 03:42.100
以后呢 又可能会显示它

03:42.420 --> 03:43.660
以后呢 又可能会显示它

03:43.660 --> 03:44.900
以后呢 又可能会显示它

03:45.100 --> 03:45.940
就要组件的切换

03:47.260 --> 03:50.580
这种场景其实在我们的具体开发中发生了什么时候

03:51.140 --> 03:52.060
发生在路由

03:52.580 --> 03:53.860
对吧 路由切换

03:56.100 --> 03:56.860
发生在这里边

03:57.180 --> 04:00.060
因为我们路由里边是用到一个组件叫rotor view

04:01.380 --> 04:02.940
对不对 用到这么一个东西

04:03.380 --> 04:05.420
这个东西呢 它其实内部啊 就是

04:05.700 --> 04:07.740
根据我们的路由配置

04:08.100 --> 04:09.540
里边有个路由的配置的数据

04:10.060 --> 04:13.740
根据我们的路由配置来选择其中一个组件 选择到这个位置

04:14.300 --> 04:17.900
那么一换了路由变了过后 它就选择另外一个组件 之前那个组件就消失了

04:18.660 --> 04:22.700
对吧 那么路由切换的时候 像这种 或者是像这种显化的时候

04:23.380 --> 04:24.460
它就极意发生

04:24.780 --> 04:28.340
我们要同它切换到它 于是呢 它就消失

04:28.600 --> 04:31.600
消毁 对吧 触发它的生命中心 勾着函数 destroy

04:32.800 --> 04:34.400
然后呢 它就重新创建

04:35.720 --> 04:38.600
而将来切换来的时候 比方说又从它切换到它

04:39.160 --> 04:44.520
之前那个complete一早就消失了 对吧 于是呢 它又消毁 它又全部重新创建

04:45.200 --> 04:46.320
就是这么一个意思

04:47.160 --> 04:49.200
所以说缓存的作用在哪呢

04:49.440 --> 04:52.000
它是用于它内部 keep live

04:52.000 --> 04:54.400
如果说把这些东西包 包裹在一个keep live里边

04:55.640 --> 04:57.360
就外面干套一个keep live

04:59.280 --> 05:02.040
当然这个组件的名字呢 你可以用转横线 也可以用这种

05:02.600 --> 05:05.680
这种写法 组织的统一就行了啊 不要心成分裂

05:07.160 --> 05:08.440
你外面干套一个keep live

05:14.880 --> 05:15.880
如果这样子写的话

05:16.880 --> 05:19.760
那么这些组件呢 它就会被keep live缓存

05:20.320 --> 05:24.880
比方说一开始渲染的是它 于是呢 keep live 就会把这个组件的实力缓存起来

05:25.560 --> 05:29.000
将来切换到它的时候呢 它不会让这个组件直接消毁

05:29.760 --> 05:32.640
啊 它反正在它的缓存裂表里边 它直接渲染它就行了

05:33.460 --> 05:37.100
好 它也会被缓存起来 于是现在缓存了几个呢 现在就缓存了两个

05:41.710 --> 05:47.310
现在就缓存了它 缓存了它 对吧 以后切换到com3的时候又缓存了它

05:47.630 --> 05:49.390
那么之前的组件是并没有消毁的

05:50.070 --> 05:54.070
好 将来呢 如果说我们要切换到com1 就切回来的时候

05:54.630 --> 05:56.950
它就不会再重新创建com1的实力

05:57.550 --> 05:59.310
而是直接使用之前的缓存

06:00.290 --> 06:04.290
这样做的好处呢 一方面呢 是能够避免创建组件带来的开销

06:04.290 --> 06:07.170
因为我们知道之前有学过了很多的原类型的东西 对吧

06:07.170 --> 06:11.210
我们创建一个组件是要经过很多很多的流程 要进入组件的生命周期

06:12.930 --> 06:16.370
另一方面呢 也可以保留组件的状态

06:17.450 --> 06:21.890
就组件里边之前有哪些数据啊 就data里边有哪些数据呢 都可以得到保留

06:22.490 --> 06:25.530
那么就说 之前切走的时候 这个组件长什么样子

06:26.010 --> 06:27.810
切回来的时候 这个组件还长什么样子

06:28.670 --> 06:32.310
而这种状态的保留呢 不仅仅是数据的保留 还包括它里边的

06:32.790 --> 06:38.190
真实的动物的元素的保留 状态的保留 啥意思呢 因为每一个组件它不是一个vload嘛

06:39.390 --> 06:41.150
对吧 每一个组件是一个vload

06:43.700 --> 06:49.140
组件它本身也是会生成虚的节链 对吧 组里边是不是对应两个东西 一个是component

06:49.940 --> 06:53.420
instance 对吧 组件的实力 就是个组件创建的创建的组件和对象

06:54.180 --> 06:55.300
这是我们之前讲过的啊

06:56.280 --> 07:02.560
那这里边就有什么啊 你配置的data啊 配置了什么computed啊 这些东西对吧 全部在里边

07:03.640 --> 07:06.440
对吧 这些东西都在里边 就是个组件实力

07:07.560 --> 07:11.680
另一方面的vload里边是不是有个东西啊 是对应的生成的动物元素 对不对

07:12.280 --> 07:13.280
所以这个玩意啊 一眼哦

07:14.440 --> 07:15.000
对应生成的

07:15.880 --> 07:19.880
哦吧 组件实力里边啊 组件实力里边是不是有个属性 叫一眼哦

07:22.810 --> 07:24.210
啊 是不是有这么一个东西

07:25.030 --> 07:31.510
那么由于组件实力得到保存的 所以说他之前他对应的那个动物元素也会得到重用

07:32.110 --> 07:36.430
并不会生成 并不会去创建新的动物元素 而直接重用之前的就ok了

07:37.110 --> 07:38.390
说我们来具体看一个例子吧

07:40.070 --> 07:42.350
嗯 这里呢 我们有一个demo1啊 就有一个

07:43.550 --> 07:44.870
实力 打开啊

07:46.030 --> 07:48.590
把运行出来啊 看一下这个是什么玩意

07:49.570 --> 07:53.210
现在这个其实这个很简单啊 我这里边没了件事 没什么东西

07:53.650 --> 07:57.570
app.vue里边就跟组件里边了 我们做了一个动态组件

08:00.040 --> 08:00.720
这个动态组件

08:01.920 --> 08:03.000
嗯 打开看一下

08:03.840 --> 08:04.080
ok

08:06.590 --> 08:06.990
看着啊

08:10.000 --> 08:15.120
哦 这里这里一个问题啊 没关系 我们这里弄一下吧 就这里有一个动态组件

08:16.240 --> 08:19.680
我们这个上面有个按钮啊 点击这个按钮了就可以切换这个组件

08:20.420 --> 08:24.980
现在呢 我们这里有个动态组件 这个动态组件独装是什么呢 独装是有一个属性

08:25.660 --> 08:28.220
data

08:28.220 --> 08:29.220
comps

08:31.220 --> 08:33.140
comps啊 我们这里呢有一系列的组件

08:34.900 --> 08:36.500
你看我写这个玩意儿

08:37.620 --> 08:39.540
有两个属性啊 一个是comps

08:40.260 --> 08:43.340
表示我目前的组织组件啊 一个是currindex

08:43.900 --> 08:49.420
当前我们要渲染的是哪一个组件啊 我这样子用这种方式来写 当然也可以用vif bls

08:50.380 --> 08:51.060
是一样的效果

08:51.660 --> 08:57.100
不要说我们这里有三个组件啊 这三个组件非常简单 第一个组件就显示一个也其有个input元素

08:57.460 --> 09:02.580
里边是设置的一些生命轴气函数 窗戒啊multi的呀或者是disploy的时候呢 会打印一些东西

09:02.980 --> 09:08.300
这个组件都一样啊 只是显示的文字不一样而已 非常简单吧 就这三个组件啊 我们把它导入进来

09:09.340 --> 09:10.660
com1 from

09:14.230 --> 09:14.830
comps.lint

09:15.510 --> 09:15.910
com1

09:16.850 --> 09:19.650
这里是3 这里是2

09:22.360 --> 09:30.120
2 3 好 我们把这三个组件呢 我都拿着去用compulint是注册的啊 这里不需要注册 因为我们无办理比并没有去使用它对吧

09:31.280 --> 09:34.480
呃 我们是动态生成的 这里是com2 com3

09:35.680 --> 09:39.360
好了 那么我们现在一个currindex是个0啊 写错了

09:40.480 --> 09:44.160
一开始表示什么意思呢 表示我要渲染 我这个位置要渲染这个组件

09:44.620 --> 09:48.060
0吗 一会点击按钮过后呢 我又切换切换到1

09:49.260 --> 09:55.060
呃 那么就选择渲染它 再点击下来就切换到2 渲染它 再点击下来就切换到你又切换到0

09:55.460 --> 09:59.580
又渲染他就这么个意思啊 你看我点击的时候怎么写的 我把currindex重新复制

10:00.380 --> 10:06.900
就他加1过后 除以这个他的长度 对吧 这个我们还是不解释的吧 零

10:07.640 --> 10:11.760
下一次呢 加1过是不是1 以除以长度3的余数 是不是还是1

10:12.200 --> 10:18.400
对吧 那到了2的时候 是不是最后一个了 2加1是不是等于3 三除以3的余数 又是不是又变成0了

10:18.960 --> 10:23.000
就这个就点击切换 那么通过切换这个currindex是不是就可以拿到

10:23.680 --> 10:25.040
不同的就是组件实力的

10:25.680 --> 10:31.120
对吧 当然这个地方呢 其实这个输出 我们完全可以把冻结一下对吧 把冻结一下

10:31.880 --> 10:35.880
没有必要 没有必要 把变成小女士啊 为了提高效率啊 这些东西都是小事啊

10:36.620 --> 10:39.260
不影响功能的 好了 我们看一下吧

10:41.400 --> 10:46.600
上去 你看 目前的是不是comp1创建了 comp1 mounted对不对

10:47.200 --> 10:52.520
好 接下来我们在这里边去输入一些东西 点击切换 切换的时候是不是这个位置要显示comp2了

10:53.600 --> 10:56.520
是不是显示comp2 因为这个玩意变了嘛 要读取出来什么comp2

10:58.000 --> 11:00.560
好 读取comp2的时候 那么comp1它就会消失

11:01.080 --> 11:06.600
那就是刚才我们讲的啊 他渲染完了过后不能渲染他的时候 那么之前的那个组件就会消失

11:07.020 --> 11:12.380
那么消失就会进入他的消费流程 然后接下来他又他又去新鲜 我们点击输一期

11:13.860 --> 11:14.660
点击啊 你看

11:15.940 --> 11:18.100
comp2创建了 然后呢comp1

11:19.700 --> 11:25.980
迪索尔的 然后最后呢comp2忙几的了 接下来我们再击再喜欢 这生命周期我不扯了啊

11:26.780 --> 11:27.900
呃 之前讲过的

11:28.940 --> 11:33.740
然后我们再点击comp3 是不是comp3创建comp2消费comp3忙几

11:34.720 --> 11:35.000
对不对

11:36.000 --> 11:45.400
好 接下来我们再点击又切回到comp1 注意啊comp1之前是显示过的 对不对 现在我们再切换回去的时候会怎么样呢

11:46.600 --> 11:50.040
不怎么样 正常流程所以comp3消失comp1创建

11:50.760 --> 11:55.120
comp1创建comp3消失 那么现在看到的comp1还是之前的comp1嘛

11:55.800 --> 11:56.480
这就不是了

11:57.320 --> 12:00.760
对不对 那么也就是他有个创建 重新创建comp1的流程

12:01.740 --> 12:08.820
不仅如此呢 他还会之前的保留这状态的会丢失 你看啊 这里我写了一些东西点错点切换

12:09.300 --> 12:11.060
切换comp1的时候说这里丢失掉了

12:11.860 --> 12:16.660
对不对 那么这就是不使用keep live的时候的情况

12:17.220 --> 12:18.780
那如果说你这个块儿觉得

12:19.740 --> 12:25.980
一是我为了性能优化 我希望他能够保留之前的组建状态 组建实力的状态 缓存起来 不要丢失

12:26.620 --> 12:30.660
另外一方面呢 我希望他的状态的得益保留 那怎么办呢 非常非常简单

12:30.820 --> 12:32.340
你在外面掏一个keep live就完整

12:34.760 --> 12:35.440
掏一个这个东西

12:35.920 --> 12:36.320
就ok啊

12:38.080 --> 12:43.320
好 我们来看一下啊 因为keep live keep live 他会保留之前的组建实力

12:43.800 --> 12:49.360
注意他只保留组建啊 你是什么写的 写些什么A7元数 这些玩意儿跟他没关系啊 他保留的是组建

12:50.880 --> 12:53.680
好 我们来看一下啊 现在的comp1一开始创建了

12:53.960 --> 13:01.200
mount it 那么这个时候呢 其实他就已经被缓存下来了 于是呢keep live里边呢 他就缓存了啊 目前缓存的

13:02.320 --> 13:03.320
有什么 有comp1

13:04.440 --> 13:10.760
comp1又已经缓存下来了 那么这个时候我在里边填一些东西啊 随便填 然后接下来切换到comp2的时候

13:11.400 --> 13:19.280
那么comp2没有没有缓存过 对吧 comp1是没有 comp1是看不见了啊 他真实动物是从页面上移出了 这个是毫无疑问的 只不过他是组建实力

13:20.280 --> 13:25.080
缓存下来了 组建实力里边说是有真实动物的引用 对吧 他只是他没有显示到页面上

13:26.160 --> 13:29.280
那么接下来切换了comp2的时候呢 现在他又缓存了comp2

13:29.380 --> 13:42.180
他又缓存了comp3 你看啊 现在是不是没有第四座椅 对不对 之前的comp1第四座椅的吗 没有

13:42.620 --> 13:44.740
comp2第四座椅的吗 没有comp3第四座椅的 没有

13:46.620 --> 13:51.340
好 我们这些个 接下来我们切回到comp1 你看一下啊 我们切回到comp1的时候

13:52.100 --> 13:56.380
是不是没有发生任何生命周期 comp2 comp3首先他缓存下来了 他并没有消失

13:57.280 --> 14:01.160
然后呢 切换到comp1的时候呢 他就会直接使用之前的缓存

14:02.760 --> 14:05.880
而且那些状态是不是得以保留了 他切换了comp2的时候

14:06.680 --> 14:08.560
没有出发生任何生命周期 因为这些都是从用的

14:09.040 --> 14:09.360
comp3

14:10.160 --> 14:16.920
对吧 他只是把之前那个真实动物给他写到这儿而已 就是他的效率是被非常高的 当他带来带一架呢

14:17.920 --> 14:22.400
带一架是什么 带一架就是占用了更多的内存空间

14:22.820 --> 14:27.780
你讲我们这个组件当然比较简单嘛 当然这个组件里边应该还有很多很多的内容

14:28.300 --> 14:32.900
如果说这是一个页面的话 这个是个页面的话 那里边还有直柱件 还有大队内容

14:33.500 --> 14:37.500
那么由于他的这个组件被缓存下来的 所以说里边东西全部被缓存下来

14:38.220 --> 14:42.380
所以他里边他会 他相当于是一个用空间据换时间的这么一个做法

14:43.380 --> 14:46.380
他就KeeperLive 好像我们继续看

14:46.600 --> 14:58.790
KeeperLive里边有一些属性啊 有三个属性 一个是include和exclude 这两个玩意是指定什么呢 他可以指定

14:59.230 --> 15:04.350
哪些组件进入缓存include的就是你该指定哪些组件我要进入缓存

15:05.190 --> 15:07.750
那么除了这些组件其他其他组件就不要缓存了

15:08.470 --> 15:12.630
exclude是相反的 就哪些组件不缓存

15:13.490 --> 15:18.650
那么除了这些组件呢 我都可以缓存 他其实判断的时候是怎么判断的呢 判断就是

15:19.170 --> 15:25.610
这里边包 如果说你设计了这两个属性的任何一个啊 他就判断你这个东西如果说有包含

15:27.450 --> 15:33.290
同时又没 你的组件包含在这个里边 同时又没有包含在这个里边 那么我就缓存

15:33.930 --> 15:36.970
那就这么样这样判断的 ok 我们这里看一下吧

15:37.690 --> 15:43.950
比方说我这里举个例子啊 我要缓存的组件呢 只有com1和com2 com3我就不缓存了

15:44.470 --> 15:45.430
因为有些组件呢 我

15:46.190 --> 15:48.150
无所谓 你不用保留状态

15:48.790 --> 15:51.510
如果说你有这样的需求的话 那么你可以配置这个include

15:53.150 --> 15:55.710
配这个东西 那么这个东西怎么配置呢

15:56.750 --> 15:59.910
他有三种配置方式 一种的是把它配置成一个数组

16:01.510 --> 16:05.830
数组的每一项呢 是组件的名字 这个组件的名字是什么呢

16:06.610 --> 16:08.370
组件的名字呢 聊从这里看啊

16:10.800 --> 16:12.760
给这个组件里面设置一个name

16:13.680 --> 16:15.280
这个name属性的还是有用的啊

16:16.000 --> 16:22.240
那个name属性有什么用的 以前我们做过一个组件就是自我帝规 对不对 那么需要这个name属性 那么这个玩意呢

16:23.080 --> 16:26.520
也需要这个name属性 那么来表示个组件的名字

16:27.320 --> 16:30.120
好 这个组件名字com1啊 然后再来com2

16:31.120 --> 16:31.620
name

16:33.360 --> 16:33.840
com2

16:37.860 --> 16:38.460
com2

16:39.980 --> 16:40.860
好 这里呢com3

16:44.020 --> 16:44.380
com3

16:46.620 --> 16:49.740
好了 那么现在呢 我们这里比较直换成com1

16:51.140 --> 16:51.540
com1

16:53.100 --> 16:53.420
com2

16:54.260 --> 16:56.820
啊 你这是一种写法啊 用这种数组的写法

16:57.900 --> 17:01.580
好 接下来我们再看啊 现在我们在刷新com1创建了 然后

17:02.100 --> 17:06.620
前往com2 com2创建了com1也没有消失 对吧 没有Distory 然后我们再请问了com3

17:07.400 --> 17:12.120
com3创建了com3水源鞋鞋啊 好 接下来我们切回到com1

17:12.800 --> 17:15.320
切回去 你看com3是Distory的 他并不会换存

17:15.960 --> 17:20.760
就这么个意思啊 他能够保留com1和com2的状态 但是com3呢 又得重新创建

17:21.360 --> 17:25.280
就这么个意思啊 this include excluse是一样的 表示不保含哪些组件

17:26.600 --> 17:29.920
那些组件呢 就不要换存了 就是include excluse

17:30.320 --> 17:34.480
那么这是一种写法 一个是写成数组 一另外一个呢 就是写成这种格式

17:37.670 --> 17:41.710
写成一个字幕刷 你给他就是一个字幕刷 用刀号分割就好 就ok了

17:42.470 --> 17:47.030
用刀号分割就ok 那么这样子也可以 好 保存啊 你看一下com1

17:47.990 --> 17:49.510
com2 com3

17:51.150 --> 17:54.590
com3Distory的com1是不是保留了com2保留了com3又重新创建

17:55.590 --> 17:59.310
这是 还有一种就是写成一个证则表达式 用一个证则表达式呢

17:59.830 --> 18:04.230
来规则啊 看只要满足证则表达式的 那么都是要换存的

18:04.970 --> 18:05.490
ok 这是

18:07.130 --> 18:13.850
关于这一块include excluse excluse就不举例的啊 道理是一样的啊 怎么它是意识的相反

18:14.810 --> 18:16.650
另外呢 他还有一个属性叫max

18:17.530 --> 18:21.770
这个玩意是一个数字啊 默认是 默认是你没有设置

18:22.330 --> 18:26.610
没有设置的话 他就不管他啊 就是比方说max呢

18:27.890 --> 18:28.690
我们举个例子啊

18:29.670 --> 18:38.110
写个1 表达式的意思呢 我只缓存一个 我最多只缓存一个 那么就这个意思 写个1也没什么意义啊

18:38.950 --> 18:43.430
一般是我们就是 如果说觉得内存占用过多的话 那么你执行控制一下啊 你可以控制一下

18:44.430 --> 18:49.590
他到底最多缓存几个 当他超过这个数量的时候呢 他怎么办的 他就会

18:50.790 --> 18:54.110
把那些最久没有用到的组件给他移出掉

18:55.090 --> 18:58.770
有些组件呢 不要说他可能缓存起来了 但是一直没有用他

18:59.330 --> 19:04.730
一直没有才重新使用他 那么这个时候呢 他就会把他移出掉 超过这个max的时候他就会移出掉

19:05.010 --> 19:12.490
以后呢 我讲他详细的实现方式 因为我们要回答这个面词题 还要回答他的原理对吧 我们要讲他的原理的时候呢 你可以看得很清楚啊

19:12.890 --> 19:18.570
我现在也不是很好演示啊 因为写个1的话 那就没事 虽然倒是倒是能使看到这个效果啊

19:19.150 --> 19:24.710
不要现在缓存一个对吧 我们切换到第二个的时候 其实第一个就已经消失了 因为他最多只能缓存一个

19:25.630 --> 19:29.470
没什么意义啊 我们这里缓存两个吧

19:32.680 --> 19:38.680
三个加上啊 现在缓存了一个了对吧 现在又缓存了一个了 然后呢 再切换到第三个的时候

19:40.720 --> 19:45.120
他是不是超过了一个最大数量 然后现在要缓存第三个 要缓存第三个的时候呢

19:45.880 --> 19:50.040
他就会把之前亢普一和亢普二去看一下哪个最长时间没有使用

19:50.280 --> 19:55.080
那么明天明天就亢普一 对吧 亢普一他就会被移除 所以我们切换到亢普三的时候

19:56.200 --> 19:57.800
哎 为什么亢普二Destroy他

19:58.600 --> 20:01.520
不对啊 亢普一切换到亢普二

20:02.800 --> 20:08.540
呃 哎 为什么现在有Destroy

20:10.220 --> 20:11.980
亢慢个是为二

20:13.460 --> 20:18.140
最大的缓存数量为二 现在为一切换到

20:18.640 --> 20:22.320
亢普一Destroyed

20:24.720 --> 20:32.600
现在他只 我只是切换到亢普二 他为什么亢普一要也要那个Destroyed呢

20:33.720 --> 20:41.000
啊 这视频我剪了一下啊 刚才我调了半天 我都跑到原码里边去调试了 结果呢 发现是在这里多了 写了这么个东西

20:42.160 --> 20:45.160
你这样写的话就字结束了 对吧 他就没有内容了 那缓存啥呀

20:46.040 --> 20:47.320
好 是这样子 是这个问题啊

20:48.600 --> 20:57.060
这个是我来原码里边 我来原码里边去调试 刚才调试的 该的东西啊 取消啊 取消一下

20:58.740 --> 21:00.660
其实顺便说一下吧 这个原码 呃

21:01.700 --> 21:07.660
我怎么知道我怎么知道这个文件在这呢 他实际上我们这里用的是这个文件啊 就是Destroy下面的这个

21:09.980 --> 21:15.980
Wu Long Time ESM的介绍啊 用的是实际上是他 我来这里加上两个console

21:15.980 --> 21:20.180
啊 我为什么知道是这个文件呢 是因为

21:21.680 --> 21:24.760
这是为了打包出来的文件啊 还跟争取各种环境打包出来的文件

21:25.400 --> 21:28.840
呃 因为我们去看这个pack.json 这里边有个module

21:29.320 --> 21:32.120
这啥意思呢 就是当你使用es6的方式去导入这个

21:32.760 --> 21:38.240
包的时候呢 他导入的地址是这个 实际上你导入的是这个解释啊 于是你就知道了啊 用的是他

21:39.440 --> 21:43.160
呃 那么为什么我能够找到 准确找到这个代码在这呢

21:43.660 --> 21:47.860
呃 是因为你要去下载围约的圆码 他的圆码谁在这啊

21:48.420 --> 21:55.820
src call里边 就是在这里也可以看得到 那么这里边就就是他在把分成结构 他圆码不是把全部写到一个文件啊

21:56.220 --> 21:59.580
不可能的 他是通过这个src目录啊 打包出来的

22:00.540 --> 22:06.780
呃 在这里面呢 有一个instance 就是这里面就文件解构的分得很细了啊 你可以看得很清楚

22:07.460 --> 22:09.700
call里边有一个instance

22:10.680 --> 22:13.600
找一下吧 我component 这里有一个keep live

22:14.400 --> 22:17.200
其他的圆码在这啊 在这里

22:17.760 --> 22:23.840
你看Render的时候 其实这里边你可以稍微看一下 也并不复杂啊 你看他怎么来判断这个include

22:24.320 --> 22:27.520
怎么来判断的 非常简单吧 就是如果说你写的include

22:28.240 --> 22:32.840
并且呢 这个当前的主件名字呢 又有名字 对吧 不为空

22:33.840 --> 22:34.880
而且这个名字呢

22:36.600 --> 22:38.840
又没有匹配上include

22:39.700 --> 22:44.820
就是不在include当中 这里写了一个工具函数 就是你没有看这个工具函数

22:45.320 --> 22:46.480
你也应该知道他在干什么

22:46.880 --> 22:49.440
march 你觉得是什么意思 就匹配嘛 对不对

22:51.480 --> 22:56.080
而且呢 这个include 他第一个参数 传的是include 你看一个march 他第一个参数 什么意思

22:56.340 --> 22:57.360
他可以是个字符串

22:57.620 --> 22:58.900
用兜号分割的字符串

22:59.160 --> 23:01.720
可以是个正的表达式 也可以是个字符串的输出

23:01.980 --> 23:04.020
所以我们刚才说了那个include的三种写法

23:04.280 --> 23:06.320
exlude是一样的

23:06.840 --> 23:08.120
说你写了include

23:08.840 --> 23:10.380
而且呢 我又有名字

23:10.640 --> 23:13.960
并且呢 名字呢 又不在include当中 那么这种情况下

23:14.220 --> 23:15.900
我是不是不缓除呀 不缓除 是不是

23:17.040 --> 23:18.060
对不对 直接结束就行了

23:18.580 --> 23:21.380
或者是你写了include

23:22.400 --> 23:23.680
就是你写了排除

23:24.720 --> 23:26.500
并且呢 我有名字

23:28.560 --> 23:31.620
哦 这里是没有名字啊 我写了include 并且呢

23:32.140 --> 23:37.260
没有名字 或者是名字不在他当中 那么都不去做任何处理

23:37.460 --> 23:42.320
如果说你写了排除 并且我又有名字 那么名字呢 又在你的排除列表里边

23:42.580 --> 23:44.380
那么我也不做任何事情 也不缓存

23:47.460 --> 23:48.980
缓存的时候 你看这个max的判断

23:49.240 --> 23:50.780
如果说当前那个

23:51.040 --> 23:52.820
有最大纸 你写的最大纸

23:53.080 --> 23:57.440
最大缓存 并且呢 我目前的缓存数量已经超过了你的最大缓存 那我就

23:57.700 --> 23:58.720
这个东西叫什么

23:58.980 --> 24:00.000
叫做清除

24:00.760 --> 24:02.300
对不对 修减

24:02.560 --> 24:03.320
修减缓存

24:03.580 --> 24:04.600
就去掉一个

24:04.980 --> 24:08.140
他去掉第几个了 去掉第第一个 我们这里有一会再说吧

24:08.400 --> 24:09.920
就这个对原来并不复杂

24:12.660 --> 24:15.740
好 我们说哪儿呢 就在这 看一下效果

24:16.240 --> 24:18.800
现在呢 我们这里改成正确了之后呢

24:19.060 --> 24:20.340
缓存三个

24:20.840 --> 24:24.420
而且呢 max 设置为二 但是缓存三个的话就没有必要写了对不对

24:25.460 --> 24:26.220
好 我们看一下吧

24:28.280 --> 24:28.780
好

24:29.040 --> 24:32.620
现在缓存两个了对不对 亢普1和亢普2都缓存了 现在我们切换到第三个

24:32.880 --> 24:34.160
于是呢 亢普1就会被移除

24:34.660 --> 24:35.940
亢普1是不是Destroyed

24:36.400 --> 24:37.180
就这么个意思

24:40.270 --> 24:43.090
好 那么现在我们再切换到亢普1是不是

24:43.850 --> 24:46.410
亢普1要重新创建了 因为之前被移除掉了

24:46.670 --> 24:47.950
接下来要移除哪一个

24:48.210 --> 24:49.990
因为现在已经缓存了亢普2和亢普3了

24:50.250 --> 24:52.550
切换了亢普1 移除哪一个 移除亢普2

24:54.090 --> 24:55.630
就最久没有被使用的

24:57.830 --> 24:59.370
好 这是这一部分

25:00.910 --> 25:01.930
另外呢

25:02.190 --> 25:05.010
在由于受KeeperLive的影响

25:06.010 --> 25:08.570
在KeeperLive牵套里面的这里面的组件

25:08.830 --> 25:12.130
或者说这里面的组件里面还包含组件 就是有牵套的组件

25:12.490 --> 25:16.290
总之KeeperLive里面所有的值组件和后债组件

25:17.130 --> 25:19.290
他们会多两个生命中期构制函数

25:19.570 --> 25:23.610
分别是Activated和D-Activated

25:23.730 --> 25:26.330
表示激活和湿活

25:27.490 --> 25:29.490
那么这两个生命中期函数什么时候出发了

25:29.730 --> 25:31.370
就是 因为他们

25:31.610 --> 25:34.050
因为被缓存了过后 他就会有一个问题就是

25:34.610 --> 25:38.770
他不再有Creative的时间了 不再有Mounty的生命周期了

25:39.210 --> 25:42.050
于是这个组件本身就不知道什么时候我被显示出来了

25:42.290 --> 25:46.530
什么时候我没有被显示了 我可能要去做一些别的事情

25:46.890 --> 25:49.650
比方说我有一些技术系 我可能不再显示的时候就不再做了

25:49.890 --> 25:50.690
不再计时了

25:51.130 --> 25:52.730
那么有可能会有这样的一个需求

25:53.770 --> 25:56.930
那么像这种情况下 我们就可以通过这两个生命中期函数

25:57.490 --> 25:58.250
我把这一区掉

26:00.370 --> 26:01.010
比方抗不易

26:01.570 --> 26:03.330
我这里写上两个生命中期函数

26:03.610 --> 26:05.650
一个是Activated

26:06.330 --> 26:10.460
Activated

26:12.730 --> 26:16.170
Activated

26:17.530 --> 26:18.490
蓝色

26:22.290 --> 26:23.490
这个还输出了一下

26:23.490 --> 26:24.130
抗不易

26:24.570 --> 26:25.970
Activated

26:26.850 --> 26:27.850
另外一个是D

26:28.250 --> 26:29.130
Activated

26:31.430 --> 26:32.070
抗不易

26:33.510 --> 26:34.590
D 抗不易

26:35.550 --> 26:36.550
DActivated

26:36.790 --> 26:38.150
好 保存

26:38.350 --> 26:38.950
现在看一下

26:39.470 --> 26:39.950
刷新

26:40.270 --> 26:41.910
你看一开始的时候抗不易

26:42.470 --> 26:46.150
创建了Mounted了 然后会触发这个Activated

26:46.990 --> 26:48.510
好 接下来我们提问到抗不易的时候

26:48.510 --> 26:49.430
抗不易其实

26:49.910 --> 26:52.030
他有一个 如果说你写的Activated的话

26:52.030 --> 26:52.710
他也会触发

26:52.990 --> 26:54.670
那么抗不易呢 我们只关抗不易

26:54.670 --> 26:55.910
抗不易是不是失火了

26:56.870 --> 26:58.230
好 然后我们再切换了抗不三

26:58.510 --> 26:59.870
跟抗不易没关系吧 对吧

27:00.390 --> 27:01.870
好 然后我们再切回到抗不易

27:02.630 --> 27:03.870
抗不易是不是只运向这个

27:04.310 --> 27:05.390
因为他不会重新创建

27:05.390 --> 27:06.470
他就不会触发

27:06.750 --> 27:08.270
不会触发他 也不会触发他

27:08.510 --> 27:09.550
更加不会触发他

27:09.550 --> 27:10.550
但他会触发他

27:10.830 --> 27:13.630
他重新进入那个激活状态

27:14.670 --> 27:15.430
就这么个意思

27:16.710 --> 27:17.990
不光是他

27:17.990 --> 27:18.750
不光是抗不易

27:18.750 --> 27:21.070
如果抗不易里边还用到了别的组件的话

27:21.310 --> 27:23.870
所有Keeper Live的执着键和后代组件

27:23.870 --> 27:25.670
都会具有这两个生命中的勾指函数

27:27.710 --> 27:30.270
好了 那么目前我就说完了这个Keeper Live的具体

27:31.030 --> 27:31.830
使用了

27:31.830 --> 27:33.350
然后我们再来看一个例子

27:33.350 --> 27:35.150
在讲实现之前我们再来看一个例子

27:35.350 --> 27:37.270
这个例子呢 更加具有代表性一点

27:39.190 --> 27:39.990
关闭了

27:44.300 --> 27:45.460
看第二个例子

27:46.580 --> 27:49.260
第一个例子呢 我做了一个相对来说比较完整的一个效果出来

28:03.360 --> 28:04.120
好 看一下啊

28:05.640 --> 28:09.240
那么比方说这是一个后台管理系统

28:09.240 --> 28:11.280
我就写的比较简单啊 这是个很LOGO

28:12.320 --> 28:14.520
现在我们要做的事情是啥呀

28:14.520 --> 28:16.600
就左边呢 可能会有一些菜单

28:16.600 --> 28:17.440
这菜单比较多

28:17.440 --> 28:19.200
因为后来管理系统可能比较复杂

28:19.200 --> 28:20.000
菜单很多

28:20.360 --> 28:23.040
那么有些管理员在用这个网站的时候呢

28:23.040 --> 28:24.560
你看我们这有三个页面啊

28:24.560 --> 28:25.760
配几一 配几二

28:25.760 --> 28:27.560
他这个页面做的都很简单

28:27.560 --> 28:30.000
你可以想象一下这些页面里面可能有很多东西啊

28:30.560 --> 28:32.880
有些闷夸 还有一个数字啊

28:32.880 --> 28:33.960
就是做个模拟嘛

28:33.960 --> 28:34.880
有一些页面

28:36.440 --> 28:38.440
那么这些页面呢可能很多啊

28:38.440 --> 28:39.520
可能有几十个

28:39.520 --> 28:42.280
你可以参考一下这个阿里云平台

28:42.280 --> 28:43.240
一边的产品

28:43.240 --> 28:44.720
那个是不是特别特别多

28:45.720 --> 28:47.280
那么如果说这么多页面啊

28:47.440 --> 28:49.000
我每次一些管理员

28:49.000 --> 28:51.800
平时在平时工作中去做这个操作的时候就很麻烦

28:52.840 --> 28:54.560
我每次比较说我要做一个人员管理

28:54.560 --> 28:56.640
我要这个你去找一个页面啊

28:56.640 --> 28:58.320
到处去找找找一下页面

28:58.320 --> 29:00.600
然后去找个人员管理把点进去

29:00.600 --> 29:01.600
好做一些操作

29:01.600 --> 29:02.720
可能做到一般的时候呢

29:02.720 --> 29:04.200
我要切切到另外一个页面

29:05.160 --> 29:06.920
我又要到处去找

29:06.920 --> 29:07.760
不光找的麻烦

29:07.760 --> 29:10.120
一切过去过后这个页面的状态又丢失了

29:10.120 --> 29:11.200
一会要回来又回来

29:11.200 --> 29:13.000
继续编辑的时候又出问题了

29:13.000 --> 29:14.240
又得重新来

29:14.240 --> 29:15.520
就遇到这么些问题

29:15.560 --> 29:16.840
那么平时我们在

29:16.840 --> 29:19.840
真实的这个后台管理中是怎么去做的呢

29:20.440 --> 29:21.880
我们一般是用一些选项卡

29:21.880 --> 29:23.200
或者是快捷方式

29:23.920 --> 29:24.600
来解决这个问题

29:24.600 --> 29:26.960
比方说我这里写的简单就三个页面

29:27.680 --> 29:29.360
那么就想象成他有很多页面吧

29:29.360 --> 29:32.280
比方说有两个页面我是平时经常要用的

29:32.280 --> 29:33.360
所以说我就可以这样子

29:33.360 --> 29:34.680
我把配级加到这儿来

29:35.440 --> 29:37.080
选项卡配级加到这儿来

29:37.600 --> 29:38.840
于是我可以在这两面

29:38.840 --> 29:40.080
这边进行切换

29:40.080 --> 29:42.640
而且呢加到选项卡里边的页面

29:42.640 --> 29:43.720
它是有缓存的

29:44.000 --> 29:46.040
比方说我在配级里边写的一些东西

29:47.400 --> 29:48.920
然后我们切到配级二

29:48.920 --> 29:49.920
我又写一些东西

29:51.200 --> 29:52.920
然后我又切回到配级一

29:52.920 --> 29:55.040
那么配级应该保留之前的状态

29:55.040 --> 29:56.040
不过目前没有保留

29:56.600 --> 29:58.560
当然这边可以去掉

29:59.640 --> 30:00.960
所以说我们现在实现这么一个效果

30:00.960 --> 30:02.280
这个效果其实非常简单

30:02.280 --> 30:03.680
看一下我们怎么去实现的

30:03.680 --> 30:05.000
我这里给大家看一下代码就行了

30:06.520 --> 30:07.680
并没有什么新知识

30:07.680 --> 30:09.280
首先我们这一页面有三个

30:10.720 --> 30:12.440
这个新一页面很简单

30:12.640 --> 30:14.560
这样式你们直接可以不用管

30:14.560 --> 30:16.560
我是我自己买了些样式

30:16.560 --> 30:18.800
我就用了一个工具库

30:18.800 --> 30:20.000
设置样式

30:20.440 --> 30:21.920
就是一个标题配级一

30:21.920 --> 30:22.920
你看看就是这里

30:23.800 --> 30:24.280
就这一块

30:24.960 --> 30:26.200
就是页面的主件

30:27.400 --> 30:28.200
配级一

30:28.200 --> 30:29.560
然后有个音铺这个方

30:29.560 --> 30:30.840
看到没设一些样式

30:30.840 --> 30:32.560
然后这里有两个按钮

30:32.560 --> 30:34.440
button一边是减

30:34.440 --> 30:35.320
这个是加

30:35.320 --> 30:36.840
然后这里一个spam元素

30:36.840 --> 30:38.080
显示一个数字

30:38.080 --> 30:39.680
就这就是一个页面

30:39.680 --> 30:40.760
配级嘛

30:40.840 --> 30:42.560
然后有自己的一个cult

30:42.560 --> 30:43.960
有自己的一个主件名字

30:43.960 --> 30:44.880
配级一

30:44.880 --> 30:45.840
配级二是一样的

30:45.840 --> 30:47.640
就是把这些名字改一下

30:47.640 --> 30:48.600
这个没问题吧

30:48.600 --> 30:49.760
有自己的cult

30:49.760 --> 30:50.680
配级三也是一样的

30:52.200 --> 30:53.600
在实际开发中的每个配级

30:53.600 --> 30:55.120
肯定有内容不一样

30:55.120 --> 30:56.560
不过我这里就为了简化

30:56.560 --> 30:57.640
来说明这个问题也OK了

30:58.920 --> 31:00.120
有三个页面

31:00.120 --> 31:00.960
然后呢

31:00.960 --> 31:02.400
闻着路由我怎么写的呢

31:02.400 --> 31:03.640
闻着路由是这样的写的

31:04.920 --> 31:06.000
我就做了个路由列表

31:06.000 --> 31:07.720
这个玩意没什么好说的

31:07.720 --> 31:09.160
导入三个主件

31:09.160 --> 31:09.880
页面主件

31:09.920 --> 31:11.600
我都没有我都没有首页

31:11.600 --> 31:12.400
我就是这三个页面

31:13.800 --> 31:14.880
然后呢路径是什么

31:14.880 --> 31:16.240
配级一

31:16.240 --> 31:18.600
主件给这个路由的写个名字

31:18.600 --> 31:19.880
就是命名路由

31:19.880 --> 31:20.480
命名路由的话

31:20.480 --> 31:22.280
我就使用主件名字吧

31:22.280 --> 31:23.320
当然你可以分开

31:23.320 --> 31:24.320
主件名字是主件名字

31:24.320 --> 31:26.200
路由名字是路由名字

31:26.200 --> 31:27.680
甚至显示的这个标题

31:27.680 --> 31:28.760
又是另外一个名字

31:28.760 --> 31:30.120
一个通过一个meta来分开

31:30.120 --> 31:30.600
对吧

31:30.600 --> 31:31.520
我这个难得分开了

31:31.520 --> 31:34.740
我就用一个吧

31:34.740 --> 31:36.380
就开发是很灵活的

31:36.380 --> 31:37.940
千万不要去使进硬背

31:37.940 --> 31:39.700
你使进硬背就完蛋了

31:39.740 --> 31:41.060
你只能应付

31:41.060 --> 31:42.740
非常极端的那种场景

31:42.740 --> 31:44.420
变化一点就受不了

31:44.420 --> 31:45.860
你要去理解他怎么回事

31:45.860 --> 31:46.940
怎么出来这个效果

31:48.140 --> 31:48.620
然后呢

31:48.620 --> 31:49.460
主件就是配级

31:50.820 --> 31:52.060
用那个主件的名字

31:52.060 --> 31:53.340
在做命名路由

31:53.340 --> 31:53.980
然后呢

31:53.980 --> 31:54.740
就这个配件

31:55.820 --> 31:56.820
这个路由嘛

31:56.820 --> 31:57.540
非常简单嘛

31:57.540 --> 31:58.300
对不对

31:58.300 --> 31:59.420
当我们访问这个地址的时候

31:59.420 --> 32:00.220
就选这个主件

32:00.220 --> 32:01.420
访问这个地址选这个主件

32:03.940 --> 32:05.580
配级不就选他吗

32:05.580 --> 32:06.020
配件

32:09.900 --> 32:10.220
好

32:10.220 --> 32:10.940
然后呢

32:10.940 --> 32:12.140
我这里

32:12.140 --> 32:13.500
设置了一个仓库

32:13.500 --> 32:15.220
为什么我要设置仓库呢

32:15.220 --> 32:17.020
因为这边的数据跟这边的数据

32:17.020 --> 32:18.300
肯定是有共享的地方

32:18.300 --> 32:18.660
对吧

32:18.660 --> 32:19.820
比方点这个加号的时候

32:19.820 --> 32:20.940
肯定是往仓库里边

32:22.260 --> 32:23.420
就是缓存的

32:23.420 --> 32:24.420
缓需要缓存的

32:24.420 --> 32:26.020
或者叫选项卡的页面

32:26.020 --> 32:27.980
要包含的页面是不是要加一下

32:27.980 --> 32:30.380
那点这个是不是要把仓库里面减一下

32:30.380 --> 32:31.740
所以我就可以使用了一个仓库

32:31.740 --> 32:32.940
是仓库极其简单啊

32:34.060 --> 32:35.820
开启的命名空间

32:35.820 --> 32:37.580
就一个输入来记录我目前

32:38.540 --> 32:39.340
选项卡的

32:39.980 --> 32:45.060
选项卡的页面

32:45.060 --> 32:45.780
有哪些页面

32:45.780 --> 32:47.300
我就记住一个页面名字就可以了

32:48.060 --> 32:49.140
也就是录有名字

32:49.980 --> 32:51.620
那么设置两个面推行

32:51.620 --> 32:52.820
都没有副作用操作

32:52.820 --> 32:53.980
都没有这个异部操作

32:54.540 --> 32:57.700
添加一个页面到这里边来

32:57.700 --> 32:58.900
你给我个名字

32:58.900 --> 33:00.580
我看一下有没有包含

33:00.580 --> 33:02.220
没有包含的话就加进来

33:02.220 --> 33:03.340
非常简单吧

33:03.340 --> 33:04.660
移除一个页面

33:04.660 --> 33:05.980
给我个页面名字

33:05.980 --> 33:07.420
看一下有没有包含

33:07.620 --> 33:08.940
有包含的话我就移除

33:09.700 --> 33:10.700
没了啊

33:10.700 --> 33:12.500
然后把它导出一个模块tabs

33:13.580 --> 33:14.100
简单吧

33:15.100 --> 33:16.940
于是我们仓库里面不就多了一个东西了

33:19.540 --> 33:20.540
我们看一下仓库里面

33:23.240 --> 33:26.400
仓库里面不就是个输出了吗

33:26.400 --> 33:28.560
到时候我非常要做的事情很简单

33:28.560 --> 33:29.800
我点这个加号的时候

33:31.200 --> 33:32.400
我就触发一个码推行

33:33.360 --> 33:34.600
然后我里面加一个配级一

33:35.600 --> 33:37.200
我点这个配级三加号的时候

33:38.000 --> 33:38.920
又触发一个码推行

33:39.920 --> 33:41.800
那么就添加一个配级三

33:41.800 --> 33:43.120
就非常简单

33:44.920 --> 33:46.600
那么现在我们看主见里面的写法

33:47.080 --> 33:48.680
首先媒体监视里面没什么好说的

33:49.200 --> 33:50.880
然后把这两个导入一栏

33:51.360 --> 33:52.880
这里边是一个主见库的事业写事

33:52.880 --> 33:53.480
不管他

33:54.440 --> 33:55.240
爱不主见里面

33:56.680 --> 33:57.400
我要做的事情

33:57.400 --> 33:59.000
首先是宣传这个

33:59.200 --> 34:01.000
这是我们的网站标题在这

34:01.360 --> 34:02.400
一般显示个logo

34:02.600 --> 34:04.000
那这里面我们显示的一些

34:04.800 --> 34:05.800
总菜单对吧

34:05.800 --> 34:07.320
所有的菜单都显示到这

34:08.320 --> 34:09.120
我怎么显示的

34:09.120 --> 34:10.760
我就循环生成li

34:11.760 --> 34:12.400
循环啥

34:12.400 --> 34:13.960
我就循环router options

34:13.960 --> 34:14.360
routes

34:14.360 --> 34:15.200
这个是啥玩意儿

34:15.800 --> 34:17.000
那你不知道这个啥玩意儿的话

34:17.000 --> 34:18.840
你就输出一下这次看一下

34:19.520 --> 34:20.800
把当前的主见输出看一下

34:20.800 --> 34:22.680
因为我们知道安装了路由之后

34:23.080 --> 34:25.120
每一个组件实例里面都会包含一个

34:27.480 --> 34:28.680
router和routes

34:29.080 --> 34:29.360
对吧

34:30.280 --> 34:31.080
就包含一个routes

34:31.480 --> 34:33.520
router什么表示当前匹配的信息

34:34.000 --> 34:35.920
router是不是路由的总信息

34:36.440 --> 34:37.920
那么我们路由的总信息里面

34:38.200 --> 34:39.640
还有一个东西叫做Options

34:40.160 --> 34:41.160
Options是什么意思

34:41.360 --> 34:42.560
表示我们的路由的配置

34:42.560 --> 34:43.760
这个Options就是这个东西

34:45.160 --> 34:46.120
Options就是这个玩意儿

34:47.200 --> 34:47.760
就这个玩意儿

34:48.600 --> 34:50.040
而这个玩意儿里面

34:50.320 --> 34:51.680
是不是可以拿到这个routes

34:52.200 --> 34:54.240
所有的路由

34:54.640 --> 34:54.960
对吧

34:54.960 --> 34:55.800
是不是可以拿到它

34:56.640 --> 34:57.120
你看吧

34:57.840 --> 34:58.400
没问题吧

34:58.400 --> 34:59.520
可以拿到它

35:00.680 --> 35:01.840
那么我们循环它

35:02.520 --> 35:03.400
也就是循环了它

35:03.400 --> 35:04.160
循环这个输出

35:04.640 --> 35:05.360
循环这个输出

35:05.360 --> 35:07.280
我们是不是可以拿到各种各样的信息

35:07.480 --> 35:08.400
它的路径

35:08.400 --> 35:09.480
它的路由名字

35:09.920 --> 35:11.520
路由名字是不是就主间的名字

35:11.920 --> 35:12.320
对不对

35:12.680 --> 35:14.760
路由名字

35:15.000 --> 35:16.000
那么我们要做的事情

35:16.000 --> 35:17.000
就是把路由的名

35:17.200 --> 35:19.160
因为我们这里显示的名字

35:19.160 --> 35:20.440
也跟路由的名字是一样的

35:20.720 --> 35:22.040
它实际开发中的可能不一样

35:22.040 --> 35:23.160
那么你要分开配置

35:24.680 --> 35:26.080
我这里宣传循环

35:26.080 --> 35:27.520
它循环所有的路由

35:28.680 --> 35:29.760
我这里没有写词

35:29.760 --> 35:30.960
我就循环宣传出来了

35:31.480 --> 35:32.760
循环它所有的路由

35:35.620 --> 35:36.940
拿到了就是每一个对象

35:37.820 --> 35:38.940
每一个路由对象

35:39.580 --> 35:40.380
有compromise

35:40.380 --> 35:40.980
有name

35:40.980 --> 35:42.220
有pass

35:43.100 --> 35:43.460
对吧

35:44.060 --> 35:45.300
然后生成一个rotolink

35:45.300 --> 35:46.260
就是个A元素

35:47.180 --> 35:48.700
该设置的一个激活样式

35:49.540 --> 35:50.580
这个用的是工具

35:50.580 --> 35:51.340
一个工具内

35:52.060 --> 35:53.140
然后点击过后

35:53.140 --> 35:54.180
把它跳到哪儿了

35:54.180 --> 35:55.260
跳到一个秘密路由

35:55.260 --> 35:56.940
秘密路由是不是就是在这一项的路由

35:56.940 --> 35:59.300
第一项就跳到这个路由

35:59.700 --> 36:00.060
对吧

36:00.260 --> 36:00.900
这个很简单吧

36:00.900 --> 36:01.860
就点击A元素

36:02.860 --> 36:03.740
关键是个button

36:03.980 --> 36:05.460
button我点击的时候就加

36:05.460 --> 36:06.340
加什么意思

36:06.500 --> 36:08.020
就是把它添加到仓库里边

36:08.060 --> 36:09.180
于是我写成一个函数

36:09.700 --> 36:11.300
你给我传一个路由的名字

36:11.820 --> 36:14.900
我要把哪个路由添加到我的选项卡里边

36:16.220 --> 36:18.140
那么这里我写的做法非常简单

36:18.500 --> 36:20.020
往仓库里面提交一个mrp型

36:20.340 --> 36:20.940
Agg配级

36:20.940 --> 36:21.620
刚才是不是做了

36:23.960 --> 36:25.520
把一面名字传进去

36:26.160 --> 36:27.520
这些东西其实我不用讲

36:27.520 --> 36:28.920
你们都应该能写出来

36:28.920 --> 36:30.080
只要能写出来的

36:31.520 --> 36:33.840
这是这边是不是就做完了

36:34.600 --> 36:35.760
这边做完了呀没啥呀

36:36.560 --> 36:37.880
然后在这边选项卡这里

36:38.400 --> 36:39.160
看选项卡这里

36:40.120 --> 36:41.640
选项卡这里的我就循环了什么

36:41.640 --> 36:44.000
循环的是仓库里边那个配级

36:44.640 --> 36:45.440
循环的是他

36:45.440 --> 36:46.320
配级names

36:46.320 --> 36:47.400
一号转下循环了

36:47.400 --> 36:49.800
循环StoreStateStapStatenames

36:50.560 --> 36:51.280
在实际开发当中

36:51.280 --> 36:53.400
我们往往是把它做成一个计算属性

36:53.400 --> 36:53.920
对不对

36:53.920 --> 36:54.640
之前做过的

36:55.920 --> 36:57.200
然后循环选了什么

36:57.200 --> 36:59.520
选了Rotelink

37:00.560 --> 37:01.520
循环这个li

37:01.520 --> 37:04.560
每循环一次就选了出一个Rotelink

37:05.960 --> 37:07.960
那么他的点击过挑到哪呢

37:08.920 --> 37:10.600
挑到这个配级names的地方

37:10.600 --> 37:11.960
就是数组里边

37:11.960 --> 37:13.000
比较是数组里边

37:21.660 --> 37:22.660
你看是配级二

37:22.660 --> 37:23.980
那么就挑到配级二

37:24.780 --> 37:25.900
点击过就挑到配级

37:25.900 --> 37:27.260
那八成减的时候

37:27.260 --> 37:29.500
我又用另外一个函数来处理

37:29.500 --> 37:32.100
这个函数就是提交一个remove配级

37:32.100 --> 37:33.780
把配级names传进去

37:33.780 --> 37:35.500
就是控制仓库

37:35.500 --> 37:36.820
就写完了

37:36.820 --> 37:38.060
这一颗东西就写完了

37:38.060 --> 37:39.500
那么现在的问题

37:39.500 --> 37:40.740
就剩一个问题了

37:40.740 --> 37:41.740
就是没有缓存

37:42.700 --> 37:46.870
来吧

37:46.870 --> 37:48.550
好我们在这边切换

37:48.550 --> 37:50.110
是没有缓存的

37:50.110 --> 37:51.310
也就是这边切在切去

37:51.310 --> 37:52.470
它还是用的

37:52.470 --> 37:53.790
它还是用销毁

37:53.790 --> 37:55.030
新建的那种方式

37:55.030 --> 37:57.630
所以说这些状态都不会得到保留

37:57.630 --> 37:58.830
都不会得到保留

37:58.830 --> 37:59.670
那么问题又来了

37:59.670 --> 38:02.470
真实的使用过程当中

38:02.470 --> 38:04.310
可能我把它加到选项卡的目的

38:04.310 --> 38:06.190
就是这些东西我经常用

38:06.190 --> 38:07.550
要来回的切

38:07.550 --> 38:09.270
那我就非常不方便

38:09.270 --> 38:10.870
如果说你不处理这个问题的话

38:10.870 --> 38:12.470
它只能去开多个选

38:12.470 --> 38:14.230
以页面来处理这个问题

38:14.270 --> 38:15.110
就很麻烦

38:15.110 --> 38:16.550
所以说我们要做的事情

38:16.550 --> 38:18.350
就是划缓存起来

38:18.350 --> 38:22.870
缓存的做法非常简单

38:22.870 --> 38:23.870
要缓存啥

38:23.870 --> 38:25.350
要缓存的是这个区域

38:25.350 --> 38:25.830
对吧

38:25.830 --> 38:27.630
是不是这个页面组件

38:27.630 --> 38:30.230
于是我来这里套一个

38:30.230 --> 38:32.800
Keeper来

38:32.800 --> 38:34.440
就完了

38:34.440 --> 38:35.480
我们套一个

38:35.480 --> 38:36.760
那么也就说这个玩意

38:36.760 --> 38:38.960
选人出来的组件会被缓存

38:38.960 --> 38:40.880
顺便说一下

38:40.880 --> 38:41.720
按理说的话

38:41.720 --> 38:43.800
它应该是缓存这个组件的实力

38:43.800 --> 38:44.800
对吧

38:44.800 --> 38:47.120
缓存的不是我们这里边的配级组件

38:47.160 --> 38:48.240
实际上不是

38:48.240 --> 38:51.040
因为这个玩意它是一个函数式组件

38:51.040 --> 38:52.480
我们之前讲过的方式

38:52.480 --> 38:53.800
它是个函数式组件

38:53.800 --> 38:55.560
函数式组件它只有一个作用

38:55.560 --> 38:57.840
就负责生成蓄力动物

38:57.840 --> 38:58.840
它没有别的作用了

38:58.840 --> 38:59.600
它没有状态的

38:59.600 --> 39:00.800
它也不生成实力

39:00.800 --> 39:03.720
所以说它实际上是有个穿透的效果

39:03.720 --> 39:05.640
它缓存的根本就不是它

39:05.640 --> 39:09.560
因为它是函数组件是一个穿透的效果

39:09.560 --> 39:11.360
就是它本身没有实力

39:11.360 --> 39:13.120
它就是帮你生成蓄力动物的

39:13.120 --> 39:14.520
所以说它帮你生成的蓄力动物

39:14.520 --> 39:15.920
是怎么生成的呢

39:15.920 --> 39:16.920
就根据各种情况

39:16.960 --> 39:19.600
根据的路由规则来决定

39:19.600 --> 39:22.120
到现在哪一个组件元素

39:22.120 --> 39:23.880
它把个组件元素放到这个位置

39:23.880 --> 39:25.240
所以说它缓存的实际上是

39:25.240 --> 39:27.120
我们这个配级配级而配一三

39:27.120 --> 39:28.200
你还这意思吧

39:28.200 --> 39:28.520
好了

39:28.520 --> 39:29.600
如果说你直接这样子写的话

39:29.600 --> 39:30.600
有个问题

39:30.600 --> 39:33.480
它会缓存所有的页面表立开始的时候

39:33.480 --> 39:34.680
这个时候它也会缓存

39:34.680 --> 39:35.760
那我们的页面很多的话

39:35.760 --> 39:36.640
它其实没有必要

39:36.640 --> 39:38.280
我们也不希望它缓存

39:38.280 --> 39:40.200
你看现在全部缓存起来

39:40.200 --> 39:41.520
我们只希望它缓存什么

39:41.520 --> 39:43.400
缓存这个选项卡里边的东西

39:43.400 --> 39:44.560
那怎么办呢

39:44.560 --> 39:46.200
选项卡从哪里读出来的

39:46.240 --> 39:48.400
是从仓库里边读出来的

39:48.400 --> 39:50.200
也就是说我这里

39:50.200 --> 39:52.200
让它一个include的属性

39:52.200 --> 39:53.720
保持跟仓库一致就完事了

39:53.720 --> 39:55.640
对不对

39:55.640 --> 39:57.320
我们只包含哪些东西

39:57.320 --> 39:59.000
包含仓库里边的就是

39:59.000 --> 40:05.080
Storn, your stats, your tabs, page names

40:05.080 --> 40:06.560
什么只需要缓存

40:06.560 --> 40:07.880
这里边的东西就行了

40:07.880 --> 40:10.160
那一开始没有它就不缓存

40:10.160 --> 40:14.140
一开始没有它就不缓存

40:14.140 --> 40:14.940
切回来

40:14.940 --> 40:16.620
所以都没有不缓存

40:16.620 --> 40:17.900
但是如果说我要缓存

40:17.940 --> 40:19.500
配级它加到选项卡了

40:19.500 --> 40:20.780
配级二加到选项卡了

40:20.780 --> 40:23.220
然后我们看一下现在这两个页面就会缓存起来

40:26.440 --> 40:27.480
你看是不是有缓存了

40:29.160 --> 40:29.680
看没

40:30.080 --> 40:31.320
配级三就没有缓存

40:33.320 --> 40:34.320
配级三就没有

40:34.880 --> 40:37.240
比如说有一天配级五不希望缓存了

40:37.240 --> 40:38.200
我不要一个选项卡了

40:38.200 --> 40:38.800
我要剪

40:39.200 --> 40:39.960
踢出去

40:39.960 --> 40:42.000
然后到配级二里边是不是就没了

40:42.360 --> 40:44.640
就这么就这么来做的

40:44.640 --> 40:45.920
这是在咱们开发中

40:45.920 --> 40:48.280
特别是后台开发中一个比较常见的一个效果

40:51.480 --> 40:51.800
好

40:51.800 --> 40:53.600
最后说一下的原理

40:55.360 --> 40:56.680
他具体怎么实现的呢

40:56.680 --> 40:58.000
其实他代码并不多

40:58.000 --> 40:58.960
就100多行

40:58.960 --> 41:01.880
只不过他里面用到了一些工具函数

41:03.950 --> 41:06.470
他其实就是在内部维护了两个东西

41:06.470 --> 41:07.350
一个是catch

41:07.830 --> 41:08.550
是一个对象

41:09.390 --> 41:11.510
没有一个原型链声

41:11.510 --> 41:12.670
只有一个NOW的对象

41:13.870 --> 41:15.670
另外一个是一个数组叫kiss

41:16.590 --> 41:17.910
这两个分不来做什么事情呢

41:17.910 --> 41:18.710
首先是个数组

41:19.670 --> 41:23.910
他做的事情就是记录目前缓存了哪些组件的kiss

41:25.630 --> 41:27.270
每一个组件他都会生成一个kiss

41:27.950 --> 41:29.830
那么这个kiss你可以指定

41:29.830 --> 41:30.870
比方说我们刚才

