WEBVTT

00:00.050 --> 00:05.050
来讲一讲路由的切换动画

00:06.050 --> 00:10.050
其实我们之前讲无忧的时候讲过

00:10.050 --> 00:13.050
关于动画的使用

00:13.050 --> 00:18.050
如何应用过度效果到无忧的页面里边去

00:18.050 --> 00:23.050
那么我们的路由其实它也是主件的切换

00:23.050 --> 00:25.050
比方说我们从Home切换到About

00:25.050 --> 00:27.050
什么意思呢

00:27.050 --> 00:30.050
这个Home主件销毁掉

00:30.050 --> 00:33.050
然后About主件生成

00:33.050 --> 00:34.050
不就是在做这个事吗

00:34.050 --> 00:37.050
对吧 我们在哪呢 在这

00:37.050 --> 00:42.050
这个位置不就是来替换掉我们匹配道的主件

00:42.050 --> 00:44.050
匹配道的主件在哪呢 就在这

00:44.050 --> 00:47.050
About Home user

00:47.050 --> 00:51.050
其实在这个位置就会发生主件的销毁

00:51.050 --> 00:54.050
以及主件的创建

00:54.050 --> 00:56.050
而我们之前学过的路由里边

00:56.050 --> 01:00.050
如何来实现一个过度效果呢

01:00.050 --> 01:02.050
就非常简单嘛

01:02.050 --> 01:05.050
就是在主件销毁和主件创建的地方

01:05.050 --> 01:08.050
给它包一个传辑性

01:08.050 --> 01:12.050
所以周杰克 其实没有什么新知识

01:12.050 --> 01:15.050
就我们过去学过的知识就完全能够搞定

01:15.050 --> 01:19.050
只不过我不讲 可能同学们想不到

01:19.050 --> 01:21.050
包一个传辑性不就完了吗

01:21.050 --> 01:24.050
那么周里边的主件销毁和主件切换的时候

01:24.050 --> 01:27.050
不就会运用那个央视吗

01:27.050 --> 01:29.050
那么央视给它取一个名字

01:29.050 --> 01:31.050
随便来一个吧

01:31.050 --> 01:33.050
比方说我们要做一个动画

01:33.050 --> 01:37.050
切换主件的时候 就切换这一块主件的时候

01:37.050 --> 01:41.050
销毁的主件往左边退出

01:41.050 --> 01:46.050
然后新生成的主件往右边进来

01:46.050 --> 01:49.050
那么我们都是一个往左边滑动的效果

01:49.050 --> 01:52.050
这样子我们给它取个名字叫Left

01:52.050 --> 01:54.050
表示往左边滑动

01:54.050 --> 01:57.050
那行了 我们接下来就给它写一些内样式

01:57.050 --> 01:58.050
就完事了

01:58.050 --> 02:02.620
然后给它写一个Style Sculpt

02:05.620 --> 02:07.620
那么什么内样式呢

02:07.620 --> 02:09.620
首先销毁的主件的内样式

02:09.620 --> 02:11.620
这里如果说你忘记了

02:11.620 --> 02:13.620
比方说袁老师 就这里就忘记了

02:13.620 --> 02:14.620
其实我真忘了

02:14.620 --> 02:17.620
然后你就查一查五月的官网

02:17.620 --> 02:19.620
在教程里面

02:20.620 --> 02:24.620
然后找到列表过渡

02:24.620 --> 02:27.620
你看一下官网这里面写的内样式

02:27.620 --> 02:29.620
我们知道 原来在这

02:29.620 --> 02:31.620
首先离开的时候

02:31.620 --> 02:34.620
它会应用全程会应用这个样式

02:34.620 --> 02:37.620
那行了 我就把这个样式写上去

02:38.620 --> 02:39.620
你离开的时候

02:39.620 --> 02:40.620
应用的是什么呢

02:40.620 --> 02:43.620
这里写上T1是什么 T1是Left

02:44.620 --> 02:46.620
它就会应用这个内样式

02:46.620 --> 02:47.620
那么这个内样式

02:47.620 --> 02:49.620
我觉得这个这里面的主件

02:49.620 --> 02:51.620
往左边消失

02:51.620 --> 02:52.620
那怎么消失呢

02:52.620 --> 02:54.620
首先给它加上一个Transition

02:54.620 --> 02:57.620
表示一个过渡效果0.5秒吧

02:57.620 --> 03:01.620
然后再加上一个

03:03.620 --> 03:06.620
加上一个Opacity0

03:06.620 --> 03:08.620
慢慢消失

03:08.620 --> 03:09.620
然后再往左边滑动

03:09.620 --> 03:12.620
然后加上一个Transform

03:12.620 --> 03:14.620
Transnet

03:14.620 --> 03:16.620
X

03:16.620 --> 03:19.620
附的50%吧

03:19.620 --> 03:21.620
行了 我们再来切换看一下

03:21.620 --> 03:23.620
就这么简单

03:24.620 --> 03:26.620
你看是往左边滑了

03:26.620 --> 03:28.620
看是跑的时候

03:29.620 --> 03:31.620
右边的东西就是

03:31.620 --> 03:33.620
消失的主件我们搞定了

03:33.620 --> 03:34.620
往左边飞出了

03:34.620 --> 03:36.620
那么新生成的主件

03:36.620 --> 03:39.620
新生成的主件应该往右边滑入

03:39.620 --> 03:40.620
对不对

03:40.620 --> 03:42.620
所以说对新生成的主件

03:42.620 --> 03:43.620
我们来查一下内样式

03:43.620 --> 03:45.620
就是Enter

03:45.620 --> 03:47.620
最开始的时候

03:47.620 --> 03:49.620
把新生的主件的动物

03:49.620 --> 03:50.620
插入到页面的时候

03:50.620 --> 03:52.620
插入到页面之前

03:52.620 --> 03:55.620
那么我先让它在往左边靠一点

03:55.620 --> 03:57.620
就是Left

03:57.620 --> 03:58.620
Enter

03:58.620 --> 03:59.620
就是插入这个

03:59.620 --> 04:01.620
这个我好像不多解释了

04:01.620 --> 04:02.620
你只要

04:02.620 --> 04:04.620
就是你可以忘记这些内样式

04:04.620 --> 04:06.620
但是它基本原理不能忘

04:06.620 --> 04:08.620
就是这个动物元素

04:08.620 --> 04:10.620
还没有插入到页面的时候

04:10.620 --> 04:12.620
我先让它在往左边去一点

04:12.620 --> 04:14.620
那么就是Transform

04:14.620 --> 04:17.620
Transnet X50

04:17.620 --> 04:18.620
那么这样子

04:18.620 --> 04:20.620
这个主件在最开始的时候

04:20.620 --> 04:22.620
它本来应该在中间的对吧

04:26.620 --> 04:28.620
它是不是本来应该在中间的

04:28.620 --> 04:30.620
然后往左边跑50%

04:30.620 --> 04:32.620
就这么个意思

04:35.620 --> 04:38.620
然后等它真正的

04:38.620 --> 04:40.620
加入进来之后

04:40.620 --> 04:42.620
动物元素插入到页面之后

04:42.620 --> 04:44.620
我再把它的

04:44.620 --> 04:48.180
因为这个内样式就消失了

04:48.180 --> 04:50.180
动物插入到一个页面之后

04:50.180 --> 04:52.180
这个内样式就消失了

04:52.180 --> 04:53.180
消失了之后

04:53.180 --> 04:55.180
我们这个它应用

04:55.180 --> 04:57.180
Transition

04:57.180 --> 04:59.180
0.5秒

04:59.180 --> 05:01.180
然后回到

05:01.180 --> 05:03.180
正常的状态

05:03.180 --> 05:04.180
就完事了

05:04.180 --> 05:05.180
完事了

05:05.180 --> 05:07.180
好过来看一下

05:07.180 --> 05:08.180
Home

05:08.180 --> 05:09.180
你看

05:09.180 --> 05:10.180
是不是这样子

05:10.180 --> 05:11.180
就划动过来了

05:11.180 --> 05:12.180
其实本质上

05:12.180 --> 05:14.180
并没有什么复杂的

05:14.180 --> 05:16.180
就是利用我们过渡效果里边

05:16.180 --> 05:19.180
监控主件的

05:19.180 --> 05:21.180
移除和新增

05:21.180 --> 05:23.180
移除的呢

05:23.180 --> 05:24.180
应用一些样式

05:24.180 --> 05:25.180
新增的呢

05:25.180 --> 05:26.180
又应用一些样式

05:26.180 --> 05:28.180
就把这个事情搞定了

05:28.180 --> 05:29.180
一个揣C信

05:29.180 --> 05:31.180
套一个Rot5U搞定

05:31.180 --> 05:32.180
那么现在呢

05:32.180 --> 05:33.180
还有一些小的细节

05:33.180 --> 05:35.180
也细节处理起来

05:35.180 --> 05:36.180
就不是那么容易了

05:36.180 --> 05:38.180
就跟我们软件里边

05:38.180 --> 05:40.180
8020元是一样的

05:40.180 --> 05:41.180
80%的功能呢

05:41.180 --> 05:42.180
我们20%的代码

05:42.180 --> 05:43.180
就可以解决

05:43.180 --> 05:45.180
那么剩下的20%的功能

05:45.180 --> 05:46.180
就比较麻烦了

05:46.180 --> 05:48.180
我们可能要写更多的代码

05:48.180 --> 05:49.180
然后比方说这里呢

05:49.180 --> 05:50.180
切换的时候呢

05:50.180 --> 05:51.180
有一个小问题啊

05:51.180 --> 05:53.180
它有点跳动

05:53.180 --> 05:54.180
那么它为什么会有跳动呢

05:54.180 --> 05:56.180
我们把时间改长一点

05:56.180 --> 05:58.180
比如说15秒钟

05:58.180 --> 06:00.180
因为在这15秒以内

06:00.180 --> 06:01.180
我们来切换一下

06:01.180 --> 06:02.180
你看

06:02.180 --> 06:04.180
是不是两个组件是共存的

06:04.180 --> 06:05.180
这个组件还没有消失

06:05.180 --> 06:07.180
这个组件呢

06:07.180 --> 06:08.180
还没有正在进入

06:08.180 --> 06:09.180
那么是不是两个组件共存

06:09.180 --> 06:11.180
好 等它15秒之后

06:11.180 --> 06:12.180
滑动完了之后

06:12.180 --> 06:14.180
那么这个组件消失

06:14.180 --> 06:15.180
消失了过后

06:15.180 --> 06:17.180
那么它自然就跑上去了

06:17.180 --> 06:18.180
根本原因呢

06:18.180 --> 06:19.180
是因为这两个元素呢

06:19.180 --> 06:22.180
都是常规流的快和

06:22.180 --> 06:23.180
所以他们两个元素

06:23.180 --> 06:24.180
共存的时候呢

06:24.180 --> 06:26.180
是上下排列的

06:26.180 --> 06:27.180
那么这样子呢

06:27.180 --> 06:28.180
直到原因之后

06:28.180 --> 06:29.180
那就很简单的

06:29.180 --> 06:31.180
你只要把这个玩意儿

06:31.180 --> 06:33.180
比方推出这个玩意儿

06:33.180 --> 06:34.180
变成一个绝对定位

06:34.180 --> 06:36.180
变成绝对定位之后

06:36.180 --> 06:37.180
那么它

06:37.180 --> 06:38.180
是不是不影响它的位置了

06:38.180 --> 06:39.180
对吧

06:39.180 --> 06:41.180
它的位置跟它就没有关系了

06:41.180 --> 06:42.180
那么我们现在呢

06:42.180 --> 06:43.180
把这个离开的组件

06:43.180 --> 06:44.180
变成一个绝对定位

06:46.180 --> 06:49.820
好 然后设置

06:49.820 --> 06:50.820
因为绝对定位之后

06:50.820 --> 06:51.820
它的宽度变成自动的了

06:51.820 --> 06:52.820
我要保持它的宽度

06:52.820 --> 06:54.820
仍然是充满整个包含块的

06:54.820 --> 06:56.820
所以要改宽度来设为100%

06:57.820 --> 06:58.820
好 设一下

06:59.820 --> 07:00.820
这样子一来呢

07:00.820 --> 07:01.820
我们来看一下

07:02.820 --> 07:03.820
现在呢

07:04.820 --> 07:05.820
倒是没有影响它的位置

07:05.820 --> 07:07.820
那它为什么跑到右边去了

07:07.820 --> 07:09.820
这个我们再设置一个NAP的理由吧

07:12.320 --> 07:13.320
好 再来 刷新

07:15.320 --> 07:16.320
好 没问题了

07:17.320 --> 07:18.320
对吧

07:18.320 --> 07:19.320
就搞定了

07:19.320 --> 07:20.320
这样子就划中过来了

07:20.320 --> 07:22.320
我们把时间再调回去

07:22.320 --> 07:23.320
0.5秒

07:25.320 --> 07:26.320
0.5秒

07:28.320 --> 07:29.320
好 再试一下 刷新

07:31.320 --> 07:32.320
Home

07:33.320 --> 07:35.320
是不是就有这个效果了

07:35.320 --> 07:37.320
好 有这个效果之后

07:37.320 --> 07:38.320
还有一些事啊

07:38.320 --> 07:39.320
我们得考虑进去

07:40.320 --> 07:42.320
比方说我们这里呢

07:42.320 --> 07:44.320
是往左边滑动的

07:44.320 --> 07:45.320
那么如果说

07:45.320 --> 07:47.320
我要往右边滑动怎么办呢

07:47.320 --> 07:49.320
好 我们来再写一个呗

07:49.320 --> 07:50.320
比方说我们如果说

07:50.320 --> 07:51.320
要往右边滑动

07:51.320 --> 07:53.320
那么是不是很简单啊

07:53.320 --> 07:55.320
我们把这个代码复制一下

07:55.320 --> 07:56.320
然后稍微修修改改

07:56.320 --> 07:57.320
也就完事了

07:58.320 --> 07:59.320
Rise Live

07:59.320 --> 08:00.320
那么就是往右边跑了

08:00.320 --> 08:01.320
就是50%

08:01.320 --> 08:02.320
其他都一样的

08:03.320 --> 08:04.320
然后呢

08:04.320 --> 08:06.320
这个NAP是-50%

08:08.320 --> 08:09.320
就没了

08:09.320 --> 08:10.320
这是BattleRise

08:11.320 --> 08:13.320
如果说你往右边滑动

08:13.320 --> 08:14.320
就这样就完事了

08:14.320 --> 08:15.320
好 再看一下啊

08:16.320 --> 08:17.320
右边滑动

08:17.320 --> 08:18.320
就完事了

08:18.320 --> 08:19.320
好 那么接下来呢

08:19.320 --> 08:21.320
如果说我又这么一个需求

08:21.320 --> 08:22.320
听好啊

08:22.320 --> 08:23.320
看同学们能不能

08:23.320 --> 08:25.320
能不能发挥自己的想象力

08:25.320 --> 08:26.320
把这个事情搞定

08:26.320 --> 08:28.320
我有这么一个需求

08:28.320 --> 08:29.320
就是呢

08:29.320 --> 08:31.320
我这里不是一个导航吗

08:31.320 --> 08:32.320
它的顺序是

08:32.320 --> 08:34.320
Home About the User

08:34.320 --> 08:36.320
首页关于以及

08:37.320 --> 08:38.320
用户中心

08:39.320 --> 08:40.320
那么如果说

08:40.320 --> 08:41.320
我要往左边

08:41.320 --> 08:43.320
还是往右边滑动

08:43.320 --> 08:46.320
取决于这个导航的位置

08:47.320 --> 08:48.320
那怎么办

08:49.320 --> 08:50.320
比方说

08:50.320 --> 08:51.320
我要从这个Home

08:51.320 --> 08:53.320
到About的时候

08:53.320 --> 08:55.320
那么是往左边去的

08:55.320 --> 08:56.320
这个时候呢

08:56.320 --> 08:57.320
是往左边跑的

08:58.320 --> 08:59.320
那么现在我

08:59.320 --> 09:00.320
是往右边跑的吧

09:00.320 --> 09:01.320
那么从About

09:01.320 --> 09:02.320
回到Home

09:02.320 --> 09:04.320
又是往右边跑的

09:04.320 --> 09:05.320
到底是往左边跑

09:05.320 --> 09:06.320
还是往右边跑

09:06.320 --> 09:07.320
那是不一定的

09:07.320 --> 09:09.320
也就是在换句话说

09:09.320 --> 09:11.320
就这里的内明啊

09:11.320 --> 09:12.320
它是不一定的

09:12.320 --> 09:13.320
它是动态的

09:14.320 --> 09:15.320
懂了意思吗

09:15.320 --> 09:17.320
我如何来实现这么一个点

09:17.320 --> 09:19.320
同学们可以暂停视频

09:19.320 --> 09:20.320
好好想一想

09:20.320 --> 09:21.320
都是学过的知识啊

09:21.320 --> 09:23.320
那如何来实现

09:24.320 --> 09:25.320
那如何实现呢

09:25.320 --> 09:27.320
那我这里给大家一个思路啊

09:27.320 --> 09:29.320
其实本质上呢

09:29.320 --> 09:30.320
我们这里肯定是动态的

09:30.320 --> 09:31.320
这毫无疑问的

09:31.320 --> 09:32.320
你不能写死

09:32.320 --> 09:34.320
然后这里要写动态的呢

09:34.320 --> 09:35.320
那么你这个数据

09:36.320 --> 09:38.320
应该是响应式的数据

09:38.320 --> 09:39.320
所以这个数据呢

09:39.320 --> 09:40.320
肯定毫无疑问的

09:40.320 --> 09:42.320
来自于一个响应式的东西

09:43.320 --> 09:44.320
那么关键是个数据

09:44.320 --> 09:46.320
谁能改变它

09:46.320 --> 09:47.320
谁又权力改变它

09:47.320 --> 09:49.320
是这个组建有权力改变它吗

09:51.320 --> 09:52.320
并不是

09:52.320 --> 09:54.320
谁又能力改变这个数据呢

09:54.320 --> 09:57.320
应该是路由

09:57.320 --> 09:58.320
你想想这个道理是不是

09:59.320 --> 10:00.320
比方说我们这里呢

10:00.320 --> 10:01.320
访问这个Home

10:01.320 --> 10:03.320
一开始在Home

10:03.320 --> 10:05.320
一开始在首页

10:05.320 --> 10:06.320
然后呢

10:06.320 --> 10:08.320
我们现在的到Erbaut

10:09.320 --> 10:10.320
比方说我们

10:10.320 --> 10:12.320
路由切换到Erbaut的时候

10:12.320 --> 10:14.320
那么应该是从Home

10:14.320 --> 10:15.320
滑到Erbaut

10:15.320 --> 10:16.320
对吧

10:16.320 --> 10:17.320
切换到Erbaut的时候

10:17.320 --> 10:18.320
从Home滑到Erbaut

10:18.320 --> 10:20.320
应该是往左边滑动

10:21.320 --> 10:23.320
然后从Erbaut滑到Url的时候呢

10:23.320 --> 10:25.320
路由切换到Url的时候

10:25.320 --> 10:27.320
那么应该是

10:27.320 --> 10:28.320
也是往左边滑动

10:28.320 --> 10:30.320
反之从Url切换到Erbaut

10:30.320 --> 10:32.320
从Url切换到Home

10:32.320 --> 10:33.320
那么应该往右边滑动

10:33.320 --> 10:36.320
所以说到底应该是向左

10:36.320 --> 10:37.320
还是向右

10:38.320 --> 10:41.320
是由路由的变化决定的

10:41.320 --> 10:42.320
我来画一个图

10:50.980 --> 10:52.980
这个玩意又出问题了

10:52.980 --> 10:54.980
这个玩意老出问题了

10:58.670 --> 11:00.670
现在我们来看画一个图

11:00.670 --> 11:02.670
比方说这个玩意是路由

11:02.670 --> 11:04.670
路由决定了什么呢

11:04.670 --> 11:07.670
决定了到底应该是向左

11:07.670 --> 11:09.670
向左边滑动

11:09.670 --> 11:11.670
还是说应该是向右边滑动

11:11.670 --> 11:13.670
到底应该是向左还是向右

11:13.670 --> 11:15.670
是由谁决定的

11:15.670 --> 11:16.670
是由路由来决定的

11:16.670 --> 11:20.180
比方说这里是Rotor

11:20.180 --> 11:23.180
他来决定到底应该向左还是向右

11:23.180 --> 11:25.180
那么向左到底应该是向左

11:25.180 --> 11:27.180
还是向右这个数据呢

11:27.180 --> 11:29.180
又会影响到我们

11:29.180 --> 11:31.180
APP这个组件里边的

11:31.180 --> 11:33.180
这里是APP组件

11:36.000 --> 11:37.000
APP.vue

11:37.000 --> 11:39.000
刚才我们写的这个组件就是APP.vue的组件

11:39.000 --> 11:40.000
跟组件

11:40.000 --> 11:41.000
这个数据呢

11:41.000 --> 11:45.000
它又会导致重新渲染APP.vue

11:45.000 --> 11:47.000
那么渲染它的时候呢

11:47.000 --> 11:50.000
它就会确定我们刚才看到的这个地方

11:50.000 --> 11:52.000
就会确定这个位置的值

11:52.000 --> 11:54.000
所以说再看这个图

11:54.000 --> 11:57.000
这个位置的值实际上来自于这

11:58.000 --> 12:01.000
而这里的值变化它会影响到这

12:01.000 --> 12:03.000
而这里的值又由路由来决定

12:03.000 --> 12:05.000
那么你可以琢磨一下这个玩意

12:05.000 --> 12:07.000
这个值是啥玩意

12:08.000 --> 12:10.000
路由可以影响这个数据

12:10.000 --> 12:13.000
这个数据呢又会影响这个组件

12:13.000 --> 12:17.000
所以明显是一个跨越组件的通信

12:17.000 --> 12:18.000
对吧

12:18.000 --> 12:20.000
那么这里一块呢就是

12:20.000 --> 12:22.000
应该是一个作为一个仓库

12:22.000 --> 12:24.000
那么你可以使用vx

12:24.000 --> 12:25.000
也可以使用呢

12:25.000 --> 12:27.000
你自己订一个就是用那个

12:27.000 --> 12:29.000
仓储模式

12:29.000 --> 12:31.000
我们之前写过的一个简单的仓库模式

12:31.000 --> 12:32.000
也可以搬到

12:32.000 --> 12:33.000
反正呢就是这个数据

12:33.000 --> 12:35.000
这个数据得是想用式的

12:35.000 --> 12:37.000
它改变它

12:37.000 --> 12:38.000
改变它了过后呢

12:38.000 --> 12:40.000
它就会影响这个组件的渲染

12:40.000 --> 12:42.000
那么比方说我用vx来做吧

12:42.000 --> 12:44.000
我们来试一下

12:44.000 --> 12:46.000
那么这里呢我需要安装一个vx

12:46.000 --> 12:48.000
停止

12:48.000 --> 12:49.000
安装

12:49.000 --> 12:50.000
vx

12:50.000 --> 12:53.440
然后呢在

12:54.440 --> 12:57.750
写错了

12:57.750 --> 12:58.750
mi

12:58.750 --> 13:00.750
vx

13:00.750 --> 13:04.220
原来

13:04.220 --> 13:08.300
找不到了吗

13:08.300 --> 13:10.300
vx我都有点忘了

13:10.300 --> 13:11.300
这个

13:13.300 --> 13:14.300
万事

13:14.300 --> 13:15.300
也预示不绝

13:15.300 --> 13:16.300
查观望

13:16.300 --> 13:17.300
然后你看

13:17.300 --> 13:19.300
原来是连那个保铭都忘了

13:19.300 --> 13:22.300
不真无所谓的

13:22.300 --> 13:23.300
都要的呀

13:23.300 --> 13:25.300
是这个npm ivx

13:25.300 --> 13:27.300
我看一下到底是什么情况

13:27.300 --> 13:29.300
倒是安装失败

13:32.300 --> 13:34.300
应该是版本

13:34.300 --> 13:36.300
应该是版本

13:43.190 --> 13:45.190
我安装一个旧版本吧

13:45.190 --> 13:51.830
安装一个vx的旧版本

13:51.830 --> 13:53.830
因为呢这个项目呢

13:53.830 --> 13:55.830
我是用的之前的拍片点节省

13:55.830 --> 13:57.830
它的vx的版本呢

13:57.830 --> 13:59.830
可能在二德级的版本呢

13:59.830 --> 14:01.830
可能有点旧了啊

14:01.830 --> 14:02.830
所以说vx呢

14:02.830 --> 14:04.830
它不支持这个版本

14:04.830 --> 14:06.830
那么我这里呢去查询一下吧

14:06.830 --> 14:09.830
查询一下npm vx

14:09.830 --> 14:11.830
看它的版本用了哪些

14:11.830 --> 14:13.830
可能目前跟向哪个版本呢

14:13.830 --> 14:15.830
我发现目前已经到4点版本了

14:15.830 --> 14:17.830
我们之前用的是3-2级的版本

14:17.830 --> 14:18.830
好行呢

14:18.830 --> 14:20.830
那我就安装单独安装一下啊

14:20.830 --> 14:22.830
vx的3个版本

14:22.830 --> 14:27.420
好看一下拍片点节省啊

14:27.420 --> 14:29.420
那么这样子的安装成功

14:30.420 --> 14:31.420
3.9.2

14:31.420 --> 14:32.420
那行了

14:32.420 --> 14:33.420
就用这个版本吧

14:33.420 --> 14:34.420
好

14:34.420 --> 14:36.420
那么vx安装成功了之后呢

14:36.420 --> 14:37.420
我们在我们的工程里边

14:37.420 --> 14:39.420
去新建一个文件夹

14:39.420 --> 14:41.420
叫做stove

14:42.420 --> 14:44.420
其实这里边没写多少东西啊

14:45.420 --> 14:47.420
然后这里边我们就写一些基本代码啊

14:47.420 --> 14:49.420
然后导入这个vx

14:52.420 --> 14:54.420
然后我们这边

14:54.420 --> 14:56.420
export default

14:56.420 --> 14:57.420
直接导出

14:59.420 --> 15:03.570
六一个vx

15:03.570 --> 15:05.570
然后这里写上一个配置

15:05.570 --> 15:07.570
配置里边我们写上一个module

15:08.570 --> 15:10.570
就是我们要使用模块的方式

15:10.570 --> 15:11.570
对吧

15:11.570 --> 15:12.570
然后这里去新建一个模块

15:12.570 --> 15:14.570
这个模块呢就做一件事

15:14.570 --> 15:17.570
确定那个路由的方向

15:17.570 --> 15:19.570
确定动画的方向

15:19.570 --> 15:22.570
我们把它叫做switch

15:24.570 --> 15:26.570
switch transition

15:28.570 --> 15:30.570
表示切换的时候

15:30.570 --> 15:33.570
它的一些相关的数据

15:34.570 --> 15:36.570
那么这里边我们data里边

15:36.570 --> 15:37.570
stats

15:37.570 --> 15:39.570
里边只需要写一个数据就行了

15:39.570 --> 15:40.570
就direction

15:41.570 --> 15:42.570
就是方向

15:42.570 --> 15:43.570
默认的方向

15:43.570 --> 15:44.570
我们该写个默认的方向吧

15:44.570 --> 15:46.570
默认的方向是left

15:46.570 --> 15:47.570
向左边切换

15:47.570 --> 15:49.570
随便写个默认方向

15:49.570 --> 15:51.570
然后给它写一个multation

15:56.900 --> 15:58.900
我们可以改变方向

15:58.900 --> 16:02.860
change direction

16:02.860 --> 16:04.860
给它写个new direction

16:04.860 --> 16:07.860
那么这里我要做的事情

16:07.860 --> 16:09.860
还有一个stats

16:10.860 --> 16:12.860
要做的事情很简单

16:12.860 --> 16:14.860
就给这个stats的direction

16:14.860 --> 16:15.860
重新复制

16:15.860 --> 16:18.860
复制为new direction

16:18.860 --> 16:19.860
完事了

16:19.860 --> 16:21.860
然后这边我们把模块保住进来

16:21.860 --> 16:23.860
import

16:24.860 --> 16:26.860
这些基本操作我就不讲了

16:26.860 --> 16:28.860
switch transition

16:28.860 --> 16:30.860
switch transition

16:31.860 --> 16:32.860
行了

16:32.860 --> 16:35.860
然后它就创建了一个wix

16:37.860 --> 16:39.860
创建好了wix之后

16:39.860 --> 16:41.860
我们还要把wix导出的仓库

16:41.860 --> 16:43.860
应用到我们的media.js里面去

16:43.860 --> 16:47.620
import

16:47.620 --> 16:49.620
stone

16:53.620 --> 16:55.620
stone里面

16:55.620 --> 16:57.620
把这个写进去

16:57.620 --> 16:59.620
仓库也有了

16:59.620 --> 17:01.620
仓库也有了

17:01.620 --> 17:02.620
行了

17:02.620 --> 17:03.620
我们把它运行出来

17:03.620 --> 17:06.620
这一块我们先暂时打个问号吧

17:07.620 --> 17:09.620
npm装

17:09.620 --> 17:10.620
so

17:10.620 --> 17:17.900
现在我们有一个仓库了

17:17.900 --> 17:18.900
这个仓库其实做的很简单

17:18.900 --> 17:20.900
就一个模块

17:20.900 --> 17:22.900
当然在实际开发中还有一些别的仓库模块

17:22.900 --> 17:25.900
我这里就写了关于动画切换的方向

17:25.900 --> 17:26.900
这个模块

17:26.900 --> 17:27.900
它里面就提供了一个字幅串

17:27.900 --> 17:29.900
字幅串就是往左边画头

17:29.900 --> 17:31.900
其实如果说你在项目里面

17:31.900 --> 17:32.900
只有这么一个仓库的话

17:32.900 --> 17:34.900
甚至根本就不需要wix

17:34.900 --> 17:37.900
一个简单的仓库模式就可以搞定了

17:37.900 --> 17:39.900
这里应该是爆错了

17:39.900 --> 17:40.900
我们看一下

17:40.900 --> 17:42.900
爆了什么错

17:43.900 --> 17:49.170
它说我这个

17:49.170 --> 17:52.170
我这个仓库里面的一个代码

17:52.170 --> 17:54.170
它不是一个构造函数

17:54.170 --> 17:56.610
我看一下

17:56.610 --> 17:59.920
应该是这个

18:01.920 --> 18:04.920
它说我没有使用这个wix-use

18:04.920 --> 18:06.920
这些事情

18:06.920 --> 18:08.920
有段时间没有碰wix-use了

18:08.920 --> 18:10.920
这个可能是我后边补充的

18:10.920 --> 18:12.920
所以好多地方都忘了

18:12.920 --> 18:13.920
忘了很正常

18:13.920 --> 18:15.920
忘了就忘了

18:15.920 --> 18:17.920
然后这里wix-use

18:17.920 --> 18:19.920
使用插件wix-use

18:19.920 --> 18:23.680
好 妥了

18:23.680 --> 18:25.680
那么现在我通过wix-use这个调试

18:25.680 --> 18:26.680
调试哪呢

18:28.680 --> 18:29.680
在这里面

18:29.680 --> 18:31.680
我们也可以看到我们的仓库

18:31.680 --> 18:33.680
仓库

18:35.680 --> 18:36.680
我看一下

18:36.680 --> 18:37.680
仓库呢

18:45.380 --> 18:46.380
在这

18:46.380 --> 18:47.380
仓库

18:47.380 --> 18:49.380
那么目前的数据

18:49.380 --> 18:50.380
是空的

18:50.380 --> 18:51.380
啥都没有

18:52.380 --> 18:53.380
然后呢

18:53.380 --> 18:55.380
我们现在

18:55.380 --> 18:56.380
也不对

18:56.380 --> 18:59.950
现在的数据为什么是空的呢

19:00.950 --> 19:05.440
应该是这

19:05.440 --> 19:08.440
应该是modules的单词写错了

19:09.440 --> 19:10.440
好了

19:10.440 --> 19:11.440
个个办办的

19:11.440 --> 19:12.440
把这个解决了

19:12.440 --> 19:13.440
那么目前的仓库里面

19:13.440 --> 19:15.440
你看State里面有个switch

19:15.440 --> 19:16.440
stress issue

19:16.440 --> 19:17.440
对象里面有个属性

19:17.440 --> 19:18.440
有一个型

19:18.440 --> 19:19.440
那么这个玩意

19:19.440 --> 19:21.440
是不是就是我们刚才的数据

19:21.440 --> 19:22.440
数据是这

19:22.440 --> 19:23.440
它有可能是left

19:23.440 --> 19:24.440
有可能是right

19:24.440 --> 19:25.440
对不对

19:25.440 --> 19:27.440
那么它会影响无忧的组件

19:27.440 --> 19:28.440
那么我们现在在无忧的

19:28.440 --> 19:29.440
组件里面

19:29.440 --> 19:30.440
只需要做一件事

19:30.440 --> 19:31.440
把这个数据

19:31.440 --> 19:32.440
放到哪呢

19:32.440 --> 19:34.440
放到组件的

19:34.440 --> 19:35.440
这个位置

19:35.440 --> 19:36.440
就完事了

19:37.440 --> 19:38.440
那么放呗

19:38.440 --> 19:39.440
直接放

19:39.440 --> 19:41.440
我们这里就直接写上一个

19:41.440 --> 19:42.440
也不需要搞那些

19:42.440 --> 19:43.440
花的胡哨的

19:43.440 --> 19:45.440
就直接写一个

19:46.440 --> 19:48.440
export default

19:50.440 --> 19:52.440
这里边写个computed

19:52.440 --> 19:54.440
一个计算属性

19:54.440 --> 19:55.440
就是方向

19:55.440 --> 19:56.440
地位就行

19:56.440 --> 19:58.440
方向来自于哪呢

19:59.440 --> 20:01.440
来自于this

20:01.440 --> 20:02.440
store

20:02.440 --> 20:03.440
State

20:06.710 --> 20:07.710
我们要不然打

20:07.710 --> 20:08.710
打印一下

20:09.710 --> 20:10.710
打印一下吧

20:11.710 --> 20:12.710
created

20:12.710 --> 20:13.710
created

20:13.710 --> 20:17.090
再输出一下

20:18.090 --> 20:19.090
有段时间没碰的

20:19.090 --> 20:20.090
这些动作

20:20.090 --> 20:21.090
玩意都忘了差不多了

20:21.090 --> 20:22.090
store

20:24.090 --> 20:25.090
好 保存

20:25.090 --> 20:26.090
看一下

20:26.090 --> 20:28.400
刷新

20:28.400 --> 20:29.400
return

20:29.400 --> 20:30.400
这下还要return

20:30.400 --> 20:31.400
一个value

20:31.400 --> 20:32.400
行吧 我就return

20:32.400 --> 20:33.400
一个value吧

20:35.840 --> 20:37.840
store里边有一个

20:37.840 --> 20:39.840
仓库里边有一个

20:39.840 --> 20:40.840
在哪呢

20:40.840 --> 20:42.840
就是整个的全部数据

20:43.840 --> 20:47.220
全部数据

20:47.220 --> 20:49.220
在哪呢

20:51.780 --> 20:52.780
State

20:52.780 --> 20:53.780
State这边

20:53.780 --> 20:54.780
明白了

20:54.780 --> 20:55.780
那么我们这里

20:55.780 --> 20:56.780
返回的就是

20:56.780 --> 20:57.780
this

20:57.780 --> 20:58.780
State

20:59.780 --> 21:00.780
store

21:00.780 --> 21:01.780
State

21:01.780 --> 21:03.780
然后switch

21:05.780 --> 21:06.780
transition

21:12.740 --> 21:13.740
好 我们就把这个数据

21:13.740 --> 21:14.740
放到这

21:15.740 --> 21:16.740
对吧

21:16.740 --> 21:17.740
仓库里边的数据变化

21:17.740 --> 21:18.740
是不是会导致

21:18.740 --> 21:19.740
这个计算属性发生变化

21:19.740 --> 21:20.740
计算属性发生变化

21:20.740 --> 21:22.740
就会导致这个地方的刷新

21:22.740 --> 21:23.740
好 玩笑了

21:24.740 --> 21:25.740
刷新

21:25.740 --> 21:26.740
那么你看

21:26.740 --> 21:27.740
目前仓库里边的数据

21:27.740 --> 21:28.740
是什么

21:28.740 --> 21:29.740
仓库里边的数据是left

21:29.740 --> 21:30.740
所以说

21:30.740 --> 21:31.740
它是往左边划动的

21:31.740 --> 21:32.740
那有一天

21:32.740 --> 21:33.740
我们把仓库的数据变了

21:33.740 --> 21:34.740
比方说我这里变了

21:34.740 --> 21:36.740
把它变成right

21:39.740 --> 21:40.740
不能改吗

21:40.740 --> 21:41.740
在这里不能改吗

21:43.740 --> 21:44.740
right

21:44.740 --> 21:45.740
到这里要保存

21:46.740 --> 21:47.740
不能改吗

21:47.740 --> 21:48.740
那么在这里改了

21:51.500 --> 21:52.500
right

21:53.500 --> 21:54.500
好 保存

21:54.500 --> 21:55.500
现在我刷新

21:56.500 --> 21:58.500
那么现在就是往右边划动的

21:58.500 --> 21:59.500
那么现在

21:59.500 --> 22:00.500
也就是说

22:00.500 --> 22:01.500
这条路是不是打通了

22:01.500 --> 22:03.500
这边到这边的这条路

22:03.500 --> 22:04.500
是不是就打通了

22:04.500 --> 22:05.500
你建立一个仓库

22:05.500 --> 22:06.500
里边有个制服串

22:06.500 --> 22:08.500
然后这个制服串的纸

22:08.500 --> 22:09.500
就决定了这个组件

22:09.500 --> 22:11.500
它应该是向哪边划动

22:12.500 --> 22:14.500
那剩下的就是最后一件事了

22:14.500 --> 22:16.500
就是从这边打通这边到这边

22:17.500 --> 22:19.500
路由切换的时候

22:19.500 --> 22:21.500
我要能够重新设置这个纸

22:22.500 --> 22:23.500
那么这个玩意怎么做呢

22:24.500 --> 22:26.500
那么要到了路由那边去了

22:26.500 --> 22:27.500
到路由那边去

22:28.500 --> 22:30.500
好 路由这边

22:30.500 --> 22:31.500
让我们设置的三个路由

22:31.500 --> 22:32.500
一个是Home

22:32.500 --> 22:33.500
一个是About

22:33.500 --> 22:34.500
一个是User

22:35.500 --> 22:36.500
那么我们将来

22:36.500 --> 22:38.500
可能还有更多的导航

22:38.500 --> 22:39.500
对吧

22:39.500 --> 22:41.500
可能有十来个都有可能

22:41.500 --> 22:43.500
那么我们如果说在这里

22:43.500 --> 22:44.500
强行判断的话

22:44.500 --> 22:45.500
也不是很好判断

22:45.500 --> 22:46.500
也不知道在

22:46.500 --> 22:48.500
把代码写到哪个地方

22:48.500 --> 22:49.500
所以我们这里

22:49.500 --> 22:50.500
首先要考虑

22:50.500 --> 22:51.500
第一个点就是

22:51.500 --> 22:52.500
我们要把这个

22:52.500 --> 22:55.500
逻辑判断的代码写到哪

22:56.500 --> 22:57.500
那写到哪呢

22:58.500 --> 22:59.500
你想来想去的话

22:59.500 --> 23:02.500
你只能写到导航守卫里边去了

23:03.500 --> 23:04.500
为什么呢

23:04.500 --> 23:05.500
导航守卫还做什么事

23:05.500 --> 23:07.500
当从一个路由切换到

23:07.500 --> 23:08.500
另一个路由的时候

23:08.500 --> 23:10.500
是不是会经过一段代码

23:11.500 --> 23:12.500
那我们那段代码

23:12.500 --> 23:13.500
是不是就可以判断

23:13.500 --> 23:15.500
它到底是从哪一个路由

23:15.500 --> 23:17.500
切换到哪一个路由

23:17.500 --> 23:18.500
好 于是呢

23:18.500 --> 23:19.500
我们在这里写他一个

23:19.500 --> 23:22.500
给他插入一个路由导航

23:22.500 --> 23:23.500
导航守卫

23:24.500 --> 23:25.500
放在这里

23:27.500 --> 23:29.500
好 揉头这里

23:30.500 --> 23:31.500
说一个before leach

23:32.500 --> 23:33.500
对吧

23:33.500 --> 23:34.500
他里边传一个回调

23:34.500 --> 23:36.500
to 到哪个路由啊

23:37.500 --> 23:39.500
from 从哪个路由来的呀

23:39.500 --> 23:40.500
对吧 next

23:41.500 --> 23:42.500
是一个函数

23:42.500 --> 23:43.500
这个函数的决定

23:43.500 --> 23:44.500
他要不要切换过去

23:44.500 --> 23:45.500
那我们这里

23:45.500 --> 23:47.500
肯定最终还是要切换过去

23:47.500 --> 23:49.500
只剩在切换的过程中

23:50.500 --> 23:51.500
在切换的过程中

23:51.500 --> 23:52.500
我要判断

23:52.500 --> 23:54.500
你是从哪一个路由

23:54.500 --> 23:55.500
到哪一个路由

23:55.500 --> 23:57.500
因为这里就涉及到一个问题

23:58.500 --> 23:59.500
我到底要决定了

23:59.500 --> 24:00.500
我到底是从left

24:01.500 --> 24:02.500
是使用left的

24:02.500 --> 24:03.500
还是使用right

24:03.500 --> 24:04.500
对吧

24:04.500 --> 24:05.500
要去改变仓库

24:05.500 --> 24:06.500
这里要做一件事

24:06.500 --> 24:07.500
更改仓库

24:08.500 --> 24:11.500
仓库中的directed

24:11.500 --> 24:12.500
那个方向

24:12.500 --> 24:13.500
要做这么一件事

24:13.500 --> 24:14.500
那要做这件事

24:14.500 --> 24:15.500
那就必须要知道

24:15.500 --> 24:16.500
我从到底是从哪一个路由

24:17.500 --> 24:18.500
跳到哪一个路由的

24:18.500 --> 24:19.500
那么我们这里

24:19.500 --> 24:20.500
把front

24:20.500 --> 24:21.500
和to 都打印出来

24:21.500 --> 24:23.500
打印出来一看就明白了

24:23.500 --> 24:24.500
忘记APN了

24:24.500 --> 24:25.500
完全不可怕

24:25.500 --> 24:26.500
我这些玩意都忘得差不多了

24:26.500 --> 24:27.500
忘得很干净了

24:29.500 --> 24:30.500
这个stone

24:30.500 --> 24:31.500
好像是我之前打印的

24:31.500 --> 24:32.500
去掉

24:33.500 --> 24:34.500
去掉

24:34.500 --> 24:37.060
保存

24:37.060 --> 24:38.060
上印

24:39.060 --> 24:40.060
让我们看一下

24:40.060 --> 24:41.060
这是from

24:41.060 --> 24:43.060
从哪一个路由来的呢

24:44.060 --> 24:45.060
我们这里

24:45.060 --> 24:46.060
还没有切换

24:46.060 --> 24:47.060
切换一下

24:47.060 --> 24:48.060
现在是user

24:48.060 --> 24:49.060
切换到home

24:49.060 --> 24:50.060
我们来看一下

24:51.060 --> 24:52.060
一开始我们打印的是什么

24:52.060 --> 24:53.060
打印的是

24:54.060 --> 24:56.060
一开始我们打印的是from

24:56.060 --> 24:57.060
从哪个路由来的呢

24:57.060 --> 24:59.060
从user这个路由来的

25:00.060 --> 25:01.060
它匹配到哪

25:01.060 --> 25:03.060
匹配到这个路由配置

25:04.060 --> 25:05.060
匹配到这个路由配置

25:05.060 --> 25:06.060
就匹配到这

25:08.060 --> 25:10.060
marches表示匹配的路由配置

25:10.060 --> 25:12.060
它匹配到的是这个路由配置

25:13.060 --> 25:14.060
那么到哪一个路由呢

25:14.060 --> 25:15.060
到这个路由

25:15.060 --> 25:17.060
到当前这个home路由

25:17.060 --> 25:18.060
它匹配到哪呢

25:18.060 --> 25:19.060
匹配到的是

25:20.060 --> 25:21.060
就这个路由配置

25:23.060 --> 25:24.060
懂了意思吗

25:24.060 --> 25:26.060
那么我们如何通过

25:26.060 --> 25:28.060
这两个对象来判断

25:28.060 --> 25:30.060
到底应该是left还是right

25:31.060 --> 25:32.060
你会发现即便是

25:32.060 --> 25:33.060
我们做到了这一步

25:33.060 --> 25:34.060
仍然不好判断

25:35.060 --> 25:36.060
仍然不知道

25:36.060 --> 25:38.060
到底应该是left还是right

25:40.060 --> 25:41.060
其实这里呢

25:41.060 --> 25:42.060
需要一点想像力

25:43.060 --> 25:44.060
其实这里怎么来处理呢

25:44.060 --> 25:45.060
我们就这样处理

25:46.060 --> 25:48.060
我给每一个路由配置

25:48.060 --> 25:49.060
它不是一个meta吗

25:49.060 --> 25:50.060
对吧

25:50.060 --> 25:51.060
可以写一些自定义的

25:51.060 --> 25:52.060
数据在里面

25:53.060 --> 25:54.060
那么我给每一个路由

25:54.060 --> 25:56.060
加一个meta数据

25:56.060 --> 25:57.060
一个原数据

25:58.060 --> 26:00.060
给它标明一个锁影

26:00.060 --> 26:02.060
就哪个在前边

26:02.060 --> 26:03.060
哪个在后边

26:03.060 --> 26:04.060
比方说这个home

26:04.060 --> 26:07.060
我给它设置一个index等于0

26:08.060 --> 26:09.060
然后呢这个

26:09.060 --> 26:10.060
2824呢

26:10.060 --> 26:12.060
我给它设置一个index等于1

26:12.060 --> 26:14.060
EU上的index等于2

26:14.060 --> 26:15.060
你看这样子

26:15.060 --> 26:17.060
将来是很好扩展的

26:17.060 --> 26:19.060
将来新来一个路由

26:19.060 --> 26:20.060
那么我往后方

26:20.060 --> 26:22.060
给它改变index就行了

26:22.060 --> 26:23.060
那如果说有一天

26:23.060 --> 26:24.060
index要放到有点后边

26:24.060 --> 26:25.060
我要做的事情很简单

26:25.060 --> 26:27.060
更改这个index的顺序就完事了

26:28.060 --> 26:29.060
那么这边

26:29.060 --> 26:31.060
它就可以根据这个index的值

26:31.060 --> 26:32.060
来判断

26:32.060 --> 26:34.060
到底是left还是right

26:34.060 --> 26:35.060
我们再来看一下

26:35.060 --> 26:36.060
保存之后

26:36.060 --> 26:39.060
我们从home切换到arbalt

26:39.060 --> 26:41.060
那我们看一下这边

26:41.060 --> 26:43.060
它匹配到了这个路由配置里面

26:43.060 --> 26:44.060
是不是有个meta

26:45.060 --> 26:46.060
meta里面是不是index0

26:46.060 --> 26:47.060
从哪里切换过来的

26:47.060 --> 26:49.060
从index0这个位置切换过来的

26:50.060 --> 26:51.060
我就不用care

26:51.060 --> 26:52.060
它到底是从home

26:52.060 --> 26:54.060
还是从什么页面

26:54.060 --> 26:55.060
无所谓的

26:55.060 --> 26:56.060
反正你的index是0

26:56.060 --> 26:58.060
从0切换到哪呢

26:58.060 --> 27:01.060
切换到这个配置里面的index等于1

27:01.060 --> 27:02.060
对吧

27:02.060 --> 27:03.060
切换到照射

27:03.060 --> 27:05.060
所以说从0到1

27:05.060 --> 27:07.060
那么就是从前边到右

27:07.060 --> 27:08.060
从左边到右边

27:08.060 --> 27:09.060
那么怎么来

27:09.060 --> 27:10.060
怎么来滑动

27:10.060 --> 27:11.060
我们这边滑动

27:11.060 --> 27:12.060
对吧

27:12.060 --> 27:13.060
你把这个逻辑理清楚

27:13.060 --> 27:15.060
就可以非常容易的理清楚了

27:15.060 --> 27:16.060
因此

27:16.060 --> 27:18.060
我们这里首先经过一个判断

27:18.060 --> 27:19.060
marches

27:19.060 --> 27:20.060
marches

27:22.760 --> 27:23.760
叫啥

27:24.760 --> 27:26.760
叫marches

27:26.760 --> 27:27.760
匹配的

27:27.760 --> 27:28.760
匹配的一个数组

27:29.760 --> 27:30.760
为什么是个数组呢

27:30.760 --> 27:32.760
因为它有可能是有那个

27:32.760 --> 27:33.760
千超路由

27:33.760 --> 27:34.760
它可能匹配多个路由

27:34.760 --> 27:35.760
比方说游到里面

27:35.760 --> 27:36.760
还有一些紫页面

27:36.760 --> 27:37.760
紫路由

27:37.760 --> 27:39.760
那么这里可能会匹配多个

27:39.760 --> 27:40.760
所以说我们只看第1个

27:40.760 --> 27:41.760
这里我们

27:41.760 --> 27:42.760
因为配置的meta都在第1个

27:43.760 --> 27:44.760
marches

27:44.760 --> 27:45.760
所以像这个路由的长度

27:45.760 --> 27:46.760
要大于0

27:46.760 --> 27:48.760
匹配要长度要大于0

27:48.760 --> 27:49.760
你不能啥都没匹配到

27:50.760 --> 27:51.760
from the marches length

27:51.760 --> 27:52.760
要大于0

27:52.760 --> 27:53.760
这种情况下

27:53.760 --> 27:54.760
我们要获取到

27:55.760 --> 27:56.760
左边和右边

27:57.760 --> 27:58.760
我们来获取一下

28:00.760 --> 28:01.760
从

28:01.760 --> 28:02.760
左边的index

28:03.760 --> 28:04.760
index

28:04.760 --> 28:05.760
1

28:05.760 --> 28:06.760
或者是from

28:06.760 --> 28:07.760
从哪里来的呢

28:07.760 --> 28:08.760
from

28:08.760 --> 28:09.760
marches

28:09.760 --> 28:10.760
0

28:10.760 --> 28:11.760
m

28:11.760 --> 28:12.760
index

28:13.760 --> 28:14.760
那么to是一样的

28:18.220 --> 28:19.220
这里是

28:19.220 --> 28:20.220
to

28:20.220 --> 28:22.220
我们来输出一下

28:22.220 --> 28:23.220
index

28:23.220 --> 28:24.220
from

28:24.220 --> 28:26.220
以及to from

28:26.220 --> 28:28.220
保存

28:29.220 --> 28:30.220
一开始没有输出

28:30.220 --> 28:31.220
因为一开始

28:31.220 --> 28:32.220
它没有跳转过来的路由

28:32.220 --> 28:34.220
我们来开始切换

28:34.220 --> 28:35.220
arbalts到home

28:35.220 --> 28:37.220
你看是从1切换到0

28:37.220 --> 28:38.220
home到user

28:38.220 --> 28:40.220
是从0到2

28:40.220 --> 28:41.220
user到arbalts

28:41.220 --> 28:43.220
是从2到1

28:43.220 --> 28:44.220
arbalts到user

28:44.220 --> 28:46.220
是从1到2

28:47.220 --> 28:48.220
那么现在就是

28:48.220 --> 28:49.220
两个数字之间的比较

28:49.220 --> 28:50.220
是不是很简单了

28:50.220 --> 28:51.220
那方向是什么呢

28:51.220 --> 28:52.220
方向就是一个

28:52.220 --> 28:54.220
三目运算幅就可以了

28:55.220 --> 28:57.220
如果说index from

28:57.220 --> 28:59.220
大于了to from

29:01.220 --> 29:02.220
这怎么写的

29:02.220 --> 29:04.220
index to

29:06.220 --> 29:07.220
index to

29:07.220 --> 29:08.220
说明什么呢

29:10.220 --> 29:11.220
说明

29:11.220 --> 29:13.220
大的变小了对吧

29:13.220 --> 29:14.220
是从这边

29:14.220 --> 29:15.220
我们点从这边

29:15.220 --> 29:16.220
点到这边

29:16.220 --> 29:17.220
大的变小了

29:17.220 --> 29:18.220
user到home

29:18.220 --> 29:19.220
对吧

29:19.220 --> 29:20.220
大的变小

29:20.220 --> 29:21.220
大到小

29:21.220 --> 29:22.220
那么这个时候

29:22.220 --> 29:23.220
是应该往右边划

29:24.220 --> 29:25.220
对不对

29:25.220 --> 29:26.220
应该往右边划

29:26.220 --> 29:27.220
那么这个时候

29:27.220 --> 29:28.220
应该是right

29:28.220 --> 29:29.220
否则的话

29:29.220 --> 29:30.220
应该是left

29:30.220 --> 29:31.220
就完事了

29:31.220 --> 29:32.220
那么我们把

29:32.220 --> 29:33.220
这个表达式的值

29:33.220 --> 29:34.220
复制给谁

29:34.220 --> 29:35.220
复制给那个仓库

29:35.220 --> 29:36.220
那么现在我们

29:36.220 --> 29:37.220
要导入仓库了

29:37.220 --> 29:39.220
import stone

29:39.220 --> 29:40.220
是吧

29:41.220 --> 29:42.220
stone

29:43.220 --> 29:44.220
好 仓库里边

29:44.220 --> 29:45.220
不有一个什么

29:46.220 --> 29:47.220
stone

29:48.220 --> 29:49.220
叫什么dispatch

29:50.220 --> 29:51.220
dispatch吧

29:51.220 --> 29:52.220
dispatch是x嘛

29:52.220 --> 29:53.220
叫commet

29:53.220 --> 29:54.220
提交更改

29:55.220 --> 29:57.220
内容是有一个

29:57.220 --> 29:59.220
switch

29:59.220 --> 30:01.220
transition

30:02.220 --> 30:04.220
这里还要加个命名空间

30:04.220 --> 30:05.220
name is best

30:06.220 --> 30:08.220
name is best

30:09.220 --> 30:12.660
然后呢

30:12.660 --> 30:13.660
写杠

30:14.660 --> 30:15.660
这个

30:15.660 --> 30:16.660
这个不没听叫啥

30:16.660 --> 30:18.660
change the direction

30:18.660 --> 30:19.660
好

30:19.660 --> 30:20.660
然后给他一个数据

30:20.660 --> 30:21.660
就是这个表达式

30:21.660 --> 30:22.660
把这个表达式的数据

30:22.660 --> 30:23.660
扔进去

30:24.660 --> 30:25.660
就完事了

30:26.660 --> 30:27.660
好 保存

30:27.660 --> 30:28.660
看一下

30:29.660 --> 30:30.660
我们再关注一下

30:30.660 --> 30:31.660
仓库的变化

30:33.660 --> 30:34.660
一开始是right

30:35.660 --> 30:38.040
然后点击about

30:39.040 --> 30:40.040
应该是变成left了

30:41.040 --> 30:42.040
变成left了

30:42.040 --> 30:43.040
它只变了

30:44.040 --> 30:47.040
现在这个调试工具更新了

30:48.040 --> 30:49.040
调试工具更新了之后

30:49.040 --> 30:50.040
我在哪里去看那个

30:51.040 --> 30:53.040
看那个列表呢

30:54.040 --> 30:56.040
我下来还在熟悉一下

30:56.040 --> 30:57.040
这个调试工具

30:57.040 --> 30:59.040
它的界面好像更新了

30:59.040 --> 31:00.040
跟以前不太一样了

31:01.040 --> 31:04.040
我在哪里去看那个提交

31:04.040 --> 31:05.040
提交的数据列表呢

31:08.040 --> 31:09.040
之后再说吧

31:09.040 --> 31:10.040
你看變left了

31:10.040 --> 31:12.040
从这边变left

31:12.040 --> 31:13.040
然后切过来呢

31:13.040 --> 31:14.040
它又变right

31:15.040 --> 31:17.040
就道理了就是这么个道理

31:18.040 --> 31:19.040
你只要做一件事

31:19.040 --> 31:20.040
你只要把原理

31:20.040 --> 31:23.040
它怎么去做方向搞定了

31:23.040 --> 31:25.040
那么你就往这个方向走

31:25.040 --> 31:26.040
遇到什么样的问题

31:26.040 --> 31:29.040
什么API忘记了查API

31:29.040 --> 31:30.040
版本出问题了

31:30.040 --> 31:31.040
搞定版本

31:32.040 --> 31:33.040
那么这些可能就是

31:33.040 --> 31:34.040
一个很好的例子

31:34.040 --> 31:36.040
原老师只知道这个方向

31:36.040 --> 31:38.040
把方向确定了之后

31:38.040 --> 31:39.040
管它中间遇到什么问题

31:39.040 --> 31:40.040
都是能解决的

31:40.040 --> 31:43.040
而且还是很容易就能解决的

31:43.040 --> 31:44.040
但是你方向找不到的话

31:44.040 --> 31:46.040
那就出问题了

31:46.040 --> 31:47.040
你根本有这么多知识

31:47.040 --> 31:48.040
你都不知道怎么去用它

31:49.040 --> 31:50.040
好了就完事了

31:50.040 --> 31:51.040
把这条路打通

31:51.040 --> 31:53.040
把这条路打通就完事了

31:54.040 --> 31:55.040
这就是这几刻

31:55.040 --> 31:57.040
我们讲这个路由切换的动向

