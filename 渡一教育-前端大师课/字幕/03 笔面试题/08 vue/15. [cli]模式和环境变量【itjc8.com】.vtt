WEBVTT

00:00.560 --> 00:05.200
好 至此关于五幼本身就已经差不多了

00:05.200 --> 00:10.320
有入门阶段的项目 有就业阶段的一些进阶知识

00:10.320 --> 00:14.960
你们在应付面试还是将来在工作中

00:14.960 --> 00:18.480
遇到具体问题的解决都已经搞定了差不多了

00:18.480 --> 00:22.040
那么接下来我们会花一些时间讲一讲

00:22.040 --> 00:25.920
五幼外围的一些东西 因为五幼它毕竟是一个全家统

00:25.920 --> 00:28.200
我们当讲了五幼本身还不够

00:28.360 --> 00:30.760
讲一些五幼外围的一些进阶知识

00:30.760 --> 00:33.320
我们这几节课会讲一讲关于五幼颗粒

00:33.320 --> 00:34.600
这个教授家工具

00:34.600 --> 00:37.160
首先你大家不要把它想象得那么复杂

00:37.160 --> 00:40.480
这个玩意它无非就是一个工具

00:40.480 --> 00:43.560
能够让我们开发比较方便一点

00:43.560 --> 00:45.360
它其实不参与运行的

00:45.360 --> 00:47.400
这是我们之前说过的 对吧

00:47.400 --> 00:49.200
我们来看一下它的功能

00:49.200 --> 00:52.000
它主要是来做什么事情 下面有这张图

00:53.040 --> 00:57.120
我们首先可以通过五幼颗粒搭建一个原始的工程

00:57.320 --> 00:58.440
就是一个工程结构

00:58.440 --> 00:59.600
也就是这个样子

00:59.600 --> 01:03.320
它有NodeModule 是有Public 有SRC目录

01:03.320 --> 01:04.920
对吧 还有一些各种配置文件

01:06.240 --> 01:07.240
搭建了工程过后了

01:07.240 --> 01:11.000
但是工程本身是无法在浏览器里面运行的

01:11.000 --> 01:11.520
为什么呢

01:11.520 --> 01:12.440
因为你看这个代码

01:12.440 --> 01:14.000
它就不像是一个浏览器的代码

01:14.000 --> 01:14.920
你看这个玩意儿

01:14.920 --> 01:16.440
浏览器哪认识这个东西

01:16.440 --> 01:18.040
这啥玩意儿这是

01:18.040 --> 01:22.000
所以说它这个玩意儿它本身它不会参与运行的

01:22.000 --> 01:23.360
它怎么样参与运行呢

01:23.360 --> 01:25.560
它是需要一个打包过程

01:25.560 --> 01:27.040
我们可以使用两个命令

01:27.040 --> 01:30.280
一个是因为我们安装通过它来搭建工程之后

01:30.280 --> 01:31.880
我们的工程里面会有一个命令

01:31.880 --> 01:34.120
叫做VocallyService

01:34.120 --> 01:36.320
这个命令就是Vocally给我们提供的命令

01:37.320 --> 01:38.640
这个命令有很多种用法

01:38.640 --> 01:39.720
我们平时用的话

01:39.720 --> 01:40.880
一般就用它两个

01:40.880 --> 01:42.320
一个是Serve

01:42.320 --> 01:44.440
这是表示的什么意思呢

01:44.440 --> 01:48.520
表示我们把我们的原始工程的打包

01:48.520 --> 01:51.520
就是在开发环境里面打包

01:51.520 --> 01:55.280
那么它的功能是把我们的原始工程打包成一个结构

01:55.320 --> 01:57.320
这个结构不生成任何文件

01:57.320 --> 01:59.160
它只是在内存里面

01:59.160 --> 02:00.880
然后会启动一个开发服务器

02:00.880 --> 02:05.160
这个开发服务器其实就是利用Webpack里面的Webpack Dev Server

02:05.160 --> 02:08.320
就是利用这个东西来启动这么一个开发服务器

02:08.320 --> 02:10.440
默认了监听端口8080

02:10.440 --> 02:12.400
所以说我们当我们去运行这个

02:12.400 --> 02:13.560
VocallyService命令过后

02:13.560 --> 02:17.080
你会看到它会给我们控制台给我们提示

02:17.080 --> 02:18.120
已经打包完成了

02:18.120 --> 02:19.240
一开始是不是一个过程

02:19.240 --> 02:20.960
对吧打包打包完成过后

02:20.960 --> 02:23.760
还会提示我们有监听的8080端口

02:24.640 --> 02:28.480
于是这个时候它就已经启动好这个开发服务器了

02:28.480 --> 02:31.560
然后我们只要去访问这个服务器的浏览器里面

02:31.560 --> 02:32.800
一访问服务器

02:32.800 --> 02:35.960
服务器就会给我们一个ATML

02:35.960 --> 02:38.320
就给我们这个东西

02:38.320 --> 02:41.120
一个空的DIV里面ID为APP

02:42.880 --> 02:45.040
然后这里面会引用一些介石

02:45.040 --> 02:46.920
一般来来会引用一些介石

02:46.920 --> 02:48.680
这些介石它又会去请求

02:48.680 --> 02:50.560
也就是它整个过程是这样子

02:50.560 --> 02:53.600
我们浏览器去请求我们的开发服务器

02:53.640 --> 02:54.360
去请求它

02:55.640 --> 02:57.080
然后它就会给我们一个ATML

02:58.280 --> 02:59.720
ATML里面会有一些介石

02:59.720 --> 03:02.680
对吧那么浏览器又会去请求介石

03:02.680 --> 03:04.400
它就会给我们这个介石

03:04.400 --> 03:06.520
这个介石里面就包含了什么5U的代码

03:06.520 --> 03:09.200
还有我们自己写的代码都在里面

03:09.200 --> 03:11.480
打包结果对不对

03:11.480 --> 03:13.440
然后它就会去执行这个介石

03:13.440 --> 03:16.360
一执行是不是整个页面就渲染出来了

03:16.360 --> 03:17.920
对吧就这么个意思

03:17.920 --> 03:20.840
这是我们的开发模式

03:20.840 --> 03:23.040
另外一种模式是生产环境

03:23.080 --> 03:24.920
生产环境我们要使用另外一个命令

03:24.920 --> 03:26.480
叫Build

03:26.480 --> 03:27.760
就打包

03:27.760 --> 03:31.200
打包的话它就会生成一个也是生成打包结果

03:31.200 --> 03:34.080
只不过我们开发环境里面是打包在内存

03:34.080 --> 03:36.440
然后我们生产环境是打包成一个文件

03:36.440 --> 03:38.160
咱们来看一下吧

03:38.160 --> 03:39.040
文件在哪呢

03:39.040 --> 03:40.960
打包出来过是不是一个DESM目录

03:40.960 --> 03:41.480
对吧

03:41.480 --> 03:46.320
那么这个目录里面就是一个非常非常传统的ATML和CSS

03:46.320 --> 03:49.120
那么这个时候我们只需要把这个目录

03:49.160 --> 03:53.080
上传到咱们的生产服务器

03:53.080 --> 03:57.360
比方说你阿利云、腾讯云或者是亚马逊都行

03:57.360 --> 03:59.800
只要你有个服务器你把上传上去

03:59.800 --> 04:02.280
然后经过一段服务器的部署

04:02.280 --> 04:05.000
OK那就到了生产环境了

04:05.000 --> 04:08.960
于是我们浏览器去请求我们的生产环境的服务器

04:08.960 --> 04:10.320
生产环境同样的道理

04:10.320 --> 04:13.720
给我们一个ATML里面只有一个DIV里边啥都没有

04:13.720 --> 04:15.760
然后又去请求介石

04:15.760 --> 04:17.880
最后来去执行介石渲染出页面

04:17.920 --> 04:20.960
实际上它跟开发环境基本上是相同的

04:20.960 --> 04:22.800
就这么一个逻辑

04:22.800 --> 04:24.160
这就是吴又克利多的事

04:24.160 --> 04:25.520
所以吴又克利他做什么事呢

04:25.520 --> 04:27.120
就做的事情非常简单

04:27.120 --> 04:28.280
就是一个打包

04:28.280 --> 04:30.760
然后开发环境给我们启动一个开发服务器

04:30.760 --> 04:32.480
生产环境的服务器你自己去搞定

04:33.560 --> 04:35.560
这就是他整个过程

04:35.560 --> 04:37.520
咱们首先回顾一下

04:37.520 --> 04:39.280
然后我们这一刻要说什么事情呢

04:40.600 --> 04:43.040
我们比方说遇到这么一种场景

04:44.600 --> 04:47.080
现在我们在工程里面

04:47.080 --> 04:48.400
比方说有这么一种场景

04:48.400 --> 04:50.880
我们会在工程里面去写一些API

04:50.880 --> 04:55.490
比方说我们就随便去下去的例子

04:55.490 --> 04:56.610
比方说六十

04:57.610 --> 04:59.650
这里边我们会提供一个函数

04:59.650 --> 05:04.400
这个函数要做的事情也特别简单

05:04.400 --> 05:07.280
就是通过阿加克斯来得到

05:07.280 --> 05:10.560
远程得到服务器的一些新闻数据

05:10.560 --> 05:11.760
GaS六十

05:11.760 --> 05:13.640
比方说我们有这么一个函数

05:13.640 --> 05:15.120
这个函数我们比方说

05:15.120 --> 05:16.440
当然用X小时也好

05:16.440 --> 05:17.640
用费起也好

05:17.640 --> 05:20.520
还是用传统的那个XHR也好

05:20.600 --> 05:22.480
总之你使用阿加克斯去搞定

05:22.480 --> 05:23.960
比方说我们用费起

05:23.960 --> 05:26.040
我们去请求一个地址

05:26.040 --> 05:27.600
我们的服务器地址是什么呢

05:27.600 --> 05:28.920
我们之前说过

05:28.920 --> 05:31.520
一般来说我们服务器的地址呢

05:31.520 --> 05:33.560
比方说我们的网页托反的地址

05:33.560 --> 05:34.960
假设啊

05:34.960 --> 05:38.560
假设我们的网页托反的地址是3w1.com

05:38.560 --> 05:39.840
就是我们访问这个地址

05:39.840 --> 05:42.720
将来我们在打包过后

05:42.720 --> 05:43.760
放到生产服务器

05:43.760 --> 05:46.080
生产服务器我们的域名是这个域名

05:46.080 --> 05:47.160
于是我们访问这个域名

05:47.160 --> 05:48.760
就会访问到生产服务器

05:48.760 --> 05:51.520
那么就会访问到一个打包结果

05:51.520 --> 05:52.400
然后我们打包完了

05:52.400 --> 05:53.440
不是有一些GS吗

05:53.440 --> 05:53.840
对吧

05:53.840 --> 05:56.120
那么在这个GS在一个页面里面运行

05:56.120 --> 05:57.520
就运行GS

05:57.520 --> 05:59.000
而运行GS的过程中

05:59.000 --> 06:01.800
是不是又可能会遇到阿加克斯

06:01.800 --> 06:02.560
对不对

06:02.560 --> 06:04.160
那么阿加克斯的情况下呢

06:04.160 --> 06:05.720
我们一般来说

06:05.720 --> 06:07.920
当然这种情况特别特别多

06:07.920 --> 06:10.040
我这里就说其中一种情况

06:10.040 --> 06:11.520
那么阿加克斯请求的地址呢

06:11.520 --> 06:13.000
他可能是这样的地址

06:13.000 --> 06:14.600
都依旧

06:14.600 --> 06:15.560
API News

06:15.560 --> 06:16.640
他可能是这样的地址

06:16.680 --> 06:18.960
也说他是不涉及到跨域的

06:18.960 --> 06:20.680
也说说那这个地址

06:20.680 --> 06:22.760
谁给我们提供数据啊

06:22.760 --> 06:24.920
那么这就涉及到一些部署的知识了

06:24.920 --> 06:27.200
就是说我们如果说

06:27.200 --> 06:28.080
正常访问的话

06:28.080 --> 06:30.240
访问到开发生产服务器

06:30.240 --> 06:31.760
那么他会有一个打包结果

06:31.760 --> 06:32.520
这个打包结果呢

06:32.520 --> 06:33.960
会给我们一个一天秒

06:33.960 --> 06:35.360
然后呢会给我们一些介事

06:35.360 --> 06:36.600
然后去运行

06:36.600 --> 06:37.000
另外呢

06:37.000 --> 06:38.680
当我们去请求这样的地址的时候

06:38.680 --> 06:41.680
他也是请求到我们的生产服务器

06:41.680 --> 06:42.480
还是一样的

06:42.480 --> 06:44.200
也是请求到这个地方

06:44.200 --> 06:44.560
只不过呢

06:44.560 --> 06:46.240
他访问的就不是打包结果了

06:46.240 --> 06:48.080
访问的是一些后端数据了

06:48.080 --> 06:49.760
后端服务了

06:49.760 --> 06:52.160
我们可以在生产服务器里做一些映射

06:52.160 --> 06:54.200
比方说你请求以API开头

06:54.200 --> 06:56.320
那么我就访问到后端服务

06:56.320 --> 06:57.440
你不是以API开头

06:57.440 --> 07:00.080
那么我就给你打包结果

07:00.080 --> 07:00.920
都是可以做

07:00.920 --> 07:02.760
这些事情都是可以做的

07:02.760 --> 07:04.520
所以他不会涉及到跨域

07:04.520 --> 07:06.440
那么如果说这种情况下

07:06.440 --> 07:08.960
那你在书写代码的时候就可以这样去

07:08.960 --> 07:11.980
非常简单了

07:11.980 --> 07:13.460
我们这里就直接使用

07:13.460 --> 07:15.660
用当前的域名比方说API News

07:15.660 --> 07:17.060
当然我现在没有这样的地址

07:17.100 --> 07:18.940
我就是举个例子

07:18.940 --> 07:20.540
那么你就可以直接用这种方式

07:20.540 --> 07:21.140
为什么呢

07:21.140 --> 07:22.260
因为如果说你不写

07:22.260 --> 07:23.740
你省略掉了协议

07:23.740 --> 07:24.940
省略掉了域名

07:24.940 --> 07:26.620
省略掉了端口号

07:26.620 --> 07:30.100
他默认就是使用当前页面的

07:30.100 --> 07:31.540
域名端口号

07:31.540 --> 07:33.100
所以这样子就不会到跨域

07:33.100 --> 07:34.180
也没有什么问题

07:34.180 --> 07:35.260
但是这样子做的话

07:35.260 --> 07:37.300
在生产环境里面会遇到问题

07:37.300 --> 07:39.580
因为生产环境他并没有这些服务

07:39.580 --> 07:41.460
他只有个开发服务器

07:41.460 --> 07:43.900
开发服务器也没有做什么映射

07:43.900 --> 07:45.100
所以说了这个生产

07:45.140 --> 07:47.500
开发就是在开发环境里面

07:47.500 --> 07:48.700
你只能访问到达报结果

07:48.700 --> 07:49.980
你访问不到这些服务

07:50.980 --> 07:52.620
比方说生产开发服务器

07:52.620 --> 07:54.380
我们是localhost8080

07:54.380 --> 07:55.660
是这么一个地址

07:58.200 --> 07:58.840
那么你

08:00.280 --> 08:02.040
那么如果说你不做任何处理的话

08:02.040 --> 08:04.440
在这里也是去请求这个地址

08:05.520 --> 08:06.280
那么这样的地址

08:06.280 --> 08:07.120
请求到开发服务器

08:07.120 --> 08:08.920
开发服务器是没有这个东西的

08:08.920 --> 08:10.720
所以说你就访问不到这样的数据

08:10.720 --> 08:11.280
那怎么办呢

08:11.280 --> 08:12.840
我们一般来说会怎么样

08:12.840 --> 08:13.880
我们之前做过的

08:13.880 --> 08:15.400
会配置一个代理

08:15.400 --> 08:16.920
对吧 开发服务器配置一个代理

08:16.920 --> 08:19.080
当你以API开头来访问的时候

08:19.080 --> 08:23.600
他会把一个请求转发到另外一个测试服务器

08:24.720 --> 08:26.000
比方说测试服务器

08:28.130 --> 08:29.450
那么这个测试服务器

08:29.450 --> 08:31.130
他就会给你相应的数据

08:32.130 --> 08:33.410
就会形成这么一个逻辑

08:33.690 --> 08:34.250
要那意思

08:35.570 --> 08:38.810
但是如果说我们开发也不一定是这种情况

08:38.810 --> 08:40.370
因为我们开发就具体的环境

08:40.370 --> 08:41.290
你们到公司里面

08:41.290 --> 08:42.890
他情况太多太多了

08:43.930 --> 08:45.450
他有可能是这么一种情况

08:45.450 --> 08:45.970
你看着

08:47.330 --> 08:48.770
他可能就会涉及到跨越了

08:52.990 --> 08:54.590
就是有可能会是这么一种情况

08:54.590 --> 08:56.390
我们在开发阶段的

08:56.390 --> 08:57.470
那么后端的

08:57.470 --> 08:59.470
他会给你提供一个开发服务器

08:59.470 --> 09:00.470
就是测试服务器

09:01.070 --> 09:03.190
测试的数据服务器

09:07.120 --> 09:08.520
这个字怎么那么大呢

09:10.580 --> 09:11.060
写到这吧

09:12.260 --> 09:14.980
测试的数据服务器

09:14.980 --> 09:16.180
他就是能提供数据的

09:16.180 --> 09:16.700
你访问他

09:16.700 --> 09:17.900
他就会给你一些数据

09:17.900 --> 09:18.860
不过这个服务器

09:18.860 --> 09:19.860
他可能在这个地址

09:20.500 --> 09:21.300
他不在这个地址

09:22.740 --> 09:23.420
他可能在这

09:24.420 --> 09:26.260
他可能的地址呢

09:26.260 --> 09:26.700
是这个

09:27.460 --> 09:28.220
我们写一个

09:28.220 --> 09:29.820
比方说3W

09:30.860 --> 09:32.580
或者就是3W

09:32.580 --> 09:34.380
Test.com

09:34.380 --> 09:36.100
比方说测试服务器的地址是这个

09:36.100 --> 09:37.100
因为他测试服务器

09:37.100 --> 09:38.980
肯定跟那个生产环境的服务器不一样

09:39.740 --> 09:40.500
明儿的意思吧

09:40.900 --> 09:42.460
那么现在就出现一些问题了

09:43.220 --> 09:44.500
那么生产环境我们再看一下

09:44.500 --> 09:45.420
生产环境它就是

09:45.420 --> 09:46.860
生产环境的数据服务器

09:46.860 --> 09:50.780
就是生产环境的数据服务器

09:51.740 --> 09:52.180
然后呢

09:52.180 --> 09:53.300
就是他的地址呢

09:53.300 --> 09:55.420
可能是这个3WTest.com

09:55.420 --> 09:56.140
他不一样

09:56.860 --> 09:57.860
他肯定要不一样

09:57.860 --> 09:59.220
这个一样的不得了了

09:59.220 --> 10:00.380
如果说在开发阶段的话

10:00.380 --> 10:02.900
你敢去用生产环境的数据服务器吗

10:02.900 --> 10:03.820
肯定是不敢的

10:03.820 --> 10:04.300
为什么

10:04.300 --> 10:06.260
他会改变里边的数据

10:06.260 --> 10:07.940
而我们在开发阶段社会

10:07.940 --> 10:09.620
有很多测试数据的

10:09.620 --> 10:10.940
你不能说

10:10.940 --> 10:13.540
比方说你做一个淘宝网站

10:13.540 --> 10:14.860
你加了一些测试数据

10:14.860 --> 10:15.980
就导致了别的用户

10:15.980 --> 10:17.420
也看到这些测试数据了

10:17.420 --> 10:18.700
说测试不行的

10:18.700 --> 10:20.140
所以说我们在开发阶段

10:20.260 --> 10:22.300
有可能会有一个测试的服务器

10:22.300 --> 10:23.820
那么他的地址呢

10:23.820 --> 10:25.020
他就会涉及到跨域了

10:25.020 --> 10:26.020
为什么会涉及到跨域的

10:26.020 --> 10:26.540
大家看一下

10:27.940 --> 10:28.460
那么现在呢

10:28.460 --> 10:29.580
我们有个问题就是

10:34.900 --> 10:36.220
我们在开发阶段

10:38.540 --> 10:39.660
开发阶段

10:39.660 --> 10:41.380
我们请求的网页

10:41.380 --> 10:42.980
打包结果拖幻服务器

10:42.980 --> 10:43.860
就是开发服务器

10:45.020 --> 10:46.660
就是我们这个开发服务器

10:46.660 --> 10:47.260
他的地址呢

10:47.260 --> 10:47.820
是什么呢

10:47.820 --> 10:50.820
Localhost8080

10:51.940 --> 10:52.660
对不对

10:52.660 --> 10:53.620
那么我们从这个地址呢

10:53.620 --> 10:55.340
可以拿到一些页面

10:55.340 --> 10:56.620
你拿到一些

10:57.900 --> 10:59.260
介石来进行职求

11:00.220 --> 11:00.660
然后呢

11:00.660 --> 11:02.060
我们的数据服务器呢

11:03.860 --> 11:04.740
他可能是另外一个地址

11:04.740 --> 11:06.100
叫3w2s

11:07.380 --> 11:09.260
那么这里边就会涉及到一个问题

11:09.260 --> 11:11.060
我们从这个地址去拿到网页

11:11.060 --> 11:13.020
然后在这里边去运行介石

11:13.020 --> 11:14.060
我们请求数据服务器

11:14.060 --> 11:15.100
要去请求这个地址

11:15.100 --> 11:16.180
是不是会涉及到跨域

11:16.900 --> 11:17.660
对不对

11:17.660 --> 11:18.460
那有些同学说

11:18.460 --> 11:19.780
那这个很简单呀

11:19.780 --> 11:21.260
我配置下代理不就完了吗

11:22.060 --> 11:23.500
当你去请求这样

11:24.100 --> 11:26.020
我们比方说以API开头

11:27.020 --> 11:29.380
我们还是有这样的协发

11:29.380 --> 11:30.780
我们请求API 60

11:30.780 --> 11:32.020
那么我们通过开

11:32.020 --> 11:34.380
我们还是会去请求到这个开发服务器

11:34.380 --> 11:35.100
对吧

11:35.100 --> 11:36.180
因为我们没有给域名

11:36.180 --> 11:37.060
没有给端口号

11:37.060 --> 11:38.740
他部分就是当前网页的端口号

11:38.740 --> 11:39.860
当前网页的域名

11:39.860 --> 11:41.580
于是这个地址他就会请求到哪

11:41.580 --> 11:43.020
就会请求到

11:43.020 --> 11:47.230
我们在这里边运行阿迦克斯

11:47.230 --> 11:50.550
阿迦克斯请求的是API 60

11:50.550 --> 11:52.630
然后他就会真实的去请求到哪了

11:52.630 --> 11:55.270
Localhost

11:56.310 --> 11:59.310
8080API News

11:59.310 --> 12:01.510
那么这样子数据是不是没有

12:01.510 --> 12:02.750
我们数据在这对不对

12:02.750 --> 12:04.030
那么怎么办了

12:04.030 --> 12:06.190
是不是我们就可以在这里边配置代理

12:06.190 --> 12:07.750
就跟之前一样

12:07.750 --> 12:09.110
在开发服务器边配置代理

12:09.110 --> 12:11.110
让代理能帮我们去请求他

12:11.110 --> 12:13.950
然后把他的结果又返回给他

12:13.950 --> 12:15.430
就避免跨域问题

12:15.430 --> 12:16.470
明儿的意思吧

12:16.470 --> 12:17.910
我们之前不就这样做了吗

12:17.910 --> 12:21.150
但是我们之前说过

12:21.150 --> 12:23.110
这样做有个前提条件

12:23.230 --> 12:26.590
就是在生产环境里边

12:26.590 --> 12:28.470
你不能出现跨域

12:28.470 --> 12:29.470
我给大家讲那么多

12:29.470 --> 12:31.790
就是希望大家理解这个情况

12:31.790 --> 12:32.750
你们以后的工作终于

12:32.750 --> 12:33.710
不一定是这个情况

12:33.710 --> 12:34.670
但是通过这个情况

12:34.670 --> 12:37.670
就明白了到底是怎么回事了

12:37.670 --> 12:39.790
这个很重要

12:39.790 --> 12:40.590
我们之前说

12:40.590 --> 12:42.550
那你这样子配置代理是没问题的

12:42.550 --> 12:43.670
但是有个前提条件

12:43.670 --> 12:46.670
就在生产环境里边是不涉及到跨域的

12:46.670 --> 12:48.510
那如果说生产环境也涉及到跨域

12:48.510 --> 12:49.550
那就出问题了

12:49.550 --> 12:53.380
比方说我们看生产环境

12:53.420 --> 12:54.380
生产环境里边

12:54.380 --> 12:56.980
如果比方说我们的服务器

12:56.980 --> 13:00.180
就是静态资源服务器

13:00.180 --> 13:02.260
就是我们打包结果上传那个服务器

13:02.260 --> 13:03.380
因为我们的写的

13:03.380 --> 13:08.780
那么他把他放到这个服务器

13:08.780 --> 13:09.940
那么这个服务器的地址

13:09.940 --> 13:12.460
比方说生产环境里边是度1

13:12.460 --> 13:12.820
调侃

13:12.820 --> 13:18.020
那么我们生产环境也会有个数据服务器

13:18.020 --> 13:20.180
数据服务器

13:20.180 --> 13:22.180
生产环境的数据服务器

13:22.180 --> 13:22.980
可能是这个

13:22.980 --> 13:25.580
他就不再是这个3W2E调侃了

13:25.580 --> 13:26.220
他是怎么的

13:26.220 --> 13:31.980
他可能是这个3W2EService调侃

13:32.980 --> 13:34.380
你看这样子是不是跨域了

13:35.380 --> 13:37.380
如果说我们现在去开发服务器

13:37.380 --> 13:38.780
配置代理会怎么样了

13:38.780 --> 13:40.580
在开发阶段确实没有问题

13:40.580 --> 13:41.980
我们去请求这样的地址

13:41.980 --> 13:43.580
然后他会请求到这

13:43.580 --> 13:44.980
请求到这我们开发服务器

13:44.980 --> 13:46.380
是不是有个代理啊

13:46.380 --> 13:47.180
对不对

13:47.180 --> 13:47.980
有个代理的话

13:47.980 --> 13:50.380
那么他就会去请求他

13:50.380 --> 13:52.380
那么开发服务器会去请求他

13:52.380 --> 13:53.780
就这样子

13:53.780 --> 13:54.980
开发服务器

13:54.980 --> 13:56.980
他就会去请求他

13:56.980 --> 13:58.780
然后他拿到结果了

13:58.780 --> 13:58.980
对吧

13:58.980 --> 13:59.420
拿到结果

13:59.420 --> 14:00.580
返回给开发服务器

14:00.780 --> 14:02.980
然后开发服务器再返回给我们的浏览器

14:02.980 --> 14:04.380
所以浏览器请求这个地址

14:04.380 --> 14:05.980
也能拿到数据

14:05.980 --> 14:06.980
但是到了生产环境

14:06.980 --> 14:08.180
你看一下是不是要出问题

14:09.780 --> 14:10.580
生产环境里面

14:10.580 --> 14:10.880
哎

14:10.880 --> 14:11.780
阿迦克斯

14:11.780 --> 14:12.380
我们还

14:12.380 --> 14:13.580
因为我们的代码都是一样的

14:13.580 --> 14:15.180
都是同一套代码打包出来的

14:15.180 --> 14:16.580
所以说我们阿迦克斯请求的地址

14:16.580 --> 14:18.180
还是这个地址

14:18.180 --> 14:20.780
那么他省略了学一名端口号

14:20.780 --> 14:21.980
省略了绿名

14:21.980 --> 14:23.580
因此他就会请求到哪呢

14:23.580 --> 14:24.580
他就会请求到

14:24.580 --> 14:28.180
Aggp3W2E调侃API

14:28.180 --> 14:29.780
他就会请求到这

14:29.780 --> 14:30.380
对吧

14:30.380 --> 14:31.780
因为我们当前的浏览器

14:31.780 --> 14:33.380
就请求了这个地址

14:33.380 --> 14:34.680
拿到了我们的网页

14:34.680 --> 14:35.880
网页里面运行界也是

14:35.880 --> 14:37.780
那么省略了域名协议端口号

14:37.780 --> 14:38.880
于是他就会填充

14:38.880 --> 14:40.680
上当前网页的域名端口号

14:40.680 --> 14:41.980
他就会请求他

14:41.980 --> 14:42.780
而请求他的时候

14:42.780 --> 14:44.080
能拿到数据吗

14:44.080 --> 14:45.180
什么拿不到

14:45.180 --> 14:46.480
那因为他说那也简单呀

14:46.480 --> 14:47.780
我在生产服务器上

14:47.780 --> 14:48.980
也配置个代理

14:48.980 --> 14:49.980
可不可以呢

14:49.980 --> 14:50.480
可以

14:50.480 --> 14:51.680
实际上是可以的

14:51.680 --> 14:52.580
我们浏览器

14:52.580 --> 14:53.280
去请求这个地址

14:53.280 --> 14:54.780
那么就请求到我们的

14:54.780 --> 14:56.080
静态资源服务器

14:56.080 --> 14:57.180
而静态资源服务器

14:57.180 --> 14:59.180
我也可以配置个代理

14:59.180 --> 15:00.080
那么这个代理

15:00.080 --> 15:02.380
就请求到他了

15:02.380 --> 15:02.980
请求到他

15:02.980 --> 15:04.480
那么他又给我们数据

15:04.480 --> 15:06.180
这个数据呢

15:06.180 --> 15:07.080
就反归了浏览器

15:07.080 --> 15:09.380
就跟我们开发阶段是一样的

15:09.380 --> 15:10.080
可以不可以

15:10.080 --> 15:10.980
可以

15:10.980 --> 15:12.680
但是有的时候

15:12.680 --> 15:14.280
有些特殊的情况下

15:14.280 --> 15:15.780
我们可能在生产环境里面

15:15.780 --> 15:17.780
去配置这个代理

15:17.780 --> 15:19.080
并不是很方便

15:19.080 --> 15:21.380
或者是根本不允许的配置

15:21.380 --> 15:21.980
他就能做

15:21.980 --> 15:23.180
他只是作为一个静态资源

15:23.180 --> 15:24.180
他不能作为代理

15:24.180 --> 15:25.980
有可能会遇到这种情况

15:26.080 --> 15:27.180
那么这种情况下

15:27.180 --> 15:29.180
就必须要考虑跨越问题了

15:29.180 --> 15:30.480
也就是他在真实的环境里边

15:30.480 --> 15:31.680
他就有跨越

15:31.680 --> 15:33.580
那么就有跨越怎么解决

15:33.580 --> 15:35.280
就可以用什么

15:35.280 --> 15:36.580
JSMP

15:36.580 --> 15:37.380
CLS

15:37.380 --> 15:39.180
现在CLS用的比较多

15:39.180 --> 15:40.780
总之能够解决跨越

15:40.780 --> 15:41.680
现在跨越的问题

15:41.680 --> 15:43.080
不是我们要探讨的问题

15:43.080 --> 15:43.980
我们要探讨的另一个问题

15:43.980 --> 15:44.880
就是现在

15:44.880 --> 15:46.280
比方说他就有跨越

15:46.280 --> 15:47.980
这个跨越的服务器已经解决了

15:47.980 --> 15:49.580
那么这个是支持跨越的

15:49.580 --> 15:52.080
我们开发阶段这个服务器支持跨越

15:52.080 --> 15:53.880
生产环境里边这个服务器

15:53.880 --> 15:54.680
他也支持跨越

15:54.680 --> 15:57.380
跨越问题你们不用考虑了

15:57.380 --> 15:58.480
他本身就支持跨越

15:58.480 --> 15:59.780
你直接去请求他就ok了

15:59.780 --> 16:01.080
就能拿到数据

16:01.080 --> 16:02.680
所以说现在问题在哪

16:02.680 --> 16:03.980
我们在开发阶段

16:03.980 --> 16:06.780
我们需要去请求这个地址

16:06.780 --> 16:08.680
我们就不能用这个地址去请求了

16:08.680 --> 16:10.480
因为这个地址请求的话

16:10.480 --> 16:11.980
到了开发阶段

16:11.980 --> 16:12.780
到时候可以配置代理

16:12.780 --> 16:14.680
在生产环境里边配置不了代理

16:14.680 --> 16:16.780
就导致这个东西访问不到

16:16.780 --> 16:17.680
所以说我们在开

16:17.680 --> 16:18.480
我们在单码里边

16:18.480 --> 16:20.180
就必须要牢牢实实地写出

16:20.180 --> 16:21.980
完整的请求路径

16:21.980 --> 16:22.580
那么怎么写呢

16:22.680 --> 16:24.780
比方说阿加克斯可以这样写

16:24.780 --> 16:26.680
我们就直接去请求这样的地址

16:26.680 --> 16:28.980
3WTEST的别靠

16:28.980 --> 16:29.880
不要去省略了

16:29.880 --> 16:31.480
因为一省略就用到是当前的

16:31.480 --> 16:32.580
一省略就用到当前的

16:32.580 --> 16:33.580
你看了没

16:33.580 --> 16:35.180
就拿不到数据了

16:35.180 --> 16:36.480
那么现在我们就不省略了

16:36.480 --> 16:38.980
就直接去请求这个地址拿数据

16:38.980 --> 16:40.480
开发阶段去请求这个地址

16:40.480 --> 16:41.980
然后我们在生产环境里边

16:41.980 --> 16:48.360
要去请求这个地址

16:48.360 --> 16:50.860
去请求DoE service

16:50.860 --> 16:52.060
看到问题没有

16:52.060 --> 16:53.360
这就是我们现在遇到的问题

16:53.360 --> 16:55.160
说了半天解释了一大堆

16:55.260 --> 16:56.960
我们就遇到这样问题了

16:56.960 --> 16:58.160
什么问题呢

16:58.160 --> 17:00.060
就是我们这个代码不知道怎么写

17:00.060 --> 17:01.060
哪个代码

17:01.060 --> 17:02.160
怎么不知道怎么写

17:02.160 --> 17:03.760
我就可以这样写

17:03.760 --> 17:05.760
我就请求ADT帽号

17:05.760 --> 17:07.660
写到这是不是就蒙了

17:07.660 --> 17:09.560
那我写哪一个呢

17:09.560 --> 17:11.560
我到底写test.com

17:11.560 --> 17:13.460
还是写doe service.com

17:13.460 --> 17:14.960
你就不知道写哪一个了

17:14.960 --> 17:15.360
看到没

17:15.360 --> 17:18.060
我们现在就给大家解释出来这么一个问题

17:18.060 --> 17:19.560
就是我们遇到的问题

17:19.560 --> 17:22.560
但是这个问题推而广之

17:22.560 --> 17:24.660
就是本质上是一个什么问题呢

17:24.660 --> 17:26.160
就是我们统一套代码

17:26.160 --> 17:28.460
它既要在开发环境里边运行

17:28.460 --> 17:30.560
又要在生产环境里边运行

17:30.560 --> 17:31.460
但是呢

17:31.460 --> 17:33.560
它这个代码里边有一些地方

17:33.560 --> 17:36.760
在生产环境里边和开发阶段是有差异的

17:36.760 --> 17:38.660
我们如何来处理这种差异

17:38.660 --> 17:40.260
这就是我们遇到的问题

17:40.260 --> 17:41.660
没了意思吧

17:41.660 --> 17:43.160
我们在开发环境里边

17:43.160 --> 17:49.420
我们比方说要这里要写这个test.com

17:49.420 --> 17:50.820
开发环境

17:50.820 --> 17:53.220
那么这个请求的基地址

17:53.220 --> 17:54.920
是这个

17:54.920 --> 17:57.020
后面都一样

17:57.020 --> 18:00.120
然后呢生产环境

18:00.120 --> 18:05.550
我们请求的基地址是这个

18:05.550 --> 18:07.050
所以说是不是不一样啊

18:07.050 --> 18:09.250
那么这写错了

18:09.250 --> 18:11.450
如何来处理这个差异

18:11.450 --> 18:12.550
这个问题的本质

18:12.550 --> 18:14.350
就是我们统一套代码

18:14.350 --> 18:16.950
它既要在生产环境里边运行

18:16.950 --> 18:19.750
又要在开发环境里边运行

18:19.750 --> 18:20.350
但是呢

18:20.350 --> 18:22.650
它们运行的不一样

18:22.650 --> 18:24.450
就是它们有些地方是不一样的

18:24.450 --> 18:26.650
我们来如何处理

18:26.650 --> 18:28.950
那么要处理这个问题的话

18:28.950 --> 18:30.550
我们一个简单的方案就是

18:30.550 --> 18:32.050
我们可以判断一下

18:32.050 --> 18:35.150
我当前的代码是在哪个环境里边运行的

18:35.150 --> 18:36.350
判断

18:36.350 --> 18:40.050
如果说你是开发环境

18:40.050 --> 18:41.750
那么我这里就有一个辩量

18:41.750 --> 18:43.350
比方说辩量

18:43.350 --> 18:44.850
Base URL

18:44.850 --> 18:45.950
这辩量的值呢

18:45.950 --> 18:46.950
一开始没有值

18:46.950 --> 18:48.350
如果说你是开发环境的话

18:48.350 --> 18:49.750
那么我的Base URL呢

18:49.750 --> 18:54.980
就应该等于这个

18:54.980 --> 18:56.880
如果说你是生产环境的话

18:56.880 --> 18:57.980
那么这个Base URL呢

18:57.980 --> 19:02.370
就应该等于下面那个字

19:02.370 --> 19:03.570
那这样子是不是简单了

19:03.670 --> 19:05.470
我这边是不是只需要拼接一下

19:08.470 --> 19:09.670
是不是只需要拼接一下

19:09.670 --> 19:10.970
就ok了

19:10.970 --> 19:12.970
那么现在问题又转换成了

19:12.970 --> 19:15.470
我如何判断你是一个开发环境

19:15.470 --> 19:18.370
还是一个生产环境的

19:18.370 --> 19:22.470
那么我们以前学过这个

19:22.470 --> 19:24.270
一些工程化的知识

19:24.270 --> 19:25.470
那么工程化的知识里边

19:25.470 --> 19:27.470
它告诉我们在load环境里边

19:27.470 --> 19:29.470
我们是不是可以用一个环境辩量

19:29.470 --> 19:31.870
叫做loadm

19:32.470 --> 19:34.170
所以可以通过它来进行判断

19:34.170 --> 19:35.270
我们的环境辩量

19:35.270 --> 19:36.570
如果说是开发环境的话

19:36.570 --> 19:37.870
我们就是不是这样判断

19:39.870 --> 19:41.670
那么如果说我们在单码可以这样的

19:41.670 --> 19:42.870
可以这样的写吗

19:42.870 --> 19:45.170
这样写的话就有点惯疑

19:45.170 --> 19:46.070
为什么惯疑呢

19:46.070 --> 19:47.770
首先你要清楚

19:47.770 --> 19:50.670
这个东西是在load环境里边的

19:50.670 --> 19:50.970
对不对

19:50.970 --> 19:52.470
这些东西都是在load环境里边

19:52.470 --> 19:54.770
浏览器环境里边有这个东西吗

19:54.770 --> 19:56.070
那我们就看一下

19:56.070 --> 20:00.310
浏览器环境里边有没有这个process

20:00.310 --> 20:00.710
有没有

20:00.710 --> 20:01.510
肯定是没有的

20:01.510 --> 20:03.710
这个东西根本就不存在

20:03.710 --> 20:04.310
明白吧

20:04.310 --> 20:05.910
就是我们现在的

20:05.910 --> 20:08.110
这个代码不是在load环境里边运行的

20:08.110 --> 20:10.110
它是要变成打包结果

20:10.110 --> 20:11.410
就是这个代码打包结果里边

20:11.410 --> 20:12.910
会包含这一段代码

20:12.910 --> 20:16.610
而打包结果里边是要给浏览器运行的

20:16.610 --> 20:18.310
这个介石最终是要给浏览器运行的

20:18.310 --> 20:19.710
浏览器里边哪有这个东西

20:19.710 --> 20:22.310
根本就没有这个东西

20:22.310 --> 20:23.510
没了意思吧

20:23.510 --> 20:24.810
那么我们这个东西就不能用

20:24.810 --> 20:26.710
不能用那个环境辩量

20:26.710 --> 20:27.910
那怎么办呢

20:27.910 --> 20:29.610
那么这个东西是无忧可力

20:29.610 --> 20:31.010
帮我们处理的

20:31.010 --> 20:32.110
无忧可力它怎么处理的

20:32.110 --> 20:34.710
其实做的事情非常简单

20:34.710 --> 20:35.310
它有没有

20:35.310 --> 20:36.710
它比如说无忧可力的

20:36.710 --> 20:38.910
它是支持环境辩量的

20:38.910 --> 20:42.710
它会它怎么来实现这个支持呢

20:42.710 --> 20:43.310
它在打

20:43.310 --> 20:46.010
它是在打包过程中来处理的

20:46.010 --> 20:48.410
比方说我们在代码中使用了这个东西

20:48.410 --> 20:50.510
叫process n5.n5

20:50.510 --> 20:51.910
那么这个东西在浏览器环境里边

20:51.910 --> 20:52.710
根本就用不了

20:52.710 --> 20:53.910
它要抱错的

20:53.910 --> 20:55.710
那怎么办呢

20:55.710 --> 20:56.510
无忧可力在打

20:56.510 --> 20:58.210
因为我们最终那个运行的代码

20:58.210 --> 20:59.710
都是打包结果对吧

20:59.710 --> 21:01.110
无忧可力在打包的过程中

21:01.110 --> 21:02.910
比方说你用了社伍命令进行打包

21:02.910 --> 21:05.110
它是在开发环境里边进行打包

21:05.110 --> 21:07.010
那么在开发环境里边打包的时候

21:07.010 --> 21:10.310
它就会扫描我们代码里边这个代码

21:10.310 --> 21:12.610
它就会把这个东西替换成什么呢

21:12.610 --> 21:15.510
替换成一个产量底边的盘子

21:15.510 --> 21:16.210
啥意思

21:16.210 --> 21:18.510
也就是这个代码如果说我们通过开发环境

21:18.510 --> 21:21.510
就是用npm装社伍这个命令来运行的话

21:21.510 --> 21:25.160
这个代码就变成这个样子

21:25.160 --> 21:27.360
它就会把我们刚才那个表达是进行替换

21:27.360 --> 21:29.060
替换成这个东西

21:29.060 --> 21:29.960
所以说这个东西

21:29.960 --> 21:32.260
那盘子就会去了对吧

21:32.260 --> 21:33.960
那如果说你是生产环境打包的话

21:33.960 --> 21:35.960
那么这里如果说你用的命令不是社伍

21:35.960 --> 21:37.160
是bude的话

21:37.160 --> 21:38.160
它也会打包

21:38.160 --> 21:42.260
那么它就会用那个prodcast来进行替换

21:42.260 --> 21:43.960
它就会用这种方式来进行替换

21:43.960 --> 21:46.260
那么这个盘子就是force了

21:46.260 --> 21:47.560
所以说我们在代码里边

21:47.560 --> 21:49.060
实际上是可以用它的

21:49.060 --> 21:51.160
但是你要知道为什么可以用它

21:51.160 --> 21:53.660
是因为它比我们进行了替换

21:53.660 --> 21:55.960
其实这个功能的也不是无忧可力做的

21:55.960 --> 21:57.760
它实际上是wpaq一个插线

21:57.760 --> 22:00.560
叫做defanprocain

22:00.560 --> 22:02.960
你们之前应该是学过的

22:02.960 --> 22:04.960
defanprocain

22:04.960 --> 22:08.360
这个插线就是用wpaq

22:08.360 --> 22:09.660
defanprocain

22:09.660 --> 22:12.460
那么这里就是它这个插线的作用就是进行替换

22:12.460 --> 22:16.860
替换代码里边某一些位置的表达式

22:16.860 --> 22:19.360
它把这个表达式就会进行替换

22:19.360 --> 22:21.460
所以说我们可以参考一下无忧可力

22:21.460 --> 22:23.660
它做了整个过程

22:23.660 --> 22:24.860
整个过程是什么呢

22:24.860 --> 22:26.760
就是我们运行一个打包命令

22:26.860 --> 22:28.560
这打包命令就决定了

22:28.560 --> 22:30.860
它到底使用的是什么环境

22:30.860 --> 22:32.260
如果说是生产环境

22:32.260 --> 22:36.160
如果说是开发环境的话

22:36.160 --> 22:39.660
那么它就会替换这个loadm为devapment

22:39.660 --> 22:41.360
如果说是生产环境的话

22:41.360 --> 22:43.460
它就会替换这个

22:43.460 --> 22:45.160
就是如果说运行的是build命令

22:45.160 --> 22:46.160
运行的是这个命令

22:46.160 --> 22:46.760
那么它就认为

22:46.760 --> 22:48.760
你在打包是在生产环境里边打包

22:48.760 --> 22:52.460
那么它就会替换这个东西为perboxing

22:52.460 --> 22:53.360
明儿的意思吧

22:53.360 --> 22:55.360
那么这样子就完成了替换

22:55.360 --> 22:56.660
接下来我们来看一下吧

22:56.660 --> 22:58.060
因为这个请求肯定是拿不到

22:58.060 --> 22:58.960
拿不到这个请求的

22:58.960 --> 23:01.460
所以说我们这里就直接测试一下

23:01.460 --> 23:07.860
输出请求正在请求

23:07.860 --> 23:08.260
叫什么呢

23:08.260 --> 23:09.860
Base URL

23:09.860 --> 23:10.960
好

23:10.960 --> 23:13.260
我们这里vdapment里边来测试一下

23:13.260 --> 23:17.060
导入它

23:17.060 --> 23:21.460
frode.hpniews

23:21.460 --> 23:26.060
这里边我们get news

23:26.060 --> 23:27.860
接下来我们这里就调一个get news

23:27.860 --> 23:29.260
OK了

23:29.260 --> 23:30.460
看它输出的结果

23:30.460 --> 23:32.760
接下来我们来看目前是开发环境

23:32.760 --> 23:34.160
接下来我们来刷新一下

23:34.160 --> 23:36.460
这不请求的是test.com

23:36.460 --> 23:37.160
对不对

23:37.160 --> 23:37.360
好

23:37.360 --> 23:38.960
接下来我们停止然后打包

23:38.960 --> 23:41.460
把变成生产环境

23:41.460 --> 23:44.060
运行这个命令实际上就在运行它

23:44.060 --> 23:45.260
运行它它打包出来的时候

23:45.260 --> 23:50.720
它就会把这个表达式替换成perboxing

23:50.720 --> 23:51.720
好打包完成

23:51.720 --> 23:53.720
接下来我们开desk里边看一下

23:53.720 --> 23:54.620
找这个desk

23:54.620 --> 23:57.720
我们直接把pdapment到vscode里边来

23:57.720 --> 24:00.520
我们这边就直接利用lib server吧

24:00.520 --> 24:02.520
因为我们这里没有生产服务器

24:02.520 --> 24:04.720
所以说我就把一个lib server当成生产服务器

24:04.720 --> 24:10.430
把这个玩意托管给那个lib server来看一下

24:10.430 --> 24:11.030
好

24:11.030 --> 24:12.930
你看是不是请求了这个地址

24:12.930 --> 24:15.030
那么这样子打到了我们的目的了

24:15.030 --> 24:17.130
我们的目的就是要同一套代码

24:17.130 --> 24:18.730
它既要再能够生产环境

24:18.730 --> 24:20.030
能够适应生产环境

24:20.030 --> 24:23.540
也要能够适应开发环境

24:23.540 --> 24:26.740
好那么这里我们再进一步来说一说

24:26.740 --> 24:29.640
在打包的时候它是怎么来替换的

24:29.640 --> 24:30.440
它打包的时候

24:30.440 --> 24:35.030
它实际上会替换这些东西

24:35.030 --> 24:36.830
就是无诱可利

24:36.930 --> 24:39.130
我们就记到这吧

24:39.130 --> 24:40.530
无诱可利

24:40.530 --> 24:43.630
在打包时

24:43.630 --> 24:52.930
会将process.nv.chachacha进行替换

24:52.930 --> 24:54.130
那么这个chachacha是什么呢

24:54.130 --> 24:55.330
就是环境辨量

24:55.330 --> 24:56.830
就是你的环境辨量

24:56.830 --> 24:58.330
那么我们目前的环境辨量

24:58.330 --> 24:59.630
只有一个nv

24:59.630 --> 25:01.130
那么其实你还可以去制定

25:01.130 --> 25:02.830
其他的环境辨量

25:02.830 --> 25:05.730
那么关于这个环境辨量

25:05.730 --> 25:09.030
关于环境辨量

25:09.030 --> 25:11.030
如何定义

25:11.030 --> 25:12.830
那么你可以参照那个

25:12.830 --> 25:13.930
参照这个这个稳当

25:13.930 --> 25:15.330
这个稳当里面有详细的记录

25:15.330 --> 25:16.330
告诉你这个环境辨量

25:16.330 --> 25:17.730
该如何才定义

25:17.730 --> 25:18.930
其实这个环境辨量呢

25:18.930 --> 25:20.530
它使用一种比较

25:20.530 --> 25:24.130
在前端比较普遍使用的一个规则

25:24.130 --> 25:27.800
那么这里就是

25:27.800 --> 25:30.500
第一规则就是使用了一个第三方库

25:30.500 --> 25:33.540
叫做dotm

25:33.540 --> 25:34.740
叫dotm

25:34.740 --> 25:36.540
这个第三方库还没有别的作用

25:36.540 --> 25:39.540
它就是来读取环境辨量的

25:39.540 --> 25:42.340
那么它的读取规则是什么呢

25:42.340 --> 25:51.440
就是首先读取当前机器的环境辨量

25:51.440 --> 25:54.240
比方说我们这里呢

25:54.240 --> 25:56.940
有一个process.nv

25:56.940 --> 25:57.840
叫abc

25:57.840 --> 25:59.640
比方说有这么一个环境辨量

25:59.640 --> 26:02.640
那么这个环境辨量值是什么

26:02.640 --> 26:04.440
它是由dotnv来决定的

26:05.440 --> 26:06.940
这个第三方库来决定的

26:06.940 --> 26:09.340
它决定的方式呢是这样子

26:09.340 --> 26:11.240
它首先看一下你的机器上面

26:11.240 --> 26:11.840
因为我们知道

26:11.840 --> 26:13.440
无论是windows还是mic

26:13.440 --> 26:14.640
它们都有环境辨量

26:14.640 --> 26:15.540
对吧

26:15.540 --> 26:16.740
你可以摆顿去搜一下

26:16.740 --> 26:17.640
怎么来看环境辨量

26:17.640 --> 26:19.640
我以前好像讲过的

26:19.640 --> 26:20.540
那么可以先看一下

26:20.540 --> 26:22.140
你的机器上有没有这个abc

26:22.140 --> 26:24.840
有的话就直接进行替换

26:24.840 --> 26:25.740
没了意思吧

26:25.740 --> 26:27.040
如果说你没有的话

26:27.040 --> 26:29.140
那么就读取什么呢

26:29.140 --> 26:33.440
读取dotm文件

26:33.440 --> 26:34.840
那么也就是说我们可以在

26:34.840 --> 26:37.140
在我们的网站的根目度下边

26:37.140 --> 26:39.240
去新建一个根目度

26:39.240 --> 26:40.840
一定要是m文件

26:40.840 --> 26:42.540
那么这里边可以去设置辨量

26:42.540 --> 26:44.440
比方说我们的辨量里面并没有abc

26:44.440 --> 26:45.540
那么我们这里呢

26:45.540 --> 26:48.740
去给它定一个abc等于

26:48.740 --> 26:50.240
好那么这样的我们来看一下

26:50.240 --> 26:51.440
我们在这里边

26:51.440 --> 26:57.040
去输出一下process.nv.abc

26:57.040 --> 26:57.940
好咱们来看一下

26:57.940 --> 27:01.700
能不能输出得到结果

27:01.700 --> 27:03.000
npm说

27:03.000 --> 27:05.100
按理说是可以得到结果的

27:05.700 --> 27:07.700
因为它这个东西会被替换成什么

27:07.700 --> 27:12.080
替换成e

27:12.080 --> 27:13.880
那么这里这样吧

27:13.880 --> 27:15.380
abc

27:15.380 --> 27:16.480
好

27:16.480 --> 27:17.580
现在我们来看一下

27:17.580 --> 27:18.880
有结果吗

27:18.880 --> 27:19.780
刷新

27:19.780 --> 27:20.980
是不是undefine的

27:20.980 --> 27:22.180
为什么没有结果呢

27:22.180 --> 27:24.480
它不是说可以替换吗

27:24.480 --> 27:25.680
是因为这个原因

27:25.680 --> 27:27.180
文用可力呢

27:27.180 --> 27:28.480
它做了一些处理

27:28.480 --> 27:30.480
它一些普通的环境边上呢

27:30.480 --> 27:31.780
它是不会做任

27:31.780 --> 27:34.380
不会在不会进行替换的

27:34.380 --> 27:36.080
那么这个东西有什么都得不到

27:36.080 --> 27:38.280
是一个undefine的

27:38.280 --> 27:40.380
什么环境边上它会给你替换的

27:40.380 --> 27:42.080
第一个是n

27:42.080 --> 27:44.080
这个环境边上它会给你替换

27:44.080 --> 27:45.980
然后这个环境边上你最好不要去动它

27:45.980 --> 27:47.880
因为它是唯有自动控制的

27:47.880 --> 27:49.180
就是通过稍微迷你了

27:49.180 --> 27:50.480
它这个环境边上就会设为

27:50.480 --> 27:52.080
development

27:52.080 --> 27:52.680
beauty

27:52.680 --> 27:55.680
它的环境边上就会设为perfection

27:55.680 --> 27:57.380
这个东西最好不要去动它

27:57.380 --> 27:58.680
还有什么环境边上可以

27:58.680 --> 27:59.780
可以被替换的

27:59.780 --> 28:01.680
还有一个叫做bseo

28:01.680 --> 28:03.480
这东西呢

28:03.480 --> 28:04.280
这东西是什么呢

28:04.280 --> 28:06.580
这个东西我们下一个再说吧

28:06.580 --> 28:07.880
表示我们网站

28:07.880 --> 28:11.180
就是我们的静态资源部署的基地址

28:11.180 --> 28:12.880
我们之后再说

28:12.880 --> 28:13.580
那么这个东西

28:13.580 --> 28:15.980
也就是我们代码如果说用到了它

28:18.080 --> 28:18.680
UIO

28:18.680 --> 28:20.680
那么这个东西是会被替换的

28:20.680 --> 28:22.280
它的默认值呢就是一个邪纲

28:22.280 --> 28:26.490
我们来看一下

28:26.490 --> 28:28.590
它的默认值就是一个邪纲

28:28.590 --> 28:30.290
bseo

28:31.890 --> 28:32.990
bseo

28:32.990 --> 28:33.290
看一下

28:34.490 --> 28:36.290
相信你看是不是一个邪纲

28:36.390 --> 28:39.190
这个东西也不要尽量也不要去动它

28:39.190 --> 28:41.490
那么其他的变量它是不会替换的

28:41.490 --> 28:44.090
除非你满足这样的命运规则

28:44.090 --> 28:46.490
叫做app下滑线

28:46.490 --> 28:47.990
5u下滑线

28:47.990 --> 28:51.090
后边的你随便写比方说写个appc

28:51.090 --> 28:52.690
我们一般都大写

28:52.690 --> 28:54.290
那么等于这样的变

28:54.290 --> 28:56.390
哎没有分号

28:56.390 --> 28:57.790
这样的变了还能被替换

28:57.790 --> 29:00.090
也说它有个前处叫app下滑线

29:00.090 --> 29:01.190
5u下滑线

29:01.190 --> 29:03.790
后边跟上一个制定的名称

29:03.790 --> 29:05.890
这样的类型的变量它会被替换

29:05.890 --> 29:07.790
也说我们在这里边

29:07.790 --> 29:09.290
如果说我们要这样的写的话才行

29:13.990 --> 29:15.790
你看这样的变了就可以被替换

29:15.790 --> 29:16.690
现在我们来看一下

29:16.690 --> 29:18.390
刷新现在目前上迪范为什么

29:18.390 --> 29:21.590
因为我们改动的环境变量需要重启服务器

29:21.590 --> 29:22.090
网络

29:26.710 --> 29:29.280
看一下啊

29:29.280 --> 29:29.680
刷新

29:33.540 --> 29:35.140
等一下我看一下这里边

29:35.140 --> 29:35.840
我拿的写错了

29:42.220 --> 29:44.220
5uapp下滑线

29:48.170 --> 29:51.590
没问题啊

29:51.590 --> 29:52.290
我看一下啊

29:54.190 --> 29:55.690
哦我这里写反了是吧

29:55.690 --> 29:56.790
应该是5uapp

29:56.790 --> 29:59.890
啊不是app5uapp appc

29:59.890 --> 30:01.390
那么这边改一下啊

30:02.690 --> 30:04.090
改一下重新启动一些

30:07.000 --> 30:08.500
改了环境变量得重新启动啊

30:12.610 --> 30:13.510
好这边刷新

30:15.110 --> 30:16.210
这边啊刷新

30:16.210 --> 30:17.410
你看是不得到一了

30:18.110 --> 30:19.810
他就会把这个表达式呢

30:19.810 --> 30:21.310
就直接替换成了一

30:21.810 --> 30:23.910
他不是说给他复制啊

30:23.910 --> 30:24.610
不是的

30:24.610 --> 30:26.410
他在那个我们最终打爆结果里面

30:26.410 --> 30:27.610
他代码变成这个样子了

30:28.410 --> 30:31.110
这就是我们是用环境变量

30:31.110 --> 30:32.910
那么如果说我要在生产环境

30:32.910 --> 30:34.810
比方说我们有这么一个环境变量

30:35.210 --> 30:36.610
他在生产环境里边

30:36.610 --> 30:39.110
和在开发环境里边是不一样的

30:39.710 --> 30:40.410
那怎么办呢

30:40.410 --> 30:42.110
我们又如何来区分呢

30:42.110 --> 30:43.910
因为我们用环境变量其实就是这个目的

30:43.910 --> 30:44.410
对吧

30:44.410 --> 30:46.410
他生产环境跟开发环境还不一样

30:46.810 --> 30:48.210
那我们来如何区分呢

30:48.310 --> 30:49.410
其实我们可以这样子

30:49.610 --> 30:50.510
我们可以写

30:50.510 --> 30:53.010
他可以支持多种格式的这个M文件

30:53.810 --> 30:55.610
你看一下他这里边告诉你啊

30:55.810 --> 30:57.510
环境变量他会支持这么一些文件

30:57.510 --> 30:58.710
我们就直接说吧

30:58.710 --> 30:59.610
因为他这里呢

30:59.610 --> 31:01.910
我又可以他其实把这个事情搞得很复杂啊

31:01.910 --> 31:03.110
但是我们平时开发的话

31:03.110 --> 31:04.310
用不到这么复杂的东西

31:04.810 --> 31:05.610
我们这里呢

31:05.610 --> 31:06.510
可以这样子来做

31:08.110 --> 31:09.410
这个M5里边的东西呢

31:09.410 --> 31:11.810
就是无论你是开发环境

31:11.810 --> 31:12.710
还是生产环境啊

31:12.710 --> 31:13.910
你只要有这个M5文件

31:13.910 --> 31:14.910
那么都会读取

31:14.910 --> 31:15.810
都会被读取

31:16.410 --> 31:17.610
好然后我们看一下

31:17.610 --> 31:19.310
他还可以支持一些别的后维

31:19.410 --> 31:20.810
比方说我们后边可以介绍一个

31:23.210 --> 31:24.510
那么这个文件呢

31:24.610 --> 31:26.710
只有在开发环境里边

31:27.110 --> 31:28.410
才会被读取

31:28.810 --> 31:30.910
那么这个如果说你使用的是

31:33.760 --> 31:34.560
production

31:35.160 --> 31:36.160
那么这个文件呢

31:36.160 --> 31:37.160
他只会在

31:37.860 --> 31:39.560
生产环境里边被读取

31:40.260 --> 31:41.460
好咱们来看一下啊

31:41.560 --> 31:42.160
我们这里呢

31:42.160 --> 31:44.260
就使用一个5u

31:44.760 --> 31:45.360
abc吗

31:45.360 --> 31:46.160
就放到这吧

31:46.160 --> 31:47.360
然后呢我们在这边呢

31:47.360 --> 31:48.360
去使用一个

31:51.480 --> 31:52.780
5u app

31:55.090 --> 31:55.690
bcd

31:56.190 --> 31:56.790
等于

31:59.090 --> 31:59.590
d

32:00.290 --> 32:01.290
dv

32:01.890 --> 32:02.490
123

32:03.090 --> 32:04.290
就随便下线一个啊

32:04.690 --> 32:05.890
在前面没有点啊

32:07.490 --> 32:08.690
好这边production呢

32:08.690 --> 32:09.490
我有写个

32:10.990 --> 32:12.290
pro123

32:12.790 --> 32:14.690
好那么现在我们有几个环境变量

32:15.390 --> 32:16.990
就是我们自己定义的有几个

32:17.190 --> 32:18.090
是有两个啊

32:18.190 --> 32:20.190
一个是M5变量里边定义的abc

32:20.590 --> 32:21.490
一个呢是

32:22.490 --> 32:24.190
开发环境里边有一个bcd

32:24.190 --> 32:25.490
生产环境里边也有个bcd

32:25.490 --> 32:26.890
他们的只是不一样的

32:27.290 --> 32:29.190
那么这个时候他会怎么来运作呢

32:29.290 --> 32:30.890
当我们在运行这个命令的时候

32:30.890 --> 32:31.790
他会进行打包

32:33.090 --> 32:33.890
那么打包的时候

32:33.890 --> 32:35.190
他就会读去的环境变量

32:35.290 --> 32:36.890
他会读到我们有两个环境变量

32:36.890 --> 32:38.290
因此他会就他会在

32:38.490 --> 32:40.090
我们的代码里面进行替换

32:40.490 --> 32:41.290
他会把这个

32:41.790 --> 32:42.990
abc替换成1

32:42.990 --> 32:43.590
这个没问题

32:43.590 --> 32:44.590
我们之前就做过了

32:44.890 --> 32:46.290
然后呢就bcd呢

32:47.390 --> 32:48.190
bcd呢

32:48.290 --> 32:49.590
那么他就会根据环境

32:49.690 --> 32:52.190
如果说你用这个s5命令进行打包的话

32:52.190 --> 32:53.690
那么他会只会读这两个

32:53.890 --> 32:54.790
这个和这个

32:54.890 --> 32:56.090
他只会读这两个

32:56.190 --> 32:57.790
如果说你用那个bu的命令

32:57.790 --> 32:58.890
就是生产环境打包的话

32:58.890 --> 32:59.890
他就会读这两个

33:00.290 --> 33:01.090
就这么简单

33:01.890 --> 33:04.290
然后读出来过是不是读到环境变量了

33:04.290 --> 33:05.290
然后再进行替换

33:05.690 --> 33:06.390
所以说我们这里的

33:06.390 --> 33:07.590
看到这个bcd呢

33:07.690 --> 33:10.290
应该是abc肯定是一样的

33:10.590 --> 33:11.390
bcd呢

33:11.390 --> 33:12.890
他有可能是

33:13.390 --> 33:13.990
123

33:13.990 --> 33:15.690
有可能是pro123

33:15.990 --> 33:17.190
那么目前是开发环境

33:17.190 --> 33:18.890
所以他读到的是debu123

33:18.990 --> 33:21.120
你看一下

33:21.420 --> 33:21.820
这边

33:22.620 --> 33:23.820
就读到debu123

33:24.020 --> 33:25.820
那如果说你是生产环境的话

33:25.920 --> 33:26.620
我们来看一下

33:26.920 --> 33:28.020
N屏被撞掉了

33:34.360 --> 33:35.260
好打包完成

33:35.560 --> 33:37.060
接下来我们看刚才那个

33:37.360 --> 33:37.860
这边

33:39.060 --> 33:39.760
在运行

33:42.820 --> 33:44.420
你看读到的是pro123

33:45.320 --> 33:46.420
明白这个意思了吧

33:46.920 --> 33:48.520
明白这里该怎么去处理的吗

33:48.820 --> 33:49.820
这该怎么处理

33:49.920 --> 33:51.720
就是我们刚才那个问题

33:51.920 --> 33:54.220
一一第一种方式是用使用这个判断

33:54.220 --> 33:55.820
那判断的鞋子起来太恶心了

33:56.220 --> 33:57.620
最好是用什么样处理的

33:57.920 --> 33:59.120
最好就是用这种方式

33:59.920 --> 34:00.520
我们定

34:00.520 --> 34:02.020
这个这个东西不要了啊

34:02.320 --> 34:02.820
不要了

34:03.320 --> 34:04.620
我们在这个地方

34:04.620 --> 34:07.120
我们去定一个bass

34:08.220 --> 34:09.420
或者叫做那个

34:10.220 --> 34:11.020
阿迦克斯

34:11.820 --> 34:14.220
或者叫做server

34:14.620 --> 34:15.120
bass

34:15.320 --> 34:17.420
有这么的数据服务器的地址

34:17.420 --> 34:18.120
基地址

34:18.420 --> 34:20.420
在开发环境里面呢

34:20.420 --> 34:21.120
莫认是这个

34:22.820 --> 34:23.920
3w test

34:23.920 --> 34:24.520
要靠

34:26.120 --> 34:28.120
好在生产环境里面呢

34:28.120 --> 34:29.020
是另外一个地址

34:31.020 --> 34:31.820
是都一

34:33.320 --> 34:34.020
service

34:34.220 --> 34:34.720
要靠

34:35.820 --> 34:36.320
对吧

34:36.520 --> 34:38.620
哎我们是不是这里是不是可以用这两个地址啊

34:39.120 --> 34:39.620
对不对

34:39.720 --> 34:41.020
然后呢我们在news

34:41.320 --> 34:42.620
new里边呢在这里边

34:43.720 --> 34:44.820
我们就不用什么做成

34:44.920 --> 34:46.420
这些判断一个都不用做了

34:46.720 --> 34:47.820
好那么请求谁

34:47.920 --> 34:49.720
请求就是process

34:49.720 --> 34:50.220
m

34:51.220 --> 34:52.020
server

34:53.920 --> 34:54.420
bass

34:58.000 --> 34:58.800
好看一下啊

34:59.100 --> 35:00.400
那么我们看一下生产环境

35:01.900 --> 35:02.700
优安社

35:09.290 --> 35:09.890
好看一下

35:12.380 --> 35:13.280
生产环境里边

35:13.280 --> 35:13.920
哎怎么说

35:15.680 --> 35:17.480
哦哦哦哦我这里写错了啊

35:18.280 --> 35:19.780
应该是前面还有一个前綴

35:22.710 --> 35:24.010
好你看生产环境是不是

35:24.010 --> 35:25.310
开发环境是不是请求这个

35:25.510 --> 35:26.610
然后呢我们生产环境

35:26.810 --> 35:27.410
装备

35:28.810 --> 35:29.810
这个毫不疑问的啊

35:31.790 --> 35:32.190
打包

35:32.290 --> 35:33.190
ok打包完成

35:33.490 --> 35:34.290
我们看一下这边

35:35.290 --> 35:36.890
这边我们对刷新一下

35:37.590 --> 35:39.190
你看请求是不是这个地址

35:39.590 --> 35:39.990
对吧

35:40.590 --> 35:41.890
那么我们之后的代码是不是写一下

35:41.890 --> 35:42.590
更加轻松一点

35:42.590 --> 35:43.790
你不用去写什么判断

35:43.790 --> 35:45.590
你直接用它来作为基地执行

35:45.690 --> 35:47.090
比方说你在用废棋的时候

35:47.290 --> 35:49.590
是不是在前面拼接的拼接什么拼接这个东西

35:50.290 --> 35:51.990
啊当然了有时候那这样子拼接

35:51.990 --> 35:53.090
说的每次都拼接

35:53.590 --> 35:54.990
也挺麻烦的对不对

35:54.990 --> 35:55.990
然后能不能

35:56.990 --> 35:58.490
呃方便一点的

35:58.490 --> 36:00.290
这个还要你自己自己去搞定的啊

36:00.290 --> 36:01.890
比方说你可以封装一个请求嘛

36:01.890 --> 36:04.190
就像我们之前封装的那个xx请求一样

36:04.490 --> 36:04.990
对吧

36:05.290 --> 36:08.190
xx其实有这样的呃配置可以支持啊

36:08.190 --> 36:09.290
你设置一个基地址

36:09.290 --> 36:11.290
那么之后呢都是基于这个基地址的

36:11.490 --> 36:12.690
那么如果说你用废棋的话

36:12.690 --> 36:13.890
也可以自己去封装一下

36:13.890 --> 36:15.290
比方说封装一个request

36:15.690 --> 36:17.390
这个request做的事情很简单啊

36:17.790 --> 36:20.090
比方说我们就导出一个地方请

36:20.990 --> 36:22.490
你给我一些

36:23.090 --> 36:24.490
第一个UIL地址啊

36:24.490 --> 36:25.690
后边是一些参数啊

36:25.690 --> 36:26.390
我不管他

36:26.490 --> 36:28.790
然后呢我提示我就邦利去调用

36:29.490 --> 36:31.390
邦利调用废棋就这么简单

36:31.890 --> 36:32.990
UIL传进去

36:32.990 --> 36:33.590
然后呢

36:34.490 --> 36:35.490
OQ传进去

36:35.890 --> 36:37.290
稍微封装一下

36:37.290 --> 36:37.990
那么只不过呢

36:37.990 --> 36:39.290
我在这个UIL地址前面呢

36:39.290 --> 36:40.590
给它拼接上一个什么的

36:41.690 --> 36:42.490
拼接上一个

36:44.860 --> 36:45.960
拼接上一个就是

36:47.060 --> 36:48.560
process your amp

36:49.760 --> 36:51.260
然后点server

36:51.860 --> 36:53.160
ur base ur

36:55.670 --> 36:56.670
就拼接上这么一关

36:58.970 --> 37:00.570
对吧我来帮你做这个事

37:00.570 --> 37:01.970
那么之后呢你就用封装

37:01.970 --> 37:03.470
封装好了这个就是

37:05.770 --> 37:06.770
封装好了这个就是

37:06.770 --> 37:09.070
封装好了这个request用完事了

37:09.070 --> 37:10.270
那么我们到时候就怎么写了

37:10.270 --> 37:11.070
就可以这样子去

37:11.370 --> 37:14.570
import request from request

37:14.870 --> 37:16.170
然后呢我们之后呢就用它

37:19.100 --> 37:20.600
这个去请求什么呢

37:20.600 --> 37:21.600
请求

37:21.600 --> 37:23.700
表达请求API news

37:24.400 --> 37:25.100
举个例子吧

37:25.100 --> 37:25.900
举下举个例子

37:25.900 --> 37:27.800
当然这个现在这个结果拿不到了

37:27.800 --> 37:29.400
因为没这个地址并不存在

37:30.600 --> 37:30.900
好

37:30.900 --> 37:32.400
表达我们现在就这样写了啊

37:32.400 --> 37:33.100
我们来看一下吧

37:33.100 --> 37:34.000
MPM装

37:34.000 --> 37:34.600
server

37:34.600 --> 37:35.300
它请求的地址呢

37:35.300 --> 37:37.100
肯定就是我们开放好另一个地址

37:37.100 --> 37:38.100
生产房积另一个地址

37:38.100 --> 37:38.300
对吧

37:38.300 --> 37:39.700
这个稍微封装一下就OK了

37:41.380 --> 37:42.880
我们这里刷新一下

37:43.380 --> 37:43.880
刷新

37:43.880 --> 37:45.380
当然这个请求肯定是拿不到的

37:45.680 --> 37:46.580
但是它也可以看到

37:46.580 --> 37:48.980
它目前在尝试的去请求这个地址

37:50.380 --> 37:50.780
OK啊

37:50.780 --> 37:51.680
那么这就是我们

37:51.680 --> 37:52.580
这里和讲的东西

37:52.580 --> 37:54.980
其实我们这里和讲了这么一种场景

37:55.280 --> 37:56.380
其实我们这个环境变量呢

37:56.380 --> 37:58.080
也不一定只是用这个场景

37:58.080 --> 37:59.780
讲了你们开发工作中

37:59.780 --> 38:02.280
如果说你发现你在生产环境里边

38:02.280 --> 38:03.780
和跟你在开发阶段

38:03.780 --> 38:05.680
有些东西它是不一样的

38:05.680 --> 38:06.880
那么你就可以考虑

38:06.880 --> 38:09.380
使用这个环境变量来搞定这件事情

38:10.080 --> 38:10.880
我这里也

38:10.980 --> 38:12.180
详细的讲了这个环境变量

38:12.180 --> 38:13.380
它是怎么起作用的

38:13.780 --> 38:14.980
它其实就是一个替换

38:16.880 --> 38:18.180
OK啊

38:18.180 --> 38:19.980
那么这里边我就讲到这了啊

38:19.980 --> 38:20.980
都是这里和的那种

