WEBVTT

00:00.050 --> 00:02.870
这节课呢我们讲一讲关于维尤克利的配置

00:03.630 --> 00:09.270
这个配置呢大部分配置呢我们平时开发都用不上啊我们今天主要是重点讲一讲这个

00:10.030 --> 00:11.830
public pass这个配置

00:12.090 --> 00:16.690
因为这个玩意可能是你们的以后在公司里面做实际项目的时候可能会用上的

00:18.490 --> 00:21.810
维尤克说吧这里边有个官方的文档啊你可以进去看一下

00:22.810 --> 00:23.810
为什么这么卡

00:24.810 --> 00:31.810
这里边就讲到了关于这个vueconfig.js啊就是我现在有个项目这个项目呢就是我们入门阶段做那个项目啊

00:32.810 --> 00:39.810
里边我们是不是在跟目录下面见到这么一个东西啊vueconfig.js对吧我们当时呢做一个配置啊就是配置了一下这个dev server

00:40.810 --> 00:44.810
这个dev server配置没什么好说的啊就跟那个的vipackdev server是完全一样的

00:45.810 --> 00:49.810
如果说你想看这里边的详细配置的话你就去这个这个的官网

00:49.810 --> 00:51.810
就是vipackdev server

00:52.810 --> 00:53.810
你看他他里边什么配置的

00:55.810 --> 01:01.810
我们现在说第二个public pass这个配置呢也是在这个vueconfig.js里面配置的

01:02.810 --> 01:06.810
那么其实关于这个配置啊就vueclear配置他配置了是啥呀

01:07.810 --> 01:11.810
配置的全都是跟打包相关的因为这个工具它就是用来打包的

01:12.810 --> 01:15.810
它不参与运行啊运行的时候就是vue的功能啊

01:15.810 --> 01:19.810
他就是打包的说说跟打包相关的配置呢你们都可以去参考这个文档啊

01:20.810 --> 01:23.810
这里边有很多很多的配置不过大部分配置呢我们平时都用不上

01:24.810 --> 01:31.810
说一下这个public pass其实这个配置呢就跟那个vipack里边的public pass呢是一样的

01:32.810 --> 01:37.810
道理是一样的只不过他把它抽离到了这个vueclear里边的配置里边了

01:38.810 --> 01:39.810
也有我们这里呢可以配置个public pass

01:40.810 --> 01:45.810
那么这个玩意有什么用的他为什么说我们以后的开发的钟可能会用到呢是因为这个样子

01:46.810 --> 01:49.810
就是我们打包出来不是有这么些东西吗对吧有一个

01:50.810 --> 01:54.810
一个index一个页面有js有image有css

01:56.810 --> 02:01.810
很多情况下呢我们希望把这个东西呢上传到我们的生产环境就是我们的生产环境的服务器

02:02.810 --> 02:07.810
那么上传过去呢过后呢我们一般是把它上传到根木路啥意思啊

02:07.810 --> 02:10.810
就是说我们将来呢如果说我们访问那个

02:12.810 --> 02:15.810
比方说我们上传的服务器地址是度112度1调抗

02:16.810 --> 02:18.810
那么我们访问这个页面怎么访问呢

02:19.810 --> 02:20.810
直接就是index这个设定没有这样访问

02:21.810 --> 02:24.810
原来的意思吧啊当然呢因为是单页应用程序吗

02:25.810 --> 02:27.810
其实你这里访问任何地址他都会访问到这个页面啊

02:28.810 --> 02:31.810
访问这个东西也是到这个页面访问任何地址会到这个页面啊

02:32.810 --> 02:35.810
那么到这个东西呢到以后到服务器那边是需要简单的处理一下就ok了

02:36.810 --> 02:40.810
如果说你要访问图片比方说我要访问这个图片

02:41.810 --> 02:43.810
该怎么访问的比方访问这张图片啊

02:44.810 --> 02:47.810
我们应该是用这种方式借脾气来访问

02:48.810 --> 02:51.810
这就是哎呗这里还给我念讲啊也没几

02:52.810 --> 02:54.810
所以要用这种方式来访问这是默认情况下啊

02:55.810 --> 02:57.810
那么我又可立这个工程了他也默认情况下

02:58.810 --> 02:59.810
认为你就应该是用这种方式来访问

03:00.810 --> 03:03.810
比方说你要访问这个GS比方说访问这个吧

03:03.810 --> 03:08.810
访问这个就随便找一个吧这个GS那么你访问的方式呢应该是这样的访问的

03:09.810 --> 03:15.810
都一要靠啊然后GS用这种方式来访问这个GS对吧

03:16.810 --> 03:19.810
这是默认情况下那么默认情况下你不需要做任何的配置

03:20.810 --> 03:23.810
那么就已经ok了这个配置是不需要的啊他默认值就是一个鞋杠

03:25.810 --> 03:29.810
那么如果说你的服务器那边不是那种情况

03:30.810 --> 03:32.810
你的服务器那边是有一个硬设比方说啊举个例子

03:33.810 --> 03:36.810
你们开发的这个工程呢可能他不是一个完整的项目

03:37.810 --> 03:41.810
因为我们有可能一个项目特别特别大他可能要把它切成一个一个的小的项目

03:42.810 --> 03:45.810
比方说你们做的是新闻板块这个新闻板块呢是用五幼开发的

03:46.810 --> 03:51.810
另外一部分团队呢他做的是那个用户板块那么这个板块的是另外一个团队在开发

03:52.810 --> 03:54.810
到时候合并的时候呢他就可能会希望这个样子

03:55.810 --> 03:58.810
你新闻团队的东西呢全部放到这个

03:59.810 --> 04:03.810
新闻团队的东西全部放到这个纸目录下面

04:05.810 --> 04:07.810
比方说你的页面在这

04:08.810 --> 04:13.810
当然你由于是由于是单页应用程序你这边后边写了任何地址你都会访问到新闻

04:14.810 --> 04:18.810
比方说你现在做的就是新闻啊假设啊你现在做的就是一个新闻的板块

04:19.810 --> 04:23.810
那么这个板块写还在后边任何的地址呢都会访问到这个银这个资料一天没有

04:24.810 --> 04:25.810
明儿的意思吧

04:26.810 --> 04:31.810
那么你的GS呢也是到这也是在这个目录下面比方说你要访问GS你应该是用这个地址去访问

04:33.810 --> 04:35.810
那边服务器是可以配置的啊是可以做一个硬设的

04:36.810 --> 04:37.810
明儿的意思吧

04:38.810 --> 04:40.810
那么这样子来会出什么样的问题呢

04:41.810 --> 04:43.810
如果说你不加一控制的话你保留他的默认值

04:44.810 --> 04:48.810
我们看一下会出什么样的问题你这样打包出来的ATM首先你这你打包出来的ATM呢

04:49.810 --> 04:50.810
我们来把它格式化一下

04:51.810 --> 04:52.810
你看它里边引用的路径

04:53.810 --> 04:54.810
这里重新打包一次啊

04:57.630 --> 04:58.630
npm装备

04:59.630 --> 05:02.200
它会清楚这个电神部路

05:03.200 --> 05:10.630
稍等啊打不出来了

05:11.630 --> 05:12.630
好咱们看一下吧

05:16.800 --> 05:17.800
看一下这个index

05:18.800 --> 05:19.800
我们把格式化一下啊

05:20.800 --> 05:24.800
好格式化一下我们看一下这里边的关于CSS关于GS关于图片的各种引用

05:25.800 --> 05:26.800
看下一下正不正确

05:27.800 --> 05:30.800
好首先我们来看一下这些CSS GS它的引用地址认确吗

05:32.800 --> 05:34.800
比方说我们往下看啊

05:35.800 --> 05:36.800
正确吗

05:36.800 --> 05:37.800
这些地址

05:38.800 --> 05:39.800
我这里写错了

05:40.800 --> 05:42.800
这里是有问题的再重新打包一次

05:48.820 --> 05:49.820
稍等啊

05:49.820 --> 05:50.820
好出发了

05:51.820 --> 05:54.820
好接下来我们来看一下这引用地址认不正确啊

05:57.780 --> 05:58.780
我们来看一下CSS

05:59.780 --> 06:00.780
因为我们的页面怎么来访问

06:00.780 --> 06:03.780
现在我们打包出来的结果要访问这个页面应该是怎么访问的

06:03.780 --> 06:05.780
应该是3w.doe.com

06:05.780 --> 06:06.780
它不是这样的访问的

06:06.780 --> 06:09.780
它里边后来是不是跟到一个指路径啊叫news

06:10.780 --> 06:11.780
要用这种路径去访问

06:11.780 --> 06:13.780
那么这样路径访问出来了

06:13.780 --> 06:15.780
你就拿到了什么拿到这个页面

06:16.780 --> 06:18.780
当然呢因为是单页应用程序嘛

06:18.780 --> 06:22.780
所以说这个路径后边的什么A什么B什么C

06:22.780 --> 06:23.780
其实访问的都是这个页面啊

06:23.780 --> 06:24.780
同一个页面

06:25.780 --> 06:26.780
无论是怎么样

06:26.780 --> 06:28.780
它前面一定是跟了一个60

06:28.780 --> 06:29.780
没了意思吧

06:29.780 --> 06:32.780
好那么现在的比方说我们就用这个地址去访问我们的页面

06:32.780 --> 06:33.780
拿到这个页面

06:33.780 --> 06:36.780
拿到了之后你看它这个页面要读一些GS

06:36.780 --> 06:37.780
读一些CSS

06:37.780 --> 06:38.780
它怎么读的

06:38.780 --> 06:40.780
它是用的是这个一个鞋杠

06:40.780 --> 06:42.780
一个鞋杠是什么意思

06:42.780 --> 06:43.780
绝对如今

06:43.780 --> 06:44.780
就前面

06:44.780 --> 06:45.780
协议

06:46.780 --> 06:47.780
用我们当前的协议

06:48.780 --> 06:50.780
我们网页当前的协议

06:50.780 --> 06:52.780
域名呢也用这个域名

06:52.780 --> 06:54.780
端口号也用这个80端口号

06:56.780 --> 06:57.780
然后一个鞋杠

06:57.780 --> 06:59.780
因此这个地址会被解析成什么呢

06:59.780 --> 07:01.780
游烂机会去请求它

07:01.780 --> 07:09.120
游烂机会去请求这个地址

07:09.120 --> 07:11.120
那里看会不会出问题

07:11.120 --> 07:13.750
会不会出问题啊

07:13.750 --> 07:14.750
肯定会出问题啊

07:14.750 --> 07:15.750
那么这个CSS

07:15.750 --> 07:17.750
它实际上是请求不到的

07:17.750 --> 07:18.750
为什么呢

07:18.750 --> 07:20.750
因为我们整个打包出来的结果

07:20.750 --> 07:22.750
都是要放到一个纸目录下面

07:22.750 --> 07:24.750
就是60个纸目录下面

07:24.750 --> 07:27.750
准确来说应该叫纸路径

07:27.750 --> 07:29.750
放到这个纸路径下面

07:29.750 --> 07:30.750
结果我们的CSS

07:30.750 --> 07:31.750
有没有在这个纸路径下面

07:31.750 --> 07:32.750
没有

07:32.750 --> 07:33.750
我们的CSS

07:33.750 --> 07:34.750
应该怎么访问

07:34.750 --> 07:35.750
应该是用60

07:35.750 --> 07:36.750
这种方式来访问

07:36.750 --> 07:37.750
所以

07:37.750 --> 07:38.750
这个以后里面要学习

07:38.750 --> 07:39.750
这个部署知识和服务器知识

07:39.750 --> 07:40.750
过后

07:40.750 --> 07:42.750
你们才能深刻的理解

07:42.750 --> 07:43.750
但是我现在就告诉你

07:43.750 --> 07:44.750
你总之这个CSS

07:44.750 --> 07:45.750
所有的东西啊

07:45.750 --> 07:46.750
你打包出来的所有东西

07:46.750 --> 07:48.750
都前面都必须要加个60

07:48.750 --> 07:49.750
才能访问得到

07:49.750 --> 07:51.750
因此如果说你不加处理的话

07:51.750 --> 07:53.750
到时候到了生产环境

07:53.750 --> 07:54.750
你这个CSS就访问不到了

07:54.750 --> 07:55.750
同样的道理

07:55.750 --> 07:56.750
GS这些都访问不到了

07:56.750 --> 07:57.750
你看全部要钱

07:57.750 --> 07:58.750
前面要加上一个60

07:58.750 --> 07:59.750
才能访问

07:59.750 --> 08:00.750
那么这个public pass

08:00.750 --> 08:01.750
起什么作用

08:01.750 --> 08:03.750
它就是起这个作用

08:03.750 --> 08:04.750
默认是一个鞋杠

08:04.750 --> 08:05.750
默认鞋杠什么意思

08:05.750 --> 08:07.750
就表示的是根路径

08:07.750 --> 08:08.750
从根路径进行访问

08:08.750 --> 08:09.750
那么如果说

08:09.750 --> 08:10.750
你不是这种情况

08:10.750 --> 08:11.750
你只是开发了

08:11.750 --> 08:12.750
其中一个板块

08:12.750 --> 08:14.750
它可能有一个基础路径

08:14.750 --> 08:16.750
那么你这里要写上一个use

08:16.750 --> 08:18.750
就这么简单

08:18.750 --> 08:19.750
你这样一写过后

08:19.750 --> 08:20.750
我们再打包看一下

08:22.750 --> 08:23.750
当然无论是生产环境

08:23.750 --> 08:24.750
你这样写了过后

08:24.750 --> 08:25.750
无论是生产环境

08:25.750 --> 08:26.750
还是开发环境

08:26.750 --> 08:27.750
它都会影响

08:27.750 --> 08:28.750
如果说你希望

08:28.750 --> 08:30.750
根据生产环境和开发环境不同

08:30.750 --> 08:31.750
那么你这里

08:31.750 --> 08:32.750
可以是不是可以判断

08:32.750 --> 08:35.750
process.env

08:35.750 --> 08:36.750
可以通过它来判断

08:36.750 --> 08:37.750
你到底是生产环境

08:37.750 --> 08:38.750
还是开发环境

08:38.750 --> 08:39.750
对吧

08:39.750 --> 08:41.750
你可以判断一下

08:41.750 --> 08:42.750
那么这个玩意

08:42.750 --> 08:43.750
我们是之前讲过

08:43.750 --> 08:44.750
不过这个地方

08:44.750 --> 08:45.750
跟我们上节课讲的

08:45.750 --> 08:46.750
不同的地方在于

08:46.750 --> 08:48.750
因为这个是在漏的环境里面运行

08:48.750 --> 08:49.750
现在还没有生成了打包结果

08:49.750 --> 08:50.750
对吧

08:50.750 --> 08:52.750
这个玩意也不生成了打包结果

08:52.750 --> 08:53.750
所以说

08:53.750 --> 08:54.750
是在漏的环境里面运行

08:54.750 --> 08:55.750
它打包的过程中

08:55.750 --> 08:57.750
它就会图当前的环境变量

08:57.750 --> 08:59.750
这是真人八经的环境变量

08:59.750 --> 09:01.750
它不是用一个长量来替换的

09:01.750 --> 09:03.750
总之你可以用的

09:03.750 --> 09:04.750
我们这里就

09:04.750 --> 09:05.750
比方说一致

09:05.750 --> 09:07.750
比方好演示

09:07.750 --> 09:08.750
那么这样子

09:08.750 --> 09:09.750
你打包出来过后

09:09.750 --> 09:10.750
你看

09:10.750 --> 09:12.750
我们现在要做打包出来的过后

09:12.750 --> 09:14.750
我们看一下电视目录

09:14.750 --> 09:15.750
它前面

09:15.750 --> 09:17.750
由于受到Public Pass的影响

09:17.750 --> 09:19.750
它所谓的路径前面都会加上这个

09:19.750 --> 09:20.750
对吧

09:20.750 --> 09:21.750
访问GS 访问CSS

09:21.750 --> 09:22.750
你看

09:22.750 --> 09:23.750
全部都会加上这个

09:23.750 --> 09:24.750
于是

09:24.750 --> 09:26.750
我们将来访问CSS的时候

09:26.750 --> 09:27.750
才不至于找不到

09:27.750 --> 09:29.750
就这么个一夜市

09:29.750 --> 09:30.750
明白吧

09:30.750 --> 09:31.750
那么我们这一块

09:31.750 --> 09:33.750
它同样会影响开发环境

09:33.750 --> 09:34.750
开发环境的

09:34.750 --> 09:35.750
它服务其他会自动帮你处理

09:35.750 --> 09:36.750
你这里不用管它

09:36.750 --> 09:37.750
那么我们来看一下

09:37.750 --> 09:39.750
这样子做了过后

09:40.750 --> 09:47.290
你看

09:47.290 --> 09:48.290
它这里告诉你

09:48.290 --> 09:49.290
你访问我们的首页

09:49.290 --> 09:50.290
应该访问啥

09:50.290 --> 09:51.290
应该访问这个地址

09:51.290 --> 09:53.290
我们来打开看一下

09:53.290 --> 09:55.290
可以访问到了

09:55.290 --> 09:56.290
但是访问到过后

09:56.290 --> 09:57.290
你会发现我们当时

09:57.290 --> 09:58.290
当时做这个网站

09:58.290 --> 09:59.290
就出了问题

09:59.290 --> 10:00.290
它变成404了

10:00.290 --> 10:01.290
不是应该是首页吗

10:01.290 --> 10:02.290
为什么变成404呢

10:02.290 --> 10:03.290
这是因为

10:03.290 --> 10:05.290
我们的路由不知道

10:05.290 --> 10:06.290
因为我们里边用到的什么

10:06.290 --> 10:07.290
ViewRotor

10:07.290 --> 10:08.290
你看我这里顺便讲一下

10:08.290 --> 10:09.290
路由的问题

10:09.290 --> 10:11.290
路由里边不知道

10:11.290 --> 10:12.290
路由里边

10:12.290 --> 10:13.290
它认为

10:13.290 --> 10:15.290
这个路由规则来匹配

10:15.290 --> 10:16.290
对吧

10:16.290 --> 10:17.290
我们的首页是这个地址

10:17.290 --> 10:19.290
它不是一个写杠六四

10:19.290 --> 10:20.290
对不对

10:20.290 --> 10:21.290
那么这样子

10:21.290 --> 10:22.290
路由它就不知道

10:22.290 --> 10:23.290
因为它路由以匹配

10:23.290 --> 10:24.290
而匹配不上

10:24.290 --> 10:25.290
这个地址匹配不上的

10:25.290 --> 10:26.290
匹配不上就是404了

10:26.290 --> 10:27.290
所以说我们

10:27.290 --> 10:28.290
这些GS

10:28.290 --> 10:29.290
CSS

10:29.290 --> 10:30.290
这些图片

10:30.290 --> 10:31.290
我们都能够正常访问到

10:31.290 --> 10:32.290
但是

10:32.290 --> 10:33.290
路由它不知道

10:33.290 --> 10:34.290
匹配我们的主件的时候

10:34.290 --> 10:35.290
匹配不到

10:35.290 --> 10:36.290
那怎么办呢

10:36.290 --> 10:37.290
其实也非常简单

10:37.290 --> 10:39.290
你千万不要在这里写

10:39.290 --> 10:40.290
因为这里写的话

10:40.290 --> 10:41.290
你一把

10:41.290 --> 10:42.290
可不可以

10:42.290 --> 10:43.290
这样写的话

10:43.290 --> 10:44.290
你一把写死了

10:45.290 --> 10:46.290
你看

10:46.290 --> 10:47.290
倒是可以

10:47.290 --> 10:48.290
将来你要改的话

10:48.290 --> 10:49.290
比如说基础路径

10:49.290 --> 10:50.290
有可能开发环境

10:50.290 --> 10:51.290
跟服务器环境不一样

10:51.290 --> 10:52.290
或者是服务器环境

10:52.290 --> 10:53.290
有可能将来有些变化

10:53.290 --> 10:54.290
那你看这些路径

10:54.290 --> 10:55.290
是不是全要改

10:55.290 --> 10:56.290
对吧

10:56.290 --> 10:57.290
到处都要写

10:57.290 --> 10:58.290
你就把它写死了

10:58.290 --> 10:59.290
你最好不要这样子写

10:59.290 --> 11:00.290
那怎么办呢

11:00.290 --> 11:01.290
你其实非常简单

11:01.290 --> 11:02.290
你在路由里边

11:02.290 --> 11:04.290
创建一个路由对象的时候

11:04.290 --> 11:05.290
其实这里边

11:05.290 --> 11:06.290
就可以有一个配置

11:06.290 --> 11:07.290
叫BEST

11:07.290 --> 11:08.290
高速路由

11:08.290 --> 11:09.290
我们的基地指示啥

11:09.290 --> 11:10.290
基地指示啥

11:11.290 --> 11:12.290
就这么简单

11:12.290 --> 11:13.290
你看现在就可以了

11:14.290 --> 11:16.290
而且路由它非常智能

11:16.290 --> 11:18.290
它不仅会影响到

11:18.290 --> 11:20.290
你看它会发现这个地址

11:20.290 --> 11:21.290
它这个地址

11:21.290 --> 11:22.290
就匹配上了BEST

11:22.290 --> 11:24.290
那么它会把BEST去掉

11:24.290 --> 11:25.290
那么它相当于路由匹配的

11:25.290 --> 11:27.290
实际上是只有这个

11:27.290 --> 11:28.290
然后我们的

11:28.290 --> 11:29.290
就是通过这些

11:29.290 --> 11:31.290
就是通过RouterLink

11:31.290 --> 11:32.290
这些A元数

11:32.290 --> 11:33.290
你看称称的地址

11:33.290 --> 11:34.290
也是正确的

11:34.290 --> 11:35.290
你看左下角

11:35.290 --> 11:39.710
怎么去掉

11:39.710 --> 11:41.710
你看左下角

11:43.710 --> 11:44.710
过去

11:44.710 --> 11:45.710
你自己看吧

11:45.710 --> 11:46.710
左下角

11:46.710 --> 11:47.710
看到没

11:47.710 --> 11:48.710
是不是这个NewsArticle

11:48.710 --> 11:49.710
点文章

11:49.710 --> 11:51.710
你看跳到哪呢

11:51.710 --> 11:53.710
跳到NewsArticle

11:53.710 --> 11:54.710
也就是这些RouterLink

11:54.710 --> 11:56.710
它在链接的时候

11:56.710 --> 11:57.710
它也会自动的

11:57.710 --> 11:59.710
把基地指加上

11:59.710 --> 12:00.710
所以你其他的开发站

12:00.710 --> 12:01.710
你就不用去关心

12:01.710 --> 12:03.710
有没有基地指的问题

12:03.710 --> 12:04.710
因为当它没有

12:04.710 --> 12:05.710
那么只需要在这里配置一下

12:05.710 --> 12:06.710
就OK了

12:06.710 --> 12:07.710
其实这样的配置

12:07.710 --> 12:09.710
其实也不是非常的好

12:09.710 --> 12:10.710
为什么不是非常的好了

12:10.710 --> 12:11.710
因为你这样子

12:11.710 --> 12:12.710
其实都有重复

12:12.710 --> 12:13.710
这个News

12:13.710 --> 12:14.710
跟我们的配置

12:14.710 --> 12:15.710
就是Wheel Config

12:15.710 --> 12:16.710
里面的配置是一样的

12:18.710 --> 12:20.710
所以有重复

12:20.710 --> 12:21.710
那么这个情况

12:21.710 --> 12:22.710
我们最好能够

12:22.710 --> 12:23.710
消除这个重复

12:23.710 --> 12:24.710
就这边配一次就够了

12:24.710 --> 12:25.710
那怎么办呢

12:25.710 --> 12:26.710
其实我这边

12:26.710 --> 12:27.710
已经给大家写出来了

12:27.710 --> 12:28.710
这边

12:28.710 --> 12:29.710
我们输出了一个叫

12:29.710 --> 12:31.710
ProcessM-BaseUIO

12:31.710 --> 12:32.710
就是我们上节课

12:32.710 --> 12:33.710
还没有讲的这个东西

12:33.710 --> 12:34.710
我们知道

12:34.710 --> 12:35.710
在上节课

12:35.710 --> 12:36.710
我们讲的过程中

12:36.710 --> 12:37.710
我们说了

12:37.710 --> 12:38.710
最终打包出来的代码

12:38.710 --> 12:39.710
这个东西都会被替换掉

12:39.710 --> 12:40.710
它会替换掉哪些呢

12:40.710 --> 12:41.710
它会替换掉这些东西

12:41.710 --> 12:43.710
一个是

12:43.710 --> 12:44.710
LoadM

12:44.710 --> 12:45.710
这样的环境面量

12:45.710 --> 12:46.710
会被替换

12:46.710 --> 12:48.710
然后还有的是BaseUIO

12:48.710 --> 12:49.710
还有什么呢

12:49.710 --> 12:50.710
我们上节课讲的就是

12:50.710 --> 12:51.710
WheelApp

12:51.710 --> 12:52.710
后边

12:52.710 --> 12:53.710
什么东西

12:53.710 --> 12:55.710
后边写自己去定义

12:55.710 --> 12:56.710
这些东西都会被替换

12:56.710 --> 12:58.710
替换成环境面量

12:58.710 --> 12:59.710
那么这个BaseUIO

12:59.710 --> 13:00.710
它是环境面量

13:00.710 --> 13:01.710
是自动夹载的

13:01.710 --> 13:02.710
它会夹载什么呢

13:02.710 --> 13:03.710
它会夹载

13:03.710 --> 13:05.710
我们的在Wheel Config里面的

13:05.710 --> 13:06.710
配置的Pipic Pass

13:06.710 --> 13:07.710
它会夹载这个

13:07.710 --> 13:08.710
那么这个配置

13:08.710 --> 13:09.710
为60

13:09.710 --> 13:10.710
那么环境面量里面

13:10.710 --> 13:11.710
这个东西

13:11.710 --> 13:13.710
它就是

13:13.710 --> 13:14.710
就这么简单

13:14.710 --> 13:15.710
因此我们这边

13:15.710 --> 13:16.710
是不是可以用这个环境面量

13:16.710 --> 13:18.710
你看我这里输出了

13:18.710 --> 13:19.710
输出这个环境面量

13:19.710 --> 13:20.710
我们打印出来看一下

13:20.710 --> 13:24.410
你看是不是得到60

13:24.410 --> 13:25.410
因此我们完全可以

13:25.410 --> 13:26.410
把这个环境面量

13:26.410 --> 13:29.780
写到这个位置

13:29.780 --> 13:30.780
这样子的

13:30.780 --> 13:31.780
我们就有达到了

13:31.780 --> 13:32.780
一处配置就OK了

13:32.780 --> 13:33.780
配置一下Pipic Pass

13:33.780 --> 13:34.780
好

13:34.780 --> 13:35.780
那我们看一下

13:35.780 --> 13:36.780
首先我们这些GS

13:36.780 --> 13:37.780
CSS读取

13:37.780 --> 13:38.780
肯定是没问题的

13:38.780 --> 13:39.780
你看介面这些

13:39.780 --> 13:40.780
GS都用运行

13:40.780 --> 13:41.780
对吧

13:41.780 --> 13:42.780
然后我们可以看到

13:42.780 --> 13:43.780
路径前面

13:43.780 --> 13:45.780
都会加上一个基地址

13:45.780 --> 13:46.780
留置

13:46.780 --> 13:47.780
明白这意思吗

13:47.780 --> 13:48.780
就这么个意思

13:48.780 --> 13:49.780
所以说我们将来

13:49.780 --> 13:50.780
如说遇到这么一种

13:50.780 --> 13:51.780
场景的情况下

13:51.780 --> 13:52.780
这种场景还是

13:52.780 --> 13:53.780
非常有可能会遇到的

13:53.780 --> 13:54.780
那么你注意一下

13:54.780 --> 13:55.780
怎么说的

13:55.780 --> 13:56.780
操作非常简单

13:56.780 --> 13:57.780
配置一下Pipic Pass

13:57.780 --> 13:59.780
然后再路由这一块

13:59.780 --> 14:01.780
加上这么一个东西

14:01.780 --> 14:02.780
Bass

14:02.780 --> 14:03.780
就完了

14:03.780 --> 14:05.780
我就说一下这个

14:05.780 --> 14:06.780
然后剩下的东西

14:06.780 --> 14:07.780
我们大概看一下吧

14:07.780 --> 14:08.780
看一下

14:08.780 --> 14:09.780
说一下就完

14:09.780 --> 14:10.780
OK了

14:10.780 --> 14:11.780
非常简单

14:12.780 --> 14:13.780
这个东西是配置什么呢

14:13.780 --> 14:15.780
配置的是我们输出目录

14:15.780 --> 14:16.780
我们默认的情况下

14:16.780 --> 14:17.780
输出目录

14:17.780 --> 14:18.780
是在这个目录下面

14:18.780 --> 14:20.780
如果说你看它不爽的话

14:20.780 --> 14:21.780
你可以把它调整到

14:21.780 --> 14:22.780
别的目录名字

14:22.780 --> 14:23.780
或者说

14:23.780 --> 14:24.780
或者调整到别的路径都可以

14:24.780 --> 14:25.780
也配置这个

14:25.780 --> 14:26.780
outputs.dr

14:26.780 --> 14:27.780
它是一个字不错

14:28.780 --> 14:29.780
下一个

14:29.780 --> 14:31.780
是ROMPAM Compiler

14:31.780 --> 14:32.780
这个我们之前说过了

14:32.780 --> 14:33.780
对吧

14:33.780 --> 14:34.780
默认情况下

14:34.780 --> 14:35.780
伍佑在打包的时候

14:35.780 --> 14:36.780
是不会把那个

14:36.780 --> 14:37.780
编译代码

14:37.780 --> 14:38.780
就是编译模板的代码

14:38.780 --> 14:40.780
生成的打包结果

14:40.780 --> 14:41.780
就是运行是编译

14:41.780 --> 14:42.780
这个功能是没有的

14:42.780 --> 14:43.780
为什么没有呢

14:43.780 --> 14:44.780
因为它是有个预编译

14:44.780 --> 14:45.780
在编

14:45.780 --> 14:46.780
在打包的时候

14:46.780 --> 14:47.780
它就已经把这些主件

14:47.780 --> 14:48.780
这些单文件主件

14:49.780 --> 14:51.780
它就已经把这些单文件主件

14:51.780 --> 14:53.780
这东西模板就生成了Render

14:53.780 --> 14:55.780
所以说我们不需要在

14:55.780 --> 14:56.780
运行的过程中

14:56.780 --> 14:57.780
再去编译模板了

14:57.780 --> 14:58.780
因此它不会把

14:58.780 --> 14:59.780
编译的功能

14:59.780 --> 15:01.780
加入到我们的打包结果

15:01.780 --> 15:02.780
这样子是为了

15:02.780 --> 15:03.780
减少打包解极

15:04.780 --> 15:05.780
如果说你需要在

15:05.780 --> 15:06.780
运行的过程中

15:06.780 --> 15:07.780
动态的编译一些东西的话

15:07.780 --> 15:09.780
那么你需要把它设为

15:09.780 --> 15:10.780
你就在这里

15:11.780 --> 15:13.780
Round Time Compiler

15:14.780 --> 15:16.780
把设为去就ok

15:16.780 --> 15:17.780
就这么简单

15:18.780 --> 15:19.780
这是关于这一块

15:21.780 --> 15:23.780
当然这里可以给你提示的

15:23.780 --> 15:24.780
它会

15:24.780 --> 15:25.780
如果说你把设为去的话

15:25.780 --> 15:26.780
那么编译结果

15:26.780 --> 15:27.780
就是打包结果里面

15:27.780 --> 15:28.780
会加入到这个编译代码

15:28.780 --> 15:30.780
那么会增加打包

15:30.780 --> 15:32.780
体积10KB左右

15:33.780 --> 15:34.780
下一个就是跟我们相关的

15:34.780 --> 15:35.780
有可能会用到的

15:35.780 --> 15:37.780
就是Chance Pile Dependences

15:38.780 --> 15:39.780
这个东西

15:39.780 --> 15:40.780
这个玩意就是

15:40.780 --> 15:41.780
因为我们

15:41.780 --> 15:42.780
在维又颗粒里边

15:42.780 --> 15:44.780
它是自动加入了这个Bable

15:44.780 --> 15:45.780
做什么呢

15:45.780 --> 15:46.780
做来降级的对吧

15:46.780 --> 15:48.780
对JS代码做兼容性处理的

15:48.780 --> 15:49.780
那么这个Bable

15:49.780 --> 15:50.780
它会忽略掉

15:50.780 --> 15:51.780
Node Modules 模组下面的文件

15:51.780 --> 15:52.780
就是这里边的文件

15:52.780 --> 15:53.780
它不会做降级处理

15:54.780 --> 15:55.780
为什么呢

15:55.780 --> 15:56.780
因为大部分第三方裤

15:56.780 --> 15:57.780
它就已经做好了

15:57.780 --> 15:58.780
降级处理的

15:58.780 --> 15:59.780
你没有必要再重新去

16:00.780 --> 16:01.780
用Bable编译

16:01.780 --> 16:02.780
没必要

16:02.780 --> 16:03.780
这样子的

16:03.780 --> 16:05.780
无畏的增加编译时间

16:05.780 --> 16:06.780
打包时间

16:06.780 --> 16:07.780
去掉了这里边的Node Modules

16:07.780 --> 16:09.780
如果说你需要开启的话

16:09.780 --> 16:10.780
如果说你这里边的东西

16:10.780 --> 16:11.780
有些第三方裤

16:11.780 --> 16:13.780
可能它本身

16:13.780 --> 16:14.780
没有做那个

16:14.780 --> 16:15.780
兼容性处理

16:15.780 --> 16:16.780
你需要

16:16.780 --> 16:17.780
用在我们的工程里边

16:17.780 --> 16:18.780
做兼容性处理

16:18.780 --> 16:19.780
那么你去配这个

16:19.780 --> 16:20.780
Chance Pile Dependences

16:20.780 --> 16:21.780
它是一个数组

16:21.780 --> 16:22.780
这个数组里边

16:22.780 --> 16:23.780
每一项

16:23.780 --> 16:24.780
它就是匹配包的名字

16:24.780 --> 16:25.780
比方说我举个例子

16:28.780 --> 16:33.270
这配置非常简单

16:33.270 --> 16:34.270
没事的时候

16:34.270 --> 16:35.270
可以去看一下吧

16:35.270 --> 16:36.270
这非常简单

16:36.270 --> 16:38.270
比方说我们写上一个数组

16:39.270 --> 16:40.270
默认情况下

16:40.270 --> 16:42.270
像我们的Actuals

16:43.270 --> 16:44.270
它是不会做

16:45.270 --> 16:46.270
兼容性处理的

16:46.270 --> 16:47.270
因为Actuals本身的裤

16:47.270 --> 16:49.270
它作为一个第三方裤

16:49.270 --> 16:51.270
一个大面积使用的第三方裤

16:51.270 --> 16:52.270
它肯定是一个一个的做了

16:53.270 --> 16:54.270
如果说

16:54.270 --> 16:55.270
假设Actuals没做

16:55.270 --> 16:56.270
那么你这里

16:56.270 --> 16:57.270
需要把它

16:57.270 --> 16:58.270
降级处理的话

16:58.270 --> 16:59.270
那么你给它配置上一个Actuals

16:59.270 --> 17:00.270
就这么简单

17:00.270 --> 17:01.270
那么它就会对它

17:01.270 --> 17:02.270
对它做了兼容性处理

17:02.270 --> 17:03.270
就这么简单

17:03.270 --> 17:04.270
它是关于这个

17:05.270 --> 17:06.270
下一个

17:06.270 --> 17:07.270
Configure with Pack

17:08.270 --> 17:09.270
这我们以前也是讲过了

17:09.270 --> 17:10.270
对吧

17:10.270 --> 17:11.270
如果说你有一些自定义的

17:11.270 --> 17:12.270
Wepack配置的话

17:12.270 --> 17:13.270
我们就可以通过这个

17:14.270 --> 17:15.270
Config

17:16.270 --> 17:17.270
Wepack

17:18.270 --> 17:19.270
通过这个来进行配置

17:19.270 --> 17:20.270
那么这个呢

17:20.270 --> 17:21.270
你可以把配置回一个对象

17:21.270 --> 17:23.270
那么这里边就是Wepack配置了

17:24.270 --> 17:25.270
纯粹的Wepack配置

17:27.270 --> 17:28.270
那么你可以自己写

17:28.270 --> 17:29.270
我们之前在入门阶段中做过的

17:30.270 --> 17:31.270
下一个

17:32.270 --> 17:33.270
CSS Require

17:34.270 --> 17:35.270
Module Extension

17:36.270 --> 17:37.270
这是跟CSS相关的配置

17:38.270 --> 17:39.270
那么这个东西配置

17:39.270 --> 17:40.270
是什么意思呢

17:40.270 --> 17:41.270
就是默认情况下

17:41.270 --> 17:42.270
无诱

17:42.270 --> 17:43.270
它是没有开启

17:43.270 --> 17:44.270
这个CSS Module

17:45.270 --> 17:46.270
它只有对哪种文件的

17:46.270 --> 17:47.270
只有对这种文件

17:48.270 --> 17:50.270
后维是以Module第二

17:50.270 --> 17:51.270
后维结尾的

17:51.270 --> 17:52.270
那么它才会把它

17:52.270 --> 17:54.270
视为一个CSS Module模块

17:54.270 --> 17:55.270
那么这里边的内鸣

17:55.270 --> 17:56.270
还会进行

17:56.270 --> 17:57.270
做唯一化处理

17:58.270 --> 17:59.270
你还认识吗

17:59.270 --> 18:00.270
那如果说你把

18:00.270 --> 18:01.270
这个东西

18:01.270 --> 18:02.270
设为Force的过后

18:02.270 --> 18:03.270
它默认是开启的

18:06.270 --> 18:07.270
这样配置

18:08.270 --> 18:09.270
你把它设为Force的过后

18:11.270 --> 18:12.270
那么你就可以

18:12.270 --> 18:14.270
所有的CSS文件

18:14.270 --> 18:15.270
它告诉你

18:15.270 --> 18:16.270
所有的CSS

18:16.270 --> 18:18.270
SARS, NAS, Stainless

18:18.270 --> 18:19.270
这个也是一个

18:20.270 --> 18:21.270
Stainless

18:21.270 --> 18:22.270
也是一个就是

18:22.270 --> 18:23.270
预编一系

18:24.270 --> 18:25.270
这些文件

18:25.270 --> 18:26.270
它都会被视为

18:26.270 --> 18:27.270
CSS Module

18:27.270 --> 18:28.270
就这么简单

18:29.270 --> 18:30.270
你之前如果说

18:30.270 --> 18:31.270
默认情况下

18:31.270 --> 18:32.270
它只有那个

18:32.270 --> 18:33.270
以Module

18:33.270 --> 18:34.270
中间有个Module

18:34.270 --> 18:35.270
这种文件

18:35.270 --> 18:36.270
它会被视为

18:36.270 --> 18:37.270
就这么简单

18:37.270 --> 18:38.270
这里边说一下

18:38.270 --> 18:39.270
如果说你有需要的话

18:39.270 --> 18:40.270
你配置一下

18:40.270 --> 18:41.270
就OK

18:42.270 --> 18:43.270
其他就没了

18:43.270 --> 18:44.270
然后就是

18:44.270 --> 18:45.270
我们工程中

18:45.270 --> 18:46.270
可能会设定到一些

18:46.270 --> 18:47.270
Bable的配置

18:47.270 --> 18:48.270
比方说你Bable一些

18:48.270 --> 18:49.270
自己特别的配置

18:49.270 --> 18:50.270
其实它都给你配置好了

18:50.270 --> 18:51.270
一般情况下

18:51.270 --> 18:52.270
都不用去管它

18:52.270 --> 18:53.270
如果说你有这样的配置的话

18:53.270 --> 18:54.270
你去

18:54.270 --> 18:56.270
在这个文件里边去写

18:56.270 --> 18:57.270
它给你加了一个预设

18:57.270 --> 18:58.270
就是

18:59.270 --> 19:01.270
Wheel Clear Plugging

19:01.270 --> 19:02.270
Bable Preset

19:02.270 --> 19:03.270
给你加这么一个预设

19:03.270 --> 19:04.270
就已经够用了

19:04.270 --> 19:05.270
如果说

19:05.270 --> 19:06.270
一些特别的配置的话

19:06.270 --> 19:07.270
你可以去配置这里

19:07.270 --> 19:08.270
Bable的配置

19:08.270 --> 19:09.270
那么具体的Bable的配置

19:09.270 --> 19:10.270
那就设计到Bable了

19:10.270 --> 19:11.270
我们之前在讲

19:11.270 --> 19:12.270
工程化的时候

19:12.270 --> 19:13.270
都影响过了

19:14.270 --> 19:15.270
ESlims

19:15.270 --> 19:16.270
如果说你有相对于

19:16.270 --> 19:17.270
就是针对ESlims的配置的话

19:17.270 --> 19:18.270
你应该去配置

19:18.270 --> 19:19.270
这个地方

19:19.270 --> 19:20.270
或者这个地方

19:20.270 --> 19:21.270
跟一支

19:21.270 --> 19:22.270
写个配置文件就OK

19:24.270 --> 19:25.270
比方说这里边

19:25.270 --> 19:26.270
好像有一个

19:26.270 --> 19:27.270
这里面没有

19:27.270 --> 19:28.270
如果说你有的话

19:28.270 --> 19:29.270
那么就可以在这里配置了

19:29.270 --> 19:30.270
如果说你有Pose

19:30.270 --> 19:31.270
CC的配置的话

19:31.270 --> 19:32.270
你就写到

19:32.270 --> 19:33.270
跟Module下面

19:33.270 --> 19:34.270
Pose CC

19:35.270 --> 19:36.270
那么就是有

19:36.270 --> 19:37.270
具体怎么写

19:37.270 --> 19:38.270
那就是

19:38.270 --> 19:39.270
这个的问题了

19:39.270 --> 19:40.270
这个的问题了

19:40.270 --> 19:41.270
我们之前讲的

19:41.270 --> 19:42.270
工程化的时候

19:42.270 --> 19:43.270
都已经讲过了

19:44.270 --> 19:45.270
OK

19:45.270 --> 19:46.270
那么这就是关于

19:46.270 --> 19:47.270
这个Wheel Clear的配置

19:47.270 --> 19:48.270
也非常的简单

19:48.270 --> 19:49.270
我总动点说了一下

19:49.270 --> 19:50.270
Public Pass

19:50.270 --> 19:51.270
这跟你们以后

19:51.270 --> 19:53.270
很有可能有关系的

19:53.270 --> 19:54.270
其他的

19:54.270 --> 19:55.270
你如果说

19:55.270 --> 19:56.270
真的遇到一些

19:56.270 --> 19:57.270
特别的场景的话

19:57.270 --> 19:58.270
你可以去看一下

19:58.270 --> 19:59.270
这些文档

19:59.270 --> 20:00.270
反而是跟打包相关的

20:00.270 --> 20:01.270
也会参考Wheel Clear

20:01.270 --> 20:03.270
反而是跟运行相关的

20:03.270 --> 20:04.270
那跟Wheel Clear

20:04.270 --> 20:05.270
就可以

20:05.270 --> 20:06.270
就可以已经没有关系了

20:06.270 --> 20:08.270
跟Wheel本身是有关系的

20:08.270 --> 20:09.270
好了

20:09.270 --> 20:10.270
最后我们就讲到这了

