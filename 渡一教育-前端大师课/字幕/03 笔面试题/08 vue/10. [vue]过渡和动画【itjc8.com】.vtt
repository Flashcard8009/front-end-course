WEBVTT

00:00.180 --> 00:03.780
这就可能咱们来聊一聊一点实用性质的东西

00:03.780 --> 00:05.580
就是在你们以后的开发中

00:05.580 --> 00:09.980
可能页面上会有一些过渡或者是动画效果

00:09.980 --> 00:13.580
那么这些东西在五幼框架里边如何去开发

00:14.580 --> 00:19.180
实际上五幼它作为一个具有普世性的框架

00:19.180 --> 00:21.780
不太关心这个动画和过渡的

00:21.780 --> 00:25.780
很多时候过渡化和过渡你们需要自行去处理

00:25.780 --> 00:29.180
那么在处理的时候该怎么来进行处理呢

00:29.380 --> 00:33.780
因为五幼这个框架本身的用来很多时候都是用来写前端的东西

00:33.780 --> 00:35.180
对吧 前端的页面

00:36.180 --> 00:40.180
那么我们用了技术的还是ATM和CSS以及GS

00:40.180 --> 00:43.980
那么来回顾一下在我们的一个原生页面里边

00:43.980 --> 00:45.380
我们要实现一个动画

00:46.580 --> 00:48.180
那么应该去怎么来做呢

00:48.180 --> 00:49.480
无非就是两种技术啊

00:49.480 --> 00:50.980
从技术的角度来分的话

00:50.980 --> 00:53.880
无非就是两种一种就是CSS

00:54.880 --> 00:58.880
动画或者是过渡过渡

00:59.880 --> 01:01.880
还有就是GS动画

01:01.880 --> 01:04.880
无非实现技术就这么两种

01:04.880 --> 01:07.880
那么这两种因为我这个字体怎么又变回来了

01:07.880 --> 01:08.880
看的很不爽啊

01:09.880 --> 01:11.880
能不能不要变回来

01:21.990 --> 01:23.990
一种就是GS动画

01:24.990 --> 01:27.990
那么这两种东西在五幼的框架开发中呢

01:27.990 --> 01:28.990
应该怎么去应用呢

01:28.990 --> 01:29.990
其实特别简单

01:29.990 --> 01:32.990
你看我们之前入门阶段那个首页

01:32.990 --> 01:34.990
不至于是应用了一个过渡效果对吧

01:35.990 --> 01:36.990
那么它就是一个CSS

01:37.990 --> 01:39.990
这个东西呢并不复杂

01:39.990 --> 01:42.990
比方说我们CSS里面要么就是有两个属性吗

01:42.990 --> 01:43.990
一个是全C型

01:44.990 --> 01:46.990
一个是animate

01:52.990 --> 01:54.990
无非就是这么两个CSS属性对不对

01:54.990 --> 01:56.990
所以说你要用CSS过渡啊

01:56.990 --> 01:57.990
或者是动画

01:57.990 --> 01:58.990
特别简单

01:58.990 --> 02:02.990
你就在适当的时机给一个元素加上一个内样式

02:03.990 --> 02:04.990
那个内样式呢

02:04.990 --> 02:06.990
它具有全C型这么一个值

02:07.990 --> 02:09.990
然后你把它变到另外一个位置

02:09.990 --> 02:11.990
或者是变到另外一个状态

02:11.990 --> 02:12.990
它自然而然就有过渡了

02:13.990 --> 02:15.990
animate呢也是一样

02:16.990 --> 02:17.990
我们在适当的时候呢

02:17.990 --> 02:18.990
给它加上一个内样式

02:18.990 --> 02:20.990
然后呢具有一个animate属性

02:21.990 --> 02:22.990
然后呢这个属性呢

02:22.990 --> 02:24.990
它去应用了一个动画效果

02:24.990 --> 02:25.990
就这么简单

02:25.990 --> 02:28.990
给你们平时写原生的CSS没有什么区别

02:28.990 --> 02:29.990
这是这一个点

02:30.990 --> 02:31.990
另外呢就是

02:31.990 --> 02:34.990
GS动画呢在五幼里面该怎么来处理呢

02:34.990 --> 02:35.990
只要GS动画

02:35.990 --> 02:38.990
就是用GS来控制一个数据的变化

02:38.990 --> 02:40.990
控制一个元素

02:40.990 --> 02:42.990
比方说它的位置啊

02:42.990 --> 02:44.990
它的尺寸啊等等等等

02:44.990 --> 02:45.990
一些状态信息

02:45.990 --> 02:46.990
用GS来控制

02:46.990 --> 02:47.990
因为GS动画呢

02:47.990 --> 02:49.990
为什么还需要GS动画呢

02:49.990 --> 02:51.990
因为有的时候啊

02:51.990 --> 02:53.990
CSS动画它控制起来没有那么细

02:53.990 --> 02:54.990
没有那么灵活

02:54.990 --> 02:56.990
比方说我希望在某个时候暂停

02:56.990 --> 02:57.990
或者是倒回去

02:57.990 --> 02:59.990
或者倒回三分之一

02:59.990 --> 03:01.990
或者是某一个数字

03:01.990 --> 03:02.990
从一变到十

03:02.990 --> 03:03.990
然后经过的过程是

03:03.990 --> 03:04.990
一二三四五六七八九十

03:04.990 --> 03:05.990
那么这些东西呢

03:05.990 --> 03:06.990
都需要使用GS动画

03:06.990 --> 03:08.990
它控制的比较精细一点

03:09.990 --> 03:10.990
那么像这种东西

03:10.990 --> 03:11.990
在五幼里面怎么来处理呢

03:11.990 --> 03:13.990
其实这个东西很简单

03:13.990 --> 03:14.990
具体的处理方式呢

03:14.990 --> 03:15.990
我给大家提供一个思路啊

03:15.990 --> 03:17.990
就当然在

03:17.990 --> 03:18.990
实际的开发中呢

03:18.990 --> 03:19.990
具体情况具体分析

03:19.990 --> 03:21.990
因为我们开发是很灵活的

03:21.990 --> 03:22.990
不能把他学死了

03:23.990 --> 03:24.990
那怎么来处理呢

03:24.990 --> 03:25.990
特别简单比方说

03:25.990 --> 03:26.990
举个例子

03:26.990 --> 03:27.990
你要在页面上

03:27.990 --> 03:28.990
显示一个元素

03:28.990 --> 03:29.990
这个元素的位置呢

03:29.990 --> 03:31.990
会有一个动画效果的变化

03:31.990 --> 03:32.990
当然你可以使用

03:32.990 --> 03:33.990
CSS来做

03:33.990 --> 03:34.990
当然用GS的话

03:34.990 --> 03:36.990
用GS的话来怎么来做呢

03:36.990 --> 03:37.990
特别简单

03:37.990 --> 03:38.990
你不要说你在

03:38.990 --> 03:39.990
Tumblr里面

03:39.990 --> 03:41.990
你就写一个元素

03:41.990 --> 03:42.990
一个Element

03:42.990 --> 03:43.990
一个元素

03:43.990 --> 03:45.990
它的位置呢

03:45.990 --> 03:48.990
来源于

03:48.990 --> 03:49.990
数据

03:49.990 --> 03:50.990
就是它的位置

03:50.990 --> 03:51.990
它的到底处于哪个位置

03:51.990 --> 03:52.990
它就来源于数据

03:52.990 --> 03:53.990
这个数据就是我们的

03:53.990 --> 03:55.990
Data

03:55.990 --> 03:56.990
对吧

03:56.990 --> 03:58.990
Data里面要提供

03:58.990 --> 04:00.990
提供位置信息

04:00.990 --> 04:01.990
它横坐标是多少

04:01.990 --> 04:02.990
重坐标是多少

04:02.990 --> 04:03.990
那么这个

04:03.990 --> 04:04.990
在这边呢

04:04.990 --> 04:05.990
就设置它的Style样式

04:05.990 --> 04:07.990
那么样式就绑定

04:07.990 --> 04:08.990
它的位置信息

04:08.990 --> 04:09.990
这个很容易可以做到

04:09.990 --> 04:10.990
对吧

04:10.990 --> 04:11.990
那么这样子数据呢

04:11.990 --> 04:12.990
就提供给

04:12.990 --> 04:14.990
这个元素的位置了

04:14.990 --> 04:15.990
接下来我们要做的事情

04:15.990 --> 04:16.990
就是根据情况

04:16.990 --> 04:18.990
来改变它的位置

04:18.990 --> 04:19.990
比方说我们

04:19.990 --> 04:21.990
要从E变到10

04:21.990 --> 04:22.990
横坐标从E变到10

04:22.990 --> 04:23.990
那么我们可以

04:23.990 --> 04:25.990
设置一个SetTimeout

04:25.990 --> 04:27.990
然后从

04:27.990 --> 04:30.990
在合适的时候

04:30.990 --> 04:33.990
不断的改变位置

04:33.990 --> 04:34.990
改变Data

04:34.990 --> 04:36.990
我们设置一个SetTimeout

04:36.990 --> 04:38.990
然后不断的去

04:38.990 --> 04:40.990
改变它的位置

04:40.990 --> 04:41.990
那么这样子

04:41.990 --> 04:42.990
这个数据一变的话

04:42.990 --> 04:43.990
一面是不是就刷新了

04:43.990 --> 04:44.990
不断的刷新

04:44.990 --> 04:45.990
然后呢

04:45.990 --> 04:46.990
自然而然就

04:46.990 --> 04:47.990
确然出一个动画效果

04:47.990 --> 04:48.990
当这件事

04:48.990 --> 04:49.990
你可以利用一些

04:49.990 --> 04:50.990
第三方库来做

04:50.990 --> 04:52.990
比方说

04:52.990 --> 04:54.990
venocity

04:54.990 --> 04:56.990
或者是

04:56.990 --> 04:58.990
非常火的就是

04:58.990 --> 05:00.990
animate.js

05:00.990 --> 05:01.990
他们都可以

05:01.990 --> 05:03.990
能够控制一个数据

05:03.990 --> 05:04.990
从一个状态

05:04.990 --> 05:05.990
变成另一个状态

05:05.990 --> 05:06.990
而且是一个

05:06.990 --> 05:07.990
在指定的时间内

05:07.990 --> 05:09.990
完成这个状态的变化

05:09.990 --> 05:10.990
那么你只需要

05:10.990 --> 05:11.990
改变数据一晚上

05:11.990 --> 05:12.990
对吧

05:12.990 --> 05:13.990
这些其实

05:13.990 --> 05:14.990
我们不用去

05:14.990 --> 05:15.990
学习任何的新知识

05:15.990 --> 05:16.990
就用我们过去的

05:16.990 --> 05:17.990
完全可以做

05:17.990 --> 05:19.990
这是关于

05:19.990 --> 05:20.990
五幼里面

05:20.990 --> 05:21.990
如何来实现

05:21.990 --> 05:22.990
动画和过渡

05:22.990 --> 05:24.990
那么这里后面讲啥呢

05:24.990 --> 05:25.990
五幼呢

05:25.990 --> 05:26.990
它发现了

05:26.990 --> 05:28.990
其实很多时候的

05:28.990 --> 05:29.990
动画和过渡

05:29.990 --> 05:31.990
都发生在这么一个场景

05:31.990 --> 05:32.990
就是一个元素

05:32.990 --> 05:34.990
它以前没有

05:34.990 --> 05:35.990
现在出来了

05:35.990 --> 05:37.990
以现在一个元素

05:37.990 --> 05:38.990
要扔掉

05:38.990 --> 05:39.990
要消失

05:39.990 --> 05:40.990
因此呢

05:40.990 --> 05:41.990
五幼

05:41.990 --> 05:42.990
在参考了

05:42.990 --> 05:43.990
具体的

05:43.990 --> 05:44.990
各种网站

05:44.990 --> 05:47.990
他们的实际应用的时候

05:47.990 --> 05:48.990
最常出现的

05:48.990 --> 05:49.990
动画和过渡

05:49.990 --> 05:52.990
就是元素的出现和消失

05:52.990 --> 05:53.990
因此它为了让我们

05:53.990 --> 05:54.990
开发方便

05:54.990 --> 05:55.990
它给我们做了一个

05:55.990 --> 05:56.990
内置的组件

05:56.990 --> 05:57.990
交出来资讯

05:57.990 --> 05:58.990
当然你用

05:58.990 --> 05:59.990
可不可以不用它

05:59.990 --> 06:00.990
就用我们之前

06:00.990 --> 06:01.990
讲的这些东西

06:01.990 --> 06:02.990
可以啊

06:02.990 --> 06:03.990
你自己去控制

06:03.990 --> 06:04.990
它的事业生成那样

06:04.990 --> 06:05.990
是自己去控制

06:05.990 --> 06:06.990
它的状态信息

06:06.990 --> 06:07.990
当然是可以的

06:07.990 --> 06:08.990
只不过呢

06:08.990 --> 06:09.990
如果说你学习的

06:09.990 --> 06:10.990
这个东西的话

06:10.990 --> 06:12.990
它可以让我们开发

06:12.990 --> 06:13.990
有些常见的

06:13.990 --> 06:15.990
变得方便的一些

06:15.990 --> 06:16.990
仅此而已

06:16.990 --> 06:17.990
如果不要把这个玩意儿

06:17.990 --> 06:19.990
想象成一个必须要学会的

06:19.990 --> 06:21.990
其实也没有那么必须

06:21.990 --> 06:22.990
但是呢

06:22.990 --> 06:23.990
它确实给我们

06:23.990 --> 06:24.990
可以给我们开发

06:24.990 --> 06:25.990
提供一些便利

06:25.990 --> 06:26.990
好

06:26.990 --> 06:27.990
咱们来看一下

06:27.990 --> 06:28.990
内置组件

06:28.990 --> 06:29.990
它不能解决

06:29.990 --> 06:30.990
所有的问题

06:30.990 --> 06:31.990
就是说

06:31.990 --> 06:33.990
如果说有些

06:33.990 --> 06:34.990
场景

06:34.990 --> 06:37.990
不是一个元素出现

06:37.990 --> 06:38.990
或者是一个元素消失

06:38.990 --> 06:40.990
就是一个元素一直在那

06:40.990 --> 06:41.990
然后还要不断的变化

06:41.990 --> 06:42.990
那么这种场景下呢

06:42.990 --> 06:44.990
就不太适用于这个组件了

06:44.990 --> 06:45.990
一样的意思吧

06:45.990 --> 06:47.990
它是有适用场景的

06:47.990 --> 06:48.990
好

06:48.990 --> 06:49.990
咱们来看一下

06:49.990 --> 06:50.990
这个内置组件

06:50.990 --> 06:53.490
这里有个

06:53.490 --> 06:54.490
详细的官方文档

06:54.490 --> 06:55.490
它官方文档

06:55.490 --> 06:57.490
其实写得非常好了

06:57.490 --> 06:59.490
这有两个章节

06:59.490 --> 07:00.490
一个是进入

07:00.490 --> 07:01.490
离开列表过渡

07:01.490 --> 07:03.490
一个就是状态过渡

07:03.490 --> 07:04.490
状态过渡

07:04.490 --> 07:06.490
就是不使用那个组件了

07:06.490 --> 07:07.490
就用我们平时

07:07.490 --> 07:08.490
用GS

07:08.490 --> 07:09.490
用CSS

07:09.490 --> 07:10.490
去开发就OK了

07:10.490 --> 07:11.490
你可以都去看一下

07:11.490 --> 07:13.490
我这个结构

07:13.490 --> 07:15.490
肯定是把这个文档讲不完

07:15.490 --> 07:16.490
也没有必要讲完

07:16.490 --> 07:17.490
因为大家呢

07:17.490 --> 07:19.490
以后在真实的项目里边

07:19.490 --> 07:20.490
肯定要自编

07:20.490 --> 07:22.490
对照要做一些事情的时候

07:22.490 --> 07:23.490
要用一些API的时候

07:23.490 --> 07:25.490
肯定要去参考一下文档

07:25.490 --> 07:26.490
所以我们这节课呢

07:26.490 --> 07:28.490
只是把一些核心的概念

07:28.490 --> 07:29.490
给大家提出来

07:29.490 --> 07:31.490
如果说大家有兴趣的话

07:31.490 --> 07:32.490
听了这节课过后

07:32.490 --> 07:33.490
你就有能力去看懂

07:33.490 --> 07:34.490
这两篇文档了

07:34.490 --> 07:36.490
可能对一些同学来讲呢

07:36.490 --> 07:38.490
不听这节课

07:38.490 --> 07:39.490
直接去看文档的话

07:39.490 --> 07:40.490
会有点困难

07:40.490 --> 07:41.490
听了这节课过之后

07:41.490 --> 07:42.490
有了核心概念之后

07:42.490 --> 07:44.490
再去看文档比较简单多了

07:44.490 --> 07:47.490
好 咱们来看一下

07:47.490 --> 07:50.930
首先我们看第1个问题

07:50.930 --> 07:52.930
Trust-in它是一个组件

07:52.930 --> 07:53.930
它能做什么事情呢

07:53.930 --> 07:54.930
它会监控

07:54.930 --> 07:56.930
这个组件是有个插槽的

07:56.930 --> 07:57.930
也就是它什么意思呢

07:57.930 --> 07:59.930
比方说我们这里呢

07:59.930 --> 08:01.930
就写这么一个Trust-in

08:02.930 --> 08:03.930
它有个插槽

08:03.930 --> 08:04.930
那是不是我们

08:04.930 --> 08:05.930
可以在这边喘东西啊

08:05.930 --> 08:06.930
对不对

08:06.930 --> 08:08.930
就这个组件

08:08.930 --> 08:09.930
那么这个组件有什么作用呢

08:09.930 --> 08:11.930
它可以监控插槽中

08:11.930 --> 08:14.930
唯一根元素的出现和消失

08:14.930 --> 08:16.930
并会在其出现和消失的时候

08:16.930 --> 08:18.930
应用过度效果

08:18.930 --> 08:19.930
啥意思

08:19.930 --> 08:21.930
首先第1个点

08:21.930 --> 08:22.930
这个组件它里边

08:22.930 --> 08:23.930
不能有多个根元素

08:23.930 --> 08:25.930
比方说我这里随便写一些

08:26.930 --> 08:28.930
保存 你看一下

08:28.930 --> 08:31.370
我们的页面

08:31.370 --> 08:32.370
你会发现呢

08:32.370 --> 08:34.370
它这里显示出来的元素

08:34.370 --> 08:35.370
只有一个

08:35.370 --> 08:36.370
是不是只有它一个

08:36.370 --> 08:38.370
它没有显示出HR

08:38.370 --> 08:39.370
为什么呢

08:39.370 --> 08:40.370
它这里可以报道一个警告信息

08:40.370 --> 08:41.370
它说Trust-in

08:41.370 --> 08:42.370
只能用在

08:42.370 --> 08:45.370
一个唯一的根结点

08:45.370 --> 08:46.370
只能用在唯一的根结点

08:46.370 --> 08:47.370
现在有两根结点

08:47.370 --> 08:48.370
那肯定不行

08:48.370 --> 08:49.370
就在它内部啊

08:49.370 --> 08:51.370
那么这里边

08:51.370 --> 08:52.370
我能不能使用组件呢

08:52.370 --> 08:53.370
比方说一个

08:53.370 --> 08:55.370
我有一个组件叫MICOM

08:55.370 --> 08:56.370
可不可以使用组件呢

08:56.370 --> 08:58.370
可以

08:58.370 --> 09:00.370
当然你只能使用一个组件

09:00.370 --> 09:02.370
它会作用于什么呢

09:02.370 --> 09:03.370
它会作用到

09:03.370 --> 09:04.370
组件里边的根元素

09:04.370 --> 09:06.370
因为组件只有一个根元素

09:06.370 --> 09:07.370
它会作用到

09:07.370 --> 09:08.370
这个组件里边的根元素

09:08.370 --> 09:09.370
明白的意思吧

09:09.370 --> 09:11.370
啥就这么个意思

09:11.370 --> 09:12.370
总之它作用的对象

09:12.370 --> 09:13.370
作用的是谁呢

09:13.370 --> 09:14.370
作用的是

09:14.370 --> 09:17.370
它内部的根元素

09:17.370 --> 09:18.370
哪根元素

09:18.370 --> 09:19.370
就是DOM元素

09:19.370 --> 09:21.370
最终会生成DOM的元素

09:21.370 --> 09:22.370
它作用的是DOM

09:22.370 --> 09:24.370
而不是虚地结点

09:24.370 --> 09:25.370
就这么个意思

09:25.370 --> 09:27.370
因为它要应用动画

09:27.370 --> 09:28.370
你这个虚地结点

09:28.370 --> 09:29.370
像这个虚地结点

09:29.370 --> 09:30.370
用动画有什么意义呢

09:30.370 --> 09:31.370
没有什么意义

09:31.370 --> 09:34.370
它要作用到DOM元素

09:34.370 --> 09:35.370
就这么一个点

09:35.370 --> 09:39.880
那么它会做什么事情呢

09:39.880 --> 09:40.880
它会监控

09:40.880 --> 09:42.880
它里边的DOM元素

09:42.880 --> 09:44.880
出现和消失

09:44.880 --> 09:45.880
比方说这里

09:45.880 --> 09:46.880
我里边用了个组件

09:46.880 --> 09:47.880
这个组件里边的根元素

09:47.880 --> 09:48.880
假设这里

09:48.880 --> 09:49.880
组件里边的根元素

09:49.880 --> 09:50.880
是一个A元素

09:50.880 --> 09:51.880
那么它就会作用到

09:51.880 --> 09:53.880
这个A元素

09:53.880 --> 09:54.880
当它出现的时候

09:54.880 --> 09:56.880
它会应用出现效果

09:56.880 --> 09:57.880
让它消失的时候

09:57.880 --> 09:59.880
它会应用消失效果

09:59.880 --> 10:01.880
就这么个意思

10:01.880 --> 10:02.880
那么它监控的

10:02.880 --> 10:03.880
监听的内容是什么呢

10:03.880 --> 10:04.880
就是你要知道

10:04.880 --> 10:06.880
什么时候

10:06.880 --> 10:08.880
它会进行处理

10:08.880 --> 10:09.880
第一个

10:09.880 --> 10:10.880
我们来看一个

10:10.880 --> 10:12.880
就是它都会对比

10:12.880 --> 10:14.880
新就两个虚地结点进行对比

10:14.880 --> 10:15.880
因为我们知道

10:15.880 --> 10:16.880
这个数据更新

10:16.880 --> 10:18.880
可能会渲染不同的东西

10:18.880 --> 10:20.880
那么这个时候

10:20.880 --> 10:21.880
它会看一下

10:21.880 --> 10:22.880
新的虚地结点素

10:22.880 --> 10:24.880
和旧的都有虚地结点素

10:24.880 --> 10:25.880
就是这个根结点

10:25.880 --> 10:26.880
来进行对比

10:26.880 --> 10:28.880
比方说这里一个H

10:28.880 --> 10:31.880
我写了一个VIF

10:31.880 --> 10:33.880
比方说我们这里一个数据

10:33.880 --> 10:35.880
秀

10:35.880 --> 10:37.880
那么我们这里写个秀

10:37.880 --> 10:38.880
这里有个值

10:38.880 --> 10:40.880
然后有个H2

10:40.880 --> 10:41.880
有个VIF

10:41.880 --> 10:43.880
一个秀

10:43.880 --> 10:45.880
我们VL是吧

10:45.880 --> 10:47.880
这样子写行不行呢

10:47.880 --> 10:48.880
这样子写也是可以的

10:48.880 --> 10:49.880
因为它在同一个时候

10:49.880 --> 10:51.880
虽然看上去有两个根元素

10:51.880 --> 10:52.880
但是在同一个时刻

10:52.880 --> 10:53.880
是不是只有一个

10:53.880 --> 10:54.880
你看现在这样子

10:54.880 --> 10:55.880
是不爆出的

10:55.880 --> 10:56.880
同一时刻

10:56.880 --> 10:57.880
是不是只有一个

10:57.880 --> 10:59.880
就这么个意思

10:59.880 --> 11:00.880
它会监控什么呢

11:00.880 --> 11:01.880
比方说一开始

11:01.880 --> 11:02.880
它会秀

11:02.880 --> 11:03.880
那么你就是渲染

11:03.880 --> 11:05.880
这个虚地结点

11:05.880 --> 11:06.880
一会它变成forged

11:06.880 --> 11:08.880
是不是要渲染这个虚地结点

11:08.880 --> 11:09.880
那么在两颗新旧动物

11:09.880 --> 11:11.880
输入在对比的时候

11:11.880 --> 11:12.880
对比的时候

11:12.880 --> 11:14.880
是不是它应该消失

11:14.880 --> 11:15.880
它应该进入

11:15.880 --> 11:16.880
对吧

11:16.880 --> 11:17.880
就这么个意思

11:17.880 --> 11:18.880
那么如果说

11:18.880 --> 11:20.880
旧结点需要被销毁的话

11:20.880 --> 11:21.880
它不会

11:21.880 --> 11:23.880
因为如果说不用它的话

11:23.880 --> 11:24.880
它会把这个旧结点

11:24.880 --> 11:25.880
直接就消毁掉

11:25.880 --> 11:26.880
把个动物元素

11:26.880 --> 11:27.880
我们之前学过那个

11:27.880 --> 11:28.880
那个DEV

11:28.880 --> 11:29.880
对吧

11:29.880 --> 11:30.880
它会把这个动物元素

11:30.880 --> 11:32.880
就直接给它去募掉

11:32.880 --> 11:33.880
消失掉

11:33.880 --> 11:34.880
但是有了它过后

11:34.880 --> 11:35.880
它发现这个结点

11:35.880 --> 11:36.880
消失了

11:36.880 --> 11:38.880
它不会立刻把它移除掉

11:38.880 --> 11:41.880
而会让它进入一个消失效果

11:41.880 --> 11:43.880
消失效果结束之后

11:43.880 --> 11:44.880
再把它移除掉

11:44.880 --> 11:45.880
好

11:45.880 --> 11:47.880
如果说它发现有新结点

11:47.880 --> 11:48.880
是新增的

11:48.880 --> 11:49.880
比方这个结点

11:49.880 --> 11:50.880
一块为

11:50.880 --> 11:53.880
这个东西为forged过后

11:53.880 --> 11:54.880
这个结点

11:54.880 --> 11:55.880
它会出现

11:55.880 --> 11:57.880
那么这个结点

11:57.880 --> 12:00.880
它会对它应用一些过度效果

12:00.880 --> 12:01.880
然后最终

12:01.880 --> 12:03.880
把它放到这个位置

12:03.880 --> 12:04.880
就这么个意思

12:04.880 --> 12:05.880
这里出现两个单

12:05.880 --> 12:07.880
两个名词

12:07.880 --> 12:08.880
一个是消失效果

12:08.880 --> 12:10.880
一个是进入效果

12:10.880 --> 12:11.880
那么这两个效果

12:11.880 --> 12:12.880
到底是什么效果呢

12:12.880 --> 12:13.880
我们一会再说

12:13.880 --> 12:14.880
接着我们只要

12:14.880 --> 12:15.880
我们需要理解的是

12:15.880 --> 12:17.880
它什么时候会进入消失

12:17.880 --> 12:20.880
什么时候会进入那个进入

12:20.880 --> 12:21.880
好

12:21.880 --> 12:22.880
第二个点

12:22.880 --> 12:23.880
除了两个虚的结点

12:23.880 --> 12:24.880
一个新增

12:24.880 --> 12:25.880
一个被消毁之外

12:25.880 --> 12:29.880
它还会监控一个V秀的变化

12:29.880 --> 12:30.880
比方说

12:30.880 --> 12:32.880
这里我们使用一个V秀

12:32.880 --> 12:36.700
这里也使用V秀

12:36.700 --> 12:38.700
首先这样子行不行

12:38.700 --> 12:39.700
所以这样子也不行

12:39.700 --> 12:40.700
为什么

12:40.700 --> 12:42.700
因为这样子使用会渲染两个节点

12:42.700 --> 12:44.700
它就不是单个节点

12:44.700 --> 12:45.700
所以这样子不行

12:45.700 --> 12:47.700
但我们把它写成一个节点

12:47.700 --> 12:48.700
那么这样子

12:48.700 --> 12:49.700
虽然这个结点

12:49.700 --> 12:50.700
它不会消失

12:50.700 --> 12:51.700
它永远不会移除

12:51.700 --> 12:53.700
它只会切换它的显示状态

12:53.700 --> 12:55.700
DisplayNone和Display

12:55.700 --> 12:57.700
把DisplayNone去掉

12:57.700 --> 13:00.700
显示和消失

13:00.700 --> 13:02.700
那么对于这种节点

13:02.700 --> 13:03.700
也会受到全新的监控

13:03.700 --> 13:04.700
尽管这个节点

13:04.700 --> 13:06.700
它并没有真正的移除

13:06.700 --> 13:07.700
它只是隐藏了

13:07.700 --> 13:08.700
它也会监控

13:08.700 --> 13:09.700
那么它到底怎么监控呢

13:09.700 --> 13:11.700
其实也非常简单

13:11.700 --> 13:13.700
就是说它要隐藏的时候

13:13.700 --> 13:14.700
它不会立即让它隐藏

13:14.700 --> 13:16.700
它会进入一段过渡效果

13:16.700 --> 13:19.700
然后最终把DisplayNone

13:19.700 --> 13:21.700
然后它要显示的时候

13:21.700 --> 13:23.700
也是一步一步

13:23.700 --> 13:26.700
有个过渡效果显示出来

13:26.700 --> 13:27.700
这就是出来谁请

13:27.700 --> 13:28.700
它监控的东西

13:28.700 --> 13:31.700
一个是节点的移除和新增

13:31.700 --> 13:34.700
一个是节点的显示和隐藏

13:34.700 --> 13:36.700
它都会进行监控

13:36.700 --> 13:37.700
就这么个意思

13:37.700 --> 13:42.700
就是实际它到底是什么时候有作用的

13:42.700 --> 13:44.700
第二个是流程

13:44.700 --> 13:45.700
咋意思呢

13:45.700 --> 13:47.700
就是说它到底是怎么来

13:47.700 --> 13:49.700
应用这个进入效果

13:49.700 --> 13:51.700
又怎么去应用这个消失效果的呢

13:51.700 --> 13:52.700
因为我们知道

13:52.700 --> 13:54.700
它什么时候应用进入

13:54.700 --> 13:55.700
什么时候应用消失

13:55.700 --> 13:56.700
它到底是

13:56.700 --> 13:57.700
那么进入这个效果的时候

13:57.700 --> 14:00.700
到底是怎么回事呢

14:00.700 --> 14:02.700
我们最常见的开发方式

14:02.700 --> 14:05.700
是使用它给我们提供的内名

14:05.700 --> 14:06.700
啥意思

14:06.700 --> 14:07.700
看一下

14:07.700 --> 14:09.700
进入效果

14:09.700 --> 14:10.700
这个进入效果

14:10.700 --> 14:12.700
就是当它发现一个元素

14:12.700 --> 14:13.700
需要进入的时候

14:13.700 --> 14:14.700
什么时候

14:14.700 --> 14:15.700
比方说

14:15.700 --> 14:17.700
我们这个玩意

14:17.700 --> 14:18.700
一开始为True的时候

14:18.700 --> 14:19.700
不显示

14:19.700 --> 14:21.700
为Force的时候

14:21.700 --> 14:22.700
它要显示

14:22.700 --> 14:23.700
那么要显示的时候

14:23.700 --> 14:25.700
是不是就是一个进入

14:25.700 --> 14:34.200
或者是这种情况

14:34.200 --> 14:35.200
我们就在上面去理吧

14:35.200 --> 14:36.200
你看看

14:36.200 --> 14:37.200
上面有一个A11元素

14:37.200 --> 14:39.200
这个A11元素就是

14:39.200 --> 14:40.200
要不要显示

14:40.200 --> 14:41.200
取决于这个属性

14:41.200 --> 14:42.200
它为True

14:42.200 --> 14:43.200
它叫显示

14:43.200 --> 14:44.200
它为Force

14:44.200 --> 14:45.200
它就不显示

14:45.200 --> 14:46.200
点击这个按钮

14:46.200 --> 14:47.200
它可以让这个数据

14:47.200 --> 14:49.200
变成相反的状态

14:49.200 --> 14:50.200
好看一下吧

14:50.200 --> 14:52.200
目前就这样子

14:52.200 --> 14:54.200
没有任何过渡的效果

14:54.200 --> 14:55.200
但是我们可以

14:55.200 --> 14:56.200
给它加上一个彩色形

14:56.200 --> 14:57.200
因为我们希望

14:57.200 --> 14:58.200
监控这个元素的

14:58.200 --> 15:01.200
进入和消失

15:01.200 --> 15:02.200
那么这样子

15:02.200 --> 15:03.200
我们可以

15:03.200 --> 15:05.200
非常方便的去应用一些

15:05.200 --> 15:06.200
进入和消失的效果

15:06.200 --> 15:07.200
当然我们能不能不用

15:07.200 --> 15:08.200
它自己做了

15:08.200 --> 15:09.200
当然可以

15:09.200 --> 15:11.200
只能做成比较麻烦一点

15:11.200 --> 15:13.200
好,不要让我们点击

15:13.200 --> 15:16.200
现在有没有效果呢

15:16.200 --> 15:18.200
它有消失和进入的效果

15:18.200 --> 15:19.200
但是呢

15:19.200 --> 15:20.200
没有一个过渡过程

15:20.200 --> 15:21.200
那怎么来添加

15:21.200 --> 15:22.200
这个过渡过程呢

15:22.200 --> 15:24.200
就需要我们自己去定义

15:24.200 --> 15:25.200
这里来我们看一下

15:25.200 --> 15:26.200
它到底是怎么做的

15:26.200 --> 15:27.200
当它发现

15:27.200 --> 15:28.200
当这个组建

15:28.200 --> 15:30.200
它发现里边的根元素

15:30.200 --> 15:32.200
它要应用进入效果的时候

15:32.200 --> 15:34.200
它会有一个时间线

15:34.200 --> 15:35.200
这个时间线

15:35.200 --> 15:37.200
它要做什么事情

15:37.200 --> 15:38.200
它首先

15:38.200 --> 15:39.200
比方说我们这里

15:39.200 --> 15:41.200
这里点击了这个按钮

15:41.200 --> 15:42.200
比方说像这种情况

15:42.200 --> 15:44.200
我现在点击按钮

15:44.200 --> 15:46.200
这个元素一开始

15:46.200 --> 15:47.200
是没有的

15:47.200 --> 15:48.200
点了按钮过后

15:48.200 --> 15:49.200
是不是就出现了

15:49.200 --> 15:50.200
那么出现的时候

15:50.200 --> 15:51.200
根据我们的DF算法

15:51.200 --> 15:52.200
是不是要往这里边

15:52.200 --> 15:54.200
插入一个动物元素

15:54.200 --> 15:55.200
对不对

15:55.200 --> 15:57.200
那么插入这个动物元素的时候

15:57.200 --> 15:58.200
从这里开始

15:58.200 --> 15:59.200
这个动物元素

15:59.200 --> 16:00.200
也没有加进去

16:00.200 --> 16:01.200
已经加进去了

16:01.200 --> 16:02.200
已经放到这了

16:02.200 --> 16:03.200
好,加进去过后

16:03.200 --> 16:05.200
由于受这个插隙性的影响

16:05.200 --> 16:07.200
它会对这个动物元素

16:07.200 --> 16:09.200
做一些后续的处理

16:09.200 --> 16:10.200
现在我们把个动物元素

16:10.200 --> 16:11.200
插出去就行了

16:11.200 --> 16:12.200
现在已经有动物元素了

16:12.200 --> 16:13.200
这个时候

16:13.200 --> 16:14.200
它会首先

16:14.200 --> 16:17.200
为这个动物元素加上一个Enter

16:17.200 --> 16:18.200
加上一个什么

16:18.200 --> 16:19.200
Enter

16:19.200 --> 16:20.200
Enter这个内样式

16:20.200 --> 16:21.200
所以这个内样式的名字

16:21.200 --> 16:22.200
它不一定是

16:22.200 --> 16:23.200
它不是Enter

16:23.200 --> 16:24.200
但是呢

16:24.200 --> 16:25.200
它的内样式的名字

16:25.200 --> 16:26.200
是这样的规范

16:26.200 --> 16:27.200
就如果说

16:27.200 --> 16:29.200
插隙性上没有定义Name

16:29.200 --> 16:30.200
就这里边

16:30.200 --> 16:31.200
没有给它一个Name属性值

16:31.200 --> 16:32.200
没有定义的话

16:32.200 --> 16:34.200
那么这个内样式的名字呢

16:34.200 --> 16:36.200
规则它是一个V开头

16:36.200 --> 16:37.200
一个橫杠

16:37.200 --> 16:38.200
后面是内样式的名字

16:38.200 --> 16:39.200
也说这里的

16:39.200 --> 16:42.200
全程的应该是V,橫杠,Enter

16:42.200 --> 16:43.200
明白了意思吧

16:43.200 --> 16:44.200
那如果说

16:44.200 --> 16:46.200
插隙性上加了这个Name属性的

16:46.200 --> 16:47.200
那个Name属性

16:47.200 --> 16:48.200
主要是来控制内样式的

16:48.200 --> 16:49.200
加这个Name属性的

16:49.200 --> 16:51.200
比方说我们加了一个Title

16:51.200 --> 16:52.200
那么它的内样式

16:52.200 --> 16:57.200
就应该是Title,橫杠,Enter

16:57.200 --> 16:58.200
明白了意思吧

16:58.200 --> 16:59.200
就这个意思

16:59.200 --> 17:01.200
当然你还可以指定内名

17:01.200 --> 17:03.200
如果说你指定了内名的话

17:03.200 --> 17:05.200
那么它就直接使用过度内名

17:05.200 --> 17:06.200
那么怎么来指定呢

17:06.200 --> 17:07.200
这里一个文档

17:07.200 --> 17:08.200
你可以看一下

17:08.200 --> 17:11.200
你可以给它指定一个Enter class

17:11.200 --> 17:12.200
比方说我们这里

17:12.200 --> 17:14.200
指定了一个Enter class

17:14.200 --> 17:16.200
比方说给它秘密一个ABC

17:16.200 --> 17:17.200
那好了

17:17.200 --> 17:18.200
那后边它就根本就不看

17:18.200 --> 17:19.200
这个Name属性了

17:19.200 --> 17:21.200
也不会看这个内名的

17:21.200 --> 17:23.200
直接你使用你

17:23.200 --> 17:25.200
给定了内名ABC

17:25.200 --> 17:27.200
就这么个意思

17:27.200 --> 17:28.200
也就插隙性这个组件

17:28.200 --> 17:29.200
它要做的事情就特别简单

17:29.200 --> 17:31.200
它就为这个元素加内名

17:31.200 --> 17:32.200
不断的加内名

17:32.200 --> 17:33.200
它加了一个什么呢

17:33.200 --> 17:34.200
加了一个内名Enter

17:34.200 --> 17:35.200
那么这个内

17:35.200 --> 17:37.200
如果说你没有写的话

17:37.200 --> 17:38.200
就没有任何效果

17:38.200 --> 17:39.200
你只有写着这个内

17:39.200 --> 17:40.200
还有效果

17:40.200 --> 17:43.200
那么这个Enter

17:43.200 --> 17:44.200
加了过后

17:44.200 --> 17:45.200
它不是一直存在

17:45.200 --> 17:48.200
它会在一定的时候移除

17:48.200 --> 17:49.200
什么时候移除了

17:49.200 --> 17:51.200
在下一个

17:51.200 --> 17:52.200
就是插入元素过后

17:52.200 --> 17:54.200
插入元素到页面上过后

17:54.200 --> 17:56.200
页面会渲染对不对

17:56.200 --> 17:57.200
它会把这个元素渲染出来

17:57.200 --> 17:58.200
因为我们流量器

17:58.200 --> 18:00.200
知道它的渲染的原理

18:00.200 --> 18:01.200
就是它不断的画

18:01.200 --> 18:02.200
就像个画家一样

18:02.200 --> 18:03.200
不断的画

18:03.200 --> 18:04.200
手很快

18:04.200 --> 18:05.200
一秒钟的话

18:05.200 --> 18:06.200
很多很多次

18:06.200 --> 18:08.200
一秒钟的话几十次

18:08.200 --> 18:09.200
把这个一面不断的画

18:09.200 --> 18:10.200
每一次画

18:10.200 --> 18:11.200
就是一次渲染症

18:11.200 --> 18:12.200
画了过后

18:12.200 --> 18:14.200
人类就能从屏幕上

18:14.200 --> 18:15.200
看到这个效果了

18:15.200 --> 18:16.200
所以说它会在

18:16.200 --> 18:17.200
下一个渲染症

18:17.200 --> 18:18.200
下一次把流量器

18:18.200 --> 18:20.200
把它画出来的过后

18:20.200 --> 18:23.200
然后把这个内样式移除

18:23.200 --> 18:24.200
所以说这个内样式

18:24.200 --> 18:25.200
起什么作用呢

18:25.200 --> 18:26.200
它的作用就是

18:26.200 --> 18:27.200
在流量器

18:27.200 --> 18:28.200
下一次渲染出来之前

18:28.200 --> 18:30.200
或者是刚刚渲染出来的时候

18:30.200 --> 18:32.200
它应该是什么样子

18:32.200 --> 18:33.200
就这么个意思

18:33.200 --> 18:34.200
刚刚渲染出来的时候

18:34.200 --> 18:35.200
画出来的时候

18:35.200 --> 18:37.200
一开始是什么样子

18:37.200 --> 18:38.200
然后移除掉过后

18:38.200 --> 18:39.200
它会同时

18:39.200 --> 18:41.200
马上加上另一个内样式

18:41.200 --> 18:42.200
叫inter2

18:42.200 --> 18:43.200
那么这个内样式

18:43.200 --> 18:45.200
就是这个东西

18:45.200 --> 18:48.200
这个元素在流量器上

18:48.200 --> 18:50.200
把它画出来过后

18:50.200 --> 18:51.200
然后接下来

18:51.200 --> 18:53.200
这个内样式就消失了

18:53.200 --> 18:55.200
然后接下来进入这个内样式

18:55.200 --> 18:56.200
就这么个意思

18:57.200 --> 18:58.200
明白吧

18:58.200 --> 19:00.200
那么它还可以提供一个内样式

19:00.200 --> 19:01.200
这个内样式是

19:01.200 --> 19:04.200
跟这个inter加入的实际一样

19:04.200 --> 19:06.200
就是刚刚插入元素的时候

19:06.200 --> 19:08.200
它就会把这个内样式加上

19:08.200 --> 19:10.200
但这个内样式它不会立即消失

19:10.200 --> 19:12.200
它会一直等

19:12.200 --> 19:14.200
等到你的过渡效果结束过后

19:14.200 --> 19:15.200
才消失

19:15.200 --> 19:16.200
那什么时候结束呢

19:16.200 --> 19:17.200
取决于你

19:17.200 --> 19:19.200
你有没有给它加过渡效果

19:19.200 --> 19:20.200
什么叫过渡效果

19:20.200 --> 19:21.200
就是要加出来信

19:21.200 --> 19:24.200
或者是加animate

19:24.200 --> 19:25.200
加动画

19:25.200 --> 19:27.200
或者是CSS过渡都行

19:27.200 --> 19:28.200
那么它会监控那个

19:28.200 --> 19:30.200
transition end的时间

19:30.200 --> 19:31.200
和animate end的时间

19:31.200 --> 19:33.200
当过渡或者动画结束的时候

19:33.200 --> 19:35.200
那么它就认为结束了

19:35.200 --> 19:36.200
那如果说你的内样式

19:36.200 --> 19:37.200
现在我就没有写内样式

19:37.200 --> 19:38.200
那是不是就没有加transition

19:38.200 --> 19:40.200
也没有加animate

19:40.200 --> 19:42.200
所以说这个地方

19:42.200 --> 19:45.200
在这个地方下一个渲染症过后

19:45.200 --> 19:46.200
把inter移除掉

19:46.200 --> 19:47.200
inter移除掉过后

19:47.200 --> 19:48.200
在这个位置

19:48.200 --> 19:49.200
因为

19:49.200 --> 19:51.200
它就因为我们没有加

19:51.200 --> 19:52.200
所以说这个位置

19:52.200 --> 19:53.200
动画就结束了

19:53.200 --> 19:54.200
很快

19:54.200 --> 19:55.200
就看到了一个最终

19:55.200 --> 19:56.200
就把这些内样式

19:56.200 --> 19:57.200
就全部没了

19:57.200 --> 19:58.200
全部没了

19:58.200 --> 19:59.200
是不是就看到一个最终的效果

19:59.200 --> 20:00.200
最终的效果就是

20:00.200 --> 20:01.200
显示出来了

20:01.200 --> 20:02.200
对吧

20:02.200 --> 20:03.200
就显示出来了

20:03.200 --> 20:04.200
我不知道

20:04.200 --> 20:05.200
大家能不能在这里看得清楚

20:05.200 --> 20:06.200
可能

20:06.200 --> 20:07.200
因为太快了

20:07.200 --> 20:08.200
可能看不清楚

20:08.200 --> 20:09.200
太快了

20:09.200 --> 20:10.200
看不清楚

20:10.200 --> 20:12.200
实际上它是有加内样式的

20:13.200 --> 20:14.200
这是关于

20:14.200 --> 20:16.200
它的内样式

20:16.200 --> 20:17.200
加入了时机

20:17.200 --> 20:18.200
那么加这个内样式

20:18.200 --> 20:19.200
有什么用呢

20:19.200 --> 20:20.200
我们就可以利用

20:20.200 --> 20:21.200
它这个

20:21.200 --> 20:22.200
这种特点

20:22.200 --> 20:24.200
我们去写一些内样式

20:24.200 --> 20:25.200
然后再达成

20:25.200 --> 20:26.200
我们的一些效果

20:26.200 --> 20:27.200
比方说我希望

20:27.200 --> 20:28.200
这个显示

20:28.200 --> 20:29.200
不要突然显示出来

20:29.200 --> 20:31.200
需要一个建议

20:31.200 --> 20:32.200
就是建设

20:32.200 --> 20:34.200
就从一个透明

20:34.200 --> 20:36.200
变成一个不透明

20:36.200 --> 20:37.200
该怎么办呢

20:37.200 --> 20:39.200
你看我们看到的当图

20:39.200 --> 20:40.200
也就是说

20:40.200 --> 20:41.200
我们希望

20:41.200 --> 20:42.200
这个元素插出过后

20:42.200 --> 20:43.200
下一次瀏覽器

20:43.200 --> 20:44.200
把它渲染出来的时候

20:44.200 --> 20:45.200
应该是一个

20:45.200 --> 20:47.200
完全透明的状态

20:47.200 --> 20:48.200
对吧

20:48.200 --> 20:49.200
所以我们应该

20:49.200 --> 20:50.200
应用哪个样式

20:50.200 --> 20:52.200
应用Enter这个样式

20:52.200 --> 20:54.200
来看

20:54.200 --> 20:56.200
我们就可以给它个Name吧

20:56.200 --> 20:58.200
比方说我们这里抬头

20:58.200 --> 20:59.200
好那么这里

20:59.200 --> 21:00.200
内样式的名字

21:00.200 --> 21:01.200
该怎么写

21:01.200 --> 21:04.200
Name加上Enter

21:04.200 --> 21:05.200
对不对

21:05.200 --> 21:06.200
写这么一个内样式

21:06.200 --> 21:07.200
好这个内样式里边

21:07.200 --> 21:08.200
我要做的事情

21:08.200 --> 21:09.200
就一件

21:09.200 --> 21:10.200
就Opacity的迷你

21:10.200 --> 21:11.200
那么这样子

21:11.200 --> 21:12.200
一来

21:12.200 --> 21:13.200
这个元素

21:13.200 --> 21:14.200
刚刚加入进来的时候

21:14.200 --> 21:16.200
最开始画出来的时候

21:16.200 --> 21:17.200
它就是一个

21:17.200 --> 21:19.200
完全透明的状态

21:19.200 --> 21:20.200
对吧

21:21.200 --> 21:22.200
好我们来看一下

21:25.200 --> 21:26.200
好现在我们把

21:26.200 --> 21:27.200
显示出来

21:28.200 --> 21:29.200
为什么没有出现

21:29.200 --> 21:30.200
一个完全透明的

21:30.200 --> 21:31.200
你想象为什么

21:31.200 --> 21:35.660
因为它很快就把

21:35.660 --> 21:36.660
这个内样式移除了

21:36.660 --> 21:37.660
所以我们这个元素

21:37.660 --> 21:38.660
它经过了这么几个阶段

21:38.660 --> 21:39.660
它把这个元素

21:39.660 --> 21:40.660
插入到页面上去了

21:40.660 --> 21:41.660
然后

21:42.660 --> 21:43.660
我们就加了这个内样式

21:43.660 --> 21:44.660
它现在是透明的

21:44.660 --> 21:45.660
接下来瀏覽器

21:45.660 --> 21:46.660
渲染针

21:46.660 --> 21:47.660
这个渲染针是怎么用的呢

21:47.660 --> 21:48.660
它怎么来

21:48.660 --> 21:49.660
它怎么知道

21:49.660 --> 21:50.660
这个渲染针的存在呢

21:50.660 --> 21:51.660
它是通过这个

21:51.660 --> 21:52.660
你们听了

21:52.660 --> 21:53.660
一切舞应该学的

21:53.660 --> 21:54.660
Request

21:54.660 --> 21:56.660
Animation

21:59.660 --> 22:00.660
Free

22:01.660 --> 22:02.660
它是通过这个方法

22:02.660 --> 22:03.660
对吧

22:03.660 --> 22:04.660
这个方法是不是就是在

22:04.660 --> 22:05.660
渲染针之前

22:06.660 --> 22:07.660
在渲染针之前处罚

22:07.660 --> 22:08.660
对不对

22:09.660 --> 22:10.660
它就是

22:10.660 --> 22:11.660
间接着通过这个方法

22:11.660 --> 22:12.660
来完成的

22:12.660 --> 22:13.660
当我们它渲染针

22:13.660 --> 22:14.660
就是渲染了之后

22:14.660 --> 22:15.660
那么它会把这个

22:15.660 --> 22:16.660
内样式移除掉

22:16.660 --> 22:17.660
现在是

22:17.660 --> 22:18.660
现在一开始

22:18.660 --> 22:19.660
画出来的是透明的

22:19.660 --> 22:20.660
但是很快

22:20.660 --> 22:21.660
这个内样式就被移除了

22:21.660 --> 22:22.660
移除了过这个

22:22.660 --> 22:23.660
这个样式是不是不生销了

22:23.660 --> 22:25.660
不生销是不是就变成了

22:25.660 --> 22:26.660
它的默认样式

22:26.660 --> 22:27.660
默认样式是不是

22:27.660 --> 22:28.660
就是不透明的

22:28.660 --> 22:30.660
因此很快又显示出来了

22:30.660 --> 22:31.660
所以这个元素

22:31.660 --> 22:32.660
它太快了

22:32.660 --> 22:33.660
它的显示

22:33.660 --> 22:34.660
实际上是精力了

22:34.660 --> 22:36.660
完全透明

22:36.660 --> 22:37.660
然后变成了

22:38.660 --> 22:39.660
不透明

22:39.660 --> 22:40.660
只不过它太快了

22:40.660 --> 22:41.660
我们看不清楚

22:44.660 --> 22:45.660
它太快了

22:45.660 --> 22:46.660
看不清楚

22:46.660 --> 22:47.660
那么接下来

22:47.660 --> 22:48.660
我如何来实现

22:48.660 --> 22:49.660
这个过渡

22:49.660 --> 22:50.660
其实非常简单

22:50.660 --> 22:51.660
我们只需要给这个样式

22:51.660 --> 22:52.660
加上一个

22:52.660 --> 22:53.660
加上一个属性

22:53.660 --> 22:55.660
Enter

22:56.660 --> 22:57.660
开拓

22:57.660 --> 22:58.660
Enter

22:59.660 --> 23:00.660
Enter

23:00.660 --> 23:02.660
我们再加上一个什么呢

23:02.660 --> 23:03.660
Trization

23:03.660 --> 23:04.660
Galaxy

23:04.660 --> 23:05.660
或者是

23:06.660 --> 23:07.660
Science

23:07.660 --> 23:08.660
看得清楚一点

23:09.660 --> 23:10.660
那你想一想这个道理

23:11.660 --> 23:12.660
一开始

23:12.660 --> 23:13.660
这个元素是透明的

23:13.660 --> 23:14.660
对吧

23:14.660 --> 23:15.660
然后同时有了一个什么

23:15.660 --> 23:16.660
就在这

23:16.660 --> 23:17.660
画一下

23:18.660 --> 23:19.660
这个时候

23:20.660 --> 23:27.710
这个时候

23:27.710 --> 23:28.710
一个Trization

23:29.710 --> 23:31.710
这个时候是一个Opacity

23:34.710 --> 23:35.710
Opacity

23:35.710 --> 23:36.710
为0

23:36.710 --> 23:37.710
然后

23:37.710 --> 23:38.710
这边

23:38.710 --> 23:39.710
我们是有一个Trization

23:46.310 --> 23:47.310
Trization

23:49.310 --> 23:50.310
三秒

23:51.310 --> 23:52.310
那你想这个道理吧

23:52.310 --> 23:53.310
那么一开始

23:53.310 --> 23:54.310
是不是透明的

23:54.310 --> 23:55.310
透明了过后

23:55.310 --> 23:56.310
我们同时

23:56.310 --> 23:57.310
应用了这个过渡效果

23:57.310 --> 23:58.310
接下来

23:59.310 --> 24:00.310
它把这个那样式

24:00.310 --> 24:01.310
一开始是透明的

24:01.310 --> 24:02.310
然后移除掉过后

24:02.310 --> 24:03.310
从这个点开始

24:05.310 --> 24:06.310
从这个点开始

24:09.310 --> 24:10.310
那么这个那样式是没了

24:10.310 --> 24:12.310
它是不是要从透明的状态

24:13.310 --> 24:14.310
变成

24:15.310 --> 24:16.310
不透明的状态

24:16.310 --> 24:18.310
同时又受它的影响

24:18.310 --> 24:19.310
是不是就从透明

24:19.310 --> 24:20.310
变成不透明

24:21.310 --> 24:22.310
要经过三秒钟的时间

24:23.310 --> 24:24.310
对不对

24:24.310 --> 24:25.310
是不是这个道理

24:26.310 --> 24:27.310
它为什么要给你

24:27.310 --> 24:28.310
设置这个那样式呢

24:28.310 --> 24:29.310
就是让它必须要

24:29.310 --> 24:30.310
先把它画出来

24:30.310 --> 24:31.310
把这个状态先画出来

24:31.310 --> 24:33.310
不然它用不了这个过渡效果

24:33.310 --> 24:34.310
一定要画出来过后

24:35.310 --> 24:36.310
现在是透明的

24:36.310 --> 24:37.310
然后再从

24:37.310 --> 24:39.310
完全透明变成不透明

24:39.310 --> 24:40.310
才有过渡效果

24:41.310 --> 24:42.310
那如果说这个样式

24:42.310 --> 24:43.310
在这里就消失了

24:43.310 --> 24:44.310
比方说在这里消失了

24:44.310 --> 24:45.310
有过渡效果就没有

24:46.310 --> 24:47.310
因为这个元素还没被画出来

24:48.310 --> 24:49.310
所以说画出来的时候

24:49.310 --> 24:50.310
以这个时候的消失

24:50.310 --> 24:51.310
消失太早了

24:51.310 --> 24:52.310
那么这个渲染的时候

24:53.310 --> 24:54.310
它已经是不透明了

24:54.310 --> 24:55.310
然后在不透明

24:55.310 --> 24:57.310
从三秒钟变成不透明

24:57.310 --> 24:58.310
它就不会有动画效果

24:58.310 --> 24:59.310
对不对

24:59.310 --> 25:00.310
所以它一定要在

25:00.310 --> 25:02.310
它会在渲染症之后

25:02.310 --> 25:03.310
把这个那样式消失

25:03.310 --> 25:04.310
先画出来再说

25:05.310 --> 25:06.310
好

25:06.310 --> 25:08.310
这就是我们要做的事情

25:08.310 --> 25:10.310
那么最终带马了就写完了

25:10.310 --> 25:11.310
那我们来看一下

25:11.310 --> 25:12.310
是不是有这个效果

25:13.310 --> 25:14.310
好 进入

25:15.310 --> 25:16.310
你看是不是

25:16.310 --> 25:17.310
我们来看一下那个那样式

25:17.310 --> 25:19.310
虽然说很快

25:19.310 --> 25:20.310
看

25:21.310 --> 25:22.310
你看

25:22.310 --> 25:23.310
Enter

25:25.310 --> 25:26.310
那个Enter的那样式

25:26.310 --> 25:27.310
看不见

25:27.310 --> 25:28.310
因为太快了

25:28.310 --> 25:29.310
因为在下一个渲染症的时候

25:29.310 --> 25:30.310
就已经被移出了

25:30.310 --> 25:31.310
然后进入Enter2

25:31.310 --> 25:32.310
Enter2我们没有写

25:32.310 --> 25:33.310
也不需要写它了

25:34.310 --> 25:35.310
这就是进入效果

25:36.310 --> 25:37.310
它是怎么来控制进入效果的

25:37.310 --> 25:38.310
它就是在不断的

25:38.310 --> 25:40.310
在不同的时刻

25:40.310 --> 25:41.310
给你加弃不同的那样式

25:42.310 --> 25:43.310
当最终

25:43.310 --> 25:44.310
它会监控

25:44.310 --> 25:45.310
如果说你该应用了

25:45.310 --> 25:46.310
Trization过后

25:46.310 --> 25:47.310
它会监控Trization End

25:48.310 --> 25:50.310
过渡或者是动画结束

25:50.310 --> 25:51.310
那么这个时候

25:51.310 --> 25:52.310
一旦结束了

25:52.310 --> 25:53.310
它会把所有的那样式

25:53.310 --> 25:54.310
全部给你移出掉

25:54.310 --> 25:55.310
所以最终

25:55.310 --> 25:57.310
这个元素是没有任何那样式的

25:58.310 --> 25:59.310
当然如果说你自己

25:59.310 --> 26:00.310
在元素上写了一些那样式的话

26:00.310 --> 26:02.310
那这些那样式不会移出

26:02.310 --> 26:03.310
它只会移出这些那样式

26:04.310 --> 26:05.310
好 那么都是进入

26:05.310 --> 26:06.310
那如果说我要你

26:06.310 --> 26:08.310
这里是用的V1浮

26:08.310 --> 26:09.310
其实V秀是一样的

26:10.310 --> 26:11.310
它也会受到它监控

26:12.310 --> 26:13.310
那么现在是Display Now

26:13.310 --> 26:15.310
对吧 现在我们要进入

26:15.310 --> 26:16.310
也是一样

26:16.310 --> 26:17.310
你看

26:17.310 --> 26:18.310
所以慢慢进来

26:18.310 --> 26:19.310
对吧 再看

26:20.310 --> 26:21.310
也是一样

26:23.310 --> 26:24.310
好 这是进入效果

26:24.310 --> 26:25.310
那么消失呢

26:25.310 --> 26:26.310
道理是一样的

26:28.310 --> 26:29.310
消失的时候

26:29.310 --> 26:30.310
它是这样子处理的

26:30.310 --> 26:31.310
比方说我们要处理

26:31.310 --> 26:32.310
我们触发了一个

26:32.310 --> 26:34.310
三除或者是隐藏元素

26:34.310 --> 26:35.310
什么叫隐藏

26:35.310 --> 26:36.310
就是这个V秀V Force

26:36.310 --> 26:39.310
那么V一浮就为移除

26:39.310 --> 26:41.310
它从Q变到FORCE的时候

26:41.310 --> 26:42.310
是不是正常情况下

26:42.310 --> 26:44.310
这个元素瞬间被remove掉了

26:44.310 --> 26:45.310
对吧

26:45.310 --> 26:46.310
那么就是触发了

26:46.310 --> 26:48.310
三除元素的操作

26:48.310 --> 26:49.310
但是呢

26:49.310 --> 26:51.310
由于受传实性的影响

26:51.310 --> 26:52.310
它不会让它立即删除

26:52.310 --> 26:54.310
立即删除 啥都看不见了

26:54.310 --> 26:56.310
它会经过一段过渡过后

26:56.310 --> 26:57.310
然后最终才会把它删除掉

26:57.310 --> 26:58.310
那么它怎么做的呢

26:59.310 --> 27:00.310
当我们触发这个操作的时候

27:00.310 --> 27:01.310
它不会立即删除

27:03.310 --> 27:04.310
如果说隐藏的话

27:04.310 --> 27:06.310
也不会立即应用那个Display Now

27:06.310 --> 27:07.310
它会做这么一件事

27:07.310 --> 27:09.310
先加上一个那样是叫Live

27:10.310 --> 27:11.310
然后把它画出来

27:12.310 --> 27:13.310
那么这个时候呢

27:14.310 --> 27:15.310
画出来过后

27:15.310 --> 27:17.310
然后再进入一个那样是叫Live2

27:18.310 --> 27:19.310
进入这个那样是

27:20.310 --> 27:22.310
然后全程的那样是就是Live Active

27:23.310 --> 27:25.310
当我们的过渡或者动画结束的时候

27:25.310 --> 27:28.310
这个时候元素才会真正的被删除和隐藏

27:28.310 --> 27:31.310
那么我们又如何来应用这个东西呢

27:31.310 --> 27:32.310
又如何来应用呢

27:33.310 --> 27:34.310
我们可以这样子

27:37.310 --> 27:39.310
你看啊 我们现在要把它坚引线线

27:39.310 --> 27:41.310
就是离开的时候

27:41.310 --> 27:42.310
消失的时候呢

27:42.310 --> 27:43.310
我们也希望它

27:44.310 --> 27:46.310
有一个慢慢淡出的效果

27:46.310 --> 27:47.310
那怎么来弄呢

27:48.310 --> 27:49.310
一开始你让我们来观察一下

27:49.310 --> 27:51.310
它消失的时候一开始的情况下

27:51.310 --> 27:52.310
比方说点了过

27:52.310 --> 27:53.310
它是应该消失的

27:53.310 --> 27:54.310
应该移出这个元素

27:54.310 --> 27:56.310
那么一开始的情况下

27:56.310 --> 27:57.310
是不是不透明的

27:57.310 --> 27:59.310
我就保持这个状态呗

27:59.310 --> 28:01.310
也就是说我们这里要做的事情

28:02.310 --> 28:04.310
现在我们点击按钮

28:04.310 --> 28:05.310
然后它要删除

28:05.310 --> 28:07.310
我就先让它让它把自己画一次

28:09.750 --> 28:10.750
我就先让它把自己画一次

28:10.750 --> 28:11.750
画到这儿

28:12.750 --> 28:13.750
不动它

28:13.750 --> 28:14.750
好 画出来过后

28:14.750 --> 28:15.750
就是目前的状态

28:15.750 --> 28:17.750
目前是不透明的状态

28:17.750 --> 28:19.750
然后我在这里

28:19.750 --> 28:20.750
我在这里

28:21.750 --> 28:22.750
应用一个样式

28:22.750 --> 28:23.750
把它变成透明

28:24.750 --> 28:25.750
那么这样子是不是

28:25.750 --> 28:26.750
从不透明变成透明了

28:26.750 --> 28:27.750
在这里呢

28:27.750 --> 28:28.750
给它加上一个

28:28.750 --> 28:30.750
Tricection

28:30.750 --> 28:31.750
有过渡效果

28:31.750 --> 28:33.750
那么受过渡效果的影响呢

28:33.750 --> 28:35.750
它就会逐渐的变为不透明

28:35.750 --> 28:36.750
当然了

28:36.750 --> 28:37.750
也可以在这里下

28:37.750 --> 28:38.750
实际上都是一样的

28:38.750 --> 28:39.750
在这种场景下都可以

28:39.750 --> 28:40.750
好 我们来看一下

28:40.750 --> 28:41.750
你只要可能看懂这个

28:41.750 --> 28:43.750
这张图就没问题了

28:43.750 --> 28:45.750
好 比方说我们这里呢

28:45.750 --> 28:46.750
给它加上

28:46.750 --> 28:47.750
Title

28:47.750 --> 28:48.750
Leave

28:49.750 --> 28:50.750
在这里给大家

28:51.750 --> 28:52.750
把它变成Opacity

28:52.750 --> 28:53.750
把它变成0

28:53.750 --> 28:54.750
给大家加上一个

28:54.750 --> 28:55.750
Tricection

28:56.750 --> 28:57.750
3秒钟

28:58.750 --> 28:59.750
那么我们希望在3秒钟之内

28:59.750 --> 29:00.750
把它的Opacity

29:00.750 --> 29:02.750
从当前的1变成0

29:02.750 --> 29:03.750
我们现在就不去

29:03.750 --> 29:04.750
控制它了

29:06.750 --> 29:07.750
好 刷新 你看一下

29:08.750 --> 29:09.750
所以3秒钟之后

29:09.750 --> 29:10.750
消失

29:11.750 --> 29:12.750
然后这里

29:13.750 --> 29:14.750
键线 对吧

29:14.750 --> 29:15.750
那么当然了

29:15.750 --> 29:16.750
也可以在这里

29:18.750 --> 29:20.750
给它加上Title

29:20.750 --> 29:21.750
N

29:22.750 --> 29:23.750
Leave

29:23.750 --> 29:24.750
Active

29:24.750 --> 29:25.750
也行

29:25.750 --> 29:26.750
保存

29:26.750 --> 29:27.750
看一下

29:28.750 --> 29:29.750
消失

29:29.750 --> 29:32.830
进入

29:33.830 --> 29:34.830
消失

29:35.830 --> 29:36.830
进入

29:36.830 --> 29:37.830
对吧

29:38.830 --> 29:39.830
好 这就是

29:39.830 --> 29:41.830
咱们这一块的做法

29:41.830 --> 29:43.830
那么我们完全也可以

29:43.830 --> 29:45.830
把这两个合并一下

29:46.830 --> 29:47.830
Title

29:47.830 --> 29:48.830
Leave

29:48.830 --> 29:49.830
Active

29:49.830 --> 29:50.830
Tricection

29:50.830 --> 29:51.830
3秒钟

29:51.830 --> 29:53.830
然后把这两个也合并一下

29:53.830 --> 29:54.830
Enter

29:54.830 --> 29:55.830
Title

29:56.830 --> 29:57.830
Leave

29:59.830 --> 30:00.830
变成0

30:00.830 --> 30:01.830
保存

30:01.830 --> 30:02.830
你看一下

30:03.830 --> 30:06.910
消失

30:06.910 --> 30:07.910
进入

30:08.910 --> 30:10.910
这就是这么一个说法

30:12.910 --> 30:14.910
然后我这里

30:14.910 --> 30:15.910
就接着说一下吧

30:15.910 --> 30:16.910
这里边凡是

30:16.910 --> 30:17.910
Tricection里边

30:17.910 --> 30:19.910
凡是它监控到了一个元素

30:20.910 --> 30:21.910
那个根元素

30:21.910 --> 30:22.910
它要被移除

30:22.910 --> 30:24.910
那么它就会进入消失效果

30:24.910 --> 30:26.910
凡是它监控到一个元素

30:26.910 --> 30:27.910
要进入

30:27.910 --> 30:28.910
就是要新增

30:28.910 --> 30:30.910
它就会进入那个进入效果

30:30.910 --> 30:32.910
那么这种情况有很多

30:32.910 --> 30:33.910
比方说

30:33.910 --> 30:35.910
我们举个例子吧

30:35.910 --> 30:37.910
我们看这种情况

30:37.910 --> 30:39.910
这里边我们写一个A

30:40.910 --> 30:41.910
秀

30:41.910 --> 30:43.910
就是Title1

30:43.910 --> 30:45.910
然后我们再加一个Vals

30:46.910 --> 30:48.910
这里写个Title2

30:50.910 --> 30:51.910
我们来看一下

30:51.910 --> 30:52.910
这个情况

30:52.910 --> 30:54.910
首先是不是只有一个根元素

30:54.910 --> 30:55.910
当然是

30:55.910 --> 30:56.910
要么显示它

30:56.910 --> 30:57.910
要么显示它

30:57.910 --> 30:58.910
那么这种情况下

30:58.910 --> 30:59.910
会不会有动画效果

30:59.910 --> 31:00.910
我问一下大家

31:00.910 --> 31:02.910
会不会有动画效果呢

31:02.910 --> 31:05.350
它不会

31:06.350 --> 31:09.350
只要结合我们之前学过的Dev

31:09.350 --> 31:11.350
你看是不是不会有动画效果

31:11.350 --> 31:12.350
为什么不会有动画效果呢

31:12.350 --> 31:13.350
不是有元素

31:13.350 --> 31:15.350
出现有元素消失吗

31:15.350 --> 31:16.350
其实并没有

31:16.350 --> 31:17.350
因为这个元

31:17.350 --> 31:19.350
一开始旧的虚的动物素

31:19.350 --> 31:20.350
它是一个A起仪

31:20.350 --> 31:21.350
新的虚的动物素

31:21.350 --> 31:23.350
它还是一个A起仪

31:23.350 --> 31:25.350
所以说两个是同一个元素

31:25.350 --> 31:26.350
它只会更新一个元素

31:26.350 --> 31:27.350
里面那种

31:27.350 --> 31:29.350
它不会让这个元素

31:29.350 --> 31:30.350
仪处让这个元素消失

31:30.350 --> 31:31.350
它会重用

31:31.350 --> 31:32.350
对不对

31:32.350 --> 31:33.350
那如果说这种情况下

31:33.350 --> 31:34.350
我们要实现一个

31:34.350 --> 31:35.350
进入和消失怎么办呢

31:35.350 --> 31:37.350
你看这里是A起仪就不会了

31:37.350 --> 31:38.350
A起仪的话就OK

31:38.350 --> 31:39.350
就没问题

31:41.350 --> 31:42.350
你看

31:42.350 --> 31:43.350
它们是同事发生的

31:43.350 --> 31:44.350
一个消失

31:44.350 --> 31:45.350
一个进入

31:45.350 --> 31:46.350
然后呢

31:46.350 --> 31:47.350
一个进入一个消失

31:47.350 --> 31:48.350
对吧

31:48.350 --> 31:49.350
那么这种情况就可以了

31:50.350 --> 31:51.350
能看懂吗

31:52.350 --> 31:53.350
那么如果比方

31:53.350 --> 31:54.350
一开始渲染的是它

31:54.350 --> 31:56.350
那么第二次新的动物素

31:56.350 --> 31:57.350
渲染的是它

31:57.350 --> 31:58.350
于是它就会消失

31:58.350 --> 31:59.350
它就会进入

31:59.350 --> 32:01.350
两个效果是同事发生的

32:01.350 --> 32:02.350
当然如果说

32:02.350 --> 32:03.350
你可以控制

32:03.350 --> 32:04.350
比方说我们这里

32:04.350 --> 32:05.350
控制的话

32:05.350 --> 32:07.350
有一个Mode

32:08.350 --> 32:09.350
就是模式

32:09.350 --> 32:11.350
它默认是两个同事发生的

32:11.350 --> 32:12.350
这个模式

32:12.350 --> 32:13.350
它可以变的

32:13.350 --> 32:14.350
我对到一下文章

32:14.350 --> 32:15.350
这个玩意我也

32:15.350 --> 32:16.350
记不住这些API

32:16.350 --> 32:17.350
过渡模式

32:19.350 --> 32:20.350
一个是In Out

32:21.350 --> 32:22.350
一个是Out In

32:23.350 --> 32:24.350
什么叫In Out呢

32:24.350 --> 32:25.350
就先进入再消失

32:27.350 --> 32:28.350
看一下这个In Out

32:31.110 --> 32:32.110
先进入

32:33.110 --> 32:34.110
然后这边再消失

32:37.110 --> 32:38.110
好

32:38.110 --> 32:39.110
也可以是Out In

32:40.110 --> 32:41.110
先消失再进入

32:41.110 --> 32:42.110
再进入

32:42.110 --> 32:44.110
默认情况下是两个同事的

32:44.110 --> 32:45.110
先消失

32:45.110 --> 32:47.680
再进入

32:49.680 --> 32:50.680
这是模式

32:50.680 --> 32:51.680
是可以控制的

32:51.680 --> 32:52.680
默认情况两个同事的

32:52.680 --> 32:53.680
没关系

32:53.680 --> 32:54.680
我们现在要研究的是

32:54.680 --> 32:56.680
A7和A7II元素

32:56.680 --> 32:57.680
那么它一个会消失

32:57.680 --> 32:58.680
一个会进入

32:58.680 --> 33:00.680
那如果说两个都是A7II元素的话

33:00.680 --> 33:03.630
它就不认为

33:03.630 --> 33:05.630
它有消失的元素

33:05.630 --> 33:07.630
也不认为有新增的元素

33:07.630 --> 33:08.630
它只是改变

33:08.630 --> 33:09.630
这个元素内容

33:09.630 --> 33:10.630
那怎么办呢

33:10.630 --> 33:11.630
我如果说

33:11.630 --> 33:13.630
要用这个效果怎么办呢

33:13.630 --> 33:15.630
我可以给大家key吗

33:15.630 --> 33:16.630
对不对

33:16.630 --> 33:17.630
加了key过后

33:17.630 --> 33:18.630
由于key不一样

33:18.630 --> 33:19.630
是不是就导致

33:20.630 --> 33:21.630
在跌幅算法对比的时候

33:21.630 --> 33:22.630
他们就认为

33:22.630 --> 33:24.630
这两个东西不能重用

33:24.630 --> 33:26.630
让他们让它必须消失

33:26.630 --> 33:28.630
它必须新增

33:28.630 --> 33:29.630
对不对

33:29.630 --> 33:30.630
就这么简单

33:31.630 --> 33:32.630
你看

33:32.630 --> 33:33.630
对吧

33:33.630 --> 33:34.630
就可以了

33:34.630 --> 33:35.630
就这么个意思

33:35.630 --> 33:36.630
当然我们还可以有

33:36.630 --> 33:37.630
很多的其他情况

33:37.630 --> 33:38.630
比方说

33:40.630 --> 33:41.630
举个例子吧

33:41.630 --> 33:42.630
比方说这种情况

33:43.630 --> 33:44.630
这个地方

33:44.630 --> 33:45.630
同学们没有学过

33:45.630 --> 33:46.630
没关系

33:46.630 --> 33:47.630
我这里给大家说一说

33:47.630 --> 33:48.630
有的时候

33:48.630 --> 33:50.630
业面上有一个元素

33:50.630 --> 33:51.630
它到底是什么元素

33:51.630 --> 33:52.630
其实我并不知道

33:52.630 --> 33:54.630
我并不知道它是什么元素

33:54.630 --> 33:55.630
比方说吧

33:55.630 --> 33:57.630
我们这里有一个数据

33:57.630 --> 33:58.630
叫做

33:59.630 --> 34:00.630
Title

34:01.630 --> 34:02.630
Level

34:02.630 --> 34:04.630
就是消息的等级别

34:04.630 --> 34:05.630
默认为1

34:06.630 --> 34:07.630
那么这个消息级别

34:07.630 --> 34:08.630
它就会影响到

34:08.630 --> 34:09.630
这里到底是A7II元素

34:09.630 --> 34:10.630
它有可能是A7II

34:10.630 --> 34:11.630
有可能是A7II

34:11.630 --> 34:12.630
有可能是A7III

34:12.630 --> 34:13.630
那么这个唯一的话

34:13.630 --> 34:14.630
它就是A7II

34:14.630 --> 34:15.630
这个唯二的话

34:15.630 --> 34:16.630
它就是A7II

34:16.630 --> 34:17.630
明显的意思

34:17.630 --> 34:18.630
我们要做这么一件事

34:18.630 --> 34:20.630
那这个是不是动态的元素

34:20.630 --> 34:22.630
动态的元素怎么办呢

34:22.630 --> 34:23.630
怎么写呢

34:23.630 --> 34:24.630
你可以用那个

34:24.630 --> 34:26.630
VU里面的内置组件

34:26.630 --> 34:29.940
内置组件叫Component

34:29.940 --> 34:30.940
Component

34:30.940 --> 34:32.940
这个组件没有什么用

34:32.940 --> 34:33.940
它里面有一个属性

34:33.940 --> 34:36.510
叫做Ease

34:36.510 --> 34:37.510
Ease是个属性

34:37.510 --> 34:38.510
你给它射的是什么

34:38.510 --> 34:39.510
它生成的元素

34:39.510 --> 34:40.510
就是什么

34:40.510 --> 34:41.510
我刚才忘了说

34:41.510 --> 34:42.510
Traceation

34:42.510 --> 34:43.510
它并不生成任何的元素

34:43.510 --> 34:44.510
它在业面上

34:44.510 --> 34:45.510
并不生成任何的元素

34:45.510 --> 34:47.510
它只是在控制过多效果的

34:47.510 --> 34:49.510
这个Component的组件

34:49.510 --> 34:50.510
它会生成元素

34:50.510 --> 34:51.510
那么到底生成什么元素

34:51.510 --> 34:52.510
它也不知道

34:52.510 --> 34:53.510
你刚才说了

34:53.510 --> 34:54.510
它一个生成个P

34:54.510 --> 34:55.510
它就是个P元素

34:55.510 --> 34:56.510
就这么简单

34:56.510 --> 34:57.510
保证你看一下

34:57.510 --> 34:59.510
它是不是一个P元素

34:59.510 --> 35:01.510
就这个意思

35:01.510 --> 35:03.510
你刚才写的是A7II

35:03.510 --> 35:05.510
它就是个A7II元素

35:05.510 --> 35:06.510
那么这样子

35:06.510 --> 35:08.510
是为了做一个动态的组件出来

35:08.510 --> 35:09.510
那怎么来动态呢

35:09.510 --> 35:10.510
我们的意思是可以绑定的

35:10.510 --> 35:11.510
对吧

35:11.510 --> 35:12.510
所有的属性都可以绑定

35:12.510 --> 35:13.510
意思到底是什么呢

35:13.510 --> 35:15.510
我们就写个H

35:17.510 --> 35:18.510
拼接个什么呢

35:18.510 --> 35:19.510
TitleLevel

35:19.510 --> 35:21.510
那么这个值是多少的

35:21.510 --> 35:22.510
这个值为1

35:22.510 --> 35:24.510
它就是一个A7II元素

35:24.510 --> 35:25.510
这个值为2

35:25.510 --> 35:26.510
它就是A7II元素

35:26.510 --> 35:27.510
你看吧

35:27.510 --> 35:29.510
目前就是一个A7II元素

35:29.510 --> 35:31.510
目前是A7II

35:31.510 --> 35:33.510
改成A7II

35:34.510 --> 35:35.510
改成A7II

35:35.510 --> 35:36.510
对不对

35:36.510 --> 35:37.510
好

35:37.510 --> 35:38.510
那么现在

35:38.510 --> 35:39.510
我们来做这么一件事

35:39.510 --> 35:40.510
这里一个按钮

35:40.510 --> 35:44.510
就是Level加

35:44.510 --> 35:46.510
然后还有一个按钮

35:46.510 --> 35:48.510
就是Level减

35:48.510 --> 35:50.510
这个按钮点击过后

35:50.510 --> 35:52.510
当然我没有去控制边界

35:52.510 --> 35:53.510
它不能变成0

35:53.510 --> 35:54.510
无所谓吧

35:54.510 --> 35:58.510
我们就TitleLevel减减

35:58.510 --> 36:03.510
这个就是TitleLevel加加

36:03.510 --> 36:07.510
这边我们用TitleLevel

36:07.510 --> 36:08.510
再拼接一下

36:09.510 --> 36:11.510
TitleLevel

36:11.510 --> 36:12.510
看一下这么一个效果

36:12.510 --> 36:14.510
目前是Level1

36:14.510 --> 36:15.510
然后让我加了过后

36:15.510 --> 36:17.510
你看看我点了加过后

36:17.510 --> 36:19.510
是不是这里渲染出来的东西

36:19.510 --> 36:20.510
它之前是A7II

36:20.510 --> 36:21.510
现在是不是变成A7II了

36:21.510 --> 36:23.510
那之前的A7II是不是要消失

36:23.510 --> 36:24.510
A7II是不是要进入

36:24.510 --> 36:26.510
那么这个时候也会有动画效果

36:27.510 --> 36:28.510
看没

36:28.510 --> 36:29.510
也会有

36:29.510 --> 36:30.510
3

36:30.510 --> 36:31.510
4

36:31.510 --> 36:33.510
5

36:33.510 --> 36:34.510
看没

36:34.510 --> 36:36.510
都会有动画效果

36:36.510 --> 36:37.510
减

36:38.510 --> 36:39.510
减

36:40.510 --> 36:41.510
这就是这么一个意识

36:41.510 --> 36:42.510
听懂了吧

36:42.510 --> 36:45.510
总之它监控到元素新增

36:45.510 --> 36:47.510
那么就会进入进入效果

36:48.510 --> 36:50.510
监控到元素移除

36:50.510 --> 36:51.510
或者是消失

36:51.510 --> 36:53.510
它就会进入消失效果

36:53.510 --> 36:55.510
这是全世界性的主见

36:56.510 --> 36:57.510
还有一个点

36:57.510 --> 36:59.510
如果说它一开始的时候

36:59.510 --> 37:01.510
一开始是没有进入效果的

37:02.510 --> 37:03.510
因为为什么呢

37:03.510 --> 37:04.510
因为很多时候

37:04.510 --> 37:05.510
我们一开始都不需要有动画

37:05.510 --> 37:07.510
那如果说你一开始需要有动画的话

37:07.510 --> 37:09.510
你可以再加上这个东西就可以了

37:09.510 --> 37:10.510
App

37:10.510 --> 37:11.510
加上这个东西就可以了

37:11.510 --> 37:13.510
加上它过后

37:13.510 --> 37:15.510
它就会监控一开始的情况

37:15.510 --> 37:17.510
一开始肯定是进入效果

37:17.510 --> 37:18.510
在一开始的时候

37:18.510 --> 37:20.510
会对这个跟元素应用进入效果

37:20.510 --> 37:21.510
非常简单

37:22.510 --> 37:23.510
一开始就会有了

37:24.510 --> 37:26.510
那么这就是

37:26.510 --> 37:28.510
全世界性这个主见的指使

37:28.510 --> 37:29.510
好了

37:29.510 --> 37:30.510
接下来我们来

37:31.510 --> 37:32.510
做一些练习

37:32.510 --> 37:33.510
做一个练习

37:33.510 --> 37:34.510
练习在这

37:35.510 --> 37:36.510
demo1

37:36.510 --> 37:39.520
看一下吧

37:39.520 --> 37:41.520
这个效果要实现这么一个效果

37:41.520 --> 37:45.480
这个效果是啥呀

37:45.480 --> 37:47.480
这个效果本质上是啥呀

37:47.480 --> 37:49.480
就是轮波图

37:49.480 --> 37:50.480
不过这一次的

37:50.480 --> 37:51.480
大家做的这种轮波图呢

37:51.480 --> 37:53.480
跟以往做的都不一样

37:53.480 --> 37:54.480
以往我们是不是要排列

37:54.480 --> 37:55.480
很多元素排在这

37:55.480 --> 37:56.480
对吧

37:56.480 --> 37:58.480
控制什么 margin left

37:58.480 --> 37:59.480
一个人往左

37:59.480 --> 38:00.480
左边移

38:00.480 --> 38:01.480
那么现在这个轮波图呢

38:01.480 --> 38:02.480
你会发现

38:02.480 --> 38:04.480
它这里只有一个元素

38:04.480 --> 38:06.480
我们的做法就是

38:06.480 --> 38:08.480
到时候要来一个新的元素

38:08.480 --> 38:09.480
我把一个新的元素

38:09.480 --> 38:10.480
构建出来

38:10.480 --> 38:11.480
动态的插入到这个位置

38:11.480 --> 38:13.480
然后把旧的元素往左边移

38:13.480 --> 38:14.480
新的元素呢

38:14.480 --> 38:15.480
往这边移

38:15.480 --> 38:16.480
对吧

38:16.480 --> 38:17.480
这样子也可以

38:17.480 --> 38:18.480
也可以做的模图的

38:18.480 --> 38:20.480
这个只是个央视

38:20.480 --> 38:21.480
没有做成的模图

38:21.480 --> 38:22.480
模图这个样子

38:22.480 --> 38:23.480
好

38:23.480 --> 38:24.480
咱们来看一下吧

38:24.480 --> 38:25.480
这个东西怎么来做

38:25.480 --> 38:26.480
首先呢我们在

38:26.480 --> 38:28.480
我们的代码在这

38:28.480 --> 38:30.480
你看现在我们的主见

38:30.480 --> 38:31.480
这个主见非常简单

38:31.480 --> 38:32.480
我们把它运行出来吧

38:32.480 --> 38:39.280
把这个运行出来

38:39.280 --> 38:47.260
我们准备装置之后

38:48.260 --> 38:49.260
好

38:49.260 --> 38:50.260
目前是这样子

38:50.260 --> 38:51.260
没有任何动画效果

38:51.260 --> 38:53.260
这个做起来其实非常简单

38:53.260 --> 38:54.260
怎么做的

38:54.260 --> 38:56.960
我们来看一下吧

38:56.960 --> 38:57.960
我这有两个按钮

38:57.960 --> 38:58.960
一个是点前面

38:58.960 --> 38:59.960
去前边

38:59.960 --> 39:00.960
一个是去后边

39:00.960 --> 39:01.960
它交往两个方法

39:01.960 --> 39:02.960
一个是去前边

39:02.960 --> 39:03.960
一个是去后边

39:03.960 --> 39:04.960
然后这里呢

39:04.960 --> 39:05.960
只有一个元素

39:05.960 --> 39:06.960
你看这个轮波图做的

39:06.960 --> 39:07.960
我没有用很多元素

39:07.960 --> 39:08.960
没有用一个列表

39:08.960 --> 39:09.960
没有去控制它的Martin left

39:09.960 --> 39:10.960
我们只是有一个元素在这

39:10.960 --> 39:12.960
那么这个元素呢

39:12.960 --> 39:14.960
其实我们这里呢

39:14.960 --> 39:15.960
就说到这

39:15.960 --> 39:17.960
就是首页的一块

39:17.960 --> 39:18.960
也可以想一想

39:18.960 --> 39:19.960
大家可以想一想

39:19.960 --> 39:20.960
能不能用类似的方式来做

39:20.960 --> 39:21.960
实际上是可以的

39:23.960 --> 39:24.960
我们这里有一个元素

39:24.960 --> 39:25.960
AMG

39:25.960 --> 39:27.960
它的一个内央式

39:27.960 --> 39:28.960
我们一会再看吧

39:29.960 --> 39:32.960
然后它有一个就是属性

39:32.960 --> 39:34.960
一个图片链接地址

39:35.960 --> 39:37.960
这里的keyz

39:37.960 --> 39:38.960
keyz先不管它吧

39:39.960 --> 39:40.960
好 看着

39:41.960 --> 39:43.960
我这里的数据里边

39:43.960 --> 39:44.960
有一个AMG的数组

39:44.960 --> 39:45.960
这个数组就是一些

39:45.960 --> 39:46.960
图片的URL地址

39:47.960 --> 39:48.960
当然你可以是一些

39:48.960 --> 39:49.960
别的东西标准

39:49.960 --> 39:51.960
这里边可以每一项是一个对象

39:51.960 --> 39:52.960
不光有图片地址

39:52.960 --> 39:53.960
还有一些图片的标题

39:53.960 --> 39:54.960
这些东西

39:54.960 --> 39:55.960
但是我们这里没有

39:55.960 --> 39:56.960
但是是不是可以

39:56.960 --> 39:57.960
当然可以

39:58.960 --> 40:00.960
这是一个图片的路径地址

40:01.960 --> 40:02.960
然后这个kerlin

40:02.960 --> 40:03.960
这个是表演什么意思呢

40:03.960 --> 40:05.960
表示的是目前显示的是

40:05.960 --> 40:06.960
第几张图片

40:07.960 --> 40:08.960
一个索印

40:08.960 --> 40:10.960
因此我写了一个计算属性

40:10.960 --> 40:12.960
计算属性里边有个kerlin

40:12.960 --> 40:13.960
它读的是什么呢

40:13.960 --> 40:15.960
就是把这个数组里边

40:15.960 --> 40:16.960
下标去读这个数组里边

40:16.960 --> 40:17.960
一个图片地址

40:17.960 --> 40:19.960
因此我们这个AMG

40:19.960 --> 40:21.960
它用的是图片地址

40:21.960 --> 40:22.960
用的是它

40:22.960 --> 40:23.960
通过一个计算属性

40:23.960 --> 40:25.960
拿到当前的图片地址

40:26.960 --> 40:27.960
还有一个计算属性的

40:27.960 --> 40:29.960
就是我们下标了最大值

40:29.960 --> 40:30.960
最大值不就是个

40:30.960 --> 40:31.960
数组长度减1吗

40:31.960 --> 40:33.960
我写了两个计算属性

40:33.960 --> 40:34.960
这一块能看懂吧

40:34.960 --> 40:35.960
这个

40:35.960 --> 40:36.960
这个

40:36.960 --> 40:37.960
和这个能看懂吧

40:37.960 --> 40:38.960
那么这样子

40:38.960 --> 40:39.960
我们的AMG

40:39.960 --> 40:40.960
是不是就显示到AMG上去了

40:40.960 --> 40:41.960
就显示出来了

40:42.960 --> 40:43.960
对不对

40:44.960 --> 40:46.960
那一会我们要

40:46.960 --> 40:48.960
我们要那个就是

40:48.960 --> 40:50.960
切换的时候怎么切换呢

40:50.960 --> 40:52.960
切换中的事情特别简单

40:52.960 --> 40:54.960
我就去改动这个下标就完事了

40:54.960 --> 40:56.960
下一章是不是把它加1

40:56.960 --> 40:57.960
上一章是不是减1

40:57.960 --> 40:58.960
对不对

40:58.960 --> 40:59.960
所以说我写了两个方法

40:59.960 --> 41:00.960
一个是那個是

41:00.960 --> 41:01.960
下一章就是

41:01.960 --> 41:02.960
加加

41:02.960 --> 41:04.960
把这个锁印一变

41:04.960 --> 41:05.960
锁印一变

41:05.960 --> 41:06.960
它是不是变了

41:06.960 --> 41:07.960
它变了是不是

41:07.960 --> 41:08.960
它就变了

41:08.960 --> 41:09.960
它的地址又变了

41:09.960 --> 41:10.960
非常简单吧

41:10.960 --> 41:11.960
但是我要判断一下

41:11.960 --> 41:13.960
如果说锁印超过了最大

41:13.960 --> 41:14.960
最大下标

41:14.960 --> 41:15.960
我要把它归零

41:15.960 --> 41:17.960
我要做一个无缝的

41:17.960 --> 41:18.960
无缝的模图

41:18.960 --> 41:19.960
所以我把它归零

41:19.960 --> 41:21.960
那如果说上一章的话

41:21.960 --> 41:22.960
怎么办

41:22.960 --> 41:24.960
上一章的话就是它减减

41:24.960 --> 41:25.960
减减的话就是

41:25.960 --> 41:27.960
如果它小为了0

41:27.960 --> 41:29.960
表示已经是第一章了

41:29.960 --> 41:30.960
第一章的上一章

41:30.960 --> 41:31.960
那就是最后一章

41:31.960 --> 41:33.960
把它设置为最大下标

41:33.960 --> 41:34.960
非常简单吧

41:34.960 --> 41:36.960
我目前没有设计到任何动画

41:36.960 --> 41:38.960
是不是非常简单

41:38.960 --> 41:39.960
好看一下吧

41:39.960 --> 41:43.040
好

41:43.040 --> 41:44.040
然后呢

41:44.040 --> 41:45.040
我这边呢

41:45.040 --> 41:46.040
做了一些样式

41:46.040 --> 41:47.040
这个样式也没什么好说的

41:47.040 --> 41:48.040
就是

41:48.040 --> 41:49.040
你看吧

41:49.040 --> 41:50.040
我为了让它居中

41:50.040 --> 41:52.040
就设置了一个Tesla Center

41:52.040 --> 41:53.040
然后呢

41:53.040 --> 41:54.040
这边有个两个按钮

41:54.040 --> 41:55.040
按钮了

41:55.040 --> 41:56.040
我给它留了一点距离

41:56.040 --> 41:57.040
两个按钮有点距离

41:57.040 --> 41:58.040
然后这个Image

41:58.040 --> 41:59.040
我设置了一个绝对定位

41:59.040 --> 42:00.040
当然它也可以

42:00.040 --> 42:01.040
不用绝对定位

42:01.040 --> 42:02.040
我们现在先暂时

42:02.040 --> 42:03.040
不用绝对定位吧

42:03.040 --> 42:05.480
先暂时

42:05.480 --> 42:06.480
不用绝对定位

42:06.480 --> 42:07.480
它目前是这个样子

42:07.480 --> 42:08.480
也可以

42:08.480 --> 42:09.480
是不是也可以

42:09.480 --> 42:10.480
好

42:10.480 --> 42:11.480
那么接下来

42:11.480 --> 42:13.480
我要给它加动画

42:13.480 --> 42:14.480
因为我发现

42:14.480 --> 42:15.480
这里边呢

42:15.480 --> 42:16.480
切换图片

42:16.480 --> 42:17.480
实际上本质是什么

42:17.480 --> 42:19.480
之前那个E-Made元素消失

42:19.480 --> 42:21.480
一个新的E-Made元素进入

42:21.480 --> 42:22.480
对不对

42:22.480 --> 42:24.480
就是之前的消失

42:24.480 --> 42:26.480
之前的消失之后的进入

42:26.480 --> 42:28.480
那么我们就要加上一个传辑型

42:28.480 --> 42:32.940
来控制它的消失和进入效果

42:32.940 --> 42:33.940
你看啊

42:33.940 --> 42:40.720
加了过后

42:40.720 --> 42:43.720
首先大家回答我第1个问题

42:43.720 --> 42:47.720
现在真的有元素消失和进入吗

42:47.720 --> 42:48.720
有吗

42:49.720 --> 42:51.720
是没有的

42:51.720 --> 42:53.720
为啥没有啊

42:53.720 --> 42:54.720
为啥没有

42:54.720 --> 42:57.720
因为我们点了下一张过后

42:57.720 --> 42:59.720
新的E-Made元素

42:59.720 --> 43:01.720
新的它也是一个E-Made元素

43:01.720 --> 43:02.720
对吧

43:02.720 --> 43:03.720
两个新就多美术一对比

43:03.720 --> 43:04.720
它会重用这个元素

43:04.720 --> 43:06.720
因此并不会有元素消失

43:06.720 --> 43:08.720
也并不会有元素进入

43:08.720 --> 43:09.720
那怎么办呢

43:09.720 --> 43:11.720
是不是给keyz

43:11.720 --> 43:12.720
对吧

43:12.720 --> 43:13.720
给了keyz过后

43:13.720 --> 43:14.720
每一个E-Made元素

43:14.720 --> 43:15.720
keyz是不一样的

43:15.720 --> 43:16.720
比方每个E-Made元素

43:16.720 --> 43:17.720
keyz是怎么

43:17.720 --> 43:18.720
你可以就用这个玩意

43:18.720 --> 43:19.720
做keyz

43:19.720 --> 43:20.720
也可以用下标

43:20.720 --> 43:21.720
可以

43:21.720 --> 43:22.720
这个都可以

43:22.720 --> 43:23.720
怎么样都可以

43:23.720 --> 43:25.720
总之保证它不一样

43:25.720 --> 43:26.720
不一样的时候

43:26.720 --> 43:28.720
是不是之前的元素消失

43:28.720 --> 43:31.720
新的元素就要创建

43:31.720 --> 43:32.720
对不对

43:32.720 --> 43:33.720
因为我们点了下一张过后

43:33.720 --> 43:35.720
是不是这个玩意会变化

43:35.720 --> 43:36.720
下一个E-Made元素

43:36.720 --> 43:38.720
keyz就不一样了

43:38.720 --> 43:39.720
这样子

43:39.720 --> 43:40.720
虽然

43:40.720 --> 43:41.720
其实已经可以看到

43:41.720 --> 43:42.720
散了一下对吧

43:42.720 --> 43:43.720
有个元素出来了

43:43.720 --> 43:44.720
一个元素消失了

43:44.720 --> 43:46.720
但是现在没有过度效果

43:46.720 --> 43:47.720
那么我要过度效果

43:47.720 --> 43:48.720
怎么办呢

43:48.720 --> 43:49.720
要设置样式

43:49.720 --> 43:51.720
我给它一个Name属性吧

43:51.720 --> 43:52.720
比方说

43:52.720 --> 43:53.720
我们先搞定next

43:53.720 --> 43:54.720
我们先搞定next

43:54.720 --> 43:55.720
再搞定prev

43:55.720 --> 43:57.720
下一个

43:57.720 --> 43:58.720
next

43:58.720 --> 44:01.720
E-Made就这样吧

44:01.720 --> 44:02.720
有了这个name的存在

44:02.720 --> 44:03.720
我们现在

44:03.720 --> 44:04.720
我们要到下一张

44:04.720 --> 44:05.720
下一张的时候

44:05.720 --> 44:06.720
你看

44:06.720 --> 44:07.720
下一张

44:07.720 --> 44:09.720
我们会同时发生两件事

44:09.720 --> 44:11.720
一个是救元素消失

44:11.720 --> 44:12.720
同时发生的

44:12.720 --> 44:13.720
这个救元素

44:13.720 --> 44:14.720
它会消失

44:14.720 --> 44:15.720
一个是新元素

44:15.720 --> 44:16.720
会进入

44:16.720 --> 44:17.720
那么一个一个来

44:17.720 --> 44:19.720
首先是救元素消失

44:19.720 --> 44:21.720
救元素要从目前的状态

44:21.720 --> 44:23.720
变为另一个状态

44:23.720 --> 44:25.720
同时我给它设置一个trash

44:25.720 --> 44:26.720
也就是救元素

44:26.720 --> 44:27.720
next

44:27.720 --> 44:28.720
E-Made

44:28.720 --> 44:29.720
是要消失

44:29.720 --> 44:30.720
消失的样式

44:30.720 --> 44:32.720
是neve active

44:32.720 --> 44:33.720
我们给它写上

44:33.720 --> 44:35.720
neve active

44:35.720 --> 44:37.720
active

44:37.720 --> 44:39.720
我给它加上一个trash

44:39.720 --> 44:41.720
比方说在

44:41.720 --> 44:42.720
一秒吧

44:42.720 --> 44:43.720
我们先写长一点

44:43.720 --> 44:44.720
或者是0.5秒

44:44.720 --> 44:46.720
其实一看得清楚

44:46.720 --> 44:48.720
0.5秒内

44:48.720 --> 44:50.720
完成样式的变化

44:50.720 --> 44:51.720
你先来看一下

44:51.720 --> 44:52.720
我现在长得没写

44:52.720 --> 44:55.090
你看一下

44:55.090 --> 44:57.090
是不是有0.5秒的间隔时间

44:57.090 --> 44:59.090
对吧

44:59.090 --> 45:00.090
0.5秒救元素是不是在这

45:00.090 --> 45:02.090
现在只是加了一个传承性

45:02.090 --> 45:03.090
其他长得没变化

45:03.090 --> 45:04.090
救元素在这

45:04.090 --> 45:06.090
有个0.5秒的时间

45:06.090 --> 45:07.090
然后

45:07.090 --> 45:08.090
才过度结束

45:08.090 --> 45:09.090
让过度结束过后

45:09.090 --> 45:11.090
才会真正的被删除

45:11.090 --> 45:13.090
一开始是两个共存的

45:13.090 --> 45:15.090
是不是两个共存

45:15.090 --> 45:17.090
好 那么接下来继续

45:17.090 --> 45:18.090
我要它的变化

45:18.090 --> 45:19.090
怎么变化呢

45:19.090 --> 45:20.090
从目前的状态

45:20.090 --> 45:22.090
变成什么呢

45:22.090 --> 45:25.090
变成一个最终的状态

45:25.090 --> 45:28.600
从目前的状态

45:28.600 --> 45:29.600
变成最终的状态

45:29.600 --> 45:30.600
那么我们就该写上

45:30.600 --> 45:31.600
一个最终的状态

45:31.600 --> 45:33.600
就neve to

45:33.600 --> 45:34.600
Nex image

45:34.600 --> 45:35.600
这是前綴

45:35.600 --> 45:38.600
是我们Name属性的影响

45:38.600 --> 45:40.600
最终的状态是吗

45:40.600 --> 45:41.600
neve to

45:41.600 --> 45:43.600
它变成一个什么东西呢

45:43.600 --> 45:45.600
变成一个opacity

45:46.600 --> 45:48.600
要不也慢慢消失

45:48.600 --> 45:49.600
然后呢

45:49.600 --> 45:51.600
我们先就这样

45:51.600 --> 45:52.600
你看着

45:52.600 --> 45:54.970
是不是可以了

45:54.970 --> 45:55.970
对吧

45:55.970 --> 45:56.970
但是呢

45:56.970 --> 45:58.970
为什么会散一下呢

45:58.970 --> 46:00.970
你觉得为什么会散一下

46:00.970 --> 46:02.970
为什么会散一下

46:02.970 --> 46:04.970
因为进入的时候

46:04.970 --> 46:06.970
你是两个元素在页面上

46:06.970 --> 46:07.970
是共存的

46:07.970 --> 46:08.970
同时存在的

46:08.970 --> 46:10.970
那么由于他们是

46:10.970 --> 46:12.970
他们是一个普通定位

46:12.970 --> 46:14.970
对不对 是一个普通定位

46:14.970 --> 46:21.570
由于他们是一个普通定位

46:21.570 --> 46:22.570
因此呢

46:22.570 --> 46:24.570
他们两个会并排显示

46:24.570 --> 46:25.570
因为图片都是

46:25.570 --> 46:26.570
因难元素嘛

46:26.570 --> 46:27.570
对吧 弹劾

46:27.570 --> 46:28.570
所以说两个元素

46:28.570 --> 46:29.570
同时存在的时候

46:29.570 --> 46:31.570
他们的定位位置

46:31.570 --> 46:33.570
会瞬间发生变化

46:33.570 --> 46:34.570
都是没办法的事情

46:34.570 --> 46:35.570
那怎么办呢

46:35.570 --> 46:37.570
那我只能让两个元素

46:37.570 --> 46:39.570
绝对定位

46:39.570 --> 46:41.570
把定到同一个位置

46:41.570 --> 46:42.570
可不可以呢

46:42.570 --> 46:43.570
当然可以

46:43.570 --> 46:44.570
我就在这里

46:44.570 --> 46:45.570
一面几个写个

46:45.570 --> 46:46.570
绝对定位

46:46.570 --> 46:47.570
Presing

46:47.570 --> 46:48.570
让他们重合

46:48.570 --> 46:49.570
对不对

46:50.570 --> 46:52.570
Left 50%

46:52.570 --> 46:53.570
横向局中

46:53.570 --> 46:54.570
Margin Right

46:54.570 --> 46:56.570
Left是一个负的

46:56.570 --> 46:57.570
宽度的一半

46:57.570 --> 46:58.570
100PS

46:58.570 --> 47:00.570
Top只能给他写个吧

47:00.570 --> 47:01.570
当然你可以在外面

47:01.570 --> 47:02.570
给他包一个元素

47:02.570 --> 47:04.570
包一个元素是普通定位

47:04.570 --> 47:05.570
他相对外面的元素

47:05.570 --> 47:06.570
定位都可以

47:06.570 --> 47:07.570
这些样式

47:07.570 --> 47:09.570
跟那个动画都没什么关系

47:09.570 --> 47:11.570
Top就100个像素

47:11.570 --> 47:14.080
你看看

47:14.080 --> 47:15.080
目前在这了

47:15.080 --> 47:17.080
现在我们点Nest

47:17.080 --> 47:18.080
主要是被折住了

47:18.080 --> 47:19.080
之前那个在慢慢消失

47:19.080 --> 47:21.080
但被折住了

47:21.080 --> 47:22.080
被折住了

47:22.080 --> 47:23.080
如果说

47:25.080 --> 47:27.080
我们把这个样式也桌上了

47:27.080 --> 47:29.080
把这个样式也桌上

47:29.080 --> 47:30.080
进入的样式也桌上

47:30.080 --> 47:31.080
进入的样式

47:31.080 --> 47:32.080
我们看一下这个效果

47:32.080 --> 47:33.080
一开始

47:33.080 --> 47:35.080
我希望它是透明的

47:35.080 --> 47:37.080
然后这里加上一个Triation

47:37.080 --> 47:39.080
0.5秒

47:39.080 --> 47:40.080
然后这里透明的

47:40.080 --> 47:41.080
状态一消失

47:41.080 --> 47:42.080
它就会变成不透明的

47:42.080 --> 47:44.080
0.5秒内变成不透明

47:44.080 --> 47:45.080
因此我们加上一个

47:45.080 --> 47:47.080
Nest

47:48.080 --> 47:53.180
Nest

47:53.180 --> 47:54.180
Enter

47:54.180 --> 47:56.180
是不是一开始是透明的

47:56.180 --> 47:58.180
然后呢

47:59.180 --> 48:01.180
这边也是

48:01.180 --> 48:03.180
Nest

48:03.180 --> 48:04.180
Enter

48:04.180 --> 48:05.180
Alt

48:05.180 --> 48:08.180
加上一个过渡过渡时间

48:08.180 --> 48:09.180
保存

48:09.180 --> 48:10.180
你看看

48:11.180 --> 48:13.180
一个消失

48:13.180 --> 48:14.180
一个出现

48:14.180 --> 48:16.180
我们把时间测长一点

48:16.180 --> 48:18.180
5秒钟

48:18.180 --> 48:20.490
一个消失

48:20.490 --> 48:21.490
一个出现

48:22.490 --> 48:23.490
对不对

48:23.490 --> 48:24.490
一个消失

48:27.490 --> 48:28.490
但是我们现在

48:28.490 --> 48:29.490
还有一个滑动的效果

48:29.490 --> 48:30.490
就是消失的

48:30.490 --> 48:31.490
要往左边滑

48:31.490 --> 48:32.490
出现的

48:32.490 --> 48:33.490
要往右边滑

48:33.490 --> 48:37.000
那这个玩意怎么动呢

48:37.000 --> 48:38.000
我们

48:38.000 --> 48:40.000
无非就是要做这么一件事吧

48:40.000 --> 48:41.000
进入的时候

48:41.000 --> 48:42.000
是往左边滑

48:42.000 --> 48:44.000
都是往左边滑

48:44.000 --> 48:45.000
进入的时候

48:45.000 --> 48:46.000
是往左边滑

48:46.000 --> 48:48.000
因此在Enter的时候

48:48.000 --> 48:50.000
它一开始的位置

48:50.000 --> 48:51.000
能在这

48:51.000 --> 48:52.000
一开始的位置

48:52.000 --> 48:53.000
要偏移一下

48:53.000 --> 48:54.000
要往右边偏移一下

48:54.000 --> 48:55.000
对吧

48:55.000 --> 48:56.000
到时候这个央视一消失

48:56.000 --> 48:58.000
是不是就滑动到当前的位置了

48:58.000 --> 48:59.000
对吧

48:59.000 --> 49:00.000
就跟这个Opacity是一样的

49:00.000 --> 49:01.000
一开始呢

49:01.000 --> 49:03.000
它都完全透明的

49:03.000 --> 49:04.000
当这个央视一消失

49:04.000 --> 49:05.000
它就变成补透明的

49:05.000 --> 49:07.000
逐渐的变成补透明

49:07.000 --> 49:08.000
那这里也是一样

49:08.000 --> 49:09.000
一开始呢

49:09.000 --> 49:10.000
我们把它往右边移动

49:10.000 --> 49:11.000
那么就是

49:11.000 --> 49:13.000
Transform

49:13.000 --> 49:15.000
Translate X

49:15.000 --> 49:16.000
往右边移动

49:16.000 --> 49:17.000
右边移动的话

49:17.000 --> 49:18.000
就是正数

49:18.000 --> 49:19.000
正数该移动个宽度大小吧

49:19.000 --> 49:20.000
200px

49:20.000 --> 49:22.000
里面的看一下

49:22.000 --> 49:23.000
点这里

49:23.000 --> 49:24.000
你看

49:24.000 --> 49:25.000
进入的时候

49:25.000 --> 49:26.000
是不是先从这里滑过来的

49:26.000 --> 49:28.000
滑到当前位置的

49:28.000 --> 49:29.000
那么

49:29.000 --> 49:30.000
离开的时候呢

49:30.000 --> 49:32.000
我就要从当前位置

49:32.000 --> 49:33.000
滑动到

49:33.000 --> 49:34.000
左边的地方

49:34.000 --> 49:35.000
对吧

49:35.000 --> 49:36.000
离开的时候

49:36.000 --> 49:37.000
再单独设置一下

49:37.000 --> 49:38.000
Next

49:38.000 --> 49:40.000
Image

49:40.000 --> 49:42.000
Leave to

49:42.000 --> 49:44.000
Transform

49:44.000 --> 49:47.000
就是Translate X

49:47.000 --> 49:49.000
复的200个相处

49:52.000 --> 49:53.000
是不是可以了

49:53.000 --> 49:55.000
对不对

49:56.000 --> 49:58.560
如果这个图片

49:58.560 --> 49:59.560
不是圆胶举行的话

49:59.560 --> 50:00.560
其实就是

50:00.560 --> 50:01.560
本质上就是个轮波图

50:01.560 --> 50:03.880
你看

50:04.880 --> 50:06.880
把圆胶举行该去了

50:06.880 --> 50:07.880
本质上就是个轮波图

50:07.880 --> 50:08.880
然后呢我把

50:08.880 --> 50:09.880
Opacity去掉

50:09.880 --> 50:10.880
Opacity不要了

50:10.880 --> 50:12.880
我只要滑动

50:13.880 --> 50:14.880
你看是不是有个轮波图

50:14.880 --> 50:15.880
然后你做

50:15.880 --> 50:16.880
外面做一个DIV

50:16.880 --> 50:18.880
让它溢出隐藏

50:18.880 --> 50:20.880
外面

50:20.880 --> 50:21.880
就是溢出的部分

50:21.880 --> 50:22.880
就看不见了

50:22.880 --> 50:26.890
那么还本质上就是个轮波图

50:26.890 --> 50:28.890
而且是个无缝轮波图

50:28.890 --> 50:29.890
无缝轮波图

50:29.890 --> 50:30.890
这Prave是有问题的

50:31.890 --> 50:33.890
好那么这是这一块

50:33.890 --> 50:37.550
加上吧

50:39.550 --> 50:42.920
好那么现在我们看上一张

50:42.920 --> 50:43.920
因为发现

50:43.920 --> 50:44.920
上一张变化的时候

50:44.920 --> 50:45.920
它也是往这边移动

50:45.920 --> 50:46.920
为什么呢

50:47.920 --> 50:49.920
因为只要有新元素出现

50:49.920 --> 50:50.920
我们的根据

50:50.920 --> 50:51.920
是我们央视的影像

50:51.920 --> 50:52.920
只要有新元素的出现

50:52.920 --> 50:54.920
它一定从这里出现的

50:54.920 --> 50:55.920
为什么呢

50:55.920 --> 50:56.920
因为我们给它设置了一个Enter

50:56.920 --> 50:57.920
它出现的位置

50:57.920 --> 50:59.920
是偏低它原本位置的

50:59.920 --> 51:00.920
右边两百个相处

51:00.920 --> 51:01.920
它一定原本位置

51:01.920 --> 51:02.920
应该在这儿出现的位置

51:02.920 --> 51:04.920
但是由于我们偏低了

51:04.920 --> 51:05.920
它应该在这儿

51:06.920 --> 51:07.920
然后Enter样式

51:07.920 --> 51:08.920
被移出掉过后了

51:08.920 --> 51:10.920
它受到全随性的影像

51:10.920 --> 51:11.920
它会滑过来

51:11.920 --> 51:12.920
所以它一定是

51:12.920 --> 51:14.920
从这边出现的新元素

51:14.920 --> 51:15.920
因此我们先希望的是

51:15.920 --> 51:17.920
往点它的时候

51:17.920 --> 51:18.920
它就不要从这边出现了

51:18.920 --> 51:20.920
也就是我们要怎么办

51:21.920 --> 51:25.680
我们要给它应用一个

51:25.680 --> 51:27.680
我们要给它应用一个就是

51:27.680 --> 51:28.680
其他的样式

51:28.680 --> 51:29.680
也就是什么

51:29.680 --> 51:31.680
我们点Next和点Preview

51:31.680 --> 51:33.680
它们应用的样式是不一样的

51:33.680 --> 51:35.680
点Next应该用这些样式

51:35.680 --> 51:36.680
点Preview呢

51:37.680 --> 51:39.680
看着我们用Preview来写一下

51:42.060 --> 51:44.060
我希望它应用下面这套样式

51:44.060 --> 51:45.060
包里的都是一样的

51:45.060 --> 51:47.060
Preview这个玩意儿是一样的

51:47.060 --> 51:48.060
这个玩意儿是一样的

51:48.060 --> 51:50.060
所以说这个玩意儿可以合并

51:50.060 --> 51:51.060
可以跟上面合并

51:54.200 --> 51:56.200
那么这个玩意儿写完了

51:58.200 --> 51:59.200
Preview

51:59.200 --> 52:00.200
Image

52:00.200 --> 52:01.200
Enter

52:01.200 --> 52:02.200
PreviewImageDiv2

52:02.200 --> 52:04.200
那么这个玩意儿也是一样的

52:04.200 --> 52:05.200
对吧

52:05.200 --> 52:06.200
这个玩意儿并没有什么区别

52:08.200 --> 52:09.200
你们自己去想一想

52:09.200 --> 52:10.200
是不是没有区别

52:10.200 --> 52:11.200
好

52:11.200 --> 52:13.200
那么这个PreviewEnter

52:13.200 --> 52:14.200
这个Preview

52:16.200 --> 52:17.200
那么就刚好相反

52:17.200 --> 52:18.200
对不对

52:19.200 --> 52:20.200
点下一张的时候

52:20.200 --> 52:21.200
进入的图片

52:21.200 --> 52:22.200
是往右边偏移的

52:22.200 --> 52:23.200
点上一张的时候

52:23.200 --> 52:25.200
进入的图片是往左边偏移的

52:25.200 --> 52:26.200
所以说这个玩意儿

52:26.200 --> 52:27.200
跟这个玩意儿是不一样的

52:28.200 --> 52:29.200
把合并一下

52:29.200 --> 52:31.900
那么同样的

52:31.900 --> 52:32.900
这个玩意儿

52:32.900 --> 52:33.900
跟这个玩意儿是不一样的

52:36.470 --> 52:38.470
然后点下一张进入的时候

52:39.470 --> 52:40.470
是往右边偏移的

52:41.470 --> 52:42.470
下一张

52:42.470 --> 52:43.470
上一张移出的时候

52:44.470 --> 52:45.470
上一张移出

52:46.470 --> 52:47.470
点上一张移出的时候

52:47.470 --> 52:48.470
是往这边移出的

52:48.470 --> 52:49.470
那么这个方向刚好相反

52:50.470 --> 52:52.470
那么现在我们有了这么一套样式过后

52:52.470 --> 52:54.470
我就希望点下一张的时候

52:54.470 --> 52:55.470
它应用这个样式

52:55.470 --> 52:56.470
Next

52:56.470 --> 52:57.470
点上一张的时候

52:57.470 --> 52:58.470
应用这种样式

52:58.470 --> 52:59.470
Preview

52:59.470 --> 53:00.470
也就是说啥意思呢

53:00.470 --> 53:01.470
我Name这一块东西

53:01.470 --> 53:03.470
这一块是变化的

53:04.470 --> 53:05.470
它有可能是Next

53:05.470 --> 53:06.470
有可能是Preview

53:06.470 --> 53:07.470
对吧

53:07.470 --> 53:08.470
那么到底是啥

53:08.470 --> 53:10.470
是不是我们可以用数据来控制

53:10.470 --> 53:11.470
对不对

53:11.470 --> 53:12.470
我们今天都是

53:12.470 --> 53:13.470
根据数据宣扬出来的

53:13.470 --> 53:14.470
我们写个Direct型

53:15.470 --> 53:16.470
默认为下一张

53:18.470 --> 53:19.470
然后当我们点

53:19.470 --> 53:20.470
点击下一张的时候

53:21.470 --> 53:22.470
我就把Direct型

53:23.470 --> 53:24.470
设置为Next

53:27.420 --> 53:28.420
点上一张的时候

53:28.420 --> 53:29.420
我就把Direct型

53:30.420 --> 53:32.420
设置为Preview

53:32.420 --> 53:34.420
这可以非常灵活的处理

53:35.420 --> 53:36.420
然后这边

53:36.420 --> 53:37.420
我们Name是不动态的

53:38.420 --> 53:46.940
就是什么Direct型

53:47.940 --> 53:48.940
对吧

53:48.940 --> 53:49.940
非常简单

53:50.940 --> 53:51.940
就做出来了

53:52.940 --> 53:53.940
这就是个无缝轮膜图

53:53.940 --> 53:54.940
你看看我

53:54.940 --> 53:55.940
以为这个组建过后

53:55.940 --> 53:56.940
我们无缝轮膜图的

53:56.940 --> 53:57.940
做起来就轻松很多了

53:58.940 --> 53:59.940
当然不用它能不能做无缝轮膜图

53:59.940 --> 54:00.940
你不要告诉我不能做

54:01.940 --> 54:02.940
肯定是怎么可以做的

54:02.940 --> 54:03.940
只不过

54:03.940 --> 54:04.940
就会麻烦很多

54:05.940 --> 54:06.940
有了这个组建过后

54:06.940 --> 54:07.940
你看我们短练这些代码

54:07.940 --> 54:08.940
就会非常轻松的实现一个

54:09.940 --> 54:10.940
无缝轮膜图了

54:11.940 --> 54:13.940
OK 这是关于这一块

54:17.510 --> 54:18.510
这一块有点长

54:19.510 --> 54:20.510
好 下一个例子

54:21.510 --> 54:23.880
下一个例子是这个

54:24.880 --> 54:25.880
我们看这个例子

54:25.880 --> 54:26.880
这个例子又有区别

54:29.200 --> 54:30.200
这里有个文门框

54:30.200 --> 54:31.200
这里下面是一些任务

54:31.200 --> 54:32.200
做了一个简单的Tutorialist

54:33.200 --> 54:34.200
这有些任务

54:35.200 --> 54:36.200
我们这里可以添加一些任务

54:37.200 --> 54:39.200
你看添加的任务是划进来的

54:40.200 --> 54:42.200
然后这任务还可以对它水系排序

54:43.200 --> 54:45.200
当我们需要完成一个任务的时候

54:45.200 --> 54:46.200
它会跑出去

54:47.200 --> 54:48.200
就这么一个效果

54:49.200 --> 54:51.830
这个效果你会发现

54:52.830 --> 54:55.830
就有动画和过渡的地方在哪呢

54:55.830 --> 54:56.830
所以这个列表

54:57.830 --> 54:58.830
这个列表的地方是有过渡的

54:59.830 --> 55:00.830
但是我们现在

55:00.830 --> 55:01.830
能不能自己写

55:01.830 --> 55:02.830
当然可以自己写

55:02.830 --> 55:03.830
直播比较麻烦一点

55:05.830 --> 55:07.830
但是我们的问题是啥呢

55:07.830 --> 55:08.830
我们的问题是

55:09.830 --> 55:10.830
我们这个Tracing组建

55:11.830 --> 55:12.830
它只能影响单个根元素

55:12.830 --> 55:14.830
它无法去影响一个列表

55:15.830 --> 55:17.830
然后你要影响列表的话

55:17.830 --> 55:19.830
你再用这个东西叫过渡组

55:20.830 --> 55:21.830
Tracing它可以监控

55:21.830 --> 55:23.830
单个动物元素的出现和消失

55:23.830 --> 55:24.830
并为其附加样式

55:24.830 --> 55:25.830
但是如果说

55:25.830 --> 55:26.830
你要监控一个动物列表的话

55:26.830 --> 55:28.830
你要使用Tracing Group

55:28.830 --> 55:29.830
这个组建

55:29.830 --> 55:30.830
也就是啥意思呢

55:31.830 --> 55:33.830
你再在外面去包一个东西

55:34.830 --> 55:35.830
之前我们用Tracing对吧

55:35.830 --> 55:36.830
那里你在用什么呢

55:36.830 --> 55:37.830
你在外面去包一个

55:37.830 --> 55:39.830
如果说这里边是一个列表

55:40.830 --> 55:42.830
得去包一个Tracing Group

55:42.830 --> 55:43.830
去包一个它

55:44.830 --> 55:45.830
那么它跟Tracing有什么区别呢

55:45.830 --> 55:47.830
就在于它里边的snot里边不一样

55:47.830 --> 55:49.830
Tracing里边只能是一个单个元素

55:49.830 --> 55:51.830
Tracing Group可以是

55:51.830 --> 55:52.830
里边可以是一个列表

55:53.830 --> 55:54.830
更多非常细致的区别

55:54.830 --> 55:56.830
你可以去参与官方文档

55:59.650 --> 56:00.650
那么Tracing Group

56:00.650 --> 56:01.650
还有一个非常显著的特点

56:01.650 --> 56:02.650
就是它会生成元素

56:03.650 --> 56:04.650
Tracing它是不会生成

56:04.650 --> 56:05.650
任何元素的

56:05.650 --> 56:06.650
它只是来控制动画

56:06.650 --> 56:07.650
但是Tracing Group

56:07.650 --> 56:08.650
它会生成元素的

56:09.650 --> 56:10.650
举个例子吧

56:10.650 --> 56:12.650
我们比方说

56:13.650 --> 56:15.650
我们这个复制一下吧

56:15.650 --> 56:16.650
复制一下

56:17.650 --> 56:19.650
我们这里用Tracing Group

56:19.650 --> 56:20.650
来一个吧

56:21.650 --> 56:23.650
我们比方说这里一个数字

56:31.020 --> 56:33.020
然后这边我们有一个

56:34.020 --> 56:35.020
li

56:37.020 --> 56:38.020
numbers

56:38.020 --> 56:45.040
这些项目现在移出掉

56:48.380 --> 56:50.380
这边我们也不需要

56:50.380 --> 56:51.380
也不需要这个东西了

56:53.380 --> 56:55.380
给它个宽度吧

56:55.380 --> 56:59.010
宽度0

57:00.010 --> 57:02.010
好 下面我们写一个li

57:02.010 --> 57:03.010
选了一个li

57:03.010 --> 57:04.010
v4

57:05.010 --> 57:07.010
你看它为什么不选用一个Uli

57:07.010 --> 57:08.010
Uli的话

57:09.010 --> 57:10.010
它就变成单个元素了

57:10.010 --> 57:11.010
看到没

57:12.010 --> 57:13.010
我们要用Tracing Group

57:15.840 --> 57:16.840
它就变单个元素了

57:16.840 --> 57:17.840
所以我们要用li

57:18.840 --> 57:19.840
li v4

57:20.840 --> 57:21.840
i to in

57:22.840 --> 57:23.840
numbers

57:24.840 --> 57:25.840
RT吧

57:25.840 --> 57:26.840
T就是i to

57:26.840 --> 57:28.840
这些显示的是也是i to

57:28.840 --> 57:31.600
好 看一下

57:37.170 --> 57:38.170
目前是这个样子

57:39.170 --> 57:40.170
有动画吗

57:40.170 --> 57:41.170
肯定没有动画

57:41.170 --> 57:42.170
目前没有什么动画

57:42.170 --> 57:44.170
然后我们现在有可能

57:44.170 --> 57:46.170
会新增一些元素

57:46.170 --> 57:48.170
比方说我们这里写一些方法

57:48.170 --> 57:49.170
写个方法吧

57:49.170 --> 57:53.870
get write index

57:53.870 --> 57:55.870
我们得到一个随机的

57:55.870 --> 57:56.870
索引

57:56.870 --> 57:58.870
我们得到一个随机的索引

57:58.870 --> 58:02.240
索引是

58:02.240 --> 58:04.240
就来一个

58:04.240 --> 58:06.240
mys write

58:06.240 --> 58:08.240
诚意

58:08.240 --> 58:10.240
z nums

58:10.240 --> 58:11.240
derlans

58:11.240 --> 58:12.240
传承一个随机索引

58:12.240 --> 58:13.240
这个代码应该能写吧

58:14.240 --> 58:16.240
就是0到它这么多

58:16.240 --> 58:18.240
然后再来一个mys floor

58:19.240 --> 58:21.240
传承一个随机的索引

58:21.240 --> 58:22.240
我们也说

58:22.240 --> 58:23.240
我们现在要加一个数字

58:23.240 --> 58:25.240
把这个数字加到随机的一个位置

58:25.240 --> 58:26.240
明儿的意思吧

58:26.240 --> 58:28.240
然后我们这里add

58:28.240 --> 58:29.240
number

58:29.240 --> 58:31.240
但是我们要保证加的数

58:31.240 --> 58:32.240
因为我们这个so key的影响

58:32.240 --> 58:34.240
不能重复

58:34.240 --> 58:36.240
我要保证加的数字跟它

58:36.240 --> 58:37.240
这些都不一样

58:37.240 --> 58:38.240
那我就先来个这个吧

58:38.240 --> 58:42.240
123456

58:42.240 --> 58:44.240
这个顺序的

58:44.240 --> 58:46.240
接下来我得到一个next number

58:47.240 --> 58:49.240
next number是7

58:50.240 --> 58:51.240
当然7我不一定加到最后

58:51.240 --> 58:53.240
可能加到其他位置

58:53.240 --> 58:55.240
添加一个数字

58:55.240 --> 58:56.240
添加数字的时候

58:56.240 --> 58:58.240
我就把next加到

58:58.240 --> 58:59.240
一个随机的位置

58:59.240 --> 59:00.240
首先得到index

59:00.240 --> 59:02.240
this

59:03.240 --> 59:04.240
得到一个随机的位置

59:04.240 --> 59:06.240
然后我把这个数组

59:06.240 --> 59:09.880
numbers用splice

59:09.880 --> 59:10.880
splice

59:12.880 --> 59:14.880
从哪个位置呢

59:14.880 --> 59:15.880
就是个随机的位置

59:15.880 --> 59:16.880
3出几个呢

59:16.880 --> 59:17.880
3出0个

59:17.880 --> 59:19.880
在这个位置加什么呢

59:19.880 --> 59:20.880
加this next

59:20.880 --> 59:21.880
你看懂吧

59:21.880 --> 59:22.880
比方说随机的位置

59:22.880 --> 59:23.880
产生的是0123

59:23.880 --> 59:24.880
产生是这个位置

59:24.880 --> 59:26.880
那我就把7加到这个位置

59:26.880 --> 59:27.880
好

59:27.880 --> 59:28.880
然后那个是numbers

59:28.880 --> 59:29.880
那个是next加加

59:29.880 --> 59:30.880
那么下一个位置

59:30.880 --> 59:31.880
下一个数字就是8了

59:31.880 --> 59:32.880
好

59:32.880 --> 59:33.880
现在我们一个按钮

59:35.880 --> 59:37.880
add number

59:37.880 --> 59:38.880
看一下

59:40.880 --> 59:41.880
点击到时候

59:41.880 --> 59:42.880
我们调一个方法

59:42.880 --> 59:43.880
add number

59:43.880 --> 59:46.510
放心

59:47.510 --> 59:48.510
你看7是不是加这

59:48.510 --> 59:49.510
再点

59:49.510 --> 59:50.510
8是不是加这

59:50.510 --> 59:51.510
再点

59:51.510 --> 59:52.510
90是加这

59:52.510 --> 59:53.510
随机到一个位置

59:53.510 --> 59:55.510
现在我们来看一下

59:55.510 --> 59:56.510
如何来使用动画

59:56.510 --> 01:00:01.190
他这个玩意

01:00:01.190 --> 01:00:02.190
首先他这个玩意

01:00:02.190 --> 01:00:03.190
会生成什么东西

01:00:03.190 --> 01:00:04.190
这个传辑性group

01:00:04.190 --> 01:00:05.190
会生成什么东西

01:00:05.190 --> 01:00:06.190
目前它默认生成的是

01:00:06.190 --> 01:00:07.190
一个span元素

01:00:07.190 --> 01:00:09.190
它会生成元素的

01:00:09.190 --> 01:00:11.190
它不像传辑性那个逐渐

01:00:11.190 --> 01:00:12.190
它会生成元素的

01:00:12.190 --> 01:00:13.190
那怎么办

01:00:13.190 --> 01:00:14.190
我们如何来

01:00:14.190 --> 01:00:15.190
控制它生成元素呢

01:00:15.190 --> 01:00:16.190
你可以通过这个手信

01:00:16.190 --> 01:00:17.190
tack

01:00:17.190 --> 01:00:19.190
我们希望它是一个UL

01:00:19.190 --> 01:00:20.190
它就变成一个UL

01:00:20.190 --> 01:00:22.190
就这么简单

01:00:22.190 --> 01:00:23.190
当然你也可以

01:00:23.190 --> 01:00:25.190
加上一些固定的样式

01:00:25.190 --> 01:00:26.190
好

01:00:26.190 --> 01:00:27.190
那么接下来

01:00:28.190 --> 01:00:29.190
它会做什么事情呢

01:00:29.190 --> 01:00:31.190
它会监控里面的这个列表

01:00:31.190 --> 01:00:32.190
监控它什么

01:00:32.190 --> 01:00:33.190
监控很多东西

01:00:33.190 --> 01:00:34.190
看这个列表里面

01:00:34.190 --> 01:00:36.190
有没有新元素加入

01:00:36.190 --> 01:00:37.190
看这个列表里面

01:00:37.190 --> 01:00:38.190
有没有救元素消失

01:00:38.190 --> 01:00:40.190
有新元素加入

01:00:40.190 --> 01:00:42.190
它会对新元素应用

01:00:42.190 --> 01:00:44.190
进入效果

01:00:44.190 --> 01:00:45.190
有救元素消失

01:00:45.190 --> 01:00:46.190
它会对救元素

01:00:46.190 --> 01:00:48.190
应用消失效果

01:00:49.190 --> 01:00:50.190
是吧

01:00:50.190 --> 01:00:51.190
道理还是一样的

01:00:51.190 --> 01:00:52.190
那么我们看一下

01:00:52.190 --> 01:00:53.190
我们现在要进入

01:00:53.190 --> 01:00:54.190
对吧

01:00:54.190 --> 01:00:55.190
进入效果该怎么弄呢

01:00:55.190 --> 01:00:56.190
一样的道理

01:00:57.190 --> 01:00:58.190
我们可以

01:00:58.190 --> 01:00:59.190
它的那样式是Number

01:00:59.190 --> 01:01:00.190
Numbers

01:01:00.190 --> 01:01:01.190
一样的

01:01:01.190 --> 01:01:02.190
Numbers Enter

01:01:02.190 --> 01:01:04.190
我一开始的时候呢

01:01:04.190 --> 01:01:06.190
我让它Opacity为0

01:01:06.190 --> 01:01:07.190
然后进入的时候

01:01:07.190 --> 01:01:09.190
我们打算从右边进入

01:01:09.190 --> 01:01:10.190
好吧

01:01:10.190 --> 01:01:11.190
我们把这个元素

01:01:11.190 --> 01:01:12.190
从右边进入

01:01:12.190 --> 01:01:14.190
然后Chance Phone

01:01:14.190 --> 01:01:15.190
我就把它往右边

01:01:15.190 --> 01:01:16.190
右边移动

01:01:16.190 --> 01:01:17.190
Chance Nets X

01:01:17.190 --> 01:01:18.190
一开始的时候

01:01:18.190 --> 01:01:19.190
从右边来

01:01:19.190 --> 01:01:21.190
移动个一两个相处

01:01:21.190 --> 01:01:23.950
好

01:01:23.950 --> 01:01:25.950
然后再加上一个Numbers

01:01:25.950 --> 01:01:26.950
Enter

01:01:26.950 --> 01:01:27.950
Enter Active

01:01:29.950 --> 01:01:30.950
Precision

01:01:31.950 --> 01:01:32.950
1.5秒

01:01:32.950 --> 01:01:35.710
你看

01:01:35.710 --> 01:01:36.710
是不是右边进入

01:01:37.710 --> 01:01:38.710
对吧

01:01:38.710 --> 01:01:39.710
那有消失呢

01:01:39.710 --> 01:01:40.710
删除了

01:01:40.710 --> 01:01:41.710
不要再来个按钮

01:01:41.710 --> 01:01:42.710
Button

01:01:42.710 --> 01:01:46.490
Click

01:01:47.490 --> 01:01:48.490
Denet

01:01:48.490 --> 01:01:49.490
Dial Number

01:01:50.490 --> 01:01:52.870
Denet

01:01:52.870 --> 01:01:53.870
好 删除一个元素

01:01:54.870 --> 01:01:55.870
删除一个元素

01:01:55.870 --> 01:01:56.870
非常简单

01:01:56.870 --> 01:01:57.870
拿到一个index

01:01:57.870 --> 01:01:58.870
this gets red and index

01:01:59.870 --> 01:02:00.870
然后呢

01:02:00.870 --> 01:02:01.870
thisNumbers

01:02:01.870 --> 01:02:02.870
Supplies

01:02:02.870 --> 01:02:03.870
index

01:02:04.870 --> 01:02:05.870
删除了

01:02:06.870 --> 01:02:07.870
删除

01:02:08.870 --> 01:02:09.870
删除一个

01:02:09.870 --> 01:02:10.870
那么删除的时候

01:02:10.870 --> 01:02:11.870
我希望这样子

01:02:12.870 --> 01:02:14.870
它从它移到右边去

01:02:15.870 --> 01:02:16.870
也就是说

01:02:16.870 --> 01:02:17.870
我们这里也一样的

01:02:17.870 --> 01:02:19.870
Numbers Live Active

01:02:19.870 --> 01:02:20.870
对吧

01:02:20.870 --> 01:02:21.870
要有一个过渡效果

01:02:21.870 --> 01:02:22.870
然后呢

01:02:22.870 --> 01:02:23.870
删除的时候

01:02:23.870 --> 01:02:26.870
就是Numbers Live 2

01:02:27.870 --> 01:02:28.870
都移到右边去

01:02:28.870 --> 01:02:30.870
然后我还是变牛

01:02:30.870 --> 01:02:31.870
看一下

01:02:31.870 --> 01:02:32.870
添加

01:02:32.870 --> 01:02:33.870
删除

01:02:33.870 --> 01:02:34.870
添加

01:02:34.870 --> 01:02:35.870
删除

01:02:35.870 --> 01:02:36.870
添加

01:02:36.870 --> 01:02:37.870
删除

01:02:39.870 --> 01:02:40.870
然后呢

01:02:40.870 --> 01:02:41.870
现在有一个问题就是

01:02:42.870 --> 01:02:44.870
动画并不平滑

01:02:44.870 --> 01:02:45.870
啥意思呢

01:02:45.870 --> 01:02:46.870
我们放大看一下

01:02:46.870 --> 01:02:48.870
我们点击添加的时候

01:02:49.870 --> 01:02:50.870
你看其他的元素

01:02:50.870 --> 01:02:52.870
因为多了个元素了

01:02:52.870 --> 01:02:54.870
这个地方添了个元素

01:02:54.870 --> 01:02:56.870
就导致了其他的元素

01:02:56.870 --> 01:02:58.870
位置受到了几压

01:02:58.870 --> 01:02:59.870
其他的元素会瞬间移动

01:02:59.870 --> 01:03:00.870
把位置腾出来

01:03:00.870 --> 01:03:01.870
因为我们这里穿适风

01:03:01.870 --> 01:03:04.870
它并不影响那个元素布局

01:03:04.870 --> 01:03:05.870
它只是有了一个

01:03:05.870 --> 01:03:06.870
视觉上的动画效果

01:03:06.870 --> 01:03:07.870
你看啊

01:03:08.870 --> 01:03:09.870
对不对

01:03:09.870 --> 01:03:10.870
其他元素是不是立刻

01:03:10.870 --> 01:03:11.870
腾过位置

01:03:11.870 --> 01:03:12.870
它不是一个缓脉的过程

01:03:13.870 --> 01:03:14.870
那么这个东西又怎么办呢

01:03:14.870 --> 01:03:16.870
我们希望它平滑移动

01:03:16.870 --> 01:03:19.870
如果说是我们自行来做的话

01:03:19.870 --> 01:03:20.870
我们可以呢

01:03:20.870 --> 01:03:21.870
有一种方案就是

01:03:21.870 --> 01:03:22.870
把全部变成绝对定位

01:03:23.870 --> 01:03:24.870
然后呢

01:03:24.870 --> 01:03:25.870
用绝对定位来控制

01:03:25.870 --> 01:03:26.870
那个太麻烦了

01:03:27.870 --> 01:03:28.870
其实这里呢

01:03:28.870 --> 01:03:29.870
一个非常简单的方式

01:03:29.870 --> 01:03:30.870
就是这个

01:03:30.870 --> 01:03:31.870
Transition Group

01:03:31.870 --> 01:03:33.870
它还会监控遗有的元素

01:03:33.870 --> 01:03:34.870
位置的变化

01:03:35.870 --> 01:03:36.870
那么这些遗有的元素

01:03:36.870 --> 01:03:37.870
位置变化的时候

01:03:37.870 --> 01:03:39.870
需要变化的时候

01:03:39.870 --> 01:03:40.870
它会应用一个那样式

01:03:40.870 --> 01:03:41.870
叫做move

01:03:42.870 --> 01:03:43.870
vmove

01:03:43.870 --> 01:03:44.870
这个那样式

01:03:44.870 --> 01:03:45.870
前面的v呢

01:03:45.870 --> 01:03:47.870
要把它改成

01:03:47.870 --> 01:03:48.870
一样式名字

01:03:48.870 --> 01:03:49.870
那么

01:03:49.870 --> 01:03:51.870
名字很干move

01:03:51.870 --> 01:03:52.870
那么它会监控哪些元素

01:03:52.870 --> 01:03:53.870
需要移动

01:03:53.870 --> 01:03:54.870
它会为这个

01:03:54.870 --> 01:03:55.870
要移动的元素

01:03:55.870 --> 01:03:56.870
加上这么一个样式

01:03:57.870 --> 01:03:58.870
那移动的过程

01:03:58.870 --> 01:03:59.870
它已经帮你完成了

01:03:59.870 --> 01:04:00.870
你只需要为这个

01:04:00.870 --> 01:04:01.870
样式加上一个全身型

01:04:02.870 --> 01:04:03.870
完了

01:04:03.870 --> 01:04:04.870
没了

01:04:05.870 --> 01:04:06.870
好 看一下吧

01:04:08.870 --> 01:04:09.870
添加

01:04:09.870 --> 01:04:10.870
你看

01:04:10.870 --> 01:04:11.870
就是这么神奇

01:04:14.870 --> 01:04:16.870
我这一刻最后

01:04:16.870 --> 01:04:18.870
我可以给大家说一下

01:04:18.870 --> 01:04:20.870
为什么会这么神奇

01:04:20.870 --> 01:04:24.950
好 然后三处元素

01:04:24.950 --> 01:04:25.950
但是三处元素

01:04:25.950 --> 01:04:26.950
就发现有问题了

01:04:27.950 --> 01:04:28.950
为什么

01:04:28.950 --> 01:04:30.950
它又变成这个样子了

01:04:30.950 --> 01:04:32.950
为什么又变成这个样子了呢

01:04:33.950 --> 01:04:34.950
是因为

01:04:34.950 --> 01:04:36.950
三处元素的时候不一样

01:04:36.950 --> 01:04:38.950
三处元素的时候

01:04:38.950 --> 01:04:39.950
它个元素的位

01:04:39.950 --> 01:04:40.950
它不是马上删除了

01:04:40.950 --> 01:04:42.950
如果说是马上删除

01:04:42.950 --> 01:04:43.950
它没有动画

01:04:43.950 --> 01:04:44.950
马上删除的话

01:04:44.950 --> 01:04:45.950
那么它会监控到

01:04:45.950 --> 01:04:46.950
这里有移动

01:04:46.950 --> 01:04:47.950
它会进行移动

01:04:47.950 --> 01:04:48.950
但它删除的过程中

01:04:48.950 --> 01:04:49.950
这个元素实际上是还在的

01:04:49.950 --> 01:04:50.950
如果说元素马上删除了

01:04:50.950 --> 01:04:51.950
就看不见了

01:04:51.950 --> 01:04:53.950
它会在动画结束过后删除

01:04:53.950 --> 01:04:54.950
而动画结束过后

01:04:54.950 --> 01:04:56.950
这个样式已经消失了

01:04:56.950 --> 01:04:57.950
这会变成一个矛盾了

01:04:57.950 --> 01:04:58.950
知道吧

01:04:58.950 --> 01:04:59.950
就是这比方

01:04:59.950 --> 01:05:00.950
我们删除这个十八

01:05:00.950 --> 01:05:02.950
也就是删除这个十八的时候

01:05:02.950 --> 01:05:03.950
这一块元素

01:05:03.950 --> 01:05:04.950
它要移动

01:05:04.950 --> 01:05:06.950
它要移动的话

01:05:06.950 --> 01:05:09.950
必须是这个十八元素

01:05:09.950 --> 01:05:10.950
马上被删除的时候

01:05:10.950 --> 01:05:11.950
才会移动

01:05:11.950 --> 01:05:12.950
但是这个十八

01:05:12.950 --> 01:05:13.950
它不是马上删除的

01:05:13.950 --> 01:05:14.950
它是要等到

01:05:14.950 --> 01:05:16.950
它动画消失过后才删除

01:05:16.950 --> 01:05:18.950
而等到动画消失过的时候

01:05:18.950 --> 01:05:19.950
删除的时候

01:05:19.950 --> 01:05:20.950
它倒是要移动了

01:05:20.950 --> 01:05:21.950
只不过了

01:05:21.950 --> 01:05:22.950
它这个样式已经消失了

01:05:22.950 --> 01:05:24.950
它也不会有动画了

01:05:24.950 --> 01:05:26.950
它移动其实也结束了

01:05:26.950 --> 01:05:28.950
那怎么办呢

01:05:28.950 --> 01:05:30.950
其实这一块也很简单

01:05:34.950 --> 01:05:35.950
这一块也很简单

01:05:35.950 --> 01:05:38.950
我们只要让它消失的时候

01:05:38.950 --> 01:05:40.950
不让这个元素消失的时候

01:05:40.950 --> 01:05:41.950
我立即把这个元素

01:05:41.950 --> 01:05:42.950
设为绝对定位

01:05:42.950 --> 01:05:44.950
你想一个道理

01:05:44.950 --> 01:05:45.950
它一设成绝对定位了

01:05:45.950 --> 01:05:46.950
过后

01:05:46.950 --> 01:05:47.950
下面的元素

01:05:47.950 --> 01:05:48.950
是不是不考虑它的空间了

01:05:48.950 --> 01:05:49.950
下面的元素

01:05:49.950 --> 01:05:51.950
它就立刻往上移动的

01:05:51.950 --> 01:05:52.950
对吧

01:05:52.950 --> 01:05:54.950
就是说在它消失之前

01:05:54.950 --> 01:05:55.950
我就让人家要让它

01:05:55.950 --> 01:05:57.950
后边的元素不要考虑它的位置

01:05:57.950 --> 01:05:59.950
所以说我这里

01:05:59.950 --> 01:06:00.950
要做的事情就是

01:06:00.950 --> 01:06:02.950
给它再加上一个

01:06:02.950 --> 01:06:04.950
培训

01:06:04.950 --> 01:06:06.950
安置绝对定位

01:06:07.950 --> 01:06:09.950
保存

01:06:09.950 --> 01:06:10.950
你看

01:06:10.950 --> 01:06:11.950
DNA

01:06:11.950 --> 01:06:12.950
就可以了

01:06:12.950 --> 01:06:21.250
对吧

01:06:21.250 --> 01:06:23.250
好 那么就是这一块

01:06:26.250 --> 01:06:27.250
拿这个

01:06:27.250 --> 01:06:28.250
再来一个sort

01:06:28.250 --> 01:06:32.970
再来一个随隙排序

01:06:32.970 --> 01:06:34.970
刷否

01:06:34.970 --> 01:06:36.970
系排

01:06:36.970 --> 01:06:38.970
就是随隙排序

01:06:38.970 --> 01:06:40.970
随隙排序很简单

01:06:40.970 --> 01:06:43.970
ThisNumbersSort

01:06:43.970 --> 01:06:44.970
这个玩意儿

01:06:44.970 --> 01:06:45.970
诚哥的技术课

01:06:45.970 --> 01:06:47.970
是不是就讲过的

01:06:47.970 --> 01:06:50.970
简趋零件

01:06:50.970 --> 01:06:51.970
不讲了

01:06:51.970 --> 01:06:52.970
这个玩意儿不讲了

01:06:52.970 --> 01:06:53.970
把这个排序

01:06:53.970 --> 01:06:54.970
排序了之后

01:06:54.970 --> 01:06:55.970
它并不会有新的元素进入

01:06:55.970 --> 01:06:57.970
因为它keyz都是一样的

01:06:57.970 --> 01:06:58.970
也不会有

01:06:58.970 --> 01:06:59.970
元素消失

01:06:59.970 --> 01:07:00.970
但是呢

01:07:00.970 --> 01:07:02.970
它会导致它的元素排列发生变化

01:07:02.970 --> 01:07:03.970
排列发生变化了

01:07:03.970 --> 01:07:04.970
它会应用这个

01:07:06.970 --> 01:07:07.970
那么它的位置变化

01:07:07.970 --> 01:07:08.970
它会自动帮你搞定

01:07:08.970 --> 01:07:09.970
你不用管

01:07:11.970 --> 01:07:12.970
你看

01:07:12.970 --> 01:07:13.970
这就可以用动画了

01:07:13.970 --> 01:07:16.540
好 那么这个效果搞定了

01:07:16.540 --> 01:07:18.540
你再看我们的demo

01:07:19.540 --> 01:07:20.540
再看我们demo2

01:07:20.540 --> 01:07:21.540
其实就已经出来了

01:07:21.540 --> 01:07:22.540
不就是这个效果吗

01:07:22.540 --> 01:07:23.540
对不对

01:07:23.540 --> 01:07:24.540
就已经出来了

01:07:24.540 --> 01:07:26.540
那我们来马上做一下吧

01:07:26.540 --> 01:07:27.540
demo2

01:07:28.540 --> 01:07:29.540
demo2打开

01:07:29.540 --> 01:07:33.620
npm装饰

01:07:35.620 --> 01:07:38.060
看一下

01:07:38.060 --> 01:07:39.060
我们看一下目前的

01:07:39.060 --> 01:07:40.060
目前就设置了

01:07:40.060 --> 01:07:41.060
一些普通的样式

01:07:41.060 --> 01:07:43.060
有这个按钮

01:07:43.060 --> 01:07:44.060
随机排序

01:07:44.060 --> 01:07:45.060
我们先看数据吧

01:07:45.060 --> 01:07:46.060
数据有一个数组

01:07:46.060 --> 01:07:47.060
就是我们的

01:07:47.060 --> 01:07:48.060
目前的to dos

01:07:48.060 --> 01:07:49.060
IT的

01:07:49.060 --> 01:07:51.060
我就随机生成了一个ID

01:07:51.060 --> 01:07:52.060
我怎么生成的

01:07:52.060 --> 01:07:53.060
顺便说一下个小技巧

01:07:53.060 --> 01:07:55.060
我这里随机生成个ID

01:07:55.060 --> 01:07:56.060
不过这个ID

01:07:56.060 --> 01:07:57.060
虽然几率很小

01:07:57.060 --> 01:07:59.060
但是还是有可能会重复的

01:07:59.060 --> 01:08:01.060
我这里就不考虑那么多了

01:08:01.060 --> 01:08:02.060
我怎么生成的呢

01:08:02.060 --> 01:08:04.060
我得到一个随机数

01:08:04.060 --> 01:08:06.060
你还是个随机数吗

01:08:06.060 --> 01:08:08.060
然后我把它tune

01:08:08.060 --> 01:08:10.060
tuneStune

01:08:10.060 --> 01:08:13.060
把它转换成16金字的字母串

01:08:13.060 --> 01:08:14.060
于是你

01:08:14.060 --> 01:08:15.060
这个后面就是个

01:08:15.060 --> 01:08:16.060
16金字的字母串

01:08:18.060 --> 01:08:21.060
接下来我用一个substune

01:08:21.060 --> 01:08:25.330
从这个位置开始取

01:08:25.330 --> 01:08:26.330
取六个位置

01:08:26.330 --> 01:08:27.330
所以很简单

01:08:27.330 --> 01:08:28.330
我取六个位置

01:08:28.330 --> 01:08:29.330
长度为6

01:08:29.330 --> 01:08:30.330
或者长度为5

01:08:30.330 --> 01:08:31.330
你自己订

01:08:31.330 --> 01:08:33.330
就生成那个随机字母串了

01:08:33.330 --> 01:08:35.330
把这个字母串做一个ID

01:08:35.330 --> 01:08:36.330
万一重复了

01:08:36.330 --> 01:08:37.330
我就不管了

01:08:38.330 --> 01:08:40.330
然后呢就是任务的内容

01:08:40.330 --> 01:08:41.330
好

01:08:41.330 --> 01:08:42.330
这就不要一个数

01:08:42.330 --> 01:08:43.330
一个数据呢

01:08:43.330 --> 01:08:44.330
就是我新任务的内容

01:08:44.330 --> 01:08:45.330
这个玩意主要是

01:08:45.330 --> 01:08:46.330
绑进那个闻闷框的

01:08:46.330 --> 01:08:47.330
下面呢

01:08:47.330 --> 01:08:48.330
我们有几个函数

01:08:48.330 --> 01:08:49.330
一个是添加一个任务

01:08:49.330 --> 01:08:50.330
添加任务呢

01:08:50.330 --> 01:08:51.330
我就把这个东西

01:08:51.330 --> 01:08:52.330
加到这个数组里面去

01:08:52.330 --> 01:08:53.330
如果说他没有

01:08:53.330 --> 01:08:55.330
没有这个内容的话

01:08:55.330 --> 01:08:56.330
这个内容没有的话

01:08:56.330 --> 01:08:57.330
没有的话

01:08:57.330 --> 01:08:58.330
我就return

01:08:58.330 --> 01:08:59.330
结束

01:08:59.330 --> 01:09:00.330
我就把这个任务

01:09:00.330 --> 01:09:01.330
加到第1个

01:09:03.330 --> 01:09:04.330
好

01:09:04.330 --> 01:09:05.330
ID 水机

01:09:05.330 --> 01:09:07.330
内容就是这个内容

01:09:07.330 --> 01:09:08.330
然后我就把它清空

01:09:08.330 --> 01:09:09.330
对吧

01:09:09.330 --> 01:09:11.330
当我们完成任务的时候呢

01:09:11.330 --> 01:09:13.330
我就把参出掉

01:09:13.330 --> 01:09:15.330
给我传一个任务对象进来

01:09:15.330 --> 01:09:16.330
我就

01:09:16.330 --> 01:09:17.330
从这个数据里边

01:09:17.330 --> 01:09:18.330
feature

01:09:18.330 --> 01:09:20.330
拿到不等于这个对象的

01:09:20.330 --> 01:09:21.330
是这个对象我就不要了

01:09:21.330 --> 01:09:22.330
不等于这个对象

01:09:22.330 --> 01:09:24.330
我保留重新给他复制

01:09:24.330 --> 01:09:25.330
就那么简单

01:09:25.330 --> 01:09:26.330
然后soft

01:09:26.330 --> 01:09:27.330
洗牌的时候呢

01:09:28.330 --> 01:09:30.330
水机生成

01:09:30.330 --> 01:09:31.330
然后我们看一下界面

01:09:31.330 --> 01:09:33.330
音铺者文门框呢

01:09:33.330 --> 01:09:34.330
给他注册一个

01:09:34.330 --> 01:09:36.330
键盘事件

01:09:36.330 --> 01:09:37.330
这个修制服

01:09:37.330 --> 01:09:38.330
enter

01:09:38.330 --> 01:09:39.330
表示我按回车过后

01:09:39.330 --> 01:09:40.330
他会调用什么事件

01:09:40.330 --> 01:09:41.330
添加一个任务

01:09:41.330 --> 01:09:43.330
给他双向绑定一个数据

01:09:43.330 --> 01:09:45.330
就是new to do content

01:09:45.330 --> 01:09:46.330
就这个数据

01:09:47.330 --> 01:09:48.330
然后给他一个内容

01:09:48.330 --> 01:09:49.330
是吧

01:09:49.330 --> 01:09:50.330
这个都没什么好说的

01:09:50.330 --> 01:09:51.330
一个按钮点击过后

01:09:51.330 --> 01:09:52.330
就是水机排序

01:09:53.330 --> 01:09:55.330
这里边有一个ULI

01:09:56.330 --> 01:09:57.330
循环圈的这个ULI

01:09:58.330 --> 01:09:59.330
生成

01:10:00.330 --> 01:10:01.330
给他的那样式

01:10:01.330 --> 01:10:02.330
每个就绑定一个ID

01:10:02.330 --> 01:10:03.330
他的ID

01:10:03.330 --> 01:10:04.330
生成这个任务内容

01:10:04.330 --> 01:10:05.330
后边有个按钮

01:10:05.330 --> 01:10:06.330
然后点击过后就完成了

01:10:06.330 --> 01:10:07.330
那么至于

01:10:07.330 --> 01:10:08.330
怎么把它布局

01:10:08.330 --> 01:10:09.330
布局成这个样子

01:10:09.330 --> 01:10:10.330
我希望我相信

01:10:10.330 --> 01:10:11.330
每个同学都会

01:10:11.330 --> 01:10:13.330
我用了一些弹性盒

01:10:13.330 --> 01:10:14.330
对吧

01:10:14.330 --> 01:10:16.330
content justice

01:10:16.330 --> 01:10:18.330
justified content space between

01:10:18.330 --> 01:10:20.330
一个左边一个右边

01:10:20.330 --> 01:10:21.330
你可以用左腹中

01:10:21.330 --> 01:10:23.330
怎么样都可以布局成这个样式

01:10:23.330 --> 01:10:24.330
非常简单吧

01:10:26.330 --> 01:10:28.330
目前其实就已经

01:10:28.330 --> 01:10:29.330
功能就已经完成了

01:10:29.330 --> 01:10:31.330
功能其实就已经完成了

01:10:31.330 --> 01:10:32.330
你看

01:10:32.330 --> 01:10:33.330
它只是没有动画而已

01:10:33.330 --> 01:10:35.330
功能是不是就已经完成了

01:10:35.330 --> 01:10:36.330
完成这个功能非常简单吧

01:10:39.770 --> 01:10:40.770
只是没有动画

01:10:40.770 --> 01:10:41.770
那么现在我们把动画加上

01:10:42.770 --> 01:10:43.770
来吧

01:10:43.770 --> 01:10:44.770
快去做一下

01:10:44.770 --> 01:10:45.770
就是你可以

01:10:45.770 --> 01:10:46.770
我的讲要讲的都讲完了

01:10:46.770 --> 01:10:47.770
你们可以自己

01:10:47.770 --> 01:10:48.770
去尝试做一下

01:10:48.770 --> 01:10:54.960
现在我把这个UL

01:10:54.960 --> 01:10:55.960
改成什么

01:10:55.960 --> 01:10:56.960
改成

01:10:56.960 --> 01:10:58.960
V型

01:10:58.960 --> 01:10:59.960
改成它

01:10:59.960 --> 01:11:01.960
给它生成一个tag

01:11:01.960 --> 01:11:02.960
UL

01:11:02.960 --> 01:11:03.960
现在有动画吗

01:11:03.960 --> 01:11:04.960
没有动画

01:11:04.960 --> 01:11:06.960
因为我们没有写样式

01:11:06.960 --> 01:11:08.960
但是它具有了

01:11:08.960 --> 01:11:10.960
做动画的能力了

01:11:10.960 --> 01:11:11.960
那么接下来

01:11:11.960 --> 01:11:13.960
我就是要搞定新增元素

01:11:13.960 --> 01:11:15.960
移除元素的一些问题

01:11:15.960 --> 01:11:17.960
还有就是移动元素的问题

01:11:17.960 --> 01:11:19.960
一个新增元素

01:11:21.960 --> 01:11:22.960
就是因为我们的给它

01:11:22.960 --> 01:11:23.960
name属性

01:11:23.960 --> 01:11:24.960
没有给name属性

01:11:24.960 --> 01:11:25.960
name属性

01:11:26.960 --> 01:11:27.960
那么就是以to do

01:11:27.960 --> 01:11:28.960
为前綴

01:11:28.960 --> 01:11:29.960
to do

01:11:29.960 --> 01:11:30.960
enter

01:11:31.960 --> 01:11:33.960
新增元素

01:11:33.960 --> 01:11:34.960
新增的元素

01:11:34.960 --> 01:11:35.960
一开始的时候

01:11:35.960 --> 01:11:36.960
应该是什么样子

01:11:36.960 --> 01:11:37.960
一开始我们希望

01:11:37.960 --> 01:11:38.960
从这边滑入进来

01:11:38.960 --> 01:11:39.960
这边滑入

01:11:39.960 --> 01:11:40.960
所以我们给它

01:11:40.960 --> 01:11:41.960
设置一个

01:11:41.960 --> 01:11:42.960
opacity为0

01:11:42.960 --> 01:11:44.960
然后transform

01:11:46.960 --> 01:11:47.960
transnate

01:11:47.960 --> 01:11:48.960
x

01:11:48.960 --> 01:11:50.960
-100%

01:11:50.960 --> 01:11:51.960
我们左边100%的

01:11:51.960 --> 01:11:52.960
自己的宽度

01:11:52.960 --> 01:11:53.960
滑进来

01:11:54.960 --> 01:11:55.960
现在看一下

01:11:55.960 --> 01:11:56.960
为什么没有

01:11:56.960 --> 01:11:57.960
因为我们没有

01:11:57.960 --> 01:11:58.960
使用transition

01:11:58.960 --> 01:11:59.960
过渡效果

01:11:59.960 --> 01:12:02.850
enter

01:12:02.850 --> 01:12:04.850
enter active

01:12:04.850 --> 01:12:05.850
transition

01:12:05.850 --> 01:12:06.850
1.5s

01:12:11.210 --> 01:12:12.210
是吧

01:12:12.210 --> 01:12:13.210
可以吧

01:12:13.210 --> 01:12:14.210
那么其他的元素

01:12:14.210 --> 01:12:15.210
被挤压

01:12:15.210 --> 01:12:16.210
挤压过后

01:12:16.210 --> 01:12:17.210
它没有一个

01:12:17.210 --> 01:12:18.210
变化的效果

01:12:18.210 --> 01:12:19.210
因此我把

01:12:19.210 --> 01:12:20.210
挤压也加上

01:12:20.210 --> 01:12:22.520
to do

01:12:22.520 --> 01:12:23.520
就其他元素

01:12:23.520 --> 01:12:24.520
移动的元素

01:12:24.520 --> 01:12:25.520
它也要

01:12:25.520 --> 01:12:28.990
使用过渡效果

01:12:28.990 --> 01:12:29.990
就已经出来了

01:12:29.990 --> 01:12:30.990
非常简单

01:12:30.990 --> 01:12:32.990
然后离开的元素

01:12:32.990 --> 01:12:33.990
是不是也要

01:12:33.990 --> 01:12:34.990
应用这个渡效果

01:12:35.990 --> 01:12:37.990
to do

01:12:37.990 --> 01:12:38.990
need

01:12:38.990 --> 01:12:39.990
active

01:12:39.990 --> 01:12:41.990
然后to do的时候

01:12:41.990 --> 01:12:48.310
need的时候

01:12:48.310 --> 01:12:49.310
to do

01:12:49.310 --> 01:12:50.310
need to

01:12:50.310 --> 01:12:52.310
opacity为0

01:12:52.310 --> 01:12:53.310
那么它就往右边移动

01:12:53.310 --> 01:12:54.310
右边出去

01:12:54.310 --> 01:12:55.310
transform

01:12:57.310 --> 01:12:58.310
transnate

01:12:58.310 --> 01:12:59.310
-100%

01:13:00.310 --> 01:13:01.310
离开的元素

01:13:01.310 --> 01:13:02.310
往右边出去

01:13:03.310 --> 01:13:04.310
进入的元素

01:13:04.310 --> 01:13:05.310
往左边进来

01:13:06.310 --> 01:13:12.140
其实刚才

01:13:12.140 --> 01:13:13.140
大家也可以看到

01:13:13.140 --> 01:13:14.140
我们GS

01:13:14.140 --> 01:13:15.140
这些事件触发的执行

01:13:15.140 --> 01:13:16.140
GS的执行

01:13:16.140 --> 01:13:17.140
会

01:13:17.140 --> 01:13:18.140
主设浏览器的渲染

01:13:19.140 --> 01:13:20.140
如果说它渲染过程中

01:13:20.140 --> 01:13:21.140
我们不停地

01:13:21.140 --> 01:13:22.140
触发动画的话

01:13:22.140 --> 01:13:23.140
它有点主设的效果

01:13:23.140 --> 01:13:24.140
看到没

01:13:24.140 --> 01:13:25.140
这说明了

01:13:25.140 --> 01:13:26.140
我们GS执行单线程的

01:13:26.140 --> 01:13:28.140
跟浏览器的渲染引擎

01:13:28.140 --> 01:13:30.140
渲染流程是互斥的

01:13:30.140 --> 01:13:31.140
你GS在执行

01:13:31.140 --> 01:13:32.140
因为我们

01:13:32.140 --> 01:13:34.140
数字从文门框里边打字的时候

01:13:35.140 --> 01:13:36.140
数字会触发

01:13:36.140 --> 01:13:37.140
数据的变化

01:13:37.140 --> 01:13:38.140
数据变化会触发重新浏览

01:13:38.140 --> 01:13:39.140
对吧

01:13:39.140 --> 01:13:41.140
这里是有执行介绍的

01:13:41.140 --> 01:13:42.140
就会导致浏览器

01:13:42.140 --> 01:13:43.140
现成的

01:13:43.140 --> 01:13:44.140
跟我们主设

01:13:44.140 --> 01:13:45.140
刚才也可以看得很清楚

01:13:45.140 --> 01:13:49.370
好

01:13:49.370 --> 01:13:50.370
我们这里点完成

01:13:51.370 --> 01:13:52.370
完成的时候

01:13:52.370 --> 01:13:53.370
是不是又遇到这个问题

01:13:53.370 --> 01:13:54.370
它要等到完成结束过后

01:13:54.370 --> 01:13:55.370
才弹上来

01:13:56.370 --> 01:13:57.370
所以说我们希望

01:13:57.370 --> 01:13:58.370
它离开的时候

01:13:58.370 --> 01:13:59.370
就瞬间

01:13:59.370 --> 01:14:00.370
把它的位置去去掉

01:14:00.370 --> 01:14:01.370
后面就不要考虑

01:14:01.370 --> 01:14:02.370
它的位置了

01:14:02.370 --> 01:14:03.370
那就把它变成

01:14:03.370 --> 01:14:04.370
绝对定位就完成了

01:14:04.370 --> 01:14:05.370
QQ

01:14:06.370 --> 01:14:07.370
QQ

01:14:07.370 --> 01:14:08.370
还有一个题目

01:14:08.370 --> 01:14:09.370
一开始的时候

01:14:09.370 --> 01:14:10.370
把它变成绝对定位

01:14:15.090 --> 01:14:16.090
还有一个题目

01:14:17.090 --> 01:14:18.090
Preciate

01:14:19.090 --> 01:14:20.090
Absolute

01:14:21.090 --> 01:14:22.090
好

01:14:22.090 --> 01:14:23.090
把电源插上

01:14:23.090 --> 01:14:24.090
稍等一下

01:14:24.090 --> 01:14:27.810
好了

01:14:27.810 --> 01:14:29.810
那么这些课我要讲的东西

01:14:29.810 --> 01:14:30.810
就讲完了

01:14:31.810 --> 01:14:32.810
两个组件

01:14:32.810 --> 01:14:33.810
一个是Transition

01:14:33.810 --> 01:14:35.810
监控单个元素的进入和消失

01:14:35.810 --> 01:14:37.810
另外一个是Transition Group

01:14:37.810 --> 01:14:39.810
它监控一个列表的

01:14:39.810 --> 01:14:41.810
新增元素和消失元素

01:14:41.810 --> 01:14:43.810
以及列表的重新排列

01:14:46.570 --> 01:14:47.570
但是这两个组件

01:14:47.570 --> 01:14:48.570
它不能解决所有的

01:14:48.570 --> 01:14:49.570
动画和过渡的效果

01:14:49.570 --> 01:14:50.570
因为有的时候

01:14:50.570 --> 01:14:51.570
它并不是进入

01:14:51.570 --> 01:14:52.570
也并不是消失

01:14:52.570 --> 01:14:53.570
它就是一个元素

01:14:53.570 --> 01:14:54.570
始终待在那

01:14:54.570 --> 01:14:55.570
它的状态不断变化

01:14:55.570 --> 01:14:56.570
那么这个时候

01:14:56.570 --> 01:14:57.570
你要考虑

01:14:57.570 --> 01:14:59.570
你自己去加一些的样式

01:14:59.570 --> 01:15:02.570
或者是自己加一些动画效果

01:15:02.570 --> 01:15:03.570
或者是用介石

01:15:03.570 --> 01:15:05.570
来控制它的状态变化

01:15:05.570 --> 01:15:07.570
你们自己去搞定

01:15:08.570 --> 01:15:09.570
那么最后

01:15:09.570 --> 01:15:11.570
我给大家补充一个知识

01:15:11.570 --> 01:15:13.570
如果说你有兴趣听的话

01:15:13.570 --> 01:15:14.570
有兴趣听的话

01:15:14.570 --> 01:15:15.570
其实也无所谓

01:15:15.570 --> 01:15:17.570
就是Transition Group

01:15:17.570 --> 01:15:19.570
它为什么能够

01:15:19.570 --> 01:15:21.570
实现这样的效果

01:15:22.570 --> 01:15:24.570
这就涉及到一个问题了

01:15:24.570 --> 01:15:25.570
啥问题呢

01:15:25.570 --> 01:15:26.570
不要说

01:15:29.570 --> 01:15:30.570
我这里

01:15:30.570 --> 01:15:32.570
用原生的介石

01:15:32.570 --> 01:15:33.570
原生的情况

01:15:33.570 --> 01:15:34.570
给大家看一下

01:15:43.350 --> 01:15:44.350
做一个简单的例子吧

01:15:47.750 --> 01:15:48.750
我比方说

01:15:48.750 --> 01:15:49.750
这里边

01:15:49.750 --> 01:15:51.750
6L里边就两个元素

01:15:52.750 --> 01:15:53.750
就举一下这个例子

01:15:53.750 --> 01:15:54.750
有两个元素

01:15:54.750 --> 01:15:56.750
一个是

01:15:56.750 --> 01:15:57.750
开拓1

01:15:58.750 --> 01:15:59.750
一个是

01:16:02.510 --> 01:16:03.510
开拓2

01:16:08.760 --> 01:16:13.360
下面我给它加一个按钮

01:16:13.360 --> 01:16:14.360
交换

01:16:14.360 --> 01:16:16.360
我要做的事情就是

01:16:16.360 --> 01:16:18.360
把这个L1的位置

01:16:18.360 --> 01:16:19.360
Li的位置

01:16:19.360 --> 01:16:22.860
跟这个Li的位置交换

01:16:22.860 --> 01:16:27.670
看一下

01:16:27.670 --> 01:16:29.670
现在我们得到Li

01:16:29.670 --> 01:16:31.670
点击按钮的时候

01:16:31.670 --> 01:16:33.670
拿到这个按钮

01:16:38.670 --> 01:16:39.670
BTN on click

01:16:39.670 --> 01:16:40.670
点它的时候

01:16:40.670 --> 01:16:42.670
我运行一个函数

01:16:42.670 --> 01:16:43.670
这个函数

01:16:43.670 --> 01:16:44.670
来把这两个Li交换

01:16:44.670 --> 01:16:46.670
交换其实非常简单

01:16:47.670 --> 01:16:48.670
怎么交换呢

01:16:48.670 --> 01:16:49.670
我首先拿到

01:16:49.670 --> 01:16:50.670
第一个Li

01:16:50.670 --> 01:16:51.670
Li1

01:16:52.670 --> 01:16:53.670
要不然我怎么弄呢

01:16:53.670 --> 01:16:54.670
就

01:16:54.670 --> 01:16:55.670
这样吧

01:16:58.670 --> 01:16:59.670
你可以用任何

01:16:59.670 --> 01:17:00.670
你喜欢的方式

01:17:00.670 --> 01:17:01.670
拿到这个Li

01:17:02.670 --> 01:17:03.670
就是Ul下面的

01:17:03.670 --> 01:17:04.670
第一个Li

01:17:05.670 --> 01:17:08.170
first child

01:17:10.170 --> 01:17:11.170
然后就是

01:17:12.170 --> 01:17:13.170
NTH

01:17:15.800 --> 01:17:16.800
我都快忘了

01:17:17.800 --> 01:17:18.800
是这个吗

01:17:18.800 --> 01:17:19.800
输出一下Li1

01:17:19.800 --> 01:17:20.800
试一下

01:17:20.800 --> 01:17:21.800
点忘

01:17:22.800 --> 01:17:23.800
点击

01:17:24.800 --> 01:17:25.800
对了

01:17:25.800 --> 01:17:26.800
第一个Li

01:17:26.800 --> 01:17:27.800
我要拿到第二个Li

01:17:31.970 --> 01:17:32.970
有兴趣的可能就听一下

01:17:35.730 --> 01:17:36.730
这是一个开发器

01:17:36.730 --> 01:17:37.730
这是一个小技巧

01:17:38.730 --> 01:17:39.730
第二个Li

01:17:39.730 --> 01:17:40.730
好

01:17:40.730 --> 01:17:41.730
然后我把这两个Li交换

01:17:41.730 --> 01:17:42.730
那怎么交换呢

01:17:42.730 --> 01:17:43.730
其实要做的事情

01:17:43.730 --> 01:17:44.730
特别简单

01:17:45.730 --> 01:17:46.730
我就把

01:17:47.730 --> 01:17:48.730
我就把第二个Li

01:17:48.730 --> 01:17:49.730
插入到Li1之前

01:17:49.730 --> 01:17:50.730
对吧

01:17:50.730 --> 01:17:51.730
所以说我要拿到它的复原处

01:17:52.730 --> 01:17:53.730
拿到这个Ul

01:17:55.730 --> 01:17:56.730
Ul

01:17:56.730 --> 01:17:59.240
好

01:17:59.240 --> 01:18:01.240
我就要Ul insert before

01:18:02.240 --> 01:18:03.240
插入什么呢

01:18:03.240 --> 01:18:04.240
插入这个Li2

01:18:04.240 --> 01:18:05.240
插入到Li1之前

01:18:06.240 --> 01:18:07.240
你看看

01:18:07.240 --> 01:18:08.240
是不是交换了

01:18:08.240 --> 01:18:09.240
再点击下又交换了

01:18:10.240 --> 01:18:11.240
接下来

01:18:13.240 --> 01:18:15.240
我要应用动画效果

01:18:17.240 --> 01:18:18.240
咋应用这个Li2

01:18:20.240 --> 01:18:21.240
我要让他们交换

01:18:21.240 --> 01:18:22.240
有个动画效果

01:18:22.240 --> 01:18:23.240
其实就是在说

01:18:23.240 --> 01:18:24.240
这种情况

01:18:24.240 --> 01:18:25.240
它为什么可以实现

01:18:28.190 --> 01:18:29.190
我们做动画效果

01:18:29.190 --> 01:18:30.190
就是过渡效果

01:18:31.190 --> 01:18:32.190
有两种做法

01:18:32.190 --> 01:18:33.190
通常情况下

01:18:34.190 --> 01:18:35.190
一种的就是

01:18:35.190 --> 01:18:36.190
正常人的思维

01:18:36.190 --> 01:18:37.190
正常人的思维是什么呢

01:18:37.190 --> 01:18:39.190
就是我的当前状态是A

01:18:41.190 --> 01:18:43.190
然后我的新的状态是B

01:18:44.190 --> 01:18:45.190
我从A

01:18:45.190 --> 01:18:46.190
变到B

01:18:46.190 --> 01:18:47.190
这是绝大部分

01:18:47.190 --> 01:18:49.190
过渡效果都是这样做的

01:18:49.190 --> 01:18:51.190
这样做的并没有什么不好

01:18:52.190 --> 01:18:54.190
但是在有的时候就麻烦了

01:18:54.190 --> 01:18:55.190
像这种情况

01:18:56.190 --> 01:18:58.190
我的当前状态是啥

01:18:58.190 --> 01:18:59.190
当前状态是

01:18:59.190 --> 01:19:00.190
它是第一个

01:19:00.190 --> 01:19:01.190
一开始吗

01:19:02.190 --> 01:19:04.190
它的排列顺序是1和2

01:19:05.190 --> 01:19:06.190
最终的状态是

01:19:06.190 --> 01:19:08.190
顺序是2和1

01:19:08.190 --> 01:19:10.190
请问这种状态怎么应用过渡

01:19:10.190 --> 01:19:12.190
根本就没法应用过渡

01:19:12.190 --> 01:19:14.190
如果说是背景颜色

01:19:14.190 --> 01:19:16.190
从一个变到另一个过渡没问题

01:19:16.190 --> 01:19:17.190
一个位置

01:19:17.190 --> 01:19:19.190
从一个变到另一个也没问题

01:19:19.190 --> 01:19:21.190
这个元素顺序变化

01:19:21.190 --> 01:19:22.190
怎么应用过渡

01:19:22.190 --> 01:19:23.190
没法应用过渡

01:19:24.190 --> 01:19:25.190
这种情况还包括什么呢

01:19:25.190 --> 01:19:26.190
还包括什么

01:19:27.190 --> 01:19:28.190
宽度啊高度

01:19:28.190 --> 01:19:30.190
从一个固定的值变成一个out

01:19:30.190 --> 01:19:32.190
怎么应用过渡没法应用过渡

01:19:32.190 --> 01:19:33.190
那咋办

01:19:35.190 --> 01:19:36.190
像这种情况呢

01:19:36.190 --> 01:19:38.190
我们就可以使用另外一种方案

01:19:38.190 --> 01:19:39.190
叫做福利

01:19:40.190 --> 01:19:42.190
福利的方案就非常特别

01:19:43.190 --> 01:19:44.190
它是怎么做的呢

01:19:44.190 --> 01:19:45.190
比方说

01:19:45.190 --> 01:19:47.190
我们要从一个状态A

01:19:47.190 --> 01:19:49.190
变到一个状态B

01:19:49.190 --> 01:19:50.190
它不是直接变的

01:19:51.190 --> 01:19:52.190
它不是直接从A过渡到B

01:19:52.190 --> 01:19:53.190
它不是的

01:19:53.190 --> 01:19:54.190
这样它做不到

01:19:55.190 --> 01:19:56.190
它先这样子

01:19:56.190 --> 01:19:57.190
第一步

01:19:58.190 --> 01:20:00.190
没有动画的

01:20:00.190 --> 01:20:02.190
就是没有过渡的

01:20:02.190 --> 01:20:03.190
没有过渡的

01:20:04.190 --> 01:20:05.190
从A

01:20:06.190 --> 01:20:07.190
变到B

01:20:07.190 --> 01:20:08.190
这是瞬间变化

01:20:08.190 --> 01:20:09.190
很快的

01:20:09.190 --> 01:20:10.190
变化到B

01:20:10.190 --> 01:20:11.190
你看现在

01:20:11.190 --> 01:20:12.190
其实就是没有

01:20:12.190 --> 01:20:13.190
没有任何过渡的

01:20:13.190 --> 01:20:14.190
从A变到B

01:20:14.190 --> 01:20:15.190
它们的元素顺序

01:20:15.190 --> 01:20:16.190
发生变化了

01:20:16.190 --> 01:20:17.190
所以

01:20:17.190 --> 01:20:18.190
这个元素

01:20:18.190 --> 01:20:19.190
一开始是D

01:20:19.190 --> 01:20:20.190
位置是E

01:20:20.190 --> 01:20:21.190
现在位置变成2了

01:20:21.190 --> 01:20:22.190
看呗

01:20:23.190 --> 01:20:24.190
然后

01:20:26.190 --> 01:20:29.140
第一步还不是这个

01:20:29.140 --> 01:20:30.140
第一步

01:20:30.140 --> 01:20:31.140
记录

01:20:32.140 --> 01:20:34.140
变化之前的位置

01:20:35.140 --> 01:20:36.140
第二步才是这个

01:20:38.640 --> 01:20:39.640
也就是什么呢

01:20:39.640 --> 01:20:40.640
我们再刷新一下

01:20:40.640 --> 01:20:41.640
我们就观察它

01:20:41.640 --> 01:20:42.640
只观察它

01:20:43.640 --> 01:20:44.640
它我一开始

01:20:44.640 --> 01:20:45.640
在变化之前

01:20:45.640 --> 01:20:46.640
我就记录它的位置

01:20:47.640 --> 01:20:48.640
那这个位置

01:20:48.640 --> 01:20:49.640
可以是一个

01:20:49.640 --> 01:20:50.640
相对于四口的位置

01:20:50.640 --> 01:20:51.640
把它记录下来

01:20:52.640 --> 01:20:53.640
然后让它

01:20:53.640 --> 01:20:54.640
没有过渡效果的

01:20:54.640 --> 01:20:55.640
从A瞬间变化到B

01:20:55.640 --> 01:20:56.640
让它瞬间变化

01:20:58.640 --> 01:20:59.640
然后变化之后

01:21:03.810 --> 01:21:04.810
记录

01:21:06.810 --> 01:21:07.810
B的位置

01:21:07.810 --> 01:21:08.810
就变化后的位置

01:21:11.380 --> 01:21:12.380
对吧

01:21:12.380 --> 01:21:13.380
一开始的位置

01:21:13.380 --> 01:21:14.380
我们知道

01:21:14.380 --> 01:21:15.380
一开始在这

01:21:15.380 --> 01:21:16.380
现在变到这了

01:21:16.380 --> 01:21:17.380
记录变化后的位置

01:21:17.380 --> 01:21:18.380
然后第四步

01:21:19.380 --> 01:21:20.380
Flip什么意思

01:21:20.380 --> 01:21:21.380
就翻转

01:21:21.380 --> 01:21:22.380
就是我把整个

01:21:22.380 --> 01:21:23.380
整个示威倒过来

01:21:23.380 --> 01:21:24.380
我不是说

01:21:24.380 --> 01:21:25.380
我从目前变到它

01:21:26.380 --> 01:21:27.380
而是

01:21:27.380 --> 01:21:28.380
我先说完吧

01:21:29.380 --> 01:21:30.380
第四步

01:21:30.380 --> 01:21:31.380
然后

01:21:31.380 --> 01:21:32.380
计算

01:21:32.380 --> 01:21:33.380
位置的差值

01:21:34.380 --> 01:21:37.880
就是它一开始在这

01:21:37.880 --> 01:21:38.880
现在变到这了

01:21:38.880 --> 01:21:40.880
所以位置有一个差值

01:21:40.880 --> 01:21:41.880
对不对

01:21:41.880 --> 01:21:42.880
第五步

01:21:43.880 --> 01:21:44.880
将元素

01:21:45.880 --> 01:21:47.880
回退到

01:21:47.880 --> 01:21:48.880
之前的位置

01:21:49.880 --> 01:21:50.880
这个可以利用

01:21:50.880 --> 01:21:51.880
Transform啊

01:21:51.880 --> 01:21:52.880
Transnet来实现

01:21:52.880 --> 01:21:53.880
比方它目前的位置在这了

01:21:53.880 --> 01:21:54.880
对吧

01:21:54.880 --> 01:21:55.880
已经变到这了

01:21:55.880 --> 01:21:56.880
从A已经变化到B

01:21:56.880 --> 01:21:57.880
没有任何动画变过来

01:21:57.880 --> 01:21:58.880
我把它

01:21:58.880 --> 01:21:59.880
移回去

01:22:00.880 --> 01:22:01.880
移回去

01:22:01.880 --> 01:22:02.880
瞬间移回去

01:22:02.880 --> 01:22:04.880
没有任何动画的移回去

01:22:04.880 --> 01:22:06.880
然后最后

01:22:06.880 --> 01:22:10.670
去掉动画

01:22:11.670 --> 01:22:12.670
去掉

01:22:14.670 --> 01:22:16.670
去掉移动回去的样式

01:22:17.670 --> 01:22:18.670
然后加上

01:22:19.670 --> 01:22:20.670
过度即可

01:22:21.670 --> 01:22:22.670
因为

01:22:22.670 --> 01:22:23.670
我们现在把它移回去了

01:22:23.670 --> 01:22:24.670
比方说

01:22:24.670 --> 01:22:25.670
这只一个Style

01:22:25.670 --> 01:22:26.670
用Transnet

01:22:26.670 --> 01:22:28.670
Y把它移回去了

01:22:28.670 --> 01:22:29.670
移回去过后

01:22:29.670 --> 01:22:30.670
我只要把那个样式

01:22:30.670 --> 01:22:31.670
移去掉

01:22:31.670 --> 01:22:32.670
它是不是要回头到

01:22:32.670 --> 01:22:33.670
回头到正常位置

01:22:33.670 --> 01:22:34.670
然后这个时候

01:22:34.670 --> 01:22:35.670
再加上过度

01:22:35.670 --> 01:22:36.670
它就退回来了

01:22:36.670 --> 01:22:37.670
这叫Flip

01:22:37.670 --> 01:22:38.670
Flip的概念是什么呢

01:22:38.670 --> 01:22:40.670
说我是一个翻转的过程

01:22:40.670 --> 01:22:42.670
以前的我们的是正常思维

01:22:42.670 --> 01:22:43.670
我从这个状态

01:22:43.670 --> 01:22:44.670
变到另一个状态

01:22:44.670 --> 01:22:45.670
对吧

01:22:45.670 --> 01:22:46.670
现在不是了

01:22:46.670 --> 01:22:47.670
我的思维是

01:22:47.670 --> 01:22:48.670
我先把它变过去

01:22:48.670 --> 01:22:49.670
不要任何动画

01:22:49.670 --> 01:22:51.670
再把它退回来

01:22:51.670 --> 01:22:52.670
退回来过后

01:22:52.670 --> 01:22:53.670
我把动画加上

01:22:53.670 --> 01:22:54.670
然后把那个

01:22:54.670 --> 01:22:55.670
退回来的样式移除

01:22:55.670 --> 01:22:56.670
它就回到正常

01:22:56.670 --> 01:22:57.670
一个动画

01:22:57.670 --> 01:22:58.670
它回到正常位置了

01:22:59.670 --> 01:23:00.670
因为它前面

01:23:00.670 --> 01:23:01.670
都没有加上动画

01:23:01.670 --> 01:23:02.670
所以说我们仍然是

01:23:02.670 --> 01:23:03.670
观察不到的

01:23:03.670 --> 01:23:04.670
仍然看到的距很快

01:23:04.670 --> 01:23:05.670
它一开始

01:23:05.670 --> 01:23:06.670
我们仍然是

01:23:06.670 --> 01:23:07.670
看不到的

01:23:07.670 --> 01:23:08.670
变到这儿

01:23:08.670 --> 01:23:09.670
然后再退回去

01:23:09.670 --> 01:23:10.670
看不到的

01:23:10.670 --> 01:23:11.670
看到的只是

01:23:11.670 --> 01:23:12.670
退回去的效果

01:23:12.670 --> 01:23:14.670
然后退回去的位置

01:23:14.670 --> 01:23:15.670
再变换回来

01:23:15.670 --> 01:23:16.670
叫做Flip

01:23:16.670 --> 01:23:18.670
它是这样做的

01:23:18.670 --> 01:23:19.670
我们可以非常快速的

01:23:19.670 --> 01:23:21.670
把它写一个简单带

01:23:21.670 --> 01:23:22.670
不用考虑任何同一东西

01:23:22.670 --> 01:23:26.980
就把这个问题完成就OK了

01:23:26.980 --> 01:23:27.980
我们来写一下

01:23:27.980 --> 01:23:29.980
Flip它不是一个什么

01:23:29.980 --> 01:23:30.980
第三方库

01:23:30.980 --> 01:23:31.980
也不是什么

01:23:31.980 --> 01:23:32.980
框枪

01:23:32.980 --> 01:23:34.980
它就是一个失路

01:23:34.980 --> 01:23:35.980
比方说

01:23:35.980 --> 01:23:37.980
我们这里要做两件事情

01:23:37.980 --> 01:23:38.980
要做很多事情

01:23:38.980 --> 01:23:40.980
我们其中有一个事情

01:23:40.980 --> 01:23:41.980
是得到它的

01:23:41.980 --> 01:23:42.980
因为我们这里

01:23:42.980 --> 01:23:43.980
不涉及到红座表

01:23:43.980 --> 01:23:44.980
只涉及到纵座表

01:23:44.980 --> 01:23:45.980
所以说我们这里

01:23:45.980 --> 01:23:47.980
要得到一个它的纵座表

01:23:47.980 --> 01:23:48.980
我们写个方法

01:23:48.980 --> 01:23:49.980
get y

01:23:49.980 --> 01:23:50.980
给它的纵座表

01:23:50.980 --> 01:23:52.980
给我一个动物元素

01:23:52.980 --> 01:23:54.980
我给你一个纵座表

01:23:54.980 --> 01:23:55.980
就很非常简单

01:23:55.980 --> 01:23:56.980
这个动物元素就是

01:23:56.980 --> 01:23:58.980
get client

01:23:58.980 --> 01:23:59.980
名字叫啥

01:23:59.980 --> 01:24:00.980
我忘了

01:24:00.980 --> 01:24:01.980
OK

01:24:01.980 --> 01:24:05.550
get client

01:24:05.550 --> 01:24:07.550
get client

01:24:08.550 --> 01:24:13.460
就这个玩意

01:24:13.460 --> 01:24:14.460
对

01:24:14.460 --> 01:24:16.460
这个就是一个数据

01:24:16.460 --> 01:24:18.460
get client

01:24:18.460 --> 01:24:20.460
get bounding client rate

01:24:20.460 --> 01:24:21.460
这个元素

01:24:21.460 --> 01:24:23.460
相对于整个市口的

01:24:23.460 --> 01:24:25.460
宽高位置

01:24:25.460 --> 01:24:26.460
横重坐标

01:24:26.460 --> 01:24:28.460
就得到这么一些东西

01:24:28.460 --> 01:24:29.460
所以说我们得到

01:24:29.460 --> 01:24:32.350
用这个函数

01:24:32.350 --> 01:24:33.350
得到它的top值

01:24:33.350 --> 01:24:35.350
我们只关心top

01:24:35.350 --> 01:24:37.350
我这里不写通用的东西

01:24:37.350 --> 01:24:38.350
把这个问题完成

01:24:38.350 --> 01:24:41.350
你们知道这个失路就行了

01:24:41.350 --> 01:24:43.350
好我们现在只关注le

01:24:43.350 --> 01:24:44.350
只关注le

01:24:51.860 --> 01:24:57.280
我想想

01:25:02.300 --> 01:25:03.300
我们只关注le

01:25:03.300 --> 01:25:05.300
然后在le拿到之后

01:25:05.300 --> 01:25:07.300
我们先得到它当前的位置

01:25:07.300 --> 01:25:08.300
初始位置

01:25:08.300 --> 01:25:10.300
get y

01:25:10.300 --> 01:25:11.300
le

01:25:11.300 --> 01:25:12.300
放进去

01:25:12.300 --> 01:25:14.300
就拿到le的初始位置

01:25:14.300 --> 01:25:17.300
拿到le的初始位置

01:25:17.300 --> 01:25:21.440
就变化之前的位置

01:25:22.440 --> 01:25:23.440
好接下来呢

01:25:23.440 --> 01:25:25.440
我们就没有过度的

01:25:25.440 --> 01:25:28.440
把le加到le

01:25:29.440 --> 01:25:31.440
那么这是不是产生变化

01:25:31.440 --> 01:25:34.440
这个是没有任何

01:25:34.440 --> 01:25:37.440
过度效果的变化

01:25:37.440 --> 01:25:41.270
第二步完成了

01:25:41.270 --> 01:25:42.270
第三步

01:25:42.270 --> 01:25:43.270
进入变化后的位置

01:25:43.270 --> 01:25:45.270
变化后我们是不是要拿到

01:25:45.270 --> 01:25:46.270
新的位置了

01:25:46.270 --> 01:25:49.580
我们就搞定后续的事情

01:25:49.580 --> 01:25:51.580
搞定后续的事情

01:25:51.580 --> 01:25:53.580
就是apply

01:25:58.110 --> 01:25:59.110
后面我们就把3

01:25:59.110 --> 01:26:00.110
从这个到第6步

01:26:00.110 --> 01:26:02.110
全部完成在这个函数里边

01:26:02.110 --> 01:26:03.110
你给我传一个动物元素

01:26:03.110 --> 01:26:05.110
你给我传它的初始位置

01:26:05.110 --> 01:26:06.110
好那么这里呢

01:26:06.110 --> 01:26:07.110
我们把le

01:26:07.110 --> 01:26:08.110
i1

01:26:08.110 --> 01:26:09.110
就apply

01:26:09.110 --> 01:26:10.110
tracetion

01:26:10.110 --> 01:26:11.110
把le1传进去

01:26:11.110 --> 01:26:13.110
把它的音列是y传进去

01:26:13.110 --> 01:26:15.110
或者叫le1

01:26:15.110 --> 01:26:17.110
传进去

01:26:18.110 --> 01:26:20.110
我这里通装了其实不是很好

01:26:20.110 --> 01:26:22.110
我们可以至于把风筝好一点

01:26:22.110 --> 01:26:23.110
就无所谓

01:26:23.110 --> 01:26:25.110
我只是给大家讲这么一个思路

01:26:25.110 --> 01:26:27.110
他们从第三步开始

01:26:27.110 --> 01:26:29.110
进入变化后的位置

01:26:29.110 --> 01:26:31.110
就得到拿到当前的y坐标

01:26:31.110 --> 01:26:32.110
变成y

01:26:32.110 --> 01:26:33.110
动物元素传进去

01:26:33.110 --> 01:26:34.110
当前的 y 坐标

01:26:34.110 --> 01:26:36.110
然后计算位置的差值

01:26:36.110 --> 01:26:37.110
我们就可以用

01:26:37.110 --> 01:26:39.110
in列子 y

01:26:39.110 --> 01:26:40.110
减去当前的 y 坐标

01:26:40.110 --> 01:26:43.110
送到那个差值

01:26:43.110 --> 01:26:45.110
计算位置的差值

01:26:45.110 --> 01:26:50.080
好第5步

01:26:50.080 --> 01:26:53.080
变化后的位置

01:26:53.080 --> 01:26:54.080
第5步

01:26:54.080 --> 01:26:56.080
当元素回退到之前的位置

01:26:56.080 --> 01:26:57.080
那怎么回退呢

01:26:57.080 --> 01:26:59.080
我们是不是可以给它设置

01:26:59.080 --> 01:27:01.080
style transform

01:27:01.080 --> 01:27:03.080
回退回去

01:27:03.080 --> 01:27:05.780
transform

01:27:05.780 --> 01:27:10.350
然后给它加上一个transnet

01:27:10.350 --> 01:27:12.350
transnet y

01:27:12.350 --> 01:27:13.350
考虑其他的了

01:27:13.350 --> 01:27:14.350
但它这个

01:27:14.350 --> 01:27:16.350
VU里面考虑很多

01:27:16.350 --> 01:27:18.350
不光是位置

01:27:18.350 --> 01:27:21.350
不光是 y 坐标

01:27:21.350 --> 01:27:22.350
还有一个横坐标

01:27:22.350 --> 01:27:23.350
也要考虑进去

01:27:23.350 --> 01:27:24.350
我这里不考虑的

01:27:24.350 --> 01:27:26.350
这里是不是就把电池传进去

01:27:26.350 --> 01:27:27.350
对吧

01:27:27.350 --> 01:27:28.350
多少px呢

01:27:28.350 --> 01:27:30.350
就是电池

01:27:30.350 --> 01:27:32.350
退回到这个位置

01:27:32.350 --> 01:27:34.350
好退回去了

01:27:34.350 --> 01:27:35.350
好

01:27:35.350 --> 01:27:36.350
那看啊

01:27:36.350 --> 01:27:37.350
我们现在看一下

01:27:37.350 --> 01:27:38.350
其实已经看到效果了

01:27:38.350 --> 01:27:39.350
点击交换

01:27:39.350 --> 01:27:40.350
诶 刷新

01:27:40.350 --> 01:27:41.350
点交换

01:27:41.350 --> 01:27:43.350
诶 为什么

01:27:43.350 --> 01:27:45.350
style transform

01:27:45.350 --> 01:27:47.350
我看一下

01:27:47.350 --> 01:27:49.350
诶 没加上了

01:27:49.350 --> 01:27:51.350
这个

01:27:51.350 --> 01:27:53.350
style transform

01:27:53.350 --> 01:27:56.920
transnet

01:27:56.920 --> 01:27:57.920
这里运行的吗

01:27:57.920 --> 01:28:02.320
运行的

01:28:02.320 --> 01:28:04.320
没加上了

01:28:04.320 --> 01:28:06.320
dome style transform

01:28:06.320 --> 01:28:07.320
缺

01:28:07.320 --> 01:28:11.270
哦 这写错了

01:28:11.270 --> 01:28:12.270
你看

01:28:12.270 --> 01:28:14.270
现在的元素其实已经交换了

01:28:14.270 --> 01:28:15.270
你看这里

01:28:15.270 --> 01:28:16.270
第一个是二

01:28:16.270 --> 01:28:17.270
第二个是一

01:28:17.270 --> 01:28:18.270
已经交换了

01:28:18.270 --> 01:28:19.270
只不过这个一呢

01:28:19.270 --> 01:28:21.270
它退回到之前那个位置了

01:28:21.270 --> 01:28:22.270
然后干嘛呀

01:28:22.270 --> 01:28:23.270
然后我们要做的事情

01:28:23.270 --> 01:28:25.270
就特别简单了

01:28:25.270 --> 01:28:27.270
我要干嘛

01:28:27.270 --> 01:28:28.270
我要让它回去

01:28:28.270 --> 01:28:29.270
我要让它回去

01:28:29.270 --> 01:28:30.270
回到目前那个位置

01:28:30.270 --> 01:28:31.270
是不是就把这个

01:28:31.270 --> 01:28:32.270
去掉就行了

01:28:32.270 --> 01:28:33.270
当然你不能这样子写啊

01:28:33.270 --> 01:28:35.270
你不能这个时候去掉

01:28:35.270 --> 01:28:38.270
你不能这个时候去掉啊

01:28:38.270 --> 01:28:39.270
不行啊

01:28:39.270 --> 01:28:40.270
这个时候

01:28:40.270 --> 01:28:42.270
因为我们的单码是同步执行的

01:28:42.270 --> 01:28:44.270
就导致上面这句话就被覆盖掉了

01:28:44.270 --> 01:28:46.270
这个时候浏览起来没有渲染

01:28:46.270 --> 01:28:47.270
所以说我们应该在

01:28:47.270 --> 01:28:49.270
这一次渲染之后

01:28:49.270 --> 01:28:51.270
我们再去做这个事

01:28:51.270 --> 01:28:52.270
那么我们怎么样

01:28:52.270 --> 01:28:54.270
我们怎么样在这里

01:28:54.270 --> 01:28:55.270
有两种方法

01:28:55.270 --> 01:28:57.270
一种是在这里用强行渲染

01:28:57.270 --> 01:28:59.270
强行让它渲染

01:28:59.270 --> 01:29:01.270
以前我想公开直播的时候

01:29:01.270 --> 01:29:02.270
也有用这种方式

01:29:02.270 --> 01:29:04.270
这种方式非常简单

01:29:04.270 --> 01:29:06.270
还有一种方式呢

01:29:06.270 --> 01:29:08.270
就是用5U的那种方式

01:29:08.270 --> 01:29:09.270
就是监听它的渲染症

01:29:09.270 --> 01:29:12.270
等它下一次渲染之后

01:29:12.270 --> 01:29:14.270
我们去做一些事情

01:29:14.270 --> 01:29:16.270
那么我们这里可以写个辅助函数

01:29:16.270 --> 01:29:20.220
就是request

01:29:20.220 --> 01:29:21.220
request

01:29:21.220 --> 01:29:23.220
animation

01:29:23.220 --> 01:29:25.220
free

01:29:25.220 --> 01:29:27.220
写个函数

01:29:27.220 --> 01:29:29.220
这里给我传个回调函数进来

01:29:29.220 --> 01:29:31.220
这是什么

01:29:31.220 --> 01:29:33.220
函数的作用就是

01:29:33.220 --> 01:29:39.220
当浏览起下一次渲染之后

01:29:39.220 --> 01:29:41.220
调用回调

01:29:41.220 --> 01:29:43.220
那么这个函数怎么写呢

01:29:43.220 --> 01:29:45.220
这个就是request

01:29:45.220 --> 01:29:47.220
animation free

01:29:47.220 --> 01:29:49.220
好你不能直接把回调传进去

01:29:49.220 --> 01:29:50.220
因为这个回调函数

01:29:50.220 --> 01:29:51.220
这个是什么意思

01:29:51.220 --> 01:29:53.220
是在下一次渲染之前

01:29:53.220 --> 01:29:55.220
调用回调

01:29:55.220 --> 01:29:56.220
调用回调之后

01:29:56.220 --> 01:29:57.220
才去进行渲染

01:29:57.220 --> 01:29:58.220
要是要下一次渲染之后

01:29:58.220 --> 01:30:00.220
调用回调怎么办

01:30:00.220 --> 01:30:02.220
都简单

01:30:02.220 --> 01:30:04.220
下一次渲染之前

01:30:04.220 --> 01:30:05.220
它会运行这个

01:30:05.220 --> 01:30:07.220
这个事情就是

01:30:07.220 --> 01:30:10.220
我再再下一次回调

01:30:10.220 --> 01:30:12.220
再再下一次运行之前

01:30:12.220 --> 01:30:13.220
调用回调

01:30:13.220 --> 01:30:14.220
对吧

01:30:14.220 --> 01:30:15.220
不就完了吗

01:30:15.220 --> 01:30:16.220
你看吧

01:30:16.220 --> 01:30:18.220
非常简单画一个花园线

01:30:18.220 --> 01:30:19.220
这是渲染症

01:30:19.220 --> 01:30:20.220
这是渲染症

01:30:20.220 --> 01:30:22.220
它递这个回调

01:30:22.220 --> 01:30:25.530
这个回调

01:30:25.530 --> 01:30:27.530
是在这里调用的

01:30:27.530 --> 01:30:28.530
这个这里调用的时候

01:30:28.530 --> 01:30:29.530
它告诉你

01:30:29.530 --> 01:30:30.530
我这一次就算了

01:30:30.530 --> 01:30:32.530
你下一次回调之前

01:30:32.530 --> 01:30:34.530
运行这个

01:30:34.530 --> 01:30:35.530
看到没

01:30:35.530 --> 01:30:36.530
那不就是这一次回调

01:30:36.530 --> 01:30:38.530
这一次那个渲染之后吗

01:30:38.530 --> 01:30:39.530
对吧

01:30:39.530 --> 01:30:40.530
它就这样做了

01:30:40.530 --> 01:30:41.530
这也是无忧的写法

01:30:41.530 --> 01:30:43.530
无忧也是这样写的

01:30:43.530 --> 01:30:45.530
所以说我们用这个东西

01:30:45.530 --> 01:30:47.530
我不仅影响渲染了

01:30:47.530 --> 01:30:48.530
下一次

01:30:48.530 --> 01:30:50.530
就渲染之后

01:30:51.530 --> 01:30:53.530
渲染之后

01:30:53.530 --> 01:30:55.530
传入一个回调进去

01:30:55.530 --> 01:30:56.530
渲染之后我干吗

01:30:56.530 --> 01:30:57.530
我现在已经是这个样子

01:30:57.530 --> 01:30:58.530
已经退回去了

01:30:58.530 --> 01:31:00.530
已经退回去了

01:31:00.530 --> 01:31:04.510
是吧

01:31:04.510 --> 01:31:05.510
已经退回去了

01:31:05.510 --> 01:31:06.510
然后下一次

01:31:06.510 --> 01:31:07.510
渲染之后

01:31:07.510 --> 01:31:08.510
渲染之后

01:31:08.510 --> 01:31:11.510
我就把这个样子去掉

01:31:11.510 --> 01:31:13.510
全C型再加上

01:31:13.510 --> 01:31:14.510
全C型

01:31:14.510 --> 01:31:18.080
全C型

01:31:18.080 --> 01:31:20.080
我都写白蓝了

01:31:21.080 --> 01:31:23.080
0.5秒吧

01:31:24.080 --> 01:31:25.080
然后把那个transform

01:31:25.080 --> 01:31:26.080
再去掉

01:31:26.080 --> 01:31:27.080
transform

01:31:27.080 --> 01:31:28.080
再去掉

01:31:28.080 --> 01:31:32.560
没爆错吗

01:31:33.560 --> 01:31:39.140
没爆错

01:31:39.140 --> 01:31:40.140
等一下

01:31:40.140 --> 01:31:42.140
我看一下到底哪里出了问题

01:31:43.140 --> 01:31:44.140
全

01:31:44.140 --> 01:31:46.140
看最后

01:31:46.140 --> 01:31:48.140
全C型没加上

01:31:48.140 --> 01:31:50.140
我这里哪里又写错了

01:31:51.140 --> 01:31:52.140
对

01:31:52.140 --> 01:31:53.140
你看是不是加上了

01:31:53.140 --> 01:31:54.140
好

01:31:54.140 --> 01:31:55.140
然后这里

01:31:55.140 --> 01:31:57.140
我要等它动画结束过后

01:31:57.140 --> 01:31:58.140
全C型N的过后

01:31:58.140 --> 01:32:00.140
我要把这个给它移除掉

01:32:00.140 --> 01:32:01.140
不然的话

01:32:01.140 --> 01:32:02.140
又会影响下一次大轨

01:32:02.140 --> 01:32:04.140
我把一个移除掉

01:32:05.140 --> 01:32:06.140
我们都给它加上

01:32:06.140 --> 01:32:07.140
全

01:32:07.140 --> 01:32:09.140
ADD event

01:32:09.140 --> 01:32:11.140
less in there

01:32:12.140 --> 01:32:14.140
transition

01:32:14.140 --> 01:32:15.140
end

01:32:16.140 --> 01:32:17.140
干嘛

01:32:17.140 --> 01:32:18.140
把移除掉

01:32:18.140 --> 01:32:19.140
domestile

01:32:19.140 --> 01:32:21.140
transition

01:32:22.140 --> 01:32:24.140
我这里没有去怎么考虑通用信

01:32:24.140 --> 01:32:26.140
出发一次就OK了

01:32:26.140 --> 01:32:29.450
因为下一次又会加上这个事情

01:32:29.450 --> 01:32:30.450
我就写到外面吧

01:32:30.450 --> 01:32:31.450
干脆

01:32:31.450 --> 01:32:32.450
就写来说吧

01:32:32.450 --> 01:32:33.450
无所谓

01:32:33.450 --> 01:32:35.450
这现在我们不去考虑通用信

01:32:35.450 --> 01:32:40.900
看没

01:32:40.900 --> 01:32:44.300
好

01:32:44.300 --> 01:32:45.300
那么对这个东西

01:32:45.300 --> 01:32:46.300
是不是也可以一样的

01:32:46.300 --> 01:32:48.300
所以说我们对Li2

01:32:48.300 --> 01:32:49.300
也做同样的事情

01:32:49.300 --> 01:32:51.300
拿到Li2的位置

01:32:51.300 --> 01:32:53.930
那么这里

01:32:53.930 --> 01:33:00.190
应用Li2的动画

01:33:00.190 --> 01:33:01.190
这就交完了

01:33:01.190 --> 01:33:02.190
非常整齐

01:33:02.190 --> 01:33:04.190
这特别有意思的识录

01:33:05.190 --> 01:33:07.190
其实我们在VU里边写的

01:33:07.190 --> 01:33:09.190
那个VMU

01:33:09.190 --> 01:33:11.190
那个函数无非就是在说这么一件事

01:33:12.190 --> 01:33:14.190
就在这个时候发生的

01:33:14.190 --> 01:33:15.190
在这个时候

01:33:15.190 --> 01:33:17.190
这个时候发生的

01:33:17.190 --> 01:33:19.190
给它加上一个传辑信

01:33:19.190 --> 01:33:21.190
我们只需要给加上一个传辑信就行了

01:33:21.190 --> 01:33:22.190
这些事情

01:33:22.190 --> 01:33:23.190
它就帮我们做好了

01:33:23.190 --> 01:33:24.190
对

01:33:24.190 --> 01:33:25.190
OK

01:33:25.190 --> 01:33:26.190
那么这就是

01:33:26.190 --> 01:33:28.190
关于VU里边的动画

01:33:28.190 --> 01:33:29.190
以及这个Flip

01:33:29.190 --> 01:33:31.190
这个一个小知识

01:33:31.190 --> 01:33:33.190
那么这一刻我们就到这了

01:33:33.190 --> 01:33:35.190
这些东西要下去练习一下

01:33:35.190 --> 01:33:36.190
都是跟我们以后开发

01:33:36.190 --> 01:33:38.190
可能很有极有关系的

