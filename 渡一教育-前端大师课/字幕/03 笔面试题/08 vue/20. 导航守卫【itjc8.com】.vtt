WEBVTT

00:00.240 --> 00:04.040
好 这些课呢 我要给大家聊的是导航守卫

00:04.040 --> 00:06.900
但是呢 我实际要聊的是

00:06.900 --> 00:10.240
如何学习官方文档

00:10.240 --> 00:15.330
很多同学对官方文档很抵触

00:15.330 --> 00:18.330
因为呢 他确实不像是一个教程

00:18.330 --> 00:21.130
虽然说他给你写的是指南或者是教程

00:21.130 --> 00:23.830
但是呢 看上去不像是一个教程 看不懂

00:23.830 --> 00:25.330
东西太繁杂了

00:25.330 --> 00:29.330
这是很多同学的一个反应的一个现象啊

00:29.330 --> 00:32.330
那么我们如何来看断戴官方文档呢

00:32.830 --> 00:36.330
是因为为什么官方文档看上去这么繁杂

00:36.330 --> 00:37.830
不太看得懂呢

00:37.830 --> 00:41.830
是因为你看官方文档的心态不对

00:41.830 --> 00:44.330
官方文档他有一个特点

00:44.330 --> 00:46.830
他要首先 他不会给你举例子

00:46.830 --> 00:49.830
不要说平时我给你举一些什么生活中的例子

00:49.830 --> 00:51.830
官方文档一定不会这样做

00:51.830 --> 00:54.830
因为这样做呢 失去了他的专业性

00:54.830 --> 00:56.830
你们知道啊 有些比喻

00:56.830 --> 00:59.830
虽然说比喻可以变于你理解

00:59.830 --> 01:04.830
但是呢 也会多多少少导致他的概念不精准

01:04.830 --> 01:06.830
这样以横向比喻起来

01:06.830 --> 01:09.830
也换成另外一个场景 生活中的一些场景

01:09.830 --> 01:12.330
他会导致他的概念的理解起来不精准

01:12.330 --> 01:15.330
他不敢去做这么一件事

01:15.330 --> 01:16.830
这是第一个

01:16.830 --> 01:19.830
第二个呢 官方文档他要给东西啊

01:19.830 --> 01:21.830
他一定要全

01:21.830 --> 01:23.830
所以说他会非常非常的细

01:23.830 --> 01:25.830
把一些平时我们可能

01:25.830 --> 01:27.830
就是简单的用一下的一些支持点

01:27.830 --> 01:29.830
但他给你讲的非常非常细

01:29.830 --> 01:33.830
就会导致官方文档里边东西看起来很繁杂

01:33.830 --> 01:38.830
因此呢 我们看待官方文档心态要放好

01:38.830 --> 01:41.830
就是说他给你讲了这么多东西啊

01:41.830 --> 01:43.830
你不一定用的

01:43.830 --> 01:46.830
不是说他讲的东西你就一定要把它用上

01:46.830 --> 01:48.830
应该是学到现在啊

01:48.830 --> 01:50.830
同学们应该有这种感觉了对吧

01:50.830 --> 01:53.330
我们以前讲过好多好多东西

01:53.330 --> 01:55.830
但是平时我们用的就那么一些

01:55.830 --> 01:57.830
譬如说你家里边东西一大堆

01:57.830 --> 01:59.830
但是平时用的就那么一些

01:59.830 --> 02:03.830
用个电视 电脑 手机充电器

02:03.830 --> 02:07.830
客厅里边一些垃圾 沙发呀

02:07.830 --> 02:09.830
简单用的也就这么一些了

02:09.830 --> 02:11.830
但是你家里边东西多得有

02:11.830 --> 02:13.830
那你有没有是一回事

02:13.830 --> 02:15.830
你用不用是另外一回事

02:15.830 --> 02:18.830
那么官方文档就特别有这么一个特点

02:18.830 --> 02:20.830
要给东西特别特别多

02:20.830 --> 02:23.830
因为他作为相互用这种

02:23.830 --> 02:25.830
一个知名度这么高的一个框架

02:25.830 --> 02:27.830
里边还要考虑各种各样的情况

02:27.830 --> 02:29.830
他给的东西特别多

02:29.830 --> 02:31.830
但是我们平时用的就那么一些

02:31.830 --> 02:33.830
所以看官方文档了

02:33.830 --> 02:35.830
我们要怀着这么一种心态

02:35.830 --> 02:38.830
就我看一看你到底给我了哪些东西

02:38.830 --> 02:40.830
我用不用是一回事

02:40.830 --> 02:41.830
我看了可能就忘了

02:41.830 --> 02:43.830
但是我心里边有个书了

02:43.830 --> 02:45.830
原来在导航守卫这一块

02:45.830 --> 02:47.830
你给的东西有这么多

02:47.830 --> 02:49.830
给了这么多灵活的各种各样的功能

02:49.830 --> 02:51.830
提供给我们了

02:51.830 --> 02:53.830
我们用不用将来我可能现在不用

02:53.830 --> 02:55.830
现在我也想不到有什么好的

02:55.830 --> 02:57.830
应用场景那将来我在工作中

02:57.830 --> 02:59.830
突然有一天我发现

02:59.830 --> 03:01.830
我们之前用的那个学的导航守卫

03:01.830 --> 03:03.830
好像不太够用了

03:03.830 --> 03:05.830
那我这个时候再一次

03:05.830 --> 03:07.830
去查认一下官方文档

03:07.830 --> 03:09.830
我想起来了我家里边还有一些东西

03:09.830 --> 03:11.830
我在抽屉里边箱子里边翻一翻

03:11.830 --> 03:13.830
看能不能有用得上的

03:13.830 --> 03:15.830
是这么一种感觉

03:15.830 --> 03:17.830
如果你找到这么一种感觉的话

03:17.830 --> 03:19.830
那你就觉得

03:19.830 --> 03:21.830
技术原来就这么简单

03:21.830 --> 03:23.830
平时我们写书的

03:23.830 --> 03:25.830
不需要去查文档的

03:25.830 --> 03:27.830
经常用的就这么一些

03:27.830 --> 03:29.830
有时候发现这个解决不了问题的

03:29.830 --> 03:31.830
我想起来了家里边好像有个什么东西

03:31.830 --> 03:33.830
好像能不能用上

03:33.830 --> 03:35.830
我去查一查官方文档

03:35.830 --> 03:37.830
他怎么说的

03:37.830 --> 03:39.830
因为之前看过多少少有这么一个印象

03:39.830 --> 03:41.830
你再去查的时候会查得很快

03:41.830 --> 03:43.830
所以说官方文档

03:43.830 --> 03:45.830
就为什么大家讨厌官方文档

03:45.830 --> 03:47.830
解释清楚了

03:47.830 --> 03:49.830
那以后看官方文档就没有那么大的

03:49.830 --> 03:51.830
心理压力了

03:51.830 --> 03:53.830
我们来看一下这个框

03:53.830 --> 03:55.830
导航所谓的官方文档

03:55.830 --> 03:57.830
这一刻我告诉大家

03:57.830 --> 03:59.830
我一行呆都不会写

03:59.830 --> 04:01.830
我要教大家如何来看官方文档

04:01.830 --> 04:03.830
看官方文档的时候

04:03.830 --> 04:05.830
不要一个字一个字的去扣

04:05.830 --> 04:07.830
没有什么意义

04:07.830 --> 04:09.830
大体上看一下

04:09.830 --> 04:11.830
它给了就大体上给了那些东西

04:11.830 --> 04:13.830
因为你现在很多东西可能用不到的

04:13.830 --> 04:15.830
用不上的

04:15.830 --> 04:17.830
也没有什么用

04:17.830 --> 04:19.830
只有等到将来我们遇到了

04:19.830 --> 04:21.830
真的需要去用它了

04:21.830 --> 04:23.830
我们在箱子里把翻出来

04:23.830 --> 04:25.830
好好地研究一下这一块我们能不能解决问题

04:25.830 --> 04:27.830
这样子的话

04:27.830 --> 04:29.830
你就会把技术当成一个工具

04:29.830 --> 04:31.830
真正的变成一个工具用的时候

04:31.830 --> 04:33.830
去查约去拿出来使用

04:33.830 --> 04:35.830
就完事了

04:35.830 --> 04:37.830
好,我们来看一下导航所谓

04:37.830 --> 04:39.830
导航所谓这一块我们看到一个指部路

04:39.830 --> 04:41.830
说明它的守卫类型有特别特别多

04:41.830 --> 04:43.830
后面还会告诉大家

04:43.830 --> 04:45.830
有这么多守卫

04:45.830 --> 04:47.830
它们的完整的执行流程是什么样子

04:47.830 --> 04:49.830
通过这个目录

04:49.830 --> 04:51.830
我就大概知道了,原来导航所谓

04:51.830 --> 04:53.830
还不是一个,还可以有很多很多种

04:53.830 --> 04:55.830
那么这里呢

04:55.830 --> 04:57.830
我们首先一个个看吧

04:57.830 --> 04:59.830
它把导航所谓有分成

04:59.830 --> 05:01.830
第一个,全局前置守卫

05:01.830 --> 05:03.830
那么这就是我们之前

05:03.830 --> 05:05.830
也看的代码势力

05:05.830 --> 05:07.830
我一看的代码势力

05:07.830 --> 05:09.830
不就是我们之前用的导航所谓吗

05:09.830 --> 05:11.830
当它进入到一个路由之前

05:11.830 --> 05:13.830
它会运行这个函数

05:13.830 --> 05:15.830
这个函数里边有三个参数

05:15.830 --> 05:17.830
一个是two,表示

05:17.830 --> 05:19.830
我即将进入的导航

05:19.830 --> 05:21.830
Front是

05:21.830 --> 05:23.830
我离开那个导航

05:23.830 --> 05:25.830
Lex是一个函数

05:25.830 --> 05:27.830
这个函数你一定要调用

05:27.830 --> 05:29.830
你不调用的话就进不去

05:29.830 --> 05:31.830
调用的话就进去了

05:31.830 --> 05:33.830
好,那么我们来看一下个全局前置守卫

05:33.830 --> 05:35.830
two呢

05:35.830 --> 05:37.830
指的是什么弱者,一个弱者对象

05:37.830 --> 05:39.830
那么这里表示什么意思

05:39.830 --> 05:41.830
冒号后表有个东西,表示什么意思呢

05:41.830 --> 05:43.830
它这里不是它的指

05:43.830 --> 05:45.830
指的是这个two这个参数

05:45.830 --> 05:47.830
它的内形是什么

05:47.830 --> 05:49.830
表示它这里是写了一个stream

05:49.830 --> 05:51.830
表示的是two这个参数是一个字无算

05:51.830 --> 05:53.830
但是现在写的是个route

05:53.830 --> 05:55.830
表示它是一个对象

05:55.830 --> 05:57.830
对象的内形是一个route

05:57.830 --> 05:59.830
可以理解为它是一个通过这个route的构造函数

05:59.830 --> 06:01.830
表示即将进入目标的路由对象

06:01.830 --> 06:03.830
那么我们回顾一下

06:03.830 --> 06:05.830
之前我们在数据代码的时候

06:05.830 --> 06:07.830
这两个玩意都是一个对象

06:07.830 --> 06:09.830
跟from也是个对象

06:09.830 --> 06:11.830
那个史上是一个函数

06:11.830 --> 06:13.830
它说它一定要调这个函数

06:13.830 --> 06:15.830
不然的话它又进不到这个路由里面去

06:15.830 --> 06:19.830
一定要调用这个方法来resolve这个构制

06:19.830 --> 06:21.830
就是完成这个构制函数

06:21.830 --> 06:23.830
完成的意思就是进去这个路由

06:23.830 --> 06:25.830
比方说它有这么几种调法

06:25.830 --> 06:27.830
一个是不传参数,直接就进入到two了

06:27.830 --> 06:29.830
导航的状态是confirm的

06:29.830 --> 06:31.830
确认的,表示导航ok了

06:31.830 --> 06:33.830
进去了

06:33.830 --> 06:35.830
而next force表示中断

06:35.830 --> 06:37.830
不进去,还是放到

06:37.830 --> 06:39.830
还是回到from这个路由

06:39.830 --> 06:40.830
不变

06:40.830 --> 06:41.830
而那个值得的

06:41.830 --> 06:42.830
可以传一个字无串

06:42.830 --> 06:43.830
也可以传一个这个对象

06:43.830 --> 06:44.830
那么看到这个字无串的对象

06:44.830 --> 06:46.830
不就是挑转路由那个东西吗

06:46.830 --> 06:49.830
对吧,挑转到另外一个不同的地址

06:49.830 --> 06:51.830
还可以传一个error错误对象

06:51.830 --> 06:53.830
只要是一个error的实力就可以了

06:53.830 --> 06:55.830
那么它就会触发错误

06:55.830 --> 06:57.830
导航错误

06:57.830 --> 06:59.830
那么这里又会提示你

06:59.830 --> 07:01.830
原来还可以通过这种方式

07:01.830 --> 07:03.830
当导航发生错误的时候

07:03.830 --> 07:04.830
可以执行某一些东西

07:04.830 --> 07:06.830
那么这就是另外一块知识了

07:06.830 --> 07:08.830
那么同学们,如果有兴趣的话

07:08.830 --> 07:09.830
可以点开它

07:09.830 --> 07:10.830
可以看一下

07:10.830 --> 07:12.830
这个onerror

07:12.830 --> 07:14.830
它这里有一个API

07:14.830 --> 07:18.830
当导航错误的时候

07:18.830 --> 07:20.830
当导航错误的时候

07:20.830 --> 07:21.830
这里可以传一个回调

07:21.830 --> 07:23.830
它这里可以执行一些东西

07:23.830 --> 07:24.830
对吧,这就是

07:24.830 --> 07:25.830
那就清楚了

07:25.830 --> 07:26.830
那么现在详细情况

07:26.830 --> 07:27.830
就这么一些

07:27.830 --> 07:28.830
原来有这么多用法

07:28.830 --> 07:30.830
全局前置所谓

07:30.830 --> 07:31.830
我们就看完了

07:31.830 --> 07:33.830
因为反正我们都是学过的吧

07:33.830 --> 07:35.830
它差别给了你一些小的细节

07:35.830 --> 07:37.830
就是我们在用它的时候

07:37.830 --> 07:39.830
要避免发生问题

07:39.830 --> 07:40.830
那么这些细节你过一下就行了

07:40.830 --> 07:42.830
你千万不要去记

07:42.830 --> 07:43.830
你记不住的

07:43.830 --> 07:44.830
当真正出现问题的时候

07:44.830 --> 07:46.830
你偶然想起了老大里边

07:46.830 --> 07:48.830
好像之前看到过

07:48.830 --> 07:50.830
好像说了不准怎么样

07:50.830 --> 07:51.830
不准怎么样

07:51.830 --> 07:52.830
然后我们去回顾一下

07:52.830 --> 07:53.830
就会发现

07:53.830 --> 07:55.830
看它是不是跟你的问题是一样的

07:55.830 --> 07:57.830
那么这里举个例子

07:57.830 --> 07:58.830
例子它这里是bad

07:58.830 --> 07:59.830
表示不好的

07:59.830 --> 08:01.830
够的表示正确的

08:01.830 --> 08:02.830
那么这里看一下吧

08:02.830 --> 08:03.830
它说了

08:03.830 --> 08:05.830
它就是只能被钓一次

08:05.830 --> 08:06.830
这个next函数

08:06.830 --> 08:08.830
那你这样子写的话

08:08.830 --> 08:09.830
它判断成功了

08:09.830 --> 08:10.830
钓一次next

08:10.830 --> 08:11.830
它这里个代码

08:11.830 --> 08:13.830
其实写的不是很规矩

08:13.830 --> 08:14.830
最好了加上个大括号

08:14.830 --> 08:16.830
表示这个衣服里边

08:16.830 --> 08:17.830
有一条语句

08:17.830 --> 08:18.830
一个语句

08:18.830 --> 08:20.830
后边加了个next

08:20.830 --> 08:21.830
这里顺便说一下吧

08:21.830 --> 08:23.830
可能有些同学还不知道

08:23.830 --> 08:25.830
这是一种不好的写法

08:25.830 --> 08:26.830
首先说

08:26.830 --> 08:28.830
就是判断里边

08:28.830 --> 08:29.830
如果说这里边

08:29.830 --> 08:31.830
只有一条语句的话

08:31.830 --> 08:33.830
是可以省略掉这个大括号的

08:33.830 --> 08:35.830
但是这是不好的写法

08:35.830 --> 08:37.830
最好不要用这种方式写

08:37.830 --> 08:39.830
有些很多公司都是

08:39.830 --> 08:41.830
明令禁止这样的写法的

08:41.830 --> 08:43.830
就一定要把大括号加上

08:43.830 --> 08:44.830
那么比方说

08:44.830 --> 08:45.830
后边还有一条语句

08:45.830 --> 08:47.830
那么刚才它这里的写法

08:47.830 --> 08:48.830
就相当于是

08:48.830 --> 08:49.830
把这个大括号去掉了

08:49.830 --> 08:51.830
那实际上去不去掉

08:51.830 --> 08:52.830
都是一样的

08:52.830 --> 08:53.830
只有一条语句的时候

08:53.830 --> 08:54.830
可以省略这个大括号

08:54.830 --> 08:55.830
那么这样子写法

08:55.830 --> 08:57.830
就相当于是

08:57.830 --> 08:59.830
你再判断成功了

08:59.830 --> 09:02.830
你会掉一个next

09:02.830 --> 09:03.830
那么如果说

09:03.830 --> 09:04.830
判断成功了掉这个next

09:04.830 --> 09:05.830
那下面还有一个next

09:05.830 --> 09:07.830
就这句话

09:07.830 --> 09:08.830
是不是又重复了

09:08.830 --> 09:11.830
就会掉用两次next

09:11.830 --> 09:12.830
在某些情况下

09:12.830 --> 09:14.830
就会掉用两次next

09:14.830 --> 09:16.830
那么它说这样子是不对的

09:16.830 --> 09:17.830
正确的做法

09:17.830 --> 09:18.830
就是要保证

09:18.830 --> 09:19.830
无论是哪一种情况

09:19.830 --> 09:21.830
它只会掉用一次next

09:21.830 --> 09:24.830
那么这里应该加上L才对

09:24.830 --> 09:25.830
这就是它出了一些小的细节

09:25.830 --> 09:27.830
你不要去记这个玩意

09:27.830 --> 09:28.830
反正你知道有这么一些小的细节

09:28.830 --> 09:29.830
就行了

09:29.830 --> 09:30.830
假如说犯了错

09:30.830 --> 09:31.830
你可以查阅

09:31.830 --> 09:32.830
就完事了

09:32.830 --> 09:33.830
然后呢

09:33.830 --> 09:35.830
全局解析守卫

09:35.830 --> 09:37.830
下面就是另外一些守卫了

09:37.830 --> 09:38.830
就是我们没有学过的

09:38.830 --> 09:39.830
它说啊

09:39.830 --> 09:41.830
这个全局解析守卫呢

09:41.830 --> 09:42.830
它跟那个b4一起啊

09:42.830 --> 09:44.830
非常的类似

09:44.830 --> 09:45.830
区别呢

09:45.830 --> 09:47.830
就是它掉用的时机不一样

09:47.830 --> 09:49.830
它没有再详细说了

09:49.830 --> 09:50.830
那么它没有详细说的话

09:50.830 --> 09:51.830
我们就先放着吧

09:51.830 --> 09:52.830
那么至少呢

09:52.830 --> 09:53.830
我们现在通过这个信息

09:53.830 --> 09:54.830
我们就知道了

09:54.830 --> 09:55.830
就是说有的时候啊

09:55.830 --> 09:57.830
你看官方文的

09:58.830 --> 10:00.830
你会发现它给的信息量呢

10:00.830 --> 10:01.830
有的时候很少

10:01.830 --> 10:02.830
有的时候很多

10:02.830 --> 10:03.830
没关系

10:03.830 --> 10:05.830
它只要给的信息量就行了

10:05.830 --> 10:07.830
你能吸收多少吸收多少

10:07.830 --> 10:08.830
因为这个官方文

10:08.830 --> 10:09.830
不是说你看一次

10:09.830 --> 10:10.830
就永远不用去看它了

10:10.830 --> 10:12.830
你要反复地看的

10:12.830 --> 10:13.830
有的时候出了问题

10:13.830 --> 10:14.830
要反复地去找的

10:14.830 --> 10:15.830
有的时候我需要一些东西

10:15.830 --> 10:17.830
官方文文到里面反复地去查

10:17.830 --> 10:18.830
非常的正常

10:18.830 --> 10:20.830
这才是真正的开发的状态

10:20.830 --> 10:22.830
所以说你第一次看的时候

10:22.830 --> 10:23.830
有多少信息

10:23.830 --> 10:25.830
吸收多少信息

10:25.830 --> 10:26.830
没关系的

10:26.830 --> 10:27.830
然后这里它给的信息是什么呢

10:27.830 --> 10:28.830
给的信息就是这个

10:28.830 --> 10:29.830
before resolve

10:29.830 --> 10:31.830
它也是一个守位

10:31.830 --> 10:32.830
那么这个守位呢

10:32.830 --> 10:34.830
它跟那个before一起

10:34.830 --> 10:35.830
它有什么区别呢

10:35.830 --> 10:36.830
好像看来看去看不懂

10:36.830 --> 10:37.830
看不懂就看不懂

10:37.830 --> 10:38.830
无所谓

10:38.830 --> 10:41.830
rotor before resolve

10:41.830 --> 10:42.830
那么它给我的信息就是

10:42.830 --> 10:43.830
这个玩意

10:43.830 --> 10:44.830
它的用法跟那个

10:44.830 --> 10:46.830
before一起是一样的

10:48.830 --> 10:49.830
它的用法是一样的

10:49.830 --> 10:50.830
也就是说我要写代码的话

10:50.830 --> 10:52.830
如果说要用它写代码的话

10:52.830 --> 10:53.830
就这样写的

10:53.830 --> 10:54.830
这里边写东西

10:54.830 --> 10:55.830
所以用法是一样的

10:56.830 --> 10:57.830
就是这里的名字变了

10:59.830 --> 11:01.830
至少这个信息量有了

11:01.830 --> 11:02.830
跟我不知道

11:02.830 --> 11:03.830
完全不知道它

11:03.830 --> 11:04.830
那有区别了

11:04.830 --> 11:05.830
现在我知道

11:05.830 --> 11:06.830
它有这么一个东西

11:06.830 --> 11:07.830
它的用法跟它一样

11:07.830 --> 11:09.830
它实际不一样

11:09.830 --> 11:11.830
这个函数运行的实际不一样

11:11.830 --> 11:12.830
怎么不一样呢

11:12.830 --> 11:13.830
后边应该有解释

11:13.830 --> 11:14.830
如果说没有解释的话

11:14.830 --> 11:16.830
我们先放着吧

11:16.830 --> 11:18.830
接下来我继续往后看

11:18.830 --> 11:19.830
它说还有一个

11:19.830 --> 11:21.830
全局后置函数

11:21.830 --> 11:23.830
叫做after一起

11:24.830 --> 11:25.830
那么这个后置函数

11:25.830 --> 11:27.830
after单词明显的告诉

11:27.830 --> 11:29.830
它是什么之后的

11:29.830 --> 11:30.830
刚才我们有一个

11:30.830 --> 11:32.830
before什么

11:32.830 --> 11:33.830
before什么

11:33.830 --> 11:35.830
这里还有一个before什么

11:35.830 --> 11:37.830
都在什么之前的

11:37.830 --> 11:39.830
那么这里是什么之后的

11:39.830 --> 11:40.830
它说它这里面

11:40.830 --> 11:42.830
只有两个参数

11:42.830 --> 11:43.830
那么你通过这

11:43.830 --> 11:44.830
它没有这个list

11:45.830 --> 11:46.830
没有这个list

11:46.830 --> 11:47.830
那么你会怎么来

11:47.830 --> 11:49.830
看待这个件事了

11:49.830 --> 11:52.830
会触发你什么样的想象呢

11:53.830 --> 11:55.830
说明了这个after

11:55.830 --> 11:57.830
很有可能就是

11:57.830 --> 11:59.830
导航已经就切过去了

11:59.830 --> 12:00.830
对吧

12:00.830 --> 12:02.830
已经就已经完成了切换

12:02.830 --> 12:03.830
那么这个时候

12:03.830 --> 12:05.830
它还能给你那个函数吗

12:05.830 --> 12:07.830
它就没法给你了

12:07.830 --> 12:09.830
因为它已经完成了

12:09.830 --> 12:10.830
那个函数你现在告诉它

12:10.830 --> 12:11.830
不要完成

12:11.830 --> 12:13.830
这时间又没法回到过去了

12:13.830 --> 12:14.830
时间不能倒流

12:14.830 --> 12:16.830
它已经完成切换了

12:16.830 --> 12:17.830
所以这个时候

12:17.830 --> 12:19.830
它觉得给你那个函数

12:19.830 --> 12:21.830
已经不符合逻辑了

12:21.830 --> 12:22.830
它不给你了

12:22.830 --> 12:23.830
说这样子一连

12:23.830 --> 12:25.830
哎 这个逻辑有通了

12:25.830 --> 12:26.830
对吧

12:26.830 --> 12:28.830
看官方的要这么去看

12:28.830 --> 12:29.830
根据它的信息

12:29.830 --> 12:31.830
能够吸收哪些信息

12:31.830 --> 12:32.830
好 我现在发现了

12:32.830 --> 12:33.830
有这么多导航

12:33.830 --> 12:35.830
这么多勾字函数

12:35.830 --> 12:37.830
它们可能运行的时机不一样

12:37.830 --> 12:38.830
每这个时间点不一样

12:38.830 --> 12:39.830
那么它的时间点

12:39.830 --> 12:41.830
是在之后运行的

12:41.830 --> 12:42.830
切换之后运行的

12:42.830 --> 12:43.830
这两这个玩意

12:43.830 --> 12:45.830
是在切换之前运行的

12:45.830 --> 12:46.830
现在就是这个时间点

12:46.830 --> 12:47.830
我们还不清楚

12:47.830 --> 12:48.830
不清楚算了

12:48.830 --> 12:49.830
扔了吧

12:49.830 --> 12:51.830
然后接下来

12:51.830 --> 12:53.830
除了全局的守卫之外

12:53.830 --> 12:54.830
它还有一些

12:54.830 --> 12:56.830
什么路由独享守卫

12:56.830 --> 12:57.830
这又是什么玩意呢

12:57.830 --> 12:58.830
一看那个代码

12:58.830 --> 12:59.830
哦 原来是什么意思

12:59.830 --> 13:01.830
配置到路由

13:01.830 --> 13:03.830
路由配置 看到没

13:03.830 --> 13:06.830
配置到路由PASS Component

13:06.830 --> 13:08.830
然后这里边还有一个Before Enter

13:08.830 --> 13:10.830
配置到这的

13:10.830 --> 13:11.830
还可以在这里配置守卫

13:11.830 --> 13:13.830
看到这有点晕了

13:13.830 --> 13:14.830
说 哎呀 这么多守卫

13:14.830 --> 13:15.830
它的执行顺序

13:15.830 --> 13:17.830
到底是什么样子的

13:17.830 --> 13:18.830
那这里是不是没有什么

13:18.830 --> 13:19.830
没有怎么明说

13:19.830 --> 13:21.830
没有明说这个顺序

13:21.830 --> 13:22.830
那么按照一般来说

13:22.830 --> 13:24.830
官方文章的料性

13:24.830 --> 13:25.830
它一定会跟你说清楚的

13:25.830 --> 13:27.830
那么说明它现在没有明说

13:27.830 --> 13:29.830
一定是在后边给你说清楚的

13:29.830 --> 13:31.830
那你现在就不用去管顺序

13:31.830 --> 13:33.830
反正它有这么一个东西

13:33.830 --> 13:34.830
路由 原来导航守卫

13:34.830 --> 13:35.830
不仅可以配置到

13:35.830 --> 13:36.830
那个路由对象里边

13:36.830 --> 13:37.830
还可以配置到这个

13:37.830 --> 13:39.830
肉齿这个配置里边

13:39.830 --> 13:40.830
也可以写守卫

13:40.830 --> 13:42.830
那么可以想象一下

13:42.830 --> 13:43.830
这个守卫什么是

13:43.830 --> 13:44.830
它跟什么相关的

13:44.830 --> 13:46.830
是跟这个路由相关的

13:46.830 --> 13:47.830
说明啥 只有进到

13:47.830 --> 13:48.830
这个路由的时候

13:48.830 --> 13:49.830
它才会运行

13:49.830 --> 13:50.830
而进到别的路由的时候

13:50.830 --> 13:51.830
是不会运行

13:51.830 --> 13:53.830
那么跟全局是不是不一样

13:53.830 --> 13:54.830
全局的话

13:54.830 --> 13:55.830
进到任何一个路由

13:55.830 --> 13:56.830
它都会运行

13:56.830 --> 13:57.830
那么这里配置到这儿

13:57.830 --> 13:59.830
它只会进到这个路由的时候

13:59.830 --> 14:00.830
才才会运行

14:00.830 --> 14:02.830
跟路由绑定在一起

14:02.830 --> 14:03.830
这个我信心量

14:03.830 --> 14:04.830
我们获取到了

14:04.830 --> 14:05.830
那有的时候

14:05.830 --> 14:06.830
我们开发中

14:06.830 --> 14:08.830
可能会遇到一些

14:08.830 --> 14:10.830
我其他的路由

14:10.830 --> 14:11.830
我不管

14:11.830 --> 14:12.830
我就想知道

14:12.830 --> 14:13.830
是哪个地方

14:13.830 --> 14:15.830
进到这个路由的

14:15.830 --> 14:16.830
是不是我们可以

14:17.830 --> 14:19.830
配置那个路由独相守卫

14:19.830 --> 14:20.830
对吧

14:20.830 --> 14:21.830
当然我们现在

14:21.830 --> 14:22.830
可能没有这样的需求

14:22.830 --> 14:23.830
没有这个需求真的

14:23.830 --> 14:24.830
反正就是

14:24.830 --> 14:25.830
他给了一些东西

14:25.830 --> 14:26.830
大礼包全部给你的

14:26.830 --> 14:27.830
你可能

14:27.830 --> 14:28.830
挑一些自己喜欢的来用

14:28.830 --> 14:29.830
平时来用

14:29.830 --> 14:30.830
其他不喜欢的

14:30.830 --> 14:31.830
放到箱子里边去

14:31.830 --> 14:32.830
但是你在知道

14:32.830 --> 14:34.830
有这么一些东西

14:34.830 --> 14:36.830
我小孩的玩具一大堆

14:36.830 --> 14:37.830
有的时候

14:37.830 --> 14:39.830
别人送了一些玩具过来

14:39.830 --> 14:40.830
我都不知道

14:40.830 --> 14:41.830
玩具的

14:41.830 --> 14:42.830
它现在能不能玩

14:42.830 --> 14:43.830
它有些玩具

14:43.830 --> 14:44.830
它又不喜欢玩

14:44.830 --> 14:45.830
就拿了一些

14:45.830 --> 14:46.830
喜欢玩的玩具出来

14:46.830 --> 14:48.830
喜欢玩具我就扔到箱子里边去

14:48.830 --> 14:49.830
有的时候

14:49.830 --> 14:51.830
它这个玩具玩膩了

14:51.830 --> 14:52.830
我在箱子里边找一些

14:52.830 --> 14:53.830
别的玩具去玩

14:53.830 --> 14:54.830
就可以了

14:54.830 --> 14:56.830
这就一样的道理

14:56.830 --> 14:57.830
这里的

14:57.830 --> 14:59.830
组建内的守卫

14:59.830 --> 15:00.830
它发现

15:00.830 --> 15:01.830
现在发现的

15:01.830 --> 15:02.830
就是出了这个

15:02.830 --> 15:03.830
选举

15:03.830 --> 15:04.830
出了这个路由

15:04.830 --> 15:05.830
它还可以配置到

15:05.830 --> 15:06.830
组建里边去

15:06.830 --> 15:07.830
你看这是一个

15:07.830 --> 15:08.830
组建

15:08.830 --> 15:09.830
Temple也是

15:09.830 --> 15:11.830
都是很传统的方式写的

15:11.830 --> 15:12.830
反正它是个组建

15:12.830 --> 15:13.830
组建里边

15:13.830 --> 15:14.830
可以配置

15:14.830 --> 15:16.830
三个勾字函数

15:16.830 --> 15:17.830
那么它在不同的

15:17.830 --> 15:18.830
时机来运行

15:20.830 --> 15:21.830
那么它这里

15:21.830 --> 15:23.830
还有给你详细说了

15:23.830 --> 15:25.830
在不同的函数里边

15:25.830 --> 15:26.830
有些地方

15:26.830 --> 15:27.830
它是不能获取到Z式的

15:27.830 --> 15:28.830
有些地方

15:28.830 --> 15:30.830
是能获取到Z式的

15:30.830 --> 15:31.830
也就是它们的

15:31.830 --> 15:33.830
时机可能运行的不一样

15:33.830 --> 15:35.830
不能获取Z式的时候

15:35.830 --> 15:37.830
那么说明这个函数

15:37.830 --> 15:39.830
它运行的时间点很早

15:39.830 --> 15:40.830
很早

15:40.830 --> 15:41.830
它在组建的实力

15:41.830 --> 15:42.830
都还没有创建的时候

15:43.830 --> 15:45.830
那么它就不能获取到Z式

15:46.830 --> 15:47.830
这是一些时间点

15:47.830 --> 15:48.830
但具体的时间点

15:48.830 --> 15:49.830
我们现在都还不清楚

15:50.830 --> 15:51.830
那么这里就是给你说了

15:51.830 --> 15:52.830
一大堆

15:52.830 --> 15:53.830
看一看

15:53.830 --> 15:54.830
获取一些信息量

15:54.830 --> 15:55.830
就可以了

15:55.830 --> 15:56.830
好 最后它发现

15:56.830 --> 15:57.830
有这么一段话

15:57.830 --> 15:58.830
它告诉你

15:59.830 --> 16:01.830
整个的这么多导航守卫

16:01.830 --> 16:02.830
它到底是按照一个

16:02.830 --> 16:04.830
什么样的顺序运行呢

16:05.830 --> 16:06.830
这个顺序

16:06.830 --> 16:08.830
我们就把它好好看一下

16:08.830 --> 16:09.830
它看了过后

16:09.830 --> 16:10.830
可能很快就忘了

16:10.830 --> 16:11.830
但是

16:11.830 --> 16:13.830
这是我们至少要理解一次

16:13.830 --> 16:15.830
理解一次之后

16:15.830 --> 16:16.830
我们之后要

16:16.830 --> 16:17.830
真的要关心顺序的时候

16:17.830 --> 16:18.830
来查约

16:18.830 --> 16:19.830
发现出了问题

16:19.830 --> 16:20.830
顺序好像出了问题

16:20.830 --> 16:22.830
那么我们来查约一下

16:22.830 --> 16:24.830
我们第一次好好看一下

16:24.830 --> 16:25.830
导航被触发

16:25.830 --> 16:26.830
什么意思啊

16:26.830 --> 16:27.830
就是我点了一个导航

16:27.830 --> 16:29.830
从A页面点到B页面了

16:29.830 --> 16:31.830
导航被触发了

16:31.830 --> 16:32.830
那么这个时候

16:32.830 --> 16:33.830
就第一步

16:33.830 --> 16:34.830
第二步

16:34.830 --> 16:35.830
它先运行的是什么呀

16:35.830 --> 16:37.830
先运行的是在

16:37.830 --> 16:38.830
失活的组建

16:38.830 --> 16:39.830
什么意思啊

16:39.830 --> 16:40.830
导航触发

16:40.830 --> 16:41.830
它是不是有一些

16:41.830 --> 16:42.830
组建叫

16:42.830 --> 16:43.830
消除掉

16:43.830 --> 16:44.830
对吧

16:44.830 --> 16:45.830
消毁掉

16:45.830 --> 16:46.830
那么这就是失活的组建

16:46.830 --> 16:47.830
那么这个组建里边

16:47.830 --> 16:48.830
调用什么

16:48.830 --> 16:49.830
调用Before

16:49.830 --> 16:51.830
Road Leave

16:51.830 --> 16:52.830
那么是调用了什么呢

16:52.830 --> 16:53.830
调用了是

16:53.830 --> 16:55.830
组建内的所谓

16:55.830 --> 16:59.340
调用Stake

16:59.340 --> 17:00.340
那么这里边

17:00.340 --> 17:01.340
什么可以访问这一次

17:01.340 --> 17:02.340
诶

17:02.340 --> 17:03.340
逻辑也说得通

17:03.340 --> 17:04.340
为什么呢

17:04.340 --> 17:06.340
你这个组建不是有实力的吗

17:06.340 --> 17:07.340
对吧有实力

17:07.340 --> 17:08.340
我才要消毁吗

17:08.340 --> 17:09.340
对吧

17:09.340 --> 17:10.340
那么这个时候消毁之前

17:10.340 --> 17:11.340
那么是不是可以拿到

17:11.340 --> 17:13.340
当前的组建实力

17:13.340 --> 17:14.340
没问题吧

17:14.340 --> 17:15.340
好

17:15.340 --> 17:18.340
然后再调用全局的before一起

17:18.340 --> 17:20.340
就是我们

17:20.340 --> 17:21.340
before一起不就这个吗

17:21.340 --> 17:23.340
最开始我们用的

17:23.340 --> 17:24.340
也就是它的调用时间点

17:24.340 --> 17:26.340
是很早的

17:26.340 --> 17:27.340
好

17:27.340 --> 17:28.340
然后继续

17:28.340 --> 17:30.340
然后再调用全局的

17:30.340 --> 17:31.340
在下边

17:31.340 --> 17:33.340
在重用的组建里

17:33.340 --> 17:34.340
调用Before

17:34.340 --> 17:36.340
Road Update

17:36.340 --> 17:37.340
什么意思啊

17:37.340 --> 17:38.340
什么叫重用的组建

17:38.340 --> 17:40.340
我们来看一下这个函数

17:40.340 --> 17:43.340
它也是个组建内的所谓

17:43.340 --> 17:44.340
它说什么意思

17:44.340 --> 17:45.340
它在这里一段话

17:45.340 --> 17:47.340
说得很明确了

17:47.340 --> 17:49.900
放大一点

17:49.900 --> 17:50.900
当路由改变

17:50.900 --> 17:54.900
但是该组建被复用时调用

17:54.900 --> 17:55.900
什么意思

17:55.900 --> 17:59.280
路由改变

17:59.280 --> 18:02.280
这个组建它没有消失

18:02.280 --> 18:04.280
它在复用这个组建

18:04.280 --> 18:06.280
那么下面举一个例子来说

18:06.280 --> 18:07.280
什么情况下呢

18:07.280 --> 18:10.280
比方说带有一些动态参数的路径

18:11.280 --> 18:12.280
比方说

18:12.280 --> 18:15.280
我们在路由配置里面

18:15.280 --> 18:17.280
你可以想象了

18:17.280 --> 18:18.280
在路由配置里面

18:18.280 --> 18:21.780
我们可以配置到这么一个路由

18:23.780 --> 18:25.780
那么它配置的组建呢

18:25.780 --> 18:26.780
是这个组建

18:26.780 --> 18:28.780
比方说复这个组建

18:29.780 --> 18:31.780
那么当我们访问这个地址的时候

18:31.780 --> 18:35.930
一

18:35.930 --> 18:36.930
二

18:36.930 --> 18:37.930
那么这两个地址

18:37.930 --> 18:40.930
是不是都是访问到这个组建啊

18:40.930 --> 18:42.930
都是访问到它

18:42.930 --> 18:43.930
对吧

18:43.930 --> 18:44.930
因此呢

18:44.930 --> 18:46.930
当我们从这个地址

18:46.930 --> 18:49.930
切换到这个地址的时候

18:49.930 --> 18:52.370
组建

18:52.370 --> 18:54.370
这个组建它就会复用

18:54.370 --> 18:57.370
它不会把之前那个小伙伴重新创建

18:57.370 --> 18:58.370
它不会的

18:58.370 --> 18:59.370
它会复用

18:59.370 --> 19:01.370
那么这个时候呢

19:01.370 --> 19:03.370
它就会运行这个函数

19:03.370 --> 19:05.370
说其他的时候会不会运行

19:05.370 --> 19:07.370
它其他的时候就不会运行

19:07.370 --> 19:08.370
那么除了这种情况之外

19:08.370 --> 19:10.370
还可能还会包括了有参

19:10.370 --> 19:11.370
能有查询的变化

19:11.370 --> 19:12.370
比方说

19:13.370 --> 19:15.370
我这样的写的地址

19:15.370 --> 19:16.370
那么现在呢

19:16.370 --> 19:18.370
我可能是这样子Q等于1

19:18.370 --> 19:19.370
然后呢

19:19.370 --> 19:22.370
这里Q等于2

19:22.370 --> 19:24.370
所以这样子切换的时候

19:24.370 --> 19:26.370
它就会运行生

19:26.370 --> 19:28.370
就是这么一个意思

19:28.370 --> 19:30.370
好 这是这一步要做的事情

19:31.370 --> 19:33.370
好 第五步

19:33.370 --> 19:35.370
在路由配置里边

19:35.370 --> 19:37.370
调用那个before enter

19:37.370 --> 19:39.370
路由配置

19:39.370 --> 19:41.370
是不是路由独享组建

19:41.370 --> 19:42.370
好

19:42.370 --> 19:43.370
我们现在要比方说

19:43.370 --> 19:44.370
要从另外一个地址

19:44.370 --> 19:45.370
进到这个地址了

19:45.370 --> 19:46.370
那么现在它会在这里

19:46.370 --> 19:48.370
调用before enter

19:48.370 --> 19:50.370
然后继续

19:50.370 --> 19:55.810
解析一步路由独建

19:55.810 --> 19:57.810
那么这个是什么意思呢

19:57.810 --> 19:58.810
是因为我们在配置

19:58.810 --> 20:00.810
那个路由的时候

20:00.810 --> 20:02.810
它可能是这样子配置的

20:02.810 --> 20:04.810
我们之前不经常这样配置

20:04.810 --> 20:06.810
那么这个代码

20:06.810 --> 20:08.810
是不是会进行远程的加载

20:08.810 --> 20:13.820
远程加载这个组建的介绍

20:13.820 --> 20:15.820
所以有这么一个代码

20:15.820 --> 20:16.820
那么这个代码会导致

20:16.820 --> 20:18.820
一个一步加载

20:18.820 --> 20:19.820
那么可能如果说

20:19.820 --> 20:20.820
网络比较差的话

20:20.820 --> 20:21.820
它可能要加载很久

20:21.820 --> 20:23.820
才能把这个组建加载进去

20:23.820 --> 20:25.820
那么这个时候就等它加载

20:25.820 --> 20:27.820
比如说前面这些

20:27.820 --> 20:29.820
前面那些路由守卫

20:29.820 --> 20:31.820
它的组建都还没加载进来

20:31.820 --> 20:33.820
有新的组建都还没加载进来

20:33.820 --> 20:35.820
那么比方说要调到这个地址

20:35.820 --> 20:36.820
它新的组建都还没加载进来

20:36.820 --> 20:38.820
那么这一步才开始加载

20:38.820 --> 20:42.820
加载完了之后

20:42.820 --> 20:45.820
然后运行这个before road enter

20:45.820 --> 20:47.820
那么在新的组建里边

20:47.820 --> 20:49.820
加载完这个组建

20:49.820 --> 20:51.820
然后在新的组建里边

20:51.820 --> 20:52.820
就这个组建里边

20:52.820 --> 20:53.820
运行什么呢

20:53.820 --> 20:55.820
组建内的守卫

20:55.820 --> 20:57.820
before road enter

20:57.820 --> 20:59.820
那么这个守卫它告诉你了

20:59.820 --> 21:00.820
它不能使用这些

21:00.820 --> 21:01.820
说明啥

21:01.820 --> 21:03.820
说明这个组建还没去六国

21:03.820 --> 21:05.820
还没去创建实力

21:05.820 --> 21:08.820
只是把这个函数线运行一遍

21:08.820 --> 21:11.820
然后再调用全局的before result

21:11.820 --> 21:13.820
就是我们刚才就明白了

21:13.820 --> 21:14.820
原来是在这里调用的

21:14.820 --> 21:16.820
before result 什么意思

21:16.820 --> 21:20.820
表示说解析

21:20.820 --> 21:24.820
这个胆草像说的不是很好

21:24.820 --> 21:25.820
它应该是在解析之后

21:25.820 --> 21:28.820
它为什么写个before result

21:28.820 --> 21:30.820
那么解析

21:30.820 --> 21:34.820
在解析这个组建之后

21:34.820 --> 21:35.820
把这个组建的解释

21:35.820 --> 21:37.820
或许到了之后

21:37.820 --> 21:39.820
就运行这个勾字函数

21:40.820 --> 21:43.820
然后再调用全局

21:43.820 --> 21:45.820
再调用导航被确认

21:45.820 --> 21:46.820
那么这个时候导航

21:46.820 --> 21:48.820
如果说你不去做特殊处理的话

21:48.820 --> 21:50.820
比方说像那个before一起里边

21:50.820 --> 21:53.820
你没有去改动它的next的话

21:53.820 --> 21:55.820
那么导航就被确认了

21:55.820 --> 21:57.820
表示我要调过去了

21:57.820 --> 21:58.820
那么这个是调完了之后

21:58.820 --> 22:01.820
调用全局的after一起

22:01.820 --> 22:03.820
后置狗子

22:03.820 --> 22:04.820
调完了之后

22:04.820 --> 22:05.820
调用这个

22:05.820 --> 22:07.820
然后出发动物更新

22:07.820 --> 22:10.820
于是浏览器看到页面了

22:10.820 --> 22:14.820
最后调用那个before road enter

22:14.820 --> 22:16.820
那么你说这个函数

22:16.820 --> 22:17.820
这里

22:17.820 --> 22:20.820
这里边调用next的时候

22:20.820 --> 22:21.820
它会告诉你

22:21.820 --> 22:23.820
它还可以传一个回调

22:23.820 --> 22:25.820
在next里边可以传一个回调

22:25.820 --> 22:26.820
在这里

22:26.820 --> 22:27.820
在这个勾字函数里边

22:27.820 --> 22:29.820
可以用这种方式

22:29.820 --> 22:30.820
那么等到它

22:30.820 --> 22:32.820
你不是这里没法获取意思吗

22:32.820 --> 22:33.820
那如果说你要用

22:33.820 --> 22:34.820
组建实力的话

22:34.820 --> 22:35.820
你用这种方式

22:35.820 --> 22:36.820
等一切结束之后

22:36.820 --> 22:38.820
它会运行这个回调

22:38.820 --> 22:40.820
那么整个流程就完成

22:40.820 --> 22:42.820
是不是有点绕啊

22:42.820 --> 22:44.820
有点多有点绕

22:44.820 --> 22:46.820
让你记了吗

22:46.820 --> 22:48.820
没有让你记吧

22:48.820 --> 22:50.820
老师也记不住

22:50.820 --> 22:52.820
那么这个玩意就是用来查约的

22:52.820 --> 22:54.820
将来你们工作中

22:54.820 --> 22:56.820
如果说遇到了

22:56.820 --> 22:58.820
我们要靈活的

22:58.820 --> 23:00.820
用多种类型的导航守卫

23:00.820 --> 23:02.820
可能要涉及到一个顺序的问题

23:02.820 --> 23:04.820
查约就完成

23:04.820 --> 23:07.820
不要去死金硬背

23:07.820 --> 23:08.820
那么这一块

23:08.820 --> 23:09.820
如果说

23:09.820 --> 23:10.820
面试的时候

23:10.820 --> 23:13.820
它针对这一块来出题

23:13.820 --> 23:14.820
你该怎么办

23:14.820 --> 23:15.820
比方说

23:15.820 --> 23:17.820
它就给你写好几个守卫

23:17.820 --> 23:19.820
每个守卫里边给你输出一句话

23:19.820 --> 23:20.820
它问这些话的

23:20.820 --> 23:22.820
输出的顺序是什么

23:22.820 --> 23:24.820
你该怎么办

23:24.820 --> 23:26.820
那么这个时候呢

23:26.820 --> 23:27.820
你就要

23:27.820 --> 23:28.820
如果说它是开卷的

23:28.820 --> 23:30.820
你可以查约的

23:30.820 --> 23:32.820
其实现在不少的公司

23:32.820 --> 23:34.820
就是比试的时候

23:34.820 --> 23:36.820
面试比试的时候都可以查约的

23:36.820 --> 23:38.820
但是它可以保证你百度

23:38.820 --> 23:40.820
肯定是直接把那道题

23:40.820 --> 23:42.820
百度补出来的

23:42.820 --> 23:44.820
那么这个时候你就可以查约官网

23:44.820 --> 23:46.820
在这里找到

23:46.820 --> 23:48.820
通过这个流程

23:48.820 --> 23:50.820
然后结合题目

23:50.820 --> 23:51.820
找到一个答案

23:51.820 --> 23:53.820
如果说它在面试的时候

23:53.820 --> 23:55.820
就面对面给你聊天的时候

23:55.820 --> 23:56.820
聊的时候

23:56.820 --> 23:57.820
问你一些

23:57.820 --> 23:58.820
关于一个导航守卫

23:58.820 --> 24:00.820
你就高声量告诉他

24:00.820 --> 24:01.820
导航守卫

24:01.820 --> 24:05.820
以前已经完整了理解过了

24:05.820 --> 24:07.820
我自己去试验过了

24:07.820 --> 24:09.820
只不过那些流程有点多

24:09.820 --> 24:10.820
我现在忘了

24:10.820 --> 24:11.820
到时候真正的工作中

24:11.820 --> 24:12.820
要解决这个问题

24:12.820 --> 24:14.820
实际上是很简单的

24:14.820 --> 24:15.820
把官网里打开

24:15.820 --> 24:17.820
这个流程一调出来

24:17.820 --> 24:19.820
也得找到

24:19.820 --> 24:20.820
针对这个流程

24:20.820 --> 24:21.820
我们去研究那一颗

24:21.820 --> 24:23.820
如何来处理就完事了

24:23.820 --> 24:25.820
这个回答是没有任何问题的

24:25.820 --> 24:27.820
没有任何问题

24:27.820 --> 24:29.820
他现在就洗他热

24:29.820 --> 24:31.820
没啥了

24:31.820 --> 24:34.820
这就是导航守卫

24:34.820 --> 24:35.820
反正这一刻

24:35.820 --> 24:36.820
我告诉大家

24:36.820 --> 24:38.820
就是我们以后做前段开发

24:38.820 --> 24:40.820
像这种情况多的很

24:40.820 --> 24:41.820
就平时我们用的时候

24:41.820 --> 24:44.820
可能只用那么它的一个底

24:44.820 --> 24:45.820
但是实际上

24:45.820 --> 24:46.820
它给你提供了

24:46.820 --> 24:47.820
特别多的东西

24:47.820 --> 24:50.820
但是我们不需要去背它

24:50.820 --> 24:51.820
我们知道它存在

24:51.820 --> 24:53.820
然后关键时候

24:53.820 --> 24:55.820
查閱就完事了

24:55.820 --> 24:56.820
这样子看官方文章

24:56.820 --> 24:57.820
不觉得官方这个技术

24:57.820 --> 24:59.820
有多么的难

24:59.820 --> 25:02.820
袁老师在看一些

25:02.820 --> 25:03.820
新的技术的时候

25:03.820 --> 25:04.820
看官方文章

25:04.820 --> 25:05.820
其实整个过程

25:05.820 --> 25:06.820
应该是特别愉悦的

25:06.820 --> 25:07.820
不管它东西有多少

25:07.820 --> 25:08.820
我首先知道

25:08.820 --> 25:09.820
它是做什么用的

25:09.820 --> 25:11.820
它会解决什么样的问题

25:11.820 --> 25:12.820
它怎么解决的

25:12.820 --> 25:13.820
它给人哪些东西

25:13.820 --> 25:15.820
大概了解一下

25:15.820 --> 25:16.820
剩下的事情

25:16.820 --> 25:18.820
我真的用它进行开发的时候

25:18.820 --> 25:19.820
我自然而然

25:19.820 --> 25:21.820
再回去查就完事

25:21.820 --> 25:22.820
OK 那么这就是

25:22.820 --> 25:23.820
关于导航守卫

25:23.820 --> 25:25.820
我要讲的东西

