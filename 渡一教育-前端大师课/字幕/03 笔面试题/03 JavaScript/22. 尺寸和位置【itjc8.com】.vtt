WEBVTT

00:01.070 --> 00:03.110
大家好 我是谢老师

00:03.370 --> 00:05.930
这节课的话 我们来聊一聊这个

00:06.190 --> 00:09.010
街市中的这个尺寸和位置

00:09.270 --> 00:10.790
我们来做一个总结

00:11.050 --> 00:12.590
因为我们这个街市

00:12.850 --> 00:15.410
在操作这个DOM的时候

00:15.670 --> 00:17.450
就是这个DOM节点的这个尺寸

00:17.710 --> 00:18.730
以及这个位置

00:18.990 --> 00:20.530
它是一个非常重要的

00:20.790 --> 00:21.290
知识

00:21.550 --> 00:23.350
经常需要获取到这个尺寸

00:23.590 --> 00:24.870
或者获取到这个位置

00:25.130 --> 00:26.930
然后进行下一步的操作

00:27.430 --> 00:29.230
但是在这个DOM里面

00:29.630 --> 00:32.810
它给你提供的这些方法 提供的这些接口方法

00:33.070 --> 00:34.090
它又比较多

00:34.610 --> 00:35.630
对吧 各种各样

00:35.890 --> 00:38.190
所以我们这边的话 我们来做一个总结

00:38.450 --> 00:39.730
这些做一个总结

00:41.510 --> 00:45.350
在Jasquip中操作DOM节点 使其运动的时候

00:46.130 --> 00:48.170
特别就是我们要做动画的时候

00:48.430 --> 00:48.930
对不对

00:49.190 --> 00:51.250
常常会涉及到各种宽高和

00:52.010 --> 00:53.810
位置坐标的这个概念

00:54.070 --> 00:55.090
如果你不能

00:55.350 --> 00:57.390
理解他们的这个意义的话

00:57.650 --> 00:59.170
经常你在写代码的时候

00:59.430 --> 01:00.970
就会遇到不小的这个问题

01:01.230 --> 01:02.770
比如说我之前就遇到过问题

01:03.270 --> 01:04.050
我一会

01:04.310 --> 01:06.350
就是遇到什么问题 我一会再说

01:06.610 --> 01:09.690
好 那我们这一张的话 我们就来总结一下

01:09.930 --> 01:12.230
那这边的话 主要是分为两大部分

01:12.490 --> 01:14.550
一个就是关于DOM对象

01:15.050 --> 01:17.110
它相关的这个尺寸和位置

01:17.610 --> 01:20.170
第二个是什么呢 第二个是这个EWENT

01:20.430 --> 01:21.710
事件对象

01:21.970 --> 01:23.510
它相关的尺寸和

01:23.770 --> 01:24.270
位置

01:24.530 --> 01:25.810
对应的这个属性

01:26.530 --> 01:27.670
好 然后这个DOM

01:27.930 --> 01:29.850
DOM的话 这边的话又分为两个部分

01:30.370 --> 01:32.430
一个是什么呢 一个是止读

01:32.930 --> 01:34.730
一个是可读可写

01:35.990 --> 01:37.030
这个一定要分清楚

01:37.790 --> 01:39.590
同学们 这个一定要分清楚

01:39.850 --> 01:41.370
我之前就是在这吃了亏

01:41.890 --> 01:43.430
我当时要做一个效果

01:43.690 --> 01:44.970
做一个什么呢 做一个这个

01:45.230 --> 01:46.750
这个效果大家都看到过

01:47.010 --> 01:48.790
就什么呢 比如说我这个是个网页

01:49.050 --> 01:50.330
比如说这是网页 我翻到下面

01:50.590 --> 01:53.930
翻到下面之后 然后一般这样是不是就会出现一个那个

01:54.190 --> 01:54.690
回到

01:54.950 --> 01:55.710
顶部

01:56.270 --> 01:57.550
就会出现这么一个按钮

01:57.810 --> 02:01.530
对不对 然后接下来用户点一下这个按钮 然后这个页面就夸夸夸夸夸

02:01.790 --> 02:02.670
回到最顶部

02:03.190 --> 02:03.690
对不对

02:03.950 --> 02:06.770
那这里的话想都想得到 肯定是通过这个SCOPE

02:07.530 --> 02:08.050
这个

02:08.310 --> 02:09.850
SCRULE

02:10.110 --> 02:11.130
通过这个SCRULE

02:11.630 --> 02:13.170
相关的这个属性来做

02:13.430 --> 02:17.510
那我当时就是去干嘛呢 我去设置这个SCRULE HIT

02:18.790 --> 02:21.870
我当时想到的方案就是去设置SCRULE HIT

02:22.650 --> 02:23.410
结果最终

02:23.670 --> 02:24.690
可想而知

02:24.890 --> 02:25.930
它是不起效果的

02:26.430 --> 02:28.730
说当时的话我就在那儿卡了半天

02:29.770 --> 02:34.110
结果最终是什么 你看现在的话 你一看就知道了 为什么

02:34.370 --> 02:36.410
因为它是一个指读属性

02:37.570 --> 02:38.210
对不对

02:38.470 --> 02:39.750
它是一个指读属性

02:40.010 --> 02:41.810
你指读属性你咋能去设置

02:42.050 --> 02:42.810
设置值呢

02:43.070 --> 02:45.630
那你只能通过什么 只能通过这个SCRULE HIT

02:46.150 --> 02:48.450
它是不是才是可读可写

02:49.210 --> 02:49.730
对不对

02:49.990 --> 02:51.270
所以首先的话要把这个

02:51.530 --> 02:52.290
把它分清楚

02:52.510 --> 02:53.290
说我这边的话

02:53.530 --> 02:57.870
单独就是专门啊 专门这边的话就是把这些属性还分了两大类

02:58.130 --> 02:59.670
一个是指读属性

03:00.430 --> 03:01.210
有哪些

03:01.470 --> 03:03.510
一个是可读可写属性

03:03.770 --> 03:04.530
有哪些

03:04.790 --> 03:06.830
OK 好 那我们一个一个来看吧

03:07.350 --> 03:10.170
好 那首先的话是这个DOM对象

03:10.430 --> 03:11.950
相关尺寸和位置属性

03:12.210 --> 03:15.790
那首先的话分为什么 分为指读和可读可写

03:16.050 --> 03:17.330
把这个给你加个出

03:19.800 --> 03:21.580
哎呀 就是可读可写

03:22.560 --> 03:24.860
那首先的话我们来看一下这个指读

03:25.120 --> 03:26.720
那指读的话其实也挺多的

03:26.980 --> 03:28.960
对不对 有这个CLIENT WISE

03:29.220 --> 03:30.480
CLIENT HIT

03:30.740 --> 03:31.780
OVERSIT WISE

03:32.020 --> 03:32.920
OVERSIT HIT

03:33.180 --> 03:34.840
CLIENT TOP LEFT

03:35.100 --> 03:37.140
OVERSIT LEFT TOP

03:37.400 --> 03:38.940
SCRULE HIT WISE

03:39.720 --> 03:42.260
那这个比较多 所以我们把它放在一起

03:42.520 --> 03:43.540
做一个总结

03:44.060 --> 03:44.560
对吧

03:44.820 --> 03:46.880
好 那我们这边首先来看第一组

03:47.140 --> 03:51.480
第一组的话是CLIENT WISE和CLIENT HIT

03:52.560 --> 03:53.660
它指的是什么呢

03:53.920 --> 03:58.440
它指的是元素可视部分的宽度和高度

03:59.720 --> 04:02.040
什么叫做可视部分宽度和高度

04:02.300 --> 04:06.120
你看后面写的就是什么呢 就是这个PIDEN加CONTENT

04:06.880 --> 04:07.920
包不包含BORDER

04:08.940 --> 04:09.700
包不包含BORDER

04:09.960 --> 04:11.240
是不包含BORDER

04:12.000 --> 04:12.400
对不对

04:12.660 --> 04:14.560
好 那我们这边我们就直接把这个代码

04:15.080 --> 04:17.640
拿到我们这边WISE CODE里面

04:17.900 --> 04:19.440
因为这个代码比较简单

04:20.160 --> 04:22.460
好 然后这边的话Style

04:24.000 --> 04:25.020
把这个样式

04:25.780 --> 04:26.560
我们把它拿过来

04:29.660 --> 04:30.960
好 然后放到这里

04:31.720 --> 04:32.240
格式画一下

04:32.740 --> 04:34.780
好 然后下面 下面的话这边

04:35.040 --> 04:36.060
script

04:37.600 --> 04:38.640
然后这边

04:39.400 --> 04:40.680
这代码都非常简单

04:41.700 --> 04:42.980
我们这边简单看一下嘛

04:44.260 --> 04:45.920
首先这边是不是有个盒子

04:46.180 --> 04:49.380
对不对 ID为container 然后内名是container

04:49.800 --> 04:53.680
设置宽高是200 然后背景颜色是红色

04:54.200 --> 04:56.680
好 大家这边给了一个一项数的BORDER

04:56.940 --> 04:58.240
这边为了让这个BORDER明显

04:58.500 --> 04:59.520
我们这边给个5嘛

05:00.080 --> 05:00.800
5项数

05:01.060 --> 05:01.960
然后它MODEN是什么

05:02.400 --> 05:03.360
MODEN是吧 黑色

05:04.440 --> 05:04.840
对不对

05:05.100 --> 05:06.240
然后给了一个PIDEN

05:06.500 --> 05:07.520
PIDEN是10项数

05:08.020 --> 05:09.800
然后Margin Margin是20

05:10.320 --> 05:12.880
好 然后接下来这边 这边上就获取了这个盒子

05:13.140 --> 05:16.200
打印它的ClientWISE和ClientHeat

05:16.720 --> 05:18.000
好 那我们这边我们来看一下

05:18.980 --> 05:19.620
刷新

05:21.420 --> 05:22.380
把这个

05:23.140 --> 05:24.340
把这个也放到右边

05:25.900 --> 05:27.940
这样子方便观察一点

05:28.700 --> 05:29.740
好 我们这边我们来看一下

05:30.500 --> 05:31.000
多少

05:31.260 --> 05:32.040
是吧 220

05:32.540 --> 05:33.580
为什么是220

05:34.080 --> 05:34.940
为什么是220

05:35.200 --> 05:36.120
你把这个打开

05:38.660 --> 05:39.940
把这个打开

05:44.380 --> 05:45.660
这边怎么写的是

05:46.420 --> 05:47.460
520

05:47.700 --> 05:48.980
因为我没选中

05:49.500 --> 05:50.220
选中它

05:50.420 --> 05:50.940
OK

05:51.460 --> 05:52.480
为什么是220

05:52.740 --> 05:55.800
因为你这边宽高是200 然后接下来这边有什么

05:56.060 --> 05:57.080
所以这个PIDEN

05:57.600 --> 05:58.360
对不对 有PIDEN

05:58.620 --> 06:01.440
说它这边算的是哪个部分呢 算的是这个部分

06:01.700 --> 06:03.480
你注意我这边的话用这个

06:03.740 --> 06:04.760
红色的这个线

06:05.020 --> 06:06.040
标出了这个部分

06:06.300 --> 06:09.620
这个就是ClientWISE和ClientHeat

06:09.880 --> 06:11.420
也就是说Content

06:12.700 --> 06:14.760
Content加上你的PIDEN

06:15.520 --> 06:16.040
可不可以啊

06:16.800 --> 06:17.820
好 那下一个

06:18.280 --> 06:22.380
下一组的话是ObsetWISE和ObsetHeat

06:22.880 --> 06:23.660
它就是什么呢

06:23.920 --> 06:24.800
它就是把Border

06:25.200 --> 06:25.960
加进去了

06:26.480 --> 06:27.000
看到没有

06:27.240 --> 06:29.560
好 那我们这边我们就直接把这两行代码

06:30.060 --> 06:30.580
复制过来

06:32.910 --> 06:33.790
拿过来

06:34.710 --> 06:35.470
把这改一下

06:35.730 --> 06:38.030
当我们这边我们刚刚Border设置的是5

06:38.290 --> 06:41.050
所以这边就不应该是220了

06:41.310 --> 06:41.870
就应该是多少

06:42.630 --> 06:43.990
220

06:44.250 --> 06:45.970
然后左右是50

06:46.230 --> 06:47.510
是不是就是应该是230

06:48.530 --> 06:49.050
对不对

06:49.430 --> 06:50.630
就应该是230

06:51.130 --> 06:52.670
我们刚才那个也不3吧

06:53.950 --> 06:54.970
刚才那个也不3

06:55.230 --> 06:56.250
大家可以看到那个对比

06:57.030 --> 06:58.550
刚才刚才是这个是吧

06:59.590 --> 07:00.350
把拿过来

07:01.630 --> 07:02.650
放到这上面

07:04.190 --> 07:05.470
好 那我们这边我们来看一下

07:05.990 --> 07:06.490
走

07:07.770 --> 07:08.290
小心

07:08.790 --> 07:09.570
是吧230

07:10.070 --> 07:12.130
对不对为什么 因为它把这个Border加进去了

07:12.890 --> 07:14.690
Border你这边是吧 还有五项数

07:15.710 --> 07:16.210
看到没有

07:16.730 --> 07:17.750
你看第一组

07:18.090 --> 07:19.490
两组你是不是就学完了

07:20.010 --> 07:21.290
说这些东西很快

07:22.310 --> 07:23.330
主要它就是比较多

07:24.090 --> 07:25.130
你要就是把它

07:25.390 --> 07:28.450
区分一下 你如果是分散着学就容易计分

07:28.710 --> 07:30.250
说你需要这么一节课

07:30.770 --> 07:32.550
把它全部总结在一起

07:32.810 --> 07:33.830
然后接下来来看

07:34.850 --> 07:35.890
好 接下来下一个

07:37.150 --> 07:41.250
下一个是ClientTop和ClientLift

07:41.510 --> 07:45.090
这一对属性的话是用来读取元素的这个Border的

07:45.350 --> 07:46.630
这个宽高的

07:46.830 --> 07:47.870
那这个也很简单

07:48.130 --> 07:49.410
对不对 我把它复制过来

07:51.860 --> 07:53.140
复制过来 拿过来

07:53.400 --> 07:54.680
那这里就应该是多少

07:55.440 --> 07:56.820
这里是不是应该是5

07:58.260 --> 07:58.760
5

07:59.020 --> 08:01.840
对不对 因为我们Border的话这个宽度是5

08:02.360 --> 08:03.640
好 那我们这边我们来看一下

08:05.910 --> 08:06.410
刷新

08:06.670 --> 08:07.450
是不是就是5

08:07.950 --> 08:09.490
对不对 没有任何问题

08:10.250 --> 08:11.530
好 接下来下一个

08:12.050 --> 08:13.850
下一个的话是这个

08:14.370 --> 08:17.170
ObsetLift和ObsetTop

08:17.690 --> 08:18.450
这个是什么呢

08:18.670 --> 08:20.070
这个是获取

08:20.330 --> 08:21.730
当前元素

08:21.990 --> 08:25.070
离自己最近的 并且定了位的主线元素

08:26.330 --> 08:26.850
不不不

08:27.110 --> 08:29.670
这个是ObsetParent

08:29.930 --> 08:35.050
ObsetParent是获取自己离自己最近的 并且定了位的主线元素

08:35.550 --> 08:38.630
好 接下来ObsetLift和Top就是找什么呢

08:38.890 --> 08:42.210
就是找它距离它的这个元素 这个主线元素

08:42.470 --> 08:44.770
它的左边和上边的距离

08:45.530 --> 08:47.330
什么意思 这边我们来看个例子

08:48.130 --> 08:49.590
比如说我这边把这个拿过来

08:54.670 --> 08:55.690
把这个注射掉

08:56.970 --> 08:57.990
把这个拿过来

08:58.770 --> 09:02.090
拿过来之后 然后我们把这个样式我们把它改一下

09:02.610 --> 09:03.370
样式在这

09:06.550 --> 09:08.590
把之前那个把它注掉吧

09:12.600 --> 09:13.880
好 格式化一下

09:14.380 --> 09:15.680
好 我们这边我们先来看效果

09:16.440 --> 09:17.460
这边刷新

09:17.720 --> 09:19.520
OK 很简单的一个效果

09:20.020 --> 09:23.600
这边的话是有一个这个外层的这个负元素 这个负元素就是谁

09:24.120 --> 09:25.140
把这个代码

09:25.520 --> 09:26.680
拿过来结合着看

09:26.940 --> 09:29.240
这个负元素是不是就是这个这个container

09:30.000 --> 09:33.080
对不对 然后里面有一个什么的 里面有个小盒子叫做item

09:33.840 --> 09:36.920
那item它照理来说的话是不是应该是在这个位置

09:38.440 --> 09:40.760
是不是应该在这个位置啊 我把这个换个也是吧

09:42.280 --> 09:43.060
换成啥呢

09:43.840 --> 09:45.100
换成一个

09:45.360 --> 09:46.640
没那么赤眼的

09:47.160 --> 09:48.440
这个吧 Skyblue

09:50.240 --> 09:51.520
刷新一下 OK

09:52.240 --> 09:58.140
好 这边的话 照理说这个蓝色的盒子 他应该是在哪个位置啊 是不是应该是在这个位置啊

09:59.400 --> 10:01.960
对不对 应该是在这个位置 那他怎么跑到这来了

10:02.220 --> 10:04.260
原因很简单 我们这边

10:04.520 --> 10:06.060
这个container我们设置了什么

10:06.580 --> 10:08.120
是不是设置了一个相对定位

10:08.880 --> 10:11.960
然后接下来这个item我们设置它什么 是不是绝对定位

10:12.460 --> 10:15.020
绝对定位 然后接下来它这边就有个left值

10:15.800 --> 10:17.320
这边left值是多少 100

10:17.580 --> 10:18.100
透破

10:18.860 --> 10:19.900
这边是100

10:20.360 --> 10:23.500
对不对 好 那接下来这边介绍的这两个属性

10:23.760 --> 10:26.000
一个是什么 一个是offset parent

10:27.280 --> 10:28.680
这个他就是获取到谁的

10:29.080 --> 10:33.160
获取到当前元素立字级最新的 并且定了位的

10:33.920 --> 10:34.700
主线元素

10:35.460 --> 10:37.260
那谁是离他最新并且定了位的

10:37.780 --> 10:39.060
这不就是这个container啊

10:39.560 --> 10:42.120
所以你这边的话 你打印这个offset parent

10:42.380 --> 10:44.420
他就是获取到什么 获取到container

10:44.680 --> 10:46.220
那比如说你这边 你来看一下

10:47.000 --> 10:47.760
比如说我们这边

10:48.480 --> 10:54.620
挖一个item等于一个document.getElementById

10:55.380 --> 10:57.960
这边的话是item 是吧

10:58.720 --> 11:01.020
好 大家回头的话 这边log一下

11:02.300 --> 11:05.380
log一下谁呢 我不log item 我log他的这个

11:05.900 --> 11:06.780
这上面那个

11:08.460 --> 11:09.980
offset parent 是吧

11:10.500 --> 11:12.300
我们这边log这个

11:14.750 --> 11:17.050
OK 好来过来漏译 刷新

11:18.090 --> 11:19.370
看到没有 蓝老师谁

11:19.550 --> 11:20.870
是不是拿到了是container

11:21.870 --> 11:24.550
看到没有啊 好 然后接下来下一个

11:24.950 --> 11:27.590
下一组就是offset lift和offset top

11:28.030 --> 11:31.350
其实大家猜都猜到了 对不对 你应该猜都猜到了

11:31.610 --> 11:34.150
他获取了就什么字 获取了是不是就这个字

11:34.510 --> 11:37.670
你这边这个lift和什么 和这个什么top

11:38.350 --> 11:40.190
对不对 获取了就是这个字

11:40.590 --> 11:43.630
我这边让我就直接把拿过来啊 在这里是吧

11:46.110 --> 11:47.470
好 然后

11:48.350 --> 11:48.670
这边

11:51.230 --> 11:51.950
格式换一下

11:52.750 --> 11:53.710
啊 这个也是

11:54.270 --> 11:54.790
100

11:56.590 --> 11:57.870
好 我们这边刷新一下

11:58.630 --> 11:59.310
是不是100

12:00.270 --> 12:05.030
看到没有啊 这个的话就是这个offset和off lift

12:05.790 --> 12:07.310
offset和off lift

12:07.310 --> 12:10.270
offset lift和offset top

12:10.670 --> 12:11.430
啊 就是这一组

12:12.030 --> 12:16.310
都很简单 对不对 都非常非常简单 就是多啊

12:16.550 --> 12:17.270
就是比较多

12:17.950 --> 12:19.270
好 然后接下来最后一组

12:20.050 --> 12:21.730
最后一组的话

12:23.810 --> 12:26.250
最后一组的话是这个screw hit

12:26.850 --> 12:28.450
和screw wise

12:28.850 --> 12:29.890
好 我们来看一下这一组

12:32.370 --> 12:34.250
这一组的话那是指什么呢

12:34.730 --> 12:41.450
这两个属性是当前元素内部内容超出其宽度和高度的时候

12:41.970 --> 12:47.050
获取的是什么呢 获取的是它内部内容的实际宽度和高度

12:47.710 --> 12:51.830
如果没有超出高度和宽度 那它返回的元素

12:52.190 --> 12:54.870
就是返回它的什么呢 返回它的可视部分

12:55.350 --> 12:58.270
那也就是说和我们刚才介绍的那个client wise

12:59.030 --> 13:00.830
client hit是一样的

13:02.110 --> 13:03.550
然后比如我们这边 举个例子

13:05.310 --> 13:06.590
然后把这个注射掉

13:07.390 --> 13:09.030
啊 然后把这个打开

13:09.870 --> 13:10.830
然后

13:11.550 --> 13:12.470
先把这些注射掉吧

13:13.510 --> 13:14.750
把这些注射掉

13:15.570 --> 13:19.690
好 然后接下来我们这边打印这个client wise和client hit

13:20.090 --> 13:22.690
那这个打印出来是吧 220 220这个是刚才我们说的

13:23.170 --> 13:24.770
好 那接下来我们这边log一下

13:26.330 --> 13:26.770
log

13:27.450 --> 13:29.530
呃 这边的话是叫做这个screw

13:31.370 --> 13:33.130
screw hit

13:34.890 --> 13:39.290
那对应的是container点这个screw hit

13:40.050 --> 13:42.930
对吧 然后还有一个是screw wise

13:45.080 --> 13:45.920
对应的是这边

13:46.120 --> 13:47.320
screw wise

13:49.240 --> 13:52.280
screw wise 那目前来讲的话 我们的这个元素

13:52.840 --> 13:55.560
这个元素压根就没东西 它压根是不能滚动的

13:56.240 --> 13:59.320
对不对 它是不能够滚动的 啊 说说我们这边的话

14:00.440 --> 14:03.480
你获取到的 呃 两组是一样的 都是什么呢

14:04.080 --> 14:09.240
都是220 啊 这个时候是没有区别的 但是一旦我往里面添加一些东西

14:09.880 --> 14:12.040
比如说我们这边的话 给它添加一个

14:13.520 --> 14:14.400
比如来个100嘛

14:15.380 --> 14:18.780
格式化一下 我们这边是不是有内容了 好 然后再这边刷新

14:19.460 --> 14:23.740
刷新的话 然后你看这边 让我的这个div是不是可以滚动的了

14:24.700 --> 14:28.460
对不对 可以滚动的时候 然后接下来这边 你看区别是不是就出来了

14:29.980 --> 14:34.620
宽度首先没变 因为宽度的话 它这边是不变的 高度 你看一下主要是高度

14:36.220 --> 14:41.540
高度这边它就变成什么了 所以变成746了 因为它始终获取的是你整个

14:42.120 --> 14:43.400
什么呢 整个就是

14:44.720 --> 14:46.240
内容区域的高度

14:47.120 --> 14:54.240
没有吗 你现在内容区域明显就是不止220嘛 对不对 所以它最终的话 这个高度你就可以获取到通过这个screw hit

14:55.040 --> 14:55.840
啊screw hit

14:57.120 --> 15:03.920
ok 好 这就是给大家介绍的这个指读属性啊 这么极左 五组是吧 这么五组

15:04.480 --> 15:08.720
大家可以就是把视频暂停了 然后自己的话在脑子里面过一下

15:09.380 --> 15:09.540
啊

15:10.580 --> 15:18.700
好 然后接下来的话是可读可写 刚才是指读 指读代表着什么 代表着你不能改它的值 你只能获取值

15:19.060 --> 15:21.740
但是你不能改 然后接下来的话是可读可写

15:23.020 --> 15:27.580
可读可写的话 这边给大家介绍两个 一个是screw top

15:27.980 --> 15:28.700
screw left

15:30.380 --> 15:37.860
他是什么呢 这个这对属性是可读写的 他指的是当元素中内容超出高这个宽高的时候

15:38.240 --> 15:48.320
元素被卷起的高度和这个宽度 你注意哦 是元素被卷起的高度和宽度 那比如说我们这边的话 我们来看一下

15:49.280 --> 15:55.160
呃 这边的话我得给这个container绑一个事件了 我们现在这个container是不是就是可以滚动的

15:56.040 --> 15:59.640
对不对 这边可以滚动 好了 接下来我这边的话我要给这个container

16:00.200 --> 16:06.160
我要给他绑定一个这个事件 绑定一个滚动事件 所以来到这边container

16:07.920 --> 16:20.270
点这个onscrew 等于一个这个方形 好 然后在这里面我们来打印

16:22.350 --> 16:23.910
打印这个screw

16:25.710 --> 16:26.430
screw top

16:28.350 --> 16:36.320
然后还有什么呢 还有这个screw left 呃 这边 top

16:38.280 --> 16:43.120
left ok 好 他这边的话你注意 他获取的是

16:43.840 --> 16:53.040
元素被卷起的高度和宽度啊 那我们这边我们来看一下 你这个screw啊 这个screw会在我滚动的时候 他就会不停的出发

16:53.380 --> 16:54.340
那我们这边我们算讯一下

16:55.180 --> 17:01.860
啊 一开始是不是就是没有打印出来 为什么 因为你这边的话还没开始滚动 还没开始滚动 他是不是没有出发那个事件

17:02.340 --> 17:06.340
好 然后接下来我鼠标移过来 我开始滚动 你注意滚动一点点

17:07.100 --> 17:12.700
看到没有 是不是出来了 是不是出来了 你看这边的话 我的screw top是不是从1

17:13.420 --> 17:15.380
2 3 4

17:16.820 --> 17:23.260
一点一点的新增 对不对 为什么 因为我的这个screw top 我在往这个往上面滚动的时候 这边的话这个

17:23.980 --> 17:26.180
呃 被卷起的这个高度是不是就有值了

17:27.100 --> 17:32.220
对不对 被卷起的高度就有值了啊 所以这边从1开始一直新增 让我这边一直走

17:32.980 --> 17:38.460
啊 这边就应该是一直打印走 看到没有 走走走 那最终的话 这边被卷起

17:38.920 --> 17:46.440
526啊 被卷起526像说 让我这边那就是到底了 对吧 让家你往上走 他这个值是不是又慢慢变小

17:48.080 --> 17:54.520
看到没有 啊 说我们这边那就是以前哈 以前呃 带学生做过一个这个demo 就是刚才我说的那个

17:55.080 --> 17:59.080
就这边那有个按钮 点击这个按钮 让家他就回到这个页面的最上面

17:59.680 --> 18:07.760
我最早的话就是 用什么来做呢 最早我就通过这个screw hit 把这个screw hit啊 设置为这个0

18:08.960 --> 18:11.960
结果后面才发现啊 这个东西是一个什么的 是个指读

18:12.840 --> 18:18.000
所以怎么设置都是没有效果的 只能通过什么呢 只能通过screw top来做

18:19.040 --> 18:24.960
对不对 只能通过这个来做啊 这是啊 这个screw topscrew left

18:25.920 --> 18:28.800
好 然后接下来下一个 下一个的话是这个

18:30.080 --> 18:36.600
嗯 这个dorm节点 然后点style 然后点叉叉叉属性 那这个的话大家应该是知道的

18:37.500 --> 18:41.980
对不对 比如说我获取某一个dorm节点 比如说我这边的话 我可以获取

18:43.380 --> 18:48.340
比如就拿container来说吗container 说获取了这个节点 然后接下来这边的话可以点

18:49.300 --> 18:55.540
style 是获取他的这个style 对只不过他是这个style的话 他是类嵌的 比如说我们这边的话

18:56.380 --> 18:56.700
呃

18:58.060 --> 19:04.530
在这边我们给他加一个 style 啊 比如说这边给他加一个这个宽度

19:08.370 --> 19:10.610
宽度给个我们上面是多少

19:11.250 --> 19:13.570
上面是200是吧 那我们这边给给个400

19:14.770 --> 19:24.450
400px 啊 这边刷新一下 好了 现在的话他这个宽度是不是更宽了 好了 接下来的话 你在这边的话 你就可以通过什么了 可以 style 点

19:25.610 --> 19:27.490
wise 是不可以获取得到

19:28.370 --> 19:33.250
对不对啊 我们这边我们来获取一下 这个大家应该是用过很多次了哈 这个我就不多说了

19:34.090 --> 19:39.130
这边刷新 是不是400像说啊 对不对 能够获取得到

19:40.110 --> 19:40.630
ok

19:42.150 --> 19:50.950
好 然后这是关于整个这个断膜啊 断膜对象相关的这个尺寸和位置的这个属性就都总结在这儿了

19:52.150 --> 19:58.750
ok啊 你这边的话可以自己 如果你还不熟悉的话 你要自己练一下的话 你可以把视频暂停了 可以练习一下

20:00.390 --> 20:05.790
好 然后接下来我们这几个还有一个 还有一个要研究的 是什么呢 是关于这个

20:06.330 --> 20:06.810
event

20:08.010 --> 20:09.570
event 事件对象

20:10.770 --> 20:18.050
啊 这个事件对象的话 是在事件触发的时候 是不是自动传入到这个事件处理函数里面的

20:18.970 --> 20:24.930
对不对 那这个event事件对象的话 他也存在很多的这个属性 我们通过这些属性

20:25.610 --> 20:32.170
啊 这些属性的值 我们可以获取到本次事件 一些更详细的一些信息

20:33.150 --> 20:40.150
那么其中有些属性就是什么了 其中有些属性就是这个 关于这个位置属性的 所以我们这边让我们一起来看一下

20:41.750 --> 20:48.150
好 首先的话第一组 第一组的话要介绍的是这个client x和client y

20:48.870 --> 20:52.030
这个的话 大家也是应该是用过很多次的 我们来看一下

20:53.110 --> 21:01.350
这对属性的话 他是当事件发生时 鼠标点击的位置 相对于浏览器可视区的

21:01.890 --> 21:07.810
作标 他的参考点是什么的 参考点是浏览器的左上角 也就是说零零的这个位置

21:08.530 --> 21:15.730
啊 也就是说你这边的话 不管这个浏览器窗口大小如何变化 不会影响这个点击位置的这个作标

21:16.290 --> 21:20.450
那我们这边我们来看一下 我这边就直接把这个代码拿过来啊

21:22.450 --> 21:27.010
这边呢 其实上面没咋变 我看一下上面是不是没咋变 这边的话200

21:27.870 --> 21:30.590
我这边没咋变啊 这边呢 就是给了一个

21:31.710 --> 21:40.040
把那个默认的margin排定清楚了 排定清楚了 ok 好 然后下面 下面的话 给这个container

21:40.560 --> 21:42.640
绑定了一个点击事件

21:44.720 --> 21:53.800
把这些注射掉吧 给他绑定了一个点击事件 点击事件 然后接下来我们这边我们来看一下 刷新

21:54.620 --> 21:57.740
ok 好了 接下来我这边让我点击

21:58.620 --> 22:03.580
看到没有 这边那是不是就是有个432角 那这样我这边我点击这

22:05.020 --> 22:08.540
20 20为什么 这边的话我给了一个

22:09.820 --> 22:10.220
margin

22:11.140 --> 22:12.340
margin这边是不是

22:13.140 --> 22:19.260
20啊 这边是不是叫20啊 所以我刚才点的是哪个点 点击的是这个点 这不最左上角这个点

22:19.880 --> 22:24.720
对不对 那你看他这边相对于的就是哪里 说浏览器的这个角

22:25.720 --> 22:27.320
看到没有 这就是client

22:29.080 --> 22:38.360
这个client x和client y 啊 相对于是浏览器可视区的坐标 也就是浏览器左上角的坐标

22:39.120 --> 22:41.440
看到没有啊 ok

22:43.040 --> 22:48.160
好 然后下一个 下一个是这个screen x和screen y

22:48.660 --> 22:51.260
他就是相对于什么呢 他就是相对于屏幕了

22:52.340 --> 22:58.300
就是你的这个屏幕的这个左上角啊 那我们这边我们来举个例子 呃 比如说

22:59.300 --> 23:04.420
我就直接把这儿拿过来哈 把这儿拿过来

23:05.980 --> 23:06.980
然后放到这里

23:08.500 --> 23:20.350
刚才那个是 刚才那个是client x 那我这边我记录一下 这边的话是client

23:21.170 --> 23:22.050
x是y

23:23.610 --> 23:25.450
对吧 好 然后接下来这里

23:26.850 --> 23:30.570
这里的话是screen 其实你通过名字都可以区分

23:31.210 --> 23:36.450
screen是不是就是屏幕的意思啊 screen x y 好 那接下来我们这边我们这边刷新

23:38.370 --> 23:42.930
好 我们这边呢 我们点击 点击的话你这边明显看得到啊 x没变

23:43.830 --> 23:51.870
x的话是不是仍然是20啊 为什么 因为这边无论是你到浏览器还是到这个屏幕 这边是不是都是20啊 但是这个y y就不一样

23:52.350 --> 23:55.150
你对于client y来讲的话 是不是就这段距离

23:56.470 --> 24:00.910
对了 但是对于你那个整个这个屏幕来讲的话 是不是一直到这上面去了

24:01.670 --> 24:05.230
啊 那这边的话你把这个浏览器你把它这样子拖动一下 它更明显

24:06.110 --> 24:07.710
拖动一下 我们这边刷新

24:08.550 --> 24:09.710
然后我还是点击这个角

24:10.910 --> 24:11.110
走

24:11.410 --> 24:18.530
看了没有 那现在的话是不是就非常明显了 你这个client x y始终是相对于那个点是相对于这个点

24:19.410 --> 24:24.410
对不对 然后接下这个screen x y 它是相对于你屏幕的最左上角

24:25.530 --> 24:28.650
没有没有啊 这是关于这个screen x y

24:30.610 --> 24:35.890
好 下一个 下一个的话是这个offset x和offset y

24:36.670 --> 24:39.510
它是什么呢 我们来看一下 这一对属性

24:41.770 --> 24:50.130
是指当事件发生时 鼠标点击位置 相对于该事件源的位置

24:51.210 --> 24:56.770
看到没有 就是你点击了这个动物元素 它是以这个动物元素的左上角为原点

24:57.410 --> 24:58.410
那我们这边我们来试一下

24:59.450 --> 25:05.720
那比如说这边 好 然后这边还是打印这个

25:07.080 --> 25:09.000
好 我们这边就直接offset

25:09.960 --> 25:10.600
acce

25:12.840 --> 25:14.240
offset x

25:15.920 --> 25:17.880
然后offset y 是吧

25:19.160 --> 25:23.320
offset y 好吧 这边改一下 这边呢是offset

25:24.800 --> 25:27.360
acce y 好 那我们这边刷新

25:28.760 --> 25:34.200
好 然后接下来这边 同样是点击左上角 走 你看这边是不是一零

25:35.040 --> 25:36.800
可不可以啊 为什么 因为它是以这个点

25:37.680 --> 25:40.640
以这个点为参考点 可不可以啊 这边啊

25:41.680 --> 25:43.560
零零 点出来了 零零

25:44.320 --> 25:48.000
它是以这个点 其实它就是什么 就是参考点不一样

25:48.880 --> 25:52.920
对不对 可line是以这个点

25:53.560 --> 25:57.280
然后架offset xy 它是以就是你这个动物元素的点

25:57.840 --> 26:01.000
然后架这个screen screen的话 就是你这个屏幕的这个

26:01.760 --> 26:02.760
最左上边的这个点

26:03.600 --> 26:06.560
是不是就参考点不一样而已 对不对 其实没什么复杂的

26:08.560 --> 26:09.480
好 然后最后一组

26:10.420 --> 26:15.380
最后一组的话是这个配级x和配级y 我们来看一下

26:16.220 --> 26:22.820
该属性是事件发生时 鼠标点击的位置 相对于页面的位置

26:23.620 --> 26:26.580
啊 如果你这个浏览器窗口没有这个滚动调时

26:27.380 --> 26:33.180
该属性和这个client x和y是等价的 也就是说它是以哪个为参考点

26:33.460 --> 26:38.380
是不是以这个为参考点 对不对 它和client xy是等价的 但如果有

26:39.620 --> 26:40.940
有这个滚动调

26:41.700 --> 26:48.940
那你这边的话就是通常啊 你的这个配级x或者说配级y 它是大于这个client x和client y的

26:49.420 --> 26:54.540
为什么呢 因为你页面还存在被卷起来的宽度和高度

26:55.500 --> 26:56.620
这个也非常好理解吧

26:57.780 --> 27:00.940
对吧 这个应该也非常好理解 比如我们这边我们举个例子

27:01.940 --> 27:06.420
呃 我这个例子的话是给这个body 给body 然后加了一个

27:07.980 --> 27:09.180
我看看我这边怎么写的

27:10.060 --> 27:11.220
啊 给这个body

27:12.740 --> 27:18.860
加了一个这个高度 我这边给body来加一个高度

27:21.550 --> 27:26.390
高度给了一个5000 那给了一个5000之后 然后接下来的话 我这边刷新一下

27:27.870 --> 27:29.950
好 那现在呢 这边是不是可以滚动了

27:30.830 --> 27:33.550
对不对 可以滚动之后 然后接下来的话 我们这边

27:35.270 --> 27:39.990
打印一下 打印一下这个配级x y

27:42.230 --> 27:44.070
啊 这边 下个帽

27:48.980 --> 27:52.220
好 然后这里的话是配级x配级y

27:56.990 --> 27:59.750
ok 好 那现在我们这边重新来啊 重新来

28:01.230 --> 28:04.070
好 然后接下来的话 我这边让我点击一下

28:04.950 --> 28:09.230
你看现在的话这个client x y和配级x y 是不是相等的

28:09.670 --> 28:12.950
对不对 我刚才点击了这个点 随便点了 点了一个点

28:13.430 --> 28:16.350
是不是他们是相等的 对不对 但是我这边让我一旦我这边滚

28:16.970 --> 28:20.970
好 这边应该是滚动这个页面 页面滚动一下 好 接下来走

28:22.530 --> 28:26.650
你看 那现在的话 这个值是不是就不一样了 好吧 清空一下

28:27.330 --> 28:31.690
清空一下再重新点 你看 现在这个值是不是就不一样了 x是一样

28:32.130 --> 28:35.650
因为我这个页面不能这个左右滚动 对不对 但是y就不一样了

28:36.330 --> 28:39.130
y的话 它这边始终是相对于哪个点 是不是这个点

28:40.210 --> 28:42.330
对不对 就是这个client client y

28:42.830 --> 28:46.670
client y始终是相对于这个点的 所以我这边让我比如说我点击这

28:50.120 --> 28:51.120
然后这边我点击这

28:51.960 --> 28:56.600
你看 这边的话这个client y 是不是就是4 因为它是什么 它是相对于这个点

28:57.040 --> 29:02.000
但是这个配级y就不一样了 配级y的话 它会把你就是卷起的部分

29:02.720 --> 29:06.200
把它算进去 所以你看这边配级y它是多少 是不是152

29:07.440 --> 29:11.000
看到没有 说这个的话就是这个配级x和配级y

29:11.980 --> 29:18.780
它这个会存会把什么呢 会把这个卷起部分的宽度和高度计算进去

29:19.820 --> 29:28.420
明白没有 OK 这就是关于整个这个尺寸和位置啊 我们这堂课的话就对它进行了一个总结

29:29.140 --> 29:33.140
啊 这个的话 其实你把这一部分 你把它好好看一下

29:34.460 --> 29:40.940
然后下来的话 无论他怎么考你 对吧 无论是这个client y 还是overset y 它考不到你的 因为这个东西其实

29:41.500 --> 29:49.620
它不难 它仅仅是什么呀 是不是仅仅是多而已 对不对 但是多的话你这样子分一组一组的来进行一个记忆

29:50.660 --> 29:54.100
其实的话一点也不难 对不对一点也不困难

29:54.900 --> 30:01.500
好吧 这个的话 下来自己再看一看啊 这就可能我们就先到这里 好 再见

