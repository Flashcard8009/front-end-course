WEBVTT

00:00.560 --> 00:03.120
大家好 我是谢老师

00:03.380 --> 00:06.960
这些课的话我们来看一下 关于这个圆形和圆形链

00:07.480 --> 00:12.840
这个是在JS你面试的时候 考察到这个JS部分指示点的时候

00:13.100 --> 00:15.920
基本上必会被问到的一个问题

00:16.180 --> 00:18.220
比如这边 你看这个是美团

00:18.740 --> 00:20.280
2019年的一道面试题

00:20.780 --> 00:24.120
所以说你对JS中圆形和圆形链的理解

00:24.620 --> 00:25.900
第二个问题就是

00:26.160 --> 00:29.740
对一个构造函数实力化后 它的圆形

00:30.220 --> 00:35.880
这里圆形链指向什么 它就是反正就是链条嘛 一直往上指指向什么

00:36.140 --> 00:41.260
好 那我们这边的话 我们就要来介绍一下 关于这个圆形和圆形链

00:42.020 --> 00:45.620
好 最早的话这个布兰登爱奇就这个哥们

00:45.880 --> 00:49.200
他在设计这个javascript这个语言的时候

00:49.700 --> 00:54.580
他借鉴了什么呢 借鉴了这个self和这个small talk

00:54.840 --> 00:55.860
这两门语言

00:56.120 --> 00:59.180
这两门语言他就是什么呢 他就是基于圆形的

00:59.940 --> 01:02.500
这两门语言就是基于圆形的

01:02.760 --> 01:06.340
所以我们的JS其实也是什么呢 也是一门基于

01:06.600 --> 01:07.620
圆形的语言

01:08.140 --> 01:10.960
他为什么没有就是借鉴向java那种

01:11.220 --> 01:13.520
传统的这个面向对象的这种语言呢

01:13.780 --> 01:14.800
之所以

01:15.060 --> 01:16.840
他选择这个圆形

01:17.100 --> 01:18.120
而非这个

01:18.380 --> 01:19.140
面向对象

01:19.920 --> 01:24.520
就是那种传统的那种面向对象系统 而是选择这种基于圆形的这种

01:24.780 --> 01:26.580
对象系统 这里应该叫做对象系统

01:27.560 --> 01:30.360
之所以选择基于圆形的这种对象系统

01:30.620 --> 01:35.740
是因为这个布兰登爱奇他一开始的时候 他就没打算加入类

01:36.260 --> 01:38.420
我们知道其他的比如说像java呀

01:38.700 --> 01:39.860
cjava呀

01:40.100 --> 01:41.060
cjaja呀

01:41.300 --> 01:44.060
这种什么标准的这种面向对象的语言

01:44.340 --> 01:48.540
对不对 那面向对象的语言里面有个很重要的概念就是类

01:48.820 --> 01:51.820
所有的对象都是从类实力化而来的

01:52.080 --> 01:53.780
但是这个布兰登爱奇

01:53.780 --> 01:59.660
他当时在设计这个java的时候 他就没有打算想要加入这个类的概念

02:00.440 --> 02:04.020
说他在设计这个对象系统的时候 他就是借鉴了这个self

02:04.280 --> 02:05.820
和这个smalltalk

02:06.080 --> 02:09.660
选择什么呢 选择基于这个圆形的

02:09.920 --> 02:10.680
对象系统

02:12.490 --> 02:15.310
而他之所以这么设计的话 是因为就是

02:15.570 --> 02:17.870
java他设计的这个初中

02:18.130 --> 02:20.430
就是为非专业的开发人员

02:20.950 --> 02:23.250
他就是一般就是网页设计者嘛

02:23.710 --> 02:24.990
就是不像那种

02:25.250 --> 02:26.530
存那个

02:26.790 --> 02:28.070
就是那种

02:28.830 --> 02:32.670
那个什么程序开发人员啊 比如写ca啊 写java的这种

02:32.930 --> 02:34.470
这种软件开发人员

02:34.730 --> 02:35.990
而是什么呢 而是

02:36.250 --> 02:38.310
提供给这种网页设计者

02:38.570 --> 02:40.350
提供给他们的一个这个工具

02:40.610 --> 02:43.690
当然现在的话这个java发展成什么样子 大家也

02:43.950 --> 02:44.450
知道了

02:44.710 --> 02:46.750
对不对 现在这个java的话基本上

02:47.010 --> 02:48.030
你去看那个

02:48.290 --> 02:53.150
ECMOScript 就是ES的标准 他第一句话他就说的是

02:53.450 --> 02:54.250
这个

02:54.490 --> 02:57.810
ECMOScript 他是一门通用的编程语言

02:58.070 --> 03:00.110
就现在的话已经不是脚本语言了

03:00.370 --> 03:02.930
以前最早的话他的定位就是一个脚本语言

03:03.190 --> 03:05.750
就是一个简单的 实现一些简单的功能

03:06.010 --> 03:07.530
做个什么弹窗啊

03:07.790 --> 03:10.350
做个什么这个图片的这个

03:10.610 --> 03:13.430
动过来动过去啊 做些这些效果

03:13.690 --> 03:15.730
现在的话接识就不一样了

03:17.270 --> 03:21.370
而这因为是这个样子 说说我们接识中这个原型和原型链

03:21.830 --> 03:24.390
他就是我们这门语言的一个最大的特点

03:24.650 --> 03:26.450
因为你整个这个对象系统

03:26.710 --> 03:28.490
是不是就是基于原型和原型链的

03:29.010 --> 03:30.030
说说经常的话

03:30.290 --> 03:32.850
这个面识观也会围绕这个原型和原型链

03:33.110 --> 03:34.370
来进行一个提问

03:34.630 --> 03:36.930
好 这边再来重申一遍

03:37.190 --> 03:40.010
我们接识是一门基于原型的语言

03:40.770 --> 03:44.870
对象的产生通过什么呢 通过原型对象而来

03:45.650 --> 03:46.150
看一看

03:46.410 --> 03:47.430
通过原型对象

03:47.690 --> 03:50.770
就每一个对象他有一个什么呢 有一个原型对象

03:51.130 --> 03:52.310
通过原型对象

03:52.570 --> 03:54.870
构建了我当前的这个对象

03:55.630 --> 03:57.670
我这边的话举了个例子 让大家来

03:57.930 --> 03:58.710
体会一下

03:59.210 --> 04:04.850
就在这个耶稣舞里面 他提供了一个这个方法 这个方法叫做Object.create

04:05.370 --> 04:06.650
通过这个方法的话

04:06.910 --> 04:09.210
我们就可以来创建一个这个对象

04:09.470 --> 04:11.250
我们这边我们把这个来看一下

04:15.640 --> 04:16.900
来到这边

04:17.160 --> 04:20.740
这边首先我们比如说我们创建一个对象 哇一个这个

04:21.000 --> 04:21.520
Person

04:22.040 --> 04:23.560
等于一个

04:24.280 --> 04:27.600
好 这边的话 然后我们就随便写写点属性 比如人

04:28.120 --> 04:29.920
有两条胳膊 是吧

04:30.180 --> 04:31.960
然后接下来有两只腿

04:32.220 --> 04:32.980
Next

04:33.500 --> 04:34.520
OK

04:34.780 --> 04:36.060
很简单的一个这个对象

04:36.320 --> 04:37.600
好 然后接下来的话

04:37.860 --> 04:38.880
耶稣舞里面

04:39.140 --> 04:42.460
提供了一个什么呢 提供了一个Object.create

04:44.240 --> 04:46.300
C-R-E-A-T-Create

04:47.320 --> 04:50.140
通过这个方法的话 我们可以克容一个对象

04:50.400 --> 04:51.920
比如说我们这边把这个Person

04:52.380 --> 04:53.660
我们把它传进去

04:53.920 --> 04:57.500
传进去之后呢 它就会反回一个什么呢 反回一个新的对象

04:57.760 --> 04:59.040
比如我们这边叫做张三

05:00.320 --> 05:03.140
好 那既然我们这边把这个张三 我们把它打印出来一下

05:03.900 --> 05:04.660
张三

05:05.180 --> 05:05.700
OK

05:05.960 --> 05:06.980
然后

05:08.520 --> 05:09.800
Load index

05:11.320 --> 05:14.400
好 你这边这边的话这个张三我们打印出来可以看到它是什么

05:14.660 --> 05:15.680
它是不是空的

05:15.940 --> 05:18.500
对不对 但其实它这个属性是有的

05:18.760 --> 05:20.040
我们这边我们来看一下

05:20.500 --> 05:24.080
张三点Arms 看到没有 是不是已经弹出来了

05:24.600 --> 05:25.360
是不是二

05:25.880 --> 05:26.380
对不对

05:26.640 --> 05:28.180
好 然后接下来的话 这边

05:28.960 --> 05:29.980
这个Lex

05:32.280 --> 05:33.300
好 走

05:33.560 --> 05:34.840
也是二 看到没有

05:35.100 --> 05:37.660
那我们这边就成功的对这个Person这个对象

05:37.920 --> 05:39.700
进行了一份克龙

05:39.960 --> 05:42.780
克龙的对象 然后存储在这个张三

05:43.040 --> 05:46.100
这里面 我们这边打印张三的ArmsNex

05:46.360 --> 05:47.380
你可以看到这边

05:47.640 --> 05:48.400
是不是都是出来了

05:48.800 --> 05:50.920
对不对 那为什么张三我打印出来是空的呢

05:51.940 --> 05:53.220
诶 大家思考一个问题

05:53.720 --> 05:55.520
为什么张三打印出来是空的呢

05:55.780 --> 05:56.800
原因很简单

05:57.060 --> 05:58.580
这边的话这个Person

05:59.100 --> 06:03.960
Person这个对象 其实它是作为就是我们这个创建出来对象的什么呢

06:04.220 --> 06:05.500
圆形对象

06:05.760 --> 06:06.260
啊

06:06.520 --> 06:07.560
用我这边写一下

06:07.820 --> 06:08.580
就是Person

06:09.340 --> 06:10.120
实际上

06:12.520 --> 06:13.280
实际上

06:13.540 --> 06:14.520
就是

06:15.080 --> 06:16.100
张三

06:16.620 --> 06:17.120
这个

06:17.380 --> 06:18.400
对象的

06:18.860 --> 06:20.140
圆形

06:20.400 --> 06:20.900
对象

06:21.680 --> 06:22.180
看到没有

06:22.440 --> 06:25.780
啊 说说我们这边我们在打印这个张三的时候打印出来是什么呢

06:26.040 --> 06:27.320
打印出来是空的

06:27.580 --> 06:29.620
但是我打印这个张三点Arms

06:29.880 --> 06:31.400
我这个对象确实是没有

06:31.660 --> 06:33.200
对吧 刚才大家也看到了

06:33.460 --> 06:34.220
出来是空的

06:34.480 --> 06:35.500
那我可以干嘛呢

06:35.760 --> 06:37.800
我可以去我的圆形对象上面去找

06:38.060 --> 06:39.340
我的圆形对象就是谁

06:39.600 --> 06:40.620
是不是就是这个Person

06:41.380 --> 06:41.900
对不对

06:42.160 --> 06:44.460
就是这个Person 那我这边打印出来啊这个

06:44.720 --> 06:46.000
张三点Arms

06:46.260 --> 06:48.040
它顺着它的这个圆形对象上面去找

06:48.240 --> 06:50.040
是不是这边就找到这个Arms2

06:50.300 --> 06:51.320
Lex2

06:51.840 --> 06:52.340
对不对

06:52.600 --> 06:54.140
你看这边就是一个这个

06:54.400 --> 06:56.700
圆形对象的一个这个快速的这个体验

06:57.200 --> 07:00.280
啊 我们这边要通过Object点Create方法

07:01.040 --> 07:02.020
创建了一个

07:02.280 --> 07:02.840
新的对象

07:03.100 --> 07:04.640
然后既然这边传入了什么呢

07:04.900 --> 07:05.800
传入了它的

07:06.060 --> 07:06.940
圆形对象

07:07.200 --> 07:07.700
看到没有

07:10.110 --> 07:12.910
啊 然后接下来的话我们这边还可以这个样子

07:13.170 --> 07:14.710
我们打印一下

07:15.470 --> 07:17.770
打印一下张三的圆形对象

07:17.970 --> 07:20.010
我怎么能够访问到它的圆形对象呢

07:20.270 --> 07:21.570
好 这边的话可以通过

07:22.070 --> 07:24.370
下滑线下滑线portal

07:25.910 --> 07:27.190
啊 通过这个属性

07:27.450 --> 07:30.770
可以访问到它的这个圆形对象 那我们接下来我们这边

07:31.550 --> 07:32.570
出来 你看

07:32.830 --> 07:35.130
是不是就是这个Person这个对象

07:35.890 --> 07:38.210
看到没有 那你甚至的话你这边可以打印一下

07:38.470 --> 07:41.010
是否全等于Person

07:41.270 --> 07:42.810
那这边返回的肯定是什么

07:43.330 --> 07:44.350
是不是肯定是True

07:45.110 --> 07:45.610
对不对

07:45.870 --> 07:46.910
啊 肯定是True

07:49.060 --> 07:51.420
然后这个Object.create

07:51.680 --> 07:54.060
这个方法你除了就是第一个参数

07:54.320 --> 07:57.020
第一个参数 传入它的这个圆形对象以外

07:57.280 --> 07:58.660
它还接受第二个参数

07:59.180 --> 08:02.460
第二个参数就是什么呢 第二个参数就是这个属性

08:02.720 --> 08:03.420
描述符

08:03.680 --> 08:06.360
啊 不知道什么是属性描述符的同学

08:06.620 --> 08:09.160
你我建议你先去把那个属性描述符看了

08:09.420 --> 08:11.460
我这边我就不解释什么是属性描述符了

08:11.720 --> 08:13.260
我这边只给你记录一下

08:13.520 --> 08:14.280
就是

08:15.560 --> 08:16.580
第二个参数

08:17.560 --> 08:20.660
Object.create

08:21.260 --> 08:21.860
方法

08:22.620 --> 08:25.760
接受第二个参数

08:26.020 --> 08:29.660
是什么呢 属性描述符

08:30.120 --> 08:32.160
啊 那我在这边的话我就可以设置什么呢

08:32.420 --> 08:34.160
我可以设置比如说它的Value

08:35.220 --> 08:39.660
啊 比如说我设置这个张三 张三的话他这边还有一个字Name

08:40.080 --> 08:42.260
Name的话他这边 啊 这里的话

08:42.520 --> 08:44.460
他第二个参数应该是一个对象

08:45.440 --> 08:46.900
应该是对象

08:50.630 --> 08:52.670
应该是对象

08:52.830 --> 08:54.970
啊 然后该对象里面

08:55.690 --> 08:57.130
对象里面

08:57.570 --> 08:58.270
呃

08:58.770 --> 08:59.430
可以

09:00.190 --> 09:04.430
可以设置多个箭子队

09:07.160 --> 09:10.040
可以设置多个箭子队

09:10.600 --> 09:12.240
啊 然后每个箭

09:13.300 --> 09:14.640
每个箭

09:15.900 --> 09:19.840
就是新对象的属性

09:20.160 --> 09:21.240
啊 然后接下来

09:21.500 --> 09:23.040
呃 所对应的值

09:23.800 --> 09:25.600
所对应的值

09:26.100 --> 09:28.920
设一个这个属性描述符

09:29.940 --> 09:33.780
属性描述符啊 这个样子的啊 比如我们这边

09:34.040 --> 09:38.140
我们这边的话是不是就创建一个新的对象 但是新的对象我们刚才打印出来 大家也看到了

09:38.400 --> 09:38.900
是不是空的呀

09:39.160 --> 09:41.460
好 那现在我给他添加一个Name属性

09:41.720 --> 09:44.280
好 然后加这个Name属性对应的值是一个什么呢

09:44.540 --> 09:48.120
是一个属性描述符啊 那我这边我就可以设置Value

09:48.640 --> 09:49.140
对吧

09:49.360 --> 09:51.400
啊 这个这个叫做张三

09:52.160 --> 09:53.960
然后接下来他这边呢 还有就是H

09:55.240 --> 09:58.820
也是一个属性描述符啊 这边我们就设一个Value就可以了

09:59.080 --> 09:59.840
比如说

10:00.100 --> 10:00.620
18

10:01.380 --> 10:05.220
那回头你这边再来打印这个张三的时候 我们来看一下

10:09.270 --> 10:11.070
这边的话 张三

10:12.870 --> 10:14.910
呃 我看一下这边加上去没有啊

10:15.170 --> 10:15.950
这边Name

10:17.470 --> 10:18.750
这边是不是加上去了

10:19.510 --> 10:20.030
对不对

10:20.490 --> 10:23.050
加上去了 这边打印张三他为什么是空的呢

10:23.310 --> 10:24.090
啊 我看一下

10:26.290 --> 10:30.650
啊 这边的话应该是这个样子啊 应该是把这个Enumber加上

10:31.410 --> 10:32.690
这边让我让它是一个True

10:32.950 --> 10:33.970
好 我们这边我们来试一样

10:34.230 --> 10:34.990
把这个清空

10:35.510 --> 10:36.790
NodeIndex

10:37.290 --> 10:39.090
啊 这边这边把这个Name去掉

10:40.370 --> 10:41.130
呃 走

10:41.390 --> 10:42.770
哎 看到没有 是不是出来了

10:43.170 --> 10:45.490
对不对啊 这边把这个Enumber加上

10:46.510 --> 10:47.530
把这个属性

10:49.070 --> 10:49.830
是True

10:50.350 --> 10:50.850
OK

10:52.190 --> 10:52.910
是不出来了

10:53.430 --> 10:55.430
对不对啊 那这个呢 就是我们这个啊

10:55.690 --> 10:59.350
张三这个对象啊 我这边的话 首先的话 第一个参数

10:59.610 --> 11:01.150
好 这边我们写全嘛

11:01.670 --> 11:02.950
就Object

11:03.210 --> 11:04.210
点Create

11:05.250 --> 11:06.790
点Create的方法

11:08.310 --> 11:09.350
Create的方法

11:09.610 --> 11:13.950
第一个参数是什么呢 是员形对象

11:15.110 --> 11:18.550
对吧 是员形对象 好 第二个参数就是什么呢 就是一个对象

11:18.550 --> 11:20.610
对象里面就是你的 是不是属性

11:21.090 --> 11:23.370
对不对 然后接下来这边的话 你可以设置这个属性

11:23.630 --> 11:25.430
对应了这个值啊

11:25.690 --> 11:28.690
好 然后接下来的话 我们这边我们可以继续

11:29.770 --> 11:31.830
可以继续啊 怎么继续呢

11:32.090 --> 11:33.370
比如我们这边下面继续

11:33.870 --> 11:35.670
好 把这这边就注射掉了啊

11:36.170 --> 11:38.610
好 然后接下来我们这边再来创建一个

11:38.850 --> 11:41.050
哇一个比如张小三

11:42.330 --> 11:44.110
张小三就是张三的儿子

11:44.610 --> 11:46.410
好 那接下来我这边的Object

11:46.930 --> 11:48.210
点这个Create

11:48.650 --> 11:52.570
好 那我的员形对象 员形对象我就以谁为员形的 我以他为员形的

11:53.330 --> 11:55.890
看到没有 我以他为员形 我以张三为员形

11:56.650 --> 11:57.930
张三这个对象为员形

11:58.450 --> 11:59.730
好 然后接下来张小三

12:01.010 --> 12:03.310
我们就给他设置一个这个新的属性

12:03.570 --> 12:04.850
比如说这个

12:06.650 --> 12:07.150
Born

12:09.450 --> 12:10.730
对应了这个Value

12:11.250 --> 12:13.290
比如说是这个北京

12:14.570 --> 12:15.090
看到没有

12:15.550 --> 12:18.870
好 那这边的话一个很有意思的事情就出现了

12:19.130 --> 12:20.170
张小三

12:20.410 --> 12:21.190
这个对象

12:21.450 --> 12:23.490
他的这个员形对象就是谁

12:24.250 --> 12:25.170
是不是就是张三

12:25.410 --> 12:27.850
对不对 那张三的这个员形

12:28.610 --> 12:29.630
张三这个对象

12:30.910 --> 12:31.690
他的员形

12:31.930 --> 12:32.970
他的员形就是谁

12:33.230 --> 12:34.250
是不是Person

12:35.010 --> 12:36.810
那是不是从而形成了一个

12:37.050 --> 12:37.570
链条呀

12:38.330 --> 12:38.850
对不对

12:39.110 --> 12:41.410
那我们这边我们来看一下 这边还是把那个

12:41.930 --> 12:43.210
还是把那个Enumber

12:43.710 --> 12:44.230
加上

12:44.950 --> 12:45.970
这个是q

12:46.230 --> 12:48.270
好 那就让我们这边log

12:49.550 --> 12:51.870
log张小三

12:52.370 --> 12:54.430
首先我们打印一下 我们看一下 张小三

12:54.690 --> 12:55.450
是不是这个样子

12:55.710 --> 12:57.230
对不对 然后叫张小三

12:57.490 --> 12:59.790
我要打印他的什么呢 我要打印他的这个Name

13:00.570 --> 13:01.330
打印他Name

13:01.590 --> 13:02.350
他本身有没有

13:02.870 --> 13:03.390
是没有

13:03.650 --> 13:05.170
没有他就会去哪去找

13:05.430 --> 13:08.250
他是不是就会去张三 就是他的员形对象上面去找

13:08.750 --> 13:10.290
对不对 所以就打印出什么呢

13:10.550 --> 13:11.830
是不是打印出张三

13:12.090 --> 13:13.370
对不对 那我如果有

13:14.090 --> 13:16.130
比如说我这边有Name

13:18.540 --> 13:19.820
我这边有

13:20.340 --> 13:21.360
这个Value

13:21.620 --> 13:22.540
Value是

13:22.900 --> 13:24.940
张小三

13:26.480 --> 13:28.020
然后Enumber

13:28.780 --> 13:29.800
对应的是q

13:30.060 --> 13:31.600
我如果有的话 我就

13:31.860 --> 13:33.380
就拿到谁 是不是拿到我自己的

13:33.640 --> 13:36.200
对不对 我没有我才去我的员形对象上面去找

13:36.720 --> 13:38.260
看见没有 这会是不是就张小三

13:38.520 --> 13:40.300
好 那接下来我这边我要打印什么呢

13:40.560 --> 13:41.840
我要打印这个Arms

13:43.380 --> 13:44.140
Arms

13:44.600 --> 13:46.640
我本身的话有没有这个Arms的属性

13:47.160 --> 13:49.720
没有 没有的话去我的员形对象上面去找

13:50.480 --> 13:52.280
看见没有 员形对象上面有没有

13:52.540 --> 13:56.640
也没有 也没有再去什么 再去这个员形对象上面去找

13:56.900 --> 13:57.400
是不是找到了

13:57.920 --> 14:00.480
对不对 说接下来这边就打印出多少呢

14:00.740 --> 14:01.760
是不是打印出二

14:02.520 --> 14:03.280
看见没有

14:03.540 --> 14:04.320
就打印出二

14:04.580 --> 14:06.360
那我这边的话我如果

14:07.120 --> 14:08.920
我如果是一个这个没有的属性

14:09.680 --> 14:11.740
比如这个张小三

14:12.260 --> 14:13.800
比如来一个Gender

14:15.120 --> 14:15.760
性别

14:16.020 --> 14:17.420
好 还是这样子来

14:17.680 --> 14:19.460
首先我这个对象有没有Gender

14:20.220 --> 14:23.300
没有 没有去我的员形对象 我的员形对象是不是张三

14:23.560 --> 14:25.100
对不对 去这上面找

14:25.860 --> 14:30.980
这也没有 没有再找这个张三的员形对象 张三的员形对象是不是Person

14:31.240 --> 14:32.020
有没有Gender

14:32.280 --> 14:35.600
这也没有 所以说最终返回一个什么呢 返回一个

14:35.860 --> 14:37.140
Undify

14:37.900 --> 14:38.400
对不对

14:38.920 --> 14:39.960
Undify

14:42.100 --> 14:42.600
看见没有

14:42.860 --> 14:44.400
他这里的话其实就是

14:44.600 --> 14:46.900
这个样子的 他会顺着你的这个

14:47.160 --> 14:48.180
员形对象

14:48.440 --> 14:49.220
不停的去找

14:49.480 --> 14:51.520
我们这边我们来总结一下

14:52.540 --> 14:53.060
总结

14:57.560 --> 14:58.080
总结

14:58.840 --> 15:00.120
当这个

15:01.140 --> 15:02.680
当查找

15:02.940 --> 15:06.260
一个对象的这个属性

15:06.780 --> 15:07.540
的时候

15:08.820 --> 15:09.340
的时候

15:09.860 --> 15:10.620
如果

15:11.140 --> 15:13.180
该对象上面

15:13.440 --> 15:16.000
没有这个属性

15:16.500 --> 15:17.540
则会

15:19.120 --> 15:21.160
则会去

15:21.920 --> 15:22.960
则会

15:23.220 --> 15:25.520
去这个该对象

15:25.780 --> 15:27.300
上面的

15:27.560 --> 15:28.840
圆形

15:29.100 --> 15:29.860
对象

15:30.900 --> 15:32.420
圆形对象

15:32.680 --> 15:33.200
上面

15:33.460 --> 15:34.220
进行

15:34.980 --> 15:35.760
查找

15:36.520 --> 15:37.040
看见没有

15:37.300 --> 15:38.560
如果这个圆形对象

15:38.820 --> 15:39.840
上面还没有

15:40.100 --> 15:40.880
比如他

15:41.140 --> 15:46.760
他到这个对象的圆形对象上面去找 那这个圆形对象上面没有 那圆形对象是不是也是对象

15:46.960 --> 15:50.040
也是对象 那这个圆形对象是不是也有自己的圆形对象

15:50.300 --> 15:51.320
就好比我们这边

15:51.580 --> 15:53.880
张三是不是张小三的圆形对象

15:54.140 --> 15:59.760
那张张三上面没找到 那接下来再去张三的圆形对象 张三的圆形对象是不是这个person

16:00.280 --> 16:02.320
对不对 他就会去person上面去找

16:02.580 --> 16:04.380
就一层一层

16:04.640 --> 16:05.140
往上的

16:05.400 --> 16:09.500
然后我们这边我们还可以就是打印象 比如我们这边log

16:10.260 --> 16:13.080
log 张小三

16:14.100 --> 16:16.660
点这个下滑线下滑线

16:16.760 --> 16:17.260
portal

16:18.560 --> 16:20.340
那这边就应该是等于什么

16:20.600 --> 16:22.380
是不等于张三这个对象

16:22.900 --> 16:24.180
对不对 走

16:24.700 --> 16:25.460
是不是去啊

16:26.240 --> 16:26.740
看见没有

16:27.000 --> 16:28.800
好 接下来我们这边再来

16:29.560 --> 16:30.580
log

16:31.620 --> 16:33.140
log 张

16:34.420 --> 16:37.760
张小三点这个portal

16:38.020 --> 16:39.040
点portal

16:39.540 --> 16:43.380
是不是他圆形对象 这个是不是找到他的圆形对象 找到谁 找到张三

16:43.640 --> 16:44.660
张三的这个

16:45.380 --> 16:47.940
圆形对象 那他就应该是等价于什么呀

16:48.200 --> 16:49.480
是不等价于

16:49.980 --> 16:50.500
person

16:50.760 --> 16:52.040
这person应该是小写

16:53.320 --> 16:55.880
我们这边我们来看一下 是不是 走

16:56.400 --> 16:57.160
是不是也是去啊

16:57.920 --> 16:58.440
看见没有

16:58.700 --> 17:00.480
这个其实就是这个

17:00.740 --> 17:01.520
我们JS

17:01.760 --> 17:04.840
最早的这个设计 就是我们的这个对象的产生

17:05.100 --> 17:06.880
通过圆形对象而来

17:07.140 --> 17:09.200
你看你这边的话 我们这边通过这个

17:09.440 --> 17:12.520
object.crate 方法 你是不是就快速的体会到了

17:12.780 --> 17:13.800
对象

17:14.060 --> 17:14.560
以及他的

17:14.880 --> 17:15.560
圆形对象

17:16.160 --> 17:19.480
我在对象上面查找一个属性 如果没找到

17:19.740 --> 17:20.500
去哪里去找

17:20.760 --> 17:22.800
去他的圆形对象上面

17:23.060 --> 17:23.560
去找

17:24.080 --> 17:24.600
对不对

17:24.860 --> 17:26.640
OK 这是首先第一个知识点

17:28.440 --> 17:29.980
好 然后接下来的话

17:30.480 --> 17:32.280
这里都是讲了刚才那个知识点

17:33.040 --> 17:34.580
好 这边有张图 我们来看一下

17:35.600 --> 17:37.400
这里的话是这个张三

17:37.900 --> 17:40.980
看到没有 那对于张三来讲 张小三 这个是张小三

17:41.240 --> 17:44.300
对于张小三来讲的话 他的圆形对象就是谁

17:44.860 --> 17:45.640
是不是就是这个张三

17:45.900 --> 17:48.300
那对于张三来讲 他的圆形对象就是谁

17:48.560 --> 17:49.980
是不是就是这个person

17:50.240 --> 17:53.580
对不对 那这个是不是就形成了一条这个圆形链

17:53.840 --> 17:55.100
是不是像链条一样

17:55.620 --> 17:56.140
看到没有

17:58.020 --> 18:02.880
好 这就是JS中最原始的创建对象的方式

18:03.140 --> 18:07.240
一个对象是通过什么呢 通过克隆另外一个对象

18:07.500 --> 18:08.020
得到的

18:08.780 --> 18:11.080
看到没有 我是先比如说我这个张小三

18:11.340 --> 18:15.180
我创建张小三的时候 我是先对你张三这个对象

18:15.640 --> 18:16.660
进行一份克隆

18:17.180 --> 18:18.660
但克隆了肯定不够吗

18:19.080 --> 18:23.960
对不对 不够 让我再加一点我自己的一些特有的一些属性

18:24.220 --> 18:24.860
或者方法

18:25.620 --> 18:26.660
就像这个

18:26.920 --> 18:28.060
克隆阳多利一样

18:28.320 --> 18:29.220
通过克隆

18:29.480 --> 18:30.500
可以创建

18:30.760 --> 18:32.540
一个一模一样的这个对象

18:35.620 --> 18:38.180
但是随着这个JS语言的这个发展

18:38.680 --> 18:39.960
你这样子创建对象

18:40.220 --> 18:40.740
太麻烦了

18:41.240 --> 18:45.080
这个开发者还是希望什么呢 还是希望就是我们的这个JS

18:45.400 --> 18:47.440
能够像比如说像加瓦呀

18:47.700 --> 18:52.300
或者C下铺呀 这些这种标准的这个面向对象语言一样

18:52.560 --> 18:53.480
通过内

18:53.840 --> 18:56.140
来批量的生成这个对象

18:56.900 --> 19:01.260
所以说后面就出现了什么呢 出现了就是通过构造函数

19:01.520 --> 19:03.760
来模拟这个内的这个形式

19:04.020 --> 19:05.600
我们这边我们来看一下这个代码

19:05.860 --> 19:07.140
把这边注射掉

19:09.220 --> 19:11.020
我们这边把这边注射掉啊

19:15.910 --> 19:16.930
把这边

19:19.220 --> 19:19.980
也注射掉

19:20.240 --> 19:21.520
把上面都注射掉

19:28.510 --> 19:34.350
然后之后之后

19:36.340 --> 19:41.460
随着什么呢 随着这个JS语言的发展

19:41.860 --> 19:45.540
然后我们还是希望什么呢

19:46.060 --> 19:48.700
希望JS能够

19:49.660 --> 19:56.580
像这个标准的面向对象语言一样

19:57.340 --> 19:58.060
通过什么呢

19:58.620 --> 19:59.980
通过内

20:00.740 --> 20:01.940
来这个批量的

20:02.860 --> 20:05.420
批量的生产对象

20:05.820 --> 20:08.340
那在这个JS里面早期通过什么呢

20:08.580 --> 20:10.020
通过构造函数

20:10.700 --> 20:11.820
来模拟这个内

20:12.580 --> 20:13.460
早期

20:15.180 --> 20:16.700
早期JS

20:17.100 --> 20:19.660
通过什么呢 通过构造函数

20:20.180 --> 20:26.820
来模拟这个其他语言里面的内

20:27.580 --> 20:28.220
看到没有

20:28.460 --> 20:30.140
那比如说我们这边Function

20:32.230 --> 20:34.270
方形 比如说写一个computer

20:35.550 --> 20:37.550
你看这玩意是不是就是个函数啊

20:37.990 --> 20:39.950
照理说就是个函数 那你这个函数

20:39.990 --> 20:42.110
那我们这边是不是可以正常的这样子调用

20:42.870 --> 20:45.150
对不对 我们以前调用函数是不是就这样调用的

20:45.390 --> 20:46.910
但是我们现在的话不这么用

20:47.170 --> 20:49.390
我们怎么来用呢 我们通过New的形式

20:50.550 --> 20:52.710
New的形式 然后接下来的话你这边

20:52.950 --> 20:53.870
构造函数

20:54.130 --> 20:56.430
它就类似于其他语言里面的这个类了

20:56.690 --> 20:58.750
然后接下来它就会给你返回一个什么呢

20:58.990 --> 21:00.230
你凡是通过New

21:00.690 --> 21:03.510
来调用这个函数 它就会给你生成一个

21:04.010 --> 21:04.730
新的对象

21:04.990 --> 21:06.150
并且给你返回

21:06.410 --> 21:07.610
比如说我们这边的话

21:07.870 --> 21:09.150
哇一个这个

21:09.910 --> 21:10.410
C

21:10.930 --> 21:12.470
等于一个这个New computer

21:12.730 --> 21:14.010
那这个C就是一个什么呢

21:14.270 --> 21:15.490
C就是一个

21:15.750 --> 21:16.250
对象

21:16.490 --> 21:18.090
我们这边可以打印一下我们看一下

21:18.350 --> 21:18.870
log

21:19.390 --> 21:19.890
C

21:20.930 --> 21:21.930
好 走

21:22.190 --> 21:22.710
你看

21:22.970 --> 21:24.250
是不是是一个对象

21:25.010 --> 21:25.530
看到没有

21:25.790 --> 21:26.550
就是一个对象

21:26.810 --> 21:28.590
当然你这样子没有任何意义

21:28.790 --> 21:30.590
对不对 那你这边的就是可以

21:30.850 --> 21:32.590
给他写一些这个

21:33.350 --> 21:34.110
参数

21:34.370 --> 21:35.970
比如说这个电脑的名字

21:36.230 --> 21:37.250
电脑的

21:37.510 --> 21:38.010
价格

21:38.530 --> 21:43.130
好 然后这样我们刚说了 通过New来调用的话 他是不是这里面会生成一个这个对象

21:43.650 --> 21:46.210
那这个对象的话 你可以通过什么 可以通过Race

21:46.730 --> 21:47.490
来拿到

21:47.990 --> 21:49.530
Race就表示就是

21:49.790 --> 21:51.070
生成了这个对象

21:51.330 --> 21:53.110
好 那这个对象上面他就有什么呢

21:53.370 --> 21:54.990
我们上面就给他添加一个

21:55.250 --> 21:55.930
内幕属性

21:56.390 --> 21:58.850
然后等价于你传进来的

21:59.110 --> 21:59.710
内幕

21:59.970 --> 22:02.290
Z点这个Price

22:02.550 --> 22:05.350
就等于你传进来的Price

22:06.630 --> 22:07.150
看到没有

22:07.410 --> 22:10.230
好 那我这边我就可以 比我传一个苹果

22:11.510 --> 22:12.790
然后15000

22:13.290 --> 22:14.570
这边呢 比如说是

22:14.830 --> 22:15.350
ample

22:16.370 --> 22:17.630
好 我们打印这个ample

22:18.910 --> 22:19.690
好 这边

22:19.950 --> 22:20.450
走

22:20.710 --> 22:21.230
你看

22:21.490 --> 22:23.010
这边这个对象是不是就生成了

22:23.270 --> 22:25.310
对不对 他有内幕属性有这个

22:25.770 --> 22:27.050
这个Price属性

22:27.310 --> 22:28.850
最关 最关键的是

22:29.110 --> 22:31.410
我这边通过这个构造函数

22:31.670 --> 22:34.230
来模拟了其他对象里面的这个类

22:34.730 --> 22:36.790
那我们都知道其他对象里面的这个类

22:37.050 --> 22:38.570
它是可以批量的生产对象的

22:38.830 --> 22:40.630
然后New一次他就生成一个对象

22:40.890 --> 22:44.210
那比我们这边再挖一个什么呢 挖一个比较华为

22:44.470 --> 22:45.490
等于一个New

22:46.250 --> 22:47.290
computer

22:48.810 --> 22:49.830
好 华为

22:51.370 --> 22:52.910
华为比如说12000

22:53.890 --> 22:55.930
好 然后接下来我们这边log一下

22:56.450 --> 22:57.730
log华为

22:58.250 --> 22:59.010
好 走

22:59.770 --> 23:02.090
看到没有 这不就又生成了一个对象

23:02.590 --> 23:05.650
所以说这个的话就是通过构造函数

23:05.910 --> 23:07.210
通过构造函数

23:07.450 --> 23:08.990
来生成这个对象

23:09.250 --> 23:10.010
但是

23:10.270 --> 23:12.570
虽然你这边的话是通过这种方式

23:12.830 --> 23:13.850
就New的方式

23:14.110 --> 23:14.870
来生成的

23:15.130 --> 23:18.210
那它本质上还是什么呢 还是基于原型的

23:18.970 --> 23:19.870
这里要说一下

23:20.250 --> 23:20.770
虽然

23:24.380 --> 23:24.900
虽然

23:26.220 --> 23:28.780
虽然上面的方式

23:29.820 --> 23:31.100
模拟出了

23:31.860 --> 23:33.380
其他

23:33.900 --> 23:35.180
语言中

23:35.440 --> 23:36.140
这个

23:36.400 --> 23:37.240
面向

23:38.000 --> 23:39.540
对象的这个

23:40.060 --> 23:41.580
语言的方式

23:42.100 --> 23:43.380
面向对象的语言

23:43.640 --> 23:44.400
创建

23:44.660 --> 23:45.680
对象的

23:45.940 --> 23:46.700
方式

23:46.960 --> 23:47.980
但是

23:48.740 --> 23:50.540
在这个接式

23:50.800 --> 23:51.560
底层

23:51.820 --> 23:55.660
因为它本身它是在设计这门语言的时候是不是就是基于原型的

23:55.980 --> 23:56.480
对不对

23:56.740 --> 23:58.780
说到这边的话它其实就还是什么呢

23:59.040 --> 23:59.660
还是

23:59.920 --> 24:01.080
就是基于原型

24:01.340 --> 24:02.620
来创建的这两个对象

24:02.880 --> 24:04.160
ample 华为

24:04.420 --> 24:05.700
就你这边New的时候

24:05.960 --> 24:07.740
New的时候我们说了它是不是会创建的对象

24:08.000 --> 24:11.080
那这个对象其实还是基于原型创建的对象

24:12.360 --> 24:13.120
还是

24:13.380 --> 24:14.140
基于

24:14.900 --> 24:15.680
原型

24:16.440 --> 24:17.220
来

24:17.480 --> 24:18.500
创建的

24:19.520 --> 24:20.040
对象

24:20.800 --> 24:21.320
好吧

24:25.060 --> 24:26.580
那这里的话举个例子

24:26.840 --> 24:27.360
比如

24:28.420 --> 24:29.960
比如我们的对象

24:30.220 --> 24:31.240
我们的对象

24:31.500 --> 24:32.260
除了

24:32.520 --> 24:33.300
有什么呢

24:33.540 --> 24:34.580
有属性

24:35.080 --> 24:35.860
一般

24:36.120 --> 24:37.140
还有方法

24:39.080 --> 24:40.100
一般还有方法

24:40.360 --> 24:40.880
对不对

24:41.140 --> 24:42.920
那这个方法的话我们就会选择干嘛呢

24:43.180 --> 24:44.980
选择把它挂在这个

24:45.240 --> 24:46.520
它的原型对象上面

24:47.020 --> 24:47.520
为什么

24:47.780 --> 24:49.840
因为你这边的话你如果是这个样子

24:50.100 --> 24:50.600
比如这边

24:50.860 --> 24:51.640
z

24:51.900 --> 24:54.440
点我们随便嘛比如说秀price

24:56.240 --> 24:57.520
等于一个function

24:57.520 --> 25:01.360
然后接下来这边这个log

25:01.620 --> 25:03.660
然后接下来这边打印

25:03.920 --> 25:05.720
然后比如说

25:07.240 --> 25:10.060
z点这个lame

25:11.080 --> 25:12.120
然后

25:12.380 --> 25:13.140
的电脑

25:18.670 --> 25:19.190
的

25:19.690 --> 25:20.730
电脑

25:21.490 --> 25:22.770
价格

25:23.030 --> 25:23.530
为

25:25.330 --> 25:27.630
z.price

25:28.410 --> 25:31.730
你比如说你在这里写方法行不行啊可以

25:31.930 --> 25:33.210
比如我们这边我们来调一下

25:33.470 --> 25:34.250
ample

25:35.010 --> 25:35.770
点这个

25:36.030 --> 25:37.310
秀price

25:38.090 --> 25:38.590
对吧

25:38.850 --> 25:40.130
好然后接下来的话这边

25:40.890 --> 25:41.810
华为

25:42.170 --> 25:43.970
点这个秀price

25:44.230 --> 25:45.250
这样子可不可以呢

25:45.510 --> 25:46.010
可以了

25:46.530 --> 25:47.030
走

25:47.290 --> 25:47.810
看到没有

25:48.070 --> 25:49.090
苹果的

25:49.610 --> 25:50.630
苹果

25:51.390 --> 25:53.190
的电脑啊价格为15000

25:53.450 --> 25:54.970
华为的电脑价格为12000

25:55.230 --> 25:55.750
是没问题

25:56.010 --> 25:58.310
但是你这样子写的话就是我每一个

25:59.330 --> 26:00.610
因为我这边new一次

26:00.810 --> 26:02.610
只要我new一次这个computer

26:02.870 --> 26:03.490
构造函数

26:03.750 --> 26:04.910
它是不是就会生成一个对象

26:05.170 --> 26:07.730
那我这边其实是因为z是指向这个

26:07.990 --> 26:09.010
新生成的对象吗

26:09.270 --> 26:11.570
那其实是我把这个秀price

26:12.090 --> 26:12.850
这个方法

26:13.110 --> 26:15.410
是挂在这个新生成的对象里面

26:16.170 --> 26:16.690
对不对

26:16.950 --> 26:18.490
那这里的话就会导致什么呢

26:18.750 --> 26:22.070
其实对于属性来讲属性的值是不是不一样的

26:22.330 --> 26:23.350
对不对我这边

26:23.610 --> 26:24.890
创建的时候比如Lame

26:25.150 --> 26:26.410
这个的话是苹果

26:26.670 --> 26:28.970
这个华为的话这边是华为

26:29.170 --> 26:31.090
price也就是属性值

26:31.350 --> 26:32.510
一般是不一样的

26:32.770 --> 26:34.810
说说你这边的话要放在这个构造函数里面

26:35.070 --> 26:37.110
但是对于方法来讲你仔细看一下

26:37.890 --> 26:38.650
你看一下方法

26:39.410 --> 26:41.210
就是无论你是哪一个对象

26:41.470 --> 26:44.030
它的这个方法的是不是一定是一样的

26:44.790 --> 26:45.310
对不对

26:45.570 --> 26:46.590
方法一定是一样的

26:46.850 --> 26:49.150
那你这边就相当于是在每一个对象

26:49.410 --> 26:50.170
比如说我这边的话

26:51.710 --> 26:52.730
我们画个图嘛

26:54.530 --> 26:55.290
就比如说

26:55.790 --> 26:58.110
你这边的话有这么一个这个对象

26:58.830 --> 27:01.130
这个对象的话是什么呢这个对象是Apple

27:02.930 --> 27:04.470
这个是Apple

27:06.250 --> 27:08.050
好然后既然你这边还有一个对象

27:09.070 --> 27:11.110
这个对象是这个华为

27:11.890 --> 27:13.430
我就写个华吧

27:14.190 --> 27:17.770
好对于他们来讲的话这两个对象两个对象的话分别有什么呢

27:18.030 --> 27:19.050
这边有Lame属性

27:19.830 --> 27:20.330
对不对

27:20.590 --> 27:21.870
有Lame属性

27:22.630 --> 27:24.950
然后他也有Lame属性

27:25.450 --> 27:28.010
这鼠标不太好写

27:29.030 --> 27:29.850
Lame属性

27:30.370 --> 27:32.150
好大家有Price属性

27:32.930 --> 27:33.690
Price

27:36.160 --> 27:37.640
有Price

27:38.720 --> 27:40.240
这边Price

27:40.760 --> 27:42.560
我慢慢掌握到机巧了

27:43.840 --> 27:44.600
Price

27:46.140 --> 27:46.640
ok

27:46.900 --> 27:47.940
然后既然还有个什么

27:48.200 --> 27:49.920
这边还有个这个Show Price

27:50.180 --> 27:50.480
对不对

27:50.740 --> 27:51.760
我就写个Show

27:52.020 --> 27:53.040
这边Show

27:54.600 --> 27:56.880
这个是不是也有这个Show Price

27:57.400 --> 27:57.920
对不对

27:58.380 --> 28:00.180
那对于这个Lame来讲

28:00.700 --> 28:01.700
这两个对象

28:01.960 --> 28:03.500
这两个对象来讲Lame

28:04.020 --> 28:04.780
就这个Lame

28:07.340 --> 28:07.860
糟了

28:08.620 --> 28:09.660
无法那个吗

28:10.160 --> 28:11.180
好算了将就了吧

28:11.440 --> 28:12.220
好对于这个Lame

28:12.460 --> 28:14.780
Lame来讲是不是两个对象不一样

28:15.020 --> 28:16.620
让我在对象里面可以单独保

28:16.880 --> 28:18.620
这个保存一份

28:18.860 --> 28:19.900
那这个Price

28:20.660 --> 28:22.460
Price两个对象是不是也是不一样的

28:22.700 --> 28:25.020
对不对我也可以单独保存一份但是这个

28:25.260 --> 28:26.300
Show Price

28:26.540 --> 28:27.300
这个方法

28:27.760 --> 28:29.560
这个方法是不两个对象一模一样

28:30.320 --> 28:31.360
那我有没有必要

28:32.120 --> 28:33.640
两个对象各存一份

28:34.680 --> 28:35.960
这完全没必要

28:36.720 --> 28:37.080
对不对

28:37.340 --> 28:38.000
完全没必要

28:38.260 --> 28:39.040
那这个是怎么办

28:39.280 --> 28:40.920
那这个时候我就会选择

28:41.180 --> 28:43.880
把这个Show Price这个方法

28:44.140 --> 28:48.000
存储在什么呢存储在他们两个对象的原型对象上面

28:48.240 --> 28:50.040
那不用我这边这还有个对象

28:50.300 --> 28:52.340
这个对象就是他们两对象的原型对象

28:52.600 --> 28:54.120
那既然我把这个Show Price

28:55.400 --> 28:56.680
我把它放到这个位置

28:58.020 --> 28:58.440
看到没有

28:58.700 --> 29:01.860
放到这个位置回头我这边ample我去调这个Show Price的时候

29:02.120 --> 29:04.880
我本身这个对象是没有Show Price方法

29:05.140 --> 29:05.880
那没关系啊

29:06.220 --> 29:07.180
我们刚已经说了

29:07.440 --> 29:09.540
我本身没有的话我会去哪里去找

29:09.800 --> 29:12.360
我是不会去我的原型对象上面去找

29:13.120 --> 29:13.880
对不对

29:14.140 --> 29:15.680
所以我们这边的话

29:15.940 --> 29:16.960
会选择

29:19.240 --> 29:20.260
方法

29:21.280 --> 29:23.600
方法一般会选择

29:26.440 --> 29:29.760
方法一般会选择

29:30.480 --> 29:31.500
挂到哪里呢

29:31.760 --> 29:34.320
挂到原型对象

29:35.080 --> 29:35.600
上面

29:35.860 --> 29:37.640
那怎么挂到原型对象上面呢

29:37.900 --> 29:38.420
很简单

29:38.680 --> 29:39.440
这边的话就是

29:39.700 --> 29:40.980
computer

29:41.480 --> 29:43.280
点这个Portotype

29:43.800 --> 29:44.920
通过computer

29:45.160 --> 29:46.600
computer是我们的构造函数

29:46.860 --> 29:47.120
对不对

29:47.380 --> 29:49.420
然后他的话点Portotype

29:49.680 --> 29:50.960
他就访问到了什么呢

29:51.220 --> 29:52.740
就访问到了他们的原型对象

29:53.000 --> 29:54.540
好在他的原型对象上面

29:55.060 --> 29:57.360
我们挂一个Show Price

29:57.620 --> 29:59.160
等于一个function

30:00.360 --> 30:00.900
可不可以啊

30:01.160 --> 30:02.520
然后再把这句话

30:03.040 --> 30:03.800
拿过来

30:04.580 --> 30:06.380
好然后再这边我是不是就不需要了

30:07.140 --> 30:07.900
可不可以啊

30:08.160 --> 30:09.180
这边写一下

30:09.440 --> 30:10.460
将方法

30:12.000 --> 30:15.080
挂在原型对象

30:15.340 --> 30:16.100
上面

30:16.360 --> 30:18.140
好那这样我们这边我们来看一下

30:18.400 --> 30:19.940
运行一下我们看能不能

30:20.200 --> 30:22.240
调用到这个Show Price这个方法

30:24.200 --> 30:24.700
走

30:25.740 --> 30:26.240
可不可以

30:27.020 --> 30:28.540
这完全没问题

30:29.060 --> 30:29.580
对不对

30:29.840 --> 30:30.600
完全没问题

30:30.800 --> 30:32.080
好那你现在就知道了

30:32.340 --> 30:33.120
我们这边

30:33.380 --> 30:34.760
在写构造函数的时候

30:35.020 --> 30:36.180
方法要干嘛呢

30:36.440 --> 30:39.000
方法要挂在原型对象上面

30:39.260 --> 30:40.800
那我怎么拿到他的原型对象呢

30:41.060 --> 30:43.100
通过这个构造函数点

30:43.360 --> 30:44.380
Portotype

30:45.140 --> 30:46.940
这里是不是就又出现了一个东西

30:47.200 --> 30:49.240
一个新的东西叫做Portotype

30:49.500 --> 30:50.260
刚才那个叫什么

30:50.520 --> 30:52.060
刚才那个叫做Porto

30:52.820 --> 30:53.340
看到没有

30:53.600 --> 30:55.380
好那接下来这边的话就有一张图

30:55.640 --> 30:56.400
我们来看一下

30:57.940 --> 30:58.960
就这边啊

30:59.480 --> 30:59.980
好

31:00.600 --> 31:03.160
有一个非常有意思的现象我们书写这个

31:03.420 --> 31:06.480
computer构造函数的时候啊这个实力方法的时候

31:06.740 --> 31:09.040
我们是写在这个computerPortotype上面的

31:09.560 --> 31:10.580
那这个东西是什么呢

31:11.100 --> 31:15.200
这个东西其实就是computer实力对象的原型对象

31:15.700 --> 31:16.980
说起来有点绕

31:17.240 --> 31:18.000
再念一遍

31:18.260 --> 31:20.560
他就是computer实力对象

31:21.340 --> 31:23.120
computer是不是我们的构造函数啊

31:23.380 --> 31:24.920
他是会用来构造对象的

31:25.180 --> 31:26.460
那他的实力对象那

31:26.720 --> 31:29.020
对于我们这个例子来讲实力对象就是谁

31:29.220 --> 31:31.520
是不是就是ample和这个花围

31:31.780 --> 31:32.300
对不对

31:32.560 --> 31:34.340
那他是他的这个实力对象的

31:34.600 --> 31:35.880
原型对象

31:36.900 --> 31:37.420
看到没有

31:37.940 --> 31:41.520
好那要搞清楚这个我这边画了一个图我们来看一下

31:42.020 --> 31:44.080
比如你这边的话有一个这个构造函数

31:44.340 --> 31:45.620
比如我们刚刚那个computer

31:45.880 --> 31:47.140
computer是不是就是构造函数

31:47.400 --> 31:47.920
对不对

31:48.180 --> 31:50.480
他的话有一个Portotype属性

31:52.020 --> 31:54.320
通过Portotype他就指向了什么呢

31:54.580 --> 31:55.860
指向了一个对象

31:56.620 --> 31:56.880
看到没有啊

31:57.080 --> 31:57.840
指向一个对象

31:58.100 --> 31:59.400
这个对象就是他

31:59.660 --> 32:00.360
就是什么了

32:00.620 --> 32:02.600
就是他实力化出来的对象

32:02.860 --> 32:03.500
比如我通过new

32:03.740 --> 32:05.540
new的话是不是会创建一个实力对象

32:06.060 --> 32:06.560
对不对

32:06.820 --> 32:08.300
实力化出来对象的

32:08.560 --> 32:09.380
原型对象

32:10.400 --> 32:10.900
看到没有

32:11.160 --> 32:12.700
那我们这边我们可以来证实一下

32:12.960 --> 32:13.640
怎么证实呢

32:13.900 --> 32:17.060
你说你这个东西啊通过Portotype是否指向原型对象

32:17.320 --> 32:20.900
然后我的实力对象我们刚才讲了通过这个下滑线下滑线Portl

32:21.160 --> 32:22.180
这边也可以访问到这个

32:22.440 --> 32:23.200
原型对象

32:23.460 --> 32:24.220
那理论上

32:24.380 --> 32:26.940
这个实力对象的下滑线下滑线Portl

32:27.180 --> 32:30.820
就应该和构造函数的Portl type应该是相等的

32:31.080 --> 32:32.100
那我们来看一下是不是

32:33.380 --> 32:35.180
那我们这边的话LOG一下

32:37.740 --> 32:38.260
LOG

32:39.540 --> 32:40.220
LOG什么呢

32:40.460 --> 32:41.060
ample

32:41.580 --> 32:43.380
ample是不是你的实力对象

32:43.640 --> 32:46.440
他的话下滑线这个Portl

32:47.720 --> 32:49.780
就访问到他的这个原型对象

32:50.040 --> 32:51.820
那就应该全等于

32:52.080 --> 32:52.840
computer

32:53.560 --> 32:54.200
点什么呢

32:54.460 --> 32:55.600
Portl type

32:56.120 --> 32:57.400
我们来看一下是不是True

32:58.160 --> 32:58.680
走

32:59.440 --> 32:59.960
是不是True

33:00.480 --> 33:01.760
对不对肯定是True

33:02.020 --> 33:03.800
说明我们这个关系图是什么

33:04.060 --> 33:04.820
是没有问题的

33:05.340 --> 33:07.000
然后既然这边还有一个属性

33:07.240 --> 33:08.400
这个是constructor

33:09.440 --> 33:11.480
就我们这边的话这个原型对象

33:11.740 --> 33:13.780
原型对象它会有个属性叫做constructor

33:14.040 --> 33:15.580
constructor就会指向什么呢

33:15.840 --> 33:17.360
指向这个构造函数

33:18.640 --> 33:22.480
所以说我们这边的话我们在打印这个实力对象的constructor

33:22.960 --> 33:25.320
我们看到这个实力对象直接打印的就是谁呢

33:25.560 --> 33:26.560
直接打印的就是他

33:26.820 --> 33:28.620
但其实的话他是怎么来的呢

33:28.880 --> 33:31.440
他其实是他上面没有constructor

33:32.200 --> 33:33.240
然后他会去干嘛

33:33.500 --> 33:36.040
他是不是会从他的这个原型对象上面去找

33:36.560 --> 33:38.360
原型对象上面是不是有constructor

33:38.860 --> 33:40.660
对不对那最终原型对象的constructor

33:40.920 --> 33:42.440
指向这个构造函数

33:42.700 --> 33:43.720
比如说我们这边

33:45.520 --> 33:47.060
然后我们这边LOG

33:49.190 --> 33:50.730
LOG这个Apple

33:51.510 --> 33:53.030
点这个constructor

33:54.830 --> 33:57.890
他本身这个对象上面是没有constructor的

33:58.150 --> 34:01.230
然后他怎么办呢他就去他的原型对象上面去找

34:01.750 --> 34:03.790
原型对象上面是不是有constructor

34:04.310 --> 34:06.610
对不对那最终打印出就是这个构造函数

34:06.870 --> 34:07.890
我们来看一下是不是

34:09.670 --> 34:10.190
是不是OK的

34:10.710 --> 34:12.230
对不对你这边你甚至可以这个样子

34:13.010 --> 34:13.530
等等

34:14.290 --> 34:15.050
computer

34:15.830 --> 34:16.590
然后走

34:17.090 --> 34:17.870
是不是Q

34:18.890 --> 34:19.910
可不可以啊

34:20.170 --> 34:22.230
说这边的话就一定要把这张图

34:22.990 --> 34:26.590
消化啊这个是一个非常重要的三角关系

34:27.090 --> 34:28.110
非常重要的

34:28.370 --> 34:28.890
三角关系

34:29.390 --> 34:32.730
一般的话我也要求学生你必须要把这个三角关系

34:32.990 --> 34:33.750
把它记住

34:34.010 --> 34:35.030
你这边总结一下嘛

34:36.050 --> 34:36.830
来我们来总结一下

34:37.330 --> 34:39.890
皆是中每一个对象都有原型对象

34:40.670 --> 34:41.170
对吧

34:41.430 --> 34:45.010
然后可以通过什么呢可以通过下滑线下滑线这个proto这个属性

34:45.270 --> 34:46.030
来访问到

34:46.550 --> 34:47.310
第一句话

34:47.570 --> 34:48.090
没问题吧

34:48.590 --> 34:49.110
然后第二个

34:49.330 --> 34:52.130
构造函数的这个proto态度属性

34:52.390 --> 34:54.690
指向一个什么呢指向一个对象

34:55.450 --> 34:55.970
对不对

34:56.230 --> 34:57.510
那这个对象是什么呢

34:57.770 --> 35:00.070
这个对象是该构造函数

35:00.330 --> 35:02.630
实力化出来的对象那就是它

35:03.150 --> 35:04.670
得什么呢得原型对象

35:05.950 --> 35:06.730
是没问题啊

35:07.230 --> 35:09.030
对不对啊大家下一个

35:09.290 --> 35:11.850
原型对象的constructor属性

35:12.110 --> 35:13.130
也指向什么呢

35:13.390 --> 35:14.670
也指向这个构造函数

35:14.930 --> 35:17.990
就是这个原型对象的constructor属性

35:18.190 --> 35:20.510
指向什么呢指向这个构造函数

35:20.770 --> 35:22.550
那这边其实可以再加一句

35:23.070 --> 35:24.090
就是实力对象

35:27.820 --> 35:28.840
实力对象

35:29.620 --> 35:31.140
实力对象

35:34.510 --> 35:37.590
实力对象的这个constructor属性

35:39.130 --> 35:40.410
constructor属性

35:40.670 --> 35:41.670
是从

35:42.450 --> 35:44.750
是从什么呢是从它的原型

35:45.270 --> 35:48.590
它的原型对象上面

35:49.630 --> 35:50.390
访问到的

35:50.910 --> 35:52.170
再加这么一句话

35:52.370 --> 35:53.830
就我们的这个实力对象

35:54.090 --> 35:56.470
你在访问这个实力对象的constructor的时候

35:56.730 --> 35:57.610
它本身是不是没有

35:57.870 --> 35:59.810
没有它就会从它的原型对象上面

36:00.070 --> 36:00.570
去找

36:02.110 --> 36:04.930
好然后接下来这边的话来进行一个这个验证

36:05.190 --> 36:06.710
这个是不是就刚才我们写的代码

36:07.990 --> 36:09.010
你把这个的话

36:09.270 --> 36:11.070
把这个这个再好好看一下

36:11.330 --> 36:12.850
一定要把这个三角关系

36:13.110 --> 36:13.870
理清楚

36:14.390 --> 36:16.690
一会的话我们会在这个三角关系的基础上

36:16.950 --> 36:18.490
再来进行扩展

36:20.920 --> 36:24.320
好接下来的话我们可以干嘛呢我们可以再来验证一下

36:24.580 --> 36:26.940
验证这个就是类制的构造函数

36:27.200 --> 36:28.720
是不是也是这样的关系

36:29.240 --> 36:30.720
然后我们这边举个例子啊

36:30.980 --> 36:32.560
比如说来到这边

36:32.820 --> 36:34.620
我们刚才是不是自定义的构造函数

36:35.380 --> 36:35.640
对吧

36:35.900 --> 36:37.420
好了这边的话我们来一个

36:37.940 --> 36:38.960
就哇一个

36:39.980 --> 36:40.500
哎呀啊

36:42.630 --> 36:43.550
哇一个哎呀啊

36:44.310 --> 36:46.110
你看是不是就是一个简单的空数组啊

36:46.470 --> 36:46.870
对不对

36:47.130 --> 36:48.390
好了那这个的话我们知道

36:48.650 --> 36:50.190
数组上它还有种方式是吗

36:50.390 --> 36:51.550
new array

36:52.310 --> 36:53.470
对不对那这个 array

36:53.990 --> 36:57.830
array 的话这个就是我们的这个数组其实是通过这个这个 array

36:58.330 --> 37:00.130
啊这个构造函数是不是new 出来的

37:00.390 --> 37:02.170
好那既然我们这边我们来看一下

37:02.950 --> 37:03.710
log

37:04.470 --> 37:06.270
log 这个 array

37:07.290 --> 37:08.570
啊这个是它的构造函数吗

37:08.830 --> 37:10.870
那它构造函数是不是应该有一个叫做

37:11.130 --> 37:12.670
portal type 的属性

37:12.930 --> 37:14.970
啊它就应该全等于什么呢

37:15.230 --> 37:17.530
哎呀啊点这个portal

37:17.790 --> 37:19.070
我们来看一下是不是 true

37:19.330 --> 37:19.830
走

37:21.190 --> 37:21.990
看到没有

37:22.250 --> 37:23.510
是不是仍然是 true

37:24.290 --> 37:25.830
对不对仍然是 true

37:26.090 --> 37:28.890
啊这个的话就是也就是内置的构造函数

37:29.670 --> 37:30.690
内置的

37:32.470 --> 37:33.750
内置的

37:34.270 --> 37:35.810
构造函数

37:37.090 --> 37:39.390
构造函数啊也有

37:40.670 --> 37:41.450
这样的

37:41.950 --> 37:42.970
三角关系

37:43.990 --> 37:44.510
OK

37:46.050 --> 37:47.330
好并且我们前面说的

37:47.590 --> 37:49.370
就是所有的这个对象

37:49.830 --> 37:52.150
说它都应该有自己的这个原型对象

37:52.650 --> 37:53.670
对那包括你这个

37:54.450 --> 37:55.470
包括这个 array

37:55.730 --> 37:57.510
那它是不是也应该有自己的

37:57.770 --> 37:58.290
原型对象

37:58.550 --> 38:00.070
好那既然我们这边我们来看一下

38:00.330 --> 38:00.850
log

38:02.630 --> 38:04.430
log 这个 array

38:05.710 --> 38:07.250
点这个下滑线portal

38:07.750 --> 38:09.030
啊那我们这边我们来打一下

38:09.550 --> 38:10.050
你看

38:10.310 --> 38:12.110
它这边说也有自己的原型对象

38:12.610 --> 38:15.430
那并且它的这个原型对象和什么呢

38:15.690 --> 38:16.450
和我们的

38:16.610 --> 38:21.010
就是我们这边自定义的我们刚是不是自定了一个这个computer这个构造函数啊

38:21.270 --> 38:24.090
它的这个原型对象其实是相等的

38:25.370 --> 38:27.410
看到没有我们这边走

38:27.930 --> 38:28.430
看到没有

38:28.950 --> 38:29.710
是不是 true

38:29.970 --> 38:32.530
对不对啊比如说我们这边再来点其他的

38:33.050 --> 38:36.630
比如说这个的话是 data 是不是有 data 这个构造函数啊

38:37.910 --> 38:39.190
然后接下来的话这边

38:39.450 --> 38:40.470
比如说 street

38:41.490 --> 38:43.030
啊然后接下来的话这边

38:43.790 --> 38:44.570
number

38:45.290 --> 38:46.490
这边的话比如说

38:46.830 --> 38:47.590
布林

38:48.370 --> 38:55.790
啊这些构造函数他们的这个原型对象其实和你的这个自定义的这个构造函数的原型对象是一模一样

38:56.550 --> 38:57.590
比如说没什么两样

38:58.590 --> 39:00.910
明白吧没什么两样我们这边我们来看一下是不是

39:02.190 --> 39:02.690
走

39:03.470 --> 39:05.270
这全部打印为 true

39:06.030 --> 39:08.070
对不对全部打印为 true

39:08.330 --> 39:09.610
回到我们的这个课件

39:10.630 --> 39:11.910
好我们这边来看一下啊

39:12.690 --> 39:14.930
通过上面的代码我们发现什么呢

39:15.190 --> 39:17.130
所有的构造函数

39:17.390 --> 39:18.770
无论你是自定义的

39:19.030 --> 39:20.050
还是类制的

39:20.310 --> 39:23.890
他们这个原型对象其实都是同一个这个对象

39:24.670 --> 39:25.170
对不对

39:25.430 --> 39:27.230
有这么一个关系啊

39:27.730 --> 39:32.090
好那你这边的话如果你把刚才的那个三角关系就这啊

39:32.350 --> 39:33.830
就刚我说了这这张图

39:34.090 --> 39:35.410
这个三角关系很重要的

39:35.670 --> 39:37.570
你能把这个三角关系搞明白之后

39:37.830 --> 39:41.310
那接下来我们可以在刚才那张图上面继续进行扩展

39:41.590 --> 39:42.590
扩展成什么样子呢

39:42.850 --> 39:43.610
扩展成这个样子

39:45.150 --> 39:45.910
扩展成这个样子

39:46.430 --> 39:47.710
我们来看这张图

39:48.470 --> 39:49.250
这张图很有意思

39:49.750 --> 39:52.050
好我们刚才的话这边说到这个构造函数

39:52.310 --> 39:54.610
构造函数它是不是有自己的原型对象

39:55.130 --> 39:57.190
对不对那自己的原型对象这边这个portal

39:57.450 --> 39:58.970
这边是不是访问到这个原型对象

39:59.230 --> 40:01.030
就是哪里呢就是刚才这边打印的

40:01.790 --> 40:02.550
就是这个

40:05.220 --> 40:06.240
这边log

40:06.500 --> 40:07.520
比如说这个

40:07.780 --> 40:08.800
computer

40:09.320 --> 40:10.080
点这个

40:12.900 --> 40:13.400
就这个

40:13.660 --> 40:15.460
那这个的话是不是就是我这个

40:15.720 --> 40:17.760
构造函数的原型对象

40:18.020 --> 40:20.840
对不对构造函数的这个原型对象

40:21.100 --> 40:22.380
它指向这个位置

40:22.880 --> 40:24.940
好并且我这边这个原型对象

40:25.440 --> 40:27.760
那我们刚才看我们刚才看到是不是这个三角关系

40:28.520 --> 40:28.780
对不对

40:29.040 --> 40:31.580
这个三角关系然后接下来的话这个

40:31.840 --> 40:34.400
构造函数的portal type指向一个对象

40:34.660 --> 40:38.240
这个对象是它实力化出来对象的原型对象

40:38.500 --> 40:40.300
那它本身是不是也是对象

40:40.800 --> 40:42.860
那它是对象它也应该有什么

40:43.920 --> 40:46.220
它是不是也应该有自己的原型对象

40:46.480 --> 40:47.760
那它的原型对象是什么呢

40:48.020 --> 40:51.100
它的原型对象就是object.portal type

40:51.860 --> 40:52.360
可不可以啊

40:52.620 --> 40:55.440
好啦这个对象这个对象你再往上面去找

40:55.960 --> 40:57.760
就找到什么呢找到这个空

40:58.520 --> 41:00.060
啊我们这边我们可以来验证一下

41:00.320 --> 41:01.080
怎么来验证

41:01.840 --> 41:02.880
比如说我们这边

41:03.640 --> 41:05.680
好我们把这这边都注射掉啊

41:06.440 --> 41:07.980
好那我们这边来验证

41:09.520 --> 41:10.280
验证

41:14.030 --> 41:15.050
验证

41:15.350 --> 41:18.830
原型对象的终点

41:19.610 --> 41:21.150
是什么呢是空

41:21.910 --> 41:23.550
好那我们这边我们log一下

41:24.210 --> 41:25.750
我们刚才是不是有一个Apple

41:26.010 --> 41:26.410
ok

41:26.670 --> 41:27.550
ample

41:28.310 --> 41:30.110
点这个portal type

41:30.370 --> 41:31.890
ample.portal type

41:32.150 --> 41:32.670
就是它

41:33.190 --> 41:34.970
然后这样我们再来点portal type

41:36.250 --> 41:37.530
啊再来点portal type

41:37.790 --> 41:38.810
点portal type

41:39.330 --> 41:40.870
好我们打印出来我们看一下是什么

41:43.580 --> 41:44.860
你看是不是这个

41:45.120 --> 41:46.140
对不对 object

41:46.340 --> 41:48.000
然后接下来它是一个对象

41:48.260 --> 41:50.700
它是个对象它就是什么了它就是object

41:50.960 --> 41:51.720
然后portal type

41:51.980 --> 41:53.780
然后接下来我们这边再来

41:55.060 --> 41:56.080
点这个portal type

41:58.400 --> 41:58.920
是什么

41:59.180 --> 42:00.200
是不是就是空了

42:00.460 --> 42:00.960
对不对

42:01.220 --> 42:03.020
那有些人说那我这个空我在portal type

42:03.260 --> 42:04.300
你空就没有了

42:04.800 --> 42:08.900
我们之前在讲那个基本数据类型的时候我们讲过这个空是没有属性的方法

42:09.420 --> 42:11.980
对不对那你这边再来点portal type它就会爆错了吗

42:12.740 --> 42:13.760
你这边再来

42:14.020 --> 42:14.780
portal type

42:15.040 --> 42:16.060
那这边它就会爆错了

42:16.840 --> 42:17.340
对不对

42:17.540 --> 42:18.820
cantorate

42:19.340 --> 42:20.100
poverty

42:20.360 --> 42:21.380
of the null

42:23.800 --> 42:24.300
ok

42:24.560 --> 42:28.140
好那接下来我们这边就得出了这么一个结论

42:28.400 --> 42:29.180
怎么结论呢

42:29.440 --> 42:31.740
就是原形对象的这个终点

42:32.000 --> 42:32.760
是空

42:33.020 --> 42:34.800
通过这个图这个图也很形象

42:35.820 --> 42:37.360
对不对也很形象就这句话

42:37.620 --> 42:38.140
就这句话

42:38.640 --> 42:40.180
在这个结实中

42:40.700 --> 42:41.720
每一个对象

42:41.980 --> 42:44.020
都有一个原形对象

42:44.540 --> 42:47.100
原形对象上面也有一个自己的

42:47.360 --> 42:48.120
原形对象

42:48.580 --> 42:51.900
那一层一层向上找最终到达哪里

42:52.160 --> 42:53.800
最终是不到达这个

42:54.060 --> 42:54.560
no

42:54.980 --> 42:56.520
是不到达这个空这个位置啊

42:57.040 --> 42:57.540
对不对

42:57.800 --> 42:59.840
啊这边的话就是验证一下

43:00.360 --> 43:01.640
这边刚才是不是已经验证过了

43:02.160 --> 43:05.220
对不对这个ample点portal type点portal type

43:05.480 --> 43:05.980
啊

43:06.240 --> 43:10.080
ample是这个吗这个实例对象吗点portal type点portal type

43:10.340 --> 43:11.120
找到它

43:11.620 --> 43:12.140
对不对

43:13.160 --> 43:14.940
好大家再来portal type

43:15.200 --> 43:16.120
是不是就是call

43:16.520 --> 43:20.620
对不对大家这边这个portal typeportal type等价于object点portal type

43:20.880 --> 43:21.960
这个也是true

43:22.740 --> 43:23.500
比如我们这边

43:24.520 --> 43:25.280
再来一个

43:25.540 --> 43:26.580
这个portal type

43:26.840 --> 43:28.880
你现在是不是空这里是空

43:30.280 --> 43:33.740
这里是空好大家这边我们这边稍微少一层

43:34.240 --> 43:37.580
少一层他就等价于什么呢他就等价于object

43:37.840 --> 43:38.340
点

43:38.600 --> 43:39.380
portal type

43:39.880 --> 43:41.160
我们这边我们走

43:42.440 --> 43:42.940
看到没有

43:43.200 --> 43:44.480
是不是去啊

43:44.680 --> 43:45.700
然后你这边的话

43:45.960 --> 43:47.240
log

43:48.780 --> 43:49.560
object

43:50.580 --> 43:52.360
点portal type

43:52.620 --> 43:53.640
然后接下来

43:53.900 --> 43:55.700
点这个

43:55.960 --> 43:58.000
它的原型对象那这个应该是什么

43:58.520 --> 43:59.800
这个是不是也应该是call

44:00.300 --> 44:00.820
对不对

44:01.840 --> 44:02.860
也应该是空

44:04.860 --> 44:06.700
好这边是这个

44:07.460 --> 44:07.980
好

44:08.240 --> 44:14.380
然后你这个这个图这个图看完之后那你现在的话可能就有一个疑问就是我们这条线

44:14.580 --> 44:16.220
就这边这条线是不是走通了

44:16.740 --> 44:18.260
对不对就你这个对象

44:18.520 --> 44:19.920
它的原型对象

44:20.180 --> 44:22.620
它的原型对象让它最后找

44:22.880 --> 44:25.440
找了空也就是说整个这条线

44:25.700 --> 44:27.500
我们走通了但是关键这

44:28.520 --> 44:29.280
这很有意思

44:29.540 --> 44:30.760
这个是不是我们

44:31.020 --> 44:34.660
构造函数它的原型对象是不是就是这里一个对象

44:35.180 --> 44:37.220
那这个对象理论上来讲

44:37.480 --> 44:40.540
它是不是也应该最终走走走走一定是走向哪里的

44:40.800 --> 44:42.080
是不是走向这个空的

44:42.580 --> 44:44.140
对不对也就是这个对象这边

44:44.340 --> 44:45.360
它还对应的

44:45.620 --> 44:49.280
有一些东西就它的比如说它的原型对象是不是就直接指向它了

44:49.540 --> 44:53.320
还是说比如说还要经历两个对象或者三个对象才指向它

44:53.580 --> 44:55.360
这个对象现在是什么样子的

44:55.620 --> 44:56.720
那我们来看一下

44:56.980 --> 45:00.220
那最终的话就要放出这张完整的图了

45:01.240 --> 45:01.760
看到没有

45:02.020 --> 45:03.540
放出这张完整的图

45:04.580 --> 45:06.620
好这张完整的图其实就应该是什么了

45:06.880 --> 45:08.160
其实就应该是这个样子的

45:08.660 --> 45:09.680
好这个构造函数

45:09.940 --> 45:13.280
构造函数它的这个构造函数的这个原型对象

45:13.480 --> 45:14.420
原型对象

45:14.680 --> 45:16.560
它有没有原型对象呢有

45:16.820 --> 45:18.760
它的原型对象就指向哪里呢

45:19.020 --> 45:19.640
指向这个

45:21.420 --> 45:23.480
看到没有它的原型对象就指向这个

45:24.500 --> 45:26.280
好我们这边我们可以来验证一下

45:27.060 --> 45:28.600
怎么验证的很简单

45:29.100 --> 45:30.380
这边的话我们Nog

45:32.180 --> 45:33.720
Nog比如说我们这边

45:33.980 --> 45:34.980
computer

45:35.760 --> 45:36.780
构造函数

45:37.040 --> 45:39.340
构造函数然后接下来它有

45:39.600 --> 45:41.640
然后接下来点这个portal

45:42.520 --> 45:45.540
是不是指向它的这个构造函数的原型对象

45:45.800 --> 45:46.720
就目前到达哪里

45:46.980 --> 45:47.480
到达这里

45:48.000 --> 45:49.520
好然后接下来我们再来

45:50.300 --> 45:52.340
再来点这个portal

45:53.380 --> 45:53.880
点

45:54.140 --> 45:55.160
向往前portal

45:55.420 --> 45:56.440
它就应该指向哪里

45:56.700 --> 45:57.720
是不是指向这个位置

45:57.980 --> 45:58.480
对不对

45:58.740 --> 46:00.280
好然后接下来我们这边

46:01.560 --> 46:06.420
然后看它是否全等于object.portal type

46:06.680 --> 46:08.220
好然后接下来这边走

46:08.720 --> 46:09.240
看到没有

46:09.760 --> 46:10.520
是不是chew

46:11.040 --> 46:11.540
对不对

46:11.840 --> 46:12.360
是chew

46:14.680 --> 46:15.200
chew

46:16.480 --> 46:17.760
这个是没问题的

46:18.280 --> 46:19.360
好那接下来我们这边

46:19.600 --> 46:21.160
这条线是不是也就走通了

46:21.420 --> 46:24.680
对不对它有原型对象然后接下来这边继续到达

46:24.940 --> 46:25.700
到达这边

46:25.960 --> 46:28.260
然后接下来这里还有两个东西

46:28.760 --> 46:30.560
一个是object一个是function

46:31.320 --> 46:32.600
这两个是什么东西呢

46:32.860 --> 46:33.900
我们来思考一个问题

46:34.860 --> 46:35.940
你这边

46:38.910 --> 46:42.750
这边的话有一个object.portal type

46:43.010 --> 46:43.770
它是一个什么

46:44.030 --> 46:45.310
它是不是它是个对象

46:45.610 --> 46:46.110
对不对

46:46.370 --> 46:47.150
它是一个对象

46:47.410 --> 46:49.710
那这个对象比如说我们打印它的constructor

46:50.470 --> 46:51.510
比我们来到下面

46:51.770 --> 46:53.050
我们把这边

46:53.310 --> 46:54.570
这边都注射了吧

46:55.090 --> 46:56.370
这边打印的太多了

46:57.130 --> 46:58.410
我们把这边都注射掉

46:59.190 --> 47:00.470
把上面也注射掉

47:01.230 --> 47:03.270
凡是打印的我们都把它注射掉

47:04.050 --> 47:04.810
注射

47:05.590 --> 47:06.610
注射OK

47:06.870 --> 47:08.650
好那接下来思考一个问题

47:09.430 --> 47:10.970
就是object

47:11.470 --> 47:13.530
object.portal type

47:14.550 --> 47:15.310
是谁

47:15.870 --> 47:16.650
是不是就这个对象

47:17.150 --> 47:17.410
对不对

47:17.670 --> 47:19.190
这个对象再往上一层

47:19.450 --> 47:20.750
它的原型对象是不是就是空了

47:21.510 --> 47:21.770
对不对

47:22.030 --> 47:23.050
再往上一层

47:24.070 --> 47:25.350
再往上一层

47:28.720 --> 47:29.220
再

47:30.240 --> 47:31.520
往上一层

47:31.780 --> 47:34.340
也就是说这个下滑线下滑线

47:34.860 --> 47:35.360
portal

47:36.120 --> 47:36.900
就是什么呢

47:37.160 --> 47:38.440
就是这个空了

47:38.940 --> 47:40.740
那我们现在我们不打印这个portal

47:40.740 --> 47:42.620
因为我们已经知道再往上走就是空了

47:42.860 --> 47:44.320
让我们这边我们打印这个

47:45.860 --> 47:46.640
object

47:47.300 --> 47:49.920
点这个portal type

47:51.720 --> 47:52.640
这边少一个头

47:53.380 --> 47:54.020
portal type

47:54.280 --> 47:55.040
那我们打印什么呢

47:55.300 --> 47:57.340
打印这个constructor

47:58.100 --> 47:58.620
看到没有

47:58.880 --> 48:01.180
我们打印它的这个构造器

48:01.440 --> 48:03.240
我们回顾一下刚才的那个三角关系

48:04.000 --> 48:04.760
刚才这边

48:05.540 --> 48:06.820
这边的这个三角关系

48:07.080 --> 48:08.100
比方我这个原型对象

48:08.600 --> 48:11.420
原型对象它的这个constructor就会指向什么

48:11.680 --> 48:12.960
这指向这个构造函数

48:13.220 --> 48:16.300
那构造函数的portal type是不是就会指向这个原型对象

48:16.940 --> 48:17.360
对不对

48:17.620 --> 48:22.220
那并且这个构造函数实力化出来的这个实力对象的这个portal

48:22.480 --> 48:23.500
就指向这个

48:23.760 --> 48:24.520
原型对象

48:24.780 --> 48:27.040
好了接下来我打印它的constructor

48:27.300 --> 48:27.860
我们来看一下

48:30.250 --> 48:31.030
啊这边

48:33.360 --> 48:33.860
走

48:34.120 --> 48:36.680
哎你惊讶的发现这边出现的是什么

48:36.940 --> 48:38.480
是function object

48:39.240 --> 48:39.760
对不对

48:40.020 --> 48:41.300
function object就是谁呢

48:41.560 --> 48:43.080
function object其实就是他

48:43.600 --> 48:46.160
也就是说是object的构造函数

48:47.440 --> 48:47.940
看到没有

48:48.200 --> 48:49.740
object的构造函数

48:50.040 --> 48:52.480
那object的构造函数也就是这个

48:53.240 --> 48:54.400
这个构造函数

48:54.660 --> 49:00.280
其实干嘛呢其实创建了我们刚才的这个构造函数的原型对象

49:00.800 --> 49:05.160
那就实力化了应该说实力化出来了构造函数的原型对象

49:05.660 --> 49:08.480
然后它的这个portal type呢指向一个这个对象

49:09.000 --> 49:12.060
对不对这个对象就是这个实力对象的

49:12.320 --> 49:13.100
原型对象

49:13.360 --> 49:15.640
你看这边是不是又形成了一个三角关系

49:16.160 --> 49:16.920
你仔细看

49:17.180 --> 49:18.980
和这边的三角关系是不是一样的

49:19.840 --> 49:20.860
这边这个三角关系

49:21.120 --> 49:21.880
以及这边

49:22.660 --> 49:23.940
这边这个三角关系

49:24.200 --> 49:24.960
是不是一模一样

49:25.480 --> 49:25.980
对不对

49:26.240 --> 49:28.280
也就是说这个构造函数的这个

49:28.800 --> 49:29.820
原型对象

49:30.080 --> 49:32.640
啊这个原型对象是有什么是由他

49:33.400 --> 49:34.180
new出来的

49:34.680 --> 49:37.000
他new出来的然后接下来的话

49:37.240 --> 49:38.280
这个

49:38.780 --> 49:40.320
构造函数 object的这个

49:40.580 --> 49:42.620
好然后它有一个portal type属性

49:42.880 --> 49:43.900
是不是指向一个

49:44.680 --> 49:45.440
原型对象

49:45.700 --> 49:49.800
对不对指向一个对象这个对象就是谁呢就是他new出来的这个对象的

49:50.040 --> 49:50.820
原型对象

49:51.080 --> 49:54.140
从而这边的话又形成了一个

49:54.400 --> 49:55.680
三角关系

49:56.440 --> 49:57.720
又形成了一个三角关系

49:57.980 --> 50:00.040
这个的话你是可以去验证的

50:01.060 --> 50:02.840
可以去验证的我们怎么来验证一下呢

50:03.360 --> 50:04.380
比如我们这边的话

50:04.640 --> 50:07.960
object点constructor刚才是不是打印出他了

50:08.480 --> 50:08.740
对不对

50:09.000 --> 50:11.800
打印出他了之后然后接下来的话

50:12.320 --> 50:14.880
我想想这边怎么来进行一个验证

50:15.140 --> 50:16.680
然后我们这边通过这个

50:17.440 --> 50:18.980
构造函数的这个

50:19.240 --> 50:19.740
portal

50:19.940 --> 50:21.060
说可以访问到他

50:21.580 --> 50:22.100
对不对

50:22.360 --> 50:23.620
访问到他

50:24.400 --> 50:25.420
然后

50:26.180 --> 50:26.700
想想这里

50:28.500 --> 50:32.840
这里的话我也不能new他是吧因为new他的话他就是一个新的对象

50:33.100 --> 50:34.640
但是这边的话有条线可能没有

50:34.900 --> 50:37.860
有条线这条线的话就是他的这个就是这个

50:38.120 --> 50:39.000
他的原型对象

50:39.260 --> 50:40.020
也是他

50:40.780 --> 50:41.820
也是他

50:42.060 --> 50:43.860
有同学可能会觉得有点奇怪啊

50:44.120 --> 50:46.540
你这边的话就是这个对象明明是通过他

50:46.800 --> 50:49.220
new出来的为什么他原型对象也是他的

50:49.420 --> 50:50.460
其实到这一块

50:50.960 --> 50:55.840
到这一块的话他有些就是是一些比较特别的这个特性的比如你看这边这个方形

50:56.340 --> 50:57.100
方形你看

50:57.360 --> 51:00.700
他的这个portal和这个portal type是不是都是指向这个

51:00.960 --> 51:02.740
构造函数原型对象的

51:03.260 --> 51:03.760
对不对

51:04.020 --> 51:06.080
所以也就是这一块其实是比较特殊的

51:06.580 --> 51:08.880
那我们这边我们还是简单的验证一下吧

51:09.140 --> 51:10.160
比如说我们这边

51:11.440 --> 51:13.240
这个我们把它注释掉

51:13.500 --> 51:14.520
我们这边log一下

51:15.280 --> 51:17.600
log一下比如说computer

51:18.440 --> 51:20.360
computer点这个portal type

51:20.620 --> 51:21.400
这个portal

51:22.420 --> 51:23.760
portal然后到哪里

51:24.040 --> 51:25.240
portal是不是到这里

51:26.000 --> 51:26.380
对不对

51:26.640 --> 51:29.840
到这里的话然后他就应该是等价于

51:33.320 --> 51:37.160
他就应该等价于object点这个portal type

51:37.420 --> 51:38.960
点这个constructor

51:39.480 --> 51:40.240
到哪里了

51:40.500 --> 51:41.260
到这了

51:41.780 --> 51:44.340
啊然后接下再通过portal指回来

51:45.360 --> 51:46.380
再通过portal

51:46.640 --> 51:49.200
啊这边再点下滑线portal

51:49.600 --> 51:50.880
那这边就应该返回是什么了

51:51.120 --> 51:51.960
返回的是q

51:52.220 --> 51:53.500
我们这边我们可以看一下

51:57.260 --> 51:57.760
看到没有

51:58.020 --> 51:58.780
是不是去啊

51:59.300 --> 51:59.560
对不对

51:59.820 --> 52:02.120
也就是你这边的话你只要把这张图

52:02.880 --> 52:06.220
把这张图这个看懂了啊随便他怎么考

52:06.720 --> 52:08.780
随便他怎么考啊你这边随便怎么看

52:09.040 --> 52:13.120
我这边的话反正最终的话就是这个整个原型链的这个图其实就是这个样子的

52:13.880 --> 52:14.920
看没有除了这个部分

52:15.440 --> 52:17.220
这个部分稍微要特殊一些

52:17.740 --> 52:20.800
啊但是这边的话其实都是可能可以找到规律的

52:21.200 --> 52:22.080
这种的话就是你

52:22.340 --> 52:24.640
啊这个portal不停的找到找最终找到什么

52:24.900 --> 52:25.920
是不是找到这个call

52:26.440 --> 52:26.940
对不对

52:27.200 --> 52:28.220
最终找到这个空

52:28.480 --> 52:31.560
好我下面的话有这么一些验证我们来看一下啊

52:32.580 --> 52:33.860
比如这边computer

52:34.360 --> 52:35.140
点portal

52:35.400 --> 52:36.680
computer是他嘛

52:36.940 --> 52:37.180
对不对

52:37.440 --> 52:38.720
那他的这个portal

52:39.240 --> 52:40.500
他的portal是不是来到这

52:41.020 --> 52:43.320
对不对让家再来一个portal是不是来到这

52:43.580 --> 52:45.120
那再来个portal是不是call

52:45.640 --> 52:46.140
对不对

52:46.400 --> 52:47.940
好让家这个computer

52:48.700 --> 52:49.460
computer

52:49.720 --> 52:50.740
然后接下来portal

52:51.000 --> 52:54.340
portal的constructor注意constructor指向这个方形了

52:55.100 --> 52:56.640
方形这个构造函数

52:56.900 --> 52:59.720
然后接下来再点这个portal是不是又指回来了

53:00.480 --> 53:03.540
对不对又指回来了指回来了家他就等价于

53:03.800 --> 53:04.840
computer点portal

53:05.100 --> 53:06.620
他最终返回的也是true

53:06.880 --> 53:09.180
看没有就随便他这随便这怎么考

53:09.700 --> 53:11.240
啊你根据这张图去找

53:11.500 --> 53:12.500
一定没有问题的

53:12.760 --> 53:13.020
啊

53:13.540 --> 53:15.580
那computer点portal点portal

53:16.100 --> 53:18.660
我们来看一下computer photo photo是不object

53:19.120 --> 53:20.040
点constructor

53:20.300 --> 53:21.020
constructor是不他

53:21.440 --> 53:23.740
他然后接下来点portal是不是又指回来了

53:24.240 --> 53:27.060
对不对全等于computer点portal

53:27.320 --> 53:29.880
是不是又指回来了对不对所以最终也是true

53:30.140 --> 53:31.400
我们这边我们可以看一下吗

53:34.320 --> 53:35.360
把这三个看一下

53:36.120 --> 53:37.140
把这个注释掉

53:38.420 --> 53:38.680
啊

53:38.940 --> 53:40.220
大家这边走

53:41.240 --> 53:42.000
是不是也是true

53:42.260 --> 53:44.300
对不对啊第一个第一个是这个空

53:44.820 --> 53:45.340
看到没有

53:45.600 --> 53:48.140
说最终的话我们原型链的这个图啊

53:48.400 --> 53:50.200
其实就是长这个样子的

53:50.660 --> 53:53.220
这个部分的话稍微特殊一些

53:53.480 --> 53:56.820
但是他一般考的话也不会考你啊比如我这边这个方形

53:57.080 --> 53:58.080
然后接下这个portal

53:58.340 --> 53:59.120
他指向哪里

54:00.140 --> 54:02.440
台湾也不会考啊其实他考也不怕

54:02.960 --> 54:06.280
对不对你根据我这张图然后加你一步一步去找就可以了

54:07.560 --> 54:09.600
啊这是关于这个原型和原型链

54:10.380 --> 54:13.700
好那接下回头再来看这个面试题就很简单了啊

54:14.480 --> 54:18.060
所以说你对javascript中原型和原型链的理解

54:18.320 --> 54:20.100
那你首先解释什么是原型

54:20.880 --> 54:23.780
对吧那每一个对象什么都有自己的原型对象

54:24.040 --> 54:25.580
那怎么找到原型对象呢

54:25.840 --> 54:27.620
通过这个下滑线下滑线portal

54:28.400 --> 54:29.680
是不是找到这个原型对象

54:30.440 --> 54:33.260
好大家每个构造函数有这个portal type属性

54:34.020 --> 54:36.080
该属性指向实力对象的

54:36.340 --> 54:37.360
原型对象

54:37.860 --> 54:38.380
对吧

54:38.640 --> 54:40.940
原型对象里的这个constructor

54:41.200 --> 54:43.240
指向这个构造函数本身

54:43.500 --> 54:45.040
其实就是什么了是不是就是这张图啊

54:46.060 --> 54:49.640
对吧把这个三角关系啊这个三角关系是一定要掌握的

54:50.400 --> 54:50.920
明白吧

54:52.200 --> 54:57.580
好大家每个对象都有自己的原型对象而原型对象本身也有自己的原型对象

54:57.840 --> 54:58.860
从而形成什么

54:59.120 --> 55:00.400
是形成这个原型链

55:01.160 --> 55:01.680
对不对

55:01.940 --> 55:05.760
那比如说我在我的这个对象在我的这个实力对象上面我找一个属性

55:06.280 --> 55:08.320
没找到他就会去哪里去找

55:08.580 --> 55:10.380
就去这个原型对象上面去找

55:10.640 --> 55:11.660
原型对象上面

55:11.920 --> 55:15.240
没找到就会再去找原型对象的原型对象

55:16.000 --> 55:16.520
对不对

55:17.240 --> 55:21.340
而对一个构造函数实力化之后

55:21.600 --> 55:24.140
实力化之后让家这边是不是会生成一个实力对象

55:24.400 --> 55:26.200
他的原型链指向什么

55:26.960 --> 55:28.240
原型链

55:28.760 --> 55:31.840
那你这边就是他的首先这边他会有一个这个原型对象吗

55:32.600 --> 55:33.120
对不对

55:33.620 --> 55:37.200
有个原型对象啊原型对象然后接下来话这个原型对象

55:37.460 --> 55:38.480
这个constructor

55:39.000 --> 55:42.320
指向这个构造函数构造函数的portotype指向这个

55:42.580 --> 55:43.100
原型对象

55:43.560 --> 55:48.320
原型对象再找这个原型对象他就是object点portotype

55:48.580 --> 55:50.220
再找原型对象是不是就是call

55:50.980 --> 55:51.500
对不对

55:53.300 --> 55:56.620
这就是整个这个原型和原型链啊

55:56.880 --> 55:58.680
非常重要的一个知识点

55:58.940 --> 55:59.940
我们这边也

56:00.200 --> 56:01.740
差不多花了接近一个小时

56:02.000 --> 56:02.500
来讲

56:02.760 --> 56:05.580
就这个这个部分一定要过关特别是这个三角关系

56:06.600 --> 56:09.920
我一般要求学生就是这个三角关系你一定要看懂

56:10.640 --> 56:16.520
然后还需要知道什么呢还需要知道原型对象一直往上面找一直往上面找最终找到什么呢找到空

56:16.780 --> 56:18.840
就这两个知识点你一定要搞清楚

56:19.100 --> 56:19.600
好吧

56:20.120 --> 56:21.480
啊但完整的你这边

56:21.740 --> 56:24.980
就是也可以去看一下这个完整的完整的话就是就是这个样子的

56:26.520 --> 56:29.080
啊这是关于这个原型和原型链

56:29.580 --> 56:32.920
好这节课就先到这里啊大家下来把这看一下

56:33.180 --> 56:33.940
啊拜拜

