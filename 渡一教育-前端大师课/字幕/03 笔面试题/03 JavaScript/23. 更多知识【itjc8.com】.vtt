WEBVTT

00:00.620 --> 00:05.620
好 这节课的话是我们这个JS 笔面实体的最后一堂课

00:05.620 --> 00:09.620
而这堂课的话不会涉及到任何的这个就是知识啊

00:09.620 --> 00:13.620
这堂课的话更多的就是一堂这个引导的课

00:13.620 --> 00:15.620
就是告诉大家就是有些知识

00:15.620 --> 00:20.620
我们之前的这个笔面实体 谢老师的话没有讲到

00:20.620 --> 00:24.620
那这部分知识呢 是不是就是没有呢 不是

00:24.620 --> 00:27.620
这部分知识的话 其实是在其他的课程里面

00:27.620 --> 00:29.620
老师的话已经讲了的

00:29.620 --> 00:32.620
只不过这部分知识的话 他有一个特点

00:32.620 --> 00:36.620
什么特点呢 就是首先第一个 他这个面试的话

00:36.620 --> 00:40.620
他偶尔会被问到 不是说不会被问到

00:40.620 --> 00:45.620
他偶尔会被问到 但是呢 他被问到的几率比较低

00:45.620 --> 00:47.620
这是首先第一个

00:47.620 --> 00:50.620
其次的话 就是这部分知识的话

00:50.620 --> 00:55.620
实际上在实际的编码中 其实用的不是那么太多

00:55.620 --> 00:59.620
就是普通的话 你比如做个项目

00:59.620 --> 01:02.620
普普通通的比如做项目 项目需求来了 做项目

01:02.620 --> 01:06.620
基本上其实不怎么用得到这部分知识

01:06.620 --> 01:08.620
这部分知识的话 更多的是什么呢

01:08.620 --> 01:10.620
更多的是比如你要写框架的时候

01:10.620 --> 01:13.620
或者你要去研究框架的时候

01:13.620 --> 01:15.620
比如你自己要写个框架

01:15.620 --> 01:17.620
或者你要去研究别人的框架

01:17.620 --> 01:20.620
那可能需要这部分知识 OK

01:20.620 --> 01:22.620
那这部分知识有哪些呢

01:22.620 --> 01:25.620
首先第一个就是关于这个符号

01:25.620 --> 01:26.620
symbol

01:26.620 --> 01:29.620
symbol的话 它是属于这个ES6

01:29.620 --> 01:31.620
ES6里面的这个内容

01:31.620 --> 01:33.620
symbol的话 它主要的作用是什么呢

01:33.620 --> 01:36.620
主要作用的话 然后有这么三个

01:36.620 --> 01:39.620
首先第一个就是消除魔法 制服

01:39.620 --> 01:41.620
然后还有就是什么呢

01:41.620 --> 01:43.620
避免一个复杂的对象中

01:43.620 --> 01:48.620
你有多个属性 被其他的属性给覆盖

01:48.620 --> 01:51.620
第三个的话 就是模拟这个类

01:51.620 --> 01:53.620
模拟类的私有方法

01:53.620 --> 01:56.620
当我这边的话列举了三个场景

01:56.620 --> 01:59.620
这三个场景的话可能有的同学知道

01:59.620 --> 02:01.620
有的同学的话不知道

02:01.620 --> 02:04.620
不知道的同学的话也无所谓

02:04.620 --> 02:06.620
这边的话你就应该去看什么呢

02:06.620 --> 02:09.620
你这边的话就应该去看这个ES6

02:09.620 --> 02:10.620
详细版

02:10.620 --> 02:14.620
这个的话是袁晋老师讲的课

02:14.620 --> 02:16.620
就是在这边

02:16.620 --> 02:19.620
在这边 这个是我看是在哪里

02:19.620 --> 02:23.620
是在我们的职业生化课程1里面

02:23.620 --> 02:24.620
看到没有

02:24.620 --> 02:29.620
职业生化课程1里面有一个ES6的详细版

02:29.620 --> 02:31.620
这个是袁晋老师讲的

02:31.620 --> 02:33.620
它这里面的话就覆盖了

02:33.620 --> 02:36.620
当然这里的话就全是ES6的内容

02:36.620 --> 02:39.620
但ES6的内容的话 同学们学过一些

02:39.620 --> 02:42.620
比如说这些什么这个NetConst

02:42.620 --> 02:44.620
大家制服串

02:44.620 --> 02:47.620
大家这个函数对象这些是不是都学过的

02:47.620 --> 02:48.620
对不对

02:48.620 --> 02:51.620
但是有一部分内容的话没有学过

02:51.620 --> 02:53.620
有一部分内容没有学过

02:53.620 --> 02:55.620
没有学过的内容的话

02:55.620 --> 02:57.620
在那个笔面是体里面

02:57.620 --> 02:58.620
我也没有提及到

02:58.620 --> 03:00.620
所以你这边就直接干嘛呢

03:00.620 --> 03:04.620
直接看这个袁老师的这个ES6

03:04.620 --> 03:06.620
详细版的这个对应章节

03:06.620 --> 03:08.620
我这边的话给你标出来了

03:08.620 --> 03:09.620
看到没有

03:09.620 --> 03:10.620
比如这个符号

03:10.620 --> 03:12.620
符号的话是它的这个第七个章节

03:12.620 --> 03:15.620
就是我们找一下第七个在这里

03:16.620 --> 03:17.620
是不是符号

03:17.620 --> 03:18.620
对不对

03:18.620 --> 03:21.620
这边的话袁老师的话就针对这个符号Symbol

03:21.620 --> 03:25.620
这个就是ES6里面新提供的一种数据类型

03:25.620 --> 03:26.620
对吧

03:26.620 --> 03:27.620
可能有的同学知道

03:27.620 --> 03:28.620
有的同学不知道

03:28.620 --> 03:29.620
这个都无所谓

03:29.620 --> 03:31.620
你只要把这个看了

03:31.620 --> 03:32.620
你就知道了

03:32.620 --> 03:33.620
没有吧

03:33.620 --> 03:34.620
那你到时候的话

03:34.620 --> 03:37.620
你把这个把这个这几个课程看了

03:37.620 --> 03:39.620
你也就知道这三个是什么意思了

03:39.620 --> 03:40.620
我说了

03:40.620 --> 03:41.620
这节课的话

03:41.620 --> 03:43.620
我不涉及到任何的这个技术点

03:43.620 --> 03:45.620
不会涉及到任何的技术点

03:45.620 --> 03:46.620
我这边的话就是一个引导

03:46.620 --> 03:48.620
告诉你有哪些内容

03:48.620 --> 03:49.620
如果

03:49.620 --> 03:51.620
有一些就是

03:51.620 --> 03:53.620
笔面是提没讲到的内容

03:53.620 --> 03:54.620
那你这边的话

03:54.620 --> 03:58.620
应该去看这个袁老师对应的课程的哪个章节

03:58.620 --> 04:00.620
这些课是这个目的

04:00.620 --> 04:01.620
好

04:01.620 --> 04:02.620
那第二个

04:02.620 --> 04:05.620
第二个的话是这个迭代器和生成器

04:05.620 --> 04:06.620
迭代器和生成器的话

04:06.620 --> 04:07.620
这个的话

04:07.620 --> 04:09.620
袁老师的话也是讲了的

04:09.620 --> 04:11.620
对应的是第十个章节

04:11.620 --> 04:13.620
迭代器和生成器

04:13.620 --> 04:14.620
这个的话

04:14.620 --> 04:15.620
其实有

04:15.620 --> 04:17.620
应该是有同学知道的

04:17.620 --> 04:20.620
这个是我们异步的一种方式

04:20.620 --> 04:21.620
我们异步

04:21.620 --> 04:24.620
从最早的这个回调函数

04:24.620 --> 04:25.620
到什么呢

04:25.620 --> 04:27.620
到这个promise

04:27.620 --> 04:28.620
对不对

04:28.620 --> 04:29.620
promise完了之后

04:29.620 --> 04:30.620
然后接下来到什么呢

04:30.620 --> 04:33.620
到这个迭代器和生成器

04:33.620 --> 04:34.620
那有同学说

04:34.620 --> 04:35.620
不对啊

04:35.620 --> 04:37.620
最新的这个异步的方式

04:37.620 --> 04:39.620
不是async await吗

04:39.620 --> 04:40.620
对

04:40.620 --> 04:42.620
迭代器和生成器之后

04:42.620 --> 04:45.620
出现了async await

04:45.620 --> 04:47.620
因为这个迭代器和生成器

04:47.620 --> 04:48.620
实现异步的这个写法

04:48.620 --> 04:50.620
还是比较麻烦

04:50.620 --> 04:51.620
所以说后面的话就出现了

04:51.620 --> 04:54.620
async await愚法汤

04:54.620 --> 04:55.620
这个的话

04:55.620 --> 04:56.620
现在有没有用呢

04:56.620 --> 04:59.620
就是这个react里面

04:59.620 --> 05:00.620
react里面的话

05:00.620 --> 05:03.620
大量用到了这个迭代器和生成器

05:03.620 --> 05:04.620
特别是这个生成器

05:04.620 --> 05:06.620
你后面你学这个react的时候

05:06.620 --> 05:08.620
袁老师会给你讲到

05:08.620 --> 05:10.620
哪些地方用到了生成器

05:10.620 --> 05:12.620
那你如果把这个生成器

05:12.620 --> 05:13.620
对应了这个课程

05:13.620 --> 05:14.620
你把它看了之后

05:14.620 --> 05:17.620
那回头你再去看react的这个圆码

05:17.620 --> 05:19.620
就没那么吃力

05:19.620 --> 05:20.620
对吧

05:20.620 --> 05:21.620
包括这个koa

05:21.620 --> 05:22.620
koa的话

05:22.620 --> 05:23.620
但是第一代

05:23.620 --> 05:25.620
现在最新的koa是第二代

05:25.620 --> 05:26.620
第一代的话

05:26.620 --> 05:28.620
也是大量的使用到了生成器

05:28.620 --> 05:29.620
比如我这边

05:29.620 --> 05:30.620
可以给大家看一下

05:30.620 --> 05:32.620
比如我这边

05:32.620 --> 05:34.620
快速的给你搭个项目

05:34.620 --> 05:36.620
说了今天

05:36.620 --> 05:37.620
就这一节课

05:37.620 --> 05:38.620
不涉及到代码

05:38.620 --> 05:40.620
结果还是涉及到代码

05:40.620 --> 05:42.620
当这个很快

05:42.620 --> 05:44.620
我这快速给你拉一个项目

05:44.620 --> 05:45.620
好

05:45.620 --> 05:46.620
然后接下来这边

05:46.620 --> 05:48.620
这边让我们把它拖到

05:48.620 --> 05:49.620
viscode里面

05:49.620 --> 05:53.700
来我们来lowy

05:53.700 --> 05:54.700
我这放大一点

05:54.700 --> 05:56.700
我平时写代码的话

05:56.700 --> 05:58.700
这个放的比较小

05:58.700 --> 06:00.700
当怪我这个电脑比较小

06:00.700 --> 06:02.700
开个啥呢

06:02.700 --> 06:04.700
这个入程随便开一个

06:04.700 --> 06:05.700
这边

06:05.700 --> 06:06.700
你看

06:06.700 --> 06:09.700
这是不是就是用到的是一个生成器

06:09.700 --> 06:10.700
对不对

06:10.700 --> 06:11.700
function

06:11.700 --> 06:12.700
新号

06:12.700 --> 06:13.700
这里有个新号

06:13.700 --> 06:15.700
包括这里也是有个新号

06:15.700 --> 06:16.700
你看不懂无所谓

06:16.700 --> 06:18.700
你看不懂是因为你没学

06:18.700 --> 06:20.700
有的同学看得懂

06:20.700 --> 06:22.700
有的同学可能他之前学过生成器

06:22.700 --> 06:23.700
他看得懂

06:23.700 --> 06:24.700
有一部分同学

06:24.700 --> 06:26.700
特别是零基础

06:26.700 --> 06:27.700
跟着我们杜一

06:27.700 --> 06:29.700
零基础开始学的同学

06:29.700 --> 06:30.700
你这个你看不懂

06:30.700 --> 06:31.700
那这个很正常

06:31.700 --> 06:32.700
因为你没学

06:32.700 --> 06:34.700
你也不要着急

06:34.700 --> 06:35.700
你这边看不懂的话

06:35.700 --> 06:36.700
我这边是不是告诉你了

06:36.700 --> 06:37.700
该去看什么

06:37.700 --> 06:38.700
对不对

06:38.700 --> 06:41.700
看哪个具体哪个章节

06:41.700 --> 06:42.700
第三个

06:42.700 --> 06:43.700
第三个的话就是这个

06:43.700 --> 06:46.700
代理和反射

06:46.700 --> 06:48.700
代理和反射的话就是这个

06:48.700 --> 06:51.700
代理就是这个proxy

06:51.700 --> 06:53.700
反射就是这个reflect

06:53.700 --> 06:54.700
这两个

06:54.700 --> 06:55.700
就这一部分

06:55.700 --> 06:56.700
就是这个部分

06:56.700 --> 06:57.700
代理和反射

06:57.700 --> 06:59.700
它其实是属于什么呢

06:59.700 --> 07:01.700
属于原编程的姿势

07:01.700 --> 07:02.700
但有同学会问

07:02.700 --> 07:04.700
什么叫做原编程

07:04.700 --> 07:06.700
所谓原编程就是

07:06.700 --> 07:07.700
利用一些

07:07.700 --> 07:09.700
这个语言的特性

07:09.700 --> 07:10.700
比如这个proxy

07:10.700 --> 07:12.700
reflect这种语言的特性

07:12.700 --> 07:14.700
给我们的一门编程语言

07:14.700 --> 07:17.700
添加新的这个特性

07:17.700 --> 07:18.700
看到没有

07:18.700 --> 07:19.700
这个一般也是就是

07:19.700 --> 07:21.700
在写框架的时候才会用的

07:21.700 --> 07:22.700
原编程

07:22.700 --> 07:23.700
比如说

07:23.700 --> 07:25.700
其实你们之前是接触过的

07:25.700 --> 07:26.700
原编程的语法

07:26.700 --> 07:27.700
你们之前是接触过的

07:27.700 --> 07:30.700
比如说object.define property

07:30.700 --> 07:31.700
还记不记得

07:31.700 --> 07:34.700
那个是不是属性描述和

07:34.700 --> 07:35.700
对不对

07:35.700 --> 07:36.700
那个的话

07:36.700 --> 07:37.700
其实它就是属于

07:37.700 --> 07:39.700
这个原编程的这个范畴

07:39.700 --> 07:42.700
你看这个voe2.j的时候

07:42.700 --> 07:44.700
就是voe2.x的时候

07:44.700 --> 07:46.700
它添加的那个响应式

07:46.700 --> 07:48.700
它的那个响应式原理里面

07:48.700 --> 07:51.700
是不是就用到了object.define property

07:51.700 --> 07:52.700
对不对

07:52.700 --> 07:53.700
然后回头的话

07:53.700 --> 07:54.700
你的整个这个

07:54.700 --> 07:56.700
就是voe里面

07:56.700 --> 07:58.700
它有一个这个响应式的这个变化

07:58.700 --> 07:59.700
数据一变

07:59.700 --> 08:01.700
然后这样试图就变化

08:01.700 --> 08:02.700
对不对

08:02.700 --> 08:04.700
你看它是不是就是给它的这个语言本身

08:04.700 --> 08:06.700
添加了一个新的特性

08:06.700 --> 08:07.700
对不对

08:07.700 --> 08:08.700
j是本来没有这个东西

08:08.700 --> 08:10.700
通过你j是提供的这些工具

08:10.700 --> 08:14.700
我给你创建一个新的这种语法出来

08:14.700 --> 08:15.700
看到没有

08:15.700 --> 08:16.700
这个就叫做原编程

08:16.700 --> 08:18.700
这叫原编程

08:18.700 --> 08:19.700
好

08:19.700 --> 08:20.700
然后这个proxy

08:20.700 --> 08:21.700
proxy的话

08:21.700 --> 08:23.700
到时候就是大家学了之后

08:23.700 --> 08:25.700
voe3.0

08:25.700 --> 08:27.700
它就是用的是这个proxy

08:27.700 --> 08:30.700
它没有再用这个object.define property了

08:30.700 --> 08:33.700
因为这个的话有一定的这个缺陷

08:33.700 --> 08:35.700
所以voe3.0的话

08:35.700 --> 08:37.700
它的那个就是响应式原理里面

08:37.700 --> 08:40.700
就由这个object.define property

08:40.700 --> 08:42.700
改成了proxy

08:42.700 --> 08:44.700
改成了这个

08:44.700 --> 08:46.700
然后还要包括这个reflect

08:46.700 --> 08:48.700
这个的话是这个反射

08:48.700 --> 08:49.700
大家下去的话

08:49.700 --> 08:51.700
可以把这个章节看一下

08:51.700 --> 08:52.700
好

08:52.700 --> 08:53.700
然后最后一个

08:53.700 --> 08:55.700
最后一个的话就是关于这个

08:55.700 --> 08:58.700
javascript的这个类型化数组

08:58.700 --> 09:01.700
它是一种这种类似数组的这个对象

09:01.700 --> 09:02.700
提供了一种什么呢

09:02.700 --> 09:05.700
就是访问二净子数据的机制

09:05.700 --> 09:07.700
我们知道最早的话

09:07.700 --> 09:09.700
这个js是没办法访问这个

09:09.700 --> 09:11.700
二净子的对不对

09:11.700 --> 09:12.700
最早的话

09:12.700 --> 09:14.700
因为js最早就是在哪里跑

09:14.700 --> 09:16.700
是不是在浏览器跑

09:16.700 --> 09:17.700
对不对

09:17.700 --> 09:18.700
它没有提供这个

09:18.700 --> 09:21.700
访问二净子数据的机制

09:21.700 --> 09:22.700
一般是什么呢

09:22.700 --> 09:23.700
一般是服务器端语言

09:23.700 --> 09:25.700
比如什么java

09:25.700 --> 09:27.700
PGP这种服务器端语言

09:27.700 --> 09:29.700
它才会提供这个

09:29.700 --> 09:31.700
就是访问二净子数据的这种

09:31.700 --> 09:32.700
这个机制

09:32.700 --> 09:33.700
但后来的话

09:33.700 --> 09:35.700
后来的故事大家也知道了

09:35.700 --> 09:37.700
漏的js出来了对不对

09:37.700 --> 09:38.700
漏的js出来

09:38.700 --> 09:41.700
我们的js可以作为一门

09:41.700 --> 09:42.700
服务器端语言

09:42.700 --> 09:44.700
那么自然而然这些东西

09:44.700 --> 09:45.700
这些东西

09:45.700 --> 09:47.700
它自然而然也就出来了

09:47.700 --> 09:49.700
包括什么读取文件啊这些

09:49.700 --> 09:51.700
你想想以前那个js哪有什么

09:51.700 --> 09:52.700
读取文件吗

09:52.700 --> 09:53.700
对不对

09:53.700 --> 09:55.700
js都能读取文件了

09:55.700 --> 09:56.700
好危险啊

09:56.700 --> 09:57.700
对不对

09:57.700 --> 10:00.700
当然随着漏的js出现

10:00.700 --> 10:03.700
那js在漏的里面

10:03.700 --> 10:05.700
它也是有读取文件的

10:05.700 --> 10:06.700
API的

10:06.700 --> 10:07.700
这些的话

10:07.700 --> 10:09.700
其实对于服务器端语言来讲

10:09.700 --> 10:12.700
这些都是理所应当的

10:13.700 --> 10:14.700
你知道吧

10:14.700 --> 10:15.700
无论你去学

10:15.700 --> 10:17.700
任何一门服务器端语言

10:17.700 --> 10:19.700
无论你去学java也好

10:19.700 --> 10:20.700
你学PHP也好

10:20.700 --> 10:22.700
或者学其他的什么Person Ruby

10:22.700 --> 10:24.700
找你是开发web服务器

10:24.700 --> 10:25.700
那这些的话

10:25.700 --> 10:26.700
都是理所应当的

10:26.700 --> 10:27.700
应该有的

10:30.700 --> 10:32.700
然后类型数组

10:32.700 --> 10:34.700
它除了就是

10:34.700 --> 10:37.700
提供了访问二进制的

10:37.700 --> 10:39.700
数据的机制以外

10:39.700 --> 10:42.700
它js引擎还做了一些优化

10:42.700 --> 10:45.700
方便你对这个数组的操作

10:45.700 --> 10:47.700
就是更快一些

10:47.700 --> 10:48.700
OK

10:48.700 --> 10:49.700
这个的话

10:49.700 --> 10:51.700
就是咱们也是讲了的

10:51.700 --> 10:52.700
这个你可以去看

10:52.700 --> 10:53.700
袁老师的这一张节

10:53.700 --> 10:54.700
看了没有

10:54.700 --> 10:56.700
这个十三增强的数组功能

10:56.700 --> 10:58.700
新增的API

10:58.700 --> 11:00.700
类型化数组

11:00.700 --> 11:02.700
还有OriBuffer

11:02.700 --> 11:03.700
这些

11:03.700 --> 11:04.700
OK

11:04.700 --> 11:05.700
所以这一节课的话

11:05.700 --> 11:08.700
其实就是一个引导课

11:08.700 --> 11:10.700
就是为了告诉大家

11:10.700 --> 11:11.700
就是有些东西

11:11.700 --> 11:13.700
虽然这个笔面是提里面

11:13.700 --> 11:14.700
没有提到

11:14.700 --> 11:16.700
但是不是说我们没有讲

11:16.700 --> 11:17.700
讲了的

11:17.700 --> 11:18.700
但是这个东西的话

11:18.700 --> 11:19.700
就是因为比较长

11:19.700 --> 11:20.700
看了没有

11:20.700 --> 11:21.700
所以说我们这边

11:21.700 --> 11:22.700
都是放在后面的

11:22.700 --> 11:24.700
你这边一些相关的张节的话

11:24.700 --> 11:25.700
你如果想看的话

11:25.700 --> 11:26.700
可以直接

11:26.700 --> 11:28.700
移步到这个ES6详细版

11:28.700 --> 11:30.700
对应的这些位置

11:30.700 --> 11:31.700
这些位置

11:31.700 --> 11:33.700
我就没有必要单独来录制了

11:33.700 --> 11:35.700
这些东西我就没有必要

11:35.700 --> 11:36.700
单独来录制了

11:36.700 --> 11:37.700
因为

11:37.700 --> 11:38.700
这些东西

11:38.700 --> 11:40.700
本身我一开始就说了的

11:40.700 --> 11:41.700
本身就是面试的话

11:41.700 --> 11:43.700
它被问到的几率就比较低

11:43.700 --> 11:44.700
对不对

11:44.700 --> 11:45.700
还有就是你实际编码

11:45.700 --> 11:47.700
实际编码也用的不太多

11:47.700 --> 11:48.700
好吧

11:48.700 --> 11:49.700
ok

11:49.700 --> 11:51.700
这节课就到这里

11:51.700 --> 11:52.700
再见

