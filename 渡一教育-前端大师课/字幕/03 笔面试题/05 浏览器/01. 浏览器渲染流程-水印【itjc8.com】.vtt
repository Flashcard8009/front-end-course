WEBVTT

00:00.000 --> 00:02.880
OK 咱们准备开始上课

00:02.880 --> 00:08.520
欢迎大家进入到第三阶段的浏览器的笔面实体

00:08.520 --> 00:12.880
这一节课的话是整个浏览器这一张

00:12.880 --> 00:15.600
最最最重要的一节课

00:15.600 --> 00:19.680
可以说就是整个浏览器这一张的话

00:19.680 --> 00:22.720
其实你能把这一节课掌握

00:22.720 --> 00:26.880
你其实基本就已经超越其他前段开发者

00:27.040 --> 00:33.040
至少在这个浏览器这一块已经超过他们百分之七八十了

00:33.040 --> 00:36.480
ok 这一节课的话讲什么呢

00:36.480 --> 00:40.320
主要是讲这个浏览器的渲染流程

00:41.440 --> 00:47.040
这个的话很少有人能够把整个完整的这个渲染流程

00:47.040 --> 00:48.800
能够把它讲得清楚

00:50.280 --> 00:52.960
所以这节课的话咱们花一点时间啊

00:52.960 --> 00:55.320
这节课的话可能时间会比较长啊

00:55.320 --> 00:57.560
因为它这边的话有这么多个步骤

00:57.560 --> 00:59.560
咱们一点一点来看

01:00.280 --> 01:03.800
ok 整个浏览器这一张

01:03.800 --> 01:08.040
如果你时间紧的话你就把这节课听了就ok了

01:08.040 --> 01:08.600
知道吧

01:08.600 --> 01:13.720
我们那个就是那个学习那个大纲里面不是分了那个三个吗

01:13.720 --> 01:16.040
对吧一个是毕学的一个是选学的

01:16.040 --> 01:20.440
然后还有一个反正就是一个是红色的一个蓝色一个绿色对吧

01:20.440 --> 01:22.520
这个的话就是属于毕学的

01:22.600 --> 01:26.360
就这一个啊就这一个把这个搞清楚啊

01:26.360 --> 01:30.200
你浏览器这一块的话其实就已经超越百分之七八十的

01:30.200 --> 01:32.600
这个其他的前装开发者了

01:32.600 --> 01:32.840
好吧

01:33.880 --> 01:34.840
ok 我们来看一下

01:36.360 --> 01:39.320
这边的话就是这里其实就是整个流程啊

01:39.320 --> 01:40.680
那我们一个一个来看

01:41.320 --> 01:45.640
首先关于这个浏览器渲染的一个整体流程

01:46.680 --> 01:51.240
那我们平时在上网的时候我们一般就会认为什么呢

01:51.240 --> 01:53.960
比如说我这边输入一个网址啊把这关了

01:54.600 --> 01:57.320
然后我这边输入一个网址我输入一个京东对吧

01:57.320 --> 01:59.720
京东点看我啊我一敲回车

02:00.520 --> 02:03.160
一敲回车这个网页是不是立即就出来了

02:04.200 --> 02:05.160
对吧好

02:05.160 --> 02:09.160
那我们很长一段时间的话可能就很多同学会认为

02:09.160 --> 02:11.960
这个就是一个理所应当的事情

02:12.600 --> 02:14.520
啊这难道不应该这样子吗啊

02:14.520 --> 02:17.240
比如说我这边的话我输入一个淘宝

02:17.960 --> 02:22.920
啊一输啊一按下回车之后呢这边就该显示网页啊

02:22.920 --> 02:25.240
啊就感觉这是一个理所当然的事情

02:25.800 --> 02:28.760
但其实不是的啊不是的

02:28.760 --> 02:30.920
其实在浏览器背后

02:31.480 --> 02:33.480
他做了大量的工作

02:35.000 --> 02:38.120
ok 做了大量的工作啊只是这些工作的话

02:38.120 --> 02:40.760
他完成的时间极短啊被你就是

02:41.320 --> 02:42.840
就是不被你看到而已

02:42.840 --> 02:44.920
所以你感觉好像就是你敲了这个

02:45.560 --> 02:47.000
敲了这个网址

02:47.400 --> 02:49.880
啊然后下这个马上就显示出页面

02:49.880 --> 02:51.640
好像就是这个是第一步啊

02:51.640 --> 02:54.760
然后接下来马上第二步他就是把网页就呈现出来了

02:55.560 --> 02:56.920
啊其实不是的

02:56.920 --> 02:59.880
ok啊他其实是一步一步来的

03:01.320 --> 03:02.360
一步一步来的

03:02.360 --> 03:06.120
他背后的话其实做了很多很多的事情

03:06.920 --> 03:11.800
啊比如说第一步的话他就会去这个解析你的域名

03:11.800 --> 03:14.120
啊你看你输入的时候你是用的是什么

03:14.760 --> 03:16.440
你输入的是这个域名

03:17.240 --> 03:18.280
对不对

03:18.280 --> 03:19.800
你输入的是域名

03:20.840 --> 03:24.600
好然后回头的话他需要对这个域名进行一个解析

03:24.600 --> 03:26.680
把它解析成ip 地址

03:26.680 --> 03:29.240
啊然后接下来再发网络请求

03:29.240 --> 03:33.240
然后拿到你的这个html 文档之后再进行渲染

03:33.880 --> 03:34.840
好每一个

03:35.880 --> 03:38.280
每一个部分如果展开讲的话

03:39.320 --> 03:40.600
那我们这篇文章不够

03:41.480 --> 03:43.880
啊不够这个需要好几篇文章

03:44.520 --> 03:45.960
啊好几篇文章

03:46.040 --> 03:46.760
ok

03:46.760 --> 03:50.680
好那我们这边的话我们去除这个DNS查找啊

03:50.680 --> 03:52.760
这些细致末节的工作啊

03:52.760 --> 03:55.000
然后整个大的部分的话分成两个

03:55.000 --> 03:56.360
一个是网络

03:56.360 --> 03:57.720
一个是渲染

03:57.720 --> 03:59.880
那网络的话就是我刚才所说的

03:59.880 --> 04:03.080
他是不是他要和服务器之间进行通信

04:04.360 --> 04:06.360
对吧和服务器进行通信啊

04:06.360 --> 04:08.600
通信的话这边又涉及到啊

04:08.600 --> 04:10.360
就是如果展开讲的话啊

04:10.360 --> 04:13.800
这边又涉及到这个一系列的这个事情啊

04:13.880 --> 04:16.760
比如他这个html请求他会如何进行封装啊

04:17.320 --> 04:19.800
对吧那html请求长什么样子呀

04:20.840 --> 04:23.000
会涉及到一堆的这个知识啊

04:23.000 --> 04:25.880
那我们这篇文章的话显然是不够的

04:26.520 --> 04:29.480
ok好我们这节课的话主要是讨论什么呢

04:29.480 --> 04:30.600
讨论第二个东西

04:31.720 --> 04:35.240
炫的啊也就是说我现在通信已经完成了

04:35.240 --> 04:36.040
完成了之后

04:36.040 --> 04:38.760
然后接下来这边他已经拿到了什么呢

04:38.760 --> 04:41.640
拿到一个html的这个文档

04:42.360 --> 04:43.720
拿到这个html文档之后

04:43.720 --> 04:45.560
他会把它封装成一个什么呢

04:45.560 --> 04:49.320
会把它封装成一个渲染任务

04:50.440 --> 04:54.360
ok这里的话涉及到这个消息对列的这个知识啊

04:54.360 --> 04:55.960
如果消息对列这一块知识

04:55.960 --> 04:56.840
你不太明白的话

04:56.840 --> 04:58.360
那这边我建议你啊

04:58.360 --> 05:02.280
回头把这个消息对列的知识再把它补一补

05:02.280 --> 05:05.240
ok他这边拿到这个html之后

05:05.240 --> 05:06.440
他会把这个html

05:07.400 --> 05:10.360
封装成一个渲染任务

05:10.360 --> 05:12.440
然后放到消息对列里面

05:13.640 --> 05:14.920
那接下来回头的话

05:14.920 --> 05:17.080
这个渲染主现成

05:17.080 --> 05:20.520
就会执行这个渲染任务

05:20.520 --> 05:21.720
然后接下来的话

05:21.720 --> 05:24.360
把这个整个网页渲染出来

05:25.480 --> 05:27.800
当然这个只是咱们说的比较粗的

05:27.800 --> 05:29.880
对吧啊你拿到html文档啊

05:29.880 --> 05:33.560
然后接下来封装成一个渲染这个渲染任务

05:33.560 --> 05:35.560
然后接下来把它渲染出来

05:36.760 --> 05:39.240
那它究竟是怎么渲染出来的呢

05:40.200 --> 05:43.080
它拿到的是一个html的一个制服串啊

05:43.080 --> 05:43.880
同学们

05:43.880 --> 05:44.920
它拿到是制服串

05:45.560 --> 05:47.640
它究竟如何渲染出来了呢

05:48.520 --> 05:51.960
这个是我们这节课要进行研究的

05:52.760 --> 05:56.200
它里面其实分为非常非常多的阶段

05:56.200 --> 05:57.880
你看我这边大致努力了一下

05:58.440 --> 06:01.640
首先从解析html开始

06:01.640 --> 06:03.000
然后接下来的话

06:03.080 --> 06:04.200
样式计算

06:04.200 --> 06:07.400
布局分成绘子分块

06:07.960 --> 06:09.400
这个光扇化

06:09.400 --> 06:11.480
然后这样这个这个应该叫做什么呢

06:11.480 --> 06:13.640
叫做这个生成绘子指令

06:19.690 --> 06:23.210
生成绘子指令啊

06:23.210 --> 06:25.530
然后接下来这边分块光扇化

06:25.530 --> 06:27.210
和最后的这个绘子步骤

06:27.930 --> 06:28.250
OK

06:29.050 --> 06:31.450
那整个步骤的话是像这个样子的

06:31.450 --> 06:32.090
可了没有

06:32.090 --> 06:34.330
你点一点的先拿到html

06:34.490 --> 06:35.610
大家这边解析

06:36.250 --> 06:37.130
解析了之后

06:37.130 --> 06:37.930
然后接下来的话

06:37.930 --> 06:38.890
它会就是

06:38.890 --> 06:39.850
它每一步的话

06:39.850 --> 06:40.810
它都会有一个

06:41.370 --> 06:42.330
就是产出

06:43.370 --> 06:44.570
它都会有一个产出

06:44.570 --> 06:45.290
就我这边

06:45.290 --> 06:47.850
我对你的这个html进行解析之后

06:47.850 --> 06:49.450
我会生成一个新的东西

06:49.450 --> 06:50.010
对吧

06:50.010 --> 06:50.730
生成新的东西

06:50.730 --> 06:52.250
之后再将我执行下一步

06:53.290 --> 06:54.250
样式计算

06:54.250 --> 06:55.450
样式计算完了之后

06:55.450 --> 06:57.050
再将我又会生成一个新的东西

06:57.050 --> 06:58.650
大家再进行布局

06:58.650 --> 07:00.170
又变成这个样子了

07:00.170 --> 07:02.810
一步一步分成绘子分块

07:03.290 --> 07:04.570
然后光上化

07:04.570 --> 07:05.370
最后的话把它

07:05.850 --> 07:06.570
绘子出来

07:07.690 --> 07:08.490
看了没有

07:08.490 --> 07:10.010
就光一个渲染

07:10.650 --> 07:13.370
它其实都是有这么多步骤的

07:14.410 --> 07:15.530
这么多步骤的

07:15.530 --> 07:15.770
OK

07:17.850 --> 07:19.130
好那么接下来的话

07:19.130 --> 07:22.170
咱们就来一起来研究一下

07:22.170 --> 07:24.250
就它每一个这个阶段

07:24.250 --> 07:25.930
它究竟在做什么

07:25.930 --> 07:26.810
比如这边写

07:26.810 --> 07:28.010
chtml在做什么

07:28.010 --> 07:29.690
样式计算又在做什么

07:29.690 --> 07:30.650
布局分成

07:30.650 --> 07:31.770
每个阶段在做什么

07:32.490 --> 07:33.210
好吧

07:33.210 --> 07:34.890
我们一步一步来

07:34.890 --> 07:35.850
咱们讲慢一点

07:36.490 --> 07:37.130
首先第一步

07:37.690 --> 07:38.410
第一步的话

07:38.410 --> 07:41.130
它就是解析hhtml

07:41.130 --> 07:41.690
最终的话

07:41.690 --> 07:43.210
它要得到一个什么呢

07:43.210 --> 07:44.650
得到一个动物数

07:45.210 --> 07:45.530
OK

07:46.170 --> 07:49.130
好平时我们在打开这个网页的时候

07:49.130 --> 07:51.530
我们会去请求这个hhtml

07:51.530 --> 07:52.090
这个的话

07:52.090 --> 07:54.490
你在这个这边你是看得到的

07:54.490 --> 07:55.770
比如我现在打开的是京东

07:55.770 --> 07:56.410
是吧

07:56.410 --> 07:57.690
好你这边右键

07:57.690 --> 08:00.490
右键这边会有一个显示网页

08:00.570 --> 08:01.210
原代码

08:02.090 --> 08:03.130
你点开

08:03.130 --> 08:04.330
也就是最终的话

08:04.330 --> 08:06.570
我们浏览器获取到的就是这些信息

08:07.450 --> 08:08.090
看到没有

08:08.090 --> 08:10.730
就是一整个这个html文档

08:12.010 --> 08:15.770
但是它是直接获取到这个html这个制服

08:15.770 --> 08:16.090
注意一下

08:16.090 --> 08:16.970
这个是个制服串

08:17.850 --> 08:18.730
它是个制服串

08:19.770 --> 08:21.770
好那我们的这个浏览器

08:21.770 --> 08:25.450
是直接获取到这个html制服串吗

08:25.450 --> 08:26.330
不是

08:26.330 --> 08:27.930
它这边的话还会有一个过程

08:28.730 --> 08:29.450
什么呢

08:29.530 --> 08:31.930
中文网络中传输的内容

08:31.930 --> 08:35.450
其实都是这个零和一的字节数据

08:36.410 --> 08:38.570
大家知道就是我们最终这个底层的话

08:38.570 --> 08:39.530
其实都是什么

08:39.530 --> 08:40.970
是不是都是二进字

08:40.970 --> 08:42.970
零一零一的这个字节数据

08:43.850 --> 08:46.330
所以这边的话在进行网络传输的时候

08:47.210 --> 08:48.490
浏览器最终的话

08:49.450 --> 08:51.050
也是收到了这样

08:51.050 --> 08:53.370
零一零一的这个字节数据

08:54.090 --> 08:56.090
好了收到这些字节数据之后

08:56.090 --> 08:57.210
它首先第一步的话

08:57.210 --> 08:58.250
它需要把这些

08:58.330 --> 08:59.530
因为你全是零一零一嘛

09:00.090 --> 09:00.570
对吧

09:00.570 --> 09:03.130
好我需要把它转成制服串

09:04.730 --> 09:05.610
转成制服串

09:05.610 --> 09:06.570
转成制服串的话

09:06.570 --> 09:07.850
转出来就是什么样子呢

09:07.850 --> 09:08.810
转出来就这个样子了

09:09.690 --> 09:10.410
可不可以

09:10.410 --> 09:11.370
转出来就这个样子

09:12.250 --> 09:14.010
这个制服串就转出来了

09:14.890 --> 09:15.930
就就像这里

09:16.890 --> 09:18.730
这边把它转出来

09:18.730 --> 09:19.850
好转出来了之后

09:19.850 --> 09:21.370
然后接下来的话第二步

09:22.170 --> 09:23.530
这个制服串拿到了

09:23.530 --> 09:24.730
是不是意味着浏览器

09:24.730 --> 09:25.770
它就看得懂了呢

09:26.650 --> 09:27.210
不是的

09:27.930 --> 09:28.330
不是的

09:28.890 --> 09:31.050
因为这边的话对于浏览器来讲的话

09:31.050 --> 09:32.330
它这个拿到了就

09:32.330 --> 09:33.930
就是虽然转成制服串了

09:34.490 --> 09:35.530
但是对于它来讲的话

09:35.530 --> 09:36.330
其实就是

09:36.730 --> 09:37.530
意行制服串

09:37.930 --> 09:39.370
比如说你看我这边写了一个例子

09:39.930 --> 09:40.890
就好比是这个样子

09:41.450 --> 09:42.090
看到没有

09:42.090 --> 09:42.810
就好比什么呢

09:42.810 --> 09:44.170
就好比比如说一篇作文

09:44.570 --> 09:45.290
我们正常

09:45.770 --> 09:46.890
就是我们现实生活中

09:46.890 --> 09:48.410
我们一篇作文是标题

09:48.890 --> 09:49.770
然后段落

09:49.770 --> 09:51.610
第一段第二段第三段

09:51.610 --> 09:53.370
也是不是段和段之间会隔开

09:53.850 --> 09:54.170
对不对

09:54.170 --> 09:56.090
标题的话肯定是写在最上面的

09:56.570 --> 09:58.170
但现在的话就好比什么呢

09:58.170 --> 09:59.530
现在就好比给了你

09:59.530 --> 10:00.730
就是一篇文章

10:00.730 --> 10:02.250
但是全部写在一牌的

10:04.090 --> 10:04.890
全部写在一牌

10:05.450 --> 10:06.730
那你想想我这边比如说

10:06.730 --> 10:08.330
我这篇文章我全部写在一牌

10:09.290 --> 10:10.330
你看着吃不吃力

10:11.290 --> 10:12.330
所以也非常吃力

10:13.050 --> 10:13.450
对不对

10:13.930 --> 10:14.730
也非常吃力

10:15.450 --> 10:16.410
所以接下来的话

10:16.410 --> 10:18.330
它还会进行第二步

10:20.010 --> 10:21.850
第二步的话我们叫做

10:21.850 --> 10:22.810
就它做的事情

10:22.810 --> 10:24.330
我们叫做标记化

10:25.050 --> 10:26.330
叫做这个

10:27.210 --> 10:29.210
这个Technization

10:29.850 --> 10:30.650
Technization

10:31.450 --> 10:33.050
叫做标记化

10:33.050 --> 10:34.170
也就是干嘛呢

10:34.170 --> 10:35.770
也就是说其实说白了

10:35.770 --> 10:36.970
其实就是猜词

10:38.410 --> 10:39.130
猜词

10:39.130 --> 10:41.130
把这边一个一个把拆出来

10:42.090 --> 10:42.570
不要这个

10:43.050 --> 10:44.570
这个的话把它拆出来

10:44.570 --> 10:45.050
对吧

10:45.050 --> 10:45.290
好

10:45.290 --> 10:46.010
然后再这边

10:46.010 --> 10:48.490
这边的话是一个HTML标签

10:48.490 --> 10:50.090
这个是一个Height的标签

10:50.090 --> 10:52.730
这个是Title标签的开始

10:52.890 --> 10:55.450
那接下来这个是Title标签的内容

10:55.450 --> 10:57.290
这个是Title标签的这个结束

10:58.010 --> 10:58.650
OK

10:58.650 --> 10:59.850
也就是说最终的话

10:59.850 --> 11:02.170
我把你整个这个制服圈

11:02.170 --> 11:03.610
然后本身拿的是这个制服圈

11:03.610 --> 11:04.090
是吧

11:04.090 --> 11:06.170
然后经过标记化之后

11:06.170 --> 11:08.810
然后接下来变成这个样子

11:10.170 --> 11:10.890
OK

11:10.890 --> 11:12.730
一个一个把它拆出来

11:13.290 --> 11:15.290
拆出来的好处在于什么呢

11:15.290 --> 11:16.650
拆出来的好处在于

11:16.650 --> 11:19.050
我就知道哪些是标签

11:19.930 --> 11:21.850
哪些是标签的内容

11:23.210 --> 11:24.090
对不对

11:24.090 --> 11:27.290
然后究竟有哪些标签

11:29.130 --> 11:29.850
通过这个

11:29.850 --> 11:32.090
你本身是一个很长很长的制服圈

11:32.090 --> 11:32.410
对吧

11:32.410 --> 11:34.090
我把它这样子一拆解之后

11:34.090 --> 11:36.890
我就知道你的这个HTML文档里面

11:36.890 --> 11:38.650
究竟使用到了哪些标签

11:38.650 --> 11:39.050
对吧

11:39.050 --> 11:41.050
那标签里面的内容是什么

11:41.050 --> 11:42.170
那我就知道了

11:42.170 --> 11:44.330
那知道这些信息之后

11:44.330 --> 11:47.610
那我们就可以在这个的基础上

11:47.610 --> 11:48.810
来干嘛呀

11:48.890 --> 11:51.450
也构建出多母数

11:52.730 --> 11:55.770
这个多母数大家应该是不陌生的

11:55.770 --> 11:56.250
对吧

11:56.250 --> 11:59.130
但凡是你学过这个HTML CSS

11:59.130 --> 12:01.450
你都是听说过这个多母数的

12:01.450 --> 12:02.090
OK

12:02.090 --> 12:05.610
那比如说我左边的这个HTML文档

12:05.610 --> 12:10.490
最终经过这个解析HTML

12:10.490 --> 12:14.650
最终的话会生成这样的一个多母数

12:14.650 --> 12:15.530
OK

12:15.530 --> 12:17.130
那这边呢是这个document

12:17.130 --> 12:18.650
大家这边cade body

12:18.650 --> 12:19.290
对吧

12:19.290 --> 12:21.210
就像一个素形结构一样

12:21.210 --> 12:22.970
像一个道指的数

12:22.970 --> 12:23.770
OK

12:23.770 --> 12:26.330
那整个上面的这个过程

12:26.330 --> 12:30.250
我们就称之为解析HTML

12:30.250 --> 12:31.610
整个流程

12:31.610 --> 12:32.730
再来看一下

12:32.730 --> 12:34.810
首先拿到的是字节数据

12:36.250 --> 12:37.530
001

12:37.530 --> 12:38.250
OK

12:38.250 --> 12:39.290
然后接下来的话

12:39.290 --> 12:42.250
他把它转成一个制服圈

12:42.250 --> 12:44.890
但这个制服圈是很长很长的一个制服圈

12:44.970 --> 12:46.490
他本质上他也看不懂的

12:46.490 --> 12:48.890
就好比我现在给你这个一篇文章

12:48.890 --> 12:51.210
一篇文章全部挤在一起的标题

12:51.210 --> 12:53.370
段落的一些什么都没有提出来

12:53.370 --> 12:54.650
全部挤在一起的

12:54.650 --> 12:56.330
你读起来非常费劲

12:56.330 --> 12:57.370
对吧

12:57.370 --> 12:58.250
然后接下来的话

12:58.250 --> 12:59.450
我进行一个标记化

13:00.410 --> 13:01.210
进行一个猜词

13:02.090 --> 13:03.610
把它一个一个猜出来

13:05.130 --> 13:05.850
猜出来之后

13:05.850 --> 13:08.330
然后将我分析哪些是多母节点

13:08.330 --> 13:09.530
比如这个是个多母节点

13:09.530 --> 13:10.490
这个是

13:10.490 --> 13:12.170
是不是这个这个是个标签

13:12.170 --> 13:12.490
对吧

13:12.490 --> 13:13.370
标签的开始

13:13.370 --> 13:15.450
那他就可以形成一个多母节点

13:15.450 --> 13:17.210
然后加这个这个是内容

13:17.210 --> 13:17.850
内容的话

13:17.850 --> 13:18.570
理论上来讲

13:18.570 --> 13:20.170
他也是一个多母节点

13:20.170 --> 13:20.650
对吧

13:20.650 --> 13:21.850
反正就是分析

13:21.850 --> 13:23.210
有哪些多母节点

13:23.210 --> 13:23.450
好

13:23.450 --> 13:24.250
最终的话

13:25.450 --> 13:26.490
构建出

13:27.690 --> 13:29.050
这个多母节点数

13:29.850 --> 13:30.490
OK

13:30.490 --> 13:32.410
这是我们首先的第一步

13:32.410 --> 13:34.010
解析HTML

13:35.450 --> 13:37.210
同学们看到这里的话

13:37.210 --> 13:39.370
你可以把视频暂停一下

13:39.370 --> 13:40.810
你可以就是回顾一下

13:40.810 --> 13:42.410
到时候你们是可以拿到

13:42.490 --> 13:44.570
拿到这个文档吧

13:44.570 --> 13:45.610
可以拿到这个文档

13:45.610 --> 13:46.330
拿到这个文档

13:46.330 --> 13:47.610
我没讲一步

13:47.610 --> 13:48.250
讲完之后

13:48.250 --> 13:49.850
你就把视频暂停一下

13:49.850 --> 13:50.970
然后将你自己

13:50.970 --> 13:52.410
再把这个文档再看一遍

13:53.290 --> 13:54.570
加深这个印象

13:54.570 --> 13:55.370
OK

13:55.370 --> 13:56.570
我们一步一步来过

13:57.370 --> 13:57.610
OK

13:59.450 --> 13:59.930
好

13:59.930 --> 14:02.810
然后完成了解析HTML的时候

14:02.810 --> 14:05.210
他在解析这个HTML的过程中

14:05.210 --> 14:06.890
因为他一边解析这个制服串嘛

14:06.890 --> 14:07.370
对吧

14:07.370 --> 14:08.490
一点点解析

14:08.490 --> 14:10.250
这边是文档声明

14:10.970 --> 14:12.090
然后加这边

14:12.090 --> 14:14.330
然后形成一个document

14:14.330 --> 14:17.050
应该是到HTML的时候

14:17.050 --> 14:18.730
形成一个document

14:18.730 --> 14:18.970
好

14:18.970 --> 14:19.770
然后加到这里

14:19.770 --> 14:20.650
head

14:20.650 --> 14:22.810
然后加这边形成一个head

14:22.810 --> 14:24.010
这边body

14:24.010 --> 14:25.370
形成一个body

14:25.370 --> 14:26.090
对吧

14:26.090 --> 14:28.490
但是他在解析这个HTML的时候

14:29.130 --> 14:31.130
他可能会遇到什么呢

14:31.130 --> 14:32.250
可能会遇到这种

14:33.050 --> 14:33.370
你看

14:34.330 --> 14:34.890
style

14:35.770 --> 14:36.890
还有什么呢

14:36.890 --> 14:37.770
还有link

14:38.730 --> 14:40.730
那像这种style

14:40.730 --> 14:41.930
link

14:41.930 --> 14:43.930
包括你那个就是

14:43.930 --> 14:45.930
你这里面

14:45.930 --> 14:47.530
标签里面

14:47.530 --> 14:49.530
你是不是也可以写这个style

14:49.530 --> 14:50.890
对不对

14:50.890 --> 14:52.890
我们称之为行类样式

14:52.890 --> 14:53.930
像这些

14:53.930 --> 14:55.930
这些是和什么相关的

14:55.930 --> 14:56.890
同学们

14:56.890 --> 14:58.890
这些是和什么相关

14:58.890 --> 15:02.890
这些是不是和你的样式相关呀

15:02.890 --> 15:04.490
对吧

15:04.490 --> 15:06.090
和你的样式相关

15:06.250 --> 15:07.930
那自然而然

15:07.930 --> 15:12.250
这里就不仅仅是在解析这个HTML了

15:12.250 --> 15:13.610
这里就会涉及到什么呢

15:13.610 --> 15:17.130
这里就会涉及到CSS的解析

15:18.090 --> 15:18.810
ok

15:18.810 --> 15:20.410
CSS的解析

15:20.410 --> 15:20.650
好

15:20.650 --> 15:21.930
CSS的解析的话

15:21.930 --> 15:22.730
让我们来看一下

15:22.730 --> 15:23.770
好

15:23.770 --> 15:26.490
为了提高这个解析效率

15:26.490 --> 15:28.090
浏览器在开始之前

15:28.090 --> 15:31.530
它会启动一个预解析现成

15:33.130 --> 15:33.370
ok

15:33.370 --> 15:34.330
你看这张图

15:34.330 --> 15:35.370
这里有

15:35.450 --> 15:36.970
预解析现成

15:36.970 --> 15:38.650
这个其实是好多人不知道的

15:39.930 --> 15:42.170
就我除了这个渲染主现成

15:42.170 --> 15:43.690
我们刚才的话是不是一直是

15:43.690 --> 15:45.290
渲染主现成在工作

15:45.290 --> 15:45.530
对呀

15:45.530 --> 15:47.370
我们刚才就刚才只讲了一步嘛

15:47.370 --> 15:48.490
就解析HTML

15:49.130 --> 15:50.890
解析HTML哪个现成在做呢

15:51.530 --> 15:53.210
渲染主现成在做

15:54.570 --> 15:56.250
但你如果连什么是现成

15:56.250 --> 15:57.050
什么是进程

15:57.050 --> 15:59.530
这些这些概念都分不清楚的话

15:59.530 --> 16:01.930
你最好把前面的知识把它补一下

16:02.650 --> 16:02.970
ok

16:03.690 --> 16:05.450
或者我看我什么时候有时间

16:05.450 --> 16:06.890
我把那个什么是进程

16:06.890 --> 16:08.250
什么是现成

16:08.250 --> 16:10.010
单独再开一节课

16:10.010 --> 16:11.450
我把讲一下

16:11.450 --> 16:11.770
ok

16:12.810 --> 16:15.130
这边的话是渲染主现成

16:16.010 --> 16:17.930
就之前讲的这个解析HTML

16:17.930 --> 16:19.530
一直在做这个事情

16:19.530 --> 16:20.250
但是呢

16:20.250 --> 16:21.530
实际上它这边的话

16:21.530 --> 16:24.570
还会开启一个叫做预解析现成

16:26.490 --> 16:28.090
预解析现成做什么

16:28.730 --> 16:30.970
它这边的话首先会快速的

16:31.050 --> 16:33.530
就是浏览你的这个HTML文档

16:33.530 --> 16:34.890
但是它不会看到那么细

16:35.850 --> 16:36.810
它不会看到那么细

16:36.810 --> 16:37.530
它干嘛呢

16:37.530 --> 16:40.970
它就专门看你有没有外部连接

16:42.090 --> 16:43.210
什么叫外部连接

16:43.210 --> 16:43.930
比如你的link

16:45.130 --> 16:46.090
你的script

16:47.450 --> 16:48.890
这些就是外部连接

16:49.690 --> 16:49.930
对吧

16:49.930 --> 16:50.970
你link是吧

16:50.970 --> 16:52.570
连接一个这个外部的

16:52.570 --> 16:53.690
这个css

16:54.250 --> 16:55.370
然后你的那个script

16:55.370 --> 16:57.530
script我指的是那种有src的

16:58.090 --> 17:00.250
就是那个就是外联的那个gs

17:01.130 --> 17:01.930
它快速少没有

17:01.930 --> 17:02.650
它找这些

17:02.650 --> 17:04.410
那它找这些是不是就比你这个

17:05.130 --> 17:07.130
挨着挨着解析HTML是比较快得多

17:08.250 --> 17:08.730
对吧

17:08.730 --> 17:10.010
它就找这些

17:10.010 --> 17:10.730
找这些之后

17:10.730 --> 17:13.930
然后发现这些是外部的

17:13.930 --> 17:14.410
对吧

17:14.410 --> 17:17.290
外部css文件和外部gss文件

17:17.290 --> 17:18.570
然后接下来我干嘛呢

17:18.570 --> 17:19.930
我提前下载

17:21.770 --> 17:22.490
看到没有

17:22.490 --> 17:23.530
我提前下载

17:24.330 --> 17:25.130
下载了之后

17:25.130 --> 17:26.010
然后接下来

17:26.010 --> 17:29.130
我在我这个现成上面进行解析

17:29.450 --> 17:30.730
ok

17:30.730 --> 17:32.490
让我这一步

17:32.490 --> 17:34.410
我影不影响主线程

17:35.370 --> 17:36.410
同学们

17:36.410 --> 17:37.450
影不影响主线程

17:38.090 --> 17:38.810
不影响吧

17:38.810 --> 17:39.130
对吧

17:39.130 --> 17:40.010
你主线程你

17:40.410 --> 17:41.930
就是你做你的

17:41.930 --> 17:42.490
然后接下来

17:42.490 --> 17:43.530
我这边快速扫描之后

17:43.530 --> 17:44.730
发现有一个外部的

17:45.930 --> 17:47.130
css文件

17:47.130 --> 17:47.290
好

17:47.290 --> 17:47.930
那我接下来

17:47.930 --> 17:48.810
我就直接

17:48.810 --> 17:50.970
我就是和这个网络线程进行通信

17:51.530 --> 17:52.890
这边让它去下载

17:52.890 --> 17:53.530
下载了之后

17:53.530 --> 17:54.330
我在哪

17:54.330 --> 17:55.610
我在我的线程

17:56.170 --> 17:58.570
就是这个预解析线程上面

17:58.570 --> 17:59.050
进行解析

18:00.010 --> 18:00.570
ok

18:00.570 --> 18:01.370
解析完了之后

18:01.370 --> 18:02.810
我把这个解析的结果

18:02.810 --> 18:04.650
给你的主线程就ok了

18:06.330 --> 18:07.130
看了没有

18:07.130 --> 18:07.850
说这个的话

18:07.850 --> 18:09.770
就是css

18:09.770 --> 18:11.530
它不会主涉

18:11.530 --> 18:14.410
HTML解析的一个根本的原因

18:16.570 --> 18:16.970
ok

18:17.690 --> 18:18.410
好

18:18.410 --> 18:18.970
然后呢

18:18.970 --> 18:20.730
我们的这个css解析

18:20.730 --> 18:22.250
大家可以看到

18:22.250 --> 18:24.090
这里解析完了之后

18:24.090 --> 18:26.250
我是要向这个主线程

18:26.250 --> 18:27.530
返回一个结果的

18:28.490 --> 18:29.210
对不对

18:29.210 --> 18:30.810
我返回什么东西

18:30.810 --> 18:32.010
我这边的话

18:32.010 --> 18:33.050
最终的话

18:33.050 --> 18:34.730
也是会返回一个

18:34.730 --> 18:37.050
叫做这个cssOM

18:38.090 --> 18:39.290
就是叫做som

18:39.850 --> 18:40.890
som的一棵树

18:40.890 --> 18:42.250
刚才那个叫做dorm树

18:42.730 --> 18:44.010
这个是不是叫dorm树

18:44.010 --> 18:44.650
对吧

18:44.650 --> 18:44.810
好

18:44.810 --> 18:45.290
这边的话

18:45.290 --> 18:46.410
我会返回一棵

18:46.410 --> 18:47.690
叫做som树

18:48.490 --> 18:50.090
那这个som树的话

18:50.090 --> 18:51.450
记录了就是什么呢

18:51.450 --> 18:54.250
记录了就是和我们css

18:54.250 --> 18:55.610
样式相关的

18:56.570 --> 18:57.210
ok

18:57.290 --> 18:57.930
你看这边的话

18:57.930 --> 18:59.210
也是一一对应的

18:59.210 --> 19:00.410
比如说我们这边

19:00.410 --> 19:01.930
style sheet list

19:01.930 --> 19:03.530
那我们的css样式

19:03.530 --> 19:03.850
好

19:03.850 --> 19:04.490
然后接下来的话

19:04.490 --> 19:06.810
这边css style sheet

19:06.810 --> 19:07.690
这个对应的是什么呢

19:07.690 --> 19:08.890
对应的就是

19:08.890 --> 19:10.010
你这边

19:10.010 --> 19:11.050
你的一个样式表

19:12.090 --> 19:13.690
如果你比如说有外连的

19:14.650 --> 19:15.210
那这边的话

19:15.210 --> 19:16.650
它会对应有一个外连的

19:17.850 --> 19:19.290
那家你如果还有行类的

19:19.290 --> 19:21.290
那家这边对应有行类的

19:21.290 --> 19:22.090
包括还有什么呢

19:22.090 --> 19:22.970
还有比如说你那个

19:22.970 --> 19:24.330
浏览器类制的

19:24.330 --> 19:25.050
ok

19:25.050 --> 19:26.250
但我这边只写了一个

19:27.690 --> 19:28.010
好

19:28.970 --> 19:29.290
好

19:29.290 --> 19:30.010
然后接下来的话

19:30.010 --> 19:30.730
你这边是不是

19:30.730 --> 19:32.330
你的css样式里面

19:32.330 --> 19:34.330
是不是有一条一条的

19:34.330 --> 19:35.290
样式规则

19:36.970 --> 19:37.450
对吧

19:37.450 --> 19:38.090
样式规则

19:38.090 --> 19:38.970
你看这边

19:38.970 --> 19:40.010
第一条样式规则

19:40.650 --> 19:42.090
第二条样式规则

19:42.730 --> 19:44.650
然后样式规则下面会有什么

19:44.650 --> 19:45.450
是会有你的

19:46.410 --> 19:47.210
选择器

19:47.930 --> 19:48.410
对不对

19:48.410 --> 19:48.970
那接下来

19:48.970 --> 19:50.490
我每一个样式规则下面

19:50.490 --> 19:52.330
会有一个选择器的

19:52.890 --> 19:54.250
这个节点

19:55.290 --> 19:55.530
好

19:55.530 --> 19:56.490
然后接下来下面

19:56.570 --> 19:57.210
下面的话

19:57.210 --> 19:58.170
那家就是你的

19:58.170 --> 19:59.450
一个一个的样式了

19:59.450 --> 20:00.330
比较counter

20:00.330 --> 20:00.890
对吧

20:00.890 --> 20:02.010
from the size

20:02.010 --> 20:03.370
就是你的样式

20:03.370 --> 20:04.490
你会发现

20:04.490 --> 20:07.210
整个这个css样式

20:07.210 --> 20:10.010
我们也可以让它形成

20:10.010 --> 20:10.570
一棵树

20:11.770 --> 20:13.450
也可以让它形成一棵树

20:13.450 --> 20:14.810
这个我们称之为sum

20:15.690 --> 20:16.090
sum

20:16.810 --> 20:17.050
ok

20:18.410 --> 20:18.650
好

20:18.650 --> 20:21.050
那除了这个css

20:22.010 --> 20:23.530
咱们刚才还提到了还有什么

20:24.250 --> 20:26.250
这不还可能存在外部的

20:26.250 --> 20:27.210
jss文件

20:28.490 --> 20:29.130
对不对

20:29.130 --> 20:30.570
你除了这个link

20:30.570 --> 20:31.370
你这边的话

20:31.370 --> 20:32.730
遇到这个外部的对吧

20:32.730 --> 20:33.370
link

20:33.370 --> 20:36.090
你下载外部的css文件

20:36.090 --> 20:38.250
让我的这个预解析线程

20:38.250 --> 20:39.690
还会去下载什么呢

20:39.690 --> 20:43.290
还会去下载外部的jss文件

20:44.250 --> 20:46.010
那有的同学自然而然会想到

20:46.010 --> 20:48.330
那jss文件它是怎么处理的呢

20:48.330 --> 20:49.290
来我们来看一下

20:52.170 --> 20:53.450
预解析线程

20:53.450 --> 20:56.810
除了下载css文件以外

20:56.810 --> 20:58.570
它还会下载就是外部

20:58.570 --> 20:59.930
这里都是指的是外部

20:59.930 --> 21:01.210
我这边写一下吧

21:02.010 --> 21:03.050
外部

21:03.050 --> 21:03.930
还会下载

21:04.810 --> 21:06.490
外部的jss文件

21:07.850 --> 21:08.650
ok

21:08.650 --> 21:10.410
那这个jss它是怎么处理的

21:11.130 --> 21:11.530
好

21:11.530 --> 21:15.210
主线程如果解析到这个script这个位置

21:16.410 --> 21:18.170
它会立即干嘛呢

21:18.170 --> 21:20.650
停止解析html

21:20.650 --> 21:22.090
然后接下来它等待什么呢

21:22.090 --> 21:24.010
等待这个jss文件下载好

21:24.010 --> 21:25.450
并且要干嘛呀

21:25.450 --> 21:27.770
并且要执行完毕

21:28.730 --> 21:29.450
你要注意哦

21:29.450 --> 21:32.010
这个是和css的区别

21:32.010 --> 21:33.450
css你看刚才的图

21:34.090 --> 21:36.490
刚才我这边的主线程是我解析

21:36.490 --> 21:37.130
解析我的

21:37.930 --> 21:38.490
对不对

21:38.490 --> 21:40.970
然后既然我这边这个预解析线程

21:40.970 --> 21:41.530
我来干嘛

21:41.530 --> 21:43.530
我来解析css

21:43.530 --> 21:46.970
然后最终生成一个这个sorm这个sorm

21:46.970 --> 21:48.090
但是jss不一样哦

21:49.530 --> 21:51.290
jss的话它是干嘛

21:51.450 --> 21:53.210
下载的话还是谁的下载

21:53.210 --> 21:54.730
还是这个预解析线程

21:54.730 --> 21:56.410
它这边快速浏览了之后

21:56.410 --> 21:58.010
发现是一个外部的jss

21:58.010 --> 21:58.330
好

21:58.330 --> 21:59.130
我给你下载

21:59.130 --> 21:59.930
下载了之后

21:59.930 --> 22:00.970
然后接下来的话

22:00.970 --> 22:04.010
我这边我要执行jss

22:05.050 --> 22:05.850
我要执行

22:06.490 --> 22:07.770
执行完了之后

22:07.770 --> 22:11.130
我才会继续的去解析html

22:12.410 --> 22:13.290
看没有

22:13.290 --> 22:13.770
为什么

22:14.570 --> 22:15.850
同样可以看看为什么

22:16.490 --> 22:19.930
为什么我必须要这个执行完这个jss

22:20.570 --> 22:22.090
才继续往后面解析呢

22:22.890 --> 22:24.010
原因很简单

22:24.010 --> 22:26.810
因为我们jss代码里面是不是会存在一些

22:28.010 --> 22:32.090
比如说document.createElement

22:32.730 --> 22:33.130
对不对

22:33.130 --> 22:35.930
我是不是可以创建一个动物元素

22:35.930 --> 22:38.170
或者修改一个动物元素

22:38.890 --> 22:39.290
对不对

22:40.010 --> 22:43.770
所以说我们的jss代码的这个执行过程中

22:43.770 --> 22:44.890
它可能会干嘛呢

22:45.690 --> 22:49.370
可能会修改当前的动物数

22:50.330 --> 22:51.290
那没办法呀

22:52.170 --> 22:55.290
我这个jss的执行有可能就是会造成

22:55.290 --> 22:56.970
我当前动物数的修改

22:56.970 --> 22:58.890
那我就必须要等待你

22:59.450 --> 23:00.410
执行完毕之后

23:01.130 --> 23:01.450
对不对

23:02.250 --> 23:02.970
执行完毕之后

23:02.970 --> 23:04.810
我知道哪些地方会进行修改

23:04.810 --> 23:06.730
让我的动物数修改完了之后

23:06.730 --> 23:07.530
然后接下来

23:07.530 --> 23:10.730
我再进行后面的html这个解析

23:12.170 --> 23:12.410
OK

23:13.290 --> 23:16.010
说说这个的话就是jss

23:16.010 --> 23:20.730
它会主设html解析的一个根本原因

23:21.770 --> 23:22.730
根本原因

23:22.730 --> 23:26.730
就是因为你的这个jss代码在执行过程中

23:26.730 --> 23:30.570
可能会修改当前的动物数

23:31.690 --> 23:31.930
OK

23:32.730 --> 23:33.930
那说说你现在的话应该

23:34.490 --> 23:36.810
就是知道为什么啊

23:36.810 --> 23:38.090
就你之前应该听过

23:38.090 --> 23:40.650
就是我们这边想要首评渲染的更快

23:41.210 --> 23:44.730
那你就不应该在首评来加载jss

23:45.450 --> 23:46.330
一般我们

23:46.330 --> 23:47.770
就是建议什么呢

23:47.770 --> 23:49.210
这里不应该是叫做首评啊

23:49.210 --> 23:51.930
就越不应该在最前面

23:53.770 --> 23:57.610
最前面就加载这个jss

23:57.610 --> 23:59.130
而一般建议什么呢

23:59.130 --> 24:02.810
建议将这个sql的标签放到玻璃标签底部

24:04.010 --> 24:04.650
还记得吧

24:04.650 --> 24:05.610
我们一般怎么写的

24:05.610 --> 24:06.570
我们一般是不是这样写的

24:07.530 --> 24:08.010
同学们

24:08.010 --> 24:09.050
我们一般是不是这样写的

24:11.370 --> 24:12.730
不要这个是html

24:15.400 --> 24:15.960
html

24:16.840 --> 24:21.560
然后有一个head

24:25.660 --> 24:26.700
有一个head

24:26.700 --> 24:32.810
然后中间的内容我就省略了

24:32.810 --> 24:36.410
然后接下来的话

24:36.410 --> 24:38.170
这边下面是你的body

24:41.610 --> 24:42.730
这是body对吧

24:42.730 --> 24:43.770
body然后接下来

24:43.770 --> 24:44.170
这边的话

24:44.170 --> 24:45.770
可能就是有你的这个标签

24:45.770 --> 24:46.970
P标签

24:47.770 --> 24:48.010
OK

24:49.050 --> 24:49.770
P标签

24:52.010 --> 24:52.570
好

24:52.570 --> 24:53.610
然后完成了之后

24:53.690 --> 24:55.610
把那个script

24:55.610 --> 24:56.730
以前最早的时候

24:56.730 --> 24:57.530
人们开放的话

24:57.530 --> 24:59.370
习惯于把这个script放在哪呢

24:59.370 --> 25:00.330
放在head里面

25:01.210 --> 25:02.170
放在这里面

25:02.170 --> 25:04.170
就我们的css也是放在

25:04.170 --> 25:05.690
一般放在head里面的

25:05.690 --> 25:06.410
对吧

25:06.410 --> 25:09.130
大家习惯于就是把jss也放在这里

25:09.130 --> 25:09.850
那后面的话

25:09.850 --> 25:11.290
你就会慢慢听到一种说法

25:11.290 --> 25:11.930
叫什么呢

25:11.930 --> 25:13.610
不建议你放在head里面

25:13.610 --> 25:14.250
放在什么呢

25:14.250 --> 25:16.330
放在这个body标签的底部

25:17.290 --> 25:18.650
这边script

25:21.400 --> 25:22.200
script

25:22.200 --> 25:23.640
然后加这边src

25:24.600 --> 25:25.640
OK

25:25.640 --> 25:26.920
看到过吧

25:26.920 --> 25:29.640
而且就是其他老师是不是也经常给你说

25:29.640 --> 25:30.760
哎你这个script的标签

25:30.760 --> 25:31.800
你要放在这下面哦

25:32.680 --> 25:33.400
对不对

25:33.400 --> 25:34.200
为什么

25:34.200 --> 25:36.040
你现在你就知道为什么

25:36.040 --> 25:36.680
为什么

25:36.680 --> 25:38.120
你接受他会主色呀

25:38.680 --> 25:39.960
他会主色这个

25:41.480 --> 25:42.840
渲染组进程

25:42.840 --> 25:44.920
去解析html

25:46.280 --> 25:46.760
对吧

25:46.760 --> 25:47.480
你看你把这些

25:48.040 --> 25:48.680
面试的时候

25:48.680 --> 25:50.120
你如果能够打出来

25:50.120 --> 25:51.640
其实就相当的专业

25:51.640 --> 25:52.440
你这边

25:52.440 --> 25:54.120
他会主色谁

25:54.120 --> 25:56.520
主色渲染组现成

25:57.640 --> 25:59.560
解析html

25:59.560 --> 26:00.440
OK

26:00.440 --> 26:01.560
但是他下载的话

26:01.560 --> 26:03.560
会有一个叫做预解析现成

26:04.360 --> 26:05.720
提前浏览了一遍之后

26:05.720 --> 26:06.440
然后接下来

26:06.440 --> 26:07.480
就会下载

26:08.120 --> 26:08.520
OK

26:08.520 --> 26:09.640
这些你说错的话

26:09.640 --> 26:11.560
那面那个面试官就会觉得

26:11.560 --> 26:13.480
哎你这一块的话掌握的挺不错的

26:14.440 --> 26:15.320
对吧

26:15.320 --> 26:15.880
OK

26:15.880 --> 26:17.560
好一步一步把它理清楚啊

26:17.560 --> 26:18.200
不要着急

26:18.760 --> 26:19.640
不要着急

26:19.640 --> 26:20.280
OK

26:20.280 --> 26:21.320
我都已经做好了

26:21.320 --> 26:24.360
这几颗讲个两个多小时的准备了

26:24.360 --> 26:25.800
所以你也不要着急

26:25.800 --> 26:27.720
你甚至可以就是看一部分

26:27.720 --> 26:28.920
暂停一下

26:28.920 --> 26:30.120
休息一下

26:30.120 --> 26:31.720
然后回来再继续看

26:31.720 --> 26:32.040
OK

26:35.560 --> 26:35.800
好

26:35.800 --> 26:38.280
然后另外这边要说一下

26:38.280 --> 26:39.720
就是现代浏览器中

26:39.720 --> 26:41.400
他给我们提供了新的方式

26:42.040 --> 26:44.040
来避免这个GS代码

26:44.040 --> 26:46.040
他的这个主色渲染

26:46.040 --> 26:48.360
有这个async differ

26:48.360 --> 26:50.360
prefab这个废棋

26:50.440 --> 26:51.720
还有preload

26:51.720 --> 26:53.640
啊这么几种方式

26:53.640 --> 26:55.880
那这个的话在下一

26:55.880 --> 26:57.160
下一堂课

26:57.160 --> 26:57.720
啊

26:57.720 --> 26:59.720
那我会给大家介绍这些

26:59.720 --> 27:00.360
OK

27:00.360 --> 27:00.600
啊

27:00.600 --> 27:02.680
这个就是在下一篇文章里面有

27:02.680 --> 27:03.000
啊

27:03.000 --> 27:03.960
这里就不说了

27:05.480 --> 27:05.720
好

27:05.720 --> 27:06.600
那我们这边的话

27:06.600 --> 27:08.360
我们总结一下

27:08.360 --> 27:08.920
总结一下

27:09.800 --> 27:10.120
就是

27:11.560 --> 27:12.600
第一步

27:12.600 --> 27:13.800
第一步完成之后

27:13.800 --> 27:14.360
他会干嘛

27:15.320 --> 27:16.920
他会得到一颗

27:16.920 --> 27:17.640
dome数

27:18.600 --> 27:20.520
仅仅只有dome数吗

27:20.520 --> 27:21.480
啊不是

27:21.480 --> 27:22.120
还有什么呢

27:22.120 --> 27:23.720
还有sorm数

27:23.720 --> 27:24.280
也就是说

27:24.280 --> 27:25.240
他第一步的话

27:25.240 --> 27:26.120
他得到了什么

27:27.320 --> 27:29.480
得到了两颗数

27:30.840 --> 27:31.720
对不对

27:31.720 --> 27:32.360
两颗数

27:33.320 --> 27:34.600
然后你浏览器的什么

27:34.600 --> 27:35.640
默认样式啊

27:35.640 --> 27:36.360
内部样式

27:36.360 --> 27:37.080
外部样式啊

27:37.080 --> 27:37.800
这些各种各样

27:37.800 --> 27:38.840
乱七八糟的样式

27:38.840 --> 27:39.960
都包含在哪里的

27:41.080 --> 27:43.240
都包含在这个sorm数里面

27:44.360 --> 27:45.000
OK

27:45.000 --> 27:45.800
那我们现在是不是

27:45.800 --> 27:46.680
就有两颗数了

27:47.400 --> 27:48.040
啊

27:48.040 --> 27:49.560
这是我们的第一步啊

27:49.560 --> 27:50.360
解析

27:50.360 --> 27:51.400
HTML

27:51.400 --> 27:52.600
大家可以自己在

27:52.600 --> 27:53.800
老字里面再过一下

27:55.720 --> 27:56.120
好

27:56.120 --> 27:57.320
第一步完成了之后

27:57.320 --> 27:58.360
然后接下来的话

27:58.360 --> 28:00.040
我们进入到第二步

28:01.640 --> 28:02.760
第二步叫什么呢

28:02.760 --> 28:05.080
第二步叫做样式计算

28:06.440 --> 28:07.640
样式计算

28:07.640 --> 28:08.200
我们现在是不是

28:08.200 --> 28:09.640
已经有dome数了

28:09.640 --> 28:09.960
OK

28:09.960 --> 28:11.560
dome数记录的是什么

28:11.560 --> 28:13.000
dome数记录的是

28:13.000 --> 28:14.600
我有哪些

28:14.600 --> 28:15.480
dome节点

28:16.440 --> 28:19.000
而sorm数记录的是什么

28:19.000 --> 28:20.360
sorm数记录的是

28:20.360 --> 28:22.200
各种各样的样式规则

28:23.240 --> 28:23.960
对吧

28:23.960 --> 28:25.400
一个一个的样式规则

28:25.400 --> 28:25.640
好

28:25.640 --> 28:26.360
那接下来的话

28:26.360 --> 28:28.120
第二步样式计算

28:28.120 --> 28:28.760
这边的话

28:28.760 --> 28:29.720
其实就是什么呢

28:29.720 --> 28:31.720
我需要把这个样式

28:31.720 --> 28:34.120
应用到dome上面

28:35.480 --> 28:36.360
OK

28:36.360 --> 28:37.240
我这个是样式吗

28:37.240 --> 28:37.640
我这个是不是

28:37.640 --> 28:38.680
记录的是样式

28:38.680 --> 28:39.640
我这个记录的是

28:39.640 --> 28:41.480
一个一个dome节点

28:41.480 --> 28:41.960
对吧

28:41.960 --> 28:42.120
好

28:42.120 --> 28:42.760
那我接下来

28:42.760 --> 28:44.120
我要把这个样式

28:44.200 --> 28:45.400
匹配到

28:45.400 --> 28:46.440
一个一个的

28:46.440 --> 28:48.040
dome节点上面

28:48.040 --> 28:48.680
OK

28:48.680 --> 28:49.960
来我们这边我们来看一下

28:51.720 --> 28:53.320
拥有了dome数

28:53.320 --> 28:55.400
我们还不足以知道

28:55.400 --> 28:57.400
页面的这个外码

28:57.400 --> 28:58.760
所以说我们需要就是

28:58.760 --> 29:00.040
有样式

29:00.040 --> 29:01.320
那主线程

29:01.320 --> 29:02.600
你注意这个认识

29:02.600 --> 29:04.200
渲染主线程在做

29:04.200 --> 29:06.440
渲染主线程他会干嘛呢

29:06.440 --> 29:07.400
他会去便利

29:08.440 --> 29:10.520
便利然后得到整

29:10.520 --> 29:11.720
就是便利这个

29:11.720 --> 29:13.320
整颗这个dome数

29:14.200 --> 29:17.640
然后一次为这个数中的每一个节点

29:18.360 --> 29:20.760
计算出他的最终样式

29:21.480 --> 29:22.920
那这个这个过程

29:22.920 --> 29:25.400
我们称之为computed style

29:26.040 --> 29:26.840
样式计算

29:28.280 --> 29:28.440
好

29:28.440 --> 29:30.440
然后这样在这个过程中的话

29:30.440 --> 29:32.040
很多这个预设值

29:32.600 --> 29:34.040
它会变成一个绝对值

29:35.080 --> 29:35.880
比方你以前的话

29:35.880 --> 29:37.720
你写的是read是吧

29:37.720 --> 29:39.320
以前老师在讲课的时候说过

29:40.600 --> 29:41.640
你这个写颜色

29:41.640 --> 29:43.880
颜色有很多的这种方式

29:43.880 --> 29:45.480
你可以写这个read

29:45.480 --> 29:47.720
你可以写这个16进字的

29:47.720 --> 29:50.440
也可以用这个rgb对吧

29:50.440 --> 29:53.480
那在这个样式计算这个部分

29:53.480 --> 29:55.640
他就会全部统一换成

29:55.640 --> 29:56.760
换算成什么呢

29:56.760 --> 29:57.720
换算成这个

29:58.200 --> 29:58.840
rgb

30:00.040 --> 30:00.360
ok

30:00.920 --> 30:01.800
那你以后的话

30:01.800 --> 30:02.440
你写的话

30:02.440 --> 30:03.160
你如果比如说

30:03.720 --> 30:04.360
这方面

30:04.360 --> 30:05.240
你知道了

30:05.240 --> 30:06.920
了解了这方面的知识

30:06.920 --> 30:09.320
那以后你是不更加倾向于写这个

30:10.680 --> 30:11.080
对不对

30:11.080 --> 30:11.800
少一个什么

30:11.800 --> 30:13.080
是不是少一个转换的步骤

30:14.200 --> 30:14.600
对不对

30:14.600 --> 30:17.080
你看这个就是知道和不知道的区别

30:18.600 --> 30:19.720
你发现没有

30:19.720 --> 30:20.520
你不知道的话

30:20.520 --> 30:22.920
你觉得写哪个都无所谓啊

30:22.920 --> 30:24.600
我写read也可以

30:24.600 --> 30:24.840
对吧

30:24.840 --> 30:26.760
我写那个16进字也可以

30:26.760 --> 30:28.600
我写这种rgb也可以

30:29.160 --> 30:29.400
对吧

30:29.400 --> 30:31.400
但你一旦知道这个知识点

30:31.400 --> 30:33.400
你以后你自然而然的

30:33.400 --> 30:34.680
你就会写啊

30:34.680 --> 30:35.560
就会写成这个

30:36.520 --> 30:37.160
对不对

30:37.160 --> 30:38.360
因为你知道什么

30:38.360 --> 30:40.920
你知道他在做样式计算的时候

30:40.920 --> 30:42.600
他这个步骤就可以省略掉了

30:43.560 --> 30:43.880
对不对

30:44.760 --> 30:45.000
ok

30:46.680 --> 30:46.920
好

30:46.920 --> 30:50.120
然后相对单位会变成绝对单位

30:50.120 --> 30:51.560
比如说你的em

30:51.560 --> 30:52.840
他会变成什么呢

30:52.840 --> 30:53.560
变成p差

30:54.200 --> 30:55.160
ok

30:55.160 --> 30:56.200
也就是说最终的话

30:56.200 --> 30:57.400
你的那个动物数

30:57.400 --> 30:58.840
他每一个这个动物

30:58.840 --> 30:59.720
他就会计算出

30:59.720 --> 31:00.520
这个动物节点

31:01.080 --> 31:01.960
有哪些样式

31:02.520 --> 31:03.720
这个动物节点

31:03.720 --> 31:04.520
有哪些样式

31:05.080 --> 31:06.520
他会把它计算出来

31:07.000 --> 31:07.320
ok

31:07.880 --> 31:08.600
好

31:08.600 --> 31:09.800
然后但是这里

31:09.800 --> 31:10.840
有一点

31:10.840 --> 31:12.200
大家需要注意的是

31:12.920 --> 31:16.600
这里我们在计算一个节点的样式的时候

31:16.600 --> 31:18.920
比如说我针对这个p标签

31:18.920 --> 31:22.040
我只设置了fonte size和fonte weight

31:22.040 --> 31:23.160
只设置了这两个

31:23.720 --> 31:24.600
那他在这个

31:25.720 --> 31:27.720
样式计算这个阶段

31:27.720 --> 31:29.080
他是不是这个p标签

31:29.080 --> 31:30.920
就只计算这两个

31:31.480 --> 31:32.760
这个样式规则呢

31:33.560 --> 31:34.680
只计算这两个呢

31:35.320 --> 31:35.880
不是的

31:36.520 --> 31:37.400
不是的

31:37.400 --> 31:37.720
ok

31:38.280 --> 31:39.400
在这个阶段

31:39.400 --> 31:42.360
他会针对于你每一个节点

31:43.560 --> 31:44.440
计算什么呢

31:44.440 --> 31:46.760
计算所有的样式

31:48.040 --> 31:49.240
计算所有的样式

31:49.240 --> 31:49.480
好

31:49.480 --> 31:50.600
比如说我给你取个例子

31:51.720 --> 31:52.280
取个例子

31:53.960 --> 31:54.920
比如说我们这边

31:59.000 --> 31:59.400
算的

32:00.280 --> 32:01.400
重新创建一个吧

32:03.480 --> 32:09.530
重新创建一个index.html

32:10.170 --> 32:11.530
就放到桌面上

32:11.530 --> 32:11.770
好

32:13.990 --> 32:14.470
ok

32:14.470 --> 32:15.510
然后把这个放大点

32:16.870 --> 32:17.190
好

32:17.190 --> 32:17.910
比如说我这边

32:17.910 --> 32:19.750
我这边的话有一个p

32:19.750 --> 32:20.950
然后接下来这边的话

32:22.070 --> 32:22.470
ok

32:22.470 --> 32:23.990
就一个简简单单的段落

32:23.990 --> 32:24.550
是吧

32:24.550 --> 32:24.870
好

32:24.870 --> 32:25.510
我们把它打开

32:26.550 --> 32:26.870
哦

32:26.870 --> 32:28.550
他必须是在文件家里面

32:29.750 --> 32:30.150
稍等

32:31.830 --> 32:34.470
他必须是在文件家里面

32:35.110 --> 32:35.430
好

32:35.430 --> 32:36.870
这边写个demo吧

32:39.930 --> 32:40.250
好

32:40.250 --> 32:41.050
然后我把它打开

32:46.840 --> 32:47.480
不用全屏

32:48.040 --> 32:48.200
好

32:48.200 --> 32:49.240
这边把他打开

32:53.420 --> 32:53.660
好

32:53.660 --> 32:54.220
你来看一下

32:54.940 --> 32:55.820
现在我们这个网页

32:55.820 --> 32:58.540
是不是就是一个简简单单的这个段落

32:58.540 --> 32:59.820
我给他挂一个样子嘛

33:00.540 --> 33:01.260
这边style

33:02.140 --> 33:03.180
就挂一个p

33:04.140 --> 33:05.180
挂一个color

33:08.060 --> 33:08.860
color read

33:09.580 --> 33:09.980
好

33:09.980 --> 33:11.020
这边是不是变成红色了

33:11.820 --> 33:12.860
好变成红色之后

33:12.860 --> 33:14.220
然后将我们来看一下他的样式

33:16.470 --> 33:18.470
我们这边的话只设置了什么

33:19.430 --> 33:20.310
我们这边的话

33:20.310 --> 33:22.150
是不是只设置了这个段落

33:23.350 --> 33:23.830
段落

33:23.830 --> 33:25.030
我们只设置了什么

33:25.030 --> 33:27.510
是不是只设置了他的这个颜色

33:28.470 --> 33:29.110
是红色

33:29.990 --> 33:33.590
那这里的话很多时候就会给大家造成一种误解

33:33.590 --> 33:34.310
什么了

33:34.310 --> 33:35.430
大家就会认为

33:35.430 --> 33:36.310
这个p的话

33:36.310 --> 33:37.350
他就只有一个

33:37.350 --> 33:39.190
他的这个样式规则就则这条

33:39.910 --> 33:40.470
color read

33:41.430 --> 33:42.710
这个其实是错误的

33:43.430 --> 33:44.070
是错误的

33:45.590 --> 33:47.990
其实我们的这个p元素上面

33:47.990 --> 33:50.550
他所有的样式都会有

33:51.270 --> 33:52.470
你在哪里可以看到呢

33:52.470 --> 33:53.270
你在这边

33:53.830 --> 33:55.510
这边有个计算样式

33:56.470 --> 33:57.190
在这里的话

33:57.190 --> 33:58.070
你是可以看到的

33:58.710 --> 33:59.110
看到没有

33:59.670 --> 34:01.590
就这些样式我们设置了没有

34:01.590 --> 34:02.230
什么

34:03.590 --> 34:04.630
scent color

34:04.630 --> 34:05.030
对吧

34:05.030 --> 34:05.830
align content

34:05.830 --> 34:08.310
这些这些你设置了没有设置

34:09.430 --> 34:10.950
你看这这里样式就多了

34:11.670 --> 34:13.350
这里的话可能很多同学都认不完

34:13.350 --> 34:14.070
我也认不完

34:14.630 --> 34:15.270
对不对

34:15.270 --> 34:16.310
因为毕竟我们常用的

34:16.310 --> 34:18.150
平时常用的就那么一些

34:18.150 --> 34:19.670
比如说像这些什么app

34:20.230 --> 34:22.310
这个region啊这个啊这些

34:22.950 --> 34:23.910
我也没用过

34:23.910 --> 34:24.710
ok

34:24.870 --> 34:26.310
那这些样式的话

34:26.310 --> 34:29.510
在这个p啊上面这个动物上面

34:30.070 --> 34:30.870
他有没有

34:30.870 --> 34:31.990
他都是有的

34:32.950 --> 34:33.190
ok

34:33.830 --> 34:34.950
都是有的

34:34.950 --> 34:36.870
只不过因为你没有设置

34:36.870 --> 34:38.070
他大概率

34:38.070 --> 34:39.830
啊我只能说大概率啊

34:39.830 --> 34:42.230
大概率会使用默认值

34:43.190 --> 34:44.630
就这边你看每一个属性

34:45.190 --> 34:47.510
每一个属性他是不是都有默认值

34:48.230 --> 34:48.710
看到没有

34:49.670 --> 34:50.070
看到没有

34:50.950 --> 34:52.870
都有默认值的啊

34:53.590 --> 34:54.470
啊这一块的话

34:54.470 --> 34:55.830
其实就设计到什么呢

34:55.830 --> 34:58.550
设计到这个css这个样式计算

34:58.550 --> 34:59.990
他的一个具体流程了

35:00.710 --> 35:01.190
这个的话

35:01.190 --> 35:02.310
大家可以参照

35:03.190 --> 35:05.110
就我之前讲的啊

35:06.870 --> 35:09.830
之前讲的css

35:09.830 --> 35:10.310
然后

35:11.830 --> 35:15.110
呃这啊我看一下啊样式计算

35:17.460 --> 35:19.060
样式计算在哪里啊

35:20.500 --> 35:22.100
渐进式渲染变形

35:24.980 --> 35:28.420
哎我讲的那个样式计算

35:30.500 --> 35:33.140
成啊这就是啊css属性

35:34.180 --> 35:36.420
属性的这个计算过程啊

35:36.420 --> 35:38.900
大家这边的话回头可以把这个文章看一下

35:39.860 --> 35:41.700
啊可以把这个文章看一下

35:42.260 --> 35:45.140
这个css是属性的计算过程

35:45.140 --> 35:47.060
他一步一步他是怎么计算的

35:48.020 --> 35:48.660
ok

35:48.660 --> 35:50.420
这个咱们就不展开讲了

35:50.420 --> 35:51.540
啊这个展开讲的话

35:51.540 --> 35:53.540
这些课的时间就更长了

35:54.420 --> 35:55.140
就更长了

35:55.140 --> 35:56.900
可以把这篇文章把它砍一下

35:56.900 --> 35:58.500
ok回头把这篇文章

35:58.500 --> 36:00.180
然后一起放到这个

36:00.180 --> 36:01.620
就是这节课的资料里面

36:02.340 --> 36:02.980
好吧

36:02.980 --> 36:04.980
啊他这边一步一步的啊

36:04.980 --> 36:06.820
就是先确定声明值

36:06.820 --> 36:07.940
然后接下来

36:07.940 --> 36:09.700
沉迭这个冲突的时候

36:09.700 --> 36:10.660
怎么办啊

36:10.660 --> 36:12.020
让他在这边继承

36:12.020 --> 36:14.420
那最后一步使用默认值

36:14.420 --> 36:15.700
啊就是大家看到了这里

36:16.660 --> 36:16.900
ok

36:19.460 --> 36:22.580
好这是啊回到我们刚才的文档啊

36:22.580 --> 36:23.300
回到刚才这边

36:24.020 --> 36:26.020
好然后加这边的话

36:26.020 --> 36:29.220
浏览器会确定每一个节点的样式

36:29.220 --> 36:30.340
啊注意

36:30.340 --> 36:32.340
这里的样式计算

36:32.340 --> 36:33.380
啊这里写错了

36:35.140 --> 36:35.700
这里只

36:36.500 --> 36:37.300
对的

36:38.180 --> 36:40.820
这里啊这个样算计算时

36:40.820 --> 36:42.100
他是会对什么呢

36:42.100 --> 36:43.780
会对多么节点

36:43.780 --> 36:45.460
计算出所有的

36:45.460 --> 36:47.300
好把所有的给你加个重点

36:48.180 --> 36:48.820
所有的

36:49.620 --> 36:51.540
所有的样式属性值

36:52.260 --> 36:52.900
ok

36:52.900 --> 36:54.740
刚才大家是不是已经看到了

36:54.740 --> 36:55.140
对不对

36:56.020 --> 36:56.660
好几百个

36:57.460 --> 36:59.300
而如果这个开发者啊

36:59.300 --> 37:02.020
你在书就是书写样式的时候

37:02.020 --> 37:03.700
你比如你这些没写啊

37:03.700 --> 37:03.940
对吧

37:03.940 --> 37:05.140
比如这个这个

37:05.140 --> 37:06.500
excent counter

37:06.500 --> 37:06.740
对吧

37:06.740 --> 37:07.620
这些没写啊

37:07.620 --> 37:09.140
这个or这些没写

37:09.940 --> 37:11.460
那么他大概率啊

37:11.460 --> 37:12.340
这边是大概率

37:15.910 --> 37:16.550
大概率

37:17.110 --> 37:18.790
会使用这个默认值

37:18.790 --> 37:21.110
但他会经历前面的一些步骤

37:21.110 --> 37:22.950
就看他的会不会继承

37:22.950 --> 37:24.710
如果是一个可以继承的属性的话

37:24.710 --> 37:26.630
大家看那个副元素

37:26.630 --> 37:28.870
或者主机元素有没有写之类的

37:28.870 --> 37:30.070
你把那篇文章看一下

37:30.070 --> 37:30.630
你就知道了

37:31.590 --> 37:31.830
ok

37:32.630 --> 37:32.790
啊

37:32.790 --> 37:34.630
所有这个样式计算的话

37:34.630 --> 37:36.230
就发生在这一步

37:37.190 --> 37:37.750
ok

37:37.750 --> 37:38.550
发生在这一步

37:39.350 --> 37:39.830
好

37:39.830 --> 37:41.750
然后啊就这篇文章啊

37:41.750 --> 37:42.310
这篇文章

37:43.590 --> 37:45.430
好完成这一步之后

37:45.430 --> 37:47.270
你可以理解为什么呢

37:47.270 --> 37:48.470
你可以理解为

37:49.350 --> 37:50.070
这棵树

37:50.070 --> 37:51.510
我们之前是不两棵树啊

37:51.510 --> 37:52.390
对不对

37:52.390 --> 37:54.310
这棵树和这棵树

37:54.310 --> 37:55.830
他们两棵树的话

37:55.830 --> 37:58.070
就进行了一个合并

37:59.030 --> 38:00.310
合并成了什么呢

38:00.310 --> 38:01.910
合并成了一棵树

38:02.950 --> 38:03.270
啊

38:03.270 --> 38:04.630
一棵叫做动物树

38:04.630 --> 38:07.430
但现在的动物树和之前就不一样了

38:07.430 --> 38:09.030
现在的动物树的话

38:09.030 --> 38:10.710
这边的话就带有什么呢

38:10.710 --> 38:11.750
带有样式

38:13.590 --> 38:14.470
看到没有

38:14.470 --> 38:15.910
这边的话就带有样式了

38:16.790 --> 38:17.670
ok啊

38:17.670 --> 38:18.950
这是我们的第二步

38:19.510 --> 38:21.030
样式计算

38:21.830 --> 38:22.390
ok

38:22.390 --> 38:23.270
那你这里的话

38:23.270 --> 38:24.710
又可以把视频暂停一下

38:24.710 --> 38:26.710
把这一小节自己再看一下

38:30.120 --> 38:30.440
好

38:30.440 --> 38:32.200
接下来咱们继续啊

38:32.200 --> 38:34.440
咱们已经讲了两个步骤了

38:34.440 --> 38:35.640
解析HTML

38:35.640 --> 38:36.840
样式计算

38:36.840 --> 38:37.800
大家继续啊

38:37.800 --> 38:39.160
已经讲了半个多小时

38:39.160 --> 38:40.120
40分钟了

38:40.120 --> 38:41.800
后面还要这么多步骤啊

38:41.800 --> 38:43.000
哈哈哈

38:43.000 --> 38:43.480
放心哈

38:43.480 --> 38:44.360
后面的步骤的话

38:44.360 --> 38:46.760
然后稍微就要好一些了

38:46.760 --> 38:47.640
啊

38:47.640 --> 38:47.800
好

38:47.800 --> 38:48.440
然后接下来

38:48.440 --> 38:49.640
我们来看下一个步骤

38:50.760 --> 38:52.120
下一个步骤的话

38:52.200 --> 38:53.240
我现在已经有了

38:53.240 --> 38:54.200
这这个多姆树

38:54.200 --> 38:54.840
对吧

38:54.840 --> 38:55.400
加多姆树

38:55.400 --> 38:56.360
我知道就是

38:56.360 --> 38:58.040
网页上有哪些这个

38:58.040 --> 38:59.000
多姆节点

38:59.000 --> 39:00.200
并且每个多姆节点

39:00.200 --> 39:01.400
它是什么颜色呀

39:02.200 --> 39:03.480
这些东西我都知道了

39:04.040 --> 39:05.080
但是现在的话

39:05.080 --> 39:06.200
还足不足矣

39:06.200 --> 39:09.000
就是你能够绘制整个页面呢

39:09.800 --> 39:11.000
还不足矣

39:11.000 --> 39:11.560
ok

39:11.560 --> 39:12.440
为什么呢

39:12.440 --> 39:14.440
因为光靠这些信息

39:14.440 --> 39:15.960
你是不能确定

39:15.960 --> 39:18.120
最终页面的这个样子的

39:19.320 --> 39:20.440
这边举个例子

39:20.440 --> 39:21.160
比如你现在的话

39:21.320 --> 39:23.160
你再给你的朋友打电话

39:23.160 --> 39:25.160
你告诉你的朋友

39:25.160 --> 39:26.120
现在的话

39:26.120 --> 39:27.560
你画一幅画

39:27.560 --> 39:28.440
朋友说好

39:28.440 --> 39:29.160
画什么

39:29.160 --> 39:29.800
你告诉他

39:29.800 --> 39:32.920
这个画上面有一个红色的大圆圈

39:34.280 --> 39:35.160
然后接下来的话

39:35.160 --> 39:37.080
有一个蓝色的正方形

39:37.080 --> 39:38.360
你看这个是不是就好比是

39:38.360 --> 39:39.800
两个多姆圆树

39:39.800 --> 39:40.520
对不对

39:40.520 --> 39:41.240
一个红色

39:41.240 --> 39:41.960
一个蓝色

39:43.000 --> 39:44.040
你看这些信息

39:44.040 --> 39:44.920
你都知道了

39:44.920 --> 39:46.920
但你觉得你的朋友画得出来吧

39:48.280 --> 39:49.400
画得出来吧

39:49.400 --> 39:51.000
或者说你给100个朋友

39:51.240 --> 39:51.720
打电话

39:51.720 --> 39:53.720
你让他就是画一个红色的大圆圈

39:53.720 --> 39:55.560
和一个蓝色的正方形

39:55.560 --> 39:57.160
那100个朋友画出来的话

39:57.160 --> 39:57.720
都不一样

39:58.600 --> 39:59.320
对不对

39:59.320 --> 40:00.200
为什么

40:00.200 --> 40:01.480
原因很简单

40:01.480 --> 40:02.440
你这里的话

40:02.440 --> 40:05.960
还缺少了一个非常关键的信息

40:05.960 --> 40:06.840
就是什么呢

40:06.840 --> 40:08.280
就是位置信息

40:09.640 --> 40:10.520
对不对

40:10.520 --> 40:11.000
位置

40:11.640 --> 40:13.240
你这个红色的圆圈

40:13.240 --> 40:16.920
究竟画在整张这个图画的哪个位置

40:16.920 --> 40:19.560
这个正方形又画在哪个位置

40:19.640 --> 40:21.160
究竟是正方形在前

40:21.160 --> 40:22.760
还是圆圈在前

40:22.760 --> 40:23.880
这些信息是不是

40:23.880 --> 40:25.240
现在大家是不是都不知道

40:26.440 --> 40:27.160
对不对

40:27.160 --> 40:29.400
说是渲染网页的话

40:29.400 --> 40:31.320
它也是同样的这个道理

40:31.320 --> 40:33.080
我们现在的话只知道什么呢

40:33.080 --> 40:34.040
只知道这个

40:35.000 --> 40:36.360
就是每个段目节点

40:37.160 --> 40:39.960
他的一些这个属性值

40:39.960 --> 40:40.360
对吧

40:40.360 --> 40:43.880
他的一些就是样式规则的这个属性信息

40:43.880 --> 40:44.520
但是呢

40:44.520 --> 40:45.560
我们还不知道什么呢

40:45.560 --> 40:48.440
不知道每个节点的几何信息

40:49.240 --> 40:49.560
ok

40:50.440 --> 40:52.600
不知道每个节点的几何信息

40:53.400 --> 40:54.840
说这个时候我们叫经历

40:55.640 --> 40:56.840
接下来的阶段

40:56.840 --> 40:57.720
叫做什么呢

40:57.720 --> 40:58.760
叫做布局

41:00.440 --> 41:01.400
叫布局

41:01.400 --> 41:02.760
我们来看看布局会做什么

41:03.800 --> 41:05.000
而生成布局数

41:05.000 --> 41:06.280
注意一下这里又是一棵树

41:07.240 --> 41:08.680
这里又是一棵树

41:08.680 --> 41:09.960
刚才的话是不是好不容易

41:09.960 --> 41:11.560
两棵树合并成了一棵树

41:12.440 --> 41:13.160
对不对

41:13.160 --> 41:15.320
刚才这边两棵树合并成了一棵树

41:15.320 --> 41:17.080
现在我们得到的就是这棵树

41:17.240 --> 41:18.440
就前面的你就不用看了

41:19.080 --> 41:20.280
前面的你就不用看了

41:20.280 --> 41:20.840
为什么

41:20.840 --> 41:22.040
因为我们一开始就讲了

41:22.440 --> 41:23.160
怎么样

41:23.160 --> 41:24.360
就是这边你每一步

41:25.000 --> 41:26.120
每一步这边输入

41:26.120 --> 41:27.560
然后下是不是会有个铲出

41:27.560 --> 41:30.040
然后接下来就会在上一步的铲出上面

41:30.040 --> 41:31.320
是不是进行下一步的操作

41:31.880 --> 41:32.600
下一步的操作

41:32.600 --> 41:34.040
然后是不是又会有新的一个铲出

41:34.600 --> 41:34.840
对不对

41:34.840 --> 41:36.600
那一旦有这个新的铲出之后

41:36.600 --> 41:37.480
我后面的步骤

41:37.480 --> 41:38.920
是不是就用这个新的铲出

41:38.920 --> 41:41.640
我还会不会用你这个上上步的这个铲出

41:42.680 --> 41:43.160
不会了吗

41:43.720 --> 41:44.440
对不对

41:44.440 --> 41:45.160
ok

41:45.160 --> 41:45.880
说现在的话

41:46.040 --> 41:46.840
你要理解

41:46.840 --> 41:48.600
现在的话我们这边这个树

41:49.720 --> 41:51.000
树变成这个样子了

41:51.000 --> 41:51.320
好

41:51.320 --> 41:52.040
然后接下来的话

41:52.040 --> 41:53.880
我这个下一个步骤

41:53.880 --> 41:55.240
就是在他的基础上

41:55.800 --> 41:57.240
再做下一步操作

41:57.800 --> 41:59.000
再做下步操作

41:59.000 --> 42:00.600
可能就又会生成一个新的东西

42:00.600 --> 42:01.400
生成新的东西

42:01.400 --> 42:02.680
大家他又不会再用了

42:03.400 --> 42:03.720
ok

42:05.560 --> 42:05.960
好来

42:06.760 --> 42:07.080
好

42:07.080 --> 42:07.960
然后接下来的话

42:07.960 --> 42:09.960
我们刚才是已经得到了一个这个

42:09.960 --> 42:11.720
代样式的这个动物树

42:12.600 --> 42:13.320
对不对

42:13.320 --> 42:13.640
好

42:13.640 --> 42:14.760
然后接下来的话

42:14.840 --> 42:16.600
经过这个步骤

42:16.600 --> 42:18.120
他会去便利

42:18.120 --> 42:20.120
这边也是一个地规

42:20.120 --> 42:21.160
地规便利

42:21.160 --> 42:23.240
这里就设计他具体的这个算法了

42:24.120 --> 42:26.120
然后去便利这个动物树

42:26.680 --> 42:26.920
好

42:26.920 --> 42:30.760
根据这个动物节点的计算样式

42:30.760 --> 42:32.120
因为你的这个就是

42:33.160 --> 42:34.680
和步骤相关的样式

42:35.400 --> 42:36.760
是不是也是属于这个

42:37.720 --> 42:38.760
样式规则

42:38.760 --> 42:39.240
对不对

42:39.240 --> 42:41.640
我在这个样式里面我是可以拿得到的

42:41.640 --> 42:43.480
然后这样我根据你这些

42:43.480 --> 42:45.480
步骤相关的样式规则

42:45.480 --> 42:48.440
我来计算出一个步骤数

42:49.480 --> 42:50.120
ok

42:50.120 --> 42:51.080
那步骤数的话

42:51.080 --> 42:52.440
然后每个节点上面

42:52.440 --> 42:54.040
会有他在页面上的比如

42:54.040 --> 42:55.000
x啊

42:55.000 --> 42:56.680
y啊这些坐标

42:56.680 --> 42:58.600
还有你盒子大小啊之类的

42:58.600 --> 43:00.040
就会有这些信息

43:01.240 --> 43:01.480
ok

43:02.120 --> 43:03.320
你看这边

43:03.320 --> 43:04.760
我的这个动物树

43:05.640 --> 43:07.560
经过步骤之后

43:07.560 --> 43:09.080
最终会生成一个什么呢

43:09.080 --> 43:11.480
会生成一颗步骤数

43:12.440 --> 43:13.640
叫做nay out

43:14.520 --> 43:15.560
nay out tree

43:16.120 --> 43:18.120
前面叫做dorm tree

43:18.120 --> 43:18.440
啊

43:18.440 --> 43:21.160
然后既然这边会生成叫做nay out tree

43:21.960 --> 43:22.680
ok

43:22.680 --> 43:23.000
好

43:23.000 --> 43:24.840
然后接下来你在面试的时候

43:24.840 --> 43:26.840
你光达到这一点

43:26.840 --> 43:27.320
还不够

43:28.120 --> 43:28.920
还不够

43:28.920 --> 43:29.640
你这边的话

43:29.640 --> 43:31.160
你还可以达出这一点

43:31.160 --> 43:31.960
啊

43:31.960 --> 43:34.200
就是这个nay out tree

43:34.760 --> 43:36.920
他往往和这个dorm tree

43:36.920 --> 43:39.160
不是一一对应的

43:39.880 --> 43:41.720
他不是一一对应的

43:41.720 --> 43:44.120
他虽然就是可能会和这个dorm

43:44.120 --> 43:45.640
长得很像啊

43:45.640 --> 43:46.600
长得很像

43:46.600 --> 43:47.080
但是呢

43:47.080 --> 43:48.440
他不是一一对应的

43:48.440 --> 43:49.320
为什么呢

43:49.320 --> 43:51.240
因为你这个dorm上面

43:51.240 --> 43:53.240
dorm上面有的一些东西

43:53.240 --> 43:54.280
nay out上面

43:54.280 --> 43:55.400
他可能没有

43:55.400 --> 43:56.120
然后dorm

43:56.120 --> 43:59.000
这个dorm树上面没有的一些东西

43:59.000 --> 44:00.120
可能这个nay out

44:00.120 --> 44:01.400
就是这个步骤树上面

44:01.400 --> 44:02.200
可能会有

44:03.240 --> 44:04.040
为什么呢

44:04.600 --> 44:04.920
对吧

44:04.920 --> 44:05.720
这个就很神奇了

44:05.720 --> 44:07.720
我dorm树上面都没有的东西

44:07.720 --> 44:08.600
为什么最终

44:09.160 --> 44:10.440
生成这个步骤树了

44:10.440 --> 44:11.160
你还有了

44:12.360 --> 44:13.160
对吧

44:13.160 --> 44:14.040
然后接下来

44:14.040 --> 44:16.280
我这dorm树上面有的东西

44:16.280 --> 44:19.640
为什么到你这个nay out

44:19.640 --> 44:21.160
你的这个步骤树上面

44:21.160 --> 44:22.040
就没有了

44:23.320 --> 44:23.960
为什么

44:23.960 --> 44:25.800
我们这边指的是有些东西

44:25.800 --> 44:26.760
有些东西

44:26.760 --> 44:28.760
那究竟是哪些东西呢

44:28.760 --> 44:29.080
OK

44:29.080 --> 44:30.200
我们来看一下

44:30.200 --> 44:32.680
比如你的display

44:32.680 --> 44:34.440
看见没有

44:34.440 --> 44:35.480
比如说现在我这边的话

44:35.480 --> 44:36.840
有一个dorm树

44:36.840 --> 44:37.800
我dorm树的话

44:37.800 --> 44:39.160
它将我整个这一块

44:40.440 --> 44:41.800
我是挂了一个样式

44:42.760 --> 44:44.680
叫做display

44:44.680 --> 44:45.240
OK

44:45.240 --> 44:47.480
那它在生成dorm树的时候

44:47.480 --> 44:49.080
它这个有没有

44:49.080 --> 44:50.040
这一块它是有的

44:51.080 --> 44:51.960
它是有的

44:51.960 --> 44:53.400
在dorm树里面是有的

44:53.400 --> 44:55.080
但我现在我要生成的是什么

44:55.080 --> 44:56.520
我要生成的是步骤树

44:57.400 --> 45:00.120
步骤树是直接决定了什么呢

45:00.120 --> 45:01.240
听清楚这句话

45:01.240 --> 45:03.880
步骤树是直接决定的

45:03.880 --> 45:05.560
显示出来的页面

45:06.440 --> 45:07.720
是什么样子的

45:08.680 --> 45:09.320
OK

45:09.320 --> 45:11.320
那你看我这边都是display

45:11.320 --> 45:13.320
显示出来的页面这一块

45:13.320 --> 45:13.880
该不该有

45:14.680 --> 45:15.320
这不该有

45:16.040 --> 45:16.680
对不对

45:16.680 --> 45:17.560
不该有

45:17.560 --> 45:20.200
所以说在步骤树当中

45:20.200 --> 45:21.400
这一块的话

45:21.400 --> 45:24.840
它也是不会生成到

45:24.840 --> 45:25.800
步骤树里面的

45:26.840 --> 45:27.400
明白没有

45:28.280 --> 45:29.880
它不会生成到

45:29.880 --> 45:30.680
步骤树里面

45:31.560 --> 45:31.800
OK

45:32.520 --> 45:33.160
再比如

45:33.880 --> 45:36.680
比如说你使用了这个委员数选择器

45:37.800 --> 45:38.760
委员数选择器

45:38.760 --> 45:40.040
委员数选择器的话

45:40.040 --> 45:41.480
它在dorm树里面

45:41.480 --> 45:43.720
它是不存在委员数这个节点的

45:44.440 --> 45:45.160
它不存在

45:45.160 --> 45:47.240
但是你这个委员数选择器呢

45:47.880 --> 45:51.560
就是真实在生成步骤树的时候

45:52.600 --> 45:53.320
你这个比幅

45:53.320 --> 45:53.800
比幅的话

45:53.800 --> 45:56.040
一般是会有一个真实的dorm节点

45:56.600 --> 45:57.160
对不对

45:57.160 --> 46:00.200
所以它会存在于步骤树当中

46:01.080 --> 46:02.280
你看这个是不是就是区别

46:03.000 --> 46:03.400
对不对

46:04.200 --> 46:05.000
再比如这边

46:05.720 --> 46:06.440
再比如这边

46:07.000 --> 46:08.280
这边还有就是什么呢

46:08.280 --> 46:10.040
这这个利民含和

46:10.600 --> 46:11.320
利民快和

46:11.880 --> 46:13.800
这个知识点很多人其实都不知道了

46:14.520 --> 46:15.320
很多人都不知道

46:15.880 --> 46:16.760
就我们这边

46:16.760 --> 46:17.880
这边的话你看这边

46:17.880 --> 46:19.720
这边是这个是一个快和吗

46:20.520 --> 46:21.800
这个p是不是一个快和

46:22.440 --> 46:23.000
快和里面

46:23.000 --> 46:25.160
然后这样我们是不是直接放了一个文本

46:25.720 --> 46:26.040
对不对

46:26.040 --> 46:26.840
那文本的话

46:26.840 --> 46:29.960
它是不能单独存在于快和里面的

46:30.760 --> 46:31.400
所以说这边的话

46:31.400 --> 46:34.520
它会自动的生成一个叫做利民含和

46:35.480 --> 46:37.320
会生成一个利民的这个含和

46:37.320 --> 46:39.000
那接下来把这个文字的话

46:39.000 --> 46:41.000
放到利民的含和里面

46:42.360 --> 46:43.000
ok

46:43.000 --> 46:43.400
好

46:43.400 --> 46:44.200
然后这样还有这里

46:44.200 --> 46:45.480
这里的话你这个p

46:45.480 --> 46:47.320
p的话它是一个快和

46:48.040 --> 46:48.600
对不对

46:48.600 --> 46:50.120
那接下来这个也是个快和

46:50.680 --> 46:51.960
那那两个都是快和的话

46:51.960 --> 46:53.240
那中间这个b

46:53.240 --> 46:55.240
它是不是也注定会干嘛

46:55.240 --> 46:56.760
是不是独占一行

46:56.760 --> 46:58.120
是不是也就是一个快和

46:58.120 --> 46:59.160
所以它这边的话

46:59.160 --> 47:01.720
会生成一个利民快和

47:02.520 --> 47:03.160
利民快和

47:03.320 --> 47:04.680
然后这边理论上来讲

47:04.680 --> 47:05.720
这个利民快和里面

47:05.720 --> 47:07.800
还会有一个利民含和

47:07.800 --> 47:09.000
那既然这个b

47:09.000 --> 47:10.440
被放在这个利民含和里面

47:10.440 --> 47:11.800
然后加利民含和

47:11.800 --> 47:13.720
又嵌到在利民快和里面

47:14.520 --> 47:15.160
ok

47:15.160 --> 47:17.000
那这些信息的话

47:17.000 --> 47:18.360
都是你这个dorm

47:19.000 --> 47:22.520
这个dorm数无法对应出来的

47:23.240 --> 47:23.880
对不对

47:23.880 --> 47:26.360
只有在生成这个布局数的时候

47:26.360 --> 47:27.880
我才能把这些信息

47:27.880 --> 47:29.400
把它显示出来

47:29.400 --> 47:30.360
包括这边

47:30.360 --> 47:30.920
对吧

47:30.920 --> 47:32.040
生成布局数的时候

47:32.280 --> 47:33.400
把它显示出来

47:33.400 --> 47:35.400
这边生成布局数的时候

47:35.400 --> 47:36.680
我这一块我不要

47:37.480 --> 47:37.800
对不对

47:38.520 --> 47:39.800
说说你现在就理解

47:40.520 --> 47:42.920
布局数大部分时候

47:43.560 --> 47:44.520
只能说是大部分时候

47:44.520 --> 47:45.480
你不能说就是

47:46.040 --> 47:47.640
绝对没办法一一对应

47:47.640 --> 47:48.280
那不见得

47:49.080 --> 47:51.080
当然你如果考虑这一点的话

47:51.080 --> 47:52.200
就是这个利民含和

47:52.200 --> 47:53.640
利民快和的话

47:53.640 --> 47:54.200
那确实是

47:55.320 --> 47:56.360
但是也不一定

47:56.360 --> 47:57.480
我如果我这个

47:57.480 --> 47:58.360
我这里面就是

47:58.360 --> 47:59.560
我写了这个含和

48:00.200 --> 48:00.520
对吧

48:00.520 --> 48:01.640
我这边我不是这样子的

48:01.720 --> 48:02.120
我这边

48:02.840 --> 48:03.960
我这边比如说我就是

48:04.680 --> 48:05.560
老老实实的

48:05.560 --> 48:05.800
对吧

48:05.800 --> 48:06.200
我这样子

48:06.200 --> 48:06.760
那这样子的话

48:06.760 --> 48:07.800
你的这个dorm数

48:08.360 --> 48:09.480
和那个布局数

48:10.360 --> 48:11.480
是不是就是一一对应的

48:12.280 --> 48:12.600
对吧

48:13.160 --> 48:13.400
OK

48:14.920 --> 48:15.160
好

48:15.160 --> 48:16.680
就大部分时候

48:17.560 --> 48:18.840
这个和dorm数

48:18.840 --> 48:20.440
并非一一对应

48:20.440 --> 48:23.320
它虽然长得和之前的dorm数差不多

48:24.200 --> 48:24.760
但是呢

48:24.760 --> 48:25.960
它有一些就是

48:25.960 --> 48:28.440
涉及到比如说可见性的一些信息

48:29.240 --> 48:29.640
对吧

48:29.640 --> 48:31.240
它会和这个之前的dorm数

48:31.800 --> 48:32.200
不一样

48:33.240 --> 48:33.880
OK

48:33.880 --> 48:35.240
你如果能够把这一点

48:35.800 --> 48:37.000
打出来的话

48:37.000 --> 48:38.760
面试官的话都已经很

48:38.760 --> 48:40.120
就已经非常惊艳了

48:40.120 --> 48:40.280
哈

48:41.240 --> 48:42.760
非常非常惊艳了

48:42.760 --> 48:43.000
OK

48:44.680 --> 48:45.320
好

48:45.320 --> 48:47.560
然后这是关于这个布局

48:48.280 --> 48:48.600
布局

48:49.240 --> 48:49.560
好

48:49.560 --> 48:50.680
然后布局完了之后

48:50.680 --> 48:51.880
然后接下来我们下一步

48:52.680 --> 48:53.320
我们继续

48:54.760 --> 48:55.240
下一步

48:56.120 --> 48:57.480
下一步是什么呢

48:57.480 --> 48:58.760
下一步的话

48:58.760 --> 49:00.440
我们叫做分层

49:01.400 --> 49:02.040
有了这个

49:02.040 --> 49:03.080
现在我们是不是已经有了

49:03.080 --> 49:04.120
一颗布局数

49:05.960 --> 49:06.520
对吧

49:06.520 --> 49:07.800
已经有了一颗布局数

49:08.360 --> 49:09.400
那布局数

49:09.400 --> 49:09.960
有了之后

49:09.960 --> 49:11.400
就直接就是汇制了吗

49:12.440 --> 49:13.000
还不是

49:13.720 --> 49:14.520
接下来的话

49:14.520 --> 49:17.240
它还会进行一个重要的步骤

49:18.040 --> 49:18.920
叫做分层

49:19.640 --> 49:20.280
OK

49:20.280 --> 49:21.080
你看这边

49:21.080 --> 49:22.200
这边非常形象

49:22.200 --> 49:23.240
这边那就是

49:23.240 --> 49:24.040
一层一层的

49:24.680 --> 49:25.560
把它分出来

49:26.440 --> 49:29.000
为什么我要对一个页面进行分层呢

49:29.720 --> 49:30.600
首先这个分层

49:30.600 --> 49:31.400
大家能不能理解

49:31.960 --> 49:32.840
就是分层的话

49:32.840 --> 49:35.000
那个你如果用过那个photoshop

49:35.560 --> 49:37.400
我不知道有没有用过photoshop的同学

49:38.040 --> 49:39.320
如果你用过photoshop的话

49:39.320 --> 49:40.680
那你对那个图层

49:41.160 --> 49:42.360
是非常好理解的

49:42.920 --> 49:44.680
啊那个图层的话就像是什么呢

49:44.680 --> 49:45.960
就像那个透明的

49:46.360 --> 49:47.400
什么透明的纸

49:47.960 --> 49:48.280
对不对

49:48.280 --> 49:49.080
我每一层的话

49:49.080 --> 49:50.040
我画的东西不一样

49:50.040 --> 49:50.920
然后加最后的话

49:50.920 --> 49:51.800
所有的那个图

49:52.600 --> 49:53.640
然后加放在一起

49:53.640 --> 49:55.000
那从上往下看

49:55.000 --> 49:57.000
是不是整张完整的图就出来了

49:57.480 --> 49:57.800
对不对

49:58.360 --> 49:59.720
那分层的好处在于什么

50:00.760 --> 50:02.120
分层的好处在于是不是

50:02.120 --> 50:03.560
我修改某一层

50:03.960 --> 50:05.480
这不影响其他层啊

50:06.840 --> 50:07.480
对不对

50:07.480 --> 50:08.520
不影响其他层

50:09.160 --> 50:09.960
如果就是比如说

50:09.960 --> 50:12.120
我某一层发生改变之后

50:12.120 --> 50:13.000
我可以干嘛呢

50:13.000 --> 50:14.920
我可以仅对这一层

50:15.960 --> 50:16.680
进行处理

50:17.480 --> 50:18.840
啊大家从而干嘛呢

50:18.840 --> 50:20.360
从而提升效率

50:21.240 --> 50:21.880
OK

50:21.880 --> 50:22.840
这个分层的话

50:22.840 --> 50:25.240
这个大家在浏览器里面是可以看到的

50:26.200 --> 50:27.800
比较惊动

50:27.800 --> 50:29.240
打开这个惊动

50:29.240 --> 50:30.840
你打开这边这个检查

50:32.680 --> 50:33.720
打开检查之后

50:33.720 --> 50:35.240
然后加这边是不会有个图程

50:35.800 --> 50:36.120
对不对

50:36.120 --> 50:37.000
但你如果没有

50:37.000 --> 50:37.640
哈比如你这边

50:38.120 --> 50:38.600
有的说

50:38.600 --> 50:39.240
哎我没有啊

50:39.240 --> 50:39.880
先老师

50:39.880 --> 50:40.440
我这边没有

50:40.440 --> 50:42.040
你看这些其实都是可以干嘛呢

50:42.040 --> 50:43.160
都是可以关闭的

50:43.800 --> 50:44.520
啊就有些哈

50:44.520 --> 50:45.800
比如这个是可以关闭的

50:45.800 --> 50:47.000
有些都不能关

50:47.000 --> 50:47.960
那如果我没有

50:47.960 --> 50:48.680
没有怎么办

50:48.680 --> 50:49.320
没有在

50:50.440 --> 50:51.960
嗯我看这哪个位置哈

50:53.160 --> 50:53.880
在这里

50:54.040 --> 50:55.320
这里有个更多工具

50:55.800 --> 50:56.360
看到没有

50:56.360 --> 50:58.280
你看你会发现这边工具都在这了

50:59.320 --> 50:59.720
看到没有

51:00.360 --> 51:00.840
OK

51:00.840 --> 51:02.600
然后加你找到这个图程

51:03.240 --> 51:03.640
在这里

51:04.360 --> 51:05.080
啊在这里

51:05.640 --> 51:07.160
好然后加我们这边我们来看一下嘛

51:07.720 --> 51:07.960
这里

51:10.120 --> 51:10.920
哎你看这边

51:11.640 --> 51:12.600
你通过图程的话

51:12.600 --> 51:13.880
你可以明显的看到

51:13.880 --> 51:16.040
哎你看这些轮波图它是怎么动的

51:16.040 --> 51:17.480
是不是你都看得一清二楚

51:18.520 --> 51:19.240
对不对

51:19.240 --> 51:21.640
啊你看它这边每一层啊

51:21.640 --> 51:23.240
我们看看简单点的吧

51:23.240 --> 51:24.120
看看简单点的

51:24.120 --> 51:24.760
看看啥呢

51:25.800 --> 51:27.480
还有没有简单的网页

51:27.480 --> 51:28.760
啊有百度是吧

51:29.480 --> 51:30.600
啊百度就最简单

51:31.160 --> 51:31.800
OK

51:31.800 --> 51:32.440
你看

51:32.440 --> 51:34.440
就连百度它这边都是分了层的

51:35.000 --> 51:35.320
OK

51:35.320 --> 51:36.520
你怎么看你把这展开

51:37.160 --> 51:39.160
展开你会发现它这边分了不同的层

51:39.800 --> 51:41.640
啊比如这个这个的话是整个文档

51:42.440 --> 51:44.200
啊这边是这个这外面

51:45.000 --> 51:46.920
啊这边这边是下面这一块

51:47.560 --> 51:47.800
OK

51:48.520 --> 51:50.200
啊然后加这边这边是滚动条

51:50.200 --> 51:51.960
滚动条一般都会单独分一层

51:52.920 --> 51:53.960
啊为什么呢

51:54.040 --> 51:55.240
因为后期你画的时候

51:55.240 --> 51:56.120
那个滚动条

51:56.120 --> 51:59.720
对你在这个翻翻这个网页的时候

51:59.720 --> 52:00.600
这个滚动条啊

52:00.600 --> 52:02.120
你看上去就是很自然是吧

52:02.120 --> 52:03.240
就是我这边一移动的时候

52:03.240 --> 52:04.680
这个滚动条往下

52:04.680 --> 52:07.160
它这边其实都是一针一针画出来的

52:07.160 --> 52:07.720
同学们

52:08.760 --> 52:10.520
一针一针画出来的啊

52:11.000 --> 52:11.880
你记住

52:11.880 --> 52:14.680
就任何你看到的动画效果

52:15.240 --> 52:17.240
啊可能你已经以为

52:17.240 --> 52:18.280
就理所当然了

52:18.280 --> 52:19.560
它就是这样子的

52:19.560 --> 52:20.840
但其实都是什么呢

52:20.840 --> 52:23.240
其实都是一针一针绘子出来的

52:24.280 --> 52:26.040
包括什么包括这个鼠标移动

52:26.840 --> 52:28.120
这鼠标移动这个

52:28.120 --> 52:30.120
有的人说这个有什么好说的

52:30.680 --> 52:31.080
对吧

52:31.080 --> 52:33.000
那鼠标我这边我这个移动鼠标

52:33.000 --> 52:33.880
它就是会动啊

52:34.680 --> 52:35.640
哪有那么简单

52:36.520 --> 52:38.040
哪有那么简单啊

52:38.040 --> 52:39.480
实际上这个鼠标

52:39.480 --> 52:41.640
你这边在移动它的时候

52:41.640 --> 52:42.920
其实也是什么呢

52:42.920 --> 52:45.960
也是一针一针绘子出来的

52:46.520 --> 52:47.320
啊只不过这个的话

52:47.320 --> 52:49.240
不由那个浏览器来绘子

52:49.240 --> 52:50.360
啊这个的话是操作系统

52:50.920 --> 52:52.520
操作系统来绘子的这个鼠标

52:53.160 --> 52:53.720
对不对

52:53.800 --> 52:55.080
不然我们的那个

52:55.080 --> 52:56.760
那个屏幕那个刷新率

52:56.760 --> 52:57.720
它用来干什么的

52:59.160 --> 53:00.120
对不对啊

53:00.120 --> 53:01.560
我们去买显示器的时候

53:02.600 --> 53:04.440
一般是显示器吧

53:04.440 --> 53:06.040
反正就是会有一个那个刷新率

53:06.680 --> 53:08.520
对不对多少多少赫兹的这个刷新率

53:09.240 --> 53:09.880
对不对啊

53:09.880 --> 53:11.320
包括现在手机嘛也是吗

53:11.320 --> 53:12.360
看它是不是高刷屏

53:13.400 --> 53:15.080
对不对啊有点印象吧

53:15.080 --> 53:17.080
各位进去买手机的时候

53:17.080 --> 53:17.960
是不是他都会说

53:17.960 --> 53:19.640
哎我这手机啊是比如说

53:19.640 --> 53:21.240
120赫兹的这个高刷屏

53:21.960 --> 53:22.440
对不对

53:22.520 --> 53:24.280
那高刷他究竟是干什么

53:24.280 --> 53:26.600
他干嘛就是一秒钟跟我刷新这么多次

53:27.160 --> 53:28.520
不就是因为就是你这边

53:28.520 --> 53:29.480
比如说你有动画的话

53:29.480 --> 53:31.400
他这边啊刷新这么多次

53:31.400 --> 53:34.120
是不是能能能让你看到这个动画的效果

53:34.840 --> 53:35.160
对不对

53:35.160 --> 53:37.240
他要是不刷新不刷新那就完蛋了

53:37.240 --> 53:39.320
那我这边这个鼠标在这那就一直在这

53:39.320 --> 53:40.360
我怎么动都动不了

53:41.400 --> 53:41.720
OK

53:42.360 --> 53:43.880
那实际上比方我鼠标在动

53:43.880 --> 53:44.840
其实就是什么

53:44.840 --> 53:46.840
其实就是屏幕不停的在刷新

53:47.480 --> 53:48.680
其实就是动画的原理

53:49.640 --> 53:50.680
啊就是动画的原理

53:51.480 --> 53:52.120
就是我这边呢

53:52.120 --> 53:53.000
我这边在移动的话

53:53.000 --> 53:55.640
他其实就是不停的在刷新屏幕

53:55.640 --> 53:57.960
从而给你造成一种视觉上

53:57.960 --> 53:58.840
这个东西在动

54:00.040 --> 54:00.520
明白吧

54:01.080 --> 54:02.280
OK就理论上来讲

54:02.280 --> 54:04.040
所有移动的东西

54:04.600 --> 54:05.880
都是靠这种方式

54:06.920 --> 54:08.120
都是靠的这种方式

54:08.760 --> 54:10.520
OK那这边也是一样

54:10.520 --> 54:10.920
这边呢

54:10.920 --> 54:13.160
你看上去这个滚动条是吧

54:13.160 --> 54:14.280
哎非常丝滑

54:14.280 --> 54:16.360
哎我往上面啊滚动

54:16.360 --> 54:18.040
然后加这个滚动条就啊

54:18.040 --> 54:19.480
就本就在那移动

54:19.480 --> 54:19.960
对吧

54:20.040 --> 54:21.160
看上去很丝滑

54:21.160 --> 54:22.280
实际上是什么

54:22.280 --> 54:24.200
实际上是这个页面不停的在刷新

54:25.320 --> 54:26.120
啊但我刷新

54:26.120 --> 54:28.280
我说的刷新不是指的这里的刷新

54:28.280 --> 54:30.120
我是指的这个屏幕的绘子

54:31.880 --> 54:33.000
屏幕的绘子

54:33.000 --> 54:34.360
它不停的在重新绘子

54:35.240 --> 54:35.880
知道吧

54:35.880 --> 54:37.640
啊所说一般来讲的话这个

54:38.840 --> 54:39.560
滚动条的话

54:39.560 --> 54:40.840
他一般会单独成

54:40.840 --> 54:41.720
成一个层

54:41.720 --> 54:42.440
看没有这边

54:43.160 --> 54:43.960
单独成一层

54:44.600 --> 54:44.840
OK

54:45.880 --> 54:46.680
一般都是啊

54:46.680 --> 54:47.640
你看这这边也是

54:48.600 --> 54:49.640
啊这边淘宝

54:49.640 --> 54:50.840
我们来看一下吧

54:50.840 --> 54:51.880
一般都是滚动条

54:51.880 --> 54:53.000
会单独成一个屠城

54:54.440 --> 54:55.240
呃

54:55.240 --> 54:55.640
屠城

54:56.760 --> 54:58.120
啊淘宝这个应该就多了

54:58.120 --> 54:59.720
啊也也不是太多

55:00.600 --> 55:01.400
这边对吧

55:02.280 --> 55:03.240
单独成一个屠城

55:03.240 --> 55:04.040
啊你看这宽度

55:04.040 --> 55:04.760
你都看得出来

55:04.760 --> 55:05.480
是吧32

55:06.360 --> 55:07.400
对不对

55:07.400 --> 55:07.640
OK

55:08.920 --> 55:10.040
啊回到我们这边

55:11.320 --> 55:11.800
好

55:11.800 --> 55:12.600
然后接下这步

55:12.600 --> 55:14.440
这一步就是进行这个分层

55:15.640 --> 55:16.520
啊

55:16.520 --> 55:18.760
啊为了确定哪些元素

55:19.560 --> 55:22.680
需要放置在放置在哪一层

55:23.160 --> 55:23.320
啊

55:23.320 --> 55:25.080
然后接下来主线城的话

55:25.080 --> 55:26.040
他会干嘛呢

55:26.040 --> 55:27.640
你注意我始终在强调

55:27.640 --> 55:29.720
就目前的工作是谁在做

55:30.840 --> 55:32.360
是主线城在做

55:33.560 --> 55:34.200
OK

55:34.200 --> 55:35.800
主线城在做

55:35.800 --> 55:36.600
意味着什么

55:36.600 --> 55:39.160
意味着后面有一些工作

55:39.160 --> 55:41.080
不是主线城在做

55:41.880 --> 55:42.200
OK

55:42.200 --> 55:44.200
不然我不会给你一直反复的强调啊

55:44.200 --> 55:45.320
这里是主线城在做

55:45.800 --> 55:46.120
OK

55:46.760 --> 55:47.160
好

55:47.160 --> 55:49.160
主线城需要干嘛呢

55:49.160 --> 55:50.600
需要便利

55:50.600 --> 55:52.120
整颗布局数

55:52.120 --> 55:54.040
我们刚是不是已经生成了一颗布局数了

55:55.240 --> 55:55.880
对吧

55:55.880 --> 55:56.200
好

55:56.200 --> 55:57.240
那接下这个主线城的话

55:57.240 --> 55:59.240
他再次去便利你生成的这个

56:00.040 --> 56:00.360
这个

56:01.160 --> 56:02.520
生成的这个布局数

56:02.520 --> 56:04.680
然后接下来创建一颗什么呢

56:04.680 --> 56:07.000
创建一颗层次数

56:07.720 --> 56:09.080
啊叫做nair tree

56:10.680 --> 56:11.560
层次数

56:11.560 --> 56:13.240
这个层次的这个数

56:13.240 --> 56:13.720
OK

56:13.720 --> 56:15.160
你看这也看得出来

56:15.240 --> 56:16.360
这里是个数型结构

56:17.480 --> 56:18.040
对

56:18.040 --> 56:19.480
这里是个数型结构

56:19.480 --> 56:19.720
OK

56:20.280 --> 56:21.800
创建一颗层次数

56:22.360 --> 56:22.600
啊

56:23.240 --> 56:23.480
好

56:23.480 --> 56:24.200
然后接下来的话

56:24.200 --> 56:25.880
你这个就是有些东西啊

56:25.880 --> 56:26.840
比较滚动条

56:26.840 --> 56:28.200
我们刚是不是说了

56:28.200 --> 56:28.760
包括什么呢

56:28.760 --> 56:30.280
包括这个堆叠上下文

56:31.000 --> 56:31.960
堆叠上下文的话

56:31.960 --> 56:33.000
这个要展开的话

56:33.560 --> 56:34.600
又是一篇文章了

56:35.400 --> 56:36.200
又是一篇文章

56:36.200 --> 56:38.600
这个你可以在那个css面试题那边

56:39.160 --> 56:41.560
专门有一个讲堆叠上下文的

56:41.560 --> 56:42.680
大家可以看一下

56:43.720 --> 56:44.520
简单来讲的话

56:44.520 --> 56:46.280
就是你那个和reindex

56:46.760 --> 56:47.400
相关的

56:48.120 --> 56:50.360
但它不仅仅只是reindex

56:51.160 --> 56:51.400
OK

56:52.200 --> 56:54.120
然后还有这个transform啊

56:54.120 --> 56:55.080
Obsettia这些

56:55.800 --> 56:57.320
啊这些样式的话

56:57.320 --> 56:58.360
或多或少

56:58.840 --> 57:01.320
它会影响这个分成的这个结果

57:02.360 --> 57:04.600
那比方我对某一个元素

57:04.600 --> 57:06.280
我设置了reindex

57:06.280 --> 57:07.320
在定位的情况下

57:07.800 --> 57:08.120
好

57:08.120 --> 57:09.320
设置了这个reindex

57:09.960 --> 57:11.400
那它这个很明显是不是到时候

57:11.400 --> 57:12.360
会单独呈一场

57:13.240 --> 57:13.560
对不对

57:14.120 --> 57:15.480
那你也可以使用什么呢

57:15.480 --> 57:17.400
你可以使用vue倾计属性

57:17.960 --> 57:19.080
来告诉浏览器

57:19.720 --> 57:21.080
我要对它进行分成

57:21.080 --> 57:22.360
啊比如说你看我们这边

57:23.240 --> 57:24.280
我们这边比如说这个

57:25.800 --> 57:27.000
这个我们来看一下这个图成

57:27.720 --> 57:29.160
啊这个就很简单了对吧

57:29.160 --> 57:30.760
这边是这个样子的

57:30.760 --> 57:33.400
OK啊比如说我们这边我们多写一个吗

57:35.000 --> 57:36.280
嗯比如说这边p

57:36.280 --> 57:37.560
大家我们再来一个p

57:38.520 --> 57:41.960
OK啊大家我们这边给它写一个class

57:42.600 --> 57:44.280
等于一个test

57:46.040 --> 57:47.320
好你看一下现在是什么样子

57:47.960 --> 57:49.080
现在的话是不是就一层

57:49.880 --> 57:50.520
对了

57:50.520 --> 57:51.800
这边就一层

57:51.800 --> 57:54.280
啊啊而且也不不存在滚动条啊

57:54.920 --> 57:56.040
好然后接下来的话

57:56.040 --> 57:56.600
我这边的话

57:56.600 --> 58:00.360
我针对这个点test

58:02.120 --> 58:03.480
我这边设置一个什么呢

58:03.480 --> 58:05.320
设置一个vue倾计

58:05.960 --> 58:08.360
啊就这个属性

58:08.920 --> 58:12.010
vue倾计

58:12.010 --> 58:12.810
啊比如这里

58:13.530 --> 58:16.570
这里的话我给它设置一个traceform

58:18.410 --> 58:19.690
traceform

58:19.690 --> 58:20.730
然后接下来这边的话

58:22.170 --> 58:23.370
比如说tracelit

58:24.410 --> 58:25.850
然后零零

58:27.770 --> 58:30.090
然后现在我们这边来写一个vue倾计

58:30.890 --> 58:32.490
啊然后现在针对哪一个属性呢

58:32.490 --> 58:33.450
针对这边这个p

58:33.930 --> 58:35.450
还有一个traceform

58:36.330 --> 58:38.650
OK就是这个的话就是将来会变的

58:38.970 --> 58:40.490
对吧就是这个traceform

58:40.890 --> 58:42.650
traceform啊将来会变的

58:42.890 --> 58:44.410
好然后接下来这边呢将来会变的话

58:44.410 --> 58:46.970
它这边的话就会单独对它形成一层

58:48.010 --> 58:48.730
你看这边

58:48.730 --> 58:50.330
是不是单独成为一层

58:51.130 --> 58:52.490
OK

58:52.490 --> 58:55.050
啊但我这节课不是专门讲这个vue倾计

58:55.050 --> 58:57.850
啊我这边只是给你就是试力看一下

58:57.850 --> 59:00.330
可能有有的同学知都不知道这个属性

59:01.210 --> 59:01.690
对吧

59:01.690 --> 59:03.770
他同学说连我这个属性我都不知道呀

59:03.770 --> 59:06.650
那不知道的话那下次我再单独开一节课

59:06.650 --> 59:08.090
来讲这个vue倾计

59:08.650 --> 59:09.370
好不好

59:09.370 --> 59:10.650
不然这个发散出去的话

59:10.650 --> 59:11.850
这个就没完没了

59:12.410 --> 59:13.050
OK

59:13.050 --> 59:15.770
我这边只是告诉你啊就有一些属性

59:15.770 --> 59:17.370
他可能会影响

59:18.330 --> 59:21.050
浏览器的这个分层的策略

59:22.410 --> 59:23.210
没有吧

59:23.210 --> 59:23.450
OK

59:24.410 --> 59:26.730
啊这是这一步啊分层

59:29.510 --> 59:30.790
啊这一步这个分层

59:31.990 --> 59:34.950
好然后继续往后面啊快了啊

59:34.950 --> 59:35.830
讲了一半了

59:37.110 --> 59:37.750
对不对

59:37.750 --> 59:39.910
讲了一半了啊讲了一个小时了

59:39.910 --> 59:42.950
啊讲了一半了啊后面后面的话就要快一些了

59:43.110 --> 59:44.230
啊后面就要快一些了

59:46.100 --> 59:48.660
好然后接下来的话继续啊继续

59:51.960 --> 59:55.480
好现在的话我们的这个分层工作是不是已经结束了

59:56.040 --> 59:56.440
对吧

59:56.440 --> 59:59.080
哎你看我这边让我整个页面已经分成一层一层了

59:59.640 --> 01:00:02.360
那分成一层一层那最终我离不开什么

01:00:02.360 --> 01:00:04.520
我最终还是就我算分了这么多层

01:00:04.520 --> 01:00:06.520
但我最终是不是还是要把它绘制出来

01:00:07.480 --> 01:00:08.440
对不对好

01:00:08.440 --> 01:00:09.400
然后接下来的话

01:00:10.280 --> 01:00:12.840
就根据我这个不同的层啊

01:00:12.840 --> 01:00:14.120
然后生成什么呢

01:00:14.120 --> 01:00:16.440
生成绘制指令

01:00:17.080 --> 01:00:19.800
你注意这里的话还不是说就具体的开始化了

01:00:20.280 --> 01:00:21.320
还不是开始化了

01:00:21.320 --> 01:00:22.200
我生成什么呢

01:00:22.200 --> 01:00:24.280
生成这个绘制的指令

01:00:25.000 --> 01:00:27.480
那一条一条这个绘制的指令

01:00:28.680 --> 01:00:29.480
变成什么呢

01:00:29.480 --> 01:00:31.080
变成这个指令级

01:00:31.640 --> 01:00:32.680
ok比如说我这边

01:00:33.160 --> 01:00:35.080
这边就是一个指令级

01:00:35.720 --> 01:00:37.480
ok那下面又是一个指令级

01:00:38.600 --> 01:00:41.480
然后每一个图成会有一个指令级

01:00:42.040 --> 01:00:45.400
ok这个指令有点类似于什么呢

01:00:46.280 --> 01:00:48.840
我不知道大家学过那个Kanwas没有

01:00:48.840 --> 01:00:51.320
如果你学过这个Kanwas的话

01:00:51.320 --> 01:00:53.960
那这个指令其实就和这个Kanwas有点类似

01:00:54.520 --> 01:00:55.960
它就类似于什么呢

01:00:55.960 --> 01:00:58.200
你将画笔移动到叉叉叉叉位置

01:00:58.920 --> 01:01:00.040
放下画笔

01:01:00.040 --> 01:01:04.040
大家绘制一条叉叉叉像素的长度的这个线

01:01:04.840 --> 01:01:06.840
你看我们之前在用这个Kanwas

01:01:07.960 --> 01:01:09.080
在绘制的图形的时候

01:01:09.080 --> 01:01:10.520
是不是其实就这样做的

01:01:10.520 --> 01:01:11.000
对不对

01:01:11.000 --> 01:01:13.000
比如这边begin pass

01:01:13.720 --> 01:01:14.920
then move to

01:01:14.920 --> 01:01:15.960
然后加10

01:01:15.960 --> 01:01:17.560
然后加这边nigh to

01:01:17.560 --> 01:01:18.440
100 100

01:01:18.440 --> 01:01:19.480
close pass

01:01:19.480 --> 01:01:20.200
stroke it

01:01:20.920 --> 01:01:21.320
stroke

01:01:22.200 --> 01:01:23.880
ok它整个指令的话

01:01:23.880 --> 01:01:26.600
其实就有点类似于这个样子的

01:01:27.960 --> 01:01:29.480
所以你看Kanwas的话

01:01:29.480 --> 01:01:30.440
其实就是什么呢

01:01:30.440 --> 01:01:33.480
其实我们就是在书写一个一个的会字指令

01:01:34.360 --> 01:01:34.680
ok

01:01:38.120 --> 01:01:40.040
有了这些会字指令之后

01:01:40.680 --> 01:01:41.160
回头的话

01:01:41.160 --> 01:01:43.080
它就会一条一条的直行

01:01:43.560 --> 01:01:44.920
这些会字指令

01:01:44.920 --> 01:01:45.640
然后接下来的话

01:01:45.640 --> 01:01:47.640
其实它就会按照这个会字的指令

01:01:47.640 --> 01:01:48.440
直行了之后

01:01:48.440 --> 01:01:51.160
然后最终的话把这个页面

01:01:51.160 --> 01:01:52.360
把它绘制出来

01:01:53.000 --> 01:01:53.240
ok

01:01:53.880 --> 01:01:54.920
而那这一步的话

01:01:54.920 --> 01:01:57.080
你有两个地方你要注意

01:01:57.080 --> 01:01:59.480
就这一步的话生成的是会字指令

01:02:00.040 --> 01:02:01.720
就还没有开始具体的执行

01:02:02.360 --> 01:02:03.320
那也就是这一步的话

01:02:03.320 --> 01:02:05.080
页面还没有具体的出来

01:02:05.080 --> 01:02:06.200
它后面还有步骤

01:02:06.200 --> 01:02:08.600
可能后面还有什么分块光扇化

01:02:08.600 --> 01:02:10.360
然后这样才是会字

01:02:10.360 --> 01:02:12.600
ok它只是生成会字的指令

01:02:13.240 --> 01:02:15.640
这一点的话你一定要说清楚

01:02:16.280 --> 01:02:17.560
好第二个就是什么呢

01:02:17.560 --> 01:02:18.520
第二个就是

01:02:18.520 --> 01:02:20.360
这一步完成之后

01:02:20.360 --> 01:02:23.880
我们的这个渲染主线程的工作

01:02:24.520 --> 01:02:26.520
就暂时告一段落

01:02:27.320 --> 01:02:29.480
ok就前面这些步骤

01:02:29.480 --> 01:02:31.000
前面我们讲了这么多

01:02:31.000 --> 01:02:32.120
讲了一个多小时是吧

01:02:32.600 --> 01:02:34.440
讲了一个多小时这么这些步骤

01:02:34.440 --> 01:02:35.720
都是刚才都是什么呢

01:02:35.720 --> 01:02:37.800
都是渲染主线程在做

01:02:38.600 --> 01:02:39.560
啊但除了那个嘛

01:02:39.560 --> 01:02:40.120
除了那个

01:02:40.680 --> 01:02:42.040
他下载那个外部

01:02:42.600 --> 01:02:45.320
外部的css和外部的js

01:02:45.320 --> 01:02:47.800
啊他会开一个这个预解析线程

01:02:47.800 --> 01:02:50.360
是吧预解析线程稍微帮了一下嘛

01:02:50.360 --> 01:02:51.960
啊之后的那些东西

01:02:51.960 --> 01:02:54.280
什么样式计算呀布局呀分成啊

01:02:54.280 --> 01:02:54.920
都是

01:02:55.800 --> 01:02:57.800
渲染主线程在做

01:02:58.920 --> 01:03:02.840
ok好渲染主线程做到这一步之后

01:03:02.840 --> 01:03:03.800
然后接下来的话

01:03:03.800 --> 01:03:07.080
他会把每一个图成的会字信息

01:03:07.080 --> 01:03:07.640
就这一块

01:03:08.760 --> 01:03:09.400
就这一块

01:03:10.040 --> 01:03:11.560
啊我们针对每一个图成

01:03:11.560 --> 01:03:13.880
是不是生成了一个会字指令级

01:03:14.520 --> 01:03:14.840
对不对

01:03:14.840 --> 01:03:18.920
好那这样我会把这个指令级交给谁呢

01:03:18.920 --> 01:03:21.080
交给合成线程

01:03:22.120 --> 01:03:23.560
啊那剩下的工作的话

01:03:23.560 --> 01:03:26.600
合成线程他继续来接班

01:03:27.720 --> 01:03:28.360
继续来做

01:03:29.160 --> 01:03:32.280
ok好来我们接下来继续啊

01:03:32.280 --> 01:03:33.080
看下一个步骤

01:03:34.680 --> 01:03:35.880
下一个步骤的话

01:03:35.880 --> 01:03:36.920
叫做分块

01:03:37.480 --> 01:03:39.720
越来越接近了啊越来越快了

01:03:40.680 --> 01:03:42.200
下一个步骤叫做分块

01:03:43.080 --> 01:03:44.280
合成线程的话

01:03:44.280 --> 01:03:46.680
他首先会对每个图成

01:03:47.480 --> 01:03:48.840
进行分块啊

01:03:48.840 --> 01:03:51.960
划分出更多的这个小的区域

01:03:53.240 --> 01:03:54.760
啊比如说你看我这边

01:03:54.760 --> 01:03:56.200
我这边这个页面啊

01:03:56.200 --> 01:03:58.040
这个页面这边两个图成啊

01:03:58.040 --> 01:03:59.160
可能两个图成啊

01:03:59.160 --> 01:04:00.040
第一个图成这个样子

01:04:00.040 --> 01:04:01.240
第二个图成这个样子

01:04:01.240 --> 01:04:03.320
好再这样我针对我的这个图成

01:04:03.320 --> 01:04:05.080
进行一个分块

01:04:06.760 --> 01:04:07.720
为什么要分块呢

01:04:08.360 --> 01:04:09.480
为什么要分块

01:04:09.640 --> 01:04:10.920
啊原因很简单

01:04:10.920 --> 01:04:13.880
分成一个一个小块之后

01:04:13.880 --> 01:04:15.560
我的合成线程

01:04:15.560 --> 01:04:19.880
可以去把这个每一个块的绘制工作

01:04:19.880 --> 01:04:21.960
交给其他线程来做

01:04:22.520 --> 01:04:24.680
那也就是我们的这个合成线程

01:04:24.680 --> 01:04:27.240
他不会像那个渲染主线程一样啊

01:04:27.240 --> 01:04:29.160
渲染主线程是不是一个人在战斗

01:04:29.880 --> 01:04:30.520
对不对

01:04:30.520 --> 01:04:32.280
他合成线程不会

01:04:32.280 --> 01:04:34.120
合成线程一旦把这些啊

01:04:34.120 --> 01:04:35.800
分成一个一个的块之后

01:04:35.800 --> 01:04:38.440
他会交给多个线程

01:04:39.160 --> 01:04:41.080
同时来进行绘制

01:04:42.440 --> 01:04:42.840
看到没有

01:04:42.840 --> 01:04:43.480
比较这一步

01:04:43.480 --> 01:04:44.680
这一步的话是刚才那个

01:04:45.800 --> 01:04:47.400
生成绘制指令级

01:04:47.400 --> 01:04:47.800
对吧

01:04:47.800 --> 01:04:49.320
好让家交给什么呢

01:04:49.320 --> 01:04:51.160
交给这个合成线程

01:04:51.800 --> 01:04:52.520
合成线程

01:04:52.520 --> 01:04:54.760
让家这儿进行一个分块

01:04:55.960 --> 01:04:57.400
Tailing分块

01:04:57.400 --> 01:04:58.120
分块之后

01:04:58.120 --> 01:05:00.280
然后家是不是一个一个的块就出来了

01:05:01.480 --> 01:05:02.360
对吧

01:05:02.360 --> 01:05:04.200
一个一个块出来之后

01:05:04.200 --> 01:05:04.760
然后接下来

01:05:04.760 --> 01:05:07.400
我把每一个块交给什么呢

01:05:07.480 --> 01:05:08.760
交给其他的线程

01:05:09.800 --> 01:05:10.760
其他的线程

01:05:10.760 --> 01:05:11.640
然后你们来做

01:05:12.520 --> 01:05:13.320
做完了之后

01:05:13.320 --> 01:05:14.520
然后家最后的话

01:05:14.520 --> 01:05:16.920
再汇总到合成线程上面

01:05:17.960 --> 01:05:18.200
OK

01:05:19.400 --> 01:05:20.040
这边

01:05:20.040 --> 01:05:22.120
这就是分块这一步

01:05:22.680 --> 01:05:23.960
分成一个一个的小块

01:05:25.560 --> 01:05:25.800
好

01:05:25.800 --> 01:05:27.960
然后接下来分块完成后

01:05:29.000 --> 01:05:29.720
进入到什么呢

01:05:29.720 --> 01:05:30.920
进入到汇制前的

01:05:31.640 --> 01:05:32.680
最后一个步骤

01:05:32.680 --> 01:05:33.400
汇制前啊

01:05:33.400 --> 01:05:35.000
我说的是汇制前的最后一个步骤

01:05:35.560 --> 01:05:36.200
什么呢

01:05:36.200 --> 01:05:37.160
光三花

01:05:38.200 --> 01:05:38.840
光三花

01:05:39.560 --> 01:05:41.080
这一步骑士就是什么呢

01:05:41.080 --> 01:05:43.560
这一步骑士就是把每一块

01:05:44.520 --> 01:05:45.800
最终变成什么呢

01:05:45.800 --> 01:05:47.480
变成为图信息

01:05:48.040 --> 01:05:49.400
比方我这边有这么多块

01:05:50.520 --> 01:05:51.320
对吧

01:05:51.320 --> 01:05:52.760
每个块每个块

01:05:52.760 --> 01:05:54.680
然后精确到向述点

01:05:55.320 --> 01:05:56.760
每一个向述点

01:05:56.760 --> 01:05:59.160
它的颜色究竟是什么颜色

01:05:59.960 --> 01:06:00.520
OK

01:06:00.520 --> 01:06:01.720
你实际上你看一下

01:06:01.720 --> 01:06:03.240
虽然你这边你看了这个网页

01:06:04.200 --> 01:06:05.160
你看了这个网页

01:06:05.160 --> 01:06:07.240
感觉哇这个网页东西好多了

01:06:07.240 --> 01:06:08.440
但实际上就是什么

01:06:08.440 --> 01:06:10.200
是不是就是一个一个的这个向述点

01:06:10.200 --> 01:06:11.960
每个向述点是什么颜色

01:06:11.960 --> 01:06:13.480
所以最终构建出了

01:06:14.680 --> 01:06:15.320
这个页面

01:06:17.080 --> 01:06:17.720
对不对

01:06:17.720 --> 01:06:19.000
每个向述点

01:06:19.880 --> 01:06:21.400
每个向述点它究竟是什么

01:06:21.400 --> 01:06:22.440
这个颜色

01:06:23.400 --> 01:06:23.720
OK

01:06:24.520 --> 01:06:26.120
所以这边光三花这一步的话

01:06:26.120 --> 01:06:27.960
其实就是把每一个块

01:06:27.960 --> 01:06:28.840
最终变成

01:06:29.400 --> 01:06:30.040
一个位图

01:06:30.840 --> 01:06:32.920
然后记录每一个向述点

01:06:32.920 --> 01:06:35.400
它的RGB的这个信息

01:06:36.280 --> 01:06:36.600
OK

01:06:37.560 --> 01:06:37.880
好

01:06:37.880 --> 01:06:39.400
然后接下来你需要注意

01:06:39.400 --> 01:06:41.640
就是光三花这个操作

01:06:41.640 --> 01:06:42.920
它不是有什么呢

01:06:42.920 --> 01:06:45.000
不是由合成线程来做的

01:06:46.280 --> 01:06:46.920
OK

01:06:46.920 --> 01:06:48.360
它是由谁呢

01:06:48.360 --> 01:06:49.720
它是由这个

01:06:49.720 --> 01:06:51.160
它这个合成线程

01:06:51.160 --> 01:06:54.040
它会交给这个GPU进程

01:06:55.240 --> 01:06:57.000
主要这里连进程都不一样了

01:06:57.000 --> 01:06:58.520
刚才是不是线程

01:06:59.560 --> 01:06:59.880
对不对

01:06:59.880 --> 01:07:00.760
刚才是线程

01:07:00.760 --> 01:07:02.600
现在的话是另外一个进程了

01:07:03.400 --> 01:07:05.000
GPU进程

01:07:05.560 --> 01:07:06.920
那GPU进程的话

01:07:06.920 --> 01:07:10.920
它就会以极高的速度完成这个光三花

01:07:11.800 --> 01:07:12.040
OK

01:07:13.000 --> 01:07:14.040
GPU进程里面

01:07:14.040 --> 01:07:14.680
它就会什么

01:07:14.680 --> 01:07:15.880
它就会开启多个线程

01:07:16.840 --> 01:07:18.520
GPU做事情是很快的

01:07:19.400 --> 01:07:20.200
非常非常快

01:07:21.000 --> 01:07:21.640
那有同学说

01:07:21.640 --> 01:07:23.960
那为什么我这个GPU做事情那么快

01:07:23.960 --> 01:07:25.560
让我就干脆全部交给GPU边

01:07:26.120 --> 01:07:26.680
对不对

01:07:26.680 --> 01:07:27.800
它快的话

01:07:27.800 --> 01:07:28.760
它是指的是什么呢

01:07:28.760 --> 01:07:31.720
就是我做这个同一件事情

01:07:32.360 --> 01:07:32.760
很快

01:07:33.000 --> 01:07:34.600
GPU它就只负责什么

01:07:34.600 --> 01:07:36.360
只负责这个光三花

01:07:36.360 --> 01:07:38.040
那它动作当然快了

01:07:38.040 --> 01:07:38.520
对不对

01:07:38.520 --> 01:07:39.160
我们刚才的话

01:07:39.160 --> 01:07:40.680
我们那个渲染组

01:07:40.680 --> 01:07:42.680
线程是不是要做的事情非常非常多

01:07:43.320 --> 01:07:43.720
对不对

01:07:43.720 --> 01:07:45.720
你做的事情多自然而然就会慢下来

01:07:46.520 --> 01:07:46.760
OK

01:07:48.120 --> 01:07:48.360
好

01:07:48.360 --> 01:07:49.320
你看这边

01:07:49.320 --> 01:07:50.760
GPU进程

01:07:50.760 --> 01:07:51.960
它会开启什么呢

01:07:51.960 --> 01:07:53.480
开启多个线程

01:07:53.480 --> 01:07:54.600
就好比这里一样

01:07:54.600 --> 01:07:56.040
这个是我的GPU

01:07:56.040 --> 01:07:56.440
对吧

01:07:56.440 --> 01:07:57.080
GPU里面

01:07:57.080 --> 01:07:59.160
然后接下来会有多个线程

01:08:00.040 --> 01:08:02.600
每个线程负责一个块的一个光三花

01:08:02.680 --> 01:08:04.360
光三花是不是就是把每个块

01:08:04.360 --> 01:08:06.280
每个相输点对不对

01:08:06.280 --> 01:08:07.960
把它弄出来

01:08:07.960 --> 01:08:09.880
然后弄出来了之后

01:08:09.880 --> 01:08:11.880
我们先说就是

01:08:11.880 --> 01:08:14.760
在那个就是把每个相输点

01:08:14.760 --> 01:08:15.880
弄出来之后

01:08:15.880 --> 01:08:17.080
就计算出来之后

01:08:17.080 --> 01:08:18.840
然后它这里的话

01:08:18.840 --> 01:08:20.520
会优先处理

01:08:20.520 --> 01:08:23.640
靠近四口区域的这个块

01:08:23.640 --> 01:08:25.960
你看它这边其实都还有优化

01:08:26.920 --> 01:08:27.640
看到没有

01:08:27.640 --> 01:08:29.080
它还有优化

01:08:29.080 --> 01:08:30.600
它会优先干嘛

01:08:30.600 --> 01:08:32.200
优先处理你这个

01:08:32.280 --> 01:08:35.000
靠近四口区域的这个块

01:08:36.040 --> 01:08:36.360
ok

01:08:37.480 --> 01:08:38.360
这是这一步

01:08:39.400 --> 01:08:39.720
好

01:08:39.720 --> 01:08:41.240
然后接下来最终最后一步了

01:08:42.120 --> 01:08:43.400
马上结束了

01:08:43.400 --> 01:08:43.960
最后一步

01:08:44.760 --> 01:08:45.720
最后一步的话

01:08:45.720 --> 01:08:49.400
我们就迎来了真正的这个汇子

01:08:49.400 --> 01:08:50.440
刚才都还没有汇子

01:08:50.440 --> 01:08:52.280
刚才的话只是计算出每一个块

01:08:52.840 --> 01:08:53.720
它的这个

01:08:54.680 --> 01:08:57.080
就是相输点的这个位途信息

01:08:57.080 --> 01:08:58.840
它究竟这个颜色是什么

01:08:58.840 --> 01:08:59.240
对吧

01:08:59.240 --> 01:09:00.840
把每一个块把它计算出来

01:09:01.560 --> 01:09:01.880
好

01:09:01.880 --> 01:09:04.760
然后所有图块都三个化之后

01:09:05.320 --> 01:09:06.920
然后合成线程

01:09:06.920 --> 01:09:08.600
会拿到每个层

01:09:08.600 --> 01:09:10.440
每个块的这个位途

01:09:11.160 --> 01:09:12.040
然后接下来的话

01:09:12.040 --> 01:09:14.200
它会生成这个一个一个的这个

01:09:14.200 --> 01:09:14.920
叫做quad

01:09:16.440 --> 01:09:16.840
quad

01:09:17.480 --> 01:09:19.560
quad的话应该叫做指引

01:09:19.560 --> 01:09:20.760
这单词其实不好翻译

01:09:20.760 --> 01:09:21.720
这个quad的话

01:09:22.280 --> 01:09:23.320
你如果去查的话

01:09:23.320 --> 01:09:23.880
它这个是

01:09:24.840 --> 01:09:26.120
叫做这个四合院

01:09:27.400 --> 01:09:28.360
你可以去查一下

01:09:30.650 --> 01:09:30.970
这边

01:09:31.610 --> 01:09:32.010
quad

01:09:32.410 --> 01:09:34.490
它是这个什么四胞胎之一

01:09:35.210 --> 01:09:36.410
反正就是四分之一

01:09:37.050 --> 01:09:38.810
其实你这个从宏观上

01:09:39.530 --> 01:09:41.050
去这个理解的话

01:09:41.050 --> 01:09:42.250
它其实就是什么呢

01:09:42.250 --> 01:09:42.650
就是

01:09:44.010 --> 01:09:44.730
里面的一块

01:09:45.290 --> 01:09:45.610
对不对

01:09:45.610 --> 01:09:46.730
可能我就是一大块

01:09:46.730 --> 01:09:48.010
然后这边有一大块

01:09:48.730 --> 01:09:49.370
一大块的话

01:09:49.370 --> 01:09:50.730
然后既然这个quad指的是

01:09:50.730 --> 01:09:51.770
可能就是里面的一块

01:09:52.490 --> 01:09:52.730
OK

01:09:54.330 --> 01:09:54.570
好

01:09:54.570 --> 01:09:57.050
它会生成一个一个的这个quad

01:09:57.050 --> 01:09:59.290
我这边把它翻译成叫做指引

01:09:59.290 --> 01:10:00.170
指引信息

01:10:00.170 --> 01:10:02.010
指引你如何进行汇子

01:10:02.650 --> 01:10:03.210
OK

01:10:03.210 --> 01:10:03.690
好

01:10:03.690 --> 01:10:04.410
然后接下来的话

01:10:04.410 --> 01:10:05.290
它会交给什么呢

01:10:05.290 --> 01:10:06.330
交给GPU

01:10:07.290 --> 01:10:08.410
重新交给GPU

01:10:08.410 --> 01:10:09.210
GPU

01:10:09.210 --> 01:10:12.410
然后接下来进行最终的一个呈现

01:10:13.770 --> 01:10:14.010
OK

01:10:14.650 --> 01:10:15.850
进行最终的一个呈现

01:10:16.570 --> 01:10:16.730
好

01:10:16.730 --> 01:10:17.290
我们来看一下

01:10:18.570 --> 01:10:18.810
好

01:10:18.810 --> 01:10:19.850
这边的话

01:10:19.850 --> 01:10:20.570
合成现成

01:10:20.570 --> 01:10:21.850
刚才是不是已经收到了什么

01:10:21.850 --> 01:10:23.610
是不是收到了光圣化的这个结果

01:10:24.250 --> 01:10:24.650
对不对

01:10:24.650 --> 01:10:24.970
好

01:10:24.970 --> 01:10:25.610
然后接下来的话

01:10:25.610 --> 01:10:26.890
把一个一个的这个

01:10:26.890 --> 01:10:28.730
然后既然它生成一个一个的quad

01:10:28.730 --> 01:10:30.730
把这个quad交给GPU

01:10:30.730 --> 01:10:31.770
GPU最终的话

01:10:32.490 --> 01:10:33.690
汇子成型

01:10:35.610 --> 01:10:36.810
那么这个指引

01:10:36.810 --> 01:10:37.530
指引的话

01:10:37.530 --> 01:10:40.010
它会标识出每个位置

01:10:40.010 --> 01:10:42.570
它应该画到屏幕的哪个位置

01:10:43.290 --> 01:10:44.970
包括你的这个旋转呀

01:10:44.970 --> 01:10:45.610
说放呀

01:10:45.610 --> 01:10:46.570
变形的

01:10:46.570 --> 01:10:48.810
它也是在这个指引里面

01:10:48.810 --> 01:10:50.090
会有所体现的

01:10:50.890 --> 01:10:51.610
OK

01:10:51.610 --> 01:10:52.970
说这个变形变形的话

01:10:52.970 --> 01:10:54.570
它实际上是发生在什么呢

01:10:54.570 --> 01:10:56.410
发生在合成现成

01:10:57.130 --> 01:10:59.690
它和这个渲染主现成是无关的

01:10:59.690 --> 01:11:00.970
也就是你看它是在这一步

01:11:02.170 --> 01:11:02.730
对不对

01:11:02.730 --> 01:11:03.690
而并不是在什么呢

01:11:03.690 --> 01:11:04.410
我们就我们上面

01:11:04.410 --> 01:11:05.690
上面之前是不是还有条线

01:11:06.250 --> 01:11:07.130
上面还有条线

01:11:07.130 --> 01:11:09.690
是不是那个渲染主现成

01:11:09.690 --> 01:11:10.250
对不对

01:11:10.250 --> 01:11:12.090
它没有发生在渲染主现成

01:11:12.090 --> 01:11:13.850
而是在合成现成

01:11:14.970 --> 01:11:17.050
所以这个就是Trust Form的效率

01:11:17.050 --> 01:11:19.850
高的一个本质上的原因

01:11:20.650 --> 01:11:20.970
OK

01:11:21.930 --> 01:11:22.810
下面这边

01:11:22.810 --> 01:11:25.370
这边的话也是相同的一个图

01:11:25.930 --> 01:11:26.730
相同的一个图

01:11:26.730 --> 01:11:27.930
就这边合成现成

01:11:29.610 --> 01:11:30.410
合成现成

01:11:30.410 --> 01:11:31.050
合成现成了

01:11:31.050 --> 01:11:33.290
你看这边是不是生成了一堆这个跨的

01:11:34.090 --> 01:11:34.490
对不对

01:11:34.490 --> 01:11:35.930
生成一个一堆跨的之后

01:11:35.930 --> 01:11:36.890
在这个跨的话

01:11:36.890 --> 01:11:38.570
它会形成一个叫做渲染针

01:11:39.690 --> 01:11:40.650
叫做渲染针

01:11:40.650 --> 01:11:42.650
那最终这个渲染针会交给谁

01:11:42.650 --> 01:11:43.930
交给GPU

01:11:45.050 --> 01:11:45.610
对不对

01:11:45.610 --> 01:11:46.330
交给GPU

01:11:46.330 --> 01:11:47.050
GPU的话

01:11:47.050 --> 01:11:48.090
最终把这一针

01:11:48.650 --> 01:11:50.090
把它汇制出来

01:11:51.210 --> 01:11:52.010
把它汇制出来

01:11:53.610 --> 01:11:53.930
OK

01:11:54.730 --> 01:11:55.130
好

01:11:55.130 --> 01:11:59.530
这个就是整个浏览器渲染的流程

01:12:00.410 --> 01:12:02.330
你如果这个面试的时候

01:12:02.330 --> 01:12:03.690
比如说对方让你说一下

01:12:03.690 --> 01:12:05.290
这个浏览器渲染流程

01:12:05.290 --> 01:12:06.650
你能够把这一堆

01:12:07.530 --> 01:12:08.650
把它打出来

01:12:08.650 --> 01:12:10.330
把它这个真的是不得了

01:12:11.290 --> 01:12:14.090
绝对会把这个面试官

01:12:14.090 --> 01:12:15.610
直接把它吓一跳

01:12:15.610 --> 01:12:17.850
因为很多面试官都不知道这么多东西

01:12:18.570 --> 01:12:18.810
OK

01:12:20.250 --> 01:12:20.490
好

01:12:20.490 --> 01:12:21.850
然后我们最后来总结一下

01:12:23.450 --> 01:12:26.330
浏览器从拿到HTML文档

01:12:26.330 --> 01:12:28.730
到最终渲染出液面

01:12:28.730 --> 01:12:30.330
它的一个整体流程

01:12:30.330 --> 01:12:31.450
基本就是这样子的

01:12:31.450 --> 01:12:32.810
首先解析对吧

01:12:32.810 --> 01:12:33.850
那计算样式

01:12:33.850 --> 01:12:35.210
生成布局数

01:12:35.210 --> 01:12:37.210
分成生成汇制指令

01:12:37.770 --> 01:12:38.330
对不对

01:12:38.330 --> 01:12:39.610
生成汇制指令之后

01:12:39.610 --> 01:12:41.130
然后接下来把汇制指令器

01:12:41.130 --> 01:12:42.330
交给合成现成

01:12:42.330 --> 01:12:43.050
合成现成

01:12:43.050 --> 01:12:43.930
然后进行什么

01:12:44.570 --> 01:12:45.130
分块

01:12:45.770 --> 01:12:47.290
然后光伤化

01:12:47.290 --> 01:12:48.410
那最后是什么汇制

01:12:49.690 --> 01:12:50.010
对吧

01:12:50.010 --> 01:12:51.370
但汇制的话是交给谁

01:12:51.370 --> 01:12:52.330
所以交给GPU

01:12:53.530 --> 01:12:54.010
OK

01:12:54.010 --> 01:12:55.210
这个就是整个流程

01:12:55.210 --> 01:12:56.010
所以你这边的话

01:12:56.010 --> 01:12:56.730
你面试的时候

01:12:56.730 --> 01:12:57.850
你如果要简略

01:12:57.850 --> 01:12:58.890
简略的回答

01:12:58.890 --> 01:12:59.850
你这边就

01:13:00.570 --> 01:13:01.850
就是按照这张图

01:13:01.850 --> 01:13:02.970
一步一步讲

01:13:02.970 --> 01:13:03.850
但每一个的话

01:13:03.850 --> 01:13:05.530
然后你如果要展开了说

01:13:05.530 --> 01:13:06.570
那也可以

01:13:06.570 --> 01:13:06.810
对吧

01:13:06.810 --> 01:13:07.610
展开了说

01:13:07.610 --> 01:13:08.010
我跟你说

01:13:08.010 --> 01:13:09.690
样式计算它在做什么

01:13:09.690 --> 01:13:10.410
样式计算

01:13:10.410 --> 01:13:11.450
你把那篇文档看一下

01:13:12.570 --> 01:13:13.530
就我之前说的

01:13:14.170 --> 01:13:14.890
这篇文档

01:13:15.610 --> 01:13:16.730
把这篇文档看一下

01:13:17.290 --> 01:13:17.610
OK

01:13:18.250 --> 01:13:19.050
就你这边的话

01:13:20.330 --> 01:13:21.130
样式计算

01:13:22.250 --> 01:13:22.810
在做什么

01:13:22.810 --> 01:13:23.130
对吧

01:13:23.130 --> 01:13:24.490
内奥生成布局数

01:13:24.490 --> 01:13:26.010
布局数和我们前面的动物数

01:13:26.010 --> 01:13:26.810
有什么样的区别

01:13:27.370 --> 01:13:29.370
分层为什么要进行分层

01:13:29.370 --> 01:13:30.970
那你又可以展开讲

01:13:30.970 --> 01:13:32.650
哪些属性会影响分层

01:13:33.450 --> 01:13:34.010
对不对

01:13:34.010 --> 01:13:36.330
大家在这边生成绘制指令

01:13:36.330 --> 01:13:37.210
你要展开讲

01:13:37.210 --> 01:13:37.770
也可以讲

01:13:38.410 --> 01:13:38.810
对不对

01:13:39.610 --> 01:13:39.850
OK

01:13:40.730 --> 01:13:42.090
这是整个流程

01:13:43.050 --> 01:13:43.770
最后的话

01:13:43.770 --> 01:13:44.490
来我们来看

01:13:45.050 --> 01:13:46.250
就是浏览器

01:13:46.250 --> 01:13:48.330
和这个浏览器渲染流程

01:13:48.970 --> 01:13:51.530
相关的一些常见的面试题

01:13:52.090 --> 01:13:52.330
OK

01:13:52.890 --> 01:13:53.930
首先第一个

01:13:53.930 --> 01:13:55.370
什么叫做reflow

01:13:56.970 --> 01:13:57.770
reflow

01:13:57.770 --> 01:13:58.570
reflow的话

01:13:58.570 --> 01:14:00.570
一般我们称之为叫做回流

01:14:01.130 --> 01:14:02.170
或者叫做重排

01:14:02.890 --> 01:14:03.530
就看翻译

01:14:04.330 --> 01:14:06.330
翻译有的地方翻译成叫做回流

01:14:06.570 --> 01:14:08.010
有的地方叫做重排

01:14:08.730 --> 01:14:10.010
它的本质是什么呢

01:14:10.490 --> 01:14:14.090
本质其实就是重新计算布局数

01:14:15.210 --> 01:14:15.530
为什么

01:14:16.410 --> 01:14:17.930
因为你这个你在修改

01:14:17.930 --> 01:14:19.210
比如什么宽度

01:14:19.210 --> 01:14:20.410
margin left

01:14:20.410 --> 01:14:21.530
这个是不是会涉及到

01:14:21.530 --> 01:14:23.610
你整体布局的改变

01:14:25.370 --> 01:14:25.770
对不对

01:14:26.170 --> 01:14:28.010
会涉及到你整体布局的改变

01:14:28.570 --> 01:14:29.450
说我这边的话

01:14:29.450 --> 01:14:32.650
就会重新计算这个布局数

01:14:34.330 --> 01:14:34.570
OK

01:14:35.290 --> 01:14:36.490
这个其实就是什么呢

01:14:36.490 --> 01:14:37.530
这个就是reflow

01:14:38.330 --> 01:14:39.690
然后浏览器

01:14:39.690 --> 01:14:40.490
它本质上的话

01:14:40.490 --> 01:14:41.370
它会有一些

01:14:42.090 --> 01:14:43.770
叫它为了提升性能

01:14:44.330 --> 01:14:46.250
它会有一些合并操作

01:14:47.530 --> 01:14:48.010
比如说

01:14:48.010 --> 01:14:48.570
举个例子

01:14:49.130 --> 01:14:51.050
比如说我这边针对P

01:14:52.330 --> 01:14:53.130
我这边的话

01:14:53.130 --> 01:14:53.610
比如说

01:14:54.330 --> 01:14:55.770
我在style里面

01:14:57.210 --> 01:14:58.570
在这个script里面

01:14:59.530 --> 01:15:00.730
我选择上这个P

01:15:02.490 --> 01:15:03.130
哇一个

01:15:03.130 --> 01:15:04.570
你们现在已经学了那个了

01:15:04.570 --> 01:15:05.770
学了ES6了

01:15:06.330 --> 01:15:07.210
比如OP

01:15:07.530 --> 01:15:10.250
等于一个document点query selector

01:15:11.530 --> 01:15:14.490
大家这边点test

01:15:16.490 --> 01:15:16.970
对吧

01:15:16.970 --> 01:15:18.650
那这样我这边针对这个OP

01:15:18.650 --> 01:15:22.970
OP点style点这个margin

01:15:24.570 --> 01:15:26.810
这个比如说marginet

01:15:26.810 --> 01:15:28.970
等于一个100相数

01:15:29.610 --> 01:15:30.170
OK

01:15:30.170 --> 01:15:31.530
大家这边紧急任务

01:15:31.530 --> 01:15:32.090
又设置

01:15:32.090 --> 01:15:33.530
它等于150相数

01:15:33.530 --> 01:15:34.810
那这要等于200相数

01:15:35.370 --> 01:15:36.810
那你觉得浏览器会很傻的

01:15:36.810 --> 01:15:37.530
然后接下来

01:15:37.530 --> 01:15:38.730
先把这个改成100

01:15:39.210 --> 01:15:39.850
改成100

01:15:39.850 --> 01:15:40.970
然后将我重新计算

01:15:41.530 --> 01:15:42.890
这个布局数

01:15:42.890 --> 01:15:44.090
大家夸夸夸夸

01:15:44.090 --> 01:15:45.050
进行后面的工作

01:15:45.530 --> 01:15:46.330
进行完了之后

01:15:46.330 --> 01:15:48.170
然后再执行这行代码

01:15:48.170 --> 01:15:49.530
然后计算出来

01:15:49.530 --> 01:15:50.250
是150

01:15:50.250 --> 01:15:51.530
然后重新计算布局数

01:15:51.530 --> 01:15:52.570
然后夸夸夸夸夸夸

01:15:52.730 --> 01:15:54.570
重新执行后面的步骤

01:15:54.570 --> 01:15:55.450
绘子出来

01:15:55.450 --> 01:15:56.650
最后200

01:15:56.650 --> 01:15:57.770
然后计算出来之后

01:15:57.770 --> 01:15:58.730
然后夸夸夸夸

01:15:58.730 --> 01:15:59.610
执行后面

01:15:59.610 --> 01:16:00.330
会这样子吗

01:16:01.130 --> 01:16:01.850
肯定不会

01:16:01.850 --> 01:16:02.330
对吧

01:16:02.330 --> 01:16:03.450
没那么傻

01:16:03.450 --> 01:16:04.010
OK

01:16:04.010 --> 01:16:05.930
就浏览器它会把这些步骤的话

01:16:05.930 --> 01:16:06.810
会把它合并

01:16:07.690 --> 01:16:08.330
合并之后

01:16:08.330 --> 01:16:09.850
然后再进行什么呢

01:16:09.850 --> 01:16:12.090
再进行统一的这个计算

01:16:12.810 --> 01:16:13.370
OK

01:16:13.370 --> 01:16:14.170
所以改动

01:16:14.170 --> 01:16:15.610
这个改动属性

01:16:16.250 --> 01:16:17.690
造成的这个reflow

01:16:18.330 --> 01:16:20.330
它是一步完成的

01:16:21.450 --> 01:16:22.250
一步完成的

01:16:22.810 --> 01:16:23.370
OK

01:16:23.370 --> 01:16:24.330
这边要注意

01:16:26.090 --> 01:16:27.370
但是你注意一下

01:16:27.370 --> 01:16:29.450
就是如果你如果是要获取

01:16:30.090 --> 01:16:31.050
最后你这边

01:16:31.050 --> 01:16:32.250
这边比如说我这边

01:16:33.050 --> 01:16:33.770
margin lift

01:16:33.770 --> 01:16:34.810
margin lift完了之后

01:16:34.810 --> 01:16:35.770
这样我要获取

01:16:37.130 --> 01:16:39.450
获取它的这个最新的

01:16:40.250 --> 01:16:41.210
margin lift

01:16:41.930 --> 01:16:43.130
我获取

01:16:43.130 --> 01:16:43.770
获取的话

01:16:43.770 --> 01:16:44.970
那这里的话

01:16:44.970 --> 01:16:45.770
它就没办法了

01:16:45.770 --> 01:16:46.570
它必须是干嘛

01:16:46.570 --> 01:16:47.850
是不是重新计算出

01:16:47.850 --> 01:16:49.130
就是你最新的margin lift

01:16:49.130 --> 01:16:50.730
才能给你最新的字

01:16:50.730 --> 01:16:51.610
对不对

01:16:51.770 --> 01:16:52.410
所以这边的话

01:16:52.410 --> 01:16:54.730
刘等齐在反复权衡下

01:16:54.730 --> 01:16:55.450
他会干嘛呢

01:16:55.450 --> 01:16:56.730
会立即reflow

01:16:57.370 --> 01:16:58.890
也就是这两步会合并

01:16:58.890 --> 01:17:01.530
就27行和28行会合并

01:17:01.530 --> 01:17:02.410
合并完了之后

01:17:02.410 --> 01:17:03.210
然后既然它

01:17:03.210 --> 01:17:04.410
因为你这个29行

01:17:04.410 --> 01:17:05.290
你再读取

01:17:05.290 --> 01:17:07.050
读取了它就会立即reflow

01:17:07.610 --> 01:17:08.250
reflow之后

01:17:08.250 --> 01:17:10.010
大家也告诉你最新的字

01:17:10.010 --> 01:17:10.570
OK

01:17:10.570 --> 01:17:11.290
然后接着这边

01:17:11.290 --> 01:17:12.170
再来重新设置

01:17:13.370 --> 01:17:13.850
你注意

01:17:15.850 --> 01:17:16.170
好

01:17:16.170 --> 01:17:17.050
然后接下一个

01:17:17.930 --> 01:17:19.050
什么是repeat

01:17:20.090 --> 01:17:21.050
repeat的话

01:17:21.050 --> 01:17:22.010
实际上就是什么呢

01:17:22.010 --> 01:17:23.050
因为你没有涉及到

01:17:23.050 --> 01:17:24.090
布局上面的改变

01:17:25.290 --> 01:17:25.690
对吧

01:17:25.690 --> 01:17:26.330
没有涉及到

01:17:26.330 --> 01:17:27.610
布局上面的改变

01:17:27.610 --> 01:17:28.490
那这边的话

01:17:28.490 --> 01:17:29.210
你改变了什么

01:17:29.210 --> 01:17:30.810
比如counter之类的

01:17:30.810 --> 01:17:31.610
那它这里的话

01:17:31.610 --> 01:17:32.970
实际上改动的是什么呢

01:17:32.970 --> 01:17:34.010
改动的是这一步

01:17:34.890 --> 01:17:37.930
就是重新生成新的会字指令

01:17:39.530 --> 01:17:42.890
那它相比于这个reflow的话

01:17:42.890 --> 01:17:44.250
它是不是就要靠后一些

01:17:45.770 --> 01:17:46.490
对不对

01:17:46.490 --> 01:17:47.450
它就要靠后一些

01:17:48.570 --> 01:17:49.850
那有一点你要注意

01:17:49.850 --> 01:17:51.210
就是你如果reflow了

01:17:52.170 --> 01:17:53.370
你这边reflow了

01:17:53.370 --> 01:17:55.370
它一定会重新什么

01:17:55.370 --> 01:17:56.170
repeat

01:17:56.970 --> 01:17:58.650
但是你repeat不见得会

01:17:59.370 --> 01:18:00.490
不是不见得就不会

01:18:00.490 --> 01:18:00.890
对吧

01:18:00.890 --> 01:18:02.730
你repeat是不是都已经在这一步了

01:18:02.730 --> 01:18:05.530
所以repeat它不会reflow

01:18:05.530 --> 01:18:06.410
但你reflow

01:18:06.410 --> 01:18:07.930
reflow是发生在这一步

01:18:07.930 --> 01:18:08.250
对吧

01:18:08.250 --> 01:18:10.090
重新计算这个布局数

01:18:10.090 --> 01:18:10.970
你reflow

01:18:10.970 --> 01:18:13.370
它一定会引起repeat

01:18:14.010 --> 01:18:16.250
就重新生成会字指令

01:18:16.250 --> 01:18:17.530
但是你如果是repeat

01:18:18.490 --> 01:18:21.530
它是重新生成这个会字指令

01:18:22.250 --> 01:18:22.730
对吧

01:18:22.730 --> 01:18:23.610
它不会涉及到

01:18:23.610 --> 01:18:25.450
就是前面的这个更改

01:18:25.450 --> 01:18:26.650
什么分成啊

01:18:26.650 --> 01:18:27.610
布局数啊这些

01:18:28.330 --> 01:18:28.810
ok

01:18:28.810 --> 01:18:30.650
所以它不会这个reflow

01:18:31.290 --> 01:18:32.570
这一点要注意

01:18:32.570 --> 01:18:33.770
所以repeat和reflow

01:18:33.770 --> 01:18:34.410
哪个效率高

01:18:34.410 --> 01:18:36.490
肯定repeat的效率要高一些吗

01:18:36.490 --> 01:18:37.370
它比较靠后嘛

01:18:38.410 --> 01:18:38.730
对吧

01:18:40.410 --> 01:18:41.370
那第三个

01:18:42.170 --> 01:18:44.490
为什么transform效率高

01:18:45.450 --> 01:18:46.330
啊

01:18:46.330 --> 01:18:47.210
那以前的话

01:18:47.210 --> 01:18:48.730
一般的回答就是什么

01:18:48.730 --> 01:18:50.890
因为这个transform

01:18:50.890 --> 01:18:51.930
它不涉及什么

01:18:51.930 --> 01:18:53.770
不涉及那个reflow

01:18:54.730 --> 01:18:55.690
不会涉及到这个

01:18:56.890 --> 01:18:57.290
重排

01:18:58.090 --> 01:18:58.730
对吧

01:18:58.730 --> 01:18:59.610
到现在的话

01:18:59.610 --> 01:19:00.890
你学了这个浏览器

01:19:00.890 --> 01:19:02.490
整个渲染流程之后

01:19:03.290 --> 01:19:04.090
那你这边

01:19:04.090 --> 01:19:06.010
你回答出来的东西就不一样了

01:19:06.010 --> 01:19:07.130
你会告诉他

01:19:07.130 --> 01:19:09.290
transform它是在哪个阶段

01:19:09.290 --> 01:19:11.610
它是在合成线程中

01:19:12.170 --> 01:19:13.930
它只要把这个合成线程

01:19:14.810 --> 01:19:15.850
把它达出来

01:19:15.850 --> 01:19:17.770
就已经把这个面试关下走了

01:19:18.650 --> 01:19:19.290
对吧

01:19:19.290 --> 01:19:20.970
它是在合成线程中

01:19:20.970 --> 01:19:22.570
它影不影响主线程

01:19:23.050 --> 01:19:24.970
它不会去影响主线程

01:19:25.770 --> 01:19:26.090
ok

01:19:26.810 --> 01:19:27.930
那既然你主线程的话

01:19:27.930 --> 01:19:29.530
你无论如何忙碌

01:19:29.530 --> 01:19:32.010
也不会影响这个transform的这个变化

01:19:33.130 --> 01:19:33.450
ok

01:19:34.170 --> 01:19:34.410
好

01:19:36.890 --> 01:19:38.490
我们这边可以看个例子

01:19:38.490 --> 01:19:39.850
我这边有个例子

01:19:39.850 --> 01:19:42.010
这例子我不知道同学们看过没有

01:19:42.890 --> 01:19:43.450
啊这边

01:19:44.170 --> 01:19:45.050
这边你看一下

01:19:45.130 --> 01:19:46.410
我这边的话有两个小球

01:19:47.290 --> 01:19:48.010
有两个小球

01:19:48.010 --> 01:19:48.890
两个小球的话

01:19:48.890 --> 01:19:51.450
这样我分别给他们写了一段动画

01:19:51.450 --> 01:19:53.370
一个是通过transform

01:19:54.170 --> 01:19:55.130
通过transform

01:19:55.130 --> 01:19:56.970
这边让它不停的移动

01:19:56.970 --> 01:19:58.250
一个就是通过什么呢

01:19:58.250 --> 01:19:58.970
通过这个

01:19:59.450 --> 01:19:59.770
net

01:20:00.810 --> 01:20:03.610
通过这个就是修改它的left字

01:20:03.610 --> 01:20:04.650
不是net lift

01:20:05.450 --> 01:20:07.290
不停的修改它的这个left字

01:20:07.850 --> 01:20:08.890
来实现这个动画

01:20:09.690 --> 01:20:11.450
那这边的话你看这个效果

01:20:12.410 --> 01:20:13.050
效果的话

01:20:13.050 --> 01:20:14.330
看上去是不是一样的

01:20:14.330 --> 01:20:14.810
同学们

01:20:15.530 --> 01:20:15.770
对不对

01:20:16.490 --> 01:20:17.610
效果是一样的

01:20:17.610 --> 01:20:20.730
但是你学了这个浏览器渲染流程之后

01:20:21.370 --> 01:20:23.130
那你现在的话你就应该知道

01:20:23.130 --> 01:20:24.730
虽然效果是一样

01:20:25.530 --> 01:20:26.650
但是最终的话

01:20:26.650 --> 01:20:28.330
他们的这个步骤

01:20:28.970 --> 01:20:31.050
在整个这个渲染流程里面的步骤

01:20:31.930 --> 01:20:34.890
它是不是这个在的这个所在的这个阶段

01:20:35.770 --> 01:20:36.410
是不同的

01:20:37.370 --> 01:20:38.170
对不对

01:20:38.170 --> 01:20:39.290
阶段是不同的

01:20:39.290 --> 01:20:39.930
ok

01:20:39.930 --> 01:20:40.170
好

01:20:40.170 --> 01:20:41.850
然后接下来我这边我做一件事情

01:20:41.850 --> 01:20:42.730
我这边有个按钮

01:20:43.690 --> 01:20:45.370
按钮写的是一个使循环

01:20:46.570 --> 01:20:47.770
这里看到没有

01:20:47.770 --> 01:20:49.370
这里有一个使循环

01:20:49.370 --> 01:20:51.850
这边是延迟五秒钟

01:20:51.850 --> 01:20:52.090
好

01:20:52.090 --> 01:20:53.130
当我点击之后

01:20:54.890 --> 01:20:55.850
你会发现

01:20:55.850 --> 01:20:57.210
下面的小球不动了

01:20:58.650 --> 01:20:59.450
只有什么呢

01:20:59.450 --> 01:21:01.130
只有这个上面的小球在动

01:21:01.130 --> 01:21:02.090
你再看一遍

01:21:02.090 --> 01:21:02.490
点击

01:21:03.610 --> 01:21:05.450
下面的小球没办法动了

01:21:06.090 --> 01:21:06.890
对不对

01:21:06.890 --> 01:21:08.410
上面的小球但是不影响

01:21:09.290 --> 01:21:11.210
上面的小球是不影响的

01:21:11.210 --> 01:21:12.170
为什么

01:21:12.250 --> 01:21:14.650
你现在学了这个整个渲染流程之后

01:21:15.210 --> 01:21:16.250
你就能够知道

01:21:16.250 --> 01:21:16.890
为什么

01:21:16.890 --> 01:21:18.890
因为你通过这个trice form

01:21:18.890 --> 01:21:20.490
trice form是在哪里

01:21:20.490 --> 01:21:23.530
trice form是不是发生在合成现成

01:21:24.650 --> 01:21:25.450
对不对

01:21:25.450 --> 01:21:26.730
你合成现成的话

01:21:26.730 --> 01:21:29.130
让我这边我这个渲染阻现成

01:21:29.130 --> 01:21:30.090
哪怕被阻射了

01:21:30.090 --> 01:21:31.610
因为我们刚才那段接时代

01:21:31.610 --> 01:21:33.290
其实就是为了阻射谁呢

01:21:33.290 --> 01:21:34.890
阻射这个渲染阻现成

01:21:35.770 --> 01:21:36.250
对不对

01:21:36.250 --> 01:21:37.290
为了阻射他

01:21:37.290 --> 01:21:37.930
ok

01:21:37.930 --> 01:21:41.050
你阻射阻射你的管我这个合成现成什么事

01:21:41.610 --> 01:21:42.970
我合成现成我

01:21:42.970 --> 01:21:44.170
不受影响

01:21:45.130 --> 01:21:45.450
哎

01:21:45.450 --> 01:21:46.330
我不受影响

01:21:47.050 --> 01:21:47.850
看到没有

01:21:47.850 --> 01:21:49.370
但是我们的那个left

01:21:49.370 --> 01:21:50.410
left就不一样了

01:21:50.410 --> 01:21:51.210
left的话

01:21:51.210 --> 01:21:52.330
这边他会干嘛

01:21:52.330 --> 01:21:53.610
是重新reflow

01:21:55.050 --> 01:21:55.610
对吧

01:21:55.610 --> 01:21:56.490
重新reflow

01:21:56.490 --> 01:21:57.770
然后一步一步往后面走

01:21:57.770 --> 01:21:58.410
那接下来的话

01:21:58.410 --> 01:21:59.370
你有一段什么

01:21:59.370 --> 01:22:00.570
是不是有一段接事

01:22:01.450 --> 01:22:02.250
那接事的话

01:22:02.250 --> 01:22:03.130
是不是就是把这个

01:22:03.610 --> 01:22:05.050
就是这个阻现成

01:22:05.050 --> 01:22:06.250
他要做的这些事

01:22:06.250 --> 01:22:07.530
是不是就给他阻断了

01:22:07.530 --> 01:22:08.410
是不是阻射了

01:22:09.210 --> 01:22:09.770
看到没有

01:22:09.930 --> 01:22:11.450
也区别就出来了

01:22:11.450 --> 01:22:14.330
那你以前你没有学过这个渲染流程的话

01:22:14.330 --> 01:22:15.850
你可能你这段代码

01:22:15.850 --> 01:22:16.810
啊为什么这个就

01:22:17.690 --> 01:22:19.130
啊上面有效下面没效

01:22:19.130 --> 01:22:20.250
你可能不知道

01:22:20.250 --> 01:22:21.530
但是一旦你学了这个

01:22:22.250 --> 01:22:24.010
瀏染期渲染流程之后

01:22:24.010 --> 01:22:25.850
哎你就知道为什么了

01:22:26.890 --> 01:22:27.290
对不对

01:22:28.090 --> 01:22:28.410
ok

01:22:29.130 --> 01:22:33.690
啊这个就是关于整个瀏染期的渲染流程啊

01:22:33.690 --> 01:22:35.050
内容的话比较多

01:22:35.610 --> 01:22:36.250
ok

01:22:36.250 --> 01:22:37.770
讲了差不多一个半小时

01:22:38.330 --> 01:22:39.450
好大家下来的话

01:22:40.250 --> 01:22:41.770
其实整个瀏染期这一张截

01:22:41.770 --> 01:22:42.890
我开头也说了

01:22:42.890 --> 01:22:44.170
你能够把这一块

01:22:44.570 --> 01:22:45.290
把它掌握

01:22:45.770 --> 01:22:47.290
其实就已经非常不错了

01:22:48.170 --> 01:22:49.450
那当然这个瀏染期

01:22:49.450 --> 01:22:50.650
这一张截啊

01:22:50.650 --> 01:22:51.690
后面还有很多

01:22:53.050 --> 01:22:54.090
后面还有很多的话

01:22:54.090 --> 01:22:56.090
你就看你自己的时间

01:22:57.130 --> 01:22:57.530
好吧

01:22:58.410 --> 01:22:59.530
你就看你自己的时间啊

01:22:59.530 --> 01:23:01.450
我后面还录了这么多节隔啊

01:23:01.450 --> 01:23:02.250
还录了这么多节隔

01:23:02.250 --> 01:23:02.890
但后面的话

01:23:02.890 --> 01:23:03.850
其实就是你看

01:23:03.850 --> 01:23:05.530
你能够把这个渲染流程

01:23:06.410 --> 01:23:07.610
能够把它掌握好

01:23:08.170 --> 01:23:09.370
就已经非常不错了

01:23:09.930 --> 01:23:10.570
ok

01:23:10.570 --> 01:23:12.250
后面的话你就看时间嘛

01:23:12.250 --> 01:23:13.290
时间允许的话

01:23:13.290 --> 01:23:15.210
你后面的话你就继续往后面看吧

01:23:15.850 --> 01:23:16.170
ok

01:23:16.970 --> 01:23:19.050
好这期课就到这里啊

01:23:19.050 --> 01:23:19.850
大家再见

