WEBVTT

00:00.430 --> 00:02.470
大家好 我是谢老师

00:02.730 --> 00:06.310
在上一节课的话 我们介绍了整个浏览器

00:06.570 --> 00:08.110
它的一个渲染流程

00:10.410 --> 00:12.210
其中的话 我们有说到

00:12.470 --> 00:14.250
如果这个浏览器

00:14.510 --> 00:17.830
如果它解析的过程中 遇到这个GS代码

00:18.090 --> 00:21.930
那么这个GS代码的话 它是会干嘛呢 它是会阻涉

00:22.450 --> 00:23.730
这个页面的渲染的

00:24.230 --> 00:25.010
对不对

00:25.270 --> 00:30.130
所以说我们这一节课的话 我们就来看一些什么呢 我们来看一些这个支援提示

00:30.610 --> 00:31.410
关键词

00:31.930 --> 00:36.530
通过这些支援提示关键词的话 它就可以干嘛呢 它就可以解决

00:36.790 --> 00:39.090
这个支援组设的一个问题

00:39.610 --> 00:40.110
ok

00:40.370 --> 00:42.670
那这些课的话 主要包含这么一些内容

00:42.930 --> 00:45.750
首先的话就是 我们把那个渲染组设

00:46.250 --> 00:47.790
就整个渲染流程啊

00:48.050 --> 00:49.330
我们把它再回顾一下

00:49.850 --> 00:53.430
再把它回顾一下 因为这个的话是一个非常重要的一个知识

00:53.930 --> 00:55.730
这个的话一定要搞懂

00:55.930 --> 00:58.250
那其次的话就是什么呢 其次就是一些

00:58.510 --> 01:01.570
支援提示关键词 其实挺多的

01:01.830 --> 01:03.610
对不对 有differ or sync

01:03.870 --> 01:05.410
preload pre-fetch

01:05.670 --> 01:07.710
pre-render pre-connect

01:07.970 --> 01:09.250
好几个这个

01:09.510 --> 01:12.830
支援提示关键词 我们每一个的话 我们把它看一下

01:13.350 --> 01:13.850
好吧

01:14.110 --> 01:15.130
好 那我们一个一个来

01:15.390 --> 01:18.710
那首先的话是关于这个渲染组设的这个回顾

01:19.230 --> 01:21.790
好 我们在前面的话 我们在讲这个浏览器

01:22.050 --> 01:23.590
渲染流程的时候 我们说过

01:23.850 --> 01:25.630
首先的话 它拿到的是什么呢

01:25.730 --> 01:27.270
拿到的是这个字节数据

01:28.290 --> 01:31.870
对不对 拿到字节数据之后 然后接下来转为制服串

01:32.130 --> 01:34.430
然后接下来的话 再通过这个

01:34.690 --> 01:35.470
token

01:35.970 --> 01:36.990
tokenization

01:37.250 --> 01:39.050
把它进行一个这个token化

01:39.290 --> 01:39.810
对不对

01:40.070 --> 01:41.350
把它拆成这个

01:41.850 --> 01:45.430
就标记化 标记化成一个制服串的这个标记

01:45.690 --> 01:48.770
然后最后形成什么呢 最后形成这个动物数

01:49.530 --> 01:51.850
对不对 这是关于这个HTML

01:52.610 --> 01:54.410
它的一个解析的这个流程

01:55.390 --> 01:55.890
好

01:56.410 --> 02:00.250
构建出来的这个动物对象 实际上有两个作用

02:00.510 --> 02:01.530
哪两个作用呢

02:01.790 --> 02:04.850
首先的话就是形成我们常说的这个动物数

02:05.370 --> 02:06.130
这是第一个

02:06.390 --> 02:07.930
第二个就是什么呢 第二个就是

02:08.190 --> 02:10.230
作为外界的接口

02:10.490 --> 02:12.030
供外界使用

02:12.790 --> 02:14.070
比如说什么呢 比如说

02:14.590 --> 02:16.130
提供给谁呢 提供给JS

02:16.630 --> 02:18.170
你要注意JS

02:18.430 --> 02:20.990
我们知道JS的话 它是不是可以修改动物

02:21.250 --> 02:24.310
对不对 它修改动物的话 这个修改动物它并不是

02:24.410 --> 02:25.690
说是JS的功能

02:26.450 --> 02:27.990
和JS没有任何的关系

02:28.510 --> 02:31.830
JS只是什么呢 只是调用的接口

02:32.610 --> 02:33.630
它只是调用的接口

02:33.890 --> 02:37.470
谁给它提供的接口 浏览器这边给它提供的接口

02:38.230 --> 02:41.050
浏览器在构建好这个动物对象之后

02:41.310 --> 02:43.110
然后接下来它对外界

02:43.610 --> 02:44.630
提供了接口

02:45.150 --> 02:50.010
所以说JS的话只是拿到这些接口 然后调用了这些接口而已

02:50.270 --> 02:52.310
说千万不要弄混了

02:53.030 --> 02:54.830
没了吧 千万不要弄混了

02:55.090 --> 02:59.170
JS能够修改动物 可以操作动物 这不是JS的功能

02:59.690 --> 03:01.230
JS只是调用了这个

03:01.990 --> 03:03.530
调用了这个接口而已

03:04.810 --> 03:10.690
好 然后接下来的话 CSS样式也会被映射为CSS OEM

03:10.950 --> 03:12.750
这个我们是不是在上一节可以说了的

03:13.250 --> 03:15.550
对不对 就是那个样式规则数

03:15.810 --> 03:20.430
它和这个动物很相似 但是针对的是CSS而不是HTML

03:20.690 --> 03:21.970
大致的话也是这样子的

03:22.310 --> 03:26.410
一个CSS文件通过这个解析 然后最后形成一个什么呢

03:26.670 --> 03:28.450
形成一个CSS OEM

03:28.970 --> 03:31.270
就是CSS的样式的这个样式数

03:34.060 --> 03:35.840
好 然后接下来的话下面

03:36.880 --> 03:39.680
当浏览器正在构建动物的时候

03:39.940 --> 03:44.300
如果它遇到什么呢 如果它遇到这个script标记

03:44.560 --> 03:46.600
它必须立即停止

03:47.120 --> 03:53.520
如果这个脚本如果是外部的 它还必须干嘛呢 必须先下载这个脚本

03:53.820 --> 03:55.100
这个我们在上一节课

03:55.360 --> 03:59.440
在上一节课讲这个渲染流程的时候是不是也提到过

03:59.960 --> 04:04.020
对不对 它大致的话就是这个样子的 比如这边是HTML 这边是JS

04:04.280 --> 04:07.600
它现在在开始构建构建构建 这是个瀑布图

04:07.860 --> 04:09.140
要学会看这个瀑布图

04:09.400 --> 04:12.200
好 这边开始构建构建构建构建动物

04:12.720 --> 04:15.020
好 遇到什么呢 遇到JS标签了

04:15.540 --> 04:18.860
并且JS标签是什么呢 是一个外部

04:19.620 --> 04:22.180
JS 那它干嘛呢 它这边的话就需要

04:22.380 --> 04:26.480
你看这边废弃JS 就干嘛呀 是不是去下载这个JS

04:26.740 --> 04:29.040
对不对 去请求这个JS文件下载

04:29.300 --> 04:32.120
它下载的图中这边是block的

04:32.880 --> 04:36.480
它是被主售了的 就是HTML的解析是被主售了的

04:37.240 --> 04:44.400
然后接下来嘛 拿到这个JS 拿到之后然后executeJS 干嘛呢 执行JS代码

04:45.160 --> 04:47.480
看到没有 整个这个过程

04:47.740 --> 04:52.080
整个这个过程就是从你下载JS到执行这个JS

04:52.340 --> 04:58.080
我们的这个HTML 构建动物的这个过程都是被干嘛了的 都是被主售了的

04:58.960 --> 05:01.600
看到没有block的 都是被主售了的

05:02.120 --> 05:06.720
直到什么呢 直到你的JS代码执行完毕 然后接下来接着

05:07.240 --> 05:08.760
开始构建你的动物

05:09.800 --> 05:14.160
看到没有啊 所以为什么说这个JS 它会这个主售

05:14.760 --> 05:16.080
这个页面的渲染

05:17.240 --> 05:20.360
好 那为什么这个解析必须要停止呢

05:20.820 --> 05:29.420
原因很简单 因为我们的javascript的脚本可以改变HTML 以及根据HTML 生成了这个动物数的这个结构

05:30.060 --> 05:32.860
对不对 比如我们这个javascript我们说了

05:33.380 --> 05:39.060
就是你的这个浏览器给它提供了很多这个接口 那我们JS的话就可以调用这些接口

05:39.580 --> 05:44.180
对不对 调用这些接口我就可以针对你的这个动物节点 进行一个操作

05:45.180 --> 05:49.060
那真行一个操作 那无外乎就是什么呢 增三改查

05:50.040 --> 05:54.080
对不对 那我可以增加一个节点 可以删除一个节点 可以修改一个节点

05:54.720 --> 06:03.080
对不对 说我们这边的话 脚本可以通过啊 比如说哈 这边取了个例子 比如说可以使用document.createElement

06:03.760 --> 06:05.040
来增加节点

06:05.880 --> 06:09.160
对不对 那你这个增加节点的话 那你的这个动物结构

06:09.840 --> 06:14.440
是不是也就改了 对不对 所以你这边的话 你如果这边继续啊 如果这一块

06:14.860 --> 06:17.900
这一块你继续了个building DOM 你没有任何意义

06:18.500 --> 06:23.140
你这边在building 然后接下来这边执行了这个JS之后啊 发现这个动物结构

06:23.540 --> 06:29.100
发生改变了 那你这边building的是吧 没有任何意义 对不对 说说这边的话 会暂停

06:29.740 --> 06:35.100
啊 会暂停 等你的JS执行完毕之后 然后再继续开始

06:35.660 --> 06:36.380
building DOM

06:37.300 --> 06:37.660
看到没有

06:38.640 --> 06:45.560
啊 这也是为什么我们建议将script的标签写在body元素 结束标签前面的原因

06:46.320 --> 06:48.080
啊 大家刚开始学习这个

06:48.880 --> 06:55.560
呃html的时候啊 刚开始学习这个动物变成的时候啊 老师就开始跟你讲这个script

06:56.160 --> 06:58.560
写在哪里啊 是不是写在这个body

06:59.200 --> 07:05.240
标签结束之前 对不对 然后接下来你的这个html代码写在这个位置

07:06.220 --> 07:10.020
对不对 然后最后写什么呢 最后写你的这个script

07:11.100 --> 07:15.180
为什么 原因就是这个啊 原因就是这个 因为你的这个

07:16.020 --> 07:19.060
JS会主色我们页面的这个构建

07:20.020 --> 07:24.460
明白吧 ok 好 然后接下来的话 我们回头来看一下css

07:25.100 --> 07:32.700
那css它会不会主色这个渲染的啊 看上去这个JS它会阻止这个解析啊 因为它可以修改文档

07:33.000 --> 07:35.320
这个好理解对不对 那css

07:36.280 --> 07:38.680
css又不能修改文档 那它

07:39.480 --> 07:44.960
它应该就不会阻止解析了 对不对 看样子是这个样子的 但是你这边你注意啊

07:45.720 --> 07:52.200
但是如果脚本中需要获取一些尚未解析的样式信息怎么办

07:53.080 --> 07:58.200
我们知道在那个js里面 js里面是不是可以获取某一个多目节点的这个样式

07:58.980 --> 08:03.380
对不对 获取这个样式之后 然后接下来的话我可以干嘛呢 可以修改这个样式

08:03.940 --> 08:08.340
啊 或者我这边的话 我这边直接使用这个javascript去访问

08:08.980 --> 08:11.620
那个css那个样式规则数

08:12.580 --> 08:12.980
看到没有

08:14.500 --> 08:20.700
也就是说我们这边你看这边 html 通过这个解析对吧 是不是构建出来的是动物

08:21.340 --> 08:22.140
css

08:22.800 --> 08:32.360
通过这个css解析构建出来的是不是css 样式规则数 对不对 那我们这个js的话是两个都可以去访问的

08:32.960 --> 08:39.880
对不对 无论是你的多目数 还是你的css om数 我都可以去访问啊

08:40.440 --> 08:46.320
因此css可能会根据文档中外部样式表和脚本的顺序

08:46.760 --> 08:47.720
阻止解析

08:48.720 --> 08:49.040
看到没有

08:49.540 --> 08:59.860
什么意思 也就是说比如说你一段那个javascript 里面啊 你在那个js代码里面 你涉及到了什么呢 涉及到了访问和使用

09:00.340 --> 09:10.020
这个样式对不对 访问和使用这个css om 那他就必须干嘛呢 必须等待这个css文件啊 下载解析

09:10.260 --> 09:17.540
并且生成了一个css om 也就是说这个数已经生成了 生成了让我这个js 是不是才能去访问

09:18.120 --> 09:23.400
对不对 那你如果这个css就这个数啊 这个数还没有生成

09:24.120 --> 09:28.200
那他就会主设什么呢 他就会主设javascript的执行

09:29.320 --> 09:36.080
明白吧 他就会主设javascript的执行 所以说他不是说完全没有影响 他还是有那么一点影响的

09:36.760 --> 09:41.240
看到没有 比如你看这张图 这张图就非常明显啊 我这边的话比如说

09:42.220 --> 09:48.860
呃 这边是在构建html 对吧 构建html 然后加这边的话在废起css 然后接下来这边是build

09:49.380 --> 09:55.220
css om 也就是说构建这个css样式规则数 是不是到这一步 是不是到这

09:55.980 --> 10:01.060
是不是在构建好 构建好之后 然后接下来的话 我这边的话 我这个首先

10:01.700 --> 10:08.740
获取到这个js 获取到js 我这个js里面我涉及到干嘛呢 我涉及到去访问这个css om

10:09.320 --> 10:15.800
就访问这个样式规则数 但是你样式规则数 到这个点的时候 到这个线的时候 他有没有构建好

10:16.560 --> 10:17.760
他是不是还没有构建好

10:18.520 --> 10:25.520
对不对 还没有构建好 那我干嘛呢 他相当于就把那个js 的执行给主设了 那我js了就只能干嘛呢

10:25.800 --> 10:31.160
啊 这边在这等着 等着你这棵树 这个这棵树构建好了之后再执行

10:32.120 --> 10:37.640
看到没有 再执行 然后执行完了之后 然后接下来 接着干嘛呢 接着构建你的

10:38.040 --> 10:38.280
多么

10:39.240 --> 10:43.760
看到没有啊 啊 说说 css 啊 虽然他这边

10:45.400 --> 10:52.840
虽然的话 他这个不会主设多么的构建 但是他会主设什么呢 主设这个javascript的执行

10:54.000 --> 10:55.040
没有没有啊

10:55.960 --> 11:01.240
好 然后另外虽然这个css 不会主设多么的构建啊 他也会主设渲染

11:01.760 --> 11:06.160
为什么呢 因为我们前面说过 就是我们这个要生成渲染数

11:06.900 --> 11:12.940
渲染数的条件是什么 渲染数的条件是多么数和这个css om数 是不是都要准备好

11:13.500 --> 11:15.420
两棵树都准备好之后

11:16.180 --> 11:24.460
也就是说你这边这棵树和这棵树都准这个准备好之后 是不是才会去生成你的这个渲染数啊

11:25.500 --> 11:27.220
对不对 才会生成这个渲染数

11:28.780 --> 11:35.860
如果你两棵树的话 有一棵树啊 没有准备好 那最终的话他这边的话就是这个渲染数 他是没办法生成的

11:36.380 --> 11:42.500
啊 然后浏览器在拥有这个多么和css om之前是不会显示任何内容的

11:43.220 --> 11:47.060
看到没有啊 说这个css的话 他也是有一定的影响的

11:48.740 --> 11:52.460
啊 然后这边的话是有一个这个早期 早期的这个

11:53.220 --> 11:58.740
我们的这个页面显示的这个例子啊 这种情况呢 大家应该是见过的啊 早期网络不好的时候

11:59.380 --> 12:06.020
那个时候的话就是浏览器给你展示一个什么 展示一个没有css的一个页面 看到没有 这个就是没有css的页面

12:06.380 --> 12:12.140
啊 然后过了一会之后 然后突然这个页面就变好了 啊 这种用户体验其实是非常差的

12:12.540 --> 12:18.660
他有个名称 这个名称叫做这个flash of unstyled content 叫做无样式

12:19.380 --> 12:20.100
内容显现

12:20.980 --> 12:27.100
看到没有 为什么啊 原因很简单 就是因为你这个刚开始的话是没有样式 对吧 没有样式是这样子的

12:27.300 --> 12:35.540
那过一会就有样式了 有样式然后接下来他这个就正常的这个内容就显示出来了 啊 这个叫做无样式内容显现

12:36.000 --> 12:38.440
啊 然后这种体验的话是相当不好的

12:39.560 --> 12:47.960
对不对 相当不好的 给用户一种非常不好的用户体验 啊 说说为了解决这些问题的话 啊 两个问题 两个问题 第一个就是

12:48.400 --> 12:48.920
js

12:49.680 --> 12:51.320
他要去访问这个css

12:52.000 --> 13:01.000
对不对啊 你如果css还没准备好的话 让我这边皆是执行 他会被注射 第二个就是什么呢 你如果css不早点准备好的话是不是会出现这个

13:01.640 --> 13:03.240
对不对 无样式内容显现

13:04.220 --> 13:10.460
对不对啊 说为了解决这个问题的话 我们需要干嘛呢 我们需要尽快的交付css

13:11.220 --> 13:17.580
啊 说到这就解释了为什么我们在写这个页面的时候 顶部样式 底部脚本

13:18.500 --> 13:26.820
你回想一下 是不是这个样子的 对不对 我们的这个样式啊 特别是比如说这个无论是外层还是内 就是无论是这个

13:29.620 --> 13:36.540
这个外部的css啊 还是这个内部的css啊 我们都说给 把它干嘛呢 是放在最上面

13:37.380 --> 13:43.060
对不对 放在最上面 好 然后这个js 无论是外部的还是内部的 我们都把它放在什么

13:43.340 --> 13:49.860
说放在脚本的 就是把它放在这个页面的最下面 对不对 这个被我们称之为最佳实践

13:50.500 --> 13:54.420
啊 这就解释了为什么啊 因为你css要尽快的交付

13:54.880 --> 13:59.320
css的话 要等你的整个dorm构建完了之后 再执行css

14:00.200 --> 14:01.280
对吧 ok

14:02.120 --> 14:11.760
好 然后随着现代浏览器的普及啊 浏览器的话 他现在为我们提供了更多强大的这个武器 这个武器是什么的 这个武器就是我们这边

14:12.280 --> 14:15.560
整张文章的标题叫做支援提设

14:16.080 --> 14:20.200
关键词 啊 提供了这个东西 好 他提供了这个东西之后

14:20.660 --> 14:29.980
然后你如果利用这些东西的话 他就可以干嘛呢 大幅提高我们页面的夹仔速度 我们这边让给你打个扩号

14:30.900 --> 14:35.140
这里话强大的武器 指的就是我们这边要讲的资源

14:36.580 --> 14:37.220
提设

14:38.180 --> 14:38.740
关键词

14:39.660 --> 14:45.860
啊 合理的利用这些资源提示关键词 就可以大量就大幅提高我们的页面夹仔速度

14:46.360 --> 14:50.800
好 那这些这个资源提示关键词有哪些呢 有这么一些

14:51.720 --> 14:55.400
有这么一些啊 我们来看一下 首先的话difl和sync

14:57.160 --> 15:03.120
嗯 现代浏览器引入了difl和sync 他们两个都是表示什么呢 表示

15:04.960 --> 15:10.480
你的这个JS的夹仔不要影响我这个多么的构建

15:11.160 --> 15:15.480
啊 不要影响我多么的构建 啊 但是两者之间的话有一些区别

15:15.920 --> 15:21.520
有什么区别呢 这个sync 他表示这个夹仔和渲染后续文档过程

15:22.120 --> 15:24.880
将和JS夹仔和执行 并行

15:25.760 --> 15:28.000
进行 啊 然后接下来这个difl

15:28.720 --> 15:36.400
difl的话是也是夹仔并行执行 啊 但是在scribeJS执行之前

15:36.920 --> 15:43.200
解析完成 我们直接看这个图哈 这个这个文字表述看上去比较费劲啊 我们这边先看这里

15:43.660 --> 15:50.700
先看这里 这里的话你看是不是就是正常情况上我们这边script 然后接下来这边src是不是写个这个JS啊 对不对

15:51.100 --> 15:55.180
好 然后接下来你看这边加了个什么 是不是加了一个sync关键字

15:55.860 --> 16:02.260
对不对 大家这边是加了一个什么呢 加了一个difl关键字 好 直接看图啊 直接看图 看了图你就明白了

16:03.340 --> 16:11.780
好 正常情况下比如说没有加而sync没有加difl 他是什么样子 好 你看这边绿色 绿色代表html的解析

16:12.760 --> 16:16.400
解析完了之后 然后接下这个紫色 紫色代表下载

16:17.120 --> 16:23.240
jess 那下载jess下载完了之后 然后加这边这个粉色代表什么呢 代表执行jess

16:23.920 --> 16:33.760
那我从下载jess到执行jess整个期间 你这个dorm的这个构建是不是就被组设掉了 对不对 我要等你干嘛呢 要等你

16:34.920 --> 16:38.880
就是jess执行完之后我是不是在继续进行解析啊

16:39.740 --> 16:50.060
对不对 继续进行解析 好 然后接下来这个assync 而sync就代表什么呢 就代表我这边的话 我在下载这个jess的时候 你dorm继续构建没关系

16:50.620 --> 16:56.740
继续构建就可以了 对不对 没有关系 继续构建我这边再下载嘛 然后接下来我执行的时候

16:57.340 --> 17:01.500
执行的时候 然后接下来这边的话 把它干嘛呢 把它这个组设掉

17:02.420 --> 17:08.060
看到没有 执行的时候把它组设掉 好 然后加执行完了之后干嘛呢 执行完了之后继续进行解析

17:08.480 --> 17:18.280
这就是assync 啊 也就是说下载jess代码的时候 不再组设这个dorm数的构建啊 我这边的话就记一下吧

17:20.080 --> 17:31.240
也就是说也就是说下载jess文件的时候不会组设

17:31.540 --> 17:33.500
这个dorm数

17:34.700 --> 17:38.100
dorm数的构建

17:38.980 --> 17:44.180
对吧 就这个意思啊 通俗来讲就这个意思 你就不用看前面那句话啊

17:44.780 --> 17:48.900
好 然后接下来的话 这边这个difl 低分的话 你看这个图是不也很好理解

17:49.420 --> 17:57.340
对不对啊 你这边的话在构建 构建的时候 这个时候遇到要干嘛呢 要下载这个jess啊 没关系 你并行的下载就可以了

17:57.880 --> 18:04.520
你下载你的 对不对 下载你的 没关系你下载 下载的话 然后接下来下载完了之后啊 到这个点

18:05.160 --> 18:13.400
这个点是不是就下载完了 下载完了之后 而sync是不是下载完了之后开始执行 然后这个时候就把那个构建dorm

18:14.160 --> 18:18.840
啊 这个过程是不是就组设掉了 但是我这边的话 我执不执行 我不执行

18:19.640 --> 18:26.920
对不对 我不执行 我干嘛呢 我等你继续的构建dorm 构建完了之后我在干嘛呀 我是不是再来执行

18:28.040 --> 18:36.320
对不对 你看这张图一看就明白了 对不对 我不需要说那么多啊 不需要说那么多 你看图一看就明白啊 所以我们这边我们记一下

18:37.600 --> 18:40.800
第一份的话表示什么呢 表示啊 也就是说

18:42.360 --> 18:47.560
也就是说啊 和这一样的 下载jess文件的时候不会组设

18:49.160 --> 18:53.560
啊 这边的话 组设这个dorm数的构建啊 但是执行

18:54.220 --> 18:57.940
该jess代码会组设

18:59.260 --> 19:03.100
组设这个dorm数的构建

19:06.890 --> 19:13.690
ok啊 然后这边这边那是下载jess文件的时候不会组设dorm数的构建 然后等待

19:15.330 --> 19:18.170
然后等待这个dorm

19:18.990 --> 19:27.030
dorm解析完毕后啊 或者说dorm数构建完毕后 再干嘛呢 再执行

19:27.750 --> 19:27.950
执

19:29.790 --> 19:31.390
jess文件

19:32.430 --> 19:40.470
对不对 再来执行执jess文件啊 这个就是async和different的区别 different的话是代表是稍后嘛

19:40.990 --> 19:47.350
对不对 稍后 async代表什么 代表异部啊 对不对啊 两者之间的区别啊 这是第一个

19:48.050 --> 19:53.210
好 然后接下来第二个 第二个要介绍的这个资源提示关键词叫做prayload

19:54.850 --> 19:58.850
prayload 而prayload的话 顾名思义就什么了 是不是 预加载

19:59.890 --> 20:02.690
对不对 预加载 它写在哪里呢 就是这里

20:04.090 --> 20:09.330
这里就是比如我们link标签里面 link标签里面 然后接下来这里有一个re

20:10.310 --> 20:15.790
可不可以啊 有个rere属性 属性值的话 我这边就写一个prayload

20:16.510 --> 20:21.750
那无论你是css还是这个jess 我都用什么呀 是不是 都用link标签

20:22.510 --> 20:29.510
对不对 你之前的话 你我们常见的就是 css用link标签 jess用什么 jess是不是用script标签

20:30.150 --> 20:34.830
对不对 那现在的话你要用这个prayload prayload的话 那就是都是link标签

20:35.290 --> 20:41.210
然后接下来这边说real这个属性 real这个属性 写上prayload

20:42.170 --> 20:45.930
那写上prayload 然后接下来这边horrifo 写上你的这个资源

20:46.650 --> 20:50.210
写上资源之后 然后加它还有个什么呢 还有个s属性

20:50.970 --> 20:57.930
可不可以啊 我在这个s属性里面我就可以写啊 你这个是一个style 是一个样式文件 你这个是一个script

20:58.690 --> 21:00.290
是一个这个jess脚本

21:01.270 --> 21:08.310
看到没有 可以使用什么了 使用s来指定要夹载的内容类型

21:10.030 --> 21:17.390
那使用这个prayload 有什么好处呢 有什么好处呢 你看这个prayload翻译成中文叫做预夹载

21:18.070 --> 21:22.510
预夹载预夹载 顾名思义就是干嘛呀 是不是提前夹载资源

21:23.410 --> 21:31.290
对不对 我会对这两个资源就是style 1.css和man 1.jss 我会干嘛呢 我会提前来进行一个夹载

21:32.210 --> 21:39.090
啊 我不会等到就是你执行到这个标签的时候 我再去请求下载啊 我会提前的进行一个夹载啊 一步的

21:39.730 --> 21:43.050
但是呢 他不会干嘛呢 就是夹载完了之后 他并不会生效

21:44.050 --> 21:51.050
并不会生效 他只是把它夹载了 但不会立马生效 他是后面 后面在随后的页面渲染中

21:51.510 --> 21:58.310
你如果需要使用他们 他们才会这个生效 看到没有 这就是prayload

21:59.390 --> 21:59.870
prayload

22:01.310 --> 22:14.070
好 然后prayload的指定有一些这个优点啊 我们来看一下 允许浏览器设置资源的优先级啊 从而允许这个微博开发人员优化某些资源的这个交付

22:14.690 --> 22:19.450
然后使这个浏览器能够确定资源的类型 为什么你这边是不是写了这个s

22:20.290 --> 22:28.130
对不对 这边s style s script 还有其他的 有img font document 对吧 浏览器可以确定资源类型

22:28.690 --> 22:34.410
啊 让浏览器的话他可以自动的来判断 有些资源是否是可以从用的啊

22:35.170 --> 22:37.850
然后通过这个s属性定义的内容 可

22:38.830 --> 22:43.510
定义的这个内容来确定请求是否符合内容安全策略

22:44.150 --> 22:50.550
啊 还就是可以根据这个资源类型发送合适的这个sceptre 就是那个请求头啊

22:51.110 --> 22:56.710
合适的这个请求头 这是这个prayload他的一些这个优点啊 这个的话其实蛮好用的

22:57.150 --> 23:01.670
啊 现在这个支持度也很高 你可以在哪里呢 你可以在这个can i use

23:02.490 --> 23:06.730
呃 这边can i use 你可以在这边插一下

23:07.730 --> 23:10.010
啊 这个prayload的话基本上都是支持的

23:12.550 --> 23:16.790
看一下 对不对 基本上是没问题的啊 这个支持度很高的

23:17.870 --> 23:24.150
啊 这是这个prayload和prayload很相似的 还有一个什么呢 还有一个是prefetch

23:25.350 --> 23:25.990
prefetch

23:26.710 --> 23:31.710
prefetch是什么呢 prefetch的话它是利用你这个浏览器空闲时间

23:32.170 --> 23:40.290
去夹载这个页面可能用到的一些资源啊 你注意他基本他基本上夹载的是什么呢 夹载的是其他页面

23:41.010 --> 23:44.570
不是说是首页 首页的话我通过这个prayload

23:45.290 --> 23:47.850
通过这个prayload我是不是已经把它夹载下来了

23:48.490 --> 23:52.730
对不对啊 这个prefetch的话它经常夹载的就是一些其他页面

23:53.410 --> 23:55.050
要用的资源啊 我们来看一下嘛

23:55.570 --> 23:58.530
prefetch是一种利用浏览器空闲时间

23:59.030 --> 24:04.270
夹载页面啊 然后夹载的是什么呢 夹载的是将来可能会用到的资源

24:05.150 --> 24:11.110
可不可以啊 通常用于什么呢 夹载非首页的其他页面所需资源

24:11.870 --> 24:16.910
对不对 然后接下来的话你这个在访问其他页面的时候 那是不是它就非常非常的快

24:17.910 --> 24:24.030
对不对 非常非常快啊 你看这边 以便加快后续页面的首频速度

24:25.010 --> 24:28.850
这是prayfetch和prayload 两个要区分开哦

24:30.130 --> 24:32.130
然后prayfetch夹载的这个资源

24:32.690 --> 24:38.210
可以获取非当前页面的所需要资源 看来我反复强调是非当前页面

24:38.970 --> 24:41.650
不是当前页面 这可能就是用户会点击

24:42.170 --> 24:48.290
点击到下面的页面 后面的页面 我先把它后面有可能点击页面要用到的资源

24:48.570 --> 24:50.250
先把它干完了 先把它夹载了

24:51.150 --> 24:55.670
那夹载完了之后 然后接下来的话 这边放入缓存至少五分钟

24:56.310 --> 25:04.190
然后你要注意啊 当页面跳转的时候 未完成的这个prayford这个废棋这个请求 他是不会被中断的

25:04.590 --> 25:07.070
他也就说他会继续的请求这个资源

25:09.070 --> 25:14.710
然后他的用法是和和这个prayload是一样的 你这边就是写上这个prayfetch

25:15.370 --> 25:22.010
就可以了啊 这是prayfetch 然后prayfetch的话还提供了一个什么呢 还提供了一个这个DNS

25:22.570 --> 25:25.530
prayfetch 啊 这个是什么意思呢 我们来看一下

25:27.010 --> 25:30.690
好 dns prayfetch 它是允许浏览器

25:31.170 --> 25:37.250
在用户浏览页面的时候 然后我们在后台干嘛呢 后台进行DNS查找

25:38.290 --> 25:40.210
什么意思 我们知道就是我们的这个

25:40.670 --> 25:48.750
发送一个请求对吧 发送一个请求获取页面的话 他有个过程是不是叫做DNS查找 他要先把你的域名

25:49.710 --> 25:55.950
转称什么 转称ip地址这个我们称之为这个DNS查找 这个是不是也是需要花费时间的

25:56.510 --> 26:02.110
对不对啊 让我通过这个DNSprayfetch 我就可以干嘛呢 我就可以提前

26:02.710 --> 26:04.310
执行这个DNS查找

26:05.030 --> 26:07.510
看到没有 也就是说从这个DNS查找

26:08.090 --> 26:10.690
这个点来减少这个延迟

26:12.330 --> 26:16.930
好 然后这个怎么做呢 这个也很简单 这边这个real你写上什么呢 写上这个

26:17.410 --> 26:21.730
DNS干prayfetch就可以了 看到没有DNSprayfetch

26:22.210 --> 26:27.850
然后回头的话用户比如说用户我在浏览这个首页 比如假设这个是个网页 我在浏览首页

26:28.090 --> 26:31.290
然后回头的话他这边就会提前 因为我这边都是域名嘛

26:32.010 --> 26:34.010
对不对 这些都是域名 然后提前

26:34.990 --> 26:39.310
把这些域名啊 然后进行一个什么呢 进行一个DNS查找

26:39.790 --> 26:41.590
那回头用户就是比如说点到

26:42.150 --> 26:49.110
其他的这个页面的时候 如果要用到这个资源啊 要用到这个资源 他就不用再进行DNS查找了 因为已经找过了嘛

26:49.670 --> 26:53.070
对不对 已经找过了 这是关于prayfetch

26:53.670 --> 26:57.190
啊 他和prayload的最大的区别是prayload的话是

26:57.790 --> 26:59.190
提前夹载当前页

26:59.630 --> 27:02.790
prayfetch的话是夹载什么 夹载非当前页

27:03.370 --> 27:07.370
对不对 非当前页 我们来看一下他的这个can i use

27:08.010 --> 27:09.850
他里面的这个支持的情况

27:11.250 --> 27:11.970
prayfetch

27:14.360 --> 27:16.400
啊 这边你看safry是不支持的

27:17.120 --> 27:21.520
可不可以啊 safry是不支持的 然后火湖和谷歌支持度还好

27:22.240 --> 27:29.520
是吧 你看连这个连iE都支持啊 连iE11都支持啊 这边的话safry反而不支持

27:30.320 --> 27:33.320
是吧 刚才那个呢 刚才那个safry应该是支持吧

27:33.820 --> 27:36.140
啊safry这边是不是支持了 对不对

27:37.220 --> 27:41.460
啊 然后下一个 下一个的话是这个pray render

27:42.140 --> 27:47.980
啊 这个的话和prayfetch很像 他也是什么呢 他也是收集非当前页

27:48.380 --> 27:54.700
啊 就是用户可能用到的 就是后面的页面啊 收集那些资源 但是他和prayfetch不一样

27:55.140 --> 28:02.540
prayfetch的话 他只是把资源收集了 收集了 然后用户比如说点击下一页 点击下一页之后 然后这些资源是不是都收集好了

28:02.720 --> 28:08.080
这不直接使用 这个pray render的话 他是直接在后台渲染整个页面

28:09.360 --> 28:14.360
可能他不仅仅把资源给你收集好了 他还把页面给你渲染出来了

28:15.560 --> 28:22.560
可能啊 这是pray render啊 然后加这边用法也一样 他们用法都是一样的 可能用法的话都是这边reair

28:22.760 --> 28:29.520
那加这边加上什么呢 加上你的这个资源提示关键词啊 那看一下这个的支持度

28:30.020 --> 28:43.360
pray render 这个估计支持就更少了pray render 你看 只有什么 是不是只有谷歌支持啊 对不对 连这个火骨都不支持啊 这是pray render

28:44.520 --> 28:48.920
好 最后一个 最后一个要介绍的就是什么呢pray connect

28:49.720 --> 28:52.640
那这个重点就在于什么呢 重点就在于connect

28:53.200 --> 28:58.520
connect是什么意思 connect是连接的意思啊 对不对啊 让我们知道

28:58.980 --> 29:01.620
就是我们这边http请求

29:02.940 --> 29:11.500
在实际发送到服务器之前 我们是要建立连接的 那建立连接的话 他会经历一系列的过程

29:12.140 --> 29:19.220
比如说dns查找 那dns 这个dns查找我们倒是可以通过什么呢 通过这个dnspray fetch

29:19.780 --> 29:24.980
是不是进行一个预处联 对不对 但是除了dns查找以外 其实还有一些其他的

29:25.600 --> 29:28.000
这个事情 比如说tcp三次握手

29:28.400 --> 29:40.080
tls协商啊 就这些东西 这些都是一些涉及到网络的一些支持啊 这个你们学了网络的章节就知道了啊 那这些的话也是相当耗时的

29:41.320 --> 29:48.600
对不对啊 说说这个pray connect的话 他就是干嘛呢 他就使浏览器能够预先建立一个

29:49.060 --> 29:55.380
连接 等你要用这些资源的时候 你直接发请求就可以了 连这个连接都已经建好了

29:56.080 --> 30:01.380
这就是这个pray connect 你看这边有张图哈 这边有张图 without

30:01.940 --> 30:07.740
pray connect啊 你看这边 这边的话就是你的这个dns tcp tls

30:08.540 --> 30:14.020
看到没有 然后接下来的话 这边又是tc dns tcp tls

30:14.740 --> 30:22.820
看到没有 这边是要花时间 但你如果这边的话 用了这个pray connect 他是不是提前建立连接 那接下来你看这边第2个部分

30:24.240 --> 30:29.320
第二页啊 这个的话应该是第一页啊 就是你的首页 然后加这个的话是你从首页里面

30:29.760 --> 30:34.840
点击了其他某个页面 他是不是又要建立这个连接 建立连接 然后接下来的话 是不是这边

30:35.560 --> 30:41.160
夹仔 对不对 但是如果你使用了这个pray connect 你看第二页的时候

30:42.140 --> 30:47.300
我就直接干嘛呀 这不直接夹仔就可以了 对不对 我就省去了什么啊 这不省去了这个时间

30:48.420 --> 30:51.020
对不对 省去了这个建立就是

30:52.060 --> 30:54.660
建立连接的这个时间

30:55.620 --> 30:59.700
看到没有啊 然后这个pray con这个connect

31:00.260 --> 31:07.820
他的使用的话也很简单啊 就是re here 这边的pray connect 我估计这个的话也是只有谷歌支持

31:08.420 --> 31:09.860
啊 目前只有谷歌支持

31:10.840 --> 31:18.960
啊 然后上面的代码 浏览器会进行以下的步骤 首先解释hurray for的属性质 hurray for属性质对应的是一个这个

31:19.920 --> 31:30.520
啊 王子啊 对不对 判断他是否是合法的url 如果合法啊 继续判断这个url协议是http 还是https

31:31.080 --> 31:32.200
啊 如果不合法就

31:33.000 --> 31:33.760
啊 结束处理

31:35.200 --> 31:38.200
啊 然后如果 如果当前页面的这个host

31:38.740 --> 31:46.740
不同于这个hurray for属性中的host 这个host 这不就是一个跨域的请求 对不对 然后接下来他就不会带上cookie

31:47.420 --> 31:52.100
啊 如果你希望带上cookie的话 你可以添加什么呢 添加这个cross origin

31:53.020 --> 31:57.980
把这个属性值添加上 添加上之后 然后接下来他就可以把cookie这些带上

31:58.780 --> 32:05.780
啊 总之的话这个pray connect的话 他就是提前建立一个连接

32:06.760 --> 32:14.160
明白吧 提前建立一个连接啊 来我们还是来看一下他的支持情况啊 我这边的话 估摸着应该就只有

32:14.920 --> 32:16.960
谷歌支持啊 走

32:19.930 --> 32:27.890
safari还支持对不对啊 大家这个这个open还支持 反而这个firefox是不支持啊

32:28.530 --> 32:32.810
对不对 以前是支持的 现在的话他不支持了啊 不知道什么原因啊

32:33.510 --> 32:42.430
ok啊 这里的话就是给大家介绍这些支援提示关键词啊 你回顾一下 这边介绍了好几组啊 你回顾一下

32:42.870 --> 32:47.270
defer而think对不对 然后接下这边prayload

32:47.750 --> 32:52.310
pray fetch然后pray render以及这个pray connect

32:53.070 --> 32:57.990
啊 介绍了这么多组就是希望大家就是脑子里面有一个印象

32:58.710 --> 33:12.810
对不对 那回头的话面试的时候 如果被问到这一块 那你至少的话可以达得出来 对不对 稍微可以和面试官聊一下 也有哪些资源提示词啊 每一个资源提示词 他是什么样的作用

33:13.290 --> 33:23.210
这不能说得出来啊 对不对啊 这就是我们的这个这几颗目的啊 这几颗目的 好 这几颗的话就先到这里啊 再见

