WEBVTT

00:00.750 --> 00:03.050
大家好 我是谢老师

00:03.550 --> 00:07.150
上一节课的话给大家介绍了一下这个微波sql

00:07.410 --> 00:10.470
当我们我说过就是这个微波sql的话

00:10.730 --> 00:12.530
大家简单了解一下就可以了

00:13.030 --> 00:14.830
这个东西的话它已经被废弃掉了

00:15.350 --> 00:19.690
对不对 现在的话w3c它主推的是什么呢 它主推的是这个

00:20.470 --> 00:21.990
index的db

00:22.510 --> 00:26.610
首先我们今天这节课的话我们就来看一下这个index的db

00:27.370 --> 00:29.930
我这边的话分为这么几个部分来给大家介绍

00:30.130 --> 00:33.330
首先的话就是介绍介绍一下indexdb

00:33.730 --> 00:38.730
然后第二个的话就是关于indexdb里面一些重要的这个概念

00:39.090 --> 00:44.970
啊就数据库啊数据穿这个仓库呀索影啊一些概念介绍

00:45.490 --> 00:50.570
然后就是什么呢 然后就是一些实操了啊最基本的增三改查

00:51.330 --> 00:54.210
对吧 ok 好 那我们一个一个来看

00:55.170 --> 00:58.410
那首先第一个indexdb啊一个简介

01:00.410 --> 01:09.810
随着浏览器功能的不断增强啊越来越多的网站开始考虑什么呢将大量数据你注意啊这个是关键点

01:10.370 --> 01:16.410
大量数据把这个大量数据干嘛呢 把大量数据存在客户端

01:17.250 --> 01:22.330
也就是说以前的话是重服务器端轻客户端啊以前是这个样子的

01:22.770 --> 01:29.610
重服务器端轻客户端客户端要做的事情很少啊基本上所有的计算都是在哪里呢

01:29.730 --> 01:36.410
都是在服务器端进行一个计算计算好了之后把结果拿回给客户端客户端直接就是显示啊

01:37.010 --> 01:40.890
就可以了啊 但现在的话随着我们这个浏览器的功能越来

01:41.490 --> 01:50.170
就是就是越来越增强对吧 他不断的增强那现在的话各种各样的这个网站他就考虑的话就我就可以把数据干嘛呢

01:50.330 --> 01:59.290
我就可以放在客户端了啊回头有些计算的话也可以在客户端进行计算啊从而干嘛呢 从而可以减少从服务器

01:59.810 --> 02:05.930
获取数据啊直接从本地获取数据你直接从本地获取数据也非常快对吧

02:07.250 --> 02:17.130
好 那我们这个浏览器他目前的这个存储方案有哪些呢啊我们前面的话我们概括说的有cookie是吧有cookie有这个微博storage

02:17.770 --> 02:24.290
然后有我们上节课介绍的微博sql啊 但是这些的话个子都有缺点 我们来看一下

02:24.810 --> 02:29.850
首先的话cookie cookie的话他的特点就是什么呢他的大小不超过4k比

02:30.650 --> 02:40.370
对不对很小啊然后local storage local storage的话他比这个cookie稍微要大一些 但是也大不到哪去

02:40.850 --> 02:50.450
你看他的这边的话他是2.5兆到10兆啊稍微要大一些 但是呢也大不到哪去啊 而且他不提供搜索功能

02:51.330 --> 02:55.450
我们这个local storage存储的就是什么呀 这存储的就是这种建制队

02:56.370 --> 03:02.930
对不对 就是建制队 他是不支持搜索啊 更别说像数据库里面会用到什么索引之类的

03:03.770 --> 03:10.530
更不会有 说说的话就需要一种新的解决方案 那这个就是什么呢 这个就是我们indexed db

03:11.210 --> 03:12.890
他的这个诞生的这个背景

03:13.810 --> 03:14.730
好 我们来往下面看

03:16.090 --> 03:22.170
啊 mdn官网解释这个indexed db 他是一种什么呢 他是一种底层api

03:22.850 --> 03:29.970
用于客户端存储什么呢 大量注意啊 反复强调 他可以存储大量的结构化数据

03:31.290 --> 03:38.330
然后vivo storage虽然就是存储少量数据 很有用 你说有vivo storage他是存储的吗 是不是少量

03:38.810 --> 03:45.410
对不对 2.5兆到10兆啊 但是呢 对于存储大量的结构化数据就力不重新了

03:46.090 --> 03:49.970
而且的话就是他也不提供搜索 我们刚才是不是说了的 对不对

03:51.010 --> 03:58.930
好 然后通俗的来讲的话indexed db就是浏览器提供的本地数据库啊 你在这边其实可以看到

03:59.530 --> 04:05.570
我们上节课讲那个微波sql的时候 微波sql是在这对不对 你看他上面就是什么

04:06.050 --> 04:10.290
上面是不是就是indexed db 你看这个是不是是一个数据库的这个图标

04:11.130 --> 04:12.730
各面啊 是个数据库

04:14.610 --> 04:21.490
好 然后indexed db他不属于什么呢 不属于关系型数据库 不支持sql

04:22.090 --> 04:25.490
查询语句 更接近什么呢 更接近于low circle

04:26.450 --> 04:31.970
这也是现在比较流行的一种这个数据库啊 就是都是使用的是什么呢 非关系型

04:32.730 --> 04:35.330
很长一段时间流行的是关系型数据库

04:35.930 --> 04:44.290
像大家啊 之后要学习的比如my circle 他就是关系型的啊 关系型的还有很多啊 比如说这个微软的sql

04:44.570 --> 04:50.130
这些都是关系型的 但现在的话 随着我们这个微波应用啊 越来越复杂

04:50.850 --> 04:58.490
啊 我们就需要这个数据库的啊 越来越有弹性啊 那这里的话就是现在越来越多的使用什么呢 使用的是这个no circle

04:59.010 --> 05:06.970
就非关系型数据库啊 当然有的同学也听就是听不懂啊 什么叫做这个有弹性 这个后面你上了数据库 你就知道了

05:07.610 --> 05:14.770
好吧 后面我们会有的有mango有mango db数据库的课程 也有my circle数据库的课程啊

05:15.850 --> 05:20.810
好 那这样我们这边 几种客户端存储方式一个对比 我们来看一下

05:21.770 --> 05:26.730
首先是cookie 绘画期的cookie大小4kb 持久性的cookie也是4kb

05:27.370 --> 05:35.210
那session storage 2.5到10兆 local storage也是2.5到10兆 但是index db 你看是不是大得多

05:36.090 --> 05:44.970
对不对 直接大于250兆啊 说说反复强调啊 当你要在你的客户端存储大量数据的时候

05:45.610 --> 05:50.170
那你第一就应该是考虑什么的 第一就应该考虑到的是这个index db

05:50.970 --> 05:52.010
ok啊

05:53.210 --> 05:59.690
好 然后index db具有以下的特点啊 我们来看一下 首先第一个它是建制队

06:00.410 --> 06:07.290
存储啊 这也是典型的这个非关系型数据库 它的一个特点建制队啊 然后第二个它是异步的

06:07.770 --> 06:12.890
index db操作时不会锁死榴弹器 用户依然可以进行其他的操作

06:13.450 --> 06:18.010
啊 因为它是异步吗 啊 这与这个local storage就形成了鲜明的对比

06:18.490 --> 06:25.610
因为我们local storage它是不是同步啊 对不对 你取数据啊 比如我在取数据的时候 那后面的操作就只有排队

06:26.650 --> 06:35.850
对不对 好 第三个支持这个事务 你注意 一会我们所有的操作的话都是在事务上面啊 事务的话我记得上几课在

06:36.410 --> 06:43.370
介绍这个vable sql的时候 是不给大家介绍过 对不对 事务的话是数据库里面 一个很重要的概念

06:44.330 --> 06:50.330
那我们这边index db的话 它所有的这个操作也是就是在事务的基础上来进行操作

06:51.370 --> 06:56.010
啊 这里写的有事务的话 只要有一步失败 整个事务就都取消

06:56.970 --> 07:03.850
啊 上节课在讲那个vable sql的时候 介绍到事务 我是不是举了一个这个存钱取钱的例子

07:04.730 --> 07:06.570
对不对 啊 下一个

07:07.290 --> 07:15.210
同源限制啊 他是受到这个同源限制的 每一个数据库对应创建他的域名啊 然后下面一个

07:15.610 --> 07:20.410
储存空间大啊 这是他的最显著特点之一

07:21.130 --> 07:24.010
看了没有啊 他比这个local storage要大的多

07:24.650 --> 07:28.170
他不少于250兆甚至没有上限

07:28.970 --> 07:29.370
看了没有

07:30.730 --> 07:35.930
好 然后接下来这边支持什么 支持二进制存储 他不仅可以存储制服串

07:36.250 --> 07:46.170
啊 也可以存储什么呢 存储二进制出去 okay 啊 这个就是index db的一些这个特点啊 但现在挨着挨着给你介绍的话 你印象也不深

07:46.890 --> 07:51.450
对吧 这个的话一会我们在那个时抄里面 你慢慢慢慢就有印象了啊

07:52.250 --> 07:58.490
好 然后下一个index db他主要就是用于哪些场景的 那你想想我反复再强调

07:58.970 --> 08:01.530
他可以干嘛呀 他是不是可以存储大量数据

08:02.250 --> 08:08.730
对不对 那肯定他应用场景就是什么啊 应用场景就是有些应用他需要大量数据支持的

08:09.530 --> 08:14.970
啊 那你这些大量数据呢 全部从服务器来拿又比较耗实的 那我就可以干嘛呢

08:15.930 --> 08:21.130
我就可以把它放在这个客户端啊 比如说这里 数据可视化界面

08:21.770 --> 08:28.170
你想想你可那个数据可视化 是不是经常就是虽然有一些图表 图表这些是不是需要大量的数据

08:28.730 --> 08:32.330
对不对 那大量的数据的话让我这边的话就可以把它放在这个

08:33.130 --> 08:39.530
客户端啊 比如说像一些地图信息啊之类的 对吧 那第二个即时聊天工具

08:40.090 --> 08:42.890
那这个的话就是我们的一些历史记录信息

08:43.450 --> 08:48.250
也是存在本地的啊 不知道大家就是电脑上有没有安装那个微信

08:48.730 --> 08:54.010
应该很多同学都安装了的啊 微信你有没有发现 就是你刚开始安装的时候很小

08:54.650 --> 08:57.290
然后随着你用了时间越久 它就越大

08:58.730 --> 09:05.290
发现没有 有没有同学发现啊 你用了越久那个微信它就越大 为什么 它的体积为什么会变的

09:05.930 --> 09:09.610
啊 它其实保存了就是什么呢 保存了就是你的聊天记录

09:10.570 --> 09:15.930
啊 因为你每天聊天是不是会有一个聊天记录啊 对不对 那聊天记录的话我每次都从服务器

09:16.410 --> 09:23.210
上去取 那这个的话是服务器不堪重复啊 对不对 你想想一个人的话聊天记录啊 比如你用久了

09:23.370 --> 09:29.050
你的那个微信大小啊 好几个G 一个人就好几个G啊 那那么多人

09:29.530 --> 09:35.610
那我那个服务器哪受得了啊 我光存储那个聊天记录啊 到需要很大的一个空间

09:36.250 --> 09:43.290
对不对 那我那个服务器我是受不了的啊 所以我就干嘛呢 我干涉就让这个聊天记录存储在你本机上面

09:44.330 --> 09:48.410
看到没有 哎呀 我就存储在你的机器上面啊 所以你换一台设备

09:48.890 --> 09:56.090
重新安装微信的话 你会发现聊天记录都不在了 为什么 因为你的这个聊天记录是存储在上一台设备上面

09:56.890 --> 09:57.930
看到没有啊

09:59.050 --> 10:01.770
然后还有就是什么的 还有就是一些其他的

10:03.050 --> 10:10.410
对这个存储方式容量啊 就是有这个容量要求的时候啊 那你就可以考虑index DB

10:11.050 --> 10:14.250
啊 总之这个index DB啊 他主要特点就是大

10:14.970 --> 10:23.930
明白吧 主要特点就是大啊 因为他大 所以说可以用于这些场景 对吧 这些场景其实就是对客户端存储的数据量的这个大小

10:24.570 --> 10:25.370
是不是有一个要求

10:26.250 --> 10:27.450
对不对 ok

10:28.490 --> 10:34.090
好 然后接下来下面 下面的话我们来看一下index DB一些重要的这个概念

10:36.090 --> 10:42.250
index DB的话 他是一个比较复杂的api 啊 刚才在那个mdn是不是也说过啊

10:42.570 --> 10:45.930
对不对 他是一个比较复杂一个偏底层的这个api啊

10:46.650 --> 10:46.890
好

10:48.490 --> 10:54.890
然后涉及到不少的这个概念啊 然后把不同的实体抽象成一个一个的对象接口

10:55.530 --> 10:56.650
啊 那这个的话可能大家

10:57.370 --> 11:00.570
看也不怎么看得懂 是吧 好 那我们这边我们直接来看这里

11:01.530 --> 11:03.050
这里的话 他有这么一些概念

11:03.770 --> 11:06.570
看到没有 有这么一些概念 首先呢我就介绍两个

11:07.290 --> 11:10.490
啊 我就介绍两个 剩下的我们一会用到了我们再来介绍

11:10.970 --> 11:13.690
好吧 那介绍来两个的 第一个就是数据库

11:14.330 --> 11:20.570
那我们这个index DB的话 他就是一个这个本地的这个数据库 那首先的话他会有一个数据库对象

11:21.290 --> 11:27.530
啊 注意他是对象 对象大家知道呗 对不对 对象的话他就有什么 是不是有属性有方法你可以去调

11:28.010 --> 11:32.570
对不对 那第二个第二个 他还有个什么对象呢 还有一个仓库对象

11:33.210 --> 11:34.730
哎 仓库对象

11:35.050 --> 11:42.410
仓库对象的话 你可以把它理解成什么呢 就是我们一个数据库里面 他是可以有多张表的

11:43.050 --> 11:50.810
啊 就是你这个可以有多张表 学过那个my circle的同学都知道啊 就我一个库里面有多张表 我数据都是像那个表

11:51.210 --> 11:56.490
就是存储在像表一样的这个结构里面啊 如果没有学过数据库的话 你就把它理解成什么呢

11:56.890 --> 11:58.650
理解成我想想哈excel

11:59.370 --> 12:02.890
excel总用过吧 对不对excel里面是不是就是一个一个表格

12:03.610 --> 12:08.650
对不对 好了 一个这个对象仓库就是一个sale表格啊 你可以把它理解成这个

12:09.130 --> 12:17.370
那我们这边呢就先介绍这两个东西 剩下的什么索隐啊 事物呀 操作请求 指征啊 这些这些我们之后再来介绍

12:19.290 --> 12:25.930
好 那我们这边来看一下这边数据库 数据库就是一系列相关数据的这个容器

12:26.410 --> 12:30.890
我觉得数据库这个概念大家应该很好理解 对不对 数据库数据库

12:31.290 --> 12:39.210
就是存储数据的是不是仓库 对不对 然后每个域名都可以新建任意多个数据库

12:39.770 --> 12:44.810
啊 也就是说你一个域下面你可以创建任意多个这个index DB啊

12:45.850 --> 12:49.210
好 第二个 第二个的话是这个对象仓库

12:49.610 --> 12:55.050
对象仓库的话就是每个数据库包含若干个对象仓库

12:55.610 --> 13:00.650
啊 我刚说了这个对象仓库的话 它就类似于什么呀 说类似于关系型数据库里面的

13:00.810 --> 13:04.090
是表格啊 或者你就把它想象成一个sale表格

13:04.890 --> 13:11.690
明白吧 就是我一个数据库里面可以有多张一个sale表格 ok 好 那我们就先介绍这两个

13:12.170 --> 13:17.930
剩下的话 我现在介绍也没有太大的意义 对吧 我们直接来看什么呢 直接来看实操

13:19.290 --> 13:22.010
ok 啊 实操的话 那我们这边

13:22.970 --> 13:29.450
就需要先创建一个项目了 好 项目的目录也很简单 这边的话是一个index.html

13:29.770 --> 13:33.450
啊 这边的话一个db.js 那我这边的话已经创建好了

13:34.250 --> 13:37.290
看到没有啊 这边啊 把那个引入一下

13:39.920 --> 13:40.240
这边

13:41.200 --> 13:46.640
把db.js啊 把它引入一下 ok 好 回到这边 那我们一步一步来

13:47.200 --> 13:53.840
那首先的话第一步 第一步的话你要使用数据库 那你要使用数据库的第一步是不是应该是创建

13:54.480 --> 13:56.080
啊 并且连接这个数据库

13:56.720 --> 14:00.880
对不对 好 那我这边的话代码写好了啊 但我这边不打算把它贴过来

14:01.280 --> 14:06.000
干嘛呢 我们这边来把它自己敲一遍好不好好 我这边

14:07.280 --> 14:10.800
封装一个什么的 封装一个open db的方法

14:12.480 --> 14:19.920
啊 封装这么一个啊 或者说函数吗 函数好 这么一个函数 然后既然他接收两个参数 一个是你数据库的名称

14:20.720 --> 14:22.800
啊 一个是你数据库的版本号

14:23.520 --> 14:27.520
那你版本号如果你没传的话 我默认就让你是多少呢 默认就是1

14:28.080 --> 14:33.280
可没有啊 我们这边把这写一下啊 第一个是什么呢 第一个的话是数据库名称

14:35.280 --> 14:42.840
数据库名称 数据库名称 第二个是什么呢 第二个是数据库版本

14:44.680 --> 14:47.320
数据库的版本

14:48.040 --> 14:55.960
ok 好 那接下来下一步 下一步干嘛呢 下一步的话 我这边给你返回一个promise promise 大家是学过的

14:56.920 --> 15:02.200
对吧 因为他是一部操作 所以我返回一个promise promise里面resolve

15:04.280 --> 15:10.360
reject 对吧 好 然后接下来在这里面来执行这个操作

15:10.840 --> 15:14.600
那我这边的话 我首先干嘛呢 首先挖一个这个db

15:15.320 --> 15:19.000
那这个是什么呢 这个就是存储我们数据库对象的

15:19.320 --> 15:30.760
存储数据库对象和哪个地方就连上了 和这儿是不是就连上了 对不对 我们是不是有一个数据库对象

15:31.640 --> 15:40.920
对不对 ok 好 回到这里 好那接下来的话 下一步 下一步干嘛呢 下一步的话 他会我们这边就打开数据库

15:41.640 --> 15:46.120
如果没有 如果没有 就是创建

15:47.400 --> 15:47.720
操作

15:48.680 --> 15:52.360
啊 好 那接下来怎么打开呢 这边的话就是index

15:53.080 --> 16:01.720
index db 看到没有 这个的话他是这个window对象上面 全局的一个属性啊 全局一个对象应该说是index db

16:02.200 --> 16:04.920
然后接下来点他有一个什么呢 有一个open方法

16:05.640 --> 16:10.600
看到没有 然后接下来把你的这个db name 传进来

16:11.880 --> 16:13.080
然后把这个version

16:14.040 --> 16:23.800
传进来 ok 那他这里的话就会打开 那比如说我一会我调用的时候 我是不是这样子来调用 open db 对不对 我要打开 我比说我要打开一个学生仓库

16:24.520 --> 16:27.720
studb啊 然后版本号默认一开始的话是一

16:29.080 --> 16:32.840
我会调用是不是这样调用 调用的话 然后接下来他这边是不是打开

16:33.400 --> 16:39.800
打开的话 有个同学说你这个现在没有啊 你看我现在有没有 我现在是不是空的 对不对 你看这边不能展开空的

16:40.360 --> 16:44.040
没有的话 他就会干嘛呢 他就会自动的进行一个创建操作

16:44.840 --> 16:49.560
明白吧 说这个的话 没有他就会创建 这个不需要担心

16:50.280 --> 16:52.920
ok 好 然后接下来的话 我们这边

16:54.920 --> 16:58.280
这边的话 挖一个什么呢 挖一个这个request

17:00.510 --> 17:01.070
request

17:02.030 --> 17:05.790
存储一下 存储了之后 然后接下来的话 下一步

17:06.910 --> 17:09.470
好 下一步的话 我们就要利用这个request

17:10.430 --> 17:15.790
来监听一些事件 那么这个request是什么呢 啊request是这个

17:17.230 --> 17:23.470
看到没有 idb request的对象 这是一个什么呢 这是一个操作请求对象

17:24.270 --> 17:26.030
操作请求 我看下面有没有

17:26.990 --> 17:33.150
下面 下面没有对他的解释哈 我这边说一下 操作请求 他上面的话会有一些事件

17:33.790 --> 17:36.910
啊 比如这个数据库打开成功啊sixth

17:37.630 --> 17:46.510
那接下来还有就是打开失败 aro 还有就是这个数据库更新啊 这个up grand grand lead

17:47.470 --> 17:53.150
啊 会有这么一些事件啊 那我们这边呢 监听一些这些事件 就是通过这个request的对象

17:53.470 --> 17:55.150
他上面可以监听这个事件

17:55.710 --> 17:57.630
ok啊 说说我们这边的话

17:59.070 --> 18:06.350
来呗 那这里的话request 然后首先呢 这边啊sixth看到没有啊 这边方形

18:07.070 --> 18:14.030
啊 我们这边先写啊 然后加这边request 还有什么 还有就是啊 aro

18:15.070 --> 18:16.830
啊 aro 方形

18:17.790 --> 18:21.710
这个是失败的时候啊 把蛛丝写下 这个是数据库

18:22.830 --> 18:29.150
数据库打开或者什么呢 或者创建成功的时候

18:32.410 --> 18:37.050
啊 他会触把这个成功的这个事件啊 这个的话呢 就是默认就是吗 打开失败

18:38.570 --> 18:45.530
对不对啊 还有一个 还有一个非常重要 这个request 点这个啊 就这个

18:46.250 --> 18:48.970
upgraden lily的这个

18:50.010 --> 18:58.510
这个是什么呢 这个是当你的数据库啊 发生更新的时候 数据库

18:59.310 --> 19:01.950
发生更新的时候

19:02.670 --> 19:07.070
那有同学说这个更新什么叫做更新啊 我添加一条数据就算更新吗

19:07.710 --> 19:13.150
我添加一条数据那就会触把这个事件吗 不是啊 这边的话就是两个 第一个就是版本号

19:13.870 --> 19:19.790
版本号更新 那你这个版本号更新 那确实就算是数据库 是不是有一个更新

19:20.190 --> 19:24.190
对不对 这是第一个 第二个就是什么呢 第二个就是添加

19:25.470 --> 19:28.990
添加或者删除了表的时候

19:30.190 --> 19:32.830
啊 但这个表你要知道我说的是什么啊 这个就是

19:33.630 --> 19:37.790
刚才这里面说的这个叫什么对象仓库啊 只问我这边啊 为了大家

19:38.190 --> 19:40.270
方便大家理解一点 我说的是表

19:40.990 --> 19:47.550
啊 就是添加了或者删除了这个对象仓库 也就是说表的时候 那这个时候他会触发这个事件

19:48.350 --> 19:51.150
ok 好 那我们这边一步一步来

19:52.590 --> 19:57.230
那首先的话 这边是成功 成功的话 然后接下来这边的话会有一个

19:58.030 --> 19:58.670
事件对象

19:59.310 --> 20:02.350
传进来 好事件对象event

20:03.230 --> 20:05.310
点什么呢 点这个target

20:06.030 --> 20:07.230
点这个result

20:08.110 --> 20:15.710
ok 好 这个是什么呢 这个的话就是我们的这个数据库对象

20:16.670 --> 20:19.710
明白吧 当你这个打开成功之后 它会有个事件对象

20:20.590 --> 20:23.630
事件对象里面的target点result

20:24.030 --> 20:28.590
这个的话就是我们的数据库对象 那拿到这个数据库对象呢 我们就干嘛呀

20:28.590 --> 20:33.550
就把它存起来喽 对不对 把它给这个db db 我们刚才是

20:33.630 --> 20:39.870
我们刚才是这边声明了的 把它存起来 存起来之后 然后接下来这边我们还是log一下

20:41.470 --> 20:48.270
什么呢 数据库打开成功 是吧 然后接下来把这个数据库 我们这边是个promise

20:48.590 --> 20:53.630
promise呢 那我就可以把它干嘛呀 是返回出去 这边就可以干嘛 是不是掉这个result

20:54.670 --> 20:59.710
对不对 把这个db数据库对象把它返出去 ok 那这个就是

21:00.430 --> 21:06.430
成功的时候要做的事情 好 然后接下来失败 失败的话 让我们这边就干嘛

21:07.150 --> 21:10.590
失败的话 我们这边是不是就打印一句话 log

21:12.750 --> 21:17.150
数据库 数据库打开

21:18.590 --> 21:23.630
失败 对吧 打开失败 ok 好 然后接下来这里

21:25.230 --> 21:29.470
这里的话注意 当我们第一次调用这个open方法

21:29.950 --> 21:33.950
它会出发 我这边给你写一下注释 当我们

21:35.070 --> 21:38.990
第一次调用open方法时

21:40.030 --> 21:41.630
open方法时

21:42.430 --> 21:43.710
会出发这个事件

21:46.830 --> 21:51.390
好 那有人会说为什么第一次它会出发这个事件呢 那很简单呀 你这边的话

21:51.790 --> 21:59.310
指定了版本号是不是1 那你这个创建 创建是不是一个从无到有的阶段 对不对 你这个数据库从没有

22:00.030 --> 22:03.310
到有 那这个时候啊 是不是算是一个版本的更新

22:03.950 --> 22:10.430
对不对 所以他第一次来他会出发这个事件 那这个事件里面 我们这边要不要做什么事情呢 我们这边要做事情

22:10.910 --> 22:14.190
那我们这边要做事情 我们要干完了 我们这边叫创建我们的表

22:15.630 --> 22:22.670
我们在这里来初始化我们的表

22:23.310 --> 22:32.110
好 Okay 来呗 好了 我这边呢 首先还是打印一下啊 打印一下这边就是数据库版本更新

22:33.550 --> 22:36.590
数据库版本更新

22:37.550 --> 22:41.950
ok 然后接下来我们这边干嘛呢 这边的话啊event

22:44.640 --> 22:51.840
然后接下来这边纯属一下 db 等于一个event点target点这个result

22:52.560 --> 22:59.600
拿到这个数据库对象 好 然后接下来的话 这边哇一个什么呢 哇一个object

23:01.440 --> 23:02.640
object store

23:04.400 --> 23:11.200
s to re store 这个来存储什么呢 这个来存储我们的仓库对象 也就是来存储我们的表

23:12.320 --> 23:20.160
来存储我们的表 来存储我们的表 那接下来这边怎么存 怎么来创建表呢 注意这边的话是在 db 的基础上

23:21.840 --> 23:28.000
看到没有 db 在 db 的基础上 然后接下来的话 这边还有一个方法 叫做这个create

23:29.120 --> 23:31.920
object store create

23:33.440 --> 23:36.400
et create 然后object

23:38.080 --> 23:44.560
object store 啊 创建这个创建这个仓库对象

23:45.040 --> 23:49.600
好 仓库对象 然后加这边接受几个参数 首先第一个就是你仓库对象叫什么名字

23:50.320 --> 23:54.160
那我们这边呢 就叫做学生表啊 好 再加第二个

23:54.800 --> 23:59.520
第二个吧 是一个对象对象里面啊 这边就指定你的这个组件

24:00.240 --> 24:03.680
可以指定你的组件 这边key key pass

24:04.480 --> 24:09.120
对应的是一个stu id 那这个是什么呢 这个是我的组件

24:11.530 --> 24:15.530
这是组件啊 当然这个的话 学过数据库的同学都知道

24:16.250 --> 24:18.890
这个我记得我在讲这个vboysql的时候我也

24:19.450 --> 24:23.930
介绍过对吧 什么叫做组件 组件就是这个一张表里面

24:24.410 --> 24:29.770
独一无二的啊 绝对不会重复的 那这个的话我可以把它当做一个组件

24:30.170 --> 24:34.570
那比如说你想想一张学生表 那学生表的话是不是一定是这个学号

24:35.370 --> 24:41.610
学号是不会重复的 对不对 那我就可以把这个学号来当做我的这个组件

24:42.570 --> 24:47.210
啊 你像姓名啊 年龄啊 这些是不是都会有可能有重复的 对不对

24:47.850 --> 24:51.850
ok 好 然后接下来的话 下一步 下一步的话 这边是这个auto

24:55.960 --> 24:57.480
auto这个increase

25:00.330 --> 25:07.370
increase 怎么意思啊 是不是自征啊 对不对 组件的话 这边自征啊 那这边的话 就是给一个

25:08.890 --> 25:10.890
那这边的话 就是实现

25:11.610 --> 25:19.470
自征 ok ok 好 那我们这边的话 就是这个啊 这里注释一下 创建

25:22.440 --> 25:23.160
创建

25:24.200 --> 25:27.320
数据参酷 注意哦 这里不是数据库

25:28.200 --> 25:34.920
不是数据库 是数据参酷 数据库我们已经通过什么 这边已经通过event点target点result是不拿到了

25:35.240 --> 25:37.720
对不对 我给你打个括号啊 这个就是表

25:38.440 --> 25:40.280
啊 你把他理解成双年双年这个表

25:40.840 --> 25:41.000
啊

25:42.040 --> 25:46.920
ok 好 那接下来下一步 下一步的话 我们来创建什么呢 我们来创建这个锁影

25:48.360 --> 25:49.240
创建锁影

25:50.120 --> 25:52.920
好 那这边通过这个object

25:54.120 --> 26:01.240
object store 他上面有个什么呢 他上面有一个cretor index

26:02.120 --> 26:05.880
啊 掉这个方法 掉这个方法就可以创建一个锁影

26:06.600 --> 26:10.360
啊 什么是锁影 锁影我记得在讲微博sql好像也介绍过吧

26:11.080 --> 26:13.400
什么是锁影 锁影的话就是

26:14.520 --> 26:17.480
呃 就是字典前面的那个 是不是也有锁影

26:18.280 --> 26:24.920
对不对 你可以把有字典大家都用过吧 新华字典用过没有 肯定用过对吧 上学的时候老师要求

26:25.480 --> 26:28.360
查字 查字典 那我们的这个字典

26:29.720 --> 26:32.440
其实你就可以把他理解成什么呢 理解成一个数据库

26:33.080 --> 26:35.160
啊 那你这个字典里面是不是有非常多的字

26:35.640 --> 26:41.240
对不对 那四点的话最前面第一页开始 第一页开始他是不是就是从第一个字开始呢

26:41.640 --> 26:43.640
啊 不是 他是不是先会有一个锁影

26:44.280 --> 26:46.600
对不对 他锁影的话会按照拼音

26:47.400 --> 26:49.800
有个锁影 然后按照那个部手

26:51.080 --> 26:54.040
就那个偏旁啊 按照偏旁是不是也会有个锁影

26:54.520 --> 26:58.360
对不对 你看这这就是两种不同的锁影方式 一个是按照拼音

26:58.840 --> 27:03.800
一个是按照这个部手 okay 有了这个锁影他的好处是什么

27:04.760 --> 27:07.720
他的好处 是不是我们在查字的时候更快啊

27:08.760 --> 27:12.520
对不对 查字的时候更快 比如说我要查一个卸节的卸质

27:13.080 --> 27:15.720
如果没有锁影的情况 你想想我们该怎么查

27:16.280 --> 27:20.200
如果没有锁影的情况 那你就干嘛呢 你就只有从那个第一个字开始

27:20.600 --> 27:23.560
第一个字 第二个字 第三个字 第四个字 挨着挨着翻

27:24.440 --> 27:27.880
挨着挨着翻 你想想这个效率是非常非常低

27:28.440 --> 27:32.920
对不对 那我如果有了锁影啊 我这边如果有了这个 我可以按照拼音

27:33.400 --> 27:36.840
对吧 拼音锁影来查 或者按照这个部手锁影来查

27:37.160 --> 27:40.280
啊 反正有了这个锁影之后 那我们查询这个字的

27:41.400 --> 27:44.360
这个速度是不是就大大的增快了

27:45.160 --> 27:50.680
对不对 这个的话就是锁影的好处啊 就创建锁影 有了锁影之后

27:51.640 --> 27:55.000
有了锁影之后 查询速度

27:55.880 --> 27:59.000
查询速度大大增快

27:59.880 --> 28:04.040
对不对啊 然后类比什么呢 类比新华之典

28:04.760 --> 28:11.880
只要你想到那个新华之典 你就能够理解什么叫做锁影的啊 大家在我们这个这上面点是不是也有

28:12.360 --> 28:17.560
对不对 就重要概念里面有 我们来看一下锁影 锁影的话是idb index

28:18.440 --> 28:20.520
对象啊 然后在这里

28:22.200 --> 28:28.920
为了加速数据的减索 可以在对象仓库里面为不同的属性建立锁影

28:29.560 --> 28:32.760
啊 然后在关系型数据库里面也有锁影的概念

28:33.320 --> 28:38.440
所以只要你学过数据库的话 肯定是知道锁影这个东西的 他主要是干嘛的呢 他主要就是为了

28:39.000 --> 28:41.000
加快查询速率

28:42.280 --> 28:49.160
明白吧 主要就是为了加快查询速率 你想到那个新华之典啊 没有锁影 那你的个查减值是

28:49.640 --> 28:53.880
太老火了 对不对 有了锁影之后 你想想你这个查询速度是不是大大增加了

28:54.600 --> 29:01.640
对不对 锁影的话它可以就是根据不同的这个制断 就是你可以创造 就是创建好几个锁影

29:02.440 --> 29:10.360
你想那个新华之典是不是 你想到那个新华之典那个例子 这也是一样的 对不对 我可以以拼音为锁影 我可以以部手

29:10.840 --> 29:16.360
为锁影啊 那我们这边呢 我们就来创建这个锁影 创建锁影的话 那我们这边的话

29:18.200 --> 29:22.920
创建第一个 第一个呢 是锁影的名字 锁影的名字 我们这边叫做stuid

29:23.400 --> 29:30.040
然后对应的是哪一列呢 对应的就是stuid 对不对 好 然后接下来这边 这边的话有一个

29:32.920 --> 29:41.160
eulik 啊eulik的话这边是true 什么意思啊 eulik的话是是否唯一 我们这个id是不是唯一的

29:41.720 --> 29:49.640
对不对 所以这边eulik是true ok 然后接下来我们这边再创建两个 一个的话是stulame

29:50.360 --> 29:58.760
这个的话是不是就是应该是force啊 对不对啊 然后接下来这边 这边的话是stu

29:59.720 --> 30:09.400
stu edge 学生的姓名啊 学生的姓名 ok 好 那我们这边呢就创建了什么呢 创建了三个锁影

30:10.120 --> 30:17.720
看到没有啊 那我们这边呢 整个这个up granden lily的啊 这个事件的话我们就写完了啊

30:18.200 --> 30:19.800
啊 回到我们这边这个胶案这边

30:21.400 --> 30:29.000
啊 看这里啊 在上面的这个代码中我们封装了一个open db函数啊 该函数调用index的open

30:29.560 --> 30:36.200
index db open 尝试打开数据一个数据库 如果没有的话他就会干嘛 这就会创建

30:37.000 --> 30:44.200
对不对 然后接下来他返回一个对象 我们在对象上面分别监听了什么呢 成功错误和更新啊 你看我们这边

30:44.680 --> 30:52.760
是不是监听了成功错误啊 更新对不对 好 然后接下来的话 完事之后

30:54.120 --> 31:03.000
啊 完事之后 然后我们在这个up granden lily的里面啊 这个事件里面 我们干嘛呢 我们这边的话就是

31:03.800 --> 31:05.160
创建了我们的这个

31:06.200 --> 31:11.880
啊 数据倉库 对不对 创建了数据倉库啊 大家创建了三个锁影 ok

31:12.600 --> 31:18.040
好 那接下来的话 这边这个方法就封装好了 封装好了之后 然后接下来来到这边

31:18.760 --> 31:21.240
来到这边啊 这边的话 我们就来开始调用

31:23.000 --> 31:25.960
script 好 调用什么 是吧 open db

31:27.480 --> 31:32.600
是不是调这个方法啊 好 然后把这个我们的数据库传过去studb

31:33.080 --> 31:38.840
啊 版本号你可传可不传 没传的话 他默认就是一啊 但你这边也可以传 好 保存一下

31:39.800 --> 31:44.920
保存了之后 然后接下来你看一下这里 你看 是不是就有了

31:47.080 --> 31:53.480
对不对 这里就有了啊 你这边他有个三角形把它展开 展开的话 你看 是不是就是我们stu这张表

31:53.800 --> 31:58.440
那加这个是什么呢 这个是锁影啊 这三个是锁影 因为我们刚才是不是创建了三个锁影

31:59.160 --> 32:01.000
对不对 好 那你点一下这个stu

32:01.960 --> 32:08.040
点一下这个stu 他现在的话没有直 看不看 说这边是空的啊 这边是空的

32:08.440 --> 32:16.040
ok啊 这个那就是我们创建数据库啊 创建数据库也非常简单吧啊 这边就有了

32:16.840 --> 32:19.400
好 然后接下来的话 下一个

32:20.200 --> 32:27.560
下一个的话是关闭数据库啊 你如果你这个数据库用完了 建议干嘛呢 建议把这个数据库关闭了

32:28.280 --> 32:35.160
啊 用来这个解约这个资源啊 关闭数据库的很简单 这边啊 封装了一个这个close db

32:35.880 --> 32:42.680
close db 然后接受一个参数就是你那个数据库对象啊 然后再直接调什么呢 直接调这个close

32:43.800 --> 32:48.280
调close方法就可以了 这是关闭啊 还有就是什么呢 还有就是删除

32:49.000 --> 32:51.480
删除的话 这边也是封装了一个这个方法

32:52.120 --> 32:58.120
啊 封装了一个这个方法 然后再调什么呢 调这个index db 我刚说过他是不是window对象上面的

32:58.840 --> 33:02.600
对不对啊 然后再调这个index db 他有一个dnet

33:03.240 --> 33:07.400
data base的方法 然后把这个数据库的名称啊 把它传过去就可以了

33:08.120 --> 33:14.440
看到没有啊 这两个方法 我们也把它放过去吧 放到这个db里面

33:16.520 --> 33:23.720
放到这里面啊 一个是关闭 一个是什么呢 一个是删除啊 这两个我就不掩饰了啊 因为我们这个还要还要用的

33:24.440 --> 33:33.080
啊 我把他放在这 一个关闭 一个删除 都很简单 对吧啊 关闭是调close方法 删除删除的话是index db

33:33.480 --> 33:38.360
调这个delete database方法 然后把你要删除的数据库的名称传过来就可以了

33:38.840 --> 33:41.960
啊 然后这边坚定了两个世界 这个是什么对象

33:42.920 --> 33:46.840
啊 这个是什么对象 这个是不是就是应该是这个呀

33:47.560 --> 33:59.240
是不是就应该是这个idb request 是不是操作请求对象 对不对 在这个操作请求对象上面 坚定了一个error啊 一个sixth

34:00.040 --> 34:07.480
ok 好 就是关于这个数据库啊 好 然后完事之后 然后我们来看一下这个插入数据

34:08.440 --> 34:16.040
接下来看插入数据 插入数据的话 我们仍然封装一个方法 叫做and data的方法 ok 来呗

34:17.320 --> 34:26.140
好 那这边的话 我们来插入数据 首先的话这边function and data

34:27.820 --> 34:33.820
ok 他接不接收参数呢 要接收参数 接收三个参数 首先的话是db

34:34.860 --> 34:40.220
就是数据库对象啊 数据库对象 然后还有什么呢 还有就是这个store name

34:41.340 --> 34:47.260
store name 这就是什么呢 这就是表表的名称 第三个是什么呢 第三个是你的数据

34:47.980 --> 34:55.980
啊 你要添加的数据啊 我们把这写一下 第一个db db的话是数据库数据库实力

34:57.740 --> 35:00.620
数据库实力

35:02.060 --> 35:04.140
第二个 第二个的话是数据参库

35:05.500 --> 35:07.980
数据参库实力

35:09.740 --> 35:16.540
实力啊 打个破号就是什么呢 就是表啊 第三个就是什么 第三个就是要添加的数据

35:17.020 --> 35:19.580
好 这个数据的话一般是一个什么呢 一般是一个这个

35:20.540 --> 35:23.260
节省啊 一般是一个这种节省这种对象

35:24.220 --> 35:28.620
ok 好 在这里面 在这里面的话你就调什么呢 调这个db

35:30.060 --> 35:37.340
db是不是这儿传过来了 对不对 数据库实力 然后他有一个什么呢 他有一个叫做twice action

35:38.860 --> 35:42.300
twice action 有这么一个这个方法

35:43.260 --> 35:46.780
这个方法就是什么呢 这个方法的话就是一个事务方法

35:47.580 --> 35:51.180
看到没有啊 那很好对上了和前面的这边

35:52.860 --> 35:54.940
idb twice action

35:55.500 --> 36:01.340
它是一个事务 事务的话我们这个在介绍这个vivo sql的时候啊 我们说过的

36:01.820 --> 36:04.060
事务的话就是什么 是不是一连串操作

36:04.860 --> 36:06.460
对不对 一连串操作

36:07.420 --> 36:08.780
要么全部成功

36:09.740 --> 36:12.460
要么就直接就失败 只要你有一个动作失败

36:12.860 --> 36:13.420
他就失败

36:14.540 --> 36:19.020
看到没有啊 这个最典型的就是经常我们操作数据库的时候我们就是拿了一个存钱的

36:19.580 --> 36:22.220
那个例子来举例 对不对 我给你转钱

36:22.700 --> 36:25.820
那其实的话这个操作就是我的账户少100块钱

36:26.300 --> 36:29.820
你的账户多100块钱 假设我给你转100块钱啊

36:30.540 --> 36:35.420
那如果我比如说在操作的时候这两个步骤 那进行了第一个步骤之后

36:35.580 --> 36:42.780
然后接下来突然就停电了 或者机器出问题了 我这边少了100块钱 你那边没有增加

36:43.820 --> 36:49.020
那这样子是不是就会有问题啊 对不对 所以我们把这两个操作封装成一个事务

36:49.740 --> 36:52.700
那你那边的话你没有增加 那接下来就干嘛呢 就回滚

36:53.180 --> 36:57.740
所有就前面所有的操作 我不管你前面进行多少步 我不管

36:58.140 --> 37:00.300
只要有一个操作不成功

37:01.020 --> 37:03.020
那所有的操作全部回滚

37:03.500 --> 37:05.580
啊 全部回滚 这就是事务

37:07.660 --> 37:12.940
看到没有啊 这里啊 这里的话他就是提供了一个这个事务的这个方法

37:13.500 --> 37:19.580
叫做trice action 他返回的是一个事务对象啊 好 然后接下来在这里

37:20.300 --> 37:27.180
这里的话首先他接收第一个参数 第一个参数呢 就是你的这个你要操作哪张表

37:27.980 --> 37:32.300
啊 这边那是一个综阔哈 你要操作哪张表 我们这边呢要操作

37:32.620 --> 37:36.220
所以就是这个传进来的这张表 对不对 star name

37:36.940 --> 37:39.740
啊 他这边因为有可能是多张表 所以他这边是一个数组

37:40.540 --> 37:45.980
啊 好 然后接下来的话 这边第二个参数 第二个参数就是你要打开这张表

37:46.300 --> 37:53.980
因为你这边要操作 操作到是不是先要打开这张表 对不对 然后打开的话 然后下这边打开这张表的一个模式

37:54.780 --> 37:58.380
什么模式啊 一般的话就是有两种 一种是指读

37:59.180 --> 38:05.980
就指读 第二种是读写啊 读写 那我们这边肯定不可能指读嘛 指读我怎么往里面添加数据呢

38:06.380 --> 38:10.780
对不对 那我这边很明显是读写 读写的话就是read right

38:12.700 --> 38:13.260
read right

38:14.540 --> 38:20.620
OK 好 大家整个这个 整个这个的话他会返回一个什么呢 返回一个事务对象

38:21.580 --> 38:28.700
返回一个事务对象 然后接下来在下面你可以继续练识调用 调用什么呢 调用这个object

38:31.530 --> 38:36.330
object store方法 啊 指定这边要操作的仓库对象

38:38.170 --> 38:45.290
这边storing 啊 有的朋友说你上面不就指定了吗 啊 上面的话我这边只是创建一个事务

38:46.010 --> 38:50.010
知道吧 创建一个读写的这个事务 然后接下来这边啊

38:50.730 --> 38:52.730
啊 创建一个读写的事务

38:54.170 --> 38:59.930
针对这个数据仓库来进行操作 然后下这一步 这一步的话是打开你的这个

39:00.890 --> 39:06.170
仓库对象啊 好 然后接下来完事之后干嘛呢 然后调这个and方法

39:07.610 --> 39:11.210
看到没有 调and方法 然后把你的这个要添加的这个data

39:12.170 --> 39:12.970
把它放进去

39:13.210 --> 39:20.650
ok 好 然后接下来整个这一块 整个这一块的话返回一个什么呢 返回一个这个

39:21.770 --> 39:27.530
request那个请求就请求操作对象 对啊 然后就在这边我们接收一下

39:28.330 --> 39:29.050
request

39:30.650 --> 39:37.130
看到没有 好 然后接下来这边呢 他是不是他身上就可以绑事件啊 那我们这边呢有两个事件

39:37.690 --> 39:39.130
一个的话是request

39:40.730 --> 39:48.250
6 sense 这就成功了 对不对 成功了 还有一个是什么 还有一个的话就是

39:50.010 --> 39:59.690
是不是error 是失败了 对吧 好 然后接下来这边成功 成功的话我们这边干嘛呢 成功的话我们这边啊 我们就简单的打印一下

40:00.650 --> 40:04.410
啊 数据写入成功 数据写入

40:05.290 --> 40:07.850
成功啊 这边 这边呢 我们就打印一下

40:12.460 --> 40:15.580
打印一下啊 这边呢 就是数据写入失败

40:20.270 --> 40:26.110
ok 好 那这边呢 我们这个方法就封装好了 那封装好了之后 那接下来的话

40:26.590 --> 40:33.470
回到我们这边 回到我们这边 好 我们这边open db这边 刚才是不是调了这个来打开这个数据库

40:33.790 --> 40:39.630
对 他返回的是一个什么呢 我们回头来看一下 他返回的是一个什么 说返回的是一个promise

40:40.350 --> 40:46.430
对不对 这边promise 那promise呢 既然是promise 那我这边就可以干嘛呀 这边是不是可以点认

40:49.530 --> 40:54.090
对不对 认 调认方法 好认方法 然后他跟我会返回一个什么

40:54.890 --> 40:57.610
他这边resolve 是不是会给我返回一个db

40:58.410 --> 41:00.890
ok 好 那我这边呢 就是接受一下 db

41:03.500 --> 41:07.260
接受了之后 然后接下来的话 我这边就干嘛呢 是不是and

41:08.140 --> 41:09.500
调这个and data

41:11.420 --> 41:15.020
这个方法 对不对 and data 是我们刚才封装好的

41:16.060 --> 41:21.500
在这里 对不对 接受什么呢 接受三个参数 把这三个参数拿过来

41:23.180 --> 41:26.620
接受这三个参数 首先第一个 db 是不是就这儿传过来的db

41:27.100 --> 41:29.980
对不对 这个不用改 第二个 第二个的话 就是我们的这个

41:30.940 --> 41:34.140
呃 表的名字 那我们这边表的名字不叫stu

41:34.940 --> 41:38.460
对吧 好 然后接下来这边 这边的话 我们就是可以

41:39.580 --> 41:42.780
啊 写这个stu id

41:43.900 --> 41:46.060
比如这个学生学号 比如1号

41:47.100 --> 41:52.940
然后stu name 学生的名称啊 比如说这边的话 就是

41:53.580 --> 41:54.940
随便写一个 比如长三

41:56.300 --> 41:57.660
好 然后接下来的话 这边

41:58.620 --> 42:00.140
stu age

42:01.980 --> 42:08.300
age 好 比如说18岁 对吧 这边添加一条 那这边让我们多添加几条

42:09.020 --> 42:13.340
啊 这边的学号 2 学号 3 啊 这个呢是

42:14.940 --> 42:17.660
理事 这个是网5

42:19.260 --> 42:20.540
啊 这个的话20岁

42:21.420 --> 42:22.460
这个的话19岁

42:23.340 --> 42:25.740
ok 好 那接下来我们这边我们保存一下

42:26.700 --> 42:27.340
全部保存

42:28.620 --> 42:35.800
ok 好 这边的话来看一下 呃 这边啊 你看这边 这边呢 是不是data may be

42:36.440 --> 42:41.960
stable 就是你的这个数据有可能已经发生改变了 然后这边是不是有一个双新的按钮

42:41.960 --> 42:45.480
对不对 你点一下 看到没有 这边的数据是不是就出来了

42:45.960 --> 42:51.320
好吧 这个放到下面吧 这边这不数据就出来了 我们添加了这个三条数据

42:51.880 --> 42:55.960
啊 这边就出来了 好 那这个的话就是关于这个

42:56.680 --> 43:01.240
呃 这个插入数据啊 插入数据 ok

43:02.280 --> 43:06.520
好 然后下一个 下一个的话 我们来看这个读取数据

43:08.750 --> 43:13.390
读取数据的话 这边的话有这么几种读取方式啊 我们一个一个来看

43:13.790 --> 43:16.350
那首先第一个 第一个的话 就是通过组件

43:17.150 --> 43:21.710
来读取数据啊 这边封装了一个叫做getdata by key

43:22.270 --> 43:23.950
好 那我们这边呢 把这个写一下啊

43:24.830 --> 43:26.590
来到我们的db.js

43:28.350 --> 43:29.310
这边function

43:31.230 --> 43:33.310
getdata by key

43:33.870 --> 43:38.830
好 这个要不要接受参数呢 要啊 这边的话接受三个参数 首先仍然是你的这个db

43:39.470 --> 43:40.910
那接下来这边的是这个store

43:42.110 --> 43:44.590
storename 然后还有就是你的key

43:45.150 --> 43:45.470
主键

43:46.510 --> 43:49.630
好 这里这个是通过组件

43:52.200 --> 43:53.720
通过组件

43:54.440 --> 43:55.800
来读取

43:56.840 --> 44:00.360
数据啊 这边仍然是一样的啊 这个是数据 cool

44:01.000 --> 44:01.480
实力

44:02.520 --> 44:04.920
对象啊 这个是数据

44:05.720 --> 44:09.480
仓库 这是不是就是表 对不对 让实力对象

44:10.600 --> 44:12.520
啊 这个就是什么 这个就是你的主键

44:13.160 --> 44:14.680
啊 你的主键 ok

44:16.120 --> 44:17.320
好 然后接下来这边

44:17.880 --> 44:22.360
这边的话 首先我们仍然是返回一个什么呢 返回一个promise

44:23.160 --> 44:25.640
return一个new promise

44:29.480 --> 44:31.560
好 然后接下来这边resolve

44:32.520 --> 44:33.400
reget

44:36.620 --> 44:40.940
好 在这里面 在这里面的话 首先的话 这边根据你传进来的这个db

44:41.340 --> 44:43.980
然后我这边调什么呢 调这个twice action

44:44.540 --> 44:45.340
调这个方法

44:46.380 --> 44:50.620
调这个方法来创建一个事物啊 然后接下来这边的话 仍然是

44:51.340 --> 44:53.340
根据什么呢 根据这个storename

44:53.900 --> 44:54.780
根据你的这个

44:55.740 --> 44:58.380
数据仓库 这个表的这个实力对象

44:59.180 --> 45:04.700
就数据仓库的这个对象来创建这个事物 创建了这个事物之后 然后接下来的话 这边

45:06.380 --> 45:08.620
点什么呢 点这个object

45:09.420 --> 45:09.820
store

45:10.620 --> 45:12.300
传入什么呢 传入你的这个

45:13.180 --> 45:17.660
数据仓库这个对象 把它传进去 把这个表打开

45:18.300 --> 45:23.260
打开之后 然后接下来的话 下面什么呢 下面的话 这边的话掉

45:23.900 --> 45:24.540
get方法

45:25.740 --> 45:29.740
get的方法 get的方法 然后传入什么呢 传入你的这个key

45:30.380 --> 45:31.980
看到没有 传入你的key

45:33.420 --> 45:38.780
ok 好 大家整个这个的话 它会得到一个什么 是不是得到一个request对象

45:39.580 --> 45:41.340
啊 所以这边的话 q u est

45:42.060 --> 45:47.020
存储一下 存储这个request 好 大家下面 下面的话 是不是就是监听

45:47.580 --> 45:50.380
对不对 Request.on

45:51.100 --> 45:51.820
setsence

45:54.730 --> 45:58.410
啊 成功了 成功了之后 然后接下来的话 这边接收一下

45:59.530 --> 46:02.890
接收一下这边 我看一下

46:04.890 --> 46:11.850
啊 这边这边的话 事件对象可以不要 因为你能拿到的结果直接就在哪呢 直接在这个request里面

46:12.090 --> 46:13.770
他有一个result

46:14.410 --> 46:16.170
这个就是他查询到的这个

46:17.050 --> 46:21.370
获取到的这个结果啊 把这个结果干嘛呢 把这个结果resolve出去

46:23.660 --> 46:26.300
对不对 我说不出去啊 然后接下这边

46:28.140 --> 46:30.300
request.on这个arrow

46:33.080 --> 46:37.640
当失败的时候 失败的时候 你这边的话 你就打印一下啊 数据查询失败

46:40.010 --> 46:41.530
数据查询

46:42.490 --> 46:42.890
失败

46:43.610 --> 46:46.730
ok 好 那我们整个这个方法就封装好了

46:47.290 --> 46:50.090
好 封装好了之后 然后接下来回到我们这边

46:50.730 --> 46:53.850
回到我们这边 这边的话 让我们添加数据 我们是不是就可以不添加了

46:54.250 --> 46:59.450
把这个注射掉 因为我们现在数据库已经有数据了 我们就掉哪个呢 就掉这个方法

47:00.090 --> 47:02.090
对不对 直接把这块复制过来

47:04.010 --> 47:09.050
掉这个方法 这个方法首先db是不是这里 这个db 然后加这里 这里的话是不是应该是

47:10.010 --> 47:10.570
stu

47:11.450 --> 47:14.570
对吧 就这张表 然后既然我们要查谁呢 我们要查这个

47:15.370 --> 47:18.330
学号为2的 然后整个这个返回一个什么

47:18.810 --> 47:22.970
整个这个返回一个promise 所以我们这边干嘛呢 是不 继续return

47:23.690 --> 47:25.930
对不对 return了之后 然后接下来啊 这边任

47:27.530 --> 47:34.360
任啊 任里面 然后我们这边的话是不是resolve了整个这个结果

47:34.920 --> 47:39.480
对不对 整个这个结果 然后接下这边接收一下stuinfer

47:39.800 --> 47:42.360
好 那在这边打印一下console

47:43.160 --> 47:46.600
denlog 这个stuinfer

47:47.640 --> 47:49.800
ok 好 让大家这边保存一下

47:52.040 --> 47:55.400
保存了之后过来揉一眼啊 应该是在这里是吧

47:56.200 --> 48:01.480
拿到没有 是不是就拿到了 对不对啊 那我们这边呢 比如说把这个改成

48:03.560 --> 48:04.600
把这个改成3

48:05.720 --> 48:07.000
改成3 保存

48:07.880 --> 48:13.320
是不是就拿到了 对不对 哎 就拿到了啊 这个的话就是通过组件

48:13.960 --> 48:15.720
来进行一个查询操作

48:17.000 --> 48:19.240
好 那我如果我要查所有呢

48:19.800 --> 48:23.240
如果我要查所有 因为我们刚才是根据这个组件是不是查某一条

48:23.880 --> 48:29.800
对不对 那我如果要查所有 要查所有的话 它提供了一个什么呢 提供了一个叫做get all的方法

48:30.440 --> 48:33.960
就可以直接查所有了 那我们这边呢 我们把它改一下嘛

48:35.080 --> 48:40.200
把这改一下啊 或者我们再封装一个方法吗 直接复制一份

48:41.560 --> 48:44.920
再封装一个方法 这个的话叫做get data

48:45.960 --> 48:49.480
get all data嘛 叫做all data

48:50.440 --> 48:52.760
然后就要这里 这里的话就是get all

48:53.880 --> 48:57.800
看了没有 那这个key是不是就不要了 对不对 那这边也不需要接受什么

48:57.800 --> 49:00.840
是不需要接受这个key了 对不对 这个参数就不需要了

49:02.040 --> 49:06.920
好 然后接下来其他就不变啊 其他都不变 这边就直接调get all方法

49:07.000 --> 49:09.400
那查询成功之后 它会触发这个

49:09.800 --> 49:12.360
这个设施 然后把这个结果是返回出去就可以了

49:12.920 --> 49:14.440
对不对 好 那我们这边

49:15.080 --> 49:17.560
这边的话你就可以了 我把这个 我

49:18.520 --> 49:20.520
我不删啊 我这边的话我把它注释掉

49:22.120 --> 49:24.840
我这边给你打个注释 这个是添加数据

49:26.280 --> 49:29.080
调用添加数据

49:30.040 --> 49:30.440
方法

49:31.240 --> 49:34.840
好 然后接下来这里 这里的话是调用

49:35.720 --> 49:37.560
根据组件

49:38.280 --> 49:40.200
来查询的

49:40.920 --> 49:41.320
方法

49:42.280 --> 49:43.720
然后加这边 这边的话是

49:45.080 --> 49:46.120
查询所有数据

49:46.920 --> 49:48.600
查询所有

49:49.400 --> 49:50.600
数据 okay

49:50.600 --> 49:54.440
好 那这里的话就是应该是get all 那这个是不是就不需要了

49:55.320 --> 49:58.520
对不对 好 然后加这边我们来保存来看一下

50:00.680 --> 50:02.200
这里啊 全部保存

50:02.920 --> 50:03.240
走

50:04.440 --> 50:07.880
是不是拿到了 对不对 一个数组 你把这个数组你把它展开

50:08.600 --> 50:09.080
是不 okay 的

50:09.800 --> 50:11.880
对不对 全部就都拿到了

50:13.480 --> 50:14.520
这是这个

50:16.280 --> 50:17.400
好 然后下一个

50:18.360 --> 50:20.520
下一个的话是通过这个指针

50:21.240 --> 50:23.960
这个的话我要说一下 这个是什么意思

50:25.640 --> 50:27.400
就是这里

50:29.240 --> 50:35.160
这里的话我写的是邮标 那个邮标呢其实就是类似于一个这个指针

50:35.160 --> 50:37.160
好 那回到我们的这个重要概念

50:37.320 --> 50:40.680
回到这边 这个指针 IDB cursor

50:41.560 --> 50:45.960
cursor 是不是其实就是手指的意思啊 对不对 IDB cursor对象

50:45.960 --> 50:49.720
它就是一个指针 那它是干嘛的呢 我们来看一下这边指针

50:50.520 --> 50:54.200
邮标的话是index db数据库新的这个概念

50:54.840 --> 50:57.720
大家可以把它想象成一个什么呢 想象成一个指针

50:58.520 --> 51:01.960
学过这个C元的同学都知道有这个指针这个东西

51:02.520 --> 51:04.120
好 然后接下来我们要查询

51:04.520 --> 51:08.600
满足某一条件的所有数据时就需要用到这个邮标

51:09.000 --> 51:12.440
让这个邮标一行一行的往下走

51:12.920 --> 51:15.320
它没走一行就会给我返回一行数据

51:15.320 --> 51:19.240
直到什么呢 直到它走到下一条数据是空的时候

51:19.240 --> 51:22.760
那就说明没有了啊 这个什么意思 这个我给你画个图

51:23.400 --> 51:24.280
就是这个样子的

51:26.360 --> 51:30.280
这个样子的 就是我们的数据库里面的数据就类似于什么呢

51:30.360 --> 51:31.640
类似于在这么一个

51:33.480 --> 51:34.440
在比如说这里

51:35.880 --> 51:38.920
这里啊 然后有很多个格子

51:39.960 --> 51:43.320
就是有点类似于数组 对吧 有点类似于数组

51:43.320 --> 51:46.760
这里有很多个格子啊 这个的话存的是1 这个存的是

51:47.320 --> 51:51.080
2 这个存的是这个3 这个存的是4

51:51.800 --> 51:56.680
然后这个存的是5 OK 好 然后接下来的话下面有一个指针

51:57.640 --> 52:02.200
看到没有 有一个指针 这个指针的话就指向这一块数据了

52:02.200 --> 52:03.480
就指向这一块数据

52:04.200 --> 52:07.400
然后接下来指完了之后 它就会把这个数据给我们返回过来

52:07.880 --> 52:11.480
返回过来之后 然后接下来这个这个指针它就会干嘛呢

52:11.480 --> 52:14.680
它就会往右边移动 它就移动到哪里呢

52:14.680 --> 52:15.720
它就移动到这了

52:16.920 --> 52:19.320
它就移动到这了 这的话就没有了

52:19.880 --> 52:22.440
这里的话这个这个指针就没有了 它就移动到这

52:22.440 --> 52:24.440
移动到这 这的话是不是就指向这个数据

52:25.320 --> 52:27.560
对不对 那指向这个数据它就把这个数据

52:28.120 --> 52:31.640
给我们返回回来 直到什么呢 直到比如说最后最后的话

52:31.640 --> 52:34.280
它是不是应该是指到这个数据 把这个数据返回来

52:34.280 --> 52:35.640
然后它再往右边走

52:36.200 --> 52:41.160
就这个指针 它指到这嘛 对不对 指到这 指到这之后再往右边走

52:41.160 --> 52:42.200
再往右边走是不是

52:42.760 --> 52:43.400
跑到这来了

52:44.600 --> 52:47.240
跑到这来的话 到这的话是不是已经没有东西了

52:47.800 --> 52:49.240
对不对 这边的话是空的

52:49.240 --> 52:52.200
好 那最终的话它这里就返回的是一个空的

