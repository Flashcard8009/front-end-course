WEBVTT

00:01.010 --> 00:08.170
这些课的话 我们来看一下 通过这个websocket来实现这个跨标签页的通信

00:08.690 --> 00:15.610
websocket的话 它是在2008年诞生 2011年成为这个国际标准

00:15.870 --> 00:18.170
然后现在所有浏览器都已经支持了

00:18.430 --> 00:20.970
那这个websocket 它最大的特点是什么呢

00:21.230 --> 00:28.150
它最大的特点就是服务器可以主动的向客户端推送这个数据

00:28.630 --> 00:32.310
而以前的话 这个是做不到的 以前的话 比如说我想实时的

00:32.710 --> 00:38.070
就是看到一些数据的更新 比如说最常见的就是比如股票

00:38.590 --> 00:41.910
对吧 股票的话 我要看到那个股票的它的那个市值

00:42.430 --> 00:48.590
或者说那个k线图 实时的这个更新 那以前得干嘛呢 以前的话得通过轮返的方式

00:49.110 --> 00:55.110
我一遍一遍的去发请求 请求服务器 然后服务器把这个更新了的值

00:55.470 --> 01:03.270
然后返还回来 就像我们前面一样 我们前面介绍那个跨标签页通信的时候 好几种方案是不是都是通过这种轮返的方式

01:03.870 --> 01:07.150
对不对啊 那后面的话有了这个websocket

01:07.670 --> 01:11.430
有了websocket的时候 它最大的特点就是 它可以主动的

01:12.150 --> 01:13.830
推送数据给客户端

01:14.710 --> 01:19.230
明白吧啊 这个websocket的话 后面在讲这个网络的时候

01:19.750 --> 01:24.670
袁老师在讲网络的时候 讲了这个websocket的 这个的话 大家可以去看一看

01:25.230 --> 01:30.270
那我们这边呢 就直接看一下这个websocket 如何实现跨标签页的这个通信

01:31.030 --> 01:34.110
好吧 好 我这边的话 首先有一个项目文件加

01:35.110 --> 01:40.150
好 这边呢 我们需要装一个这个裤啊 我们这边先把我们的项目目录初始化一下

01:41.870 --> 01:43.030
好 这边npm

01:43.670 --> 01:44.710
inlite-y

01:45.470 --> 01:49.950
把它初始化一下 初始化完了之后 然后接下来我们安装一个

01:50.350 --> 01:52.990
叫做ws 就是websocket

01:53.630 --> 01:57.830
它的一个简写啊 这个神pm上面的一个包啊 把这个装一下

01:59.230 --> 02:04.110
啊 这个不大啊 一会就装好了 好 装完了之后 然后接下来下一步

02:04.670 --> 02:09.710
下一步的话 我们就需要创建一个服务器文件啊 这边的server

02:10.710 --> 02:17.030
点js 服务器文件啊 在这个服务器文件里面 我们干嘛呢 我们创建一个服务器

02:17.950 --> 02:20.390
创建一个服务器之后 然后接下来的话

02:20.910 --> 02:29.630
回头那个页面发送消息 发送给这个服务器 那这个服务器又把消息干嘛呢 推送给其他页面

02:30.190 --> 02:32.790
推送给其他页面啊 我们这边的话

02:33.510 --> 02:37.670
新建两个文件 一个是index.html

02:38.550 --> 02:42.750
啊 另外一个的话是index2.html

02:43.310 --> 02:50.590
好 把这两个页面创建好 创建好之后 然后接下来的话 一会我们这个页面这个页面的话 发这个

02:51.270 --> 02:54.270
数据就会发送给这个server.js

02:55.150 --> 02:59.950
啊 然后这个server.js的话 它就会把数据推送给什么呢 推送给其他的页面

03:00.710 --> 03:04.310
ok 好 那我们这边呢 我们来开始 来开始来写

03:05.510 --> 03:08.990
首先的话 这边 这边的话 哇一个

03:09.270 --> 03:11.270
vabosocket

03:13.840 --> 03:15.200
vabosocketserver

03:17.040 --> 03:23.550
但于一个requirews.server

03:26.740 --> 03:29.260
啊 先创建一个这个vabosocketserver类型

03:31.140 --> 03:40.550
首先 首先获取到一个这个vabosocket

03:41.910 --> 03:44.750
vabosocketserver实力

03:47.990 --> 03:55.030
ok 好 获取到之后 然后接下来的话 指定监听的这个端口号 这边应该是new

03:55.750 --> 04:02.870
new 一个这个vabosocketserver 这个的话就是创建这个vabosocket这个服务器

04:04.510 --> 04:07.790
创建vabosocket

04:09.790 --> 04:10.270
服务器

04:12.110 --> 04:15.990
啊 也就是你这边拿出来的是一个什么 是一个类 是吧 应该是获取到一个这个类

04:16.910 --> 04:24.310
好 那接下来这边把它new一下 new一下之后 然后接下来这边 传入一个对象 这边的话 这个port

04:26.390 --> 04:30.590
port的话 给一个你随便给啊 给一个比如说30000

04:31.470 --> 04:37.550
啊 给个3000 好 然后接下来的话 这边保存一下服务器的实力wss

04:39.070 --> 04:44.910
保存一下 好 完事之后 然后接下来的话 我们这边创建一个client

04:46.030 --> 04:50.950
等于一个数组 这个数组用来干什么呢 这个数组用来保存

04:52.270 --> 04:57.670
该数组用于保存所有的

04:59.390 --> 05:00.710
所有的这个客户端

05:02.110 --> 05:03.110
客户端

05:04.870 --> 05:07.750
客户端连接实力

05:09.860 --> 05:15.780
啊 因为我们一会儿是不是会有各种各样的客户端 对不对 这边有两个页面 这个页面会去连接这个服务器

05:16.100 --> 05:23.420
这个页面是不是也会去连接这个服务器 对不对 那没建立一个连接 它就会有一个连接实力 那我们就把这个连接实力

05:24.180 --> 05:29.340
放到这个数组里面 ok 好 然后接下来的话 下一步

05:30.140 --> 05:31.740
下一步的话wss

05:32.460 --> 05:37.500
然后接下来我给他绑定一个什么事件呢 绑定一个collection时间

05:39.100 --> 05:43.020
啊 连接 连接了之后 然后接下来的话 这边function

05:44.020 --> 05:45.700
当这个客户端

05:46.500 --> 05:53.980
连接上我们的这个webosocket这个server的时候 就会自动的触发collection时间 我这边写一下啊

05:54.700 --> 06:00.420
当客户端连接上webosocket

06:02.620 --> 06:05.620
webosocket这个服务器的时候

06:06.460 --> 06:09.420
然后就会自动

06:10.700 --> 06:16.740
就会自动创建什么的 不是自动就是就会触发

06:18.020 --> 06:19.700
触发collection

06:21.500 --> 06:25.780
时间 然后该客户端的实力

06:27.780 --> 06:32.900
实力就会传入此回调

06:33.900 --> 06:39.460
函数 ok 好 那我们这边呢 我们就来接受一下 这边collent

06:40.540 --> 06:46.660
接受 好 接受了之后 然后接下来我们把他干嘛呢 把他保存到我们的这个数组里面

06:47.860 --> 06:48.460
点push

06:49.980 --> 06:58.540
collent 啊 这边的话就是将当前客户端连接实力

07:01.010 --> 07:05.410
然后保存到 保存到数组里面

07:07.130 --> 07:11.610
看到没有 好 保存到数组里面之后 然后接下来的话 这边打印一下

07:12.330 --> 07:13.930
console.log

07:16.090 --> 07:18.450
就当前用这个吧

07:20.530 --> 07:25.730
当前有多少个呢 这边就是应该是client

07:26.730 --> 07:33.530
他是个数组 对吧 然后点论是个客户端 客户端

07:34.570 --> 07:42.360
在线 ok 这是第一步 好 然后接下来 接下来的话 我给这个

07:43.840 --> 07:52.400
client client 是不是这个客户端的这个连接实力 对不对 好 然后这样我给每一个客户端的连接实力

07:53.400 --> 08:07.460
给客户端给传入进来的客户端连接实力 实力

08:08.580 --> 08:18.980
绑定一个什么呢 绑定一个message世界 绑定一个message世界 那回头的话 我这边的话 我这个微博socket

08:19.540 --> 08:28.180
在主动推送数据的时候 那客户端那边 我监听这个message世界 是不就可以接受到这个数据

08:29.260 --> 08:32.060
对不对啊 好 那我们这边给他绑定一下

08:33.740 --> 08:34.420
这边的话啊

08:35.660 --> 08:36.140
message

08:37.580 --> 08:41.380
绑定个message世界啊 然后接下来的话 这边function

08:43.340 --> 08:45.420
好 然后接下来这边的话 msg

08:46.460 --> 08:50.300
就是收到的这个消息 好 然后接下来的话 这边console

08:51.580 --> 08:52.140
点log

08:53.140 --> 08:54.820
收到的消息

08:56.620 --> 08:58.620
收到的消息

09:00.140 --> 09:00.300
为

09:02.720 --> 09:03.000
然后

09:04.560 --> 09:07.520
这边的话加上一个messg

09:09.720 --> 09:11.920
ok 好 然后接下来的话 这边

09:12.680 --> 09:19.920
收到了这个消息之后 然后下一步 下一步的话 我要把这个消息推送给其他所有的这个客户端

09:20.600 --> 09:21.800
啊 接下来

09:23.560 --> 09:24.360
接下来

09:25.240 --> 09:36.200
需要将什么呢 将接收到的消息推送给其他所有的

09:37.360 --> 09:37.800
客户端

09:38.840 --> 09:43.360
对不对 好 那我接下来我这边去干嘛呢 我这边就通过for我来进行便利

09:44.120 --> 09:45.000
挖一个c

09:45.560 --> 09:47.040
all of这个client

09:49.860 --> 09:53.660
ok 好 然后接下来的话 这边这边的话 你要把自己排除一下

09:54.100 --> 09:59.420
说这边的话 衣服c不等于不等于这个client

10:00.660 --> 10:01.140
client

10:02.420 --> 10:07.660
啊 不等于这client 因为client是当前传入的这个对不对 如果不等于这个client

10:08.340 --> 10:14.840
那这边的话 我们就干嘛呢 调用调用这个剩的方法

10:16.760 --> 10:25.470
剩的方法 好把这个数据把它传递过去 对不对 这边把它转一下 图十准

10:26.150 --> 10:27.950
把它转一下 把它传递过去

10:28.710 --> 10:34.430
ok 好 这个的话就是这个message实践哈 我们这边让我们再把它看一下

10:36.190 --> 10:41.910
好 这边再来回顾一下哈 就是我们这边的话 是不是他会传入一个当前客户端的这个连接实力

10:42.470 --> 10:47.830
对不对 然后接下来我给当前客户端连接实力绑定了一个什么呢 绑定了一个message事情

10:48.350 --> 10:52.230
那回转我这个客户端 客户端的话可以像什么呢 像服务器

10:52.630 --> 10:58.390
像我们的服务器是发送数据 对不对 发送数据 发送数据的话就会触发这个message实践

10:59.710 --> 11:03.870
看到没有 触发message实践 然后就拿到你这个客户端 比如这个客户端

11:04.230 --> 11:11.990
传的数据 然后接下来过来的话 我通过触发message实践 我就拿到了 拿到之后 然后接下来我去便利所有的

11:12.670 --> 11:17.350
这个客户端连接 因为全部都是存在这个client数据里面的 对不对

11:17.910 --> 11:25.790
然后去便利 便利的话 然后把自己排除 然后接下来给其他的这个客户端连接实力进行一个发送这个数据

11:26.350 --> 11:27.950
就把这个数据推送过去了

11:28.910 --> 11:32.830
看到没有 就推送过去了 这边就是这个message实践

11:33.350 --> 11:39.230
好 然后接下来 这边的话 然后还绑定了一个什么呢 还绑定了一个这个client

11:40.990 --> 11:42.310
client.on

11:43.310 --> 11:45.310
绑定了一个client实践

11:46.150 --> 11:48.830
好 然后接下来 当这个用户

11:49.670 --> 11:52.710
用户关闭的时候 比如他把标签页关闭了

11:53.270 --> 11:58.190
关闭了之后 然后接下来我就应该把这个客户端连接从这个数据里面干嘛呀

11:58.710 --> 12:00.790
说从这个数据里面 是不是删除掉

12:01.670 --> 12:07.550
对不对 好 那接下来我首先我这边找一下 把他的下标找到 那这边那就是client

12:08.510 --> 12:12.510
点index off 然后这个this

12:13.910 --> 12:16.430
对不对 这边呢 首先把这个client

12:16.910 --> 12:21.510
client是当前的这个连接 然后找到他在client里面的这个下标

12:22.110 --> 12:24.590
然后接下来干嘛呢 接下来从这个client

12:25.430 --> 12:27.830
里面 然后通过这个splice

12:28.670 --> 12:29.590
把它删除掉

12:31.550 --> 12:34.990
看到没有 把它删除掉 删除掉之后 然后接下来这边

12:35.510 --> 12:37.390
console.log

12:38.110 --> 12:43.190
啊 当前的话 有多少个在线啊 就这句话 就重新显示一下

12:43.870 --> 12:45.550
当前有多少个在线

12:46.830 --> 12:50.670
看到没有啊 那我们这个服务器就写好了 这边加一句话

12:51.670 --> 12:56.990
这边加一句console.log 啊 这边的话 微波socket

12:58.590 --> 13:00.710
微波socket服务器

13:01.630 --> 13:03.230
已经启动

13:06.220 --> 13:13.980
ok 这服务器就写好了啊 好 那我们这边我们保存一下 保存了之后 然后接下来这边 把这个中端打开

13:15.580 --> 13:22.080
打开之后 然后接下来你这边 你可以运行一下 这边的load

13:23.040 --> 13:24.440
server.js

13:25.680 --> 13:28.080
看到没有 微波socket的服务器启动

13:28.720 --> 13:32.280
他就启动了 好 启动之后 然后接下来的话 在这边

13:33.880 --> 13:35.720
index这边 好 我们来写这边

13:36.200 --> 13:39.520
这边的话就负责干嘛呢 这边就负责

13:40.800 --> 13:44.040
说发送消息 对不对 好 那我们这边

13:45.000 --> 13:45.960
这个是我们的e免e

13:49.510 --> 13:51.550
这个是e免e

13:52.390 --> 13:54.990
好 然后这里的话 我们首先写一个input

13:58.960 --> 13:59.320
text

14:00.880 --> 14:03.840
然后他有个id id的话是msg

14:04.880 --> 14:09.240
ok 这是输入这个内容的 好 然后接下来这边button

14:09.800 --> 14:10.800
button的话有个id

14:11.560 --> 14:12.000
send

14:12.960 --> 14:16.240
好 这边是发送信息

14:17.600 --> 14:21.160
ok 好 然后接下来这边script 那首先第一步

14:22.440 --> 14:26.880
建立什么呢 建立微波socket的这个连接

14:29.950 --> 14:36.710
建立微波socket的连接 那怎么建立呢 这边挖一个w s等于一个什么呢 new

14:37.750 --> 14:38.470
微波socket

14:40.630 --> 14:40.950
new

14:40.950 --> 14:41.590
微波

14:42.590 --> 14:43.830
socket 好

14:45.590 --> 14:51.430
这里的话new了这个微波socket 然后接下来的话 这边的话 需要传入你这个服务器的这个地址

14:51.990 --> 14:59.310
啊 你注意这边的话 就不再是http了 因为我们这边不是使用了http协议 而是微波socket

14:59.670 --> 15:06.590
微波socket那是w s啊 冒号 写杠写杠 好 然后我们这边是localhost

15:07.190 --> 15:08.390
冒号 我们刚才是多少

15:08.790 --> 15:13.550
刚才端口是不是3000 对不对 所以这边是3000

15:14.430 --> 15:20.270
ok 好 这边就创建了一个客户端和服务器端的微波socket连接

15:21.030 --> 15:23.790
ok 好 然后接下来我们给这个剩的

15:25.070 --> 15:28.150
我们这边的话剩的 首先获取一下动物节点

15:29.150 --> 15:31.110
等于一个cary selector

15:32.110 --> 15:33.190
然后警号

15:34.710 --> 15:42.880
剩的 好 然后我们给这个剩的绑定一个点击事件 等于一个function

15:44.800 --> 15:49.160
啊 好 当这个点击的时候 然后接下来我们这边判断一下 if

15:50.360 --> 15:54.320
好吧 这个msg也拿一下 这边msg

15:56.160 --> 15:59.400
msg 啊 拿一下 判断一下 if

16:00.000 --> 16:04.760
msg 点这个value 然后接下来点这个treme

16:06.900 --> 16:07.820
然后不等于空

16:09.220 --> 16:12.460
那说明是不是用户输入内容 好 输入内容之后

16:13.300 --> 16:16.380
那我这边就干嘛呢 这边的w s点剩的

16:17.780 --> 16:20.660
调剩的方法 然后接下来把这个msg

16:22.260 --> 16:25.740
点这个value 然后把它去一下左右的空格

16:26.660 --> 16:32.380
把它传递过去 传递过去也就是说用户输入的内容就会传递到服务旗带

16:33.100 --> 16:38.060
服务旗带怎么知道有东西过来了 你这边是不是刚才绑定了一个message事件

16:38.980 --> 16:43.860
对不对 你那边一发消息 我这边的话message事件就会触发

16:44.500 --> 16:46.740
触发之后 然后这样我这边就会收到你

16:47.460 --> 16:52.220
发送过来的消息 然后接下来我就会推送给其他的客户转

16:52.700 --> 16:57.260
就除开你自己的这个连接 推送给其他的客户转连接

16:57.900 --> 17:02.780
ok 这是这个发送 除此之外的话 这边我还绑定了一个

17:04.460 --> 17:06.700
window点这个on before

17:07.940 --> 17:13.660
on这个load 就是这个你窗口关闭的时候 或者刷新的时候

17:14.540 --> 17:19.060
好 然后接下来这边干嘛呢 这边的话把这个vivo socket的连接关闭掉

17:19.900 --> 17:21.180
掉这个close事件

17:23.020 --> 17:25.220
啊 这边就是关闭窗口的时候

17:26.100 --> 17:31.460
关闭窗口或者窗口刷新的时候

17:32.380 --> 17:35.420
然后要干嘛呢 要关闭

17:36.740 --> 17:40.580
当前的这个vivo socket

17:41.980 --> 17:49.660
连接 对不对 把这个vivo socket的连接把它关闭掉 好这个的话就是我们第一个index.html

17:50.300 --> 17:51.700
好 然后接下来的话在这里

17:53.220 --> 17:58.700
在这边啊 这边的话 然后一会我们这边在index 这边我们发送消息

17:59.220 --> 18:03.860
消息的话会到这个服务器 那服务器的话会把消息就推送给index2

18:04.700 --> 18:07.740
对不对啊 那我们这边把index2 我把它写一下

18:09.620 --> 18:11.780
啊 这里这里的话就直接script

18:14.380 --> 18:18.900
script 然后这样首先啊 很多和这边是一样的啊 首先的话这边的话

18:19.500 --> 18:23.580
建立vivo socket的连接 这个的话是一样的 我就直接复制过来

18:24.980 --> 18:33.220
对吧 先建立连接 建立了连接之后 然后先让我这边挖一个count等于一啊 这个的话用于技术

18:34.260 --> 18:36.060
用于技术

18:37.780 --> 18:46.140
用于技术 好 完事之后 然后接下这边w s 他有一个什么呢 他有一个这个open方法 和open这个事件

18:47.260 --> 18:50.100
当你这边建立了连接之后 他就会触发这个

18:50.780 --> 18:53.220
open时间 好在这个open时间里面

18:53.980 --> 18:54.540
我们干嘛呢

18:55.940 --> 19:03.100
好 这边的话 时间对象放在这 好 然后在这里的话 我们写一个message

19:04.460 --> 19:05.460
message时间

19:08.210 --> 19:13.130
等于一个function 这边event其实没有必要了 这边event

19:14.850 --> 19:17.410
ok 这个message什么时候会触发

19:18.050 --> 19:24.290
就是你这边server的时候 你这边是不是在发送啊 对不对 你这边在剩的发送

19:24.770 --> 19:30.290
剩的发送的话 那接下来index2这边 这边的话就会触发这个message这个时间

19:30.970 --> 19:37.210
ok 好 触发了之后 然后接下来这边就可以拿到数据 当我这边为了更好看一点 我这边创建一个多么节点

19:38.450 --> 19:41.810
等于一个document点create

19:43.690 --> 19:48.650
creator element 创建一个什么呢 创建一个p元素

19:49.650 --> 19:51.490
啊 然后接下来这边op

19:52.970 --> 19:55.930
op就等于一个什么的op.inner.html

19:57.250 --> 19:59.690
等于一个啊 这是

20:01.090 --> 20:02.690
啊 就是这是第几次

20:03.330 --> 20:03.850
第

20:05.770 --> 20:06.250
count

20:07.450 --> 20:07.810
是

20:09.910 --> 20:12.510
接收到消息

20:13.070 --> 20:17.910
啊 然后消息的内容是什么呢 消息的内容就是这边的话event

20:18.590 --> 20:19.950
点data

20:21.030 --> 20:22.870
对吧 然后接下来把这个

20:23.950 --> 20:28.190
把这个p 就是这个段落 把它添加到玻璃上面

20:28.750 --> 20:29.950
up 喬的

20:31.230 --> 20:35.270
把它添加上去 啊 添加过去之后 然后下这边的话 count

20:36.030 --> 20:36.350
加加

20:37.870 --> 20:45.950
看到没有 好完事之后 然后接下来你也要再干嘛呢 也要在这个关闭窗口或者刷新窗口的时候 把这个链接

20:46.270 --> 20:50.350
把它关闭掉啊 所以这边要把这个代码复制过来

20:51.150 --> 20:57.910
ok 好 这边的话两个客户端连接 我们就写好了 写好之后 然后接下来我们这边啊 保存

20:58.950 --> 21:05.840
保存了之后 然后接下来我们这边我们来看一下啊 嗯 这里 这里的话首先

21:07.240 --> 21:08.880
open with sleeve server 打开

21:10.320 --> 21:15.880
好 这边一打开 你看这边 是不是当前有一个客户端在线啊 把这个放到这里来

21:16.480 --> 21:22.040
所以当前有一个客户端在线 对不对 好 那接下来我们这边打开第二个链接

21:25.240 --> 21:35.480
ok 你看 当前是不是有两个客户端在线 对不对 也就是两个页面 这个页面和这个页面都连接上了 什么呢 都连接上了 我们的这个

21:35.920 --> 21:37.160
vivo kit 服务器

21:38.160 --> 21:41.920
ok 好 然后接下来我这边 这边的话我输了个 你好

21:42.640 --> 21:45.400
当我点击发送信息的时候

21:46.240 --> 21:52.400
点击发送信息的时候 这边是吧 在这里 对不对 他这边呢 就会向服务器发送这个信息

21:53.040 --> 21:57.760
发送这个信息的话 然后接下来的话 这边 你给这个当前的客户端

21:58.240 --> 22:02.000
连接 所以绑了message 时间 他是不是就会收到你的这个信息

22:02.560 --> 22:07.920
收到你的信息 然后现在他就会把这个信息推送给 是不是其他的客户端连接

22:08.880 --> 22:15.040
对不对 就除开自己以外的 其他的客户端连接 让我们这边的话 这个index2

22:15.680 --> 22:23.720
我这边的话 就通过这个message 绑定了message时间 你服务器给我发消息的时候 我这边是不是就会触发message时间

22:24.280 --> 22:27.800
对不对 我就收到了 我就收到了 好 那我们这边 我来试一下

22:29.560 --> 22:30.440
这边 把他拿过来

22:32.560 --> 22:34.640
好 然后接下这边 点击发送

22:36.360 --> 22:37.440
看到没有 这里

22:38.640 --> 22:42.680
是吧 第一次收到 你好 对不对 然后接下我这边 好喽

22:43.600 --> 22:54.880
走 第二次收到 是吧 好喽 对不对 123 123发送 收到123 123对不对 这边 这边也打印了 这边打印是因为我们

22:56.120 --> 22:58.080
呃 在哪个位置应该是打印了的

22:58.840 --> 23:06.320
啊 这里 我们在这里是不是打印的 对不对 所以这里也有 好 然后接下来 我一旦我把这个客户端连接 我比如说刷新

23:07.320 --> 23:14.840
你看 当前有一个客户端在线 当前有两个客户端在线 啊 为什么就是这边又又显示了一个又显示了两个

23:15.200 --> 23:16.920
因为当我刷新的时候 他是不是要断开

23:18.000 --> 23:20.480
对不对 他要断开断开的话 他就会触发这个cros

23:21.720 --> 23:23.120
然后接下来 这边他就会从这个

23:23.720 --> 23:27.200
数组里面 是吧 把当前的这个页面的客户端连接把它删除掉

23:28.240 --> 23:33.920
对不对 所以他就只剩一个了 那后面的话 因为你是刷新 刷新的话 他相当于重新打开了这个页面

23:34.120 --> 23:36.240
那接下来 他又会干嘛呀 是不是又会

23:38.040 --> 23:39.440
是不是又会重新建立连接

23:40.240 --> 23:42.800
对不对 建立连接的话 那接下来 这边是不是又会触发

23:43.200 --> 23:47.400
connexing时间 对不对 所以这边呢 就是有两个客户端在线

23:48.240 --> 23:51.920
可能没有 你这边可以就是输入 这边是一样的

23:52.560 --> 23:55.040
对不对 好 那你这边呢 你如果把它关闭掉

23:55.760 --> 23:57.280
比如我现在呢 我把这个页面关闭了

23:57.960 --> 24:00.600
关闭了 你看这边 是不是就只有一个客户端了

24:01.520 --> 24:03.320
对不对 就只有这一个客户端连接了

24:04.400 --> 24:11.440
看了没有 这个的话 就是一个websocket的这个势力 我们通过这个websocket

24:12.120 --> 24:16.840
实现了这个跨页面的 就是跨标签页的通信

24:17.720 --> 24:23.280
看了没有 相当有意思 回头的话 这个你用这个websocket可以做一个这个聊天室

24:24.160 --> 24:29.000
对不对 两个标签页之间 然后进行一个这个聊天 这完全可以做

24:29.920 --> 24:31.520
对不对 完全可以做

24:32.240 --> 24:39.800
好 这就是关于这个如何使用websocket来实现跨标签页的通信

24:41.080 --> 24:45.880
好 那至此的话 我们整个这个跨标签页的这个通信就给大家介绍完了

24:46.360 --> 24:51.360
我们这边回顾一下 首先呢 我们第一节课介绍了就是什么是跨标签页通信

24:51.800 --> 24:56.680
简单介绍了一下 然后面的话是不是就是这边 每一种方案 我们都写了一个demo

24:57.680 --> 25:07.240
对不对 都写了个demo 当我一开始讲的时候 我就说过 我们在写这个 就是写这个demo的时候 我们不会针对这个知识点本身

25:07.800 --> 25:12.600
进行这个太深入的这个介绍 你如果比如说你要看这个websocket

25:13.120 --> 25:18.360
相关的这个课程 那你就是应该是 就是你想了解这个websocket

25:18.960 --> 25:23.120
相关的这个技术 那你应该去看这个websocket 相关的这个课程

25:24.040 --> 25:26.080
对不对 你想了解这个 比如说

25:27.400 --> 25:32.680
比如说这个survise walker 那你就应该去看这个survise walker 相关的这个课程

25:33.200 --> 25:39.960
我们这边的话 不做这个技术 这个技术本身的具体介绍 我们只是使用这个技术来实现这个

25:40.440 --> 25:41.800
跨标签页的这个通信

25:42.760 --> 25:46.880
好吧 ok 好 这些课的话就先到这里 好 再见

