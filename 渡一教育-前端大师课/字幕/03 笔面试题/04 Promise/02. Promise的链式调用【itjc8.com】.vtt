WEBVTT

00:00.000 --> 00:03.000
这些课呢咱们来学习Promise的链式处理

00:03.000 --> 00:08.000
Promise的链式处理呢应该算是Promise里边最复杂的一块内容了

00:08.000 --> 00:13.000
这一块内容呢也是面试题考的比较多的部分

00:13.000 --> 00:15.000
面试题如果说考Promise

00:15.000 --> 00:18.000
基本上一定是可以考这个Promise

00:18.000 --> 00:24.000
如果说考Promise的话考的一些比试题最多的也就是这个链式处理

00:24.000 --> 00:26.000
链式处理里边有很多的规则

00:26.000 --> 00:29.000
但是这些规则呢其实我们在现实生活中都可以找到

00:29.000 --> 00:31.000
这么一个例子

00:31.000 --> 00:33.000
这里呢其实就有两张图

00:33.000 --> 00:35.000
上面这张图呢是我们上级课

00:35.000 --> 00:36.000
给大家放出来这么一张图

00:36.000 --> 00:38.000
就是咱们学开发呀

00:38.000 --> 00:41.000
可不多 特别是前端可真的不多

00:41.000 --> 00:42.000
这是一个可

00:42.000 --> 00:44.000
我们同学们加油吧

00:44.000 --> 00:45.000
把它搞定

00:45.000 --> 00:47.000
多花点时间把它搞定就完事了

00:47.000 --> 00:49.000
你后面就再也不用怕它了

00:49.000 --> 00:51.000
第一张图呢是我们上级课的图

00:51.000 --> 00:53.000
对吧 这是单个Promise对象

00:53.000 --> 00:54.000
咱们上级课学过了

00:54.000 --> 00:56.000
如何去创建一个Promise对象

00:56.000 --> 00:58.000
如何去根据它的状态

00:58.000 --> 01:00.000
来做一些进一步的处理

01:00.000 --> 01:02.000
这是我们上级课的指示

01:02.000 --> 01:03.000
上级课这张图啊大家一定要印到

01:03.000 --> 01:05.000
印到牢海里边

01:05.000 --> 01:08.000
时间我是给大家留充足的

01:08.000 --> 01:10.000
我希望通过这

01:10.000 --> 01:12.000
同学们下来过后

01:12.000 --> 01:14.000
一定要好好地把它理解清楚

01:14.000 --> 01:16.000
这张图

01:16.000 --> 01:18.000
大家已经在牢海里边要形成这么一张图

01:18.000 --> 01:20.000
没事的时候呢多去过一步

01:20.000 --> 01:22.000
看单个Promise对象是怎么去

01:22.000 --> 01:24.000
确定状态的

01:25.000 --> 01:27.000
好 这里和我们进入这里和的指示

01:27.000 --> 01:29.000
首先我给大家补充一点点东西

01:29.000 --> 01:31.000
就是一个开启方法

01:31.000 --> 01:32.000
特别特别简单

01:32.000 --> 01:34.000
它什么意思呢

01:34.000 --> 01:36.000
就说我们之前做后续处理

01:36.000 --> 01:37.000
用的是什么方法

01:37.000 --> 01:39.000
用的是这个Zing方法对吧

01:39.000 --> 01:41.000
Zing方法里边是有两个参数

01:41.000 --> 01:43.000
第一个参数呢是成功的处理

01:43.000 --> 01:45.000
第二个参数呢是失败的处理

01:45.000 --> 01:47.000
那如果说你只想处理

01:47.000 --> 01:49.000
只想处理失败

01:49.000 --> 01:50.000
不想处理成功呢

01:50.000 --> 01:52.000
成功无所谓你成功就成功没

01:52.000 --> 01:54.000
我只想处理失败

01:54.000 --> 01:56.000
比方说邓哥那个例子

01:56.000 --> 01:58.000
你同意了过后

01:58.000 --> 02:00.000
就没啥了对吧

02:00.000 --> 02:01.000
当然还是有些后续处理

02:01.000 --> 02:03.000
比方说我就啥也不做了

02:03.000 --> 02:04.000
我就玩

02:04.000 --> 02:06.000
我就发给短信玩一会

02:06.000 --> 02:07.000
啥也不做了

02:07.000 --> 02:08.000
那你失败了过后呢

02:08.000 --> 02:11.000
我得给下一位去发送消息

02:11.000 --> 02:12.000
对吧

02:12.000 --> 02:13.000
所以我只有失败的处理

02:13.000 --> 02:14.000
没有成功的处理

02:14.000 --> 02:16.000
那么你就可以写成这种格式

02:16.000 --> 02:18.000
成功呢我传一个闹

02:18.000 --> 02:19.000
我啥也不传

02:19.000 --> 02:21.000
那么失败的时候呢

02:21.000 --> 02:23.000
我传一个回调函数的进行处理

02:23.000 --> 02:25.000
那么这种写法呢

02:25.000 --> 02:28.000
它可以等效于前面这种写法

02:28.000 --> 02:29.000
catch

02:29.000 --> 02:31.000
只传一个失败的处理

02:31.000 --> 02:32.000
是一样的啊

02:32.000 --> 02:33.000
完全一样的

02:33.000 --> 02:34.000
我举个例子吧

02:34.000 --> 02:36.000
比方说这里呢

02:36.000 --> 02:39.890
我给他写上这么一个

02:39.890 --> 02:40.890
E2CS

02:40.890 --> 02:43.890
我们这里呢写一个new promise

02:43.890 --> 02:46.890
visual

02:46.890 --> 02:47.890
比方说吧

02:47.890 --> 02:49.890
我就直接失败

02:49.890 --> 02:52.890
创建一个错误对象

02:52.890 --> 02:54.890
abc吧随便给个消息

02:54.890 --> 02:55.890
我失败了

02:55.890 --> 02:57.890
我给一个失败的原因

02:57.890 --> 02:58.890
失败的原因呢

02:58.890 --> 02:59.890
一般来说

02:59.890 --> 03:01.890
一般来说是一个错误对象

03:01.890 --> 03:03.890
当然这里可以写任何东西

03:03.890 --> 03:04.890
失败了

03:04.890 --> 03:05.890
这个任务是不是失败了

03:05.890 --> 03:08.890
那么这个任务失败了之后呢

03:08.890 --> 03:09.890
好失败了之后呢

03:09.890 --> 03:11.890
我们需要对这个失败的

03:11.890 --> 03:12.890
做一些处理

03:12.890 --> 03:14.890
我们可以怎么写呢

03:14.890 --> 03:16.890
我们可以用这种方式

03:16.890 --> 03:18.890
成功不处理

03:18.890 --> 03:19.890
失败呢

03:19.890 --> 03:21.890
我们就对失败的原因

03:21.890 --> 03:22.890
其实这个玩意

03:22.890 --> 03:24.890
跟这个玩意就是一样的

03:24.890 --> 03:25.890
它失败了过后

03:25.890 --> 03:26.890
它就会传过来

03:26.890 --> 03:27.890
执行这个函数

03:27.890 --> 03:28.890
我们这里呢

03:28.890 --> 03:30.890
把这个失败的原因输出

03:30.890 --> 03:31.890
对吧

03:31.890 --> 03:32.890
我们就把前面打两个字吧

03:32.890 --> 03:35.260
失败了

03:35.260 --> 03:36.260
好 这里呢

03:36.260 --> 03:38.260
我们运行看一下

03:38.260 --> 03:39.260
是不是运行了

03:39.260 --> 03:40.260
失败了

03:40.260 --> 03:41.260
这个函数是不是得到运行

03:41.260 --> 03:42.260
对吧

03:42.260 --> 03:43.260
这就非常简单

03:43.260 --> 03:44.260
这里呢

03:44.260 --> 03:45.260
我说一个点

03:45.260 --> 03:46.260
就是说

03:46.260 --> 03:48.260
如果说失败了

03:48.260 --> 03:50.260
你没有对失败进行处理

03:50.260 --> 03:51.260
比方说失败

03:51.260 --> 03:52.260
我也传的是哪

03:52.260 --> 03:53.260
相对于是没有处理的

03:53.260 --> 03:54.260
对吧

03:54.260 --> 03:55.260
相对于没有写这个函数的

03:55.260 --> 03:57.260
如果说你没有对它进行

03:57.260 --> 03:58.260
失败处理的话

03:58.260 --> 04:00.260
它会给你报一个警告

04:00.260 --> 04:02.260
它说有一个为处理的

04:02.260 --> 04:03.260
Promise

04:03.260 --> 04:04.260
这个Promise失败了

04:04.260 --> 04:05.260
但是你没有处理

04:05.260 --> 04:07.260
它会给你报这么一个警告

04:07.260 --> 04:08.260
这是我们上集号

04:08.260 --> 04:09.260
好像遇到过

04:09.260 --> 04:10.260
当时我说的是

04:10.260 --> 04:11.260
后续给大家讲

04:11.260 --> 04:13.260
这些给大家补充一下

04:13.260 --> 04:14.260
那么这里呢

04:14.260 --> 04:15.260
我处理的过后呢

04:15.260 --> 04:17.260
它就不会有这个警告了

04:17.260 --> 04:18.260
刚才同学说

04:18.260 --> 04:19.260
不是还是爆出了吗

04:19.260 --> 04:21.260
这个爆出是因为我打印出来的

04:21.260 --> 04:22.260
如果说你没有打印出来的话

04:22.260 --> 04:23.260
那就看见了

04:23.260 --> 04:25.260
它只有一个失败

04:25.260 --> 04:26.260
这个错误呢

04:26.260 --> 04:28.260
我把错误对象打印出来的

04:28.260 --> 04:30.260
这就是咱们那个

04:30.260 --> 04:31.260
任意方法可以处理成功

04:31.260 --> 04:32.260
也可以处理失败

04:32.260 --> 04:34.260
那么如果说像这种情况

04:34.260 --> 04:35.260
我只处理的失败

04:35.260 --> 04:36.260
没有处理成功

04:36.260 --> 04:37.260
那我可以这样的写

04:37.260 --> 04:40.830
把它写成开启

04:40.830 --> 04:41.830
对吧

04:41.830 --> 04:42.830
只传一个回调函数

04:42.830 --> 04:43.830
就是失败的回调函数

04:43.830 --> 04:45.830
效果是完全一样的

04:45.830 --> 04:46.830
这是给大家补充一个

04:46.830 --> 04:47.830
开启方法

04:47.830 --> 04:48.830
这不是重点

04:48.830 --> 04:49.830
重点是下边

04:49.830 --> 04:51.830
电视调用

04:51.830 --> 04:55.210
在现实生活中

04:55.210 --> 04:57.210
其实咱们很多事

04:57.210 --> 05:00.210
它不是单个任务孤立存在的

05:00.210 --> 05:03.210
它是有很多任务串联起来的

05:03.210 --> 05:05.210
比方说我们举个例子

05:05.210 --> 05:07.210
那个

05:07.210 --> 05:09.210
我们就与高考为例吧

05:09.210 --> 05:10.210
你读大学为例

05:10.210 --> 05:12.210
你得先学习吧

05:12.210 --> 05:13.210
学习也是一个任务

05:13.210 --> 05:14.210
对吧

05:14.210 --> 05:15.210
学习完了之后呢

05:15.210 --> 05:17.210
我要考试

05:18.210 --> 05:19.210
考试完了过后呢

05:19.210 --> 05:21.210
出成绩

05:21.210 --> 05:22.210
成绩出了之后呢

05:22.210 --> 05:24.210
田志愿

05:24.210 --> 05:25.210
对吧

05:25.210 --> 05:26.210
田志愿

05:26.210 --> 05:28.210
然后再去入学

05:28.210 --> 05:30.210
是不是有这么一个过程

05:30.210 --> 05:31.210
对吧

05:31.210 --> 05:32.210
前面的事没完

05:32.210 --> 05:33.210
后面的事就进行不了

05:33.210 --> 05:35.210
是不是有一个串形的过程

05:35.210 --> 05:36.210
对吧

05:36.210 --> 05:37.210
前面的任务呢

05:37.210 --> 05:38.210
一个是一个接一个

05:38.210 --> 05:39.210
一个接一个出现的

05:39.210 --> 05:41.210
这就是多任务的场景

05:41.210 --> 05:43.210
那么这个场景呢

05:43.210 --> 05:45.210
就特别适合练试掉入

05:45.210 --> 05:46.210
啥意思啊

05:47.210 --> 05:49.210
我们认为考试

05:49.210 --> 05:51.210
是学习的后续处理

05:51.210 --> 05:52.210
你学完了

05:52.210 --> 05:53.210
这是一个独立的任务

05:53.210 --> 05:55.210
学完了过后得考试吧

05:55.210 --> 05:57.210
考试又是一个新的任务

05:57.210 --> 05:58.210
所以说我们这里呢

05:58.210 --> 05:59.210
就会发现

05:59.210 --> 06:01.210
后续处理

06:01.210 --> 06:04.210
它也是一个新任务

06:04.210 --> 06:05.210
因此呢

06:05.210 --> 06:06.210
反映到代码里面

06:06.210 --> 06:08.210
就会有这么一个特点

06:08.210 --> 06:10.210
这个Zing方法

06:10.210 --> 06:13.210
它会返回一个新的Promise

06:13.210 --> 06:14.210
逻辑呢

06:14.210 --> 06:15.210
就是

06:15.210 --> 06:16.210
Zing是什么逻辑

06:16.210 --> 06:17.210
Zing就是然后

06:17.210 --> 06:19.210
然后是不是后续处理

06:19.210 --> 06:20.210
后续处理

06:20.210 --> 06:22.210
仍然是一个任务

06:22.210 --> 06:24.210
我们在代码里面看一下

06:24.210 --> 06:27.930
我们就

06:27.930 --> 06:28.930
如何来表述

06:28.930 --> 06:29.930
学习完了考试呢

06:29.930 --> 06:30.930
我们就这样

06:30.930 --> 06:32.930
New一个Promise

06:32.930 --> 06:33.930
首先我们进行学习

06:33.930 --> 06:34.930
对吧

06:34.930 --> 06:37.930
我们这里就输出学习

06:37.930 --> 06:38.930
学习完了过后呢

06:38.930 --> 06:41.930
我们Result

06:41.930 --> 06:45.930
我们学习这个任务就结束了

06:45.930 --> 06:46.930
都是这个任务

06:46.930 --> 06:47.930
这个任务呢

06:47.930 --> 06:48.930
就是学习

06:48.930 --> 06:49.930
学习完了过后

06:49.930 --> 06:50.930
任务结束

06:50.930 --> 06:51.930
成功

06:51.930 --> 06:52.930
好

06:52.930 --> 06:53.930
学习完了过后

06:53.930 --> 06:54.930
我们是不是有后续处理

06:54.930 --> 06:55.930
后续干嘛

06:55.930 --> 06:57.930
后续是不是考试

06:57.930 --> 06:58.930
好

06:58.930 --> 06:59.930
我们来输出一下

06:59.930 --> 07:00.930
后续就是考试

07:00.930 --> 07:01.930
你现在这里呢

07:01.930 --> 07:02.930
我就

07:02.930 --> 07:03.930
我也不需要数据

07:03.930 --> 07:04.930
这边也没有个传数据

07:04.930 --> 07:05.930
对吧

07:05.930 --> 07:06.930
我就随便写一些

07:06.930 --> 07:07.930
好

07:07.930 --> 07:08.930
考试

07:08.930 --> 07:09.930
就这个东西

07:09.930 --> 07:11.930
它也是一个新的任务

07:11.930 --> 07:12.930
哎

07:12.930 --> 07:13.930
可以说

07:13.930 --> 07:14.930
那这个玩意不就是个回调函数吗

07:14.930 --> 07:15.930
怎么来看出

07:15.930 --> 07:16.930
这样子的

07:16.930 --> 07:17.930
这个任方法

07:17.930 --> 07:20.930
它会返回一个新的Promise

07:20.930 --> 07:21.930
我来看一下

07:21.930 --> 07:22.930
输出一下PRO2

07:22.930 --> 07:23.930
你看一下

07:23.930 --> 07:25.930
是不是一个任务

07:25.930 --> 07:26.930
说一个任务

07:26.930 --> 07:29.930
PRO2它仍然是一个任务

07:29.930 --> 07:30.930
没了意思吧

07:30.930 --> 07:32.930
这个输出顺序先不要管

07:32.930 --> 07:35.930
我们后面还会讲的

07:35.930 --> 07:36.930
为什么没有先

07:36.930 --> 07:37.930
不是先输出考试

07:37.930 --> 07:39.930
再去输出这个Promise

07:39.930 --> 07:40.930
我们后面会讲

07:40.930 --> 07:41.930
现在不用去过多考虑

07:41.930 --> 07:42.930
其实也非常简单

07:42.930 --> 07:44.930
就是任方法里边的

07:44.930 --> 07:47.930
rejected和unfulfilled

07:47.930 --> 07:49.930
它们都是进入微对立

07:49.930 --> 07:52.930
所以说这是一个异步的函数

07:52.930 --> 07:53.930
它会在事件对立里边

07:53.930 --> 07:55.930
就前面同步代码执行完了之后

07:55.930 --> 07:58.930
它会从事件对立里边拿出来执行

07:58.930 --> 07:59.930
我们后面再慢慢讲吧

07:59.930 --> 08:00.930
后面就做一些题

08:00.930 --> 08:01.930
再慢慢讲这个东西

08:01.930 --> 08:03.930
我们现在关注的就是

08:03.930 --> 08:05.930
这个PRO2是什么东西

08:05.930 --> 08:07.930
它仍然是一个Promise

08:07.930 --> 08:08.930
哪来的

08:08.930 --> 08:10.930
是不是任方法返回的

08:10.930 --> 08:11.930
一定要用任方法

08:11.930 --> 08:13.930
给它传了一个什么东西

08:13.930 --> 08:14.930
然后这个认函数

08:14.930 --> 08:16.930
它就会返回一个新的Promise

08:16.930 --> 08:17.930
你要这意思吗

08:17.930 --> 08:19.930
这就是这个任务

08:19.930 --> 08:21.930
它是怎么串起来的

08:21.930 --> 08:24.930
前一个任务做了后续处理

08:24.930 --> 08:25.930
那么这个后续处理

08:25.930 --> 08:27.930
会返回一个新的Promise

08:27.930 --> 08:29.930
那么后边出成绩也是一样

08:29.930 --> 08:31.930
那如果说针对PRO2

08:31.930 --> 08:34.930
我也有后续处理

08:34.930 --> 08:37.930
考试完了过后出成绩

08:37.930 --> 08:41.500
那么这个任方法

08:41.500 --> 08:43.500
它又会返回一个Promise

08:44.500 --> 08:47.500
我们来输出一下PRO3

08:47.500 --> 08:51.900
你看还是一个Promise

08:51.900 --> 08:54.900
对吧都是Promise

08:54.900 --> 08:56.900
就一个一任务接着一个任务

08:56.900 --> 08:58.900
所以先把这个点认识清楚

08:58.900 --> 09:00.900
当然这里边有很多细节

09:00.900 --> 09:03.900
马上就麻烦再细节特别多

09:03.900 --> 09:04.900
好 第二个

09:04.900 --> 09:07.900
关键就是新的任务的状态

09:07.900 --> 09:08.900
是什么的

09:08.900 --> 09:09.900
你不是返回一个新的任务吗

09:09.900 --> 09:11.900
原始任务清楚

09:11.900 --> 09:12.900
原始任务的状态

09:12.900 --> 09:14.900
就是看你钓没钓锐肉

09:14.900 --> 09:15.900
就成功了

09:15.900 --> 09:17.900
钓锐接个体的就失败了

09:17.900 --> 09:18.900
那我这里边

09:18.900 --> 09:19.900
为什么没有写这些结构体的

09:19.900 --> 09:20.900
因为我没用

09:20.900 --> 09:23.900
没用的话就可以不写

09:23.900 --> 09:26.900
就是这里我只挑了锐肉

09:26.900 --> 09:28.900
所以说这个任务最终就成功了

09:28.900 --> 09:30.900
关键是后边这些任务

09:30.900 --> 09:32.900
它的状态是什么呢

09:32.900 --> 09:33.900
这些任务

09:33.900 --> 09:34.900
它是没有锐肉可以调的

09:34.900 --> 09:36.900
没有锐肉可以调的

09:36.900 --> 09:41.900
它的状态就有这么一二三点

09:41.900 --> 09:43.900
这三个点你也清楚了

09:43.900 --> 09:46.900
你把promise的这一块知识

09:46.900 --> 09:48.900
随便出面是听

09:48.900 --> 09:50.900
没有任何问题

09:50.900 --> 09:52.900
就是三个点

09:52.900 --> 09:53.900
要一点一点的慢慢来

09:53.900 --> 09:54.900
慢慢理解清楚

09:54.900 --> 09:57.900
这个其实跟现实世界是寡革的

09:57.900 --> 09:59.900
第一个

09:59.900 --> 10:03.900
如果说你前一个任务

10:03.900 --> 10:06.900
没有相关的后续处理

10:06.900 --> 10:08.900
那么新的任务的状态

10:08.900 --> 10:11.900
和前面的任务一致

10:11.900 --> 10:14.900
数据就跟前面的任务的数据

10:14.900 --> 10:15.900
是一样的

10:15.900 --> 10:17.900
这说的是啥意思

10:17.900 --> 10:18.900
我给大家举个例子

10:18.900 --> 10:21.900
先从感性来认识

10:21.900 --> 10:26.900
比方说你在学习的过程中

10:26.900 --> 10:28.900
突然出了一些问题

10:28.900 --> 10:33.900
比方说出了什么样的问题呢

10:33.900 --> 10:37.900
你家里边买彩票中了大奖

10:37.900 --> 10:39.900
这个时候觉得你家里面有晃了

10:39.900 --> 10:40.900
中了五个亿

10:40.900 --> 10:43.900
你发现自己好像不用学习了

10:43.900 --> 10:47.900
这个时候学习这个任务

10:47.900 --> 10:48.900
是不是完不成了

10:48.900 --> 10:50.900
是不是就失败了

10:50.900 --> 10:52.900
你不需要学习了

10:52.900 --> 10:54.900
但是失败之后

10:54.900 --> 10:56.900
你又没有针对失败进行处理

10:56.900 --> 10:58.900
不学习就干嘛

10:58.900 --> 11:02.900
就导致了考试进行不下去了

11:02.900 --> 11:03.900
是不是这个逻辑

11:03.900 --> 11:04.900
你学习失败了

11:04.900 --> 11:06.900
是不是导致考试进行不下去了

11:06.900 --> 11:08.900
说学习这个任务

11:08.900 --> 11:09.900
这个任务本身失败了

11:09.900 --> 11:12.900
那么考试这个任务他也得失败

11:12.900 --> 11:15.900
如果说你没有针对这个失败进行处理的话

11:15.900 --> 11:17.900
那么他也得失败

11:17.900 --> 11:18.900
我举个例子

11:18.900 --> 11:20.900
比方说我这里学习

11:20.900 --> 11:22.900
突然我中奖了

11:22.900 --> 11:25.900
就在这写吧

11:25.900 --> 11:29.900
我突然中奖五个亿

11:29.900 --> 11:30.900
不学了

11:30.900 --> 11:35.230
那么这个是不是任务失败了

11:35.230 --> 11:36.230
就这个

11:36.230 --> 11:39.230
这里我把这个字加上

11:39.230 --> 11:42.610
是不是任务失败了

11:42.610 --> 11:43.610
好

11:43.610 --> 11:45.610
如果说我们把这后边删掉

11:45.610 --> 11:47.610
前面这个任务

11:47.610 --> 11:49.610
我针对这个任务做后续处理

11:49.610 --> 11:50.610
我只处理了成功

11:50.610 --> 11:52.610
成功过后我考试

11:52.610 --> 11:55.610
但是失败我没有处理

11:55.610 --> 11:56.610
我没有处理他失败

11:56.610 --> 11:58.610
但是学习失败了怎么办

11:58.610 --> 11:59.610
我没有处理

11:59.610 --> 12:00.610
没有处理

12:00.610 --> 12:02.610
这个任务他也会跟着失败

12:02.610 --> 12:03.610
他进行不下去了

12:03.610 --> 12:06.610
比方说前一个导致了后一个失败

12:06.610 --> 12:09.240
你看啊

12:09.240 --> 12:11.240
后边这个任务我等一会

12:11.240 --> 12:14.240
我用这摊帽子来输出

12:14.240 --> 12:15.240
不能直接输出

12:15.240 --> 12:16.240
直接输出是平底

12:16.240 --> 12:19.240
我们这里用一个一秒钟之后

12:19.240 --> 12:20.240
来输出

12:20.240 --> 12:22.240
为什么使这些输出是平底

12:22.240 --> 12:23.240
我后边会说

12:23.240 --> 12:24.240
现在不用管

12:24.240 --> 12:28.320
我们关注这个Promise 2的状态

12:28.320 --> 12:29.320
你看一下

12:29.320 --> 12:32.080
这个Promise的状态

12:32.080 --> 12:34.080
是不是越接个体的

12:34.080 --> 12:35.080
所以也失败了

12:35.080 --> 12:37.080
本来失败的是谁

12:37.080 --> 12:39.080
本来失败的是前面这个任务

12:39.080 --> 12:41.080
但是前面这个任务失败了

12:41.080 --> 12:42.080
他确实失败了

12:42.080 --> 12:44.080
我针对这个Promise 2

12:44.080 --> 12:48.080
是前面这个任务的后续处理

12:48.080 --> 12:50.080
那么后续处理

12:50.080 --> 12:51.080
我只处理的成功

12:51.080 --> 12:53.080
没有处理失败

12:53.080 --> 12:56.080
那么就会导致他失败了

12:56.080 --> 12:58.080
就这个任务的状态就是

12:58.080 --> 12:59.080
他失败了

12:59.080 --> 13:02.080
由于他没有相关的后续处理

13:02.080 --> 13:05.080
就导致了他也跟着失败

13:05.080 --> 13:06.080
那么失败的原因

13:06.080 --> 13:07.080
他是啥原因

13:07.080 --> 13:09.080
他就是啥原因

13:09.080 --> 13:11.080
总有一层要处理

13:11.080 --> 13:13.080
不然在后面的任务怎么办呢

13:14.080 --> 13:16.080
那么我们再来一个例子

13:16.080 --> 13:18.080
如果说成功了

13:21.080 --> 13:23.080
前面这个任务成功了

13:23.080 --> 13:25.080
但是我没有针对前面这个任务

13:25.080 --> 13:26.080
成功进行处理

13:26.080 --> 13:28.080
我只针对失败了进行处理

13:28.080 --> 13:29.080
比方说这里

13:29.080 --> 13:31.080
学习失败了

13:31.080 --> 13:33.080
没法考试了

13:34.080 --> 13:36.080
我只针对失败了进行处理

13:36.080 --> 13:38.080
我没有针对成功进行处理

13:38.080 --> 13:40.080
那么后面的任务是怎么情况呢

13:41.080 --> 13:42.080
是一样的

13:42.080 --> 13:44.080
前面的任务成功了

13:44.080 --> 13:46.080
那我没有针对成功处理

13:46.080 --> 13:48.080
那么他也跟着成功

13:48.080 --> 13:50.080
所以说我们来看一下Promise2

13:52.080 --> 13:53.080
是不是

13:53.080 --> 13:55.080
他这里没有说rejected

13:55.080 --> 13:56.080
他就表示成功了

13:56.080 --> 13:58.080
那么后面ondified了什么意思

13:58.080 --> 14:00.080
表示他相关数据

14:00.080 --> 14:02.080
所以说这个点大家理解清楚

14:02.080 --> 14:04.080
前面这个任务

14:04.080 --> 14:06.080
如果说没有进行后续处理

14:06.080 --> 14:08.080
那么他是啥

14:08.080 --> 14:10.080
他就是啥

14:10.080 --> 14:11.080
我再来一个例子

14:11.080 --> 14:14.080
比方说我这里写了一个1

14:15.080 --> 14:17.080
那么Promise2

14:17.080 --> 14:18.080
他成功之后

14:18.080 --> 14:19.080
他的数据是1

14:19.080 --> 14:20.080
我们来看一下

14:20.080 --> 14:22.080
Promise1

14:22.080 --> 14:23.080
他的成功是什么

14:23.080 --> 14:24.080
是不是成功了

14:27.080 --> 14:28.080
数据是什么

14:28.080 --> 14:29.080
是1

14:30.080 --> 14:31.080
Promise2

14:31.080 --> 14:33.080
他没有针对成功进行处理

14:33.080 --> 14:36.080
那么就导致了Promise2

14:36.080 --> 14:38.080
针对Promise1

14:38.080 --> 14:39.080
他没有对成功进行处理

14:39.080 --> 14:40.080
他只对失败了进行处理

14:40.080 --> 14:43.080
因此就会导致Promise2

14:43.080 --> 14:44.080
他也会

14:44.080 --> 14:46.080
跟Promise的情况是一模一样的

14:50.080 --> 14:52.080
那么数据也是1

14:53.080 --> 14:54.080
我们先看一下

14:55.080 --> 14:56.080
看没

14:56.080 --> 14:58.080
当然失败也是一样

14:58.080 --> 15:00.080
我们再换成失败的情况

15:01.080 --> 15:02.080
这里失败了

15:02.080 --> 15:03.080
失败了我传个123

15:03.080 --> 15:05.080
那么这边也是

15:05.080 --> 15:06.080
他的后续处理

15:06.080 --> 15:07.080
只出了成功

15:07.080 --> 15:08.080
没有处理失败

15:08.080 --> 15:10.080
那么就会导致他的情况了

15:10.080 --> 15:11.080
Promise1

15:11.080 --> 15:12.080
他是rejected

15:13.080 --> 15:15.080
原因是123

15:15.080 --> 15:17.080
就会导致Promise2

15:17.080 --> 15:18.080
他也是rejected

15:18.080 --> 15:19.080
原因是123

15:19.080 --> 15:21.080
咱们看一下

15:21.080 --> 15:23.460
你看

15:23.460 --> 15:24.460
rejected

15:24.460 --> 15:25.460
123

15:25.460 --> 15:27.460
前面是不是给你报了一些警告

15:27.460 --> 15:29.460
他说你没有针对他进行

15:29.460 --> 15:30.460
他失败了

15:30.460 --> 15:32.460
但是没有针对失败的人物进行处理

15:32.460 --> 15:34.460
然后他也失败了

15:34.460 --> 15:36.460
你也没有针对他来进行

15:36.460 --> 15:37.460
后续处理

15:37.460 --> 15:38.460
说报了两个警告

15:38.460 --> 15:40.460
这就是这么一种情况

15:41.460 --> 15:42.460
第一个情况

15:42.460 --> 15:45.460
就是没有相关的后续处理

15:45.460 --> 15:48.460
那么后面的人物跟前面的人物

15:48.460 --> 15:49.460
一致

15:49.460 --> 15:50.460
状态一致

15:50.460 --> 15:51.460
前面咋回事

15:51.460 --> 15:52.460
你就咋回事

15:53.460 --> 15:54.460
那如果说

15:54.460 --> 15:56.460
第二种情况

15:56.460 --> 15:58.460
有后续处理

15:58.460 --> 16:01.460
但是还没有执行新的任务

16:01.460 --> 16:02.460
他就会挂起

16:03.460 --> 16:04.460
怎么理解呢

16:06.460 --> 16:07.460
那么简单的理解就是

16:07.460 --> 16:09.460
前面这个任务是挂起

16:09.460 --> 16:10.460
你也得挂起

16:11.460 --> 16:12.460
比方说吧

16:12.460 --> 16:14.460
我这里学习需要一段时间

16:14.460 --> 16:15.460
我没有那么快

16:15.460 --> 16:17.460
我这里就set time out

16:21.240 --> 16:22.240
两秒钟

16:22.240 --> 16:23.240
两秒钟

16:23.240 --> 16:24.240
我要学两秒钟

16:24.240 --> 16:25.240
才能学习结束

16:25.240 --> 16:27.240
那么学习结束就成功了

16:28.240 --> 16:29.240
这样让我们看

16:29.240 --> 16:32.240
我针对这个任务进行后续处理

16:32.240 --> 16:33.240
如果说你成功了

16:33.240 --> 16:34.240
我就考试

16:35.240 --> 16:38.240
我就运行这个函数进行考试

16:38.240 --> 16:39.240
是不是会返回一个新的任务

16:39.240 --> 16:42.240
那么这个新的任务的状态是什么呢

16:43.240 --> 16:44.240
好 咱们来看一下

16:44.240 --> 16:45.240
运行

16:46.240 --> 16:47.240
pending

16:48.240 --> 16:49.240
为什么是pending呢

16:49.240 --> 16:50.240
你看

16:51.240 --> 16:53.240
我这个后续处理

16:53.240 --> 16:55.240
是不是要等到学习成功之后

16:57.240 --> 16:58.240
学习成功需要多少时间

16:58.240 --> 17:00.240
需要两秒钟

17:00.240 --> 17:01.240
对吧

17:01.240 --> 17:03.240
那我这里肯定时间还没到

17:03.240 --> 17:05.240
一秒钟过后就输出这个

17:05.240 --> 17:07.240
那么我这个时间到了时候

17:07.240 --> 17:08.240
说明啥

17:08.240 --> 17:10.240
说明他还没有成功

17:11.240 --> 17:12.240
对不对

17:12.240 --> 17:13.240
是不是还没有成功

17:13.240 --> 17:15.240
还没有成功

17:15.240 --> 17:18.550
那么他都还没玩

17:18.550 --> 17:20.550
没玩的话

17:20.550 --> 17:21.550
他也没玩

17:21.550 --> 17:22.550
他也是刮旗的

17:23.550 --> 17:24.550
瞄理说

17:24.550 --> 17:25.550
这个好理解吧

17:25.550 --> 17:27.550
就前面这个阶段还没结束

17:27.550 --> 17:29.550
那么你这个新的任务

17:29.550 --> 17:30.550
也得是刮旗

17:31.550 --> 17:33.550
好 这就是这个

17:33.550 --> 17:34.550
后续处理

17:34.550 --> 17:35.550
还没有执行

17:35.550 --> 17:37.550
那么新的任务刮旗

17:37.550 --> 17:38.550
刮旗处理是啥

17:38.550 --> 17:39.550
是这个

17:39.550 --> 17:40.550
我有没有有

17:40.550 --> 17:42.550
没有的话就回到第1种情况了

17:42.550 --> 17:44.550
我有后续处理

17:44.550 --> 17:46.550
但是我这个后续处理

17:46.550 --> 17:47.550
还没执行

17:47.550 --> 17:48.550
那么这个时候

17:48.550 --> 17:50.550
这个任务就是刮旗的

17:50.550 --> 17:51.550
你学习完了过后

17:51.550 --> 17:52.550
我有没有后续处理

17:52.550 --> 17:53.550
有后续处理

17:53.550 --> 17:54.550
考试

17:54.550 --> 17:56.550
但是我现在还没有开始考试

17:56.550 --> 17:57.550
那么这个任务肯定是刮旗的

17:57.550 --> 17:58.550
对不对

17:58.550 --> 18:00.550
好 这是这种情况

18:00.550 --> 18:02.550
重点是第3种情况

18:02.550 --> 18:04.550
第3种情况又有3个细节

18:04.550 --> 18:06.550
就是我前面这个任务

18:07.550 --> 18:08.550
完了

18:08.550 --> 18:10.550
我也有相关的后续处理

18:10.550 --> 18:11.550
没有相关的后续处理

18:11.550 --> 18:12.550
看这个

18:12.550 --> 18:15.550
我也有相关的后续处理

18:15.550 --> 18:17.550
那么但是呢

18:17.550 --> 18:18.550
我这个新的任务

18:18.550 --> 18:19.550
还没有那么

18:19.550 --> 18:22.550
还不能直接的

18:22.550 --> 18:24.550
不能直接的确定状态

18:24.550 --> 18:25.550
我要看

18:25.550 --> 18:28.550
后续的相关处理是什么情况

18:28.550 --> 18:29.550
比方说

18:29.550 --> 18:31.550
你学习学习完了

18:31.550 --> 18:33.550
我的新任务是啥

18:33.550 --> 18:34.550
后续处理是啥

18:34.550 --> 18:35.550
考试

18:35.550 --> 18:36.550
考试就是个新任务

18:36.550 --> 18:38.550
但是你不能说你学习成功了

18:38.550 --> 18:40.550
我考试就一定成功

18:40.550 --> 18:42.550
所以说我考试

18:42.550 --> 18:43.550
有没有后续处理

18:43.550 --> 18:44.550
有

18:44.550 --> 18:47.550
排除要第1种情况

18:47.550 --> 18:48.550
是不是第2种情况

18:48.550 --> 18:50.550
不是学习完成了

18:50.550 --> 18:51.550
现在就第3种情况

18:51.550 --> 18:53.550
我有后续处理

18:53.550 --> 18:56.550
我还得看这个考试的过程

18:56.550 --> 18:58.550
比方说个考试的时候

18:58.550 --> 18:59.550
通常一种讲了

18:59.550 --> 19:00.550
直接就跑了

19:00.550 --> 19:01.550
或者是考试的时候

19:01.550 --> 19:02.550
就睡着了

19:02.550 --> 19:04.550
那考试就失败了

19:04.550 --> 19:06.550
还要看这个考试的过程

19:06.550 --> 19:08.550
那么这个过程是看啥

19:08.550 --> 19:10.550
就看这个函数的执行过程

19:10.550 --> 19:12.550
简单的说

19:12.550 --> 19:15.550
这个函数执行过程中

19:15.550 --> 19:16.550
没有错误

19:16.550 --> 19:17.550
怎么样没有错误

19:17.550 --> 19:18.550
不抱错

19:18.550 --> 19:21.550
那么你这个任务就成功

19:21.550 --> 19:23.550
执行的过程中抱了错

19:23.550 --> 19:26.550
你这个任务就失败

19:26.550 --> 19:27.550
没有意思吗

19:27.550 --> 19:28.550
就简单的说就是这两点

19:28.550 --> 19:32.250
就前面这两点

19:32.250 --> 19:33.250
前面这两点

19:33.250 --> 19:34.250
慢慢来

19:34.250 --> 19:36.250
这个时间给你们留够

19:36.250 --> 19:39.250
慢慢去输利

19:39.250 --> 19:41.250
后续处理就是这么一个意思

19:41.250 --> 19:42.250
就表示这个

19:42.250 --> 19:43.250
其实这个后续处理是什么

19:43.250 --> 19:46.250
其实就是新任务的执行过程

19:46.250 --> 19:49.250
就是新任务的执行过程

19:49.250 --> 19:52.250
那么执行的过程中有错

19:52.250 --> 19:53.250
失败

19:53.250 --> 19:55.250
没有错成功

19:55.250 --> 19:56.250
好 我举个例子

19:56.250 --> 19:57.250
比方说我们这里学习

19:57.250 --> 19:59.250
我就直接让它成功了

19:59.250 --> 20:02.560
成功了是不是会执行这个

20:02.560 --> 20:03.560
对不对

20:03.560 --> 20:04.560
执行这个的过程中

20:04.560 --> 20:05.560
没有错误

20:05.560 --> 20:07.560
好 那么它成功

20:07.560 --> 20:08.560
好 看一下

20:08.560 --> 20:10.560
你看是不是考试没有错误

20:10.560 --> 20:11.560
它成功吗

20:11.560 --> 20:13.560
数据是二级半的

20:13.560 --> 20:16.560
那如果说考试的过程中有错

20:16.560 --> 20:19.560
有错怎么来弄有错呢

20:19.560 --> 20:21.560
我就straw吧

20:21.560 --> 20:24.560
拋出一个错误

20:24.560 --> 20:26.560
这就是一个抱错了对吧

20:26.560 --> 20:28.560
abc有随便写个吧

20:28.560 --> 20:30.560
或者说睡着了

20:30.560 --> 20:36.300
你看 promise

20:36.300 --> 20:37.300
变成什么

20:37.300 --> 20:39.300
变成 reject

20:39.300 --> 20:42.300
所以它变成了失败

20:42.300 --> 20:43.300
所以说不是说它成功

20:43.300 --> 20:44.300
它就一定成功

20:44.300 --> 20:45.300
不是说学习成功

20:45.300 --> 20:47.300
考试又一定成功

20:47.300 --> 20:49.300
别的意思

20:49.300 --> 20:50.300
那么好

20:50.300 --> 20:51.300
我们接下来看

20:51.300 --> 20:52.300
前面两个的细节

20:52.300 --> 20:54.300
如果说执行的过程中

20:54.300 --> 20:55.300
无错

20:55.300 --> 20:56.300
新的任务状态就没完成

20:56.300 --> 20:57.300
就成功

20:57.300 --> 20:59.300
数据是什么呢

20:59.300 --> 21:01.300
数据是反回止

21:01.300 --> 21:02.300
差意思

21:02.300 --> 21:03.300
如果说你成功了

21:03.300 --> 21:04.300
等我考了100分

21:04.300 --> 21:06.300
我就反回一个100

21:06.300 --> 21:08.300
怎么来看一下

21:08.300 --> 21:10.300
promise2成功了

21:10.300 --> 21:11.300
反回100

21:11.300 --> 21:12.300
是不是新的任务表示

21:12.300 --> 21:14.300
我这个执行过程没问题

21:14.300 --> 21:15.300
成功了

21:15.300 --> 21:17.300
我得到了数据是100

21:17.300 --> 21:19.300
那如果说失败的呢

21:19.300 --> 21:20.300
失败的比方我拋了一个错误

21:20.300 --> 21:21.300
拋了一个错误

21:21.300 --> 21:22.300
就是个错误对象

21:22.300 --> 21:23.300
对吧

21:23.300 --> 21:25.300
那么这就是失败的原因

21:25.300 --> 21:27.810
你看

21:27.810 --> 21:28.810
失败了对吧

21:28.810 --> 21:29.810
失败的原因是

21:29.810 --> 21:31.810
这个 error 对象

21:31.810 --> 21:32.810
当你拋出

21:32.810 --> 21:33.810
我们一般来说

21:33.810 --> 21:34.810
是拋一个错误对象

21:34.810 --> 21:35.810
可以拋别的

21:35.810 --> 21:37.810
拋个123

21:37.810 --> 21:38.810
或者拋个0

21:38.810 --> 21:39.810
表示零分

21:39.810 --> 21:40.810
那么失败了

21:40.810 --> 21:42.810
失败的原因是123

21:42.810 --> 21:44.810
没什么意思吧

21:44.810 --> 21:46.810
就这么个意思

21:46.810 --> 21:47.810
好

21:47.810 --> 21:48.810
我们再来比方说

21:48.810 --> 21:49.810
这里是我们自手动的拋出错误

21:49.810 --> 21:50.810
还有可能是

21:50.810 --> 21:51.810
就是代码执行爆错了

21:51.810 --> 21:53.810
比方说你这里有个变量

21:53.810 --> 21:54.810
然后你出源区

21:54.810 --> 21:56.810
调用这个变量的一个方法

21:56.810 --> 21:58.810
闹了不能调方法

21:58.810 --> 21:59.810
不能说这个是爆错了

21:59.810 --> 22:04.700
爆错就导致这个任务失败

22:04.700 --> 22:05.700
你看错误了

22:05.700 --> 22:06.700
这个原因是什么呢

22:06.700 --> 22:08.700
他说这个就是这个错误

22:08.700 --> 22:11.700
无法读取闹的偷失变法

22:11.700 --> 22:14.700
你看这个意思吧

22:14.700 --> 22:16.700
再来说一下

22:16.700 --> 22:18.700
后续处理就是一个新任务

22:18.700 --> 22:19.700
不是说你前边成功了

22:19.700 --> 22:21.700
我就一定成功

22:21.700 --> 22:22.700
不是说你前边失败了

22:22.700 --> 22:24.700
我就一定失败

22:24.700 --> 22:25.700
那不一定的

22:25.700 --> 22:28.700
我要看我这个任务的处理过程

22:28.700 --> 22:29.700
我处理过程中没有问题

22:29.700 --> 22:30.700
那就成功

22:30.700 --> 22:32.700
处理过程中有问题

22:32.700 --> 22:34.700
那就失败

22:35.700 --> 22:36.700
好

22:36.700 --> 22:37.700
咱们再来一个例子

22:37.700 --> 22:40.700
比方说我这个学习

22:40.700 --> 22:42.700
学习失败了

22:42.700 --> 22:43.700
比方中奖了

22:43.700 --> 22:44.700
不学了

22:44.700 --> 22:46.700
那么就是reject

22:46.700 --> 22:49.580
学习失败了

22:49.580 --> 22:50.580
好

22:50.580 --> 22:51.580
接下来我们来这边来看一下

22:51.580 --> 22:56.110
用看齐

22:56.110 --> 22:57.110
如果说你不用看齐的话

22:57.110 --> 22:59.110
你用那个Zing的话

22:59.110 --> 23:00.110
相当于这样子写的话

23:00.110 --> 23:02.110
就相当于是没有去处理他的失败

23:02.110 --> 23:04.110
那就回到第1种情况了

23:04.110 --> 23:06.110
那就回到第1种情况了

23:06.110 --> 23:08.110
回到第1种情况

23:08.110 --> 23:10.110
那我这里不考一种情况

23:10.110 --> 23:11.110
就说你失败了

23:11.110 --> 23:13.110
我也有处理失败

23:13.110 --> 23:14.110
你不学了

23:14.110 --> 23:15.110
不学了

23:15.110 --> 23:16.110
我也不考了

23:16.110 --> 23:18.110
你都不学了

23:20.110 --> 23:21.110
还考啥

23:23.110 --> 23:24.110
有没有处理失败

23:24.110 --> 23:26.110
有处理失败

23:26.110 --> 23:28.110
那么有处理失败的话

23:29.110 --> 23:31.110
这个任务还是一样的

23:31.110 --> 23:33.110
看处理的过程

23:33.110 --> 23:35.110
处理的过程中不爆出

23:35.110 --> 23:36.110
他就成功

23:37.110 --> 23:38.110
没意思吧

23:38.110 --> 23:39.110
就是我把这个

23:39.110 --> 23:42.110
本来是你有问题的

23:42.110 --> 23:44.110
但是我这边

23:44.110 --> 23:46.110
处理了你这个问题

23:46.110 --> 23:47.110
处理了过后

23:47.110 --> 23:49.110
那你就没问题了

23:49.110 --> 23:50.110
就这么个逻辑

23:50.110 --> 23:51.110
好

23:51.110 --> 23:52.110
咱们来运行看一下吧

23:52.110 --> 23:55.740
所以他成功了

23:55.740 --> 23:56.740
那成功的数据是什么呢

23:56.740 --> 23:59.740
还是一样得益于这个

23:59.740 --> 24:00.740
函数的返回值

24:00.740 --> 24:01.740
你返回什么数据

24:01.740 --> 24:06.140
它就是什么数据

24:06.140 --> 24:07.140
看没

24:07.140 --> 24:09.140
他如果说你处理的过程

24:09.140 --> 24:10.140
又出错了

24:10.140 --> 24:11.140
对吧

24:11.140 --> 24:13.140
你本来你都不考了

24:13.140 --> 24:15.140
那么这个时候突然有一天

24:15.140 --> 24:20.030
你发现中奖

24:21.030 --> 24:22.030
就是颁奖

24:22.030 --> 24:24.030
就是发奖的机构跑了

24:24.030 --> 24:25.030
跑路了

24:25.030 --> 24:28.030
发奖的机构跑路了

24:30.030 --> 24:31.030
你还得考

24:32.030 --> 24:34.030
还得发生中奖十一滩

24:34.030 --> 24:36.030
是一个进化水月

24:36.030 --> 24:37.030
还得回来考试

24:41.240 --> 24:42.240
不能用这个例子

24:43.240 --> 24:45.240
我就直接报个措施了

24:45.240 --> 24:46.240
直接报个措施

24:46.240 --> 24:52.500
是不是又变成拒绝了

24:52.500 --> 24:53.500
就是前一个任务失败了

24:53.500 --> 24:55.500
但是我处理了

24:55.500 --> 24:57.500
如果说我没处理

24:57.500 --> 24:58.500
那我也失败了

24:58.500 --> 25:00.500
那我关键是我处理的这个错误

25:00.500 --> 25:02.500
处理的错误我就不能认为失败了

25:02.500 --> 25:04.500
我要看我这个处理过程

25:04.500 --> 25:06.500
如果说我处理的过程中有错误

25:06.500 --> 25:07.500
那我失败

25:07.500 --> 25:09.500
处理的过程中没有错误

25:09.500 --> 25:10.500
我成功

25:10.500 --> 25:11.500
所以说你始终记住

25:11.500 --> 25:13.500
后边的任务的状态

25:13.500 --> 25:16.500
就是如果说我有相关的处理

25:16.500 --> 25:18.500
我一定要看那个处理的过程

25:18.500 --> 25:19.500
不管是对成功的处理

25:19.500 --> 25:21.500
还是对失败的处理

25:21.500 --> 25:22.500
如果说你前面的任务成功了

25:22.500 --> 25:23.500
我就看成功处理

25:23.500 --> 25:25.500
如果说前面的任务失败了

25:25.500 --> 25:26.500
我就看失败处理

25:26.500 --> 25:28.500
我要看这个处理的过程

25:28.500 --> 25:29.500
有没有问题

25:29.500 --> 25:30.500
没有问题我就成功

25:30.500 --> 25:32.500
有问题我就失败

25:32.500 --> 25:34.500
没了意思吧

25:34.500 --> 25:36.500
好 那个最后一个细节

25:36.500 --> 25:38.500
如果说我的后续处理

25:38.500 --> 25:40.500
不管是成功还是失败

25:40.500 --> 25:41.500
反正就是我的后续处理

25:41.500 --> 25:44.500
返回的是一个新的任务对象

25:44.500 --> 25:46.500
那么新任务的状态

25:46.500 --> 25:47.500
和这个数据

25:47.500 --> 25:48.500
给这个任务对象一致

25:48.500 --> 25:49.500
啥意思

25:49.500 --> 25:53.500
这种情况就看一下吧

25:53.500 --> 25:55.500
如果说我这个后续处理

25:55.500 --> 25:58.500
比方说我这里还用成功

25:59.500 --> 26:00.500
你成功了

26:00.500 --> 26:01.500
成功了过后了

26:01.500 --> 26:03.500
我就针对这个的后续处理

26:03.500 --> 26:06.500
我返回的是一个任务对象

26:06.500 --> 26:08.500
new promise

26:08.500 --> 26:10.500
又返回了一个新的任务对象

26:10.500 --> 26:12.500
那么这个对象的情况

26:12.500 --> 26:15.500
跟他的情况就完全一致了

26:15.500 --> 26:16.500
这个对象是挂起

26:16.500 --> 26:18.500
这个任务就是挂起

26:18.500 --> 26:20.500
这个对象是成功

26:20.500 --> 26:21.500
这个任务就成功

26:21.500 --> 26:22.500
这个对象是失败

26:22.500 --> 26:24.500
这个任务就是失败

26:24.500 --> 26:25.500
所以说呢

26:25.500 --> 26:26.500
那这个数据

26:26.500 --> 26:27.500
当然就是你掉

26:27.500 --> 26:28.500
成功的数据

26:28.500 --> 26:29.500
就是你掉这个瑞招过的时候的数据

26:29.500 --> 26:30.500
失败的时候

26:30.500 --> 26:32.500
就掉这个瑞接个成的数据

26:32.500 --> 26:33.500
就是原因

26:33.500 --> 26:34.500
对吧

26:34.500 --> 26:36.500
好 那么比方说就这样子

26:36.500 --> 26:37.500
那么请问大家

26:37.500 --> 26:41.770
这个任务的状态是什么

26:41.770 --> 26:42.770
是什么

26:42.770 --> 26:43.770
看一下

26:43.770 --> 26:46.140
平底

26:46.140 --> 26:48.140
为什么是平底

26:48.140 --> 26:50.140
他就这样的看

26:50.140 --> 26:52.140
从头到尾再看一遍

26:52.140 --> 26:53.140
这个任务成功吗

26:53.140 --> 26:54.140
成功了吗

26:54.140 --> 26:55.140
成功了

26:55.140 --> 26:56.140
有没有后续处理呢

26:56.140 --> 26:57.140
有后续处理

26:57.140 --> 26:59.140
那我这个任务

26:59.140 --> 27:00.140
就应该看这个

27:00.140 --> 27:02.140
后续处理的过程

27:02.140 --> 27:03.140
是吧

27:03.140 --> 27:04.140
过程中有没有错误

27:04.140 --> 27:05.140
没有错误

27:05.140 --> 27:06.140
那么按理说

27:06.140 --> 27:07.140
我这个任务就应该完成

27:07.140 --> 27:09.140
但是我这个任务返回的是

27:09.140 --> 27:11.140
一个新的promise

27:11.140 --> 27:12.140
那么我就要看

27:12.140 --> 27:14.140
这个新的promise

27:14.140 --> 27:15.140
他的状态是啥

27:15.140 --> 27:16.140
他就是啥

27:16.140 --> 27:17.140
而这个新的promise

27:17.140 --> 27:18.140
他的状态是啥

27:18.140 --> 27:19.140
是不是平底

27:19.140 --> 27:20.140
挂起的

27:20.140 --> 27:21.140
为什么挂起的

27:21.140 --> 27:23.140
因为我这里没有掉入瑞接个成

27:23.140 --> 27:24.140
他的任务肯定是

27:24.140 --> 27:25.140
一直是等待的

27:25.140 --> 27:28.140
所以说新的任务也是等待

27:28.140 --> 27:30.140
你看这意思

27:30.140 --> 27:31.140
这就是

27:31.140 --> 27:33.140
是不是很糟很糟

27:33.140 --> 27:35.140
其实之所以这么糟

27:35.140 --> 27:36.140
根本原因

27:36.140 --> 27:38.140
还不是promise的问题

27:38.140 --> 27:39.140
是因为我们本身

27:39.140 --> 27:40.140
现实世界

27:40.140 --> 27:42.140
就是这么的复杂

27:42.140 --> 27:43.140
只是我们平时

27:43.140 --> 27:46.140
没有用一种代码模型

27:46.140 --> 27:47.140
或者是数学模型

27:47.140 --> 27:48.140
去分析它

27:48.140 --> 27:49.140
我们都是感性认识

27:49.140 --> 27:50.140
感觉上差不多就可以了

27:50.140 --> 27:52.140
但是一旦用数学模型

27:52.140 --> 27:53.140
或者是代码模型

27:53.140 --> 27:54.140
去分析它的话

27:54.140 --> 27:55.140
它本身就是这么复杂

27:55.140 --> 27:56.140
我们代码都是

27:56.140 --> 27:58.140
为了反映现实世界的

27:58.140 --> 27:59.140
然后你看

27:59.140 --> 28:01.140
我们再来整个过一遍

28:01.140 --> 28:03.140
后续处理本身

28:03.140 --> 28:05.140
就是一个新的任务

28:05.140 --> 28:06.140
后续处理本身

28:06.140 --> 28:08.140
就是一个新的任务

28:08.140 --> 28:09.140
新的任务的状态

28:09.140 --> 28:11.140
有三个情况

28:11.140 --> 28:13.140
你前边的任务

28:13.140 --> 28:14.140
有了一种状态

28:14.140 --> 28:15.140
但是我后边的任务

28:15.140 --> 28:17.140
没有处理的状态

28:17.140 --> 28:18.140
比方说你前面的任务

28:18.140 --> 28:19.140
在这种情况

28:19.140 --> 28:20.140
你再看

28:20.140 --> 28:22.140
前面的任务拒绝了

28:22.140 --> 28:23.140
但是后边的任务

28:23.140 --> 28:24.140
我前面的任务

28:24.140 --> 28:25.140
没有针对这个

28:25.140 --> 28:27.140
失败做任何处理

28:27.140 --> 28:28.140
那么后边的任务

28:28.140 --> 28:30.140
也会跟着失败

28:30.140 --> 28:31.140
原因跟前面的任务

28:31.140 --> 28:32.140
原因一致

28:32.140 --> 28:34.140
这是第一个点

28:34.140 --> 28:36.140
第二个点

28:36.140 --> 28:41.520
我前面的任务成功了

28:42.520 --> 28:43.520
但是

28:43.520 --> 28:44.520
如果说前面的任务

28:44.520 --> 28:45.520
还没有成功

28:45.520 --> 28:46.520
还是挂起的状态

28:46.520 --> 28:47.520
像这种情况

28:47.520 --> 28:48.520
一直挂起

28:48.520 --> 28:50.520
或者是等了很长一段时间

28:50.520 --> 28:51.520
才会成功

28:51.520 --> 28:52.520
等这段时间

28:52.520 --> 28:54.520
它就是挂起的

28:54.520 --> 28:55.520
我后边的任务

28:55.520 --> 28:56.520
有没有处理的

28:56.520 --> 28:57.520
有处理

28:57.520 --> 28:58.520
但是

28:58.520 --> 28:59.520
它是前面的任务

28:59.520 --> 29:00.520
是挂起的

29:00.520 --> 29:02.520
我也只能挂起

29:02.520 --> 29:04.520
像这种情况

29:05.520 --> 29:07.520
跟这个人没关系的

29:07.520 --> 29:08.520
第三个情况

29:08.520 --> 29:09.520
比较复杂的情况

29:09.520 --> 29:10.520
是什么情况

29:10.520 --> 29:12.520
就是我前面的任务

29:12.520 --> 29:13.520
没有挂起的

29:13.520 --> 29:14.520
已经成功

29:14.520 --> 29:15.520
要么成功

29:15.520 --> 29:16.520
要么失败

29:16.520 --> 29:18.520
后边也有相关的处理

29:19.520 --> 29:21.520
那么我就看整个处理过程

29:21.520 --> 29:24.520
处理过程没有错误

29:24.520 --> 29:25.520
成功

29:25.520 --> 29:27.520
处理过程有错误

29:27.520 --> 29:28.520
失败

29:28.520 --> 29:30.520
如果说处理完了过后

29:30.520 --> 29:31.520
你给我返回的是

29:31.520 --> 29:32.520
一个新的Promise

29:32.520 --> 29:33.520
那么我这个情况

29:33.520 --> 29:35.520
就跟新的Promise是一样的

29:37.520 --> 29:38.520
好

29:38.520 --> 29:40.520
好好去处理一下

29:42.520 --> 29:43.520
那么接下来

29:43.520 --> 29:45.520
我们来做一些题

29:46.520 --> 29:47.520
第一道题

29:48.520 --> 29:49.520
再读一下

29:52.830 --> 29:53.830
看一下

29:57.100 --> 29:58.100
能不能根据

29:58.100 --> 29:59.100
我们学过的知识

30:00.100 --> 30:01.100
说出这道题的

30:02.100 --> 30:03.100
输出结果

30:04.100 --> 30:07.100
这里边输出了一些Promise

30:07.100 --> 30:08.100
以后

30:08.100 --> 30:09.100
你们在做面试

30:09.100 --> 30:11.100
反而让你看到

30:11.100 --> 30:13.100
这个问题输出结果是啥

30:13.100 --> 30:15.100
它输出的是Promise

30:15.100 --> 30:16.100
那么你就告诉它

30:16.100 --> 30:17.100
它主要就问你的是

30:17.100 --> 30:19.100
Promise的状态是什么

30:20.100 --> 30:21.100
它的相关数据

30:21.100 --> 30:23.100
比方成功的数据是啥

30:23.100 --> 30:25.100
失败的原因是啥

30:25.100 --> 30:26.100
它主要是问这个

30:27.100 --> 30:28.100
好 让它看一下

30:30.420 --> 30:31.420
这里有第一个任务

30:31.420 --> 30:32.420
歧视任务

30:32.420 --> 30:33.420
歧视任务是等待

30:33.420 --> 30:35.420
一秒钟之后成功

30:35.420 --> 30:36.420
那么目前

30:36.420 --> 30:37.420
你这样再记

30:38.420 --> 30:39.420
这个歧视任务

30:39.420 --> 30:40.420
目前的状态是啥

30:41.420 --> 30:42.420
所以陪你

30:42.420 --> 30:43.420
对吧

30:43.420 --> 30:44.420
那肯定是没有相关数据了

30:44.420 --> 30:45.420
陪你有什么相关数据

30:46.420 --> 30:48.420
好 针对Promise一做后续处理

30:48.420 --> 30:50.420
就产生了一个Promise二

30:51.420 --> 30:52.420
Promise二的状态

30:52.420 --> 30:53.420
目前是啥

30:54.420 --> 30:55.420
Promise一是挂起

30:55.420 --> 30:56.420
那么毫无疑问

30:57.420 --> 30:58.420
不管是哪一种情况

30:58.420 --> 30:59.420
你自己去看

30:59.420 --> 31:00.420
一二三 三个点

31:00.420 --> 31:01.420
不管是哪一种情况

31:01.420 --> 31:03.420
Promise二也只能挂起

31:05.420 --> 31:07.420
我这个东西看都难得看它

31:07.420 --> 31:08.420
看都不用去看它

31:08.420 --> 31:09.420
Promise一是挂起

31:09.420 --> 31:11.420
Promise二一定是挂起

31:11.420 --> 31:13.420
然后我们再看Promise三

31:13.420 --> 31:14.420
Promise三是哪来的

31:14.420 --> 31:16.420
是针对Promise二的后续处理

31:16.420 --> 31:18.420
就说如果说你成功了

31:18.420 --> 31:19.420
我就运行这个

31:20.420 --> 31:21.420
Promise二目前是啥

31:21.420 --> 31:22.420
是平顶

31:22.420 --> 31:24.420
那么产生了Promise三

31:24.420 --> 31:25.420
针对Promise二的后续处理

31:26.420 --> 31:27.420
它也只能是平顶

31:27.420 --> 31:28.420
它是一条链的

31:29.420 --> 31:30.420
Promise二为什么是平顶

31:30.420 --> 31:32.420
因为它要等待Promise一

31:32.420 --> 31:34.420
Promise三为什么是平顶

31:34.420 --> 31:35.420
因为它要等待Promise二

31:36.420 --> 31:38.420
所以是三个一定是平顶

31:38.420 --> 31:39.420
因此它不看最后一句话

31:41.420 --> 31:43.420
前边得到的结果一定是三个平顶

31:45.420 --> 31:46.420
对不对

31:46.420 --> 31:47.420
好 接下来我们再看

31:50.420 --> 31:54.050
接下来我们开始运行哪个回调函数

31:54.050 --> 31:55.050
是不是运行它

31:55.050 --> 31:56.050
一秒钟到了

31:56.050 --> 31:57.050
一秒钟到了过后

31:57.050 --> 31:58.050
我们会怎么样

31:58.050 --> 32:01.050
把Promise一变成什么

32:04.050 --> 32:05.050
数据是什么

32:05.050 --> 32:06.050
数据是一

32:07.050 --> 32:10.050
它Promise一是不是完成了

32:10.050 --> 32:12.050
接下来我们要看一下Promise二

32:12.050 --> 32:16.050
Promise二有没有针对它完成进行处理

32:17.050 --> 32:19.050
如果说Promise二

32:19.050 --> 32:20.050
没有针对它完成进行处理

32:20.050 --> 32:22.050
它只处理了错误

32:22.050 --> 32:23.050
假设是这种情况

32:23.050 --> 32:25.050
或者是这里写的是开启

32:26.050 --> 32:28.050
就是我没有针对它完成进行处理

32:28.050 --> 32:29.050
那么Promise二

32:29.050 --> 32:30.050
那毫无疑问

32:30.050 --> 32:31.050
跟Promise一一样

32:32.050 --> 32:33.050
对吧

32:33.050 --> 32:34.050
我们刚才说了一二三

32:34.050 --> 32:35.050
第一个点

32:35.050 --> 32:36.050
但是这里不是这样子

32:37.050 --> 32:38.050
这里是

32:38.050 --> 32:41.050
我有没有针对Promise一做后续完成

32:41.050 --> 32:42.050
就是成功做后续处理呢

32:42.050 --> 32:43.050
有

32:44.050 --> 32:45.050
有的话

32:45.050 --> 32:47.050
就是我们把这个输出打印一下

32:47.050 --> 32:49.050
一刚才输出的是

32:49.050 --> 32:51.050
平顶

32:51.050 --> 32:53.050
三个平顶

32:53.050 --> 32:54.050
对吧

32:54.050 --> 32:56.050
三个挂起的Promise

32:56.050 --> 32:58.050
然后现在到这了

32:58.050 --> 33:00.050
Promise一已经完成了

33:00.050 --> 33:01.050
数据是一

33:01.050 --> 33:02.050
Promise二的状态

33:02.050 --> 33:05.050
它要取决于针对这个成功的

33:05.050 --> 33:06.050
后续处理

33:06.050 --> 33:08.050
看一下整个过程有没有错

33:08.050 --> 33:09.050
这过程你觉得有

33:09.050 --> 33:11.050
会不会有错

33:11.050 --> 33:12.050
不会有错

33:12.050 --> 33:13.050
对吧

33:13.050 --> 33:14.050
它这里输出了啥

33:14.050 --> 33:16.050
输出了它完成的数据一

33:16.050 --> 33:18.050
输出了一

33:18.050 --> 33:20.050
说整个执行过程中没有错

33:20.050 --> 33:21.050
没有错

33:21.050 --> 33:22.050
我毫无疑问

33:22.050 --> 33:24.050
Promise二也会跟着完成

33:25.050 --> 33:27.050
它只取决于

33:27.050 --> 33:28.050
那个

33:28.050 --> 33:29.050
后续处理的过程

33:29.050 --> 33:30.050
有没有错

33:30.050 --> 33:31.050
没有错

33:31.050 --> 33:32.050
它就完成

33:32.050 --> 33:33.050
完成之后

33:34.050 --> 33:35.050
数据是什么

33:35.050 --> 33:37.050
数据它的返回是

33:37.050 --> 33:38.050
data是一

33:38.050 --> 33:39.050
data是一加音等于二

33:39.050 --> 33:40.050
返回二

33:40.050 --> 33:42.050
那么它的数据又是二

33:43.050 --> 33:44.050
没了意思吧

33:45.050 --> 33:46.050
好

33:46.050 --> 33:47.050
那么我们再看Promise三

33:47.050 --> 33:48.050
Promise二完成了

33:48.050 --> 33:49.050
是不是要运行这个

33:49.050 --> 33:51.050
那么Promise三的状态

33:51.050 --> 33:52.050
是不是要取决于

33:52.050 --> 33:53.050
这个的运行过程

33:54.050 --> 33:55.050
那么运行过程有没有

33:55.050 --> 33:57.050
运行过程就输出了

33:58.050 --> 33:59.050
你看Promise二完成的数据

33:59.050 --> 34:00.050
是二

34:00.050 --> 34:01.050
那么二就传过来了

34:01.050 --> 34:02.050
Promise二的数据

34:02.050 --> 34:03.050
就传过来了

34:03.050 --> 34:04.050
这里输出二

34:06.050 --> 34:07.050
返回的是什么

34:07.050 --> 34:08.050
那么Promise三

34:08.050 --> 34:09.050
它的状态就取决于

34:09.050 --> 34:11.050
取决于这个函数的运行过程

34:11.050 --> 34:12.050
运行过程有错吗

34:12.050 --> 34:13.050
没有错

34:13.050 --> 34:14.050
所以说它也是forfill

34:16.050 --> 34:17.050
forfill

34:18.050 --> 34:19.050
数据是forfill

34:21.050 --> 34:22.050
好

34:22.050 --> 34:24.050
那么这就是输出完了

34:24.050 --> 34:25.050
然后等待两秒钟之后

34:25.050 --> 34:27.050
再重新输出状态的话

34:27.050 --> 34:28.050
就输出这么一个状态

34:29.050 --> 34:31.050
forfill的数据一

34:32.050 --> 34:33.050
就这样的记录吧

34:33.050 --> 34:34.050
数据一

34:34.050 --> 34:37.050
然后forfill的数据二

34:37.050 --> 34:40.050
然后forfill的数据undefined

34:41.050 --> 34:42.050
好

34:42.050 --> 34:44.620
大部分运行看一下

34:44.620 --> 34:45.620
你看

34:45.620 --> 34:46.620
第一个是不是三个平底

34:46.620 --> 34:47.620
然后输出一二

34:47.620 --> 34:48.620
一二undefined

34:50.930 --> 34:51.930
没问题吧

34:51.930 --> 34:53.930
这就是这么一个场景

34:55.930 --> 34:56.930
通过这道题

34:56.930 --> 34:58.930
大家好好去再去梳理一下

34:58.930 --> 34:59.930
那一二三个点

34:59.930 --> 35:03.620
怎么去运用到面试题当中

35:03.620 --> 35:04.620
好

35:04.620 --> 35:05.620
再改一下

35:05.620 --> 35:06.620
多改一下

35:06.620 --> 35:07.620
这一题

35:08.620 --> 35:10.620
一直当我来恶心里面

35:10.620 --> 35:11.620
其实好得多

35:12.620 --> 35:14.620
我不是我想恶心里面

35:14.620 --> 35:15.620
是因为这些面试题

35:15.620 --> 35:16.620
本来就挺恶心的

35:17.620 --> 35:18.620
一二十六这一块

35:18.620 --> 35:19.620
就是这个麻烦

35:20.620 --> 35:22.620
只要过去了就没啥了

35:22.620 --> 35:24.620
我多恶心里面一下吧

35:24.620 --> 35:26.620
避免以后多练里面一下

35:27.620 --> 35:28.620
避免以后被面试关了

35:28.620 --> 35:29.620
你

35:29.620 --> 35:31.620
被我练其实没啥

35:32.620 --> 35:33.620
好

35:33.620 --> 35:34.620
我们这里呢

35:34.620 --> 35:36.620
比方说我就随便改一下

35:37.620 --> 35:38.620
好

35:38.620 --> 35:39.620
又来说

35:39.620 --> 35:42.960
说结果

35:42.960 --> 35:43.960
好

35:43.960 --> 35:44.960
又来吧

35:44.960 --> 35:45.960
我们再来分析一次

35:45.960 --> 35:46.960
Promise一一开

35:46.960 --> 35:47.960
状态是什么了

35:47.960 --> 35:48.960
状态

35:48.960 --> 35:49.960
肯定是平定吗

35:49.960 --> 35:50.960
Promise二

35:50.960 --> 35:51.960
肯定是平定

35:51.960 --> 35:53.960
就前面这个任务没完成

35:53.960 --> 35:54.960
后面的任务一定是平定

35:54.960 --> 35:55.960
一定是没完成的

35:55.960 --> 35:56.960
Promise三

35:56.960 --> 35:57.960
一定是平定

35:57.960 --> 35:58.960
这个毫无疑问

35:58.960 --> 35:59.960
所以我一开始输出

35:59.960 --> 36:00.960
平定

36:00.960 --> 36:01.960
平定

36:01.960 --> 36:02.960
这个不变

36:02.960 --> 36:03.960
好

36:03.960 --> 36:05.960
完成了

36:05.960 --> 36:07.960
数据为一

36:07.960 --> 36:09.960
接下来看Promise二

36:09.960 --> 36:12.960
Promise二有没有针对

36:12.960 --> 36:14.960
Promise一的完成

36:14.960 --> 36:15.960
做处理

36:15.960 --> 36:16.960
没有

36:16.960 --> 36:18.960
没有针对它的完成做处理

36:18.960 --> 36:20.960
所以Promise二的状态

36:20.960 --> 36:21.960
也是完成

36:21.960 --> 36:23.960
跟Promise一一模一样

36:23.960 --> 36:24.960
数据也是一

36:25.960 --> 36:26.960
对吧

36:26.960 --> 36:28.960
然后Promise三有没有针对

36:28.960 --> 36:30.960
Promise二的完成

36:30.960 --> 36:31.960
做处理呢

36:31.960 --> 36:32.960
有

36:33.960 --> 36:34.960
那么输出什么

36:34.960 --> 36:36.960
输出完成的数据一

36:36.960 --> 36:38.960
说说这里会输出一

36:38.960 --> 36:39.960
Promise三的状态取决于

36:39.960 --> 36:41.960
这个函数的运行结果

36:41.960 --> 36:43.960
运行过程有没有错

36:43.960 --> 36:44.960
运行过程没有错

36:44.960 --> 36:46.960
所以说得到ful filled

36:46.960 --> 36:47.960
然后呢

36:47.960 --> 36:51.460
数据是on defined

36:51.460 --> 36:53.460
好 因此最后是输出

36:53.460 --> 36:56.460
一一on defined

36:56.460 --> 36:57.460
看一看

36:58.460 --> 36:59.460
三个平定

36:59.460 --> 37:00.460
然后输出一

37:00.460 --> 37:03.460
然后输出一一on defined

37:03.460 --> 37:04.460
对吧

37:05.460 --> 37:07.460
好 再来

37:07.460 --> 37:09.460
多来几个

37:11.460 --> 37:12.460
这边呢

37:12.460 --> 37:13.460
我就

37:13.460 --> 37:17.220
我直接看第二题吧

37:17.220 --> 37:18.220
第二题就是说的时间

37:19.220 --> 37:20.220
我把这个题

37:21.220 --> 37:22.220
题再复制一份

