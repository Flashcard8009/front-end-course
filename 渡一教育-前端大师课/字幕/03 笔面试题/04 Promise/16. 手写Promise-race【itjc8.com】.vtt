WEBVTT

00:00.300 --> 00:04.140
好了 同学们 我们这节课呢来实现Race 方法

00:04.140 --> 00:07.740
这个Race 方法呢 简单介绍一下

00:07.740 --> 00:12.020
就好像赛跑一样 我不管你是成功还是失败

00:12.020 --> 00:15.860
我只看第一个到达终点的人

00:15.860 --> 00:18.260
第一个到达终点 无论是什么样的结果

00:18.260 --> 00:21.500
就第一个有结果的 你成功了 那我就跟着成功

00:21.500 --> 00:24.580
你失败了 我就跟着失败 成功的数据跟你一样

00:24.580 --> 00:28.900
失败的原因也跟你一样 比方说这里有三个Permission

00:29.260 --> 00:31.740
第一个 第二个 第一个等待一秒钟之后失败

00:31.740 --> 00:34.060
第二个等待五百毫秒之后成功

00:34.060 --> 00:35.980
第三个就是一个数字 当然我们知道

00:35.980 --> 00:38.460
这个玩意会被包装成一个Promise

00:38.460 --> 00:40.900
那么我们返回的Promise是成功还是失败呢

00:40.900 --> 00:43.820
通过Race 那肯定是成功

00:43.820 --> 00:45.740
为什么 因为它是最先成功的 对吧

00:45.740 --> 00:48.180
这个Promise就是一个已完成的Promise

00:48.180 --> 00:51.540
它数据是5 所以说我们这里呢会得到这个数据

00:51.540 --> 00:56.520
5 把我们这里打印一下 成功

00:56.560 --> 01:01.500
然后呢这里是失败

01:01.500 --> 01:04.540
好运行啊 成功 对吧

01:04.540 --> 01:06.300
那怎么说把这个5去掉

01:06.300 --> 01:09.100
那自然而然 它先完成 它是成功的

01:09.100 --> 01:12.380
那我这个Promise就是成功的 一

01:12.380 --> 01:15.100
那如果把它变成一千五百毫秒 再来

01:16.700 --> 01:17.300
那就失败

01:18.620 --> 01:20.380
看到没 就这么简单

01:20.380 --> 01:21.660
那这个函数怎么写呢

01:21.660 --> 01:23.700
我们可以发挥自己的聪明材质

01:25.660 --> 01:27.780
这一边是传入一个Promise

01:27.780 --> 01:28.860
当然也是一个迭代器

01:30.500 --> 01:31.500
好 来吧

01:33.500 --> 01:35.500
这边是Actuator

01:37.500 --> 01:38.500
这里是表示什么意思呢

01:40.500 --> 01:47.500
返回的Promise与第1个有结果的遗址

01:47.500 --> 01:53.340
好了 那么这个函数呢 怎么实现呢

01:53.340 --> 01:56.340
那太简单了 那简单的令人发指

01:56.340 --> 01:58.340
怎么个简单法呢 你看

01:58.340 --> 02:01.340
我就循环便利这个这些Promise

02:02.340 --> 02:05.340
当然我这里要返回一个Promise

02:05.340 --> 02:06.340
Return

02:06.340 --> 02:07.340
New

02:07.340 --> 02:09.340
MyPromise

02:09.340 --> 02:13.340
好 这边我就循环迭代这个Promise

02:13.340 --> 02:15.340
然后每循环一次 对这个Promise说

02:15.340 --> 02:18.340
你如果说成功了 那我就跟着成功了

02:18.340 --> 02:21.340
你失败了 我就跟着失败了

02:21.340 --> 02:23.340
那如果说成功了两个呢 没关系

02:23.340 --> 02:25.340
因为它只认第1次掉用的

02:25.340 --> 02:27.340
对吧 这个锐 这个锐 这个锐

02:27.340 --> 02:30.340
只有第1次掉用有效 后续掉用无效了

02:31.340 --> 02:33.340
没了 就写完了

02:33.340 --> 02:37.340
好 咱们来试一下 我们把它换成MyPromise

02:39.340 --> 02:41.340
换成MyPromise 试一下

02:42.340 --> 02:44.340
当然我还是要做这个页色

02:44.340 --> 02:47.340
MyPromise Result

02:47.340 --> 02:52.510
好 英雄

02:53.510 --> 02:54.510
是不是完全一样的 对吧

02:54.510 --> 02:56.510
我们再把它换成500

02:57.510 --> 02:58.510
500毫秒之后成功

02:58.510 --> 03:00.510
然后再把它加一个5

03:02.820 --> 03:03.820
就成功

03:03.820 --> 03:04.820
完全一样的

03:04.820 --> 03:06.820
那就说那传统组组组怎么样

03:06.820 --> 03:08.820
那传统组组组的话 进不了循环

03:08.820 --> 03:10.820
进不了循环这个Promise永远等待

03:10.820 --> 03:12.820
这就是官方 官方就是这样子做的

03:12.820 --> 03:15.820
所以说一定要去参考那个MDN稳当

03:15.820 --> 03:17.820
他是怎么说的 我就怎么做

03:17.820 --> 03:18.820
不会乱来的

03:18.820 --> 03:20.820
OK 那么这就是实现了

03:20.820 --> 03:21.820
Res

03:22.820 --> 03:24.820
好 其实到这我们Promise

03:24.820 --> 03:25.820
其实还有一个API

03:25.820 --> 03:27.820
这个API叫做ND

03:27.820 --> 03:28.820
这个API我不实现了

03:28.820 --> 03:29.820
为什么呢

03:29.820 --> 03:30.820
因为目前还在试验阶段

03:30.820 --> 03:32.820
将来有可能会变

03:32.820 --> 03:33.820
目前还没有成为正式标准

03:33.820 --> 03:35.820
所以说呢 我们到这儿呢

03:35.820 --> 03:37.820
就把Promise所有的静态方法

03:37.820 --> 03:38.820
包括PromiseA加规范

03:38.820 --> 03:40.820
包括它的实力方法 对吧

03:40.820 --> 03:42.820
还翻得离开去 全部实现了

03:42.820 --> 03:43.820
你们以后在面试的时候

03:43.820 --> 03:45.820
它不会考虑的

03:45.820 --> 03:47.820
让你把所有的全部写出来

03:47.820 --> 03:48.820
那这个时间有点长

03:48.820 --> 03:51.820
它可能没有那么多时间和力气

03:51.820 --> 03:53.820
但是它可能会怎么去考虑

03:53.820 --> 03:54.820
通常情况下

03:54.820 --> 03:55.820
它会考虑写单个方法

03:55.820 --> 03:56.820
一个时候实现一个

03:56.820 --> 03:58.820
哦 这是比较多的

03:58.820 --> 04:00.820
你看后边的方法都比较简单 对吧

04:00.820 --> 04:01.820
它可能稍微有点难度的话

04:01.820 --> 04:03.820
就让你去实现一个哦

04:03.820 --> 04:05.820
不会让你去写A加

04:05.820 --> 04:08.820
但也有可能会让你去写A加规范

04:08.820 --> 04:10.820
那写出来 你就把我这个套写出来

04:10.820 --> 04:13.820
这个质量是非常高的

04:13.820 --> 04:15.820
好了 那么 如果同学们到这儿

04:15.820 --> 04:18.820
能够理解我们之前讲的所有内容的话

04:18.820 --> 04:19.820
那你对Promise的了解

04:19.820 --> 04:20.820
不仅对Promise的了解

04:20.820 --> 04:22.820
非常非常透彻的

04:22.820 --> 04:24.820
同时你的编程能力

04:24.820 --> 04:25.820
和程序思维能力

04:25.820 --> 04:27.820
也上升了一个台阶

04:27.820 --> 04:28.820
OK 同学们

04:28.820 --> 04:30.820
Promise的讲解就到此结束了

04:30.820 --> 04:32.820
将来如果说有一些新的API的话

04:32.820 --> 04:34.820
我再考虑去加一个课程

04:34.820 --> 04:36.820
其实后边加一些API的话

04:36.820 --> 04:38.820
同学们都可以自己尝试着自己实现了

04:38.820 --> 04:39.820
并不复杂

