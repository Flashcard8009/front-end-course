WEBVTT

00:02.480 --> 00:08.480
各位同学 大家好 再节课 我们继续案例课程制作的一个学习

00:08.480 --> 00:14.880
那么通过之前课程的一个学习 我们已经完成了员工分析

00:14.880 --> 00:20.280
出勤统计以及员工列表 包括我们部门直级

00:20.280 --> 00:25.280
技校考核的一个相关内容的实现

00:25.280 --> 00:29.280
那在这个里面呢 我们的项目本身

00:29.280 --> 00:35.280
我们要明确两件事情 首先第一 我们不注重UI细节的处理

00:35.280 --> 00:39.280
因为我们可以看到这个UI确实长得不大低 对不对

00:39.280 --> 00:44.280
第二 我们对这个数据的真实性以及它的这个

00:44.280 --> 00:49.280
关联性 数据的一个关联性 那这个里面呢 我们只要

00:49.280 --> 00:53.280
跑通常规的一个关联处理就可以

00:53.280 --> 00:58.280
然后呢 至于更加严谨的一个业务逻辑 因为我们这是模拟的数据嘛

00:58.280 --> 01:01.280
我们自己来把控 对不对 所以说呢 这个我们也不是特别纠结

01:01.280 --> 01:05.280
那我们重点主要来考虑的是哪个问题呢

01:05.280 --> 01:11.280
首先第一个 就是了解我们整个业务实现里面的一个流程

01:11.280 --> 01:14.280
包括我们每一步逻辑的一个处理

01:14.280 --> 01:19.280
还有一个问题就是什么呢 我们的组件化的一个开发的特性

01:19.280 --> 01:24.280
在我们本案例里面的一个体现 那这个呢 当我们进行开发

01:24.280 --> 01:28.280
完成一个两个这种模块之后 你就会发现

01:28.280 --> 01:33.280
我们子武驾化的一个优点 以及呀 它的一些可复用性

01:33.280 --> 01:37.280
可扩展性如何来实现 那其实呢 在我们这个案例里面

01:37.280 --> 01:40.280
它都是有体现出来的 对不对

01:40.280 --> 01:43.280
还有一个是什么呢 就是我们对5米呀

01:43.280 --> 01:47.280
包括我们笛瓦的一个数据流

01:47.280 --> 01:52.280
然后呢 它整个的一个实现过程 我们要有一个深层的理解

01:52.280 --> 01:57.280
也就是说 在我们以前学习这些相应的API的同时

01:57.280 --> 02:03.280
那么通过这个案例呢 结合起来 我们之前所学到的相关的React的知识

02:03.280 --> 02:07.280
来打造这样一个OA的管理系统

02:07.280 --> 02:11.280
当然了 我们这个啊 跟原型比 我们今天啊 到现在为止

02:11.280 --> 02:15.280
可以看一下原型了 如果说我们这个跟原型比呢

02:15.280 --> 02:18.280
可能是啊 还差的很多 但是呢

02:18.280 --> 02:21.280
这个已经具备了一个管理系统

02:21.280 --> 02:24.280
所具有的一些相应特征的一个出行

02:24.280 --> 02:28.280
也就是说 你在这个基础上 可以实现一个

02:28.280 --> 02:32.280
比较完善的管理系统的一个制作 包括它中间的一个分层

02:32.280 --> 02:36.280
那在这个里面呢 我们都是有一些体会的

02:36.280 --> 02:40.280
然后我们现在还差了三个模块 比如说调情记录

02:40.280 --> 02:43.280
讲乘记录 考情信息 那这三个模块呢

02:43.280 --> 02:46.280
因为他们的这个重复性是比较大的

02:46.280 --> 02:50.280
所以说在这个里面呢 我们就不再进行一个代码的讲解了

02:50.280 --> 02:54.280
其实你如果说能把员工这个模块

02:54.280 --> 02:57.280
里面的所有业务罗去搞清楚

02:57.280 --> 03:00.280
然后呢 你调理清晰的 能实现的话

03:00.280 --> 03:04.280
那对于我们来讲啊 像直级技校考核

03:04.280 --> 03:08.280
以及我们的讲乘 包括考情信息

03:08.280 --> 03:11.280
这些模块 其实呢 我们实现起来

03:11.280 --> 03:16.280
只不过是更改一些API的这样一个操作而已

03:16.280 --> 03:20.280
至于其他的也没有特别多的这个比较复杂内容

03:20.280 --> 03:24.280
我们在写一些相应的模块的时候 我们要注意几点

03:24.280 --> 03:27.280
首先第一呢 我们在处理它的时候

03:27.280 --> 03:30.280
要严格遵照我们的一个文档

03:30.280 --> 03:33.280
那比如说 我们要制作这种调情记录

03:33.280 --> 03:36.280
讲乘记录 考情信息了 首先你做哪一个

03:36.280 --> 03:41.280
那我们要指定哪一个文件夹下一些必要的

03:41.280 --> 03:45.280
相关的文件 比如说我们定一个compromise

03:45.280 --> 03:47.280
那像这种啊 我们制作

03:47.280 --> 03:51.280
如果说我们要是制作这种考情信息的话

03:51.280 --> 03:55.280
那你看考情信息 因为路由是后端给你返回的

03:55.280 --> 03:59.280
对不对 那这里面要找到一个什么SRC pages

03:59.280 --> 04:03.280
你要定一个跟后端路由完全一致的这么一个文件夹

04:03.280 --> 04:07.280
也就是说attentive info 定义完成之后

04:07.280 --> 04:10.280
这个里面就会有相应的文件了

04:10.280 --> 04:16.280
那这个index model 这个已经我们形成了一种什么呢

04:16.280 --> 04:19.280
规矩 那是什么呢 这种规律就是

04:19.280 --> 04:24.280
我们只要创建一个模块 那这个模块里面就有自己的状态

04:24.280 --> 04:27.280
还有一个呢 是我们的这个跟组夹

04:27.280 --> 04:32.280
那这个跟组夹里面就包含了我们界面所展示的相关的内容

04:32.280 --> 04:35.280
那比如说我们看到这个某一个模块的时候

04:35.280 --> 04:38.280
你会发现 头部的内容是可附用的 对不对

04:38.280 --> 04:41.280
那头部内容可附用的 如何来进行批量删除

04:41.280 --> 04:44.280
那这个批量删除 其实我们每一个模块

04:44.280 --> 04:47.280
因为自己都有删除的API方法调用

04:47.280 --> 04:51.280
那我们在这个时候 如果说你当前组件使用到

04:51.280 --> 04:54.280
这个头部组件的时候 那你就可以给他传一个

04:54.280 --> 04:57.280
专门针对删除的处理的这样一个API 对不对

04:57.280 --> 05:00.280
这是第一个 之后呢 我们的一个分页也是

05:00.280 --> 05:03.280
同时呢 你为他传递一个相应的

05:03.280 --> 05:06.280
我们的一个数据的总数给他

05:06.280 --> 05:10.280
然后呢 使用我们安底站的这个Patreon

05:10.280 --> 05:12.280
这个组件来实现 是不就OK了

05:12.280 --> 05:14.280
所以说呢 你知道 就是在

05:14.280 --> 05:16.280
如果说你想再扩展一个模块

05:16.280 --> 05:19.280
那再扩展一个模块 那你直接你先来想

05:19.280 --> 05:21.280
看到这块你就会明白了 OK

05:21.280 --> 05:23.280
这边应该怎么做

05:23.280 --> 05:25.280
然后呢 我右面分页应该怎么做

05:25.280 --> 05:28.280
这个呢 我们大概要有一个思路

05:28.280 --> 05:31.280
然后包括我们側边蓝的一个展示

05:31.280 --> 05:34.280
那側边蓝展示我们知道 这里面还是分为什么呢

05:34.280 --> 05:38.280
可附用的 还有当前模块的一个私有的组件

05:38.280 --> 05:41.280
比如说我们这个里面展示的搜索员工

05:41.280 --> 05:44.280
那这个搜索员工呢 其实他就是一个私有组件的

05:44.280 --> 05:47.280
对不对 那我们对这种私有组件的处理

05:47.280 --> 05:51.280
就是在我们当前的模块下来进行定义

05:51.280 --> 05:54.280
那比如说我们这个坦茨基因Fal下面

05:54.280 --> 05:56.280
我们搞了一个FilterFarm

05:56.280 --> 06:00.280
FilterFarm里面呢 就专门针对我们这个

06:00.280 --> 06:03.280
表单来进行一个指定的

06:03.280 --> 06:05.280
我们一个数据的输出 是不是就OK了

06:05.280 --> 06:07.280
那你像这种清空操作

06:07.280 --> 06:11.280
那它呢 实现的这个根本就是我们通过Debus

06:11.280 --> 06:13.280
在全局的公共状态下

06:13.280 --> 06:16.280
维护了一个EathClear这种属性

06:16.280 --> 06:18.280
那这个EathClear属性

06:18.280 --> 06:19.280
我们也可以理解为状态

06:19.280 --> 06:20.280
它是做什么用的呢

06:20.280 --> 06:22.280
当你处罚它之后

06:22.280 --> 06:23.280
我们在每个组件里面

06:23.280 --> 06:25.280
都可以对它进行一个监听

06:25.280 --> 06:27.280
如果说改变为初

06:27.280 --> 06:29.280
那也就是说现在你有清空操作 对吧

06:29.280 --> 06:30.280
假如说我们现在搜一个

06:30.280 --> 06:32.280
搜王英没有人 对不对

06:32.280 --> 06:33.280
那我一点击清空操作

06:33.280 --> 06:36.280
这个时候它整个处罚流程是什么

06:36.280 --> 06:39.280
首先呢 改变我们DWA里面

06:39.280 --> 06:41.280
保存的这样一个状态

06:41.280 --> 06:44.280
你这个状态我们要修改完成之后

06:44.280 --> 06:45.280
那这个时候呢

06:45.280 --> 06:48.280
我们对这个表单进行一个重置

06:48.280 --> 06:51.280
也就是说我们可以做一个因Eath Lease

06:51.280 --> 06:52.280
这样一个操作

06:52.280 --> 06:53.280
那至于做因Eath Lease

06:53.280 --> 06:54.280
我们在哪一个里面做呢

06:54.280 --> 06:55.280
我们可以针对

06:55.280 --> 06:58.280
每一个模块里面来实现

06:58.280 --> 07:00.280
这种因Eath Lease的这么一个功能

07:00.280 --> 07:01.280
其实呢

07:01.280 --> 07:03.280
你在想到这块的时候

07:03.280 --> 07:04.280
那脑子里面呢

07:04.280 --> 07:06.280
要有这种想法要形成

07:06.280 --> 07:07.280
所以说如果说

07:07.280 --> 07:08.280
你只要有这种想法形成了

07:08.280 --> 07:09.280
然后呢

07:09.280 --> 07:11.280
你才可以动手来实现

07:11.280 --> 07:12.280
是非常快的

07:12.280 --> 07:14.280
像这种表格

07:14.280 --> 07:15.280
那表格啊

07:15.280 --> 07:16.280
其实它作为我们展示的

07:16.280 --> 07:17.280
非常主要的一部分

07:17.280 --> 07:19.280
这个展示啊

07:19.280 --> 07:20.280
里面啊

07:20.280 --> 07:21.280
我们呢

07:21.280 --> 07:22.280
它这个展示

07:22.280 --> 07:23.280
其实是分为两部分的

07:23.280 --> 07:24.280
有哪两部分呢

07:24.280 --> 07:25.280
首先

07:25.280 --> 07:26.280
第一个就是

07:26.280 --> 07:28.280
我们的这个静态展示

07:28.280 --> 07:29.280
还有一个呢

07:29.280 --> 07:30.280
就是我们这里面

07:30.280 --> 07:32.280
可以对它进行一个编辑

07:32.280 --> 07:34.280
那对它进行编辑的时候

07:34.280 --> 07:36.280
我们要明确一点是什么呢

07:36.280 --> 07:38.280
当你编辑完成之后

07:38.280 --> 07:39.280
那你这个表格

07:39.280 --> 07:40.280
要进行同步的一个修改

07:40.280 --> 07:41.280
而且呢

07:41.280 --> 07:42.280
我们编辑啊

07:42.280 --> 07:44.280
只针对当前单元格的

07:44.280 --> 07:46.280
一个编辑处理

07:46.280 --> 07:47.280
这个呢

07:47.280 --> 07:48.280
就是它的一个特点

07:48.280 --> 07:50.280
我们还可以处发

07:50.280 --> 07:51.280
通过表格

07:51.280 --> 07:52.280
处发我们

07:52.280 --> 07:54.280
详情的一个展示

07:54.280 --> 07:55.280
当然了

07:55.280 --> 07:56.280
我们这个里面啊

07:56.280 --> 07:57.280
详情的内容

07:57.280 --> 07:58.280
相对是比较少的

07:58.280 --> 07:59.280
也就是说

07:59.280 --> 08:01.280
我们看这种烤琴

08:01.280 --> 08:02.280
它的内容不多

08:02.280 --> 08:03.280
然后呢

08:03.280 --> 08:04.280
你像这种讲诚啊

08:04.280 --> 08:05.280
调心呢

08:05.280 --> 08:06.280
确实内容也不是特别多

08:06.280 --> 08:07.280
什么时候比较多呢

08:07.280 --> 08:08.280
如果说

08:08.280 --> 08:09.280
你在看这个员工

08:09.280 --> 08:11.280
当我们在员工模块

08:11.280 --> 08:13.280
打开详情的时候

08:13.280 --> 08:15.280
那这个里面的数据啊

08:15.280 --> 08:16.280
就相对比较多了

08:16.280 --> 08:17.280
比如说

08:17.280 --> 08:18.280
我们可以有这种

08:18.280 --> 08:20.280
图片上传组件对不对

08:20.280 --> 08:21.280
然后呢

08:21.280 --> 08:22.280
我们还有一些啊

08:22.280 --> 08:24.280
自己的内置表单

08:24.280 --> 08:25.280
那这些内置表单里面

08:25.280 --> 08:26.280
我们又涉及到

08:26.280 --> 08:28.280
下拉菜单的一个

08:28.280 --> 08:29.280
列表的一个获取

08:29.280 --> 08:31.280
那其实这里面

08:31.280 --> 08:33.280
我们的这个逻辑处理啊

08:33.280 --> 08:34.280
基本上就可以形成

08:34.280 --> 08:36.280
多层嵌套的这么一个关系

08:36.280 --> 08:38.280
那既然多层嵌套了

08:38.280 --> 08:39.280
而且呢

08:39.280 --> 08:40.280
像我们这种

08:40.280 --> 08:41.280
下拉可选的列表

08:41.280 --> 08:42.280
那这种啊

08:42.280 --> 08:43.280
它首先呢

08:43.280 --> 08:44.280
数据啊

08:44.280 --> 08:46.280
有具有这个什么

08:46.280 --> 08:47.280
一个附用线

08:47.280 --> 08:48.280
还有一个是

08:48.280 --> 08:49.280
我们的这个

08:49.280 --> 08:50.280
Ui界面

08:50.280 --> 08:51.280
它在每一个模块里面

08:51.280 --> 08:52.280
如果说

08:52.280 --> 08:53.280
你使用到这种下拉菜单

08:53.280 --> 08:55.280
基本上都是一致的

08:55.280 --> 08:56.280
所以说呢

08:56.280 --> 08:57.280
我们在制作的过程当中

08:57.280 --> 08:58.280
可能你一开始

08:58.280 --> 08:59.280
没有想到

08:59.280 --> 09:00.280
对组件的进行抽取

09:00.280 --> 09:01.280
那么假如说

09:01.280 --> 09:02.280
你红丸呢

09:02.280 --> 09:03.280
把整个的

09:03.280 --> 09:04.280
我们所有的模块

09:04.280 --> 09:05.280
都看完之后

09:05.280 --> 09:06.280
你会发现

09:06.280 --> 09:07.280
像这种下拉菜单

09:07.280 --> 09:08.280
比如说

09:08.280 --> 09:09.280
啊这里

09:09.280 --> 09:10.280
点击搜索员空

09:10.280 --> 09:11.280
你会发现

09:11.280 --> 09:12.280
它有很多

09:12.280 --> 09:13.280
只不过是呢

09:13.280 --> 09:14.280
里面请求的数据

09:14.280 --> 09:15.280
不一样而已

09:15.280 --> 09:16.280
到这了

09:16.280 --> 09:17.280
直到它有很多

09:17.280 --> 09:19.280
里面请求的数据不同

09:19.280 --> 09:20.280
那这个时候怎么办

09:20.280 --> 09:21.280
我们就可以啊

09:21.280 --> 09:22.280
尝试来进行

09:22.280 --> 09:24.280
一个组件的抽取

09:24.280 --> 09:25.280
当然组件抽取的时候

09:25.280 --> 09:26.280
你首先第一点

09:26.280 --> 09:27.280
你要考虑的是什么呢

09:27.280 --> 09:29.280
我们这个组件里面

09:29.280 --> 09:31.280
它能做什么

09:31.280 --> 09:33.280
公共性的内容有哪些

09:33.280 --> 09:34.280
比如说这些分线展示

09:34.280 --> 09:35.280
搜索的一个组件

09:35.280 --> 09:36.280
那像

09:36.280 --> 09:37.280
不管是我进行

09:37.280 --> 09:38.280
员工搜索

09:38.280 --> 09:40.280
还是说在员工里面

09:40.280 --> 09:41.280
我们对部门啊

09:41.280 --> 09:42.280
以及这个直级搜索

09:42.280 --> 09:43.280
其实呢

09:43.280 --> 09:45.280
它都是

09:45.280 --> 09:46.280
附用的

09:46.280 --> 09:47.280
那既然在

09:47.280 --> 09:48.280
一个组件里面

09:48.280 --> 09:49.280
某些功能是附用的

09:49.280 --> 09:50.280
那这个时候呢

09:50.280 --> 09:52.280
我们只需要进行

09:52.280 --> 09:54.280
一个传入相应的API

09:54.280 --> 09:55.280
来做一个什么

09:55.280 --> 09:56.280
更改就可以了

09:56.280 --> 09:57.280
比如说我们

09:57.280 --> 09:59.280
对这种表格内容

09:59.280 --> 10:00.280
也就是说这个

10:00.280 --> 10:01.280
Value值的一个渲染

10:01.280 --> 10:02.280
那我们根据

10:02.280 --> 10:03.280
每一个表格

10:03.280 --> 10:04.280
比如啊

10:04.280 --> 10:05.280
现在假如说

10:05.280 --> 10:06.280
是员工的话

10:06.280 --> 10:07.280
那我们这里面

10:07.280 --> 10:08.280
拿一个staff list的

10:08.280 --> 10:09.280
这个staff list里面

10:09.280 --> 10:10.280
我们渲染

10:10.280 --> 10:12.280
可能是user name

10:12.280 --> 10:13.280
对不对

10:13.280 --> 10:14.280
那如果说

10:14.280 --> 10:15.280
是要是在

10:15.280 --> 10:16.280
部门里面

10:16.280 --> 10:17.280
我们渲染的

10:17.280 --> 10:18.280
就是department的

10:18.280 --> 10:19.280
对不对

10:19.280 --> 10:20.280
那这里面

10:20.280 --> 10:21.280
就涉及到两个问题

10:21.280 --> 10:22.280
一个是什么呢

10:22.280 --> 10:23.280
不同模块的

10:23.280 --> 10:25.280
一个请求列表的

10:25.280 --> 10:26.280
这么一个接口

10:26.280 --> 10:27.280
还有一个是

10:27.280 --> 10:29.280
我们这个当前

10:29.280 --> 10:30.280
模块里面的

10:30.280 --> 10:31.280
渲染类型

10:31.280 --> 10:32.280
那比如说

10:32.280 --> 10:33.280
我们这个是department的

10:33.280 --> 10:34.280
那你就可以

10:34.280 --> 10:35.280
给它一个type

10:35.280 --> 10:36.280
对不对

10:36.280 --> 10:37.280
告诉他指定

10:37.280 --> 10:38.280
这个type

10:38.280 --> 10:39.280
就是这个department的

10:39.280 --> 10:40.280
是不是就ok了

10:40.280 --> 10:41.280
这个呢

10:41.280 --> 10:42.280
这个过程

10:42.280 --> 10:44.280
那我们在做这个的时候

10:44.280 --> 10:45.280
还需要注意一点

10:45.280 --> 10:46.280
就是说

10:46.280 --> 10:47.280
在实现这个

10:47.280 --> 10:48.280
案例过程当中

10:48.280 --> 10:49.280
你要啊

10:49.280 --> 10:50.280
经常性的去查看

10:50.280 --> 10:51.280
我们的这个

10:51.280 --> 10:52.280
接口文档

10:52.280 --> 10:53.280
也就是说

10:53.280 --> 10:54.280
你经常性的去看

10:54.280 --> 10:55.280
这个接口文档的APN

10:55.280 --> 10:57.280
只有当你把这个

10:57.280 --> 10:58.280
接口文档APN

10:58.280 --> 10:59.280
仔细的观察完成之后

10:59.280 --> 11:01.280
那我们这个时候呢

11:01.280 --> 11:02.280
才能更准确的

11:02.280 --> 11:04.280
对一些参数啊

11:04.280 --> 11:05.280
比如说入参呢

11:05.280 --> 11:06.280
或者是参数的获取

11:06.280 --> 11:08.280
这些相应的内容的处理

11:08.280 --> 11:10.280
有一定的这个把控

11:10.280 --> 11:11.280
否则呢

11:11.280 --> 11:12.280
你这个里面啊

11:12.280 --> 11:13.280
你去靠拆

11:13.280 --> 11:14.280
那不现实啊

11:14.280 --> 11:15.280
如果说你的这个

11:15.280 --> 11:16.280
呃

11:16.280 --> 11:17.280
弄的js啊

11:17.280 --> 11:18.280
非常好

11:18.280 --> 11:19.280
而且呢

11:19.280 --> 11:20.280
你的这对

11:20.280 --> 11:21.280
AXJS框架

11:21.280 --> 11:22.280
特别熟的话

11:22.280 --> 11:23.280
那可以怎么办

11:23.280 --> 11:24.280
你也可以来尝试性了

11:24.280 --> 11:25.280
因为我们这个里面

11:25.280 --> 11:26.280
会给同学们

11:26.280 --> 11:27.280
一个前端

11:27.280 --> 11:29.280
和后端完整的代码

11:29.280 --> 11:30.280
你拿到这个

11:30.280 --> 11:31.280
后端代码之后

11:31.280 --> 11:32.280
你也可以

11:32.280 --> 11:33.280
进行尝试性的修改

11:33.280 --> 11:34.280
如何来进行修改呢

11:34.280 --> 11:35.280
因为这个

11:35.280 --> 11:37.280
是基于弄的js里面的

11:37.280 --> 11:38.280
AXJS框架

11:38.280 --> 11:39.280
来实现

11:39.280 --> 11:40.280
后端

11:40.280 --> 11:41.280
一个静态接口

11:41.280 --> 11:42.280
地址服务的

11:42.280 --> 11:43.280
这么一个搭建

11:43.280 --> 11:44.280
那这个里面

11:44.280 --> 11:45.280
就涉及到两部分

11:45.280 --> 11:46.280
一个是ctrl

11:46.280 --> 11:47.280
还有一个是

11:47.280 --> 11:48.280
我们的severs

11:48.280 --> 11:49.280
包括这里面

11:49.280 --> 11:50.280
还有一个router

11:50.280 --> 11:51.280
那他呢

11:51.280 --> 11:53.280
可以在这个里面

11:53.280 --> 11:54.280
进行一些

11:54.280 --> 11:55.280
先安的接口的

11:55.280 --> 11:57.280
一个地址的更改

11:57.280 --> 11:58.280
这个你就需要

11:58.280 --> 11:59.280
自己来进行

11:59.280 --> 12:00.280
一个指定查看

12:00.280 --> 12:01.280
如果说

12:01.280 --> 12:02.280
你对这个

12:02.280 --> 12:03.280
AXJS

12:03.280 --> 12:04.280
不是特别了解的话

12:04.280 --> 12:05.280
那你就遵循

12:05.280 --> 12:06.280
这个接口文档

12:06.280 --> 12:07.280
来进行

12:07.280 --> 12:08.280
指定接口的

12:08.280 --> 12:09.280
过去

12:09.280 --> 12:10.280
对不对

12:10.280 --> 12:11.280
是这样

12:11.280 --> 12:12.280
就ok了

12:12.280 --> 12:13.280
我们本节课

12:13.280 --> 12:14.280
其实呢

12:14.280 --> 12:15.280
还剩最后一部分内容

12:15.280 --> 12:16.280
最后一部分内容是什么呢

12:16.280 --> 12:17.280
当我们

12:17.280 --> 12:19.280
全部都发行完成之后

12:19.280 --> 12:20.280
那你这里面

12:20.280 --> 12:21.280
是不是涉及到

12:21.280 --> 12:22.280
一个打包了

12:22.280 --> 12:23.280
对不对

12:23.280 --> 12:24.280
打包

12:24.280 --> 12:25.280
那我们这个里面

12:25.280 --> 12:26.280
应该如何来

12:26.280 --> 12:27.280
实现打包呢

12:27.280 --> 12:28.280
其实

12:28.280 --> 12:29.280
在这个打包先安的

12:29.280 --> 12:30.280
命令

12:30.280 --> 12:31.280
我们在学view的时候

12:31.280 --> 12:32.280
或者是

12:32.280 --> 12:33.280
我们用react

12:33.280 --> 12:34.280
原生框架

12:34.280 --> 12:35.280
打包的时候

12:36.280 --> 12:37.280
我们都要去

12:37.280 --> 12:39.280
进行一个命令的查看

12:39.280 --> 12:40.280
其实呢

12:40.280 --> 12:41.280
在这个里面

12:41.280 --> 12:42.280
Umi也提供了

12:42.280 --> 12:43.280
我们相应的命令

12:43.280 --> 12:44.280
比如说我们这里面

12:44.280 --> 12:45.280
有四大命令

12:45.280 --> 12:46.280
有build的命令

12:46.280 --> 12:47.280
那其实

12:47.280 --> 12:48.280
通过build的命令

12:48.280 --> 12:49.280
我们可以快速的

12:49.280 --> 12:50.280
实现一个打包

12:50.280 --> 12:51.280
我在这里面

12:51.280 --> 12:52.280
给同学们

12:52.280 --> 12:53.280
做一个测试

12:54.280 --> 12:55.280
build的

12:55.280 --> 12:56.280
那这个时候

12:56.280 --> 12:58.280
它就进行给我构建了

12:58.280 --> 12:59.280
构建之后

12:59.280 --> 13:00.280
你会发现这个时候

13:00.280 --> 13:02.280
会出现相应的文件甲

13:02.280 --> 13:03.280
什么样的文件甲呢

13:03.280 --> 13:04.280
这个文件甲

13:04.280 --> 13:05.280
就是我们打包之后的

13:05.280 --> 13:07.280
一个静态资源存放目录

13:07.280 --> 13:08.280
那我们可以把这个

13:08.280 --> 13:10.280
静态资源存放目录

13:10.280 --> 13:12.280
直引给我们后端的服务器

13:12.280 --> 13:13.280
让它呢

13:13.280 --> 13:14.280
从这个里面获取

13:14.280 --> 13:16.280
对应的物理文件

13:16.280 --> 13:18.280
来进行一个展示处理

13:18.280 --> 13:19.280
就ok了

13:19.280 --> 13:20.280
不过这个打包之后

13:20.280 --> 13:21.280
我们也不确定

13:21.280 --> 13:22.280
好多事情

13:22.280 --> 13:23.280
首先

13:23.280 --> 13:24.280
第一个

13:24.280 --> 13:25.280
就是我们打包出来的

13:25.280 --> 13:26.280
这个文件

13:26.280 --> 13:28.280
体积的一个大小

13:28.280 --> 13:29.280
也就是说

13:29.280 --> 13:30.280
这个能是否

13:30.280 --> 13:31.280
可以进行一些优化

13:31.280 --> 13:32.280
比如说我们常用的

13:32.280 --> 13:33.280
一些优化方案

13:33.280 --> 13:34.280
图片的处理

13:34.280 --> 13:35.280
或者是字体样式

13:35.280 --> 13:37.280
引入文件懒家载的

13:37.280 --> 13:38.280
相应的处理

13:38.280 --> 13:39.280
能不能在这个里面做

13:39.280 --> 13:40.280
那这个时候

13:40.280 --> 13:41.280
我们就要看一个

13:41.280 --> 13:42.280
打包的结果

13:42.280 --> 13:44.280
来决定这些事情

13:44.280 --> 13:46.280
如何来进行一个

13:46.280 --> 13:47.280
打包结果的查看

13:47.280 --> 13:49.280
然后决定我们

13:49.280 --> 13:50.280
是否使用这些

13:50.280 --> 13:52.280
相关的打包优化插件

13:52.280 --> 13:53.280
这个时候

13:53.280 --> 13:54.280
我们污蜜

13:54.280 --> 13:56.280
已经给我们提供好了

13:56.280 --> 13:57.280
这个时候

13:57.280 --> 13:58.280
我们就拿来用就可以了

13:59.280 --> 14:00.280
我们看到

14:00.280 --> 14:02.280
现在已经打包完的文件

14:02.280 --> 14:03.280
都存放在

14:03.280 --> 14:04.280
第四目录下面

14:04.280 --> 14:06.280
但是这个第四目录下面

14:06.280 --> 14:07.280
我们现在是

14:07.280 --> 14:08.280
看不到一些

14:08.280 --> 14:10.280
相应的文件体积大小

14:10.280 --> 14:11.280
或者说

14:11.280 --> 14:12.280
我们可以理解为

14:12.280 --> 14:13.280
如果说你这样

14:13.280 --> 14:14.280
进行查看

14:14.280 --> 14:15.280
那这个时候

14:15.280 --> 14:17.280
他的查看

14:17.280 --> 14:18.280
是不是特别方便的

14:18.280 --> 14:19.280
那这个怎么办呢

14:19.280 --> 14:20.280
污蜜里面

14:20.280 --> 14:21.280
对这种操作

14:21.280 --> 14:23.280
给我们已经做了处理

14:23.280 --> 14:24.280
我们直接的

14:24.280 --> 14:25.280
可以使用

14:25.280 --> 14:26.280
Ani Laser

14:26.280 --> 14:28.280
包模块结构分析的工具

14:28.280 --> 14:29.280
然后看到

14:29.280 --> 14:30.280
每一个模块的

14:30.280 --> 14:31.280
一个大小

14:31.280 --> 14:32.280
之后

14:32.280 --> 14:33.280
我们就可以针对

14:33.280 --> 14:34.280
这个模块

14:34.280 --> 14:35.280
如果说特别大

14:35.280 --> 14:36.280
那我们就可以

14:36.280 --> 14:37.280
做一下安续优化

14:37.280 --> 14:38.280
那如何来实现

14:38.280 --> 14:40.280
就是通过Ani Laser

14:40.280 --> 14:41.280
等于1

14:41.280 --> 14:42.280
那这个

14:42.280 --> 14:44.280
我就来写一下

14:44.280 --> 14:45.280
首先

14:45.280 --> 14:46.280
我在Scrib的下面

14:46.280 --> 14:47.280
新创建一个

14:47.280 --> 14:48.280
脚本命令

14:48.280 --> 14:50.280
就是我们的Ani Laser

14:50.280 --> 14:51.280
之后

14:51.280 --> 14:52.280
这里面写一个

14:52.280 --> 14:54.280
Cross ENV

14:54.280 --> 14:55.280
这个里面

14:55.280 --> 14:56.280
Cross ENV之后

14:56.280 --> 14:57.280
Ani Laser

14:57.280 --> 14:58.280
等于1

14:58.280 --> 14:59.280
就可以了

14:59.280 --> 15:00.280
然后你去

15:00.280 --> 15:01.280
有什么问题

15:01.280 --> 15:02.280
咱们在解决

15:02.280 --> 15:03.280
什么问题

15:03.280 --> 15:04.280
那我这里面

15:04.280 --> 15:05.280
如果说

15:05.280 --> 15:06.280
你再进行

15:06.280 --> 15:07.280
打包构建的时候

15:07.280 --> 15:09.280
你先执行Ani Laser

15:09.280 --> 15:10.280
那执行Ani Laser之后

15:10.280 --> 15:11.280
你会发现

15:11.280 --> 15:12.280
马上就不好错

15:12.280 --> 15:13.280
告诉我们

15:13.280 --> 15:15.280
Cross ENV

15:15.280 --> 15:16.280
是没有的

15:16.280 --> 15:17.280
那我们就把

15:17.280 --> 15:18.280
这个包来进行

15:18.280 --> 15:19.280
一个安装

15:19.280 --> 15:22.280
AddCross ENV

15:23.280 --> 15:26.280
当你安装的过程当中

15:26.280 --> 15:27.280
那你再

15:27.280 --> 15:28.280
可以看一下

15:28.280 --> 15:29.280
这个文档里面

15:29.280 --> 15:30.280
内容

15:30.280 --> 15:31.280
我们如果说

15:31.280 --> 15:32.280
这个

15:32.280 --> 15:33.280
在安装Cross ENV

15:33.280 --> 15:34.280
完成之后

15:34.280 --> 15:36.280
我们就可以通过

15:36.280 --> 15:37.280
命令NPM

15:37.280 --> 15:38.280
RUN

15:38.280 --> 15:39.280
Ani Laser

15:39.280 --> 15:40.280
或者说

15:40.280 --> 15:41.280
我们

15:41.280 --> 15:43.850
Ear

15:43.850 --> 15:44.850
Ani Laser

15:44.850 --> 15:45.850
这样也可以

15:45.850 --> 15:46.850
它默认

15:46.850 --> 15:47.850
如果说

15:47.850 --> 15:48.850
运行成功之后

15:48.850 --> 15:49.850
就会给你开启

15:49.850 --> 15:50.850
一个4个8的

15:50.850 --> 15:51.850
一个端口号

15:51.850 --> 15:52.850
那开启

15:52.850 --> 15:53.850
一个4个8的

15:53.850 --> 15:54.850
端口号之后

15:54.850 --> 15:55.850
我们就可以在

15:55.850 --> 15:56.850
这个端口里面

15:56.850 --> 15:57.850
进行一个什么

15:57.850 --> 15:58.850
打包

15:58.850 --> 15:59.850
集的

15:59.850 --> 16:00.850
一个查看

16:01.850 --> 16:02.850
好了

16:02.850 --> 16:03.850
现在不报

16:03.850 --> 16:04.850
我们Cross ENV的

16:04.850 --> 16:05.850
这个错误了

16:05.850 --> 16:06.850
那这个时候

16:06.850 --> 16:07.850
我们就可以通过

16:07.850 --> 16:08.850
Anni Laser

16:08.850 --> 16:09.850
执行脚本

16:09.850 --> 16:10.850
来进行一个

16:10.850 --> 16:11.850
加载

16:11.850 --> 16:12.850
加载完成之后

16:12.850 --> 16:13.850
我们通过

16:13.850 --> 16:16.850
打开127.0.0.1

16:16.850 --> 16:17.850
然后

16:17.850 --> 16:18.850
是8888

16:18.850 --> 16:19.850
这个端口号

16:19.850 --> 16:20.850
我们来看一下

16:20.850 --> 16:21.850
打包文件的

16:21.850 --> 16:25.670
一个体积大小

16:25.670 --> 16:26.670
相对有一些慢

16:26.670 --> 16:27.670
但是

16:27.670 --> 16:28.670
同学们

16:28.670 --> 16:29.670
在这个过程当中

16:29.670 --> 16:30.670
你稍微等一下

16:30.670 --> 16:32.670
因为这个打包的过程

16:32.670 --> 16:33.670
确实是

16:33.670 --> 16:34.670
它要收集

16:34.670 --> 16:35.670
每一个依赖

16:35.670 --> 16:36.670
收集完

16:36.670 --> 16:37.670
每一个依赖之后

16:37.670 --> 16:39.670
它进行一个比较处理

16:39.670 --> 16:40.670
比较处理之后

16:40.670 --> 16:41.670
就展现出

16:41.670 --> 16:42.670
我们每个模块

16:42.670 --> 16:44.670
所用到的

16:44.670 --> 16:45.670
内存资源的

16:45.670 --> 16:46.670
一个大小

16:46.670 --> 16:47.670
这个里面

16:47.670 --> 16:48.670
如果说的特别大

16:48.670 --> 16:49.670
我们就可以

16:49.670 --> 16:50.670
针对性来

16:50.670 --> 16:51.670
进行一些

16:51.670 --> 16:52.670
相应的

16:52.670 --> 16:53.670
代码优化的

16:53.670 --> 16:54.670
这样一个操作

16:54.670 --> 16:55.670
就OK了

16:55.670 --> 16:56.670
好了

16:56.670 --> 16:57.670
那完成之后

16:57.670 --> 16:58.670
刚才因为咱们

16:58.670 --> 17:00.670
它自动给我们开启

17:00.670 --> 17:01.670
有的时候

17:01.670 --> 17:02.670
它不会自动开启

17:02.670 --> 17:03.670
那如果说

17:03.670 --> 17:04.670
不会自动开启怎么办

17:04.670 --> 17:05.670
我们直接手动输入

17:05.670 --> 17:07.670
127.0.0.1

17:07.670 --> 17:08.670
4个8

17:09.670 --> 17:10.670
当你打开之后

17:10.670 --> 17:11.670
那这个时候

17:11.670 --> 17:12.670
我们看到

17:12.670 --> 17:13.670
首先

17:13.670 --> 17:14.670
第一个

17:14.670 --> 17:15.670
这里面有一个

17:15.670 --> 17:16.670
什么康开的按的

17:16.670 --> 17:17.670
这是E-Chart

17:17.670 --> 17:18.670
FallReact

17:18.670 --> 17:19.670
这个包比较大

17:19.670 --> 17:20.670
然后我们还可以

17:20.670 --> 17:21.670
这样查看

17:21.670 --> 17:22.670
直接的

17:22.670 --> 17:23.670
把这个箭头

17:23.670 --> 17:24.670
点上

17:24.670 --> 17:25.670
点上之后

17:25.670 --> 17:26.670
这里面

17:26.670 --> 17:27.670
是有几个版本

17:27.670 --> 17:28.670
首先

17:28.670 --> 17:29.670
是我们的原始版本

17:29.670 --> 17:30.670
然后

17:30.670 --> 17:32.670
还有解析的版本

17:32.670 --> 17:33.670
Pass的

17:33.670 --> 17:35.670
之后是我们G-Dip

17:35.670 --> 17:36.670
G-Dip就是

17:36.670 --> 17:37.670
我们打包压缩之后的

17:37.670 --> 17:39.670
我们工程的

17:39.670 --> 17:40.670
按地里面

17:40.670 --> 17:41.670
打包压缩之后

17:41.670 --> 17:42.670
它的大小

17:42.670 --> 17:44.670
应该是3.13兆

17:44.670 --> 17:45.670
其实这个体积

17:45.670 --> 17:47.670
就不是很小了

17:47.670 --> 17:48.670
所以说

17:48.670 --> 17:49.670
那你这个时候

17:49.670 --> 17:50.670
就可以进行一些

17:50.670 --> 17:51.670
相关

17:51.670 --> 17:52.670
打包优化的

17:52.670 --> 17:54.670
一个分析处理了

17:54.670 --> 17:55.670
我们打包优化的

17:55.670 --> 17:56.670
一个处理

17:56.670 --> 17:57.670
主要在哪个点上呢

17:57.670 --> 17:58.670
首先

17:58.670 --> 17:59.670
我们来看一下

17:59.670 --> 18:00.670
在这个里面

18:00.670 --> 18:01.670
第一个

18:01.670 --> 18:02.670
就是我们这个

18:02.670 --> 18:03.670
E-ChartFallReact

18:03.670 --> 18:04.670
这个包

18:04.670 --> 18:05.670
相对是有点大

18:05.670 --> 18:06.670
如果说

18:06.670 --> 18:07.670
它在这个

18:07.670 --> 18:08.670
PassSize

18:08.670 --> 18:10.670
是3.69

18:10.670 --> 18:11.670
那也就是说

18:11.670 --> 18:12.670
第一个问题

18:12.670 --> 18:14.670
是我们E-Chart

18:14.670 --> 18:15.670
和E-Chart

18:15.670 --> 18:16.670
渲染组架

18:16.670 --> 18:17.670
它的这个体积

18:17.670 --> 18:18.670
较大

18:18.670 --> 18:19.670
那一会儿

18:19.670 --> 18:20.670
我们对它来进行

18:20.670 --> 18:21.670
一个处理

18:21.670 --> 18:22.670
第二个

18:22.670 --> 18:23.670
就是我们Moment

18:23.670 --> 18:24.670
重复打包

18:24.670 --> 18:25.670
还有一个

18:25.670 --> 18:26.670
多元包

18:26.670 --> 18:27.670
这个是什么意思

18:27.670 --> 18:29.670
我们可以看一下

18:29.670 --> 18:31.670
针对每一个

18:31.670 --> 18:32.670
模块里面

18:32.670 --> 18:33.670
我们这里面

18:33.670 --> 18:35.670
都会有一个Moment

18:35.670 --> 18:36.670
那这个时候

18:36.670 --> 18:37.670
就比较尴尬了

18:37.670 --> 18:38.670
其实

18:38.670 --> 18:39.670
我们可以把这个Moment

18:39.670 --> 18:41.670
进行一个提取

18:41.670 --> 18:42.670
之后

18:42.670 --> 18:43.670
我们这里面

18:43.670 --> 18:44.670
用不到Moment

18:44.670 --> 18:45.670
其他的一些

18:45.670 --> 18:46.670
相关元包

18:46.670 --> 18:47.670
我们可以给它

18:47.670 --> 18:48.670
做一个

18:48.670 --> 18:49.670
删除操作

18:49.670 --> 18:50.670
就是说

18:50.670 --> 18:51.670
第二个

18:51.670 --> 18:52.670
第三个

18:52.670 --> 18:53.670
就是我们按的组件

18:53.670 --> 18:54.670
打包

18:54.670 --> 18:55.670
重复

18:55.670 --> 18:56.670
因为我们这里面

18:56.670 --> 18:57.670
使用了按地站的

18:57.670 --> 18:58.670
这个按堂

18:58.670 --> 19:00.670
我们使用了

19:00.670 --> 19:01.670
按的一个包

19:01.670 --> 19:02.670
那这个按的包

19:02.670 --> 19:03.670
在这里面

19:03.670 --> 19:04.670
是有这个

19:04.670 --> 19:05.670
相应的一个分散

19:05.670 --> 19:06.670
对不对

19:06.670 --> 19:07.670
和Moment

19:07.670 --> 19:08.670
是完全一致的

19:08.670 --> 19:09.670
所以说

19:09.670 --> 19:10.670
针对以上几点

19:10.670 --> 19:11.670
我们来给做一个

19:11.670 --> 19:12.670
优化处理

19:12.670 --> 19:13.670
怎么来做

19:13.670 --> 19:14.670
这里面

19:14.670 --> 19:15.670
核心

19:15.670 --> 19:16.670
主要是

19:16.670 --> 19:17.670
用以下几个方式

19:17.670 --> 19:18.670
首先

19:18.670 --> 19:19.670
第一就是SplitTrunk

19:19.670 --> 19:21.670
SplitTrunk

19:21.670 --> 19:23.670
我们使用它的

19:23.670 --> 19:24.670
包裹MentTrunks

19:24.670 --> 19:25.670
在CatRub里

19:25.670 --> 19:27.670
继承做一个配置

19:27.670 --> 19:28.670
然后

19:28.670 --> 19:29.670
包括我们的Trunks的

19:29.670 --> 19:30.670
使用

19:30.670 --> 19:31.670
不管文件是动态

19:31.670 --> 19:32.670
是非动态载入

19:32.670 --> 19:33.670
统一的

19:33.670 --> 19:35.670
我们做一个文件的分离

19:35.670 --> 19:36.670
然后当页面

19:36.670 --> 19:37.670
首次载入的时候

19:37.670 --> 19:38.670
会把这个

19:38.670 --> 19:39.670
所有的包

19:39.670 --> 19:41.670
进行一个引入

19:41.670 --> 19:42.670
之后

19:42.670 --> 19:43.670
使用它的Async

19:43.670 --> 19:45.670
包括Initial

19:45.670 --> 19:46.670
这种机制

19:46.670 --> 19:47.670
来实现

19:47.670 --> 19:48.670
然后

19:48.670 --> 19:49.670
最后一个

19:49.670 --> 19:50.670
就是对这个Moment的

19:50.670 --> 19:51.670
一个优化处理

19:51.670 --> 19:52.670
我们车里面

19:52.670 --> 19:53.670
使用Config

19:53.670 --> 19:54.670
Plugins

19:54.670 --> 19:55.670
这种Replace

19:55.670 --> 19:56.670
把这个

19:56.670 --> 19:57.670
我们Moment里面

19:57.670 --> 19:58.670
不使用到的

19:58.670 --> 19:59.670
这个相关的

19:59.670 --> 20:00.670
国际化的包

20:00.670 --> 20:01.670
给它做一个删除

20:01.670 --> 20:02.670
那这里面

20:02.670 --> 20:04.670
我搞了一个文件

20:04.670 --> 20:05.670
我们可以

20:05.670 --> 20:06.670
直接的

20:06.670 --> 20:07.670
把它

20:07.670 --> 20:08.670
来给进行一个复制

20:08.670 --> 20:09.670
然后

20:09.670 --> 20:10.670
基于这个文件

20:11.670 --> 20:12.670
做了以上

20:12.670 --> 20:13.670
几点的优化

20:13.670 --> 20:14.670
那我们在这个里面

20:14.670 --> 20:15.670
可以进行

20:15.670 --> 20:16.670
使用

20:16.670 --> 20:17.670
来查看一下

20:17.670 --> 20:18.670
怎么来做

20:18.670 --> 20:20.670
我们回到UminRC下面

20:20.670 --> 20:21.670
UminRC下面

20:21.670 --> 20:23.670
我们在这个Proxy下面

20:23.670 --> 20:24.670
就可以来进行

20:24.670 --> 20:25.670
一个添加

20:25.670 --> 20:26.670
添加一个

20:26.670 --> 20:28.670
我们Channel Webpack

20:28.670 --> 20:29.670
这种属性

20:29.670 --> 20:31.670
那在这个属性里面

20:32.670 --> 20:33.670
我们就做了

20:33.670 --> 20:34.670
相应的

20:34.670 --> 20:35.670
刚才说的

20:35.670 --> 20:37.670
以上几点的一个优化

20:37.670 --> 20:38.670
比如说

20:38.670 --> 20:39.670
我们对这一些

20:39.670 --> 20:41.670
包的一个处理

20:41.670 --> 20:42.670
然后还有

20:43.670 --> 20:45.670
我们Moment的一个

20:45.670 --> 20:46.670
国际化元包的

20:46.670 --> 20:47.670
一个替换

20:47.670 --> 20:48.670
那在这个基础上

20:48.670 --> 20:49.670
我们可以

20:49.670 --> 20:50.670
重新进行一次

20:50.670 --> 20:52.670
打包来做一个尝试

20:53.670 --> 20:54.670
我们可以把

20:54.670 --> 20:55.670
值钱的这个

20:55.670 --> 20:56.670
给停掉

20:56.670 --> 20:57.670
然后再重新的

20:57.670 --> 20:58.670
进行一个

20:58.670 --> 21:00.670
year annulator

21:00.670 --> 21:02.670
我们重新写一下

21:02.670 --> 21:04.670
执行的还是执行

21:04.670 --> 21:05.670
这个脚本

21:05.670 --> 21:10.860
year annulator

21:10.860 --> 21:11.860
好

21:11.860 --> 21:12.860
那咱们再来试一下

21:12.860 --> 21:13.860
刚才这个包的大小

21:13.860 --> 21:14.860
我们来记一下

21:14.860 --> 21:15.860
比如说

21:15.860 --> 21:16.860
刚才这个包

21:16.860 --> 21:17.860
我们看到的

21:18.860 --> 21:20.860
一共是3.13

21:20.860 --> 21:21.860
那我们在打包

21:21.860 --> 21:22.860
完成之后

21:22.860 --> 21:23.860
来看一下

21:23.860 --> 21:24.860
我们注意一下

21:24.860 --> 21:25.860
每次打包之后

21:26.860 --> 21:28.860
生成的静态文件资源

21:28.860 --> 21:29.860
它都会删除掉

21:29.860 --> 21:31.860
重新进行一次创建

21:31.860 --> 21:32.860
然后这个

21:32.860 --> 21:33.860
我们要清楚一下

21:35.860 --> 21:36.860
里面其实就是

21:36.860 --> 21:37.860
做了对一些

21:37.860 --> 21:39.860
我们三方文件的

21:39.860 --> 21:40.860
比如说静态文件

21:40.860 --> 21:41.860
或者是

21:41.860 --> 21:42.860
三方资源包的

21:42.860 --> 21:43.860
一个优化处理

21:44.860 --> 21:45.860
然后如果说不了解

21:45.860 --> 21:46.860
我们这个

21:46.860 --> 21:47.860
Channel Wi-PAC同学

21:48.860 --> 21:49.860
可以在这个

21:49.860 --> 21:50.860
Wi-PAC课程里面

21:50.860 --> 21:52.860
做一个回顾

21:52.860 --> 21:53.860
其实我们就是说

21:53.860 --> 21:55.860
对每一个包的

21:55.860 --> 21:56.860
一个切割

21:56.860 --> 21:57.860
包括我们

21:58.860 --> 22:00.860
对这种

22:00.860 --> 22:02.860
Moment的一个处理优化方案

22:02.860 --> 22:03.860
这个里面

22:03.860 --> 22:04.860
主要是做的

22:04.860 --> 22:05.860
这个操作

22:06.860 --> 22:07.860
打包完成之后

22:07.860 --> 22:08.860
它同样的

22:08.860 --> 22:10.860
还是打开我们

22:10.860 --> 22:11.860
之前的这个

22:11.860 --> 22:13.860
127.0.1

22:14.860 --> 22:15.860
4个8的这么一个端口

22:15.860 --> 22:16.860
我可以把这个

22:18.860 --> 22:20.860
来给做一个保存

22:20.860 --> 22:21.860
然后呢

22:21.860 --> 22:22.860
一会我们来查看一下

22:22.860 --> 22:24.860
新生成的这个

22:24.860 --> 22:25.860
里面的内容

22:25.860 --> 22:26.860
到底有多大

22:26.860 --> 22:27.860
然后呢我们这里面

22:27.860 --> 22:28.860
就可以实现一个

22:28.860 --> 22:29.860
对比操作

22:29.860 --> 22:30.860
看一下他们之间

22:30.860 --> 22:32.860
打包优化后的一个方案

22:32.860 --> 22:33.860
具体能解决

22:33.860 --> 22:36.860
我们这个代码体积

22:36.860 --> 22:38.860
能压缩到多少

22:38.860 --> 22:39.860
当然了

22:39.860 --> 22:40.860
我们后期

22:40.860 --> 22:41.860
在进行使用的时候

22:41.860 --> 22:43.860
一定是使用这种

22:43.860 --> 22:44.860
GTA-POW

22:44.860 --> 22:45.860
也就是说

22:45.860 --> 22:46.860
我们在打包上线之后

22:46.860 --> 22:49.860
会用到这种NGX

22:49.860 --> 22:50.860
进行一个压缩处理

22:51.860 --> 22:52.860
好的

22:52.860 --> 22:53.860
我们来看一下

22:53.860 --> 22:54.860
在这个里面

22:54.860 --> 22:57.860
来进行一个查看

22:57.860 --> 22:59.860
这个是我们的8800

22:59.860 --> 23:02.860
然后我们再看GTA-POW

23:02.860 --> 23:04.860
原来的GTA-POW

23:04.860 --> 23:06.860
我们可以看一下

23:06.860 --> 23:07.860
原来的

23:07.860 --> 23:08.860
当我们GTA-POW

23:08.860 --> 23:10.860
版本是3.13

23:10.860 --> 23:12.860
现在变成了

23:12.860 --> 23:14.860
我们的1.55

23:14.860 --> 23:15.860
对不对

23:15.860 --> 23:16.860
也就是说

23:16.860 --> 23:17.860
打包的体积

23:17.860 --> 23:18.860
直接减少了

23:18.860 --> 23:19.860
50%

23:19.860 --> 23:20.860
对吧

23:20.860 --> 23:21.860
这样就形成了

23:21.860 --> 23:24.860
一个优化的处理

23:24.860 --> 23:25.860
然后我们还可以

23:25.860 --> 23:26.860
针对一些

23:26.860 --> 23:27.860
其他比较大的

23:27.860 --> 23:29.860
这个相应的模块

23:29.860 --> 23:31.860
来做更深层次的

23:31.860 --> 23:33.860
一个打包优化处理

23:33.860 --> 23:34.860
以上那些

23:34.860 --> 23:35.860
就是我们一个

23:35.860 --> 23:36.860
简单的营用操作

23:36.860 --> 23:38.860
那么基于上面的内容

23:38.860 --> 23:40.860
我们就实现了

23:40.860 --> 23:41.860
一个

23:41.860 --> 23:42.860
出击的

23:42.860 --> 23:44.860
打包优化操作

23:44.860 --> 23:45.860
好的

23:45.860 --> 23:47.860
到目前为止

23:47.860 --> 23:48.860
整个案例

23:48.860 --> 23:50.860
基本上就结束了

23:50.860 --> 23:51.860
同学们

23:51.860 --> 23:53.860
可以在我们已经

23:53.860 --> 23:55.860
实现的代码基础上

23:55.860 --> 23:57.860
来一步一步的完成我们

23:57.860 --> 23:59.860
整个案例的应用

23:59.860 --> 24:01.860
我们本次个程

24:01.860 --> 24:02.860
就到这里

24:02.860 --> 24:03.860
谢谢大家

