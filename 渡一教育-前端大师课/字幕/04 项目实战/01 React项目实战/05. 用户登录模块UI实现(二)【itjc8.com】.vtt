WEBVTT

00:01.330 --> 00:06.330
各位同学大家好 这些课我们继续完成用户模块的一个制作

00:06.330 --> 00:13.330
那么本节课我们把表单的验证规则以及我们发送验证码的一个逻辑处理来实现一下

00:13.330 --> 00:16.330
首先我们来说一下表单验证

00:16.330 --> 00:21.330
放表单里面本身提供了一些验证规则的API使用

00:21.330 --> 00:25.330
我们可以从放埋特姆下面找到一个Rules属性

00:25.330 --> 00:30.330
Rules属性就是添加我们相关验证的这样一个处理

00:30.330 --> 00:34.330
我们可以看一下当我去没有添加任何值的时候

00:34.330 --> 00:36.330
比如说我这里面添加值

00:36.330 --> 00:39.330
ok 它不出现提示信息

00:39.330 --> 00:43.330
如果说我清空之后这里面 please input your user name

00:43.330 --> 00:44.330
如何来实现的呢

00:44.330 --> 00:47.330
我们找到放埋特姆添加一个Rules属性

00:47.330 --> 00:50.330
这里面会有一些相关的描述

00:50.330 --> 00:53.330
require的true 也就是说这个字段是逼选的

00:53.330 --> 00:57.330
包括它的一些错误的信息显示

00:57.330 --> 01:00.330
这里面都可以通过相关的属性来进行设置

01:00.330 --> 01:03.330
除了这种它内置的Rules

01:03.330 --> 01:06.330
我们还可以添加一些自定义的销验规则

01:06.330 --> 01:08.330
这个自定义销验规则怎么来做

01:08.330 --> 01:12.330
其实这个里面我们可以使用validator status

01:12.330 --> 01:16.330
然后来进行一个自定义的销验规则添加

01:16.330 --> 01:22.330
并且给用户输入的框添加一个反馈的图标

01:22.330 --> 01:24.330
这个是都可以实现的

01:24.330 --> 01:26.330
我们就来实现一下

01:26.330 --> 01:30.330
首先我们说要实现这个验证规则的话

01:30.330 --> 01:32.330
其实我们后面还会有好多验证规则

01:32.330 --> 01:35.330
所以说我们这里面可以单独的

01:35.330 --> 01:39.330
把每一个表单的验证规则来进行一个封存

01:39.330 --> 01:41.330
也就是说给它做一个保存

01:41.330 --> 01:45.330
我在Utils下面首先定义一个Rules文件加

01:45.330 --> 01:52.330
在这个里面我们可以创建一个用户的表单验证的这样一个文件

01:52.330 --> 01:55.330
那这个文件我们就叫LoganRuler

01:56.330 --> 02:00.330
OK 定义好LoganRuler.js之后

02:00.330 --> 02:05.330
我们就可以在这个里面来进行填写相关验证规则

02:05.330 --> 02:07.330
因为我这个里面LoganRuler

02:07.330 --> 02:10.330
其实我包括这个账户名密码登录

02:10.330 --> 02:13.330
还有我们手机号码加验证码登录

02:13.330 --> 02:16.330
所以说这个里面我需要几个属性

02:16.330 --> 02:19.330
那我这里面来一次的做输出

02:19.330 --> 02:23.330
exportCons的定义一个LoganRuler

02:23.330 --> 02:27.330
统一的存放在LoganRuler下面等于一个大对象

02:27.330 --> 02:29.330
然后我给它做一个导出

02:29.330 --> 02:32.330
导出的时候其实这个里面Rulers咱们说了

02:32.330 --> 02:34.330
除了用户登录之外

02:34.330 --> 02:38.330
主页面里面我们其他的一些添加员工的时候

02:38.330 --> 02:41.330
或者是添加一些其他相关记录的时候

02:41.330 --> 02:43.330
也会有相应的验证规则

02:43.330 --> 02:46.330
所以说这个里面为了使用方便

02:46.330 --> 02:48.330
我这里面写一个入口文件

02:48.330 --> 02:50.330
index.js

02:50.330 --> 02:52.330
那这个js文件做什么呢

02:52.330 --> 02:55.330
它专门做我们这个Ruler的导出

02:55.330 --> 02:59.330
export我们在这个里面LoganRuler

02:59.330 --> 03:03.330
从哪来我们直接的让它是从这个

03:03.330 --> 03:07.330
定义好的LoganRuler下面来进行导出

03:07.330 --> 03:08.330
就可以了

03:08.330 --> 03:11.330
那这样我做的事情是什么

03:11.330 --> 03:14.330
首先统一的收集LoganRuler

03:14.330 --> 03:17.330
里面定义的LoganRuler这个对象

03:17.330 --> 03:19.330
对吧定好这个对象之后

03:19.330 --> 03:21.330
直接去给它导出就可以了

03:21.330 --> 03:22.330
那导出之后

03:22.330 --> 03:23.330
其实我在这个里面

03:23.330 --> 03:26.330
比如说我先写一个测试

03:26.330 --> 03:27.330
Hello

03:27.330 --> 03:29.330
那这样定义好了之后

03:29.330 --> 03:30.330
我其实在这个组件里面

03:30.330 --> 03:32.330
就可以进行到使用了

03:32.330 --> 03:35.330
比如说我们回到这个Udder下面

03:35.330 --> 03:36.330
到Udder下面

03:36.330 --> 03:38.330
打开我们Components

03:38.330 --> 03:39.330
因为要在Account

03:39.330 --> 03:41.330
以及SMCode里面来使用

03:41.330 --> 03:45.330
我先在这个Account里面来进行导入

03:45.330 --> 03:47.330
就叫LoganRuler

03:47.330 --> 03:48.330
LoganRuler从哪来

03:48.330 --> 03:52.330
就从我们Utils下面的一个什么呢

03:52.330 --> 03:55.330
我们直接就从Utils下面

03:55.330 --> 03:57.330
它的定义好的一个Rulers

03:57.330 --> 03:58.330
下面来获取就可以了

03:58.330 --> 04:01.330
那这样我们使用是比较方便的

04:01.330 --> 04:04.330
所有的导出的验证规则

04:04.330 --> 04:05.330
直接的你Rulers

04:05.330 --> 04:06.330
是不是就可以了

04:06.330 --> 04:08.330
我们在这里面做一个打印

04:08.330 --> 04:10.330
因为我们这里面是有一个测试值的

04:10.330 --> 04:13.330
那我就给它打印一个LoganRuler

04:13.330 --> 04:14.330
如果说能输出一个对象

04:14.330 --> 04:16.330
那就OK了

04:16.330 --> 04:17.330
好的

04:17.330 --> 04:19.330
我们回来看一下自己的

04:19.330 --> 04:21.330
到我们这个里面有一个爆错

04:21.330 --> 04:23.330
咱们来看一下是因为什么

04:23.330 --> 04:25.330
这里面刷新一下Utils

04:25.330 --> 04:26.330
没问题

04:26.330 --> 04:27.330
Test的Hello

04:27.330 --> 04:28.330
对吧

04:28.330 --> 04:29.330
那Test的Hello

04:29.330 --> 04:30.330
现在已经输出了

04:30.330 --> 04:31.330
那其实我在这个里面输出

04:31.330 --> 04:33.330
肯定不是让它输出Test的Hello

04:33.330 --> 04:36.330
我们要输出相关的验证规则

04:36.330 --> 04:37.330
首先第一个验证

04:37.330 --> 04:39.330
我们在这个里面添加的时候

04:39.330 --> 04:43.330
就是我们对这个用不明的一个验证

04:43.330 --> 04:45.330
也就是UserRuler

04:45.330 --> 04:46.330
对吧

04:46.330 --> 04:48.330
那UserRuler

04:48.330 --> 04:50.330
这个里面应该是一个什么

04:50.330 --> 04:51.330
我们刚才看到的

04:51.330 --> 04:52.330
它是一个数组

04:52.330 --> 04:53.330
对吧

04:53.330 --> 04:54.330
数组里面

04:54.330 --> 04:55.330
第一个是RequiredTrue

04:55.330 --> 04:56.330
也就是说

04:56.330 --> 04:58.330
它是一个B选项

04:58.330 --> 05:00.330
之后这里面有Message

05:00.330 --> 05:01.330
那Message

05:01.330 --> 05:02.330
我们就添加一下

05:02.330 --> 05:05.330
账户名不能围空

05:05.330 --> 05:07.330
先来进行一个测试

05:07.330 --> 05:09.330
当我定义好了之后

05:09.330 --> 05:12.330
就可以在这个Account里面

05:12.330 --> 05:15.330
来进行一个使用

05:15.330 --> 05:17.330
我们为这个Formatomo

05:17.330 --> 05:21.330
来进行验证规则的一个添加

05:21.330 --> 05:23.330
这里面使用RulerS

05:23.330 --> 05:27.330
等于我们刚才传递过来的这个值

05:27.330 --> 05:28.330
LoganRuler

05:28.330 --> 05:31.330
它下面的UserRuler

05:31.330 --> 05:32.330
OK 定义好之后

05:32.330 --> 05:33.330
我们来看一下

05:33.330 --> 05:34.330
看一下的时候

05:34.330 --> 05:35.330
我们可以刷新一下

05:35.330 --> 05:37.330
当我们刷新之后

05:37.330 --> 05:38.330
123

05:38.330 --> 05:39.330
你会发现

05:39.330 --> 05:40.330
如果说清空之后

05:40.330 --> 05:43.330
切换到其他的表达项的时候

05:43.330 --> 05:44.330
它并没有生效

05:44.330 --> 05:46.330
并没有生效的原因是什么呢

05:46.330 --> 05:48.330
我们要使用RulerS的时候

05:48.330 --> 05:50.330
这里面还要指定Name

05:50.330 --> 05:51.330
这个Name

05:51.330 --> 05:53.330
也是我们后期要提交

05:53.330 --> 05:55.330
给后端进行一个

05:55.330 --> 05:58.330
发送的入餐的一个指认

05:58.330 --> 06:00.330
那我们这里面写一下

06:00.330 --> 06:01.330
AccountName

06:01.330 --> 06:02.330
然后咱们来看一下

06:02.330 --> 06:05.330
当再次的失去焦点的时候

06:05.330 --> 06:06.330
比如说123

06:06.330 --> 06:07.330
清空

06:07.330 --> 06:08.330
你会发现这里面

06:08.330 --> 06:09.330
就显示账户名

06:09.330 --> 06:10.330
而不能微空

06:10.330 --> 06:11.330
对不对

06:11.330 --> 06:12.330
这个就有了

06:12.330 --> 06:14.330
然后我们除了这种

06:14.330 --> 06:17.330
简单的避选项设定之外

06:17.330 --> 06:18.330
我们还会可以

06:18.330 --> 06:20.330
设置它的一个长度值

06:20.330 --> 06:21.330
比如说我们在这个里面

06:21.330 --> 06:23.330
再定义一条规则

06:23.330 --> 06:24.330
这个里面

06:24.330 --> 06:25.330
我们就可以指定一下

06:25.330 --> 06:26.330
它的最大值

06:26.330 --> 06:29.330
最大值是16位

06:29.330 --> 06:31.330
如果说你要超出16位的话

06:31.330 --> 06:34.330
我这里面就给你一个Message

06:34.330 --> 06:35.330
Message提示一个什么呢

06:35.330 --> 06:36.330
账户名

06:36.330 --> 06:38.330
长度不正确

06:38.330 --> 06:39.330
OK

06:39.330 --> 06:40.330
这是一个

06:40.330 --> 06:41.330
定义好了之后

06:41.330 --> 06:42.330
如果说有最大值

06:42.330 --> 06:44.330
我们还可以定义一个最小值

06:44.330 --> 06:45.330
那这个呢

06:45.330 --> 06:46.330
也是同样的

06:46.330 --> 06:47.330
给它显示一个什么呢

06:47.330 --> 06:48.330
账户名

06:48.330 --> 06:49.330
长度不正确

06:49.330 --> 06:50.330
就可以了

06:50.330 --> 06:53.330
把这个符号换成英文的

06:53.330 --> 06:54.330
好了

06:54.330 --> 06:55.330
那这个就处理完了

06:55.330 --> 06:56.330
处理完之后

06:56.330 --> 06:57.330
咱们再来看一下

06:57.330 --> 06:59.330
是否可行

06:59.330 --> 07:00.330
这里面

07:00.330 --> 07:01.330
我们不需要再做

07:01.330 --> 07:02.330
任何操作了

07:02.330 --> 07:03.330
然后呢

07:03.330 --> 07:04.330
我们除了一个1

07:04.330 --> 07:06.330
比如说在这个里面

07:06.330 --> 07:07.330
2

07:07.330 --> 07:09.330
当我输入完成之后

07:09.330 --> 07:10.330
那这个里面

07:10.330 --> 07:11.330
应该是有这个

07:11.330 --> 07:12.330
账户名

07:12.330 --> 07:13.330
长度不正确

07:13.330 --> 07:14.330
对不对

07:14.330 --> 07:15.330
然后呢

07:15.330 --> 07:16.330
这个最小值

07:16.330 --> 07:17.330
我们是不是没有调整

07:17.330 --> 07:18.330
这里面

07:18.330 --> 07:19.330
这个应该是一个

07:19.330 --> 07:20.330
min

07:21.330 --> 07:22.330
好了

07:22.330 --> 07:23.330
那我再来啊

07:23.330 --> 07:24.330
比如说1 2 3

07:24.330 --> 07:26.330
如果说小于4位

07:26.330 --> 07:27.330
账户名

07:27.330 --> 07:28.330
长度不正确

07:28.330 --> 07:29.330
假如说呢

07:29.330 --> 07:30.330
它要超出16位

07:30.330 --> 07:31.330
那这个时候

07:31.330 --> 07:32.330
账户名

07:32.330 --> 07:33.330
长度也显示不正确

07:33.330 --> 07:34.330
对吧

07:35.330 --> 07:36.330
这个呢

07:36.330 --> 07:37.330
就是我们一个

07:37.330 --> 07:38.330
基本的验证规则的

07:38.330 --> 07:39.330
一个添加

07:39.330 --> 07:40.330
当添加完成

07:40.330 --> 07:42.330
这个验证规则之后

07:42.330 --> 07:43.330
我们再来进行一个

07:43.330 --> 07:44.330
其他验证规则的

07:44.330 --> 07:45.330
一个创建

07:45.330 --> 07:47.330
这个是User Ruler

07:47.330 --> 07:48.330
User Ruler

07:48.330 --> 07:49.330
下面呢

07:49.330 --> 07:50.330
我们再写一个

07:50.330 --> 07:54.090
Password Ruler

07:54.090 --> 07:55.090
Password Ruler

07:55.090 --> 07:56.090
同样的

07:56.090 --> 07:57.090
我们只需要

07:57.090 --> 07:58.090
改变它的

07:58.090 --> 08:00.090
一个显示的文字

08:00.090 --> 08:01.090
就可以了

08:01.090 --> 08:02.090
错误信息描述

08:02.090 --> 08:04.090
这个是账户名

08:04.090 --> 08:05.090
那下面这个

08:05.090 --> 08:06.090
应该是密码

08:06.090 --> 08:07.090
对吧

08:07.090 --> 08:08.090
我们把它改一下

08:08.090 --> 08:09.090
叫密码

08:10.090 --> 08:12.090
密码长度不正确

08:12.090 --> 08:13.090
OK

08:13.090 --> 08:14.090
那这个也可以了

08:14.090 --> 08:15.090
同样的

08:15.090 --> 08:16.090
给它进行一个添加

08:16.090 --> 08:17.090
这里面

08:17.090 --> 08:18.090
首先

08:18.090 --> 08:19.090
我们指定一个

08:19.090 --> 08:20.090
Name属性

08:20.090 --> 08:21.090
Name属性呢

08:21.090 --> 08:22.090
就是这个

08:22.090 --> 08:24.090
是一个Password

08:24.090 --> 08:25.090
好吧

08:25.090 --> 08:26.090
给它一个

08:26.090 --> 08:27.090
Password之后

08:27.090 --> 08:29.090
那我们再来

08:29.090 --> 08:30.090
进行定义

08:30.090 --> 08:31.090
它的Ruler

08:31.090 --> 08:32.090
Ruler

08:32.090 --> 08:34.090
LoganRuler.Password

08:34.090 --> 08:35.090
Ruler

08:35.090 --> 08:36.090
把这个改一下

08:36.090 --> 08:38.090
Password Ruler

08:38.090 --> 08:39.090
好的

08:39.090 --> 08:40.090
我们再来

08:40.090 --> 08:41.090
做一下测试

08:41.090 --> 08:44.090
密码长度不正确

08:44.090 --> 08:46.090
如果说添加多个之后

08:46.090 --> 08:47.090
这个就没有问题了

08:47.090 --> 08:48.090
和之前

08:48.090 --> 08:49.090
是不是一样

08:49.090 --> 08:50.090
然后咱们这个密码

08:50.090 --> 08:51.090
刚才咱们看了

08:51.090 --> 08:52.090
这个呢

08:52.090 --> 08:53.090
是名码的

08:53.090 --> 08:54.090
对吧

08:54.090 --> 08:55.090
那我们给它添加一个什么

08:55.090 --> 08:57.090
Type等于Password的

08:57.090 --> 08:59.090
给它添加一个Type值

08:59.090 --> 09:01.090
Type等于Password的

09:01.090 --> 09:02.090
OK

09:02.090 --> 09:03.090
那这样

09:03.090 --> 09:04.090
它名码输入

09:04.090 --> 09:05.090
对吧

09:05.090 --> 09:06.090
好的

09:06.090 --> 09:07.090
这个就处理完了

09:07.090 --> 09:08.090
处理完成之后

09:08.090 --> 09:09.090
那我们再继续处理

09:09.090 --> 09:11.090
手机号码的一个验证

09:11.090 --> 09:12.090
也就是说这里面

09:12.090 --> 09:14.090
除了这两个验证之外

09:14.090 --> 09:15.090
还会有一个什么呢

09:15.090 --> 09:17.090
我们的一个Mobile Ruler

09:17.090 --> 09:19.090
手机号码的验证

09:19.090 --> 09:20.090
跟上面两个

09:20.090 --> 09:21.090
是有一定区别的

09:21.090 --> 09:22.090
因为我们手机号码

09:22.090 --> 09:23.090
除了验证

09:23.090 --> 09:24.090
它不能微空之外

09:24.090 --> 09:25.090
这里面

09:25.090 --> 09:26.090
还要匹配

09:26.090 --> 09:27.090
我们一个

09:27.090 --> 09:28.090
真实的手机号码

09:28.090 --> 09:29.090
所以说这里面

09:29.090 --> 09:30.090
我们会用到一个

09:30.090 --> 09:31.090
政责验证

09:31.090 --> 09:32.090
那这个时候

09:32.090 --> 09:34.090
就不能使用这种

09:34.090 --> 09:36.090
它的内置的验证了

09:36.090 --> 09:37.090
我们可以使用Validator

09:37.090 --> 09:38.090
自己来写一些

09:38.090 --> 09:40.090
相应的验证规则

09:40.090 --> 09:41.090
Validator

09:41.090 --> 09:42.090
然后这里面

09:42.090 --> 09:43.090
它是一个函数

09:43.090 --> 09:44.090
一个函数

09:44.090 --> 09:45.090
接几个值

09:45.090 --> 09:46.090
首先第一个

09:46.090 --> 09:48.090
就是它的一个验证规则

09:48.090 --> 09:49.090
我们这里面

09:49.090 --> 09:50.090
可以给它定一个Ruler

09:50.090 --> 09:51.090
第二个

09:51.090 --> 09:52.090
就是我们当前输的值

09:52.090 --> 09:53.090
第三个

09:53.090 --> 09:54.090
就是我们验证

09:54.090 --> 09:55.090
成功之后的一个

09:55.090 --> 09:56.090
回掉函数

09:56.090 --> 09:57.090
失败和错误

09:57.090 --> 09:59.090
都走这个函数

09:59.090 --> 10:00.090
这里面

10:00.090 --> 10:01.090
我们出手话的时候

10:01.090 --> 10:04.090
用一个Mobile的一个REG

10:04.090 --> 10:05.090
我们先写一个

10:05.090 --> 10:08.090
政责的一个验证规则

10:08.090 --> 10:09.090
MobileREG

10:09.090 --> 10:11.090
我们搞一个政责出来

10:11.090 --> 10:12.090
那这个政责

10:12.090 --> 10:14.090
MobileREG等于一个政责

10:14.090 --> 10:15.090
这里面

10:15.090 --> 10:17.090
手机号码的验证非常好写

10:17.090 --> 10:18.090
政责

10:18.090 --> 10:19.090
我们直接就来写一下

10:19.090 --> 10:20.090
自己来完成一下

10:20.090 --> 10:21.090
比如说

10:21.090 --> 10:22.090
以1开头

10:22.090 --> 10:23.090
以这个3

10:23.090 --> 10:24.090
或者是4

10:24.090 --> 10:25.090
比如这里面写4

10:25.090 --> 10:26.090
或者是5

10:26.090 --> 10:27.090
或者是6

10:27.090 --> 10:29.090
然后是7

10:29.090 --> 10:30.090
应该是还有8

10:31.090 --> 10:32.090
以第2个数字

10:32.090 --> 10:34.090
是3 4 5 6 7 8

10:34.090 --> 10:35.090
然后第3个数字

10:35.090 --> 10:37.090
是0-9

10:37.090 --> 10:38.090
后面跟

10:38.090 --> 10:41.090
后面再跟8个数字

10:41.090 --> 10:42.090
那我们直接的

10:42.090 --> 10:44.090
再写8个数字

10:44.090 --> 10:45.090
OK

10:45.090 --> 10:46.090
最后一个Dollarful结尾

10:46.090 --> 10:47.090
那这个时候

10:47.090 --> 10:48.090
我们就定义好了

10:48.090 --> 10:49.090
一个手机号码

10:49.090 --> 10:50.090
验证规则

10:50.090 --> 10:51.090
这个验证规则

10:51.090 --> 10:52.090
定义好之后

10:52.090 --> 10:53.090
我们可以先看一下

10:53.090 --> 10:54.090
因为我们这里面

10:54.090 --> 10:55.090
创建完成之后

10:55.090 --> 10:56.090
那这个时候

10:56.090 --> 10:58.090
我们可以通过

10:58.090 --> 11:00.090
这种Promise对象的形式

11:00.090 --> 11:01.090
来给它进行

11:01.090 --> 11:04.090
这个返回相关的内容

11:04.090 --> 11:05.090
比如说

11:05.090 --> 11:06.090
我们这里面写一个条件

11:06.090 --> 11:07.090
Switch

11:07.090 --> 11:08.090
如果说是True的话

11:08.090 --> 11:11.090
我们这里面写一个True

11:11.090 --> 11:12.090
那假如说

11:12.090 --> 11:13.090
它要是成功的话

11:13.090 --> 11:14.090
那我们在这个里面

11:14.090 --> 11:16.090
要做一个判断

11:16.090 --> 11:17.090
Case

11:17.090 --> 11:19.090
如果说非Blood

11:19.090 --> 11:21.090
首先进行一个什么呢

11:21.090 --> 11:22.090
它的这个

11:22.090 --> 11:24.090
输入值的一个判断

11:24.090 --> 11:25.090
假如说

11:25.090 --> 11:26.090
那你要非Blood的话

11:26.090 --> 11:27.090
那应该是什么

11:27.090 --> 11:28.090
没有输入值

11:28.090 --> 11:29.090
对吧

11:29.090 --> 11:31.090
可以使用简单的一个Promise

11:31.090 --> 11:32.090
Promise

11:32.090 --> 11:34.090
我们这个就让它Reject

11:34.090 --> 11:36.090
给它做一个报错就可以了

11:36.090 --> 11:38.090
Promise.reject

11:38.090 --> 11:40.090
里面是描述信息

11:40.090 --> 11:43.090
手机号码不能围空

11:43.090 --> 11:44.090
对吧

11:44.090 --> 11:45.090
那这个给它写了

11:45.090 --> 11:47.090
然后这是第一条验证规则

11:47.090 --> 11:49.090
我们可以先来试一下

11:49.090 --> 11:50.090
怎么来试

11:50.090 --> 11:51.090
刷新一下

11:51.090 --> 11:53.090
在这里面进行一个刷新

11:53.090 --> 11:55.090
找到手机号码

11:55.090 --> 11:56.090
我们直接点击一下

11:56.090 --> 11:57.090
OK

11:57.090 --> 11:58.090
点击没问题

11:58.090 --> 11:59.090
然后呢

11:59.090 --> 12:00.090
我们清空

12:00.090 --> 12:02.090
清空之后失去焦点

12:02.090 --> 12:03.090
sorry

12:03.090 --> 12:04.090
我们这个mobile ruler

12:04.090 --> 12:06.090
现在是还没有添加的状态

12:06.090 --> 12:08.090
先给它添加进去

12:08.090 --> 12:09.090
同样的呢

12:09.090 --> 12:10.090
把刚才这句话

12:10.090 --> 12:12.090
给它做一个sm code

12:12.090 --> 12:15.090
里面的这个组件引入

12:15.090 --> 12:16.090
引入之后

12:16.090 --> 12:18.090
那我定义form item

12:18.090 --> 12:19.090
内幕

12:19.090 --> 12:21.090
这个就是我们定义的mobile

12:21.090 --> 12:22.090
对吧

12:23.090 --> 12:24.090
好了定义好

12:24.090 --> 12:25.090
内幕之后

12:25.090 --> 12:27.090
开始给它定义rulers

12:27.090 --> 12:30.090
就等于我们logan ruler

12:30.090 --> 12:33.090
下面的一个mobile ruler

12:34.090 --> 12:35.090
定义完成之后

12:35.090 --> 12:37.090
咱们再来进行一个测试

12:37.090 --> 12:40.090
我这里面使用手机号码

12:40.090 --> 12:41.090
如果说在这个里面

12:41.090 --> 12:43.090
一你会发现

12:43.090 --> 12:44.090
callback

12:44.090 --> 12:45.090
一字decayload

12:45.090 --> 12:47.090
please return promise

12:47.090 --> 12:48.090
一字到的

12:48.090 --> 12:50.090
然后咱们可以把callback

12:50.090 --> 12:51.090
给它干掉

12:51.090 --> 12:52.090
这都无所谓的事

12:52.090 --> 12:53.090
然后你看手机号码

12:53.090 --> 12:54.090
不能微空

12:54.090 --> 12:55.090
这个是不是起作用了

12:55.090 --> 12:56.090
对不对

12:56.090 --> 12:57.090
第二条

12:57.090 --> 12:58.090
我们先把这个

12:58.090 --> 12:59.090
再把这个政则

12:59.090 --> 13:00.090
这个来做一个处理

13:00.090 --> 13:01.090
callback

13:01.090 --> 13:02.090
既然我们用这种

13:02.090 --> 13:03.090
promise的形式

13:03.090 --> 13:04.090
就不用它了

13:04.090 --> 13:05.090
这是第一个规则

13:05.090 --> 13:06.090
第一个规则

13:06.090 --> 13:07.090
第二规则是什么呢

13:07.090 --> 13:09.090
我们就可以使用这种

13:09.090 --> 13:11.090
手机号码的一个政则

13:11.090 --> 13:13.090
来进行匹配了

13:13.090 --> 13:14.090
非mobile

13:14.090 --> 13:16.090
然后是这个value

13:16.090 --> 13:18.090
mobileregvalue

13:18.090 --> 13:19.090
如果说

13:19.090 --> 13:21.090
它要是这个不成立的话

13:21.090 --> 13:22.090
那这样

13:22.090 --> 13:24.090
是不是就验证没通过

13:24.090 --> 13:25.090
对不对

13:25.090 --> 13:26.090
验证没通过的话

13:26.090 --> 13:27.090
我们直接的

13:27.090 --> 13:30.090
return promise.reject

13:30.090 --> 13:31.090
手机号码

13:31.090 --> 13:32.090
这个应该是

13:32.090 --> 13:33.090
我们的这个

13:33.090 --> 13:34.090
格式不正确

13:34.090 --> 13:36.090
这里面写一下

13:36.090 --> 13:38.090
格式不正确

13:38.090 --> 13:39.090
OK

13:39.090 --> 13:40.090
咱们再来试一下

13:40.090 --> 13:42.090
mobilereg

13:42.090 --> 13:43.090
那mobilereg

13:43.090 --> 13:44.090
下面应该是

13:44.090 --> 13:46.090
有一个test的方法

13:46.090 --> 13:48.090
咱们来看一下行不行

13:48.090 --> 13:49.090
回去

13:49.090 --> 13:51.090
我们再进行一个刷新

13:51.090 --> 13:53.090
这里面使用手机号码

13:53.090 --> 13:56.090
1 3 5 5 2 2 2

13:56.090 --> 13:58.090
3 1 1 1

13:58.090 --> 13:59.090
对吧

13:59.090 --> 14:00.090
手机号码格式正确了

14:00.090 --> 14:01.090
对吧

14:01.090 --> 14:02.090
那手机号码格式正确了

14:02.090 --> 14:03.090
其实它这个提示是什么呢

14:03.090 --> 14:04.090
就是告诉我们

14:04.090 --> 14:06.090
如果说你现在正确了之后

14:06.090 --> 14:07.090
那你得给我们

14:07.090 --> 14:08.090
promise

14:08.090 --> 14:09.090
得返回一个成功

14:09.090 --> 14:10.090
对不对

14:10.090 --> 14:11.090
所以说那这两种

14:11.090 --> 14:12.090
都验证通过之后

14:12.090 --> 14:13.090
最后呢

14:13.090 --> 14:14.090
我们就可以使用一个

14:14.090 --> 14:15.090
default

14:15.090 --> 14:17.090
default 默认值是什么

14:17.090 --> 14:18.090
直接的我们

14:18.090 --> 14:19.090
如果说不走

14:19.090 --> 14:20.090
上面两条件

14:20.090 --> 14:21.090
那说明这个就成功了

14:21.090 --> 14:23.090
那我们直接的使用

14:23.090 --> 14:26.090
promise.reza的形式

14:26.090 --> 14:28.090
promise.reza

14:28.090 --> 14:29.090
那这个

14:29.090 --> 14:30.090
其实promise.reza

14:30.090 --> 14:31.090
什么都不用传了

14:31.090 --> 14:32.090
那验证通过了吗

14:32.090 --> 14:33.090
对吧

14:33.090 --> 14:34.090
我们可以来看一下

14:34.090 --> 14:35.090
这样行不行

14:35.090 --> 14:38.090
把这个错误信息给它干掉

14:38.090 --> 14:39.090
OK

14:39.090 --> 14:40.090
现在是不是没问题

14:40.090 --> 14:41.090
也不会报这个错了

14:41.090 --> 14:42.090
对吧

14:42.090 --> 14:43.090
这个就是说

14:43.090 --> 14:44.090
一个我们自定义的验证

14:44.090 --> 14:45.090
自定义验证

14:45.090 --> 14:46.090
首先

14:46.090 --> 14:47.090
我们使用这种

14:47.090 --> 14:48.090
validator的形式

14:48.090 --> 14:49.090
validator形式

14:49.090 --> 14:50.090
你或者是

14:50.090 --> 14:51.090
可以再添加一个

14:51.090 --> 14:52.090
require的

14:52.090 --> 14:54.090
必选项的一个处理

14:54.090 --> 14:55.090
当然了

14:55.090 --> 14:56.090
我们这里面

14:56.090 --> 14:58.090
既然选择了使用validator

14:58.090 --> 14:59.090
我们直接在这里面

14:59.090 --> 15:00.090
定义好政策之后

15:00.090 --> 15:03.090
就不需要再做其他的

15:03.090 --> 15:06.090
比如说require的一个处理了

15:06.090 --> 15:07.090
好了

15:07.090 --> 15:09.090
手机号码的处理完成之后

15:09.090 --> 15:10.090
我们接下来

15:10.090 --> 15:13.090
就是要处理验证码了

15:13.090 --> 15:14.090
验证码非常简单

15:14.090 --> 15:15.090
首先是验证码

15:15.090 --> 15:16.090
不能为空

15:16.090 --> 15:17.090
对吧

15:17.090 --> 15:18.090
然后就是我们的

15:18.090 --> 15:20.090
验证码的一个长度

15:20.090 --> 15:21.090
我们给它规定一下

15:21.090 --> 15:22.090
就好了

15:22.090 --> 15:24.090
验证码在这里面写一下

15:24.090 --> 15:25.090
验证码

15:25.090 --> 15:26.090
首先

15:26.090 --> 15:27.090
第一个

15:27.090 --> 15:28.090
不能为空

15:28.090 --> 15:30.090
验证码长度不正确

15:30.090 --> 15:31.090
然后

15:31.090 --> 15:32.090
我们验证码规定一下

15:32.090 --> 15:33.090
最大长度

15:33.090 --> 15:34.090
和最小长度

15:34.090 --> 15:37.090
都是6位就OK了

15:37.090 --> 15:38.090
也就是说

15:38.090 --> 15:39.090
现在如果说

15:39.090 --> 15:40.090
你小于6位

15:40.090 --> 15:41.090
或者大于6位

15:41.090 --> 15:42.090
肯定不行

15:42.090 --> 15:43.090
所以说我们必须

15:43.090 --> 15:44.090
是等于6位

15:44.090 --> 15:45.090
那长度才是正确的

15:45.090 --> 15:46.090
咱们来试一下

15:46.090 --> 15:47.090
是否可行

15:48.090 --> 15:49.090
对不起

15:49.090 --> 15:50.090
咱们还是需要

15:50.090 --> 15:51.090
给它添加上

15:51.090 --> 15:52.090
那这个

15:52.090 --> 15:53.090
放埋特目里面

15:53.090 --> 15:55.090
我们就给它指定一下

15:55.090 --> 15:56.090
指定一下

15:56.090 --> 15:57.090
把这个名字

15:57.090 --> 15:58.090
给它添加一下

15:58.090 --> 15:59.090
那这个名字

15:59.090 --> 16:01.090
我们应该添加一个什么呢

16:01.090 --> 16:02.090
我们这个里面

16:02.090 --> 16:04.090
给它一个内幕属性值

16:04.090 --> 16:06.090
就叫Code吧

16:06.090 --> 16:07.090
内幕属性

16:07.090 --> 16:09.090
等于一个Code

16:09.090 --> 16:11.090
然后是它的Rulers

16:11.090 --> 16:13.090
Rulers等于我们的

16:13.090 --> 16:16.090
LoganRuler.CodeRuler

16:16.090 --> 16:17.090
CodeRuler

16:17.090 --> 16:18.090
这个名字改没改

16:18.090 --> 16:19.090
我回来看一下

16:19.090 --> 16:20.090
LoganRuler

16:20.090 --> 16:21.090
这个里面

16:21.090 --> 16:23.090
应该是CodeRuler

16:23.090 --> 16:24.090
把这个名字

16:24.090 --> 16:26.660
给做一个调整

16:26.660 --> 16:27.660
CodeRuler

16:27.660 --> 16:28.660
回去之后

16:28.660 --> 16:29.660
我们直接了

16:29.660 --> 16:31.660
来进行使用

16:32.660 --> 16:33.660
CodeRuler

16:33.660 --> 16:34.660
OK

16:34.660 --> 16:35.660
来做一个验证

16:35.660 --> 16:40.820
当时候6位之后

16:40.820 --> 16:41.820
它这个是正确的

16:41.820 --> 16:42.820
如果说

16:42.820 --> 16:43.820
你小于6位

16:43.820 --> 16:44.820
或者是大于6位

16:44.820 --> 16:45.820
这个里面

16:45.820 --> 16:46.820
都给我提示

16:46.820 --> 16:47.820
长度不正确

16:47.820 --> 16:48.820
那这个呢

16:48.820 --> 16:49.820
我们第一个需求

16:49.820 --> 16:50.820
是用相的四项

16:50.820 --> 16:51.820
用过名

16:51.820 --> 16:52.820
密码

16:52.820 --> 16:53.820
以及手机画码

16:53.820 --> 16:54.820
验证码

16:54.820 --> 16:55.820
它的一个验证规则

16:55.820 --> 16:56.820
给进行了一个添加

16:56.820 --> 16:57.820
在使用的时候

16:57.820 --> 16:58.820
同学们注意一下

16:58.820 --> 16:59.820
比如说

16:59.820 --> 17:01.820
像这种相关的APN

17:01.820 --> 17:02.820
我们不是特别熟的话

17:02.820 --> 17:03.820
怎么办

17:03.820 --> 17:04.820
你一定要学会

17:04.820 --> 17:06.820
看这个里面

17:06.820 --> 17:07.820
它的这个文档

17:07.820 --> 17:08.820
那这个文档里面

17:08.820 --> 17:09.820
会有一些

17:09.820 --> 17:10.820
详细的描述

17:10.820 --> 17:12.820
比如说我们这个

17:12.820 --> 17:13.820
自定义的相应规则里面

17:13.820 --> 17:14.820
它这虽然很长

17:14.820 --> 17:15.820
但是里面

17:15.820 --> 17:16.820
会有一些介绍

17:16.820 --> 17:17.820
或者是你

17:17.820 --> 17:18.820
直接查询那个APN

17:18.820 --> 17:19.820
然后呢

17:19.820 --> 17:20.820
你或者是

17:20.820 --> 17:21.820
再看这个

17:21.820 --> 17:22.820
关键字

17:22.820 --> 17:23.820
validator message

17:23.820 --> 17:24.820
效应规则

17:24.820 --> 17:25.820
仅支持自定义规则

17:25.820 --> 17:26.820
需要配合

17:26.820 --> 17:27.820
IronList的一同使用

17:27.820 --> 17:28.820
那这个里面

17:28.820 --> 17:29.820
我们就可以使用

17:29.820 --> 17:31.820
这种validator的形式

17:31.820 --> 17:32.820
然后formlist

17:32.820 --> 17:33.820
这是formlist

17:33.820 --> 17:34.820
咱不看formlist

17:34.820 --> 17:36.820
直接的从这个里面看

17:36.820 --> 17:37.820
自定义效应规则

17:37.820 --> 17:38.820
接收promise

17:38.820 --> 17:39.820
作为返回值

17:39.820 --> 17:40.820
然后这个里面

17:40.820 --> 17:41.820
是它的一个视力

17:41.820 --> 17:42.820
那这里面

17:42.820 --> 17:43.820
就应该是有

17:43.820 --> 17:45.820
相关的一个使用方法

17:45.820 --> 17:47.820
我们可以在这个里面

17:47.820 --> 17:48.820
显示代码

17:48.820 --> 17:50.820
显示代码的时候

17:50.820 --> 17:52.820
我记得从上面

17:52.820 --> 17:53.820
从上面这块

17:53.820 --> 17:55.820
就应该能找到

17:55.820 --> 17:57.820
咱们可以找一下

17:57.820 --> 18:00.820
在这个里面validator

18:00.820 --> 18:01.820
然后呢

18:01.820 --> 18:02.820
我看这里面

18:02.820 --> 18:03.820
ok 在这块

18:03.820 --> 18:04.820
是不是就有了

18:04.820 --> 18:05.820
validator

18:05.820 --> 18:06.820
如果说没有外料

18:06.820 --> 18:07.820
或者是getfile的

18:07.820 --> 18:09.820
然后这个里面说

18:09.820 --> 18:10.820
password的等于等于外料

18:10.820 --> 18:11.820
这个应该是

18:11.820 --> 18:12.820
做了一个

18:12.820 --> 18:13.820
确认密码的

18:13.820 --> 18:15.820
验证的一个视力

18:15.820 --> 18:16.820
好的

18:16.820 --> 18:17.820
那添加完了

18:17.820 --> 18:18.820
这个验证规则之后

18:18.820 --> 18:20.820
咱们再继续添加

18:20.820 --> 18:22.820
一个icon图标

18:22.820 --> 18:23.820
什么样的icon图标呢

18:23.820 --> 18:24.820
就是说我验证

18:24.820 --> 18:25.820
成功之后

18:25.820 --> 18:26.820
或者失败的时候

18:26.820 --> 18:27.820
我们可以看一下

18:27.820 --> 18:28.820
完成的这个

18:28.820 --> 18:29.820
这里面右侧

18:29.820 --> 18:31.820
会有一个小图标提示

18:31.820 --> 18:32.820
那这个呢

18:32.820 --> 18:33.820
其实不需要

18:33.820 --> 18:34.820
我们引入图标了

18:34.820 --> 18:35.820
只需要我们给的

18:35.820 --> 18:36.820
添加相应的属性

18:36.820 --> 18:37.820
就可以了

18:37.820 --> 18:38.820
在哪个里面添加

18:38.820 --> 18:39.820
我们直接在

18:39.820 --> 18:40.820
每一个formatum下面

18:40.820 --> 18:42.820
都给它添加一个

18:42.820 --> 18:45.820
属性叫hasfadeback

18:45.820 --> 18:46.820
添加完成之后

18:46.820 --> 18:48.820
就会有一个属性了

18:48.820 --> 18:49.820
我们可以来看一下

18:49.820 --> 18:50.820
在这个里面

18:50.820 --> 18:51.820
添加的时候

18:51.820 --> 18:52.820
使用手机号码

18:52.820 --> 18:54.820
这应该是添加了一个

18:54.820 --> 18:55.820
ok 不正确对不对

18:55.820 --> 18:56.820
当我正确的时候

18:56.820 --> 18:58.820
这里面就会有小图标

18:58.820 --> 18:59.820
显示了

18:59.820 --> 19:00.820
这个是咱们的

19:00.820 --> 19:01.820
没问题

19:01.820 --> 19:02.820
那下面的验证码呢

19:02.820 --> 19:03.820
我同样的是

19:03.820 --> 19:05.820
给它进行一个添加

19:05.820 --> 19:06.820
之后呢

19:06.820 --> 19:07.820
把我们的这个

19:07.820 --> 19:08.820
accountlogon

19:08.820 --> 19:09.820
这个里面

19:09.820 --> 19:10.820
一次的都给它

19:10.820 --> 19:12.820
进行一个添加

19:12.820 --> 19:13.820
我们来看一下

19:13.820 --> 19:15.820
不正确的时候呢

19:15.820 --> 19:16.820
它这个始终显示

19:16.820 --> 19:17.820
是一个错误

19:17.820 --> 19:19.820
这样有一个小图标

19:19.820 --> 19:21.820
这样就给它显示出来了

19:21.820 --> 19:22.820
之后呢

19:22.820 --> 19:24.820
我们接下来再把这个

19:24.820 --> 19:26.820
我们的发送验证码的

19:26.820 --> 19:27.820
相关规则

19:27.820 --> 19:29.820
给它来进行一个实现

19:29.820 --> 19:30.820
怎么来做

19:30.820 --> 19:31.820
首先呢

19:31.820 --> 19:32.820
我们要知道

19:32.820 --> 19:33.820
这个发送验证码

19:33.820 --> 19:34.820
第一

19:34.820 --> 19:35.820
如果说我们的

19:35.820 --> 19:36.820
这个手机号码

19:36.820 --> 19:37.820
假如说

19:37.820 --> 19:38.820
你要是输入的是

19:38.820 --> 19:39.820
错误的话

19:39.820 --> 19:40.820
那这个时候呢

19:40.820 --> 19:42.820
它应该是进入的

19:42.820 --> 19:43.820
也就是说

19:43.820 --> 19:45.820
现在其实是不允许发送的

19:45.820 --> 19:46.820
所以说呢

19:46.820 --> 19:47.820
这个时候

19:47.820 --> 19:48.820
我们要给它一个

19:48.820 --> 19:49.820
相关的属性

19:49.820 --> 19:51.820
回到smcode里面

19:51.820 --> 19:53.820
找到我们的这个button

19:53.820 --> 19:55.820
我们的这个button

19:55.820 --> 19:57.820
应该是在这个里面

19:57.820 --> 19:59.820
在这个里面

19:59.820 --> 20:00.820
我们回车

20:00.820 --> 20:01.820
第一步

20:01.820 --> 20:02.820
我们要给它一个什么

20:02.820 --> 20:03.820
给它一个属性

20:03.820 --> 20:05.820
那这个属性添加的时候

20:05.820 --> 20:06.820
第一个是什么属性呢

20:06.820 --> 20:07.820
是这个dateable

20:07.820 --> 20:08.820
是否可用

20:08.820 --> 20:09.820
dateable呢

20:09.820 --> 20:10.820
我们直接的在这个里面

20:10.820 --> 20:12.820
给它定一个

20:12.820 --> 20:14.820
叫dateable的

20:14.820 --> 20:15.820
那dateable的这个

20:15.820 --> 20:16.820
我们就得使用

20:16.820 --> 20:18.820
youthook来做一下了

20:18.820 --> 20:19.820
首先

20:19.820 --> 20:20.820
引入我们

20:20.820 --> 20:22.820
使用这种youtheState

20:22.820 --> 20:23.820
那我们直接的就是

20:23.820 --> 20:25.820
把这个youtheState

20:25.820 --> 20:28.820
给它做一个引入

20:28.820 --> 20:29.820
引入之后

20:29.820 --> 20:31.820
这里面定一个状态值

20:31.820 --> 20:33.820
就叫dateable的

20:33.820 --> 20:34.820
那我们写一下

20:34.820 --> 20:36.820
youtheState

20:36.820 --> 20:37.820
OK

20:37.820 --> 20:39.820
把它先给进来

20:39.820 --> 20:40.820
定一下吧

20:40.820 --> 20:41.820
const

20:41.820 --> 20:43.820
这个里面是

20:43.820 --> 20:45.820
dateable

20:45.820 --> 20:47.820
const

20:47.820 --> 20:49.820
dateable的

20:49.820 --> 20:51.820
然后还有一个set

20:51.820 --> 20:52.820
dateable的

20:52.820 --> 20:53.820
也就是说

20:53.820 --> 20:55.820
它可以进行一个设置

20:55.820 --> 20:57.820
set

20:57.820 --> 20:58.820
dateable的

20:58.820 --> 20:59.820
等于youtheState

20:59.820 --> 21:00.820
初始化的时候

21:00.820 --> 21:02.820
肯定是不允许进行使用的

21:02.820 --> 21:03.820
所以说

21:03.820 --> 21:04.820
给它一个处

21:04.820 --> 21:06.820
这里面应该显示处

21:06.820 --> 21:07.820
那这样呢

21:07.820 --> 21:09.820
一个禁用的这样一个效果

21:09.820 --> 21:10.820
大家可以看一下

21:10.820 --> 21:12.820
有了禁用效果之后

21:12.820 --> 21:13.820
什么时候让它展示出来呢

21:13.820 --> 21:14.820
就是说

21:14.820 --> 21:15.820
当我的一个

21:15.820 --> 21:17.820
手机号码验证成功之后

21:17.820 --> 21:19.820
它才可以进行一个

21:19.820 --> 21:20.820
显示对吧

21:20.820 --> 21:21.820
那这个时候

21:21.820 --> 21:22.820
我们就要对这个

21:22.820 --> 21:23.820
手机号码

21:23.820 --> 21:25.820
一个验证的

21:25.820 --> 21:26.820
是否成功

21:26.820 --> 21:28.820
来进行一个监听了

21:28.820 --> 21:29.820
对吧

21:29.820 --> 21:30.820
那怎么来进行监听呢

21:30.820 --> 21:31.820
其实我们监听的时候

21:31.820 --> 21:33.820
当你手机号码输入的时候

21:33.820 --> 21:34.820
是不是我们

21:34.820 --> 21:35.820
就可以做一个监听

21:35.820 --> 21:36.820
对吧

21:36.820 --> 21:38.820
我们直接的给它

21:38.820 --> 21:40.820
进行一个事件的绑定

21:40.820 --> 21:41.820
给哪一个进行事件绑定

21:41.820 --> 21:43.820
就是输入手机号码的时候

21:43.820 --> 21:44.820
我们在这个里面

21:44.820 --> 21:45.820
给它添加一个

21:45.820 --> 21:47.820
on change事件

21:47.820 --> 21:49.820
on change事件的时候

21:49.820 --> 21:50.820
我们其实就是

21:50.820 --> 21:53.820
监听check的

21:53.820 --> 21:59.160
check的一个mobile

21:59.160 --> 22:00.160
专门的来

22:00.160 --> 22:01.160
进行一个

22:01.160 --> 22:03.160
当前的手机号码

22:03.160 --> 22:05.160
是否成功的

22:05.160 --> 22:06.160
这么一个检测

22:06.160 --> 22:07.160
那我订一下

22:07.160 --> 22:08.160
这里面写一下

22:08.160 --> 22:12.160
检测手机号码输入

22:12.160 --> 22:14.160
是否成功

22:14.160 --> 22:16.160
那检测手机号码

22:16.160 --> 22:17.160
是否成功

22:17.160 --> 22:18.160
怎么来获取到

22:18.160 --> 22:19.160
这个手机号码呢

22:19.160 --> 22:20.160
其实这个里面

22:20.160 --> 22:21.160
就需要通过

22:21.160 --> 22:23.160
我们使用form

22:23.160 --> 22:24.160
来进去获取

22:24.160 --> 22:25.160
首先我们先看一下

22:25.160 --> 22:26.160
能不能获取到

22:26.160 --> 22:28.160
它的这个value值

22:28.160 --> 22:29.160
咱们在这里面

22:29.160 --> 22:30.160
打印一下value

22:30.160 --> 22:31.160
然后呢

22:31.160 --> 22:32.160
我们在这里面

22:32.160 --> 22:35.920
来看一下le value

22:35.920 --> 22:36.920
在这里面

22:36.920 --> 22:37.920
我们可以进行一个输入

22:37.920 --> 22:39.920
把上一个console

22:39.920 --> 22:40.920
给它干掉

22:40.920 --> 22:41.920
上面应该是有一个

22:41.920 --> 22:43.920
其他的这个console

22:43.920 --> 22:45.920
咱们现在是不需要了

22:45.920 --> 22:46.920
回到我们这个里面

22:46.920 --> 22:47.920
清空一下

22:47.920 --> 22:48.920
咱们在这里面来做测试

22:48.920 --> 22:49.920
1 2 3

22:49.920 --> 22:51.920
手机号码格式不正确

22:51.920 --> 22:52.920
你会发现能拿到

22:52.920 --> 22:53.920
其实咱们也不是

22:53.920 --> 22:55.920
拿到的这个

22:55.920 --> 22:56.920
当前这个value值

22:56.920 --> 22:57.920
我们拿到的是

22:57.920 --> 22:58.920
一个时间对象

22:58.920 --> 22:59.920
而且呢

22:59.920 --> 23:00.920
我们也不需要

23:00.920 --> 23:01.920
从这个时间对象里面

23:01.920 --> 23:03.920
来获取这个value值

23:03.920 --> 23:04.920
这样呢

23:04.920 --> 23:06.920
其实是相对复杂的

23:06.920 --> 23:08.920
我们可以通过放表单

23:08.920 --> 23:09.920
放表单呢

23:09.920 --> 23:10.920
可以来进行

23:10.920 --> 23:12.920
这个事情的一个处理

23:12.920 --> 23:14.920
如何来实现

23:14.920 --> 23:15.920
首先第一呢

23:15.920 --> 23:16.920
我要把放表单

23:16.920 --> 23:17.920
引入到这个

23:17.920 --> 23:18.920
当前组件里面

23:18.920 --> 23:19.920
那这个时候

23:19.920 --> 23:20.920
我传直的时候

23:20.920 --> 23:21.920
其实呢

23:21.920 --> 23:22.920
我是有传这个form的

23:22.920 --> 23:23.920
对不对

23:23.920 --> 23:24.920
那只不过是

23:24.920 --> 23:25.920
我在这里面

23:25.920 --> 23:26.920
没有进行一个接收

23:26.920 --> 23:27.920
当我接收到

23:27.920 --> 23:28.920
它之后

23:28.920 --> 23:29.920
这个时候呢

23:29.920 --> 23:30.920
我在这个里面

23:30.920 --> 23:31.920
可以通过

23:31.920 --> 23:33.920
放表单的一个属性

23:33.920 --> 23:35.920
来进行对它一个处理

23:35.920 --> 23:37.920
放表单有什么属性

23:37.920 --> 23:38.920
我们这里面

23:38.920 --> 23:40.920
可以有一个validator files

23:40.920 --> 23:42.920
我们可以查看一下

23:42.920 --> 23:43.920
它的相关API

23:43.920 --> 23:45.920
因为我们现在使用的是

23:45.920 --> 23:46.920
form实例

23:46.920 --> 23:48.920
那form实例的API呢

23:48.920 --> 23:49.920
其实呢

23:49.920 --> 23:50.920
它是在下面的

23:50.920 --> 23:51.920
我们可以往下找

23:51.920 --> 23:52.920
form实例

23:52.920 --> 23:53.920
form instance

23:53.920 --> 23:54.920
应该是

23:54.920 --> 23:55.920
我们去找一下

23:55.920 --> 23:56.920
form instance

23:56.920 --> 23:57.920
这里面呢

23:57.920 --> 23:59.920
就会有相关的一个说明

23:59.920 --> 24:00.920
那这个里面

24:00.920 --> 24:01.920
我们需要用到什么呢

24:01.920 --> 24:03.920
我们需要去用到

24:03.920 --> 24:05.920
它的一个检测的属性

24:05.920 --> 24:06.920
我们可以看一下

24:06.920 --> 24:08.920
这个里面有一个validator files

24:08.920 --> 24:10.920
处发表单的验证

24:10.920 --> 24:12.920
然后这个处发表单的验证

24:12.920 --> 24:14.920
这里面有一个name list的

24:14.920 --> 24:15.920
那这个呢

24:15.920 --> 24:16.920
是一个数组的形式

24:16.920 --> 24:18.920
然后返回一个promise对象

24:18.920 --> 24:19.920
那name list的里面

24:19.920 --> 24:20.920
数组形式

24:20.920 --> 24:22.920
我们就可以单独的

24:22.920 --> 24:23.920
把我们的这个password

24:23.920 --> 24:24.920
sorry

24:24.920 --> 24:25.920
把我们的这个

24:25.920 --> 24:28.920
手机号码的一个验证

24:28.920 --> 24:29.920
结果呢

24:29.920 --> 24:30.920
给它来进行一个

24:30.920 --> 24:32.920
提前的输出网

24:32.920 --> 24:33.920
我们这里面可以写一下

24:33.920 --> 24:35.920
const status

24:35.920 --> 24:37.920
因为它说了是一个promise

24:37.920 --> 24:39.920
那我这里面写一个wait

24:39.920 --> 24:40.920
然后呢

24:40.920 --> 24:42.920
这块定一个async

24:42.920 --> 24:44.920
async定义好了之后

24:44.920 --> 24:45.920
我们这里面就可以通过

24:45.920 --> 24:48.920
form调用点validator files的

24:48.920 --> 24:51.920
然后这里面使用一个叫mobile

24:51.920 --> 24:53.920
因为我们定义的这个规则的里面

24:53.920 --> 24:55.920
name值是不是叫mobile

24:55.920 --> 24:56.920
对吧

24:56.920 --> 24:57.920
也就是说

24:57.920 --> 24:58.920
其实这句话

24:58.920 --> 24:59.920
应该是可以理解为

24:59.920 --> 25:00.920
就是说

25:00.920 --> 25:03.920
过去我们的这个手机

25:03.920 --> 25:07.920
验证的一个结果

25:07.920 --> 25:08.920
如果说

25:08.920 --> 25:09.920
它验证成功之后

25:09.920 --> 25:10.920
那这个值呢

25:10.920 --> 25:12.920
其实它会给我们返回

25:12.920 --> 25:13.920
一个验证的状态啊

25:13.920 --> 25:15.920
我们可以来看一下

25:15.920 --> 25:17.920
这个里面131

25:17.920 --> 25:18.920
这是不是输出错误

25:18.920 --> 25:19.920
如果说对的话

25:19.920 --> 25:20.920
那这个里面

25:20.920 --> 25:21.920
是不是有了一个值啊

25:21.920 --> 25:22.920
也就是说

25:22.920 --> 25:23.920
如果说你错误

25:23.920 --> 25:24.920
你现在是什么

25:24.920 --> 25:25.920
也不会输出的

25:25.920 --> 25:26.920
对不对

25:26.920 --> 25:27.920
那如果说有了一个值

25:27.920 --> 25:28.920
那现在就代表着

25:28.920 --> 25:29.920
验证ok了

25:29.920 --> 25:30.920
是什么

25:30.920 --> 25:31.920
其实我们不需要拿这个值

25:31.920 --> 25:32.920
那我们怎么办呢

25:32.920 --> 25:33.920
我们直接的

25:33.920 --> 25:35.920
如果说你要是正确的话

25:35.920 --> 25:37.920
那我们现在就把这个

25:37.920 --> 25:38.920
表单的

25:38.920 --> 25:40.920
就把这个按钮的一个

25:40.920 --> 25:42.920
进用状态给它做一个改变

25:42.920 --> 25:43.920
那如果说失败呢

25:43.920 --> 25:45.920
假如说现在验证失败

25:45.920 --> 25:46.920
那这个时候

25:46.920 --> 25:47.920
我们是不是就需要

25:47.920 --> 25:49.920
把这个表单的这个

25:49.920 --> 25:50.920
进用状态

25:50.920 --> 25:52.920
还是要给它进行一个开启

25:52.920 --> 25:53.920
对不对

25:53.920 --> 25:54.920
所以说呢

25:54.920 --> 25:55.920
做这件事的时候

25:55.920 --> 25:56.920
是有两件事的

25:56.920 --> 25:58.920
因为它是一个Promise对象

25:58.920 --> 26:01.920
返回的是两种状态

26:01.920 --> 26:02.920
怎么办呢

26:02.920 --> 26:03.920
我们通过这种

26:03.920 --> 26:05.920
Track Catch的形式

26:05.920 --> 26:06.920
如果说

26:06.920 --> 26:07.920
你要是错了

26:07.920 --> 26:09.920
那我打印一下

26:09.920 --> 26:10.920
Error

26:10.920 --> 26:12.920
咱们从这个里面看一下

26:12.920 --> 26:14.920
如果说你要是正确的话

26:14.920 --> 26:15.920
那我这里面打印这个

26:15.920 --> 26:16.920
Status

26:16.920 --> 26:17.920
其实呢

26:17.920 --> 26:18.920
它是一个什么

26:18.920 --> 26:19.920
它是一个值

26:19.920 --> 26:21.920
我们这里面打印一个data

26:21.920 --> 26:22.920
好

26:22.920 --> 26:23.920
把这个data

26:23.920 --> 26:24.920
给它放到这个里面

26:24.920 --> 26:25.920
咱们来试一下

26:25.920 --> 26:26.920
现在不正确

26:26.920 --> 26:27.920
当我输入一位之后

26:27.920 --> 26:28.920
我可以正确了

26:28.920 --> 26:29.920
没问题

26:29.920 --> 26:30.920
当我输入错误了

26:30.920 --> 26:31.920
错误了之后

26:31.920 --> 26:32.920
那这个里面

26:32.920 --> 26:33.920
你会发现

26:33.920 --> 26:35.920
我们的这个Catch里面

26:35.920 --> 26:36.920
是把这个错误信息

26:36.920 --> 26:37.920
给补货到了对不对

26:37.920 --> 26:38.920
当然补货到

26:38.920 --> 26:39.920
这个错误信息之后

26:39.920 --> 26:41.920
我们要做一件什么事呢

26:41.920 --> 26:42.920
我们直接的

26:42.920 --> 26:43.920
要把当前的

26:43.920 --> 26:44.920
这个Dataable的状态

26:44.920 --> 26:45.920
给它设置到

26:45.920 --> 26:46.920
True

26:46.920 --> 26:47.920
是不是就可以了

26:47.920 --> 26:48.920
对吧

26:48.920 --> 26:49.920
所以说我们在这个里面

26:49.920 --> 26:50.920
做的时候

26:50.920 --> 26:51.920
其实这两块

26:51.920 --> 26:52.920
都要做这个事

26:52.920 --> 26:53.920
那我们就

26:53.920 --> 26:54.920
SetDataable

26:54.920 --> 26:55.920
在Dataable的

26:55.920 --> 26:56.920
我们这个里面

26:56.920 --> 26:58.920
就写一个

26:58.920 --> 26:59.920
首先统一的

26:59.920 --> 27:00.920
都给它为True

27:00.920 --> 27:01.920
然后这个我改一下

27:01.920 --> 27:02.920
成功之后

27:02.920 --> 27:03.920
把它进行状态

27:03.920 --> 27:05.920
给它进行一个解除

27:05.920 --> 27:06.920
如果说

27:06.920 --> 27:07.920
你要是验证失败了

27:07.920 --> 27:08.920
那我这个时候

27:08.920 --> 27:09.920
把你进行状态

27:09.920 --> 27:10.920
给你做一个开启

27:10.920 --> 27:11.920
就可以了

27:11.920 --> 27:12.920
我们来试一下

27:12.920 --> 27:13.920
行不行

27:14.920 --> 27:15.920
刷新一下

27:15.920 --> 27:16.920
重新的来做一个

27:16.920 --> 27:19.920
135275

27:19.920 --> 27:20.920
2121

27:20.920 --> 27:21.920
对吧

27:21.920 --> 27:22.920
现在成功

27:22.920 --> 27:23.920
发动验证了

27:23.920 --> 27:24.920
已经可以正常使用

27:24.920 --> 27:25.920
如果说你失败了

27:25.920 --> 27:27.920
那这个时候发动验证

27:27.920 --> 27:28.920
又去有一个

27:28.920 --> 27:29.920
进用状态了

27:29.920 --> 27:30.920
对不对

27:30.920 --> 27:31.920
那这个就实现了

27:31.920 --> 27:32.920
我们一个状态的处理

27:32.920 --> 27:33.920
其实状态处理

27:33.920 --> 27:34.920
主要实现

27:34.920 --> 27:35.920
就是依靠什么呢

27:35.920 --> 27:36.920
依靠我们

27:36.920 --> 27:37.920
放表达这个实力对象

27:37.920 --> 27:39.920
因为定义这个

27:39.920 --> 27:40.920
实力对象

27:40.920 --> 27:41.920
最主要的第一点

27:41.920 --> 27:42.920
就是什么呢

27:42.920 --> 27:44.920
获取它的一个验证规则

27:44.920 --> 27:45.920
所以说

27:45.920 --> 27:46.920
我们这个实力对象

27:46.920 --> 27:47.920
如何来使用

27:47.920 --> 27:48.920
在什么情况下使用

27:48.920 --> 27:51.920
当你需要处理一些

27:51.920 --> 27:52.920
其他的

27:52.920 --> 27:53.920
我们的这个

27:53.920 --> 27:54.920
处理的时候

27:54.920 --> 27:55.920
那这个时候呢

27:55.920 --> 27:56.920
Falm的这个实力对象

27:56.920 --> 27:57.920
是非常有用的了

27:57.920 --> 27:59.920
这个我们要明确一下

27:59.920 --> 28:01.920
好的那这是第一步

28:01.920 --> 28:02.920
第一步验证完成之后

28:02.920 --> 28:03.920
那这个时候呢

28:03.920 --> 28:04.920
我们这个发动验证码

28:04.920 --> 28:05.920
其实我们知道

28:05.920 --> 28:06.920
它不光是

28:06.920 --> 28:07.920
只显示发动验证码

28:07.920 --> 28:08.920
对不对

28:08.920 --> 28:09.920
那还有一个什么呢

28:09.920 --> 28:10.920
还有一个

28:10.920 --> 28:11.920
比如说多少秒之后

28:11.920 --> 28:12.920
来进行发送

28:12.920 --> 28:13.920
那接下来

28:13.920 --> 28:14.920
把这个逻辑

28:14.920 --> 28:16.920
也来做一下

28:16.920 --> 28:17.920
怎么来做

28:17.920 --> 28:18.920
回到我们的这个代码里

28:18.920 --> 28:19.920
首先第一步

28:19.920 --> 28:20.920
我们要做这个事

28:20.920 --> 28:22.920
一定要给他进行一个

28:22.920 --> 28:23.920
事件的绑定

28:23.920 --> 28:24.920
给谁来进行事件绑定

28:24.920 --> 28:26.920
就是给我们的这个button

28:26.920 --> 28:27.920
对吧

28:27.920 --> 28:30.920
来进行一个事件绑定啊

28:30.920 --> 28:31.920
绑定事件

28:31.920 --> 28:32.920
我们直接的

28:32.920 --> 28:34.920
给他进行一个什么呢

28:34.920 --> 28:36.920
unclick事件的一个绑定

28:36.920 --> 28:38.920
unclick

28:38.920 --> 28:39.920
unclick等于

28:39.920 --> 28:41.920
因为我们这个发动验证码

28:41.920 --> 28:42.920
其实呢

28:42.920 --> 28:43.920
是一个后端操作

28:43.920 --> 28:44.920
也就是说

28:44.920 --> 28:45.920
我们要请求接口的

28:45.920 --> 28:46.920
请求接口

28:46.920 --> 28:48.920
真实的发动给后端

28:48.920 --> 28:49.920
后端验证

28:49.920 --> 28:50.920
我们这个验证码之后

28:50.920 --> 28:51.920
再给我们返回一个

28:51.920 --> 28:52.920
验证的结果

28:52.920 --> 28:53.920
那我们这里面啊

28:53.920 --> 28:56.920
Send SM code

28:56.920 --> 28:58.920
Send SM code

28:58.920 --> 29:00.920
定义这么一个函数啊

29:00.920 --> 29:01.920
这个呢

29:01.920 --> 29:03.920
就是我们发送验证码的

29:03.920 --> 29:04.920
一个函数啊

29:04.920 --> 29:05.920
Const

29:05.920 --> 29:06.920
Send

29:07.920 --> 29:08.920
写一下

29:08.920 --> 29:10.920
Send SM code

29:10.920 --> 29:12.920
等于一个箭头函数

29:12.920 --> 29:13.920
那在这个里面

29:13.920 --> 29:14.920
我们就可以做事了

29:14.920 --> 29:15.920
做什么事呢

29:15.920 --> 29:16.920
首先我们

29:16.920 --> 29:18.920
Send SM code

29:18.920 --> 29:19.920
的时候

29:19.920 --> 29:20.920
大家可以看一下

29:20.920 --> 29:22.920
比如说这个真实的

29:22.920 --> 29:23.920
我们到这里面

29:23.920 --> 29:25.920
2511我点击发送验证码

29:25.920 --> 29:28.920
这里面会有一个改变啊

29:28.920 --> 29:29.920
是什么呢

29:29.920 --> 29:30.920
多二秒后

29:30.920 --> 29:31.920
重新进行一个发送

29:31.920 --> 29:32.920
而且呢

29:32.920 --> 29:34.920
这个倒计时的这个秒数

29:34.920 --> 29:35.920
它是在不断减少的

29:35.920 --> 29:36.920
所以说呢

29:36.920 --> 29:37.920
我们这里面

29:37.920 --> 29:38.920
还需要定一个状态

29:38.920 --> 29:39.920
是什么状态呢

29:39.920 --> 29:41.920
就是我们的一个数字

29:41.920 --> 29:42.920
对吧

29:42.920 --> 29:43.920
那我们这里面

29:43.920 --> 29:44.920
创建一下

29:44.920 --> 29:45.920
Const的

29:45.920 --> 29:48.920
定一个当前的指定的数字值

29:48.920 --> 29:50.920
那我们这里面

29:50.920 --> 29:52.920
定一个Current Time

29:52.920 --> 29:54.920
当前的这个时间

29:54.920 --> 29:55.920
然后呢

29:55.920 --> 29:56.920
我们再定一个Set

29:56.920 --> 29:58.920
Current Time

29:58.920 --> 30:00.920
作为改变的一个

30:00.920 --> 30:01.920
函数出发

30:01.920 --> 30:02.920
You'll stay的

30:02.920 --> 30:03.920
出手话的时候

30:03.920 --> 30:04.920
这个呢

30:04.920 --> 30:06.920
就看你需要设置多久啊

30:06.920 --> 30:07.920
我们这个

30:07.920 --> 30:08.920
出手话的时候

30:08.920 --> 30:09.920
比如说给他一个60

30:09.920 --> 30:10.920
那定义好

30:10.920 --> 30:11.920
这个时间之后

30:11.920 --> 30:12.920
我们要做一件

30:12.920 --> 30:13.920
什么事呢

30:13.920 --> 30:14.920
其实我们这个时间呢

30:14.920 --> 30:15.920
最后呢

30:15.920 --> 30:16.920
是要把这个

30:16.920 --> 30:18.920
巴德安牛里面的这个内容

30:18.920 --> 30:19.920
进行一个改变

30:19.920 --> 30:20.920
对不对

30:20.920 --> 30:21.920
也就是说

30:21.920 --> 30:22.920
他并不一定

30:22.920 --> 30:24.920
一直是发送验证码

30:24.920 --> 30:25.920
但是呢

30:25.920 --> 30:26.920
我们要有一个什么呢

30:26.920 --> 30:28.920
有一个当前的这个状态

30:28.920 --> 30:30.920
来对他进行一个什么呢

30:30.920 --> 30:31.920
描述

30:31.920 --> 30:32.920
也就是说

30:32.920 --> 30:34.920
你现在是在这个发送验证码

30:34.920 --> 30:35.920
还是说

30:35.920 --> 30:36.920
在这个

30:36.920 --> 30:38.920
准备正在获取验证码的这样

30:38.920 --> 30:39.920
一个状态

30:39.920 --> 30:40.920
所以说呢

30:40.920 --> 30:41.920
我们这里面

30:41.920 --> 30:42.920
再定一个

30:42.920 --> 30:43.920
有一个Current Time之后

30:43.920 --> 30:45.920
我们再定一个Current Status

30:45.920 --> 30:49.190
这个就是

30:54.190 --> 30:56.190
这个初始化的时候

30:56.190 --> 30:57.190
我们给这个

30:57.190 --> 30:58.190
Status值呢

30:58.190 --> 30:59.190
可以给他一个

30:59.190 --> 31:01.190
我们可以给他一个处啊

31:01.190 --> 31:03.190
这里面我们定一个处

31:03.190 --> 31:04.190
那这个时候

31:04.190 --> 31:06.190
我们需要怎么来做

31:06.190 --> 31:08.190
当你在进行这个

31:08.190 --> 31:10.190
发送的时候

31:10.190 --> 31:11.190
那我们直接的

31:11.190 --> 31:12.190
首先第一步

31:12.190 --> 31:14.190
把Set Current Status

31:14.190 --> 31:15.190
这个状态

31:15.190 --> 31:17.190
我们给他做一个改变

31:17.190 --> 31:18.190
False

31:18.190 --> 31:19.190
那这样呢

31:19.190 --> 31:20.190
其实我们改变

31:20.190 --> 31:22.190
这个Status的状态的意义

31:22.190 --> 31:24.190
也就是说目的是为什么呢

31:24.190 --> 31:25.190
其实这个就是

31:25.190 --> 31:27.190
可以通过他来

31:27.190 --> 31:28.190
进行决定

31:28.190 --> 31:30.190
当前是否显示

31:30.190 --> 31:31.190
哪一种文字的

31:31.190 --> 31:32.190
这么一个需求啊

31:32.190 --> 31:33.190
那我这里面

31:33.190 --> 31:34.190
就来写一下

31:34.190 --> 31:35.190
首先第一

31:35.190 --> 31:37.190
如果说我Current Status

31:37.190 --> 31:38.190
假如说

31:38.190 --> 31:39.190
他要是成立的话

31:39.190 --> 31:40.190
那一开始肯定是成立的

31:40.190 --> 31:41.190
对不对

31:41.190 --> 31:42.190
一开始成立的话

31:42.190 --> 31:43.190
那我就让他进行

31:43.190 --> 31:44.190
发送验证码

31:44.190 --> 31:45.190
否则呢

31:45.190 --> 31:46.190
那我直接的

31:46.190 --> 31:47.190
就让他显示

31:47.190 --> 31:49.190
多少秒重新发送

31:49.190 --> 31:50.190
对吧

31:50.190 --> 31:51.190
那多少秒重新发送

31:51.190 --> 31:52.190
这里面就会设计到

31:52.190 --> 31:55.190
我们要把这个定义好的

31:55.190 --> 31:57.190
Current Time

31:57.190 --> 31:58.190
作为一个动态值

31:58.190 --> 32:00.190
给他进行一个传递

32:00.190 --> 32:02.190
传递一个变量之后

32:02.190 --> 32:03.190
后面呢

32:03.190 --> 32:05.190
是一些固定的字符创

32:05.190 --> 32:06.190
多少秒后

32:06.190 --> 32:08.190
重新发送

32:08.190 --> 32:09.190
是不是就这样

32:09.190 --> 32:10.190
就OK了

32:10.190 --> 32:11.190
对吧

32:11.190 --> 32:12.190
那也就是说

32:12.190 --> 32:13.190
这样写完了之后

32:13.190 --> 32:14.190
我们可以来看一下

32:14.190 --> 32:15.190
这个效果

32:15.190 --> 32:16.190
刷新之后

32:16.190 --> 32:17.190
咱们来看一下

32:17.190 --> 32:18.190
使用手机号码

32:18.190 --> 32:21.190
照明1352275217

32:21.190 --> 32:22.190
OK

32:22.190 --> 32:23.190
那这个时候呢

32:23.190 --> 32:24.190
我们就可以做这个

32:24.190 --> 32:26.190
发送验证码的操作

32:26.190 --> 32:27.190
你会发现

32:27.190 --> 32:29.190
60秒后重新发送

32:29.190 --> 32:30.190
这个是没什么问题的

32:30.190 --> 32:31.190
对不对

32:31.190 --> 32:33.190
那现在已经

32:33.190 --> 32:35.190
实现了我们动态的

32:35.190 --> 32:37.190
渲染这个描述的文字

32:37.190 --> 32:38.190
那这是第一步

32:38.190 --> 32:39.190
第二步呢

32:39.190 --> 32:40.190
我们要做一个什么

32:40.190 --> 32:42.190
当我们进行发送验证码之后

32:42.190 --> 32:43.190
其实你这个里面

32:43.190 --> 32:44.190
应该是有一个什么

32:44.190 --> 32:45.190
dataable的

32:45.190 --> 32:46.190
也就是说

32:46.190 --> 32:47.190
那你这个里面

32:47.190 --> 32:48.190
除了我们

32:48.190 --> 32:50.190
set current status之后

32:50.190 --> 32:52.190
我们这个set dataable的

32:52.190 --> 32:54.190
要给他一个什么

32:54.190 --> 32:55.190
直接这里面

32:55.190 --> 32:56.190
也是一个true

32:56.190 --> 32:57.190
那这时候

32:57.190 --> 32:58.190
已经开始发送验证码

32:58.190 --> 32:59.190
其实这个应该是

32:59.190 --> 33:01.190
有一个金融状态了

33:01.190 --> 33:02.190
对吧

33:02.190 --> 33:03.190
我们来试一下

33:03.190 --> 33:04.190
60秒后重新发送

33:04.190 --> 33:05.190
我一点击

33:05.190 --> 33:06.190
sorry

33:06.190 --> 33:07.190
我刷新一下

33:09.190 --> 33:10.190
这里面重新来一下

33:10.190 --> 33:12.190
1352275217

33:12.190 --> 33:13.190
OK

33:13.190 --> 33:15.190
点击发送验证码

33:16.190 --> 33:17.190
现在呢

33:17.190 --> 33:18.190
你只要读秒就OK了

33:18.190 --> 33:19.190
那这个呢

33:19.190 --> 33:21.190
正在发送的状态时候

33:21.190 --> 33:22.190
你这个呢

33:22.190 --> 33:23.190
就不需要再点击

33:23.190 --> 33:24.190
就可以了

33:24.190 --> 33:25.190
对不对

33:25.190 --> 33:26.190
好的

33:26.190 --> 33:27.190
这是第二步

33:27.190 --> 33:28.190
第三步

33:28.190 --> 33:29.190
我们要做什么

33:29.190 --> 33:30.190
倒计时要跑起来

33:30.190 --> 33:31.190
对不对

33:31.190 --> 33:32.190
那我们这里面

33:32.190 --> 33:33.190
订一个run time

33:33.190 --> 33:34.190
函数

33:34.190 --> 33:35.190
专门做倒计时的

33:35.190 --> 33:36.190
一个处理

33:36.190 --> 33:37.190
这里面给同学们

33:37.190 --> 33:38.190
写一个处

33:39.190 --> 33:40.190
写一个注释

33:40.190 --> 33:42.190
这个叫倒计时处理

33:43.190 --> 33:45.190
const run time

33:45.190 --> 33:46.190
等于一个

33:46.190 --> 33:47.190
建讨来说

33:47.190 --> 33:48.190
那这个run time

33:48.190 --> 33:49.190
里面我们做什么

33:49.190 --> 33:51.190
我们要定一个定时器

33:51.190 --> 33:53.190
那我们这里面就写一下

33:53.190 --> 33:55.190
const timer

33:55.190 --> 33:56.190
定一个timer

33:56.190 --> 33:59.190
等于一个set interview

33:59.190 --> 34:02.630
set interview

34:02.630 --> 34:03.630
好了

34:03.630 --> 34:05.630
那这个set interview

34:05.630 --> 34:07.630
他是一秒钟执行一次

34:07.630 --> 34:09.630
那我后面给指定一下

34:09.630 --> 34:10.630
一秒钟执行一次

34:10.630 --> 34:12.630
他要做一件什么事呢

34:12.630 --> 34:14.630
我们直接在这个里面

34:14.630 --> 34:17.630
我们要给他进行一个处理

34:17.630 --> 34:18.630
处理什么呢

34:18.630 --> 34:22.630
我们处理这个set current time

34:22.630 --> 34:24.630
我们要做这个time

34:24.630 --> 34:25.630
时间的减减

34:25.630 --> 34:26.630
对不对

34:26.630 --> 34:27.630
那也就是说current time

34:27.630 --> 34:30.630
做一个减减操作

34:30.630 --> 34:32.630
那做了减减操作之后

34:32.630 --> 34:33.630
我们给他做一个

34:33.630 --> 34:34.630
前置地点

34:34.630 --> 34:36.630
把他给做一个减减操作

34:36.630 --> 34:38.630
咱们来试一下

34:38.630 --> 34:41.630
刷新一下这个界面

34:41.630 --> 34:43.630
然后重新再来一下

34:43.630 --> 34:44.630
13

34:44.630 --> 34:45.630
5

34:45.630 --> 34:46.630
2

34:46.630 --> 34:47.630
7

34:47.630 --> 34:48.630
之后发送验证码

34:48.630 --> 34:49.630
60

34:49.630 --> 34:50.630
59

34:50.630 --> 34:51.630
这里面有一个爆出

34:51.630 --> 34:53.630
Carson timer

34:53.630 --> 34:54.630
那这个是什么原因呢

34:54.630 --> 34:56.630
因为我们定义的时候

34:56.630 --> 34:58.630
使用这种const的

34:58.630 --> 35:00.630
const是我们没办法进行

35:00.630 --> 35:01.630
对他当前这个值

35:01.630 --> 35:03.630
给他做一个改变的

35:03.630 --> 35:04.630
所以说我们这里面

35:04.630 --> 35:06.630
使用light的形式

35:06.630 --> 35:07.630
我们再来看一下

35:07.630 --> 35:08.630
通过light的这种形式

35:08.630 --> 35:09.630
它是否可行

35:09.630 --> 35:10.630
刷新一下

35:10.630 --> 35:11.630
刷新一下之后

35:11.630 --> 35:12.630
我们在这里面

35:12.630 --> 35:13.630
使用手机号码

35:13.630 --> 35:14.630
13

35:14.630 --> 35:15.630
5

35:15.630 --> 35:16.630
27

35:16.630 --> 35:17.630
5

35:17.630 --> 35:18.630
1

35:18.630 --> 35:19.630
多了一位

35:19.630 --> 35:20.630
然后点击发送

35:20.630 --> 35:21.630
59

35:21.630 --> 35:22.630
58

35:22.630 --> 35:23.630
57

35:23.630 --> 35:24.630
这样是不是

35:24.630 --> 35:25.630
就没什么问题了

35:25.630 --> 35:26.630
也就是说

35:26.630 --> 35:27.630
现在就正确的

35:27.630 --> 35:28.630
实现了一个什么

35:28.630 --> 35:29.630
我们验证码的

35:29.630 --> 35:30.630
这样一个处理

35:30.630 --> 35:31.630
也就是说

35:31.630 --> 35:33.630
道具时的一个获取

35:33.630 --> 35:34.630
这个道具时获取

35:34.630 --> 35:35.630
其实我们知道

35:35.630 --> 35:36.630
60秒

35:36.630 --> 35:37.630
肯定是有读完的时候

35:37.630 --> 35:38.630
对不对

35:38.630 --> 35:39.630
那所以说在这里面

35:39.630 --> 35:41.630
我们既然定义了这个time

35:41.630 --> 35:43.630
也就是说这个定时期的指针

35:43.630 --> 35:44.630
那我这里面

35:44.630 --> 35:46.630
就要来进行一个判断

35:46.630 --> 35:47.630
如果说他读完了

35:47.630 --> 35:48.630
那我们怎么办

35:48.630 --> 35:49.630
我们直接的

35:49.630 --> 35:50.630
把他这个

35:50.630 --> 35:51.630
定时期的指针

35:51.630 --> 35:53.630
给他做一个清零

35:53.630 --> 35:54.630
就可以了

35:54.630 --> 35:55.630
如果说

35:55.630 --> 35:56.630
carn的time

35:56.630 --> 35:57.630
假如说他要等于

35:57.630 --> 35:58.630
等于零的话

35:58.630 --> 35:59.630
那我们把这个clear

35:59.630 --> 36:00.630
interview

36:00.630 --> 36:01.630
time

36:01.630 --> 36:02.630
把这个定时期

36:02.630 --> 36:03.630
给他清除

36:03.630 --> 36:04.630
清除之后

36:04.630 --> 36:05.630
那我们这个

36:05.630 --> 36:06.630
是不是又可以正常的

36:06.630 --> 36:07.630
来进行一个什么

36:07.630 --> 36:08.630
发送验证码

36:08.630 --> 36:09.630
的一个显示了

36:09.630 --> 36:10.630
对不对

36:10.630 --> 36:11.630
那我们在这里面

36:11.630 --> 36:13.630
set current status

36:13.630 --> 36:14.630
我们这里面

36:14.630 --> 36:15.630
要给他调整为什么

36:15.630 --> 36:17.630
是为处的

36:17.630 --> 36:19.630
这是第一件事

36:19.630 --> 36:20.630
调整为处之后

36:20.630 --> 36:22.630
那当我们发送验证码

36:22.630 --> 36:23.630
已经这个

36:23.630 --> 36:24.630
显示出来了

36:24.630 --> 36:25.630
那这个时候

36:25.630 --> 36:26.630
我们是不是

36:26.630 --> 36:28.630
要给他做一个禁用

36:28.630 --> 36:29.630
对吧

36:29.630 --> 36:30.630
因为我们这个验证码

36:30.630 --> 36:31.630
已经发送完成了

36:31.630 --> 36:32.630
你这个时候

36:32.630 --> 36:33.630
如果说

36:33.630 --> 36:34.630
你要是去想再

36:34.630 --> 36:36.630
进行重新发送的

36:36.630 --> 36:37.630
是不是也可以

36:37.630 --> 36:38.630
那我这里面

36:38.630 --> 36:40.630
set current

36:40.630 --> 36:41.630
set dateable的

36:41.630 --> 36:42.630
我们把这个

36:42.630 --> 36:43.630
set dateable的

36:43.630 --> 36:45.630
也给他调整一下

36:45.630 --> 36:46.630
变为一个什么

36:46.630 --> 36:47.630
false

36:47.630 --> 36:48.630
之后呢

36:48.630 --> 36:49.630
我们把这个

36:49.630 --> 36:50.630
因为你已经

36:50.630 --> 36:51.630
验证码

36:51.630 --> 36:53.630
已经这个发送了

36:53.630 --> 36:54.630
发送完成之后

36:54.630 --> 36:55.630
那这个独秒

36:55.630 --> 36:56.630
是不是又从六十开始了

36:56.630 --> 36:57.630
对吧

36:57.630 --> 36:58.630
那这个呢

36:58.630 --> 36:59.630
就是我们要处理的

36:59.630 --> 37:00.630
相关的逻辑

37:00.630 --> 37:01.630
我们可以看一下

37:01.630 --> 37:03.630
之后定义完成之后

37:03.630 --> 37:04.630
那就不让他减减了

37:04.630 --> 37:05.630
最后给他做一个

37:05.630 --> 37:06.630
return

37:06.630 --> 37:09.630
现在colonate

37:09.630 --> 37:10.970
这个

37:10.970 --> 37:12.630
lady

37:12.630 --> 37:15.630
认识

37:15.630 --> 37:16.630
咱们也马上

37:16.630 --> 37:17.630
用前妈妈

37:17.630 --> 37:22.630
cry

37:23.630 --> 37:24.630
我们

37:24.630 --> 37:25.630
发送

37:25.630 --> 37:26.710
平常

37:26.710 --> 37:27.630
我们发送

37:27.630 --> 37:28.630
戏

37:28.630 --> 37:30.630
的

37:30.630 --> 37:31.630
看看

37:31.630 --> 37:32.930
然后

37:32.930 --> 37:33.630
别人

37:33.630 --> 37:34.630
说

37:34.630 --> 37:38.070
解一位这个又是变成了一个进用状态

37:38.070 --> 37:40.390
然后直接到我再点击发送验证码

37:40.390 --> 37:42.190
这个时候也没什么问题

37:42.190 --> 37:44.790
文本给我做一个改变啊

37:44.790 --> 37:46.790
这个里面怎么又变成55秒啊

37:46.790 --> 37:50.390
是因为我们底下是给他设置了一个什么60啊

37:50.390 --> 37:51.510
咱们重新来一下

37:51.510 --> 37:56.070
把他底下呢也给他设置成我们这个5秒钟

37:57.590 --> 38:00.110
咱们用5秒来做一个测试

38:00.110 --> 38:04.590
使用手机画码登陆135257521

38:04.630 --> 38:06.550
OK发送验证码

38:06.550 --> 38:08.470
发送验证码54321

38:08.470 --> 38:11.110
当读到0秒之后文本改变

38:11.110 --> 38:13.430
然后按钮可以进行使用

38:13.430 --> 38:15.030
这是我们的一个需求

38:15.030 --> 38:18.230
当我再点击又从5秒开始读取

38:18.230 --> 38:20.630
那这个里面其实主要能实现

38:20.630 --> 38:23.670
就是依靠我们这几步的一个操作对不对

38:23.670 --> 38:25.510
这个呢就是我们整个的这个

38:25.510 --> 38:30.110
发送验证码的一部分的业务的一个逻辑实现

38:30.110 --> 38:31.430
那么下节课呢

38:31.430 --> 38:35.750
我们就继续啊来通过以上基础

38:35.750 --> 38:38.230
也就是说我们当前实现的相关内容

38:38.230 --> 38:39.070
就可以呢

38:39.070 --> 38:42.150
进行一下数据的这个请求处理了

38:42.150 --> 38:47.830
也就是说把我们用户模块的一些数据的请求来实现一下

38:47.830 --> 38:49.550
我们本节课的内容就到这里

