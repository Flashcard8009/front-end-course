WEBVTT

00:00.180 --> 00:05.180
这一堂课咱们会做一件特别特别重要的一件事情

00:05.180 --> 00:09.180
就是我们需要分析一下我们整个的这个项目

00:09.180 --> 00:11.180
我们要用的技术有哪些

00:11.180 --> 00:16.180
以及整个的这个弊端管理系统的界面当中

00:16.180 --> 00:20.180
每一个细小的功能点

00:20.180 --> 00:25.180
它需要的技术都可以用什么技术去实现

00:26.180 --> 00:30.180
我们先把这些大块的一个方向先明确一下

00:30.180 --> 00:34.180
梳理出来之后大家就可以开始开发了

00:34.180 --> 00:37.180
也就是说我们这一堂课上完了之后

00:37.180 --> 00:42.180
我建议大家不要继续的去学习

00:42.180 --> 00:46.180
而是先自己根据我们这一堂课

00:46.180 --> 00:49.180
梳理出来的这样的一些功能点

00:49.180 --> 00:51.180
这些技术点

00:51.180 --> 00:54.180
然后自己先去实现一下

00:54.180 --> 00:57.180
实现的过程当中

00:57.180 --> 01:00.180
如果哪里出现问题了

01:00.180 --> 01:03.180
你就可以再回过来

01:03.180 --> 01:07.180
看一下我们的课程 看一下视频

01:07.180 --> 01:10.180
老师是怎么去处理的

01:10.180 --> 01:11.180
好吗

01:11.180 --> 01:13.180
那好了 这话不多说 我们开始

01:13.180 --> 01:15.180
那我们首先在

01:15.180 --> 01:19.180
进入到我们整个的这样的一个

01:19.180 --> 01:22.180
细小的功能点的一个分析之前

01:22.180 --> 01:25.180
我们先把整个这个项目

01:25.180 --> 01:30.180
它的一个最外层的这样的一个框架结构

01:30.180 --> 01:33.180
来看一下 来确定一下

01:33.180 --> 01:35.180
那我们整个这个项目

01:35.180 --> 01:39.180
我们会发现这个项目有很多的样式

01:39.180 --> 01:42.180
在做确定样式之前

01:42.180 --> 01:47.180
我们先来确定的一个最大块的一个结构

01:47.180 --> 01:50.180
就是我们整个我们要用的

01:50.180 --> 01:53.180
最大的这样的一个框架是什么

01:53.180 --> 01:56.180
那我们这个项目是放在

01:56.180 --> 01:59.180
View的实现项目当中

01:59.180 --> 02:01.180
那么我们这个项目

02:01.180 --> 02:03.180
也就是要用View去实现

02:03.180 --> 02:06.180
也就是说我们最外层的这样的一个

02:06.180 --> 02:08.180
框架

02:08.180 --> 02:11.180
整个项目的一个运行的一个框架

02:11.180 --> 02:13.180
我们选择的就是View

02:13.180 --> 02:15.180
那我这里面

02:15.180 --> 02:17.180
来写一下

02:17.180 --> 02:19.180
整个运行的这个项目

02:21.550 --> 02:24.550
ok 这是运行的框架

02:24.550 --> 02:26.550
那我们除了运行框架之外

02:26.550 --> 02:28.550
刚刚我有说整个这个项目

02:28.550 --> 02:31.550
它会有很多的这样的一些样式

02:31.550 --> 02:34.550
那大家在写之前那些项目的时候

02:34.550 --> 02:37.550
因为发现自己在去实现样式的话

02:37.550 --> 02:39.550
是很耗费时间的

02:39.550 --> 02:41.550
对不对 是非常耗费时间的

02:41.550 --> 02:43.550
所以我们可不可以

02:43.550 --> 02:45.550
在做这个项目的时候

02:45.550 --> 02:48.550
我们为了节约时间

02:48.550 --> 02:51.550
我们可以去选择一个

02:51.550 --> 02:53.550
线上移右的

02:53.550 --> 02:56.550
开源的这样的一些UI框架

02:56.550 --> 02:59.550
UI组建库

02:59.550 --> 03:01.550
那我们这个项目呢

03:01.550 --> 03:03.550
其实完全是可以的

03:03.550 --> 03:04.550
对不对 你看这些样式

03:04.550 --> 03:06.550
相对来说都是常见的

03:06.550 --> 03:08.550
那这些常见的一些样式

03:08.550 --> 03:10.550
你当然可以去选择一些

03:10.550 --> 03:13.550
这个线上已经有的

03:13.550 --> 03:16.550
而且还有很多人

03:16.550 --> 03:18.550
不断地去优化的

03:18.550 --> 03:20.550
这样的一些组建库

03:20.550 --> 03:21.550
对吧

03:21.550 --> 03:22.550
那我们这个项目

03:22.550 --> 03:24.550
我们所选择的这样一个组建库

03:24.550 --> 03:25.550
是什么呢

03:25.550 --> 03:28.550
就是这个AntiDesign

03:28.550 --> 03:29.550
AntiDesign

03:29.550 --> 03:31.550
我们来写一下

03:31.550 --> 03:33.550
AntiDesign

03:33.550 --> 03:35.550
Anti

03:35.550 --> 03:37.550
Defign

03:37.550 --> 03:39.550
AntiDesign

03:39.550 --> 03:40.550
我为什么选AntiDesign

03:40.550 --> 03:42.550
而没有选这个AnimateUI

03:42.550 --> 03:45.550
是因为我在开发这个项目的时候

03:45.550 --> 03:47.550
我听说这个AnimateUI

03:47.550 --> 03:49.550
不更新了

03:49.550 --> 03:51.550
没有人去维护它了

03:51.550 --> 03:53.550
所以我才选择了AntiDesign

03:53.550 --> 03:55.550
但是我用AntiDesign

03:55.550 --> 03:57.550
开发了一段时间之后

03:57.550 --> 03:59.550
我又发现Github上

03:59.550 --> 04:01.550
这个AnimateUI

04:01.550 --> 04:03.550
又有人更新了

04:03.550 --> 04:05.550
又有人这个维护了

04:05.550 --> 04:07.550
所以那个时候

04:07.550 --> 04:09.550
我已经明确选择了AntiDesign了

04:09.550 --> 04:11.550
我就没有去修改

04:11.550 --> 04:13.550
我们这个组建库

04:13.550 --> 04:16.550
那如果你使用AnimateUI

04:16.550 --> 04:18.550
比较熟练的话

04:18.550 --> 04:20.550
你就可以去选择AnimateUI

04:20.550 --> 04:22.550
那这个UI库

04:22.550 --> 04:23.550
你可以选择任意的

04:23.550 --> 04:25.550
只要符合你自己的需求就可以

04:25.550 --> 04:26.550
好吧

04:26.550 --> 04:28.550
这里面我选的是AntiDesign

04:28.550 --> 04:30.550
然后我们再接下来

04:30.550 --> 04:31.550
再来思考一下

04:31.550 --> 04:32.550
整个的这个项目

04:32.550 --> 04:34.550
大框我已经确定了

04:34.550 --> 04:36.550
就在整屉的

04:36.550 --> 04:37.550
这样的一个技术

04:37.550 --> 04:38.550
我已经确定了

04:38.550 --> 04:39.550
我们可以用View

04:39.550 --> 04:42.550
然后我们的这个UI框架

04:42.550 --> 04:43.550
UI库

04:43.550 --> 04:46.550
我们可以选择这个AntiDesign

04:46.550 --> 04:47.550
对不对

04:47.550 --> 04:48.550
那除此之外

04:48.550 --> 04:49.550
我们看一下整个页面

04:49.550 --> 04:51.550
它还会用到哪些技术

04:51.550 --> 04:53.550
我们会发现整个这个项目

04:53.550 --> 04:55.550
它会有很多的界面吧

04:55.550 --> 04:56.550
对不对

04:56.550 --> 04:57.550
所以我们不免

04:57.550 --> 04:59.550
会有一些界面的跳转

04:59.550 --> 05:00.550
对不对

05:00.550 --> 05:01.550
那界面跳转

05:01.550 --> 05:03.550
我们去选择什么技术呢

05:03.550 --> 05:05.550
我们这里面

05:05.550 --> 05:06.550
用到了View框架

05:06.550 --> 05:08.550
那我是不是很容易的

05:08.550 --> 05:10.550
就去想到了ViewRouter

05:10.550 --> 05:11.550
对吧

05:11.550 --> 05:12.550
ViewRouter

05:12.550 --> 05:15.550
我们可以做路由切换

05:15.550 --> 05:16.550
就是路由切换

05:16.550 --> 05:18.550
我们选择ViewRouter

05:18.550 --> 05:23.930
R,R,U,E,R

05:23.930 --> 05:24.930
对吧

05:24.930 --> 05:25.930
这是路由

05:25.930 --> 05:26.930
那除此之外呢

05:26.930 --> 05:27.930
我们再来看

05:27.930 --> 05:29.930
整体的这个效果

05:29.930 --> 05:30.930
我们会发现

05:30.930 --> 05:31.930
我们登录的时候

05:31.930 --> 05:33.930
它是有用户名的

05:33.930 --> 05:34.930
对不对

05:34.930 --> 05:35.930
那在我退出之后

05:35.930 --> 05:37.930
我们要跳转的界面

05:37.930 --> 05:39.930
是不是应该是一个登录的界面

05:39.930 --> 05:41.930
因为发现登录的界面

05:41.930 --> 05:42.930
和我们当前

05:42.930 --> 05:44.930
进入到的这个首页

05:44.930 --> 05:46.930
以及我们整个系统这个界面

05:46.930 --> 05:47.930
它的界面样式

05:47.930 --> 05:49.930
完全是不一样的吧

05:49.930 --> 05:50.930
对不对

05:50.930 --> 05:51.930
那莫也就是说

05:51.930 --> 05:52.930
这两个页面

05:52.930 --> 05:53.930
它肯定是两个

05:53.930 --> 05:54.930
对不对

05:54.930 --> 05:56.930
应该分成两个组件

05:56.930 --> 05:57.930
那这两个组件

05:57.930 --> 05:58.930
我们会发现

05:58.930 --> 06:00.930
这里面有用户的信息了

06:00.930 --> 06:01.930
看到了吗

06:01.930 --> 06:02.930
在我们一进到

06:02.930 --> 06:03.930
整个系统当中

06:03.930 --> 06:04.930
右上角

06:04.930 --> 06:06.930
它是有用户信息的

06:06.930 --> 06:08.930
那这个用户信息来自于呢

06:08.930 --> 06:09.930
是不是就需要来自于

06:09.930 --> 06:11.930
登录的用户啊

06:11.930 --> 06:12.930
所以这里面

06:12.930 --> 06:14.930
我们是不是就涉及到了一个

06:14.930 --> 06:16.930
用户的这个数据

06:16.930 --> 06:19.930
它需要在不同组件之间

06:19.930 --> 06:20.930
共享啊

06:20.930 --> 06:21.930
对不对

06:21.930 --> 06:23.930
是不是共享的一个关系

06:23.930 --> 06:24.930
那我们想要去

06:24.930 --> 06:26.930
实现这样的一个数据

06:26.930 --> 06:27.930
共享

06:27.930 --> 06:29.930
我们可以怎么去实现呢

06:29.930 --> 06:30.930
这两个组件

06:30.930 --> 06:31.930
它还是两个独立的吧

06:31.930 --> 06:32.930
对不对

06:32.930 --> 06:34.930
它们有公共的附近吗

06:34.930 --> 06:35.930
好像没有吧

06:35.930 --> 06:36.930
对不对

06:36.930 --> 06:37.930
这两个组件

06:37.930 --> 06:39.930
它就肯定是通过Viewer Router

06:39.930 --> 06:41.930
进行切换的

06:41.930 --> 06:43.930
那我们怎么能把这个数据

06:43.930 --> 06:44.930
进行共享呢

06:44.930 --> 06:46.930
我是不是就可以使用Viewer

06:46.930 --> 06:48.930
当中的这样一个

06:48.930 --> 06:50.930
状态管理的技术

06:50.930 --> 06:52.930
就是Viewer X

06:52.930 --> 06:53.930
对吧

06:53.930 --> 06:54.930
所以这里面

06:54.930 --> 06:56.930
我们还会用到Viewer X

06:56.930 --> 06:59.930
主要用于我们数据

06:59.930 --> 07:01.930
这个组件之间的

07:01.930 --> 07:03.930
数据共享

07:03.930 --> 07:04.930
可以吧

07:04.930 --> 07:06.930
就是Viewer X

07:06.930 --> 07:08.930
就是状态管理

07:08.930 --> 07:09.930
那除此之外

07:09.930 --> 07:10.930
我还用到其他的吗

07:10.930 --> 07:11.930
我们再来看啊

07:11.930 --> 07:13.930
整个项目还有什么

07:13.930 --> 07:15.930
还有什么共同点

07:15.930 --> 07:16.930
我们会发现

07:16.930 --> 07:17.930
是不是有很多的数据

07:17.930 --> 07:18.930
它这里面

07:18.930 --> 07:19.930
而且在我们

07:19.930 --> 07:21.930
编辑删除的时候

07:21.930 --> 07:23.930
我们编辑和删除的

07:23.930 --> 07:24.930
最后的数据

07:24.930 --> 07:25.930
应该存在呢

07:25.930 --> 07:27.930
是不是应该存在后台呀

07:27.930 --> 07:29.930
只有存在后台了

07:29.930 --> 07:30.930
我们的数据

07:30.930 --> 07:32.930
才能在两个平台上

07:32.930 --> 07:34.930
共享吧

07:34.930 --> 07:35.930
对不对

07:35.930 --> 07:37.930
只有存储在

07:37.930 --> 07:39.930
后台的数据库当中

07:39.930 --> 07:41.930
我们才能永久性的存储

07:41.930 --> 07:42.930
对不对

07:42.930 --> 07:43.930
所以这里面

07:43.930 --> 07:45.930
又涉及到了一个

07:45.930 --> 07:47.930
数据请求的一个问题吧

07:47.930 --> 07:49.930
那涉及到数据请求了

07:49.930 --> 07:51.930
我们可以选用的技术是什么

07:51.930 --> 07:53.930
是不是你就可以选用Axis

07:53.930 --> 07:54.930
对吧

07:54.930 --> 07:56.930
Axis这样的一个插件

07:56.930 --> 07:57.930
来做这个

07:57.930 --> 07:59.930
网络请求处理

07:59.930 --> 08:00.930
对不对

08:00.930 --> 08:02.930
这是Axis

08:02.930 --> 08:04.930
ASLS

08:05.930 --> 08:06.930
OK吧

08:06.930 --> 08:07.930
那我们现在已经

08:07.930 --> 08:08.930
处理出来

08:08.930 --> 08:09.930
我们整个这个项目

08:09.930 --> 08:11.930
我们要用到技术了

08:11.930 --> 08:12.930
接下来

08:12.930 --> 08:13.930
我们要开始

08:13.930 --> 08:15.930
开发的时候

08:15.930 --> 08:17.930
我们怎么去

08:17.930 --> 08:19.930
搭建这样的一个项目啊

08:19.930 --> 08:20.930
对不对

08:20.930 --> 08:21.930
那我们如果要是

08:21.930 --> 08:22.930
按照正常那个

08:22.930 --> 08:23.930
搭建方法的话

08:23.930 --> 08:24.930
是不是就是

08:24.930 --> 08:26.930
创建文件检安

08:26.930 --> 08:28.930
然后初始化项目

08:28.930 --> 08:30.930
然后再往里面去下载

08:30.930 --> 08:31.930
我们想要的

08:31.930 --> 08:32.930
这些依赖

08:32.930 --> 08:33.930
这些信息

08:33.930 --> 08:34.930
对吧

08:34.930 --> 08:35.930
说说比较麻烦

08:35.930 --> 08:36.930
对不对

08:36.930 --> 08:37.930
那我们之前

08:37.930 --> 08:38.930
是不是还学到了

08:38.930 --> 08:40.930
一种比较简单的方式

08:40.930 --> 08:42.930
可以自动的

08:42.930 --> 08:44.930
构建出我们整个的

08:44.930 --> 08:45.930
一个项目

08:45.930 --> 08:46.930
对不对

08:46.930 --> 08:47.930
那这种方法是什么

08:47.930 --> 08:49.930
是不是就可以使用

08:49.930 --> 08:51.930
搅手架呀

08:51.930 --> 08:52.930
那我们用到View了

08:52.930 --> 08:53.930
我们是不是

08:53.930 --> 08:54.930
就可以用View的

08:54.930 --> 08:55.930
搅手架

08:55.930 --> 08:57.930
就是View ECRI

08:57.930 --> 08:58.930
这样的一个搅手架

08:58.930 --> 08:59.930
去自动的

08:59.930 --> 09:01.930
构建我们整体的

09:01.930 --> 09:02.930
这个项目吧

09:02.930 --> 09:03.930
对吧

09:03.930 --> 09:04.930
是不是就大大的

09:04.930 --> 09:06.930
方便了我们的开发

09:06.930 --> 09:07.930
那也就是说

09:07.930 --> 09:08.930
我们还用

09:08.930 --> 09:10.930
还需要用到一些工具

09:10.930 --> 09:13.930
第二工具就是View ECRI

09:13.930 --> 09:16.930
那View ECRI

09:16.930 --> 09:18.930
这是工具

09:18.930 --> 09:20.930
然后除了它之外呢

09:20.930 --> 09:22.930
现在我们使用

09:22.930 --> 09:24.930
这个View ECRI的过程当中

09:24.930 --> 09:26.930
在我们选择技术的时候

09:26.930 --> 09:27.930
我们可以选择

09:27.930 --> 09:28.930
我们想要的这些技术

09:28.930 --> 09:29.930
怎么办

09:29.930 --> 09:30.930
那除此之外

09:30.930 --> 09:31.930
它是不是还有一个提示

09:31.930 --> 09:32.930
就是

09:32.930 --> 09:33.930
我们是否需要

09:33.930 --> 09:35.930
代码规范的

09:35.930 --> 09:37.930
这样的一个插件吧

09:37.930 --> 09:38.930
对不对

09:38.930 --> 09:39.930
那一般我们选的

09:39.930 --> 09:40.930
是不是都是ESLint

09:40.930 --> 09:42.930
这样的一个插件

09:42.930 --> 09:44.930
那这个代码规范的插件

09:44.930 --> 09:45.930
它主要作用

09:45.930 --> 09:46.930
是不是就是规范

09:46.930 --> 09:48.930
我们的代码书写格式啊

09:48.930 --> 09:49.930
对不对

09:49.930 --> 09:51.930
那我们

09:51.930 --> 09:53.930
为什么要去规范

09:53.930 --> 09:56.930
咱们的代码书写格式呢

09:56.930 --> 09:57.930
是不是就是

09:57.930 --> 09:59.930
更加的方便我们人

09:59.930 --> 10:01.930
去读我们的代码

10:01.930 --> 10:02.930
对不对

10:02.930 --> 10:03.930
我们一直在说

10:03.930 --> 10:04.930
咱们写的代码

10:04.930 --> 10:06.930
其实都是给人读的

10:06.930 --> 10:08.930
它并不是给机器读的

10:08.930 --> 10:09.930
电的 计算机

10:09.930 --> 10:10.930
它是怎么读的

10:10.930 --> 10:11.930
计算机它能读懂的

10:11.930 --> 10:13.930
只有二斤值的数

10:13.930 --> 10:15.930
那它怎么能把这个

10:15.930 --> 10:16.930
我们的代码

10:16.930 --> 10:17.930
人读的代码

10:17.930 --> 10:18.930
转换成二斤值的数

10:18.930 --> 10:20.930
是不是就需要通过

10:20.930 --> 10:21.930
借助咱们的这样

10:21.930 --> 10:22.930
那个编程语言

10:22.930 --> 10:23.930
对吧

10:23.930 --> 10:24.930
然后对编程语言

10:24.930 --> 10:26.930
进行一系列的编译

10:26.930 --> 10:28.930
有一些编译器

10:28.930 --> 10:30.930
它可以进行编译的

10:30.930 --> 10:31.930
对不对

10:31.930 --> 10:33.930
那这样一来

10:33.930 --> 10:34.930
它才能转换成

10:34.930 --> 10:36.930
一些二斤值的数

10:36.930 --> 10:38.930
然后让我们的

10:38.930 --> 10:39.930
这个计算机

10:39.930 --> 10:41.930
它能听懂

10:41.930 --> 10:42.930
它能看懂

10:42.930 --> 10:43.930
然后

10:43.930 --> 10:44.930
转换成

10:44.930 --> 10:45.930
我们想要的

10:45.930 --> 10:46.930
一些功能

10:46.930 --> 10:47.930
对不对

10:47.930 --> 10:48.930
所以这里面

10:48.930 --> 10:50.930
我们还需要用到的

10:50.930 --> 10:51.930
就是这样

10:51.930 --> 10:53.930
那个代码规范的工具

10:53.930 --> 10:54.930
这个工具呢

10:54.930 --> 10:55.930
主要就是

10:55.930 --> 10:57.930
来规范我们代码的

10:57.930 --> 10:58.930
书写

10:58.930 --> 11:00.930
那能让我们

11:00.930 --> 11:01.930
更加

11:01.930 --> 11:03.930
这个清晰的

11:03.930 --> 11:05.930
看明白

11:05.930 --> 11:06.930
我们自己写的

11:06.930 --> 11:08.930
代码是什么

11:08.930 --> 11:09.930
以及能让我们

11:09.930 --> 11:11.930
后期的维护

11:11.930 --> 11:14.930
更加的方便一些

11:14.930 --> 11:15.930
好吧

11:15.930 --> 11:16.930
那也就是说

11:16.930 --> 11:17.930
我们还需要

11:17.930 --> 11:19.930
用到一个工具

11:19.930 --> 11:21.930
这个工具叫ES-Lint

11:22.930 --> 11:23.930
下一个工具

11:23.930 --> 11:25.930
ES-Lint

11:25.930 --> 11:28.300
可以吧

11:28.300 --> 11:29.300
那好

11:29.300 --> 11:30.300
那我们整个的

11:30.300 --> 11:31.300
这个项目呢

11:31.300 --> 11:32.300
其实我就用了

11:32.300 --> 11:34.300
这些技术

11:34.300 --> 11:35.300
就是用了这些技术

11:35.300 --> 11:36.300
左边

11:36.300 --> 11:38.300
是我们整体的

11:38.300 --> 11:39.300
前端

11:39.300 --> 11:40.300
所要用到的

11:40.300 --> 11:41.300
这个技术

11:41.300 --> 11:42.300
右边

11:42.300 --> 11:43.300
是我们要去

11:43.300 --> 11:44.300
创建这个

11:44.300 --> 11:45.300
系统的

11:45.300 --> 11:47.300
过程当中

11:47.300 --> 11:48.300
我们要使用的

11:48.300 --> 11:50.300
一些工具

11:50.300 --> 11:51.300
快速开发的

11:51.300 --> 11:52.300
一些工具

11:52.300 --> 11:53.300
那这就是

11:53.300 --> 11:54.300
我们整体的

11:54.300 --> 11:56.300
这样的一个

11:56.300 --> 11:57.300
弊端系统的

11:57.300 --> 11:58.300
一个技术架构

11:59.300 --> 12:00.300
那接下来

12:00.300 --> 12:01.300
我们现在已经

12:01.300 --> 12:02.300
明确了

12:02.300 --> 12:03.300
这样的一个技术架构了

12:03.300 --> 12:04.300
我们接下来

12:04.300 --> 12:05.300
要做到就是

12:05.300 --> 12:06.300
每一个界面的

12:06.300 --> 12:09.300
功能进行分析

