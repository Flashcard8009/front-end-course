WEBVTT

00:00.000 --> 00:03.000
好了 同学们 咱们今天上课啊 我还是永丁老师

00:03.000 --> 00:08.000
咱们上堂课干嘛呢 上堂课对关于动端的一些基本的信息

00:08.000 --> 00:12.000
基本的知识进行複习 对吧 像素啊 试口啊 这些相关的概念

00:12.000 --> 00:17.000
现在同学们一定有了一些了解 OK 对那些东西知道那就可以了

00:17.000 --> 00:21.000
咱们这堂课干嘛呢 做比上堂课更深层这些东西

00:21.000 --> 00:24.000
我们学会了那些基础 对吧 干嘛呢 让我们进吧 对吧 记不住

00:24.000 --> 00:29.000
那我们必须要拥有到实际当中 他 这些我们之前学的那些知识

00:29.000 --> 00:33.000
能为我们接下来的开发会解决什么样的问题 对吧

00:33.000 --> 00:35.000
以及说我们在开发中拥有到什么样的问题

00:35.000 --> 00:38.000
该用我们上堂课取得这些移动端知识去解析

00:38.000 --> 00:41.000
那咱们今天这堂课干嘛 给大家带给大家

00:41.000 --> 00:45.000
去看一些关于动端常见的一些问题

00:45.000 --> 00:49.000
那当然了 对于动端来说 大家不要说移动端的这个问题有哪些

00:49.000 --> 00:53.000
它非常之多 因为每年会出现新的手机

00:53.000 --> 00:57.000
新的手机 新的屏幕 屏幕的这个方式跟电脑屏幕不一样

00:57.000 --> 01:00.000
电脑屏幕无非就是一个举行的 它可能是曲面屏

01:00.000 --> 01:03.000
但是给大家感觉也是个举行的 很规整

01:03.000 --> 01:07.000
就像我们这个iPhoneX 这种流行评议出来 新的视频模式就出来了

01:07.000 --> 01:10.000
那当然了 咱们在这 今天不设计 今天不设计

01:10.000 --> 01:14.000
但是只要是新的 无论是屏幕的一个变化 一些参数的变化

01:14.000 --> 01:18.000
包括说它的一些布局的变化 都可能是移动端的

01:18.000 --> 01:22.000
我们需要解决的问题 那当然了 至于动端的一个学习

01:22.000 --> 01:25.000
它是一个逐渐积累的过程 它不可能说一口吃个胖子

01:25.000 --> 01:28.000
那咱们接下来啊 要讲的这三个问题

01:28.000 --> 01:33.000
是咱们这个接下来相关的 这三个问题

01:33.000 --> 01:38.000
首先 第一个 印象素问题 印象素问题咱们在之前那堂会就提过

01:38.000 --> 01:42.000
印象素我明明写的印象素 为什么美工的小姐姐或者小哥哥说

01:42.000 --> 01:45.000
你这个有点粗 对吧

01:45.000 --> 01:49.000
还有就是我们这个图片模糊的问题 这个可能同时没遇到

01:49.000 --> 01:53.000
一会儿给大家讲解 然后还有就是REM是配

01:53.000 --> 01:55.000
那这个呢 就涉及到我们相本身 对吧

01:55.000 --> 01:57.000
我们用REM的一个单位去搞

01:57.000 --> 02:00.000
ok 这是我们要解决的三个问题

02:00.000 --> 02:04.000
首先说第一个 印象素问题

02:04.000 --> 02:08.000
那我们先看看咱们关注这个印象素

02:08.000 --> 02:10.000
这个大问题 下面三个小问题什么的

02:10.000 --> 02:13.000
首先印象素我们写是印象素是没有问题的

02:13.000 --> 02:16.000
那是没有问题的 那是什么

02:16.000 --> 02:19.000
组织了在设备上展示的效果不一致

02:19.000 --> 02:25.000
并且还得不到UI 我们的社交伙伴的一个认同 对吧

02:25.000 --> 02:29.000
第二个问题 我和UI嘴里说的印象素是一个东西吗

02:29.000 --> 02:31.000
我明明写的印象素 它告诉我就不是

02:31.000 --> 02:33.000
因此我们还吵过架 对吧

02:33.000 --> 02:37.000
你瞪大你的那个傻眼好好看看 是不是印象素

02:37.000 --> 02:41.000
你写的是印象素 但是我在屏幕上显示的就不是印象素

02:41.000 --> 02:43.000
印象素很酷闹 对吧

02:43.000 --> 02:46.000
既然有了这个问题 我们该咋解决 对吧

02:46.000 --> 02:50.000
该咋解决 这顺便说一嘴UI是啥呀

02:50.000 --> 02:53.000
叫用户界面 user interface

02:53.000 --> 02:56.000
它本来就是进行我们用户界面的一个设计

02:56.000 --> 02:59.000
OK 做一些了解 那我们来看

02:59.000 --> 03:02.000
那如果想去解决我们印象素问题

03:02.000 --> 03:05.000
必须要知道三个前日之事

03:05.000 --> 03:06.000
咱们说过一个物理像素

03:06.000 --> 03:10.000
物理像素是我们当前屏幕的若干个小冬炮

03:10.000 --> 03:13.000
一个 若干个 构成这样的一个大屏幕

03:13.000 --> 03:16.000
那CNS像素也叫设备物理像素 对吧

03:16.000 --> 03:19.000
然后这个也就被称之为逻辑像素

03:19.000 --> 03:21.000
正常情况下

03:21.000 --> 03:24.000
就CNS像素就等于设备物理像素

03:24.000 --> 03:26.000
那咱们上当隔也做了 对吧

03:26.000 --> 03:28.000
也做过 就设备独立像素

03:28.000 --> 03:29.000
然后这个DPR干嘛呢

03:29.000 --> 03:31.000
也就是我们的物理像素

03:31.000 --> 03:34.000
跟我们设备独立像素的一个比值 对吧

03:34.000 --> 03:36.000
一个比值 如果是二的话

03:36.000 --> 03:37.000
意味着 什么呢

03:37.000 --> 03:40.000
就是二乘二个物理像素代表的是

03:40.000 --> 03:42.000
这个一个CNS像素

03:42.000 --> 03:44.000
一个设备独立像素

03:44.000 --> 03:45.000
OK啊

03:45.000 --> 03:47.000
这个是我们的一些前日之事

03:47.000 --> 03:48.000
简单回顾一下

03:48.000 --> 03:50.000
那接下来看一下这个异像素问题

03:50.000 --> 03:51.000
怎么产生的

03:51.000 --> 03:52.000
那首先正常的屏幕下

03:52.000 --> 03:53.000
正常的屏幕下

03:53.000 --> 03:55.000
就是DPR21的屏幕下

03:55.000 --> 03:57.000
那我一个CNS像素

03:57.000 --> 03:58.000
就是一物理像素

03:58.000 --> 04:00.000
它占用的空间就怎么办

04:00.000 --> 04:02.000
对吧 它占用的空间就是怎么办

04:02.000 --> 04:03.000
好

04:03.000 --> 04:07.000
但是我当我们的屏幕升级之后

04:07.000 --> 04:09.000
当我们屏幕升级之后

04:09.000 --> 04:11.000
也就是DPR212的时候

04:11.000 --> 04:15.000
那发现其实它占用的空间其实变大了

04:15.000 --> 04:18.000
对吧 原来占用的是一物理像素

04:18.000 --> 04:20.000
现在占的是两个物理像素

04:20.000 --> 04:23.000
同样是高度是一像素的情况下

04:23.000 --> 04:25.000
它占用的是两个物理像素

04:25.000 --> 04:26.000
对吧

04:26.000 --> 04:27.000
那这个的话

04:27.000 --> 04:29.000
就是我们产生的一个问题

04:29.000 --> 04:30.000
产生的问题

04:30.000 --> 04:32.000
那还有就是我们在这个UI

04:32.000 --> 04:34.000
这个小哥哥小姐在设计的时候

04:34.000 --> 04:36.000
他们用的单位可不跟我们一样用的PX

04:36.000 --> 04:38.000
他们用的是PT

04:38.000 --> 04:42.000
相当用的是点的这样的一个概念

04:42.000 --> 04:43.000
单位是爆

04:43.000 --> 04:45.000
然后在这儿

04:45.000 --> 04:47.000
就是我们这儿要知道

04:47.000 --> 04:49.000
你看正常我们写高度一像素的时候

04:49.000 --> 04:50.000
干嘛呢

04:50.000 --> 04:51.000
在一倍屏的情况下

04:51.000 --> 04:53.000
它真的就是一个小动靠

04:53.000 --> 04:55.000
对吧 一个这个设备小

04:55.000 --> 04:56.000
一个物理像素

04:56.000 --> 04:57.000
但是我们在高性屏

04:57.000 --> 04:58.000
在这个二倍屏

04:58.000 --> 04:59.000
在这个受网膜屏的情况下

04:59.000 --> 05:01.000
我们写的一像素

05:01.000 --> 05:03.000
它对应的是两个物理像素

05:03.000 --> 05:04.000
两个物理像素

05:04.000 --> 05:05.000
那所以说这个时候

05:05.000 --> 05:06.000
就给大家的

05:06.000 --> 05:07.000
就不是给大家

05:07.000 --> 05:08.000
大家就是

05:08.000 --> 05:10.000
正常人的眼去观察它的话

05:10.000 --> 05:11.000
感觉不出来

05:11.000 --> 05:13.000
这个明显的一个变化

05:13.000 --> 05:14.000
那老师

05:14.000 --> 05:15.000
那为什么要纠结这个事呢

05:15.000 --> 05:16.000
其实这个呢

05:16.000 --> 05:17.000
也是为了

05:17.000 --> 05:18.000
更好对方体现

05:18.000 --> 05:19.000
以及说体现出

05:19.000 --> 05:20.000
我们这个UI的一个专业性

05:20.000 --> 05:21.000
它提出来的一个问题

05:21.000 --> 05:22.000
正常来说

05:22.000 --> 05:24.000
我们是不会去纠结这个事的

05:24.000 --> 05:25.000
差一点不差一点的

05:25.000 --> 05:26.000
这是UI提出来的

05:26.000 --> 05:27.000
说你这个不行

05:27.000 --> 05:28.000
有点粗

05:28.000 --> 05:29.000
你得变回去

05:29.000 --> 05:30.000
所以说这本质上

05:30.000 --> 05:31.000
就是

05:31.000 --> 05:32.000
原来占用一个物理像素

05:32.000 --> 05:33.000
现在占俩了

05:33.000 --> 05:34.000
不行

05:34.000 --> 05:35.000
你必须得过变成

05:35.000 --> 05:36.000
一物理像素

05:36.000 --> 05:37.000
本质上就是这样的一个问题

05:37.000 --> 05:38.000
那三倍屏一样

05:38.000 --> 05:39.000
那它如果是一像素

05:39.000 --> 05:40.000
就相当于干嘛

05:40.000 --> 05:41.000
数着占三个呗

05:41.000 --> 05:42.000
对吧

05:42.000 --> 05:43.000
数着占三个

05:43.000 --> 05:44.000
那这样的话

05:44.000 --> 05:45.000
意味着干嘛

05:45.000 --> 05:47.000
是不是我们要解决的

05:47.000 --> 05:48.000
或者说

05:48.000 --> 05:49.000
我们要

05:50.000 --> 05:52.000
把原来三个变成一个

05:52.000 --> 05:53.000
要解决这样的问题

05:53.000 --> 05:54.000
对吧

05:54.000 --> 05:55.000
不管怎样

05:55.000 --> 05:56.000
最终展示的就是

05:56.000 --> 05:57.000
一物理像素

05:57.000 --> 05:59.000
可以保证最真实的

05:59.000 --> 06:00.000
这样的一个效果

06:00.000 --> 06:01.000
对吧

06:01.000 --> 06:02.000
OK

06:02.000 --> 06:03.000
只是美工小姐姐说的

06:03.000 --> 06:04.000
那行

06:04.000 --> 06:05.000
那这个是

06:05.000 --> 06:06.000
一像素的一个问题产生

06:06.000 --> 06:07.000
究其原因就是

06:07.000 --> 06:08.000
我们的

06:08.000 --> 06:09.000
一像素在设备上干嘛

06:09.000 --> 06:10.000
展示两块

06:10.000 --> 06:11.000
对吧

06:11.000 --> 06:12.000
或者是三块

06:12.000 --> 06:13.000
再光线屏下

06:13.000 --> 06:14.000
两位屏

06:14.000 --> 06:15.000
或者三位屏的情况下

06:15.000 --> 06:16.000
那最终的物点是干嘛

06:16.000 --> 06:18.000
就把它变成

06:18.000 --> 06:19.000
一物理像素就好了

06:20.000 --> 06:21.000
就把它变成

06:21.000 --> 06:22.000
一物理像素就好了

06:22.000 --> 06:23.000
这是我们要解决的问题

06:23.000 --> 06:25.000
这就是我们要解决的问题

06:25.000 --> 06:26.000
OK

06:26.000 --> 06:27.000
我们直接往下来看

06:27.000 --> 06:28.000
那干嘛呢

06:28.000 --> 06:30.000
一像素问题的一个解决方案

06:30.000 --> 06:32.000
首先在高音频下

06:32.000 --> 06:33.000
对吧

06:33.000 --> 06:34.000
那我们直接假如说二位屏

06:34.000 --> 06:35.000
我直接来个媒体上学

06:35.000 --> 06:37.000
干嘛直接写0.5像素咋样

06:37.000 --> 06:39.000
这个可以很负责的

06:39.000 --> 06:40.000
告诉大家不咋样

06:40.000 --> 06:41.000
一方面是

06:41.000 --> 06:42.000
本来移动端

06:42.000 --> 06:45.000
对于像素的一个处理

06:45.000 --> 06:46.000
你就像写0.5像素

06:46.000 --> 06:47.000
在部分手机里面

06:47.000 --> 06:48.000
会直接当成

06:48.000 --> 06:49.000
零像素处理

06:49.000 --> 06:50.000
在部分手机里面

06:50.000 --> 06:51.000
直接会当一像素处理

06:51.000 --> 06:52.000
包括

06:52.000 --> 06:53.000
今天看咱们

06:53.000 --> 06:55.000
这个录屏的同学

06:55.000 --> 06:56.000
来看咱们今天

06:56.000 --> 06:58.000
这个代码的手

06:58.000 --> 07:00.000
来我们新建一个

07:00.000 --> 07:01.000
干嘛呢

07:01.000 --> 07:02.000
Tamp

07:02.000 --> 07:07.620
点一天没有

07:07.620 --> 07:09.620
OK

07:09.620 --> 07:10.620
这也是浏览器

07:10.620 --> 07:11.620
更新出的一个问题

07:11.620 --> 07:13.620
也是最近出的

07:13.620 --> 07:15.620
来给大家演示一下

07:15.620 --> 07:21.660
来写个DIV

07:21.660 --> 07:26.030
上面加个样式

07:26.030 --> 07:28.030
DIV

07:28.030 --> 07:29.030
干嘛呢

07:29.030 --> 07:31.030
我们给它一个

07:31.030 --> 07:32.030
高点

07:32.030 --> 07:34.030
一像素

07:34.030 --> 07:35.030
实现

07:35.030 --> 07:36.030
然后这个

07:36.030 --> 07:38.030
红色f60

07:38.030 --> 07:39.030
是吧

07:39.030 --> 07:40.030
然后高度

07:40.030 --> 07:43.030
100像素

07:43.030 --> 07:45.030
然后宽度

07:45.030 --> 07:48.030
100像素

07:48.030 --> 07:49.030
然后这样

07:49.030 --> 07:52.660
这我给的写成0.5像素

07:52.660 --> 07:54.660
OK保存一下

07:54.660 --> 07:56.660
我们再浏览器中打开

07:56.660 --> 07:58.660
来看是这个样子

07:58.660 --> 07:59.660
对吧

07:59.660 --> 08:00.660
看是这个样子

08:00.660 --> 08:01.660
我们检查一下

08:02.660 --> 08:03.660
稍息

08:03.660 --> 08:04.660
没问题

08:04.660 --> 08:06.660
然后看一下这个DIV

08:06.660 --> 08:07.660
来

08:07.660 --> 08:08.660
大家看下面这部分

08:08.660 --> 08:09.660
这部分看好了

08:09.660 --> 08:10.660
这是我们写的

08:10.660 --> 08:11.660
是0.5像素吧

08:11.660 --> 08:12.660
对吧

08:12.660 --> 08:13.660
但这浏览器

08:13.660 --> 08:15.660
默认识别的是一像素

08:15.660 --> 08:16.660
默认识别的是一像素

08:16.660 --> 08:18.660
这是谷歌浏览器的一个问题

08:18.660 --> 08:19.660
可能大家回去

08:19.660 --> 08:21.660
做小小小的案例的时候

08:21.660 --> 08:22.660
切记

08:22.660 --> 08:23.660
有时候

08:23.660 --> 08:24.660
在未速放的情况下

08:24.660 --> 08:25.660
这0.5像素

08:25.660 --> 08:27.660
是不好用的

08:27.660 --> 08:28.660
是不好用的

08:28.660 --> 08:29.660
如果你放大的话

08:29.660 --> 08:30.660
你可以试试

08:30.660 --> 08:31.660
就不展示了

08:32.660 --> 08:33.660
所以说

08:33.660 --> 08:34.660
这在谷歌浏览器

08:34.660 --> 08:35.660
存在这个问题

08:35.660 --> 08:36.660
更何况

08:36.660 --> 08:37.660
我们在移动端浏览器

08:37.660 --> 08:38.660
它不是不兼容

08:38.660 --> 08:39.660
因为本来屏幕就小

08:39.660 --> 08:40.660
0.5的话

08:40.660 --> 08:42.660
过于细致

08:42.660 --> 08:43.660
在渲染的时候

08:43.660 --> 08:44.660
不同的浏览器

08:44.660 --> 08:46.660
渲染结果不一样

08:46.660 --> 08:47.660
不到好把控

08:47.660 --> 08:48.660
所以说

08:48.660 --> 08:49.660
对于0.5这样的一个像素

08:49.660 --> 08:50.660
就不要用了

08:50.660 --> 08:51.660
而更何况

08:51.660 --> 08:52.660
你想想

08:52.660 --> 08:53.660
当我们DP2v3

08:53.660 --> 08:54.660
这是干嘛

08:54.660 --> 08:55.660
是不是直接得写0.33

08:57.660 --> 08:58.660
对吧

08:58.660 --> 08:59.660
你会发现我这儿

08:59.660 --> 09:00.660
这儿啥没变

09:00.660 --> 09:01.660
啥没变

09:01.660 --> 09:02.660
那整体来看

09:02.660 --> 09:03.660
你字变了

09:03.660 --> 09:04.660
但是不影响

09:04.660 --> 09:06.660
对于整体的一个展示效果

09:06.660 --> 09:07.660
是没影响的

09:07.660 --> 09:08.660
所以说

09:08.660 --> 09:09.660
这儿如果这么搞

09:09.660 --> 09:11.660
按照我们PTT上这么搞

09:11.660 --> 09:12.660
直接0.5或0.33

09:12.660 --> 09:13.660
那指定不行

09:13.660 --> 09:14.660
指定不行

09:14.660 --> 09:15.660
那有没有更好

09:15.660 --> 09:16.660
或者说

09:16.660 --> 09:17.660
容易写的解决方案

09:17.660 --> 09:18.660
有

09:18.660 --> 09:19.660
也就是下面这块

09:19.660 --> 09:20.660
就是位元素

09:20.660 --> 09:21.660
加我们的缩放

09:21.660 --> 09:22.660
那对于缩放来说

09:22.660 --> 09:23.660
那你说

09:23.660 --> 09:24.660
原来我一米刚好

09:24.660 --> 09:26.660
我通过缩放

09:26.660 --> 09:28.660
给你编成0.5米

09:28.660 --> 09:29.660
这是允许的

09:29.660 --> 09:30.660
对吧

09:30.660 --> 09:31.660
这是允许的

09:31.660 --> 09:32.660
这是允许的

09:32.660 --> 09:33.660
而且它也支持

09:33.660 --> 09:35.660
那所以说目前来说

09:35.660 --> 09:36.660
绝大多数的

09:36.660 --> 09:37.660
这个我们看到的

09:37.660 --> 09:38.660
这个

09:39.660 --> 09:40.660
来

09:40.660 --> 09:41.660
绝大多数情况下

09:41.660 --> 09:42.660
我们看到的这个

09:42.660 --> 09:43.660
框架

09:43.660 --> 09:44.660
或者说这个

09:44.660 --> 09:46.660
GUV或rex的

09:46.660 --> 09:47.660
这个

09:47.660 --> 09:48.660
缩装的组件库里面

09:48.660 --> 09:50.660
基本都采用的这种

09:50.660 --> 09:51.660
元素加skill

09:51.660 --> 09:52.660
缩放的这种方式

09:52.660 --> 09:53.660
来实现的

09:53.660 --> 09:54.660
基本上

09:54.660 --> 09:55.660
很好理解

09:55.660 --> 09:56.660
很好理解

09:56.660 --> 09:57.660
我们通过

09:57.660 --> 09:58.660
这个元素进行定位

09:58.660 --> 09:59.660
然后

09:59.660 --> 10:00.660
正常的

10:00.660 --> 10:01.660
正常的这个

10:01.660 --> 10:02.660
这个包袋

10:02.660 --> 10:03.660
就是一箱素

10:03.660 --> 10:04.660
只不过我们对它进行缩放

10:04.660 --> 10:05.660
来以达到

10:05.660 --> 10:07.660
这种0.5箱素的这种效果

10:07.660 --> 10:08.660
而不是直接写

10:08.660 --> 10:09.660
它不适必

10:09.660 --> 10:10.660
这是一个

10:10.660 --> 10:12.660
非常常用的方式

10:12.660 --> 10:13.660
那当然

10:13.660 --> 10:14.660
这个关于

10:14.660 --> 10:15.660
一箱素解的方式非常多

10:15.660 --> 10:16.660
之后咱们最后说的

10:16.660 --> 10:17.660
这个REM适配

10:17.660 --> 10:19.660
也能解决这样的问题

10:19.660 --> 10:20.660
那个咋解决

10:20.660 --> 10:21.660
咱们那时候再说

10:21.660 --> 10:22.660
那时候再说

10:22.660 --> 10:23.660
那其实也是

10:23.660 --> 10:24.660
借用了一个缩放

10:24.660 --> 10:25.660
这不是

10:25.660 --> 10:26.660
元素缩放

10:26.660 --> 10:28.660
而是说整个页面缩放

10:28.660 --> 10:29.660
但是这个是

10:29.660 --> 10:31.660
最简单的一种方式

10:31.660 --> 10:32.660
也是目前用的

10:32.660 --> 10:33.660
最多的一种方式

10:33.660 --> 10:34.660
只不过呢

10:34.660 --> 10:36.660
我们一般都配合的是什么

10:36.660 --> 10:37.660
配合着我们的

10:37.660 --> 10:39.660
这个CSA处理器

10:39.660 --> 10:40.660
对吧

10:40.660 --> 10:41.660
这个LAS

10:41.660 --> 10:43.660
或者SARS去写

10:43.660 --> 10:44.660
基本上封装业变量

10:44.660 --> 10:45.660
包括我们的BODER

10:45.660 --> 10:46.660
TOP

10:46.660 --> 10:47.660
BOTTOM LASRAT

10:47.660 --> 10:48.660
分别去实现

10:48.660 --> 10:49.660
分别去实现

10:49.660 --> 10:50.660
这是我们的一箱素

10:50.660 --> 10:51.660
它在让那个

10:51.660 --> 10:52.660
问题产生的原因

10:52.660 --> 10:54.660
以及说解决方案

10:54.660 --> 10:55.660
这

10:55.660 --> 10:56.660
你们应该能明白

10:56.660 --> 10:58.660
然后接下来看

10:58.660 --> 10:59.660
看第二个

10:59.660 --> 11:00.660
什么呢

11:00.660 --> 11:01.660
图片模糊问题

11:01.660 --> 11:02.660
对吧

11:02.660 --> 11:03.660
那我们之前说过

11:03.660 --> 11:04.660
图

11:04.660 --> 11:05.660
正常的手机的

11:05.660 --> 11:06.660
一个分辨率越高

11:06.660 --> 11:08.660
它代表什么含义

11:08.660 --> 11:09.660
对吧

11:09.660 --> 11:10.660
它说有个PPI

11:10.660 --> 11:11.660
对吧

11:11.660 --> 11:12.660
那PPI是啥

11:12.660 --> 11:13.660
这个叫

11:13.660 --> 11:14.660
屏幕的一个

11:14.660 --> 11:15.660
像素密度

11:15.660 --> 11:16.660
是吧

11:16.660 --> 11:17.660
就像单位面积里面

11:17.660 --> 11:18.660
这个

11:18.660 --> 11:19.660
像素点了一个多少

11:19.660 --> 11:20.660
它跟图片

11:20.660 --> 11:21.660
清不清晰无关

11:21.660 --> 11:22.660
只是说

11:22.660 --> 11:23.660
单位面积

11:23.660 --> 11:24.660
我的像素点多

11:24.660 --> 11:25.660
对吧

11:25.660 --> 11:26.660
那

11:26.660 --> 11:27.660
那OK

11:27.660 --> 11:28.660
那我们之前知道

11:28.660 --> 11:29.660
就是在非示网模糊

11:29.660 --> 11:30.660
情况下

11:30.660 --> 11:31.660
分辨率越高

11:31.660 --> 11:32.660
可能说原来

11:32.660 --> 11:34.660
这个500×500的图片

11:34.660 --> 11:35.660
在不同的手机里面

11:35.660 --> 11:36.660
可能说

11:36.660 --> 11:37.660
一个展示的比较大

11:37.660 --> 11:38.660
一个展示的比较小

11:38.660 --> 11:39.660
展示比较小

11:39.660 --> 11:40.660
是因为分辨率高的

11:40.660 --> 11:41.660
情况下展示的

11:41.660 --> 11:42.660
对吧

11:42.660 --> 11:43.660
但是在

11:43.660 --> 11:44.660
这个我们的高清屏下

11:44.660 --> 11:45.660
它毕竟

11:45.660 --> 11:46.660
一个像素

11:46.660 --> 11:47.660
它就要

11:47.660 --> 11:48.660
横着一个像素

11:48.660 --> 11:49.660
就要占俩

11:49.660 --> 11:50.660
数着一个像素

11:50.660 --> 11:51.660
就要占俩

11:51.660 --> 11:52.660
那可能说

11:52.660 --> 11:53.660
一个像素

11:53.660 --> 11:54.660
用来看

11:54.660 --> 11:55.660
原因是啥

11:55.660 --> 11:56.660
那这个呢

11:56.660 --> 11:57.660
就是

11:57.660 --> 11:58.660
这是正常情况下的

11:58.660 --> 11:59.660
一张图片的

11:59.660 --> 12:00.660
四个颜色

12:00.660 --> 12:01.660
四个颜色

12:01.660 --> 12:02.660
干嘛呢

12:02.660 --> 12:03.660
当一个

12:03.660 --> 12:04.660
普通图片

12:04.660 --> 12:06.660
放在我们的高清屏下

12:06.660 --> 12:07.660
放在我们的高清屏下

12:07.660 --> 12:08.660
干嘛呢

12:08.660 --> 12:09.660
那正常一个像素点

12:09.660 --> 12:10.660
干嘛需要占用

12:10.660 --> 12:11.660
四个物理像素

12:11.660 --> 12:12.660
对吧

12:12.660 --> 12:13.660
一个CSI像素

12:13.660 --> 12:14.660
占用四个物理像素

12:14.660 --> 12:15.660
这是二维平

12:15.660 --> 12:16.660
这二维平

12:16.660 --> 12:17.660
然后

12:17.660 --> 12:18.660
这种情况下

12:18.660 --> 12:19.660
那老师

12:19.660 --> 12:20.660
那些复制版

12:20.660 --> 12:21.660
都把这个颜色

12:21.660 --> 12:22.660
复制一份

12:22.660 --> 12:23.660
因为这个

12:23.660 --> 12:25.660
内部的实现机制

12:25.660 --> 12:26.660
和原理不是这样的

12:26.660 --> 12:27.660
它们是旧进取色

12:27.660 --> 12:28.660
所以说

12:28.660 --> 12:30.660
你看到的是一个这样的效果

12:30.660 --> 12:31.660
那意味着

12:31.660 --> 12:32.660
那这个时候呢

12:32.660 --> 12:33.660
因为颜色一变的话

12:33.660 --> 12:34.660
它整体的这种

12:34.660 --> 12:35.660
表示的含义就变了

12:35.660 --> 12:36.660
所以说

12:36.660 --> 12:38.660
它看起来并没有那么清晰

12:38.660 --> 12:39.660
那反过来看

12:39.660 --> 12:40.660
那如果我们的是

12:40.660 --> 12:41.660
这种高清的一个图片

12:41.660 --> 12:43.660
放在我们的这个

12:43.660 --> 12:44.660
这二

12:44.660 --> 12:45.660
这种

12:45.660 --> 12:46.660
乘二的这种图片

12:46.660 --> 12:47.660
如果放在普通屏幕下

12:47.660 --> 12:48.660
干嘛呢

12:48.660 --> 12:49.660
这四个点

12:49.660 --> 12:51.660
用一个点去展示

12:51.660 --> 12:52.660
它指定也是

12:52.660 --> 12:53.660
旧进取取色

12:53.660 --> 12:54.660
无论取了谁

12:54.660 --> 12:56.660
它也把这块的信息丢了

12:56.660 --> 12:57.660
所以说

12:57.660 --> 12:59.660
这样的话也会导致

12:59.660 --> 13:01.660
这个图像出现问题

13:01.660 --> 13:02.660
也会导致

13:02.660 --> 13:04.660
这个图像出现问题

13:04.660 --> 13:05.660
那么

13:05.660 --> 13:06.660
无论是

13:06.660 --> 13:07.660
这个也好

13:07.660 --> 13:08.660
还是这个也好

13:08.660 --> 13:09.660
那本质上

13:09.660 --> 13:10.660
我们都希望是

13:10.660 --> 13:11.660
普通屏幕

13:11.660 --> 13:12.660
我们就用

13:12.660 --> 13:15.660
普通的图片就好了

13:15.660 --> 13:16.660
高清屏

13:16.660 --> 13:17.660
无论是dp22

13:17.660 --> 13:18.660
那我就

13:18.660 --> 13:19.660
二倍的图片去表示

13:19.660 --> 13:20.660
dp22

13:20.660 --> 13:21.660
我就用

13:21.660 --> 13:22.660
三倍图片去表示

13:22.660 --> 13:23.660
这样的话就不是

13:23.660 --> 13:24.660
业道

13:24.660 --> 13:25.660
图片的一个放大缩小

13:25.660 --> 13:26.660
也就是说

13:26.660 --> 13:27.660
我们的这个

13:27.660 --> 13:29.660
图片的每一个像素

13:29.660 --> 13:31.660
可以真正对应我们

13:31.660 --> 13:32.660
每一个物理像素

13:32.660 --> 13:34.660
也保证图片最清楚的展示

13:34.660 --> 13:35.660
对吧

13:35.660 --> 13:36.660
要达到这样的效果

13:36.660 --> 13:37.660
达到这样的效果

13:37.660 --> 13:38.660
该怎么办呢

13:38.660 --> 13:39.660
该怎么办呢

13:39.660 --> 13:40.660
在这个

13:41.660 --> 13:42.660
H5当中

13:42.660 --> 13:43.660
Ammit

13:43.660 --> 13:44.660
这个标签

13:44.660 --> 13:45.660
出了一个SRC3的属性

13:45.660 --> 13:46.660
出了一个

13:46.660 --> 13:47.660
新出了一个属性

13:47.660 --> 13:48.660
这个一会

13:48.660 --> 13:49.660
给大家展示去看

13:49.660 --> 13:50.660
那正常来说干嘛呢

13:50.660 --> 13:51.660
我们是

13:51.660 --> 13:52.660
通过JS

13:52.660 --> 13:53.660
去动态的

13:53.660 --> 13:54.660
根据DPR

13:54.660 --> 13:55.660
去修改

13:55.660 --> 13:56.660
图片的一个资源

13:56.660 --> 13:57.660
那这样的话

13:57.660 --> 13:58.660
我们可以通过

13:58.660 --> 13:59.660
JS

13:59.660 --> 14:00.660
获取当前

14:00.660 --> 14:01.660
设备的一个DPR

14:01.660 --> 14:02.660
然后

14:02.660 --> 14:03.660
去替换我们的URI

14:03.660 --> 14:04.660
而无非

14:04.660 --> 14:05.660
之前在我们这个

14:05.660 --> 14:06.660
设置图

14:06.660 --> 14:07.660
图片地址的时候

14:07.660 --> 14:08.660
把后面这个

14:08.660 --> 14:09.660
什么2X

14:09.660 --> 14:10.660
3X替换一下就可以

14:10.660 --> 14:11.660
但是现在

14:11.660 --> 14:12.660
更多的

14:12.660 --> 14:13.660
用这个SRC3的属性

14:13.660 --> 14:14.660
虽说它的介绍性

14:14.660 --> 14:15.660
不太高

14:15.660 --> 14:16.660
但是也不太低

14:16.660 --> 14:17.660
目前

14:17.660 --> 14:18.660
目前

14:18.660 --> 14:19.660
这个手机

14:19.660 --> 14:20.660
都兼容

14:20.660 --> 14:21.660
都兼容

14:21.660 --> 14:22.660
那给大家

14:22.660 --> 14:23.660
我这写了个小例子

14:23.660 --> 14:24.660
给大家展示一下

14:25.660 --> 14:26.660
它怎么用呢

14:28.660 --> 14:29.660
稍等

14:37.160 --> 14:38.160
来

14:38.160 --> 14:39.160
看着好

14:39.160 --> 14:40.160
这是我们正常的

14:40.160 --> 14:41.160
一张图片

14:41.160 --> 14:42.160
AMH

14:42.160 --> 14:43.160
正常的话

14:43.160 --> 14:44.160
它有一个

14:44.160 --> 14:45.160
对应的是1X2PNG

14:45.160 --> 14:46.160
这样的图片

14:46.160 --> 14:47.160
然后在这我

14:47.160 --> 14:48.160
这几个图片

14:48.160 --> 14:50.160
其实你要仔细看的话

14:50.160 --> 14:51.160
第一个是

14:51.160 --> 14:52.160
100x100的

14:52.160 --> 14:53.160
第二个是

14:53.160 --> 14:54.160
300x300的

14:54.160 --> 14:55.160
老师你这撒颜色

14:55.160 --> 14:56.160
咋不一样呢

14:56.160 --> 14:57.160
不一样的目的是

14:57.160 --> 14:58.160
为了让同学们

14:58.160 --> 14:59.160
更好的一会去验证

14:59.160 --> 15:00.160
就是当我们的

15:00.160 --> 15:01.160
DPR变的时候

15:01.160 --> 15:03.160
它引的图片是会变的

15:03.160 --> 15:04.160
想说明这个问题

15:04.160 --> 15:05.160
正常来说

15:05.160 --> 15:06.160
都是一张图片

15:06.160 --> 15:07.160
我们应用的时候

15:07.160 --> 15:08.160
都是一张图片

15:08.160 --> 15:09.160
包括如果有同学

15:09.160 --> 15:10.160
发过一些

15:10.160 --> 15:11.160
勾网站的数据的时候

15:11.160 --> 15:12.160
它其实

15:12.160 --> 15:13.160
你包括之前

15:13.160 --> 15:14.160
大家去写

15:14.160 --> 15:15.160
豆瓣的时候

15:15.160 --> 15:16.160
你会发现

15:16.160 --> 15:17.160
里面电影海豹

15:17.160 --> 15:18.160
包括作者的海豹

15:18.160 --> 15:20.160
都会分这种

15:20.160 --> 15:21.160
小的

15:21.160 --> 15:22.160
中的大的

15:22.160 --> 15:24.160
多情的跟普通的图片

15:24.160 --> 15:25.160
为了方便

15:25.160 --> 15:26.160
我们更好的

15:26.160 --> 15:27.160
去引入和展示

15:27.160 --> 15:29.160
在用的时候

15:29.160 --> 15:30.160
SRC

15:30.160 --> 15:31.160
等于

15:31.160 --> 15:32.160
默认的话

15:32.160 --> 15:34.160
就是引最普通的那个

15:34.160 --> 15:35.160
SRC site

15:35.160 --> 15:36.160
干嘛呢

15:36.160 --> 15:37.160
前面是

15:37.160 --> 15:38.160
我们对应的

15:38.160 --> 15:39.160
资源地址

15:39.160 --> 15:40.160
然后第二个

15:40.160 --> 15:41.160
2X代表的时候

15:41.160 --> 15:42.160
DPR2v2

15:42.160 --> 15:43.160
DPR3

15:43.160 --> 15:44.160
用的更多是这种情况

15:44.160 --> 15:45.160
老实说

15:45.160 --> 15:46.160
如果出现

15:46.160 --> 15:47.160
DPR2v4或者V5

15:47.160 --> 15:48.160
在这种情况下

15:48.160 --> 15:49.160
它引的是哪个图片呢

15:49.160 --> 15:51.160
当你DPR越高的时候

15:51.160 --> 15:52.160
它只引你

15:52.160 --> 15:54.160
设置最高的这个图片

15:54.160 --> 15:55.160
DPR4的话

15:55.160 --> 15:56.160
也引的是

15:56.160 --> 15:57.160
这张图

15:57.160 --> 15:58.160
ok 这是它

15:59.160 --> 16:00.160
然后每块

16:00.160 --> 16:01.160
用这个

16:01.160 --> 16:02.160
多少分开

16:02.160 --> 16:03.160
当然了

16:03.160 --> 16:04.160
它还有一个

16:04.160 --> 16:05.160
size

16:05.160 --> 16:06.160
这样的一个属性

16:06.160 --> 16:07.160
这咱就不说了

16:07.160 --> 16:08.160
感性同学

16:08.160 --> 16:09.160
可以回去查一查

16:09.160 --> 16:10.160
这种方式

16:10.160 --> 16:11.160
就完全够应付

16:11.160 --> 16:12.160
我们图片

16:12.160 --> 16:13.160
实践的这样一个问题

16:13.160 --> 16:14.160
完全适配

16:14.160 --> 16:16.160
在不同DPR下的一个

16:16.160 --> 16:17.160
图片展示问题

16:17.160 --> 16:18.160
ok 我把这个

16:18.160 --> 16:19.160
服务器起开

16:20.160 --> 16:30.920
ok 默认是

16:30.920 --> 16:31.920
这个红色100x100

16:31.920 --> 16:32.920
对吧

16:32.920 --> 16:33.920
来啊

16:33.920 --> 16:34.920
我们给它

16:34.920 --> 16:35.920
来 搞一下

16:35.920 --> 16:38.230
来

16:38.230 --> 16:39.230
我们换成一个

16:39.230 --> 16:40.230
DPR2v4的对吧

16:40.230 --> 16:41.230
刷新一下

16:41.230 --> 16:43.230
发现电缆了对吧

16:43.230 --> 16:45.230
我们再把这个

16:46.230 --> 16:47.230
换成一个DPR2v3

16:47.230 --> 16:48.230
那我再刷新一下

16:48.230 --> 16:49.230
变紫了吧

16:49.230 --> 16:50.230
对吧

16:50.230 --> 16:51.230
但是你看着大小

16:51.230 --> 16:52.230
哎 就是这么大

16:52.230 --> 16:53.230
嗯 就是这么大

16:53.230 --> 16:55.230
那这个用的一个功能呢

16:55.230 --> 16:56.230
这样的功能

16:56.230 --> 16:57.230
完全是归属一个

16:57.230 --> 16:58.230
这样的一个标签

16:58.230 --> 16:59.230
它来解决

16:59.230 --> 17:00.230
不同的

17:00.230 --> 17:01.230
DPR2下面的

17:01.230 --> 17:02.230
一个图片的引用问题

17:02.230 --> 17:03.230
啊

17:03.230 --> 17:04.230
ok 这就是它

17:04.230 --> 17:05.230
那其实对于背景图片呢

17:05.230 --> 17:06.230
也一样

17:06.230 --> 17:07.230
有一个

17:07.230 --> 17:08.230
这个需要加个前置眼

17:08.230 --> 17:09.230
webkit image side

17:09.230 --> 17:10.230
这个属性

17:10.230 --> 17:11.230
但用起来

17:11.230 --> 17:12.230
跟这个

17:12.230 --> 17:13.230
长得非常之像

17:13.230 --> 17:14.230
如果URL里面

17:14.230 --> 17:15.230
传的是图片地址

17:15.230 --> 17:16.230
后面呢

17:16.230 --> 17:17.230
1X2X3X2

17:17.230 --> 17:18.230
代表的是

17:18.230 --> 17:19.230
我们的DPR2的一个值

17:19.230 --> 17:20.230
那这两呢

17:20.230 --> 17:21.230
是用的方式

17:21.230 --> 17:23.230
基本都是一样的

17:23.230 --> 17:25.230
都是根据我们DPR2进行

17:25.230 --> 17:26.230
图片的适配

17:26.230 --> 17:28.230
可以解决我们图片

17:28.230 --> 17:30.230
引入模糊的这样的一个问题

17:30.230 --> 17:31.230
一保证

17:31.230 --> 17:32.230
一个物理相处

17:32.230 --> 17:34.230
对应了一个图片的一个相处

17:34.230 --> 17:37.230
ok 那这个是我们的

17:37.230 --> 17:38.230
图片模糊的一个解决方案

17:38.230 --> 17:40.230
包括上面的一个原理

17:40.230 --> 17:41.230
然后接下来

17:41.230 --> 17:42.230
接下来是我们的最后一个点

17:42.230 --> 17:44.230
叫2AM适配

17:44.230 --> 17:45.230
因为之后呢

17:45.230 --> 17:46.230
我们要用到这个

17:46.230 --> 17:47.230
flashball.js

17:47.230 --> 17:48.230
通过它

17:48.230 --> 17:50.230
进行2AM的一个转换

17:50.230 --> 17:51.230
那它的一个原理是啥呢

17:51.230 --> 17:52.230
一个原理是啥呢

17:52.230 --> 17:53.230
你一会带大家

17:53.230 --> 17:54.230
简单看完吧

17:54.230 --> 17:55.230
然后这样

17:55.230 --> 17:57.230
因为咱们昨天

17:57.230 --> 17:59.230
咱们昨天写了一个啥呢

17:59.230 --> 18:01.230
就咱们上堂课啊

18:01.230 --> 18:03.230
咱们上堂课

18:03.230 --> 18:05.230
搞了啥

18:05.230 --> 18:07.230
是不是我们

18:07.230 --> 18:09.230
在这

18:09.230 --> 18:11.230
哎 diy

18:11.230 --> 18:13.230
不这么写了

18:13.230 --> 18:15.230
mads 375

18:15.230 --> 18:17.230
然后hat

18:17.230 --> 18:18.230
什么的

18:18.230 --> 18:19.230
100相做

18:19.230 --> 18:20.230
高度无所谓

18:20.230 --> 18:23.230
然后背景颜色

18:23.230 --> 18:24.230
这个这个

18:24.230 --> 18:26.230
红色

18:26.230 --> 18:27.230
这样的一个字

18:27.230 --> 18:29.230
然后在我们的页面中

18:29.230 --> 18:32.800
去展示对吧

18:32.800 --> 18:34.800
刷新

18:34.800 --> 18:38.940
哎

18:38.940 --> 18:39.940
对没问题啊

18:39.940 --> 18:40.940
没问题然后

18:40.940 --> 18:42.940
我们用手手机测一下

18:42.940 --> 18:44.940
来6 375对吧

18:44.940 --> 18:45.940
哎刷新

18:45.940 --> 18:46.940
这样

18:46.940 --> 18:47.940
我们需要把默认的

18:47.940 --> 18:49.940
这个东西给他去掉啊

18:51.940 --> 18:53.940
marketing

18:53.940 --> 18:55.940
刷新对吧

18:55.940 --> 18:57.940
哎他没有没出现过弄条对吧

18:57.940 --> 18:58.940
没出现过弄条

18:58.940 --> 18:59.940
正好天版屏幕对吧

18:59.940 --> 19:00.940
天版屏幕啊

19:00.940 --> 19:01.940
那这种情况下啊

19:01.940 --> 19:02.940
这种情况下

19:02.940 --> 19:04.940
那我们用的是一个

19:04.940 --> 19:05.940
375对吧

19:05.940 --> 19:07.940
然后这我们有一个页面缩放

19:07.940 --> 19:08.940
1.0

19:08.940 --> 19:09.940
那当

19:09.940 --> 19:10.940
当他干嘛呢

19:10.940 --> 19:12.940
我们给他改成0.5

19:12.940 --> 19:14.940
改成0.5的时候

19:14.940 --> 19:15.940
这写750

19:15.940 --> 19:17.940
你看看怎么样

19:17.940 --> 19:33.190
刷新

19:33.190 --> 19:34.190
没

19:34.190 --> 19:35.190
稍等啊

19:35.190 --> 19:41.130
改的是一个文件

19:41.130 --> 20:00.140
初始

20:00.140 --> 20:01.140
初始

20:01.140 --> 20:03.140
我已经给他缩小了一半了

20:03.140 --> 20:17.620
好了

20:17.620 --> 20:18.620
你们刚才测了一下

20:18.620 --> 20:20.620
刚才是浏览器出现的问题啊

20:20.620 --> 20:21.620
来我回来再看一下

20:21.620 --> 20:22.620
再看一下

20:22.620 --> 20:23.620
首先在这啊

20:23.620 --> 20:24.620
正常我们就把这改了

20:24.620 --> 20:25.620
给0.5

20:25.620 --> 20:26.620
其他的都没有变啊

20:26.620 --> 20:27.620
都没有变

20:27.620 --> 20:28.620
那在这改为干嘛呢

20:28.620 --> 20:29.620
先到一把当前页面

20:29.620 --> 20:31.620
哎集体缩小的一半

20:31.620 --> 20:32.620
对吧缩小了一半

20:32.620 --> 20:33.620
那原来呢

20:33.620 --> 20:34.620
只长750

20:34.620 --> 20:35.620
一半就375对吧

20:35.620 --> 20:36.620
那我们说了

20:36.620 --> 20:37.620
这个375是

20:37.620 --> 20:38.620
这什么是被独立相诉是吧

20:38.620 --> 20:40.620
而且正常情况下他还相等的

20:40.620 --> 20:41.620
但是在缩放情况下

20:41.620 --> 20:42.620
他俩是不等的

20:43.620 --> 20:44.620
刷新一下

20:44.620 --> 20:45.620
刷新一下

20:45.620 --> 20:46.620
OK啊

20:46.620 --> 20:47.620
刚才浏览器出现小问题啊

20:47.620 --> 20:48.620
但不要再给这些细节

20:48.620 --> 20:49.620
但是能看到啊

20:49.620 --> 20:50.620
能看到干嘛呢

20:50.620 --> 20:51.620
下面是没有滚动条的

20:51.620 --> 20:53.620
它是没有滚动条的

20:53.620 --> 20:54.620
而且这也占了50对吧

20:54.620 --> 20:55.620
高度是说明了

20:55.620 --> 20:56.620
缩放了对吧

20:56.620 --> 20:58.620
而且他正好是占满了

20:58.620 --> 20:59.620
这样的一个全屏

20:59.620 --> 21:01.620
那在这个方式

21:01.620 --> 21:02.620
这样的一个方式

21:02.620 --> 21:03.620
干嘛呢

21:03.620 --> 21:04.620
你就包括你说

21:04.620 --> 21:05.620
我在这种

21:05.620 --> 21:06.620
什么的

21:06.620 --> 21:07.620
这种情况下

21:07.620 --> 21:08.620
对吧

21:08.620 --> 21:09.620
我写C4

21:09.620 --> 21:10.620
或者说

21:10.620 --> 21:12.620
这个DPRV3的情况下

21:12.620 --> 21:13.620
我把它这样的设计稿

21:13.620 --> 21:14.620
出一3

21:14.620 --> 21:16.620
或者说把我们的

21:16.620 --> 21:18.620
这个最大的一个宽度

21:18.620 --> 21:19.620
最大的一个宽度

21:19.620 --> 21:20.620
出一3

21:20.620 --> 21:21.620
干嘛等于C4

21:21.620 --> 21:22.620
它仍然可以占满

21:22.620 --> 21:23.620
这样全屏的

21:23.620 --> 21:25.620
仍然是可以占满全屏的

21:25.620 --> 21:27.620
那么针对这种方式

21:27.620 --> 21:28.620
针对这种方式干嘛呢

21:28.620 --> 21:30.620
我们首先干嘛呢

21:30.620 --> 21:31.620
就是降低打击

21:31.620 --> 21:32.620
我们把

21:32.620 --> 21:33.620
无论是DPRV1

21:33.620 --> 21:34.620
DPRV2

21:34.620 --> 21:35.620
DPRV3

21:35.620 --> 21:36.620
我们都转换成

21:36.620 --> 21:38.620
DPRV1的这种方式

21:38.620 --> 21:39.620
干嘛呢

21:40.620 --> 21:41.620
适配

21:41.620 --> 21:42.620
进行适配

21:42.620 --> 21:43.620
我们通过这种

21:43.620 --> 21:44.620
缩放的方式

21:44.620 --> 21:45.620
把它干嘛呢

21:45.620 --> 21:46.620
保证它都是一倍平

21:46.620 --> 21:47.620
它都是一倍平

21:47.620 --> 21:48.620
那这是一个操作

21:48.620 --> 21:49.620
对吧

21:49.620 --> 21:50.620
都变成一倍平

21:50.620 --> 21:51.620
紧接着

21:51.620 --> 21:52.620
有了这个一倍平之后

21:52.620 --> 21:53.620
干嘛呢

21:53.620 --> 21:54.620
我们采取

21:54.620 --> 21:56.620
所有单位是REM

21:56.620 --> 21:57.620
REM本质

21:57.620 --> 21:58.620
它是一个相对单位

21:58.620 --> 21:59.620
对吧

21:59.620 --> 22:00.620
它是相对于谁呢

22:00.620 --> 22:01.620
相对于我们的

22:01.620 --> 22:02.620
Body

22:02.620 --> 22:03.620
以及Fundeside

22:03.620 --> 22:04.620
ATML

22:04.620 --> 22:06.620
以及Body的这样的一个

22:06.620 --> 22:07.620
自己大小

22:07.620 --> 22:08.620
对吧

22:08.620 --> 22:09.620
自己大小

22:09.620 --> 22:10.620
正常来说

22:10.620 --> 22:11.620
我们刚才这不写个链接吗

22:11.620 --> 22:12.620
看这

22:12.620 --> 22:13.620
在这样

22:13.620 --> 22:15.620
它是淘宝快言库的一个

22:15.620 --> 22:16.620
封装的

22:16.620 --> 22:19.620
一栋段适配的一个JS

22:19.620 --> 22:20.620
我们来搞一下

22:21.620 --> 22:26.040
看一下

22:28.040 --> 22:29.040
这是它的原码

22:29.040 --> 22:30.040
你不要慌

22:30.040 --> 22:31.040
它本来也没多长

22:31.040 --> 22:32.040
本来也没多长

22:32.040 --> 22:33.040
咱们看点重点

22:33.040 --> 22:34.040
这里面东西大家都认识

22:34.040 --> 22:35.040
首先Dunkerman

22:35.040 --> 22:36.040
Dunkerman的Element

22:36.040 --> 22:37.040
对吧

22:37.040 --> 22:38.040
然后选择

22:38.040 --> 22:39.040
Ivupod这个标签

22:39.040 --> 22:41.040
这个它自己定义的

22:41.040 --> 22:42.040
Flexible标签

22:42.040 --> 22:43.040
然后干嘛呢

22:43.040 --> 22:44.040
这里面有DPR

22:44.040 --> 22:45.040
有缩放值

22:45.040 --> 22:46.040
对吧

22:46.040 --> 22:47.040
OK

22:47.040 --> 22:48.040
下面这里面

22:48.040 --> 22:49.040
是利用一些

22:49.040 --> 22:50.040
政责去获取

22:50.040 --> 22:52.040
它面臺标签里面的一些属性

22:52.040 --> 22:54.040
这个跟咱们关系不太大

22:55.040 --> 22:56.040
那这呢

22:56.040 --> 22:57.040
是

22:57.040 --> 22:58.040
真对于

22:58.040 --> 22:59.040
这真是获取

23:00.040 --> 23:01.040
DPR的值

23:01.040 --> 23:02.040
123

23:02.040 --> 23:03.040
然后这看着

23:03.040 --> 23:06.040
这有一个Satoconsent

23:06.040 --> 23:08.040
然后这会有一个缩放值

23:08.040 --> 23:09.040
有一个缩放值

23:09.040 --> 23:11.040
那其实这个缩放值

23:11.040 --> 23:12.040
看到了吗

23:12.040 --> 23:14.040
就是用E除以DPR

23:14.040 --> 23:15.040
DPRv2的时候

23:15.040 --> 23:18.040
我这个Scale就是0.25

23:18.040 --> 23:20.040
这个DPRv3的时候

23:20.040 --> 23:21.040
Scale就是0.33

23:21.040 --> 23:23.040
这样的方式干嘛呢

23:23.040 --> 23:25.040
无论是三倍平还是两倍平

23:25.040 --> 23:26.040
它都给你变成一倍平

23:26.040 --> 23:27.040
我们对一倍平处理

23:27.040 --> 23:28.040
那这个是

23:28.040 --> 23:30.040
这个js的一个操作

23:30.040 --> 23:31.040
那剩下的话

23:31.040 --> 23:32.040
剩下的话

23:32.040 --> 23:33.040
再往下看

23:33.040 --> 23:35.040
这有个Refresh REM干嘛呢

23:36.040 --> 23:37.040
它首先

23:37.040 --> 23:38.040
在这里面

23:38.040 --> 23:39.040
无论你宽度多少

23:39.040 --> 23:41.040
我们的这个基本REM

23:42.040 --> 23:44.040
这个Doukenbody

23:44.040 --> 23:46.040
这样的一个Style点方Size

23:46.040 --> 23:48.040
等于当前屏幕的十分之一

23:49.040 --> 23:50.040
那当屏幕你要是

23:50.040 --> 23:51.040
375相速

23:51.040 --> 23:52.040
那我们

23:53.040 --> 23:55.040
这个Body里面的这个Size

23:55.040 --> 23:56.040
就是

23:57.040 --> 23:58.040
37.5相速

23:59.040 --> 24:00.040
采取这种方式

24:00.040 --> 24:01.040
采取这种方式

24:02.040 --> 24:03.040
那下面呢

24:03.040 --> 24:04.040
也没啥

24:04.040 --> 24:05.040
只不过这里面有一个

24:05.040 --> 24:06.040
它里面有一个

24:06.040 --> 24:07.040
REM2PS的

24:07.040 --> 24:08.040
函数

24:08.040 --> 24:10.040
还有个PX2REM的函数

24:10.040 --> 24:11.040
那这个

24:11.040 --> 24:13.040
PX2REM这个函数

24:13.040 --> 24:14.040
我们之后用PoseCNS

24:14.040 --> 24:16.040
当中的PX2REM来实现

24:16.040 --> 24:17.040
那这个在我们

24:18.040 --> 24:19.040
接下来的代码封装里面

24:19.040 --> 24:20.040
回去使用它

24:20.040 --> 24:21.040
回去使用它

24:22.040 --> 24:23.040
那主要是

24:23.040 --> 24:24.040
在这干嘛呢

24:24.040 --> 24:26.040
以当前屏幕的一个宽度

24:26.040 --> 24:27.040
除以10

24:27.040 --> 24:28.040
作为我们的

24:28.040 --> 24:29.040
REM的一个

24:30.040 --> 24:31.040
这个基准单位

24:31.040 --> 24:32.040
就是相当于

24:32.040 --> 24:33.040
REM

24:33.040 --> 24:35.040
是当前屏幕的十分之一宽

24:36.040 --> 24:37.040
采取这种方式

24:37.040 --> 24:38.040
采取这种方式

24:38.040 --> 24:39.040
那当然了

24:39.040 --> 24:40.040
那你这个里面

24:40.040 --> 24:42.040
如果是对淘宝来说

24:42.040 --> 24:43.040
多说一嘴

24:43.040 --> 24:44.040
对淘宝来说

24:44.040 --> 24:45.040
干嘛呢

24:45.040 --> 24:47.040
它里面的一个元素的一个适配

24:47.040 --> 24:48.040
是利用REM的

24:48.040 --> 24:49.040
REM

24:49.040 --> 24:50.040
大家知道

24:50.040 --> 24:51.040
在不同的屏幕宽度下

24:51.040 --> 24:52.040
这个

24:53.040 --> 24:55.040
Body的方式是不一样的

24:55.040 --> 24:56.040
对吧

24:56.040 --> 24:57.040
那意味着

24:57.040 --> 24:58.040
在不同宽度情况下

24:58.040 --> 24:59.040
这个元素的大小

24:59.040 --> 25:00.040
也是不一样的

25:00.040 --> 25:01.040
通这种方式

25:01.040 --> 25:02.040
来实现什么呢

25:02.040 --> 25:03.040
我们的

25:03.040 --> 25:04.040
这个元素的一个自摄音

25:04.040 --> 25:05.040
以及多屏幕

25:05.040 --> 25:07.040
自动摄音的这样的一个功能

25:08.040 --> 25:09.040
然后那这里面

25:09.040 --> 25:11.040
如果淘宝在这里面

25:11.040 --> 25:12.040
实现的时候干嘛

25:12.040 --> 25:13.040
它们的字体

25:13.040 --> 25:15.040
还是用正常的PX去实现

25:15.040 --> 25:16.040
那我们在这呢

25:16.040 --> 25:17.040
其实

25:17.040 --> 25:19.040
字体的这个方式

25:19.040 --> 25:21.040
我们这里面用REM也可以

25:21.040 --> 25:22.040
那他们为什么用PX

25:22.040 --> 25:23.040
实现的

25:23.040 --> 25:24.040
这也说一嘴

25:24.040 --> 25:25.040
因为就像字体的话

25:25.040 --> 25:26.040
你11相处

25:26.040 --> 25:27.040
就是11相处

25:27.040 --> 25:28.040
12相处

25:28.040 --> 25:29.040
就是12相处

25:29.040 --> 25:30.040
我们知道在PC端

25:30.040 --> 25:32.040
相处对小是12相处

25:32.040 --> 25:33.040
在移动端

25:33.040 --> 25:35.040
字体大小最小是8相处

25:35.040 --> 25:36.040
所以说在设置的时候

25:36.040 --> 25:37.040
一定不能超过

25:37.040 --> 25:38.040
小于8相处

25:38.040 --> 25:40.040
一定不能小于8相处

25:40.040 --> 25:41.040
如果小于的话

25:41.040 --> 25:42.040
就是没意义

25:42.040 --> 25:43.040
没意义

25:43.040 --> 25:44.040
也看不出来

25:44.040 --> 25:45.040
自己大小的一个区别

25:46.040 --> 25:47.040
然后对于相处

25:47.040 --> 25:48.040
对于字体来说

25:48.040 --> 25:50.040
那你说12相处的字体

25:50.040 --> 25:52.040
跟12相处的字体大小

25:52.040 --> 25:54.040
它到底什么样的有关系

25:54.040 --> 25:55.040
对吧

25:55.040 --> 25:56.040
那其实这个时候

25:56.040 --> 25:57.040
浏览器它会有些差别

25:57.040 --> 25:59.040
但是差别不会特别大

25:59.040 --> 26:00.040
特别明显

26:00.040 --> 26:01.040
如果对字体

26:01.040 --> 26:02.040
特别有要求的话

26:02.040 --> 26:04.040
那字体我们还用PX

26:04.040 --> 26:05.040
如果没有的话

26:05.040 --> 26:06.040
照常用RAM

26:06.040 --> 26:07.040
问题也不会太大

26:07.040 --> 26:08.040
因为RAM在运算的时候

26:08.040 --> 26:10.040
它会得到一个小数点点

26:10.040 --> 26:11.040
这就是RAM

26:11.040 --> 26:13.040
会带来的一些困扰

26:13.040 --> 26:14.040
当然之后

26:14.040 --> 26:15.040
我们在项目当中

26:15.040 --> 26:19.040
也会使用一个插件

26:19.040 --> 26:20.040
这个我们在课中

26:20.040 --> 26:21.040
处理直接用

26:21.040 --> 26:23.040
但那时候也会跟大家说

26:23.040 --> 26:24.040
在原理就是这样

26:24.040 --> 26:25.040
干嘛呢

26:25.040 --> 26:28.040
根据我们的DPR进行缩放

26:28.040 --> 26:30.040
根据我们的DPR进行缩放

26:30.040 --> 26:31.040
把多位位平

26:31.040 --> 26:32.040
变成一倍平

26:32.040 --> 26:33.040
然后还有就是

26:33.040 --> 26:34.040
我们的方size

26:34.040 --> 26:36.040
我们的RAM最初始的设置

26:36.040 --> 26:38.040
是当前的屏幕的十分之一宽

26:38.040 --> 26:39.040
那至于说

26:39.040 --> 26:40.040
我们正常设计搞

26:40.040 --> 26:41.040
它给我们的是像素

26:41.040 --> 26:42.040
对吧

26:42.040 --> 26:43.040
那这个像素

26:43.040 --> 26:45.040
我们该如何转换成RAM呢

26:45.040 --> 26:46.040
这个我们在上课的时候

26:46.040 --> 26:47.040
会借用一个插件

26:47.040 --> 26:49.040
然后里面会传一个基准

26:49.040 --> 26:51.040
它会往自动变就可以了

26:51.040 --> 26:52.040
这个咱们就不用担心

26:52.040 --> 26:53.040
主要关注

26:53.040 --> 26:55.040
咱们今天就说的这三个问题

26:55.040 --> 26:56.040
什么呢

26:56.040 --> 26:57.040
RAM适配

26:57.040 --> 26:59.040
它能做到的就是

26:59.040 --> 27:00.040
能实现不同的元素

27:00.040 --> 27:01.040
在不同的页面中

27:01.040 --> 27:03.040
给大家感觉是一样的

27:03.040 --> 27:04.040
怎么做到了呢

27:04.040 --> 27:05.040
是根据我们这个

27:05.040 --> 27:07.040
RAM单位来做的

27:07.040 --> 27:09.040
然后我们借出的这样的一个裤

27:09.040 --> 27:10.040
这样的一个插件干嘛呢

27:10.040 --> 27:12.040
以当前屏幕的十分之一

27:12.040 --> 27:14.040
作为我们的RAM的一个基准

27:14.040 --> 27:15.040
RAM等于

27:15.040 --> 27:17.040
十分之一屏幕宽度大小

27:17.040 --> 27:18.040
然后

27:18.040 --> 27:20.040
还有我们的这个

27:20.040 --> 27:21.040
把多位平

27:21.040 --> 27:22.040
DPR为三的

27:22.040 --> 27:23.040
干嘛呢

27:23.040 --> 27:24.040
我给它转换成一倍平

27:24.040 --> 27:26.040
进行一个

27:26.040 --> 27:27.040
适配

27:27.040 --> 27:29.040
进行一个对应的处理

27:29.040 --> 27:30.040
这样的话

27:30.040 --> 27:31.040
就不需要考虑三倍平

27:31.040 --> 27:32.040
包括我们的

27:32.040 --> 27:33.040
媒体下去

27:33.040 --> 27:34.040
去针对于DPR是几

27:34.040 --> 27:36.040
来实现这样的一个操作

27:36.040 --> 27:37.040
我们都按一倍平来做

27:37.040 --> 27:38.040
就可以了

27:38.040 --> 27:39.040
那这个呢

27:39.040 --> 27:40.040
就是咱们这堂课

27:40.040 --> 27:41.040
要说的三点

27:41.040 --> 27:42.040
咱们简单回顾一下

27:42.040 --> 27:43.040
第一个

27:43.040 --> 27:44.040
依相做问题

27:44.040 --> 27:45.040
然后第二个就是

27:45.040 --> 27:46.040
图片模糊的一个问题

27:46.040 --> 27:47.040
包括它的一个解决方案

27:47.040 --> 27:48.040
对吧

27:48.040 --> 27:49.040
然后第三个

27:49.040 --> 27:50.040
就是RAM适配

27:50.040 --> 27:51.040
我们要学会

27:51.040 --> 27:52.040
我们要知道

27:52.040 --> 27:53.040
RAM适配

27:53.040 --> 27:54.040
来解决了

27:54.040 --> 27:55.040
怎么样的一个问题

27:55.040 --> 27:57.040
包括我们要用的一个插件

27:57.040 --> 27:58.040
那之后

27:58.040 --> 27:59.040
RAM在哪个课程当中

27:59.040 --> 28:00.040
都会用到这些内容

28:00.040 --> 28:01.040
好吧

28:01.040 --> 28:02.040
那ok 那这个

28:02.040 --> 28:03.040
那就是咱们

28:03.040 --> 28:04.040
今天的这堂课的内容

