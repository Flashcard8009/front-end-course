WEBVTT

00:00.500 --> 00:03.060
好 这节课的话 我们继续来做我们这个

00:03.580 --> 00:05.100
个人博客的服务期段

00:05.620 --> 00:08.700
好 在上一节课的话 我们已经把那个错误类

00:08.940 --> 00:09.720
写好了

00:09.980 --> 00:13.040
对吧 然后数据库连上了 然后整个价值也打好了

00:13.300 --> 00:15.860
好 这节课的话 我们就一个部分一个部分来做

00:16.120 --> 00:18.940
我们首先的话 我们来看一下哈 我们的这个接口文档

00:19.440 --> 00:22.520
那接口文档的话 你看 这个接口文档的话是不是有这么多

00:23.540 --> 00:26.620
对不对 有这么多 那我们就一个一个来做 那首先第一个是什么呢

00:26.880 --> 00:28.140
第一个是管理员

00:28.580 --> 00:32.500
管理员的话 我们这边服务期段需要提供三个接口

00:33.000 --> 00:34.540
一个是什么呢 一个是登录

00:35.060 --> 00:39.140
一个是更新管理员信息 还有就是恢复登录状态

00:39.400 --> 00:41.700
那我们这节课的话 我们就先做一个

00:42.220 --> 00:44.020
先做什么呢 先做登录

00:44.280 --> 00:45.540
只要你这个

00:45.800 --> 00:47.080
就一个接口通了

00:47.340 --> 00:50.420
后面的话 基本上陆陆续续 你就都知道该怎么做了

00:50.920 --> 00:51.440
OK

00:51.940 --> 00:53.480
好 那接下来回到我们这边代码

00:54.000 --> 00:56.560
我们这个代码的话 我把这些先关掉

00:56.760 --> 00:57.280
先关掉

00:57.800 --> 01:00.100
我们代码的话 现在的话是这个样子的

01:00.600 --> 01:03.420
那我们首先我们思考一下 我们第一步需要干嘛呢

01:03.940 --> 01:05.220
登录的话

01:05.480 --> 01:10.340
登录我们回到这边登录 登录的话前端是不是访问这个接口

01:11.100 --> 01:13.140
对不对 好 那我们这边点进去看一下

01:13.660 --> 01:18.020
前端访问这个接口 访问这个接口之后 然后接下前端会干嘛呢

01:18.280 --> 01:20.060
前端会把他的这个

01:20.580 --> 01:21.860
登录的id

01:22.120 --> 01:23.380
然后接下来他的这个密码

01:23.640 --> 01:25.180
还有就是他的验证码

01:25.400 --> 01:26.840
以及他的这个

01:27.100 --> 01:30.260
是否7天内登录 他会传这些信息过来

01:31.020 --> 01:35.120
他传这些信息过来的话 然后一个最重要的就是什么 一个最重要的就是他

01:36.400 --> 01:37.680
啊 一个最重要的就是他

01:37.940 --> 01:41.000
他的话我们要干嘛 拿到他的帐号密码

01:41.260 --> 01:43.560
然后接下来我们要去数据库 是不是去验证

01:44.320 --> 01:48.160
对不对 验证这个用户他输入的帐号密码是否正确

01:48.420 --> 01:49.440
如果正确

01:49.720 --> 01:51.000
是不是才允许他登录

01:51.760 --> 01:53.800
那现在的话就有一个很尴尬的问题

01:54.220 --> 01:58.740
我们的数据库啊 你看一下这个数据库 数据库的话现在是不是一个东西都没有

01:59.820 --> 02:06.420
对不对 一个东西都没有 啊 说说我们这边的话需要进行一个数据库的初始化操作

02:07.220 --> 02:10.220
你仔细回忆一下 就是之前你在用那个袁老师

02:10.860 --> 02:18.660
写的那个服务器的时候 啊 当你那个服务器你第一次一运行 他是不是自动就生成了好几张表

02:19.380 --> 02:23.100
对不对 然后那个表里面是不是自动就有一些数据

02:24.100 --> 02:25.460
啊 你仔细回一下 是不是

02:26.340 --> 02:39.420
对吧 所以我们这边也是 我们这边的话用户在启动这个服务器的时候 我们这边的话就会就应该干嘛呢 就应该自动的给他生成一些表 表里面的话有一些默认的信息

02:40.340 --> 02:45.260
OK 有一些默认的信息啊 说说我们首先的话 我们第一步 我们先来做这个工作

02:45.940 --> 02:46.740
好 怎么来做呢

02:47.480 --> 02:54.120
好 来到我们这边啊 我们首先的话在这个dao成 我们创建一个这个model

02:56.200 --> 03:01.080
创建一个model 这个是什么呢 这个就存放我的数据模型

03:02.040 --> 03:08.160
啊 存放我的数据模型 我现在的话需要有一个什么呢 需要有一个这个管理员的模型

03:08.840 --> 03:13.440
对不对 好 那我这边呢 我就创建一个 创建一个叫做and the mean

03:14.520 --> 03:16.240
model.js

03:17.720 --> 03:23.400
ok 你注意一下这个model这个目录 他专门用来存放我们的数据模型

03:24.040 --> 03:30.280
ok 你学过那个sacrulize 应该都知道的 我每一张表 每一张表是不是对应的 就有一个模型

03:31.200 --> 03:35.120
对不对 我们首先把这件事情来做了 好 这里的话const

03:37.120 --> 03:44.000
好 再说一遍啊 关于基础 我不会去讲的哈 所以这里的话你一定要把那个袁老师他讲的load这些是

03:44.740 --> 03:53.580
以及那个对应的那个express 还有数据库 一定要把那个部分把它看了啊 不然你到我这来 你直接看我这个视频你是比较吃力的

03:54.700 --> 04:00.780
是吧 我们首先的话从这个sacrulize里面引入这个data type啊 然后接下来的话 这边

04:01.580 --> 04:02.060
const

04:03.380 --> 04:04.700
一个这个sacrulize

04:07.290 --> 04:08.850
啊 这边直接等于require

04:09.830 --> 04:19.030
这里话 我们这边之前的话这个dbconnect 这边的话啊 这个实力还没倒出是吧 我们把这个实力 我们把它

04:19.470 --> 04:24.710
倒出一下啊 我们之前的话是测试这是否能够连接成功啊 那现在的话这边的话没问题

04:25.270 --> 04:27.710
啊 我们这边去干嘛呢 我们这边就是向外暴露

04:29.070 --> 04:29.270
向

04:31.350 --> 04:33.630
向外暴露

04:34.510 --> 04:35.230
啊 这个

04:35.910 --> 04:36.510
连接

04:37.310 --> 04:37.710
实力

04:40.310 --> 04:45.350
向外暴露这个连接实力 我们这边呢 是不是已经这边newsacrulize 是不是进行了一个数据库连接

04:45.830 --> 04:52.390
连接的话 我们把这个连接实力是不存储在这里的 对不对 那回头的话 你在外部啊 你经常会用到这个连接实力

04:52.630 --> 04:55.750
所以我们把它暴露出去啊 这边呢 就是这个module

04:56.910 --> 05:00.470
module 点expose 点这个scrulize

05:02.190 --> 05:04.230
啊 啊 这边就直接这个嘛 等嘛

05:05.130 --> 05:13.450
也就是你整个这个你向外暴露的module 点expose 它本身是个对象嘛 我让这个对象等于这个scrulize嘛 那回头的话你就不需要再解构了嘛

05:14.330 --> 05:20.090
对不对 把他暴露出去啊 暴露出去之后呢 接下来回到我们这边 and mean 这个module

05:20.570 --> 05:22.370
好 那这边的话我们就需要把这个

05:23.410 --> 05:27.330
刚才暴露的这个连接实力 我把它引进来 那这里的话就是啊

05:29.210 --> 05:29.730
require

05:30.930 --> 05:33.650
这里就是应该是上一集目录的

05:34.410 --> 05:36.770
对吧 上一集目录的这个db connect

05:38.730 --> 05:40.650
好 这里呢 就是直接scrulize

05:42.250 --> 05:42.970
scrulize

05:45.640 --> 05:51.440
ok 啊 引入这个数据库的连接实力啊 这个呢 是引入那个data types啊 以后我们要用

05:51.960 --> 05:59.900
好 然后接下来的话 这里定义数据模型啊 定义数据模型 那这边呢 就是module

06:01.020 --> 06:07.340
点expose啊 我们回头会将我们定义的数据模型把它导出去啊 所以这边呢 就是啊scrulize

06:09.180 --> 06:10.740
点什么呢 点define

06:12.100 --> 06:21.540
通过这个define来定义数据模型 对不对 让它和你的表明是关联在一起的啊 所以我们这边表明 表明就叫什么呢 表明就叫做enemy

06:22.860 --> 06:27.700
对吧 好 大家里面 里面就写什么呢 里面就写你这张表的字段

06:28.980 --> 06:30.020
这张表

06:31.100 --> 06:33.380
拥有哪些

06:34.360 --> 06:35.400
字段

06:36.840 --> 06:38.320
啊 那我们这边呢 有哪些字段

06:39.360 --> 06:45.600
啊 你想想这边有哪些字段 这边的话 就只有三个字段 一个是用户的这个id

06:46.400 --> 06:51.680
一个是什么呢 一个是这个 他的用户名啊 一个是密码啊 你看我们这边

06:52.800 --> 06:53.320
你看这里

06:54.840 --> 06:55.200
enemy

06:56.280 --> 07:03.360
你看 是不是就是这个logging id name和这个logging pwd 对不对 密码 但这个密码的话 我们是加了密的

07:04.040 --> 07:07.160
啊 这个id不用管 id的话那是不是会自动生成

07:08.160 --> 07:16.000
对不对啊 所以这边一共是三个字段啊 回到我们这边 我们就来写一下 首先第一个 第一个的话是logging id

07:17.000 --> 07:18.800
对应 这边这个type

07:21.190 --> 07:26.190
type的话对应的就是你这边 data types 点什么呢 点这个screen

07:27.470 --> 07:30.390
对吧 然后接下来这边这个alive

07:30.610 --> 07:32.450
along

07:35.030 --> 07:37.270
他是一个什么呢 他是一个force

07:38.430 --> 07:44.150
OK 第一个字段就出来了 啊 第一个字段出来了 然后后面就是很简单了 这整体负责

07:45.230 --> 07:49.230
对不对 因为他们都是stream啊 第二个是什么 过来漏一眼

07:50.070 --> 07:53.350
第二个啊 这边设计表

07:54.230 --> 07:57.390
这边 第二个是name然后logging是pwd

07:58.170 --> 08:03.730
对吧 啊 这边的话name然后loggingpwd

08:04.890 --> 08:08.810
好 这个wd是消息 ok好 这边是不是就定义好了

08:09.370 --> 08:11.890
好 然后加这边呢 他还接受什么呢 还接受第二个对象

08:12.610 --> 08:17.970
啊 这个袁老师讲过的 对不对 第二个对象 第二个对象的话 我可以在这边 我这边他有一个叫做这个啊

08:18.850 --> 08:24.020
phrase table name phrase table name

08:24.560 --> 08:32.000
这个是什么 是不是就是他默认的话 他要给你加一个s 我这边不想他加s 是不是把这个设字为去啊

08:32.720 --> 08:35.200
对吧 然后加他还有一个这个creted

08:36.400 --> 08:38.240
不是这个creted

08:39.920 --> 08:45.520
这是你这个表啊 他的会有那么一个字段 叫做creted and的字段啊 这个我们不要

08:46.200 --> 08:50.120
所以设字为force 还有一个什么呢 还有一个这个update

08:50.920 --> 08:53.160
updated啊updated

08:54.360 --> 08:55.720
updated at

08:56.720 --> 09:02.440
这个呢 是不是也把它设作为force啊 这两个字段的话我们不需要 对吧 把它设作为force ok

09:03.000 --> 09:06.720
好 那我们这个and me model 我们就已经定义完了

09:07.320 --> 09:11.920
好 定义完了之后 然后接下来我们要通过这个model干嘛呢 通过这个model

09:12.520 --> 09:17.720
我们来这个生成一些初始化的数据啊 那我们怎么做呢 我们这样子来做

09:18.840 --> 09:23.920
啊 我们这边呢 是不是已经有了一个dbconnect 他是专门负责什么 是负责联接数据库的

09:24.320 --> 09:25.600
好 我们这边我们再来定一个

09:26.480 --> 09:28.560
再来定一个db.js

09:29.440 --> 09:33.320
啊 这个文件就是干嘛呢 这个文件啊该文件

09:34.720 --> 09:42.560
该文件负责对数据库进行一个初始化

09:44.080 --> 09:44.360
操作

09:45.360 --> 09:49.200
ok 好 那我们首先就把什么呢 把这边 我们这边是不是有一个这个连接

09:49.760 --> 09:53.160
连接的实列啊 把它引入进来 所以这边呢 就const

09:53.820 --> 09:56.220
const 一个这个synchronize

09:57.740 --> 09:58.140
负责过来

09:59.580 --> 10:02.100
synchronize 等于一个这个require

10:03.220 --> 10:07.700
啊 这个就是他们同级的 是吧 然后这个dbconnect

10:08.500 --> 10:13.220
先把这个连接实力引进来 引进来之后你还要干嘛呢 你还要把那个model 把它引进来

10:13.820 --> 10:15.180
啊 所以接下来这边const

10:15.660 --> 10:18.140
一个这个and the mean model

10:18.980 --> 10:20.860
等于一个什么呢 等于一个require

10:21.400 --> 10:27.800
啊 当前目录下面有个model目录model目录下面啊and the mean model

10:28.680 --> 10:34.760
所以一个是数据库我们写下 一个是数据库连接实力

10:36.990 --> 10:42.950
一个是什么呢 一个是就是各种数据模型就数据模型吗 数据模型

10:44.310 --> 10:48.950
对吧 把它引进来 好 引进来之后 然后接下来的话 我们就要进行一个这个同步了

10:49.570 --> 10:54.490
啊 那我们这边呢 就用一个这个立即执行函数 这边的话sync

10:56.530 --> 10:56.930
function

11:00.490 --> 11:06.170
这边立即执行函数好 在这里面 在里面我们来进行同步 同步的话呢 这边的话这个

11:06.850 --> 11:10.930
连接实力上面有一个什么方法 有一个是不是叫做这个sync方法

11:12.890 --> 11:17.050
对不对 有个sync方法 好的 这边呢 我给他传一个这个altern

11:18.970 --> 11:25.490
altern true啊altern true是什么 你如果不记得了 你就去看一下这个文档 文档里面是写得清清楚楚的

11:26.010 --> 11:29.290
好 我看一下在哪个位置 好像是在模型

11:31.370 --> 11:36.450
对 就这里啊 这边sync sync的话他有好几个啊 有这个force 有这个altern

11:37.330 --> 11:38.690
然后我看在哪里

11:40.170 --> 11:44.050
嗯 这个得找一找啊 这里这里这里 看到没有啊

11:44.790 --> 11:48.190
这个force true false true的话 他是会把所有的表给你删除掉

11:48.830 --> 11:53.230
删除掉再加重新创建 好这个altern true altern true是什么呢

11:53.750 --> 11:59.150
altern true在这上面 在这 他是会检查数据库中表的当前状态

11:59.630 --> 12:06.310
啊 然后接下来在表中进行必要的这个更改啊 比如你这个在模型里面 比如你这个表已经同步了

12:06.670 --> 12:11.070
同步了之后 然后将你在这个模型里面 你增加了一个字段 或者删除了一个字段

12:11.450 --> 12:14.090
好了 回头的话 他就会把你的表进行一个同步

12:15.050 --> 12:21.530
OK 好了 接下来我们这边 我们保存一下 我们来看一下 当我一执行这个代码 哦 等一下 这里还没改

12:22.570 --> 12:24.090
哪里呢 app.js

12:24.570 --> 12:31.450
app.js 我们这边就不需要再引入什么 不需要再引入这个db connect了 而是引入什么 这边引入db啊

12:33.050 --> 12:38.170
对不对 引入db 你想想 db的话他就会干嘛 db的话他这边是不是就会引入 db connect

12:38.550 --> 12:46.350
而且啊 这边的话 实现一个数据库的连接 对不对啊 所以我们的app.js的话 应该是改成这个db

12:46.990 --> 12:53.750
好 然后完事之后 我们现在保存 一保存的话 现在应该是有什么效果呢 现在的效果就是我们的在这边

12:54.950 --> 13:00.230
在我们的my site2这边 这边他就会自动的给我们生成一张表

13:00.990 --> 13:03.470
那应该是这样的效果 好 那我们这边我们来试一下

13:04.450 --> 13:10.330
保存 好 抱错了 是吧 抱错了 抱错了 抱错了 这边是抱的什么错

13:10.970 --> 13:19.380
cannot find the module db connect 啊connect是不是写错了 db connect

13:20.260 --> 13:24.900
c o n啊我是在哪个位置啊 应该是model

13:26.300 --> 13:31.740
那果然是这里 这边的话就是应该是上一层的这个 是吧 好 再来

13:32.940 --> 13:33.260
保存

13:33.800 --> 13:39.560
ok 好 这边老师们没抱错 没抱错之后 然后接下来我们这边看一下我们的表

13:40.880 --> 13:41.120
这边

13:42.600 --> 13:47.760
呃 你看 是不是就有了 对不对 就有了 and 命就有了啊

13:48.400 --> 13:54.280
你看这里 现在那啥是空的啊 现在是空的啊 现在是空的 那接下来我们就需要做一件事情

13:54.680 --> 13:58.080
干嘛呢 我们有一些表是不是需要初始化数据的

13:59.060 --> 14:05.140
对不对 好 来到我们这边 来到我们这个db这边 我这边给你写一下啊 这里的话是同步

14:06.060 --> 14:11.700
就是将模型和表进行同步 将模型

14:12.820 --> 14:21.420
将数据模型啊 将数据模型和表进行同步啊 同步完成后

14:22.460 --> 14:29.700
同步完成之后有一些表 最是有一些表 不是所有表啊 有一些表

14:30.340 --> 14:31.380
是需要

14:32.460 --> 14:34.220
一些初始化数据

14:36.260 --> 14:42.340
对不对啊 比如说我们这边这个and命这张表 我们就给他一个初始的账号 比如初始的账号就是and命

14:42.820 --> 14:48.300
然后初始的这个密码 密码的话 我们就让它是123456 ok 那这边的话

14:49.220 --> 14:52.340
我们要干嘛呢 我们要查看他有没有东西

14:53.220 --> 14:59.020
有没有内容 如果没有 我们才进行一个初始化 对不对 有的话 我们就不进行初始化

15:00.340 --> 15:00.740
我们

15:02.300 --> 15:14.100
我们需要先查询这张表 有没有内容 啊 比如说我这个and命都有了 有有内容的话 我下次再启动这个服务器的时候

15:14.420 --> 15:18.500
他是不是就不需要给我初始化数据 对不对啊 除非我没有

15:19.420 --> 15:22.820
啊 需要先查询有没有内容 没有内容

15:23.620 --> 15:27.020
我们才干嘛呢 初始化

15:27.780 --> 15:29.460
数据 对不对

15:29.780 --> 15:32.260
那怎么做呢 好 那这边的话 你就可以直接

15:33.100 --> 15:40.020
好 这边我们加一个await 他是异步的 我们等待 等待完了之后 这边同步之后 好 然后接下来啊 我们这边

15:40.340 --> 15:45.500
await 等待这个and命model 他有一个方法叫做account

15:47.580 --> 15:52.740
叫做count方法啊 这个方法呢 他就会可以查询出什么呢 查询出你这个表里面

15:53.340 --> 15:57.500
啊 有哪些数据啊 就是有多少条数据啊 那我们这边接收一下

15:58.360 --> 16:07.440
and命count等于 ok 啊 比如我这个表里面有一条数据 那这个就是一条 有两条就是两条 好 那我们现在有没有

16:08.480 --> 16:13.120
我们现在有没有 我们这边让我们来看一下and命count啊 保存

16:14.800 --> 16:21.680
你看是不是零啊 对不对 是零 因为我没有数据 好没有数据 那我们就干嘛 这边我们就进行初始化

16:22.220 --> 16:30.980
我们这边就直接一副啊 这边取个反 对不对 好 进入此一副 此一副 说明

16:31.780 --> 16:39.460
该表没有数据 没有数据 我们进行一个初始化

16:40.460 --> 16:43.660
ok 那初始化的话 那这边呢 就是await

16:45.580 --> 16:50.900
啊 等待 这边呢 and命model 他有个什么方法呢 有一个叫做crate的方法

16:51.820 --> 16:57.180
通过这个crate的方法 我们传入一个对象 那里面的话就可以写上我们这个数据的这个内容

16:57.660 --> 16:59.780
那我们这边他有什么 所以有logging id

17:00.660 --> 17:06.140
logging id对应了 我们给个初始化的数据 and命 好 然后这还有什么 这还有nem

17:06.940 --> 17:09.180
nem的话 我们就叫做超级管理员

17:11.180 --> 17:13.580
对吧 然后还有什么呢 还有就是这个logging

17:15.300 --> 17:16.420
logging pwd

17:17.400 --> 17:25.400
啊 好 然后logging pwd 这里要注意了logging pwd 这里写什么呢 我初始化 我想初始化为123456

17:25.840 --> 17:29.320
但是你这样子一写的话 我们这边我们来看一下嘛 这边保存

17:30.760 --> 17:38.480
ok 好 然后你这样子一写的话 我们来看一下啊 有点刷新一下啊 这边有些时候你需要把他关掉

17:39.520 --> 17:43.680
啊 你看 这里的话他这个是不是就干嘛 是明文存进去了

17:43.860 --> 17:52.460
啊 对不对 明文存储进去了 啊 说说这边我们需要对他进行一个加密啊 说说我们这边呢 我们来装一个包

17:54.580 --> 18:01.260
装个什么呢 就是md5 啊 这个也是袁老师讲过的 然后我们装一下md5这个包

18:02.060 --> 18:09.540
好 走 把它装上啊 这个很快的 好 然后接下来的话 这边呢 你就需要把这个包 你需要把它引一下

18:10.400 --> 18:11.600
啊 这边的话就const

18:12.840 --> 18:15.080
const的一个md5等于一个

18:16.320 --> 18:16.920
require

18:18.560 --> 18:19.040
md5

18:20.840 --> 18:26.560
可不可以啊 把他引入 引入之后 然后接下来这里 这里的话我们是不是就掉这个md5这个方法

18:27.440 --> 18:33.000
对不对 md5 好 然后接下来的话 这边传入什么 所以123456

18:33.920 --> 18:36.960
对不对 传进去 传进去之后 然后你这边他最好再给他这个

18:37.900 --> 18:44.020
打印一句话const.log 啊 这个是什么呢 这个就是初始化

18:47.030 --> 18:49.470
初始化管理员信息

18:50.750 --> 18:52.190
管理员数据

18:53.150 --> 18:53.470
完毕

18:54.750 --> 18:55.710
对吧 OK

18:57.310 --> 18:58.630
好 然后整个

18:59.470 --> 19:01.190
整个这个的话 我们应该打印一句话

19:02.550 --> 19:05.230
打印一句const.log

19:05.870 --> 19:08.070
这个数据库 数据

19:09.050 --> 19:09.610
已经

19:10.850 --> 19:11.410
已经

19:12.450 --> 19:14.690
已经准备完毕

19:15.450 --> 19:15.970
ok

19:16.730 --> 19:22.690
好 那我们这边的话 回头我们再一起动的话啊 再一起动的话 他如果那个表没有数据 他就会打印

19:23.130 --> 19:28.250
这个初始化管理员数据完毕 然后这数据库数据准备完毕

19:28.690 --> 19:31.570
那你第二次在启动的话 他就不会打印这句话了

19:32.170 --> 19:37.730
OK 好 那我们这边我们来看一下 当然我现在的话已经有数据了啊 有数据我把这条数据我把他

19:38.210 --> 19:38.690
删除掉

19:40.690 --> 19:41.050
这个

19:41.970 --> 19:42.530
怎么删呢

19:44.210 --> 19:45.050
这些清空表

19:46.050 --> 19:47.090
他应该是用的是trunk it

19:47.890 --> 19:48.130
ok

19:48.970 --> 19:49.890
好 那我这个表

19:51.090 --> 19:53.570
把他关一下 他每次需要重新关一下

19:54.490 --> 19:59.290
哎 是不是清空了 清空了之后的注意啊 我现在的话我重新启动我的这个服务器

20:01.250 --> 20:01.530
走

20:01.990 --> 20:09.150
看了没啊 服务器启动啊 初始化管理员数据完毕 数据库数据准备完毕

20:09.750 --> 20:11.190
好 那接下来我们过来摟一眼

20:12.390 --> 20:13.510
我们这边刷新一下

20:15.650 --> 20:17.570
或者把他关掉 关掉重启一下

20:18.690 --> 20:20.010
好 你看这边的话 我们的这个

20:20.770 --> 20:21.850
是不是就加了密的

20:22.770 --> 20:26.810
对不对 加了密的 好 而且你这边的你第二次 比如我先把这个服务器停了

20:27.370 --> 20:30.410
停了 然后我第二次启动 第二次启动他会不会进这个衣服

20:30.990 --> 20:35.590
他就不会进这个衣服了 对不对 他查到你这边是不是有数据 对不对 我们这边走

20:37.190 --> 20:42.910
看了没有 这边就只有服务器启动 数据库数据准备完毕 就只有这两句话

20:43.550 --> 20:47.630
ok 所以这边的话 大家首先的话 把这个数据

20:48.350 --> 20:49.230
先把他准备一下

20:50.030 --> 20:56.150
ok 把数据准备一下 你可以把视频暂停一下嘛 暂停一下 然后把这儿 把这儿做一下

20:57.130 --> 21:03.370
好 这一步做完之后啊 然后接下来的话 我们就开始写我们这个登录的接口

21:03.930 --> 21:07.130
好 我们这边的话过来 来我们的这个接口文档 过来揉一眼

21:07.810 --> 21:12.370
好 你注意啊 我们这边会平凡的和这个接口文档 以及什么呢 以及这个poster man

21:13.210 --> 21:14.570
啊 和这个poster man打交道

21:15.170 --> 21:19.330
啊 因为我们这边的话是前后端分离开发 我们假设这两个是没写好的

21:19.970 --> 21:23.170
啊 就无论你是前台还是后台 我们都不知道他长什么样子

21:23.690 --> 21:25.210
说这个才是你的唯一标准

21:26.210 --> 21:31.490
ok 接口文档才是唯一标准 好 那接下来我们这边一个一个来写 那我们首先的话这个登录

21:32.290 --> 21:37.210
登录的话 他这边的话是什么呢 是这个poster 对吧poster 然后加这边and me

21:37.810 --> 21:42.850
logging 啊 然后登录成功之后 服务器会在响应头添加什么呢

21:43.730 --> 21:49.050
这个添加想这个生成的这个token 啊 token的话 然后接下来这里

21:50.410 --> 21:53.170
呃 如果你请求底部包含remember

21:53.770 --> 21:55.730
他就是什么呢 他的过期时间就是一天

21:56.250 --> 22:00.650
如果包含了remember 他就是什么呢 他就是这个设置的这个天数

22:01.570 --> 22:03.090
对吧 好 那我们这边的话

22:04.730 --> 22:09.170
啊 我们来看一下啊 这个就是你的这个请求体 你的请求体的话就是长这个样子的

22:09.650 --> 22:17.730
看到没有 有这个logging id 有你的密码 然后接下来有你的这个验证码 然后已经有这个remember 啊remember 这边啊 如果

22:18.770 --> 22:21.130
不包含 也就是这个字段是可有可无的

22:21.870 --> 22:27.630
对吧 如果不包含不包含的话 他就是过期时间就是一天 这个其实就是我们一会设置那个token的时候

22:28.070 --> 22:32.110
token是不可以设置一个过期的实差 对不对 其实就是根据他来的

22:33.470 --> 22:39.030
好了 我们这边一步一步来呗 那我们请求请求最先到达哪里呢 把这些关了

22:39.830 --> 22:44.230
请求最先到达哪里 我们三层架构 三层架构 然后接下来第一层就是谁

22:44.830 --> 22:50.390
是如此啊 对不对啊 所以我首先呢 我在这边 我在这边的话 新建一个

22:51.230 --> 22:53.390
新建一个and the main.js

22:54.630 --> 22:57.910
这两个其实是没有用的啊 这两个我可以把它删掉

22:58.990 --> 23:02.030
这两个这样子 我们先拿一个过来 因为一会儿方便我们写

23:02.910 --> 23:09.470
先拿一个过来 拿一个过来之后啊 这个index和这个user啊 这两个其实是没有用的 我把它删掉

23:10.070 --> 23:11.070
到时候我们自己来写

23:11.790 --> 23:16.390
然后删出 当我们的格式还是和这样子的 就是格式还是就是和这个一样的

23:17.070 --> 23:20.870
知道吧 所以我为什么我这边拿了个过来啊 方便这个一会写吗

23:21.550 --> 23:26.630
好 然后我就把这两个删掉啊 这两个就不要了 就删除你不用的文件

23:27.350 --> 23:31.630
免得那么荣居啊 这两个删掉 这两个删掉的话 你这边就要改

23:32.590 --> 23:38.190
你这边的话 这儿是不是就找不到了 对不对 包括他这边 这边他在用 用的话是不是也就找不到了

23:39.030 --> 23:43.310
对不对 OK 好 那我们这边的话 我们就来写我们的这个and the main

23:44.710 --> 23:46.150
and the main的话 这边首先

23:46.970 --> 23:54.010
这两句不变 好 然后接下来在这里 这里的话我们就来写 他是一个什么请求呢 他是一个post的请求

23:56.360 --> 23:59.080
对不对 post 然后接下来的话 他这边呢是

24:00.040 --> 24:05.720
啊 安德命logging 安德命logging的话呢 安德命我们就作为我们的一级路由

24:06.280 --> 24:09.640
啊 那logging作为我们的二级路由 所以这边呢他就是

24:10.320 --> 24:12.600
直接写logging 这个就可以不要了

24:12.780 --> 24:21.380
OK 好 然后再把这个router 把它导出出去 导出出去之后 然后接下来来到你的这个app

24:23.100 --> 24:29.300
来到你的这个app.js 啊 这边 这边的话你就该引入什么 是不是引入这个and the main

24:29.940 --> 24:31.940
好 这边呢就叫做and the main router

24:33.260 --> 24:39.220
可不可以啊 这个就不要了 好 然后接下引入这个我们的and the main router 引入之后 然后接下来啊 这边

24:40.200 --> 24:43.120
and the main router 这边呢对应的就是应该是and the main

24:44.360 --> 24:50.560
对不对 那回头用户请求的时候他就是什么呢 就是这儿and the main 拼接上什么呢 拼接上这个locking

24:51.000 --> 24:56.320
是不是用户请求的这个路由 对不对啊 用户到时候请求的时候他就是应该是

24:56.880 --> 25:02.640
啊 但前面的话这个localhost 3000这个就不说了吗 localhost 3000好 然后这边就是应该是and the main

25:03.160 --> 25:08.240
and the main 到达这边一级路由 一级路由过来 然后接下来这边logging 说说这边的话

25:08.620 --> 25:14.220
斜杠logging 对不对 斜杠logging 然后就会到达哪里 这就会到达这个地方

25:15.020 --> 25:19.940
对不对 我这边的话我如果写个a 写个a的话 那这边他是不是就是and the main 斜杠a

25:20.980 --> 25:27.380
对不对 我这边一级路由如果设一个abc 那这边是不是应该是abc 下面的a

25:28.260 --> 25:31.700
看到没有 就这么简单啊 我把这儿改回去

25:33.740 --> 25:34.940
这边的话是and the main

25:35.920 --> 25:37.800
啊 这边的是logging

25:39.400 --> 25:51.280
ok 啊 把这个改了 改了之后啊 接下来你不要着急啊 我们一点点来测试 对吧 我们这边一点一点啊 走慢一点 我们这边呢就是req.body 我们来打印一下

25:52.040 --> 25:56.840
打印一下这个body 看一下这个请求能不能到这里啊 这边比如请求

25:57.640 --> 26:02.960
我们就加着这个吗 ok 好 然后完事之后我们就应该在哪 哪里测试啊

26:03.940 --> 26:10.580
你想想这个就应该在哪里测试啊 是不是在postman里面 对不对 你这边的话先保存一下 应该是没什么错误的

26:11.980 --> 26:19.980
没错没错过之后 然后现在你这边的话就在postman里面测试 好 我们这边呢就是应该是300多少是3001

26:20.740 --> 26:21.060
然后

26:22.540 --> 26:23.900
这边的话是应该是post

26:24.940 --> 26:27.460
对吧 post好 这边的话选择这个

26:28.440 --> 26:33.960
选择这个body 首先选择body body的话 然后加这边raw 然后加这边选这个节省

26:34.440 --> 26:39.720
好 这边的话就可以很方便的输入节省啊 我们这边就随便输入点啊 这边and me 222

26:40.320 --> 26:44.240
密码123456123456 ok好 升的

26:45.120 --> 26:48.960
好 升的之后 然后接下来我们过来看一下 这边的话是不是抱错了

26:50.200 --> 26:52.400
对不对 这边抱错了 这边抱的怎么错

26:53.080 --> 26:54.600
no default engine

26:55.580 --> 26:56.780
what's the tension

26:57.980 --> 27:00.100
他说的是没有恩紧

27:01.860 --> 27:04.740
没有恩紧 我们这边不需要那个

27:05.980 --> 27:08.700
他是说的渲染引擎吗 我看一眼啊

27:10.300 --> 27:17.500
啊 我们首先呢 我们这边呢是40440是没找到啊 没找到的话 他默认会给你返回一个页面 但是我们把那个

27:18.280 --> 27:23.120
模板的一些都删了啊 这边呢 其实下面的这个不用管他 主要是什么 主要是这边没找到

27:23.760 --> 27:26.640
啊 这边的话 我们这边啊 我们应该是加一个api

27:27.560 --> 27:28.520
啊 因为你看我们这里

27:29.720 --> 27:30.120
你看

27:31.000 --> 27:38.200
你看这里 这里的话 我们是不是全部都是有这个api的 对不对 所以我们这边加个api 然后加这边应该加什么 加一个locking

27:39.160 --> 27:41.960
对不对 好 这边呢 就是斜槓api

27:43.040 --> 27:43.600
好 保存

27:44.380 --> 27:47.220
啊 启动 启动之后 然后再这边再来

27:48.020 --> 27:53.740
圣的 好 圣的之后 大家这边卡住了啊 这个很正常 因为我们那边没有做处理 好 你看这边

27:54.580 --> 27:55.140
是不是过来了

27:56.700 --> 28:05.820
对不对 说明什么 说明我们这边使用postman 我们发送了一次真实的请求 请求的话 然后接下来请求的内容 是不是真真实实的就

28:06.220 --> 28:07.180
到达这里了

28:08.540 --> 28:13.500
可不可以啊 就到达这里了啊 到达这里之后 然后接下来的话 我们这边就

28:13.620 --> 28:18.580
需要一步一步的来写啊 那首先这里 这里应该干什么呢

28:20.300 --> 28:23.020
好 这里的话 首先应该是有个验证码的验证

28:26.990 --> 28:35.110
首先应该有一个验证码的验证啊 当我们现在的话验证码发过来了

28:35.990 --> 28:37.070
呃 验证码在哪里

28:38.150 --> 28:43.750
我看 这这边的话 我们没写那个之段 是吧 你正常情况下的话 这边你应该是根据

28:44.790 --> 28:45.910
哎 根据这里

28:46.910 --> 28:48.550
这里他是不是会有这些字段

28:49.670 --> 28:50.670
马上发过来

28:52.830 --> 28:56.510
ok 放过来 把这个注释上了

28:57.470 --> 28:59.150
他发过来 这段是不是应该是长这个样子的

28:59.950 --> 29:02.670
对不对 他把他取消取消了之后让他再重新发送

29:03.430 --> 29:08.390
好 重新发送之后让他在这边 正常的话 这段是不是应该是这样子的 对不对 会有一个这个验证码

29:08.710 --> 29:10.710
啊 所以我们首先的话 应该是针对这个验证码

29:11.190 --> 29:15.910
进行一个这个验证啊 但是我们现在的话 验证码这个模块没写 我们先放一放

29:16.210 --> 29:19.050
ok 好 那我们这边的话 假设验证码通过了

29:22.140 --> 29:22.620
假设

29:24.460 --> 29:27.260
假设上面的验证码

29:27.940 --> 29:28.260
已经

29:29.220 --> 29:34.740
通过了 那通过了的 接下来我就应该进行什么 进行这个帐号密码的这个验证

29:35.300 --> 29:37.700
对不对 那我再不在这做呢 我就不在这做

29:38.340 --> 29:41.820
啊 这个帐号密码的验证 他是属于什么呢 应该是属于我们的业务

29:42.860 --> 29:44.420
对不对 属于我们的业务逻辑

29:44.920 --> 29:47.960
所以说我们这里的话 我们在我们的这个service

29:48.840 --> 29:52.840
这边 我们创建一个什么呢 创建一个admin service

29:55.860 --> 29:57.740
admin service

29:58.380 --> 29:58.980
点ks

29:59.820 --> 30:06.100
ok啊 注意听啊 这里的话就是一个跑通了 你后面就都跑通了啊 这个就是什么呢 这个就是

30:06.100 --> 30:07.540
admin模块

30:11.160 --> 30:13.440
模块的这个业务逻辑

30:14.840 --> 30:16.000
业务逻辑程

30:16.980 --> 30:18.500
ok 而让我在这里

30:19.700 --> 30:21.500
这里的话 我就导出一个方法

30:22.300 --> 30:22.780
module

30:23.460 --> 30:24.340
点export

30:25.060 --> 30:27.900
导出一个什么呢 导出一个叫做logging service

30:29.020 --> 30:29.940
导出这么一个方法

30:31.060 --> 30:32.060
那加这边一步

30:33.500 --> 30:33.860
function

30:36.080 --> 30:40.040
接收一个参数 这个参数呢 就是你给我传过来的这个登录的这个对象

30:40.640 --> 30:41.440
logging infer

30:41.840 --> 30:43.080
就是什么呢 就是刚才这个对象

30:43.680 --> 30:44.320
这个他是个对象

30:44.900 --> 30:51.020
对不对 好 那接下来我们这边接收到之后 然后我们在这打印一下logging infer

30:51.620 --> 31:00.020
好 然后接下来在这里 在这里的话 我们就不应该做处理 而是应该把它传递给谁呢 传递给我们刚才这边写的这个logging service

31:00.620 --> 31:02.900
所以我们这边把这个logging service 我们把它引入一下

31:05.100 --> 31:06.060
啊 这边const

31:06.980 --> 31:08.220
这边的logging service

31:08.900 --> 31:11.060
等于一个required

31:12.100 --> 31:12.820
啊 引入

31:13.940 --> 31:14.900
service

31:15.440 --> 31:17.720
这一层的endming service

31:18.240 --> 31:25.280
你注意这边的话 一会我们会导出好几个方法 所以我们这边的话 就是我这边导出的时候都是通过model.exposed.

31:25.800 --> 31:32.680
通过这种形式导出 然后加这边通过结构的形式 把它拿到啊 拿到之后 然后接下来我们这边的话

31:33.920 --> 31:35.080
是不是就是调用这个方法

31:35.880 --> 31:36.960
logging service

31:37.400 --> 31:40.120
好 把什么呢 把我们的req.body

31:41.100 --> 31:46.860
就传过去 传过去之后 然后接下这边是否接受到 接受到 然后加这边打印 我们来看好报室

31:47.420 --> 31:50.420
我们一步一步我们走慢一点 全部保存

31:52.020 --> 31:56.700
啊 这样子我们这边还是加一点支付串啊 这边加点支付串 保存

31:58.020 --> 32:04.660
好 然后poster man测试 反复 反复的会利用到这个poster man 啊 以及那边的这个接口文档

32:05.060 --> 32:08.500
发送 发送之后 然后加这边过来看一下 拿到没有

32:09.400 --> 32:10.200
这边就拿到了

32:11.400 --> 32:17.960
对不对 这里就拿到了 好 这里拿到之后 然后加这里的话 我们要干嘛呢 这里的话 我们首先拿到的这个

32:18.720 --> 32:23.280
账号密码是这个样子的啊 那我们首先的话对这个密码进行一个这个加密

32:23.880 --> 32:26.320
为什么 因为你数据库存的是不是就是加了密的

32:27.120 --> 32:31.120
对吧 你数据库这边存的就是密码就是加了密的好 那我们这边首先对

32:31.560 --> 32:35.640
密码进行加密 这个的话也是属于我们的这个业部逻辑的一部分

32:36.180 --> 32:37.140
啊 说说我们这边的话

32:38.260 --> 32:38.540
首先

32:39.420 --> 32:43.380
const一个md5 等于一个require

32:45.540 --> 32:46.100
md5

32:47.140 --> 32:50.980
啊 首先把这个引入好 引入之后 然后接下来我们这边

32:52.860 --> 32:59.420
logging inferlogging infer 是不是就是这个对象 对不对 这个对象 然后接下来他有一个什么呢 他有一个这个

32:59.980 --> 33:00.460
logging

33:03.070 --> 33:11.790
logging什么是pwd他的密码 然后接下来我重新用什么呢 用md5 是不是进行一个加密 对不对 加密之后然后复制给他

33:13.030 --> 33:14.630
啊 这边呢 是进行加密

33:16.270 --> 33:19.750
ok 好 加密之后 然后接下来的话 我就要开始验证的

33:20.310 --> 33:24.670
验证的话 是不是要进行一个数据库链接 对不对 接下来

33:26.670 --> 33:31.710
接下来进行数据的验证 也就是

33:32.230 --> 33:37.470
查询该条数据 在数据库

33:38.630 --> 33:40.630
里面有没有

33:41.590 --> 33:48.350
那这个的话 是不是涉及到设和数据库打较大 那数据库打较到是哪一层 是不是dao这一层

33:49.390 --> 33:55.310
对不对啊 说说我们这边在这个dao这边 我们新建一个文件 叫做这个and me

33:55.950 --> 33:56.430
dao

33:57.190 --> 33:58.110
啊 and me d a o

33:59.790 --> 34:01.550
啊不是这啊 对就是就在这下面

34:02.950 --> 34:05.750
and me d a o 点g s

34:06.670 --> 34:08.670
ok 啊这一层就是负责

34:09.910 --> 34:10.710
这一层

34:11.870 --> 34:14.950
负责什么呢 负责和数据库

34:16.150 --> 34:16.630
打较到

34:17.510 --> 34:24.270
ok 他就负责我连接了数据库之后 这样我比较查询 根据id查询 根据id删除 根据id修改

34:24.710 --> 34:27.590
这些操作就全部都放在什么呢 放在这一层

34:28.550 --> 34:30.270
ok 好 说到我们这边了

34:31.250 --> 34:35.490
首先的话 还是要这个引入模型 啊 这边const

34:36.250 --> 34:41.410
const一个andme model等于一个require 先把那个

34:42.250 --> 34:47.170
管理员的那个模型先把它引入 因为我们所有的操作是不是都是基于那个模型

34:48.130 --> 34:52.610
对不对andme model 先把他引入 引入之后 然后接下这边登录

34:54.650 --> 34:58.410
登录的话 这边仍然是model.expose

35:00.370 --> 35:07.570
expose 点什么呢 点logging.do 等于一个一步方法 因为一会会进行一步的操作

35:09.250 --> 35:12.090
ok 好 这边呢 就是把这个logging infer

35:13.330 --> 35:15.410
接收 接收一个logging infer

35:16.730 --> 35:18.090
接收了之后 我们这边还是

35:19.170 --> 35:20.770
干嘛呢 我们这边打印一下

35:21.530 --> 35:23.530
logging infer

35:24.410 --> 35:25.770
对吧 打印一下

35:26.810 --> 35:30.210
好 那接下来在这边 在你的这个service 这边

35:30.450 --> 35:32.570
service 这边你是不是应该是导入这个方法

35:33.570 --> 35:37.770
对不对 这边const等于一个require

35:39.290 --> 35:43.050
啊 这里的话就是应该是什么 是不是这个dao 层

35:43.810 --> 35:48.810
dao 层的这个andme dao 他导出了一个什么方法 是不是叫做logging dao

35:49.770 --> 35:51.290
对不对 把他引入进来

35:52.250 --> 35:58.730
啊 引入进来之后 然后接下来这边就是调用这个logging dao 把这个logging infer

35:59.710 --> 36:05.430
就传进去啊 对不对 好传进去之后 然后叫我们这边保存一下 我们来看一下

36:07.070 --> 36:10.550
保存 哎 这边爆错了 我看一下爆什么错

36:13.900 --> 36:19.660
user password no 这边那应该是

36:20.940 --> 36:25.780
有一个一步的错误啊 我这边我检查一下啊 我看一下这边怎么回事

36:26.720 --> 36:32.800
啊 这里的话logging infer 那把这logging infer传给logging dao

36:33.640 --> 36:38.240
logging dao 哦 这里 这里啊 保存

36:40.880 --> 36:42.000
啊 这里真的是爆错

36:44.000 --> 36:51.070
assist stony error 那么数据库的话它是连上了的呀

36:52.070 --> 36:53.710
刚才到这一步是不是都是ok的

36:54.690 --> 36:56.290
这边sorry是把它倒

36:57.490 --> 37:02.490
把它这个导出出去 好 这边我再来看一下啊 这边我们先不导入这个

37:03.690 --> 37:07.290
好 我们这边的话 打印一下logging

37:08.810 --> 37:15.630
logging infer 啊 这边都是ok的 是吧 好 这边发送

37:17.230 --> 37:18.790
发送之后 然后这里

37:20.150 --> 37:23.670
答应出来了 对吧 好 答应出来之后 然后接下来的话 这里

37:23.970 --> 37:30.170
这里有啥问题呢 这边我引入end of 命导 然后接下来这边的话 他有一个

37:32.130 --> 37:34.450
有一个logging dao啊

37:35.570 --> 37:42.190
然后这边的话 我把它传过去

37:43.670 --> 37:48.030
传过去之后 然后这边的话 打印一下

37:49.790 --> 37:54.800
这里能有什么问题呢 这里能有什么问题呢

37:55.660 --> 38:00.740
我这边我等待一下呢 他是一个异部的韩束 我等待一下 保存

38:03.500 --> 38:04.580
好 我看一下我看一下

38:05.940 --> 38:12.580
好 我刚才调试了一下啊 这边的话 这个东西没有用的 没有用的 把它住 把它那个注射掉

38:12.900 --> 38:17.540
注射掉之后 然后接下来这边保存啊 这边的话就ok了 可不可以啊 启动起来了

38:18.060 --> 38:20.100
好 启动起来之后 然后这样 我这边我们来看一下

38:20.700 --> 38:24.020
这边是不是调用这个logging dao 调用logging dao

38:24.920 --> 38:26.760
调用这一块 调用这一块的话

38:27.920 --> 38:33.000
是不是就在这里导致的方法 对不对 也就是我们数据一层一层传 最终的话传到这个dao这一层

38:33.520 --> 38:37.400
ok 好 那我们这边让我们来打印一下 来打印一下 我们来看一下

38:39.320 --> 38:44.960
好 然后这里的话发送 发送之后 然后接下这边 是不是拿到了

38:46.240 --> 38:50.360
对不对 拿到了 好 拿到之后的话 然后接下来下一步

38:51.260 --> 39:01.540
啊 这里 接下来就需要干嘛 是不是连接数据库进行一个查学

39:02.780 --> 39:07.460
对不对啊 所以也就是我们所有和数据库相关的操作都是放在这一层的

39:07.940 --> 39:12.220
啊 我不知道大家现在晕不晕啊 我不知道你晕不晕啊 我们这边其实就三层嘛

39:12.940 --> 39:16.980
对不对 一共就三层嘛 这边最早的话 这边这个入词下面的这个andme

39:17.440 --> 39:23.840
这边是不是接受到你的请求 包括你请求的数据我这边是什么拿到 拿到了我传给谁 是传给这个service啊

39:24.480 --> 39:27.640
是不是传给这个logging service啊 logging service 这边

39:28.640 --> 39:32.720
这边是从哪导出的方法 是不是从service这一层导出了一个方法

39:33.360 --> 39:38.440
啊 这一层的话就是做什么呢 这一层就是做你的这个业务逻辑 但我们现在没有什么业务逻辑

39:39.120 --> 39:42.640
对不对 所以我们这一层的话就很简单的 这一层就把那个密码

39:43.120 --> 39:46.760
加个密啊 因为数据库里面是md5加了密的 加个密

39:47.040 --> 39:53.520
那继续把数据是不是往下传 传给dao的一层 对不对 然后加这边dao 我们刚看到是不是已经拿到了

39:54.320 --> 39:58.800
对吧 好 拿到之后 然后接下来我们这边呢 就可以直接andme model

40:00.560 --> 40:04.560
啊 这会儿的话就 这会儿他应该就不会爆出了 因为刚才没有用到啊

40:05.040 --> 40:09.160
andme model 然后接下来这边的话fender 他是不是有一个这个fender one

40:10.680 --> 40:14.000
对吧 掉这个方法啊 这个方法 然后接下来就ware

40:14.900 --> 40:18.740
ware 什么呢 ware你的这个login id

40:21.200 --> 40:27.560
login id啊 是你什么呢 是你传过来的login infer.login id

40:28.120 --> 40:34.600
并且啊 他是并且的关系 并且你的这个login什么呢 login pwd

40:35.360 --> 40:41.240
他是你传过来的login infer.login pwd

40:42.220 --> 40:48.580
对不对 我要寻找 我在你的那个数据库里面找一条数据 这个数据的话login id 必须是我传过来的

40:49.020 --> 40:55.380
这个id 并且这个密码是传过来这个密码 ok 好 它是这个数据库的操作 它肯定是一步的

40:55.700 --> 41:00.460
所以我们这边等待一下 啊 等待一下 所以这边写的sync 好 那接下来我们这边呢 就是

41:01.980 --> 41:06.820
const一个result 那接下来我们这边打印一下这个result

41:07.320 --> 41:10.680
对吧 打一下result 保存

41:11.960 --> 41:13.680
好 哎 早又播错了

41:15.280 --> 41:20.240
嗯 又爆错了的话 我看一下啊

41:21.120 --> 41:25.760
and me model 那这边是我and me model 写的有问题吗

41:27.080 --> 41:27.600
我看一下

41:28.720 --> 41:31.520
and me model 是不是and me model 写的有问题

41:33.910 --> 41:37.350
好 我刚才的话调试了一下啊 是这个位置

41:38.090 --> 41:43.490
这个位置的话 我们在这个引入路由的时候刚才的话我是放在这个放在这前面的

41:45.050 --> 41:50.250
看到没有 放在这个就是我们读取这个数据库连接的这个前面的啊 所以它这边就爆出了

41:50.970 --> 41:58.290
你看这边 看到没有 所以就爆了啊 刚才那个错啊 对不对 xs 灯这个灯里的 拒绝了

41:58.610 --> 42:00.530
啊 这边注意啊 这里有这么一个坑

42:01.250 --> 42:06.210
把这个的话放到这里后面啊 放到这个就是先先做数据库的连接

42:06.550 --> 42:08.190
连接了之后 后面再引入路由

42:08.790 --> 42:12.910
ok 保存 保存之后这边是不 ok 了啊 注意啊 注意

42:13.510 --> 42:21.310
好 然后接下来的话 我们回到这边回到这边啊 这边呢 现在就没问题了 我们把这边打开 打开之后让我们保存一下

42:22.830 --> 42:27.830
是不 ok 的 ok 之后让他叫我们这边来发一个这个请求啊 升的

42:28.430 --> 42:31.990
升的之后让他家过来看一下 你看 这边是不是一个空

42:32.710 --> 42:34.870
空的话说明什么 说明是没有这条数据

42:35.850 --> 42:42.850
对不对 我看我们这边发的是什么 我们这边发的是吧 呃 拥护明是n的命 然后密码是不是123123

42:43.410 --> 42:45.690
好 把这个改一下 改成123456

42:46.770 --> 42:53.050
啊 把这个取消一下 重新发送 重新发送 好 然后现在这边 哎 你看 这里是不是就有了

42:53.810 --> 42:58.330
刚才的话是空 现在的话就干嘛呀 现在的话是不是就有了

42:59.130 --> 43:02.730
对不对啊 你这个账号密码是对的 他就找到了这条数据

43:03.470 --> 43:11.550
ok 好 说说我们接下来的话 我们只需要干嘛呢 我们只需要把这个 我们给他返回出去 这边的话return

43:12.390 --> 43:15.590
让他返回 返回的话 这个数据就会到达哪一层

43:16.270 --> 43:22.550
是不是到达你调用这个方法的地方 哪个地方在调药 是不是 这边你的这个业务逻辑是在调药

43:23.310 --> 43:28.630
对不对 好 这边他是一个一步方法 所以我们这边仍然是等待 等待之后 然后接下来哈 我们这边

43:28.970 --> 43:30.610
ok 我们

43:31.290 --> 43:38.690
let一个data等于一个这个 好 然后接下来的话 这边就要根据这个data来进行一个这个判断

43:39.490 --> 43:39.770
if

43:41.050 --> 43:46.850
if什么呢 如果你有这个data啊 并且的话你有这个data value

43:48.690 --> 43:51.570
啊 因为你看这边返回的数据是不是这个data value 是

43:53.750 --> 43:57.350
对不对 如果有值 那有值的话呢 我们这边就该干嘛

43:58.050 --> 44:00.610
这里的话 我们是不是就是应该设啊 你看这里

44:02.010 --> 44:10.010
看我们的这个文档啊 如果登录成功 我们现在就登录成功了嘛 对吧 帐号密码都对了 人家可以登录呗

44:10.490 --> 44:16.490
好 那接下来我们就需要再 就服务器就需要再想一头添加干嘛呀 是不添加一个token啊

44:17.610 --> 44:25.810
对不对啊 那我们这边的话就会涉及到什么呢 涉及到这个添加token的这个问题啊 所以这里的话就需要添加token

44:27.850 --> 44:34.650
添加token ok 好 添加token之后 然后完成之后 然后再把什么呢 再把这个data

44:35.250 --> 44:36.370
返回出去

44:37.290 --> 44:39.130
啊 再把这个data 这边的话就是return

44:40.970 --> 44:42.610
return 啊 返回一个对象

44:47.790 --> 44:53.630
怎么样 那这里的话就会涉及到一种情况 有可能这个data 返回回来是什么 是不是空

44:54.470 --> 44:58.910
是空的话 然后接下来像上一层 返回的就是什么样的对象 是不是这样子的对象

44:59.390 --> 44:59.790
data

45:00.550 --> 45:00.750
空

45:01.790 --> 45:06.870
是不是应该是这样子的 对不对 好那接下来还有种情况是什么呢 还有种情况是有东西

45:07.550 --> 45:10.790
有东西 有东西的话 我们这边呢 我们要进行一个处理

45:11.510 --> 45:14.430
啊 我们进行处理 我们要干嘛呢 我们要添加这个token

45:15.150 --> 45:18.590
啊 添加token 添加token之后 然后接下来再返回

45:19.630 --> 45:26.830
ok 返回之后啊 最后的话就返回到哪里呢 返回到你的这个and the main这边啊 这边的话就应该也是一个异步的

45:27.790 --> 45:29.390
sync 然后叫这边的话

45:30.330 --> 45:30.650
await

45:31.610 --> 45:37.850
我等待这个结果 然后这边const 一个result 等于 好的 这样我们这边来我们扛售一下

45:38.370 --> 45:39.730
console.log

45:40.730 --> 45:41.210
result

45:45.200 --> 45:45.640
result

45:46.840 --> 45:49.000
ok 好了 接下来我们这边的话

45:50.440 --> 45:54.280
这里的话 我们先不做处理吧 我们先看一下整个流程跑的通报 全部保存

45:57.110 --> 46:01.790
好 保存之后 然后接下来我们这边 我们发一个不存在的密码 123 123

46:02.410 --> 46:07.490
send 升的之后 然后接下来你看这边 without 这不得到的就是这这么一个对象

46:08.650 --> 46:10.610
对不对 好了 如果有的话

46:12.050 --> 46:17.670
这边123456 走 然后接下来这里

46:19.030 --> 46:23.590
啊 这里又爆错了啊 这边爆的是data values is not

46:24.430 --> 46:26.510
defend 哦 这里应该是data

46:27.470 --> 46:29.430
data.data values

46:30.190 --> 46:32.870
对不对啊 我们这边再来发送 send

46:34.390 --> 46:42.310
啊 你看 这边的话拿到的是不是就是这样子的对象 对不对 data 然后接下来这边的话是这样子的对象啊 当我们这里的话就是关于token 这一点

46:42.750 --> 46:43.710
我们还要再做处理

46:44.590 --> 46:51.950
ok 还要再做处理 我们这一节课的话就是什么呢 这一节课的话我们就是把我们的这个andme 首先的话我们创建了这个模型

46:53.150 --> 46:58.350
对不对 andme 这个模型先创建 创建了之后 然后接下来的话 我们在这个

46:58.990 --> 47:01.750
db 里面是做了初始化的操作

47:02.730 --> 47:07.890
对吧 做了初始化操作之后 然后接下来我们的这个三层架构 啊 从这个andme

47:08.490 --> 47:18.570
开始啊 一层一层的调服务层的方法 然后来到这个服务层啊 就那个业务逻辑层 业务逻辑层啊 家又调什么啊 就调这个数据层的这个方法

47:19.130 --> 47:24.130
对不对 调这边数据层的方法 数据层的方法 然后接下来的话 这边干嘛呢 这边的话

47:25.110 --> 47:35.790
是不是和数据屋打交道 对不对 来进行查询 查询完了之后又干嘛呢 是不是又一层一层的 返还回去啊 对不对 返还到这里 这里的话 然后我们下几课的话 我们还要做处理

47:36.430 --> 47:40.470
啊 还要做处理 处理完了之后又把这个结果干嘛 是返回到这边来

47:41.510 --> 47:47.710
对不对 ok 啊 大家现在的话就是先把这个三层架构 把它写 把它写一下

47:48.310 --> 47:53.070
啊 把这个三层架构 你一个写通了之后 你后面的话 就都是一样的了

47:54.150 --> 48:00.350
知道吧 就都是一样的啊 所以你把这个三层架构 你好好看一下 它其实不难 它就是调下一层的方法而已

48:01.390 --> 48:03.150
看了没有 这边你看这边这个

48:04.110 --> 48:10.270
表现成 你看是不是就是调这个业务 业务逻辑层的一个方法 这边是不是从这个enemy service 是不是导出了一个方法

48:10.830 --> 48:14.150
或者导出一个函数 然后把这边必要的数据是不是给你传过来

48:14.710 --> 48:17.550
传过来之后 然后这样我就在这个函数里面做我的业务处理

48:18.070 --> 48:22.790
啊 那如果涉及到数据库查询 我就干嘛呢 我就又调这个数据层的方法

48:23.610 --> 48:30.290
看了没有 又调数据层的这个login dao这个方法 进行查询 查询了你给我返回一个查询结果就可以了

48:30.930 --> 48:33.490
啊 我们这一层的话 不需要做任何的处理

48:34.010 --> 48:39.210
这一层就负责和数据库打交道 查询删除更新 就做这些操作

48:39.890 --> 48:44.090
操作完了之后 让你返回一个结果给谁呢 给这个service这一层

48:45.010 --> 48:51.090
明白吧 具体的这个业务逻辑是在这个service这一层 所以你看到这边我们一会儿要添加这个token

48:51.550 --> 48:53.670
token完了就在这一层添加

48:54.590 --> 49:02.070
明白没有啊 下来的话把这个生争价格再写一写吧 好吧 好 这些课就先到这里啊 再见

