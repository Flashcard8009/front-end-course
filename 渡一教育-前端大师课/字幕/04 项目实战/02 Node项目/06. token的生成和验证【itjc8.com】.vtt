WEBVTT

00:01.010 --> 00:07.150
这节课的话我们来继续来做我们的个人博客的服务期段

00:07.410 --> 00:09.210
我们上节课的话写到哪里了

00:09.710 --> 00:12.010
上节课的话我们把管理员这个模块

00:12.270 --> 00:14.070
我们把三层的价值

00:14.570 --> 00:15.610
是把它打通了

00:16.370 --> 00:19.190
我们这边我们再来回忆一下

00:19.450 --> 00:20.730
首先我们的三层

00:20.990 --> 00:23.530
第一层是表现层 表现层是入词

00:23.790 --> 00:25.850
入词对应的话我们这边有个end命

00:26.110 --> 00:27.630
那你前台

00:28.390 --> 00:31.210
就前台的话你那边的话如果是请求过来的话

00:31.470 --> 00:34.030
比如我们这边我们这边poster man我们是发了请求的

00:34.290 --> 00:36.090
对吧 我们这边的3001

00:36.330 --> 00:37.350
对我们端的口号

00:37.610 --> 00:39.410
然后API and命logging

00:40.430 --> 00:42.470
API and命对应的是哪里呢

00:42.730 --> 00:44.010
对应的是我们这边APP

00:44.270 --> 00:45.810
我们这边引入这个路由

00:46.070 --> 00:48.610
引入路由之后然后接下来的话这边设置了是吧

00:48.870 --> 00:50.670
And这个API and命

00:51.690 --> 00:53.490
对不对 这个的话是我们的一级路由

00:53.750 --> 00:56.310
一级路由然后接下来这边 这边的话这个logging

00:56.770 --> 00:58.310
是我们的二级路由

00:59.070 --> 01:02.150
然后它整个就构成这个API and命logging

01:02.670 --> 01:04.710
对不对 你发请求的话就会到这里

01:04.970 --> 01:07.010
到这里的话这里是我们的表现层

01:07.270 --> 01:09.310
表现层的话 这样我们调服务层的方法

01:09.830 --> 01:10.850
logging service

01:11.370 --> 01:14.170
把这个req就请求的这个body部分

01:14.430 --> 01:15.210
把它传过去

01:15.710 --> 01:18.530
好 再加这边logging service在这里

01:19.550 --> 01:20.070
在这里

01:20.330 --> 01:22.130
好 这里的话是否接受到

01:22.630 --> 01:24.930
你那个表现层传递过来的数据

01:25.290 --> 01:26.630
对不对 让我们对这个密码

01:26.890 --> 01:27.690
进行那个加密

01:28.210 --> 01:32.310
加密了之后 然后接下来我们看它的这个账号密码对不对

01:32.570 --> 01:34.610
所以我们又把这个信息传给了什么呢

01:34.870 --> 01:36.150
传给了这个

01:36.410 --> 01:37.170
19层

01:37.930 --> 01:39.210
也就是我们的这个数据

01:39.470 --> 01:41.010
做这个数据处理的这一层

01:41.530 --> 01:43.570
这一层的话 这边有一个这个

01:44.090 --> 01:44.590
logging

01:45.110 --> 01:45.630
dao

01:46.130 --> 01:46.890
是不传到这里

01:47.150 --> 01:49.710
传到这里 然后这一层主要就是负责什么

01:49.970 --> 01:52.010
这一层的话主要就是负责

01:52.270 --> 01:53.550
是不是和数据库打交道

01:54.330 --> 01:54.830
对吧

01:54.930 --> 01:57.230
数据库的这个查询啊

01:57.490 --> 01:59.290
更新啊修改啊这些

01:59.790 --> 02:01.070
都是这一层在做处理

02:01.330 --> 02:03.370
这一层的话 让我们这边的话就

02:03.630 --> 02:05.430
把这个拿到的这个

02:06.190 --> 02:06.950
logging id

02:07.470 --> 02:09.530
还有就是这个pw密码

02:11.310 --> 02:13.110
密码的话 你注意我们是加了密的

02:13.370 --> 02:14.910
我们在这个服务层这边

02:15.410 --> 02:18.230
服务层这边我们是不是做了一个这个md5加密的

02:18.730 --> 02:21.290
因为我们数据库的话 存是不是就是存的是加密的

02:22.330 --> 02:22.830
对吧

02:23.550 --> 02:27.390
好 然后接下来在这一层 这一层的话就是很简单的一个找

02:27.650 --> 02:29.430
查找 看找不找得到

02:29.690 --> 02:31.750
如果没找到的话 他就是一个空

02:32.510 --> 02:35.070
找到的话 他就会给你返回这个具体的信息

02:35.330 --> 02:36.090
你放我们这边

02:37.370 --> 02:37.890
是这样子的

02:38.650 --> 02:40.190
对吧 那你如果没有

02:40.450 --> 02:41.470
就是你账号密码不对

02:41.730 --> 02:43.010
比如说我们这边的话

02:43.770 --> 02:45.570
密码输个123123

02:46.330 --> 02:48.130
把这个取消了 然后重新发送

02:49.150 --> 02:50.430
然后就要看一下这边

02:51.410 --> 02:52.930
这边的话是不是就是一个空

02:54.210 --> 02:55.250
对吧 就是个空

02:55.510 --> 02:58.050
所以这个的话就是我们上节课讲的内容

02:58.310 --> 02:59.570
这个一定要过

03:00.110 --> 03:02.670
我上节课我就说过 你这个的话只要

03:02.930 --> 03:03.950
把这个

03:04.210 --> 03:07.010
一个过了 你后面的话就都是一样的了

03:07.270 --> 03:10.350
你后面写这个其他模块 无论是那个什么banner

03:10.610 --> 03:13.170
还是文章 还是什么留言 还是项目

03:13.430 --> 03:14.710
我们有那么多个模块

03:15.990 --> 03:18.550
那你一个过了的话 那你这个后面的模块

03:18.810 --> 03:20.090
他就都是一样的了

03:20.450 --> 03:22.550
那你基本就是一葫芦花飘

03:22.810 --> 03:23.710
照着写就可以了

03:24.470 --> 03:24.990
明白吧

03:26.270 --> 03:27.550
好 让我们说一下这几个

03:27.810 --> 03:30.830
这几个我们干嘛呢 这几个的话我们把那个做了

03:31.910 --> 03:33.430
把那个我们看这里

03:34.710 --> 03:35.750
看这个接口文党

03:36.250 --> 03:38.550
接口文党的话 这边比如说我们登录

03:38.810 --> 03:41.370
登录的话 现在账号密码假设他输对了

03:41.630 --> 03:43.170
输对了的话 你看这里

03:43.670 --> 03:45.210
登录成功后

03:45.470 --> 03:48.550
服务器会在响应头添加什么

03:48.830 --> 03:50.550
会添加这个token

03:51.570 --> 03:54.690
对不对 所以我们现在的话有一个很重要的工作就是什么

03:54.950 --> 03:59.310
有一个很重要的工作就是必须要生成这个token

04:00.070 --> 04:01.350
需要生成这个token

04:01.610 --> 04:02.890
好 让我们这边的话

04:03.650 --> 04:04.930
回到我们的代码

04:05.190 --> 04:05.950
把这个停掉

04:06.470 --> 04:10.310
我们这边的话要生成token的话 我们这边需要安装一个这个包

04:12.760 --> 04:16.340
这个包的名字 这边装一下npmni

04:16.600 --> 04:19.680
他的包的名字叫做这个接声webotoken

04:20.700 --> 04:22.240
webotoken

04:22.500 --> 04:23.260
就这个包

04:23.520 --> 04:26.840
这个包的话就是专门负责生成我们的这个token的

04:27.100 --> 04:28.640
ok 现在已经装好了

04:28.900 --> 04:30.420
装好了之后 我把我的这个

04:30.940 --> 04:32.740
服务器重新启动一下

04:33.000 --> 04:36.580
好 然后接下来我们要生成token 生成token的话应该是在哪一参

04:37.340 --> 04:39.900
他是不是和我们的业务逻辑是强相关的

04:40.660 --> 04:43.500
对不对 说我们这边的话应该来到我们的这个业务逻辑

04:43.760 --> 04:46.300
业务逻辑这边 这边其实我们写的有注射

04:47.060 --> 04:49.380
看到没有 写的有注射 这个就删了

04:50.040 --> 04:52.920
这就不要了 好 那我们这边的话就来引入一下

04:53.440 --> 04:55.220
好 这边的话就是Const

04:55.740 --> 04:59.580
Const一个jwt 等于一个require

05:01.910 --> 05:04.470
好 这里就是接声webotoken

05:05.490 --> 05:06.250
把他引进来

05:06.770 --> 05:08.810
好 引进来了之后 然后接下来到这里

05:09.070 --> 05:11.890
这里的话是不是应该是添加这个token

05:12.650 --> 05:15.730
对不对 好 那我们这边把这里的代码 我们来写一下

05:16.730 --> 05:21.370
好 这里 这里的话我们首先让data等于一个

05:21.870 --> 05:25.210
这个data.dataValues

05:26.990 --> 05:29.050
dataValues

05:31.350 --> 05:34.670
这个什么意思 就是我们这边刚刚我们也看到那个数据返回的了

05:35.430 --> 05:36.470
这边再给大家看一下吧

05:37.750 --> 05:40.050
把这个先注射掉 再给大家看一下

05:41.590 --> 05:43.130
这边的话我们比如说重新发送

05:43.890 --> 05:45.430
这边123456

05:45.930 --> 05:47.990
这个密码是对的 我们这边剩的

05:48.250 --> 05:51.310
剩的之后 然后接下来的话来到我们

05:51.570 --> 05:53.370
这边 好 你看他这边的话

05:56.430 --> 05:59.510
这里打印的是 我看一下

06:00.790 --> 06:01.550
重新发送一下

06:03.350 --> 06:04.110
剩着

06:05.650 --> 06:06.670
然后

06:07.430 --> 06:12.050
这边 可以了 你看这边 这边的话你看他这边data是一个对象

06:12.310 --> 06:15.130
data里面有一个什么 这里有个dataValues

06:16.190 --> 06:20.550
对不对 dataValues 这里的话是不是才是我们这个登录上去的

06:21.570 --> 06:22.850
这个用户的这个新鲜

06:23.110 --> 06:24.650
对不对 这个用户的ID

06:24.910 --> 06:28.730
然后他的loggingID 最下这个ID是那个数据库里面的ID

06:29.770 --> 06:32.010
这个loggingID的话就是那个他自己

06:32.270 --> 06:33.850
注册的时候的那个ID

06:34.370 --> 06:35.390
以及他的内幕

06:35.650 --> 06:36.430
还有他这个

06:36.690 --> 06:37.390
他的密码

06:37.650 --> 06:39.490
但这个密码是什么 是不是加了密的

06:40.010 --> 06:43.590
对不对 所以说我这边的话我这行代码data等于一个data.

06:44.310 --> 06:45.850
这个dataValues

06:46.110 --> 06:49.690
那这里的话相当于就是把这个对象付给了谁 付给了data

06:51.470 --> 06:54.290
好 然后接下来我们下面的话就要开始来生成这个

06:54.550 --> 06:55.070
token了

06:55.330 --> 06:58.130
生成token的话让我们首先的话这边有一个东西

06:59.410 --> 06:59.930
就这里

07:00.690 --> 07:01.970
就我们来看一下哈登录

07:02.230 --> 07:04.530
登录的话他有一个什么呢

07:04.790 --> 07:06.850
有一个这个叫做remember

07:07.610 --> 07:10.170
看到没有 有个remember 我看到写没写的有

07:10.630 --> 07:11.910
有 这里有

07:12.170 --> 07:14.990
就是你请求题里面如果不包含

07:15.250 --> 07:16.010
remember

07:16.270 --> 07:18.830
那他的过期时间是什么呢 是一天

07:19.590 --> 07:21.130
如果包含remember

07:21.650 --> 07:23.950
那就是按照这个remember的这个值

07:24.470 --> 07:25.490
来这个

07:25.750 --> 07:28.290
设置这个过期的这个时间的这个天数

07:28.550 --> 07:33.410
所以我们这边的话就应该干嘛呢 我们这边的话就应该根据这个remember

07:33.930 --> 07:36.490
你看我们这边在发送的时候我们的这个

07:36.750 --> 07:38.290
请求题里面是不是有这个remember

07:39.050 --> 07:39.550
对不对

07:39.850 --> 07:41.810
好 说说我们这边的话就应该是这个样子

07:43.330 --> 07:46.670
回到我们这边 我们这边的话就是应该是看这个logging

07:48.470 --> 07:49.590
logginginfer

07:50.010 --> 07:51.270
点这个remember

07:52.310 --> 07:53.070
re

07:55.110 --> 07:57.670
embrremember

07:57.930 --> 08:00.750
看这个值是否存在啊 那我们这边呢就是if

08:02.030 --> 08:03.310
对吧 看它是否存在

08:03.570 --> 08:06.390
如果存在的话 我们这边的话我们来

08:06.890 --> 08:07.790
挖一个什么呢

08:08.010 --> 08:10.050
挖一个这个logging

08:10.310 --> 08:11.330
然后这个

08:13.370 --> 08:13.890
parade

08:14.650 --> 08:17.730
啊 这个他的这个期间啊 就他的这个时长

08:17.990 --> 08:20.530
好 这边呢一开始到先给个这个空

08:20.790 --> 08:25.410
给个空之后呢 这样如果有这个值 那我们这边呢就是给他复制为

08:26.690 --> 08:30.530
复制为你的这个logginginferremember

08:30.790 --> 08:33.590
啊 你这边把它转一下啊 他可能是一个

08:33.850 --> 08:34.610
支付串

08:34.870 --> 08:36.670
我们这边把它转一下 把它转成数字

08:37.530 --> 08:41.130
ok 否则的话 那他就应该是等于多少

08:42.770 --> 08:44.410
这个logging

08:44.670 --> 08:45.590
这个parade

08:46.350 --> 08:48.350
他应该等于多少 这不应该等于一

08:49.010 --> 08:51.730
对不对 就一天嘛啊 这边我写下注写哈

08:51.990 --> 08:52.830
如果

08:55.140 --> 09:01.040
如果用户勾选了这个登录期限

09:01.940 --> 09:03.340
登录期限

09:03.860 --> 09:05.900
那么remember

09:06.900 --> 09:09.940
里面是有值的

09:10.720 --> 09:11.740
有值的

09:12.000 --> 09:12.760
将

09:13.020 --> 09:14.560
这个值

09:14.820 --> 09:16.100
复制给

09:16.860 --> 09:18.900
复制给这个parade

09:20.700 --> 09:22.500
对吧 啊否则的话

09:23.260 --> 09:25.060
否则的话

09:25.300 --> 09:26.340
默认

09:27.620 --> 09:29.660
默认时长

09:30.940 --> 09:33.500
时长 为什么呢 为一天

09:34.480 --> 09:39.260
对吧 先把这个确定了 确定了之后 再加下一步 下一步的话就应该是

09:39.500 --> 09:40.620
生成这个token

09:40.880 --> 09:44.170
生成token

09:44.430 --> 09:46.770
那生成token的话 让我们这边就

09:47.770 --> 09:49.050
cance了一个token

09:49.290 --> 09:51.610
他等于什么呢 我们使用这个包

09:52.130 --> 09:53.650
jwt这个包

09:54.690 --> 09:57.690
他提供了一个什么呢 提供了一个sign

09:59.210 --> 10:02.610
怎么样 好 再加里面的话 传入一个对象

10:03.330 --> 10:07.690
这个对象里面的话就是 你要生成token token里面是包含了一段信息

10:08.970 --> 10:13.570
对不对 你这个你如果不知道的话 你把袁老师讲的那个jwt 你看一下

10:13.830 --> 10:18.690
他token里面是包含了信息的 只不过我对这个信息进行一个加密

10:18.950 --> 10:21.510
所以这边呢 你就是可以有哪些信息

10:21.770 --> 10:24.590
那我这边有哪些信息呢 我这边就是把id

10:25.350 --> 10:31.750
id的话就等于个这个data.id 因为我们刚才的话已经把这个data.data values复制给data了

10:32.130 --> 10:36.030
对吧 我们把这个id 然后还有什么呢 还有比如说这个loginid

10:38.190 --> 10:44.390
loginid 我还想有这个信息 这个的话也等于这个data.loginid

10:45.030 --> 10:51.630
还有什么呢 还有有的同学说还有密码 密码这个一般我们就不返回那个不返回给这个客户端了

10:51.950 --> 10:54.190
我们这边就还有这个名字name

10:55.190 --> 10:59.350
Name 内幕的话 这边就是data.name

11:00.190 --> 11:09.990
ok 首先的话 这边的第一个参数就搞定了 第一个参数呢 就是你想对哪些信息进行加密 加密之后它是会返回给这个客户端的

11:11.150 --> 11:13.390
好 大家第二个 第二个的话就是这个密码

11:14.230 --> 11:19.470
他得有个密码 对不对 那有个密码的话 那我们这边的话就在这个我们的这个

11:20.110 --> 11:24.670
环境辨量里面 拿到我们的环境辨量 对我环境辨量这边还看不到是吧

11:25.590 --> 11:27.390
啊 这边的话 我还得

11:28.390 --> 11:28.910
还得怎么办

11:30.190 --> 11:32.670
这边还得把隐藏文件打开 我看一下

11:36.620 --> 11:38.540
啊 稍等啊 我把隐藏文件打开

11:39.580 --> 11:41.460
这边还得通过隐藏文件的形式

11:44.000 --> 11:47.200
ok 是不是有了 对不对 好 大家把它拿过来

11:49.560 --> 11:53.800
啊 这边 这个是我们之前设置的这个环境辨量 好 那就让我们这边加一个

11:54.440 --> 11:57.720
加一个什么呢 加一个j wt 然后segrate

11:58.760 --> 12:03.880
s e 然后c r e t segret 就等于什么呢 等于比如说对一

12:04.920 --> 12:09.640
ok 好 那既然回到我们这边 那我们这边的话 然后就是要把这个

12:10.520 --> 12:16.200
密码放上去 那放上去的话 我们这边还是用这个md5 把它加下密 所以我们这边把这个md5

12:16.760 --> 12:22.600
我们也把它引入一下 好 这边的话 md5等于一个require

12:23.000 --> 12:29.720
然后md5 好 那接下来这里 这里的话就md5

12:31.160 --> 12:35.800
然后这边那就是process 点这个env

12:37.240 --> 12:42.360
env 点这个j wt 对吧j wt 然后segrate

12:45.630 --> 12:52.910
啊 这是对它进行一个加密 啊 最后一个 最后一个参数是什么呢 那就是你的这个时长了啊 这边呢是这个

12:53.390 --> 13:00.510
experient 好 大家这里面 这里面就是你的时长 那我们这边啊 首先的话60秒

13:01.310 --> 13:04.110
60秒 然后接下来再成一个60

13:07.050 --> 13:13.290
啊 这里就是多少 你60秒60秒就是一分钟 一分钟成一个60 就是60分钟 60分钟就是一个小时

13:13.690 --> 13:17.770
对吧 这边就是一个小时 一个小时 然后一天24个小时

13:18.410 --> 13:24.330
那你这边是不是就是一天 对不对 大家究竟多少天 究竟多少天取决于什么 取决于你这个

13:25.210 --> 13:27.690
login parade 是取决于他

13:28.890 --> 13:35.530
对不对 ok 那我们整个这个token 我们就生成好了 好了 我们这边把这个token 我把它打印出来 我们看一下

13:36.250 --> 13:38.490
好吧 我们这边啊log

13:39.370 --> 13:45.980
这边的话 token token 好 然后加这边的话全部保存

13:47.820 --> 13:49.740
全部保存啊 保存了 哎

13:50.300 --> 13:53.980
抱錯了 这边的话 md 5 has already

13:54.700 --> 13:57.420
啊 已经已经 意思吧 啊 保存

13:59.100 --> 14:02.220
ok 可以啊 搞定之后 然后将我们这边再来

14:03.260 --> 14:07.660
走 好 大家回到我们这边 你看一下是不是就生成了

14:08.620 --> 14:12.460
对不对 你看这边这个token啊 简简 等等的就生成了

14:12.940 --> 14:18.220
好 生成之后 然后接下来我们这边干吗呢 接下来话我们这边就返回啊 仍然是返回

14:18.220 --> 14:20.220
回 啊 这边呢就return

14:22.440 --> 14:28.280
return 两个东西 一个是你的token 一个是什么呢 一个是你的data

14:29.720 --> 14:30.880
对吧 一个是你的data

14:31.760 --> 14:38.200
ok 那我们整个这个服务层这边 就搞定了 好 搞定了之后 然后接下来回到我们这边路由这边

14:39.680 --> 14:46.920
路由这边的话 我们这边是不是做的是打印 那这边的话 也就没有必要做打印了 这边就干嘛 是不是也是return

14:47.880 --> 14:55.080
对不对 哦 等一下 这里不应该是return了 这里就应该是什么 这里就应该是调这个res点剩的方法

14:56.000 --> 15:00.320
对吧 但是这边的话 你要判断一下 我们先把这个result 我们先接受到

15:01.000 --> 15:06.440
接受到之后 然后接下来 我们要判断一下一副什么呢 一副这个result

15:07.240 --> 15:13.680
点这个token 因为你这边的话 你这个服务层这边 你这边返回是不是有两种情况

15:14.240 --> 15:20.960
你如果是比较帐号密码输队了 输队他进的是这个衣服 让他给你生成这个token 然后给你返回的是这个对象

15:21.720 --> 15:23.840
对不对 他如果就是没有那个

15:25.000 --> 15:29.880
帐号密码没对 没有对的话 他是不会进上面的衣服的 那就直接是干嘛 是不是这里

15:30.640 --> 15:33.360
这里让他返回的是一个什么 是不是一个data rule

15:34.240 --> 15:39.920
对不对 啊 说你这边需要判断一下 如果他有token 有token的话 让我们这边的话就需要把他

15:40.640 --> 15:43.920
设置向我们的响应头 set header

15:44.880 --> 15:48.880
好 然后这样加上一个字段 这边那就是这个os

15:49.840 --> 15:51.760
os 字段啊 这个头有点长

15:53.360 --> 15:56.000
t 然后 i c t i o 啊

15:56.560 --> 15:58.320
这个 这个怎么度来着

15:59.200 --> 16:04.880
os rate c c c 是吧 好 然后接下来的话 这边把这个result

16:05.680 --> 16:07.920
点这个token 是把他放过去

16:08.160 --> 16:14.160
对不对 OK 好 然后接下来干嘛呢 然后接下来的话res点

16:14.800 --> 16:15.280
剩的

16:16.320 --> 16:21.920
把它返回啊 返回的话 让我们这边的话 我们想要格式化一下我们的这个

16:22.640 --> 16:27.040
响应 把它格式化是什么样子呢 我们想把它格式化成这个样子

16:28.720 --> 16:31.680
好 就是我们这边的想要给客户端返回一个对象

16:32.160 --> 16:34.960
啊 这个对象里面就有什么呢 这里原来就有code

16:35.680 --> 16:42.160
对应的是你的这个code 就你的响应嘛 然后还有什么呢 还有就是你的这边的话 你的一个这个信息

16:42.720 --> 16:46.400
那对应就是比如说登录成功啊 之类 炸起炸发的

16:47.120 --> 16:48.640
比如说登录

16:49.360 --> 16:53.040
成功啊 然后接下来以及什么呢 以及就是如果你有数据

16:54.080 --> 16:57.040
如果你有数据 那这边呢 是不是有相关的这个数据

16:57.680 --> 17:00.880
我们想要把这个就是整个我们的这个响应

17:01.760 --> 17:08.320
格式化成这个样子啊 那有东西说 那你这个就直接写就好了呗 这个有什么难的啊 你这边直接就这样写呗code

17:09.200 --> 17:12.000
啊 这边该是多少就是多少 对吧 那你直接写

17:12.800 --> 17:18.800
然后加message啊 然后data 直接写就可以了 但是你思考一下 我们这边的话 实际上

17:19.600 --> 17:24.400
就是我们回头的话 所有的这个响应 我们是不是都要同意格式化成这个样子

17:25.360 --> 17:31.040
对不对 所以我这边呢 就建议大家干嘛呢 建议大家这边的话 写一个这个工具函数

17:31.600 --> 17:35.760
啊 那回头的话 我只需要调函数 然后加传入必要的这个参数

17:36.160 --> 17:40.160
然后加他就会给我生成一个这种格式的这个响应信息

17:41.200 --> 17:47.200
明白吧啊 说说我们这边的话 我们就在我们的ut下面 我们新增一个文件

17:47.760 --> 17:49.360
这个文件的话就叫做这个

17:50.000 --> 17:50.560
tool

17:51.760 --> 17:52.880
tool.js

17:53.680 --> 17:57.520
啊 好 那我们这边的话就来写啊 这边呢 就是响应

17:59.280 --> 18:03.680
就格式化嘛 格式化要响应

18:04.880 --> 18:09.760
要响应的数据啊 那接下来这边module

18:11.040 --> 18:12.880
module.exports

18:13.440 --> 18:17.040
啊 点这边呢 就叫做format response

18:19.390 --> 18:22.030
response 等于这个方形

18:23.470 --> 18:27.710
好 我们这边呢 要格式化成什么样子啊 我们这边是不是要格式化成这个样子啊

18:28.670 --> 18:30.670
对不对 这边呢 是你的这个code

18:31.470 --> 18:33.230
啊 然后这边呢 是你的这个信息

18:33.870 --> 18:35.310
大家这边呢 是你的这个data

18:35.630 --> 18:37.310
所以我们这边呢 应该接收三个参数

18:37.870 --> 18:40.910
哪三个参数呢 就是这三个参数啊 code

18:41.550 --> 18:42.590
然后信息

18:43.630 --> 18:46.830
信息mxg 以及什么呢 以及data

18:47.390 --> 18:50.030
好 然后接下来 我这边呢 给你返回一个

18:52.060 --> 18:55.900
返回一个code 就是什么呢 就是你传入的code

18:56.700 --> 18:58.380
对吧 好 然后信息

18:59.100 --> 19:01.980
信息的话 就是你传入的这个信息

19:03.660 --> 19:05.020
啊 然后接下来这边data

19:06.060 --> 19:07.820
就是你传入的data

19:08.620 --> 19:11.180
啊 有同学会觉得你这个多此一举

19:11.820 --> 19:17.340
对吧 我直接在这儿写了不就完成了吗 我直接在这儿啊 就在这里啊 直接来写我这个对象

19:18.060 --> 19:18.780
不就完事了吗

19:20.220 --> 19:21.820
啊 就这里啊 直接在这里

19:22.380 --> 19:23.260
有mxg

19:23.820 --> 19:28.940
啊 然后接下来对应的信息 信息是什么 然后再直接写 你干嘛还要搞成这个样子

19:29.660 --> 19:30.380
原因很简单

19:30.860 --> 19:35.420
第一个的话 就是我刚刚给大家说了 我们到时候呢 有很多地方 我们要规范

19:36.780 --> 19:39.340
要规范我们的这个 响应的这个数据

19:39.900 --> 19:40.860
啊 都要是这种形式

19:41.420 --> 19:44.380
都是这种形式啊 接下来后面的话 比如说我们的需求改了

19:44.860 --> 19:48.620
除了有这三个东西啊 我这边呢 还有一个什么的 还要加一个status

19:49.420 --> 19:52.140
status同意加一个 比如说ok

19:53.100 --> 19:57.260
那我到时候我这边把提出来之后 让我是不是只需要在这儿进行添加就可以啊

19:58.220 --> 20:02.940
对不对 那你如果就是没有把它提出来的话 你是不是需要去寻找

20:03.260 --> 20:04.220
你各个文件

20:04.700 --> 20:07.100
返回响应的位置 是不是一个一个去添加呀

20:08.220 --> 20:11.340
对不对啊 所以我们这边呢 其实还是把它封装成一个这个

20:12.140 --> 20:13.660
工具函数 要好一些

20:14.220 --> 20:18.060
啊 好有了这个工具函数之后啊 这边的话 你要把它引一下

20:18.540 --> 20:20.860
啊 这边刚才打到这个code

20:21.420 --> 20:23.260
好 然后接下来你这边你要把它引一下

20:24.540 --> 20:25.340
等于一个

20:26.060 --> 20:26.780
require

20:28.060 --> 20:30.780
这里的话就是utils

20:31.740 --> 20:35.180
下面的tool 是吧 然后有一个什么

20:36.460 --> 20:38.220
我们刚才那个叫什么那个format

20:38.780 --> 20:39.740
format response

20:40.540 --> 20:43.820
ok 好了 接下来这里这里的话是不是应该是调这个方法

20:45.660 --> 20:50.060
对不对 调这个方法 然后往这个方法里面 然后传入这个参数

20:50.620 --> 20:54.220
好了 这里的话 我们这边统一这code code的话 我们这边我们来看一下

20:55.260 --> 20:56.060
过来low it

20:56.860 --> 21:00.380
这边的话 它是要求你成功之后code是多少 是不是0

21:00.940 --> 21:03.340
mysg 是不是就没有 data就是什么

21:03.900 --> 21:06.060
data的话 是不是就是你查询到的那个data

21:07.180 --> 21:09.180
对不对啊 查询到那个data

21:09.900 --> 21:11.100
好 那我们这边的话就

21:12.380 --> 21:16.220
我看一下啊 这边result 我们刚才service

21:20.430 --> 21:22.670
这里的话 我们这个data

21:25.280 --> 21:27.200
但我们这个data是不是多了一项东西啊

21:29.290 --> 21:30.810
data是不是它多了一个

21:31.930 --> 21:33.850
多了一个这个密码

21:34.490 --> 21:36.970
我们这边先看一下 先看一下啊 这边那就是

21:37.530 --> 21:38.410
这里应该是0

21:39.130 --> 21:40.490
啊 然后接下来这边的话是

21:41.290 --> 21:43.130
这个消息 消息了就没有

21:43.290 --> 21:44.890
好 大家这边的就是result

21:46.010 --> 21:48.090
result.data

21:48.810 --> 21:49.930
好 屏幕保存一下

21:52.160 --> 21:54.640
啊 看一下有没有错 没有错

21:54.640 --> 21:57.120
啊 没有错不的话 那现在的话 我们这边发送请求

21:57.120 --> 21:59.360
这里的话就应该会给我们显示东西了

21:59.360 --> 22:00.880
好 我们这边我们来看一下 剩的

22:01.680 --> 22:02.080
诶

22:03.600 --> 22:04.480
这里爆了个错

22:06.320 --> 22:09.200
mysg is not defined

22:10.880 --> 22:11.680
tools里面

22:13.520 --> 22:14.080
啊 这里

22:15.200 --> 22:16.800
mysg 保存

22:17.680 --> 22:18.320
好 再来

22:20.480 --> 22:21.280
再来 走

22:21.920 --> 22:23.680
好 这边你看是不是回来了

22:24.240 --> 22:26.240
对不对 好 我们这边看一下 诶 果然

22:27.040 --> 22:30.640
这里是多了个东西啊 对不对 我们这个的话是不需要的

22:31.360 --> 22:32.800
对不对 这是不需要的

22:32.800 --> 22:35.440
所以这边呢需要在这个服务层这边

22:36.000 --> 22:38.160
这边的话要做出一定的修改

22:38.160 --> 22:39.680
然后把这儿稍微改一下

22:41.200 --> 22:43.200
我们这边的话就让这个data

22:43.520 --> 22:47.040
我们就让它等于一个什么呢 也等于一个新对象

22:47.600 --> 22:49.600
新对象里面有什么呢 有这个

22:50.400 --> 22:50.720
id

22:51.760 --> 22:52.880
啊 有id

22:52.880 --> 22:55.040
然后id对应的是这个

22:55.680 --> 22:57.120
点id

22:57.120 --> 22:59.600
然后有什么呢 有这个logging id

23:01.360 --> 23:02.320
logging id

23:02.320 --> 23:03.760
还有这个name

23:04.880 --> 23:05.120
name

23:05.840 --> 23:06.960
对应了这边 name

23:07.600 --> 23:08.400
那这边的话

23:09.200 --> 23:10.880
logging id

23:10.880 --> 23:11.440
对吧

23:11.600 --> 23:13.920
好 那这边注册的话就可以直接写什么了

23:14.480 --> 23:16.480
是不是可以直接就写data

23:17.120 --> 23:18.240
就直接这样写就可以了

23:19.200 --> 23:21.280
对吧 好 那这边我们保存一下

23:22.160 --> 23:23.920
保存之后 然后这边再来

23:24.960 --> 23:26.320
重新来 这边

23:26.960 --> 23:27.360
发送

23:27.920 --> 23:28.720
诶 是不是可以了

23:29.520 --> 23:29.920
对不对

23:30.320 --> 23:32.240
那我们这个接口就跑通了

23:32.880 --> 23:34.480
看到没有 就跑通了

23:34.480 --> 23:36.880
并且的话 这边我们来看一下它的这个header

23:37.760 --> 23:38.320
这边你看

23:38.880 --> 23:40.080
是不是添加了什么的

23:40.560 --> 23:41.520
是不是给我们这个

23:42.480 --> 23:43.120
响应头

23:43.600 --> 23:45.280
是添加了这个token的

23:46.240 --> 23:46.720
对不对

23:47.120 --> 23:47.920
添加token的

23:49.040 --> 23:50.720
OK 这一块的话就好了

23:51.200 --> 23:53.280
好了之后 然后接下来我们的这个token

23:53.600 --> 23:56.480
token的话 我们不仅仅是这个生成

23:57.360 --> 24:01.440
不仅仅是生成 这个接生微博token它是帮助我们生成这个token的

24:01.440 --> 24:02.480
我们还需要干嘛呀

24:02.880 --> 24:04.720
是不是还需要进行一个验证

24:05.920 --> 24:06.480
对不对

24:06.480 --> 24:09.760
你回忆一下那个袁老师讲的那个jwt的那个课

24:10.560 --> 24:12.240
我们这边的话生成了这个token

24:12.640 --> 24:14.800
生成了这个token 这个token会带给谁

24:15.360 --> 24:16.800
带回到客户端

24:17.120 --> 24:19.200
客户端会在本地是不是保存起来

24:19.840 --> 24:22.560
保存起来的 接下来后面他每一次他会干嘛

24:23.120 --> 24:24.160
他会把这个token

24:24.480 --> 24:25.200
是不是带过来

24:25.840 --> 24:29.120
带过来 然后我们会对他的这个token进行一个验证

24:30.000 --> 24:30.320
对不对

24:30.800 --> 24:31.520
进行一个验证

24:32.000 --> 24:33.920
验证完了之后 然后接下来的话

24:34.400 --> 24:35.440
如果合法

24:35.680 --> 24:37.440
那我们就允许他做后续的操作

24:37.840 --> 24:39.520
如果他的这个token不合法

24:40.000 --> 24:40.960
比如说过期了

24:41.200 --> 24:42.560
最常见的就是过期了

24:42.800 --> 24:43.680
那我们就干嘛呢

24:43.920 --> 24:45.680
我们是不是要求他重新登录

24:46.640 --> 24:47.120
对不对

24:47.440 --> 24:49.680
说这里的话就是一个验证

24:50.000 --> 24:51.040
验证的话这里

24:51.680 --> 24:52.560
该怎么验证

24:52.960 --> 24:55.520
验证的话我们这边需要再装一个包

24:55.920 --> 24:57.440
这个包的话叫做

24:57.920 --> 24:58.720
叫这个名字

25:00.560 --> 25:02.000
好 我把这个先停掉

25:05.340 --> 25:06.860
好 这边叫做

25:07.500 --> 25:09.180
expricejwt

25:10.220 --> 25:12.060
exprice-

25:12.620 --> 25:13.740
jwt

25:14.140 --> 25:15.740
这个包的话就可以

25:16.140 --> 25:18.460
就是对这个传过来的这个token

25:18.700 --> 25:19.980
进行一个验证

25:20.220 --> 25:21.260
这边已经装好了

25:21.500 --> 25:23.820
装好之后 然后来到我们的app.js

25:29.070 --> 25:30.830
好 首先在这边的话 我们先引入

25:31.070 --> 25:31.870
这边

25:32.110 --> 25:33.150
挖一个

25:33.390 --> 25:35.950
这个expricejwt

25:36.190 --> 25:37.730
等于一个

25:37.990 --> 25:38.750
require

25:41.240 --> 25:42.760
这个expricejwt

25:43.000 --> 25:45.320
先把这个包 先把人引进来

25:45.320 --> 25:46.600
这个包是干嘛的呢

25:46.760 --> 25:49.880
这个包的话是专门用来验证

25:50.360 --> 25:51.880
客户端的这个token的

25:52.440 --> 25:55.400
首先我们这边在配置的话 我们应该配置在哪里呢

25:55.640 --> 25:56.920
配置在这个

25:57.160 --> 25:58.280
路由之前

25:58.840 --> 26:01.400
就我们这边的话是我们的这个引入路由

26:01.880 --> 26:02.440
对不对

26:02.920 --> 26:04.440
不是引入路由之这里

26:04.680 --> 26:05.960
这里的话我们这个

26:06.200 --> 26:08.760
上面是引入路由 引入路由加这边是不是使用

26:09.000 --> 26:09.800
路由中间键

26:10.360 --> 26:14.200
对不对 那你这边的话就应该是在使用路由中间键之前

26:14.680 --> 26:16.520
你注意一下这个expricejwt

26:16.680 --> 26:18.440
它对这个中间键的这个顺序

26:18.680 --> 26:20.040
有严格的这个要求的

26:20.520 --> 26:21.720
我们之前是不是就

26:21.960 --> 26:22.520
这边

26:22.760 --> 26:23.640
是不是就写错了

26:24.040 --> 26:24.600
对不对

26:26.360 --> 26:27.560
好 然后加这里

26:27.800 --> 26:29.160
这里的话 我们来配置

26:29.400 --> 26:30.920
这里的话就是验证

26:32.440 --> 26:33.240
配置

26:36.040 --> 26:36.840
配置

26:37.800 --> 26:40.520
配置验证这个token

26:40.920 --> 26:41.400
接口

26:42.200 --> 26:46.280
然后加这边那就是app.use

26:47.560 --> 26:49.080
好 然后接下来里面

26:49.320 --> 26:51.960
里面的话就是expricejwt

26:52.200 --> 26:53.720
它是一个什么的 它是一个方法

26:53.960 --> 26:56.200
然后里面传入一个什么的 传入一个

26:56.440 --> 26:56.920
对象

26:57.560 --> 27:00.360
好 里面 里面首先是一个secret

27:00.920 --> 27:02.040
那就是你的这个密钥

27:02.520 --> 27:04.760
我首先我要检查你的这个

27:05.000 --> 27:05.800
客户端

27:06.360 --> 27:08.120
传过来的这个

27:08.840 --> 27:09.320
token

27:09.560 --> 27:12.200
你的这个密钥和我服务器端的这个密钥

27:12.600 --> 27:13.480
是否对得上

27:13.960 --> 27:16.040
因为你那个在生存的时候

27:16.520 --> 27:17.720
我们回头看一下

27:17.960 --> 27:19.720
你在生存token的时候

27:19.960 --> 27:21.880
我们这边的话是不是给了你一个密钥

27:22.920 --> 27:23.400
对不对

27:23.640 --> 27:25.320
密钥的话 这边是一个这个制服串

27:25.480 --> 27:26.600
然后用这个md5

27:26.840 --> 27:27.480
加了密的

27:27.720 --> 27:29.160
然后说说我 这边的话我叫

27:29.400 --> 27:30.600
写上我的这个密钥

27:30.840 --> 27:33.880
那回头的话 客户端的那个密钥和我的这个密钥 我就要看

27:34.120 --> 27:34.920
配不配得上

27:35.320 --> 27:37.480
所以这边那就是认识md5

27:37.960 --> 27:38.760
这边也没有

27:39.320 --> 27:39.960
md5

27:40.440 --> 27:41.880
好像自动口引入了是吧

27:42.120 --> 27:43.640
把这个引入了 我把他放到上面去

27:45.800 --> 27:47.640
自动引入了 还挺方便的

27:48.120 --> 27:49.400
好 这边呢 首先md5

27:49.640 --> 27:51.560
好 大家这边认识process

27:53.400 --> 27:57.640
process.env.jwt

27:59.400 --> 28:01.800
jwt下滑线segrate

28:03.560 --> 28:05.560
对吧 首先的话是你的这个密钥

28:05.800 --> 28:09.480
这个的话是我们所设置的

28:10.600 --> 28:11.080
密钥

28:11.720 --> 28:13.960
好 大家第二个 第二个的话就是你的这个算法

28:15.560 --> 28:16.360
organisms

28:16.920 --> 28:17.400
算法

28:17.640 --> 28:19.960
算法的话 这边呢 统一就是选这个

28:22.760 --> 28:24.520
hs256

28:25.800 --> 28:27.160
这个是我们的这个算法

28:27.640 --> 28:31.160
就新版本的这个expressjwt

28:31.400 --> 28:33.560
必须要求你指定算法

28:34.520 --> 28:35.320
我这边写一下

28:35.800 --> 28:40.680
就新版本的expressjwt

28:41.400 --> 28:44.520
必须要求

28:46.040 --> 28:48.120
要求干嘛呢 就是指定算法

28:50.760 --> 28:52.520
也就是说他加密的算法有多种

28:52.760 --> 28:56.920
是吧 那我们这边呢 采用的是这个hs256这个算法

28:57.480 --> 28:59.880
好 然后接下来完事之后

29:00.440 --> 29:01.560
然后这里

29:01.960 --> 29:03.800
这里的话 其实后面还有一个选项

29:04.040 --> 29:06.040
叫做什么呢 叫做这个unless

29:06.680 --> 29:09.240
unless里面的话 就是你排除

29:09.560 --> 29:12.520
哪些路由不需要这个token验证

29:13.000 --> 29:15.480
啊 什么意思啊 是这样子的

29:16.200 --> 29:19.560
就是当我们这边配置了这个接口之后

29:20.360 --> 29:24.440
你那个客户端只要一访问 我这边的话 我首先会给你拦下来

29:25.480 --> 29:27.720
怎么样吧 我首先会给你拦下来 我要求你干嘛呢

29:27.960 --> 29:29.320
你得给我一个token

29:29.560 --> 29:32.120
然后我这边的话对这个token进行验证

29:32.360 --> 29:33.400
验证通过了

29:33.640 --> 29:34.680
才能放你进去

29:35.240 --> 29:37.240
对不对 就好比你现在这个疫情阶段

29:37.480 --> 29:40.040
你要进商场 你必须要量这个健康码

29:41.080 --> 29:43.640
对不对 必须要量健康码 你不量健康码 你进不去

29:44.360 --> 29:46.920
但是有些情况 我们压杆 我们就没有这个token

29:47.400 --> 29:49.240
对不对 你看我们这边 你看这个接口文档

29:50.120 --> 29:53.720
你回头看这个接口文档 他有些是需要 有些是不需要的

29:54.200 --> 29:54.760
比如说

29:55.880 --> 29:56.520
恢复

29:57.160 --> 30:01.000
有恢复 恢复的话 你来这边请求参数 是不是要求你把这个带上

30:02.280 --> 30:05.560
对不对 要求你把这个带上 那你如果是这个

30:06.200 --> 30:06.920
比如说登录

30:07.400 --> 30:09.960
登录的话 你第一次压杆是不是就没有这个token

30:11.000 --> 30:13.400
对不对 压杆你第一次 你就是来登录的

30:13.800 --> 30:16.920
我登录了我才有token 我没有登录 我哪来的token呢

30:17.160 --> 30:19.000
说我这个登录的话 我是不需要token的

30:19.800 --> 30:20.360
可不可以啊

30:20.760 --> 30:23.400
比如说还有些 我记得这边呢 这里面还有一些

30:23.960 --> 30:24.360
比如说

30:25.160 --> 30:26.680
好像首页标语也是

30:27.320 --> 30:27.800
可不可以啊

30:28.200 --> 30:29.240
你看这个首页标语

30:29.560 --> 30:32.600
首页标语的话 比如说我们一会儿再写那个首页标语的时候

30:32.920 --> 30:35.640
我们获取首页标语是不需要token的

30:36.680 --> 30:37.160
可不可以啊

30:37.400 --> 30:40.120
什么时候需要token 你要设置的时候

30:40.840 --> 30:44.120
比如说我要重新设置这个token 设置这个首页标语

30:44.360 --> 30:45.560
让我要求你把这个token

30:46.280 --> 30:46.520
带上

30:47.000 --> 30:48.120
我要验证一下

30:48.520 --> 30:49.400
你是不是

30:50.360 --> 30:51.400
就是有资格

30:51.880 --> 30:52.680
来进行设置

30:53.160 --> 30:54.440
但你如果要获取的话

30:55.240 --> 30:55.720
无所谓

30:56.040 --> 30:56.760
对吧 随便获取

30:57.320 --> 30:58.760
你要拿我就给你就是了

30:59.720 --> 31:00.120
对不对

31:00.600 --> 31:02.680
说这里的话 他就提供了第三个参数

31:03.560 --> 31:05.240
这里都不是第三个参数了

31:05.480 --> 31:07.000
这里的话他就是练识了

31:07.240 --> 31:08.920
后面的话可以再调用什么呢

31:09.160 --> 31:11.880
可以再调用一个方法 叫做unless

31:12.760 --> 31:14.040
unless他也是一个方法

31:14.280 --> 31:16.600
然后里面传入一个对象

31:17.640 --> 31:19.160
对象里面然后一个pass

31:19.800 --> 31:21.480
对应的是一个输主

31:22.760 --> 31:23.560
这个是什么意思

31:23.800 --> 31:25.320
这个的话就是你要排除的

31:26.200 --> 31:27.240
需要排除

31:28.600 --> 31:35.800
需要排除的这个token验证的路由

31:36.040 --> 31:37.720
这哪些路由我不需要验证

31:38.120 --> 31:39.560
这边是一个输主

31:39.800 --> 31:42.040
输主里面是一个一个的对象

31:42.360 --> 31:43.640
那我们这边我们就来写

31:45.080 --> 31:46.200
来写我们第一个

31:47.000 --> 31:48.840
首先他这边有一个url

31:50.200 --> 31:51.160
url

31:52.280 --> 31:52.920
对应

31:53.480 --> 31:54.760
这里的话对应一个值

31:54.920 --> 31:56.120
那我们这边就是

31:56.600 --> 31:57.960
斜杠API

31:58.200 --> 31:59.880
然后斜杠andmean

32:00.200 --> 32:01.800
你注意一下你这边要写全

32:02.120 --> 32:03.880
就一级路由加二级路由

32:04.120 --> 32:05.880
除了那个域名端口号不用写

32:06.120 --> 32:07.400
后面的都要写

32:07.800 --> 32:09.720
这边是APIandmeanlogging

32:09.960 --> 32:11.320
这个是不是不需要的

32:11.800 --> 32:13.640
对不对然后后面的话可以指定这个方法

32:14.920 --> 32:16.040
这边message

32:17.720 --> 32:18.920
我们这个logging

32:19.240 --> 32:20.520
logging的话它是什么

32:23.080 --> 32:23.640
是吧

32:24.600 --> 32:25.640
把这个指定一下

32:26.920 --> 32:29.480
那回头的话你这个固定的有一些

32:29.720 --> 32:31.800
就是如果没有在这个列表里面的

32:32.040 --> 32:33.560
路由它就需要干嘛呢

32:33.640 --> 32:36.120
它就需要验证这个token

32:36.920 --> 32:37.560
明白了吧

32:37.880 --> 32:38.760
就需要验证token

32:39.000 --> 32:41.320
那验证token的话它这边就分为两种情况

32:41.560 --> 32:43.320
一种是验证成功

32:43.880 --> 32:45.400
一种是验证失败

32:45.640 --> 32:46.680
这个很好理解吗

32:47.320 --> 32:48.360
对不对这个很好理解

32:48.600 --> 32:49.880
比如说我们这边的话

32:51.320 --> 32:53.320
我们这边我看呀

32:53.560 --> 32:54.360
该怎么做呢

32:54.600 --> 32:55.960
比如说我们这边我们再来写一个

32:56.200 --> 32:57.160
再来写个写口

32:57.960 --> 32:58.840
写个什么呢

32:59.080 --> 33:01.560
写一个我记得这边的话有一个

33:03.320 --> 33:04.600
有一个这个

33:05.640 --> 33:06.120
恢复

33:06.680 --> 33:07.640
恢复登录状态

33:07.880 --> 33:10.520
你看恢复登录状态的话它反弯的就是这个接口

33:11.320 --> 33:14.120
对不对这个接口的要求你把这个token

33:14.360 --> 33:17.320
传过来传过来的在这边验证成功证我干嘛呢

33:17.320 --> 33:18.600
我给你返回这个数据

33:19.480 --> 33:19.960
对不对

33:20.200 --> 33:21.160
我给你返回这个数据

33:21.160 --> 33:23.320
OK好了这样我们把这个接口来写了

33:24.600 --> 33:25.880
来来到我们这边

33:25.880 --> 33:27.640
然后你一会就可以看到这个验证

33:27.640 --> 33:29.160
验证成功是什么样子

33:29.160 --> 33:30.520
验证失败是什么样子

33:31.240 --> 33:33.080
好那我们这边就还是来到哪呢

33:33.320 --> 33:34.360
先来到and me

33:34.600 --> 33:35.080
对吧

33:35.880 --> 33:36.600
and me

33:37.560 --> 33:38.600
这个注释就不要了

33:38.600 --> 33:39.640
这个注释改成什么呢

33:39.640 --> 33:40.440
改成登录

33:41.480 --> 33:43.240
这是我们的登录接口

33:43.240 --> 33:45.080
那后面的话就其实就

33:45.080 --> 33:46.680
你越到后面就越轻松了

33:47.160 --> 33:47.720
知道吧

33:47.720 --> 33:50.280
你刚开始的话写可能稍微麻烦一点

33:50.520 --> 33:51.720
你越到后面

33:52.040 --> 33:53.560
越写到后面就越轻松

33:53.560 --> 33:55.320
因为后面呢就是一葫芦花嫖

33:56.120 --> 33:56.680
没有吧

33:57.000 --> 33:59.880
好了我们这边呢就是恢复登录状态

34:01.760 --> 34:04.960
恢复登录状态

34:05.200 --> 34:06.560
那这边呢就是router

34:07.280 --> 34:07.840
点

34:08.720 --> 34:10.400
你看这边是什么请求

34:11.440 --> 34:13.200
这边是一个get请求

34:13.200 --> 34:15.680
你注意还要和你的接口文档对上

34:15.680 --> 34:18.080
我反复强调接口文档是不是很重要

34:18.720 --> 34:20.400
那这边是who am i

34:21.440 --> 34:21.920
是这个

34:22.480 --> 34:25.200
好大家这边 async function

34:28.300 --> 34:32.060
然后叫这边req res

34:32.060 --> 34:33.340
然后next

34:33.900 --> 34:34.620
这边

34:34.620 --> 34:36.540
这边的话是不是应该是

34:37.420 --> 34:39.260
首先取出了这个token

34:40.220 --> 34:40.780
对不对

34:40.780 --> 34:41.660
取出了token

34:43.900 --> 34:46.380
那么这里该如何取出这个token呢

34:46.940 --> 34:49.580
回忆一下我们之前在写这个客户端的时候

34:49.900 --> 34:51.260
我们这边要带token过去

34:51.260 --> 34:52.460
我们是放在哪里的

34:53.260 --> 34:55.260
我们是放在这个请求头里面的

34:55.980 --> 34:56.540
对不对

34:56.540 --> 34:58.060
我们放在请求头里面的

34:58.060 --> 35:01.580
所以我们这边就可以通过req.get

35:03.180 --> 35:04.220
get哪个字的呢

35:04.220 --> 35:05.580
get就是我们的这个

35:06.140 --> 35:07.580
alsoreization这个字端

35:08.540 --> 35:10.540
thor

35:11.020 --> 35:13.340
然后izatln

35:13.340 --> 35:14.540
alsoreization

35:14.540 --> 35:15.580
通过这个

35:15.580 --> 35:18.380
通过这个的话就可以取出我们的这个token

35:18.380 --> 35:19.500
那我们这边我们来看一下

35:20.220 --> 35:21.900
这边的话等于

35:21.900 --> 35:23.580
然后接下来这边让我们来cancel一下

35:24.140 --> 35:25.820
cancel.log

35:26.620 --> 35:27.340
token

35:27.340 --> 35:28.220
来打印一下

35:29.420 --> 35:31.020
好这边还是加点支付串嘛

35:31.740 --> 35:32.220
token

35:32.220 --> 35:32.700
ok

35:32.700 --> 35:33.100
保存

35:33.660 --> 35:34.540
好保存之后

35:34.700 --> 35:36.540
然后接下来来到我们这边

35:37.020 --> 35:38.220
来到我们这边

35:38.220 --> 35:39.980
这边的话你首先的话

35:39.980 --> 35:41.180
这里就一个问题

35:41.180 --> 35:43.180
我们接下来再来发请求的时候

35:43.180 --> 35:43.820
我们是不是

35:43.820 --> 35:45.020
因为我们现在没有那个

35:45.660 --> 35:47.100
没有这个前端代码

35:47.660 --> 35:49.660
我们前端代码的话之前我们写前端代码

35:49.660 --> 35:51.740
当时直接就是在请求头里面

35:52.220 --> 35:53.420
是把这个token带上去

35:53.820 --> 35:54.140
对不对

35:54.140 --> 35:55.740
我们现在发请求全部用了啥

35:56.220 --> 35:57.420
就全用了post了没

35:58.140 --> 35:58.460
对不对

35:58.460 --> 35:59.420
这个就是我们的前端

36:00.140 --> 36:01.420
现在这个就是我们的前端

36:02.380 --> 36:04.060
所以我这边该如何带token呢

36:04.700 --> 36:05.500
这里很简单

36:05.500 --> 36:06.780
它这里有个headers

36:07.980 --> 36:08.380
看到没有

36:08.940 --> 36:09.740
有个headers

36:09.740 --> 36:11.020
headers你就在这边的话

36:11.020 --> 36:13.020
你就可以把你的这个token

36:13.020 --> 36:13.820
把带过去

36:13.820 --> 36:15.100
你这边设置一下

36:15.100 --> 36:16.940
首先这个beery

36:16.940 --> 36:17.980
这个把它添加上

36:17.980 --> 36:19.820
添加上之后让我们的这个token是这个

36:20.860 --> 36:21.500
对不对

36:21.500 --> 36:22.780
刚才生成的token是这个

36:23.340 --> 36:23.820
是这个

36:23.820 --> 36:24.780
然后既然我们这边的话

36:24.780 --> 36:26.140
把这个整个这个token

36:27.260 --> 36:29.020
我们把它复制过来

36:29.980 --> 36:30.780
复制过来

36:30.780 --> 36:31.420
就ok了

36:32.140 --> 36:33.020
看到没有就这么简单

36:33.020 --> 36:33.500
headers

36:34.220 --> 36:34.780
headers

36:34.780 --> 36:35.900
headers这边的话

36:35.900 --> 36:37.500
首先你这边要改成get

36:38.940 --> 36:40.060
这个改成get

36:40.060 --> 36:41.340
然后这边那是请求什么

36:42.060 --> 36:43.420
互mi

36:44.460 --> 36:44.940
对不对

36:44.940 --> 36:45.740
互mi

36:45.740 --> 36:46.860
这个互mi

36:46.860 --> 36:47.100
好

36:47.100 --> 36:48.940
然后接下来这边那是否加了这个

36:49.580 --> 36:50.780
authorization这个

36:51.580 --> 36:52.140
对不对

36:52.140 --> 36:53.260
加上了这个token

36:53.260 --> 36:54.780
放到这个响应头里面

36:54.780 --> 36:55.100
好

36:55.100 --> 36:55.820
然后接下来

36:56.380 --> 36:57.580
我们这边我们来生的

36:58.380 --> 36:58.940
生的的话

36:58.940 --> 36:59.980
这边好像是爆错了

37:00.780 --> 37:01.260
我看一下

37:02.220 --> 37:03.500
我们这边没起

37:04.060 --> 37:05.260
我们把浮起起一下

37:06.380 --> 37:06.860
走

37:07.420 --> 37:07.980
ok

37:07.980 --> 37:10.990
好

37:10.990 --> 37:11.710
起了之后

37:11.710 --> 37:12.510
然后加我们这边

37:12.510 --> 37:13.230
让我们再来发送

37:13.790 --> 37:14.350
走

37:14.350 --> 37:14.910
ok

37:14.910 --> 37:15.310
好

37:15.310 --> 37:16.270
这边卡住了

37:16.270 --> 37:17.150
我们来看这边

37:17.150 --> 37:17.870
拿到没有

37:18.670 --> 37:19.710
这边是不是就拿到了

37:20.190 --> 37:20.670
对不对

37:20.670 --> 37:22.030
拿到了这个b2 ring

37:22.030 --> 37:23.550
整个这这么长一串

37:24.110 --> 37:25.070
就拿到了

37:25.790 --> 37:26.910
拿到了之后

37:26.910 --> 37:27.870
然后接下来的话

37:27.870 --> 37:28.910
我们这边我们来看一下

37:28.910 --> 37:29.870
这个互mi

37:29.870 --> 37:31.310
它要做什么事情

37:31.950 --> 37:32.990
在这边

37:33.070 --> 37:33.710
在这边

37:34.190 --> 37:34.910
互mi

37:34.910 --> 37:35.630
然后接下来的话

37:35.630 --> 37:37.070
它这边的话是会干嘛呢

37:37.070 --> 37:39.630
它会根据你传过来的这个token

37:39.630 --> 37:41.630
对你的token进行一个解析

37:42.430 --> 37:42.990
解析了

37:42.990 --> 37:44.510
然后把这个数据解析出来了

37:44.510 --> 37:45.470
是不是还给你啊

37:46.190 --> 37:46.830
对不对

37:46.830 --> 37:48.030
所以我们这边上需要

37:48.030 --> 37:49.310
就是有一个这个解析

37:49.790 --> 37:50.350
这个token

37:51.390 --> 37:52.510
首先我们这边第一步

37:53.070 --> 37:54.270
我把注释给大家写一下

37:54.830 --> 37:55.630
首先第一步

37:56.190 --> 38:01.630
从这个客户端的请求拿到

38:03.150 --> 38:03.470
token

38:04.430 --> 38:04.990
对吧

38:04.990 --> 38:06.190
先把它拿到

38:06.190 --> 38:07.070
拿到之后

38:07.070 --> 38:08.350
然后接下来的话

38:08.350 --> 38:10.110
拿到你这个拿到是没法用的

38:10.670 --> 38:10.990
对不对

38:10.990 --> 38:12.430
你拿到了这个token是这个样子

38:13.310 --> 38:15.310
因为我们给客户端给的就是这个

38:16.270 --> 38:17.070
对不对

38:17.070 --> 38:18.910
我们发给人家客户端发的就是这个

38:19.390 --> 38:21.150
那人家带过来的当然也就是这个了

38:21.630 --> 38:22.990
带过来是这个拿接下来

38:22.990 --> 38:25.310
我们要对这个token进行一个解析

38:26.430 --> 38:27.630
进行一个解析

38:27.630 --> 38:28.910
所以第二步

38:28.910 --> 38:31.070
解析这个token

38:31.710 --> 38:32.590
还原成

38:34.760 --> 38:35.560
还原

38:39.660 --> 38:40.460
还原

38:41.660 --> 38:41.900
成

38:43.100 --> 38:46.300
有用的信息

38:46.300 --> 38:47.980
有用的信息

38:48.700 --> 38:49.420
ok

38:49.420 --> 38:49.820
好了

38:49.820 --> 38:51.260
我这边的话我就还是

38:52.700 --> 38:55.020
还是这个封装一个函数

38:55.020 --> 38:56.460
我们来到这边吧

38:56.460 --> 38:57.580
来到token这边

38:57.580 --> 38:58.620
我们封装一个函数

38:59.580 --> 39:01.500
这里的话就应该是model

39:02.860 --> 39:05.580
model.expose.

39:05.580 --> 39:07.260
我这边就叫做分析

39:07.980 --> 39:08.780
align

39:10.060 --> 39:11.020
align

39:11.020 --> 39:11.820
align this

39:13.260 --> 39:15.660
然后接下来这个token

39:15.660 --> 39:17.420
等于一个function

39:18.780 --> 39:19.020
好

39:19.020 --> 39:21.100
这里话是不是就是应该是接受一个token

39:22.220 --> 39:23.020
对不对

39:23.020 --> 39:24.060
接受一个token之后

39:24.060 --> 39:25.740
然后这样我这边我要解析

39:25.740 --> 39:28.460
解析的话这里的话就又得用到什么呢

39:28.460 --> 39:30.940
又得用用到我们的这个接受微博token

39:31.980 --> 39:33.020
这边让你影响

39:34.220 --> 39:35.100
这边的话就是

39:35.660 --> 39:37.340
const一个jwt

39:37.900 --> 39:39.980
等于一个require

39:41.420 --> 39:43.340
这边就是接受微博token

39:43.340 --> 39:45.020
也就是我们的这个接受微博token

39:45.740 --> 39:46.620
它除了这个

39:47.180 --> 39:48.220
生成这个token

39:48.220 --> 39:49.100
它也负责什么呢

39:49.100 --> 39:50.620
也负责这个解密这个token

39:52.560 --> 39:52.960
好

39:52.960 --> 39:54.000
然后接下来这里

39:54.560 --> 39:56.480
这里的话就应该怎么写

39:56.480 --> 39:58.880
这里的话它这里的话就是jwt

39:58.880 --> 39:59.760
它上面有个什么呢

39:59.760 --> 40:01.840
有个方法叫做这个verify

40:02.640 --> 40:03.040
这个

40:03.600 --> 40:05.040
然后把你的这个token

40:05.040 --> 40:06.640
token的话你注意我们拿到了是什么

40:06.640 --> 40:08.080
是不是拿到是这样子的一个支付串

40:08.960 --> 40:09.920
我们只要什么

40:09.920 --> 40:11.200
是不是只要后面这一块

40:12.160 --> 40:12.800
对不对

40:12.800 --> 40:15.120
说这边那就是应该是token

40:15.680 --> 40:17.360
我怎么拿到最后面的那一块

40:18.320 --> 40:19.680
这个是不是就js基础了

40:20.480 --> 40:21.200
split

40:22.240 --> 40:23.200
以什么分隔

40:23.200 --> 40:24.560
什么以空格分隔

40:24.560 --> 40:26.240
空格分隔它是不是拿到一个输阻

40:26.800 --> 40:28.720
输阻第一项是这个b2ray

40:28.720 --> 40:29.520
第二项

40:30.480 --> 40:31.520
第二项是不是这个

40:32.560 --> 40:33.200
对不对

40:33.200 --> 40:34.720
我们这边就是应该是1

40:35.520 --> 40:36.720
这是第一个参数

40:36.720 --> 40:37.760
第二个参数是什么呢

40:37.920 --> 40:40.160
第二个参数就是你的这个加密

40:41.120 --> 40:43.200
你的那个token不是加密吗

40:43.200 --> 40:44.320
所以我们这边把这个

40:45.600 --> 40:46.320
md5

40:46.720 --> 40:48.000
把它引入一下

40:48.000 --> 40:49.360
这边的话require

40:50.800 --> 40:52.800
require md5

40:52.800 --> 40:54.000
好然后接下这里

40:54.000 --> 40:55.840
这里的话就应该是md5

40:56.480 --> 41:00.160
然后接下这里的是process.env

41:00.880 --> 41:03.360
点这个jwt

41:04.160 --> 41:06.240
下滑线secret

41:06.960 --> 41:08.000
对吧

41:08.000 --> 41:09.440
把它来进行解析

41:09.440 --> 41:10.160
解析了之后

41:10.160 --> 41:11.200
然后把解析结果

41:11.760 --> 41:12.560
返回出去

41:13.840 --> 41:14.720
返回出去之后

41:14.720 --> 41:15.360
然后接下来

41:15.360 --> 41:16.800
我们来到我们的这边

41:18.320 --> 41:18.960
来到我们这边

41:18.960 --> 41:20.960
我们把那个方法引入一下

41:22.960 --> 41:24.400
它都在这个工具里面

41:24.400 --> 41:24.800
是吧

41:25.440 --> 41:27.360
把这个分析token的这个

41:27.600 --> 41:28.640
函数引入一下

41:28.640 --> 41:29.040
好了

41:29.040 --> 41:30.080
接下这边的话我就直接

41:30.800 --> 41:31.840
调用那个方法

41:32.480 --> 41:33.200
把这一块

41:34.240 --> 41:34.880
是放进去

41:35.280 --> 41:36.000
放进去之后

41:36.160 --> 41:37.600
这边我们来打印一下

41:37.600 --> 41:38.800
看有没有解析成功

41:39.200 --> 41:40.240
这边token

41:43.520 --> 41:45.120
这边的话token

41:45.680 --> 41:46.320
OK

41:46.320 --> 41:46.800
好

41:46.800 --> 41:47.440
保存一下

41:50.270 --> 41:50.590
好

41:50.590 --> 41:51.310
保存了之后

41:51.310 --> 41:51.950
然后接下来

41:51.950 --> 41:52.910
这边poster man

41:52.910 --> 41:53.790
来发请求

41:54.670 --> 41:54.990
走

41:56.990 --> 41:57.550
搞定没有

41:58.750 --> 41:59.470
出去搞定了

42:00.270 --> 42:00.830
对不对

42:00.830 --> 42:01.630
它是不是重新

42:01.630 --> 42:02.750
将刚才那个制服串

42:02.750 --> 42:03.550
就这个制服串

42:03.550 --> 42:04.990
是重新还原成了

42:04.990 --> 42:06.270
一个有用的数据

42:07.390 --> 42:07.710
对不对

42:08.270 --> 42:09.150
重新还原成了

42:09.150 --> 42:10.030
一个有用的数据

42:10.270 --> 42:11.310
还原成有用的数据

42:11.310 --> 42:12.830
然后接下来我们这边就干嘛呀

42:12.830 --> 42:14.670
是发送回给这个客户端

42:15.470 --> 42:15.790
对不对

42:16.350 --> 42:17.790
这边就已经还原了

42:18.510 --> 42:19.550
拿到token

42:19.550 --> 42:20.030
然后

42:21.230 --> 42:23.790
还原成解析token

42:24.830 --> 42:25.390
然后

42:26.430 --> 42:27.710
然后解析token

42:27.710 --> 42:29.230
还原成有用的数据

42:29.230 --> 42:30.270
这个信息

42:30.590 --> 42:30.830
好

42:30.830 --> 42:31.390
这家第二步

42:31.390 --> 42:32.190
第二步的话就是

42:33.550 --> 42:36.110
返回给客户端

42:37.310 --> 42:37.710
对不对

42:37.710 --> 42:39.390
那这边就是res

42:40.430 --> 42:42.990
res.send

42:45.080 --> 42:45.560
OK

42:45.560 --> 42:45.800
好

42:45.800 --> 42:46.280
这边呢

42:46.280 --> 42:47.640
就是用我们刚才那个

42:48.280 --> 42:49.560
format response

42:50.120 --> 42:50.200
好

42:50.200 --> 42:51.080
这边就是0

42:51.800 --> 42:53.560
然后接下来这边是一个空置串

42:54.120 --> 42:54.360
好

42:54.360 --> 42:55.560
大家这边要返回的数据

42:55.560 --> 42:57.080
我们不需要这都返回

42:57.800 --> 42:58.440
对不对

42:58.440 --> 42:58.680
好

42:58.680 --> 42:59.240
我们这里的话

42:59.240 --> 43:01.000
就返回一些固定的

43:01.000 --> 43:02.600
我们看一下这边接口文档

43:03.880 --> 43:05.560
要紧跟这个接口文档

43:05.560 --> 43:06.920
接口文档是长这个样子

43:07.800 --> 43:08.440
是吧

43:08.440 --> 43:08.760
好了

43:08.760 --> 43:10.200
我们这边把它拿过来

43:11.960 --> 43:12.760
拿过来

43:12.760 --> 43:13.880
把这个改一下

43:14.440 --> 43:16.760
这个的话就应该是token

43:17.720 --> 43:18.280
点什么呀

43:19.000 --> 43:20.680
说有一个logging id

43:21.720 --> 43:22.360
对不对

43:22.360 --> 43:23.880
这个的话就应该是token

43:26.910 --> 43:27.390
token

43:27.950 --> 43:28.430
点什么

43:29.230 --> 43:29.790
lem

43:30.670 --> 43:31.070
对不对

43:31.070 --> 43:31.870
然后还有一个id

43:31.870 --> 43:33.070
id的话是不是应该是

43:33.630 --> 43:34.110
token

43:35.310 --> 43:36.350
点id

43:37.630 --> 43:38.270
是不是就这样子

43:38.990 --> 43:39.310
对不对

43:39.310 --> 43:40.190
你看我们这个接口的话

43:40.190 --> 43:41.230
就写完了

43:41.230 --> 43:41.790
这个的话

43:41.790 --> 43:43.230
没有去跑那个什么

43:43.390 --> 43:44.510
服务程 数据程

43:45.070 --> 43:46.030
这个的话就直接

43:46.030 --> 43:47.070
封装了一个方法

43:47.070 --> 43:48.110
进行一个解析

43:48.110 --> 43:49.390
解析就完事了

43:49.390 --> 43:50.030
把保存一下

43:51.790 --> 43:52.510
保存一下之后

43:52.510 --> 43:53.310
大家我们这边

43:53.310 --> 43:54.110
这个就跑通了

43:54.670 --> 43:55.150
走

43:55.790 --> 43:56.270
看到没有

43:57.470 --> 43:58.110
这就跑通了

43:58.990 --> 43:59.630
对不对

43:59.630 --> 44:00.510
就跑通了

44:00.990 --> 44:01.230
好

44:01.230 --> 44:01.870
跑通之后

44:01.870 --> 44:02.910
然后现在还有个问题

44:03.390 --> 44:04.510
就我们这个token的话

44:04.510 --> 44:06.430
我们现在是假设这个token

44:06.430 --> 44:07.630
有效的情况

44:08.750 --> 44:09.550
对不对

44:09.550 --> 44:10.830
token有效的情况

44:10.830 --> 44:12.430
那我token是效的呢

44:13.710 --> 44:15.070
我如果token失效呢

44:15.070 --> 44:16.430
因为我们token收了这个

44:16.750 --> 44:17.630
过期时间的

44:18.830 --> 44:19.470
对不对

44:19.470 --> 44:20.670
你这个比如到了7

44:21.070 --> 44:21.710
到了7之后

44:21.710 --> 44:23.150
你这个token就失效了

44:23.150 --> 44:24.350
失效了会怎么办

44:24.350 --> 44:25.470
我们这边我们来看一下

44:26.190 --> 44:27.710
你这边的话

44:27.710 --> 44:28.590
是不是配置了

44:28.590 --> 44:30.670
是这个验证token的这个接口

44:31.390 --> 44:31.710
对不对

44:32.270 --> 44:34.430
他只有在这个位置

44:34.430 --> 44:36.110
验证通过了

44:36.110 --> 44:38.750
他才会进入到后面的路由

44:39.790 --> 44:40.510
明白吧

44:40.510 --> 44:41.710
也就说我们刚才

44:41.710 --> 44:42.750
写这的时候

44:43.230 --> 44:45.790
他能够来到这

44:45.790 --> 44:48.350
说明他token就已经是过关的了

44:49.390 --> 44:51.550
他这边能够来到这个互MI

44:51.550 --> 44:54.110
能来到这个代码能来到这个22行

44:54.110 --> 44:54.990
说明什么呢

44:54.990 --> 44:57.070
说明代码就是他的那个token

44:57.630 --> 44:58.830
已经是过关的

44:59.390 --> 45:00.750
就是ok的

45:00.750 --> 45:01.790
有效的

45:01.790 --> 45:03.710
所以说我们这边才对这个token

45:03.710 --> 45:04.990
进行一个解析

45:05.390 --> 45:06.270
把他的那个

45:07.150 --> 45:08.350
加了密的制服串

45:08.350 --> 45:09.470
重新还原成

45:10.350 --> 45:10.910
这个样子

45:11.470 --> 45:12.110
对不对

45:12.270 --> 45:13.630
那你如果这个token

45:13.630 --> 45:14.430
无效

45:14.430 --> 45:15.550
无效的话呢首先

45:15.550 --> 45:17.230
这儿他就会把你拦住

45:18.510 --> 45:18.990
没有吧

45:19.470 --> 45:20.830
这儿他就会把你拦住

45:20.830 --> 45:23.230
除非你这边是排除了这个路由的

45:23.790 --> 45:25.630
locking不需要验证

45:26.830 --> 45:28.270
只要是没有排除的

45:28.270 --> 45:29.550
需要这个token的

45:30.190 --> 45:30.990
需要token的话

45:30.990 --> 45:31.710
如果这个token

45:32.350 --> 45:32.990
无效

45:32.990 --> 45:33.870
无效的话

45:33.870 --> 45:34.670
他在这里

45:35.710 --> 45:37.070
他就会把你拦住

45:37.630 --> 45:38.590
拦住之后

45:38.590 --> 45:40.270
再加他验证到你这个token

45:40.270 --> 45:41.630
无效对吧

45:41.710 --> 45:42.910
那无效怎么办呢

45:42.910 --> 45:43.950
无效的话

45:43.950 --> 45:45.790
他就会给你拋出一个

45:46.590 --> 45:47.150
错误

45:47.950 --> 45:48.510
ok

45:48.510 --> 45:49.630
那我们这边我来看一下

45:50.350 --> 45:51.950
这边我们写过

45:51.950 --> 45:53.070
这里的话是不是

45:53.950 --> 45:54.510
他默认

45:55.070 --> 45:55.950
就是错误处理

45:56.910 --> 45:57.470
对不对

45:57.470 --> 45:58.670
一旦发生了错误

45:58.670 --> 45:59.710
就会到这里来

46:00.190 --> 46:00.350
好

46:00.350 --> 46:01.550
那我们就不要他这个代码

46:02.910 --> 46:04.110
我们就不要他这个代码

46:04.110 --> 46:04.350
好

46:04.350 --> 46:05.790
我们这边我们自己来写我们的

46:06.350 --> 46:06.590
好

46:06.590 --> 46:07.950
我们这边就console

46:08.750 --> 46:09.470
点log

46:10.030 --> 46:10.590
什么呢

46:10.670 --> 46:11.870
这边的就是arrow

46:12.510 --> 46:13.150
点name

46:15.070 --> 46:15.950
这边的就是

46:15.950 --> 46:17.470
因为他有个arrow对象传过来吗

46:17.950 --> 46:18.910
我们把这个打印出来

46:18.910 --> 46:19.710
我们先看一下

46:20.190 --> 46:21.310
然后arrow还有一个什么呢

46:21.310 --> 46:22.750
arrow还有一个这个message

46:24.350 --> 46:25.790
啊这边的话arrow

46:26.670 --> 46:27.230
message

46:28.350 --> 46:29.390
我们来看一下啊

46:29.870 --> 46:30.830
啊那有时候就说

46:30.830 --> 46:32.190
那我怎么让他这个token

46:33.230 --> 46:33.870
无效呢

46:34.270 --> 46:35.550
啊那我要等七天吗

46:35.950 --> 46:36.830
啊哪需要

46:36.830 --> 46:37.310
你这边啊

46:37.310 --> 46:39.150
直接把这个是不是创改一下就可以了

46:39.710 --> 46:40.510
对你先发的是

46:40.670 --> 46:41.230
这个token

46:41.790 --> 46:43.390
对吧你把这个稍微改一下嘛

46:44.110 --> 46:46.030
改了他这个token是不是就失效了

46:46.590 --> 46:47.950
失效之后呢你现在剩的

46:48.430 --> 46:48.830
你看

46:49.230 --> 46:50.030
这边是不是卡住了

46:50.590 --> 46:52.270
卡住之后让他让我们来看一下这里

46:53.630 --> 46:54.110
看到没有

46:54.750 --> 46:56.830
这里的话是不是他自动代码就到这里来了

46:57.230 --> 46:58.430
你看我这里写了注释的

46:58.830 --> 46:59.550
错误处理

46:59.550 --> 47:00.750
一旦发生错误就会

47:01.070 --> 47:01.790
是不是来到这里

47:02.750 --> 47:04.190
对不对你看他这边就是什么

47:04.590 --> 47:06.750
是不是这个unauthorized

47:07.390 --> 47:08.030
raised

47:08.030 --> 47:08.830
这个arrow

47:08.830 --> 47:09.310
对不对

47:09.310 --> 47:10.590
invited

47:13.150 --> 47:15.470
好这里他就抛出了这么一个错误了

47:15.710 --> 47:18.030
你还记不记得我们之前写那个

47:18.270 --> 47:19.230
错误处理了呀

47:19.230 --> 47:19.790
同学们

47:20.830 --> 47:23.390
所以我们之前在做完准备工作之后

47:23.630 --> 47:24.910
我们首先就干嘛呀

47:25.310 --> 47:27.870
首先是不是就写了一个这个错误处理了

47:28.750 --> 47:29.310
对不对

47:29.550 --> 47:31.630
写了错误处理了我们当时是怎么讲的

47:32.110 --> 47:33.630
我们说为什么要写这个

47:33.870 --> 47:35.950
就是自己来写这个错误处理了

47:36.190 --> 47:38.510
所以当错误发生的时候

47:38.670 --> 47:41.310
我们补货到发生的错误

47:41.790 --> 47:42.590
然后干嘛呢

47:42.750 --> 47:45.710
然后抛出我们自定义的这个错误

47:47.070 --> 47:47.630
怎么样吧

47:47.870 --> 47:49.790
我们去补货他发生的错误

47:49.950 --> 47:51.470
然后我们抛出我们自己定义的

47:52.030 --> 47:54.590
但是我这边的话我去查一下文档

47:54.910 --> 47:57.710
我查一下这个xpricejwt

47:58.110 --> 48:00.030
他这边的话他就是

48:00.830 --> 48:03.070
没有给我们提供就是我们能够这个

48:03.710 --> 48:06.430
自己来处理的这个错误的方式

48:06.750 --> 48:08.350
他这边的话就是说

48:08.590 --> 48:10.830
你看这里啊文档这里写的有这里

48:11.390 --> 48:12.750
error这个handling

48:13.230 --> 48:16.670
the default behavior is too slow and error

48:17.230 --> 48:19.230
when the token is invited

48:19.710 --> 48:22.030
so you can add your custom logic

48:22.590 --> 48:24.430
to this managing

48:24.590 --> 48:27.870
这个unauthorized access as follow

48:28.030 --> 48:29.230
就是他这边的话就是什么呢

48:29.230 --> 48:30.750
就是你如果这个错误名字

48:30.750 --> 48:32.270
他是通过错误名字来判断的

48:33.230 --> 48:33.870
可不可以啊

48:33.870 --> 48:35.390
他其实他这种错误方

48:35.390 --> 48:37.710
这种错误处理方式其实不是太好

48:38.670 --> 48:39.230
不是太好

48:39.230 --> 48:41.150
他这边呢就是根据这个名字

48:41.150 --> 48:42.590
你如果名字是这个

48:42.830 --> 48:44.910
那说明的话就是这个验证不通过

48:44.910 --> 48:45.710
验证不通过

48:45.710 --> 48:48.030
然后加这边你来做你自己的处理

48:49.230 --> 48:51.630
照理说的话这边他应该提供一种方式

48:51.630 --> 48:53.150
让我们能够补货得到

48:53.870 --> 48:55.230
补货到之后然后接下来

48:55.230 --> 48:56.030
我们再来干嘛呢

48:56.030 --> 48:58.350
我们再来抛出我们自定义的错误

48:58.590 --> 48:59.870
但这里的话没办法了

48:59.870 --> 49:00.990
那我们这边呢就是

49:00.990 --> 49:02.350
因为他只提供了这种

49:02.350 --> 49:03.710
他文档里面只写了这个

49:04.430 --> 49:04.910
看到没有

49:08.750 --> 49:10.510
是不是必须要提供这个算法

49:11.390 --> 49:12.430
好那我们这边的话

49:12.430 --> 49:13.310
那我们就没办法

49:13.310 --> 49:15.310
那我们这边呢就就这么写呗

49:15.310 --> 49:16.430
那我们这边的话就是

49:17.150 --> 49:18.430
照着他的来写

49:18.430 --> 49:19.630
他这个是义父是吧

49:22.220 --> 49:23.260
好然后加这里

49:24.700 --> 49:26.620
这里的话说明是什么

49:26.620 --> 49:27.660
说明是

49:28.220 --> 49:31.500
token验证错误

49:32.220 --> 49:33.900
对吧好接下来

49:35.020 --> 49:35.980
我们来

49:37.020 --> 49:38.540
抛出我们

49:39.500 --> 49:43.420
我们自定义的错误

49:45.480 --> 49:46.040
对吧

49:46.040 --> 49:46.840
所以我们这边呢

49:46.840 --> 49:49.080
is点胜的

49:49.560 --> 49:50.200
我们这边呢

49:50.200 --> 49:51.080
自己定义一个错误

49:51.080 --> 49:51.640
我们这边new

49:52.280 --> 49:53.240
我们这边的话

49:53.240 --> 49:54.600
把我们那个错误

49:54.600 --> 49:55.560
我们把它引入一下

49:56.600 --> 49:57.640
这边的话就是

49:58.280 --> 50:01.920
const等于一个

50:02.560 --> 50:03.520
require

50:03.520 --> 50:04.320
不是这个

50:05.280 --> 50:06.080
require

50:08.490 --> 50:09.850
这里的话就是

50:10.490 --> 50:12.330
当前目录下面的

50:13.050 --> 50:13.930
youtils

50:15.530 --> 50:17.050
下面的这个errors

50:18.010 --> 50:18.570
对吧

50:18.570 --> 50:19.610
好我们引入什么呢

50:19.610 --> 50:20.170
引入这个

50:20.170 --> 50:21.690
我们看一下我们这个错误处理内

50:22.250 --> 50:23.210
他应该是哪个

50:26.730 --> 50:27.370
应该是这个

50:28.090 --> 50:28.730
可不可以啊

50:28.730 --> 50:29.930
静止访问错误

50:29.930 --> 50:30.890
forbidden error

50:31.530 --> 50:32.890
状态码这边是不是已经有了

50:32.890 --> 50:33.450
401

50:34.410 --> 50:35.290
所以我们这边把这个

50:35.850 --> 50:36.330
引进来

50:36.890 --> 50:37.770
引进来之后

50:37.770 --> 50:38.730
然后接下来的话

50:40.010 --> 50:40.730
这里的话

50:41.370 --> 50:42.170
来到下面

50:42.810 --> 50:43.610
下面的话

50:43.770 --> 50:44.810
这边就是应该是new

50:44.810 --> 50:46.890
一个forbidden error

50:47.290 --> 50:47.530
好

50:47.530 --> 50:48.170
那家里面

50:48.730 --> 50:49.290
里面的话

50:49.290 --> 50:50.490
然后传入一段话

50:51.530 --> 50:52.010
叫做什么呢

50:52.010 --> 50:52.970
叫做未登录

50:56.860 --> 50:57.260
未

50:58.940 --> 50:59.900
未登录

51:00.540 --> 51:02.380
或者登录

51:02.700 --> 51:04.140
已经过期

51:05.420 --> 51:06.860
啊因为你那个token

51:06.860 --> 51:07.660
token失效了吗

51:08.300 --> 51:09.020
对不对

51:09.020 --> 51:10.060
然后接下来他就会干嘛

51:10.060 --> 51:10.940
他就会这边的话

51:10.940 --> 51:11.660
是不是就是

51:11.660 --> 51:13.100
新实力化一个这个

51:13.820 --> 51:14.860
forbidden这个error

51:15.420 --> 51:15.740
对不对

51:16.220 --> 51:17.100
说起来的话

51:17.100 --> 51:18.620
我们这边之前是不是有个方法

51:18.620 --> 51:19.020
还没写

51:20.060 --> 51:20.780
就这里

51:20.780 --> 51:21.660
这个方法

51:21.660 --> 51:22.700
还记不记得这个方法

51:22.700 --> 51:23.580
是用来干嘛的

51:24.220 --> 51:25.020
这个方法的话

51:25.020 --> 51:26.460
就是我这边的话可以

51:27.020 --> 51:28.540
格式化的返回这个

51:29.180 --> 51:29.900
这边我写一下

51:30.460 --> 51:31.180
格式化

51:36.240 --> 51:40.880
格式化的返回错误信息

51:41.280 --> 51:41.680
好了

51:41.680 --> 51:42.160
我现在的话

51:42.160 --> 51:42.880
我这边的话

51:42.880 --> 51:43.680
我要如何

51:44.720 --> 51:46.720
格式化的返回这个错误信息呢

51:46.720 --> 51:47.600
也很简单

51:47.600 --> 51:48.320
其实我们这边呢

51:48.320 --> 51:49.280
就是用到我们

51:49.360 --> 51:51.280
这几课刚写的什么呢

51:51.280 --> 51:52.480
我们是不是写了一个这个

51:53.360 --> 51:54.080
写了一个这个

51:54.800 --> 51:55.120
对不对

51:55.120 --> 51:56.320
我们就用这个方法就可以了

51:57.760 --> 51:58.000
好

51:58.000 --> 51:59.040
那我们这边的话

51:59.040 --> 52:00.080
就直接return

52:02.170 --> 52:02.810
return

52:02.810 --> 52:05.530
return一个这个format response

52:06.410 --> 52:07.610
它会不会自动给我引入

52:08.810 --> 52:10.410
好像没有自动给我引入

52:10.410 --> 52:10.730
是吧

52:12.330 --> 52:13.210
可能要保存了

52:13.210 --> 52:14.730
这他才给我自动引入

52:14.730 --> 52:15.370
那我这边呢

52:15.370 --> 52:16.010
我就手动

52:19.050 --> 52:21.290
等于一个require

52:22.010 --> 52:24.490
当前目录下面的

52:24.490 --> 52:26.010
对吧

52:26.010 --> 52:27.210
所以你看我们这边

52:27.210 --> 52:28.810
为什么要把它这个进行封装

52:29.850 --> 52:30.330
这个方法

52:31.050 --> 52:31.850
刚才写的时候

52:31.850 --> 52:32.970
感觉看着很简单

52:33.770 --> 52:34.090
对吧

52:34.090 --> 52:34.890
看着很简单

52:34.890 --> 52:36.090
感觉好像没有必要

52:36.090 --> 52:36.810
弹动封装

52:36.810 --> 52:37.770
但是你看这边

52:37.770 --> 52:38.730
到处都在用

52:39.450 --> 52:40.010
对不对

52:40.010 --> 52:41.050
就很灵活

52:41.050 --> 52:41.690
那我这边呢

52:41.690 --> 52:42.490
我就传入

52:42.490 --> 52:43.210
code

52:43.210 --> 52:44.010
code是不是

52:44.010 --> 52:45.530
应该是Z点code的

52:46.730 --> 52:47.050
对不对

52:47.050 --> 52:47.850
比如我们刚才的话

52:47.850 --> 52:49.770
这个进之反封是401

52:50.490 --> 52:51.130
401

52:51.130 --> 52:52.090
然后回到它会

52:52.090 --> 52:53.610
复制给这个Z点code的

52:53.610 --> 52:54.170
所以这边呢

52:54.170 --> 52:55.850
就是应该是Z点code的

52:55.850 --> 52:56.090
好

52:56.090 --> 52:56.570
message

52:56.570 --> 52:57.370
message是不是

52:57.370 --> 52:58.170
Z点

52:59.050 --> 53:00.090
message

53:00.090 --> 53:00.410
对不对

53:00.410 --> 53:01.290
然后data有没有data

53:01.290 --> 53:01.850
没有data

53:03.290 --> 53:03.930
对不对

53:03.930 --> 53:04.890
就应该是这个样子的

53:05.610 --> 53:05.850
OK

53:06.410 --> 53:06.650
好

53:08.170 --> 53:08.570
然后

53:09.770 --> 53:10.970
这里的话就应该干嘛

53:10.970 --> 53:12.490
这里的话就应该是调用

53:14.330 --> 53:15.930
调用我们刚才那个

53:15.930 --> 53:17.610
tourage.js的那个方法

53:18.970 --> 53:19.450
看到没有

53:19.930 --> 53:21.050
调用这个方法

53:21.050 --> 53:21.370
好

53:21.370 --> 53:22.010
保存

53:22.010 --> 53:22.570
保存了

53:22.570 --> 53:23.130
我们来看一下

53:23.770 --> 53:24.170
保存

53:25.930 --> 53:26.730
OK

53:26.730 --> 53:27.050
好

53:27.050 --> 53:27.770
这里的话来

53:29.050 --> 53:29.530
剩的

53:30.250 --> 53:30.730
诶

53:30.730 --> 53:31.450
什么看到没有

53:32.090 --> 53:32.970
是不是就返回了这个

53:34.090 --> 53:34.730
对不对

53:34.730 --> 53:35.530
返回这个说明什么

53:35.530 --> 53:36.810
说明我们的token

53:36.810 --> 53:38.250
是不是有问题的

53:38.810 --> 53:39.770
你这边把这个token

53:39.770 --> 53:40.650
把它改回去

53:40.650 --> 53:41.850
这个可以这样子改

53:41.850 --> 53:42.890
随便这个改

53:42.890 --> 53:44.410
看着感觉好像很神秘

53:44.890 --> 53:46.090
它其实一点都不神秘

53:46.570 --> 53:47.050
对吧

53:47.050 --> 53:47.770
把它改回去

53:47.770 --> 53:48.570
改回去就OK了

53:49.290 --> 53:49.850
可不可以

53:50.490 --> 53:51.130
这就OK了

53:52.330 --> 53:53.690
除了我们这边的话你看

53:53.690 --> 53:54.410
这节课的话

53:54.410 --> 53:56.890
我们就将我们整个这个jwt

53:58.410 --> 53:59.290
就是它的一个

53:59.290 --> 54:00.890
首先是生存token

54:00.890 --> 54:02.410
然后一个这个验证token

54:02.970 --> 54:04.570
我们就把它做完了

54:04.570 --> 54:05.610
再来回顾一下

54:05.610 --> 54:06.730
生存是在哪里生存的

54:07.370 --> 54:08.650
生存是不是在这里生存的

54:09.450 --> 54:10.170
是不是在服务层

54:10.890 --> 54:11.210
对不对

54:11.210 --> 54:12.490
它是属于我们这个

54:12.490 --> 54:13.450
登录

54:13.450 --> 54:15.130
它的这个就是业务逻辑

54:16.170 --> 54:17.770
业务逻辑的这个一块

54:17.930 --> 54:19.050
所以是在这个业务层

54:20.330 --> 54:22.650
然后接下来的话验证验证是在哪里

54:22.650 --> 54:24.490
验证的话是在这里

54:25.290 --> 54:25.690
对不对

54:25.690 --> 54:26.810
在这里进行验证

54:26.810 --> 54:27.610
你要注意一下

54:27.610 --> 54:28.890
你一定要写在这个

54:28.890 --> 54:30.330
路由中间键之前

54:30.330 --> 54:31.290
你不要写到之后

54:32.330 --> 54:32.730
知道吧

54:33.290 --> 54:35.530
它这个对这个xprice

54:36.090 --> 54:38.570
它对这个中间键的这个顺序

54:38.570 --> 54:39.850
它是有严格要求的

54:41.050 --> 54:41.530
对不对

54:41.530 --> 54:42.490
有严格要求的

54:42.490 --> 54:43.450
你一旦写错了

54:43.450 --> 54:44.490
它就会出问题

54:45.210 --> 54:47.450
就写在这个使用路由中间键的前面

54:48.250 --> 54:49.770
进入路由前进行验证

54:49.770 --> 54:50.650
验证失败

54:50.650 --> 54:51.450
直接这边

54:52.010 --> 54:52.810
是抛出错误

54:53.370 --> 54:53.690
对不对

54:53.690 --> 54:55.130
抛出我们自定义的错误

54:56.330 --> 54:56.890
好

54:56.890 --> 54:57.770
这个验证成功

54:58.490 --> 54:59.690
如果这边验证成功

54:59.690 --> 55:00.730
是不是才进这个路由

55:01.290 --> 55:02.250
进这个路由之后

55:02.250 --> 55:03.690
大家我们刚才写了一个什么呢

55:03.690 --> 55:05.210
写了一个恢复登录状态

55:05.210 --> 55:07.290
就根据我们这边拿到了这个托肯

55:07.290 --> 55:08.410
是不是重新进行解密

55:08.970 --> 55:10.410
解密了大家返回给

55:10.810 --> 55:11.370
扣护端

55:12.570 --> 55:12.890
对不对

55:14.330 --> 55:16.090
然后你如果不就是

55:17.050 --> 55:18.010
就是有些路由

55:18.010 --> 55:19.450
不需要进行托肯验证

55:19.450 --> 55:21.770
然后你这边的话可以在这里进行一个排除

55:22.490 --> 55:23.370
可以进行一个排除

55:24.330 --> 55:24.810
OK

55:25.210 --> 55:26.650
这就是这几个的内容

55:27.370 --> 55:28.250
主要就是这个

55:28.250 --> 55:29.210
关于这个托肯的

55:29.610 --> 55:31.050
大家下来的话把这一块

55:31.850 --> 55:32.250
写一写

55:33.130 --> 55:33.450
好吧

55:34.010 --> 55:35.370
把这几个就先到这里

55:35.370 --> 55:36.250
再见

