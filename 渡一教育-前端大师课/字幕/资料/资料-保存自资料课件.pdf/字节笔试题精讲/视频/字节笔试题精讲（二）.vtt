WEBVTT

00:00.370 --> 00:08.330
嗯 OK啊 OK 那咱就开始了 咱就开始了 咱开始了 今天下来这道题呢 干嘛呢 来 先看一下原题啊 看原题

00:08.930 --> 00:18.490
今天讲啥呢 前期到咱们做上堂课讲完了 是吧 甚至说出了点小差错啊 比方说这个开头查了 这个这个这个这个 二分查了 出来小问题啊 问题不大

00:19.050 --> 00:22.850
今天从第八题开始讲 从八讲到十四啊 这样的一个 这样期道题

00:23.810 --> 00:29.330
来吧 那实现一个promise family 以及promise调 两个方法就是这个底层

00:30.010 --> 00:31.770
来吧 那第一个啊 条件文件夹

00:32.850 --> 00:37.890
第第八题是吧 八点promise 点A天庙 嗯 OK

00:39.530 --> 00:44.450
那昨天那个期到呢 你们找学工剧要啊 那个那个有换直播间了 所以说没在一起啊

00:45.770 --> 00:51.180
嗯 自动保存 OK 来

00:53.020 --> 00:59.020
哎 promise 大家知道吗 promise 这个话 promise promise

00:59.940 --> 01:07.020
promise 啊 日道有 日道有 日道有 是吧 行了啊 这款知不知道 promise 执意过来叫承诺

01:09.220 --> 01:16.460
啊 承诺这个词很有意思啊 承诺这个词很有意思 如果你把这个承诺这个词理解了 promise 你是可以

01:17.060 --> 01:25.860
哎 这个明白的啊 啥是承诺呢 哎 承诺哎 承诺一定是将来的事情啊 我承诺说我有钱给你500万

01:26.860 --> 01:38.180
对吧 这是一个承诺 但这个承诺能不能真 这是个真承诺还是假承诺呢 同样 promise 它也有真也有假啊 也有真也有假

01:39.860 --> 01:48.260
我不信啊 我不信啊 我不信 所以说 promise 本质啊 就是这样的一个承诺 只要承诺是现在的 那就说对线承诺是将来的

01:48.860 --> 01:49.860
需要有一个这样的过程

01:50.860 --> 01:51.860
嗯

01:53.860 --> 01:54.860
来啊 呃

01:57.220 --> 02:13.530
哎 从里面稍等一下啊 那说到这个承诺啊 说到这个承诺 哎 promise promise 配称为什么呢 我们这个叫这个这个

02:17.130 --> 02:25.140
什么呢 哎 promise 叫一步 呃一步变成啊 一步变成的解决方案

02:26.140 --> 02:36.140
啊 一步变成解决方案 那之前的这个一步变成的过程咱就不介绍了 给我们说说咱们将那个一步变成给我们带来的一些问题

02:37.140 --> 02:43.140
好吧 给大家提几个词啊 回到地狱 对吧啊 那这个呢 它仅仅是一个呃 回掉

02:45.140 --> 02:53.140
地狱 那这是第一个啊 包括说这个还有啥呢 我们的这个

02:54.140 --> 03:02.960
控制反转lc啊 但是说我们的这个这个这个这个这个这个这个这个这个这个

03:03.960 --> 03:17.830
现实问题 那现实问题 包括说对吧这个 promise 你说我们的生活中有没有呢 有啊 它这个 promise 是啥呢 就是我们去肯特基

03:18.830 --> 03:22.830
或者说去这个这个这个这个这个这个 一些商店对吧 你买菜的那个小票

03:23.830 --> 03:39.730
那就是买饭买菜的小票 那为什么呢 这个小票上定着你要买 你要吃的东西 那至于说这个 你有这个小票 你又能知道到底是商家干嘛的 给你下单下错了

03:40.730 --> 03:46.730
还说商家做的东西没有了 对吧 你过来要他没有了 也就是说 如果你给你上错菜 你可以拿这个小票做对应

03:47.730 --> 03:55.730
那其实是这个 promise 本质是他啊 但说到这儿 可能有些人理解不了啊 那这个咱就不说了 因为今天主题咱不能讲 promise

03:55.730 --> 04:07.730
这个课单纯讲的话 也得小一个小时啊 小一个小时 那直接就来吧 这就来吧 说啥呢 promise 有哪些方法 有哪些方法 那首先说的是实力方法

04:08.730 --> 04:16.730
实力方法 那实力方法有啥呢 promise.proto type

04:18.730 --> 04:23.730
点点 promise.proto type

04:25.730 --> 04:34.730
原形上的方法 什么点 catch 包括说这个 promise.proto type 下面的这个 family

04:35.730 --> 04:42.730
这些是我们实力上的一些方法 实力上的一些方法 当然了 还有什么静态方法

04:44.730 --> 04:50.730
那说直接在这个过渡函数上 静态方法什么的 promise 这个点啊

04:51.730 --> 04:55.730
啊 有时候咱们要实现的一个方法 promise 点啊 以及什么呢 promise there is

04:56.730 --> 05:01.870
啊 还有什么的这个这个这个这个这个

05:01.870 --> 05:03.870
这个 promise there is all

05:04.870 --> 05:10.910
啊 以及说我们这个 promise there reject

05:11.910 --> 05:16.910
啊 这都是关于 promise 常用的一些方法啊 常用的方法给大家罗列出来了哈

05:17.910 --> 05:23.910
那这个 n 呢 是当我们创建一个 promise 根据这个 promise 是成功的还是失败的 执行相对应的函数

05:24.910 --> 05:25.910
那这个 catch 呢 相当于

05:27.910 --> 05:33.910
这样 n 里面有两个函数 一个是对应这个成功执行的函数 另外一个对应失败的函数

05:34.910 --> 05:40.910
那这个 catch 呢 相当于 n 第一个不传 执行第二个 执行第二个 还有函数

05:41.910 --> 05:46.910
那 finally 呢 就是无论是这个成功还是失败 最后都会执行的一个函数 finally

05:47.910 --> 05:49.910
那 然后静态方法 promise there all

05:50.910 --> 05:55.910
那这个 all 是干嘛呢 这是 哎 这个这个多个什么的 promise

05:56.910 --> 05:59.910
哎 这个任务同时执行

06:00.910 --> 06:06.910
啊 把返我这个这个这个返回所有 promise 的结果

06:08.910 --> 06:15.220
那当然出错的话 啊 出错就返回返回错的

06:17.220 --> 06:22.220
那 race 呢 就是啥 race 啥又 race 啊 比赛嘛 是吧 也是多个 promise

06:23.220 --> 06:29.480
对吧 这个返回啊 第一个

06:30.480 --> 06:39.860
执行完的 那 promise there is all 和 reject 的话 就是返回一个来成功

06:40.860 --> 06:46.490
返的 这个状态的 promise 对象

06:47.490 --> 06:49.490
那同样他就返回一个 哎

06:51.490 --> 06:56.490
返回一个失败状态的 promise 对象

06:57.490 --> 07:01.490
啊 这是这个 不关 promise 的基本用法 基本用法

07:02.490 --> 07:05.490
那咱们接下来干嘛呢 要实现 promise.all 的这样的一个远法

07:06.490 --> 07:08.490
这样的一个远码 promise.all

07:10.490 --> 07:12.490
那先给大家看一下这个 promise.all 他怎么用好了

07:13.490 --> 07:15.490
他怎么用 多少呢 能知道点 能知道点

07:17.490 --> 07:19.490
那来吧 呃

07:20.490 --> 07:23.490
呃 let 一个 pe 等于 new 一个

07:24.490 --> 07:26.490
这个这个 我是直接 promise.result

07:27.490 --> 07:33.490
啊 返回一个 呃 这个 value 值唯一状态为成功态的一个 promise 对象

07:34.490 --> 07:38.490
啊 let 一个 pr 叫什么呢 promise.result

07:39.490 --> 07:40.490
啊

07:41.490 --> 07:44.490
二 是吧 仍然是一个成功状态的 promise 对象 然后指示啊

07:45.490 --> 07:47.490
然后在这里干嘛呢 promise

07:47.490 --> 07:51.310
点 all

07:52.310 --> 07:54.310
啊 all 什么呢 把这个 pe pr 放到一起

07:56.310 --> 07:58.310
啊 这个 all 完之后干嘛呢 可以点认

08:00.310 --> 08:04.310
啊 能点认的话说明 promise.all 返回的是一个 promise 对象

08:05.310 --> 08:09.310
啊 promise 对象 那在这里面干嘛呢 我们把这个一种结果输出一下

08:11.310 --> 08:12.310
输出一个 value

08:13.310 --> 08:14.310
来 看一下啊 看一下

08:20.910 --> 08:21.910
看一下

08:21.910 --> 08:31.070
来 刷新

08:41.450 --> 08:42.450
呃 这什么情况啊

08:49.240 --> 08:54.240
啊 自动保存 自动保存 自动保存 自动保存啊 这个

08:55.240 --> 08:57.240
我说呢 再对 来来来啊

08:58.240 --> 09:02.240
返回了这个一和二 这个一和二是谁呢 是这个两个 promise 对象的

09:03.240 --> 09:06.240
啊 他什么的一个 value 值 你把这个 value 你输出 promise 对象

09:07.240 --> 09:10.240
里面有什么呢 有两个东西 一个 promise state 一个 promise result

09:11.240 --> 09:13.240
这个 full field 代表所谓的这个承诺是真承诺

09:13.240 --> 09:17.240
那当然他有个假的 假的什么呢 假的 比方说把这个改成 reject

09:18.240 --> 09:19.240
啊 失败的

09:20.240 --> 09:22.240
包括是空谈 自动会有一个抱错啊 就是 PR

09:23.240 --> 09:27.240
你看 同样 他这个 result 是二 然后状态 reject

09:28.240 --> 09:30.240
失败的 不会就是对应的一个冲动态 一个失败态

09:31.240 --> 09:33.240
那在这儿 如果想让他不抱错干嘛呢 再来个点 catch

09:34.240 --> 09:35.240
我接一下这个错误是吧

09:37.240 --> 09:40.240
我把这个付清积付出一下 就是那个二啊 就是那个二

09:41.240 --> 09:44.240
就是这个二 这就不抱错了 因为他有对应

09:45.240 --> 09:47.240
失败态的一个负点数啊 失败态的一个负点数

09:48.240 --> 09:49.240
而且对应上面的这个

09:51.240 --> 09:54.240
那我可以啊 那在这儿 我们能看到一个事 什么呢 就是首先啊

09:55.240 --> 10:00.240
首先这个 promise.all 干嘛呢 反归的

10:01.240 --> 10:05.550
是一个 promise 对象 promise 对象

10:06.550 --> 10:10.550
那所以说 在我们实现 promise.all 的时候干嘛呢

10:11.550 --> 10:16.550
首先在这个函数里面 怎么着呢 反回的就是一个 promise 对象

10:17.550 --> 10:19.550
啊 反回的就是一个 promise 对象

10:20.550 --> 10:22.550
在这个 promise 对象里面呢 会有一个函数

10:23.550 --> 10:24.550
啊 什么呢 result

10:26.550 --> 10:27.550
啊 包括说 reject

10:28.550 --> 10:29.550
啊 成功还是失败

10:30.550 --> 10:33.550
那成功还是失败 那为什么说他反回的是一个 promise 对象呢

10:34.550 --> 10:39.550
他反回一个 promise 对象之后干嘛呢 反回之后 promise 对象可以调整点开始方法

10:39.550 --> 10:46.550
我们说了实力方法是有点点开始的 所以说在这 promise.all 首先反回的是一个 promise 对象

10:47.550 --> 10:50.550
啊 反回的应该是一个 promise 对象 那紧接着

10:52.550 --> 10:54.550
那紧接着 那我们这里面传的参数是

10:55.550 --> 10:59.550
是一个数组 对吧 是一个数组 那这个数组这里面是啥呢

11:00.550 --> 11:04.550
也就是说我们的这个 prms promises

11:05.550 --> 11:09.550
啊 什么呢 这个这个这个叫 promise 对象的一个集合

11:10.550 --> 11:12.550
能动吗 promise 对象的一个集合

11:13.550 --> 11:16.550
这个 promises prms s promises

11:17.550 --> 11:20.550
prms 对象的一个集合

11:21.550 --> 11:26.550
prms 对象的一个集合 用数组装的 对吧 用数组装的 用数组装的

11:28.550 --> 11:32.550
那这个里面啊 他除了能传这个这些东西还能传啥呢

11:32.550 --> 11:34.550
我这里面如果写个一会怎么样

11:35.550 --> 11:38.550
啊 如果我写个一会怎么样 把这个二去掉了 我不要他

11:39.550 --> 11:40.550
如果写个一会怎么样

11:41.550 --> 11:46.550
呃 这个写二吧 或者写个三啊 因为之前有二嘛 如果写个三会怎么样

11:47.550 --> 11:50.550
他输出的结果是一三 三是二的 去把这个普通的结果输出来

11:51.550 --> 11:53.550
然后这个这个这个这个奥呢 是这个result 状态啊

11:54.550 --> 11:58.550
这个这个如果不这么写的话 写成 promise 对象的话 你有一个 promise

11:58.550 --> 12:01.120
呃

12:03.880 --> 12:04.880
soc

12:05.880 --> 12:08.880
soc1 跟那个是一样的啊 跟刚才我们的那个

12:09.880 --> 12:10.880
promise

12:13.510 --> 12:14.510
promise.result

12:17.340 --> 12:21.340
一是一样的啊 你看 说不说心的话 仍然还是一三嘛 不变啊 不变

12:22.340 --> 12:25.340
就是 呃 这个 这也算是他的一个兼业形式

12:26.340 --> 12:30.340
ok啊 那除了写这个 还能写什么呢 还能写一个这样的 写个对象

12:30.340 --> 12:36.340
写个对象 干嘛呢 里面有认函书 里面还支持soc 或者说是result reject 啊 这无所谓

12:37.340 --> 12:39.340
然后这个对象里面干啥呢

12:40.340 --> 12:45.340
这个对象里有 这个对象里面有一个认函书啊 认函书 然后执行了一个soc

12:46.340 --> 12:47.340
10

12:48.340 --> 12:52.340
啊 他里面就是一个对象啊 就是一个对象 只不过把这个对象当中拿出来了啊

12:54.340 --> 12:55.340
last一个

12:57.340 --> 12:58.340
label

12:59.340 --> 13:01.340
等于一个对象 这个对象里面有啥呢

13:02.340 --> 13:03.340
这个对象里面

13:07.120 --> 13:09.120
这个对象里面有个函书 叫认

13:10.120 --> 13:13.120
有一个对象函书叫认 有一个对象叫做认

13:14.120 --> 13:18.120
然后这就传了个soc soc soc10 啊 结果说这么写不知道啥意思 对吧

13:19.120 --> 13:24.120
但是他可以写成这样的对象 那这个对象呢 仍然可以被他去接纳

13:25.120 --> 13:26.120
那什么呢 认一个

13:27.120 --> 13:32.120
包括这个变量当然先啊 这个分个脸什么 刚才一样先记一下啊

13:33.120 --> 13:34.120
干嘛呢 130

13:35.120 --> 13:39.120
也就是我们这个promise反过来的结果 哪怕说你是常量

13:40.120 --> 13:43.120
或者说我们这个这个一个对象里面有认函方法都可以

13:44.120 --> 13:50.120
啊 都可以 干嘛呢 被我们认所接到 因为这里面没有这个reject的状态的 所以说这个开始不会执行了

13:51.120 --> 13:52.120
他都是走的是我们的第一个认函书

13:53.120 --> 13:54.120
走的是第一个认函书

13:54.120 --> 13:56.120
那么在这里面啊 在这里面干嘛呢

13:57.120 --> 13:59.120
我们需要写点东西 写啥呢

14:01.120 --> 14:07.120
我们在这里面需要记录着 因为我们这是数组 数组是三个值 是三个值

14:08.120 --> 14:12.120
我们需要记住这三个值的一个promise的一个状态

14:13.120 --> 14:15.120
那我拿什么去记呢 我们用数组去装

14:16.120 --> 14:17.120
用数组去装

14:17.120 --> 14:18.120
那他re is 怎么一个数组

14:19.120 --> 14:20.120
那这个re is干嘛呢

14:21.120 --> 14:22.120
这个记录

14:23.120 --> 14:24.120
各个

14:25.120 --> 14:26.120
promise

14:26.120 --> 14:27.120
什么的

14:27.120 --> 14:28.120
实力的

14:29.120 --> 14:30.120
value值

14:31.120 --> 14:32.120
就像之前给大家看的那个

14:33.120 --> 14:34.120
P

14:34.120 --> 14:35.120
这个这个这个

14:36.120 --> 14:39.120
promise result 这样的一个value值 这样的一个result 一个结果

14:39.120 --> 14:40.120
拿着它去装

14:40.120 --> 14:44.120
那有了它够吗 还不够 还上啥呢 还差一个index

14:45.120 --> 14:46.120
index

14:46.120 --> 14:49.120
那这个index有什么用呢 需要记录 记录啥呢

14:49.120 --> 14:52.120
看着 我们这个数组是存了三 对吧

14:52.120 --> 14:54.120
我们现在写的代码全同步的

14:54.120 --> 14:57.120
如果是一步的话 他不能说立马就能回来

14:57.120 --> 15:00.120
并且他们有一个先后顺序 先后顺序

15:00.120 --> 15:02.120
我们这个index是

15:04.120 --> 15:05.120
我们这个index干嘛呢

15:06.120 --> 15:10.120
记录这个promise的一个执行个数

15:16.530 --> 15:17.530
执行个数

15:19.530 --> 15:22.530
然后在这里面 那既然promise干嘛他这个数组

15:22.530 --> 15:24.530
能数组的话 我们便利对吧

15:24.530 --> 15:25.530
ok 来

15:27.530 --> 15:28.530
便利

15:28.530 --> 15:30.530
好 这个这个 我们这个参数

15:30.530 --> 15:31.530
promises

15:31.530 --> 15:33.530
promise这个集合

15:33.530 --> 15:34.530
promise

15:34.530 --> 15:36.530
PROMISE

15:36.530 --> 15:37.530
promises

15:38.530 --> 15:39.530
for each

15:39.530 --> 15:41.530
便利每一个嘛

15:41.530 --> 15:42.530
对吧 for each

15:43.530 --> 15:46.530
然后这里面有什么呢 item 以及说他对那个下标

15:46.530 --> 15:48.530
咱们写简单说了在这里面

15:49.530 --> 15:51.530
item 和这个下标

15:51.530 --> 15:53.530
那么接下来咱们就得判断一下

15:53.530 --> 15:54.530
包括说在这儿

15:54.530 --> 15:55.530
我们输出一下item

15:55.530 --> 15:57.530
PROMISE就知道这个item是什么的

15:58.530 --> 16:01.530
就说我们把这个奥韩书放到下面去

16:01.530 --> 16:03.530
把这个奥韩书放到下面去

16:03.530 --> 16:07.800
大家就能看到我们输出的是啥

16:10.940 --> 16:12.940
看一下我们输出的是啥

16:13.940 --> 16:14.940
输出了三个值

16:14.940 --> 16:16.940
这三个值呢其实就是

16:16.940 --> 16:18.940
我们传进来的这个数组这三个值

16:19.940 --> 16:20.940
那这个时候干嘛呢

16:20.940 --> 16:23.940
我们就需要判断一下 判断一下什么呢

16:23.940 --> 16:26.940
判断他们是不是PROMISE对象

16:26.940 --> 16:28.940
那这里面并不是说

16:28.940 --> 16:30.940
判断这个item是不是PROMISE对象

16:30.940 --> 16:31.940
这样是有问题的

16:32.940 --> 16:34.940
判断item

16:34.940 --> 16:37.940
是不是Zenable对象

16:37.940 --> 16:41.980
Zenable对象

16:41.980 --> 16:43.980
刚才咱们上面出写了Zenable

16:43.980 --> 16:45.980
对吧 这对象里面有Zen

16:46.980 --> 16:48.980
那上面是有个对象里面有Zen

16:48.980 --> 16:50.980
那为什么这里面有一个Zenable

16:51.980 --> 16:53.980
为什么要有这个Zenable

16:53.980 --> 16:54.980
来哈

16:54.980 --> 16:57.980
那接下来就给大家说一下这个Zenable这个东西

16:59.980 --> 17:01.980
Zenable

17:02.980 --> 17:03.980
Zenable干嘛呢

17:03.980 --> 17:07.980
它是这个电量的这个值

17:07.980 --> 17:09.980
或者类型的来源干嘛呢

17:09.980 --> 17:11.980
首先PROMISE内部规范

17:12.980 --> 17:13.980
内部规定

17:13.980 --> 17:17.980
那么创建PROMISE可以有多种方式

17:18.980 --> 17:20.980
如果读过PROMISE原码

17:20.980 --> 17:23.980
或者说看过PROMISEA加规范的同学知道

17:23.980 --> 17:25.980
创建PROMISE是有多种方式的

17:36.110 --> 17:38.110
是有多种方式创建的

17:38.110 --> 17:39.110
比较常见的什么呢

17:39.110 --> 17:41.110
比较常见就是一个正规的什么的

17:41.110 --> 17:42.110
标准的PROMISE

17:44.740 --> 17:45.740
标准PROMISE什么的

17:45.740 --> 17:47.740
因为有一个PROMISE这种方式

17:47.740 --> 17:49.740
或者上面那个PROMISE的result什么的

17:49.740 --> 17:50.740
都可以

17:50.740 --> 17:51.740
这是标准的PROMISE

17:51.740 --> 17:53.740
但是由于可能有些浏览器

17:53.740 --> 17:54.740
它的一个版本比较低干嘛呢

17:54.740 --> 17:56.740
需要我们的熟悉PROMISE

17:56.740 --> 17:58.740
就是非ESU标准的PROMISE

18:01.440 --> 18:03.440
非ESU标准的PROMISE

18:04.440 --> 18:06.440
那非ESU标准的PROMISE

18:06.440 --> 18:07.440
那也就是我们自己实现的

18:08.440 --> 18:10.940
自己实现的一个PROMISE

18:10.940 --> 18:11.940
那什么POLYFILM

18:12.940 --> 18:13.940
POLYFILM

18:16.320 --> 18:17.320
POLYFILM

18:17.320 --> 18:18.320
这样的一个

18:18.320 --> 18:19.320
算是自己实现的

18:19.320 --> 18:22.320
模拟的这样的一个PROMISE

18:22.320 --> 18:23.320
那当然还有什么呢

18:23.320 --> 18:25.320
就是当我们的环境不同

18:27.320 --> 18:28.320
就是其他情况

18:30.320 --> 18:31.320
其他情况干嘛呢

18:31.320 --> 18:33.320
就是环境不同或者浏览器不同

18:39.920 --> 18:40.920
环境不同浏览器不同干嘛呢

18:41.920 --> 18:43.920
都会造成这样的一个PROMISE

18:43.920 --> 18:45.920
它的方式不为一

18:47.920 --> 18:48.920
那这样的话

18:48.920 --> 18:49.920
那怎么定义

18:49.920 --> 18:51.920
是不是一个PROMISE对象呢

18:52.920 --> 18:53.920
怎么定义PROMISE对象呢

18:53.920 --> 18:54.920
包括上面

18:54.920 --> 18:55.920
咱们只写个Z就可以

18:55.920 --> 18:56.920
ok 那这个呢

18:56.920 --> 18:57.920
就是它的一个通过点

18:59.920 --> 19:01.920
我们没办法调用这个

19:01.920 --> 19:02.920
我们没办法知道

19:02.920 --> 19:04.920
你到底是不是PROMISE

19:04.920 --> 19:05.920
对吧

19:05.920 --> 19:06.920
没办法定义

19:09.870 --> 19:10.870
什么样的对象

19:10.870 --> 19:14.950
是PROMISE对象

19:15.950 --> 19:16.950
那干嘛呢

19:16.950 --> 19:17.950
提出了一个概念

19:17.950 --> 19:19.950
这个概念叫Zenable

19:19.950 --> 19:20.950
干嘛呢

19:20.950 --> 19:21.950
很简单

19:21.950 --> 19:23.950
只要有Zen就行

19:26.840 --> 19:27.840
只要有Zen就行

19:29.840 --> 19:30.840
只要有Zen就行

19:31.840 --> 19:33.840
哪有Zen就行呢

19:33.840 --> 19:35.840
就是有Zen的

19:35.840 --> 19:37.840
有Zen方法的对象或者函数

19:44.250 --> 19:46.250
有Zen方法的对象或者函数

19:46.250 --> 19:47.250
那这样的话

19:47.250 --> 19:48.250
那接下来干嘛呢

19:48.250 --> 19:49.250
我们封装一个函数

19:49.250 --> 19:50.250
方身

19:50.250 --> 19:51.250
Zenable

19:52.250 --> 19:53.250
干嘛呢

19:53.250 --> 19:54.250
这里面会传一个P

19:54.250 --> 19:55.250
那它怎么判断

19:55.250 --> 19:57.250
它是不是这样的一个Zenable呢

19:57.250 --> 19:58.250
就说

19:58.250 --> 19:59.250
这有Zen方法的对象或者函数

19:59.250 --> 20:01.250
那所以说这里面需要判断一下

20:01.250 --> 20:02.250
需要判断一下

20:02.250 --> 20:03.250
那么怎么搞呢

20:03.250 --> 20:04.250
判断一下

20:04.250 --> 20:05.250
首先

20:05.250 --> 20:06.250
我得判断它是对象吧

20:06.250 --> 20:07.250
对吧

20:07.250 --> 20:08.250
它包P干嘛呢

20:08.250 --> 20:09.250
等于等于我们的对方

20:09.250 --> 20:10.250
Object

20:11.250 --> 20:12.250
并且

20:13.250 --> 20:14.250
Object

20:14.250 --> 20:15.250
obct

20:16.250 --> 20:18.250
它是Object类型

20:18.250 --> 20:19.250
并且干嘛呢

20:19.250 --> 20:20.250
P还不微空

20:20.250 --> 20:23.260
对吧

20:23.260 --> 20:25.260
这俩同时满足

20:25.260 --> 20:26.260
还可以

20:26.260 --> 20:27.260
那或者是啥呢

20:28.260 --> 20:29.260
或者是什么呢

20:29.260 --> 20:30.260
这个

20:30.260 --> 20:31.260
P

20:31.260 --> 20:34.540
是一个方式也行

20:34.540 --> 20:36.540
因为方式也是对象嘛

20:36.540 --> 20:37.540
对吧

20:38.540 --> 20:40.540
如果是一个方式也行

20:40.540 --> 20:44.620
如果是个方式也行

20:44.620 --> 20:45.620
你看上台说了嘛

20:45.620 --> 20:47.620
有Zen方法的对象或者函数

20:47.620 --> 20:48.620
有Zen方法的对象或者函数

20:48.620 --> 20:49.620
那OK

20:49.620 --> 20:51.620
有了这样的一个判断结果之后

20:51.620 --> 20:52.620
有了这样的一个判断结果

20:54.620 --> 20:55.620
有了这样的一个判断结果之后

20:55.620 --> 20:56.620
干嘛呢

20:56.620 --> 20:57.620
再判断一下

20:57.620 --> 20:58.620
干嘛呢

20:58.620 --> 20:59.620
如果

21:00.620 --> 21:01.620
如果干嘛呢

21:01.620 --> 21:02.620
P1.1

21:02.620 --> 21:03.620
对吧

21:03.620 --> 21:04.620
它有这个方法

21:04.620 --> 21:05.620
干嘛呢

21:05.620 --> 21:06.620
试一个函数

21:07.620 --> 21:08.620
试一个函数

21:08.620 --> 21:09.620
怎么样呢

21:10.620 --> 21:12.620
就规定它是一个Zenable

21:12.620 --> 21:13.620
那就返回数

21:14.620 --> 21:15.620
否则的话

21:15.620 --> 21:16.620
干嘛呢

21:16.620 --> 21:17.620
返回False

21:18.620 --> 21:19.620
那就不是一个Zenable

21:19.620 --> 21:20.620
OK

21:20.620 --> 21:21.620
那接下来

21:21.620 --> 21:22.620
那还回到我们这个函数里面

21:22.620 --> 21:23.620
那接下来

21:23.620 --> 21:25.620
判断Item是不是Zenable对象

21:25.620 --> 21:26.620
也就是说

21:26.620 --> 21:27.620
我们判断一下F

21:27.620 --> 21:28.620
F什么呢

21:29.620 --> 21:30.620
意思

21:30.620 --> 21:31.620
Zenable

21:31.620 --> 21:32.620
Item

21:32.620 --> 21:33.620
看它是不是

21:33.620 --> 21:34.620
如果是怎么样

21:34.620 --> 21:36.620
不是怎么样

21:36.620 --> 21:37.620
如果是怎么样

21:37.620 --> 21:38.620
不是怎么样

21:38.620 --> 21:39.620
如果是的话

21:39.620 --> 21:40.620
干嘛呢

21:40.620 --> 21:42.620
我们需要让它调用Zen方法

21:43.620 --> 21:44.620
Item.1

21:45.620 --> 21:46.620
需要让它调用Zen方法

21:46.620 --> 21:47.620
然后里面

21:47.620 --> 21:49.620
会有对应的结果

21:51.620 --> 21:52.620
这个Value

21:52.620 --> 21:53.620
干嘛呢

21:53.620 --> 21:54.620
把Zen里面

21:54.620 --> 21:56.620
就是把Promise实例

21:56.620 --> 21:59.620
或者说Zenable里面的Value值纳到

21:59.620 --> 22:01.620
用这个复读器记录了

22:01.620 --> 22:02.620
Array

22:03.620 --> 22:05.620
也就是对应它的下表

22:05.620 --> 22:06.620
记录一下它等于什么呢

22:06.620 --> 22:09.620
等于我们的Value

22:10.620 --> 22:11.620
同时干嘛呢

22:11.620 --> 22:13.620
我们需要判断一下

22:13.620 --> 22:15.620
或者说准确让我们这个index加加

22:16.620 --> 22:17.620
因为这个index说了

22:17.620 --> 22:19.620
是记录Promise to各复

22:19.620 --> 22:20.620
有的执行完了

22:20.620 --> 22:21.620
有的没执行

22:21.620 --> 22:23.620
所以在这需要判断一下

22:23.620 --> 22:24.620
如果什么呢

22:24.620 --> 22:26.620
加加index

22:26.620 --> 22:29.620
如果它的值和谁呢

22:29.620 --> 22:32.620
和我们传进来的Promise is

22:32.620 --> 22:33.620
点

22:33.620 --> 22:35.620
也就是传进来的结果

22:35.620 --> 22:36.620
是一样多的

22:36.620 --> 22:37.620
一样多的说明

22:37.620 --> 22:40.620
我们这些Promise对象都完事

22:40.620 --> 22:41.620
都完事了

22:41.620 --> 22:43.620
我们直接定用Result

22:43.620 --> 22:44.620
把这个结果返回Array

22:44.620 --> 22:45.620
这个Result在哪呢

22:45.620 --> 22:46.620
在这

22:46.620 --> 22:47.620
Result

22:47.620 --> 22:49.620
把它变成一个

22:49.620 --> 22:50.620
成功状态的Promise对象

22:51.620 --> 22:52.620
那当然了

22:52.620 --> 22:53.620
那如果失败了呢

22:53.620 --> 22:54.620
对吧

22:54.620 --> 22:57.620
也就是说我们的这个

22:57.620 --> 22:58.620
失败的话

22:58.620 --> 22:59.620
你直接调用Result就行了

22:59.620 --> 23:00.620
直接调用这个Result的方法

23:00.620 --> 23:01.620
就可以了

23:01.620 --> 23:02.620
那同样

23:02.620 --> 23:04.620
那如果它不是在那一步呢

23:04.620 --> 23:05.620
不是在那一步呢

23:05.620 --> 23:06.620
那就直接记录

23:06.620 --> 23:07.620
react

23:07.620 --> 23:08.620
干嘛呢

23:08.620 --> 23:10.620
等于这个

23:10.620 --> 23:12.620
等于这个

23:12.620 --> 23:13.620
atom

23:13.620 --> 23:15.620
同时也是判断一下

23:15.620 --> 23:17.620
也是判断一下

23:17.620 --> 23:23.040
如果这个index

23:23.040 --> 23:24.040
等于Promise

23:24.040 --> 23:25.040
Mr.Dance的话

23:25.040 --> 23:26.040
就直接

23:26.040 --> 23:28.040
把最终的结果返回

23:28.040 --> 23:30.040
把最终的结果返回

23:30.040 --> 23:31.040
那这样的话

23:31.040 --> 23:33.040
这样的话就完成了一个

23:33.040 --> 23:35.040
关于Promise.All的一个

23:35.040 --> 23:37.040
原码的实现

23:37.040 --> 23:39.040
包括说咱们在这看一下

23:39.040 --> 23:40.040
把这个注释一下

23:40.040 --> 23:42.040
跟之前那个一不一样

23:42.040 --> 23:44.040
放心

23:44.040 --> 23:47.180
等会儿

23:47.180 --> 23:51.330
这里面是不是有这个

23:51.330 --> 23:53.330
出出结果是不是也是130

23:53.330 --> 23:54.330
对吧

23:54.330 --> 23:55.330
也是130

23:55.330 --> 23:57.330
这传的就是

23:57.330 --> 23:59.330
这传的就是

23:59.330 --> 24:01.330
13和10

24:01.330 --> 24:02.330
包括说这里面

24:02.330 --> 24:03.330
如果你说来一个

24:03.330 --> 24:04.330
什么呢

24:04.330 --> 24:08.220
Promise

24:08.220 --> 24:10.220
react

24:10.220 --> 24:11.220
对吧

24:11.220 --> 24:12.220
如果传个4

24:12.220 --> 24:13.220
会爆错的

24:13.220 --> 24:14.220
会爆错的

24:14.220 --> 24:26.510
那这里面来catch

24:26.510 --> 24:27.510
出re-catch

24:27.510 --> 24:31.400
对吧

24:31.400 --> 24:33.400
这算中低难度吗

24:33.400 --> 24:34.400
对于前端来说

24:34.400 --> 24:36.400
它确实不是入门难度

24:36.400 --> 24:37.400
所以说

24:37.400 --> 24:39.400
我这个可以算是中的

24:39.400 --> 24:40.400
它算是中的

24:40.400 --> 24:41.400
它不算最难

24:41.400 --> 24:42.400
能懂吗

24:42.400 --> 24:44.400
就是如果懂Promise同学

24:44.400 --> 24:45.400
其实知道我在写什么

24:45.400 --> 24:47.400
但如果不知道Promise是啥的

24:47.400 --> 24:48.400
你可能说

24:48.400 --> 24:49.400
老师你写的是这个

24:49.400 --> 24:51.400
胡锦文是吧

24:51.400 --> 24:54.400
那这个就是关于Promise原码

24:54.400 --> 24:56.400
那这个我也不问同学们懂不懂

24:56.400 --> 24:57.400
懂的自然懂

24:57.400 --> 24:58.400
要不懂的话

24:58.400 --> 25:00.400
同学们的技术还是要修炼修炼

25:00.400 --> 25:02.400
就说咱们第一块Promise.All

25:02.400 --> 25:03.400
就完成了

25:03.400 --> 25:04.400
那这里面就是这个

25:04.400 --> 25:10.980
the label给大家介绍了一下

25:10.980 --> 25:12.980
这个辨识都是常问的

25:12.980 --> 25:13.980
因为干嘛呢

25:13.980 --> 25:14.980
奥特简单的

25:14.980 --> 25:16.980
不能说让你封装一个完整的Promise

25:16.980 --> 25:17.980
同学问你Promise的特点

25:17.980 --> 25:18.980
对吧

25:18.980 --> 25:19.980
还状态

25:19.980 --> 25:20.980
包括说里面怎么修改状态

25:20.980 --> 25:22.980
包括它对于异部的一个处理情况

25:22.980 --> 25:23.980
包括说咱们昨天课

25:23.980 --> 25:25.980
说这个它属于那个任务

25:25.980 --> 25:28.980
这是常问的

25:28.980 --> 25:29.980
那就是你值不值钱

25:29.980 --> 25:31.980
就在这个原码的体现上

25:31.980 --> 25:33.980
你值不值钱

25:33.980 --> 25:34.980
包括说你

25:34.980 --> 25:35.980
可能说你刚做前端

25:35.980 --> 25:36.980
六千

25:36.980 --> 25:37.980
我做了三年还六千

25:37.980 --> 25:38.980
但别人做了三年

25:38.980 --> 25:39.980
已经涨到三万了

25:39.980 --> 25:40.980
对吧

25:40.980 --> 25:41.980
或者两万

25:41.980 --> 25:42.980
干嘛呢

25:42.980 --> 25:43.980
这个是

25:43.980 --> 25:44.980
因为我在思想上

25:44.980 --> 25:45.980
咱俩开发是一样的

25:45.980 --> 25:47.980
但是我在思想的比你更高级

25:47.980 --> 25:49.980
所以说这个更值钱

25:49.980 --> 25:51.980
你包括说你去大厂面试的时候

25:51.980 --> 25:52.980
动不动你问

25:52.980 --> 25:53.980
你看没看过原码

25:53.980 --> 25:54.980
就算你没读过原码

25:54.980 --> 25:55.980
和你思想一秒了解

25:55.980 --> 25:57.980
一定是这样

25:57.980 --> 25:59.980
一定是这样

25:59.980 --> 26:00.980
OK

26:00.980 --> 26:02.980
那第一个Promise

26:02.980 --> 26:03.980
完事

26:03.980 --> 26:05.980
那这个finally

26:05.980 --> 26:07.980
finally就是证明了结束了

26:07.980 --> 26:08.980
不是结束了

26:08.980 --> 26:13.630
就是执行finally函数

26:13.630 --> 26:20.760
执行finally函数

26:20.760 --> 26:21.760
对吧

26:21.760 --> 26:22.760
它什么都不做

26:22.760 --> 26:23.760
只是说

26:23.760 --> 26:24.760
执行到这

26:24.760 --> 26:29.890
它什么都不做

26:29.890 --> 26:31.890
它仍然会把上面的值传下去

26:31.890 --> 26:32.890
比方说这个地方干嘛呢

26:32.890 --> 26:33.890
我不输出Value

26:33.890 --> 26:35.890
我直接返回Value

26:35.890 --> 26:37.890
或者说这个地方干嘛呢

26:37.890 --> 26:39.890
我直接把这个Arrow返回

26:39.890 --> 26:41.890
下面还可以继续点

26:41.890 --> 26:42.890
这边

26:42.890 --> 26:43.890
这边

26:43.890 --> 26:44.890
这边

26:44.890 --> 26:45.890
这边

26:45.890 --> 26:46.890
这边

26:46.890 --> 26:48.890
下面还可以继续点

26:48.890 --> 27:03.560
这个时候也可以输出

27:03.560 --> 27:04.560
可以输出

27:04.560 --> 27:05.560
这个输出Value是谁呢

27:05.560 --> 27:06.560
因为咱们上面来说

27:06.560 --> 27:07.560
它有个reject

27:07.560 --> 27:09.560
所以说这输出的还是死

27:09.560 --> 27:11.560
执行finally函数

27:11.560 --> 27:13.560
这个finally函数只是单纯执行一下

27:13.560 --> 27:15.560
会把这个结果

27:15.560 --> 27:16.560
继续返回

27:16.560 --> 27:17.560
所以说这个

27:17.560 --> 27:18.560
我就直接写了

27:18.560 --> 27:19.560
finally的原码

27:19.560 --> 27:31.260
finally原码很简单

27:31.260 --> 27:33.260
Promise.finally

27:33.260 --> 27:35.260
这个东西咋写呢

27:35.260 --> 27:37.260
Promise.finally

27:37.260 --> 27:39.260
里面会传一个callback

27:39.260 --> 27:42.910
对

27:42.910 --> 27:48.380
callback

27:48.380 --> 27:50.380
那这callback里面

27:50.380 --> 27:51.380
干啥呢

27:51.380 --> 27:53.380
这里面写件的话说不合适

27:53.380 --> 27:55.380
因为这里面有this的事

27:55.380 --> 27:58.380
所以说就是单纯那个函数

27:58.380 --> 27:59.380
干嘛呢

27:59.380 --> 28:01.380
返回this.

28:01.380 --> 28:03.380
this.

28:03.380 --> 28:04.380
干嘛呢

28:04.380 --> 28:05.380
就是

28:05.380 --> 28:07.380
继续返回的这个

28:07.380 --> 28:08.380
当前返回的这个纸

28:08.380 --> 28:09.380
干嘛呢

28:09.380 --> 28:10.380
继续调用论方法

28:10.380 --> 28:12.380
当前的Promise对象

28:12.380 --> 28:14.380
继续调用论方法

28:14.380 --> 28:15.380
论方法里面有啥呢

28:15.380 --> 28:17.380
有这个

28:17.380 --> 28:18.380
凉函数

28:18.380 --> 28:19.380
凉函数

28:19.380 --> 28:21.380
第一个就是我们的这个

28:21.380 --> 28:23.380
result状态的函数

28:23.380 --> 28:24.380
干嘛呢

28:24.380 --> 28:25.380
在这儿

28:25.380 --> 28:29.380
执行Promise.result

28:29.380 --> 28:31.380
其实这个result里面

28:31.380 --> 28:33.380
也有关于this enable的一个判断

28:33.380 --> 28:34.380
在这咱就不写了

28:34.380 --> 28:35.380
直接调用它

28:35.380 --> 28:36.380
就好

28:36.380 --> 28:37.380
干嘛呢

28:37.380 --> 28:38.380
让我们这个callback执行

28:38.380 --> 28:39.380
在这

28:39.380 --> 28:41.380
cb

28:41.380 --> 28:43.380
让这个cb执行

28:43.380 --> 28:45.380
到cb执行的结果

28:45.380 --> 28:47.380
继续点的

28:47.380 --> 28:50.380
并且把我们对应的这个Values返回

28:50.380 --> 28:52.380
把我们这个Values返回

28:52.380 --> 28:53.380
就是在这干嘛呢

28:53.380 --> 28:55.380
创建一个Promise对象

28:55.380 --> 28:57.380
并且返回

28:57.380 --> 28:59.380
创建一个Promise对象

28:59.380 --> 29:00.380
并且让它返回

29:00.380 --> 29:01.380
那同样

29:01.380 --> 29:02.380
如果失败开呢

29:02.380 --> 29:03.380
一样的

29:03.380 --> 29:10.180
还是一样的

29:10.180 --> 29:11.180
Promise也是result

29:11.180 --> 29:12.180
因为

29:12.180 --> 29:13.180
返回的结果

29:13.180 --> 29:14.180
都是没错的

29:14.180 --> 29:16.180
都是给我们的一个result

29:16.180 --> 29:17.180
因为它普通纸

29:17.180 --> 29:18.180
哪怕是force什么的

29:18.180 --> 29:19.180
跟它没关

29:19.180 --> 29:20.180
是普通纸

29:20.180 --> 29:23.180
同样让我们这个callback执行

29:23.180 --> 29:25.180
然后干嘛呢

29:25.180 --> 29:29.180
把这个结果拋出去

29:29.180 --> 29:34.320
throw arrow

29:34.320 --> 29:35.320
throw arrow

29:35.320 --> 29:36.320
一样的

29:36.320 --> 29:37.320
当把它这个

29:37.320 --> 29:41.400
如果弄上来的话

29:41.400 --> 29:43.400
弄上来的话

29:43.400 --> 29:44.400
一样的

29:44.400 --> 29:45.400
一样的

29:45.400 --> 29:47.400
当然说你说

29:47.400 --> 29:49.400
我没有这个认呢

29:49.400 --> 29:53.400
没问题

29:53.400 --> 29:55.400
这样的话

29:55.400 --> 29:57.400
这就Promise.finally

29:57.400 --> 29:59.400
这个是Promise.

29:59.400 --> 30:01.400
这个很重要

30:01.400 --> 30:03.400
听蒙了吗

30:03.400 --> 30:05.400
听蒙了没有

30:05.400 --> 30:09.400
哈喽 还在过

30:09.400 --> 30:15.460
听蒙同学你会Promise吗

30:15.460 --> 30:17.460
会吗

30:22.530 --> 30:23.530
那当然了

30:23.530 --> 30:25.530
还是那句话

30:25.530 --> 30:26.530
对

30:26.530 --> 30:28.530
你不会是蒙的

30:28.530 --> 30:29.530
你听

30:29.530 --> 30:30.530
你指定蒙

30:30.530 --> 30:31.530
没事

30:31.530 --> 30:32.530
这个呢

30:32.530 --> 30:33.530
之后学到这儿的时候

30:33.530 --> 30:34.530
因为笔记还在

30:34.530 --> 30:35.530
你可以过来看一看

30:35.530 --> 30:37.530
你可以过来看一看

30:37.530 --> 30:38.530
非常有用

30:38.530 --> 30:39.530
非常有用

30:39.530 --> 30:43.440
不用背

30:43.440 --> 30:44.440
不用背

30:44.440 --> 30:45.440
很简单

30:45.440 --> 30:46.440
OK

30:46.440 --> 30:47.440
咱第八题就这样

30:47.440 --> 30:48.440
多了咱不说了

30:48.440 --> 30:49.440
第八题就这样

30:49.440 --> 30:52.140
继续

30:52.140 --> 30:53.140
练持掉用

30:53.140 --> 30:54.140
第一题

30:54.140 --> 30:55.140
讲了半个小时吗

30:55.140 --> 30:57.140
咱八点开始的吧

30:57.140 --> 30:59.140
Promise讲了半个小时

30:59.140 --> 31:01.140
又要了命了

31:01.140 --> 31:03.900
行了

31:03.900 --> 31:04.900
那不说它了

31:04.900 --> 31:05.900
不说它了

31:05.900 --> 31:07.900
咱下一题

31:07.900 --> 31:09.900
干嘛呢

31:09.900 --> 31:10.900
实现一个爱的函数

31:10.900 --> 31:11.900
这个呢

31:11.900 --> 31:12.900
可怜话是吧

31:12.900 --> 31:19.380
Curring.it

31:19.380 --> 31:20.380
那这个的话

31:20.380 --> 31:22.380
咱们这一周微客都讲过了

31:22.380 --> 31:24.380
这周微客都讲过了

31:24.380 --> 31:26.380
那咱也得说一说

31:26.380 --> 31:28.380
按这个提议来

31:28.380 --> 31:29.380
按这个提议来

31:29.380 --> 31:30.380
对吧

31:30.380 --> 31:31.380
那首先干嘛呢

31:31.380 --> 31:32.380
封装硬函数

31:32.380 --> 31:33.380
啊

31:33.380 --> 31:34.380
方身

31:34.380 --> 31:35.380
爱的

31:35.380 --> 31:36.380
干嘛呢

31:36.380 --> 31:37.380
A

31:37.380 --> 31:38.380
B

31:38.380 --> 31:39.380
C

31:39.380 --> 31:40.380
干嘛呢

31:40.380 --> 31:41.380
输出

31:41.380 --> 31:42.380
A加B加C

31:42.380 --> 31:43.380
这样的一个盒

31:43.380 --> 31:44.380
当然了

31:44.380 --> 31:45.380
咱为了方便输出

31:45.380 --> 31:46.380
直接在上面

31:46.380 --> 31:49.270
我们输出A加B加C

31:49.270 --> 31:50.270
好吧

31:50.270 --> 31:51.270
A加B加C

31:51.270 --> 31:52.270
OK

31:52.270 --> 31:53.270
来来来

31:53.270 --> 31:54.270
这个第一题

31:54.270 --> 31:55.270
就先放那吧

31:55.270 --> 31:58.160
这是别纠结了

31:58.160 --> 31:59.160
这个我说了

31:59.160 --> 32:00.160
函数可怜话

32:00.160 --> 32:02.160
这个是编程思想

32:03.160 --> 32:06.540
那我是讲的刻白讲了

32:07.540 --> 32:08.540
编程思想

32:08.540 --> 32:11.540
是我们关于函数的一个拆分的过程

32:12.540 --> 32:18.410
函数拆分的过程

32:18.410 --> 32:19.410
那当然

32:19.410 --> 32:20.410
函数既然有拆分

32:20.410 --> 32:21.410
那它就有组合

32:21.410 --> 32:23.410
组合叫compose

32:24.410 --> 32:25.410
它有拆分

32:25.410 --> 32:26.410
它就组合

32:26.410 --> 32:27.410
它有组合

32:28.410 --> 32:30.410
Curry本身是关什么呢

32:30.410 --> 32:31.410
函数

32:31.410 --> 32:32.410
参数

32:32.410 --> 32:33.410
降为处理

32:36.300 --> 32:37.300
为度

32:37.300 --> 32:38.300
降为处理

32:38.300 --> 32:40.300
那啥叫降为处理呢

32:40.300 --> 32:41.300
就是原来我调用的时候

32:41.300 --> 32:42.300
I的

32:43.300 --> 32:44.300
1

32:44.300 --> 32:45.300
2

32:45.300 --> 32:46.300
3

32:46.300 --> 32:47.300
现在我有个新的I的

32:47.300 --> 32:48.300
干嘛呢

32:48.300 --> 32:49.300
它调用的时候可以调

32:49.300 --> 32:50.300
1

32:50.300 --> 32:51.300
2

32:51.300 --> 32:52.300
3

32:52.300 --> 32:54.300
可以通过这种方式去调用

32:54.300 --> 32:56.300
每次传一个参数

32:56.300 --> 32:57.300
每次传一个参数

32:57.300 --> 32:58.300
那其实函数管理化

32:58.300 --> 32:59.300
也是干嘛呢

32:59.300 --> 33:01.300
把多个参数的函数

33:01.300 --> 33:03.300
转换成单一参数的函数

33:03.300 --> 33:04.300
那当然

33:04.300 --> 33:05.300
咱们这是里面

33:05.300 --> 33:07.300
不单纯做这种低级管理化

33:07.300 --> 33:08.300
给大家做一个

33:08.300 --> 33:09.300
1

33:09.300 --> 33:10.300
2

33:10.300 --> 33:11.300
3

33:11.300 --> 33:14.570
甚至说

33:14.570 --> 33:15.570
1

33:16.570 --> 33:17.570
2

33:17.570 --> 33:18.570
3

33:18.570 --> 33:19.570
甚至说

33:20.570 --> 33:21.570
1

33:22.570 --> 33:23.570
2

33:23.570 --> 33:24.570
3

33:24.570 --> 33:25.570
一样的

33:25.570 --> 33:27.570
那其实

33:27.570 --> 33:28.570
关于这样的

33:28.570 --> 33:29.570
它的目的就是干嘛呢

33:29.570 --> 33:31.570
把原来的函数拆分并且记忆

33:31.570 --> 33:32.570
对吧

33:32.570 --> 33:33.570
你传三个参数

33:33.570 --> 33:35.570
那我就需要把你三个参数记录下来

33:35.570 --> 33:36.570
并且这个

33:36.570 --> 33:37.570
当这个

33:37.570 --> 33:38.570
速度长度了

33:38.570 --> 33:39.570
我就把它执行一下

33:39.570 --> 33:40.570
把他执行一下

33:41.570 --> 33:42.570
那就来吧

33:42.570 --> 33:44.570
只不过在这可能说我们这个

33:44.570 --> 33:45.570
呃

33:46.570 --> 33:47.570
放下一个

33:47.570 --> 33:48.570
干嘛现在爱的

33:48.570 --> 33:49.570
等于我们的

33:49.570 --> 33:50.570
Hurry

33:51.570 --> 33:52.570
爱

33:52.570 --> 33:54.570
把这个爱的函数

33:54.570 --> 33:55.570
进行颗粒化操作

33:56.570 --> 33:57.570
那目前来说

33:57.570 --> 33:58.570
他如果刷新的话

33:58.570 --> 33:59.570
会输出6

33:59.570 --> 34:00.570
这是没问题的

34:00.570 --> 34:01.570
那会输出6

34:01.570 --> 34:03.570
这个是没有问题的

34:04.570 --> 34:05.570
那接下来

34:05.570 --> 34:06.570
接下来咱继续搞

34:06.570 --> 34:07.570
继续搞

34:07.570 --> 34:08.570
搞啥呢

34:08.570 --> 34:09.570
搞这个颗粒化

34:09.570 --> 34:10.570
那如何

34:10.570 --> 34:11.570
通过一个函数

34:11.570 --> 34:12.570
就能把爱的

34:12.570 --> 34:14.570
可以调这种方式去执行

34:14.570 --> 34:16.570
那首先来吧

34:16.570 --> 34:17.570
function carving

34:18.570 --> 34:19.570
或者说

34:19.570 --> 34:20.570
我们直接用这个建筒函数来搞

34:20.570 --> 34:22.570
直接用建筒函数来搞

34:24.570 --> 34:27.070
const

34:27.070 --> 34:28.070
carving

34:29.070 --> 34:30.070
干嘛呢

34:31.070 --> 34:33.070
等于一个这个函数

34:33.070 --> 34:34.070
包括说

34:34.070 --> 34:35.070
我们会有一个某人参数

34:36.070 --> 34:37.070
有一个函数

34:37.070 --> 34:38.070
某人参数

34:38.070 --> 34:40.070
这个参数干嘛呢

34:40.070 --> 34:41.070
就是用来记录着

34:41.070 --> 34:42.070
我们传了几个

34:42.070 --> 34:43.070
传了一个

34:43.070 --> 34:44.070
传了两三

34:44.070 --> 34:45.070
那接下来一个问题就是

34:45.070 --> 34:46.070
我们得知道

34:46.070 --> 34:47.070
知道啥呢

34:48.070 --> 34:49.070
我们这个

34:49.070 --> 34:50.070
参数

34:50.070 --> 34:51.070
这个函数的一个

34:51.070 --> 34:52.070
参数

34:52.070 --> 34:53.070
这个行参的长度

34:53.070 --> 34:54.070
对吧

34:54.070 --> 34:55.070
那怎么调呢

34:55.070 --> 34:56.070
通过fnlnz

34:57.070 --> 34:58.070
函数

34:59.070 --> 35:01.070
fnlnz

35:02.070 --> 35:04.770
fnlnz

35:04.770 --> 35:05.770
干嘛呢

35:05.770 --> 35:06.770
这关于

35:06.770 --> 35:08.770
给我们这个

35:08.770 --> 35:09.770
这个fn

35:09.770 --> 35:12.770
行参的个数

35:12.770 --> 35:13.770
行参的个数

35:13.770 --> 35:14.770
那像是

35:14.770 --> 35:15.770
行参的个数级

35:15.770 --> 35:16.770
是三

35:16.770 --> 35:17.770
是三

35:17.770 --> 35:18.770
因为我们得知道

35:18.770 --> 35:19.770
你传了三

35:19.770 --> 35:20.770
才行

35:20.770 --> 35:21.770
你传两是不行的

35:21.770 --> 35:22.770
你这么写

35:22.770 --> 35:23.770
它是没结果的

35:23.770 --> 35:24.770
你必须得把这三个数

35:24.770 --> 35:26.770
都传给我才行

35:26.770 --> 35:27.770
所以说

35:27.770 --> 35:28.770
我需要把这个

35:28.770 --> 35:29.770
记录一下

35:29.770 --> 35:30.770
记录一下

35:30.770 --> 35:31.770
然后干嘛呢

35:32.770 --> 35:34.770
直接返回

35:34.770 --> 35:35.770
扩展音色符

35:35.770 --> 35:36.770
这个

35:36.770 --> 35:37.770
这个

35:37.770 --> 35:38.770
这个不定参数

35:38.770 --> 35:39.770
不定参数

35:39.770 --> 35:40.770
在这里干嘛呢

35:40.770 --> 35:41.770
我们新定一个变量

35:42.770 --> 35:43.770
这个

35:43.770 --> 35:44.770
2

35:44.770 --> 35:45.770
args

35:45.770 --> 35:46.770
然后干嘛呢

35:46.770 --> 35:47.770
实现两个数组的一个拼击

35:47.770 --> 35:48.770
就是

35:48.770 --> 35:49.770
这传了多少参数

35:49.770 --> 35:50.770
原来有多少参数

35:50.770 --> 35:52.770
进行两个数组的合变

35:52.770 --> 35:55.770
args

35:55.770 --> 35:58.770
把两个数组进行合变

35:58.770 --> 35:59.770
那合变完之后

35:59.770 --> 36:01.770
合变完之后干嘛呢

36:01.770 --> 36:02.770
判断一下

36:04.770 --> 36:06.770
它的长度怎么样呢

36:06.770 --> 36:08.770
是不是大于等于

36:08.770 --> 36:09.770
我们要的这个长度

36:09.770 --> 36:11.770
如果大于等于怎么着呢

36:11.770 --> 36:12.770
也就是说你传的参数够了

36:12.770 --> 36:14.770
我直接让这个函数执行

36:14.770 --> 36:15.770
你也把结果返回就行了

36:21.860 --> 36:23.860
把这个结果返回就行了

36:23.860 --> 36:24.860
那如果不够呢

36:24.860 --> 36:26.860
不够参数的话

36:26.860 --> 36:27.860
需要再次执行

36:27.860 --> 36:28.860
需要再次执行

36:28.860 --> 36:29.860
那需要再次执行的话

36:29.860 --> 36:30.860
我们直接返回

36:30.860 --> 36:31.860
correlation

36:34.750 --> 36:35.750
也就是说我们的这个

36:35.750 --> 36:37.750
下方线args

36:37.750 --> 36:38.750
这样的话就可以了

36:38.750 --> 36:39.750
包括说我把这个地方

36:39.750 --> 36:40.750
主持

36:40.750 --> 36:42.750
大家会看到

36:42.750 --> 36:46.510
1 2 3 4 5个6

36:46.510 --> 36:48.510
1 2 3 4 5个6

36:49.510 --> 36:51.510
那这个是es6的方式去写

36:51.510 --> 36:52.510
就是包括建筒函数

36:52.510 --> 36:54.510
包括这个不定参数

36:54.510 --> 36:55.510
对吧 同学们看着可能比较懵

36:55.510 --> 36:57.510
接下来给大家降为写一个

36:57.510 --> 36:59.510
就写一个

36:59.510 --> 37:00.510
correlation

37:00.510 --> 37:02.510
我们用这个普通方式给大家写一个

37:05.890 --> 37:06.890
用一个方式

37:07.890 --> 37:09.890
args

37:09.890 --> 37:11.890
然后在这里面干嘛呢

37:11.890 --> 37:13.890
仍然我们记录一下这个lens

37:13.890 --> 37:15.890
等于fenderlens

37:17.890 --> 37:20.890
同样这个

37:20.890 --> 37:22.890
用一个ar

37:22.890 --> 37:23.890
这个或者说这个

37:23.890 --> 37:25.890
做一个健身处理args

37:25.890 --> 37:26.890
等于args

37:26.890 --> 37:28.890
或者是你没传的时候干嘛呢

37:28.890 --> 37:29.890
传控数组

37:29.890 --> 37:31.890
传控数组

37:31.890 --> 37:33.890
然后紧接着返回

37:33.890 --> 37:34.890
返回的话就返回函数了

37:34.890 --> 37:35.890
那这里面呢

37:35.890 --> 37:37.890
我们只能说用这个arguments

37:39.890 --> 37:40.890
arguments

37:41.890 --> 37:42.890
然后同时呢

37:42.890 --> 37:43.890
也就把这个arguments

37:43.890 --> 37:44.890
转换成数组

37:44.890 --> 37:45.890
转换成数组

37:45.890 --> 37:46.890
那转换成数组的话

37:46.890 --> 37:48.890
就得用数组的方式

37:48.890 --> 37:50.890
误入一个arg

37:50.890 --> 37:51.890
等于什么呢

37:51.890 --> 37:53.890
数组原形上面的方法

37:53.890 --> 37:54.890
slash.call

37:54.890 --> 37:56.890
或谁啊 argument

37:56.890 --> 38:00.200
把这个arg

38:00.200 --> 38:01.200
转换成数组

38:01.200 --> 38:02.200
那同样你再来一个

38:02.200 --> 38:03.200
args

38:03.200 --> 38:04.200
等于什么呢

38:04.200 --> 38:05.200
等于

38:05.200 --> 38:06.200
上面那个

38:06.200 --> 38:07.200
原来的材质

38:07.200 --> 38:08.200
干嘛呢

38:08.200 --> 38:09.200
跟现有的材质

38:09.200 --> 38:10.200
紧接concat

38:10.200 --> 38:11.200
arg

38:11.200 --> 38:13.200
拼接拼接完之后

38:13.200 --> 38:14.200
做下面这个判断

38:14.200 --> 38:16.200
如果这个什么呢

38:16.200 --> 38:18.200
跟args.args

38:18.200 --> 38:19.200
怎么着

38:19.200 --> 38:20.200
它如果

38:20.200 --> 38:22.200
大于等于我们的

38:22.200 --> 38:23.200
lens

38:25.200 --> 38:26.200
干啥呢

38:26.200 --> 38:28.200
就让我们的材质执行

38:28.200 --> 38:29.200
那这里面就是

38:29.200 --> 38:31.200
return fn.ofi

38:32.200 --> 38:33.200
因为它材质执行复读嘛

38:33.200 --> 38:34.200
第一个材质是no

38:34.200 --> 38:35.200
然后第二个

38:35.200 --> 38:36.200
把我们的这个

38:36.200 --> 38:37.200
跟args

38:37.200 --> 38:38.200
放进去就可以了

38:38.200 --> 38:40.200
然后紧接着

38:41.200 --> 38:42.200
干嘛呢

38:42.200 --> 38:43.200
放回我们的carlet

38:45.200 --> 38:47.200
同样fn.args

38:47.200 --> 38:48.200
一样的

38:49.200 --> 38:50.200
一样的

38:50.200 --> 38:51.200
包括说这个地方

38:51.200 --> 38:52.200
on carlet

38:52.200 --> 38:53.200
也是可以的

38:53.200 --> 38:54.200
也是可以的

38:54.200 --> 38:55.200
一样的

38:55.200 --> 38:56.200
一样的

38:56.200 --> 38:57.200
本质上

38:57.200 --> 38:58.200
都是干嘛呢

38:58.200 --> 38:59.200
把我这个参数

38:59.200 --> 39:00.200
进行拆分

39:00.200 --> 39:01.200
每次执行

39:01.200 --> 39:02.200
你传的一个参数

39:02.200 --> 39:04.200
我都在这进行一个记录

39:04.200 --> 39:05.200
每次你传多少

39:05.200 --> 39:06.200
我都进行一个记录

39:06.200 --> 39:07.200
包括说

39:07.200 --> 39:08.200
你达到了三个

39:08.200 --> 39:09.200
因为我们是需要啥嘛

39:09.200 --> 39:10.200
你达到了三

39:10.200 --> 39:11.200
我就输出最终结果

39:11.200 --> 39:12.200
你不到三

39:12.200 --> 39:13.200
我就不执行

39:13.200 --> 39:14.200
你不到三

39:14.200 --> 39:15.200
就不执行

39:15.200 --> 39:16.200
比方说这个

39:16.200 --> 39:17.200
说这个

39:17.200 --> 39:19.580
这个干掉

39:19.580 --> 39:20.580
对吧

39:20.580 --> 39:21.580
只会输出6个

39:21.580 --> 39:22.580
为啥呢

39:22.580 --> 39:23.580
它最后一个参数没传

39:23.580 --> 39:24.580
它说你传个10

39:24.580 --> 39:25.580
那就是13枚

39:25.580 --> 39:26.580
对吧

39:26.580 --> 39:27.580
这样的一个东西

39:27.580 --> 39:28.580
这样的一个东西

39:28.580 --> 39:30.580
这叫寒树可理化

39:30.580 --> 39:31.580
寒树可理化

39:31.580 --> 39:32.580
只不过有es就之后

39:32.580 --> 39:33.580
这个寒树显得更

39:33.580 --> 39:34.580
淡亮

39:34.580 --> 39:35.580
更简单了

39:35.580 --> 39:36.580
那当然说

39:36.580 --> 39:37.580
用原生的也能写

39:37.580 --> 39:38.580
原生的也能写

39:38.580 --> 39:39.580
那在这呢

39:39.580 --> 39:40.580
跟同学们说一嘴

39:40.580 --> 39:41.580
就是你别跟我说

39:41.580 --> 39:42.580
高级语法

39:42.580 --> 39:43.580
你学还是不学

39:43.580 --> 39:44.580
你理解还是不理解

39:44.580 --> 39:45.580
底层的这些东西

39:45.580 --> 39:47.580
仍然得会

39:47.580 --> 39:48.580
仍然得会

39:48.580 --> 39:49.580
靠啊这些东西

39:49.580 --> 39:50.580
你要知道

39:51.580 --> 39:52.580
来来来

39:52.580 --> 39:53.580
听到咋样呢

39:53.580 --> 39:58.810
听到咋样呢

39:58.810 --> 39:59.810
因为这两部分

39:59.810 --> 40:00.810
无论说咱们之前

40:00.810 --> 40:01.810
那个promise

40:01.810 --> 40:02.810
包括这个寒树可理化

40:02.810 --> 40:05.810
本质上都是变成思想

40:05.810 --> 40:06.810
都是变成思想

40:06.810 --> 40:08.810
如果大家只停留在

40:08.810 --> 40:09.810
这个

40:09.810 --> 40:10.810
说我这个

40:10.810 --> 40:11.810
这个

40:11.810 --> 40:12.810
我会用

40:12.810 --> 40:13.810
那这并不高级啊

40:13.810 --> 40:14.810
还是那样话

40:14.810 --> 40:15.810
并不高级

40:15.810 --> 40:16.810
如果你想变得更有钱

40:16.810 --> 40:18.810
这个东西你得会

40:18.810 --> 40:19.810
你得会

40:20.810 --> 40:21.810
那至于说老师

40:21.810 --> 40:22.810
我不会的话

40:22.810 --> 40:23.810
那是不是不合适的

40:23.810 --> 40:24.810
确切前段

40:24.810 --> 40:25.810
老师还是那句话

40:25.810 --> 40:26.810
就是什么阶段

40:26.810 --> 40:27.810
做什么事

40:27.810 --> 40:28.810
那前期技术打不好

40:28.810 --> 40:29.810
你看这个

40:29.810 --> 40:30.810
指定是更难了

40:30.810 --> 40:31.810
指定是更难了

40:31.810 --> 40:32.810
就包括这里面

40:32.810 --> 40:33.810
对吧

40:33.810 --> 40:34.810
你其实你设一刀点

40:34.810 --> 40:35.810
还比较多

40:35.810 --> 40:36.810
什么高级寒树

40:36.810 --> 40:37.810
对吧

40:37.810 --> 40:38.810
我们这个

40:38.810 --> 40:39.810
所谓的这个

40:39.810 --> 40:40.810
这个这个

40:40.810 --> 40:41.810
寒树拆解

40:41.810 --> 40:42.810
啊包括他对应的

40:42.810 --> 40:43.810
compose

40:43.810 --> 40:44.810
寒树组合

40:44.810 --> 40:45.810
都是一样的

40:45.810 --> 40:46.810
啊都是一样的

40:47.810 --> 40:48.810
那西朗同学

40:48.810 --> 40:50.810
你看不懂的原因是啥

40:50.810 --> 40:51.810
就是结果是看不懂

40:51.810 --> 40:53.810
那为什么看不懂

40:53.810 --> 40:56.820
啊包括这个

40:56.820 --> 40:57.820
之前给大家

40:57.820 --> 40:59.820
去写的这个寒树

40:59.820 --> 41:00.820
防身

41:00.820 --> 41:01.820
Az type

41:01.820 --> 41:02.820
大家还记得吗

41:02.820 --> 41:03.820
对吧

41:03.820 --> 41:04.820
判断一个

41:04.820 --> 41:06.820
这个这个这个

41:07.820 --> 41:08.820
判断一个Value

41:08.820 --> 41:09.820
是不是type类型的

41:09.820 --> 41:10.820
对吧

41:10.820 --> 41:11.820
根据这个Az type

41:11.820 --> 41:12.820
可以扩展出很多寒树

41:12.820 --> 41:14.820
但是里面直接反过来

41:14.820 --> 41:17.520
object

41:17.520 --> 41:18.520
object

41:19.520 --> 41:20.520
dev

41:20.520 --> 41:22.520
property.toStream

41:22.520 --> 41:23.520
dev.call

41:23.520 --> 41:24.520
call谁呢

41:24.520 --> 41:25.520
call我们的这个

41:25.520 --> 41:26.520
呃

41:26.520 --> 41:27.520
y6

41:28.520 --> 41:29.520
看到这个结果

41:29.520 --> 41:31.520
等不等于什么呢

41:31.520 --> 41:34.730
object

41:34.730 --> 41:41.520
哎

41:41.520 --> 41:42.520
没完这么快

41:42.520 --> 41:43.520
我们的type

41:44.520 --> 41:45.520
对吧

41:45.520 --> 41:46.520
对

41:46.520 --> 41:47.520
那我们之前可能说

41:47.520 --> 41:48.520
我们输出

41:48.520 --> 41:50.520
这个Az type

41:50.520 --> 41:51.520
什么呢

41:51.520 --> 41:52.520
这个

41:52.520 --> 41:53.520
方式

41:54.520 --> 41:55.520
Parsing的是不是方式

41:57.830 --> 41:58.830
是啊

41:59.830 --> 42:00.830
Parsing的是不是方式

42:00.830 --> 42:01.830
是

42:01.830 --> 42:02.830
对吧

42:02.830 --> 42:03.830
你假如说你传一个1

42:03.830 --> 42:04.830
是不是寒树

42:05.830 --> 42:06.830
它不是

42:06.830 --> 42:07.830
对吧

42:07.830 --> 42:08.830
OK那除了这个之后

42:08.830 --> 42:09.830
你包括说

42:09.830 --> 42:10.830
判断一个是不是数组

42:10.830 --> 42:11.830
可不可以呢

42:11.830 --> 42:12.830
也可以

42:12.830 --> 42:13.830
但是每次的话都这么写

42:13.830 --> 42:14.830
但是我可以根据这个寒树

42:14.830 --> 42:15.830
干嘛呢

42:15.830 --> 42:16.830
扩展出一些

42:16.830 --> 42:17.830
基础寒树

42:17.830 --> 42:23.190
扩展基础寒

42:23.190 --> 42:24.190
扩展基础寒树

42:24.190 --> 42:25.190
我这样

42:25.190 --> 42:26.190
我先让这个Az type

42:26.190 --> 42:27.190
OK的

42:27.190 --> 42:28.190
可以换一下

42:29.190 --> 42:30.190
Const

42:30.190 --> 42:31.190
Az type

42:31.190 --> 42:37.190
等于Curry

42:38.190 --> 42:39.190
什么呢

42:39.190 --> 42:40.190
这个

42:40.190 --> 42:41.190
这个

42:41.190 --> 42:42.190
Az type

42:42.190 --> 42:43.190
可以换一下

42:43.190 --> 42:45.190
OK那根据Az type

42:45.190 --> 42:46.190
我们就说了很多寒树

42:46.190 --> 42:47.190
Az的方式

42:48.190 --> 42:49.190
就等于

42:49.190 --> 42:50.190
Count

42:50.190 --> 42:51.190
Az type

42:51.190 --> 42:52.190
干嘛呢

42:52.190 --> 42:53.190
我把第一个寒树

42:53.190 --> 42:54.190
内置进行方式

42:55.190 --> 42:56.190
Const

42:56.190 --> 42:57.190
Az Re

42:58.190 --> 42:59.190
等于Count

42:59.190 --> 43:00.190
Az type

43:03.190 --> 43:04.190
这样的话

43:04.190 --> 43:05.190
这两个寒树

43:05.190 --> 43:06.190
你就可以

43:06.190 --> 43:07.190
就不用这么搞了

43:07.190 --> 43:08.190
说什么Az type

43:08.190 --> 43:09.190
对吧

43:09.190 --> 43:10.190
直接输出

43:10.190 --> 43:11.190
或者说我们在这空谈里面

43:11.190 --> 43:12.190
什么呢

43:12.190 --> 43:13.190
Az Re

43:15.190 --> 43:16.190
数组是不是

43:17.190 --> 43:18.190
对吧

43:18.190 --> 43:19.190
Az的方式

43:21.190 --> 43:22.190
什么呢

43:22.190 --> 43:23.190
是不是

43:23.190 --> 43:24.190
它的语化更好

43:24.190 --> 43:25.190
它的语化更好

43:25.190 --> 43:26.190
那这个呢

43:26.190 --> 43:27.190
就是基于我们的

43:27.190 --> 43:28.190
寒树可理化

43:28.190 --> 43:30.190
这个参数拆分的一个过程

43:30.190 --> 43:31.190
来实现我们的

43:31.190 --> 43:33.190
功能寒树

43:33.190 --> 43:35.190
这个例子很经典

43:35.190 --> 43:36.190
其实我每次上课都讲

43:36.190 --> 43:38.190
每次上课都讲

43:38.190 --> 43:39.190
咱们每个每次上课都讲

43:40.190 --> 43:42.890
那这个呢就是

43:42.890 --> 43:43.890
寒树可理化的过程

43:45.890 --> 43:46.890
对对对

43:46.890 --> 43:47.890
那本质上都是利用必报

43:47.890 --> 43:48.890
以上都是利用必报

43:50.890 --> 43:51.890
那行了

43:51.890 --> 43:52.890
那这个

43:52.890 --> 43:53.890
那就到这儿完事

43:53.890 --> 43:54.890
完事

43:54.890 --> 43:56.890
主要是可理化的一个思想

43:56.890 --> 43:57.890
说清楚

43:57.890 --> 43:58.890
说清楚

43:58.890 --> 43:59.890
就是寒树拆入降维的过程

43:59.890 --> 44:01.890
原来是n个参数

44:01.890 --> 44:02.890
变成n-1个

44:02.890 --> 44:04.890
或者变成n个

44:04.890 --> 44:05.890
寒树去分别掉

44:05.890 --> 44:06.890
传n个参数

44:06.890 --> 44:07.890
这样的一个过程

44:09.890 --> 44:10.890
OK 这是第九题

44:10.890 --> 44:11.890
来吧

44:11.890 --> 44:12.890
第十题

44:12.890 --> 44:15.460
第十题是啥呀

44:15.460 --> 44:16.460
第十题

44:16.460 --> 44:17.460
浏览器

44:17.460 --> 44:18.460
页面空白的原因

44:18.460 --> 44:19.460
可能有哪些

44:19.460 --> 44:20.460
这个

44:20.460 --> 44:21.460
这个题有推述的啊吗

44:21.460 --> 44:22.460
可能有哪些

44:23.460 --> 44:24.460
浏览器

44:24.460 --> 44:25.460
空白页面

44:25.460 --> 44:47.350
可能有哪些

44:47.350 --> 44:48.350
看着很好

44:48.350 --> 44:49.350
我直接给大家写吧

44:49.350 --> 44:50.350
这个并不多

44:50.350 --> 44:51.350
首先干嘛呢

44:51.350 --> 44:54.350
页面就是个空页面

44:54.350 --> 44:59.690
是网络相关的过程

44:59.690 --> 45:00.690
网络相关的过程

45:00.690 --> 45:01.690
首先你打开的时候

45:01.690 --> 45:03.690
空白页面行不行

45:03.690 --> 45:04.690
首先你打开的时候

45:04.690 --> 45:05.690
空白页面

45:05.690 --> 45:06.690
这个可好理解

45:06.690 --> 45:08.690
我开的就是个空白页面

45:08.690 --> 45:09.690
浏览器返回的页面

45:09.690 --> 45:10.690
就是一个空白页面

45:10.690 --> 45:11.690
可以吧

45:11.690 --> 45:12.690
对吧

45:12.690 --> 45:13.690
第二个

45:15.690 --> 45:16.690
打开的就是一个空白页面

45:16.690 --> 45:17.690
所以说

45:17.690 --> 45:18.690
它是空白的

45:18.690 --> 45:19.690
没有问题

45:19.690 --> 45:20.690
那干嘛呢

45:20.690 --> 45:26.240
就是我们的页面资源过大

45:26.240 --> 45:27.240
页面资源过大

45:27.240 --> 45:28.240
怎么着呢

45:28.240 --> 45:33.020
就是正在加载

45:33.020 --> 45:34.020
就像你打开GTAB

45:34.020 --> 45:35.020
我们比较慢的

45:35.020 --> 45:36.020
转啊

45:36.020 --> 45:37.020
转啊

45:37.020 --> 45:38.020
对吧

45:38.020 --> 45:39.020
网络超值

45:39.020 --> 45:40.020
这都是

45:40.020 --> 45:41.020
也是空白页面

45:41.020 --> 45:42.020
你什么都看不到

45:42.020 --> 45:43.020
你什么都看不到

45:43.020 --> 45:44.020
那当然了

45:44.020 --> 45:46.020
还有什么呢

45:46.020 --> 45:48.020
我们这个GS

45:48.020 --> 45:52.900
执行错误

45:52.900 --> 45:54.900
GS执行错误

45:54.900 --> 45:55.900
什么呢

45:55.900 --> 45:56.900
就是我们GS

45:56.900 --> 45:57.900
整个页面没有问题

45:57.900 --> 45:58.900
我全然靠GS渲染

45:58.900 --> 45:59.900
但GS呢

45:59.900 --> 46:00.900
犯错误

46:00.900 --> 46:02.900
也就是说我们因为没渲染出来

46:02.900 --> 46:03.900
那

46:03.900 --> 46:04.900
还有什么呢

46:04.900 --> 46:06.900
这个可能说就是

46:06.900 --> 46:07.900
有点

46:07.900 --> 46:08.900
有点那啥了

46:08.900 --> 46:10.900
关于这个DS逆指出错

46:10.900 --> 46:12.900
DS逆指出错

46:14.900 --> 46:16.900
那可能说我们这样的一个

46:16.900 --> 46:17.900
印象

46:18.900 --> 46:20.900
或者说这个解析的时候

46:21.900 --> 46:22.900
有啊

46:22.900 --> 46:23.900
解析干嘛呢

46:23.900 --> 46:24.900
到了

46:24.900 --> 46:25.900
这个

46:25.900 --> 46:27.900
这个这个空白页面

46:31.850 --> 46:32.850
昨天咋了

46:32.850 --> 46:35.740
昨天咋了

46:35.740 --> 46:36.740
昨天怎么了

46:36.740 --> 46:42.480
那这个的话就是我们常常

46:42.480 --> 46:43.480
在面试的时候

46:43.480 --> 46:44.480
扶着这四点就可以了

46:44.480 --> 46:46.480
就是够用的

46:46.480 --> 46:47.480
昨天也有

46:47.480 --> 46:48.480
昨天也有回放

46:48.480 --> 46:50.480
昨天也有回放

46:50.480 --> 46:51.480
昨天也有

46:51.480 --> 46:52.480
今天直播

46:52.480 --> 46:53.480
现在是正在直播嘛

46:53.480 --> 46:55.480
正在直播嘛

46:55.480 --> 46:56.480
OK

46:56.480 --> 46:57.480
那所以说

46:57.480 --> 46:58.480
针对空白页面

46:58.480 --> 46:59.480
目前来说

46:59.480 --> 47:00.480
说到这就可以了

47:00.480 --> 47:01.480
那至于说

47:01.480 --> 47:02.480
或者说我们配置

47:02.480 --> 47:04.480
服务器错误的时候

47:04.480 --> 47:05.480
它反回的页面

47:05.480 --> 47:06.480
包括说

47:06.480 --> 47:07.480
这个这个这个

47:07.480 --> 47:08.480
其实

47:09.480 --> 47:10.480
面试的话可能问

47:10.480 --> 47:11.480
对吧

47:11.480 --> 47:12.480
这个出现

47:12.480 --> 47:13.480
这个错误

47:13.480 --> 47:14.480
页面出现空白

47:14.480 --> 47:15.480
可能那些情况

47:15.480 --> 47:16.480
并且怎么调试

47:16.480 --> 47:17.480
那样的话就需要

47:17.480 --> 47:18.480
看我们的空白输出

47:18.480 --> 47:19.480
看我们Network

47:19.480 --> 47:20.480
看网组请求

47:20.480 --> 47:21.480
包括说

47:21.480 --> 47:22.480
服务器的端

47:22.480 --> 47:23.480
那边对它做的什么处理

47:23.480 --> 47:25.480
它是一个整体的一个过程

47:25.480 --> 47:26.480
那在这呢

47:26.480 --> 47:27.480
就简单给大家

47:27.480 --> 47:28.480
总结出这四种

47:28.480 --> 47:30.480
你看的页面就是空白页面

47:30.480 --> 47:31.480
就是空白页面

47:31.480 --> 47:32.480
什么没有

47:32.480 --> 47:33.480
要不就是页面

47:33.480 --> 47:34.480
支援过大

47:34.480 --> 47:35.480
正在夹载呢

47:35.480 --> 47:36.480
而且它没做属同渲染

47:36.480 --> 47:37.480
这样的用功呢

47:37.480 --> 47:38.480
所以说前提就是白的

47:38.480 --> 47:39.480
后期还会现出来

47:39.480 --> 47:40.480
它就是我们页面

47:40.480 --> 47:41.480
GS干嘛报错了

47:41.480 --> 47:42.480
报错了整个页面

47:42.480 --> 47:43.480
不夹载了

47:43.480 --> 47:44.480
所以说它还是白页

47:44.480 --> 47:45.480
然后还有就是这个

47:45.480 --> 47:46.480
这个就

47:46.480 --> 47:47.480
这个的话就是硬靠了

47:47.480 --> 47:48.480
有点硬靠

47:48.480 --> 47:49.480
DNS解析出错

47:49.480 --> 47:51.480
访问的是一个空白地址

47:51.480 --> 47:52.480
可能

47:52.480 --> 47:53.480
这都是可能

47:53.480 --> 47:55.480
帮我跟刘兰棋有关

47:56.480 --> 47:57.480
好 这是第十题

47:57.480 --> 47:58.480
第十题

47:58.480 --> 47:59.480
这个大概了解一下就行

47:59.480 --> 48:00.480
然后接下来说之一题

48:00.480 --> 48:01.480
咱们刚才说的那个

48:01.480 --> 48:09.210
post和 guide 是吧

48:09.210 --> 48:10.210
post请求

48:10.210 --> 48:11.210
guide请求

48:11.210 --> 48:13.210
有同学多少了解不

48:13.210 --> 48:14.210
post请求

48:14.210 --> 48:15.210
跟guide请求

48:15.210 --> 48:17.780
同学了解不

48:23.220 --> 48:24.220
好 大哥无必说了

48:24.220 --> 48:26.220
一次还是两次

48:26.220 --> 48:27.220
不错

48:27.220 --> 48:29.220
post相对guide安全

48:29.220 --> 48:30.220
还有吗

48:30.220 --> 48:31.220
不了解

48:31.220 --> 48:33.220
好 没有吗

48:33.220 --> 48:34.220
还有吗

48:34.220 --> 48:35.220
post相对guide安全

48:35.220 --> 48:36.220
还有吗

48:36.220 --> 48:39.920
今天就这一块课呢

48:39.920 --> 48:40.920
你们是都能听到了

48:40.920 --> 48:41.920
请求体

48:41.920 --> 48:43.920
guide或许自己小一点

48:43.920 --> 48:45.920
guide post alias

48:45.920 --> 48:47.920
guide PUN

48:47.920 --> 48:48.920
地址上传

48:48.920 --> 48:49.920
还有吗

48:50.920 --> 48:51.920
行了

48:53.920 --> 48:54.920
来吧

48:54.920 --> 48:55.920
这道题答呢

48:55.920 --> 48:57.920
记住啊 从两个点答

48:57.920 --> 48:58.920
从两个点答

48:58.920 --> 48:59.920
第一个现象级

49:02.620 --> 49:03.620
现象级别

49:03.620 --> 49:04.620
就是我们能看到

49:04.620 --> 49:06.620
我们之光感受到的那种是啥呢

49:07.620 --> 49:09.620
我给大家写到这

49:09.620 --> 49:10.620
给大家写到这

49:10.620 --> 49:12.620
包括说我会对这个东西

49:12.620 --> 49:13.620
讲解 你们别着急

49:13.620 --> 49:15.620
并且你们都听得懂

49:15.620 --> 49:16.620
这个事情都听得懂

49:16.620 --> 49:17.620
什么呢

49:17.620 --> 49:18.620
guide请求

49:20.620 --> 49:21.620
回退安全

49:23.620 --> 49:24.620
guide请求回退安全

49:24.620 --> 49:26.620
然后post干嘛呢

49:26.620 --> 49:27.620
回退

49:27.620 --> 49:28.620
为什么

49:28.620 --> 49:29.620
重新发送

49:32.180 --> 49:33.180
重新发送

49:33.180 --> 49:34.180
然后第二个

49:34.180 --> 49:35.180
什么呢

49:38.180 --> 49:39.180
guide请求

49:39.180 --> 49:40.180
没有吗

49:40.180 --> 49:44.330
guide请求怎么着呢

49:45.330 --> 49:46.330
会被缓存

49:48.330 --> 49:49.330
post不会

49:52.020 --> 49:53.020
但是不是说它一定不会

49:53.020 --> 49:55.020
手动可以调整

49:58.550 --> 49:59.550
然后第三个

50:00.550 --> 50:01.550
怎么着呢

50:01.550 --> 50:02.550
我们的guide

50:03.550 --> 50:04.550
guide干嘛呢

50:06.550 --> 50:07.550
这个

50:09.550 --> 50:10.550
只能

50:10.550 --> 50:12.550
对URL

50:12.550 --> 50:13.550
进行编码

50:16.440 --> 50:17.440
进行编码

50:17.440 --> 50:18.440
但是我们这个

50:19.440 --> 50:20.440
只能进行

50:22.440 --> 50:23.440
而且

50:23.440 --> 50:24.440
post呢

50:26.440 --> 50:27.440
支持多种方式

50:35.640 --> 50:36.640
多种方式

50:37.640 --> 50:38.640
编码方式

50:38.640 --> 50:40.640
guide比较单一

50:40.640 --> 50:41.640
post比较多

50:41.640 --> 50:42.640
然后接下来

50:42.640 --> 50:43.640
就从你们说的那个

50:43.640 --> 50:45.640
post比guide更安全

50:49.780 --> 50:50.780
比guide更安全

50:51.780 --> 50:52.780
然后还有这个

50:54.780 --> 50:55.780
guide

50:55.780 --> 50:56.780
第五个

50:56.780 --> 50:57.780
什么呢

50:57.780 --> 50:59.780
guide有长度限制

51:03.350 --> 51:04.350
post没有

51:06.350 --> 51:07.350
post对所有编码

51:07.350 --> 51:08.350
对吧

51:08.350 --> 51:09.350
这个基本上是

51:09.350 --> 51:10.350
在面试的时候

51:10.350 --> 51:12.350
很多同学都会这么打

51:12.350 --> 51:14.350
但是你如果真这么打的话

51:14.350 --> 51:15.350
懂的面试官

51:15.350 --> 51:16.350
他还问你

51:18.350 --> 51:19.350
他就会

51:19.350 --> 51:21.350
按照你说的各个点

51:21.350 --> 51:22.350
他会继续问你

51:22.350 --> 51:23.350
他俩真有区别吗

51:24.350 --> 51:32.360
对吧

51:32.360 --> 51:33.360
对

51:33.360 --> 51:34.360
本质上没有区别

51:34.360 --> 51:35.360
我想问一下

51:35.360 --> 51:36.360
咱们现在有没有

51:36.360 --> 51:37.360
在听课的

51:37.360 --> 51:38.360
有没有在校大学生

51:38.360 --> 51:39.360
计算机专业的

51:39.360 --> 51:40.360
学过计算机网络的

51:43.500 --> 51:44.500
有没有计算机专业

51:44.500 --> 51:46.500
并且学过计算机网络的

51:46.500 --> 51:47.500
而且忘了

51:47.500 --> 51:48.500
差不多了的

51:48.500 --> 51:52.350
guide回对安全

51:52.350 --> 51:53.350
就是这个

51:53.350 --> 51:54.350
这个他回对正常回对

51:54.350 --> 51:55.350
不会影响

51:58.560 --> 51:59.560
就是

51:59.560 --> 52:00.560
行了

52:01.560 --> 52:02.560
来吧

52:02.560 --> 52:03.560
给大家这个

52:03.560 --> 52:04.560
说说底层原理

52:04.560 --> 52:05.560
说说底层原理

52:05.560 --> 52:06.560
顺便验证一下

52:06.560 --> 52:07.560
让你们看看

52:07.560 --> 52:08.560
计算机专业课

52:08.560 --> 52:10.560
就那么几门是重要的

52:11.560 --> 52:12.560
计算机算一个

52:12.560 --> 52:13.560
计算机网络算一个

52:15.560 --> 52:16.560
这个什么的

52:16.560 --> 52:17.560
底层原理

52:18.560 --> 52:19.560
接下来讲的东西

52:19.560 --> 52:20.560
你们都听得懂了

52:21.560 --> 52:22.560
不

52:23.560 --> 52:24.560
TCP协议

52:24.560 --> 52:25.560
对

52:25.560 --> 52:26.560
ok

52:26.560 --> 52:27.560
大家看着

52:29.560 --> 52:30.560
大家要明确

52:30.560 --> 52:31.560
大家要明确

52:31.560 --> 52:32.560
什么呢

52:32.560 --> 52:34.560
我们的guide和post

52:34.560 --> 52:35.560
它是什么

52:35.560 --> 52:37.560
guide和post是什么

52:37.560 --> 52:39.560
是http协议

52:39.560 --> 52:42.560
协议当中的两个方法

52:42.560 --> 52:46.860
两个请求方法

52:46.860 --> 52:47.860
对吧

52:47.860 --> 52:48.860
guide和post是

52:48.860 --> 52:50.860
rtp协议的两个请求方法

52:50.860 --> 52:51.860
那么问了

52:51.860 --> 52:53.860
rtp是基于谁的呢

52:53.860 --> 52:55.860
rtp是基于

52:55.860 --> 52:56.860
什么呢

52:57.860 --> 52:58.860
tcpip协议的

52:58.860 --> 52:59.860
对吧

52:59.860 --> 53:00.860
tcpip协议的

53:01.860 --> 53:02.860
那么

53:02.860 --> 53:03.860
那真是说

53:03.860 --> 53:05.860
tcpip

53:05.860 --> 53:06.860
对吧

53:06.860 --> 53:07.860
tcpip

53:07.860 --> 53:08.860
他发送

53:08.860 --> 53:09.860
tcpip

53:09.860 --> 53:10.860
他发送

53:10.860 --> 53:11.860
这个干的请求也好

53:11.860 --> 53:12.860
post的请求也好

53:12.860 --> 53:14.860
原则上是一样的

53:14.860 --> 53:15.860
只不过

53:15.860 --> 53:16.860
名字是一样的

53:18.860 --> 53:19.860
对吧

53:19.860 --> 53:20.860
tcpip

53:20.860 --> 53:21.860
你只不过发的是一个guide

53:21.860 --> 53:22.860
一个post的请求

53:23.860 --> 53:24.860
本质上是一样的

53:25.860 --> 53:30.540
本质上是一样的

53:31.540 --> 53:32.540
而且说

53:32.540 --> 53:33.540
做一样的事情

53:33.540 --> 53:34.540
也记录上完全行动通

53:35.540 --> 53:45.400
完全行动通

53:45.400 --> 53:46.400
那为什么要给它分成

53:47.400 --> 53:48.400
post的和guide

53:49.400 --> 53:50.400
对吧

53:50.400 --> 53:51.400
也就是说

53:51.400 --> 53:52.400
我们为什么会得到这么多

53:52.400 --> 53:53.400
现象级的答案呢

53:55.400 --> 54:02.590
tcp

54:02.590 --> 54:03.590
utp咱们不说了

54:04.590 --> 54:05.590
这个安全

54:07.590 --> 54:08.590
无可扣交付

54:08.590 --> 54:09.590
有可扣交付

54:09.590 --> 54:10.590
咱们不说了

54:10.590 --> 54:11.590
咱就说tcp就可以了

54:11.590 --> 54:12.590
包括说

54:12.590 --> 54:13.590
上面说了

54:13.590 --> 54:14.590
本质上

54:14.590 --> 54:15.590
它俩真的没啥区别

54:15.590 --> 54:16.590
guide能做的

54:16.590 --> 54:17.590
post也能做

54:17.590 --> 54:18.590
post做的

54:18.590 --> 54:19.590
guide也能做

54:19.590 --> 54:20.590
与意不同

54:20.590 --> 54:21.590
对吧

54:21.590 --> 54:22.590
规则不一样

54:22.590 --> 54:23.590
咱们今天来探究一下

54:23.590 --> 54:24.590
为什么规则不一样

54:24.590 --> 54:25.590
也就是说

54:25.590 --> 54:26.590
为什么会有上面

54:26.590 --> 54:27.590
级的一个问题

54:28.590 --> 54:29.590
为什么会有现象级的

54:29.590 --> 54:30.590
一个问题

54:30.590 --> 54:31.590
首先给他们讲个故事

54:31.590 --> 54:32.590
接下来又到咱们

54:32.590 --> 54:33.590
习惯的这个讲故事的

54:33.590 --> 54:34.590
一个阶段

54:34.590 --> 54:35.590
首先tcp

54:35.590 --> 54:38.900
也是我们的这个万维网

54:39.900 --> 54:40.900
万维网

54:40.900 --> 54:41.900
干嘛呢

54:41.900 --> 54:42.900
这个tcp是我们

54:42.900 --> 54:43.900
这个万维网

54:43.900 --> 54:45.900
世界当中的

54:45.900 --> 54:46.900
若干请求

54:46.900 --> 54:47.900
对吧

54:47.900 --> 54:48.900
这个就是万维网

54:48.900 --> 54:50.900
怎么说呢

54:50.900 --> 54:51.900
来啊

54:51.900 --> 54:52.900
tcp干嘛呢

54:52.900 --> 54:54.900
相当于

54:55.900 --> 54:56.900
看着啊

54:56.900 --> 54:57.900
听懂听就完了

54:57.900 --> 54:58.900
不懂的话说啊

54:58.900 --> 54:59.900
tcp相当于

54:59.900 --> 55:00.900
万维网当中的什么呢

55:00.900 --> 55:01.900
哥

55:01.900 --> 55:02.900
那个哥

55:02.900 --> 55:03.900
咱们昨天讲那个

55:03.900 --> 55:04.900
讲这个

55:04.900 --> 55:06.900
这个这个房斗节流的时候

55:06.900 --> 55:07.900
跟大家说过

55:07.900 --> 55:08.900
对吧

55:08.900 --> 55:09.900
tcp请求相当于

55:09.900 --> 55:10.900
万维网当中的车

55:10.900 --> 55:12.900
那你说这个

55:12.900 --> 55:13.900
那车咋了呢

55:13.900 --> 55:14.900
每次t

55:14.900 --> 55:15.900
每次tcp请求

55:15.900 --> 55:17.900
都相当于一辆车

55:18.900 --> 55:20.900
那你说那多次tcp

55:20.900 --> 55:21.900
请求会怎么样呢

55:22.900 --> 55:23.900
那你想想

55:23.900 --> 55:24.900
大街上跑的

55:24.900 --> 55:25.900
如果是一样的车

55:25.900 --> 55:26.900
会怎么样

55:28.900 --> 55:29.900
如果车都是一个样

55:29.900 --> 55:30.900
就是大街上跑的

55:30.900 --> 55:31.900
车都是一样的

55:31.900 --> 55:32.900
会怎么样

55:33.900 --> 55:34.900
那车的一个权限

55:34.900 --> 55:35.900
是不是就没有

55:35.900 --> 55:36.900
轻重缓急了

55:37.900 --> 55:38.900
对吧

55:38.900 --> 55:39.900
过车能做什么事

55:39.900 --> 55:40.900
火车能做什么事

55:40.900 --> 55:41.900
救护车能做什么事

55:41.900 --> 55:43.900
修房车能做什么事

55:44.900 --> 55:45.900
对吧

55:45.900 --> 55:46.900
那tcp干嘛呢

55:46.900 --> 55:47.900
就是相当于这里边

55:47.900 --> 55:48.900
车

55:48.900 --> 55:49.900
并且每个tcp

55:49.900 --> 55:50.900
原则上都是一样的

55:50.900 --> 55:54.750
也先

55:54.750 --> 55:55.750
都不是分这个道

55:55.750 --> 55:56.750
都是一样的

55:57.750 --> 55:58.750
都是一样的

55:58.750 --> 55:59.750
都是一样的

55:59.750 --> 56:00.750
也就是一样的车

56:01.750 --> 56:02.750
那一样的车

56:02.750 --> 56:03.750
会干嘛呢

56:03.750 --> 56:04.750
给我们带来混乱

56:04.750 --> 56:07.450
为什么

56:07.450 --> 56:08.450
大家都一样

56:08.450 --> 56:09.450
谁先走

56:09.450 --> 56:10.450
谁后走

56:10.450 --> 56:11.450
谁有优先机

56:12.450 --> 56:13.450
对吧

56:13.450 --> 56:14.450
这么说来说

56:14.450 --> 56:15.450
tcp都是一样的

56:15.450 --> 56:16.450
都是一样的

56:17.450 --> 56:18.450
我们生活中

56:18.450 --> 56:19.450
如果车都是一样的话

56:19.450 --> 56:20.450
就坏了

56:20.450 --> 56:21.450
我们有火车

56:21.450 --> 56:24.590
火车

56:26.590 --> 56:27.590
这个

56:27.590 --> 56:28.590
它竟然不支持我

56:28.590 --> 56:29.590
我这个

56:29.590 --> 56:33.380
我今天

56:33.380 --> 56:34.380
我特意玩这一下

56:34.380 --> 56:35.380
火车

56:35.380 --> 56:43.380
你看

56:43.380 --> 56:44.380
对吧

56:44.380 --> 56:47.720
有这个车

56:47.720 --> 56:51.250
是吧

56:51.250 --> 56:52.250
有这个车

56:52.250 --> 56:53.250
有这个车

56:53.250 --> 56:54.250
还有这个车

56:54.250 --> 56:55.250
还有这个车

56:55.250 --> 56:56.250
是吧

56:56.250 --> 56:57.250
就是

56:57.250 --> 56:58.250
这个

56:58.250 --> 56:59.250
就是

56:59.250 --> 57:00.250
我们生活中

57:00.250 --> 57:01.250
也有很多车

57:01.250 --> 57:02.250
你警车

57:02.250 --> 57:03.250
消防车

57:03.250 --> 57:04.250
救护车

57:04.250 --> 57:05.250
对吧

57:05.250 --> 57:06.250
包括火车

57:06.250 --> 57:07.250
很多车

57:07.250 --> 57:09.250
生活中很多车

57:09.250 --> 57:10.250
而且

57:10.250 --> 57:11.250
为什么要分这么多车

57:11.250 --> 57:12.250
就是生活中

57:12.250 --> 57:13.250
为了避免混乱

57:13.250 --> 57:14.250
大家都一样

57:14.250 --> 57:15.250
谁有优先机

57:15.250 --> 57:16.250
对吧

57:16.250 --> 57:17.250
大家都一样

57:17.250 --> 57:18.250
你去救人的话

57:18.250 --> 57:19.250
那你凭什么闯红绿灯

57:19.250 --> 57:20.250
对吧

57:20.250 --> 57:21.250
你就像

57:22.250 --> 57:23.250
包括我们的快递也是

57:23.250 --> 57:24.250
为什么有顺风

57:24.250 --> 57:25.250
对吧

57:25.250 --> 57:26.250
有圆筒

57:26.250 --> 57:27.250
这么多筒

57:27.250 --> 57:28.250
包括说顺风

57:28.250 --> 57:29.250
特点快

57:29.250 --> 57:30.250
我们有的时候

57:30.250 --> 57:31.250
就需要这种快的

57:31.250 --> 57:32.250
有的时候

57:32.250 --> 57:33.250
就需要那种

57:33.250 --> 57:34.250
又便宜

57:34.250 --> 57:35.250
发物量大的

57:35.250 --> 57:36.250
我们是有需求

57:37.250 --> 57:38.250
我们是有需求

57:38.250 --> 57:39.250
那同样

57:39.250 --> 57:40.250
这么多车

57:40.250 --> 57:41.250
灵魂类

57:41.250 --> 57:42.250
同样

57:42.250 --> 57:43.250
PCP也是

57:43.250 --> 57:44.250
那可以

57:44.250 --> 57:45.250
可以

57:45.250 --> 57:47.250
怎么不行呢

57:48.250 --> 57:49.250
你包括在空台里面

57:49.250 --> 57:50.250
都能输出

57:50.250 --> 57:51.250
有啥不行的

57:51.250 --> 57:52.250
你别用扎瓦式

57:52.250 --> 57:58.140
扎瓦不行

57:58.140 --> 57:59.140
对

57:59.140 --> 58:00.140
想想

58:00.140 --> 58:01.140
可以

58:01.140 --> 58:02.140
为啥不行的

58:02.140 --> 58:03.140
为啥不行的

58:03.140 --> 58:04.140
就很多

58:06.140 --> 58:08.580
来

58:08.580 --> 58:09.580
说到这

58:09.580 --> 58:10.580
说到这

58:10.580 --> 58:11.580
咱给大家举

58:11.580 --> 58:12.580
这个车的例子

58:12.580 --> 58:13.580
干嘛呢

58:13.580 --> 58:14.580
就是

58:14.580 --> 58:16.580
就是为了避免混乱

58:17.580 --> 58:18.580
为了避免混乱

58:18.580 --> 58:19.580
啥样混乱

58:19.580 --> 58:20.580
大家都一样

58:21.580 --> 58:22.580
大家都一样的混乱

58:22.580 --> 58:23.580
为了避免混乱

58:23.580 --> 58:24.580
干啥呢

58:24.580 --> 58:25.580
这个

58:25.580 --> 58:26.580
这个

58:26.580 --> 58:27.580
LTP

58:27.580 --> 58:28.580
干嘛呢

58:28.580 --> 58:29.580
设定了

58:29.580 --> 58:30.580
一些

58:30.580 --> 58:33.540
这个

58:33.540 --> 58:34.540
这个

58:34.540 --> 58:37.040
服类别

58:37.040 --> 58:38.040
设定了一些服类别

58:38.040 --> 58:39.040
那这些服类别

58:39.040 --> 58:40.040
就是什么呢

58:40.040 --> 58:41.040
大家厂饭的

58:41.040 --> 58:42.040
get

58:42.040 --> 58:43.040
post

58:43.040 --> 58:44.040
什么的

58:44.040 --> 58:45.040
这个这个

58:45.040 --> 58:46.040
这个port

58:46.040 --> 58:47.040
这些

58:47.040 --> 58:48.040
啊

58:48.040 --> 58:49.040
这些请求

58:49.040 --> 58:50.040
那有了这些请求

58:50.040 --> 58:51.040
还有啥呢

58:51.040 --> 58:52.040
这个

58:52.040 --> 58:53.040
这个

58:53.040 --> 58:54.040
这个有了这些类别

58:54.040 --> 58:55.040
他们能干啥呢

58:55.040 --> 58:56.040
ok

58:56.040 --> 58:57.040
对你看

58:57.040 --> 58:58.040
如果发送一个LTP请求

58:58.040 --> 58:59.040
对吧

58:59.040 --> 59:00.040
建立一个TPP链接

59:00.040 --> 59:01.040
LTP请求干嘛呢

59:01.040 --> 59:02.040
是get的请求

59:03.040 --> 59:05.040
当你发送的是get的请求

59:06.040 --> 59:07.040
干嘛呢

59:07.040 --> 59:08.040
给你这个get的请求

59:08.040 --> 59:09.040
给你这个

59:09.040 --> 59:10.040
给你这个请求

59:10.040 --> 59:11.040
给你个车

59:11.040 --> 59:12.040
对吧

59:12.040 --> 59:13.040
说了这个请求

59:13.040 --> 59:14.040
想想一个车嘛

59:14.040 --> 59:16.480
干嘛呢

59:16.480 --> 59:17.480
接上一个

59:17.480 --> 59:18.480
get的标签

59:18.480 --> 59:19.480
啊

59:19.480 --> 59:20.480
意味着他是get的请求

59:20.480 --> 59:22.480
跟get的相关的这样的一辆车

59:22.480 --> 59:23.480
啊

59:23.480 --> 59:24.480
包括说这个这个这个这个

59:24.480 --> 59:26.480
咱普通车上面有一个那个

59:26.480 --> 59:27.480
请问

59:27.480 --> 59:28.480
是吧

59:28.480 --> 59:29.480
这类似啊

59:29.480 --> 59:30.480
类似干嘛呢

59:30.480 --> 59:31.480
那get的请求

59:31.480 --> 59:32.480
对吧

59:32.480 --> 59:33.480
给他天上get的标签

59:33.480 --> 59:35.480
他说明要做get的相关的服务

59:35.480 --> 59:36.480
那get的车干嘛呢

59:36.480 --> 59:37.480
哎

59:37.480 --> 59:38.480
对于这样的一个车

59:38.480 --> 59:39.480
他有特点什么的

59:39.480 --> 59:40.480
装货的时候

59:40.480 --> 59:43.240
啊

59:43.240 --> 59:44.240
装货的时候装装的

59:44.240 --> 59:45.240
哎

59:45.240 --> 59:46.240
装到车顶

59:47.240 --> 59:48.240
啊

59:48.240 --> 59:50.240
车顶的就是相当于我们的这个

59:50.240 --> 59:51.240
uhl

59:51.240 --> 59:52.240
啊

59:52.240 --> 59:54.240
我们这个这个uhl上面

59:54.240 --> 59:55.240
装货的时候装的设定

59:55.240 --> 59:56.240
那原则上啊

59:56.240 --> 59:57.240
原则上

59:57.240 --> 59:58.240
只要

59:58.240 --> 59:59.240
你摆的足够好

59:59.240 --> 01:00:00.240
对吧

01:00:00.240 --> 01:00:05.240
车顶随便装

01:00:05.240 --> 01:00:07.240
如果你摆的足够好

01:00:07.240 --> 01:00:10.240
你车顶随便装

01:00:10.240 --> 01:00:11.240
啊

01:00:11.240 --> 01:00:12.240
但是那你想想

01:00:12.240 --> 01:00:13.240
那你往一个地方拉货

01:00:13.240 --> 01:00:15.240
卸货的人也不上

01:00:15.240 --> 01:00:16.240
对吧

01:00:16.240 --> 01:00:17.240
你车上面装了这么多内容

01:00:17.240 --> 01:00:18.240
我卸货也费劲呢

01:00:18.240 --> 01:00:20.240
于是干嘛呢

01:00:20.240 --> 01:00:21.240
人为规定

01:00:21.240 --> 01:00:22.240
啊

01:00:22.240 --> 01:00:23.240
什么呢

01:00:23.240 --> 01:00:24.240
我们的uhl最大2k

01:00:24.240 --> 01:00:26.240
这是人为规定的

01:00:26.240 --> 01:00:28.240
那这是人为规定的

01:00:28.240 --> 01:00:30.240
人为规定最大2k

01:00:30.240 --> 01:00:32.240
就是我们的uhl上面

01:00:32.240 --> 01:00:33.240
啊

01:00:33.240 --> 01:00:34.240
那pose呢

01:00:34.240 --> 01:00:35.240
那跟这个概特类似嘛

01:00:35.240 --> 01:00:36.240
对吧

01:00:36.240 --> 01:00:37.240
那你pose的请求呢

01:00:37.240 --> 01:00:38.240
对吧

01:00:38.240 --> 01:00:39.240
来个车

01:00:39.240 --> 01:00:41.240
上面贴个pose的标签

01:00:41.240 --> 01:00:42.240
啊

01:00:42.240 --> 01:00:43.240
那pose标签干嘛呢

01:00:43.240 --> 01:00:44.240
那pose它

01:00:44.240 --> 01:00:46.240
可以装货里啊

01:00:46.240 --> 01:00:47.240
你献高

01:00:47.240 --> 01:00:48.240
那pose干嘛呢

01:00:48.240 --> 01:00:53.150
把货装到车里

01:00:53.150 --> 01:00:55.150
啊装到车里

01:00:55.150 --> 01:00:56.150
那装到车里

01:00:56.150 --> 01:00:58.150
而且车呢非常大啊

01:00:58.150 --> 01:00:59.150
就是我们车

01:00:59.150 --> 01:01:00.150
一个是在车的外面

01:01:00.150 --> 01:01:01.150
一个在车的里面

01:01:01.150 --> 01:01:02.150
但你想想

01:01:02.150 --> 01:01:03.150
我当我打结一辆车的时候

01:01:03.150 --> 01:01:06.150
别管这个这个货物在车上面

01:01:06.150 --> 01:01:07.150
还是货物在车里面

01:01:07.150 --> 01:01:08.150
我都拿得到

01:01:08.150 --> 01:01:09.150
所以说

01:01:09.150 --> 01:01:10.150
它俩的安全性

01:01:10.150 --> 01:01:11.150
原则上是一样的

01:01:11.150 --> 01:01:12.150
你知道吧

01:01:12.150 --> 01:01:13.150
安全性原则上是一样的

01:01:13.150 --> 01:01:14.150
你想想

01:01:14.150 --> 01:01:15.150
我能

01:01:15.150 --> 01:01:17.150
或篮捷干的请求

01:01:17.150 --> 01:01:18.150
我看一下uhl

01:01:18.150 --> 01:01:19.150
我能会

01:01:19.150 --> 01:01:20.150
篮捷到pose的请求

01:01:20.150 --> 01:01:21.150
我看他要包队

01:01:21.150 --> 01:01:22.150
原则上

01:01:22.150 --> 01:01:24.150
这个服务器拆包是一样的

01:01:24.150 --> 01:01:25.150
都能看到

01:01:25.150 --> 01:01:26.150
没有安全性可言

01:01:26.150 --> 01:01:27.150
那接下来还说

01:01:27.150 --> 01:01:28.150
对吧

01:01:28.150 --> 01:01:29.150
那你说

01:01:29.150 --> 01:01:30.150
盖的请求

01:01:30.150 --> 01:01:31.150
我们是在车顶上装东西

01:01:31.150 --> 01:01:32.150
那盖的车里面

01:01:32.150 --> 01:01:33.150
能不能装

01:01:33.150 --> 01:01:34.150
也可以啊

01:01:34.150 --> 01:01:35.150
对吧

01:01:35.150 --> 01:01:36.150
那pose的请求

01:01:36.150 --> 01:01:37.150
pose的规定是

01:01:37.150 --> 01:01:38.150
你要装到车里面

01:01:38.150 --> 01:01:39.150
那你说我

01:01:39.150 --> 01:01:41.150
我装车上面行不行

01:01:41.150 --> 01:01:42.150
也行啊

01:01:42.150 --> 01:01:43.150
对吧

01:01:43.150 --> 01:01:44.150
那这句说

01:01:44.150 --> 01:01:45.150
盖的请求

01:01:45.150 --> 01:01:46.150
pose请求这样的一个特点

01:01:46.150 --> 01:01:47.150
那谁规定的呢

01:01:47.150 --> 01:01:48.150
服务器那边规定的

01:01:48.150 --> 01:01:49.150
对吧

01:01:49.150 --> 01:01:50.150
你给我发来这个东西呢

01:01:50.150 --> 01:01:51.150
我只能车顶的

01:01:51.150 --> 01:01:52.150
看啊

01:01:52.150 --> 01:01:53.150
对于盖的请求

01:01:53.150 --> 01:01:54.150
pose的呢

01:01:54.150 --> 01:01:55.150
你这个你你

01:01:55.150 --> 01:01:56.150
你车顶上的我不看

01:01:56.150 --> 01:01:57.150
我只看车里面的

01:01:57.150 --> 01:01:58.150
啊

01:01:58.150 --> 01:01:59.150
所以说

01:01:59.150 --> 01:02:00.150
他俩是真的一样

01:02:00.150 --> 01:02:01.150
真的没差什么

01:02:01.150 --> 01:02:02.150
啊

01:02:02.150 --> 01:02:03.150
真的没差什么

01:02:03.150 --> 01:02:04.150
因为说了

01:02:04.150 --> 01:02:05.150
盖的和pose的本身

01:02:05.150 --> 01:02:06.150
都是tcp

01:02:06.150 --> 01:02:07.150
没有真正的区别

01:02:07.150 --> 01:02:08.150
只不过人为规定

01:02:08.150 --> 01:02:09.150
对吧

01:02:09.150 --> 01:02:10.150
盖的这样的一张车

01:02:10.150 --> 01:02:11.150
他拉的货就得拉

01:02:11.150 --> 01:02:12.150
就是拉的外面

01:02:12.150 --> 01:02:13.150
让人们看着

01:02:13.150 --> 01:02:14.150
pose的请求呢

01:02:14.150 --> 01:02:15.150
他拉的货呢

01:02:15.150 --> 01:02:16.150
就该放到

01:02:16.150 --> 01:02:17.150
所谓的寒树皮里面

01:02:17.150 --> 01:02:18.150
放到车里面

01:02:18.150 --> 01:02:19.150
让人看不到

01:02:19.150 --> 01:02:20.150
但一一旦

01:02:20.150 --> 01:02:21.150
要被设卡拦截之后

01:02:21.150 --> 01:02:22.150
你别管车

01:02:22.150 --> 01:02:23.150
车上面的车里面的

01:02:23.150 --> 01:02:24.150
我该查都查

01:02:24.150 --> 01:02:25.150
谁也跑不了

01:02:25.150 --> 01:02:26.150
啊

01:02:26.150 --> 01:02:27.150
谁也跑不了

01:02:27.150 --> 01:02:28.150
那所以说

01:02:28.150 --> 01:02:29.150
那本身上

01:02:29.150 --> 01:02:30.150
他俩是没有

01:02:30.150 --> 01:02:31.150
没有区别的

01:02:31.150 --> 01:02:32.150
只不过说

01:02:32.150 --> 01:02:33.150
起了一个类别

01:02:33.150 --> 01:02:34.150
啊

01:02:34.150 --> 01:02:35.150
起了一个类别

01:02:35.150 --> 01:02:36.150
然后那真正的

01:02:36.150 --> 01:02:37.150
你说tose

01:02:37.150 --> 01:02:38.150
跟get

01:02:38.150 --> 01:02:40.850
真正的区别是啥呢

01:02:40.850 --> 01:02:41.850
对吧

01:02:41.850 --> 01:02:43.850
就是请求四处

01:02:43.850 --> 01:02:44.850
啊

01:02:44.850 --> 01:02:45.850
请求四处

01:02:45.850 --> 01:02:46.850
但是这个呢

01:02:46.850 --> 01:02:47.850
不同扭览器还不一样

01:02:47.850 --> 01:02:48.850
啊

01:02:48.850 --> 01:02:49.850
对对对对

01:02:49.850 --> 01:02:50.850
哎

01:02:50.850 --> 01:02:51.850
get

01:02:51.850 --> 01:02:52.850
要开一次车

01:02:52.850 --> 01:02:55.420
啊

01:02:55.420 --> 01:02:56.420
pose

01:02:56.420 --> 01:03:01.220
开两次

01:03:01.220 --> 01:03:02.220
哎

01:03:02.220 --> 01:03:03.220
火火一次是吧

01:03:03.220 --> 01:03:04.220
ok啊对吧

01:03:04.220 --> 01:03:05.220
那啥要一次车

01:03:05.220 --> 01:03:06.220
你看啊

01:03:06.220 --> 01:03:07.220
get开一次车

01:03:07.220 --> 01:03:08.220
为啥开一次车呢

01:03:08.220 --> 01:03:09.220
咱们认为限定他

01:03:09.220 --> 01:03:10.220
两k

01:03:10.220 --> 01:03:11.220
那以后你最多拉这些

01:03:11.220 --> 01:03:12.220
对吧

01:03:12.220 --> 01:03:13.220
那pose呢

01:03:13.220 --> 01:03:14.220
干嘛呢

01:03:14.220 --> 01:03:15.220
跑两第二辆车

01:03:15.220 --> 01:03:16.220
告诉是过战

01:03:16.220 --> 01:03:17.220
我们要来一批货物

01:03:17.220 --> 01:03:18.220
你们多准备点人

01:03:18.220 --> 01:03:19.220
多准备点人力

01:03:19.220 --> 01:03:20.220
来接货

01:03:20.220 --> 01:03:21.220
然后第二次请求

01:03:21.220 --> 01:03:22.220
才是我们真正的内容

01:03:24.220 --> 01:03:25.220
能懂吗

01:03:25.220 --> 01:03:26.220
一次pose两次

01:03:26.220 --> 01:03:27.220
在面试的时候

01:03:27.220 --> 01:03:28.220
你能把这个

01:03:28.220 --> 01:03:29.220
给面试官说完

01:03:29.220 --> 01:03:30.220
他瞬间就服了

01:03:30.220 --> 01:03:31.220
能懂吗

01:03:31.220 --> 01:03:32.220
就已经是服服的

01:03:33.220 --> 01:03:34.220
啊

01:03:34.220 --> 01:03:35.220
就现象级别的

01:03:35.220 --> 01:03:36.220
是什么安全啊

01:03:36.220 --> 01:03:37.220
对吧

01:03:37.220 --> 01:03:38.220
因为一个url

01:03:38.220 --> 01:03:39.220
我们直接能看

01:03:39.220 --> 01:03:40.220
一个包袋里面

01:03:40.220 --> 01:03:41.220
我们不是技术人员

01:03:41.220 --> 01:03:42.220
我们看不到

01:03:42.220 --> 01:03:43.220
啊

01:03:43.220 --> 01:03:44.220
那至于说

01:03:44.220 --> 01:03:45.220
这个这个这个

01:03:45.220 --> 01:03:46.220
页面中的一个感觉呢

01:03:46.220 --> 01:03:47.220
这些也看不到

01:03:47.220 --> 01:03:48.220
啊

01:03:48.220 --> 01:03:49.220
也看不到

01:03:49.220 --> 01:03:50.220
然后就是说

01:03:50.220 --> 01:03:51.220
包括编码呀

01:03:51.220 --> 01:03:52.220
编码设置用力扣的编码

01:03:52.220 --> 01:03:53.220
包括其他人质

01:03:53.220 --> 01:03:54.220
这个呢

01:03:54.220 --> 01:03:55.220
也就是说他

01:03:55.220 --> 01:03:56.220
这个分类做的一个处理

01:03:56.220 --> 01:03:57.220
就算相当于这个车

01:03:57.220 --> 01:03:59.220
他能做什么样的功能一样

01:03:59.220 --> 01:04:01.660
啊

01:04:03.660 --> 01:04:04.660
包括可能说

01:04:04.660 --> 01:04:05.660
你们在学校学的这个

01:04:05.660 --> 01:04:06.660
可能跟丁老师讲的不一样

01:04:06.660 --> 01:04:07.660
那这个

01:04:07.660 --> 01:04:08.660
本质上是一样的

01:04:08.660 --> 01:04:09.660
啊

01:04:09.660 --> 01:04:10.660
强调tcp

01:04:10.660 --> 01:04:11.660
就是盖的请求

01:04:11.660 --> 01:04:12.660
pose请求

01:04:12.660 --> 01:04:13.660
本质上发的都是tcpip

01:04:13.660 --> 01:04:14.660
这样的一个请求

01:04:14.660 --> 01:04:15.660
基于这样的一个协议

01:04:15.660 --> 01:04:16.660
去发的请求

01:04:16.660 --> 01:04:17.660
本质上是一样的

01:04:17.660 --> 01:04:18.660
只不过

01:04:18.660 --> 01:04:19.660
那

01:04:19.660 --> 01:04:21.660
只不过是这个这个这个这个

01:04:22.660 --> 01:04:23.660
只不过是这个这个

01:04:23.660 --> 01:04:24.660
人为的给他限定了

01:04:24.660 --> 01:04:25.660
概特要做什么

01:04:25.660 --> 01:04:26.660
pose要做什么

01:04:26.660 --> 01:04:27.660
这样的一个操作

01:04:31.100 --> 01:04:32.100
因为这个嘛

01:04:32.100 --> 01:04:33.100
确实这个故事

01:04:33.100 --> 01:04:34.100
因为比较让同学们理解

01:04:34.100 --> 01:04:36.100
比较让同学们去理解

01:04:36.100 --> 01:04:37.100
所以说

01:04:37.100 --> 01:04:38.100
用这个

01:04:38.100 --> 01:04:39.100
用这个

01:04:39.100 --> 01:04:40.100
而且大家也好记

01:04:43.120 --> 01:04:44.120
那这样的话

01:04:44.120 --> 01:04:45.120
这样的话

01:04:45.120 --> 01:04:47.120
pose跟概特的请求位

01:04:47.120 --> 01:04:48.120
就是一次两次

01:04:48.120 --> 01:04:49.120
其他的

01:04:49.120 --> 01:04:50.120
没什么

01:04:50.120 --> 01:04:51.120
就是一样的

01:04:51.120 --> 01:04:52.120
那一样你得说清楚

01:04:52.120 --> 01:04:53.120
为什么是一样

01:04:53.120 --> 01:04:54.120
而且我们经常说的

01:04:54.120 --> 01:04:56.120
概特是用来护取数据的

01:04:56.120 --> 01:04:57.120
pose用来发送数据的

01:04:57.120 --> 01:04:58.120
没意义就是

01:04:58.120 --> 01:04:59.120
一个在请求题里面

01:04:59.120 --> 01:05:01.120
一个是通过 URL 发送的

01:05:01.120 --> 01:05:02.120
本质上是一样的

01:05:05.580 --> 01:05:06.580
多录附用

01:05:06.580 --> 01:05:08.580
包括发动窗口

01:05:08.580 --> 01:05:09.580
这个咱就不说了

01:05:09.580 --> 01:05:10.580
包括

01:05:10.580 --> 01:05:11.580
你说这个 ATP

01:05:11.580 --> 01:05:12.580
不安全咋样

01:05:12.580 --> 01:05:13.580
ATPS

01:05:13.580 --> 01:05:14.580
加了个 s 加了个 cf

01:05:14.580 --> 01:05:15.580
对吧

01:05:15.580 --> 01:05:16.580
包括 ATP

01:05:16.580 --> 01:05:17.580
s 在ATV的区别

01:05:17.580 --> 01:05:18.580
啥呢

01:05:18.580 --> 01:05:19.580
这咱就不说了

01:05:19.580 --> 01:05:20.580
咱们不说了

01:05:20.580 --> 01:05:21.580
咱后面还有题呢

01:05:21.580 --> 01:05:22.580
咱们还有题呢

01:05:27.880 --> 01:05:30.770
那这个呢

01:05:30.770 --> 01:05:31.770
就是咱们关于这个pose

01:05:31.770 --> 01:05:32.770
概特请求的

01:05:32.770 --> 01:05:33.770
这样的一个题

01:05:33.770 --> 01:05:34.770
这样的一个题

01:05:34.770 --> 01:05:35.770
OK

01:05:35.770 --> 01:05:36.770
十一题

01:05:36.770 --> 01:05:37.770
终于快结束了

01:05:41.810 --> 01:05:42.810
十二题

01:05:42.810 --> 01:05:46.140
十二题是啥

01:05:46.140 --> 01:05:48.140
cookie session storage

01:05:48.140 --> 01:05:50.140
local storage的一个区别

01:05:53.860 --> 01:05:54.860
本电话存储

01:06:00.120 --> 01:06:03.010
本电话存储

01:06:03.010 --> 01:06:04.010
本电话存储

01:06:07.010 --> 01:06:08.010
好了

01:06:08.010 --> 01:06:12.110
来看十二题

01:06:13.110 --> 01:06:14.110
那对于无论是我们的

01:06:15.110 --> 01:06:24.120
我就直接搞了

01:06:24.120 --> 01:06:27.120
那肯定讲了

01:06:27.120 --> 01:06:28.120
用法咱们不讲

01:06:28.120 --> 01:06:29.120
用法咱们不讲

01:06:29.120 --> 01:06:30.120
用那个东西

01:06:30.120 --> 01:06:31.120
看文档就是

01:06:31.120 --> 01:06:33.120
用法咱们不讲

01:06:33.120 --> 01:06:35.120
cookie 跟 session

01:06:35.120 --> 01:06:37.120
session 服务端的东西咱们不说了

01:06:37.120 --> 01:06:39.120
但是 session 也是基于 cookie 做的

01:06:39.120 --> 01:06:41.120
这个 session 咱们不说了

01:06:41.120 --> 01:06:44.120
咱说的是 cookie 以及说

01:06:45.120 --> 01:06:48.120
local storage

01:06:50.940 --> 01:06:51.940
session storage

01:06:56.180 --> 01:06:59.180
对于TASA

01:06:59.180 --> 01:07:01.180
TASA 的一个区别

01:07:01.180 --> 01:07:02.180
TASA 的一个区别干嘛呢

01:07:02.180 --> 01:07:03.180
都可以被称作什么呢

01:07:03.180 --> 01:07:05.180
我们这个

01:07:05.180 --> 01:07:07.180
本电话存储

01:07:07.180 --> 01:07:08.180
本电话存储

01:07:08.180 --> 01:07:10.180
那么对于这些值

01:07:10.180 --> 01:07:11.180
干嘛呢

01:07:11.180 --> 01:07:13.180
我们从三四个维度去说它吧

01:07:13.180 --> 01:07:15.180
首先生命周期这回事

01:07:16.180 --> 01:07:17.180
生命周期

01:07:20.700 --> 01:07:21.700
生命周期

01:07:21.700 --> 01:07:25.270
那对于我们的一个 cookie

01:07:25.270 --> 01:07:26.270
干嘛呢

01:07:26.270 --> 01:07:31.630
它可以设置十小时间

01:07:31.630 --> 01:07:33.630
通过一个字段

01:07:33.630 --> 01:07:35.630
然后如果就是没设置的话

01:07:35.630 --> 01:07:37.630
就是自动就关闭了

01:07:37.630 --> 01:07:39.630
对对对

01:07:39.630 --> 01:07:41.630
然后对于我们这个

01:07:41.630 --> 01:07:43.630
local storage

01:07:43.630 --> 01:07:47.200
s-t-o-r-a-t

01:07:47.200 --> 01:07:49.200
local storage 干嘛呢

01:07:49.200 --> 01:07:51.200
除非手动清除

01:07:51.200 --> 01:07:55.660
否则

01:07:55.660 --> 01:07:56.660
不能删除

01:07:56.660 --> 01:07:57.660
否则不失效

01:07:57.660 --> 01:07:58.660
永远保存

01:08:00.980 --> 01:08:01.980
除非手动清除

01:08:01.980 --> 01:08:03.980
然后我们这个 session

01:08:03.980 --> 01:08:05.980
session storage

01:08:06.980 --> 01:08:07.980
干嘛呢

01:08:07.980 --> 01:08:08.980
它特点就是

01:08:08.980 --> 01:08:09.980
仅在

01:08:09.980 --> 01:08:11.980
帮钱

01:08:11.980 --> 01:08:12.980
网页

01:08:12.980 --> 01:08:16.350
有效

01:08:16.350 --> 01:08:21.330
关闭

01:08:21.330 --> 01:08:22.330
关闭页面后干嘛

01:08:22.330 --> 01:08:27.430
就被清除了

01:08:27.430 --> 01:08:29.430
就被清除了

01:08:29.430 --> 01:08:30.430
那这就是他们的一个

01:08:30.430 --> 01:08:32.430
生命周期上的一个区别

01:08:32.430 --> 01:08:34.430
生命周期的一个区别

01:08:34.430 --> 01:08:36.430
然后除了生命周期还有啥呢

01:08:36.430 --> 01:08:39.430
是关于存放数据大小

01:08:39.430 --> 01:08:43.860
存放数据大小

01:08:43.860 --> 01:08:45.860
其实浏览器的权限很低

01:08:45.860 --> 01:08:46.860
浏览器的权限很低

01:08:46.860 --> 01:08:47.860
它不像note

01:08:47.860 --> 01:08:49.860
note是基于这样的一个平台

01:08:49.860 --> 01:08:50.860
去持有操作系统的功能

01:08:50.860 --> 01:08:51.860
你就像我们浏览器

01:08:51.860 --> 01:08:53.860
你想保存个图片

01:08:53.860 --> 01:08:54.860
你想保存个啥

01:08:54.860 --> 01:08:55.860
它都提前好了

01:08:55.860 --> 01:08:56.860
这个只能

01:08:56.860 --> 01:08:58.860
让你选择保存到那

01:08:58.860 --> 01:09:00.860
它这权限很低

01:09:00.860 --> 01:09:01.860
所以说

01:09:01.860 --> 01:09:02.860
有些东西你说浏览器

01:09:02.860 --> 01:09:04.860
能不能直接读本地文件呢

01:09:04.860 --> 01:09:06.860
那只能说通过file协议

01:09:06.860 --> 01:09:07.860
去看咱们的pdf

01:09:07.860 --> 01:09:08.860
看咱们的atm

01:09:08.860 --> 01:09:10.860
进行解析

01:09:10.860 --> 01:09:11.860
所以说浏览器的权限

01:09:11.860 --> 01:09:12.860
并不大

01:09:12.860 --> 01:09:13.860
操作系统

01:09:13.860 --> 01:09:14.860
那如果浏览器权限大的话

01:09:14.860 --> 01:09:17.860
那就不需要安卓和iOS

01:09:17.860 --> 01:09:18.860
啥事

01:09:18.860 --> 01:09:19.860
我直接读就完了

01:09:19.860 --> 01:09:20.860
浏览器啥东西

01:09:22.860 --> 01:09:23.860
那存到数据大小的

01:09:23.860 --> 01:09:24.860
对于cookie

01:09:24.860 --> 01:09:25.860
对吧

01:09:25.860 --> 01:09:26.860
cookie啥

01:09:26.860 --> 01:09:27.860
甜点小饼干

01:09:27.860 --> 01:09:28.860
4k左右

01:09:29.860 --> 01:09:31.860
我印象中的4k

01:09:31.860 --> 01:09:32.860
4kb

01:09:32.860 --> 01:09:34.860
然后至于说我们的local storage

01:09:40.600 --> 01:09:41.600
local storage

01:09:41.600 --> 01:09:42.600
以及我们的sense storage

01:09:42.600 --> 01:09:44.600
它耳朵大是5M

01:09:52.900 --> 01:09:53.900
对

01:09:53.900 --> 01:09:54.900
5M

01:09:54.900 --> 01:09:56.900
这是数据大小的一个区别

01:09:56.900 --> 01:09:57.900
数据大小的一个区别

01:09:57.900 --> 01:09:59.900
然后还有就是atp请求

01:10:00.900 --> 01:10:02.900
在atp请求干嘛呢

01:10:02.900 --> 01:10:04.900
cookie是自动携带

01:10:09.500 --> 01:10:12.500
自动携带到什么的

01:10:12.500 --> 01:10:18.470
这个atp头部中

01:10:18.470 --> 01:10:21.470
就是你自带它就发出去了

01:10:21.470 --> 01:10:22.470
自带发出去了

01:10:22.470 --> 01:10:25.470
而且如果你总使用cookie的话

01:10:25.470 --> 01:10:28.470
安全性也难得保障

01:10:28.470 --> 01:10:30.470
也得难得的保障

01:10:30.470 --> 01:10:31.470
这是cookie

01:10:31.470 --> 01:10:33.470
至于说我们的sense

01:10:33.470 --> 01:10:36.470
local storage

01:10:36.470 --> 01:10:38.470
以及sense storage

01:10:38.470 --> 01:10:42.470
它俩就是仅在浏览器里面保存

01:10:42.470 --> 01:10:47.130
仅在浏览器里面保存

01:10:47.130 --> 01:10:50.130
就是不太服气通信

01:10:50.130 --> 01:10:58.110
不太服气通信

01:10:58.110 --> 01:11:00.110
还有就是他们的一个实用性

01:11:00.110 --> 01:11:01.110
叫意用性

01:11:03.110 --> 01:11:04.110
你怎么着呢

01:11:04.110 --> 01:11:05.110
就是我们的cookie

01:11:05.110 --> 01:11:07.110
它的这个api

01:11:07.110 --> 01:11:08.110
刚才好用

01:11:08.110 --> 01:11:09.110
api不健全

01:11:11.110 --> 01:11:12.110
不好用

01:11:12.110 --> 01:11:13.110
就要手动工装

01:11:13.110 --> 01:11:17.960
然后我们这个local storage

01:11:17.960 --> 01:11:19.960
跟sense storage的这个api

01:11:19.960 --> 01:11:20.960
它好用

01:11:25.700 --> 01:11:26.700
api好用

01:11:26.700 --> 01:11:28.700
至于说你想存到哪里

01:11:28.700 --> 01:11:29.700
可以根据他们的一个特点

01:11:29.700 --> 01:11:30.700
进行属于存储

01:11:30.700 --> 01:11:31.700
怎么存都行

01:11:31.700 --> 01:11:32.700
怎么存都行

01:11:32.700 --> 01:11:33.700
这个都没啥

01:11:34.700 --> 01:11:37.850
这个呢

01:11:37.850 --> 01:11:39.850
你就是在面试的时候

01:11:40.850 --> 01:11:41.850
存吧

01:11:41.850 --> 01:11:42.850
会怎么样

01:11:44.850 --> 01:11:45.850
正常来说

01:11:45.850 --> 01:11:46.850
就是

01:11:46.850 --> 01:11:47.850
这个我还都没研究过

01:11:47.850 --> 01:11:48.850
原则上

01:11:48.850 --> 01:11:49.850
原则是它限定5兆的话

01:11:49.850 --> 01:11:50.850
它存满的话

01:11:50.850 --> 01:11:51.850
就会提示

01:11:51.850 --> 01:11:52.850
但这个倒是没玩过

01:11:52.850 --> 01:11:53.850
这没玩过

01:11:53.850 --> 01:11:59.780
同属性会覆盖

01:11:59.780 --> 01:12:00.780
这个还真没试过

01:12:00.780 --> 01:12:01.780
因为没搞这么大数量

01:12:01.780 --> 01:12:09.410
没玩过

01:12:09.410 --> 01:12:10.410
ok

01:12:10.410 --> 01:12:12.410
这是咱们的第12题

01:12:12.410 --> 01:12:15.490
继续

01:12:15.490 --> 01:12:16.490
13题

01:12:16.490 --> 01:12:17.490
13题问的是

01:12:18.490 --> 01:12:19.490
问的是单项数据流

01:12:19.490 --> 01:12:20.490
对吧

01:12:23.700 --> 01:12:24.700
单项数据流

01:12:24.700 --> 01:12:32.130
同学们理解吗

01:12:32.130 --> 01:12:33.130
单项数据流

01:12:33.130 --> 01:12:37.460
三项的话是服务端的

01:12:38.460 --> 01:12:39.460
三项的话是服务端的

01:12:40.460 --> 01:12:41.460
你说这个单项数据流

01:12:41.460 --> 01:12:43.460
是没有

01:12:43.460 --> 01:12:44.460
其实都有

01:12:44.460 --> 01:12:45.460
其实都有

01:12:45.460 --> 01:12:51.810
我得到第几题了

01:12:52.810 --> 01:12:53.810
是13题

01:12:53.810 --> 01:12:54.810
13题

01:12:56.810 --> 01:12:57.810
对

01:12:57.810 --> 01:12:58.810
数据流

01:12:58.810 --> 01:12:59.810
来

01:12:59.810 --> 01:13:00.810
来来来

01:13:00.810 --> 01:13:01.810
这我就不写结构了

01:13:01.810 --> 01:13:02.810
直接写

01:13:02.810 --> 01:13:03.810
啥呢

01:13:03.810 --> 01:13:04.810
数据流

01:13:06.810 --> 01:13:07.810
和什么呢

01:13:07.810 --> 01:13:09.810
和这个数据绑定

01:13:12.630 --> 01:13:13.630
是两回事

01:13:13.630 --> 01:13:14.630
你就包括说

01:13:14.630 --> 01:13:15.630
你对于我来说

01:13:15.630 --> 01:13:16.630
对吧

01:13:16.630 --> 01:13:17.630
叫单项

01:13:19.630 --> 01:13:21.630
单项数据流

01:13:21.630 --> 01:13:23.630
与双项数据绑定

01:13:29.270 --> 01:13:30.270
然后我们的这个

01:13:30.270 --> 01:13:31.270
rat

01:13:32.270 --> 01:13:33.270
什么呢

01:13:33.270 --> 01:13:34.270
是这个

01:13:35.270 --> 01:13:36.270
单项

01:13:36.270 --> 01:13:37.270
叫单项数据流

01:13:37.270 --> 01:13:38.270
单项数据绑定

01:13:47.860 --> 01:13:50.360
这里面

01:13:50.360 --> 01:13:51.360
这里面

01:13:51.360 --> 01:13:52.360
你看数据流

01:13:52.360 --> 01:13:54.360
跟数据绑定是两个东西

01:13:54.360 --> 01:13:55.360
那先说数据绑定

01:13:56.360 --> 01:13:57.360
数据绑定

01:13:57.360 --> 01:14:00.630
你别管说什么

01:14:00.630 --> 01:14:01.630
单项数据绑定

01:14:01.630 --> 01:14:02.630
还是双项数据绑定

01:14:04.630 --> 01:14:05.630
双项数据绑定爽

01:14:05.630 --> 01:14:06.630
你才是爽

01:14:06.630 --> 01:14:07.630
是爽

01:14:07.630 --> 01:14:08.630
就是

01:14:08.630 --> 01:14:09.630
数据绑定

01:14:09.630 --> 01:14:10.630
这个一个词

01:14:10.630 --> 01:14:11.630
一个概念来源什么的

01:14:11.630 --> 01:14:12.630
来源说

01:14:12.630 --> 01:14:14.630
我们对于view和谁呢

01:14:14.630 --> 01:14:16.630
就是这个试图层

01:14:16.630 --> 01:14:18.630
和我们的model层的一个硬设关系

01:14:18.630 --> 01:14:19.630
硬设关系

01:14:20.630 --> 01:14:37.540
硬设关系

01:14:38.540 --> 01:14:40.540
那啥叫数据绑定

01:14:40.540 --> 01:14:42.540
正常来说干嘛呢

01:14:42.540 --> 01:14:43.540
我们的数据层

01:14:43.540 --> 01:14:44.540
也就是这个模型层

01:14:44.540 --> 01:14:45.540
干嘛呢

01:14:45.540 --> 01:14:46.540
数据与变化

01:14:46.540 --> 01:14:48.540
会影响到我们的这个试图层

01:14:49.540 --> 01:14:50.540
view层

01:14:50.540 --> 01:14:53.540
比方说我们的react当中的sense data

01:14:53.540 --> 01:14:55.540
sense data

01:14:55.540 --> 01:14:56.540
这样的函数

01:14:56.540 --> 01:14:57.540
干嘛呢

01:14:57.540 --> 01:14:58.540
去修改数据

01:14:58.540 --> 01:14:59.540
干嘛呢

01:14:59.540 --> 01:15:01.540
重新去dial render

01:15:01.540 --> 01:15:02.540
去炫耳我们的页面

01:15:02.540 --> 01:15:03.540
那当然说

01:15:03.540 --> 01:15:05.540
这个只是说单项的

01:15:05.540 --> 01:15:06.540
单项的

01:15:06.540 --> 01:15:08.540
而且是基于这个mv

01:15:08.540 --> 01:15:10.540
这样的一个设计模式来搞的

01:15:10.540 --> 01:15:11.540
那就是说

01:15:11.540 --> 01:15:13.540
那老师呢react是mvm模式呢

01:15:13.540 --> 01:15:14.540
它并不是

01:15:14.540 --> 01:15:15.540
并不完全是

01:15:15.540 --> 01:15:17.540
而且react更偏向于试图

01:15:17.540 --> 01:15:18.540
更偏向于试图

01:15:18.540 --> 01:15:19.540
那你说

01:15:19.540 --> 01:15:22.540
这个view是这个mvm的

01:15:22.540 --> 01:15:23.540
它更像

01:15:23.540 --> 01:15:24.540
但不完全是

01:15:24.540 --> 01:15:25.540
那所以说

01:15:25.540 --> 01:15:26.540
试面上也就直接把

01:15:26.540 --> 01:15:28.540
这个view说成mvm了

01:15:28.540 --> 01:15:30.540
就直接把view说成mvm

01:15:30.540 --> 01:15:31.540
在这儿看

01:15:31.540 --> 01:15:32.540
有同学有懂的

01:15:32.540 --> 01:15:33.540
有懂的

01:15:33.540 --> 01:15:34.540
挺好挺好挺好

01:15:35.540 --> 01:15:36.540
那所以说

01:15:36.540 --> 01:15:37.540
对于对于

01:15:37.540 --> 01:15:39.540
对于单纯的model

01:15:39.540 --> 01:15:40.540
到view这个呢

01:15:40.540 --> 01:15:42.540
也就是我们的一个单项数据绑定

01:15:42.540 --> 01:15:43.540
什么呢

01:15:43.540 --> 01:15:45.540
数据对试图的一个映射

01:15:45.540 --> 01:15:47.540
那么那双向数据绑定呢

01:15:47.540 --> 01:15:49.540
也就是我们的这个模型层干嘛呢

01:15:51.540 --> 01:15:53.540
跟我们的这个试图层

01:15:53.540 --> 01:15:55.540
他们会有一个交互过程

01:15:55.540 --> 01:15:57.540
交互过程

01:15:57.540 --> 01:15:58.540
那这个呢

01:15:58.540 --> 01:15:59.540
就是我们view当中的

01:15:59.540 --> 01:16:00.540
什么的view model是吧

01:16:00.540 --> 01:16:01.540
view model

01:16:01.540 --> 01:16:02.540
那这个

01:16:02.540 --> 01:16:04.540
这个这个这个

01:16:04.540 --> 01:16:05.540
对于这个view model来说

01:16:05.540 --> 01:16:06.540
它好用也不好用

01:16:06.540 --> 01:16:07.540
有的时候

01:16:07.540 --> 01:16:08.540
我们还需要这个

01:16:08.540 --> 01:16:09.540
知道这个view model的一个原理

01:16:09.540 --> 01:16:10.540
什么呢

01:16:10.540 --> 01:16:11.540
应付的实践

01:16:11.540 --> 01:16:14.540
加上我们的这个办的预法

01:16:14.540 --> 01:16:15.540
是吧

01:16:15.540 --> 01:16:16.540
那个本质上

01:16:16.540 --> 01:16:17.540
它也是单向的

01:16:17.540 --> 01:16:18.540
只不过

01:16:18.540 --> 01:16:19.540
数据仍然是

01:16:19.540 --> 01:16:20.540
试图影响

01:16:20.540 --> 01:16:22.540
这个这个数据影响试图

01:16:22.540 --> 01:16:24.540
但我对试图绑定了个实践

01:16:24.540 --> 01:16:25.540
它也会影响数据

01:16:25.540 --> 01:16:26.540
从而做到了

01:16:26.540 --> 01:16:28.540
这样的一个双向数据绑定

01:16:28.540 --> 01:16:29.540
无论是单向也好

01:16:29.540 --> 01:16:30.540
双向也好

01:16:30.540 --> 01:16:31.540
那像这个rat

01:16:31.540 --> 01:16:32.540
它也能做双向的

01:16:32.540 --> 01:16:33.540
其实不是做双向的

01:16:33.540 --> 01:16:34.540
是把数据拿回来

01:16:34.540 --> 01:16:36.540
把数据拿回来

01:16:36.540 --> 01:16:38.540
VM调度

01:16:38.540 --> 01:16:39.540
对

01:16:39.540 --> 01:16:40.540
那至于说

01:16:40.540 --> 01:16:41.540
它俩做的一个事

01:16:41.540 --> 01:16:42.540
谁来的VM做的

01:16:42.540 --> 01:16:43.540
对吧

01:16:43.540 --> 01:16:44.540
view model这样一个对象

01:16:44.540 --> 01:16:45.540
做的

01:16:45.540 --> 01:16:46.540
那这个呢

01:16:46.540 --> 01:16:47.540
就是咱们所谓的数据绑定

01:16:47.540 --> 01:16:48.540
无论是单向数据绑定

01:16:48.540 --> 01:16:49.540
还是双向数据绑定

01:16:49.540 --> 01:16:51.540
它是怎么样的过程

01:16:51.540 --> 01:16:52.540
单向的就是数据

01:16:52.540 --> 01:16:53.540
跟试图的一个绑定

01:16:53.540 --> 01:16:54.540
双向的是

01:16:54.540 --> 01:16:55.540
它俩彼此绑定

01:16:55.540 --> 01:16:56.540
数据改变试图

01:16:56.540 --> 01:16:57.540
试图改变数据

01:16:57.540 --> 01:16:58.540
那

01:16:58.540 --> 01:17:01.540
然后接下来说说数据流

01:17:01.540 --> 01:17:03.540
数据流

01:17:03.540 --> 01:17:05.540
那数据流都是单向的

01:17:05.540 --> 01:17:06.540
都是单向的

01:17:06.540 --> 01:17:07.540
说req

01:17:07.540 --> 01:17:08.540
这个安住了里面是双向数据流

01:17:08.540 --> 01:17:09.540
那数据流

01:17:09.540 --> 01:17:11.540
双向并不好并不好

01:17:11.540 --> 01:17:13.540
那一定是单向数据流

01:17:13.540 --> 01:17:15.540
那为什么说单向数据流呢

01:17:15.540 --> 01:17:17.540
那单向数据流

01:17:17.540 --> 01:17:18.540
它指的是呢

01:17:18.540 --> 01:17:19.540
指的是

01:17:19.540 --> 01:17:21.540
物资组建

01:17:21.540 --> 01:17:22.540
干嘛呢

01:17:22.540 --> 01:17:24.540
数据流向

01:17:24.540 --> 01:17:27.540
物资组建之间的一个数据流向

01:17:27.540 --> 01:17:28.540
跟它是有关系的

01:17:28.540 --> 01:17:30.540
跟它是有关系的

01:17:30.540 --> 01:17:31.540
那像别管说req

01:17:31.540 --> 01:17:32.540
req它还是view

01:17:32.540 --> 01:17:33.540
干嘛呢

01:17:33.540 --> 01:17:34.540
我们都是

01:17:35.540 --> 01:17:37.540
这个负组建

01:17:37.540 --> 01:17:38.540
干嘛呢

01:17:38.540 --> 01:17:39.540
数据

01:17:40.540 --> 01:17:41.540
流向子组建

01:17:43.540 --> 01:17:44.540
流向子组建

01:17:44.540 --> 01:17:45.540
同时呢

01:17:45.540 --> 01:17:46.540
子组建

01:17:49.110 --> 01:17:51.110
不能直接

01:17:52.110 --> 01:17:53.110
修改

01:17:53.110 --> 01:17:54.110
物组建的值

01:17:58.600 --> 01:17:59.600
就包括我们的probs

01:17:59.600 --> 01:18:00.600
对吧

01:18:00.600 --> 01:18:01.600
probs

01:18:01.600 --> 01:18:02.600
那么在这里面

01:18:02.600 --> 01:18:03.600
你说子组建

01:18:03.600 --> 01:18:05.600
能想修改负组建的值

01:18:05.600 --> 01:18:06.600
怎么办呢

01:18:06.600 --> 01:18:07.600
像说子组建

01:18:09.600 --> 01:18:10.600
就是不组建

01:18:10.600 --> 01:18:11.600
能改不组建的值

01:18:11.600 --> 01:18:12.600
那也就是说

01:18:12.600 --> 01:18:13.600
子组建干嘛呢

01:18:13.600 --> 01:18:19.600
调用不组建的方法

01:18:19.600 --> 01:18:24.940
改变不组建的值

01:18:24.940 --> 01:18:25.940
对吧

01:18:25.940 --> 01:18:26.940
相同于说的4.1实践

01:18:26.940 --> 01:18:27.940
OK没问题

01:18:27.940 --> 01:18:28.940
还有就是什么呢

01:18:28.940 --> 01:18:29.940
比如说

01:18:29.940 --> 01:18:31.940
你说单向数据流的一个优点

01:18:31.940 --> 01:18:32.940
是啥呀

01:18:33.940 --> 01:18:34.940
对吧

01:18:34.940 --> 01:18:35.940
优点

01:18:35.940 --> 01:18:36.940
优点干嘛呢

01:18:36.940 --> 01:18:38.940
就是数据

01:18:38.940 --> 01:18:39.940
传递入口

01:18:39.940 --> 01:18:40.940
如一

01:18:40.940 --> 01:18:41.940
这个唯一

01:18:45.020 --> 01:18:46.020
传递入口唯一

01:18:46.020 --> 01:18:47.020
也就是说单向的嘛

01:18:47.020 --> 01:18:48.020
对吧

01:18:48.020 --> 01:18:49.020
就是负极传给自己的

01:18:49.020 --> 01:18:50.020
没有自己传给负极

01:18:50.020 --> 01:18:52.020
而且这个数据流向

01:18:52.020 --> 01:18:53.020
方便好维护

01:18:53.020 --> 01:18:55.020
这个意欲理解

01:19:00.460 --> 01:19:01.460
意欲理解

01:19:01.460 --> 01:19:02.460
那这就算是我们

01:19:02.460 --> 01:19:04.460
这个双向数据

01:19:04.460 --> 01:19:06.460
单向数据流的一个特点

01:19:06.460 --> 01:19:08.460
因为它的入口和出口

01:19:08.460 --> 01:19:09.460
是定下来的

01:19:09.460 --> 01:19:11.460
这个是从

01:19:11.460 --> 01:19:12.460
不及

01:19:12.460 --> 01:19:13.460
对吧

01:19:13.460 --> 01:19:14.460
传入到自己

01:19:14.460 --> 01:19:15.460
它这个数据是定下来的

01:19:15.460 --> 01:19:16.460
所以说

01:19:16.460 --> 01:19:18.460
意欲理解也好维护

01:19:18.460 --> 01:19:19.460
那这就是

01:19:19.460 --> 01:19:20.460
所谓的数据流

01:19:20.460 --> 01:19:21.460
跟数据绑定的一个区别

01:19:21.460 --> 01:19:23.460
数据绑定是基于咱们

01:19:23.460 --> 01:19:25.460
MVC

01:19:25.460 --> 01:19:26.460
MVM

01:19:26.460 --> 01:19:27.460
MVP

01:19:27.460 --> 01:19:28.460
MVC这样的一个

01:19:28.460 --> 01:19:29.460
框架的一个

01:19:29.460 --> 01:19:31.460
这个模式的一个眼神模式

01:19:31.460 --> 01:19:33.460
进行的数据绑定

01:19:33.460 --> 01:19:34.460
无非是

01:19:34.460 --> 01:19:36.460
6层跟模型层的一个音声关系

01:19:38.460 --> 01:19:39.460
然后数据流

01:19:39.460 --> 01:19:41.460
是指组建之间的一个数据传递

01:19:41.460 --> 01:19:42.460
那至于说

01:19:42.460 --> 01:19:43.460
我们的Redux

01:19:43.460 --> 01:19:44.460
ViewX

01:19:44.460 --> 01:19:46.460
包括BogX

01:19:46.460 --> 01:19:48.460
这些东西

01:19:48.460 --> 01:19:49.460
都是基于说

01:19:49.460 --> 01:19:50.460
原有的数据流

01:19:50.460 --> 01:19:52.460
这个统一状态的管理户

01:19:52.460 --> 01:19:54.460
那其实在这里面

01:19:54.460 --> 01:19:55.460
讲就不说他们了

01:19:56.460 --> 01:19:58.460
那这个就是

01:19:58.460 --> 01:20:00.460
关于数据流跟数据绑定的事

01:20:00.460 --> 01:20:01.460
然后最后一题

01:20:01.460 --> 01:20:04.160
最后一题啥

01:20:04.160 --> 01:20:05.160
最后一题

01:20:06.160 --> 01:20:08.160
最后一题是啥呢

01:20:08.160 --> 01:20:09.160
View强势的

01:20:10.160 --> 01:20:11.160
可以有啥缺陷

01:20:11.160 --> 01:20:12.160
同学们这个知道吗

01:20:12.160 --> 01:20:20.620
有啥缺陷

01:20:33.740 --> 01:20:37.620
你说他有啥缺陷呢

01:20:37.620 --> 01:20:38.620
能有啥缺陷呢

01:20:38.620 --> 01:20:47.140
有啥缺陷呢

01:20:50.610 --> 01:20:51.610
看看

01:20:51.610 --> 01:20:53.610
无法坚定数据好像

01:20:53.610 --> 01:20:54.610
需要便利所有属性

01:20:54.610 --> 01:20:55.610
数组

01:20:55.610 --> 01:20:56.610
所以是不能修改

01:20:57.610 --> 01:20:58.610
那其实

01:20:58.610 --> 01:21:00.610
他的这个缺陷

01:21:00.610 --> 01:21:01.610
他的一个缺陷

01:21:01.610 --> 01:21:03.610
新增的不行是吧

01:21:03.610 --> 01:21:04.610
或者直接通过

01:21:04.610 --> 01:21:06.610
数据下标的这种方式不行

01:21:06.610 --> 01:21:07.610
那其实在这呢

01:21:07.610 --> 01:21:08.610
丁老师简单说两句吧

01:21:08.610 --> 01:21:09.610
因为这里面

01:21:09.610 --> 01:21:11.610
这个这个其实

01:21:11.610 --> 01:21:12.610
涉到他的一个底层

01:21:12.610 --> 01:21:13.610
涉膜是包括他们的一个

01:21:13.610 --> 01:21:14.610
与法的问题

01:21:14.610 --> 01:21:15.610
与法的问题

01:21:15.610 --> 01:21:16.610
那啥呢

01:21:16.610 --> 01:21:17.610
就是他有缺陷

01:21:17.610 --> 01:21:19.610
是指说在View当中

01:21:19.610 --> 01:21:20.610
在View当中

01:21:21.610 --> 01:21:22.610
在View中干嘛呢

01:21:22.610 --> 01:21:23.610
不是

01:21:23.610 --> 01:21:24.610
无法

01:21:24.610 --> 01:21:25.610
坚定

01:21:25.610 --> 01:21:26.610
到

01:21:26.610 --> 01:21:27.610
数组

01:21:27.610 --> 01:21:29.610
下标的

01:21:29.610 --> 01:21:30.610
变化

01:21:31.610 --> 01:21:32.610
变化

01:21:32.610 --> 01:21:33.610
那你这是说

01:21:33.610 --> 01:21:35.610
那他到底能不能

01:21:35.610 --> 01:21:36.610
View

01:21:36.610 --> 01:21:37.610
你还听我说

01:21:37.610 --> 01:21:38.610
听我说

01:21:38.610 --> 01:21:39.610
Object defined property

01:21:39.610 --> 01:21:41.610
他其实是能的

01:21:41.610 --> 01:21:42.610
就是这个

01:21:42.610 --> 01:21:43.610
这个方法

01:21:43.610 --> 01:21:44.610
Object

01:21:44.610 --> 01:21:45.610
边

01:21:51.190 --> 01:21:52.190
干嘛呢

01:21:52.190 --> 01:21:53.190
他是

01:21:53.190 --> 01:21:55.190
可以坚定数组变化

01:21:55.190 --> 01:22:03.050
可以坚定数组下标变化的

01:22:03.050 --> 01:22:04.050
那你说呢

01:22:04.050 --> 01:22:05.050
View当中

01:22:05.050 --> 01:22:06.050
为什么不加进去

01:22:06.050 --> 01:22:08.050
为什么不利用

01:22:08.050 --> 01:22:09.050
对吧

01:22:09.050 --> 01:22:10.050
他既然properly

01:22:10.050 --> 01:22:11.050
这个 defined property

01:22:11.050 --> 01:22:12.050
可以做到

01:22:12.050 --> 01:22:13.050
但是View里面

01:22:13.050 --> 01:22:14.050
为什么不用呢

01:22:15.050 --> 01:22:16.050
性能不好

01:22:16.050 --> 01:22:18.050
如果坚定所有下标的话

01:22:18.050 --> 01:22:19.050
性能不好

01:22:19.050 --> 01:22:25.970
性能不好

01:22:25.970 --> 01:22:27.970
而且代码会异常的多

01:22:27.970 --> 01:22:29.970
因为这个方法定义的

01:22:29.970 --> 01:22:31.970
他去保命对象的某个属性

01:22:31.970 --> 01:22:33.970
这个把每个属性去

01:22:33.970 --> 01:22:35.970
设置干算的三个属性

01:22:35.970 --> 01:22:37.970
那而且像同学说的

01:22:37.970 --> 01:22:39.970
他需要便利对象的所有属性

01:22:39.970 --> 01:22:44.300
所有属性

01:22:44.300 --> 01:22:46.300
需要便利对象的所有属性

01:22:46.300 --> 01:22:48.300
那这是我们的这个View

01:22:48.300 --> 01:22:49.300
这是我们的View

01:22:50.300 --> 01:22:51.300
那么

01:22:51.300 --> 01:22:52.300
包括说

01:22:52.300 --> 01:22:56.300
也许说

01:22:56.300 --> 01:22:57.300
代理

01:22:57.300 --> 01:22:59.300
包括在代理里面

01:22:59.300 --> 01:23:00.300
还有这个

01:23:00.300 --> 01:23:01.300
反射

01:23:02.300 --> 01:23:03.300
反射

01:23:03.300 --> 01:23:05.300
那他俩放到一起

01:23:05.300 --> 01:23:06.300
代理加反射

01:23:06.300 --> 01:23:08.300
来完成了新版

01:23:08.300 --> 01:23:09.300
没有三的一个

01:23:09.300 --> 01:23:10.300
这个数据坚持

01:23:10.300 --> 01:23:12.300
完成新版的数据坚持

01:23:12.300 --> 01:23:13.300
那至于说

01:23:13.300 --> 01:23:14.300
proxy

01:23:14.300 --> 01:23:15.300
他代理对象

01:23:15.300 --> 01:23:17.300
代理对象的方式很简单

01:23:17.300 --> 01:23:18.300
不仅可以代理对象

01:23:18.300 --> 01:23:19.300
还可以代理数组

01:23:19.300 --> 01:23:21.300
并且可以动态代理

01:23:21.300 --> 01:23:22.300
那所以说

01:23:22.300 --> 01:23:23.300
View3的话

01:23:23.300 --> 01:23:24.300
利用这个proxy进行升级

01:23:24.300 --> 01:23:25.300
那里面呢

01:23:25.300 --> 01:23:27.300
不可以就是proxy跟reflect

01:23:27.300 --> 01:23:28.300
那是这两个支点呢

01:23:28.300 --> 01:23:29.300
其实

01:23:29.300 --> 01:23:30.300
咱多说一嘴

01:23:30.300 --> 01:23:31.300
就提嘴

01:23:31.300 --> 01:23:32.300
提嘴在哪呢

01:23:32.300 --> 01:23:34.300
在这个

01:23:34.300 --> 01:23:36.300
ES6里面

01:23:37.300 --> 01:23:38.300
reflect

01:23:38.300 --> 01:23:40.300
以及说这个

01:23:40.300 --> 01:23:41.300
reflect

01:23:41.300 --> 01:23:43.300
以及这个proxy

01:23:43.300 --> 01:23:45.300
代理一个反射

01:23:45.300 --> 01:23:46.300
代理一个反射

01:23:53.110 --> 01:23:54.110
OK

01:23:54.110 --> 01:23:56.110
那其实说到这的话

01:23:56.110 --> 01:23:58.110
咱们这个这个这个

01:23:58.110 --> 01:23:59.110
面试题呢

01:23:59.110 --> 01:24:00.110
到这就算说完了

01:24:00.110 --> 01:24:01.110
就算说完了

01:24:01.110 --> 01:24:02.110
那其实

01:24:02.110 --> 01:24:03.110
大家也能看到

01:24:03.110 --> 01:24:04.110
也能看到这个

01:24:04.110 --> 01:24:05.110
里面的内容

01:24:05.110 --> 01:24:06.110
它真的不少

01:24:06.110 --> 01:24:07.110
真的不少

01:24:07.110 --> 01:24:08.110
因为今天呢

01:24:08.110 --> 01:24:09.110
可能说有些超纲了

01:24:09.110 --> 01:24:10.110
然后跟同学们的认知

01:24:10.110 --> 01:24:11.110
可能还不太一样

01:24:11.110 --> 01:24:12.110
所以说

01:24:12.110 --> 01:24:14.110
这个同学们猜渡

01:24:14.110 --> 01:24:15.110
可能弱一点

01:24:15.110 --> 01:24:16.110
但是这个东西

01:24:16.110 --> 01:24:17.110
你一旦搞懂了

01:24:17.110 --> 01:24:18.110
这个对你们提升的

01:24:18.110 --> 01:24:20.110
包括说过是非常大的

