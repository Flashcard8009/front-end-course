WEBVTT

00:00.370 --> 00:08.170
首先 谢谢一下啊 谢谢一下小宝贝的关心

00:08.170 --> 00:12.930
其实还行 还行 我觉得我还可以

00:12.930 --> 00:15.690
服务起来 我觉得我这个折磕我能上完

00:15.690 --> 00:20.370
如果上课的过程中 出现了 突然没说话了

00:20.370 --> 00:25.690
帮我打一下120 因为现在呢 我老婆说下去散步去了

00:25.690 --> 00:30.330
家里边就只有一个人 麻烦帮我补了一下120

00:30.530 --> 00:36.290
没那么严重啊 下午去输了一个夜 还声音小吗

00:36.290 --> 00:41.530
声音小 都能啊 声音小 都不能点增强啊

00:41.530 --> 00:47.450
一点增强那个就会有那个 录音音量开大一点

00:47.450 --> 00:51.250
现在呢 现在声音还小不小

00:51.250 --> 00:54.690
可以啊 那声音小的同学呢 可以把那个

00:54.690 --> 00:59.370
呃 可以把那个就是声音开大一点啊

00:59.410 --> 01:01.690
好了 咱们就来吧 我今天刚才 刚才呢

01:01.690 --> 01:05.610
去升级了一下那个腾讯的那个客户端

01:05.610 --> 01:08.810
就是这个直播客户端 发现这个出问题的客户端

01:08.810 --> 01:12.370
下面有个工具条 他死活给把我的东西给我折住了

01:12.370 --> 01:15.730
没关系啊 没关系 我们也不印象赏

01:15.730 --> 01:18.610
我们直接来吧 上一天看到就昨天啊

01:18.610 --> 01:22.050
咱们讲了那个无忧的一些基础部分啊

01:22.050 --> 01:24.970
就核心的理念给大家讲了 这里呢

01:24.970 --> 01:28.130
我昨天给大家出了几道奇题啊 几道奇题

01:28.170 --> 01:30.570
这几道奇题呢 其实我课堂上呢都讲过啊

01:30.570 --> 01:34.810
我们这里快速的把它过一遍 顺便的回忆一下昨天的知识

01:34.810 --> 01:40.290
呃 第道奇题 是关于无忧实现那个数据想用式的原理

01:40.290 --> 01:42.290
还叫什么叫数据想用式吗 对吧

01:42.290 --> 01:44.890
就是 呃 界面的渲染呢

01:44.890 --> 01:47.410
它是要观测数据的变化的

01:47.410 --> 01:50.330
数据发生变化的时候 界面完成自动渲染

01:50.330 --> 01:51.610
这就是它的想用式

01:51.610 --> 01:54.450
哎 他怎么实现的呢 他怎么实现想用式的呢

01:54.450 --> 01:55.650
咱们上一课说过了

01:55.650 --> 01:59.410
它的做法呢 是把我们配置对象里边

01:59.410 --> 02:00.890
就配置对象里边

02:00.890 --> 02:02.610
你配置不是有data吗 对吧

02:02.610 --> 02:04.610
它把配置对象里边的东西呢

02:04.610 --> 02:08.930
用用那个什么 用那个objects define property

02:08.930 --> 02:10.210
对吧 用那个函数

02:10.210 --> 02:13.330
把它定义到了哪呢 定义到了这个

02:13.330 --> 02:15.290
无忧实力里边去了

02:15.290 --> 02:19.450
因此呢 当我们去使用它的相应的属性的时候呢

02:19.450 --> 02:22.130
它就能够坚听到啊 通过那个函数

02:22.130 --> 02:23.970
因为它在define property里边

02:24.010 --> 02:26.010
是不是可以写get这一层函数

02:26.010 --> 02:28.570
对吧 它通过那个define property

02:28.570 --> 02:31.290
就跑到原来 当时记得第一记的

02:31.290 --> 02:33.490
哎 我们当时没记得一记吗

02:33.490 --> 02:35.250
啊 它通过那个define property

02:35.250 --> 02:37.530
是不是可以坚定到那个函数

02:37.530 --> 02:40.450
坚定到它的数据的读取和数据的设置

02:40.450 --> 02:41.770
对吧 因此它就知道了

02:41.770 --> 02:43.450
你什么时候设置了属性

02:43.450 --> 02:45.570
什么时候呢 读取了属性 它就知道了

02:45.570 --> 02:48.490
所以它是通过这种方式来实现想用式的

02:48.490 --> 02:51.370
以后呢 你面试的时候遇到了这样的问题的话

02:51.370 --> 02:53.810
你就这样回答 就没有任何问题的

02:53.810 --> 02:55.530
顺便再给它多说一句

02:55.530 --> 02:56.570
它说对不起

02:56.570 --> 02:59.330
尽管现在5u3.0没有出来

02:59.330 --> 03:01.530
但是我知道 5u3.0呢

03:01.530 --> 03:04.850
它这个响应式原理会发生变化

03:04.850 --> 03:07.690
它的响应式的做法呢 会发生变化

03:07.690 --> 03:08.690
什么变化呢

03:08.690 --> 03:12.290
按照目前呢 5u它的官方的宣传的是

03:12.290 --> 03:14.810
它将使用对象代理

03:14.810 --> 03:18.050
就是用对象代理的方式来实现想用式

03:18.050 --> 03:20.610
这是ES6里面新出来的东西

03:20.610 --> 03:23.570
好了 这是关于的数据想用式

03:23.570 --> 03:25.570
第二点呢 就是5u

03:25.570 --> 03:28.810
为什么要在智商成员前面加上一个到了符号啊

03:28.810 --> 03:31.530
其实这些东西都面试提到的时候都非常容易问到的

03:31.530 --> 03:32.610
为什么要加个到了符号呢

03:32.610 --> 03:34.130
有些东西就不太关注这个问题啊

03:34.130 --> 03:35.570
直到5u里面有很多层

03:35.570 --> 03:37.130
它自身带了很多成员

03:37.130 --> 03:38.450
5u实力里面

03:38.450 --> 03:40.130
那它为什么要加上到了符号呢

03:40.130 --> 03:42.290
就是因为它要实现响应式

03:42.290 --> 03:43.930
而且呢 它会把一些东西呢

03:43.930 --> 03:45.850
提到5u实力里面去

03:45.850 --> 03:48.130
为了避免你自己书写名称

03:48.130 --> 03:51.130
跟它里边的成员发生了名称冲突

03:51.130 --> 03:53.490
所以说它自己让一步嘛

03:53.490 --> 03:54.450
你可以随便书写

03:54.450 --> 03:55.370
但是我不行

03:55.370 --> 03:56.410
我的成员呢

03:56.410 --> 03:58.330
前面都会加上到了符号

03:58.330 --> 04:00.810
它是为了防止名称冲突

04:00.810 --> 04:02.810
这是第二点啊

04:02.810 --> 04:03.650
第三点的话

04:03.650 --> 04:05.330
5u配置里面方法

04:05.330 --> 04:07.050
方法里面Z是指向谁

04:07.050 --> 04:08.810
这是一个非常非常基础的问题了

04:08.810 --> 04:10.530
如果说里面是遇到这样的问题

04:10.530 --> 04:11.730
就偷偷笑了

04:11.730 --> 04:12.810
Z是指向谁呢

04:12.810 --> 04:14.890
指向的就是5u实力

04:14.890 --> 04:15.610
5u实力

04:15.610 --> 04:16.970
它不是配置对象

04:16.970 --> 04:18.170
指向的不是配置对象

04:18.210 --> 04:19.370
指向的是5u实力

04:21.010 --> 04:22.010
那么第四点呢

04:22.010 --> 04:23.210
就是Render Templates

04:23.210 --> 04:25.210
我们上节课在最后的时候给他说了

04:25.210 --> 04:26.530
Render Templates

04:26.530 --> 04:29.090
以及在页面中直接书写模板

04:29.090 --> 04:30.410
我们上节课给他看了一下

04:30.410 --> 04:31.810
就是你这个模板代码呢

04:31.810 --> 04:33.330
就这个的代码

04:33.330 --> 04:34.210
就这个玩意代码

04:34.210 --> 04:35.930
是不是可以直接书写到页面里面

04:35.930 --> 04:36.210
对吧

04:36.210 --> 04:36.890
书写到这

04:36.890 --> 04:37.250
对不对

04:37.250 --> 04:38.050
但是这种做法呢

04:38.050 --> 04:39.130
我们不太常见

04:39.130 --> 04:40.490
通常不会这样做

04:40.490 --> 04:41.850
今天的课程学院就知道了

04:41.850 --> 04:43.850
为什么不会这样去做

04:43.850 --> 04:46.810
那么如果就是这三种方式

04:46.810 --> 04:47.890
书写模板的方式

04:47.890 --> 04:49.490
它们有什么样的区别

04:49.490 --> 04:51.810
区别是什么呢

04:51.810 --> 04:54.890
区别就是Render

04:54.890 --> 04:59.490
Render它是写到配置对象里面的

04:59.490 --> 05:01.610
Templates也是写到配置对象里面的

05:01.610 --> 05:02.370
那么这种方式呢

05:02.370 --> 05:05.810
是直接书写到真实的dom里面的

05:05.810 --> 05:07.050
书写到页面上的

05:07.050 --> 05:08.610
这它的书写上的区别

05:08.610 --> 05:10.770
另外Render它是最核心

05:10.770 --> 05:12.450
最底层的方法

05:12.450 --> 05:14.210
实际上你书写到Templates

05:14.210 --> 05:16.610
或者说你在页面上书写的模板

05:18.210 --> 05:21.090
它注意中都会转换成Render方法

05:21.090 --> 05:22.850
最后转换成Render方法

05:22.850 --> 05:24.090
是这么个意思

05:24.090 --> 05:25.330
那么它理由先几是什么呢

05:25.330 --> 05:26.970
由先几是从中到右

05:26.970 --> 05:28.050
Render如果你配置到

05:28.050 --> 05:29.290
它一定是运行Render

05:29.290 --> 05:30.890
而忽略掉Templates

05:30.890 --> 05:32.250
和后边的这个东西

05:32.250 --> 05:33.610
如果你没有写Render

05:33.610 --> 05:34.530
你写到Templates

05:34.530 --> 05:36.130
那么它使用Templates

05:36.130 --> 05:37.410
而不使用后边的东西

05:37.410 --> 05:38.810
如果前面两个都没有写

05:38.810 --> 05:40.610
它就读页面上的模板

05:40.610 --> 05:41.650
就这么回事

05:41.650 --> 05:42.770
就上里面那种

05:42.770 --> 05:44.050
也非常非常简单

05:44.050 --> 05:45.770
其实我又整体上它就不难

05:45.770 --> 05:48.480
它本身就不难

05:48.520 --> 05:50.760
我希望这一周的时间

05:50.760 --> 05:51.680
过完了之后

05:51.680 --> 05:54.920
大家对伍佑就没有那么恐惧了

05:54.920 --> 05:56.440
至少对它没有任何恐惧了

05:56.440 --> 05:58.000
你可以熟练的使用它

05:58.000 --> 05:59.160
能够开发一些东西了

06:00.200 --> 06:01.800
这一刻我们上个之前

06:01.800 --> 06:03.640
这些今天我们开始讲组建了

06:03.640 --> 06:04.600
也是伍佑的一个

06:04.600 --> 06:06.560
非常非常核心的一个概念

06:06.560 --> 06:07.960
在讲组建之前

06:07.960 --> 06:10.440
我把上节目的内容再做一些补充

06:10.440 --> 06:13.320
上节目我们谈到了伍佑里面的一个特点

06:13.320 --> 06:15.480
叫做建进式

06:15.480 --> 06:16.680
叫做建进式的特点

06:16.720 --> 06:18.280
我当时还举了一些例子

06:18.280 --> 06:18.520
对吧

06:18.520 --> 06:20.600
你比方说这些就系统的改造

06:20.600 --> 06:23.440
你可以不用全部推翻重来

06:23.440 --> 06:26.040
你可以把它某一个区域先开改造了

06:26.040 --> 06:27.200
改成伍佑

06:27.200 --> 06:29.240
那么伍佑他怎么来实现建进式的呢

06:29.240 --> 06:30.520
他就是我们昨天讲的

06:30.520 --> 06:32.280
其实我们昨天我们已经讲了

06:32.280 --> 06:33.840
建进式的实现方式就是

06:33.840 --> 06:39.400
伍佑它只会控制你指定的容器

06:39.400 --> 06:40.800
你不是要给它一个容器吗

06:40.800 --> 06:41.040
对吧

06:41.040 --> 06:42.720
它是要做伍佑挂载的

06:42.720 --> 06:45.960
那么伍佑它只会控制你给定的容器

06:45.960 --> 06:48.080
一个伍佑实力控制一个容器

06:48.080 --> 06:50.120
一个伍佑实力控制一个容器

06:50.120 --> 06:51.840
你看我们这个伍佑实力是不是去控制了

06:51.840 --> 06:54.480
这个ID为App的这个DIV

06:54.480 --> 06:54.800
对吧

06:54.800 --> 06:56.160
控制了这个DIV

06:56.160 --> 06:57.000
也就是说如果说

06:57.000 --> 06:58.240
因为它还有一些其他内容

06:58.240 --> 06:59.400
跟伍佑有没有关系

06:59.400 --> 07:00.600
如果里面它还有一些其他内容

07:00.600 --> 07:01.680
跟伍佑有没有关系

07:01.680 --> 07:03.280
所以一点关系都没有

07:03.280 --> 07:03.960
因此呢

07:03.960 --> 07:04.360
也就是说

07:04.360 --> 07:07.320
这就是为什么伍佑可以跟其他技术共存的原因

07:07.320 --> 07:09.720
因为伍佑它只控制它自己那块学业

07:09.720 --> 07:11.440
你给它哪个容器

07:11.440 --> 07:12.360
它就控制哪个容器

07:12.360 --> 07:14.520
其他的东西它管得不管

07:14.520 --> 07:15.520
所以这就是伍佑

07:15.520 --> 07:16.800
比方说你页面上

07:16.800 --> 07:18.800
你某一个区域也把它做成伍佑

07:18.800 --> 07:19.640
用伍佑来做

07:19.640 --> 07:19.960
好

07:19.960 --> 07:22.200
你只需要把这个区域的容器

07:22.200 --> 07:23.520
这个元素给它

07:23.520 --> 07:24.720
给交给伍佑来控制就

07:24.720 --> 07:25.360
哎

07:25.360 --> 07:26.440
交给伍佑

07:26.440 --> 07:27.200
哎呦

07:27.200 --> 07:28.400
哎呦

07:28.400 --> 07:29.200
我这卡住了

07:29.200 --> 07:30.000
卡住了

07:30.000 --> 07:32.560
交给伍佑来控制就完事了

07:32.560 --> 07:34.000
那其他的区域也不管了

07:34.000 --> 07:35.800
这是它的为什么能够实现建议的事

07:35.800 --> 07:36.720
就是关于这一点

07:36.720 --> 07:38.400
我给大家解释一下

07:38.400 --> 07:39.840
另外一个点呢

07:39.840 --> 07:41.920
是上一课确实没有时间讲

07:41.920 --> 07:43.280
那么这一课给它补充进来

07:43.320 --> 07:45.280
关于这个computed

07:45.280 --> 07:46.280
computed

07:46.280 --> 07:48.000
这个东西其实也可以在上几课讲

07:48.000 --> 07:49.040
也可以在这几课讲

07:49.040 --> 07:50.320
那么这个东西是什么东西呢

07:50.320 --> 07:51.720
这个东西叫做计算属性

07:53.520 --> 07:56.200
它叫做计算属性

07:57.800 --> 07:59.520
那么我们这里来给大家举个例子

07:59.520 --> 08:00.440
举个简单的例子

08:00.440 --> 08:02.040
然后让大家认识到这个东西

08:02.040 --> 08:04.520
因为这个解课我们就要用到这个东西

08:04.520 --> 08:05.520
这个东西还蛮重要的

08:05.520 --> 08:06.760
也蛮常见的

08:06.760 --> 08:07.880
我们在这里呢

08:07.880 --> 08:09.280
写上这么一个文件讲测试

08:10.600 --> 08:12.160
我们把这个伍佑代码拿过来

08:13.360 --> 08:15.200
我们今天的效果一会再看

08:15.200 --> 08:18.540
一会再看我们今天的效果

08:18.540 --> 08:19.820
伍佑代码拿过来

08:19.820 --> 08:21.900
我们这里写上这么一个页面

08:21.900 --> 08:23.740
index.js

08:23.740 --> 08:24.620
然后呢这里

08:24.620 --> 08:25.700
我们这里

08:25.700 --> 08:26.820
写上文件讲吧

08:26.820 --> 08:28.860
测试1

08:28.860 --> 08:30.220
测试1

08:30.220 --> 08:33.860
这个index.js放进来

08:33.860 --> 08:35.940
然后这里写上一个页面

08:35.940 --> 08:37.900
index.atml

08:38.940 --> 08:39.820
好 来吧

08:39.820 --> 08:40.980
把页面拿出来

08:40.980 --> 08:42.260
scripts

08:42.260 --> 08:43.940
.sqrt

08:43.940 --> 08:46.180
index.js

08:47.180 --> 08:48.380
然后呢

08:48.380 --> 08:50.020
在前面再去引用一个伍佑

08:51.380 --> 08:52.500
伍佑.js

08:52.500 --> 08:54.380
前面写上一个div

08:54.380 --> 08:56.460
这是我们写伍佑的页面的

08:56.460 --> 08:58.860
通常的一种模办式写法

08:58.860 --> 08:59.940
你就直接这样解决

08:59.940 --> 09:01.260
页面上其实没有什么东西

09:01.260 --> 09:02.860
我们通常使用伍佑的话

09:02.860 --> 09:05.900
都是把整个页面全部交给伍佑来控制

09:06.900 --> 09:07.940
那么现在我们写好了

09:07.940 --> 09:08.620
写好了之后呢

09:08.620 --> 09:10.620
在index.js里面我开始写代码

09:10.620 --> 09:11.660
要做什么呢

09:11.660 --> 09:13.460
不就是要创建一个伍佑对象吗

09:13.460 --> 09:14.060
对吧

09:14.060 --> 09:15.700
那么伍佑对象里面是有配置的

09:15.700 --> 09:16.180
对吧

09:16.180 --> 09:16.980
是不是有配置

09:16.980 --> 09:17.500
配置呢

09:17.500 --> 09:18.500
你可以直接写到这

09:18.500 --> 09:20.300
也可以单独写一个文件

09:20.300 --> 09:21.700
单独写个辩量

09:21.700 --> 09:23.180
config得进行配置

09:23.180 --> 09:23.780
对吧

09:23.780 --> 09:24.500
也都可以

09:24.500 --> 09:24.860
都可以

09:24.860 --> 09:26.180
这没有什么区别

09:26.180 --> 09:28.060
然后配置里面是不是有模办

09:28.060 --> 09:28.340
对吧

09:28.340 --> 09:29.020
有模办

09:29.020 --> 09:29.940
我们这里写个模办

09:31.420 --> 09:32.020
template

09:32.020 --> 09:33.700
这些要写的非常非常熟练

09:33.700 --> 09:35.620
我每天上课之后呢

09:35.620 --> 09:37.460
我课堂上讲的代码

09:37.460 --> 09:38.260
讲的那些效果

09:38.260 --> 09:40.180
下来一定要去把它完成一遍

09:40.180 --> 09:41.180
什么素材啊

09:41.180 --> 09:41.980
效果这种

09:41.980 --> 09:42.940
我都发给你们了

09:42.940 --> 09:43.740
都发给你们了

09:43.740 --> 09:45.580
所以一定要去把练习一遍

09:45.620 --> 09:47.020
那么这里template

09:47.020 --> 09:48.220
这些我就不大注释了

09:48.220 --> 09:49.780
因为是上课和学过的

09:49.780 --> 09:50.500
好

09:50.500 --> 09:51.860
这里我要干嘛呢

09:51.860 --> 09:53.500
我这个配置里面有一个数据

09:54.700 --> 09:55.820
这个数据呢

09:55.820 --> 09:59.860
它有一个first name

09:59.860 --> 10:00.420
比方说

10:01.620 --> 10:03.660
就我的名字嘛

10:03.660 --> 10:04.540
for some it

10:04.540 --> 10:06.380
就是more

10:08.260 --> 10:09.940
last name

10:09.940 --> 10:10.940
就是信和名

10:10.940 --> 10:11.580
对吧

10:11.580 --> 10:12.460
尼卡

10:14.260 --> 10:17.610
你

10:18.610 --> 10:21.170
那么这也就写了这么一个数据

10:21.170 --> 10:21.610
现在呢

10:21.610 --> 10:23.850
我要在页面上去显示

10:23.850 --> 10:24.930
显示

10:24.930 --> 10:25.170
好

10:25.170 --> 10:25.930
那么怎么显示呢

10:25.930 --> 10:27.130
我用这种方式来显示

10:27.130 --> 10:28.250
就一个标题

10:28.250 --> 10:29.650
一个H1元素

10:29.650 --> 10:31.690
这个H1元素里面呢

10:31.690 --> 10:32.450
我们写上什么呢

10:32.450 --> 10:32.850
信

10:34.570 --> 10:35.290
信

10:35.290 --> 10:36.650
信什么呢

10:36.650 --> 10:37.330
来自于哪儿了

10:37.330 --> 10:39.010
是不是来自于first name

10:39.010 --> 10:39.610
对不对

10:39.610 --> 10:41.010
first name

10:41.010 --> 10:41.450
然后呢

10:41.450 --> 10:42.370
名

10:42.370 --> 10:43.850
名来自于哪儿呢

10:43.850 --> 10:45.650
来自于last name

10:45.650 --> 10:46.450
那是什么

10:47.610 --> 10:48.290
然后呢

10:48.290 --> 10:49.810
全名

10:49.810 --> 10:50.050
好

10:50.050 --> 10:50.730
后边写上

10:50.730 --> 10:51.610
诶

10:51.610 --> 10:52.330
全名

10:53.930 --> 10:54.770
全名

10:54.770 --> 10:55.010
好

10:55.010 --> 10:56.330
后边写上全名

10:56.330 --> 10:57.690
那么全名怎么写

10:57.690 --> 10:58.690
这里

10:58.690 --> 11:00.530
全名是不是要做拼接啊

11:00.530 --> 11:01.050
诶

11:01.050 --> 11:02.650
如果说当中最不好的办法

11:02.650 --> 11:03.930
当中这里有很多处理方式

11:03.930 --> 11:05.690
最不好的办法是在这里写

11:05.690 --> 11:06.650
for name

11:06.650 --> 11:07.690
在这里写上什么

11:07.690 --> 11:09.490
摩利卡

11:10.490 --> 11:11.290
摩利卡

11:11.290 --> 11:11.730
对吧

11:11.730 --> 11:13.450
这样最不好的是这种写法

11:13.450 --> 11:14.130
因为这种写法

11:14.130 --> 11:15.810
相当于把数据重复了

11:15.810 --> 11:16.610
重复的数据呢

11:16.610 --> 11:18.130
就容易导致维护上出的

11:18.130 --> 11:19.130
有容易出问题

11:19.130 --> 11:20.330
比较比较这就写错了

11:20.330 --> 11:20.930
对吧

11:20.930 --> 11:21.410
最好是

11:21.410 --> 11:21.770
而且呢

11:21.770 --> 11:23.010
这个东西更改了之后

11:23.010 --> 11:24.490
这个东西是不是还是没变

11:24.490 --> 11:24.690
对吧

11:24.690 --> 11:26.090
这都是最不好的写法

11:26.090 --> 11:28.250
那么随时我们应该用计算来生成

11:28.250 --> 11:30.730
那么全名是通过一个计算生成出来的

11:30.730 --> 11:32.530
全名是通过计算生成出来的

11:32.530 --> 11:33.530
那么全名的话

11:33.530 --> 11:34.410
我们这里呢

11:34.410 --> 11:35.410
由极动写法

11:35.410 --> 11:37.490
极动写法就直接在这里写

11:37.490 --> 11:38.610
在这里写个表达试

11:38.610 --> 11:39.890
在这里写个表达试

11:39.890 --> 11:41.850
就是因为这里表写的是解释表达试

11:41.850 --> 11:42.450
对不对

11:42.450 --> 11:43.330
first name

11:43.330 --> 11:44.450
用字书书试拼接

11:44.450 --> 11:45.730
加上那是那

11:45.730 --> 11:47.330
这就写写上全名了

11:47.330 --> 11:48.050
对不对

11:48.050 --> 11:49.090
这就写上全名了

11:49.090 --> 11:49.370
好

11:49.370 --> 11:50.050
咱们来看一下吧

12:01.110 --> 12:02.190
有东西呢

12:02.190 --> 12:03.110
点击右键

12:03.110 --> 12:03.550
检查

12:04.670 --> 12:05.430
哪里呢

12:05.430 --> 12:07.860
看到了吗

12:07.860 --> 12:08.380
嗯

12:08.380 --> 12:09.860
这个不是错误啊

12:09.860 --> 12:10.500
这个不是错误

12:10.500 --> 12:10.820
哦

12:10.820 --> 12:11.900
我少写了这个

12:11.900 --> 12:13.860
我少写了个啥呀

12:13.860 --> 12:14.740
我少写个啥

12:14.740 --> 12:15.820
是不是少写了个L

12:15.820 --> 12:16.700
对不对

12:16.700 --> 12:18.060
少写个L

12:18.060 --> 12:21.340
L就是怎么

12:21.340 --> 12:21.900
App

12:21.900 --> 12:22.780
对不对

12:22.780 --> 12:23.500
少写这个东西

12:23.500 --> 12:25.260
好

12:25.260 --> 12:25.620
然后呢

12:25.620 --> 12:26.460
我们看一下

12:26.460 --> 12:27.020
就出来了

12:27.020 --> 12:28.020
对不对

12:28.020 --> 12:29.060
姓名

12:29.060 --> 12:29.460
而且呢

12:29.460 --> 12:30.460
这样子的好处在于

12:30.460 --> 12:32.140
我一改姓和一改名

12:32.140 --> 12:33.300
是不是他跟着改了

12:33.300 --> 12:34.260
全名跟着改了

12:34.260 --> 12:36.380
因为我改姓和名的时候

12:36.380 --> 12:37.340
是不是会导致的

12:37.340 --> 12:38.780
因为数据是想用似的

12:38.780 --> 12:39.780
我改了他的数据

12:39.780 --> 12:41.580
是不是要重新渲染啊

12:41.580 --> 12:42.260
他一重新渲染

12:42.260 --> 12:43.740
是不是重新算了一次

12:43.740 --> 12:44.100
对吧

12:44.100 --> 12:45.500
就重新计算了一次

12:45.500 --> 12:46.260
就这么简单

12:46.260 --> 12:47.980
所以我们就这里比方举个例子啊

12:48.020 --> 12:50.500
这里用App来接收

12:50.500 --> 12:51.660
好来接收

12:51.660 --> 12:51.900
好

12:51.900 --> 12:52.260
这里呢

12:52.260 --> 12:52.860
我们这样子写

12:54.940 --> 12:56.700
App

12:56.700 --> 12:57.500
他都摸写脱了

12:57.500 --> 12:57.820
对吧

12:57.820 --> 12:58.540
摸写脱了

12:58.540 --> 12:59.580
我现在感冒了

12:59.580 --> 13:00.300
他也不好说

13:00.300 --> 13:00.780
我就是啊

13:00.780 --> 13:01.500
对吧

13:01.500 --> 13:04.420
first name

13:04.420 --> 13:05.380
这里把它变成摸

13:07.260 --> 13:07.700
你看

13:07.700 --> 13:08.420
这样子一改

13:08.420 --> 13:09.100
这里改了

13:09.100 --> 13:10.220
是不是这里也跟着改了

13:10.220 --> 13:10.460
对吧

13:10.460 --> 13:11.420
这就是啊

13:11.420 --> 13:13.580
用表达式的好处

13:13.580 --> 13:14.660
但是有的时候呢

13:14.660 --> 13:15.460
这样子写呢

13:15.460 --> 13:16.780
在这种情况下呢

13:16.780 --> 13:17.660
比较简单啊

13:17.660 --> 13:18.340
你可以这样子写

13:18.340 --> 13:19.260
没啥问题

13:19.260 --> 13:20.580
但是有的时候呢

13:20.580 --> 13:21.540
这样子写呢

13:21.540 --> 13:22.900
并不是很好

13:22.900 --> 13:24.380
为什么说不是很好呢

13:24.380 --> 13:25.100
就说如果说

13:25.100 --> 13:26.940
你这里的计算很复杂

13:26.940 --> 13:28.500
你需要经过不少的代码

13:28.500 --> 13:29.820
比方说还经过判断

13:29.820 --> 13:31.060
还要经过循环

13:31.060 --> 13:32.380
还要经过一些表达式

13:32.380 --> 13:33.500
还要经过一些语句

13:33.500 --> 13:35.100
才能算出来的东西

13:35.100 --> 13:37.140
如果说你要面对这种情况的话

13:37.140 --> 13:38.580
你把这代码全部夺列到这里

13:38.580 --> 13:39.180
不太合适的

13:39.180 --> 13:41.260
因为这里只能写表达式

13:41.260 --> 13:43.060
那么这种情况下又怎么办呢

13:43.060 --> 13:43.380
好

13:43.380 --> 13:45.260
第二种第二种写法啊

13:45.260 --> 13:45.980
看着啊

13:45.980 --> 13:47.260
这里有好几种写法

13:47.300 --> 13:47.940
第二种写法就是

13:47.940 --> 13:49.660
我们用我们上几课学过的姿势

13:49.660 --> 13:50.180
写什么

13:50.180 --> 13:51.420
写message

13:51.420 --> 13:52.620
写message

13:52.620 --> 13:52.780
好

13:52.780 --> 13:53.260
那么这里呢

13:53.260 --> 13:53.980
写message

13:53.980 --> 13:54.820
好get

13:54.820 --> 13:55.860
复我列

13:55.860 --> 13:55.940
啊

13:55.940 --> 13:56.300
get

13:56.300 --> 13:57.260
复我列

13:57.260 --> 13:58.820
得到一个全名

13:58.820 --> 13:59.020
好

13:59.020 --> 14:00.180
return

14:00.180 --> 14:01.900
this.firstline

14:01.900 --> 14:02.580
拼接上

14:02.580 --> 14:03.540
this.lastline

14:03.540 --> 14:04.780
这能看懂吗

14:04.780 --> 14:05.580
调用这个函数

14:05.580 --> 14:08.540
是不是可以得到一个全名

14:08.540 --> 14:08.820
对吧

14:08.820 --> 14:10.020
我怎么来的全名

14:10.020 --> 14:11.860
就是我当前的信

14:11.860 --> 14:13.540
加上当前的名

14:13.540 --> 14:14.260
所以说我们这里呢

14:14.260 --> 14:15.460
可以调用这个函数

14:15.460 --> 14:16.180
因为我们知道

14:16.180 --> 14:16.900
在模板里面

14:16.900 --> 14:18.060
是可以调用函数的

14:18.060 --> 14:19.260
就像世界里面可以调用

14:19.260 --> 14:19.940
这里能不能调用

14:19.940 --> 14:21.540
一样的可以调用

14:21.540 --> 14:23.340
这里也是可以调用函数的

14:23.340 --> 14:24.020
调用这个函数

14:24.020 --> 14:25.580
是不是可以得到一个全名

14:25.580 --> 14:26.020
对吧

14:26.020 --> 14:26.220
好

14:26.220 --> 14:26.700
保存

14:26.700 --> 14:27.260
咱们来看一下

14:28.780 --> 14:28.980
好

14:28.980 --> 14:30.500
你看是不是还是出来了全名

14:30.500 --> 14:31.740
并且有没有响应识

14:32.980 --> 14:34.220
有没有响应识

14:34.220 --> 14:35.220
为什么没有响应识呢

14:35.220 --> 14:36.500
因为我这里用的是函数

14:36.500 --> 14:37.460
用的不是数据

14:37.460 --> 14:38.540
数据才是响应识的

14:40.380 --> 14:42.020
但是你要这样子想啊

14:42.020 --> 14:42.860
我改的话

14:42.860 --> 14:44.620
肯定是不会改函数的

14:44.620 --> 14:45.620
我改的是怎样

14:45.660 --> 14:48.700
我改的是新和名这个数据

14:48.700 --> 14:50.900
当我改新和名这个数据的时候

14:50.900 --> 14:52.740
是不是要重新渲染啊

14:52.740 --> 14:53.540
要重新渲染

14:53.540 --> 14:55.420
是不是会重新调用这个函数

14:55.420 --> 14:56.260
重新调用这个函数

14:56.260 --> 14:57.940
是不是得到新的全名了

14:57.940 --> 14:58.340
对吧

14:58.340 --> 14:59.380
是一样的

14:59.380 --> 15:00.380
仍然可以

15:00.380 --> 15:01.860
所以说这里仍然可以改数据

15:01.860 --> 15:03.100
first name

15:03.100 --> 15:04.260
刚刚说改成

15:04.260 --> 15:04.620
不

15:05.860 --> 15:06.980
你看是不是仍然改了

15:06.980 --> 15:07.380
对吧

15:07.380 --> 15:09.140
这也是一种邪法

15:09.140 --> 15:10.780
这也是一种邪法

15:10.780 --> 15:10.980
好

15:10.980 --> 15:11.420
接下来呢

15:11.420 --> 15:13.500
我们要农种介绍第三种邪法

15:14.500 --> 15:16.620
第三种邪法是啥呢

15:17.620 --> 15:18.060
好

15:18.060 --> 15:19.580
第三种邪法呢

15:20.300 --> 15:20.820
在这

15:22.660 --> 15:23.620
加一个配置

15:23.620 --> 15:24.820
叫做computed

15:24.820 --> 15:26.140
computed

15:26.140 --> 15:28.220
那么这个配置里边呢

15:28.220 --> 15:29.820
它写什么呢

15:29.820 --> 15:32.420
写的是额外的属性

15:32.420 --> 15:34.340
每一个属性呢

15:34.340 --> 15:36.780
它在这里边也可以直接使用

15:36.780 --> 15:38.020
我给大家写一遍

15:38.020 --> 15:38.860
写一遍

15:38.860 --> 15:40.460
然后你马上就明白什么意思了

15:40.460 --> 15:41.860
比方说 forlain

15:41.860 --> 15:42.940
全名

15:43.300 --> 15:44.220
这个全名咋写呢

15:44.220 --> 15:46.100
我们直接把这个放过来

15:46.100 --> 15:47.300
直接放过来

15:47.300 --> 15:48.660
那么这里写啥呢

15:48.660 --> 15:51.300
直接是forlain

15:51.300 --> 15:51.460
好

15:51.460 --> 15:52.380
给大家解释一下

15:52.380 --> 15:53.020
再带马上意思

15:54.460 --> 15:55.940
我这里放的是什么呢

15:55.940 --> 15:58.060
好像看上去是一个属性

15:58.060 --> 15:58.540
对吧

15:58.540 --> 16:00.940
好像看上去是一个data里面的属性

16:00.940 --> 16:02.540
但data里面有没有这个属性

16:02.540 --> 16:03.860
是没有这个属性

16:03.860 --> 16:04.860
没有这个属性

16:04.860 --> 16:06.340
那么这个属性哪来的呢

16:06.340 --> 16:09.060
它哪来的是这个地方的配置

16:09.060 --> 16:10.860
也就是说我这里写上这个

16:10.860 --> 16:12.820
注意我没有写的两个小货号

16:12.860 --> 16:14.300
我这里不是调用函数

16:14.300 --> 16:15.300
你这里写的是函数

16:15.300 --> 16:17.060
但是我这里不是调用函数

16:17.060 --> 16:18.060
不是调用函数

16:18.060 --> 16:20.140
我直接把它当成属性来使用

16:20.140 --> 16:22.500
它会自动的帮你调用这个函数

16:22.500 --> 16:24.460
来得到这个结果

16:24.460 --> 16:26.620
它会自动的帮你调用这个函数来得到结果

16:26.620 --> 16:27.500
就这么个意思

16:27.500 --> 16:28.820
这就叫计算属性

16:30.420 --> 16:30.820
好

16:30.820 --> 16:31.660
当然这个计算属性里面

16:31.660 --> 16:32.820
还有一些额外的知识

16:32.820 --> 16:33.660
我们先不着急

16:33.660 --> 16:35.300
我们先看它用法

16:35.300 --> 16:36.100
用法的话

16:36.100 --> 16:38.100
你看计算属性是不是配合到一个函数

16:38.100 --> 16:38.260
好

16:38.260 --> 16:40.180
那么这个函数是不是会返回一个结果

16:40.180 --> 16:40.660
OK

16:42.820 --> 16:43.980
我们计算属性来使用

16:43.980 --> 16:45.780
那么当你使用这个属性的时候

16:45.780 --> 16:47.820
实际上调用的就是函数

16:47.820 --> 16:49.260
也就是说什么了

16:49.260 --> 16:50.860
我们computing里面的配置

16:50.860 --> 16:52.500
是不是也会变成

16:52.500 --> 16:54.580
也会提升到App里面

16:54.580 --> 16:54.900
对吧

16:54.900 --> 16:55.860
因为我们在无办里面

16:55.860 --> 16:57.060
是不是可以直接使用

16:57.060 --> 16:59.300
无办里面是可以直接使用计算属性的

16:59.300 --> 17:00.980
computing里面的配置

17:00.980 --> 17:03.100
是可以直接在无办里面使用的

17:03.100 --> 17:05.700
因此它也会提升到App里面

17:05.700 --> 17:07.700
就提升到那个无诱实例里面

17:07.700 --> 17:08.500
计算属性

17:09.700 --> 17:11.180
其中的配置

17:11.180 --> 17:15.780
會提升到無誘實力中

17:15.780 --> 17:21.180
因此在模板中可以直接當作

17:21.180 --> 17:27.060
可以直接當作就是屬向使用

17:27.060 --> 17:31.660
你可以直接使用 使用時實際上

17:31.660 --> 17:34.720
調用的是對應的方法

17:34.720 --> 17:37.040
它會調用方法得到的結果

17:37.040 --> 17:39.340
這就是計算屬向

17:39.340 --> 17:42.420
而且通常計算屬向

17:42.420 --> 17:44.460
什麼情況下要寫計算屬向呢

17:44.460 --> 17:45.740
通常情況下

17:45.740 --> 17:47.540
計算屬向裡邊書寫的東西

17:47.540 --> 17:49.840
都是我們根據data

17:49.840 --> 17:52.140
或者是根據其他的計算屬向

17:52.140 --> 17:55.460
這還可以配置很多計算屬向

17:55.460 --> 17:58.540
每個屬向的用法跟上面的用法是一樣的

17:58.540 --> 18:00.840
那麼計算屬向通常是

18:00.840 --> 18:04.420
我們需要的數據來自於data

18:04.420 --> 18:06.980
或者是其他屬向

18:06.980 --> 18:11.580
來自於其他屬向計算得到的數據

18:11.580 --> 18:13.120
通常

18:13.120 --> 18:14.660
通常情況下

18:14.660 --> 18:19.020
計算屬向

18:19.020 --> 18:20.540
用於

18:20.540 --> 18:22.860
通過

18:22.860 --> 18:23.880
data

18:23.880 --> 18:27.720
或其他計算 今天我們的例子裡面就會有這個東西

18:27.720 --> 18:30.280
通過其他計算屬向

18:30.280 --> 18:32.580
得到的數據

18:32.580 --> 18:35.140
我們以後會說跟它跟方法有什麼區別

18:35.340 --> 18:37.900
計算屬於通過data或其他計算屬向得到的數據

18:37.900 --> 18:40.980
否則的話你就不要用計算屬向了

18:40.980 --> 18:42.780
計算屬向裡邊一般情況下

18:42.780 --> 18:46.100
計算屬屬向裡邊都會使用到data裡邊的數據

18:46.100 --> 18:48.920
要么就使用到其他計算屬向

18:48.920 --> 18:52.240
這就是計算屬向 你可以直接使用

18:52.240 --> 18:53.780
好 那麼現在我們可以看到

18:53.780 --> 18:56.340
看一下這邊 你看是不是一樣的

18:56.340 --> 18:58.220
我們再改一下

18:58.220 --> 19:00.700
first and then

19:00.700 --> 19:01.860
改一下

19:01.860 --> 19:05.380
你看這一改是不是跟著改了 對不對 跟著改了

19:05.380 --> 19:07.700
而且不僅如此 現在我們開始要說

19:07.700 --> 19:11.180
跟方法不太一樣的地方了

19:11.180 --> 19:14.100
這也是面試提到時候容易問到的地方

19:14.100 --> 19:18.580
與方法的區別

19:18.580 --> 19:21.500
第一個區別

19:21.500 --> 19:27.900
區別的話是計算屬向

19:27.900 --> 19:37.460
5u會檢查計算屬向的依賴

19:37.460 --> 19:38.780
什麼意思呢

19:38.780 --> 19:40.980
就是說你這個東西是不是計算屬向

19:40.980 --> 19:42.620
所以計算屬向

19:42.620 --> 19:45.620
這個計算屬性 依賴誰呢

19:45.620 --> 19:46.700
就是要算這個東西

19:46.700 --> 19:48.100
要把這個全面算出來

19:48.100 --> 19:51.540
是不是要依賴data裡邊的first name

19:51.540 --> 19:53.700
和data裡邊的last name

19:53.700 --> 19:55.620
是不是要依賴這兩個東西

19:55.620 --> 19:57.300
所以要依賴這兩個東西

19:57.860 --> 20:01.460
5u會檢查計算屬性的依賴

20:01.460 --> 20:07.460
當依賴沒有發生變化時

20:07.460 --> 20:13.260
5u會直接使用緩存

20:13.260 --> 20:16.620
就是之前緩存的結果

20:16.620 --> 20:20.780
它不會重新計算 而不會重新計算

20:20.780 --> 20:22.260
這是為了提高效率

20:22.260 --> 20:24.540
因為這個計算屬性裡面

20:24.540 --> 20:26.300
可能我們現在代碼很簡單

20:26.300 --> 20:28.180
但是將來可能代碼比較複雜

20:28.180 --> 20:30.820
代碼可能很多很多有很多代碼

20:30.820 --> 20:32.740
可能計算需要耗費一定時間

20:32.740 --> 20:36.060
我要計算出全名或者計算出別的什麼玩意

20:36.060 --> 20:37.700
可能比較耗費時間

20:37.700 --> 20:39.020
也就是說當依賴像

20:39.020 --> 20:41.260
因為我始終是通過這個依賴來發生變化的

20:41.260 --> 20:41.900
對吧

20:41.900 --> 20:43.500
通過這個依賴來發生變化的

20:43.500 --> 20:45.420
只要依賴像沒有變

20:45.420 --> 20:46.540
只要依賴像

20:46.540 --> 20:48.180
這個first name和last name

20:48.180 --> 20:49.420
它只要沒有變化

20:49.420 --> 20:52.300
那麼計算屬性它就不會變化

20:52.300 --> 20:53.620
它就不會變化

20:53.620 --> 20:54.540
是這麼個意思

20:54.580 --> 20:56.940
只要依賴像沒有發生變化

20:56.940 --> 21:00.100
它的計算屬性它就不會發生變化

21:00.100 --> 21:03.620
我們怎麼來檢驗這一點呢

21:03.620 --> 21:04.300
我給它看一下

21:05.540 --> 21:06.900
我們給它看一下

21:06.900 --> 21:08.780
那麼下面我們給它寫個button

21:08.780 --> 21:09.300
一個按鈕

21:11.260 --> 21:12.540
這寫啥呢

21:12.540 --> 21:13.100
加嗎

21:13.100 --> 21:13.340
加

21:14.740 --> 21:15.700
這裡我們寫個數字

21:17.140 --> 21:17.620
寫個數字

21:20.300 --> 21:22.260
這裡data裡面寫個數字

21:22.260 --> 21:23.500
寫個數字n

21:23.500 --> 21:24.100
n是0嗎

21:24.980 --> 21:27.100
這個按鈕裡邊我們給它做這個視線

21:27.100 --> 21:27.660
click

21:27.660 --> 21:28.860
做這個視線

21:28.860 --> 21:31.140
那麼這是n加加就這麼簡單

21:31.140 --> 21:32.180
點這個按鈕一加

21:32.180 --> 21:33.500
那麼這個數據是不是變了

21:33.500 --> 21:35.180
數據變了是不是要重新選擇

21:35.180 --> 21:36.340
這一塊肯定要重新選擇

21:36.340 --> 21:37.060
跑不了的

21:37.060 --> 21:38.260
肯定要重新選擇

21:38.260 --> 21:39.020
咱們來看一下

21:41.180 --> 21:42.620
這裡點加

21:42.620 --> 21:43.580
是不是數字加一了

21:43.580 --> 21:44.100
對吧

21:44.100 --> 21:45.340
數字加一了

21:45.340 --> 21:46.140
對不對

21:46.140 --> 21:47.140
看沒

21:47.140 --> 21:48.260
數字加一了

21:48.260 --> 21:50.300
然後接下來我們來看一下這邊

21:50.300 --> 21:52.020
我們在計算屬性裡邊

21:52.020 --> 21:53.460
給它輸出這麼一句話

21:54.420 --> 21:56.540
屬性重新計算

21:58.700 --> 22:00.460
我們來看一下這個函數

22:00.460 --> 22:03.960
它有沒有反復調用

22:03.960 --> 22:05.200
你看一下

22:05.200 --> 22:06.360
你看一開始調用了一次

22:06.360 --> 22:06.600
對吧

22:06.600 --> 22:09.000
一開始要宣展是不是要計算一次

22:09.000 --> 22:09.400
對吧

22:09.400 --> 22:10.480
要計算一次

22:10.480 --> 22:12.160
那麼今天我們加

22:12.160 --> 22:14.040
你看有沒有重新調用這個函數

22:14.040 --> 22:15.400
有沒有重新調用

22:15.400 --> 22:16.600
是沒有重新調用

22:16.600 --> 22:17.400
為什麼呢

22:17.400 --> 22:19.960
因為這個計算屬性它的依賴項

22:19.960 --> 22:21.240
還指依賴這兩個東西

22:21.240 --> 22:22.880
這兩個東西是不是沒有變

22:22.880 --> 22:24.280
這兩個東西沒變

22:24.320 --> 22:26.000
它傳出來的結果它就不會變

22:26.000 --> 22:27.400
這是唯有為了提高效率

22:27.400 --> 22:29.000
它給你做到這麼一種機制

22:29.000 --> 22:30.040
它這兩個屬性沒有變

22:30.040 --> 22:31.560
這是不是非常智能

22:31.560 --> 22:32.240
對吧

22:32.240 --> 22:33.040
這兩個屬性沒有變

22:33.040 --> 22:34.040
它就不會重新計算

22:34.040 --> 22:35.080
它是為了提高效率

22:35.080 --> 22:36.760
你覺得有必要重新計算嗎

22:36.760 --> 22:38.360
這個東西是不是沒有必要重新計算

22:38.360 --> 22:38.920
對吧

22:38.920 --> 22:39.920
所以它就不會重新計算

22:40.920 --> 22:41.080
好

22:41.080 --> 22:42.800
那麼如果說我加編了呢

22:42.800 --> 22:43.800
first name

22:43.800 --> 22:44.600
加編成

22:44.600 --> 22:45.920
改成這個字

22:45.920 --> 22:46.400
好

22:46.400 --> 22:47.120
你看

22:47.120 --> 22:48.760
是不是重新運行的

22:48.760 --> 22:49.840
屬性重新運行的

22:49.840 --> 22:50.680
對吧

22:50.680 --> 22:52.680
那麼就是計算屬性重新

22:52.680 --> 22:54.200
就是屬性重新計算了

22:54.200 --> 22:55.360
是不是它變了

22:55.360 --> 22:55.760
對吧

22:55.760 --> 22:57.840
因為它的依賴項發生了變化

22:57.840 --> 22:58.720
明白這個意思嗎

22:58.720 --> 23:00.480
只要它的依賴項不變

23:00.480 --> 23:01.600
它的屬性值

23:01.600 --> 23:04.240
計算屬性這個函數是不會反覆掉用的

23:04.240 --> 23:06.640
這個東西就跟方法不一樣了

23:06.640 --> 23:07.120
你看著

23:08.520 --> 23:09.240
方法掉用了

23:11.600 --> 23:13.720
方法掉用了

23:13.720 --> 23:15.320
這就是跟方法的第一個區別

23:15.320 --> 23:16.880
那麼如果說我們這裡是用方法

23:16.880 --> 23:18.560
接著forlain

23:18.560 --> 23:19.800
你看是用方法

23:19.800 --> 23:21.760
那麼這裡是每一次重新選擇

23:21.760 --> 23:23.320
它都會重新掉用這個方法

23:23.320 --> 23:23.720
你看著

23:25.160 --> 23:26.240
你看方法掉用了

23:26.240 --> 23:27.040
一開始要掉用一次

23:27.040 --> 23:27.280
對吧

23:27.280 --> 23:28.400
我們每加一次你看

23:28.400 --> 23:29.280
是不是都要掉用了

23:29.280 --> 23:30.760
對不對

23:30.760 --> 23:34.640
所謂除非你說你在處理事件

23:34.640 --> 23:36.360
否則其他情況下

23:36.360 --> 23:37.960
冷用計算屬性

23:37.960 --> 23:39.400
儘量用計算屬性

23:39.400 --> 23:42.640
因為計算屬性的效率更高

23:42.640 --> 23:43.160
對吧

23:43.160 --> 23:45.040
很好理解對不對

23:45.040 --> 23:46.760
那你覺得它這個計算屬性

23:46.760 --> 23:48.640
它是怎麼實現這一點的呢

23:48.640 --> 23:49.560
來

23:49.560 --> 23:53.400
你覺得它這個計算屬性是怎麼來實現

23:53.480 --> 23:54.680
監測依賴的呢

23:54.680 --> 23:57.000
因為5u它也是用介式寫的

23:57.000 --> 23:58.520
它不是用什麼特別

23:58.520 --> 24:00.560
其他的很複雜的語言寫的

24:00.560 --> 24:02.880
它怎麼能知道依賴上發生的變化呢

24:05.680 --> 24:07.160
怎麼去監聽的啊

24:07.160 --> 24:08.640
怎麼去監聽的

24:08.640 --> 24:10.000
這還是響應式原理

24:10.000 --> 24:11.600
確實還是響應式原理

24:11.600 --> 24:13.200
它是怎麼監聽的呢

24:13.200 --> 24:15.400
因為你這個data裡邊

24:15.400 --> 24:17.800
這些東西是不是會提到5u實例裡邊

24:17.800 --> 24:18.600
我簡單說一下

24:18.600 --> 24:21.080
因為這個實例到底成原罵分析了

24:21.080 --> 24:22.000
我簡單說一下

24:22.040 --> 24:23.160
這個東西你了解到

24:23.160 --> 24:24.640
越層對裡面是越有幫助

24:24.640 --> 24:26.240
對你找工作越有幫助

24:26.240 --> 24:27.800
我簡單說一下就行了

24:27.800 --> 24:29.120
因為這個data裡邊的配置

24:29.120 --> 24:31.680
是不是提升到5u實例裡邊去了

24:31.680 --> 24:33.440
在5u實例裡邊

24:33.440 --> 24:37.360
它這些屬性是不是用OBJ的DefineProperty定義的

24:37.360 --> 24:40.240
那麼定義的時候是不是有Gate

24:40.240 --> 24:42.120
Gate是不是讀取屬性的時候

24:42.120 --> 24:43.960
它會監聽到

24:43.960 --> 24:45.360
讀取屬性的時候

24:45.360 --> 24:47.160
它會監聽到

24:47.160 --> 24:48.440
就這麼個意思

24:48.440 --> 24:49.360
於是呢

24:49.400 --> 24:52.240
當它發現你在用計算屬性的時候

24:52.240 --> 24:53.760
forlain

24:53.760 --> 24:55.800
當它發現你在用計算屬性的時候

24:55.800 --> 24:57.960
它就知道了你在調用這個函數

24:57.960 --> 24:59.080
那麼這個時候

24:59.080 --> 25:01.720
它就會做一張表來進行緩存

25:01.720 --> 25:03.640
它首先檢查這張表裡邊

25:03.640 --> 25:06.000
之前有沒有緩存結果

25:06.000 --> 25:08.960
如果首先檢查一下

25:08.960 --> 25:10.600
現在這個過程中

25:10.600 --> 25:12.200
first name和last name

25:12.200 --> 25:13.800
不是在調用它的gate嗎

25:13.800 --> 25:15.840
在gate函數裡邊可以檢查

25:15.840 --> 25:18.720
目前有沒有調用這個東西

25:18.840 --> 25:20.000
目前有沒有調用

25:20.000 --> 25:21.240
如果說有調用的話

25:21.240 --> 25:22.160
那麼檢查

25:22.160 --> 25:23.240
如果沒有調用的話

25:23.240 --> 25:26.320
如果說沒有調用這個first name和last name的話

25:26.320 --> 25:29.360
那麼檢查一下目前的這個當緩存表裡邊

25:29.360 --> 25:30.720
有沒有for name

25:30.720 --> 25:31.840
有沒有這個東西

25:31.840 --> 25:32.880
如果說有的話

25:32.880 --> 25:33.880
直接給你緩存

25:33.880 --> 25:35.440
它就不會調用這個函數了

25:35.440 --> 25:37.280
就不會調用這個函數了

25:37.280 --> 25:38.880
如果沒有的話

25:38.880 --> 25:40.600
那麼才會去調用這個函數

25:40.600 --> 25:41.880
重新來算一次

25:41.880 --> 25:43.720
重新來算一次

25:43.720 --> 25:45.120
它是在哪裡檢查的

25:45.160 --> 25:48.280
是在這個first name和last name裡面的

25:48.280 --> 25:50.440
gate函數裡邊進行檢查的

25:50.440 --> 25:51.960
因為它裡邊是有

25:51.960 --> 25:53.360
定義了objects

25:53.360 --> 25:54.080
define property

25:54.080 --> 25:55.240
對吧

25:55.240 --> 25:55.920
定義了這個東西

25:55.920 --> 25:57.320
所以它能夠監聽到

25:57.320 --> 25:58.760
你在讀這個東西

25:58.760 --> 26:00.160
它能夠監聽到的

26:00.160 --> 26:02.840
所以它原理還是用這個東西實現的

26:02.840 --> 26:04.440
不過我只能簡單說一下

26:04.440 --> 26:07.320
簡單說一下就行了

26:09.840 --> 26:10.680
然後呢

26:10.680 --> 26:12.720
這是關於計算屬性

26:12.720 --> 26:15.880
那麼另外它跟方法的還有一個區別

26:15.920 --> 26:18.200
就是說計算屬性

26:18.200 --> 26:19.640
計算屬性

26:19.640 --> 26:24.040
可以配置get和set

26:24.040 --> 26:33.200
分別用於讀取時和設置時

26:33.200 --> 26:37.680
分別用於讀取時和設置時

26:37.680 --> 26:38.920
什麼意思呢

26:38.920 --> 26:41.200
就是我們屬性是不是可以讀

26:41.200 --> 26:42.560
也可以重新負責

26:42.560 --> 26:43.200
對吧

26:43.200 --> 26:44.200
屬性是不是又可以讀

26:44.200 --> 26:45.480
又可以重新負責

26:45.520 --> 26:46.440
對不對

26:46.440 --> 26:48.760
那麼我們剛才是不是只是在讀屬性

26:48.760 --> 26:50.560
而且計算屬性是不能有參數的

26:50.560 --> 26:51.440
這裡就再說一句

26:51.440 --> 26:52.600
再多說一句

26:52.600 --> 26:53.960
計算屬性是不能有參數的

26:57.840 --> 27:05.400
計算屬性的讀取函數

27:05.400 --> 27:06.760
不可以有參數

27:06.760 --> 27:08.040
有參數沒有意義

27:08.040 --> 27:09.280
有參數沒有意義

27:09.280 --> 27:10.960
就像你在讀一個東西的時候

27:10.960 --> 27:13.640
假如你在讀這裡讀這個屬性值

27:13.640 --> 27:14.480
你該傳什麼參數嗎

27:14.480 --> 27:15.680
你告訴我該傳什麼參數嗎

27:15.680 --> 27:17.120
他也不知道該傳什麼參數

27:17.120 --> 27:19.200
所以讀的時候他都沒有參數的

27:19.200 --> 27:20.960
函數是不是可以有任意的參數

27:20.960 --> 27:22.000
你調用函數

27:22.000 --> 27:23.160
你要該傳參數的

27:23.160 --> 27:24.320
可以有任意的參數

27:24.320 --> 27:26.800
計算屬性是不能有參數的

27:26.800 --> 27:27.760
那麼另外一個就是

27:27.760 --> 27:29.560
計算屬性可以配置get和set

27:29.560 --> 27:31.200
那麼get和set的配置的話

27:31.200 --> 27:33.000
跟那個optic是define property

27:33.000 --> 27:34.080
是一樣的意思

27:34.080 --> 27:35.480
類似的意思

27:35.480 --> 27:37.080
剛才我們這樣子寫的

27:37.080 --> 27:38.440
就是他只能讀

27:38.440 --> 27:39.560
這個計算屬性只能讀

27:39.560 --> 27:42.360
是不能複職的

27:42.360 --> 27:43.680
他只能讀不能複職

27:43.680 --> 27:48.670
那比方說你下面還要給他複職

27:48.670 --> 27:50.110
比方說

27:50.110 --> 27:52.670
比方說你在下面還要給這個

27:52.670 --> 27:58.830
後水

27:58.830 --> 28:00.830
還要給這個計算屬性複職

28:00.830 --> 28:02.270
我要我們寫給我悶框

28:02.270 --> 28:02.550
對吧

28:02.550 --> 28:04.710
寫給我悶框

28:04.710 --> 28:06.230
就是你給我寫全名

28:06.230 --> 28:07.590
你直接給我寫全名就行了

28:07.590 --> 28:08.990
我幫你來設置

28:08.990 --> 28:10.150
直接來寫全名

28:10.150 --> 28:10.990
那麼這個地方

28:10.990 --> 28:12.870
我們是不是用vmod還記得嗎

28:12.870 --> 28:13.790
vmod

28:13.790 --> 28:16.390
vmod是不是給他

28:16.390 --> 28:17.950
綁定這個附我令

28:17.950 --> 28:18.270
對吧

28:18.270 --> 28:20.310
因為全名是附我令

28:20.310 --> 28:22.470
那麼這個東西是不是設計到複職了

28:22.470 --> 28:23.990
是不是設計到複職了

28:23.990 --> 28:27.950
文本框裡的數據是不是會複職給複我令

28:27.950 --> 28:28.510
對不對

28:28.510 --> 28:29.710
是不是會複職給複我令

28:29.710 --> 28:31.030
那麼我們先看一下

28:31.030 --> 28:31.870
我這裡保存

28:31.870 --> 28:32.990
沒保存

28:32.990 --> 28:34.510
看一下

28:34.510 --> 28:35.510
那麼你看這裡

28:35.510 --> 28:37.270
全名莫里卡好像這裡顯示沒問題

28:37.270 --> 28:37.590
對吧

28:37.590 --> 28:39.870
那麼我們這裡寫個改成

28:39.870 --> 28:41.430
隨便改一個字

28:41.430 --> 28:42.430
你看他說什麼

28:42.430 --> 28:42.990
他爆搓了

28:42.990 --> 28:44.630
他說複我令呢

28:44.630 --> 28:46.590
他是沒有配置setter的

28:46.590 --> 28:46.990
對吧

28:46.990 --> 28:47.470
他沒有

28:47.470 --> 28:49.390
你沒法設置這個計算屬性

28:49.390 --> 28:50.070
你只能讀

28:50.070 --> 28:51.550
你不能設置

28:51.550 --> 28:52.990
很多時候計算屬性

28:52.990 --> 28:53.910
他一般都是只讀

28:53.910 --> 28:55.430
不能設置的

28:55.430 --> 28:56.670
一般情況下

28:56.670 --> 28:58.510
不過在某些特殊情況下

28:58.510 --> 29:00.750
你是可以配置他設置的

29:00.750 --> 29:01.350
設置的時候

29:01.350 --> 29:01.830
怎麼辦呢

29:01.830 --> 29:03.230
也是運行函數

29:03.230 --> 29:04.870
如果說你要配置計算屬性

29:04.870 --> 29:05.950
可以設置的話

29:05.950 --> 29:07.470
你要配置兩個東西

29:07.470 --> 29:08.470
你要把這個計算屬性

29:08.470 --> 29:10.870
配置為一個對象

29:10.870 --> 29:11.830
就不是一個函數了

29:11.830 --> 29:13.390
你把配置為一個對象

29:13.390 --> 29:15.790
那麼這個對象裡邊有get

29:15.790 --> 29:17.710
get是一個函數

29:17.710 --> 29:18.270
get

29:18.270 --> 29:19.710
就是讀這個屬性的時候

29:19.710 --> 29:22.310
他運行這個函數得到結果

29:22.310 --> 29:23.710
還有一個是set

29:23.710 --> 29:25.150
set裡邊有一個參數

29:25.150 --> 29:27.070
就是你給他付的值

29:27.070 --> 29:28.270
給他付的值

29:28.270 --> 29:29.910
6W

29:29.910 --> 29:32.350
我們這裡輸出6W

29:32.350 --> 29:33.990
你來看一下

29:33.990 --> 29:35.990
get必須要返回

29:35.990 --> 29:37.230
讀這個屬性的時候

29:37.230 --> 29:38.470
是不是要調用這個函數

29:38.470 --> 29:39.830
來得到新的屬性值

29:39.830 --> 29:40.750
那麼設置的時候

29:40.750 --> 29:41.830
要用調用這個函數

29:41.830 --> 29:43.790
把新的值傳過來

29:43.790 --> 29:44.550
看一下

29:44.550 --> 29:47.510
那麼現在我們在這裡寫上一個mode

29:47.550 --> 29:48.230
你看是不是得到這裡

29:48.230 --> 29:49.390
得到dd卡了

29:49.390 --> 29:51.030
對不對

29:51.030 --> 29:52.350
是不是寫到變成這個了

29:52.350 --> 29:53.710
那麼這裡寫上a

29:53.710 --> 29:54.910
變成ad卡

29:54.910 --> 29:55.550
對吧

29:55.550 --> 29:57.310
就變成這個了

29:57.310 --> 29:58.510
沒問題吧

29:58.510 --> 29:59.670
沒問題吧

29:59.670 --> 30:00.710
是不是這樣子

30:00.710 --> 30:03.030
這樣子是不是得到這個數據了

30:03.030 --> 30:05.270
但是你看這裡變沒變了

30:05.270 --> 30:05.990
這裡變沒變

30:05.990 --> 30:06.670
沒變

30:06.670 --> 30:07.590
說明什麼呢

30:07.590 --> 30:10.750
說明這個計算屬性的get值是不是還是沒變

30:10.750 --> 30:11.070
對吧

30:11.070 --> 30:12.310
是不是get值還是沒變

30:12.310 --> 30:13.630
因為我這裡

30:13.630 --> 30:15.190
是不是沒有改變任何的東西

30:15.190 --> 30:16.790
沒有改變任何的數據

30:16.790 --> 30:20.630
那如果說我這裡要改怎麼改呢

30:20.630 --> 30:22.350
如果說你給它設置全名的話

30:22.350 --> 30:24.350
我最終是不是要設置這兩個玩意兒

30:24.350 --> 30:26.630
因為我這個屬性是不是根據這兩個玩意兒

30:26.630 --> 30:27.670
生成出來了

30:27.670 --> 30:27.990
對吧

30:27.990 --> 30:31.070
這信和名組成了全名

30:31.070 --> 30:32.590
那你要改全名的話

30:32.590 --> 30:34.910
我覺得改的是不是就是信和名

30:34.910 --> 30:36.190
要改這兩個

30:36.190 --> 30:37.630
要去改這兩個

30:37.630 --> 30:37.790
好

30:37.790 --> 30:38.350
那麼怎麼改

30:38.350 --> 30:39.270
我就可以用這麼方式

30:39.270 --> 30:41.070
我隨便寫一個

30:41.070 --> 30:43.030
this is your first name等於什麼呢

30:43.030 --> 30:44.670
等於那個new bar

30:44.670 --> 30:45.950
新的值的第一個

30:45.990 --> 30:47.510
字符出來的第一個

30:47.510 --> 30:48.870
第一個字符

30:48.870 --> 30:50.630
那麼this is not a name

30:50.630 --> 30:53.430
等於什麼new bar

30:53.430 --> 30:55.110
就是snaps嘛

30:55.110 --> 30:56.710
snaps一開始

30:59.590 --> 31:01.310
對了

31:01.310 --> 31:02.950
從

31:02.950 --> 31:04.150
應該用substitute

31:04.150 --> 31:04.390
對吧

31:06.950 --> 31:07.790
substitute

31:07.790 --> 31:08.030
好

31:08.030 --> 31:13.110
從第二個字符開始解去

31:13.110 --> 31:14.150
我用這種方式

31:14.190 --> 31:15.870
是不是最終還是改變的是first name

31:15.870 --> 31:16.590
和last name

31:16.590 --> 31:17.270
對吧

31:17.270 --> 31:17.390
好

31:17.390 --> 31:18.070
那麼你看

31:18.070 --> 31:19.990
我來這裡寫上一個

31:19.990 --> 31:20.950
不

31:20.950 --> 31:21.910
你看這一改

31:21.910 --> 31:23.190
是不是信也改了

31:23.190 --> 31:23.990
名也改了

31:23.990 --> 31:24.310
對吧

31:24.310 --> 31:25.270
全名自然人就改了

31:25.270 --> 31:28.550
因為全名是根據信和名計算出來的

31:28.550 --> 31:29.110
說一下

31:29.110 --> 31:30.230
說一下這個玩意兒

31:32.110 --> 31:34.150
get看不到

31:34.150 --> 31:35.470
get看不到

31:35.470 --> 31:37.710
因為你設置的時候才會有新的值給它

31:37.710 --> 31:38.390
對吧

31:38.390 --> 31:40.870
比如說你給一個屬性負值

31:40.870 --> 31:42.990
比如說我們要給這個負惡鏈

31:43.030 --> 31:44.150
你把它當成屬性來用

31:44.150 --> 31:45.310
給它一個新的值

31:45.310 --> 31:45.870
molika

31:48.270 --> 31:49.230
molika

31:49.230 --> 31:50.670
你看這個輸入法都在幫我

31:50.670 --> 31:51.190
對吧

31:51.190 --> 31:51.790
molika

31:51.790 --> 31:52.990
你給它負值

31:52.990 --> 31:54.190
那麼你給它負值的時候

31:54.190 --> 31:55.910
它實際上是在調用這個函數

31:55.910 --> 31:56.430
調用什麼

31:56.430 --> 31:58.750
for name.set

31:58.750 --> 31:59.870
然後molika

31:59.870 --> 32:00.630
就這麼個意思

32:00.630 --> 32:01.470
對吧

32:01.470 --> 32:02.310
是不是這麼有意思

32:02.310 --> 32:03.310
它調用這個函數

32:03.310 --> 32:04.870
它是不是把這個新的值給它了

32:04.870 --> 32:05.630
傳過來了

32:05.630 --> 32:06.390
對不對

32:06.390 --> 32:07.590
把新的值傳過來了

32:07.590 --> 32:08.990
那你使用這個屬性的時候

32:08.990 --> 32:10.470
是不是沒有任何東西傳遞

32:10.470 --> 32:11.510
把這個屬性讀出來

32:11.510 --> 32:12.830
比方說我們console log

32:12.870 --> 32:14.550
console輸出這個東西

32:14.550 --> 32:16.190
那它是不是直接調用

32:16.190 --> 32:16.830
直接調什麼

32:16.830 --> 32:18.270
for name.get

32:18.270 --> 32:18.830
對吧

32:18.830 --> 32:21.430
所以調用這個東西得到它的值

32:21.430 --> 32:23.750
你過去的時候肯定是沒有任何參數的

32:23.750 --> 32:24.710
但是你負值的時候

32:24.710 --> 32:26.470
是不是有一個新的值要給它

32:26.470 --> 32:27.310
對吧

32:27.310 --> 32:28.750
而我們這個哪裡負值的呢

32:28.750 --> 32:30.630
是因為這個微末的指令

32:30.630 --> 32:31.470
這個指令裡面

32:31.470 --> 32:32.830
它內部在進行負值

32:32.830 --> 32:34.030
你只要文胖一變

32:34.030 --> 32:35.830
它實際上是在給它重新負值

32:35.830 --> 32:38.390
傳的是什麼呢

32:38.390 --> 32:39.910
傳的就是文胖新的值

32:39.910 --> 32:41.150
你這個文胖一變

32:41.150 --> 32:43.070
那麼它就會往個函數裡邊

32:43.070 --> 32:44.910
是不是傳新的值

32:44.910 --> 32:47.630
就傳新的值

32:47.630 --> 32:48.950
就是文胖框裡邊的

32:48.950 --> 32:49.870
文胖框裡邊的

32:49.870 --> 32:51.630
我們剛才不是打印出來了嗎

32:51.630 --> 32:54.510
剛才不是打印出來了嗎

32:54.510 --> 32:54.870
你看一下

32:54.870 --> 33:00.580
剛才我們不是在這打印出來了嗎

33:00.580 --> 33:01.820
leva

33:01.820 --> 33:04.580
你看一下

33:04.580 --> 33:05.220
molecal2

33:05.220 --> 33:06.340
你看是不是打印出來了

33:06.340 --> 33:08.340
是不是就是文胖框裡的新的值

33:08.340 --> 33:10.660
因為我們用微末的綁定了

33:10.660 --> 33:11.940
微末的綁定了

33:11.940 --> 33:14.940
微末它的內部是會給這個屬性負值的

33:15.020 --> 33:15.700
只要文胖框

33:15.700 --> 33:17.020
因為它是雙向綁定

33:17.020 --> 33:18.740
它的文胖框只要內容一變

33:18.740 --> 33:20.860
它會給這個屬性重新負值的

33:20.860 --> 33:22.340
那麼我們比方說

33:22.340 --> 33:23.940
把這個文胖框變成了這個

33:23.940 --> 33:25.740
那麼就相當於是

33:25.740 --> 33:26.700
就相當於是

33:26.700 --> 33:28.940
它的內部給它做了這麼一個負值

33:28.940 --> 33:29.500
forlain

33:29.500 --> 33:31.180
只是我們自己看不到而已

33:31.180 --> 33:32.540
forlain

33:32.540 --> 33:33.140
molecal2

33:33.140 --> 33:35.020
相當於做了這麼一個負值

33:35.020 --> 33:35.900
就這麼個意思

33:35.900 --> 33:36.820
到這樣子吧

33:36.820 --> 33:37.460
我這樣子

33:37.460 --> 33:38.940
我直接在這裡寫

33:38.940 --> 33:39.700
forlain

33:39.700 --> 33:40.940
直接在這裡寫

33:41.940 --> 33:43.420
摸摸

33:43.420 --> 33:44.420
molecal

33:45.420 --> 33:46.060
你看一下

33:46.060 --> 33:46.860
我直接在這裡寫

33:46.860 --> 33:47.660
說負值

33:47.660 --> 33:48.860
那麼這個東西是不是在雕用

33:48.860 --> 33:49.860
forlain

33:49.860 --> 33:51.220
forlain

33:51.220 --> 33:52.620
雕塞車

33:52.620 --> 33:53.100
對吧

33:53.100 --> 33:54.460
是不是把這個值傳進去了

33:54.460 --> 33:56.460
相當於是在雕用這個函數

33:56.460 --> 33:56.940
一回車

33:56.940 --> 33:57.460
你看

33:58.460 --> 34:00.460
新的molecal

34:00.460 --> 34:02.020
沒有問題吧

34:04.020 --> 34:04.660
沒有問題

34:04.660 --> 34:05.540
應該沒問題吧

34:06.540 --> 34:10.740
沒有問題

34:12.980 --> 34:16.540
那麼這裡是計算屬性

34:16.540 --> 34:17.740
那麼以後面試的時候

34:17.740 --> 34:19.300
問你計算屬性方法的區別

34:19.300 --> 34:19.700
哎

34:19.700 --> 34:20.780
把這個一二三個打出來

34:20.780 --> 34:22.260
沒啥了

34:22.260 --> 34:23.940
剛才我們一開始的那種寫法

34:23.940 --> 34:25.500
只是說你沒有set的時候

34:25.500 --> 34:26.540
你可以減一些

34:26.540 --> 34:27.700
你不用這樣寫

34:27.700 --> 34:28.540
如果說你沒有set

34:28.540 --> 34:29.620
你能不能這樣子寫

34:29.620 --> 34:30.540
沒問題

34:30.540 --> 34:31.860
它最原始

34:31.860 --> 34:32.340
最原始

34:32.340 --> 34:33.860
最真正的寫法是這樣的寫的

34:33.860 --> 34:34.380
只不過

34:34.380 --> 34:35.300
你可以減一些

34:35.300 --> 34:36.260
你直接把它寫成函數

34:36.260 --> 34:38.260
它就是當成是沒有set的

34:38.260 --> 34:39.860
這關於計算屬性

34:39.860 --> 34:40.740
下面這個

34:40.740 --> 34:42.780
是關於這個Vatima指令

34:42.780 --> 34:43.940
這是一個指令

34:43.940 --> 34:45.340
那麼這個指令的話

34:45.340 --> 34:46.580
它是為什麼會出現的

34:46.580 --> 34:47.500
它是這個原因

34:47.500 --> 34:49.460
我給它做另外一個測試

34:49.460 --> 34:51.500
我們這裡複製一下

34:51.500 --> 34:53.100
這是測試2

34:57.180 --> 34:58.540
這是測試2

34:58.540 --> 35:00.580
然後這裡模板裡邊的話

35:00.580 --> 35:02.180
我給它寫個啥呢

35:02.180 --> 35:03.620
要寫個這個玩意吧

35:03.620 --> 35:05.140
我們寫個這個玩意

35:05.140 --> 35:06.100
就這個DV

35:06.220 --> 35:08.340
DVdata裡邊有一段文本

35:08.340 --> 35:10.460
有一段文本atima

35:10.460 --> 35:10.980
什麼文本

35:10.980 --> 35:11.820
它文本是這樣子的

35:13.900 --> 35:15.220
有一個P元數

35:15.220 --> 35:16.340
P元數裡邊就是

35:18.420 --> 35:22.700
有代標籤的內容

35:22.700 --> 35:23.820
代標籤的內容

35:23.820 --> 35:24.860
什麼這些東西全沒了

35:24.860 --> 35:25.340
全沒了

35:25.340 --> 35:26.660
最簡單的

35:26.660 --> 35:27.540
最簡單的

35:27.540 --> 35:28.740
就這麼一玩意

35:28.740 --> 35:31.580
然後我想把這個atima顯示到這

35:33.300 --> 35:33.900
顯示到這

35:33.900 --> 35:34.660
很簡單的

35:34.660 --> 35:35.180
很簡單

35:35.220 --> 35:35.740
咱們來看一下

35:35.740 --> 35:39.940
能不能正常顯示

35:39.940 --> 35:41.260
它就這樣顯示了

35:41.260 --> 35:42.340
為什麼呢

35:42.340 --> 35:43.700
我們寫的是一個P元數

35:43.700 --> 35:44.940
它為什麼顯示這個東西

35:44.940 --> 35:46.060
因為在5.6裡邊

35:46.060 --> 35:47.260
它為了安全

35:47.260 --> 35:49.740
為了安全

35:49.740 --> 35:55.140
會將元數內部的差值

35:55.140 --> 35:58.660
進行實體編碼

35:58.660 --> 36:00.500
實體編碼

36:00.500 --> 36:01.420
它會把裡邊的差值

36:01.420 --> 36:02.460
我們之前講過差值

36:02.460 --> 36:02.700
對吧

36:02.700 --> 36:04.420
差值指的是在元數內部

36:04.420 --> 36:05.740
使用一個表達式

36:05.740 --> 36:07.060
來算出來的結果

36:07.060 --> 36:08.340
那麼在這個差值的位置

36:08.340 --> 36:10.540
它會對它進行自動的實體編碼

36:10.540 --> 36:11.980
因此你看到的這個

36:11.980 --> 36:13.780
根本就不會看到真正的P元數

36:13.780 --> 36:15.660
看到的是編碼之後的結果

36:15.660 --> 36:17.820
我們看一下右鍵atima

36:17.820 --> 36:18.380
你看一下

36:18.380 --> 36:19.460
是不是這個玩意

36:19.460 --> 36:20.940
是編碼之後的結果

36:20.940 --> 36:22.740
它會進行實體編碼

36:22.740 --> 36:24.740
變成實體制服

36:24.740 --> 36:26.540
為什麼說為了安全呢

36:26.540 --> 36:27.620
因為5.6呢

36:27.620 --> 36:28.500
它擔心

36:28.500 --> 36:29.420
擔心啥呢

36:29.420 --> 36:31.740
擔心你這個內容呢

36:31.740 --> 36:34.700
不是開發者寫的

36:34.700 --> 36:36.380
比方說用戶填了一些信息

36:36.380 --> 36:38.660
你要把用戶的信息顯示到頁面上

36:38.660 --> 36:40.900
那麼比方這個用戶是填了帳號

36:40.900 --> 36:42.220
只是用戶的帳號自己註冊的

36:42.220 --> 36:42.660
對吧

36:42.660 --> 36:43.740
用戶自己填的

36:43.740 --> 36:45.580
你可能在用戶的詳情頁面

36:45.580 --> 36:47.540
你要把這個帳號顯示到頁面上

36:47.540 --> 36:47.660
好

36:47.660 --> 36:48.980
那麼用戶填的時候

36:48.980 --> 36:52.180
它可能給你加了一些標籤

36:52.180 --> 36:54.460
甚至給你加了一些介石代碼

36:54.460 --> 36:57.220
甚至給你加了一些介石代碼進去

36:57.220 --> 36:58.540
那麼你這樣子一顯示

36:58.540 --> 36:59.500
如果說它遠封不動的

36:59.500 --> 37:00.620
就放到這個位置的話

37:00.620 --> 37:02.700
是不是就會運行一些介石代碼

37:02.700 --> 37:03.620
或者是運行

37:03.620 --> 37:04.940
把這個標籤渲染出來

37:04.980 --> 37:06.460
會導致頁面樣式

37:06.460 --> 37:07.300
輕的話

37:07.300 --> 37:10.460
表示導致會導致頁面樣式發生變化

37:10.460 --> 37:12.300
把頁面搞混亂了

37:12.300 --> 37:12.940
嚴重的話

37:12.940 --> 37:15.420
就會運行一些危險的介石代碼

37:15.420 --> 37:17.500
這要這個東西叫做注入攻擊

37:17.500 --> 37:19.460
這又是網絡安全的課程

37:19.460 --> 37:21.340
這是單獨的一個課程來講的

37:21.340 --> 37:22.460
這東西那種特別特別多

37:25.940 --> 37:26.780
然後呢

37:26.780 --> 37:28.420
所以說我無疑為了安全

37:28.420 --> 37:29.820
還會對它進行實體編碼

37:29.820 --> 37:30.700
隨便打寫

37:30.700 --> 37:31.460
無所謂

37:31.460 --> 37:32.180
它不甩的

37:32.180 --> 37:34.380
它全部給你進行實體編碼

37:34.380 --> 37:35.220
一方面也知道

37:35.220 --> 37:35.660
對吧

37:35.660 --> 37:37.460
ACSS攻擊

37:37.460 --> 37:38.340
那麼這個地方

37:38.340 --> 37:39.060
如果說

37:39.060 --> 37:41.140
你可以信任這裡的數據

37:41.140 --> 37:42.980
表示這個數據不是用戶寫的

37:42.980 --> 37:44.820
就是我之前保存的數據庫的

37:44.820 --> 37:46.500
或者是管理員添加的

37:46.500 --> 37:48.060
我認為是安全的

37:48.060 --> 37:50.020
那麼我要就是要宣言的這個東西

37:50.020 --> 37:50.980
那怎麼辦呢

37:50.980 --> 37:54.180
就用這個指定VATM

37:54.180 --> 37:55.780
就用這個指定

37:55.780 --> 37:56.100
好

37:56.100 --> 37:58.260
這個指定裡面就填數據

37:58.260 --> 37:59.860
你把數據填進去

37:59.860 --> 38:01.140
那麼寫了這個指定過後

38:01.140 --> 38:02.580
你不要寫東西無效了

38:02.580 --> 38:03.500
你不要寫東西了

38:03.540 --> 38:04.940
什麼東西都不寫

38:04.940 --> 38:06.860
這樣子它會設置這個DIV

38:06.860 --> 38:08.460
相當於它會怎麼做呢

38:08.460 --> 38:09.500
它會去這樣做

38:09.500 --> 38:12.020
設置這個DIV的INNER ATM表

38:12.020 --> 38:12.540
為什麼呢

38:12.540 --> 38:15.260
你把它傳遞的一個辨量ATM數據

38:15.260 --> 38:17.180
它會這樣子去設置

38:17.180 --> 38:18.540
它就非常簡單出報了

38:18.540 --> 38:19.860
這樣做就完事了

38:19.860 --> 38:21.220
它又會這樣設置

38:21.220 --> 38:23.660
那麼我們看一下

38:23.660 --> 38:24.260
你看

38:24.260 --> 38:26.540
是不是加了P元數進去了

38:26.540 --> 38:27.580
是不是P元數

38:27.580 --> 38:27.780
對吧

38:27.780 --> 38:28.780
這個很簡單

38:28.780 --> 38:29.540
就是說以後

38:29.540 --> 38:31.100
這種情況一般會用到什麼時候呢

38:31.100 --> 38:33.140
一般會用在那個就是

38:33.140 --> 38:34.820
你們以後做一些副文文框

38:34.820 --> 38:36.380
做一些就是後台編輯

38:36.380 --> 38:38.180
就是管理員添加一篇文章

38:38.180 --> 38:39.300
文章裡面有圖篇

38:39.300 --> 38:40.260
有1米幾元數

38:40.260 --> 38:40.780
對吧

38:40.780 --> 38:42.020
這些東西要存到數據庫

38:42.020 --> 38:43.340
到時候有顯示的時候

38:43.340 --> 38:43.940
也要知道

38:43.940 --> 38:44.820
要用這種方式

38:44.820 --> 38:45.780
不然的話你顯示不出來

38:45.780 --> 38:46.860
全是代表簽的

38:46.860 --> 38:49.180
用戶的填證東西

38:49.180 --> 38:50.340
最好不要用這種方式

38:50.340 --> 38:51.020
挺危險的

38:51.020 --> 38:51.580
挺危險的

38:53.380 --> 38:54.260
如果說你不用這個

38:54.260 --> 38:55.340
用剛才那種方式的話

38:55.340 --> 38:57.140
那麼它裡面會生成無誘節

38:57.140 --> 38:58.180
它會生成那個什麼

38:58.180 --> 38:59.980
我們之前上一課講的

38:59.980 --> 39:01.060
虛擬動

39:01.060 --> 39:02.260
會生成無誘的虛擬動

39:03.420 --> 39:03.940
但是呢

39:03.940 --> 39:04.540
剛才那種方式

39:04.540 --> 39:06.660
它就用的是贏那一篇文章設置了

39:06.660 --> 39:08.860
這是跟無誘的原理有關系的

39:08.860 --> 39:09.020
好

39:09.020 --> 39:10.860
這是關於這個指令

39:10.860 --> 39:12.860
這個指令我要補充一下

39:12.860 --> 39:15.180
然後接下來

39:15.180 --> 39:17.820
這個玩意

39:17.820 --> 39:18.660
學過的

39:18.660 --> 39:20.940
沒有學過的求個1

39:20.940 --> 39:21.340
這個玩意

39:21.340 --> 39:23.180
我看有沒有學過的

39:23.180 --> 39:24.500
如果說都學過的話

39:24.500 --> 39:27.470
我就不講了

39:27.470 --> 39:29.950
好

39:29.950 --> 39:31.350
我當時沒有把這種去加上

39:31.350 --> 39:33.630
我認為可能都學過了

39:33.670 --> 39:34.630
但是我先來講一下

39:34.630 --> 39:35.790
可能還有同學沒學過

39:35.790 --> 39:36.470
還有這麼多

39:36.470 --> 39:36.910
還不少

39:39.310 --> 39:39.750
模塊化

39:41.670 --> 39:42.510
這個模塊化的話

39:42.510 --> 39:43.270
我說一下

39:43.270 --> 39:44.790
因為我這裡沒法詳細講解了

39:44.790 --> 39:46.030
因為我們重點是講無誘

39:46.030 --> 39:47.910
所以說我這裡花費太多時間

39:47.910 --> 39:48.750
去講模塊化的話

39:48.750 --> 39:49.390
光講模塊化

39:49.390 --> 39:50.830
我今天晚上都不夠

39:50.830 --> 39:52.830
我晚上的課程絕對不夠

39:52.830 --> 39:55.430
模塊化是可能要單獨一個課程才行

39:55.430 --> 39:57.070
單獨的一個課程才能講完模塊化

39:57.070 --> 39:59.150
東西特別特別多

39:59.150 --> 40:01.150
也是模塊化裡面

40:01.150 --> 40:02.550
它為什麼有模塊化呢

40:02.590 --> 40:04.630
就是我們以後遇到了項目的

40:04.630 --> 40:05.710
越來越複雜

40:05.710 --> 40:07.030
功能越來越多

40:07.030 --> 40:10.310
像我們以前全部把它寫到一個文件裡面

40:10.310 --> 40:11.350
對吧

40:11.350 --> 40:13.430
或者是寫到兩三個文件裡面

40:13.430 --> 40:14.230
那麼這樣子

40:14.230 --> 40:16.910
我們特別不好維護在馬

40:16.910 --> 40:18.030
另外還有一個問題

40:18.030 --> 40:22.590
就是說會容易造成全局變量的污染

40:22.590 --> 40:24.510
特別容易造成全局變量的污染

40:24.510 --> 40:25.950
還有第三個問題

40:25.950 --> 40:28.030
我們簡單說一下

40:28.030 --> 40:31.430
你看都忙到8點43了

40:31.470 --> 40:35.030
反正我們今天和明天兩天是講主見話

40:35.030 --> 40:35.790
講主見

40:35.790 --> 40:37.270
如果說我今天實在扛不住了

40:37.270 --> 40:37.750
講不完了

40:37.750 --> 40:38.910
我們就放到明天

40:38.910 --> 40:39.710
明天我多講一點

40:39.710 --> 40:40.590
把它講完

40:40.590 --> 40:44.430
傳統開發的問題

40:44.430 --> 40:44.990
什麼問題呢

40:44.990 --> 40:46.150
第一個我儘量

40:46.150 --> 40:49.430
我堅持儘量把今天的內容講完

40:49.430 --> 40:52.950
大家這個課程真的是超值的

40:52.950 --> 40:54.030
我不說廢話了

40:54.030 --> 40:54.470
不說廢話

40:54.470 --> 40:55.830
趕快講

40:55.830 --> 40:57.350
傳統開發的問題

40:57.350 --> 41:01.390
第一個問題就是面對大型項目

41:02.390 --> 41:06.950
傳統開發的問題

41:06.950 --> 41:08.790
第一個問題就是

41:08.790 --> 41:17.790
如何管理錯綜複雜的代碼

41:17.790 --> 41:18.790
如何管理錯綜複雜的代碼

41:18.790 --> 41:20.310
就是代碼量非常非常大

41:20.310 --> 41:21.350
代碼量非常非常大

41:21.350 --> 41:23.070
如何來維護這些代碼

41:23.070 --> 41:24.630
就是我們以前傳統公司裡面

41:24.630 --> 41:25.830
哪怕代碼再多

41:25.830 --> 41:27.870
我也不可能分太多的GS

41:27.870 --> 41:29.510
為什麼不能分太多的GS呢

41:29.870 --> 41:31.430
因為分成太多的GS

41:31.430 --> 41:35.150
會意味著造成請求數量的增加

41:35.150 --> 41:36.990
因為我們知道頁面上一個資源

41:36.990 --> 41:37.950
什麼圖片

41:37.950 --> 41:38.510
CSS

41:38.510 --> 41:39.190
GS

41:39.190 --> 41:40.190
他們都是資源

41:40.190 --> 41:42.110
都要向服務器發送請求的

41:42.110 --> 41:42.590
對吧

41:42.590 --> 41:44.310
請求數量如果太多的話

41:44.310 --> 41:46.710
會導致頁面卡頓

41:46.710 --> 41:48.670
所以說不能有太多的GS

41:48.670 --> 41:50.990
於是我們代碼就不斷的放到

41:50.990 --> 41:53.030
幾個GS裡面

41:53.030 --> 41:54.870
那麼特別特別不好維護

41:54.870 --> 41:55.550
這是第一個問題

41:55.550 --> 41:57.430
所以今天我們會用到這個模範化

41:57.470 --> 41:58.710
第二個問題呢就是

42:01.510 --> 42:02.990
那個是嗎

42:02.990 --> 42:03.750
老大一年雲

42:03.750 --> 42:06.350
我看完他想說啥呢

42:06.350 --> 42:10.470
就是全局變量污染的問題

42:10.470 --> 42:16.710
如何處理全局變量污染的問題

42:16.710 --> 42:17.310
這是第二個問題

42:17.310 --> 42:18.270
因為代碼多了

42:18.270 --> 42:18.830
對吧

42:18.830 --> 42:20.030
你可能寫了

42:20.030 --> 42:21.590
因為一般以前的傳統工程裡面

42:21.590 --> 42:22.150
一個頁面

42:22.150 --> 42:22.990
一個大型的頁面

42:22.990 --> 42:26.470
一般就是10到20個GS差不多

42:26.510 --> 42:27.830
那麼GS還是很多

42:27.830 --> 42:28.670
文件很多

42:28.670 --> 42:29.550
那麼這些文件裡面

42:29.550 --> 42:32.310
一個從事了不同的開發者寫的代碼

42:32.310 --> 42:33.630
他可能都用

42:33.630 --> 42:35.390
都定了一些外變量

42:35.390 --> 42:36.470
或者是全局函數

42:36.470 --> 42:36.710
對啊

42:36.710 --> 42:38.270
有些東西避免不了

42:38.270 --> 42:39.550
他要留給別人做接口

42:39.550 --> 42:40.750
留給別人使用

42:40.750 --> 42:42.150
所以說他必須要

42:42.150 --> 42:43.550
必須要做成全局變量

42:43.550 --> 42:45.350
那麼做成全局變量的話就會污染

42:45.350 --> 42:47.590
污染的話就導致重複

42:47.590 --> 42:48.150
那麼就會出

42:48.150 --> 42:49.110
就容易出問題

42:49.110 --> 42:50.310
那麼這東西怎麼解決

42:50.310 --> 42:51.070
以前怎麼辦

42:51.070 --> 42:52.430
以前就是

42:52.430 --> 42:53.830
有些命名規範來解決

42:53.830 --> 42:54.230
對吧

42:54.230 --> 42:56.070
那這種解決是很弱的

42:56.110 --> 42:57.950
稍不注意就要出問題

42:57.950 --> 43:00.350
還有第三個問題

43:00.350 --> 43:01.910
如何管理

43:01.910 --> 43:04.630
複雜的依賴關係

43:04.630 --> 43:06.390
然後你們之前應該有同學接觸過

43:06.390 --> 43:07.110
接query

43:07.110 --> 43:08.910
接query是不是有很多依賴庫

43:08.910 --> 43:10.230
什麼接query相關的

43:10.230 --> 43:11.950
就是UI庫啊

43:11.950 --> 43:12.790
還有什麼呢

43:12.790 --> 43:13.590
還有Bitstrap

43:13.590 --> 43:13.790
對吧

43:13.790 --> 43:14.270
Bitstrap

43:14.270 --> 43:15.990
他也依賴了個接query

43:15.990 --> 43:18.110
他有很多的依賴關係

43:18.110 --> 43:18.790
就這個庫

43:18.790 --> 43:20.070
A這個庫

43:20.070 --> 43:20.710
他依賴

43:20.710 --> 43:21.190
B這個庫

43:21.190 --> 43:21.590
B這個庫

43:21.590 --> 43:22.590
依賴C這個庫

43:22.590 --> 43:23.670
那麼你在頁面上

43:23.670 --> 43:25.390
導入這個解釋的時候

43:25.470 --> 43:27.630
是不是要按照順序來導入啊

43:27.630 --> 43:29.110
如果說庫很少的話

43:29.110 --> 43:29.910
大法還好

43:29.910 --> 43:31.510
如果說一庫一旦多了

43:31.510 --> 43:32.430
以前我開發一個項目

43:32.430 --> 43:33.630
真的是痛苦死了

43:33.630 --> 43:35.070
他都依面二三十個解釋

43:35.070 --> 43:36.870
要導入各種依賴關係

43:36.870 --> 43:38.470
我理的半天要把理順

43:38.470 --> 43:40.230
這理的真的是梳理得好久

43:40.230 --> 43:41.190
因為以前沒辦法

43:41.190 --> 43:43.470
以前解決不了這個問題

43:43.470 --> 43:44.430
所以只能去

43:44.430 --> 43:46.310
慢慢去梳理他的依賴關係

43:46.310 --> 43:49.110
那麼這個依賴關係管理起來也挺麻煩的

43:49.110 --> 43:51.030
非常非常麻煩

43:51.030 --> 43:52.870
這個庫要先引用這個庫

43:52.870 --> 43:53.670
再引用這個解釋

43:53.670 --> 43:54.790
再引用這個解釋

43:54.790 --> 43:55.270
對吧

43:55.270 --> 43:57.230
這是管理複雜依賴關係的問題

43:57.230 --> 43:58.190
那麼這些問題

43:58.190 --> 44:00.710
都需要依托於模塊化才能解決

44:00.710 --> 44:04.270
模塊化是真正讓前端開始迅速起飛的東西

44:04.270 --> 44:06.070
有了模塊化標準之後

44:06.070 --> 44:09.270
前端才真正的開始成一個像樣的語言了

44:09.270 --> 44:11.550
解釋才開始成為一個像樣的語言了

44:11.550 --> 44:13.630
以前都把解釋稱之為玩具語言

44:13.630 --> 44:14.790
學到玩的

44:14.790 --> 44:15.630
大家都會一點

44:15.630 --> 44:16.950
也不需要聊天那麼深

44:16.950 --> 44:18.030
但是有了模塊化之後

44:18.030 --> 44:19.390
解釋才真正開始起飛

44:19.390 --> 44:20.790
為什麼說最近幾年

44:20.790 --> 44:23.470
前端發展速度非常非常快

44:23.510 --> 44:26.030
其中很大的原因就跟模塊化有關係

44:26.030 --> 44:28.230
模塊化有很多種方式

44:28.230 --> 44:30.950
實現模塊化的方式

44:32.950 --> 44:33.630
有這麼幾種

44:33.630 --> 44:34.870
大家寫下吧

44:34.870 --> 44:36.390
我沒有時間解釋了

44:36.390 --> 44:38.510
這個東西也不在我們課程的範圍之內

44:38.510 --> 44:40.270
這是單獨的課程

44:40.270 --> 44:41.550
航門界式

44:41.550 --> 44:43.590
還有什麼MD

44:43.590 --> 44:44.830
還有CMD

44:44.830 --> 44:46.150
這兩個現在用的很少了

44:46.150 --> 44:47.390
這兩個現在用的很少了

44:47.390 --> 44:50.430
因為現在出現了這個ES6規範

44:50.430 --> 44:51.150
ES6規範

44:51.190 --> 44:52.350
這是官方規範

44:52.350 --> 44:53.550
ES6是官方規範

44:53.550 --> 44:56.590
這些東西應該算是民間規範

44:56.590 --> 44:59.430
目前用的最多的是common界式和ES6

44:59.430 --> 45:04.910
因為common界式它跟load解釋環境綁在一起

45:04.910 --> 45:06.590
所以說它有它的用戶群體

45:06.590 --> 45:07.510
還有它的基礎

45:07.510 --> 45:09.950
意思頒伙了它肯定是退出不了的

45:09.950 --> 45:10.310
load的

45:10.310 --> 45:13.190
我記得load的官方網站天天都在說

45:13.190 --> 45:14.830
我們馬上就要及時吃ES6了

45:14.830 --> 45:18.110
我記得從去年還是從去年一直喊到現在

45:18.110 --> 45:19.750
它的沒動機

45:19.790 --> 45:21.030
一直在說我要及時吃ES6

45:21.030 --> 45:22.070
我要及時吃ES6

45:22.070 --> 45:23.430
它一直沒支持

45:23.430 --> 45:25.990
load環境裡面是用不了ES6的

45:25.990 --> 45:29.230
ES6目前只能在客戶端瀏覽環境裡面使用

45:29.230 --> 45:31.790
那麼我們這裡就說一下ES6它怎麼來實現模塊化的

45:31.790 --> 45:32.630
它是這樣子

45:32.630 --> 45:39.710
就是說它可以讓你的GS可以分文件來編寫

45:39.710 --> 45:40.910
測試上

45:40.910 --> 45:44.620
好看一下

45:44.620 --> 45:46.660
我們隨便取個名字

45:46.660 --> 45:48.100
Major A

45:48.100 --> 45:50.940
或者就用Adder.js

45:51.060 --> 45:52.300
我們這裡導出

45:52.300 --> 45:53.100
我們在這裡寫

45:53.100 --> 45:54.580
不要在這裡隨便寫個辨量

45:54.580 --> 45:56.740
const

45:56.740 --> 45:59.300
abc等於123

45:59.300 --> 46:00.140
我們就用挖吧

46:00.140 --> 46:00.940
就用挖

46:00.940 --> 46:02.460
挖不是會污染全局辨量嗎

46:02.460 --> 46:03.500
就用挖

46:03.500 --> 46:04.460
來看一下

46:04.460 --> 46:06.060
d.js

46:06.060 --> 46:06.780
然後我們這裡

46:08.780 --> 46:09.420
d.js

46:09.420 --> 46:13.020
我們這裡用一個辨量abc為123

46:13.020 --> 46:16.100
為456

46:16.100 --> 46:19.900
然後我們在這裡c.js

46:19.940 --> 46:24.420
這裡我們用一個abc為567

46:24.420 --> 46:26.500
你看我們三個GS文件是不是定義了三個辨量

46:26.500 --> 46:27.020
對吧

46:27.020 --> 46:28.140
然後我們再寫個GS

46:28.140 --> 46:29.380
叫做Major.js

46:29.380 --> 46:31.100
這是個入口文件

46:31.100 --> 46:33.060
這個入口文件

46:33.060 --> 46:34.620
我們先不到這些入口文件

46:34.620 --> 46:36.260
我們先不到這些入口文件

46:36.260 --> 46:37.940
就這樣子abc三個文件

46:37.940 --> 46:38.740
三個辨量

46:38.740 --> 46:40.540
然後這裡我們寫個頁面

46:40.540 --> 46:43.140
這個頁面去引用這三個GS

46:43.140 --> 46:45.300
我們這裡scriptsAdder.js

46:45.300 --> 46:45.540
對吧

46:45.540 --> 46:46.540
這個沒問題吧

46:46.540 --> 46:47.300
Adder.js

46:47.300 --> 46:48.260
b.js

46:48.260 --> 46:49.540
和c.js

46:49.580 --> 46:50.260
看一下

46:50.260 --> 46:51.500
看一下這個頁面

46:51.500 --> 46:53.060
所以一定會污染全局辨量

46:53.060 --> 46:53.500
對吧

46:53.500 --> 46:55.500
它跟你的引用順序有關係

46:55.500 --> 46:56.260
誰用靠後

46:56.260 --> 46:57.420
是把前面的覆蓋掉了

46:57.420 --> 46:57.740
對吧

46:57.740 --> 46:58.780
那麼abc對於多少

46:58.780 --> 46:59.420
567

46:59.420 --> 47:00.820
是不是最後一個

47:00.820 --> 47:01.700
這能看懂嗎

47:01.700 --> 47:02.940
這是最後一個c.d.js

47:02.940 --> 47:03.500
裡面那種

47:03.500 --> 47:03.700
對吧

47:03.700 --> 47:04.860
567

47:04.860 --> 47:05.060
好

47:05.060 --> 47:06.220
那麼現在我們編一下

47:06.220 --> 47:08.980
我只需要給他加上一個Type屬性

47:08.980 --> 47:10.940
給這個scriptsAdder.js加上一個Type屬性

47:10.940 --> 47:13.620
Major.js

47:13.620 --> 47:15.100
你要最保持什麼模塊

47:15.100 --> 47:17.460
我用的是ES模塊化的標準

47:17.460 --> 47:19.820
也就是說他在解析這個GS的時候

47:19.820 --> 47:21.260
瀏覽器在解析他的時候

47:21.260 --> 47:23.540
他不會按照普通的GS來解析

47:23.540 --> 47:24.780
他會按照把它變成

47:24.780 --> 47:26.620
當成一個模塊來解析

47:26.620 --> 47:29.020
而模塊裡面的所有的辨量

47:29.020 --> 47:29.820
全是局部的

47:31.900 --> 47:34.540
模塊中的所有

47:34.540 --> 47:35.900
簡單記錄一下

47:35.900 --> 47:36.620
簡單記錄一下

47:36.620 --> 47:37.460
肯定是講不完

47:37.460 --> 47:38.180
東西太多了

47:38.180 --> 47:40.100
這裡邊ES的模塊

47:40.100 --> 47:40.940
6的模塊化

47:42.780 --> 47:44.020
模塊化

47:44.020 --> 47:46.700
模塊中的所有辨量

47:46.700 --> 47:48.140
無論你是怎麼定義的

47:48.140 --> 47:50.660
全部是局部的

47:52.740 --> 47:55.740
只能在模塊內部使用

47:57.060 --> 47:57.900
不能在外面使用

47:57.900 --> 47:59.500
外面根本就用不了

47:59.500 --> 48:00.260
比如說ABC

48:00.260 --> 48:01.020
你不要上三個面量

48:01.020 --> 48:01.420
對吧

48:01.420 --> 48:02.140
但是我們引用的是

48:02.140 --> 48:03.660
把它當成模塊來引用

48:03.660 --> 48:04.820
使用的是模塊化標準

48:04.820 --> 48:06.700
把它當成模塊來解析

48:06.700 --> 48:07.740
外面根本就用不了

48:07.740 --> 48:09.540
我們來看一下ABC是咋

48:09.540 --> 48:10.620
你覺得ABC是咋了

48:14.130 --> 48:15.010
ABC是不是就是

48:16.410 --> 48:17.290
Not Defend

48:17.290 --> 48:17.890
對吧

48:17.890 --> 48:19.090
沒有定義

48:19.090 --> 48:20.450
你看外面是不是根本就沒有

48:20.450 --> 48:22.010
Windows裡面根本就不存在ABC

48:22.010 --> 48:23.490
因為為什麼在模塊裡邊

48:23.490 --> 48:25.010
它只能在模塊裡邊使用

48:25.010 --> 48:26.010
對吧

48:26.010 --> 48:26.890
但是有的時候

48:26.890 --> 48:28.850
我們比方說有依賴關係

48:28.850 --> 48:30.770
B裡邊要用到A裡邊的東西

48:30.770 --> 48:32.610
C裡邊要用到B裡邊的東西

48:32.610 --> 48:34.210
這個東西又怎麼辦呢

48:34.210 --> 48:35.090
這個玩意又怎麼辦呢

48:35.090 --> 48:35.370
好

48:35.370 --> 48:37.650
那麼就設計到模塊的

48:37.650 --> 48:40.290
就是把模塊裡邊的東西暴露出來

48:40.290 --> 48:40.970
暴露出來

48:40.970 --> 48:42.330
因為陳哥不是經常講暴露嗎

48:42.330 --> 48:44.690
陳哥也挺喜歡暴露的

48:44.690 --> 48:46.330
我現在私用一些東西

48:46.330 --> 48:47.410
就是我自己能用

48:47.450 --> 48:48.170
別人用不了

48:48.170 --> 48:50.210
但是我也希望別人能用我的東西

48:50.210 --> 48:51.570
我就希望把它暴露出來

48:51.570 --> 48:52.970
那麽暴露怎麽做呢

48:52.970 --> 48:55.010
叫做模塊導出

48:55.010 --> 48:56.250
模塊導出

48:56.250 --> 48:58.210
導出是使用什麽關鍵字

48:58.210 --> 49:02.170
用Exports Default導出的數據

49:02.170 --> 49:04.810
每個模塊只能用這種方式導出一次

49:04.810 --> 49:06.450
每個模塊只能導出一次

49:06.450 --> 49:07.690
如果說你覺得數據很多

49:07.690 --> 49:09.010
那就用對象

49:09.010 --> 49:10.530
當然你還有些其他的導出方式

49:10.530 --> 49:12.370
我這裏沒有時間已經列舉了

49:12.370 --> 49:13.330
這是模塊導出

49:13.330 --> 49:14.290
好比方說

49:14.290 --> 49:17.130
這裡我要導出一個數據123

49:17.170 --> 49:18.530
我要導出數據123

49:18.530 --> 49:22.770
我怎麽寫Export Default123

49:22.770 --> 49:24.490
我前面水電寫啥

49:24.490 --> 49:25.850
它都是我自己的東西

49:25.850 --> 49:28.610
外面根本就用不了

49:28.610 --> 49:31.570
那麽我要導出什麽東西

49:31.570 --> 49:32.490
我在這裏寫

49:32.490 --> 49:34.290
這就是模塊導出

49:34.290 --> 49:36.890
只有導出的東西才能用

49:36.890 --> 49:38.130
只有導出的東西才能用

49:38.130 --> 49:39.370
明白我的意思吧

49:39.370 --> 49:43.370
而就有點類似於加碼導入包

49:43.370 --> 49:45.770
那麽另外一個就是模塊導入

49:45.810 --> 49:47.890
導出會導入

49:47.890 --> 49:48.930
導入能用什麽

49:48.930 --> 49:53.610
Inport 邊量名From

49:53.610 --> 49:55.930
這裏是模塊路徑

49:58.290 --> 49:59.250
好我們來看一下

49:59.250 --> 50:00.810
比方說

50:00.810 --> 50:01.970
A這裏把AB

50:01.970 --> 50:03.130
就是AB裏面的數據

50:03.130 --> 50:05.370
把邊量裏面的數據導出了

50:06.650 --> 50:08.130
不是把邊量名導出

50:08.130 --> 50:09.530
邊量名不會導出的

50:09.530 --> 50:11.690
只是把邊量裏面的數據讀出來導出

50:11.690 --> 50:13.170
把123導出了

50:13.170 --> 50:15.410
它這個AB還是沒有污染權去邊量

50:15.450 --> 50:16.410
B裏面要用

50:16.410 --> 50:17.890
B裏面怎麽導入

50:17.890 --> 50:20.250
Inport 邊量名

50:20.250 --> 50:21.250
隨便寫個邊量名

50:21.250 --> 50:22.570
你隨便寫啥都行

50:22.570 --> 50:23.610
就是V吧

50:23.610 --> 50:24.130
隨便寫

50:24.130 --> 50:25.490
隨便寫個邊量名

50:25.490 --> 50:27.210
From 後邊寫上路徑

50:27.210 --> 50:29.770
路徑是當前目錄下的A.JS

50:29.770 --> 50:30.890
是不是路徑

50:30.890 --> 50:34.610
好我就把A.JS裏面導出的東西

50:34.610 --> 50:36.730
放到這個邊量V裏面了

50:36.730 --> 50:38.690
你看這裏面導出一個123

50:38.690 --> 50:41.610
那麽通過的模塊B導入了這個V

50:41.610 --> 50:43.290
那麽這個東西可以導出任何東西

50:43.290 --> 50:44.210
可以導出一個函數

50:44.210 --> 50:46.090
可以導出一個對象都可以

50:46.090 --> 50:47.130
隨便什麽東西都可以導出

50:47.130 --> 50:48.410
導出任何數據都可以

50:48.410 --> 50:50.010
那麽這麽就把A裏面的數據

50:50.010 --> 50:51.210
放到這個V裏面了

50:51.210 --> 50:51.570
對吧

50:51.570 --> 50:52.330
放到V裏面了

50:52.330 --> 50:53.810
我們這裏輸出V

50:53.810 --> 50:56.210
輸出這個V

50:56.210 --> 50:57.290
你看一下

50:57.290 --> 50:58.330
我們現在呢

50:58.330 --> 50:59.570
在頁面上你看著

50:59.570 --> 51:00.970
我不導入A了

51:00.970 --> 51:02.890
我直接導入B

51:02.890 --> 51:03.530
我直接導入B

51:03.530 --> 51:04.290
可不可以呢

51:04.290 --> 51:05.050
可以

51:05.050 --> 51:06.730
因為B是模塊

51:06.730 --> 51:08.650
B裏面是不是要依賴A

51:08.650 --> 51:09.370
那麽現在你看一下

51:09.370 --> 51:11.290
管理依賴關係是不是特別清晰的

51:11.290 --> 51:12.330
我看一下看到這句話

51:12.330 --> 51:13.130
我就知道了

51:13.170 --> 51:14.890
B要依賴A

51:14.890 --> 51:15.650
對吧

51:15.650 --> 51:16.330
B要依賴A

51:16.330 --> 51:17.250
一看就看明白了

51:17.250 --> 51:18.610
而且我不用去做額外的處理

51:18.610 --> 51:19.970
我只需要導入B就行了

51:19.970 --> 51:21.290
因為B需要依賴A

51:21.290 --> 51:22.890
它會自動去引用A

51:22.890 --> 51:25.370
那麽自然就把A裏面的數據導入了

51:25.370 --> 51:26.770
你看A裏面數據123

51:26.770 --> 51:28.010
所以B裏面就輸出了

51:28.010 --> 51:29.570
說明A和B數據都導入了

51:29.570 --> 51:30.970
我們看一下網絡傳輸

51:30.970 --> 51:32.410
看一下這邊

51:32.410 --> 51:34.450
看一下JS這裏

51:34.450 --> 51:36.850
刷新

51:36.850 --> 51:38.570
刷新

51:38.570 --> 51:39.250
我們這裏

51:39.250 --> 51:41.610
我們看一下怎麽強制刷新

51:41.610 --> 51:41.970
你看一下

51:41.970 --> 51:43.050
我們雖然只導入了B

51:43.050 --> 51:45.130
但是A是不是也跟著導入了

51:45.130 --> 51:46.490
所以A也跟著導入了

51:46.490 --> 51:47.010
對吧

51:47.010 --> 51:49.210
A也跟著導入了

51:49.210 --> 51:50.650
這是關於這一塊

51:50.650 --> 51:51.290
關於這一塊

51:51.290 --> 51:52.210
我這裏還沒保存

51:52.210 --> 51:52.770
我就說

51:52.770 --> 51:53.930
為什麽C要跟著導入

51:53.930 --> 51:55.410
我還是越是寬蠢

51:55.410 --> 51:56.010
你看

51:56.010 --> 51:57.290
所以只導入了A和B

51:57.290 --> 51:57.530
對吧

51:57.530 --> 51:58.970
C跟它沒關系

51:58.970 --> 51:59.970
我們只導入了B

51:59.970 --> 52:00.850
由於B依賴A

52:00.850 --> 52:02.450
它會自動去導入A

52:02.450 --> 52:04.170
自動去導入A

52:04.170 --> 52:05.210
就是模範一代關係

52:05.210 --> 52:06.210
它跟C有沒有關系

52:06.210 --> 52:07.650
跟C沒有任何關系

52:07.650 --> 52:09.490
跟C沒有任何關系

52:09.490 --> 52:10.570
這是關於

52:10.570 --> 52:11.730
我們也比方說

52:11.730 --> 52:13.290
在C裏邊要導入B

52:13.290 --> 52:14.610
或者說

52:14.610 --> 52:15.410
不在C裏邊

52:15.410 --> 52:16.610
把C變成Made

52:17.610 --> 52:18.450
Made.js

52:18.450 --> 52:20.090
我們一般會寫一個JS

52:20.090 --> 52:21.650
這個JS作為入口

52:21.650 --> 52:23.530
這個JS專門去導別的JS

52:23.530 --> 52:24.730
比方說我們導入B

52:24.730 --> 52:26.890
B裏邊要導出一個東西

52:26.890 --> 52:27.890
export

52:27.890 --> 52:28.530
defort

52:28.530 --> 52:29.130
導出什麽

52:29.130 --> 52:30.290
導出V乘1 2

52:30.290 --> 52:30.730
可不可以

52:30.730 --> 52:31.690
當然可以

52:31.690 --> 52:32.690
V乘1 2

52:32.690 --> 52:34.610
把A裏邊的東西乘1 2再導出

52:34.610 --> 52:34.810
好

52:34.810 --> 52:36.130
那Made裏邊導入什麽

52:36.130 --> 52:38.170
導入B裏邊的東西

52:38.170 --> 52:39.090
Bdata

52:39.090 --> 52:40.490
front

52:40.490 --> 52:41.770
B.js

52:41.770 --> 52:44.290
這裏輸出

52:44.290 --> 52:45.570
Data

52:45.570 --> 52:46.330
好看一下

52:46.330 --> 52:47.370
我們在頁面上

52:47.370 --> 52:48.330
直接去導入什麽

52:48.330 --> 52:49.610
導入這個Made.js

52:49.610 --> 52:51.170
那麽我們頁面是不是

52:51.170 --> 52:53.250
可以只導入一個JS文件了

52:53.250 --> 52:55.730
是不是可以只導入一個JS文件

52:55.730 --> 52:55.890
好

52:55.890 --> 52:56.810
你看

52:56.810 --> 52:58.250
是不是26

52:58.250 --> 52:59.570
乘1 2

52:59.570 --> 53:01.970
那麽它自動是不是就引用了A,B,C

53:01.970 --> 53:03.770
上去一次

53:03.770 --> 53:05.210
自動引用Made.js

53:05.210 --> 53:06.690
B.js

53:06.690 --> 53:07.290
A.js

53:07.290 --> 53:09.050
你看是不是乘乘關系過來的

53:09.050 --> 53:11.690
我們在頁面上是不是只可以引用一個就完事了

53:11.690 --> 53:12.970
就避免了輸血了很多的

53:12.970 --> 53:14.490
複雜的一些依賴關係

53:14.490 --> 53:18.270
就是魔幻化

53:18.270 --> 53:20.710
有什麽問題

53:20.710 --> 53:21.510
導出的是數據

53:21.510 --> 53:21.790
對

53:21.790 --> 53:22.710
導出的是數據

53:22.710 --> 53:24.030
不是變量名

53:24.030 --> 53:24.750
不是變量名

53:24.750 --> 53:26.230
不是把變量名字導出

53:26.230 --> 53:28.110
是把這個變量的數據導出

53:28.110 --> 53:30.310
當然這裏可以直接輸血數據都可以

53:30.310 --> 53:31.590
都可以

53:31.590 --> 53:32.870
沒問題

53:32.870 --> 53:33.750
這裏導出數據

53:33.750 --> 53:34.870
導出一個函數

53:34.870 --> 53:36.670
導出函數那邊就接受函數

53:36.670 --> 53:38.230
導出對象那邊就接受對象

53:38.230 --> 53:38.550
對吧

53:38.550 --> 53:39.750
導入的時候就接受對象

53:39.750 --> 53:41.350
隨便導出什麽都可以

53:46.700 --> 53:48.300
Note不也可以用

53:48.300 --> 53:49.980
可以用ES6的語法

53:49.980 --> 53:53.500
但是Note裏面它不支持ES6的魔幻化

53:53.500 --> 53:55.100
它是不支持魔幻化

53:55.100 --> 53:56.860
魔幻化標準的這種自動寫法

53:56.860 --> 53:59.580
在Note裏面不支持的

53:59.580 --> 54:00.540
這種做法以後

54:00.540 --> 54:01.820
你們在教授家裏面

54:01.820 --> 54:03.140
我們之前不是說過

54:03.140 --> 54:04.220
VU還用開發方式嗎

54:04.220 --> 54:05.380
叫做VU CLI

54:05.380 --> 54:05.820
對吧

54:05.820 --> 54:06.820
大間教授家

54:06.820 --> 54:08.980
教授家裏面會非常非常長劍

54:08.980 --> 54:09.580
不是長劍

54:09.580 --> 54:11.140
就必須要用這種方式

54:11.140 --> 54:13.020
就要用這種方式

54:13.020 --> 54:14.220
現在其實還有一些問題

54:14.220 --> 54:15.140
還有什麽問題呢

54:15.140 --> 54:16.140
你像我代碼寫多了

54:16.140 --> 54:18.060
是不是解釋文件會非常非常多

54:18.060 --> 54:19.460
你像你這麽寫法

54:19.460 --> 54:22.100
你可以把代碼進行非常非常的細分

54:22.100 --> 54:23.300
可以細分代碼

54:23.300 --> 54:24.460
細分到不同的文件

54:24.460 --> 54:26.140
那麽導致意義面上就會導致

54:26.140 --> 54:27.620
請求很多很多的解釋文件

54:27.620 --> 54:28.500
也不太好

54:28.500 --> 54:31.060
那麽最好的做法是要用什麽構建工具

54:31.060 --> 54:31.980
叫做VPEC

54:31.980 --> 54:33.620
目前最常見的是VPEC

54:33.620 --> 54:35.220
構建工具可以解決這個問題

54:35.220 --> 54:37.060
那麽構建工具是專門一套客了

54:37.060 --> 54:38.380
這裏不想扯了

54:38.380 --> 54:40.300
我們大家先瞭解一下這個魔幻化

54:40.340 --> 54:42.300
前段路要學習完的話

54:42.300 --> 54:44.220
還是要學還蠻多東西的

54:45.500 --> 54:46.620
這裏魔幻化我們介紹了

54:49.300 --> 54:50.220
然後導入魔幻

54:50.220 --> 54:50.740
注意一下

54:50.740 --> 54:53.140
導入魔幻在最前面導入

54:53.140 --> 54:56.060
在所有代碼之前導入

54:56.060 --> 54:57.580
這是也是魔幻化的標準

54:57.580 --> 54:59.420
它要在所有代碼之前導入

54:59.420 --> 55:00.260
你不要寫段代碼

55:00.260 --> 55:01.020
才會去導入一個

55:01.020 --> 55:01.740
不要這樣子

55:03.340 --> 55:04.380
然後關於工程目錄

55:05.980 --> 55:06.620
關於工程目錄

55:06.620 --> 55:09.940
我一會兒再講練習的時候再講吧

55:10.020 --> 55:11.340
直接把講了

55:11.340 --> 55:11.860
工程目錄的話

55:11.860 --> 55:13.500
一會兒再講練習的時候直接講了

55:13.500 --> 55:13.740
好

55:13.740 --> 55:14.660
那麽現在終於到了

55:14.660 --> 55:15.620
我們這裏課了內容了

55:17.660 --> 55:18.540
能教多少是多少

55:18.540 --> 55:19.340
好吧

55:19.340 --> 55:19.660
好吧

55:19.660 --> 55:21.380
今天能教多少是多少

55:21.380 --> 55:22.900
因為東西確實比較多

55:22.900 --> 55:25.420
但是我最終肯定給大家講完的

55:25.420 --> 55:26.460
放心

55:26.460 --> 55:27.980
我這邊我們看一下效果

55:27.980 --> 55:31.740
之前我想給大家寫這麽一個小遊戲的

55:31.740 --> 55:32.620
但是後來發現了

55:32.620 --> 55:33.940
這個遊戲呢

55:33.940 --> 55:35.420
它倒是寫是沒什麽問題

55:35.420 --> 55:36.820
寫也挺簡單的

55:36.820 --> 55:38.900
關鍵是遊戲還練習不到五誘

55:38.900 --> 55:40.900
今天我們講的很多指使練習不到

55:40.900 --> 55:44.100
所以說我最終還是把它換成了一個非常現實的

55:44.100 --> 55:45.500
非常實用的

55:45.500 --> 55:46.460
在我以後

55:46.460 --> 55:49.340
在公司裏面開發經常遇到的

55:49.340 --> 55:51.820
也是我上一週公開直播課

55:51.820 --> 55:53.100
講過了這麽一個效果

55:53.100 --> 55:55.300
就是分業顯示數據的效果

55:55.300 --> 55:55.740
對吧

55:55.740 --> 55:57.620
做一個分業顯示數據的效果

55:57.620 --> 55:59.100
上次的公開直播課

55:59.100 --> 56:01.060
我用原生介石實現的

56:01.060 --> 56:04.140
而且用了一個半小時

56:04.140 --> 56:06.300
光講那個原生介石用了一個半小時

56:06.300 --> 56:07.620
那麼監獄呢

56:07.620 --> 56:10.820
目前來聽這個課的時候

56:10.820 --> 56:12.060
剛聽過一個公開課的時候

56:12.060 --> 56:13.820
來聽這個課的同學呢

56:13.820 --> 56:15.180
很多基礎都還不錯

56:15.180 --> 56:16.020
所以說這節課呢

56:16.020 --> 56:18.260
我們肯定是在邏輯上

56:18.260 --> 56:20.980
肯定不會花了那麽多時間講了

56:20.980 --> 56:23.420
我們主要是學習組件

56:23.420 --> 56:25.860
我們就以這個效果為例

56:25.860 --> 56:28.260
那麼我們現在盡量把這個效果

56:28.260 --> 56:29.700
讓它看上去比較復雜一點

56:29.700 --> 56:30.820
因為我這裏舉例子的話

56:30.820 --> 56:33.020
也不太可能去舉非常復雜的例子

56:33.020 --> 56:33.620
非常復雜的例子

56:33.620 --> 56:35.820
光是業務分析要分析半天

56:35.820 --> 56:37.300
我們就認為這個

56:37.300 --> 56:39.900
好像稍微感覺上有點複雜

56:39.900 --> 56:43.460
那麽我們怎麽來解決將近這個複雜度呢

56:43.460 --> 56:45.780
無誘是這麽考慮的

56:45.780 --> 56:47.340
它是這樣的想的

56:47.340 --> 56:50.100
它認為一個栽域複雜的頁面

56:50.100 --> 56:51.020
栽域複雜的系統

56:51.020 --> 56:53.900
它一定可以往小的地方劃分

56:53.900 --> 56:55.980
把它分成就像我們寫精彩頁面一樣

56:55.980 --> 56:57.500
把它分成一個叫做DIV

56:57.500 --> 56:58.780
DIV裏面再分細

56:58.780 --> 57:00.980
再細分一個一個的小的DIV

57:00.980 --> 57:02.020
小的小的塊兒

57:02.020 --> 57:03.900
它一定可以細分

57:03.900 --> 57:06.140
那麽這個每一個細分的塊兒

57:06.140 --> 57:08.180
它就把它叫做一個組件

57:08.180 --> 57:09.020
所以說

57:09.020 --> 57:10.820
我們在無誘裏面組件開發

57:10.820 --> 57:12.820
是一個非常非常常見的一個現象

57:12.820 --> 57:15.300
它可以降低我們開發的複雜度

57:15.300 --> 57:16.420
我們這裏有一個記錄比舉

57:16.420 --> 57:20.090
什麽是組件

57:20.090 --> 57:24.590
什麽是組件

57:24.590 --> 57:30.070
組件是頁面中的一個功能單元

57:30.150 --> 57:31.070
再完整的說是

57:31.070 --> 57:38.390
頁面中的一個可附用的功能單元

57:38.390 --> 57:40.510
就是這個組件可以寫號就重複使用

57:40.510 --> 57:41.190
比方說

57:41.190 --> 57:43.910
我們就把這個東西做成一個組件

57:43.910 --> 57:49.110
一個就是電影

57:49.110 --> 57:51.150
一個電影就把它做成一個組件

57:51.150 --> 57:51.910
那麽之後呢

57:51.910 --> 57:53.270
一個頁面上顯示三個電影

57:53.270 --> 57:55.310
是不是把這個組件用三次就完事了

57:55.310 --> 57:57.350
重複使用三次就完事了

57:57.350 --> 57:58.990
就這麽簡單

57:59.070 --> 58:01.270
它是可以重複使用的組件

58:01.270 --> 58:02.390
包括分頁

58:02.390 --> 58:03.990
分頁我們把它做成一個組件

58:03.990 --> 58:05.990
那麽以後凡是要用到分頁的地方

58:05.990 --> 58:07.190
直接把組件一扔過去

58:07.190 --> 58:09.110
我們寫號的組件一扔過去就可以使用了

58:09.110 --> 58:10.110
它有點類似於什麽

58:10.110 --> 58:12.110
有點類似於函數

58:12.110 --> 58:12.910
函數是不是這樣子

58:12.910 --> 58:14.270
我們寫一次可以反覆的調用

58:14.270 --> 58:15.070
對吧

58:15.070 --> 58:16.270
它其實組件的出現

58:16.270 --> 58:18.590
就是根據函數是詩為來的

58:18.590 --> 58:20.630
是根據函數是編程出來的

58:20.630 --> 58:22.070
後邊包括我們講的什麽組件

58:22.070 --> 58:22.790
單項數據流

58:22.790 --> 58:25.350
這些東西都是函數是編程裏邊的理念

58:25.350 --> 58:28.950
就是函數編程對前段的貢獻是蠻大的

58:29.350 --> 58:30.430
或者是組件

58:30.430 --> 58:31.630
那麽在5u裏面

58:31.630 --> 58:32.830
關鍵是我們怎麽寫單頁

58:32.830 --> 58:34.150
你說的倒是輕鬆

58:34.150 --> 58:36.670
5u裏面怎麽來創建組件呢

58:36.670 --> 58:37.670
5u中的組件

58:39.750 --> 58:41.030
那麽這裏我們應該來說

58:41.030 --> 58:42.990
首先是組件的創建

58:44.350 --> 58:47.590
組件對於開發者

58:49.150 --> 58:51.750
是一個普通的配置對象

58:52.830 --> 58:54.710
該配置對象

58:54.710 --> 59:00.430
幾乎和之前學習的配置

59:00.430 --> 59:01.750
5u配置對象

59:02.710 --> 59:03.110
一致

59:04.510 --> 59:07.270
一個組件對於開發者而言

59:07.270 --> 59:09.790
就是一個普普通通的配置對象

59:09.790 --> 59:13.110
這個對象幾乎和之前學習的5u配置一致

59:13.110 --> 59:15.230
那現在我們來實驗這個效果

59:15.230 --> 59:16.990
我們來隨便找一個舉個例子

59:18.510 --> 59:20.190
我們這裏學面在這裏

59:20.190 --> 59:21.150
還是來測試嗎

59:21.150 --> 59:21.470
測試

59:22.550 --> 59:23.190
這裏複製一個

59:24.830 --> 59:25.390
我們看一下

59:26.030 --> 59:26.830
這裏把三角

59:26.830 --> 59:28.910
是負這個TES-1嗎

59:31.990 --> 59:33.230
TES-4

59:34.030 --> 59:34.790
來測試一下

59:39.260 --> 59:40.300
好 接著這邊

59:40.300 --> 59:43.100
看著我們之前的Templeter

59:43.100 --> 59:44.380
是我們之前在這樣子寫的

59:44.380 --> 59:44.740
對不對

59:44.740 --> 59:45.420
在這樣子寫的

59:45.420 --> 59:46.540
還有什麽數據

59:46.540 --> 59:47.380
al or 這些那些

59:47.380 --> 59:49.820
全部去了

59:49.820 --> 59:51.340
剛剛進進的一個東西

59:51.340 --> 59:51.740
對吧

59:51.740 --> 59:52.940
剛剛進進的一個東西

59:52.940 --> 59:54.020
全部去玩

59:54.020 --> 59:55.100
好 那麽接下來

59:55.100 --> 59:56.340
我們開始來寫組件了

59:56.340 --> 59:57.580
開始來寫組件了

59:57.660 --> 59:59.020
這是我們一頁面上要選兩東西

59:59.020 --> 59:59.340
對吧

59:59.340 --> 01:00:00.340
我們一頁面上要選

01:00:00.340 --> 01:00:02.660
就是5u實地裏面要配置的東西

01:00:02.660 --> 01:00:03.580
好 那麽比方說了

01:00:03.580 --> 01:00:05.380
現在我要來這裏寫一個組件

01:00:05.380 --> 01:00:07.900
比方說我們這裏做了一個分頁組件出來

01:00:07.900 --> 01:00:09.180
在這裏做了一個分頁組件出來

01:00:09.180 --> 01:00:10.620
我們是不是要把個分頁組件寫進來

01:00:10.620 --> 01:00:11.580
對吧

01:00:11.580 --> 01:00:13.060
是不是要把分頁組件寫進來

01:00:13.060 --> 01:00:15.180
好 那麽我們怎麽來寫一個組件呢

01:00:15.180 --> 01:00:15.820
很簡單

01:00:15.820 --> 01:00:18.580
就是一個配置對象

01:00:18.580 --> 01:00:20.060
就是一個配置對象

01:00:20.060 --> 01:00:21.020
好 那麽配置對象

01:00:21.020 --> 01:00:22.460
我們這裏就用個辨量嘛

01:00:22.460 --> 01:00:23.060
叫做配件

01:00:24.580 --> 01:00:25.820
它就是一個配件

01:00:25.820 --> 01:00:27.340
這就是個組件

01:00:27.340 --> 01:00:28.420
對於開發者

01:00:28.420 --> 01:00:30.260
但是在5u內部的這個東西

01:00:30.260 --> 01:00:31.340
它還要做一些操作

01:00:31.340 --> 01:00:32.420
它拿到這個配置對象之後

01:00:32.420 --> 01:00:33.580
還要做一些操作

01:00:33.580 --> 01:00:34.980
只對我們開發者而言

01:00:34.980 --> 01:00:38.340
你可以認為組件就是一個配置對象

01:00:38.340 --> 01:00:40.700
組件的配置對象

01:00:40.700 --> 01:00:42.860
有的時候我們也怕說習慣了

01:00:42.860 --> 01:00:44.340
也說把它說成組件

01:00:44.340 --> 01:00:46.340
就是一個配角組件

01:00:46.340 --> 01:00:47.780
就是一個組件

01:00:47.780 --> 01:00:49.100
但是你要心裏面要知道

01:00:49.100 --> 01:00:50.980
它實際上是一個配置

01:00:50.980 --> 01:00:53.100
那麽這裏的配置咋寫呢

01:00:53.100 --> 01:00:54.500
跟這裏一樣

01:00:54.500 --> 01:00:56.420
跟這裏一樣

01:00:56.420 --> 01:00:56.820
沒問題吧

01:00:56.820 --> 01:00:58.340
我們把這個放過來吧

01:00:58.340 --> 01:00:59.300
直接放到這裏

01:00:59.300 --> 01:00:59.900
放到這裏

01:00:59.900 --> 01:01:02.700
這樣子看上去簡潔一點

01:01:02.700 --> 01:01:03.740
放到這裏

01:01:03.740 --> 01:01:06.700
就不要在這裏寫了

01:01:06.700 --> 01:01:07.780
好 那麽這個配角呢

01:01:07.780 --> 01:01:08.660
跟這裏寫法一樣

01:01:08.660 --> 01:01:10.780
也說這個組件裏面是不是要顯示東西

01:01:10.780 --> 01:01:13.100
你看我要把分頁做成一個組件

01:01:13.100 --> 01:01:15.020
我要把這個區域做成一個組件

01:01:15.020 --> 01:01:15.820
這個區域做成組件

01:01:15.820 --> 01:01:17.620
是不是它裏面要顯示一些元素

01:01:17.620 --> 01:01:20.060
那麽它組件裏面是不是也得有模板

01:01:20.060 --> 01:01:22.500
組件裏面是不是也得有模板

01:01:22.500 --> 01:01:23.140
對不對

01:01:23.140 --> 01:01:25.220
好 那麽比方說我們這裏寫個A級

01:01:25.220 --> 01:01:31.060
表示的是分頁組件的要顯示的內容

01:01:31.060 --> 01:01:31.340
對吧

01:01:31.340 --> 01:01:32.740
其他我先不配置的

01:01:32.740 --> 01:01:34.100
其他我先什麽data那些東西

01:01:34.100 --> 01:01:35.300
我先不配置的

01:01:35.300 --> 01:01:37.700
好 那麽這個組件就配置好了

01:01:37.700 --> 01:01:38.580
就配置好了

01:01:38.580 --> 01:01:39.820
那麽這個配置好了有用嗎

01:01:39.820 --> 01:01:41.620
我們來看一下有用嗎

01:01:41.620 --> 01:01:43.300
這組件能顯示嗎

01:01:43.300 --> 01:01:44.740
說不能顯示

01:01:44.740 --> 01:01:46.220
說不能顯示

01:01:46.220 --> 01:01:47.420
那為什麽不能顯示呢

01:01:47.420 --> 01:01:49.740
因為你的組件還沒有用

01:01:49.740 --> 01:01:50.820
對吧 還沒有用

01:01:50.820 --> 01:01:53.460
就我們組件是可以用在一面上著的

01:01:53.500 --> 01:01:55.780
它也不知道你把這個組件要放到一面哪個位置

01:01:55.780 --> 01:01:56.780
要放多少個

01:01:56.780 --> 01:01:57.860
它都不知道

01:01:57.860 --> 01:01:59.900
比方說我們一面上有五個分頁組件

01:01:59.900 --> 01:02:00.820
它是不是要放五個呢

01:02:00.820 --> 01:02:01.540
它也不知道

01:02:01.540 --> 01:02:01.860
對不對

01:02:01.860 --> 01:02:03.420
它不知道該怎麽用這個組件

01:02:03.420 --> 01:02:06.260
所以說你組件寫好了之後

01:02:06.260 --> 01:02:07.500
創建好了之後

01:02:07.500 --> 01:02:08.660
你還得做什麽

01:02:08.660 --> 01:02:12.220
還得組件的註冊

01:02:12.220 --> 01:02:13.500
還得註冊

01:02:13.500 --> 01:02:15.500
註冊之後才能使用

01:02:15.500 --> 01:02:16.460
先註冊

01:02:16.460 --> 01:02:17.580
先創建組件

01:02:17.580 --> 01:02:18.580
然後再註冊

01:02:18.580 --> 01:02:19.340
再使用

01:02:19.340 --> 01:02:21.020
所以它分為三步走

01:02:21.100 --> 01:02:24.460
組件的使用

01:02:26.740 --> 01:02:28.300
那怎麽來註冊呢

01:02:28.300 --> 01:02:29.740
註冊有兩種方式

01:02:29.740 --> 01:02:31.300
一種是全局註冊

01:02:32.500 --> 01:02:33.380
不推薦

01:02:33.380 --> 01:02:34.700
不推薦的這種做法

01:02:34.700 --> 01:02:36.940
除非是有一些太通用的註冊

01:02:36.940 --> 01:02:38.500
一種是局部註冊

01:02:39.620 --> 01:02:40.860
一種是局部註冊

01:02:40.860 --> 01:02:43.060
其實對於我們目前而言的話

01:02:43.060 --> 01:02:45.140
全局註冊跟局部註冊可能區別不大

01:02:45.140 --> 01:02:47.940
但是我不希望大家養成一些不好的書寫習慣

01:02:47.940 --> 01:02:49.460
所以說我們之後對註冊

01:02:49.460 --> 01:02:51.460
都是用全局部註冊

01:02:51.460 --> 01:02:52.860
這個東西會影響啥呢

01:02:52.860 --> 01:02:55.980
會影響那個就是用教授架大件工程

01:02:55.980 --> 01:02:57.180
會有影響

01:02:57.180 --> 01:02:58.780
全局註冊局部註冊會有影響

01:02:58.780 --> 01:03:02.540
它會影響到你的頁面響應的速度

01:03:02.540 --> 01:03:04.140
這種打包部署的時候

01:03:04.140 --> 01:03:05.020
我們的頁面啊

01:03:05.020 --> 01:03:06.140
GS那些體積大小

01:03:06.140 --> 01:03:07.980
它會影響到這個

01:03:07.980 --> 01:03:09.300
主要會影響到這個

01:03:09.300 --> 01:03:09.860
總之呢

01:03:09.860 --> 01:03:11.340
我們的原則是

01:03:11.340 --> 01:03:12.380
現在沒學找到架

01:03:12.380 --> 01:03:13.580
也不好給你解釋

01:03:13.580 --> 01:03:14.500
我們的原則是

01:03:16.500 --> 01:03:18.460
盡量局部註冊

01:03:20.460 --> 01:03:21.460
除非

01:03:24.460 --> 01:03:30.860
除了全局通用的組件

01:03:30.860 --> 01:03:35.500
並且經常用到的組件

01:03:35.500 --> 01:03:37.380
就很多頁面都要用到這個組件

01:03:37.380 --> 01:03:42.020
那麼使用全局註冊

01:03:42.020 --> 01:03:46.300
否則盡量使用局部註冊

01:03:46.300 --> 01:03:47.500
好我們來分別說一下

01:03:47.500 --> 01:03:48.620
全局註冊局部註冊

01:03:48.620 --> 01:03:49.940
怎麼來寫這個代碼

01:03:49.940 --> 01:03:52.500
好首先我們說全局註冊

01:03:52.500 --> 01:03:53.820
全局註冊

01:03:53.820 --> 01:03:54.900
怎麼寫呢

01:03:54.900 --> 01:03:56.060
使用無誘啊

01:03:56.060 --> 01:03:57.180
這不是個構造寒說嗎

01:03:57.180 --> 01:03:57.780
對吧

01:03:57.780 --> 01:03:58.620
構造寒說裡面

01:03:58.620 --> 01:03:59.580
他給你提供了一個方法

01:03:59.580 --> 01:04:01.100
叫component

01:04:01.100 --> 01:04:01.980
這個方法

01:04:01.980 --> 01:04:02.820
就這麼簡單

01:04:02.820 --> 01:04:04.460
第一個寫組件名稱

01:04:05.700 --> 01:04:06.780
組件名稱

01:04:06.780 --> 01:04:08.620
第二個纏數就是配置對象

01:04:08.620 --> 01:04:09.620
就是配置對象

01:04:09.620 --> 01:04:10.940
配置對象就寫這兒

01:04:10.940 --> 01:04:12.100
把組件配置對象就寫這兒

01:04:12.100 --> 01:04:14.500
這就是全局註冊組件

01:04:14.500 --> 01:04:16.300
全局註冊組件

01:04:17.180 --> 01:04:18.700
注意哦

01:04:18.700 --> 01:04:19.540
你註冊組件的時候

01:04:19.540 --> 01:04:21.100
是要填組件名稱的

01:04:21.100 --> 01:04:22.580
不是說你這個辨量寫到什麼名稱

01:04:22.580 --> 01:04:23.380
組件就是那個名稱

01:04:23.380 --> 01:04:25.860
是你要在這裡填組件名稱的

01:04:25.860 --> 01:04:27.860
這裡要填寫組件名稱

01:04:27.860 --> 01:04:28.540
好了

01:04:28.540 --> 01:04:30.900
組件名稱的又是一個知識了

01:04:30.900 --> 01:04:32.140
組件名稱

01:04:32.140 --> 01:04:35.060
組件名稱的規範

01:04:35.060 --> 01:04:38.740
第一個有兩種規範

01:04:38.740 --> 01:04:42.700
以下命名方式

01:04:42.700 --> 01:04:45.020
任選其一

01:04:45.820 --> 01:04:47.180
隨便選一個

01:04:47.180 --> 01:04:48.300
你喜歡哪個選哪個

01:04:48.300 --> 01:04:49.500
這個都沒有強制要求

01:04:49.500 --> 01:04:50.460
而且不同的公司

01:04:50.460 --> 01:04:55.180
他使用的就是規範不一樣

01:04:55.180 --> 01:04:56.300
但是一般的統一

01:04:56.300 --> 01:04:57.100
一般的統一

01:04:57.100 --> 01:04:58.420
不要就是什麼精神分裂

01:04:58.420 --> 01:04:59.660
我經常發現一些同學寫的

01:04:59.660 --> 01:05:01.140
就是精神分裂

01:05:01.140 --> 01:05:04.380
他明明是全都是小投封命名法

01:05:04.380 --> 01:05:05.020
他一會兒來的

01:05:05.020 --> 01:05:06.540
突然來個大投封命名法

01:05:06.540 --> 01:05:08.340
明明前面都是加了下滑線

01:05:08.340 --> 01:05:10.940
他前面非要突然給加個多勒

01:05:10.940 --> 01:05:13.900
不要一個精神分裂就行了

01:05:13.900 --> 01:05:15.700
第一個就是命名規範

01:05:15.700 --> 01:05:21.180
就是使用短橫線命名

01:05:21.180 --> 01:05:26.100
第二種是大投封命名法

01:05:26.100 --> 01:05:27.500
這組件的命名方式

01:05:27.500 --> 01:05:28.340
只有兩個方式

01:05:28.340 --> 01:05:30.580
所以說組件是不能用小投封命名法的

01:05:30.580 --> 01:05:31.780
是不能用的

01:05:31.780 --> 01:05:33.700
要么使用大投封命名法

01:05:33.700 --> 01:05:37.020
叫 Pascal命名法

01:05:37.020 --> 01:05:39.060
要么就是使用短橫線命名法

01:05:39.060 --> 01:05:40.540
兩個二選其一

01:05:40.540 --> 01:05:41.420
隨便哪一個都一樣

01:05:41.420 --> 01:05:42.420
隨便哪一個都行

01:05:42.500 --> 01:05:44.100
比如說你這裡組件名稱

01:05:44.100 --> 01:05:45.020
比如說Pager

01:05:45.020 --> 01:05:46.260
我們就可以寫個Pager

01:05:46.260 --> 01:05:48.300
沒問題

01:05:48.300 --> 01:05:50.500
那麼大寫的Pager是不是也可以

01:05:50.500 --> 01:05:51.940
大投封命名法

01:05:51.940 --> 01:05:52.860
那這是一個單詞

01:05:52.860 --> 01:05:54.260
如果說兩個單詞

01:05:54.260 --> 01:05:55.100
兩個單詞

01:05:55.100 --> 01:05:57.300
比如說MyPager

01:05:57.300 --> 01:05:58.500
我們是不是大投封命名法

01:05:58.500 --> 01:05:59.140
這樣的寫

01:05:59.140 --> 01:05:59.940
是不是沒問題

01:05:59.940 --> 01:06:00.700
可以

01:06:00.700 --> 01:06:01.740
也可以寫什麼

01:06:01.740 --> 01:06:06.500
My橫槓Pager都可以

01:06:06.500 --> 01:06:08.620
這兩種書寫方式都可以

01:06:08.620 --> 01:06:09.460
原來這意思

01:06:09.460 --> 01:06:10.660
不管你使用的是大投封

01:06:10.700 --> 01:06:12.540
還是短橫線都可以

01:06:12.540 --> 01:06:14.060
給組件命名

01:06:14.060 --> 01:06:14.820
這是組件

01:06:14.820 --> 01:06:16.620
全機註冊註件

01:06:16.620 --> 01:06:18.380
全機註冊註件

01:06:18.380 --> 01:06:19.660
註冊我們現在還沒用

01:06:19.660 --> 01:06:21.420
還沒有用這個註件

01:06:21.420 --> 01:06:22.700
所以說現在還看不到

01:06:22.700 --> 01:06:24.140
但是你註冊才能用

01:06:24.140 --> 01:06:25.700
先寫註件配置

01:06:25.700 --> 01:06:27.660
然後再註冊完了

01:06:27.660 --> 01:06:29.660
過後才能使用

01:06:29.660 --> 01:06:30.580
搞清楚這個過程

01:06:30.580 --> 01:06:33.420
給註件命名注意一下

01:06:33.420 --> 01:06:38.660
然後還有一個就是局部註冊

01:06:38.660 --> 01:06:39.620
局部註冊是

01:06:39.620 --> 01:06:41.220
我們終點說局部註冊

01:06:41.220 --> 01:06:46.580
是在使用的配置中

01:06:46.580 --> 01:06:51.540
使用的組件或無誘配置

01:06:51.540 --> 01:06:57.540
無誘實力配置中進行

01:06:57.540 --> 01:06:58.580
通過

01:06:58.580 --> 01:07:00.180
有的是筆記

01:07:00.180 --> 01:07:01.940
主要是幫你回憶一些東西

01:07:01.940 --> 01:07:02.660
光看筆記的話

01:07:02.660 --> 01:07:04.580
其實不是很好理解的註冊

01:07:06.060 --> 01:07:06.940
什麼意思呢

01:07:06.940 --> 01:07:08.380
比方說我們這裡有個組件

01:07:08.380 --> 01:07:08.620
對吧

01:07:08.620 --> 01:07:09.860
有寫到這麼一個組件

01:07:09.860 --> 01:07:10.820
這個組件

01:07:10.820 --> 01:07:12.380
我別的地方用不到

01:07:12.380 --> 01:07:14.420
我只想在這個地方用

01:07:14.420 --> 01:07:16.940
只想在我們這個無誘實力裡邊用

01:07:16.940 --> 01:07:17.900
我們想在這裡用

01:07:17.900 --> 01:07:19.460
那麼我們在這裡局部註冊

01:07:19.460 --> 01:07:20.980
不全局註冊了

01:07:20.980 --> 01:07:22.620
局部註冊

01:07:22.620 --> 01:07:24.100
好局部註冊怎麼註冊呢

01:07:24.100 --> 01:07:25.620
我們要在哪裡用

01:07:25.620 --> 01:07:26.860
我們就在哪裡註冊

01:07:26.860 --> 01:07:28.100
在這裡配置

01:07:28.100 --> 01:07:30.020
比如說我們在這裡邊想使用這個組件

01:07:30.020 --> 01:07:31.660
這個DIV裡面要顯示一個分頁

01:07:31.660 --> 01:07:32.620
要使用

01:07:32.620 --> 01:07:36.060
在這個位置想使用這個組件

01:07:36.060 --> 01:07:37.100
使用組件

01:07:37.100 --> 01:07:38.540
在這裡想使用組件

01:07:38.540 --> 01:07:40.260
那麼我們是不是要在這裡邊

01:07:40.300 --> 01:07:42.100
去把組件用註冊進來

01:07:42.100 --> 01:07:43.140
對吧

01:07:43.140 --> 01:07:45.460
它全局註冊的話就不用再寫了

01:07:45.460 --> 01:07:46.180
全局註冊的話

01:07:46.180 --> 01:07:47.500
直接在這裡就可以用了

01:07:47.500 --> 01:07:48.820
我們還沒有講怎麼用

01:07:48.820 --> 01:07:49.660
還沒有講怎麼用

01:07:49.660 --> 01:07:50.140
不著急

01:07:51.380 --> 01:07:53.020
如果你的組件是全局註冊的

01:07:53.020 --> 01:07:54.060
是不是可以直接使用了

01:07:55.180 --> 01:07:57.740
但是如果說你組件不是全局註冊的

01:07:57.740 --> 01:07:58.420
那麼你在這裡

01:07:58.420 --> 01:07:59.740
你要在哪裡用

01:07:59.740 --> 01:08:01.300
你必須要在哪裡註冊

01:08:01.300 --> 01:08:02.820
這是局部註冊

01:08:02.820 --> 01:08:04.700
那麼這裡怎麼註冊呢

01:08:04.700 --> 01:08:06.100
就用配置component

01:08:07.180 --> 01:08:08.500
配置為一個對象

01:08:08.500 --> 01:08:10.020
這個對象的屬性名

01:08:10.020 --> 01:08:11.780
表示的是組件名

01:08:11.780 --> 01:08:13.940
屬性名就是組件名

01:08:13.940 --> 01:08:14.980
好

01:08:14.980 --> 01:08:16.260
組件的後面配置

01:08:16.260 --> 01:08:16.540
怎麼了

01:08:16.540 --> 01:08:20.430
配置的就是組件的配置對象

01:08:20.430 --> 01:08:21.790
這就是局部註冊

01:08:21.790 --> 01:08:23.750
表示我這一塊

01:08:23.750 --> 01:08:27.470
我要在我這個模板中使用這個組件

01:08:27.470 --> 01:08:28.470
就這麼意思

01:08:28.470 --> 01:08:31.510
我要在我這個模板中使用這個組件

01:08:31.510 --> 01:08:33.990
我給它的名稱是屬性名

01:08:33.990 --> 01:08:35.030
埋培捲

01:08:35.030 --> 01:08:37.150
給它的組件名稱是埋培捲

01:08:37.150 --> 01:08:38.510
這個意思嗎

01:08:38.550 --> 01:08:40.350
這就是使用組件

01:08:40.350 --> 01:08:40.950
有沒有疑問

01:08:47.020 --> 01:08:48.740
官方的當然可以

01:08:48.740 --> 01:08:49.860
當然可以

01:08:49.860 --> 01:08:51.460
命名是一種規範

01:08:51.460 --> 01:08:54.300
兄弟命名是一種規範

01:08:54.300 --> 01:08:56.940
它不是強制性的要求

01:08:56.940 --> 01:08:58.580
它不是強制性的要求

01:08:58.580 --> 01:09:00.060
命名是一種規範

01:09:00.060 --> 01:09:01.780
官方的文章是怎麼說的呢

01:09:01.780 --> 01:09:03.580
它是Pascal

01:09:03.580 --> 01:09:05.500
Pascal

01:09:05.500 --> 01:09:07.620
Pascal 那邊就是大頭風命名法

01:09:07.620 --> 01:09:08.580
大頭風命名法

01:09:10.420 --> 01:09:12.020
好 那麼現在呢

01:09:12.020 --> 01:09:13.580
這裡呢

01:09:13.580 --> 01:09:15.820
就是DIVD我們要使用組件

01:09:15.820 --> 01:09:16.820
那麼怎麼使用呢

01:09:16.820 --> 01:09:19.900
就是直接使用組件的名字

01:09:19.900 --> 01:09:23.780
把它當成標籤去使用就完成了

01:09:23.780 --> 01:09:25.300
那麼這個使用組件的時候

01:09:25.300 --> 01:09:26.620
也有兩種方式

01:09:28.620 --> 01:09:30.060
主要是把組件

01:09:32.740 --> 01:09:38.180
把組件當作標籤使用即可

01:09:38.220 --> 01:09:40.180
把組件當作標籤使用即可

01:09:41.980 --> 01:09:42.820
那麼這裡呢

01:09:44.220 --> 01:09:47.180
組件這一塊就是這裡

01:09:47.180 --> 01:09:49.140
那麼標籤的名字是什麼呢

01:09:49.140 --> 01:09:51.300
標籤名任選其一

01:09:51.300 --> 01:09:54.100
標籤名任選其一

01:09:55.580 --> 01:09:59.620
第一種就是短橫線命名法

01:10:00.740 --> 01:10:02.100
短橫線命名法

01:10:02.100 --> 01:10:04.060
大頭風命名法

01:10:04.060 --> 01:10:05.100
我給大家說一下

01:10:05.100 --> 01:10:06.060
我給大家說一下吧

01:10:06.100 --> 01:10:09.220
它為什麼讓你盡量用大頭風命名法

01:10:09.220 --> 01:10:10.540
因為你的組件名字

01:10:10.540 --> 01:10:15.220
Party的組件名字跟Atomom元素同名了

01:10:15.220 --> 01:10:18.060
標籤你寫這個組件的名字叫LI

01:10:18.060 --> 01:10:19.340
如果屬於用小頭風命名法

01:10:19.340 --> 01:10:20.780
就是不是就是小寫的LI

01:10:20.780 --> 01:10:23.780
那麼這個小寫的LI容易跟Atomom元素同名

01:10:23.780 --> 01:10:26.140
這是它為什麼要用大頭風命名法的原因

01:10:28.830 --> 01:10:29.590
好 那麼這裡呢

01:10:30.790 --> 01:10:31.830
好 怎麼使用呢

01:10:31.830 --> 01:10:32.830
兩種都可以

01:10:32.830 --> 01:10:34.230
比方說這裡寫的MyPager對吧

01:10:34.230 --> 01:10:35.830
那麼我們可以直接使用MyPager

01:10:37.830 --> 01:10:38.350
MyPager

01:10:39.270 --> 01:10:40.230
這樣用 沒問題

01:10:40.230 --> 01:10:41.230
把它用元素來使用

01:10:41.230 --> 01:10:41.630
你看一下

01:10:42.950 --> 01:10:43.910
是不是顯示出來了

01:10:43.910 --> 01:10:45.190
把這個組件的東西顯示出來了

01:10:45.190 --> 01:10:45.630
對吧

01:10:45.630 --> 01:10:47.230
它就會把組件渲染到這兒

01:10:48.430 --> 01:10:49.230
你看看

01:10:49.230 --> 01:10:50.310
這個代碼是不是很簡潔

01:10:50.310 --> 01:10:51.270
DIV裡面有個什麼

01:10:51.270 --> 01:10:51.990
有個分頁

01:10:51.990 --> 01:10:53.110
非常容易閱讀

01:10:53.110 --> 01:10:54.230
那麼分頁是什麼東西呢

01:10:54.230 --> 01:10:55.390
你要知道分頁是什麼東西

01:10:55.390 --> 01:10:56.350
你去看這

01:10:56.350 --> 01:10:57.790
如果你不想知道分頁是什麼東西

01:10:57.790 --> 01:10:59.670
你只需要知道這裡有個分頁就完事了

01:11:00.950 --> 01:11:01.630
另外一個意思

01:11:01.630 --> 01:11:02.910
我在這裡的

01:11:02.910 --> 01:11:04.550
無論是哪種注射組件方式都可以

01:11:04.550 --> 01:11:05.910
不要說你全機注射組件

01:11:05.910 --> 01:11:06.870
你就可以不寫這個配置

01:11:07.430 --> 01:11:08.950
如果你全機注射了過後

01:11:08.950 --> 01:11:10.350
你就可以不寫這個配置

01:11:10.350 --> 01:11:11.590
你看是不是仍然可以顯示

01:11:11.590 --> 01:11:12.190
對吧

01:11:12.190 --> 01:11:13.150
全機注射過後

01:11:13.150 --> 01:11:14.790
到處都可以使用

01:11:14.790 --> 01:11:16.750
任何地方都可以使用

01:11:16.750 --> 01:11:18.270
如果說你是局部注射的話

01:11:18.270 --> 01:11:20.550
那麼你就必須要用到的地方

01:11:20.550 --> 01:11:22.030
要通過這個配置

01:11:22.030 --> 01:11:22.750
給它配置進去

01:11:22.750 --> 01:11:25.750
表示我這個地方要用到這個組件

01:11:25.750 --> 01:11:27.150
明白的意思嗎

01:11:27.150 --> 01:11:28.270
這是第一種寫法

01:11:28.270 --> 01:11:30.190
直接使用這個組件MyPager

01:11:30.190 --> 01:11:31.510
MyPager

01:11:31.510 --> 01:11:32.950
那麼另外一種寫法是

01:11:32.950 --> 01:11:34.750
短橫線命名法MyPager

01:11:34.750 --> 01:11:35.590
這樣子寫

01:11:35.590 --> 01:11:36.310
沒有任何問題

01:11:36.310 --> 01:11:37.790
你別說這裡配置是大通風

01:11:37.790 --> 01:11:38.990
你必須要用大通風

01:11:38.990 --> 01:11:40.070
不用

01:11:40.070 --> 01:11:41.430
你用的時候跟那個配置的時候

01:11:41.430 --> 01:11:42.830
是沒關係的

01:11:42.830 --> 01:11:44.430
只要名字符合規範就行了

01:11:44.430 --> 01:11:45.470
短橫線命名法

01:11:45.470 --> 01:11:45.750
保存

01:11:45.750 --> 01:11:47.230
你看一下

01:11:47.230 --> 01:11:48.070
是不是也可以

01:11:48.070 --> 01:11:48.430
對吧

01:11:48.430 --> 01:11:48.990
也可以

01:11:52.310 --> 01:11:54.070
那麼這裡就是

01:11:54.070 --> 01:11:55.910
組件的使用方式

01:11:55.910 --> 01:11:57.030
以及組件的創建

01:11:57.030 --> 01:11:58.510
以及組件的註冊

01:11:58.510 --> 01:12:01.390
以及組件的使用

01:12:01.390 --> 01:12:03.790
那麼其實組件還可以有很多

01:12:03.830 --> 01:12:06.390
組件我們可以不斷的進行嵌套

01:12:06.390 --> 01:12:07.270
比方說

01:12:07.270 --> 01:12:08.270
我們這裡

01:12:08.270 --> 01:12:09.430
為了好看

01:12:09.430 --> 01:12:10.430
是不是我們可以把這個東西

01:12:10.430 --> 01:12:12.510
單獨提到一個模塊裏面去

01:12:12.510 --> 01:12:15.190
是不是可以把它單獨提到一個模塊裏面去

01:12:15.190 --> 01:12:15.390
好

01:12:15.390 --> 01:12:18.950
那麼接下來給大家看一下吧

01:12:20.110 --> 01:12:20.510
看一下

01:12:20.510 --> 01:12:22.030
我們這裡直接開始實現效果

01:12:23.390 --> 01:12:24.350
實現效果

01:12:24.350 --> 01:12:27.070
我們來開始打進工程結構

01:12:27.070 --> 01:12:29.790
我們在這裡建一個頁面

01:12:31.630 --> 01:12:32.350
因這個時候掉

01:12:33.070 --> 01:12:35.110
就是我們要最終運行的頁面

01:12:35.110 --> 01:12:36.190
這個頁面我們都寫過很多

01:12:36.190 --> 01:12:36.870
是吧

01:12:36.870 --> 01:12:37.430
APP

01:12:37.430 --> 01:12:38.590
一個DIV

01:12:38.590 --> 01:12:38.790
好

01:12:38.790 --> 01:12:41.270
那麼我們的VU的代碼

01:12:41.270 --> 01:12:42.670
和我們自己的代碼放哪呢

01:12:42.670 --> 01:12:44.750
我們通常在這裡會建一個文件夾

01:12:44.750 --> 01:12:45.990
叫SRC

01:12:46.990 --> 01:12:48.230
通常會建一個文件夾

01:12:48.230 --> 01:12:49.310
叫SRC

01:12:49.310 --> 01:12:51.230
這個文件夾裏面

01:12:51.230 --> 01:12:52.470
我們寫上我們的代碼

01:12:52.470 --> 01:12:54.230
以及VU代碼全部放裏面

01:12:54.230 --> 01:12:54.390
好

01:12:54.390 --> 01:12:55.750
那麼這個SRC裏面

01:12:55.750 --> 01:12:57.110
我們可以寫我們自己的代碼

01:12:57.110 --> 01:12:58.870
通常只規範

01:12:58.870 --> 01:13:01.390
它也不是說要強制論手的

01:13:01.390 --> 01:13:01.590
好

01:13:01.590 --> 01:13:03.030
那麼SRC目錄下面

01:13:03.030 --> 01:13:04.670
我們寫自己的代碼

01:13:04.670 --> 01:13:05.710
SRC目錄下面

01:13:05.710 --> 01:13:06.590
我們比方說

01:13:06.590 --> 01:13:08.670
我們這裡寫上一個index

01:13:08.670 --> 01:13:10.390
叫JS

01:13:10.390 --> 01:13:12.990
那麼由於我們這個SRC目錄下面

01:13:12.990 --> 01:13:15.510
可能將來要寫很多很多的JS文件

01:13:15.510 --> 01:13:19.630
因此為了方便我們能管理一代關係

01:13:19.630 --> 01:13:21.830
我這裏打算使用ES6的模塊化

01:13:21.830 --> 01:13:24.110
我把這個JS文件當成一個模塊

01:13:24.110 --> 01:13:25.630
因此我在頁面上用的時候

01:13:25.630 --> 01:13:26.230
我們這樣子用

01:13:27.030 --> 01:13:31.590
第二寫上SRC下面的index的JS

01:13:31.590 --> 01:13:33.430
大家加上什麼都要忘記了

01:13:33.430 --> 01:13:35.030
加上Type

01:13:35.030 --> 01:13:36.070
加上這個東西

01:13:36.070 --> 01:13:38.390
把當成一個模塊來使用

01:13:38.390 --> 01:13:41.190
那麼這個東西就相當於是什麼

01:13:41.190 --> 01:13:42.750
相當於我們剛才寫的那個例子

01:13:42.750 --> 01:13:43.990
是不是一個啟動文件

01:13:43.990 --> 01:13:45.350
相當於一個啟動文件

01:13:45.350 --> 01:13:46.430
它有什麼依賴關係

01:13:46.430 --> 01:13:48.470
它去找index的JS

01:13:48.470 --> 01:13:49.230
好

01:13:49.230 --> 01:13:51.110
那麼我們的VUJS放哪裏

01:13:51.110 --> 01:13:53.430
還有我們的就是CSS代碼放哪裏

01:13:53.430 --> 01:13:55.030
我們通常在SRC裏面

01:13:55.030 --> 01:13:57.590
建議的文件夾叫做Essence

01:13:57.590 --> 01:13:59.430
叫做潛入式的資源

01:13:59.430 --> 01:14:00.910
或者叫做靜態資源

01:14:00.910 --> 01:14:01.590
那麼在這裏面

01:14:01.590 --> 01:14:03.430
我們通常會放一些第三方庫

01:14:03.430 --> 01:14:05.030
我們可以引用的

01:14:05.030 --> 01:14:07.350
或者是一些CSS代碼

01:14:07.350 --> 01:14:08.310
當然這個Essence

01:14:08.310 --> 01:14:10.870
你們以後學的構建工具過後

01:14:10.870 --> 01:14:12.630
它裏面也不會放第三方庫

01:14:12.630 --> 01:14:16.470
一般就是放一些靜態資源圖片

01:14:16.470 --> 01:14:19.590
什麼CSS就放在這裏面

01:14:19.590 --> 01:14:22.150
但是我們目前要把第三方庫放進來

01:14:22.150 --> 01:14:25.990
我們把這個VUJS拷併過來

01:14:25.990 --> 01:14:27.030
把VUJS拷併過來

01:14:27.030 --> 01:14:28.070
放到這兒

01:14:28.070 --> 01:14:28.310
好了

01:14:28.310 --> 01:14:30.710
現在在頁面上是不是要去引用VUJS

01:14:30.710 --> 01:14:31.270
對吧

01:14:31.270 --> 01:14:33.110
然後一開始要去引用VUJS

01:14:33.110 --> 01:14:35.110
VUJS這個地方不是沒有壞話的

01:14:35.110 --> 01:14:35.910
它不是沒有壞話的

01:14:35.910 --> 01:14:39.670
你要這樣子寫VUJS

01:14:39.670 --> 01:14:41.750
然後這裏面還有CSS

01:14:41.750 --> 01:14:43.030
我們CSS不講了

01:14:43.030 --> 01:14:45.270
直接放過來就行了

01:14:45.270 --> 01:14:47.270
這個CSS效果也不是文字重點

01:14:47.270 --> 01:14:47.510
好

01:14:47.510 --> 01:14:49.430
我們還要去引用CSS

01:14:49.510 --> 01:14:54.710
link src目錄下面的SS的CSS

01:14:54.710 --> 01:14:56.870
你看我們把工程結構先搭建出來

01:14:56.870 --> 01:14:58.710
沒問題吧

01:14:58.710 --> 01:14:58.870
好

01:14:58.870 --> 01:15:01.270
那麼現在我們代碼是不是寫到index的GS裏面

01:15:01.270 --> 01:15:04.150
是不是寫到這裏面

01:15:04.150 --> 01:15:06.950
我們代碼是不是寫到index的GS裏面

01:15:06.950 --> 01:15:07.510
寫到這裏面

01:15:07.510 --> 01:15:09.030
對吧

01:15:09.030 --> 01:15:09.190
好

01:15:09.190 --> 01:15:10.150
寫到這裏面

01:15:10.150 --> 01:15:11.350
那麼這裏面寫上了

01:15:11.350 --> 01:15:13.830
我們就是根據之前的寫法一樣

01:15:13.830 --> 01:15:15.030
我們這裏幹嘛呢

01:15:15.030 --> 01:15:17.750
我們這裏創建一個VUJS實力

01:15:17.750 --> 01:15:18.710
創建一個VUJS實力

01:15:18.790 --> 01:15:20.710
直接在這裏寫配置得了

01:15:20.710 --> 01:15:22.390
template

01:15:22.390 --> 01:15:23.670
template是啥呢

01:15:23.670 --> 01:15:24.550
我們渲染啥呢

01:15:24.550 --> 01:15:26.710
通常情況下我們會這樣子處理

01:15:26.710 --> 01:15:28.950
我們不直接渲染任何內容

01:15:28.950 --> 01:15:29.750
通常情況下

01:15:29.750 --> 01:15:31.670
我們在這裏不直接渲染任何內容

01:15:31.670 --> 01:15:33.830
我們就渲染一個組件

01:15:33.830 --> 01:15:34.950
就渲染一個組件

01:15:34.950 --> 01:15:37.030
我們把這個組件叫做根組件

01:15:37.030 --> 01:15:38.710
就是整個頁面都是這個組件

01:15:38.710 --> 01:15:41.110
整個頁面全部是這個組件控制

01:15:41.110 --> 01:15:43.270
我們會在這個src裏面建一個文件

01:15:43.270 --> 01:15:46.470
叫做App.js

01:15:46.470 --> 01:15:47.510
我們這裏組

01:15:47.510 --> 01:15:48.630
這個地方導出什麽呢

01:15:48.630 --> 01:15:52.070
就導出一個組件配置

01:15:52.070 --> 01:15:54.070
就導出一個組件配置

01:15:54.070 --> 01:15:54.710
導出一個對象

01:15:54.710 --> 01:15:56.150
一個對象是不是一個組件配置

01:15:56.150 --> 01:15:58.790
對比方說我們這裏template

01:15:58.790 --> 01:16:00.470
這組件裏面顯示的是啥呢

01:16:00.470 --> 01:16:03.750
顯示的是那個App組件

01:16:03.750 --> 01:16:05.350
我們就是這個src嘛

01:16:05.350 --> 01:16:06.950
設這個表體

01:16:06.950 --> 01:16:09.110
App組件

01:16:09.110 --> 01:16:10.150
我們就直接寫到這裏

01:16:10.150 --> 01:16:11.270
我們就不在前面寫

01:16:11.270 --> 01:16:15.030
當然也可以在前面寫個template

01:16:15.110 --> 01:16:18.870
就看你自己的習慣

01:16:18.870 --> 01:16:19.990
這樣子寫也行

01:16:19.990 --> 01:16:21.430
我們這樣寫吧

01:16:21.430 --> 01:16:22.550
這樣寫的格式

01:16:22.550 --> 01:16:24.390
給你們以後學習教授家

01:16:24.390 --> 01:16:26.230
它的格式就差不多了

01:16:26.230 --> 01:16:27.350
好那麽這裏呢

01:16:27.350 --> 01:16:29.350
就這個組件就顯示這個東西

01:16:29.350 --> 01:16:30.550
你看我導出的是啥

01:16:30.550 --> 01:16:31.910
導出的就是一個組件

01:16:31.910 --> 01:16:32.310
對吧

01:16:32.310 --> 01:16:33.910
一個組件就是一個配置

01:16:33.910 --> 01:16:34.710
好那麽這邊來

01:16:34.710 --> 01:16:36.630
我們是不是要得到這個組件

01:16:36.630 --> 01:16:38.070
我們這裏要顯示這個組件

01:16:38.070 --> 01:16:39.110
是不是要得到這個組件

01:16:39.110 --> 01:16:40.150
那麽怎麽得到這個組件

01:16:40.150 --> 01:16:42.150
是不是要導入

01:16:42.230 --> 01:16:43.430
from

01:16:43.430 --> 01:16:45.990
f.js

01:16:45.990 --> 01:16:47.270
導入這個組件

01:16:47.270 --> 01:16:48.550
註冊怎麽註冊

01:16:48.550 --> 01:16:49.510
局部註冊

01:16:49.510 --> 01:16:52.630
component

01:16:52.630 --> 01:16:54.230
那麽這裏App寫進來

01:16:54.230 --> 01:16:55.430
表示我註冊一個組件

01:16:55.430 --> 01:16:56.710
這個組件的名字叫App

01:16:56.710 --> 01:16:58.630
這樣子寫相當於是這樣子寫

01:16:58.630 --> 01:16:59.830
相當於是這樣子寫

01:16:59.830 --> 01:17:00.870
是一樣的道理

01:17:00.870 --> 01:17:03.670
相當於是給組件取個名字叫App

01:17:03.670 --> 01:17:04.950
那麽我們到時候用的時候

01:17:04.950 --> 01:17:06.710
是不是就是App

01:17:06.710 --> 01:17:07.670
對吧

01:17:07.670 --> 01:17:09.030
這樣子用是不是可以

01:17:09.030 --> 01:17:09.590
對不對

01:17:09.590 --> 01:17:10.070
可以

01:17:10.070 --> 01:17:11.590
我這裏使用的是短橫線命名法

01:17:12.550 --> 01:17:14.790
它只有一個單詞沒有橫線而已

01:17:14.790 --> 01:17:17.430
當然了這個也可以用字結束

01:17:17.430 --> 01:17:18.470
字結束

01:17:18.470 --> 01:17:20.470
但是你不寫結束是不行的

01:17:20.470 --> 01:17:22.230
不寫結束在ATM5裏面是可以的

01:17:22.230 --> 01:17:23.590
但是在5U裏面是不行的

01:17:23.590 --> 01:17:24.870
它要報錯的

01:17:24.870 --> 01:17:26.470
這樣子寫可以

01:17:26.470 --> 01:17:27.750
這樣子寫可以

01:17:27.750 --> 01:17:28.470
都行

01:17:28.470 --> 01:17:29.990
是不是可以使用這個組件了

01:17:29.990 --> 01:17:33.030
於是我們在這裏還要配這個App

01:17:33.030 --> 01:17:34.310
好寫完了

01:17:34.310 --> 01:17:35.670
大家看這個結構

01:17:35.670 --> 01:17:37.190
看這個工程結構

01:17:37.190 --> 01:17:38.950
我這個英這個時候的JS文件

01:17:38.950 --> 01:17:39.670
它做什麽

01:17:39.750 --> 01:17:41.990
它只負責啟動5U

01:17:41.990 --> 01:17:44.470
僅負責啟動5U

01:17:44.470 --> 01:17:45.510
你看現在分模塊了

01:17:45.510 --> 01:17:47.670
每個模塊關心一件事情

01:17:47.670 --> 01:17:51.190
僅負責啟動5U和啟動時的配置

01:17:53.270 --> 01:17:54.470
所有的界面

01:17:55.670 --> 01:17:56.390
交給

01:17:56.390 --> 01:17:57.510
交給誰來渲染

01:17:57.510 --> 01:17:59.430
交給組件App來渲染

01:18:01.110 --> 01:18:01.910
你看

01:18:01.910 --> 01:18:03.270
那現在的紫色就非常明確了

01:18:03.270 --> 01:18:06.230
英這個時候的JS我只負責啟動這個應用

01:18:06.230 --> 01:18:07.030
要啟動怎麽啟動

01:18:07.030 --> 01:18:07.910
就是6一個5U

01:18:07.990 --> 01:18:09.910
5U就像創建出來才能啟動

01:18:09.910 --> 01:18:10.630
對吧

01:18:11.910 --> 01:18:13.910
5U接式的路徑寫錯了嗎

01:18:13.910 --> 01:18:14.870
我看一下

01:18:14.870 --> 01:18:15.990
對寫錯了

01:18:15.990 --> 01:18:17.030
寫錯了

01:18:17.030 --> 01:18:17.830
不錯

01:18:17.830 --> 01:18:18.790
非常細心

01:18:20.790 --> 01:18:21.910
好那麽這裏呢

01:18:21.910 --> 01:18:23.910
我們只負責啟動這個

01:18:23.910 --> 01:18:25.990
啟動這個就是5U

01:18:25.990 --> 01:18:27.030
至於界面渲染

01:18:27.030 --> 01:18:28.150
我有沒有渲染任何界面

01:18:28.150 --> 01:18:28.710
沒有

01:18:28.710 --> 01:18:30.230
因為我們在用組件

01:18:30.230 --> 01:18:32.470
讓組件來幫我們渲染界面

01:18:32.470 --> 01:18:34.150
好那麽這個東西我打個注釋

01:18:34.150 --> 01:18:35.430
打個注釋

01:18:35.430 --> 01:18:36.390
這個文件在幹嘛

01:18:36.390 --> 01:18:37.830
表示跟組件

01:18:38.150 --> 01:18:39.830
表示跟組件

01:18:39.830 --> 01:18:41.830
整個頁面的內容

01:18:42.870 --> 01:18:45.830
靠該組件完成

01:18:45.830 --> 01:18:47.830
這個組件要渲染整個頁面的內容

01:18:47.830 --> 01:18:49.830
全部靠它來完成

01:18:49.830 --> 01:18:51.830
好咱們來看一下

01:18:51.830 --> 01:18:52.710
是不是現在

01:18:52.710 --> 01:18:53.830
我們沒有運行

01:18:53.830 --> 01:18:55.830
這裏運行出來

01:18:55.830 --> 01:18:57.830
你看

01:18:57.830 --> 01:18:59.830
你看是不是現在出來了

01:18:59.830 --> 01:19:01.110
這只負我們頁面上很簡單

01:19:01.110 --> 01:19:01.830
沒有任何內容

01:19:01.830 --> 01:19:03.830
那麽我現在繼續寫

01:19:03.830 --> 01:19:05.830
我們頁面上不是有很多內容嗎

01:19:05.830 --> 01:19:07.830
有哪些內容我們剛才看到的

01:19:07.830 --> 01:19:09.830
有那個

01:19:09.830 --> 01:19:11.830
一個數據列表對不對

01:19:11.830 --> 01:19:13.830
是不是電影列表對不對

01:19:13.830 --> 01:19:15.830
電影列表還有個什麽分頁對不對

01:19:15.830 --> 01:19:17.830
還有個分頁

01:19:17.830 --> 01:19:19.830
好那麽我們這裏呢

01:19:19.830 --> 01:19:21.830
如果說全部交給App來完成的話

01:19:21.830 --> 01:19:23.830
它是不是壓力三大呀

01:19:23.830 --> 01:19:25.830
那意味著這麽的東西我要全部搞定

01:19:25.830 --> 01:19:27.830
好它裏又可以使用別的組件

01:19:27.830 --> 01:19:29.830
是不是就這樣子

01:19:29.830 --> 01:19:31.830
一層一層牽它過去了

01:19:31.830 --> 01:19:33.830
你看著啊我們這裏呢

01:19:33.830 --> 01:19:35.830
叫做Movie Nest

01:19:35.830 --> 01:19:37.830
Movie Nest

01:19:37.830 --> 01:19:39.830
叫GS

01:19:39.830 --> 01:19:41.830
好我們這裏又來一樣的Constant Template

01:19:41.830 --> 01:19:43.830
好

01:19:43.830 --> 01:19:45.830
這是

01:19:45.830 --> 01:19:47.830
電影什麽列表

01:19:47.830 --> 01:19:49.830
列表

01:19:49.830 --> 01:19:51.830
好那麽這裏呢

01:19:51.830 --> 01:19:53.830
導出

01:19:53.830 --> 01:19:55.830
導出Export它又是一個組件

01:19:55.830 --> 01:19:57.830
它主要負責宣傳電影列表的

01:19:57.830 --> 01:19:59.830
它主要負責宣傳電影列表

01:19:59.830 --> 01:20:01.830
Template導出

01:20:01.830 --> 01:20:03.830
好那麽在

01:20:03.830 --> 01:20:05.830
我們的根組件裏邊

01:20:05.830 --> 01:20:07.830
你看我要負責整個頁面宣傳

01:20:07.830 --> 01:20:09.830
但是整個頁面宣傳除了

01:20:09.830 --> 01:20:11.830
我們肯定有個電影列表的吧

01:20:11.830 --> 01:20:13.830
OK我這裏先導入這個電影列表

01:20:13.830 --> 01:20:15.830
你看這樣子一層一層牽它過去了

01:20:15.830 --> 01:20:17.830
導入這個Movie

01:20:17.830 --> 01:20:19.830
Movie

01:20:19.830 --> 01:20:21.830
Movie Nest

01:20:21.830 --> 01:20:23.830
小同方是可以的

01:20:23.830 --> 01:20:25.830
小同方不是說不行

01:20:25.830 --> 01:20:27.830
只是不是很推薦

01:20:27.830 --> 01:20:29.830
因為它會容易跟那個

01:20:29.830 --> 01:20:31.830
文字造成重複

01:20:31.830 --> 01:20:33.830
因為文字造成重複

01:20:33.830 --> 01:20:35.830
因為唯有它裏的

01:20:35.830 --> 01:20:37.830
它裏的GS

01:20:37.830 --> 01:20:39.830
這裏應該要擴展一些知識

01:20:39.830 --> 01:20:41.830
就是那個

01:20:41.830 --> 01:20:43.830
嗯

01:20:43.830 --> 01:20:45.830
就是那個什麽

01:20:45.830 --> 01:20:47.830
書寫

01:20:47.830 --> 01:20:49.830
GS代碼跟我們的模板

01:20:49.830 --> 01:20:51.830
就是模板的書寫方案有兩種

01:20:51.830 --> 01:20:53.830
一種叫做Atm.in.GS

01:20:53.830 --> 01:20:55.830
就是在GS中

01:20:55.830 --> 01:20:57.830
書寫模板

01:20:57.830 --> 01:20:59.830
我們現在是不是在GS中書寫模板

01:20:59.830 --> 01:21:01.830
不是哦

01:21:01.830 --> 01:21:03.830
你看我們之前寫的代碼

01:21:03.830 --> 01:21:05.830
是不是都是在模板裏面書寫GS

01:21:05.830 --> 01:21:07.830
你看

01:21:07.830 --> 01:21:09.830
還有我們之前的代碼

01:21:09.830 --> 01:21:11.830
之前的代碼你看

01:21:11.830 --> 01:21:13.830
我們是不是在模板裏面

01:21:13.830 --> 01:21:15.830
去書寫GS代碼看到沒

01:21:15.830 --> 01:21:17.830
看到沒

01:21:17.830 --> 01:21:19.830
我們目前不是這種寫法

01:21:19.830 --> 01:21:21.830
這是一種方案

01:21:21.830 --> 01:21:23.830
另外一種方案叫做GSinAtm

01:21:23.830 --> 01:21:25.830
這是唯有使用的方案

01:21:25.830 --> 01:21:27.830
這是什麽使用的方案

01:21:27.830 --> 01:21:29.830
這是react

01:21:29.830 --> 01:21:31.830
這是react使用的方案

01:21:31.830 --> 01:21:33.830
兩種是不一樣的

01:21:33.830 --> 01:21:35.830
雖然說唯有也支持

01:21:35.830 --> 01:21:37.830
也支持這種方式

01:21:37.830 --> 01:21:39.830
只問我們平時沒這麽用而已

01:21:39.830 --> 01:21:41.830
在

01:21:41.830 --> 01:21:43.830
當我們在用GS

01:21:43.830 --> 01:21:45.830
在Atm裏面寫東西的時候

01:21:45.830 --> 01:21:47.830
組件盡量用大陀鋒

01:21:47.830 --> 01:21:49.830
我告訴你這個地方不然的話

01:21:49.830 --> 01:21:51.830
容易出問題的

01:21:51.830 --> 01:21:53.830
你相信我絕對容易出問題的

01:21:53.830 --> 01:21:55.830
他不是說不認

01:21:55.830 --> 01:21:57.830
他又認這個東西

01:21:57.830 --> 01:21:59.830
只不過他容易出問題

01:21:59.830 --> 01:22:01.830
因為他容易跟Atm元素造成重複

01:22:01.830 --> 01:22:03.830
有沒有現在的同學告訴我

01:22:03.830 --> 01:22:05.830
Atm一共有多少個元素

01:22:05.830 --> 01:22:07.830
Atm五有多少個元素

01:22:07.830 --> 01:22:09.830
Atm五一共有多少個元素

01:22:09.830 --> 01:22:11.830
你知道有多少個嗎

01:22:11.830 --> 01:22:13.830
一共有哪些

01:22:13.830 --> 01:22:15.830
你能見過每一個Atm五的元素嗎

01:22:15.830 --> 01:22:17.830
你不知道的吧

01:22:17.830 --> 01:22:19.830
那一憑什麽有信心能夠知道

01:22:19.830 --> 01:22:21.830
你這個名字沒有跟Atm五的元素重複了

01:22:21.830 --> 01:22:23.830
我都不知道

01:22:23.830 --> 01:22:25.830
你是不是寫這些就容易重複

01:22:25.830 --> 01:22:27.830
盡量用大陀鋒

01:22:27.830 --> 01:22:29.830
我不會嗨你們那你怕什麽呢

01:22:29.830 --> 01:22:31.830
這裏我們Component註冊

01:22:31.830 --> 01:22:33.830
註冊這個組件

01:22:33.830 --> 01:22:35.830
Movie List

01:22:35.830 --> 01:22:37.830
把組件倒進來

01:22:37.830 --> 01:22:39.830
這裏是不是可以使用這個組件了

01:22:39.830 --> 01:22:41.830
我這裏不顯示這個東西

01:22:41.830 --> 01:22:43.830
我只是大自然的搬運工

01:22:43.830 --> 01:22:45.830
我只是把別的組件搬運到這裏

01:22:45.830 --> 01:22:47.830
我只是在顯示別的組件

01:22:47.830 --> 01:22:49.830
顯示Movie List

01:22:49.830 --> 01:22:51.830
這裏可以用不用大陀鋒

01:22:51.830 --> 01:22:53.830
這裏可以用短橫線

01:22:53.830 --> 01:22:55.830
List

01:22:55.830 --> 01:22:57.830
這裏自結束嘛

01:22:57.830 --> 01:22:59.830
所以可以用這個Movie List

01:22:59.830 --> 01:23:01.830
我是幫你去宣判

01:23:01.830 --> 01:23:03.830
因這個事他做什麽

01:23:03.830 --> 01:23:05.830
他只是用主啟動的

01:23:05.830 --> 01:23:07.830
宣判這個App組件

01:23:07.830 --> 01:23:09.830
我這裏最好也用大陀鋒

01:23:09.830 --> 01:23:11.830
保持命名的統一

01:23:11.830 --> 01:23:13.830
但是使用的時候

01:23:13.830 --> 01:23:15.830
我們可以用短橫線

01:23:15.830 --> 01:23:19.210
使用的是用短橫線

01:23:19.210 --> 01:23:22.780
要不然都用大陀鋒得了

01:23:22.780 --> 01:23:24.780
都用大陀鋒得了

01:23:24.780 --> 01:23:26.780
統一命名

01:23:26.780 --> 01:23:28.780
Movie List

01:23:28.780 --> 01:23:30.780
使用的時候

01:23:30.780 --> 01:23:32.780
我們都用大陀鋒

01:23:32.780 --> 01:23:34.780
都用大陀鋒統一命名

01:23:34.780 --> 01:23:36.780
因這個事只負責啟動無誘

01:23:36.780 --> 01:23:38.780
他不做什麽事情

01:23:38.780 --> 01:23:40.780
他只負責啟動

01:23:40.780 --> 01:23:42.780
啟動過後我選了這個跟組件App

01:23:42.780 --> 01:23:44.780
選了這個組件

01:23:44.780 --> 01:23:46.780
我這裏可以寫簡潔一點

01:23:46.780 --> 01:23:48.780
就是自結束

01:23:48.780 --> 01:23:50.780
App組件裏面

01:23:50.780 --> 01:23:52.780
他在宣判的時候

01:23:52.780 --> 01:23:54.780
他就宣判了Movie List組件

01:23:54.780 --> 01:23:56.780
隨時我們一面上看到

01:23:56.780 --> 01:23:58.780
一面上

01:23:58.780 --> 01:24:00.780
那裏又寫錯了

01:24:00.780 --> 01:24:02.780
我明白了

01:24:02.780 --> 01:24:04.780
這個東西

01:24:04.780 --> 01:24:06.780
因為在Webpack裏面

01:24:06.780 --> 01:24:08.780
不加不加後準是可以的

01:24:08.780 --> 01:24:10.780
但是在這裏不行

01:24:10.780 --> 01:24:12.780
你看電影列表是不是出來了

01:24:12.780 --> 01:24:14.780
是不是宣判了電影列表的組件了

01:24:14.780 --> 01:24:16.780
就一層層過去了

01:24:16.780 --> 01:24:18.780
那麽我們就寫個Pager.js

01:24:18.780 --> 01:24:20.780
就是一樣的道理

01:24:20.780 --> 01:24:22.780
我們拿過來Pager.js

01:24:22.780 --> 01:24:24.780
那麽這裏就是分頁組件

01:24:24.780 --> 01:24:26.780
分頁組件

01:24:26.780 --> 01:24:28.780
那麽這裏在App裏面

01:24:28.780 --> 01:24:30.780
我們的頁面裏面

01:24:30.780 --> 01:24:32.780
除了有一個電影列表之外

01:24:32.780 --> 01:24:34.780
你看這個代碼很好讀

01:24:34.780 --> 01:24:36.780
全部都是分開的

01:24:36.780 --> 01:24:38.780
我們的App裏面除了一個電影列表

01:24:38.780 --> 01:24:40.780
是不是還有一個分頁

01:24:40.780 --> 01:24:42.780
是不是還有一個分頁

01:24:42.780 --> 01:24:44.780
Pager.js

01:24:44.780 --> 01:24:46.780
那麽這裏

01:24:46.780 --> 01:24:48.780
我們寫上Pager

01:24:48.780 --> 01:24:50.780
但是你要注意

01:24:50.780 --> 01:24:52.780
組件也好

01:24:52.780 --> 01:24:54.780
還剛才那個啟動文件的配置也好

01:24:54.780 --> 01:24:56.780
那麽這裏都要用單個跟元素

01:24:56.780 --> 01:24:58.780
都要用單個跟元素

01:24:58.780 --> 01:25:00.780
不要忘記了

01:25:00.780 --> 01:25:02.780
這是我們上一課講的

01:25:02.780 --> 01:25:04.780
那麽現在呢

01:25:04.780 --> 01:25:06.780
當然還要註冊進來

01:25:06.780 --> 01:25:08.780
你看一下現在是不是搞定了

01:25:08.780 --> 01:25:10.780
我們的App裏面

01:25:10.780 --> 01:25:12.780
你看這個代碼非常容易閱讀

01:25:12.780 --> 01:25:14.780
我們頁面上有什麽東西呢

01:25:14.780 --> 01:25:16.780
有一個電影列表

01:25:16.780 --> 01:25:18.780
有一個分頁

01:25:18.780 --> 01:25:20.780
好電影列表是什麽呢

01:25:20.780 --> 01:25:22.780
電影列表在這裏沒看

01:25:22.780 --> 01:25:24.780
分頁是什麽呢在這裏沒看

01:25:24.780 --> 01:25:26.780
你看是不是把分化的就是非常非常細緻的

01:25:26.780 --> 01:25:28.780
而且每一個組件關心自己的功能就行了

01:25:28.780 --> 01:25:30.780
你看我們的分頁組件跟電影列表有關系嗎

01:25:30.780 --> 01:25:32.780
這麽沒有什麽關系

01:25:32.780 --> 01:25:34.780
我在做我的分裏有什麽關系的

01:25:34.780 --> 01:25:36.780
我電影列表跟分頁有關系嗎

01:25:36.780 --> 01:25:38.780
沒有什麽關系

01:25:38.780 --> 01:25:40.780
電影列表裏面

01:25:40.780 --> 01:25:42.780
電影列表裏面它又是有一個一個電影組成的

01:25:42.780 --> 01:25:44.780
它要用到電影組件

01:25:44.780 --> 01:25:46.780
電影列表裏面要用到電影組件

01:25:46.780 --> 01:25:48.780
好那麽來

01:25:48.780 --> 01:25:50.780
我們又可以建個組件

01:25:50.780 --> 01:25:52.780
你看這樣子是不是可以無限嵌套下去

01:25:52.780 --> 01:25:54.780
無謂要揭示

01:25:54.780 --> 01:25:56.780
你看我又可以建一個單個電影的組件

01:25:56.780 --> 01:25:58.780
單個電影的組件

01:25:58.780 --> 01:26:00.780
比方說這是單個電影

01:26:00.780 --> 01:26:02.780
那麼電影列表裏面

01:26:02.780 --> 01:26:04.780
你看著我們這裏可以

01:26:04.780 --> 01:26:08.540
又導入

01:26:08.540 --> 01:26:11.980
import

01:26:11.980 --> 01:26:13.980
這全是HANA

01:26:13.980 --> 01:26:15.980
這全是HANA

01:26:19.980 --> 01:26:21.980
有點看不住了

01:26:21.980 --> 01:26:23.980
無謂

01:26:23.980 --> 01:26:27.670
無謂導入一下

01:26:27.670 --> 01:26:29.670
compromise使用了

01:26:29.670 --> 01:26:31.670
然後在這裏面

01:26:31.670 --> 01:26:33.670
我們不是有很多電影嗎

01:26:33.670 --> 01:26:35.670
一個電影,兩個電影,三個電影

01:26:35.670 --> 01:26:37.670
四個電影

01:26:37.670 --> 01:26:39.670
是不是組件是可以重複使用的

01:26:39.670 --> 01:26:41.670
所以組件可以重複使用的

01:26:41.670 --> 01:26:43.670
組件是一個可複用的單元

01:26:43.670 --> 01:26:45.670
它是可以重複使用的

01:26:45.670 --> 01:26:47.670
每一次使用,雖然是同一個組件

01:26:47.670 --> 01:26:49.670
但是每一次使用組件

01:26:49.670 --> 01:26:51.670
它們之間是相互獨立的

01:26:51.670 --> 01:26:53.670
相互獨立的

01:26:53.670 --> 01:26:55.670
你可以這樣想

01:26:55.670 --> 01:26:57.670
組件是一個構造函數

01:26:57.670 --> 01:26:59.670
使用組件

01:26:59.670 --> 01:27:01.670
是創建一個構造函數的對象

01:27:01.670 --> 01:27:03.670
你可以這樣去想像

01:27:03.670 --> 01:27:05.670
多次使用

01:27:05.670 --> 01:27:07.670
保存,你看一下

01:27:07.670 --> 01:27:09.670
當個電影,當個電影有分屆組件

01:27:09.670 --> 01:27:11.670
那麼現在我們的整個工程

01:27:11.670 --> 01:27:13.670
結構,變成這樣的一個結構

01:27:13.670 --> 01:27:15.670
你看著

01:27:15.670 --> 01:27:17.670
頂層是啥,頂層組件

01:27:17.670 --> 01:27:19.670
是不是app

01:27:19.670 --> 01:27:21.670
是app組件頂層的

01:27:21.670 --> 01:27:23.670
頂層的是app組件

01:27:23.670 --> 01:27:25.670
是這個組件

01:27:25.670 --> 01:27:27.670
這個組件裏面渲染了啥呢

01:27:27.670 --> 01:27:29.670
渲染了movie list

01:27:29.670 --> 01:27:31.670
和什麼pager

01:27:31.670 --> 01:27:33.670
渲染了這麼兩個組件

01:27:33.670 --> 01:27:35.670
而這個movie list

01:27:35.670 --> 01:27:37.670
這次在渲染的時候

01:27:37.670 --> 01:27:39.670
它又去渲染了誰呢

01:27:39.670 --> 01:27:41.670
它又去渲染了什麼movie組件

01:27:41.670 --> 01:27:43.670
渲染了多個movie組件

01:27:43.670 --> 01:27:45.670
渲染了多個movie組件

01:27:45.670 --> 01:27:47.670
那麼你看一下

01:27:47.670 --> 01:27:49.670
是不是形成這麼一個輸行結構了

01:27:49.670 --> 01:27:51.670
我們把這個輸行結構

01:27:51.670 --> 01:27:53.670
叫做組件數

01:27:53.670 --> 01:27:55.670
組件數

01:27:55.670 --> 01:27:57.670
我們這個課對組件數只需要知道

01:27:57.670 --> 01:27:59.670
這麼一個概念就行了

01:27:59.670 --> 01:28:01.670
因為我們不涉及到更多的

01:28:01.670 --> 01:28:03.670
無誘底層的原理

01:28:03.670 --> 01:28:05.670
它會形成這麼一種輸行結構

01:28:05.670 --> 01:28:07.670
會形成這麼一種輸行結構

01:28:07.670 --> 01:28:09.670
後面我們講那個組件的渲染的時候

01:28:09.670 --> 01:28:11.670
還會再說到這個地方

01:28:13.670 --> 01:28:15.670
組件可以嵌套

01:28:15.670 --> 01:28:17.670
重複使用

01:28:17.670 --> 01:28:19.670
因此

01:28:19.670 --> 01:28:21.670
會形成一個

01:28:21.670 --> 01:28:23.670
組件數

01:28:27.670 --> 01:28:29.670
組件數的根

01:28:29.670 --> 01:28:31.670
數的根

01:28:31.670 --> 01:28:33.670
根組件

01:28:33.670 --> 01:28:35.670
它數一定有個根

01:28:35.670 --> 01:28:37.670
根就叫做根組件

01:28:37.670 --> 01:28:39.670
我們通常用App這個名字

01:28:39.670 --> 01:28:41.670
來表示無誘的根組件

01:28:41.670 --> 01:28:43.670
通常用這個名字來表示無誘的根組件

01:28:43.670 --> 01:28:45.670
就形成這麼一種結構了

01:28:45.670 --> 01:28:47.670
之後寫代碼的話

01:28:47.670 --> 01:28:49.670
我們在哪裡寫呢

01:28:49.670 --> 01:28:51.670
就在這裡寫

01:28:51.670 --> 01:28:53.670
我們要做分頁組件

01:28:53.670 --> 01:28:55.670
做分頁組件的時候

01:28:55.670 --> 01:28:57.670
我完全不用考慮其他組件

01:28:57.670 --> 01:28:59.670
這種思想

01:28:59.670 --> 01:29:01.670
在開直播課的時候

01:29:01.670 --> 01:29:03.670
也是反覆關注給你們的

01:29:03.670 --> 01:29:05.670
只不過在無誘裡邊

01:29:05.670 --> 01:29:07.670
把這種思想得到淋漓盡致的體現

01:29:07.670 --> 01:29:09.670
你做這個組件的時候

01:29:09.670 --> 01:29:11.670
因為你這個組件

01:29:11.670 --> 01:29:13.670
根本就不知道它將來用到什麼場景

01:29:13.670 --> 01:29:15.670
你不能說假設我就是在分頁電影

01:29:15.670 --> 01:29:17.670
哪有電影啊

01:29:17.670 --> 01:29:19.670
沒有電影啊

01:29:19.670 --> 01:29:21.670
這裡有電影嘛分頁

01:29:21.670 --> 01:29:23.670
你電影都看不見

01:29:23.670 --> 01:29:25.670
電影在這裡

01:29:25.670 --> 01:29:27.670
你這個分頁組件根本就沒有電影

01:29:27.670 --> 01:29:29.670
它只做這一塊的功能

01:29:29.670 --> 01:29:31.670
然後通過在App裡邊進行組裝

01:29:31.670 --> 01:29:33.670
把它組裝成一個完整的頁面

01:29:33.670 --> 01:29:35.670
聽懂了這個意思嗎

01:29:41.180 --> 01:29:43.180
對 現在還沒有加嘛

01:29:47.450 --> 01:29:49.450
要不今天就到這吧

01:29:49.450 --> 01:29:51.450
今天就到這

01:29:51.450 --> 01:29:53.450
明天我就接到講

01:29:53.450 --> 01:29:55.450
反正這兩天可以把兩個講完

01:29:55.450 --> 01:29:57.450
下來了這樣子

01:29:57.450 --> 01:29:59.450
下來了大家把這個結構寫出來

01:30:01.450 --> 01:30:03.450
把這個結構寫出來

01:30:03.450 --> 01:30:05.450
結構寫出來過後

01:30:05.450 --> 01:30:07.450
明天我們就在這個結構基礎上

01:30:07.450 --> 01:30:09.450
開始寫代吧

01:30:09.450 --> 01:30:11.450
下來了一定要把這個結構寫出來

01:30:11.450 --> 01:30:13.450
就是每一天的課程

01:30:13.450 --> 01:30:15.450
同學們一定要跟著我

01:30:15.450 --> 01:30:17.450
做一遍

01:30:17.450 --> 01:30:19.450
你不跟著做一遍

01:30:19.450 --> 01:30:21.450
你覺得聽著好像是沒有什麼問題

01:30:21.450 --> 01:30:23.450
我告訴你這是幻覺

01:30:23.450 --> 01:30:25.450
真的是幻覺

01:30:25.450 --> 01:30:27.450
學程序是特別特別容易出現幻覺的

01:30:27.450 --> 01:30:29.450
你聽著覺得特別特別簡單

01:30:29.450 --> 01:30:31.450
寫完了之後

01:30:31.450 --> 01:30:33.450
有這麼一點印象的過後

01:30:33.450 --> 01:30:35.450
我們後邊在接著講

01:30:35.450 --> 01:30:37.450
你還知道後面是怎麼回事

01:30:37.450 --> 01:30:39.450
不然的話你是根本沒有

01:30:39.450 --> 01:30:41.450
任何一點印象的

01:30:41.450 --> 01:30:43.450
而SES裡面是靜態資源

01:30:43.450 --> 01:30:45.450
就是CSS、VU.GS

01:30:45.450 --> 01:30:47.450
就放到這裏

01:30:47.450 --> 01:30:49.450
我們寫的代碼就放到這裏

01:30:49.450 --> 01:30:51.450
這裏其實還可以用目錄進一步

01:30:51.450 --> 01:30:58.090
進行組裝

01:30:58.090 --> 01:31:00.090
比方說Muwe和Muwe List

01:31:00.090 --> 01:31:02.090
Muwe和Muwe List

01:31:02.090 --> 01:31:04.090
Muwe放在文件夾裏面進行管理

01:31:04.090 --> 01:31:06.090
就這裏面可以隨意的進行管理

01:31:06.090 --> 01:31:08.090
Muwe和Muwe List可以放到這裏面進行管理

01:31:08.090 --> 01:31:09.090
都可以

01:31:09.090 --> 01:31:11.090
這裏面很靈活的可以自行來決定

01:31:11.090 --> 01:31:13.090
大家下來把這個

01:31:13.090 --> 01:31:15.090
結構給它寫出來

01:31:15.090 --> 01:31:17.090
今天也沒有什麼席提了

01:31:17.090 --> 01:31:19.090
因為我今天沒有講完

01:31:19.090 --> 01:31:21.090
我們明天把主鍵講完了之後

01:31:21.090 --> 01:31:23.090
統一來做練習

01:31:23.090 --> 01:31:25.090
我把文件給它發下去

01:31:25.090 --> 01:31:31.220
明天見早點到

01:31:31.220 --> 01:31:34.220
我們明天爭取把主鍵就講完了

01:31:34.220 --> 01:31:46.720
這裏我們就要找他們的小爸爸了

01:31:46.720 --> 01:31:48.720
一定要去練一遍

01:31:48.720 --> 01:31:50.720
我跟你說我在線上

01:31:50.720 --> 01:31:52.720
我是監控不到裏面

01:31:52.720 --> 01:31:53.720
監控不到裏面的人

01:31:53.720 --> 01:31:54.720
我沒法管你們

01:31:54.720 --> 01:31:55.720
要簽下的話

01:31:55.720 --> 01:31:57.720
你不練我弄死你

