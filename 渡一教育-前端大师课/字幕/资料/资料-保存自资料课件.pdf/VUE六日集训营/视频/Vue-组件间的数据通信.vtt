WEBVTT

00:01.580 --> 00:02.580
来吧

00:03.900 --> 00:06.180
来 老师 久多麻呆

00:07.120 --> 00:08.460
怎么了 干嘛呢

00:08.780 --> 00:09.980
等一下要干嘛

00:12.500 --> 00:15.540
一会儿想找莫德卡表来的话

00:15.540 --> 00:18.700
等我上完课啊 等上完课再去表白

00:20.940 --> 00:23.940
咱们开始啊 这些那个腾讯课堂

00:23.940 --> 00:27.580
升级了之后呢 我现在的声音应该没什么问题了吧

00:27.700 --> 00:30.740
声音 昨天其实声音也没啥问题啊

00:30.740 --> 00:32.540
昨天下午上了这段点痛

00:32.740 --> 00:34.820
然后那些梳了个液 梳了个液

00:34.820 --> 00:36.700
完了过了 嗓子没有那么痛了

00:36.700 --> 00:38.860
但是呢 开始冒兴汗 有点发烧

00:39.420 --> 00:41.900
昨天晚上下了波之后 一直睡觉

00:41.900 --> 00:43.940
睡到今天早上 多少点了

00:44.740 --> 00:47.300
12点 12点左右点起来

00:48.020 --> 00:51.180
好像说14个小时啊 说14个小时左右

00:51.900 --> 00:53.500
现在好多了 现在好多了

00:53.500 --> 00:55.100
金色都好些了 对吧

00:55.700 --> 00:58.740
来吧 腾讯课堂上面这个真的是很麻烦

00:58.740 --> 01:01.180
它现在下面一个工具条 它死活弄不掉

01:01.860 --> 01:05.260
我一直怕点错了 点到下课了就完蛋了

01:06.740 --> 01:09.380
咱们昨天呢 讲到了什么 讲到组建了 对吧

01:10.020 --> 01:12.100
组建呢 我们计划的是花两天时间

01:12.100 --> 01:15.540
因为组建的话 又学习完 基本上无忧就没啥东西了

01:15.980 --> 01:17.780
所以我们今天讲完了过后呢

01:17.780 --> 01:20.500
无忧本身啊 就差不多了 就没啥东西了

01:21.020 --> 01:23.300
然后明天呢 我们是讲无忧的

01:23.300 --> 01:25.660
因为我们整个课程讲的是无忧全家统

01:26.980 --> 01:29.740
一个是还要还要包括无忧的路由

01:29.780 --> 01:31.740
还有包括无忧的数据管理

01:31.740 --> 01:35.460
那么我们明天就专门来讲无忧的路由和数据管理

01:35.460 --> 01:37.220
如果说明天讲不完就放到后天

01:37.220 --> 01:39.300
反正咱们六天把它搞定就完事了

01:41.020 --> 01:42.780
如果说明天讲完了过后呢

01:42.780 --> 01:46.660
我们后天就做一个项目 做一个完整的练习

01:46.660 --> 01:48.820
让大家体验一下整个的开发过程

01:48.820 --> 01:50.580
因为我发现很多教程里边呢

01:50.580 --> 01:52.020
它不太重视练习

01:52.020 --> 01:54.780
而反而呢 我觉得练习是非常非常重要的

01:54.780 --> 01:57.380
你看我的CSS课程 对吧

01:57.500 --> 02:00.820
里边我给大家提供了大量的练习

02:00.820 --> 02:01.980
声明周期肯定在讲啊

02:01.980 --> 02:03.940
组建人能跑得要声明周期吗

02:03.940 --> 02:04.740
肯定得讲啊

02:06.260 --> 02:09.060
所以说练习其实是非常非常重要的

02:09.060 --> 02:10.060
所以说我们的课程里面

02:10.060 --> 02:12.900
一看我们每天的课程里面都穿插了一个练习

02:12.900 --> 02:15.580
通过讲练习的把这个支持点学会

02:18.980 --> 02:20.780
也肯定要讲的 放心啊

02:20.780 --> 02:22.220
这些核心支持我们跑不了的

02:24.380 --> 02:26.620
来吧 这个啤酒炸鸡就是什么梗啊

02:27.420 --> 02:28.780
我最近都没有打刷抖音了

02:28.780 --> 02:29.940
你们在说啥我都不知道了

02:29.940 --> 02:31.860
我还停留在诸异单的时间里边

02:33.300 --> 02:33.900
好 来吧

02:33.900 --> 02:36.260
咱们昨天实现了一个效果的

02:36.260 --> 02:38.220
今天我们也要实现效果

02:38.220 --> 02:39.420
今天我们实现了效果了

02:39.420 --> 02:40.580
跟昨天差不多

02:40.580 --> 02:43.900
只不过在昨天的基础上加了一点点功能

02:43.900 --> 02:44.820
咱们来先看一下

02:44.820 --> 02:45.980
咱们今天实现了效果

02:48.540 --> 02:49.580
多了啥功能啊

02:49.580 --> 02:52.140
就多了一个夹寨中 对吧

02:52.140 --> 02:53.180
你看一下分页

02:53.180 --> 02:54.900
就多一个夹寨中 对吧

02:54.900 --> 02:56.380
要实现这么一个效果

02:56.380 --> 02:58.620
其实我们还得学习一些支持

02:58.620 --> 03:00.060
昨天我们没有这个功能

03:00.060 --> 03:00.820
昨天是没有的

03:00.820 --> 03:02.820
昨天就直接分页就完事了

03:02.820 --> 03:04.700
那么我们首先按照昨天来吧

03:04.700 --> 03:06.420
因为昨天毕竟没讲完

03:06.420 --> 03:07.380
东西太多了

03:07.380 --> 03:09.100
那么我们把昨天的先做完

03:09.100 --> 03:11.020
就是没有这个夹寨中的效果

03:11.020 --> 03:12.220
咱们把它写完

03:12.220 --> 03:13.500
那我们昨天做到哪了呢

03:14.780 --> 03:15.940
昨天做到哪了 回过一下

03:15.940 --> 03:18.060
咱们昨天就把这个结构写出来了

03:18.060 --> 03:19.540
把这个工程目录结构写出来了

03:19.540 --> 03:21.100
就写出这么一个玩意儿

03:21.100 --> 03:23.060
这就是我们目前写出来的玩意儿

03:23.060 --> 03:24.580
就写出这么一个玩意儿

03:24.620 --> 03:25.780
那么这是一别小看

03:25.780 --> 03:28.220
它虽然界面上没有什么东西

03:28.220 --> 03:31.180
但是这里面的结构我们写一写好了

03:31.180 --> 03:34.060
就是我们的这里的Index是启动文件

03:34.060 --> 03:37.780
它负责创建一个无忧实力 对吧

03:37.780 --> 03:40.140
然后它里边的本身不做任何的渲染

03:40.140 --> 03:41.340
不做任何的事情

03:41.340 --> 03:42.820
渲染的工作交给谁呢

03:42.820 --> 03:43.820
交给这个组件

03:43.820 --> 03:45.740
叫APP这个组件

03:45.740 --> 03:47.500
交给这个组件去完成

03:47.500 --> 03:48.500
那么这个组件里边

03:48.500 --> 03:49.780
它做了一些配置 对吧

03:49.780 --> 03:51.020
这个组件里边呢

03:51.020 --> 03:52.500
它要渲染整个页面

03:52.500 --> 03:53.260
渲染整个页面

03:53.260 --> 03:54.260
它分为两个部分

03:54.300 --> 03:55.500
一个是电影列表

03:55.500 --> 03:56.660
一个是分业

03:57.860 --> 03:59.180
因此这个组件呢

03:59.180 --> 04:01.180
它又用了另外两个组件

04:01.180 --> 04:02.660
Movie粒子和配件

04:02.660 --> 04:03.820
大家一定要下去做一次

04:03.820 --> 04:06.020
不让一点人印象都没有

04:06.020 --> 04:07.500
下面我们就看这个组件

04:07.500 --> 04:09.580
这个组件它里边又用到了Movie

04:09.580 --> 04:11.220
它里边要渲染很多个电影

04:11.220 --> 04:12.060
对吧

04:12.060 --> 04:14.500
这个组件就是一个分业组件

04:14.500 --> 04:15.820
咱们先来写啥呢

04:15.820 --> 04:19.020
先来写这个分业组件

04:19.020 --> 04:20.540
要把这个业码实现

04:20.540 --> 04:22.260
那么我们在写这个分业组件的时候

04:22.260 --> 04:24.860
就现在就在写这个东西的时候

04:24.860 --> 04:25.460
写这个区域

04:32.460 --> 04:34.460
下面写这个玩意儿的时候呢

04:34.460 --> 04:35.740
写这个东西的时候呢

04:35.740 --> 04:37.940
我们来就只看这个区域

04:37.940 --> 04:39.060
其他啥都不看

04:39.060 --> 04:41.340
这就是组件的开发方式

04:41.340 --> 04:42.540
就是我们把既然

04:42.540 --> 04:44.900
既然是组件要细分整个页面

04:44.900 --> 04:46.340
既然把它已经细分了

04:46.340 --> 04:47.780
你就不要去考虑其他的

04:47.780 --> 04:49.620
那如果你还考虑其他地方的话

04:49.660 --> 04:51.500
那也不叫细分区域了

04:51.500 --> 04:52.460
对吧

04:52.460 --> 04:54.460
所以说我们这里只考虑这个区域就行了

04:54.460 --> 04:56.780
看不见上面的电影

04:56.780 --> 04:57.900
那么这一块区域呢

04:57.900 --> 04:58.540
你想一想

04:58.540 --> 05:00.500
我们要实现这个区域

05:00.500 --> 05:03.060
是不是得到有一些数据啊

05:03.060 --> 05:04.180
什么数据呢

05:04.180 --> 05:06.140
比方说我们要做分业啊

05:06.140 --> 05:07.260
不知道大伙

05:08.460 --> 05:09.140
我看一下啊

05:09.140 --> 05:09.980
我统计一下

05:11.300 --> 05:11.900
统计一下啊

05:13.420 --> 05:14.540
怎么就像讨论这个问题啊

05:14.540 --> 05:15.700
我们来上课啊

05:15.700 --> 05:17.380
统计一下

05:17.380 --> 05:19.540
没有学过分业的同学

05:19.540 --> 05:20.940
求个求个一

05:23.380 --> 05:25.580
没有写过分业的同学

05:25.580 --> 05:26.140
求个一

05:26.140 --> 05:27.820
哇还有这么多啊

05:27.820 --> 05:29.820
我说我都说个分业这个东西

05:29.820 --> 05:30.460
应该学到现在

05:30.460 --> 05:33.020
应该差不多都写过都写过吧

05:33.020 --> 05:33.540
还有这么多

05:33.540 --> 05:34.300
啊来来来吧

05:34.300 --> 05:35.780
来吧给你们写一次啊

05:35.780 --> 05:37.420
你看我们不仅讲五六

05:37.420 --> 05:39.100
还可以讲到一些常见的效果

05:43.700 --> 05:43.940
对呀

05:43.940 --> 05:44.460
我故意的

05:46.220 --> 05:47.180
分业这里呢

05:47.180 --> 05:48.660
我们因为在组件里边呢

05:48.660 --> 05:50.420
要是要配置数据啊

05:50.420 --> 05:51.700
因为我们组件的配置呢

05:51.700 --> 05:52.380
跟我说过

05:52.380 --> 05:54.100
跟之前的这个地方的配置

05:54.100 --> 05:54.780
是不是一样

05:54.780 --> 05:55.460
那类似的

05:55.460 --> 05:55.860
对吧

05:55.860 --> 05:56.620
是类似的啊

05:56.620 --> 05:57.820
跟这里的配置

05:57.820 --> 06:00.340
所以说我们在组件里边写配置的时候

06:00.340 --> 06:02.940
那么可能它肯定有一些数据要管理

06:02.940 --> 06:04.540
然后我们这里没有任何数据

06:04.540 --> 06:06.300
那么组件里面能不能有数据呢

06:06.300 --> 06:07.540
当然可以有啊

06:07.540 --> 06:09.180
同样的在组件里边

06:09.180 --> 06:11.500
也可以有自己的数据啊

06:11.500 --> 06:12.060
配置在哪

06:12.060 --> 06:13.460
是配置在data里边

06:13.460 --> 06:13.740
对吧

06:13.740 --> 06:14.740
配置到data里边

06:14.740 --> 06:17.980
但是组件里边的数据配置

06:17.980 --> 06:20.660
跟我们在五六实力里边的配置

06:20.660 --> 06:22.980
是有区别的啊

06:22.980 --> 06:25.180
在组件里边配置这个

06:25.180 --> 06:28.020
就是配置这个东西啊

06:28.020 --> 06:29.660
在组件里面进一配置的时候

06:29.660 --> 06:33.540
跟在五六实力就在这啊

06:33.540 --> 06:36.140
跟在五六实力里边是有区别的

06:36.140 --> 06:36.900
什么区别呢

06:36.900 --> 06:38.020
我这给大家提个笔记

06:39.820 --> 06:40.140
好

06:40.140 --> 06:41.780
那么这里呢

06:41.780 --> 06:47.940
我们通常将组件中的数据啊

06:47.980 --> 06:52.420
组件中需要自身管理的数据啊

06:52.420 --> 06:53.500
换句话说什么

06:53.500 --> 06:56.740
就是组件配置中的data

06:57.860 --> 06:59.180
就这个东西啊

06:59.180 --> 07:04.020
组件配置里边的data叫做组件状态

07:04.020 --> 07:05.940
这种也就是我们平常用单词啊

07:05.940 --> 07:07.140
叫state啊

07:07.140 --> 07:10.620
叫做component state叫做组件状态

07:10.620 --> 07:11.620
其实这种交法呢

07:11.620 --> 07:12.980
是从react里边来的啊

07:12.980 --> 07:13.620
因为五六了

07:13.620 --> 07:16.060
本身他有很多地方都要模仿那个react

07:16.060 --> 07:17.700
只不过他做了很多改进

07:18.100 --> 07:19.940
那么这他叫做组件状态

07:21.460 --> 07:23.260
那个组件状态呢

07:23.260 --> 07:25.460
他有这么一个特点啊

07:25.460 --> 07:31.860
组件状态只能在组件内部使用啊

07:31.860 --> 07:36.820
外部原则上不可以使用

07:36.820 --> 07:37.900
外面能不能用呢

07:37.900 --> 07:39.140
其实他也能用啊

07:39.140 --> 07:40.620
外面实际上是能用的啊

07:40.620 --> 07:41.100
只不过了

07:41.100 --> 07:44.940
我们平时的开发中不会带外面去用这个东西啊

07:44.940 --> 07:47.060
他是属于组件内部的东西

07:47.100 --> 07:48.740
就是我自己管理我自己的

07:48.740 --> 07:51.460
跟你没有跟外面的使用者没有任何关系

07:51.460 --> 07:53.340
他叫做组件状态啊

07:53.340 --> 07:56.340
外面也可以通过一些手段来用

07:56.340 --> 07:58.180
用到这个就是得到这个数据啊

07:58.180 --> 07:58.580
只不过了

07:58.580 --> 08:00.460
我们通常不会去上做

08:00.460 --> 08:03.300
如果说你以后学了就是五六的原码分析

08:03.300 --> 08:05.340
就是深入到你叫五六的原理之后呢

08:05.340 --> 08:10.540
你会知道外面其实要用到用到这个组件里边东西

08:10.540 --> 08:11.380
其实也能用啊

08:11.380 --> 08:13.540
也能用啊

08:13.540 --> 08:14.740
应该有同学知道的啊

08:15.740 --> 08:17.900
还没有同学知道吗

08:17.900 --> 08:18.580
应该用什么

08:18.580 --> 08:19.940
应该用ref对吧

08:19.940 --> 08:20.900
应该用ref

08:20.900 --> 08:22.140
ref过后就可以用了

08:22.140 --> 08:23.140
就可以用这个数据了

08:24.540 --> 08:26.020
原则上是不可以使用啊

08:26.020 --> 08:27.060
原则上是不可以使用

08:27.060 --> 08:28.300
我们就当成不可以使用

08:28.300 --> 08:29.900
他是他内部的东西

08:29.900 --> 08:30.500
那么这里呢

08:30.500 --> 08:32.020
我们首先说一下这个配置啊

08:32.020 --> 08:33.420
这个data这个配置

08:33.420 --> 08:34.140
配置呢

08:34.140 --> 08:35.980
他跟那个外面的就是

08:35.980 --> 08:36.940
首先就这个啊

08:36.940 --> 08:37.580
这个点

08:37.580 --> 08:41.100
data在组件中的配置

08:41.140 --> 08:46.300
和在那个五六实例中的配置的区别

08:46.300 --> 08:47.220
缺在哪呢

08:47.220 --> 08:53.100
就是在组件中data必须是一个函数

08:53.100 --> 08:57.860
而五六实例中必须是一个对象

08:57.860 --> 08:59.300
就这个区别啊

08:59.300 --> 09:00.340
就这个区别

09:00.340 --> 09:03.180
在五六就是组件里边啊

09:03.180 --> 09:05.380
你这个data也不能是一个普通对象

09:05.380 --> 09:06.980
你不像不能像之前这样子写

09:06.980 --> 09:07.820
应该怎么写呢

09:07.820 --> 09:10.700
应该把它写成这么一个函数啊

09:10.700 --> 09:12.220
而这个函数呢

09:12.220 --> 09:14.780
返回的对象是它的数据

09:14.780 --> 09:16.860
这里是它的数据啊

09:16.860 --> 09:20.540
返回的结果是组件的状态

09:20.540 --> 09:22.460
也就是组件的data配置

09:22.460 --> 09:23.620
是这么个意思啊

09:23.620 --> 09:25.460
它不像在五六实例里边

09:25.460 --> 09:27.300
它是配置的直接配置成一个对象了

09:27.300 --> 09:27.540
对吧

09:27.540 --> 09:28.580
之前我们在五六实例里边

09:28.580 --> 09:30.900
是不是配置成一个对象

09:30.900 --> 09:31.700
对吧

09:31.700 --> 09:32.820
我们现在这种写法呢

09:32.820 --> 09:35.180
由于我们在五六实例里边

09:35.180 --> 09:36.420
不做任何配置

09:36.420 --> 09:37.700
因为我们只需要那个组件

09:37.700 --> 09:38.940
跟组件

09:38.940 --> 09:41.260
所以说这后边的东西全是组件了

09:41.260 --> 09:42.260
那么既然全是组件

09:42.260 --> 09:42.780
那么以后呢

09:42.780 --> 09:45.020
我们的data配置全是一个

09:45.020 --> 09:46.660
全是一个方法啊

09:46.660 --> 09:47.780
全是一个方法

09:47.780 --> 09:51.100
也就是一个函数而不是一个对象了

09:51.100 --> 09:52.540
那么有没有同学知道

09:52.540 --> 09:56.860
他为什么不是一个对象啊

09:56.860 --> 10:00.970
为什么不是一个对象啊

10:00.970 --> 10:02.930
为什么不是一个对象呢

10:02.930 --> 10:04.570
声音卡了吗

10:04.570 --> 10:05.970
卡了刷新一下页面啊

10:05.970 --> 10:06.690
刷新一下页面

10:06.690 --> 10:11.610
为什么不是一个对象呢

10:11.610 --> 10:14.370
因为组件它会重复使用的

10:14.370 --> 10:16.810
如果说你这里把配置成一个对象

10:16.810 --> 10:18.730
啊配置成一个对象

10:18.730 --> 10:19.770
比方说吧

10:19.770 --> 10:20.210
我们在这儿

10:20.210 --> 10:22.650
在母位里边啊

10:22.650 --> 10:23.410
在母位里边

10:23.410 --> 10:24.250
这个组件里边

10:24.250 --> 10:25.370
我们把它配置成一个对象

10:25.370 --> 10:26.450
啊一个对象

10:26.450 --> 10:28.170
如果你这样做了

10:28.170 --> 10:29.610
那么将来呢

10:29.610 --> 10:32.250
使用这个母位组件的人

10:32.250 --> 10:33.130
比方说这个组件

10:33.130 --> 10:35.130
这个组件是不是在使用母位组件啊

10:35.130 --> 10:36.450
是不是在使用母位组件

10:36.730 --> 10:38.250
那么他在使用母位组件的时候

10:38.250 --> 10:40.250
他是不是有可能使用多个

10:40.250 --> 10:41.770
使用多个母位组件

10:41.770 --> 10:43.210
还有可能别的组件

10:43.210 --> 10:45.690
也会使用到母位组件

10:45.690 --> 10:46.690
那么这样一来的话

10:46.690 --> 10:48.010
你配置成对象的话

10:48.010 --> 10:50.730
那么所有的组件是不是共享一个对象了

10:50.730 --> 10:52.450
那么其中一个组件变了

10:52.450 --> 10:54.410
另一个组件是不是也会跟着变

10:54.410 --> 10:55.450
这不是不

10:55.450 --> 10:57.290
这是唯有不希望看到的

10:57.290 --> 10:59.250
他认为每一个组件呢

10:59.250 --> 11:01.250
他是相互独立的

11:01.250 --> 11:03.530
比方说你这里虽然写了很多的母位

11:03.530 --> 11:05.250
那么你每一个母位的数据呢

11:05.290 --> 11:06.530
是相互独立的

11:06.530 --> 11:07.450
你这是一个电影

11:07.450 --> 11:08.130
这是一个电影

11:08.130 --> 11:08.770
这是一个电影

11:08.770 --> 11:10.650
他们之间应该互不干扰

11:10.650 --> 11:11.210
所以说呢

11:11.210 --> 11:12.890
如果说你把它配置成对象

11:12.890 --> 11:16.170
他会导致他们共享一个对象的地址

11:16.170 --> 11:17.010
会导致共享

11:17.010 --> 11:19.450
那么为什么无忧实力他就不需要呢

11:19.450 --> 11:20.850
就直接配对象就可以了

11:20.850 --> 11:23.370
因为无忧实力是不是只有一个

11:23.370 --> 11:25.170
以无忧实力点元能传多个配置吗

11:25.170 --> 11:26.610
是不是只能传一个配置

11:26.610 --> 11:29.370
而且一个无忧实力就对应到一面的一个区域

11:29.370 --> 11:30.970
所以无忧实力他只有一个

11:30.970 --> 11:32.890
你可以写当个对象

11:32.930 --> 11:33.570
但是呢

11:33.570 --> 11:35.610
你在组建里面不能这样子写

11:35.610 --> 11:38.210
这就是为什么组建需要函数的原因

11:38.210 --> 11:40.210
当你把它写成函数之后

11:40.210 --> 11:41.770
每一次用这个组建

11:41.770 --> 11:42.650
每用一次

11:42.650 --> 11:44.090
他就会调用一次这个函数

11:44.090 --> 11:46.090
得到他的组建数据

11:46.090 --> 11:46.810
就这么个意思

11:50.090 --> 11:50.930
那么现在呢

11:50.930 --> 11:52.090
我们在这里边写啊

11:52.090 --> 11:53.130
我们来分析一下

11:53.130 --> 11:56.970
这个分业组建里边需要哪些状态呢

11:56.970 --> 11:59.970
需要管理哪些状态的分业组建里边

11:59.970 --> 12:01.570
有个东西没有写过分业

12:01.570 --> 12:02.530
那么我们这里说一下

12:02.530 --> 12:03.810
给大家说一下

12:03.810 --> 12:05.170
一个分业组建里边

12:05.170 --> 12:07.370
就是个分业要实现那个分业功能

12:07.370 --> 12:09.490
不要看上面跟上面没关系

12:09.490 --> 12:10.130
不要看上面

12:10.130 --> 12:11.050
一会我们做完了之后

12:11.050 --> 12:13.490
你就知道跟前两个一点关系都没有

12:13.490 --> 12:15.130
那么这一块呢

12:15.130 --> 12:16.010
这一块呢

12:16.010 --> 12:16.970
就是我们的分业

12:16.970 --> 12:19.010
他跟前面的数据没有任何关系

12:19.010 --> 12:20.690
你要实现分业

12:20.690 --> 12:23.850
你是不是得告诉他当前的业吗

12:23.850 --> 12:25.570
是不是要知道当前的业吗

12:25.570 --> 12:27.410
是不是要知道总业数

12:29.330 --> 12:29.970
对不对

12:29.970 --> 12:31.770
那么这两个东西是不要得到

12:31.770 --> 12:32.810
一个是当前业吗

12:32.810 --> 12:34.610
我们用corrent

12:34.610 --> 12:35.810
用corrent

12:35.810 --> 12:37.690
表示当前业吗

12:37.690 --> 12:38.730
一个是总业数

12:38.730 --> 12:41.170
我们用偷偷表示总业数

12:41.170 --> 12:43.130
是不是要知道这两个数据

12:43.130 --> 12:44.290
总业

12:44.290 --> 12:45.650
我们用配级number

12:45.650 --> 12:46.770
配级number

12:46.770 --> 12:48.250
表示总业数

12:48.250 --> 12:49.090
总业数

12:49.090 --> 12:50.370
其实总业数的话

12:50.370 --> 12:54.370
可以通过一个更加精细的数据来计算

12:54.370 --> 12:55.170
什么数据呢

12:55.170 --> 12:55.770
一个就是

12:56.970 --> 12:59.090
每业显示多少条

12:59.130 --> 13:00.290
叫做业容量

13:01.650 --> 13:02.370
业容量

13:03.370 --> 13:08.530
就是每业显示多少条数据

13:08.530 --> 13:09.770
每业显示多少条数据

13:09.770 --> 13:10.770
一个呢就是偷偷

13:11.770 --> 13:13.850
表示数据总量

13:15.090 --> 13:17.410
总共有多少条数据

13:18.730 --> 13:20.570
我们足够知道这两个东西

13:20.570 --> 13:22.010
总业数可以算出来了

13:22.010 --> 13:23.890
比方说一共有一百条数据

13:23.890 --> 13:25.450
每业显示十条

13:25.450 --> 13:26.530
是不是一共有十业

13:26.530 --> 13:26.810
对吧

13:26.810 --> 13:28.330
一百除一十嘛

13:28.370 --> 13:30.050
所以说我们只需要知道这三个东西

13:30.050 --> 13:30.930
这就可以做了

13:30.930 --> 13:31.170
好

13:31.170 --> 13:32.130
来吧

13:32.130 --> 13:32.610
我们来写

13:33.890 --> 13:34.650
我们在data里面

13:34.650 --> 13:35.410
是不是可以这样子写

13:35.410 --> 13:36.290
反回来是什么呢

13:36.290 --> 13:37.770
反回来是current

13:37.770 --> 13:39.330
当前页嘛

13:39.330 --> 13:40.250
当前页嘛

13:40.250 --> 13:40.890
当前页嘛

13:40.890 --> 13:41.690
我们这里几呢

13:41.690 --> 13:42.650
就一

13:42.650 --> 13:44.130
一开始就第一页嘛

13:44.130 --> 13:44.890
然后呢

13:44.890 --> 13:45.730
在设置什么呢

13:45.730 --> 13:46.490
设置data

13:48.370 --> 13:51.530
设置那个偷偷总的数据量

13:51.530 --> 13:52.770
一共有多少条数据

13:52.770 --> 13:54.890
比方说我们这里下写一个吧

13:54.890 --> 13:58.250
一百吧

13:58.250 --> 13:59.090
一百

13:59.090 --> 13:59.250
好

13:59.250 --> 14:01.410
那么再来一个配几size

14:01.410 --> 14:02.490
每页显示二条

14:02.490 --> 14:05.010
我们这里是当前页嘛

14:05.010 --> 14:08.650
这是总数据量

14:08.650 --> 14:09.130
这个呢

14:09.130 --> 14:11.530
是页容量

14:11.530 --> 14:12.810
每页显示二条

14:14.730 --> 14:15.970
这是我们的数据

14:15.970 --> 14:17.130
是不是写好了

14:17.130 --> 14:19.050
那么这个东西通过

14:19.050 --> 14:19.730
我们现在知道了

14:19.730 --> 14:21.530
总数据量和页容量

14:21.530 --> 14:24.130
是不是就可以算出来总页数啊

14:24.170 --> 14:25.650
总页数我们一定是需要的

14:25.650 --> 14:27.890
你看一下这里是不是要显示总页数

14:27.890 --> 14:28.850
是一定需要

14:28.850 --> 14:31.890
那么我们是不是可以算出总页数啊

14:31.890 --> 14:33.130
那么怎么来算呢

14:33.130 --> 14:36.490
是不是就是总数据量除以页容量

14:36.490 --> 14:37.610
是不是可以算出来

14:37.610 --> 14:38.210
对不对

14:38.210 --> 14:41.010
总数据量除以这个页容量

14:41.010 --> 14:43.250
就可以把这个总页数算出来

14:43.250 --> 14:46.010
那么我们问题是总页数写哪呢

14:48.010 --> 14:49.650
写这吗

14:49.650 --> 14:51.170
这是总页数

14:51.170 --> 14:52.090
那这里写啥呢

14:52.090 --> 14:53.010
你不能写个实啊

14:53.050 --> 14:54.210
你这样子写肯定不好

14:54.210 --> 14:55.930
因为如果将来有一天

14:55.930 --> 14:56.970
因为这是数据啊

14:56.970 --> 14:58.490
这些数都是有响应似的

14:58.490 --> 14:59.410
也就是说这些数据呢

14:59.410 --> 15:00.810
他有可能会变化

15:00.810 --> 15:02.490
那么将来有一天这个变成120

15:02.490 --> 15:04.850
是不是在这个东西也得跟着变啊

15:04.850 --> 15:06.130
不是很好对吧

15:06.130 --> 15:07.450
你这样子写不是很好

15:07.450 --> 15:08.650
因为这两个变化

15:08.650 --> 15:09.610
他没有反映出

15:09.610 --> 15:11.210
这个东西也会跟着变化

15:11.210 --> 15:11.890
是吧

15:11.890 --> 15:13.170
是不是没有反映出来

15:13.170 --> 15:13.330
哎

15:13.330 --> 15:15.970
我说到这有没有同学想起什么

15:15.970 --> 15:16.250
对吧

15:16.250 --> 15:17.450
也不错不错啊

15:17.450 --> 15:18.490
有同学想起来了

15:18.490 --> 15:20.450
应该用什么用计算属性

15:20.450 --> 15:22.730
就跟我们之前那个全民一样

15:22.970 --> 15:24.290
应该用计算属性

15:24.290 --> 15:25.370
computing的

15:25.370 --> 15:26.810
在组建里面

15:26.810 --> 15:28.170
是不是也可以配置计算属性

15:28.170 --> 15:29.050
没问题的啊

15:29.050 --> 15:30.210
直接配置就完事了

15:30.210 --> 15:32.850
那么我们在这里配置一个配级 number

15:32.850 --> 15:34.970
就表示的是总页数

15:34.970 --> 15:35.370
来

15:36.930 --> 15:38.530
这里能不能加参数

15:38.530 --> 15:39.210
需不需要

15:39.210 --> 15:40.210
能不能加参数这里

15:41.770 --> 15:42.610
能不能加参数

15:43.930 --> 15:44.770
我上一课说到的

15:46.010 --> 15:46.970
说不能对吧

15:46.970 --> 15:48.010
不能啊

15:48.010 --> 15:48.770
不可以的啊

15:48.770 --> 15:49.930
不可以啊

15:49.930 --> 15:51.050
加参数能不能加

15:51.050 --> 15:51.850
他倒是不会爆出

15:52.010 --> 15:53.130
加参数没意义啊

15:53.130 --> 15:54.330
又没有任何东西传过来

15:54.330 --> 15:54.770
对不对

15:54.770 --> 15:57.210
因为他会把它当成属性来使用

15:57.210 --> 15:59.050
读这个属性的时候

15:59.050 --> 16:00.170
他直接读了

16:00.170 --> 16:01.530
他不会有任何参数

16:01.530 --> 16:03.250
所以我们这里总页数怎么算呢

16:03.250 --> 16:06.010
是不是来自于Z点偷偷

16:06.010 --> 16:08.490
除以什么Z点配级算

16:08.490 --> 16:08.650
对吧

16:08.650 --> 16:09.930
这就是总页数

16:09.930 --> 16:10.970
总页数

16:10.970 --> 16:12.890
那么这个总页数的话

16:12.890 --> 16:13.370
当然了

16:13.370 --> 16:14.490
还有可能算出来是小数

16:14.490 --> 16:16.490
比方说这里121

16:16.490 --> 16:17.570
本来是12页的

16:17.570 --> 16:19.410
是不是12页多一点点

16:19.410 --> 16:20.650
12点几

16:20.730 --> 16:21.130
对吧

16:21.130 --> 16:22.330
12点几

16:22.330 --> 16:23.570
那么12点几

16:23.570 --> 16:25.050
是不是就是13页

16:25.050 --> 16:26.170
因此这个如果说

16:26.170 --> 16:27.290
除出来有小数的话

16:27.290 --> 16:28.290
我们用什么呢

16:28.290 --> 16:29.450
Mass sale

16:29.450 --> 16:29.770
对吧

16:29.770 --> 16:30.930
天花版函数

16:30.930 --> 16:34.170
把它转换成一个向上取整的整数

16:34.170 --> 16:35.250
如果说你上周听了

16:35.250 --> 16:38.370
我这个对你的公开直播课的话

16:38.370 --> 16:40.330
那么你这一课就理解得更深刻了

16:40.330 --> 16:41.570
现在我们用5又写一遍

16:41.570 --> 16:42.370
你会知道

16:42.370 --> 16:43.530
这个东西写出来过后

16:43.530 --> 16:44.850
可能变得更加简洁了

16:44.850 --> 16:46.010
更加容易理解了

16:46.010 --> 16:47.130
而且全部是分开的

16:47.130 --> 16:49.530
介面和数据全部分开了

16:49.530 --> 16:49.690
好

16:49.690 --> 16:51.290
那么现在就得到这么一个属性了

16:51.290 --> 16:52.530
计算属性

16:52.530 --> 16:52.690
好

16:52.690 --> 16:55.010
比方说我们这里分页这里要显示什么呢

16:55.010 --> 16:56.410
我们把这个复制一下啊

16:56.410 --> 16:59.010
我们把这个区域右键检查

16:59.010 --> 17:01.650
找到这个区域DIVID微pager

17:01.650 --> 17:03.850
右键copy

17:03.850 --> 17:05.410
这里复制一个

17:06.970 --> 17:07.690
我们拿过来

17:09.290 --> 17:10.170
拿过来啊

17:10.170 --> 17:11.010
把复制过来啊

17:11.010 --> 17:11.450
复制过来

17:12.610 --> 17:14.050
稍微稍微稍微换一下

17:14.050 --> 17:14.890
好吗

17:14.890 --> 17:15.330
就在这儿啊

17:17.170 --> 17:18.610
这里是我们把一个样式

17:19.090 --> 17:21.330
内样式在一个东西直接复制过来

17:21.330 --> 17:21.850
复制过来

17:21.850 --> 17:22.570
不管它

17:22.570 --> 17:23.970
因为我们样式已经写好了

17:23.970 --> 17:25.050
样式不是我们的重点

17:25.050 --> 17:26.610
样式已经加进去了

17:26.610 --> 17:27.490
不管它

17:27.490 --> 17:27.930
那么现在呢

17:27.930 --> 17:30.930
我们当前页码是不是要显示到这儿

17:30.930 --> 17:31.210
对吧

17:31.210 --> 17:33.090
当前页码是不是要显示到这儿

17:33.090 --> 17:33.410
好

17:33.410 --> 17:35.090
那么我们这里是不是可以写写入

17:35.090 --> 17:36.530
那个微物的差值

17:36.530 --> 17:38.330
每次写这东西特别特别舒服

17:38.330 --> 17:40.090
在这里写上corrent

17:40.090 --> 17:40.450
然后呢

17:40.450 --> 17:42.090
总页数是不是写到这儿

17:42.090 --> 17:43.730
是不是在这里写上差值

17:43.730 --> 17:44.530
page number

17:44.530 --> 17:44.810
对吧

17:44.810 --> 17:46.170
读取计算属性

17:46.170 --> 17:47.090
而且这个计算属性

17:47.090 --> 17:49.810
它有一奈向就是总数和夜总量

17:49.810 --> 17:50.610
只要说两个东西

17:50.610 --> 17:51.650
任何一个东西一变

17:51.650 --> 17:53.170
它马上重新计算

17:53.170 --> 17:53.810
重新选择

17:53.810 --> 17:54.890
重新计算

17:54.890 --> 17:56.010
那么现在是不是出来了

17:56.010 --> 17:56.370
对吧

17:56.370 --> 17:58.170
来导致看一下啊

17:58.170 --> 17:59.410
看一下

17:59.410 --> 18:00.130
这边

18:00.130 --> 18:02.480
对

18:02.480 --> 18:03.520
这边报个错啊

18:03.520 --> 18:04.080
看一下

18:04.080 --> 18:06.280
data is not defend

18:06.280 --> 18:07.640
呃在哪呢

18:07.640 --> 18:09.360
哎呀

18:09.360 --> 18:11.320
呃我这写到哪去了啊

18:11.320 --> 18:12.320
写到单个电影

18:12.320 --> 18:13.840
单个电影这里啊

18:13.840 --> 18:17.160
我这里先把data干去掉啊

18:17.160 --> 18:17.520
好

18:17.520 --> 18:18.040
那么你看

18:18.040 --> 18:19.360
现在一码分页是不是出来了

18:19.360 --> 18:19.920
对吧

18:19.920 --> 18:21.000
我们先不看前面的啊

18:21.000 --> 18:22.160
前面的肯定有问题

18:22.160 --> 18:23.920
我们看这里是不是出来了

18:23.920 --> 18:26.560
当前是第一页一共一四十三页

18:26.560 --> 18:26.920
对吧

18:26.920 --> 18:28.120
是不是出来了

18:28.120 --> 18:28.560
哎

18:28.560 --> 18:29.600
那咱们如果说

18:29.600 --> 18:31.080
把这个地方改一下

18:31.080 --> 18:31.360
哎

18:31.360 --> 18:33.720
咱们把这个pager里边这个地方

18:33.720 --> 18:37.280
总数据量改成99

18:37.280 --> 18:37.960
一共多少页

18:37.960 --> 18:39.000
是不是99几页

18:39.000 --> 18:41.440
9点几页是不是10页保存啊

18:41.440 --> 18:42.720
你看是不是显示10页

18:42.720 --> 18:43.120
对吧

18:43.120 --> 18:44.680
这可以正常显示的啊

18:44.680 --> 18:45.280
就这一块

18:45.280 --> 18:47.920
这块就其实就就已经做完了

18:47.960 --> 18:48.120
好

18:48.120 --> 18:48.800
那么现在接下来

18:48.800 --> 18:50.440
那么来做前边的

18:50.440 --> 18:51.600
前边的有什么呢

18:51.600 --> 18:52.400
这个id就去了

18:52.400 --> 18:52.520
啊

18:52.520 --> 18:54.360
这个id没啥用

18:54.360 --> 18:54.560
好

18:54.560 --> 18:56.000
前边的就是一个

18:56.000 --> 18:57.640
首先是首页啊

18:57.640 --> 18:58.560
首页和上页

18:58.560 --> 19:00.400
咱们先搞定首页和上页

19:00.400 --> 19:02.160
首页和上页是这么一个情况啊

19:02.160 --> 19:03.520
就是一个A元数啊

19:03.520 --> 19:04.960
就是这么一个A元数

19:04.960 --> 19:06.200
这个A元数里边呢

19:06.200 --> 19:07.840
有一个样式叫pager item啊

19:07.840 --> 19:08.560
这是固定的

19:08.560 --> 19:09.800
直接显上去完事了

19:09.800 --> 19:11.960
那么另外一个样式叫disable的

19:11.960 --> 19:12.800
这什么样式呢

19:12.800 --> 19:14.520
就说如果你不加这个样式啊

19:14.520 --> 19:16.000
如果说你不加这个样式

19:16.000 --> 19:17.000
那么它就是一个正常的

19:17.040 --> 19:17.720
就这种

19:17.720 --> 19:18.280
看没

19:18.280 --> 19:19.560
就这种样式

19:19.560 --> 19:21.360
如果说你加这个样式

19:21.360 --> 19:23.200
那么它就变成一个禁用的样式啊

19:23.200 --> 19:25.040
仅仅是控制样式的啊

19:25.040 --> 19:26.640
仅仅是用于控制样式

19:26.640 --> 19:28.120
没有任何其他任何功能

19:28.120 --> 19:29.800
功能啥都没有

19:29.800 --> 19:29.920
好

19:29.920 --> 19:31.080
那么这是首页

19:31.080 --> 19:31.280
好

19:31.280 --> 19:32.880
现在我们遇到第一个问题

19:32.880 --> 19:33.920
第一个问题是什么呢

19:33.920 --> 19:37.160
到底这里要不要加这个disable的

19:37.160 --> 19:39.480
你想想这个逻辑啊

19:39.480 --> 19:42.680
什么情况下要加上这个disable的

19:42.680 --> 19:45.160
什么情况下不加这个disable的

19:45.160 --> 19:46.920
这逻辑是什么

19:46.920 --> 19:50.200
就是这个禁用样式什么时候要加

19:50.200 --> 19:51.920
什么时候要加呢

19:51.920 --> 19:55.240
是不是只有当前是第一页的时候

19:55.240 --> 19:56.880
就要加上这个禁用样式

19:56.880 --> 19:57.480
对吧

19:57.480 --> 19:59.600
当前是第一页就要加上这个禁用样式

19:59.600 --> 19:59.760
好

19:59.760 --> 20:01.160
那么怎么来处理这个问题呢

20:01.160 --> 20:02.520
在5u里边

20:02.520 --> 20:02.720
好

20:02.720 --> 20:04.520
5u里边它支持这样的写法

20:04.520 --> 20:05.920
就是说你给它一个内样式

20:05.920 --> 20:06.760
没有任何问题

20:06.760 --> 20:09.480
这是你静态静态的代码写死的

20:09.480 --> 20:10.040
对吧

20:10.040 --> 20:12.400
那如果说你还有一个内样式

20:12.400 --> 20:13.800
不确定要不要加上

20:13.800 --> 20:15.520
有可能用上那个内样式

20:15.520 --> 20:17.120
有可能不用这个内样式

20:17.120 --> 20:18.120
怎么办呢

20:18.120 --> 20:20.000
你写属性绑定

20:21.120 --> 20:23.520
你看我们现在重复写的两个class属性

20:23.520 --> 20:25.320
可不可以在5u里边是可以的

20:25.320 --> 20:26.880
是没问题的

20:26.880 --> 20:29.240
5u里边它知道你这里的

20:29.240 --> 20:30.480
虽然写的两class

20:30.480 --> 20:33.920
但是其中一个class是要通过绑定的

20:33.920 --> 20:36.320
是要绑定一个界是表达式的

20:36.320 --> 20:37.800
是要进行绑定的

20:37.800 --> 20:43.320
那么它会把绑定的结果追加到之前的class里边

20:43.320 --> 20:44.200
它会进行追加

20:45.200 --> 20:46.440
是这么个意思

20:46.440 --> 20:48.160
那么这个class里边写啥呢

20:48.160 --> 20:51.080
比方说我们这里就直接静态写死abc

20:53.080 --> 20:54.800
这里有两种写法

20:54.800 --> 20:55.640
主要有两种写法

20:56.640 --> 20:57.880
那么现在写了个abc

20:59.880 --> 21:01.160
我们这里不能直接写abc

21:01.160 --> 21:02.640
abc要爆错了

21:02.640 --> 21:03.440
为什么要爆错

21:03.440 --> 21:05.280
因为它认为这里是GS代码

21:05.280 --> 21:07.880
GS代码你在读abc这个变量

21:07.880 --> 21:08.120
对吧

21:08.120 --> 21:08.760
没有这个变量

21:08.760 --> 21:09.440
它就爆错了

21:09.440 --> 21:11.840
它爆的错是abc is not defend

21:11.840 --> 21:13.240
abc不存在

21:13.280 --> 21:14.480
它认为你在读变量

21:14.480 --> 21:15.680
那我们现在我们要写的话

21:15.680 --> 21:17.680
应该写个制服串abc对吧

21:17.680 --> 21:18.520
用单引号

21:18.520 --> 21:21.320
表示这是一个制服串abc

21:21.320 --> 21:22.520
保存

21:22.520 --> 21:23.320
你看一下

21:23.320 --> 21:25.400
那么现在的内央式里边

21:25.400 --> 21:27.120
是不是多了一个abc的

21:27.120 --> 21:30.000
所以它最终会把它合并到一个内央式里边

21:30.000 --> 21:31.240
这是我们静态写的

21:31.240 --> 21:33.720
这是我们通过绑定属性写的

21:33.720 --> 21:34.960
用vband

21:34.960 --> 21:36.680
只不过减弃可以减弃成冒号

21:38.160 --> 21:38.960
这是这种写法

21:38.960 --> 21:40.280
那么有知道这种写法的话

21:40.280 --> 21:41.160
你可以怎么说

21:41.200 --> 21:42.040
是不是用corrent

21:42.040 --> 21:43.480
用三目运算服

21:43.480 --> 21:44.440
corrent

21:44.440 --> 21:45.600
如果等于一

21:45.600 --> 21:47.440
当前一把如果等于一

21:47.440 --> 21:48.640
是不是我加上一个样式

21:48.640 --> 21:50.240
叫disabled

21:50.240 --> 21:51.320
否则的话就不加

21:51.320 --> 21:52.240
对吧

21:52.240 --> 21:54.280
当前如果说等于第一页

21:54.280 --> 21:55.440
那么我就加上这个样式

21:55.440 --> 21:56.600
否则的话就不加

21:56.600 --> 21:57.080
保存

21:57.080 --> 21:58.040
你看一下

21:58.040 --> 21:59.240
当前第一页是不是加上了

21:59.240 --> 22:00.240
这个样式

22:00.240 --> 22:01.440
如果说你不是第一页

22:01.440 --> 22:03.000
比较当前是第三页

22:03.000 --> 22:04.120
以保存

22:04.120 --> 22:04.840
当前是第三页

22:04.840 --> 22:06.120
是不是就没有加上

22:06.120 --> 22:06.520
对吧

22:06.520 --> 22:08.280
这样子可以用个三目运算服来判断

22:09.480 --> 22:10.640
都是这种写法

22:10.640 --> 22:12.920
其实他还支持一种写法

22:12.920 --> 22:13.920
这里的那样式

22:13.920 --> 22:15.120
这里还支持一种写法

22:15.120 --> 22:16.520
什么写法呢

22:16.520 --> 22:18.040
就是你写个对象

22:18.040 --> 22:19.280
这里是介石代码

22:19.280 --> 22:20.400
当然你可以写个对象

22:20.400 --> 22:21.640
对吧

22:21.640 --> 22:23.040
对象也是个表达是吗

22:23.040 --> 22:24.920
对象里边

22:24.920 --> 22:29.760
用那样式的名称作为属性名

22:29.760 --> 22:31.080
比方说我要加什么样式

22:31.080 --> 22:32.840
我要加disabled这个样式

22:32.840 --> 22:33.400
对吧

22:33.400 --> 22:37.280
那么我把它作为对象的属性名

22:37.280 --> 22:39.400
那么到底要不要加呢

22:39.440 --> 22:43.000
后边写写的是一个布尔类型的表达式

22:44.240 --> 22:45.200
如果后边写的是

22:45.200 --> 22:45.960
true

22:45.960 --> 22:48.680
那么表示我要加上这个那样式

22:48.680 --> 22:49.960
后边是false

22:49.960 --> 22:52.600
表示不会加上这个那样式

22:52.600 --> 22:52.800
对吧

22:52.800 --> 22:54.440
这是这种写法

22:54.440 --> 22:56.560
那么这种写法的好处在于

22:56.560 --> 23:00.160
它可以很方便的来控制多个那样式

23:00.160 --> 23:02.040
比方说这里还有别的那样式

23:02.040 --> 23:04.360
别的那样式也要经过判断

23:04.360 --> 23:06.280
到底要不要加上这个那样式

23:06.280 --> 23:07.840
这个那样式和这个那样式

23:07.840 --> 23:08.840
这个那样式要不要加

23:08.880 --> 23:09.880
这个那样式要不要加

23:09.880 --> 23:10.280
对吧

23:10.280 --> 23:12.640
它可以写多个那样式来进行判断

23:12.640 --> 23:14.000
那么由于我们这里

23:14.000 --> 23:14.680
只有一个

23:14.680 --> 23:16.160
只写一个就行了

23:16.160 --> 23:16.360
好

23:16.360 --> 23:19.120
那么这里我们的那样式叫做disabled

23:19.120 --> 23:20.640
要不要加呢

23:20.640 --> 23:21.200
要不要加

23:21.200 --> 23:23.320
是不是取决于current

23:23.320 --> 23:25.240
是不是等于

23:25.240 --> 23:26.440
是不是等于1

23:26.440 --> 23:27.840
对吧

23:27.840 --> 23:30.120
如果说等于1的话就加上

23:30.120 --> 23:32.360
不等于1的话就不加

23:32.360 --> 23:33.280
这是不是个布尔

23:33.280 --> 23:34.000
要么就为true

23:34.000 --> 23:34.840
要么为false

23:34.840 --> 23:35.280
对不对

23:35.280 --> 23:36.240
保存

23:36.240 --> 23:37.200
你看一下现在没加

23:37.200 --> 23:37.520
对吧

23:37.520 --> 23:38.080
现在没加

23:38.080 --> 23:39.920
因为是我们目前是第三页

23:39.920 --> 23:41.520
把它写成第1页

23:41.520 --> 23:42.720
在这

23:42.720 --> 23:44.360
在这

23:44.360 --> 23:45.760
把它写成第1页

23:45.760 --> 23:46.800
保存

23:46.800 --> 23:48.400
你看是不是加上了

23:48.400 --> 23:48.560
对吧

23:48.560 --> 23:49.280
就这么简单

23:49.280 --> 23:50.600
就这么简单

23:50.600 --> 23:50.880
好

23:50.880 --> 23:51.880
然后我们这里

23:51.880 --> 23:52.960
这东西是不是写完了

23:52.960 --> 23:53.920
没问题吧

23:55.840 --> 23:56.560
就完了

23:56.560 --> 23:56.720
好

23:56.720 --> 23:57.160
那么这里呢

23:57.160 --> 23:58.000
我复制一下

23:58.000 --> 23:58.560
复制一下

23:58.560 --> 24:00.480
那么上一页是不是一样的道理

24:00.480 --> 24:01.360
上一页

24:01.360 --> 24:02.640
上一页什么时候要加

24:02.640 --> 24:05.040
上一页是不是也是一样

24:05.040 --> 24:07.080
第1页的时候加上

24:07.120 --> 24:08.120
上一

24:08.120 --> 24:08.480
好

24:08.480 --> 24:09.640
接下来我们继续

24:09.640 --> 24:12.120
那么上一页写完了过后

24:12.120 --> 24:13.200
首页上一页写完过后

24:13.200 --> 24:16.000
我们再写下一页和尾页

24:16.000 --> 24:16.960
我们把前面的

24:16.960 --> 24:17.960
刚才是删掉了

24:17.960 --> 24:19.880
静态的东西删掉了

24:19.880 --> 24:22.640
那么这里是下一页

24:22.640 --> 24:24.080
下一页和什么

24:24.080 --> 24:25.440
和尾页

24:25.440 --> 24:26.560
和尾页

24:26.560 --> 24:28.440
要么尾页在后边

24:28.440 --> 24:29.840
就是下一页

24:31.760 --> 24:32.920
那么下一页的话

24:32.920 --> 24:34.480
它也要加上这个那样式

24:34.480 --> 24:36.320
什么时候加呢

24:36.400 --> 24:39.120
什么时候下一页要加上这个金融样式

24:39.120 --> 24:40.560
是不是到最后一页的时候

24:40.560 --> 24:41.920
就没有下一页了

24:41.920 --> 24:43.680
所以说下一页什么时候加

24:43.680 --> 24:44.960
应该是当前一页

24:44.960 --> 24:45.600
等于什么

24:45.600 --> 24:47.040
等于计算属性

24:47.040 --> 24:48.120
配几number

24:48.120 --> 24:48.960
我们在用的时候

24:48.960 --> 24:51.680
都不用管它是不是计算属性

24:51.680 --> 24:52.640
所以这样子加

24:52.640 --> 24:53.920
这样的判定

24:53.920 --> 24:54.880
就一下就写出来了

24:54.880 --> 24:56.400
你会发现非常非常的方便

24:56.400 --> 24:59.120
以前我们要写什么动物元素生成

24:59.120 --> 25:00.680
得写很多很多的代码

25:00.680 --> 25:01.720
你要自己去判断

25:01.720 --> 25:02.760
一副l是判断

25:02.760 --> 25:03.400
现在需要吗

25:03.400 --> 25:05.160
不需要了

25:05.160 --> 25:05.840
非常轻

25:05.880 --> 25:06.680
非常简洁

25:06.680 --> 25:07.960
而且写出来的代码

25:07.960 --> 25:09.040
非常容易阅读

25:09.040 --> 25:09.760
然后就写出来了

25:11.640 --> 25:11.960
好了

25:11.960 --> 25:13.800
接下来是点击事件

25:13.800 --> 25:14.840
点击事件

25:14.840 --> 25:16.560
点击过后要翻页

25:16.560 --> 25:17.760
首先我告诉大家

25:17.760 --> 25:18.480
这里有个问题

25:19.760 --> 25:21.120
我们这里要注册事件

25:21.120 --> 25:21.760
要注册事件

25:21.760 --> 25:23.520
我给大家说什么问题

25:23.520 --> 25:25.440
首先我们这里要注册一个点击事件

25:25.440 --> 25:26.040
unclick

25:27.680 --> 25:28.680
click

25:28.680 --> 25:29.560
一个事件

25:29.560 --> 25:31.120
这个事件我们要去调用一个函数

25:31.120 --> 25:32.600
我们把它统一显成一个函数

25:33.720 --> 25:35.120
统一显成一个函数

25:35.120 --> 25:35.840
message

25:37.000 --> 25:39.080
叫做名字叫做Change Page

25:40.920 --> 25:41.600
New Page

25:42.360 --> 25:43.480
这是改变业码

25:43.480 --> 25:45.280
这个函数的作用是改变业码

25:45.280 --> 25:46.040
我们这个函数

25:46.040 --> 25:47.880
先做一个最简单的写法

25:47.880 --> 25:52.760
就是把当前的currents变成你传递的参数

25:52.760 --> 25:54.760
你给我传一个新的业码过来

25:54.760 --> 25:56.360
我就改变我的数据

25:56.360 --> 25:58.600
把我的当前业码改成新的业码

25:58.600 --> 26:00.400
那么由于数据是享用式的

26:00.400 --> 26:01.080
一改了数据

26:01.080 --> 26:02.480
它肯定要重新选择

26:02.480 --> 26:03.040
对吧

26:03.040 --> 26:04.520
所以这里最简单的就是

26:04.560 --> 26:07.240
把重新复制就完事了

26:07.240 --> 26:09.280
那么我们这里是不是就掉了寒睡完事了

26:09.280 --> 26:10.840
Change Page

26:10.840 --> 26:13.680
第一页到首页是不是这里传一

26:13.680 --> 26:14.480
对吧

26:14.480 --> 26:16.000
这里传个一是不是到首页了

26:16.000 --> 26:18.200
传个一是不是把一复制currents了

26:18.200 --> 26:20.280
然后重新渲染是不是变成首页了

26:20.280 --> 26:22.760
然后上一页是不是最简单

26:22.760 --> 26:23.840
上一页干嘛呢

26:23.840 --> 26:28.200
上一页我们是不是把当前业码

26:28.200 --> 26:30.000
减一是不是到上一页

26:30.000 --> 26:32.160
当前是第二页减一是不是第一页

26:32.160 --> 26:33.200
对吧

26:33.240 --> 26:35.320
上三个页码减一

26:35.320 --> 26:35.720
好

26:35.720 --> 26:38.240
下一页的话

26:38.240 --> 26:40.920
下一页的话是不是页码加一

26:40.920 --> 26:41.400
然后呢

26:41.400 --> 26:44.560
尾页是不是就是最后一页

26:44.560 --> 26:45.600
最后一页是什么

26:45.600 --> 26:46.880
最后一页是page number

26:46.880 --> 26:47.640
对吧

26:47.640 --> 26:49.920
这是不是非常简单就写出来了

26:49.920 --> 26:51.360
这时间就组成好了

26:51.360 --> 26:53.840
通过统一的一个函数来处理

26:53.840 --> 26:55.080
啊

26:55.080 --> 26:55.920
卡了吗

26:55.920 --> 26:57.200
卡了同学

26:57.200 --> 26:57.800
怎么会卡了

26:57.800 --> 27:00.240
卡了同学刷新一下啊

27:00.240 --> 27:02.120
卡同学刷新一下啊

27:02.160 --> 27:03.440
哎呀不知道这个腾讯的服务器

27:03.440 --> 27:03.720
哇

27:03.720 --> 27:06.800
这我今天还专门去测了一下网速

27:06.800 --> 27:13.260
网速什么一点问题都没有的啊

27:13.260 --> 27:14.540
这咋的

27:14.540 --> 27:15.740
啊

27:15.740 --> 27:16.820
这咋办吧

27:16.820 --> 27:17.900
也刷新一下啊

27:17.900 --> 27:20.380
刷新一下

27:20.380 --> 27:21.100
刷新一下页面

27:21.100 --> 27:22.620
如果实在是在非常卡的话

27:22.620 --> 27:23.460
你能听多少听多少

27:23.460 --> 27:25.980
因为我们这个毕竟是有路播的吧

27:25.980 --> 27:27.140
好

27:27.140 --> 27:27.900
这里你看呀

27:27.900 --> 27:29.260
我们点击下一页

27:29.260 --> 27:30.900
你看是不是就能已经能显示了

27:30.900 --> 27:31.140
对吧

27:31.140 --> 27:32.860
第二页第三页第四页

27:32.860 --> 27:34.260
你看是非常非常神奇

27:34.260 --> 27:36.420
你看这就是我们在微用里边

27:36.420 --> 27:38.820
把数据和界面分开了之后

27:38.820 --> 27:40.740
写出来的带码

27:40.740 --> 27:42.500
就非常容易理解了

27:42.500 --> 27:44.780
这这个地方只处理界面啊

27:44.780 --> 27:46.660
要用到什么数据去拿就行了啊

27:46.660 --> 27:47.940
这个地方只处理数据

27:47.940 --> 27:49.140
看到没

27:49.140 --> 27:49.340
好

27:49.340 --> 27:51.500
那么现在让我们继续来讲啊

27:51.500 --> 27:52.020
现在呢

27:52.020 --> 27:53.380
我们这里要说另外一个问题

27:53.380 --> 27:54.220
什么问题呢

27:54.220 --> 27:55.380
就是说有的时候呢

27:55.380 --> 27:56.820
你在页面上的A元数呢

27:56.820 --> 27:59.500
可能不小心写了这么一个东西

27:59.500 --> 28:01.300
可能写了这么一个东西

28:01.300 --> 28:01.580
好

28:01.580 --> 28:02.900
接下来我们来看一下啊

28:02.940 --> 28:05.020
当你A元数写了这么一个东西过后

28:05.020 --> 28:07.780
会怎么样

28:07.780 --> 28:08.820
我们写到这吧

28:08.820 --> 28:10.260
我们写到这个

28:10.260 --> 28:11.620
写到这个就是

28:12.620 --> 28:13.460
下页

28:13.460 --> 28:14.340
下页这里

28:14.340 --> 28:15.980
我们把它写到下页这里

28:15.980 --> 28:16.140
好

28:16.140 --> 28:16.820
写到下页这里

28:16.820 --> 28:18.460
我们来看一下啊

28:18.460 --> 28:18.900
这里呢

28:18.900 --> 28:20.620
我们点击下一页

28:20.620 --> 28:22.380
再注意看哦

28:22.380 --> 28:24.060
是不是见面散了一下呀

28:24.060 --> 28:24.860
再看

28:24.860 --> 28:25.780
见面散了一下

28:25.780 --> 28:27.980
你看是不是还是第一页

28:27.980 --> 28:28.940
发现个程序的现象

28:28.940 --> 28:30.380
点下页是它旋变成二

28:30.380 --> 28:31.940
马上就刷新了

28:31.940 --> 28:32.940
你看

28:32.940 --> 28:34.620
这是怎么回事呢

28:34.620 --> 28:36.380
这是因为A元数呢

28:36.380 --> 28:37.580
点击之后呢

28:37.580 --> 28:39.020
你写到Ref属性之后

28:39.020 --> 28:41.020
它有一个默认行为

28:41.020 --> 28:42.420
什么行为呢

28:42.420 --> 28:43.660
什么默认行为

28:43.660 --> 28:45.180
是不是要去

28:45.180 --> 28:46.220
它是一个超链接

28:46.220 --> 28:47.780
它是不是要链接到对应的页面

28:47.780 --> 28:49.900
是不是会导致页面刷新啊

28:49.900 --> 28:50.340
对不对

28:50.340 --> 28:51.980
它会导致页面刷新

28:51.980 --> 28:52.820
有的时候呢

28:52.820 --> 28:54.460
我们不希望A元数

28:54.460 --> 28:55.740
会导致页面刷新

28:55.740 --> 28:56.380
就是我们

28:56.380 --> 28:57.900
因为我们给A元数注册的时间嘛

28:57.900 --> 28:58.220
对吧

28:58.220 --> 29:00.300
我们希望它只运行我们的时间就行了

29:00.300 --> 29:01.700
不要去刷新页面

29:01.700 --> 29:02.860
那怎么办呢

29:02.900 --> 29:04.460
那这个时候怎么办呢

29:04.460 --> 29:05.460
5u里面呢

29:05.460 --> 29:06.660
在事件

29:06.660 --> 29:08.380
事件因为我们知道是一个指令

29:08.380 --> 29:09.060
对吧

29:09.060 --> 29:10.500
事件是一个指令

29:10.500 --> 29:12.380
那么不同的指令呢

29:12.380 --> 29:16.220
它提供了一些修饰服

29:16.220 --> 29:16.740
这个以前呢

29:16.740 --> 29:18.300
我们设计到那么一点点啊

29:18.300 --> 29:19.180
我们之前设计到什么

29:19.180 --> 29:19.820
Lambel对吧

29:19.820 --> 29:21.540
点Lambel这些修饰服

29:21.540 --> 29:22.500
不同的指令呢

29:22.500 --> 29:24.380
它设计到不同的修饰服

29:24.380 --> 29:25.820
用修饰服呢

29:25.820 --> 29:32.300
可以增强或者是更改指令的某些功能

29:32.340 --> 29:34.620
比方说这个A元数里边

29:34.620 --> 29:35.900
这个点击事件里边

29:35.900 --> 29:37.460
我们可以给它加一个修饰服

29:37.460 --> 29:38.780
叫做Prevent

29:39.380 --> 29:41.220
Prevent这个修饰服

29:41.220 --> 29:42.740
这个了解一下就行了

29:42.740 --> 29:44.060
我们这里记到这儿

29:44.060 --> 29:44.740
记到这儿

29:46.660 --> 29:47.420
记到这儿吧

29:51.420 --> 29:54.780
Prevent修饰服

29:54.780 --> 29:56.900
其实如果说你知道是5u底层原力的话

29:56.900 --> 29:59.660
你知道修饰服实际上是一个什么玩意呢

29:59.660 --> 30:01.820
实际上是一个对象里边的属性

30:01.900 --> 30:05.260
我这里就不好解释它里边生成这个东西了

30:05.260 --> 30:10.540
Prevent修饰服用于什么指令呢

30:10.540 --> 30:12.140
用于就是V昂指令

30:13.500 --> 30:16.420
修饰服往往是跟指令是套在一起的

30:16.420 --> 30:18.100
它是跟指令连在一起的

30:18.100 --> 30:19.980
你没有指令不存在修饰服

30:19.980 --> 30:22.700
它应该是跟某一个指令来连着用的

30:22.700 --> 30:24.660
Prevent修饰服用于V昂指令

30:24.660 --> 30:27.220
因为我们这里虽然没有直接写V昂

30:27.220 --> 30:30.060
但是我们知道这里是一个什么一个余法堂

30:30.140 --> 30:31.540
它实际上的写法是V昂

30:31.540 --> 30:32.540
对吧

30:32.540 --> 30:34.500
它实际上的写法是V昂

30:34.500 --> 30:35.900
是这样写的

30:35.900 --> 30:38.060
这是个余法堂而已

30:38.060 --> 30:39.940
那么在指令里边

30:39.940 --> 30:41.900
V昂指令里边使用Prevent

30:41.900 --> 30:44.460
那么表达表示

30:46.540 --> 30:51.220
表示阻止默认行为

30:51.220 --> 30:52.420
默认行为

30:52.420 --> 30:55.300
就是你这里点击不是有个默认行为吗

30:55.300 --> 30:55.860
对吧

30:55.860 --> 30:57.260
A元是点击有个默认行为

30:57.260 --> 30:58.900
我给你阻止掉

30:58.940 --> 30:59.980
那么现在再看一下

30:59.980 --> 31:01.780
我仍然给它把个Ref属性加上

31:01.780 --> 31:03.340
再看一下

31:03.340 --> 31:04.700
点下一页

31:04.700 --> 31:05.380
是不是正常了

31:05.380 --> 31:05.820
对吧

31:05.820 --> 31:07.380
是不是没有刷新页面了

31:07.380 --> 31:07.820
正常了

31:07.820 --> 31:10.220
因为默认行为是不是被阻止了

31:10.220 --> 31:13.820
对吧

31:13.820 --> 31:15.420
点那么为什么可以加字母

31:15.420 --> 31:19.900
它没有办法去控制拥护填的是什么

31:19.900 --> 31:22.540
它没有办法控制拥护填的是什么

31:22.540 --> 31:23.700
拥护能填什么

31:23.700 --> 31:24.580
取决于什么了

31:24.580 --> 31:25.980
取决于利用的元素

31:25.980 --> 31:29.580
你表达利用的ATM元素是这个

31:29.620 --> 31:31.460
你用的ATM元素是这个

31:31.460 --> 31:34.580
那么你这个元素是不是一定是能够写字母的

31:34.580 --> 31:36.220
是不是能够写任何东西

31:36.220 --> 31:36.980
对吧

31:36.980 --> 31:38.900
如果说你用的元素是Number

31:38.900 --> 31:40.380
是不是只能写什么

31:40.380 --> 31:42.060
就只能写数字了

31:42.060 --> 31:45.100
它取决于利用的ATM元素是什么

31:45.100 --> 31:47.020
跟你这个用没有Number没关系

31:47.020 --> 31:48.940
那么点Number是什么意思呢

31:48.940 --> 31:51.540
点Number指的是把拥护填下的东西

31:51.540 --> 31:53.300
转换成一个数字类型

31:54.740 --> 31:55.660
没啥意思吧

31:55.660 --> 31:57.100
点Number的意思是

31:57.140 --> 31:59.780
把那个拥护填下的东西

31:59.780 --> 32:01.540
转换成数字类型

32:04.900 --> 32:05.100
好

32:05.100 --> 32:05.500
我们继续

32:07.500 --> 32:09.340
这里我们

32:09.340 --> 32:11.500
讲讲讲讲讲那个休斯福

32:11.500 --> 32:12.860
Prevent了解一下

32:12.860 --> 32:14.540
其实这里边还有一些休斯福

32:14.540 --> 32:15.700
还有一些休斯福

32:15.700 --> 32:17.460
比方说我们在水面举个码

32:18.580 --> 32:19.100
水面举个

32:19.100 --> 32:21.660
比方说在还有什么Stop

32:21.660 --> 32:23.100
Stop休斯福

32:23.100 --> 32:25.380
用于也是用于被按指令

32:25.380 --> 32:26.540
用于被按指令

32:26.540 --> 32:27.820
表示的是什么

32:27.820 --> 32:30.380
表示的是阻止视线冒泡

32:31.660 --> 32:33.100
其实视线冒泡这里呢

32:35.020 --> 32:36.180
它跟那个

32:36.180 --> 32:38.900
跟那个我们原生的多么元素里边的

32:38.900 --> 32:41.020
视线冒泡还是有区别的

32:41.020 --> 32:42.700
还是有区别的

32:42.700 --> 32:44.060
那么具体的区别呢

32:44.060 --> 32:47.100
就要涉及到5U的核心原理了

32:47.100 --> 32:49.060
所以它的原码分析了

32:49.060 --> 32:51.100
因为5U的事件呢

32:51.100 --> 32:53.580
跟Reactor的事件处理很像

32:53.580 --> 32:56.500
它是整个给body元素

32:56.500 --> 32:57.780
给整个body元素

32:57.780 --> 32:59.460
给document这些元素

32:59.460 --> 33:02.820
整个文档添加了事件

33:02.820 --> 33:04.100
所以它里边事件处理呢

33:04.100 --> 33:05.780
它是单独用了一个模块

33:05.780 --> 33:07.020
来给你处理事件的

33:07.020 --> 33:09.060
跟我们想象的一个原生的多么事件

33:09.060 --> 33:12.510
还不太一样

33:12.510 --> 33:13.790
这里我们就看

33:13.790 --> 33:14.630
我们聊这个东西

33:14.630 --> 33:16.030
直到有什么回事就行了

33:16.030 --> 33:17.150
我们现在目前不用去

33:17.150 --> 33:18.950
神主里去研究它

33:18.950 --> 33:20.150
这关于Stop

33:20.150 --> 33:21.550
Stop其实还有一些休斯福

33:21.550 --> 33:22.710
目前我们用不到了

33:22.710 --> 33:24.350
你知道休斯福这个东西

33:24.350 --> 33:25.070
它是跟什么

33:25.070 --> 33:28.150
它是跟指令来联合使用的

33:28.190 --> 33:29.190
不同的指令呢

33:29.190 --> 33:31.750
它也有不同的休斯福

33:31.750 --> 33:33.350
我们平时用的指休斯福呢

33:33.350 --> 33:34.270
也就这

33:34.270 --> 33:35.950
用的比较多的也就那么两个了

33:35.950 --> 33:37.070
就在驻车事件的时候

33:37.070 --> 33:39.230
有的时候要阻止它的默认行为

33:39.230 --> 33:40.230
要就是什么

33:40.230 --> 33:41.910
要阻止事件爆炮

33:41.910 --> 33:45.230
一般就这么两个

33:45.230 --> 33:46.150
还有什么self

33:46.150 --> 33:47.350
lative这些东西

33:47.350 --> 33:49.990
其实还有一些

33:49.990 --> 33:54.710
这是休斯福简单说一下

33:54.710 --> 33:55.830
因为说到这来了

33:55.830 --> 33:57.510
其实我们这里根本没有加Ref

33:57.550 --> 33:58.510
根本没有加

33:58.510 --> 34:00.950
咱们接着写

34:00.950 --> 34:02.990
我们这个改变夜码事件

34:02.990 --> 34:04.590
改变夜码这个处理函数里面

34:04.590 --> 34:06.310
我们再把它改造一下

34:06.310 --> 34:09.030
因为我们这里有可能会导致一个情况

34:09.030 --> 34:09.590
什么情况

34:09.590 --> 34:10.590
大家看一下

34:10.590 --> 34:12.230
我们现在继续点上一页

34:12.230 --> 34:13.550
就变成零页了

34:13.550 --> 34:14.150
再点上一页

34:14.150 --> 34:15.310
是不是变成负一页了

34:15.310 --> 34:15.990
再点下上一页

34:15.990 --> 34:17.150
是不是变成负二页了

34:17.150 --> 34:17.910
对吧

34:17.910 --> 34:18.510
就变了

34:18.510 --> 34:19.030
对不对

34:19.030 --> 34:19.230
好

34:19.230 --> 34:22.350
那么这里我们最好了判断一下

34:22.350 --> 34:24.590
如果说里的new page

34:24.590 --> 34:26.510
如果说已经小于零了

34:26.630 --> 34:27.750
已经小于零了

34:27.750 --> 34:28.430
那么干嘛呢

34:28.430 --> 34:30.830
小于一

34:30.830 --> 34:32.550
已经小于一了

34:32.550 --> 34:34.830
把它负责为一

34:34.830 --> 34:37.070
lc new page

34:37.070 --> 34:40.190
如果说大于等于了

34:40.190 --> 34:41.110
大于了什么

34:41.110 --> 34:42.750
page number

34:42.750 --> 34:43.830
z点page number

34:43.830 --> 34:44.750
不要忘了z

34:44.750 --> 34:46.390
不要忘了z

34:46.390 --> 34:47.950
大于了z点page number

34:47.950 --> 34:48.470
在这里面

34:48.470 --> 34:50.070
因为这里面也会提到对象里面

34:50.070 --> 34:50.310
对吧

34:50.310 --> 34:51.550
提到实力里面

34:51.550 --> 34:53.950
大于了z点page number

34:53.950 --> 34:55.110
那么这里怎么办呢

34:55.150 --> 34:56.470
我们就把new page

34:56.470 --> 34:58.910
负责为z点page number

34:58.910 --> 34:59.870
对吧

34:59.870 --> 35:01.230
控制一下这个属性

35:01.230 --> 35:02.990
把这个属性控制一下

35:02.990 --> 35:04.670
咱们看一下

35:04.670 --> 35:06.630
点击下页上页

35:06.630 --> 35:07.590
你看是不是不能点了

35:07.590 --> 35:07.870
对吧

35:07.870 --> 35:09.630
不能点了

35:09.630 --> 35:10.390
就不能点了

35:10.390 --> 35:11.430
点击尾页

35:11.430 --> 35:12.470
是不是不能点了

35:12.470 --> 35:12.830
对吧

35:12.830 --> 35:13.790
就不能点了

35:13.790 --> 35:14.710
拜拜

35:14.710 --> 35:16.430
这里控制一下

35:16.430 --> 35:17.510
差不多了

35:17.510 --> 35:20.030
那么接下来就是中间的页码部分

35:20.030 --> 35:22.790
中间的页码部分是不是在这里生成

35:23.270 --> 35:25.830
中间的页码部分怎么来写呢

35:25.830 --> 35:28.070
中间页码部分看一下这里

35:28.070 --> 35:29.350
我们来看一下这边

35:29.350 --> 35:31.310
第四页

35:31.310 --> 35:32.510
看一下第四页

35:32.510 --> 35:32.990
第五页

35:35.630 --> 35:37.030
第五页

35:37.030 --> 35:38.390
第六页

35:38.390 --> 35:40.230
这里写的好像还有点小问题

35:40.230 --> 35:42.030
这个六页应该在中间

35:42.030 --> 35:43.230
这个红色的就当前页

35:43.230 --> 35:44.630
应该始终在中间

35:44.630 --> 35:45.990
应该始终在中间

35:45.990 --> 35:47.830
我这里写的有点小问题

35:47.830 --> 35:49.590
我当时用的函数应该是用的sale

35:49.590 --> 35:50.790
用的天花板函数

35:50.830 --> 35:53.110
这里应该用了个floor函数好一点

35:53.110 --> 35:54.230
这里应该在中间

35:54.230 --> 35:55.310
应该在这

35:55.310 --> 35:57.030
那么我们比方放在中间

35:57.030 --> 35:58.070
比方放在中间

35:58.070 --> 36:00.430
那么比方说当前是第六页的时候

36:00.430 --> 36:04.150
下面的数字页码显示的范围是多少呢

36:04.150 --> 36:05.870
当前是第六页的情况下

36:05.870 --> 36:07.470
下面的数字页码显示的范围

36:07.470 --> 36:08.270
应该是多少呢

36:08.270 --> 36:11.990
应该是四五六七八

36:11.990 --> 36:12.750
对吧

36:12.750 --> 36:13.710
是不是应该是这个

36:13.710 --> 36:15.150
当前是第六页的情况下

36:15.150 --> 36:16.790
是不是应该显示这样的页码

36:16.790 --> 36:17.990
当前是第七页

36:17.990 --> 36:19.350
是不是应该显示这样的页码

36:19.950 --> 36:23.070
五六七八九

36:23.070 --> 36:23.550
对不对

36:23.550 --> 36:25.150
是不是应该显示这样的页码

36:25.150 --> 36:25.430
对吧

36:25.430 --> 36:28.390
我们的页码始终尽量的保持在中间

36:28.390 --> 36:30.350
就当前页码

36:30.350 --> 36:31.110
那么这里呢

36:31.110 --> 36:31.990
还有一个问题就是

36:31.990 --> 36:34.550
也说这里显示的数字范围

36:34.550 --> 36:36.950
这里是4到8

36:36.950 --> 36:38.430
4到8

36:38.430 --> 36:40.150
那么下面的数字范围是多少呢

36:40.150 --> 36:41.270
5到9

36:41.270 --> 36:42.470
是5到9

36:42.470 --> 36:44.070
那么是它的显示数字范围

36:44.070 --> 36:45.830
那么我们只要能够知道这个范围

36:45.830 --> 36:47.070
是不是就可以写个数组

36:47.070 --> 36:47.870
写个数组循环

36:47.910 --> 36:49.470
它生成远远说不就完了吗

36:49.470 --> 36:49.750
对吧

36:49.750 --> 36:50.990
就很简单

36:50.990 --> 36:53.750
因此的关键是我们要知道这个范围是多少

36:53.750 --> 36:55.030
那么这个范围取决于啥呢

36:55.030 --> 36:56.390
取决于当前页码

36:56.390 --> 36:57.750
当前页码会影响这个范围

36:57.750 --> 36:57.950
对吧

36:57.950 --> 36:59.910
你看6在当前是第六页

36:59.910 --> 37:01.310
那么它的范围是4到8

37:01.310 --> 37:03.550
当前是第七页范围是5到9

37:03.550 --> 37:05.510
当前页码会影响这个范围

37:05.510 --> 37:06.590
还有什么会影响呢

37:06.590 --> 37:07.510
就是还有这个东西

37:07.510 --> 37:09.190
叫做panel number

37:09.190 --> 37:11.590
就是有多少个数字

37:11.590 --> 37:12.550
有多少个数字

37:12.550 --> 37:14.230
比较有5个数字

37:14.230 --> 37:15.710
有5个数字是4到8

37:15.710 --> 37:17.190
如果说有6个数字呢

37:17.230 --> 37:19.230
6个数字可能是4到9

37:19.230 --> 37:20.110
对吧

37:20.110 --> 37:20.870
有6个数字的话

37:20.870 --> 37:22.270
可能是4到9

37:22.270 --> 37:23.790
不要的意思吗

37:23.790 --> 37:26.710
所以说还跟那个要显示多少个数字有关系

37:26.710 --> 37:28.670
所以说我们这里还需要一个数据

37:28.670 --> 37:30.270
还需要一个数据

37:30.270 --> 37:31.030
什么数据呢

37:31.030 --> 37:33.790
就是panel number

37:33.790 --> 37:34.870
比方说5

37:34.870 --> 37:42.390
比较是要注意多显示的数字页码的数量

37:42.390 --> 37:43.790
就是个页码的数量

37:43.790 --> 37:45.310
就下面这个页码

37:45.310 --> 37:46.110
就这个玩意

37:46.150 --> 37:49.230
它要显示多少个数字

37:49.230 --> 37:49.710
好

37:49.710 --> 37:51.350
那么知道这些信息过后了

37:51.350 --> 37:53.230
我们就可以用一个计算数项

37:55.310 --> 37:58.270
就可以用一个计算数项来得到这么一个数组

37:58.270 --> 37:59.710
你不是要显示4到8吗

37:59.710 --> 37:59.950
对吧

37:59.950 --> 38:00.830
我就生成一个数

38:00.830 --> 38:01.630
我就生成一个数组

38:02.710 --> 38:03.350
4

38:03.350 --> 38:03.590
5

38:03.590 --> 38:03.990
6

38:03.990 --> 38:04.390
7

38:04.390 --> 38:04.990
8

38:04.990 --> 38:05.710
生成个数组

38:05.710 --> 38:06.510
那么这里5到9

38:06.510 --> 38:07.630
是不是可以生成一个数组

38:07.630 --> 38:08.270
5

38:08.270 --> 38:08.750
6

38:08.750 --> 38:09.190
7

38:09.190 --> 38:09.630
以后呢

38:09.630 --> 38:12.230
你们用5又在公司里面去开发分业组建的时候

38:12.230 --> 38:14.310
就可以用这种类似的实录来做

38:14.310 --> 38:14.990
15678

38:14.990 --> 38:15.550
56789

38:15.590 --> 38:16.870
所以可以得到一个数组

38:16.870 --> 38:17.350
对吧

38:17.350 --> 38:18.310
可以通过什么来算

38:18.310 --> 38:20.990
可以通过当前页码和这个东西

38:20.990 --> 38:22.030
是不是可以算出来

38:22.030 --> 38:22.350
对吧

38:22.350 --> 38:23.750
你先不管怎么算的

38:23.750 --> 38:25.030
是不是可以算出来

38:25.030 --> 38:25.830
算出来过后

38:25.830 --> 38:26.670
生成的那个数组

38:26.670 --> 38:27.670
反而回忆完事了

38:27.670 --> 38:29.110
所以我们这里写个计算数项

38:29.110 --> 38:29.990
叫做lumbers

38:31.150 --> 38:32.470
它干嘛呢

38:32.470 --> 38:35.030
那边我写到方法里面去了

38:35.030 --> 38:36.830
叫计算数项里面

38:36.830 --> 38:37.990
写个lumbers

38:37.990 --> 38:38.910
它干嘛呢

38:38.910 --> 38:42.490
它是用于得到

38:42.490 --> 38:44.410
用于得到

38:45.330 --> 38:47.250
得到什么呢

38:47.250 --> 38:48.890
得到那个就是

38:50.490 --> 38:52.850
一个数字的数组

38:53.970 --> 38:56.610
用于得到一个数字的数组

38:58.130 --> 38:58.410
好

38:58.410 --> 38:59.450
那么这里呢

39:00.650 --> 39:01.890
得到数字的数组怎么算呢

39:01.890 --> 39:02.810
就是我们刚才说的

39:02.810 --> 39:04.210
你要把这个范围算出来

39:04.210 --> 39:05.010
其实也很简单

39:05.010 --> 39:06.970
你只要把最小值算出来了

39:06.970 --> 39:08.490
最大值是不是自然值出来了

39:08.490 --> 39:09.050
对吧

39:09.050 --> 39:10.650
你先把最小值算出来

39:10.650 --> 39:12.050
最小值是多少呢

39:12.050 --> 39:12.970
其实很简单

39:13.010 --> 39:15.530
当前是第六页是不是减2

39:15.530 --> 39:17.570
当前是第七页是不是减2

39:17.570 --> 39:18.050
对吧

39:18.050 --> 39:18.930
为什么是减2

39:18.930 --> 39:20.130
一共有5页

39:20.130 --> 39:21.490
一共有5个数字

39:21.490 --> 39:22.970
5除12等于2.5

39:22.970 --> 39:25.210
向下取整就是2

39:25.210 --> 39:27.690
也就是说一共要显示5个数字

39:27.690 --> 39:29.330
是不是除12就是一般了

39:30.770 --> 39:31.930
一共要显示5个数字

39:31.930 --> 39:33.970
是不是往前面倒两个

39:33.970 --> 39:35.250
当前一码往前面倒两个

39:35.250 --> 39:36.890
所以就是最小的数字了

39:36.890 --> 39:37.370
对吧

39:37.370 --> 39:38.570
我们这里先算最小的数字

39:39.690 --> 39:40.810
最小的数字等于啥呢

39:40.850 --> 39:42.450
就是当前一码

39:42.450 --> 39:45.570
减去respanel number

39:45.570 --> 39:47.530
就是一共要显示的一码数量

39:47.530 --> 39:48.890
就这个东西

39:48.890 --> 39:50.570
是不是除12

39:50.570 --> 39:51.570
除12

39:51.570 --> 39:52.930
除12别忘了

39:52.930 --> 39:55.090
你这里要向下取整

39:55.090 --> 39:57.610
只像我向上取整的好像不太好

39:57.610 --> 39:59.210
向下取整

39:59.210 --> 40:02.050
除12.5就等于2

40:02.050 --> 40:03.170
那么这是最小一码

40:03.170 --> 40:04.210
那么这样算出来过后

40:04.210 --> 40:06.330
最小一码有可能会小于1

40:06.330 --> 40:07.810
你不能小于1吧

40:07.810 --> 40:09.050
你不能说点成0页

40:10.050 --> 40:11.210
负一页不太好

40:11.210 --> 40:14.370
所以说它最小的只能为1

40:14.370 --> 40:19.850
这是最小一码数字

40:19.850 --> 40:20.050
好

40:20.050 --> 40:20.930
那么最小算出来

40:20.930 --> 40:22.170
最大可以算出来

40:22.170 --> 40:23.730
最大一码数字

40:23.730 --> 40:26.730
那这里边淡码你想写多少写多少

40:26.730 --> 40:28.650
因为这是计算属性是个方法

40:28.650 --> 40:28.850
好

40:28.850 --> 40:30.330
最大一码要怎么算呢

40:30.330 --> 40:31.850
最大一码

40:31.850 --> 40:34.570
最大一码是不是最小一码加上什么

40:34.570 --> 40:38.050
加上一共要显示个多少数字减1

40:38.090 --> 40:39.930
你看一下是不是这样子了

40:39.930 --> 40:42.890
最小一码算出来了4加50不等于9

40:42.890 --> 40:44.730
9减1是不等于8

40:44.730 --> 40:46.330
5加50不等于10

40:46.330 --> 40:47.290
10减1是不等于9

40:47.290 --> 40:47.970
为什么要减1

40:47.970 --> 40:50.530
因为还包含自身多了一个

40:50.530 --> 40:51.410
这是最大一码

40:51.410 --> 40:52.090
那么最大一码

40:52.090 --> 40:54.290
它也不能超过总页数

40:54.290 --> 40:56.090
这也是配纸囊本

40:56.090 --> 40:57.810
这里能我这些逻辑

40:57.810 --> 40:58.530
这些逻辑呢

40:58.530 --> 40:59.770
我相信大伙呢

40:59.770 --> 41:01.690
都是经过

41:01.690 --> 41:03.010
学到这来了

41:03.010 --> 41:04.490
都是经过长时间锻炼的

41:04.490 --> 41:05.970
这些逻辑应该是没有什么问题

41:05.970 --> 41:07.650
最大一码最小的码算出来

41:07.690 --> 41:09.530
算出来过是不是可以称成数组了

41:09.530 --> 41:09.850
对吧

41:09.850 --> 41:12.130
一个数组

41:12.130 --> 41:12.610
来吧

41:12.610 --> 41:14.250
循环

41:14.250 --> 41:15.290
循环啥呢

41:15.290 --> 41:17.090
循环从最小一码

41:17.090 --> 41:19.010
循环到最大一码

41:19.010 --> 41:20.370
从最小一码

41:20.370 --> 41:24.010
循环到最大一码

41:24.010 --> 41:24.810
没循环一次

41:24.810 --> 41:26.210
是不是往数组里边扔一下

41:26.210 --> 41:26.970
吐息

41:26.970 --> 41:27.890
把爱征进去

41:27.890 --> 41:29.250
对吧

41:29.250 --> 41:30.730
说把这个数组填充满

41:30.730 --> 41:31.610
那比较那个数组里边

41:31.610 --> 41:32.690
是不是可以填充这样的东西

41:32.690 --> 41:34.850
我们最终是要得到这个

41:34.850 --> 41:35.970
数组填充满了

41:36.010 --> 41:37.850
最后返回这数组

41:37.850 --> 41:38.730
这就是计算属性

41:38.730 --> 41:40.090
Numbers

41:40.090 --> 41:41.130
它依赖什么数据呢

41:41.130 --> 41:42.290
依赖PanelNumbers

41:42.290 --> 41:43.210
只要这东西一变

41:43.210 --> 41:43.970
它就会变

41:43.970 --> 41:44.610
依赖什么呢

41:44.610 --> 41:45.650
依赖Current

41:45.650 --> 41:47.050
只要当前一码一变

41:47.050 --> 41:48.970
它这东西要重新计算

41:48.970 --> 41:50.330
这计算属性它有依赖的

41:50.330 --> 41:50.730
对吧

41:50.730 --> 41:52.010
没有这两个东西没变

41:52.010 --> 41:53.090
它就会缓存

41:53.090 --> 41:54.170
不会重新计算

41:54.170 --> 41:55.970
提高执行效率

41:55.970 --> 41:57.170
那么通过这个计算属性

41:57.170 --> 41:58.930
是不是可以得到一个数组啊

41:58.930 --> 42:00.690
这个Numbers是不是一个数组

42:00.690 --> 42:02.130
既然它是一个数组

42:02.130 --> 42:04.330
所以来了

42:04.330 --> 42:05.370
来吧

42:05.410 --> 42:06.810
里边的A元数是这样子

42:06.810 --> 42:08.810
它里边的A元数

42:08.810 --> 42:10.330
然后这里是

42:10.330 --> 42:11.290
首先是class

42:11.290 --> 42:12.450
class

42:12.450 --> 42:13.210
pager

42:13.210 --> 42:14.090
item

42:14.090 --> 42:15.210
这里是不是要循环

42:15.210 --> 42:15.890
v4

42:15.890 --> 42:17.530
循环

42:17.530 --> 42:18.490
放在好吗

42:18.490 --> 42:19.690
循环

42:19.690 --> 42:20.250
循环是什么

42:20.250 --> 42:21.930
我们之前写过了item in

42:21.930 --> 42:22.770
什么数组

42:22.770 --> 42:24.170
数组是Numbers

42:24.170 --> 42:24.850
计算属性

42:24.850 --> 42:27.050
循环Numbers这个数组

42:27.050 --> 42:28.650
每循环一次

42:28.650 --> 42:29.970
是不是加一个数字

42:29.970 --> 42:31.530
什么数字

42:31.530 --> 42:32.130
加个数字

42:32.130 --> 42:32.650
什么数字

42:32.650 --> 42:33.450
是不是item

42:33.450 --> 42:34.650
这是一个数字的数组

42:34.650 --> 42:35.130
对吧

42:35.170 --> 42:35.890
那么每一循环一次

42:35.890 --> 42:37.330
把个数字放这就完事了

42:37.330 --> 42:37.930
没了

42:37.930 --> 42:40.540
保存看一下

42:40.540 --> 42:43.740
你看这边

42:43.740 --> 42:45.260
你看是不是出来了

42:45.260 --> 42:45.980
是不是出来了

42:45.980 --> 42:47.020
对吧

42:47.020 --> 42:47.260
好

42:47.260 --> 42:48.020
那么还没完

42:48.020 --> 42:48.540
不着急

42:48.540 --> 42:50.260
还没完

42:50.260 --> 42:50.700
然后了

42:50.700 --> 42:53.540
这里边还有一些问题需要解决

42:53.540 --> 42:54.540
什么问题呢

42:54.540 --> 42:58.100
就是说首先的当前页码这一块

42:58.100 --> 43:00.060
当前页码这一块

43:00.060 --> 43:00.900
当前页码这一块

43:00.900 --> 43:02.540
是不是有个特别的那样式呢

43:02.540 --> 43:03.300
我们点击

43:03.300 --> 43:05.060
你看是不是一个active

43:05.060 --> 43:06.340
它有个特别的那样式

43:06.380 --> 43:07.020
active

43:07.020 --> 43:07.220
好

43:07.220 --> 43:08.340
来吧

43:08.340 --> 43:09.700
来吧

43:09.700 --> 43:11.540
那么这里呢

43:11.540 --> 43:14.100
我们跟刚才的邪法一样

43:14.100 --> 43:16.140
class

43:16.140 --> 43:18.460
就是我们这里有个有个那样式

43:18.460 --> 43:19.420
什么那样式呢

43:19.420 --> 43:21.060
叫做active

43:21.060 --> 43:22.500
要不要加上这个那样式呢

43:22.500 --> 43:23.940
取决于啥

43:23.940 --> 43:24.740
取决于啥

43:24.740 --> 43:28.420
你生成的这个数字

43:28.420 --> 43:31.380
是不是等于当前页码

43:31.380 --> 43:32.580
取决于这个

43:32.580 --> 43:34.140
如果说你生成的这个数字

43:34.140 --> 43:35.420
等于当前页码的话

43:35.460 --> 43:36.660
那么它就加上这个数

43:36.660 --> 43:37.500
加上这个那样式

43:37.500 --> 43:38.700
来个题目

43:38.700 --> 43:39.940
这同时又说明啥

43:39.940 --> 43:41.380
咱们既然能够这样写代码

43:41.380 --> 43:42.460
又同时说明啥呢

43:42.460 --> 43:45.740
说明v4这个循环优先级是不是非常高

43:45.740 --> 43:46.300
对吧

43:46.300 --> 43:48.140
它要先循环

43:48.140 --> 43:50.260
循环生成的过程中

43:50.260 --> 43:52.060
才去确定这个那样式

43:52.060 --> 43:54.300
如果说先确定那样式的话

43:54.300 --> 43:56.140
那你这里肯定出问题了

43:56.140 --> 43:57.740
因为你先确定那样式的话

43:57.740 --> 43:59.980
那么这里循环都还没有循环

43:59.980 --> 44:01.220
自然得不到这个item

44:01.220 --> 44:03.340
所以它一定是先循环的

44:03.340 --> 44:04.900
一定是先循环的

44:04.900 --> 44:06.100
其实在伍余的官方文章里边

44:06.100 --> 44:07.340
还特别强调了这一点

44:07.340 --> 44:07.980
他说

44:07.980 --> 44:10.540
v4最好不要跟vif

44:10.540 --> 44:14.300
两个放到同一个元数里面用

44:14.300 --> 44:16.220
因为容易造成误解

44:16.220 --> 44:17.940
因为你加上vif之后

44:17.940 --> 44:19.380
你可能觉得这个元数要么显示

44:19.380 --> 44:20.340
要么不显示

44:20.340 --> 44:21.260
其实它不是的

44:21.260 --> 44:22.820
它是先进行循环

44:22.820 --> 44:23.940
在循环里边

44:23.940 --> 44:24.740
每一次循环

44:24.740 --> 44:27.020
决定每一次循环的时候

44:27.020 --> 44:29.820
这个n元数要不要显示

44:29.820 --> 44:32.660
它是循环的优先级是非常高的

44:32.700 --> 44:33.820
保存 咱们看一下

44:34.980 --> 44:36.700
你看 当前第1页是不是出来了

44:36.700 --> 44:38.780
点下一页

44:38.780 --> 44:39.580
是不是出来了

44:39.580 --> 44:41.300
对吧 出来了

44:41.300 --> 44:42.820
好 那么接下来是这边的事件

44:42.820 --> 44:43.980
这边的事件

44:43.980 --> 44:46.300
点击这个元数是不是得触发事件

44:46.300 --> 44:47.100
点这个元数

44:47.100 --> 44:48.620
它得触发事件

44:48.620 --> 44:49.380
触发事件

44:49.380 --> 44:50.540
我们是不是要注册事件

44:50.540 --> 44:52.660
click 一样的

44:52.660 --> 44:54.980
change page

44:54.980 --> 44:55.820
改变一码

44:55.820 --> 44:57.020
改变一码多少

44:57.020 --> 44:58.260
是不是就是item

44:58.260 --> 44:58.740
对吧

44:58.740 --> 45:00.260
一个数字是多少

45:00.260 --> 45:02.500
那么就调用函数的时候

45:02.500 --> 45:04.300
就传递多少

45:04.300 --> 45:05.060
就没了

45:05.060 --> 45:05.860
一看分析组件

45:05.860 --> 45:07.860
一会就写出来了

45:07.860 --> 45:09.300
之前我们用远程节目写

45:09.300 --> 45:10.340
还挺麻烦的

45:10.340 --> 45:10.700
对吧

45:10.700 --> 45:11.780
还挺麻烦的

45:11.780 --> 45:13.580
现在是不是一下就写出来了

45:13.580 --> 45:16.810
对吧

45:16.810 --> 45:20.250
一直在中间就是在这

45:20.250 --> 45:21.810
一直在中间在这

45:21.810 --> 45:23.250
得到最小页码

45:23.250 --> 45:25.450
它是根据当前页码

45:25.450 --> 45:27.570
减去 减去它处于2

45:27.570 --> 45:29.730
就是整个要显示的数字量处于2

45:29.730 --> 45:31.570
比方说你要显示5个数字

45:31.570 --> 45:33.010
那么当前页码是6

45:33.050 --> 45:34.130
6是不是减2

45:34.130 --> 45:37.730
减2最小一码是不是4就算出来了

45:37.730 --> 45:39.450
最终我给它生成这么一个数组

45:39.450 --> 45:40.730
那么循环便利这个数组

45:40.730 --> 45:42.130
生成A元数就不就完了吗

45:42.130 --> 45:42.730
对不对

45:42.730 --> 45:44.730
当前是第七页的时候

45:44.730 --> 45:45.890
当前是第七页的时候

45:45.890 --> 45:47.130
是不是要重新渲染

45:47.130 --> 45:49.250
因为你corrent的数性变了

45:49.250 --> 45:50.170
你要重新渲染

45:50.170 --> 45:50.970
重新渲染过后

45:50.970 --> 45:53.250
它得到了数组是这个

45:53.250 --> 45:54.130
得到数组是这个

45:54.130 --> 45:55.850
是不是要重新渲染这个A元数

45:55.850 --> 45:58.170
得到了就新的结果了

45:58.170 --> 46:01.210
就这么简单

46:01.210 --> 46:02.490
实证点我没有解决

46:02.570 --> 46:03.810
实证点我没有解决这个问题

46:03.810 --> 46:04.890
有些人说到了

46:04.890 --> 46:07.690
当时我就用原生阶属讲的过程中

46:07.690 --> 46:08.770
也说了这个问题

46:08.770 --> 46:10.450
就实证点由于

46:10.450 --> 46:11.850
它只出现了三个页

46:11.850 --> 46:13.290
这里一个小Bug

46:13.290 --> 46:14.370
这里也能解决

46:14.370 --> 46:16.770
当时我们用原生阶属写的时候解决了

46:16.770 --> 46:18.770
我这里就不过多出去说这个东西了

46:18.770 --> 46:21.130
因为我们终点显示学习无忧

46:21.130 --> 46:22.730
这个东西要解决

46:22.730 --> 46:24.570
大家可以下来去思考一下

46:24.570 --> 46:27.650
跟那个原生阶属写法也是一样的

46:27.650 --> 46:28.970
那么这里就是

46:28.970 --> 46:30.410
Numbers这里搞定了

46:30.450 --> 46:32.450
那么分业组建就做完了

46:32.450 --> 46:34.930
接下来我们要继续思考

46:34.930 --> 46:36.730
现在我们分业组建写完了之后

46:36.730 --> 46:38.970
发现有一个问题

46:38.970 --> 46:40.370
因为这个组建的出现了

46:40.370 --> 46:43.090
它是为了让重复复用的

46:43.090 --> 46:45.210
它是为了要实现复用的

46:45.210 --> 46:47.090
啥意思呢

46:47.090 --> 46:50.290
这里我们可不可以用两个分业组建

46:50.290 --> 46:51.290
可不可以用两个

46:51.290 --> 46:52.130
可不可以用三个

46:52.130 --> 46:53.370
所以都可以

46:53.370 --> 46:54.610
它可以复用

46:54.610 --> 46:56.730
你看是不是重复使用这个组建

46:56.730 --> 46:58.050
每个组建它有自己的数据

46:58.050 --> 46:59.770
互不干了

46:59.970 --> 47:03.370
那么现在这就是组建化开发的好处

47:03.370 --> 47:05.890
那么现在分业组建写好了之后

47:05.890 --> 47:07.410
但是出现一个问题

47:07.410 --> 47:10.050
当我们重复去使用分业组建的时候

47:10.050 --> 47:12.050
这些数据是不是假的

47:12.050 --> 47:13.810
凭什么有实业

47:13.810 --> 47:17.650
因为它总数据量有99

47:17.650 --> 47:19.170
凭什么有99呢

47:19.170 --> 47:20.490
凭啥有99啊

47:20.490 --> 47:22.570
我没有说它总数据量有99

47:22.570 --> 47:25.130
比方说我这个电影里边总数据量是99

47:25.130 --> 47:27.450
那以后分业组建写好了之后

47:27.730 --> 47:28.930
总数据量是99

47:28.930 --> 47:30.450
那以后分业别的数据

47:30.450 --> 47:30.890
别的数据

47:30.890 --> 47:32.970
它总数据量是不是会变啊

47:32.970 --> 47:33.890
会变啊

47:33.890 --> 47:34.850
而且呢

47:34.850 --> 47:36.010
一开始它是第一页

47:36.010 --> 47:37.130
凭什么是第一页呢

47:37.130 --> 47:38.090
有可能是别的页嘛

47:38.090 --> 47:40.290
一开始一开始可能就是第三页

47:40.290 --> 47:41.010
对吧

47:41.010 --> 47:42.770
所以要考虑这些问题

47:42.770 --> 47:43.490
也就是说

47:43.490 --> 47:46.210
如果说你在做这个组建的时候

47:46.210 --> 47:48.810
你缺失了一些信息

47:48.810 --> 47:50.530
你在做这个分业组建的时候

47:50.530 --> 47:52.090
由于你不知道这个东西

47:52.090 --> 47:53.770
是对哪些数据进行分业

47:53.770 --> 47:55.410
你根本就没有数据

47:55.450 --> 47:57.850
你不知道它对谁进行分业

47:57.850 --> 48:00.970
那么你这些信息是不是未知的呀

48:00.970 --> 48:02.250
当前也买自己

48:02.250 --> 48:03.050
是不是不知道啊

48:04.290 --> 48:05.650
总数据量凭什么是99

48:05.650 --> 48:06.650
你是不是不知道啊

48:06.650 --> 48:07.770
你说你把这个东西删了

48:07.770 --> 48:08.330
你写几呢

48:08.330 --> 48:09.970
你写几都不合适

48:09.970 --> 48:11.650
那叶容量是一定是实吗

48:11.650 --> 48:13.930
也不知道啊

48:13.930 --> 48:15.890
那么一共显示五个叶

48:15.890 --> 48:16.930
一定是显示五个吗

48:16.930 --> 48:18.170
是不是也不知道啊

48:18.170 --> 48:19.970
这些数都未知的呢

48:19.970 --> 48:21.010
啊都未知的呢

48:22.010 --> 48:25.610
那么这些东西既然都是未知的

48:25.610 --> 48:30.340
那你这里能把他写到自己的数据里面吗

48:30.340 --> 48:32.860
因为自己的数据是自己管理的

48:32.860 --> 48:34.740
它跟外面无关系

48:34.740 --> 48:35.900
那么有些数据呢

48:35.900 --> 48:37.980
他不是自己管理的啊

48:37.980 --> 48:39.780
有些数据他不是自己管理的

48:39.780 --> 48:41.460
有些数据是要别人给他的

48:41.460 --> 48:42.740
他不知道他自己

48:42.740 --> 48:43.780
像当前一把他不知道

48:43.780 --> 48:44.940
总数据也不知道

48:44.940 --> 48:45.740
总叶容量都不知道

48:45.740 --> 48:47.260
这东西全部不知道

48:47.260 --> 48:48.140
那么这种情况下

48:48.140 --> 48:49.900
在组建里面怎么操作呢

48:49.940 --> 48:53.100
接下来是组建跟五幼实际配置的

48:53.100 --> 48:53.900
第二个区别

48:56.540 --> 48:57.580
我刚才说的第一个区别

48:57.580 --> 48:59.660
有data的配置方式不一样

48:59.660 --> 49:00.380
第二个区别呢

49:00.380 --> 49:04.300
就是组建中可以有属性

49:05.660 --> 49:07.540
可以有属性

49:07.540 --> 49:10.420
而五幼实力中没有

49:12.340 --> 49:14.380
一个是一个是状态

49:14.380 --> 49:15.500
这个东西叫做状态

49:16.940 --> 49:19.380
叫做State状态

49:19.540 --> 49:20.100
叫做状态

49:20.100 --> 49:21.220
组建状态

49:21.220 --> 49:22.980
那么组建除了状态

49:22.980 --> 49:24.220
它的数据来源

49:24.220 --> 49:25.660
除了状态之外呢

49:25.660 --> 49:27.060
还有一个东西

49:27.060 --> 49:28.220
就是属性

49:30.180 --> 49:33.580
叫做Component Props

49:33.580 --> 49:35.020
叫做组建属性

49:35.020 --> 49:35.740
组建属性呢

49:35.740 --> 49:38.580
有点类似于方法的参数

49:38.580 --> 49:41.660
一把组建刊成一个函数的话

49:41.660 --> 49:44.060
data相当于函数内部的变量

49:44.060 --> 49:45.620
它自己的东西

49:45.620 --> 49:46.660
自己的我在地面

49:46.660 --> 49:48.780
运作过程中要计算出来的东西

49:49.420 --> 49:50.340
叫做状态

49:51.740 --> 49:54.820
那么属性的类似于一个函数的参数

49:54.820 --> 49:56.020
就是我不知道的信息

49:56.020 --> 49:57.740
要别人告诉我

49:57.740 --> 49:58.860
那么这个地方呢

49:58.860 --> 50:02.900
我们是不是应该把这些东西全部变成属性啊

50:02.900 --> 50:04.220
而变成属性

50:04.220 --> 50:04.380
好

50:04.380 --> 50:06.460
那么我们属性怎么输写呢

50:06.460 --> 50:07.980
输写的输写方式是在这儿

50:10.460 --> 50:10.660
在这儿

50:13.460 --> 50:14.100
一个数组

50:16.140 --> 50:17.580
输写成为一个数组

50:17.580 --> 50:19.020
那么在数组里边

50:19.060 --> 50:21.860
每数组的每一项是一个字幕刷

50:21.860 --> 50:22.980
字幕刷里边的纸

50:22.980 --> 50:24.580
就是你要需要的属性名称

50:24.580 --> 50:25.500
我们需要哪些属相

50:25.500 --> 50:26.060
corrent

50:27.260 --> 50:27.900
toto

50:27.900 --> 50:28.260
对吧

50:28.260 --> 50:29.020
需要这些数据

50:29.020 --> 50:29.460
对吧

50:29.460 --> 50:30.260
也我不知道啊

50:30.260 --> 50:31.180
你要告诉我

50:31.180 --> 50:31.780
然后呢

50:31.780 --> 50:32.500
还有什么呢

50:32.500 --> 50:33.580
还有就是那个

50:36.580 --> 50:36.860
还有什么

50:36.860 --> 50:38.260
刚才还写了啥

50:38.260 --> 50:39.660
payday size

50:39.660 --> 50:40.740
还有什么

50:40.740 --> 50:42.020
panel number

50:42.020 --> 50:42.900
panel number

50:42.900 --> 50:43.180
对吧

50:43.180 --> 50:45.100
是不是需要这么一些属相

50:45.100 --> 50:46.740
对不对

50:46.780 --> 50:48.700
他需要这么一些属相

50:48.700 --> 50:49.260
属相

50:49.260 --> 50:50.180
属性的命名

50:50.180 --> 50:52.020
就跟一个对象属性的命名是一样的

50:52.020 --> 50:53.180
是一个小头风命名法

50:54.540 --> 50:54.900
好

50:54.900 --> 50:55.820
那么这就是属相

50:55.820 --> 50:56.780
也就是有些信息

50:56.820 --> 50:58.820
我是不知道的

50:58.820 --> 51:00.220
需要别人告诉我

51:00.220 --> 51:03.460
那么我就把它定义为我这个组件的属性

51:03.460 --> 51:05.100
那么别人怎么告诉他呢

51:05.100 --> 51:06.620
现在我们回到这边来

51:06.620 --> 51:08.580
这边是不是在使用这个组件啊

51:08.580 --> 51:10.100
是不是在使用这个组件

51:10.100 --> 51:10.580
好

51:10.580 --> 51:12.340
那么在使用这个组件的时候呢

51:12.340 --> 51:13.940
我就可以把属性传过去

51:13.980 --> 51:14.700
怎么传

51:14.700 --> 51:17.460
就跟ATM元素里面传属性是一样的

51:19.100 --> 51:20.300
配级

51:20.300 --> 51:20.660
传啥

51:21.940 --> 51:22.580
当前

51:22.580 --> 51:23.780
corrent

51:23.780 --> 51:25.940
当前就传一个属相

51:25.940 --> 51:27.980
往这个组件里面传递一个属相

51:27.980 --> 51:29.340
第一页

51:29.340 --> 51:32.060
总的数据量100页

51:32.060 --> 51:33.300
100页

51:33.300 --> 51:33.780
然后呢

51:33.780 --> 51:34.500
还有什么呢

51:34.500 --> 51:35.580
还有就是那个

51:38.020 --> 51:39.300
配级size

51:39.300 --> 51:41.380
每页想多少条呢

51:41.380 --> 51:43.820
每页想是10条数据

51:43.860 --> 51:44.860
10条数据

51:44.860 --> 51:45.620
还有什么

51:45.620 --> 51:46.420
panel number

51:48.060 --> 51:50.180
一共就是多少个数字呢

51:50.180 --> 51:51.220
5个数字

51:51.220 --> 51:51.700
保存

51:51.700 --> 51:52.220
你看一下

51:55.220 --> 51:57.220
那么现在是不是算出来出问题了

51:57.220 --> 51:57.900
对吧

51:57.900 --> 51:59.020
算出来出问题了

51:59.020 --> 52:01.980
他出问题的原因在这

52:01.980 --> 52:03.220
他出问题的原因在这

52:03.220 --> 52:06.260
因为我们现在给他传属性没传了

52:06.260 --> 52:08.540
但是呢给他传的是字不串

52:08.540 --> 52:10.260
给他传的是字不串属性

52:10.260 --> 52:11.820
但他需要的是什么属性呢

52:11.980 --> 52:15.500
需要的是数字

52:15.500 --> 52:15.660
对吧

52:15.660 --> 52:17.660
我们后面的是他把它当成数字来算的

52:17.660 --> 52:19.380
他需要的是一个一个一个有的数字

52:19.380 --> 52:20.220
而不是字不串

52:20.220 --> 52:20.620
因此呢

52:20.620 --> 52:22.820
我是不是要把他写成数字

52:22.820 --> 52:23.140
对吧

52:23.140 --> 52:24.580
要传属性的时候要属性数字

52:24.580 --> 52:25.980
因为这里肯定是字不串嘛

52:25.980 --> 52:27.420
因为我们知道ATM元素里面

52:27.420 --> 52:29.140
所有的属性得到了都是字不串啊

52:29.140 --> 52:30.460
都是字不串

52:30.460 --> 52:30.700
啊

52:30.700 --> 52:32.060
因为之前用过的什么

52:32.060 --> 52:32.700
啊

52:32.700 --> 52:35.220
多么元素里面是不是有个get attribute

52:35.220 --> 52:35.540
对吧

52:35.540 --> 52:38.820
get attribute得到的属性值是一个字不串啊

52:38.820 --> 52:40.300
但是我们需要给他的数字

52:40.300 --> 52:41.780
那么怎么给他数字呢

52:42.340 --> 52:42.740
啊

52:42.740 --> 52:43.180
对

52:43.180 --> 52:43.860
就能说了啊

52:43.860 --> 52:44.860
用vband

52:44.860 --> 52:46.100
因为vband里边

52:47.260 --> 52:48.260
用vband之后呢

52:48.260 --> 52:49.700
这里边是js代码

52:49.700 --> 52:51.060
js代码里边写的是数字

52:51.060 --> 52:52.580
他就是数字啊

52:52.580 --> 52:53.180
所以大家以后呢

52:53.180 --> 52:54.500
要引起众识啊

52:54.500 --> 52:56.980
比方说以后你在在这个写组件的时候呢

52:56.980 --> 52:58.140
要给他传一个属性

52:58.140 --> 52:58.580
这个属性呢

52:58.580 --> 52:59.780
是一个布尔啊

52:59.780 --> 53:01.740
为q或者是为force

53:01.740 --> 53:02.180
对吧

53:02.180 --> 53:03.420
你这样写肯定不行

53:03.420 --> 53:04.060
你这样写的话

53:04.060 --> 53:05.340
他传的是字不串了啊

53:07.020 --> 53:07.980
要给他传数字

53:07.980 --> 53:10.860
把它写成一个就是绑定绑定的字

53:11.260 --> 53:11.940
保存啊

53:11.940 --> 53:12.260
看一下

53:13.620 --> 53:14.380
说可以了

53:14.380 --> 53:14.740
对吧

53:14.740 --> 53:15.260
说可以了

53:16.380 --> 53:17.780
没问题吧

53:17.780 --> 53:18.340
这就可以了

53:19.380 --> 53:19.700
另外呢

53:19.700 --> 53:22.180
我这里再说一说一句

53:22.180 --> 53:23.660
就是关于这个属性这里呢

53:23.660 --> 53:25.780
他的就是使用的时候呢

53:25.780 --> 53:28.140
可以用短横线命名法

53:28.140 --> 53:30.260
可以用短横线命名法

53:31.620 --> 53:33.900
就这里可以写配级size

53:33.900 --> 53:34.940
这里写配级number

53:34.940 --> 53:35.620
他都是支持的

53:35.620 --> 53:37.180
这两个东西是互通的

53:37.180 --> 53:38.220
这两个东西是互通的

53:39.220 --> 53:41.020
这就是我们刚才记一笔吧

53:41.020 --> 53:41.980
记一笔

53:41.980 --> 53:42.140
啊

53:42.140 --> 53:42.940
状态和属性这里

53:45.700 --> 53:47.060
主键的属性

53:47.060 --> 53:48.220
主键的属性

53:49.860 --> 53:52.940
主键的属性命名

53:52.940 --> 53:59.700
使用短横线或小陀封命名法

53:59.700 --> 54:03.060
使用主键使用主键属性时

54:07.170 --> 54:08.090
应该再这样说啊

54:08.130 --> 54:09.050
声明主键

54:10.530 --> 54:12.770
声明主键的属性

54:14.330 --> 54:16.170
声明主键属性时

54:17.850 --> 54:20.330
使用短横线或小陀封命名法

54:20.330 --> 54:20.970
然后呢

54:20.970 --> 54:22.810
传递主键属性时

54:25.180 --> 54:26.940
也可以使用短横线

54:26.940 --> 54:28.260
或者是小陀封命名法

54:29.580 --> 54:30.420
都是支持的啊

54:30.420 --> 54:31.220
都是支持的

54:31.220 --> 54:32.100
他跟那个命名法

54:32.100 --> 54:33.380
命名规范上跟那个

54:33.380 --> 54:35.580
主键本身的名字的区别就在于

54:35.580 --> 54:36.140
主键呢

54:36.140 --> 54:38.620
他是短横线或大陀封

54:38.700 --> 54:40.540
属性的是短横线或小陀封

54:42.260 --> 54:42.380
好

54:42.380 --> 54:45.020
那么比较刚什么叫声明主键属性

54:45.020 --> 54:46.300
这里就在声明主键属性

54:46.300 --> 54:48.420
就说我的主键需要哪些数据

54:48.420 --> 54:49.580
你给我传过来

54:49.580 --> 54:51.100
而且声明主键属性

54:51.100 --> 54:53.100
那么这边是不是在使用主键属性啊

54:54.300 --> 54:56.340
这边是不是在使用主键属性

54:56.340 --> 54:57.260
对吧

54:57.260 --> 54:59.060
两个地方名字都可以使用短横线

54:59.060 --> 55:00.420
也可以使用小陀封

55:00.420 --> 55:00.900
都没问题

55:02.180 --> 55:04.340
这关于主键属性啊

55:04.340 --> 55:04.820
另外呢

55:04.820 --> 55:05.940
主键属性能及时

55:05.940 --> 55:08.500
还可以更更加精细的控制

55:08.500 --> 55:11.580
比方说像我们这里

55:11.580 --> 55:12.740
像我们这里有的时候呢

55:12.740 --> 55:14.060
我觉得很多分页呢

55:14.060 --> 55:16.460
咱们的系统里边很多分页呢

55:16.460 --> 55:18.460
这个panel number都是5

55:18.460 --> 55:18.900
你看

55:18.900 --> 55:19.940
首先给大家看一下

55:19.940 --> 55:20.980
目前是没问题的啊

55:20.980 --> 55:21.540
是没问题的

55:22.900 --> 55:24.660
那么有可能呢

55:24.660 --> 55:27.340
我们的系统里边大部分的都是5

55:27.340 --> 55:28.380
大部分时候呢

55:28.380 --> 55:30.980
它的currency都是第一页

55:30.980 --> 55:31.940
大部分时候呢

55:31.940 --> 55:33.540
我们的就是page size呢

55:33.540 --> 55:35.020
都是10条数据

55:35.020 --> 55:36.380
每一件是10条数据

55:36.380 --> 55:37.980
那么我们每一次使用这个主键

55:37.980 --> 55:39.620
都要去重复传递这些东西

55:39.620 --> 55:41.300
是不是显得特别麻烦啊

55:41.300 --> 55:41.900
对吧

55:41.900 --> 55:42.940
是不是显得特别麻烦

55:44.300 --> 55:46.020
每次都要重复去重复去传递

55:46.020 --> 55:46.740
是不是特别麻烦

55:50.140 --> 55:52.380
每次都给那种工具调了很烦

55:52.380 --> 55:53.060
那么现在呢

55:53.060 --> 55:54.340
其实属性里边呢

55:54.340 --> 55:56.260
还可以还给我们的一种方式

55:56.260 --> 55:57.860
可以精细的进行控制

55:57.860 --> 55:59.180
那么怎么来控制呢

55:59.180 --> 56:00.340
你就不能用输主了啊

56:00.340 --> 56:02.420
你不能用输主的那种书写方式了

56:02.420 --> 56:03.260
你怎么写呢

56:03.260 --> 56:03.860
你这样子写

56:05.420 --> 56:05.980
看着啊

56:05.980 --> 56:07.260
你这样子写

56:07.300 --> 56:08.460
把属性写成对象

56:09.700 --> 56:10.460
有哪些地方

56:10.460 --> 56:11.700
哪些哪些有哪些属性

56:11.700 --> 56:13.100
咱们有哪些属性

56:13.100 --> 56:15.100
我们刚才写了有配级

56:15.100 --> 56:16.940
没有有corrent

56:16.940 --> 56:18.340
还有什么属性啊

56:18.340 --> 56:19.940
还有那个就是啊

56:21.260 --> 56:22.300
什么

56:22.300 --> 56:22.980
还有就是

56:24.900 --> 56:25.580
page size

56:26.660 --> 56:28.620
还有什么panel number

56:28.620 --> 56:28.940
还有什么

56:30.060 --> 56:30.900
还有那个

56:32.220 --> 56:32.740
page size

56:32.740 --> 56:33.500
头脱啊

56:33.500 --> 56:34.820
是不是一共有这么一些属性

56:34.820 --> 56:35.620
对吧

56:35.620 --> 56:35.860
好

56:35.860 --> 56:37.100
咱们爱带带来写

56:37.140 --> 56:39.140
这个对象里面的属性名

56:39.140 --> 56:42.460
就表示我这个组建需要的属性

56:42.460 --> 56:44.180
表示我这个组建需要的属性

56:44.180 --> 56:46.100
那么当前比较这个属性

56:46.100 --> 56:46.580
这个属性呢

56:46.580 --> 56:48.020
我们可以继续给它配纸

56:48.020 --> 56:49.700
配纸

56:49.700 --> 56:51.060
比方说我们有很多配纸啊

56:51.060 --> 56:52.380
比方说type纸

56:52.380 --> 56:53.700
它的类型是咋了

56:53.700 --> 56:54.940
它的类型是一个数字

56:57.060 --> 56:58.020
是一个number

56:58.020 --> 57:00.500
用number的构造函数来进行约束

57:00.500 --> 57:02.060
于是它的类型是一个数字

57:02.060 --> 57:03.580
那么这个地方我们看一下啊

57:05.140 --> 57:05.820
这个地方呢

57:05.860 --> 57:07.140
page size是一个数字

57:07.140 --> 57:08.100
它是不是也是个数字

57:08.100 --> 57:09.220
它是不是也是个数字

57:09.220 --> 57:11.780
这样是不是可以对属性进行约束啊

57:11.780 --> 57:12.300
对吧

57:12.300 --> 57:13.420
可以对它进行约束

57:13.420 --> 57:14.220
那么这样子一来

57:14.220 --> 57:15.740
我们在用这个属性的时候

57:15.740 --> 57:17.100
如果说我一不小心

57:17.100 --> 57:18.780
传了一个制服刷过去

57:18.780 --> 57:20.900
你看我这也是不传个制服刷过去

57:20.900 --> 57:21.540
你看一下这边

57:23.140 --> 57:24.060
控制台这里

57:24.060 --> 57:25.540
就爆出了

57:25.540 --> 57:27.500
它爆出是爆出来控制台里边的

57:27.500 --> 57:29.260
因为这个是开发错误

57:29.260 --> 57:31.620
是开发者是写单码的人

57:31.620 --> 57:32.820
不小心犯了错误

57:32.820 --> 57:35.260
所以它提醒的是写单码的人

57:35.260 --> 57:36.540
它提醒到控制台里边了

57:36.540 --> 57:38.220
它不是给用户提示的

57:38.220 --> 57:39.500
给用户没什么关系

57:39.500 --> 57:41.260
于是你写单码写错了

57:41.260 --> 57:42.300
那么它告诉你什么

57:42.300 --> 57:44.060
告诉你说type check field

57:44.060 --> 57:45.900
就是你的类型检查错误

57:45.900 --> 57:47.220
它说这个偷偷的属性

57:47.220 --> 57:48.700
它应该是expected

57:48.700 --> 57:50.260
就是它期望的是一个number

57:50.260 --> 57:51.700
但是呢

57:51.700 --> 57:53.060
你给的是一个制服刷

57:53.060 --> 57:54.140
给的是一个制服刷

57:54.140 --> 57:54.460
对吧

57:54.460 --> 57:55.100
通过这些错误了

57:55.100 --> 57:57.180
就可以知道你的问题在哪

57:57.180 --> 57:58.180
其实这个东西呢

57:59.580 --> 58:01.340
这种错误检查呢

58:01.340 --> 58:01.980
太楼了

58:01.980 --> 58:03.260
真的是太楼了

58:03.260 --> 58:04.980
现在我们都用什么错误检查

58:07.260 --> 58:08.460
现在还用什么错误检查

58:08.460 --> 58:10.220
现在都用的是type script

58:11.940 --> 58:13.500
现在咱们用错误检查

58:13.500 --> 58:15.740
都用的是这个type script

58:16.620 --> 58:18.620
这个东西真的是强大

58:18.620 --> 58:20.020
它拿到你运行

58:20.020 --> 58:21.580
根本就不能让你运行

58:22.420 --> 58:25.180
根本不错不错

58:25.180 --> 58:28.100
这个HG这个同学特别特别有前途

58:29.380 --> 58:30.820
它根本就不会让你运行的

58:31.820 --> 58:33.460
直接在这里就爆错了

58:33.460 --> 58:34.860
你在这里写的时候

58:36.140 --> 58:37.660
你在这里写的时候

58:37.660 --> 58:39.220
它根本就不会让你运行

58:39.220 --> 58:40.700
直接就爆错了

58:40.700 --> 58:41.780
运都没犯运行

58:41.780 --> 58:42.660
所以马上改观了

58:45.180 --> 58:47.300
所以说我们以后呢

58:47.300 --> 58:49.900
所以说五幼为什么要更新到3.0

58:49.900 --> 58:51.380
给大家多说一句

58:51.380 --> 58:53.940
五幼现在不是要一直在出3.0吗

58:53.940 --> 58:55.780
花了好大的力气

58:55.780 --> 58:57.100
以前有很多一定问题

58:57.100 --> 58:59.020
它都在一直在解决

58:59.020 --> 59:00.700
其中一个很重要的原因

59:00.740 --> 59:03.100
就是为了去支持TS

59:03.100 --> 59:04.540
支持type script

59:04.540 --> 59:06.020
因为它以前的这种结构

59:06.020 --> 59:08.140
它是没法支持TS的

59:08.140 --> 59:10.060
它能支持你能力一部分支持

59:10.060 --> 59:11.220
但是非常非常劳火

59:11.220 --> 59:13.740
所以说我们可以认为2.0的世界里边

59:13.740 --> 59:16.260
基本上我们不会把五幼跟TS连着用

59:17.460 --> 59:19.220
不会把五幼跟TS连着用

59:20.300 --> 59:22.300
但是3.0过后

59:22.300 --> 59:25.500
那个尤予希当时在知固里边说的

59:25.500 --> 59:27.820
他打算把90%

59:27.820 --> 59:30.500
五幼90%以上的代码进行重构

59:30.500 --> 59:32.420
用TS重新写一遍

59:32.420 --> 59:33.020
TS不难

59:33.020 --> 59:33.980
TS特别特别简单

59:33.980 --> 59:36.300
而且也学习得特别有意思

59:36.300 --> 59:37.860
可以解决点很多问题

59:37.860 --> 59:40.020
特别是皆是都有语言本身的问题

59:40.020 --> 59:41.380
因为这个皆是语言

59:41.380 --> 59:46.060
它天生就不是来做大型应用开发的

59:47.620 --> 59:49.500
天生就不是来做大型应用开发的

59:49.500 --> 59:50.820
它当时就是出现那个语言

59:50.820 --> 59:53.260
它就是为了做一些页面上的小的效果

59:53.260 --> 59:55.180
要做大型应用的开发的话

59:55.180 --> 59:56.980
现在虽然说更新了很多的版本了

59:56.980 --> 59:59.340
更新了ES6,ES7,ESnext

59:59.700 --> 01:00:00.620
更新了很多的版本

01:00:00.620 --> 01:00:03.460
但是还是有一些天生的缺陷

01:00:03.460 --> 01:00:06.380
对于有些人说玩具语言

01:00:06.380 --> 01:00:10.860
需要一些工具或者是一些新的语法

01:00:10.860 --> 01:00:14.100
来解决这些问题

01:00:14.100 --> 01:00:16.220
我们这里不撤远了

01:00:16.220 --> 01:00:18.580
那么这里目前只能用控制台

01:00:18.580 --> 01:00:20.220
这种方式来提示

01:00:20.220 --> 01:00:22.020
这里边除了这个东西之外

01:00:22.020 --> 01:00:23.580
其实还可以约束

01:00:23.580 --> 01:00:25.620
还有这个required

01:00:25.620 --> 01:00:26.580
作为去

01:00:26.580 --> 01:00:28.220
就表示是必填的

01:00:28.220 --> 01:00:29.940
比方说我们这个toto

01:00:29.940 --> 01:00:30.980
toto是必填的

01:00:30.980 --> 01:00:31.980
总数据量有多少

01:00:31.980 --> 01:00:33.660
我也不知道一种数据量有多少

01:00:33.660 --> 01:00:34.780
你必须要填一些

01:00:34.780 --> 01:00:37.100
如果说你不小心忘了填这个toto

01:00:37.100 --> 01:00:38.820
保存

01:00:38.820 --> 01:00:39.580
你看

01:00:39.580 --> 01:00:40.460
他说

01:00:40.460 --> 01:00:42.020
你确实了一个属性

01:00:42.020 --> 01:00:43.100
toto

01:00:43.100 --> 01:00:43.980
再说一句

01:00:43.980 --> 01:00:45.980
这个东西在ts里面

01:00:45.980 --> 01:00:47.100
在TypeScript里面

01:00:47.100 --> 01:00:48.660
根本就不会让你运行

01:00:48.660 --> 01:00:49.540
马上就给你爆错了

01:00:49.540 --> 01:00:52.100
你写到这里就给你爆错了

01:00:52.100 --> 01:00:54.300
这里就是一个必须要填一些

01:00:54.300 --> 01:00:56.020
required表示必填的

01:00:56.020 --> 01:00:57.860
那么这里还可以给默认值

01:00:58.780 --> 01:00:59.540
当前一码

01:00:59.540 --> 01:01:01.780
default默认值是1

01:01:01.780 --> 01:01:06.580
那么这个配级赛是默认值

01:01:06.580 --> 01:01:09.260
default默认值是

01:01:09.260 --> 01:01:10.500
或者是10吗

01:01:10.500 --> 01:01:11.620
就10吗

01:01:11.620 --> 01:01:13.980
那么这个默认值是5

01:01:13.980 --> 01:01:15.380
如果说你不传递这个属性

01:01:15.380 --> 01:01:16.780
它就用默认值

01:01:16.780 --> 01:01:17.220
那么有了

01:01:17.220 --> 01:01:18.780
这个东西没有默认值

01:01:18.780 --> 01:01:19.980
我没关系默认值

01:01:19.980 --> 01:01:21.780
那么有了默认值之后

01:01:21.780 --> 01:01:23.580
那么这里是不是可以不传了

01:01:23.580 --> 01:01:27.020
这个corrents可以不传了

01:01:27.060 --> 01:01:28.340
头头是不是可以不传了

01:01:28.340 --> 01:01:28.700
对吧

01:01:28.700 --> 01:01:30.220
这些东西都可以不传了

01:01:30.220 --> 01:01:30.860
对不对

01:01:30.860 --> 01:01:32.660
拍了纳门是不是可以不传了

01:01:32.660 --> 01:01:33.780
对不对

01:01:33.780 --> 01:01:35.020
就这么个意思

01:01:35.020 --> 01:01:36.180
你只需要传

01:01:36.180 --> 01:01:38.340
头头得传

01:01:38.340 --> 01:01:40.460
你只需要传一个头头就行了

01:01:40.460 --> 01:01:43.700
现在就使用默认值用完事了

01:01:43.700 --> 01:01:45.500
保存

01:01:45.500 --> 01:01:47.100
你看

01:01:47.100 --> 01:01:49.580
头头只有10

01:01:49.580 --> 01:01:50.900
100

01:01:50.900 --> 01:01:51.620
保存

01:01:51.620 --> 01:01:53.340
你看是不是出来

01:01:53.340 --> 01:01:54.540
对吧

01:01:54.540 --> 01:01:54.740
好

01:01:54.740 --> 01:01:56.540
那么接下来

01:01:56.580 --> 01:02:00.220
还没完

01:02:00.220 --> 01:02:03.220
你看现在能分业吗

01:02:03.220 --> 01:02:04.740
还有一个说的事

01:02:04.740 --> 01:02:06.940
就是刚才我们把他写成属性过后

01:02:06.940 --> 01:02:10.100
你会发现属性在我们的使用过程中

01:02:10.100 --> 01:02:11.820
跟那个使用data是一样的

01:02:11.820 --> 01:02:13.140
也是这点属性

01:02:13.140 --> 01:02:14.020
说明啥呢

01:02:14.020 --> 01:02:16.460
说明属性

01:02:16.460 --> 01:02:19.180
属性也会

01:02:19.180 --> 01:02:22.180
会被提升到实力中

01:02:22.180 --> 01:02:23.580
这个实力不是无诱实力的

01:02:23.580 --> 01:02:25.820
是无诱逐渐实力

01:02:25.820 --> 01:02:28.820
会被提升到无诱逐渐实力中

01:02:28.860 --> 01:02:31.140
我们这个上战略课我们也说到这个问题

01:02:31.140 --> 01:02:32.980
就是我们写组件的时候

01:02:32.980 --> 01:02:34.540
这里边写的是个对象

01:02:34.540 --> 01:02:36.700
但是这个对象我们习惯它叫做组件

01:02:36.700 --> 01:02:37.940
但实际上不是组件

01:02:37.940 --> 01:02:40.220
它叫做组件配置对象

01:02:40.220 --> 01:02:42.380
这只是一个组件配置对象

01:02:42.380 --> 01:02:44.660
那么这个配置对象它到时候

01:02:44.660 --> 01:02:48.300
它的内部会帮你生成一个组件实力

01:02:48.300 --> 01:02:50.180
那么这个组件实力跟那个无诱实力

01:02:50.180 --> 01:02:51.660
跟另外一个无诱实力差不多

01:02:51.660 --> 01:02:52.860
差不多的意思

01:02:52.860 --> 01:02:54.780
那么这个组件实力呢

01:02:54.780 --> 01:02:57.860
它里面也是会挂载一些data

01:02:57.900 --> 01:02:58.700
没设置啊

01:02:58.700 --> 01:03:00.300
还有什么probs

01:03:00.300 --> 01:03:03.020
就是属性它也会挂载到无诱组件实力当中

01:03:03.020 --> 01:03:04.300
所以说你在这里呢

01:03:04.300 --> 01:03:05.580
在组件里边你写的

01:03:05.580 --> 01:03:06.940
虽然你写的属性

01:03:06.940 --> 01:03:08.500
写的是属性不是data

01:03:08.500 --> 01:03:10.100
那么这里边仍然可以直接使用

01:03:10.100 --> 01:03:10.340
你看

01:03:10.340 --> 01:03:13.420
this is total, this is page size

01:03:13.420 --> 01:03:16.100
这件问题是它为什么会爆出

01:03:16.100 --> 01:03:19.580
它为什么会爆出

01:03:19.580 --> 01:03:19.980
什么意思

01:03:19.980 --> 01:03:21.100
咱们读一下它的错误

01:03:21.100 --> 01:03:23.100
avoid 避免

01:03:23.100 --> 01:03:27.340
matting 更改 变化

01:03:27.340 --> 01:03:30.100
probs directly

01:03:30.100 --> 01:03:33.940
就是你应该避免直接更改属性

01:03:33.940 --> 01:03:35.020
它就这么一个意思

01:03:35.020 --> 01:03:36.460
为什么它会爆错

01:03:36.460 --> 01:03:38.100
因为当我们点下一页的时候

01:03:38.100 --> 01:03:40.180
是不是调了这个函数

01:03:40.180 --> 01:03:41.220
是调了这个函数

01:03:41.220 --> 01:03:42.260
这个函数里边在干嘛

01:03:42.260 --> 01:03:43.340
是不是在改这个属性

01:03:43.340 --> 01:03:44.780
它在改的不是数据

01:03:44.780 --> 01:03:46.020
改的是属性

01:03:46.020 --> 01:03:47.700
改的不是数据

01:03:47.700 --> 01:03:53.540
但是属性是不允许更改的

01:03:53.540 --> 01:03:55.420
非常非常重要这句话

01:03:55.420 --> 01:03:56.620
我告诉你这句话面试的时候

01:03:56.620 --> 01:03:57.780
考试不会考理

01:03:57.780 --> 01:03:59.620
因为它太基本了

01:03:59.620 --> 01:04:04.540
主见的属性是指读的

01:04:04.540 --> 01:04:06.900
不允许更改

01:04:06.900 --> 01:04:07.860
属性是指读的

01:04:07.860 --> 01:04:09.180
不允许更改

01:04:09.180 --> 01:04:10.060
这是为什么呢

01:04:10.060 --> 01:04:13.220
我说为什么会有这样的理念呢

01:04:13.220 --> 01:04:19.980
根本原因是要保证单项数据流

01:04:19.980 --> 01:04:20.660
我告诉你

01:04:20.660 --> 01:04:21.860
光是个单项数据流

01:04:21.860 --> 01:04:23.580
我可以拿一节课给你讲

01:04:23.580 --> 01:04:25.060
讲它的历史远远

01:04:25.060 --> 01:04:29.020
这里我简单的说两个点就行了

01:04:29.020 --> 01:04:30.820
什么叫单项数据流

01:04:30.820 --> 01:04:33.660
就是数据从一个方向流入

01:04:33.660 --> 01:04:35.380
从一个方向流出

01:04:35.380 --> 01:04:36.940
这就是单项数据流

01:04:36.940 --> 01:04:39.140
我们的单项数据流的概念是哪来的呢

01:04:39.140 --> 01:04:41.260
是来自于函数式编程

01:04:41.260 --> 01:04:44.500
比方说我这里写个函数

01:04:44.500 --> 01:04:47.800
A B

01:04:47.800 --> 01:04:49.600
A2 A加B

01:04:49.600 --> 01:04:51.000
这就是个单项数据流

01:04:51.000 --> 01:04:58.390
当我们雕用函数的时候

01:04:58.390 --> 01:04:59.550
3 2

01:04:59.550 --> 01:05:00.270
哪个是数据

01:05:00.270 --> 01:05:01.230
A和B是不是数据

01:05:01.230 --> 01:05:02.230
A和B不是数据

01:05:02.230 --> 01:05:04.630
3和2是数据

01:05:04.630 --> 01:05:10.750
我这个数据是我传给函数的

01:05:10.750 --> 01:05:13.390
那么这个函数把这个数据拿到过后

01:05:13.390 --> 01:05:15.110
有没有改这个数据没有改

01:05:15.110 --> 01:05:17.350
它直接给你计算返回一个新的数据

01:05:17.350 --> 01:05:19.510
这就是单项数据流

01:05:19.510 --> 01:05:22.390
那么什么情况下会破坏单项数据流呢

01:05:22.390 --> 01:05:24.430
什么情况下会破坏单项数据流呢

01:05:24.430 --> 01:05:28.690
比方说这里是OB借1

01:05:28.690 --> 01:05:31.740
OB借2

01:05:31.740 --> 01:05:32.500
OB借1

01:05:32.500 --> 01:05:33.940
调Number

01:05:33.940 --> 01:05:36.620
加上OB借2调Number

01:05:36.620 --> 01:05:38.300
我们这里传递的是这个

01:05:38.300 --> 01:05:40.940
传递的是这个

01:05:40.940 --> 01:05:44.730
Number为3

01:05:44.730 --> 01:05:46.330
Number为4

01:05:46.330 --> 01:05:47.530
你看传两个对象进去

01:05:47.530 --> 01:05:48.850
传两个对象进去

01:05:48.850 --> 01:05:50.250
数据传进去了

01:05:50.250 --> 01:05:52.810
然后没有更改任何数据

01:05:52.810 --> 01:05:54.170
直接给你返回一个结果

01:05:54.170 --> 01:05:56.210
这就是单项数据流

01:05:56.210 --> 01:05:58.970
那么如果说你在函数里边

01:05:58.970 --> 01:06:01.770
你做了这么一些操作出问题了

01:06:01.810 --> 01:06:04.130
这就不是单项数据流了

01:06:04.130 --> 01:06:05.610
有些人知道这东西叫什么

01:06:05.610 --> 01:06:07.610
叫副作用

01:06:07.610 --> 01:06:09.130
叫副作用

01:06:09.130 --> 01:06:10.010
你动了什么

01:06:10.010 --> 01:06:11.290
动了参数

01:06:11.290 --> 01:06:12.170
动了什么

01:06:12.170 --> 01:06:13.530
动了或者动了外面的东西

01:06:13.530 --> 01:06:14.610
或者是使用了异布

01:06:14.610 --> 01:06:17.490
这些都会叫做副作用

01:06:17.490 --> 01:06:19.090
那么为什么VU里边

01:06:19.090 --> 01:06:20.930
它要保证单项数据流呢

01:06:20.930 --> 01:06:22.650
一波不光是VU像Rect

01:06:22.650 --> 01:06:24.290
它也是要保证单项数据流

01:06:24.290 --> 01:06:24.930
为什么呢

01:06:24.930 --> 01:06:28.850
因为单项数据流是最不容易出问题的

01:06:28.850 --> 01:06:30.730
最容易被人类理解的

01:06:30.730 --> 01:06:33.370
你想啊以后我们开发的系统很复杂

01:06:33.370 --> 01:06:34.810
主见是不是非常非常多

01:06:34.810 --> 01:06:37.610
主见的千套层次非常非常深

01:06:37.610 --> 01:06:38.770
那你可以理解为

01:06:38.770 --> 01:06:39.890
一个函数调另一个函数

01:06:39.890 --> 01:06:40.970
一个函数调另一个函数

01:06:40.970 --> 01:06:42.770
千套的层次非常非常深

01:06:42.770 --> 01:06:45.170
如果说你在某一个数据出问题了

01:06:45.170 --> 01:06:46.970
你没有使用单项数据流

01:06:46.970 --> 01:06:48.250
你某一个数据出问题的

01:06:48.250 --> 01:06:50.770
你知不知道是哪一个函数把数据流给你改了

01:06:50.770 --> 01:06:51.850
因为任一何一个函数

01:06:51.850 --> 01:06:54.370
是不是都可以改立的数据

01:06:54.370 --> 01:06:56.050
它都有权力改立的数据

01:06:56.050 --> 01:06:56.650
是不是

01:06:56.650 --> 01:06:58.610
那你不好调是这个问题了

01:06:58.610 --> 01:07:02.050
而且这种错终复杂

01:07:02.050 --> 01:07:04.130
它的关联系非常非常多了

01:07:04.130 --> 01:07:05.770
如果说你是单项数据流的话

01:07:05.770 --> 01:07:09.050
由于我的函数里面是不可能更改我的数据的

01:07:09.050 --> 01:07:14.490
我的主见里面是不可能更改我的数据的

01:07:14.490 --> 01:07:17.730
所以说呢数据属于谁负责

01:07:17.730 --> 01:07:18.650
谁数据错了

01:07:18.650 --> 01:07:21.090
那么你数据是你的你负责

01:07:21.090 --> 01:07:22.450
这样子非常容易调试

01:07:22.450 --> 01:07:24.210
也容易被理解

01:07:24.210 --> 01:07:25.210
单项数据流呢

01:07:25.210 --> 01:07:27.010
是非常容易被人类理解的东西

01:07:27.010 --> 01:07:27.850
就是输入输出

01:07:27.850 --> 01:07:28.570
我给你一个东西

01:07:28.570 --> 01:07:30.130
你给我一个东西

01:07:30.130 --> 01:07:32.050
就单项数据流

01:07:32.050 --> 01:07:33.570
我这能解释清楚

01:07:33.570 --> 01:07:34.810
要更加强确解释的话

01:07:34.810 --> 01:07:36.850
要只要说到那个很深

01:07:36.850 --> 01:07:39.530
就是很多东西了

01:07:39.530 --> 01:07:40.890
我在rex课程里面

01:07:40.890 --> 01:07:42.850
单项数据流我记得好像讲了一节课

01:07:42.850 --> 01:07:46.530
专门来讲的一节课

01:07:46.530 --> 01:07:47.410
所以说不用了

01:07:47.410 --> 01:07:50.010
它要保证单项数据流

01:07:50.010 --> 01:07:54.330
数据属于谁的谁负责

01:07:54.330 --> 01:07:56.370
那么这个数据属于谁的

01:07:56.370 --> 01:07:57.690
属于谁的呢

01:07:57.730 --> 01:07:58.970
属于Pager的

01:07:58.970 --> 01:07:59.610
对吧

01:07:59.610 --> 01:08:01.170
属于这个App逐渐的

01:08:01.170 --> 01:08:02.170
属于这个逐渐的

01:08:02.170 --> 01:08:03.530
因为是这个逐渐给他传的数据

01:08:03.530 --> 01:08:04.490
他没有传给他摸认字

01:08:04.490 --> 01:08:06.570
摸认字也属于我给你的数据

01:08:06.570 --> 01:08:08.490
因为你是属相

01:08:08.490 --> 01:08:10.890
属相是别人给我的数据

01:08:10.890 --> 01:08:12.570
别人给我的数据是别人的数据

01:08:12.570 --> 01:08:14.410
我怎么有权力改呢

01:08:14.410 --> 01:08:15.570
它严格进行的限制

01:08:15.570 --> 01:08:17.490
绝对不允许你这样改

01:08:17.490 --> 01:08:19.370
不能让你这样改

01:08:19.370 --> 01:08:20.650
所以说我们可以认为

01:08:20.650 --> 01:08:24.970
这个Pager里面的数据是属于他的

01:08:24.970 --> 01:08:26.690
表上给他个Biden

01:08:26.690 --> 01:08:28.290
给他一个Current

01:08:28.290 --> 01:08:30.370
当前是第二页

01:08:30.370 --> 01:08:33.290
我给你的是第二页

01:08:33.290 --> 01:08:33.770
对吧

01:08:33.770 --> 01:08:34.850
总数是一百十五

01:08:34.850 --> 01:08:35.730
我给你的数据

01:08:35.730 --> 01:08:39.770
里面没有任何权力更改我的数据

01:08:39.770 --> 01:08:42.370
那么如果说我要改怎么办的

01:08:42.370 --> 01:08:44.370
只能让Pager来改

01:08:44.370 --> 01:08:45.090
只能让他来

01:08:45.090 --> 01:08:46.370
只能让这个组件来改

01:08:46.370 --> 01:08:48.130
因为这个数据是这个组件给你的

01:08:48.130 --> 01:08:49.410
所以说你只能让这个

01:08:49.410 --> 01:08:51.210
Pager组件来改这个数据

01:08:51.210 --> 01:08:54.330
好比方说举个例子

01:08:54.330 --> 01:08:55.370
举个例子

01:08:55.410 --> 01:08:57.770
比方说Pager组件的数据要改

01:08:57.770 --> 01:08:59.970
要改的话是不是得有个Data

01:08:59.970 --> 01:09:02.690
App组件里面是不是得有个Data

01:09:02.690 --> 01:09:03.330
得有吧

01:09:03.330 --> 01:09:04.090
因为它数据要变

01:09:04.090 --> 01:09:05.810
你不能用把字面来变

01:09:05.810 --> 01:09:06.930
肯定得有个变量

01:09:06.930 --> 01:09:07.890
所以它有个Data

01:09:07.890 --> 01:09:10.130
比方到Data里面返回一个数据

01:09:10.130 --> 01:09:11.250
注意我们的写的组件是哪

01:09:11.250 --> 01:09:13.530
是App这个组件

01:09:13.530 --> 01:09:14.370
你这里

01:09:14.370 --> 01:09:17.370
用计词本来画一个组

01:09:17.370 --> 01:09:18.130
App

01:09:18.130 --> 01:09:19.130
这是Pager

01:09:19.130 --> 01:09:20.650
在App里面使用Pager

01:09:20.650 --> 01:09:21.530
数据是哪的

01:09:21.530 --> 01:09:23.250
数据是属于App的

01:09:23.250 --> 01:09:24.210
App里面有什么数据

01:09:24.250 --> 01:09:26.610
有什么Current

01:09:26.610 --> 01:09:29.010
当前页有什么Page Size

01:09:29.010 --> 01:09:30.370
Page Size里都没了

01:09:30.370 --> 01:09:32.610
就用默认字也不会动的

01:09:32.610 --> 01:09:35.530
还有什么Total这个数据

01:09:35.530 --> 01:09:37.970
是不是属于它的还有什么Page Size

01:09:37.970 --> 01:09:39.690
Page Size

01:09:39.690 --> 01:09:41.210
是不是属于它的

01:09:41.210 --> 01:09:41.770
对不对

01:09:41.770 --> 01:09:43.690
好那么我们在这里

01:09:43.690 --> 01:09:44.770
写上这个数据

01:09:44.770 --> 01:09:45.650
Current

01:09:45.650 --> 01:09:48.450
比方说第一页

01:09:48.450 --> 01:09:51.610
Total 100

01:09:51.610 --> 01:09:54.010
Page Size 10

01:09:54.050 --> 01:09:54.970
就个例子

01:09:55.970 --> 01:09:56.450
Current

01:09:56.450 --> 01:09:57.250
那么这里

01:09:57.250 --> 01:10:00.010
是不是应该来自于Data里面的Current

01:10:00.010 --> 01:10:02.010
Total是不是来自于Data里面的Total

01:10:02.010 --> 01:10:03.810
然后Page Size

01:10:03.810 --> 01:10:05.810
Page Size我们可以这样写

01:10:05.810 --> 01:10:09.010
是不是来自于Data里面的Page Size

01:10:09.010 --> 01:10:10.010
对吧

01:10:10.010 --> 01:10:11.770
所以应该这样写

01:10:11.770 --> 01:10:12.290
对不对

01:10:12.290 --> 01:10:13.690
应该这样写

01:10:13.690 --> 01:10:15.090
好那么要改的话

01:10:15.090 --> 01:10:16.650
也只能是我来改

01:10:16.650 --> 01:10:18.690
你没有任何权力更改

01:10:18.690 --> 01:10:19.370
那么你看一下

01:10:19.370 --> 01:10:21.450
现在我们写好之后

01:10:21.450 --> 01:10:22.050
你能改吗

01:10:22.050 --> 01:10:22.570
我们看一下

01:10:23.530 --> 01:10:24.370
来这边

01:10:24.370 --> 01:10:25.610
这句话是不能要了

01:10:25.610 --> 01:10:26.770
你再直接修改属性

01:10:26.770 --> 01:10:27.970
是不行的

01:10:27.970 --> 01:10:30.370
不可以直接修改属性

01:10:31.370 --> 01:10:32.650
好那么现在我们要怎么改

01:10:32.650 --> 01:10:35.370
点击下一页

01:10:35.370 --> 01:10:36.250
是没作用

01:10:36.250 --> 01:10:37.410
为什么没作用

01:10:37.410 --> 01:10:39.130
因为编没编

01:10:39.130 --> 01:10:40.210
这些数据编没编

01:10:40.210 --> 01:10:40.850
点下一页

01:10:40.850 --> 01:10:41.730
它运行这个函数

01:10:41.730 --> 01:10:42.890
有数据变化吗

01:10:42.890 --> 01:10:44.850
是没有任何数据变化

01:10:44.850 --> 01:10:45.250
对不对

01:10:45.250 --> 01:10:46.890
没有任何数据变化

01:10:46.890 --> 01:10:48.650
所以说它自然而然不会刷新

01:10:48.650 --> 01:10:49.050
不会刷新

01:10:49.050 --> 01:10:50.890
它不会造成任何变化

01:10:50.890 --> 01:10:52.050
你看这代码里面

01:10:52.090 --> 01:10:53.090
有没有数据变化

01:10:53.090 --> 01:10:54.490
是没有任何数据变化

01:10:54.490 --> 01:10:55.290
对吧

01:10:55.290 --> 01:10:56.410
它没有data

01:10:56.410 --> 01:10:59.940
属性又不能改

01:10:59.940 --> 01:11:02.780
所以说属性跟那个状态的最大的区别

01:11:02.780 --> 01:11:03.460
是指读的

01:11:03.460 --> 01:11:04.340
它不允许更改

01:11:04.340 --> 01:11:05.700
所以说这里没有改任何东西

01:11:05.700 --> 01:11:07.300
界面自然而然没有刷新

01:11:07.300 --> 01:11:08.060
那么怎么改了

01:11:08.060 --> 01:11:10.100
我自己又不能改

01:11:10.100 --> 01:11:11.740
是不是只能通知

01:11:11.740 --> 01:11:12.980
通知谁

01:11:12.980 --> 01:11:15.300
通知这边去更改

01:11:15.300 --> 01:11:16.260
因为这个组

01:11:16.260 --> 01:11:17.980
这个组件在这里边使用的

01:11:17.980 --> 01:11:19.540
所以只能在这里边更改

01:11:19.540 --> 01:11:20.420
明白我的意思吗

01:11:20.420 --> 01:11:22.540
在app里边使用了陪脚组件

01:11:22.540 --> 01:11:23.340
如果说陪脚

01:11:23.380 --> 01:11:24.420
希望变数据

01:11:24.420 --> 01:11:26.140
但是它自己又没有权力变数据

01:11:26.140 --> 01:11:27.260
不是我的

01:11:27.260 --> 01:11:28.260
那么怎么办

01:11:28.260 --> 01:11:29.300
扔出事件

01:11:32.140 --> 01:11:32.940
扔出事件

01:11:34.380 --> 01:11:34.700
好

01:11:34.700 --> 01:11:35.820
比方说

01:11:35.820 --> 01:11:37.420
咱们比方说举个例子

01:11:37.420 --> 01:11:39.980
假设事件已经做好了

01:11:39.980 --> 01:11:41.380
那么事件我们怎么用呢

01:11:41.380 --> 01:11:42.260
看着啊

01:11:42.260 --> 01:11:43.140
我们事件怎么用

01:11:44.300 --> 01:11:46.060
事件不是这样写的吗

01:11:46.060 --> 01:11:47.820
假设这个陪脚里面有个n

01:11:47.820 --> 01:11:49.940
就是叫做陪脚

01:11:49.940 --> 01:11:51.020
叫做签几事件

01:11:51.020 --> 01:11:52.380
叫做签几事件

01:11:52.540 --> 01:11:53.580
这里是不是写个签几

01:11:53.580 --> 01:11:55.220
驻车签几事件

01:11:55.220 --> 01:11:56.540
那么这里我们写个函数

01:11:56.540 --> 01:11:57.980
handle change

01:11:57.980 --> 01:11:59.260
或者不写函数了

01:11:59.260 --> 01:12:02.260
直接把current设置为什么

01:12:02.260 --> 01:12:03.860
设置为event

01:12:03.860 --> 01:12:05.940
你给我传一个事件参数过来

01:12:05.940 --> 01:12:07.660
你给我传一个事件参数过来

01:12:07.660 --> 01:12:09.780
那么我把你参数就是新的页码

01:12:09.780 --> 01:12:10.860
我把你新的页码

01:12:10.860 --> 01:12:12.220
重新复制给这个数据

01:12:12.220 --> 01:12:13.180
current

01:12:13.180 --> 01:12:14.300
重新复制给这个数据

01:12:14.300 --> 01:12:15.220
current

01:12:15.220 --> 01:12:15.980
假设

01:12:15.980 --> 01:12:17.180
我们先是假设

01:12:17.180 --> 01:12:18.620
有这么个事件

01:12:18.620 --> 01:12:20.300
但实际上有这个事件吗

01:12:20.300 --> 01:12:21.380
是没有这个事件

01:12:21.420 --> 01:12:22.660
所以一切都没变化

01:12:22.660 --> 01:12:24.060
根本就没有这个事件

01:12:24.060 --> 01:12:25.940
因为培教是我们自己写的组件

01:12:25.940 --> 01:12:27.220
它里边哪有这个事件

01:12:27.220 --> 01:12:28.540
那么这就受到一个问题

01:12:28.540 --> 01:12:33.450
如何在组件里面制作一个自定义事件

01:12:33.450 --> 01:12:38.250
在组件中触发事件

01:12:38.250 --> 01:12:40.490
它的方式是这样子

01:12:40.490 --> 01:12:41.610
这个单码直接来

01:12:41.610 --> 01:12:42.650
Z实际上

01:12:42.650 --> 01:12:44.250
amat

01:12:44.250 --> 01:12:47.450
这里是事件名

01:12:47.450 --> 01:12:49.610
这个事件名可以是

01:12:49.610 --> 01:12:50.490
小铜锋命名法

01:12:50.490 --> 01:12:51.850
也可以是

01:12:51.850 --> 01:12:53.570
网红线命名法

01:12:53.570 --> 01:12:56.050
后面是事件参数

01:12:56.050 --> 01:12:58.730
一次写

01:12:58.730 --> 01:12:59.250
就行了

01:12:59.250 --> 01:13:01.210
这是它的触发事件的方式

01:13:01.210 --> 01:13:03.170
那么这个多了amat里面知道

01:13:03.170 --> 01:13:04.970
应该就是属于什么

01:13:04.970 --> 01:13:07.930
实力里面的内置属性

01:13:07.930 --> 01:13:09.010
内置成员

01:13:09.010 --> 01:13:10.410
它加了个多了

01:13:10.410 --> 01:13:11.450
那么这个函数

01:13:11.450 --> 01:13:13.170
它就是用来触发事件的

01:13:13.170 --> 01:13:14.450
那么我们你看一下我们这里

01:13:14.450 --> 01:13:15.130
我们知道

01:13:15.130 --> 01:13:17.690
这个时候应该变叶码了

01:13:17.690 --> 01:13:19.610
应该

01:13:19.610 --> 01:13:21.810
应该变

01:13:21.810 --> 01:13:26.640
变叶码

01:13:26.640 --> 01:13:31.800
但是由于数据不是我的

01:13:31.800 --> 01:13:33.960
我不能改

01:13:33.960 --> 01:13:37.880
所以只能触发事件

01:13:37.880 --> 01:13:39.680
让谁呢

01:13:39.680 --> 01:13:41.360
让副组件

01:13:41.360 --> 01:13:42.240
什么叫副组件

01:13:42.240 --> 01:13:45.240
就是使用这个组件的人

01:13:45.240 --> 01:13:47.960
使用这个组件的组件

01:13:47.960 --> 01:13:50.120
哪个组件在使用我

01:13:50.120 --> 01:13:52.400
收到通知

01:13:52.440 --> 01:13:54.320
我们就只能做这件事情

01:13:54.320 --> 01:13:54.920
怎么收到通知

01:13:54.920 --> 01:13:56.080
就是触发事件

01:13:56.080 --> 01:13:56.640
好

01:13:56.640 --> 01:13:57.600
我们这里怎么写

01:13:57.600 --> 01:13:59.880
Z实点amat触发事件

01:13:59.880 --> 01:14:01.000
我动不了

01:14:01.000 --> 01:14:01.720
我只能告诉你

01:14:01.720 --> 01:14:02.800
我这里触发了一个事件

01:14:02.800 --> 01:14:03.920
什么事件呢

01:14:03.920 --> 01:14:05.600
数一变写名字

01:14:05.600 --> 01:14:06.440
名字已经想起了

01:14:06.440 --> 01:14:08.280
写ABC数一变写

01:14:08.280 --> 01:14:10.000
你这里写的是啥

01:14:10.000 --> 01:14:11.720
那么这边用这个实验的时候

01:14:11.720 --> 01:14:12.520
叫用啥

01:14:12.520 --> 01:14:14.200
就这么个意思

01:14:14.200 --> 01:14:15.400
你看懂吗

01:14:15.400 --> 01:14:17.200
你看懂吗

01:14:17.200 --> 01:14:18.040
这边写的是啥

01:14:18.040 --> 01:14:19.360
那么这边是叫用啥

01:14:19.360 --> 01:14:20.600
所以说这里边我们比较说

01:14:20.600 --> 01:14:21.800
该一个有意义的名字

01:14:21.800 --> 01:14:22.800
欠几

01:14:22.800 --> 01:14:23.800
或者叫配几欠几

01:14:23.800 --> 01:14:25.400
也行

01:14:25.400 --> 01:14:26.200
然后呢

01:14:26.200 --> 01:14:27.040
有没有参数呢

01:14:27.040 --> 01:14:29.120
我当然要把新的新的研发给你

01:14:29.120 --> 01:14:30.680
我是不是要把新的研发给你

01:14:30.680 --> 01:14:31.160
对吧

01:14:31.160 --> 01:14:35.700
触发事件

01:14:35.700 --> 01:14:36.540
事件这里有点蒙

01:14:36.540 --> 01:14:38.180
因为事件这里为什么会蒙呢

01:14:38.180 --> 01:14:39.220
有时候就是

01:14:39.220 --> 01:14:41.580
它其实是一种回调模式

01:14:41.580 --> 01:14:44.900
它是一种回调模式

01:14:44.900 --> 01:14:46.180
就是说有的时候呢

01:14:46.180 --> 01:14:48.100
我知道发生了什么事

01:14:48.100 --> 01:14:48.580
但是呢

01:14:48.580 --> 01:14:50.580
我不知道我要干嘛

01:14:50.580 --> 01:14:52.100
这就是需要回调了

01:14:52.100 --> 01:14:53.020
需要回调了

01:14:53.020 --> 01:14:54.620
比方说像这个Pager

01:14:54.620 --> 01:14:56.540
我在这个时候是不是应该变业码了

01:14:56.540 --> 01:14:58.980
我知道这个时候一定有事情发生了

01:14:58.980 --> 01:14:59.540
但是呢

01:14:59.540 --> 01:15:00.980
我不能做事情

01:15:00.980 --> 01:15:02.980
事情不是我来做的

01:15:02.980 --> 01:15:04.780
不是我来做的

01:15:04.780 --> 01:15:05.300
所以说呢

01:15:05.300 --> 01:15:06.220
我只能触发事件

01:15:06.220 --> 01:15:09.340
让别人去做这个事情

01:15:09.340 --> 01:15:11.060
为了给你提供了这么一种机制

01:15:11.060 --> 01:15:13.300
让你来触发这个事件

01:15:13.300 --> 01:15:14.780
让你来触发这么一个事件

01:15:14.780 --> 01:15:17.140
就是这种方式

01:15:17.140 --> 01:15:17.540
其实呢

01:15:17.540 --> 01:15:18.380
这里呢

01:15:18.380 --> 01:15:21.620
如果说你要自己用原码实现的话

01:15:21.780 --> 01:15:22.780
我怎么又情不自禁

01:15:22.780 --> 01:15:23.780
就讲了原码实现了

01:15:23.780 --> 01:15:27.060
最近讲React整天就讲了那种原码实现

01:15:27.060 --> 01:15:29.500
啥都得手写一遍

01:15:29.500 --> 01:15:31.580
就是其实这也是一个监听的模式

01:15:31.580 --> 01:15:32.580
也就是你这里呢

01:15:32.580 --> 01:15:33.460
给它写了什么

01:15:33.460 --> 01:15:34.780
这里边写一个设计

01:15:34.780 --> 01:15:36.420
它会放到一个函数里边去

01:15:36.420 --> 01:15:37.740
放到一个函数里边去

01:15:37.740 --> 01:15:39.220
它会把你写的东西放到一个函数

01:15:39.220 --> 01:15:41.820
然后把一个函数加入到一个数组

01:15:41.820 --> 01:15:42.660
你这个地方呢

01:15:42.660 --> 01:15:44.980
实际上是循环的数组

01:15:44.980 --> 01:15:46.580
然后去运行每一个函数

01:15:46.580 --> 01:15:47.620
我说说说

01:15:47.620 --> 01:15:48.700
我不讲这些东西了

01:15:48.700 --> 01:15:51.060
越讲越迷

01:15:51.100 --> 01:15:52.700
这里是触发事件

01:15:52.700 --> 01:15:53.380
事件名称

01:15:53.380 --> 01:15:55.100
然后了事件参数传过去

01:15:55.100 --> 01:15:55.260
好

01:15:55.260 --> 01:15:57.140
那么这边当这个事情发生的时候

01:15:57.140 --> 01:15:59.020
它是不是会运行这个代码

01:15:59.020 --> 01:16:01.900
只有当它运行到这的时候

01:16:01.900 --> 01:16:03.460
它才会去运行这个代码

01:16:03.460 --> 01:16:04.700
这叫注册事件

01:16:04.700 --> 01:16:05.060
对吧

01:16:05.060 --> 01:16:05.780
注册事件

01:16:05.780 --> 01:16:06.660
注册事件我们都懂

01:16:06.660 --> 01:16:07.900
但是怎么去触发事件呢

01:16:07.900 --> 01:16:09.140
怎么写自定义的事件呢

01:16:09.140 --> 01:16:10.820
用这种方式

01:16:10.820 --> 01:16:11.180
以后呢

01:16:11.180 --> 01:16:12.460
你带写组件的时候

01:16:12.460 --> 01:16:13.420
当发生了一件事

01:16:13.420 --> 01:16:14.900
你做不了

01:16:14.900 --> 01:16:16.420
有人出去让别人做

01:16:16.420 --> 01:16:17.460
我这里是不是做不了吗

01:16:17.460 --> 01:16:18.100
我就扔出去

01:16:18.100 --> 01:16:19.020
给你取个名字

01:16:19.060 --> 01:16:19.780
然后呢

01:16:19.780 --> 01:16:20.460
你需要什么信息

01:16:20.460 --> 01:16:21.220
我给你

01:16:21.220 --> 01:16:22.260
我给你一些信息

01:16:22.260 --> 01:16:23.420
你去做吧

01:16:23.420 --> 01:16:24.500
于是来这边来

01:16:24.500 --> 01:16:24.780
这边来

01:16:24.780 --> 01:16:25.620
他是不是可以改了

01:16:25.620 --> 01:16:26.820
因为这个数据本来就是他的

01:16:26.820 --> 01:16:27.980
所以他是不是可以改

01:16:27.980 --> 01:16:28.660
对吧

01:16:28.660 --> 01:16:29.660
这里呢

01:16:29.660 --> 01:16:31.300
通过这个关键字

01:16:31.300 --> 01:16:32.620
否则关键字叫做

01:16:32.620 --> 01:16:34.300
无诱实力里面不是有这么个属性吗

01:16:34.300 --> 01:16:35.180
多了Invent

01:16:35.180 --> 01:16:36.020
当时我还忘了

01:16:36.020 --> 01:16:36.460
对不对

01:16:36.460 --> 01:16:37.500
还忘了这个属性了

01:16:37.500 --> 01:16:37.660
好

01:16:37.660 --> 01:16:38.500
那么把这个属性

01:16:38.500 --> 01:16:39.660
把这个属性拿过来

01:16:39.660 --> 01:16:41.580
这就是事件参数

01:16:41.580 --> 01:16:43.140
把这个参数是不是新的砚码

01:16:43.140 --> 01:16:44.100
复制给Corridor

01:16:44.100 --> 01:16:45.620
因为这是我的数据

01:16:45.620 --> 01:16:47.340
我是不是能改

01:16:47.340 --> 01:16:48.460
对吧

01:16:48.500 --> 01:16:49.420
于是呢

01:16:49.420 --> 01:16:51.780
他就形成了这么一种结构了

01:16:51.780 --> 01:16:52.460
我给大家画一个

01:16:52.460 --> 01:16:53.260
用PPT画个图

01:16:55.260 --> 01:16:56.100
形成这么一种结构

01:17:04.920 --> 01:17:05.880
这个事件

01:17:05.880 --> 01:17:06.520
组建这里

01:17:06.520 --> 01:17:07.600
可能就是事件这一块

01:17:07.600 --> 01:17:09.040
不是很好理解

01:17:09.040 --> 01:17:09.200
好

01:17:09.200 --> 01:17:12.190
这是App组建

01:17:12.190 --> 01:17:15.580
App组建里边有啥

01:17:15.580 --> 01:17:16.180
里边

01:17:16.180 --> 01:17:16.940
他里边有啥

01:17:16.940 --> 01:17:18.260
是不是有一个配置组建

01:17:19.580 --> 01:17:20.500
他的植组建

01:17:20.500 --> 01:17:23.460
配置组建

01:17:23.460 --> 01:17:24.220
配置组建

01:17:24.220 --> 01:17:25.780
然后App组建是不是给配置组建

01:17:25.780 --> 01:17:27.260
传了很多数据

01:17:27.260 --> 01:17:28.180
因为App组建里面

01:17:28.180 --> 01:17:29.340
还有自身的数据

01:17:29.380 --> 01:17:30.460
这东西叫什么

01:17:30.460 --> 01:17:31.180
叫状态

01:17:33.060 --> 01:17:34.220
他有自身的数据

01:17:34.220 --> 01:17:35.220
这东西我们之前说过

01:17:35.220 --> 01:17:36.380
叫状态

01:17:36.380 --> 01:17:38.260
组建他有自身可以维护的数据

01:17:38.260 --> 01:17:41.500
就是可以完全属于组建自己的数据

01:17:41.500 --> 01:17:43.460
他叫做组建状态

01:17:43.460 --> 01:17:44.660
他有什么状态呢

01:17:46.620 --> 01:17:48.060
他有什么有Corridor

01:17:49.540 --> 01:17:50.900
有什么配置组建

01:17:50.900 --> 01:17:51.580
对吧

01:17:51.580 --> 01:17:52.300
有什么偷偷

01:17:52.300 --> 01:17:52.660
对吧

01:17:52.660 --> 01:17:53.380
是有这些状态

01:17:53.380 --> 01:17:53.580
对吧

01:17:53.580 --> 01:17:54.820
他自己的数据

01:17:54.820 --> 01:17:56.300
Corridor等于

01:17:56.340 --> 01:17:57.900
比方说等于1

01:17:57.900 --> 01:17:59.300
配置赛数等于10

01:17:59.300 --> 01:18:02.900
偷偷的等于100

01:18:02.900 --> 01:18:04.220
比方说对他自己的状态

01:18:04.220 --> 01:18:04.940
对吧

01:18:04.940 --> 01:18:07.260
然后他把状态作为属性

01:18:07.260 --> 01:18:09.460
是不是传递给了配置组建

01:18:09.460 --> 01:18:11.660
那么状态是作为属性传过去的

01:18:11.660 --> 01:18:13.420
所以配置组建里面不能改

01:18:13.420 --> 01:18:14.740
是不是不能改

01:18:14.740 --> 01:18:17.460
配置组建里面不能改这些数据的

01:18:18.620 --> 01:18:19.340
那么这个时候

01:18:19.340 --> 01:18:20.820
配置组建他发生的一件事

01:18:20.820 --> 01:18:22.700
就是用户点了某一个A元数

01:18:22.700 --> 01:18:23.900
或者怎么样

01:18:23.900 --> 01:18:25.220
他总之发生了一件事

01:18:25.220 --> 01:18:26.940
这件事他自己处理不了

01:18:26.940 --> 01:18:28.020
因为这个数据不是他的

01:18:28.020 --> 01:18:28.780
他改不了

01:18:28.780 --> 01:18:30.220
他不能改这个数据

01:18:30.220 --> 01:18:32.180
怎么办呢

01:18:32.180 --> 01:18:34.140
他扔回给你

01:18:34.140 --> 01:18:36.420
扔给你

01:18:36.420 --> 01:18:37.860
他扔给你

01:18:37.860 --> 01:18:38.860
这就是触发事件

01:18:43.460 --> 01:18:45.940
他把这个new page扔给你

01:18:45.940 --> 01:18:47.180
新的页码

01:18:47.180 --> 01:18:49.500
比方说新的页码为2

01:18:49.500 --> 01:18:50.820
就是这里就是ZS

01:18:50.820 --> 01:18:53.460
比方说ZS-MateChange

01:18:55.260 --> 01:18:56.020
2

01:18:56.020 --> 01:18:57.860
比方说我自己直接传个字面量

01:18:57.860 --> 01:18:59.100
直接传个字面量

01:18:59.100 --> 01:19:00.620
那么这里触发了一个事件

01:19:00.620 --> 01:19:02.580
他运行的过程中触发了一个事件

01:19:02.580 --> 01:19:03.620
那么这个事件

01:19:03.620 --> 01:19:05.460
副组建是不是可以监听到

01:19:05.460 --> 01:19:05.740
对吧

01:19:05.740 --> 01:19:06.500
为什么可以监听到

01:19:06.500 --> 01:19:07.820
这里注册了的

01:19:07.820 --> 01:19:09.180
这里注册了这个事件处理的

01:19:09.180 --> 01:19:09.860
如果你没有注册

01:19:09.860 --> 01:19:11.180
他就什么都没做

01:19:11.180 --> 01:19:12.620
但是我这里注册了事件处理的

01:19:12.620 --> 01:19:13.820
他是不是能监听到

01:19:13.820 --> 01:19:14.740
他会把怎么样呢

01:19:14.740 --> 01:19:17.420
他又会把你这个事件参数

01:19:17.420 --> 01:19:20.140
把这个事件参数传递给谁

01:19:20.140 --> 01:19:21.500
传递给这个

01:19:21.500 --> 01:19:23.340
这里的event

01:19:23.340 --> 01:19:24.500
那么传递过来过后

01:19:24.540 --> 01:19:26.260
他是不是把当前的数据变了

01:19:26.260 --> 01:19:27.380
corner变了

01:19:27.380 --> 01:19:28.860
那么corner就变成2了

01:19:28.860 --> 01:19:30.340
好corner一变成2

01:19:30.340 --> 01:19:31.780
数据是不是变了

01:19:31.780 --> 01:19:32.500
数据变了

01:19:32.500 --> 01:19:33.500
过后怎么办

01:19:33.500 --> 01:19:34.660
组建更新

01:19:36.460 --> 01:19:42.060
组建更新

01:19:42.060 --> 01:19:48.580
当一个组建数据

01:19:48.580 --> 01:19:52.220
就是状态发生变化时

01:19:52.220 --> 01:19:57.980
该组建会重新选择

01:19:57.980 --> 01:19:59.380
该组建会重新选择

01:19:59.380 --> 01:20:00.100
你看一下这个过程

01:20:00.100 --> 01:20:03.020
如果说上面还有组建

01:20:03.020 --> 01:20:04.540
跟上面的组建就没关系了

01:20:04.540 --> 01:20:06.900
从这个组建开始重新选择

01:20:06.900 --> 01:20:08.700
这个组建数据是不是更新了

01:20:08.700 --> 01:20:10.340
因为数据是响应式的

01:20:10.340 --> 01:20:11.620
数据更新了

01:20:11.620 --> 01:20:12.580
那么数据更新的这个组建

01:20:12.580 --> 01:20:13.980
是不是要重新选择

01:20:13.980 --> 01:20:16.100
重新选择的过程中

01:20:16.100 --> 01:20:18.460
你看着

01:20:18.460 --> 01:20:21.180
重新选择的过程中

01:20:21.180 --> 01:20:23.340
这里是不是要重新选择这个模办

01:20:23.340 --> 01:20:24.620
重新选择模办的过程中

01:20:24.620 --> 01:20:25.660
你看一下

01:20:25.660 --> 01:20:26.780
这边

01:20:26.860 --> 01:20:28.140
重新选择这个模办的过程中

01:20:28.140 --> 01:20:29.660
你看一下这个配角组建

01:20:29.660 --> 01:20:31.660
它的属性是不是也跟着变了

01:20:33.660 --> 01:20:35.020
你看

01:20:35.020 --> 01:20:37.260
一开始是一

01:20:37.260 --> 01:20:38.620
一开始是一

01:20:38.620 --> 01:20:40.860
那么这个数据是传给直组建

01:20:40.860 --> 01:20:42.340
直组建发生了一件事

01:20:42.340 --> 01:20:43.740
这件事如果说没有处理的话

01:20:43.740 --> 01:20:45.420
什么都没有发生

01:20:45.420 --> 01:20:46.860
如果说这里没有处理这个事件的话

01:20:46.860 --> 01:20:48.140
就什么都没有发生

01:20:48.140 --> 01:20:49.740
然后这里我们没有处理

01:20:49.740 --> 01:20:51.180
没有处理这个事件

01:20:51.180 --> 01:20:51.620
你看一下

01:20:51.620 --> 01:20:53.140
这点了过程是不是什么都没发生

01:20:53.140 --> 01:20:53.900
对吧

01:20:53.900 --> 01:20:54.420
你看

01:20:54.420 --> 01:20:55.540
现在给我给了第二

01:20:55.540 --> 01:20:56.380
但是你没处理

01:20:56.460 --> 01:20:57.980
你没处理就什么都没发生

01:20:57.980 --> 01:20:58.940
但是现在不一样了

01:20:58.940 --> 01:21:00.100
我处理的这个事件

01:21:00.100 --> 01:21:02.500
并且我更改了我的属性

01:21:02.500 --> 01:21:02.780
对吧

01:21:02.780 --> 01:21:03.860
是不更改了属性

01:21:03.860 --> 01:21:06.180
那么属性是不是变成二了

01:21:06.180 --> 01:21:07.020
属性一变

01:21:07.020 --> 01:21:08.540
这个组建是不是在重新渲染

01:21:08.540 --> 01:21:09.820
是想用是吗

01:21:09.820 --> 01:21:12.820
重新渲染过到就会导致

01:21:12.820 --> 01:21:16.140
它的属性是不是也跟着变了

01:21:16.140 --> 01:21:18.060
配角组建的属性是不是也跟着变了

01:21:18.060 --> 01:21:20.020
它的状态发生变化

01:21:20.020 --> 01:21:21.700
那么由于它重新渲染

01:21:21.700 --> 01:21:23.580
重新来这个组建的属性

01:21:23.580 --> 01:21:24.380
它变成二了

01:21:24.380 --> 01:21:25.500
一开始是一对不对

01:21:25.540 --> 01:21:26.580
它现在变成二了

01:21:26.580 --> 01:21:28.420
属性也跟着变了

01:21:28.420 --> 01:21:29.420
一个组建

01:21:29.420 --> 01:21:31.100
如果说它属性也跟着变了

01:21:31.100 --> 01:21:32.580
它也会重新渲染

01:21:38.660 --> 01:21:40.740
在渲染的过程中

01:21:40.740 --> 01:21:47.380
过程中可能会导致其指组建的属性

01:21:47.380 --> 01:21:49.100
发生变化

01:21:49.100 --> 01:21:54.140
而属性的变化也会导致

01:21:54.180 --> 01:21:56.900
会导致组建重新渲染

01:21:58.660 --> 01:22:02.220
也就是说一个组建重新渲染有两种情况

01:22:02.220 --> 01:22:04.420
要么是状态发生变化

01:22:04.420 --> 01:22:06.780
自己的状态自己管理的发生变化

01:22:06.780 --> 01:22:09.260
要么是属性发生变化

01:22:09.260 --> 01:22:10.940
都可能会导致组建重新渲染

01:22:12.100 --> 01:22:13.020
那么你看这里

01:22:13.020 --> 01:22:14.140
对于这个组建而言

01:22:14.140 --> 01:22:15.380
它为什么重新渲染了

01:22:15.380 --> 01:22:17.900
是因为别人给它的属性

01:22:17.900 --> 01:22:19.140
它也不知道为什么会给

01:22:19.140 --> 01:22:20.020
一开始是一

01:22:20.020 --> 01:22:20.700
然后给我二

01:22:20.700 --> 01:22:21.500
我也不知道

01:22:21.500 --> 01:22:22.460
反正总之里给了

01:22:22.460 --> 01:22:24.020
一开始从一变成了二

01:22:24.020 --> 01:22:25.940
会导致我重新渲染

01:22:25.940 --> 01:22:27.220
对于这个组建而言

01:22:27.220 --> 01:22:28.540
以为它的状态变了

01:22:28.540 --> 01:22:30.380
它也会导致重新渲染

01:22:30.380 --> 01:22:34.980
这是重新渲染的原因

01:22:34.980 --> 01:22:36.780
但是大家再想一想

01:22:36.780 --> 01:22:40.300
根本原因是不是还是状态发生变化

01:22:40.300 --> 01:22:45.700
但根本原因是状态的变化

01:22:45.700 --> 01:22:46.860
根本原因是状态变化

01:22:46.860 --> 01:22:47.540
你看这里

01:22:47.540 --> 01:22:48.660
是不是最终的原因是

01:22:48.660 --> 01:22:49.820
因为它的状态变了

01:22:49.820 --> 01:22:51.140
导致它一渲染

01:22:51.140 --> 01:22:52.900
因为同时又连锁反应

01:22:52.900 --> 01:22:54.300
又导致它的属性变了

01:22:54.300 --> 01:22:55.340
它又出现渲染

01:22:55.340 --> 01:22:57.020
对吧

01:22:57.020 --> 01:22:57.860
是这么个原因

01:22:57.860 --> 01:22:58.620
你看这边

01:22:58.620 --> 01:22:59.620
那么现在就可以了

01:22:59.620 --> 01:23:00.580
你看

01:23:00.580 --> 01:23:01.780
为什么可以了

01:23:01.780 --> 01:23:03.460
因为我这里1.7

01:23:03.460 --> 01:23:06.340
1.7是不是这里出发了这个

01:23:06.340 --> 01:23:07.980
那么这个东西是不是变成7了

01:23:07.980 --> 01:23:09.100
它是不是重新渲染一变

01:23:09.100 --> 01:23:09.940
它是渲染过后

01:23:09.940 --> 01:23:10.660
它渲染过程中

01:23:10.660 --> 01:23:11.500
是不是它的属性变了

01:23:11.500 --> 01:23:12.740
它也跟着重新渲染

01:23:12.740 --> 01:23:13.380
它一重新渲染

01:23:13.380 --> 01:23:14.020
是不是就更新了

01:23:14.020 --> 01:23:14.620
解免

01:23:14.620 --> 01:23:15.620
对吧

01:23:15.620 --> 01:23:17.980
它形成了这么一种逻辑了

01:23:17.980 --> 01:23:18.460
没问题吧

01:23:18.460 --> 01:23:21.500
没什么意思吧

01:23:21.580 --> 01:23:21.980
怎么了

01:23:21.980 --> 01:23:23.460
就受不了了

01:23:23.460 --> 01:23:24.940
就受不了了

01:23:24.940 --> 01:23:27.500
但是这东西还是唯有里边最核心

01:23:27.500 --> 01:23:28.740
最核心的内容

01:23:28.740 --> 01:23:30.140
可能稍微难一点

01:23:30.140 --> 01:23:32.580
这里是有事件

01:23:32.580 --> 01:23:34.940
下去反复把今天的课

01:23:34.940 --> 01:23:38.760
好好反复地去听一下

01:23:38.760 --> 01:23:40.040
多参数就写呗

01:23:40.040 --> 01:23:41.720
多参数

01:23:41.720 --> 01:23:43.720
陪着

01:23:43.720 --> 01:23:45.080
这里比较一个参数

01:23:45.080 --> 01:23:46.640
两个参数你直接写呗

01:23:46.640 --> 01:23:48.040
直接写呗

01:23:48.040 --> 01:23:50.160
直接写

01:23:50.160 --> 01:23:50.800
好了写了

01:23:50.800 --> 01:23:52.280
这边怎么来接收呢

01:23:52.280 --> 01:23:53.640
这边就不能用这种方式来写了

01:23:53.640 --> 01:23:54.080
这种方式

01:23:54.080 --> 01:23:56.480
一文尺只能接收到第一个

01:23:56.480 --> 01:23:57.560
你不能这样子写了

01:23:57.560 --> 01:23:59.120
那么你这里就要写个函数了

01:23:59.120 --> 01:24:00.840
在函数里面去接收多个参数

01:24:00.840 --> 01:24:02.600
在没事里面去接收多个参数

01:24:02.600 --> 01:24:06.000
不要用这种方式的

01:24:06.000 --> 01:24:07.960
那么这是这种写法

01:24:07.960 --> 01:24:08.800
其实当我们说到这

01:24:08.800 --> 01:24:10.440
其实大家也知道了

01:24:10.440 --> 01:24:12.440
在那个VU里边

01:24:12.440 --> 01:24:16.560
主见不管你签讨多少多少层次

01:24:16.560 --> 01:24:18.080
比方说我们这里的主见

01:24:18.080 --> 01:24:20.200
我们这样子写吧

01:24:20.240 --> 01:24:21.640
com1这主见

01:24:21.640 --> 01:24:23.280
com2签讨了主见

01:24:23.280 --> 01:24:25.720
com3签到了层次再生

01:24:25.720 --> 01:24:28.000
比方说有一天com2变了

01:24:28.000 --> 01:24:28.600
它变了

01:24:28.600 --> 01:24:30.080
它的状态变了

01:24:30.080 --> 01:24:30.480
状态变了

01:24:30.480 --> 01:24:31.760
它是不是得重新宣传

01:24:31.760 --> 01:24:35.320
它一重新宣传过后来会导致有极有可能

01:24:35.320 --> 01:24:37.760
不是百分之百极有可能导致com3

01:24:37.760 --> 01:24:38.880
因为它里面用到了com3

01:24:38.880 --> 01:24:40.800
com3的属性也发生变化

01:24:40.800 --> 01:24:42.360
而它的属性一般发生变化

01:24:42.360 --> 01:24:43.560
它是不是得重新宣传

01:24:43.560 --> 01:24:45.120
它一宣传又会导致

01:24:45.120 --> 01:24:47.920
可能会导致它com4属性发生变化

01:24:47.920 --> 01:24:49.720
那么com4是有宣传

01:24:49.720 --> 01:24:51.520
它就是这么一种逻辑

01:24:51.520 --> 01:24:54.160
所以说很多时候都是

01:24:54.160 --> 01:24:55.920
上面就是一个企业店

01:24:55.920 --> 01:24:56.960
它的状态一变

01:24:56.960 --> 01:24:58.800
后边的主见会一次跟着雄雄宣传

01:25:03.000 --> 01:25:05.360
一般者好像是指能第一个

01:25:05.360 --> 01:25:09.290
我试一下

01:25:09.290 --> 01:25:10.810
这个东西一测试就测出来了

01:25:10.810 --> 01:25:12.330
好像是指能第一个

01:25:12.330 --> 01:25:13.370
我看一下

01:25:13.370 --> 01:25:14.610
我记得好像是指能第一个

01:25:14.610 --> 01:25:16.210
因为每次我没写多个的时候

01:25:16.210 --> 01:25:17.450
每次我没写多个的时候

01:25:17.450 --> 01:25:19.290
它都是那个

01:25:19.290 --> 01:25:23.250
我都是用的函数

01:25:23.250 --> 01:25:26.970
用的函数

01:25:26.970 --> 01:25:29.670
看一下吧

01:25:29.670 --> 01:25:31.230
abc

01:25:31.230 --> 01:25:31.670
不行

01:25:31.670 --> 01:25:32.710
这里不能

01:25:32.710 --> 01:25:33.750
不当你是有Windows

01:25:33.750 --> 01:25:36.070
那我怎么测试呢

01:25:36.070 --> 01:25:38.070
怎么测试呢

01:25:38.070 --> 01:25:39.510
怎么测试这个一分彩呢

01:25:39.510 --> 01:25:40.430
我下来测试一下吧

01:25:40.430 --> 01:25:41.550
这些是细致模拟的问题

01:25:41.550 --> 01:25:44.670
也不是很重要

01:25:44.670 --> 01:25:45.670
我先来测试一下吧

01:25:45.670 --> 01:25:47.510
因为我们一般来写多个参数的话

01:25:47.510 --> 01:25:49.350
就一般要用函数了

01:25:50.350 --> 01:25:52.710
什么使循环

01:25:52.710 --> 01:25:53.670
它不会使循环的

01:25:53.670 --> 01:25:54.510
不是使循环的

01:25:54.510 --> 01:25:56.870
大家看看这个箭头好像是使循环

01:25:56.870 --> 01:25:58.190
因为你重新宣传过后

01:25:58.190 --> 01:25:59.510
是不是立即触发时间了

01:25:59.510 --> 01:26:01.270
如果说你宣传过后立即触发时间

01:26:01.270 --> 01:26:02.910
它肯定要使循环

01:26:02.910 --> 01:26:04.350
但是你不是立即触发时间

01:26:04.350 --> 01:26:05.310
也好等啊

01:26:05.310 --> 01:26:07.390
等用户点了过后才触发时间啊

01:26:07.390 --> 01:26:07.830
对不对

01:26:07.830 --> 01:26:09.310
你重新宣传过后是不是要等着

01:26:09.310 --> 01:26:09.990
等着用户点

01:26:09.990 --> 01:26:11.630
点了过后才触发这个时间

01:26:11.630 --> 01:26:12.030
对吧

01:26:12.030 --> 01:26:12.510
触发这个时间

01:26:12.510 --> 01:26:13.710
然后再重新宣传

01:26:13.710 --> 01:26:14.590
然后再等

01:26:14.590 --> 01:26:15.510
对吧

01:26:15.510 --> 01:26:16.910
你以后说这个东西是使循环的话

01:26:16.950 --> 01:26:17.910
也是一个事情换

01:26:19.910 --> 01:26:20.910
传对上也可以

01:26:20.910 --> 01:26:22.110
也可以传多多参数

01:26:22.110 --> 01:26:23.510
为什么不能呢

01:26:23.510 --> 01:26:25.590
当然看公司的规定

01:26:25.590 --> 01:26:27.150
有些公司当我记得有些公司

01:26:27.150 --> 01:26:29.670
他要求是所有函数必须单参

01:26:29.670 --> 01:26:31.030
大家就可以只能传对象了

01:26:32.630 --> 01:26:33.550
有些这公司

01:26:33.550 --> 01:26:35.590
他受到函数字编程的启发

01:26:35.590 --> 01:26:36.830
对吧

01:26:36.830 --> 01:26:38.590
但是我遇到了大多数的公司

01:26:38.590 --> 01:26:40.590
那都是半同粹

01:26:40.590 --> 01:26:41.710
懂了一点点皮毛

01:26:41.710 --> 01:26:42.990
但是用不熟

01:26:42.990 --> 01:26:44.910
用着函数字编程

01:26:44.910 --> 01:26:45.670
用着用着

01:26:45.710 --> 01:26:47.710
发现又用回去了

01:26:47.710 --> 01:26:48.830
那个东西不是那么好掌握的

01:26:50.070 --> 01:26:51.510
好 这里是组绅事件

01:26:51.510 --> 01:26:52.230
接下来我们继续

01:26:53.310 --> 01:26:54.390
接下来我们看一个有意思的事情

01:26:57.700 --> 01:26:59.060
就九点半了

01:27:00.260 --> 01:27:01.540
我至少得把这个东西

01:27:01.540 --> 01:27:02.980
把这个尽量讲完

01:27:03.940 --> 01:27:04.940
莫莉卡等着吧

01:27:04.940 --> 01:27:05.500
等一下

01:27:07.020 --> 01:27:08.260
昨天没讲爽

01:27:08.260 --> 01:27:12.520
再来讲文字

01:27:12.520 --> 01:27:14.080
好 给大家看一个有意思的事情

01:27:15.680 --> 01:27:18.640
如果说我这个属性名字不叫Corrent

01:27:20.160 --> 01:27:21.480
我这个属性名字不叫Corrent

01:27:21.480 --> 01:27:22.000
对吧

01:27:22.000 --> 01:27:23.120
我把名字改一下

01:27:23.120 --> 01:27:24.600
我要改成Value

01:27:24.600 --> 01:27:26.640
不要说我们把属性名字改成Value

01:27:28.440 --> 01:27:30.240
那么其他地方也得改是吧

01:27:30.240 --> 01:27:32.840
最终也得改

01:27:32.840 --> 01:27:33.800
来吧 替换一下吧

01:27:35.240 --> 01:27:36.960
Corrent替换成Value

01:27:37.960 --> 01:27:43.380
来替换一个

01:27:43.380 --> 01:27:47.860
这个替换 替换 替换 替换 替换

01:27:48.740 --> 01:27:49.980
没了 没了

01:27:49.980 --> 01:27:51.420
好 也就说我们这里呢

01:27:54.020 --> 01:27:55.380
把这个属性的名字改成Value

01:27:55.380 --> 01:27:56.620
这个没大问题吧

01:27:56.620 --> 01:27:58.540
就改个名字而已

01:27:58.540 --> 01:28:01.500
然后那个世界的名字仍然保持迁迹不变

01:28:01.500 --> 01:28:02.220
仍然保持迁迹

01:28:03.140 --> 01:28:04.380
好 然后在这边来

01:28:04.380 --> 01:28:05.580
是不是这里要写Value了

01:28:05.580 --> 01:28:06.100
对吧

01:28:06.100 --> 01:28:07.100
是不是要写Value

01:28:07.100 --> 01:28:07.340
对吧

01:28:07.340 --> 01:28:08.580
他需要的属性是Value嘛

01:28:08.580 --> 01:28:08.780
对不对

01:28:08.780 --> 01:28:09.820
你是不是得写Value

01:28:09.820 --> 01:28:10.220
对吧

01:28:10.220 --> 01:28:12.980
Value来自于我们的数据Corrent

01:28:15.940 --> 01:28:16.540
是不是一样的

01:28:16.540 --> 01:28:16.740
对吧

01:28:16.740 --> 01:28:18.380
只是改了一下名字而已

01:28:18.380 --> 01:28:21.060
但是一旦你这样改了

01:28:21.060 --> 01:28:22.980
会发生一个神奇的现象

01:28:23.020 --> 01:28:24.300
你可以写这个的

01:28:24.300 --> 01:28:25.060
V-mode

01:28:25.060 --> 01:28:27.810
Corrent

01:28:27.810 --> 01:28:28.410
你可以写这个了

01:28:29.890 --> 01:28:30.730
这句话不要了

01:28:30.730 --> 01:28:31.450
这句话不要了

01:28:31.450 --> 01:28:32.130
V-mode

01:28:32.130 --> 01:28:33.010
这么你之前写过了

01:28:33.010 --> 01:28:34.250
它叫做双向绑定

01:28:37.210 --> 01:28:38.130
别人

01:28:38.130 --> 01:28:42.820
那你写错了

01:28:42.820 --> 01:28:46.860
写一下啊

01:28:46.860 --> 01:28:47.380
那写错了

01:28:49.140 --> 01:28:50.060
等一下啊

01:28:50.060 --> 01:28:57.450
我把这个Corrent change

01:28:57.450 --> 01:28:58.570
这个没问题的

01:28:58.570 --> 01:29:02.340
V-mode

01:29:02.340 --> 01:29:03.420
V-mode

01:29:04.820 --> 01:29:05.340
哎

01:29:05.340 --> 01:29:05.860
我哪写错了

01:29:08.140 --> 01:29:08.620
V-mode

01:29:10.500 --> 01:29:10.940
呃

01:29:10.940 --> 01:29:12.060
等一下啊

01:29:12.060 --> 01:29:12.900
嘴头要的啊

01:29:12.900 --> 01:29:14.060
没问题啊

01:29:14.060 --> 01:29:15.860
V-mode是这样写的啊

01:29:15.860 --> 01:29:16.420
我看一下啊

01:29:19.660 --> 01:29:21.860
这个V-mode是哪里写错了

01:29:21.860 --> 01:29:22.940
我这里测试一下

01:29:22.940 --> 01:29:23.300
测试一下

01:29:24.940 --> 01:29:26.500
这里写上一个名字

01:29:26.500 --> 01:29:30.390
写上个名字

01:29:30.390 --> 01:29:30.790
V-mode

01:29:33.150 --> 01:29:34.390
配级size

01:29:34.390 --> 01:29:34.910
啊

01:29:34.910 --> 01:29:36.390
配级size

01:29:36.390 --> 01:29:36.590
啊

01:29:36.590 --> 01:29:37.070
10

01:29:37.070 --> 01:29:37.110
啊

01:29:37.110 --> 01:29:37.630
对了

01:29:37.630 --> 01:29:37.990
没问题

01:29:39.030 --> 01:29:40.270
feel the property

01:29:40.270 --> 01:29:40.990
a 30 number

01:29:40.990 --> 01:29:43.190
这个错倒是没啥

01:29:43.190 --> 01:29:43.550
呃

01:29:43.550 --> 01:29:44.070
我想想啊

01:29:45.230 --> 01:29:50.180
V-mode

01:29:50.180 --> 01:29:50.580
我看

01:29:50.580 --> 01:29:51.460
千级

01:29:51.460 --> 01:29:52.820
千级事件

01:29:52.820 --> 01:29:53.220
呃

01:29:53.220 --> 01:29:57.080
千级事件

01:29:57.080 --> 01:29:58.280
我看一下

01:29:58.280 --> 01:29:59.840
再把那个音谱打出来

01:29:59.840 --> 01:30:00.880
我这样子分开写啊

01:30:00.880 --> 01:30:01.920
我分开写

01:30:01.920 --> 01:30:03.640
value等于

01:30:03.640 --> 01:30:05.720
value等于配级size

01:30:05.720 --> 01:30:07.720
value等于配级size

01:30:08.560 --> 01:30:08.840
好

01:30:08.840 --> 01:30:09.400
然后呢

01:30:09.400 --> 01:30:10.360
这个就是

01:30:11.440 --> 01:30:11.960
哦

01:30:11.960 --> 01:30:12.400
对

01:30:12.400 --> 01:30:12.880
我知道了

01:30:12.880 --> 01:30:13.440
我知道了

01:30:13.440 --> 01:30:14.000
知道了

01:30:14.000 --> 01:30:16.120
我还蒙蔽了啊

01:30:16.120 --> 01:30:17.000
明白了啊

01:30:17.000 --> 01:30:18.040
这个名字也得改啊

01:30:18.040 --> 01:30:19.640
这个事件名字也得改

01:30:19.640 --> 01:30:20.600
它不能叫千级啊

01:30:20.600 --> 01:30:21.440
不能叫千级

01:30:21.440 --> 01:30:23.200
叫做input事件

01:30:23.200 --> 01:30:25.760
事件名字把它变成input啊

01:30:25.760 --> 01:30:26.960
input事件

01:30:26.960 --> 01:30:27.280
好

01:30:27.280 --> 01:30:29.360
那么是不是在这边一样的啊

01:30:29.360 --> 01:30:30.720
这边无非就是把千级换成什么

01:30:30.720 --> 01:30:31.680
换成input就完事了

01:30:31.680 --> 01:30:32.160
对吧

01:30:32.160 --> 01:30:33.320
换成input就完事了

01:30:33.320 --> 01:30:34.200
是一笔样的

01:30:34.200 --> 01:30:34.400
是吧

01:30:34.400 --> 01:30:35.320
一样的

01:30:35.320 --> 01:30:35.720
好

01:30:35.720 --> 01:30:38.160
如何你的属性

01:30:38.200 --> 01:30:39.680
是value

01:30:39.680 --> 01:30:41.960
并且的事件是input

01:30:41.960 --> 01:30:46.520
而且我们在副组件里面用的时候

01:30:46.520 --> 01:30:48.000
就是固定的这种用法

01:30:48.000 --> 01:30:50.120
我把属性的值给你的value

01:30:50.120 --> 01:30:51.480
把一个数据给你的value

01:30:51.480 --> 01:30:52.800
当你发生变化的时候

01:30:52.800 --> 01:30:54.080
你把新的数据传给我

01:30:54.080 --> 01:30:56.000
然后呢我就没做啥事

01:30:56.000 --> 01:30:57.760
就是把我的数据变成新的数据

01:30:57.760 --> 01:30:59.240
如果你的写法是固定的这种写法

01:30:59.240 --> 01:31:00.480
你可以用语法堂

01:31:00.480 --> 01:31:02.880
所以说我们之前说vmode是一个语法堂呢

01:31:02.880 --> 01:31:04.680
vmode写成什么

01:31:04.680 --> 01:31:06.080
corrent

01:31:06.080 --> 01:31:08.120
把vmode写成corrent

01:31:08.120 --> 01:31:09.120
你看一下

01:31:09.120 --> 01:31:10.240
完全一样的效果

01:31:10.240 --> 01:31:12.440
看没

01:31:12.440 --> 01:31:13.920
这样子的就实现了

01:31:13.920 --> 01:31:15.840
类似于双向绑定的东西

01:31:15.840 --> 01:31:18.080
但是你实际上的心里面就非常清楚了

01:31:18.080 --> 01:31:19.680
双向绑定实际上

01:31:19.680 --> 01:31:21.480
是不是还是单向数据流

01:31:21.480 --> 01:31:21.800
对吧

01:31:21.800 --> 01:31:23.280
仍然是单向数据流

01:31:23.280 --> 01:31:24.680
它仍然是要出发事件的

01:31:24.680 --> 01:31:26.160
仍然是要出发事件

01:31:26.160 --> 01:31:26.720
所以说呢

01:31:26.720 --> 01:31:27.880
你无非就是呢

01:31:27.880 --> 01:31:29.720
你可让你少写几行代码

01:31:29.720 --> 01:31:30.240
它把这个

01:31:30.240 --> 01:31:31.200
你把这个代码呢

01:31:31.200 --> 01:31:32.120
改成了什么

01:31:32.120 --> 01:31:33.520
改成了vmode

01:31:33.520 --> 01:31:34.360
改成了vmode

01:31:34.360 --> 01:31:35.320
无非如此

01:31:35.320 --> 01:31:37.400
所以说vmode的本质

01:31:37.400 --> 01:31:40.840
vmode的本质是一个语法堂

01:31:40.840 --> 01:31:42.280
一个语法堂

01:31:42.280 --> 01:31:46.760
实际上是绑定歪流属性

01:31:46.760 --> 01:31:52.040
同时监听input的事件

01:31:52.040 --> 01:31:54.400
实际上来说这么简单的时候

01:31:54.400 --> 01:31:56.080
绑定歪流属性

01:31:56.080 --> 01:31:57.960
那个同时监听input的事件

01:31:59.840 --> 01:32:00.640
关于vmode

01:32:00.640 --> 01:32:04.500
我们说到这里顺便说一下

01:32:04.500 --> 01:32:06.540
那么这里分页是不是写完了

01:32:06.540 --> 01:32:06.740
对吧

01:32:06.740 --> 01:32:07.620
分页写完了

01:32:07.620 --> 01:32:08.940
别让咱们咱们写电影

01:32:08.980 --> 01:32:09.940
模特快要

01:32:09.940 --> 01:32:11.060
快要封掉了

01:32:11.060 --> 01:32:11.740
单个电影

01:32:11.740 --> 01:32:13.660
咱们这东西就很简单了

01:32:13.660 --> 01:32:14.460
就很简单了

01:32:14.460 --> 01:32:15.500
咱们来写一个

01:32:15.500 --> 01:32:15.980
单个电影

01:32:15.980 --> 01:32:16.740
我们看一下这边

01:32:16.740 --> 01:32:17.260
看一下这边

01:32:17.260 --> 01:32:19.540
我们随便找一个右键检查

01:32:19.540 --> 01:32:20.380
右键检查

01:32:20.380 --> 01:32:20.540
好

01:32:20.540 --> 01:32:21.300
这边的div

01:32:21.300 --> 01:32:22.740
我们右键复制一下

01:32:22.740 --> 01:32:23.780
copy一下

01:32:23.780 --> 01:32:25.220
copy

01:32:25.220 --> 01:32:26.540
那个

01:32:26.540 --> 01:32:27.540
enement

01:32:27.540 --> 01:32:29.300
复制一下

01:32:29.300 --> 01:32:30.220
那么这里呢

01:32:30.220 --> 01:32:30.780
放过来

01:32:30.780 --> 01:32:32.180
对吧

01:32:32.180 --> 01:32:34.840
来吧

01:32:34.840 --> 01:32:36.240
没有

01:32:36.240 --> 01:32:38.120
这个

01:32:38.120 --> 01:32:41.060
放个哈

01:32:41.140 --> 01:32:42.580
以后你们用了角色架过后

01:32:42.580 --> 01:32:44.300
还可以可以进行格式化的

01:32:44.300 --> 01:32:45.940
还可以进行代码着色的

01:32:45.940 --> 01:32:47.460
现在我全部写到字幕之后里面

01:32:47.460 --> 01:32:48.980
确实有点恶心

01:32:48.980 --> 01:32:49.860
以后用了角色架的话

01:32:49.860 --> 01:32:51.260
就没有那么恶心了

01:32:51.260 --> 01:32:52.300
但是以后

01:32:52.300 --> 01:32:53.020
你们用了

01:32:53.020 --> 01:32:54.340
用了以后用了角色架

01:32:54.340 --> 01:32:55.460
你们会来感谢我了

01:32:55.460 --> 01:32:56.180
我跟你说

01:32:56.180 --> 01:32:57.540
因为我现在基本上就是用角色架

01:32:57.540 --> 01:32:58.340
这种结构在写

01:33:01.780 --> 01:33:01.940
好

01:33:01.940 --> 01:33:03.180
那么这里是不是要

01:33:03.180 --> 01:33:04.020
渲染这个东西

01:33:04.020 --> 01:33:04.260
对吧

01:33:04.260 --> 01:33:05.540
这是我们要渲染的东西

01:33:05.540 --> 01:33:07.260
要渲染这么一个东西

01:33:07.260 --> 01:33:07.460
好

01:33:07.460 --> 01:33:08.140
要渲染这个东西

01:33:08.140 --> 01:33:09.860
是不是需要数据啊

01:33:09.940 --> 01:33:11.220
这是一个电影组建

01:33:11.220 --> 01:33:12.740
那么这里的电影标题是啥

01:33:12.740 --> 01:33:13.740
电影名字是啥

01:33:13.740 --> 01:33:15.380
你凭什么知道是五月整容式呢

01:33:15.380 --> 01:33:18.260
万一是五月熊龄呢

01:33:18.260 --> 01:33:20.020
对吧

01:33:20.020 --> 01:33:20.780
你也不知道是啥

01:33:20.780 --> 01:33:21.540
对不对

01:33:21.540 --> 01:33:22.020
所以说呢

01:33:22.020 --> 01:33:23.700
这里是不是要传属性

01:33:23.700 --> 01:33:23.900
好

01:33:23.900 --> 01:33:26.220
那这里是不是要传很多信息过来啊

01:33:26.220 --> 01:33:27.020
你干脆啊

01:33:27.020 --> 01:33:29.700
你就给我传一个对象进来得了

01:33:29.700 --> 01:33:30.980
你给我传一个对象进来得了

01:33:30.980 --> 01:33:31.740
我们约束一下

01:33:31.740 --> 01:33:33.740
也不用约束了

01:33:33.740 --> 01:33:34.820
你给我传个属性

01:33:34.820 --> 01:33:37.340
名字就叫做vvv

01:33:37.340 --> 01:33:38.300
放个名字嘛

01:33:38.300 --> 01:33:38.940
data

01:33:38.940 --> 01:33:40.180
叫做data

01:33:40.180 --> 01:33:41.860
属性的名字叫做data

01:33:41.860 --> 01:33:43.060
属性的名字叫做data

01:33:44.980 --> 01:33:45.340
好吧

01:33:46.700 --> 01:33:46.820
好

01:33:46.820 --> 01:33:48.060
那么你给我传这么一个属性

01:33:48.060 --> 01:33:49.100
它是个对象

01:33:49.100 --> 01:33:49.340
OK

01:33:49.340 --> 01:33:51.260
那我就把对象的这些东西放这

01:33:51.260 --> 01:33:52.140
放这

01:33:52.140 --> 01:33:53.220
我们的数据哪来呢

01:33:53.220 --> 01:33:54.180
我们给它看一下

01:33:54.180 --> 01:33:55.140
咱们的电影数据

01:33:55.140 --> 01:33:56.420
给它看一下

01:33:56.420 --> 01:33:58.460
我们的电影数据在哪呢

01:34:00.340 --> 01:34:00.540
哎呦

01:34:00.540 --> 01:34:01.820
这个电影数据在这

01:34:01.820 --> 01:34:02.020
在这

01:34:03.700 --> 01:34:04.700
打开车

01:34:06.300 --> 01:34:06.740
地盘

01:34:08.020 --> 01:34:08.620
二十地位

01:34:10.140 --> 01:34:10.540
五一

01:34:11.580 --> 01:34:12.660
原码

01:34:12.660 --> 01:34:14.220
第二天

01:34:14.220 --> 01:34:18.130
怎么电影数据在第二天的效果里边

01:34:18.130 --> 01:34:18.690
在这

01:34:18.690 --> 01:34:19.690
把复制一下

01:34:19.690 --> 01:34:20.770
复制一下

01:34:20.770 --> 01:34:22.930
放到第三天里边的实现效果里边

01:34:24.810 --> 01:34:25.050
哦

01:34:25.050 --> 01:34:25.650
这里有

01:34:25.650 --> 01:34:27.290
我这里记得有

01:34:27.290 --> 01:34:31.740
我记得有

01:34:31.740 --> 01:34:32.580
放在这

01:34:32.580 --> 01:34:33.140
放过来

01:34:33.140 --> 01:34:33.500
放过来

01:34:35.060 --> 01:34:35.500
有

01:34:35.500 --> 01:34:36.220
我们的数据在这

01:34:36.220 --> 01:34:37.980
我这里直接导出了一个数据

01:34:37.980 --> 01:34:39.740
这个数据里边你看一下一个电影

01:34:39.740 --> 01:34:41.220
一个电影有什么

01:34:41.260 --> 01:34:43.220
一个电影有id

01:34:43.220 --> 01:34:43.900
有id

01:34:43.900 --> 01:34:45.180
有什么name

01:34:45.180 --> 01:34:45.500
name

01:34:45.500 --> 01:34:46.060
有e name

01:34:46.060 --> 01:34:47.260
就是英文名

01:34:47.260 --> 01:34:48.300
有什么type

01:34:48.300 --> 01:34:49.060
电影类型

01:34:49.060 --> 01:34:50.180
有什么area

01:34:50.180 --> 01:34:51.260
地区

01:34:51.260 --> 01:34:52.900
有什么time

01:34:52.900 --> 01:34:53.980
时间

01:34:53.980 --> 01:34:55.620
这就是我用跑程抓下来的

01:34:55.620 --> 01:34:58.220
这是电影的海报图片地址

01:34:58.220 --> 01:34:59.140
海报图片地址

01:35:00.660 --> 01:35:01.700
这里是update

01:35:01.700 --> 01:35:02.940
电影的上映日期

01:35:02.940 --> 01:35:04.340
这里是score

01:35:04.340 --> 01:35:05.460
电影的评分

01:35:05.460 --> 01:35:06.860
这里是电影的ql房

01:35:06.860 --> 01:35:07.900
这里是intel

01:35:07.900 --> 01:35:08.300
电影的

01:35:09.340 --> 01:35:10.780
就是简介

01:35:10.780 --> 01:35:11.780
简介

01:35:11.780 --> 01:35:13.140
这里有个数组

01:35:13.140 --> 01:35:14.180
一个电影就是个对象

01:35:14.180 --> 01:35:15.340
一个电影就是个对象

01:35:15.340 --> 01:35:15.540
好

01:35:15.540 --> 01:35:16.300
那么这里

01:35:16.300 --> 01:35:18.420
我们在组建里边

01:35:18.420 --> 01:35:19.860
你给我的是一个电影对象

01:35:19.860 --> 01:35:20.060
对吧

01:35:20.060 --> 01:35:20.740
电影对象在哪

01:35:20.740 --> 01:35:21.940
是不是在这个data里边

01:35:21.940 --> 01:35:23.260
在属性data里边

01:35:23.260 --> 01:35:24.340
来吧

01:35:24.340 --> 01:35:26.860
我这里是直接取就是不就完了

01:35:26.860 --> 01:35:28.540
我的图片地址来自于哪

01:35:28.540 --> 01:35:30.580
来自于data.poster

01:35:30.580 --> 01:35:33.140
你可以至于看一下对象结构

01:35:33.140 --> 01:35:34.740
这里的电影名字来自于

01:35:34.740 --> 01:35:38.260
来自于data.name

01:35:38.260 --> 01:35:40.180
电影的英文名称来自于哪

01:35:40.220 --> 01:35:41.420
每次写这个地方的时候

01:35:41.420 --> 01:35:41.980
是最舒服的

01:35:41.980 --> 01:35:43.460
又简单又有意思

01:35:43.460 --> 01:35:45.340
然后这里e.name

01:35:45.340 --> 01:35:47.140
然后这里那一条来自于哪

01:35:47.140 --> 01:35:49.540
来自于数据里边的time

01:35:49.540 --> 01:35:51.540
然后这里上映地区来自于哪

01:35:51.540 --> 01:35:54.380
来自于data里边的area

01:35:54.380 --> 01:35:57.580
上映时间来自于哪

01:35:57.580 --> 01:35:59.380
来自于data里边的

01:35:59.380 --> 01:36:03.580
就是上映时间来自于data里边的time

01:36:03.580 --> 01:36:05.820
update

01:36:05.820 --> 01:36:07.260
时长来自于哪

01:36:07.260 --> 01:36:10.020
来自于data里边的time

01:36:10.700 --> 01:36:12.060
时长

01:36:12.060 --> 01:36:13.060
最后的简介

01:36:17.440 --> 01:36:18.720
简介

01:36:18.720 --> 01:36:19.720
简介来自于这

01:36:19.720 --> 01:36:22.360
data里面的英确

01:36:22.360 --> 01:36:23.760
你只要把这个data给我

01:36:23.760 --> 01:36:25.200
你只要把这个数据给我

01:36:25.200 --> 01:36:25.960
我是不是就可以

01:36:25.960 --> 01:36:27.400
选择各种各样的东西

01:36:27.400 --> 01:36:28.880
把选择成元素

01:36:28.880 --> 01:36:30.560
无位组件就这么简单

01:36:30.560 --> 01:36:32.440
然后我们再回到movement list

01:36:32.440 --> 01:36:33.880
movement list回到这

01:36:33.880 --> 01:36:35.840
那么这里是不是要宣传无位组件

01:36:35.840 --> 01:36:37.000
每宣传一个无位组件

01:36:37.000 --> 01:36:38.720
是不是要给它一个数据

01:36:38.720 --> 01:36:40.880
给它一个电影对象

01:36:40.880 --> 01:36:41.880
那电影对象哪来的

01:36:41.880 --> 01:36:42.880
我这里也没有

01:36:42.880 --> 01:36:44.880
我这里也没有电影对象

01:36:44.880 --> 01:36:47.160
所以说我这里就这个组件

01:36:47.160 --> 01:36:48.320
它又需要数箱

01:36:48.320 --> 01:36:49.560
它又需要数箱

01:36:49.560 --> 01:36:53.490
它会形成这么一种结构

01:36:53.490 --> 01:36:55.690
这个是movement list

01:36:55.690 --> 01:36:57.290
movement list

01:36:57.290 --> 01:36:58.050
它需要什么

01:36:58.050 --> 01:37:01.050
需要电影数组

01:37:01.050 --> 01:37:03.890
那么这个movement

01:37:03.890 --> 01:37:07.410
需要电影对象

01:37:07.410 --> 01:37:09.250
就像好像在做什么

01:37:09.250 --> 01:37:10.570
链金调配方一样

01:37:10.570 --> 01:37:11.090
对吧

01:37:11.090 --> 01:37:11.610
你需要什么

01:37:11.610 --> 01:37:12.410
你需要电影对象

01:37:12.410 --> 01:37:13.410
要做任务一样

01:37:13.410 --> 01:37:13.930
你需要什么

01:37:13.930 --> 01:37:14.930
你需要电影数组

01:37:14.930 --> 01:37:15.130
好

01:37:15.130 --> 01:37:16.610
一会我给你一个电影数组

01:37:16.610 --> 01:37:18.210
它是不是可以循环数数组

01:37:18.210 --> 01:37:20.050
把这个组件渲染出来

01:37:20.050 --> 01:37:20.650
对吧

01:37:20.650 --> 01:37:21.930
它就可以实现这么一个效果了

01:37:21.930 --> 01:37:22.610
看到

01:37:22.610 --> 01:37:24.010
它可以这样写

01:37:24.010 --> 01:37:26.050
我们看一下这个movement list

01:37:26.050 --> 01:37:29.130
movement list就是它写个DIV叫DataContainer

01:37:29.130 --> 01:37:31.570
叫DataContainer

01:37:31.570 --> 01:37:32.610
class

01:37:32.610 --> 01:37:34.090
DataContainer

01:37:34.090 --> 01:37:35.610
那么这里边写啥呢

01:37:35.610 --> 01:37:37.050
是不是要写movement组件

01:37:37.050 --> 01:37:37.330
好

01:37:37.330 --> 01:37:39.850
你给我一个数组

01:37:39.850 --> 01:37:40.810
component

01:37:40.810 --> 01:37:42.090
拜拜

01:37:42.130 --> 01:37:43.450
这是prob

01:37:43.450 --> 01:37:44.530
probs

01:37:44.530 --> 01:37:45.490
我需要什么数线

01:37:45.490 --> 01:37:46.770
就是我也不知道一些数据

01:37:46.770 --> 01:37:47.330
我也不知道

01:37:47.330 --> 01:37:48.330
你给我

01:37:48.330 --> 01:37:49.690
给我什么数据

01:37:49.690 --> 01:37:51.770
给我movement list

01:37:51.770 --> 01:37:53.330
movement list

01:37:53.330 --> 01:37:54.650
给我这么一个数线

01:37:54.650 --> 01:37:56.650
那么你要给我数组

01:37:56.650 --> 01:37:57.770
你必须要给我数组

01:37:57.770 --> 01:37:59.410
或者说我们这里约数一下吧

01:37:59.410 --> 01:38:00.410
如果说你不给的话

01:38:00.410 --> 01:38:01.850
我就使用mortem list

01:38:01.850 --> 01:38:03.130
movement list

01:38:03.130 --> 01:38:04.090
它类型的是什么

01:38:04.090 --> 01:38:04.810
array

01:38:04.810 --> 01:38:05.770
给我一个数组

01:38:05.770 --> 01:38:08.330
然后default是一个空数组

01:38:08.330 --> 01:38:10.890
你可以这样约数一下

01:38:10.970 --> 01:38:12.290
你给我这么一个数线

01:38:12.290 --> 01:38:12.490
好

01:38:12.490 --> 01:38:14.090
那么这里是不是可以循环了

01:38:14.090 --> 01:38:14.730
循环啥

01:38:14.730 --> 01:38:15.530
循环渲染啥

01:38:15.530 --> 01:38:17.050
是循环渲染movement组件

01:38:17.050 --> 01:38:19.210
那么怎么来循环渲染movement组件呢

01:38:19.210 --> 01:38:21.730
一样的

01:38:21.730 --> 01:38:24.010
一样的

01:38:24.010 --> 01:38:25.170
DIV可以

01:38:25.170 --> 01:38:26.570
LI可以是不是

01:38:26.570 --> 01:38:28.650
自己的组件也可以

01:38:28.650 --> 01:38:29.290
item

01:38:29.290 --> 01:38:29.770
in

01:38:29.770 --> 01:38:30.730
什么

01:38:30.730 --> 01:38:31.810
movement

01:38:31.810 --> 01:38:33.330
你给我传一个数组进来

01:38:33.330 --> 01:38:34.490
我就循环这个数组

01:38:34.490 --> 01:38:36.370
每循环是否得到一个电影对象

01:38:36.370 --> 01:38:37.810
你不是要一个电影对象吗

01:38:37.810 --> 01:38:39.010
你要你怎么要的

01:38:39.050 --> 01:38:40.610
你说让我给你传这个东西

01:38:40.610 --> 01:38:41.370
传过去

01:38:41.370 --> 01:38:41.890
对吧

01:38:41.890 --> 01:38:42.090
好

01:38:42.090 --> 01:38:44.130
那我就给你传过去

01:38:44.130 --> 01:38:44.770
data

01:38:44.770 --> 01:38:45.850
等于啥

01:38:45.850 --> 01:38:47.170
等于item

01:38:47.170 --> 01:38:48.530
就这么个逻辑

01:38:48.530 --> 01:38:50.850
我这里拿到的是一个电影数组

01:38:50.850 --> 01:38:53.450
我循环数组是不是拿到一个电影对象

01:38:53.450 --> 01:38:55.010
没必要拿到电影对象过后

01:38:55.010 --> 01:38:57.170
我就选了这个组件

01:38:57.170 --> 01:38:59.650
选这个组件

01:38:59.650 --> 01:38:59.890
好

01:38:59.890 --> 01:39:01.450
咱们来看一下

01:39:01.450 --> 01:39:04.020
保存

01:39:04.020 --> 01:39:04.820
在这边

01:39:04.820 --> 01:39:05.740
这边

01:39:05.740 --> 01:39:07.740
好

01:39:07.740 --> 01:39:08.700
那么现在呢

01:39:08.700 --> 01:39:09.980
为什么没有显示

01:39:10.940 --> 01:39:12.060
没有显示

01:39:12.060 --> 01:39:12.860
是吧

01:39:12.860 --> 01:39:14.660
嗯

01:39:14.660 --> 01:39:15.380
movies

01:39:15.380 --> 01:39:18.380
invited default value for props

01:39:18.380 --> 01:39:20.300
must use a factory function

01:39:20.300 --> 01:39:21.420
哦

01:39:21.420 --> 01:39:22.940
这个地方呢

01:39:22.940 --> 01:39:25.580
数组这一块啊

01:39:25.580 --> 01:39:27.100
数组这一块呢

01:39:27.100 --> 01:39:27.380
哎

01:39:27.380 --> 01:39:31.700
跑哪去了

01:39:31.700 --> 01:39:32.180
这里啊

01:39:32.180 --> 01:39:33.180
我这里

01:39:33.180 --> 01:39:34.620
数组这一块是这样子

01:39:34.620 --> 01:39:35.540
数组的

01:39:35.540 --> 01:39:36.620
数组也好

01:39:36.620 --> 01:39:38.060
对象也好

01:39:38.060 --> 01:39:39.180
就是你这个属性啊

01:39:39.180 --> 01:39:40.700
如果说你是一个数组

01:39:40.700 --> 01:39:42.860
或者说你这个属性是一个对象

01:39:42.900 --> 01:39:44.980
如果你要给他显默认值的话

01:39:44.980 --> 01:39:46.900
必须要用一个函数来生成

01:39:48.060 --> 01:39:49.340
这能看到吗

01:39:49.340 --> 01:39:50.180
这是个函数

01:39:50.180 --> 01:39:50.780
无参

01:39:50.780 --> 01:39:52.740
返回了什么一个空数组

01:39:52.740 --> 01:39:54.220
他必须要用个函数来生成

01:39:54.220 --> 01:39:54.700
为什么

01:39:54.700 --> 01:39:56.860
又是关于引用地址的问题

01:39:56.860 --> 01:39:58.300
因为他为了优化

01:39:58.300 --> 01:39:59.300
优化组件

01:39:59.300 --> 01:40:00.780
他会把所有组件

01:40:00.780 --> 01:40:03.060
就是哪怕你用了一千次一万次

01:40:03.060 --> 01:40:04.620
他们的默认值都是统一的

01:40:04.620 --> 01:40:05.660
而且他那个配置

01:40:05.660 --> 01:40:07.620
property这里的配置都是统一的

01:40:07.620 --> 01:40:09.300
如果说你直接给他写个数组的话

01:40:09.300 --> 01:40:10.060
那么他的默认值

01:40:10.060 --> 01:40:11.940
就是使用的是同一个数组了

01:40:12.020 --> 01:40:14.060
所以他这里要求你写个函数

01:40:14.060 --> 01:40:15.140
用函数来得到一个数组

01:40:15.140 --> 01:40:16.100
他这里是包这个错误

01:40:18.740 --> 01:40:19.500
没问题吧

01:40:19.500 --> 01:40:20.900
那么这里出现一个警告

01:40:20.900 --> 01:40:21.820
这个警告是什么呢

01:40:23.020 --> 01:40:25.060
这个警告的话

01:40:25.060 --> 01:40:26.300
在这里

01:40:26.300 --> 01:40:27.540
警告是在这

01:40:27.540 --> 01:40:28.340
他说

01:40:28.340 --> 01:40:30.220
如果说你要用自定义的组件

01:40:30.220 --> 01:40:32.260
这是我们自定义的组件

01:40:32.260 --> 01:40:34.700
你要循环生成自定义的组件

01:40:34.700 --> 01:40:36.540
你需要给他加上一个什么

01:40:36.540 --> 01:40:39.140
你需要给他加上一个key这个属性

01:40:39.140 --> 01:40:39.820
乖了

01:40:39.860 --> 01:40:42.220
我这个组件有写key这个属性吗

01:40:42.220 --> 01:40:43.660
我这个组件有key这个属性吗

01:40:43.660 --> 01:40:44.420
没有

01:40:44.420 --> 01:40:46.700
但为什么让我加key这个属性呢

01:40:46.700 --> 01:40:49.540
key这个属性是内置属性

01:40:49.540 --> 01:40:50.620
我给大家记一笔

01:40:50.620 --> 01:40:52.700
这个面试的时候特别容易靠

01:40:53.980 --> 01:40:55.460
这定时间已经讲完了

01:40:55.460 --> 01:40:56.300
这定时间已经讲完了

01:41:01.480 --> 01:41:02.040
这定时间

01:41:03.960 --> 01:41:09.600
就是key是一个是内置属性

01:41:09.600 --> 01:41:10.200
内置属性

01:41:11.200 --> 01:41:16.640
当循环渲染自定义组件时

01:41:16.640 --> 01:41:18.720
必须使用该属性

01:41:20.080 --> 01:41:21.360
不能说必须是

01:41:22.680 --> 01:41:23.800
建议

01:41:24.960 --> 01:41:27.120
几乎是必须是要使用这个属性

01:41:27.120 --> 01:41:28.120
为什么呢

01:41:28.120 --> 01:41:30.160
他跟他的渲染原理有关系

01:41:30.160 --> 01:41:31.320
以便于

01:41:32.200 --> 01:41:36.400
并且提供给我一个指

01:41:37.920 --> 01:41:39.800
通常是id

01:41:40.960 --> 01:41:45.040
以便无忧提高渲染效率

01:41:45.040 --> 01:41:46.640
他是为了提高渲染效率的

01:41:46.640 --> 01:41:48.160
那么这个要调一下

01:41:48.160 --> 01:41:50.440
要谈开来讲的话

01:41:50.440 --> 01:41:51.280
就讲不完了

01:41:51.280 --> 01:41:52.480
这东西就讲不完了

01:41:52.480 --> 01:41:53.280
这个

01:41:53.280 --> 01:41:55.280
我记得大长哥

01:41:55.280 --> 01:41:56.960
有大长哥知道吗

01:41:56.960 --> 01:42:00.200
把无忧的原码自己全部去写了一遍

01:42:00.200 --> 01:42:01.520
所以他做了

01:42:01.520 --> 01:42:03.520
他咱们后来就无忧的课程

01:42:03.520 --> 01:42:05.920
无忧的原码课是大长哥讲的

01:42:05.920 --> 01:42:07.200
他讲的特别特别细致

01:42:07.200 --> 01:42:08.000
打了一块

01:42:08.000 --> 01:42:09.600
基本上给自己熟写一遍了

01:42:09.640 --> 01:42:10.280
熟写一遍的话

01:42:10.280 --> 01:42:11.480
你自然而然就知道

01:42:11.480 --> 01:42:12.800
他为什么需要这个keyz

01:42:12.800 --> 01:42:13.440
没有这个keyz

01:42:13.440 --> 01:42:14.360
他不是不能做

01:42:14.360 --> 01:42:15.280
他能做

01:42:15.280 --> 01:42:16.040
能够渲染

01:42:16.040 --> 01:42:17.680
只是他效率会低很多

01:42:24.740 --> 01:42:26.420
就是永远区别组建的

01:42:26.420 --> 01:42:27.700
这个设计到他的渲染原理

01:42:27.700 --> 01:42:30.020
就是在对比虚拟动物树的时候

01:42:30.020 --> 01:42:31.300
在更新动物树的时候

01:42:31.300 --> 01:42:32.220
这个keyz

01:42:32.220 --> 01:42:33.260
keyz有的时候

01:42:33.260 --> 01:42:34.740
还有一些

01:42:35.860 --> 01:42:36.500
奇效

01:42:36.500 --> 01:42:37.860
一些特别的效果

01:42:39.060 --> 01:42:40.460
咱们这里不是和缘了

01:42:40.460 --> 01:42:41.620
我们把keyz加上就行了

01:42:41.620 --> 01:42:42.860
以后你凡是在渲染

01:42:42.860 --> 01:42:44.260
循环线上自己的组建的时候

01:42:44.260 --> 01:42:45.340
把keyz加上

01:42:45.340 --> 01:42:45.940
加什么呢

01:42:45.940 --> 01:42:47.660
我们通常就加的唯一的纸

01:42:47.660 --> 01:42:48.660
唯一的纸

01:42:48.660 --> 01:42:50.260
那你看这个对象里面什么东西唯一

01:42:50.260 --> 01:42:51.980
不就是id唯一吗

01:42:51.980 --> 01:42:53.060
不就是个id唯一吗

01:42:53.060 --> 01:42:53.820
我们刚才看到了

01:42:53.820 --> 01:42:55.260
默克勒他里面不是个id吗

01:42:55.260 --> 01:42:55.660
对吧

01:42:55.660 --> 01:42:56.620
id是唯一的

01:42:56.620 --> 01:42:56.900
好

01:42:56.900 --> 01:42:58.420
我们通常把id加上

01:42:58.420 --> 01:43:00.700
这东西跟界面没什么关系

01:43:00.700 --> 01:43:01.540
你加不加的东西

01:43:01.540 --> 01:43:03.020
他都能生效

01:43:03.020 --> 01:43:03.940
都能运行

01:43:03.940 --> 01:43:05.180
只是加上过后了

01:43:05.180 --> 01:43:06.540
1他不会包这个警告了

01:43:06.540 --> 01:43:08.660
而他的渲染效率变高了

01:43:08.660 --> 01:43:08.860
好

01:43:08.860 --> 01:43:10.300
那么现在为什么没有显示呢

01:43:10.300 --> 01:43:12.700
因为我们没有用这个组建

01:43:12.740 --> 01:43:13.980
并且呢

01:43:13.980 --> 01:43:15.300
还没有给他提供数据

01:43:15.300 --> 01:43:16.060
对吧

01:43:16.060 --> 01:43:17.740
你看我这里给他提供数据了吗

01:43:17.740 --> 01:43:18.940
有没有给他提供数据啊

01:43:18.940 --> 01:43:19.540
是没有

01:43:19.540 --> 01:43:21.500
他不是需要一个数据吗

01:43:21.500 --> 01:43:22.420
他需要什么move is

01:43:22.420 --> 01:43:23.540
说要给他啊

01:43:23.540 --> 01:43:24.540
要给他这个数据

01:43:24.540 --> 01:43:26.620
那这个数据哪来呢

01:43:26.620 --> 01:43:27.420
这个数据哪来呢

01:43:27.420 --> 01:43:29.860
首先我问一下大家这个问题

01:43:29.860 --> 01:43:31.180
问一下大家这个问题啊

01:43:31.180 --> 01:43:33.100
我这里肯定要把个数据导入进来

01:43:33.100 --> 01:43:34.660
在这在mockdata里边

01:43:34.660 --> 01:43:35.620
在这个文件里边

01:43:35.620 --> 01:43:37.980
我肯定要导入进来啊

01:43:37.980 --> 01:43:39.420
data是吗

01:43:39.420 --> 01:43:41.900
或者说move is吗

01:43:41.900 --> 01:43:45.220
from

01:43:45.220 --> 01:43:46.380
from哪呢

01:43:46.380 --> 01:43:47.660
mock

01:43:47.660 --> 01:43:48.300
叫写缸

01:43:48.300 --> 01:43:50.380
mockdata是

01:43:50.380 --> 01:43:51.220
首先问大家一个问题

01:43:51.220 --> 01:43:54.500
我能不能直接把这个数据写过来

01:43:54.500 --> 01:43:58.820
我能不能直接把这个数据写过来

01:43:58.820 --> 01:44:00.220
肯定不行

01:44:00.220 --> 01:44:00.780
肯定不行

01:44:00.780 --> 01:44:01.340
哎不

01:44:01.340 --> 01:44:03.660
这还不是这个错误啊

01:44:03.660 --> 01:44:04.180
还不是这个错误

01:44:04.180 --> 01:44:06.580
这要点击是没写

01:44:06.580 --> 01:44:07.660
肯定不行

01:44:07.700 --> 01:44:08.620
为什么不行呢

01:44:08.620 --> 01:44:10.500
他说move is is not defend

01:44:10.500 --> 01:44:11.980
move is没有定义

01:44:11.980 --> 01:44:12.820
为什么没有定义呢

01:44:12.820 --> 01:44:13.900
这是我们之前说过了

01:44:13.900 --> 01:44:15.180
vue呢

01:44:15.180 --> 01:44:16.940
在解析这个模板

01:44:16.940 --> 01:44:18.060
我们把一个解析模板的过程

01:44:18.060 --> 01:44:19.260
叫做编义模板

01:44:19.260 --> 01:44:20.300
编义模板的过程中

01:44:20.300 --> 01:44:21.540
它的环境是什么

01:44:21.540 --> 01:44:23.820
它的环境是vue实力

01:44:23.820 --> 01:44:24.420
这是组件

01:44:24.420 --> 01:44:28.190
那就是vue组件实力

01:44:28.190 --> 01:44:28.950
这是它的环境

01:44:28.950 --> 01:44:29.670
它有没有这些东西啊

01:44:29.670 --> 01:44:30.350
根本就没有这些东西

01:44:30.350 --> 01:44:31.030
连温度对象都没有

01:44:31.030 --> 01:44:31.870
我们之前看到过

01:44:31.870 --> 01:44:32.950
连温度对象都没有

01:44:32.950 --> 01:44:34.030
所以这里不能写这个东西

01:44:34.030 --> 01:44:35.470
它就是为了防止这些犯错

01:44:35.470 --> 01:44:37.270
你把一些外部的东西放到这来了

01:44:37.310 --> 01:44:38.750
因为外部的东西是没有响应式的

01:44:38.750 --> 01:44:39.230
你改了过它

01:44:39.230 --> 01:44:40.150
根本就不知道

01:44:40.150 --> 01:44:41.390
是没有响应式的

01:44:41.390 --> 01:44:43.110
所以你一定要用内部的东西

01:44:43.110 --> 01:44:43.870
怎么那种东西呢

01:44:45.630 --> 01:44:48.310
我们这个输出先得到的是所有电影

01:44:48.310 --> 01:44:50.190
那么现在让我要分页显示电影

01:44:50.190 --> 01:44:52.390
是不是我可以写个计算属性来分页啊

01:44:52.390 --> 01:44:52.950
对吧

01:44:52.950 --> 01:44:55.630
我们这里先我们这里配置个属性

01:44:55.630 --> 01:44:57.590
叫做all movies

01:44:57.590 --> 01:44:58.230
all movies

01:44:58.230 --> 01:44:59.150
来自于哪来movies

01:45:00.430 --> 01:45:02.390
我们把我们的导入个电影

01:45:02.390 --> 01:45:03.030
这是我们的电影

01:45:03.030 --> 01:45:04.150
所有的电影数据对吧

01:45:04.150 --> 01:45:05.070
放到data里面

01:45:05.070 --> 01:45:05.950
放到data配置里面

01:45:05.950 --> 01:45:07.470
那么现在是不是能用了

01:45:07.470 --> 01:45:08.750
我们movies

01:45:08.750 --> 01:45:09.030
你看

01:45:09.030 --> 01:45:11.350
现在所有电影数就全部显示出来了

01:45:13.310 --> 01:45:14.590
所有电影全部显示出来了

01:45:14.590 --> 01:45:15.870
把这个数组给它

01:45:15.870 --> 01:45:17.230
数组给到这个组件

01:45:17.230 --> 01:45:19.270
你看这里代码非常简洁

01:45:19.270 --> 01:45:20.790
就是显示一个电影列表

01:45:20.790 --> 01:45:21.630
你既然要显示列表

01:45:21.630 --> 01:45:22.710
肯定要点电影啊

01:45:22.710 --> 01:45:23.630
电影给它

01:45:23.630 --> 01:45:25.070
给它过后呢

01:45:25.070 --> 01:45:26.870
它那边是不是就可以循环这个数组

01:45:26.870 --> 01:45:28.470
然后去宣传一个一个的电影了

01:45:28.470 --> 01:45:28.710
对吧

01:45:28.710 --> 01:45:31.070
就可以循环数组宣传一个一个电影了

01:45:31.070 --> 01:45:31.670
然后到这边

01:45:32.950 --> 01:45:33.310
到这边

01:45:34.030 --> 01:45:35.870
到哪呢

01:45:35.870 --> 01:45:36.390
在这

01:45:36.390 --> 01:45:38.510
但是我们现在要分页显示

01:45:38.510 --> 01:45:39.390
怎么分页显示呢

01:45:39.390 --> 01:45:40.030
这里很简单

01:45:40.030 --> 01:45:41.630
我们写个计创属性

01:45:41.630 --> 01:45:42.670
康普蒂的

01:45:42.670 --> 01:45:44.110
就是把这个数组分割一下

01:45:44.110 --> 01:45:44.350
对吧

01:45:44.350 --> 01:45:45.830
分割一下

01:45:45.830 --> 01:45:47.750
你看因为我这个分业图件都写完了

01:45:47.750 --> 01:45:48.910
就差这个东西了

01:45:48.910 --> 01:45:49.070
好

01:45:49.070 --> 01:45:50.070
分割一下

01:45:50.070 --> 01:45:53.390
康普蒂的

01:45:53.390 --> 01:45:53.790
好

01:45:53.790 --> 01:45:54.870
给它取名为

01:45:54.870 --> 01:45:58.110
page movies

01:45:58.110 --> 01:45:59.910
就是某一页的电影

01:45:59.910 --> 01:46:00.510
那么这里呢

01:46:00.510 --> 01:46:01.590
读取这个

01:46:01.590 --> 01:46:03.230
读取某一页的电影

01:46:03.230 --> 01:46:03.350
好

01:46:03.350 --> 01:46:04.710
某一页的电影怎么写呢

01:46:04.750 --> 01:46:06.590
某一页的电影

01:46:06.590 --> 01:46:09.030
我们这里不是有当前页码吗

01:46:09.030 --> 01:46:11.310
不是有页容量吗

01:46:11.310 --> 01:46:11.990
总数是什么

01:46:11.990 --> 01:46:12.870
总数就是movies

01:46:12.870 --> 01:46:13.870
对吧

01:46:13.870 --> 01:46:15.150
数组的长度

01:46:15.150 --> 01:46:16.390
总数是数组的长度

01:46:16.390 --> 01:46:17.310
这是page size

01:46:17.310 --> 01:46:17.630
对吧

01:46:17.630 --> 01:46:18.270
不要page size

01:46:18.270 --> 01:46:19.510
没有钱是两条

01:46:19.510 --> 01:46:20.590
两个电影

01:46:20.590 --> 01:46:20.750
好

01:46:20.750 --> 01:46:22.390
那么得到某一页的电影

01:46:22.390 --> 01:46:23.190
怎么得到了

01:46:23.190 --> 01:46:24.830
你想这个道理啊

01:46:24.830 --> 01:46:26.110
如果说这里一个数组啊

01:46:26.110 --> 01:46:26.990
这里有个数组

01:46:26.990 --> 01:46:28.670
三随便写个数组嘛

01:46:28.670 --> 01:46:32.080
随便写个数组

01:46:32.080 --> 01:46:34.000
如果说现在是第一页

01:46:36.760 --> 01:46:38.120
现在是第一页

01:46:38.120 --> 01:46:39.440
那么我取的范围是多少

01:46:39.440 --> 01:46:40.400
从几取到几

01:46:40.400 --> 01:46:41.640
这个数组从几取到几

01:46:42.720 --> 01:46:44.560
是不是从0

01:46:44.560 --> 01:46:45.680
每页显示

01:46:45.680 --> 01:46:46.720
比方说每页显示

01:46:47.800 --> 01:46:48.760
page size

01:46:48.760 --> 01:46:50.440
每页显示两条吗

01:46:50.440 --> 01:46:51.320
两条数据

01:46:51.320 --> 01:46:53.280
是不是从0取到几

01:46:53.280 --> 01:46:54.160
是不是取到2

01:46:54.160 --> 01:46:54.840
对吧

01:46:54.840 --> 01:46:55.840
当然2取不到

01:46:55.840 --> 01:46:57.040
2取不到就是01

01:46:57.040 --> 01:46:57.400
对吧

01:46:57.400 --> 01:46:58.920
0到2就是01

01:46:58.920 --> 01:47:00.680
2取不到

01:47:00.680 --> 01:47:01.080
然后呢

01:47:01.080 --> 01:47:04.000
如果说他当前页码是2

01:47:04.000 --> 01:47:05.400
那么页容量呢

01:47:05.440 --> 01:47:06.440
也是2

01:47:06.440 --> 01:47:07.520
是不是取多少

01:47:07.520 --> 01:47:09.080
那么就从2取到多少

01:47:10.960 --> 01:47:11.840
2取到多少

01:47:11.840 --> 01:47:12.680
2取到4

01:47:12.680 --> 01:47:13.760
就是2和3

01:47:13.760 --> 01:47:14.520
4取不到

01:47:14.520 --> 01:47:15.280
对吧

01:47:15.280 --> 01:47:17.360
如果说current为3

01:47:17.360 --> 01:47:18.720
第三页当

01:47:18.720 --> 01:47:20.240
页容量为2

01:47:20.240 --> 01:47:21.320
那么取到多少

01:47:21.320 --> 01:47:23.440
是不是从4取到多少

01:47:23.440 --> 01:47:23.960
取到6

01:47:25.320 --> 01:47:25.960
是吧

01:47:25.960 --> 01:47:26.520
是这样子吗

01:47:28.360 --> 01:47:30.000
那么第一个数字哪来的

01:47:30.000 --> 01:47:31.360
第一个数字就是当前页码

01:47:31.360 --> 01:47:31.840
减1

01:47:31.840 --> 01:47:32.280
乘1

01:47:32.280 --> 01:47:33.200
page size

01:47:33.200 --> 01:47:34.120
第二个数字哪来的

01:47:34.160 --> 01:47:35.160
第二数就是当前页码

01:47:35.160 --> 01:47:35.400
乘1

01:47:35.400 --> 01:47:35.960
page size

01:47:37.200 --> 01:47:37.920
你懂的

01:47:37.920 --> 01:47:38.520
用什么

01:47:38.520 --> 01:47:39.920
用数组里边的

01:47:39.920 --> 01:47:40.720
or movies

01:47:40.720 --> 01:47:42.120
什么snaps方法

01:47:43.440 --> 01:47:44.920
第一个参数

01:47:44.920 --> 01:47:45.840
this current

01:47:45.840 --> 01:47:47.400
当前页码减1

01:47:47.400 --> 01:47:48.400
乘1

01:47:48.400 --> 01:47:49.480
this page size

01:47:52.180 --> 01:47:53.340
第二个数字

01:47:53.340 --> 01:47:54.900
this current

01:47:54.900 --> 01:47:55.380
当前

01:47:55.380 --> 01:47:56.500
就是直接乘1

01:47:56.500 --> 01:47:57.140
page size

01:48:00.290 --> 01:48:00.810
这样子是吧

01:48:00.810 --> 01:48:02.930
把数组分割出来一个新数组

01:48:02.930 --> 01:48:05.250
把这个分割出来的新数组返回

01:48:05.250 --> 01:48:06.250
不就是分业了吗

01:48:06.250 --> 01:48:06.890
对吧

01:48:06.930 --> 01:48:08.130
我们这个分业

01:48:08.130 --> 01:48:09.450
做了一挺错的

01:48:09.450 --> 01:48:10.330
也不说错吧

01:48:10.330 --> 01:48:11.490
应该正常的情况下

01:48:11.490 --> 01:48:12.250
应该用阿加克斯

01:48:12.250 --> 01:48:12.770
对吧

01:48:12.770 --> 01:48:13.690
应该用阿加克斯

01:48:13.690 --> 01:48:14.970
那么现在是不是可以分业了

01:48:14.970 --> 01:48:15.250
对吧

01:48:15.250 --> 01:48:15.930
就可以分业了

01:48:17.170 --> 01:48:18.410
用snaps分割

01:48:18.410 --> 01:48:19.610
分割数组

01:48:19.610 --> 01:48:21.210
它不会导致原来数组发生变化

01:48:21.210 --> 01:48:22.290
它会得到一个新数组

01:48:22.290 --> 01:48:24.130
那么我们是不是做出来一个东西

01:48:24.130 --> 01:48:25.410
做出来一个计算属性

01:48:25.410 --> 01:48:26.410
那么这个计算属性是不是

01:48:26.410 --> 01:48:27.290
init current

01:48:27.290 --> 01:48:28.570
init page size

01:48:28.570 --> 01:48:29.330
对吧

01:48:29.330 --> 01:48:30.930
只要current一变

01:48:30.930 --> 01:48:31.610
page size一变

01:48:31.610 --> 01:48:32.650
是不是要重新计算

01:48:32.650 --> 01:48:33.610
重新计算是不是个界面

01:48:33.610 --> 01:48:35.010
就自然而然就刷新了

01:48:35.010 --> 01:48:35.370
对吧

01:48:35.410 --> 01:48:36.690
它是响应式的

01:48:36.690 --> 01:48:39.050
你看一下就已经做出来了

01:48:39.050 --> 01:48:40.290
已经完成了

01:48:40.290 --> 01:48:41.170
第二页

01:48:41.170 --> 01:48:41.770
第三页

01:48:41.770 --> 01:48:42.610
第四页

01:48:42.610 --> 01:48:43.050
第六页

01:48:43.050 --> 01:48:43.410
第七页

01:48:43.410 --> 01:48:43.730
第八页

01:48:43.730 --> 01:48:44.410
第九页

01:48:44.410 --> 01:48:44.850
第七页

01:48:44.850 --> 01:48:45.410
第五页

01:48:45.410 --> 01:48:47.010
第十页

01:48:47.010 --> 01:48:52.670
已经完成了

01:48:52.670 --> 01:48:53.230
哎呀

01:48:53.230 --> 01:48:55.110
什么问题

01:48:55.110 --> 01:48:56.470
哪里蒙逼了

01:48:56.470 --> 01:48:57.950
哪里蒙逼了

01:48:57.950 --> 01:48:59.590
是不是从事件开始就蒙逼了

01:48:59.590 --> 01:49:04.730
从事件开始

01:49:04.730 --> 01:49:09.690
你们是在计算这个页码这里呢

01:49:09.690 --> 01:49:11.210
除了问题吗

01:49:11.290 --> 01:49:15.540
在计算页码这里出了问题吗

01:49:15.540 --> 01:49:17.020
别着急说snot

01:49:17.020 --> 01:49:17.980
我知道这个音乐

01:49:17.980 --> 01:49:20.700
现在就是看这个直播的同学呢

01:49:20.700 --> 01:49:23.700
水平是不太一样的

01:49:23.700 --> 01:49:24.980
我再照顾一下

01:49:24.980 --> 01:49:25.980
因为我要保证

01:49:25.980 --> 01:49:28.940
首先要保证同学能听懂

01:49:28.940 --> 01:49:30.420
要照顾一下听不懂的同学

01:49:30.420 --> 01:49:32.020
听不懂的同学

01:49:32.020 --> 01:49:33.940
后面就怎么学呢

01:49:33.940 --> 01:49:35.140
我就照顾一下后面同学

01:49:35.140 --> 01:49:36.020
我肯定要讲的

01:49:36.020 --> 01:49:36.660
放心吧

01:49:36.660 --> 01:49:37.460
肯定要会讲的

01:49:37.460 --> 01:49:38.100
今天我讲不完

01:49:38.100 --> 01:49:40.300
我明天都会把它补上

01:49:40.300 --> 01:49:42.180
这里就这里是听不懂是吧

01:49:42.220 --> 01:49:44.540
那你现在我们现在就是一个数组

01:49:44.540 --> 01:49:45.460
就是一个数组

01:49:45.460 --> 01:49:47.820
这个数组里面不是有很多的数据吗

01:49:47.820 --> 01:49:49.420
对不对

01:49:49.420 --> 01:49:50.860
它不是有很多的数据吗

01:49:50.860 --> 01:49:52.020
我这就用数字表示

01:49:52.020 --> 01:49:53.780
它其实是一个一个的电影

01:49:53.780 --> 01:49:55.140
它有很多的数据

01:49:55.140 --> 01:49:55.980
那么这些数据

01:49:55.980 --> 01:49:57.940
如果说我不加初底的话

01:49:57.940 --> 01:49:59.500
直接拿到data里面

01:49:59.500 --> 01:50:01.020
直接把把放到data里面

01:50:01.020 --> 01:50:03.980
那么显示出来的是不是全部的电影了

01:50:03.980 --> 01:50:04.300
对吧

01:50:04.300 --> 01:50:05.860
是不是全部的电影

01:50:05.860 --> 01:50:07.740
说到全部电影全部显示出来了

01:50:07.740 --> 01:50:09.300
那我在这里点这个页码

01:50:09.300 --> 01:50:10.540
跟这个电影还有关系吗

01:50:10.540 --> 01:50:11.140
是没关系

01:50:11.140 --> 01:50:13.300
因为这个数组是没有变

01:50:13.300 --> 01:50:14.780
把这个数组是没变化

01:50:14.780 --> 01:50:16.060
它永远都是全部的电影

01:50:16.060 --> 01:50:17.860
那肯定是不能这样的

01:50:17.860 --> 01:50:20.860
因此我必须要得到一个另外的一个数组

01:50:20.860 --> 01:50:27.540
这个数字是从这个全部的电影里面来的

01:50:27.540 --> 01:50:30.300
我是根据当前页码和页容量

01:50:30.300 --> 01:50:32.900
从这个数据里面去结了一部分来显示

01:50:32.900 --> 01:50:33.500
是这个意思

01:50:33.500 --> 01:50:34.580
听懂了吗

01:50:34.580 --> 01:50:36.100
是从这个数据里面结了一部分

01:50:36.100 --> 01:50:37.140
比方说这里表示全部电影

01:50:37.140 --> 01:50:38.340
但是我显示不了那么多

01:50:38.340 --> 01:50:39.820
我一次只显示两个电影

01:50:39.820 --> 01:50:40.580
因为为什么呢

01:50:40.580 --> 01:50:44.020
因为我这个配级赛的

01:50:44.020 --> 01:50:44.860
这就是二

01:50:44.860 --> 01:50:45.660
我一次只行

01:50:45.700 --> 01:50:46.980
是不是我在结一部分了

01:50:46.980 --> 01:50:48.740
那么到底结哪一部分了

01:50:48.740 --> 01:50:50.780
如果说结这一部分是不是第一

01:50:50.780 --> 01:50:51.780
结这一部分是不是第二

01:50:51.780 --> 01:50:52.820
也结这一部分是不是第三

01:50:52.820 --> 01:50:53.860
也对吧

01:50:53.860 --> 01:50:55.260
是不是我再解一下

01:50:55.260 --> 01:50:56.740
那么关键是我们怎么解

01:50:56.740 --> 01:50:57.340
怎么解呢

01:50:57.340 --> 01:50:58.940
数组里面不是一个是nice方法吗

01:50:58.940 --> 01:50:59.820
他要填一个什么

01:50:59.820 --> 01:51:01.700
起始下标

01:51:01.700 --> 01:51:03.380
然后呢是结束下标

01:51:03.380 --> 01:51:04.740
但他取不到结束下标

01:51:04.740 --> 01:51:05.260
对吧

01:51:05.260 --> 01:51:07.860
比方说第起始下标填的是零

01:51:07.860 --> 01:51:09.260
结束下标填的是二

01:51:09.260 --> 01:51:10.700
他取出来的结果是什么呢

01:51:10.700 --> 01:51:12.820
取出来的结果就是零一

01:51:12.820 --> 01:51:14.700
他就把这两项取出来了

01:51:14.780 --> 01:51:15.940
形成了一个新的数

01:51:15.940 --> 01:51:18.260
三十四

01:51:18.260 --> 01:51:20.260
所以说基础很重要很重要

01:51:20.260 --> 01:51:21.740
真的是我们不略

01:51:21.740 --> 01:51:23.420
我们做老师的不厌其反

01:51:23.420 --> 01:51:25.780
要给大家说基础真的太重要了

01:51:25.780 --> 01:51:27.340
因为你基础没有打牢的话

01:51:27.340 --> 01:51:28.420
你再往后边学习

01:51:28.420 --> 01:51:29.980
到处是砍到处是坑

01:51:29.980 --> 01:51:31.220
本来我觉得这里面

01:51:31.220 --> 01:51:32.620
应该没有什么坑的

01:51:32.620 --> 01:51:33.620
因为这个snipe方法

01:51:33.620 --> 01:51:35.260
可能有些同学就忘了这个方法了

01:51:35.260 --> 01:51:37.020
或者是平时根本就用都没有用过

01:51:37.020 --> 01:51:37.620
所以他这里呢

01:51:37.620 --> 01:51:38.300
取到这

01:51:38.300 --> 01:51:40.420
看一下这里是不是5u的新知识

01:51:40.420 --> 01:51:42.340
跟这个5u没有任何关系

01:51:42.340 --> 01:51:43.940
他就是一个数组的原生方法

01:51:43.980 --> 01:51:45.020
snipe

01:51:45.020 --> 01:51:46.740
你这里传一个零传一个二

01:51:46.740 --> 01:51:48.460
是不是结出了一零和一

01:51:48.460 --> 01:51:49.020
对吧

01:51:49.020 --> 01:51:52.260
就把这个东西解决出来了

01:51:52.260 --> 01:51:52.660
对不对

01:51:52.660 --> 01:51:54.180
是不是把这个东西拿出来了

01:51:54.180 --> 01:51:55.660
那如果你这里填一个二

01:51:55.660 --> 01:51:56.740
填一个四

01:51:56.740 --> 01:51:58.060
那么是把这一部分拿出来了

01:51:58.060 --> 01:51:58.660
对吧

01:51:58.660 --> 01:51:59.900
是把这一部分拿出来了

01:51:59.900 --> 01:52:01.300
是不是就是打到我们想要的效果

01:52:01.300 --> 01:52:02.420
我们这里不就在干这个事吗

01:52:02.420 --> 01:52:02.700
对吧

01:52:02.700 --> 01:52:04.220
培寂木卫士

01:52:04.220 --> 01:52:05.380
我们把这个数组拿到

01:52:05.380 --> 01:52:06.540
然后用snipe

01:52:06.540 --> 01:52:08.060
现在问题的关键就在于

01:52:08.060 --> 01:52:11.700
这个数组的这个函数

01:52:11.780 --> 01:52:15.060
这个第一个参数和第二个参数填啥

01:52:15.060 --> 01:52:15.620
填啥呢

01:52:15.620 --> 01:52:19.020
是不是要根据当前的液马和液容量来填啊

01:52:19.020 --> 01:52:19.620
当前的液马

01:52:19.620 --> 01:52:20.340
我们刚才分析过

01:52:20.340 --> 01:52:23.460
它的规律是当前的液马为零

01:52:23.460 --> 01:52:25.060
当前的液马是第一页的时候

01:52:25.060 --> 01:52:26.180
是不是零到二

01:52:28.180 --> 01:52:28.620
对吧

01:52:28.620 --> 01:52:29.420
它得到什么到二

01:52:29.420 --> 01:52:30.540
这里要填零

01:52:30.540 --> 01:52:31.820
这里要填二

01:52:31.820 --> 01:52:33.180
那么当前的液马是二的时候

01:52:33.180 --> 01:52:34.740
这里是二到四

01:52:34.740 --> 01:52:35.740
那么这里填二

01:52:35.740 --> 01:52:36.940
这里填四

01:52:36.940 --> 01:52:38.260
那么你找规律就发现

01:52:38.260 --> 01:52:39.180
这东西是什么

01:52:39.180 --> 01:52:43.020
就是当前当前液马

01:52:43.020 --> 01:52:43.580
减一

01:52:44.700 --> 01:52:45.340
然后呢

01:52:45.340 --> 01:52:46.500
诚意什么呢

01:52:46.500 --> 01:52:48.660
诚意液容量

01:52:48.660 --> 01:52:49.060
其实呢

01:52:49.060 --> 01:52:52.820
我也想过我要不要只跟你们讲知识

01:52:52.820 --> 01:52:54.180
不讲就是应用

01:52:54.180 --> 01:52:54.540
但是呢

01:52:54.540 --> 01:52:56.500
我这样觉得这样的讲下来的话

01:52:56.500 --> 01:52:57.940
对同学们是很多同学

01:52:57.940 --> 01:52:58.980
如果是初学的话

01:52:58.980 --> 01:53:00.260
如果说你以前学过

01:53:00.260 --> 01:53:02.660
那我可以讲给大家吸收很多东西

01:53:02.660 --> 01:53:04.900
但是如果说你以前没有学过

01:53:04.900 --> 01:53:06.260
那么你简直就听天书了

01:53:06.260 --> 01:53:07.820
你不知道在干嘛了

01:53:07.820 --> 01:53:08.700
当前液马

01:53:10.180 --> 01:53:12.580
所以我必须要跟就是

01:53:12.580 --> 01:53:14.540
要用应用来讲

01:53:14.540 --> 01:53:16.220
跟配合的应用来讲

01:53:16.220 --> 01:53:18.900
不然的话有些同学就完全不知道在干嘛

01:53:18.900 --> 01:53:20.140
不知道为什么要这样子写

01:53:20.140 --> 01:53:21.700
这样子用

01:53:21.700 --> 01:53:23.580
因为在应用里边还会发现问题

01:53:23.580 --> 01:53:24.060
对吧

01:53:24.060 --> 01:53:26.300
你看当前液马是1-1是0

01:53:26.300 --> 01:53:27.940
凌乘液容量是0

01:53:27.940 --> 01:53:28.140
对吧

01:53:28.140 --> 01:53:29.260
这里是0

01:53:29.260 --> 01:53:29.420
好

01:53:29.420 --> 01:53:30.220
当前液马是1

01:53:30.220 --> 01:53:32.220
1乘液容量是不是二

01:53:32.220 --> 01:53:32.700
对不对

01:53:32.700 --> 01:53:32.820
好

01:53:32.820 --> 01:53:33.580
当前液马是2

01:53:33.580 --> 01:53:34.540
2-1等于1

01:53:34.540 --> 01:53:35.540
1乘液容量2

01:53:35.540 --> 01:53:36.460
是不等于2

01:53:36.460 --> 01:53:37.740
当前液马是

01:53:37.740 --> 01:53:38.900
这算帅是不是4

01:53:38.900 --> 01:53:39.300
对吧

01:53:39.300 --> 01:53:41.020
对吧

01:53:41.020 --> 01:53:42.740
所以说讲课也停了

01:53:42.740 --> 01:53:44.740
中口蓝条

01:53:44.740 --> 01:53:45.820
没办法找我所有同学

01:53:45.820 --> 01:53:47.380
我知道有些同学在听这个课的时候

01:53:47.380 --> 01:53:49.660
他有一些基础学过一些五幼的

01:53:49.660 --> 01:53:51.300
他就特别希望我给他加深

01:53:51.300 --> 01:53:53.660
但是有些同学是完全是零基础的

01:53:53.660 --> 01:53:55.100
完全没有接触我五幼

01:53:55.100 --> 01:53:56.900
那么他就希望讲得慢一点

01:53:56.900 --> 01:53:58.700
就是讲得前线一点

01:53:58.700 --> 01:53:59.860
所以我都要照顾到

01:53:59.860 --> 01:54:03.140
我说你们懂得是吗

01:54:03.140 --> 01:54:04.100
我太难了

01:54:04.100 --> 01:54:09.660
老是这么努力给你们讲

01:54:09.660 --> 01:54:10.460
大家下来了

01:54:10.460 --> 01:54:13.740
一定要去多看几遍

01:54:13.740 --> 01:54:16.140
如果说你不太清楚的话

01:54:16.140 --> 01:54:18.020
多看几遍

01:54:18.020 --> 01:54:18.900
多看几遍的话

01:54:18.900 --> 01:54:20.700
就一定要去自己写一遍

01:54:20.700 --> 01:54:22.900
真的一定要去自己写一遍

01:54:22.900 --> 01:54:24.100
哎呀

01:54:24.100 --> 01:54:25.660
我说我唯一写你们吧

01:54:25.660 --> 01:54:27.340
你完全可以无视我的唯一写

01:54:27.340 --> 01:54:29.060
你又我又见不到你们人

01:54:29.060 --> 01:54:31.300
我也没法唯一写你们

01:54:31.300 --> 01:54:32.660
你们真正要去写一遍

01:54:32.660 --> 01:54:34.060
不写的话

01:54:34.060 --> 01:54:34.940
没效果的

01:54:34.940 --> 01:54:35.900
你听到白听了

01:54:35.900 --> 01:54:37.900
真的一定要去写一遍

01:54:37.900 --> 01:54:38.580
一定要去写一遍

01:54:38.580 --> 01:54:39.460
光听还没用

01:54:39.460 --> 01:54:40.060
一定要去写

01:54:40.060 --> 01:54:41.900
啊

01:54:41.900 --> 01:54:43.180
我现在要召唤摩利卡了

01:54:43.180 --> 01:54:44.220
今天我们就到这

01:54:44.220 --> 01:54:45.580
时间他们太长了

01:54:45.580 --> 01:54:46.980
我今天我们今天到这

01:54:46.980 --> 01:54:47.580
大家放心

01:54:47.580 --> 01:54:49.220
我一定会给你讲完的

01:54:49.220 --> 01:54:49.980
一定会讲完的

01:54:49.980 --> 01:54:50.740
没有讲完的话

01:54:50.740 --> 01:54:53.180
我对再单独开一个课

01:54:53.180 --> 01:54:53.780
给开个班

01:54:53.780 --> 01:54:54.980
再把声音讲完

01:54:54.980 --> 01:54:55.860
一定给你讲完的

01:54:55.860 --> 01:54:56.940
放心

01:54:56.940 --> 01:54:59.140
反正我们今天太晚了

01:54:59.140 --> 01:55:00.900
我讲的你讲了两个小时

01:55:00.900 --> 01:55:02.060
也扛不住了

01:55:02.060 --> 01:55:03.780
然后摩利卡来吧

01:55:03.780 --> 01:55:04.940
啊

01:55:04.940 --> 01:55:06.380
大家听听摩利卡听一下就业

01:55:06.380 --> 01:55:08.460
今天摩利卡要讲一些很重要的就业知识

01:55:08.460 --> 01:55:14.690
啊

01:55:14.690 --> 01:55:16.010
他又三天多的人去了

01:55:16.010 --> 01:55:16.730
这不是称我不在

01:55:16.730 --> 01:55:18.530
他又去跳舞去了

01:55:18.530 --> 01:55:18.850
哎

01:55:18.850 --> 01:55:23.500
这个两门

01:55:23.500 --> 01:55:23.780
哎

01:55:23.780 --> 01:55:28.270
我再来说一下啊

01:55:28.270 --> 01:55:28.750
啊

01:55:28.750 --> 01:55:29.230
不客气

01:55:29.230 --> 01:55:31.030
应该的啊

01:55:31.030 --> 01:55:31.430
哎

01:55:31.430 --> 01:55:45.330
我再来说一文件

01:55:45.330 --> 01:55:45.530
好

01:55:45.530 --> 01:55:46.690
大家听一下摩利卡讲

01:55:46.690 --> 01:55:48.050
非常重要的就业知识啊

