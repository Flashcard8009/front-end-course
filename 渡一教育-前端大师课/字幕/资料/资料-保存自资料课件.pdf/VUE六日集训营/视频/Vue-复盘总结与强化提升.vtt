WEBVTT

00:00.370 --> 00:02.370
首先上的确实有点晚了

00:02.370 --> 00:03.370
有点晚了

00:03.370 --> 00:05.370
但好的地方呢

00:05.370 --> 00:09.370
是要把我这门课的大纲里边设计到了东西呢

00:09.370 --> 00:14.820
都给大家讲完了

00:16.820 --> 00:17.820
毛利卡呀

00:17.820 --> 00:19.820
小宝宝一会儿我上完课啊

00:19.820 --> 00:20.820
我上完课拿来

00:20.820 --> 00:22.820
因为他昨天有事嘛

00:22.820 --> 00:24.820
所以说带上我前几天

00:24.820 --> 00:26.820
因为我们这门课呢

00:26.820 --> 00:27.820
不光有技术知识

00:27.820 --> 00:29.820
还要给大家介绍很多就业的问题啊

00:29.820 --> 00:31.820
就业的一些指导

00:31.820 --> 00:32.820
所以呢

00:32.820 --> 00:34.820
我前几天

00:34.820 --> 00:36.820
你们懂得当格了

00:36.820 --> 00:37.820
不少的时间

00:37.820 --> 00:39.820
所以说他那边就业的东西呢

00:39.820 --> 00:41.820
还没有讲完

00:41.820 --> 00:42.820
说今天呢

00:42.820 --> 00:44.820
我这里的时间啊

00:44.820 --> 00:46.820
已经没啥东西可以讲了啊

00:46.820 --> 00:48.820
以后我会给大家说啊

00:48.820 --> 00:49.820
我要到底要讲什么

00:49.820 --> 00:50.820
今天晚上

00:50.820 --> 00:51.820
嗯

00:51.820 --> 00:52.820
然后呢

00:52.820 --> 00:53.820
我讲完之后呢

00:53.820 --> 00:54.820
把主要的时间就给毛利卡

00:54.820 --> 00:56.820
他还有很多的心理话

00:56.820 --> 00:58.820
想给你们说

00:58.820 --> 01:02.320
感冒好了

01:02.320 --> 01:03.320
你看昨天那个状态

01:03.320 --> 01:04.320
我就知道我感冒好了

01:04.320 --> 01:11.240
测试

01:11.240 --> 01:12.240
你们有测试题吗

01:12.240 --> 01:13.240
现在

01:13.240 --> 01:14.240
先测试题

01:14.240 --> 01:15.240
拿到了吗

01:15.240 --> 01:19.770
还没有说啊

01:19.770 --> 01:20.770
那怎么会发给你们的啊

01:20.770 --> 01:24.080
会发给你们的

01:24.080 --> 01:25.080
具体怎么发

01:25.080 --> 01:27.080
你就看群里面的消息了啊

01:27.080 --> 01:29.080
我这个测试题写写的

01:29.080 --> 01:31.080
没几道啊都是选择题

01:31.080 --> 01:35.570
慢慢消化吧

01:35.570 --> 01:37.570
因为这个毕竟是那个路播课程

01:37.570 --> 01:39.570
所以说路播课程呢

01:39.570 --> 01:41.570
嗯

01:41.570 --> 01:42.570
我一来呢

01:42.570 --> 01:44.570
是要照顾到那个新手

01:44.570 --> 01:45.570
还有呢

01:45.570 --> 01:46.570
我还要照顾一下

01:46.570 --> 01:48.570
已经有一些技术的同学

01:48.570 --> 01:49.570
要把有技术的同学呢

01:49.570 --> 01:50.570
给卫族

01:50.570 --> 01:52.570
嗯

01:52.570 --> 01:53.570
所以说呢

01:53.570 --> 01:54.570
这个课程呢

01:54.570 --> 01:55.570
大纲呢

01:55.570 --> 01:56.570
我就是之前设

01:56.570 --> 01:57.570
我跟其他老师啊

01:57.570 --> 01:58.570
设者大纲

01:58.570 --> 02:00.570
就是这么一些那种

02:00.570 --> 02:02.570
昨天晚上花了3个小时

02:02.570 --> 02:03.570
就把讲完了

02:03.570 --> 02:04.570
慢慢消化吧

02:04.570 --> 02:05.570
慢慢消化

02:05.570 --> 02:08.200
嗯

02:08.200 --> 02:09.200
你就看

02:09.200 --> 02:10.200
看视频的时候

02:10.200 --> 02:11.200
给他说怎么看啊

02:11.200 --> 02:13.200
你看视频的时候

02:13.200 --> 02:15.200
就是你看那个路播的时候

02:15.200 --> 02:16.200
因为直播的话

02:16.200 --> 02:17.200
你没发暂停

02:17.200 --> 02:19.200
你没发挑战速度

02:19.200 --> 02:20.200
你看路播的时候

02:20.200 --> 02:21.200
你这样子看

02:21.200 --> 02:22.200
你不是不理解嘛

02:22.200 --> 02:23.200
对吧

02:23.200 --> 02:25.200
那我们追踪的代码

02:25.200 --> 02:26.200
不是一步一步

02:26.200 --> 02:27.200
到了追踪的代码的

02:27.200 --> 02:28.200
对吧

02:28.200 --> 02:29.200
他不是一下倒退

02:29.200 --> 02:30.200
追踪的代码的

02:30.200 --> 02:32.200
他是一步一步形成的

02:32.200 --> 02:33.200
说你每看一步的话

02:33.200 --> 02:34.200
那一步有问题

02:34.200 --> 02:35.200
你好好琢磨

02:35.200 --> 02:37.200
你就反复看了一段

02:37.200 --> 02:38.200
他为什么从这个代码

02:38.200 --> 02:40.200
就演变成了另外一个代码

02:40.200 --> 02:41.200
好

02:41.200 --> 02:42.200
并且呢

02:42.200 --> 02:43.200
你要跟着写一遍

02:43.200 --> 02:44.200
你要跟着写一遍

02:44.200 --> 02:45.200
而且呢

02:45.200 --> 02:47.200
我告诉大家怎么去学习

02:47.200 --> 02:49.200
怎么去学习这个技术啊

02:49.200 --> 02:51.200
再说我的

02:51.200 --> 02:52.200
我的学习方式吧

02:52.200 --> 02:54.200
我的学习方式告诉大家

02:54.200 --> 02:55.200
不一定对

02:55.200 --> 02:56.200
不一定是最有效的

02:56.200 --> 02:57.200
但是呢

02:57.200 --> 02:58.200
我习惯了用这种学习方式的

02:58.200 --> 03:00.200
其实我有的时候呢

03:00.200 --> 03:02.200
也会再学习新的东西啊

03:02.200 --> 03:03.200
因为技术这个行业

03:03.200 --> 03:05.200
是永远学不完的

03:05.200 --> 03:07.200
我在学习一个新的东西的时候

03:08.200 --> 03:09.200
什么玩意

03:11.200 --> 03:13.200
我在学习一个新的东西的时候

03:14.200 --> 03:15.200
比方说

03:16.200 --> 03:18.200
我们就学习无忧嘛

03:18.200 --> 03:19.200
就学习无忧

03:19.200 --> 03:20.200
我在拿到无忧这个东西的时候呢

03:20.200 --> 03:21.200
我没有结束过他

03:21.200 --> 03:23.200
他用这种方式来开发

03:23.200 --> 03:24.200
一开始我理解了

03:24.200 --> 03:25.200
通常有一个点

03:25.200 --> 03:26.200
我不理解

03:26.200 --> 03:27.200
不理解怎么办呢

03:27.200 --> 03:29.200
不理解我就拆

03:29.200 --> 03:30.200
我一边拆呢

03:30.200 --> 03:32.200
一边去写代码做实验

03:32.200 --> 03:34.200
看一下我拆的对不对

03:34.200 --> 03:35.200
因为我拆的东西

03:35.200 --> 03:37.200
我认为他这个东西是这么回事

03:37.200 --> 03:39.200
那么我就可以通过这种理论

03:39.200 --> 03:40.200
来推到出一些东西

03:40.200 --> 03:41.200
对吧

03:41.200 --> 03:42.200
他是可以推到的

03:42.200 --> 03:43.200
我看一下推到出来的东西对不对

03:43.200 --> 03:45.200
就是我来用代码来进行验证

03:45.200 --> 03:47.200
发现有问题的话

03:47.200 --> 03:48.200
说明我的之前的猜想

03:48.200 --> 03:49.200
可能就有问题

03:49.200 --> 03:50.200
然后呢

03:50.200 --> 03:51.200
拆了几次过后

03:51.200 --> 03:53.200
再回去看他的讲解

03:53.200 --> 03:55.200
比方看官方文档

03:55.200 --> 03:56.200
或者是你看我的视频

03:56.200 --> 03:58.200
再看他的讲解

03:58.200 --> 03:59.200
这个时候呢

03:59.200 --> 04:00.200
跟你直接看

04:00.200 --> 04:01.200
你会发现

04:01.200 --> 04:02.200
有了很大的区别了

04:02.200 --> 04:03.200
可能呢

04:03.200 --> 04:05.200
你还没有完全了解

04:05.200 --> 04:06.200
但是呢

04:06.200 --> 04:08.200
你通过自己去

04:08.200 --> 04:10.200
琢磨了这么一段时间之后

04:10.200 --> 04:11.200
再来看

04:11.200 --> 04:13.200
你一定有新的认识

04:13.200 --> 04:15.200
通过这种方式呢

04:15.200 --> 04:17.200
我觉得可能会对大家

04:17.200 --> 04:19.200
有说帮助啊

04:19.200 --> 04:21.200
就是你去猜

04:21.200 --> 04:22.200
很多时候有的

04:22.200 --> 04:23.200
因为我为什么去养成

04:23.200 --> 04:24.200
养成这种习惯

04:24.200 --> 04:25.200
很多时候官方文档

04:25.200 --> 04:28.200
写的特别特别模糊

04:28.200 --> 04:30.200
或者说他压根就没提

04:30.200 --> 04:32.200
没有提他的原理性的东西

04:32.200 --> 04:33.200
我又难得去看

04:33.200 --> 04:34.200
他的原代码了

04:34.200 --> 04:35.200
怎么办呢

04:35.200 --> 04:36.200
我就猜

04:36.200 --> 04:37.200
当然最好是能够

04:37.200 --> 04:39.200
语读他的原代码

04:39.200 --> 04:40.200
所以我要商议

04:40.200 --> 04:41.200
一些课的时候

04:41.200 --> 04:42.200
做原码分析的时候

04:42.200 --> 04:43.200
我肯定要把他原代码

04:43.200 --> 04:44.200
要看一遍

04:44.200 --> 04:45.200
有的时候呢

04:45.200 --> 04:46.200
你如果说自己去

04:46.200 --> 04:47.200
学习的东西的时候

04:47.200 --> 04:48.200
你懒得去看他的原代

04:48.200 --> 04:49.200
那你就猜

04:49.200 --> 04:51.200
其实你有了一些技术

04:51.200 --> 04:52.200
经验之后呢

04:52.200 --> 04:53.200
你猜的话

04:53.200 --> 04:54.200
都八九不离十了

04:54.200 --> 04:56.200
你猜出来的结果

04:56.200 --> 04:58.200
他八九不离十了

04:58.200 --> 05:00.200
我是这样子去学的

05:00.200 --> 05:01.200
我学东西

05:01.200 --> 05:07.420
就这样子学的

05:07.420 --> 05:08.420
不是不是

05:08.420 --> 05:10.420
你要在github上面

05:10.420 --> 05:11.420
去找他的原代码

05:11.420 --> 05:12.420
那个东西是

05:12.420 --> 05:13.420
我跟大家

05:13.420 --> 05:14.420
那个无诱点界

05:14.420 --> 05:15.420
是打包之后的

05:15.420 --> 05:16.420
他只有一个文件

05:16.420 --> 05:17.420
谁会把所有代码

05:17.420 --> 05:18.420
全部写到一个文件

05:18.420 --> 05:19.420
对不对

05:19.420 --> 05:20.420
但是你要看

05:20.420 --> 05:21.420
现在很多的

05:21.420 --> 05:22.420
前端框架的

05:22.420 --> 05:23.420
原代码的话

05:23.420 --> 05:24.420
你会发现他们都是

05:24.420 --> 05:25.420
用webpack写的

05:25.420 --> 05:27.420
都是用了构建工具的

05:27.420 --> 05:29.420
都是用了这个东西的

05:29.420 --> 05:31.420
目前最流行的就是webpack

05:31.420 --> 05:32.420
所以说你这个东西

05:32.420 --> 05:33.420
是非常

05:33.420 --> 05:34.420
也不算基础吧

05:34.420 --> 05:35.420
应该说

05:35.420 --> 05:36.420
非常非常重要的一块

05:36.420 --> 05:37.420
你这个东西

05:37.420 --> 05:38.420
必须要搞清楚

05:38.420 --> 05:39.420
你不然的话

05:39.420 --> 05:40.420
你看原代码都看得牢火

05:40.420 --> 05:43.730
你不能超

05:43.730 --> 05:44.730
视频的代码

05:44.730 --> 05:45.730
肯定是要忘的

05:45.730 --> 05:46.730
因为你超的话

05:46.730 --> 05:47.730
没有印象

05:47.730 --> 05:48.730
一定是自己琢磨出来的

05:48.730 --> 05:49.730
你老师写了过后

05:49.730 --> 05:51.730
你要理解他的原理

05:51.730 --> 05:52.730
他为什么要这样子写

05:52.730 --> 05:53.730
如果说

05:53.730 --> 05:54.730
你不认同老师的写法

05:54.730 --> 05:55.730
可以没问题

05:55.730 --> 05:56.730
你按自己的写法写

05:56.730 --> 05:57.730
你后面写着写着

05:57.730 --> 05:58.730
你会发现一些问题

05:58.730 --> 05:59.730
再回过头来

05:59.730 --> 06:00.730
看老师的视频

06:00.730 --> 06:01.730
你就理解了

06:01.730 --> 06:02.730
老师当时

06:02.730 --> 06:03.730
为什么这样子写

06:03.730 --> 06:04.730
就是很多理解性的东西

06:04.730 --> 06:05.730
你需要反复的去想

06:05.730 --> 06:06.730
反复的训练

06:08.730 --> 06:09.730
咱们差不多了

06:09.730 --> 06:10.730
时间8点5分

06:10.730 --> 06:11.730
开始上课

06:11.730 --> 06:13.730
今天我们已经没有

06:13.730 --> 06:15.730
新的技术内容了

06:15.730 --> 06:16.730
实际上

06:16.730 --> 06:17.730
经过这么几天的学习

06:17.730 --> 06:18.730
大家应该感觉到

06:18.730 --> 06:19.730
你要说用5u

06:19.730 --> 06:21.730
来做出一个效果出来

06:21.730 --> 06:23.730
就像我们之前做的那个电影

06:23.730 --> 06:24.730
还有分业

06:24.730 --> 06:25.730
还有登录

06:25.730 --> 06:26.730
都做的那一套东西出来

06:26.730 --> 06:28.730
它是能够做出来东西的

06:28.730 --> 06:29.730
做出来一个完整的系统

06:29.730 --> 06:30.730
我们用我们

06:30.730 --> 06:32.730
目前学习的过的知识

06:32.730 --> 06:34.730
就已经能够做出一个

06:34.730 --> 06:36.730
一个应用系统出来了

06:36.730 --> 06:38.730
只不过我给大家做的比较简单

06:38.730 --> 06:39.730
因为时间有限

06:39.730 --> 06:41.730
其实做一小件大的话

06:41.730 --> 06:44.730
做一些更复杂的系统

06:44.730 --> 06:47.730
比我们之前做了一个

06:47.730 --> 06:48.730
更加复杂的系统的话

06:48.730 --> 06:50.730
也是类似的道理

06:50.730 --> 06:51.730
不过这几天的学习下来

06:51.730 --> 06:52.730
同学们应该感觉到

06:52.730 --> 06:53.730
其实5u里边

06:53.730 --> 06:55.730
还有很多很多的新知识

06:55.730 --> 06:57.730
还有很多很多的知识

06:57.730 --> 06:59.730
我在这六天的课程里边

06:59.730 --> 07:00.730
是没有讲的

07:00.730 --> 07:01.730
因为我们六天的课程

07:01.730 --> 07:02.730
我们设计的

07:02.730 --> 07:04.730
就是让小白

07:04.730 --> 07:05.730
零基础的小白

07:05.730 --> 07:07.730
能够用5u来写代码了

07:07.730 --> 07:08.730
能够做东西了

07:08.730 --> 07:10.730
是毁了这么一个目的

07:10.730 --> 07:11.730
所以说我们设计的这么

07:11.730 --> 07:13.730
六天的课程

07:13.730 --> 07:14.730
但是你要说

07:14.730 --> 07:16.730
如果你要打算用5u

07:16.730 --> 07:17.730
去找工作

07:17.730 --> 07:19.730
进入一个正式的岗位

07:19.730 --> 07:20.730
或者说你要用

07:20.730 --> 07:22.730
找到一个更好的工作

07:22.730 --> 07:24.730
一个非常非常满意的工作

07:24.730 --> 07:25.730
或者说进大厂

07:25.730 --> 07:26.730
那也还有很多东西

07:26.730 --> 07:27.730
需要去深入

07:27.730 --> 07:29.730
其实我在讲的过程中

07:29.730 --> 07:30.730
也给大家提到了

07:30.730 --> 07:31.730
对吧

07:31.730 --> 07:33.730
还有一个UI-COOT

07:33.730 --> 07:34.730
那个东西倒是蛮简单的

07:34.730 --> 07:35.730
UI-COOT

07:35.730 --> 07:37.730
ElementUI

07:37.730 --> 07:38.730
还有一个UI-COOT

07:38.730 --> 07:39.730
就是他给你做了

07:39.730 --> 07:40.730
很多很多的组件

07:40.730 --> 07:42.730
已经做好了一些组件了

07:42.730 --> 07:43.730
你可以直接使用

07:43.730 --> 07:45.730
那么我们今天晚上干嘛呢

07:45.730 --> 07:47.730
我们今天晚上是一个

07:47.730 --> 07:49.730
最终有一个收尾的课程

07:49.730 --> 07:50.730
这个收尾的课程

07:50.730 --> 07:52.730
我给大家取个名字叫做

07:52.730 --> 07:54.730
副盘总结与强化提升

07:54.730 --> 07:56.730
我写了这么一个PPT

07:56.730 --> 07:57.730
写这么一个PPT

07:57.730 --> 07:59.730
我把这个东西放过去了

07:59.730 --> 08:00.730
放小一点吧

08:02.730 --> 08:04.730
写了这么一个PPT

08:04.730 --> 08:05.730
在这个PPT里面

08:05.730 --> 08:07.730
其实就是意识

08:07.730 --> 08:08.730
对我们之前

08:08.730 --> 08:09.730
学习过的知识

08:09.730 --> 08:10.730
做一个总结

08:10.730 --> 08:13.730
另外一个是要重点强调

08:13.730 --> 08:14.730
我们之前

08:14.730 --> 08:17.730
那几天学习过的一些重点内容

08:17.730 --> 08:18.730
不然的话

08:18.730 --> 08:19.730
也和同学刚才说了

08:19.730 --> 08:20.730
学到就忘了

08:20.730 --> 08:21.730
其实你忘了

08:21.730 --> 08:22.730
可以看路播

08:22.730 --> 08:23.730
但是路播

08:23.730 --> 08:24.730
它可能知识点比较散

08:24.730 --> 08:25.730
比较细

08:25.730 --> 08:27.730
那么我们通过这么一节课

08:27.730 --> 08:28.730
就它进行强化总结

08:28.730 --> 08:30.730
让大家知道哪些是重点

08:30.730 --> 08:31.730
哪些是必须要掌握的

08:31.730 --> 08:32.730
好吧

08:32.730 --> 08:33.730
我这里写一个PPT

08:33.730 --> 08:34.730
今天晚上

08:34.730 --> 08:35.730
让大家见识一下

08:35.730 --> 08:37.730
我的PPT制作的能力

08:37.730 --> 08:38.730
其实我这个PPT

08:38.730 --> 08:39.730
做的蛮简单的

08:39.730 --> 08:41.730
时间比较仓促

08:41.730 --> 08:42.730
看一下吧

08:45.730 --> 08:46.730
我们首先

08:46.730 --> 08:47.730
把整个过程

08:47.730 --> 08:48.730
分为两个部分

08:48.730 --> 08:49.730
这个时候

08:49.730 --> 08:50.730
我就看不到你们的评论了

08:50.730 --> 08:52.730
一个是关于回顾

08:52.730 --> 08:54.730
回顾我们之前学过的知识

08:54.730 --> 08:55.730
然后我会强调一些重点

08:55.730 --> 08:57.730
另外一个部分

08:57.730 --> 08:58.730
就是掌望

08:58.730 --> 09:00.730
就掌望五幼未来的东西

09:00.730 --> 09:02.730
我们重点是在回顾这里

09:02.730 --> 09:03.730
因为五幼未来的东西

09:03.730 --> 09:04.730
我一会会说到

09:04.730 --> 09:06.730
还有很多很多的未知书

09:06.730 --> 09:08.730
我们这里首先回顾

09:08.730 --> 09:09.730
回顾我们学习的知识里面

09:09.730 --> 09:10.730
其实就三大件

09:10.730 --> 09:12.730
一个是五幼本身

09:12.730 --> 09:14.730
一个是五幼Rotor路由

09:14.730 --> 09:16.730
一个是五幼X

09:16.730 --> 09:18.730
也就是数据处理

09:18.730 --> 09:19.730
我们首先看五幼

09:19.730 --> 09:20.730
我们学过哪些东西

09:20.730 --> 09:21.730
哪些是重点

09:21.730 --> 09:22.730
第一个

09:22.730 --> 09:23.730
我们介绍五幼的时候

09:23.730 --> 09:25.730
介绍了五幼的一些特点

09:25.730 --> 09:26.730
对吧

09:26.730 --> 09:28.730
中有一个特点就是叫做建进式

09:28.730 --> 09:29.730
什么是建进式呢

09:29.730 --> 09:30.730
我们当时也解释过了

09:30.730 --> 09:33.730
它特别是改造旧系统的时候

09:33.730 --> 09:35.730
可以一步一步地进行改造

09:35.730 --> 09:37.730
那么为什么它具有建进式呢

09:37.730 --> 09:39.730
就是因为五幼

09:39.730 --> 09:42.730
里边它只会影响页面的

09:42.730 --> 09:43.730
某一个区域

09:43.730 --> 09:44.730
你看一下

09:44.730 --> 09:46.730
我把这个东西调出来

09:46.730 --> 09:47.730
指针一下

09:47.730 --> 09:48.730
提光笔

09:48.730 --> 09:50.730
你看这里

09:50.730 --> 09:51.730
在五幼里边

09:51.730 --> 09:53.730
我们是不是要配置L

09:53.730 --> 09:54.730
对不对

09:54.730 --> 09:55.730
就是我们要影响的页

09:55.730 --> 09:57.730
就是把页面中哪一个区域

09:57.730 --> 09:59.730
这里写的是一个CSS选择器

09:59.730 --> 10:00.730
把页面中哪一个区域

10:00.730 --> 10:02.730
让五幼来控制

10:02.730 --> 10:04.730
当然我们当时讲了一些细节

10:04.730 --> 10:06.730
我们除了用这种方式之外

10:06.730 --> 10:08.730
是不是还可以用它的内置方法

10:08.730 --> 10:09.730
Mount

10:09.730 --> 10:10.730
对吧

10:10.730 --> 10:11.730
可以用内置方法Mount

10:11.730 --> 10:12.730
也可以达到同样的效果

10:12.730 --> 10:13.730
那么它会

10:13.730 --> 10:14.730
这样子五幼

10:14.730 --> 10:15.730
它就会找到页面中

10:15.730 --> 10:16.730
对应的区域

10:16.730 --> 10:18.730
来控制这个区域

10:18.730 --> 10:19.730
它只会影响这个区域

10:19.730 --> 10:20.730
对其它区域

10:20.730 --> 10:22.730
不会产生任何影响

10:22.730 --> 10:24.730
这就是五幼建进式的原因

10:24.730 --> 10:26.730
它为什么可以具有建进式

10:26.730 --> 10:29.730
因为它只会影响五幼的某一个区域

10:29.730 --> 10:31.730
由于它仅控制一面中指定的区域

10:31.730 --> 10:32.730
那么其他区域

10:32.730 --> 10:33.730
它就不会受到五幼影响

10:33.730 --> 10:35.730
而其他区域你用接换位你用

10:35.730 --> 10:36.730
其他区域你用react

10:36.730 --> 10:38.730
只用写下什么随便用

10:38.730 --> 10:41.730
于是我们在改造就系统的时候

10:41.730 --> 10:43.730
可以分区域的改造工程

10:43.730 --> 10:45.730
我们把这个区域改造成五幼

10:45.730 --> 10:46.730
其他区域不先不变

10:46.730 --> 10:48.730
这样子可以降低成本和风险

10:48.730 --> 10:50.730
如果说你一下子推翻重来的话

10:50.730 --> 10:52.730
一是成本过高

10:52.730 --> 10:53.730
就开发时间过长

10:53.730 --> 10:55.730
另外一个风险也挺高

10:55.730 --> 10:57.730
也不是清楚团队里边

10:57.730 --> 10:59.730
五幼掌握的熟不熟练

10:59.730 --> 11:01.730
因为毕竟以前用的是旧方式开发

11:01.730 --> 11:02.730
现在要用新方式开发了

11:02.730 --> 11:03.730
风险也挺大的

11:03.730 --> 11:04.730
这是五幼的第一个特点

11:04.730 --> 11:06.730
建进式

11:06.730 --> 11:08.730
好 第二个五幼的特点是主建化

11:08.730 --> 11:09.730
这也是

11:09.730 --> 11:10.730
其实我们整个五幼的讲解

11:10.730 --> 11:12.730
就是围造这三个讲解的

11:12.730 --> 11:13.730
第二是主建化

11:13.730 --> 11:15.730
这一块是五幼的重点内容

11:15.730 --> 11:17.730
那么首先我们讲到了

11:17.730 --> 11:18.730
主建是什么

11:18.730 --> 11:21.730
主建是五幼里面的一个基本的功能单元

11:21.730 --> 11:23.730
这个基本的功能单元里边

11:23.730 --> 11:24.730
就是我们一个页面

11:24.730 --> 11:26.730
你可以把切分切分切分

11:26.730 --> 11:27.730
就像切分那个界面一样

11:27.730 --> 11:29.730
DIV到DIV

11:29.730 --> 11:31.730
但是我们以前ATMLSS的时候

11:31.730 --> 11:33.730
只是切分静态页面

11:33.730 --> 11:34.730
那么在五幼里面

11:34.730 --> 11:35.730
它就是把每一个区域

11:35.730 --> 11:36.730
当成一个主建了

11:36.730 --> 11:40.730
每一个主建它包含的是功能和界面

11:40.730 --> 11:41.730
那么这一张

11:41.730 --> 11:42.730
这里看一下

11:42.730 --> 11:43.730
一个主建它里面有功能

11:43.730 --> 11:44.730
也有界面

11:44.730 --> 11:45.730
功能是怎么来做的

11:45.730 --> 11:48.730
功能实际上你就是对主建的数据

11:48.730 --> 11:50.730
主建里面不是有各种各样的数据吗

11:50.730 --> 11:51.730
对它数据进行处理

11:51.730 --> 11:53.730
所以说我们在用主建的时候

11:53.730 --> 11:56.730
特别特别明显的一点

11:56.730 --> 11:59.730
就是我们操控的是数据

11:59.730 --> 12:01.730
很多时候操控的是数据

12:01.730 --> 12:03.730
那么数据怎么来操控呢

12:03.730 --> 12:04.730
一般是通过配置来实现的

12:04.730 --> 12:05.730
配置啥呢

12:05.730 --> 12:06.730
配置data

12:06.730 --> 12:08.730
我自己的数据有data

12:08.730 --> 12:09.730
不知道的数据

12:09.730 --> 12:11.730
就用别人给我就是probs

12:11.730 --> 12:13.730
当我们发生一件事的时候

12:13.730 --> 12:14.730
要做一些处理

12:14.730 --> 12:15.730
要把数据

12:15.730 --> 12:16.730
让数据发生变化

12:16.730 --> 12:18.730
我们一般会写messor的

12:18.730 --> 12:19.730
如果说我们有一些数据

12:19.730 --> 12:20.730
是根据data

12:20.730 --> 12:22.730
或者是probs计算出来的

12:22.730 --> 12:23.730
我们就写computed

12:23.730 --> 12:24.730
对吧

12:24.730 --> 12:26.730
我们从始终的关注点

12:26.730 --> 12:27.730
核心的关注点

12:27.730 --> 12:28.730
是它的数据

12:28.730 --> 12:30.730
有它的功能

12:30.730 --> 12:31.730
有了数据之后

12:31.730 --> 12:34.730
我们可以根据数据来渲染界面

12:34.730 --> 12:35.730
界面实际上是一个什么

12:35.730 --> 12:37.730
界面其实就是主建要展示给

12:37.730 --> 12:40.730
用户看的一个什么东西

12:40.730 --> 12:41.730
在我们具体的单码里面

12:41.730 --> 12:43.730
它表现在配置什么呢

12:43.730 --> 12:44.730
配置component

12:44.730 --> 12:45.730
就是我这个主建里面

12:45.730 --> 12:47.730
要用到哪些别的主建

12:47.730 --> 12:49.730
另外一个体现在

12:49.730 --> 12:50.730
template里面

12:50.730 --> 12:52.730
最主要的是体现在template里面

12:52.730 --> 12:54.730
就是我要显示什么东西

12:54.730 --> 12:55.730
全在模板里面

12:55.730 --> 12:57.730
这就是主建两大块

12:57.730 --> 12:58.730
一个是功能

12:58.730 --> 12:59.730
一个是界面

12:59.730 --> 13:00.730
我们这里就顺便回顾了

13:00.730 --> 13:02.730
主建里面的一些配置的

13:02.730 --> 13:03.730
对吧

13:03.730 --> 13:05.730
然后我们看主建的另外一个

13:05.730 --> 13:07.730
主建是一个独立的功能单元

13:07.730 --> 13:09.730
也就是说我们写主建的时候

13:09.730 --> 13:11.730
我一旦给大家强调

13:11.730 --> 13:13.730
不要去想象这个主建

13:13.730 --> 13:14.730
要被谁用

13:14.730 --> 13:16.730
它可能会被任何一个人使用

13:16.730 --> 13:19.730
会被任何一个其他主建使用

13:19.730 --> 13:20.730
就是你要尽量的

13:20.730 --> 13:22.730
把它做得更加具有通用性

13:22.730 --> 13:24.730
所以它是一个独立的功能单元

13:24.730 --> 13:25.730
你写这个主建的时候

13:25.730 --> 13:27.730
只关注这个主建本身

13:27.730 --> 13:29.730
只关注这个小的区域本身

13:29.730 --> 13:31.730
不要去考虑页面上其他的区域

13:31.730 --> 13:33.730
这样子才是裁分吧

13:33.730 --> 13:34.730
对吧

13:34.730 --> 13:35.730
不然的话你写这个区域

13:35.730 --> 13:36.730
你老是去考虑页面

13:36.730 --> 13:37.730
其他区域

13:37.730 --> 13:38.730
那也不叫裁分了

13:38.730 --> 13:39.730
你这个思维逻辑的话

13:39.730 --> 13:41.730
也更加复杂了

13:41.730 --> 13:43.730
那么它可以做什么呢

13:43.730 --> 13:45.730
它可以管理自身的状态

13:45.730 --> 13:47.730
接收外来的属性

13:47.730 --> 13:49.730
对需要外部处理的位置

13:49.730 --> 13:51.730
使用事件

13:51.730 --> 13:53.730
你看一下

13:53.730 --> 13:54.730
主建我们画成图了

13:54.730 --> 13:55.730
一个主建画成图

13:55.730 --> 13:57.730
应该是这么一种结构

13:57.730 --> 13:59.730
就说它有自己的数据

13:59.730 --> 14:00.730
这个数据是它主建自己的

14:00.730 --> 14:01.730
别人看不见

14:01.730 --> 14:03.730
别人也看不见这个数据

14:03.730 --> 14:04.730
它是它自己维护的

14:04.730 --> 14:05.730
那么这个数据

14:05.730 --> 14:06.730
我们把它叫做主建状态

14:06.730 --> 14:07.730
配置在哪儿的

14:07.730 --> 14:08.730
是不是配置在data里面的

14:08.730 --> 14:10.730
是一个函数

14:10.730 --> 14:12.730
返回到一个对象

14:12.730 --> 14:14.730
主建这里

14:14.730 --> 14:15.730
如果说它不知道

14:15.730 --> 14:17.730
有些数据它是不知道的

14:17.730 --> 14:18.730
有些数据不知道的

14:18.730 --> 14:20.730
那么它可以来自于probs

14:20.730 --> 14:22.730
通过使用这个主建的人

14:22.730 --> 14:24.730
给它传递进来

14:24.730 --> 14:26.730
就像我们当时做的分业主建一样

14:26.730 --> 14:27.730
当前业嘛是多少

14:27.730 --> 14:28.730
业容量是多少

14:28.730 --> 14:29.730
我不知道

14:29.730 --> 14:30.730
你传给我呗

14:30.730 --> 14:31.730
它就是属性

14:31.730 --> 14:33.730
一个主建的数据

14:33.730 --> 14:35.730
只能来自于这两个地方

14:35.730 --> 14:36.730
一个是属性

14:36.730 --> 14:37.730
一个是状态

14:37.730 --> 14:38.730
对吧

14:38.730 --> 14:39.730
这是主建的数据

14:39.730 --> 14:41.730
状态是外来的

14:41.730 --> 14:42.730
状态是自己的

14:42.730 --> 14:43.730
属性是别人的

14:43.730 --> 14:45.730
当然这里我们也反复强调了

14:45.730 --> 14:50.100
状态是可以自行更改的

14:50.100 --> 14:52.100
对于这个主建而言

14:52.100 --> 14:54.100
它的属性是不能更改的

14:54.100 --> 14:56.100
因为它的数据是来自于别人的

14:56.100 --> 14:57.100
数据属于谁

14:57.100 --> 14:59.100
谁就能更改

14:59.100 --> 15:01.100
当主建在运行的过程中

15:01.100 --> 15:03.100
发生了一些事情

15:03.100 --> 15:05.100
这个主建自身处理不了

15:05.100 --> 15:07.100
典型的例子是什么呢

15:07.100 --> 15:09.100
典型的例子就是我们当时

15:11.100 --> 15:12.100
当时那个分业主建

15:12.100 --> 15:14.100
当用户点击

15:14.100 --> 15:15.100
叶马的时候

15:15.100 --> 15:16.100
主建要做什么呢

15:16.100 --> 15:17.100
他做不了

15:17.100 --> 15:19.100
他本来想去改变

15:19.100 --> 15:20.100
叶马的

15:20.100 --> 15:21.100
但是呢

15:21.100 --> 15:22.100
由于这个叶马

15:22.100 --> 15:23.100
他是从

15:23.100 --> 15:24.100
属性传进来的

15:24.100 --> 15:25.100
说他没有权力改变

15:25.100 --> 15:27.100
说他什么都不能做

15:27.100 --> 15:29.100
但是这件事情又确实发生了

15:29.100 --> 15:30.100
又应该去做一些事

15:30.100 --> 15:32.100
所以说他怎么样了

15:32.100 --> 15:33.100
他就拋出事件

15:33.100 --> 15:36.100
用这种方式来拋出一些事件

15:36.100 --> 15:37.100
要传递

15:37.100 --> 15:38.100
给这个事件里面

15:38.100 --> 15:39.100
传递什么信息

15:39.100 --> 15:40.100
你就去传递

15:40.100 --> 15:41.100
那么使用这个主建的人

15:41.100 --> 15:43.100
是不是可以注册事件了

15:43.100 --> 15:44.100
就当你发生什么事的时候

15:44.100 --> 15:45.100
我去做什么

15:45.100 --> 15:47.100
是靠使用这个主建的人

15:47.100 --> 15:48.100
来去完成的

15:48.100 --> 15:49.100
主建自己呢

15:49.100 --> 15:50.100
他只管拋出事件

15:50.100 --> 15:52.100
你们以后在编写主建过程中

15:52.100 --> 15:53.100
你知道

15:53.100 --> 15:54.100
你肯定知道他发生了一件事

15:54.100 --> 15:55.100
但是呢

15:55.100 --> 15:56.100
你突然发现他处理不了

15:56.100 --> 15:57.100
这件事情

15:57.100 --> 15:58.100
仔细一想

15:58.100 --> 16:00.100
我这个主建你处理不了

16:00.100 --> 16:01.100
所以说你这么办了

16:01.100 --> 16:02.100
马上拋出事件

16:02.100 --> 16:03.100
你都不用去管

16:03.100 --> 16:04.100
谁在用这个主建

16:04.100 --> 16:06.100
你直接把事件拋出去玩笑

16:06.100 --> 16:08.100
以后你写主建就这样写

16:08.100 --> 16:10.100
比方说你写一个分业主建

16:10.100 --> 16:11.100
你知道这里点击的分业

16:11.100 --> 16:12.100
肯定有一件事发生了

16:12.100 --> 16:14.100
你肯定要处理

16:14.100 --> 16:15.100
但是你处理不了

16:15.100 --> 16:16.100
你拋出事件

16:16.100 --> 16:17.100
让别人来管理

16:17.100 --> 16:18.100
搞定这件事情

16:18.100 --> 16:20.100
这是关于一个主建

16:20.100 --> 16:22.100
我们从通过一个主建的角度

16:22.100 --> 16:23.100
来看待这个东西

16:23.100 --> 16:24.100
帮大家

16:24.100 --> 16:27.100
梳理一下这个思路

16:28.100 --> 16:29.100
另外呢

16:29.100 --> 16:30.100
我们在开发的过程中

16:30.100 --> 16:32.100
肯定不只写一个主建

16:32.100 --> 16:33.100
主建里边呢

16:33.100 --> 16:34.100
可能要用到别的主建

16:34.100 --> 16:35.100
别的主建里边

16:35.100 --> 16:36.100
又可能要用到别的主建

16:36.100 --> 16:38.100
他就会形成一种千套关系

16:38.100 --> 16:40.100
A主建使用B主建

16:40.100 --> 16:41.100
B主建里边套了C主建

16:41.100 --> 16:43.100
C主建套了D主建

16:43.100 --> 16:44.100
那么这种依赖关系

16:44.100 --> 16:46.100
他就会形成一种塑形结构

16:46.100 --> 16:47.100
比方说我们之前写的

16:47.100 --> 16:49.100
项目里边是不是有个跟主建

16:49.100 --> 16:51.100
APP跟主建

16:51.100 --> 16:53.100
那么他是直接渲染出去了

16:53.100 --> 16:54.100
那么真主建里边

16:54.100 --> 16:55.100
是不是用到别的主建

16:55.100 --> 16:56.100
别的主建用到别的主建

16:56.100 --> 16:59.100
他就会形成这么一棵主建树

16:59.100 --> 17:01.100
那么在这棵主建树里边

17:01.100 --> 17:02.100
我们的数据

17:02.100 --> 17:04.100
他是至上而下

17:04.100 --> 17:05.100
进行传递的

17:05.100 --> 17:07.100
我们把它叫做单向数据留

17:07.100 --> 17:08.100
比方说我们跟主建

17:08.100 --> 17:09.100
有些数据

17:09.100 --> 17:10.100
他怎么传递过去呢

17:10.100 --> 17:13.100
他通过probs传递给下面的主建

17:13.100 --> 17:14.100
下面的主建需要一些数据

17:14.100 --> 17:16.100
来自于跟主建

17:16.100 --> 17:18.100
他里边又要用到其他主建

17:18.100 --> 17:19.100
有可能会用到其他主建

17:19.100 --> 17:21.100
那么他在使用其他主建的时候

17:21.100 --> 17:22.100
又需要一些数据

17:22.100 --> 17:23.100
他又把数据传给他

17:23.100 --> 17:25.100
这样子从上到下

17:25.100 --> 17:26.100
一层一层传递过去了

17:26.100 --> 17:27.100
这叫单向数据留

17:27.100 --> 17:32.100
数据从副主建一直传递到直主建

17:32.100 --> 17:33.100
而不是反向的

17:33.100 --> 17:34.100
他不会反向

17:34.100 --> 17:36.100
虽然说我们有VMOD

17:36.100 --> 17:37.100
但是我给大家解释了

17:37.100 --> 17:40.100
VMOD它只是一个与法堂

17:40.100 --> 17:42.100
最终它是通过跟主建来传递的

17:42.100 --> 17:44.100
它不会反向传递

17:44.100 --> 17:46.100
单向数据留它的好处在于

17:46.100 --> 17:49.100
它可以非常非常方便的去测试

17:49.100 --> 17:50.100
去调试

17:50.100 --> 17:53.100
而且不太容易出错

17:53.100 --> 17:55.100
这是关于数据留单向的

17:55.100 --> 17:58.100
但是我们特别强调了

17:58.100 --> 17:59.100
这也是为什么

17:59.100 --> 18:02.100
说主建里面不能改probs的原因

18:02.100 --> 18:03.100
那么接下来

18:03.100 --> 18:05.100
我们主建里面学到事件

18:05.100 --> 18:07.100
当我们的直主建发生一件事的时候

18:07.100 --> 18:08.100
它处理不了

18:08.100 --> 18:09.100
它就会扔出一个事件

18:09.100 --> 18:10.100
通过什么呢

18:10.100 --> 18:12.100
通过AMAT来扔出事件

18:12.100 --> 18:13.100
那么扔出的事件

18:13.100 --> 18:15.100
是不是副主建会知道

18:15.100 --> 18:16.100
副主建就知道

18:16.100 --> 18:17.100
你这个时候发生了一件事

18:17.100 --> 18:18.100
我要进行处理

18:18.100 --> 18:20.100
比方说副主建他改了数据

18:20.100 --> 18:21.100
是不是有重新传递的数据

18:21.100 --> 18:23.100
他就会扔出事件

18:23.100 --> 18:25.100
我这里画了一个虚线

18:25.100 --> 18:26.100
为什么画虚线呢

18:26.100 --> 18:29.100
因为副主建他可能没有管这个事件

18:29.100 --> 18:31.100
可能没有注册这个事件

18:31.100 --> 18:32.100
这个事件发生了就发生了

18:32.100 --> 18:33.100
什么都没有运行

18:33.100 --> 18:36.100
是这么个意思

18:36.100 --> 18:39.100
这就是主建的事件

18:39.100 --> 18:42.100
但是它并没有破坏单向数据流

18:42.100 --> 18:44.100
因为数据还是从上到下的

18:44.100 --> 18:47.100
只是在事件里面

18:47.100 --> 18:50.100
我对副主建进行了通知

18:50.100 --> 18:51.100
我告诉你发生了一件事

18:51.100 --> 18:53.100
如果说你要给我传别的数据的话

18:53.100 --> 18:54.100
你就传

18:54.100 --> 18:55.100
不传的话拿到

18:55.100 --> 18:59.100
它是这么一种逻辑

18:59.100 --> 19:00.100
然后我们又讲了

19:00.100 --> 19:02.100
主建的生命周期

19:02.100 --> 19:05.100
一个主建它从诞生到消费

19:05.100 --> 19:08.100
它会经历很多很多的阶段

19:08.100 --> 19:10.100
会经历很多很多的阶段

19:10.100 --> 19:11.100
当时我们重点讲了

19:11.100 --> 19:14.100
每个都说到了

19:14.100 --> 19:16.100
我们重点讲了就是mounted

19:16.100 --> 19:18.100
咱们来过一次

19:18.100 --> 19:20.100
一个是before created

19:20.100 --> 19:22.100
before create它执行一次

19:22.100 --> 19:23.100
我们当时都记到笔记了

19:23.100 --> 19:24.100
那么可能是执行的

19:24.100 --> 19:27.100
就是这个主建刚刚使用的时候执行

19:27.100 --> 19:30.100
我们这里说的执行一次

19:30.100 --> 19:31.100
指的是什么

19:31.100 --> 19:33.100
指的是一个主建执行一次

19:33.100 --> 19:35.100
你使用了一个主建

19:35.100 --> 19:36.100
这个主建执行一次

19:36.100 --> 19:37.100
before create

19:37.100 --> 19:38.100
什么意思

19:38.100 --> 19:41.100
就是说

19:41.100 --> 19:44.100
比方说我们这里有一个主建

19:44.100 --> 19:46.100
我们写了一个主建

19:46.100 --> 19:48.100
叫做comp

19:48.100 --> 19:49.100
主建

19:49.100 --> 19:50.100
那么我们用的时候

19:50.100 --> 19:51.100
怎么用的

19:51.100 --> 19:52.100
是不是这样子用的

19:52.100 --> 19:53.100
对吧

19:53.100 --> 19:56.100
是不是这样子用的

19:56.100 --> 19:58.100
它是不是可以用很多很多次

19:58.100 --> 19:59.100
对不对

19:59.100 --> 20:00.100
主建可以用很多次

20:00.100 --> 20:02.100
这里大家要消除这个误解

20:02.100 --> 20:03.100
它可以用很多次

20:03.100 --> 20:05.100
我们这里写的只是什么

20:05.100 --> 20:07.100
写的只是主建配置对象

20:07.100 --> 20:08.100
对吧

20:08.100 --> 20:10.100
写的只是一个主建配置对象

20:10.100 --> 20:11.100
真正的主建是什么

20:11.100 --> 20:13.100
就是我们平时说习惯了

20:13.100 --> 20:14.100
其实我们有的是

20:14.100 --> 20:15.100
把它叫做主建配置

20:15.100 --> 20:16.100
主建

20:16.100 --> 20:17.100
但是它实际上是一个

20:17.100 --> 20:18.100
主建配置对象

20:18.100 --> 20:19.100
真正的主建是什么

20:19.100 --> 20:20.100
是这个东西

20:20.100 --> 20:21.100
你在用的时候

20:21.100 --> 20:23.100
才会产生一个主建

20:23.100 --> 20:24.100
那你这里用了三次

20:24.100 --> 20:25.100
是不是每一个主建

20:25.100 --> 20:26.100
它会运行一次

20:26.100 --> 20:27.100
它的before create

20:27.100 --> 20:28.100
对吧

20:28.100 --> 20:29.100
用了三次

20:29.100 --> 20:31.100
它只运行一次before create

20:31.100 --> 20:32.100
不是这个意思

20:32.100 --> 20:33.100
是你每用一个主建

20:33.100 --> 20:35.100
它就会运行一次before create

20:35.100 --> 20:37.100
后面的函数是一样的道理

20:37.100 --> 20:39.100
每个主建是相互独立的

20:39.100 --> 20:40.100
这样的意思

20:40.100 --> 20:41.100
好

20:41.100 --> 20:42.100
那么这个before create

20:42.100 --> 20:43.100
我们通常不太会用

20:43.100 --> 20:44.100
不太会用

20:44.100 --> 20:45.100
因为这个时候

20:45.100 --> 20:46.100
连那个配置里面

20:46.100 --> 20:47.100
提升都没有

20:47.100 --> 20:48.100
对吧

20:48.100 --> 20:49.100
我们说过

20:49.100 --> 20:50.100
主建里面的配置

20:50.100 --> 20:51.100
很多配置

20:51.100 --> 20:52.100
还会提升到主建的实力里面

20:52.100 --> 20:53.100
但是它这个时候

20:53.100 --> 20:54.100
提升都没有提升

20:54.100 --> 20:55.100
所以说你这个地方

20:55.100 --> 20:56.100
很多东西都获取不到

20:56.100 --> 20:58.100
一般我们不太会使用

20:58.100 --> 21:00.100
这个生命中心的函数

21:00.100 --> 21:01.100
那么第二个

21:01.100 --> 21:02.100
created

21:02.100 --> 21:03.100
这个只行一次

21:03.100 --> 21:04.100
这个时候

21:04.100 --> 21:05.100
主建

21:05.100 --> 21:06.100
它已经提升了数据了

21:06.100 --> 21:07.100
把我们配置里面

21:07.100 --> 21:08.100
很多东西都提升到

21:08.100 --> 21:09.100
created里面来

21:09.100 --> 21:10.100
当然我们我知道

21:10.100 --> 21:11.100
目前的

21:11.100 --> 21:12.100
很多公司里面

21:12.100 --> 21:13.100
做开发的时候

21:13.100 --> 21:15.100
喜欢把阿加克斯请求

21:15.100 --> 21:17.100
写到created里面

21:17.100 --> 21:18.100
写到这里边

21:18.100 --> 21:19.100
但是我觉得

21:19.100 --> 21:20.100
对于初学者

21:20.100 --> 21:22.100
这样子不是很好

21:22.100 --> 21:23.100
因为我们之前

21:23.100 --> 21:24.100
也解释过了

21:24.100 --> 21:25.100
created里面

21:25.100 --> 21:27.100
如果说你要用的话

21:27.100 --> 21:28.100
那么你最好了

21:28.100 --> 21:30.100
是把无忧的执行原理

21:30.100 --> 21:32.100
彻底搞清楚之后

21:32.100 --> 21:34.100
特别是关于无忧的SSR

21:34.100 --> 21:36.100
就是服务端渲染

21:36.100 --> 21:37.100
服务端渲染

21:37.100 --> 21:39.100
也是很多同学

21:39.100 --> 21:41.100
比较欠缺的一块

21:41.100 --> 21:43.100
都是很后面的高阶制

21:43.100 --> 21:45.100
高阶的知识了

21:45.100 --> 21:47.100
你了解了服务端渲染过后

21:47.100 --> 21:49.100
你才能完全把控这个created

21:49.100 --> 21:50.100
否则的话

21:50.100 --> 21:51.100
你这一块容易出问题

21:51.100 --> 21:52.100
容易出问题

21:52.100 --> 21:54.100
最容易出的问题

21:54.100 --> 21:55.100
就是这里一块

21:55.100 --> 21:57.100
由于它还没有渲染页面

21:57.100 --> 21:59.100
用户还没有看见

21:59.100 --> 22:01.100
页面的东西

22:01.100 --> 22:03.100
如果说你在这里边去写了很多的

22:03.100 --> 22:05.100
需要很长一段时间

22:05.100 --> 22:07.100
才能计算出来的一些东西的话

22:07.100 --> 22:09.100
那么会导致界面卡住

22:09.100 --> 22:10.100
会导致白屏

22:10.100 --> 22:12.100
一直卡在那里

22:12.100 --> 22:13.100
所以说这个东西

22:13.100 --> 22:14.100
甚用

22:14.100 --> 22:16.100
当你掌握了无忧原理之后

22:16.100 --> 22:17.100
再用这个东西

22:17.100 --> 22:18.100
也不迟

22:18.100 --> 22:20.100
下面这个B4 mounted

22:20.100 --> 22:21.100
它是做

22:21.100 --> 22:22.100
这个时候什么发生呢

22:22.100 --> 22:23.100
它也是执行一次

22:23.100 --> 22:24.100
这个时候

22:24.100 --> 22:26.100
组件已经把我们给它配置的

22:26.100 --> 22:27.100
什么template

22:27.100 --> 22:29.100
或者是我们配置的render

22:29.100 --> 22:30.100
已经编一好了

22:30.100 --> 22:31.100
已经编一好了

22:31.100 --> 22:32.100
那么这个时候

22:32.100 --> 22:34.100
只是还没有把它放到

22:34.100 --> 22:36.100
真实的动物里面去

22:36.100 --> 22:37.100
就是我们页面里面去

22:37.100 --> 22:39.100
还没有反映到页面里面去

22:39.100 --> 22:40.100
用户还没有看到东西

22:40.100 --> 22:41.100
所以说有什么事情

22:41.100 --> 22:43.100
你可以在这里去处理

22:43.100 --> 22:44.100
好

22:44.100 --> 22:46.100
下一个mounted

22:46.100 --> 22:47.100
mounted

22:47.100 --> 22:49.100
我们在我们的课程里面

22:49.100 --> 22:50.100
用的比较多

22:50.100 --> 22:52.100
这个函数

22:52.100 --> 22:53.100
这个时候执行了

22:53.100 --> 22:55.100
这个时候界面已经呈现出来了

22:55.100 --> 22:57.100
就用户已经看到东西了

22:57.100 --> 22:58.100
那么这个时候

22:58.100 --> 22:59.100
你去做一些事情

22:59.100 --> 23:00.100
是不会组织页面的

23:00.100 --> 23:02.100
用户已经看见东西了

23:02.100 --> 23:03.100
那么mounted里面

23:03.100 --> 23:05.100
我们在我们的课程里面

23:05.100 --> 23:06.100
这里放置了什么

23:06.100 --> 23:08.100
是放置了阿尔克斯琴球

23:08.100 --> 23:11.100
或者是一些其他的副作用戴

23:11.100 --> 23:12.100
好

23:12.100 --> 23:13.100
下一个

23:13.100 --> 23:15.100
这个是b4updated

23:15.100 --> 23:17.100
它执行多次

23:17.100 --> 23:20.100
因为它每一次组件更新

23:20.100 --> 23:21.100
它都会使用这个函数

23:21.100 --> 23:23.100
它都会运行这个函数

23:23.100 --> 23:24.100
那么这个时候

23:24.100 --> 23:26.100
只不过这个时候数据更新了

23:26.100 --> 23:28.100
比方说你给数据是想用式的

23:28.100 --> 23:29.100
你给数据重新复制

23:29.100 --> 23:31.100
数据已经是新的值了

23:31.100 --> 23:34.100
但是它的界面还没有更新

23:34.100 --> 23:35.100
只这个函数

23:35.100 --> 23:36.100
好

23:36.100 --> 23:37.100
下面这个updated

23:37.100 --> 23:39.100
那么这个也是执行多次

23:39.100 --> 23:41.100
它是紧接着b4updated的

23:41.100 --> 23:43.100
然后这里写错了

23:43.100 --> 23:45.100
应该是b4updated

23:45.100 --> 23:46.100
等一下

23:46.100 --> 23:47.100
这里写错了

23:53.610 --> 23:55.610
这是b4updated

23:55.610 --> 24:00.370
这个b4updated执行完了之后

24:00.370 --> 24:02.370
它马上就会执行updated

24:02.370 --> 24:04.370
它也是紧接着上面执行了

24:04.370 --> 24:05.370
执行多次

24:05.370 --> 24:07.370
这个时候数据和界面都已经是最新的了

24:07.370 --> 24:08.370
好

24:08.370 --> 24:09.370
后边两个就是销毁

24:09.370 --> 24:10.370
一个是销毁之前

24:10.370 --> 24:11.370
一个是销毁之后

24:11.370 --> 24:12.370
一般来说的话

24:12.370 --> 24:15.370
如果说你组件里面开启了什么技时器的话

24:15.370 --> 24:16.370
也不要忘记了

24:16.370 --> 24:18.370
这个组件销毁的时候

24:18.370 --> 24:21.370
也要去把技时器消除一下

24:21.370 --> 24:22.370
可能很多人说

24:22.370 --> 24:25.370
他们可能还不清楚组件什么时候销毁

24:25.370 --> 24:26.370
组件什么时候销毁呢

24:26.370 --> 24:27.370
组件在这个时候

24:27.370 --> 24:28.370
比方说你用一个combo组件

24:28.370 --> 24:30.370
你写了一个vif

24:32.370 --> 24:34.370
这个vif还一开始是去

24:34.370 --> 24:36.370
比方说它一开始是去

24:36.370 --> 24:38.370
那么一开始这个组件是不要

24:38.370 --> 24:39.370
经过一些生命周期

24:39.370 --> 24:40.370
对吧

24:40.370 --> 24:41.370
经过前面的生命周期

24:41.370 --> 24:42.370
好

24:42.370 --> 24:43.370
那么这个时候呢

24:43.370 --> 24:44.370
把它设为forced

24:44.370 --> 24:45.370
把设为forced

24:45.370 --> 24:46.370
这个组件是不是不显示了

24:46.370 --> 24:47.370
不显示是不要销毁

24:47.370 --> 24:48.370
那么对于这个组件而言

24:48.370 --> 24:49.370
它就会运行

24:49.370 --> 24:50.370
运行before destroyed

24:50.370 --> 24:52.370
或者是和 destroyed

24:52.370 --> 24:54.370
那就会运行这两个

24:54.370 --> 24:55.370
好

24:55.370 --> 24:57.370
这是关于这个组件的生命周期

24:57.370 --> 24:58.370
好

24:58.370 --> 24:59.370
下一个

24:59.370 --> 25:00.370
下一个是我们讲了

25:00.370 --> 25:02.370
5u里面的组件里面的

25:02.370 --> 25:03.370
第三个特点

25:03.370 --> 25:05.370
叫做响应式

25:05.370 --> 25:06.370
响应式呢

25:06.370 --> 25:07.370
也是5u里面的

25:07.370 --> 25:08.370
非常非常显著的一个特点

25:08.370 --> 25:09.370
当时呢

25:09.370 --> 25:10.370
我们看到了非常非常神奇的效果

25:10.370 --> 25:11.370
对吧

25:11.370 --> 25:12.370
第一个就讲了

25:12.370 --> 25:13.370
就是我们给数据

25:13.370 --> 25:14.370
复迟的时候呢

25:14.370 --> 25:16.370
它界面会自动变化

25:16.370 --> 25:17.370
这是响应式

25:17.370 --> 25:18.370
那么它怎么来完成这个

25:19.370 --> 25:20.370
就是看一个图

25:22.370 --> 25:25.370
当我们的组件的状态发生变化

25:25.370 --> 25:27.370
这个组件本身会重新宣展

25:27.370 --> 25:30.370
另外当这个组件的probs

25:30.370 --> 25:34.370
当这个组件的probs更新的时候

25:34.370 --> 25:35.370
它这个组件呢

25:35.370 --> 25:36.370
也会重新宣展

25:36.370 --> 25:38.370
就对一个单个组件而言

25:38.370 --> 25:40.370
无论是状态变化

25:40.370 --> 25:42.370
还是属性变化

25:42.370 --> 25:44.370
它的组件都会重新宣展

25:44.370 --> 25:45.370
那么我们如果说

25:45.370 --> 25:47.370
把它放到一个组件书里边来看呢

25:48.370 --> 25:49.370
因为我们最终是一个组件书

25:49.370 --> 25:50.370
对吧

25:50.370 --> 25:51.370
因为有很多很多的组件

25:51.370 --> 25:52.370
那么组件的重新宣展

25:52.370 --> 25:54.370
就从一个更高的角度来看的话

25:54.370 --> 25:55.370
那么组件的重新宣展

25:55.370 --> 25:57.370
是从某个组件出发

25:57.370 --> 25:58.370
因为这个组件状态变了

25:58.370 --> 25:59.370
对吧

25:59.370 --> 26:00.370
状态变了

26:00.370 --> 26:02.370
然后依次影响到后续组件

26:02.370 --> 26:03.370
因为说一个说

26:03.370 --> 26:06.370
因为我们对于单个组件而言

26:06.370 --> 26:07.370
它的属性变了

26:07.370 --> 26:08.370
它也会重新宣展

26:08.370 --> 26:10.370
但是对一个整个组件书而言

26:10.370 --> 26:13.370
你属性是不是最终还是来自于

26:13.370 --> 26:14.370
上面那个组件的状态

26:14.370 --> 26:15.370
对吧

26:15.370 --> 26:16.370
还是来自于

26:16.370 --> 26:18.370
上面那个组件给它传递的东西

26:18.370 --> 26:19.370
往往是来自于状态

26:19.370 --> 26:22.370
所以说我们组件里边变化

26:22.370 --> 26:24.370
往往都是最根本的原因是状态变化

26:24.370 --> 26:26.370
比方说在这个组件书里边

26:26.370 --> 26:28.370
每个组件都有自己的状态

26:28.370 --> 26:29.370
都有自己的状态

26:29.370 --> 26:31.370
如果有些组件状态可能为空

26:31.370 --> 26:33.370
没有写

26:33.370 --> 26:34.370
比方说对于这个组件

26:34.370 --> 26:37.370
它的状态发生了变化

26:37.370 --> 26:38.370
那会导致什么呢

26:38.370 --> 26:41.370
导致这个组件重新宣展了

26:41.370 --> 26:43.370
而它一重新宣展

26:43.370 --> 26:44.370
由于它后边的组件

26:44.370 --> 26:46.370
是不是依赖它的数据

26:46.370 --> 26:47.370
它把它的数据

26:47.370 --> 26:48.370
给后边的组件传递过去了

26:48.370 --> 26:49.370
当然

26:49.370 --> 26:50.370
如果说这个组件

26:50.370 --> 26:54.370
它没有给后边的组件传递数据

26:54.370 --> 26:55.370
由后边的组件

26:55.370 --> 26:56.370
它接受到的数据并没有变化

26:56.370 --> 26:59.370
那么这个组件是不会重新宣展的

26:59.370 --> 27:01.370
那往往的情况是

27:01.370 --> 27:02.370
它的状态一变

27:02.370 --> 27:04.370
它会导致自己重新宣展

27:04.370 --> 27:05.370
而自己重新宣展的过程中

27:05.370 --> 27:08.370
会导致给后边的组件的属性

27:08.370 --> 27:09.370
发生了变化

27:09.370 --> 27:11.370
那么属性一变化

27:11.370 --> 27:13.370
后边的组件是不是也在重新宣展

27:13.370 --> 27:15.370
而后边的组件一宣展

27:15.370 --> 27:16.370
一重新宣展

27:16.370 --> 27:17.370
也会导致它后边的组件

27:17.370 --> 27:18.370
属性发生变化

27:18.370 --> 27:20.370
那么后边的组件也会重新宣展

27:20.370 --> 27:21.370
但是如果说没有变化

27:21.370 --> 27:22.370
它就不会重新宣展

27:22.370 --> 27:24.370
原来的意思吧

27:24.370 --> 27:25.370
那么也就是说

27:25.370 --> 27:27.370
我们当一个状态变化的时候

27:27.370 --> 27:30.370
它不一定是宣兰整个组件数

27:30.370 --> 27:32.370
它可能只宣兰其中一部分

27:32.370 --> 27:33.370
比方说这个状态变了

27:33.370 --> 27:34.370
它可能只宣兰这个组件

27:34.370 --> 27:36.370
得其中一部分

27:36.370 --> 27:37.370
宣兰这么一部分

27:37.370 --> 27:39.370
原来的意思吧

27:39.370 --> 27:41.370
这是关于这一块

27:41.370 --> 27:42.370
然后接下来

27:42.370 --> 27:43.370
突然让我讲了

27:43.370 --> 27:45.370
就是一开始也讲了

27:45.370 --> 27:48.370
为什麽它能够实现想用式

27:48.370 --> 27:50.370
虽然它有一个提升

27:50.370 --> 27:52.370
它把你的状态提升到了

27:52.370 --> 27:55.370
提升到了5u实力里边

27:55.370 --> 27:57.370
并且让这个状态的变化

27:57.370 --> 27:58.370
是可以被监控的

27:58.370 --> 27:59.370
怎麽处理的

27:59.370 --> 28:00.370
它是用Object的

28:00.370 --> 28:02.370
define property

28:02.370 --> 28:04.370
用这种方式来监控的

28:04.370 --> 28:05.370
那么这里有个例子

28:05.370 --> 28:07.370
就是当时我们随便举个例子

28:07.370 --> 28:08.370
就是我们的配置里边

28:08.370 --> 28:09.370
有哪些东西会提到

28:09.370 --> 28:10.370
组件实力里边

28:10.370 --> 28:11.370
有probs

28:11.370 --> 28:12.370
有data

28:12.370 --> 28:13.370
有computed

28:13.370 --> 28:14.370
有什麽message

28:14.370 --> 28:16.370
这些东西配置了成员

28:16.370 --> 28:17.370
这里边配置了成员

28:17.370 --> 28:18.370
会全部提到

28:18.370 --> 28:20.370
组件实力里边来

28:20.370 --> 28:21.370
而组件实力里边

28:21.370 --> 28:22.370
它有一些自身的成员

28:22.370 --> 28:23.370
自身的成员

28:23.370 --> 28:24.370
我们就见过的

28:24.370 --> 28:25.370
使用的是多少开头的

28:25.370 --> 28:26.370
对吧

28:26.370 --> 28:28.370
这是关于这一块

28:28.370 --> 28:30.370
它为什麽能够获得想用式

28:30.370 --> 28:32.370
这是关于5u的

28:32.370 --> 28:34.370
这麽几个特点

28:34.370 --> 28:36.370
后来我们讲完了5u之后

28:36.370 --> 28:38.370
没有讲到了5u rotor

28:38.370 --> 28:40.370
那麽为什麽要5u rotor

28:40.370 --> 28:42.370
它是一个5u路由

28:42.370 --> 28:43.370
是因为我们页面中

28:43.370 --> 28:46.370
我们要开发一个单页应用程序

28:46.370 --> 28:48.370
就整个应用只有一个页面

28:48.370 --> 28:50.370
但是我们又要实现一个页面

28:50.370 --> 28:51.370
切换的效果

28:51.370 --> 28:53.370
其实切换的是啥

28:53.370 --> 28:54.370
切换的是组件

28:54.370 --> 28:56.370
因此我们这里就需要

28:56.370 --> 28:58.370
根据不同的地址

28:58.370 --> 29:00.370
根据不同的访问路径

29:00.370 --> 29:03.370
然后切换不组件

29:03.370 --> 29:05.370
这件事我们自己能不能熟写

29:05.370 --> 29:06.370
能熟写

29:06.370 --> 29:08.370
在你们大常哥的课程里边

29:08.370 --> 29:10.370
完完全全的给大家熟写了一遍

29:10.370 --> 29:12.370
其实你会发现它并不复杂

29:12.370 --> 29:13.370
并不复杂

29:13.370 --> 29:15.370
但是还是需要一段时间学习

29:15.370 --> 29:17.370
那麽在5u rotor里边

29:17.370 --> 29:18.370
它提供了这麽一些内容

29:18.370 --> 29:20.370
一个是路由配置

29:20.370 --> 29:22.370
就是在创建一个5u rotor的时候

29:22.370 --> 29:23.370
我们这一块都不受到代码

29:23.370 --> 29:26.370
从一个更高的层面来理解这些知识

29:26.370 --> 29:27.370
其实很多时候你听不懂

29:27.370 --> 29:29.370
是因为你对这个知识

29:29.370 --> 29:30.370
本身没有理解

29:30.370 --> 29:32.370
而不是你代码看不懂

29:32.370 --> 29:34.370
当你对这个知识本身有所理解

29:34.370 --> 29:35.370
在深刻了之后

29:35.370 --> 29:37.370
代码自然而然就看懂了

29:38.370 --> 29:40.370
总之我们做开发

29:40.370 --> 29:42.370
其实还分几个层面的

29:42.370 --> 29:45.370
所以最初期的层面就是什麽

29:45.370 --> 29:47.370
现在代码里边出不来

29:47.370 --> 29:52.370
始终就是查一些API

29:52.370 --> 29:55.370
就觉得API这个东西是不是很高端

29:55.370 --> 29:56.370
别人不知道这个API

29:56.370 --> 29:58.370
我知道这个API是很高端

29:58.370 --> 30:00.370
其实真正程序的价值

30:00.370 --> 30:01.370
根本就不在API里边

30:01.370 --> 30:03.370
API是给谁开发的

30:03.370 --> 30:05.370
是给IT民共开发的

30:06.370 --> 30:07.370
听过这个词吧

30:07.370 --> 30:08.370
IT民共

30:08.370 --> 30:11.370
老老实实按照上面的设计的程序

30:11.370 --> 30:14.370
设计的框架来写就完事了

30:14.370 --> 30:16.370
它只需要去查阅API稳当就行了

30:16.370 --> 30:19.370
API其实在我们程序开发里边

30:19.370 --> 30:20.370
是最不重要的

30:20.370 --> 30:23.370
当然它也重要

30:23.370 --> 30:25.370
只不过相对于其他内容的话

30:25.370 --> 30:27.370
它没有那麽的重要

30:27.370 --> 30:28.370
最真的重要的是什麽

30:28.370 --> 30:31.370
是思想和对整个结构的理解

30:31.370 --> 30:33.370
对这个技术的理解

30:34.370 --> 30:36.370
其实这边玩游戏

30:36.370 --> 30:38.370
玩游戏最重要的是操作吗

30:38.370 --> 30:39.370
我觉得不是

30:39.370 --> 30:42.370
我以我玩了多年的游戏经验的话

30:42.370 --> 30:44.370
我觉得是对游戏的理解

30:44.370 --> 30:46.370
就说你说说手术的话

30:46.370 --> 30:47.370
年轻人的手术都快

30:47.370 --> 30:48.370
对吧 都快

30:48.370 --> 30:51.370
但是那为什麽你就成不了紫月选手呢

30:51.370 --> 30:53.370
因为你对游戏的理解是不够的

30:53.370 --> 30:56.370
你不知道什麽时候该去做正确的事情

30:56.370 --> 30:58.370
你哪怕去看一些高手的录像

30:58.370 --> 31:00.370
你也不知道他为什麽要去这样做

31:00.370 --> 31:01.370
你看了过了就过了

31:01.370 --> 31:03.370
所以说为什麽说弹幕大省多了

31:03.370 --> 31:05.370
因为他对游戏

31:05.370 --> 31:08.370
对这个东西的理解比较浮浅

31:08.370 --> 31:10.370
他认为这个东西很简单

31:10.370 --> 31:13.870
路由配置

31:13.870 --> 31:15.870
我们第一个路由配置

31:15.870 --> 31:16.870
路由配置做什麽呢

31:16.870 --> 31:18.870
它是通过roach来配置的

31:18.870 --> 31:19.870
配置是什麽呢

31:19.870 --> 31:20.870
就是什麽地址配置

31:20.870 --> 31:22.870
就是对应什麽组件

31:22.870 --> 31:23.870
你访问这个地址

31:23.870 --> 31:24.870
我就对应这个组件

31:24.870 --> 31:25.870
你访问另外一个地址

31:25.870 --> 31:26.870
我就对应另外一个组件

31:26.870 --> 31:28.870
你看他怎麽配置的

31:28.870 --> 31:30.870
当时我们是不是这样的配置的

31:30.870 --> 31:32.870
我们配置方式其实差不多

31:32.870 --> 31:33.870
一种是静开配置

31:33.870 --> 31:35.870
就是路径是写实的

31:35.870 --> 31:36.870
你访问这个路径

31:36.870 --> 31:37.870
我一定是宣传Home组件

31:37.870 --> 31:39.870
另外一种是动态规则

31:39.870 --> 31:40.870
动态规则的话

31:40.870 --> 31:42.870
就是路径里面有一个部分的

31:42.870 --> 31:43.870
它可能会变化

31:43.870 --> 31:44.870
我也不知道它是啥

31:44.870 --> 31:45.870
它可能会变化

31:45.870 --> 31:46.870
那无论它怎麽变

31:46.870 --> 31:48.870
它都能匹配到这个组件

31:48.870 --> 31:49.870
并且它可以取个名字

31:49.870 --> 31:50.870
对吧

31:50.870 --> 31:51.870
可以取个名字

31:51.870 --> 31:52.870
好

31:52.870 --> 31:53.870
另外一种的还有一种

31:53.870 --> 31:54.870
就是我们后边讲的

31:54.870 --> 31:55.870
在左天山课程里面讲的

31:55.870 --> 31:56.870
叫做自定义数据

31:56.870 --> 31:57.870
自定义数据里面

31:57.870 --> 31:58.870
就是可以通过meta

32:00.870 --> 32:02.870
原数据

32:02.870 --> 32:04.870
知道它叫原数据吗

32:04.870 --> 32:06.870
诶 问一下

32:06.870 --> 32:08.870
知道它叫原数据吗

32:08.870 --> 32:10.870
如果说面试的时候

32:10.870 --> 32:12.870
问你什麽叫原数据

32:12.870 --> 32:14.870
知道它叫原数据吗

32:14.870 --> 32:17.870
原数据它是描述数据的数据

32:17.870 --> 32:19.870
就是描述数据的数据

32:19.870 --> 32:22.870
就是数据本身它还有一些信息

32:22.870 --> 32:24.870
对 数据的数据

32:24.870 --> 32:26.870
它本身还有一些信息

32:26.870 --> 32:28.870
可以通过原数据来描述

32:28.870 --> 32:30.870
记得之前我有一次公开课的时候

32:30.870 --> 32:32.870
讲了说了这麽一句话

32:32.870 --> 32:33.870
这句话可能你们要

32:33.870 --> 32:35.870
有个几年开发经验之后

32:35.870 --> 32:37.870
你慢慢就能理解这句话了

32:37.870 --> 32:38.870
我当时是怎麽说的

32:38.870 --> 32:39.870
还记得吗

32:39.870 --> 32:40.870
我说了

32:40.870 --> 32:44.870
为什麽它要有Prototype

32:44.870 --> 32:45.870
Prototype

32:45.870 --> 32:48.870
为什麽它要有这个东西

32:48.870 --> 32:50.870
GS里面为什麽要有它呢

32:50.870 --> 32:53.870
是因为GS缺少原数据

32:53.870 --> 32:57.870
缺少内型的原数据

32:58.870 --> 33:00.870
因为Prototype就实际上

33:00.870 --> 33:02.870
是充当了内型的原数据

33:02.870 --> 33:03.870
这麽一个角色

33:03.870 --> 33:05.870
每个语言它都

33:05.870 --> 33:08.870
只要有内型系统的语言

33:08.870 --> 33:10.870
有些语言是没有内型系统的

33:10.870 --> 33:12.870
只要有内型系统的语言

33:12.870 --> 33:16.870
它一定要有内型的原数据

33:16.870 --> 33:18.870
它只是实现的方式不一样

33:18.870 --> 33:22.870
GS它是用了这种方式来实现的

33:23.870 --> 33:26.870
这是配置路由的额外信息

33:26.870 --> 33:29.870
我们这里就把它理解成自定书取得了

33:29.870 --> 33:31.870
也要一些附加信息

33:31.870 --> 33:32.870
就写到这儿

33:32.870 --> 33:34.870
随便写它都可以

33:35.870 --> 33:37.870
另外一个配置是我们提到

33:37.870 --> 33:40.870
通过Mode来配置路由模式

33:40.870 --> 33:41.870
路由有两种模式

33:41.870 --> 33:42.870
一种是哈希模式

33:42.870 --> 33:44.870
这是默认的这种兼容性最好

33:44.870 --> 33:46.870
在我们的工程里面

33:46.870 --> 33:47.870
我们使用的是哈希模式

33:47.870 --> 33:49.870
因为我们遇到了一些困难

33:49.870 --> 33:51.870
不然的话用History模式的话

33:51.870 --> 33:52.870
要出一些问题

33:52.870 --> 33:55.870
但是你们以后学习了View的

33:55.870 --> 33:56.870
脚手架之后

33:56.870 --> 33:57.870
学习了Whiphack

33:57.870 --> 33:58.870
学习了构建工具

33:58.870 --> 33:59.870
学习了DevServer

33:59.870 --> 34:00.870
学习了Bable

34:00.870 --> 34:02.870
学习了MunchBot

34:02.870 --> 34:03.870
一大堆东西学习了Node解释

34:03.870 --> 34:04.870
学习了脚手架开发

34:04.870 --> 34:06.870
一大堆东西学习了之后

34:06.870 --> 34:07.870
还学习了服务器

34:07.870 --> 34:08.870
服务器开发

34:08.870 --> 34:09.870
那么学习了这些东西过后

34:09.870 --> 34:11.870
你就彻底理解了

34:11.870 --> 34:13.870
现在为什么要出问题

34:13.870 --> 34:14.870
所以我这里没法给你解释

34:14.870 --> 34:16.870
一件是要解释大堆东西

34:16.870 --> 34:20.870
那么现在我们History模式

34:20.870 --> 34:21.870
还用不了

34:21.870 --> 34:23.870
History模式还有一些兼容性问题

34:23.870 --> 34:25.870
现在还好

34:25.870 --> 34:29.870
因为要特别老的领导期才不兼容

34:29.870 --> 34:31.870
我们以后在真实的开发里面

34:31.870 --> 34:33.870
实际上用的是History模式

34:33.870 --> 34:34.870
但是其实没关系

34:34.870 --> 34:36.870
因为我们的路由和形制是全部一样的

34:36.870 --> 34:39.870
你到时候只需要把Mode改成History

34:39.870 --> 34:40.870
它完全一样

34:40.870 --> 34:41.870
一点区别都没有

34:41.870 --> 34:42.870
你看它的路径

34:42.870 --> 34:44.870
在地址里面的路径变化就在这

34:44.870 --> 34:47.870
哈希模式是写到警号后边的

34:47.870 --> 34:49.870
你的访问路径是写到警号后边的

34:49.870 --> 34:50.870
History模式是写

34:50.870 --> 34:52.870
直接在路径在这

34:53.870 --> 34:56.870
就是一个看上去比较正常的路径

34:56.870 --> 34:58.870
这是两种模式

34:58.870 --> 35:00.870
到时候你知道了History模式

35:00.870 --> 35:01.870
怎么回事了之后

35:01.870 --> 35:02.870
利用限量的知识

35:02.870 --> 35:04.870
你只需要把Mode改成History

35:04.870 --> 35:05.870
其他完全一样

35:05.870 --> 35:06.870
一句弹码都不用改

35:06.870 --> 35:07.870
真的我不别骗你

35:07.870 --> 35:10.870
一句弹码都不用改

35:10.870 --> 35:12.870
这是路由的配置

35:12.870 --> 35:13.870
另外一部分

35:13.870 --> 35:14.870
围油楼场里面

35:14.870 --> 35:16.870
我们还学习过导航

35:16.870 --> 35:18.870
就是怎么来挑转页面

35:18.870 --> 35:19.870
怎么来挑转页面呢

35:19.870 --> 35:21.870
我们这里一个是链接导航

35:21.870 --> 35:23.870
链接我们来进行挑转

35:23.870 --> 35:24.870
通过什么呢

35:24.870 --> 35:26.870
通过它的一个内置组件

35:26.870 --> 35:27.870
就是路由Rotor里面

35:27.870 --> 35:28.870
它给我们提供了一个组件

35:28.870 --> 35:29.870
叫Rotor View

35:29.870 --> 35:31.870
Rotor Link

35:32.870 --> 35:33.870
它通过这个东西

35:33.870 --> 35:35.870
给我们提供了组件

35:35.870 --> 35:37.870
它是全局注册的

35:37.870 --> 35:38.870
因为我们可以直接用

35:38.870 --> 35:41.870
它就是全局注册的

35:41.870 --> 35:43.870
那我现在问大家一个问题

35:43.870 --> 35:46.870
这个组件能不能这样子写

35:46.870 --> 35:47.870
Rotor Link

35:47.870 --> 35:56.700
能不能这样子写

35:56.700 --> 35:57.700
怎么能这种格式写呢

35:57.700 --> 35:59.700
就是可以对吧

35:59.700 --> 36:01.700
就是千万不要去学史之史

36:01.700 --> 36:03.700
史之史是最没有意义的

36:03.700 --> 36:04.700
因为我们讲过这个东西

36:04.700 --> 36:06.700
不非就是个组件名称

36:06.700 --> 36:07.700
在用的时候既可以

36:07.700 --> 36:08.700
短横线也可以

36:08.700 --> 36:09.700
大陀峰对吧

36:09.700 --> 36:10.700
都可以

36:12.700 --> 36:13.700
那么下面的另外一种

36:13.700 --> 36:14.700
就是编程导航

36:14.700 --> 36:15.700
就是我们单码写着写着

36:15.700 --> 36:16.700
比方说登录

36:16.700 --> 36:17.700
登录成功了

36:17.700 --> 36:18.700
我们要挑转页面

36:18.700 --> 36:19.700
写着写着

36:19.700 --> 36:20.700
突然要挑转页面了

36:20.700 --> 36:21.700
比方说一个按钮世界里面

36:21.700 --> 36:22.700
我们要挑转页面

36:22.700 --> 36:24.700
或者是什么情况下

36:24.700 --> 36:25.700
发现你没有登录

36:25.700 --> 36:26.700
我们要挑转页面

36:26.700 --> 36:27.700
对吧

36:27.700 --> 36:28.700
总之在某些情况下

36:28.700 --> 36:29.700
我们要挑转页面

36:29.700 --> 36:30.700
怎么办呢

36:30.700 --> 36:31.700
我们使用

36:31.700 --> 36:33.700
在注入的Rotor这个属性里边

36:33.700 --> 36:35.700
因为我们配置好了

36:35.700 --> 36:36.700
无诱Rotor之后

36:36.700 --> 36:37.700
它会往无诱实力里边

36:37.700 --> 36:38.700
每一个无诱实力里边

36:38.700 --> 36:39.700
都会注入一个Rotor

36:39.700 --> 36:41.700
注入了个Rotor属性里边

36:41.700 --> 36:43.700
提供了Poosive函数

36:43.700 --> 36:44.700
来挑转页面

36:44.700 --> 36:45.700
但是我们还讲过

36:45.700 --> 36:46.700
这里边其实还有很多函数

36:46.700 --> 36:47.700
replace

36:47.700 --> 36:49.700
go back

36:49.700 --> 36:50.700
go forward

36:51.700 --> 36:52.700
这关于导航

36:52.700 --> 36:53.700
好

36:53.700 --> 36:54.700
后来我们讲到导航守卫

36:54.700 --> 36:55.700
其实导航守卫

36:55.700 --> 36:56.700
还有三种

36:56.700 --> 36:57.700
还有很多

36:57.700 --> 36:58.700
一个是全局导航守卫

36:58.700 --> 36:59.700
一个是路由导航守卫

36:59.700 --> 37:00.700
一个是组建导航守卫

37:00.700 --> 37:02.700
他们的控制是

37:02.700 --> 37:04.700
从整体到局部

37:04.700 --> 37:06.700
越来越精细

37:06.700 --> 37:07.700
最精细的就是

37:07.700 --> 37:08.700
组建导航守卫了

37:08.700 --> 37:10.700
只不过我们目前的

37:10.700 --> 37:11.700
能够用的

37:11.700 --> 37:12.700
要用的

37:12.700 --> 37:13.700
就需要用一个

37:13.700 --> 37:14.700
全局导航守卫

37:14.700 --> 37:15.700
就够了

37:15.700 --> 37:16.700
因为这一部分

37:16.700 --> 37:17.700
是境界知识

37:17.700 --> 37:18.700
所以我们在个课程里边

37:18.700 --> 37:19.700
本来是不遮挤的

37:19.700 --> 37:20.700
但是我导航的一块

37:20.700 --> 37:21.700
发现这个地方

37:21.700 --> 37:22.700
不用导航守卫

37:22.700 --> 37:23.700
也确实不好做

37:23.700 --> 37:24.700
麻烦

37:24.700 --> 37:25.700
所以我们这里

37:25.700 --> 37:26.700
学习了一个全局导航守卫

37:26.700 --> 37:27.700
比佛尔利弊

37:27.700 --> 37:28.700
其实你们以后开发的话

37:28.700 --> 37:29.700
用的可能比较多的

37:29.700 --> 37:30.700
也就是登陆这一块的

37:30.700 --> 37:31.700
全局导航守卫

37:31.700 --> 37:32.700
也就是这一块

37:32.700 --> 37:34.700
可能用的比较多一点

37:34.700 --> 37:35.700
这是其中一个

37:35.700 --> 37:36.700
全局导航守卫

37:36.700 --> 37:37.700
全局导航守卫

37:37.700 --> 37:38.700
什么意思

37:38.700 --> 37:39.700
就是无论你怎么挑战

37:39.700 --> 37:40.700
它都会经过这个函数

37:40.700 --> 37:41.700
这里边有三个函数

37:41.700 --> 37:42.700
当时我还写错了

37:42.700 --> 37:43.700
对吧 写反了

37:43.700 --> 37:44.700
第一个是去

37:44.700 --> 37:45.700
到哪去

37:45.700 --> 37:46.700
from 从哪里来的

37:46.700 --> 37:47.700
从哪个页面

37:47.700 --> 37:48.700
挑到哪个页面

37:48.700 --> 37:50.700
这每个是个对象

37:50.700 --> 37:51.700
每个是个对象

37:51.700 --> 37:52.700
然后那个时候是个函数

37:52.700 --> 37:53.700
如果说你不调用这个函数

37:53.700 --> 37:55.700
它是不会挑转的

37:55.700 --> 37:56.700
相当于是个守卫

37:56.700 --> 37:57.700
它不通过

37:57.700 --> 37:58.700
如果说你通过的话

37:58.700 --> 37:59.700
你就去调用这个函数

37:59.700 --> 38:00.700
对吧

38:00.700 --> 38:01.700
我当时还写了个代码的时候

38:01.700 --> 38:02.700
这个函数里边

38:02.700 --> 38:03.700
还可以传餐

38:03.700 --> 38:04.700
对不对

38:04.700 --> 38:05.700
传一个路径

38:05.700 --> 38:06.700
你可以指定它

38:06.700 --> 38:07.700
调转到哪个页面

38:07.700 --> 38:09.700
这是关于导航守卫

38:09.700 --> 38:10.700
那么5U Rotor

38:10.700 --> 38:11.700
就这么一些知识了

38:12.700 --> 38:13.700
好 下一个

38:13.700 --> 38:14.700
就是5UX

38:14.700 --> 38:15.700
就是最难的这一部分

38:15.700 --> 38:16.700
为什么这样

38:16.700 --> 38:17.700
这里难呢

38:17.700 --> 38:19.700
因为它这里涉及到了很多思想

38:19.700 --> 38:20.700
这些思想

38:20.700 --> 38:21.700
它不是一句

38:21.700 --> 38:23.700
两句话能解释清楚的

38:23.700 --> 38:25.700
它需要大量的知识

38:25.700 --> 38:27.700
需要大量的前置知识

38:27.700 --> 38:29.700
一步一步你才能理解这里的思想

38:29.700 --> 38:30.700
所以我当时给大家说

38:30.700 --> 38:31.700
这一会儿的知识

38:31.700 --> 38:32.700
你听不懂

38:32.700 --> 38:33.700
就是你听不懂

38:33.700 --> 38:34.700
为什么它要这样做

38:34.700 --> 38:35.700
你就记住

38:35.700 --> 38:36.700
它就是这样做的

38:37.700 --> 38:39.700
总之它解决的是什么问题呢

38:39.700 --> 38:41.700
它是来处理

38:41.700 --> 38:43.700
复杂的共享数据的

38:43.700 --> 38:45.700
它把这些复杂的共享数据

38:45.700 --> 38:46.700
存到长库里边

38:46.700 --> 38:47.700
所以你以后

38:47.700 --> 38:49.700
你不是说

38:49.700 --> 38:51.700
每一个系统都要用

38:51.700 --> 38:53.700
都要用这个东西来处理数据

38:53.700 --> 38:54.700
其实这个东西相当于

38:54.700 --> 38:55.700
把我们组建里边的数据

38:55.700 --> 38:56.700
是剥离出去了

38:56.700 --> 38:58.700
形成了一个全新的模块

38:58.700 --> 38:59.700
之前我们把数据

38:59.700 --> 39:00.700
是放到组建里边了

39:00.700 --> 39:01.700
作为组建的状态

39:01.700 --> 39:03.700
让组建来进行管理

39:03.700 --> 39:05.700
现在我们的数据

39:05.700 --> 39:07.700
是单独用了一个模块来处理

39:07.700 --> 39:08.700
但是那不是

39:08.700 --> 39:10.700
所有的工程都需要这个东西

39:10.700 --> 39:12.700
不要去难用

39:12.700 --> 39:14.700
什么工程需要这个东西呢

39:14.700 --> 39:15.700
什么工程

39:15.700 --> 39:19.700
就是那种复杂的工程

39:19.700 --> 39:22.700
而且它有很多共享数据的工程

39:22.700 --> 39:23.700
需要这个东西

39:23.700 --> 39:26.700
这张我之前开发

39:26.700 --> 39:28.700
帮一个朋友

39:28.700 --> 39:30.700
开发了一个小的项目

39:30.700 --> 39:33.700
我当时完全没有用VUX

39:33.700 --> 39:35.700
当时就用VUX写的

39:35.700 --> 39:37.700
完全没有用VUX

39:37.700 --> 39:39.700
那我用的是什么呢

39:39.700 --> 39:41.700
我自己熟悉了一个简单的VUX

39:41.700 --> 39:42.700
就是熟悉了一个简单的

39:42.700 --> 39:44.700
因为根本用不到它那么多功能

39:44.700 --> 39:46.700
根本用不到

39:46.700 --> 39:47.700
其实当时

39:47.700 --> 39:49.700
VU的官方文档里面也在提示里

39:49.700 --> 39:51.700
如果说你小系统里面需要数据管理

39:51.700 --> 39:53.700
又需要把它抽象成一个模块

39:53.700 --> 39:55.700
你可以不用VUX

39:55.700 --> 39:57.700
你自己还给你告诉你的

39:57.700 --> 39:59.700
用怎么样用一个简易的方式来写一个

39:59.700 --> 40:01.700
类似的东西

40:01.700 --> 40:02.700
他说的比较简洁

40:02.700 --> 40:04.700
预养句话的意思说了

40:04.700 --> 40:06.700
好 这里是这个

40:06.700 --> 40:08.700
好 下一个就是配置

40:08.700 --> 40:10.700
VUX里面我们创建一个VUX

40:10.700 --> 40:11.700
就创建一个仓库

40:11.700 --> 40:13.700
不是要配置很多东西吗

40:13.700 --> 40:15.700
我们只有一个仓库

40:15.700 --> 40:16.700
一个是状态

40:16.700 --> 40:17.700
就仓库里面

40:17.700 --> 40:19.700
状态State配置啥呢

40:19.700 --> 40:21.700
配置我们的仓库里面的初始状态

40:21.700 --> 40:22.700
Mattation配置啥呢

40:22.700 --> 40:24.700
配置多个函数

40:24.700 --> 40:26.700
每一个是个Mattation

40:26.700 --> 40:27.700
Mattation什么意思

40:27.700 --> 40:28.700
就是更改的意思

40:28.700 --> 40:29.700
变化的意思

40:29.700 --> 40:31.700
可变的意思

40:31.700 --> 40:32.700
那么这个东西可以变

40:32.700 --> 40:33.700
说什么呢

40:33.700 --> 40:34.700
它是可以改变状态的

40:34.700 --> 40:36.700
而且只能用Mattation

40:36.700 --> 40:37.700
来改变状态

40:37.700 --> 40:39.700
而且Mattation是不能有副作用的

40:39.700 --> 40:40.700
像什么

40:40.700 --> 40:42.700
这个是请求Nocal Storage

40:42.700 --> 40:44.700
跟外部环境有关的东西

40:44.700 --> 40:46.700
都不能在Mattation里面用

40:46.700 --> 40:48.700
它必须要保持纯净

40:48.700 --> 40:50.700
后面我们就讲了

40:50.700 --> 40:52.700
如果说你有副作用怎么办呢

40:52.700 --> 40:54.700
那么配置到X型里面

40:54.700 --> 40:55.700
X型它专门来用

40:55.700 --> 40:56.700
处理各种副作用

40:56.700 --> 40:59.700
但是X型它是不能直接改变状态的

40:59.700 --> 41:00.700
你要改变状态要干嘛

41:00.700 --> 41:02.700
是不是要提交Mattation

41:02.700 --> 41:03.700
对吧

41:03.700 --> 41:04.700
我们的仓库

41:04.700 --> 41:06.700
如果说共享数据非常非常多

41:06.700 --> 41:08.700
那我全部把它写到这个配置里面

41:08.700 --> 41:09.700
也挺烦人的

41:09.700 --> 41:11.700
不利于我们分割带

41:11.700 --> 41:13.700
它提供了这个Mattation

41:13.700 --> 41:15.700
可以模块化来配置仓库

41:15.700 --> 41:17.700
我们可以把每一个数据

41:17.700 --> 41:18.700
比如说登录用户的处理

41:18.700 --> 41:19.700
放到一个文件里面

41:19.700 --> 41:20.700
形成一个模块

41:20.700 --> 41:21.700
电影数据的处理

41:21.700 --> 41:23.700
放到一个文件形成一个模块

41:23.700 --> 41:25.700
然后最终在创建仓库的时候

41:25.700 --> 41:27.700
通过Mattation配置

41:27.700 --> 41:29.700
把它合并起来

41:29.700 --> 41:30.700
好

41:30.700 --> 41:32.700
那么下面这个Names Best

41:32.700 --> 41:34.700
这个东西是跟模块化相关的

41:34.700 --> 41:35.700
你如果说

41:35.700 --> 41:36.700
启用了模块化

41:36.700 --> 41:38.700
同时又开启了命名空间

41:38.700 --> 41:40.700
那么为了防止

41:40.700 --> 41:42.700
你的Mattation和Action

41:42.700 --> 41:44.700
它里面的名称发生冲突

41:44.700 --> 41:45.700
因为电影处理

41:45.700 --> 41:47.700
比方说有个ADD

41:47.700 --> 41:48.700
Mattation有个ADD

41:48.700 --> 41:50.700
添加一个电影

41:50.700 --> 41:51.700
用户处理里面

41:51.700 --> 41:52.700
也有个Mattation

41:52.700 --> 41:53.700
ADD添加一个用户

41:53.700 --> 41:54.700
什么名字冲突了

41:54.700 --> 41:55.700
对吧

41:55.700 --> 41:56.700
到时候你触发

41:56.700 --> 41:58.700
你去提交一个Mattation

41:58.700 --> 42:01.700
把用Comet去提交一个Mattation的时候

42:01.700 --> 42:02.700
给它写个ADD

42:02.700 --> 42:03.700
是不是两个都监控到了

42:03.700 --> 42:04.700
对吧

42:04.700 --> 42:05.700
两个Mattation都监听到了

42:05.700 --> 42:06.700
这不太合理

42:06.700 --> 42:08.700
所以说为了保证Mattation的唯一

42:08.700 --> 42:10.700
我们通常开启了模块化之后

42:10.700 --> 42:12.700
都会开启命名空间

42:12.700 --> 42:14.700
以防止多个模块名称冲突

42:14.700 --> 42:15.700
那么你之后

42:15.700 --> 42:16.700
你再提交的时候

42:16.700 --> 42:17.700
是不是要把命名空间加上

42:17.700 --> 42:18.700
对吧

42:18.700 --> 42:20.700
但是在模块内部是不用加的

42:20.700 --> 42:22.700
后边其实还有一个叫Gatres

42:22.700 --> 42:23.700
Gatres

42:23.700 --> 42:24.700
它有点类似于

42:24.700 --> 42:25.700
主件里面的计算属性

42:25.700 --> 42:27.700
这东西也是配置在仓库里面的

42:27.700 --> 42:28.700
它是根据

42:28.700 --> 42:30.700
当前的状态

42:30.700 --> 42:32.700
来产生了一些计算属性

42:32.700 --> 42:33.700
你可以这样去理解

42:33.700 --> 42:35.700
之后我们平时都不怎么用得到

42:35.700 --> 42:37.700
这关于配置

42:37.700 --> 42:39.700
那么这个仓库怎么使用

42:39.700 --> 42:40.700
你看到目前为止

42:40.700 --> 42:42.700
我讲到配置和使用

42:42.700 --> 42:44.700
这一块耕耘又有没有关系

42:44.700 --> 42:46.700
实际上是没有任何关系的

42:46.700 --> 42:48.700
一毛钱关系都没有

42:48.700 --> 42:50.700
跟主件没有任何关系

42:50.700 --> 42:51.700
我们怎么用呢

42:51.700 --> 42:52.700
没有主件都没用

42:52.700 --> 42:54.700
你看我们要去

42:54.700 --> 42:55.700
分发一个X型

42:55.700 --> 42:56.700
就是处理一个副作用

42:56.700 --> 42:57.700
我们怎么写Dispatch

42:57.700 --> 42:59.700
找到这个仓库对象

42:59.700 --> 43:00.700
然后用Dispatch

43:00.700 --> 43:01.700
触发一个

43:01.700 --> 43:02.700
就分发一个X型

43:02.700 --> 43:03.700
把命名空间加上

43:03.700 --> 43:05.700
然后后边写X型名称

43:05.700 --> 43:06.700
然后复杂是什么

43:06.700 --> 43:07.700
就是额外的信息

43:07.700 --> 43:08.700
只能有一个

43:08.700 --> 43:09.700
多个数据的话

43:09.700 --> 43:10.700
放到对象里边

43:10.700 --> 43:11.700
这个东西叫做什么呢

43:11.700 --> 43:13.700
这个东西叫做Flex标准

43:13.700 --> 43:15.700
Flex标准

43:17.700 --> 43:19.700
Flex是最早的

43:19.700 --> 43:22.700
将那个单向数据留的

43:22.700 --> 43:24.700
单向数据留的

43:24.700 --> 43:26.700
数据处理

43:26.700 --> 43:27.700
形成一种

43:27.700 --> 43:29.700
形成成功的标准的

43:29.700 --> 43:31.700
这么一种标准

43:31.700 --> 43:33.700
最早是Facebook搞出来的

43:33.700 --> 43:34.700
后边又出

43:34.700 --> 43:36.700
基于这种标准

43:36.700 --> 43:37.700
又出现了Ridax

43:37.700 --> 43:39.700
又出现了Vuex

43:39.700 --> 43:40.700
对不对

43:40.700 --> 43:41.700
其实最终

43:41.700 --> 43:44.700
对他们的根源是Flex标准

43:44.700 --> 43:46.700
它的复杂必须单个的东西

43:46.700 --> 43:48.700
它叫做Payload

43:48.700 --> 43:50.700
这里Comet

43:50.700 --> 43:52.700
Comet是提交Motation

43:52.700 --> 43:53.700
就是你要直接改变

43:53.700 --> 43:54.700
仓库里边的东西

43:54.700 --> 43:55.700
那么你要提交Motation

43:55.700 --> 43:56.700
你不能直接改

43:56.700 --> 43:57.700
你只能提交Motation

43:57.700 --> 43:59.700
把复杂放进去

44:00.700 --> 44:01.700
如果说你要获取

44:01.700 --> 44:03.700
仓库的数据

44:04.700 --> 44:05.700
只要获取到仓库里边

44:05.700 --> 44:06.700
整个状态

44:06.700 --> 44:07.700
就这么简单

44:07.700 --> 44:08.700
使用非常简单

44:08.700 --> 44:09.700
你学会这三个就够了

44:09.700 --> 44:10.700
真的是

44:10.700 --> 44:11.700
我觉得开发一个大型的

44:11.700 --> 44:12.700
项目都够了

44:12.700 --> 44:13.700
我觉得都够了

44:13.700 --> 44:17.200
最后我们还讲了

44:17.200 --> 44:18.200
跟Vueo

44:18.200 --> 44:19.200
连接在一起

44:19.200 --> 44:20.200
在Vueo

44:20.200 --> 44:21.200
组建里边怎么用

44:21.200 --> 44:22.200
其实就跟刚才的使用方式

44:22.200 --> 44:23.200
差不多

44:24.200 --> 44:25.200
就是我们要触发

44:25.200 --> 44:27.200
Xn触发Motation

44:27.200 --> 44:29.200
其实跟刚才是一样的

44:29.200 --> 44:30.200
因为Vueo

44:30.200 --> 44:31.200
一配置好了之后

44:31.200 --> 44:32.200
它会把这个store

44:32.200 --> 44:33.200
仓库对象

44:33.200 --> 44:35.200
放到Vueo的使力里边去

44:35.200 --> 44:36.200
每一个使力里边

44:36.200 --> 44:37.200
每个组建使力里边

44:37.200 --> 44:38.200
它都有这么一个属性

44:38.200 --> 44:40.200
能拿到仓库对象

44:40.200 --> 44:41.200
那你要触发Dispatch

44:41.200 --> 44:43.200
你要分发XnDispatch

44:43.200 --> 44:45.200
你要提交Motation

44:45.200 --> 44:47.200
Comet

44:47.200 --> 44:49.200
如果说你要获取

44:49.200 --> 44:50.200
状态的话

44:50.200 --> 44:51.200
那么你这里

44:51.200 --> 44:53.200
要写到计算属性里边

44:53.200 --> 44:55.200
让这个计算属性

44:55.200 --> 44:56.200
依赖这个状态

44:58.200 --> 44:59.200
依赖这个状态

44:59.200 --> 45:01.200
那么在那个模板里边

45:01.200 --> 45:02.200
使用这个属性

45:02.200 --> 45:04.200
是不是就相当于是使用了

45:04.200 --> 45:05.200
状态里边的这个东西

45:05.200 --> 45:06.200
而且状态里边

45:06.200 --> 45:07.200
这个东西一变

45:07.200 --> 45:08.200
这个东西也会跟着变

45:08.200 --> 45:09.200
对不对

45:09.200 --> 45:10.200
这是关于

45:10.200 --> 45:12.200
主要是关于在Vueo

45:12.200 --> 45:13.200
组建里边怎么去使用

45:13.200 --> 45:14.200
仓库里边的数据

45:14.200 --> 45:16.200
就这样使用就完事了

45:16.200 --> 45:17.200
这个玩意里面觉得复杂

45:17.200 --> 45:20.200
它比react里面的

45:20.200 --> 45:21.200
就是react里面

45:21.200 --> 45:22.200
react它全家统里面

45:22.200 --> 45:24.200
react就相当于是VueoX

45:24.200 --> 45:25.200
它比这个玩意

45:25.200 --> 45:26.200
要简单太多了

45:26.200 --> 45:27.200
要简单太多了

45:27.200 --> 45:30.200
那个东西用得更加恶性

45:30.200 --> 45:31.200
当然你喜欢

45:31.200 --> 45:33.200
可以觉得不恶性

45:33.200 --> 45:34.200
吐就习惯了

45:34.200 --> 45:37.200
后来我没有讲到这么个东西

45:37.200 --> 45:38.200
就是某些时候

45:38.200 --> 45:40.200
我们可以通过VueoX里面的

45:40.200 --> 45:42.200
MapState可以简化操作

45:42.200 --> 45:44.200
我们当时怎么写的

45:44.200 --> 45:45.200
就是VueoXMapState

45:45.200 --> 45:46.200
这里写个命名空间

45:46.200 --> 45:47.200
后面写上一个中货号

45:47.200 --> 45:49.200
就剩下一个数组

45:49.200 --> 45:50.200
这里写属性1属性2

45:50.200 --> 45:51.200
你这样子一写

45:51.200 --> 45:52.200
它会返回一个对象

45:52.200 --> 45:53.200
什么对象

45:53.200 --> 45:54.200
你看下面

45:54.200 --> 45:55.200
我这样子一写的话

45:55.200 --> 45:56.200
大家一对照

45:56.200 --> 45:57.200
是不是应该明白了

45:57.200 --> 45:58.200
你这个代码

45:58.200 --> 46:00.200
因为调用这个函数过后

46:00.200 --> 46:02.200
它会返回这么一个对象

46:02.200 --> 46:04.200
是不是返回这么一个对象

46:04.200 --> 46:06.200
你这里写的属性1

46:06.200 --> 46:08.200
它会把它转换成一个函数

46:08.200 --> 46:10.200
return这么一个东西

46:10.200 --> 46:11.200
属性2

46:11.200 --> 46:12.200
就写一个函数

46:12.200 --> 46:14.200
return这么一个东西

46:14.200 --> 46:16.200
相当于是这么个意思

46:16.200 --> 46:18.200
就这个东西没有多什么气

46:18.200 --> 46:19.200
就是它通过这么一

46:19.200 --> 46:20.200
你调用这个函数

46:20.200 --> 46:21.200
它帮你做了这一件事

46:21.200 --> 46:22.200
其实你仔细想想

46:22.200 --> 46:23.200
你现在仔细想想

46:23.200 --> 46:25.200
我这里不写了

46:25.200 --> 46:26.200
现在仔细想想

46:26.200 --> 46:28.200
这个东西让你自己来实现

46:28.200 --> 46:29.200
就不实现别的

46:29.200 --> 46:30.200
就这样子实现

46:30.200 --> 46:31.200
实现这么一个效果

46:31.200 --> 46:32.200
你自己写个maps data

46:32.200 --> 46:33.200
你看一下你能不能实现

46:33.200 --> 46:35.200
我觉得没有什么难度

46:35.200 --> 46:36.200
我觉得没有什么难度

46:36.200 --> 46:37.200
这个实现起来

46:37.200 --> 46:39.200
应该是很简单的

46:39.200 --> 46:40.200
应该是很简单的

46:40.200 --> 46:41.200
没问题吧

46:41.200 --> 46:42.200
这是这一块

46:42.200 --> 46:43.200
不过了

46:43.200 --> 46:44.200
这个maps data

46:44.200 --> 46:45.200
它里边的用法

46:45.200 --> 46:46.200
还有很多

46:46.200 --> 46:47.200
还有很多用法

46:47.200 --> 46:48.200
比如我们常用的

46:48.200 --> 46:49.200
就这样用

46:49.200 --> 46:51.200
常用的就是这种用法

46:51.200 --> 46:53.200
这是关于vulx

46:53.200 --> 46:54.200
对吧

46:54.200 --> 46:55.200
就这三套套件

46:55.200 --> 46:56.200
那么就学完了

46:56.200 --> 46:57.200
vul最核心

46:57.200 --> 46:58.200
最核心的全家桶里边

46:58.200 --> 47:00.200
最核心最核心的内容就学完了

47:00.200 --> 47:02.200
但是vulx全家桶结束了

47:02.200 --> 47:03.200
其实还没有

47:03.200 --> 47:04.200
还有很多很多的知识

47:04.200 --> 47:06.200
就像我们给他

47:06.200 --> 47:07.200
给他讲的时候

47:07.200 --> 47:09.200
说到最多的就是

47:09.200 --> 47:10.200
webpack

47:10.200 --> 47:11.200
还有snew

47:11.200 --> 47:12.200
特别是

47:12.200 --> 47:13.200
昨天贺城里面

47:13.200 --> 47:14.200
应该很多东西

47:14.200 --> 47:15.200
也不太明白了

47:15.200 --> 47:16.200
是不是看到这个地方

47:16.200 --> 47:17.200
开始晕的

47:17.200 --> 47:19.200
就看到这个地方

47:19.200 --> 47:21.200
还有什么promise

47:21.200 --> 47:22.200
对不对

47:22.200 --> 47:24.200
我当时还告诉大家

47:24.200 --> 47:25.200
看不懂就不要看

47:25.200 --> 47:26.200
对不对

47:26.200 --> 47:27.200
就看到这个地方

47:27.200 --> 47:28.200
还要开始晕的对不对

47:28.200 --> 47:29.200
这个东西其实是

47:29.200 --> 47:30.200
es6的里边

47:30.200 --> 47:31.200
我估摸着

47:31.200 --> 47:32.200
es6我后边会

47:32.200 --> 47:33.200
咱们度一个有这个课

47:33.200 --> 47:35.200
我后边会把这个es6

47:35.200 --> 47:36.200
重新讲一遍

47:36.200 --> 47:37.200
重新讲一遍

47:37.200 --> 47:38.200
特别是关于这一块

47:38.200 --> 47:39.200
这一块我估计

47:39.200 --> 47:40.200
我要把它讲清楚的话

47:40.200 --> 47:42.200
得花两三个小时

47:42.200 --> 47:43.200
至少得花两三个小时

47:43.200 --> 47:45.200
把它完全讲清楚

47:45.200 --> 47:47.200
我可能还不止

47:47.200 --> 47:48.200
这里边东西可多了

47:48.200 --> 47:49.200
这里边

47:49.200 --> 47:51.200
你要去在前端

47:51.200 --> 47:53.200
你要去学习

47:53.200 --> 47:54.200
其他技术的话

47:54.200 --> 47:55.200
我建议你

47:55.200 --> 47:58.200
es6这个东西

47:58.200 --> 47:59.200
不要这样说

47:59.200 --> 48:00.200
es6你从头到尾

48:00.200 --> 48:02.200
彻彻底地的搞清楚

48:02.200 --> 48:03.200
因为后边

48:03.200 --> 48:06.200
基本上到处都是es6的知识

48:06.200 --> 48:08.200
特别是这么一个玩意

48:08.200 --> 48:09.200
多得很

48:09.200 --> 48:10.200
到处都是

48:10.200 --> 48:12.200
说这个东西你一定要了解清楚

48:12.200 --> 48:14.200
还包括什么vpeg

48:14.200 --> 48:15.200
还有什么vpeg大家族里边

48:15.200 --> 48:16.200
什么babel

48:16.200 --> 48:17.200
对吧

48:17.200 --> 48:18.200
brossomist这些东西

48:18.200 --> 48:19.200
还有devserver

48:19.200 --> 48:20.200
thisnoder

48:20.200 --> 48:22.200
乱七八糟一大堆

48:22.200 --> 48:24.200
vpeg大家族里边的东西

48:24.200 --> 48:25.200
还包括什么

48:25.200 --> 48:27.200
还包括load.js

48:27.200 --> 48:29.200
这些东西

48:29.200 --> 48:31.200
全部选完了

48:31.200 --> 48:32.200
你再来看这个

48:32.200 --> 48:34.200
再去深入去理解5u的时候

48:34.200 --> 48:36.200
你会发现有很多很多的感触

48:36.200 --> 48:37.200
你明白了

48:37.200 --> 48:40.200
很多地方你明白怎么回事

48:40.200 --> 48:42.200
当然还包括模块化

48:42.200 --> 48:45.200
也是es6提出的

48:45.200 --> 48:46.200
那么第一部分

48:46.200 --> 48:48.200
我们总结就到此结束了

48:48.200 --> 48:49.200
第二部分

48:49.200 --> 48:50.200
我们简单说一下展望

48:50.200 --> 48:51.200
展望的话

48:51.200 --> 48:53.200
主要是说一下个5u3.0

48:53.200 --> 48:56.200
我从去年年中的时候

48:56.200 --> 48:58.200
去年6月份的时候

48:58.200 --> 49:02.200
就不断的去看关于5u3.0的一些消息

49:02.200 --> 49:05.200
我觉得当时吹的那么牛

49:05.200 --> 49:09.200
可能今年2019年年初就应该出来了

49:09.200 --> 49:11.200
结果到现在都还难缠

49:11.200 --> 49:14.200
确实我当时也挺期待5u3.0的

49:14.200 --> 49:17.200
包括我现在也非常非常期待5u3.0

49:17.200 --> 49:18.200
我不知道他

49:18.200 --> 49:20.200
我真的是不知道他到

49:20.200 --> 49:23.200
里面怎么去解决目前遇到了这些问题

49:23.200 --> 49:25.200
5u其实你们看上去

49:25.200 --> 49:27.200
好像是没有什么问题的

49:27.200 --> 49:29.200
最多你就觉得好像不好用

49:29.200 --> 49:31.200
我告诉你5u其实已经最好用的了

49:31.200 --> 49:33.200
已经是最好用的了

49:33.200 --> 49:36.200
只不过5u里面还是有本身的一些问题

49:36.200 --> 49:40.200
咱们来看一下5u3.0他打算干嘛

49:40.200 --> 49:43.200
第一个他像使用函数式逐渐

49:43.200 --> 49:45.200
他像是使用函数式逐渐

49:45.200 --> 49:47.200
我们现在是不是函数式逐渐

49:47.200 --> 49:48.200
不是

49:49.200 --> 49:52.200
我们是写的逐渐是一个对象

49:52.200 --> 49:53.200
对不对

49:53.200 --> 49:54.200
那以后你写逐渐的时候

49:54.200 --> 49:56.200
可能就是跟react差不多了

49:56.200 --> 49:57.200
你写的是一个函数

49:57.200 --> 49:59.200
但是5u3.0也明确说到了

49:59.200 --> 50:01.200
兼容目前的代码

50:01.200 --> 50:03.200
就你现在的学习的知识仍然是可以用的

50:03.200 --> 50:04.200
目前代码仍然可以用

50:04.200 --> 50:06.200
而且5u3.0都不知道狂烈码

50:06.200 --> 50:07.200
也才出来

50:07.200 --> 50:09.200
因为这里面问题太多了

50:09.200 --> 50:11.200
他为什么要支持函数式逐渐呢

50:11.200 --> 50:12.200
这跟函数式编程

50:12.200 --> 50:16.200
越来越火爆也有很大的关系

50:16.200 --> 50:18.200
然后第二个点

50:18.200 --> 50:20.200
也是一个非常非常重要的一个点

50:20.200 --> 50:23.200
就是5u目前2.0的版本里边

50:23.200 --> 50:25.200
虽然用的目前公司

50:25.200 --> 50:26.200
公司里面用的很多

50:26.200 --> 50:30.200
但是目前5u2.0跟ts

50:30.200 --> 50:32.200
TypeScript这门技术

50:32.200 --> 50:35.200
它不能很好的结合

50:35.200 --> 50:37.200
有过一些第三方库

50:37.200 --> 50:39.200
来帮助去结合5u来使用

50:39.200 --> 50:41.200
但是你会发现坑很多

50:41.200 --> 50:42.200
有非常非常多的问题

50:42.200 --> 50:43.200
为什么是这样子呢

50:43.200 --> 50:45.200
因为5u目前的思想理念

50:45.200 --> 50:48.200
跟ts是相反的

50:48.200 --> 50:50.200
5u的思想理念是什么

50:50.200 --> 50:53.200
让用户用起来非常方便

50:53.200 --> 50:54.200
所以说

50:54.200 --> 50:57.200
它5u里面加了很多的模法

50:57.200 --> 50:59.200
其中一个模法

50:59.200 --> 51:01.200
就是Objects

51:01.200 --> 51:03.200
Defend

51:03.200 --> 51:06.200
Defend property

51:06.200 --> 51:09.200
它通过这个东太的

51:09.200 --> 51:12.200
为什么5u实力

51:12.200 --> 51:15.200
添加了属性

51:15.200 --> 51:16.200
对吧

51:16.200 --> 51:17.200
所以5u实力添加了

51:17.200 --> 51:19.200
动态的添加了属性

51:19.200 --> 51:22.200
而在一个

51:22.200 --> 51:26.200
一个健壮的系统里边

51:26.200 --> 51:29.200
动态添加属性是尽量避免的

51:29.200 --> 51:31.200
所以说在ts里边

51:31.200 --> 51:32.200
它的理念是

51:32.200 --> 51:34.200
你不要去这样搞

51:34.200 --> 51:35.200
不要去动态

51:35.200 --> 51:37.200
加一些乱七八糟的东西

51:37.200 --> 51:39.200
但它也没有完全限制的

51:39.200 --> 51:41.200
ts没有完全限制的

51:41.200 --> 51:43.200
它说从一个语言的角度来出发

51:43.200 --> 51:45.200
从一个合格的系统的角度来出发

51:45.200 --> 51:46.200
你不要去这样搞

51:46.200 --> 51:47.200
但是5u到处就这样搞

51:47.200 --> 51:49.200
它还有其他一些很多的模法

51:49.200 --> 51:50.200
这里边

51:50.200 --> 51:51.200
我们把它称之为模法

51:51.200 --> 51:53.200
就是已经打破了常规的编程模式了

51:53.200 --> 51:55.200
它为了让你用者方便

51:55.200 --> 51:56.200
所以说这一切都是让

51:56.200 --> 51:58.200
它为了让对开发者更加友好

51:58.200 --> 52:00.200
所以说它这里边加了很多的模法

52:00.200 --> 52:02.200
而ts是反对模法的

52:02.200 --> 52:04.200
就造成了这个问题

52:04.200 --> 52:06.200
两者很难结合

52:06.200 --> 52:08.200
会出很多问题

52:08.200 --> 52:10.200
所以说为了让跟ts

52:10.200 --> 52:11.200
结合更好

52:11.200 --> 52:13.200
可能在新版本里边

52:13.200 --> 52:15.200
它会减少大量的模法

52:15.200 --> 52:16.200
而减少

52:16.200 --> 52:18.200
但是5u它很多地方

52:18.200 --> 52:19.200
它的核心原理

52:19.200 --> 52:21.200
很多地方都是

52:21.200 --> 52:23.200
要用

52:23.200 --> 52:24.200
用到这些模法的

52:24.200 --> 52:25.200
怎么办呢

52:25.200 --> 52:28.200
当时5u的创始人游语西

52:28.200 --> 52:29.200
他当时说的

52:29.200 --> 52:31.200
我在知护里面看到他的回答是

52:31.200 --> 52:33.200
到时候5u3掉0里边

52:33.200 --> 52:35.200
它的代码90%

52:35.200 --> 52:37.200
都会用ts全部重新写一遍

52:37.200 --> 52:39.200
而且很多地方

52:39.200 --> 52:41.200
会涉及到原理性的变化

52:41.200 --> 52:43.200
会涉及到原理性的变化

52:43.200 --> 52:45.200
没办法

52:45.200 --> 52:46.200
但是所以说

52:46.200 --> 52:47.200
这里边有很多很多的困难

52:47.200 --> 52:48.200
要涉及到3.0

52:48.200 --> 52:49.200
3.0现在还没有出来

52:49.200 --> 52:50.200
有时候

52:50.200 --> 52:51.200
你在百度里边去

52:51.200 --> 52:52.200
收到什么5u3.0

52:52.200 --> 52:54.200
他说的是什么5u

52:54.200 --> 52:56.200
5uCLI3.0

52:56.200 --> 52:57.200
这个东西早就出来了

52:57.200 --> 52:58.200
这是个较售价

52:58.200 --> 53:00.200
就是较售价3.0

53:00.200 --> 53:01.200
5u本身

53:01.200 --> 53:02.200
它的核心库3.0

53:02.200 --> 53:03.200
还没有出来

53:03.200 --> 53:04.200
还没有出来

53:04.200 --> 53:05.200
目前社区

53:05.200 --> 53:07.200
还在激烈的争论

53:07.200 --> 53:08.200
有很多的提案

53:08.200 --> 53:09.200
其中一个比较

53:09.200 --> 53:10.200
我就说了几个

53:10.200 --> 53:11.200
比较确定性的东西

53:11.200 --> 53:12.200
这几个是确定的

53:12.200 --> 53:13.200
一个是函数组件

53:13.200 --> 53:14.200
现在目前确定下

53:14.200 --> 53:15.200
一定是有这个东西

53:15.200 --> 53:16.200
另外一个

53:16.200 --> 53:17.200
跟ts更好的结合

53:17.200 --> 53:18.200
第三个是

53:18.200 --> 53:20.200
组件的生命周期会发生

53:20.200 --> 53:21.200
到底怎么变化

53:21.200 --> 53:22.200
我也不知道

53:22.200 --> 53:23.200
它只是说

53:23.200 --> 53:25.200
会发生比较大的变化

53:25.200 --> 53:27.200
这个跟reaction差不多

53:27.200 --> 53:30.200
到了reaction 15个版本之后

53:30.200 --> 53:31.200
它的生命周期

53:31.200 --> 53:32.200
也发生了很多变化

53:32.200 --> 53:33.200
因为生命周期

53:33.200 --> 53:34.200
其实这个东西

53:34.200 --> 53:37.200
跟开发的实战有关系

53:37.200 --> 53:38.200
就是说

53:38.200 --> 53:39.200
它一个技术出来之后

53:39.200 --> 53:40.200
它一开始不是很成熟

53:40.200 --> 53:42.200
可能官方文

53:42.200 --> 53:43.200
也没有写得那么详细

53:43.200 --> 53:45.200
社区也没有那么发达

53:45.200 --> 53:46.200
那么它出来了一些技术过后

53:46.200 --> 53:48.200
可能有一些人在乱用

53:48.200 --> 53:49.200
在乱用

53:49.200 --> 53:50.200
比如就比方说

53:50.200 --> 53:51.200
我们刚才说的creted

53:51.200 --> 53:52.200
和mounted

53:52.200 --> 53:54.200
你去百度

53:54.200 --> 53:55.200
你去百度吧

53:55.200 --> 53:56.200
发现很多人

53:56.200 --> 53:57.200
所以我知道那边

53:57.200 --> 53:58.200
不要去相信百度了

53:58.200 --> 53:59.200
你发现很多人

53:59.200 --> 54:00.200
都往

54:00.200 --> 54:01.200
把它往creted里面写

54:01.200 --> 54:02.200
而它对5U的理解

54:02.200 --> 54:03.200
是非常非常浮浅的

54:03.200 --> 54:05.200
所以说

54:05.200 --> 54:06.200
就很多人去乱用

54:06.200 --> 54:07.200
它的生命周期函数

54:07.200 --> 54:08.200
包括reactor

54:08.200 --> 54:10.200
reactor真的是把它比极了

54:10.200 --> 54:11.200
它直接把一些生命周期函数

54:11.200 --> 54:13.200
直接标记为不可用了

54:13.200 --> 54:15.200
不让你去用生命周期函数

54:15.200 --> 54:17.200
直接给你干掉了

54:17.200 --> 54:18.200
就是有些人

54:18.200 --> 54:19.200
不太了解它的原理

54:19.200 --> 54:20.200
又跑去乱用

54:20.200 --> 54:21.200
说大家学习书

54:21.200 --> 54:22.200
最好是把原理

54:22.200 --> 54:24.200
测质的底地搞清楚

54:24.200 --> 54:26.200
因此生命周期

54:26.200 --> 54:28.200
可能会因为这个原因

54:28.200 --> 54:29.200
发生了一些变化

54:29.200 --> 54:30.200
到底具体怎么变

54:30.200 --> 54:31.200
那么拭目以待吧

54:31.200 --> 54:32.200
我也不知道

54:32.200 --> 54:33.200
它怎么到底怎么变

54:33.200 --> 54:34.200
最后一个

54:34.200 --> 54:35.200
最后一个

54:35.200 --> 54:37.200
我也是一个不太确定的地方

54:37.200 --> 54:38.200
它到底是一个进化

54:38.200 --> 54:39.200
还是革命

54:39.200 --> 54:41.200
什么叫革命呢

54:41.200 --> 54:43.200
就是把之前的全部推翻重来

54:43.200 --> 54:46.200
完全之前只是沿用了这个名字而已

54:46.200 --> 54:48.200
基本上是一个新框架了

54:48.200 --> 54:49.200
这是革命

54:49.200 --> 54:50.200
那么既什么叫进化呢

54:50.200 --> 54:51.200
进化呢

54:51.200 --> 54:52.200
就是说

54:52.200 --> 54:53.200
之前的所有东西

54:53.200 --> 54:55.200
我基本上那里都能用

54:55.200 --> 54:57.200
而且不强推

54:57.200 --> 54:58.200
让你用新的方式

54:58.200 --> 54:59.200
这是进化

54:59.200 --> 55:01.200
它到底用哪种模式

55:01.200 --> 55:02.200
来开发这个5U3.0

55:02.200 --> 55:03.200
我也不知道

55:03.200 --> 55:05.200
可能大概也是进化

55:05.200 --> 55:07.200
因为之前用5U写的系统太多了

55:07.200 --> 55:08.200
它一下子

55:08.200 --> 55:09.200
把它全部推翻重来

55:09.200 --> 55:11.200
我估计

55:11.200 --> 55:13.200
有点困难

55:13.200 --> 55:15.200
但是要进化的话

55:15.200 --> 55:17.200
它要开发这个东西就很麻烦了

55:17.200 --> 55:19.200
这里面很多很多困难

55:19.200 --> 55:20.200
这里面谁都涉及到

55:20.200 --> 55:21.200
很多5U的核心

55:21.200 --> 55:22.200
核心

55:22.200 --> 55:23.200
核心那个原理

55:23.200 --> 55:24.200
说这里面我也不展开

55:24.200 --> 55:25.200
但是我能想象到

55:25.200 --> 55:26.200
这里面有多困难

55:26.200 --> 55:27.200
非常非常老虎

55:27.200 --> 55:28.200
我也不知道它怎么去解决

55:28.200 --> 55:29.200
我分

55:29.200 --> 55:30.200
目前非常非常期待

55:30.200 --> 55:32.200
能够看到5U3.0

55:33.200 --> 55:35.200
它能解决5U2.0里面的很多问题

55:35.200 --> 55:36.200
好吧

55:36.200 --> 55:37.200
这就是我今天晚上

55:37.200 --> 55:39.200
给大家介绍了一些东西

55:40.200 --> 55:42.200
那这又差不多了

55:43.200 --> 55:44.200
差不多了

55:44.200 --> 55:45.200
因为我们前几天

55:45.200 --> 55:46.200
刚才说了

55:46.200 --> 55:47.200
我们前几天

55:48.200 --> 55:49.200
占用了太多的时间

55:49.200 --> 55:50.200
我们这里

55:50.200 --> 55:52.200
还有很多的就业的知识

55:52.200 --> 55:53.200
还有摩尼卡

55:53.200 --> 55:54.200
还没给大家介绍

55:54.200 --> 55:55.200
我怕时间不够

55:55.200 --> 55:56.200
那么接下来

55:56.200 --> 55:57.200
我就把这个时间

55:57.200 --> 55:58.200
交给摩尼卡

56:00.200 --> 56:01.200
结束了

56:01.200 --> 56:03.200
有什么不明白的地方

56:03.200 --> 56:04.200
在群里面问

56:04.200 --> 56:05.200
然后

56:05.200 --> 56:07.200
咱们也有那个视频

56:07.200 --> 56:08.200
就是录播课程

56:08.200 --> 56:09.200
所以说这一块

56:10.200 --> 56:11.200
我们的知识

56:11.200 --> 56:12.200
已经是讲完了

56:12.200 --> 56:13.200
已经是讲完了

56:13.200 --> 56:14.200
但是5U的知识

56:14.200 --> 56:15.200
肯定是没有结束的

56:16.200 --> 56:17.200
要想5U里面

56:17.200 --> 56:18.200
还有这么多东西

56:18.200 --> 56:19.200
你肯定还要花

56:19.200 --> 56:20.200
费大量的时间来学习

56:22.200 --> 56:23.200
还了的时间

56:23.200 --> 56:24.200
总是过得太快

56:24.200 --> 56:25.200
还有很多就业课的

56:25.200 --> 56:27.200
就是就业的知识

56:27.200 --> 56:29.200
也非常非常的重要

56:29.200 --> 56:30.200
我希望同学们

56:30.200 --> 56:31.200
听一下

56:31.200 --> 56:32.200
不知道到时候你就业的时候

56:32.200 --> 56:34.200
又遇到就业的麻烦

56:34.200 --> 56:38.090
到时候又听不到了

56:38.090 --> 56:39.090
我希望以后

56:39.090 --> 56:40.090
还有机会

56:40.090 --> 56:41.090
能够上这样的课

56:41.090 --> 56:43.090
我也挺喜欢上这样的课的

56:43.090 --> 56:46.090
那么现在我们把时间交给摩尼卡

