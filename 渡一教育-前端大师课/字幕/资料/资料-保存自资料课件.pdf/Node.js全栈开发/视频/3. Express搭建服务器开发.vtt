WEBVTT

00:00.430 --> 00:03.430
前面第一天讲漏得的环境

00:03.430 --> 00:05.930
昨天讲那个数据库

00:05.930 --> 00:07.230
现在我们有什么功能呢

00:07.230 --> 00:08.730
我们可以用漏得写程序了

00:08.730 --> 00:09.130
然后呢

00:09.130 --> 00:13.030
也可以在漏得里边去19的保存一些数据了

00:13.030 --> 00:13.830
所以说我们今天呢

00:13.830 --> 00:15.430
就接着昨天的写

00:15.430 --> 00:16.930
昨天我们是写了两个年假

00:16.930 --> 00:20.430
一个是models跟数据库相关的模型

00:20.430 --> 00:22.030
一个是services

00:22.030 --> 00:25.430
就是我们提供了封装了一些函数

00:25.430 --> 00:26.430
可以用这些函数呢

00:26.430 --> 00:28.430
可以方便的去操作数据库

00:28.630 --> 00:30.830
这是我们昨天写的东西

00:30.830 --> 00:31.230
然后呢

00:31.230 --> 00:31.930
今天写的呢

00:31.930 --> 00:33.430
跟昨天没有直接的关系

00:33.430 --> 00:33.730
但是呢

00:33.730 --> 00:36.430
我们还是会在这个工程基础上来写

00:36.430 --> 00:37.230
明天呢

00:37.230 --> 00:41.330
我们就会把今天学习的和昨天学习的结合在一起了

00:41.330 --> 00:43.230
这两天的东西一定要认真听啊

00:43.230 --> 00:44.930
这是我们昨天的代码

00:44.930 --> 00:46.130
我们认在这啊

00:46.130 --> 00:48.230
然后今天我们干嘛呢

00:48.230 --> 00:48.630
现在啊

00:48.630 --> 00:50.930
我们已经可以保存了

00:50.930 --> 00:51.430
127

00:51.430 --> 00:53.430
2174个人是吧

00:53.430 --> 00:54.230
那是谁啊

00:54.230 --> 00:54.830
你们都知道

00:54.830 --> 00:56.530
我不知道啊

00:56.930 --> 00:59.730
我们现在已经可以保存数据了

00:59.730 --> 01:00.630
但这个数据呢

01:00.630 --> 01:02.030
只在服务器内部保存

01:02.030 --> 01:04.230
没有提供给别人用的啊

01:04.230 --> 01:06.530
那么我们怎么把这个数据提供给别人用呢

01:06.530 --> 01:08.330
比方说我要做一个新闻页面

01:08.330 --> 01:09.330
我们明天就会做啊

01:09.330 --> 01:11.430
明天我们会有很多的页面啊

01:11.430 --> 01:12.630
我们要做一个新闻页面

01:12.630 --> 01:14.630
要做一个登录页面

01:14.630 --> 01:17.030
要做一个注册页面等等等等

01:17.030 --> 01:18.330
要做这些事呢

01:18.330 --> 01:20.130
我们就需要用到这些数据

01:20.130 --> 01:20.430
对吧

01:20.430 --> 01:21.330
我们要有新闻页面

01:21.330 --> 01:22.930
我们肯定要拿到这些数据吗

01:22.930 --> 01:23.830
我们要登录的时候

01:23.830 --> 01:25.630
是不是要去数据库匹配

01:25.630 --> 01:26.330
对不对

01:26.330 --> 01:27.630
那么我们要去做这些事

01:27.630 --> 01:28.630
要做这些页面呢

01:28.630 --> 01:29.730
我就必须要有数据

01:29.730 --> 01:30.630
但是数据在哪呢

01:30.630 --> 01:31.730
在服务器上

01:31.730 --> 01:32.730
我们页面在哪呢

01:32.730 --> 01:34.730
页面在浏览器端

01:34.730 --> 01:36.130
说这个是不是两个程序

01:36.130 --> 01:37.630
浏览器是一个程序

01:37.630 --> 01:38.930
咱们的漏的阶势呢

01:38.930 --> 01:40.330
是另外一个程序

01:40.330 --> 01:43.330
那么这就涉及到两个程序之间的

01:43.330 --> 01:45.630
相互的数据流通

01:45.630 --> 01:48.730
我们把叫做网络通信

01:48.730 --> 01:50.130
那么要学习网络通信呢

01:50.130 --> 01:52.730
你就必须要学习服务器了

01:52.730 --> 01:54.530
你才知道服务器咋回事了

01:54.630 --> 01:55.230
我们这里呢

01:55.230 --> 01:56.130
首先说一下

01:56.130 --> 01:56.930
在学习之前呢

01:56.930 --> 01:58.330
有一个前置知识

01:58.330 --> 01:59.130
这个前置知识呢

01:59.130 --> 02:02.130
是ES6的模板制服串

02:02.130 --> 02:03.230
我觉得

02:03.230 --> 02:05.230
后来把这个课件稍微改了一下

02:05.230 --> 02:07.830
好像也不需要这个前置知识了

02:07.830 --> 02:08.630
好像也不需要了

02:08.630 --> 02:08.930
来吧

02:08.930 --> 02:10.030
我们学一下这个前置知识吧

02:10.030 --> 02:11.130
这个前置字也很简单的

02:11.130 --> 02:12.330
一个模板制服串

02:12.330 --> 02:14.730
我经常在公开直播课里边经常讲

02:14.730 --> 02:16.230
这个是什么意思呢

02:16.230 --> 02:18.430
我们这里新建个文件

02:18.430 --> 02:21.030
叫做模板制服串吧

02:22.030 --> 02:24.930
或者叫 template.js

02:24.930 --> 02:28.430
我们说一下这个ES6的模板制服串

02:28.430 --> 02:30.030
就是我们以前写的制服串

02:30.030 --> 02:32.430
都是两个双引号

02:32.430 --> 02:34.030
或者是两个单引号

02:34.030 --> 02:36.030
是这样子写制服串的

02:36.030 --> 02:37.230
那么这样子写制服串呢

02:37.230 --> 02:40.730
有至少两个问题不是很好解决

02:40.730 --> 02:41.330
一个问题呢

02:41.330 --> 02:43.130
就是在这里换行

02:43.130 --> 02:44.630
换行不是很好解决

02:44.630 --> 02:46.130
换行我们应该怎么办的

02:46.130 --> 02:47.430
应该用斜杠N

02:47.430 --> 02:47.730
对吧

02:47.730 --> 02:48.930
是不是要用斜杠N

02:48.930 --> 02:50.130
用这种方式来换行

02:50.230 --> 02:51.330
你看一下吧

02:51.330 --> 02:52.430
我们把运行一下

02:52.430 --> 02:53.730
右键绕扣的运行

02:55.630 --> 02:56.430
我没输出是吧

02:57.530 --> 02:58.030
STR

02:59.730 --> 03:00.130
好

03:00.130 --> 03:00.930
右键运行

03:01.830 --> 03:03.130
右键运行

03:03.130 --> 03:04.330
你看是不是换行了

03:04.330 --> 03:05.530
对不对

03:05.530 --> 03:06.130
巧了

03:06.130 --> 03:06.930
两个还写的一样

03:08.730 --> 03:10.430
我们只有这种方式来换行

03:10.430 --> 03:11.430
这种方式换行

03:11.430 --> 03:14.230
在单码层面看着不是很直观

03:14.230 --> 03:16.430
因为单码上是不是没有换行

03:16.430 --> 03:16.730
对吧

03:16.730 --> 03:18.730
只是用转移服

03:18.730 --> 03:19.830
看的不是很直观

03:19.930 --> 03:21.230
这是一个问题

03:21.230 --> 03:22.030
另外一个问题呢

03:22.030 --> 03:24.230
就是我要拼接一些数据的话

03:24.230 --> 03:25.330
不是那么好拼接

03:26.730 --> 03:28.630
比方说我要把A拼接到这

03:28.630 --> 03:29.230
怎么拼接呢

03:29.230 --> 03:30.130
我们要用这种方式

03:30.130 --> 03:30.930
对吧

03:30.930 --> 03:31.630
说要用这种方

03:31.630 --> 03:35.600
哎

03:35.600 --> 03:37.000
放个键盘简直不适应

03:38.200 --> 03:39.000
这个用A

03:39.000 --> 03:40.900
比方说我要把B拼接到这

03:40.900 --> 03:42.000
我们是不是要这样子写

03:44.730 --> 03:45.730
是不是要这样子写

03:45.730 --> 03:46.130
对吧

03:46.130 --> 03:47.230
这是我们拼接字母算

03:47.230 --> 03:48.030
来看一下吧

03:48.030 --> 03:48.430
运行

03:49.430 --> 03:50.630
说拼接了一个A

03:50.630 --> 03:53.030
拼接了一个B

03:53.030 --> 03:53.830
对吧

03:53.830 --> 03:55.730
那么无论是拼接字母算也好

03:55.730 --> 03:56.530
还是换行也好

03:56.530 --> 03:58.030
都不是那么的方便

03:58.630 --> 03:59.630
到了ES6

03:59.630 --> 04:02.230
他给我们提供了另外一种字母算的写法

04:02.230 --> 04:03.630
叫做模板字母算

04:03.730 --> 04:05.230
有了模板字母算之后

04:05.230 --> 04:06.230
要做拼接也好

04:06.230 --> 04:07.130
要做换行也好

04:07.130 --> 04:08.230
都非常的方便

04:08.230 --> 04:08.430
好

04:08.430 --> 04:10.130
咱们来看一下模板字母算怎么写

04:10.230 --> 04:10.730
怎么写呢

04:10.730 --> 04:12.430
就是两个反斜钢

04:12.430 --> 04:14.330
两个反引号

04:14.530 --> 04:16.330
ESC下边的两个反引号

04:16.330 --> 04:17.030
就这样子

04:17.430 --> 04:19.130
比方说我们要写上这两个字母算

04:19.130 --> 04:19.930
一回车

04:20.130 --> 04:21.030
直接回车就行了

04:21.530 --> 04:22.330
那么这里的回车

04:22.330 --> 04:24.130
就相当于是你写了个换行符

04:24.330 --> 04:25.130
明儿的意思吧

04:25.130 --> 04:26.230
我们这里清空一下

04:26.730 --> 04:28.230
清除右键运行

04:28.630 --> 04:29.530
是不是换行了

04:29.930 --> 04:30.330
对吧

04:30.330 --> 04:32.030
就不用去写了个写钢N了

04:32.530 --> 04:33.230
另外呢

04:33.230 --> 04:35.230
如果说我们要在这里去拼接的话

04:35.230 --> 04:36.330
也非常的简单

04:36.330 --> 04:37.830
比方说我们要这里拼接一个

04:37.830 --> 04:39.030
A的值得有多少呢

04:39.030 --> 04:40.230
那么我们在这里拼接

04:40.230 --> 04:42.130
我们不用去用使用加号

04:42.130 --> 04:44.330
而直接在制服串里边写上一个多了

04:44.330 --> 04:45.130
两个大过号

04:46.130 --> 04:48.330
那么这里边可以写JS表达式

04:48.730 --> 04:50.430
任何JS表达式都可以

04:50.530 --> 04:51.130
比方说这里呢

04:51.130 --> 04:52.630
我们可以写上一个变量A

04:52.630 --> 04:53.130
对吧

04:53.130 --> 04:55.030
就是表示把变量的值

04:55.430 --> 04:57.130
T换掉这个位置

04:57.830 --> 04:58.730
然后比方说在这

04:58.730 --> 04:59.830
我们写上一个B

05:00.930 --> 05:02.130
多了两个大过号

05:02.930 --> 05:03.330
B

05:04.030 --> 05:05.330
你看这样子写完了

05:05.530 --> 05:06.530
右键运行一下

05:07.130 --> 05:08.630
A3B4

05:09.130 --> 05:09.830
明儿的意思吧

05:09.830 --> 05:11.030
所以说在模板制服串里

05:11.030 --> 05:13.130
它非常适合做拼接

05:13.130 --> 05:15.430
也非常适合在直接换行

05:15.830 --> 05:17.130
这我们一个前置姿势

05:17.130 --> 05:18.330
一个模板制服串的前置姿势

05:18.330 --> 05:19.330
非常的简单

05:20.030 --> 05:21.230
有可能不会用

05:21.230 --> 05:21.930
有可能不会用

05:21.930 --> 05:23.130
反正都说了转说了一下

05:24.530 --> 05:24.830
好

05:26.430 --> 05:27.330
看不到画面吗

05:28.330 --> 05:29.330
看不到画面发现一下

05:30.130 --> 05:30.230
好

05:30.230 --> 05:31.330
先让我们看几乎正题

05:32.230 --> 05:33.530
今天晚上我们要用漏了接

05:33.530 --> 05:34.530
是搭一个服务器

05:36.030 --> 05:36.830
要学习服务器

05:36.830 --> 05:38.830
你首先得知道A-D-B协议

05:39.330 --> 05:41.030
我不知道这里边有同学

05:41.030 --> 05:43.130
估计有些同学是知道A-D-B协议的

05:43.130 --> 05:45.830
因为我们之前的一些小额课

05:45.830 --> 05:47.430
集训营里边也有讲

05:47.930 --> 05:49.330
有可能同学们自己学习过了

05:49.330 --> 05:51.230
但是肯定还是有一些同学

05:51.230 --> 05:52.730
没有学习过A-D-B协议

05:52.730 --> 05:55.430
所以说我们快速的把A-D-B协议

05:55.430 --> 05:56.830
看一下回顾一下

05:57.830 --> 05:59.230
将今天晚上的课

05:59.230 --> 06:01.030
主要是集中在概念上

06:01.030 --> 06:02.630
你要把这些概念理清楚

06:02.630 --> 06:03.830
理清楚这些概念过后

06:03.830 --> 06:05.630
明天后天的知识能力

06:05.630 --> 06:06.630
才非常好理解

06:07.230 --> 06:08.630
明天后天的知识的难度

06:08.630 --> 06:11.130
可这样理明天后天的课程的难度

06:13.590 --> 06:15.090
到底是难还是简单

06:15.990 --> 06:18.090
取决于你对A-D-B协议的理解

06:18.590 --> 06:19.790
理解的越深刻

06:20.390 --> 06:22.290
明后天的课程就越简单

06:22.890 --> 06:23.890
理解的越模糊

06:23.890 --> 06:25.090
明后天的课程就越难

06:25.690 --> 06:27.290
所以今天的课一定要认真提

06:29.290 --> 06:31.190
我们现在在显露的GS

06:31.190 --> 06:33.990
露了GS实际上是一个服务器程序

06:33.990 --> 06:35.390
它实际上就是一个应用程序

06:35.890 --> 06:37.590
文字上跟它什么微信QQ

06:38.190 --> 06:38.990
还有什么浏览器

06:38.990 --> 06:40.090
没有什么本质的区别

06:40.090 --> 06:41.190
它就是一个程序而已

06:41.790 --> 06:43.090
所以说我们平时说的服务器

06:43.490 --> 06:45.190
不是说的是一台计算机

06:45.690 --> 06:47.790
而是说的是一个程序

06:48.290 --> 06:50.090
露的GS就是一个写服务器的程序

06:51.290 --> 06:52.790
我们的浏览器是什么呢

06:52.790 --> 06:54.790
浏览器我们认为是一个客户端

06:55.490 --> 06:57.390
我们露的GS写的程序叫做服务器

06:57.390 --> 06:58.590
浏览器是不是一个程序

06:58.790 --> 07:00.190
服务器它也是一个程序

07:00.490 --> 07:03.790
那么两个程序之间要进行数据的传输

07:04.390 --> 07:06.590
我服务器的数据要跑到浏览器那边去

07:06.990 --> 07:09.090
浏览器那边用户填了账号密码

07:09.290 --> 07:11.190
它的数据跑到服务器这边来

07:11.490 --> 07:12.490
那么这叫数据传输

07:12.490 --> 07:14.090
我们把它称之为网络通信

07:15.090 --> 07:16.490
在通信的时候

07:16.490 --> 07:18.390
它需要满足一定的协议

07:18.490 --> 07:19.190
什么意思呢

07:19.990 --> 07:21.490
协议是啥 协议就是标准

07:21.790 --> 07:23.190
就是规定了你怎么说话

07:23.490 --> 07:25.890
你要说什么样的内容格式我才能看得懂

07:26.190 --> 07:27.990
不然的话你说你的我说我的

07:27.990 --> 07:29.290
我可以传的消息你看不懂

07:29.290 --> 07:30.690
你给我传的消息我也看不懂

07:30.990 --> 07:32.790
那这样子双方就没法交流了

07:32.990 --> 07:34.990
所以双方要必须要约定一种格式

07:35.090 --> 07:37.290
那种这种格式标准的就是协议

07:38.190 --> 07:41.690
协议规定了双方传输的内容和方式

07:41.690 --> 07:43.190
内容格式和方式

07:43.590 --> 07:44.190
要这样说

07:44.690 --> 07:46.190
内容格式和方式

07:46.390 --> 07:47.990
好 咱们先看一下下面这张图

07:48.990 --> 07:50.390
这是一个实蓄图

07:50.390 --> 07:53.090
我们从上到下的时间组建增加

07:53.190 --> 07:54.390
我们来看一下服务器

07:54.590 --> 07:56.790
最先做出动作的是服务器

07:57.790 --> 07:59.090
服务器我们认为是

07:59.790 --> 08:01.990
它有一个域名叫做dokalhost

08:01.990 --> 08:02.890
dokalhost表示什么意思

08:02.890 --> 08:03.590
就是本机

08:03.590 --> 08:04.390
我的电脑

08:05.490 --> 08:07.290
这是我的电脑上的一台服务器

08:07.490 --> 08:08.490
那么这个服务器

08:08.490 --> 08:09.690
首先他做的一件事

08:09.690 --> 08:10.330
就是lesson

08:10.330 --> 08:11.190
lesson表示什么意思

08:11.190 --> 08:11.990
监听

08:12.390 --> 08:14.690
监听一个数字

08:14.690 --> 08:16.090
这个数字叫做端口

08:16.990 --> 08:17.890
这是啥意思呢

08:18.290 --> 08:19.190
你可以想象

08:19.190 --> 08:22.390
咱们的计算机上有很多很多的应用程序

08:23.190 --> 08:24.690
不同的应用程序

08:24.790 --> 08:26.890
可能会使用不同的端口

08:27.590 --> 08:30.090
一个端口只能被一个应用程序使用

08:31.790 --> 08:32.790
我们这个服务器

08:32.790 --> 08:36.290
你可以使用任何一个没有被用过的端口

08:36.690 --> 08:38.290
像我们昨天学到数据库

08:38.290 --> 08:38.790
对吧

08:39.190 --> 08:40.590
打开这个robo3d

08:40.790 --> 08:42.890
这个数据库他也有没有用端口呢

08:42.890 --> 08:44.290
用了他的端口呢

08:44.290 --> 08:46.290
使用的是27017

08:46.690 --> 08:47.190
这个端口

08:47.190 --> 08:47.890
所以说呢

08:47.890 --> 08:49.190
如果说理解程序

08:49.390 --> 08:50.290
这个端口还能用吗

08:50.290 --> 08:51.090
又用不了了

08:51.090 --> 08:52.190
被数据库占用了

08:52.490 --> 08:53.990
意思说他一个程序呢

08:53.990 --> 08:57.190
他他可能会去占用一个或多个端口

08:57.790 --> 08:58.790
那么我们的服务器呢

08:58.790 --> 09:01.090
随便找一个没有用过的端口就行了啊

09:01.590 --> 09:02.590
我一般来说

09:03.290 --> 09:04.290
一般来说什么

09:05.590 --> 09:08.090
8000到1万的端口一般没人使用

09:08.090 --> 09:09.190
我们这里随便找一个吧

09:09.190 --> 09:10.390
找一个比较好听的数字

09:10.390 --> 09:11.390
9527

09:11.790 --> 09:12.790
那么这个服务器呢

09:12.790 --> 09:15.090
首先他要去监听9527端口

09:15.090 --> 09:16.290
至于怎么去监听

09:16.290 --> 09:17.190
我们一会再说

09:17.990 --> 09:18.890
监听好了过

09:18.890 --> 09:20.290
和这个服务器就启动起来了

09:21.290 --> 09:22.590
监听好了之后呢

09:22.590 --> 09:24.590
后边的其他的浏览器啊

09:24.690 --> 09:25.190
后续呢

09:25.190 --> 09:28.090
他就可以把消息发送到服务器

09:28.890 --> 09:30.690
服务器呢会回应给他一个消息

09:30.690 --> 09:33.090
我们把这个过程的叫做请求享用

09:33.990 --> 09:36.290
就是浏览器他作为客户端

09:36.690 --> 09:39.890
他会某些时候不要用户点点了一个按钮登录

09:40.190 --> 09:42.590
或者是在浏览器里边输入了一个地址一回车

09:42.990 --> 09:44.590
那么这些呢都有可能把这个

09:44.890 --> 09:47.190
都可能会发生一个消息到我们的服务器

09:47.190 --> 09:48.890
我们把这个过程的叫做请求

09:49.490 --> 09:51.490
请求里边呢他包含了一些信息

09:51.690 --> 09:52.290
哪些信息呢

09:52.290 --> 09:53.890
你想啊请求为什么要包含信息

09:53.890 --> 09:55.790
我在告诉你我要干嘛对吧

09:55.890 --> 09:57.890
因为我的服务器上有可能有新闻

09:57.990 --> 09:59.090
有可能有用户

09:59.090 --> 10:00.590
有可能有乱七八糟一大堆信息

10:00.590 --> 10:01.690
你要告诉我你要干嘛

10:02.290 --> 10:03.190
你要添加新闻

10:03.890 --> 10:05.590
还是分业获取新闻

10:05.890 --> 10:06.490
第几页

10:06.790 --> 10:08.390
每一页多少条是吧

10:08.690 --> 10:10.390
那么有没有什么个产权关键制

10:10.390 --> 10:11.690
这些你都需要告诉

10:11.990 --> 10:13.790
告诉我过后了我才能给你

10:14.090 --> 10:15.190
做相应的处理

10:15.490 --> 10:16.690
所以说呢我们浏览器呢

10:16.690 --> 10:18.590
他怎么来告诉服务器这些消息呢

10:18.590 --> 10:20.190
他就通过三个信息

10:20.190 --> 10:21.390
一个是请求行

10:21.590 --> 10:22.890
请一个是消息头

10:22.890 --> 10:23.790
一个是消息体

10:24.690 --> 10:26.590
把这些信息呢发送到服务器

10:26.690 --> 10:27.990
服务器自己分析啊

10:27.990 --> 10:29.290
请求行是什么请求头

10:29.490 --> 10:31.290
消息头是什么消息体是什么

10:31.290 --> 10:32.390
那就把他分析下来

10:32.590 --> 10:33.590
服务器来决定

10:33.590 --> 10:35.590
我到底给给你什么样一个结果

10:35.890 --> 10:37.590
那么给他结果的过程

10:37.590 --> 10:38.590
就叫做相应

10:39.190 --> 10:40.490
相应也是一样

10:40.490 --> 10:40.990
对吧

10:41.090 --> 10:42.190
我要给你一些消息

10:42.190 --> 10:44.090
这些消息到底有什么样的含义

10:44.090 --> 10:44.790
那么这里边呢

10:44.790 --> 10:45.690
就规定了

10:46.390 --> 10:47.290
想一行

10:47.290 --> 10:48.690
想想一行

10:48.690 --> 10:50.090
消息头消息体

10:50.790 --> 10:52.690
那么这里边就给他浏览器

10:52.690 --> 10:54.190
告诉了浏览器一些信息

10:54.190 --> 10:55.790
那么现在肯定很模糊

10:55.790 --> 10:57.790
不知道这个请求行到底是什么玩意

10:57.790 --> 10:59.890
请求头消息体到底是什么玩意

10:59.990 --> 11:00.590
但是没关系

11:00.590 --> 11:01.490
我们一会再详细讲

11:01.490 --> 11:02.890
总之请求的时候

11:02.890 --> 11:04.490
会发送一些消息到服务器

11:04.690 --> 11:05.790
相应的时候呢

11:05.890 --> 11:08.090
服务器会回应给浏览器一些消息

11:09.590 --> 11:10.590
那么过了一会呢

11:10.590 --> 11:11.790
这个同一个浏览器呢

11:11.790 --> 11:13.790
又可能会重新去请求服务器

11:13.890 --> 11:15.790
也给他发一些消息

11:15.790 --> 11:16.990
然后服务器又给他回应

11:17.090 --> 11:17.890
做一些相应

11:17.890 --> 11:18.090
对吧

11:18.090 --> 11:18.890
就这个过程

11:18.890 --> 11:19.990
然后别的浏览器呢

11:19.990 --> 11:21.090
就别的用户的浏览器呢

11:21.090 --> 11:22.690
他也可以给服务器发送消息

11:22.690 --> 11:24.390
请求服务器给他一个结果

11:24.390 --> 11:24.890
想应

11:24.890 --> 11:25.390
请求

11:25.390 --> 11:25.890
想应

11:26.190 --> 11:29.190
这就是服务器跟浏览器和服务器之间

11:29.190 --> 11:30.990
最基本的交互模式

11:31.990 --> 11:32.490
是吧

11:33.690 --> 11:36.490
那么这就是他们之间的交互模式

11:36.490 --> 11:38.590
然后接下来来看一些细节

11:38.590 --> 11:39.990
具体是怎么交互的

11:40.590 --> 11:41.390
具体怎么交互呢

11:41.390 --> 11:43.490
就是我首先我们浏览器

11:43.590 --> 11:45.790
你看一切都是从浏览器出发的

11:46.490 --> 11:48.190
我们服务器跟浏览器之间

11:48.190 --> 11:49.490
有消息的传输

11:49.690 --> 11:51.490
服务器不是主动方

11:51.690 --> 11:52.590
主动方是谁

11:52.590 --> 11:53.990
主动方是浏览器

11:54.890 --> 11:56.790
你可以认为服务器呢

11:57.090 --> 11:58.990
是一个非常高贵的女神

11:59.590 --> 12:00.090
啊

12:01.690 --> 12:03.290
那么这些这些浏览器呢

12:03.290 --> 12:04.390
就相当于是啥呢

12:04.490 --> 12:06.190
相当于是那个舔狗

12:06.190 --> 12:06.590
对不对

12:07.990 --> 12:08.390
那么

12:08.390 --> 12:10.790
所以说一定是由舔狗先发出消息

12:10.790 --> 12:11.190
然后呢

12:11.190 --> 12:12.190
服务器给他回应

12:12.190 --> 12:13.990
服务器不会主动给他发送消息的

12:14.390 --> 12:15.690
所以他是这么一个逻辑

12:15.690 --> 12:17.290
因此我们要理清楚

12:18.590 --> 12:21.690
浏览器他怎么样主动给服务器发送消息呢

12:21.790 --> 12:22.690
他是需要一个东西

12:22.690 --> 12:24.690
叫做url地址的方式

12:24.990 --> 12:27.690
用这么一个东西来定位服务器

12:28.190 --> 12:29.990
那么我们互联网中呢

12:30.290 --> 12:32.690
就相当于是有很多

12:33.390 --> 12:34.790
很多很多的女神

12:35.390 --> 12:36.790
每个女神就是一台服务器

12:36.790 --> 12:37.790
有这么多女神

12:37.890 --> 12:38.090
对吧

12:38.090 --> 12:39.990
这些舔狗到底要找哪个女神呢

12:41.790 --> 12:42.490
那么这个时候呢

12:42.490 --> 12:44.790
就需要通过一个url地址来定位

12:44.990 --> 12:46.590
那么这个url地址的格式呈现

12:46.590 --> 12:47.490
大家认识一下

12:47.790 --> 12:49.290
这里边有很多很多的术语

12:50.190 --> 12:51.390
第一个协议

12:51.790 --> 12:53.590
帽号两个鞋杠固定的

12:53.590 --> 12:54.990
hosename 主机名

12:54.990 --> 12:56.890
帽号port 端口号

12:57.190 --> 12:57.990
鞋杠pass

12:58.290 --> 12:59.790
问号 问号后边

13:00.090 --> 13:00.990
后边是carry

13:00.990 --> 13:02.990
然后有个警号 警号后边是哈希

13:04.190 --> 13:05.990
我们平时一个访问地址

13:05.990 --> 13:08.490
他无非逃不过这种格式

13:08.590 --> 13:10.090
比方说我这里有个地址啊

13:10.390 --> 13:12.090
像这个东西就是一个url地址

13:12.290 --> 13:14.190
那么这个地址里边有哪些信息呢

13:14.190 --> 13:15.290
他信息非常丰富

13:15.890 --> 13:17.690
一个是协议 协议是adp

13:17.890 --> 13:20.890
我们这两天的协议固定为adp

13:21.690 --> 13:22.990
我们讲的就是adp协议

13:22.990 --> 13:23.390
对吧

13:23.890 --> 13:24.590
hosename

13:25.290 --> 13:25.990
主机名

13:25.990 --> 13:27.290
我们这两天的主机名呢

13:27.390 --> 13:28.690
都是localhost

13:29.590 --> 13:30.390
表示本机

13:30.890 --> 13:31.690
就是我的电脑

13:32.090 --> 13:32.490
什么意思呢

13:32.490 --> 13:34.890
就是我的浏览器在我的电脑上

13:34.890 --> 13:35.690
我的服务器呢

13:35.690 --> 13:36.890
也在我的电脑上

13:37.090 --> 13:37.890
就是localhost

13:38.190 --> 13:38.890
就是本机

13:39.890 --> 13:40.390
port

13:41.190 --> 13:42.090
什么意思 端口号

13:42.090 --> 13:42.890
我们刚才解释过了

13:42.890 --> 13:43.090
对吧

13:43.090 --> 13:43.790
每个程序呢

13:43.790 --> 13:44.690
会监听一个端口

13:44.690 --> 13:45.490
那么你看一下

13:45.490 --> 13:46.890
有了这两个信息过后

13:47.090 --> 13:49.090
是不是就已经定位到了计算机

13:49.090 --> 13:50.390
通过它来定位计算机

13:50.390 --> 13:51.790
哪个计算机本机

13:52.990 --> 13:54.290
计算机上有很多程序

13:54.290 --> 13:56.590
你要把这个消息发送给哪些程序

13:56.690 --> 13:57.490
哪个程序呢

13:57.790 --> 14:00.390
发送给端口9527

14:00.390 --> 14:01.890
哪个程序在监听那个端口

14:01.890 --> 14:02.790
我就发送给谁

14:03.390 --> 14:04.390
我们刚才我们一会儿的

14:04.390 --> 14:05.190
会写一个程序

14:05.190 --> 14:06.190
监听那个端口

14:06.190 --> 14:07.890
那么他就会发送给我们那个程序

14:08.690 --> 14:08.890
好

14:08.890 --> 14:10.890
那么后边又是一些额外的信息了

14:10.890 --> 14:12.490
像他们pass一个字不串

14:12.990 --> 14:14.090
他就是比方说

14:14.090 --> 14:15.290
news一个邪纲

14:15.290 --> 14:17.790
news表示我想获取新闻

14:17.990 --> 14:18.790
就这么个意思

14:19.090 --> 14:19.890
query呢

14:19.890 --> 14:21.390
就表示的是一些额外的信息

14:21.390 --> 14:22.590
这些全是额外的信息

14:22.990 --> 14:23.990
看服务器怎么用

14:23.990 --> 14:24.890
一会我们就知道了

14:24.890 --> 14:27.390
服务器该可以怎么可以把这些信息分析出来

14:28.390 --> 14:29.090
那么query呢

14:29.090 --> 14:29.790
就可以写啊

14:29.790 --> 14:31.090
就问号后边的东西

14:31.090 --> 14:33.090
比如说我想获取新闻

14:33.790 --> 14:34.790
耶马斯第一

14:34.790 --> 14:37.690
第一页内面程的是每页选是十条

14:38.890 --> 14:41.090
那么这就表示有两个信息传过来了

14:41.290 --> 14:42.090
传到服务器了

14:42.090 --> 14:43.590
一个是配级为一

14:43.590 --> 14:44.790
一个是内面程为十

14:45.490 --> 14:47.890
这些东西都要跟服务器之间约定的

14:48.190 --> 14:49.790
不是说你想写啥就写啥

14:50.490 --> 14:51.890
要跟服务器之间约定的

14:51.890 --> 14:54.590
比方说我我跑到那个百度里边去

14:55.090 --> 14:55.790
你看吧

14:55.790 --> 14:57.890
我跑到百度里边去三达不六点百度

15:00.380 --> 15:01.080
好比方说啊

15:01.080 --> 15:02.080
我们这里六十

15:03.780 --> 15:04.780
配级为一

15:05.480 --> 15:06.580
内面程为十

15:07.480 --> 15:07.980
看一下

15:08.180 --> 15:09.880
他告诉我我的意味不存在

15:10.380 --> 15:11.080
为啥不存在了

15:11.080 --> 15:12.480
你不是说可以这样子访问吗

15:12.580 --> 15:14.980
这个东西需要跟服务器约定的啊

15:15.280 --> 15:15.980
你发过去了

15:15.980 --> 15:17.980
你把这些信息只是一个制服串而已

15:17.980 --> 15:18.980
他没有什么特别的

15:18.980 --> 15:20.280
他只是一个制服串而已

15:20.380 --> 15:21.380
发生给服务器过后呢

15:21.380 --> 15:22.780
服务器那边要识别

15:22.780 --> 15:24.080
他认不认啊

15:24.080 --> 15:25.080
一会里面就知道了

15:25.080 --> 15:26.480
服务器可以可以判断的

15:26.580 --> 15:27.480
可以分析的

15:27.580 --> 15:28.280
他要认的话

15:28.280 --> 15:29.480
你就他就给你不认的话

15:29.480 --> 15:30.680
就拿到啊

15:31.080 --> 15:32.480
还有还有一个哈尔西啊

15:32.480 --> 15:33.880
哈尔西那我们以前作为

15:34.080 --> 15:35.280
一般是作为毛链接的

15:35.280 --> 15:35.680
对吧

15:35.780 --> 15:36.380
毛链接的

15:36.380 --> 15:36.780
但是呢

15:36.780 --> 15:38.480
我们在服务器端其实也可以获取

15:38.480 --> 15:38.880
只不过呢

15:38.880 --> 15:39.880
很少获取啊

15:39.880 --> 15:41.680
一般来说是在客户端作为毛链接的

15:41.680 --> 15:42.480
所以我们这里

15:42.780 --> 15:43.980
简单说一下就略过了

15:44.680 --> 15:45.180
终点呢

15:45.180 --> 15:45.680
是在这

15:45.880 --> 15:46.480
PASS

15:47.680 --> 15:48.380
quarry啊

15:48.380 --> 15:49.380
终点是这两个

15:50.180 --> 15:51.980
这是通过一个url地址

15:51.980 --> 15:53.380
去访问我们的服务器

15:53.680 --> 15:54.980
好访问服务器的时候呢

15:54.980 --> 15:55.780
刚才不是说了

15:55.880 --> 15:57.380
他会发送这么一些消息吗

15:57.380 --> 15:58.180
请求行

15:58.180 --> 15:58.780
消息头

15:58.780 --> 15:59.480
消息体

15:59.480 --> 16:01.180
那么这个三个东西到底是啥呢

16:01.680 --> 16:04.180
这三个东西其实最终组合起来的话

16:04.180 --> 16:05.980
就是一个完整的制服串

16:06.380 --> 16:07.480
给他看一下这个制服串

16:08.780 --> 16:09.880
就是一个完整的制服串

16:10.180 --> 16:11.780
这就是一个请求消息

16:12.680 --> 16:13.980
请求发送到服务器

16:14.080 --> 16:14.780
还有请求行

16:14.780 --> 16:15.480
请求头

16:15.780 --> 16:16.580
请求体

16:17.280 --> 16:17.980
这就是一个请

16:17.980 --> 16:20.380
这就是一个完整的请求内容格式

16:20.680 --> 16:21.080
啊

16:21.280 --> 16:22.480
那么这个格式里边呢

16:22.480 --> 16:24.080
我们请求行在哪呢

16:24.080 --> 16:25.080
请求行在这

16:26.280 --> 16:27.280
这就是请求行

16:28.780 --> 16:29.680
请求行里边

16:29.680 --> 16:30.780
这个第一个位置呢

16:30.780 --> 16:32.980
叫做请求方法

16:33.880 --> 16:34.780
measure的啊

16:34.780 --> 16:35.780
请求方法

16:35.980 --> 16:37.580
这个地方叫做forpass

16:37.780 --> 16:39.080
叫做完整路径

16:39.180 --> 16:40.180
请求到完整路径

16:40.180 --> 16:41.380
比方说刚才那个url地址

16:41.380 --> 16:42.580
它的完整路径就是这个

16:43.380 --> 16:44.080
啊就这个

16:44.380 --> 16:44.780
是吧

16:44.980 --> 16:45.580
pass呢

16:45.580 --> 16:46.480
pass是这个

16:47.280 --> 16:49.480
啊forpass完整路径的是这个

16:50.480 --> 16:51.080
啊是这个

16:51.080 --> 16:52.780
把这些概念要区分开啊

16:53.680 --> 16:54.480
啊这是

16:54.980 --> 16:55.880
就是forpass

16:55.980 --> 16:57.080
然后这边是协议

16:57.080 --> 16:57.280
对吧

16:57.280 --> 16:58.280
协议好像的版本

16:59.180 --> 16:59.480
好

16:59.480 --> 17:00.080
那么下

17:00.080 --> 17:01.380
除了第一行之外

17:01.380 --> 17:02.680
下面这一坨

17:02.680 --> 17:04.680
你看就是一个东西冒号

17:04.680 --> 17:05.680
然后一个东西

17:05.780 --> 17:06.980
一个东西冒号

17:06.980 --> 17:07.980
然后一坨东西啊

17:07.980 --> 17:09.680
一个东西冒号一坨东西

17:10.180 --> 17:11.380
那么这些东西自然呢

17:11.380 --> 17:12.880
这些东西就是请求头

17:13.180 --> 17:14.180
就是消息头

17:15.080 --> 17:15.880
啊消息头

17:15.980 --> 17:17.580
你可以看到消息头呢

17:17.580 --> 17:19.880
它实际上是有一些兼职队组成的

17:20.880 --> 17:22.480
相当于是属性名属性质

17:22.980 --> 17:23.480
键

17:23.580 --> 17:24.080
纸

17:24.680 --> 17:25.180
键

17:25.880 --> 17:26.380
纸

17:27.180 --> 17:27.580
键

17:27.580 --> 17:28.080
纸

17:28.180 --> 17:30.480
那么这些键纸队有什么用呢

17:30.880 --> 17:31.580
没有啥用

17:32.280 --> 17:34.180
服务器爱用就用不用拿到啊

17:34.180 --> 17:36.680
就是把我一总之的客户端不知到服务器

17:36.680 --> 17:37.680
他到底要什么

17:37.680 --> 17:40.480
反正我把我自己的相关信息给你描述清楚

17:40.780 --> 17:41.080
啊

17:41.380 --> 17:42.080
然后发给你

17:42.180 --> 17:43.080
你爱用就用

17:43.080 --> 17:44.780
我们以后呢会看到一些

17:44.980 --> 17:46.880
比较特别的一些请求头啊

17:47.280 --> 17:48.480
好接下来我们来继续看

17:49.180 --> 17:50.080
消息体呢

17:50.080 --> 17:51.280
消息体就是换一行

17:51.280 --> 17:51.880
起到下面

17:51.880 --> 17:53.480
你看这个整个请求啊

17:53.480 --> 17:55.080
他发动的内容就是一个制服串

17:55.480 --> 17:56.080
就是个制服串

17:56.080 --> 17:57.080
没有什么特别的

17:57.480 --> 17:58.280
消息体呢

17:58.280 --> 17:59.080
一般就在这

17:59.180 --> 18:01.180
但是有可能会没有消息体

18:01.680 --> 18:03.180
啊有可能会没有消息体

18:03.280 --> 18:03.880
说不准

18:04.880 --> 18:05.880
然后我们接下来往下看

18:06.280 --> 18:08.880
那么现在那么我们服务器是不是收到这个请求了

18:10.180 --> 18:10.880
稍等一下

18:13.680 --> 18:15.380
现在我们服务器收到这个请求了

18:15.380 --> 18:17.180
那么接下来就是服务器处理时间了

18:17.480 --> 18:19.280
服务器是不是可以从这个制服串里边

18:19.280 --> 18:20.580
这就是一个完整制服串啊

18:20.580 --> 18:21.480
没有什么特别的

18:21.880 --> 18:23.980
这个从服务器可以从这个制服串里边

18:23.980 --> 18:25.180
分析出一些信息

18:25.180 --> 18:25.780
服务器看

18:25.780 --> 18:27.680
哦原来你是get请求方法

18:28.180 --> 18:29.480
哦原来你是这个玩意

18:30.080 --> 18:31.780
让你这协议是这个东西

18:31.780 --> 18:33.480
你给我传了这么一些信息

18:33.580 --> 18:34.480
没有消息体

18:34.880 --> 18:36.080
那么面对这样的情况

18:36.080 --> 18:36.880
服务器要干嘛呢

18:36.880 --> 18:37.680
随便干嘛

18:38.080 --> 18:39.580
因为服务器是你自己写的

18:40.080 --> 18:41.180
你想干嘛就干嘛

18:41.680 --> 18:43.280
啊比如他说我就做了一些事

18:43.280 --> 18:44.580
然后给了他一个响应

18:44.980 --> 18:46.780
啊那我可能可能会怎么响应呢

18:46.780 --> 18:47.980
可能会这样子响应

18:48.880 --> 18:51.480
响应了他仍然是一个完整的制服串

18:51.680 --> 18:52.780
啊他仍然是一个制服串

18:52.780 --> 18:53.780
没有什么特别的

18:54.580 --> 18:56.980
我们把响应的制服串里边第一行

18:57.580 --> 18:58.780
叫做响应行

19:00.180 --> 19:02.380
啊响应行里边有什么信息呢

19:02.580 --> 19:03.380
有一个版本

19:04.780 --> 19:06.180
然后呢有一个

19:06.580 --> 19:08.680
消息码和一个消息文本啊

19:08.780 --> 19:09.580
这东西是什么呢

19:09.580 --> 19:10.780
表示状态码啊

19:10.780 --> 19:12.180
我们的消息码状态码

19:12.180 --> 19:12.980
就表示我

19:13.380 --> 19:15.580
嗯表示就是毫必说

19:15.580 --> 19:17.480
我给你一篇文章的标题啊

19:17.580 --> 19:18.680
这篇文章到底我就

19:18.680 --> 19:20.580
我给你的东西到底是个啥啊

19:20.580 --> 19:21.780
我是有没有正确处理

19:21.780 --> 19:23.580
我们以后呢会看到一些常见的

19:23.880 --> 19:24.480
响应吧

19:24.880 --> 19:26.180
好那么这里呢接下来

19:26.380 --> 19:28.980
接下来这一部分呢就是响应头

19:29.380 --> 19:30.280
是不是也是剑子队

19:30.380 --> 19:32.080
对吧消息头都是都是剑子队

19:32.380 --> 19:33.480
剑子

19:33.980 --> 19:36.180
剑子尽管你还不知道这些东西啥意识啊

19:36.180 --> 19:36.980
没关系

19:37.180 --> 19:38.880
我们后边呢会讲一些

19:38.880 --> 19:40.180
我们常见的一些

19:40.480 --> 19:41.480
想要消息头

19:41.880 --> 19:42.680
对剑子

19:43.080 --> 19:44.780
然后换一行换一行过后

19:44.780 --> 19:45.780
下面这一部分呢

19:45.980 --> 19:47.380
就是消息体

19:48.080 --> 19:49.280
你看到消息体是一个啥

19:49.280 --> 19:50.080
是一个页面

19:50.380 --> 19:50.880
对吧

19:51.080 --> 19:52.980
我把这个响应结果

19:53.480 --> 19:54.980
发给浏览器之后

19:55.180 --> 19:56.580
响应给浏览器之后

19:56.680 --> 19:58.080
浏览器他就会分析

19:58.080 --> 20:00.180
他会自动分析出这样的结果

20:00.280 --> 20:01.580
他一看哦

20:01.580 --> 20:02.980
原来你给我的是一个

20:03.380 --> 20:04.280
atm页面

20:06.080 --> 20:08.380
制服编码呢是UTF-8的编码

20:09.480 --> 20:11.280
你给我的消息那一种呢

20:11.280 --> 20:12.580
是一个页面的代码

20:12.880 --> 20:14.680
那行了我就把这个玩意呢

20:14.680 --> 20:15.780
渲染成一个页面

20:15.780 --> 20:16.080
于是呢

20:16.080 --> 20:17.680
浏览器就显示出了

20:17.980 --> 20:18.680
新闻页面

20:18.780 --> 20:20.080
一个H1元素

20:20.080 --> 20:20.880
新闻页面

20:22.380 --> 20:23.380
大概理解这个意思吧

20:23.380 --> 20:24.580
我们来总结一下啊

20:24.880 --> 20:26.780
就是说我们浏览器呢

20:26.980 --> 20:28.780
请求服务器是很简单

20:28.780 --> 20:29.780
给他发一个消息

20:29.780 --> 20:31.380
一个很长很长的制服串

20:31.580 --> 20:33.080
这个制服串里边有请求行

20:33.080 --> 20:34.280
消息头消息体

20:34.280 --> 20:34.580
对吧

20:34.580 --> 20:36.180
这个制服串是一个标准格式的

20:36.380 --> 20:37.280
然后服务器

20:37.380 --> 20:38.380
随便怎么处理

20:38.680 --> 20:40.180
不管你处理什么玩意

20:40.180 --> 20:41.580
你给我一个结果就行了

20:41.780 --> 20:42.580
给我一个结果

20:42.580 --> 20:43.680
到了浏览器这边呢

20:43.680 --> 20:44.780
他也可以分析出

20:44.780 --> 20:45.980
响应行是啥

20:45.980 --> 20:46.680
消息头是啥

20:46.680 --> 20:47.480
消息体是啥

20:47.480 --> 20:49.480
然后浏览器会自动进行处理

20:49.880 --> 20:52.880
这就是整个浏览器和服务器的交互模式

20:57.870 --> 20:58.570
哎可以啊

20:58.570 --> 20:59.770
也可以行人扑上

20:59.770 --> 21:00.570
扑上也可以

21:01.170 --> 21:02.470
各个各个客户端去摸拜嘛

21:02.470 --> 21:02.870
对不对

21:03.970 --> 21:04.370
好

21:04.370 --> 21:05.070
那么这里呢

21:05.070 --> 21:06.270
我们是atb协议啊

21:06.270 --> 21:07.370
大致的讲解一下

21:07.470 --> 21:09.070
有这么一个粗略的印象

21:09.070 --> 21:09.470
然后呢

21:09.470 --> 21:11.370
我们后边再学习搭建自己的

21:11.370 --> 21:12.670
微博服务器的时候呢

21:12.770 --> 21:15.370
我们会不断的去认识这个atb协议

21:15.670 --> 21:16.270
好来吧

21:17.070 --> 21:18.870
我们现在我们要写带嘛

21:18.970 --> 21:20.570
来搭建一个微博服务器

21:20.570 --> 21:21.570
什么叫微博服务器呢

21:21.570 --> 21:23.770
微博服务器他就是一个应用程序

21:24.570 --> 21:25.070
有一些朋友呢

21:25.070 --> 21:26.670
把微博服务器当成一台计算机

21:26.670 --> 21:27.470
这个样子的

21:27.770 --> 21:29.970
这样子的看法的是错误的啊

21:29.970 --> 21:31.270
至少是不准确的

21:32.070 --> 21:34.470
他肯定要运行在一个计算机上

21:34.470 --> 21:34.770
但是呢

21:34.770 --> 21:37.170
他本质上就是一个应用程序

21:37.270 --> 21:39.170
所以说如果说我们这句话对不对

21:39.470 --> 21:40.870
你看一下这句话对不对啊

21:41.370 --> 21:43.570
嗯比方说我们说

21:48.230 --> 21:51.030
我们说一台计算机

21:51.930 --> 21:54.030
一台计一台计算机

21:55.630 --> 21:59.030
可以有多个服务器

21:59.230 --> 22:01.330
你就你觉得这句话说的有没有毛病

22:04.420 --> 22:05.920
这句话对不对对不对

22:07.520 --> 22:08.920
说没毛病对不对啊

22:08.920 --> 22:11.320
这句话是对的啊没没问题的

22:11.320 --> 22:13.320
因为服务器就是一个程序啊

22:13.420 --> 22:15.520
所以说一台计算机当然可以运行多个程序啊

22:15.520 --> 22:18.220
他就可以每个程序监听不同的端口就完事了

22:18.420 --> 22:19.820
所以微博服务器他这个程序呢

22:19.820 --> 22:21.620
他必须要有两个基本功能

22:21.720 --> 22:22.620
第一个基本功能

22:22.620 --> 22:24.620
他要能够监听计算机的某个端口

22:24.820 --> 22:27.620
你想一想如果说服务器他不能监听端口的话

22:27.620 --> 22:29.320
那么浏览器他去请求谁呢

22:29.620 --> 22:31.020
他找不到这个程序了对不对

22:31.020 --> 22:34.720
他通过这个端口去找某一台计算机上的某一个程序

22:34.820 --> 22:37.620
找nokehouse本机上的某一个程序

22:38.120 --> 22:39.520
他是不是要去找对不对

22:39.620 --> 22:41.520
所以说呢他必须要直接监听的端口

22:41.920 --> 22:42.920
嗯第二呢

22:43.620 --> 22:44.720
监听到端口过后呢

22:44.820 --> 22:46.820
后边客户端就是浏览器啊

22:47.120 --> 22:48.420
或者是其他什么玩意

22:48.720 --> 22:51.420
他有可能会发送一些请求过来

22:52.320 --> 22:53.320
请求到服务器

22:53.320 --> 22:54.120
那么服务器呢

22:54.120 --> 22:55.820
要能够做出相应的处理

22:55.820 --> 22:57.320
我们把它叫做处理请求

22:57.720 --> 22:58.320
你看啊

22:58.720 --> 23:00.120
我这个请求到了服务器过后

23:00.120 --> 23:01.420
服务器是不是给我一个响应啊

23:01.720 --> 23:02.920
另外一个请求到了服务器过后

23:02.920 --> 23:04.520
服务器可能给别的响应

23:05.220 --> 23:05.620
对吧

23:05.620 --> 23:07.220
所以说服务器要进行一个处理

23:07.320 --> 23:07.920
因此呢

23:07.920 --> 23:09.520
他要有至少有两个基本功能

23:09.520 --> 23:10.820
一个是监听端口

23:10.820 --> 23:12.220
一个是处理请求

23:13.420 --> 23:15.320
好那么接下来我们继续看啊

23:16.720 --> 23:18.220
我们要搭建个为了服务器

23:18.220 --> 23:19.920
该怎么来用什么样的技术呢

23:19.920 --> 23:21.120
其实很多技术都可以

23:21.720 --> 23:23.420
像什么java csharp php

23:23.420 --> 23:25.420
python c jj

23:25.420 --> 23:26.720
这些不同的语言呢

23:26.720 --> 23:28.620
他都可以使用不同的技术

23:28.620 --> 23:30.720
去搭建一个web服务器啊

23:30.720 --> 23:32.420
只要是运行在后端都可以

23:33.520 --> 23:35.020
那么在low的环境中呢

23:35.020 --> 23:37.320
我们搭建web服务器的方式有两种

23:37.420 --> 23:39.320
一种呢是使用内置模块

23:39.720 --> 23:41.320
叫net或者adp

23:41.320 --> 23:42.320
我们没讲过的啊

23:42.320 --> 23:43.620
因为这两个内这两个模块呢

23:43.620 --> 23:44.620
就是来搭服务器的

23:44.820 --> 23:46.620
就是来搭服务器的啊

23:47.220 --> 23:48.420
主要是大家搭服务器啊

23:48.420 --> 23:49.520
还有一些别的用处

23:49.620 --> 23:51.320
那么可以用这两个模内置模块

23:51.320 --> 23:53.320
就是你不需要安装任何东西

23:53.420 --> 23:55.420
就可以用它来搭建一个服务器啊

23:55.420 --> 23:56.520
我这就不讲了啊

23:56.520 --> 23:58.220
在咱们后期的low的jask

23:58.220 --> 23:59.020
我给他讲了

23:59.020 --> 24:01.620
用内置模块怎么去搭一个服务器啊

24:01.620 --> 24:03.020
要麻烦很多很多啊

24:03.820 --> 24:05.520
我们这边的就简单一点啊

24:05.520 --> 24:07.320
在真实的开发环境中了

24:07.320 --> 24:08.720
就是你们以后到公司里边

24:08.720 --> 24:10.320
肯定不会用自己手搭的

24:10.420 --> 24:12.720
一般会使用一些成熟的第三方库

24:12.720 --> 24:14.120
别人给你写好了

24:14.420 --> 24:16.220
别人的库里边为什么可以一搭服务器

24:16.220 --> 24:17.420
就是因为他里边

24:17.520 --> 24:19.720
别人写的代码里边给你用到了这两个库

24:19.720 --> 24:20.820
给你封装好了

24:20.920 --> 24:22.420
你说你直接去用就行了

24:22.620 --> 24:24.320
如果我们一般搭服务器的话

24:24.320 --> 24:25.820
我们可以使用一些比较成熟的

24:25.820 --> 24:26.920
一些第三方库啊

24:26.920 --> 24:28.420
就是express

24:28.420 --> 24:29.120
就是我们这两

24:29.120 --> 24:30.020
这几天要讲的啊

24:30.020 --> 24:32.520
今天明天后天这三天都在讲express

24:33.120 --> 24:34.720
换句话说这三天都是在讲

24:34.720 --> 24:36.520
express里边的att协议

24:37.620 --> 24:39.220
然后的kow2也可以啊

24:39.220 --> 24:40.520
kow2这个也是

24:40.520 --> 24:44.220
其实就是express里边的创始团队里边

24:44.220 --> 24:45.920
一小撮人跑出来了

24:45.920 --> 24:48.220
跑出来过后做了kow2啊

24:48.620 --> 24:49.620
还有x.js

24:49.620 --> 24:52.020
x.js这两个就比较大了

24:52.020 --> 24:54.620
就大型的就中型的框架了啊

24:54.820 --> 24:56.520
前面两个呢是比较轻量型的

24:56.520 --> 24:58.520
我们现在用express

24:59.320 --> 25:00.220
好那么这里呢

25:00.520 --> 25:02.620
呃其实你只要会了一个

25:03.620 --> 25:07.220
你express会了kow2是非常非常好学的啊

25:07.520 --> 25:08.420
咱们后边都有讲

25:09.020 --> 25:11.120
好这是使用第三方库啊

25:11.520 --> 25:13.120
呃我们用express

25:13.320 --> 25:14.320
好接下来就是安装

25:15.220 --> 25:16.120
安装然后这里呢

25:16.120 --> 25:17.320
我建议大家安装

25:17.720 --> 25:18.520
三个东西

25:18.720 --> 25:20.020
一个是express本身

25:20.420 --> 25:21.620
我们首先把安装了啊

25:23.860 --> 25:26.760
npm iexpress安装一个express

25:27.160 --> 25:29.260
呃首先是他本身要安装

25:29.560 --> 25:32.060
呃然后呢在顺便安装一个loadable

25:33.160 --> 25:35.760
这个东西呢跟搭服务器没有一毛钱关系

25:36.060 --> 25:38.460
主要是为了为了让我们开发方便

25:38.860 --> 25:41.060
啊他跟运行起来没有任何关系

25:41.060 --> 25:42.360
所以说你看安装他的时候

25:42.360 --> 25:45.160
是加了一个横杠地开发依赖

25:45.560 --> 25:47.260
因为他跟他只是

25:47.360 --> 25:48.960
会影响我们开发舒服

25:49.260 --> 25:50.660
跟我们代码没有任何关系

25:50.860 --> 25:53.060
啊所以说呢我们这里安装一个loadable啊

25:53.160 --> 25:54.260
这个loadable有什么用呢

25:54.260 --> 25:55.660
我给大家看一下吧安装好了

25:55.660 --> 25:58.260
看看一下啊express已经安装好了啊

25:58.360 --> 25:59.860
然后再安装一个这个

26:00.660 --> 26:01.160
loadable

26:03.300 --> 26:04.400
啊稍微等一下啊

26:06.500 --> 26:08.800
其实我们今天晚上写的代码呢

26:09.800 --> 26:11.300
起作用的也就是express

26:12.500 --> 26:14.900
啊这个东西是为了让我们开发方便一点啊

26:14.900 --> 26:15.400
好了

26:15.800 --> 26:16.900
那我们现在看一下

26:17.200 --> 26:19.300
他有什么样的方便呢loadable

26:20.300 --> 26:23.400
比方说我们现在这样子写输出一个123

26:23.900 --> 26:25.700
啊然后呢我们在这里

26:25.800 --> 26:27.400
我们安装好了loadable之后呢

26:27.400 --> 26:28.700
我们可以这样子来运行

26:29.000 --> 26:30.900
怎么运行的npx

26:31.800 --> 26:33.700
loadable index

26:33.900 --> 26:35.300
使用一个特殊的命令啊

26:35.400 --> 26:37.400
npx loadable index

26:37.500 --> 26:40.500
表示的是使用loadable这个工具

26:40.700 --> 26:42.600
来启动index了

26:42.600 --> 26:43.600
介绍这个文件

26:44.100 --> 26:45.600
好我们来回车看一下

26:45.900 --> 26:47.000
是不是输出了123

26:47.300 --> 26:47.800
对不对

26:48.000 --> 26:49.800
而且你看程序是不是没有结束

26:49.800 --> 26:50.800
他这里给你显示

26:51.200 --> 26:52.100
等待

26:53.300 --> 26:54.500
内容变化

26:54.700 --> 26:55.600
就监测

26:55.600 --> 26:57.800
就监测我们的工程里边的

26:58.200 --> 26:59.000
内容变化

26:59.400 --> 27:02.000
内容变化过后呢会重新启动

27:02.300 --> 27:03.100
什么意思呢

27:03.100 --> 27:04.800
我们比方说把这里改成abc

27:05.400 --> 27:06.400
看着我们一保存

27:08.000 --> 27:09.500
是不是这里重新输出abc了

27:09.500 --> 27:09.900
对吧

27:10.000 --> 27:10.600
他就

27:10.800 --> 27:11.800
为什么说方便呢

27:11.800 --> 27:14.500
方便就在于我们不用去重新去运行了啊

27:14.600 --> 27:15.100
我们

27:15.300 --> 27:17.100
之前其实我们之前最开始的时候

27:17.100 --> 27:18.000
就应该用这个玩意

27:18.600 --> 27:20.300
就不用去重新运行了

27:20.300 --> 27:21.500
他会自动帮我们重启

27:21.800 --> 27:22.100
原来也是吧

27:22.100 --> 27:23.400
他只是起这么一个作用

27:23.800 --> 27:25.200
他是一个工具性质的

27:25.200 --> 27:26.100
当然你要停止的话

27:26.100 --> 27:27.800
就用ctr-c来进行停止

27:29.200 --> 27:31.000
两次ctr-c来进行停止

27:31.000 --> 27:32.400
这是loadable他的作用

27:32.800 --> 27:33.200
好另外呢

27:33.200 --> 27:34.500
我再顺便说一点啊

27:34.600 --> 27:36.300
你也可以把这个代码呢

27:36.600 --> 27:37.400
把这个代码呢

27:37.400 --> 27:38.700
配进行配置

27:39.000 --> 27:39.900
配置到哪呢

27:40.900 --> 27:41.600
配置到这

27:42.700 --> 27:44.200
我们不是有个这个这个文件吗

27:44.200 --> 27:45.200
还给点节省

27:45.300 --> 27:47.200
这里有个脚笨script啊

27:47.200 --> 27:48.100
这有个脚笨

27:48.300 --> 27:48.900
脚笨里边呢

27:48.900 --> 27:49.700
我们随便写个名字

27:49.700 --> 27:50.900
比方说给他写个start

27:51.700 --> 27:52.300
写个名字

27:52.800 --> 27:53.600
好那么这边呢

27:53.600 --> 27:55.000
我就是脚笨内容了

27:55.000 --> 27:56.100
给他写上啊

27:56.100 --> 27:56.800
一个nps

27:56.800 --> 27:59.400
在这里其实可以不可以省略nps

27:59.400 --> 28:00.400
在这里可以省略的

28:00.400 --> 28:02.600
我们直接写上一个loadable index

28:03.000 --> 28:03.800
好保存

28:04.000 --> 28:05.200
那么这样子写的过后呢

28:05.200 --> 28:07.200
我们之后就可以使用这个名字

28:07.500 --> 28:09.200
来启动这个命令了

28:09.800 --> 28:11.900
就相当于是给他定义了一个别名啊

28:11.900 --> 28:13.600
就给这个命令定义了个别名

28:13.700 --> 28:14.600
那么怎么来启动呢

28:14.600 --> 28:15.800
我们可以使用这种方式

28:17.000 --> 28:18.100
这也是你们以后呢

28:18.100 --> 28:19.000
经常用到的啊

28:19.200 --> 28:20.600
npm start

28:21.600 --> 28:22.300
啊一回事

28:23.500 --> 28:24.700
你看是不是输出abc

28:24.700 --> 28:25.000
对吧

28:25.000 --> 28:26.900
就像你这样子写npm start

28:26.900 --> 28:28.100
相当于是运行到什么呢

28:28.100 --> 28:29.000
运行到这个命令

28:29.500 --> 28:31.200
那么这个命令是不是就是运行到这么

28:31.700 --> 28:32.100
对吧

28:32.900 --> 28:33.600
能理解吗

28:34.600 --> 28:35.200
能理解啊

28:37.700 --> 28:39.700
为什么不用express generator

28:40.000 --> 28:41.200
先学基本的

28:41.500 --> 28:42.300
学基本的

28:42.400 --> 28:43.600
那些工具性质的

28:43.600 --> 28:44.700
你不要去高看它

28:45.500 --> 28:46.300
很多初学生呢

28:46.300 --> 28:49.100
觉得用什么样的工具啊

28:49.100 --> 28:49.800
好像很重要

28:49.800 --> 28:50.600
其实不是的

28:50.700 --> 28:52.700
理解底层原理才是最重要的

28:53.600 --> 28:54.800
这里是可以不用写的

28:54.800 --> 28:55.400
npx

28:55.900 --> 28:56.700
可以不用写的

28:58.200 --> 28:58.900
那那个玩意啊

28:58.900 --> 29:00.200
这个generator无非就是个解

29:00.200 --> 29:01.300
无非就是一个

29:01.900 --> 29:03.900
一个非常非常轻量的搅手架啊

29:03.900 --> 29:05.100
邦利西写了一些

29:05.100 --> 29:06.200
邦利西写了一些依赖

29:06.200 --> 29:07.900
邦利西去达了一些工程

29:08.200 --> 29:09.000
其他也没啥了

29:09.900 --> 29:10.500
那么这里呢

29:10.500 --> 29:12.600
我们就把这个把这些安装好啊

29:12.700 --> 29:13.700
安装好了之后呢

29:13.700 --> 29:15.100
还有一个东西叫做pose面

29:16.000 --> 29:16.500
这个玩意呢

29:16.500 --> 29:18.400
你们可以进这个地址去下载

29:19.300 --> 29:20.300
给大家发过来啊

29:23.560 --> 29:25.160
啊在这里去下载一下啊

29:26.960 --> 29:27.660
啊

29:27.860 --> 29:28.760
这个叫pose面

29:28.760 --> 29:29.560
有一些人听说过啊

29:29.560 --> 29:32.460
他主要是用来模拟模拟客户端

29:32.460 --> 29:33.660
来发送一个请求的啊

29:33.660 --> 29:34.760
就点这个download的

29:35.360 --> 29:36.460
哎这里啊

29:36.860 --> 29:37.960
都停过了呀这是

29:39.560 --> 29:41.560
download for windows

29:41.760 --> 29:43.860
点这个啊点X64点这个

29:44.460 --> 29:46.260
你们电脑应该都是64位的

29:46.560 --> 29:47.760
点这个玩意进一下载

29:48.760 --> 29:50.460
啊在这里进下载就完事了啊

29:51.060 --> 29:52.460
下载过后他安装很简单

29:52.460 --> 29:53.960
就下一步下一步下一步就完事了

29:54.260 --> 29:55.760
好安装好了之后呢

29:55.760 --> 29:56.560
你可以看到

29:57.160 --> 29:58.160
这里有个pose面

29:58.160 --> 29:59.460
看没点这个

30:03.380 --> 30:04.480
好稍等一下啊

30:06.460 --> 30:07.460
好等他打开

30:10.290 --> 30:11.890
嗯打开了之后呢

30:11.890 --> 30:12.790
我们可以看到啊

30:12.790 --> 30:14.490
在这里呢可以点击个加号

30:14.790 --> 30:15.690
点击个加号

30:15.890 --> 30:18.190
那么我们这里在这里可以模拟一个请求

30:18.290 --> 30:19.390
比方说我们在这里呢

30:19.390 --> 30:20.690
这里选择请求方法

30:20.690 --> 30:21.690
请求方法用gats

30:21.690 --> 30:23.490
比方说我们这里的请求谁呢

30:23.690 --> 30:26.190
我们可以去请求这个atdp

30:26.890 --> 30:27.190
呃

30:27.690 --> 30:29.990
度1点客点QQ折抗

30:29.990 --> 30:31.590
就是里面人现在听客那个

30:31.790 --> 30:32.390
同性客堂

30:32.390 --> 30:33.690
度1到同性客堂首页

30:33.690 --> 30:35.690
好我们这里点击圣的发送一个请求

30:37.290 --> 30:38.890
你看是不是给我了一个响应

30:38.890 --> 30:39.690
那我们来看一下吧

30:39.690 --> 30:41.490
我们看一下整个请求的交互过程

30:41.790 --> 30:43.390
我们这里呢点击这个地方

30:43.390 --> 30:45.690
呃扣的点这个地方扣的

30:45.790 --> 30:46.590
你可以看到

30:47.290 --> 30:48.190
请求的时候呢

30:48.190 --> 30:49.390
我给他发送了什么信息呢

30:49.390 --> 30:51.190
发送的信息非常非常简单

30:51.590 --> 30:52.490
就是一个

30:52.990 --> 30:54.790
这个我不知道怎么放大呀

30:54.790 --> 30:55.390
这玩意

30:56.490 --> 30:58.190
啊就是能看能看得清楚吗

30:58.190 --> 30:58.790
这玩意

30:58.790 --> 30:59.490
能看得清楚吗

30:59.490 --> 31:00.990
就是我们这是请求行

31:00.990 --> 31:01.390
对吧

31:01.390 --> 31:02.290
这是请求头

31:02.290 --> 31:03.090
其他啥都没了

31:03.290 --> 31:04.090
啥都没了

31:04.090 --> 31:04.890
然后后边呢

31:04.890 --> 31:05.590
就是请求体

31:05.590 --> 31:06.990
请求体是空的没东西

31:07.290 --> 31:08.590
啊就是给他发送的请求

31:08.590 --> 31:09.790
说请求就是一个字幕算

31:09.790 --> 31:10.590
是不是很简单

31:10.990 --> 31:12.690
然后他给我的响应呢

31:13.390 --> 31:14.390
响应哪里看

31:14.590 --> 31:15.690
响应的结果里边

31:15.690 --> 31:18.090
这是响应的消息码200ok

31:18.390 --> 31:19.490
响应的消息码

31:19.890 --> 31:21.290
然后呢响应的头呢

31:21.290 --> 31:22.590
在这啊在黑道里边

31:22.590 --> 31:24.990
你看是不是建制队t value

31:25.290 --> 31:26.090
说建制队

31:26.090 --> 31:27.690
对吧跟我们刚才说的是不一样的

31:28.790 --> 31:30.490
跟我们刚才说的啊建制队

31:30.490 --> 31:30.790
对吧

31:30.790 --> 31:31.590
他给你分析出来了

31:31.590 --> 31:33.690
用一种用一种更加好看的格式

31:33.690 --> 31:34.790
给你看到了啊

31:34.790 --> 31:36.690
就是响应的结果

31:36.990 --> 31:38.690
然后呢这里的body呢

31:38.690 --> 31:40.490
body就是响应题

31:40.490 --> 31:41.290
响应题是啥

31:41.290 --> 31:42.090
响应题就是这

31:42.390 --> 31:42.890
对吧

31:42.890 --> 31:43.690
就是消息题

31:44.190 --> 31:45.690
就除了想就是响应头

31:45.690 --> 31:46.490
下边的东西

31:46.490 --> 31:47.390
他给你放到照了

31:47.890 --> 31:48.590
你可以看到

31:48.590 --> 31:49.990
当我们去请求这个地址的时候

31:49.990 --> 31:50.890
他给我们一个啥

31:50.990 --> 31:51.490
消息题

31:51.490 --> 31:52.790
是不是就是一个页面

31:52.790 --> 31:53.290
对吧

31:53.390 --> 31:54.090
包含js

31:54.090 --> 31:54.790
包含css

31:54.790 --> 31:56.190
包含这么远处的一个页面

31:56.190 --> 31:57.090
很多很多内容

31:57.090 --> 31:58.290
都是都是消息题

31:58.290 --> 31:58.590
对吧

31:58.590 --> 32:00.190
我们可以通过这个posterman啊

32:00.290 --> 32:02.290
来去测试一些请求

32:02.990 --> 32:04.190
啊你们可以安装啊

32:04.190 --> 32:05.190
一般来说的话

32:05.190 --> 32:06.990
我们来开发漏的程序的时候呢

32:07.190 --> 32:07.590
嗯

32:08.090 --> 32:09.290
真正的情况下啊

32:09.290 --> 32:11.190
不太会用浏览继续测试

32:11.190 --> 32:12.790
一般就会用一些测试工具

32:12.790 --> 32:13.790
比较像posterman

32:13.790 --> 32:14.790
这种方式来去测试

32:14.790 --> 32:16.190
我们的服务器到底真不正常

32:16.290 --> 32:17.790
当然posterman测试出来没问题的话

32:17.790 --> 32:18.890
浏览器一定没问题

32:19.290 --> 32:19.490
啊

32:19.490 --> 32:20.690
就是这种方式啊

32:23.420 --> 32:24.020
下载很慢啊

32:24.020 --> 32:24.620
下载很慢啊

32:24.620 --> 32:25.520
你可以复制一下地址

32:25.520 --> 32:26.720
用那个讯来下载啊

32:30.520 --> 32:32.620
因为为什么没有直接给你发文件呢

32:33.420 --> 32:34.220
你们去

32:34.420 --> 32:35.520
你们我们前端

32:35.520 --> 32:36.920
实际上有很多很多地方

32:36.920 --> 32:39.220
需要去官方网站去下载啊

32:39.220 --> 32:40.620
而且进入官方网站下载呢

32:40.620 --> 32:41.920
是下载的是最新版本

32:42.320 --> 32:43.220
是比较合适的

32:43.220 --> 32:45.820
就是要学会学会去下载安装

32:45.820 --> 32:46.720
就安装很简单的

32:46.720 --> 32:48.120
就是基本上都是下一步下一步

32:48.420 --> 32:49.220
完成就完事

32:49.820 --> 32:50.020
好

32:50.020 --> 32:51.620
那么现在我们把这些工具准备好啊

32:51.620 --> 32:52.120
再说一次

32:52.120 --> 32:53.320
我们现在目前准备了啥

32:53.420 --> 32:54.220
一个是express

32:54.220 --> 32:55.520
是我们来开发服务器的

32:55.620 --> 32:56.620
开发微博服务器的

32:56.620 --> 32:58.720
这个玩意是为了方便我们写代码的

32:59.320 --> 33:00.220
我们代码一改动

33:00.220 --> 33:01.720
它就会自动重启

33:02.320 --> 33:02.720
好

33:02.820 --> 33:03.420
这个玩意呢

33:03.420 --> 33:05.620
是帮助我们写号服务器过后

33:05.620 --> 33:06.720
我们帮助我们来测试

33:06.720 --> 33:08.420
我们的服务器功能是不是正常的

33:08.620 --> 33:08.820
好

33:08.820 --> 33:10.220
接下来我们开始来写代码

33:12.030 --> 33:13.130
我把代码复制过来

33:15.710 --> 33:16.910
为了几实现啊

33:18.210 --> 33:19.310
来看一下一个代码

33:19.410 --> 33:20.510
代码非常简单

33:20.910 --> 33:23.210
我们现在不是安装那个express吧

33:23.310 --> 33:25.310
通过它就可以创建一个服务器

33:25.310 --> 33:26.110
首先导入它

33:26.110 --> 33:27.010
导入它过后呢

33:27.010 --> 33:27.910
它是一个函数

33:28.710 --> 33:30.110
通过调用这个函数

33:30.110 --> 33:31.910
它就创建了一个微博服务器

33:32.910 --> 33:34.310
那么你可以把这个服务器呢

33:34.310 --> 33:35.810
保存到一个变量里边

33:36.110 --> 33:38.310
我们用一个app变量保存一下

33:38.810 --> 33:39.410
保存过后呢

33:39.410 --> 33:41.310
服务器不是要监听端口吗

33:41.310 --> 33:41.910
对不对

33:42.010 --> 33:44.410
那么我们就可以调到它的方法叫lesson

33:44.510 --> 33:46.110
lesson就是监听的意思

33:46.210 --> 33:47.910
监听9527端口

33:48.410 --> 33:50.210
第二个参数呢是一个回调函数

33:50.410 --> 33:53.510
就表示端口监听完成之后

33:53.810 --> 33:54.810
它要运行的

33:55.410 --> 33:55.910
函数

33:56.410 --> 33:57.210
那么这个函数里边

33:57.210 --> 33:58.410
我们就输出了一个结果

33:58.910 --> 34:00.010
就打印一个结果

34:00.110 --> 34:01.410
那么目前我们来运行一下

34:03.220 --> 34:04.120
npm start

34:06.290 --> 34:07.590
你看是不是输出了这句话

34:07.690 --> 34:10.590
serverlesson 9527

34:11.690 --> 34:12.290
那么现在呢

34:12.290 --> 34:13.890
我们现在打到一个什么样的效果呢

34:13.890 --> 34:15.190
现在打到的效果就这样子

34:15.690 --> 34:18.690
就这我们服务器已经监听了9527端口

34:18.690 --> 34:19.690
是不是非常简单

34:19.790 --> 34:21.590
对吧通过express的监听端口非常简单

34:22.190 --> 34:22.790
好 继续

34:24.290 --> 34:25.790
好 接下来就是第二个部分

34:26.090 --> 34:27.590
web服务器的最重要的功能

34:27.590 --> 34:29.290
就是要能够处理请求

34:29.490 --> 34:31.990
那么在express里边怎么来处理请求呢

34:32.190 --> 34:34.090
它是通过这样的配置来完成的

34:34.790 --> 34:35.290
你看

34:36.290 --> 34:38.090
通过它里边的一些方法

34:38.590 --> 34:40.390
来进行请求配置

34:40.990 --> 34:43.490
就是把某一些情况下的东西

34:43.590 --> 34:45.790
交给某一个函数去处理

34:46.590 --> 34:49.390
处理请求实际上就是在服务器本质而言

34:49.490 --> 34:52.290
就是在服务器端运行一个函数

34:52.690 --> 34:53.890
你看一下这句话什么意思

34:54.390 --> 34:56.490
当请求的方法为get的时候

34:56.490 --> 34:57.590
为什么是get的时候

34:57.590 --> 34:59.090
因为这里我调的是get的方法

35:00.290 --> 35:01.690
当客户端请求的时候

35:01.690 --> 35:03.490
发过来的方请求方法是get的

35:03.890 --> 35:04.390
就是这

35:05.390 --> 35:06.990
我们请求的时候不是一个请求方法吗

35:06.990 --> 35:08.290
这是请求的消息格式

35:08.590 --> 35:10.090
当请求方法是get的时候呢

35:10.090 --> 35:11.390
它会自动匹配到

35:11.690 --> 35:12.290
那这里

35:12.390 --> 35:13.890
并且还有一个要求

35:14.190 --> 35:15.490
请求的pass

35:15.790 --> 35:18.590
就是请求的路径是这个斜槓6

35:18.690 --> 35:19.690
那么这个时候呢

35:19.690 --> 35:21.290
它就会运行这个函数

35:21.990 --> 35:22.590
没了意思吧

35:22.590 --> 35:22.790
好

35:22.790 --> 35:23.590
咱们把它复制一下

35:23.590 --> 35:24.190
拿过来

35:24.690 --> 35:25.290
那么这个函数

35:25.290 --> 35:26.690
这种邪法写到哪呢

35:26.690 --> 35:27.290
写到这也可以

35:27.290 --> 35:27.990
随便写到哪

35:28.790 --> 35:30.890
你让它一开始运行一次就行了

35:30.890 --> 35:32.090
因为它只是一个配置

35:32.490 --> 35:33.590
它只是一个配置而已

35:33.890 --> 35:35.490
这里我们把表说写到这

35:35.690 --> 35:36.890
我们通常习惯上

35:36.890 --> 35:37.490
写到这

35:38.590 --> 35:39.390
那么我这里

35:40.090 --> 35:40.990
根据我刚才讲的

35:40.990 --> 35:41.890
大家想一个问题

35:42.490 --> 35:43.690
我这里输出一个abc

35:43.990 --> 35:45.490
我一开始运行的时候

35:45.490 --> 35:46.790
会不会输出这个abc

35:49.340 --> 35:49.940
我停止

35:51.540 --> 35:53.540
我一开始运行的时候

35:53.540 --> 35:54.840
会不会输出这个abc

35:57.400 --> 35:57.900
会不会

35:58.400 --> 35:59.100
所以不会

35:59.300 --> 35:59.500
对吧

35:59.500 --> 35:59.900
不会

35:59.900 --> 36:01.200
为什么它什么时候输出

36:01.200 --> 36:03.500
它一定是要有个请求到服务器

36:04.400 --> 36:05.900
并且是get请求

36:06.300 --> 36:07.300
并且是

36:08.000 --> 36:08.800
请求的路径

36:08.800 --> 36:10.200
并且是斜槓6

36:10.300 --> 36:11.800
这个时候才会输出abc

36:12.000 --> 36:12.400
啊

36:13.200 --> 36:13.300
好

36:13.300 --> 36:15.200
那么我们这里比方说写上请求

36:15.400 --> 36:16.200
请求了

36:17.000 --> 36:17.500
啊

36:17.700 --> 36:18.400
斜槓6

36:18.600 --> 36:19.500
好保存啊

36:19.500 --> 36:21.100
现在我们把服务器运行一下

36:21.300 --> 36:21.900
运行起来

36:22.700 --> 36:23.700
好接下来我们来看一下

36:26.180 --> 36:27.280
啊我们到哪里去看呢

36:27.280 --> 36:29.580
我们可以首先用postman来告试一下啊

36:29.580 --> 36:30.580
postman来去试一下

36:30.580 --> 36:31.280
我们请求谁

36:31.480 --> 36:34.080
我们比方说用post请求

36:34.280 --> 36:34.980
请求谁呢

36:35.080 --> 36:36.580
请求localhost

36:37.780 --> 36:39.080
9527

36:39.480 --> 36:39.780
对吧

36:39.780 --> 36:41.480
是不是对我们服务器的端口

36:41.480 --> 36:43.180
我们服务器的监听9527端口

36:43.180 --> 36:44.380
那么现在去请求它

36:44.680 --> 36:45.180
然后呢

36:45.180 --> 36:46.780
如果说我请求的这个地址

36:47.980 --> 36:49.080
能不能收到结果呢

36:49.380 --> 36:49.880
send

36:50.180 --> 36:50.980
什么拿到了结果

36:50.980 --> 36:52.380
我们看一下我们控制台输出

36:52.380 --> 36:53.280
是不是啥都没输出

36:53.680 --> 36:55.480
说明啥说明这个函数没有运行

36:55.680 --> 36:55.880
对吧

36:55.880 --> 36:56.980
这个函数没有运行

36:57.180 --> 36:58.280
好我们继续请求

36:58.380 --> 36:59.880
比方那么去请求这个地址

37:00.280 --> 37:00.980
nose

37:01.480 --> 37:02.580
我们点击send

37:03.680 --> 37:04.580
好点击send

37:04.980 --> 37:06.180
然后呢我们看一下这边

37:08.780 --> 37:10.080
localhost

37:10.080 --> 37:11.180
好是不是还是没有

37:11.180 --> 37:11.680
对不对

37:11.680 --> 37:12.480
还是没有

37:12.480 --> 37:13.380
为什么还是没有呢

37:13.380 --> 37:14.880
因为请求方法我是post

37:14.980 --> 37:15.280
对吧

37:15.280 --> 37:17.680
说只要你请求方法不匹配

37:17.880 --> 37:19.680
请求的路径不匹配

37:19.680 --> 37:21.280
那么它都不会运行这个函数

37:21.280 --> 37:23.380
只有这两个匹配了过后才会运行

37:23.380 --> 37:25.180
比方现在我们换成介绍方法来请求

37:25.580 --> 37:26.280
点击send

37:27.280 --> 37:28.480
你看是不是输出了

37:29.080 --> 37:30.180
是不是函数运行了

37:30.480 --> 37:30.680
对吧

37:30.680 --> 37:31.680
就这么简单

37:31.880 --> 37:32.680
就这么简单

37:33.280 --> 37:35.280
所以说我们这里的就是一个匹配的

37:35.280 --> 37:36.180
匹配的关系

37:36.180 --> 37:38.080
我们再看一下还有哪些匹配方式

37:38.480 --> 37:39.680
比方说还有这种方式

37:39.680 --> 37:41.280
比方说我们这里写post方法

37:41.280 --> 37:42.280
就表示什么意思呢

37:42.280 --> 37:43.080
我们把这个加上

37:46.370 --> 37:47.270
好我们这里的

37:47.470 --> 37:50.070
就是说当我们用post的请求

37:50.670 --> 37:51.970
请求了什么呢

37:51.970 --> 37:52.570
老品

37:52.570 --> 37:54.470
那么这个时候它就会运行这个方法

37:54.470 --> 37:54.870
对吧

37:54.870 --> 37:55.670
就是你在这里

37:55.670 --> 37:58.670
实际上这里就是对请求的处理的进行配置

37:59.470 --> 38:00.970
这个东西叫做处理函数

38:01.270 --> 38:02.270
叫做处理函数

38:02.270 --> 38:03.570
这也是处理函数

38:03.870 --> 38:04.170
好

38:04.170 --> 38:04.970
今天我们再看

38:05.170 --> 38:06.970
比方说我们这里用post的请求

38:06.970 --> 38:07.870
就请求什么呢

38:08.070 --> 38:08.570
老品

38:09.570 --> 38:10.270
这里send

38:11.270 --> 38:12.870
你看这里是不是输出了

38:12.870 --> 38:13.170
对吧

38:13.170 --> 38:13.870
post请求

38:13.870 --> 38:14.570
解放老品

38:14.970 --> 38:15.770
就这么简单

38:17.170 --> 38:18.070
还有一种情况

38:18.070 --> 38:20.170
还有一种情况就是动态的

38:20.870 --> 38:23.270
我们这个东西叫做动态的路径

38:23.270 --> 38:24.270
路径是动态的

38:24.270 --> 38:25.270
不是固定的

38:25.270 --> 38:26.670
像前面的是不是固定的

38:26.770 --> 38:27.270
对不对

38:27.970 --> 38:28.970
但是我再说一下

38:28.970 --> 38:30.070
前面虽然说是固定的

38:30.070 --> 38:30.870
但是这种情况

38:30.870 --> 38:32.470
它仍然是认为匹配到了

38:32.770 --> 38:33.470
再说一下

38:33.770 --> 38:34.670
比方说像这

38:35.770 --> 38:37.070
现在是这个样子

38:37.270 --> 38:38.870
比方说我们在这里加个问号

38:39.270 --> 38:40.570
然后A等于1

38:40.570 --> 38:41.470
B等于2

38:41.470 --> 38:42.370
C等于3

38:42.470 --> 38:43.270
这个玩意是啥

38:43.870 --> 38:44.670
刚才我们说的

38:44.670 --> 38:45.770
刚才我们解释了这一部分

38:45.770 --> 38:47.070
问号后边这一部分是啥

38:49.530 --> 38:50.930
问号后边这一部分叫啥

38:50.930 --> 38:51.430
叫啥

38:51.430 --> 38:52.230
叫什么概念

38:52.230 --> 38:52.630
对吧

38:52.630 --> 38:53.630
这不叫query

38:53.930 --> 38:54.230
对不对

38:54.230 --> 38:55.030
这不叫query

38:55.830 --> 38:56.630
我们刚才说的

38:56.630 --> 38:56.830
好

38:56.830 --> 38:57.830
那么这个query

38:58.430 --> 39:01.330
它不会影响到pass

39:01.530 --> 39:02.130
说到这个地方

39:02.130 --> 39:04.130
它匹配的时候一定是匹配的pass

39:04.430 --> 39:05.130
没啥意思吧

39:05.330 --> 39:06.330
说那么这个地方

39:06.330 --> 39:07.230
我们请求过去

39:07.330 --> 39:08.630
会不会运行这个方法呢

39:09.430 --> 39:10.430
会不会运会了

39:12.300 --> 39:13.900
会不会运会不会运行这个方法

39:14.100 --> 39:15.000
它匹配的是什么

39:15.000 --> 39:16.000
匹配的是pass

39:17.900 --> 39:18.400
会不会

39:18.600 --> 39:19.700
是不是会对不对

39:19.800 --> 39:20.400
会好

39:20.400 --> 39:21.100
咱们来运行

39:21.300 --> 39:21.800
发送

39:22.000 --> 39:22.800
发送请求看一下

39:22.800 --> 39:23.400
这里是不是运

39:23.400 --> 39:24.400
是不是输出了

39:24.700 --> 39:25.100
对不对

39:25.100 --> 39:26.400
我们再来请求一次

39:27.100 --> 39:27.900
再发送

39:28.300 --> 39:29.000
是不是输出了

39:29.400 --> 39:29.700
对吧

39:29.700 --> 39:30.800
是不是还是会运行这个方法

39:30.800 --> 39:32.600
所以它匹配的时候跟query无关

39:32.600 --> 39:33.600
它只是匹配什么

39:33.600 --> 39:34.400
匹配pass

39:34.400 --> 39:35.600
pass是不是这一部分

39:35.900 --> 39:36.300
对吧

39:36.500 --> 39:37.200
就匹配这部分

39:37.200 --> 39:37.800
太小了

39:37.800 --> 39:38.300
你们看

39:38.300 --> 39:39.100
看得见吗

39:39.400 --> 39:40.300
你们能看见吗

39:40.500 --> 39:41.900
我这里不知道怎么放搭呀

39:41.900 --> 39:42.600
这个玩意

39:43.800 --> 39:44.900
我看一下怎么放搭

39:48.610 --> 39:49.510
没法放搭呀

39:49.510 --> 39:49.910
这个

39:50.510 --> 39:51.710
能看清楚吧

39:52.310 --> 39:52.710
可以看

39:52.710 --> 39:53.510
可以看见啊

39:53.710 --> 39:54.810
那么这就是它匹配的是

39:54.810 --> 39:55.210
pass

39:55.210 --> 39:56.410
所以说query无所谓

39:57.610 --> 39:58.510
但是有的时候呢

39:58.510 --> 39:59.310
pass呢

40:00.310 --> 40:02.410
我们不希望它那么精确的匹配

40:02.410 --> 40:02.810
比方说啊

40:02.810 --> 40:04.410
你看刚才的那种情况

40:04.510 --> 40:05.910
我如果说是这种情况

40:06.110 --> 40:06.910
这种邪法

40:07.310 --> 40:08.110
a b

40:08.510 --> 40:09.210
a b

40:09.310 --> 40:10.610
这种邪法能匹配吗

40:10.910 --> 40:11.810
是不是匹配不了了

40:11.910 --> 40:12.210
对吧

40:12.210 --> 40:12.710
匹配不了了

40:12.710 --> 40:13.810
看现在是三个

40:13.810 --> 40:14.810
我们可以发送一下

40:16.110 --> 40:16.810
你看这里

40:16.810 --> 40:17.810
说没有输出

40:17.810 --> 40:18.410
对不对

40:18.410 --> 40:19.610
所以这个时候匹配不了

40:19.810 --> 40:20.510
为什么呢

40:20.510 --> 40:21.610
因为这个pass不匹配

40:21.610 --> 40:22.710
它pass不一样

40:22.710 --> 40:23.010
对吧

40:23.010 --> 40:24.310
所以说pass不一样的时候

40:24.310 --> 40:25.010
它匹配不了

40:25.810 --> 40:27.010
但是有的时候呢

40:27.010 --> 40:28.010
我们希望呢

40:28.010 --> 40:29.910
它pass灵活一点啊

40:29.910 --> 40:31.710
就是我不要那么固定

40:31.710 --> 40:32.510
那么这个时候呢

40:32.510 --> 40:34.010
就可以使用动态的pass

40:34.910 --> 40:36.110
比方说我这里举个例子

40:36.510 --> 40:37.410
像这种情况

40:37.710 --> 40:38.710
我们可以这样子写

40:40.610 --> 40:41.810
像可以这样子写

40:43.510 --> 40:45.010
啊匹配了

40:47.740 --> 40:48.540
匹配了这个

40:51.580 --> 40:52.380
可以这样子写

40:52.380 --> 40:53.980
这个可以匹配什么呢

40:53.980 --> 40:55.180
它可以匹配这些东西

40:55.980 --> 40:59.180
只要你是你的pass是一斜杠六十

40:59.180 --> 40:59.580
然后呢

40:59.580 --> 41:01.580
中间这一部分写任何东西都可以

41:01.880 --> 41:02.180
然后呢

41:02.180 --> 41:03.580
这一部分写任何东西都可以

41:03.780 --> 41:04.180
对吧

41:04.380 --> 41:05.680
中这一部分匹配

41:05.680 --> 41:06.680
这一部分匹配

41:06.680 --> 41:08.880
将这种写法都可以进行匹配

41:09.380 --> 41:10.980
那么这就是这种动态路径

41:11.080 --> 41:13.680
给通过一个冒号进行站位

41:13.880 --> 41:15.480
通过一个冒号进行站位

41:15.480 --> 41:16.480
来进行匹配

41:16.780 --> 41:17.380
明儿意思吧

41:17.380 --> 41:17.580
好

41:17.580 --> 41:18.380
咱们来看一下吧

41:18.380 --> 41:19.180
这种写法

41:19.180 --> 41:19.980
我们来这里呢

41:19.980 --> 41:20.980
比方用guess方法

41:21.380 --> 41:21.980
去访问什么的

41:21.980 --> 41:22.780
访问那个

41:23.080 --> 41:24.080
访问这个六十

41:25.580 --> 41:26.380
写杠六十

41:27.280 --> 41:28.080
随便写个啊

41:28.080 --> 41:28.780
随便写个

41:29.180 --> 41:29.580
send

41:30.180 --> 41:30.680
你看这里

41:30.680 --> 41:31.580
是不是输出了这个

41:31.580 --> 41:31.880
对吧

41:31.880 --> 41:32.380
匹配了

41:32.680 --> 41:32.880
对吧

41:32.880 --> 41:33.680
然后我们这里换

41:33.680 --> 41:34.180
换一个

41:34.180 --> 41:34.880
随便换一个

41:37.080 --> 41:37.780
发动请求

41:37.780 --> 41:38.680
说又匹配了

41:39.180 --> 41:39.580
对不对

41:39.580 --> 41:40.580
所以说这种情况

41:40.580 --> 41:41.780
它是动态路由啊

41:41.780 --> 41:42.680
动态路径

41:42.680 --> 41:43.380
我们这两天呢

41:43.380 --> 41:44.580
可能用动态路径

41:44.580 --> 41:45.880
可能用不到啊

41:45.880 --> 41:47.080
有可能用不到有可能用到

41:47.080 --> 41:48.180
我现在也不能确定

41:48.480 --> 41:50.180
明天的课导明天再说吧

41:50.180 --> 41:51.380
今天我们是可能用不到的

41:51.380 --> 41:52.580
所以给大家说一下啊

41:52.580 --> 41:54.180
就这个是可以匹配的

41:54.180 --> 41:55.080
这动态路径

41:55.080 --> 41:55.980
啊动态路由

41:56.980 --> 41:58.180
如果说你学过五六的话

41:58.180 --> 41:59.580
那你肯定非常非常清楚了

42:02.180 --> 42:02.980
那么这是

42:02.980 --> 42:04.180
可以拿腾讯课导的话

42:04.180 --> 42:05.480
这个框不是很好拉

42:05.480 --> 42:06.480
你们看得清楚就行

42:07.080 --> 42:08.280
那么这下来我们再继续看

42:08.280 --> 42:09.480
这是刚才说了匹配

42:09.980 --> 42:10.080
好

42:10.080 --> 42:11.680
那么匹配到这个函数里

42:11.680 --> 42:12.380
函数过后

42:12.380 --> 42:13.880
我们知道这个函数什么时候运行了

42:13.880 --> 42:14.880
这个已经非常清楚了

42:14.880 --> 42:15.180
对吧

42:15.180 --> 42:16.680
只要能匹配就能运行

42:17.280 --> 42:18.480
那么现在关键是函数里边

42:18.480 --> 42:19.580
还有两个参数

42:20.080 --> 42:20.880
一个是Rick

42:21.580 --> 42:22.480
一个是Race

42:22.980 --> 42:24.480
这两个参数什么意思呢

42:24.580 --> 42:25.680
Rick表示的是

42:26.180 --> 42:27.380
请求对象

42:27.880 --> 42:28.980
他表示什么意思呢

42:28.980 --> 42:29.780
表示的是

42:30.480 --> 42:31.680
请求对象

42:32.580 --> 42:34.080
他是一个单词的缩写

42:34.480 --> 42:35.380
叫做Request

42:35.580 --> 42:36.480
当然这是个参

42:36.480 --> 42:37.780
他无非是一个参数

42:38.680 --> 42:40.780
那么这边Race表示的是

42:42.280 --> 42:43.380
响应对象

42:45.080 --> 42:45.980
响应对象

42:47.180 --> 42:47.380
对吧

42:47.380 --> 42:48.680
我们无非就是一个

42:49.380 --> 42:49.980
我们的福细

42:49.980 --> 42:51.480
无非就是要获取请求

42:51.480 --> 42:52.980
然后给他响应对吧

42:53.580 --> 42:54.280
Response

42:54.380 --> 42:55.680
就是两个单词的缩写

42:55.780 --> 42:58.280
那么我问大家一个非常非常

42:59.080 --> 43:01.580
基础也是非常非常傻的问题

43:01.880 --> 43:04.480
我想问一下这两个参数的名字能不能改

43:07.030 --> 43:08.930
我看一下这里有没有同学有问题的

43:09.830 --> 43:11.530
可不可以改这两个参数

43:14.240 --> 43:15.140
你们确定吗

43:18.480 --> 43:19.380
是不是可以改

43:19.380 --> 43:19.780
可以改

43:19.780 --> 43:20.580
不然被吓到了

43:20.580 --> 43:21.180
可以改

43:21.180 --> 43:23.980
这里是无非是参数的名字可以改啊

43:24.080 --> 43:26.480
这是既然是非常非常基础的东西

43:27.380 --> 43:28.080
可以随便改的

43:28.080 --> 43:29.680
跟变量名字可以随便用的一样

43:29.680 --> 43:29.880
对吧

43:29.880 --> 43:31.080
这个变量名字随便用

43:31.080 --> 43:33.980
怎么习惯上的用这样的单词表示请求

43:33.980 --> 43:35.780
用这个单词的表示想用

43:36.280 --> 43:36.480
好

43:36.480 --> 43:39.280
那么这个里边请求和响应都是对象

43:39.680 --> 43:40.880
他对象里边有哪些东西

43:40.880 --> 43:41.780
那么接下来继续看

43:42.080 --> 43:43.380
我们就分两部分来说

43:43.380 --> 43:44.380
一个是请求对象

43:45.080 --> 43:45.680
你看啊

43:45.680 --> 43:46.980
我们现在的就是一定要

43:46.980 --> 43:48.580
行里边一定要有这张图

43:49.080 --> 43:50.580
流烂器请求到了服务器

43:50.580 --> 43:51.980
所以发了一大堆东西过来

43:52.680 --> 43:54.080
东西是不是这个东西

43:54.080 --> 43:54.380
对吧

43:54.380 --> 43:55.480
发了一大堆东西过来

43:56.180 --> 43:57.180
那么这个东西

43:57.280 --> 43:59.080
我们在服务器端到了服务器端

43:59.080 --> 44:00.480
服务器端是不是可以获取啊

44:00.880 --> 44:01.180
对吧

44:01.180 --> 44:01.880
所以用这个对象

44:01.880 --> 44:03.880
主要是来获取信息的

44:05.380 --> 44:05.980
另外呢

44:05.980 --> 44:07.880
我们服务器获取的信息过后

44:07.880 --> 44:08.680
做了一些处理

44:08.680 --> 44:10.180
是不是要响应对不对

44:10.180 --> 44:11.480
要给他东西

44:11.480 --> 44:11.980
对吧

44:11.980 --> 44:12.880
这是响应

44:12.880 --> 44:13.880
所以说这个对象

44:14.580 --> 44:17.180
这个raise对象主要是用来响应的

44:17.680 --> 44:19.180
把这个基本点搞清楚

44:19.280 --> 44:19.780
因此呢

44:19.780 --> 44:21.980
我们以后要从要获取

44:22.680 --> 44:23.780
请求带过来的东西

44:23.780 --> 44:24.380
我们用什么

44:24.380 --> 44:24.780
rig

44:25.480 --> 44:26.680
我要给他一个东西

44:26.680 --> 44:27.580
我要用raise

44:28.380 --> 44:30.280
把这个基本的概念搞清楚

44:30.480 --> 44:32.480
那么我们具体的在这个raise对象里面

44:32.480 --> 44:33.680
有哪些东西呢

44:33.680 --> 44:34.980
我们可以看一下啊

44:34.980 --> 44:37.580
比方说我们就这里就用六字吧

44:37.580 --> 44:38.680
或者就用这个吧

44:38.680 --> 44:39.180
就用这个啊

44:40.280 --> 44:40.380
好

44:40.380 --> 44:41.080
我们来输出一下

44:43.720 --> 44:46.820
输出把这个之前的保留

44:46.820 --> 44:48.320
保留在下面输出

44:48.320 --> 44:50.420
raise里面有哪些东西呢

44:50.420 --> 44:53.720
一个属性叫pass表示请求的路径

44:54.620 --> 44:56.620
表示匹配的请求的路径

44:56.620 --> 44:57.220
保存

44:57.220 --> 44:57.820
咱们来看一下吧

45:03.310 --> 45:05.210
现在我们在这边发送一个请求

45:05.210 --> 45:05.710
发送过去

45:06.410 --> 45:07.010
这边来看

45:11.910 --> 45:14.010
这不是很好操作

45:14.010 --> 45:14.210
好

45:14.210 --> 45:14.910
你看啊

45:14.910 --> 45:16.310
现在是不是匹配到他

45:16.310 --> 45:16.910
对不对

45:16.910 --> 45:17.610
然后呢

45:17.610 --> 45:19.210
pass的结果是不是这个

45:19.210 --> 45:20.610
六十一二三一二三

45:20.610 --> 45:21.610
就一大堆

45:21.610 --> 45:22.610
你看这边是不是

45:22.610 --> 45:23.410
是不是这样子

45:23.410 --> 45:24.010
对不对

45:24.610 --> 45:25.610
不仅如此啊

45:25.610 --> 45:26.410
不仅如此

45:26.410 --> 45:28.410
我们把这东西放在浏览器里边也是一样

45:28.410 --> 45:29.310
浏览器可以访问啊

45:29.310 --> 45:31.110
不是说只有pose面才能访问

45:31.110 --> 45:31.510
对吧

45:31.510 --> 45:32.510
就是浏览器的地址

45:32.510 --> 45:34.310
那边输入这样的地址一回车

45:34.310 --> 45:35.210
是不是也是一样的

45:35.910 --> 45:36.610
一回车

45:36.610 --> 45:36.910
对吧

45:36.910 --> 45:38.510
当然浏览器这边一直得不到结果

45:38.510 --> 45:39.310
但是这边是不是

45:39.410 --> 45:40.210
浮览运行了

45:40.810 --> 45:41.410
说匹配了

45:41.910 --> 45:42.410
对吧

45:42.410 --> 45:43.710
是不是这个这个地址

45:43.710 --> 45:44.710
然后我们这里改一下

45:44.710 --> 45:46.010
改成这个一回车

45:46.910 --> 45:47.010
好

45:47.010 --> 45:48.310
你看这边是不是匹配了

45:48.310 --> 45:49.710
pass的只是这个

45:49.710 --> 45:50.210
对吧

45:50.210 --> 45:51.410
我们这个可以输出一下啊

45:51.910 --> 45:53.110
来这是来自于

45:53.510 --> 45:54.310
pass属性

45:55.010 --> 45:56.010
Rig pass

45:56.710 --> 45:56.810
好

45:56.810 --> 45:57.310
我们继续

45:59.210 --> 45:59.710
下一个

46:00.110 --> 46:02.010
master的表示什么意思呢

46:02.010 --> 46:03.810
表示你请求的时候

46:05.210 --> 46:07.310
发送的请求方法是什么

46:08.210 --> 46:09.910
对比一下刚才刚刚才这一部分

46:10.510 --> 46:11.010
请求的时候

46:11.010 --> 46:12.310
他是不是在获取这个东西

46:12.310 --> 46:13.010
东西对吧

46:13.010 --> 46:14.110
他给你封装到一个属性

46:14.110 --> 46:15.210
master的里边

46:15.210 --> 46:15.810
因此呢

46:15.810 --> 46:16.510
我们这里呢

46:16.510 --> 46:17.110
可以通过

46:17.810 --> 46:18.710
master的来获取的

46:18.710 --> 46:19.710
你请求的方法

46:20.410 --> 46:21.310
好这里输出

46:21.710 --> 46:23.510
比方说Rig.master的

46:24.010 --> 46:24.910
来看一下吧

46:24.910 --> 46:26.110
Rig.master的

46:27.010 --> 46:27.710
好保存

46:30.970 --> 46:31.070
好

46:31.070 --> 46:32.370
现在我们在浏览器里边看一下

46:32.370 --> 46:32.870
回车

46:34.840 --> 46:35.640
这边来看

46:35.640 --> 46:36.840
是不是匹配到了pass

46:36.840 --> 46:37.640
等于这个字

46:38.040 --> 46:39.040
master的是不是get

46:39.040 --> 46:39.440
对不对

46:39.440 --> 46:40.640
可以获取到请求方法

46:41.240 --> 46:41.440
好

46:41.440 --> 46:42.240
然后接下来继续

46:42.940 --> 46:43.940
然后来query

46:44.440 --> 46:47.140
query可以获取请求行中的query

46:47.240 --> 46:48.340
query我们刚才是不是

46:48.840 --> 46:49.340
讲过的

46:49.340 --> 46:49.740
对不对

46:50.340 --> 46:51.140
那么我们来看一下

46:51.140 --> 46:51.640
query

46:53.340 --> 46:54.440
Rig.query

46:55.540 --> 46:56.340
Rig.query

46:57.940 --> 46:58.740
好保存

47:00.240 --> 47:01.240
现在我们继续看

47:02.140 --> 47:03.040
现在我们在这里

47:04.540 --> 47:05.040
回车

47:05.040 --> 47:05.740
你看这边

47:05.940 --> 47:06.640
query得到什么

47:06.640 --> 47:08.040
得到是一个空对象

47:08.040 --> 47:09.140
他为什么是空对象呢

47:09.140 --> 47:10.540
因为我这里是不是没有query

47:11.140 --> 47:12.240
query敢写上一个

47:12.240 --> 47:13.040
比方说问号

47:13.240 --> 47:14.040
A等于1

47:14.040 --> 47:15.340
然后B等于2

47:15.440 --> 47:16.440
B等于2

47:16.440 --> 47:17.140
C等于3

47:17.140 --> 47:18.640
随便敢写一些一回车

47:18.840 --> 47:19.540
你看这边

47:19.540 --> 47:20.840
他是不是给你封装成对象了

47:21.040 --> 47:22.740
我们在浮觍器是不是可以收到这个消息

47:22.740 --> 47:23.040
对吧

47:23.040 --> 47:25.240
A1B2C3

47:25.340 --> 47:25.740
对不对

47:25.740 --> 47:26.540
这是query

47:26.740 --> 47:26.940
对吧

47:26.940 --> 47:28.940
query往往附带一些额外的信息

47:30.040 --> 47:31.740
所以说你现在看到浮觍器过后

47:31.740 --> 47:32.740
你就不要来问我

47:32.740 --> 47:33.940
query有什么用啊

47:34.640 --> 47:35.040
它

47:35.440 --> 47:36.640
可以有任何用处

47:37.240 --> 47:38.240
然后浮觍器说

47:38.240 --> 47:40.240
你必须要给我传一个A等于1过来

47:40.240 --> 47:42.240
那么你必须要给我传一个A过来

47:42.240 --> 47:43.840
那么我要把这些A补出来

47:43.840 --> 47:44.840
要进行一些分析

47:44.840 --> 47:46.240
那就你就必须要传过去

47:46.540 --> 47:47.440
如果它没有要求的话

47:47.440 --> 47:48.240
你可以传可以不传

47:48.240 --> 47:49.240
它发生它不理定

47:49.340 --> 47:49.640
对吧

47:49.640 --> 47:52.140
所以要让这些信息的都是可以被浮觍器

47:52.240 --> 47:53.440
代码过去

47:53.840 --> 47:54.340
或许过后

47:54.340 --> 47:55.440
它到底要干嘛

47:55.440 --> 47:56.340
随便啊

47:56.340 --> 47:57.440
随便干嘛都可以

47:58.040 --> 47:58.140
好

47:58.140 --> 47:59.540
这里是这个query

47:59.940 --> 48:00.040
好

48:00.040 --> 48:00.740
接他们进去

48:00.940 --> 48:01.740
Headers

48:01.740 --> 48:02.840
Headers是或许怎么呢

48:02.840 --> 48:04.840
或许请求投利本的建制队

48:05.440 --> 48:05.640
好

48:05.640 --> 48:06.540
这里能不能看一下

48:07.640 --> 48:08.240
break

48:08.440 --> 48:09.140
Headers

48:09.540 --> 48:10.340
它是一个对象

48:10.940 --> 48:11.540
Headers

48:13.970 --> 48:14.270
好

48:14.270 --> 48:14.870
保证啊

48:15.170 --> 48:16.170
咱们在这边

48:18.780 --> 48:19.380
重新来一次

48:19.380 --> 48:20.180
重新来一次

48:21.980 --> 48:22.780
这有烂气

48:22.880 --> 48:23.380
回测

48:23.580 --> 48:24.480
然后我们看一下这边

48:24.880 --> 48:25.780
一旦Headers

48:25.780 --> 48:26.780
它里面是不是或许

48:26.780 --> 48:27.580
是不是一个对象

48:27.580 --> 48:28.880
对象里面是不是有建制队

48:28.980 --> 48:29.780
属性名

48:29.780 --> 48:30.480
属性值

48:30.580 --> 48:31.780
属性名属性值

48:31.780 --> 48:32.480
你看属性名

48:32.480 --> 48:33.780
也属性名很长啊

48:33.780 --> 48:35.680
属性值属性名属性值

48:35.980 --> 48:37.280
啊属性名属性值

48:37.380 --> 48:38.480
我们不用管它这里边到底

48:38.480 --> 48:39.680
这些东西到底是啥吗

48:40.080 --> 48:41.680
我们后边的后期的loader

48:41.780 --> 48:43.480
基本上是把这些东西讲完了的

48:44.080 --> 48:45.080
但是我们知道这是

48:45.080 --> 48:45.980
这是那个Headers

48:45.980 --> 48:46.380
对吧

48:46.480 --> 48:48.580
发通过了请求的投利本的建制队

48:48.680 --> 48:50.180
我们如果说需要的话

48:50.180 --> 48:51.680
我们就可以在这里边去拿

48:51.680 --> 48:52.680
它是个对象嘛

48:52.780 --> 48:54.680
所以对象里面打属性也还不会吗

48:54.680 --> 48:56.280
通过属性名去拿就完事了

48:56.680 --> 48:57.580
这是个Headers

48:57.880 --> 48:59.080
你看这里Rick对象是不是

48:59.080 --> 49:00.280
可以获取到很多信息

49:00.380 --> 49:01.780
然后接下来是个Parrons

49:01.980 --> 49:03.080
Parrons是什么呢

49:03.180 --> 49:05.380
它获取的是动态路由

49:06.080 --> 49:07.380
部分对应的值

49:07.380 --> 49:08.080
啥意思

49:09.480 --> 49:10.680
我们这里输出一下

49:11.880 --> 49:13.080
Rick Parrons

49:14.080 --> 49:15.180
Rick Parrons

49:18.250 --> 49:18.750
保存

49:19.150 --> 49:20.850
你看这里Parrons得到了啥

49:20.950 --> 49:23.550
得到了是12313

49:23.750 --> 49:25.050
Mounts这个玩意

49:25.050 --> 49:26.250
这是什么东西呢

49:26.450 --> 49:27.750
你看我们的请求路径

49:28.050 --> 49:28.950
请求路径

49:28.950 --> 49:30.250
我们刚才是不是这个东西

49:31.150 --> 49:31.750
对吧

49:31.950 --> 49:33.250
这是我们的请求路径

49:34.650 --> 49:35.250
然后呢

49:35.250 --> 49:36.750
我们的路由

49:36.750 --> 49:37.650
我们的这个

49:37.950 --> 49:40.250
服务器这边的匹配

49:40.550 --> 49:41.750
是这个东西

49:42.750 --> 49:43.950
是不是能匹配

49:43.950 --> 49:44.350
对吧

49:44.350 --> 49:45.750
他匹配他

49:46.350 --> 49:47.750
他匹配他

49:47.950 --> 49:50.150
那么面对这种动态路由的时候

49:50.150 --> 49:52.350
他就会把这个匹配的结果

49:52.550 --> 49:53.950
给你放到一个属性

49:53.950 --> 49:55.150
叫做Parrons里面

49:55.350 --> 49:56.150
就这么个意思

49:56.350 --> 49:56.950
很好理解

49:56.950 --> 49:57.350
对吧

49:57.350 --> 49:59.550
他就快把这个结果放到这个Parrons里面

49:59.750 --> 50:00.350
你看这边

50:01.050 --> 50:01.550
没问题吧

50:01.550 --> 50:01.750
好

50:01.750 --> 50:02.550
这就是

50:03.450 --> 50:06.050
可以通过这个Rick来获取到了一些东西

50:06.050 --> 50:07.850
我们先把一些基本的信息讲完

50:08.850 --> 50:10.550
那么知道这个东西过后呢

50:10.550 --> 50:11.250
我们再来看

50:16.010 --> 50:17.210
接下来是另一部分了

50:18.510 --> 50:19.010
回到这

50:20.310 --> 50:21.610
这里顺便说一下Message

50:21.610 --> 50:22.710
Message是这样子

50:22.710 --> 50:24.310
我们刚才看到都是Gate对不对

50:25.210 --> 50:26.510
它是获取请求方法

50:26.810 --> 50:27.910
那么这个请求方法呢

50:27.910 --> 50:30.110
很多时候是浏览器自动给你发出的

50:30.410 --> 50:31.410
像很多时候啊

50:31.410 --> 50:32.310
绝大部分时候

50:32.310 --> 50:34.510
浏览器发出的请求都是Gate请求

50:34.910 --> 50:36.610
像在浏览器地址南里边

50:36.610 --> 50:38.910
输入一个地址一回车Gate请求

50:39.110 --> 50:40.410
就是一个请求方法是Gate

50:41.510 --> 50:42.910
或者是点一个超链接

50:42.910 --> 50:43.910
也是Gate请求

50:44.810 --> 50:46.410
或者是像什么链接一个图片

50:46.410 --> 50:47.510
链接一个CSS

50:47.510 --> 50:48.310
链接一个GS

50:48.310 --> 50:49.710
都是Gate请求

50:49.710 --> 50:51.310
绝大部分请求都是Gate请求

50:51.710 --> 50:53.110
Gate请求还有个特点

50:53.110 --> 50:53.910
一般来说

50:53.910 --> 50:56.010
Gate请求是不会给你一个消息体的

50:56.510 --> 50:58.410
它就是它消息体为空

50:58.710 --> 50:59.610
我们刚才说了

51:00.410 --> 51:01.310
发送给消息的时候

51:01.310 --> 51:02.110
是不是有请求行

51:02.110 --> 51:03.310
一些消息头消息体

51:03.310 --> 51:03.710
对吧

51:04.110 --> 51:05.810
但是如果说你是一个Gate请求的话

51:05.810 --> 51:07.110
可能没有给你消息体

51:07.210 --> 51:08.310
它可能是这种格式

51:08.510 --> 51:09.510
这里没有消息体

51:09.510 --> 51:10.310
这里是空的

51:10.310 --> 51:11.510
不是说有这几个字

51:11.510 --> 51:12.310
它是空的

51:13.110 --> 51:14.710
这是Gate请求它的一个特点

51:14.710 --> 51:15.710
所以说Gate请求

51:15.710 --> 51:17.510
一般来说Gate请求的话

51:17.510 --> 51:18.910
它的所有的信息

51:18.910 --> 51:20.510
它就是我要告诉你服务器的

51:20.510 --> 51:21.510
一些相关信息

51:21.510 --> 51:22.910
那么都是在请求行

51:23.110 --> 51:24.310
或者是请求头里边

51:24.310 --> 51:25.710
因为它的消息

51:25.710 --> 51:27.510
只有请求行请求头消息体

51:27.510 --> 51:28.110
你没有消息体

51:28.110 --> 51:30.110
只能在请求行和请求头里边

51:30.410 --> 51:31.110
不要劣劣

51:32.110 --> 51:32.910
所以Gate请求

51:32.910 --> 51:33.710
我们要附带的信息

51:33.710 --> 51:34.910
一般来说的话

51:34.910 --> 51:36.010
会放到这个位置

51:36.210 --> 51:37.210
会放到这个位置

51:37.710 --> 51:38.710
放到Querry里边

51:38.710 --> 51:39.210
你看一下

51:39.210 --> 51:40.710
比方说咱们摆度

51:40.710 --> 51:42.110
摆度随便摆度一个吧

51:42.710 --> 51:43.710
摆度一个乘客

51:45.310 --> 51:46.710
乘客还对

51:47.910 --> 51:48.510
这啥玩意

51:53.180 --> 51:53.980
你看一下这里

51:53.980 --> 51:54.580
是不是Querry

51:54.580 --> 51:55.580
后面是很多Querry

51:55.580 --> 51:55.980
对吧

51:55.980 --> 51:56.880
这是个Gate请求

51:56.880 --> 51:58.780
它要有一些相关的信息

51:59.580 --> 52:00.480
相关的信息

52:00.480 --> 52:01.680
是不是全在Querry里边

52:02.180 --> 52:02.480
对不对

52:02.480 --> 52:03.480
是全在Querry里边

52:04.480 --> 52:04.980
建置对

52:04.980 --> 52:05.480
对吧

52:05.480 --> 52:07.380
也不关这本关的信息是啥吧

52:12.060 --> 52:13.060
可以把Rig等下

52:13.060 --> 52:13.960
谁的属性打印出来

52:13.960 --> 52:14.260
可以

52:14.260 --> 52:15.560
它里边属性蛮多的

52:15.560 --> 52:16.360
要看一下吧

52:16.860 --> 52:18.760
你们下来也可以自己去打印一下

52:18.760 --> 52:19.460
它就是个对象

52:19.460 --> 52:20.660
里边有超多超级多的属性

52:20.660 --> 52:21.260
你看看

52:21.260 --> 52:23.060
它这边属性超多

52:23.060 --> 52:23.960
而且有些属性的

52:23.960 --> 52:25.660
它是不允许里便利的

52:25.660 --> 52:26.660
它是不允许里便利的

52:26.660 --> 52:28.060
所以这里还打印不出来

52:28.060 --> 52:29.960
它里边信息蛮多的

52:29.960 --> 52:31.260
我们平时用的话

52:31.260 --> 52:33.460
基本上就用这些就完全够了

52:33.460 --> 52:36.060
这些里边基本上就能够

52:36.060 --> 52:38.060
涵盖我们想用的所有东西

52:39.460 --> 52:41.160
这是我们的请求

52:43.910 --> 52:44.710
接下来是想用了

52:46.210 --> 52:46.510
想用

52:47.510 --> 52:49.110
就是另一个参数

52:49.110 --> 52:49.910
Race对象

52:49.910 --> 52:50.910
就是这个东西

52:50.910 --> 52:52.610
它来负责给扣断结果

52:52.610 --> 52:54.010
你看刚才我们一直引来

52:54.010 --> 52:55.910
这个东西是不是一直拿不到结果

52:55.910 --> 52:56.810
一直在那里卡着

52:56.810 --> 52:58.310
为什么服务器没给它

52:58.310 --> 52:59.810
服务器一直没给它结果

52:59.810 --> 53:00.910
那么我们要通过哪个对象

53:00.910 --> 53:01.410
给它结果

53:01.410 --> 53:02.310
就通过这个Race

53:02.310 --> 53:03.210
那怎么来给呢

53:04.610 --> 53:05.410
我们来看一下

53:05.410 --> 53:06.410
这怎么来给

53:06.410 --> 53:07.710
我们刚才把刚才那个

53:07.710 --> 53:08.310
复制一下吧

53:08.310 --> 53:10.110
把那个响应结果复制一下

53:11.110 --> 53:12.010
它就复制一下

53:12.710 --> 53:13.310
复制到这

53:14.910 --> 53:16.110
这样子的大家看的

53:16.910 --> 53:17.710
好对比一点

53:19.620 --> 53:20.820
这就是我们的响应结果

53:20.820 --> 53:21.220
对吧

53:21.620 --> 53:22.020
来吧

53:23.720 --> 53:24.220
Race

53:24.820 --> 53:25.020
好

53:25.020 --> 53:27.320
首先我们可以通过这个新的方法

53:28.120 --> 53:29.420
这里边写一个东西

53:29.420 --> 53:30.420
来给它一个什么

53:30.420 --> 53:31.620
给它一个响应体

53:32.220 --> 53:34.020
并且结束响应

53:34.020 --> 53:35.620
就它可以给个响应体

53:35.620 --> 53:36.420
并且我告诉你

53:36.420 --> 53:37.520
我已经响应完了

53:37.520 --> 53:38.620
一直要拿去吧

53:38.620 --> 53:39.420
就这么个意思

53:39.420 --> 53:40.520
通过这个方法

53:40.520 --> 53:41.720
那么它会改动什么呢

53:41.720 --> 53:43.120
它会改动这个响应

53:43.120 --> 53:44.520
就是这是响应格式对吧

53:44.520 --> 53:45.820
它会改动这一部分

53:45.820 --> 53:46.420
这一部分是什么

53:46.420 --> 53:47.720
这一部分就是响应体

53:47.720 --> 53:47.920
对吧

53:47.920 --> 53:48.720
消息体

53:48.720 --> 53:50.020
它会改动这一部分

53:50.020 --> 53:50.220
好

53:50.220 --> 53:51.220
那么咱们来看一下

53:51.220 --> 53:53.520
我们比方说在这Race里边用一个send

53:54.320 --> 53:55.220
给它写个字幕刷

53:55.620 --> 53:56.020
Hello

53:57.720 --> 53:58.420
express

54:00.400 --> 54:01.000
保存

54:01.000 --> 54:01.400
你看一下

54:01.400 --> 54:02.900
现在我们去请求这个地址

54:02.900 --> 54:04.500
你它能拿到结果了

54:04.500 --> 54:05.000
对不对

54:05.000 --> 54:05.200
好

54:05.200 --> 54:07.400
如果说我们在这里点击右键检查

54:07.400 --> 54:08.900
可以看到更加清楚

54:08.900 --> 54:10.700
我们这里可以选择流量器里边

54:10.700 --> 54:12.100
可以选择less work

54:12.100 --> 54:13.600
我们的就是网络通信

54:14.500 --> 54:15.200
我们这里刷新

54:16.600 --> 54:17.200
你看

54:17.200 --> 54:18.400
这是我们的请求

54:18.400 --> 54:18.800
对吧

54:18.800 --> 54:20.000
请求发送到这了

54:20.000 --> 54:20.800
点开

54:20.800 --> 54:22.200
你看它给我的响应

54:22.200 --> 54:24.400
是不是里面有自动的会加了一些响应头

54:24.400 --> 54:24.600
对吧

54:24.600 --> 54:25.500
它自动加了响应头

54:25.500 --> 54:26.600
我们看view source

54:26.600 --> 54:28.000
看它原式格式

54:28.600 --> 54:29.600
你看这个原式格式

54:29.600 --> 54:31.400
是不是就是我们的这里的原式格式

54:32.100 --> 54:33.500
是不是就这么自动格式

54:33.500 --> 54:34.200
对吧

54:34.200 --> 54:35.900
它默认给它的就是200ok

54:35.900 --> 54:37.200
表示一切没问题

54:37.200 --> 54:38.100
一切正常

54:38.100 --> 54:40.300
然后给了它一些相关的信息

54:40.300 --> 54:41.900
然后接下来响应体在哪呢

54:41.900 --> 54:42.900
响应体在这

54:42.900 --> 54:43.800
就是bounce

54:43.800 --> 54:45.400
你看是不是给它的这个响应体

54:45.400 --> 54:46.400
对吧

54:46.500 --> 54:47.600
这个给它的这个响应体

54:47.600 --> 54:48.200
也是bounce

54:49.300 --> 54:50.000
没了意思

54:50.000 --> 54:51.000
这就是它的格式

54:51.000 --> 54:52.500
我们也可以在postman里面

54:52.500 --> 54:53.800
也可以看到看到很清楚

54:53.800 --> 54:54.400
点击send

54:55.000 --> 54:56.500
你看这里数也可以拿到这个结果

54:56.500 --> 54:57.600
把他的响应体

54:57.600 --> 54:58.200
响应头呢

54:58.200 --> 54:58.600
在这

54:59.400 --> 55:00.200
对不对

55:00.200 --> 55:02.100
那么这里的就是给他send的

55:02.100 --> 55:03.000
就是给他一个什么

55:03.000 --> 55:04.000
给他一个响应体

55:04.500 --> 55:05.700
在这一部分给他响应体

55:05.700 --> 55:07.800
那如果说你这里给他的是一个页面呢

55:07.800 --> 55:08.300
可不可以

55:08.300 --> 55:08.900
可以啊

55:09.600 --> 55:10.400
比方说我们这里

55:10.900 --> 55:11.800
怎么给他一个页面

55:12.900 --> 55:13.800
是不是用这种方式

55:14.800 --> 55:15.800
这里

55:16.800 --> 55:17.600
可以用这种方式

55:17.600 --> 55:17.800
对吧

55:17.800 --> 55:18.700
用模板字物串

55:18.700 --> 55:19.600
在这里边写上一个

55:19.600 --> 55:20.300
se

55:20.600 --> 55:21.200
hello

55:21.400 --> 55:22.200
express

55:22.200 --> 55:22.400
对吧

55:22.400 --> 55:22.900
我们甚至呢

55:22.900 --> 55:24.300
还可以在这里写上一个style

55:24.800 --> 55:25.500
然后呢

55:25.800 --> 55:26.600
这里写上一个什么

55:26.600 --> 55:27.300
se

55:27.600 --> 55:28.200
color

55:28.300 --> 55:29.000
为红色

55:29.400 --> 55:29.600
对吧

55:29.600 --> 55:31.300
是不是把这个东西响应给刻不端了

55:31.400 --> 55:32.400
那么浏览器一看

55:32.400 --> 55:32.700
哦

55:32.700 --> 55:33.700
你给的我这个东西

55:33.700 --> 55:34.300
他一宣传出来

55:34.300 --> 55:36.100
就不就不就把这个页面宣传出来了吗

55:36.500 --> 55:36.600
啊

55:36.600 --> 55:37.200
一刷新

55:37.300 --> 55:38.300
你看是不是出来了

55:38.400 --> 55:39.900
你看服务器给我的响应结果

55:40.000 --> 55:41.100
响应结果是不是这个东西

55:41.600 --> 55:41.900
对不对

55:41.900 --> 55:42.500
明白了吧

55:42.500 --> 55:43.900
明白了服务器跟浏览器

55:43.900 --> 55:45.100
浏览器是怎么交货的

55:45.100 --> 55:46.100
他就是这样交货的

55:46.100 --> 55:46.500
啊

55:46.500 --> 55:47.800
就给他一个结果

55:47.800 --> 55:48.700
然后浏览器呢

55:48.700 --> 55:50.200
他会自动的把它渲染出来

55:51.100 --> 55:51.200
啊

55:51.200 --> 55:52.800
这是关于这个synd啊

55:52.800 --> 55:54.300
就改动的是响应题

55:55.700 --> 55:56.900
就是我们的响应主体

55:56.900 --> 55:57.800
主体数据

55:57.900 --> 55:58.200
好

55:58.200 --> 55:59.200
下一个header

56:00.300 --> 56:00.900
header

56:00.900 --> 56:02.700
他是设置的是响应头

56:02.700 --> 56:04.000
他设置的是这一部分

56:04.400 --> 56:05.200
就这一部分

56:05.900 --> 56:06.000
啊

56:06.000 --> 56:06.700
那看一下

56:06.700 --> 56:08.100
header这个函数的他的写法

56:08.200 --> 56:08.700
header

56:09.200 --> 56:09.700
name

56:09.900 --> 56:10.500
value

56:10.600 --> 56:11.100
啥意思

56:11.100 --> 56:11.700
你看想

56:11.800 --> 56:13.400
响应头里边不就是建置队吗

56:13.400 --> 56:13.900
建

56:14.100 --> 56:14.600
值

56:15.100 --> 56:15.600
建

56:15.800 --> 56:16.300
值

56:16.300 --> 56:16.700
对不对

56:16.700 --> 56:17.500
是不是建置队

56:18.100 --> 56:18.600
对吧

56:18.600 --> 56:19.500
每一个建置队呢

56:19.500 --> 56:20.400
有不同的用处

56:20.400 --> 56:21.900
甚至呢你还可以自定义

56:22.000 --> 56:23.500
自定义一些建置队

56:23.900 --> 56:24.400
无所谓

56:24.400 --> 56:25.000
这东西呢

56:25.000 --> 56:25.400
牛了

56:25.800 --> 56:26.700
建置队呢

56:26.800 --> 56:28.300
某一些特殊的建置队

56:28.300 --> 56:30.500
会对浏览器的某些行为呢

56:30.500 --> 56:31.400
产生影响

56:31.700 --> 56:31.800
啊

56:31.800 --> 56:33.600
那么这里面细节就蛮多了啊

56:33.600 --> 56:34.500
就蛮多的细节了

56:34.500 --> 56:36.200
比方说哭泣的影响

56:36.300 --> 56:36.800
什么

56:37.200 --> 56:38.400
缓存的影响

56:38.500 --> 56:40.100
还有就是消息内心的影响啊

56:40.100 --> 56:40.600
我们这里呢

56:40.600 --> 56:41.900
说一下这个消息内心吧

56:42.200 --> 56:43.400
这个content的type

56:43.600 --> 56:44.500
这个东西呢

56:44.600 --> 56:46.800
他其实就是响应头里

56:46.800 --> 56:47.900
就是响应头里边

56:47.900 --> 56:48.600
就这个东西

56:48.700 --> 56:49.400
一个建置队

56:49.700 --> 56:50.500
那么这个建置队呢

56:50.500 --> 56:52.800
他会影响到浏览器

56:53.200 --> 56:55.300
其实如果说脱离的浏览器翻筹的话

56:55.300 --> 56:56.300
这个东西也没啥用

56:56.700 --> 56:58.500
浏览器只不过的浏览器呢

56:58.500 --> 57:00.000
他如果说看到这个玩意了

57:00.000 --> 57:01.100
他会做出反应

57:01.500 --> 57:02.100
这个玩意

57:02.100 --> 57:03.900
浏览器他会怎么来认为这个东西

57:03.900 --> 57:04.700
到底是啥呢

57:04.800 --> 57:05.800
浏览器他认为

57:06.500 --> 57:08.100
你给了我一个响应体

57:09.100 --> 57:09.500
但是呢

57:09.500 --> 57:11.300
浏览器根本就不知道这个响应体是个啥

57:11.900 --> 57:13.300
不是说你说你写的

57:13.300 --> 57:13.800
Atenement代码

57:13.800 --> 57:14.900
你就是Atenement代码

57:15.400 --> 57:16.100
不一定对吧

57:16.300 --> 57:17.500
浏览器他是怎么分析的

57:17.500 --> 57:20.100
浏览器是看这个响应头里边这个地方

57:20.800 --> 57:22.600
这个地方你看写的是啥

57:23.100 --> 57:24.800
他就认为你的响应体是啥

57:24.900 --> 57:25.800
所以说这个地方

57:26.200 --> 57:27.000
控制的是啥呢

57:27.100 --> 57:28.200
是高速浏览器

57:28.300 --> 57:31.300
我接下来要给你的响应体里边的数据

57:31.400 --> 57:33.100
到底是一个什么数据

57:34.700 --> 57:35.300
明白的意思吧

57:35.500 --> 57:36.400
他是这么个意思

57:36.900 --> 57:38.400
那么这个content type

57:38.400 --> 57:39.300
就告诉浏览器

57:39.400 --> 57:41.400
我给你的响应体是一个什么样的类型的数据

57:41.400 --> 57:43.400
这个数据会触发浏览器的不同行为

57:43.500 --> 57:45.200
比方说你给他的是这个玩意

57:45.300 --> 57:47.000
那么浏览器他就会当做页面圈的

57:47.000 --> 57:47.900
他默认情况下

57:47.900 --> 57:49.700
你看给他的是不就是这个玩意吗

57:50.300 --> 57:51.800
默认情况下不就是这个玩意吗

57:52.000 --> 57:52.500
对不对

57:53.100 --> 57:54.400
他会把他当成页面圈的

57:54.700 --> 57:56.200
那如果说你给他的是这个玩意

57:56.200 --> 57:58.700
浏览器他就会把它当成偏金图片的圈的

57:58.800 --> 58:00.200
好咱们来玩一个吧

58:01.000 --> 58:02.500
我们在响应之前

58:03.000 --> 58:04.500
在发送响应体之前

58:04.700 --> 58:06.200
先设置一下响应头

58:06.600 --> 58:08.000
在设置什么content type

58:08.000 --> 58:09.400
这个的不全面大了解

58:10.200 --> 58:11.200
然后呢

58:11.200 --> 58:12.100
给他设置

58:12.600 --> 58:13.900
A面级png

58:14.500 --> 58:15.500
你看一下浏览器

58:16.400 --> 58:17.100
就蒙了

58:18.700 --> 58:19.200
刷新

58:22.140 --> 58:23.140
我给他的是啥

58:23.440 --> 58:24.340
我给他的还是

58:24.340 --> 58:25.640
你看响应体没变了

58:25.940 --> 58:27.040
我的响应体没变

58:27.040 --> 58:28.140
我只是改动了什么

58:28.140 --> 58:28.940
改动了这一块

58:28.940 --> 58:30.040
把这个块改成了什么了

58:30.040 --> 58:31.640
改成了A面级png

58:32.140 --> 58:33.040
浏览器一看

58:33.240 --> 58:33.640
哦

58:33.640 --> 58:34.940
他先读去响应头

58:34.940 --> 58:35.540
对吧一看

58:35.640 --> 58:35.740
哦

58:35.740 --> 58:36.840
你给我的是一张图片

58:36.840 --> 58:37.540
那行了

58:37.540 --> 58:38.640
你说啥就是啥

58:38.740 --> 58:39.740
那我就把这个图片

58:39.840 --> 58:40.740
我就把这个图片

58:40.740 --> 58:42.040
我就把他当成一个图片内容

58:42.040 --> 58:42.740
渲染出来

58:42.840 --> 58:43.540
那为什么看不到了

58:43.540 --> 58:44.740
因为他不是个图片内容

58:45.040 --> 58:46.040
图片内容是二进制的

58:46.040 --> 58:46.540
对吧

58:47.040 --> 58:47.940
他不是个图片内容

58:47.940 --> 58:48.640
说看

58:48.740 --> 58:50.040
解他不是认为这个东西

58:50.040 --> 58:51.740
不是一个合法的图片内容

58:51.740 --> 58:52.140
但是呢

58:52.140 --> 58:54.540
他仍然会把它当成图片来劝的

58:54.940 --> 58:55.640
明白了意思吧

58:55.640 --> 58:57.440
就是会触犯浏览器的

58:57.740 --> 58:58.140
嗯

58:58.540 --> 58:59.840
对这个内容的解析

59:00.240 --> 59:00.440
啊

59:00.440 --> 59:01.640
比方说我可以如果说

59:01.640 --> 59:02.640
我高速浏览器

59:02.640 --> 59:04.140
这是一个介石

59:06.200 --> 59:06.700
对吧

59:07.400 --> 59:08.600
我会我高速浏览器

59:08.600 --> 59:09.600
这是一个介石

59:10.000 --> 59:10.500
刷新

59:10.600 --> 59:11.200
那么浏览器呢

59:11.200 --> 59:12.600
他就会把它当成个介石代码

59:12.600 --> 59:13.600
给你显示出来

59:13.600 --> 59:14.100
对吧

59:14.800 --> 59:14.900
啊

59:14.900 --> 59:16.200
那么这就有意思了

59:16.500 --> 59:17.600
这就特别有意思

59:17.700 --> 59:18.500
给大家看一下

59:20.610 --> 59:21.110
我们呢

59:21.110 --> 59:21.910
把这个代码呢

59:21.910 --> 59:23.010
稍微改造一下

59:25.780 --> 59:26.380
啊

59:26.380 --> 59:26.780
这边呢

59:26.780 --> 59:27.980
我们就用一个鞋杠

59:28.180 --> 59:28.980
就匹配鞋杠

59:28.980 --> 59:29.880
就是跟路径

59:30.080 --> 59:31.280
跟路径的时候呢

59:31.280 --> 59:33.080
我就给他发送一个正常的

59:34.380 --> 59:35.380
发送一个正常的

59:35.780 --> 59:36.180
然后呢

59:36.180 --> 59:37.380
在页面上呢

59:37.380 --> 59:38.380
给他加一个

59:39.880 --> 59:41.680
在页面上给他加一个scripps元素

59:42.880 --> 59:43.780
src

59:46.560 --> 59:46.860
呃

59:49.140 --> 59:50.540
test.js

59:53.730 --> 59:54.130
好

59:55.130 --> 59:56.430
那么现在呢

59:58.030 --> 59:58.930
我在这里

59:58.930 --> 59:59.730
你看啊

59:59.930 --> 01:00:01.830
我们首先问大家一个问题

01:00:03.230 --> 01:00:05.530
当我去请求这个页面的时候

01:00:05.830 --> 01:00:07.230
就是跟地址

01:00:07.730 --> 01:00:09.030
那么是不是会运行这个函数

01:00:09.630 --> 01:00:10.730
是不是会运行这个函数

01:00:11.030 --> 01:00:11.530
对吧

01:00:12.030 --> 01:00:13.030
这个函数会运行

01:00:13.130 --> 01:00:14.230
这个函数运行的过程

01:00:14.230 --> 01:00:15.330
是不是会运行这个方法

01:00:15.430 --> 01:00:17.330
那么这个方法是不是发过去一个页面

01:00:18.330 --> 01:00:19.730
那么我请问

01:00:19.730 --> 01:00:21.030
如果说我在浏览器

01:00:21.730 --> 01:00:22.730
我一回车

01:00:22.830 --> 01:00:25.930
那么会发送出最终会发送出几个请求

01:00:27.130 --> 01:00:27.630
想一想

01:00:29.230 --> 01:00:31.430
最终会发送发送出几个请求

01:00:33.130 --> 01:00:33.930
说两个

01:00:34.830 --> 01:00:35.330
对不对

01:00:35.330 --> 01:00:35.830
说两个

01:00:35.830 --> 01:00:37.130
我现在不就在讲服装线了吗

01:00:37.130 --> 01:00:39.130
这不这不就是这服装线了吗

01:00:40.230 --> 01:00:41.530
那么这呃

01:00:41.530 --> 01:00:43.330
那么为什么会发送两个呢

01:00:43.330 --> 01:00:44.030
你看啊

01:00:44.430 --> 01:00:45.430
第一次请求

01:00:46.130 --> 01:00:48.300
先开一个啊

01:00:48.700 --> 01:00:50.200
第一次请求是不是请求这个

01:00:50.300 --> 01:00:51.200
请求这个路径

01:00:52.100 --> 01:00:53.100
啊第一次

01:00:54.000 --> 01:00:54.600
请求

01:00:56.300 --> 01:00:57.400
请求的路径是这个

01:00:58.000 --> 01:00:58.900
然后呢得到了结果

01:00:58.900 --> 01:01:00.400
得到结果是不是一个完整的页面

01:01:00.400 --> 01:01:00.700
是吧

01:01:00.700 --> 01:01:01.700
是不是得到了页面

01:01:02.300 --> 01:01:03.600
得到页面

01:01:04.100 --> 01:01:05.100
好得到了页面呢

01:01:05.100 --> 01:01:06.400
他是不是开始解析页面

01:01:06.400 --> 01:01:06.700
对吧

01:01:06.700 --> 01:01:09.000
开启开始渲染页面

01:01:09.200 --> 01:01:10.800
渲染的过程中是不是遇到了什么

01:01:10.800 --> 01:01:12.400
遇到了这个GS对吧

01:01:12.900 --> 01:01:13.900
是不是遇到了GS

01:01:14.000 --> 01:01:14.700
遇到了

01:01:15.600 --> 01:01:16.500
script是元素

01:01:17.800 --> 01:01:18.300
于是呢

01:01:18.300 --> 01:01:19.000
由于他是要

01:01:19.000 --> 01:01:19.900
他是一个外链

01:01:19.900 --> 01:01:22.300
是不是他要又要发送一个请求去读这个东西

01:01:22.300 --> 01:01:22.700
对吧

01:01:22.700 --> 01:01:23.600
是不是读这个东西

01:01:23.600 --> 01:01:25.400
所以说他又会发送第二次请求

01:01:25.800 --> 01:01:26.600
他去读什么呢

01:01:26.600 --> 01:01:27.300
读这个地方

01:01:27.600 --> 01:01:28.600
太色角GS

01:01:29.100 --> 01:01:29.600
对吧

01:01:30.000 --> 01:01:31.500
那么第二这个东西是不是读不到

01:01:31.500 --> 01:01:32.500
没有这个东西对吧

01:01:32.500 --> 01:01:33.700
每是不是没有这个东西

01:01:33.800 --> 01:01:34.200
好

01:01:34.200 --> 01:01:36.200
那么我在这里如果说我在这里写上一个

01:01:36.200 --> 01:01:37.500
太色角GS文件

01:01:37.600 --> 01:01:38.300
二二子

01:01:38.500 --> 01:01:39.200
一二三

01:01:39.600 --> 01:01:41.000
那么请问大家一个问题

01:01:41.200 --> 01:01:44.000
这个代码会不会会不会就中在流浪期里边运行

01:01:46.390 --> 01:01:47.990
会不会在流浪期里边运行

01:01:50.700 --> 01:01:51.500
会不会呢

01:01:52.800 --> 01:01:53.500
好好想想

01:01:56.560 --> 01:01:57.060
会不会

01:01:57.760 --> 01:01:58.860
是不会的对吧

01:01:58.860 --> 01:02:00.460
你不要把这个事情

01:02:00.860 --> 01:02:02.260
想得太理所当然了

01:02:03.060 --> 01:02:04.860
我们的请求是被谁结获的

01:02:04.860 --> 01:02:06.460
是被这个express结获的

01:02:06.560 --> 01:02:08.660
我们这个express里面是不是只结获了

01:02:08.660 --> 01:02:09.360
这个种请求

01:02:09.360 --> 01:02:11.060
凭什么要结获这个请求呢

01:02:11.060 --> 01:02:11.560
凭什么呢

01:02:11.560 --> 01:02:12.060
你告诉我

01:02:12.960 --> 01:02:14.260
我有没有写这种函数

01:02:14.660 --> 01:02:15.060
你想一想

01:02:15.060 --> 01:02:16.160
我有没有写这个函数

01:02:17.860 --> 01:02:19.560
我有没有写这个写GunTest了

01:02:19.560 --> 01:02:20.360
这也是个函数

01:02:20.360 --> 01:02:21.160
没有写吗

01:02:21.260 --> 01:02:21.460
对不对

01:02:21.460 --> 01:02:22.760
没有写他就不会结获

01:02:23.360 --> 01:02:23.760
没了意思吧

01:02:23.760 --> 01:02:24.560
他就不会结获

01:02:24.560 --> 01:02:25.560
不信你自己访问一下

01:02:25.560 --> 01:02:26.560
现在有这个文件了吗

01:02:26.560 --> 01:02:27.460
Test.js

01:02:27.460 --> 01:02:28.960
我去访问一下Test.js

01:02:29.660 --> 01:02:30.460
能访问到吗

01:02:30.460 --> 01:02:31.360
根本就访问不到

01:02:31.360 --> 01:02:32.760
Connards.test.js

01:02:32.760 --> 01:02:33.560
的他默认行为

01:02:33.560 --> 01:02:33.860
对吧

01:02:33.860 --> 01:02:34.460
给他的

01:02:34.460 --> 01:02:35.660
给我的结果是404

01:02:36.460 --> 01:02:37.560
给我的结果是404

01:02:38.060 --> 01:02:39.360
以后我们来说这个消息吧

01:02:39.560 --> 01:02:40.760
是不是访问不到

01:02:41.160 --> 01:02:41.660
因此呢

01:02:41.660 --> 01:02:43.760
如果说现在我们现在的解法

01:02:43.860 --> 01:02:44.460
现在的解法

01:02:44.460 --> 01:02:45.560
他只能访问首页

01:02:45.960 --> 01:02:47.460
你看他会请那个什么效果

01:02:47.860 --> 01:02:49.160
首页访问这个页面没问题

01:02:49.160 --> 01:02:50.960
但是Test.js拿不到

01:02:51.160 --> 01:02:51.860
没有东西

01:02:51.860 --> 01:02:52.860
你看服务有响应吗

01:02:52.860 --> 01:02:53.860
根本就没有响应

01:02:53.960 --> 01:02:54.360
是吧

01:02:55.060 --> 01:02:56.660
这个这个这一次请求得不到

01:02:56.660 --> 01:02:58.060
任何服务器的响应结果

01:02:58.260 --> 01:02:58.660
对不对

01:02:58.660 --> 01:03:01.060
所以说一定要从本质上去看问题啊

01:03:01.360 --> 01:03:01.960
那么现在呢

01:03:01.960 --> 01:03:03.260
我们如果说要给他

01:03:03.260 --> 01:03:04.260
现在我们知道了啊

01:03:04.260 --> 01:03:05.360
我给的一个页面

01:03:05.460 --> 01:03:06.460
页面里边你要

01:03:06.760 --> 01:03:08.860
你又要重新请求这个Test.js

01:03:08.860 --> 01:03:09.260
ok

01:03:09.260 --> 01:03:10.660
那我再来处理这个请求

01:03:11.860 --> 01:03:13.060
他这段是有解释请求

01:03:13.060 --> 01:03:14.060
Test.js

01:03:15.160 --> 01:03:15.660
方形

01:03:16.060 --> 01:03:16.860
race

01:03:17.060 --> 01:03:18.460
那么接下来我要给他一个啥呢

01:03:18.460 --> 01:03:19.860
我要给他一段js

01:03:19.860 --> 01:03:20.360
你看啊

01:03:20.360 --> 01:03:21.460
现在我要给他一段js

01:03:21.460 --> 01:03:21.960
我怎么给

01:03:21.960 --> 01:03:22.960
我就可以用这种方式

01:03:23.060 --> 01:03:23.460
header

01:03:23.760 --> 01:03:24.960
设置一个消息头

01:03:24.960 --> 01:03:25.660
消息头是什么

01:03:25.660 --> 01:03:26.660
content tag

01:03:28.060 --> 01:03:28.660
为什么呢

01:03:28.660 --> 01:03:29.760
为application

01:03:30.360 --> 01:03:31.860
接java script

01:03:31.960 --> 01:03:32.160
对吧

01:03:32.160 --> 01:03:32.860
我们刚才说了

01:03:33.260 --> 01:03:35.160
给他的类型是一个js代码

01:03:35.260 --> 01:03:35.860
好来吧

01:03:36.160 --> 01:03:37.860
send发送消息

01:03:38.260 --> 01:03:39.060
那么这是js代码

01:03:39.060 --> 01:03:40.560
我们就二大只一二三

01:03:41.860 --> 01:03:42.960
你看现在就可以了

01:03:43.560 --> 01:03:44.360
现在就可以了

01:03:45.560 --> 01:03:46.060
稍息

01:03:46.360 --> 01:03:47.360
是不是二大只一二三

01:03:47.760 --> 01:03:48.260
对吧

01:03:48.360 --> 01:03:48.760
为什么

01:03:48.760 --> 01:03:49.960
因为现在你去请求这个地址

01:03:49.960 --> 01:03:50.660
能请求吗

01:03:50.660 --> 01:03:51.560
是不是可以请求了

01:03:51.560 --> 01:03:53.660
因为这个地址是不是可以被这个地方解惑

01:03:53.660 --> 01:03:54.760
跟这个文件有关系吗

01:03:54.760 --> 01:03:55.860
一毛钱关系都没有

01:03:56.960 --> 01:03:58.260
所以说你一定要

01:03:58.960 --> 01:04:00.260
理解本质

01:04:00.260 --> 01:04:01.560
本质就是一个函数代的处理

01:04:01.560 --> 01:04:02.860
这个函数所谓一遍怎么处理

01:04:03.160 --> 01:04:04.060
当然你可以

01:04:04.060 --> 01:04:04.760
可不可以有文件

01:04:04.760 --> 01:04:05.260
可以有文件

01:04:05.260 --> 01:04:06.060
我把这些文件

01:04:06.260 --> 01:04:08.060
我露的建设里面不是可以读文件吗

01:04:08.060 --> 01:04:09.460
我把文件内容读出来给你

01:04:09.460 --> 01:04:10.160
也可以

01:04:10.560 --> 01:04:13.460
但是本质上是跟文件没有一毛钱关系的

01:04:13.760 --> 01:04:14.860
就是一个函数代的处理

01:04:14.860 --> 01:04:15.760
他给他啥就

01:04:15.860 --> 01:04:17.160
就想用啥

01:04:17.860 --> 01:04:18.460
原来意思

01:04:18.860 --> 01:04:20.860
他不是说南间根本就不存在南间

01:04:21.160 --> 01:04:22.760
你没有一个推施就能访问了吗

01:04:23.860 --> 01:04:25.460
你没有一个推施就能访问了吗

01:04:25.460 --> 01:04:26.260
就起的乖了

01:04:26.260 --> 01:04:27.860
都没有人都没有人监听

01:04:27.960 --> 01:04:28.960
都没有服务其

01:04:28.960 --> 01:04:29.760
任何服务其启动

01:04:29.760 --> 01:04:30.660
就凭什么能够访问

01:04:30.660 --> 01:04:32.060
这个贴者的介绍里面

01:04:33.260 --> 01:04:34.260
没有保存

01:04:35.160 --> 01:04:36.260
那凭什么能访问的

01:04:36.460 --> 01:04:37.360
不可能能访问的

01:04:37.360 --> 01:04:39.360
不是说南间根本就压隔就没有

01:04:39.860 --> 01:04:42.860
压隔就没有提供文件访问的功能

01:04:43.160 --> 01:04:43.960
原来的意思吗

01:04:43.960 --> 01:04:45.260
更加谈不上南间的

01:04:45.360 --> 01:04:46.360
这个文件访问的功能

01:04:46.360 --> 01:04:47.960
你们是怎么来得出来的呢

01:04:47.960 --> 01:04:49.560
是因为有些工具

01:04:49.660 --> 01:04:52.260
比方说像你们安装的VS扣的插件

01:04:52.260 --> 01:04:53.860
你12号给你做了

01:04:53.860 --> 01:04:56.360
或者是有一些你们以前可能有些同学开发过

01:04:56.360 --> 01:04:58.860
5U这个东西好像给你做了

01:04:58.960 --> 01:05:00.260
好像是给你做了

01:05:00.360 --> 01:05:00.860
对吧

01:05:00.960 --> 01:05:02.260
你好像有这种感觉

01:05:02.260 --> 01:05:04.260
实际上根本就不会是这么回事

01:05:04.560 --> 01:05:06.260
如果说你是真实的开发服务其的时候

01:05:06.260 --> 01:05:07.560
这些东西根本就不存在

01:05:10.180 --> 01:05:12.680
这是根本跟文件就没有任何关系

01:05:12.680 --> 01:05:13.780
一点关系都没有

01:05:16.660 --> 01:05:17.960
这是关于这一块

01:05:18.460 --> 01:05:19.360
今天我们来看

01:05:19.960 --> 01:05:21.260
刚才说到header

01:05:21.460 --> 01:05:21.960
然后呢

01:05:21.960 --> 01:05:22.760
还有一个消息头

01:05:22.760 --> 01:05:23.260
讲都可以讲

01:05:23.260 --> 01:05:26.160
我们一会在下面再说

01:05:26.360 --> 01:05:27.960
现在另外一个方法叫type

01:05:28.260 --> 01:05:30.660
这个东西可以快捷地设置康城太平

01:05:30.960 --> 01:05:31.660
啥意思呢

01:05:32.560 --> 01:05:34.160
也就是我们这里可以这样自动写法

01:05:34.260 --> 01:05:35.660
因为康城太平有的时候呢

01:05:35.660 --> 01:05:36.860
比较常见啊

01:05:36.860 --> 01:05:38.760
我们设置他的场景的比较多

01:05:38.760 --> 01:05:40.160
我们可以用这种方式type

01:05:40.860 --> 01:05:42.760
我们可以给一个文件名的后维

01:05:42.760 --> 01:05:44.360
比方说给他一个第二介石

01:05:44.360 --> 01:05:45.960
或者是直接给他一个介石

01:05:45.960 --> 01:05:47.960
他会自动帮我们去做这件事

01:05:48.060 --> 01:05:48.360
对吧

01:05:48.360 --> 01:05:49.360
等效于

01:05:50.360 --> 01:05:53.260
等效于这个

01:05:53.560 --> 01:05:54.360
那是一样的

01:05:54.660 --> 01:05:55.360
来看一下吧

01:05:57.230 --> 01:05:57.830
刷新

01:05:58.830 --> 01:05:59.630
你看这个

01:06:00.330 --> 01:06:00.930
响应

01:06:01.230 --> 01:06:01.930
响应

01:06:01.930 --> 01:06:02.830
content type

01:06:03.330 --> 01:06:04.830
所以application JavaScript

01:06:04.830 --> 01:06:06.130
而且他给你带了一个编码

01:06:06.230 --> 01:06:06.630
对不对

01:06:06.630 --> 01:06:07.530
就是一样的效果

01:06:07.530 --> 01:06:07.930
对吧

01:06:08.130 --> 01:06:09.130
就是一个简化

01:06:09.130 --> 01:06:10.230
一个简化的写法

01:06:10.430 --> 01:06:11.430
好继续看

01:06:12.030 --> 01:06:12.530
下一个

01:06:13.130 --> 01:06:14.430
下一个Status

01:06:14.430 --> 01:06:17.130
表示的是响应行中的消息码

01:06:17.630 --> 01:06:18.230
就这

01:06:19.230 --> 01:06:19.730
就这

01:06:20.030 --> 01:06:20.630
就这个玩意

01:06:21.430 --> 01:06:23.430
这个玩意会影响瀏覽器的行为

01:06:23.730 --> 01:06:25.030
还会影响瀏覽器的

01:06:25.930 --> 01:06:26.930
消息码有很多

01:06:26.930 --> 01:06:27.730
常见的消息码

01:06:27.730 --> 01:06:28.730
我这里写了三个

01:06:28.730 --> 01:06:29.630
一个是两半

01:06:29.630 --> 01:06:30.930
就正常的一切ok

01:06:30.930 --> 01:06:31.730
没有什么问题

01:06:31.730 --> 01:06:32.830
你正常该怎么做

01:06:32.830 --> 01:06:33.530
你怎么做

01:06:33.830 --> 01:06:34.930
一个是404

01:06:34.930 --> 01:06:36.130
表示说我这里出问题了

01:06:36.130 --> 01:06:37.730
你要请求的资源是不存在的

01:06:37.730 --> 01:06:38.430
比方说这个

01:06:38.830 --> 01:06:39.830
Test的介石

01:06:39.930 --> 01:06:40.730
我就告诉你

01:06:41.230 --> 01:06:42.230
我就告诉你不存在

01:06:44.030 --> 01:06:44.430
Ris

01:06:44.630 --> 01:06:46.030
叫什么Status

01:06:47.930 --> 01:06:48.930
404

01:06:48.930 --> 01:06:49.830
告诉你不存在

01:06:50.230 --> 01:06:50.830
然后呢

01:06:51.930 --> 01:06:53.930
我给你发送一个字幕刷

01:06:56.700 --> 01:06:57.600
这里我们刷新

01:06:58.300 --> 01:06:59.100
得到这个结果了

01:06:59.100 --> 01:07:00.900
但是你看这里是不是一个404

01:07:00.900 --> 01:07:01.300
对吧

01:07:01.300 --> 01:07:02.500
它是一个not found

01:07:02.500 --> 01:07:03.500
如果说你没有给他

01:07:03.500 --> 01:07:04.700
没有给他发送任何东西

01:07:05.500 --> 01:07:06.900
如果说你没有给他发送任何东西

01:07:07.600 --> 01:07:08.100
刷新

01:07:08.100 --> 01:07:10.100
那么你让其他就会显示一个默认页面

01:07:10.100 --> 01:07:11.500
如果说你没有给他消息体的话

01:07:11.500 --> 01:07:13.300
他就他就会显示一个默认页面

01:07:13.900 --> 01:07:14.300
原理是吧

01:07:14.300 --> 01:07:15.300
就找不到网页

01:07:15.300 --> 01:07:16.000
404

01:07:16.000 --> 01:07:17.300
但是实际上服务器有没有处理

01:07:17.300 --> 01:07:18.100
有处理啊

01:07:18.100 --> 01:07:18.900
服务器实际上有处理

01:07:18.900 --> 01:07:20.300
他只是服务器没给力而已

01:07:20.700 --> 01:07:21.900
这样这些东西啊

01:07:21.900 --> 01:07:23.200
我们就是通过今天的则课

01:07:23.200 --> 01:07:25.200
一定要认识到本质是什么

01:07:25.200 --> 01:07:27.400
本质就是客服装贴为一个字幕刷

01:07:27.400 --> 01:07:28.300
服务器给他一个字幕刷

01:07:28.900 --> 01:07:31.100
通过这个通过去设置这些字幕刷里面

01:07:31.100 --> 01:07:32.000
特殊的值

01:07:32.100 --> 01:07:33.600
然后触发流量器的不同行为

01:07:33.600 --> 01:07:34.500
这就是它的本质

01:07:35.800 --> 01:07:37.300
不要去想当然认为服务器

01:07:37.300 --> 01:07:38.600
一定得有什么样的文件

01:07:38.600 --> 01:07:40.100
一定是得什么样的结构

01:07:40.100 --> 01:07:41.300
纯粹就是一个字幕刷

01:07:41.700 --> 01:07:43.400
给它通过这个字幕刷的不同的位置

01:07:43.400 --> 01:07:44.300
的设置

01:07:44.300 --> 01:07:45.900
来触发流量器的不同行为

01:07:45.900 --> 01:07:46.700
就这么个意思

01:07:47.700 --> 01:07:49.700
那么这是通过人消息码来控制

01:07:49.700 --> 01:07:51.100
比方说还有一个302消息码

01:07:51.100 --> 01:07:52.600
302消息码就是这样子

01:07:53.300 --> 01:07:56.300
高速流量器你去请求另外一个地址

01:07:56.600 --> 01:07:57.900
比方说你去请求百度

01:07:58.100 --> 01:07:59.900
比方说我们在这里可以用这种方式

01:08:00.300 --> 01:08:01.300
来看一个好玩的

01:08:03.820 --> 01:08:04.620
我们在这里呢

01:08:05.120 --> 01:08:05.920
使用一个Race

01:08:06.620 --> 01:08:07.420
换一个地址吧

01:08:08.020 --> 01:08:08.720
换一个地址

01:08:09.420 --> 01:08:10.920
APP get

01:08:11.320 --> 01:08:12.920
比方说一个news

01:08:18.420 --> 01:08:21.020
这里面我们直接给它响应一个Status

01:08:21.420 --> 01:08:22.220
302

01:08:22.620 --> 01:08:23.320
302

01:08:23.720 --> 01:08:26.220
然后再设置一个header

01:08:27.420 --> 01:08:28.620
location

01:08:28.620 --> 01:08:30.620
302要配合这个location来用

01:08:31.820 --> 01:08:32.820
挑转到

01:08:33.020 --> 01:08:33.820
agdp

01:08:34.320 --> 01:08:36.820
doe.qq.com

01:08:37.320 --> 01:08:37.920
啥意思呢

01:08:38.020 --> 01:08:39.620
高速流量器最后不要忘了

01:08:39.620 --> 01:08:40.420
叫send

01:08:40.820 --> 01:08:43.620
send哪怕你发出一个空的小举头都要玩

01:08:43.620 --> 01:08:45.120
不然你不调用这个东西的话

01:08:45.120 --> 01:08:46.920
那么就表示响应还没有结束

01:08:47.620 --> 01:08:48.420
交流率是send

01:08:48.720 --> 01:08:49.720
那么表示什么意思呢

01:08:49.720 --> 01:08:51.720
高速流量器我给你的消息码

01:08:51.720 --> 01:08:52.920
是多少是302

01:08:53.320 --> 01:08:54.420
这个地方是302

01:08:54.620 --> 01:08:56.220
流量器只要一看到302

01:08:56.320 --> 01:08:56.920
他就认为

01:08:57.420 --> 01:08:58.820
服务器的意思是说

01:08:58.920 --> 01:09:00.420
我这个资源已经不存在了

01:09:01.020 --> 01:09:03.120
然后呢服务器会给我一个消息头

01:09:03.220 --> 01:09:04.520
就是location的消息头

01:09:04.620 --> 01:09:05.520
这个消息头呢

01:09:05.620 --> 01:09:06.520
企图一个地址

01:09:06.620 --> 01:09:07.520
那么流量器一看

01:09:07.720 --> 01:09:08.520
给我的302

01:09:08.520 --> 01:09:10.320
表示你说你的资源不存在了

01:09:10.320 --> 01:09:11.720
让我在这个地方去找

01:09:11.920 --> 01:09:13.720
那么流量器他就会重新去访问他

01:09:13.820 --> 01:09:14.520
你看一下吧

01:09:14.620 --> 01:09:15.520
我现在去访问

01:09:17.220 --> 01:09:17.720
news

01:09:19.530 --> 01:09:20.130
一会说

01:09:20.430 --> 01:09:21.730
你要是跑跑这儿了

01:09:21.930 --> 01:09:22.330
对吧

01:09:22.330 --> 01:09:23.830
这就是个302消息头

01:09:24.130 --> 01:09:25.130
发送给客户端过来

01:09:25.130 --> 01:09:26.030
客户端流量器一看

01:09:26.030 --> 01:09:26.830
他发现是302

01:09:26.830 --> 01:09:28.130
他就会重新定向到这个地址

01:09:28.130 --> 01:09:29.130
叫做重定向

01:09:30.230 --> 01:09:31.430
这都是他的本质

01:09:31.630 --> 01:09:32.430
这是他的本质

01:09:32.930 --> 01:09:33.630
那么这边呢

01:09:33.630 --> 01:09:34.730
我们也可以

01:09:34.730 --> 01:09:36.530
可以使用race里面的redirect

01:09:36.730 --> 01:09:38.230
用这种方式来进行重定向

01:09:38.230 --> 01:09:39.130
直接写一个

01:09:39.330 --> 01:09:40.430
直接写一个这个玩意儿

01:09:41.030 --> 01:09:41.930
直接写一个这个玩意儿

01:09:41.930 --> 01:09:44.330
他会帮助你去做同样的事情

01:09:44.330 --> 01:09:46.330
只差一个减发版而已

01:09:46.830 --> 01:09:48.030
ok 这是关于

01:09:48.730 --> 01:09:49.230
这个消息

01:09:49.630 --> 01:09:50.830
随便说几个消息

01:09:51.630 --> 01:09:52.930
好 最后我们一个练习

01:09:53.030 --> 01:09:54.030
就今天晚上我们把

01:09:54.130 --> 01:09:55.130
今天晚上的东西呢

01:09:55.230 --> 01:09:57.030
用一个练习来总结一下

01:09:57.230 --> 01:09:58.830
今天晚上我们主要的任务

01:09:59.230 --> 01:10:00.930
还真不是认识express

01:10:00.930 --> 01:10:03.230
是通过express去认识atb协议

01:10:03.630 --> 01:10:04.930
对于前段开发者而言

01:10:04.930 --> 01:10:06.830
atb协议无论你去怎么说

01:10:06.830 --> 01:10:07.830
他有多重要

01:10:08.330 --> 01:10:09.130
都不违过

01:10:09.530 --> 01:10:12.430
因为他涉及到前后端交互的双方

01:10:12.630 --> 01:10:15.230
你要如果说你对atb协议理解的越深

01:10:15.330 --> 01:10:16.130
越深刻

01:10:16.330 --> 01:10:17.830
以操作的服务器也好

01:10:17.830 --> 01:10:18.930
操作客户端也好

01:10:18.930 --> 01:10:20.930
就越得心应受

01:10:21.130 --> 01:10:22.630
处理一些非常雕算的问题呢

01:10:22.630 --> 01:10:23.530
也不至于慌

01:10:23.730 --> 01:10:24.530
不至于慌呢

01:10:25.830 --> 01:10:27.130
好 咱们来做一个练习

01:10:27.130 --> 01:10:29.430
让你去开发一个静态资源服务器

01:10:29.430 --> 01:10:30.130
啥意思呢

01:10:31.030 --> 01:10:31.630
说白了

01:10:31.630 --> 01:10:33.430
就是让你去编写一个函数

01:10:33.730 --> 01:10:34.830
我把这些东西全部去掉

01:10:37.320 --> 01:10:38.820
就让你编写一个函数

01:10:40.120 --> 01:10:41.020
这个函数呢

01:10:41.020 --> 01:10:42.720
能够根据请求的路径

01:10:42.820 --> 01:10:45.620
响应某个文件中的对应文件

01:10:45.620 --> 01:10:47.420
把文件内容发给客户端

01:10:47.920 --> 01:10:48.520
啥意思

01:10:48.820 --> 01:10:49.920
我主要的例子啊

01:10:50.020 --> 01:10:51.820
比方说客户端请求这个例子

01:10:53.120 --> 01:10:54.320
那我要给他啥呀

01:10:54.320 --> 01:10:55.420
我就给他文件

01:10:55.420 --> 01:10:56.520
这个文件的内容

01:10:57.020 --> 01:10:58.920
就是我们的服务器上这个文件的内容

01:10:58.920 --> 01:11:00.120
比方说我这里有个文件夹

01:11:00.120 --> 01:11:00.720
public

01:11:02.320 --> 01:11:03.520
这里边有一个文件

01:11:03.620 --> 01:11:05.220
index.atme

01:11:05.820 --> 01:11:06.820
这里边有一个文件

01:11:06.920 --> 01:11:07.920
H1

01:11:09.220 --> 01:11:10.120
有这么一个文件

01:11:10.520 --> 01:11:12.620
那么我如果说我们请求的路径

01:11:12.620 --> 01:11:13.620
是这个路径的话

01:11:17.780 --> 01:11:19.580
如果说是请求的这个路径的话

01:11:19.580 --> 01:11:21.480
那么我要给他什么文件呢

01:11:21.480 --> 01:11:24.480
给他public目录下面的index.atme

01:11:25.480 --> 01:11:26.580
给他这个文件内容

01:11:27.880 --> 01:11:28.580
或者是

01:11:28.580 --> 01:11:29.980
比如说他可以省略文件名

01:11:29.980 --> 01:11:30.780
省略文件名的话

01:11:30.780 --> 01:11:32.380
我们默认为应这个设计来听没有

01:11:32.480 --> 01:11:33.780
如果当然如果说他给我

01:11:33.780 --> 01:11:34.980
直接给我这个文件名的话

01:11:34.980 --> 01:11:36.580
我给他的文件的还是这个文件

01:11:37.780 --> 01:11:38.480
没了意思吧

01:11:39.380 --> 01:11:40.380
还是这个文件

01:11:41.180 --> 01:11:43.380
好如果说他给我的是

01:11:43.380 --> 01:11:44.080
呃

01:11:44.080 --> 01:11:45.380
比方说这里呢有个ges

01:11:45.380 --> 01:11:47.480
呃比方说这里还有一个css文件夹

01:11:48.180 --> 01:11:49.080
css文件夹

01:11:49.380 --> 01:11:50.380
呃这里边还有一个

01:11:50.680 --> 01:11:51.680
a.css

01:11:52.680 --> 01:11:54.080
呃比方说这里用body

01:11:57.170 --> 01:11:57.870
background

01:11:58.670 --> 01:11:59.270
sblue

01:12:00.270 --> 01:12:01.570
啊比方说吧

01:12:01.570 --> 01:12:04.070
好那么如果说我请求的请求的路径呢

01:12:04.070 --> 01:12:04.570
是这个

01:12:05.370 --> 01:12:08.270
呃css a.css

01:12:08.270 --> 01:12:09.870
那么我给他什么文件内容呢

01:12:09.870 --> 01:12:11.270
我就给他一个

01:12:11.270 --> 01:12:13.270
public目录下面的css

01:12:13.270 --> 01:12:15.270
目录下面的a.css文件内容

01:12:15.770 --> 01:12:17.770
这就是你们比较呃就是你们

01:12:17.870 --> 01:12:18.570
心里面

01:12:19.170 --> 01:12:21.270
感觉的啊应该服役的样子对吧

01:12:21.270 --> 01:12:22.270
所以说像这些东西呢

01:12:22.270 --> 01:12:24.570
全确都是我们写的啊写出来了

01:12:24.570 --> 01:12:26.770
不是说天生就具有这样的功能

01:12:27.170 --> 01:12:28.470
天生的功能就很简单

01:12:28.470 --> 01:12:30.170
你给我一个字母书我给你一个字母书

01:12:30.370 --> 01:12:31.870
你给我一个东西我给你一个东西

01:12:32.070 --> 01:12:33.570
不存在任何其他的规则了

01:12:34.270 --> 01:12:35.070
那么这些主意词呢

01:12:35.070 --> 01:12:37.770
都是在我们在这个规则基础上发展出来的

01:12:37.770 --> 01:12:38.270
对吧

01:12:38.270 --> 01:12:39.270
你给我请求这样的路径

01:12:39.270 --> 01:12:40.570
我就给你这样的文件

01:12:40.570 --> 01:12:42.570
当然如果说你给我一个不存在的

01:12:42.570 --> 01:12:44.070
比方说你给我一个ges

01:12:44.370 --> 01:12:45.170
a.cs

01:12:45.170 --> 01:12:46.370
是不是不存在

01:12:46.870 --> 01:12:47.870
如果说不存在的话

01:12:47.870 --> 01:12:49.170
那么我就是给你什么呢

01:12:49.170 --> 01:12:50.470
给你一个404

01:12:50.470 --> 01:12:51.070
找不到

01:12:51.770 --> 01:12:52.270
对不对

01:12:52.870 --> 01:12:54.170
好我们就是要做这件事

01:12:54.170 --> 01:12:55.270
那么这件事怎么做

01:12:56.070 --> 01:12:56.570
怎么做

01:12:57.370 --> 01:12:59.370
由于这个处理逻辑是一样的

01:12:59.370 --> 01:13:00.770
所以说我们可以写出这样的代码

01:13:00.770 --> 01:13:01.370
app

01:13:02.270 --> 01:13:02.670
get

01:13:03.670 --> 01:13:04.770
这里表写上一个什么呢

01:13:04.770 --> 01:13:05.570
一个型号

01:13:06.170 --> 01:13:07.970
型号表示匹配所有请求

01:13:09.950 --> 01:13:12.550
表示匹配所有请求

01:13:13.050 --> 01:13:14.550
所有get的请求我们都匹配

01:13:14.650 --> 01:13:16.150
然后通过一个函数来处理

01:13:20.690 --> 01:13:22.190
有同学不是想听静态资源夫妻

01:13:22.190 --> 01:13:22.890
自己怎么写吗

01:13:22.890 --> 01:13:23.890
我们现在就来手写

01:13:25.390 --> 01:13:26.990
好那么这里的逻辑是什么呢

01:13:27.690 --> 01:13:28.490
这个逻辑

01:13:30.660 --> 01:13:32.660
我们为了看着舒服

01:13:32.660 --> 01:13:34.060
我们甚至可以把这个函数呢

01:13:34.060 --> 01:13:35.560
单独来提一个函数出来

01:13:36.360 --> 01:13:36.860
handle

01:13:37.760 --> 01:13:38.360
handle

01:13:40.660 --> 01:13:41.660
我们把这个函数放这

01:13:42.860 --> 01:13:44.060
哎这样子写可不可以

01:13:44.460 --> 01:13:45.360
可不可以这样子写

01:13:47.060 --> 01:13:47.960
这样子写行不行

01:13:50.060 --> 01:13:50.960
这样子写行不行

01:13:52.060 --> 01:13:53.760
这可以都是都是GS基础

01:13:53.760 --> 01:13:54.760
你无非就是个函数

01:13:54.760 --> 01:13:56.060
我写个函数给他不一样嘛

01:13:56.060 --> 01:13:56.560
对不对

01:13:56.760 --> 01:13:57.460
函数

01:13:57.960 --> 01:13:59.260
处理处理程序

01:13:59.460 --> 01:13:59.860
好

01:13:59.860 --> 01:14:01.060
那么现在我们来写这个函数

01:14:01.060 --> 01:14:02.260
这个函数逻辑是啥

01:14:03.260 --> 01:14:04.060
逻辑是啥呢

01:14:05.160 --> 01:14:05.860
第一步

01:14:07.900 --> 01:14:09.200
我们先不说什么API

01:14:09.200 --> 01:14:10.600
我们先把逻辑理清楚

01:14:11.000 --> 01:14:13.200
根据什么请求路径

01:14:14.100 --> 01:14:16.000
得到文件路径

01:14:16.300 --> 01:14:17.200
舒服要做这么一件事

01:14:17.600 --> 01:14:19.300
根据请你要把这个路径

01:14:19.300 --> 01:14:21.700
至少你要把这个路径转换成这个路径

01:14:21.900 --> 01:14:22.300
对不对

01:14:22.300 --> 01:14:23.800
说要得到一个文件路径

01:14:24.800 --> 01:14:25.600
说这个逻辑

01:14:26.000 --> 01:14:27.100
好拿到这个文件路径

01:14:27.100 --> 01:14:28.100
那么这个怎么拿呢

01:14:28.200 --> 01:14:29.600
怎么拿到文件路径呢

01:14:29.800 --> 01:14:31.200
首先我们怎么拿拿请求路径

01:14:31.200 --> 01:14:32.140
请求路径是不是很简单

01:14:32.140 --> 01:14:33.100
rake-pass吗

01:14:33.200 --> 01:14:34.000
我刚来学校的

01:14:34.100 --> 01:14:36.200
所以通过这个拿拿拿拿的什么

01:14:36.300 --> 01:14:37.500
拿请求路径

01:14:37.800 --> 01:14:38.000
对吧

01:14:38.000 --> 01:14:39.200
你请求的路径是这个

01:14:39.800 --> 01:14:42.200
那么如何把这个请求路径变成这个路径呢

01:14:42.400 --> 01:14:44.600
是不是要通过一个函数啊

01:14:44.600 --> 01:14:45.300
我们在

01:14:46.100 --> 01:14:47.600
load的第一节课学习的

01:14:48.400 --> 01:14:50.300
说通过一个内置模块pass

01:14:51.300 --> 01:14:53.200
这个内置模块pass里边呢

01:14:53.700 --> 01:14:53.900
啊

01:14:53.900 --> 01:14:55.700
这个内置模块pass里边的一个方法

01:14:56.200 --> 01:14:56.800
pass

01:14:57.100 --> 01:14:57.700
with all

01:14:57.700 --> 01:14:58.400
还记得吗

01:14:59.500 --> 01:15:01.300
从当前目录出发

01:15:02.300 --> 01:15:03.700
从当前目录出发

01:15:04.100 --> 01:15:06.000
就是我们当前模块的目录

01:15:06.100 --> 01:15:06.900
是不是跟目录

01:15:07.000 --> 01:15:08.800
那么跟目录出发去找什么呢

01:15:08.900 --> 01:15:10.400
找public目录

01:15:11.400 --> 01:15:13.200
然后从public目录里边

01:15:13.200 --> 01:15:15.200
是把这个请求路径拼接进去

01:15:15.900 --> 01:15:16.600
是不是这样子

01:15:16.600 --> 01:15:18.200
是把这个请求路径拼接进去

01:15:18.400 --> 01:15:18.600
好

01:15:18.600 --> 01:15:19.900
咱们来看一下得到的结果

01:15:20.100 --> 01:15:21.200
就是文件路径

01:15:21.200 --> 01:15:22.400
是不是这个是文件路径

01:15:22.600 --> 01:15:23.100
file in

01:15:25.690 --> 01:15:26.090
好这里呢

01:15:26.090 --> 01:15:27.190
我们输出file in

01:15:28.590 --> 01:15:29.290
好保存啊

01:15:29.290 --> 01:15:29.990
咱们来看一下

01:15:30.490 --> 01:15:30.790
现在呢

01:15:30.790 --> 01:15:31.590
我们在这边

01:15:44.660 --> 01:15:45.860
好这边我们刷新啊

01:15:45.960 --> 01:15:46.560
一刷新

01:15:46.960 --> 01:15:48.560
然后这边说打印出来的第一盘

01:15:48.560 --> 01:15:48.960
哎

01:15:49.260 --> 01:15:50.960
第一盘的task的解释

01:15:50.960 --> 01:15:51.360
不对

01:15:51.360 --> 01:15:52.560
不对不对不对不对不对

01:15:53.260 --> 01:15:54.260
那这个路径不对

01:15:54.260 --> 01:15:55.560
我看一下哪里写错了啊

01:15:55.860 --> 01:15:57.460
当前目录

01:15:57.860 --> 01:15:59.560
当前目录下面的

01:16:00.060 --> 01:16:02.260
public

01:16:03.160 --> 01:16:04.760
啊明白了啊

01:16:04.760 --> 01:16:06.560
因为这个路径前面有一个鞋杠

01:16:06.660 --> 01:16:08.560
啊就这个路径前面有一个鞋杠

01:16:09.260 --> 01:16:10.660
啊因为这个路径他是这样子啊

01:16:10.660 --> 01:16:11.960
一个前面有一个鞋杠

01:16:12.060 --> 01:16:13.660
所以这个鞋杠导致这个问题啊

01:16:13.660 --> 01:16:14.260
所以说我们

01:16:14.460 --> 01:16:15.560
因为鞋杠他表示的是

01:16:15.660 --> 01:16:17.360
跟目录是盘幅的跟目录啊

01:16:17.360 --> 01:16:18.560
所以说我们这种方式啊

01:16:18.560 --> 01:16:19.560
把拼接一下

01:16:19.760 --> 01:16:22.060
也说我们把这个把这个req pass呢

01:16:22.060 --> 01:16:23.460
就是如果说如果说啊

01:16:23.660 --> 01:16:24.960
如果说这个req pass呢

01:16:25.360 --> 01:16:25.960
嗯

01:16:25.960 --> 01:16:26.760
他是这个

01:16:26.760 --> 01:16:28.060
他是六四

01:16:28.760 --> 01:16:30.460
那么我们要把它拼接成为什么呢

01:16:30.560 --> 01:16:32.460
拼接成为public鞋杠六四

01:16:32.460 --> 01:16:32.760
对吧

01:16:32.760 --> 01:16:35.560
那么把这个东西跟这个东西混合成一个决定路径

01:16:35.760 --> 01:16:35.960
对吧

01:16:35.960 --> 01:16:36.960
这是我们之前学过的

01:16:36.960 --> 01:16:38.560
把一个路径变成一个决定路径

01:16:38.760 --> 01:16:39.860
好保存啊重新来

01:16:40.260 --> 01:16:41.460
好你看现在是不是正确了

01:16:42.160 --> 01:16:42.860
不正确了

01:16:43.460 --> 01:16:44.260
好再来啊

01:16:44.260 --> 01:16:45.260
我们再换个地址

01:16:45.360 --> 01:16:47.460
比方说ABCD

01:16:48.460 --> 01:16:48.960
回车

01:16:49.260 --> 01:16:50.360
你看得到路径

01:16:50.360 --> 01:16:51.260
是不是这个路径

01:16:51.460 --> 01:16:51.960
对不对

01:16:52.460 --> 01:16:54.460
好现在我们是不是根据了这个pass呢

01:16:54.460 --> 01:16:55.760
得到一个决定路径了

01:16:55.860 --> 01:16:56.760
因为我们要读文件吧

01:16:56.760 --> 01:16:58.460
读文件是不是要有个路径才能读

01:16:58.660 --> 01:16:59.160
对不对

01:16:59.360 --> 01:17:00.160
好那么接下来呢

01:17:00.160 --> 01:17:01.160
我们要干嘛呢

01:17:01.260 --> 01:17:03.260
我们要获取这个文件的信息

01:17:04.260 --> 01:17:04.860
第二步

01:17:05.360 --> 01:17:06.060
获取

01:17:07.360 --> 01:17:09.760
文件的类种啊

01:17:09.760 --> 01:17:12.060
或者说获取文件的

01:17:12.460 --> 01:17:13.260
嗯

01:17:13.560 --> 01:17:14.560
状态信息

01:17:15.560 --> 01:17:16.460
怎么样状态信息

01:17:16.860 --> 01:17:18.260
他有可能是一个文件

01:17:18.260 --> 01:17:19.760
有可能是一个文件夹

01:17:19.960 --> 01:17:20.660
比方说吧

01:17:20.660 --> 01:17:21.760
你请求这个路径

01:17:22.260 --> 01:17:23.460
你看他就是个文件夹

01:17:24.760 --> 01:17:25.960
比如说你请求这个东西

01:17:26.160 --> 01:17:26.960
CSS

01:17:27.560 --> 01:17:28.160
一回车

01:17:29.660 --> 01:17:30.960
你看他是不是个文件夹

01:17:31.160 --> 01:17:31.560
对吧

01:17:31.560 --> 01:17:33.360
他有可能是文件有可能是文件夹

01:17:33.360 --> 01:17:35.360
那么文件和文件夹的处理是不是不一样

01:17:35.360 --> 01:17:36.560
比方说像像这个鞋杠

01:17:36.560 --> 01:17:37.360
是不是一个文件夹

01:17:37.360 --> 01:17:39.060
比方说啊请求首页

01:17:41.030 --> 01:17:41.530
回车

01:17:42.030 --> 01:17:43.130
你看是不是个文件夹

01:17:43.130 --> 01:17:44.130
他不理可得目睹

01:17:44.230 --> 01:17:44.630
对吧

01:17:44.630 --> 01:17:45.530
他有可能是个目睹

01:17:45.530 --> 01:17:46.530
有可能是个文件

01:17:46.530 --> 01:17:47.730
那么这个信息在哪呢

01:17:47.730 --> 01:17:49.230
在文件的状态信息里边

01:17:49.330 --> 01:17:51.130
那么如何来获取文件的状态信息呢

01:17:51.130 --> 01:17:52.930
这里会用到一些新的API

01:17:52.930 --> 01:17:53.930
API都不是重点

01:17:53.930 --> 01:17:55.430
我们只需要知道怎么用就行了啊

01:17:55.630 --> 01:17:56.330
API怎么写呢

01:17:56.330 --> 01:17:59.930
就是fs promise state family就这么简单

01:18:01.530 --> 01:18:02.130
就这样去

01:18:04.680 --> 01:18:06.280
那么fs是不是一个内置模块

01:18:07.380 --> 01:18:08.680
fs是个内置模块

01:18:08.680 --> 01:18:10.080
他来获取文件内容的

01:18:10.080 --> 01:18:12.080
跟文件相关的处理fs

01:18:12.580 --> 01:18:14.080
你之前没学过没学过没关系

01:18:14.080 --> 01:18:15.280
我这里不在告诉你吗

01:18:15.680 --> 01:18:17.080
通过这个固定的代码

01:18:17.280 --> 01:18:18.880
把文件的路径传过去

01:18:19.080 --> 01:18:21.380
那么他就会获取这个文件的状态信息

01:18:22.180 --> 01:18:23.080
那么这个函数呢

01:18:23.080 --> 01:18:24.680
他有他有这么几种情况

01:18:25.080 --> 01:18:26.280
就是他有可能会爆错

01:18:26.380 --> 01:18:27.980
就文件如果说不存在的话

01:18:27.980 --> 01:18:28.780
他就会爆错

01:18:30.080 --> 01:18:31.480
如果说文件存在的话

01:18:31.480 --> 01:18:32.680
那么他会返回一个

01:18:32.780 --> 01:18:34.280
返回一个状态信息对象

01:18:34.580 --> 01:18:35.680
对象里边我们就可以判断

01:18:35.680 --> 01:18:37.380
他到底是目录还是一个文件了

01:18:37.980 --> 01:18:38.380
因此呢

01:18:38.380 --> 01:18:38.880
我们这里呢

01:18:38.880 --> 01:18:39.980
要分为这么几种情况

01:18:39.980 --> 01:18:41.680
三种情况一种是文件不存在

01:18:41.680 --> 01:18:42.280
一种是

01:18:42.880 --> 01:18:44.880
文件是是一个正常文件

01:18:44.980 --> 01:18:46.780
另外一种情况是是一个目录

01:18:47.480 --> 01:18:48.880
这个有可能会三种情况

01:18:49.580 --> 01:18:50.080
对不对

01:18:50.080 --> 01:18:50.680
好来吧

01:18:52.080 --> 01:18:52.680
我们这里呢

01:18:52.680 --> 01:18:54.180
是不是有可能揣开起

01:18:54.180 --> 01:18:55.280
因为他有可能会爆错吗

01:18:56.480 --> 01:18:57.280
有可能会爆错

01:18:57.980 --> 01:18:58.380
开启

01:19:00.680 --> 01:19:01.880
那么爆错的时候

01:19:01.880 --> 01:19:04.180
是不是文件不存在

01:19:04.780 --> 01:19:05.080
对不对

01:19:05.080 --> 01:19:06.180
是不是文件不存在

01:19:07.580 --> 01:19:08.580
那么正常的

01:19:08.580 --> 01:19:09.380
爆错的情况下

01:19:09.380 --> 01:19:10.380
我们以后再说

01:19:10.480 --> 01:19:11.480
正常的情况下呢

01:19:11.480 --> 01:19:14.180
他是不是应该可以给我一个文件的信息

01:19:14.680 --> 01:19:16.580
他会返回给我一个文件的信息

01:19:16.980 --> 01:19:17.780
那么这个信息呢

01:19:17.780 --> 01:19:19.180
我给你我这里已经告诉你了

01:19:19.180 --> 01:19:19.980
是一个对象

01:19:20.180 --> 01:19:21.180
那么我们这里呢

01:19:21.180 --> 01:19:21.980
而且还说了

01:19:21.980 --> 01:19:23.780
他是一个异步函数需要等待

01:19:23.780 --> 01:19:25.180
跟那个数据户是一样的

01:19:25.180 --> 01:19:26.180
他要等待

01:19:26.180 --> 01:19:27.180
我们是不是要用而位置

01:19:27.580 --> 01:19:27.780
对吧

01:19:27.780 --> 01:19:28.580
要等待他

01:19:28.580 --> 01:19:29.380
那么同样的道理

01:19:29.380 --> 01:19:30.180
而位置是不是在这里

01:19:30.180 --> 01:19:31.480
要前面要用而sync

01:19:32.180 --> 01:19:33.280
还是需要等待的地方

01:19:33.280 --> 01:19:34.380
我们都可以用而位置

01:19:34.380 --> 01:19:35.280
好等待他

01:19:35.280 --> 01:19:36.080
等待他给我

01:19:36.080 --> 01:19:37.580
他会给我返回一个结果

01:19:38.080 --> 01:19:38.780
这是文件

01:19:38.980 --> 01:19:39.880
文件信息

01:19:40.180 --> 01:19:41.580
这是获取文件的状态信息

01:19:41.580 --> 01:19:42.480
三种情况吧

01:19:42.480 --> 01:19:43.680
一种是文件不存在

01:19:43.680 --> 01:19:44.480
一种是呢

01:19:45.480 --> 01:19:47.680
文件是一个怎么ease file

01:19:48.680 --> 01:19:50.380
是一个正常文件

01:19:51.080 --> 01:19:53.880
是一个正常文件

01:19:54.880 --> 01:19:56.080
是一个正常文件

01:19:56.980 --> 01:19:57.480
好

01:19:57.480 --> 01:19:58.380
然后呢

01:19:59.280 --> 01:20:00.080
ls呢

01:20:02.060 --> 01:20:03.060
是一个目录

01:20:03.060 --> 01:20:03.360
对吧

01:20:03.360 --> 01:20:04.460
不就是三种情况吗

01:20:04.460 --> 01:20:05.760
然后我们在根据这三种情况

01:20:05.760 --> 01:20:06.660
来分别做处理

01:20:06.660 --> 01:20:07.060
能看到吗

01:20:07.060 --> 01:20:07.560
一个代码

01:20:07.960 --> 01:20:08.960
逻辑也是能看到吗

01:20:08.960 --> 01:20:09.960
API不懂没关系

01:20:09.960 --> 01:20:10.560
API不懂的人

01:20:10.560 --> 01:20:11.160
自己去看一下

01:20:11.160 --> 01:20:12.060
我这里已经写了

01:20:12.260 --> 01:20:12.960
自己去看

01:20:13.660 --> 01:20:14.860
要学会看文道

01:20:14.860 --> 01:20:15.960
写API啊

01:20:15.960 --> 01:20:16.560
不要去说

01:20:16.560 --> 01:20:17.660
你一个API必须要学了

01:20:17.660 --> 01:20:18.560
之后你才能会用

01:20:18.760 --> 01:20:19.560
那我告诉你们

01:20:19.560 --> 01:20:21.060
这个前段的API多的吓死人

01:20:21.560 --> 01:20:23.160
你不可能是一个个去学的

01:20:23.360 --> 01:20:24.760
要看着文道去用就行了

01:20:24.760 --> 01:20:25.460
你要做什么

01:20:25.460 --> 01:20:26.660
你看着文道去用就行了

01:20:26.860 --> 01:20:28.560
那么这是获取文件的状态

01:20:28.660 --> 01:20:29.160
那么状态里面

01:20:29.160 --> 01:20:29.660
我们就可以看到

01:20:29.660 --> 01:20:30.760
他是不是一个文件

01:20:30.760 --> 01:20:31.760
这是一个正常文件

01:20:31.760 --> 01:20:32.660
这是一个目录

01:20:32.660 --> 01:20:33.660
所以有三种情况

01:20:34.160 --> 01:20:34.460
对不对

01:20:34.460 --> 01:20:34.660
好

01:20:34.660 --> 01:20:35.360
我们一个来

01:20:35.560 --> 01:20:37.560
首先他如果说是一个正常文件

01:20:37.860 --> 01:20:38.660
我得到这个路径

01:20:38.660 --> 01:20:39.660
是一个正常文件

01:20:39.660 --> 01:20:40.660
如果说正常文件干吗

01:20:40.660 --> 01:20:41.260
干吗呢

01:20:41.460 --> 01:20:43.160
我是不把文件内容读出来

01:20:43.160 --> 01:20:44.160
给他就完事了

01:20:44.760 --> 01:20:45.260
对不对

01:20:45.260 --> 01:20:46.760
我把文件内容读出来

01:20:46.760 --> 01:20:47.760
给他就完事了

01:20:47.760 --> 01:20:48.760
比如说我们这里怎么写

01:20:48.760 --> 01:20:51.160
我们就可以通过fs

01:20:51.960 --> 01:20:52.760
怎么来读文件

01:20:52.760 --> 01:20:53.460
我们之前说过了

01:20:53.460 --> 01:20:55.060
我这里说另外一种方式

01:20:55.060 --> 01:20:56.060
就通过这个方式

01:20:57.060 --> 01:20:57.860
这个方式呢

01:20:59.360 --> 01:21:00.660
是可以不用写回调的

01:21:01.060 --> 01:21:02.760
他仍然是一个异不代码

01:21:02.760 --> 01:21:04.060
他仍然是一个异不代码

01:21:04.360 --> 01:21:05.360
因此也要等待

01:21:05.560 --> 01:21:07.260
等待他把文件内容读出来

01:21:07.560 --> 01:21:09.260
是不是文件内容读出来

01:21:09.260 --> 01:21:09.660
对吧

01:21:09.660 --> 01:21:10.860
读取文件内容

01:21:11.660 --> 01:21:13.060
读取文件内容

01:21:13.660 --> 01:21:14.860
甭管的是啥文件吗

01:21:15.060 --> 01:21:15.960
你是这个

01:21:15.960 --> 01:21:17.060
CSS文件也好

01:21:17.460 --> 01:21:18.260
也就是文件也好

01:21:18.260 --> 01:21:19.160
终于一个文件内容

01:21:19.160 --> 01:21:19.360
对吧

01:21:19.360 --> 01:21:20.560
我把文件内容读出来

01:21:20.560 --> 01:21:21.360
然后干吗呢

01:21:21.360 --> 01:21:22.160
然后给你

01:21:22.460 --> 01:21:22.960
send

01:21:23.860 --> 01:21:24.460
content

01:21:25.760 --> 01:21:26.760
所以给力就完事了

01:21:26.960 --> 01:21:27.360
对吧

01:21:27.560 --> 01:21:29.460
但是给力之前我还要干吗呢

01:21:29.460 --> 01:21:30.860
我还要去设置

01:21:31.260 --> 01:21:32.060
设置

01:21:32.860 --> 01:21:33.760
响应的

01:21:34.960 --> 01:21:36.760
响应的消息格式

01:21:36.860 --> 01:21:37.860
是不是要设置这个

01:21:39.460 --> 01:21:40.760
之前刚才刚才讲的

01:21:40.760 --> 01:21:42.160
要是这个content type

01:21:42.760 --> 01:21:43.860
可以通过这个type方法

01:21:43.860 --> 01:21:44.260
对吧

01:21:44.260 --> 01:21:45.560
来去设置的content type

01:21:45.560 --> 01:21:46.360
因为不同的文件的

01:21:46.360 --> 01:21:47.660
它的类型不一样

01:21:47.960 --> 01:21:50.560
那我怎么样得到这个文件的类型呢

01:21:50.760 --> 01:21:52.360
一个问题一个问题解决吧

01:21:52.560 --> 01:21:54.360
我们怎么样来得到这个文件类型呢

01:21:54.660 --> 01:21:56.760
你看如果说我现在就写完了的话

01:21:56.760 --> 01:21:57.960
你看一下我们来看一下

01:21:58.160 --> 01:21:58.660
刷新

01:22:00.360 --> 01:22:01.460
这里是不拿不到

01:22:01.460 --> 01:22:02.960
拿不到我们这里写个文件名

01:22:03.060 --> 01:22:03.560
应这个手点

01:22:05.560 --> 01:22:06.660
特别是一个文件瞎载了

01:22:06.660 --> 01:22:07.160
你看没有

01:22:07.760 --> 01:22:09.160
所以变成一个文件瞎载了

01:22:09.160 --> 01:22:10.860
因为他不知道你是一个普通的页面

01:22:10.960 --> 01:22:12.560
他认为可能是一个

01:22:12.760 --> 01:22:13.760
可能是一个普通

01:22:13.760 --> 01:22:15.160
可能是一个需要瞎载的东西

01:22:15.160 --> 01:22:16.260
他变成文件瞎载了

01:22:16.760 --> 01:22:17.660
变成这个样子了

01:22:17.660 --> 01:22:18.560
这不是我们想要的

01:22:18.560 --> 01:22:20.960
所以说我们这里一定要在想用之前

01:22:21.060 --> 01:22:23.160
需要设置一下想用的消息格式

01:22:23.260 --> 01:22:24.360
不然的话流量器是蒙的

01:22:24.360 --> 01:22:26.460
他不知道你给我想用的到底是个啥

01:22:27.060 --> 01:22:29.060
因此我们这里是不是要调用这个risk type

01:22:29.560 --> 01:22:31.060
那么type我们这里应该填啥

01:22:31.060 --> 01:22:32.960
是不是填的是文件的扩展名

01:22:33.260 --> 01:22:33.760
对不对

01:22:34.060 --> 01:22:36.060
所以应该填文件的扩展名

01:22:36.760 --> 01:22:38.660
你看一下我们刚才说到这个type函数

01:22:38.760 --> 01:22:39.960
是不是给他一个扩展名

01:22:40.160 --> 01:22:41.160
我就可以拿到

01:22:41.360 --> 01:22:41.960
可以拿到什么呢

01:22:41.960 --> 01:22:42.760
可以拿到这个

01:22:43.160 --> 01:22:44.160
可以拿到他那个

01:22:44.260 --> 01:22:46.460
他就会自动与你设置这个消息类型

01:22:46.760 --> 01:22:48.460
那么我们这里要需要给他扩展名

01:22:48.560 --> 01:22:49.860
那么扩展名怎么给呢

01:22:49.960 --> 01:22:50.960
我们可以通过pys

01:22:50.960 --> 01:22:52.260
你看下面都有写

01:22:52.860 --> 01:22:53.660
可以通过pys

01:22:53.660 --> 01:22:54.560
es聽内

01:22:54.860 --> 01:22:55.860
通过这个函数

01:22:55.860 --> 01:22:57.960
可以拿到这个路径里面的扩展名

01:23:00.460 --> 01:23:01.560
我们可以通过这个函数

01:23:01.960 --> 01:23:03.860
能拿到es听内

01:23:04.960 --> 01:23:06.260
拿到文件扩展名

01:23:06.660 --> 01:23:08.660
获取文件扩展名

01:23:08.960 --> 01:23:10.760
我的数字已经打得够详细了

01:23:11.060 --> 01:23:12.660
我们把这里扩展名是不是放在这

01:23:12.660 --> 01:23:13.760
那么通过这个扩展名

01:23:13.760 --> 01:23:14.560
是不是可以设置自己

01:23:14.560 --> 01:23:16.660
他会自动设置这个消息格式

01:23:16.960 --> 01:23:17.660
好保存

01:23:18.860 --> 01:23:19.360
刷新

01:23:19.360 --> 01:23:20.160
诶这里

01:23:20.960 --> 01:23:21.960
写个英这个设

01:23:21.960 --> 01:23:22.160
对

01:23:22.160 --> 01:23:23.660
这边可以看到了

01:23:24.060 --> 01:23:25.760
你看现在是不是把这个英这个设

01:23:26.560 --> 01:23:27.560
content太不给我了

01:23:27.560 --> 01:23:28.760
然后消息体

01:23:28.760 --> 01:23:29.760
消息体就是这个东西

01:23:29.760 --> 01:23:30.860
他这个东西哪来的

01:23:30.960 --> 01:23:31.860
我们在服务器上

01:23:31.860 --> 01:23:33.260
是不是把这个文件读出来

01:23:33.460 --> 01:23:33.660
对吧

01:23:33.660 --> 01:23:34.260
这个文件里边

01:23:34.260 --> 01:23:35.760
你看我们可以写个样式

01:23:36.260 --> 01:23:36.760
啊

01:23:38.260 --> 01:23:38.760
caller

01:23:38.760 --> 01:23:39.560
a c

01:23:40.260 --> 01:23:40.860
caller

01:23:40.960 --> 01:23:41.660
red

01:23:42.460 --> 01:23:42.960
保存

01:23:43.460 --> 01:23:44.060
刷新

01:23:44.460 --> 01:23:45.160
是不是有点红色了

01:23:45.160 --> 01:23:45.460
对吧

01:23:45.460 --> 01:23:47.160
他不会就是把这个文件内容拿出来

01:23:47.160 --> 01:23:47.460
对吧

01:23:47.460 --> 01:23:50.160
这才是你们以前觉得你所当难的事情

01:23:50.160 --> 01:23:51.560
是经过我们处理过后

01:23:51.560 --> 01:23:52.660
才变成你所当难了

01:23:52.960 --> 01:23:53.860
你不处理的话

01:23:54.460 --> 01:23:55.560
跟他就没什么关系

01:23:57.540 --> 01:23:58.340
没什么意思了吧

01:24:04.050 --> 01:24:04.650
蒙了吗

01:24:05.250 --> 01:24:06.550
蒙了下来多去看几次

01:24:06.550 --> 01:24:07.650
啊多去看几次

01:24:08.350 --> 01:24:10.350
这里边有几个两个大的知识点

01:24:11.650 --> 01:24:12.550
一个呢是

01:24:12.550 --> 01:24:13.250
adp

01:24:14.050 --> 01:24:15.750
因为很多同学还没有接触adp

01:24:15.750 --> 01:24:16.750
刚刚接触

01:24:16.850 --> 01:24:18.150
adp是这样子啊

01:24:18.650 --> 01:24:20.650
你去随便问一个开发者

01:24:20.850 --> 01:24:21.850
adp难不难

01:24:21.850 --> 01:24:23.250
他一定告诉你不难

01:24:24.250 --> 01:24:24.750
但是

01:24:25.250 --> 01:24:27.650
每一个开发者一开始接触adp的时候

01:24:27.650 --> 01:24:28.550
一定是蒙的

01:24:28.950 --> 01:24:30.350
就没有一个不是蒙的

01:24:30.850 --> 01:24:31.750
但是adp过了

01:24:31.750 --> 01:24:32.850
只要你习惯了

01:24:32.850 --> 01:24:34.150
他那么模式过后

01:24:34.150 --> 01:24:35.250
你开始不适应

01:24:35.850 --> 01:24:37.150
他一定是非常非常简单的

01:24:37.150 --> 01:24:38.950
就跟你们一开始学习程序的时候

01:24:38.950 --> 01:24:39.750
不适应什么

01:24:39.750 --> 01:24:40.750
不适应循环

01:24:40.950 --> 01:24:42.250
不适应函数都不适应

01:24:42.250 --> 01:24:43.350
才说啥不知道

01:24:43.750 --> 01:24:43.950
对吧

01:24:43.950 --> 01:24:45.050
你们一开始学习函数的时候

01:24:45.050 --> 01:24:46.150
不知都是这个样子吗

01:24:46.150 --> 01:24:46.950
但是你后来

01:24:46.950 --> 01:24:48.150
你问他函数难不难

01:24:48.850 --> 01:24:50.150
如果当时我相信了

01:24:50.150 --> 01:24:51.450
咱们这里可能还有同学

01:24:51.450 --> 01:24:52.550
觉得函数很难的

01:24:52.550 --> 01:24:53.650
还没有过那段时间

01:24:53.650 --> 01:24:55.550
还在非常基础的阶段

01:24:56.250 --> 01:24:57.550
adp这个坎你要过

01:24:57.650 --> 01:24:59.750
然后呢就是这个awaits而sync

01:25:00.250 --> 01:25:01.950
有的同学不知道到底是怎么回事

01:25:01.950 --> 01:25:02.950
我告诉你现在不知道

01:25:03.150 --> 01:25:03.950
那没办法

01:25:04.050 --> 01:25:05.650
因为这个东西绝对不是一两节课

01:25:05.650 --> 01:25:06.650
就说得清楚的

01:25:06.750 --> 01:25:09.450
他是他跟那个es6的promise是相关联的

01:25:09.750 --> 01:25:10.450
那这个没办法

01:25:10.450 --> 01:25:11.850
你只能去要从基础的

01:25:11.850 --> 01:25:12.850
从es6来看

01:25:13.550 --> 01:25:14.150
那么另外呢

01:25:14.150 --> 01:25:15.950
就是这些API不熟悉

01:25:15.950 --> 01:25:16.550
不熟悉的话

01:25:16.550 --> 01:25:17.450
是很正常

01:25:17.550 --> 01:25:18.750
如果说你觉得开发的时候

01:25:18.750 --> 01:25:19.950
一定要熟悉API

01:25:19.950 --> 01:25:21.750
那我觉得你的思路都是错的

01:25:22.050 --> 01:25:23.650
开发是不需要熟悉API的

01:25:23.850 --> 01:25:25.850
你只需要熟悉文档就行了

01:25:25.850 --> 01:25:27.850
你只需要怎么去看文档就行了

01:25:27.850 --> 01:25:29.950
这个API你只要知道他有什么用

01:25:30.050 --> 01:25:30.550
他什么用了

01:25:30.550 --> 01:25:31.350
后续文件状态

01:25:31.550 --> 01:25:32.350
文件状态用来干嘛

01:25:32.350 --> 01:25:33.350
判断是不是一个文件

01:25:33.350 --> 01:25:34.150
因为我这里逻辑

01:25:34.150 --> 01:25:35.650
就说判断是不是一个文件

01:25:35.850 --> 01:25:36.250
对吧

01:25:36.950 --> 01:25:37.150
好

01:25:37.150 --> 01:25:38.350
正常文件就搞定了

01:25:39.150 --> 01:25:39.750
就到了目的

01:25:39.750 --> 01:25:40.750
其实目的呢

01:25:40.750 --> 01:25:42.950
就是设置content的type

01:25:43.350 --> 01:25:44.550
设置消息体

01:25:45.050 --> 01:25:47.450
只不过这个消息体是来自于文件内容

01:25:48.750 --> 01:25:50.050
消息体来自于文件内容

01:25:51.860 --> 01:25:52.060
好

01:25:52.060 --> 01:25:53.260
另外一个情况

01:25:54.260 --> 01:25:54.960
是目录

01:25:55.760 --> 01:25:56.260
什么情况

01:25:56.260 --> 01:25:56.960
就这个情况

01:25:58.360 --> 01:25:58.860
是目录

01:25:58.860 --> 01:25:59.260
你看

01:25:59.760 --> 01:26:00.460
读不到对吧

01:26:00.460 --> 01:26:01.060
因为目录呢

01:26:01.060 --> 01:26:02.460
是不是到 else 里边来了

01:26:02.460 --> 01:26:03.060
我们看一下

01:26:03.060 --> 01:26:04.060
是一个目录

01:26:05.060 --> 01:26:05.560
保存

01:26:05.860 --> 01:26:06.660
你看是不是一个目录

01:26:06.660 --> 01:26:07.560
他运行到这了

01:26:07.960 --> 01:26:09.160
那么目录情况怎么办呢

01:26:09.160 --> 01:26:10.760
目录情况极其简单

01:26:11.160 --> 01:26:12.260
极其简单

01:26:12.360 --> 01:26:13.260
你看着啊

01:26:13.960 --> 01:26:15.260
目录情况我怎么办

01:26:16.560 --> 01:26:18.560
目录情况的话

01:26:19.760 --> 01:26:21.460
我就用这种方式

01:26:21.760 --> 01:26:22.960
用这种方式

01:26:23.460 --> 01:26:26.360
我把你那个rake.pass

01:26:28.160 --> 01:26:29.560
给你拼接一下

01:26:29.960 --> 01:26:30.960
给你改一下

01:26:31.960 --> 01:26:33.560
因为我根据是不是根据他来

01:26:33.560 --> 01:26:35.460
他这个pass现在是不是这个东西

01:26:35.560 --> 01:26:36.560
是不是一个鞋杠

01:26:36.760 --> 01:26:37.160
你看啊

01:26:37.160 --> 01:26:38.760
现在这个pass是不是一个鞋杠

01:26:39.560 --> 01:26:40.360
是一个鞋杠吗

01:26:40.360 --> 01:26:40.560
对吧

01:26:40.560 --> 01:26:41.460
他是个目录吗

01:26:41.560 --> 01:26:41.960
然后呢

01:26:41.960 --> 01:26:43.860
我给他拼接以上一个什么呢

01:26:43.860 --> 01:26:44.760
因这个设定

01:26:45.160 --> 01:26:46.760
是个拼接一个这个东西

01:26:47.160 --> 01:26:48.260
默认为这个东西

01:26:48.260 --> 01:26:48.660
对吧

01:26:48.660 --> 01:26:49.960
我们默认一个文件

01:26:50.060 --> 01:26:51.460
你看我们现在的要求就是

01:26:51.660 --> 01:26:53.060
默认文件名是这个

01:26:53.160 --> 01:26:54.260
如果说你是目录的话

01:26:54.260 --> 01:26:54.560
ok

01:26:54.560 --> 01:26:56.160
我给你拼接上一个文件名

01:26:56.960 --> 01:26:58.360
拼接上一个文件名是啥呀

01:26:58.560 --> 01:26:59.560
因这个设定

01:26:59.860 --> 01:27:00.760
我给你拼接上

01:27:01.360 --> 01:27:02.460
拼上过后干嘛呢

01:27:02.460 --> 01:27:03.660
重新调用这个

01:27:03.660 --> 01:27:04.260
看到了

01:27:06.330 --> 01:27:07.230
重新调用他

01:27:07.530 --> 01:27:08.430
重新调用他过了

01:27:08.430 --> 01:27:09.530
他里边再去读这个pass

01:27:09.530 --> 01:27:10.630
是不是去变成文件了

01:27:11.130 --> 01:27:12.330
如果这个文件不存在的话

01:27:12.330 --> 01:27:13.930
那自然就进入到这里了

01:27:14.030 --> 01:27:14.730
原来是吧

01:27:14.730 --> 01:27:15.430
就这么简单

01:27:15.430 --> 01:27:16.530
这是目录的情况

01:27:16.830 --> 01:27:17.030
好

01:27:17.030 --> 01:27:18.730
那咱们停止刷新

01:27:19.930 --> 01:27:20.330
哎

01:27:20.330 --> 01:27:21.230
这里出问题了

01:27:24.610 --> 01:27:25.310
我看一下啊

01:27:25.910 --> 01:27:27.410
这里怎么为什么会出问题

01:27:27.410 --> 01:27:28.510
我们这里打印一下

01:27:28.710 --> 01:27:29.910
Rick要开始

01:27:32.490 --> 01:27:32.790
哎

01:27:32.790 --> 01:27:34.490
这里进入地规了啊

01:27:34.490 --> 01:27:34.990
地规了

01:27:34.990 --> 01:27:35.890
哎这里没有改

01:27:36.990 --> 01:27:37.390
哦

01:27:37.390 --> 01:27:39.090
这里可能不允许更改啊

01:27:39.090 --> 01:27:40.490
可能会不允许更改

01:27:41.090 --> 01:27:41.890
嗯

01:27:42.690 --> 01:27:43.390
那这样吧

01:27:43.390 --> 01:27:44.090
那这样吧

01:27:44.790 --> 01:27:46.290
我这里再写第三个参数

01:27:46.390 --> 01:27:47.490
再写第三个参数

01:27:48.490 --> 01:27:49.090
翻了

01:27:50.190 --> 01:27:51.390
就是翻了啊

01:27:51.390 --> 01:27:52.890
再写这个第三个参数

01:27:52.890 --> 01:27:54.490
如果说第三个参数有值的话

01:27:54.490 --> 01:27:56.390
那么我就直接用第三个参数的值

01:27:56.390 --> 01:27:57.790
如果说第三个参数没有值的话

01:27:57.790 --> 01:27:58.690
那我就啊

01:27:58.690 --> 01:28:00.990
我就用这些东西

01:28:00.990 --> 01:28:01.590
不行

01:28:01.690 --> 01:28:03.590
这第三个参数他有可能给你传辞

01:28:03.690 --> 01:28:04.490
我看一下啊

01:28:04.490 --> 01:28:05.890
这点我怎么写才简单

01:28:06.190 --> 01:28:06.890
因为不然的话

01:28:06.890 --> 01:28:08.090
我要把这个代码要

01:28:08.090 --> 01:28:09.590
又要重新来一遍

01:28:09.590 --> 01:28:10.990
就有点噁心了啊

01:28:11.090 --> 01:28:12.190
就有点噁心了

01:28:12.190 --> 01:28:13.890
我怎么写才能简单呢

01:28:13.890 --> 01:28:15.390
我这个地方改动不了

01:28:16.290 --> 01:28:17.490
我这个地方改动不了

01:28:17.490 --> 01:28:18.290
这个拍摄

01:28:18.390 --> 01:28:19.490
他不允许我改

01:28:21.190 --> 01:28:22.090
啊就改了之后

01:28:22.090 --> 01:28:23.390
你打印这个牌子

01:28:23.390 --> 01:28:24.890
他还是给他还是这个

01:28:24.890 --> 01:28:26.690
还是原来的值也就这个意思

01:28:28.390 --> 01:28:28.990
刷新

01:28:30.190 --> 01:28:31.590
改了之后改不了啊

01:28:31.590 --> 01:28:32.490
他不允许你改

01:28:33.390 --> 01:28:34.690
啊那不行的话

01:28:34.690 --> 01:28:36.290
我就重新来一遍呗

01:28:37.190 --> 01:28:37.590
不然的话

01:28:37.590 --> 01:28:39.090
这代码就

01:28:40.090 --> 01:28:41.190
代码就变复杂了

01:28:41.190 --> 01:28:42.690
算了我那个不然的话

01:28:42.690 --> 01:28:44.390
现在大家已经已经有点蒙了

01:28:44.390 --> 01:28:45.790
如果说我再再这样子写的话

01:28:45.790 --> 01:28:46.990
那更加蒙了

01:28:47.190 --> 01:28:48.590
那么不做啊

01:28:48.790 --> 01:28:50.290
不考虑不考虑这种情况

01:28:50.890 --> 01:28:52.690
如果说有有能力的同学可以去

01:28:52.690 --> 01:28:52.990
写啊

01:28:52.990 --> 01:28:54.290
其实这个写的话

01:28:54.290 --> 01:28:55.290
也没有那么的复杂

01:28:55.290 --> 01:28:56.490
也需要提取一下

01:28:56.590 --> 01:28:58.190
就是如果说这个文件存在的话

01:28:58.190 --> 01:28:58.990
你该怎么去做

01:28:58.990 --> 01:29:00.790
你把它提成一个提成另外一个函数

01:29:00.790 --> 01:29:01.990
用另外一个函数去处理

01:29:01.990 --> 01:29:03.390
那么这里的把重复代码提一下

01:29:03.390 --> 01:29:03.790
不然的话

01:29:03.790 --> 01:29:05.790
这个这个地方代码会很优种

01:29:05.990 --> 01:29:07.690
但是我现在看有些同学呢

01:29:07.690 --> 01:29:09.190
都已经快吃不消了

01:29:09.890 --> 01:29:10.990
一会就快吃不消了

01:29:10.990 --> 01:29:12.190
所以说干脆就不写了啊

01:29:12.190 --> 01:29:12.890
这个地方就不写了

01:29:12.890 --> 01:29:13.690
不考虑这种情况

01:29:14.290 --> 01:29:14.490
好

01:29:14.490 --> 01:29:15.990
那么另一个就是文件不存在

01:29:15.990 --> 01:29:16.790
文件不存在的话

01:29:16.790 --> 01:29:18.390
我们返回响应404

01:29:19.390 --> 01:29:21.090
响应404

01:29:21.890 --> 01:29:23.090
race send

01:29:24.890 --> 01:29:25.490
啊

01:29:25.490 --> 01:29:26.190
404

01:29:26.690 --> 01:29:27.290
啊

01:29:27.390 --> 01:29:27.890
怎么响应呢

01:29:27.890 --> 01:29:29.090
我们是Status对吧

01:29:29.090 --> 01:29:30.190
设置404

01:29:30.790 --> 01:29:31.090
啊

01:29:31.090 --> 01:29:31.490
然后呢

01:29:31.490 --> 01:29:33.890
这边我们给他一个消息体

01:29:33.890 --> 01:29:34.490
send

01:29:35.190 --> 01:29:35.890
页面

01:29:37.190 --> 01:29:38.290
不存在啊

01:29:38.290 --> 01:29:39.090
资源不存在

01:29:39.890 --> 01:29:40.590
不存在

01:29:41.590 --> 01:29:42.490
保存

01:29:42.690 --> 01:29:43.490
这样我们看吧

01:29:45.490 --> 01:29:46.690
就必须要写文件名啊

01:29:47.190 --> 01:29:47.690
那么现在呢

01:29:47.690 --> 01:29:49.290
如果说我换一个换一个路径

01:29:50.690 --> 01:29:51.590
说资源不存在

01:29:51.590 --> 01:29:51.890
吧

01:29:51.890 --> 01:29:52.790
得到的是404

01:29:52.790 --> 01:29:53.890
看看资源不存在

01:29:54.190 --> 01:29:54.390
好

01:29:54.390 --> 01:29:54.990
那么其他

01:29:55.190 --> 01:29:56.090
其他的是不是都没问题

01:29:56.090 --> 01:29:57.230
比方说我在页面上去引用

01:29:57.230 --> 01:29:58.390
gss

01:30:01.420 --> 01:30:02.220
css

01:30:02.920 --> 01:30:03.820
a.css

01:30:03.820 --> 01:30:04.220
你看杨晓语

01:30:04.220 --> 01:30:04.820
行不行

01:30:04.820 --> 01:30:05.420
是不是可以

01:30:05.420 --> 01:30:05.620
对吧

01:30:05.620 --> 01:30:06.420
css可以用

01:30:06.420 --> 01:30:07.620
然后gss可不可以用

01:30:07.620 --> 01:30:08.220
也可以用

01:30:08.620 --> 01:30:09.220
gss

01:30:09.420 --> 01:30:10.320
我来这里边写

01:30:11.320 --> 01:30:12.220
a.gss

01:30:12.620 --> 01:30:13.320
比方说这里

01:30:14.520 --> 01:30:15.120
alert

01:30:15.320 --> 01:30:15.920
123

01:30:18.300 --> 01:30:18.800
script

01:30:20.100 --> 01:30:20.700
gss

01:30:20.700 --> 01:30:21.500
a.123

01:30:21.800 --> 01:30:22.100
好

01:30:22.100 --> 01:30:22.500
你看一下

01:30:22.500 --> 01:30:23.100
刷新

01:30:23.100 --> 01:30:23.800
是不是弹出来了

01:30:23.800 --> 01:30:24.600
a.123

01:30:24.600 --> 01:30:24.800
对吧

01:30:24.800 --> 01:30:25.500
gss也可以写

01:30:25.500 --> 01:30:26.200
但是你要知道啊

01:30:26.200 --> 01:30:27.000
这个gss

01:30:27.000 --> 01:30:27.500
跟loader

01:30:27.500 --> 01:30:28.400
gss没有任何关系

01:30:28.400 --> 01:30:28.900
对于loader

01:30:28.900 --> 01:30:29.500
gss而言

01:30:29.500 --> 01:30:30.700
他只是一个文件而已

01:30:30.700 --> 01:30:32.900
这个文件内容是发给流烂器的

01:30:33.000 --> 01:30:34.600
就流烂器请求页面

01:30:34.600 --> 01:30:36.200
页面请求了过后呢

01:30:36.200 --> 01:30:37.700
这个页面里边是不是给他一个

01:30:37.700 --> 01:30:38.300
页面的

01:30:38.600 --> 01:30:39.500
页面的元素

01:30:39.500 --> 01:30:40.600
然后流烂器开始渲染

01:30:40.600 --> 01:30:41.300
渲染渲染

01:30:41.300 --> 01:30:41.900
渲染到这

01:30:42.000 --> 01:30:42.900
是又发出一个请求

01:30:42.900 --> 01:30:43.700
a.css

01:30:43.700 --> 01:30:44.300
看看

01:30:44.300 --> 01:30:46.200
是又发出一个请求a.css

01:30:46.200 --> 01:30:46.900
然后服务器呢

01:30:46.900 --> 01:30:48.300
把这个文件给他读出来

01:30:48.300 --> 01:30:48.800
然后呢

01:30:48.800 --> 01:30:49.800
给他一个央视

01:30:49.800 --> 01:30:51.600
于是流烂器可以渲染这个央视的

01:30:51.700 --> 01:30:52.100
于是呢

01:30:52.100 --> 01:30:53.400
流烂器继续渲染

01:30:53.400 --> 01:30:55.100
渲染之前的页面继续渲染

01:30:55.100 --> 01:30:55.600
渲染到这儿

01:30:55.600 --> 01:30:56.800
是就看到一个gss

01:30:56.800 --> 01:30:59.200
于是流烂器又发出一个请求到服务器

01:30:59.200 --> 01:30:59.600
服务器呢

01:30:59.600 --> 01:31:01.200
就把这个gss文件读出来

01:31:01.200 --> 01:31:02.800
然后把这个内容发给流烂器

01:31:02.800 --> 01:31:03.700
于是流烂器运行了

01:31:03.700 --> 01:31:04.600
而那只123

01:31:05.200 --> 01:31:06.200
这是他的完整的过程

01:31:06.200 --> 01:31:07.900
你说流烂器他请求了几次

01:31:07.900 --> 01:31:08.700
请求了三次

01:31:09.700 --> 01:31:11.400
先是通过这个流烂器地址

01:31:11.400 --> 01:31:12.200
请求的页面

01:31:12.200 --> 01:31:13.600
在渲染的页面过程中

01:31:13.600 --> 01:31:14.800
请求了css

01:31:14.800 --> 01:31:16.000
请求了gss

01:31:16.000 --> 01:31:18.000
css服务器给他的结果呢

01:31:18.000 --> 01:31:20.000
流烂器用于样式

01:31:20.000 --> 01:31:21.600
gss服务器给他的结果呢

01:31:21.600 --> 01:31:22.800
他用于执行

01:31:23.800 --> 01:31:25.200
对于服务器而言

01:31:25.200 --> 01:31:26.300
服务器根本就不知道

01:31:26.300 --> 01:31:27.200
这什么gss文件

01:31:27.200 --> 01:31:28.000
根本就不会去执行

01:31:28.000 --> 01:31:29.100
根本就不会去执行他

01:31:29.100 --> 01:31:30.200
根本就不会去执行他

01:31:30.200 --> 01:31:31.500
服务器的作用就是

01:31:31.500 --> 01:31:32.800
我给力文件内容

01:31:32.800 --> 01:31:34.200
我把文件内容读出来

01:31:34.200 --> 01:31:35.000
然后给力

01:31:35.000 --> 01:31:37.000
设置好一个消息格式

01:31:37.700 --> 01:31:38.700
目标的情况呢

01:31:38.700 --> 01:31:40.300
有能力的同学自己去做

01:31:40.300 --> 01:31:41.300
我这里不能再写了

01:31:41.300 --> 01:31:41.700
再写的话

01:31:41.700 --> 01:31:46.130
有些同学要快云掉了

01:31:46.130 --> 01:31:47.530
客户端自动请求

01:31:47.530 --> 01:31:48.330
啥意思

01:31:48.330 --> 01:31:49.430
你说什么意思

01:31:49.430 --> 01:31:50.430
也就是说你打开流烂器

01:31:50.430 --> 01:31:51.330
他就自动给你请求了

01:31:51.330 --> 01:31:53.530
还什么意思

01:31:53.530 --> 01:31:54.530
你请求任何一个地址

01:31:54.530 --> 01:31:55.730
你不得输入

01:31:55.730 --> 01:31:57.130
不是在地址拿输入吗

01:31:59.130 --> 01:31:59.730
你不得

01:31:59.730 --> 01:32:00.830
你请求任何一个东西

01:32:00.830 --> 01:32:04.940
你不是在地址拿输入吗

01:32:04.940 --> 01:32:06.340
只是这个路径不行

01:32:06.340 --> 01:32:07.140
这个路径不行

01:32:08.340 --> 01:32:09.540
不得输入地址

01:32:09.540 --> 01:32:10.740
对不对

01:32:10.740 --> 01:32:12.640
你看百度你也不得输入地址

01:32:12.640 --> 01:32:13.640
你请求任何一个网站

01:32:13.640 --> 01:32:14.940
不都得输入地址吗

01:32:16.140 --> 01:32:16.540
只不过了

01:32:16.540 --> 01:32:18.240
这个页面上是不是可以有A元数

01:32:18.240 --> 01:32:18.840
比方说

01:32:18.840 --> 01:32:19.640
页面上

01:32:19.640 --> 01:32:21.140
我可以再加个页面

01:32:21.140 --> 01:32:23.040
60.atmeo

01:32:23.040 --> 01:32:24.440
这是新文页

01:32:25.240 --> 01:32:25.940
新文页

01:32:27.540 --> 01:32:27.840
然后呢

01:32:27.840 --> 01:32:28.740
在银这个社里边

01:32:28.740 --> 01:32:29.940
我们再加个A元数吗

01:32:31.440 --> 01:32:32.640
你说是这个意思

01:32:32.640 --> 01:32:34.840
60.atmeo

01:32:34.840 --> 01:32:35.640
去新文页

01:32:37.440 --> 01:32:37.840
爆出来

01:32:39.040 --> 01:32:40.240
你说是这个意思

01:32:40.340 --> 01:32:41.040
点过去

01:32:41.040 --> 01:32:42.440
就是不是到了新文页了

01:32:42.440 --> 01:32:43.340
是不是又发出一个请求

01:32:43.340 --> 01:32:44.640
请求新文页

01:32:44.640 --> 01:32:45.440
你说是这个意思

01:32:51.430 --> 01:32:53.530
好好再看一下吧

01:32:53.530 --> 01:32:55.130
不知道咱们这里来听课的

01:32:55.130 --> 01:32:57.330
有没有后期付费课的学员

01:32:57.330 --> 01:32:58.630
有付费课的学员

01:32:58.630 --> 01:32:59.630
我相信对你们来说

01:32:59.630 --> 01:33:01.830
应该是非常非常简易的

01:33:01.830 --> 01:33:04.230
因为这个公开直播课

01:33:04.230 --> 01:33:05.430
就是这种

01:33:05.430 --> 01:33:07.730
这种就是小急性赢的课程

01:33:09.630 --> 01:33:11.230
很难真的是对我来很难

01:33:12.830 --> 01:33:13.630
为啥呢

01:33:13.730 --> 01:33:16.130
一是我们是讲个后期课的内容

01:33:16.130 --> 01:33:18.530
后期课内容前面是要打基础的

01:33:18.530 --> 01:33:20.730
但是又要面向的学员呢

01:33:20.730 --> 01:33:25.330
是基本上算是有一点点借识基础的

01:33:25.330 --> 01:33:26.530
这是男的男的在这

01:33:26.530 --> 01:33:27.330
所以说

01:33:27.330 --> 01:33:30.130
我这课程如果说是设置的太简单的话

01:33:30.130 --> 01:33:32.530
对于某些学员来说就毫不意义了

01:33:32.530 --> 01:33:34.530
但是如果说我设计的稍微有点难度的话

01:33:34.530 --> 01:33:36.730
对于有些学员可能比较吃力

01:33:36.730 --> 01:33:37.930
难度这一块大家放心

01:33:37.930 --> 01:33:39.930
我是设计者是绝对是比较失踪的

01:33:39.930 --> 01:33:41.630
你们是绝对可以搞定的

01:33:41.630 --> 01:33:42.730
如果说你搞不定的话

01:33:42.730 --> 01:33:43.930
你下来多去看几遍视频

01:33:43.930 --> 01:33:45.030
你可以搞定

01:33:45.030 --> 01:33:48.030
我已经是把难度尽量的来控制了

01:33:48.030 --> 01:33:49.230
再简单的话

01:33:49.230 --> 01:33:51.030
就没有任何事情可以做了

01:33:51.030 --> 01:33:51.430
是吧

01:33:51.430 --> 01:33:53.030
就没有任何事情可以做了

01:33:53.030 --> 01:33:54.830
今天晚上的咱们就

01:33:54.830 --> 01:33:56.030
我就讲到这了

01:33:56.030 --> 01:33:57.330
回讲到这了

01:33:57.330 --> 01:33:58.530
那么接下来呢

01:33:58.530 --> 01:34:01.230
是咱们学老师的时间了

01:34:01.230 --> 01:34:02.230
大家先不要离开

01:34:02.230 --> 01:34:03.830
我们这里的千万到学老师这里

