WEBVTT

00:00.000 --> 00:08.780
好 来了 昨天都有点老火 啊 你看这个这个地方

00:09.940 --> 00:13.860
我纠结了一下 我说要不要 我昨天想了一下 要不要讲这个玩意

00:14.620 --> 00:17.220
我说讲了这个玩意 不讲这个玩意呢 太空洞了

00:18.020 --> 00:24.380
讲了这个玩意呢 可能会有些同学听不懂 但是呢 我没有预料到有这么多同学听不懂 昨天我问一下昨天的东西啊

00:25.380 --> 00:40.030
这个玩意能懂吗 我跟他写个代码啊 要随便写个代码 在这里边 哎

00:40.830 --> 00:45.830
这这就是在这里 这里获取啊 我们这样子的这个代码

00:47.590 --> 00:53.110
我们昨天写的对吧 换个电脑的快捷线是真的真的不好用

00:54.510 --> 00:55.550
啊 这里我们写一个

00:56.510 --> 00:56.710
哈喽

00:58.230 --> 01:00.310
我问一下大家啊 这个代码呢

01:01.710 --> 01:11.180
能听懂的 这个这个代码能看懂的同学Q个一呢 不看不懂的话就Q个二

01:12.540 --> 01:13.500
这个代码都看不懂啊

01:14.460 --> 01:20.380
这代码我再解释一下啊 就是客户端那边 就是浏览器那边给我发了一个请求过来

01:20.940 --> 01:26.980
发了一个请求过来 只要你请求的路径是鞋钢六十 就是你表说我们这里监听的端口是九五二七吗

01:27.420 --> 01:33.460
然后呢 浏览器那边只要输入一个地址 去请求 我们把它打开吧 直接来运行看一下

01:37.860 --> 01:40.580
对start 我们把这把上面的图示掉

01:43.780 --> 01:45.820
就就这个代码啊 就这一坨代码 就这个代码

01:46.620 --> 01:49.660
这个代码如果说看不懂的话 那底子也

01:50.420 --> 01:58.340
太补肉了一点啊 你一个底子还要还要再打牢一点 这个东西都跟什么跟那个什么ATV协议这些都没关系的 就是纯粹的理解能力了

01:59.140 --> 02:05.940
那么就是说 你在学GS啊 包括ATV和CSS的时候 没有把这个基本的理解能力锻炼起来啊

02:06.740 --> 02:12.500
这个代码是非常非常简单的 就是我们请求这个 请求这个路径的时候呢 这个函数就会运行

02:13.100 --> 02:24.180
这个函数运行的时候呢 我就给他发送了一个 响应了一个这么一个消息体 那么这个消息体到了浏览器这一段就把渲染出来了啊 你看一下这里 我们找到这个deskwork

02:25.260 --> 02:27.540
刷新 你看是不是发送了一个请求

02:28.260 --> 02:37.300
发送了一个请求到服务器 请求这个路径 然后呢 服务器那边给我响应了这么一个东西 然后呢 流烂器就把他献人出来了啊 这个代码是非常非常好理解的

02:38.180 --> 02:39.140
啊 是非常好理解的

02:41.180 --> 02:46.020
好 然后呢 就昨天我们讲的是 这一块可能不太好理解的吧 不要太好理解的话

02:46.700 --> 02:51.900
嗯 好消息是什么呢 好消息呢 就是这个代码呢 你们以后也不会写

02:52.460 --> 02:56.380
因为有别人已经给你写好了 你直接用就行了啊 就是我们今天要讲的

02:56.820 --> 03:05.900
换一消息是什么呢 换一消息是这个代码你一定要理解的 因为如果说你这个代码不理解的话 说明了啥呢 说明你说明你对adb协议不理解

03:06.820 --> 03:12.500
同时也说明你的 呃 程序的理解能力有严重的问题啊

03:13.820 --> 03:20.860
慢慢来吧 咱们学习的得一步一步走 因为呢 咱们这里的听这五天集训颜色同学呢 有可能抵制有

03:21.740 --> 03:27.180
有有比较好的 也有比较差的啊 其实也就是跟你们花了多少心事有关系

03:27.820 --> 03:33.660
好了 就是上 昨天的代码这一块不理解的话没关系啊 因为今天我们会把它进行减化 我们把个代码删掉

03:35.060 --> 03:36.900
把代码从上面到这 搭删掉

03:40.200 --> 03:46.600
变这个简单代码啊 创建个服务器 监听920的端口 然后呢 我们进入今天的知识 今天我们讲啥呢 讲express中间见

03:47.120 --> 03:55.880
昨天今天明天这三天呢 我们都是讲跟express相关的 昨天我重点是讲一笔协议 今天呢 我们开始把中期放到express这里

03:56.640 --> 03:59.400
好 我们来说一下啊 这个中间见识东西是怎么产生的

04:00.400 --> 04:04.520
三言两语 把解释清楚 呃 大家考虑这个场景

04:05.600 --> 04:07.600
就是由一个请求的到达了服务器

04:08.560 --> 04:13.480
这个请求从浏览器这边发出来到达了服务器 服务器可能会有很多的操作需要做

04:14.480 --> 04:19.760
比方说服务器那边要做一个做一些日子记录 我们看什么时间

04:20.880 --> 04:22.240
呃 什么浏览器

04:23.200 --> 04:24.040
什么ip d 子

04:24.920 --> 04:31.360
发送了一个什么样的请求到我服务器 我把它记录下来啊 做一些记录日子记录 方便了以后来进行分析

04:32.520 --> 04:36.800
这可能这可能会经过这么一些事啊 尽管了今天晚上我们不会去做这些事

04:37.400 --> 04:41.520
在我们后期课里面这些事情全部都是做的啊 我们毕竟时间有限

04:42.160 --> 04:51.360
我们就想象吧 服务器可能会做日子记录 也可能会有安全验证 比方说你这个请求你发生的消息里边有没有一些危险的数据

04:51.600 --> 04:54.160
我要把它过滤了啊 可能要做一些安全验证

04:54.840 --> 05:03.160
还要做一些全线验证 那么我看一下你这个请求有没有登录啊 是不是一个合法的请求 有没有全线来操作这个数据

05:04.280 --> 05:09.200
然后呢 过了之后才是业务处理 就是我们可能会前面有很多很多的事情要做

05:10.000 --> 05:13.000
那么这些事情呢 为了把这些事情分开

05:14.280 --> 05:19.520
把这些不同的处理呢 把它分开 然后呢 xpress 呢 提供了一种模型叫做中间键模型

05:19.840 --> 05:25.880
这是一种什么样的模型呢 我们首先从感性的角度把它认识一下啊 就是我们的请求到达服务器过后

05:26.840 --> 05:30.200
我们可在一个space里边可以 他允许你做这么一件事情

05:31.000 --> 05:32.720
就是你写多个中间键

05:33.640 --> 05:36.560
一会呢 我们先感兴的认识啊 以后我们的慢慢具体的深入

05:37.160 --> 05:39.800
可以写多个中间键 每个中间键就是一段代码

05:41.360 --> 05:46.720
先经过第一个中间键 这个中间键呢 可以可以先进行一些处理 比方说进行日子记录

05:47.520 --> 05:54.720
啊 处理完了过后呢 他有可能就不往后移交了啊 就直接给你想赢了 直接发送到流量器那边了

05:55.280 --> 06:00.920
那么后边就不会参与了 但是呢 他也有可能就是往后边移交

06:01.480 --> 06:07.760
啊 就是我处理完了 但是还没完 我又把这个请求了 继续往后边移交 交给下一个中间键进行处理

06:08.400 --> 06:15.000
那么下一个中间键呢 比方说是做安全验证 他发现不安全 不安全的话 直接给流量器发送一个错误 或者是想赢一个结果

06:15.320 --> 06:19.960
那么就不往后移交了 但是也有可能他安全验证通过了 他就往后移交

06:20.560 --> 06:27.360
又到了下一个中间键 下个中间键有可能想赢 有可能由继续往后移交啊 那么最后中间键有可能想应 有可能什么都不做

06:28.000 --> 06:34.640
他就形成了这么一种模型 就是我们从感性的角度来认识的话 就是服务器一个请求到来过后 服务器有很多的事要做

06:35.120 --> 06:42.000
第一件事 每一件事呢 他都有权利做两个分支处理 一个是呢 进行想应 一个是呢 往后边移交

06:42.680 --> 06:48.240
甚至呢 我想应了过后继续往后边移交 都是可以的啊 那么这就是形成了一个中间键模型

06:48.680 --> 06:53.280
那么在这个模型里边 express呢 他具体的单一码是怎么来写的呢 他是这样子

06:54.160 --> 06:57.920
大家看啊 我下面给大家取得这一段蛋吧 把他复制过来

06:59.000 --> 07:00.080
我们来分析一下这段蛋吧

07:01.400 --> 07:04.080
在express里边呢 他是通过这个函数use

07:05.080 --> 07:10.960
表示使用一个中间键 一个中间键是什么呢 实际上一个中间键就是一个处理函数

07:11.960 --> 07:16.960
只不过呢 他跟普通的处理函数区别在哪呢 区别又在于他有第三个函数那个

07:17.960 --> 07:24.280
还有第三个参数 也就是说我们可以简单的认为 你给了他第三个参数 ok 那就你就是一个中间键

07:25.200 --> 07:32.680
明白的意思吧 甚至呢 我们也可以广一的认为 哪怕你没有第三个参数也是个中间键 普通的处理函数都是个中间键 比方说你看我这画的图

07:33.680 --> 07:37.520
我们这里 我们昨天说的是处理函数 对吧 我也把处理函数当成那个中间键

07:38.840 --> 07:42.000
你看一下这个单号 怎么来理解 这是一个中间键

07:43.040 --> 07:46.840
这是第二个中间键 这个单号 这个多个扩号

07:50.370 --> 07:55.810
这是第二个中间键 有一个函数 这是第三个中间键 所以中间键的本质是什么 就是一个函数

07:56.970 --> 08:05.090
那么这个单号 什么意思呢 什么意思呢 你看着啊 我们这里呢 如果说如果说我们后边去请求这个地址

08:05.490 --> 08:12.170
60 123 比方说啊 假设 假设有个请求过来了 请求什么地址呢 请求这个地址

08:13.170 --> 08:22.370
请求这个地址 那么请求这个地址 他就会去匹配 看哪一些中间键能够匹配到 你看一下第一个能不能匹配呢 第一个是可以匹配的

08:22.690 --> 08:28.370
为什么可以匹配呢 因为他第一个呢 又是这个函数啊 还没有写第一个参数 一定要注意 集中注意力啊

08:28.810 --> 08:37.690
哦 之前好像忘了说了 就是咱们听课的时候 千万不要把一边开什么抖音 一边停车阁 一边玩的手机来听课 那这样子的话

08:38.290 --> 08:45.490
那你还不如就好好专心的去玩啊 你这样子玩也没玩好 听课也听不好 一定要专 一定要全身关注啊 集中精力

08:46.170 --> 08:49.810
就是如果说你这个请求地址过来的 请求的过来的时候呢 他首先看

08:50.570 --> 08:58.690
有哪些中间键匹配到 有几个中间键匹配到呢 首先看第一个 第一个能匹配到吗 能匹配到 因为他没有传第一个参数

08:59.250 --> 09:06.890
第一个参数表示匹配的地址啊 由于他没有传地的参数 就表示说你任何的地址我都可以匹配 他不看请求方法

09:07.370 --> 09:15.410
使用这个优势函数的话 他是不看请求方法的 你只要地址匹配上就ok 那么第一个没有地址 那么说明他任何情况也都会匹配

09:15.730 --> 09:18.330
那么这个会匹配第几个中间键 会匹配第一个对吧

09:20.840 --> 09:24.680
第一个啊 还会匹配第几个呢 第二个能不能匹配呢 可以

09:25.160 --> 09:31.720
也看上去好像第二个是不能匹配的 因为我这里写的是写杠六十一二三对不对 但是第二个的地址是什么呢 写杠六十

09:32.040 --> 09:36.200
但是你要注意 在express里边呢 如果说你使用优势这个函数啊

09:36.760 --> 09:41.160
他的第一个参数呢 表示的不是说完 精确匹配 他指的是

09:41.880 --> 09:45.720
基路径 或者叫基地址 基础路径 基础地址

09:46.280 --> 09:50.920
什么意思呢 就是说 你只要你请求的路径 以这个东西开头就可以

09:52.120 --> 09:54.120
你只要以这个开头就可以

09:54.840 --> 10:01.480
就是你路径中的一段 这是第一段 第二段 以第一段开头就可以 所以说这个东西也能匹配上

10:02.440 --> 10:06.200
所以说他会匹配到第几个呢 会匹配到第二个

10:06.680 --> 10:12.440
然后呢 还会匹配到第几个呢 能不能匹配到第三个就匹配不了了 因为他并不是以挪杆开头的

10:12.840 --> 10:16.440
对不对 所以他匹配不了了 因此他一共匹配到几个呢 两个

10:17.080 --> 10:17.560
第一个

10:18.520 --> 10:23.800
第二个 好 匹配上了过后呢 干嘛呢 他就开始运行这个函数了 首先运行第一个函数

10:24.120 --> 10:29.720
第一个函数就开始执行第一句话 执行完了过后 你看第一个函数他给了一个什么next

10:30.600 --> 10:36.520
表示什么意思 表示我这得处理完了 我往下移交给下一个中间键

10:37.240 --> 10:39.640
是不是移交给第二个了 下个中间键是不是第二个

10:39.960 --> 10:43.960
对吧 移交给下一个中间键 于是呢就运行了中间键二的处理

10:44.200 --> 10:48.280
然后呢 中间键二再往后移交 后面是不是没了 没了就没了 就什么都不会发生

10:48.600 --> 10:53.880
没了意思吧 所以说他第三个函数用来干嘛的呢 第三个函数就是用于来进行移交的

10:54.200 --> 10:57.960
第一个处理完了移交给第二个 第二个处理完了移交给第三个 就这么个意思

10:58.680 --> 11:04.680
好 那么现在呢 我想问一下大家啊 如果说我现在呢 去请求这个地址

11:05.880 --> 11:16.680
最终控制台会输出几句话 控制台会输出几句话 是不是两句对不对 怎么三句

11:17.880 --> 11:21.080
三句不对啊 应该是两句 为什么呢 因为中间键 中间

11:22.360 --> 11:28.520
我明白了啊 你说三句对对对 你应该来说是三句啊 但是你肯定懂我的意思 懂我的意思肯定是这两句啊

11:29.240 --> 11:34.280
三句还有这个 还有这个 这个是不会运行的 对不对 好 咱们来试一下啊 我们把运行出来

11:35.480 --> 11:39.880
好 现在已经可以了 对吧 已经可以了 好 接下来我们在这里

11:40.520 --> 11:42.520
刷新一次 61123

11:43.480 --> 11:47.320
后面 后面随便写多少都可以 一回车 接下来我们来看这边

11:48.280 --> 11:55.400
是不是中间键一的处理 中间键二的处理 没问题吧 对吧 现在浏览器的拿不到结果 拿不到结果 是因为我没有想应给浏览器任何东西

11:55.880 --> 12:00.200
对不对啊 是不是运行的两个 好 如果说我把这句话注视掉

12:01.720 --> 12:07.720
我把这句话注视掉 那么请问先在这种情况下啊 除了这句话啊 控制台会输出几句话

12:10.260 --> 12:12.260
这个你要充分理解我刚才在讲什么

12:12.900 --> 12:18.340
说只有一句对不对啊 自由第一个中间键虽然说匹配到了两个 但是由于他从第一个开始运行

12:18.580 --> 12:24.820
第一个我没有往后移交 所以说后边的虽然能匹配但是他不会运行 他就是这么一种模式啊

12:25.300 --> 12:26.740
好 今天我们看一下啊 刷新

12:27.700 --> 12:33.300
你看这边 是不是只有中间厌医的处理 对吧 哎 这就是express的模式 这种模式

12:33.860 --> 12:36.020
处理东西的时候呢 非常非常好

12:36.900 --> 12:43.300
一会儿呢 我也可以看到 他有很多地方了 我都可以利用中间键来做一些进行 做一些处理 好 咱们来看一下啊

12:43.940 --> 12:45.780
刚才这里呢 我还觉得个例子 就是locking

12:46.340 --> 12:50.740
啊 擦擦擦 就这种 这种地址呢 你看 那如果说我请求这个地址

12:51.060 --> 12:53.940
又来想一想 在这个代码里边 如果说我请求这个地址

12:54.580 --> 12:55.540
他会输出几句话

12:57.640 --> 12:58.440
他会输出几句话

13:02.040 --> 13:02.600
说两句

13:03.400 --> 13:08.440
对不对 两句 不是 不是伟代吗 他不是伟大 一看我都写出来了 他肯定不是伟大吗

13:08.760 --> 13:12.520
啊 伟大吗 是不能运行的啊 我这个肯定不是伟大吗 是正耳八指的代吧

13:13.000 --> 13:13.960
啊 他不是伟大吗

13:15.400 --> 13:19.720
啊 如果这样子就能无线往下移 对的啊 是能够无线往下移 但是呢

13:20.040 --> 13:25.240
因为他匹配到的数量 毕竟是有限的嘛 所以他遇到最后一个再往下移的话 就没东西了

13:25.480 --> 13:29.880
啊 就没东西了 那么刚才我们这个这个这个这种情况的话 他就也会输出两个

13:30.440 --> 13:34.440
首先匹配到他 对吧 然后往后移交 往后移交是不是移交到他了 不是

13:35.000 --> 13:37.560
因为他没有匹配到 所以说移交到他了 对吧

13:38.200 --> 13:41.640
移交到是匹配的中间键 所以说他会输出中间键1 中间键3

13:42.360 --> 13:47.080
啊 是什么意思 那中间键3你看他是不是没有往后移交 对吧 他就没有往后移交了

13:47.480 --> 13:52.200
OK 那么现在呢 就是这是中间键的处理模式 我们只需要理解这个东西就行了啊

13:52.680 --> 13:53.480
把这个复制一下

13:54.520 --> 13:55.720
好 接下来我们把这个删了

13:56.600 --> 13:58.760
那么现在呢 我们来继续往后看

13:59.480 --> 14:01.720
我们其实呢 我们这几天呢

14:02.840 --> 14:09.560
啊 应该不会去写自己写中间键啊 应该自己不会去写 但是你要理解中间键

14:09.880 --> 14:16.440
你理解的中间键过后呢 你才知道 一个是price里边 他很多时候给你做的东西啊 你写的那些单码到底是啥意思

14:16.600 --> 14:20.040
他的原理是什么 你才清楚 好 接下来我们来看一下

14:20.680 --> 14:26.440
怎么有哪些中间键我们可以使用 就是别人已经给你写好了 你不用自己去写

14:27.160 --> 14:28.440
有哪些中间键可以使用了 第一个

14:29.640 --> 14:30.600
express static

14:31.400 --> 14:32.440
你看我们这里打个出示

14:33.320 --> 14:34.920
这啥意思呢 他说这个函数啊

14:35.560 --> 14:39.560
传入一个参数 我这个参数呢 就是一个目录啊 一个目录的路径作为参数

14:40.280 --> 14:45.080
他就会把这个目录啊 比方说没传这个目录 把这个目录的路径作为一个参数给他传过去

14:45.800 --> 14:48.840
啊 他就会以这个目录呢 作为根目录

14:49.560 --> 14:52.520
然后呢 返回一个什么呢 返回一个中间

14:53.240 --> 14:55.000
啊 他这个函数会返回一个中间键

14:55.480 --> 14:58.440
他将指定的 这写错了啊 他将指定的

15:00.200 --> 15:02.200
指定的目录作为静态支援目录

15:02.600 --> 15:07.640
当我们访问服务系的时候呢 这个中间键会经过开始对应对应

15:08.040 --> 15:12.520
该目录中的文件 如果说能够找到文件就想用文件那种 不能不再往后移交

15:12.600 --> 15:17.080
如果说无法找到文件就往后移交 啥意思呢 给大家看一下 那用法是这样子的

15:19.080 --> 15:20.120
呃 use

15:22.810 --> 15:23.450
express

15:24.410 --> 15:24.810
static

15:26.840 --> 15:28.360
啊 有些同学可能又看不懂了

15:29.160 --> 15:29.480
啊

15:30.360 --> 15:36.120
只要连着一写 我发现啊 好多同学是只要代码一连着写 他就看不懂了啊 这就是这就是基础比较薄弱

15:36.680 --> 15:39.320
呃 那我就分开写吧 呃 midwear

15:39.560 --> 15:41.160
啊 中间键的单词啊叫做midwear

15:42.120 --> 15:42.680
express

15:43.320 --> 15:47.400
得到一个中间键啊 这里边要传一个参数啊 作为拿一个文件

15:47.640 --> 15:51.480
文件夹就是目录的路径作为一个参数 那么我们拿这个目录的路径

15:51.880 --> 15:57.480
拿这个目录的路径的时候呢 我们一般会使用绝对路径啊 一般会使用绝对路径 所以说我们一般会这样子写

15:58.360 --> 15:58.840
require

15:59.560 --> 16:03.640
呃 pass 我们知道这个pass 这个类字模块对吧 它是可以获取绝对路径的

16:06.390 --> 16:11.190
获取一个绝对路径 绝对路径呢 我们这里可以从当前目录出发 就是当前模块

16:11.270 --> 16:13.350
就是index这个文件 就这个文件所在的

16:13.590 --> 16:18.470
所在的目录出发 然后找到什么呢 找到public目录啊 这样子的是最最保险的

16:18.870 --> 16:20.710
拿到这个就是di r

16:21.030 --> 16:24.470
那拿这个目录啊 咱们打印出来哈 看一下

16:25.110 --> 16:25.910
di r

16:26.710 --> 16:27.750
先把这个注释掉

16:28.790 --> 16:33.430
啊 你看得到了目录是不是这个目录 对不对啊 就是我们那个public这个文件夹的目录

16:33.750 --> 16:38.390
就这个目录 好然后我们把这个目录给谁 是不是给这个函数 这个函数需要一个参数啊

16:38.710 --> 16:44.390
那么把这个给他给他过后来他会返回一个中间键 然后呢 我们是不是只需要把这个中间键

16:45.030 --> 16:46.630
放到这个位置就行了

16:47.110 --> 16:50.470
对不对啊 当然这个代码呢 你可以这样子来看啊

16:50.550 --> 16:54.950
你看表达式嘛 这个玩意是不是表达式 对不对啊 这是非常非常基础的那种啊

16:55.030 --> 16:57.510
这是个表达式 所以说这个地方是不是直接可以替换过来

16:58.070 --> 17:01.510
对吧 同样的道理 这个玩意在这里是不是个表达式

17:02.310 --> 17:05.350
这个玩意跟这个玩意不是一样的吗 所以不可以替换过来

17:05.750 --> 17:12.710
对吧 我说说我们从通常的就直接形成这种形式啊 那么这个东西叫做什么呢 叫做搭建一个静态支援服务器

17:13.670 --> 17:19.430
搭建一个静态支援服务器 这就是我们昨天熟悉的这个东西

17:20.630 --> 17:23.510
啊 它的作用是什么呢 他以这个目录为根目录

17:24.230 --> 17:27.830
当我们访问这个路径的时候 比方说啊 当我们现在去访问

17:29.940 --> 17:34.740
音这个设计啊 音这个设计ATM的时候 你看是不是显示坏了

17:35.220 --> 17:38.820
是不是显示坏了 跟我们昨天是一样的 当我们访问这个路径的时候

17:38.980 --> 17:44.180
他是把这个路径把这个路径音色到这个目录里边的音这个设计ATM

17:44.420 --> 17:47.140
对不对 然后把这个文件内容读出来给我发送过来

17:47.620 --> 17:50.980
对不对 他就这么一个逻辑啊 如果他找到了文件

17:50.980 --> 17:55.460
他就直接扔给我 如果他没有找到文件的话 他就继续往后移交

17:55.460 --> 17:58.740
所以他就是这么一个逻辑 因为我们中间线不是可以往后移交吗 对吧

17:58.900 --> 18:04.260
自己处理不了 okay 那我往后移交处理 自己能处理我就把处理的 我就不往后移交了

18:04.260 --> 18:05.380
对吧 他是这么一个逻辑

18:06.180 --> 18:08.420
能听懂吗 听懂了QQE

18:11.690 --> 18:13.210
没问题吧 这个提示很简单的啊

18:14.490 --> 18:18.890
对不对 那么当然那有人说 为什么我们要学昨天那个东西

18:19.210 --> 18:27.210
你就是学知识啊 你千万不要以能写就行 能写就行你是找不到工作的 你问啥啥都不知道

18:27.210 --> 18:33.370
而且呢 你会发现 如果说你用这种方式来学的话 你是连能写都做不到的

18:33.690 --> 18:40.810
因为你很多地方你要基于你的理解 不然的话稍微变动一点点 只要老是没有写过你就彻底不会写了

18:41.050 --> 18:46.730
而我们开发的长期是极其灵活的 应该理论上来说 应该是无限多的长期

18:46.890 --> 18:53.290
不然的话也不会需要那么多开发者 对吧 如果说开发的长期是极其有限的 写的代码是非常固定的

18:53.370 --> 18:58.570
那就不需要开发者了 那我们用一个编写一个程序 张程序帮我们来写代码 因为固定嘛

18:58.890 --> 19:03.370
就是因为他不固定他极其的灵活 所以他才需要这么多开发者去创造

19:03.610 --> 19:06.490
说开发是一个创造性的劳动啊 你们不要把他学识了

19:06.890 --> 19:11.290
就是我们为什么独一的课程里面非常非常强调 要去理解代码那种

19:12.010 --> 19:18.970
好 这里呢我们就使用了这个中间键了 对不对 好 那么接下来我来问一下大家一个问题啊 而且对 而且当然他还有这个这个功能

19:19.370 --> 19:25.770
就是如果说你访问路径的时候呢 你没有写文件名 他默认是应那个时候文件这个文件

19:28.010 --> 19:32.570
如果说你没有写文件名啊 没有写这个东西 那么他默认就是这个文件

19:34.170 --> 19:39.850
默认就是应那个时候的爱丁门 对不对 这就是搭建了一个静态资源服务器 好 现在我问大家一个问题啊

19:42.980 --> 19:44.980
我们这里呢 写上一个帖子

19:46.020 --> 19:46.340
写个

19:48.340 --> 19:49.860
写个应这个设定

19:52.260 --> 19:54.340
看一下有没有仔细的听我刚才的讲

19:55.220 --> 20:00.340
我们这里输出 输出一个123 那么请问一下 如果说我现在去访问这个地址

20:00.900 --> 20:02.100
会不会输出这个123

20:05.290 --> 20:16.410
会不会呢 一定要仔细听课啊 我刚才其实已经解释过了 解释过了两次

20:17.130 --> 20:23.130
他不会输出123 我刚才因为他的逻辑是什么 就是如果说我能得到这个文件 那么我就

20:23.930 --> 20:28.090
把这个文件拿到内容发给你 我就不往后移交了 所以说后边的东西拿不到

20:28.490 --> 20:31.610
后边的后边能不能体配呢 能体配但是它是运行不了

20:32.410 --> 20:36.170
但是呢 如果说我拿不到这个文件我就往后移交 它是这么一个逻辑

20:36.810 --> 20:40.330
因此呢 我们这里看一下啊 这里我们就访问这个应这个设定

20:42.250 --> 20:46.170
那么现在呢 这里有没有123没有对不对 因为他能能拿到这个文件

20:46.490 --> 20:50.090
那比方说我这里写个应这个是二点一天没有呢 那如果说我去访问这个地址呢

20:50.890 --> 20:52.170
应这个是二点一天没有

20:53.210 --> 20:59.290
啊 你看是不是就输出了123 对不对 因为他拿不到这个文件 拿不到这个文件 他说我处理不了 我处理不了就交给后边的处理

20:59.370 --> 21:03.530
还有这么一个逻辑 这是这个总念件 那么我再问大家一个问题

21:03.770 --> 21:07.130
这就是考验什么 考验你的基础程序 就是结实基础了

21:07.770 --> 21:09.770
这个函数返回的结果

21:11.610 --> 21:12.890
是一个什么样的内容

21:13.850 --> 21:17.450
这个函数 它一定有返回结果嘛 它返回的结果是一个什么样的内容

21:23.610 --> 21:30.730
诸如此类 能够写函数 还有答案吗 是不是函数 对不对 肯定是函数 为什么呢 因为这里都高数理了

21:31.370 --> 21:36.730
中间件是什么呀 中间件就是一个函数 那我现在又高数理了 我这里写出来

21:37.850 --> 21:44.650
中间件是一个函数 那我这里又高数理了 这个东西是返回一个中间件 那不就是返回一个函数吗 中间件又是一个处理函数

21:45.690 --> 21:49.770
一把函数给它就行了 那么这就是一个中间件 那么接下来我们看下一个

21:50.250 --> 21:52.650
下一个就是叫做express url encoded

21:53.690 --> 21:58.330
这也是一个中间件 调用这个函数它就会返回一个中间件 那么它使用方式也是一样

21:58.730 --> 22:02.330
app use express url encoded

22:02.650 --> 22:05.690
那么这里本来是不需要在这里面写任何东西的

22:06.250 --> 22:11.770
不需要写任何东西的 但是不写任何东西的它要报一个错啊 那么这个错呢我们在这里就不解释了

22:11.930 --> 22:17.370
就不解释了啊 咱们后期可以有解释 其实这个东西也很简单 它就是一个跟以前的版本有一些区别啊

22:17.930 --> 22:18.730
它为了兼容

22:19.290 --> 22:24.490
它仍然是使用的是以前版本的做法 那如果说你要启用新版本的做法的话 你要做一个配置

22:25.530 --> 22:26.250
啊 这个配置呢

22:27.210 --> 22:35.610
如果你不写的话 它可能要报错 不是报错 它报一个警告 它说这个东西呢以后呢可能老版本就不支持了 建议你把它加上啊 你不用去管它是啥

22:35.930 --> 22:42.730
这种玩意呢 纯粹就是为了避免警告的 总之它这个函数它会返回一个中间键 那么这个中间键是以来干嘛用的呢

22:43.290 --> 22:43.770
看着啊

22:45.610 --> 22:47.850
这个中间键呢 我们在这里给大家打开那个注释

22:48.810 --> 22:53.530
它是因主要是应对有带消息体的请求

22:54.730 --> 23:02.330
主要是应对带消息体的请求 如果说没有这个中间键的话 它会出这么一个问题 什么问题呢 比方说我们昨天的代码post

23:03.290 --> 23:08.170
post 是不是一个post 这种请求是不是会可能会带消息体 对不对啊 请求写钢

23:09.850 --> 23:11.450
然后呢 我们这边呢 去

23:12.810 --> 23:14.730
请求写钢 比方说六字啊

23:16.090 --> 23:20.650
或者是针路 然后呢 我们这里以写个处理函数

23:23.050 --> 23:30.490
我们在这里呢 能不能获取消息体呢 这里是获取不到的啊 获取不到消息体的 就是无法直接获取

23:31.450 --> 23:37.130
直接获取消息体 那么我们怎么来去 怎么来发生一个post请求呢 我们可以用post面

23:37.930 --> 23:42.010
我们昨天安装的东西对吧 可以用post面来模拟一个post请求

23:48.570 --> 23:49.530
好 在这边啊

23:50.650 --> 23:55.370
呃 我们请求的地址呢 9527 然后呢 这边我们写上locking啊 我们请求这个地址

23:55.690 --> 23:59.050
然后我们使用post请求 post请求 我们也是不是要发消息体

23:59.370 --> 24:01.530
消息体在哪里填呢 在这里填啊 body

24:02.010 --> 24:06.170
body 的消息体 你看消息体是不是有很多很多那种格式 有form data

24:06.650 --> 24:13.530
有三w form url in coded 这是一种格式 不同的消息体格式都不一样的啊 还有若原式格式

24:13.610 --> 24:19.290
还有binary 二净子格式 还有graphql啊 这个大家啊 就是就说远了啊 我看这个若

24:19.530 --> 24:23.610
比方那么可以看这个吧 x 3w form url in coded

24:24.250 --> 24:28.810
很绕口 那么它就是一个建制队 比方说我们要传账号密码啊 log id

24:29.530 --> 24:32.410
然后呢 abc 密码呢

24:33.530 --> 24:39.050
logging password 123好 我们再发送一个请求看一下 发送一个请求

24:40.090 --> 24:44.250
然后接下来让我们看一下它的原式格式 我们的请求的原式格式点这个code

24:44.890 --> 24:48.250
看一下原式格式 我给它复制下来啊 大家看得清楚一点

24:49.210 --> 24:54.890
这是它的原式格式 这是请求行对吧 不用说了 这是请求头 不用说了 然后这是

24:55.610 --> 24:59.610
消息题 你看消息格式是什么格式 是不是这个东西等于

25:00.410 --> 25:02.090
就是建等于一个子

25:02.970 --> 25:07.690
并且啊 就是另一个分割服 另一个建等于一个子 它就是这种消息格式

25:08.330 --> 25:11.930
那么这种消息格式在服务系怎么拿呢 怎么去拿呢 不好了

25:12.650 --> 25:20.410
可不可以拿 可以拿 它不好拿 那么具体怎么拿啊 我在这里不展开了啊 这又要设计到很多知识呢 包括留着知识

25:21.130 --> 25:26.570
不是那么好拿的在这里 那么我们这里呢 当然希望能够越方便越好

25:27.210 --> 25:30.890
拿起来越方便越好 所以说呢 我们对消息题的解析呢

25:31.290 --> 25:34.170
一个就是express呢 帮我们做了一个中间键 就是这个中间键

25:35.050 --> 25:37.370
这个中间键可以解析什么呢 还是可以解析这种情况

25:37.850 --> 25:40.570
当我们使用请求的时候 如果说带了一个消息题

25:41.050 --> 25:46.090
我们带了消息题的时候呢 一般来说请求它会在头里表给你加上一个content type

25:47.050 --> 25:50.570
我们昨天说了 想应它有这个东西 对吧 请求它实际上也可以有这个东西

25:50.890 --> 25:56.010
请求里边它有这个消息头 表示什么意思呢 表示告诉服务系 我给你发送了消息题

25:56.810 --> 25:59.610
然后这个消息题的格式是什么呢 是这种格式

26:00.330 --> 26:03.210
这是一种标准的协法啊 这种格式就指的是这种格式

26:03.370 --> 26:08.250
就这种协法的格式 它是该取个名字 就这种协法 它该取个名字 就是这种名字

26:08.570 --> 26:10.570
这个东西叫做MIME

26:11.050 --> 26:14.410
不用展开了 我们就是这种格式就是叫做这个名字

26:14.410 --> 26:17.770
那么服务器一看 那么如果说你是这种格式的话

26:17.770 --> 26:20.250
那我就按照这种特殊的格式来进行解析

26:21.210 --> 26:23.210
这个中间键就是来做这个事的

26:24.410 --> 26:26.490
这个中间键干嘛用的 我再看一下

26:26.970 --> 26:30.010
当它发现请求头中content type

26:32.010 --> 26:33.210
为这种格式的时候

26:34.090 --> 26:35.450
它为这个种格式的时候

26:35.770 --> 26:38.330
它就会把这个请求体的内容啊读出来

26:38.730 --> 26:41.530
然后把它解析成一个对象 把这个玩意解析成一个对象

26:41.530 --> 26:43.130
对象变成什么了 变成这个东西

26:43.690 --> 26:45.050
再服务器装进行解析

26:46.890 --> 26:48.090
然后呢locking password的

26:48.090 --> 26:49.930
对吧 这让人说服务器说得很好过去了

26:50.570 --> 26:51.770
把它变成一个对象

26:51.770 --> 26:53.450
然后把这个对象保存到

26:53.850 --> 26:55.770
在瑞可里面加一个属性 body

26:55.770 --> 26:57.130
因为中间键里面不是有

26:57.130 --> 26:58.970
不是可以有这个瑞可对象吗

26:58.970 --> 27:01.450
对吧 中间键的处理过程中是不是可以有一个瑞可对象

27:01.450 --> 27:03.610
它就在瑞可对象里面加一个属性 叫做body

27:04.010 --> 27:06.410
然后呢 把解析出来的对象放到body里面

27:07.370 --> 27:09.530
它就把它放到body里面

27:09.530 --> 27:11.050
然后就继续往后移交

27:11.850 --> 27:13.290
否则的话 什么叫否则

27:13.290 --> 27:15.370
就是说 如果说content type没有

27:15.370 --> 27:16.730
或者是content type里面

27:16.730 --> 27:17.850
它的值不是这个

27:18.330 --> 27:19.610
那就跟我没关系了

27:19.610 --> 27:21.530
我有继续往后移交

27:22.410 --> 27:22.890
你看啊

27:23.770 --> 27:25.690
那么现在有了这个东西你支持过后

27:25.690 --> 27:27.290
那么这里呢 我们打印出

27:27.290 --> 27:28.170
rig body

27:29.450 --> 27:29.850
你看啊

27:30.410 --> 27:31.450
打印出这个rig body

27:32.170 --> 27:33.130
我们来看一下

27:33.130 --> 27:34.410
我们现在到postman里面

27:34.410 --> 27:35.530
带去发动一次请求

27:36.490 --> 27:38.410
发送请求 你看服务器这边

27:38.410 --> 27:39.530
是不是打印出来一个对象

27:40.170 --> 27:41.530
怎么来的对象

27:41.530 --> 27:43.530
就是因为这个中间键给你解析了

27:43.530 --> 27:46.410
它发现我们请求过去的content type为这个值

27:46.410 --> 27:48.330
于是呢 它把这个消息体给你进行解析

27:48.330 --> 27:50.330
解析出来变成一个对象

27:50.330 --> 27:52.330
把个对象放到这个rig body里面

27:52.650 --> 27:54.330
如果说没有这个中间键的话

27:54.330 --> 27:55.370
没有的话

27:55.850 --> 27:57.370
如果说没有 我们再来看

27:57.690 --> 27:58.490
发送请求

27:59.690 --> 28:00.970
你看这里是不是undefined

28:00.970 --> 28:02.090
根本就没有这个属性

28:02.090 --> 28:03.930
根本就没有rig body这个属性

28:04.250 --> 28:05.050
原来的意思吧

28:05.050 --> 28:06.010
它就这么个意思

28:07.210 --> 28:08.890
那么现在我问大家一个问题啊

28:08.890 --> 28:09.610
问题又来了

28:10.330 --> 28:11.050
仔细听课

28:11.930 --> 28:16.490
如果说我给服务器发的消息体格式

28:16.490 --> 28:18.010
不是这种格式

28:18.010 --> 28:19.050
是这种格式

28:19.050 --> 28:20.010
不要说是接生

28:21.290 --> 28:22.490
直接就是一个对象格式

28:24.010 --> 28:25.050
接生跟那个

28:25.050 --> 28:26.490
接式对象有什么区别呢

28:26.490 --> 28:28.490
就是接生里面的所有的属性

28:28.490 --> 28:30.170
必须要用双一毫引起来

28:30.170 --> 28:31.050
必须是一个支付串

28:31.930 --> 28:32.970
其他没有什么区别

28:37.020 --> 28:39.500
比方说我给服务器发送的是这种格式

28:39.500 --> 28:40.540
生的发送

28:40.540 --> 28:42.380
然后我们看一下它的原式格式啊

28:43.740 --> 28:44.380
看一下

28:44.380 --> 28:45.820
我们现在给服务器发的

28:45.820 --> 28:46.540
是这种格式

28:48.220 --> 28:50.860
那么请问服务器端这边打出来

28:50.860 --> 28:52.300
打印出来是一个对象

28:52.300 --> 28:54.140
还是一个undefined

28:54.860 --> 28:56.060
就两a和b

28:57.340 --> 28:58.860
对象还是undefined

29:02.090 --> 29:03.370
这个里面肯定加到那个时候

29:03.370 --> 29:04.970
它这个中间键里面肯定用使用了

29:04.970 --> 29:05.930
那个时候移交的

29:06.810 --> 29:07.770
对象还是undefined

29:09.130 --> 29:10.010
就是undefined

29:10.010 --> 29:11.370
一定不要想当然啊

29:11.370 --> 29:12.330
就是写程序

29:12.330 --> 29:14.170
一定要从它原理出发

29:14.730 --> 29:17.050
不是说我这里写成了一个对象格式

29:17.050 --> 29:18.090
它就变成对象格式了

29:18.090 --> 29:19.050
没有这种说法

29:19.530 --> 29:22.330
就像昨天大家好像直观的认为

29:22.330 --> 29:23.610
服务器有一个文件

29:23.610 --> 29:25.370
后来就自动可以发文了

29:25.370 --> 29:26.410
没有这种说法

29:27.530 --> 29:28.410
那么这里也是一样

29:28.890 --> 29:31.050
不是说我这里写的对象就变成对象了

29:31.850 --> 29:32.810
它要进行解析

29:32.810 --> 29:35.050
因为消息体的格式太多太多了

29:35.050 --> 29:36.570
很多很多种格式

29:36.570 --> 29:37.930
它要进行解析的

29:38.010 --> 29:39.530
而我们现在这个中间键呢

29:39.530 --> 29:41.370
它只能解析什么格式

29:41.370 --> 29:43.370
它只能解析这种格式

29:44.490 --> 29:45.850
它只能解析这种格式

29:45.850 --> 29:47.450
它解析不了这种格式

29:47.450 --> 29:48.650
所以这种格式它不会管

29:48.650 --> 29:50.730
它管都不管你看它这个逻辑是什么

29:50.730 --> 29:52.490
如果说它不是这种格式的话

29:52.490 --> 29:54.010
直接向后移交

29:54.010 --> 29:56.330
直接向后移交是不是Rick Baldy里面没东西

29:56.330 --> 29:56.650
对吧

29:56.650 --> 29:58.010
它没有给它复制啊

29:58.010 --> 29:59.610
它没有没有给它复制

29:59.610 --> 30:02.010
所以说后边再去获取这个Rick Baldy

30:02.010 --> 30:02.810
是获取不到的

30:05.370 --> 30:07.210
它这里倒是绝对做了一个处理

30:08.890 --> 30:10.650
这个问题没问好

30:10.650 --> 30:11.690
这个问题没问好

30:11.690 --> 30:13.290
它给你做了一个简单的处理

30:13.290 --> 30:14.090
它是解析不了

30:14.090 --> 30:14.570
解析不了

30:14.570 --> 30:15.610
它还是给你做了一个处理

30:15.610 --> 30:17.450
就是给它复制为一个空对象了

30:17.450 --> 30:19.290
给它复制为一个空对象了

30:19.290 --> 30:22.170
但是其他它没有办法进行解析的

30:22.170 --> 30:23.290
它没有办法进行解析的

30:23.290 --> 30:25.130
它只是给你复制为了一个空对象

30:25.130 --> 30:26.570
实际上它没有解析的

30:26.570 --> 30:28.010
并不是我们想要的结果

30:28.010 --> 30:28.650
对不对

30:28.650 --> 30:30.330
这是这个中间键

30:30.330 --> 30:32.490
好 现在我们再看下一个中间键

30:32.490 --> 30:34.250
下一个中间键叫做接生

30:34.250 --> 30:36.330
这个中间键跟上面这个中间键

30:36.330 --> 30:38.490
的用法是完全一样的

30:38.490 --> 30:44.700
use express接生

30:44.700 --> 30:50.410
那么这个中间键的用法跟前面是完全一样的

30:50.410 --> 30:52.410
前面那个是解析啥呢

30:52.410 --> 30:54.090
是解析这种格式

30:54.090 --> 30:57.610
是解析这种格式的

30:57.610 --> 30:59.290
下面这个解析啥呢

30:59.290 --> 31:01.370
是解析的这种格式

31:01.370 --> 31:04.250
就是解析的消息体格式不一样

31:04.250 --> 31:06.490
通常情况下

31:06.490 --> 31:08.810
客户端那边喘过来就抛射提销

31:08.810 --> 31:10.330
就是在消息体的格式

31:10.410 --> 31:11.930
一般来说就这两种

31:11.930 --> 31:13.370
其实还有一些

31:13.370 --> 31:17.610
一般来说简单消息的话就这么两种

31:17.610 --> 31:18.410
因此呢

31:18.410 --> 31:20.650
以当你使用了这两个中间键过后

31:20.650 --> 31:22.090
是不是万无一失的

31:22.090 --> 31:23.450
对不对 是不是万无一失的

31:23.450 --> 31:25.370
要么就它解析

31:25.370 --> 31:26.410
要么就它解析

31:26.410 --> 31:27.930
消息体总归人解析出来

31:27.930 --> 31:30.650
就保证了我们后续的使用

31:30.650 --> 31:32.890
保证了我们后续的使用的时候

31:32.890 --> 31:34.730
都可以获取到这个消息体

31:34.730 --> 31:36.170
好 咱们来看一下吧

31:36.170 --> 31:37.930
好 现在我们来发动

31:37.930 --> 31:38.570
发动请求

31:38.570 --> 31:40.490
你看服务器是不是可以获取的消息体

31:40.490 --> 31:42.250
如果说不用这种方式

31:42.250 --> 31:43.450
不用这种方式用什么

31:43.450 --> 31:47.610
用这个这种方式发送请求

31:47.610 --> 31:49.050
服务器是不是也可以获取

31:49.050 --> 31:49.450
对不对

31:49.450 --> 31:51.210
是不是也可以获取

31:51.210 --> 31:53.930
那么这就是两种都可以获取的

31:53.930 --> 31:55.210
因为要么就被它解析

31:55.210 --> 31:56.250
要么就被它解析

31:56.250 --> 31:57.930
就是两个中间键

31:57.930 --> 32:00.410
优势就是使用一个中间键

32:00.410 --> 32:02.170
我还拿这么多的

32:02.170 --> 32:04.890
节省和节式对象是什么关系呢

32:04.890 --> 32:05.650
是这样子

32:05.650 --> 32:07.850
节省它就是一个制服串

32:07.850 --> 32:10.010
它是用一个特殊的制服串格式

32:10.010 --> 32:13.210
来表达一个对象结构

32:13.210 --> 32:15.850
表达对象 输主这些结构

32:15.850 --> 32:17.450
它是适合网络传输的

32:17.450 --> 32:18.490
因为每一种语言

32:18.490 --> 32:21.530
它都能够认识节省格式

32:21.530 --> 32:24.330
formdata一般用于上传文件

32:24.330 --> 32:25.930
我们这里不设计

32:25.930 --> 32:28.170
它个格式要稍微复杂一点

32:28.170 --> 32:30.490
这是我们这两种情况

32:30.490 --> 32:33.290
就是这两种消息体的解析方式

32:33.290 --> 32:34.570
能理解吧

32:34.570 --> 32:36.330
好 接下来重点来了

32:36.410 --> 32:38.730
会影响到我们写代码的终点来了

32:38.730 --> 32:40.890
expressrouter

32:40.890 --> 32:43.210
你看一个代码明显就变多了对吧

32:43.210 --> 32:49.620
这个东西叫做路由中间键

32:49.620 --> 32:51.380
我们往下看

32:51.380 --> 32:52.900
代码方正

32:52.900 --> 32:58.330
路由中间键

32:58.330 --> 33:00.570
今天晚上其实

33:00.570 --> 33:01.770
效果能出来

33:01.770 --> 33:02.730
效果也不错

33:02.730 --> 33:05.610
而且也没有那么的复杂

33:05.610 --> 33:09.450
因为我把比较复杂的地方都给它隐藏掉了

33:09.450 --> 33:10.970
五天时间吧

33:11.130 --> 33:12.570
我们不能讲的太简单

33:12.570 --> 33:15.130
而且同时要做出来效果

33:15.130 --> 33:18.890
同时要涉及到部分原理

33:18.890 --> 33:20.650
其实也蛮难的

33:20.650 --> 33:23.210
我当时我还是希望有能力的同学

33:23.210 --> 33:27.290
能够跟咱们后期的课程系统的完整的去走一遍

33:27.290 --> 33:28.410
因为很多人会觉得难的

33:28.410 --> 33:31.690
是因为前面的有些原理是缺失的

33:31.690 --> 33:35.610
你看通过expressrouter这个函数

33:35.610 --> 33:36.250
可以干嘛呢

33:36.250 --> 33:37.290
可以返回中间键

33:37.290 --> 33:38.330
那么我又来了

33:38.330 --> 33:39.050
问题又来了

33:39.050 --> 33:40.570
这东西是函数

33:40.570 --> 33:41.530
还是对象

33:41.530 --> 33:42.890
我们说的对象

33:42.890 --> 33:44.570
因为函数本身也是对象

33:44.570 --> 33:46.090
我们说的函数还是对象

33:46.090 --> 33:48.730
肯定是对象就指的是除函数之外的对象

33:48.730 --> 33:50.570
这是一个函数还是对象

33:50.570 --> 33:52.810
你就看这个代码别的不看

33:52.810 --> 33:56.280
是函数还是对象

33:56.280 --> 33:56.920
是不是函数

33:56.920 --> 33:57.880
它一定是函数

33:57.880 --> 33:58.440
为什么

33:58.440 --> 34:01.160
因为这里在使用把它当成中间键使用

34:01.160 --> 34:02.200
肯定是函数

34:02.200 --> 34:03.400
所以它是函数

34:03.400 --> 34:04.200
对不对

34:04.200 --> 34:05.720
那么函数里边

34:05.720 --> 34:07.880
你看它又有函数

34:07.880 --> 34:09.080
这个玩意是怎么做出来的

34:09.080 --> 34:12.280
这个玩意不就是GS基础里面学的

34:12.360 --> 34:16.520
函数它本身本质上也是一个对象

34:16.520 --> 34:17.080
对吧

34:17.080 --> 34:19.080
它对象里边是不是可以加属性

34:19.080 --> 34:19.880
对吧

34:19.880 --> 34:21.080
这个函数它是个函数

34:21.080 --> 34:22.600
它里边是不是可以加属性

34:22.600 --> 34:24.040
这个代码看过没

34:24.040 --> 34:24.920
这种代码

34:24.920 --> 34:26.920
应该是见过的对不对

34:26.920 --> 34:31.080
这是一个就是我把函数当成对象是一样的

34:31.080 --> 34:33.720
得到一个路由中间键

34:33.720 --> 34:35.720
给它配置一个基地址

34:35.720 --> 34:36.760
比方说这个地址

34:36.760 --> 34:37.640
给它配置一个

34:37.640 --> 34:39.160
然后把中间键放这

34:39.160 --> 34:40.120
啥意思呢

34:40.200 --> 34:42.040
就是说如果说

34:42.040 --> 34:44.920
我以这个东西开头

34:44.920 --> 34:45.720
我请求地址

34:45.720 --> 34:46.600
以这个东西开头

34:46.600 --> 34:48.520
我就交给你来处理

34:48.520 --> 34:49.960
那么你是谁写的

34:49.960 --> 34:50.760
肯定不是我写的

34:50.760 --> 34:51.000
对吧

34:51.000 --> 34:53.160
是他一个space帮我们提供的函数

34:53.160 --> 34:54.600
所以说他写的函数

34:54.600 --> 34:55.640
那么这个东西

34:55.640 --> 34:57.560
到底是怎么一个逻辑呢

34:57.560 --> 34:59.560
它可以通过这个函数里边的一些方法

34:59.560 --> 35:00.760
来进行配置

35:00.760 --> 35:01.640
比方说

35:01.640 --> 35:02.600
我能够

35:02.600 --> 35:03.720
这个东西能匹配啥呢

35:03.720 --> 35:04.680
能够精确匹配

35:04.680 --> 35:06.200
这里边就是精确匹配了

35:06.200 --> 35:07.800
能够精确匹配

35:07.800 --> 35:09.720
击入进一个鞋

35:09.720 --> 35:11.240
击入进是不是这个

35:11.240 --> 35:13.240
那么就相当于是能够精确匹配这个

35:13.240 --> 35:15.240
那么这里呢

35:15.240 --> 35:16.840
这个地方是能够精确匹配

35:16.840 --> 35:19.080
击入进加上拼接一个鞋杠A

35:19.080 --> 35:21.080
那么就相当于是能够精确匹配这个

35:21.080 --> 35:24.920
那么这个地方相当于是

35:24.920 --> 35:26.360
击入进一个鞋杠

35:26.360 --> 35:28.200
那就相当于是能够精确匹配这个

35:28.200 --> 35:29.240
另外意思吧

35:29.240 --> 35:31.640
他在前面加上一个击入进来进行匹配的

35:31.640 --> 35:33.240
所以说击入进

35:33.240 --> 35:34.520
我们在这里可以随意的感

35:34.520 --> 35:37.320
那么在这个击入进之下来进行匹配

35:37.320 --> 35:38.360
就这么个意思

35:38.360 --> 35:39.720
所以有三种匹配规则

35:39.720 --> 35:41.320
匹配get这个路径

35:41.320 --> 35:43.880
匹配get这个路径

35:43.880 --> 35:45.800
匹配pose这个路径

35:45.800 --> 35:47.160
那么是不是有三种匹配规则

35:47.160 --> 35:48.520
那么它的逻辑是怎么

35:48.520 --> 35:49.800
当我们请求的时候

35:49.800 --> 35:51.080
以这个地址为开头的

35:51.080 --> 35:52.600
它就交给这个中间键

35:52.600 --> 35:53.960
这中间键的处理逻辑是怎么呢

35:53.960 --> 35:54.920
它是这样子

35:54.920 --> 35:57.080
如果说我能匹配到

35:57.080 --> 35:59.800
我直接运行这个函数

35:59.800 --> 36:01.320
如果说我不能匹配到

36:01.320 --> 36:03.800
就是这里边一个都不能匹配

36:03.800 --> 36:04.680
匹配不到的话

36:04.680 --> 36:06.520
继续往后移交

36:06.520 --> 36:07.480
就是它中间的逻辑

36:07.480 --> 36:09.000
特别特别简单

36:09.000 --> 36:11.160
逻辑就是你不是配置到一些东西吗

36:11.160 --> 36:13.960
能匹配我就运行你指定的函数

36:13.960 --> 36:15.960
不能匹配我就往后移交

36:15.960 --> 36:17.800
那么你看一下这样子处理过后

36:17.800 --> 36:20.120
是不是可就把我们

36:20.120 --> 36:23.720
某一些请求的处理放到这个路由立本啊

36:23.720 --> 36:26.520
这样的做法非常有利于

36:26.520 --> 36:27.800
代码分割

36:27.800 --> 36:29.080
就模块化

36:29.080 --> 36:30.360
比方说我们一般来说

36:30.360 --> 36:32.920
使用load.js来写一个express服务器的话

36:32.920 --> 36:33.960
我们一般会怎么写呢

36:33.960 --> 36:36.760
我们一般会在这里建立一个文件甲

36:36.760 --> 36:38.520
叫做roach

36:38.520 --> 36:39.800
建立一个文件甲

36:39.800 --> 36:40.920
表示路由

36:41.080 --> 36:42.520
这里面就写上各种各样的路由

36:42.520 --> 36:44.280
比方说我们这里可以写两个路由

36:44.280 --> 36:46.680
一个是user

36:46.680 --> 36:48.120
表介式

36:48.120 --> 36:49.880
这里是专门处理

36:49.880 --> 36:51.320
专门处理

36:51.320 --> 36:54.680
针对用户的操作

36:54.680 --> 36:57.640
就是针对用户有哪些请求

36:57.640 --> 36:58.440
什么get的请求

36:58.440 --> 36:59.720
posed的请求等等等等

36:59.720 --> 37:01.240
那么我们这里针对用户的操作

37:01.240 --> 37:02.200
我们可以怎么写呢

37:02.200 --> 37:04.520
我们是不是就可以用这种写法

37:04.520 --> 37:05.960
导出一个路由就完事了

37:05.960 --> 37:06.280
对吧

37:06.280 --> 37:07.160
你不是要用个中间

37:07.160 --> 37:08.680
最终就给过一个路由吗

37:08.680 --> 37:08.920
对不对

37:08.920 --> 37:10.280
我就导出一个路由就完事了

37:10.280 --> 37:12.200
所以说我们可以通过xpress

37:12.200 --> 37:17.110
我们就导入xpress

37:17.110 --> 37:18.230
写完了过后

37:18.230 --> 37:19.430
我们再来进行一次分析

37:21.030 --> 37:21.590
xpress

37:21.590 --> 37:23.030
然后通过rotar

37:23.030 --> 37:24.070
创建一个什么呢

37:24.070 --> 37:25.030
创建一个路由

37:26.630 --> 37:27.350
rotar

37:27.350 --> 37:29.590
最后不要忘记把这个路由导出

37:30.550 --> 37:31.750
导出这个路由

37:31.750 --> 37:33.510
导出路由是不是就中间键对吧

37:33.510 --> 37:34.790
导出路由中间键

37:35.670 --> 37:37.030
路由中间键

37:38.550 --> 37:39.350
那么这样子

37:39.350 --> 37:40.710
然后在这边的rotar

37:40.710 --> 37:41.910
我们就可以使用

37:41.990 --> 37:44.710
比如说我们这里有针对用户的操作

37:44.710 --> 37:45.430
有两种

37:45.430 --> 37:46.150
一个是post

37:47.190 --> 37:48.070
locking

37:48.070 --> 37:49.030
登录

37:49.030 --> 37:49.830
登录

37:49.830 --> 37:50.790
然后一个处理函数

37:52.870 --> 37:53.430
这是登录

37:54.870 --> 37:55.590
另一个呢

37:55.590 --> 37:56.630
rotar

37:56.630 --> 37:56.950
post

37:58.390 --> 37:58.710
rig

37:59.590 --> 37:59.910
注册

38:01.910 --> 38:02.310
dris

38:03.110 --> 38:04.070
那么这里是注册

38:04.870 --> 38:06.710
比如说针对用户的操作是有两种

38:06.710 --> 38:08.630
我们单独来写在一个模块里面去

38:08.630 --> 38:09.430
配置好一个路由

38:09.430 --> 38:11.510
在路由里面进行了两个配置

38:11.510 --> 38:13.110
然后把这个路由中间键导出

38:13.110 --> 38:14.950
导出了过后来在这边怎么来用呢

38:14.950 --> 38:16.550
这边这些代码就全部没了

38:17.590 --> 38:18.630
全部没了

38:18.630 --> 38:19.670
好那么这边就是

38:21.030 --> 38:22.150
使用一个中间键

38:22.150 --> 38:23.830
只要你访问的路径比方说

38:23.830 --> 38:25.110
以这样的路径开头

38:25.110 --> 38:26.070
API

38:26.070 --> 38:26.550
use

38:26.550 --> 38:27.830
我们随便举个例子

38:27.830 --> 38:29.190
以这个路径开头

38:29.190 --> 38:30.470
那么现在呢

38:30.470 --> 38:31.190
我们就交给谁

38:31.190 --> 38:31.910
哪个中间键呢

38:31.910 --> 38:33.910
是不是可以交给这个中间键

38:33.910 --> 38:34.230
对不对

38:34.230 --> 38:35.350
是不是交给这个中间键

38:35.350 --> 38:36.230
咱们他来处理

38:36.230 --> 38:37.350
然后我们这里可以用

38:38.710 --> 38:39.190
rot

38:39.750 --> 38:40.470
下面的是吧

38:41.430 --> 38:43.030
是不是可以这样去

38:43.030 --> 38:44.310
因为require得到的

38:44.310 --> 38:45.590
得到的不就是这个玩意吗

38:45.590 --> 38:47.510
他导出了结果对吧

38:47.510 --> 38:49.190
我们把导出了结果是不是放这

38:49.190 --> 38:51.350
好那么现在是怎么逻辑

38:51.350 --> 38:52.870
当我们以这样的地址

38:52.870 --> 38:53.830
请求开头的

38:53.830 --> 38:54.550
以这样的

38:54.550 --> 38:56.630
请求地址开头的时候

38:56.630 --> 38:59.430
交给这个中间键处理

38:59.430 --> 39:00.710
是不是交给他来处理

39:00.710 --> 39:01.990
他处理的时候

39:01.990 --> 39:03.990
是不是在进一步进行精确匹配

39:03.990 --> 39:05.270
看能不能匹配到

39:05.270 --> 39:05.830
能匹配到

39:05.830 --> 39:06.710
那就进行处理

39:06.710 --> 39:07.830
不能匹配到

39:07.830 --> 39:09.510
继续往后移交

39:10.470 --> 39:11.350
看到了吧

39:11.350 --> 39:12.950
那么现在问大家第一个问题

39:12.950 --> 39:14.070
一个问题一个问题来

39:14.790 --> 39:16.550
我现在如果说

39:17.590 --> 39:18.230
要去

39:19.110 --> 39:20.550
要得到这个东西

39:20.550 --> 39:21.990
就是要运行这个函数

39:21.990 --> 39:23.750
我应该访问什么样的地址

39:23.750 --> 39:25.270
把地址打在评论区里面

39:26.150 --> 39:27.430
我应该访问什么样的地址

39:37.270 --> 39:38.870
API user login

39:38.870 --> 39:39.350
对不对

39:39.350 --> 39:40.710
所以应该匹配这个地址

39:40.710 --> 39:41.270
没问题

39:41.270 --> 39:42.150
没问题

39:42.150 --> 39:43.190
这样的好处在什么呢

39:43.190 --> 39:44.070
好处在于

39:44.070 --> 39:45.830
我们这个基地址是不是可以随时改

39:45.830 --> 39:47.990
这个地方一改是不是合适全改了

39:48.230 --> 39:48.470
对吧

39:48.470 --> 39:49.590
譬如地址就全改了

39:49.590 --> 39:50.310
对不对

39:50.310 --> 39:51.990
这就是针对用户的操作

39:51.990 --> 39:52.870
我们可以全部放在这

39:53.910 --> 39:54.870
明白了意思吧

39:54.870 --> 39:55.030
好

39:55.030 --> 39:55.830
咱们来试一下吧

39:57.110 --> 39:59.110
那我们现在的就请求什么呢

39:59.110 --> 40:00.230
请求login能不能得到

40:00.230 --> 40:00.870
肯定得不到

40:01.590 --> 40:02.950
现在的你看说404

40:02.950 --> 40:03.830
对吧找不到

40:03.830 --> 40:04.230
对吧

40:04.230 --> 40:05.030
我一直往后移交

40:05.030 --> 40:06.310
后移交没有任何处理函数

40:06.310 --> 40:06.950
还就找不到了

40:07.670 --> 40:08.630
那么这里是

40:08.630 --> 40:09.430
这个肯定得不到的

40:09.430 --> 40:10.470
那么应该请求什么地址

40:10.470 --> 40:12.950
应该请求API user

40:13.670 --> 40:14.710
写到login

40:14.710 --> 40:16.070
并且是pose请求

40:16.070 --> 40:17.590
因为我们这里使用的是pose

40:17.670 --> 40:18.790
必须是pose请求

40:18.790 --> 40:20.150
好发送请求

40:20.150 --> 40:20.870
你看这里

40:20.870 --> 40:21.590
是登录

40:21.590 --> 40:21.830
对吧

40:21.830 --> 40:22.790
请求到了

40:22.790 --> 40:23.110
看到没有

40:23.110 --> 40:24.710
我们是不是可以按模块化分开

40:24.710 --> 40:26.790
针对用户的操作单独放一个模块

40:26.790 --> 40:27.830
导出一个路由

40:27.830 --> 40:29.270
然后这边使用的路由即可

40:30.310 --> 40:30.470
好

40:30.470 --> 40:31.430
这边再来

40:31.430 --> 40:32.550
如果说我们要请求注册

40:33.750 --> 40:34.550
reg

40:35.190 --> 40:35.990
发送请求

40:35.990 --> 40:37.430
你看这边是不是注册

40:37.430 --> 40:37.830
对不对

40:37.830 --> 40:38.550
注册出来了

40:39.430 --> 40:40.470
那么现在是被搞定了

40:40.470 --> 40:40.790
对吧

40:40.790 --> 40:41.910
只不过这两个地方

40:41.910 --> 40:42.870
我们还没有写

40:42.870 --> 40:43.750
什么都没有写

40:44.390 --> 40:45.270
那么同样道理呢

40:45.270 --> 40:46.630
如果说我要针对新闻的呢

40:46.710 --> 40:48.150
我又可以单独来写一个模块

40:48.150 --> 40:49.350
比方说新建文件

40:49.350 --> 40:50.630
news.js

40:51.430 --> 40:53.750
针对新闻的请求

40:54.470 --> 40:55.190
针对新闻的请求

40:55.190 --> 40:55.990
我们可以这样写

40:55.990 --> 40:56.710
一样的道理

40:56.710 --> 40:58.550
express

41:00.950 --> 41:01.430
require

41:02.150 --> 41:02.630
express

41:03.510 --> 41:03.670
好

41:03.670 --> 41:05.270
然后再得到一个rotor

41:05.830 --> 41:06.390
express

41:07.190 --> 41:07.590
rotor

41:08.310 --> 41:09.910
最后不要忘记把这个导出

41:13.540 --> 41:13.620
好

41:13.620 --> 41:14.020
这边呢

41:14.020 --> 41:14.900
我就写上

41:14.900 --> 41:15.460
新闻的话

41:15.460 --> 41:16.340
比方我们写一个吧

41:16.340 --> 41:17.060
get请求

41:17.940 --> 41:18.260
写个

41:20.620 --> 41:21.260
reg

41:21.740 --> 41:21.900
啊

41:21.900 --> 41:23.580
就是得分页

41:24.220 --> 41:25.420
这个表示什么意思呢

41:25.420 --> 41:28.380
表示说我要分页得到

41:28.380 --> 41:29.340
新闻数据

41:31.340 --> 41:31.980
好

41:31.980 --> 41:32.540
那么现在呢

41:32.540 --> 41:34.060
我在这边使用

41:34.060 --> 41:34.780
在这里

41:34.780 --> 41:35.500
app use

41:36.220 --> 41:36.620
写放

41:36.620 --> 41:37.580
api news

41:38.540 --> 41:39.180
好require

41:39.740 --> 41:40.460
这里写上

41:40.460 --> 41:42.620
road news

41:42.620 --> 41:42.940
对吧

41:42.940 --> 41:44.540
是不是可以一样的写放

41:44.540 --> 41:44.700
好

41:44.700 --> 41:46.140
那么现在我又请问

41:46.140 --> 41:47.740
如果说我现在要得到

41:47.740 --> 41:48.860
要运行这个函数

41:48.860 --> 41:50.140
应该请求什么地址

41:50.140 --> 41:51.020
当然是可以的请求

41:51.100 --> 41:51.980
一定是get请求

41:52.540 --> 41:53.740
如果说要请求这个函数

41:53.740 --> 41:54.700
应该是什么样的地址

41:57.340 --> 41:58.220
很见谅那说

41:58.220 --> 41:59.500
是不是就是app news

41:59.500 --> 41:59.820
对吧

41:59.820 --> 42:01.260
后面有没有这个写纲都无所谓

42:01.260 --> 42:02.060
对无所谓

42:02.060 --> 42:02.780
那个这个写纲呢

42:02.780 --> 42:03.820
就表示跟路径

42:03.820 --> 42:04.700
有没有这个写纲都无所谓

42:04.700 --> 42:05.420
他都论匹别的

42:05.900 --> 42:06.860
那么就这样子呢

42:06.860 --> 42:07.420
就是得到

42:07.820 --> 42:09.020
就得到这么一个逻辑了

42:09.020 --> 42:09.980
他写写放变成这个

42:09.980 --> 42:10.540
这个样子的

42:10.540 --> 42:11.340
你看我们这个

42:11.340 --> 42:11.980
因这个事

42:11.980 --> 42:13.100
是不是就进行

42:13.100 --> 42:14.140
处理各种连键

42:14.140 --> 42:14.540
对吧

42:14.540 --> 42:15.420
我们的启动函数

42:15.420 --> 42:16.460
启动程序里边

42:16.460 --> 42:17.820
就是导入一个随时

42:17.820 --> 42:18.220
然后呢

42:18.380 --> 42:19.180
监听端可

42:19.180 --> 42:21.340
然后使用各种各样的中间键

42:21.340 --> 42:23.980
那么在针对具体的请求的处理的时候

42:23.980 --> 42:25.980
交给不同的路由去处理

42:25.980 --> 42:27.340
就形成了这么一种模式了

42:28.700 --> 42:29.180
现在呢

42:29.180 --> 42:29.740
我们再回到

42:29.740 --> 42:30.700
我们的课间里面去

42:32.060 --> 42:33.260
我们来认识一个

42:33.260 --> 42:34.780
非常非常重要的东西

42:34.780 --> 42:36.380
叫做服务器的职责

42:39.350 --> 42:40.710
这个小节内容不多

42:40.710 --> 42:41.590
就两张图

42:41.590 --> 42:42.710
如果这一条小节

42:42.710 --> 42:43.750
你理解清楚的话

42:43.750 --> 42:45.910
你就其实已经就非常清晰了

42:45.910 --> 42:47.190
老大里面就非常清晰了

42:48.470 --> 42:49.670
我们在服务器

42:49.670 --> 42:50.710
在不同的场景下

42:50.710 --> 42:52.150
有种不同的职责

42:52.150 --> 42:53.590
它其实在不同的公司

42:53.590 --> 42:54.230
不同的场景

42:54.230 --> 42:56.150
不同的产品里边

42:56.150 --> 42:57.270
非常非常灵活的

42:57.270 --> 42:57.750
而且呢

42:57.750 --> 42:59.430
可能不只一台服务器

42:59.430 --> 43:00.390
可能有很多个服务器

43:00.390 --> 43:01.270
写通操作

43:01.270 --> 43:02.790
但是很多东小型系统里面

43:02.790 --> 43:03.590
一个服务器

43:03.590 --> 43:05.750
往往承担着两个职责

43:06.470 --> 43:08.230
一个是提供静态资源

43:08.870 --> 43:10.790
一个是提供API接口

43:12.230 --> 43:13.990
什么叫提供API接口呢

43:14.950 --> 43:16.230
首先把这个东西解释一下

43:16.950 --> 43:18.390
什么叫提供API接口

43:19.030 --> 43:22.390
就是客户端去请求他的时候呢

43:22.390 --> 43:23.350
他给他的一些

43:23.350 --> 43:24.150
给他的是什么呢

43:24.150 --> 43:25.750
给他的是一些接审数据

43:26.950 --> 43:27.430
以发说

43:28.230 --> 43:28.630
60

43:29.270 --> 43:29.910
比方说这里啊

43:30.550 --> 43:31.910
你请求这个路径的时候

43:32.950 --> 43:33.830
我给力的什么呢

43:33.830 --> 43:35.110
给力的不是页面

43:35.110 --> 43:36.470
也不是一个CSS

43:36.470 --> 43:37.430
也不是GS

43:37.430 --> 43:38.950
我给力的也不是一个图片

43:38.950 --> 43:39.990
我给力的是啥呢

43:39.990 --> 43:41.270
给力的类似于这种东西

43:42.630 --> 43:44.150
深得里边是可以填对象

43:44.150 --> 43:45.590
可以填数组的

43:45.590 --> 43:46.870
比方说给他填一个对象

43:47.830 --> 43:49.510
对象呢

43:49.510 --> 43:51.190
就是比方扣的为0

43:51.190 --> 43:52.550
表示没有错误

43:52.550 --> 43:53.670
message

43:53.670 --> 43:55.270
扣的为0表示没有错误

43:55.270 --> 43:56.390
message表示空

43:56.390 --> 43:57.830
没有错误消息

43:57.830 --> 43:58.630
错误消息为空

43:58.630 --> 43:59.510
当然这些东西呢

43:59.510 --> 44:00.470
这是标准写法

44:00.470 --> 44:02.310
其实你写不写都无所谓

44:02.310 --> 44:03.430
你不写吧

44:03.430 --> 44:04.870
我给你一个新闻总数

44:05.590 --> 44:06.390
10条新闻

44:06.390 --> 44:07.190
100条新闻

44:07.190 --> 44:07.830
1000条新闻

44:08.470 --> 44:08.950
然后呢

44:08.950 --> 44:11.270
当前这一页的新闻数量是多少呢

44:11.270 --> 44:12.950
当前这一页的新闻呢

44:12.950 --> 44:13.590
是一个数组

44:13.590 --> 44:14.710
我把放到数组里边

44:15.510 --> 44:17.270
数组里边第1条新闻

44:17.270 --> 44:18.230
第1条新闻

44:18.230 --> 44:19.030
新闻的标题

44:20.470 --> 44:21.830
新闻的内容

44:22.710 --> 44:23.990
我随便写一下吧

44:23.990 --> 44:24.550
那就够了

44:26.470 --> 44:28.950
有点错了

44:28.950 --> 44:30.070
那么新闻的内容

44:30.790 --> 44:31.670
新闻的标题

44:34.220 --> 44:35.900
我说给他发了一个对象的客户端

44:35.900 --> 44:37.660
能发对象的客户端吗

44:37.660 --> 44:40.300
当以往客户端发一个对象的时候呢

44:40.300 --> 44:42.700
就相当于是发的是一个节省格式

44:43.980 --> 44:45.420
这就是节省格式

44:45.420 --> 44:46.940
相当于是发的一个节省格式

44:47.100 --> 44:47.980
好咱们来试一下

44:47.980 --> 44:49.340
你看有新的我们这样的写的

44:49.340 --> 44:50.140
是不是有响应了

44:50.140 --> 44:51.900
接下来我们在这边来看一下

44:51.900 --> 44:53.500
我用Gate请求去请求谁呢

44:53.500 --> 44:54.700
请求APN News

44:56.540 --> 44:56.940
Send

44:57.660 --> 44:58.300
Gate请求

44:59.340 --> 44:59.900
请求

44:59.900 --> 45:01.740
你看服务器给我发的是不是一个节省对象

45:02.300 --> 45:02.620
对不对

45:03.260 --> 45:03.740
节省对象

45:03.740 --> 45:05.420
我看一下能不能看到原式格式

45:06.300 --> 45:07.100
好像看不到

45:08.860 --> 45:09.740
原式格式在这

45:09.740 --> 45:11.500
这是他原式消息的一个格式

45:11.500 --> 45:12.380
就是一个制服串

45:12.860 --> 45:14.380
他给你的就是一个制服串

45:14.380 --> 45:16.300
然后再用浏览器去试一下呢

45:16.460 --> 45:19.660
927 API News

45:20.140 --> 45:21.900
一回车你看得到的是什么呢

45:21.900 --> 45:22.940
看用检查

45:22.940 --> 45:24.620
用检查看网络通信

45:24.620 --> 45:26.300
浏览器去请求服务器

45:26.300 --> 45:28.140
服务器给我的结果是一个什么呢

45:28.140 --> 45:29.100
Race Bounce

45:29.100 --> 45:30.140
给我的响应结果

45:30.780 --> 45:31.820
你看是不是一个制服串

45:31.820 --> 45:33.180
一个很长很长的制服串

45:33.180 --> 45:33.900
对吧

45:33.900 --> 45:35.580
这就是节省格式的制服串

45:35.580 --> 45:36.780
节省格式就是把

45:36.780 --> 45:38.460
GX的对象书写方式

45:38.460 --> 45:40.140
把他的属性名加上了一个双引号

45:40.140 --> 45:40.860
其他就没啥了

45:42.300 --> 45:44.460
这就是一个节省格式的制服串

45:44.620 --> 45:45.180
原来的意思吧

45:45.900 --> 45:46.300
看呗

45:46.700 --> 45:48.700
这就是服务器给我的响应结果

45:48.700 --> 45:49.180
对吧

45:49.180 --> 45:51.020
所以说我们在express里面是可以广的

45:51.020 --> 45:52.460
他往科普端发对象的

45:52.460 --> 45:55.180
他会自动的把它转换成一个节省格式的制服串

45:55.180 --> 45:55.740
然后呢

45:56.620 --> 45:57.340
发什么科普端

45:57.980 --> 45:58.380
就理解了

46:00.580 --> 46:01.700
这就是直接发对象啊

46:01.700 --> 46:03.140
这不就是直接发对象吗

46:03.140 --> 46:03.620
只不过呢

46:04.580 --> 46:05.540
服务器那边呢

46:05.540 --> 46:06.580
服务器呃

46:06.580 --> 46:07.700
服务器那边呢

46:07.700 --> 46:09.220
是把它转换成节省格式的制服串

46:09.220 --> 46:10.100
给他发过去的

46:10.100 --> 46:11.140
还有那边说为什么

46:12.180 --> 46:13.140
为什么要转换制服串

46:13.140 --> 46:14.020
说不直接发对象呢

46:14.580 --> 46:15.540
为什么呢

46:15.620 --> 46:17.060
因为不同的语言

46:17.860 --> 46:19.540
不同的应用程序

46:20.100 --> 46:20.900
对象是什么

46:20.900 --> 46:22.740
对象就是内存里面的那一堆数据

46:24.580 --> 46:26.260
内存里面的那一堆数据

46:26.260 --> 46:27.140
不同的程序

46:27.140 --> 46:27.860
不同的语言

46:27.860 --> 46:29.380
它的内存数据都是不一样的

46:29.380 --> 46:30.660
它对对象的处理方式

46:30.660 --> 46:31.300
它的结构

46:31.300 --> 46:32.900
内存里面的结构都是不一样的

46:33.540 --> 46:34.340
那你怎么发呢

46:35.060 --> 46:36.740
你又不能假定科普端

46:36.740 --> 46:38.100
一定是用什么语言写的

46:38.100 --> 46:39.380
所以不能直接发对象的

46:39.380 --> 46:41.300
肯定是要用一种标准的格式

46:43.380 --> 46:44.100
那么这里呢

46:44.100 --> 46:45.380
就是给他发对象

46:45.380 --> 46:45.940
那么现在呢

46:45.940 --> 46:47.460
无非就是这些数据呢

46:48.020 --> 46:48.580
不是我们

46:48.580 --> 46:49.860
这肯定不是这个样子

46:49.860 --> 46:50.260
对吧

46:50.260 --> 46:51.620
数据肯定不是这个样子

46:51.620 --> 46:52.580
数据应该是什么样子

46:53.140 --> 46:53.700
还记得吗

46:54.500 --> 46:56.420
我们之前是不是写过数据库啊

46:56.420 --> 46:56.980
Service

46:58.180 --> 46:59.380
这些东西是不是写完了的

47:00.980 --> 47:02.100
这些玩意是不是写完了的

47:02.660 --> 47:03.220
对不对

47:03.220 --> 47:05.700
所以我们只要调用这些函数

47:05.700 --> 47:07.620
就可以拿到我们的数据了

47:07.620 --> 47:08.900
从数据库里边打数据

47:09.620 --> 47:10.420
于是呢

47:10.420 --> 47:11.620
我们在这里呢

47:11.620 --> 47:13.060
是不是就可以用数据库的方式

47:13.940 --> 47:14.500
在导入

47:15.860 --> 47:17.300
是不是把之前的据点连续起来了

47:17.300 --> 47:17.620
叫做

47:20.100 --> 47:20.820
services

47:22.580 --> 47:24.020
services

47:24.020 --> 47:24.820
从来到了呢

47:24.820 --> 47:25.380
就是那个

47:27.140 --> 47:27.780
上个目录

47:29.380 --> 47:30.340
services

47:30.340 --> 47:32.100
从这里边拿到什么呢

47:32.740 --> 47:34.260
那个news service

47:35.220 --> 47:36.180
里边不有一个函数吗

47:36.180 --> 47:37.380
我们之前也做个测试

47:37.380 --> 47:37.700
对不对

47:38.660 --> 47:39.700
getting news

47:39.700 --> 47:40.740
第一个参数

47:40.740 --> 47:41.380
便宜嘛

47:42.020 --> 47:42.980
第几页

47:42.980 --> 47:43.940
比方说第一页

47:44.660 --> 47:45.700
每页多少条

47:45.700 --> 47:46.820
每页10条数据

47:48.180 --> 47:49.140
查询关键制

47:49.140 --> 47:49.860
没有关键制

47:50.580 --> 47:51.700
比方说没有关键制

47:52.500 --> 47:52.660
好

47:52.660 --> 47:54.180
那么这样子是不是可以拿到结果

47:54.180 --> 47:54.900
但是你要注意

47:54.900 --> 47:56.180
这个函数是不是异补的

47:56.180 --> 47:56.900
是不是要等待

47:57.460 --> 47:59.140
反而是标记了这个东西的函数

47:59.140 --> 47:59.940
它一定是异补的

47:59.940 --> 48:00.820
需要等待

48:00.820 --> 48:01.780
那么要等待的话

48:02.260 --> 48:03.060
是不是这个函数

48:03.540 --> 48:04.820
它也在标记为异补的

48:04.820 --> 48:06.100
因为它在它里边

48:06.100 --> 48:07.620
所以说它也在标记为异补的

48:08.260 --> 48:08.740
对不对

48:08.740 --> 48:09.300
这是我们

48:10.100 --> 48:10.660
规则

48:10.660 --> 48:11.620
你不用去管为什么

48:11.620 --> 48:12.420
它就是这样的规则

48:13.140 --> 48:14.180
它也得标记异补的

48:14.740 --> 48:15.140
然后呢

48:15.140 --> 48:16.420
我们这里是不是可以拿到这个结果

48:17.060 --> 48:17.540
result

48:18.660 --> 48:19.060
然后呢

48:19.060 --> 48:19.860
输出这个result

48:19.860 --> 48:20.420
看一下

48:20.420 --> 48:22.100
这是我们之前写过的代码

48:23.220 --> 48:24.740
函数是不是拿到新闻

48:24.740 --> 48:25.860
新闻数据第一页没有

48:25.860 --> 48:26.660
也显示10条

48:27.060 --> 48:28.180
把新闻数据拿到

48:28.180 --> 48:29.060
打印出这个结果

48:29.060 --> 48:29.700
我们来看一下吧

48:31.540 --> 48:31.940
这里

48:32.500 --> 48:33.140
再来刷新

48:33.140 --> 48:33.700
刷新

48:33.700 --> 48:34.900
我们看一下服务器打印的结果

48:37.850 --> 48:39.130
你看是不是有很多新闻

48:39.610 --> 48:40.650
服务器里边不就是

48:40.650 --> 48:41.690
给我一个toto

48:41.690 --> 48:43.050
然后给我一个data

48:43.050 --> 48:43.530
对吧

48:43.530 --> 48:44.410
不就是一个对象吗

48:44.650 --> 48:45.530
我要做的是啥

48:45.530 --> 48:47.370
我要做的不非就是把这个对象

48:48.730 --> 48:49.690
发给客户端

48:50.330 --> 48:50.970
是不是这样子

48:51.530 --> 48:53.370
是把对象发给客户端就完了

48:55.770 --> 48:56.330
能看懂吗

48:56.890 --> 48:57.690
这里我们刷新

48:58.170 --> 48:58.650
你看一下

48:58.650 --> 49:00.170
这里客户端那边是不是可以

49:00.170 --> 49:01.370
这样数据是不是打通了

49:01.690 --> 49:03.610
把客户端这边是不是可以拿到

49:03.610 --> 49:04.250
这个节省数据

49:04.250 --> 49:06.330
这是一个preview

49:06.330 --> 49:08.410
就是把它用更加友好的格式

49:08.410 --> 49:09.290
把它显示出来

49:09.290 --> 49:10.170
实际上它原式格式

49:10.170 --> 49:10.490
就这样子

49:10.490 --> 49:11.210
一个字幕串

49:11.210 --> 49:12.250
很长很长的字幕串

49:12.250 --> 49:12.490
你看

49:13.130 --> 49:14.170
很长很长的字幕串

49:14.890 --> 49:16.410
这样子把美化过后

49:16.410 --> 49:18.730
就变成一个节式中格式的对象

49:18.730 --> 49:20.090
你看data是不是个数据

49:20.090 --> 49:22.570
toto是不是120条新闻

49:22.570 --> 49:24.010
就每一篇新闻

49:24.010 --> 49:24.570
看没

49:24.570 --> 49:25.210
每一篇新闻

49:25.210 --> 49:26.970
是不是数据从服务器到了客户端

49:26.970 --> 49:27.450
对不对

49:27.450 --> 49:29.290
一个概册请求就传过去了

49:29.290 --> 49:30.330
数据就拿过来了

49:30.330 --> 49:30.890
能看懂吗

49:36.600 --> 49:36.920
好

49:36.920 --> 49:37.400
那么这边来

49:37.880 --> 49:38.200
继续

49:40.040 --> 49:41.400
那么这里其实这个东西

49:41.400 --> 49:42.440
就是API

49:42.440 --> 49:43.000
就是API

49:43.000 --> 49:44.680
只是问了我们这里是把它写死的

49:44.680 --> 49:45.080
对不对

49:45.080 --> 49:45.720
还没有写完

49:46.200 --> 49:47.240
这个东西就叫API

49:47.240 --> 49:47.960
我们再往这里看

49:48.520 --> 49:49.640
一个服务器

49:49.640 --> 49:51.880
它除了要提供静态支援服务

49:51.880 --> 49:53.080
什么要静态支援服务

49:53.080 --> 49:54.120
就是我们看这个目录

49:54.120 --> 49:56.120
这个目录是不是直接扔给客户端的

49:56.120 --> 49:57.160
我再问大家一个问题

49:57.160 --> 49:58.600
昨天我也问过同样的问题

49:58.600 --> 49:59.640
一定要处理这个点

49:59.640 --> 50:01.160
这个文件夹里边的GS

50:01.160 --> 50:02.440
是在服务器运行的

50:02.440 --> 50:03.720
还是在浏览器运行的

50:04.440 --> 50:05.320
这里边的GS

50:05.320 --> 50:06.200
是在服务器运行的

50:06.200 --> 50:07.320
还是在浏览器运行的

50:10.150 --> 50:10.870
是不是浏览器

50:10.870 --> 50:11.990
它一定是浏览器

50:11.990 --> 50:13.350
跟服务器一点关系都没有

50:13.910 --> 50:15.030
服务器运行的只有什么

50:15.110 --> 50:15.990
只有这个英那个社

50:16.550 --> 50:17.750
已经到英那个社

50:17.750 --> 50:18.790
导入了其他某块

50:19.670 --> 50:21.830
这个也是一毛钱关系都没有

50:22.150 --> 50:23.830
这个GS对于服务器而言

50:25.190 --> 50:26.950
就是一个普普通通的文件

50:26.950 --> 50:28.550
它把内容读出来扔过去

50:28.550 --> 50:29.670
这就是静态支援

50:30.150 --> 50:32.310
直接把文件内容扔给客户端

50:32.310 --> 50:33.990
这些东西都是在客户端运行的

50:33.990 --> 50:35.430
只不过它挂在服务器上

50:35.430 --> 50:37.830
这就是服务器的第一个功效

50:37.830 --> 50:38.870
静态支援服务

50:39.750 --> 50:41.830
服务器的第二个功能就是API接口服务

50:41.830 --> 50:42.950
这就是获取数据了

50:43.510 --> 50:48.070
这个接口里面往往会跟数据库打交道

50:48.070 --> 50:49.750
你看我们刚才是不是在这里面

50:49.750 --> 50:50.950
跟那个数据库打交道了

50:50.950 --> 50:51.350
在这

50:51.990 --> 50:53.990
我们这就是个接口API服务

50:53.990 --> 50:55.110
API就是我们

50:55.110 --> 50:56.710
我们这里说的API就是

50:56.710 --> 50:58.070
浏览器或者是客户端

50:58.070 --> 50:59.750
去请求我们这个API服务接口

50:59.750 --> 51:01.110
然后服务这个服务接口

51:01.110 --> 51:02.470
就拿从数据库拿数据

51:02.470 --> 51:05.190
拿一些数据把内容传给客户端

51:05.190 --> 51:06.230
这就是这个逻辑

51:06.230 --> 51:07.990
你看浏览器去请求这个接口

51:07.990 --> 51:09.910
然后服务器给它的不是页面

51:09.910 --> 51:11.110
不是图片不是CSS

51:11.190 --> 51:13.030
它就把数据从数据库拿到

51:13.030 --> 51:14.310
然后扔给客户端

51:14.310 --> 51:15.110
扔给页面

51:15.110 --> 51:17.670
页面也不管它是哪来的

51:17.670 --> 51:18.710
直接拥就下来

51:18.710 --> 51:21.270
这就是两个重要的功能

51:22.470 --> 51:24.710
然后这两个重要功能跟我们的

51:24.710 --> 51:26.870
平时浏览页面有什么关系呢

51:26.870 --> 51:28.550
它的关系是下面这样子

51:28.550 --> 51:30.070
下面这样子头一定要看懂

51:30.070 --> 51:31.110
虽然说内容优点

51:31.110 --> 51:32.470
感觉上好像很复杂的样子

51:32.470 --> 51:34.310
其实我给大家讲透了一点都不复杂

51:35.910 --> 51:37.030
它的关系是这样子的

51:37.030 --> 51:38.790
我给大家写一下带

51:39.750 --> 51:40.710
我们在这里呢

51:40.710 --> 51:42.630
把这个优质这个关系把它去掉

51:42.630 --> 51:43.750
把这个文件去掉

51:43.750 --> 51:44.710
删除

51:44.710 --> 51:45.990
因这个事这里

51:45.990 --> 51:47.510
比方说我们在这里呢

51:49.350 --> 51:50.950
把这个东西乱去把它去掉

51:50.950 --> 51:51.510
把它去掉

51:54.550 --> 51:56.150
页面上有一个UL

51:56.790 --> 51:58.790
ULLI元素

51:58.790 --> 51:59.830
就没有什么LI

51:59.830 --> 52:02.550
就UL元素里面有个ID

52:02.550 --> 52:03.350
就UL

52:03.350 --> 52:04.710
就UL就是粒式吧

52:04.710 --> 52:05.590
优质粒式

52:05.590 --> 52:06.310
新闻列表

52:06.310 --> 52:07.110
就一个新闻列表

52:08.070 --> 52:09.990
导入了一个GS

52:09.990 --> 52:11.750
有CSS有GS

52:11.750 --> 52:12.630
导入了一个GS

52:12.630 --> 52:13.830
GS里面是这样子写的

52:14.630 --> 52:15.270
有个函数

52:17.030 --> 52:18.070
一个异部函数

52:18.870 --> 52:20.070
LOAD NEWS

52:20.710 --> 52:21.430
家载新闻

52:22.870 --> 52:24.630
因为家载新闻它是要等待一段时间

52:24.630 --> 52:25.830
所以它是异部的

52:25.830 --> 52:27.510
家载远程

52:29.190 --> 52:29.910
为了它

52:29.910 --> 52:31.510
以后看着看着又晕了

52:31.510 --> 52:32.790
所以说这里给它打个注是

52:33.350 --> 52:34.630
一定要记住

52:35.590 --> 52:41.350
这里的GS运行在浏览器端

52:41.350 --> 52:42.790
它虽然挂在服务器上

52:42.790 --> 52:44.790
但是服务器扔给

52:44.790 --> 52:46.390
把那种扔给客户端过后了

52:46.390 --> 52:47.750
它在浏览器端运行的

52:47.750 --> 52:49.190
就代表全在浏览器端运行的

52:50.470 --> 52:52.230
这里是不是要远程

52:52.230 --> 52:54.310
从服务器拿数据

52:55.030 --> 52:57.350
那么浏览器端如何远程

52:57.350 --> 52:58.870
从服务器拿数据呢

52:58.870 --> 53:00.070
服务器的数据在哪

53:00.070 --> 53:01.510
服务器的数据在哪呢

53:01.510 --> 53:03.590
在这个API接口服务这里

53:03.590 --> 53:04.070
对不对

53:04.310 --> 53:05.430
所以说我要这里要怎么

53:05.430 --> 53:07.430
从远程从服务器拿数据呢

53:07.430 --> 53:10.070
是要通过一个叫做阿迦克斯的技术

53:10.070 --> 53:11.190
那么阿迦克斯的技术呢

53:11.190 --> 53:12.470
说了又话长了

53:12.470 --> 53:13.670
我这里就简单说一下

53:13.670 --> 53:15.270
就是一个函数就搞定了

53:15.270 --> 53:16.070
什么函数呢

53:16.070 --> 53:16.790
废起函数

53:18.390 --> 53:20.070
废起函数就是一个阿迦克斯函数

53:20.070 --> 53:20.630
就搞定了

53:21.670 --> 53:22.630
函数传什么呢

53:22.630 --> 53:23.510
它有很多参数

53:23.510 --> 53:24.870
有很多的邪法

53:24.870 --> 53:25.430
参数呢

53:25.430 --> 53:27.190
就是请求入境

53:27.190 --> 53:28.550
请求地址

53:28.550 --> 53:29.430
请求地址是什么呢

53:29.430 --> 53:32.710
就是API news

53:32.710 --> 53:33.470
不就是这个地址吗

53:33.470 --> 53:33.950
对啊

53:33.950 --> 53:36.030
有没有说为什么前面不写这个东西呢

53:36.030 --> 53:37.950
为什么前面不写这一坨呢

53:38.910 --> 53:39.390
为什么呢

53:42.000 --> 53:42.640
为什么呢

53:42.640 --> 53:45.520
因为这个页面不就是通过前面这一坨访问的吗

53:45.520 --> 53:47.760
你看这个页面是不是通过这个访问的

53:47.760 --> 53:49.280
因此前面可以省略

53:49.280 --> 53:50.000
省略过后呢

53:50.000 --> 53:52.640
它默认就是相同的

53:52.640 --> 53:54.240
相同的主机名

53:54.240 --> 53:55.040
相同的端口

53:55.760 --> 53:57.760
所以说你可以省略

53:57.760 --> 53:58.640
请求这个地址

53:58.640 --> 54:00.080
默认就是什么请求

54:00.080 --> 54:01.600
默认就是get请求

54:01.600 --> 54:03.200
默认get请求

54:04.160 --> 54:05.520
什么请求一个地址

54:05.520 --> 54:06.400
请求这个地址

54:06.400 --> 54:07.680
甚至会要等待它

54:07.680 --> 54:08.320
对吧

54:08.320 --> 54:09.760
等待它过后呢

54:09.760 --> 54:11.200
会拿到一个对象

54:14.910 --> 54:15.630
得到

54:15.630 --> 54:17.710
就是请求

54:17.710 --> 54:20.830
阿加克斯请求服务器

54:22.030 --> 54:23.470
get请求这个地址

54:23.470 --> 54:27.740
得到响应对象

54:29.020 --> 54:31.340
响应对象里面有很多的东西

54:31.340 --> 54:32.940
包括什么响应头

54:32.940 --> 54:33.340
对吧

54:33.340 --> 54:34.540
响应里面不是有头吗

54:34.540 --> 54:34.780
对吧

54:34.780 --> 54:35.660
响应头这些东西

54:35.980 --> 54:36.940
大堆

54:36.940 --> 54:38.700
我们现在只关心响应体

54:39.820 --> 54:40.540
什么叫响应体

54:41.260 --> 54:41.820
就这个玩意

54:42.620 --> 54:44.220
我们只需要这个东西就行了

54:44.220 --> 54:44.700
响应体

54:44.700 --> 54:45.340
是不是一个制补串

54:45.340 --> 54:46.220
一个很长的制补串

54:46.220 --> 54:46.460
对吧

54:47.020 --> 54:48.940
那么响应体怎么办呢

54:48.940 --> 54:49.980
响应体呢

54:49.980 --> 54:51.180
它是需要解析的

54:51.900 --> 54:53.260
有不同的解析方式

54:53.260 --> 54:55.020
因为响应体也有很多种格式

54:55.020 --> 54:56.460
它有不同的解析方式

54:56.460 --> 54:58.220
比如说把它解析成一个存问本

54:58.220 --> 54:59.500
那就是一个制补串

54:59.500 --> 55:00.860
然后把它解析成一个对象

55:00.860 --> 55:01.820
那就要我们节省

55:01.820 --> 55:02.380
我们这里呢

55:02.380 --> 55:03.740
就是使用RISP

55:03.740 --> 55:05.020
我们用的最多的就是

55:05.100 --> 55:05.660
解析

55:06.540 --> 55:07.260
这什么意思

55:08.300 --> 55:09.100
等待

55:10.300 --> 55:10.940
写到前面

55:12.060 --> 55:12.540
等待

55:13.420 --> 55:14.780
响应体

55:14.780 --> 55:16.220
传输完成

55:16.220 --> 55:17.580
因为响应体的内容呢

55:17.580 --> 55:18.220
可能有很多

55:18.220 --> 55:19.420
比方说你要下载一个文件

55:19.420 --> 55:20.940
文件的内容也在响应体里边

55:20.940 --> 55:22.060
比方说这个文件一个G

55:22.060 --> 55:23.260
所以要下载很久

55:23.260 --> 55:23.740
对不对

55:23.740 --> 55:25.180
所以要等待响应体

55:25.180 --> 55:25.900
传输完成

55:26.940 --> 55:29.980
然后将其解析

55:31.420 --> 55:33.180
当做接胜格式

55:33.740 --> 55:34.700
进行解析

55:35.740 --> 55:39.100
得到解析后的一个对象

55:42.480 --> 55:43.600
那么这里的位置

55:44.240 --> 55:45.280
得到解析后的一个对象

55:45.280 --> 55:45.920
我们用RESAUCE

55:47.600 --> 55:48.000
放在这

55:48.720 --> 55:48.960
好

55:48.960 --> 55:50.560
那么现在咱们打印出这个RESAUCE

55:51.920 --> 55:53.360
我先不问别的

55:53.360 --> 55:55.600
有些人可能不是很好理解

55:55.600 --> 55:57.440
那么这里先调问这个函数再说

55:57.440 --> 55:58.400
我不先不问别的

55:58.400 --> 55:59.760
我就想问一下

55:59.760 --> 56:01.520
这个打印是打印在哪

56:02.080 --> 56:04.480
选项A打印在这

56:04.480 --> 56:06.640
选项B打印在浏览器

56:11.310 --> 56:11.950
打印在哪呢

56:12.990 --> 56:14.110
打印在浏览器的

56:14.110 --> 56:14.350
对不对

56:14.350 --> 56:16.190
因为这个单一是运行在浏览器的

56:16.190 --> 56:18.350
所以一定是打印在浏览器的

56:18.350 --> 56:18.670
好

56:18.670 --> 56:19.790
那么现在我们再看一下

56:19.790 --> 56:20.510
看一下整个过程

56:24.320 --> 56:25.520
你看是不是打印在浏览器的

56:26.160 --> 56:28.160
浏览器是不是从服务器拿到数据了

56:28.640 --> 56:28.960
对吧

56:28.960 --> 56:30.160
这些新闻数据是不是拿到了

56:30.160 --> 56:31.920
你看不就是个对象吗

56:31.920 --> 56:32.800
TOTAL一个属性

56:32.800 --> 56:33.680
Data是一个属性

56:33.680 --> 56:35.040
那么后边拿到对象了

56:35.040 --> 56:35.920
你要做什么操作

56:35.920 --> 56:36.960
你随便怎么做了

56:36.960 --> 56:38.000
比方说你要循环

56:38.000 --> 56:39.920
循环添加LI元数

56:39.920 --> 56:41.600
你比方说马上快速写一个

56:41.600 --> 56:42.560
快速写一个循环

56:43.440 --> 56:44.400
i等于0

56:44.400 --> 56:45.120
i小于

56:47.120 --> 56:47.760
i小于什么呢

56:47.760 --> 56:48.800
这里看一下

56:48.800 --> 56:54.740
i小于data results

56:54.740 --> 56:56.420
data是点links

56:56.420 --> 56:56.740
对吧

56:56.740 --> 56:58.260
小于这个数据的长度

56:58.260 --> 56:59.300
i加加

56:59.300 --> 57:01.380
然后每循环一次创建一个

57:01.380 --> 57:02.340
创建一个什么呢

57:03.300 --> 57:03.700
LI

57:04.500 --> 57:05.380
创建一个LI

57:06.260 --> 57:09.220
然后把这个LI的InnerTex

57:09.220 --> 57:11.060
内容设置为results

57:11.060 --> 57:12.580
点data是数据里面

57:12.660 --> 57:14.340
这就是最基础的东西了

57:14.340 --> 57:16.740
数据里面的什么开拓吧

57:16.740 --> 57:17.300
表体

57:17.300 --> 57:18.340
新闻表体

57:18.340 --> 57:20.100
设置为LI的内文本

57:20.100 --> 57:21.700
然后把这个LI加到哪去

57:21.700 --> 57:23.620
加到这个uil news列室里面去

57:23.620 --> 57:24.180
对吧

57:24.180 --> 57:24.980
加到这里面去

57:24.980 --> 57:26.980
Append child

57:26.980 --> 57:27.940
把LI加进去

57:29.140 --> 57:29.620
就完了嘛

57:29.620 --> 57:30.020
都好

57:30.020 --> 57:30.900
你都拿到对象了

57:30.900 --> 57:32.260
后边的东西他就不管你了

57:32.260 --> 57:33.860
你就i怎么玩怎么玩了

57:33.860 --> 57:35.620
就跟普通的介石对象是一样的了

57:36.980 --> 57:37.700
刷新

57:37.700 --> 57:39.060
你看不就出来了吗

57:39.060 --> 57:39.940
新闻列表

57:39.940 --> 57:41.220
是不是从服务器拿到数据

57:41.220 --> 57:42.020
对不对

57:42.900 --> 57:44.340
那么整个过程是什么样子的

57:44.340 --> 57:44.580
好

57:44.580 --> 57:45.620
我们来关注他整个过程

57:46.340 --> 57:46.900
看这个图

57:46.900 --> 57:47.700
现在我们来看这个图

57:48.420 --> 57:49.380
第一步

57:49.380 --> 57:50.660
输入uil地址

57:51.460 --> 57:52.820
或者是点击的超链接

57:52.820 --> 57:54.580
总之里发生了一个请求到服务器

57:55.380 --> 57:56.340
就像这个地址

57:56.900 --> 57:58.100
发生了一个请求到服务器

57:58.100 --> 57:58.900
一回车

57:58.900 --> 58:00.020
我们瞬间就可以看到结果了

58:00.020 --> 58:01.540
但是中间发生了很多的事情

58:02.580 --> 58:04.180
那么输了个地址过后

58:04.180 --> 58:05.620
是会发生到服务器

58:05.620 --> 58:06.740
那么这个是干嘛的

58:06.740 --> 58:08.820
是不是命中了服务器的静态资源

58:09.700 --> 58:10.020
对吧

58:10.020 --> 58:11.300
因为我们这个代码怎么写的

58:12.740 --> 58:13.780
服务器的代码怎么写的

58:13.780 --> 58:16.020
是不是先看一下是不是静态资源

58:16.500 --> 58:17.540
如果说静态资源的话

58:17.540 --> 58:18.580
就直接扔给你的

58:18.580 --> 58:20.180
所以他首先看到服务器看

58:20.180 --> 58:21.540
哦原来你要访问静态资源

58:22.340 --> 58:24.180
服务器给他什么

58:24.180 --> 58:25.620
给他这个音那个时候的页面

58:25.620 --> 58:26.020
对吧

58:26.020 --> 58:27.940
把这个文件内容是不是扔给客户端了

58:28.980 --> 58:30.340
是不是扔给客户端了

58:30.340 --> 58:31.060
好那么现在呢

58:31.060 --> 58:32.500
我们来看这个请求过程

58:32.500 --> 58:32.980
在这边

58:32.980 --> 58:33.700
类似我可以在这里

58:33.700 --> 58:34.820
也可以看得很清楚

58:34.820 --> 58:35.860
首先我们请求的是什么

58:35.860 --> 58:36.740
localhost

58:36.740 --> 58:37.780
这是不是请求这个地址吗

58:38.740 --> 58:39.860
然后把这个东西

58:39.860 --> 58:40.740
拿到的服务器的结果

58:40.740 --> 58:41.700
是不是就这个玩意儿

58:42.420 --> 58:43.380
好接下来干嘛呢

58:43.380 --> 58:44.980
接下来浏览器是不是开始渲染

58:44.980 --> 58:45.220
对吧

58:45.220 --> 58:47.060
看人给他的给予静态页面

58:47.940 --> 58:48.900
给的浏览器了

58:48.900 --> 58:50.420
浏览器说拿到这个东西过后

58:50.420 --> 58:51.220
就开始渲染了

58:51.220 --> 58:51.780
对不对

58:51.780 --> 58:52.740
在渲染的过程中

58:52.740 --> 58:54.660
是不是要去加载一些别的资源

58:54.660 --> 58:56.100
加载CSS

58:56.100 --> 58:56.740
加载什么

58:57.300 --> 58:57.780
GSS

58:57.780 --> 58:58.020
对吧

58:58.020 --> 58:59.700
所以说他又有可能会发出

59:00.900 --> 59:01.700
后续的请求

59:01.700 --> 59:02.580
那就不是一个了

59:02.580 --> 59:03.620
有可能有多个请求

59:04.100 --> 59:05.460
加载页面的相关资源

59:05.460 --> 59:06.340
比方说有什么

59:06.340 --> 59:07.380
CSS啊

59:07.380 --> 59:08.420
文件啊

59:08.420 --> 59:09.300
GS啊对吧

59:09.300 --> 59:10.820
是不是又扔给服务器的

59:11.780 --> 59:13.620
你看我这里是不是扔了

59:13.620 --> 59:14.420
CSS

59:14.420 --> 59:15.060
GS

59:15.060 --> 59:15.460
对吧

59:15.460 --> 59:16.980
是不是这两个请求又扔给服务器了

59:17.700 --> 59:18.420
好服务器呢

59:18.420 --> 59:19.460
把这个请求拿到过后呢

59:19.460 --> 59:20.980
又会给予相应的资源

59:20.980 --> 59:23.140
这些都是属于静态资源

59:23.140 --> 59:24.500
那么服务器给他什么呢

59:24.500 --> 59:26.500
给他把这个文件的内容给他了

59:27.460 --> 59:29.060
服务器都不知道这个里面是啥

59:29.060 --> 59:29.780
他看的不看

59:29.780 --> 59:31.140
直接把文件内容给他了

59:31.140 --> 59:32.820
然后又把这个文件内容给他了

59:33.620 --> 59:35.380
是不是这两个东西说完了

59:35.380 --> 59:36.020
那么接下来呢

59:36.020 --> 59:37.540
又看又看这个逻辑

59:37.540 --> 59:39.780
接下来浏览器是不是要继续来渲染页面

59:39.780 --> 59:40.100
对吧

59:40.260 --> 59:42.260
CSS有样式的开始渲染

59:42.260 --> 59:43.220
然后GS呢

59:43.220 --> 59:44.500
是不是有代码要执行

59:44.500 --> 59:47.060
那么浏览器开始执行这里的代码

59:47.060 --> 59:48.180
是不是开始执行

59:48.180 --> 59:49.380
在执行的过程中

59:49.380 --> 59:51.540
GS代码是不是有可能会发送阿迦克兹请求

59:52.660 --> 59:54.020
GS中包含了阿迦克兹请求

59:54.020 --> 59:55.140
是不是又有个请求发过去了

59:55.140 --> 59:56.180
你看是这里

59:56.180 --> 59:57.220
是不是请求发过去了

59:57.220 --> 59:59.300
你看那个请求为什么可以省略前面的

59:59.300 --> 01:00:01.140
因为这个页面的路径

01:00:01.620 --> 01:00:02.340
是不是可以省略的

01:00:02.340 --> 01:00:04.820
跟那个API的路径是不是一样的

01:00:04.820 --> 01:00:06.340
就是前面的这个

01:00:06.340 --> 01:00:08.020
主经理端口号是不是一样的

01:00:08.020 --> 01:00:09.380
那么就可以省略

01:00:09.540 --> 01:00:10.420
所以没有必要写的

01:00:10.420 --> 01:00:11.220
跟页面是一样的

01:00:11.220 --> 01:00:12.660
都在同一台服务器上

01:00:12.660 --> 01:00:13.540
所以说呢

01:00:13.540 --> 01:00:15.700
我这里呢就直接请求到怎么API

01:00:15.700 --> 01:00:16.980
这里发送了阿迦克兹请求

01:00:16.980 --> 01:00:17.540
你看在这

01:00:19.060 --> 01:00:21.380
是不是发送了阿迦克兹请求到这儿了

01:00:21.380 --> 01:00:21.700
对不对

01:00:21.700 --> 01:00:22.500
这是GS

01:00:22.500 --> 01:00:24.900
运行的GS的过程中发出了请求

01:00:24.900 --> 01:00:26.180
好请求到了服务器

01:00:26.180 --> 01:00:26.900
然后服务器呢

01:00:26.900 --> 01:00:28.580
是不是运动了接口了

01:00:28.580 --> 01:00:29.620
他就不是静态资源了

01:00:29.620 --> 01:00:30.020
对吧

01:00:30.020 --> 01:00:31.380
服务器静态资源匹配不到了

01:00:31.380 --> 01:00:32.820
所以说他就往后移交

01:00:32.820 --> 01:00:33.940
那么到了这儿

01:00:33.940 --> 01:00:35.700
6是不是就运行到这个

01:00:35.700 --> 01:00:37.700
他就把那个新闻数据给我了

01:00:37.700 --> 01:00:38.500
你看啊

01:00:38.660 --> 01:00:41.140
他就把服务器就把新闻数据

01:00:41.140 --> 01:00:42.580
用接胜格式的新闻数据

01:00:42.580 --> 01:00:43.700
就给了浏览器了

01:00:43.700 --> 01:00:45.140
而浏览器这边是不是获取到了

01:00:45.140 --> 01:00:45.700
新闻数据

01:00:46.740 --> 01:00:47.700
是拿到的新闻数据

01:00:47.700 --> 01:00:49.060
然后呢就做后续处理

01:00:49.060 --> 01:00:50.020
这就是他的整个过程

01:00:51.140 --> 01:00:52.340
这样子讲应该能理解了吧

01:00:53.700 --> 01:00:55.300
能理解的QQE呢

01:00:57.970 --> 01:00:58.850
刚才的几分钟

01:00:59.650 --> 01:01:01.410
我讲了他们的整体的运行过程

01:01:01.410 --> 01:01:01.970
下来

01:01:01.970 --> 01:01:03.010
如果说觉得模糊的话

01:01:03.010 --> 01:01:04.770
下来多可以看几遍

01:01:04.770 --> 01:01:05.730
尽量的在头脑里面

01:01:05.730 --> 01:01:07.330
多去反复的去想一下

01:01:07.330 --> 01:01:08.290
这个过程啊

01:01:08.290 --> 01:01:10.130
浏览器跟服务器是怎么交互的

01:01:10.130 --> 01:01:11.810
你对这个过程理解的越深刻

01:01:11.810 --> 01:01:13.330
你处理的一些特别

01:01:14.050 --> 01:01:15.010
雕像的问题的时候呢

01:01:15.010 --> 01:01:16.290
就非常得心因手了

01:01:17.170 --> 01:01:19.090
好那么这就是我们这里

01:01:19.090 --> 01:01:20.290
今天的主要内容

01:01:20.290 --> 01:01:21.010
接下来是练习

01:01:24.580 --> 01:01:25.060
第一题

01:01:25.940 --> 01:01:28.020
用express搭建一个静态支援服务器

01:01:28.020 --> 01:01:28.740
赢做完了

01:01:28.740 --> 01:01:29.940
我赢做完了

01:01:29.940 --> 01:01:30.740
第一题不用做了

01:01:31.300 --> 01:01:32.100
我这里已经做完了

01:01:32.100 --> 01:01:32.580
就一句话

01:01:33.140 --> 01:01:33.380
对吧

01:01:33.940 --> 01:01:34.740
第二题

01:01:34.740 --> 01:01:36.820
用express开发API接口

01:01:36.820 --> 01:01:37.540
规则如下

01:01:38.500 --> 01:01:39.700
针对用户的操作

01:01:39.700 --> 01:01:40.020
登录

01:01:40.660 --> 01:01:41.300
登录的地址呢

01:01:41.300 --> 01:01:42.180
就是poser请求

01:01:42.420 --> 01:01:43.540
我其实我都写好了

01:01:43.540 --> 01:01:45.220
我无非就是把这两个完成

01:01:46.020 --> 01:01:46.900
把这两个完成

01:01:46.900 --> 01:01:47.780
好登录怎么做

01:01:47.780 --> 01:01:48.580
我们把它写完

01:01:49.380 --> 01:01:50.500
登录怎么做呢

01:01:50.500 --> 01:01:51.540
poser请求是不是

01:01:51.540 --> 01:01:52.820
他的登录账号

01:01:52.820 --> 01:01:54.740
登录密码是在消息体里面

01:01:54.740 --> 01:01:55.300
消息体里面

01:01:55.300 --> 01:01:57.300
我们是不是有前面中间间解析过的

01:01:57.300 --> 01:01:58.820
我直接从body里面获取

01:01:58.820 --> 01:01:59.140
对吧

01:02:00.260 --> 01:02:00.820
body里面

01:02:00.820 --> 01:02:02.820
是不是可以获取到登录账号

01:02:02.820 --> 01:02:03.940
login id

01:02:03.940 --> 01:02:04.820
还获取到什么呢

01:02:04.820 --> 01:02:05.620
登录的密码

01:02:07.060 --> 01:02:08.020
login password的

01:02:08.020 --> 01:02:08.820
对吧

01:02:08.820 --> 01:02:09.460
那么接下来

01:02:09.460 --> 01:02:10.900
把账号密码获取到了过后

01:02:11.460 --> 01:02:13.700
就是刚才我们写过了对不对

01:02:13.700 --> 01:02:14.660
API user

01:02:16.260 --> 01:02:16.660
login

01:02:17.460 --> 01:02:18.020
你看一下吧

01:02:18.020 --> 01:02:18.580
我们在这里

01:02:18.580 --> 01:02:19.940
我们在poserman里面测试一下

01:02:20.580 --> 01:02:21.140
测试一下

01:02:22.340 --> 01:02:26.100
这边我们写上login id abc 123

01:02:26.100 --> 01:02:26.500
发过去

01:02:28.100 --> 01:02:30.180
你看这边就应该能够获取

01:02:30.180 --> 01:02:31.140
就通过这个获取的

01:02:32.420 --> 01:02:33.060
我们打印象

01:02:36.830 --> 01:02:37.230
发动一下

01:02:37.790 --> 01:02:38.350
发动一次

01:02:38.830 --> 01:02:39.870
你看是不是能够获取

01:02:41.230 --> 01:02:42.030
是不是能够获取

01:02:42.190 --> 01:02:42.990
好能够获取过后

01:02:42.990 --> 01:02:45.230
我们现在要返回它一个结果

01:02:45.230 --> 01:02:46.190
要返回它一个结果

01:02:46.190 --> 01:02:47.390
到底有没有登录成功啊

01:02:47.390 --> 01:02:48.430
登录成功的用户是啥呀

01:02:48.430 --> 01:02:48.670
对吧

01:02:48.670 --> 01:02:50.030
这些信息都要返回给它

01:02:50.030 --> 01:02:50.830
那么我们这里呢

01:02:50.830 --> 01:02:52.270
我们之前是不是已经写过了

01:02:52.270 --> 01:02:53.070
就service里面

01:02:53.070 --> 01:02:54.830
是不是有个优点service里面有个login

01:02:54.830 --> 01:02:55.150
对吧

01:02:55.150 --> 01:02:56.270
你给我账号密码

01:02:56.270 --> 01:02:58.350
是不是我就给你一个对象

01:02:58.350 --> 01:02:59.070
要么就是now

01:02:59.070 --> 01:02:59.550
要么就是

01:03:00.030 --> 01:03:00.990
成功就是这个对象

01:03:01.950 --> 01:03:03.310
所以说我这里呢就很简单了

01:03:03.310 --> 01:03:05.070
我就我就掉那个方法就完事了

01:03:05.790 --> 01:03:06.190
来吧

01:03:06.190 --> 01:03:07.230
你掉一下这个方法

01:03:08.990 --> 01:03:09.710
services

01:03:12.450 --> 01:03:13.330
services

01:03:14.530 --> 01:03:15.570
就是这里练习到的

01:03:15.570 --> 01:03:16.290
无非就是巩固

01:03:16.290 --> 01:03:17.010
我们之前所学

01:03:18.210 --> 01:03:18.850
services

01:03:22.560 --> 01:03:24.640
services里边有个user service里面

01:03:24.640 --> 01:03:25.840
login登录

01:03:25.840 --> 01:03:26.400
账号呢

01:03:26.400 --> 01:03:28.800
就是body里边的login id

01:03:28.800 --> 01:03:29.280
密码呢

01:03:29.280 --> 01:03:31.120
就是body里边的login password

01:03:31.120 --> 01:03:31.520
对吧

01:03:31.520 --> 01:03:32.480
要给我传过来

01:03:32.480 --> 01:03:33.040
那么当然呢

01:03:33.040 --> 01:03:33.840
我这里要等待

01:03:33.840 --> 01:03:34.720
自然而然

01:03:34.720 --> 01:03:35.200
这个函数呢

01:03:35.200 --> 01:03:35.680
是一步的

01:03:36.240 --> 01:03:37.200
啊这里要等待他

01:03:37.200 --> 01:03:37.600
位置

01:03:43.380 --> 01:03:43.940
等待他

01:03:43.940 --> 01:03:45.060
然后他会给我一个结果

01:03:45.060 --> 01:03:45.380
对不对

01:03:45.380 --> 01:03:46.580
results给我一个结果

01:03:46.580 --> 01:03:47.380
我什么都不用做

01:03:47.380 --> 01:03:48.500
我就把这个results结果

01:03:48.580 --> 01:03:49.780
人给你完事了

01:03:49.780 --> 01:03:50.340
send

01:03:50.340 --> 01:03:51.060
results

01:03:51.060 --> 01:03:51.860
人给你完事了

01:03:52.980 --> 01:03:53.220
好

01:03:53.220 --> 01:03:53.460
咱们

01:03:54.340 --> 01:03:55.140
看一下吧

01:03:55.140 --> 01:03:55.620
啊看一下

01:03:56.500 --> 01:03:56.740
好

01:03:56.740 --> 01:03:57.300
那么这边来

01:03:58.660 --> 01:03:59.220
这边呢

01:03:59.220 --> 01:04:00.740
我们在postman里面去测试一下

01:04:01.300 --> 01:04:01.620
send

01:04:02.260 --> 01:04:03.220
你看这里啥都没给我

01:04:03.220 --> 01:04:03.700
啥都没给我

01:04:03.700 --> 01:04:04.660
是不是登录失败了

01:04:04.660 --> 01:04:05.060
对吧

01:04:05.060 --> 01:04:06.260
服务器不不说话了

01:04:06.260 --> 01:04:07.700
那就那就登录失败了嘛

01:04:07.700 --> 01:04:09.060
那么我们看一下登录成功的

01:04:09.060 --> 01:04:10.340
我记得我当时的帐号密码

01:04:10.340 --> 01:04:11.300
数据库里边的帐号密码

01:04:11.300 --> 01:04:12.660
好像全都是123456

01:04:13.300 --> 01:04:14.020
1

01:04:15.380 --> 01:04:16.420
123456

01:04:17.460 --> 01:04:18.260
是不是登录成功了

01:04:18.340 --> 01:04:19.460
他给了我一个对象

01:04:19.460 --> 01:04:19.780
对不对

01:04:19.780 --> 01:04:20.580
是不是登录成功了

01:04:20.580 --> 01:04:20.820
对吧

01:04:20.820 --> 01:04:21.780
登录成功他就给我对象

01:04:21.780 --> 01:04:22.420
登录失败

01:04:23.620 --> 01:04:24.660
登录失败

01:04:24.660 --> 01:04:26.260
他就给我一个啥都不给我

01:04:26.260 --> 01:04:26.580
对吧

01:04:26.580 --> 01:04:27.460
啥都不给我

01:04:27.460 --> 01:04:27.700
好

01:04:27.700 --> 01:04:28.260
这就是登录

01:04:28.260 --> 01:04:29.060
是不是写完了

01:04:29.060 --> 01:04:30.100
注册呢也是一样

01:04:30.100 --> 01:04:31.140
那么这里边是不是有注册

01:04:31.140 --> 01:04:32.260
我就直接给他复制过来了

01:04:33.700 --> 01:04:35.300
注册呢这里是有注册

01:04:35.300 --> 01:04:36.420
就这里代码很简单

01:04:37.220 --> 01:04:38.740
delrig注册

01:04:38.740 --> 01:04:40.820
这里边是不是要填一个用户对象

01:04:40.820 --> 01:04:41.460
用户对象在哪

01:04:41.460 --> 01:04:42.420
是不是就在保底里边

01:04:43.540 --> 01:04:43.860
对不对

01:04:43.860 --> 01:04:44.820
是不是就在保底里边

01:04:44.980 --> 01:04:48.980
给我一个就是给我一个用户对象

01:04:48.980 --> 01:04:50.340
那么用户对象就在保底里边

01:04:50.340 --> 01:04:51.220
但是你要注意一点

01:04:51.220 --> 01:04:53.060
我这里有个提示

01:04:53.060 --> 01:04:54.340
就是新注册的用户呢

01:04:54.340 --> 01:04:55.540
必定是普通用户

01:04:56.020 --> 01:04:57.620
他必定是一个普通用户

01:04:57.620 --> 01:04:58.660
那么你这个对象里边

01:04:59.300 --> 01:05:03.060
我要把用户这里有一个属性

01:05:03.060 --> 01:05:03.860
还记得吗

01:05:03.860 --> 01:05:05.060
用户这里一个属性叫做肉

01:05:05.860 --> 01:05:06.420
对吧

01:05:06.420 --> 01:05:07.300
他的身份

01:05:07.300 --> 01:05:08.580
我们把它设置为普通用户

01:05:09.620 --> 01:05:10.740
直接设置为普通用户

01:05:12.180 --> 01:05:13.220
就是你不管你是啥

01:05:13.220 --> 01:05:14.580
我可以把它设置为普通用户

01:05:15.220 --> 01:05:16.900
保底不就是他传过来的对象吗

01:05:16.900 --> 01:05:18.100
那么我们来试一下

01:05:18.100 --> 01:05:18.980
我们这里新开一个

01:05:22.500 --> 01:05:24.340
这里是Pose请求注册

01:05:24.340 --> 01:05:24.820
注册呢

01:05:24.820 --> 01:05:26.980
我们这里用拿动格式呢

01:05:28.020 --> 01:05:28.900
用这种格式吧

01:05:28.900 --> 01:05:30.340
用节省格式

01:05:31.060 --> 01:05:31.380
保底

01:05:31.940 --> 01:05:32.420
肉

01:05:32.420 --> 01:05:33.300
把这里选择节省

01:05:34.020 --> 01:05:34.180
好

01:05:34.180 --> 01:05:34.660
节省格式

01:05:36.180 --> 01:05:37.380
用户的西名

01:05:38.900 --> 01:05:39.380
莫莉卡

01:05:40.740 --> 01:05:43.460
用户的年龄17岁

01:05:44.900 --> 01:05:46.260
用户的LoginID

01:05:47.060 --> 01:05:47.860
登录账号

01:05:50.660 --> 01:05:51.060
MM

01:05:52.180 --> 01:05:53.300
用户的登录密码

01:05:54.580 --> 01:05:55.380
123123

01:05:56.180 --> 01:05:56.660
然后呢

01:05:56.660 --> 01:05:58.500
用户的还有啥呀

01:05:59.060 --> 01:05:59.940
用户里边还有啥呀

01:06:01.380 --> 01:06:03.540
年龄你好像没啥了对吧

01:06:03.540 --> 01:06:04.580
那么肉不用填

01:06:04.580 --> 01:06:05.220
肉不用填

01:06:05.220 --> 01:06:06.580
因为服务器会帮你写

01:06:06.580 --> 01:06:08.420
好那么我们把这个消息发送到服务器

01:06:11.150 --> 01:06:12.030
发送到服务器

01:06:12.030 --> 01:06:12.590
哎等一下

01:06:14.350 --> 01:06:14.990
我们看这边

01:06:14.990 --> 01:06:15.950
这边还没保存啊

01:06:16.910 --> 01:06:17.550
我们这里呢

01:06:18.110 --> 01:06:19.950
输出啊

01:06:21.470 --> 01:06:22.350
好发送到服务器

01:06:24.640 --> 01:06:25.760
啊这服务器爆错了

01:06:25.760 --> 01:06:25.920
啊

01:06:26.560 --> 01:06:27.440
爆出一个人是在这

01:06:30.420 --> 01:06:31.060
啊再来啊

01:06:32.260 --> 01:06:32.980
发送到服务器

01:06:34.420 --> 01:06:35.380
啊这边又爆错了

01:06:35.380 --> 01:06:35.940
他说什么

01:06:36.420 --> 01:06:37.540
user writing to field

01:06:37.540 --> 01:06:38.260
login id

01:06:39.140 --> 01:06:41.140
啊他说账号太短了啊

01:06:41.140 --> 01:06:42.260
我们之前有验证的

01:06:42.260 --> 01:06:43.300
他账号太短了

01:06:43.860 --> 01:06:44.660
那么这边呢

01:06:44.660 --> 01:06:46.980
我们给他账号给他写长一点吧

01:06:48.900 --> 01:06:49.780
啊发送

01:06:50.740 --> 01:06:52.500
好那看服务器是注册成功了

01:06:52.660 --> 01:06:53.540
注册了一个普通用户

01:06:53.540 --> 01:06:55.060
然后看一下服务器的输出

01:06:55.060 --> 01:06:56.500
服务器里面是不是得到一个对象

01:06:56.500 --> 01:06:58.900
对象里面是不是唯独缺了一个弱误属性

01:06:58.900 --> 01:07:00.820
我们是不是把这个弱误属性给它补上了

01:07:01.460 --> 01:07:02.100
总之那里补

01:07:02.100 --> 01:07:03.300
我不相信你填的

01:07:03.300 --> 01:07:06.100
我只相信我这边给他默证的普通用户

01:07:06.100 --> 01:07:06.980
只能是普通用户

01:07:07.460 --> 01:07:08.500
好你看变成这个样子

01:07:09.140 --> 01:07:12.260
那么这边他告诉客户客户客户端的信息里边呢

01:07:12.260 --> 01:07:14.180
他是不是就是表示成功了

01:07:14.180 --> 01:07:15.060
对吧注册成功了

01:07:15.060 --> 01:07:16.180
他给了他一个对象

01:07:17.140 --> 01:07:19.860
好这就是关于这个注册是不是写完了

01:07:20.420 --> 01:07:21.700
好接着再来看啊

01:07:21.780 --> 01:07:23.060
接下来呢就是

01:07:23.380 --> 01:07:23.940
新闻

01:07:25.380 --> 01:07:26.020
新闻这里

01:07:26.020 --> 01:07:27.300
新闻这里我们刚才还没写完

01:07:27.300 --> 01:07:27.860
因为这里呢

01:07:28.740 --> 01:07:30.900
椰马和椰容量是写死的

01:07:30.900 --> 01:07:32.100
这个肯定是不好的

01:07:32.100 --> 01:07:34.020
椰马和椰容量肯定不能写死

01:07:34.020 --> 01:07:35.060
那么该怎么来写呢

01:07:35.060 --> 01:07:36.180
椰马和椰容量

01:07:36.180 --> 01:07:37.060
那怎么来传呢

01:07:37.060 --> 01:07:38.100
这是个戒指琴球

01:07:38.100 --> 01:07:38.980
我们又来想呗

01:07:40.180 --> 01:07:40.820
刚才我们在这

01:07:42.420 --> 01:07:43.060
API

01:07:43.860 --> 01:07:44.980
一六十

01:07:44.980 --> 01:07:46.100
所以得到一种总是

01:07:46.100 --> 01:07:47.940
始终是第一页的对吧

01:07:47.940 --> 01:07:50.340
那么现在我们怎么样告诉它是第二页呢

01:07:50.340 --> 01:07:51.140
就是很简单

01:07:51.220 --> 01:07:52.740
我们可以在戒指琴球里边

01:07:52.740 --> 01:07:54.260
往地址栏里边加参数

01:07:54.980 --> 01:07:55.860
配几为一

01:07:56.900 --> 01:07:58.500
灵面车为二十

01:07:59.060 --> 01:08:00.260
那么我想问一下

01:08:00.260 --> 01:08:04.660
现在我一回车得到了新闻数量是二十还是十

01:08:10.140 --> 01:08:10.860
二十还是十

01:08:14.380 --> 01:08:15.580
又想当然啊

01:08:17.260 --> 01:08:19.100
取决于得到的新闻数量

01:08:19.100 --> 01:08:20.620
到底是十条还是二十条

01:08:20.620 --> 01:08:22.380
是取决于这里调用的函数

01:08:23.260 --> 01:08:24.860
这里的函数使用的是十

01:08:24.860 --> 01:08:25.980
那就一定是十

01:08:26.540 --> 01:08:27.980
跟这里没有一毛钱关系

01:08:27.980 --> 01:08:28.940
一点关系都没有

01:08:28.940 --> 01:08:29.420
对吧

01:08:29.420 --> 01:08:30.380
是没有任何关系

01:08:30.380 --> 01:08:31.900
但是还是十条啊

01:08:31.900 --> 01:08:33.180
没有任何区别的

01:08:33.180 --> 01:08:34.620
一定要去抓问题的本质

01:08:35.420 --> 01:08:36.940
这里得到多少新闻

01:08:36.940 --> 01:08:37.980
是这个函数决定的

01:08:37.980 --> 01:08:39.020
这个函数给它的它十

01:08:39.020 --> 01:08:40.380
它就一定是十条

01:08:40.380 --> 01:08:41.820
不可能是二十条的

01:08:41.820 --> 01:08:43.500
我无非又是要干嘛呢

01:08:43.500 --> 01:08:45.980
把这里传过来的这个灵面车

01:08:45.980 --> 01:08:46.780
放到这

01:08:47.500 --> 01:08:49.740
然后把这里传过来的配几

01:08:49.740 --> 01:08:50.380
放到这

01:08:50.380 --> 01:08:51.740
无非就是要做这么一件事

01:08:51.740 --> 01:08:52.540
对不对

01:08:52.540 --> 01:08:53.740
那么这件事怎么来做呢

01:08:54.700 --> 01:08:56.140
第一两个变两百

01:08:56.140 --> 01:08:57.260
配几等于多少

01:08:57.260 --> 01:08:58.540
等于Rick还记得吗

01:08:58.540 --> 01:09:00.220
昨天讲的query里边

01:09:00.220 --> 01:09:01.820
所以query是不是第一次来参数

01:09:02.380 --> 01:09:03.020
第一次来参数

01:09:03.020 --> 01:09:03.580
如果说

01:09:03.580 --> 01:09:05.100
你看它有没有配几

01:09:05.100 --> 01:09:06.620
有没有给你传配几

01:09:06.620 --> 01:09:07.740
如果说没有的话

01:09:07.740 --> 01:09:08.620
默认为一

01:09:09.660 --> 01:09:13.340
如果没有传递配几

01:09:13.340 --> 01:09:14.540
默认一

01:09:14.540 --> 01:09:14.780
好

01:09:14.780 --> 01:09:16.300
另外一个limits

01:09:16.300 --> 01:09:17.580
如果说query

01:09:17.580 --> 01:09:19.260
limits没有传递

01:09:19.260 --> 01:09:20.300
我默认为十

01:09:21.020 --> 01:09:23.340
如果没有传递

01:09:24.700 --> 01:09:25.900
默认为十

01:09:26.460 --> 01:09:26.860
对吧

01:09:26.860 --> 01:09:29.100
然后无非就是把这两个东西扔过去

01:09:31.020 --> 01:09:32.140
两个东西扔过去

01:09:32.700 --> 01:09:34.060
最好你建议你呢

01:09:34.060 --> 01:09:36.140
因为它这里得到了始终是制服串

01:09:36.140 --> 01:09:37.180
无论你这里写的是啥

01:09:37.180 --> 01:09:38.140
它得到的都是制服串

01:09:38.620 --> 01:09:39.500
那么建议你呢

01:09:39.500 --> 01:09:40.380
前面加个加号

01:09:40.380 --> 01:09:41.500
把它转换成数字

01:09:41.500 --> 01:09:41.980
这个明白吧

01:09:41.980 --> 01:09:42.540
这是基础

01:09:43.100 --> 01:09:43.980
这也是基础

01:09:43.980 --> 01:09:45.260
加个加号把它转换成数字

01:09:46.460 --> 01:09:47.180
这样子写

01:09:47.580 --> 01:09:49.660
这样子写书就连接起来了

01:09:49.660 --> 01:09:50.860
把用户这边地址栏

01:09:50.860 --> 01:09:52.940
参数那边请求过来的东西

01:09:53.020 --> 01:09:53.900
保障变量里边

01:09:53.900 --> 01:09:55.100
然后把变量扔过去

01:09:55.100 --> 01:09:55.340
对吧

01:09:55.340 --> 01:09:56.780
这样子的数字就

01:09:56.780 --> 01:09:57.500
搭上了

01:09:57.500 --> 01:09:58.460
好 今天我们再来看

01:09:58.460 --> 01:10:00.380
第一页每页钱是20条

01:10:00.380 --> 01:10:01.820
那你看现在就是20条了

01:10:01.820 --> 01:10:01.980
对吧

01:10:01.980 --> 01:10:03.820
我们可以在地址栏里面进行控制

01:10:03.820 --> 01:10:04.380
对吧

01:10:04.380 --> 01:10:06.060
那么每页钱是5条

01:10:06.060 --> 01:10:06.940
那就是每页就是5

01:10:06.940 --> 01:10:08.060
那得到就是5条

01:10:08.620 --> 01:10:08.940
对吧

01:10:08.940 --> 01:10:09.900
这是不是很听话

01:10:09.900 --> 01:10:10.700
那么第二页

01:10:11.900 --> 01:10:13.260
那还就是得到第二页

01:10:13.260 --> 01:10:15.020
第三页得到第三页

01:10:17.170 --> 01:10:17.970
没有意思吧

01:10:19.490 --> 01:10:19.730
OK

01:10:21.090 --> 01:10:21.490
好了

01:10:21.490 --> 01:10:22.930
那么接下来第二题就做完了

01:10:24.690 --> 01:10:29.260
第三题

01:10:30.780 --> 01:10:31.500
今天晚上呢

01:10:31.500 --> 01:10:33.260
我给大家发了一个静态支援目录

01:10:34.300 --> 01:10:35.340
就在这里静态页面

01:10:35.900 --> 01:10:36.700
很多效果

01:10:36.700 --> 01:10:39.260
CSGS我已经给大家写了

01:10:39.260 --> 01:10:40.780
因为我们只有五天时间

01:10:40.780 --> 01:10:42.860
如果说要把这个我还要一步一步

01:10:42.860 --> 01:10:43.820
给大家写完的话

01:10:43.820 --> 01:10:44.620
它太夸张了

01:10:44.620 --> 01:10:46.060
因为这些东西都是浏览器端的

01:10:46.620 --> 01:10:47.900
你们之前都是学过浏览器的

01:10:47.900 --> 01:10:48.140
对吧

01:10:48.860 --> 01:10:49.660
不过学过浏览器

01:10:49.660 --> 01:10:51.500
我也相信很多同学对这一部分的

01:10:51.500 --> 01:10:53.820
写GS可能还是比较辣

01:10:53.820 --> 01:10:56.220
总之但是理论上肯定是可以写出来的

01:10:56.380 --> 01:10:57.420
我已经给你写好了

01:10:57.420 --> 01:10:59.580
你只需要去完成其中一个GS

01:11:00.620 --> 01:11:01.980
这个GS里面有很多函数

01:11:01.980 --> 01:11:03.580
我只需要你完成三个函数

01:11:03.580 --> 01:11:05.340
GS六四注册登录

01:11:05.340 --> 01:11:07.180
只需要去完成这三个函数就行了

01:11:07.180 --> 01:11:08.700
我们要做的事情就是

01:11:08.700 --> 01:11:10.700
把这个我给大家这个静态页面

01:11:10.700 --> 01:11:11.420
内容复制

01:11:12.700 --> 01:11:13.820
把这里边的东西全部删了

01:11:17.060 --> 01:11:18.020
打开这个文件夹

01:11:18.820 --> 01:11:19.140
放

01:11:19.140 --> 01:11:20.740
粘贴到这个public目录下面去

01:11:23.070 --> 01:11:23.630
粘贴进去

01:11:28.400 --> 01:11:29.200
我粘贴到那里面

01:11:29.200 --> 01:11:32.530
人哪里去了

01:11:32.530 --> 01:11:33.730
这边出来了

01:11:34.530 --> 01:11:35.650
这里面有一些GS

01:11:35.810 --> 01:11:36.770
很多介绍你不用去看

01:11:36.770 --> 01:11:37.730
看都不用去看

01:11:37.730 --> 01:11:39.410
就是跟一些多蟆操作有关

01:11:39.970 --> 01:11:41.570
还要跟页面美化有关

01:11:41.570 --> 01:11:42.770
还有一些图片

01:11:42.770 --> 01:11:43.730
杜仪的图片

01:11:43.730 --> 01:11:45.330
还有一个还有几个CSS

01:11:45.330 --> 01:11:47.490
都是这些东西都是运行在浏览器端的

01:11:47.490 --> 01:11:47.650
对吧

01:11:47.650 --> 01:11:48.610
我们之前已经分析过了

01:11:48.610 --> 01:11:50.210
这个目录下面都是运行在浏览器端的

01:11:50.210 --> 01:11:50.930
我们来看一下吧

01:11:53.940 --> 01:11:54.580
说小一点

01:11:56.260 --> 01:11:56.980
啥都没有

01:11:56.980 --> 01:11:58.580
登录注册

01:11:59.860 --> 01:12:00.820
就这么一个页面

01:12:00.820 --> 01:12:02.100
首先也啥都没有

01:12:02.100 --> 01:12:04.100
我们主要关注这个三个函数

01:12:04.100 --> 01:12:05.460
三个函数写出来了过后

01:12:05.540 --> 01:12:07.380
因为我这个页面其他地方都写好了

01:12:07.380 --> 01:12:08.580
就差三个函数了

01:12:08.580 --> 01:12:09.700
这三个函数写出来

01:12:09.700 --> 01:12:12.020
登录注册和那个就是

01:12:13.060 --> 01:12:14.340
新闻就都有了

01:12:14.340 --> 01:12:15.540
那么这三个函数在哪呢

01:12:15.540 --> 01:12:16.900
你只需要去就像桌体一样

01:12:16.900 --> 01:12:18.020
只需要去把我完成就行了

01:12:18.020 --> 01:12:18.660
在这个地方

01:12:18.660 --> 01:12:19.380
叫Pretis

01:12:20.500 --> 01:12:21.540
Pretis练习

01:12:22.020 --> 01:12:22.340
在这

01:12:23.700 --> 01:12:25.060
你看这里有三个函数

01:12:25.060 --> 01:12:25.780
后边这里

01:12:25.780 --> 01:12:26.820
后边还有三个函数

01:12:26.820 --> 01:12:27.700
后边这三个函数呢

01:12:27.700 --> 01:12:29.780
我们明天是明天的东西

01:12:29.780 --> 01:12:30.820
跟今天没有关系

01:12:31.540 --> 01:12:31.620
好

01:12:31.620 --> 01:12:32.580
我们今天呢

01:12:32.580 --> 01:12:34.020
我们只搞定这三个函数

01:12:34.180 --> 01:12:34.820
get news

01:12:35.300 --> 01:12:37.140
这个函数都给大家打号注尸了

01:12:37.140 --> 01:12:37.700
干嘛的

01:12:37.700 --> 01:12:38.420
获取新闻

01:12:39.700 --> 01:12:40.660
这个Pretis是什么

01:12:40.660 --> 01:12:42.100
Pretis读的是什么

01:12:42.100 --> 01:12:43.540
读的是地址兰参数

01:12:43.540 --> 01:12:45.780
这个东西是客户端也可以读的

01:12:45.780 --> 01:12:47.140
这个玩意客户端也可以读的

01:12:47.140 --> 01:12:47.780
比方说

01:12:47.780 --> 01:12:48.740
Page等于1

01:12:49.380 --> 01:12:49.860
NameX

01:12:50.580 --> 01:12:51.060
等于10

01:12:51.700 --> 01:12:52.020
对吧

01:12:52.020 --> 01:12:53.540
他不是说服务器才能读

01:12:53.540 --> 01:12:54.420
服务器也不会读这个

01:12:54.420 --> 01:12:55.780
因为这里访问的不是API

01:12:55.780 --> 01:12:56.660
访问的是静产页面

01:12:56.660 --> 01:12:57.060
对吧

01:12:57.060 --> 01:12:58.260
服务器才能读这个

01:12:58.260 --> 01:13:00.020
那么这里是客户端在读

01:13:00.020 --> 01:13:01.140
客户端这边你看

01:13:01.140 --> 01:13:02.420
我们可以通过location

01:13:04.880 --> 01:13:06.480
也可以通过location这个12起

01:13:08.160 --> 01:13:09.280
是不是拿到这个数据

01:13:09.280 --> 01:13:10.480
然后通过制服出来处理

01:13:10.480 --> 01:13:10.720
对吧

01:13:10.720 --> 01:13:11.600
按到这个东西分割

01:13:11.600 --> 01:13:12.640
再按到等号分割

01:13:12.640 --> 01:13:13.360
是不是可以得到

01:13:13.360 --> 01:13:13.840
对吧

01:13:13.840 --> 01:13:15.280
那么这些东西我都帮你能做了

01:13:15.280 --> 01:13:16.000
你们都不用管

01:13:16.800 --> 01:13:17.520
这个地方呢

01:13:17.520 --> 01:13:19.200
我只需要你打印出来吧

01:13:19.200 --> 01:13:20.320
这个还说打印出来

01:13:20.320 --> 01:13:21.040
carry

01:13:21.040 --> 01:13:21.520
你看一下吧

01:13:22.240 --> 01:13:22.640
刷新

01:13:23.520 --> 01:13:24.400
Page为1

01:13:24.400 --> 01:13:25.680
NameX为10

01:13:25.680 --> 01:13:26.720
而且都有默认值的

01:13:26.720 --> 01:13:27.360
都有默认值

01:13:27.360 --> 01:13:28.000
你不写的话

01:13:29.040 --> 01:13:30.800
默认值就是1

01:13:30.800 --> 01:13:32.800
PageNameX就是10

01:13:32.880 --> 01:13:33.920
如果说你写了的话

01:13:33.920 --> 01:13:35.200
比方说你写了

01:13:35.200 --> 01:13:36.640
我都给你做好了

01:13:36.640 --> 01:13:37.280
Page等于3

01:13:37.280 --> 01:13:38.000
NameX等于10

01:13:39.280 --> 01:13:41.360
NameX如果说写了的话30

01:13:41.360 --> 01:13:42.640
那么这里就30

01:13:42.640 --> 01:13:43.360
别人说

01:13:43.360 --> 01:13:44.800
总之给你写好了

01:13:44.800 --> 01:13:46.400
这东西你拿到了

01:13:46.400 --> 01:13:47.600
你要做的就是

01:13:47.600 --> 01:13:50.240
把服务器的新闻拿到

01:13:50.960 --> 01:13:51.600
是不是很简单

01:13:52.400 --> 01:13:53.200
怎么写

01:13:53.200 --> 01:13:54.080
我刚才都写了的

01:13:55.200 --> 01:13:57.360
API 60拿到

01:13:58.240 --> 01:14:02.000
然后参数是什么呢

01:14:02.800 --> 01:14:04.080
这里参数是什么

01:14:04.080 --> 01:14:05.600
Page等于多少

01:14:05.600 --> 01:14:06.000
Page

01:14:06.000 --> 01:14:08.240
我们是不是这里可以用一个模板支付串

01:14:08.240 --> 01:14:09.200
用一个模板支付串

01:14:09.200 --> 01:14:10.800
因为模板支付串特别好评阶嘛

01:14:12.000 --> 01:14:12.480
评阶

01:14:12.480 --> 01:14:13.360
Page等于多少呢

01:14:13.360 --> 01:14:15.120
Page等于Carry.Page

01:14:15.120 --> 01:14:15.520
是吧

01:14:15.520 --> 01:14:16.640
Carry.Page这个纸

01:14:16.640 --> 01:14:18.080
这个3放在这

01:14:18.080 --> 01:14:18.400
对不对

01:14:18.400 --> 01:14:19.440
是放在这

01:14:19.440 --> 01:14:20.480
好

01:14:20.480 --> 01:14:21.120
然后呢

01:14:22.160 --> 01:14:27.970
NameX等于Carry.NameX

01:14:27.970 --> 01:14:28.610
我们来看一下吧

01:14:29.730 --> 01:14:30.370
来看一下啊

01:14:31.170 --> 01:14:32.530
慢慢来

01:14:32.530 --> 01:14:33.410
今天晚上时间够

01:14:34.370 --> 01:14:35.650
请求了URIO地址

01:14:35.650 --> 01:14:36.610
输出一下URIO

01:14:38.540 --> 01:14:39.020
保存

01:14:40.140 --> 01:14:40.620
刷新

01:14:40.620 --> 01:14:42.860
你看我现在要请求的是不是Page等于3

01:14:42.860 --> 01:14:44.060
NameX等于30

01:14:44.060 --> 01:14:45.900
如果说我这里一个页面不写的话

01:14:45.900 --> 01:14:47.660
那么我现在是不是要请求这个地址

01:14:47.660 --> 01:14:47.980
对吧

01:14:47.980 --> 01:14:49.340
这就是我们要请求的地址

01:14:49.340 --> 01:14:49.820
这个地址

01:14:49.820 --> 01:14:51.100
因为我们刚才已经测试了

01:14:51.100 --> 01:14:52.780
这个地址是不是给他不同的参数

01:14:52.780 --> 01:14:53.980
他就能拿到不同的数据

01:14:54.860 --> 01:14:55.340
对不对

01:14:55.340 --> 01:14:55.580
好

01:14:55.580 --> 01:14:56.700
那么我们现在要做的就是

01:14:56.700 --> 01:14:57.340
把这个地址

01:14:58.220 --> 01:14:59.020
扔给服务器

01:15:00.060 --> 01:15:00.460
Fetch

01:15:01.820 --> 01:15:03.260
URIO地址扔给他

01:15:03.260 --> 01:15:03.500
对吧

01:15:03.500 --> 01:15:04.220
其他就没了

01:15:04.380 --> 01:15:07.820
然后就是Await等待服务器给我一个响应

01:15:07.820 --> 01:15:08.780
响应拿到

01:15:08.780 --> 01:15:10.540
响应拿到过后是不是要解析消息体

01:15:10.540 --> 01:15:10.860
对不对

01:15:10.860 --> 01:15:12.380
服务器给我传了一个响应题

01:15:12.700 --> 01:15:14.140
又要等待拿到什么

01:15:14.140 --> 01:15:14.780
然后结果

01:15:15.340 --> 01:15:16.060
响应题

01:15:16.060 --> 01:15:16.620
Await

01:15:17.340 --> 01:15:17.660
Ridg

01:15:18.220 --> 01:15:18.940
接胜

01:15:18.940 --> 01:15:20.460
把服务器的接胜格式拿到

01:15:20.940 --> 01:15:21.100
好

01:15:21.100 --> 01:15:22.140
那么他这里这个喊出来

01:15:22.140 --> 01:15:22.940
我给大家注释了

01:15:22.940 --> 01:15:24.780
他要要求你返回的格式是这样子的

01:15:25.660 --> 01:15:26.220
Datas

01:15:27.820 --> 01:15:28.540
这么一个玩意儿

01:15:28.540 --> 01:15:29.340
一个数组

01:15:29.340 --> 01:15:29.660
偷偷

01:15:30.220 --> 01:15:31.100
这么一个东西

01:15:31.100 --> 01:15:32.300
Datas有两个属性

01:15:32.300 --> 01:15:33.340
一个是偷偷一个是Datas

01:15:33.500 --> 01:15:35.420
那么跟我们服务器给我返回的结果

01:15:35.420 --> 01:15:36.140
是不一样的

01:15:36.140 --> 01:15:37.420
看一下这个服务器返回的结果

01:15:39.780 --> 01:15:40.260
刷新

01:15:41.380 --> 01:15:42.580
不就是偷偷Datas吧

01:15:42.580 --> 01:15:42.820
对吧

01:15:42.820 --> 01:15:45.060
那我这里是不是就把服务器的结果直接扔回去

01:15:45.060 --> 01:15:45.540
就完事了

01:15:46.020 --> 01:15:46.580
Return

01:15:46.580 --> 01:15:47.140
Return

01:15:47.140 --> 01:15:48.260
反悔就行了

01:15:48.260 --> 01:15:48.740
对吧

01:15:48.740 --> 01:15:49.860
我就说他这个还是没写的

01:15:49.860 --> 01:15:51.220
这个还是专门留给你们写的

01:15:51.220 --> 01:15:52.180
其他地方都写完了

01:15:52.740 --> 01:15:53.300
保存

01:15:54.260 --> 01:15:55.220
现在我们看一下刷新

01:15:55.860 --> 01:15:57.700
这个新闻他就自动显示出来了

01:15:57.700 --> 01:15:58.900
而且下面自动分页了

01:15:59.300 --> 01:16:00.100
你看怎么分页的

01:16:00.100 --> 01:16:01.060
点击这个分页过后了

01:16:01.060 --> 01:16:01.540
他就给你

01:16:02.100 --> 01:16:02.660
谈了这个

01:16:02.660 --> 01:16:04.420
他就又重新刷新页面

01:16:04.500 --> 01:16:05.780
刷新页面过后就带了一个参数

01:16:05.780 --> 01:16:08.420
这个参数过后是不是又重新运行这个代码

01:16:08.420 --> 01:16:09.780
又重新运行这个函数

01:16:09.780 --> 01:16:12.740
重新运行这个函数是不是又发出了第二页的请求

01:16:12.740 --> 01:16:14.660
就拿到第二页的数据了

01:16:14.660 --> 01:16:14.980
好

01:16:14.980 --> 01:16:15.380
第三页

01:16:16.500 --> 01:16:18.180
有兴趣的话可以去看一下这个介绍代码

01:16:18.180 --> 01:16:18.740
不过呢

01:16:18.740 --> 01:16:20.180
我建议大家还是不要去看

01:16:20.180 --> 01:16:21.140
你可以自己去写一些

01:16:21.140 --> 01:16:22.340
都还比较简单一点

01:16:22.340 --> 01:16:23.380
我那个代码呢

01:16:23.380 --> 01:16:25.540
不是那么容易被同学们阅读

01:16:27.140 --> 01:16:28.740
主要是目的呢

01:16:28.740 --> 01:16:29.860
是让你们写这个

01:16:29.860 --> 01:16:30.580
所以其他地方呢

01:16:30.580 --> 01:16:32.340
因为我准备时间有限

01:16:32.340 --> 01:16:33.700
所以说写得比较充嘛

01:16:34.420 --> 01:16:35.940
代码的不是那么好看

01:16:36.740 --> 01:16:37.940
好那么这就是

01:16:37.940 --> 01:16:38.740
你要做的事情

01:16:38.740 --> 01:16:40.260
就是把这个函数写完

01:16:40.260 --> 01:16:41.300
我其实怎么做的

01:16:41.300 --> 01:16:42.660
就是你都拿到数据了

01:16:42.660 --> 01:16:44.260
我无非就是控制动物啊

01:16:44.260 --> 01:16:45.780
我就循环生成一些动物嘛

01:16:45.780 --> 01:16:46.100
对不对

01:16:46.100 --> 01:16:47.700
把这个动物加到页面上去

01:16:47.700 --> 01:16:49.380
然后再控制一下这个区域

01:16:49.380 --> 01:16:50.740
该怎么去显示

01:16:50.740 --> 01:16:53.380
我就用动物元素的控制把控制完就完事了

01:16:54.020 --> 01:16:55.780
这就是这个新闻列表

01:16:55.780 --> 01:16:56.100
然后呢

01:16:56.100 --> 01:16:56.980
现在注册页面

01:16:58.420 --> 01:16:58.980
注册用户

01:16:59.940 --> 01:17:01.060
注册用户是这样子

01:17:02.020 --> 01:17:03.540
注册成功

01:17:05.300 --> 01:17:06.420
我直接说一下啊

01:17:06.420 --> 01:17:07.220
你要返回咋

01:17:09.060 --> 01:17:10.340
当注册成功时

01:17:10.820 --> 01:17:13.620
当注册成功时

01:17:17.600 --> 01:17:18.800
返回是什么呢

01:17:18.800 --> 01:17:19.360
返回

01:17:20.560 --> 01:17:21.120
我们看一下

01:17:21.840 --> 01:17:23.200
好像不需要返回啊

01:17:23.200 --> 01:17:25.600
这个地方好像不需要返回

01:17:27.680 --> 01:17:28.720
当注册失败时

01:17:28.720 --> 01:17:30.400
当注册成功时不需要返回

01:17:30.400 --> 01:17:31.680
当注册失败时

01:17:31.840 --> 01:17:32.720
返回错误消息

01:17:33.600 --> 01:17:34.320
失败时

01:17:34.320 --> 01:17:35.280
比方到注册的时候

01:17:35.280 --> 01:17:35.760
我啥都不管

01:17:35.760 --> 01:17:36.800
我直接返回一个错误消息

01:17:36.800 --> 01:17:37.040
错了

01:17:37.680 --> 01:17:38.320
错误了

01:17:38.320 --> 01:17:38.880
你看一下吧

01:17:39.760 --> 01:17:40.720
就差这个函数没写了

01:17:40.720 --> 01:17:42.000
其他地方都写好了

01:17:42.000 --> 01:17:42.800
比方说点注册

01:17:43.840 --> 01:17:44.480
我们这里呢

01:17:45.040 --> 01:17:46.240
这里有验证的啊

01:17:46.240 --> 01:17:47.600
帐号随便写一些啊

01:17:51.420 --> 01:17:52.620
年龄随便写这吧

01:17:52.620 --> 01:17:53.340
点注册

01:17:53.340 --> 01:17:53.980
说错误了

01:17:53.980 --> 01:17:54.620
对吧

01:17:54.620 --> 01:17:55.420
错误了

01:17:55.420 --> 01:17:57.180
我这里直接返回一个错误消息

01:17:58.220 --> 01:17:58.460
那么

01:17:59.420 --> 01:18:00.940
如果不返回的话就没有错误

01:18:00.940 --> 01:18:01.900
没有错误怎么写呢

01:18:02.460 --> 01:18:03.180
这个地方是啥呢

01:18:03.180 --> 01:18:04.220
这个RigginInfo是啥呢

01:18:05.500 --> 01:18:07.340
如果说验证通过之后

01:18:07.340 --> 01:18:08.940
我会给你把个注册信息给你

01:18:11.330 --> 01:18:11.730
看一下吧

01:18:11.730 --> 01:18:12.130
控制台

01:18:13.570 --> 01:18:13.890
刷新

01:18:15.330 --> 01:18:16.450
账号随便写一个啊

01:18:17.490 --> 01:18:17.890
密码

01:18:22.850 --> 01:18:23.490
点击

01:18:23.490 --> 01:18:25.170
所以我会把注册信息给你

01:18:25.170 --> 01:18:25.810
对吧

01:18:25.810 --> 01:18:27.090
那你要做什么事情

01:18:27.090 --> 01:18:29.650
你无非就是把这个注册信息

01:18:29.650 --> 01:18:31.090
扔给服务器

01:18:31.090 --> 01:18:32.610
是不是要扔给服务器就完成了

01:18:32.610 --> 01:18:33.810
那怎么来扔给服务器呢

01:18:34.450 --> 01:18:35.490
是U来费起

01:18:36.050 --> 01:18:37.330
请求什么地址

01:18:37.330 --> 01:18:40.050
请求API user rig

01:18:40.050 --> 01:18:40.290
对吧

01:18:40.370 --> 01:18:41.890
你们都刚才都回答过这个问题的

01:18:41.890 --> 01:18:43.090
所以不再重复了

01:18:43.090 --> 01:18:44.850
但是你要这是一个Post的请求

01:18:45.490 --> 01:18:46.850
Post的请求的话

01:18:46.850 --> 01:18:47.570
你该怎么写呢

01:18:48.130 --> 01:18:48.930
Post的请求的话

01:18:48.930 --> 01:18:50.210
你要写第二个参数配置

01:18:51.170 --> 01:18:52.050
第二参数是一个配置

01:18:52.690 --> 01:18:53.330
Messor的

01:18:54.530 --> 01:18:54.930
Post

01:18:56.050 --> 01:18:57.330
这是一个Post的请求

01:18:57.330 --> 01:18:58.530
因为它默认试的那个

01:18:58.530 --> 01:18:59.490
默认试Gate的请求

01:18:59.490 --> 01:19:01.010
所以说Post的请求的话

01:19:01.010 --> 01:19:01.810
你要配置一下

01:19:01.810 --> 01:19:03.330
不然它会当成Gate的请求发过去

01:19:03.330 --> 01:19:04.370
那肯定不对了

01:19:04.770 --> 01:19:05.330
好

01:19:05.330 --> 01:19:07.010
一个是Messor的Post

01:19:07.010 --> 01:19:07.890
还有一个是什么呢

01:19:07.890 --> 01:19:09.170
还有一个就是那个Body

01:19:10.610 --> 01:19:11.250
Body

01:19:11.730 --> 01:19:13.250
就是请求体是什么

01:19:13.250 --> 01:19:14.610
请求体我们刚才是不是看到的

01:19:15.170 --> 01:19:15.890
请求体是什么

01:19:15.890 --> 01:19:17.090
请求体可以是这个样子

01:19:17.810 --> 01:19:19.010
不就是这个样子吗

01:19:19.010 --> 01:19:19.810
是不是个对象

01:19:19.810 --> 01:19:20.770
但是它是一个

01:19:20.770 --> 01:19:21.810
看上去是一个对象

01:19:21.810 --> 01:19:23.330
但是实际上是一个什么

01:19:23.330 --> 01:19:26.050
实际上是一个接审格式的支付串

01:19:26.050 --> 01:19:27.730
因此你要把这个JS对象

01:19:27.730 --> 01:19:29.410
转换成接审格式的支付串

01:19:29.410 --> 01:19:29.970
怎么转换

01:19:30.610 --> 01:19:31.490
里面有个函数

01:19:31.490 --> 01:19:32.370
JS里面有个函数

01:19:32.370 --> 01:19:33.810
要选给非

01:19:36.530 --> 01:19:36.850
接受

01:19:38.530 --> 01:19:39.170
输出一下吧

01:19:39.170 --> 01:19:40.530
我们先不着急请求

01:19:40.530 --> 01:19:41.010
输出一下

01:19:41.970 --> 01:19:48.130
这是得到接审格式的支付串

01:19:49.170 --> 01:19:49.810
保存

01:19:49.810 --> 01:19:50.370
让你看一下

01:19:51.170 --> 01:19:51.570
刷新

01:19:55.680 --> 01:19:55.840
好

01:19:55.840 --> 01:19:56.160
你看

01:19:56.160 --> 01:19:57.280
是不是得到一个支付串了

01:19:57.280 --> 01:19:58.000
它就不是对象了

01:19:58.000 --> 01:19:58.320
对吧

01:19:58.320 --> 01:19:59.360
是一个支付串

01:19:59.360 --> 01:20:00.480
你看变成黑色了

01:20:01.040 --> 01:20:02.000
是个支付串

01:20:02.000 --> 01:20:03.440
它就可以把一个JS对象

01:20:03.440 --> 01:20:05.040
变成一个接审格式的支付串

01:20:05.040 --> 01:20:05.200
好

01:20:05.200 --> 01:20:06.400
那么现在我们只需要把这个

01:20:06.400 --> 01:20:07.360
接审格式的支付串

01:20:07.360 --> 01:20:08.160
放到Body里边

01:20:09.440 --> 01:20:10.240
放到Body里边

01:20:10.880 --> 01:20:13.280
也可以在这里配置一下请求投

01:20:13.360 --> 01:20:14.800
因为我们知道请求的时候

01:20:15.360 --> 01:20:16.080
请求的时候

01:20:16.080 --> 01:20:17.280
你需要高速服务起

01:20:17.280 --> 01:20:19.360
你到底消息体是一个什么样的格式

01:20:19.360 --> 01:20:20.800
是不是可以配置请求投

01:20:20.800 --> 01:20:22.080
那么请求投里边配置啥

01:20:22.080 --> 01:20:23.760
是不是配置这个content

01:20:23.760 --> 01:20:24.160
态度

01:20:24.160 --> 01:20:25.360
都是我们之前讲的原理

01:20:25.360 --> 01:20:26.080
对吧

01:20:26.080 --> 01:20:28.560
IPK请接受

01:20:29.680 --> 01:20:30.800
就配置好了

01:20:30.800 --> 01:20:31.680
跟这边是一样的

01:20:31.680 --> 01:20:32.160
你看

01:20:32.160 --> 01:20:32.800
扣的

01:20:32.800 --> 01:20:34.400
请求投content的态度

01:20:34.400 --> 01:20:35.040
复制过来了

01:20:37.040 --> 01:20:38.080
content的态度

01:20:38.080 --> 01:20:39.120
IPK请接受

01:20:39.120 --> 01:20:40.400
请求体就是这个

01:20:40.400 --> 01:20:41.440
接受格式的支付串

01:20:42.160 --> 01:20:42.960
它就配置好了

01:20:43.280 --> 01:20:44.640
然后来等待它

01:20:44.640 --> 01:20:45.840
等待它完成

01:20:45.840 --> 01:20:47.600
然后是不是拿到服务器的响应结果

01:20:48.800 --> 01:20:50.160
拿到服务器的响应

01:20:50.160 --> 01:20:51.920
然后后边的处理就是一样的了

01:20:51.920 --> 01:20:57.120
又来等待服务器的对消息体的解析

01:20:57.120 --> 01:20:58.880
就是浏览器对消息体的解析

01:20:58.880 --> 01:20:59.920
我们输出这个result

01:21:01.040 --> 01:21:01.920
看一下注册吧

01:21:03.440 --> 01:21:04.080
看一下注册

01:21:06.000 --> 01:21:06.560
那么这里呢

01:21:06.560 --> 01:21:07.680
我们刷新看一下吧

01:21:12.270 --> 01:21:13.550
我这里好像也没有去验证的

01:21:13.550 --> 01:21:14.430
这些从没有重复

01:21:14.430 --> 01:21:15.710
好像就一定是成功的

01:21:21.230 --> 01:21:23.070
我这里面刷新

01:21:23.070 --> 01:21:24.030
刷新一次

01:21:24.030 --> 01:21:29.010
我看服务器好像爆错了

01:21:29.010 --> 01:21:30.210
服务器应该是爆错了

01:21:30.210 --> 01:21:31.330
它没有拿到响应结果

01:21:33.090 --> 01:21:33.890
那这样吧

01:21:33.890 --> 01:21:34.930
既然服务器爆错了

01:21:34.930 --> 01:21:37.010
我就把个爆错的消息扔给客户端吧

01:21:37.010 --> 01:21:38.930
我就把爆错的消息扔给客户端

01:21:38.930 --> 01:21:39.650
那么这里呢

01:21:39.650 --> 01:21:41.010
我再稍微感谢一下

01:21:41.010 --> 01:21:42.370
注册的时候

01:21:42.370 --> 01:21:43.330
如果说爆错了

01:21:44.610 --> 01:21:45.650
如果说你爆错了

01:21:45.650 --> 01:21:47.330
出现了错误

01:21:47.330 --> 01:21:48.770
我就把错误消息扔给客户端

01:21:52.370 --> 01:21:53.650
我就把这个错误消息

01:21:53.650 --> 01:21:54.530
扔给客户端

01:21:54.530 --> 01:21:57.010
rex send error message

01:22:00.100 --> 01:22:01.300
把这个消息扔给你

01:22:01.300 --> 01:22:02.420
你自己去看吧

01:22:02.420 --> 01:22:03.540
那么现在我们再来一次

01:22:09.600 --> 01:22:11.120
那么这里是不是注册成功了

01:22:11.120 --> 01:22:12.560
刚才怎么爆错的

01:22:12.560 --> 01:22:14.080
账号写少一点

01:22:14.080 --> 01:22:15.040
那么现在是不是

01:22:16.880 --> 01:22:17.680
message

01:22:18.720 --> 01:22:20.160
我看一下这里这里出了问题

01:22:21.200 --> 01:22:21.680
注册

01:22:24.350 --> 01:22:25.310
它变成了一个

01:22:26.590 --> 01:22:27.870
我无论直接升着message

01:22:27.870 --> 01:22:28.750
我要给它一个对象

01:22:28.750 --> 01:22:29.870
要保持格式统一

01:22:30.510 --> 01:22:32.270
error message

01:22:34.620 --> 01:22:37.420
我要给客户端发送一个对象

01:22:37.420 --> 01:22:38.300
把对象里边

01:22:38.300 --> 01:22:39.020
把这个字幕串

01:22:39.020 --> 01:22:39.980
把这个错误的消息

01:22:39.980 --> 01:22:41.660
放到一个对象的属性里边

01:22:41.660 --> 01:22:43.420
这样子来保持格式统一

01:22:43.420 --> 01:22:44.060
因为如果说

01:22:44.060 --> 01:22:45.820
你直接发送一个字幕串的话

01:22:45.820 --> 01:22:46.780
就导致一个什么问题呢

01:22:46.780 --> 01:22:47.980
导致格式不统一了

01:22:47.980 --> 01:22:49.260
那么客户端是把它按照

01:22:49.260 --> 01:22:50.460
节省格式来解析的

01:22:51.020 --> 01:22:51.900
客户端是把它按照

01:22:51.900 --> 01:22:52.860
节省格式来解析的

01:22:52.860 --> 01:22:53.260
结果呢

01:22:53.260 --> 01:22:54.700
你的错误消息不是一个节省

01:22:54.700 --> 01:22:55.660
刚才就解析不了

01:22:55.660 --> 01:22:56.060
看没有

01:22:56.060 --> 01:22:57.100
在这里就解析不了

01:22:57.100 --> 01:22:58.380
变成这个错误了

01:22:58.380 --> 01:22:59.020
看一下吧

01:23:04.140 --> 01:23:04.700
错误对吧

01:23:04.700 --> 01:23:05.580
有错误

01:23:05.580 --> 01:23:05.900
对不对

01:23:05.900 --> 01:23:06.700
是有错误

01:23:07.340 --> 01:23:08.300
那么错误消息呢

01:23:08.300 --> 01:23:09.340
我就不管了

01:23:09.340 --> 01:23:10.060
我就不管了

01:23:10.060 --> 01:23:10.940
那么我就

01:23:12.140 --> 01:23:13.100
如果说有错误

01:23:13.100 --> 01:23:13.660
判断一下吧

01:23:13.660 --> 01:23:14.060
如果说

01:23:14.060 --> 01:23:15.660
results里边有error这个属性

01:23:15.660 --> 01:23:16.460
表示有错误

01:23:16.460 --> 01:23:16.780
对不对

01:23:16.780 --> 01:23:18.860
所以对象里边有这个error属性

01:23:18.860 --> 01:23:19.660
有错误

01:23:19.660 --> 01:23:20.700
有错误的情况下呢

01:23:20.700 --> 01:23:21.660
我就给你返回什么了

01:23:23.740 --> 01:23:25.020
服务器错误

01:23:25.020 --> 01:23:25.820
注册时代

01:23:25.820 --> 01:23:26.380
注册时代

01:23:26.380 --> 01:23:27.740
我也难得告诉你错误原因了

01:23:27.740 --> 01:23:30.060
因为这些服务器的消息的格式呢

01:23:30.060 --> 01:23:30.860
都比较粗糙

01:23:30.860 --> 01:23:31.660
我觉得难得给你的

01:23:31.660 --> 01:23:32.860
我难得去分析了

01:23:32.860 --> 01:23:34.060
如果说出车成功的话

01:23:34.060 --> 01:23:34.700
我啥都不做

01:23:34.700 --> 01:23:35.260
不用返回

01:23:36.300 --> 01:23:37.020
注册成功的话

01:23:37.020 --> 01:23:38.060
我就error车

01:23:38.060 --> 01:23:38.620
注册成功

01:23:41.060 --> 01:23:42.020
包里一点吧

01:23:42.020 --> 01:23:42.500
然后呢

01:23:42.500 --> 01:23:43.300
挑转

01:23:43.300 --> 01:23:43.860
楼可行

01:23:46.290 --> 01:23:46.850
挑转一面

01:23:46.850 --> 01:23:47.410
挑转到哪呢

01:23:47.410 --> 01:23:48.050
挑转到登录

01:23:49.410 --> 01:23:50.130
登录一面

01:23:51.010 --> 01:23:52.050
登录一面的地址是这个

01:23:52.050 --> 01:23:52.610
就这个一面

01:23:53.170 --> 01:23:53.410
登录

01:23:54.370 --> 01:23:54.610
好

01:23:54.610 --> 01:23:55.330
写完了

01:23:55.330 --> 01:23:56.370
这就是注册

01:23:56.370 --> 01:23:56.530
好

01:23:56.530 --> 01:23:57.170
咱们来试一下吧

01:23:59.090 --> 01:23:59.410
这里

01:24:00.370 --> 01:24:01.570
来个账号

01:24:01.570 --> 01:24:02.770
就是乘哥

01:24:03.810 --> 01:24:05.250
密码123123

01:24:05.250 --> 01:24:05.570
新闻

01:24:06.370 --> 01:24:06.770
乘哥

01:24:08.290 --> 01:24:09.090
年龄

01:24:09.090 --> 01:24:09.970
12

01:24:09.970 --> 01:24:10.370
注册

01:24:11.250 --> 01:24:12.290
注册失败

01:24:12.290 --> 01:24:13.490
应该是名字重复了

01:24:13.490 --> 01:24:13.970
乘哥2

01:24:14.850 --> 01:24:15.170
注册

01:24:15.730 --> 01:24:16.530
注册成功

01:24:16.530 --> 01:24:17.010
点确定

01:24:18.130 --> 01:24:18.930
挑到登录业了

01:24:18.930 --> 01:24:19.170
对吧

01:24:19.170 --> 01:24:19.570
以后呢

01:24:19.570 --> 01:24:20.450
我们来登录一下

01:24:20.450 --> 01:24:21.810
注册就做完了

01:24:21.810 --> 01:24:23.010
那么现在我们的登录

01:24:23.010 --> 01:24:24.290
登录的是一样的道理

01:24:24.290 --> 01:24:25.730
它这里给说的很明白了

01:24:25.730 --> 01:24:27.330
我会把登录的信息传给你

01:24:27.330 --> 01:24:28.130
跟注册是一样

01:24:28.130 --> 01:24:29.330
它会把注册信息传给你

01:24:29.330 --> 01:24:31.010
我这里会把登录信息传给你

01:24:31.010 --> 01:24:32.530
然后你去登录就完成了

01:24:32.530 --> 01:24:33.650
那登录的时候是一样的

01:24:33.650 --> 01:24:34.770
我们把它代码复制一下吧

01:24:37.230 --> 01:24:38.510
是不是还是要传消息体

01:24:38.910 --> 01:24:40.110
解析成接胜

01:24:40.110 --> 01:24:42.190
把登录信息解析成接胜格式

01:24:42.190 --> 01:24:43.470
然后去请求啥

01:24:43.470 --> 01:24:44.830
请求login这个地址

01:24:44.830 --> 01:24:45.070
对吧

01:24:45.070 --> 01:24:45.950
我们刚才写好的

01:24:45.950 --> 01:24:47.150
浮起了login这个地址

01:24:47.710 --> 01:24:48.670
方法是pose

01:24:48.670 --> 01:24:49.790
还是这个东西一样

01:24:49.790 --> 01:24:50.750
接胜还是一样

01:24:50.750 --> 01:24:52.670
等待浮起的响应过后

01:24:52.670 --> 01:24:53.950
把它解析成接胜格式

01:24:54.510 --> 01:24:55.070
如果说

01:24:56.110 --> 01:24:57.390
如果说为脑

01:24:57.390 --> 01:24:58.430
如果说有值

01:24:58.430 --> 01:24:59.390
解析出来有值

01:24:59.390 --> 01:25:00.430
表示注册成功

01:25:00.430 --> 01:25:01.070
登录成功

01:25:01.070 --> 01:25:01.470
对吧

01:25:01.470 --> 01:25:02.190
因为我刚才看到

01:25:02.190 --> 01:25:02.910
登录成功过后

01:25:02.910 --> 01:25:04.190
它会给我返回一个

01:25:04.190 --> 01:25:05.550
登录成功的用户

01:25:05.550 --> 01:25:06.590
我就返回什么了

01:25:07.550 --> 01:25:09.230
什么都不需要返回

01:25:09.230 --> 01:25:09.950
登录成功

01:25:11.390 --> 01:25:12.190
我们就ernot

01:25:13.230 --> 01:25:13.790
ernot

01:25:16.400 --> 01:25:17.760
登录成功

01:25:17.760 --> 01:25:18.560
就完事了

01:25:18.560 --> 01:25:18.800
好

01:25:18.800 --> 01:25:20.720
如果说登录失败了

01:25:20.720 --> 01:25:21.920
是不是只有一种情况

01:25:21.920 --> 01:25:23.120
帐号密码不正确

01:25:23.120 --> 01:25:23.760
对吧

01:25:23.760 --> 01:25:25.840
我们就这里就返回错误消息

01:25:25.840 --> 01:25:28.160
帐号或密码错误

01:25:29.280 --> 01:25:30.160
就这两个情况吧

01:25:30.160 --> 01:25:31.920
登录成功啥都不用返回

01:25:31.920 --> 01:25:32.720
登录失败的时候

01:25:32.720 --> 01:25:33.680
返回那个错误消息

01:25:33.680 --> 01:25:35.040
因为这是海述的要求

01:25:35.040 --> 01:25:36.080
我要求你们这么写

01:25:36.080 --> 01:25:37.040
因为我那边要调用

01:25:37.680 --> 01:25:38.160
好

01:25:38.160 --> 01:25:39.040
表演我们刚才

01:25:39.040 --> 01:25:39.920
诚哥刷新一下

01:25:42.080 --> 01:25:42.960
诚哥

01:25:42.960 --> 01:25:43.760
二

01:25:43.760 --> 01:25:44.240
一二三

01:25:44.240 --> 01:25:44.800
一二三

01:25:44.800 --> 01:25:45.520
登录

01:25:45.520 --> 01:25:46.240
登录成功

01:25:46.240 --> 01:25:46.880
对不对

01:25:46.880 --> 01:25:47.040
好

01:25:47.040 --> 01:25:48.000
那么换一个

01:25:48.000 --> 01:25:48.320
登录

01:25:49.200 --> 01:25:50.000
这里出了问题

01:25:52.480 --> 01:25:53.280
就解析不了了

01:25:53.280 --> 01:25:53.440
对吧

01:25:53.440 --> 01:25:55.200
因为服务器那边没有给我发

01:25:55.200 --> 01:25:57.360
像服务器那边没有给我发任何东西

01:25:58.320 --> 01:25:59.120
服务器那边是not

01:25:59.120 --> 01:26:00.160
还没有给我发任何东西

01:26:00.160 --> 01:26:01.760
当我服务器再稍微感一下

01:26:01.760 --> 01:26:02.240
如果说

01:26:04.160 --> 01:26:06.160
改成一样统一的格式

01:26:06.240 --> 01:26:07.440
有值有值的话

01:26:07.440 --> 01:26:08.320
我就剩等

01:26:08.320 --> 01:26:08.880
瑞兆子

01:26:08.880 --> 01:26:10.240
如果说瑞兆子没有值的话

01:26:10.240 --> 01:26:12.240
我还是给你给你发一个对象算了

01:26:12.240 --> 01:26:13.200
不能给你啥都不发

01:26:13.200 --> 01:26:13.920
啥都不发的话

01:26:13.920 --> 01:26:16.160
扣到那边解析就解析失败了

01:26:16.160 --> 01:26:17.360
因为他不是一个标准的

01:26:17.360 --> 01:26:18.400
给接受格式的

01:26:18.400 --> 01:26:19.280
给他发一个error

01:26:19.280 --> 01:26:20.560
还是个保持格式统一吗

01:26:20.560 --> 01:26:21.280
有错误消息

01:26:22.080 --> 01:26:24.000
账号和密码错误

01:26:24.000 --> 01:26:24.880
那么这边就简单了

01:26:25.440 --> 01:26:26.400
到了这边就简单了

01:26:27.040 --> 01:26:27.600
登录这里

01:26:28.160 --> 01:26:29.360
我们这边的就是

01:26:29.360 --> 01:26:30.000
如果总

01:26:30.000 --> 01:26:31.440
我就不管判断你有没有值的

01:26:31.440 --> 01:26:32.960
我只要你是有error

01:26:32.960 --> 01:26:33.840
就表示有错误

01:26:34.560 --> 01:26:35.600
我就给你返回错误

01:26:37.120 --> 01:26:38.000
返回这个错误

01:26:39.280 --> 01:26:40.160
没有错误的话

01:26:40.160 --> 01:26:41.200
那么就没有error

01:26:41.200 --> 01:26:42.400
我就耳拉之登录成功了

01:26:43.040 --> 01:26:44.000
变成这样的逻辑了

01:26:44.000 --> 01:26:45.280
就稍微一个控制一下

01:26:45.680 --> 01:26:46.000
知道吧

01:26:46.000 --> 01:26:47.360
刚才是什么情况了

01:26:47.360 --> 01:26:49.520
刚才就是服务器登录成功的时候

01:26:49.520 --> 01:26:50.640
是一个正常的对象

01:26:50.640 --> 01:26:52.160
登录失败的时候啥都没有

01:26:52.640 --> 01:26:53.520
而客户玩这边

01:26:53.520 --> 01:26:55.360
我不知道他登录有没有成功

01:26:55.360 --> 01:26:57.440
因此如果说他啥都没给我发的话

01:26:57.440 --> 01:26:58.960
我解析接受的时候就解析失败了

01:26:58.960 --> 01:27:00.000
就在这里解析失败了

01:27:00.480 --> 01:27:02.800
所以说我要保证服务器给他的一定是一个

01:27:02.800 --> 01:27:04.160
正常的接受格式

01:27:04.640 --> 01:27:06.080
那就稍微调整一下就完事了

01:27:07.120 --> 01:27:09.440
现在再来登录失败

01:27:09.440 --> 01:27:10.880
看一下登录失败的情况

01:27:11.920 --> 01:27:12.240
是吧

01:27:12.240 --> 01:27:13.040
刚好密码错误

01:27:13.040 --> 01:27:14.480
那么来登录成功

01:27:14.480 --> 01:27:15.280
成哥

01:27:15.280 --> 01:27:17.040
一二三

01:27:17.040 --> 01:27:18.320
登录成功

01:27:19.600 --> 01:27:20.160
没了

01:27:20.160 --> 01:27:22.000
今天晚上大家只需要下去

01:27:22.000 --> 01:27:24.000
明天只需要下去把这三个函数

01:27:24.000 --> 01:27:25.520
这几个函数写完

01:27:26.400 --> 01:27:27.520
服务器那边写完

01:27:27.520 --> 01:27:27.920
然后呢

01:27:27.920 --> 01:27:28.560
Gate 60

01:27:28.560 --> 01:27:29.200
Rig

01:27:29.200 --> 01:27:29.760
Nokin

01:27:29.760 --> 01:27:30.160
写完

01:27:30.160 --> 01:27:31.040
后面三个留着

01:27:31.040 --> 01:27:32.000
咱们明天写

01:27:33.200 --> 01:27:33.920
没问题了吧

01:27:33.920 --> 01:27:36.080
这就是咱们今天要讲的内容

01:27:36.080 --> 01:27:41.860
怎么了

01:27:41.860 --> 01:27:42.340
有什么问题

01:27:42.340 --> 01:27:43.780
刚才一直没看评论

01:27:43.780 --> 01:27:44.820
有什么问题

01:27:44.820 --> 01:27:48.030
什么呀

01:27:48.030 --> 01:27:49.790
怎么就不给你们留活路啊

01:27:49.790 --> 01:27:51.710
难道说我要把这个

01:27:51.710 --> 01:27:52.670
还是都不当你们写吗

01:27:52.670 --> 01:27:54.350
那你们还学啥呢

01:27:54.350 --> 01:27:54.830
问题是

01:27:54.830 --> 01:27:57.230
你写东西是肯定要写啊

01:27:57.230 --> 01:27:58.430
肯定要去多按炼的

01:27:58.430 --> 01:28:00.750
我已经把绝大部分都给你写完了

01:28:00.750 --> 01:28:01.870
央视不用你写了

01:28:01.870 --> 01:28:04.030
页面完全不用你写了

01:28:04.030 --> 01:28:06.030
你只需要把这个GS补全就行了

01:28:06.030 --> 01:28:06.990
补全就行了

01:28:06.990 --> 01:28:09.150
当然你如果说你有兴趣的话

01:28:09.150 --> 01:28:11.390
可以把GS我的样式把自己全部写一遍

01:28:11.390 --> 01:28:12.510
然后这个比较费时间

01:28:12.510 --> 01:28:13.630
你们学习的

01:28:13.630 --> 01:28:14.110
好了

01:28:14.110 --> 01:28:15.630
那今天就到了

01:28:15.630 --> 01:28:15.790
对吧

01:28:15.790 --> 01:28:17.870
今天应该说是

01:28:17.870 --> 01:28:19.550
内容最丰富的一天了

01:28:19.550 --> 01:28:21.230
而且效果呢也比较丰富

01:28:21.230 --> 01:28:21.550
但是呢

01:28:21.550 --> 01:28:22.350
其实没有那么难

01:28:25.920 --> 01:28:28.160
因为我这个是直播课知道吧

01:28:28.160 --> 01:28:29.040
如果说录播的话

01:28:29.040 --> 01:28:29.600
无所谓了

01:28:29.600 --> 01:28:30.240
我就是录的

01:28:30.240 --> 01:28:31.040
当里面先别看

01:28:31.040 --> 01:28:32.480
但是因为说我是直播课

01:28:32.480 --> 01:28:33.440
如果说我不讲的话

01:28:33.440 --> 01:28:34.800
你后面不知道怎么写的话

01:28:34.800 --> 01:28:35.760
你完全没有参照了

01:28:35.760 --> 01:28:36.960
我就必须要讲的

01:28:36.960 --> 01:28:38.720
所以直播跟录播还是不一样的

01:28:39.680 --> 01:28:40.320
好了

01:28:40.320 --> 01:28:41.120
那现在

01:28:41.120 --> 01:28:41.360
哎

01:28:41.360 --> 01:28:45.020
怎么了

01:28:45.020 --> 01:28:53.650
我看一下啊

01:28:53.650 --> 01:28:54.370
这是

01:28:58.450 --> 01:28:58.770
哎呦

01:28:58.770 --> 01:28:59.410
你这个错误

01:28:59.410 --> 01:29:00.610
要去看日制文件啊

01:29:01.490 --> 01:29:02.770
你要看日制文件

01:29:06.610 --> 01:29:08.770
它是一个接受解析错误

01:29:08.770 --> 01:29:11.970
解析一个解析一个解析一个文件的时候

01:29:11.970 --> 01:29:13.010
接受解析不了

01:29:14.130 --> 01:29:15.410
我建议你关了工程

01:29:15.410 --> 01:29:17.010
F盘好像是一个U盘

01:29:17.010 --> 01:29:18.450
你不要在U盘上弄的

01:29:18.450 --> 01:29:19.490
我建议你换一个

01:29:19.490 --> 01:29:20.370
换一个盘

01:29:20.370 --> 01:29:21.730
第一个换一个盘

01:29:21.730 --> 01:29:22.610
然后呢

01:29:22.610 --> 01:29:24.050
就带你电脑尺放上

01:29:24.050 --> 01:29:25.490
不要在放到U盘上

01:29:25.490 --> 01:29:26.610
U盘上的最后烤走

01:29:26.610 --> 01:29:27.330
可以烤到U盘上

01:29:27.330 --> 01:29:29.010
不要直接放到U盘上说

01:29:29.010 --> 01:29:29.970
在电脑上一个盘

01:29:29.970 --> 01:29:30.930
再去建立一个文件

01:29:30.930 --> 01:29:31.970
再去试一下

01:29:31.970 --> 01:29:33.730
它是有一个文件解析不了

01:29:33.730 --> 01:29:35.250
照看具体的

01:29:35.250 --> 01:29:35.810
具体的问题

01:29:35.810 --> 01:29:37.810
这个文件路径里面没有中文

01:29:38.610 --> 01:29:39.250
没有中文

01:29:40.850 --> 01:29:41.890
就是尺盘吧

01:29:41.890 --> 01:29:43.490
你下来问一下那个打一老师吧

01:29:43.490 --> 01:29:44.530
这个肯定要去看一下

01:29:44.530 --> 01:29:45.650
他这个日制文件才行

01:29:47.330 --> 01:29:47.730
好了

01:29:47.730 --> 01:29:49.170
那我们我今天东西就讲到这了

01:29:49.170 --> 01:29:51.090
接下来我一会儿就把代码给大家发现

