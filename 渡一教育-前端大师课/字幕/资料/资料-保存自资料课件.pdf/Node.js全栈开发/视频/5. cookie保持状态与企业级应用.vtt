WEBVTT

00:00.000 --> 00:07.840
今天咱们讲什么呢 今天咱们讲登陆

00:08.100 --> 00:09.380
登陆

00:09.640 --> 00:10.920
你们叫登陆简单吗

00:11.680 --> 00:15.780
我问一下 我经常讲登陆的时候 特别是公开直播客的时候 都问大家

00:16.300 --> 00:17.060
登陆简单吗

00:18.340 --> 00:19.100
还可以

00:19.360 --> 00:20.140
还可以

00:20.640 --> 00:22.700
实际上登陆是不简单的

00:23.200 --> 00:25.500
我告诉大家 连我都觉得有点复杂

00:26.280 --> 00:27.560
登陆实际上是不简单的

00:27.820 --> 00:29.860
如果说你要把一个登陆的

00:30.260 --> 00:33.960
所有的一些细致末节全部解约好的话真的是不简单的

00:34.460 --> 00:37.540
我们今天只能看到它的其中一部分问题

00:37.800 --> 00:39.340
咱们来说一个登陆的问题

00:39.840 --> 00:41.380
说登陆问题之前呢

00:41.640 --> 00:44.700
我们来先来引出一个更加普遍性的问题

00:45.220 --> 00:48.040
一定要注意 集中注意力 今天的代码很少

00:48.540 --> 00:51.360
代码加起来的话可能就不超过

00:51.620 --> 00:52.380
20行

00:52.640 --> 00:54.180
也20行的代码都不到

00:55.200 --> 00:58.280
但是今天的原力性的东西是特别多

00:58.740 --> 01:00.280
所以因此大家一定要注意听

01:00.540 --> 01:02.580
这些原力性的东西理解过后呢

01:02.840 --> 01:05.400
不仅仅是能够解决登陆场景里边的问题

01:05.660 --> 01:07.460
还能够解决其他场景 各种场景

01:07.700 --> 01:09.500
你都可以用类似的原理去分析

01:10.260 --> 01:13.340
因为咱们学程序其实一定要抓住它的关键点

01:13.600 --> 01:16.920
有些同学呢 我看到前面有同学在评论区里边说

01:17.680 --> 01:21.520
所以原上是讲的为什么跟那个讲的好像有点不一样

01:22.040 --> 01:23.580
是因为我讲课呢

01:23.840 --> 01:27.420
习惯我讲课的同学应该知道我是比较在乎底层原力

01:27.620 --> 01:30.180
以及它的协议标准这一部分的内容

01:30.440 --> 01:33.520
而不是很在乎它的应用层面的东西

01:33.780 --> 01:37.620
应用层面的东西呢是根据标准和原力推到出来的

01:38.880 --> 01:39.400
推到出来的

01:39.660 --> 01:41.960
所以说呢 我们如果说能够掌握原力的话

01:42.220 --> 01:43.760
其实各种场景我们都能掌握了

01:44.020 --> 01:45.680
学程序呢 你不能光去看

01:45.940 --> 01:47.600
有些人觉得学程序是这样子

01:47.860 --> 01:50.400
告诉我 这一代码有什么用 这一代码有什么用

01:50.660 --> 01:51.700
那这个东西没有什么意义

01:51.960 --> 01:53.480
这样子学程序的话是学不出来了

01:53.740 --> 01:55.020
为什么呢 因为这样的学程序的话

01:55.280 --> 01:57.320
你只能记住那几个固定的场景

01:58.060 --> 01:59.820
稍微一变化的话你就不知道该怎么写了

02:00.060 --> 02:01.220
因为没有人告诉你

02:01.460 --> 02:04.020
没有人教过 百对又收不到 就出现问题了

02:04.260 --> 02:05.960
当你掌握了原力之后

02:06.220 --> 02:08.620
你认识到核心概念之后呢 你再去

02:09.160 --> 02:11.420
就可以不用人别人告诉

02:11.660 --> 02:13.320
你自己去推到出来 再怎么去做

02:13.760 --> 02:15.020
我们再首先说一个问题

02:15.260 --> 02:16.060
这个问题很简单

02:17.220 --> 02:18.860
服务器收到了两次请求

02:19.620 --> 02:22.020
你写的一个服务器嘛 漏到接收 Express搭建的

02:22.460 --> 02:23.820
它收到了两次请求

02:24.820 --> 02:25.820
当我们

02:26.060 --> 02:28.120
当收到第二次请求的时候

02:28.380 --> 02:31.220
服务器怎么知道这一次请求

02:32.220 --> 02:35.020
跟之前那次请求是同一个浏览器

02:36.060 --> 02:36.820
懂我这个意思吧

02:37.560 --> 02:39.520
它收到两次请求 第一次请求到达服务器

02:39.760 --> 02:40.920
服务器处理它给它响应的

02:41.180 --> 02:42.920
第二次请求又到达服务器

02:43.680 --> 02:46.120
服务器怎么知道这一次请求

02:47.580 --> 02:49.620
就是之前那次请求的浏览器

02:49.880 --> 02:50.920
是不是同一个浏览器

02:53.930 --> 02:54.730
用token

02:54.990 --> 02:56.530
我们今天要讲的对不对

02:56.730 --> 02:57.330
是不是要讲的

02:57.730 --> 02:59.330
那如果说不用token怎么解决

03:00.930 --> 03:01.930
不用token怎么解决

03:04.640 --> 03:05.940
也是我们今天要讲的

03:06.440 --> 03:07.840
也是我们今天要讲的

03:09.440 --> 03:10.540
那你不用这个东西

03:10.540 --> 03:12.640
谁信他也用到了cookie

03:12.640 --> 03:14.040
对吧 也用到cookie的技术

03:14.840 --> 03:16.440
那如果说没有这些东西的话

03:16.740 --> 03:17.440
那怎么来解决呢

03:17.440 --> 03:19.440
IP 终于说到点了

03:19.540 --> 03:20.040
IP

03:20.740 --> 03:22.740
可以那么服务器首先服务器能不能获取到

03:22.740 --> 03:23.940
扣单请求关的IP呢

03:23.940 --> 03:26.040
就是客户端的IP地址能不能获取到了

03:26.040 --> 03:27.340
实际上是可以获取到的

03:27.840 --> 03:29.640
是可以获取到客户端的IP地址的

03:29.840 --> 03:33.040
但是用IP的话是无法分辨出两次请求

03:33.040 --> 03:34.540
是来自于同一个浏览器

03:34.840 --> 03:35.440
为什么呢

03:35.540 --> 03:39.040
因为目前的IP地址都是家用IP

03:39.140 --> 03:41.640
家用IP的一个特点是动态IP

03:41.640 --> 03:42.440
它会变的

03:42.740 --> 03:43.540
你们不信的话

03:43.540 --> 03:45.840
你们带我在浏览器里面去收一下

03:47.440 --> 03:48.340
等级IP

03:50.510 --> 03:52.510
目前的我的IP地址是这个

03:53.210 --> 03:54.910
你可以去收一下你们的

03:55.010 --> 03:56.410
然后呢收了过后呢

03:56.410 --> 03:58.210
你过两天再去收一下

03:58.410 --> 04:00.010
看一下是不是同一个IP地址

04:00.310 --> 04:01.410
一般来说都会变

04:01.510 --> 04:02.510
它是动态IP

04:02.710 --> 04:04.110
它有可能几个小时变一次

04:04.110 --> 04:05.110
有可能几天变一次

04:05.110 --> 04:06.310
这个东西说不准的

04:06.410 --> 04:07.210
它会变化

04:07.710 --> 04:10.110
那个同学说能不能买一个静态IP呢

04:10.110 --> 04:11.410
静态IP是可以买的

04:11.910 --> 04:13.210
静态IP的比较贵

04:13.710 --> 04:15.610
像你们以后到公司里面去工作的话

04:15.610 --> 04:16.410
公司里边

04:16.410 --> 04:18.110
他如果说是写字楼的话

04:18.210 --> 04:19.810
写字楼里边IP地址

04:19.810 --> 04:21.210
基本上都是静态IP地址

04:21.410 --> 04:22.410
它不会变的

04:22.410 --> 04:23.710
永久都是那个IP地址

04:23.910 --> 04:25.310
但那个东西比较贵了

04:25.510 --> 04:26.810
它可能是家用的

04:26.810 --> 04:29.710
家用的就是费用的几十倍

04:30.010 --> 04:30.710
它就比较贵了

04:30.710 --> 04:32.010
但我们买的没有那么贵

04:32.010 --> 04:32.310
对不对

04:32.310 --> 04:33.510
所以都是动态IP

04:35.620 --> 04:36.620
美国洛杉矶

04:36.620 --> 04:37.420
你在美国吗

04:39.120 --> 04:41.520
那么你可以看到IP字也不能解决

04:41.520 --> 04:43.820
那想来想去好像也没有什么办法解决

04:43.820 --> 04:44.620
那都是为什么呢

04:44.620 --> 04:46.920
因为我们在这里的服务器

04:46.920 --> 04:49.020
你可以把它认为是特别特别的健忘

04:49.920 --> 04:50.420
怎么说呢

04:50.420 --> 04:52.020
就类似于东哥

04:52.020 --> 04:52.420
对不对

04:52.420 --> 04:53.320
有脸盲着

04:53.820 --> 04:55.120
每天早上起来都不知道

04:55.120 --> 04:56.320
身边睡的是谁

04:56.320 --> 04:57.520
有脸盲症的

04:57.820 --> 04:58.620
因此呢

04:59.220 --> 05:00.820
服务器对于每一次请求

05:00.820 --> 05:02.520
它都认为是一次全新的请求

05:02.520 --> 05:04.620
跟之前的请求就没有任何关系

05:05.120 --> 05:06.520
用专业的话来说的话

05:06.520 --> 05:10.220
就是服务器无法保持通信状态

05:10.920 --> 05:13.420
之前的通信状态丢失掉了

05:13.420 --> 05:15.520
它没有办法知道之前是怎么回事

05:15.920 --> 05:16.720
原来意思吧

05:16.820 --> 05:19.320
就每一次请求对服务器都是一个全新的

05:19.820 --> 05:21.320
那么面对这种问题

05:21.320 --> 05:22.320
在登录的时候

05:22.420 --> 05:23.620
就会产生一个问题

05:23.620 --> 05:24.220
什么问题呢

05:24.220 --> 05:25.220
我们来看看

05:25.420 --> 05:27.020
下面有一张使续图

05:27.020 --> 05:28.120
大家看这张使续图

05:30.990 --> 05:31.390
这里呢

05:31.390 --> 05:34.990
我们给大家看到一个就是登录的这么一个场景

05:35.090 --> 05:35.490
首先

05:35.490 --> 05:37.590
浏览器发出一个请求到服务器

05:38.690 --> 05:39.990
现在不要去想代码了

05:40.390 --> 05:41.490
就想这个逻辑

05:41.790 --> 05:43.390
浏览器发出一个请求到服务器

05:43.390 --> 05:44.590
传递了帐号密码登录

05:44.590 --> 05:46.390
我们昨天是不是做过的

05:46.790 --> 05:48.890
然后服务器给我想印了一个结果

05:48.890 --> 05:49.690
叫登录成功

05:49.690 --> 05:51.090
无论他给什么

05:51.090 --> 05:52.790
就告诉我浏览器他登录成功了

05:53.290 --> 05:55.390
浏览器可能过了一天

05:55.390 --> 05:56.390
或者是过了一个小时

05:56.390 --> 05:56.990
过了几分钟

05:56.990 --> 05:58.890
或者是又访问了别的页面

05:59.290 --> 06:00.590
那么别的页面过

06:00.690 --> 06:02.090
访问别的页面的时候呢

06:02.090 --> 06:03.090
浏览器要知道

06:03.090 --> 06:05.190
我之前到底登录成功没有了

06:05.490 --> 06:06.690
到底登录成功了没有了

06:06.690 --> 06:07.990
他要问一下服务器

06:08.190 --> 06:09.890
忽然卖我是谁啊

06:09.990 --> 06:11.390
我到底有没有登录成功了

06:11.690 --> 06:14.590
那么告诉我就像我就像服务器提出要求

06:14.590 --> 06:15.390
就告诉我

06:15.690 --> 06:17.390
我当前登录的用户信息

06:17.390 --> 06:18.790
我当天到底是谁登录的

06:18.790 --> 06:19.690
之前登录过吗

06:19.690 --> 06:20.590
我知道登录过

06:20.590 --> 06:21.390
我问一下

06:21.490 --> 06:23.390
我到底登录的是什么样的信息

06:23.390 --> 06:25.290
我的登录信息用户信息是什么

06:25.590 --> 06:26.790
那么让服务器告诉你

06:26.890 --> 06:28.290
他服务器就不认识他了

06:28.390 --> 06:28.790
是吧

06:28.990 --> 06:29.790
他脸忙着嘛

06:29.790 --> 06:31.190
所以说他不知道你是谁了

06:31.190 --> 06:32.190
他只有余的记忆

06:32.190 --> 06:33.390
只有七秒钟记忆

06:33.390 --> 06:34.990
实际上根本没有七秒钟

06:34.990 --> 06:37.190
一次一事请求响应完成过后

06:37.190 --> 06:38.390
之前的东西就全忘了

06:38.590 --> 06:40.490
所以他就服务器不知道你是谁了

06:40.690 --> 06:42.090
因此在这种情况下面

06:42.090 --> 06:43.390
服务器就搞不定了

06:43.690 --> 06:43.990
是吧

06:43.990 --> 06:45.190
他就遇到这么一个问题

06:45.390 --> 06:46.790
那么这个问题怎么解决呢

06:46.790 --> 06:48.090
给大家提供一个解决思路

06:49.190 --> 06:50.790
现在我讲的这些东西啊

06:50.890 --> 06:52.790
跟口气就没有任何关系

06:53.290 --> 06:54.890
那么这里解决思路是什么呢

06:54.890 --> 06:56.590
就这样就通过这种思路

06:57.790 --> 07:01.690
流烂器登录传递账号传递立马到服务器

07:01.690 --> 07:02.590
跟之前一样

07:02.890 --> 07:04.790
服务器登录成功之后呢

07:05.390 --> 07:06.690
他给他一个响应

07:06.890 --> 07:08.390
把用户id给他

07:08.690 --> 07:10.090
把用户id给他

07:10.590 --> 07:12.490
然后登录成功的是哪个用户呢

07:12.490 --> 07:14.190
那每个用户是一个唯一编号

07:14.190 --> 07:14.490
对不对

07:14.490 --> 07:16.090
咱们数据库里边一个唯一编号

07:16.090 --> 07:18.490
把这个唯一编号给这个流烂器

07:18.690 --> 07:18.890
好

07:18.890 --> 07:20.490
流烂器这边要做一个处理

07:21.590 --> 07:22.490
怎么处理呢

07:22.490 --> 07:24.690
就是他把这个用户id啊

07:24.890 --> 07:26.390
持久的保存下来

07:27.990 --> 07:30.290
流烂器这边如何来持久的保存

07:30.390 --> 07:31.290
一些信息的

07:31.490 --> 07:32.990
如果说你学过atm-5

07:32.990 --> 07:33.990
你可以知道啊

07:33.990 --> 07:34.890
可以使用什么呢

07:34.990 --> 07:35.990
local storage

07:36.290 --> 07:37.190
也可以使用什么呢

07:37.190 --> 07:38.690
也可以使用比较传统的方式

07:38.690 --> 07:39.590
就是用cookie

07:40.490 --> 07:40.990
来保存

07:40.990 --> 07:42.190
以后我们会讲cookie啊

07:42.190 --> 07:43.890
总之不管你有什么方法

07:44.190 --> 07:44.790
流烂器呢

07:44.790 --> 07:46.190
要把这个用户id

07:46.590 --> 07:47.890
长久的保存下来

07:48.190 --> 07:49.790
无论后边流烂器刷新了

07:49.790 --> 07:51.790
多少次这个用户id还在

07:52.690 --> 07:53.290
然后呢

07:53.290 --> 07:54.890
下一次在请求的时候呢

07:54.890 --> 07:56.590
流烂器就问服务器啊

07:56.590 --> 07:57.290
我是谁啊

07:57.390 --> 07:59.890
他就把这个用户id给服务器扔过去

08:00.390 --> 08:02.890
然后服务器由于他是不是可以拿到这个用户id

08:02.890 --> 08:03.690
那怎么扔过去

08:03.690 --> 08:05.390
那扔过去的方式多了去了

08:05.590 --> 08:06.590
你比方说你可以啊

08:06.690 --> 08:08.490
传到地址南参数里边可不可以

08:09.090 --> 08:09.590
可以对吧

08:09.590 --> 08:11.190
放到宽瑞里边是不是可以

08:11.690 --> 08:13.290
可以放到请求头里边是可以

08:13.290 --> 08:13.890
也可以

08:13.890 --> 08:14.890
总之干扔过去

08:15.190 --> 08:17.290
哎服务器这边是不是可以拿到这个数据了

08:17.290 --> 08:18.490
拿到这个用户id了

08:18.490 --> 08:20.890
那么服务器这边就可以根据用户id来查

08:20.990 --> 08:21.290
对不对

08:21.290 --> 08:23.690
服务器不用管之前是什么情况

08:23.790 --> 08:26.890
我只要这一次拿过来的用户id去查去用户信息

08:26.990 --> 08:28.290
然后把查到了用户信息

08:28.490 --> 08:29.490
扔给流烂器

08:29.790 --> 08:30.290
没看到吗

08:30.290 --> 08:32.390
这种方式可以解决这个问题

08:33.490 --> 08:33.990
但是呢

08:33.990 --> 08:35.490
这个方式呢不是很好

08:35.590 --> 08:36.990
为什么说不是很好呢

08:37.890 --> 08:39.390
看上去是可以解决

08:39.690 --> 08:40.690
但是由于呢

08:40.690 --> 08:42.390
用户的id啊这个东西

08:43.090 --> 08:44.690
是名文保存在流烂器的

08:44.690 --> 08:46.290
流烂器你这边保存的就是用户id

08:46.290 --> 08:47.590
比方说用户id是1

08:47.690 --> 08:48.990
那么流烂器保存一个1

08:49.990 --> 08:51.090
由于这种方式呢

08:51.090 --> 08:54.690
可以流烂器这边就可以轻易的去伪造一个

08:55.290 --> 08:56.090
用户的id

08:56.090 --> 08:57.190
是不是可以轻易伪造

08:57.390 --> 08:57.590
对吧

08:57.590 --> 08:59.490
因为它保存了用户端的对不对

08:59.590 --> 09:01.590
服务器是我们开发者编写的

09:01.790 --> 09:03.890
但是流烂器在用户那一端

09:04.090 --> 09:06.390
那用户那一端流烂器他用了什么方式

09:06.790 --> 09:08.290
保存的你根本就不知道

09:08.390 --> 09:08.890
对不对

09:09.090 --> 09:10.490
甚至他都不用保存

09:10.590 --> 09:11.390
我哪能保存呢

09:11.390 --> 09:12.590
我下一次发请求的时候

09:12.590 --> 09:13.790
我就直接给你发过来

09:13.890 --> 09:15.990
随便给他伪造一个用户id发过来

09:16.090 --> 09:16.990
那么这样子呢

09:17.090 --> 09:18.190
就会造成

09:18.790 --> 09:20.690
用户虽然说没有登录

09:20.690 --> 09:23.290
但是他可以伪造一个登录的状态

09:23.290 --> 09:24.190
看下面的张图

09:25.090 --> 09:27.390
流烂器根本就之前就根本就没有登录过

09:27.390 --> 09:27.690
但是呢

09:27.690 --> 09:29.490
他只是已经伪造了一个用户id

09:29.590 --> 09:30.490
然后发请求的时候

09:30.490 --> 09:32.290
他就会把这个用户id发过来

09:32.390 --> 09:33.190
然后服务器是不是

09:33.290 --> 09:35.490
服务器根本就不知道这个用户id是伪造的

09:35.490 --> 09:36.090
因此呢

09:36.090 --> 09:37.690
他就会根据这个用户id

09:37.690 --> 09:38.690
去查询用户息息

09:38.690 --> 09:39.390
到结果

09:39.790 --> 09:40.490
那么这样子呢

09:40.490 --> 09:42.490
就会召开登录来进入服务器

09:42.790 --> 09:44.090
进入一个登录状态

09:44.490 --> 09:45.290
那么这种情况呢

09:45.290 --> 09:46.890
我们肯定是不希望看到的

09:47.090 --> 09:47.490
于是呢

09:47.490 --> 09:48.690
我们又想了办法了

09:48.990 --> 09:49.890
想什么办法呢

09:49.990 --> 09:50.490
加密

09:51.190 --> 09:51.690
加密

09:52.390 --> 09:53.190
见了你们再看

09:53.590 --> 09:54.490
下面这种流程图

09:54.590 --> 09:55.390
下面这个流程呢

09:55.390 --> 09:56.990
就是我们加密过后

09:56.990 --> 09:58.090
再来完成这件事

09:58.090 --> 09:59.790
你会发现的问题又解约了

10:00.290 --> 10:01.190
怎么来做呢

10:01.590 --> 10:02.490
流烂器还是一样

10:02.490 --> 10:03.290
登录的时候呢

10:03.290 --> 10:04.190
传递张号密码

10:04.490 --> 10:05.790
服务器这边登录成功了

10:06.190 --> 10:07.390
登录成功过后呢

10:07.390 --> 10:08.690
他用一个施药

10:08.690 --> 10:10.290
叫做对称加密

10:10.590 --> 10:12.590
叫做那个

10:14.590 --> 10:16.190
不应该说是施药

10:16.290 --> 10:17.290
应该说是密药

10:20.160 --> 10:20.660
密药

10:25.080 --> 10:26.280
叫做对称加密

10:26.280 --> 10:26.780
什么意思呢

10:26.780 --> 10:28.180
就是说用一个密药

10:28.180 --> 10:29.380
经过一段刷法

10:29.380 --> 10:29.780
这个刷法

10:29.780 --> 10:30.880
你们不用拒写

10:30.880 --> 10:31.880
你们不用拒写

10:31.880 --> 10:33.080
就根据一个制服串

10:33.080 --> 10:34.180
作为一个密药

10:34.180 --> 10:34.680
然后呢

10:34.680 --> 10:35.880
去加密一个东西

10:35.880 --> 10:37.380
就得到另外一个制服串

10:37.680 --> 10:38.580
解密的时候呢

10:38.580 --> 10:40.480
也要用这个密药来进行解密

10:40.480 --> 10:40.980
什么意思呢

10:40.980 --> 10:42.580
我再来这样子来写吧

10:43.680 --> 10:44.880
就是一个密药

10:46.480 --> 10:48.380
加上一个你要加密的制服串

10:49.780 --> 10:50.880
原式制服串

10:52.180 --> 10:53.780
然后经过一个刷法

10:53.780 --> 10:54.180
对吧

10:54.180 --> 10:55.380
经过一个加密刷法

10:56.980 --> 10:58.380
那么就等于密纹

10:59.180 --> 11:00.580
就加密过后的制服串

11:00.880 --> 11:01.380
然后呢

11:01.380 --> 11:02.380
解都是加密

11:02.680 --> 11:03.680
整个过程是加密

11:05.380 --> 11:06.880
另外一个解密呢

11:07.880 --> 11:09.680
是把密纹拿到

11:09.980 --> 11:10.780
然后呢

11:10.980 --> 11:12.580
使用解密刷法

11:13.980 --> 11:15.380
跟加密刷法是对应的

11:15.380 --> 11:16.380
解密刷法

11:16.880 --> 11:17.480
然后呢

11:17.480 --> 11:18.780
根据密密药

11:19.780 --> 11:22.580
就可以解密出原式制服串

11:22.880 --> 11:23.680
明白的意思吗

11:23.980 --> 11:25.380
这就是加密解密的过程

11:25.380 --> 11:26.380
所以说加密的时候呢

11:26.380 --> 11:27.280
刷法你不用管

11:27.280 --> 11:28.380
他别人以后呢

11:28.380 --> 11:30.280
我们会用一些银鞋好的东西

11:30.280 --> 11:30.980
来进行加密

11:30.980 --> 11:31.680
你都不用管

11:31.980 --> 11:32.680
原式制服串呢

11:32.680 --> 11:33.880
就是你要加密什么东西

11:33.880 --> 11:34.780
比方用户ID

11:35.080 --> 11:36.680
密药的随便指定一个制服串

11:36.680 --> 11:37.380
作为密药

11:37.380 --> 11:37.980
然后这里

11:37.980 --> 11:39.780
我们使用ABC来作为密药

11:39.780 --> 11:41.580
来加密用户的ID

11:41.580 --> 11:42.380
得到一个什么

11:42.380 --> 11:43.880
得到一个加密过后的制服串

11:43.880 --> 11:45.080
我们把它叫做令牌

11:45.780 --> 11:47.280
令牌只是一个教法而已

11:48.280 --> 11:49.480
那么这个令牌

11:49.480 --> 11:51.380
其实就是一个加密过后的制服串

11:51.380 --> 11:53.080
我们把这个加密过后的制服串

11:53.080 --> 11:54.480
想应给谁呢

11:54.480 --> 11:55.780
想应给流烂器

11:56.080 --> 11:57.880
给他就不是用户ID了

11:57.880 --> 11:59.280
是一个加密过后的用户ID

11:59.280 --> 11:59.480
对吧

11:59.480 --> 12:00.280
你可以这样理解

12:00.680 --> 12:03.080
流烂器这边还是按照一样的流程

12:03.080 --> 12:04.880
然后持久的保存token

12:04.880 --> 12:07.080
无论是保存在哪都行

12:07.080 --> 12:08.480
只要你能够持久保存

12:08.480 --> 12:09.280
把token给你

12:09.880 --> 12:10.980
然后呢

12:10.980 --> 12:12.480
后续请求的时候

12:12.480 --> 12:13.680
流烂器再去请求

12:13.680 --> 12:14.380
我是谁呢

12:14.380 --> 12:16.680
我就把我这个加密过后的token发给你

12:17.080 --> 12:18.980
然后服务器那边是不是可以减密

12:18.980 --> 12:19.280
对吧

12:19.280 --> 12:20.280
密要在服务器上

12:20.580 --> 12:22.280
abc用abc来进行减密

12:22.280 --> 12:22.980
只要密要

12:26.470 --> 12:28.570
用abc来减密服务

12:28.570 --> 12:29.470
减密这个token

12:29.870 --> 12:30.070
好

12:30.070 --> 12:30.770
减密过后了

12:30.770 --> 12:31.870
是不是可以拿到用户ID的

12:31.870 --> 12:32.070
对吧

12:32.070 --> 12:33.070
拿到原式内容了

12:33.070 --> 12:34.270
那么根据这个用户ID

12:34.270 --> 12:35.170
查讯用户信息

12:35.170 --> 12:36.070
然后得到这个结果

12:36.370 --> 12:38.670
那么这样的方式能不能被伪造呢

12:39.670 --> 12:40.070
这样的话

12:40.070 --> 12:41.070
他就不能伪造了

12:41.270 --> 12:42.470
为什么不能伪造呢

12:42.470 --> 12:44.470
你想再看这种情况

12:44.670 --> 12:46.970
如果说我现在再要想伪造一个用户ID

12:46.970 --> 12:47.670
行不行

12:47.670 --> 12:50.070
因为我传递的根本就不是用户ID

12:50.470 --> 12:51.270
传递的是一个什么了

12:51.270 --> 12:53.470
传递的是一个加密过后的制服串

12:53.570 --> 12:56.070
所以说你这里不能直接写个用户ID

12:56.170 --> 12:56.870
那伪造什么呢

12:56.870 --> 12:57.870
那我也加密呗

12:57.870 --> 12:59.370
我把这个用户ID也加密呗

12:59.370 --> 12:59.870
但是呢

12:59.870 --> 13:02.270
由于你不知道密要是什么

13:02.770 --> 13:04.070
密要是不是在服务器上

13:04.170 --> 13:05.170
由于浏览器这一端

13:05.170 --> 13:06.570
他不知道密要是什么

13:06.670 --> 13:07.270
所以说呢

13:07.270 --> 13:09.270
他无法去伪造这么一个token

13:09.470 --> 13:11.270
然后如果说你随便写个密要加密过后

13:11.270 --> 13:11.770
发过去

13:11.770 --> 13:13.770
那么服务器用这个密要去解不开

13:13.770 --> 13:15.170
解不开去认为是无效的

13:15.670 --> 13:16.270
原来的意思吧

13:16.270 --> 13:17.870
这就是整个这个流程

13:17.870 --> 13:19.270
所以说token是什么呀

13:20.070 --> 13:20.970
硬牌是什么

13:20.970 --> 13:25.970
硬牌就是一个无法伪造的身份信息

13:26.270 --> 13:27.670
这就是硬牌的本质

13:29.470 --> 13:31.770
你们不是有些同学不知道硬牌是什么含义吗

13:31.770 --> 13:35.770
硬牌就其实就是一个无法被伪造的用户信息

13:35.770 --> 13:36.870
他跟cookie有没有关系

13:36.870 --> 13:38.070
没有一毛钱关系

13:39.070 --> 13:41.570
他跟那个什么locustority没什么关系

13:41.570 --> 13:42.570
没有任何关系

13:42.670 --> 13:43.870
他跟请求头又没什么关系

13:43.870 --> 13:44.770
没有任何关系

13:44.870 --> 13:47.270
他就是一个无法被伪造的身份信息

13:47.870 --> 13:49.170
一般来说这个token

13:49.170 --> 13:51.870
他会在浏览器和夫妻之间来回的传递

13:51.970 --> 13:52.970
就像这个模式

13:52.970 --> 13:54.770
所以看一个东西要看他的本质

13:55.870 --> 13:57.470
那么接下来我们再来说cookie

13:58.170 --> 14:00.170
把这个整个流程认识清楚了过后

14:00.170 --> 14:01.370
我们再来说这个cookie

14:01.370 --> 14:02.770
cookie到底是什么呢

14:02.770 --> 14:07.170
cookie只是用来持久保存的一种方式

14:07.870 --> 14:09.870
我们这里不是要持久的保存一些东西吗

14:10.270 --> 14:11.970
我们这里不是要持久的保存一些东西吗

14:11.970 --> 14:14.570
那么这个地方可以有多种方式

14:14.670 --> 14:15.970
比如说locustority

14:16.670 --> 14:17.670
session storage

14:17.670 --> 14:18.970
这些都可以持久的保存

14:19.070 --> 14:21.470
那么其中一种方式呢就是cookie

14:22.170 --> 14:22.970
没有意思吧

14:23.070 --> 14:24.570
这就是cookie的含义

14:24.570 --> 14:28.070
他的作用就是能够持久的保存

14:29.370 --> 14:30.370
接下来我们来看

14:30.370 --> 14:31.570
cookie到底是什么玩意

14:31.770 --> 14:32.970
cookie实际上呢

14:32.970 --> 14:35.170
他在浏览器里面是一个

14:35.270 --> 14:36.370
就是一些小文件

14:36.770 --> 14:38.470
我们把它叫做小点心的

14:38.470 --> 14:40.170
一些小文件其辅助作用的

14:40.270 --> 14:42.370
他可以持久的保存一些小的数据

14:42.370 --> 14:43.870
他的数据量是很有限的

14:44.370 --> 14:45.470
他能保存的东西实际

14:45.470 --> 14:46.570
信息是很有限的

14:46.770 --> 14:48.070
那么他用通常呢

14:48.070 --> 14:49.370
我们可以用他来保存头肯

14:49.370 --> 14:50.570
就来保存印牌

14:50.670 --> 14:51.370
当然也可以用

14:51.370 --> 14:52.870
可不可以用别的方式来保存印牌

14:52.870 --> 14:53.970
可以可以

14:53.970 --> 14:55.370
可以用任何方式来保存印牌

14:55.970 --> 14:57.270
我们的浏览器里面呢

14:57.270 --> 14:58.570
可以存处多个cookie

14:58.670 --> 15:00.070
每一个cookie里面呢

15:00.070 --> 15:01.470
他包含了很多信息

15:01.670 --> 15:02.470
你可以认为呢

15:02.470 --> 15:04.270
cookie就有点类似有一个对象

15:04.270 --> 15:05.570
他里面包含很多信息

15:05.770 --> 15:06.870
那包含什么信息呢

15:06.870 --> 15:07.970
一个叫做key

15:08.270 --> 15:09.270
一个叫做value

15:09.470 --> 15:10.170
见对吗

15:10.770 --> 15:11.770
一个cookie里面

15:11.770 --> 15:12.770
他保存的信息呢

15:12.770 --> 15:14.970
就是比方说见为a

15:14.970 --> 15:15.670
只为1

15:15.670 --> 15:16.870
见为User ID

15:16.870 --> 15:18.170
只为123

15:18.170 --> 15:19.370
见为什么token

15:19.370 --> 15:20.370
只为啥啥啥啥

15:20.370 --> 15:20.570
对吧

15:20.570 --> 15:21.470
就是一个建置队

15:21.970 --> 15:23.370
我们以后就可以看到更清楚了

15:23.970 --> 15:24.370
然后呢

15:24.370 --> 15:25.170
还有个信息就是

15:25.170 --> 15:26.870
每一个cookie里面

15:27.170 --> 15:28.270
都有这些信息

15:28.270 --> 15:29.270
语是什么意思呢

15:29.270 --> 15:30.070
表示域名

15:30.870 --> 15:32.470
他表达了这个cookie呢

15:32.470 --> 15:34.170
是属于哪一个网站的

15:34.870 --> 15:36.070
是属于哪一个网站的

15:36.070 --> 15:36.870
比方说我们

15:36.870 --> 15:37.270
语

15:37.670 --> 15:38.970
那个cookie的对面

15:38.970 --> 15:40.170
语是对于

15:40.270 --> 15:40.770
表q

15:40.770 --> 15:42.210
误表

15:42.210 --> 15:43.070
那么表示这个cookie呢

15:43.070 --> 15:44.370
是属于这个网站的

15:44.570 --> 15:45.970
就表达这么一些信息

15:46.170 --> 15:46.570
还有一个

15:46.570 --> 15:46.970
还有一个东西呢

15:46.970 --> 15:48.370
叫pass路径

15:48.670 --> 15:49.970
那么他表示的是

15:49.970 --> 15:50.570
这个cookie呢

15:50.570 --> 15:52.070
是属于哪这个网站的

15:52.070 --> 15:53.570
哪个基路径的

15:53.570 --> 15:54.970
比方说鞋杠六四

15:55.070 --> 15:55.970
那么这些总之呢

15:55.970 --> 15:56.570
你要知道

15:56.570 --> 15:57.770
cookie里面他包含了

15:57.770 --> 15:59.070
包含了一些信息

15:59.070 --> 15:59.670
这些信息呢

15:59.670 --> 16:01.170
我们一会儿就会有用

16:01.570 --> 16:03.070
最关键的信息就是建置队

16:03.970 --> 16:04.670
他的建置什么

16:04.670 --> 16:05.270
直视什么

16:05.270 --> 16:06.670
那么还有一些其他的信息

16:06.670 --> 16:07.570
什么dome

16:07.570 --> 16:08.570
pass路径

16:08.570 --> 16:09.370
我们一会儿会想起

16:09.370 --> 16:10.470
看到这些东西有什么用

16:11.470 --> 16:13.570
secure表示是否安全传输

16:13.570 --> 16:15.470
他跟这个atbs协议有关

16:15.470 --> 16:16.870
咱们后期课里边有讲这个协议

16:16.870 --> 16:18.470
但是我们本文不涉及

16:18.870 --> 16:20.570
expire表示过期时间

16:20.770 --> 16:22.070
表示个cookie在什么时候过期

16:22.070 --> 16:22.770
等等等等

16:22.770 --> 16:24.470
一个cookie里面他包含这么一些信息

16:25.270 --> 16:25.470
好

16:25.470 --> 16:26.770
接下来我们来一个个看啊

16:26.770 --> 16:29.170
这些总之你现在只要模糊的知道

16:29.170 --> 16:30.370
一个cookie里面有很多信息

16:30.370 --> 16:30.870
这些信息呢

16:30.870 --> 16:31.970
以后我们会详细讲

16:32.570 --> 16:32.770
好

16:32.770 --> 16:33.270
第一个

16:33.870 --> 16:34.970
cookie从哪来的

16:35.570 --> 16:36.570
就设置cookie

16:37.170 --> 16:38.170
从哪来的呢

16:38.270 --> 16:39.170
一般来说

16:39.170 --> 16:41.270
cookie来自于服务器的响应

16:42.370 --> 16:43.270
cookie怎么来的呢

16:43.270 --> 16:45.570
cookie往往是从服务器给他颁发的

16:46.770 --> 16:47.870
就从就在这里

16:47.870 --> 16:49.170
比较说我这登成功了

16:49.170 --> 16:49.970
我给他一个token

16:49.970 --> 16:51.370
那么我可以把这个token的

16:51.670 --> 16:53.670
给他颁发到浏览器的cookie里面去

16:53.770 --> 16:54.670
那怎么来颁发呢

16:54.670 --> 16:55.570
他这样逻辑

16:56.770 --> 16:57.970
看一下设置cookie

16:58.570 --> 17:00.770
当服务器来响应浏览器的时候

17:01.370 --> 17:02.970
他可以在消息头里边

17:02.970 --> 17:04.170
还知道什么叫消息头吗

17:04.370 --> 17:05.670
我们无论是请

17:05.870 --> 17:07.170
无论是请求也好

17:07.170 --> 17:08.270
还是想用也好

17:08.370 --> 17:09.970
他都有一个消息头消息体

17:09.970 --> 17:10.470
对不对

17:10.470 --> 17:12.070
消息头里边是不是有很多建置位

17:12.370 --> 17:13.370
那么在消息头里边

17:13.370 --> 17:15.970
他可以添加一个特殊的资料叫setcookie

17:17.070 --> 17:18.770
如果说这个东西

17:18.870 --> 17:19.970
交给浏览器过后

17:19.970 --> 17:21.970
浏览器发现了响应头里边

17:21.970 --> 17:23.270
他包含了setcookie

17:23.570 --> 17:25.670
他就会自动的给你他的职

17:25.670 --> 17:26.370
来设置cookie

17:26.370 --> 17:27.070
什么意思

17:27.870 --> 17:29.070
就在这看这啊

17:29.470 --> 17:31.070
服务器登成功之后

17:31.070 --> 17:32.170
服务器给他一个响应

17:32.170 --> 17:32.670
对不对

17:32.670 --> 17:33.870
给他响应的时候

17:33.870 --> 17:35.470
我在响应头里边

17:35.470 --> 17:37.170
给他加一个setcookie

17:38.070 --> 17:39.670
那么浏览到了浏览器过后

17:39.670 --> 17:40.470
浏览器一看

17:40.470 --> 17:43.270
服务器给我响应头里边有了一个setcookie

17:43.270 --> 17:45.970
他就会自动的把这个信息保存下来

17:46.170 --> 17:49.070
你都不用去写任何的手动代码

17:49.070 --> 17:50.270
他会自动的保存下来

17:50.270 --> 17:51.870
你要控制的无非就是

17:51.970 --> 17:53.070
在服务器端

17:53.170 --> 17:55.870
如何把这个信息放到响应头里边

17:56.070 --> 17:57.370
这是你要控制的

17:57.370 --> 17:58.810
浏览器怎么把它放到

17:58.810 --> 17:59.370
cookie里边

17:59.370 --> 18:00.470
那是他自动完成的

18:00.470 --> 18:00.670
好

18:00.670 --> 18:02.270
咱们来看一下这个响应头的格式

18:04.170 --> 18:05.770
比方说服务器的响应头中

18:05.770 --> 18:07.670
包含下面的信息setcookie

18:08.270 --> 18:09.270
a等于1

18:09.270 --> 18:10.770
dome等于这个localhost

18:10.770 --> 18:11.870
inspire等于这个东西

18:11.870 --> 18:12.570
这个东西是啊

18:12.570 --> 18:15.270
这个东西是格林威制时间

18:15.470 --> 18:16.770
就是本出子物县

18:16.770 --> 18:17.470
英国本

18:18.070 --> 18:20.270
英国那个格林威制式

18:20.370 --> 18:21.370
他的所在地

18:21.370 --> 18:22.170
他的时间

18:22.570 --> 18:23.970
就这个标准格式

18:23.970 --> 18:25.070
那么表示的什么意思呢

18:25.070 --> 18:26.970
表上我要高速浏览器

18:26.970 --> 18:29.470
我要在里那里加一个cookie

18:29.470 --> 18:30.970
他的名字是a

18:30.970 --> 18:32.170
他的键是a

18:32.170 --> 18:32.970
纸呢

18:32.970 --> 18:33.770
是1

18:34.070 --> 18:34.770
鱼呢

18:34.770 --> 18:35.570
snakehost

18:35.970 --> 18:36.970
过期时间呢

18:36.970 --> 18:37.970
是格林威制时间

18:37.970 --> 18:39.770
2020年5月29号这个时间

18:39.770 --> 18:40.270
对吧

18:40.270 --> 18:42.070
那么如果说换成北京时间的话

18:42.070 --> 18:43.170
是不是要加8个小时

18:43.170 --> 18:43.570
对不对

18:43.970 --> 18:45.370
那么设置cookie的玩

18:45.370 --> 18:46.470
这是一个例子啊

18:46.470 --> 18:47.770
他其他的完整格式

18:47.770 --> 18:48.870
那是下面的格式

18:48.970 --> 18:49.470
键

18:49.770 --> 18:50.270
纸

18:51.170 --> 18:51.770
pest

18:52.170 --> 18:52.470
啊

18:52.470 --> 18:53.070
但是个顺序呢

18:53.070 --> 18:54.170
不一定是这个顺序啊

18:54.170 --> 18:55.170
顺序可以随便写

18:55.170 --> 18:56.870
pest等于啥啥啥啥

18:57.070 --> 18:57.870
dome

18:58.070 --> 18:58.970
等于啥啥啥

18:59.170 --> 19:01.170
inspire过期时间等于啥

19:01.170 --> 19:02.570
max age

19:03.070 --> 19:04.670
相对过期时间等于啥

19:04.670 --> 19:05.370
secure

19:05.970 --> 19:06.870
atp only

19:07.270 --> 19:08.870
那么那么这些东西到底是什么意思呢

19:08.870 --> 19:09.770
我们一个一个来说

19:09.770 --> 19:10.770
坚持队不用说了啊

19:10.770 --> 19:11.670
坚持队不用说了

19:11.870 --> 19:12.670
好pest

19:12.970 --> 19:13.970
这个东西表示什么意思呢

19:13.970 --> 19:16.070
表示的是设置cookie的路径

19:16.370 --> 19:17.870
如果说不设置

19:18.370 --> 19:19.370
如果说不设置

19:19.370 --> 19:20.270
他有默认值

19:20.670 --> 19:22.170
那么浏览器会将

19:22.870 --> 19:26.170
是将其自动设置为当前请求的级路径

19:26.170 --> 19:26.870
什么意思

19:26.870 --> 19:29.070
就是如果说浏览器请求的路径

19:29.070 --> 19:29.870
是这个路径

19:30.870 --> 19:34.170
服务器响应了一个setcookie等于其他啥都没写了

19:34.570 --> 19:37.670
那么浏览器会将该cookie的pest设置为

19:37.670 --> 19:39.070
鞋杠API游热

19:39.070 --> 19:39.370
对吧

19:39.370 --> 19:40.770
他会把它设置为这个地址

19:40.970 --> 19:41.670
这个地址

19:41.970 --> 19:42.970
你看一下对比一下

19:43.070 --> 19:44.070
你就明白什么意思了

19:44.470 --> 19:45.770
浏览器请求的是他

19:45.770 --> 19:47.470
那么他的响应里面有cookie

19:47.470 --> 19:49.270
那么浏览器会把这个cookie的pest呢

19:49.270 --> 19:51.770
如果说他响应的cookie里面没有设置pest

19:51.770 --> 19:53.970
那么浏览器会把它pest设置为这个东西

19:55.770 --> 19:56.970
对比一下就明白了啊

19:57.270 --> 19:59.170
我们把这个说完说完了有道题啊

19:59.370 --> 20:00.570
第二个do may

20:00.970 --> 20:01.470
欲

20:02.070 --> 20:02.970
我们关键说一下

20:02.970 --> 20:04.470
如果说当然你设置了过后了

20:04.470 --> 20:05.670
他就按照你设置的来

20:05.670 --> 20:07.070
如果说你没有设置的话

20:07.070 --> 20:08.070
他就有默认值的

20:08.070 --> 20:09.270
如果说你不设置

20:09.370 --> 20:12.070
浏览器会自动讲解设置为当前的请求欲

20:12.070 --> 20:12.670
比方说

20:12.770 --> 20:13.970
浏览器请求的地址呢

20:13.970 --> 20:14.670
是这个地址

20:15.070 --> 20:16.370
比方说他请求的是这个地址

20:17.970 --> 20:18.570
服务器呢

20:18.570 --> 20:19.970
响应了一个setcookie

20:20.270 --> 20:21.170
除了现在对之外

20:21.170 --> 20:22.070
其他啥都没写

20:22.670 --> 20:24.270
然后浏览器他会认为

20:24.270 --> 20:25.370
这个cookie的do may呢

20:25.370 --> 20:25.970
他有个默认值

20:25.970 --> 20:27.070
因为你没写吗

20:27.170 --> 20:28.270
因此他认为他个do may呢

20:28.270 --> 20:29.570
就是当前的请求欲

20:29.970 --> 20:31.370
独一喝点喝点喝点喝

20:31.870 --> 20:32.470
没了意思吧

20:32.770 --> 20:34.270
那么这里呢有几个注意的点

20:34.470 --> 20:35.070
这些地方呢

20:35.070 --> 20:36.670
如果说你在面试的时候

20:36.670 --> 20:37.870
比试的特别是比试的时候

20:37.870 --> 20:39.370
他可以考虑一些细节的话

20:39.370 --> 20:40.770
他会尽量回答来考虑

20:40.770 --> 20:42.670
这都是都是协议

20:43.070 --> 20:44.270
这点的值得注意的是

20:44.270 --> 20:46.370
服务器响应了一个无销的欲

20:46.370 --> 20:47.570
浏览器是不认的

20:47.670 --> 20:48.670
咋叫无销的欲呢

20:49.070 --> 20:50.470
就是响应的欲

20:50.470 --> 20:51.670
连根欲都不一样

20:51.670 --> 20:52.370
比方说

20:52.770 --> 20:53.970
浏览器请求的欲呢

20:53.970 --> 20:54.670
是这个欲

20:55.670 --> 20:57.270
服务器响应的Cookie呢

20:57.270 --> 20:58.070
是这个Cookie

20:59.070 --> 20:59.870
你看一下

21:00.670 --> 21:02.870
我去请求这个服务器的时候

21:02.870 --> 21:05.870
服务器让我去设置另外一个欲的Cookie

21:06.770 --> 21:07.270
这样的欲

21:07.270 --> 21:09.070
浏览器可是肯定不能认的

21:09.270 --> 21:10.470
你想一想如果说

21:10.870 --> 21:12.670
浏览器连这个东西都要认的话

21:12.670 --> 21:13.570
有多危险

21:14.270 --> 21:15.670
你访问我的网站

21:15.670 --> 21:18.370
我可以把你别的网站的Cookie给你改了

21:18.670 --> 21:19.570
是不是很危险的

21:19.570 --> 21:20.770
说说你浏览器呢

21:20.770 --> 21:21.770
是不认认这种

21:21.770 --> 21:23.170
这种操作是非常危险的

21:23.170 --> 21:25.470
他不认为可以允许你这样做

21:26.070 --> 21:27.270
但是那你可以怎么写呢

21:27.270 --> 21:29.070
你可以设置为这个欲是没问题的

21:29.270 --> 21:30.770
因为他认为都是你自己的

21:30.870 --> 21:32.370
都是你自己的欲迷

21:32.370 --> 21:34.070
所以他认为这样子是没问题的

21:34.070 --> 21:36.170
但是你不能设置到设置为别的欲

21:36.170 --> 21:36.770
没什么意思

21:37.570 --> 21:38.470
这是Domain

21:39.070 --> 21:40.370
下面这个Inspire

21:41.270 --> 21:42.170
过去时间

21:42.970 --> 21:45.970
这里必须是一个有效的隔离威致时间

21:45.970 --> 21:47.570
比方说像这种格式

21:47.570 --> 21:48.170
12岁

21:48.170 --> 21:51.070
这是应该是星期四

21:51.070 --> 21:51.970
星期四

21:52.770 --> 21:55.770
那么这里29号5月29号2020年

21:55.770 --> 21:57.170
这是隔离威致时间

21:57.570 --> 21:59.270
那么北京时间加8个小时

21:59.470 --> 22:02.870
如果说Inspire日期你没有设置

22:03.570 --> 22:04.070
那么

22:04.770 --> 22:06.070
如果说你没有设置的话

22:06.070 --> 22:08.670
就意味着他绘画结束后过期

22:08.670 --> 22:09.670
我们一会会说

22:10.170 --> 22:12.770
如果说客户端就浏览器那边

22:12.770 --> 22:14.770
时间到了这个时间点之后呢

22:14.770 --> 22:15.770
这个Cookie就会过期

22:15.770 --> 22:17.470
始终脑袋里面一定要有印象

22:17.470 --> 22:18.570
Cookie是保存了

22:18.570 --> 22:19.770
是保存了浏览器端的

22:20.770 --> 22:24.770
这是Inspire表示绝对过期时间

22:24.770 --> 22:26.370
设置个时间点到了这个点过后

22:26.370 --> 22:27.270
Cookie就过期了

22:27.770 --> 22:29.170
然后下一个Max Age

22:29.170 --> 22:30.870
它是一个相对有效期

22:30.870 --> 22:31.470
啥意思呢

22:34.470 --> 22:35.770
Inspire Max Age

22:35.770 --> 22:37.670
这两个东西我们设置一个就可以了

22:37.670 --> 22:38.970
因为都是跟过期相关

22:38.970 --> 22:40.170
所以设置一个就可以了

22:40.570 --> 22:43.770
比如说我们在Max Age里边把它设为1000

22:43.770 --> 22:44.470
表示什么意思呢

22:44.470 --> 22:46.270
那么浏览器添加Cookie的时候

22:46.270 --> 22:48.870
它就会自动的把它的过期时间

22:48.870 --> 22:51.870
就是Inspire设置为当前时间

22:51.870 --> 22:54.370
加上1000秒作为过期时间

22:54.370 --> 22:55.370
它就这么个意思

22:55.570 --> 22:56.370
这是Max Age

22:56.370 --> 22:57.770
它表示它单位是秒

22:58.570 --> 23:00.670
如果说你G没有设置Inspire

23:00.670 --> 23:02.570
也没有设置Max Age

23:02.770 --> 23:04.570
是不是过期时间都没有设置

23:04.570 --> 23:06.070
那么就表示这个Cookie呢

23:06.070 --> 23:08.370
在绘画结束过后过期

23:09.170 --> 23:10.970
对于大部分的浏览器而言

23:10.970 --> 23:11.970
什么叫绘画结束

23:11.970 --> 23:14.170
就是你把浏览器的所有双口关完了

23:14.570 --> 23:15.970
就表示绘画结束了

23:15.970 --> 23:17.570
你没有关系的绘画就没有结束

23:17.870 --> 23:18.770
就这么个意思

23:18.970 --> 23:19.870
这过期时间

23:20.070 --> 23:21.770
下面这两个让我们看一下就行了

23:21.770 --> 23:23.570
跟我们今天的也没有多少关系

23:23.870 --> 23:26.570
Secure表示是否是安全连接

23:26.670 --> 23:28.070
如果说设置这个值的话

23:28.070 --> 23:29.270
这个Cookie后续

23:29.270 --> 23:31.470
它只能随着ATPS请求发送

23:31.470 --> 23:32.170
什么意思

23:32.270 --> 23:32.870
就在这里

23:33.570 --> 23:35.570
后续我们不是要把这个东西发送过去吗

23:35.570 --> 23:36.070
对吧

23:36.170 --> 23:37.770
那么如果说你这个Cookie

23:37.770 --> 23:38.970
之前在设置的时候

23:38.970 --> 23:40.570
在响应的时候设置的时候

23:40.770 --> 23:42.570
你该设置的是Secure

23:42.670 --> 23:44.070
那么后续要发送的话

23:44.070 --> 23:45.170
它潜力条件就是

23:45.170 --> 23:47.970
它必须要是一个ATPS协议

23:48.270 --> 23:50.370
就不能是纯粹的ATPS协议了

23:50.970 --> 23:51.970
这是Secure

23:52.570 --> 23:54.170
下一个是ATPS only

23:54.170 --> 23:54.970
什么意思呢

23:54.970 --> 23:55.770
它表示说

23:55.770 --> 23:58.170
这个Cookie是否能够用于传输

23:58.370 --> 23:59.770
如果说设置了这个值的话

23:59.770 --> 24:00.670
那么这个Cookie

24:00.670 --> 24:01.670
它只能用于传输

24:01.670 --> 24:04.170
不允许客户端通过介式来获取

24:04.870 --> 24:05.770
换句话说

24:06.770 --> 24:08.170
Cookie在客户端那边

24:08.170 --> 24:09.170
在浏览器那边

24:09.170 --> 24:10.970
是可以通过介式获取的

24:11.270 --> 24:11.770
看这

24:13.270 --> 24:14.770
为什么你想这个道理

24:15.070 --> 24:16.870
服务器那边给它的一个Cookie

24:16.870 --> 24:17.870
浏览器保存在哪呢

24:17.870 --> 24:19.270
是否保存在自己的对边呢

24:19.870 --> 24:21.870
那既然是浏览器内部的东西

24:21.870 --> 24:23.370
浏览器这边的东西

24:23.770 --> 24:25.570
它是允许你用介式

24:25.570 --> 24:26.670
因为本身就在浏览器上

24:26.670 --> 24:27.170
对吧

24:27.170 --> 24:29.070
介式也是运行在浏览器上的

24:29.370 --> 24:31.170
那么这里它是允许你在介式

24:31.170 --> 24:32.070
运行的过程中的

24:32.070 --> 24:33.470
能够获取这个Cookie

24:33.870 --> 24:34.870
但是如果说

24:34.870 --> 24:36.670
你把它设置为ATPS only

24:36.970 --> 24:38.670
那么介式是不能获取这个Cookie的

24:38.670 --> 24:39.870
介式是拿不到的

24:40.670 --> 24:42.670
这种情况一般来说

24:42.670 --> 24:44.770
是用于防止夸张脚奔攻击

24:45.070 --> 24:46.470
夸张脚奔攻击又是啥呢

24:47.270 --> 24:48.270
这就不展开了

24:48.270 --> 24:48.970
不展开了

24:48.970 --> 24:50.770
那咱们后期课里面这些东西都有

24:51.670 --> 24:54.770
这是关于这个Cookie里边的一些信息

24:54.970 --> 24:56.170
现在大致到知道了吧

24:56.170 --> 24:57.970
尽管了这些东西还是有点模糊

24:57.970 --> 24:58.470
对不对

24:58.470 --> 24:59.870
但是你现在至少知道了

24:59.870 --> 25:01.470
Cookie里边有这么一个Cookie

25:01.470 --> 25:02.870
它有这么一些信息组成

25:03.370 --> 25:04.370
都是你现在知道的

25:04.770 --> 25:05.770
里边有过期时间

25:05.770 --> 25:07.270
有这两个东西不知道干嘛用的

25:07.670 --> 25:08.470
还有这两个东西

25:08.470 --> 25:08.670
对吧

25:08.670 --> 25:09.370
有点模糊

25:09.470 --> 25:10.670
但是这两个东西你要知道

25:10.670 --> 25:11.470
有过期时间

25:12.170 --> 25:12.670
然后呢

25:12.670 --> 25:14.570
Cookie拿来的是服务器给它的

25:14.570 --> 25:16.170
服务器在响应的时候

25:16.170 --> 25:18.970
在响应头就消息头里边

25:18.970 --> 25:20.070
把这个Cookie给它的

25:20.370 --> 25:20.670
好了

25:20.670 --> 25:22.170
那么接下来问大家一些问题啊

25:25.170 --> 25:26.170
比方说

25:27.670 --> 25:28.670
浏览器

25:29.470 --> 25:31.370
访问的地址

25:31.370 --> 25:32.170
是这个地址

25:33.370 --> 25:34.070
比方说啊

25:34.070 --> 25:35.270
我们随便举个例子

25:39.480 --> 25:42.580
ab 3w.abc.com

25:43.980 --> 25:46.780
ab test

25:47.780 --> 25:48.980
访问的这个地址

25:50.080 --> 25:50.580
然后呢

25:50.580 --> 25:53.380
服务器的响应头

25:54.280 --> 25:56.380
包含了包含了这么一个东西

25:57.380 --> 25:58.180
set cookie

26:00.370 --> 26:02.870
um user id 等于123

26:04.810 --> 26:06.410
pass 等于写到

26:08.010 --> 26:08.710
pass不写

26:08.710 --> 26:09.710
pass不写

26:10.010 --> 26:10.710
do make

26:11.210 --> 26:11.910
等于

26:12.910 --> 26:13.710
um

26:15.110 --> 26:16.210
abc.com

26:19.300 --> 26:20.200
max age

26:21.300 --> 26:22.100
等于

26:22.900 --> 26:23.800
max age不写

26:24.400 --> 26:24.800
好

26:24.800 --> 26:25.200
来啊

26:25.200 --> 26:26.200
我们来分析一下

26:26.200 --> 26:27.200
我问你们答啊

26:27.500 --> 26:29.000
首先我们把坚字对写出来

26:29.000 --> 26:30.500
坚字对很简单

26:30.500 --> 26:32.100
就是User id 等于123

26:32.100 --> 26:33.100
这个没什么好说的

26:33.300 --> 26:33.800
好

26:33.900 --> 26:34.800
浴是什么呢

26:36.100 --> 26:37.300
这个Cookie的浴是什么

26:41.580 --> 26:42.480
Cookie的浴是什么

26:42.480 --> 26:43.180
我有这啥

26:48.130 --> 26:49.130
Cookie的浴是什么

26:49.130 --> 26:50.330
是不是abc.com

26:50.330 --> 26:50.730
对吧

26:50.730 --> 26:51.930
按照我们设置的值来

26:51.930 --> 26:53.630
因为我们设置的值是允许的

26:53.630 --> 26:55.030
它跟浴是一样的

26:55.030 --> 26:57.030
所以说这个设置的值是有效的

26:57.030 --> 26:57.930
因此的图面呢

26:57.930 --> 26:58.930
是abc.com

26:59.930 --> 27:00.430
好

27:00.430 --> 27:01.030
接下来再来

27:01.030 --> 27:01.830
pass是什么

27:03.030 --> 27:03.830
pass是什么

27:10.440 --> 27:11.840
是不是写钢A写钢B

27:11.840 --> 27:12.240
对吧

27:12.240 --> 27:13.440
是不是写钢A写钢B

27:13.940 --> 27:14.240
对吧

27:14.240 --> 27:15.340
这pass没问题啊

27:15.340 --> 27:16.240
都挺好的

27:16.440 --> 27:17.240
然后呢

27:17.440 --> 27:18.340
过期时间

27:19.440 --> 27:20.440
过期时间

27:23.790 --> 27:24.390
是什么

27:26.590 --> 27:27.390
过期时间

27:30.480 --> 27:31.880
就是绘画结束后啊

27:32.180 --> 27:32.580
很好啊

27:32.580 --> 27:34.080
都都真的听讲的

27:34.180 --> 27:35.280
绘画结束后

27:36.180 --> 27:36.880
绘画

27:37.680 --> 27:38.480
结束后

27:40.870 --> 27:41.270
好

27:41.870 --> 27:42.770
然后还有什么呢

27:42.770 --> 27:44.270
secure啊secure

27:44.870 --> 27:45.470
是什么呢

27:45.570 --> 27:46.570
没有啊

27:46.670 --> 27:47.070
无

27:47.970 --> 27:49.970
没有安全安全的要求

27:50.070 --> 27:51.070
atp only

27:51.870 --> 27:52.370
5

27:52.770 --> 27:53.270
对不对

27:53.470 --> 27:54.470
这两个东西都没有

27:54.470 --> 27:55.170
有的话

27:55.270 --> 27:55.970
这个东西有的话

27:55.970 --> 27:57.270
既然是不能获取这个Cookie

27:57.370 --> 27:58.070
secure有的话

27:58.070 --> 27:59.070
下意识传输的时候

27:59.070 --> 28:00.570
只能通过atp也是传输

28:01.070 --> 28:01.170
好

28:01.170 --> 28:02.670
那么这是关于这个

28:03.970 --> 28:04.770
设置Cookie

28:04.870 --> 28:06.270
那么现在我们看代码了

28:06.270 --> 28:07.370
怎么来设置Cookie

28:07.670 --> 28:09.570
我们在express里边要设置Cookie呢

28:09.670 --> 28:10.870
当然最简单的方式

28:10.970 --> 28:11.670
啥都不用做

28:11.670 --> 28:12.870
就是你自己用一个是吧

28:12.870 --> 28:13.770
我们之前学过的

28:13.970 --> 28:15.970
在express里边怎么来操作那个

28:15.970 --> 28:17.470
比方说我们随便找一个地方啊

28:18.270 --> 28:20.070
用户登录成功

28:20.070 --> 28:20.970
我们看一下啊

28:20.970 --> 28:22.170
这个是轻触车用户

28:22.170 --> 28:23.170
这是登录啊

28:23.270 --> 28:25.270
用户登录成功之后

28:26.070 --> 28:27.970
用户登录成功之后

28:27.970 --> 28:29.070
那么这是登录失败

28:31.700 --> 28:32.600
这12倍是

28:33.500 --> 28:34.300
地方看错了

28:34.300 --> 28:35.900
应该是Route里边

28:37.400 --> 28:38.000
就这

28:38.400 --> 28:39.200
登录啊

28:39.200 --> 28:40.600
这是登录成功

28:42.640 --> 28:43.740
登录成功

28:43.840 --> 28:44.540
这是登录失败

28:44.540 --> 28:45.840
失败我们就不管他了

28:45.840 --> 28:46.540
登录成功的时候

28:46.540 --> 28:48.040
我们最简单的方式就用什么呢

28:48.040 --> 28:48.740
Race

28:49.040 --> 28:49.640
header对吧

28:49.640 --> 28:50.740
我们之前学过的

28:50.740 --> 28:51.540
建置队吗

28:52.040 --> 28:53.240
好建置队这里写

28:53.340 --> 28:54.140
这里应该写啥

28:54.140 --> 28:55.240
如果说我要设置Cookie的话

28:55.240 --> 28:56.040
这里应该写啥

28:56.040 --> 28:57.740
来做做铁控题

28:59.340 --> 29:00.040
这里应该写啥

29:00.040 --> 29:00.640
第一个参

29:00.740 --> 29:01.940
第一个参数建置队吗

29:05.480 --> 29:06.080
建

29:07.780 --> 29:08.280
直

29:09.880 --> 29:10.380
来

29:10.880 --> 29:11.580
应该写啥

29:11.680 --> 29:12.880
所以应该写Cookie

29:12.880 --> 29:14.580
我们刚才说讲过的在这里

29:14.880 --> 29:15.480
看一下

29:15.680 --> 29:16.880
服务器给我的响应头里边

29:16.880 --> 29:17.980
所以应该加个东西

29:17.980 --> 29:18.680
sets cookie

29:18.680 --> 29:19.180
啊

29:19.280 --> 29:20.680
那么我们来用一个啊

29:20.680 --> 29:21.380
set cookie

29:23.420 --> 29:24.220
set cookie

29:24.820 --> 29:25.620
好值呢

29:25.620 --> 29:27.420
值的格式那就自行规定了啊

29:27.420 --> 29:28.320
Cookie的建呢

29:28.320 --> 29:28.820
Cookie的建呢

29:28.820 --> 29:30.820
比方说我给他取一个abc吗

29:30.920 --> 29:32.220
或者是用User ID吗

29:32.220 --> 29:33.620
随便什么玩意都行啊

29:33.620 --> 29:35.120
比方User ID等于多少呢

29:35.120 --> 29:36.820
等于12他随便给他写个吧

29:36.820 --> 29:37.520
啊写个

29:37.920 --> 29:38.320
好

29:38.920 --> 29:39.520
保存啊

29:39.520 --> 29:40.320
咱们来看一下

29:41.220 --> 29:41.720
保存

29:41.720 --> 29:42.220
我们来看一下

29:42.220 --> 29:43.520
一个Cookie有没有设置成功啊

29:43.520 --> 29:44.420
这是我们登录

29:44.720 --> 29:44.920
好

29:44.920 --> 29:45.620
接下来我们来

29:46.020 --> 29:46.520
试一下

29:46.520 --> 29:47.420
我们打开这个

29:48.120 --> 29:48.620
控制台

29:49.520 --> 29:50.520
np star

29:55.570 --> 29:56.570
啊晕起来了啊

29:58.470 --> 29:59.970
怎么看有卡卡的呢

30:03.410 --> 30:03.610
哇

30:03.610 --> 30:04.610
为什么这么卡啊

30:06.930 --> 30:08.330
啊接下来我们访问

30:08.330 --> 30:09.830
localhost 9527

30:11.740 --> 30:13.740
现在让我们打开这个控制台啊

30:15.440 --> 30:17.140
这个这个这个文件没有

30:17.140 --> 30:18.340
这是一个图标文件啊

30:18.340 --> 30:19.640
这里的图标文件这里没有

30:19.640 --> 30:21.140
一个视频是我说一个啊

30:21.140 --> 30:22.540
点击我们点击这个

30:22.940 --> 30:23.540
检查

30:24.240 --> 30:25.640
然后打开这个网络通信

30:25.940 --> 30:27.740
我们在网络中心里边监控一下

30:28.340 --> 30:30.540
这里这里可以选择这个XHR

30:30.540 --> 30:31.840
表示按的废检啊

30:31.840 --> 30:34.040
表示的是监控的是阿迦克斯请求

30:34.040 --> 30:34.940
因为我们登录的时候

30:34.940 --> 30:36.040
是不是阿迦克斯请求

30:36.140 --> 30:37.440
啊我们这里登录

30:37.640 --> 30:39.840
左手掌写的乘个2是吧

30:40.140 --> 30:41.240
123123

30:41.240 --> 30:43.140
点到路啊登录成功

30:43.140 --> 30:44.640
你看一下服务器给我们的东西

30:45.340 --> 30:46.440
看下服务器给我们的东西

30:48.240 --> 30:49.840
然后这里还没点击

30:50.740 --> 30:51.240
确定

30:51.940 --> 30:53.940
啊你看服务器给我们的东西啊

30:54.440 --> 30:55.240
这是消息体

30:55.240 --> 30:56.340
这个消息体没什么好说的

30:56.440 --> 30:58.340
一个用户对象拿到用户登录成功了

30:58.640 --> 31:00.540
然后让我们看一下这个消息头

31:01.340 --> 31:02.640
服务器人们的消息头里边

31:02.740 --> 31:03.740
是不是有个set cookie

31:04.140 --> 31:04.540
看到没

31:04.840 --> 31:06.140
user id等于123

31:06.140 --> 31:08.140
他对应到哪对应到我们的原地图这里

31:08.440 --> 31:09.140
登录成功过后

31:09.140 --> 31:10.340
是不是给过一个东西

31:10.340 --> 31:10.740
对吧

31:10.840 --> 31:12.440
给的浏览器通过怎么给的

31:12.440 --> 31:13.640
通过这个消息头给的

31:13.640 --> 31:14.340
这次cookie

31:14.440 --> 31:15.240
那么浏览器这里

31:15.240 --> 31:17.740
他就会自动的把这东西加到cookie里边去

31:17.740 --> 31:18.540
那么怎么来看呢

31:18.540 --> 31:19.140
我们点这

31:19.940 --> 31:21.640
查看网站信息点击

31:21.740 --> 31:23.340
这里有个cookie点击他

31:23.640 --> 31:24.640
展开cookie

31:24.940 --> 31:26.240
展开这里有个user id

31:26.240 --> 31:26.440
对吧

31:26.440 --> 31:27.540
前面那个不用管他啊

31:27.640 --> 31:28.440
这是个user id

31:28.440 --> 31:30.440
你看user id的值是不是123

31:30.640 --> 31:31.440
于是什么了

31:31.440 --> 31:32.240
于我没有写

31:32.240 --> 31:32.540
对不对

31:32.540 --> 31:34.040
是不是我没有告诉他于是什么

31:34.140 --> 31:34.840
没有告诉他的话

31:34.840 --> 31:37.340
于就是使用当前请求那个于

31:37.340 --> 31:38.940
当前请求的于是不是noke host

31:39.340 --> 31:39.740
对吧

31:39.740 --> 31:40.540
就是noke host

31:40.840 --> 31:42.340
那么路径的是不是我没有写

31:42.640 --> 31:43.240
没有写的话

31:43.240 --> 31:44.840
是不是我们请求的地址是啊

31:44.840 --> 31:46.840
我们请求的地址是写杠user

31:47.540 --> 31:49.640
写杠API写杠user写杠locking

31:49.640 --> 31:50.040
对不对

31:50.040 --> 31:51.440
那么他的路径变成这个路径

31:51.440 --> 31:51.740
对吧

31:51.740 --> 31:52.540
是不是没有写

31:53.240 --> 31:53.940
那么下面

31:54.140 --> 31:56.740
过去时间到期时间是不是绘画结束后过期

31:57.040 --> 31:57.440
对不对

31:58.140 --> 32:00.340
那么这个就是cookie数加到浏览器里边了

32:01.040 --> 32:01.840
就这么个意思

32:02.040 --> 32:03.740
当然目前的是绘画结束后过期

32:03.740 --> 32:05.040
所以说一关浏览器就没了

32:05.540 --> 32:06.640
这是这个cookie

32:06.740 --> 32:08.240
那么除了用这种方式呢

32:08.240 --> 32:09.040
之外呢

32:09.740 --> 32:10.240
这种方式呢

32:10.240 --> 32:11.540
其实并不是那么友好

32:11.540 --> 32:12.940
如果说你还要加别的信息的话

32:12.940 --> 32:14.140
还要去拼接这个字幕串

32:14.140 --> 32:15.340
还是挺麻烦的啊

32:15.440 --> 32:15.840
因此呢

32:15.840 --> 32:17.740
我们在平时使用的时候

32:17.740 --> 32:19.740
一般会使用这个的一个中间键

32:19.740 --> 32:20.740
叫做cookie poser

32:20.740 --> 32:21.540
这个中间键

32:21.840 --> 32:22.940
你需要去安装

32:23.040 --> 32:23.840
我们首先来安装

32:24.940 --> 32:25.440
停止

32:27.140 --> 32:28.040
npm i

32:28.840 --> 32:30.140
cookie poser

32:31.340 --> 32:32.540
下面是它的官方

32:32.540 --> 32:33.940
官网地址

32:33.940 --> 32:35.340
有信息的东西可以看一下

32:35.640 --> 32:37.040
我们安装这个中间键啊

32:37.140 --> 32:37.840
安装到之后呢

32:37.840 --> 32:38.340
怎么用呢

32:38.340 --> 32:38.580
我们来看

32:38.580 --> 32:39.540
先看一下代码

32:39.640 --> 32:40.840
创建好express过后呢

32:40.840 --> 32:43.040
我们首先可以去使用一下这个中间键

32:43.540 --> 32:44.040
用法呢

32:44.040 --> 32:45.140
也特别特别简单

32:45.140 --> 32:46.140
就是cookie poser

32:46.540 --> 32:48.040
然后里边传一个参数

32:48.040 --> 32:49.040
这个参数是什么意思

32:49.040 --> 32:50.140
这个参数就是密要

32:50.740 --> 32:52.740
就是我们一会要加密cookie的密要

32:52.740 --> 32:53.840
他会自动帮我们加密

32:54.640 --> 32:56.540
随便写个字母串来作为你的密要

32:56.940 --> 32:57.340
好

32:57.340 --> 32:58.740
然后它返回的是一个什么呢

32:58.740 --> 32:59.840
返回的是一个中间键

33:00.140 --> 33:01.140
然后我们去使用它

33:01.140 --> 33:02.640
这中间键的作用是什么呢

33:02.640 --> 33:03.640
它的作用就是

33:04.140 --> 33:05.240
它会更改

33:05.540 --> 33:07.240
express里边也不是有两个对象吗

33:07.240 --> 33:08.040
rake and race

33:08.040 --> 33:08.440
对吧

33:08.440 --> 33:10.740
它会改动这两个对象里边的一些方法

33:10.740 --> 33:11.640
一些属性

33:11.940 --> 33:14.340
跟跟cookie相关的一些方法和属性

33:14.340 --> 33:15.740
方便我们后边使用

33:16.140 --> 33:17.540
就写这么一个作用

33:17.640 --> 33:19.640
我们后边用cookie的就会非常方便

33:20.040 --> 33:21.140
它并不会中断

33:21.140 --> 33:22.840
比方它一定会往后移交的

33:23.140 --> 33:24.740
中间不是要往后移交吗

33:24.740 --> 33:25.940
它一定会往后移交的

33:25.940 --> 33:27.340
它只是给你做了一些更改

33:27.840 --> 33:27.940
好

33:27.940 --> 33:29.840
那么我们现在也使用cookie poster

33:31.240 --> 33:31.740
一块

33:33.340 --> 33:34.540
cookie poster

33:35.640 --> 33:36.440
那么怎么来用呢

33:36.440 --> 33:36.940
就在这里

33:37.340 --> 33:37.840
use

33:39.140 --> 33:39.940
cookie poster

33:39.940 --> 33:41.340
然后这里边写上一个什么呢

33:41.340 --> 33:43.240
写上一个就是密要

33:43.240 --> 33:44.740
密要的话你可以定一个辨量

33:44.740 --> 33:46.140
或者是端定一个文件

33:46.140 --> 33:47.740
放了一个位置secrets

33:47.740 --> 33:48.240
密要

33:48.640 --> 33:49.740
这放到服务器上的

33:49.740 --> 33:51.740
也要说密要我们就用独一嘛

33:52.640 --> 33:53.840
secrets放进去

33:54.840 --> 33:56.840
然后也可以直接把这个字幕上放进来

33:57.140 --> 33:59.040
那么我们就使用了这种面键了

33:59.040 --> 34:01.240
那么后续的数其他的面键里边

34:01.240 --> 34:03.340
它就可以根据Rick对象

34:04.240 --> 34:07.440
或者是Rick对象里边的一些特殊的属性和方法

34:07.440 --> 34:08.640
来操作cookie的

34:08.640 --> 34:10.440
当然你可能不能像现在这种方式

34:10.440 --> 34:11.340
来操作也可以

34:11.340 --> 34:12.440
只是比较麻烦而已

34:12.640 --> 34:13.940
那么这种

34:13.940 --> 34:15.540
等成功之后比方后来这里

34:15.540 --> 34:16.940
我要想应一个cookie

34:16.940 --> 34:17.740
我怎么来想应的

34:17.740 --> 34:18.740
我可以用这种方式

34:19.440 --> 34:19.840
看一下

34:19.840 --> 34:20.640
把副字给过来

34:22.520 --> 34:23.420
可以用这种方式

34:24.120 --> 34:25.120
cookie的剑

34:25.320 --> 34:26.220
cookie的纸

34:26.220 --> 34:28.320
Race cookie这个是一个函数

34:28.520 --> 34:30.320
把cookie的剑纸对放进去

34:30.320 --> 34:31.120
好剑呢

34:31.120 --> 34:32.320
我们用什么呢

34:32.320 --> 34:34.320
用那个user

34:34.720 --> 34:35.720
比方是token吗

34:35.820 --> 34:37.020
用剑用token

34:37.320 --> 34:38.020
纸呢

34:38.020 --> 34:38.920
只用啥呢

34:39.120 --> 34:39.520
纸呢

34:39.520 --> 34:40.920
我们就用用户id嘛

34:40.920 --> 34:41.820
result

34:42.920 --> 34:43.820
不是用户吗

34:43.820 --> 34:44.120
对不对

34:44.120 --> 34:45.320
用户里边不是有个id吗

34:45.320 --> 34:46.520
我们用用户的id

34:47.320 --> 34:48.620
这是我们的剑

34:48.620 --> 34:49.320
这是我们的纸

34:49.320 --> 34:50.320
这是cookie的纸

34:50.420 --> 34:50.920
好

34:50.920 --> 34:51.420
鲁妹呢

34:51.420 --> 34:51.820
鱼呢

34:51.820 --> 34:52.720
鱼可以不舔

34:52.820 --> 34:53.420
不舔的话

34:53.420 --> 34:54.320
那么浏览器就会

34:54.320 --> 34:55.020
我们之前看到过

34:55.020 --> 34:56.820
就因为用当前的鱼作为鱼

34:57.420 --> 34:57.720
然后呢

34:57.720 --> 34:58.220
路径呢

34:58.220 --> 34:58.620
路径呢

34:58.620 --> 34:59.220
也可以不舔

34:59.220 --> 34:59.720
不舔的话

34:59.720 --> 35:01.220
他这里莫认为鞋杠

35:01.620 --> 35:02.320
莫认为鞋杠

35:02.320 --> 35:04.020
他就会自动给你设置成鞋杠

35:04.420 --> 35:05.620
就表示根鱼

35:05.920 --> 35:06.520
根鱼

35:06.520 --> 35:07.120
那么这里呢

35:07.120 --> 35:08.020
我们可以不舔

35:08.420 --> 35:09.420
或者是给他舔一个鞋杠

35:09.420 --> 35:10.020
也可以

35:10.220 --> 35:11.620
Xperr过期时间

35:11.620 --> 35:12.820
他是一个dead对象

35:12.820 --> 35:13.920
你不用去转换

35:13.920 --> 35:16.020
你不用去把它转换成什么GNT格式了

35:16.120 --> 35:18.220
他会自动帮你转换过期时间

35:18.220 --> 35:20.120
也可以使用相对过期时间

35:21.120 --> 35:21.820
相对过期时间

35:21.820 --> 35:22.620
那么这里的单位呢

35:22.620 --> 35:23.320
是好妙

35:23.320 --> 35:23.920
他一会儿呢

35:23.920 --> 35:26.120
会把它放到响应头里边

35:26.120 --> 35:27.420
会自动转换成鸟

35:27.620 --> 35:28.520
比方说我们这里

35:29.320 --> 35:30.520
比方说一天过期

35:30.520 --> 35:31.420
一天过期的话

35:31.420 --> 35:34.120
就是一个小时3600秒

35:34.320 --> 35:35.620
然后乘1000是不是

35:35.620 --> 35:37.820
一个小时的好妙数乘以24

35:37.820 --> 35:38.220
对吧

35:38.220 --> 35:39.120
我就这样子起

35:40.120 --> 35:42.020
就是一天一天后过期

35:42.520 --> 35:42.720
好

35:42.720 --> 35:43.720
那么这里adb only

35:43.720 --> 35:44.820
是不是启用adb only

35:44.820 --> 35:46.620
是不是启用secure

35:46.620 --> 35:47.920
那么这些都可以进行配置

35:47.920 --> 35:48.920
secure这些

35:49.120 --> 35:49.320
好

35:49.320 --> 35:50.520
那么下一个就是sand

35:50.520 --> 35:51.720
是不是要加密

35:52.320 --> 35:53.320
是不是要加密

35:53.320 --> 35:54.920
如果说你设置为去的话

35:54.920 --> 35:57.420
那么他就会把之前你设置的密要

35:57.420 --> 35:58.420
用这个东西

35:58.420 --> 36:00.520
来对这个东西进行加密

36:00.720 --> 36:01.720
就这么个意思

36:01.920 --> 36:03.120
他会用这个东西

36:03.920 --> 36:05.320
对这个东西进行加密

36:05.820 --> 36:06.020
好

36:06.020 --> 36:07.420
那么我们这里比方要加密

36:07.620 --> 36:08.320
保存

36:09.420 --> 36:09.620
好

36:09.620 --> 36:10.320
保存完了过后

36:10.320 --> 36:11.020
我们再来看

36:11.020 --> 36:12.120
现在我们再来登录

36:15.440 --> 36:16.140
小心意思

36:17.140 --> 36:17.340
好

36:17.340 --> 36:18.840
这边我们再继续点

36:19.940 --> 36:20.840
没启动服务器

36:23.740 --> 36:24.740
继续start

36:27.810 --> 36:28.110
好

36:28.110 --> 36:28.810
小心意思啊

36:30.010 --> 36:30.610
加单

36:30.810 --> 36:32.010
乘个2

36:32.310 --> 36:33.410
123123

36:33.810 --> 36:34.610
登录成功

36:34.710 --> 36:35.510
然后我们看这边

36:36.310 --> 36:37.210
这边的set cookie

36:37.210 --> 36:37.810
你看一下

36:39.110 --> 36:40.510
这个星期set cookie

36:40.810 --> 36:41.410
token

36:41.610 --> 36:42.810
是我们设置的键

36:42.810 --> 36:43.410
值呢

36:43.410 --> 36:44.910
是一个加密过后的支付串

36:44.910 --> 36:47.010
你看这一串就加密过后的支付串

36:47.610 --> 36:47.910
然后呢

36:47.910 --> 36:49.810
后面麦克斯A级是不是传过去了

36:49.810 --> 36:50.310
对吧

36:50.710 --> 36:51.410
3000

36:51.610 --> 36:53.310
他是把它变成变成表的单位了

36:53.310 --> 36:54.910
我们是3600

36:55.010 --> 36:56.310
1000再乘24

36:56.310 --> 36:56.710
对吧

36:56.710 --> 36:58.410
应该是864

36:58.410 --> 36:59.510
后边有几个零

36:59.510 --> 37:00.910
应该是有5个零的

37:00.910 --> 37:01.810
他去掉三个零

37:01.810 --> 37:02.010
对吧

37:02.010 --> 37:02.910
把它变成了表

37:03.110 --> 37:04.110
然后拍死我们

37:04.410 --> 37:05.310
如果说没写的话

37:05.310 --> 37:07.210
他也会自动设置为写杠

37:07.410 --> 37:07.910
X8

37:07.910 --> 37:09.110
他会自动给你转换

37:09.110 --> 37:10.310
转换的跟那个麦克斯A级

37:10.310 --> 37:11.410
对应的一样的时间

37:12.010 --> 37:13.510
那么他这里是不是给设置过来了

37:13.610 --> 37:15.010
于是那我们浏览器里边

37:15.010 --> 37:16.110
是不是多了一个Cookie的

37:16.610 --> 37:17.410
你看一下Cookie

37:17.410 --> 37:18.610
里边是不是多了一个token

37:18.710 --> 37:19.210
对不对

37:19.310 --> 37:21.110
那么这个token是不会消失的

37:21.110 --> 37:23.410
比方说我们这里把这个浏览器关掉

37:24.710 --> 37:25.710
关掉重新打开

37:27.310 --> 37:28.010
Nokkerhost

37:29.310 --> 37:30.110
9527

37:30.610 --> 37:30.810
好

37:30.810 --> 37:31.710
咱们来看一下这里

37:34.320 --> 37:37.020
你看之前我定义那个User IT是不是没了

37:37.020 --> 37:37.220
对吧

37:37.220 --> 37:38.520
它汇化结束后过期

37:38.520 --> 37:39.620
那么token是不是还在

37:39.620 --> 37:40.020
对吧

37:40.020 --> 37:41.320
它是持久化保存

37:41.320 --> 37:41.720
而且呢

37:41.720 --> 37:43.120
你重启电脑过后都还在

37:43.120 --> 37:44.920
除非你手动在这里把它粘掉

37:45.120 --> 37:46.320
否则的话一直在的

37:46.720 --> 37:48.320
一天之后过期

37:48.520 --> 37:49.120
这是token

37:49.120 --> 37:50.020
你看过期时间

37:50.220 --> 37:51.520
就是是不是星期五

37:51.520 --> 37:51.920
对吧

37:51.920 --> 37:52.420
明天

37:52.420 --> 37:54.120
明天下午的这个时候过期

37:54.320 --> 37:54.420
好

37:54.420 --> 37:55.820
那么现在我们Cookie就设置好了

37:55.920 --> 37:57.720
那么现在我们是不是到这一步了

37:58.420 --> 37:59.120
到这一步了

37:59.720 --> 38:00.620
想用一个token

38:00.620 --> 38:01.520
是不是给它了

38:01.520 --> 38:03.120
然后呢持久的保存token

38:03.120 --> 38:04.220
token也会自动加密

38:04.220 --> 38:04.420
对吧

38:04.420 --> 38:04.920
给它了

38:04.920 --> 38:05.520
保存token

38:05.520 --> 38:05.720
对吧

38:05.720 --> 38:06.820
所以说我们这个代码呢

38:06.820 --> 38:08.020
实际上没有机航代码

38:08.020 --> 38:08.920
代码少得很

38:08.920 --> 38:10.320
主要是要理解原理

38:10.520 --> 38:10.620
好

38:10.620 --> 38:11.420
那么接下来呢

38:11.420 --> 38:13.920
就是如何来把token发送过去了

38:14.120 --> 38:15.120
后续请求的时候

38:15.120 --> 38:16.620
如何把token发送过去

38:16.620 --> 38:17.620
就让我们看下一个

38:17.920 --> 38:18.720
发送Cookie

38:20.520 --> 38:21.120
没问题吧

38:21.120 --> 38:21.720
能听懂吗

38:26.040 --> 38:26.640
没问题吧

38:27.640 --> 38:28.340
能听懂啊

38:28.440 --> 38:28.940
那就好

38:29.340 --> 38:29.540
好

38:29.540 --> 38:31.140
咱们接下来看发送Cookie

38:31.340 --> 38:32.240
发送为什么会是呢

38:32.240 --> 38:34.540
是浏览器只要有Cookie

38:35.740 --> 38:36.640
那么它后续

38:36.640 --> 38:38.540
无论是发生什么样的请求

38:39.040 --> 38:41.140
都会自动判断

38:41.340 --> 38:43.140
是否有满足条件的Cookie

38:43.140 --> 38:44.740
因为浏览器Cookie会存很多

38:44.740 --> 38:45.840
以这个网站存一些

38:45.840 --> 38:46.940
别的网站也会存一些

38:46.940 --> 38:47.040
对吧

38:47.040 --> 38:48.640
不同的网站会存一大堆Cookie

38:49.440 --> 38:51.340
它看一下有没有满足条件的Cookie

38:51.340 --> 38:52.540
如果是有的话

38:52.540 --> 38:54.640
它会把它附带到请求头里边

38:54.840 --> 38:55.840
发到浏览器

38:55.940 --> 38:57.240
它具体的格式是这样子

38:57.740 --> 38:58.940
Cookie 帽号

38:59.040 --> 39:00.640
A等于键子队

39:00.640 --> 39:01.440
一个Cookie

39:01.640 --> 39:02.340
两个Cookie

39:02.340 --> 39:03.040
三个Cookie

39:03.340 --> 39:04.240
扔给浏览器

39:04.840 --> 39:06.040
上面的地址就表示说

39:06.040 --> 39:08.740
浏览器找到了三个满足条件的Cookie

39:08.740 --> 39:09.140
于是呢

39:09.140 --> 39:10.240
他们把他们的键子队

39:10.240 --> 39:12.240
附带到请求头里边扔给浏览器了

39:12.540 --> 39:14.540
最后是任何请求都会扔过去

39:14.540 --> 39:14.740
好

39:14.740 --> 39:15.540
咱们来看一下吧

39:15.540 --> 39:16.940
比方说我请求这个地址

39:16.940 --> 39:18.040
这个是不是一支请求

39:18.040 --> 39:18.940
我访问这个页面

39:18.940 --> 39:19.940
是不是一支请求

39:20.540 --> 39:21.540
当然是请求啊

39:22.140 --> 39:22.940
对 当然是请求

39:22.940 --> 39:24.740
那我们来看一下这个请求点凹

39:25.540 --> 39:27.440
这个请求他有没有发送Cookie

39:27.440 --> 39:28.440
你看一下有没有

39:29.440 --> 39:30.540
request 看下面

39:31.340 --> 39:32.040
请求头

39:32.240 --> 39:33.440
你看一下是不是有Cookie

39:33.740 --> 39:34.640
说该发送过去了

39:34.640 --> 39:35.840
这个Cookie不用管

39:35.840 --> 39:36.640
Cookie不用管

39:36.740 --> 39:37.740
下面这个Token

39:38.640 --> 39:39.540
说该发过去了

39:39.840 --> 39:40.340
对不对

39:40.840 --> 39:42.040
这个Cookie该发过去了

39:42.040 --> 39:42.240
对吧

39:42.240 --> 39:43.740
把个信息就发到浏览器了

39:44.240 --> 39:46.340
那么他只要能找到满足条件的Cookie

39:46.340 --> 39:47.140
就能发送

39:47.240 --> 39:49.340
那么什么样叫做满足条件呢

39:49.340 --> 39:49.840
现在看

39:50.140 --> 39:50.940
什么样的条件

39:51.940 --> 39:53.340
如果说一个Cookie

39:53.340 --> 39:56.040
同时满足以下所有条件

39:56.240 --> 39:56.740
都满足

39:56.740 --> 39:57.340
那么这个Cookie

39:57.340 --> 39:58.840
就会被附带到请求里面

39:58.840 --> 39:59.840
第一个没有过期

40:00.740 --> 40:01.940
过期时间是不是有用了

40:02.040 --> 40:02.540
对不对

40:03.140 --> 40:04.340
没有过期他会把他

40:04.340 --> 40:05.740
他的表格满足条件

40:05.740 --> 40:06.440
第二个

40:06.540 --> 40:08.040
他的预议和这一次

40:08.040 --> 40:09.740
请求的预议是匹配的

40:09.840 --> 40:10.540
比方说

40:10.540 --> 40:12.040
我Cookie里边的预议是这个

40:12.840 --> 40:14.740
我现在请求的预议呢

40:14.840 --> 40:15.640
是另外一个预议

40:15.640 --> 40:16.640
那么比方说是这个

40:16.640 --> 40:17.240
能不能匹配

40:17.240 --> 40:17.940
可以匹配

40:18.640 --> 40:19.540
他匹配的是什么

40:19.540 --> 40:22.140
根预就是最基础的那个预

40:22.540 --> 40:23.540
最基础的那个预

40:23.740 --> 40:24.940
根预其实是这个

40:24.940 --> 40:25.540
是这个

40:26.340 --> 40:27.740
他可以

40:28.040 --> 40:29.040
他只要能匹配

40:29.040 --> 40:30.340
他的根预就是这个预

40:30.640 --> 40:31.640
他匹配的这个预

40:31.640 --> 40:32.940
那么他就能匹配

40:33.340 --> 40:34.640
这个东西是能匹配的

40:34.940 --> 40:36.240
那么另外一种情况就是说

40:36.240 --> 40:37.540
如果说你Cookie里边的预议

40:37.540 --> 40:38.140
是这个预

40:38.140 --> 40:39.740
但他不能匹配这种预

40:40.040 --> 40:40.540
比方意思吧

40:40.540 --> 40:41.340
你只能去匹配

40:41.340 --> 40:42.640
我不知道该怎么用什么呢

40:42.640 --> 40:43.840
话语来给你解释

40:44.140 --> 40:45.840
而且Cookie是不在乎端口的

40:45.840 --> 40:47.140
跟端口没有任意毛钱关系

40:47.140 --> 40:47.840
一点关系都没有

40:47.840 --> 40:49.240
他只要预能匹配就行了

40:49.340 --> 40:50.740
那么比方说我们刚才这个例子

40:50.940 --> 40:51.740
刚才这个例子呢

40:51.740 --> 40:53.840
预是这个ABC角抗

40:54.140 --> 40:55.640
我该设置的预是这个预

40:55.740 --> 40:57.040
那么我们后边

40:57.140 --> 40:58.540
如果请求这个路径啊

40:58.540 --> 40:59.640
得到了预是这个预

41:00.040 --> 41:01.640
然后呢我后续请求

41:03.340 --> 41:04.440
后续请求

41:04.440 --> 41:06.140
如果说请求的是这样的路径

41:07.940 --> 41:09.240
请求的地址是

41:10.140 --> 41:13.240
blogABC角抗

41:13.740 --> 41:15.540
那么这个Cookie会不会发送过去

41:18.250 --> 41:20.550
想想这个Cookie能不能发送过去

41:23.640 --> 41:24.240
能不能呢

41:28.190 --> 41:29.190
有时候同学说可以

41:29.190 --> 41:30.190
有时候同学说不会

41:31.390 --> 41:32.090
好好想想呢

41:33.190 --> 41:34.090
是不是可以啊

41:34.490 --> 41:35.990
可以发送过去的啊

41:36.090 --> 41:36.790
因为什么呢

41:36.790 --> 41:38.490
因为如果说你觉得是不会的话

41:38.490 --> 41:39.590
那你可能会认为是

41:39.590 --> 41:41.890
跟之前的请求预是不一样的

41:41.990 --> 41:42.690
但是呢

41:42.690 --> 41:44.890
你要看到我们比较的是什么呢

41:44.890 --> 41:46.390
比较跟之前的请求地址

41:46.390 --> 41:47.390
没有任何关系

41:47.390 --> 41:49.090
比较的是Cookie里边的预

41:49.090 --> 41:50.390
跟这个预能不能匹配

41:50.490 --> 41:51.490
是不是可以匹配的

41:51.490 --> 41:51.990
对吧

41:52.090 --> 41:52.990
Cookie里边的预

41:52.990 --> 41:54.290
跟这个预是可以匹配的

41:54.290 --> 41:55.290
因此能发送过去

41:55.490 --> 41:57.090
如果说我这边

41:57.090 --> 41:59.090
之前的请求就没有加这个预

41:59.090 --> 42:00.890
那么Cookie里边的预变成这个样子的

42:01.390 --> 42:02.790
那么这样子是不能匹配的

42:02.790 --> 42:02.990
对吧

42:02.990 --> 42:04.090
这样子是发布过去的

42:04.690 --> 42:05.190
看的是什么

42:05.190 --> 42:06.690
看的是Cookie里边的预

42:06.790 --> 42:07.490
一定要注意

42:07.790 --> 42:08.390
这是

42:08.590 --> 42:08.790
主要

42:08.790 --> 42:10.190
因为以后你像面试体

42:10.190 --> 42:11.390
像比试体这种东西

42:11.390 --> 42:12.490
它可能扣理细节

42:12.490 --> 42:13.390
它又会这样子去

42:13.490 --> 42:14.790
用很细的地方去问你

42:16.090 --> 42:17.090
其实这个东西还不一定在

42:17.090 --> 42:17.690
比试体里边

42:17.690 --> 42:18.590
里面以后工作的

42:18.590 --> 42:20.190
工作中都可能会用的

42:20.190 --> 42:21.090
因为一个公司里边

42:21.090 --> 42:22.190
它买了一个预名之后

42:22.190 --> 42:23.590
它可能有很多的纸预名

42:23.690 --> 42:24.790
它要设立到Cookie的

42:24.790 --> 42:25.290
这种

42:25.690 --> 42:26.490
跨越预名的

42:26.490 --> 42:27.590
就这种传递

42:27.690 --> 42:29.490
那么你肯定会遇到这样的问题

42:29.690 --> 42:30.790
这是这个条件

42:30.790 --> 42:31.690
预要匹配

42:31.790 --> 42:32.390
第三个

42:32.390 --> 42:33.190
Pice是不来了

42:33.190 --> 42:33.390
对吧

42:33.390 --> 42:34.990
我们之前不知道这个预有什么用

42:34.990 --> 42:35.690
Pice有什么用

42:35.690 --> 42:36.690
那么现在就知道了

42:36.790 --> 42:38.290
Pice也必须要匹配

42:39.090 --> 42:40.090
它怎么匹配的呢

42:40.890 --> 42:42.690
Cookie里边的Pice比方说是这个

42:43.190 --> 42:44.490
它可以匹配的路径

42:44.790 --> 42:45.590
有哪些呢

42:45.690 --> 42:46.390
有这些

42:46.790 --> 42:47.690
鞋杠六子可以匹配

42:47.690 --> 42:48.590
因为Cookie里边是这个

42:48.590 --> 42:49.690
它这个可以匹配

42:49.790 --> 42:50.290
这个东西

42:50.290 --> 42:51.590
后面跟东西也可以匹配

42:51.590 --> 42:52.990
就是把它这个东西当成什么

42:52.990 --> 42:53.890
鸡路径

42:54.190 --> 42:54.990
基础路径

42:54.990 --> 42:56.390
你看后面这个都可以匹配

42:56.390 --> 42:57.690
但是不能匹配这个东西

42:58.190 --> 42:58.790
你看到吗

42:59.990 --> 43:01.090
它是它匹配的方式

43:01.290 --> 43:02.490
如果说你换句话说

43:02.490 --> 43:04.090
如果说Cookie的Pice是鞋杠

43:04.190 --> 43:06.390
可以想象是不是能够匹配所有的路径

43:06.390 --> 43:06.790
对吧

43:06.790 --> 43:08.190
路径是所有的都可以匹配的

43:09.390 --> 43:10.190
预要匹配

43:10.190 --> 43:11.290
路径也要匹配

43:11.290 --> 43:13.490
这两个都还要同时没有过期

43:13.590 --> 43:15.890
第三个还要验证安全传输

43:15.890 --> 43:17.090
是不是安全传输

43:17.190 --> 43:19.590
就是如果说Cookie里边设置到这个东西

43:19.590 --> 43:20.190
Secure

43:20.890 --> 43:21.990
那么请求的时候

43:21.990 --> 43:23.390
你必须要是ATBS

43:23.590 --> 43:24.590
否则的话

43:24.590 --> 43:26.490
也是做不满足条件

43:27.190 --> 43:29.590
如果说Cookie里面没有设置这个Secure

43:30.690 --> 43:32.190
那么请求是可以是ATB

43:32.190 --> 43:33.290
也可以是ATBS

43:33.290 --> 43:34.190
所以说今天晚上

43:34.190 --> 43:35.590
我们是不能去设置它的

43:35.590 --> 43:36.590
因为我们今天晚上

43:36.790 --> 43:38.790
是没有去用的ATBS协议的

43:40.490 --> 43:41.890
这二八经的

43:42.790 --> 43:44.390
稍微商点规模的公司

43:44.390 --> 43:47.590
他们的网站一般都要设置成ATBS

43:48.890 --> 43:50.490
这是关于如何来发送Cookie

43:50.490 --> 43:51.590
发送Cookie你不用管

43:51.690 --> 43:52.990
浏览器自动发送

43:52.990 --> 43:53.890
自动就发送了

43:54.090 --> 43:56.390
好现在我们是不是这一步就解释通了

43:56.490 --> 43:58.890
如何把这个token发送到服务器

43:58.890 --> 43:59.790
怎么发送了啥子

43:59.790 --> 44:01.090
你不用做任何事情

44:01.090 --> 44:02.390
你只要有请求到服务器

44:02.390 --> 44:03.390
是不是就发送过去了

44:03.490 --> 44:04.090
对不对

44:05.390 --> 44:06.490
那么现在呢

44:06.490 --> 44:08.190
我们还另外一个问题就是

44:08.390 --> 44:11.390
服务器如何来获取Cookie

44:11.390 --> 44:12.390
如何来获取

44:13.390 --> 44:14.890
那么怎么来获取Cookie呢

44:15.190 --> 44:16.090
很简单

44:16.890 --> 44:18.790
服务器里面不是一个Rick对象吗

44:18.790 --> 44:19.790
是不是一个Rick对象

44:19.790 --> 44:21.490
Rick对象里面通过Cookie时

44:21.890 --> 44:23.990
就可以得到跟Cookie解析后的一个对象

44:24.090 --> 44:25.490
就把Cookie就可以解析了

44:25.490 --> 44:27.890
解析成一个就是得到解析之后的Cookie

44:28.090 --> 44:30.190
好还有一个属性的叫San的Cookie是

44:30.290 --> 44:32.490
他会把我们之前加密的Cookie

44:32.490 --> 44:33.590
解析成一个对象

44:33.590 --> 44:34.590
我们以后再演示

44:34.590 --> 44:37.690
总之可以在服务器非常轻松的来获取Cookie

44:37.690 --> 44:38.590
吃不到这一步

44:39.290 --> 44:40.590
服务器在这里

44:40.790 --> 44:42.390
可以获取到Cookie

44:42.590 --> 44:43.690
然后他自动解密

44:43.690 --> 44:44.690
我都不用去管

44:44.690 --> 44:46.590
他自动解密就得到原式信息

44:47.090 --> 44:48.790
好然后就根据查询就完成了

44:48.990 --> 44:49.990
好那么接下来

44:50.990 --> 44:52.090
我们要做一件事

44:52.990 --> 44:54.290
就是要在服务器

44:54.290 --> 44:56.590
去写一个函数

44:57.090 --> 44:58.990
在邮车里边写一个接口

45:00.590 --> 45:03.390
这个接口用get请求就可以访问

45:03.490 --> 45:04.690
请求什么地址

45:04.690 --> 45:06.290
请求互MI

45:06.490 --> 45:07.590
我是谁

45:08.390 --> 45:09.290
请求这个地址

45:12.260 --> 45:13.960
我们要写这么一个接口

45:15.160 --> 45:16.060
我是谁

45:16.760 --> 45:17.560
那么这个东西

45:17.560 --> 45:19.660
我就要根据用户ID

45:20.260 --> 45:23.660
我要得到当前登录的用户信息

45:24.560 --> 45:25.860
得到客户端

45:27.830 --> 45:30.530
当前登录的用户信息

45:30.530 --> 45:32.330
那么首先问大家地的问题

45:34.400 --> 45:36.200
客户端就浏览器

45:37.400 --> 45:40.800
是否需要在地址栏中

45:41.300 --> 45:42.100
地址

45:42.700 --> 45:43.900
就是在query中

45:44.400 --> 45:46.100
传递用户的ID

45:50.760 --> 45:51.360
需不需要

45:53.420 --> 45:55.220
需不需要在query中传递用户的ID

45:55.720 --> 45:56.520
是不需要

45:56.620 --> 45:58.320
而且你不仅是不需要

45:58.320 --> 45:59.720
而且是不能这么做

46:00.020 --> 46:02.020
因为query里边的用户ID是谁都可以传

46:02.820 --> 46:05.520
应该是怎么获取的用户ID

46:05.620 --> 46:07.320
是应该通过Cookie传过来

46:07.920 --> 46:10.320
Cookie里边带过来这个token

46:10.420 --> 46:11.320
你看这个逻辑图

46:11.320 --> 46:12.020
这个逻辑

46:12.520 --> 46:13.920
只要他带过来这个token就表示

46:13.920 --> 46:15.220
你肯定是登录成功了

46:15.520 --> 46:16.620
你只要给我带过来token

46:16.620 --> 46:17.220
为啥呢

46:17.220 --> 46:18.920
因为这个token是服务器颁发的

46:19.220 --> 46:20.620
是服务器以前给力的

46:21.320 --> 46:22.620
只要你把这个token给我带过来

46:22.620 --> 46:24.020
就说明你一定登录成功了

46:24.720 --> 46:25.520
就这么个意思

46:26.020 --> 46:27.420
如果说你这个token没有带过来

46:27.420 --> 46:28.920
就说明你肯定没有登录成功

46:29.720 --> 46:30.820
这就是这么一个逻辑

46:31.120 --> 46:32.620
因为这个token是无法被伪造的

46:32.620 --> 46:33.620
它是加密过后的

46:33.920 --> 46:35.120
所以说在服务器这边

46:35.320 --> 46:36.820
我们就怎么来获取

46:36.820 --> 46:38.420
我们这里先输出Rig

46:38.420 --> 46:39.120
第二什么呢

46:40.020 --> 46:41.120
sand cookies

46:41.920 --> 46:43.020
加密过后的Cookie

46:43.020 --> 46:44.220
因为我们刚才是加密过后的

46:44.220 --> 46:45.520
所以说我们这里要得到的是

46:45.520 --> 46:46.620
加密过后的Cookie

46:46.920 --> 46:48.320
我们来看一下这个东西到底是啥

46:48.720 --> 46:50.920
现在我们去访问一下API

46:51.620 --> 46:52.320
user

46:52.520 --> 46:52.920
who

46:52.920 --> 46:53.520
iMind

46:53.820 --> 46:54.620
去访问一下

46:54.820 --> 46:56.120
看一下服务器输出的结果

46:57.320 --> 46:58.620
是不是留一个token

46:58.620 --> 46:59.220
是不是这个东西

46:59.220 --> 47:00.220
是不是给我们解开了

47:00.420 --> 47:00.720
对吧

47:00.720 --> 47:01.920
它会自动给你减低

47:01.920 --> 47:03.120
那么这一步是不是完成了

47:03.920 --> 47:04.420
这一步

47:05.420 --> 47:06.220
减低token

47:06.220 --> 47:07.420
得到用户ID是完成了

47:07.520 --> 47:09.320
那么接下来我们要做的事情就是

47:09.620 --> 47:10.920
得到这个用户ID

47:11.420 --> 47:12.420
由这儿ID

47:13.620 --> 47:14.420
得到这个用户ID

47:14.420 --> 47:15.220
当然换句话说

47:15.220 --> 47:16.220
说你没有登录

47:16.220 --> 47:16.820
是不是就

47:17.820 --> 47:19.120
sand cookies里边有个token

47:19.120 --> 47:19.620
对吧

47:19.720 --> 47:20.720
是不是拿到这个token

47:20.820 --> 47:21.920
对象里面的token

47:21.920 --> 47:23.220
拿到这个用户ID

47:23.320 --> 47:24.720
那么这个拿到这个ID过后

47:24.720 --> 47:26.420
我们是不是就可以从服务

47:26.620 --> 47:28.220
刚才我们之前那个service里边

47:28.220 --> 47:29.420
去拿这个用户对象

47:29.720 --> 47:31.120
但是有个问题就是

47:31.220 --> 47:32.420
有可能是什么情况

47:32.420 --> 47:33.220
有可能

47:33.620 --> 47:35.020
根本就没有这个用户ID

47:35.020 --> 47:35.520
对吧

47:35.620 --> 47:36.120
说明啥

47:36.120 --> 47:37.920
说明之前就没有登录过

47:38.320 --> 47:39.120
没有登录过

47:40.820 --> 47:41.920
或者是什么

47:41.920 --> 47:43.420
或登录已过期

47:43.420 --> 47:44.120
它没有把Cookie

47:44.120 --> 47:45.720
总之没有把Cookie给你发过来

47:46.020 --> 47:46.920
那么这种情况怎么办

47:46.920 --> 47:48.520
我就给它响应一个错误

47:49.420 --> 47:50.420
dris sand

47:51.220 --> 47:52.220
给它响应一个错误

47:52.220 --> 47:53.120
响应什么错误呢

47:53.420 --> 47:54.720
一个error错误消息

47:57.020 --> 47:58.220
没有登录

47:58.720 --> 48:00.620
或登录已过期

48:01.220 --> 48:02.820
我们要响应一个错误消息

48:03.220 --> 48:04.520
换句话说 else

48:04.620 --> 48:06.220
如果说它已经登录过了

48:06.220 --> 48:06.620
对吧

48:07.120 --> 48:09.120
有用户登录过了

48:09.920 --> 48:10.920
是不是拿到这个用户ID

48:10.920 --> 48:11.820
我们就去怎么样了

48:11.820 --> 48:13.220
就通过这个service

48:14.920 --> 48:17.920
user service get user

48:19.020 --> 48:20.320
把这个ID数传进去

48:20.420 --> 48:21.820
用户ID传进去

48:22.820 --> 48:24.620
那么我们这里await

48:24.620 --> 48:25.420
等待它

48:25.420 --> 48:26.220
等待它过后

48:26.220 --> 48:27.420
是不是拿到这个用户

48:27.420 --> 48:27.820
对吧

48:27.820 --> 48:28.620
拿到这个用户

48:28.620 --> 48:31.420
然后把这个用户再发给客户端

48:31.420 --> 48:33.220
dris sand user

48:33.220 --> 48:34.220
发过去

48:35.220 --> 48:35.820
保存

48:35.820 --> 48:36.620
接下来看一下

48:37.220 --> 48:39.020
你看现在登录成功了

48:39.020 --> 48:40.020
我们之前登录过的

48:40.020 --> 48:41.620
一看是不是拿到这个用户信息了

48:42.020 --> 48:42.620
对不对

48:42.820 --> 48:43.620
ID

48:44.320 --> 48:46.320
账号name age row

48:46.320 --> 48:47.620
是不是拿到这个用户信息了

48:47.820 --> 48:49.520
那如果说我们把这个Cookie删掉

48:49.520 --> 48:50.820
你看我在这里把删掉

48:51.720 --> 48:52.220
OK

48:52.420 --> 48:52.920
删掉

48:53.320 --> 48:53.820
删掉过后

48:53.820 --> 48:54.720
我们刷新

48:54.920 --> 48:56.320
告诉你没有登录

48:56.320 --> 48:57.220
登录一过期

48:57.220 --> 48:57.420
对吧

48:57.420 --> 48:59.020
它就是这样的一个逻辑

48:59.720 --> 49:00.220
有意思

49:00.220 --> 49:00.720
那么这里呢

49:00.720 --> 49:01.920
是不是就可以轻松的搞定了

49:01.920 --> 49:03.320
今天代码没有多少行

49:03.820 --> 49:04.420
有多少行

49:05.020 --> 49:06.120
那么今天来我们再看

49:07.320 --> 49:07.920
照一下这

49:10.000 --> 49:11.800
现在我们讲了服务器获取Cookie了

49:11.800 --> 49:13.400
最后我们简单说一下

49:13.400 --> 49:15.000
在流烂器端操作Cookie

49:15.200 --> 49:17.400
实际上在流烂器端也是可以操作Cookie的

49:17.900 --> 49:19.300
不仅仅是在服务器可以操作

49:19.300 --> 49:20.300
流烂器也可以操作的

49:20.300 --> 49:21.500
我们来看一下流烂器怎么操作

49:21.500 --> 49:22.600
我们再重新登录一下

49:26.430 --> 49:27.030
登录

49:27.430 --> 49:29.330
这边我们写个登革

49:30.030 --> 49:30.930
123 123

49:32.710 --> 49:33.910
123456

49:35.610 --> 49:36.410
登革2

49:37.010 --> 49:37.810
123123

49:38.310 --> 49:39.110
还是成功了

49:41.240 --> 49:42.240
啊登成功了

49:42.340 --> 49:42.740
然后呢

49:42.740 --> 49:45.040
我们现在看在这边流烂器里

49:45.140 --> 49:46.040
我们可以使用

49:46.440 --> 49:47.040
JS

49:47.140 --> 49:47.940
Bulking Mince Cookie

49:47.940 --> 49:49.840
因为它本身的Cookie有保持在流烂器端的

49:49.840 --> 49:51.440
所以说流烂器端的也可以获取

49:52.040 --> 49:53.040
一样是不是可以获取

49:53.040 --> 49:53.440
对吧

49:53.440 --> 49:54.640
两个Cookie对不对

49:54.640 --> 49:55.440
是不是可以获取

49:55.840 --> 49:56.440
而且呢

49:56.440 --> 49:57.840
流烂器端也可以设置的

49:57.840 --> 49:59.140
它也是可以设置的

49:59.340 --> 50:01.440
比方说我们Docky Mince Cookie

50:02.340 --> 50:03.440
把它设置为什么呢

50:03.740 --> 50:04.840
我要把那个

50:04.840 --> 50:06.540
我要打算把这个东西设置一下

50:06.740 --> 50:08.540
把那个Token重新改了

50:08.940 --> 50:09.840
改成123

50:10.040 --> 50:11.140
一看是不是可以设置

50:11.940 --> 50:12.840
设置完了过后了

50:12.840 --> 50:14.740
我们来看一下Docky Mince Cookie

50:15.440 --> 50:15.940
是不是改了

50:15.940 --> 50:17.040
Token是不是被改了

50:17.340 --> 50:17.840
对不对

50:18.540 --> 50:19.140
被更改了

50:19.140 --> 50:20.240
那么说说这些流烂

50:20.240 --> 50:22.840
Cookie是可以在轻松的被更改的流烂器

50:22.840 --> 50:24.640
通过一段简单的阶段就可以改

50:24.940 --> 50:25.740
但是改了过后

50:25.740 --> 50:26.940
服务器肯定是不认识的

50:26.940 --> 50:28.840
我们来再去再去访问这个API

50:29.240 --> 50:30.540
由这忽远看

50:30.840 --> 50:31.140
对吧

50:31.140 --> 50:32.340
他告诉你我没有登录

50:32.340 --> 50:33.240
因为他解析不了了

50:33.240 --> 50:33.940
那个Cookie

50:34.140 --> 50:35.040
他解析不了了

50:35.040 --> 50:36.140
你看密要都不一样

50:36.140 --> 50:37.540
而且他根本就没有讲

50:37.540 --> 50:38.540
你都解析不了了

50:38.540 --> 50:39.640
他就告诉我没有登录

50:40.040 --> 50:40.640
明白的意思吧

50:40.640 --> 50:42.140
Cookie的也可以在流烂器端改

50:42.540 --> 50:43.140
这是

50:45.540 --> 50:45.840
现在呢

50:45.840 --> 50:47.040
我们来再试一下这个

50:47.340 --> 50:48.040
删除Cookie

50:48.040 --> 50:49.640
我们再回到这个登录页面

50:54.000 --> 50:54.800
登录一下

50:54.800 --> 50:55.800
现在我们Cookie有了

50:56.100 --> 50:57.200
Cookie名字

50:57.400 --> 50:58.300
你看是不是有了

50:58.500 --> 51:00.600
然后让我们试着把这个Cookie删一下

51:00.600 --> 51:01.500
看怎么来删啊

51:01.900 --> 51:03.400
删Cookie其实非常简单

51:03.400 --> 51:04.700
你只要把他的过期时间

51:04.700 --> 51:05.900
给他设置一下就完成了

51:06.100 --> 51:06.800
比较token

51:07.200 --> 51:08.100
重新设置一个字

51:08.100 --> 51:08.900
那就没有字吗

51:08.900 --> 51:09.800
不给他设置字了

51:09.800 --> 51:11.300
然后设置一下MixA级

51:11.300 --> 51:12.700
等于0或者是-1

51:12.700 --> 51:14.200
或者总之总之呢

51:14.400 --> 51:15.900
设置一个过去的时间

51:15.900 --> 51:17.000
作为过期时间

51:17.800 --> 51:18.400
一回车

51:18.400 --> 51:19.400
那么现在我们来看一下

51:19.400 --> 51:20.600
Cookie名字里边

51:20.900 --> 51:21.900
是没有一个Cookie的

51:21.900 --> 51:22.500
对不对

51:22.700 --> 51:23.900
然后让我们再去访问

51:24.900 --> 51:25.900
APN

51:25.900 --> 51:26.900
互

51:27.400 --> 51:28.100
User

51:28.100 --> 51:28.900
互安班

51:28.900 --> 51:30.200
所以表示没有登录

51:30.600 --> 51:31.300
对不对

51:31.300 --> 51:32.100
就非常简单

51:32.100 --> 51:32.900
30Cookie

51:32.900 --> 51:33.700
没问题吧

51:35.200 --> 51:36.600
这是关于这个

51:36.600 --> 51:37.800
Cookie的设置

51:37.800 --> 51:38.300
Cookie的设置

51:38.300 --> 51:40.100
能流量切断也可以进行操作的

51:40.200 --> 51:42.400
所以说我们要如果说要助销

51:42.400 --> 51:43.600
助销的本质是什么

51:43.600 --> 51:44.100
助销的本质

51:44.100 --> 51:45.800
就是我们把那个Cookie-R3调

51:45.800 --> 51:46.300
对不对

51:47.300 --> 51:48.700
Cookie-R3调就完成了

51:48.700 --> 51:48.900
好

51:48.900 --> 51:49.600
这是助销

51:50.000 --> 51:50.200
好

51:50.200 --> 51:51.400
这样我们再继续看

51:51.600 --> 51:52.100
最后呢

51:52.100 --> 51:53.100
我们来做练习了

51:55.200 --> 51:56.900
我们来看一下登录的完整逻辑

51:56.900 --> 51:58.800
我们根据这个逻辑能来做这个练习

51:59.200 --> 52:00.100
我们要完成

52:00.100 --> 52:01.800
我们昨天不是有个GS吗

52:02.600 --> 52:04.800
昨天我们的GS说还剩几个函数没有写

52:05.300 --> 52:07.000
你看下面还有几个函数没有写

52:07.000 --> 52:08.400
我们把昨天几个函数写完

52:08.400 --> 52:10.900
那么我们看一下登录的完整逻辑

52:11.700 --> 52:12.800
昨天我们写的登录

52:13.000 --> 52:15.200
API-User请求这个地址

52:15.200 --> 52:16.900
看一下对照代码看一下

52:18.200 --> 52:18.800
登录

52:20.000 --> 52:21.500
昨天曾说请求这个地址

52:21.500 --> 52:22.000
你看一下

52:22.000 --> 52:23.000
是不是请求这个地址

52:23.600 --> 52:25.600
好请求这个地址服务器登录成功了

52:25.600 --> 52:27.500
然后他那边是不是加密的用户ID

52:27.500 --> 52:28.100
得到一个token

52:28.100 --> 52:28.900
我们刚才已经做了

52:28.900 --> 52:29.400
对吧

52:29.400 --> 52:31.500
然后把这个token的通过setcookie

52:31.500 --> 52:32.800
是不是发送给了客户端

52:33.000 --> 52:34.100
发送给了客户端

52:34.400 --> 52:35.800
那么客户端那边是不是

52:35.800 --> 52:37.700
就会自动保存cookie

52:37.700 --> 52:39.000
把这些都已经完成了

52:39.600 --> 52:40.600
自动保存cookie

52:40.700 --> 52:41.800
然后登录成功

52:41.800 --> 52:43.200
我现在要做一个跳转

52:43.500 --> 52:44.500
跳转到

52:45.400 --> 52:46.000
首页

52:46.600 --> 52:47.800
我们昨天是没有跳转的吧

52:47.800 --> 52:49.200
昨天我们只是ERAZ登录成功

52:49.200 --> 52:49.900
没有跳转

52:49.900 --> 52:50.900
那么现在我们要跳转

52:50.900 --> 52:51.800
跳转到首页

52:52.400 --> 52:53.100
location

52:55.780 --> 52:56.680
简单跳转一下就行了

52:56.680 --> 52:58.680
不然这介石里面写的代码进行跳转

52:58.880 --> 52:59.680
看着逻辑啊

52:59.680 --> 53:00.980
登录成功跳转到鞋杠

53:00.980 --> 53:01.880
然后来试一下

53:02.180 --> 53:04.680
成哥2123123登录登录成功

53:05.680 --> 53:06.480
哎呀我这没刷新

53:06.480 --> 53:07.580
把重新来登录一次

53:08.280 --> 53:09.080
成哥2

53:09.280 --> 53:10.780
123123登录成功

53:12.180 --> 53:13.080
就跳转到首页了

53:13.680 --> 53:13.980
对吧

53:13.980 --> 53:15.180
那么现在是什么逻辑呢

53:15.180 --> 53:15.980
我们继续看

53:16.380 --> 53:17.180
那么现在浏览器

53:17.180 --> 53:18.980
是不是要重新去请求首页

53:19.180 --> 53:20.180
请求服务器首页

53:20.180 --> 53:20.780
然后服务器呢

53:20.780 --> 53:21.680
给我一个页面

53:21.680 --> 53:22.980
把首页的页面给我

53:23.080 --> 53:24.980
然后呢接下来浏览器要宣承这个页面

53:24.980 --> 53:26.980
是不是又遇到CSS GS一面解

53:27.280 --> 53:30.980
有多次服务器把这些CSS GS一面解

53:30.980 --> 53:33.180
多次请求多次响应给客户端

53:33.180 --> 53:34.580
那么现在是不是已经到到这了

53:35.580 --> 53:36.280
说到这了

53:36.780 --> 53:38.780
服务器拿到这些CSS GS了啊

53:38.780 --> 53:40.080
那么接下来服务器呢

53:40.080 --> 53:42.980
会执行GS中的互安卖函数

53:43.480 --> 53:44.480
他会执行这个函数

53:44.980 --> 53:46.180
他凭什么会执行这个函数

53:46.180 --> 53:48.080
因为我只在其他的GS里面你写了

53:48.080 --> 53:49.980
他对这个函数有雕用啊

53:49.980 --> 53:51.380
他不是自动执行的啊

53:51.480 --> 53:52.880
他是你自己要去写单嘛

53:52.880 --> 53:53.880
要去雕用这个函数

53:53.980 --> 53:55.080
总之到首页过后

53:55.080 --> 53:57.580
到任何一个页面我都会雕用一次这个互安卖

53:58.780 --> 53:59.780
来打印一下吧

54:00.080 --> 54:00.880
互安卖

54:01.780 --> 54:02.180
保存

54:02.680 --> 54:03.480
我们刷新首页

54:03.680 --> 54:05.880
你看首页是不是会运行这个函数

54:05.880 --> 54:07.280
当然其他页面都会运行啊

54:07.380 --> 54:08.480
这个函数始终都会运行的

54:08.480 --> 54:08.880
你看

54:09.480 --> 54:10.380
对吧都会运行的

54:10.580 --> 54:10.980
好

54:11.380 --> 54:12.480
那么现在咱们到这了

54:12.780 --> 54:13.980
运行互安卖函数

54:13.980 --> 54:15.580
这种互安卖函数要干嘛呢

54:15.780 --> 54:17.380
他要去请求这个地址

54:18.380 --> 54:19.780
这个地址我们刚才已经写好了

54:20.080 --> 54:20.480
对吧

54:21.380 --> 54:23.180
由于浏览器里边有Cookie

54:23.180 --> 54:24.080
他有对应的Cookie

54:24.080 --> 54:26.180
因此他会自动的把这个头肯带过去

54:26.480 --> 54:28.280
因为浏览器里边是不是已经有Cookie了

54:28.780 --> 54:29.480
到Key名字

54:30.180 --> 54:30.680
Cookie

54:30.980 --> 54:32.480
他会自动的把这个Cookie带过去

54:32.480 --> 54:34.680
因此我这里要做的就是非常简单

54:34.680 --> 54:35.380
我去废起

54:36.180 --> 54:37.680
API user

54:38.880 --> 54:39.380
poo

54:39.780 --> 54:40.280
poo

54:40.480 --> 54:40.980
安卖

54:42.080 --> 54:43.080
去请求这个地址就完了

54:43.080 --> 54:43.980
啥都不用给他

54:44.280 --> 54:44.980
啥都不用给他

54:44.980 --> 54:45.580
我等待他

54:46.880 --> 54:48.180
等待服务器的响应

54:48.280 --> 54:49.280
拿到响应之后呢

54:49.280 --> 54:51.580
我再等待把这个服务器的响应结果给我

54:52.280 --> 54:53.680
接受给我

54:53.980 --> 54:55.580
那么这里我这个函数要求

54:55.580 --> 54:56.380
你看这里啊

54:56.380 --> 54:58.580
服务器会给他一个给他一个用户对象

54:58.580 --> 54:58.780
对吧

54:58.780 --> 54:59.780
如果说登录成功了

54:59.780 --> 55:01.180
服务器这边是不是也做了

55:01.180 --> 55:01.980
已经做了

55:01.980 --> 55:02.980
把登录成功之后呢

55:02.980 --> 55:04.180
他就会给他一个用户对象

55:04.280 --> 55:05.580
如果说没有登录成功了

55:05.580 --> 55:06.980
他就会给他一个错误消息

55:07.680 --> 55:08.480
我这里看一下吧

55:08.880 --> 55:09.080
好

55:09.080 --> 55:09.580
那么这里呢

55:09.580 --> 55:10.580
我就说了

55:10.680 --> 55:12.380
如果说没有登录的用户呢

55:12.380 --> 55:13.080
返回now

55:13.080 --> 55:14.380
有的话就返回登录对象

55:14.580 --> 55:16.880
好如果说result里边有error

55:17.180 --> 55:19.180
如果说有值的话表示没有登录成功

55:19.480 --> 55:20.480
之前没有登录

55:21.380 --> 55:22.180
没有登录

55:22.180 --> 55:23.380
或者是登录也过期

55:23.380 --> 55:24.180
已经过期了

55:24.180 --> 55:25.380
那么我们该返回一个now

55:26.080 --> 55:26.780
有登录的话

55:26.780 --> 55:27.980
我们就返回这个result

55:27.980 --> 55:28.880
就是用户对象

55:29.380 --> 55:30.980
我们这户挨卖就写好了

55:31.480 --> 55:31.580
好

55:31.580 --> 55:32.280
咱们看一下

55:33.080 --> 55:33.580
刷新

55:34.080 --> 55:35.380
你看说已经有了这里

55:35.680 --> 55:37.080
那么我其他的函数在干嘛呢

55:37.080 --> 55:37.780
其他的函数呢

55:37.780 --> 55:39.680
我就是把这个返回的结果

55:39.680 --> 55:40.380
然后呢

55:40.680 --> 55:41.780
判断一下有没有值

55:41.780 --> 55:42.480
有值的话

55:42.480 --> 55:44.780
我就把这个地方的动物元素给改了

55:44.780 --> 55:45.580
就这么简单

55:45.880 --> 55:46.580
就完事了

55:47.280 --> 55:47.580
好

55:47.980 --> 55:48.780
那么另外一个呢

55:48.780 --> 55:49.580
就是注销

55:49.880 --> 55:50.980
注销是什么样的功能的

55:50.980 --> 55:52.280
注销的功能太简单了

55:52.880 --> 55:53.580
注销的功能

55:53.680 --> 55:55.580
我们点这个的事件

55:55.580 --> 55:56.480
点这个东西的时候

55:56.480 --> 55:57.480
他就会运行这个函数

55:57.480 --> 55:58.380
我已经写好了

55:58.480 --> 55:59.880
那么点注销的时候怎么写

56:00.180 --> 56:01.580
来你们来写一下

56:01.880 --> 56:02.580
你们写一下

56:07.530 --> 56:08.630
复制token

56:09.330 --> 56:10.230
你好好想一想

56:12.310 --> 56:13.310
token是谁的

56:13.310 --> 56:14.010
你怎么来的

56:14.010 --> 56:14.710
你想一想

56:15.710 --> 56:17.410
是你有账号

56:17.410 --> 56:19.610
有密码去换来的

56:19.610 --> 56:20.010
对不对

56:20.010 --> 56:20.910
换来的token

56:21.610 --> 56:23.410
你有token说明了啥

56:23.610 --> 56:25.210
说明了你已经

56:25.210 --> 56:27.810
具备你已经知道了账号密码

56:29.210 --> 56:30.210
你没有账号密码

56:30.210 --> 56:31.810
你哪来的token的问题是

56:32.410 --> 56:32.910
对不对

56:32.910 --> 56:34.710
那你把你那个token

56:34.710 --> 56:35.810
要去复制给别人

56:35.810 --> 56:37.310
那你是自己做事啊

56:38.510 --> 56:40.310
那这这这这这这怎么能防呢

56:40.310 --> 56:42.810
你token是一定不要暴露给别人的啊

56:42.910 --> 56:44.310
是一定不要暴露给别人的

56:44.810 --> 56:45.710
你有token说明

56:45.710 --> 56:47.610
你肯定是去换的

56:47.610 --> 56:48.910
用账号密码去换的

56:48.910 --> 56:49.510
这个token

56:49.910 --> 56:50.910
你如果说

56:51.310 --> 56:52.210
别人没有账号密码

56:52.210 --> 56:53.310
是拿不到这个token的

56:53.510 --> 56:55.010
那如果说别人跑到你电脑站

56:55.010 --> 56:56.110
把你的token复制走了

56:56.110 --> 56:57.510
那跟服务器有没有什么关系呢

56:57.510 --> 56:58.710
那凭什么怪服务器呢

56:59.410 --> 57:01.010
cookie是不能是不能那个

57:01.010 --> 57:02.310
是不能暴露给别人的

57:04.800 --> 57:06.600
浏览器里边有很多很多的安全线

57:06.600 --> 57:07.600
都是服务为了防止

57:07.600 --> 57:09.200
pookie不小心暴露给别人的

57:10.100 --> 57:12.100
那么这个灯助销是非常简单的

57:12.100 --> 57:14.300
我们刚才可以看到同学写法是正确的

57:14.300 --> 57:15.300
就随便写一个

57:15.300 --> 57:16.600
给把token重新复制

57:16.600 --> 57:16.900
然后呢

57:16.900 --> 57:18.000
把这个max一起啊

57:18.000 --> 57:19.400
设为附一或者零都可以

57:20.400 --> 57:20.800
啊

57:20.900 --> 57:21.300
然后呢

57:21.300 --> 57:23.100
我们再挑转一下挑转的灯路业

57:23.400 --> 57:25.000
因为只要页面一刷新

57:25.000 --> 57:26.600
是不是都呼吸没了

57:26.600 --> 57:27.100
对吧

57:27.300 --> 57:28.800
页面一刷新呼吸是不是没了

57:28.800 --> 57:30.100
cookie没了再调用红暖漫

57:30.100 --> 57:31.900
还有是不是拿不到用户的路信息

57:31.900 --> 57:32.400
对吧

57:33.500 --> 57:34.100
罗锦

57:36.890 --> 57:37.490
包存

57:38.190 --> 57:38.590
好

57:38.990 --> 57:39.690
那么现在呢

57:39.690 --> 57:40.790
我们来试一下啊

57:40.790 --> 57:41.290
刷新

57:41.690 --> 57:43.090
现在是有的对不对啊

57:43.090 --> 57:44.490
点进退出那里

57:45.090 --> 57:45.490
哎

57:46.290 --> 57:47.690
我这里为什么还是要离贩

57:49.090 --> 57:51.790
那我之前的之前的函数是写的有问题啊

57:51.790 --> 57:52.790
我之前那个函数

57:52.790 --> 57:54.090
我看一下我之前的函数啊

57:54.590 --> 57:55.690
那写的是有问题的

57:56.590 --> 57:57.390
我看我找一找啊

57:57.390 --> 57:58.790
这些东西你们直接就直接顾虑

57:59.190 --> 58:00.090
之前的函数有问题

58:00.090 --> 58:01.290
我刚才的函数没问题的

58:02.190 --> 58:02.890
嗯

58:02.890 --> 58:06.740
我们我们这里输出一下啊

58:07.040 --> 58:08.540
我们输出一下这个绿道子

58:10.040 --> 58:11.140
输出一下这个绿道子

58:12.140 --> 58:13.640
我看一下是之前的函数有问题

58:13.640 --> 58:14.540
还有这里的问题

58:15.040 --> 58:15.640
哦

58:15.640 --> 58:16.740
我这里没等待

58:16.740 --> 58:17.340
我明白了

58:17.340 --> 58:18.340
我这里没有等待

58:21.430 --> 58:21.730
啊

58:21.730 --> 58:23.230
那么现在就现在对了对吧

58:23.230 --> 58:26.770
现在对了啊

58:26.770 --> 58:27.670
现在没问题了

58:27.670 --> 58:28.070
对不对

58:28.070 --> 58:29.270
然后我们再登录啊

58:29.270 --> 58:30.470
在登录啊

58:31.170 --> 58:31.770
乘哥

58:32.070 --> 58:32.470
2

58:32.570 --> 58:33.470
1 2 3 1 2 3

58:33.470 --> 58:34.170
点登录

58:34.170 --> 58:34.870
登录成功

58:35.170 --> 58:36.070
好没问题了对吧

58:36.070 --> 58:37.970
然后点退出退出登录

58:37.970 --> 58:39.170
到了登录页过后呢

58:39.570 --> 58:40.370
他又要去换这个

58:40.370 --> 58:42.470
又要去调问这个呼mi函数

58:42.470 --> 58:43.670
又要去换这个头坑

58:43.670 --> 58:44.470
一换到过后呢

58:44.470 --> 58:45.370
就没有这个用户了

58:45.370 --> 58:46.270
因为他已经过期了

58:46.270 --> 58:47.770
他不会把头坑发送过去

58:48.670 --> 58:49.070
好

58:49.070 --> 58:50.470
那么这里是不是完事了

58:50.770 --> 58:51.970
好那么接下来还有个问题

58:51.970 --> 58:52.770
最后一个问题的

58:55.960 --> 58:56.960
最后问题的就是

58:57.160 --> 58:58.160
个人中心业

58:58.160 --> 58:58.960
就这个页面

58:59.360 --> 59:02.060
这个页面必须要登录之后才能访问

59:03.060 --> 59:04.660
他必须要登录之后才能访问

59:04.660 --> 59:04.860
哦

59:04.860 --> 59:05.860
这个函数是多余的

59:05.860 --> 59:06.460
这个函数

59:06.460 --> 59:07.760
这个函数多余的你可以把删了

59:07.760 --> 59:08.860
这个函数好像没用

59:09.260 --> 59:09.860
没用

59:09.860 --> 59:10.260
把删了

59:10.260 --> 59:11.660
我们只需要写这两个函数就行了

59:11.660 --> 59:13.260
注销和户外曼

59:13.260 --> 59:13.960
啊

59:13.960 --> 59:15.860
这个Personal这个页面把删了

59:15.860 --> 59:17.260
跟我们没关系

59:17.260 --> 59:19.060
那么现在的我们要求是

59:19.060 --> 59:19.760
这个页面呢

59:19.760 --> 59:22.060
就必须要是登录成功之后

59:22.060 --> 59:22.860
才能访问

59:22.860 --> 59:24.760
这就说说没问题啊

59:24.760 --> 59:26.060
登录成功过后才能点吗

59:26.060 --> 59:26.560
对不对

59:26.560 --> 59:28.860
但是如果说你们现在没有登录成功

59:28.860 --> 59:29.860
比较说我这一退出

59:30.860 --> 59:31.760
我能不能访问

59:31.760 --> 59:32.460
我刚才在页面呢

59:32.460 --> 59:33.460
我可以得这样子访问

59:35.260 --> 59:36.460
是不是可以这样子访问

59:36.460 --> 59:38.560
尽管说我们页面上没有超链接

59:38.560 --> 59:40.660
但是我们仍然是不是可以可以进去

59:40.660 --> 59:42.260
我们现在要防治这种情况

59:42.260 --> 59:43.460
那么怎么来防治的

59:43.460 --> 59:44.760
原理图给他画出来了

59:50.800 --> 59:51.500
好

59:51.500 --> 59:52.100
看一下啊

59:52.100 --> 59:52.900
我们的原理图

59:53.700 --> 59:55.200
如果说你

59:55.200 --> 59:56.900
首先客户端啊

59:56.900 --> 59:57.700
比方我们现在B

59:57.700 --> 59:58.300
B是什么意思

59:58.300 --> 59:59.300
B就是browser

59:59.300 --> 01:00:00.300
S表示server

01:00:00.300 --> 01:00:02.500
客户端就浏览器和服务器

01:00:02.500 --> 01:00:04.700
浏览器去寻求服务器的这个地址

01:00:04.800 --> 01:00:06.000
是不是请求这个地址

01:00:06.000 --> 01:00:07.800
然后呢服务器那边要干嘛呢

01:00:07.800 --> 01:00:11.200
这个时候他要验证一下这个token

01:00:11.200 --> 01:00:13.000
啊有没有有没有token带过来

01:00:13.000 --> 01:00:14.200
因为我们刚才说了

01:00:14.200 --> 01:00:16.200
请求任何请求任何路径

01:00:17.200 --> 01:00:19.600
浏览器他都会把一个cookie带过去

01:00:19.600 --> 01:00:21.700
包括请求他是不是也会带过去

01:00:21.700 --> 01:00:22.800
如果说你cookie过期了

01:00:22.800 --> 01:00:24.700
或者是没有的话就带不过去了

01:00:24.700 --> 01:00:28.500
那么服务器那边就会写一个中间键的验证一下

01:00:28.500 --> 01:00:30.500
看一下有没有token

01:00:30.500 --> 01:00:32.200
如果说验证没有通过的话

01:00:32.200 --> 01:00:33.000
干嘛呢

01:00:33.000 --> 01:00:34.900
我就给他三年二重定项

01:00:34.900 --> 01:00:37.100
是不是讲过了三年二重定项到login点

01:00:37.100 --> 01:00:38.100
也提不了

01:00:38.100 --> 01:00:40.100
好那么个当客户端去重新请求login点

01:00:40.100 --> 01:00:42.100
而且没有给他回到的路也

01:00:42.100 --> 01:00:43.300
就这么一个逻辑

01:00:43.300 --> 01:00:44.400
那么另一个逻辑的就是

01:00:44.400 --> 01:00:46.100
我之前已经登录成功了

01:00:46.100 --> 01:00:48.000
那么我们在请求服务器的时候呢

01:00:48.000 --> 01:00:50.100
流量器会自动的把token带过去

01:00:50.100 --> 01:00:51.900
这个中间就进入另外一个逻辑

01:00:51.900 --> 01:00:52.700
验证通过

01:00:52.700 --> 01:00:55.500
然后呢移交给后区的中间键

01:00:55.500 --> 01:00:57.500
移交给这个中间键来处理

01:00:57.500 --> 01:00:58.600
没什么意思吧

01:00:58.600 --> 01:01:00.800
啊好那么我们来写一下

01:01:00.800 --> 01:01:01.700
最后点算了啊

01:01:01.700 --> 01:01:02.900
我们再服务端来写一下

01:01:03.900 --> 01:01:05.100
跟客户端没什么关系

01:01:06.900 --> 01:01:07.800
好接下来到这

01:01:08.600 --> 01:01:09.900
音这个是得解释

01:01:11.100 --> 01:01:12.300
嗯写到哪呢

01:01:12.300 --> 01:01:13.200
要我们写到这吧

01:01:13.600 --> 01:01:14.900
我在最开始的时候啊

01:01:14.900 --> 01:01:16.000
在解析完cookie之后

01:01:16.000 --> 01:01:16.700
我们来处理

01:01:17.500 --> 01:01:18.400
我们写一个啊

01:01:18.400 --> 01:01:20.800
app 又是我们这里自定义的中间键

01:01:20.800 --> 01:01:21.200
那么中间键

01:01:21.200 --> 01:01:22.800
我们专门来放一个文件夹吧

01:01:23.600 --> 01:01:25.100
med Wales

01:01:25.800 --> 01:01:26.600
放一个文件夹

01:01:26.600 --> 01:01:27.300
我们在这里呢

01:01:27.300 --> 01:01:28.300
新建个文件

01:01:28.400 --> 01:01:30.500
给他叫做permission

01:01:31.800 --> 01:01:33.400
叫解释啊全线

01:01:34.300 --> 01:01:34.900
验证

01:01:35.700 --> 01:01:36.500
中间键

01:01:36.500 --> 01:01:37.500
我们自己来写一个

01:01:38.700 --> 01:01:39.900
那么这个这个地方呢

01:01:39.900 --> 01:01:41.000
肯定要导出一个函数

01:01:41.900 --> 01:01:43.400
因为中间键本质就是个函数吗

01:01:43.400 --> 01:01:44.100
三个参数

01:01:44.100 --> 01:01:44.700
rex

01:01:44.700 --> 01:01:45.200
next

01:01:45.200 --> 01:01:45.500
对吧

01:01:45.500 --> 01:01:46.700
无非就是三个参数吗

01:01:46.700 --> 01:01:47.700
然后我们在这边呢

01:01:47.700 --> 01:01:48.200
怎么写

01:01:48.200 --> 01:01:49.800
这边我们是不是可以用required

01:01:50.700 --> 01:01:51.300
med Wales

01:01:51.300 --> 01:01:52.700
下面的什么的permission

01:01:52.800 --> 01:01:53.200
对不对

01:01:53.200 --> 01:01:54.100
是不是可以这样的写

01:01:54.800 --> 01:01:55.300
没问题吧

01:01:55.300 --> 01:01:56.200
我们导入这个中间

01:01:56.200 --> 01:01:58.100
那么现在在这个这个中间键来处理

01:01:58.200 --> 01:01:59.800
这个中间键处理的逻辑是什么呢

01:01:59.800 --> 01:02:00.600
逻辑就是

01:02:00.700 --> 01:02:02.800
看一下你有没有头肯带过来

01:02:04.300 --> 01:02:04.800
带过来了

01:02:04.800 --> 01:02:05.600
过后呢

01:02:05.600 --> 01:02:07.700
我就把它解得到用户id

01:02:07.700 --> 01:02:08.400
对不对

01:02:08.400 --> 01:02:09.500
得到用户id

01:02:09.500 --> 01:02:10.300
然后呢

01:02:10.300 --> 01:02:11.200
就表示

01:02:11.400 --> 01:02:12.600
能得到那个用户的话

01:02:12.600 --> 01:02:13.700
就表示已经登录了

01:02:14.200 --> 01:02:15.700
如果说得不到这个用户的话

01:02:15.800 --> 01:02:16.900
就表示没有登录

01:02:16.900 --> 01:02:18.300
那么他的逻辑啊

01:02:18.300 --> 01:02:20.200
跟这里的逻辑是不是一样的

01:02:21.400 --> 01:02:22.100
跟那个

01:02:22.800 --> 01:02:24.200
互安卖的逻辑

01:02:25.900 --> 01:02:26.500
不在这

01:02:28.760 --> 01:02:30.460
你想跟这里的逻辑是不是一样的

01:02:30.660 --> 01:02:31.660
解析cookie

01:02:32.260 --> 01:02:33.560
看cookie里面有没有登录过

01:02:33.560 --> 01:02:33.960
对吧

01:02:33.960 --> 01:02:34.460
登录过了

01:02:34.460 --> 01:02:35.060
我就给怎么样

01:02:35.060 --> 01:02:35.560
怎么样

01:02:35.560 --> 01:02:36.360
没有登录过就怎么样

01:02:36.360 --> 01:02:36.860
怎么样

01:02:36.860 --> 01:02:37.960
对的是一样的

01:02:38.260 --> 01:02:38.960
那么这里是不是

01:02:38.960 --> 01:02:39.860
如果说这样子写的话

01:02:39.860 --> 01:02:41.760
会不会是不是有可能有重复带吗

01:02:41.960 --> 01:02:43.060
那么这样子一来的话

01:02:43.060 --> 01:02:45.160
我们可以再写一个中间键

01:02:46.460 --> 01:02:48.560
没写一边说一边写

01:02:48.860 --> 01:02:49.760
比方说我们这里呢

01:02:49.760 --> 01:02:51.660
就是token

01:02:53.260 --> 01:02:54.060
validate

01:02:57.560 --> 01:02:59.260
或者叫做locking user中间键

01:02:59.260 --> 01:03:00.360
locking user

01:03:00.760 --> 01:03:02.060
登录的用户啊

01:03:02.260 --> 01:03:06.660
获取登录的用户信息的中间键

01:03:07.960 --> 01:03:08.660
看着啊

01:03:08.960 --> 01:03:11.160
出里面让你体会一下中间键的好处

01:03:11.560 --> 01:03:12.960
强大的处理能力

01:03:13.860 --> 01:03:14.860
保存一个函数

01:03:14.960 --> 01:03:15.960
rex

01:03:16.260 --> 01:03:16.760
next

01:03:18.870 --> 01:03:19.570
在银这个手里边

01:03:19.570 --> 01:03:21.870
我们首先解析完cookie之后

01:03:21.870 --> 01:03:23.170
我们首先用这个中间键

01:03:24.070 --> 01:03:24.670
rex

01:03:25.770 --> 01:03:26.370
middleware

01:03:27.570 --> 01:03:28.370
locking user

01:03:29.170 --> 01:03:29.470
好

01:03:29.470 --> 01:03:30.870
这个中间我先放一放

01:03:30.870 --> 01:03:32.170
我们先把这个中间键搞定

01:03:32.470 --> 01:03:32.670
好

01:03:32.670 --> 01:03:33.870
这个中间键里面干嘛呢

01:03:34.070 --> 01:03:36.770
这中间里面要做的事情就是一件事

01:03:37.870 --> 01:03:39.270
如果啊

01:03:40.470 --> 01:03:42.870
能通过cookie

01:03:43.670 --> 01:03:45.870
得到用户

01:03:46.370 --> 01:03:47.870
cookie里面是不是保存了用户id

01:03:47.870 --> 01:03:50.070
如果说能够通过过cookie来得到这个用户

01:03:50.070 --> 01:03:53.370
那么就将用户保存到

01:03:54.070 --> 01:03:55.370
rex user中

01:03:55.970 --> 01:03:56.870
就保存到这里面啊

01:03:56.870 --> 01:03:58.070
你直接往里面加一个属性

01:03:58.070 --> 01:03:58.970
要保存到这里面

01:03:59.470 --> 01:04:01.570
如果不能啊否则

01:04:02.170 --> 01:04:04.170
rex user保存

01:04:06.170 --> 01:04:06.770
没意思吧

01:04:06.770 --> 01:04:07.470
我就这样子

01:04:07.770 --> 01:04:08.470
就这样子做

01:04:08.470 --> 01:04:09.270
那怎么来得到了

01:04:09.270 --> 01:04:10.870
我们刚才是不是已经写过这样的代码了

01:04:10.970 --> 01:04:11.970
把个代码复制一下

01:04:14.800 --> 01:04:15.400
你看一下吧

01:04:16.900 --> 01:04:17.100
好

01:04:17.100 --> 01:04:18.900
我们我们这里呢

01:04:18.900 --> 01:04:20.600
要得到我们这里用个sync

01:04:21.100 --> 01:04:21.900
sync函数

01:04:23.000 --> 01:04:24.900
这里呢得到得到个cookie啊

01:04:24.900 --> 01:04:26.000
token拿到过后

01:04:26.000 --> 01:04:27.000
如果说没有的话

01:04:27.000 --> 01:04:28.300
没有的话是不是没有登录过

01:04:28.400 --> 01:04:29.300
没有登录过的话

01:04:29.300 --> 01:04:31.100
我们是不是rex d2

01:04:31.100 --> 01:04:33.700
什么user等于达

01:04:34.300 --> 01:04:34.900
对不对

01:04:35.100 --> 01:04:36.500
这么这样这里的逻辑

01:04:36.700 --> 01:04:37.100
好

01:04:37.100 --> 01:04:38.600
如果说他登录过了

01:04:39.900 --> 01:04:40.800
他登录过了

01:04:40.800 --> 01:04:42.300
我们把这个这个地方

01:04:43.400 --> 01:04:45.300
rex user就设置为

01:04:46.300 --> 01:04:46.800
设置为啥

01:04:46.800 --> 01:04:48.000
刚才的地方写在这

01:04:49.100 --> 01:04:49.600
在这

01:04:50.300 --> 01:04:52.400
就把rex user设置为user

01:04:53.000 --> 01:04:56.000
就是往这个rex对象里边加一个属性user

01:04:56.500 --> 01:04:57.200
然后呢

01:04:57.200 --> 01:04:58.500
接下来我们调用

01:04:58.700 --> 01:04:59.300
那个

01:05:00.600 --> 01:05:02.000
是不是交给往后边移交

01:05:02.200 --> 01:05:03.100
那么你想一想

01:05:03.100 --> 01:05:03.700
经过了

01:05:03.700 --> 01:05:05.300
只要你经过了这个中间键

01:05:05.500 --> 01:05:07.800
是不是后续的所有的中间键里边

01:05:07.800 --> 01:05:09.700
都能够获取到这个rex user

01:05:10.000 --> 01:05:11.000
是不是都能够获取到

01:05:11.300 --> 01:05:12.200
包括我们这边是吧

01:05:12.200 --> 01:05:13.900
代码就变得非常非常简单了

01:05:14.300 --> 01:05:15.200
有没有登录过了

01:05:15.200 --> 01:05:17.100
如果说rex user有值

01:05:17.100 --> 01:05:18.000
是不是登录过了

01:05:18.600 --> 01:05:20.000
我就给你想印什么了

01:05:20.000 --> 01:05:21.100
我就给你想印

01:05:21.700 --> 01:05:22.800
就一句话就写完了

01:05:23.300 --> 01:05:25.200
都不用写一什么一步了

01:05:25.200 --> 01:05:26.200
我就给你想印什么了

01:05:26.200 --> 01:05:29.400
想印那个rex.user

01:05:30.200 --> 01:05:31.800
换句话说l是不是没有登录过

01:05:31.800 --> 01:05:32.300
没有登录过

01:05:32.300 --> 01:05:33.200
我就给你想印这个

01:05:33.900 --> 01:05:34.100
对吧

01:05:34.100 --> 01:05:35.400
这边代码是不是极其简单了

01:05:35.400 --> 01:05:36.900
这边代码就跟cookie没有什么关系了

01:05:37.200 --> 01:05:37.300
对吧

01:05:37.300 --> 01:05:39.900
我们就在统一在一个地方去解析这个cookie

01:05:41.400 --> 01:05:41.800
在这里

01:05:41.900 --> 01:05:42.900
只要你在这里

01:05:42.900 --> 01:05:44.400
先经过这个中间键

01:05:44.600 --> 01:05:45.600
经过它处理过后

01:05:45.600 --> 01:05:46.700
后续的所有中间键

01:05:46.700 --> 01:05:47.300
这个中间键

01:05:47.300 --> 01:05:48.000
这些中间键

01:05:48.000 --> 01:05:49.300
里边是不是都有机会

01:05:49.300 --> 01:05:50.700
能够获取到rex.user

01:05:50.700 --> 01:05:51.700
看里边有没有值

01:05:51.700 --> 01:05:52.300
能看到吗

01:05:52.300 --> 01:05:52.700
这个代码

01:05:54.300 --> 01:05:56.000
能不能看到这个逻辑

01:05:57.200 --> 01:05:59.200
就通过这个中间键处理的好处在于这

01:05:59.200 --> 01:06:00.400
我们可以把这些逻辑

01:06:00.400 --> 01:06:01.200
重复了逻辑

01:06:01.200 --> 01:06:02.700
抽离到中间键里边去

01:06:03.200 --> 01:06:04.900
设计到一点点的程序思想

01:06:05.500 --> 01:06:05.600
好

01:06:05.600 --> 01:06:07.100
那么接下来我们再回到这个这里

01:06:07.100 --> 01:06:08.200
那么这里就很简单了

01:06:08.200 --> 01:06:08.700
对不对

01:06:08.700 --> 01:06:11.000
我就判断一下rex.user有没有值

01:06:12.200 --> 01:06:12.800
有没有值

01:06:12.800 --> 01:06:13.800
如果说有值

01:06:13.800 --> 01:06:14.700
有值的话

01:06:14.700 --> 01:06:15.900
是不是肯定登录过了

01:06:15.900 --> 01:06:16.400
有权限

01:06:16.400 --> 01:06:16.700
对不对

01:06:17.100 --> 01:06:17.900
有权限

01:06:18.400 --> 01:06:19.100
有权限的话

01:06:19.100 --> 01:06:20.100
我什么都不过

01:06:20.100 --> 01:06:21.100
跟我就没关系了

01:06:21.100 --> 01:06:22.600
我那个时候就结束了

01:06:22.600 --> 01:06:23.600
没关系了

01:06:24.500 --> 01:06:25.200
l是

01:06:26.600 --> 01:06:27.400
没有登录

01:06:28.400 --> 01:06:29.600
l是没有登录

01:06:29.600 --> 01:06:30.200
没有登录

01:06:30.200 --> 01:06:31.800
是不是所有东西都不能访问的

01:06:31.800 --> 01:06:32.500
也不是

01:06:33.700 --> 01:06:35.200
他只是不允许访问什么

01:06:35.200 --> 01:06:36.500
不允许访问这个路径

01:06:36.500 --> 01:06:36.800
对吧

01:06:36.800 --> 01:06:37.900
所以说我们判断一下

01:06:38.800 --> 01:06:40.500
判断一下rex.pass

01:06:42.200 --> 01:06:43.200
rex.pass

01:06:43.200 --> 01:06:44.300
是不是等于什么呢

01:06:44.300 --> 01:06:46.800
等于person.at秒

01:06:46.800 --> 01:06:47.700
是不是等于这个

01:06:47.900 --> 01:06:48.300
对吧

01:06:48.800 --> 01:06:49.600
是不是等于这个

01:06:49.600 --> 01:06:51.000
如果说等于这个的话

01:06:51.000 --> 01:06:51.900
那么怎么办了

01:06:52.600 --> 01:06:53.800
他又没有权限

01:06:53.800 --> 01:06:56.400
他又没有登录过

01:06:56.400 --> 01:06:57.600
他又请求的是这个路径

01:06:57.600 --> 01:06:58.400
是不是不允许

01:06:58.400 --> 01:06:59.400
不允许怎么办

01:07:00.000 --> 01:07:00.600
rex

01:07:03.300 --> 01:07:04.600
设置什么rex

01:07:07.400 --> 01:07:08.800
给他重定向到

01:07:10.000 --> 01:07:10.600
老鸡

01:07:12.000 --> 01:07:12.200
对吧

01:07:12.200 --> 01:07:13.000
我们之前学过了

01:07:13.000 --> 01:07:14.800
通过他是不是可以发生一个302

01:07:15.100 --> 01:07:15.800
重定向

01:07:15.800 --> 01:07:16.800
重定向到这个地址

01:07:17.900 --> 01:07:18.700
l是

01:07:18.700 --> 01:07:20.000
虽然说你没有登录

01:07:20.000 --> 01:07:20.900
但是呢

01:07:21.400 --> 01:07:22.300
虽然说你没有登录

01:07:22.300 --> 01:07:22.800
但是呢

01:07:22.800 --> 01:07:24.600
你访问的不是需要登录的页面

01:07:24.700 --> 01:07:25.600
那么我就ok

01:07:25.700 --> 01:07:26.400
还是next

01:07:27.100 --> 01:07:28.100
罗技术写完了

01:07:28.500 --> 01:07:29.500
全线线的总念件

01:07:29.800 --> 01:07:30.500
就写完了

01:07:31.200 --> 01:07:33.000
那么我们现在看一下啊

01:07:33.500 --> 01:07:34.700
现在在访问这个person

01:07:36.700 --> 01:07:37.800
现在访问刷新

01:07:38.000 --> 01:07:39.000
是不是跑到登录去了

01:07:39.000 --> 01:07:39.200
对吧

01:07:39.200 --> 01:07:41.200
你没有你没有没有能力去访问他

01:07:42.100 --> 01:07:42.700
person

01:07:44.000 --> 01:07:44.900
跑到登录去了

01:07:45.400 --> 01:07:45.600
好

01:07:45.600 --> 01:07:46.700
那么我现在最后呢

01:07:46.700 --> 01:07:47.700
问大家一个问题

01:07:47.700 --> 01:07:49.000
看大家有没有理解啊

01:07:49.000 --> 01:07:49.900
理解这一块

01:07:50.200 --> 01:07:51.800
刚才我们这里的302一个函数啊

01:07:51.800 --> 01:07:54.400
这个函数是在person的这个页面运行的

01:07:54.500 --> 01:07:56.300
那么如果说我在这个函数里面

01:07:56.300 --> 01:07:57.400
输出一个123

01:07:57.400 --> 01:07:59.100
那么请问这个123

01:07:59.900 --> 01:08:00.700
三个选项

01:08:01.900 --> 01:08:02.700
选项A

01:08:02.900 --> 01:08:03.700
选项A

01:08:04.700 --> 01:08:06.300
输出在服务器

01:08:07.200 --> 01:08:08.100
选项B

01:08:09.100 --> 01:08:10.900
输出在浏览器

01:08:11.500 --> 01:08:12.400
选项C

01:08:13.800 --> 01:08:14.700
不会输出

01:08:18.110 --> 01:08:19.010
来啊选吧

01:08:25.470 --> 01:08:26.070
减几啊

01:08:26.770 --> 01:08:27.570
是不是选C

01:08:27.570 --> 01:08:29.570
对不对根本就不会输出

01:08:29.670 --> 01:08:30.670
一看这个逻辑

01:08:32.580 --> 01:08:33.280
啊哦

01:08:33.280 --> 01:08:34.880
当然我要潜力师没有登录啊

01:08:34.880 --> 01:08:35.380
我没有登录

01:08:35.380 --> 01:08:36.480
我现在是不是没有登录

01:08:36.480 --> 01:08:36.880
对吧

01:08:36.880 --> 01:08:37.580
这不会输出

01:08:37.580 --> 01:08:38.480
你看这个逻辑吗

01:08:38.780 --> 01:08:40.480
我访问person的点一天没有

01:08:40.780 --> 01:08:43.180
浏览器根本就没有给我person的这个页面

01:08:43.180 --> 01:08:44.380
连页面都没有给我

01:08:44.380 --> 01:08:45.980
他直接给我了一个302重定项

01:08:45.980 --> 01:08:47.080
让我重新去访问

01:08:47.080 --> 01:08:48.080
noggin.it没有

01:08:48.680 --> 01:08:48.880
对吧

01:08:48.880 --> 01:08:50.480
那所以person的页面都没有给我

01:08:50.480 --> 01:08:52.380
根本就不要说这个页面里边的GS

01:08:52.580 --> 01:08:53.880
根本就不会运行啊

01:08:53.880 --> 01:08:56.180
浏览器直接去访问noggin.it没有去了

01:08:56.180 --> 01:08:58.080
所以这个页面根本就到不了浏览器啊

01:08:58.480 --> 01:08:59.580
根本就不会运行

01:09:00.280 --> 01:09:03.890
让你看看

01:09:04.490 --> 01:09:05.590
麦 去访问person哦

01:09:07.460 --> 01:09:09.060
那他挠练音uc又见鬼了

01:09:09.140 --> 01:09:09.980
不可能运行的

01:09:10.460 --> 01:09:12.360
好那么现在我们只有登录成功之后

01:09:12.660 --> 01:09:14.660
成歌2 123 123

01:09:15.060 --> 01:09:16.000
登录成功之后

01:09:17.940 --> 01:09:18.260
哎

01:09:18.440 --> 01:09:19.440
福绪崩了吗

01:09:20.040 --> 01:09:20.540
等一下

01:09:24.320 --> 01:09:26.220
services is not defined

01:09:26.220 --> 01:09:27.220
哦 这里

01:09:27.520 --> 01:09:28.120
哦 这里

01:09:28.980 --> 01:09:30.120
这里还写的

01:09:30.120 --> 01:09:30.920
loggin u在这里

01:09:30.920 --> 01:09:31.880
还有services

01:09:32.180 --> 01:09:32.980
services

01:09:35.570 --> 01:09:37.470
services require

01:09:38.470 --> 01:09:39.970
到处啊 services

01:09:39.970 --> 01:09:44.430
好 重新来

01:09:44.430 --> 01:09:46.430
现在重新来

01:09:46.430 --> 01:09:47.430
这里

01:09:47.430 --> 01:09:49.430
OK 给推出重新来一次

01:09:49.430 --> 01:09:50.430
成哥

01:09:50.430 --> 01:09:52.430
1 2 3 1 2 3 成功

01:09:53.430 --> 01:09:54.430
没问题了

01:09:54.430 --> 01:09:55.430
那么现在就可以访问了

01:09:55.430 --> 01:09:56.430
对吧 现在可以访问了

01:09:56.430 --> 01:09:57.430
如果说你推出登东过后

01:09:57.430 --> 01:09:58.430
再去访问这个parsing了

01:09:58.430 --> 01:09:59.430
就访问不了了

01:09:59.430 --> 01:10:00.430
好 那么现在就只行

01:10:00.430 --> 01:10:01.430
这么一个效果了

01:10:01.430 --> 01:10:03.430
对吧 这就是一个完整的页面的

01:10:03.430 --> 01:10:05.430
登录 一个基本的功能

01:10:05.430 --> 01:10:07.430
这里再说一个

01:10:07.430 --> 01:10:09.430
最后一个点就是关于这里

01:10:09.430 --> 01:10:11.430
这里的

01:10:11.430 --> 01:10:12.430
像我们网站里边

01:10:12.430 --> 01:10:14.430
有可能有很多这样的页面

01:10:14.430 --> 01:10:15.430
有很多这样的页面

01:10:15.430 --> 01:10:17.430
都必须要登录之后才能访问的

01:10:17.430 --> 01:10:18.430
当然你这样子

01:10:18.430 --> 01:10:20.430
可以把它写成一个数组

01:10:20.430 --> 01:10:21.430
在这里写成一个数组

01:10:21.430 --> 01:10:22.430
哪些页面是需要

01:10:22.430 --> 01:10:23.430
登录之后才能访问的

01:10:23.430 --> 01:10:24.430
那么你这里

01:10:24.430 --> 01:10:26.430
是不是可以循环这个数组来判断

01:10:26.430 --> 01:10:27.430
看当前的路径

01:10:27.430 --> 01:10:28.430
有没有命中这个数组

01:10:28.430 --> 01:10:30.430
对吧 比方说没写个数组

01:10:30.430 --> 01:10:32.430
这个其实也很好写

01:10:35.430 --> 01:10:37.430
需要登录之后才能访问的

01:10:38.430 --> 01:10:40.430
然后写个数组

01:10:42.430 --> 01:10:43.430
比方说新闻页面

01:10:43.430 --> 01:10:45.430
新闻页面也必须要登录之后才能访问

01:10:45.430 --> 01:10:47.430
比方说没写两个

01:10:47.430 --> 01:10:49.430
那么这边我就这样判断

01:10:50.430 --> 01:10:51.430
Include

01:10:51.430 --> 01:10:53.430
是不是包含Rigged Pass

01:10:53.430 --> 01:10:54.430
对吧

01:10:54.430 --> 01:10:56.430
数组里边是不是包含这一下

01:10:56.430 --> 01:10:57.430
如果说能匹配上

01:10:57.430 --> 01:10:58.430
能匹配上的话

01:10:58.430 --> 01:10:59.430
那么说明你

01:10:59.430 --> 01:11:00.430
又没有登录

01:11:00.430 --> 01:11:01.430
又能匹配上

01:11:01.430 --> 01:11:02.430
那么你肯定是没有全线访问的

01:11:02.430 --> 01:11:03.430
我就给你重新一下

01:11:03.430 --> 01:11:05.430
好 保存

01:11:05.430 --> 01:11:06.430
现在你看

01:11:06.430 --> 01:11:07.430
如果说没有登录的话

01:11:07.430 --> 01:11:08.430
连新闻页都不能访问的

01:11:08.430 --> 01:11:09.430
你看 点不进去了

01:11:09.430 --> 01:11:10.430
对吧

01:11:10.430 --> 01:11:11.430
服务器不断的给我重新一下

01:11:11.430 --> 01:11:12.430
重新掉

01:11:12.430 --> 01:11:13.430
重新下到这个罗金页面

01:11:13.430 --> 01:11:14.430
对吧

01:11:14.430 --> 01:11:15.430
那么现在只要登录之后

01:11:15.430 --> 01:11:16.430
就可以访问了

01:11:16.430 --> 01:11:17.430
是可以控制的

01:11:19.940 --> 01:11:20.940
现在新闻页面

01:11:20.940 --> 01:11:21.940
就可以访问了

01:11:21.940 --> 01:11:22.940
那意思吧

01:11:22.940 --> 01:11:24.940
OK 这就是关于这个

01:11:25.940 --> 01:11:26.940
我们完整的网站

01:11:26.940 --> 01:11:27.940
对吧

01:11:27.940 --> 01:11:28.940
这个网站虽然没什么东西

01:11:28.940 --> 01:11:30.940
但是也能说明

01:11:30.940 --> 01:11:31.940
很多很多的问题

01:11:33.940 --> 01:11:35.940
好 最后我给大家写

01:11:35.940 --> 01:11:36.940
一个图片

01:11:36.940 --> 01:11:42.810
我要叫做知识的分类

01:11:42.810 --> 01:11:43.810
咱们学习开发

01:11:44.810 --> 01:11:46.810
其实就是在这四个里边

01:11:46.810 --> 01:11:47.810
不断的学习

01:11:48.810 --> 01:11:49.810
很多同学呢

01:11:49.810 --> 01:11:50.810
把目光的重点呢

01:11:50.810 --> 01:11:53.810
是放到这前面两个地方的

01:11:53.810 --> 01:11:55.810
实际上我们真正的学习

01:11:55.810 --> 01:11:56.810
开发的重点

01:11:56.810 --> 01:11:57.810
是在下面这两个地方

01:11:57.810 --> 01:11:59.810
我们一层一层说

01:12:00.810 --> 01:12:02.810
最下面这个东西

01:12:02.810 --> 01:12:03.810
叫做规范协议标准

01:12:03.810 --> 01:12:05.810
它跟代码一毛钱关系没有

01:12:05.810 --> 01:12:06.810
一点关系都没有

01:12:07.810 --> 01:12:08.810
这些东西都是

01:12:08.810 --> 01:12:09.810
世界标准组织

01:12:09.810 --> 01:12:11.810
或者是什么欧洲

01:12:11.810 --> 01:12:12.810
计算机制造商协会

01:12:12.810 --> 01:12:14.810
一些标准组织

01:12:14.810 --> 01:12:15.810
它就在那里

01:12:15.810 --> 01:12:16.810
我们平常说学生用

01:12:16.810 --> 01:12:17.810
同术的话讲两句

01:12:17.810 --> 01:12:19.810
它只逼逼不干事

01:12:19.810 --> 01:12:20.810
它就在那里说

01:12:20.810 --> 01:12:21.810
它啥事不干

01:12:21.810 --> 01:12:22.810
就说你应该怎么样

01:12:22.810 --> 01:12:23.810
你们应该怎么样

01:12:23.810 --> 01:12:24.810
你们应该怎么样

01:12:24.810 --> 01:12:25.810
它就是制定标准

01:12:25.810 --> 01:12:26.810
制定协议

01:12:26.810 --> 01:12:27.810
制定规范

01:12:27.810 --> 01:12:29.810
像我们的ES代码

01:12:29.810 --> 01:12:30.810
就是ES ECMAScript

01:12:30.810 --> 01:12:31.810
就是一个语言标准

01:12:31.810 --> 01:12:32.810
它告诉你

01:12:32.810 --> 01:12:34.810
应该怎么样去说话

01:12:35.810 --> 01:12:36.810
标准加发也会告诉你

01:12:36.810 --> 01:12:37.810
它应该怎么样去说话

01:12:37.810 --> 01:12:39.810
这些都是标准 协议和规范

01:12:39.810 --> 01:12:40.810
包括我们的ATTP

01:12:40.810 --> 01:12:41.810
都是规范

01:12:41.810 --> 01:12:42.810
它跟具体的技术

01:12:42.810 --> 01:12:43.810
没有关系

01:12:43.810 --> 01:12:44.810
它跟那个

01:12:44.810 --> 01:12:46.810
理运行的环境没有关系

01:12:47.810 --> 01:12:48.810
如果说

01:12:48.810 --> 01:12:50.810
你要去分析一个问题

01:12:50.810 --> 01:12:52.810
注意成熟的分析方式

01:12:52.810 --> 01:12:53.810
是要从这个地方

01:12:53.810 --> 01:12:54.810
去入手去分析

01:12:54.810 --> 01:12:55.810
看这个问题

01:12:55.810 --> 01:12:57.810
在这一套规范下面

01:12:57.810 --> 01:12:58.810
我能不能解决

01:12:58.810 --> 01:12:59.810
理论上能不能解决

01:12:59.810 --> 01:13:00.810
理论上能解决

01:13:00.810 --> 01:13:02.810
它始至八九都能解决

01:13:03.810 --> 01:13:04.810
如果说这里解决不了了

01:13:04.810 --> 01:13:06.810
那全世界没有人能救你了

01:13:06.810 --> 01:13:08.810
要么自己去出一套新的规范

01:13:08.810 --> 01:13:09.810
因为你这东西

01:13:09.810 --> 01:13:11.810
跟规范都有违背了

01:13:11.810 --> 01:13:13.810
只能去出一套新的规范

01:13:13.810 --> 01:13:15.810
来去解决这个问题

01:13:15.810 --> 01:13:16.810
要么就对它进行改进

01:13:16.810 --> 01:13:17.810
比方说现在我们

01:13:17.810 --> 01:13:18.810
我们国家的华为

01:13:18.810 --> 01:13:19.810
不觉得做什么

01:13:19.810 --> 01:13:20.810
对吧

01:13:20.810 --> 01:13:21.810
5G的规范

01:13:21.810 --> 01:13:22.810
很多都是华为的

01:13:22.810 --> 01:13:24.810
以前的

01:13:24.810 --> 01:13:25.810
绝大部分规范

01:13:25.810 --> 01:13:26.810
标准都是别人

01:13:26.810 --> 01:13:27.810
都是国外的人治病的

01:13:27.810 --> 01:13:28.810
现在我们

01:13:28.810 --> 01:13:29.810
逐渐的也有自己的规范

01:13:30.810 --> 01:13:31.810
在规范上边

01:13:31.810 --> 01:13:33.810
就开始有实现了

01:13:33.810 --> 01:13:34.810
就是得有一些人

01:13:34.810 --> 01:13:35.810
把他真的得应用到

01:13:35.810 --> 01:13:37.810
实际的情况中去

01:13:37.810 --> 01:13:38.810
于是就出现了环境

01:13:38.810 --> 01:13:40.810
比方说我们的漏德环境

01:13:40.810 --> 01:13:41.810
实现了什么规范

01:13:41.810 --> 01:13:42.810
实现了ATTP规范

01:13:42.810 --> 01:13:44.810
实现了ATTP IP协议

01:13:44.810 --> 01:13:47.810
实现了ES语言规范

01:13:47.810 --> 01:13:48.810
对吧

01:13:48.810 --> 01:13:49.810
它是实现规范的

01:13:49.810 --> 01:13:50.810
都是环境

01:13:51.810 --> 01:13:52.810
环境就是在去实现

01:13:52.810 --> 01:13:53.810
这些规范

01:13:53.810 --> 01:13:54.810
标准的

01:13:54.810 --> 01:13:55.810
那么变成了

01:13:55.810 --> 01:13:57.810
我们真正可以运行的东西了

01:13:57.810 --> 01:13:59.810
并且是可以开发的东西的

01:13:59.810 --> 01:14:00.810
我们平时开发的是

01:14:00.810 --> 01:14:03.810
至少都是在这个环境上开发

01:14:04.810 --> 01:14:05.810
你们可能这一辈子

01:14:05.810 --> 01:14:06.810
都不会去接触

01:14:06.810 --> 01:14:08.810
自己去实现一个规范

01:14:08.810 --> 01:14:09.810
一般不会接触

01:14:09.810 --> 01:14:10.810
我们一般都是别人给你

01:14:10.810 --> 01:14:11.810
实现了好的一个规范

01:14:11.810 --> 01:14:12.810
它形成了一个环境

01:14:12.810 --> 01:14:14.810
我们在这个环境里边去开发

01:14:14.810 --> 01:14:16.810
包括我们漏德里边的一些

01:14:16.810 --> 01:14:17.810
内置的模块

01:14:17.810 --> 01:14:18.810
它都是环境里边

01:14:18.810 --> 01:14:20.810
它提供了一些API

01:14:20.810 --> 01:14:21.810
这里说的API

01:14:21.810 --> 01:14:22.810
不是说远程访问那个API

01:14:22.810 --> 01:14:23.810
只是一些对象

01:14:23.810 --> 01:14:24.810
一些方法

01:14:24.810 --> 01:14:25.810
对吧

01:14:25.810 --> 01:14:26.810
公理使用的

01:14:26.810 --> 01:14:27.810
就是环境

01:14:27.810 --> 01:14:28.810
但它如果说使用

01:14:28.810 --> 01:14:29.810
它原生了环境的话

01:14:29.810 --> 01:14:31.810
我忘不是那么好用

01:14:31.810 --> 01:14:32.810
不管你是学哪门语言

01:14:32.810 --> 01:14:33.810
一般不会使用

01:14:33.810 --> 01:14:35.810
它原生的环境里边的东西

01:14:35.810 --> 01:14:36.810
一般会使用一些第三方库

01:14:36.810 --> 01:14:38.810
比方说浏览器环境里边有什么

01:14:38.810 --> 01:14:39.810
解query

01:14:39.810 --> 01:14:40.810
这些第三方库

01:14:40.810 --> 01:14:41.810
或者什么Easy UI

01:14:41.810 --> 01:14:42.810
不止drag

01:14:42.810 --> 01:14:43.810
这些东西

01:14:43.810 --> 01:14:44.810
包括漏德环境里边

01:14:44.810 --> 01:14:45.810
所以也有很多第三方库

01:14:45.810 --> 01:14:46.810
对吧

01:14:46.810 --> 01:14:47.810
包括Express

01:14:47.810 --> 01:14:48.810
也是第三方库

01:14:48.810 --> 01:14:49.810
第三方库

01:14:49.810 --> 01:14:50.810
基本上还有第三方库

01:14:50.810 --> 01:14:51.810
Cookie Poser

01:14:51.810 --> 01:14:52.810
这些东西

01:14:52.810 --> 01:14:53.810
有很多很多的第三方库

01:14:53.810 --> 01:14:55.810
它给你解决

01:14:55.810 --> 01:14:57.810
某一些长期中的具体问题

01:14:57.810 --> 01:14:58.810
比方说刚才看到的

01:14:58.810 --> 01:14:59.810
Cookie Poser

01:14:59.810 --> 01:15:00.810
所以解决的是

01:15:01.810 --> 01:15:02.810
关于Cookie的问题

01:15:02.810 --> 01:15:03.810
对吧

01:15:03.810 --> 01:15:04.810
那么它给你提供了很多天

01:15:04.810 --> 01:15:05.810
告诉大家

01:15:05.810 --> 01:15:06.810
像这个地方

01:15:06.810 --> 01:15:07.810
就没有那么重要了

01:15:07.810 --> 01:15:08.810
因为它已经不涉及到

01:15:08.810 --> 01:15:09.810
任何原地的

01:15:09.810 --> 01:15:10.810
原地权在下面

01:15:10.810 --> 01:15:12.810
这上面就是给你封装了一下

01:15:12.810 --> 01:15:13.810
因为你如果说

01:15:13.810 --> 01:15:14.810
觉得它不爽的话

01:15:14.810 --> 01:15:15.810
你完全可以自己封装

01:15:16.810 --> 01:15:17.810
所以很多同学觉得

01:15:17.810 --> 01:15:18.810
这里边

01:15:18.810 --> 01:15:19.810
如果说这里面

01:15:19.810 --> 01:15:20.810
没有给你提供相应的API

01:15:20.810 --> 01:15:21.810
我就做不了了

01:15:21.810 --> 01:15:22.810
什么问题

01:15:22.810 --> 01:15:24.810
就是它不知道下边的东西

01:15:24.810 --> 01:15:25.810
它实际上

01:15:25.810 --> 01:15:26.810
现在下边的东西给你封装的

01:15:26.810 --> 01:15:27.810
如果说你知道

01:15:27.810 --> 01:15:28.810
下边的东西的话

01:15:28.810 --> 01:15:29.810
你肯定可以解决

01:15:29.810 --> 01:15:30.810
大不了不用它

01:15:30.810 --> 01:15:31.810
或者在它基础上

01:15:31.810 --> 01:15:33.810
重新去开发一些东西

01:15:33.810 --> 01:15:35.810
然后再往上的就是框架了

01:15:36.810 --> 01:15:38.810
框架就是集成了大量的

01:15:38.810 --> 01:15:39.810
第三方库

01:15:39.810 --> 01:15:40.810
把我们平时常用的

01:15:40.810 --> 01:15:42.810
跟我们要做一个网站

01:15:42.810 --> 01:15:43.810
或者是做一个什么玩意儿

01:15:43.810 --> 01:15:45.810
做一个聊天室

01:15:45.810 --> 01:15:46.810
相关的

01:15:46.810 --> 01:15:47.810
我们可能会用到的

01:15:47.810 --> 01:15:48.810
一些第三方库

01:15:48.810 --> 01:15:49.810
全部给你整合起来

01:15:49.810 --> 01:15:50.810
然后并且形成了

01:15:50.810 --> 01:15:51.810
一套开发规范

01:15:51.810 --> 01:15:53.810
让你应该怎么样去开发

01:15:54.810 --> 01:15:56.810
更加地简洁的

01:15:56.810 --> 01:15:57.810
有些同学

01:15:57.810 --> 01:15:58.810
如果说

01:15:58.810 --> 01:15:59.810
经过了那种正规的学习

01:15:59.810 --> 01:16:00.810
方式的学习的话

01:16:00.810 --> 01:16:01.810
很多东西只能停留在这

01:16:01.810 --> 01:16:02.810
只能停留在

01:16:02.810 --> 01:16:03.810
怎么去使用一个框架

01:16:04.810 --> 01:16:05.810
反而这个框架

01:16:05.810 --> 01:16:07.810
稍微有一点解决不了的问题

01:16:07.810 --> 01:16:08.810
它就完全不知道怎么办了

01:16:08.810 --> 01:16:09.810
因为它完全不知道

01:16:09.810 --> 01:16:10.810
下边是怎么回事

01:16:10.810 --> 01:16:11.810
它只能学习

01:16:11.810 --> 01:16:12.810
这个框架里边的东西

01:16:12.810 --> 01:16:13.810
所以这就是

01:16:13.810 --> 01:16:14.810
我们平时跟同学们说

01:16:14.810 --> 01:16:16.810
为什么说API不重要

01:16:16.810 --> 01:16:18.810
因为API太过于上层了

01:16:18.810 --> 01:16:19.810
而且API

01:16:19.810 --> 01:16:20.810
如果说你理解到

01:16:20.810 --> 01:16:21.810
下面的原理

01:16:21.810 --> 01:16:22.810
API纷纷的去看得懂

01:16:22.810 --> 01:16:23.810
你都不用去学

01:16:23.810 --> 01:16:24.810
你直接拿一个文档

01:16:24.810 --> 01:16:25.810
来对照一个玩意儿

01:16:25.810 --> 01:16:26.810
我要干嘛

01:16:26.810 --> 01:16:27.810
根据我这个人的原理

01:16:27.810 --> 01:16:28.810
我要做什么事

01:16:28.810 --> 01:16:29.810
我看一下

01:16:29.810 --> 01:16:30.810
他有没有提供相应的API

01:16:30.810 --> 01:16:31.810
一看一下就明白了

01:16:31.810 --> 01:16:32.810
迅速的瞬间就明白了

01:16:32.810 --> 01:16:35.810
而不是通过API去学习原理

01:16:35.810 --> 01:16:37.810
应该是通过原理去学习API

01:16:37.810 --> 01:16:38.810
原来的意思吧

01:16:38.810 --> 01:16:40.810
这是我们的学习方式

01:16:40.810 --> 01:16:41.810
给大家看一个图

01:16:41.810 --> 01:16:42.810
希望大家对整个开发的

01:16:42.810 --> 01:16:44.810
从一个更高的角度去

01:16:44.810 --> 01:16:45.810
有一个认识

01:16:46.810 --> 01:16:47.810
其他的我没有什么

01:16:48.810 --> 01:16:49.810
讲得了

01:16:50.810 --> 01:16:52.810
好 大家还有什么问题

01:16:52.810 --> 01:16:53.810
为什么问题

01:16:54.810 --> 01:17:00.230
为啥问题

01:17:01.230 --> 01:17:02.230
为啥问题

01:17:02.230 --> 01:17:03.230
咱们就

01:17:03.230 --> 01:17:04.230
哎呀

01:17:04.230 --> 01:17:05.230
环绕的时光总是过了太快

01:17:05.230 --> 01:17:07.230
又到时间说拜拜

01:17:07.230 --> 01:17:08.230
那么咱们就下个月

01:17:08.230 --> 01:17:10.230
几讯营再见了

01:17:10.230 --> 01:17:11.230
但是我更加

01:17:11.230 --> 01:17:12.230
希望的是

01:17:12.230 --> 01:17:13.230
大家能够

01:17:13.230 --> 01:17:14.230
进入咱们的后期课

01:17:14.230 --> 01:17:16.230
能够有系统的去学习

01:17:16.230 --> 01:17:18.230
当然得有这个条件

01:17:18.230 --> 01:17:20.230
你们执行很良考虑

01:17:21.230 --> 01:17:25.230
猫故事如何连接远程数据库

01:17:25.230 --> 01:17:27.230
就是连接组继名编

01:17:27.230 --> 01:17:28.230
编一下就完事了

01:17:29.230 --> 01:17:32.230
猫故事的安全协议不一样

01:17:32.230 --> 01:17:33.230
我后期课有讲

01:17:33.230 --> 01:17:35.230
我这两天正在录猫故事

01:17:35.230 --> 01:17:36.230
这两天

01:17:36.230 --> 01:17:38.230
因为这两天才上了个集训营

01:17:38.230 --> 01:17:39.230
所以我主要集训在这

01:17:39.230 --> 01:17:41.230
这边集训上完过后

01:17:41.230 --> 01:17:42.230
马上要去录猫故事

01:17:42.230 --> 01:17:43.230
如果说你是我们后期学员的话

01:17:43.230 --> 01:17:44.230
你关注一下

01:17:44.230 --> 01:17:45.230
应该就几天就录好了

01:17:45.230 --> 01:17:47.230
我后面也会说一下

01:17:47.230 --> 01:17:48.230
一般来说猫故事

01:17:48.230 --> 01:17:49.230
不要去远程

01:17:49.230 --> 01:17:50.230
不要去远程

01:17:50.230 --> 01:17:51.230
就很去处理的

01:17:51.230 --> 01:17:52.230
一般不要远程

01:17:52.230 --> 01:17:54.230
除非你要搭个集群

01:17:54.230 --> 01:17:57.230
猫故事本身就是能够处理大量数据的

01:17:57.230 --> 01:17:59.230
好 我们就说到这了吧

