WEBVTT

00:00.000 --> 00:02.000
哈喽哈喽 同学们大家好啊

00:02.000 --> 00:04.000
又来到今天呢 美丽题的大一时间啊

00:04.000 --> 00:05.000
我是你们丁老师

00:05.000 --> 00:06.000
ok 来看看今天题目吧

00:06.000 --> 00:08.000
今天题目的战友一看有些长啊

00:08.000 --> 00:10.000
别怕 咱们一点来分析

00:10.000 --> 00:12.000
呃 问这段带码的结果是什么

00:12.000 --> 00:13.000
那我们看吧

00:13.000 --> 00:15.000
首先声明一个dance等于一千

00:15.000 --> 00:17.000
没什么说的 单纯的辩量声明

00:17.000 --> 00:19.000
请接着 定一个对象opjack

00:19.000 --> 00:21.000
呃 opg 等于一个对象里面有dance

00:21.000 --> 00:23.000
属性直微时 声明了一个ifn寒树

00:23.000 --> 00:25.000
呃 这个 这个寒树呢

00:25.000 --> 00:27.000
行参式ifn 然后让这个ifn执行

00:27.000 --> 00:30.000
说明ifn 我们接下来传来是一个参数的

00:30.000 --> 00:31.000
呃 是一个寒树 对吧

00:31.000 --> 00:33.000
然后让arguments0 执行

00:33.000 --> 00:35.000
当我们看到这样的同学们说

00:35.000 --> 00:37.000
哎 考点是什么 这个关于arguments的一个考点哈

00:37.000 --> 00:39.000
别着急 接着往下看

00:39.000 --> 00:40.000
那这个对象声明完之后

00:40.000 --> 00:41.000
又声明了一个ifn寒树

00:41.000 --> 00:43.000
这个ifn寒树干嘛呢

00:43.000 --> 00:46.000
呃 这个console 输出this and this

00:46.000 --> 00:47.000
那看到这道题里面

00:47.000 --> 00:49.000
不仅有arguments 同时还有this的

00:49.000 --> 00:51.000
哎 这样的一个考点哈

00:51.000 --> 00:52.000
那先看 通过流产器

00:52.000 --> 00:54.000
我们先看看它的结果是什么

00:54.000 --> 00:55.000
来刷新

00:55.000 --> 00:56.000
哎 一千和四

00:56.000 --> 00:57.000
对吧

00:57.000 --> 00:59.000
呃 那在这我们知道

00:59.000 --> 01:01.000
哎 欧币接点ifn执行

01:01.000 --> 01:03.000
传来 还弱干个参数

01:03.000 --> 01:06.000
哎 那在这个

01:06.000 --> 01:08.000
也就是说这个寒树执行了两次对吧

01:08.000 --> 01:09.000
因为在这里面

01:09.000 --> 01:12.000
哎 这个寒树执行导致ifn执行了两次对吧

01:12.000 --> 01:14.000
一个是单准执行

01:14.000 --> 01:15.000
一个是单准执行

01:15.000 --> 01:17.000
另一个是arguments执行执行对吧

01:17.000 --> 01:19.000
哎 那ok 那在这种情况下

01:19.000 --> 01:22.000
第一个一千啊 原因是什么呢

01:22.000 --> 01:23.000
咱们来看看哈

01:23.000 --> 01:25.000
我相信同学们大多数的疑问

01:25.000 --> 01:26.000
在第二个为什么是四

01:26.000 --> 01:28.000
那我们先把第一个分析一下哈

01:28.000 --> 01:30.000
那首先ifn fn是什么

01:30.000 --> 01:31.000
是这个寒树对吧

01:31.000 --> 01:33.000
这个寒 当这个寒树执行的时候

01:33.000 --> 01:34.000
是不是单准执行啊

01:34.000 --> 01:35.000
对吧 那单准执行

01:35.000 --> 01:37.000
我们知道z4的指向

01:37.000 --> 01:38.000
它有一个原则啊

01:38.000 --> 01:39.000
第一原则是什么呢

01:39.000 --> 01:41.000
谁调用z4指向谁

01:41.000 --> 01:42.000
单准这么写对吧

01:42.000 --> 01:43.000
相当于没人调用

01:43.000 --> 01:44.000
其实没人调用的话

01:44.000 --> 01:46.000
它还可以理解成温度点ifn执行

01:46.000 --> 01:47.000
那意味着

01:47.000 --> 01:48.000
这里面的z4指向谁啊

01:48.000 --> 01:49.000
只要温度对吧

01:49.000 --> 01:50.000
那温度上有没有暂死

01:50.000 --> 01:51.000
有啊 是不是一千

01:51.000 --> 01:53.000
所以说第一个只是一千

01:53.000 --> 01:54.000
现在这个同学们都能了解

01:54.000 --> 01:55.000
都能理解

01:55.000 --> 01:56.000
都能明白

01:56.000 --> 01:57.000
这个咱不多说了

01:57.000 --> 01:58.000
看第二个

01:58.000 --> 02:00.000
argument40执行

02:00.000 --> 02:01.000
也就是说argument40

02:01.000 --> 02:03.000
是不是就等于这个ifn啊

02:03.000 --> 02:05.000
这个应该没什么问题的对吧

02:05.000 --> 02:06.000
那么它等于这个ifn

02:06.000 --> 02:08.000
那既然它等于ifn执行

02:08.000 --> 02:09.000
那是不是跟它是不是一样呢

02:09.000 --> 02:10.000
对吧

02:10.000 --> 02:11.000
很多同学说

02:11.000 --> 02:12.000
那第二个也应该是一千

02:12.000 --> 02:14.000
它怎么是4呢

02:14.000 --> 02:16.000
那首先这个4

02:16.000 --> 02:18.000
z4在哪来的

02:18.000 --> 02:19.000
同学们看好了

02:19.000 --> 02:20.000
我们这传了是不是

02:20.000 --> 02:21.000
四个参数啊

02:21.000 --> 02:22.000
这是四个时参对吧

02:22.000 --> 02:24.000
应设到我们argument4上面

02:24.000 --> 02:25.000
来 我们在这输出一下

02:25.000 --> 02:26.000
argument4长度

02:26.000 --> 02:27.000
把argument4输出一下

02:27.000 --> 02:29.000
看出点log

02:29.000 --> 02:30.000
啥呀

02:30.000 --> 02:32.500
argument4

02:32.500 --> 02:33.500
来

02:33.500 --> 02:35.500
刷新 是吧

02:35.500 --> 02:36.500
看啊

02:36.500 --> 02:37.500
这里面是不是有0123

02:37.500 --> 02:39.500
然后它就暂死是4啊

02:39.500 --> 02:40.500
那说明我们这里面输出的

02:40.500 --> 02:41.500
这个4是谁啊

02:41.500 --> 02:43.500
是argument4在4

02:43.500 --> 02:44.500
它的长度

02:44.500 --> 02:45.500
那为什么是它呢

02:45.500 --> 02:46.500
对吧

02:46.500 --> 02:47.500
不谁调用这次指向谁吗

02:47.500 --> 02:48.500
没错

02:48.500 --> 02:49.500
那同学们这

02:49.500 --> 02:50.500
可不可以看成这样

02:50.500 --> 02:52.500
接下来给大家写一个模拟

02:52.500 --> 02:54.500
假如说我有个对象

02:54.500 --> 02:56.500
叫arg

02:56.500 --> 02:58.500
args

02:58.500 --> 02:59.500
等于空对象

02:59.500 --> 03:01.500
然后让args

03:01.500 --> 03:02.500
它里面的一个0

03:02.500 --> 03:03.500
等于我啥呀

03:03.500 --> 03:04.500
等于我的fn

03:04.500 --> 03:05.500
是吧

03:05.500 --> 03:06.500
我的fn

03:06.500 --> 03:07.500
那就是等于

03:07.500 --> 03:09.500
我们定义的这个函数呗

03:09.500 --> 03:13.500
那接下来我让args0

03:13.500 --> 03:14.500
执行

03:14.500 --> 03:15.500
对吧

03:15.500 --> 03:16.500
那这不好理解这样

03:16.500 --> 03:18.500
我们假如说给它点fn

03:18.500 --> 03:19.500
wfn可以吧

03:19.500 --> 03:21.500
那这我让

03:21.500 --> 03:23.500
点fn

03:23.500 --> 03:25.500
点fn执行

03:25.500 --> 03:26.500
那是不是谁调用

03:26.500 --> 03:27.500
这次指向谁啊

03:27.500 --> 03:29.500
这个这次是不是指向这个argument4

03:29.500 --> 03:30.500
当这个argument4里面有一个

03:30.500 --> 03:31.500
什么zans等于4

03:31.500 --> 03:33.500
或者等于我

03:33.500 --> 03:34.500
对吧

03:34.500 --> 03:35.500
那是不是输出的就是4了

03:35.500 --> 03:36.500
是吧

03:36.500 --> 03:37.500
那这一段代码

03:37.500 --> 03:39.500
其实跟它是一模一样的

03:39.500 --> 03:40.500
大家不要单纯说

03:40.500 --> 03:41.500
是把这个函数拿出来执行

03:41.500 --> 03:42.500
这里面存在一个

03:42.500 --> 03:44.500
隐身的list指向

03:44.500 --> 03:45.500
指向的是argument4

03:45.500 --> 03:46.500
它也是一个对象

03:46.500 --> 03:47.500
它是一个类数组

03:47.500 --> 03:48.500
对吧

03:48.500 --> 03:49.500
那么所以说

03:49.500 --> 03:50.500
在这这一点

03:50.500 --> 03:51.500
大家要注意

03:51.500 --> 03:52.500
这一点大家要注意

03:52.500 --> 03:53.500
关于argument4

03:53.500 --> 03:54.500
凌执行

03:54.500 --> 03:55.500
zans指向的是argument4

03:55.500 --> 03:56.500
所以说

03:56.500 --> 03:57.500
zans指向argument4

03:57.500 --> 03:58.500
里面的长度

03:58.500 --> 03:59.500
是这样的

03:59.500 --> 04:00.500
OK

04:00.500 --> 04:01.500
那么关于今天的

04:01.500 --> 04:03.500
每一题的讲解就到这

04:03.500 --> 04:04.500
如果同学对argument4

04:04.500 --> 04:05.500
对于函数

04:05.500 --> 04:06.500
对zans不太了解

04:06.500 --> 04:07.500
回去看看

04:07.500 --> 04:09.500
咱们的公开课当中

04:09.500 --> 04:11.500
js当中的zans指向

04:11.500 --> 04:13.500
以及包括我们的函数内容

04:13.500 --> 04:14.500
OK

04:14.500 --> 04:16.500
那今天的讲解就到这

04:16.500 --> 04:17.500
咱们之后再见

