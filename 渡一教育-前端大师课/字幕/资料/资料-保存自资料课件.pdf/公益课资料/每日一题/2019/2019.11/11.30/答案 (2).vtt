WEBVTT

00:00.240 --> 00:03.120
哈喽哈喽 同学们 大家好啊 我是你们的丁老师

00:03.120 --> 00:05.360
欢迎来到今天的每日一题的答应时间

00:05.360 --> 00:06.800
来看看今天题目吧

00:06.800 --> 00:09.120
今天题目是一段这样的代码段

00:09.120 --> 00:11.440
什么呢 上面有一个name 等于window

00:11.440 --> 00:14.000
然后定义了一个person对象里面有name值

00:14.000 --> 00:16.000
啊 邓小宝cname是一个函数

00:16.000 --> 00:18.720
然后函数体呢 是输出zinsertname

00:18.720 --> 00:20.880
然后下面又定义了一个对象animal

00:20.880 --> 00:22.320
然后有个name就载一载

00:22.320 --> 00:25.120
然后下面分别调用了person.cname

00:25.120 --> 00:26.560
person.cnamecallanimal

00:26.560 --> 00:28.480
person.cnameapplywindow 是吧

00:28.880 --> 00:31.360
那其实大家看到这个题目的时候就知道

00:31.360 --> 00:34.240
本题的考点在于call of play 对吧

00:34.240 --> 00:35.680
那其实对于call of play呢

00:35.680 --> 00:39.120
其实这个是众多大厂面试过程当中

00:39.120 --> 00:41.360
必备的一道题啊 会经常出现

00:41.360 --> 00:43.440
所以说这也是非常重要的同学们应该

00:43.440 --> 00:44.880
把它努力的学会

00:44.880 --> 00:46.560
OK 那我们先通过控制台来看看

00:46.560 --> 00:47.840
它的答案是什么吧

00:47.840 --> 00:49.040
我们刷新一下

00:49.040 --> 00:52.160
哎 邓小宝宰在window 是吧

00:52.160 --> 00:55.040
那现在同学们在下面做了相当的尝试

00:55.040 --> 00:56.560
那咱们来讲一讲啊

00:56.560 --> 00:58.400
包括对比一下call of play的区别

00:58.400 --> 01:00.720
那这个呢是面试中常用的啊

01:00.720 --> 01:01.840
之前也说过了对吧

01:01.840 --> 01:04.160
OK 那首先person.cname啊

01:04.160 --> 01:05.200
那在这里面干嘛

01:05.200 --> 01:06.800
我们直接把zs zs是谁啊

01:06.800 --> 01:08.080
谁调用zs指向谁是吧

01:08.080 --> 01:09.600
只想person person.name

01:09.600 --> 01:11.280
是邓小宝第一个没问题对吧

01:11.280 --> 01:13.360
那紧接着就是我们这个call of play

01:13.360 --> 01:15.920
那直接call 我call是谁和animal 是吧

01:15.920 --> 01:16.800
call.animal

01:16.800 --> 01:18.000
那相当于用animal

01:18.000 --> 01:19.600
调用什么点cname方法

01:19.600 --> 01:21.120
是不是zs指向的是animal

01:21.120 --> 01:22.720
那同样就applywindow呢

01:22.720 --> 01:25.520
那相当于用window点这个cname

01:25.600 --> 01:26.720
数数里面这个zs

01:26.720 --> 01:28.240
指向的就是我们这个window数刷

01:28.240 --> 01:29.600
指向的是这个name对吧

01:29.600 --> 01:30.400
那其实这

01:30.400 --> 01:31.680
哎 丁老师有两点要说

01:31.680 --> 01:35.200
第一点 就是关于谁里面zs指向的一个问题

01:35.200 --> 01:37.840
同学们要知道谁调用zs指向谁啊

01:37.840 --> 01:40.480
这是我们的一个基本原则

01:40.480 --> 01:43.040
第二点就是对这个call of play啊

01:43.040 --> 01:46.080
同学们要知道我为什么要有这两个方法

01:46.080 --> 01:47.360
为什么要有这两个方法

01:47.360 --> 01:49.760
包括这两个方法的作用是什么啊

01:49.760 --> 01:51.440
最后再说说它俩的区别

01:51.440 --> 01:53.280
那为什么要有这两个方法呢

01:53.280 --> 01:54.000
你看啊

01:54.000 --> 01:56.400
我们说person里面有一个方法叫cname

01:56.400 --> 01:57.360
那animal呢

01:57.360 --> 01:58.080
它不会说话

01:58.080 --> 01:59.040
它它它它没有

01:59.040 --> 02:00.560
它就里面就一个name值

02:00.560 --> 02:03.680
那我还想让它把它的名字说出来怎么办呢

02:03.680 --> 02:08.560
我让谁啊animal去调用person的cname方法啊

02:08.560 --> 02:11.600
其实它的核心思想就一个叫附用

02:11.600 --> 02:12.000
是吧

02:12.000 --> 02:15.040
我本来这个方法就能输出name

02:15.040 --> 02:15.440
那ok

02:15.440 --> 02:18.160
那我就不用在自己身上写一个这样的方法了

02:18.160 --> 02:19.440
我去直接调用

02:19.440 --> 02:20.240
谁有这个方法

02:20.240 --> 02:21.440
我去调用就可以了

02:21.440 --> 02:22.960
同样对于window也是

02:23.280 --> 02:25.200
希望这儿同学们明白是附用

02:25.200 --> 02:26.320
它的一大特点

02:26.320 --> 02:27.440
然后紧接着

02:28.160 --> 02:30.160
这个call of light区别是啥呀

02:30.160 --> 02:33.680
是不是我们对于call of light

02:33.680 --> 02:35.840
它的参数上有区别

02:35.840 --> 02:36.720
对于call来说

02:36.720 --> 02:37.760
它的参数是什么

02:37.760 --> 02:38.800
以douhall隔开的

02:38.800 --> 02:40.720
第一个参数是z指向

02:40.720 --> 02:42.320
之后的弱干的参数

02:42.320 --> 02:44.560
都是那个函数的参数形式

02:45.280 --> 02:47.120
A 动画B 动画C这种形式对吧

02:47.120 --> 02:50.800
那对于of light它的数这个参数形式是什么

02:50.800 --> 02:52.080
是个数组是吧

02:53.040 --> 02:55.280
为什么要区分这种形式跟数组呢

02:56.720 --> 02:58.640
因为对于部分来说

02:58.640 --> 02:59.920
对于部分函数来说

02:59.920 --> 03:01.040
我们的参数形式

03:01.040 --> 03:01.600
大家都知道

03:01.600 --> 03:03.360
哎这样给大家简单写一个

03:03.360 --> 03:04.480
参数形式是什么样呢

03:05.760 --> 03:06.240
方式A

03:08.000 --> 03:10.960
里面是A 动画B 动画C

03:10.960 --> 03:11.520
对吧

03:11.520 --> 03:12.480
是这种形式

03:12.480 --> 03:13.360
是这种形式

03:13.360 --> 03:14.960
但是跟它很相近的

03:14.960 --> 03:17.040
来我把这个参数列表扣出来

03:17.520 --> 03:19.600
跟它很相近的是什么呢

03:19.600 --> 03:20.800
是我们的一个数组

03:20.800 --> 03:21.680
A 动画B 动画C

03:21.840 --> 03:24.480
把它俩扒了就是这种形式对吧

03:24.480 --> 03:25.280
很相近

03:25.280 --> 03:27.360
那其实我们的of light也是

03:27.360 --> 03:29.600
为了优化这种参数形式

03:29.600 --> 03:31.920
优化这种参数形式而准备的

03:31.920 --> 03:33.120
我们可以直接传一个数组

03:33.120 --> 03:35.040
因为数组把两个大伙扒掉之后

03:35.040 --> 03:36.400
就是普通的参数了

03:36.400 --> 03:36.880
这样的话

03:36.880 --> 03:38.480
我们就不需要做额外的处理

03:38.480 --> 03:40.480
这是of light的存在形式

03:40.480 --> 03:42.240
以及它跟办的一个区别

03:42.720 --> 03:44.240
那最后再跟同学们提一点

03:44.240 --> 03:47.280
这一点可能知道同学不多什么的

03:47.280 --> 03:50.720
of light的靠的性能要远远高

03:51.680 --> 03:54.240
这个也是同学们要注意的一点

03:54.240 --> 03:54.640
那OK

03:54.640 --> 03:55.840
那关于今天的题目

03:55.840 --> 03:56.800
咱们就讲到这

03:56.800 --> 03:57.680
如果有不懂的

03:57.680 --> 03:59.840
欢迎回到咱们这个同学课堂当中

03:59.840 --> 04:02.400
看看GS当中对于靠和不赖的讲解

04:02.400 --> 04:02.800
OK

04:02.800 --> 04:04.000
那咱们今天就到这

04:04.000 --> 04:04.720
同学们再见

