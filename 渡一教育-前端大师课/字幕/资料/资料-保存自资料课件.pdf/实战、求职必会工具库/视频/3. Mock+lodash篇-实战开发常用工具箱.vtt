WEBVTT

00:00.000 --> 00:05.000
好了 咱们今天就今天的东西啊

00:05.000 --> 00:09.000
两个第三方库啊 一个是muk.js和一个loaddash

00:09.000 --> 00:12.000
这两个第三方库呢都比较简单

00:12.000 --> 00:16.000
但是呢 这里边呢muk.js呢 它涉及到了一些额外的知识

00:16.000 --> 00:19.000
这还是我们刚才说的 其实第三方库呢

00:19.000 --> 00:23.000
你要知道它的什么呢 它的里面的一些概念

00:23.000 --> 00:27.000
还有什么关联知识 这些东西是在官方文档里面看不到的

00:27.000 --> 00:30.000
而这些东西才是真正重要的东西 什么原理 原码

00:30.000 --> 00:33.000
当然我们这几天呢 可能没有时间去讲原码

00:33.000 --> 00:36.000
原理的多多少少提一点 但是最重要的是

00:36.000 --> 00:41.000
你要知道它为什么会用 它的应用场景

00:41.000 --> 00:46.000
这些东西才是真正重要的东西 什么情况下会用它

00:46.000 --> 00:48.000
只要我们看muk.js啊

00:48.000 --> 00:53.000
muk.js是什么东西呢

00:53.000 --> 00:57.000
就要引出一个问题 叫做接口连条

00:57.000 --> 01:01.000
这个问题呢 对于某些同学来说 可能

01:01.000 --> 01:03.000
有点早 结束这个东西有点早

01:03.000 --> 01:07.000
因为它需要很多的知识 特别是计算机构网络的知识

01:07.000 --> 01:10.000
包括什么 阿加克斯 甚至呢最好理论

01:10.000 --> 01:13.000
把后端部分也学了过后呢 更加好理解

01:13.000 --> 01:17.000
什么叫接口连条 我给它简单的举个例子

01:17.000 --> 01:22.000
比方说吧 比方说咱们

01:22.000 --> 01:28.570
咱们诚哥 诚哥呢作为一个相不经理吧

01:28.570 --> 01:31.570
相不经理 那么这个时候呢

01:31.570 --> 01:34.570
他想做一个应用出来 做什么应用出来呢

01:34.570 --> 01:38.570
做一个商城 卖啥呢 卖登革的一些生活物品

01:38.570 --> 01:41.570
来进行拍卖 他想做这么一个应用

01:41.570 --> 01:44.570
于是呢 他就交给我

01:44.570 --> 01:47.570
我呢就作为前端开发者

01:47.570 --> 01:51.570
尽管我以前是做后端的 前端开发者

01:52.570 --> 01:54.570
然后呢 还有阿托老师

01:58.570 --> 02:01.570
那么作为后端开发者 那么我们就给 诚哥就不管了

02:01.570 --> 02:04.570
比方说吧 我们简化一点 诚哥就不管了

02:04.570 --> 02:07.570
那我跟那个阿托呢 两个人就说在一块

02:07.570 --> 02:11.570
商量商量 咱们怎么做呢

02:11.570 --> 02:13.570
好 我们就开始约定

02:13.570 --> 02:16.570
到时候呢 后端你要给我提供寄 提供数据

02:16.570 --> 02:19.570
就是咱们页面上的很多数据 比如说新闻列表

02:20.570 --> 02:22.570
因为我做前端是做页面的

02:22.570 --> 02:25.570
我并不知道诚哥要有哪些东西可以卖

02:25.570 --> 02:28.570
什么袜子 穿过的衣服 吃过的碗 这些东西

02:28.570 --> 02:30.570
我都不知道什么东西可以卖

02:30.570 --> 02:32.570
那么这些东西都是数据 需要后端给我提供

02:32.570 --> 02:35.570
那么我们就要约定好 约定好

02:35.570 --> 02:37.570
以到时候呢 要提供给我这个数据

02:37.570 --> 02:39.570
那么接下来就开发了 开发的时候呢

02:39.570 --> 02:42.570
我就有一个问题 什么问题呢

02:42.570 --> 02:46.570
就是我的数据哪来的

02:46.570 --> 02:49.570
我的数据应该从阿托老师这里拿

02:49.570 --> 02:51.570
对吧 从这里拿数据

02:51.570 --> 02:53.570
但是呢 它还没有开发完啊

02:53.570 --> 02:55.570
它没有开发完 它的数据就出不来

02:55.570 --> 02:58.570
数据出不来的话 我这里边就拿不到数据

02:58.570 --> 03:01.570
拿不到数据呢 我页面只能做个样式

03:01.570 --> 03:02.570
其他啥都不能做

03:02.570 --> 03:04.570
怎么 我要做一个列表 做一个商城

03:04.570 --> 03:06.570
商城里面不就有很多商品吗

03:06.570 --> 03:07.570
那些商品我一个都没有 我怎么做呢

03:07.570 --> 03:09.570
又没发出

03:09.570 --> 03:10.570
一样的意思吧

03:10.570 --> 03:12.570
因此呢 最理想的情况呢

03:12.570 --> 03:14.570
我就去玩去了

03:14.570 --> 03:18.570
我就等着阿托老师把后端全部给我开发完成

03:18.570 --> 03:20.570
开发完成了之后

03:20.570 --> 03:23.570
然后呢 我再开始动手开发前端

03:23.570 --> 03:26.570
于是这就是最理想的状况

03:26.570 --> 03:28.570
就是前端呢 我正在开发

03:28.570 --> 03:30.570
后端就已经开发完成了

03:30.570 --> 03:32.570
你们以后到了公司 有没有这种情况呢

03:32.570 --> 03:33.570
有 但是呢 这种情况呢

03:33.570 --> 03:35.570
是相对比较理想的

03:35.570 --> 03:36.570
相对比较理想的

03:36.570 --> 03:38.570
这种情况一般发生在什么时候

03:38.570 --> 03:41.570
公司里边以前有一套前端

03:41.570 --> 03:43.570
但是那个前端呢 我们要更新换代了

03:43.570 --> 03:45.570
但是后端不变

03:45.570 --> 03:47.570
那么这个时候后端是不是已经开发完成了

03:47.570 --> 03:49.570
我们这里就听个意识就行了

03:49.570 --> 03:51.570
有一些人因为他太难理解

03:51.570 --> 03:52.570
什么叫后端了

03:52.570 --> 03:53.570
因为他没有学习到服务器

03:53.570 --> 03:54.570
没有学习到网络通信

03:54.570 --> 03:56.570
我就简单说一下

03:56.570 --> 03:57.570
知道这么个意识就行了

03:57.570 --> 03:59.570
总之就是你开发完成过后

03:59.570 --> 04:01.570
我就给你 我想 哎 不要说我告诉他

04:01.570 --> 04:03.570
我要数据 哎 他就把数据给我了

04:03.570 --> 04:05.570
那我就继续接着开发

04:05.570 --> 04:07.570
这个是没问题的

04:07.570 --> 04:09.570
但是呢 实际情况呢

04:09.570 --> 04:12.570
是比较残酷的

04:12.570 --> 04:14.570
比方说阿托老师开发这个后端

04:14.570 --> 04:16.570
要开发一个月

04:16.570 --> 04:18.570
那我等 我 比方说我开发前端

04:18.570 --> 04:20.570
要开发一个月

04:20.570 --> 04:21.570
那么于是呢 我这一个月

04:21.570 --> 04:22.570
第一个月我就玩

04:22.570 --> 04:23.570
因为我没法做事情

04:23.570 --> 04:24.570
他没有给我数据

04:24.570 --> 04:26.570
没法做事 我只能等

04:26.570 --> 04:27.570
那等了一个月过后呢

04:27.570 --> 04:28.570
我再开发一个月

04:28.570 --> 04:29.570
就两个月过去了

04:29.570 --> 04:30.570
两个月过去了

04:30.570 --> 04:31.570
可能那个

04:31.570 --> 04:33.570
邓哥的碗都长那个

04:33.570 --> 04:34.570
长模糊了 对吧

04:34.570 --> 04:35.570
你买不出去了

04:35.570 --> 04:36.570
我们的应用模法

04:36.570 --> 04:37.570
及时地上线

04:37.570 --> 04:39.570
那么就遇到一个很严峻的问题的

04:39.570 --> 04:41.570
真实的情况是

04:41.570 --> 04:43.570
前端和后端要一起开发的

04:43.570 --> 04:44.570
那么这个时候呢

04:44.570 --> 04:45.570
就会遇到一个问题

04:45.570 --> 04:47.570
我前端在开发的过程中

04:47.570 --> 04:48.570
我要数据啊

04:48.570 --> 04:50.570
我去拿数据 结果拿不到

04:50.570 --> 04:51.570
后端说我没有数据

04:51.570 --> 04:52.570
我天天都要开发中

04:52.570 --> 04:54.570
你根本就拿不到任何数据

04:54.570 --> 04:56.570
他没法给我任何东西

04:56.570 --> 04:57.570
那么甚至还要抱错

04:57.570 --> 05:00.570
这个时候呢 我怎么办

05:00.570 --> 05:03.570
于是呢 我们就想出一个办法

05:03.570 --> 05:04.570
叫做 我们把这个办法

05:04.570 --> 05:05.570
叫做mock

05:05.570 --> 05:06.570
数据mock

05:06.570 --> 05:07.570
就模拟数据

05:07.570 --> 05:09.570
解决办法就这样子

05:09.570 --> 05:11.570
我们在去拿数据的时候

05:11.570 --> 05:12.570
然后呢

05:12.570 --> 05:13.570
他不是真正的

05:13.570 --> 05:14.570
到后端里边去拿数据

05:14.570 --> 05:16.570
他就中间加了一个拦截器

05:16.570 --> 05:17.570
这个拦截器呢

05:17.570 --> 05:18.570
我们以后就会接触

05:18.570 --> 05:20.570
有个拦截器

05:20.570 --> 05:22.570
我们当去拿数据的时候呢

05:22.570 --> 05:23.570
正常的去拿数据

05:23.570 --> 05:24.570
拦截器呢

05:24.570 --> 05:25.570
把这个拿数据的过程

05:25.570 --> 05:26.570
给我们拦截下来了

05:26.570 --> 05:27.570
他不让我们

05:27.570 --> 05:28.570
到真正的后端去拿数据

05:28.570 --> 05:29.570
然后呢

05:29.570 --> 05:30.570
他就给我生成了

05:30.570 --> 05:32.570
一些特殊的假的数据

05:32.570 --> 05:33.570
长得一模一样

05:33.570 --> 05:34.570
该是数组的地方

05:34.570 --> 05:35.570
就是数组

05:35.570 --> 05:36.570
该是对象的地方

05:36.570 --> 05:37.570
就是对象

05:37.570 --> 05:38.570
跟之前约定好的

05:39.570 --> 05:40.570
一开始不是约定吗

05:40.570 --> 05:41.570
我跟阿托导师约定

05:41.570 --> 05:42.570
约定你给我什么样的数据

05:42.570 --> 05:43.570
结果数据啊

05:43.570 --> 05:44.570
还是给我对象啊

05:44.570 --> 05:45.570
对象里边有哪些属性啊

05:45.570 --> 05:46.570
每个属性什么类型啊

05:46.570 --> 05:47.570
对吧

05:47.570 --> 05:48.570
都是约定好的

05:48.570 --> 05:49.570
那么他就按照约定

05:49.570 --> 05:51.570
给我们生成一些

05:51.570 --> 05:52.570
魔力的数据

05:52.570 --> 05:53.570
直接挣给我

05:53.570 --> 05:54.570
那么我这边

05:54.570 --> 05:55.570
是不是没问题了

05:55.570 --> 05:56.570
对吧

05:56.570 --> 05:57.570
我管你是不是测试数据

05:57.570 --> 05:58.570
反正我只要能够开发

05:58.570 --> 05:59.570
能够开发就行了

05:59.570 --> 06:00.570
我不管这个数据哪来的

06:00.570 --> 06:02.570
然后我开发完了过后

06:02.570 --> 06:03.570
真正上线的时候

06:03.570 --> 06:04.570
就到生产环境的时候

06:04.570 --> 06:06.570
什么叫生产环境

06:06.570 --> 06:07.570
就是我们应用开发完了

06:07.570 --> 06:08.570
我们要上线了

06:08.570 --> 06:09.570
那什么时候拿去

06:09.570 --> 06:10.570
给用户使用了

06:10.570 --> 06:11.570
就是生产环境

06:11.570 --> 06:13.570
拿到生产环境的时候呢

06:13.570 --> 06:14.570
我们把这个

06:14.570 --> 06:15.570
蓝接气移去

06:15.570 --> 06:16.570
非常简单

06:16.570 --> 06:18.570
你可能就是少应用一个介石

06:18.570 --> 06:19.570
或者是甚至什么

06:19.570 --> 06:20.570
什么都不有感

06:20.570 --> 06:21.570
你们以后学到什么

06:21.570 --> 06:22.570
工程化之后

06:22.570 --> 06:23.570
我们可以配置

06:23.570 --> 06:24.570
环境辨量

06:24.570 --> 06:26.570
在不同的环境辨量里边

06:26.570 --> 06:27.570
就不一样了

06:27.570 --> 06:28.570
比方说在生产环境里边

06:28.570 --> 06:29.570
它就完全

06:29.570 --> 06:30.570
不会使用这个蓝接气

06:30.570 --> 06:31.570
而在开发环境里边

06:31.570 --> 06:32.570
它会使用这个蓝接气

06:32.570 --> 06:34.570
你儿的意思啊

06:34.570 --> 06:35.570
就是呢

06:35.570 --> 06:36.570
我们可以非常轻松的

06:36.570 --> 06:38.570
把这个蓝接气移掉

06:38.570 --> 06:39.570
一去掉

06:39.570 --> 06:40.570
什么都不用感

06:40.570 --> 06:41.570
它就变成真正的

06:41.570 --> 06:42.570
去请求后端

06:42.570 --> 06:43.570
然后真正的从后端

06:43.570 --> 06:44.570
拿数据

06:44.570 --> 06:45.570
这就是

06:45.570 --> 06:46.570
接口连条

06:46.570 --> 06:47.570
产生的问题

06:47.570 --> 06:48.570
以及解决办法

06:48.570 --> 06:49.570
那么也就是说

06:49.570 --> 06:50.570
我们现在呢

06:50.570 --> 06:52.570
就要处理这个问题

06:52.570 --> 06:53.570
第一个问题

06:53.570 --> 06:57.570
我怎么生成测试数据

06:57.570 --> 06:58.570
测试数据

06:58.570 --> 06:59.570
我怎么生成出来

06:59.570 --> 07:01.570
第二个问题

07:01.570 --> 07:03.570
我怎么把它蓝接掉

07:03.570 --> 07:04.570
现在是这两个问题

07:04.570 --> 07:05.570
这两个问题

07:05.570 --> 07:07.570
解决这两个问题的力气

07:07.570 --> 07:08.570
就是我们的第三方库

07:08.570 --> 07:10.570
默可结石

07:10.570 --> 07:11.570
所以说你们学习的

07:11.570 --> 07:12.570
第三方库

07:12.570 --> 07:13.570
这些东西

07:13.570 --> 07:15.570
才是真正重要的东西

07:15.570 --> 07:16.570
而这些东西呢

07:16.570 --> 07:17.570
官方文档

07:17.570 --> 07:18.570
我也希望官方文档

07:18.570 --> 07:19.570
告诉你们

07:19.570 --> 07:20.570
他不会告诉你们

07:20.570 --> 07:21.570
他只告诉你

07:21.570 --> 07:22.570
怎么用怎么用

07:22.570 --> 07:23.570
你看的都是蒙的

07:23.570 --> 07:24.570
你不知道他什么时候需要

07:24.570 --> 07:25.570
这一块听懂了

07:25.570 --> 07:26.570
朋友就可以

07:26.570 --> 07:31.380
好了

07:31.380 --> 07:34.330
咱们继续

07:34.330 --> 07:36.330
好 接下来

07:36.330 --> 07:37.330
我们就解决两个问题吧

07:37.330 --> 07:38.330
一个就是

07:38.330 --> 07:39.330
怎么去生成测试数据

07:39.330 --> 07:40.330
模拟数据

07:40.330 --> 07:41.330
一个就是怎么去蓝接

07:41.330 --> 07:42.330
蓝接请求

07:42.330 --> 07:44.330
就是我们要远程去请求他

07:44.330 --> 07:45.330
怎么去蓝接

07:45.330 --> 07:46.330
一个个来

07:46.330 --> 07:47.330
首先第一个

07:47.330 --> 07:48.330
生成测试数据

07:48.330 --> 07:49.330
我们怎么用呢

07:49.330 --> 07:51.330
要引用一个第三方库

07:51.330 --> 07:52.330
叫Moke

07:52.330 --> 07:59.870
引用一个第三方库

07:59.870 --> 08:00.870
这个第三方库

08:00.870 --> 08:02.870
它的官方网在这

08:02.870 --> 08:03.870
不用怕

08:03.870 --> 08:04.870
它是中文的

08:04.870 --> 08:05.870
它是中文的官方

08:05.870 --> 08:06.870
因为它本身

08:06.870 --> 08:07.870
本身就是国内的公司做的

08:07.870 --> 08:08.870
做得非常好

08:08.870 --> 08:10.870
另外一个就是

08:10.870 --> 08:11.870
我们要引用

08:11.870 --> 08:12.870
它的介石

08:12.870 --> 08:13.870
可以把按下载下来

08:13.870 --> 08:15.870
也可以用CDN

08:15.870 --> 08:16.870
我给大家做了

08:16.870 --> 08:17.870
昨天说了用一个CDN

08:17.870 --> 08:19.870
这个CDN我就搜索一下

08:19.870 --> 08:21.870
叫做Moke

08:21.870 --> 08:22.870
介石

08:22.870 --> 08:24.870
就是这个

08:24.870 --> 08:25.870
版本的话

08:25.870 --> 08:26.870
我们还是用稳定版吧

08:26.870 --> 08:27.870
一般来说在公司里边

08:27.870 --> 08:29.870
像看到什么Beta

08:29.870 --> 08:30.870
R2法

08:30.870 --> 08:32.870
这些版本就尽量不要用

08:32.870 --> 08:34.870
因为它并计是测试版本

08:34.870 --> 08:35.870
你平时自己学习的时候

08:35.870 --> 08:37.870
我而又而可以

08:37.870 --> 08:38.870
真正的在工作中

08:38.870 --> 08:39.870
不要去用这种

08:39.870 --> 08:40.870
不稳定的版本

08:40.870 --> 08:41.870
要用稳定版

08:41.870 --> 08:42.870
1.0

08:42.870 --> 08:44.870
因为它毕竟更新也比较少

08:44.870 --> 08:46.870
因为它本身也比较简单

08:46.870 --> 08:47.870
做得也比较完善

08:47.870 --> 08:48.870
我们这里来复制一下

08:48.870 --> 08:51.870
它的scripps元素

08:51.870 --> 08:53.870
引用进来

08:53.870 --> 08:54.870
把Moke介石引用进来

08:54.870 --> 08:55.870
那么它就能够

08:55.870 --> 08:56.870
帮助我们做什么呢

08:56.870 --> 08:58.870
做测试数据的生成

08:58.870 --> 08:59.870
已经难坚尽求

08:59.870 --> 09:00.870
我们来看看

09:00.870 --> 09:02.870
首先怎么来生成测试数据呢

09:02.870 --> 09:03.870
我这个

09:03.870 --> 09:04.870
因为它的官方文道

09:04.870 --> 09:05.870
如果我直接看的话

09:05.870 --> 09:06.870
也看得有点懵

09:06.870 --> 09:08.870
我给大家先提供一些概念

09:08.870 --> 09:10.870
把认识到这些概念之后

09:10.870 --> 09:11.870
你再去看官方文道

09:11.870 --> 09:13.870
就好众多了

09:13.870 --> 09:14.870
它的做法

09:14.870 --> 09:15.870
要生成

09:15.870 --> 09:16.870
模拟数据做法

09:16.870 --> 09:17.870
非常简单

09:17.870 --> 09:18.870
它里面已经提供了

09:18.870 --> 09:19.870
一个全局的对象

09:19.870 --> 09:20.870
叫做Moke

09:20.870 --> 09:22.870
全局对象

09:22.870 --> 09:23.870
这个对象里边

09:23.870 --> 09:24.870
有一个喊数叫做Moke

09:24.870 --> 09:25.870
小写的Moke

09:25.870 --> 09:26.870
一个方法

09:26.870 --> 09:28.870
方法一般手指母小写

09:28.870 --> 09:30.870
那么这里边传啥呢

09:30.870 --> 09:31.870
还有很多种传法

09:31.870 --> 09:32.870
其中一种

09:32.870 --> 09:34.870
非常常见的传法

09:34.870 --> 09:36.870
传一个对象

09:36.870 --> 09:37.870
这个对象是啥玩意

09:37.870 --> 09:39.870
这个对象是一个模办

09:40.870 --> 09:42.870
这个模办起什么作用

09:42.870 --> 09:44.870
你不是要生成测试数据吗

09:44.870 --> 09:47.870
那么这里边就提供

09:47.870 --> 09:49.870
我生成什么样的测试数据

09:49.870 --> 09:50.870
给它提供用模办

09:50.870 --> 09:52.870
它就会根据你

09:52.870 --> 09:54.870
给根据你提供的模办

09:54.870 --> 09:56.870
来生成测试数据

09:56.870 --> 09:57.870
Railout

09:57.870 --> 09:58.870
到时候输出一下

09:58.870 --> 09:59.870
Railout

09:59.870 --> 10:00.870
我来看一下

10:00.870 --> 10:01.870
现在啥都不做

10:01.870 --> 10:02.870
看看生成什么玩意儿

10:02.870 --> 10:05.630
点击右键

10:05.630 --> 10:06.630
简单

10:06.630 --> 10:07.630
看一下吧

10:07.630 --> 10:08.630
它生成什么玩意儿

10:08.630 --> 10:10.630
就生成一个空锯一下

10:10.630 --> 10:11.630
那么这个空锯箱哪来的

10:11.630 --> 10:12.630
就是个莫可生成

10:12.630 --> 10:14.630
出来的测试数据

10:14.630 --> 10:15.630
是那个空锯箱

10:15.630 --> 10:16.630
为什么是空锯箱

10:16.630 --> 10:17.630
因为我没有给它提供

10:17.630 --> 10:19.630
任何数据模办

10:19.630 --> 10:20.630
没了意思吧

10:20.630 --> 10:21.630
咱们继续

10:22.630 --> 10:25.630
那么这个模办怎么写呢

10:26.630 --> 10:27.630
既然这个模办是什么

10:27.630 --> 10:28.630
是一个对象

10:28.630 --> 10:31.630
对象始终是由属性名

10:31.630 --> 10:32.630
和属性值组成的

10:32.630 --> 10:33.630
对吧

10:33.630 --> 10:34.630
属性名

10:34.630 --> 10:35.630
属性值

10:35.630 --> 10:37.630
一个对象始终是由属性名

10:37.630 --> 10:39.630
和属性值组成的

10:39.630 --> 10:41.630
那么这个属性名和属性值

10:41.630 --> 10:42.630
到底该怎么写

10:42.630 --> 10:45.630
我们才能生成一些测试数据呢

10:45.630 --> 10:47.630
它是这样子

10:47.630 --> 10:49.630
每个属性啊

10:49.630 --> 10:50.630
它有三个部分组成

10:50.630 --> 10:52.630
一个是属性名

10:52.630 --> 10:53.630
这个

10:54.630 --> 10:55.630
一个是什么呢

10:55.630 --> 10:56.630
规则

10:56.630 --> 10:58.630
诶 规则是啥呀

10:58.630 --> 10:59.630
规则是这个

10:59.630 --> 11:03.460
属性我们都知道

11:03.460 --> 11:06.460
知不知是不是可以做属性

11:06.460 --> 11:08.460
诶 我问一下大家

11:09.460 --> 11:11.460
随便问一下我 我怕

11:11.460 --> 11:12.460
我请问大家

11:12.460 --> 11:14.460
这个玩意儿能不能作为一个属性名

11:14.460 --> 11:18.600
能的话QQ1不能QQ2

11:18.600 --> 11:23.190
能不能作为属性名

11:24.190 --> 11:26.190
啊 幸好我问了一下

11:26.190 --> 11:28.190
你看 基础知识不过关

11:28.190 --> 11:29.190
对吧 来同学

11:29.190 --> 11:31.190
学习得系统的学啊

11:32.190 --> 11:33.190
同学一下 习学一下

11:33.190 --> 11:35.190
也可以导致这些基础不扎实

11:35.190 --> 11:37.190
在学的地方没学到

11:37.190 --> 11:39.190
当然可以作属性名

11:39.190 --> 11:40.190
为什么可以作属性名

11:40.190 --> 11:43.190
它 你们学解释的时候一定听说过

11:43.190 --> 11:45.190
叫什么 变量叫做标识符

11:45.190 --> 11:46.190
对不对

11:46.190 --> 11:47.190
是不是有一个东西叫标识符

11:47.190 --> 11:49.190
我们说定一个变量

11:49.190 --> 11:50.190
这个变量里边呢

11:50.190 --> 11:51.190
只能有什么下滑线

11:51.190 --> 11:53.190
多了 数字 字母

11:53.190 --> 11:54.190
这叫标识符

11:54.190 --> 11:56.190
但是属性这一块

11:56.190 --> 11:58.190
是不是比较特殊

11:58.190 --> 11:59.190
在解释里边

11:59.190 --> 12:02.190
任何字符串都可以作属性名

12:02.190 --> 12:05.190
它不是一个合法的标识符

12:05.190 --> 12:08.190
但是它是一个合法的属性名

12:08.190 --> 12:09.190
比较类似吧

12:09.190 --> 12:10.190
比较说

12:10.190 --> 12:13.020
我给大家举个例子

12:13.020 --> 12:14.020
一个对象

12:14.020 --> 12:17.350
OBC

12:17.350 --> 12:18.350
比较说啊

12:18.350 --> 12:20.350
我这个属性里边还有个空格

12:20.350 --> 12:22.350
你看 是不是愚法错误

12:22.350 --> 12:23.350
为什么

12:23.350 --> 12:24.350
因为这个东西

12:24.350 --> 12:25.350
它加了空格了

12:25.350 --> 12:27.350
它不是一个合法的标识符

12:27.350 --> 12:29.350
比较说这种属性

12:30.350 --> 12:31.350
愚法错误

12:31.350 --> 12:33.350
它不是一个合法的标识符

12:33.350 --> 12:35.350
但是它能不能作为一个合法的属性名呢

12:35.350 --> 12:36.350
是可以的

12:36.350 --> 12:40.750
你是不是可以用制符串

12:40.750 --> 12:41.750
因为所有的属性

12:41.750 --> 12:42.750
全是制符串 对吧

12:42.750 --> 12:46.380
所有的属性全是制符串

12:46.380 --> 12:47.380
你看一下

12:47.380 --> 12:48.380
OBC

12:48.380 --> 12:49.380
OBC

12:50.380 --> 12:52.380
是不是一个正常的属性

12:52.380 --> 12:53.380
它不是一个合法的标识符

12:53.380 --> 12:54.380
但是它是一个合法的属性名

12:54.380 --> 12:55.380
只要任何一个制符串

12:55.380 --> 12:57.380
都可以作属性名

12:57.380 --> 12:59.380
而且尤其只有制符串

12:59.380 --> 13:02.820
能作为属性名

13:02.820 --> 13:03.820
对

13:03.820 --> 13:05.820
我又问一下大家

13:05.820 --> 13:07.820
我看基础咋不扎实

13:08.820 --> 13:10.820
数字能不能作为属性名

13:10.820 --> 13:15.610
属性名能不能是数字

13:15.610 --> 13:17.610
能的话Q个1

13:17.610 --> 13:19.610
不能的话Q个2

13:24.330 --> 13:25.330
这有完蛋了

13:25.330 --> 13:27.330
这玩意有完蛋了

13:27.330 --> 13:28.330
有完蛋了

13:31.330 --> 13:33.330
这数字是不能作为属性名的

13:33.330 --> 13:34.330
这个基础又不扎实了

13:34.330 --> 13:36.330
数字是不能作为属性名的

13:36.330 --> 13:38.330
那一个同学开始反驳了

13:38.330 --> 13:40.330
它不对啊

13:40.330 --> 13:41.330
我就不行了

13:41.330 --> 13:43.330
数字不能作为属性名

13:43.330 --> 13:44.330
我就不行

13:44.330 --> 13:46.330
这个东西不能写

13:46.330 --> 13:47.330
不是能写吗

13:47.330 --> 13:48.330
你看

13:48.330 --> 13:49.330
不是能写吗

13:49.330 --> 13:50.330
对吧

13:50.330 --> 13:51.330
那里为什么说

13:51.330 --> 13:52.330
数字不能作为属性名的

13:52.330 --> 13:53.330
但是

13:53.330 --> 13:55.330
你这样子写的话

13:55.330 --> 13:57.330
它只是GS给你提供了一个变因

13:57.330 --> 13:59.330
它让你方便一点

13:59.330 --> 14:01.330
它的属性名真的是有数字吗

14:01.330 --> 14:02.330
不是

14:02.330 --> 14:04.330
它的属性名是制符串

14:04.330 --> 14:05.330
不信你看着

14:05.330 --> 14:09.600
这是一道面试题

14:10.600 --> 14:11.600
请问我这样子写的过后

14:11.600 --> 14:13.600
OB界有几个属性

14:13.600 --> 14:16.420
OB界有几个属性

14:16.420 --> 14:18.420
这样子写了过后

14:18.420 --> 14:21.890
是不是

14:21.890 --> 14:22.890
只有一个属性

14:22.890 --> 14:25.390
是不是

14:25.390 --> 14:26.390
你这样子写

14:26.390 --> 14:27.390
跟这样子写

14:27.390 --> 14:28.390
一样的

14:28.390 --> 14:29.390
这样子写的话

14:29.390 --> 14:31.390
它会自动帮你多做一步

14:31.390 --> 14:32.390
就是把这个东西

14:32.390 --> 14:33.390
转换成制符串

14:33.390 --> 14:34.390
没有任何一个对象

14:34.390 --> 14:35.390
可以用数字作为属性名的

14:35.390 --> 14:36.390
包括数组

14:36.390 --> 14:37.390
数组也是对象

14:37.390 --> 14:38.390
数组里面的所有的

14:38.390 --> 14:40.390
数字属性全是制符串

14:40.390 --> 14:42.390
不可能有那个数字的

14:42.390 --> 14:44.390
只有制符串能作为属性名

14:44.390 --> 14:45.390
将来那里面学到ES6

14:45.390 --> 14:46.390
ES6里面还会

14:46.390 --> 14:47.390
多一种类型

14:47.390 --> 14:48.390
叫symbol

14:48.390 --> 14:49.390
叫符号

14:49.390 --> 14:50.390
符号也可以作为属性名

14:50.390 --> 14:51.390
除了这两种

14:51.390 --> 14:52.390
不可能有第三种

14:54.390 --> 14:55.390
说了半天

14:55.390 --> 14:56.390
就是说什么意思呢

14:56.390 --> 14:57.390
就是它把属性名

14:57.390 --> 14:59.390
这一块给你拆分掉了

14:59.390 --> 15:00.390
用一个特殊制符

15:00.390 --> 15:01.390
数线

15:01.390 --> 15:03.390
因为一个普通对象里面

15:03.390 --> 15:04.390
它只能有一个属性

15:04.390 --> 15:05.390
只能有属性名和属性值

15:05.390 --> 15:06.390
它就没法加规则了

15:06.390 --> 15:07.390
它规则怎么办呢

15:07.390 --> 15:08.390
它就放在属性名里面

15:08.390 --> 15:09.390
它说

15:09.390 --> 15:10.390
摩口街是说

15:10.390 --> 15:11.390
你的属性名

15:11.390 --> 15:12.390
你就写特殊一点

15:12.390 --> 15:14.390
这个数线左边的

15:14.390 --> 15:17.390
作为生成的对象的属性名

15:17.390 --> 15:18.390
数线右边的

15:18.390 --> 15:20.390
就表示规则

15:20.390 --> 15:21.390
是这么个意思

15:21.390 --> 15:23.390
我们先大概了解一下

15:23.390 --> 15:24.390
属性名 规则

15:24.390 --> 15:26.390
然后就是属性值

15:26.390 --> 15:27.390
由这三个东西

15:27.390 --> 15:28.390
共同来决定

15:28.390 --> 15:29.390
怎么来生成

15:29.390 --> 15:30.390
这个魔力数据

15:30.390 --> 15:31.390
那么我们刚才

15:31.390 --> 15:33.390
这样子写的话

15:33.390 --> 15:34.390
是什么意思呢

15:34.390 --> 15:36.390
就表示只有属性名

15:36.390 --> 15:37.390
和属性值

15:37.390 --> 15:38.390
它没有规则

15:38.390 --> 15:39.390
规则是可选的

15:39.390 --> 15:41.390
可以不写

15:41.390 --> 15:42.390
那么如果说

15:42.390 --> 15:43.390
你没有规则的话

15:44.390 --> 15:45.390
你看着吧

15:48.390 --> 15:49.390
魔力出来的数据

15:49.390 --> 15:50.390
是不是就是这个

15:50.390 --> 15:51.390
缘分不动的数据

15:51.390 --> 15:52.390
它没有什么意义

15:52.390 --> 15:53.390
这样子没有什么意义

15:53.390 --> 15:54.390
但是呢

15:54.390 --> 15:55.390
是不是可以魔力出来

15:55.390 --> 15:56.390
属性名就是你写的属性名

15:56.390 --> 15:57.390
属性值就是你写的属性值

15:57.390 --> 15:59.390
因为它没有规则

15:59.390 --> 16:00.390
这是第一个

16:00.390 --> 16:01.390
比较特殊的情况

16:01.390 --> 16:02.390
如果说

16:02.390 --> 16:03.390
你要写规则的话

16:03.390 --> 16:04.390
完整的写法是这样子写

16:04.390 --> 16:05.390
属性名

16:05.390 --> 16:06.390
数线 规则

16:06.390 --> 16:07.390
然后属性值

16:07.390 --> 16:08.390
干啥

16:08.390 --> 16:09.390
随便写一个

16:09.390 --> 16:10.390
比方说我这里写

16:10.390 --> 16:11.390
这样子写

16:11.390 --> 16:13.900
规则呢

16:13.900 --> 16:14.900
我写一个

16:15.900 --> 16:20.000
好 比方说

16:21.000 --> 16:22.000
你看

16:22.000 --> 16:23.000
啥意思

16:23.000 --> 16:24.000
属性名叫做A

16:24.000 --> 16:25.000
你看生成的属性名

16:25.000 --> 16:26.000
是不是A

16:26.000 --> 16:27.000
属性名就决定了

16:27.000 --> 16:28.000
你生成出来的

16:28.000 --> 16:29.000
魔力数据的属性名

16:29.000 --> 16:30.000
属性名是A

16:30.000 --> 16:31.000
然后这个属性值呢

16:31.000 --> 16:33.000
它在这个情况下

16:33.000 --> 16:34.000
属性值呢

16:34.000 --> 16:35.000
就表示

16:35.000 --> 16:36.000
你要生成什么玩意

16:36.000 --> 16:37.000
你要生成一个数字

16:37.000 --> 16:38.000
因为你带了规则了

16:38.000 --> 16:39.000
你不带规则的话

16:39.000 --> 16:40.000
就直接属性值

16:40.000 --> 16:41.000
就直接是1了

16:41.000 --> 16:42.000
如果说你带了规则的话

16:42.000 --> 16:43.000
它不同的规则

16:43.000 --> 16:44.000
和不同的属性值

16:44.000 --> 16:45.000
它的效果不一样

16:45.000 --> 16:46.000
那么在这种情况下呢

16:46.000 --> 16:48.000
就是由规则和属性值

16:48.000 --> 16:49.000
共同决定的

16:50.000 --> 16:52.000
生成出来的属性值

16:52.000 --> 16:53.000
有点绕

16:53.000 --> 16:55.000
就是在我们的无办里边

16:55.000 --> 16:56.000
由规则这一块

16:56.000 --> 16:59.000
合理无办里边的属性值

16:59.000 --> 17:00.000
共同决定的

17:00.000 --> 17:03.000
生成到最终结果里边的属性值

17:03.000 --> 17:05.000
就是规则加属性值

17:05.000 --> 17:07.000
决定了最终生成的属性值

17:07.000 --> 17:09.000
那么在这种情况下呢

17:09.000 --> 17:10.000
告诉大家

17:10.000 --> 17:11.000
这里只要写个数字

17:11.000 --> 17:12.000
你随便写多少

17:12.000 --> 17:13.000
都一样

17:14.000 --> 17:15.000
只要你写个数字

17:15.000 --> 17:17.000
规则是一个数字

17:17.000 --> 17:18.000
到一个数字

17:18.000 --> 17:19.000
就表示什么呢

17:19.000 --> 17:22.000
生成一个2到100的水积数

17:22.000 --> 17:24.000
生成一个2到100的水积数

17:24.000 --> 17:25.000
你看

17:26.000 --> 17:27.000
21

17:27.000 --> 17:28.000
50是

17:28.000 --> 17:30.000
生成一个2到100的水积数

17:30.000 --> 17:31.000
然后呢

17:31.000 --> 17:32.000
并就固定为2

17:32.000 --> 17:33.000
原来的意思吧

17:33.000 --> 17:34.000
所以说我们理解了

17:34.000 --> 17:36.000
基本概念之后

17:38.000 --> 17:39.000
我们就

17:39.000 --> 17:40.000
现在剩下的事情就很简单了

17:40.000 --> 17:42.000
什么事情呢就是

17:43.000 --> 17:45.000
那么属性名我知道了

17:45.000 --> 17:46.000
你写啥

17:46.000 --> 17:48.000
生成出来就是啥

17:49.000 --> 17:50.000
规则

17:50.000 --> 17:51.000
和这里的值

17:51.000 --> 17:52.000
共同决定的

17:52.000 --> 17:54.000
它生成出来什么玩意儿

17:54.000 --> 17:55.000
那么

17:55.000 --> 17:56.000
生产的问题就是

17:56.000 --> 17:58.000
我怎么知道哪些规则

17:58.000 --> 18:00.000
和哪些属性值

18:00.000 --> 18:02.000
生成出来的什么玩意儿呢

18:02.000 --> 18:03.000
详情见证

18:04.000 --> 18:05.000
对吧

18:05.000 --> 18:06.000
所以我们讲第三方库呢

18:06.000 --> 18:07.000
要用这种讲法

18:08.000 --> 18:09.000
你把概念

18:09.000 --> 18:10.000
梳理清楚过后

18:10.000 --> 18:11.000
这个手里看文档

18:11.000 --> 18:12.000
就看得非常舒服了

18:12.000 --> 18:13.000
你看吧

18:13.000 --> 18:15.820
你看吧

18:15.820 --> 18:17.820
属性值如果说是

18:17.820 --> 18:18.820
它说属性值

18:18.820 --> 18:19.820
如果说是制服串

18:19.820 --> 18:20.820
啥意思啊

18:20.820 --> 18:21.820
就是在这

18:21.820 --> 18:22.820
属性值

18:22.820 --> 18:23.820
如果说是一个制服串

18:24.820 --> 18:25.820
然后呢

18:25.820 --> 18:26.820
规则呢

18:26.820 --> 18:27.820
它有分成之几种情况

18:27.820 --> 18:29.820
如果说你规则是这样子写的

18:29.820 --> 18:30.820
那么就什么

18:30.820 --> 18:31.820
它就重复了

18:31.820 --> 18:32.820
后边的制服串

18:32.820 --> 18:34.820
重复了次数

18:34.820 --> 18:35.820
大于等于命

18:35.820 --> 18:36.820
小于等于max

18:37.820 --> 18:38.820
看几个就明白了

18:38.820 --> 18:39.820
比方说这里呢

18:39.820 --> 18:40.820
我写一个

18:40.820 --> 18:41.820
abc

18:43.820 --> 18:44.820
那么这里呢

18:44.820 --> 18:46.820
我写一个1到3

18:46.820 --> 18:47.820
啥意思呢

18:47.820 --> 18:48.820
你就重复这个制服串

18:48.820 --> 18:52.650
重复1到3次

18:52.650 --> 18:53.650
你看

18:53.650 --> 18:55.650
一次

18:55.650 --> 18:57.650
这就是3次

18:57.650 --> 18:58.650
2次

18:58.650 --> 18:59.650
水击的

18:59.650 --> 19:01.650
生成出来的属性名是a

19:01.650 --> 19:02.650
然后重复这个制服串

19:02.650 --> 19:04.650
重复1到3次

19:04.650 --> 19:05.650
你这样看文档

19:05.650 --> 19:06.650
是不是看懂了

19:06.650 --> 19:07.650
然后呢

19:07.650 --> 19:08.650
如果说你属性值是制服串

19:08.650 --> 19:09.650
那么这里呢

19:09.650 --> 19:10.650
只写一个数字

19:10.650 --> 19:13.650
它就是重复指定的次数

19:13.650 --> 19:14.650
不用演示了吧

19:14.650 --> 19:15.650
你的属性值

19:15.650 --> 19:17.650
如果说是数字

19:17.650 --> 19:18.650
那么比方说这里

19:18.650 --> 19:19.650
number

19:19.650 --> 19:20.650
这里写个加1

19:20.650 --> 19:22.650
就是如果说你要生成多个数据

19:22.650 --> 19:23.650
那么它就会一次加1

19:23.650 --> 19:24.650
第一次为1

19:24.650 --> 19:25.650
第二次为2

19:25.650 --> 19:26.650
以后我们可以演示

19:26.650 --> 19:28.650
如果说我们刚才写的

19:28.650 --> 19:29.650
这里写个数字

19:29.650 --> 19:30.650
随便什么数字

19:30.650 --> 19:31.650
它告诉你属性值

19:31.650 --> 19:32.650
number

19:32.650 --> 19:33.650
只用来确定内容

19:33.650 --> 19:34.650
随便写个什么数字

19:34.650 --> 19:36.650
那么它就生成一个水击数

19:36.650 --> 19:38.650
它到它之间的一个水击数

19:38.650 --> 19:39.650
对吧

19:39.650 --> 19:40.650
那么这个地方呢

19:40.650 --> 19:41.650
是要保留小数

19:41.650 --> 19:42.650
保留小数

19:42.650 --> 19:43.650
保留多少位

19:43.650 --> 19:44.650
因为看一下生成不耳

19:44.650 --> 19:45.650
那么这些东西

19:45.650 --> 19:47.650
是不是都用来看的懂吗

19:47.650 --> 19:49.650
因此你看懂文档的前提

19:49.650 --> 19:52.650
是你要理解它的核心概念

19:52.650 --> 19:53.650
好

19:53.650 --> 19:54.650
再比方说

19:54.650 --> 19:57.650
这里有个政策表拉式

19:57.650 --> 19:59.650
政策表拉式不需要规则

19:59.650 --> 20:00.650
它告诉你不需要规则

20:00.650 --> 20:01.650
你直接写属性名

20:01.650 --> 20:02.650
特别写政策表拉式就行了

20:02.650 --> 20:03.650
它就会随机生成

20:03.650 --> 20:05.650
满足这个政策表拉式的东西

20:05.650 --> 20:06.650
比方说我们这里

20:06.650 --> 20:07.650
生成一个什么呢

20:07.650 --> 20:09.650
生成个电话号码

20:09.650 --> 20:10.650
随机生成个电话号码

20:10.650 --> 20:11.650
电话号码我就简单写一下

20:11.650 --> 20:12.650
写个政策表拉式

20:12.650 --> 20:13.650
第一位是个1

20:13.650 --> 20:15.650
后边是不是10个数字

20:15.650 --> 20:17.650
我简单写一下

20:17.650 --> 20:18.650
不用写得那么复杂

20:18.650 --> 20:19.650
第一位是1

20:19.650 --> 20:20.650
后边是有10个数

20:20.650 --> 20:22.650
随便说怎么10个数字就完事了

20:22.650 --> 20:23.650
你看一下

20:23.650 --> 20:24.650
它生成出来

20:24.650 --> 20:28.020
第一次生成这个

20:28.020 --> 20:30.020
第二次生成这个

20:30.020 --> 20:31.020
第三次生成这个

20:31.020 --> 20:32.020
对

20:32.020 --> 20:33.020
就是政策表拉式

20:33.020 --> 20:34.020
好

20:34.020 --> 20:35.020
那么这里还有一个

20:35.020 --> 20:36.020
就是我们比较重要的地方

20:36.020 --> 20:38.020
就是数组

20:38.020 --> 20:41.020
如果说你的属性值是一个数组

20:41.020 --> 20:42.020
比方说啊

20:43.020 --> 20:44.020
是一个数组

20:44.020 --> 20:45.020
那么这种情况下呢

20:45.020 --> 20:46.020
你看啊

20:46.020 --> 20:49.780
有各种写法

20:49.780 --> 20:50.780
这里直接写个数字

20:50.780 --> 20:51.780
那么就从数组里面

20:51.780 --> 20:52.780
随便选一个

20:52.780 --> 20:53.780
然后这个数组里边写个

20:53.780 --> 20:55.780
3579

20:55.780 --> 20:56.780
那么这里边我写

20:56.780 --> 20:57.780
这样子写

20:58.780 --> 20:59.780
1

20:59.780 --> 21:00.780
啥意思

21:02.780 --> 21:03.780
啥意思

21:03.780 --> 21:04.780
它就在3579里边

21:04.780 --> 21:05.780
随便选一个

21:05.780 --> 21:06.780
就写一个数字

21:08.780 --> 21:09.780
加1呢

21:09.780 --> 21:10.780
从

21:10.780 --> 21:12.780
数组里边顺序选一个

21:12.780 --> 21:13.780
顺序选一个

21:13.780 --> 21:14.780
顺序选一个

21:14.780 --> 21:15.780
我现在还不好演示

21:15.780 --> 21:16.780
以后再演示

21:16.780 --> 21:17.780
然后这个呢

21:17.780 --> 21:19.780
这个东西就是

21:19.780 --> 21:21.780
它按照数组里边的东西

21:21.780 --> 21:25.160
生成一个新的数组

21:25.160 --> 21:27.160
重复了次数大于

21:27.160 --> 21:29.160
等于最小值小于等于麦克斯值

21:29.160 --> 21:31.160
这东西我们常常用

21:31.160 --> 21:32.160
啥意思

21:32.160 --> 21:33.160
给大家看一下

21:34.160 --> 21:35.160
比方说

21:36.160 --> 21:37.160
我这里写个3

21:38.160 --> 21:39.160
这里写

21:40.160 --> 21:42.160
1到100

21:42.160 --> 21:43.160
啥意思

21:44.160 --> 21:45.160
生

21:45.160 --> 21:47.160
这个属性值是一个数组

21:47.160 --> 21:49.160
数组有多少项呢

21:49.160 --> 21:51.160
数组有1到100项

21:52.160 --> 21:53.160
到底有多少项

21:53.160 --> 21:54.160
我也不知道

21:54.160 --> 21:55.160
随机的

21:55.160 --> 21:56.160
那么数组里边

21:56.160 --> 21:57.160
每一项的值是啥呢

21:57.160 --> 21:59.160
每一项的值是3

21:59.160 --> 22:02.860
没了意思吧

22:02.860 --> 22:04.860
所以每一项的值是3

22:04.860 --> 22:05.860
那如果说我这里

22:05.860 --> 22:06.860
每一项是什么呢

22:06.860 --> 22:07.860
每一项是个堆箱呢

22:07.860 --> 22:08.860
注意哦

22:08.860 --> 22:10.860
这个堆箱又可以是模板

22:10.860 --> 22:14.230
仍然可以是模板

22:14.230 --> 22:15.230
什么意思

22:15.230 --> 22:16.230
就是我这个数据里边

22:16.230 --> 22:17.230
数据有多少项

22:17.230 --> 22:18.230
1到100项

22:18.230 --> 22:19.230
任何随机一个

22:19.230 --> 22:20.230
然后数据里边

22:20.230 --> 22:21.230
每一项是一个堆箱

22:21.230 --> 22:23.230
这个堆箱也是随机生成的

22:23.230 --> 22:24.230
随机生成

22:24.230 --> 22:25.230
我们怎么写的

22:25.230 --> 22:26.230
比方说

22:26.230 --> 22:27.230
我们写上一个

22:28.230 --> 22:29.230
Tail

22:29.230 --> 22:30.230
把Tail写过来

22:30.230 --> 22:33.180
你看一下

22:33.180 --> 22:35.180
它就生成了一个数据

22:35.180 --> 22:36.180
数据里面每一个是个堆箱

22:36.180 --> 22:37.180
堆箱里面每一个是个Tail

22:37.180 --> 22:39.180
是不是又随机生成

22:40.180 --> 22:41.180
又随机生成

22:41.180 --> 22:42.180
那么这里边

22:42.180 --> 22:43.180
如果说我写个ID

22:43.180 --> 22:44.180
编号

22:44.180 --> 22:45.180
编号的时候

22:45.180 --> 22:46.180
我们可以利用

22:46.180 --> 22:47.180
刚才那种写法

22:47.180 --> 22:48.180
规则加1

22:48.180 --> 22:49.180
数字随便一个

22:49.180 --> 22:50.180
随便一个

22:51.180 --> 22:52.180
那么这个时候

22:52.180 --> 22:54.180
重复了生成的对象

22:54.180 --> 22:55.180
第一是生成的时候

22:55.180 --> 22:56.180
ID为1

22:56.180 --> 22:57.180
第二是生成的时候

22:57.180 --> 22:58.180
ID为2

22:58.180 --> 22:59.180
明白吧

22:59.180 --> 23:00.180
这就是加号的意思

23:00.180 --> 23:01.180
加1的意思

23:01.180 --> 23:02.180
你看一下

23:04.180 --> 23:05.180
ID就出来了

23:05.180 --> 23:07.180
这就是用来生成测试数据的

23:08.180 --> 23:09.180
这里边还有很多

23:09.180 --> 23:10.180
比方说

23:10.180 --> 23:12.180
我还可以生成姓名

23:13.180 --> 23:15.180
我要随机生成一个姓名

23:16.180 --> 23:17.180
那怎么随机生成一个姓名的

23:17.180 --> 23:18.180
你看这里边

23:19.180 --> 23:21.180
它不但给你生成了一些磨判之外

23:23.180 --> 23:24.180
它还给你提供了一些工具

23:26.180 --> 23:27.180
就是随机工具

23:27.180 --> 23:29.180
那工具里边有很多随机工具

23:29.180 --> 23:31.180
比方说这里一个name

23:31.180 --> 23:32.180
你点一下

23:32.180 --> 23:36.710
这个东西可以生成一个随机的

23:36.710 --> 23:37.710
first name

23:37.710 --> 23:38.710
一个随机的last name

23:39.710 --> 23:40.710
前面我们都不太用得到

23:40.710 --> 23:41.710
我们一般去

23:41.710 --> 23:42.710
是用中文名

23:42.710 --> 23:43.710
因为这个库

23:43.710 --> 23:44.710
本身是中国人做的

23:44.710 --> 23:45.710
比如它支持中文

23:46.710 --> 23:47.710
它可以通过

23:48.710 --> 23:50.710
来随机生成一个中文名字

23:50.710 --> 23:51.710
那么这里边

23:51.710 --> 23:52.710
我们怎么来在这里边

23:52.710 --> 23:54.710
去应用这个函数呢

23:54.710 --> 23:55.710
这里边是可以应用

23:56.710 --> 23:57.710
这个默克里边的函数的

23:57.710 --> 23:58.710
它给你提供了一些函数

23:59.710 --> 24:01.710
在模板里边用函数

24:01.710 --> 24:02.710
非常简单

24:02.710 --> 24:03.710
你只需要写到

24:04.710 --> 24:05.710
A塔里边写上什么

24:05.710 --> 24:06.710
函数名字

24:07.710 --> 24:08.710
就可以了

24:08.710 --> 24:09.710
你可以调用一下

24:09.710 --> 24:10.710
也可以

24:10.710 --> 24:11.710
保存

24:12.710 --> 24:13.710
生成出来

24:13.710 --> 24:15.710
所以每个名字就出来了

24:15.710 --> 24:16.710
每个中文的名字

24:18.710 --> 24:19.710
当然有没有这意思

24:19.710 --> 24:20.710
这就是默克里

24:20.710 --> 24:21.710
它生成测试数据的办法

24:22.710 --> 24:23.710
这一方没问题吧

24:23.710 --> 24:24.710
没问题

24:29.180 --> 24:31.180
它是规则和属性值

24:31.180 --> 24:33.180
共同决定的生成的结果

24:34.180 --> 24:35.180
那么接下来

24:35.180 --> 24:36.180
我要做练习了

24:36.180 --> 24:37.180
来做练习

24:38.180 --> 24:39.180
这是个表格

24:40.180 --> 24:41.180
这个表格

24:41.180 --> 24:43.180
我要生成一些测试数据

24:44.180 --> 24:45.180
我要生成一个测试数据

24:46.180 --> 24:50.280
来吧

24:50.280 --> 24:51.280
生成一些测试数据

24:51.280 --> 24:53.280
然后把表格填充起来

24:53.280 --> 24:54.280
就生成

24:54.280 --> 24:55.280
这就是我T-body里边

24:55.280 --> 24:57.280
是不是不断的填充T-R

24:58.280 --> 24:59.280
这里边我用到了

24:59.280 --> 25:00.280
昨天我们学习的不试试

25:01.280 --> 25:02.280
也没什么好看的

25:02.280 --> 25:03.280
就是一个table

25:04.280 --> 25:05.280
script

25:05.280 --> 25:07.280
这光是什么东西

25:07.280 --> 25:08.280
我都忘了

25:08.280 --> 25:09.280
这是个背景页

25:09.280 --> 25:10.280
是黑色的主题

25:10.280 --> 25:11.280
非常简单

25:13.280 --> 25:15.280
那么现在我们要去生成测试数据

25:15.280 --> 25:16.280
我们就

25:16.280 --> 25:18.280
先写个函数吧

25:19.280 --> 25:20.280
或者是写个模板

25:21.280 --> 25:23.280
因为这个模板肯定要写的比较多

25:23.280 --> 25:25.280
然后我们默可引引用了

25:25.280 --> 25:27.280
我们直接使用什么

25:28.280 --> 25:30.280
来把模板传进去

25:30.280 --> 25:31.280
刚才我们是直接在这里写的

25:31.280 --> 25:32.280
对吧

25:32.280 --> 25:34.280
那么这里传个背边量也是一样的

25:34.280 --> 25:35.280
没什么问题

25:35.280 --> 25:36.280
那么这里能我们生成什么

25:36.280 --> 25:37.280
生成很多的学生

25:38.280 --> 25:40.280
我们之后输出一下

25:40.280 --> 25:42.280
看一下我们生成的学生

25:42.280 --> 25:43.280
当然现在输出的结果

25:43.280 --> 25:46.300
啥都没有

25:46.300 --> 25:47.300
你看

25:47.300 --> 25:48.300
就啥都没有

25:48.300 --> 25:49.300
那么接下来

25:49.300 --> 25:50.300
慢慢的生成

25:50.300 --> 25:51.300
一个个来

25:51.300 --> 25:53.300
首先是template

25:53.300 --> 25:54.300
template

25:54.300 --> 25:55.300
模板里面

25:55.300 --> 25:56.300
你看一下模板里面有什么

25:56.300 --> 25:57.300
有姓名

25:57.300 --> 25:58.300
姓名是什么

25:58.300 --> 25:59.300
name

25:59.300 --> 26:00.300
对吧

26:00.300 --> 26:01.300
我们比方说

26:01.300 --> 26:02.300
生成一个属性名字叫name

26:02.300 --> 26:04.300
name是指什么呢

26:04.300 --> 26:06.300
sene

26:06.300 --> 26:07.300
你看

26:07.300 --> 26:08.300
生成出来是不是个对象

26:08.300 --> 26:09.300
name对

26:09.300 --> 26:10.300
等于水级的

26:10.300 --> 26:11.300
水级的一个名字

26:11.300 --> 26:12.300
但是我们这里

26:12.300 --> 26:13.300
是不是有很多的学生

26:13.300 --> 26:14.300
他不是一个学生

26:14.300 --> 26:15.300
是不是有很多

26:15.300 --> 26:16.300
很多怎么办呢

26:16.300 --> 26:17.300
那么我们至少

26:17.300 --> 26:18.300
肯定要生成一个数据

26:18.300 --> 26:19.300
于是我们的模板里面

26:19.300 --> 26:20.300
这样的写了

26:20.300 --> 26:21.300
一个data

26:21.300 --> 26:24.570
数据有多少像

26:24.570 --> 26:25.570
数据呢

26:25.570 --> 26:26.570
比方说就二十

26:26.570 --> 26:28.570
到三十像

26:28.570 --> 26:29.570
水级

26:29.570 --> 26:30.570
数据里面

26:30.570 --> 26:31.570
每个数据里面

26:31.570 --> 26:32.570
是一个对象

26:32.570 --> 26:33.570
对象里面有name

26:33.570 --> 26:34.570
sene

26:34.570 --> 26:36.570
这里可以调用

26:36.570 --> 26:37.570
也可以不写调用

26:37.570 --> 26:38.570
都一样

26:38.570 --> 26:40.570
生成一个数据

26:40.570 --> 26:41.570
二十到三十像

26:41.570 --> 26:42.570
数据里面

26:42.570 --> 26:43.570
每一项

26:43.570 --> 26:44.570
按照这个模板

26:44.570 --> 26:45.570
这动作我生成

26:45.570 --> 26:47.570
数据是不是出来了

26:47.570 --> 26:48.570
对吧

26:48.570 --> 26:49.570
然后一个个来

26:49.570 --> 26:50.570
性别

26:51.570 --> 26:52.570
除了name之外

26:52.570 --> 26:53.570
是不是还有性别

26:53.570 --> 26:54.570
性别的话

26:54.570 --> 26:55.570
要么是男

26:55.570 --> 26:56.570
要么是女

26:56.570 --> 26:57.570
怎么办呢

26:57.570 --> 26:58.570
我这里可以用政策表达

26:58.570 --> 26:59.570
是男

26:59.570 --> 27:00.570
或者是女

27:00.570 --> 27:01.570
对不对

27:01.570 --> 27:02.570
保存

27:05.570 --> 27:06.570
性别说出来了

27:06.570 --> 27:08.570
年龄

27:08.570 --> 27:10.570
年龄的话是随机的

27:10.570 --> 27:12.570
是不是可以写一些规则

27:12.570 --> 27:14.570
规则

27:14.570 --> 27:16.570
比方说年龄最小的话

27:16.570 --> 27:18.570
学生年龄不能太小

27:18.570 --> 27:19.570
年龄

27:19.570 --> 27:20.570
幼儿园开始吧

27:20.570 --> 27:21.570
三

27:21.570 --> 27:22.570
三到

27:22.570 --> 27:24.570
五十岁吧

27:24.570 --> 27:25.570
年龄

27:25.570 --> 27:26.570
后面只要表示它是数字就行了

27:26.570 --> 27:27.570
随便写一个

27:27.570 --> 27:29.570
那表示它是数字就完成了

27:29.570 --> 27:32.070
年龄是不是出来了

27:32.070 --> 27:33.070
你看用这个东西

27:33.070 --> 27:34.070
模拟数据是不是特别方便

27:34.070 --> 27:35.070
然后再来

27:35.070 --> 27:37.070
年龄完了过后

27:37.070 --> 27:38.070
是联系电话

27:39.070 --> 27:40.070
tell吧

27:40.070 --> 27:41.070
联系电话

27:41.070 --> 27:42.070
联系电话

27:42.070 --> 27:43.070
是不是可以用那个

27:43.070 --> 27:44.070
我们刚才学过的

27:44.070 --> 27:45.070
政策表达是

27:45.070 --> 27:46.070
十个

27:47.070 --> 27:49.070
联系电话是不是出来了

27:49.070 --> 27:50.070
又来

27:50.070 --> 27:51.070
邮箱

27:51.070 --> 27:52.070
邮箱的时候也可以用

27:52.070 --> 27:53.070
这种表达是

27:53.070 --> 27:54.070
没有

27:56.070 --> 27:57.070
邮箱呢

27:57.070 --> 27:58.070
我就简单写一下

27:58.070 --> 28:00.070
我又不去扣了些细节了

28:00.070 --> 28:02.070
前面的任意的单词制服

28:02.070 --> 28:03.070
出现一次过多次

28:03.070 --> 28:04.070
然后有个et

28:04.070 --> 28:06.070
然后任意的单词制服

28:06.070 --> 28:07.070
出现了

28:07.070 --> 28:09.070
两次到三次了

28:09.070 --> 28:10.070
然后有一个点

28:10.070 --> 28:11.070
然后后面又是一个

28:11.070 --> 28:12.070
任意的单词制服

28:12.070 --> 28:13.070
出现两次到三次

28:13.070 --> 28:14.070
就这样

28:14.070 --> 28:16.070
简单说一下

28:16.070 --> 28:17.070
好看一下

28:17.070 --> 28:18.070
你们都能写

28:18.070 --> 28:19.070
学过政策表达是

28:19.070 --> 28:21.070
都能写邮箱的政策表达是

28:21.070 --> 28:22.070
大概这么个意思

28:22.070 --> 28:23.070
反正是测试数据

28:23.070 --> 28:24.070
不用那么较则

28:24.070 --> 28:26.070
然后那是家庭住址

28:26.070 --> 28:27.070
而Dress

28:27.070 --> 28:28.070
家庭住址

28:28.070 --> 28:29.070
我这里给大家说一下

28:29.070 --> 28:30.070
你可以随便生成

28:30.070 --> 28:31.070
但是我建议大家

28:31.070 --> 28:33.070
可以用它的水积函数

28:34.070 --> 28:35.070
它里边给你提供了

28:35.070 --> 28:36.070
一个水积函数特别好用

28:36.070 --> 28:37.070
在那呢

28:37.070 --> 28:38.070
在这

28:39.070 --> 28:40.070
在这

28:40.070 --> 28:41.070
在这而Dress

28:41.070 --> 28:43.070
它可以随意生成一个地址

28:44.070 --> 28:45.070
Region

28:45.070 --> 28:46.070
生成中国一个大区

28:46.070 --> 28:47.070
Permice

28:47.070 --> 28:48.070
生成中国的一个省

28:48.070 --> 28:49.070
City

28:49.070 --> 28:51.070
生成中国的一个市

28:51.070 --> 28:52.070
那么这里如果说

28:52.070 --> 28:53.070
参数传一个处的话

28:53.070 --> 28:54.070
它会连这个

28:54.070 --> 28:55.070
省份也给带进来

28:55.070 --> 28:56.070
所以说我们这里

28:56.070 --> 28:57.070
可以用这个水积函数

28:57.070 --> 28:58.070
City

28:59.070 --> 29:00.070
传个参数处

29:00.070 --> 29:01.070
把省份也给我带进来

29:02.070 --> 29:03.070
好 你看一下

29:03.070 --> 29:04.070
生成出来

29:06.700 --> 29:07.700
在这边

29:07.700 --> 29:08.700
这边

29:11.660 --> 29:12.660
展开

29:12.660 --> 29:13.660
地址是不是有了

29:14.660 --> 29:15.660
对吧

29:15.660 --> 29:16.660
好 那么这里

29:16.660 --> 29:17.660
其实我们生成测试数据

29:17.660 --> 29:19.660
只需要把它模办给它写好

29:19.660 --> 29:20.660
这样的事情是不是

29:20.660 --> 29:21.660
扔进去玩笑了

29:21.660 --> 29:22.660
生成测试数据

29:22.660 --> 29:23.660
对吧

29:23.660 --> 29:24.660
好 这一块没问题

29:24.660 --> 29:25.660
QQE

29:29.700 --> 29:30.700
好 这是第一步

29:30.700 --> 29:32.700
咱们生成测试数据

29:32.700 --> 29:33.700
导定了

29:33.700 --> 29:34.700
接下来是蓝节请求了

29:36.700 --> 29:37.700
哎呦

29:37.700 --> 29:38.700
这个地方就麻烦了

29:38.700 --> 29:39.700
因为有些同学呢

29:39.700 --> 29:41.700
是没有学过网络中心的

29:41.700 --> 29:43.700
服务系的概念都不知道

29:43.700 --> 29:44.700
网络中心的概念都不知道

29:44.700 --> 29:45.700
那是没有办法

29:45.700 --> 29:47.700
给你说什么请求响应的

29:47.700 --> 29:48.700
简单

29:48.700 --> 29:50.700
最简单的语言

29:50.700 --> 29:51.700
能让你

29:51.700 --> 29:52.700
稍微的理解一点

29:52.700 --> 29:53.700
就可以了

29:53.700 --> 29:54.700
这里不用去深究

29:54.700 --> 29:56.700
因为这里背后是一块大知识

29:56.700 --> 29:58.700
我们只要把大一把写出来就行了

29:58.700 --> 30:00.700
但是不是说原理不重要

30:00.700 --> 30:02.700
背后的原理很重要很重要的

30:02.700 --> 30:03.700
应该说是简单最重要的知识

30:03.700 --> 30:05.700
就是我网络通信

30:05.700 --> 30:07.700
这一块没法展开了

30:07.700 --> 30:08.700
简单说一下

30:08.700 --> 30:09.700
就是说

30:09.700 --> 30:10.700
什么叫请求呢

30:10.700 --> 30:12.700
就是我这边是个浏览器

30:12.700 --> 30:13.700
对吧

30:13.700 --> 30:15.700
我可以在浏览器里边呢

30:15.700 --> 30:17.700
通过网络

30:17.700 --> 30:19.700
向另一台计算机

30:20.700 --> 30:22.700
发出一个询问

30:22.700 --> 30:23.700
问啥呢

30:23.700 --> 30:24.700
问你要数据

30:24.700 --> 30:25.700
这叫请求

30:25.700 --> 30:27.700
另一台计算机呢

30:27.700 --> 30:29.700
他把数据扔给我了

30:29.700 --> 30:31.700
这叫做响应

30:31.700 --> 30:33.700
你说简单这样理解就行了

30:33.700 --> 30:35.700
那什么叫难解请求呢

30:35.700 --> 30:37.700
我就是我正常

30:37.700 --> 30:38.700
去询问数据

30:38.700 --> 30:41.700
结果我询问出去的过后呢

30:41.700 --> 30:44.700
我的请求被另外一个东西解获了

30:44.700 --> 30:46.700
他根本就没把我的请求发出去

30:46.700 --> 30:47.700
然后给我扔回来了

30:47.700 --> 30:49.700
就是刚才这张图

30:49.700 --> 30:52.700
只能简单简单讲

30:52.700 --> 30:53.700
那么我们现在就

30:53.700 --> 30:54.700
第一个问题啊

30:54.700 --> 30:55.700
先不要说难解请求

30:55.700 --> 30:58.700
我们怎么请求的问题

30:58.700 --> 31:00.700
怎么请求的问题

31:00.700 --> 31:01.700
怎么请求呢

31:01.700 --> 31:03.700
在结夸位里边

31:03.700 --> 31:06.700
在结夸位里边

31:06.700 --> 31:08.700
他是提供了一个函数

31:08.700 --> 31:09.700
我们之前讲结夸位没讲对吧

31:09.700 --> 31:10.700
因为是超纱的

31:10.700 --> 31:11.700
超过目前的

31:11.700 --> 31:13.700
他学习的知识的

31:13.700 --> 31:15.700
他里面提供一个方法

31:15.700 --> 31:16.700
方法啊

31:16.700 --> 31:17.700
这是个对象

31:17.700 --> 31:18.700
他不单是一个方法

31:18.700 --> 31:19.700
他也是对象

31:19.700 --> 31:20.700
因为我们知道

31:20.700 --> 31:21.700
函数本身也是对象

31:21.700 --> 31:22.700
对象里面他有一个方法

31:22.700 --> 31:25.700
叫做get解释

31:25.700 --> 31:28.700
叫做发出请求

31:28.700 --> 31:30.700
发出请求的时候呢

31:30.700 --> 31:31.700
这里边要写个请求地址

31:31.700 --> 31:32.700
就跟你上网的时候

31:32.700 --> 31:33.700
在浏览器里边

31:33.700 --> 31:34.700
是不是要写个地址

31:34.700 --> 31:35.700
对吧

31:35.700 --> 31:36.700
请求百度啊

31:36.700 --> 31:37.700
心脏啊等等

31:37.700 --> 31:38.700
要写个地址

31:38.700 --> 31:39.700
那么这个地址呢

31:39.700 --> 31:40.700
一般从哪来呢

31:40.700 --> 31:41.700
一般是前后端

31:41.700 --> 31:42.700
比方我跟阿托老师

31:42.700 --> 31:43.700
他是后端开发

31:43.700 --> 31:44.700
我是前端开发

31:45.700 --> 31:46.700
一开始有一个约定好

31:46.700 --> 31:47.700
比方说你要拿学生数据

31:47.700 --> 31:49.700
好我之前有约定好

31:49.700 --> 31:50.700
不要改了啊

31:50.700 --> 31:51.700
大家就这样做

31:51.700 --> 31:52.700
以后呢你要拿学生数据

31:52.700 --> 31:54.700
你就请求这个地址

31:54.700 --> 31:55.700
get解释

31:55.700 --> 31:56.700
是我们双方约定的

31:56.700 --> 31:58.700
它可以是任何东西

31:58.700 --> 31:59.700
可以是任何地址

31:59.700 --> 32:00.700
你就去请求这个地址

32:00.700 --> 32:01.700
然后呢

32:01.700 --> 32:02.700
正常情况下呢

32:02.700 --> 32:05.700
我就会把这学生数据给力

32:05.700 --> 32:06.700
给力的时候呢

32:06.700 --> 32:07.700
我这边怎么拿到

32:07.700 --> 32:08.700
这个学生数据呢

32:08.700 --> 32:09.700
不是法规啊

32:09.700 --> 32:10.700
因为他请求

32:10.700 --> 32:11.700
是一个异步的过程

32:11.700 --> 32:12.700
什么要异步

32:12.700 --> 32:13.700
就要等离过

32:13.700 --> 32:14.700
他需要一段时间

32:14.700 --> 32:15.700
总之呢

32:15.700 --> 32:16.700
他拿到数据过后呢

32:16.700 --> 32:18.700
他就会给我

32:18.700 --> 32:19.700
给我运行这个函数

32:19.700 --> 32:21.700
他会把这个数据给我

32:21.700 --> 32:23.700
他会把这个数据给我

32:23.700 --> 32:24.700
我们这里输出一下

32:24.700 --> 32:26.700
我们看一下

32:26.700 --> 32:27.700
现在能不能拿到数据

32:27.700 --> 32:28.700
我去请求他

32:28.700 --> 32:29.700
然后呢

32:29.700 --> 32:30.700
拿到这个数据

32:30.700 --> 32:31.700
他能不能拿到呢

32:31.700 --> 32:33.700
你看是不是就直接抱错了

32:33.700 --> 32:34.700
他告诉你什么

32:34.700 --> 32:35.700
四零四呢

32:35.700 --> 32:37.700
根本就请求不到

32:37.700 --> 32:38.700
为什么呢

32:38.700 --> 32:39.700
因为阿托老师现在在睡觉

32:39.700 --> 32:41.700
在陪老婆逛街

32:41.700 --> 32:42.700
他现在没有做开发

32:43.700 --> 32:44.700
还没开始动

32:44.700 --> 32:45.700
到我现在正在开发前端

32:45.700 --> 32:47.700
所以说拿不到这个数据

32:47.700 --> 32:48.700
后来还没有开发完成

32:48.700 --> 32:49.700
那么这个时候怎么办

32:49.700 --> 32:52.700
我们就需要一个东西来拦截

32:52.700 --> 32:53.700
怎么拦截呢

32:53.700 --> 32:54.700
穆可街是里面

32:54.700 --> 32:55.700
有个非常非常方便的东西

32:55.700 --> 32:56.700
就可以拦截

32:56.700 --> 32:58.700
怎么个拦截法

32:58.700 --> 33:01.840
穆可里边可以传

33:01.840 --> 33:03.840
第一个参数

33:03.840 --> 33:04.840
第一个参数

33:04.840 --> 33:06.840
就可以传拦截的地址

33:06.840 --> 33:07.840
比方说

33:07.840 --> 33:09.840
你要拦截这个地址

33:09.840 --> 33:10.840
其他地址我过

33:10.840 --> 33:12.840
反而是对这个地址的请求

33:12.840 --> 33:13.840
我就要进行拦截

33:13.840 --> 33:15.840
拦截之后呢

33:15.840 --> 33:17.840
我不会真正的去访问

33:17.840 --> 33:18.840
我的服务器

33:18.840 --> 33:21.840
而是别地扔一个测试数据

33:21.840 --> 33:22.840
而我的测试数据

33:22.840 --> 33:23.840
通过这个模板

33:23.840 --> 33:24.840
生成出来

33:25.840 --> 33:27.840
拦截这个地址

33:27.840 --> 33:31.920
使用模板

33:31.920 --> 33:34.920
生成测试数据

33:34.920 --> 33:35.920
返回

33:36.920 --> 33:37.920
好我们看一下

33:37.920 --> 33:38.920
这样子写了过后

33:38.920 --> 33:40.920
那我这里能不能拿到数据了

33:41.920 --> 33:43.920
是不是可以拿到数据了

33:43.920 --> 33:45.920
我们这里去请求这个地址

33:45.920 --> 33:46.920
然后那边给我一个数据

33:46.920 --> 33:47.920
你看啊

33:47.920 --> 33:48.920
对于这个代码来说

33:48.920 --> 33:50.920
它根本就不知道

33:50.920 --> 33:52.920
这个数据是真实的数据

33:52.920 --> 33:53.920
还是测试的数据

33:53.920 --> 33:54.920
是不是根本就不知道

33:54.920 --> 33:56.920
它这个代码写出来

33:56.920 --> 33:58.920
就是按照真实的数据来的

33:58.920 --> 33:59.920
将来有一天

33:59.920 --> 34:00.920
你要上线了

34:00.920 --> 34:02.920
一把数据发出一数字就没了

34:02.920 --> 34:03.920
它就变成真实数据了

34:04.920 --> 34:05.920
但是在开发的过程中

34:05.920 --> 34:07.920
我们是不是把这个拦截打开

34:07.920 --> 34:08.920
一般来说

34:08.920 --> 34:09.920
我们以后的工程花里边

34:09.920 --> 34:11.920
这些东西会专门来写成文件

34:11.920 --> 34:13.920
每个文件生成一块测试数据

34:13.920 --> 34:15.920
每个文件生成一块测试数据

34:15.920 --> 34:16.920
原来的意思吧

34:16.920 --> 34:17.920
那么这里呢

34:17.920 --> 34:19.920
它就把这个数据拦截开了

34:19.920 --> 34:21.920
这里是注册拦截

34:21.920 --> 34:22.920
那么这里呢

34:22.920 --> 34:24.920
就是请求这个地址

34:24.920 --> 34:25.920
依请求

34:25.920 --> 34:27.920
之前有个规则

34:27.920 --> 34:28.920
把它拦截开了

34:28.920 --> 34:29.920
给我了什么

34:29.920 --> 34:30.920
给我了测试数据

34:30.920 --> 34:31.920
于是呢

34:31.920 --> 34:32.920
这里就拿到测试数据了

34:32.920 --> 34:34.920
这一块能不能理解

34:34.920 --> 34:36.920
大致的理解下就行了

34:36.920 --> 34:37.920
OK

34:37.920 --> 34:38.920
我们也不要讲了

34:38.920 --> 34:43.000
其实这里还有很多

34:43.000 --> 34:44.000
细节什么拦截方法

34:44.000 --> 34:46.000
还有地址参数等等

34:46.000 --> 34:47.000
不要讲展开了

34:47.000 --> 34:48.000
好了

34:48.000 --> 34:49.000
那么现在我们拿

34:49.000 --> 34:51.000
拿到了测试数据了

34:51.000 --> 34:52.000
对吧

34:52.000 --> 34:53.000
接下来怎么玩

34:53.000 --> 34:55.000
接下来的事情就是

34:55.000 --> 34:57.000
见面操作

34:57.000 --> 34:58.000
对吧

34:58.000 --> 34:59.000
见面操作

34:59.000 --> 35:00.000
来吧

35:00.000 --> 35:01.000
学生

35:01.000 --> 35:02.000
学生

35:02.000 --> 35:03.000
学生

35:03.000 --> 35:04.000
学生

35:04.000 --> 35:05.000
学生

35:05.000 --> 35:07.000
学生

35:07.000 --> 35:08.000
学生

35:08.000 --> 35:09.000
学生

35:09.000 --> 35:10.000
学生

35:10.000 --> 35:12.000
这个东西会分开写个节词

35:12.000 --> 35:13.000
那么这些东西

35:13.000 --> 35:14.000
拿到数据的格式

35:14.000 --> 35:15.000
都是约定好的

35:15.000 --> 35:16.000
都是约定好的

35:16.000 --> 35:17.000
一般来说

35:17.000 --> 35:18.000
这里有个数据

35:18.000 --> 35:19.000
表示说

35:19.000 --> 35:20.000
这里边有哪些数据

35:20.000 --> 35:21.760
我们看一下

35:22.000 --> 35:23.160
就有点数 surgery

35:24.000 --> 35:25.000
22个学生

35:25.000 --> 35:26.000
我也不知道有多少个

35:26.000 --> 35:28.000
然后干吗呢

35:28.000 --> 35:29.000
然后结束说

35:29.000 --> 35:30.000
生成一些 TR

35:30.000 --> 35:31.000
生成一些H set

35:31.000 --> 35:32.600
原素放到T body

35:32.600 --> 35:33.280
里边

35:33.280 --> 35:34.000
然后我们就来拼接

35:34.000 --> 35:36.000
拼接一些 AT的

35:37.000 --> 35:38.000
拼接

35:38.000 --> 35:39.000
每一个学生

35:39.000 --> 35:40.040
就是一个tr

35:40.040 --> 35:40.320
对吧

35:40.320 --> 35:41.200
每一个学生一个tr

35:41.200 --> 35:41.800
最后呢

35:41.800 --> 35:43.640
我们把这个atme放到什么

35:43.640 --> 35:44.680
放到用截团里

35:44.680 --> 35:45.560
啊

35:45.560 --> 35:47.720
tbody

35:47.720 --> 35:50.600
设置这个选中元素的文本

35:50.600 --> 35:51.600
放进去

35:51.600 --> 35:52.400
你看到吗

35:52.400 --> 35:54.560
就把这个东西拼接好了之后

35:54.560 --> 35:56.360
放到它的内文本里边去

35:56.360 --> 35:58.200
把放了个tbody内文本里边去

35:58.200 --> 35:59.400
那么现在就是每一个学生

35:59.400 --> 36:00.120
他有个什么呢

36:00.120 --> 36:02.640
每一个学生有一个tr

36:02.640 --> 36:03.960
来吧拼接吧

36:03.960 --> 36:05.200
给i小于什么

36:05.200 --> 36:06.040
student

36:06.040 --> 36:07.720
教练子

36:07.720 --> 36:09.120
还想想

36:09.120 --> 36:10.200
循环的一个学生

36:10.200 --> 36:10.920
没循环一个

36:10.920 --> 36:12.920
是不是拿到一个学生啊

36:12.920 --> 36:13.320
然后呢

36:13.320 --> 36:13.960
干嘛

36:13.960 --> 36:17.120
然后拼接一段什么拼接一段atmail

36:17.120 --> 36:19.120
怎么拼接tr

36:20.800 --> 36:21.720
什么这样子

36:21.720 --> 36:22.520
然后呢

36:22.520 --> 36:23.600
td

36:23.600 --> 36:24.600
说这样子

36:24.600 --> 36:25.800
这样子说有点恶心啊

36:26.920 --> 36:27.680
说有点恶心

36:27.680 --> 36:28.520
你在td里面

36:28.520 --> 36:31.280
是不是要这样子写到处是加号啊

36:31.280 --> 36:31.720
然后呢

36:31.720 --> 36:32.400
什么什么什么

36:32.400 --> 36:33.280
比方说学过

36:33.280 --> 36:34.760
然后第二个td里面

36:34.760 --> 36:36.320
是不是又要拼接加号

36:36.360 --> 36:38.320
要拼接自补串吗

36:38.320 --> 36:39.120
就是要这样子

36:39.120 --> 36:40.200
非常麻烦

36:40.200 --> 36:41.760
于是我这里的给他介绍一个啊

36:41.760 --> 36:42.720
介绍一个atmail

36:42.720 --> 36:43.400
5

36:43.400 --> 36:44.800
es6

36:44.800 --> 36:45.600
咱现在忙

36:45.600 --> 36:46.920
咱们可学有很多东西啊

36:46.920 --> 36:48.200
扩张了很多知识

36:48.200 --> 36:50.320
es6里面有个模板自补串

36:50.320 --> 36:51.880
就两个反应号

36:51.880 --> 36:52.640
这个自补串呢

36:52.640 --> 36:55.160
是非常非常好拼接的

36:55.160 --> 36:56.200
他怎么拼接

36:56.200 --> 36:57.480
他一试这个自补串里边

36:57.480 --> 36:58.520
可以随便换行

36:58.520 --> 37:00.800
他可以保证这个自补串不断

37:00.800 --> 37:03.320
他换好就相当于是个邪纲恩

37:03.320 --> 37:05.360
然后里面这里边呢

37:05.360 --> 37:06.520
可以写任意的自补串啊

37:06.520 --> 37:09.850
比方tr

37:09.850 --> 37:11.850
以为不是有些td吗

37:11.850 --> 37:14.290
td

37:14.290 --> 37:15.490
这里是不是要拼接呢

37:15.490 --> 37:17.850
他的拼接方式是这样子的

37:17.850 --> 37:19.930
他不用的时候写什么加号

37:19.930 --> 37:21.530
将来写加号可不可以也可以

37:21.530 --> 37:22.450
不过你利用他的过后

37:22.450 --> 37:23.890
就不用写加号了

37:23.890 --> 37:25.010
怎么写呢

37:25.010 --> 37:25.810
写个dolar

37:25.810 --> 37:27.770
两个大括号

37:27.770 --> 37:30.610
这里边就可以拼写一个gs表达式

37:30.610 --> 37:32.890
他就会把表达式的结果替换掉

37:32.890 --> 37:34.610
这个位置

37:34.610 --> 37:35.570
啊比方说啊

37:35.610 --> 37:37.130
我们这里写个s表内

37:37.130 --> 37:38.170
学生的姓名

37:38.170 --> 37:39.610
你看一下吧

37:39.610 --> 37:41.170
姓名什么选择出来了

37:41.170 --> 37:42.850
啊我们输出一下

37:42.850 --> 37:43.970
输出一下这个

37:45.210 --> 37:46.330
你看

37:46.330 --> 37:48.250
说把姓名就拼拼接到这个位置了

37:50.170 --> 37:51.130
每一次拼接一段

37:51.130 --> 37:51.970
每一次拼接一段

37:51.970 --> 37:52.370
对吧

37:52.370 --> 37:53.490
不断的循环不断的加

37:54.490 --> 37:55.770
说拼接非常方便

37:55.770 --> 37:58.290
那么第二个td

37:58.290 --> 38:00.570
然后是学生的什么姓别

38:00.570 --> 38:01.130
是姓别的

38:02.730 --> 38:03.610
姓别

38:03.610 --> 38:05.010
然后呢

38:05.010 --> 38:05.730
年龄

38:07.330 --> 38:08.530
然后呢

38:08.530 --> 38:09.450
联系电话

38:11.250 --> 38:12.170
然后呢

38:12.170 --> 38:13.970
邮箱没有

38:15.370 --> 38:16.370
然后呢

38:16.370 --> 38:17.410
家庭住室

38:17.410 --> 38:20.850
而这也是

38:20.850 --> 38:22.890
就生成了这一测试出去了

38:22.890 --> 38:23.530
那里啊

38:23.530 --> 38:24.970
非常简单啊

38:24.970 --> 38:25.330
而且呢

38:25.330 --> 38:25.850
这个代码呢

38:25.850 --> 38:27.330
将来是不用改的

38:27.330 --> 38:28.490
你们以后学了工程化过后

38:28.490 --> 38:30.010
真的是什么都不用做

38:30.010 --> 38:30.970
啥都不用做

38:30.970 --> 38:32.810
一上线他就自动给你去掉了

38:32.810 --> 38:32.890
啊

38:32.890 --> 38:34.290
当然现在的还不行啊

38:34.330 --> 38:36.130
现在的你得手动注释一下

38:36.130 --> 38:36.250
啊

38:36.250 --> 38:36.650
以后呢

38:36.650 --> 38:37.290
根本不用管

38:38.690 --> 38:38.930
好

38:38.930 --> 38:40.610
这是这个默克

38:40.610 --> 38:41.330
默克接试

38:42.130 --> 38:42.330
啊

38:46.900 --> 38:53.390
有问题问啊

38:53.390 --> 38:54.110
no dash

38:54.110 --> 38:56.740
第二个

38:56.740 --> 38:57.740
这个玩意是咋呢

38:58.900 --> 38:59.420
这个玩意呢

38:59.420 --> 39:00.700
他的效果啊

39:00.700 --> 39:01.700
他不像

39:02.540 --> 39:03.220
杰克二位

39:04.100 --> 39:05.020
不像不识卷

39:05.980 --> 39:08.500
不像那个默克接试那么明显

39:08.500 --> 39:09.700
他的效果没有什么

39:09.700 --> 39:10.740
不没有那么明显

39:11.740 --> 39:13.180
但是呢

39:13.180 --> 39:15.140
你在前端这个行业

39:15.140 --> 39:17.180
混的时间越长

39:17.180 --> 39:18.100
越低不开他

39:19.740 --> 39:21.180
你项目做的越多

39:21.180 --> 39:22.780
越低不开他

39:22.780 --> 39:23.980
我今天讲完了过后呢

39:23.980 --> 39:25.180
觉得这个玩意啥玩意

39:25.180 --> 39:26.740
你以后根本不会用他的

39:26.740 --> 39:28.580
你也想不到要怎么去用他

39:28.580 --> 39:29.940
要用他干嘛

39:29.940 --> 39:30.300
但是呢

39:30.300 --> 39:30.820
你用的

39:30.820 --> 39:31.980
你做的项目越多

39:31.980 --> 39:33.380
你写的东西越复杂

39:33.380 --> 39:34.740
越低不开他

39:34.740 --> 39:35.500
他里边东西

39:35.500 --> 39:36.660
极其

39:36.660 --> 39:37.740
说一句话就可以说完了

39:37.740 --> 39:38.460
他在说啥

39:38.460 --> 39:39.940
他就提供了一大堆函数

39:42.160 --> 39:43.840
包括什么数组的常见操作

39:44.800 --> 39:46.160
对象的一些常见操作

39:46.160 --> 39:47.120
比方对象克龙

39:47.120 --> 39:47.680
浅克龙

39:47.680 --> 39:49.080
生克龙

39:49.080 --> 39:51.080
等等等等一些常见操作

39:51.080 --> 39:52.680
还对函数的一些常见操作

39:53.720 --> 39:56.040
给你提供了很多的工具

39:56.040 --> 39:57.040
工具函数

39:57.040 --> 39:58.520
你通过他给你提供的函数

39:58.520 --> 39:59.520
就可以轻松的

40:00.480 --> 40:01.440
使用数组

40:01.440 --> 40:02.120
使用对象

40:04.040 --> 40:05.080
而且呢

40:05.080 --> 40:07.600
他里边就是他就是个函数库

40:07.600 --> 40:08.880
你引用进来

40:08.880 --> 40:09.960
他就全是函数

40:09.960 --> 40:10.760
要看一下吧

40:10.760 --> 40:11.440
他观望地址

40:12.960 --> 40:14.040
这个地方呢

40:14.040 --> 40:15.640
我还是推荐大家访问官网

40:15.640 --> 40:16.840
因为

40:16.840 --> 40:17.760
这个民间中文网

40:17.760 --> 40:18.440
他一个问题

40:18.440 --> 40:20.160
就算是搜索是有问题的

40:21.080 --> 40:22.480
我的名字是民间中文网

40:24.160 --> 40:26.480
怎么全是全是全是官网的

40:26.480 --> 40:27.680
我写错了

40:27.680 --> 40:28.720
找一找

40:28.720 --> 40:29.120
楼单

40:30.120 --> 40:31.400
他有一个民间中文网

40:33.160 --> 40:34.080
那个民间中文网

40:34.080 --> 40:37.960
他的搜索是有问题的

40:37.960 --> 40:39.320
我他根本没有搜索

40:39.320 --> 40:40.680
搜索都没有

40:40.680 --> 40:42.080
这个地方搜索都没有

40:42.080 --> 40:43.520
我要这个要搜索函数

40:43.760 --> 40:45.640
这边官网是有搜索的

40:45.640 --> 40:47.640
他的民间中文网是有些问题的

40:47.640 --> 40:50.440
而且他翻译的好像也没有翻译完整

40:50.440 --> 40:51.680
有些地方也没有翻译完整

40:51.680 --> 40:53.360
所以我还是推荐大家看官网

40:53.360 --> 40:54.760
这个官网其实没有那么

40:54.760 --> 40:55.960
没有大家想象的那么难

40:55.960 --> 40:58.240
因为你看他的例子就基本上明白了

40:58.240 --> 40:59.440
他有很多函数

40:59.440 --> 41:01.120
你看针对数组的函数

41:01.120 --> 41:02.120
针对集合的函数

41:02.120 --> 41:04.080
针对日期的针对函数的

41:04.080 --> 41:10.760
针对语言的针对数学的针对数字的针对对象的

41:10.760 --> 41:12.640
提供了很多很多的函数

41:12.640 --> 41:13.800
你随便拿一个看吧

41:13.800 --> 41:14.320
随便拿一个看

41:14.320 --> 41:15.640
极其简单

41:15.640 --> 41:16.360
你不用看英文

41:16.360 --> 41:18.040
你真的实在不想看英文

41:18.040 --> 41:19.560
就不用看

41:19.560 --> 41:22.920
他给你提供了一个全局的对象叫下华县

41:22.920 --> 41:24.080
所以有点类似于杰克尔雷

41:24.080 --> 41:26.600
杰克尔雷给你提供了一个全局对象叫多勒

41:26.600 --> 41:29.120
他给你提供了一个全局对象叫做下华县

41:29.120 --> 41:31.520
下华县对象里边有很多的方法

41:31.520 --> 41:34.160
其中一个方法叫做创可

41:34.160 --> 41:36.680
创可是什么意思呢

41:36.680 --> 41:38.240
创可意思就是分包

41:38.240 --> 41:40.680
分包的意思

41:40.680 --> 41:42.920
你看看

41:42.920 --> 41:43.600
创意识就行了

41:43.600 --> 41:45.640
example

41:45.640 --> 41:48.600
第一个参数传一个数组

41:48.600 --> 41:51.480
第二个参数传一个二

41:51.480 --> 41:53.000
返回的是什么呢

41:53.000 --> 41:55.320
返回的这么一个玩意儿

41:55.320 --> 41:56.040
你自己琢磨去吧

41:56.040 --> 41:58.360
他在干嘛

41:58.360 --> 42:00.240
第一个参数传个数组

42:00.240 --> 42:03.160
第二个参数传一个三

42:03.160 --> 42:06.120
返回这么一个玩意儿

42:06.120 --> 42:07.280
能不能心灵神会

42:07.280 --> 42:11.890
能心灵神会的同学QQ1

42:12.250 --> 42:13.330
看得懂吗

42:13.330 --> 42:14.210
所以说不要认为

42:14.210 --> 42:15.850
他是英文就完全看不懂

42:15.850 --> 42:17.810
其实我当时以前

42:17.810 --> 42:19.410
我也非常讨厌英文

42:19.410 --> 42:20.410
后来发现

42:20.410 --> 42:21.290
我不怕他

42:21.290 --> 42:22.210
我就不看英文

42:22.210 --> 42:23.090
我就看他粒子

42:23.090 --> 42:24.370
也能看得懂

42:24.370 --> 42:26.490
然后就那边至少不怕了

42:26.490 --> 42:27.730
不怕他了

42:27.730 --> 42:28.530
看到英文文档

42:28.530 --> 42:29.690
没有那么抗拒了

42:29.690 --> 42:30.930
然后再后来呢

42:30.930 --> 42:32.170
有的时候粒子确实看不懂

42:32.170 --> 42:34.010
我得去读一读上面一个话

42:34.010 --> 42:35.050
也读再读去发现

42:35.050 --> 42:36.490
也没有那么难

42:36.490 --> 42:37.610
也没有那么难

42:37.610 --> 42:38.810
慢慢就习惯了

42:38.810 --> 42:40.210
到后来面了就很流畅的

42:40.210 --> 42:41.170
去看英文文档

42:41.170 --> 42:43.610
这是个过程

42:43.610 --> 42:44.330
干嘛呢

42:44.330 --> 42:46.250
他就是把它分块

42:46.250 --> 42:48.010
每两个分成一块

42:48.010 --> 42:49.530
形成数数的一项

42:49.530 --> 42:50.450
每两个分成一块

42:50.450 --> 42:51.370
那么不够的话

42:51.370 --> 42:52.690
就是生于的想

42:52.690 --> 42:53.810
就这么简单就创改

42:53.810 --> 42:54.730
他里面提供了很多

42:54.730 --> 42:56.250
这种实用的函数

42:56.250 --> 42:56.970
别的意思吧

42:56.970 --> 42:58.290
那么这里边我们说是

42:58.290 --> 43:01.130
又好像一个函数

43:01.130 --> 43:01.810
一个函数讲了

43:01.810 --> 43:02.890
那就封掉了

43:02.890 --> 43:04.050
没有必要

43:04.050 --> 43:05.450
你知道他来干嘛

43:05.450 --> 43:07.330
就行了

43:07.330 --> 43:10.130
另外一个他里边有个理论知识

43:10.170 --> 43:13.250
是在观望里边不会告诉你的

43:13.250 --> 43:14.530
这个理论知识还蛮重要的

43:14.530 --> 43:16.050
对于前段来说还蛮重要的

43:16.050 --> 43:16.850
叫做纯函数

43:16.850 --> 43:19.530
叫pure方形

43:19.530 --> 43:21.490
啥叫纯函数

43:21.490 --> 43:24.570
nodec里边大部分函数不是所有

43:24.570 --> 43:26.410
nodec里边还有一个库

43:26.410 --> 43:28.810
它还是专门的函数式编程库

43:28.810 --> 43:30.210
叫做nodec

43:30.210 --> 43:30.770
fp

43:30.770 --> 43:33.250
叫方形pure关密

43:33.250 --> 43:34.330
这是函数式编程库

43:34.330 --> 43:35.410
那么这里边的函数

43:35.410 --> 43:36.930
全是纯函数

43:36.930 --> 43:38.490
但是nodec这个库本身的

43:38.490 --> 43:40.010
它还不是全部是纯函数

43:40.010 --> 43:40.650
有一些函数的

43:40.650 --> 43:42.250
而不是纯函数

43:42.250 --> 43:45.930
纯函数

43:45.930 --> 43:47.450
什么叫纯函数呢

43:47.450 --> 43:49.490
就是如果参数相同

43:49.490 --> 43:50.730
主要这是理论概念

43:50.730 --> 43:54.370
它比这个库本身是要重要的多的知识

43:54.370 --> 43:55.770
参数如果说一个函数

43:55.770 --> 43:59.370
它参数如果说跟它传的相同

43:59.370 --> 44:03.650
永远返回相同的结果

44:03.650 --> 44:04.330
它不依赖

44:04.330 --> 44:05.330
整个函数的执行

44:05.330 --> 44:07.170
它不依赖程序

44:07.170 --> 44:08.770
就是执行函数的过程中

44:08.770 --> 44:11.250
它不依赖任何的外部状态的变化

44:11.250 --> 44:12.170
什么全局对象啊

44:12.170 --> 44:13.210
全局变量啊

44:13.210 --> 44:15.410
多亩元刷的都不依赖

44:15.410 --> 44:17.930
只依赖输入函数

44:17.930 --> 44:19.370
这叫纯函数

44:19.370 --> 44:20.210
有点懵是吧

44:20.210 --> 44:21.530
有点懵

44:21.530 --> 44:21.930
不着急

44:21.930 --> 44:23.770
以后给大家举例子

44:23.770 --> 44:24.850
再看一个概念

44:24.850 --> 44:26.850
纯函数一定是没有副作用的

44:26.850 --> 44:28.730
这些东西是哪里哪里来的概念呢

44:28.730 --> 44:30.610
是函数式编程

44:30.610 --> 44:31.690
好站了

44:31.690 --> 44:33.690
目前前端

44:33.690 --> 44:35.970
而且将来可以预见的时间里边

44:35.970 --> 44:38.570
没有要求前端开发者

44:38.570 --> 44:40.130
掌握函数式编程

44:40.130 --> 44:41.610
没有要求

44:41.610 --> 44:43.850
如果说把这个要求加上

44:43.850 --> 44:45.170
前端的难度

44:45.170 --> 44:47.450
一下子上升好几倍

44:47.450 --> 44:49.490
那个东西是相当麻烦的

44:49.490 --> 44:52.770
你对高等的高等数学没有

44:52.770 --> 44:54.130
没有比较透彻的理解

44:54.130 --> 44:56.730
你可能都还玩不赚的东西

44:56.730 --> 44:59.210
我们不用去不用去过多说说啊

44:59.210 --> 45:00.730
就看这两个概念就行了啊

45:00.730 --> 45:01.370
这两个概念呢

45:01.370 --> 45:03.410
有的时候面试的时候会问到

45:03.410 --> 45:05.130
纯函数一定是没有副作用的

45:05.130 --> 45:06.370
叫side effect

45:06.370 --> 45:08.010
所以什么叫副作用呢

45:08.010 --> 45:09.770
就是函数的执行期间

45:09.770 --> 45:11.770
这个函数的运行过程中

45:11.770 --> 45:14.970
它可能会用到外部的东西

45:14.970 --> 45:16.530
比方说全球对象

45:16.530 --> 45:17.890
比方说动物对象

45:17.890 --> 45:20.490
动等等外部的东西

45:20.490 --> 45:24.010
或者是导致外部状态的变化

45:24.010 --> 45:25.170
然后我运行完了过后

45:25.170 --> 45:27.890
我改变了一个元素的颜色

45:27.890 --> 45:30.530
这些都是叫做副作用

45:30.530 --> 45:32.690
或者是函数执行完成过后

45:32.690 --> 45:34.730
仍然有部分任务正在进行

45:34.730 --> 45:37.990
这些都是属于副作用

45:37.990 --> 45:38.350
好

45:38.350 --> 45:39.150
来看吧

45:39.150 --> 45:41.030
哪些操作属于副作用

45:41.070 --> 45:42.110
这东西被夺了一下

45:42.110 --> 45:44.470
运变设施可能只有可能直接问你

45:44.470 --> 45:45.990
第一个函数内部使用的异部

45:45.990 --> 45:47.430
什么叫sysmouse

45:47.430 --> 45:48.630
sysinterval

45:48.630 --> 45:49.150
对吧

45:49.150 --> 45:51.030
包括我们刚才看到的阿加克斯

45:51.030 --> 45:53.670
就是原成访问

45:53.670 --> 45:54.790
这个玩意

45:54.790 --> 45:56.110
也是异部的

45:56.110 --> 45:57.910
也是异部的

45:57.910 --> 46:00.510
改动了函数的参数

46:00.510 --> 46:03.310
使用或改动了函数外部的数据

46:03.310 --> 46:04.030
打印数据

46:04.030 --> 46:05.430
比方打印到控制台

46:05.430 --> 46:06.550
这些都是属于副作用

46:06.550 --> 46:08.390
使用的随机数

46:08.390 --> 46:09.630
或者是使用的当前时间

46:11.070 --> 46:13.150
使用的当前时间

46:13.150 --> 46:14.310
这些都是属于副作用

46:14.310 --> 46:14.790
来

46:14.790 --> 46:18.700
我们先来给大家解释个问题

46:18.700 --> 46:22.180
看啊

46:22.180 --> 46:22.740
啊

46:24.740 --> 46:38.010
开始一

46:38.010 --> 46:39.730
就这样写吧

46:39.730 --> 46:43.550
这个tesa1还是有没有副作用

46:43.550 --> 46:45.750
有没有副作用

46:45.750 --> 46:46.350
所以有

46:46.350 --> 46:46.870
对吧

46:46.870 --> 46:48.710
为什么用到了全剧的东西

46:48.710 --> 46:50.750
什么onload属性

46:50.750 --> 46:51.310
他用到了

46:51.310 --> 46:52.110
不管他是怎么用的

46:52.110 --> 46:52.830
复制也好

46:52.830 --> 46:53.670
直接读也好

46:53.670 --> 46:54.270
不能用

46:54.270 --> 46:55.470
不能用外面东西

46:55.470 --> 46:56.550
有副作用

46:56.590 --> 47:04.060
又来s2

47:04.060 --> 47:08.510
这个函数有没有副作用

47:08.510 --> 47:09.190
有是吧

47:09.190 --> 47:09.510
好

47:09.510 --> 47:10.110
来

47:10.110 --> 47:14.380
我就不能拿着多写了啊

47:14.380 --> 47:15.380
这个函数有没有副作用

47:16.980 --> 47:17.300
这个

47:18.860 --> 47:20.100
也有

47:20.100 --> 47:22.460
为什么你可以感受到什么要副作用

47:22.460 --> 47:23.340
就是我

47:23.340 --> 47:24.540
这个函数呢

47:24.540 --> 47:26.140
他不单纯

47:26.140 --> 47:27.220
他做了一些事情过后

47:27.220 --> 47:28.740
他会影响到别的东西

47:28.740 --> 47:30.860
他这个东西是不是影响到控制台了

47:30.860 --> 47:32.060
控制台跟函数有关系吗

47:32.060 --> 47:32.900
没有什么关系啊

47:32.900 --> 47:34.260
是函数外部的东西

47:34.260 --> 47:36.020
他影响到了别的东西

47:36.020 --> 47:38.140
这就是副作用

47:38.140 --> 47:46.010
然后再来看

47:46.010 --> 47:50.280
这个函数有没有副作用

47:50.280 --> 47:51.120
所以还是有

47:51.120 --> 47:51.720
改动了什么

47:51.720 --> 47:52.440
改动了参数

47:53.680 --> 47:55.520
为什么改动了参数就叫副作用呢

47:55.520 --> 47:56.480
副作用的本质含义

47:56.480 --> 47:58.000
就是你动了外面的东西

47:58.000 --> 47:58.480
你看着

47:58.480 --> 47:59.080
为什么叫改动

47:59.080 --> 48:02.860
他出去会有副作用

48:02.860 --> 48:04.620
我test4

48:04.620 --> 48:05.900
把O传进去

48:05.900 --> 48:07.260
我万万没想到

48:07.260 --> 48:09.020
这个可恶的test4函数

48:09.020 --> 48:10.780
把我的对象给我改了

48:10.780 --> 48:12.340
我调完这个函数过后

48:12.340 --> 48:13.780
我的O的值是不是被改了

48:13.780 --> 48:14.220
改成什么了

48:14.220 --> 48:15.940
改成3了

48:16.020 --> 48:18.660
O是不是含义外部的东西

48:18.660 --> 48:20.220
看上去好像没有改外部的东西

48:20.220 --> 48:22.140
但是由于我把O传进去了

48:22.140 --> 48:23.380
传的是同一个地址

48:23.380 --> 48:25.180
对象之间传递是同一个地址

48:25.180 --> 48:27.980
他改的OB介绍相对于把外部的改了

48:27.980 --> 48:29.460
这也叫副作用

48:29.460 --> 48:32.420
总之你不能动外部的东西

48:32.420 --> 48:34.220
所有动外部的东西都叫副作用

48:34.220 --> 48:35.780
包括这个

48:35.780 --> 48:36.300
有的时候

48:36.300 --> 48:37.500
好像没有动外部的东西

48:37.500 --> 48:40.980
但是你用了随机数

48:40.980 --> 48:42.020
你用了随机数

48:42.020 --> 48:44.420
比方说我反回这个

48:44.420 --> 48:45.460
你用了随机数

48:45.500 --> 48:46.500
为什么用了随机数

48:46.500 --> 48:47.860
也交给副作用呢

48:47.860 --> 48:49.300
因为它这个函数的结果

48:49.300 --> 48:51.060
无法确定

48:51.060 --> 48:51.820
什么要纯函数

48:51.820 --> 48:52.900
纯函数就是

48:52.900 --> 48:54.740
这个函数只要传一样的参数

48:54.740 --> 48:56.580
它反回的结果一定一致

48:56.580 --> 48:59.460
绝不可能发生任何变化

48:59.460 --> 49:00.100
那么这样子

49:00.100 --> 49:01.500
虽然参数传的都是一样的

49:01.500 --> 49:01.740
对吧

49:01.740 --> 49:03.180
传的都是undefend

49:03.180 --> 49:04.140
但结果它反回的东西

49:04.140 --> 49:05.740
是不是每次都不一样

49:05.740 --> 49:08.020
这就叫做副作用

49:08.020 --> 49:08.900
包括当前时间

49:08.900 --> 49:10.100
是不是每次都不一样

49:10.100 --> 49:11.100
这叫副作用

49:11.100 --> 49:16.080
什么叫没有副作用呢

49:16.080 --> 49:19.240
你看这个函数有没有副作用

49:19.240 --> 49:23.880
这个函数有没有副作用

49:23.880 --> 49:24.840
是没有

49:24.840 --> 49:25.040
对吧

49:25.040 --> 49:27.000
这个函数非常非常纯净

49:27.000 --> 49:28.160
没有副作用

49:28.160 --> 49:30.280
你给它传一个一传一个二

49:30.280 --> 49:32.000
你放到世界任何地方

49:32.000 --> 49:33.000
你无论调入多少次

49:33.000 --> 49:34.320
它一定反回三

49:34.320 --> 49:35.600
而且不会对外界产生

49:35.600 --> 49:36.880
别的任何影响

49:36.880 --> 49:38.040
这叫没有副作用

49:38.040 --> 49:38.680
那么为什么

49:38.680 --> 49:40.400
我们要说到纯函数这个概念呢

49:40.400 --> 49:42.480
因为前端越来越复杂

49:42.480 --> 49:46.000
工程的开发量越来越大

49:46.000 --> 49:47.600
就导致前端越来越难以调

49:47.880 --> 49:49.640
测试维护等等的问题

49:49.640 --> 49:51.640
一下就出现了

49:51.640 --> 49:53.120
纯函数的优势就在于

49:53.120 --> 49:53.720
易于测试

49:53.720 --> 49:54.280
易于维护

49:54.280 --> 49:55.200
易于调试

49:55.200 --> 49:57.920
易于应用函数式变成思想

49:57.920 --> 49:59.160
行官的现在这个东西呢

49:59.160 --> 50:01.800
没有对前端开发的一面作要求

50:01.800 --> 50:02.480
面试的时候呢

50:02.480 --> 50:03.640
就可以这样回答

50:03.640 --> 50:06.360
那么具体为什么它会有这样的意出呢

50:06.360 --> 50:07.280
将来我们学习到什么

50:07.280 --> 50:09.280
reacts的时候呢

50:09.280 --> 50:11.680
还会给大家详细点讲

50:11.680 --> 50:12.920
这就不展开了

50:12.920 --> 50:14.160
总之你理解什么叫纯函数

50:14.160 --> 50:14.480
然后呢

50:14.480 --> 50:15.440
知道楼单系里面

50:15.440 --> 50:17.080
大部分都是纯函数

50:17.120 --> 50:18.600
它不会动外面的东西

50:18.600 --> 50:18.760
好

50:18.760 --> 50:19.720
我们再看一下啊

50:19.720 --> 50:21.960
本节可能会用到一些函数

50:21.960 --> 50:23.320
第一个met

50:23.320 --> 50:24.360
我们干脆再这样吧

50:24.360 --> 50:25.400
我们干脆再讲

50:25.400 --> 50:28.160
讲练习的过程中啊

50:28.160 --> 50:29.440
讲那个练习的过程中

50:29.440 --> 50:30.160
然后呢

50:30.160 --> 50:30.920
一步一步来讲

50:32.840 --> 50:34.320
这个练习是啥呢

50:34.320 --> 50:36.320
这个练习我把代表上完了

50:36.320 --> 50:37.280
我看一下效果啊

50:39.240 --> 50:43.400
拿过来

50:43.400 --> 50:44.520
我们把实现上完

50:44.520 --> 50:45.880
我们再做一下这个练习

50:45.880 --> 50:47.000
这个练习没有界面

50:47.000 --> 50:47.840
就是这个存

50:47.840 --> 50:49.640
有点类似于一个算法的练习

50:49.640 --> 50:51.760
它其实比算法的难度要低多了

50:51.760 --> 50:52.480
大家不用怕

50:55.800 --> 50:56.080
来吧

50:57.520 --> 51:04.820
是一个跟双色球有关的一个小应用

51:04.820 --> 51:05.980
好

51:05.980 --> 51:08.700
我的我们的目标就是要实现这两个函数

51:08.700 --> 51:10.140
get the written both

51:10.140 --> 51:11.780
和get the result

51:11.780 --> 51:13.220
要实现这两个函数

51:13.220 --> 51:15.380
主持都带给大家写好了

51:15.380 --> 51:16.060
第一个函数

51:16.060 --> 51:16.980
你要做的事情是

51:18.180 --> 51:19.340
要反回一个对象

51:20.580 --> 51:22.180
我这里没有要和大家写存函数啊

51:22.180 --> 51:22.740
不是的

51:22.740 --> 51:24.900
没有要去写大家写存函数了

51:24.900 --> 51:25.940
说这个意思

51:25.940 --> 51:27.220
我要反回个对象

51:27.220 --> 51:28.380
对象里面有两个属性

51:28.380 --> 51:30.820
一个是normal bores

51:30.820 --> 51:32.100
一个是carder

51:33.980 --> 51:36.260
我也不是很懂双色球啊

51:36.260 --> 51:38.220
我在我百度里面搜了一下

51:38.220 --> 51:40.060
双色球的规则是这样子

51:40.060 --> 51:42.380
你有六组那个数字

51:42.380 --> 51:44.700
加其中一组彩色数字

51:44.700 --> 51:48.300
这个得尊就叫难球好像是彩色数字

51:48.300 --> 51:50.620
彩色数字呢是一到十六之间随机的

51:51.460 --> 51:53.100
那么前面六个数字呢

51:53.100 --> 51:55.220
是也是一到三十三之间随机的

51:55.220 --> 51:56.100
当然不能重复

51:56.100 --> 51:57.820
不能说两个一两个五

51:57.820 --> 51:58.540
不能重复的

51:59.580 --> 52:00.700
那意思吧

52:00.700 --> 52:02.860
那么这就是选出了一组双色球

52:04.060 --> 52:04.580
当然呢

52:04.580 --> 52:06.420
中奖的话也可以用这个函数

52:06.420 --> 52:06.980
对吧

52:06.980 --> 52:08.340
你看我这里下面

52:08.340 --> 52:09.620
我就自己选一组

52:09.620 --> 52:09.900
对吧

52:09.900 --> 52:12.140
集选选一组

52:12.140 --> 52:12.660
然后呢

52:12.660 --> 52:13.980
我再生成一个中奖结果

52:13.980 --> 52:14.940
中奖结果也是随机的嘛

52:14.940 --> 52:16.380
当然你不要告诉我什么

52:16.380 --> 52:19.420
双色球说也不是随机的

52:19.420 --> 52:19.740
对吧

52:19.740 --> 52:20.740
有什么安逸祥操作

52:20.740 --> 52:21.660
这个东西我们不考虑

52:21.660 --> 52:22.740
我们就考虑它

52:22.740 --> 52:24.060
就是随机的

52:24.060 --> 52:26.060
中奖结果也是随机出来的

52:26.060 --> 52:26.580
那么最后呢

52:26.580 --> 52:27.900
我要判断是不是中奖

52:27.900 --> 52:28.780
那么判断是不是中奖

52:28.780 --> 52:30.260
我们一会再说

52:30.260 --> 52:32.260
我们先把这个玩意生成出来再说

52:32.260 --> 52:32.420
好

52:32.420 --> 52:33.340
一个人

52:33.340 --> 52:34.540
首先这个

52:34.540 --> 52:35.500
no more boards

52:37.140 --> 52:39.060
我生成一组

52:39.060 --> 52:41.260
一到三十三之间的随机数

52:41.260 --> 52:42.020
我怎么生成的

52:43.220 --> 52:43.860
我怎么生成的

52:43.860 --> 52:44.420
我可以这样子

52:49.260 --> 52:49.980
你看着啊

52:49.980 --> 52:53.100
我们这样子来啊

52:53.100 --> 52:55.420
一到三十三之间的随机数

52:55.420 --> 52:55.900
而且呢

52:55.900 --> 52:57.620
它是不能重复的

52:57.620 --> 52:59.060
比方你生之前生成了一个一

52:59.060 --> 53:00.860
后面就不能再生成一了

53:00.860 --> 53:02.220
而不能重复的

53:02.220 --> 53:03.900
那么我这里的思路啊

53:03.900 --> 53:05.860
告诉大家是什么样的思路呢

53:05.860 --> 53:07.180
我这样子

53:07.180 --> 53:09.380
先准备一个数组

53:09.380 --> 53:10.140
这个数组呢

53:10.140 --> 53:11.100
有三十三项

53:12.300 --> 53:13.100
有三十三项

53:14.580 --> 53:15.980
数组里边

53:15.980 --> 53:17.420
数组里边每一

53:17.420 --> 53:19.420
每就是一个数组是这样子的

53:19.460 --> 53:21.980
一二三四五六七

53:23.980 --> 53:25.060
一直到三十三

53:25.940 --> 53:27.140
然后从这个数组里边

53:27.140 --> 53:30.020
随机抽取六组

53:30.020 --> 53:31.100
随机抽取六项

53:31.100 --> 53:32.220
是不是就生成了个数组了

53:33.500 --> 53:34.020
能力也吧

53:34.020 --> 53:35.660
我的思路是这样子的

53:35.660 --> 53:37.420
这时间有点紧了啊

53:37.420 --> 53:39.540
我稍微的加快一下速度

53:39.540 --> 53:40.780
我先准备好一个数组

53:40.780 --> 53:41.620
那么现在问题

53:41.620 --> 53:42.620
问题就在第一步

53:42.620 --> 53:43.340
我怎么来

53:44.500 --> 53:45.860
我怎么问题是我现在怎么来

53:45.860 --> 53:46.900
准备好一个数组呢

53:46.900 --> 53:47.780
我可以这样子

53:47.780 --> 53:48.220
你看着

53:49.820 --> 53:50.940
楼单系里面有个函数

53:52.460 --> 53:53.220
叫做

53:54.380 --> 53:54.740
麦克

53:59.220 --> 53:59.780
麦克函数

54:01.180 --> 54:02.580
这麦克函数有什么用呢

54:04.700 --> 54:05.460
来看一下吧

54:07.260 --> 54:08.780
他这个他这样子写的话

54:08.780 --> 54:10.220
大家看着也比较看

54:10.220 --> 54:11.380
也比较难难以理解

54:12.860 --> 54:14.180
我这样吧

54:14.180 --> 54:15.380
我来这里

54:15.380 --> 54:15.980
复制一下

54:25.530 --> 54:26.410
这个单独想一下吧

54:26.410 --> 54:27.650
这麦克函数

54:27.650 --> 54:28.690
比较说我这里有个数组

54:28.690 --> 54:29.690
一二二

54:31.130 --> 54:31.730
等于

54:33.010 --> 54:33.890
六二位

54:35.010 --> 54:35.570
33

54:36.370 --> 54:37.170
数据有33项

54:37.170 --> 54:38.450
对吧

54:38.450 --> 54:38.930
然后呢

54:38.930 --> 54:39.730
我这里呢

54:39.730 --> 54:40.490
使用这个麦

54:42.250 --> 54:44.370
这是楼单系的全具对象

54:44.370 --> 54:46.050
然后里面提供一个函数要卖

54:46.050 --> 54:48.290
第一个参数把数组传进去

54:48.290 --> 54:48.890
第二个参数呢

54:48.890 --> 54:50.330
写一个函数

54:50.330 --> 54:51.610
这个函数的第一个参数呢

54:51.610 --> 54:54.330
是数组每一项的值

54:54.330 --> 54:54.970
第二个参数呢

54:54.970 --> 54:56.090
是数组的下标

54:57.050 --> 54:58.970
这个函数会返回一个结果

54:58.970 --> 54:59.410
返回啥

54:59.410 --> 55:02.450
随便你随便你不要反回一个一

55:02.450 --> 55:03.730
这个海出会这干嘛呢

55:03.730 --> 55:05.490
他会循环这个数据

55:05.490 --> 55:06.250
一个一个循环

55:07.170 --> 55:09.370
把数的第一项拿出来

55:09.370 --> 55:10.370
调用这个函数

55:11.490 --> 55:13.330
把第一项的值给他

55:13.330 --> 55:15.130
第一项的下标给他

55:15.130 --> 55:17.610
然后把这个第一项的反回结果

55:17.610 --> 55:19.730
放到一个新的数据里面去

55:19.730 --> 55:20.770
比方说到举个例子

55:20.770 --> 55:22.130
这个二一开始是什么

55:22.130 --> 55:22.690
on the fan的

55:22.690 --> 55:22.890
对吧

55:22.890 --> 55:24.250
全是on the fan的

55:24.330 --> 55:25.330
三十三个on the fan的

55:27.090 --> 55:28.210
然后呢

55:28.210 --> 55:29.050
这个mine函数的

55:29.050 --> 55:31.050
他会准备一个新的数组

55:31.050 --> 55:33.730
把第一项拿出来给他

55:33.730 --> 55:37.210
然后下标零给他运行这个函数

55:37.210 --> 55:39.010
函数运行完过会返回一个结果

55:39.010 --> 55:39.690
返回的是一

55:39.690 --> 55:41.090
他就把一作为第一项

55:41.090 --> 55:42.290
这叫数组印设

55:42.290 --> 55:44.210
这是其实你学了ES5之后

55:44.210 --> 55:45.690
就非常好理解了啊

55:45.690 --> 55:46.970
第二项给他

55:46.970 --> 55:48.330
下标一给他

55:48.330 --> 55:49.250
然后返回一个一

55:49.250 --> 55:50.970
也是作为数的第二项

55:50.970 --> 55:51.570
不要那意思吗

55:51.570 --> 55:52.530
然后返回的是什么

55:55.350 --> 55:55.870
就说一下

56:12.710 --> 56:14.390
你看是不是得到全是一

56:14.390 --> 56:16.190
那如果说我这里要生成一到三十三

56:16.190 --> 56:16.550
怎么办

56:17.990 --> 56:19.190
所以打回一个i

56:19.190 --> 56:21.030
把下标返回给他

56:21.030 --> 56:23.870
所以就从零开始零一二三四五的许法就

56:23.870 --> 56:25.790
那么我们这里要从一开始是加一

56:28.790 --> 56:30.390
下来慢慢去琢磨去啊

56:30.390 --> 56:31.190
这个mine函数还说

56:31.190 --> 56:32.270
你学了ES5的话

56:32.270 --> 56:33.750
就非常非常好理解啊

56:33.750 --> 56:34.430
但是呢

56:34.430 --> 56:35.070
因为有些东西

56:35.150 --> 56:36.750
毕竟还没有学过ES5

56:36.750 --> 56:37.550
我刚才我这里呢

56:37.550 --> 56:39.950
还要把这个剪切一下

56:39.950 --> 56:40.870
单步叫提一个

56:40.870 --> 56:41.750
这个是元素对吧

56:43.150 --> 56:43.270
好

56:43.270 --> 56:43.710
那么这边呢

56:43.710 --> 56:44.830
我就把这个拿过来啊

56:44.830 --> 56:48.520
我生成了一个数组了

56:48.520 --> 56:49.320
生成了一个数组

56:51.320 --> 56:51.760
这个数组呢

56:51.760 --> 56:52.920
就是一到三十三

56:52.920 --> 56:53.840
全部生成出来了

56:53.840 --> 56:54.840
那么接下来的问题就是

56:54.840 --> 56:58.480
我如何在这个数组里边提取六

56:58.480 --> 57:00.720
在这个数组里边随机提取六项

57:00.720 --> 57:01.200
这个时候呢

57:01.200 --> 57:02.360
要用到另外一个函数

57:04.400 --> 57:05.320
这个笔记里边都有啊

57:05.360 --> 57:06.920
下来可以至于查一查的一个函数

57:06.920 --> 57:07.880
这都是API查去

57:07.880 --> 57:09.080
没什么好说的

57:09.080 --> 57:09.720
还是大句话

57:09.720 --> 57:10.400
不要去背

57:10.400 --> 57:11.640
不要去记这些API

57:11.640 --> 57:12.800
你知道大概怎么回事

57:12.800 --> 57:13.120
就行了

57:13.120 --> 57:14.280
怎么去查就行了

57:14.280 --> 57:16.160
然后这个这个函数叫做sample

57:16.160 --> 57:19.060
上面就是样品

57:19.060 --> 57:21.220
取一组尺寸的样品

57:21.220 --> 57:22.860
你看啊非常简单

57:22.860 --> 57:24.660
你传一个数组进去

57:24.660 --> 57:26.340
传一个直进去

57:26.340 --> 57:26.900
取几项

57:26.900 --> 57:28.420
从这个数组里面取几个

57:28.420 --> 57:30.140
而且取出来是不重复的啊

57:30.140 --> 57:31.420
那么这里边我们

57:31.420 --> 57:32.820
罗摸博士都可以这样的写

57:33.860 --> 57:34.420
叫做什么

57:34.500 --> 57:36.420
sample size

57:38.020 --> 57:40.100
把这个数组传进去

57:40.100 --> 57:41.180
33个球

57:41.180 --> 57:41.540
对吧

57:41.540 --> 57:43.300
1235678就是1-33

57:43.300 --> 57:44.780
这么一个数组传进去

57:44.780 --> 57:46.620
你在这个数组里边随便取六项出来

57:47.660 --> 57:49.260
这样子是不是反回一个新数组

57:49.260 --> 57:50.580
反回一直都反回新数组

57:50.580 --> 57:51.780
它不会改动原来的

57:51.780 --> 57:55.020
反回一个新数组给它

57:55.020 --> 57:55.140
好

57:55.140 --> 57:56.700
那么下面这个carnal的呢

57:56.700 --> 57:57.900
表示彩色的是什么

57:57.900 --> 57:59.020
就是一个数字

57:59.020 --> 58:00.540
1-16的数字对吧

58:00.540 --> 58:02.060
那么1-16的随机数啊

58:02.060 --> 58:02.860
这就不是存汉数了

58:02.860 --> 58:03.860
又随机了

58:03.860 --> 58:04.820
随机数呢

58:04.820 --> 58:08.640
它这里边有一个汉数叫reader

58:09.920 --> 58:11.480
这个number

58:11.480 --> 58:12.760
非常简单

58:12.760 --> 58:14.280
最小值最大值

58:14.280 --> 58:16.040
反回一个随机数

58:16.040 --> 58:18.080
那么这里就是

58:18.080 --> 58:19.120
下号线

58:19.120 --> 58:20.760
reader

58:20.760 --> 58:22.160
1-16

58:22.160 --> 58:26.320
随便生成一个随机数

58:26.320 --> 58:26.840
这个都好

58:28.840 --> 58:29.320
看来

58:29.320 --> 58:30.280
其他的五千不早写

58:30.280 --> 58:31.240
这个汉数就写完了

58:31.240 --> 58:32.280
两句话就写完了

58:32.280 --> 58:33.040
所以有的楼戴起

58:33.040 --> 58:33.880
辅助之后呢

58:33.880 --> 58:35.560
一些麻烦的事情就很好做了

58:36.760 --> 58:38.320
这里那么点击右键

58:38.320 --> 58:42.050
open with a little sound

58:42.050 --> 58:43.290
好看一下啊

58:43.290 --> 58:43.610
你看

58:45.050 --> 58:46.010
我就掉了两次啊

58:46.010 --> 58:46.450
第一次了

58:46.450 --> 58:47.770
是不是彩色的球

58:47.770 --> 58:49.170
普通的球

58:49.170 --> 58:50.130
彩色的球

58:50.130 --> 58:52.210
这中奖结果啊彩色的球

58:52.210 --> 58:52.770
普通的球

58:52.770 --> 58:53.450
这是我选的

58:53.450 --> 58:55.050
这中奖中奖结果

58:55.050 --> 58:56.090
听到这一块没问题啊

58:56.090 --> 58:57.450
QVE啊

58:57.450 --> 58:58.450
没问题

58:58.450 --> 59:00.170
我不知道有多好问题啊

59:00.170 --> 59:03.990
有问题就大问题

59:03.990 --> 59:05.910
你知道一十五的麦普的话

59:05.910 --> 59:07.390
就很好理解了

59:07.390 --> 59:09.470
那么接下来是一个最后一个函数了

59:10.870 --> 59:12.310
这里我得到我的我的中奖

59:12.510 --> 59:14.350
还有我开奖结果

59:14.350 --> 59:15.430
我抽的

59:15.430 --> 59:19.340
然后就是这个函数

59:19.340 --> 59:20.980
你给我一组

59:20.980 --> 59:24.460
再把中奖结果也给我

59:24.460 --> 59:26.100
我要告诉你得了几等奖

59:27.580 --> 59:29.580
还是说没有中奖

59:29.580 --> 59:31.100
我要给你一个结果

59:31.100 --> 59:31.940
这个结果我就告诉你

59:31.940 --> 59:32.740
就是个字不串

59:32.740 --> 59:33.940
一档奖二档奖

59:33.940 --> 59:36.620
还是三档奖四档奖五档奖六档奖

59:36.620 --> 59:38.140
或者是没有中奖

59:38.140 --> 59:39.020
我要告诉你这个结果

59:40.420 --> 59:42.100
那么我们来看一下啊

59:42.100 --> 59:43.220
这个地方

59:43.220 --> 59:43.900
你们可以下来

59:43.900 --> 59:45.100
下来可以自己去想一想

59:47.020 --> 59:47.740
如果说

59:47.740 --> 59:49.300
当你听到我讲了之后了

59:49.300 --> 59:51.100
你又想不到别的失误了

59:51.100 --> 59:52.420
可以想想有没有别的失误啊

59:55.340 --> 59:56.740
这个中奖怎么来判断呢

59:56.740 --> 59:57.220
你看啊

59:57.220 --> 59:58.140
首先我们搞这种意识

59:58.140 --> 59:59.180
什么叫一等奖

59:59.180 --> 01:00:00.420
六加一

01:00:00.420 --> 01:00:01.660
前边六个球

01:00:01.660 --> 01:00:02.780
我不要求顺序

01:00:02.780 --> 01:00:04.820
我不要求你的顺序完全一样

01:00:04.820 --> 01:00:06.020
就这里不是有个顺序吗

01:00:06.020 --> 01:00:06.220
对

01:00:06.220 --> 01:00:07.860
顺序我不要求你完全一样

01:00:07.860 --> 01:00:08.860
你只要匹配上六档

01:00:10.220 --> 01:00:11.580
只要有六个球都匹配上

01:00:11.580 --> 01:00:12.460
一共六个嘛

01:00:12.460 --> 01:00:13.660
然后彩色球在匹配上

01:00:13.660 --> 01:00:14.300
那就是一等奖

01:00:15.900 --> 01:00:16.260
二等奖

01:00:16.260 --> 01:00:17.940
那就是你前面六个全部匹配上

01:00:17.940 --> 01:00:19.180
彩色没有匹配上

01:00:19.180 --> 01:00:20.180
二等奖

01:00:20.180 --> 01:00:21.380
三等奖就是五加一

01:00:21.380 --> 01:00:22.380
四等奖是五加零

01:00:22.380 --> 01:00:23.860
或者是四加一

01:00:23.860 --> 01:00:24.740
五等奖就是四加零

01:00:24.740 --> 01:00:25.780
或者是三加一

01:00:25.780 --> 01:00:26.780
六等奖就是二加一

01:00:26.780 --> 01:00:27.340
一加一

01:00:27.340 --> 01:00:27.780
零加一

01:00:28.900 --> 01:00:30.260
这样的就是没有背中奖了

01:00:31.220 --> 01:00:31.820
怎么判断的

01:00:33.460 --> 01:00:36.260
你看这里边是有两个关键数字

01:00:36.260 --> 01:00:38.060
第一个关键数字彩色的

01:00:39.460 --> 01:00:40.180
到底中没中

01:00:41.180 --> 01:00:41.900
要么就是一

01:00:41.900 --> 01:00:42.660
要么就是零

01:00:42.660 --> 01:00:43.380
对吧

01:00:43.380 --> 01:00:44.020
这个很年代

01:00:46.260 --> 01:00:47.380
我们把它叫做歪

01:00:47.380 --> 01:00:48.340
歪

01:00:48.340 --> 01:00:49.540
彩色的到底中没中呢

01:00:51.300 --> 01:00:53.220
就是这个博士的

01:00:53.220 --> 01:00:53.980
你看传的时候

01:00:53.980 --> 01:00:56.620
是不是把我的和中奖结果传给你

01:00:56.620 --> 01:00:58.260
博的什么卡勒的

01:00:58.260 --> 01:00:58.540
对吧

01:00:58.540 --> 01:00:59.260
彩色的球

01:01:00.340 --> 01:01:01.380
如果说等于了什么

01:01:01.380 --> 01:01:02.500
托克车的卡勒的

01:01:04.140 --> 01:01:04.780
是不是就是一

01:01:04.780 --> 01:01:05.340
或者就是零

01:01:07.100 --> 01:01:08.780
这个值是不是很容易算出来

01:01:08.780 --> 01:01:09.180
没问题吧

01:01:10.060 --> 01:01:10.780
还能不能算出来

01:01:11.820 --> 01:01:12.220
完

01:01:12.220 --> 01:01:13.020
刚刚我们输出一下

01:01:13.020 --> 01:01:13.260
完

01:01:15.220 --> 01:01:15.820
是不零

01:01:15.820 --> 01:01:16.100
对吧

01:01:16.100 --> 01:01:16.500
彩色的

01:01:16.500 --> 01:01:17.580
你看彩色是4

01:01:17.580 --> 01:01:18.860
这边彩色是10

01:01:18.860 --> 01:01:19.740
是不是零

01:01:19.740 --> 01:01:21.180
这个要怎么办

01:01:21.180 --> 01:01:22.580
搞到一还不太容易啊

01:01:23.460 --> 01:01:24.420
还真不太容易啊

01:01:25.660 --> 01:01:27.300
看一下有没有机会啊

01:01:27.300 --> 01:01:28.780
领先了以后再说吧

01:01:28.780 --> 01:01:29.980
总之这个歪就是这个值

01:01:29.980 --> 01:01:30.260
出来了

01:01:30.260 --> 01:01:30.740
对吧

01:01:30.740 --> 01:01:32.140
然后还有一个X

01:01:32.140 --> 01:01:33.460
X是不是这个值

01:01:33.460 --> 01:01:34.260
这个是怎么出来的

01:01:35.340 --> 01:01:37.220
这个值就是要看这个数组里边

01:01:38.220 --> 01:01:38.980
这个数组里边

01:01:39.260 --> 01:01:40.900
和这个数组里边

01:01:40.900 --> 01:01:43.100
有多少相同的

01:01:43.100 --> 01:01:44.220
说看有多少相同的

01:01:45.100 --> 01:01:45.780
对吧

01:01:45.780 --> 01:01:48.460
那我怎么来看这两个数组中有多少相同的呢

01:01:48.460 --> 01:01:48.620
哎

01:01:48.620 --> 01:01:49.740
如果说你熟悉

01:01:49.740 --> 01:01:50.540
楼蛋喜啊

01:01:50.540 --> 01:01:51.460
当怎么熟悉

01:01:51.460 --> 01:01:52.820
你平时开发项目开发多了

01:01:52.820 --> 01:01:54.300
做练习多做的多了

01:01:54.300 --> 01:01:56.260
你这对你里边的韩式自然就熟悉了

01:01:56.260 --> 01:01:56.980
因为有的时候呢

01:01:56.980 --> 01:01:59.540
一起你自己写的时候写对头痛

01:01:59.540 --> 01:02:02.100
于是那你自然而然要去这里边叫韩数

01:02:02.100 --> 01:02:02.980
好比方说这里边

01:02:02.980 --> 01:02:04.460
他就提供一个韩数要insection

01:02:06.340 --> 01:02:07.900
intersection

01:02:07.940 --> 01:02:08.540
叫交叉

01:02:09.460 --> 01:02:13.080
数组交叉

01:02:13.080 --> 01:02:14.160
你给他一些数组

01:02:14.160 --> 01:02:14.880
给两个也可以

01:02:14.880 --> 01:02:15.600
给三个也可以

01:02:15.600 --> 01:02:16.560
给十八个也可以

01:02:16.560 --> 01:02:18.840
随便他会把这些数据里面从

01:02:18.840 --> 01:02:22.080
重复的向提取到一个新数据里面去

01:02:22.080 --> 01:02:23.200
就这么简单

01:02:23.200 --> 01:02:23.920
所以说呢

01:02:23.920 --> 01:02:24.920
这个X怎么算呢

01:02:26.400 --> 01:02:30.840
就是boss的就是楼蛋啊

01:02:30.840 --> 01:02:33.680
intersection交叉

01:02:33.680 --> 01:02:35.880
第一个数据boss的什么

01:02:35.880 --> 01:02:39.760
normal force和target的

01:02:39.760 --> 01:02:40.920
normal force

01:02:40.920 --> 01:02:42.240
看这两个数组里边

01:02:42.240 --> 01:02:45.960
有没有相同的把相同的提取出来

01:02:45.960 --> 01:02:46.120
好

01:02:46.120 --> 01:02:47.960
你看一下这个x啊

01:02:47.960 --> 01:02:49.000
来输出一下这个x

01:02:52.900 --> 01:02:53.780
一个都没有

01:02:53.780 --> 01:02:54.100
你看一下

01:02:54.100 --> 01:02:54.740
是不是一个都没有

01:02:55.860 --> 01:02:56.620
一个都没有

01:02:56.620 --> 01:02:57.500
对不对

01:02:57.500 --> 01:02:59.260
刷新九和七

01:02:59.260 --> 01:03:00.380
中了

01:03:00.380 --> 01:03:01.380
九和七是有相同的

01:03:01.380 --> 01:03:02.700
看七九

01:03:02.700 --> 01:03:04.940
这里九七

01:03:04.940 --> 01:03:07.220
从两个数据里面提取相同的

01:03:07.220 --> 01:03:09.580
就这些常用的一些工具还说啊

01:03:09.580 --> 01:03:10.460
楼蛋都给你做了

01:03:10.460 --> 01:03:11.860
就这么个意思

01:03:11.860 --> 01:03:11.980
好

01:03:11.980 --> 01:03:13.020
那么X出来的段落

01:03:13.020 --> 01:03:14.260
但是我只需要求这个

01:03:14.260 --> 01:03:15.500
他到底有几个相同的

01:03:15.500 --> 01:03:15.700
对吧

01:03:15.700 --> 01:03:17.260
我不在乎你有哪些相同

01:03:17.260 --> 01:03:19.460
我就求看你有几个相同的

01:03:19.460 --> 01:03:20.540
nance

01:03:20.540 --> 01:03:22.620
所以这个地方是为个数组

01:03:22.620 --> 01:03:23.900
nance是为有几个相同的

01:03:23.900 --> 01:03:24.740
数据里面有几项

01:03:24.740 --> 01:03:25.780
就有几项相同的

01:03:25.780 --> 01:03:26.820
这X

01:03:26.820 --> 01:03:26.980
好

01:03:26.980 --> 01:03:27.740
X出来了

01:03:27.740 --> 01:03:28.340
Y也出来了

01:03:28.340 --> 01:03:29.300
那么接下来怎么做呢

01:03:30.740 --> 01:03:31.500
接下来怎么做呢

01:03:31.500 --> 01:03:32.060
你看着啊

01:03:33.140 --> 01:03:34.340
接下来我们这样子

01:03:34.340 --> 01:03:36.820
我们把X和Y拼接起来

01:03:36.820 --> 01:03:41.060
拼接成一个字无串

01:03:41.060 --> 01:03:46.160
叫做R

01:03:46.160 --> 01:03:46.720
X

01:03:48.160 --> 01:03:49.000
拼接

01:03:49.000 --> 01:03:49.920
Y

01:03:49.920 --> 01:03:51.200
当然这个地方是变量

01:03:51.200 --> 01:03:51.480
对吧

01:03:53.200 --> 01:03:54.480
能看到吗

01:03:54.480 --> 01:03:55.920
把X放这

01:03:55.920 --> 01:03:56.640
把Y放这

01:03:56.640 --> 01:03:58.440
是拼接成了这么一个东西

01:03:58.440 --> 01:04:03.000
拼接成了比方说3加1这种格式

01:04:03.000 --> 01:04:04.200
就得到一个R

01:04:04.200 --> 01:04:04.440
对吧

01:04:04.440 --> 01:04:06.120
拼接成这种格式了

01:04:06.120 --> 01:04:08.200
那么接下来又怎么玩呢

01:04:08.200 --> 01:04:09.120
接下来就可以

01:04:09.120 --> 01:04:11.240
可能是有些同学就想不到了啊

01:04:11.240 --> 01:04:11.720
我这里呢

01:04:11.720 --> 01:04:13.480
会这样做一个比较巧妙的处理

01:04:13.480 --> 01:04:14.000
就这里呢

01:04:14.000 --> 01:04:14.600
我定一个

01:04:15.560 --> 01:04:16.600
定一个规则

01:04:16.600 --> 01:04:16.880
弱

01:04:18.720 --> 01:04:19.480
规则是一个数据

01:04:20.600 --> 01:04:21.360
数据里面呢

01:04:21.360 --> 01:04:22.840
一等奖就数据的第一项

01:04:23.720 --> 01:04:25.240
一等奖是一个数据

01:04:25.240 --> 01:04:26.640
一等奖有哪些情况呢

01:04:26.640 --> 01:04:27.880
只有一种情况

01:04:27.880 --> 01:04:28.440
6加1

01:04:29.480 --> 01:04:30.360
二等奖呢

01:04:30.360 --> 01:04:31.520
有几种情况呢

01:04:31.520 --> 01:04:32.280
6加0

01:04:33.280 --> 01:04:34.400
三等奖有几种情况呢

01:04:35.720 --> 01:04:36.080
5

01:04:36.080 --> 01:04:36.600
一种

01:04:36.600 --> 01:04:37.720
5加1

01:04:37.720 --> 01:04:38.360
四等奖呢

01:04:39.360 --> 01:04:40.480
5

01:04:40.480 --> 01:04:41.240
4

01:04:41.240 --> 01:04:43.240
4等奖是5加0

01:04:44.920 --> 01:04:46.440
4加1

01:04:46.440 --> 01:04:46.760
对吧

01:04:46.760 --> 01:04:47.760
这两个都可以

01:04:47.760 --> 01:04:49.200
任一种的都可以

01:04:49.200 --> 01:04:50.560
5等奖呢

01:04:50.560 --> 01:04:51.520
4加0

01:04:53.480 --> 01:04:54.360
3加1

01:04:55.360 --> 01:04:56.160
然后6等奖呢

01:04:56.160 --> 01:04:58.200
你不要用这种衣服L字判断啊

01:04:58.200 --> 01:05:00.120
用衣服L字判断的太少了

01:05:00.120 --> 01:05:00.760
2加1

01:05:01.680 --> 01:05:02.360
1加1

01:05:03.640 --> 01:05:04.440
0加1

01:05:05.360 --> 01:05:07.680
所以把把这些中奖规则全部写下来

01:05:07.720 --> 01:05:09.240
每个规则是不是一个数据

01:05:09.240 --> 01:05:09.920
今天我要干嘛

01:05:11.360 --> 01:05:12.960
我要看R

01:05:12.960 --> 01:05:14.120
在这里存不存在

01:05:15.000 --> 01:05:17.480
R在这里存不存在

01:05:17.480 --> 01:05:19.200
R在这里存不存在

01:05:20.200 --> 01:05:21.560
我换句话说

01:05:21.560 --> 01:05:22.920
我就要看这个R

01:05:22.920 --> 01:05:24.160
座落在

01:05:24.160 --> 01:05:25.960
第几个数据里面

01:05:27.400 --> 01:05:28.160
对吧

01:05:28.160 --> 01:05:29.440
座落在第一个数据里面

01:05:29.440 --> 01:05:31.000
是不是就一等奖

01:05:31.000 --> 01:05:31.960
座落在

01:05:31.960 --> 01:05:32.600
这个数据里面

01:05:32.600 --> 01:05:34.560
是不是就是六等奖

01:05:34.560 --> 01:05:35.520
座落在

01:05:35.520 --> 01:05:36.120
这个数据里面

01:05:36.120 --> 01:05:36.880
是不是就四等奖

01:05:38.400 --> 01:05:39.400
是不是

01:05:39.400 --> 01:05:41.920
是不是就R去匹配这些东西

01:05:41.920 --> 01:05:42.400
但是我说

01:05:42.400 --> 01:05:43.040
一个都找不到

01:05:43.040 --> 01:05:43.680
一个都找不到

01:05:43.680 --> 01:05:44.840
是不是就是没有中奖

01:05:45.680 --> 01:05:46.000
对吧

01:05:46.960 --> 01:05:47.960
所以我们这里要做什么呢

01:05:47.960 --> 01:05:49.400
要查找

01:05:49.400 --> 01:05:55.400
看R在弱势的第几项是匹配的

01:05:56.920 --> 01:05:58.600
那这么来看呢

01:05:58.600 --> 01:05:59.920
刘大喜里面有个函数

01:05:59.920 --> 01:06:01.680
叫做FandIndexed

01:06:02.800 --> 01:06:03.280
啥意思

01:06:04.240 --> 01:06:05.080
找一找

01:06:06.280 --> 01:06:06.960
数据给他

01:06:09.460 --> 01:06:10.060
数据给他

01:06:11.340 --> 01:06:12.100
找一找

01:06:13.060 --> 01:06:14.780
看一下那个

01:06:14.780 --> 01:06:16.460
这个数据里面

01:06:16.460 --> 01:06:18.580
跟后边是一个函数

01:06:18.580 --> 01:06:19.180
我看一下

01:06:19.180 --> 01:06:20.100
后边应该是个函数

01:06:21.260 --> 01:06:27.880
FandIndexed

01:06:33.140 --> 01:06:33.620
对

01:06:33.620 --> 01:06:34.420
后边可以写函数

01:06:35.940 --> 01:06:36.900
后边是一个函数

01:06:36.900 --> 01:06:38.580
因为他判断到底存不存在呢

01:06:38.580 --> 01:06:39.700
需要需要一个判断的

01:06:39.700 --> 01:06:40.860
我给大家解释一下

01:06:41.740 --> 01:06:42.500
R

01:06:42.500 --> 01:06:43.180
就是

01:06:44.940 --> 01:06:45.780
或者叫item

01:06:45.780 --> 01:06:46.220
都可以

01:06:47.500 --> 01:06:47.940
啥意思

01:06:49.100 --> 01:06:50.620
你把数据给他

01:06:50.620 --> 01:06:52.220
接下来他干嘛呢

01:06:52.220 --> 01:06:53.340
他就把第一项

01:06:54.820 --> 01:06:55.420
传进来

01:06:56.780 --> 01:06:57.780
然后运行这个函数

01:06:58.660 --> 01:07:00.220
这个函数如果说返回去

01:07:00.220 --> 01:07:02.180
就表示找到了

01:07:02.180 --> 01:07:02.740
找到过后呢

01:07:02.740 --> 01:07:04.900
他就把这一项的index

01:07:04.900 --> 01:07:05.980
返回

01:07:05.980 --> 01:07:06.540
明儿的意思吧

01:07:08.380 --> 01:07:10.740
把这一项传进来

01:07:11.580 --> 01:07:13.020
看这个函数的运行结果

01:07:13.020 --> 01:07:14.300
是不是返回去

01:07:14.300 --> 01:07:15.300
如果说返回去的话

01:07:15.300 --> 01:07:16.260
他就停止寻找

01:07:17.580 --> 01:07:19.700
那么就把这一项的下标返回

01:07:20.620 --> 01:07:22.060
就这么个意思

01:07:22.060 --> 01:07:23.700
如果说这一项没有返回去

01:07:23.700 --> 01:07:24.860
返回的是force

01:07:24.860 --> 01:07:26.100
那么又看第二项

01:07:26.100 --> 01:07:28.020
把这一项拿进来

01:07:28.020 --> 01:07:29.980
然后看这一项有没有返回去

01:07:29.980 --> 01:07:31.420
又把第三项拿进来

01:07:31.420 --> 01:07:32.580
直到返回去

01:07:32.580 --> 01:07:35.820
那么就得到这一项的下标返回

01:07:35.820 --> 01:07:37.740
如果说都没有找到

01:07:37.740 --> 01:07:38.420
他就返回复一

01:07:42.100 --> 01:07:42.540
不要理他

01:07:42.540 --> 01:07:43.820
他就返回复一

01:07:43.820 --> 01:07:44.700
反正也就是我们现在

01:07:44.700 --> 01:07:46.540
是不是只要写这儿就行了

01:07:46.540 --> 01:07:47.620
所以只要写这儿

01:07:47.620 --> 01:07:49.220
那么这一项我问大家一个问题

01:07:49.220 --> 01:07:50.100
听到我的试录者

01:07:50.100 --> 01:07:53.930
这个item什么类型

01:07:53.930 --> 01:08:01.410
这个item什么类型

01:08:01.410 --> 01:08:02.890
怎么扯数据库许的去了

01:08:04.170 --> 01:08:04.810
是不是数组

01:08:04.810 --> 01:08:05.130
对吧

01:08:05.130 --> 01:08:06.610
每一项是不是个数组

01:08:06.610 --> 01:08:07.290
对吧

01:08:07.290 --> 01:08:08.210
每一项是个数组

01:08:08.210 --> 01:08:09.210
那么现在我要做的事情

01:08:09.210 --> 01:08:11.770
是不是看R在这个数组里边

01:08:11.770 --> 01:08:14.210
是不是在这个数组里边存不存在

01:08:14.210 --> 01:08:16.330
R在这个数组里边存不存在

01:08:16.330 --> 01:08:19.290
那么R在这个数组里边存不存在呢

01:08:20.250 --> 01:08:21.530
现在是变成存不存在的问题了

01:08:21.530 --> 01:08:22.050
对吧

01:08:22.050 --> 01:08:23.330
楼单系里面又一个函数

01:08:23.330 --> 01:08:23.890
叫做

01:08:25.530 --> 01:08:26.570
Includes

01:08:28.490 --> 01:08:29.650
数组扔进去

01:08:30.850 --> 01:08:33.130
就item数组扔进去

01:08:33.130 --> 01:08:35.130
看哪个值看R

01:08:35.130 --> 01:08:36.490
R在这个数组里的存不存在

01:08:36.490 --> 01:08:37.290
存在就返回

01:08:37.290 --> 01:08:38.450
不存在就返回force

01:08:38.450 --> 01:08:41.920
因此我把这个返回就是

01:08:41.920 --> 01:08:42.520
我看什么

01:08:42.520 --> 01:08:44.720
我看每一项拿出来看

01:08:44.720 --> 01:08:45.600
满足什么条件

01:08:45.600 --> 01:08:47.000
这一项里边包含一个R

01:08:48.000 --> 01:08:49.720
这一项里边包含一个R

01:08:49.720 --> 01:08:50.920
包含一个R

01:08:51.920 --> 01:08:52.880
满足这个样的条件

01:08:52.880 --> 01:08:53.880
我就把下标返回

01:08:54.880 --> 01:08:56.000
所以说我这里

01:08:56.000 --> 01:08:56.800
输出一下下标

01:08:56.800 --> 01:08:57.600
你这个是

01:08:57.600 --> 01:08:58.480
看一下

01:08:58.480 --> 01:09:01.960
几张奖

01:09:01.960 --> 01:09:02.480
输一

01:09:02.480 --> 01:09:03.800
输了没有中奖

01:09:03.800 --> 01:09:04.080
是吧

01:09:04.080 --> 01:09:04.600
找不到啊

01:09:04.600 --> 01:09:05.600
没有中奖

01:09:05.600 --> 01:09:06.400
找不到

01:09:08.280 --> 01:09:09.320
然后呢

01:09:09.320 --> 01:09:10.200
你看

01:09:10.200 --> 01:09:10.680
没有中奖

01:09:10.680 --> 01:09:11.480
有没有中奖的呀

01:09:13.040 --> 01:09:14.160
真不好中奖

01:09:14.160 --> 01:09:18.020
真不好中奖

01:09:18.020 --> 01:09:20.140
所以说大家买彩票

01:09:20.180 --> 01:09:21.380
胜中啊

01:09:21.380 --> 01:09:22.540
这个不是很好中奖的

01:09:24.300 --> 01:09:26.020
就算我这还是真的水机

01:09:26.020 --> 01:09:27.260
啊无灯奖

01:09:27.260 --> 01:09:28.180
无灯奖

01:09:28.180 --> 01:09:29.100
无灯奖是不中奖

01:09:29.100 --> 01:09:31.820
卡尔德这个是Y11

01:09:31.820 --> 01:09:32.340
X呢

01:09:33.740 --> 01:09:34.580
一个是自己啊

01:09:36.140 --> 01:09:37.260
20

01:09:37.260 --> 01:09:37.740
哎呦

01:09:37.740 --> 01:09:38.780
我还真看了看了

01:09:38.780 --> 01:09:40.260
看了不清楚啊

01:09:40.260 --> 01:09:44.740
二五二三十二一

01:09:44.740 --> 01:09:45.740
二

01:09:45.740 --> 01:09:47.140
八

01:09:47.140 --> 01:09:47.780
无灯奖

01:09:48.820 --> 01:09:50.420
无灯奖

01:09:50.420 --> 01:09:51.700
一二三

01:09:51.700 --> 01:09:53.180
四五

01:09:53.180 --> 01:09:54.180
三加一

01:09:55.420 --> 01:09:58.940
中了三加一吗

01:09:58.940 --> 01:09:59.900
银这个是五

01:09:59.900 --> 01:10:00.580
那应该是六

01:10:00.580 --> 01:10:01.060
对吧

01:10:01.060 --> 01:10:01.380
六

01:10:01.380 --> 01:10:03.220
应该是零加一啊

01:10:03.220 --> 01:10:03.700
六

01:10:03.700 --> 01:10:04.580
因为这是下标嘛

01:10:04.580 --> 01:10:04.780
对吧

01:10:04.780 --> 01:10:06.180
下标是从零开始的

01:10:06.180 --> 01:10:07.460
所以我们这里判断一下

01:10:07.460 --> 01:10:08.820
如果说银这个是等于负一

01:10:09.940 --> 01:10:10.700
没有中奖

01:10:10.700 --> 01:10:11.580
发挥

01:10:11.580 --> 01:10:12.300
没有中奖

01:10:13.740 --> 01:10:14.940
大家看这个

01:10:14.940 --> 01:10:15.980
呃否则的话

01:10:15.980 --> 01:10:16.660
反悔什么呢

01:10:16.660 --> 01:10:17.660
中了几张奖呢

01:10:17.660 --> 01:10:18.020
中了

01:10:20.060 --> 01:10:25.990
银这个是加一

01:10:25.990 --> 01:10:26.710
ok

01:10:26.750 --> 01:10:27.550
没有中奖

01:10:27.550 --> 01:10:28.270
没有中奖

01:10:28.270 --> 01:10:29.110
没有中奖

01:10:29.110 --> 01:10:30.030
你们自己看

01:10:30.030 --> 01:10:31.310
应该是没问题的

01:10:31.310 --> 01:10:31.390
啊

01:10:31.390 --> 01:10:32.830
这就是写到这么一个

01:10:32.830 --> 01:10:33.470
呃

01:10:33.470 --> 01:10:34.870
中奖的这么一个小程序啊

01:10:34.870 --> 01:10:35.350
通过这个程序

01:10:35.350 --> 01:10:36.670
他就跟联系到很多的函数

01:10:37.950 --> 01:10:39.310
其实这个程序里边难的

01:10:39.310 --> 01:10:40.310
真的是难的是什么呢

01:10:41.510 --> 01:10:43.230
有些同学可能会认为啊

01:10:43.230 --> 01:10:44.350
这个麦不很难

01:10:44.350 --> 01:10:46.030
因为他里边为什么会传一个函数呢

01:10:46.030 --> 01:10:47.830
这个函数还要返回结果

01:10:47.830 --> 01:10:47.910
啊

01:10:47.910 --> 01:10:49.230
有同学就觉得这个

01:10:49.230 --> 01:10:49.550
呃

01:10:49.550 --> 01:10:50.670
范正英这个是很难

01:10:50.670 --> 01:10:51.510
因为这个函数呢

01:10:51.510 --> 01:10:52.870
他用个要传一个函数

01:10:52.870 --> 01:10:53.750
用一个返回结果

01:10:54.950 --> 01:10:56.310
实际上

01:10:56.310 --> 01:10:57.750
难度不在这

01:10:57.750 --> 01:10:59.270
以误解了他了

01:10:59.270 --> 01:11:02.470
难度在于你不了解回调函数

01:11:02.470 --> 01:11:03.430
你不了解回调

01:11:04.910 --> 01:11:07.350
你对回调还是做一个专门的训练

01:11:07.350 --> 01:11:08.550
有或者说你见了

01:11:08.550 --> 01:11:11.310
他一扫太少的回调这种场景了

01:11:11.310 --> 01:11:12.910
所以说你突然觉得他很难

01:11:12.910 --> 01:11:14.270
你冤枉他了

01:11:14.270 --> 01:11:17.310
他只是就突不通通的用了一个回调而已

01:11:17.310 --> 01:11:19.430
并没有什么特别的啊

01:11:19.430 --> 01:11:20.230
你回调熟悉的话

01:11:20.230 --> 01:11:21.030
会一下就看懂了

01:11:22.310 --> 01:11:23.950
而且觉得这个呃

01:11:23.950 --> 01:11:25.550
这里边一会用这个

01:11:25.550 --> 01:11:26.670
一会用那个

01:11:26.670 --> 01:11:27.670
这不是难点

01:11:27.670 --> 01:11:30.790
难点在于你能不能想到用这种模式去做

01:11:31.830 --> 01:11:34.070
你能不能想到用这种模式去做

01:11:34.070 --> 01:11:36.150
这才是真正的难的地方

01:11:36.150 --> 01:11:38.310
那么一开始想到一想不到是很正常的

01:11:38.310 --> 01:11:40.910
因为没有经过老师的专门给大家的训练

01:11:40.910 --> 01:11:41.670
对吧

01:11:41.670 --> 01:11:43.190
没有长期的这种练习训练

01:11:43.190 --> 01:11:44.630
一开始想不到很正常

01:11:44.630 --> 01:11:46.710
你只有看到很多很多的这种类似的代码

01:11:46.710 --> 01:11:48.750
像老师写的很多次这样的代码

01:11:48.750 --> 01:11:51.790
你慢慢慢慢才会体会到这种程序思维

01:11:51.830 --> 01:11:54.350
其实一喊出本身没有什么可难的

01:11:54.350 --> 01:11:54.750
好了

