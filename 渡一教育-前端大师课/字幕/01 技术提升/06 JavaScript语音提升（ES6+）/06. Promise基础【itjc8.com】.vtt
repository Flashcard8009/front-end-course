WEBVTT

00:00.240 --> 00:05.620
好了 同学们 咱们终于到了这个阶段的最重要的一部分

00:05.620 --> 00:10.660
也是内容最多的一部分 当然它也是相对来说比较复杂的一部分

00:10.660 --> 00:15.720
咱们前段开发呢 它其实口不多 其中一个口呢就是在这

00:15.720 --> 00:19.560
Promise 这是ES6 给我们新搞出来这么一个东西

00:19.560 --> 00:24.440
你要说不用 不学这个玩意儿 能不能做开发呢 当然可以

00:24.440 --> 00:29.920
但是呢 现在呢 在公司里边啊 很多异部场景的处理

00:30.200 --> 00:33.440
异部我们之前讲过了 对吧 针对异部场景的处理

00:33.440 --> 00:38.880
很多地方都会使用Promise 这个Promise啊 它的作用呢

00:38.880 --> 00:43.760
就是用来处理异部场景的 因为ES6觉得之前的异部场景

00:43.760 --> 00:47.280
太拉垮了 所以说呢 给你搞出来这么一个新的东西啊

00:47.280 --> 00:50.560
让你它希望呢 就说你以后的异部场景呢

00:50.560 --> 00:53.840
都使用Promise来进行处理 其实这个东西啊

00:53.840 --> 00:57.240
对于我们开发而言 对于我们写代码而言

00:57.280 --> 01:00.360
它在代码里边占到笔中呢 并不是很大

01:00.360 --> 01:04.680
但是呢 它百分之百会有 就是代码里边百分之百会有

01:04.680 --> 01:08.320
主要是集中在网络通信的一块 你们之后会学习网络啊

01:08.320 --> 01:11.440
学习网络的时候 你们就会用到这个Promise

01:11.440 --> 01:14.640
但是它在那个代码里边占的笔中并不大

01:14.640 --> 01:20.440
但是 它在面试题里边占的笔中是很大的

01:20.440 --> 01:24.760
ES6里边出面试题 出的最集中的也就是Promise

01:24.760 --> 01:29.520
其他地方呢 要不然就是偶尔会出现一点点

01:29.520 --> 01:33.000
但是呢 不会太多 主要就是Promise

01:33.000 --> 01:35.280
咱们学习这个Promise呢 一节课肯定是搞不定

01:35.280 --> 01:37.520
慢慢来一点一点给大家讲清楚

01:37.520 --> 01:40.280
因为前边的我们也做了一些铺垫了 对吧

01:40.280 --> 01:42.960
讲了一个实践循环 给他做了这么一个铺垫

01:42.960 --> 01:45.920
那么就有利于我们后边学习这个Promise

01:45.920 --> 01:50.160
好 那么我们从一个问题来出发

01:50.160 --> 01:53.120
其实这一块啊 我给大家说哈

01:53.720 --> 01:55.200
一个新东西的出现了

01:55.200 --> 01:58.560
它是需要一个段时间慢慢去试试

01:58.560 --> 01:59.920
这就好比例

01:59.920 --> 02:04.240
你从小到大可能没有怎么去接触过女生

02:04.240 --> 02:06.160
天天跟男生在一块玩

02:06.160 --> 02:09.240
你会觉得 哎 男孩子其实挺可爱的 对吧

02:09.240 --> 02:12.600
突然有一天把你放到女生堆里边

02:12.600 --> 02:16.120
这个时候你以为你就要疯狂输出了

02:16.120 --> 02:19.520
不是的 你肯定一开始的感觉是恐惧

02:19.520 --> 02:22.560
害怕 而且特别特别不适应

02:22.720 --> 02:26.000
特别怀念以前光磅子打游戏的那种感觉

02:26.000 --> 02:28.760
但是你过了一段时间

02:28.760 --> 02:33.440
好像是打开了一扇新世界的大门了 对吧

02:33.440 --> 02:35.640
就开始过着没秀没哨的生活了

02:35.640 --> 02:38.160
所以说这个东西需要一段时间适应

02:38.160 --> 02:40.280
Promise本身是一个好东西

02:40.280 --> 02:44.360
但是一开始接触可能会有那么一点不适应

02:44.360 --> 02:47.600
感觉要有一点恐惧 恼火 恶心

02:47.600 --> 02:48.920
会有那么一点感觉

02:48.920 --> 02:50.040
但是慢慢适应过后

02:50.040 --> 02:51.920
你觉得它真的是一个好东西

02:51.960 --> 02:54.840
因为它主要是为了解决异不长之的一些问题

02:54.840 --> 02:58.000
咱们首先通过一个例子来说明这个问题

02:58.000 --> 02:59.640
咱们说别人也不合适

02:59.640 --> 03:01.200
咱们还是说邓哥吧

03:01.200 --> 03:03.640
邓哥他心中有很多的女神

03:03.640 --> 03:05.960
我们说邓哥有很多的嫂子 对吧

03:05.960 --> 03:08.640
邓嫂 他心中有很多女神

03:08.640 --> 03:11.560
然后决定去表白

03:11.560 --> 03:13.800
他觉得只要女神够多

03:13.800 --> 03:14.920
根据概率学的原理

03:14.920 --> 03:17.480
哪怕你表白的成功机率只有10%

03:17.480 --> 03:18.880
但是女神多了

03:19.360 --> 03:22.280
这样子表白的整体的机率就提个升了

03:22.280 --> 03:25.040
所以说他要进行一连串的表白

03:25.040 --> 03:27.120
表白的形式就是发短信

03:27.120 --> 03:29.520
那么他决定是用串形的方式来进行表白

03:29.520 --> 03:30.680
是不是要串形

03:30.680 --> 03:35.080
就说首先给女神1号发一个短信

03:35.080 --> 03:36.200
我喜欢你

03:36.200 --> 03:39.120
然后如果说女神1号

03:39.120 --> 03:40.960
这一块短信的成功了

03:40.960 --> 03:42.360
那么他就可以接着

03:42.360 --> 03:43.600
他就不用再进行下去了

03:43.600 --> 03:45.080
直接结束

03:45.080 --> 03:47.560
如果失败了

03:47.600 --> 03:49.520
这个时候再给女神2号发

03:49.520 --> 03:50.800
他不是同事发的

03:50.800 --> 03:52.840
他是前一个出结果之后

03:52.840 --> 03:54.520
再决定要不要发后一个

03:54.520 --> 03:56.280
就这么一种串形的方式

03:56.280 --> 03:57.920
直到发送成功

03:57.920 --> 03:59.760
那如果说所有女神表白失败了

03:59.760 --> 04:01.400
就整体就失败了

04:01.400 --> 04:03.360
就这么一个场景

04:03.360 --> 04:04.920
那么比方说吧

04:04.920 --> 04:07.480
邓哥的女神一共有4位

04:07.480 --> 04:08.760
你看这些女神的名字

04:08.760 --> 04:12.920
就知道邓哥他不是一个凡人

04:12.920 --> 04:15.400
心上角度还是蛮刁砖的

04:15.400 --> 04:16.960
总之他有这么4个女神

04:17.000 --> 04:19.480
要给她们一一去发送这个短信

04:19.480 --> 04:21.960
那么我们用程序来描述她

04:21.960 --> 04:23.120
该怎么来描述呢

04:23.120 --> 04:24.400
于是邓哥就决定了

04:24.400 --> 04:26.360
用程序来写这么一个代码

04:26.360 --> 04:27.960
当然这里边还发送短信的东西

04:27.960 --> 04:30.920
我就用console log

04:30.920 --> 04:32.320
控制来打印来代替了

04:32.320 --> 04:33.240
就做模拟

04:33.240 --> 04:34.600
他写出来这么一个函数

04:34.600 --> 04:36.040
咱们来看一下这个函数

04:36.040 --> 04:37.960
这个函数没有任何的新知识

04:39.160 --> 04:39.960
通过这个函数

04:39.960 --> 04:41.200
我们来认识到

04:41.200 --> 04:43.360
主要是要认识到以前的

04:43.360 --> 04:44.600
异部处理

04:44.600 --> 04:46.440
这种模式有什么样的一个问题

04:46.440 --> 04:48.040
咱们来约读一下这个代码

04:48.040 --> 04:49.720
这个函数的作用是发送

04:49.720 --> 04:51.840
向某一个女神发送一个短信

04:51.840 --> 04:52.920
这是女神的名字

04:52.920 --> 04:54.320
传进来

04:54.320 --> 04:57.720
那如果说女神同意了

04:57.720 --> 04:59.720
也就成功了

04:59.720 --> 05:02.360
你给我传一个后续怎么处理

05:02.360 --> 05:04.720
就成功之后我要做什么

05:04.720 --> 05:06.400
这个函数是不知道的

05:06.400 --> 05:08.400
你需要给我传一个函数进来

05:08.400 --> 05:09.560
这是一个函数

05:09.560 --> 05:10.400
通过传进来

05:10.400 --> 05:12.040
到时候咱们调用

05:12.040 --> 05:13.320
send message

05:13.320 --> 05:15.320
我们这里给李健刚

05:15.320 --> 05:19.320
美女发一个短信

05:19.320 --> 05:21.320
然后如果说成功了

05:21.320 --> 05:23.320
那么你给我传一个毁掉函数进来

05:23.320 --> 05:25.320
明白了意思吗

05:25.320 --> 05:27.320
你给我传一个函数进来

05:27.320 --> 05:29.320
我就会运行这个函数

05:29.320 --> 05:30.320
如果说失败了

05:30.320 --> 05:32.320
你给我再传一个函数进来

05:32.320 --> 05:33.320
成功了

05:33.320 --> 05:34.320
它就会运行这个函数

05:34.320 --> 05:35.320
失败了就会运行这个函数

05:35.320 --> 05:37.320
当然你可以用箭头函数来写

05:37.320 --> 05:39.320
也没有任何问题

05:39.320 --> 05:40.320
失败了

05:40.320 --> 05:41.320
你给我传这么一个函数

05:41.320 --> 05:43.320
它希望这个send message

05:43.320 --> 05:45.320
这个函数它打成这么一个效果

05:45.320 --> 05:47.320
给它发一个表白短信

05:47.320 --> 05:50.320
如果说它那边回复成功了

05:50.320 --> 05:52.320
你运行这个函数

05:52.320 --> 05:54.320
如果说它那边回复拒绝了

05:54.320 --> 05:56.320
那么你运行这个函数

05:56.320 --> 05:58.320
当然有可能成功的时候

05:58.320 --> 06:00.320
它别人会有个回复

06:00.320 --> 06:01.320
对吧

06:01.320 --> 06:02.320
别人怎么成功了

06:02.320 --> 06:04.320
给你回了一个消息

06:04.320 --> 06:05.320
我同意

06:05.320 --> 06:07.320
或者是一些土味情话

06:07.320 --> 06:09.320
那么别人回复的消息

06:09.320 --> 06:12.320
我希望通过这个函数能够接受得到

06:12.320 --> 06:14.320
如果说别人拒绝了

06:14.320 --> 06:16.320
那么拒绝的消息

06:16.320 --> 06:19.320
我也希望通过这个函数能够接受得到

06:19.320 --> 06:21.320
我就希望打成这么一个效果

06:21.320 --> 06:22.320
这个send message函数

06:22.320 --> 06:23.320
那么这个函数怎么写的呢

06:23.320 --> 06:25.320
首先我做了个魔力

06:25.320 --> 06:26.320
说说这么一句话

06:26.320 --> 06:30.320
邓哥给这个人发了一个短信

06:30.320 --> 06:32.320
就是一句话

06:32.320 --> 06:35.320
然后就开始等待对方的回复

06:35.320 --> 06:36.320
是不是需要一段时间

06:36.320 --> 06:37.320
那么这个时间的话

06:37.320 --> 06:40.320
我这里会就魔力等待一秒钟

06:40.320 --> 06:42.320
魔力这个女生那边看到消息

06:42.320 --> 06:44.320
然后回复消息需要一段时间

06:44.320 --> 06:45.320
那么她到底回复啥

06:45.320 --> 06:46.320
我也不知道

06:46.320 --> 06:48.320
那么比方说一秒钟之后

06:48.320 --> 06:49.320
女生回复了

06:49.320 --> 06:51.320
那么到底成功还是失败呢

06:51.320 --> 06:52.320
我这里就魔力

06:52.320 --> 06:55.320
魔力10%的几率会成功

06:55.320 --> 06:57.320
那么这里我用那个随机数

06:57.320 --> 06:59.320
只要随机数小于0.1

06:59.320 --> 07:00.320
随机数是0到1之间

07:00.320 --> 07:03.320
小于0.1的几率是不是10%

07:03.320 --> 07:05.320
我就用小于0.1

07:05.320 --> 07:07.320
如果说落在这个范围内

07:07.320 --> 07:10.320
那么就相当于是女生那边答应了

07:10.320 --> 07:11.320
成功了

07:11.320 --> 07:12.320
于是我这边呢

07:12.320 --> 07:14.320
就调用你传过来这个函数

07:14.320 --> 07:15.320
你看

07:15.320 --> 07:17.320
首先你要把这个成语看懂

07:17.320 --> 07:21.080
你看这个函数是不是传进去了

07:21.080 --> 07:22.080
传在谁

07:22.080 --> 07:23.080
传在这个Fulfilled

07:23.080 --> 07:24.080
对不对

07:24.080 --> 07:25.080
函数传过来了

07:25.080 --> 07:26.080
那么它是一个什么

07:26.080 --> 07:27.080
它是一个函数

07:27.080 --> 07:29.080
如果说成功了

07:29.080 --> 07:31.080
我就调用这个函数

07:31.080 --> 07:33.080
这个函数不是有一个参数吗

07:33.080 --> 07:34.080
对不对

07:34.080 --> 07:35.080
是不是有一个参数

07:35.080 --> 07:36.080
那我就把这个参数

07:36.080 --> 07:37.080
做一个字符串

07:37.080 --> 07:38.080
就女神的回复

07:38.080 --> 07:40.080
我就模拟到一个字符串

07:40.080 --> 07:41.080
女神跟灯哥说

07:41.080 --> 07:42.080
我是叫李四山

07:42.080 --> 07:43.080
除了你

07:43.080 --> 07:44.080
还是你

07:44.080 --> 07:45.080
然后呢

07:45.080 --> 07:46.080
把这个回复呢

07:46.080 --> 07:48.080
就交给这个函数的参数

07:48.080 --> 07:49.080
看到没

07:49.080 --> 07:50.080
就这里调用

07:50.080 --> 07:51.080
这里传进去

07:51.080 --> 07:52.080
把函数传进去

07:52.080 --> 07:53.080
然后呢

07:53.080 --> 07:54.080
这里就调用它

07:54.080 --> 07:55.080
把参数传进来

07:55.080 --> 07:58.080
这是一个典型的毁掉模式

07:58.080 --> 08:01.080
像我们之前的介石里边

08:01.080 --> 08:03.080
所有的异部常境的处理

08:03.080 --> 08:04.080
全是毁掉

08:04.080 --> 08:06.080
然后咱们来回顾一下吧

08:06.080 --> 08:08.080
哪些是我们异部常境的处理

08:08.080 --> 08:11.080
我们之前学过的setout

08:11.080 --> 08:12.080
是不是异部常境的处理

08:12.080 --> 08:13.080
它是不是毁掉

08:13.080 --> 08:15.080
这里是不是毁掉函数

08:15.080 --> 08:17.080
李哥传了一个函数进去

08:17.080 --> 08:18.080
然后呢

08:18.080 --> 08:19.080
还有什么常境的处理呢

08:19.080 --> 08:21.080
还有是set interval

08:21.080 --> 08:22.080
我们以前的异部常境

08:22.080 --> 08:23.080
就能这么一些

08:23.080 --> 08:25.080
这个地方是不是一个毁掉函数

08:25.080 --> 08:26.080
还有什么呢

08:26.080 --> 08:28.080
add event listener

08:28.080 --> 08:31.080
event listener

08:31.080 --> 08:33.460
那么这里

08:33.460 --> 08:34.460
时间名字

08:34.460 --> 08:36.460
这个地方是不是一个毁掉函数

08:36.460 --> 08:37.460
对吧

08:37.460 --> 08:38.460
那么这些呢

08:38.460 --> 08:40.460
都是我们以前的异部常境

08:40.460 --> 08:42.460
都是使用毁掉函数来处理

08:42.460 --> 08:44.460
那么我们就继续看

08:44.460 --> 08:45.460
这里我们也用的是毁掉

08:45.460 --> 08:46.460
成功你运行这个

08:46.460 --> 08:47.460
失败你运行这个

08:47.460 --> 08:48.460
好

08:48.460 --> 08:49.460
成功之后呢

08:49.460 --> 08:50.460
我就调用这个函数

08:50.460 --> 08:52.460
把这个回复的消息给你传进来

08:52.460 --> 08:53.460
失败的时候呢

08:53.460 --> 08:55.460
我就调用这个函数

08:55.460 --> 08:56.460
把这个失败的那个

08:56.460 --> 08:58.460
回复消息给你传进来

08:58.460 --> 08:59.460
对吧

08:59.460 --> 09:00.460
就写成了这么一个

09:00.460 --> 09:01.460
send message 函数

09:01.460 --> 09:02.460
好那咱们呢

09:02.460 --> 09:03.460
试着用一下吧

09:03.460 --> 09:04.460
那我用这个函数

09:04.460 --> 09:05.460
怎么来发送一个

09:05.460 --> 09:06.460
表白消息呢

09:06.460 --> 09:08.460
我给李建刚发消息

09:08.460 --> 09:09.460
如果说成功了

09:09.460 --> 09:10.460
那我就输出

09:10.460 --> 09:12.460
输出你输出成功

09:13.460 --> 09:14.460
然后呢

09:14.460 --> 09:16.460
把女神的回复打印出来

09:16.460 --> 09:17.460
好失败呢

09:17.460 --> 09:19.460
我就输出失败

09:19.460 --> 09:21.460
那么把女神的回复打印出来

09:21.460 --> 09:22.460
好咱们来试一下

09:22.460 --> 09:23.460
看可不可以呢

09:23.460 --> 09:24.460
右键运行

09:25.460 --> 09:26.460
好是不是发送消息了

09:26.460 --> 09:27.460
失败了

09:27.460 --> 09:28.460
对吧

09:28.460 --> 09:29.460
然后我们再来重新运行

09:31.460 --> 09:32.460
失败

09:32.460 --> 09:34.460
运行也是总有一次成功的

09:34.460 --> 09:35.460
失败

09:35.460 --> 09:37.460
失败就运行的是这个函数

09:37.460 --> 09:38.460
对吧

09:38.460 --> 09:39.460
你看失败

09:39.460 --> 09:40.460
是不是运行它

09:40.460 --> 09:42.460
运行它的话就相当于是运行它

09:42.460 --> 09:43.460
对不对

09:43.460 --> 09:44.460
再运行

09:45.460 --> 09:46.460
来 成功了

09:46.460 --> 09:47.460
对吧

09:47.460 --> 09:48.460
成功的话

09:48.460 --> 09:49.460
这里就会运行

09:49.460 --> 09:51.460
那么就相当于是运行的是这个函数

09:51.460 --> 09:52.460
对吧

09:52.460 --> 09:54.460
这就是一个典型的毁掉模式

09:54.460 --> 09:55.460
这个弹码呢

09:55.460 --> 09:56.460
其实对于

09:56.460 --> 09:57.460
我相信对于一些同学来说

09:57.460 --> 09:59.460
还是有点复杂的

09:59.460 --> 10:01.460
但是这还是传统的处理方式

10:02.460 --> 10:04.460
好好去理解 梳理一下

10:04.460 --> 10:06.460
都是传统的一种毁掉处理模式

10:06.460 --> 10:07.460
真的没谁寄

10:07.460 --> 10:08.460
传了两个毁掉进去

10:09.460 --> 10:11.460
那么这个函数写完了过后呢

10:11.460 --> 10:13.460
登哥觉得封装好了

10:14.460 --> 10:15.460
于是觉得

10:15.460 --> 10:17.460
我就接下来就可以使用这个函数

10:17.460 --> 10:19.460
来不断的向女生发消息了

10:19.460 --> 10:20.460
接下来他的代码

10:20.460 --> 10:23.460
就是分别给李建国先发消息

10:23.460 --> 10:24.460
看一下对方的回复

10:24.460 --> 10:26.460
如果说对方拒绝了

10:26.460 --> 10:29.460
我再给王富贵发一个消息

10:29.460 --> 10:31.460
然后再给周俊才留着用

10:31.460 --> 10:33.460
给他四个女生一一去发送消息

10:33.460 --> 10:34.460
前一个失败了

10:34.460 --> 10:35.460
我就给后一个发

10:36.460 --> 10:38.460
你们可以尝试着写一下

10:38.460 --> 10:40.460
不看后边的文档

10:40.460 --> 10:41.460
不听我的后边的贫

10:41.460 --> 10:42.460
暂停视频尝试着写下

10:42.460 --> 10:44.460
不管能不能写出来

10:44.460 --> 10:47.460
这个功能也会写成一个什么样的结构

10:48.460 --> 10:50.460
你尝试写一下

10:50.460 --> 10:53.220
下面是一个

10:53.220 --> 10:54.220
下面就是代码结构

10:54.220 --> 10:55.220
你看一下吧

10:55.220 --> 10:57.220
有多恶心这个写出来

10:57.220 --> 11:00.220
这就是毁掉模式的一个问题

11:00.220 --> 11:04.360
我们来初略看一下

11:05.360 --> 11:08.360
我首先向李建国发送消息

11:08.360 --> 11:10.360
要传两个毁掉对吧

11:10.360 --> 11:11.360
成功了

11:11.360 --> 11:12.360
如果说别人都答应了

11:12.360 --> 11:13.360
你就不用发了

11:13.360 --> 11:15.360
那就打印出别人回复的消息

11:15.360 --> 11:17.360
然后就结束了

11:17.360 --> 11:18.360
如果说失败了

11:18.360 --> 11:20.360
李建国那边拒绝了

11:20.360 --> 11:21.360
拒绝了之后

11:21.360 --> 11:23.360
我要做的事情的两件事

11:23.360 --> 11:28.360
打印出对方的回复消息

11:28.360 --> 11:30.360
然后是不是还要给别人发

11:30.360 --> 11:31.360
对吧

11:31.360 --> 11:33.360
然后向王富冠来发这个消息

11:33.360 --> 11:36.360
又重新调用这个send message

11:36.360 --> 11:38.360
是不是回调里边

11:38.360 --> 11:40.360
调用这个send message

11:40.360 --> 11:41.360
你看

11:42.360 --> 11:43.360
我只能在回调里边调

11:43.360 --> 11:44.360
因为只有失败过后

11:44.360 --> 11:46.360
我才能去发送下一个消息

11:46.360 --> 11:47.360
对吧

11:47.360 --> 11:48.360
我不能写到外面

11:48.360 --> 11:49.360
你是不能把这个send message

11:49.360 --> 11:51.360
写到这的

11:51.360 --> 11:53.360
为什么呢

11:53.360 --> 11:54.360
因为你都不知道

11:54.360 --> 11:55.360
别人到底是成功还是失败

11:55.360 --> 11:56.360
对吧

11:56.360 --> 11:57.360
别人都还没有给你回消息

11:57.360 --> 11:58.360
你马上给下一个发了

11:58.360 --> 12:00.360
那万一两个都同意了

12:00.360 --> 12:01.360
这个事情是不是就尴尬了

12:01.360 --> 12:02.360
对不对

12:02.360 --> 12:04.360
当然对邓邓哥来说

12:04.360 --> 12:06.360
也不造成什么样的问题

12:06.360 --> 12:07.360
没有那么强

12:07.360 --> 12:08.360
没有那么强的

12:08.360 --> 12:11.360
还是一个好

12:11.360 --> 12:12.360
因此呢

12:12.360 --> 12:14.360
所以说我们这里只能等到

12:14.360 --> 12:15.360
对方有了一个结果

12:15.360 --> 12:17.360
不管是成功还是失败

12:17.360 --> 12:18.360
有了一个结果之后

12:18.360 --> 12:21.360
我才能进行进一步的处理

12:21.360 --> 12:22.360
那你看

12:22.360 --> 12:24.360
如果说别人回复了

12:24.360 --> 12:25.360
拒绝了

12:25.360 --> 12:26.360
那么我就失败了

12:26.360 --> 12:27.360
失败了我这里

12:27.360 --> 12:29.360
是不是要重新发送消息给谁

12:29.360 --> 12:30.360
王富贵

12:30.360 --> 12:31.360
然后王富贵那边

12:31.360 --> 12:33.360
是不是也有成功和失败

12:33.360 --> 12:34.360
如果说王富贵那边成功了

12:34.360 --> 12:35.360
我是不是就打印出

12:35.360 --> 12:36.360
这个消息

12:36.360 --> 12:37.360
成功就OK了

12:37.360 --> 12:38.360
就停止了

12:38.360 --> 12:40.360
那么从此以后邓哥

12:40.360 --> 12:41.360
跟王富贵就过上了

12:41.360 --> 12:42.360
美秀美少的生活

12:42.360 --> 12:43.360
但是呢

12:43.360 --> 12:44.360
如果说他失败了

12:44.360 --> 12:46.360
这两个情况我们都要考虑

12:46.360 --> 12:48.360
我也不知道他成功还是失败

12:48.360 --> 12:49.360
如果说成功了

12:49.360 --> 12:50.360
那就结束了

12:50.360 --> 12:51.360
如果说失败了

12:51.360 --> 12:52.360
所以又来了

12:52.360 --> 12:53.360
我打印出

12:53.360 --> 12:55.360
王富贵那边给我回复的消息

12:55.360 --> 12:57.360
那我还要继续发呀

12:57.360 --> 12:58.360
给谁

12:58.360 --> 13:00.360
你看是不是又是生的Message

13:01.360 --> 13:02.360
然后给周剧才发

13:02.360 --> 13:03.360
周剧才那边成功了

13:03.360 --> 13:04.360
我打印出消息

13:04.360 --> 13:06.360
如果说失败了

13:06.360 --> 13:08.360
那你看周剧才失败了

13:08.360 --> 13:09.360
我要打印出周剧才

13:09.360 --> 13:12.360
给邓哥的拒绝消息

13:12.360 --> 13:13.360
又给谁

13:13.360 --> 13:14.360
又给刘仁勇无法

13:14.360 --> 13:16.360
那成功了就成功了

13:16.360 --> 13:18.360
如果说刘仁勇也失败了

13:18.360 --> 13:20.360
那我就没办法了

13:20.360 --> 13:23.360
邓哥就注定孤独通了

13:23.360 --> 13:24.360
就这么一个程序结构

13:24.360 --> 13:26.360
你看一下这个程序结构

13:27.360 --> 13:28.360
你看一下

13:28.360 --> 13:29.360
怎么个恶心法

13:29.360 --> 13:32.360
是不是毁掉里边套毁掉

13:32.360 --> 13:34.360
这是一个毁掉

13:34.360 --> 13:36.360
然后这里是不是一个毁掉

13:36.360 --> 13:38.360
这是一个毁掉

13:38.360 --> 13:40.360
这个毁掉套在这个毁掉里边

13:40.360 --> 13:43.360
而这个毁掉里边又有毁掉

13:43.360 --> 13:45.360
这个毁掉里边又有毁掉

13:45.360 --> 13:47.360
你看是不是毁掉套毁掉

13:47.360 --> 13:49.360
还真没有什么好的办法

13:49.360 --> 13:51.360
过去没有办法只能这样做

13:51.360 --> 13:52.360
那么这种情况

13:52.360 --> 13:55.360
我们把它称之为毁掉利率

13:56.360 --> 13:58.360
毁掉就是毁掉的意思

13:58.360 --> 13:59.360
毁掉函数

13:59.360 --> 14:00.360
就等一会儿再执行

14:00.360 --> 14:02.360
等于结果之后再执行

14:02.360 --> 14:04.360
毁掉里边套毁掉

14:04.360 --> 14:07.360
就形成了这种非常长的签讨关系

14:07.360 --> 14:08.360
你看是不是那个扩号

14:08.360 --> 14:09.360
看上去恶不恶心

14:09.360 --> 14:12.360
那么ES6的Promise的出现

14:12.360 --> 14:14.360
一个重要的功能

14:14.360 --> 14:16.360
就是要解决这个问题

14:16.360 --> 14:18.360
不能再这样去签讨了

14:18.360 --> 14:20.360
这里只有四个女神

14:20.360 --> 14:21.360
按邓哥的尿性的话

14:21.360 --> 14:23.360
女神肯定不止四个

14:23.360 --> 14:24.360
可能四十个

14:24.360 --> 14:26.360
哪里这个代码就没法看了

14:26.360 --> 14:28.360
还有很多其他的问题

14:28.360 --> 14:30.360
比较重要的问题就是这个问题

14:30.360 --> 14:31.360
那么怎么来解决

14:31.360 --> 14:32.360
要靠Promise

14:32.360 --> 14:33.360
邓哥呢看了个代码呢

14:33.360 --> 14:34.360
就有点受不了了

14:34.360 --> 14:36.360
邓哥是一个完美主义者

14:36.360 --> 14:37.360
他觉得把这个代码

14:37.360 --> 14:38.360
要穷心改造一下

14:38.360 --> 14:39.360
怎么改造

14:39.360 --> 14:40.360
只有一条出路

14:40.360 --> 14:41.360
就是Promise

14:41.360 --> 14:42.360
咱们来看一下

14:43.360 --> 14:44.360
Promise呢

14:44.360 --> 14:46.360
实际上有两块重要的知识

14:46.360 --> 14:49.360
一个呢是Promise规范

14:49.360 --> 14:51.360
一个呢是API

14:51.360 --> 14:53.360
那么我解释一下

14:53.360 --> 14:54.360
规范跟API之间

14:54.360 --> 14:55.360
是什么样的关系

14:55.360 --> 14:56.360
首先是规范

14:56.360 --> 14:58.360
规范的话就是一个人

14:58.360 --> 15:00.360
在那里不停的嗶嗶

15:00.360 --> 15:01.360
不停的说

15:01.360 --> 15:02.360
他啥事不说

15:02.360 --> 15:03.360
就说你应该这样子写

15:03.360 --> 15:04.360
你应该这样子才对

15:04.360 --> 15:05.360
那就在那里说

15:05.360 --> 15:07.360
就让有点像裁判那种感觉

15:07.360 --> 15:08.360
对吧

15:08.360 --> 15:10.360
那么API是什么呢

15:10.360 --> 15:11.360
API就是根据规范

15:11.360 --> 15:12.360
去实现

15:12.360 --> 15:14.360
把它真的把它做出来

15:14.360 --> 15:15.360
我举个例子

15:15.360 --> 15:16.360
比方说我说

15:16.360 --> 15:18.360
我就随便瞎说

15:18.360 --> 15:19.360
我说

15:19.360 --> 15:21.360
以后呢所有的对象

15:21.360 --> 15:24.360
属性都必须要用名词

15:24.360 --> 15:26.360
作为属性名字

15:26.360 --> 15:29.360
方法必须要用东词

15:29.360 --> 15:30.360
作为方法

15:30.360 --> 15:31.360
这就是啥

15:31.360 --> 15:32.360
这是规范

15:32.360 --> 15:33.360
我写代码吧

15:33.360 --> 15:34.360
我没有写

15:34.360 --> 15:35.360
一行代码都没有写

15:35.360 --> 15:36.360
我只是BB

15:36.360 --> 15:37.360
我跟你说

15:37.360 --> 15:38.360
你应该这个样子

15:38.360 --> 15:39.360
这叫规范

15:39.360 --> 15:40.360
如果说一个规范

15:40.360 --> 15:42.360
得到大家的认同的话

15:42.360 --> 15:43.360
那么它就形成了一个

15:43.360 --> 15:45.360
比较有共识的规范

15:45.360 --> 15:47.360
那什么叫实现呢

15:47.360 --> 15:48.360
我之后写对象的时候

15:48.360 --> 15:50.360
我真正按照规范去写

15:50.360 --> 15:51.360
我写一个对象的时候

15:51.360 --> 15:52.360
比方优兆

15:52.360 --> 15:53.360
他有那个姓名

15:53.360 --> 15:54.360
那我就写NAME

15:54.360 --> 15:55.360
对吧

15:55.360 --> 15:56.360
然后打招呼

15:56.360 --> 15:57.360
我就写 say hello

15:57.360 --> 15:59.360
我是不是说满足这个规范

15:59.360 --> 16:01.360
我写具体写代码的时候

16:01.360 --> 16:03.360
我满足这个规范

16:03.360 --> 16:04.360
那么我就叫实现规范

16:04.360 --> 16:05.360
没了意思吧

16:05.360 --> 16:06.360
所以说我们

16:06.360 --> 16:08.360
首先啊

16:08.360 --> 16:11.360
要了解它的规范是什么

16:11.360 --> 16:13.360
它到底

16:13.360 --> 16:14.360
想整

16:14.360 --> 16:16.360
希望怎么来解决这个问题

16:16.360 --> 16:18.360
然后再去了解

16:18.360 --> 16:20.360
ES6的Promise API

16:20.360 --> 16:22.360
就是它给你提供了哪些对象

16:22.360 --> 16:24.360
给你提供了哪些方法

16:24.360 --> 16:26.360
它怎么去实现规范的

16:26.360 --> 16:28.360
重点是规范

16:28.360 --> 16:29.360
规范了解清楚了

16:29.360 --> 16:31.360
APN其实并不复杂

16:31.360 --> 16:33.360
好,咱们来看一下规范

16:34.360 --> 16:36.360
Promise到底是一个什么东西呢

16:36.360 --> 16:39.360
如果说你英文比较好的话

16:39.360 --> 16:41.360
如果说一些商务英语比较好的话

16:41.360 --> 16:42.360
Promise这个词

16:42.360 --> 16:45.360
它经常出现在一些合同里边

16:46.360 --> 16:49.360
就是大家的一个约定

16:49.360 --> 16:52.360
如果说这个事情

16:52.360 --> 16:53.360
怎么样怎么样

16:53.360 --> 16:56.360
那我们就与行一个什么样的责任

16:56.360 --> 16:57.360
这就是一个Promise

16:57.360 --> 16:59.360
Promise就喊到这个意思

16:59.360 --> 17:01.360
所以Promise这个词呢

17:01.360 --> 17:03.360
里面内部的含义表示的是

17:03.360 --> 17:04.360
如果怎么样怎么样

17:04.360 --> 17:06.360
我就怎么样怎么样

17:06.360 --> 17:07.360
它是一套

17:07.360 --> 17:10.360
专门处理异部场景的规范

17:10.360 --> 17:11.360
它能够有效的

17:11.360 --> 17:12.360
避免毁掉地位的产生

17:12.360 --> 17:13.360
它的作用

17:13.360 --> 17:15.360
它可以使我们的异部代码

17:15.360 --> 17:17.360
更加清晰、简洁、统一

17:17.360 --> 17:18.360
大家都用这种方式

17:18.360 --> 17:21.360
那么我们的所有异部代码

17:21.360 --> 17:23.360
都变得统一了

17:23.360 --> 17:25.360
它休息的方式基本上统一了

17:25.360 --> 17:27.360
那么这套规范最早

17:27.360 --> 17:29.360
还不是官方提出来的

17:29.360 --> 17:30.360
它最早是来自于社区

17:30.360 --> 17:32.360
就是一群前端开发者

17:32.360 --> 17:34.360
自己搞出来的东西

17:34.360 --> 17:37.360
他们把它称之为Promise A加规范

17:37.360 --> 17:38.360
为什么要加个加呢

17:38.360 --> 17:40.360
因为它一开始的名字

17:40.360 --> 17:42.360
一开始是一个Promise A规范

17:42.360 --> 17:44.360
很快就被抛弃掉了

17:44.360 --> 17:46.360
得到大家共同的

17:46.360 --> 17:48.360
认同的Promise A加规范

17:48.360 --> 17:49.360
这里有个超链接

17:49.360 --> 17:51.360
不过这里是有篇文章

17:51.360 --> 17:54.360
这就是Promise A加规范的原文

17:54.360 --> 17:55.360
它希望是什么样子

17:55.360 --> 17:56.360
希望一个任务

17:56.360 --> 17:57.360
一个异部任务

17:57.360 --> 17:59.360
应该是什么样子

17:59.360 --> 18:00.360
提供哪些函数

18:00.360 --> 18:02.360
哪些东西

18:02.360 --> 18:03.360
这是一个英文文章

18:03.360 --> 18:04.360
看上去还是有点老火的

18:04.360 --> 18:06.360
所以说

18:06.360 --> 18:07.360
将来它去慢慢谈吧

18:07.360 --> 18:09.360
现在我也不推荐大家去看

18:09.360 --> 18:10.360
英文比较好

18:10.360 --> 18:12.360
技术底子很好的话

18:12.360 --> 18:14.360
你可以尝试去看一看

18:14.360 --> 18:16.360
我的个人博客里边

18:16.360 --> 18:17.360
对他做了个翻译

18:17.360 --> 18:18.360
简单的翻译

18:18.360 --> 18:20.360
但是尽管我翻译出来

18:20.360 --> 18:21.360
可能还是很难理解

18:21.360 --> 18:23.360
因为他的比较抽象里边东西

18:23.360 --> 18:24.360
你不用去看他的

18:24.360 --> 18:26.360
听我讲就完事了

18:26.360 --> 18:27.360
这个规范出来之后

18:27.360 --> 18:28.360
很快就得到

18:28.360 --> 18:29.360
前端开发者的响应

18:29.360 --> 18:31.360
但是挺好的

18:31.360 --> 18:32.360
我们之后做异部处理

18:32.360 --> 18:34.360
都用它

18:34.360 --> 18:36.360
不光是

18:36.360 --> 18:37.360
咱们要用它

18:37.360 --> 18:39.360
很多那些第三方裤的作者

18:39.360 --> 18:40.360
他们也会

18:40.360 --> 18:41.360
也很多都响应了

18:41.360 --> 18:42.360
这个Promise

18:42.360 --> 18:43.360
一家规范

18:43.360 --> 18:44.360
总之大家都很认同

18:44.360 --> 18:45.360
那么他里边的

18:45.360 --> 18:47.360
主要规定是什么呢

18:47.360 --> 18:48.360
1234

18:48.360 --> 18:49.360
把这四点理解清楚

18:49.360 --> 18:50.360
他最核心的那种

18:50.360 --> 18:51.360
就理解清楚了

18:51.360 --> 18:52.360
然后首先

18:52.360 --> 18:53.360
第一个点

18:53.360 --> 18:55.360
他认为所有的异部场景

18:55.360 --> 18:57.360
什么叫异部场景

18:57.360 --> 18:59.360
就是有件事

18:59.360 --> 19:00.360
他一时半火

19:00.360 --> 19:02.360
拿不到结果

19:02.360 --> 19:03.360
这种事情很多

19:03.360 --> 19:04.360
比方说

19:04.360 --> 19:06.360
像我们平时用set time out

19:06.360 --> 19:07.360
等待一段时间

19:07.360 --> 19:09.360
才会发生某一件事

19:09.360 --> 19:10.360
或者是

19:10.360 --> 19:11.360
我们做网络的东西

19:11.360 --> 19:12.360
你们后面会学习网络

19:12.360 --> 19:13.360
我们要从网络中

19:13.360 --> 19:14.360
去拿一些东西

19:14.360 --> 19:16.360
拿一篇文章

19:16.360 --> 19:18.360
拿一些用户

19:18.360 --> 19:20.360
拿一个电影

19:20.360 --> 19:21.360
这些都是网络上的东西

19:21.360 --> 19:22.360
拿东西是不是需要时间

19:22.360 --> 19:24.360
它不是马上就能产生结果

19:24.360 --> 19:25.360
它要等一会

19:25.360 --> 19:26.360
它有一段时间

19:26.360 --> 19:27.360
中间一段时间

19:27.360 --> 19:29.360
这个时间还说不准

19:29.360 --> 19:30.360
比方说像邓哥发送

19:30.360 --> 19:32.360
表白短信

19:32.360 --> 19:33.360
那么他要等到

19:33.360 --> 19:34.360
那个对方女神

19:34.360 --> 19:35.360
回复了之后

19:35.360 --> 19:36.360
是不是才有结果

19:36.360 --> 19:37.360
不管是成功还是失败

19:37.360 --> 19:38.360
才有结果

19:38.360 --> 19:41.360
这些都是属于异部场景

19:41.360 --> 19:43.360
Promise A加他认为

19:43.360 --> 19:45.360
不管你是什么异部场景

19:45.360 --> 19:46.360
我们都可以把它看作

19:46.360 --> 19:48.360
是一个异部任务

19:48.360 --> 19:49.360
每个异部任务

19:49.360 --> 19:50.360
他认为

19:50.360 --> 19:53.360
应该表现为一个对象

19:53.360 --> 19:54.360
我们之前是不是

19:54.360 --> 19:55.360
没有这样做

19:55.360 --> 19:56.360
我的异部任务

19:56.360 --> 19:57.360
就写了一个函数

19:57.360 --> 19:59.360
没有做这种特殊处理

19:59.360 --> 20:00.360
他其实他认为

20:00.360 --> 20:01.360
每个异部任务

20:01.360 --> 20:03.360
应该表现为一个对象

20:03.360 --> 20:05.360
这个对象他称之为Promise对象

20:05.360 --> 20:06.360
也叫做任务对象

20:06.360 --> 20:07.360
先把这个概念理清楚

20:07.360 --> 20:10.360
所以说在Promise A加规范里边

20:10.360 --> 20:13.360
像刚才我们发送表白短信

20:13.360 --> 20:15.360
像我们要做一个远程登录

20:15.360 --> 20:16.360
到底登录成功了

20:16.360 --> 20:17.360
还是失败了

20:17.360 --> 20:19.360
我们要做个严实弹窗

20:19.360 --> 20:20.360
过一段时间

20:20.360 --> 20:22.360
那么事情才开始做

20:22.360 --> 20:25.360
这些都是属于异部任务

20:25.360 --> 20:27.360
他们每一个都应该表现

20:27.360 --> 20:29.360
成为一个对象

20:29.360 --> 20:32.360
我们刚才肯定是没有这样做

20:32.360 --> 20:33.360
这是第一个点

20:33.360 --> 20:34.360
第二个点

20:34.360 --> 20:36.360
每个任务对象

20:36.360 --> 20:38.360
他认为都应该有两个阶段

20:38.360 --> 20:39.360
三个状态

20:39.360 --> 20:40.360
他认为所有的异部任务

20:40.360 --> 20:41.360
甭管理是啥

20:41.360 --> 20:43.360
都应该是这个样子

20:43.360 --> 20:44.360
那么什么叫两个阶段

20:44.360 --> 20:45.360
下面一张图

20:45.360 --> 20:46.360
我们刚才说了

20:46.360 --> 20:47.360
不是每个任务

20:47.360 --> 20:49.360
是一个异部对象吗

20:49.360 --> 20:50.360
每个对象里边

20:50.360 --> 20:52.360
他有两个阶段

20:52.360 --> 20:54.360
一个叫做未决

20:54.360 --> 20:55.360
一个叫做已决

20:55.360 --> 20:57.360
啥叫未决

20:57.360 --> 20:59.360
这个任务还没完

20:59.360 --> 21:01.360
还没有产生结果

21:01.360 --> 21:03.360
你向女神发了一个消息

21:03.360 --> 21:05.360
对方还没有回复

21:05.360 --> 21:07.360
这个任务就还没完

21:07.360 --> 21:08.360
还没有一个结果

21:08.360 --> 21:10.360
这叫未决

21:10.360 --> 21:11.360
什么叫已决

21:11.360 --> 21:13.360
这个任务结束了

21:13.360 --> 21:15.360
别人给你回那个消息了

21:15.360 --> 21:18.360
甭管他是同意还是拒绝

21:18.360 --> 21:20.360
都叫已决

21:20.360 --> 21:22.360
已决有了一个结果

21:22.360 --> 21:24.360
有了一个确定的结果

21:24.360 --> 21:25.360
他一共

21:25.360 --> 21:26.360
每个任务

21:26.360 --> 21:27.360
他都认为是有两个阶段

21:27.360 --> 21:29.360
比方说我们做远程登陆

21:29.360 --> 21:31.360
我把账号密码发到互联网上去

21:31.360 --> 21:33.360
发到远程去

21:33.360 --> 21:35.360
你们以后会学习

21:35.360 --> 21:37.360
那么这就是未决

21:37.360 --> 21:38.360
对方还没有

21:38.360 --> 21:39.360
远程的服务器那边

21:39.360 --> 21:40.360
还没有告诉我结果

21:40.360 --> 21:41.360
我到底登陆成功了

21:41.360 --> 21:42.360
还是失败了

21:42.360 --> 21:43.360
我不知道

21:43.360 --> 21:45.360
所以这个时候就是未决

21:45.360 --> 21:47.360
突然

21:47.360 --> 21:48.360
服务器那边告诉我了

21:48.360 --> 21:49.360
你登陆成功了

21:49.360 --> 21:51.360
那就是已决

21:51.360 --> 21:53.360
服务器告诉你登陆失败了

21:53.360 --> 21:54.360
还是已决

21:54.360 --> 21:55.360
总之有了结果

21:55.360 --> 21:56.360
服务器告诉你

21:56.360 --> 21:57.360
他没有告诉你

21:57.360 --> 21:58.360
网络统计失败了

21:58.360 --> 21:59.360
发不出去

21:59.360 --> 22:01.360
网断开了

22:01.360 --> 22:02.360
他还是已决

22:02.360 --> 22:03.360
他总之有了结果

22:03.360 --> 22:04.360
对方还有了一个确定的结果

22:04.360 --> 22:06.360
这叫做已决

22:06.360 --> 22:08.360
每个任务分为两个阶段

22:08.360 --> 22:09.360
未决和已决

22:09.360 --> 22:11.360
他的单词叫做unsettled

22:11.360 --> 22:13.360
和settled

22:13.360 --> 22:15.360
有三个状态

22:15.360 --> 22:17.360
首先就是未决的时候

22:17.360 --> 22:19.360
就是这个任务还在进行中

22:19.360 --> 22:20.360
还不知道结果

22:20.360 --> 22:21.360
那么这个状态

22:21.360 --> 22:22.360
他一定是挂起

22:22.360 --> 22:24.360
叫pending

22:24.360 --> 22:26.360
状态的单词也要记住

22:26.360 --> 22:28.360
这个面试是容易考

22:28.360 --> 22:30.360
天津

22:30.360 --> 22:31.360
然后

22:31.360 --> 22:33.360
如果说这个任务

22:33.360 --> 22:34.360
已决了有了结果

22:34.360 --> 22:35.360
有结果的话

22:35.360 --> 22:36.360
要么就成功

22:36.360 --> 22:38.360
要么就失败

22:38.360 --> 22:39.360
比方说

22:39.360 --> 22:42.360
女生发送表白短信

22:42.360 --> 22:44.360
女生那边回复了

22:44.360 --> 22:45.360
同意

22:45.360 --> 22:46.360
那就成功了

22:46.360 --> 22:47.360
女生能够回复

22:47.360 --> 22:48.360
不同意

22:48.360 --> 22:49.360
拒绝了

22:49.360 --> 22:50.360
那就失败

22:50.360 --> 22:51.360
任务总会有这么一个

22:51.360 --> 22:52.360
确定的结果

22:52.360 --> 22:53.360
要么成功

22:53.360 --> 22:54.360
要么失败

22:54.360 --> 22:55.360
成功了叫做

22:55.360 --> 22:56.360
Fulfilled

22:56.360 --> 22:57.360
要完成状态

22:57.360 --> 22:58.360
失败了叫做

22:58.360 --> 23:00.360
Jaggedy的拒绝状态

23:00.360 --> 23:01.360
每一个任务

23:01.360 --> 23:02.360
它都是这样子

23:04.360 --> 23:05.360
好

23:05.360 --> 23:06.360
那么我们根据

23:06.360 --> 23:08.360
咱们的常识

23:09.360 --> 23:10.360
当然也是Promise

23:10.360 --> 23:11.360
A加规范里面

23:11.360 --> 23:13.360
规定的内容

23:13.360 --> 23:14.360
他说

23:14.360 --> 23:16.360
有这么三个点

23:16.360 --> 23:17.360
要注意

23:17.360 --> 23:18.360
一个任务

23:18.360 --> 23:19.360
它一定是

23:19.360 --> 23:21.360
从未决变到已决

23:21.360 --> 23:23.360
它不能立向行使

23:23.360 --> 23:25.360
它不能先有结果

23:25.360 --> 23:27.360
然后再变成挂起

23:27.360 --> 23:28.360
再变成进行中

23:28.360 --> 23:29.360
那就时间倒流了

23:29.360 --> 23:30.360
对吧

23:30.360 --> 23:31.360
我们所有的事情

23:31.360 --> 23:32.360
都是一个

23:32.360 --> 23:33.360
从一个不确定的

23:33.360 --> 23:34.360
变成一个确定的

23:34.360 --> 23:35.360
对不对

23:35.360 --> 23:36.360
所以说

23:36.360 --> 23:37.360
它不能立行

23:37.360 --> 23:38.360
你不能说

23:38.360 --> 23:39.360
从已决到未决

23:39.360 --> 23:41.360
它阶段的变化

23:41.360 --> 23:43.360
它一定是从未决到已决

23:43.360 --> 23:45.360
那么阶段如此

23:46.360 --> 23:48.360
状态仍然如此

23:48.360 --> 23:51.360
任务总是从挂起状态

23:51.360 --> 23:52.360
完成

23:52.360 --> 23:53.360
或者是失败

23:53.360 --> 23:55.360
无法立行

23:55.360 --> 23:57.360
因为这个任务已经结束了

23:57.360 --> 23:59.360
女生那边已经给你回复了

23:59.360 --> 24:00.360
同意了

24:00.360 --> 24:01.360
你们就站一起来呗

24:01.360 --> 24:03.360
你不能突然有一天

24:03.360 --> 24:04.360
又反悔回去了

24:04.360 --> 24:05.360
反悔可不可以

24:05.360 --> 24:06.360
可以

24:06.360 --> 24:07.360
你发出一个新的任务

24:07.360 --> 24:08.360
对吧

24:08.360 --> 24:09.360
叫分手任务

24:10.360 --> 24:11.360
但是

24:11.360 --> 24:12.360
这个事已经确定下来了

24:12.360 --> 24:13.360
之前的表白

24:13.360 --> 24:14.360
那个任务

24:14.360 --> 24:15.360
已经结束了

24:15.360 --> 24:16.360
它时间不能倒流

24:16.360 --> 24:18.360
不能立行

24:18.360 --> 24:19.360
同时

24:19.360 --> 24:20.360
由于时间不能掉倒流

24:20.360 --> 24:21.360
历史不能改写

24:21.360 --> 24:22.360
所以说一旦任务

24:22.360 --> 24:24.360
确定下来之后

24:24.360 --> 24:25.360
要么完成

24:25.360 --> 24:26.360
要么失败

24:26.360 --> 24:28.360
这个状态就被固定下来了

24:28.360 --> 24:30.360
永远无法再被改编了

24:30.360 --> 24:31.360
比方说一个任务

24:31.360 --> 24:32.360
女生那边

24:32.360 --> 24:33.360
已经回到一个消息了

24:33.360 --> 24:34.360
她拒绝你了

24:35.360 --> 24:38.360
她不可能再重新变成同意

24:38.360 --> 24:39.360
不对

24:40.360 --> 24:41.360
那万一

24:41.360 --> 24:43.360
我只要舔她舔得舒服了

24:43.360 --> 24:45.360
那是不是就变成同意了

24:45.360 --> 24:47.360
那是一个新的任务

24:47.360 --> 24:48.360
同学们

24:48.360 --> 24:49.360
那是新的任务了

24:49.360 --> 24:50.360
你开启一个新的任务

24:50.360 --> 24:51.360
继续舔

24:51.360 --> 24:52.360
对不对

24:52.360 --> 24:53.360
那么就有可能成功

24:53.360 --> 24:54.360
但是新的任务

24:54.360 --> 24:55.360
跟这个任务已经结束了

24:55.360 --> 24:57.360
这个任务已经没关系了

24:57.360 --> 24:58.360
这个任务别人已经

24:58.360 --> 24:59.360
给你发了消息了

24:59.360 --> 25:00.360
回了消息了

25:00.360 --> 25:01.360
就已经是拒绝方法了

25:01.360 --> 25:02.360
没了意思

25:03.360 --> 25:05.360
那么这就是这三点

25:06.360 --> 25:07.360
我感觉我今天讲的

25:07.360 --> 25:08.360
有点

25:08.360 --> 25:09.360
颜色有点重

25:11.360 --> 25:13.360
我说录博嘛

25:15.360 --> 25:16.360
这就是

25:16.360 --> 25:17.360
这第二个点

25:17.360 --> 25:18.360
每个任务对象

25:18.360 --> 25:19.360
两个阶段

25:19.360 --> 25:20.360
三个状态

25:21.360 --> 25:22.360
既然那么看第三点

25:25.570 --> 25:26.570
我们把

25:26.570 --> 25:27.570
因为我们的状态转换

25:27.570 --> 25:28.570
我们已经清楚了

25:28.570 --> 25:29.570
它一个任务

25:29.570 --> 25:31.570
一定是从挂起

25:31.570 --> 25:32.570
到完成

25:32.570 --> 25:33.570
要么就是从挂起

25:33.570 --> 25:34.570
到失败

25:34.570 --> 25:36.570
没有别的情况了对吧

25:36.570 --> 25:37.570
它不可能从完成到失败

25:37.570 --> 25:38.570
也不可能从完成

25:38.570 --> 25:39.570
到失败到完成

25:40.570 --> 25:41.570
刚才说过了

25:41.570 --> 25:42.570
也不可能从完成

25:42.570 --> 25:43.570
到挂起

25:43.570 --> 25:44.570
也不可能从失败到挂起

25:44.570 --> 25:45.570
只能从挂起到完成

25:45.570 --> 25:46.570
从挂起到失败

25:46.570 --> 25:47.570
只能这样子

25:48.570 --> 25:49.570
所以说呢

25:50.570 --> 25:52.570
我们把从完成到

25:52.570 --> 25:54.570
从挂起到完成这个过程

25:54.570 --> 25:56.570
称之为result

25:56.570 --> 25:57.570
result什么意思

25:57.570 --> 25:58.570
OK了

25:58.570 --> 25:59.570
解决了

26:00.570 --> 26:01.570
这就是result

26:02.570 --> 26:04.570
从挂起到失败

26:04.570 --> 26:05.570
我们称之为reject

26:05.570 --> 26:06.570
拒绝

26:07.570 --> 26:08.570
如果说一个状态

26:08.570 --> 26:09.570
从挂起变成失败

26:09.570 --> 26:10.570
这个过程

26:10.570 --> 26:11.570
称之为拒绝

26:12.570 --> 26:13.570
我们凭说result

26:13.570 --> 26:14.570
什么意思

26:14.570 --> 26:15.570
就指的是

26:15.570 --> 26:16.570
我想把这个任务

26:16.570 --> 26:17.570
从挂起变成完成

26:17.570 --> 26:18.570
我们说reject

26:18.570 --> 26:19.570
是什么意思

26:19.570 --> 26:20.570
就是想把这个任务

26:20.570 --> 26:21.570
从挂起变成失败

26:24.570 --> 26:26.570
然后还有后面的一个点

26:26.570 --> 26:27.570
后面一句话

26:27.570 --> 26:28.570
任务完成的时候

26:28.570 --> 26:30.570
可能会有一个相关数据

26:31.570 --> 26:32.570
你看result的时候

26:32.570 --> 26:33.570
可能会有一个

26:33.570 --> 26:35.570
相关的数据

26:35.570 --> 26:36.570
那么什么意思呢

26:36.570 --> 26:37.570
怎么能理解这个呢

26:38.570 --> 26:39.570
比方说我登陆成功了

26:40.570 --> 26:41.570
表示完成了

26:41.570 --> 26:42.570
这个任务完成了

26:42.570 --> 26:43.570
登陆成功了

26:43.570 --> 26:45.570
他可能会给我一个

26:46.570 --> 26:47.570
用户对象

26:47.570 --> 26:48.570
你登陆成功的是哪个用户

26:49.570 --> 26:50.570
那么这个用户的姓名是什么

26:50.570 --> 26:51.570
你称是什么

26:51.570 --> 26:52.570
密码是啥

26:53.570 --> 26:54.570
登陆的时间

26:54.570 --> 26:55.570
注册的时间

26:55.570 --> 26:56.570
用户的头像

26:56.570 --> 26:57.570
一大堆信息会给我

26:57.570 --> 26:58.570
这就是他的相关数据

26:59.570 --> 27:00.570
比方说我们刚才这个例子

27:00.570 --> 27:01.570
刚才这个例子

27:01.570 --> 27:02.570
成功之后

27:02.570 --> 27:04.570
是不是有个女神的回复消息

27:05.570 --> 27:07.570
这就是成功的相关数据

27:08.570 --> 27:09.570
他可以有

27:09.570 --> 27:10.570
也可以没有

27:10.570 --> 27:12.570
他有可能会有这么一个

27:12.570 --> 27:13.570
成功的相关数据

27:13.570 --> 27:14.570
那有没有同学说

27:14.570 --> 27:16.570
那有没有可能会有多个呢

27:16.570 --> 27:17.570
有可能会有多个

27:17.570 --> 27:18.570
他也工装成对象

27:20.570 --> 27:21.570
那么这就是成功的

27:21.570 --> 27:22.570
有可能的话

27:22.570 --> 27:23.570
可能会有个相关数据

27:23.570 --> 27:25.570
比方说你白米长炮

27:25.570 --> 27:26.570
是一个一步任务

27:26.570 --> 27:27.570
他需要一段时间

27:27.570 --> 27:29.570
到了终点的时候他成功了

27:30.570 --> 27:31.570
成功了之后

27:31.570 --> 27:32.570
成功的时候

27:32.570 --> 27:33.570
他是不是有一个相关数据

27:33.570 --> 27:34.570
你跑了多少时间

27:35.570 --> 27:36.570
这就是

27:36.570 --> 27:37.570
成功的时候

27:37.570 --> 27:39.570
可能会有一些相关的数据

27:39.570 --> 27:41.570
任务失败的时候

27:41.570 --> 27:42.570
他可能会有一个失败的原因

27:43.570 --> 27:44.570
比方说

27:44.570 --> 27:46.570
跟女生他邀请女生拒绝了

27:46.570 --> 27:47.570
那么可能会有个拒绝的原因

27:47.570 --> 27:49.570
那么在我们这个场景里边

27:49.570 --> 27:50.570
他也是一个支付串

27:50.570 --> 27:52.570
他告诉你女生的回复消息

27:52.570 --> 27:54.570
或者说你白米长炮

27:54.570 --> 27:55.570
白米短炮

27:55.570 --> 27:57.570
白米短炮跑到中途

27:57.570 --> 27:59.570
突然扭伤了

27:59.570 --> 28:00.570
跑不下去了

28:00.570 --> 28:02.570
这个任务没法进行下去了

28:02.570 --> 28:03.570
这个任务就失败了

28:03.570 --> 28:04.570
失败的原因是什么

28:04.570 --> 28:05.570
脚扭伤了

28:05.570 --> 28:06.570
对吧

28:06.570 --> 28:08.570
所以我们在把任务

28:08.570 --> 28:10.570
从刮起到失败的时候

28:10.570 --> 28:12.570
拒绝叫做这个程

28:12.570 --> 28:13.570
这个过程

28:13.570 --> 28:14.570
那么拒绝的过程中

28:14.570 --> 28:16.570
可能会带一个失败的原因

28:16.570 --> 28:17.570
最终

28:17.570 --> 28:19.570
他会把无论是你成功

28:19.570 --> 28:20.570
还是失败

28:20.570 --> 28:21.570
他都会把相关的数据

28:21.570 --> 28:22.570
或者是相关的原因

28:22.570 --> 28:24.570
进入到这个状态里边

28:25.570 --> 28:26.570
我们到时候

28:26.570 --> 28:27.570
看这个任务

28:27.570 --> 28:28.570
这个任务成功了

28:28.570 --> 28:29.570
他成功了相关数据是啥

28:29.570 --> 28:30.570
就可以拿得到

28:30.570 --> 28:32.570
这个任务已经失败了

28:32.570 --> 28:33.570
白米短炮

28:33.570 --> 28:34.570
为什么失败了呢

28:34.570 --> 28:35.570
我可以拿到这个任务的

28:35.570 --> 28:36.570
失败的原因

28:37.570 --> 28:38.570
对吧

28:38.570 --> 28:39.570
你看所有的一部任务

28:39.570 --> 28:40.570
都是在做

28:40.570 --> 28:42.570
都是可以用这种模型

28:42.570 --> 28:44.570
来去套的

28:44.570 --> 28:45.570
好

28:45.570 --> 28:46.570
最后一个点

28:46.570 --> 28:47.570
第四个点

28:47.570 --> 28:48.570
这个点你看懂了

28:48.570 --> 28:49.570
那么Promise

28:49.570 --> 28:50.570
最核心的东西你就看懂了

28:50.570 --> 28:52.570
看懂了最核心的东西

28:52.570 --> 28:53.570
你后面就简单多了

28:53.570 --> 28:55.570
下一个点

28:55.570 --> 28:57.570
我们可以针对任务

28:57.570 --> 28:59.570
进行后续处理

28:59.570 --> 29:01.570
针对完成状态的

29:01.570 --> 29:02.570
后续处理的

29:02.570 --> 29:04.570
我们称之为unful filled

29:04.570 --> 29:06.570
针对失败的后续处理

29:06.570 --> 29:07.570
我们称之为unfulfilled

29:07.570 --> 29:08.570
什么意思

29:09.570 --> 29:11.570
就是这个任务完成之后

29:12.570 --> 29:14.570
任务虽然完了

29:14.570 --> 29:16.570
但是我可能还有一些别的事情

29:16.570 --> 29:17.570
举个例子

29:17.570 --> 29:19.570
比方说我们这里表白

29:20.570 --> 29:21.570
他任务完了

29:21.570 --> 29:22.570
女神那边是不是回复了

29:22.570 --> 29:24.570
那么这个任务就完成了

29:25.570 --> 29:26.570
他统一了

29:26.570 --> 29:28.570
任务就完成了

29:28.570 --> 29:29.570
完成了之后

29:29.570 --> 29:30.570
我们可能还有一些后续处理

29:30.570 --> 29:32.570
比方说我怎么后续处理

29:32.570 --> 29:33.570
任务完成之后

29:33.570 --> 29:36.570
我还把这个女神的回复输出

29:36.570 --> 29:37.570
对吧

29:37.570 --> 29:39.570
我可能要写到日记里边

29:39.570 --> 29:40.570
记录下来

29:40.570 --> 29:41.570
这激动人心的一刻

29:41.570 --> 29:42.570
对吧

29:42.570 --> 29:44.570
接下来或者是我们后边还需要

29:44.570 --> 29:45.570
去买电影票

29:45.570 --> 29:46.570
对不对

29:46.570 --> 29:48.570
然后去看场电影一个会

29:48.570 --> 29:49.570
或者吃个饭

29:49.570 --> 29:51.570
是不是有些后续处理

29:51.570 --> 29:52.570
对不对

29:52.570 --> 29:53.570
那么这里就是

29:53.570 --> 29:54.570
我们把这个后续处理的

29:54.570 --> 29:55.570
叫做unfulfilled

29:56.570 --> 29:57.570
那么后续处理的时候

29:57.570 --> 30:00.570
他可以拿到完成状态里边的

30:00.570 --> 30:01.570
相关数据

30:01.570 --> 30:02.570
你看这

30:02.570 --> 30:04.570
我在做后续处理的时候

30:04.570 --> 30:05.570
后续处理我这里做的很简单

30:05.570 --> 30:07.570
就是输出女神的回复

30:07.570 --> 30:10.570
是不是可以拿到完成状态的

30:10.570 --> 30:11.570
相关数据

30:11.570 --> 30:12.570
这是不是完成状态的相关数据

30:12.570 --> 30:14.570
我是不是可以拿到

30:14.570 --> 30:15.570
对吧

30:15.570 --> 30:16.570
好

30:16.570 --> 30:17.570
那么如果说你失败了

30:17.570 --> 30:19.570
失败的时候

30:19.570 --> 30:21.570
我也可以进行后续处理

30:21.570 --> 30:22.570
比方说你看

30:22.570 --> 30:23.570
我这里失败了

30:23.570 --> 30:24.570
是不是我这个函数

30:24.570 --> 30:25.570
也在做后续处理

30:25.570 --> 30:26.570
那么这个函数

30:26.570 --> 30:29.570
就相当于是这里的unrejected

30:29.570 --> 30:30.570
当失败的时候

30:30.570 --> 30:31.570
我做了后续处理

30:31.570 --> 30:32.570
那么在失败的时候

30:32.570 --> 30:34.570
我可以拿到失败的原因

30:34.570 --> 30:35.570
这是女神的回复

30:35.570 --> 30:36.570
我们把女神的回复

30:36.570 --> 30:38.570
作为拒绝的原因

30:38.570 --> 30:39.570
我们可以拿到

30:39.570 --> 30:41.570
可能会做一些相关处理

30:41.570 --> 30:42.570
没什么意思吧

30:42.570 --> 30:43.570
好

30:43.570 --> 30:45.570
那么这就是整个Promise

30:45.570 --> 30:47.570
A加规范的模型

30:47.570 --> 30:49.570
你把这张图好好再去过一遍

30:49.570 --> 30:50.570
头脑里面好好过一遍

30:50.570 --> 30:51.570
看清楚这里面

30:51.570 --> 30:52.570
每一个点

30:52.570 --> 30:53.570
到底表达的是什么意思

30:53.570 --> 30:55.570
好好去想清楚

30:55.570 --> 30:56.570
好

30:56.570 --> 30:57.570
想清楚之后

30:57.570 --> 30:58.570
我们再来看

30:58.570 --> 30:59.570
它的API

30:59.570 --> 31:01.570
API是什么意思呢

31:01.570 --> 31:02.570
就是用代码的形式

31:02.570 --> 31:04.570
把上面东西搞一遍

31:04.570 --> 31:05.570
弄一遍

31:05.570 --> 31:07.570
在ES6里面

31:07.570 --> 31:08.570
它提出了

31:08.570 --> 31:09.570
它给你提供了一个

31:09.570 --> 31:10.570
构造函数叫Promise

31:10.570 --> 31:12.570
就是为了实现上面这张图

31:12.570 --> 31:15.570
它满足PromiseA加规范

31:15.570 --> 31:18.570
那你说不用为ES6的东西

31:18.570 --> 31:19.570
我们自己写一套

31:19.570 --> 31:21.570
能不能写出来的

31:21.570 --> 31:22.570
能写得出来

31:22.570 --> 31:24.570
只是里面细节很多

31:24.570 --> 31:25.570
比较复杂而已

31:25.570 --> 31:27.570
现在的浏览器里面

31:27.570 --> 31:29.570
都会支持有这么一个Promise

31:29.570 --> 31:30.570
你看浏览器

31:30.570 --> 31:36.200
我们随便打开一个Promise

31:37.200 --> 31:39.200
你看是不是一个Promise

31:39.200 --> 31:40.200
构造函数

31:40.200 --> 31:41.200
那么它实际上

31:41.200 --> 31:43.200
就是给你实现了这么一套东西

31:43.200 --> 31:44.200
那具体怎么来用它

31:44.200 --> 31:46.200
又如何去跟上面的这张图

31:46.200 --> 31:47.200
来对应

31:47.200 --> 31:49.200
我们来看一下下面的代码

31:49.200 --> 31:50.200
我把这个代码

31:50.200 --> 31:51.200
我把这张图

31:51.200 --> 31:55.660
几个停

31:55.660 --> 31:57.660
好 这边我把它贴出来

31:57.660 --> 31:58.660
贴到这

31:58.660 --> 32:01.660
这样子我们方便我们来对照

32:01.660 --> 32:03.660
好 就放这吧

32:03.660 --> 32:05.660
好 那咱们来看一下

32:05.660 --> 32:07.660
这个代码

32:07.660 --> 32:11.660
这里我们通过NewPromise

32:11.660 --> 32:13.660
是不是创建了一个

32:13.660 --> 32:14.660
通过一个构造函数

32:14.660 --> 32:17.660
它就会创建一个Promise对象

32:17.660 --> 32:20.660
这个Promise对象就是这个东西

32:20.660 --> 32:21.660
好

32:21.660 --> 32:22.660
那么一开始

32:22.660 --> 32:23.660
创建了那个Promise对象

32:23.660 --> 32:26.660
它的状态一定是平底

32:26.660 --> 32:29.660
咱们怎么来看到这一点呢

32:29.660 --> 32:32.660
先让我们来写个代码

32:32.660 --> 32:34.660
二了解

32:34.660 --> 32:35.660
好 我们这里呢

32:35.660 --> 32:39.660
来一个NewPromise对象

32:39.660 --> 32:41.660
然后来输出一下这个Promise

32:41.660 --> 32:43.660
你看它的状态

32:43.660 --> 32:48.100
它会打印出一个状态

32:48.100 --> 32:50.100
它里边必须要传一个函数

32:50.100 --> 32:52.100
那我就随便传一个函数吧

32:52.100 --> 32:53.100
以后来说这个函数

32:53.100 --> 32:54.100
这个函数啥意思

32:54.100 --> 32:56.100
我先随便传一个函数

32:56.100 --> 32:57.100
好 运行

32:57.100 --> 32:59.100
你看它的状态是不是平底

32:59.100 --> 33:00.100
它告诉你

33:00.100 --> 33:02.100
目前这个NewPromise

33:02.100 --> 33:05.100
就是创建了一个Promise对象

33:05.100 --> 33:07.100
我就在这里给大家解释吧

33:07.100 --> 33:08.100
直接看代码

33:08.100 --> 33:09.100
这个更代码的话

33:09.100 --> 33:11.100
可能一下子信息量太大了

33:11.100 --> 33:12.100
我在这里解释

33:12.100 --> 33:13.100
另外一个Promise

33:13.100 --> 33:14.100
里边会传一个函数

33:14.100 --> 33:16.100
这个函数我一会解释

33:16.100 --> 33:18.100
那么这就是创建了一个异部任务

33:18.100 --> 33:19.100
有个异部任务产生了

33:19.100 --> 33:21.100
可能是一个表白任务

33:21.100 --> 33:22.100
可能是一个登陆任务

33:22.100 --> 33:23.100
我也不知道是啥

33:23.100 --> 33:25.100
那么反正就是产生了一个异部任务

33:25.100 --> 33:26.100
这个任务的一开始状态

33:26.100 --> 33:27.100
是不是平底

33:27.100 --> 33:29.100
是不是跟我们之前说的是一样的

33:29.100 --> 33:30.100
任务总是一开始

33:30.100 --> 33:32.100
总是处于位决阶段

33:32.100 --> 33:33.100
这个任务到底什么状态

33:33.100 --> 33:34.100
我不知道

33:34.100 --> 33:36.100
就是还没有结果

33:36.100 --> 33:38.100
它目前是挂起状态

33:38.100 --> 33:39.100
对吧

33:39.100 --> 33:40.100
这个解释清楚了吧

33:40.100 --> 33:42.100
好 那么这个任务

33:42.100 --> 33:44.100
它到底怎么进行呢

33:44.100 --> 33:46.100
就是靠了这个函数

33:46.100 --> 33:48.100
这个函数会被立即执行

33:48.100 --> 33:50.100
我们在这里输出一下

33:50.100 --> 33:52.100
立即执行

33:52.100 --> 33:54.100
开函数

33:54.100 --> 33:56.100
对你传的这个函数进去

33:56.100 --> 33:58.100
它会立刻把这个函数进行执行

33:58.100 --> 34:00.100
你看这个函数是不是得得到执行了

34:00.100 --> 34:02.100
这个函数的执行过程

34:02.100 --> 34:04.100
就是用来描述任务的

34:04.100 --> 34:06.100
比方说吧

34:06.100 --> 34:07.100
我举个例子

34:07.100 --> 34:09.100
我要

34:09.100 --> 34:11.100
我要进行百米长炮

34:11.100 --> 34:13.100
那么我们这里就输出

34:13.100 --> 34:15.100
我就用一个魔力吧

34:15.100 --> 34:18.100
开始百米短炮

34:18.100 --> 34:21.100
然后呢跑速是需要一段时间

34:21.100 --> 34:22.100
那么我们这里比方说

34:22.100 --> 34:24.100
我就set him out

34:24.100 --> 34:29.380
我就得到一个随机的时间吧

34:29.380 --> 34:31.380
得到一个随机的时间

34:31.380 --> 34:33.380
Mass

34:33.380 --> 34:35.380
原来得乘以

34:35.380 --> 34:37.380
5秒钟吧

34:37.380 --> 34:40.880
然后呢把它小数取掉

34:40.880 --> 34:45.880
就随便随机产生一个时间

34:45.880 --> 34:47.880
好然后呢我们又set him out

34:47.880 --> 34:53.340
Duration

34:53.340 --> 34:55.340
那魔力啊都是魔力

34:55.340 --> 34:56.340
开始百米短炮

34:56.340 --> 34:58.340
然后呢隔了一段时间过后

34:58.340 --> 35:00.340
短炮结束

35:00.340 --> 35:02.340
短炮结束

35:02.340 --> 35:03.340
你看我们这段大码

35:03.340 --> 35:04.340
是不是在描述这个任务啊

35:04.340 --> 35:06.340
这个任务他整个过程是什么

35:06.340 --> 35:08.340
先做什么再做什么再做什么

35:08.340 --> 35:10.340
是不是就在这里描述

35:10.340 --> 35:12.340
这个函数是用来做什么的

35:12.340 --> 35:14.340
就是用来描述这个任务的过程

35:14.340 --> 35:16.340
比方说刚才登革表白

35:16.340 --> 35:17.340
一开始要做什么

35:17.340 --> 35:18.340
发生这个消息发生这个消息

35:18.340 --> 35:20.340
那么这些代码都应该写到

35:20.340 --> 35:22.340
这个函数里面

35:22.340 --> 35:24.340
他用来描述任务

35:24.340 --> 35:25.340
你创建一个任务

35:25.340 --> 35:26.340
这个任务的过程是什么

35:26.340 --> 35:27.340
在这里描述

35:27.340 --> 35:29.340
这个函数会被立即执行

35:29.340 --> 35:32.340
看一下

35:32.340 --> 35:34.340
一段时间过后短炮结束了

35:34.340 --> 35:35.340
对吧

35:35.340 --> 35:37.340
这就是用来描述任务的过程了

35:37.340 --> 35:39.340
好那么接下来

35:39.340 --> 35:41.340
现在有个问题就是

35:41.340 --> 35:43.340
当任务进行到某一个点的时候

35:43.340 --> 35:45.340
他可能就结束了

35:45.340 --> 35:46.340
我怎么样呢

35:46.340 --> 35:48.340
才能表示把这个任务

35:48.340 --> 35:50.340
从未决

35:50.340 --> 35:52.340
把它变成已决

35:52.340 --> 35:53.340
具体来说

35:53.340 --> 35:55.340
我怎么把它从挂起变成完成

35:55.340 --> 35:58.340
怎么样他把它从挂起变成失败呢

35:58.340 --> 36:00.340
比方说这里短炮结束了

36:01.340 --> 36:02.340
比方说我这个任务

36:02.340 --> 36:03.340
他就没有失败

36:03.340 --> 36:05.340
他一定是完成的

36:05.340 --> 36:07.340
那我怎么样来表示

36:07.340 --> 36:08.340
表示说

36:08.340 --> 36:10.340
我还是做个失败吧

36:10.340 --> 36:12.340
我就判断一下吧

36:12.340 --> 36:14.340
用一个随机的情况来

36:14.340 --> 36:16.340
小于0.5

36:16.340 --> 36:18.340
就是50%的机率成功

36:18.340 --> 36:19.340
50%的机率失败

36:19.340 --> 36:21.340
比方说这里就成功了

36:21.340 --> 36:22.340
成功了

36:22.340 --> 36:23.340
成功跑完了

36:23.340 --> 36:25.340
这个是中途脚溜伤了

36:25.340 --> 36:26.340
失败

36:26.340 --> 36:28.340
脚溜伤了

36:28.340 --> 36:31.680
中途没跑完

36:31.680 --> 36:32.680
我怎么来表示

36:32.680 --> 36:34.680
我这个任务成功了呢

36:34.680 --> 36:36.680
看着

36:36.680 --> 36:37.680
这个函数

36:37.680 --> 36:39.680
他会给你传两个参数进来

36:39.680 --> 36:41.680
一个参数的名字叫resolve

36:41.680 --> 36:43.680
一个参数的名字叫reject

36:43.680 --> 36:44.680
这里是有两个参数的

36:44.680 --> 36:45.680
当然你可以不用

36:45.680 --> 36:46.680
但是

36:46.680 --> 36:47.680
如果说你想把这个任务

36:47.680 --> 36:49.680
变成完成

36:49.680 --> 36:50.680
或者是想把这个任务

36:50.680 --> 36:51.680
变成失败

36:51.680 --> 36:53.680
你就要用这个

36:53.680 --> 36:55.680
比方说这里我成功怎么写

36:55.680 --> 36:56.680
resolve什么意思

36:56.680 --> 36:57.680
之前解释过了

36:57.680 --> 36:58.680
表示把一个状态

36:58.680 --> 37:00.680
从挂起变成完成

37:00.680 --> 37:02.680
所以说呢

37:02.680 --> 37:04.680
你这里调用这个函数

37:04.680 --> 37:05.680
这是一个函数

37:05.680 --> 37:06.680
调用它

37:06.680 --> 37:08.680
这个调用的目的就是

37:08.680 --> 37:11.680
将任务从挂起

37:11.680 --> 37:13.680
变成完成

37:13.680 --> 37:14.680
没啥意思

37:14.680 --> 37:16.680
那么完成的时候

37:16.680 --> 37:18.680
可能会有一些相关的数据

37:18.680 --> 37:19.680
比方说什么数据呢

37:19.680 --> 37:20.680
我跑了多少时间

37:20.680 --> 37:22.680
那我就把这个duration

37:22.680 --> 37:23.680
对吧

37:23.680 --> 37:24.680
我们跑了这么长的时间

37:24.680 --> 37:25.680
传过去

37:25.680 --> 37:27.680
那如果说我失败了

37:27.680 --> 37:29.680
你就掉这个函数

37:29.680 --> 37:31.680
你看就是通过这一段代码

37:31.680 --> 37:33.680
就可以描述这个任务的过程

37:33.680 --> 37:35.680
我开始怎么样怎么样怎么样

37:35.680 --> 37:36.680
然后呢到这个时间点

37:36.680 --> 37:38.680
说明这个任务就已经成功了

37:38.680 --> 37:40.680
我把相关的数据贴地

37:40.680 --> 37:41.680
到这个时间点

37:41.680 --> 37:42.680
我就说明我的任务失败了

37:42.680 --> 37:43.680
我把相关的

37:43.680 --> 37:45.680
失败的原因给力

37:45.680 --> 37:47.680
搅溜上了

37:47.680 --> 37:49.680
你看是不是就完了

37:49.680 --> 37:51.680
这就是通过Promise

37:51.680 --> 37:53.680
来描述任务

37:53.680 --> 37:55.680
好现在我们运行

37:55.680 --> 37:56.680
你看一开始的Promise状态

37:56.680 --> 37:57.680
是平顶的

37:57.680 --> 37:58.680
后边的状态变了

37:58.680 --> 38:00.680
等了一段时间之后

38:00.680 --> 38:01.680
状态就变了

38:01.680 --> 38:03.680
只是了我这里能没有

38:03.680 --> 38:04.680
后边我们不管啊

38:04.680 --> 38:06.680
这个东西我们以后会说

38:06.680 --> 38:09.680
只是我们现在呢

38:09.680 --> 38:11.680
没有什么没有后续处理

38:11.680 --> 38:12.680
就是这个任务成功之后

38:12.680 --> 38:13.680
我要干嘛

38:13.680 --> 38:14.680
那你成功了

38:14.680 --> 38:16.680
然后呢

38:16.680 --> 38:17.680
我的脚溜上了

38:17.680 --> 38:18.680
然后呢

38:18.680 --> 38:20.680
对吧我没有后续处理

38:20.680 --> 38:22.680
只是对这个任务

38:22.680 --> 38:24.680
那我如果说我有后续处理

38:24.680 --> 38:25.680
我怎么来后续处理

38:25.680 --> 38:27.680
你看啊

38:27.680 --> 38:29.680
我这里拿到这个任务了

38:29.680 --> 38:30.680
这个任务

38:30.680 --> 38:31.680
我也不知道他是成功啊

38:31.680 --> 38:32.680
还是失败

38:32.680 --> 38:33.680
还是挂起

38:33.680 --> 38:34.680
我不知道

38:34.680 --> 38:36.680
但是呢我可以说先说

38:36.680 --> 38:38.680
如果说这个任务

38:38.680 --> 38:40.680
成功了我怎么样

38:40.680 --> 38:41.680
如果说他失败了

38:41.680 --> 38:42.680
我又怎么样

38:42.680 --> 38:43.680
那怎么来进行后续处理呢

38:43.680 --> 38:45.680
就是靠这个方法Z

38:45.680 --> 38:46.680
Z什么意思

38:46.680 --> 38:47.680
然后呢

38:47.680 --> 38:49.680
后边呢

38:49.680 --> 38:51.680
调用Z这个方法

38:51.680 --> 38:52.680
里面有两个参数

38:52.680 --> 38:53.680
第一个参数

38:53.680 --> 38:56.680
表示成功之后干嘛

38:56.680 --> 38:58.680
第二个参数表示失败过后干嘛

38:58.680 --> 39:00.680
那么就对应到这边的

39:00.680 --> 39:02.680
Unfulfilled的成功之后干嘛

39:02.680 --> 39:05.680
失败过后干嘛

39:05.680 --> 39:06.680
那么具体单码怎么写呢

39:06.680 --> 39:08.680
就是这里要传两个函数

39:08.680 --> 39:10.680
第一个函数

39:10.680 --> 39:12.680
是这个

39:12.680 --> 39:14.680
第二个函数是这个

39:14.680 --> 39:17.680
把那些参数的名字里随便取啊

39:17.680 --> 39:19.680
函数的喜龙餐都是随便取的

39:19.680 --> 39:20.680
这要传两个函数

39:20.680 --> 39:21.680
第一个函数

39:21.680 --> 39:23.680
第一个函数什么时候运行

39:23.680 --> 39:25.680
这个任务一旦成功之后

39:25.680 --> 39:26.680
它就会运行

39:26.680 --> 39:28.680
那么这个参数是什么意思呢

39:28.680 --> 39:31.680
这个参数就是任务成功之后

39:31.680 --> 39:33.680
它的相关数据

39:33.680 --> 39:36.680
这里的相关数据就会作为参数给它传过来

39:36.680 --> 39:38.680
那任务失败的时候呢

39:38.680 --> 39:41.680
它的相关数据就会作为参数传到这儿来

39:41.680 --> 39:42.680
没什么意思啊

39:42.680 --> 39:43.680
那么你在用的时候

39:43.680 --> 39:44.680
其实你不用管

39:44.680 --> 39:46.680
反正就说你这个任务有了

39:46.680 --> 39:48.680
但是它现在的可能有

39:48.680 --> 39:49.680
可能已经成功了

39:49.680 --> 39:50.680
已经失败了

39:50.680 --> 39:51.680
也可能正在挂起状态

39:51.680 --> 39:52.680
我说不好

39:52.680 --> 39:53.680
反正我就告诉你

39:53.680 --> 39:54.680
如果说成功了

39:54.680 --> 39:55.680
你一个人运行这个

39:55.680 --> 39:56.680
如果说失败了

39:56.680 --> 39:57.680
你一个人运行这个

39:58.680 --> 40:00.680
你看这个data对应过来

40:00.680 --> 40:01.680
你看这个对应这个图

40:01.680 --> 40:02.680
其实就很容易理解

40:03.680 --> 40:04.680
那如果说你成功了

40:04.680 --> 40:06.680
过后我就输出OE

40:08.680 --> 40:10.680
然后我跑了

40:11.680 --> 40:12.680
多少时间了

40:13.680 --> 40:15.680
这里输出这个data

40:18.680 --> 40:19.680
好 如果说失败了

40:22.680 --> 40:23.680
失败的原因是什么

40:25.680 --> 40:26.680
不好意思

40:28.680 --> 40:29.680
然后后面

40:29.680 --> 40:30.680
我们把失败的原因打出来

40:31.680 --> 40:33.680
后面要补考怎么样怎么样

40:33.680 --> 40:35.680
我们就可以继续写

40:36.680 --> 40:37.680
是不是失败了

40:37.680 --> 40:39.680
它就会运行这个函数

40:40.680 --> 40:41.680
看一下成功

40:43.680 --> 40:44.680
成功跑了这么多秒

40:45.680 --> 40:46.680
不要意思吧

40:46.680 --> 40:48.680
这就是整个任务的过程

40:48.680 --> 40:50.680
好好去看一下这个代码

40:50.680 --> 40:51.680
对到这个代码

40:51.680 --> 40:52.680
对到这张图

40:52.680 --> 40:54.680
好好地去梳理一下

40:57.890 --> 40:58.890
把这张图视频

40:58.890 --> 40:59.890
好好去梳理一下

40:59.890 --> 41:00.890
每个环节在做什么

41:01.890 --> 41:02.890
创建一个任务对象

41:02.890 --> 41:03.890
我们刚才说了

41:03.890 --> 41:05.890
叶嘉宾犯去告诉你

41:05.890 --> 41:07.890
每个任务都是一个对象

41:07.890 --> 41:08.890
这是不是一个对象

41:08.890 --> 41:09.890
创建了这么一个对象

41:09.890 --> 41:10.890
放到这个编辑里边

41:11.890 --> 41:12.890
然后这个任务的过程

41:12.890 --> 41:13.890
是什么

41:13.890 --> 41:14.890
你在这里描述

41:15.890 --> 41:16.890
如果说

41:16.890 --> 41:18.890
过程中一旦成功了

41:18.890 --> 41:19.890
掉这个

41:19.890 --> 41:20.890
一旦失败了掉这个

41:21.890 --> 41:23.890
那么关于后续处理

41:23.890 --> 41:24.890
针对这个任务对象

41:24.890 --> 41:25.890
进行后续处理

41:25.890 --> 41:26.890
那么就这样子写

41:26.890 --> 41:28.890
如果说成功了怎么样怎么样

41:28.890 --> 41:30.890
他失败了怎么样怎么样

41:31.890 --> 41:32.890
没意思吧

41:32.890 --> 41:33.890
这就是咱们这个

41:33.890 --> 41:35.890
Promise的最基本最基本的用法

41:36.890 --> 41:38.890
好 接下来咱们来看

41:38.890 --> 41:42.780
回到我们最开始的问题

41:42.780 --> 41:43.780
邓哥

41:44.780 --> 41:45.780
怎么来解决

41:46.780 --> 41:48.780
怎么把它改造成Promise

41:49.780 --> 41:51.780
我们就直接到代码里边来改造

41:52.780 --> 41:53.780
现在我们把刚才的代码

41:53.780 --> 41:54.780
复制一下

41:55.780 --> 41:56.780
回到这

41:57.780 --> 41:58.780
下面再摘掉了

41:59.780 --> 42:00.780
改造这个函数

42:01.780 --> 42:02.780
你看啊 之前我把

42:02.780 --> 42:03.780
成功之后干什么

42:03.780 --> 42:04.780
失败之后干什么

42:04.780 --> 42:05.780
是作为参数权

42:05.780 --> 42:06.780
传进来了对不对

42:08.780 --> 42:10.780
那么现在的不一样了

42:11.780 --> 42:12.780
我这个是啥呀

42:12.780 --> 42:14.780
发送一个表白短信

42:14.780 --> 42:16.780
它是不是一个异部任务

42:17.780 --> 42:18.780
一个异部任务

42:18.780 --> 42:21.780
你给我返回一个任务对象

42:21.780 --> 42:22.780
就行了

42:23.780 --> 42:24.780
任务对象是什么

42:24.780 --> 42:26.780
就是Promise对象

42:27.780 --> 42:29.780
你给我返回一个Promise对象

42:30.780 --> 42:32.780
之后你会遇到很多的函数

42:33.780 --> 42:35.780
它的注释里面就可以打好了

42:35.780 --> 42:36.780
看官方的注释也好

42:37.780 --> 42:40.780
看一些我们给这些的

42:40.780 --> 42:41.780
文档里面也好

42:41.780 --> 42:43.780
有些函数它就零高处理

42:43.780 --> 42:44.780
我这个函数返回的就是Promise

42:44.780 --> 42:45.780
表示什么

42:45.780 --> 42:47.780
表示这个函数返回的是

42:47.780 --> 42:48.780
一个异部任务对象

42:49.780 --> 42:51.780
那么我们现在不写

42:51.780 --> 42:52.780
Promise对象

42:52.780 --> 42:54.780
那如果说这个函数返回的是Promise

42:54.780 --> 42:55.780
那怎么用呢

42:56.780 --> 42:58.780
比方说这两个函数就没了

42:58.780 --> 42:59.780
这两个函数没了

43:00.780 --> 43:02.780
你给我给谁发送的一个短信

43:03.780 --> 43:04.780
消息你给我

43:04.780 --> 43:05.780
它会返回一个任务对象

43:05.780 --> 43:06.780
那到时候怎么用

43:06.780 --> 43:07.780
send message

43:07.780 --> 43:09.780
比方说给李建刚

43:12.340 --> 43:13.340
他返回的是什么

43:13.340 --> 43:14.340
返回的是Promise

43:15.340 --> 43:17.340
Promise对象有什么特点

43:17.340 --> 43:19.340
这个玩意不就是Promise对象吗

43:20.340 --> 43:21.340
Promise对象有什么特点

43:21.340 --> 43:22.340
是不是后面有个Zing方法

43:23.340 --> 43:24.340
对吧

43:24.340 --> 43:25.340
这个玩意是一个Promise对象

43:26.340 --> 43:27.340
当然李建刚看不懂

43:27.340 --> 43:29.340
他一定要把他保存到辩量里边

43:29.340 --> 43:31.340
不知道有些东西是这样子

43:31.340 --> 43:33.340
他跟辩量有一种

43:33.340 --> 43:36.340
特别说不清道不明的情节

43:36.340 --> 43:38.340
他一定要把他保存到辩量里边

43:38.340 --> 43:39.340
其实没必要的

43:40.340 --> 43:41.340
你保存到辩量里边

43:41.340 --> 43:42.340
你跟这样子写有啥区别

43:43.340 --> 43:44.340
有啥区别

43:44.340 --> 43:45.340
这不就是个Promise吗

43:45.340 --> 43:46.340
你把它保存到辩量里边

43:46.340 --> 43:47.340
再写个Zing

43:47.340 --> 43:49.340
跟直接用它写个Zing不一样

43:49.340 --> 43:51.340
那么成功之后

43:51.340 --> 43:52.340
干什么

43:53.340 --> 43:55.340
失败之后干什么

43:55.340 --> 43:56.340
成功之后

43:56.340 --> 43:57.340
比方成功的时候

43:57.340 --> 43:58.340
女神那边会有个回复消息

43:58.340 --> 44:00.340
那我就把回复消息输出

44:02.340 --> 44:03.340
失败的时候

44:03.340 --> 44:05.340
女神也有一个回复消息

44:05.340 --> 44:07.340
那么就是失败的原因

44:07.340 --> 44:09.340
我就把失败消息输出

44:09.340 --> 44:10.340
这是成功

44:11.340 --> 44:12.340
不要说对

44:12.340 --> 44:13.340
成功

44:13.340 --> 44:16.910
再打一个失败

44:18.910 --> 44:22.440
失败

44:22.440 --> 44:23.440
变成这样的调用格

44:23.440 --> 44:24.440
是吧

44:24.440 --> 44:25.440
其实跟之前好像也

44:25.440 --> 44:26.440
差不多对吧

44:26.440 --> 44:27.440
也是传了两个函数

44:27.440 --> 44:28.440
不着急

44:28.440 --> 44:30.440
Promise会花好几节课

44:30.440 --> 44:31.440
后边我们会

44:31.440 --> 44:32.440
把它这个代码写得

44:32.440 --> 44:33.440
越来越舒服

44:33.440 --> 44:34.440
看着

44:34.440 --> 44:35.440
我们先这样子写

44:35.440 --> 44:36.440
Zing

44:36.440 --> 44:38.440
如果Zing什么意思

44:38.440 --> 44:40.440
就表示你有了结果之后

44:40.440 --> 44:41.440
然后呢

44:41.440 --> 44:43.440
你成功之后干嘛

44:43.440 --> 44:44.440
你失败之后干嘛

44:44.440 --> 44:45.440
都要变成这样子

44:46.440 --> 44:48.440
关键是这个代码怎么写

44:48.440 --> 44:49.440
它要返回的是什么

44:49.440 --> 44:51.440
它返回的是一个Promise

44:51.440 --> 44:52.440
Promise是什么

44:52.440 --> 44:53.440
哪来的

44:53.440 --> 44:54.440
是通过这种方式来的

44:57.200 --> 44:58.200
是通过这种方式来的

44:59.200 --> 45:01.200
创建一个Promise对象返回

45:02.200 --> 45:03.200
好那么这里时候

45:03.200 --> 45:04.200
开始描述任务了

45:04.200 --> 45:05.200
任务的过程

45:05.200 --> 45:07.200
你把这个代码Copy过来

45:08.200 --> 45:09.200
这不就是任务的过程

45:11.200 --> 45:12.200
这几节课

45:12.200 --> 45:13.200
我的要求很简单

45:14.200 --> 45:16.200
理解Promise一家规范

45:17.200 --> 45:18.200
然后呢

45:18.200 --> 45:19.200
学会

45:20.200 --> 45:21.200
创建Promise

45:21.200 --> 45:23.200
学会针对某一个Promise

45:23.200 --> 45:25.200
进行后续处理

45:25.200 --> 45:26.200
这就是我这些可能要求

45:27.200 --> 45:29.200
还不要求你做

45:29.200 --> 45:30.200
面试的东西

45:31.200 --> 45:32.200
还要深入的学习

45:33.200 --> 45:34.200
好那么这个代码写完了

45:34.200 --> 45:35.200
还有最后一点点

45:35.200 --> 45:36.200
就是成功的时候

45:36.200 --> 45:37.200
你要调用什么

45:37.200 --> 45:38.200
调用Resolve

45:39.200 --> 45:40.200
失败的时候

45:40.200 --> 45:41.200
调用这个

45:41.200 --> 45:42.200
没了

45:43.200 --> 45:44.200
返回一个Promise对象

45:44.200 --> 45:45.200
开始进行任务

45:46.200 --> 45:47.200
这个函数马上会得到运行

45:48.200 --> 45:49.200
一调这个函数

45:50.200 --> 45:51.200
创建一个任务

45:51.200 --> 45:52.200
这个任务马上运行

45:54.200 --> 45:55.200
然后呢

45:55.200 --> 45:56.200
一开始这个任务状态

45:56.200 --> 45:57.200
肯定是

45:57.200 --> 45:58.200
挂起的

45:58.200 --> 45:59.200
对吧

45:59.200 --> 46:00.200
然后呢

46:00.200 --> 46:01.200
过了一秒钟之后

46:01.200 --> 46:02.200
这个任务变成了

46:02.200 --> 46:03.200
要么就成功

46:03.200 --> 46:04.200
要么就失败

46:04.200 --> 46:05.200
好来看一下

46:06.200 --> 46:07.200
这代码

46:08.200 --> 46:09.200
运行

46:10.200 --> 46:11.200
是吧

46:11.200 --> 46:14.020
仍然可以达到一样的效果

46:15.020 --> 46:16.020
失败

46:16.020 --> 46:17.020
一次失败

46:17.020 --> 46:18.020
因为他机率太小了

46:18.020 --> 46:19.020
成功的机率太小了

46:19.020 --> 46:20.020
要多运行很多次

46:20.020 --> 46:21.020
才有可能会成功

46:22.020 --> 46:23.020
你们自己可以把

46:23.020 --> 46:24.020
机率调大一点

46:26.020 --> 46:27.020
关于Promise

46:27.020 --> 46:28.020
还有很多知识

46:28.020 --> 46:29.020
还有很多的细节

46:29.020 --> 46:30.020
我们慢慢来不着急

46:30.020 --> 46:31.020
我们一节可能学一点

46:31.020 --> 46:32.020
一节和学一点

46:32.020 --> 46:34.020
慢慢的一点点去深入它

46:34.020 --> 46:35.020
那么至此

46:35.020 --> 46:37.020
这个回调地域的问题解决了吗

46:37.020 --> 46:39.020
实际上没有解决的

46:39.020 --> 46:40.020
你不信你自己去尝试一下

46:40.020 --> 46:41.020
你写的写的还是写的

46:41.020 --> 46:42.020
所以再回调地域

46:42.020 --> 46:43.020
没有解决

46:43.020 --> 46:44.020
我们需要

46:44.020 --> 46:45.020
要解决回调地域

46:45.020 --> 46:46.020
还需要进一步学习

46:46.020 --> 46:48.020
后边课程里边的Promise知识

46:49.020 --> 46:50.020
不着急

46:50.020 --> 46:51.020
饭得一口一口吃

46:51.020 --> 46:52.020
我们这几课

46:52.020 --> 46:53.020
先来做几道练习

46:53.020 --> 46:54.020
第一道题

46:56.020 --> 46:57.020
这个东西

46:57.020 --> 46:58.020
也是你们以后

46:59.020 --> 47:00.020
有可能会写出来的

47:00.020 --> 47:01.020
这么一个函数

47:01.020 --> 47:02.020
这个函数叫D内

47:03.020 --> 47:04.020
你给我传一段时间

47:04.020 --> 47:05.020
一个毫秒数

47:06.020 --> 47:07.020
那么这个函数

47:07.020 --> 47:08.020
返回的是什么呢

47:08.020 --> 47:09.020
返回的

47:09.020 --> 47:10.020
要学会看注释

47:11.020 --> 47:12.020
这是参数的含义

47:12.020 --> 47:13.020
参数的内形是number

47:13.020 --> 47:14.020
这是一个数字

47:15.020 --> 47:16.020
参数的含义

47:16.020 --> 47:17.020
表示等待的时间

47:18.020 --> 47:19.020
returns表示

47:19.020 --> 47:20.020
这个函数的返回

47:20.020 --> 47:21.020
内形是Promise

47:21.020 --> 47:22.020
返回的是一个任务

47:23.020 --> 47:24.020
这个函数什么意思呢

47:24.020 --> 47:26.020
就是说我希望这样子

47:26.020 --> 47:29.020
D内一千

47:29.020 --> 47:32.020
就表示延迟一千毫秒

47:32.020 --> 47:34.020
延迟完了过后

47:34.020 --> 47:35.020
成功了

47:36.020 --> 47:37.020
运行这个函数

47:37.020 --> 47:38.020
失败了

47:38.020 --> 47:39.020
运行这个函数

47:39.020 --> 47:40.020
我给你们说

47:40.020 --> 47:41.020
像这种延迟内的函数

47:41.020 --> 47:43.020
一般来说是不会失败的

47:43.020 --> 47:44.020
所以说你

47:44.020 --> 47:45.020
第二个参数是可以不传的

47:46.020 --> 47:47.020
它只有一个成功

47:47.020 --> 47:48.020
时间到了

47:48.020 --> 47:49.020
它就会运行这个函数

47:49.020 --> 47:50.020
所以说我们

47:50.020 --> 47:51.020
希望达到几个就是

47:51.020 --> 47:53.020
延迟一千毫秒

47:54.020 --> 47:56.020
然后运行这个函数

47:57.020 --> 47:58.020
你看代码很好别多

47:58.020 --> 48:00.020
延迟一千毫秒

48:01.020 --> 48:02.020
然后运行这个函数

48:04.020 --> 48:06.020
它就等效于之前的setout

48:07.020 --> 48:09.020
就等效于这样的写

48:10.020 --> 48:11.020
只有写法变了

48:11.020 --> 48:12.020
不是说你以后

48:12.020 --> 48:13.020
一定要用这种写法

48:14.020 --> 48:15.020
只是这个函数

48:15.020 --> 48:16.020
我们可以练习一下

48:16.020 --> 48:17.020
通过Promise

48:17.020 --> 48:18.020
来怎么来去完成

48:18.020 --> 48:19.020
因为这个函数

48:19.020 --> 48:20.020
它一定返回的是Promise

48:20.020 --> 48:22.020
你看后面有这个任务

48:22.020 --> 48:23.020
所以这个函数你想

48:23.020 --> 48:24.020
都不用想直接返回

48:24.020 --> 48:25.020
用一个Promise

48:27.020 --> 48:28.020
Promise你不要传一个函数

48:31.020 --> 48:32.020
好接下来

48:32.020 --> 48:33.020
怎么来延迟一段时间

48:34.020 --> 48:35.020
是不是用这台帽子来延迟

48:39.460 --> 48:40.460
延迟多久

48:41.460 --> 48:42.460
所以延迟这么久

48:43.460 --> 48:44.460
对吧

48:44.460 --> 48:45.460
那么时间到了过后干吗

48:45.460 --> 48:46.460
时间到了

48:46.460 --> 48:47.460
这个任务是不是就成功了

48:47.460 --> 48:48.460
任务就是不是就完成了

48:49.460 --> 48:50.460
完成的时候要做什么

48:50.460 --> 48:51.460
一定要记住

48:51.460 --> 48:52.460
任务完成的时候

48:52.460 --> 48:53.460
就是调它

48:54.460 --> 48:55.460
把任务变成完成

48:56.460 --> 48:57.460
这里边不要传一个东西吗

48:57.460 --> 48:58.460
可以传可以不传

48:58.460 --> 48:59.460
不传的话就相当于是传的

48:59.460 --> 49:01.460
我这里没有什么相关数据

49:02.460 --> 49:04.460
有些任务是不需要相关数据

49:04.460 --> 49:05.460
还有一个问题就是

49:05.460 --> 49:06.460
有些人说

49:07.460 --> 49:09.460
最好还是比较改动这个练习题

49:10.460 --> 49:11.460
练习题参考的

49:12.460 --> 49:14.900
我们这一刻的目的

49:14.900 --> 49:15.900
就把练习题做好

49:16.900 --> 49:17.900
做不出来的话你听我讲

49:18.900 --> 49:19.900
因为这练习对于一开始

49:19.900 --> 49:20.900
刚刚开始接触Promise的话

49:20.900 --> 49:21.900
还是有点难度的

49:21.900 --> 49:22.900
听我讲

49:22.900 --> 49:24.900
讲了之后你要能够理解

49:24.900 --> 49:25.900
并且把它写出来

49:26.900 --> 49:31.650
回来说

49:32.650 --> 49:33.650
那么您说

49:33.650 --> 49:35.650
这个任务是不是不可能失败

49:35.650 --> 49:36.650
它就不可能失败

49:36.650 --> 49:38.650
这个任务只有一种可能就成功

49:38.650 --> 49:39.650
它不可能失败

49:39.650 --> 49:40.650
那我就接个词

49:40.650 --> 49:41.650
实际上是可以不要的

49:42.650 --> 49:44.650
这就是一个定内函数

49:44.650 --> 49:45.650
那么一个定内函数怎么用

49:45.650 --> 49:46.650
就这样用

49:46.650 --> 49:47.650
延迟一秒钟

49:47.650 --> 49:48.650
然后去运行它

49:49.650 --> 49:50.650
这里也不需要参数了

49:50.650 --> 49:52.650
因为没有相关数据

49:52.650 --> 49:54.650
相当于是

49:55.650 --> 49:57.650
咱们这个相关的数据

49:57.650 --> 49:58.650
是undefined

49:59.650 --> 50:00.650
所以也不需要用它

50:00.650 --> 50:01.650
好 这边比较说

50:03.650 --> 50:04.650
输出一个123

50:04.650 --> 50:05.650
你看一下是不是一秒钟之后

50:05.650 --> 50:06.650
输出123

50:08.650 --> 50:09.650
运行

50:09.650 --> 50:10.650
是不是一秒钟之后

50:10.650 --> 50:11.650
输出123

50:11.650 --> 50:12.650
对吧 就这么个意思

50:13.650 --> 50:14.650
好的 定内函数

50:16.650 --> 50:17.650
好 接下来我们看下面

50:17.650 --> 50:18.650
下面这道小题

50:18.650 --> 50:19.650
按照要求

50:19.650 --> 50:21.650
调用定内函数完成程序

50:21.650 --> 50:23.650
等待一秒钟输出费率

50:23.650 --> 50:24.650
所以很简单

50:24.650 --> 50:25.650
不就是这句话吗

50:29.650 --> 50:31.650
所以我们这句和最基本的

50:31.650 --> 50:33.650
你要学会怎么去创建Promise

50:34.650 --> 50:36.650
然后怎么去用它

50:37.650 --> 50:38.650
好 定题

50:38.650 --> 50:39.650
第二题

50:40.650 --> 50:42.650
注释打了一大堆

50:45.650 --> 50:46.650
啥意思呢

50:46.650 --> 50:47.650
他说

50:47.650 --> 50:49.650
这里有个函数让你去实现

50:49.650 --> 50:51.650
这个题小又难度

50:52.650 --> 50:53.650
该函数呢

50:53.650 --> 50:54.650
要返回一个Promise

50:54.650 --> 50:55.650
所以说你

50:55.650 --> 50:56.650
首先第一件事

50:56.650 --> 50:57.650
你强都不用强

50:57.650 --> 50:58.650
返回一个Promise

51:02.050 --> 51:04.050
但这里可以用箭头函数

51:04.050 --> 51:05.050
也可以用普通的函数

51:06.050 --> 51:10.060
这个函数在做什么事

51:10.060 --> 51:13.060
它是要创建一个Image元素

51:14.060 --> 51:15.060
所以这个任务

51:15.060 --> 51:16.060
这个任务是什么任务

51:16.060 --> 51:18.060
就是我要创建一个元素的任务

51:20.060 --> 51:22.060
创造什么元素

51:26.060 --> 51:28.060
创造一个Image元素

51:32.060 --> 51:34.060
然后图片的路径是什么呢

51:34.060 --> 51:36.060
图片的路径就是这个路径

51:40.060 --> 51:42.060
这个网上需要Promise吗

51:42.060 --> 51:44.060
因为它是有异部长径

51:44.060 --> 51:45.060
为什么有异部长径

51:45.060 --> 51:46.060
是这样子的

51:46.060 --> 51:48.060
我把图片的SRC路径

51:48.060 --> 51:49.060
设为它

51:49.060 --> 51:50.060
但是图片的夹仔

51:50.060 --> 51:51.060
是不是需要时间

51:51.060 --> 51:52.060
你看网上

51:52.060 --> 51:53.060
你去上网的时候

51:53.060 --> 51:54.060
打开一个网页

51:54.060 --> 51:55.060
里边有很多图片夹仔

51:55.060 --> 51:56.060
是不是需要时间

51:58.060 --> 51:59.060
我想

51:59.060 --> 52:01.060
我这个任务的意思就是说

52:01.060 --> 52:02.060
我去创建一个图片

52:02.060 --> 52:04.060
去夹仔这张UIL地址

52:04.060 --> 52:05.060
去夹仔这个图

52:06.060 --> 52:07.060
之后学网络的时候

52:07.060 --> 52:08.060
就会学UIL地址

52:08.060 --> 52:10.060
UIL地址其实就是这个

52:10.060 --> 52:11.060
就这里

52:11.060 --> 52:12.060
你不要说这个

52:12.060 --> 52:14.060
就这个就是UIL地址

52:14.060 --> 52:15.060
每张图片也有UIL地址

52:15.060 --> 52:17.060
比方说这张图片

52:17.060 --> 52:18.060
我们再新

52:18.060 --> 52:19.060
我们看一下

52:19.060 --> 52:20.060
这张图

52:20.060 --> 52:22.060
这还不是图片

52:22.060 --> 52:23.060
它是一个背景图

52:26.060 --> 52:27.060
这张图

52:27.060 --> 52:28.060
我们复制图片地址

52:28.060 --> 52:29.060
来在这里打开

52:29.060 --> 52:30.060
你看

52:30.060 --> 52:31.060
这就是图片地址

52:33.060 --> 52:34.060
那以后我调

52:34.060 --> 52:35.060
调这个函数的时候

52:35.060 --> 52:36.060
怎么调的

52:36.060 --> 52:37.060
我就这样调的

52:39.060 --> 52:40.060
把图片地址传进去

52:41.060 --> 52:42.060
对

52:42.060 --> 52:43.060
让这个函数

52:43.060 --> 52:45.060
来负责创建一张图片

52:45.060 --> 52:47.060
由于夹在图片

52:47.060 --> 52:48.060
需要一段时间的

52:48.060 --> 52:50.060
所以它是一个异步任务

52:50.060 --> 52:51.060
我希望

52:51.060 --> 52:53.060
图片夹载完成后

52:53.060 --> 52:55.060
这个任务就完成

52:55.060 --> 52:56.060
图片夹载失败后

52:56.060 --> 52:57.060
这个任务就失败

52:57.060 --> 52:58.060
因为有些图片

52:58.060 --> 52:59.060
不要说

52:59.060 --> 53:00.060
它做了防盗链的

53:00.060 --> 53:02.060
就是不允许别的网站去夹载

53:02.060 --> 53:04.060
那你就夹载失败了

53:04.060 --> 53:05.060
或者地址根本就不存在

53:05.060 --> 53:07.060
那就夹载失败了

53:07.060 --> 53:09.060
如果说任务完成

53:09.060 --> 53:11.060
我先不看后面两句话

53:11.060 --> 53:13.060
我们现在怎么来

53:13.060 --> 53:14.060
做这么一件事

53:14.060 --> 53:16.060
我怎么知道这个图片夹载完成了

53:16.060 --> 53:17.060
这里有提示

53:17.060 --> 53:19.060
AMG元素有两个事件

53:19.060 --> 53:21.060
一个是漏的事件

53:21.060 --> 53:23.060
AMG漏的

53:23.060 --> 53:25.060
这个事件什么时候出发

53:25.060 --> 53:28.060
是在图像夹载完成之后出发

53:28.060 --> 53:30.060
图像夹载完成

53:30.060 --> 53:31.060
所以大一马到澳洲

53:31.060 --> 53:33.060
是不是图像夹载完成了

53:33.060 --> 53:36.060
还有一个事件叫做AMG Aeroir

53:36.060 --> 53:40.060
当那个图像夹载失败的时候

53:40.060 --> 53:42.060
图像夹载失败

53:42.060 --> 53:44.060
我们先来打印看一下

53:44.060 --> 53:46.060
完成

53:47.060 --> 53:49.060
这里我们打印失败

53:49.060 --> 53:50.060
你看我这个任务很简单

53:50.060 --> 53:52.060
创建一个emg src复制

53:52.060 --> 53:54.060
然后夹载完成过后

53:54.060 --> 53:55.060
它运行这个函数

53:55.060 --> 53:56.060
夹载失败的时候

53:56.060 --> 53:57.060
运行这个函数

53:57.060 --> 54:00.060
我们把这里雕用去试一下

54:00.060 --> 54:05.940
它说什么失败

54:05.940 --> 54:06.940
为什么失败了

54:06.940 --> 54:07.940
这个图片做了防盗链

54:07.940 --> 54:09.940
它不允许别的网页去用它

54:09.940 --> 54:10.940
就失败了

54:10.940 --> 54:12.940
那么失败的原因是什么呢

54:12.940 --> 54:14.940
它说服务器返回了一个403

54:14.940 --> 54:16.940
403就是权限不够

54:16.940 --> 54:17.940
你没有这个权限去

54:17.940 --> 54:18.940
别的网站

54:18.940 --> 54:20.940
很多图片他们做了防盗链

54:20.940 --> 54:22.940
就只有自己的网站能用这个图片

54:22.940 --> 54:23.940
别的网站是不能用的

54:23.940 --> 54:25.940
它就出现这个错误

54:25.940 --> 54:27.940
那我们去找一个能用的吧

54:27.940 --> 54:29.940
我看一下有没有能用的

54:30.940 --> 54:32.940
说一个哈士奇的照片

54:33.940 --> 54:35.940
我之前用了一些哈士奇的照片

54:35.940 --> 54:36.940
还是能用的

54:42.170 --> 54:44.170
看一下这张可爱的哈士奇

54:44.170 --> 54:45.170
护制图片的地址

54:45.170 --> 54:47.170
咱们看一下这个

54:50.380 --> 54:51.380
你看是不是就完成

54:52.380 --> 54:54.380
对吧 放心 完成

54:54.380 --> 54:56.380
因为我这个网数还可以

54:56.380 --> 54:58.380
图片加载速度比较快

54:58.380 --> 55:00.380
所以这个函数很快就运行了

55:01.380 --> 55:03.380
好 那么我们现在希望的是什么呢

55:03.380 --> 55:05.380
希望的是图像加载完成的时候

55:05.380 --> 55:07.380
你不要随便处理

55:07.380 --> 55:08.380
关键什么时候呢

55:08.380 --> 55:09.380
你只需要做的一件事

55:09.380 --> 55:12.380
就是把这个任务给它完成了

55:12.380 --> 55:13.380
做什么

55:13.380 --> 55:15.380
所以这里一个单码该这么写

55:16.380 --> 55:18.380
好 图片完成的时候

55:18.380 --> 55:20.380
你看这个处事

55:20.380 --> 55:23.380
完成的时候需要提供的数据

55:23.380 --> 55:24.380
是图片的动物元素

55:24.380 --> 55:26.380
你说我们要传的什么

55:26.380 --> 55:27.380
把这个动物元素传进去

55:27.380 --> 55:28.380
别人可能要用的

55:28.380 --> 55:29.380
因为别人要做后续处理的时候

55:29.380 --> 55:30.380
可能要用

55:30.380 --> 55:31.380
就是我告诉你

55:31.380 --> 55:32.380
我这个任务完成了

55:32.380 --> 55:33.380
你让我去创建图片

55:33.380 --> 55:34.380
我已经创建好了

55:34.380 --> 55:36.380
图片也加载完成了

55:36.380 --> 55:37.380
然后完成之后

55:37.380 --> 55:39.380
我会把这个元素给你

55:39.380 --> 55:40.380
这就是我们的要求

55:40.380 --> 55:42.380
根据要求写

55:42.380 --> 55:44.380
如果说失败的时候呢

55:44.380 --> 55:45.380
失败

55:45.380 --> 55:46.380
失败的时候

55:46.380 --> 55:48.380
这里其实有一个失败的原因

55:48.380 --> 55:49.380
当A弱的时候

55:49.380 --> 55:50.380
你看这个E

55:50.380 --> 55:53.380
换到之前的那个图片地址

55:53.380 --> 55:58.140
之前的这个图片地址

55:58.140 --> 55:59.140
这个图片会失败

55:59.140 --> 56:01.140
它会给你失败的原因

56:01.140 --> 56:02.140
你看

56:02.140 --> 56:07.110
这是失败

56:07.110 --> 56:09.110
A失败的原因呢

56:09.110 --> 56:12.510
失败

56:12.510 --> 56:14.510
onA弱

56:14.510 --> 56:16.510
稍等一下

56:16.510 --> 56:17.510
我可能有点忘记了

56:17.510 --> 56:20.510
看是不是有第二个参数

56:21.510 --> 56:22.510
对

56:22.510 --> 56:24.510
那还是只有一个参数

56:24.510 --> 56:26.510
失败的原因在哪呢

56:35.210 --> 56:37.210
我这里找不到了

56:37.210 --> 56:39.210
找不到这个失败的原因在哪呢

56:39.210 --> 56:41.210
我就把这个event传过去吧

56:41.210 --> 56:42.210
Type error

56:42.210 --> 56:46.210
到到是一个表示失败的事件对象

56:46.210 --> 56:48.210
我就把这个传过去吧

56:48.210 --> 56:50.210
把这个传过去吧

56:50.210 --> 56:52.210
把它传过去

56:52.210 --> 56:53.210
比方说这个E

56:53.210 --> 56:54.210
就是失败的原因

56:54.210 --> 56:55.210
那么失败的时候

56:55.210 --> 56:56.210
我要做什么呢

56:56.210 --> 56:59.650
是不是要调问这个reject

56:59.650 --> 57:00.650
传什么

57:00.650 --> 57:02.650
传这个失败的这个事件对象

57:02.650 --> 57:03.650
好

57:03.650 --> 57:04.650
这个函数有些完了

57:04.650 --> 57:06.650
这个函数它做的事情只负责

57:06.650 --> 57:08.650
给你创建一张图片

57:08.650 --> 57:09.650
一成

57:09.650 --> 57:11.650
然后给你夹在这张图片

57:11.650 --> 57:12.650
夹在完成之后

57:12.650 --> 57:14.650
我就这个任务就完成了

57:14.650 --> 57:15.650
那夹在失败的时候呢

57:15.650 --> 57:17.650
这个任务就失败了

57:17.650 --> 57:18.650
我不管你完

57:18.650 --> 57:20.650
我不管你成功之后要干嘛

57:20.650 --> 57:22.650
我也不管你失败之后要干嘛

57:22.650 --> 57:23.650
无所谓

57:23.650 --> 57:24.650
反正你去做后去处

57:24.650 --> 57:25.650
这个函数有些完了

57:26.650 --> 57:27.650
那后边

57:27.650 --> 57:28.650
我们看后边怎么来用这个函数

57:28.650 --> 57:29.650
我这里有两个例子

57:29.650 --> 57:30.650
来用这个函数

57:30.650 --> 57:31.650
一个呢

57:31.650 --> 57:32.650
让你用这个crazy image

57:32.650 --> 57:33.650
这个函数呢

57:33.650 --> 57:34.650
创建一个图片

57:34.650 --> 57:35.650
图片的路径

57:35.650 --> 57:36.650
让你自行定义一下

57:36.650 --> 57:38.650
比方说我这边随便来一个吧

57:38.650 --> 57:40.650
就这个吧

57:40.650 --> 57:43.650
这个

57:43.650 --> 57:45.650
创建一张图片

57:45.650 --> 57:46.650
为了让你们看得清楚了

57:46.650 --> 57:53.330
我把UIL写字吧

57:53.330 --> 57:56.330
这里就传着UIL进去

57:56.330 --> 57:58.330
创建一张图片

57:58.330 --> 57:59.330
那么接着

57:59.330 --> 58:01.330
然后

58:01.330 --> 58:02.330
如果说你成功了

58:02.330 --> 58:05.330
我是不是可以拿到一个UIL几元数

58:05.330 --> 58:06.330
成功的时候

58:06.330 --> 58:08.330
根据这个注释

58:08.330 --> 58:09.330
任务完成的时候

58:09.330 --> 58:10.330
是不是还会给我一个相关的数据

58:10.330 --> 58:12.330
就是动物元数

58:12.330 --> 58:13.330
如果说失败了

58:13.330 --> 58:14.330
那是不是给我一个失败的原因

58:14.330 --> 58:16.330
就是这个世界对象

58:16.330 --> 58:17.330
对吧

58:17.330 --> 58:18.330
那我这里的要求是什么

58:18.330 --> 58:20.330
当图像成功加载后

58:20.330 --> 58:22.330
是不是在这

58:22.330 --> 58:24.330
我要把图像的宽高

58:24.330 --> 58:26.330
显示到这个P元数里面

58:26.330 --> 58:27.330
好

58:27.330 --> 58:29.330
每次拿到P元数

58:29.330 --> 58:30.330
Documents

58:30.330 --> 58:31.330
Querry是那个

58:31.330 --> 58:32.330
拿到这个P元数

58:32.330 --> 58:34.330
Label

58:34.330 --> 58:35.330
那样式

58:35.330 --> 58:36.330
给这个P元数的Inner

58:36.330 --> 58:37.330
80秒

58:37.330 --> 58:39.330
设置为什么图像的宽高

58:39.330 --> 58:41.330
那么图像的宽

58:41.330 --> 58:43.330
这里我们诚意图像的高

58:43.330 --> 58:44.330
宽是多少呢

58:44.330 --> 58:45.330
是不是就是一个

58:45.330 --> 58:47.330
Image元素的宽度

58:47.330 --> 58:48.330
然后高呢

58:48.330 --> 58:51.330
是不是就Image元素的高度

58:51.330 --> 58:53.330
是不是可以拿到了

58:53.330 --> 58:54.330
对吧

58:54.330 --> 58:56.330
因为一幅图里没有加载完成的时候

58:56.330 --> 58:57.330
宽高拿出来是

58:57.330 --> 58:58.330
永远是零

58:59.330 --> 59:00.330
知道吧

59:00.330 --> 59:01.330
它永远是零

59:01.330 --> 59:03.330
一开始拿宽高的话拿出来

59:03.330 --> 59:04.330
永远是零

59:04.330 --> 59:05.330
只有等它加载完成之后

59:05.330 --> 59:07.330
你才能拿到这个宽高

59:07.330 --> 59:08.330
那么这里的成功

59:08.330 --> 59:10.330
就指的是图像加载完成

59:10.330 --> 59:12.330
好看一下

59:12.330 --> 59:13.330
是不是可以拿到一个图像宽高

59:13.330 --> 59:15.330
296乘300

59:16.330 --> 59:17.330
好失败的话

59:17.330 --> 59:18.330
打印失败的原因

59:18.330 --> 59:20.330
输出失败的原因

59:21.330 --> 59:22.330
好当然这里没有失败

59:23.330 --> 59:24.330
好就这么一个例子

59:24.330 --> 59:25.330
第一个例子

59:25.330 --> 59:26.330
好

59:26.330 --> 59:27.330
第二个例子呢

59:27.330 --> 59:28.330
我还是用这个UIL地址吧

59:29.330 --> 59:30.330
第二个例子

59:31.330 --> 59:33.330
还是让你去用这个QuizImage

59:34.330 --> 59:36.330
然后传递一个UIL地址

59:36.330 --> 59:37.330
成功的时候呢

59:37.330 --> 59:38.330
我需要把图像

59:38.330 --> 59:40.330
加到这个容器里边

59:40.330 --> 59:41.330
加到一个DIV里边

59:41.330 --> 59:42.330
好我这里呢

59:42.330 --> 59:44.330
可以拿到一个DIV

59:44.330 --> 59:45.330
Documents

59:45.330 --> 59:46.330
Berry

59:46.330 --> 59:47.330
Snegator

59:47.330 --> 59:48.330
拿到这个康天了

59:50.900 --> 59:51.900
好然后给DIV

59:51.900 --> 59:53.900
Append Child

59:53.900 --> 59:55.900
是把图片加进去完成

59:56.900 --> 59:57.900
图片对象是不是

59:57.900 --> 59:58.900
里面已经给我了

59:59.900 --> 01:00:00.900
看没

01:00:00.900 --> 01:00:01.900
好再来看一下

01:00:01.900 --> 01:00:02.900
就出来了

01:00:02.900 --> 01:00:03.900
这样子做了

01:00:03.900 --> 01:00:04.900
它就很灵活

01:00:04.900 --> 01:00:08.270
你只管

01:00:08.270 --> 01:00:09.270
创建任务

01:00:10.270 --> 01:00:12.270
这个任务什么时候成功

01:00:12.270 --> 01:00:13.270
什么时候失败

01:00:13.270 --> 01:00:14.270
你只管这个

01:00:15.270 --> 01:00:16.270
你不管后续处理

01:00:16.270 --> 01:00:18.270
后续处理我可以很灵活的

01:00:18.270 --> 01:00:20.270
我一会要做这样的后续处理

01:00:20.270 --> 01:00:22.270
一会可能要做别的后续处理

01:00:22.270 --> 01:00:23.270
让别人去做

01:00:23.270 --> 01:00:24.270
你只管

01:00:24.270 --> 01:00:25.270
描述这个任务

01:00:25.270 --> 01:00:26.270
什么时候成功

01:00:26.270 --> 01:00:27.270
什么时候失败

01:00:27.270 --> 01:00:28.270
别人拿到这个任务过后

01:00:28.270 --> 01:00:29.270
他也不管你这个任务

01:00:29.270 --> 01:00:30.270
目前是什么状态

01:00:30.270 --> 01:00:31.270
反正就说

01:00:31.270 --> 01:00:32.270
你只要成功了就运行这个

01:00:32.270 --> 01:00:33.270
只要失败就运行这个

01:00:33.270 --> 01:00:34.270
告诉你

01:00:34.270 --> 01:00:35.270
到时候你成功了

01:00:35.270 --> 01:00:36.270
你就会自动运行这个

01:00:36.270 --> 01:00:37.270
到时候失败了

01:00:37.270 --> 01:00:38.270
你就会自动运行这个

01:00:40.270 --> 01:00:41.270
第二题

01:00:42.270 --> 01:00:43.270
好好体会一下

01:00:44.270 --> 01:00:45.270
第三题

01:00:45.270 --> 01:00:46.270
我们这些课没有别的要求

01:00:46.270 --> 01:00:47.270
就把这些题完成

01:00:49.270 --> 01:00:50.270
第三题我这里

01:00:52.270 --> 01:00:53.270
第三题是这样子的

01:00:55.270 --> 01:00:56.270
这里有个函数

01:00:57.270 --> 01:00:58.270
这个函数呢

01:00:58.270 --> 01:00:59.270
你无需知道这个函数

01:00:59.270 --> 01:01:00.270
是如何实现的

01:01:00.270 --> 01:01:02.270
这个代码看都不要去看

01:01:02.270 --> 01:01:03.270
不要去看那个函数

01:01:03.270 --> 01:01:04.270
代码的实现

01:01:04.270 --> 01:01:05.270
因为这里面

01:01:05.270 --> 01:01:07.270
以后要学到以后的知识

01:01:07.270 --> 01:01:09.270
现在不要去看那个函数的实现

01:01:09.270 --> 01:01:10.270
我现在就告诉你

01:01:10.270 --> 01:01:11.270
这个函数它就会

01:01:11.270 --> 01:01:12.270
它的作用是

01:01:12.270 --> 01:01:15.270
加载远程省份数据

01:01:15.270 --> 01:01:17.270
我们中国有哪些省份

01:01:17.270 --> 01:01:19.270
它会给你远程加载进来

01:01:21.270 --> 01:01:23.270
这个函数它会返回一个Promise

01:01:23.270 --> 01:01:24.270
那你明白了吧

01:01:25.270 --> 01:01:27.270
这个函数怎么用你知道吧

01:01:27.270 --> 01:01:28.270
调用它就是一个Promise

01:01:28.270 --> 01:01:29.270
Promise

01:01:29.270 --> 01:01:30.270
Promise是一个Z

01:01:32.270 --> 01:01:34.270
成功的时候会得到什么

01:01:34.270 --> 01:01:35.270
省份的数据

01:01:36.270 --> 01:01:37.270
也就是成功的时候

01:01:37.270 --> 01:01:38.270
是那个函数里面

01:01:38.270 --> 01:01:39.270
还会给我一个什么

01:01:39.270 --> 01:01:40.270
省份的数据

01:01:40.270 --> 01:01:41.270
我就用PS了

01:01:42.270 --> 01:01:43.270
失败的时候

01:01:43.270 --> 01:01:44.270
会给我一个原因

01:01:44.270 --> 01:01:45.270
失败的原因

01:01:46.270 --> 01:01:47.270
就这样用

01:01:47.270 --> 01:01:48.270
所以说我们学Promise

01:01:48.270 --> 01:01:49.270
还有一个很重要的点

01:01:49.270 --> 01:01:51.270
就跟我们写代码相关的

01:01:51.270 --> 01:01:52.270
很重要的点就是什么了

01:01:52.270 --> 01:01:53.270
别人给你写好了

01:01:53.270 --> 01:01:54.270
一个函数的

01:01:54.270 --> 01:01:55.270
高数里的

01:01:55.270 --> 01:01:56.270
它返回的就是Promise

01:01:56.270 --> 01:01:57.270
也高数里的

01:01:57.270 --> 01:01:58.270
成功之后会得到啥

01:01:58.270 --> 01:01:59.270
失败的时候会得到啥

01:01:59.270 --> 01:02:01.270
你至少要知道怎么去用

01:02:02.270 --> 01:02:04.270
这是最最最最低的要求

01:02:05.270 --> 01:02:06.270
就说老师

01:02:06.270 --> 01:02:07.270
我理解能力特别差

01:02:07.270 --> 01:02:09.270
我理解原理我听不懂

01:02:10.270 --> 01:02:12.270
你至少要能干活

01:02:12.270 --> 01:02:13.270
你不影响你干活

01:02:13.270 --> 01:02:15.270
你最少最少能知道这个

01:02:16.270 --> 01:02:17.270
别人给你写好一个函数

01:02:17.270 --> 01:02:18.270
它返回的是Promise

01:02:18.270 --> 01:02:20.270
你要知道怎么去用

01:02:20.270 --> 01:02:21.270
注释也可以打好了

01:02:21.270 --> 01:02:22.270
你要知道怎么用

01:02:22.270 --> 01:02:23.270
如果说你连这个东西

01:02:23.270 --> 01:02:24.270
都不知道的话

01:02:24.270 --> 01:02:25.270
你是看不了活的

01:02:25.270 --> 01:02:27.270
因为你们之后会遇到

01:02:27.270 --> 01:02:28.270
有一些函数

01:02:28.270 --> 01:02:29.270
它就是返回的Promise

01:02:29.270 --> 01:02:30.270
你就蒙了

01:02:30.270 --> 01:02:31.270
你不知道怎么去用

01:02:31.270 --> 01:02:32.270
拿了过去你就直接

01:02:32.270 --> 01:02:33.270
你就看

01:02:33.270 --> 01:02:34.270
你要不要做后续处理

01:02:34.270 --> 01:02:35.270
要的话

01:02:35.270 --> 01:02:36.270
那就写个证

01:02:37.270 --> 01:02:39.270
然后成功干嘛失败干嘛

01:02:39.270 --> 01:02:41.840
没意思吧

01:02:43.840 --> 01:02:44.840
那么这里

01:02:44.840 --> 01:02:45.840
当然有些函数

01:02:45.840 --> 01:02:46.840
有些Promise

01:02:46.840 --> 01:02:48.840
你是不需要进行后续处理的

01:02:48.840 --> 01:02:49.840
不知道大家还记不记得

01:02:49.840 --> 01:02:50.840
以前我们学过Audio元素

01:02:50.840 --> 01:02:52.840
Audio元素里边

01:02:53.840 --> 01:02:54.840
有一个方法叫play

01:02:54.840 --> 01:02:55.840
还记得吗

01:02:55.840 --> 01:02:56.840
什么

01:02:56.840 --> 01:02:57.840
这个方法是做很多事情

01:02:57.840 --> 01:02:58.840
这个方法就是

01:02:58.840 --> 01:02:59.840
让这个

01:03:00.840 --> 01:03:01.840
音频开始播放

01:03:01.840 --> 01:03:03.840
或者是视频开始播放

01:03:03.840 --> 01:03:04.840
对吧

01:03:05.840 --> 01:03:06.840
还记得这个函数吗

01:03:07.840 --> 01:03:08.840
我们当时还做了

01:03:08.840 --> 01:03:09.840
做过一个例子的

01:03:10.840 --> 01:03:12.840
这个函数返回的就是Promise

01:03:13.840 --> 01:03:14.840
同学说

01:03:14.840 --> 01:03:15.840
那我当时为什么

01:03:15.840 --> 01:03:16.840
没有用这个Zing的

01:03:16.840 --> 01:03:17.840
因为当时我不需要说

01:03:17.840 --> 01:03:18.840
后续处理

01:03:19.840 --> 01:03:20.840
为什么它返回的是Promise

01:03:20.840 --> 01:03:21.840
因为一个

01:03:22.840 --> 01:03:23.840
视频也好

01:03:23.840 --> 01:03:24.840
一个音频也好

01:03:24.840 --> 01:03:25.840
它播放

01:03:25.840 --> 01:03:27.840
开始播放是需要时间的

01:03:27.840 --> 01:03:29.840
它内部要做些处理的

01:03:29.840 --> 01:03:31.840
它是一个异步任务

01:03:31.840 --> 01:03:32.840
当然我们

01:03:32.840 --> 01:03:33.840
我们不需要说

01:03:33.840 --> 01:03:34.840
知道它

01:03:34.840 --> 01:03:35.840
真正开始播放的时候

01:03:35.840 --> 01:03:36.840
它什么时候完成

01:03:36.840 --> 01:03:38.840
就真正的开始播放的时候

01:03:39.840 --> 01:03:40.840
完成

01:03:40.840 --> 01:03:41.840
有的时候里面

01:03:41.840 --> 01:03:42.840
张网的时候

01:03:42.840 --> 01:03:43.840
你看点一下播放

01:03:43.840 --> 01:03:44.840
是不是要卡一下

01:03:44.840 --> 01:03:45.840
因为它是一个异步任务

01:03:45.840 --> 01:03:46.840
要等一下

01:03:46.840 --> 01:03:48.840
那么真正开始播放的时候

01:03:48.840 --> 01:03:49.840
这个任务完成

01:03:49.840 --> 01:03:50.840
因为我们当时是

01:03:50.840 --> 01:03:53.840
不需要做后续处理

01:03:53.840 --> 01:03:54.840
所以我们没有写证

01:03:54.840 --> 01:03:55.840
但实际上是可以写证的

01:03:55.840 --> 01:03:57.840
因为它真正开始播放的时候

01:03:57.840 --> 01:03:58.840
你要做什么事情

01:03:58.840 --> 01:03:59.840
你可以在这里写

01:03:59.840 --> 01:04:00.840
这样的意思

01:04:00.840 --> 01:04:01.840
当然我们这里

01:04:01.840 --> 01:04:02.840
是有后续处理的

01:04:02.840 --> 01:04:04.840
我去加载省份数据

01:04:05.840 --> 01:04:06.840
成功的时候

01:04:06.840 --> 01:04:07.840
它会得到一个省份数

01:04:07.840 --> 01:04:08.840
就运行这个数

01:04:08.840 --> 01:04:09.840
失败的时候

01:04:09.840 --> 01:04:10.840
给予失败原因

01:04:11.840 --> 01:04:12.840
那么我们的要求是

01:04:12.840 --> 01:04:13.840
让你利用

01:04:13.840 --> 01:04:15.840
这个GatePremise的数

01:04:15.840 --> 01:04:17.840
将省份数据加载到这里

01:04:18.840 --> 01:04:19.840
然后一点点来

01:04:19.840 --> 01:04:20.840
成功的时候

01:04:20.840 --> 01:04:21.840
它会运行这个

01:04:21.840 --> 01:04:22.840
我就把这个输出

01:04:22.840 --> 01:04:23.840
我看一下省份数据

01:04:23.840 --> 01:04:24.840
到底是什么格式

01:04:24.840 --> 01:04:25.840
失败的时候

01:04:25.840 --> 01:04:26.840
它会运行这里

01:04:26.840 --> 01:04:27.840
我就打印输失败原因

01:04:28.840 --> 01:04:33.070
咱们来看一下这个

01:04:34.070 --> 01:04:35.070
你看

01:04:35.070 --> 01:04:36.070
是不是打印出这么一个数据

01:04:38.070 --> 01:04:39.070
对吧

01:04:39.070 --> 01:04:40.070
这是从互联网中

01:04:40.070 --> 01:04:41.070
拿到的这个数据

01:04:41.070 --> 01:04:42.070
是不是打印出这个数据

01:04:43.070 --> 01:04:44.070
对吧

01:04:44.070 --> 01:04:45.070
这个函数里面

01:04:45.070 --> 01:04:46.070
不用去看

01:04:46.070 --> 01:04:47.070
你们以后都会学的

01:04:47.070 --> 01:04:48.070
现在告诉你

01:04:48.070 --> 01:04:49.070
这个函数函数

01:04:49.070 --> 01:04:50.070
会用

01:04:50.070 --> 01:04:51.070
好

01:04:51.070 --> 01:04:52.070
那么你就这个是一个数组

01:04:52.070 --> 01:04:53.070
对吧

01:04:53.070 --> 01:04:54.070
我要把它变成什么

01:04:54.070 --> 01:04:56.070
变成一个一个的Option

01:04:56.070 --> 01:04:57.070
放到这里面

01:04:58.070 --> 01:04:59.070
这种事情

01:04:59.070 --> 01:05:01.070
还用我说吗

01:05:01.070 --> 01:05:02.070
同学们

01:05:02.070 --> 01:05:03.070
你们自己尝试做一下

01:05:03.070 --> 01:05:04.070
写到这了

01:05:04.070 --> 01:05:06.070
你尝试把这个写完

01:05:06.070 --> 01:05:08.070
前面我们做了那么多

01:05:08.070 --> 01:05:09.070
关于数组的练习

01:05:10.070 --> 01:05:11.070
你们发我想样力吧

01:05:11.070 --> 01:05:12.070
这一块

01:05:12.070 --> 01:05:13.070
你用啥方式都可以

01:05:13.070 --> 01:05:14.070
有好多种方式

01:05:15.070 --> 01:05:16.070
好了我写一下吧

01:05:16.070 --> 01:05:17.070
这是一个数组

01:05:25.400 --> 01:05:26.400
看着这个片是不是个数组

01:05:27.400 --> 01:05:28.400
数组的每一项

01:05:28.400 --> 01:05:29.400
我是不是可以做印设

01:05:30.400 --> 01:05:31.400
把每一项的这个省份

01:05:32.400 --> 01:05:33.400
是一个对象吗

01:05:33.400 --> 01:05:34.400
每一项是不是个省份对象

01:05:35.400 --> 01:05:36.400
每一项就是个省份对象

01:05:36.400 --> 01:05:37.400
有两个属性

01:05:37.400 --> 01:05:38.400
一个是省份的名字

01:05:38.400 --> 01:05:39.400
一个是省份的Value

01:05:39.400 --> 01:05:40.400
我把每一个变成什么

01:05:40.400 --> 01:05:41.400
变成一个Option

01:05:42.400 --> 01:05:43.400
这个事情是不是

01:05:43.400 --> 01:05:45.710
做过的一项

01:05:45.710 --> 01:05:47.710
就变成一个自不错的Option

01:05:47.710 --> 01:05:48.710
它的值是什么

01:05:48.710 --> 01:05:50.710
Option的内容是什么

01:05:50.710 --> 01:05:51.710
内容就是

01:05:51.710 --> 01:05:52.710
这个对象的Label属性

01:05:53.710 --> 01:05:55.710
一般来说要给它写个Value

01:05:55.710 --> 01:05:56.710
Value的一般来说

01:05:56.710 --> 01:05:57.710
就指着什么意思呢

01:05:57.710 --> 01:05:59.710
就是它的油编

01:05:59.710 --> 01:06:00.710
编号

01:06:00.710 --> 01:06:01.710
省份的编号

01:06:01.710 --> 01:06:03.710
P的什么Value

01:06:04.710 --> 01:06:06.710
每一个省份对象

01:06:06.710 --> 01:06:08.710
我就不去生成这么一个东西

01:06:08.710 --> 01:06:10.710
生成一个自不错吗

01:06:10.710 --> 01:06:12.710
然后最后把个自不错连接起来

01:06:12.710 --> 01:06:14.710
就形成一段ATM片段了

01:06:15.710 --> 01:06:17.710
所以我的后续处理很简单

01:06:17.710 --> 01:06:18.710
我把这个省份对象

01:06:18.710 --> 01:06:19.710
一个数组

01:06:19.710 --> 01:06:21.710
变成一个ATM自不错

01:06:21.710 --> 01:06:22.710
然后给它放到这里边

01:06:29.600 --> 01:06:31.600
这里我没有用Galaxy Element by ID

01:06:31.600 --> 01:06:32.600
去拿到它

01:06:32.600 --> 01:06:33.600
因为

01:06:33.600 --> 01:06:34.600
浏览器里边

01:06:34.600 --> 01:06:35.600
如果说

01:06:35.600 --> 01:06:36.600
你可以直接使用它的ID

01:06:36.600 --> 01:06:37.600
作为动物对象

01:06:37.600 --> 01:06:38.600
但是一般来说

01:06:38.600 --> 01:06:39.600
不推荐这样用

01:06:39.600 --> 01:06:41.600
我还是写的规范一点吧

01:06:42.600 --> 01:06:43.600
我写规范一点

01:06:43.600 --> 01:06:53.020
好看一下

01:06:53.020 --> 01:06:54.020
页面上

01:06:54.020 --> 01:06:55.020
出来了

01:06:55.020 --> 01:06:56.020
对吧

01:06:56.020 --> 01:06:57.020
看一下我的元素结构

01:06:58.020 --> 01:06:59.020
白绿

01:06:59.020 --> 01:07:00.020
纹的

01:07:00.020 --> 01:07:01.020
出来了

01:07:01.020 --> 01:07:02.020
好

01:07:02.020 --> 01:07:03.020
这是这道题

01:07:04.020 --> 01:07:05.020
下一道题

01:07:05.020 --> 01:07:07.780
问

01:07:07.780 --> 01:07:09.780
这是一道简单的面试题

01:07:09.780 --> 01:07:10.780
这是不是面试题

01:07:10.780 --> 01:07:12.780
是简单的面试题

01:07:13.780 --> 01:07:15.780
他问你下面有两个Promise对象

01:07:15.780 --> 01:07:16.780
对吧

01:07:16.780 --> 01:07:17.780
一个 两个

01:07:17.780 --> 01:07:18.780
问你每一个Promise的最终状态

01:07:18.780 --> 01:07:20.780
最终程序运行完了

01:07:20.780 --> 01:07:21.780
等了一很久了

01:07:21.780 --> 01:07:23.780
它的最终状态是什么

01:07:24.780 --> 01:07:26.780
然后相关的数据

01:07:26.780 --> 01:07:27.780
成功了

01:07:27.780 --> 01:07:28.780
它就有一个相关数据

01:07:28.780 --> 01:07:29.780
失败了

01:07:29.780 --> 01:07:30.780
它有一个相关原因

01:07:30.780 --> 01:07:32.780
输出结构又是什么

01:07:32.780 --> 01:07:33.780
好

01:07:33.780 --> 01:07:34.780
咱们看第一道题

01:07:34.780 --> 01:07:38.660
创建一个任务开始运行

01:07:38.660 --> 01:07:40.660
是不是一开始会输出

01:07:40.660 --> 01:07:41.660
运行任务里面的函数

01:07:41.660 --> 01:07:43.660
所以一开始会输出任务开始

01:07:43.660 --> 01:07:45.660
这个等问题吧

01:07:51.980 --> 01:07:53.980
任务开始

01:07:53.980 --> 01:07:54.980
对不对

01:07:54.980 --> 01:07:56.980
然后呢

01:07:56.980 --> 01:07:59.980
接下来任务一开始的状态是什么

01:07:59.980 --> 01:08:01.980
再开一个

01:08:01.980 --> 01:08:04.980
这个任务一开始的状态一定是平底

01:08:04.980 --> 01:08:06.980
状态一定是平底

01:08:06.980 --> 01:08:07.980
挂起的

01:08:08.980 --> 01:08:10.980
然后我们雕用了这句话

01:08:10.980 --> 01:08:11.980
雕用了这句话

01:08:11.980 --> 01:08:12.980
会导致什么

01:08:12.980 --> 01:08:14.980
会导致个任务状态变的话

01:08:14.980 --> 01:08:15.980
变成什么

01:08:15.980 --> 01:08:16.980
变成

01:08:16.980 --> 01:08:18.980
for field

01:08:18.980 --> 01:08:20.980
是讲过的

01:08:20.980 --> 01:08:21.980
而我们传递的一个E

01:08:21.980 --> 01:08:23.980
那么它的相关数据是什么

01:08:23.980 --> 01:08:25.980
相关数据就是一个E

01:08:26.980 --> 01:08:27.980
好

01:08:27.980 --> 01:08:28.980
看下一句话

01:08:28.980 --> 01:08:30.980
我又尝试的把这个任务变成

01:08:32.980 --> 01:08:33.980
拒绝状态

01:08:33.980 --> 01:08:35.980
可以吗

01:08:35.980 --> 01:08:36.980
行吗

01:08:36.980 --> 01:08:38.980
不行哦同学

01:08:38.980 --> 01:08:39.980
还记得吗

01:08:39.980 --> 01:08:41.980
我之前说过了

01:08:41.980 --> 01:08:43.980
反复的强调过了

01:08:43.980 --> 01:08:45.980
时间不能倒流

01:08:45.980 --> 01:08:47.980
历史不能重写

01:08:47.980 --> 01:08:49.980
任务一旦确定下来

01:08:49.980 --> 01:08:50.980
状态就固定了

01:08:50.980 --> 01:08:52.980
永远无法改变

01:08:52.980 --> 01:08:53.980
所以说

01:08:53.980 --> 01:08:55.980
后边的这个代码

01:08:55.980 --> 01:08:57.980
是无效的

01:08:58.980 --> 01:08:59.980
就是你这个代码

01:08:59.980 --> 01:09:00.980
运行的跟没运行是一样

01:09:00.980 --> 01:09:01.980
它不爆错

01:09:01.980 --> 01:09:03.980
它无效

01:09:03.980 --> 01:09:05.980
然后下边这一句

01:09:05.980 --> 01:09:06.980
也是无效的

01:09:06.980 --> 01:09:07.980
你尝试了去

01:09:07.980 --> 01:09:09.980
更改任务状态也好

01:09:09.980 --> 01:09:10.980
更改这个数据也好

01:09:10.980 --> 01:09:11.980
全部都无效

01:09:11.980 --> 01:09:12.980
说这两行代码

01:09:12.980 --> 01:09:13.980
运不运行

01:09:13.980 --> 01:09:14.980
运行

01:09:14.980 --> 01:09:15.980
运行的跟没运行是一样的

01:09:15.980 --> 01:09:17.980
无效

01:09:17.980 --> 01:09:18.980
好

01:09:18.980 --> 01:09:19.980
然后呢

01:09:19.980 --> 01:09:21.980
得到任务结束

01:09:21.980 --> 01:09:23.980
输出任务结束

01:09:23.980 --> 01:09:24.980
最后问你

01:09:24.980 --> 01:09:26.980
这个任务的最终状态是啥

01:09:26.980 --> 01:09:28.980
付非有的

01:09:28.980 --> 01:09:29.980
数据是什么

01:09:29.980 --> 01:09:30.980
一

01:09:30.980 --> 01:09:31.980
最终输出什么

01:09:31.980 --> 01:09:33.980
任务开始任务结束

01:09:33.980 --> 01:09:34.980
没啥意思

01:09:34.980 --> 01:09:35.980
好

01:09:35.980 --> 01:09:36.980
就是这一点

01:09:37.980 --> 01:09:38.980
那么下边这个

01:09:38.980 --> 01:09:39.980
你们自行分析

01:09:39.980 --> 01:09:41.980
我就去叫了一个reject

01:09:41.980 --> 01:09:42.980
是一样的

01:09:42.980 --> 01:09:44.980
这个是无效的

01:09:44.980 --> 01:09:45.980
所以说

01:09:45.980 --> 01:09:46.980
下面这个任务

01:09:46.980 --> 01:09:47.980
最终结果也是一样

01:09:47.980 --> 01:09:49.980
任务开始任务结束

01:09:49.980 --> 01:09:50.980
然后呢

01:09:50.980 --> 01:09:52.980
最终状态的付非有的

01:09:52.980 --> 01:09:53.980
一

01:09:53.980 --> 01:09:54.980
好

01:09:54.980 --> 01:09:55.980
咱们来看一下吧

01:09:55.980 --> 01:09:57.980
看一下我们能不能通过

01:09:57.980 --> 01:09:58.980
打印的

01:09:58.980 --> 01:09:59.980
看得出来

01:09:59.980 --> 01:10:00.980
我再来演示了

01:10:00.980 --> 01:10:02.980
这是Promise 1

01:10:02.980 --> 01:10:05.980
我这里就直接输出Promise 1的状态

01:10:05.980 --> 01:10:07.980
就这么状态

01:10:07.980 --> 01:10:08.980
你看

01:10:08.980 --> 01:10:09.980
任务开始任务结束

01:10:09.980 --> 01:10:10.980
他告诉你Promise完成了

01:10:10.980 --> 01:10:12.980
他的数据是1

01:10:12.980 --> 01:10:14.980
没啥意思

01:10:14.980 --> 01:10:15.980
好

01:10:15.980 --> 01:10:18.350
看下面这个

01:10:18.350 --> 01:10:19.350
你们自己去弄

01:10:19.350 --> 01:10:21.350
结果肯定是一样的

01:10:21.350 --> 01:10:23.350
好咱们就是咱们这些课的内容

01:10:23.350 --> 01:10:24.350
好

01:10:24.350 --> 01:10:25.350
这些课呢

01:10:25.350 --> 01:10:27.350
大家下去花一些时间

01:10:27.350 --> 01:10:29.350
特别重要的是把这个规范

01:10:29.350 --> 01:10:30.350
就这张图

01:10:30.350 --> 01:10:31.350
好好去

01:10:31.350 --> 01:10:32.350
就这张图

01:10:32.350 --> 01:10:33.350
想清楚

01:10:33.350 --> 01:10:35.350
他这个任务到底是怎么一样

01:10:35.350 --> 01:10:36.350
怎么样的转换过程

01:10:36.350 --> 01:10:38.350
然后呢

01:10:38.350 --> 01:10:39.350
把这些题做成

01:10:39.350 --> 01:10:41.350
把这一题练习题做完就OK了

01:10:41.350 --> 01:10:43.350
没到底理解

01:10:43.350 --> 01:10:45.350
他到底是怎么回事

01:10:45.350 --> 01:10:46.350
理解

01:10:46.350 --> 01:10:47.350
我们这些课呢

01:10:47.350 --> 01:10:48.350
其实要求不高

01:10:48.350 --> 01:10:50.350
就只需要你会创建任务

01:10:50.350 --> 01:10:51.350
只需要你出去做

01:10:51.350 --> 01:10:52.350
针对这个任务做

01:10:52.350 --> 01:10:53.350
后续处理就OK了

01:10:53.350 --> 01:10:55.350
把这些题做完

01:10:55.350 --> 01:10:57.350
后边还有关于Promise的一些事情

01:10:57.350 --> 01:10:58.350
我们慢慢去聊

01:10:58.350 --> 01:11:00.350
我们前面的学性呢

01:11:00.350 --> 01:11:02.350
我也不希望

01:11:02.350 --> 01:11:03.350
给大家增加太多的坑

01:11:03.350 --> 01:11:04.350
但是呢

01:11:04.350 --> 01:11:06.350
Promise是一定要卖过去的

01:11:06.350 --> 01:11:08.350
这个其实已经比后端好多了

01:11:08.350 --> 01:11:10.350
后端有个很大的

01:11:10.350 --> 01:11:11.350
就是面向对象

01:11:11.350 --> 01:11:12.350
那个坑

01:11:12.350 --> 01:11:13.350
很多同学卖不过去的

01:11:13.350 --> 01:11:15.350
很痛苦很痛苦的

01:11:15.350 --> 01:11:17.350
你们实际上是没有那么高的坑

01:11:17.350 --> 01:11:19.350
就这个一个Promise

01:11:19.350 --> 01:11:20.350
把它搞定

