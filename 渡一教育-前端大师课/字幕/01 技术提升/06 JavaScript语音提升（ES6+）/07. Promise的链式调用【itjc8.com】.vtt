WEBVTT

00:00.000 --> 00:03.000
这些课呢咱们来学习Promise的链式处理

00:03.000 --> 00:08.000
Promise的链式处理呢应该算是Promise里边最复杂的一块内容了

00:08.000 --> 00:13.000
这一块内容呢也是面试题考的比较多的部分

00:13.000 --> 00:15.000
面试题如果说考Promise

00:15.000 --> 00:18.000
基本上一定是可以考这个Promise

00:18.000 --> 00:24.000
如果说考Promise的话考的一些比试题最多的也就是这个链式处理

00:24.000 --> 00:26.000
链式处理里边有很多的规则

00:26.000 --> 00:29.000
但是这些规则呢其实我们在现实生活中都可以找到

00:29.000 --> 00:31.000
这么一个例子

00:31.000 --> 00:33.000
这里呢其实就有两张图

00:33.000 --> 00:35.000
上面这张图呢是我们上级课

00:35.000 --> 00:36.000
给大家放出来这么一张图

00:36.000 --> 00:38.000
就是咱们学开发呀

00:38.000 --> 00:41.000
可不多 特别是前端可真的不多

00:41.000 --> 00:42.000
这是一个可

00:42.000 --> 00:44.000
我们同学们加油吧

00:44.000 --> 00:45.000
把它搞定

00:45.000 --> 00:47.000
多花点时间把它搞定就完事了

00:47.000 --> 00:49.000
你后面就再也不用怕它了

00:49.000 --> 00:51.000
第一张图呢是我们上级课的图

00:51.000 --> 00:53.000
对吧 这是单个Promise对象

00:53.000 --> 00:54.000
咱们上级课学过了

00:54.000 --> 00:56.000
如何去创建一个Promise对象

00:56.000 --> 00:58.000
如何去根据它的状态

00:58.000 --> 01:00.000
来做一些进一步的处理

01:00.000 --> 01:02.000
这是我们上级课的指示

01:02.000 --> 01:03.000
上级课这张图啊大家一定要印到

01:03.000 --> 01:05.000
印到牢海里边

01:05.000 --> 01:08.000
时间我是给大家留充足的

01:08.000 --> 01:10.000
我希望通过这

01:10.000 --> 01:12.000
同学们下来过后

01:12.000 --> 01:14.000
一定要好好地把它理解清楚

01:14.000 --> 01:16.000
这张图

01:16.000 --> 01:18.000
大家已经在牢海里边要形成这么一张图

01:18.000 --> 01:20.000
没事的时候呢多去过一步

01:20.000 --> 01:22.000
看单个Promise对象是怎么去

01:22.000 --> 01:24.000
确定状态的

01:25.000 --> 01:27.000
好 这里和我们进入这里和的指示

01:27.000 --> 01:29.000
首先我给大家补充一点点东西

01:29.000 --> 01:31.000
就是一个开启方法

01:31.000 --> 01:32.000
特别特别简单

01:32.000 --> 01:34.000
它什么意思呢

01:34.000 --> 01:36.000
就说我们之前做后续处理

01:36.000 --> 01:37.000
用的是什么方法

01:37.000 --> 01:39.000
用的是这个Zing方法对吧

01:39.000 --> 01:41.000
Zing方法里边是有两个参数

01:41.000 --> 01:43.000
第一个参数呢是成功的处理

01:43.000 --> 01:45.000
第二个参数呢是失败的处理

01:45.000 --> 01:47.000
那如果说你只想处理

01:47.000 --> 01:49.000
只想处理失败

01:49.000 --> 01:50.000
不想处理成功呢

01:50.000 --> 01:52.000
成功无所谓你成功就成功没

01:52.000 --> 01:54.000
我只想处理失败

01:54.000 --> 01:56.000
比方说邓哥那个例子

01:56.000 --> 01:58.000
你同意了过后

01:58.000 --> 02:00.000
就没啥了对吧

02:00.000 --> 02:01.000
当然还是有些后续处理

02:01.000 --> 02:03.000
比方说我就啥也不做了

02:03.000 --> 02:04.000
我就玩

02:04.000 --> 02:06.000
我就发给短信玩一会

02:06.000 --> 02:07.000
啥也不做了

02:07.000 --> 02:08.000
那你失败了过后呢

02:08.000 --> 02:11.000
我得给下一位去发送消息

02:11.000 --> 02:12.000
对吧

02:12.000 --> 02:13.000
所以我只有失败的处理

02:13.000 --> 02:14.000
没有成功的处理

02:14.000 --> 02:16.000
那么你就可以写成这种格式

02:16.000 --> 02:18.000
成功呢我传一个闹

02:18.000 --> 02:19.000
我啥也不传

02:19.000 --> 02:21.000
那么失败的时候呢

02:21.000 --> 02:23.000
我传一个回调函数的进行处理

02:23.000 --> 02:25.000
那么这种写法呢

02:25.000 --> 02:28.000
它可以等效于前面这种写法

02:28.000 --> 02:29.000
catch

02:29.000 --> 02:31.000
只传一个失败的处理

02:31.000 --> 02:32.000
是一样的啊

02:32.000 --> 02:33.000
完全一样的

02:33.000 --> 02:34.000
我举个例子吧

02:34.000 --> 02:36.000
比方说这里呢

02:36.000 --> 02:39.890
我给他写上这么一个

02:39.890 --> 02:40.890
E2CS

02:40.890 --> 02:43.890
我们这里呢写一个new promise

02:43.890 --> 02:46.890
visual

02:46.890 --> 02:47.890
比方说吧

02:47.890 --> 02:49.890
我就直接失败

02:49.890 --> 02:52.890
创建一个错误对象

02:52.890 --> 02:54.890
abc吧随便给个消息

02:54.890 --> 02:55.890
我失败了

02:55.890 --> 02:57.890
我给一个失败的原因

02:57.890 --> 02:58.890
失败的原因呢

02:58.890 --> 02:59.890
一般来说

02:59.890 --> 03:01.890
一般来说是一个错误对象

03:01.890 --> 03:03.890
当然这里可以写任何东西

03:03.890 --> 03:04.890
失败了

03:04.890 --> 03:05.890
这个任务是不是失败了

03:05.890 --> 03:08.890
那么这个任务失败了之后呢

03:08.890 --> 03:09.890
好失败了之后呢

03:09.890 --> 03:11.890
我们需要对这个失败的

03:11.890 --> 03:12.890
做一些处理

03:12.890 --> 03:14.890
我们可以怎么写呢

03:14.890 --> 03:16.890
我们可以用这种方式

03:16.890 --> 03:18.890
成功不处理

03:18.890 --> 03:19.890
失败呢

03:19.890 --> 03:21.890
我们就对失败的原因

03:21.890 --> 03:22.890
其实这个玩意

03:22.890 --> 03:24.890
跟这个玩意就是一样的

03:24.890 --> 03:25.890
它失败了过后

03:25.890 --> 03:26.890
它就会传过来

03:26.890 --> 03:27.890
执行这个函数

03:27.890 --> 03:28.890
我们这里呢

03:28.890 --> 03:30.890
把这个失败的原因输出

03:30.890 --> 03:31.890
对吧

03:31.890 --> 03:32.890
我们就把前面打两个字吧

03:32.890 --> 03:35.260
失败了

03:35.260 --> 03:36.260
好 这里呢

03:36.260 --> 03:38.260
我们运行看一下

03:38.260 --> 03:39.260
是不是运行了

03:39.260 --> 03:40.260
失败了

03:40.260 --> 03:41.260
这个函数是不是得到运行

03:41.260 --> 03:42.260
对吧

03:42.260 --> 03:43.260
这就非常简单

03:43.260 --> 03:44.260
这里呢

03:44.260 --> 03:45.260
我说一个点

03:45.260 --> 03:46.260
就是说

03:46.260 --> 03:48.260
如果说失败了

03:48.260 --> 03:50.260
你没有对失败进行处理

03:50.260 --> 03:51.260
比方说失败

03:51.260 --> 03:52.260
我也传的是哪

03:52.260 --> 03:53.260
相对于是没有处理的

03:53.260 --> 03:54.260
对吧

03:54.260 --> 03:55.260
相对于没有写这个函数的

03:55.260 --> 03:57.260
如果说你没有对它进行

03:57.260 --> 03:58.260
失败处理的话

03:58.260 --> 04:00.260
它会给你报一个警告

04:00.260 --> 04:02.260
它说有一个为处理的

04:02.260 --> 04:03.260
Promise

04:03.260 --> 04:04.260
这个Promise失败了

04:04.260 --> 04:05.260
但是你没有处理

04:05.260 --> 04:07.260
它会给你报这么一个警告

04:07.260 --> 04:08.260
这是我们上集号

04:08.260 --> 04:09.260
好像遇到过

04:09.260 --> 04:10.260
当时我说的是

04:10.260 --> 04:11.260
后续给大家讲

04:11.260 --> 04:13.260
这些给大家补充一下

04:13.260 --> 04:14.260
那么这里呢

04:14.260 --> 04:15.260
我处理的过后呢

04:15.260 --> 04:17.260
它就不会有这个警告了

04:17.260 --> 04:18.260
刚才同学说

04:18.260 --> 04:19.260
不是还是爆出了吗

04:19.260 --> 04:21.260
这个爆出是因为我打印出来的

04:21.260 --> 04:22.260
如果说你没有打印出来的话

04:22.260 --> 04:23.260
那就看见了

04:23.260 --> 04:25.260
它只有一个失败

04:25.260 --> 04:26.260
这个错误呢

04:26.260 --> 04:28.260
我把错误对象打印出来的

04:28.260 --> 04:30.260
这就是咱们那个

04:30.260 --> 04:31.260
任意方法可以处理成功

04:31.260 --> 04:32.260
也可以处理失败

04:32.260 --> 04:34.260
那么如果说像这种情况

04:34.260 --> 04:35.260
我只处理的失败

04:35.260 --> 04:36.260
没有处理成功

04:36.260 --> 04:37.260
那我可以这样的写

04:37.260 --> 04:40.830
把它写成开启

04:40.830 --> 04:41.830
对吧

04:41.830 --> 04:42.830
只传一个回调函数

04:42.830 --> 04:43.830
就是失败的回调函数

04:43.830 --> 04:45.830
效果是完全一样的

04:45.830 --> 04:46.830
这是给大家补充一个

04:46.830 --> 04:47.830
开启方法

04:47.830 --> 04:48.830
这不是重点

04:48.830 --> 04:49.830
重点是下边

04:49.830 --> 04:51.830
电视调用

04:51.830 --> 04:55.210
在现实生活中

04:55.210 --> 04:57.210
其实咱们很多事

04:57.210 --> 05:00.210
它不是单个任务孤立存在的

05:00.210 --> 05:03.210
它是有很多任务串联起来的

05:03.210 --> 05:05.210
比方说我们举个例子

05:05.210 --> 05:07.210
那个

05:07.210 --> 05:09.210
我们就与高考为例吧

05:09.210 --> 05:10.210
你读大学为例

05:10.210 --> 05:12.210
你得先学习吧

05:12.210 --> 05:13.210
学习也是一个任务

05:13.210 --> 05:14.210
对吧

05:14.210 --> 05:15.210
学习完了之后呢

05:15.210 --> 05:17.210
我要考试

05:18.210 --> 05:19.210
考试完了过后呢

05:19.210 --> 05:21.210
出成绩

05:21.210 --> 05:22.210
成绩出了之后呢

05:22.210 --> 05:24.210
田志愿

05:24.210 --> 05:25.210
对吧

05:25.210 --> 05:26.210
田志愿

05:26.210 --> 05:28.210
然后再去入学

05:28.210 --> 05:30.210
是不是有这么一个过程

05:30.210 --> 05:31.210
对吧

05:31.210 --> 05:32.210
前面的事没完

05:32.210 --> 05:33.210
后面的事就进行不了

05:33.210 --> 05:35.210
是不是有一个串形的过程

05:35.210 --> 05:36.210
对吧

05:36.210 --> 05:37.210
前面的任务呢

05:37.210 --> 05:38.210
一个是一个接一个

05:38.210 --> 05:39.210
一个接一个出现的

05:39.210 --> 05:41.210
这就是多任务的场景

05:41.210 --> 05:43.210
那么这个场景呢

05:43.210 --> 05:45.210
就特别适合练试掉入

05:45.210 --> 05:46.210
啥意思啊

05:47.210 --> 05:49.210
我们认为考试

05:49.210 --> 05:51.210
是学习的后续处理

05:51.210 --> 05:52.210
你学完了

05:52.210 --> 05:53.210
这是一个独立的任务

05:53.210 --> 05:55.210
学完了过后得考试吧

05:55.210 --> 05:57.210
考试又是一个新的任务

05:57.210 --> 05:58.210
所以说我们这里呢

05:58.210 --> 05:59.210
就会发现

05:59.210 --> 06:01.210
后续处理

06:01.210 --> 06:04.210
它也是一个新任务

06:04.210 --> 06:05.210
因此呢

06:05.210 --> 06:06.210
反映到代码里面

06:06.210 --> 06:08.210
就会有这么一个特点

06:08.210 --> 06:10.210
这个Zing方法

06:10.210 --> 06:13.210
它会返回一个新的Promise

06:13.210 --> 06:14.210
逻辑呢

06:14.210 --> 06:15.210
就是

06:15.210 --> 06:16.210
Zing是什么逻辑

06:16.210 --> 06:17.210
Zing就是然后

06:17.210 --> 06:19.210
然后是不是后续处理

06:19.210 --> 06:20.210
后续处理

06:20.210 --> 06:22.210
仍然是一个任务

06:22.210 --> 06:24.210
我们在代码里面看一下

06:24.210 --> 06:27.930
我们就

06:27.930 --> 06:28.930
如何来表述

06:28.930 --> 06:29.930
学习完了考试呢

06:29.930 --> 06:30.930
我们就这样

06:30.930 --> 06:32.930
New一个Promise

06:32.930 --> 06:33.930
首先我们进行学习

06:33.930 --> 06:34.930
对吧

06:34.930 --> 06:37.930
我们这里就输出学习

06:37.930 --> 06:38.930
学习完了过后呢

06:38.930 --> 06:41.930
我们Result

06:41.930 --> 06:45.930
我们学习这个任务就结束了

06:45.930 --> 06:46.930
都是这个任务

06:46.930 --> 06:47.930
这个任务呢

06:47.930 --> 06:48.930
就是学习

06:48.930 --> 06:49.930
学习完了过后

06:49.930 --> 06:50.930
任务结束

06:50.930 --> 06:51.930
成功

06:51.930 --> 06:52.930
好

06:52.930 --> 06:53.930
学习完了过后

06:53.930 --> 06:54.930
我们是不是有后续处理

06:54.930 --> 06:55.930
后续干嘛

06:55.930 --> 06:57.930
后续是不是考试

06:57.930 --> 06:58.930
好

06:58.930 --> 06:59.930
我们来输出一下

06:59.930 --> 07:00.930
后续就是考试

07:00.930 --> 07:01.930
你现在这里呢

07:01.930 --> 07:02.930
我就

07:02.930 --> 07:03.930
我也不需要数据

07:03.930 --> 07:04.930
这边也没有个传数据

07:04.930 --> 07:05.930
对吧

07:05.930 --> 07:06.930
我就随便写一些

07:06.930 --> 07:07.930
好

07:07.930 --> 07:08.930
考试

07:08.930 --> 07:09.930
就这个东西

07:09.930 --> 07:11.930
它也是一个新的任务

07:11.930 --> 07:12.930
哎

07:12.930 --> 07:13.930
可以说

07:13.930 --> 07:14.930
那这个玩意不就是个回调函数吗

07:14.930 --> 07:15.930
怎么来看出

07:15.930 --> 07:16.930
这样子的

07:16.930 --> 07:17.930
这个任方法

07:17.930 --> 07:20.930
它会返回一个新的Promise

07:20.930 --> 07:21.930
我来看一下

07:21.930 --> 07:22.930
输出一下PRO2

07:22.930 --> 07:23.930
你看一下

07:23.930 --> 07:25.930
是不是一个任务

07:25.930 --> 07:26.930
说一个任务

07:26.930 --> 07:29.930
PRO2它仍然是一个任务

07:29.930 --> 07:30.930
没了意思吧

07:30.930 --> 07:32.930
这个输出顺序先不要管

07:32.930 --> 07:35.930
我们后面还会讲的

07:35.930 --> 07:36.930
为什么没有先

07:36.930 --> 07:37.930
不是先输出考试

07:37.930 --> 07:39.930
再去输出这个Promise

07:39.930 --> 07:40.930
我们后面会讲

07:40.930 --> 07:41.930
现在不用去过多考虑

07:41.930 --> 07:42.930
其实也非常简单

07:42.930 --> 07:44.930
就是任方法里边的

07:44.930 --> 07:47.930
rejected和unfulfilled

07:47.930 --> 07:49.930
它们都是进入微对立

07:49.930 --> 07:52.930
所以说这是一个异步的函数

07:52.930 --> 07:53.930
它会在事件对立里边

07:53.930 --> 07:55.930
就前面同步代码执行完了之后

07:55.930 --> 07:58.930
它会从事件对立里边拿出来执行

07:58.930 --> 07:59.930
我们后面再慢慢讲吧

07:59.930 --> 08:00.930
后面就做一些题

08:00.930 --> 08:01.930
再慢慢讲这个东西

08:01.930 --> 08:03.930
我们现在关注的就是

08:03.930 --> 08:05.930
这个PRO2是什么东西

08:05.930 --> 08:07.930
它仍然是一个Promise

08:07.930 --> 08:08.930
哪来的

08:08.930 --> 08:10.930
是不是任方法返回的

08:10.930 --> 08:11.930
一定要用任方法

08:11.930 --> 08:13.930
给它传了一个什么东西

08:13.930 --> 08:14.930
然后这个认函数

08:14.930 --> 08:16.930
它就会返回一个新的Promise

08:16.930 --> 08:17.930
你要这意思吗

08:17.930 --> 08:19.930
这就是这个任务

08:19.930 --> 08:21.930
它是怎么串起来的

08:21.930 --> 08:24.930
前一个任务做了后续处理

08:24.930 --> 08:25.930
那么这个后续处理

08:25.930 --> 08:27.930
会返回一个新的Promise

08:27.930 --> 08:29.930
那么后边出成绩也是一样

08:29.930 --> 08:31.930
那如果说针对PRO2

08:31.930 --> 08:34.930
我也有后续处理

08:34.930 --> 08:37.930
考试完了过后出成绩

08:37.930 --> 08:41.500
那么这个任方法

08:41.500 --> 08:43.500
它又会返回一个Promise

08:44.500 --> 08:47.500
我们来输出一下PRO3

08:47.500 --> 08:51.900
你看还是一个Promise

08:51.900 --> 08:54.900
对吧都是Promise

08:54.900 --> 08:56.900
就一个一任务接着一个任务

08:56.900 --> 08:58.900
所以先把这个点认识清楚

08:58.900 --> 09:00.900
当然这里边有很多细节

09:00.900 --> 09:03.900
马上就麻烦再细节特别多

09:03.900 --> 09:04.900
好 第二个

09:04.900 --> 09:07.900
关键就是新的任务的状态

09:07.900 --> 09:08.900
是什么的

09:08.900 --> 09:09.900
你不是返回一个新的任务吗

09:09.900 --> 09:11.900
原始任务清楚

09:11.900 --> 09:12.900
原始任务的状态

09:12.900 --> 09:14.900
就是看你钓没钓锐肉

09:14.900 --> 09:15.900
就成功了

09:15.900 --> 09:17.900
钓锐接个体的就失败了

09:17.900 --> 09:18.900
那我这里边

09:18.900 --> 09:19.900
为什么没有写这些结构体的

09:19.900 --> 09:20.900
因为我没用

09:20.900 --> 09:23.900
没用的话就可以不写

09:23.900 --> 09:26.900
就是这里我只挑了锐肉

09:26.900 --> 09:28.900
所以说这个任务最终就成功了

09:28.900 --> 09:30.900
关键是后边这些任务

09:30.900 --> 09:32.900
它的状态是什么呢

09:32.900 --> 09:33.900
这些任务

09:33.900 --> 09:34.900
它是没有锐肉可以调的

09:34.900 --> 09:36.900
没有锐肉可以调的

09:36.900 --> 09:41.900
它的状态就有这么一二三点

09:41.900 --> 09:43.900
这三个点你也清楚了

09:43.900 --> 09:46.900
你把promise的这一块知识

09:46.900 --> 09:48.900
随便出面是听

09:48.900 --> 09:50.900
没有任何问题

09:50.900 --> 09:52.900
就是三个点

09:52.900 --> 09:53.900
要一点一点的慢慢来

09:53.900 --> 09:54.900
慢慢理解清楚

09:54.900 --> 09:57.900
这个其实跟现实世界是寡革的

09:57.900 --> 09:59.900
第一个

09:59.900 --> 10:03.900
如果说你前一个任务

10:03.900 --> 10:06.900
没有相关的后续处理

10:06.900 --> 10:08.900
那么新的任务的状态

10:08.900 --> 10:11.900
和前面的任务一致

10:11.900 --> 10:14.900
数据就跟前面的任务的数据

10:14.900 --> 10:15.900
是一样的

10:15.900 --> 10:17.900
这说的是啥意思

10:17.900 --> 10:18.900
我给大家举个例子

10:18.900 --> 10:21.900
先从感性来认识

10:21.900 --> 10:26.900
比方说你在学习的过程中

10:26.900 --> 10:28.900
突然出了一些问题

10:28.900 --> 10:33.900
比方说出了什么样的问题呢

10:33.900 --> 10:37.900
你家里边买彩票中了大奖

10:37.900 --> 10:39.900
这个时候觉得你家里面有晃了

10:39.900 --> 10:40.900
中了五个亿

10:40.900 --> 10:43.900
你发现自己好像不用学习了

10:43.900 --> 10:47.900
这个时候学习这个任务

10:47.900 --> 10:48.900
是不是完不成了

10:48.900 --> 10:50.900
是不是就失败了

10:50.900 --> 10:52.900
你不需要学习了

10:52.900 --> 10:54.900
但是失败之后

10:54.900 --> 10:56.900
你又没有针对失败进行处理

10:56.900 --> 10:58.900
不学习就干嘛

10:58.900 --> 11:02.900
就导致了考试进行不下去了

11:02.900 --> 11:03.900
是不是这个逻辑

11:03.900 --> 11:04.900
你学习失败了

11:04.900 --> 11:06.900
是不是导致考试进行不下去了

11:06.900 --> 11:08.900
说学习这个任务

11:08.900 --> 11:09.900
这个任务本身失败了

11:09.900 --> 11:12.900
那么考试这个任务他也得失败

11:12.900 --> 11:15.900
如果说你没有针对这个失败进行处理的话

11:15.900 --> 11:17.900
那么他也得失败

11:17.900 --> 11:18.900
我举个例子

11:18.900 --> 11:20.900
比方说我这里学习

11:20.900 --> 11:22.900
突然我中奖了

11:22.900 --> 11:25.900
就在这写吧

11:25.900 --> 11:29.900
我突然中奖五个亿

11:29.900 --> 11:30.900
不学了

11:30.900 --> 11:35.230
那么这个是不是任务失败了

11:35.230 --> 11:36.230
就这个

11:36.230 --> 11:39.230
这里我把这个字加上

11:39.230 --> 11:42.610
是不是任务失败了

11:42.610 --> 11:43.610
好

11:43.610 --> 11:45.610
如果说我们把这后边删掉

11:45.610 --> 11:47.610
前面这个任务

11:47.610 --> 11:49.610
我针对这个任务做后续处理

11:49.610 --> 11:50.610
我只处理了成功

11:50.610 --> 11:52.610
成功过后我考试

11:52.610 --> 11:55.610
但是失败我没有处理

11:55.610 --> 11:56.610
我没有处理他失败

11:56.610 --> 11:58.610
但是学习失败了怎么办

11:58.610 --> 11:59.610
我没有处理

11:59.610 --> 12:00.610
没有处理

12:00.610 --> 12:02.610
这个任务他也会跟着失败

12:02.610 --> 12:03.610
他进行不下去了

12:03.610 --> 12:06.610
比方说前一个导致了后一个失败

12:06.610 --> 12:09.240
你看啊

12:09.240 --> 12:11.240
后边这个任务我等一会

12:11.240 --> 12:14.240
我用这摊帽子来输出

12:14.240 --> 12:15.240
不能直接输出

12:15.240 --> 12:16.240
直接输出是平底

12:16.240 --> 12:19.240
我们这里用一个一秒钟之后

12:19.240 --> 12:20.240
来输出

12:20.240 --> 12:22.240
为什么使这些输出是平底

12:22.240 --> 12:23.240
我后边会说

12:23.240 --> 12:24.240
现在不用管

12:24.240 --> 12:28.320
我们关注这个Promise 2的状态

12:28.320 --> 12:29.320
你看一下

12:29.320 --> 12:32.080
这个Promise的状态

12:32.080 --> 12:34.080
是不是越接个体的

12:34.080 --> 12:35.080
所以也失败了

12:35.080 --> 12:37.080
本来失败的是谁

12:37.080 --> 12:39.080
本来失败的是前面这个任务

12:39.080 --> 12:41.080
但是前面这个任务失败了

12:41.080 --> 12:42.080
他确实失败了

12:42.080 --> 12:44.080
我针对这个Promise 2

12:44.080 --> 12:48.080
是前面这个任务的后续处理

12:48.080 --> 12:50.080
那么后续处理

12:50.080 --> 12:51.080
我只处理的成功

12:51.080 --> 12:53.080
没有处理失败

12:53.080 --> 12:56.080
那么就会导致他失败了

12:56.080 --> 12:58.080
就这个任务的状态就是

12:58.080 --> 12:59.080
他失败了

12:59.080 --> 13:02.080
由于他没有相关的后续处理

13:02.080 --> 13:05.080
就导致了他也跟着失败

13:05.080 --> 13:06.080
那么失败的原因

13:06.080 --> 13:07.080
他是啥原因

13:07.080 --> 13:09.080
他就是啥原因

13:09.080 --> 13:11.080
总有一层要处理

13:11.080 --> 13:13.080
不然在后面的任务怎么办呢

13:14.080 --> 13:16.080
那么我们再来一个例子

13:16.080 --> 13:18.080
如果说成功了

13:21.080 --> 13:23.080
前面这个任务成功了

13:23.080 --> 13:25.080
但是我没有针对前面这个任务

13:25.080 --> 13:26.080
成功进行处理

13:26.080 --> 13:28.080
我只针对失败了进行处理

13:28.080 --> 13:29.080
比方说这里

13:29.080 --> 13:31.080
学习失败了

13:31.080 --> 13:33.080
没法考试了

13:34.080 --> 13:36.080
我只针对失败了进行处理

13:36.080 --> 13:38.080
我没有针对成功进行处理

13:38.080 --> 13:40.080
那么后面的任务是怎么情况呢

13:41.080 --> 13:42.080
是一样的

13:42.080 --> 13:44.080
前面的任务成功了

13:44.080 --> 13:46.080
那我没有针对成功处理

13:46.080 --> 13:48.080
那么他也跟着成功

13:48.080 --> 13:50.080
所以说我们来看一下Promise2

13:52.080 --> 13:53.080
是不是

13:53.080 --> 13:55.080
他这里没有说rejected

13:55.080 --> 13:56.080
他就表示成功了

13:56.080 --> 13:58.080
那么后面ondified了什么意思

13:58.080 --> 14:00.080
表示他相关数据

14:00.080 --> 14:02.080
所以说这个点大家理解清楚

14:02.080 --> 14:04.080
前面这个任务

14:04.080 --> 14:06.080
如果说没有进行后续处理

14:06.080 --> 14:08.080
那么他是啥

14:08.080 --> 14:10.080
他就是啥

14:10.080 --> 14:11.080
我再来一个例子

14:11.080 --> 14:14.080
比方说我这里写了一个1

14:15.080 --> 14:17.080
那么Promise2

14:17.080 --> 14:18.080
他成功之后

14:18.080 --> 14:19.080
他的数据是1

14:19.080 --> 14:20.080
我们来看一下

14:20.080 --> 14:22.080
Promise1

14:22.080 --> 14:23.080
他的成功是什么

14:23.080 --> 14:24.080
是不是成功了

14:27.080 --> 14:28.080
数据是什么

14:28.080 --> 14:29.080
是1

14:30.080 --> 14:31.080
Promise2

14:31.080 --> 14:33.080
他没有针对成功进行处理

14:33.080 --> 14:36.080
那么就导致了Promise2

14:36.080 --> 14:38.080
针对Promise1

14:38.080 --> 14:39.080
他没有对成功进行处理

14:39.080 --> 14:40.080
他只对失败了进行处理

14:40.080 --> 14:43.080
因此就会导致Promise2

14:43.080 --> 14:44.080
他也会

14:44.080 --> 14:46.080
跟Promise的情况是一模一样的

14:50.080 --> 14:52.080
那么数据也是1

14:53.080 --> 14:54.080
我们先看一下

14:55.080 --> 14:56.080
看没

14:56.080 --> 14:58.080
当然失败也是一样

14:58.080 --> 15:00.080
我们再换成失败的情况

15:01.080 --> 15:02.080
这里失败了

15:02.080 --> 15:03.080
失败了我传个123

15:03.080 --> 15:05.080
那么这边也是

15:05.080 --> 15:06.080
他的后续处理

15:06.080 --> 15:07.080
只出了成功

15:07.080 --> 15:08.080
没有处理失败

15:08.080 --> 15:10.080
那么就会导致他的情况了

15:10.080 --> 15:11.080
Promise1

15:11.080 --> 15:12.080
他是rejected

15:13.080 --> 15:15.080
原因是123

15:15.080 --> 15:17.080
就会导致Promise2

15:17.080 --> 15:18.080
他也是rejected

15:18.080 --> 15:19.080
原因是123

15:19.080 --> 15:21.080
咱们看一下

15:21.080 --> 15:23.460
你看

15:23.460 --> 15:24.460
rejected

15:24.460 --> 15:25.460
123

15:25.460 --> 15:27.460
前面是不是给你报了一些警告

15:27.460 --> 15:29.460
他说你没有针对他进行

15:29.460 --> 15:30.460
他失败了

15:30.460 --> 15:32.460
但是没有针对失败的人物进行处理

15:32.460 --> 15:34.460
然后他也失败了

15:34.460 --> 15:36.460
你也没有针对他来进行

15:36.460 --> 15:37.460
后续处理

15:37.460 --> 15:38.460
说报了两个警告

15:38.460 --> 15:40.460
这就是这么一种情况

15:41.460 --> 15:42.460
第一个情况

15:42.460 --> 15:45.460
就是没有相关的后续处理

15:45.460 --> 15:48.460
那么后面的人物跟前面的人物

15:48.460 --> 15:49.460
一致

15:49.460 --> 15:50.460
状态一致

15:50.460 --> 15:51.460
前面咋回事

15:51.460 --> 15:52.460
你就咋回事

15:53.460 --> 15:54.460
那如果说

15:54.460 --> 15:56.460
第二种情况

15:56.460 --> 15:58.460
有后续处理

15:58.460 --> 16:01.460
但是还没有执行新的任务

16:01.460 --> 16:02.460
他就会挂起

16:03.460 --> 16:04.460
怎么理解呢

16:06.460 --> 16:07.460
那么简单的理解就是

16:07.460 --> 16:09.460
前面这个任务是挂起

16:09.460 --> 16:10.460
你也得挂起

16:11.460 --> 16:12.460
比方说吧

16:12.460 --> 16:14.460
我这里学习需要一段时间

16:14.460 --> 16:15.460
我没有那么快

16:15.460 --> 16:17.460
我这里就set time out

16:21.240 --> 16:22.240
两秒钟

16:22.240 --> 16:23.240
两秒钟

16:23.240 --> 16:24.240
我要学两秒钟

16:24.240 --> 16:25.240
才能学习结束

16:25.240 --> 16:27.240
那么学习结束就成功了

16:28.240 --> 16:29.240
这样让我们看

16:29.240 --> 16:32.240
我针对这个任务进行后续处理

16:32.240 --> 16:33.240
如果说你成功了

16:33.240 --> 16:34.240
我就考试

16:35.240 --> 16:38.240
我就运行这个函数进行考试

16:38.240 --> 16:39.240
是不是会返回一个新的任务

16:39.240 --> 16:42.240
那么这个新的任务的状态是什么呢

16:43.240 --> 16:44.240
好 咱们来看一下

16:44.240 --> 16:45.240
运行

16:46.240 --> 16:47.240
pending

16:48.240 --> 16:49.240
为什么是pending呢

16:49.240 --> 16:50.240
你看

16:51.240 --> 16:53.240
我这个后续处理

16:53.240 --> 16:55.240
是不是要等到学习成功之后

16:57.240 --> 16:58.240
学习成功需要多少时间

16:58.240 --> 17:00.240
需要两秒钟

17:00.240 --> 17:01.240
对吧

17:01.240 --> 17:03.240
那我这里肯定时间还没到

17:03.240 --> 17:05.240
一秒钟过后就输出这个

17:05.240 --> 17:07.240
那么我这个时间到了时候

17:07.240 --> 17:08.240
说明啥

17:08.240 --> 17:10.240
说明他还没有成功

17:11.240 --> 17:12.240
对不对

17:12.240 --> 17:13.240
是不是还没有成功

17:13.240 --> 17:15.240
还没有成功

17:15.240 --> 17:18.550
那么他都还没玩

17:18.550 --> 17:20.550
没玩的话

17:20.550 --> 17:21.550
他也没玩

17:21.550 --> 17:22.550
他也是刮旗的

17:23.550 --> 17:24.550
瞄理说

17:24.550 --> 17:25.550
这个好理解吧

17:25.550 --> 17:27.550
就前面这个阶段还没结束

17:27.550 --> 17:29.550
那么你这个新的任务

17:29.550 --> 17:30.550
也得是刮旗

17:31.550 --> 17:33.550
好 这就是这个

17:33.550 --> 17:34.550
后续处理

17:34.550 --> 17:35.550
还没有执行

17:35.550 --> 17:37.550
那么新的任务刮旗

17:37.550 --> 17:38.550
刮旗处理是啥

17:38.550 --> 17:39.550
是这个

17:39.550 --> 17:40.550
我有没有有

17:40.550 --> 17:42.550
没有的话就回到第1种情况了

17:42.550 --> 17:44.550
我有后续处理

17:44.550 --> 17:46.550
但是我这个后续处理

17:46.550 --> 17:47.550
还没执行

17:47.550 --> 17:48.550
那么这个时候

17:48.550 --> 17:50.550
这个任务就是刮旗的

17:50.550 --> 17:51.550
你学习完了过后

17:51.550 --> 17:52.550
我有没有后续处理

17:52.550 --> 17:53.550
有后续处理

17:53.550 --> 17:54.550
考试

17:54.550 --> 17:56.550
但是我现在还没有开始考试

17:56.550 --> 17:57.550
那么这个任务肯定是刮旗的

17:57.550 --> 17:58.550
对不对

17:58.550 --> 18:00.550
好 这是这种情况

18:00.550 --> 18:02.550
重点是第3种情况

18:02.550 --> 18:04.550
第3种情况又有3个细节

18:04.550 --> 18:06.550
就是我前面这个任务

18:07.550 --> 18:08.550
完了

18:08.550 --> 18:10.550
我也有相关的后续处理

18:10.550 --> 18:11.550
没有相关的后续处理

18:11.550 --> 18:12.550
看这个

18:12.550 --> 18:15.550
我也有相关的后续处理

18:15.550 --> 18:17.550
那么但是呢

18:17.550 --> 18:18.550
我这个新的任务

18:18.550 --> 18:19.550
还没有那么

18:19.550 --> 18:22.550
还不能直接的

18:22.550 --> 18:24.550
不能直接的确定状态

18:24.550 --> 18:25.550
我要看

18:25.550 --> 18:28.550
后续的相关处理是什么情况

18:28.550 --> 18:29.550
比方说

18:29.550 --> 18:31.550
你学习学习完了

18:31.550 --> 18:33.550
我的新任务是啥

18:33.550 --> 18:34.550
后续处理是啥

18:34.550 --> 18:35.550
考试

18:35.550 --> 18:36.550
考试就是个新任务

18:36.550 --> 18:38.550
但是你不能说你学习成功了

18:38.550 --> 18:40.550
我考试就一定成功

18:40.550 --> 18:42.550
所以说我考试

18:42.550 --> 18:43.550
有没有后续处理

18:43.550 --> 18:44.550
有

18:44.550 --> 18:47.550
排除要第1种情况

18:47.550 --> 18:48.550
是不是第2种情况

18:48.550 --> 18:50.550
不是学习完成了

18:50.550 --> 18:51.550
现在就第3种情况

18:51.550 --> 18:53.550
我有后续处理

18:53.550 --> 18:56.550
我还得看这个考试的过程

18:56.550 --> 18:58.550
比方说个考试的时候

18:58.550 --> 18:59.550
通常一种讲了

18:59.550 --> 19:00.550
直接就跑了

19:00.550 --> 19:01.550
或者是考试的时候

19:01.550 --> 19:02.550
就睡着了

19:02.550 --> 19:04.550
那考试就失败了

19:04.550 --> 19:06.550
还要看这个考试的过程

19:06.550 --> 19:08.550
那么这个过程是看啥

19:08.550 --> 19:10.550
就看这个函数的执行过程

19:10.550 --> 19:12.550
简单的说

19:12.550 --> 19:15.550
这个函数执行过程中

19:15.550 --> 19:16.550
没有错误

19:16.550 --> 19:17.550
怎么样没有错误

19:17.550 --> 19:18.550
不抱错

19:18.550 --> 19:21.550
那么你这个任务就成功

19:21.550 --> 19:23.550
执行的过程中抱了错

19:23.550 --> 19:26.550
你这个任务就失败

19:26.550 --> 19:27.550
没有意思吗

19:27.550 --> 19:28.550
就简单的说就是这两点

19:28.550 --> 19:32.250
就前面这两点

19:32.250 --> 19:33.250
前面这两点

19:33.250 --> 19:34.250
慢慢来

19:34.250 --> 19:36.250
这个时间给你们留够

19:36.250 --> 19:39.250
慢慢去输利

19:39.250 --> 19:41.250
后续处理就是这么一个意思

19:41.250 --> 19:42.250
就表示这个

19:42.250 --> 19:43.250
其实这个后续处理是什么

19:43.250 --> 19:46.250
其实就是新任务的执行过程

19:46.250 --> 19:49.250
就是新任务的执行过程

19:49.250 --> 19:52.250
那么执行的过程中有错

19:52.250 --> 19:53.250
失败

19:53.250 --> 19:55.250
没有错成功

19:55.250 --> 19:56.250
好 我举个例子

19:56.250 --> 19:57.250
比方说我们这里学习

19:57.250 --> 19:59.250
我就直接让它成功了

19:59.250 --> 20:02.560
成功了是不是会执行这个

20:02.560 --> 20:03.560
对不对

20:03.560 --> 20:04.560
执行这个的过程中

20:04.560 --> 20:05.560
没有错误

20:05.560 --> 20:07.560
好 那么它成功

20:07.560 --> 20:08.560
好 看一下

20:08.560 --> 20:10.560
你看是不是考试没有错误

20:10.560 --> 20:11.560
它成功吗

20:11.560 --> 20:13.560
数据是二级半的

20:13.560 --> 20:16.560
那如果说考试的过程中有错

20:16.560 --> 20:19.560
有错怎么来弄有错呢

20:19.560 --> 20:21.560
我就straw吧

20:21.560 --> 20:24.560
拋出一个错误

20:24.560 --> 20:26.560
这就是一个抱错了对吧

20:26.560 --> 20:28.560
abc有随便写个吧

20:28.560 --> 20:30.560
或者说睡着了

20:30.560 --> 20:36.300
你看 promise

20:36.300 --> 20:37.300
变成什么

20:37.300 --> 20:39.300
变成 reject

20:39.300 --> 20:42.300
所以它变成了失败

20:42.300 --> 20:43.300
所以说不是说它成功

20:43.300 --> 20:44.300
它就一定成功

20:44.300 --> 20:45.300
不是说学习成功

20:45.300 --> 20:47.300
考试又一定成功

20:47.300 --> 20:49.300
别的意思

20:49.300 --> 20:50.300
那么好

20:50.300 --> 20:51.300
我们接下来看

20:51.300 --> 20:52.300
前面两个的细节

20:52.300 --> 20:54.300
如果说执行的过程中

20:54.300 --> 20:55.300
无错

20:55.300 --> 20:56.300
新的任务状态就没完成

20:56.300 --> 20:57.300
就成功

20:57.300 --> 20:59.300
数据是什么呢

20:59.300 --> 21:01.300
数据是反回止

21:01.300 --> 21:02.300
差意思

21:02.300 --> 21:03.300
如果说你成功了

21:03.300 --> 21:04.300
等我考了100分

21:04.300 --> 21:06.300
我就反回一个100

21:06.300 --> 21:08.300
怎么来看一下

21:08.300 --> 21:10.300
promise2成功了

21:10.300 --> 21:11.300
反回100

21:11.300 --> 21:12.300
是不是新的任务表示

21:12.300 --> 21:14.300
我这个执行过程没问题

21:14.300 --> 21:15.300
成功了

21:15.300 --> 21:17.300
我得到了数据是100

21:17.300 --> 21:19.300
那如果说失败的呢

21:19.300 --> 21:20.300
失败的比方我拋了一个错误

21:20.300 --> 21:21.300
拋了一个错误

21:21.300 --> 21:22.300
就是个错误对象

21:22.300 --> 21:23.300
对吧

21:23.300 --> 21:25.300
那么这就是失败的原因

21:25.300 --> 21:27.810
你看

21:27.810 --> 21:28.810
失败了对吧

21:28.810 --> 21:29.810
失败的原因是

21:29.810 --> 21:31.810
这个 error 对象

21:31.810 --> 21:32.810
当你拋出

21:32.810 --> 21:33.810
我们一般来说

21:33.810 --> 21:34.810
是拋一个错误对象

21:34.810 --> 21:35.810
可以拋别的

21:35.810 --> 21:37.810
拋个123

21:37.810 --> 21:38.810
或者拋个0

21:38.810 --> 21:39.810
表示零分

21:39.810 --> 21:40.810
那么失败了

21:40.810 --> 21:42.810
失败的原因是123

21:42.810 --> 21:44.810
没什么意思吧

21:44.810 --> 21:46.810
就这么个意思

21:46.810 --> 21:47.810
好

21:47.810 --> 21:48.810
我们再来比方说

21:48.810 --> 21:49.810
这里是我们自手动的拋出错误

21:49.810 --> 21:50.810
还有可能是

21:50.810 --> 21:51.810
就是代码执行爆错了

21:51.810 --> 21:53.810
比方说你这里有个变量

21:53.810 --> 21:54.810
然后你出源区

21:54.810 --> 21:56.810
调用这个变量的一个方法

21:56.810 --> 21:58.810
闹了不能调方法

21:58.810 --> 21:59.810
不能说这个是爆错了

21:59.810 --> 22:04.700
爆错就导致这个任务失败

22:04.700 --> 22:05.700
你看错误了

22:05.700 --> 22:06.700
这个原因是什么呢

22:06.700 --> 22:08.700
他说这个就是这个错误

22:08.700 --> 22:11.700
无法读取闹的偷失变法

22:11.700 --> 22:14.700
你看这个意思吧

22:14.700 --> 22:16.700
再来说一下

22:16.700 --> 22:18.700
后续处理就是一个新任务

22:18.700 --> 22:19.700
不是说你前边成功了

22:19.700 --> 22:21.700
我就一定成功

22:21.700 --> 22:22.700
不是说你前边失败了

22:22.700 --> 22:24.700
我就一定失败

22:24.700 --> 22:25.700
那不一定的

22:25.700 --> 22:28.700
我要看我这个任务的处理过程

22:28.700 --> 22:29.700
我处理过程中没有问题

22:29.700 --> 22:30.700
那就成功

22:30.700 --> 22:32.700
处理过程中有问题

22:32.700 --> 22:34.700
那就失败

22:35.700 --> 22:36.700
好

22:36.700 --> 22:37.700
咱们再来一个例子

22:37.700 --> 22:40.700
比方说我这个学习

22:40.700 --> 22:42.700
学习失败了

22:42.700 --> 22:43.700
比方中奖了

22:43.700 --> 22:44.700
不学了

22:44.700 --> 22:46.700
那么就是reject

22:46.700 --> 22:49.580
学习失败了

22:49.580 --> 22:50.580
好

22:50.580 --> 22:51.580
接下来我们来这边来看一下

22:51.580 --> 22:56.110
用看齐

22:56.110 --> 22:57.110
如果说你不用看齐的话

22:57.110 --> 22:59.110
你用那个Zing的话

22:59.110 --> 23:00.110
相当于这样子写的话

23:00.110 --> 23:02.110
就相当于是没有去处理他的失败

23:02.110 --> 23:04.110
那就回到第1种情况了

23:04.110 --> 23:06.110
那就回到第1种情况了

23:06.110 --> 23:08.110
回到第1种情况

23:08.110 --> 23:10.110
那我这里不考一种情况

23:10.110 --> 23:11.110
就说你失败了

23:11.110 --> 23:13.110
我也有处理失败

23:13.110 --> 23:14.110
你不学了

23:14.110 --> 23:15.110
不学了

23:15.110 --> 23:16.110
我也不考了

23:16.110 --> 23:18.110
你都不学了

23:20.110 --> 23:21.110
还考啥

23:23.110 --> 23:24.110
有没有处理失败

23:24.110 --> 23:26.110
有处理失败

23:26.110 --> 23:28.110
那么有处理失败的话

23:29.110 --> 23:31.110
这个任务还是一样的

23:31.110 --> 23:33.110
看处理的过程

23:33.110 --> 23:35.110
处理的过程中不爆出

23:35.110 --> 23:36.110
他就成功

23:37.110 --> 23:38.110
没意思吧

23:38.110 --> 23:39.110
就是我把这个

23:39.110 --> 23:42.110
本来是你有问题的

23:42.110 --> 23:44.110
但是我这边

23:44.110 --> 23:46.110
处理了你这个问题

23:46.110 --> 23:47.110
处理了过后

23:47.110 --> 23:49.110
那你就没问题了

23:49.110 --> 23:50.110
就这么个逻辑

23:50.110 --> 23:51.110
好

23:51.110 --> 23:52.110
咱们来运行看一下吧

23:52.110 --> 23:55.740
所以他成功了

23:55.740 --> 23:56.740
那成功的数据是什么呢

23:56.740 --> 23:59.740
还是一样得益于这个

23:59.740 --> 24:00.740
函数的返回值

24:00.740 --> 24:01.740
你返回什么数据

24:01.740 --> 24:06.140
它就是什么数据

24:06.140 --> 24:07.140
看没

24:07.140 --> 24:09.140
他如果说你处理的过程

24:09.140 --> 24:10.140
又出错了

24:10.140 --> 24:11.140
对吧

24:11.140 --> 24:13.140
你本来你都不考了

24:13.140 --> 24:15.140
那么这个时候突然有一天

24:15.140 --> 24:20.030
你发现中奖

24:21.030 --> 24:22.030
就是颁奖

24:22.030 --> 24:24.030
就是发奖的机构跑了

24:24.030 --> 24:25.030
跑路了

24:25.030 --> 24:28.030
发奖的机构跑路了

24:30.030 --> 24:31.030
你还得考

24:32.030 --> 24:34.030
还得发生中奖十一滩

24:34.030 --> 24:36.030
是一个进化水月

24:36.030 --> 24:37.030
还得回来考试

24:41.240 --> 24:42.240
不能用这个例子

24:43.240 --> 24:45.240
我就直接报个措施了

24:45.240 --> 24:46.240
直接报个措施

24:46.240 --> 24:52.500
是不是又变成拒绝了

24:52.500 --> 24:53.500
就是前一个任务失败了

24:53.500 --> 24:55.500
但是我处理了

24:55.500 --> 24:57.500
如果说我没处理

24:57.500 --> 24:58.500
那我也失败了

24:58.500 --> 25:00.500
那我关键是我处理的这个错误

25:00.500 --> 25:02.500
处理的错误我就不能认为失败了

25:02.500 --> 25:04.500
我要看我这个处理过程

25:04.500 --> 25:06.500
如果说我处理的过程中有错误

25:06.500 --> 25:07.500
那我失败

25:07.500 --> 25:09.500
处理的过程中没有错误

25:09.500 --> 25:10.500
我成功

25:10.500 --> 25:11.500
所以说你始终记住

25:11.500 --> 25:13.500
后边的任务的状态

25:13.500 --> 25:16.500
就是如果说我有相关的处理

25:16.500 --> 25:18.500
我一定要看那个处理的过程

25:18.500 --> 25:19.500
不管是对成功的处理

25:19.500 --> 25:21.500
还是对失败的处理

25:21.500 --> 25:22.500
如果说你前面的任务成功了

25:22.500 --> 25:23.500
我就看成功处理

25:23.500 --> 25:25.500
如果说前面的任务失败了

25:25.500 --> 25:26.500
我就看失败处理

25:26.500 --> 25:28.500
我要看这个处理的过程

25:28.500 --> 25:29.500
有没有问题

25:29.500 --> 25:30.500
没有问题我就成功

25:30.500 --> 25:32.500
有问题我就失败

25:32.500 --> 25:34.500
没了意思吧

25:34.500 --> 25:36.500
好 那个最后一个细节

25:36.500 --> 25:38.500
如果说我的后续处理

25:38.500 --> 25:40.500
不管是成功还是失败

25:40.500 --> 25:41.500
反正就是我的后续处理

25:41.500 --> 25:44.500
返回的是一个新的任务对象

25:44.500 --> 25:46.500
那么新任务的状态

25:46.500 --> 25:47.500
和这个数据

25:47.500 --> 25:48.500
给这个任务对象一致

25:48.500 --> 25:49.500
啥意思

25:49.500 --> 25:53.500
这种情况就看一下吧

25:53.500 --> 25:55.500
如果说我这个后续处理

25:55.500 --> 25:58.500
比方说我这里还用成功

25:59.500 --> 26:00.500
你成功了

26:00.500 --> 26:01.500
成功了过后了

26:01.500 --> 26:03.500
我就针对这个的后续处理

26:03.500 --> 26:06.500
我返回的是一个任务对象

26:06.500 --> 26:08.500
new promise

26:08.500 --> 26:10.500
又返回了一个新的任务对象

26:10.500 --> 26:12.500
那么这个对象的情况

26:12.500 --> 26:15.500
跟他的情况就完全一致了

26:15.500 --> 26:16.500
这个对象是挂起

26:16.500 --> 26:18.500
这个任务就是挂起

26:18.500 --> 26:20.500
这个对象是成功

26:20.500 --> 26:21.500
这个任务就成功

26:21.500 --> 26:22.500
这个对象是失败

26:22.500 --> 26:24.500
这个任务就是失败

26:24.500 --> 26:25.500
所以说呢

26:25.500 --> 26:26.500
那这个数据

26:26.500 --> 26:27.500
当然就是你掉

26:27.500 --> 26:28.500
成功的数据

26:28.500 --> 26:29.500
就是你掉这个瑞招过的时候的数据

26:29.500 --> 26:30.500
失败的时候

26:30.500 --> 26:32.500
就掉这个瑞接个成的数据

26:32.500 --> 26:33.500
就是原因

26:33.500 --> 26:34.500
对吧

26:34.500 --> 26:36.500
好 那么比方说就这样子

26:36.500 --> 26:37.500
那么请问大家

26:37.500 --> 26:41.770
这个任务的状态是什么

26:41.770 --> 26:42.770
是什么

26:42.770 --> 26:43.770
看一下

26:43.770 --> 26:46.140
平底

26:46.140 --> 26:48.140
为什么是平底

26:48.140 --> 26:50.140
他就这样的看

26:50.140 --> 26:52.140
从头到尾再看一遍

26:52.140 --> 26:53.140
这个任务成功吗

26:53.140 --> 26:54.140
成功了吗

26:54.140 --> 26:55.140
成功了

26:55.140 --> 26:56.140
有没有后续处理呢

26:56.140 --> 26:57.140
有后续处理

26:57.140 --> 26:59.140
那我这个任务

26:59.140 --> 27:00.140
就应该看这个

27:00.140 --> 27:02.140
后续处理的过程

27:02.140 --> 27:03.140
是吧

27:03.140 --> 27:04.140
过程中有没有错误

27:04.140 --> 27:05.140
没有错误

27:05.140 --> 27:06.140
那么按理说

27:06.140 --> 27:07.140
我这个任务就应该完成

27:07.140 --> 27:09.140
但是我这个任务返回的是

27:09.140 --> 27:11.140
一个新的promise

27:11.140 --> 27:12.140
那么我就要看

27:12.140 --> 27:14.140
这个新的promise

27:14.140 --> 27:15.140
他的状态是啥

27:15.140 --> 27:16.140
他就是啥

27:16.140 --> 27:17.140
而这个新的promise

27:17.140 --> 27:18.140
他的状态是啥

27:18.140 --> 27:19.140
是不是平底

27:19.140 --> 27:20.140
挂起的

27:20.140 --> 27:21.140
为什么挂起的

27:21.140 --> 27:23.140
因为我这里没有掉入瑞接个成

27:23.140 --> 27:24.140
他的任务肯定是

27:24.140 --> 27:25.140
一直是等待的

27:25.140 --> 27:28.140
所以说新的任务也是等待

27:28.140 --> 27:30.140
你看这意思

27:30.140 --> 27:31.140
这就是

27:31.140 --> 27:33.140
是不是很糟很糟

27:33.140 --> 27:35.140
其实之所以这么糟

27:35.140 --> 27:36.140
根本原因

27:36.140 --> 27:38.140
还不是promise的问题

27:38.140 --> 27:39.140
是因为我们本身

27:39.140 --> 27:40.140
现实世界

27:40.140 --> 27:42.140
就是这么的复杂

27:42.140 --> 27:43.140
只是我们平时

27:43.140 --> 27:46.140
没有用一种代码模型

27:46.140 --> 27:47.140
或者是数学模型

27:47.140 --> 27:48.140
去分析它

27:48.140 --> 27:49.140
我们都是感性认识

27:49.140 --> 27:50.140
感觉上差不多就可以了

27:50.140 --> 27:52.140
但是一旦用数学模型

27:52.140 --> 27:53.140
或者是代码模型

27:53.140 --> 27:54.140
去分析它的话

27:54.140 --> 27:55.140
它本身就是这么复杂

27:55.140 --> 27:56.140
我们代码都是

27:56.140 --> 27:58.140
为了反映现实世界的

27:58.140 --> 27:59.140
然后你看

27:59.140 --> 28:01.140
我们再来整个过一遍

28:01.140 --> 28:03.140
后续处理本身

28:03.140 --> 28:05.140
就是一个新的任务

28:05.140 --> 28:06.140
后续处理本身

28:06.140 --> 28:08.140
就是一个新的任务

28:08.140 --> 28:09.140
新的任务的状态

28:09.140 --> 28:11.140
有三个情况

28:11.140 --> 28:13.140
你前边的任务

28:13.140 --> 28:14.140
有了一种状态

28:14.140 --> 28:15.140
但是我后边的任务

28:15.140 --> 28:17.140
没有处理的状态

28:17.140 --> 28:18.140
比方说你前面的任务

28:18.140 --> 28:19.140
在这种情况

28:19.140 --> 28:20.140
你再看

28:20.140 --> 28:22.140
前面的任务拒绝了

28:22.140 --> 28:23.140
但是后边的任务

28:23.140 --> 28:24.140
我前面的任务

28:24.140 --> 28:25.140
没有针对这个

28:25.140 --> 28:27.140
失败做任何处理

28:27.140 --> 28:28.140
那么后边的任务

28:28.140 --> 28:30.140
也会跟着失败

28:30.140 --> 28:31.140
原因跟前面的任务

28:31.140 --> 28:32.140
原因一致

28:32.140 --> 28:34.140
这是第一个点

28:34.140 --> 28:36.140
第二个点

28:36.140 --> 28:41.520
我前面的任务成功了

28:42.520 --> 28:43.520
但是

28:43.520 --> 28:44.520
如果说前面的任务

28:44.520 --> 28:45.520
还没有成功

28:45.520 --> 28:46.520
还是挂起的状态

28:46.520 --> 28:47.520
像这种情况

28:47.520 --> 28:48.520
一直挂起

28:48.520 --> 28:50.520
或者是等了很长一段时间

28:50.520 --> 28:51.520
才会成功

28:51.520 --> 28:52.520
等这段时间

28:52.520 --> 28:54.520
它就是挂起的

28:54.520 --> 28:55.520
我后边的任务

28:55.520 --> 28:56.520
有没有处理的

28:56.520 --> 28:57.520
有处理

28:57.520 --> 28:58.520
但是

28:58.520 --> 28:59.520
它是前面的任务

28:59.520 --> 29:00.520
是挂起的

29:00.520 --> 29:02.520
我也只能挂起

29:02.520 --> 29:04.520
像这种情况

29:05.520 --> 29:07.520
跟这个人没关系的

29:07.520 --> 29:08.520
第三个情况

29:08.520 --> 29:09.520
比较复杂的情况

29:09.520 --> 29:10.520
是什么情况

29:10.520 --> 29:12.520
就是我前面的任务

29:12.520 --> 29:13.520
没有挂起的

29:13.520 --> 29:14.520
已经成功

29:14.520 --> 29:15.520
要么成功

29:15.520 --> 29:16.520
要么失败

29:16.520 --> 29:18.520
后边也有相关的处理

29:19.520 --> 29:21.520
那么我就看整个处理过程

29:21.520 --> 29:24.520
处理过程没有错误

29:24.520 --> 29:25.520
成功

29:25.520 --> 29:27.520
处理过程有错误

29:27.520 --> 29:28.520
失败

29:28.520 --> 29:30.520
如果说处理完了过后

29:30.520 --> 29:31.520
你给我返回的是

29:31.520 --> 29:32.520
一个新的Promise

29:32.520 --> 29:33.520
那么我这个情况

29:33.520 --> 29:35.520
就跟新的Promise是一样的

29:37.520 --> 29:38.520
好

29:38.520 --> 29:40.520
好好去处理一下

29:42.520 --> 29:43.520
那么接下来

29:43.520 --> 29:45.520
我们来做一些题

29:46.520 --> 29:47.520
第一道题

29:48.520 --> 29:49.520
再读一下

29:52.830 --> 29:53.830
看一下

29:57.100 --> 29:58.100
能不能根据

29:58.100 --> 29:59.100
我们学过的知识

30:00.100 --> 30:01.100
说出这道题的

30:02.100 --> 30:03.100
输出结果

30:04.100 --> 30:07.100
这里边输出了一些Promise

30:07.100 --> 30:08.100
以后

30:08.100 --> 30:09.100
你们在做面试

30:09.100 --> 30:11.100
反而让你看到

30:11.100 --> 30:13.100
这个问题输出结果是啥

30:13.100 --> 30:15.100
它输出的是Promise

30:15.100 --> 30:16.100
那么你就告诉它

30:16.100 --> 30:17.100
它主要就问你的是

30:17.100 --> 30:19.100
Promise的状态是什么

30:20.100 --> 30:21.100
它的相关数据

30:21.100 --> 30:23.100
比方成功的数据是啥

30:23.100 --> 30:25.100
失败的原因是啥

30:25.100 --> 30:26.100
它主要是问这个

30:27.100 --> 30:28.100
好 让它看一下

30:30.420 --> 30:31.420
这里有第一个任务

30:31.420 --> 30:32.420
歧视任务

30:32.420 --> 30:33.420
歧视任务是等待

30:33.420 --> 30:35.420
一秒钟之后成功

30:35.420 --> 30:36.420
那么目前

30:36.420 --> 30:37.420
你这样再记

30:38.420 --> 30:39.420
这个歧视任务

30:39.420 --> 30:40.420
目前的状态是啥

30:41.420 --> 30:42.420
所以陪你

30:42.420 --> 30:43.420
对吧

30:43.420 --> 30:44.420
那肯定是没有相关数据了

30:44.420 --> 30:45.420
陪你有什么相关数据

30:46.420 --> 30:48.420
好 针对Promise一做后续处理

30:48.420 --> 30:50.420
就产生了一个Promise二

30:51.420 --> 30:52.420
Promise二的状态

30:52.420 --> 30:53.420
目前是啥

30:54.420 --> 30:55.420
Promise一是挂起

30:55.420 --> 30:56.420
那么毫无疑问

30:57.420 --> 30:58.420
不管是哪一种情况

30:58.420 --> 30:59.420
你自己去看

30:59.420 --> 31:00.420
一二三 三个点

31:00.420 --> 31:01.420
不管是哪一种情况

31:01.420 --> 31:03.420
Promise二也只能挂起

31:05.420 --> 31:07.420
我这个东西看都难得看它

31:07.420 --> 31:08.420
看都不用去看它

31:08.420 --> 31:09.420
Promise一是挂起

31:09.420 --> 31:11.420
Promise二一定是挂起

31:11.420 --> 31:13.420
然后我们再看Promise三

31:13.420 --> 31:14.420
Promise三是哪来的

31:14.420 --> 31:16.420
是针对Promise二的后续处理

31:16.420 --> 31:18.420
就说如果说你成功了

31:18.420 --> 31:19.420
我就运行这个

31:20.420 --> 31:21.420
Promise二目前是啥

31:21.420 --> 31:22.420
是平顶

31:22.420 --> 31:24.420
那么产生了Promise三

31:24.420 --> 31:25.420
针对Promise二的后续处理

31:26.420 --> 31:27.420
它也只能是平顶

31:27.420 --> 31:28.420
它是一条链的

31:29.420 --> 31:30.420
Promise二为什么是平顶

31:30.420 --> 31:32.420
因为它要等待Promise一

31:32.420 --> 31:34.420
Promise三为什么是平顶

31:34.420 --> 31:35.420
因为它要等待Promise二

31:36.420 --> 31:38.420
所以是三个一定是平顶

31:38.420 --> 31:39.420
因此它不看最后一句话

31:41.420 --> 31:43.420
前边得到的结果一定是三个平顶

31:45.420 --> 31:46.420
对不对

31:46.420 --> 31:47.420
好 接下来我们再看

31:50.420 --> 31:54.050
接下来我们开始运行哪个回调函数

31:54.050 --> 31:55.050
是不是运行它

31:55.050 --> 31:56.050
一秒钟到了

31:56.050 --> 31:57.050
一秒钟到了过后

31:57.050 --> 31:58.050
我们会怎么样

31:58.050 --> 32:01.050
把Promise一变成什么

32:04.050 --> 32:05.050
数据是什么

32:05.050 --> 32:06.050
数据是一

32:07.050 --> 32:10.050
它Promise一是不是完成了

32:10.050 --> 32:12.050
接下来我们要看一下Promise二

32:12.050 --> 32:16.050
Promise二有没有针对它完成进行处理

32:17.050 --> 32:19.050
如果说Promise二

32:19.050 --> 32:20.050
没有针对它完成进行处理

32:20.050 --> 32:22.050
它只处理了错误

32:22.050 --> 32:23.050
假设是这种情况

32:23.050 --> 32:25.050
或者是这里写的是开启

32:26.050 --> 32:28.050
就是我没有针对它完成进行处理

32:28.050 --> 32:29.050
那么Promise二

32:29.050 --> 32:30.050
那毫无疑问

32:30.050 --> 32:31.050
跟Promise一一样

32:32.050 --> 32:33.050
对吧

32:33.050 --> 32:34.050
我们刚才说了一二三

32:34.050 --> 32:35.050
第一个点

32:35.050 --> 32:36.050
但是这里不是这样子

32:37.050 --> 32:38.050
这里是

32:38.050 --> 32:41.050
我有没有针对Promise一做后续完成

32:41.050 --> 32:42.050
就是成功做后续处理呢

32:42.050 --> 32:43.050
有

32:44.050 --> 32:45.050
有的话

32:45.050 --> 32:47.050
就是我们把这个输出打印一下

32:47.050 --> 32:49.050
一刚才输出的是

32:49.050 --> 32:51.050
平顶

32:51.050 --> 32:53.050
三个平顶

32:53.050 --> 32:54.050
对吧

32:54.050 --> 32:56.050
三个挂起的Promise

32:56.050 --> 32:58.050
然后现在到这了

32:58.050 --> 33:00.050
Promise一已经完成了

33:00.050 --> 33:01.050
数据是一

33:01.050 --> 33:02.050
Promise二的状态

33:02.050 --> 33:05.050
它要取决于针对这个成功的

33:05.050 --> 33:06.050
后续处理

33:06.050 --> 33:08.050
看一下整个过程有没有错

33:08.050 --> 33:09.050
这过程你觉得有

33:09.050 --> 33:11.050
会不会有错

33:11.050 --> 33:12.050
不会有错

33:12.050 --> 33:13.050
对吧

33:13.050 --> 33:14.050
它这里输出了啥

33:14.050 --> 33:16.050
输出了它完成的数据一

33:16.050 --> 33:18.050
输出了一

33:18.050 --> 33:20.050
说整个执行过程中没有错

33:20.050 --> 33:21.050
没有错

33:21.050 --> 33:22.050
我毫无疑问

33:22.050 --> 33:24.050
Promise二也会跟着完成

33:25.050 --> 33:27.050
它只取决于

33:27.050 --> 33:28.050
那个

33:28.050 --> 33:29.050
后续处理的过程

33:29.050 --> 33:30.050
有没有错

33:30.050 --> 33:31.050
没有错

33:31.050 --> 33:32.050
它就完成

33:32.050 --> 33:33.050
完成之后

33:34.050 --> 33:35.050
数据是什么

33:35.050 --> 33:37.050
数据它的返回是

33:37.050 --> 33:38.050
data是一

33:38.050 --> 33:39.050
data是一加音等于二

33:39.050 --> 33:40.050
返回二

33:40.050 --> 33:42.050
那么它的数据又是二

33:43.050 --> 33:44.050
没了意思吧

33:45.050 --> 33:46.050
好

33:46.050 --> 33:47.050
那么我们再看Promise三

33:47.050 --> 33:48.050
Promise二完成了

33:48.050 --> 33:49.050
是不是要运行这个

33:49.050 --> 33:51.050
那么Promise三的状态

33:51.050 --> 33:52.050
是不是要取决于

33:52.050 --> 33:53.050
这个的运行过程

33:54.050 --> 33:55.050
那么运行过程有没有

33:55.050 --> 33:57.050
运行过程就输出了

33:58.050 --> 33:59.050
你看Promise二完成的数据

33:59.050 --> 34:00.050
是二

34:00.050 --> 34:01.050
那么二就传过来了

34:01.050 --> 34:02.050
Promise二的数据

34:02.050 --> 34:03.050
就传过来了

34:03.050 --> 34:04.050
这里输出二

34:06.050 --> 34:07.050
返回的是什么

34:07.050 --> 34:08.050
那么Promise三

34:08.050 --> 34:09.050
它的状态就取决于

34:09.050 --> 34:11.050
取决于这个函数的运行过程

34:11.050 --> 34:12.050
运行过程有错吗

34:12.050 --> 34:13.050
没有错

34:13.050 --> 34:14.050
所以说它也是forfill

34:16.050 --> 34:17.050
forfill

34:18.050 --> 34:19.050
数据是forfill

34:21.050 --> 34:22.050
好

34:22.050 --> 34:24.050
那么这就是输出完了

34:24.050 --> 34:25.050
然后等待两秒钟之后

34:25.050 --> 34:27.050
再重新输出状态的话

34:27.050 --> 34:28.050
就输出这么一个状态

34:29.050 --> 34:31.050
forfill的数据一

34:32.050 --> 34:33.050
就这样的记录吧

34:33.050 --> 34:34.050
数据一

34:34.050 --> 34:37.050
然后forfill的数据二

34:37.050 --> 34:40.050
然后forfill的数据undefined

34:41.050 --> 34:42.050
好

34:42.050 --> 34:44.620
大部分运行看一下

34:44.620 --> 34:45.620
你看

34:45.620 --> 34:46.620
第一个是不是三个平底

34:46.620 --> 34:47.620
然后输出一二

34:47.620 --> 34:48.620
一二undefined

34:50.930 --> 34:51.930
没问题吧

34:51.930 --> 34:53.930
这就是这么一个场景

34:55.930 --> 34:56.930
通过这道题

34:56.930 --> 34:58.930
大家好好去再去梳理一下

34:58.930 --> 34:59.930
那一二三个点

34:59.930 --> 35:03.620
怎么去运用到面试题当中

35:03.620 --> 35:04.620
好

35:04.620 --> 35:05.620
再改一下

35:05.620 --> 35:06.620
多改一下

35:06.620 --> 35:07.620
这一题

35:08.620 --> 35:10.620
一直当我来恶心里面

35:10.620 --> 35:11.620
其实好得多

35:12.620 --> 35:14.620
我不是我想恶心里面

35:14.620 --> 35:15.620
是因为这些面试题

35:15.620 --> 35:16.620
本来就挺恶心的

35:17.620 --> 35:18.620
一二十六这一块

35:18.620 --> 35:19.620
就是这个麻烦

35:20.620 --> 35:22.620
只要过去了就没啥了

35:22.620 --> 35:24.620
我多恶心里面一下吧

35:24.620 --> 35:26.620
避免以后多练里面一下

35:27.620 --> 35:28.620
避免以后被面试关了

35:28.620 --> 35:29.620
你

35:29.620 --> 35:31.620
被我练其实没啥

35:32.620 --> 35:33.620
好

35:33.620 --> 35:34.620
我们这里呢

35:34.620 --> 35:36.620
比方说我就随便改一下

35:37.620 --> 35:38.620
好

35:38.620 --> 35:39.620
又来说

35:39.620 --> 35:42.960
说结果

35:42.960 --> 35:43.960
好

35:43.960 --> 35:44.960
又来吧

35:44.960 --> 35:45.960
我们再来分析一次

35:45.960 --> 35:46.960
Promise一一开

35:46.960 --> 35:47.960
状态是什么了

35:47.960 --> 35:48.960
状态

35:48.960 --> 35:49.960
肯定是平定吗

35:49.960 --> 35:50.960
Promise二

35:50.960 --> 35:51.960
肯定是平定

35:51.960 --> 35:53.960
就前面这个任务没完成

35:53.960 --> 35:54.960
后面的任务一定是平定

35:54.960 --> 35:55.960
一定是没完成的

35:55.960 --> 35:56.960
Promise三

35:56.960 --> 35:57.960
一定是平定

35:57.960 --> 35:58.960
这个毫无疑问

35:58.960 --> 35:59.960
所以我一开始输出

35:59.960 --> 36:00.960
平定

36:00.960 --> 36:01.960
平定

36:01.960 --> 36:02.960
这个不变

36:02.960 --> 36:03.960
好

36:03.960 --> 36:05.960
完成了

36:05.960 --> 36:07.960
数据为一

36:07.960 --> 36:09.960
接下来看Promise二

36:09.960 --> 36:12.960
Promise二有没有针对

36:12.960 --> 36:14.960
Promise一的完成

36:14.960 --> 36:15.960
做处理

36:15.960 --> 36:16.960
没有

36:16.960 --> 36:18.960
没有针对它的完成做处理

36:18.960 --> 36:20.960
所以Promise二的状态

36:20.960 --> 36:21.960
也是完成

36:21.960 --> 36:23.960
跟Promise一一模一样

36:23.960 --> 36:24.960
数据也是一

36:25.960 --> 36:26.960
对吧

36:26.960 --> 36:28.960
然后Promise三有没有针对

36:28.960 --> 36:30.960
Promise二的完成

36:30.960 --> 36:31.960
做处理呢

36:31.960 --> 36:32.960
有

36:33.960 --> 36:34.960
那么输出什么

36:34.960 --> 36:36.960
输出完成的数据一

36:36.960 --> 36:38.960
说说这里会输出一

36:38.960 --> 36:39.960
Promise三的状态取决于

36:39.960 --> 36:41.960
这个函数的运行结果

36:41.960 --> 36:43.960
运行过程有没有错

36:43.960 --> 36:44.960
运行过程没有错

36:44.960 --> 36:46.960
所以说得到ful filled

36:46.960 --> 36:47.960
然后呢

36:47.960 --> 36:51.460
数据是on defined

36:51.460 --> 36:53.460
好 因此最后是输出

36:53.460 --> 36:56.460
一一on defined

36:56.460 --> 36:57.460
看一看

36:58.460 --> 36:59.460
三个平定

36:59.460 --> 37:00.460
然后输出一

37:00.460 --> 37:03.460
然后输出一一on defined

37:03.460 --> 37:04.460
对吧

37:05.460 --> 37:06.460
好 再来

37:06.460 --> 37:07.460
再来

37:08.460 --> 37:09.460
多来几个

37:11.460 --> 37:12.460
这边呢

37:12.460 --> 37:13.460
我就

37:13.460 --> 37:17.220
我直接看第二题吧

37:17.220 --> 37:18.220
第二题就是说的时间

37:19.220 --> 37:20.220
我把这个题

37:21.220 --> 37:23.220
题再复制一份

37:23.220 --> 37:24.220
看这边

37:24.220 --> 37:26.220
因为我要改来改去的

37:29.220 --> 37:30.220
我们就这条题

37:30.220 --> 37:31.220
我再来一下

37:31.220 --> 37:32.220
再来一下

37:32.220 --> 37:34.220
我这样子

37:34.220 --> 37:36.220
我这边呢

37:37.220 --> 37:38.220
抛一个错

37:44.650 --> 37:46.650
你看 这下面一个代码变暗了

37:46.650 --> 37:47.650
对吧

37:47.650 --> 37:48.650
为什么变暗了

37:48.650 --> 37:49.650
是因为

37:49.650 --> 37:51.650
它后边的代码就没法实行了

37:51.650 --> 37:52.650
为什么 因为这里爆错了

37:52.650 --> 37:54.650
爆错了 它就没法实行

37:54.650 --> 37:55.650
好 再来

37:55.650 --> 37:59.090
看这个情况

37:59.090 --> 38:00.090
一开始还是一样

38:00.090 --> 38:01.090
Promise一是平顶

38:01.090 --> 38:02.090
它也跟着是平顶

38:02.090 --> 38:03.090
它也跟着是平顶

38:03.090 --> 38:04.090
一开始不变

38:04.090 --> 38:08.230
好 就看后边了

38:08.230 --> 38:09.230
它完成了

38:09.230 --> 38:11.230
完成过是不是要运行它

38:12.230 --> 38:14.230
运行它在过程中

38:14.230 --> 38:15.230
有没有爆错

38:15.230 --> 38:16.230
就爆了一个错误

38:16.230 --> 38:17.230
错误是

38:17.230 --> 38:18.230
原因是3

38:18.230 --> 38:19.230
对吧 错误对象是3

38:19.230 --> 38:21.230
所以说Promise2

38:21.230 --> 38:22.230
什么状态

38:24.230 --> 38:25.230
就下面的代码不用看

38:25.230 --> 38:26.230
根本不会运行

38:26.230 --> 38:27.230
因为它爆错了

38:27.230 --> 38:29.230
后边的代码不会运行

38:29.230 --> 38:31.230
它是失败了

38:31.230 --> 38:32.230
失败了过后

38:32.230 --> 38:34.230
它失败的原因是3

38:35.230 --> 38:37.230
然后它失败了

38:37.230 --> 38:38.230
然后看一下Promise3

38:38.230 --> 38:40.230
Promise3

38:40.230 --> 38:41.230
有没有针对失败

38:41.230 --> 38:43.230
它的失败进行处理

38:43.230 --> 38:44.230
是没有

38:44.230 --> 38:45.230
没有针对Promise2的

38:45.230 --> 38:46.230
失败进行处理

38:46.230 --> 38:48.230
所以说Promise3

38:48.230 --> 38:49.230
回到这种情况

38:49.230 --> 38:50.230
第一个情况

38:50.230 --> 38:52.230
没有相关处理

38:52.230 --> 38:54.230
那么Promise3的状态

38:54.230 --> 38:57.230
跟Promise2完全一致

38:57.230 --> 38:59.230
原因也是3

38:59.230 --> 39:01.230
最终输出结果就是

39:01.230 --> 39:03.230
自己没有输出了

39:03.230 --> 39:05.610
那么就是平顶

39:05.610 --> 39:06.610
平顶

39:06.610 --> 39:07.610
然后呢

39:07.610 --> 39:12.480
一 三 三

39:12.480 --> 39:14.480
一 三 三

39:14.480 --> 39:15.480
前面有些警告

39:15.480 --> 39:16.480
他告诉你

39:16.480 --> 39:17.480
有些Promise

39:17.480 --> 39:19.480
没有处理它的错误

39:19.480 --> 39:22.430
明白了意思吧

39:22.430 --> 39:24.430
好 这样我们看第二题

39:24.430 --> 39:25.430
第二题

39:25.430 --> 39:27.430
然后最后来解决

39:27.430 --> 39:28.430
针对的问题

39:28.430 --> 39:29.430
第二题呢

39:29.430 --> 39:30.430
就是这样子写的

39:30.430 --> 39:32.430
这就形成一个链式

39:32.430 --> 39:33.430
链式调用了

39:33.430 --> 39:34.430
为什么能这样子写呢

39:34.430 --> 39:35.430
刚才不是

39:35.430 --> 39:36.430
要一个变量

39:36.430 --> 39:37.430
一个变量拿到吗

39:37.430 --> 39:38.430
其实本质上是一样的

39:38.430 --> 39:40.430
你看好 就这个题

39:41.430 --> 39:42.430
Promise1

39:42.430 --> 39:44.430
这是Promise1

39:45.430 --> 39:47.430
这个是不是Promise1

39:47.430 --> 39:49.430
是不是可以替换到这

39:49.430 --> 39:53.000
这个玩意是不是Promise2

39:53.000 --> 39:55.000
是不是可以替换到这

39:57.000 --> 40:01.270
不就形成这个样子了吗

40:01.270 --> 40:03.270
实际上可以的

40:03.270 --> 40:04.270
都是用表达式

40:04.270 --> 40:05.270
这是一个Promise

40:05.270 --> 40:06.270
调用任过后

40:06.270 --> 40:07.270
任方法是不是

40:07.270 --> 40:08.270
返回一个新的Promise

40:08.270 --> 40:10.270
说这也是个Promise

40:10.270 --> 40:11.270
Promise是不是

40:11.270 --> 40:12.270
是不是有开启方法

40:12.270 --> 40:13.270
那么开启方法

40:13.270 --> 40:14.270
跟任方法本质上是一样

40:14.270 --> 40:15.270
怎么刚才说了

40:15.270 --> 40:16.270
之前就说了

40:16.270 --> 40:17.270
所以说他也会返回一个Promise

40:17.270 --> 40:18.270
说这里也会继续调用正

40:18.270 --> 40:20.270
这就是一个链式变成

40:20.270 --> 40:21.270
就前面返回的

40:21.270 --> 40:23.270
以每一步返回的

40:23.270 --> 40:24.270
都是一个Promise

40:24.270 --> 40:26.270
所以我们可以一次写

40:26.270 --> 40:28.270
那么请问这个代码返回啥

40:28.270 --> 40:30.270
输出啥

40:35.120 --> 40:39.710
好 我们来看一下吧

40:39.710 --> 40:40.710
这个Promise

40:40.710 --> 40:42.710
我们把它叫做Promise1

40:43.710 --> 40:45.710
成功没 成功了吧

40:45.710 --> 40:47.710
它一出来就成功了 对吧

40:47.710 --> 40:48.710
Fulfilled

40:48.710 --> 40:51.090
数据是啥

40:51.090 --> 40:52.090
是1

40:53.090 --> 40:54.090
针对这个Promise是不是

40:54.090 --> 40:56.090
产生了一个后续处理

40:56.090 --> 40:58.090
这个Promise有个任方法

40:58.090 --> 40:59.090
进行后续处理

40:59.090 --> 41:00.090
那么这个任方法

41:00.090 --> 41:02.090
会是不是返回一个Promise2

41:03.090 --> 41:05.090
对吧 也会返回一个任务对象

41:05.090 --> 41:06.090
那么它是

41:06.090 --> 41:07.090
这个新的任务是成功了

41:07.090 --> 41:08.090
还是失败了

41:08.090 --> 41:10.090
那取决于

41:10.090 --> 41:11.090
前面那个任务

41:11.090 --> 41:12.090
前面的任务成功没

41:12.090 --> 41:13.090
成功了

41:13.090 --> 41:14.090
成功了就要进行后续处理

41:14.090 --> 41:16.090
那么我们看后续处理

41:16.090 --> 41:17.090
这个后续处理过程中有错吗

41:17.090 --> 41:19.090
没错吧

41:19.090 --> 41:20.090
没错的话

41:22.090 --> 41:23.090
是不是它也成功

41:24.090 --> 41:25.090
数据是啥

41:25.090 --> 41:26.090
属于它返回的值

41:27.090 --> 41:28.090
Promise2

41:28.090 --> 41:30.090
然后针对Promise2

41:30.090 --> 41:32.090
也有后续处理是个开启

41:32.090 --> 41:34.090
也是有后续处理的

41:34.090 --> 41:35.090
那么开启方法

41:35.090 --> 41:37.090
是不是返回一个Promise3

41:37.090 --> 41:40.590
Promise3的状态

41:40.590 --> 41:43.590
针对Promise2进行后续处理

41:43.590 --> 41:45.590
但它只处理失败

41:45.590 --> 41:47.590
Promise2失败了吗

41:47.590 --> 41:49.590
没失败 它成功了

41:49.590 --> 41:50.590
那有没有针对Promise2

41:50.590 --> 41:51.590
进行成功的处理

41:51.590 --> 41:52.590
没有

41:53.590 --> 41:55.590
我只进行失败的处理

41:55.590 --> 41:58.590
所以说Promise3的状态

41:58.590 --> 42:01.590
由于它没有针对成功的处理

42:01.590 --> 42:03.590
所以它的状态跟Promise2一致

42:03.590 --> 42:05.590
就是第一种情况

42:05.590 --> 42:07.590
数据也一致

42:08.590 --> 42:10.590
然后针对Promise3

42:10.590 --> 42:12.590
又返回Promise

42:12.590 --> 42:13.590
又钓入了个任何方法

42:13.590 --> 42:15.590
返回一个Promise4

42:21.100 --> 42:23.100
返回Promise4

42:23.100 --> 42:26.100
Promise4的状态是不是取决Promise3

42:26.100 --> 42:28.100
Promise3成功了吗

42:28.100 --> 42:29.100
成功了

42:29.100 --> 42:31.100
有没有针对它进行后续处理

42:31.100 --> 42:32.100
不就要后续处理

42:32.100 --> 42:34.100
所以Promise4的状态取决于

42:34.100 --> 42:37.100
取决于这个后续处理的过程

42:37.100 --> 42:38.100
有没有爆错

42:38.100 --> 42:39.100
有没有爆错

42:39.100 --> 42:41.100
没有爆错 没有爆错就成功

42:42.100 --> 42:44.100
结果是多少 结果是数

42:44.100 --> 42:46.100
结果返回的结果是2斤半

42:46.100 --> 42:49.420
好 那么输出啥

42:49.420 --> 42:51.420
那你看输出啥

42:51.420 --> 42:52.420
这个Promise成功了

42:52.420 --> 42:53.420
数据为1

42:53.420 --> 42:55.420
那么这里是不是就输出

42:55.420 --> 42:57.420
它成功之后就输出1

42:57.420 --> 42:58.420
就输出1

42:59.420 --> 43:00.420
然后返回2

43:00.420 --> 43:02.420
是不是导致这个Promise得到结果是2

43:02.420 --> 43:03.420
然后呢

43:04.420 --> 43:05.420
有没有错误处理

43:05.420 --> 43:06.420
没有错误处理

43:06.420 --> 43:07.420
它没有错误

43:07.420 --> 43:09.420
所以这个函数不执行

43:09.420 --> 43:10.420
然后Z

43:10.420 --> 43:11.420
这边

43:11.420 --> 43:12.420
所以这个函数要执行

43:12.420 --> 43:13.420
这个函数执行的时候

43:13.420 --> 43:15.420
是不是得到Promise3的

43:16.420 --> 43:17.420
数据

43:17.420 --> 43:18.420
输出2

43:18.420 --> 43:19.420
输出1和2

43:19.420 --> 43:23.240
那如果说我这里

43:23.240 --> 43:25.240
把个提一再加深印象

43:25.240 --> 43:26.240
我这里得到Pro

43:26.240 --> 43:28.240
最后我们用Z探报者

43:28.240 --> 43:29.240
一秒钟之后

43:29.240 --> 43:30.240
我们输出Promise

43:30.240 --> 43:32.240
请问它的状态和数据是啥

43:36.280 --> 43:38.280
看蒙了没 同学们

43:38.280 --> 43:39.280
这个Promise

43:39.280 --> 43:41.280
不就是最后一个方法返回的东西吗

43:41.280 --> 43:43.280
不就是Promise4吗

43:43.280 --> 43:44.280
不就是吗

43:44.280 --> 43:45.280
你雕用一个函

43:45.280 --> 43:47.280
比如说我们这样写单

43:47.280 --> 43:57.540
这个表达是的结果

43:57.540 --> 44:00.540
不就是这个函数的返回结果吗

44:00.540 --> 44:02.540
它的返回东西

44:02.540 --> 44:03.540
返回对象

44:03.540 --> 44:05.540
雕用对象的BBB方法

44:05.540 --> 44:06.540
BBB返回对象

44:06.540 --> 44:08.540
雕用它的CCC方法

44:08.540 --> 44:09.540
它返回对象

44:09.540 --> 44:10.540
雕用滴滴滴的方法

44:10.540 --> 44:12.540
这就是个表达设置

44:12.540 --> 44:14.540
所以就是Promise4

44:14.540 --> 44:16.540
要fulfill on defined

44:17.540 --> 44:18.540
对吧

44:18.540 --> 44:20.540
或者说

44:21.540 --> 44:22.540
这道题

44:24.540 --> 44:25.540
下面这道题

44:26.540 --> 44:27.540
有来看

44:28.540 --> 44:30.540
只是其实我们这里和就讲完了

44:30.540 --> 44:31.540
现在我们就说

44:31.540 --> 44:36.840
不断的去加深这个印象

44:36.840 --> 44:37.840
看这道题

44:40.920 --> 44:41.920
有来吧

44:41.920 --> 44:42.920
有来

44:45.550 --> 44:46.550
这个Promise

44:46.550 --> 44:48.550
我们把它称之为Promise1

44:48.550 --> 44:53.760
然后它的状态fulfill

44:53.760 --> 44:57.260
数据 on defined

44:57.260 --> 44:59.260
然后对雕用它的Zin

44:59.260 --> 45:02.260
这个Zin是不是返回一个新的Promise

45:02.260 --> 45:05.260
针对Promise1进行后续处理

45:05.260 --> 45:06.260
对吧

45:06.260 --> 45:08.260
把它称之为Promise2

45:08.260 --> 45:10.260
它的状态是不是取决于

45:10.260 --> 45:12.260
后续处理的过程

45:12.260 --> 45:14.260
因为它有后续处理

45:14.260 --> 45:16.260
取决它后续处理的过程

45:16.260 --> 45:19.150
那么

45:19.150 --> 45:20.150
这个处理的过程是不是没

45:20.150 --> 45:21.150
看一下有没有错

45:21.150 --> 45:22.150
对

45:22.150 --> 45:23.150
看一下有没有错误

45:23.150 --> 45:25.150
这个处理的过程有没有错误

45:25.150 --> 45:27.150
那么没有错误

45:27.150 --> 45:28.150
我们好好看一下

45:29.150 --> 45:32.150
它是针对Promise1的后续处理

45:32.150 --> 45:34.150
Promise1的数据是什么

45:34.150 --> 45:35.150
on defined

45:35.150 --> 45:37.150
那么也就是Race是on defined

45:37.150 --> 45:39.150
我们要输出一个on defined的

45:39.150 --> 45:40.150
投尸距离是否爆错了

45:40.150 --> 45:41.150
这句话

45:41.150 --> 45:43.150
这句话是不是会爆错

45:44.150 --> 45:45.150
那么导致Promise2

45:45.150 --> 45:46.150
是什么

45:48.150 --> 45:50.150
原因就是你不能

45:51.150 --> 45:52.150
你就不能

45:52.150 --> 45:54.150
读取on defined的投尸距离方法

45:54.150 --> 45:56.150
对它的错误原因是一个错误对象

45:57.150 --> 45:59.150
由于Promise2是Race接个体的

45:59.150 --> 46:01.150
所以说导致Promise3

46:02.150 --> 46:03.150
这是Promise3

46:03.150 --> 46:05.150
针对Promise2的后续处理

46:06.150 --> 46:07.150
处理什么

46:07.150 --> 46:08.150
处理错误

46:08.150 --> 46:09.150
Promise2是不是有

46:09.150 --> 46:10.150
是错误了

46:10.150 --> 46:12.150
那么Promise3

46:12.150 --> 46:14.150
是不是会取决于运行这个函数

46:14.150 --> 46:16.150
这个函数的运行过程中有错误吗

46:17.150 --> 46:18.150
没有错误吧

46:18.150 --> 46:20.150
没有错误就是fulfilled

46:25.020 --> 46:29.020
Promise3的状态取决于针对Promise2的后续处理

46:30.020 --> 46:33.020
这是不是针对Promise2的后续处理

46:34.020 --> 46:35.020
Promise2爆错了吗

46:35.020 --> 46:37.020
所以说这里要处理这个错误

46:37.020 --> 46:39.020
而处理的过程中也处理OK了

46:39.020 --> 46:41.020
就是你有错不怕

46:41.020 --> 46:42.020
只要改了就行

46:42.020 --> 46:43.020
你有错了

46:43.020 --> 46:44.020
但是我处理好了

46:44.020 --> 46:45.020
那就没有错误了

46:45.020 --> 46:47.020
Promise3是fulfilled的

46:47.020 --> 46:48.020
完成了

46:48.020 --> 46:49.020
数据是吧

46:49.020 --> 46:50.020
数据就返回结果

46:53.360 --> 46:57.990
然后Promise4

46:57.990 --> 47:00.300
Promise4

47:01.300 --> 47:03.300
针对Promise3进行后续处理

47:04.300 --> 47:05.300
Promise3完成了

47:05.300 --> 47:07.300
这就是运行完成的代码

47:07.300 --> 47:08.300
运行过程中没有错误

47:08.300 --> 47:09.300
输出解

47:09.300 --> 47:10.300
输出3

47:11.300 --> 47:12.300
Promise4

47:12.300 --> 47:13.300
就得到的结果就是

47:14.300 --> 47:15.300
完成了

47:17.740 --> 47:18.740
数据是什么

47:19.740 --> 47:20.740
它没有返回吗

47:21.740 --> 47:22.740
我们看一下输出3

47:24.740 --> 47:25.740
输出3是肯定的

47:27.740 --> 47:29.740
这下来我们看一下得到

47:33.120 --> 47:35.120
一秒钟之后我输出Promise2

47:35.120 --> 47:36.120
它的状态是什么

47:36.120 --> 47:38.120
它的状态就是fulfilled的

47:38.120 --> 47:39.120
就是Promise4

47:43.120 --> 47:44.120
好好去处理一下

47:44.120 --> 47:45.120
下面得到的

47:46.120 --> 47:47.120
再看

47:47.120 --> 47:54.400
又来我反复了个分析

47:54.400 --> 47:56.400
这样的分析就把它掌握好了

47:57.400 --> 47:58.400
这个Promise

47:59.400 --> 48:00.400
Promise1

48:01.400 --> 48:02.400
这里边既没有调用Resolve

48:02.400 --> 48:04.400
既没有调用Resolve建设

48:04.400 --> 48:06.400
那么这里的逻辑是一样的

48:06.400 --> 48:07.400
逻辑一样

48:08.400 --> 48:09.400
就看它有没有抱错

48:10.400 --> 48:12.400
有抱错了那就是错误

48:12.400 --> 48:13.400
那就是失败的

48:13.400 --> 48:14.400
执行的过程中

48:14.400 --> 48:15.400
你看这个任务都执行不下去了

48:15.400 --> 48:17.400
是抱错了就执行不下去了

48:17.400 --> 48:18.400
那么就失败

48:19.400 --> 48:20.400
没什么意思吧

48:20.400 --> 48:21.400
所以说这里

48:23.400 --> 48:24.400
这个新的任务

48:25.400 --> 48:26.400
这边

48:27.400 --> 48:28.400
是不是失败的

48:29.400 --> 48:32.710
然后失败的原因是什么

48:32.710 --> 48:33.710
原因是一个错误对象

48:36.710 --> 48:37.710
是这么一个错误对象

48:39.710 --> 48:40.710
这是第一个Promise

48:41.710 --> 48:42.710
第二个Promise

48:43.710 --> 48:45.710
是针对第一个Promise产生

48:45.710 --> 48:46.710
做了后续处理

48:47.710 --> 48:49.710
说如果说你成功了

48:49.710 --> 48:50.710
我就运行这个

48:50.710 --> 48:51.710
它成功了吗

48:51.710 --> 48:52.710
没成功

48:52.710 --> 48:54.710
那它失败了运行啥

48:54.710 --> 48:55.710
没有运行的

48:55.710 --> 48:57.710
所以没有针对失败进行后续处理

48:58.710 --> 48:59.710
那么Promise2什么情况

49:01.710 --> 49:02.710
看一下123

49:02.710 --> 49:03.710
那三个点哪个情况

49:04.710 --> 49:05.710
没有针对它的相关

49:06.710 --> 49:07.710
结果进行后续处理

49:07.710 --> 49:09.710
那么它的结果就跟它一致

49:10.710 --> 49:13.920
好没有看

49:13.920 --> 49:15.920
针对Promise2进行后续处理

49:15.920 --> 49:16.920
是不是Promise3

49:18.920 --> 49:19.920
针对Promise2的后续处理

49:20.920 --> 49:23.920
那么Promise2是不是失败了

49:23.920 --> 49:25.920
有没有针对失败进行处理

49:25.920 --> 49:27.920
是不是针对失败进行处理了

49:27.920 --> 49:28.920
对不对

49:28.920 --> 49:30.920
好那么我就看处理的过程

49:30.920 --> 49:32.920
处理的过程有爆错吗

49:32.920 --> 49:35.360
是不是有爆错

49:35.360 --> 49:36.360
它抛了有什么

49:36.360 --> 49:37.360
抛了一个错误

49:37.360 --> 49:38.360
这个错误是啥

49:38.360 --> 49:39.360
是不是来自于这

49:39.360 --> 49:40.360
对吧

49:40.360 --> 49:41.360
就这个玩意

49:42.360 --> 49:43.360
它把传到Aero里边去了

49:43.360 --> 49:45.360
你要针对错误进行处理

49:45.360 --> 49:46.360
这就是错误原因

49:46.360 --> 49:47.360
你去处理

49:47.360 --> 49:48.360
我传给你的

49:49.360 --> 49:52.360
那么你结果你把错误重新抛出来了

49:52.360 --> 49:53.360
所以说

49:53.360 --> 49:55.360
因为它执行的过程中包了错

49:55.360 --> 49:57.360
Promise3也是瑞杰克提的

49:57.360 --> 49:59.360
数据仍然一样

49:59.360 --> 50:00.360
它包到什么错

50:00.360 --> 50:02.360
它的数据就是什么数据

50:02.360 --> 50:04.360
好这还Promise4

50:04.360 --> 50:06.360
针对Promise3进行后续处理

50:06.360 --> 50:07.360
就这一块

50:07.360 --> 50:11.020
Promise3是什么情况

50:11.020 --> 50:12.020
失败了

50:12.020 --> 50:14.020
我有针对失败进行处理吗

50:14.020 --> 50:15.020
没有

50:15.020 --> 50:16.020
我只是对成功进行处理的

50:16.020 --> 50:18.020
成功关我了事

50:18.020 --> 50:19.020
没有意义对吧

50:19.020 --> 50:20.020
所以说我这里呢

50:22.020 --> 50:24.020
Promise4也是失败

50:24.020 --> 50:27.290
所以说这个题

50:27.290 --> 50:28.290
输出啥

50:28.290 --> 50:29.290
啥都不会输出

50:29.290 --> 50:31.290
这个函数运行不了

50:31.290 --> 50:32.290
因为它前面失败了

50:32.290 --> 50:34.290
它只是成功之后运行的

50:34.290 --> 50:35.290
前面失败了

50:35.290 --> 50:36.290
它不会运行

50:36.290 --> 50:38.290
这个函数倒是会运行

50:38.290 --> 50:39.290
它又跑了个错误

50:39.290 --> 50:41.290
导致Promise3也跟着失败

50:42.290 --> 50:43.290
这个函数运行不了

50:43.290 --> 50:44.290
因为前面的失败了

50:45.290 --> 50:47.290
前面那个Promise3失败了

50:47.290 --> 50:48.290
所以说它这个成功

50:48.290 --> 50:49.290
不会运行

50:49.290 --> 50:50.290
啥都不会输出

50:50.290 --> 50:51.290
那如果说问你

50:52.290 --> 50:54.290
最终这个Promise

50:54.290 --> 50:55.290
什么状态

50:55.290 --> 50:56.290
我就不写了

50:56.290 --> 50:57.290
就这个状态

51:00.240 --> 51:02.240
然后我在这边再来一个

51:02.240 --> 51:04.240
比方说我这里呢

51:05.240 --> 51:08.130
我没有报仇

51:10.130 --> 51:11.130
我没有报仇

51:12.130 --> 51:13.130
我这里有雷肉

51:13.130 --> 51:17.400
那这又会怎么样呢

51:17.400 --> 51:19.840
又来呗

51:20.840 --> 51:22.840
Pro1完成了吧

51:23.840 --> 51:24.840
数据是啥

51:24.840 --> 51:25.840
1

51:25.840 --> 51:26.840
Pro2

51:27.840 --> 51:28.840
告诉我

51:28.840 --> 51:29.840
什么情况

51:30.840 --> 51:31.840
对完成有没有处理

51:31.840 --> 51:32.840
有处理

51:33.840 --> 51:34.840
那么直径过程中报错了吗

51:34.840 --> 51:36.840
有时候都报错了

51:36.840 --> 51:37.840
哪里报错了

51:38.840 --> 51:40.840
这个数据当然毫无疑问是1

51:40.840 --> 51:41.840
对吧

51:41.840 --> 51:42.840
1传过去了

51:42.840 --> 51:43.840
这个过程哪里报错了

51:44.840 --> 51:45.840
它不是Slow

51:45.840 --> 51:46.840
Slow才是Pull

51:46.840 --> 51:47.840
Slow才会报错

51:47.840 --> 51:48.840
它是返回

51:48.840 --> 51:50.840
Error只不过是一个对象而已

51:52.840 --> 51:54.840
跟普通对象没有什么本质的区别

51:54.840 --> 51:55.840
它就是一个对象

51:55.840 --> 51:56.840
你返回了一个对象而已

51:56.840 --> 51:58.840
所以旁边说是完成的

51:59.840 --> 52:00.840
完成的

52:00.840 --> 52:01.840
它的数据是什么

52:01.840 --> 52:03.840
数据是一个Error对象

52:05.840 --> 52:06.840
因此它输出了多少

52:06.840 --> 52:07.840
输出了1

52:07.840 --> 52:09.840
输出了成功的结果1

52:09.840 --> 52:10.840
然后完成了

52:10.840 --> 52:11.840
返回的

52:11.840 --> 52:13.840
它的相关数据是一个错误对象

52:13.840 --> 52:15.840
它没有抛出错误

52:15.840 --> 52:17.840
它只是返回的错误

52:18.840 --> 52:20.840
然后Pull3

52:20.840 --> 52:22.840
它只是针对错误进行处理

52:22.840 --> 52:24.840
对成功有没有处理

52:24.840 --> 52:25.840
对成功没有处理

52:25.840 --> 52:28.840
所以Pull3的状态跟Pull2是一样的

52:33.540 --> 52:34.540
然后Pull4

52:35.540 --> 52:37.540
针对Pull3进行处理

52:38.540 --> 52:39.540
针对Pull3进行处理

52:40.540 --> 52:41.540
成功吗

52:41.540 --> 52:42.540
成功了

52:42.540 --> 52:43.540
成功了就运行这个函数

52:43.540 --> 52:44.540
运行的过程中

52:44.540 --> 52:45.540
它输出了多少

52:45.540 --> 52:46.540
输出了一个Error对象

52:48.540 --> 52:50.540
然后整个过程中有没有错误

52:50.540 --> 52:51.540
没有错误

52:51.540 --> 52:52.540
Pull4也是成功的

52:55.230 --> 52:57.230
数据是2dB

52:57.230 --> 52:59.230
它返回的是2dB

52:59.230 --> 53:00.230
好 运行看一下

53:03.570 --> 53:04.570
好好去处理

53:04.570 --> 53:05.570
好好去处理

53:05.570 --> 53:07.570
其实终点就是123个点

53:07.570 --> 53:08.570
对吧 这三个点你清楚了

53:08.570 --> 53:10.570
你所有的这一块的面试题

53:10.570 --> 53:11.570
都不用怕了

53:12.570 --> 53:13.570
无论它怎么出

53:13.570 --> 53:14.570
因为你要说

53:14.570 --> 53:15.570
你把所有面试题

53:15.570 --> 53:16.570
各种情况的面试题做完

53:16.570 --> 53:17.570
那是不可能的

53:17.570 --> 53:19.570
你出的题千奇百怪

53:19.570 --> 53:20.570
但是你只要掌握了

53:20.570 --> 53:22.570
它的核心原理的话

53:22.570 --> 53:24.570
随便它怎么出都不会有错了

53:24.570 --> 53:26.570
那最后来我们来看一下

53:26.570 --> 53:28.570
针对这个劣势的Promise

53:28.570 --> 53:29.570
平时我们写代码

53:29.570 --> 53:30.570
真的是这样子写吗

53:30.570 --> 53:31.570
不至于

53:32.570 --> 53:33.570
我跟人说平时写代码

53:33.570 --> 53:34.570
其实很简单

53:36.570 --> 53:37.570
我有个任务

53:37.570 --> 53:39.570
然后我就对它进行处理

53:39.570 --> 53:40.570
我怎么处理呢

53:40.570 --> 53:41.570
这个任务

53:41.570 --> 53:42.570
如果说成功了

53:42.570 --> 53:43.570
我就这样出

53:43.570 --> 53:44.570
失败了

53:44.570 --> 53:45.570
我就这样做

53:46.570 --> 53:47.570
为什么可以这样的写

53:48.570 --> 53:49.570
这种写法

53:49.570 --> 53:52.570
其实类似于这种写法

53:53.570 --> 53:54.570
就成功了

53:54.570 --> 53:55.570
我这样的写

53:55.570 --> 53:56.570
这样处理

53:56.570 --> 53:57.570
失败了

53:58.570 --> 53:59.570
别人的意思

53:59.570 --> 54:00.570
那为什么也可以这样的写呢

54:00.570 --> 54:01.570
你看吧

54:01.570 --> 54:02.570
如果说它成功了

54:02.570 --> 54:03.570
是不是会运行它

54:05.570 --> 54:06.570
对不对

54:06.570 --> 54:07.570
那就没问题吧

54:07.570 --> 54:08.570
它不会运

54:08.570 --> 54:09.570
它会运行它

54:09.570 --> 54:11.570
除非它处理的过程中有问题

54:11.570 --> 54:12.570
它就会

54:12.570 --> 54:14.570
除非它处理的过程中有出了问题

54:14.570 --> 54:16.570
那么就会导致前面的任务失败

54:16.570 --> 54:17.570
然后就会运行它

54:18.570 --> 54:19.570
如果说没有问题的话

54:19.570 --> 54:20.570
一般来说都没有什么问题

54:20.570 --> 54:21.570
就是说

54:21.570 --> 54:22.570
如果它成功了

54:22.570 --> 54:23.570
是不是会运行它

54:23.570 --> 54:24.570
这个没问题吧

54:24.570 --> 54:25.570
如果说它失败了

54:25.570 --> 54:27.570
我这里是不是没有针对它失败进行处理

54:28.570 --> 54:30.570
我这里面是不是只写了一个回调

54:30.570 --> 54:32.570
没有针对它的失败进行处理

54:32.570 --> 54:33.570
那么这个

54:33.570 --> 54:36.570
这个任方法返回了新的Promise

54:36.570 --> 54:38.570
是不是跟原来的Promise一样

54:38.570 --> 54:39.570
它状态一样

54:39.570 --> 54:40.570
对吧

54:40.570 --> 54:42.570
其实我们平时写代码的时候

54:42.570 --> 54:44.570
没有去想那么细

54:44.570 --> 54:45.570
包括我

54:45.570 --> 54:46.570
我值不值得

54:46.570 --> 54:47.570
我当然值得

54:47.570 --> 54:48.570
我要跟你分析

54:48.570 --> 54:49.570
我跟你分析的头绿寿道

54:49.570 --> 54:51.570
但是我不会去想那么细的

54:51.570 --> 54:52.570
我们平时写代码的时候

54:52.570 --> 54:53.570
怎么写

54:53.570 --> 54:54.570
就是写到Promise

54:54.570 --> 54:55.570
成功了

54:55.570 --> 54:56.570
然后做什么

54:56.570 --> 54:57.570
失败了

54:57.570 --> 54:58.570
然后做什么

54:58.570 --> 54:59.570
我就直接这样写完了

54:59.570 --> 55:00.570
我不会去想

55:00.570 --> 55:02.570
这个任方法返回的一个新的Promise

55:02.570 --> 55:03.570
它的状态是啥

55:03.570 --> 55:04.570
我不会去这样想的

55:04.570 --> 55:05.570
我只有做面试题的时候

55:05.570 --> 55:06.570
我会这样想

55:06.570 --> 55:08.570
如果平时写代码的话

55:08.570 --> 55:10.570
我就按照逻辑来写就行了

55:10.570 --> 55:11.570
它成功了怎么样

55:11.570 --> 55:12.570
它失败了怎么样

55:12.570 --> 55:13.570
对吧

55:13.570 --> 55:14.570
我就这样写

55:14.570 --> 55:16.570
然后还有一些常见的写法

55:16.570 --> 55:17.570
就是我可能成功之后

55:17.570 --> 55:18.570
我有很多的事情

55:18.570 --> 55:19.570
要挨在这儿做

55:19.570 --> 55:20.570
那我就会这样写

55:20.570 --> 55:22.570
你成功了过后

55:22.570 --> 55:23.570
我先做这个

55:23.570 --> 55:24.570
然后再做这个

55:24.570 --> 55:25.570
那后边还有处理的话

55:25.570 --> 55:27.570
我就再然后再做这个

55:27.570 --> 55:28.570
对吧

55:28.570 --> 55:29.570
每个处理都是一个回调函数

55:30.570 --> 55:31.570
就前边处理完了

55:31.570 --> 55:32.570
返回个东西

55:32.570 --> 55:34.570
后边接着前边返回的结果

55:34.570 --> 55:35.570
进行处理

55:35.570 --> 55:37.570
再后边接着上一步返回的结果

55:37.570 --> 55:38.570
进行处理

55:38.570 --> 55:39.570
就像下一步

55:39.570 --> 55:40.570
下一步不停地处理

55:41.570 --> 55:42.570
对吧

55:42.570 --> 55:43.570
这也是一种常见写法

55:44.570 --> 55:45.570
然后还有这种写法

55:46.570 --> 55:48.570
你成功了之后

55:48.570 --> 55:49.570
做这个

55:49.570 --> 55:50.570
先做这个

55:50.570 --> 55:51.570
然后再做这个

55:51.570 --> 55:52.570
如果说

55:52.570 --> 55:54.570
前边处理的是有任何一步

55:54.570 --> 55:55.570
又可能它失败了

55:55.570 --> 55:57.570
又可能它的处理过程有问题

55:57.570 --> 55:58.570
又可能它的处理过程有问题

55:58.570 --> 56:00.570
反正只要前面的处理有问题

56:00.570 --> 56:02.570
我统一在后边进行错误处理

56:03.570 --> 56:04.570
这也是一种常见的写法

56:05.570 --> 56:07.570
其实我们平时开发的时候

56:07.570 --> 56:09.570
脑袋里边不会去想这123

56:09.570 --> 56:10.570
这123是做面词题的

56:12.570 --> 56:13.570
平时我们开发的时候

56:13.570 --> 56:14.570
就是按逻辑来写

56:14.570 --> 56:15.570
然后然后怎么样

56:15.570 --> 56:16.570
然后怎么样

56:16.570 --> 56:17.570
有了错误怎么样怎么样

56:17.570 --> 56:18.570
就写就完事了

56:20.570 --> 56:21.570
最后我们给大家看一下

56:21.570 --> 56:23.570
毁掉地域是不是解决了

56:24.570 --> 56:25.570
带码们copy过来

56:28.200 --> 56:29.200
还有最后一个练习题

56:29.200 --> 56:30.200
我们一会再说

56:34.180 --> 56:36.180
上面的函数没变

56:36.180 --> 56:37.180
跟上级课一样

56:37.180 --> 56:38.180
所以说不再说了

56:39.180 --> 56:40.180
这个函数会返回Promise

56:40.180 --> 56:41.180
你看我现在变成怎么写了

56:42.180 --> 56:44.180
给李建国发消息

56:44.180 --> 56:46.180
成功我现在不管

56:46.180 --> 56:47.180
管都不管

56:47.180 --> 56:49.180
我现在就管失败

56:49.180 --> 56:51.180
你失败了会怎么样

56:52.180 --> 56:55.180
如果说你给李建国发消息了

56:55.180 --> 56:56.180
失败了变成不同意

56:56.180 --> 56:57.180
不同意的话

56:57.180 --> 57:00.180
输出你这个结果

57:00.180 --> 57:01.180
别人的回复消息

57:01.180 --> 57:02.180
然后呢

57:02.180 --> 57:04.180
我再给王夫婚发消息

57:06.180 --> 57:08.180
返回这个send message的结果

57:08.180 --> 57:10.180
这个send message函数返回的是啥

57:10.180 --> 57:12.180
返回的是不是Promise

57:14.180 --> 57:16.180
他返回的是不是Promise

57:16.180 --> 57:19.190
对不对

57:19.190 --> 57:20.190
所以说这里的返回

57:20.190 --> 57:22.190
这里的返回是不是Promise

57:23.190 --> 57:24.190
那么也就是说

57:24.190 --> 57:25.190
这个Promise

57:25.190 --> 57:26.190
他的状态

57:26.190 --> 57:28.190
跟这个返回的Promise一致

57:28.190 --> 57:29.190
也就是说后续的处理

57:29.190 --> 57:30.190
就是这个Promise

57:30.190 --> 57:32.190
就是这个返回的Promise

57:32.190 --> 57:35.570
读的话就这样读

57:35.570 --> 57:36.570
给李建国发消息

57:36.570 --> 57:38.570
失败了

57:38.570 --> 57:40.570
打印出他的回复

57:40.570 --> 57:42.570
然后再给王夫婚发

57:44.570 --> 57:47.570
那么这个的任务的状态

57:47.570 --> 57:48.570
就说说

57:48.570 --> 57:50.570
我鼠标框住这个任务的状态

57:50.570 --> 57:53.570
跟这个函数的返回结果是一致的

57:53.570 --> 57:56.570
如果说给王夫婚发

57:56.570 --> 57:58.570
也失败了

57:58.570 --> 58:00.570
接着处理

58:00.570 --> 58:02.570
然后给周俊才发

58:02.570 --> 58:03.570
如果说这个任务

58:03.570 --> 58:05.570
也失败了

58:05.570 --> 58:06.570
接着处理

58:06.570 --> 58:07.570
给刘仁勇发

58:07.570 --> 58:08.570
好

58:08.570 --> 58:09.570
如果说这个任务

58:09.570 --> 58:11.570
整个最后一个环节

58:11.570 --> 58:12.570
我们统一处理的

58:12.570 --> 58:15.570
前边有任何一个环节是成功的

58:15.570 --> 58:16.570
你看

58:16.570 --> 58:17.570
如果说给李建国就成功了

58:17.570 --> 58:19.570
他这个开启不运行吗

58:19.570 --> 58:20.570
这个开启不运行吗

58:20.570 --> 58:21.570
自己去分析

58:21.570 --> 58:22.570
这个开启不运行吗

58:22.570 --> 58:23.570
他就会运行到这

58:23.570 --> 58:25.570
就前边有任何一个

58:25.570 --> 58:27.570
前面我们都没有处理过成功

58:27.570 --> 58:28.570
所以在后边统一处理

58:28.570 --> 58:30.570
统一处理成功

58:30.570 --> 58:32.570
上边前面的步骤

58:32.570 --> 58:34.570
有任何一个成功了

58:34.570 --> 58:36.570
就表示别人同意了

58:36.570 --> 58:38.570
我们输出

58:38.570 --> 58:40.570
如果说前边

58:40.570 --> 58:41.570
第一个失败了

58:41.570 --> 58:42.570
我们处理的

58:42.570 --> 58:43.570
第二个失败了

58:43.570 --> 58:44.570
我们处理的

58:44.570 --> 58:45.570
第三个失败也

58:45.570 --> 58:46.570
最后一个也失败了

58:46.570 --> 58:47.570
刘仁勇也失败了

58:47.570 --> 58:48.570
我们还要针对他

58:48.570 --> 58:49.570
最后一个最近处理

58:49.570 --> 58:50.570
他也失败了

58:50.570 --> 58:51.570
说明说

58:51.570 --> 58:54.570
就没有任何人统一了

58:55.570 --> 58:57.570
就失败了

58:57.570 --> 58:59.570
就写成了这么一种模式

58:59.570 --> 59:00.570
你看这种模式里面

59:00.570 --> 59:01.570
有回调地域吗

59:01.570 --> 59:03.570
有没有回调套回调

59:03.570 --> 59:05.570
没有吧

59:05.570 --> 59:07.570
虽然说代码看上去

59:07.570 --> 59:08.570
还是很多

59:08.570 --> 59:09.570
后边的代码

59:09.570 --> 59:11.570
我们会把它变得很简洁

59:11.570 --> 59:12.570
现在有这结果

59:12.570 --> 59:14.570
看上去代码还是比较多

59:14.570 --> 59:16.570
其实已经比之前要少很多了

59:16.570 --> 59:17.570
你可以对比一下

59:17.570 --> 59:19.570
之前回调地域的这种写法

59:19.570 --> 59:20.570
再对比一下这个

59:20.570 --> 59:22.570
就要清爽舒服很多

59:22.570 --> 59:23.570
对吧

59:23.570 --> 59:25.570
而且比较好阅读

59:25.570 --> 59:26.570
给李军罗发

59:26.570 --> 59:27.570
失败了

59:27.570 --> 59:28.570
给王富贵发

59:28.570 --> 59:29.570
再失败了

59:29.570 --> 59:30.570
给周去财发

59:30.570 --> 59:31.570
再失败了

59:31.570 --> 59:32.570
给刘仲勇发

59:32.570 --> 59:33.570
全部都失败了

59:33.570 --> 59:34.570
那就全部都失败了

59:34.570 --> 59:36.570
前面有任何一个成功了

59:36.570 --> 59:38.570
运行这个

59:38.570 --> 59:39.570
然后

59:39.570 --> 59:41.570
其实我们平时写代码的时候

59:41.570 --> 59:43.570
还真不会去一步一步分析

59:43.570 --> 59:44.570
这个返回Promise的

59:44.570 --> 59:45.570
查状态

59:45.570 --> 59:46.570
跟这个函数的返回

59:46.570 --> 59:48.570
结果是一致的

59:48.570 --> 59:50.570
还真不会去这样去分析

59:51.570 --> 59:53.570
运行看一下

59:58.290 --> 59:59.290
好像全失败了

59:59.290 --> 01:00:00.290
对吧

01:00:00.290 --> 01:00:01.290
再来运行

01:00:01.290 --> 01:00:07.160
最后一个成功了

01:00:07.160 --> 01:00:09.160
最后一个成功了

01:00:09.160 --> 01:00:11.160
我们再把这个机对调高一点

01:00:11.160 --> 01:00:13.160
调到明点3

01:00:13.160 --> 01:00:16.240
看一下

01:00:16.240 --> 01:00:18.240
你看这一步就结束了

01:00:18.240 --> 01:00:19.240
为什么能结束

01:00:19.240 --> 01:00:21.240
因为给李军罗发

01:00:21.240 --> 01:00:22.240
这一步就成功了

01:00:22.240 --> 01:00:24.240
这个返回的Promise就成功了

01:00:24.240 --> 01:00:25.240
开启运步运行

01:00:25.240 --> 01:00:26.240
不运行

01:00:26.240 --> 01:00:27.240
开启运步运行

01:00:27.240 --> 01:00:28.240
不运行

01:00:29.240 --> 01:00:31.240
那么是不是就直接运行到这了

01:00:31.240 --> 01:00:32.240
对吧

01:00:32.240 --> 01:00:34.810
好

01:00:34.810 --> 01:00:35.810
那么这是这一块内容

01:00:35.810 --> 01:00:36.810
这一块内容

01:00:36.810 --> 01:00:38.810
肯定是有点复杂

01:00:38.810 --> 01:00:39.810
这也是Promise

01:00:39.810 --> 01:00:40.810
电视编程里面

01:00:40.810 --> 01:00:42.810
Promise是

01:00:42.810 --> 01:00:43.810
Promise最复杂的这一块

01:00:43.810 --> 01:00:45.810
就是电视编程这一块

01:00:45.810 --> 01:00:47.810
我的要求

01:00:47.810 --> 01:00:49.810
就是你要能看懂这个代码

01:00:50.810 --> 01:00:51.810
然后把电池做完

01:00:51.810 --> 01:00:52.810
对

01:00:52.810 --> 01:00:53.810
还有最后的电池

01:00:53.810 --> 01:00:54.810
看一下

01:00:55.810 --> 01:01:04.430
看一下吧

01:01:04.430 --> 01:01:06.430
那么还是一样的分析方法

01:01:07.430 --> 01:01:09.430
第一个Promise 1

01:01:10.430 --> 01:01:11.430
状态是啥

01:01:11.430 --> 01:01:12.430
Pending

01:01:12.430 --> 01:01:13.430
对吧

01:01:13.430 --> 01:01:15.430
一秒钟之后才拒绝吧

01:01:15.430 --> 01:01:17.430
Promise 2

01:01:17.430 --> 01:01:18.430
来自于哪呢

01:01:18.430 --> 01:01:20.430
来自于调用Promise 1的开启

01:01:22.430 --> 01:01:23.430
那么Promise 1是Pending

01:01:23.430 --> 01:01:25.430
你想都不要想

01:01:25.430 --> 01:01:26.430
Promise 2无论是什么情况

01:01:26.430 --> 01:01:28.430
123哪种情况都是一样

01:01:28.430 --> 01:01:29.430
它一定是Pending

01:01:30.430 --> 01:01:32.430
针对Promise 1的后续处理

01:01:32.430 --> 01:01:33.430
产生一个Promise 2

01:01:33.430 --> 01:01:35.430
那么Promise 1都在挂起

01:01:35.430 --> 01:01:36.430
特地等待

01:01:36.430 --> 01:01:37.430
你不等待你要干嘛

01:01:37.430 --> 01:01:38.430
你想干嘛

01:01:39.430 --> 01:01:41.430
所以说一开始输出这两个Promise

01:01:41.430 --> 01:01:43.430
一定是Pending

01:01:48.130 --> 01:01:49.130
接下来

01:01:49.130 --> 01:01:50.130
一秒钟到了

01:01:50.130 --> 01:01:52.130
Promise 1变成被拒绝了

01:01:53.130 --> 01:01:54.130
数据原因呢

01:01:54.130 --> 01:01:55.130
原因没写

01:01:59.720 --> 01:02:02.720
然后Promise 2

01:02:02.720 --> 01:02:05.720
有没有针对Promise 1的错误进行处理

01:02:05.720 --> 01:02:06.720
有开启

01:02:09.030 --> 01:02:10.030
处进处理

01:02:11.030 --> 01:02:14.030
那么就取决于处理的过程

01:02:14.030 --> 01:02:16.030
处理的过程有问题吗

01:02:16.030 --> 01:02:17.030
没问题

01:02:17.030 --> 01:02:18.030
不抱错

01:02:18.030 --> 01:02:20.030
所以说Promise 2是成功的

01:02:20.030 --> 01:02:22.920
数据是多少呢

01:02:22.920 --> 01:02:23.920
是2

01:02:26.230 --> 01:02:27.230
那么两秒钟之后

01:02:27.230 --> 01:02:29.230
输出Promise 1和Promise 2

01:02:29.230 --> 01:02:30.230
就输出了什么

01:02:41.220 --> 01:02:42.220
两个Pending

01:02:43.220 --> 01:02:45.220
然后Promise 2

01:02:49.260 --> 01:02:51.260
这是咱们这些课的内容

01:02:53.260 --> 01:02:54.260
今天啥都不做

01:02:54.260 --> 01:02:55.260
就把这个东西

01:02:55.260 --> 01:02:57.260
好好去处理清楚就行了

01:02:57.260 --> 01:02:58.260
多留一点时间

01:02:58.260 --> 01:02:59.260
就是你学习的过程中

01:02:59.260 --> 01:03:01.260
如果说遇到了一些瓶颈

01:03:01.260 --> 01:03:03.260
遇到了一些难题难关

01:03:03.260 --> 01:03:05.260
其实很简单

01:03:05.260 --> 01:03:07.260
你不用在那里抱怨来抱怨去

01:03:07.260 --> 01:03:09.260
不要有那么多的情绪

01:03:09.260 --> 01:03:10.260
就是时间嘛

01:03:10.260 --> 01:03:11.260
花时间就完事了嘛

01:03:12.260 --> 01:03:13.260
你不要想着你两分钟就搞定

01:03:13.260 --> 01:03:14.260
那是不可能的

01:03:15.260 --> 01:03:16.260
你就多花点时间

01:03:16.260 --> 01:03:17.260
你理解不清楚呢

01:03:17.260 --> 01:03:18.260
你就花了两天

01:03:18.260 --> 01:03:19.260
再理解不清楚花三天

01:03:19.260 --> 01:03:21.260
总之就把个课过去完事了

01:03:22.260 --> 01:03:23.260
好 这就是这里的内容

