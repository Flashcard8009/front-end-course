WEBVTT

00:00.430 --> 00:04.430
那么还有什么 还有一个修改 一个删除 对吧

00:04.430 --> 00:07.430
那么这一刻呢 把比较麻烦的这个修改做了

00:07.430 --> 00:12.430
这个修改呢 在最终效果里边 其实你看啊 在这里双击两下

00:12.430 --> 00:15.430
也就打开一个闻闷框 然后呢就进行修改

00:15.430 --> 00:19.430
然后呢 一失去焦点就修改完成了

00:19.430 --> 00:22.430
或者是一按回车键 也可以修改完成

00:22.430 --> 00:27.430
如果说你修改的时候呢 你按了ESC ESCAP

00:27.430 --> 00:32.430
那么就是取消修改 大概就这么个功能

00:32.430 --> 00:38.430
然后还有这个地方 就是全部完成和全部未完成

00:38.430 --> 00:40.430
这就是修改的全部功能

00:40.430 --> 00:43.430
那么这里呢 我们首先看样式啊

00:43.430 --> 00:45.430
样式这里其实很简单 你看啊

00:45.430 --> 00:51.430
我只要把某一个Li里边呢 给它加上一个内样式 就是Editing

00:51.430 --> 00:55.430
Editing 再加上 没有的话就是原式的样子

00:55.430 --> 01:00.430
你看 给它加上这个Editing样式呢 就表示修改的样式

01:00.430 --> 01:02.430
其实非常简单啊 它怎么做的呢

01:02.430 --> 01:05.430
就是在样式上啊 它有两个地方 对吧

01:05.430 --> 01:08.430
一个是DIV 一个是一个Input文闷框

01:08.430 --> 01:13.430
那么这个Input文闷框呢 当Li出现这个Editing样式的时候啊

01:13.430 --> 01:15.430
那么它就显示DisplayBlock

01:15.430 --> 01:18.430
如果说没有这个样式的话 它就是隐藏的

01:18.430 --> 01:21.430
你看 下面DisplayNow 非常简单

01:21.430 --> 01:23.430
那么这个DIV呢 刚好相反

01:23.430 --> 01:27.430
这个DIV呢 就是我们之前啊 就是上级课了看到的DIV

01:27.430 --> 01:30.430
这个DIV呢 就是编辑的时候呢 它就隐藏

01:30.430 --> 01:33.430
啊 否则的话就显示啊 非常简单这个样式

01:33.430 --> 01:36.430
样式没有什么好说的 有兴趣的同学呢 可以自己去看一下

01:37.430 --> 01:40.430
好 那么现在呢 要完成修改还是一样啊

01:40.430 --> 01:44.430
我们在这里呢 首先建立一个跟修改相关的

01:44.430 --> 01:46.430
Completion API

01:47.430 --> 01:51.430
Use Edit to do

01:51.430 --> 01:53.430
同样的 导出一个

01:54.430 --> 01:57.430
Export 导出一个方式

01:59.430 --> 02:02.430
Use Edit to do

02:02.430 --> 02:05.430
因为修改的话

02:05.430 --> 02:08.430
我想想啊 修改的话还是要这个列表的

02:08.430 --> 02:09.430
把完整列表拿过来

02:09.430 --> 02:12.430
因为至少的话 你看这里全

02:12.430 --> 02:15.430
我这没做 是吧 全部完成和全部未完成

02:15.430 --> 02:16.430
这个事情得做吧

02:16.430 --> 02:18.430
所以说呢 你得把一个列表给我

02:18.430 --> 02:20.430
啊 到时候全部完成的时候呢

02:20.430 --> 02:22.430
我得循环列表 把每一个Complete

02:22.430 --> 02:23.430
所谓true 对吧

02:23.430 --> 02:26.430
好 那么这里呢 还少给我一个to do is rave

02:27.430 --> 02:28.430
好 我先写出来吧

02:28.430 --> 02:30.430
然后我们在组建里边

02:31.430 --> 02:36.260
导入 啊 直接 先导入啊

02:36.260 --> 02:42.910
导入这个Use Edit to do

02:42.910 --> 02:47.310
我们这里呢 展开

02:48.310 --> 02:50.310
to do is rave 放进去

02:50.310 --> 02:53.310
行了 那么剩下的事情呢 就是在模板里边

02:53.310 --> 02:55.310
和这个函数里边的思想

02:55.310 --> 02:59.310
来吧 那么我们首先考虑的就是这个Li

02:59.310 --> 03:02.310
这个Li里边 上面啊

03:05.310 --> 03:07.310
在上面 啊 上面

03:07.310 --> 03:09.310
我们当时是在循环这个Li 对吧

03:09.310 --> 03:11.310
Li呢 它有个样式啊

03:11.310 --> 03:13.310
一个是否完成的样式 我们上里头说的

03:13.310 --> 03:15.310
还有其实还有一个内样式啊

03:15.310 --> 03:17.310
我们刚才看到的 就是它里边

03:17.310 --> 03:19.310
有没有这个Editing样式

03:20.310 --> 03:24.310
这个Li要不要带这个Editing 这个样式

03:24.310 --> 03:27.310
那么要不要带呢 取决于什么

03:27.310 --> 03:29.310
当前这个to do

03:29.310 --> 03:32.310
当前修改的是哪一个to do 对吧

03:32.310 --> 03:34.310
如果说当前修改的是这个to do的话

03:34.310 --> 03:36.310
那么这个Li呢 它就会带这个样式

03:36.310 --> 03:37.310
明白了意思吧

03:37.310 --> 03:39.310
所以说呢 我们这里呢

03:39.310 --> 03:42.310
需要有一个想用式的数据

03:42.310 --> 03:45.310
就是当前正在修改的是哪一个to do

03:45.310 --> 03:46.310
明白了意思吧

03:46.310 --> 03:48.310
好 比方说啊

03:48.310 --> 03:50.310
这里 我们这呢

03:50.310 --> 03:52.310
就写这么一个想用式数据

03:56.310 --> 04:00.390
好 那么我们这里呢使用一个

04:00.390 --> 04:02.390
就是Editing to do

04:02.390 --> 04:04.390
正在修改的是哪一个to do

04:04.390 --> 04:05.390
Ref

04:05.390 --> 04:06.390
Moderns呢 is now

04:06.390 --> 04:07.390
表示说什么呢

04:07.390 --> 04:09.390
表示说一开始呢

04:09.390 --> 04:11.390
是没有任何to do正在修改的

04:12.390 --> 04:17.390
当前正在修改的是哪一个to do

04:17.390 --> 04:20.390
其实我们做这些效果啊 案例啊

04:20.390 --> 04:23.390
这东西其实是给大家一些启发

04:23.390 --> 04:25.390
类似的情况了 你该怎么去处理啊

04:25.390 --> 04:27.390
不是说你做了这个指挥做这个

04:27.390 --> 04:29.390
那就这个效果就没什么意义

04:30.390 --> 04:32.390
大家在做的过程中慢慢去体会啊

04:32.390 --> 04:34.390
导出啊Editing to do

04:34.390 --> 04:37.390
当然命名上啊 尽量给上这个Ref

04:37.390 --> 04:40.090
好 那么这边

04:40.090 --> 04:42.090
如果说有这个东西的话

04:42.090 --> 04:43.090
这边怎么写呢

04:43.090 --> 04:45.090
就这边写法就非常简单了啊

04:45.090 --> 04:47.090
我们就写上一个Editing的样式

04:48.090 --> 04:50.090
诶 它怎么来

04:50.090 --> 04:52.090
有什么情况下有这个样式呢

04:52.090 --> 04:54.090
就是我们这个土豆啊

04:54.090 --> 04:56.090
当前循环到这一项

04:56.090 --> 04:58.090
跟那个Editing to do

04:58.090 --> 05:00.090
Editing to do

05:00.090 --> 05:01.090
Ref

05:01.090 --> 05:02.090
是相等的

05:02.090 --> 05:04.090
那么如果说相等的话

05:04.090 --> 05:06.090
那么自然它就会带这个样式

05:06.090 --> 05:07.090
原来的意思吧

05:07.090 --> 05:09.090
目前呢我们是

05:09.090 --> 05:10.090
是now的吧

05:10.090 --> 05:11.090
是now的情况下

05:11.090 --> 05:12.090
一开始是没有任何修改

05:12.090 --> 05:14.090
那么比方说我们这里

05:14.090 --> 05:15.090
给它一个默认值不是now

05:15.090 --> 05:17.090
是to do it with the value的

05:17.090 --> 05:19.090
第一项吧

05:19.090 --> 05:20.090
比方说

05:20.090 --> 05:22.090
第一项是不是进入修改状态了

05:22.090 --> 05:24.090
就这么简单啊

05:24.090 --> 05:25.090
那么这个东西呢

05:25.090 --> 05:26.090
肯定是将来会变的啊

05:26.090 --> 05:27.090
会变的

05:27.090 --> 05:29.090
慢慢来啊

05:29.090 --> 05:31.090
好 那么

05:31.090 --> 05:32.090
一步一步来啊

05:32.090 --> 05:34.090
首先我们往下面找

05:35.090 --> 05:37.090
什么情况下

05:37.090 --> 05:40.090
我这一项会进入修改状态

05:41.090 --> 05:42.090
什么情况下呢

05:42.090 --> 05:43.090
是不是那个label啊

05:43.090 --> 05:44.090
被双击过后

05:44.090 --> 05:46.090
会进入修改状态

05:46.090 --> 05:47.090
那么就相当于是个label

05:47.090 --> 05:48.090
有个事件啊

05:48.090 --> 05:50.090
叫double click

05:50.090 --> 05:51.090
doublel click

05:51.090 --> 05:53.090
就是左键双击

05:53.090 --> 05:55.090
左键双击的事件

05:55.090 --> 05:56.090
那么这个事件呢

05:56.090 --> 05:57.090
它会运行一个函数啊

05:57.090 --> 05:59.090
这个函数来处理这件事情

05:59.090 --> 06:00.090
好 那么比方说

06:00.090 --> 06:01.090
我们这里呢

06:01.090 --> 06:02.090
就给它提供一个函数吧

06:02.090 --> 06:03.090
你不是要一个函数吗

06:03.090 --> 06:05.090
ok 我这里是高度聚合的

06:05.090 --> 06:06.090
跟修改相关的所有东西

06:06.090 --> 06:08.090
我这里给你提供

06:08.090 --> 06:09.090
我们这里呢

06:09.090 --> 06:10.090
就写上一个函数

06:10.090 --> 06:13.090
叫做adds to do

06:13.090 --> 06:15.090
修改一个to do

06:15.090 --> 06:16.090
那么这个函数呢

06:16.090 --> 06:17.090
你给我一个什么呢

06:17.090 --> 06:19.090
给我一个to do

06:19.090 --> 06:20.090
给我一个to do对象

06:20.090 --> 06:21.090
我要做的啥事呢

06:21.090 --> 06:22.090
我做的事情贼简单

06:22.090 --> 06:24.090
我就把这个玩意儿

06:24.090 --> 06:25.090
设置到to do里面去

06:25.090 --> 06:27.090
应该是不是贼简单

06:27.090 --> 06:28.090
我这个adds to do

06:28.090 --> 06:29.090
这是个函数

06:29.090 --> 06:30.090
给它返回

06:30.090 --> 06:31.090
之前还没有返回过函数吗

06:31.090 --> 06:33.090
那么这里返回函数

06:33.090 --> 06:34.090
有了这个函数过后

06:34.090 --> 06:35.090
这里是不是可以调这个函数

06:35.090 --> 06:37.090
adds to do

06:37.090 --> 06:38.090
一调的话

06:38.090 --> 06:39.090
我们把这个to do传进去了

06:39.090 --> 06:41.090
就当前这一项to do

06:41.090 --> 06:42.090
给它传进去

06:42.090 --> 06:43.090
传进去过后

06:43.090 --> 06:44.090
我们看一下

06:44.090 --> 06:45.090
双击

06:48.090 --> 06:49.090
双击

06:49.090 --> 06:50.090
这里抱错了

06:50.090 --> 06:51.090
它说

06:51.090 --> 06:53.090
尝试给一个场量复职

06:53.090 --> 06:54.090
我这里写错了

06:54.090 --> 06:55.090
对

06:55.090 --> 06:56.090
点白留一看

06:56.090 --> 06:57.090
这个地方很容易出错了

06:57.090 --> 06:59.090
它要慢慢习惯

07:00.090 --> 07:01.090
双击

07:01.090 --> 07:02.090
双击

07:02.090 --> 07:03.090
双击

07:03.090 --> 07:04.090
对吧

07:04.090 --> 07:05.090
看没

07:05.090 --> 07:07.090
是不是不断的在修改

07:07.090 --> 07:10.090
目前正在修改的那个to do

07:10.090 --> 07:11.090
那个数据一遍

07:11.090 --> 07:12.090
见面就跟这边了

07:12.090 --> 07:13.090
这就是这个

07:14.090 --> 07:15.090
没问题吧

07:15.090 --> 07:16.090
好

07:16.090 --> 07:17.090
那么现在还有一些问题

07:17.090 --> 07:18.090
需要解决

07:18.090 --> 07:19.090
比方这个input

07:19.090 --> 07:20.090
input文本框

07:20.090 --> 07:21.090
那么这个文本框

07:21.090 --> 07:22.090
它不能是空的

07:22.090 --> 07:24.090
它应该绑定什么的

07:24.090 --> 07:25.090
应该去双向绑定

07:25.090 --> 07:26.090
我们当前to do的

07:26.090 --> 07:27.090
台头

07:27.090 --> 07:28.090
对吧

07:28.090 --> 07:29.090
它修改的是台头

07:29.090 --> 07:30.090
保存

07:30.090 --> 07:31.090
看一下

07:32.090 --> 07:33.090
是不是可以了

07:33.090 --> 07:35.090
是不是可以了

07:35.090 --> 07:36.090
对不对

07:36.090 --> 07:37.090
就这么一个意思

07:38.090 --> 07:39.090
那么于是呢

07:39.090 --> 07:40.090
我在这里修改的时候

07:40.090 --> 07:41.090
是不是

07:41.090 --> 07:43.090
其实就会改变这个to do的台头

07:43.090 --> 07:44.090
你看我这里在修改的时候

07:44.090 --> 07:46.090
其实这个app里面已经变了

07:46.090 --> 07:47.090
看没

07:47.090 --> 07:48.090
是不是已经变了

07:48.090 --> 07:49.090
它在修改这个台头

07:49.090 --> 07:50.090
那么台头修改

07:50.090 --> 07:52.090
我们以前监控过的对吧

07:52.090 --> 07:54.090
监控过那个to do list

07:54.090 --> 07:55.090
监控过这里

07:55.090 --> 07:56.090
只要它一变

07:56.090 --> 07:58.090
那么它我就会重新保存

07:58.090 --> 07:59.090
所以说它会跟这边

07:59.090 --> 08:01.090
自然而然就持就化了

08:02.090 --> 08:03.090
这是这一块

08:04.090 --> 08:06.090
那么接下来我们要做的事情就是

08:06.090 --> 08:07.090
完成修改

08:07.090 --> 08:09.090
像这个文本框

08:09.090 --> 08:10.090
失去焦点

08:10.090 --> 08:12.090
或者是我们按下回车之后

08:12.090 --> 08:13.090
它都会完成修改

08:13.090 --> 08:15.090
完成修改也是一个函数

08:15.090 --> 08:17.090
我们这里就给它提供这么一个函数

08:17.090 --> 08:18.090
叫做

08:21.090 --> 08:23.660
哪一个

08:23.660 --> 08:25.660
就是哪一个to do完成修改

08:25.660 --> 08:26.660
其实也不需要参数

08:27.660 --> 08:28.660
什么叫完成修改

08:28.660 --> 08:30.660
完成修改就是把它设为lau

08:30.660 --> 08:32.660
把这个玩意的value

08:32.660 --> 08:33.660
设为什么lau

08:33.660 --> 08:35.660
目前没有被修改的东西了

08:35.660 --> 08:37.660
所以说我们把这个函数搞出

08:37.660 --> 08:39.660
有了这么一个函数过后了

08:39.660 --> 08:40.660
我们在这边

08:40.660 --> 08:41.660
什么情况下完成修改

08:41.660 --> 08:43.660
首先不得不得之间

08:43.660 --> 08:45.660
就是down

08:45.660 --> 08:46.660
adds

08:46.660 --> 08:47.660
对不对

08:47.660 --> 08:49.660
失去焦点的时候就完成修改

08:49.660 --> 08:50.660
其实就是不表

08:50.660 --> 08:52.660
给它设置一个响应的数据

08:52.660 --> 08:54.660
表示目前没有东西被修改

08:55.660 --> 08:56.660
你看

08:56.660 --> 08:57.660
一学校

08:57.660 --> 08:58.660
失去焦点

08:59.660 --> 09:01.660
失去焦点出了问题

09:01.660 --> 09:03.660
刷新试试一下

09:04.660 --> 09:05.660
失去焦点

09:06.660 --> 09:07.660
这里出了问题了

09:08.660 --> 09:09.660
什么

09:09.660 --> 09:11.660
downadds is not a function

09:12.660 --> 09:13.660
往哪一样

09:14.660 --> 09:15.660
down to do

09:18.610 --> 09:19.610
downadds吧

09:19.610 --> 09:20.610
这个名字好一点

09:21.610 --> 09:22.610
就是完成修改

09:22.610 --> 09:23.610
不是完成to do

09:27.260 --> 09:28.260
这边

09:29.260 --> 09:30.260
改一下

09:30.260 --> 09:31.260
好 再来

09:31.260 --> 09:32.260
失去焦点

09:32.260 --> 09:34.260
你看是不是完成修改了

09:35.260 --> 09:37.260
对吧 说完成修改了

09:37.260 --> 09:38.260
就这么一个意思

09:38.260 --> 09:39.260
还有呢

09:39.260 --> 09:40.260
就是说

09:40.260 --> 09:41.260
这边呢

09:42.260 --> 09:44.260
还有就是按下回车键

09:44.260 --> 09:46.260
key up

09:46.260 --> 09:47.260
end

09:47.260 --> 09:48.260
求是符 enter

09:49.260 --> 09:51.260
也是一个同样的函数

09:51.260 --> 09:52.260
downadds

09:53.260 --> 09:54.260
保存

09:55.260 --> 09:56.260
回车

09:56.260 --> 09:57.260
对吧 也可以

09:58.260 --> 10:00.260
好 这个完成了对吧

10:00.260 --> 10:03.260
然后还有一个功能就是取消修改

10:03.260 --> 10:05.260
你看我们之前不是有个取消修改吗

10:05.260 --> 10:07.260
这里按一下esc

10:07.260 --> 10:08.260
取消修改了

10:08.260 --> 10:09.260
escape

10:09.260 --> 10:11.260
那么这里取消修改了

10:11.260 --> 10:12.260
怎么来做呢

10:12.260 --> 10:14.260
我们首先要提供一个函数

10:14.260 --> 10:15.260
如何来取消修改

10:15.260 --> 10:17.260
cancel edit

10:19.900 --> 10:20.900
取消修改

10:20.900 --> 10:21.900
取消修改的时候

10:21.900 --> 10:23.900
实际上要做什么事情呢

10:24.900 --> 10:25.900
要做啥算了

10:25.900 --> 10:27.900
我们要做的事情是

10:28.900 --> 10:29.900
把这个玩意儿

10:29.900 --> 10:30.900
首先把这个玩意儿

10:30.900 --> 10:31.900
肯定要设为大

10:32.900 --> 10:33.900
对吧

10:33.900 --> 10:34.900
同时不要忘记了

10:34.900 --> 10:36.900
你要给我传个图图进来

10:36.900 --> 10:37.900
就是你要把哪一个图图

10:37.900 --> 10:39.900
恢复到之前的样子

10:40.900 --> 10:41.900
那么现在的问题

10:41.900 --> 10:44.900
就是如何恢复到之前的样子呢

10:46.900 --> 10:47.900
怎么恢复呢

10:47.900 --> 10:48.900
其实恢复到之前的样子

10:48.900 --> 10:49.900
就是把那个

10:49.900 --> 10:50.900
图图点什么

10:50.900 --> 10:51.900
title

10:51.900 --> 10:53.900
等于之前的字

10:53.900 --> 10:54.900
对吧

10:54.900 --> 10:56.900
那之前的字怎么来了

10:57.900 --> 10:58.900
其实不要把想复杂吧

10:58.900 --> 10:59.900
特别简单

11:00.900 --> 11:01.900
你在编辑的时候

11:01.900 --> 11:02.900
是不是可以保存

11:02.900 --> 11:03.900
因为变量啊

11:03.900 --> 11:04.900
随便用给他们变量

11:04.900 --> 11:05.900
比方说

11:07.900 --> 11:08.900
arrange

11:08.900 --> 11:09.900
原来的

11:09.900 --> 11:10.900
title

11:10.900 --> 11:11.900
给它保存一下

11:11.900 --> 11:12.900
对吧

11:12.900 --> 11:13.900
一开始等于大了

11:13.900 --> 11:14.900
对吧

11:14.900 --> 11:16.900
缓存之前的title

11:16.900 --> 11:17.900
字

11:17.900 --> 11:19.900
当我们在编辑的时候

11:19.900 --> 11:20.900
就把这个字

11:20.900 --> 11:21.900
复辞为to do

11:21.900 --> 11:22.900
title

11:22.900 --> 11:23.900
对吧

11:23.900 --> 11:24.900
复辞

11:24.900 --> 11:25.900
然后呢

11:25.900 --> 11:26.900
在取消的时候

11:26.900 --> 11:27.900
是不是给它复辞回来

11:27.900 --> 11:28.900
就玩意儿了

11:28.900 --> 11:29.900
就这么简单

11:29.900 --> 11:31.900
等于arrange

11:31.900 --> 11:32.900
title

11:32.900 --> 11:33.900
cancel

11:33.900 --> 11:34.900
咱们来试一下

11:35.900 --> 11:36.900
到这边来

11:36.900 --> 11:37.900
注册事件

11:37.900 --> 11:38.900
什么事件呢

11:38.900 --> 11:39.900
当键盘事件

11:39.900 --> 11:40.900
keyup事件

11:41.900 --> 11:42.900
escape

11:46.300 --> 11:47.300
cancel

11:48.300 --> 11:49.300
edit

11:50.300 --> 11:51.300
保存

11:51.300 --> 11:52.300
看一下

11:52.300 --> 11:53.300
这边

11:55.300 --> 11:56.300
删除

11:56.300 --> 11:57.300
esc

11:58.300 --> 11:59.300
好像有问题

12:00.300 --> 12:01.300
好像有问题

12:01.300 --> 12:02.300
看一下

12:04.300 --> 12:05.300
cancel

12:06.300 --> 12:08.300
把这个设置为now

12:09.300 --> 12:10.300
然后把to do

12:10.300 --> 12:11.300
title

12:13.300 --> 12:14.300
设置为arrange

12:14.300 --> 12:15.300
title

12:16.300 --> 12:17.300
看一下哪里出了问题

12:18.300 --> 12:19.300
我这里输出一下

12:19.300 --> 12:20.300
arrange

12:20.300 --> 12:21.300
title

12:21.300 --> 12:25.400
双击

12:25.400 --> 12:26.400
得到这个字了

12:26.400 --> 12:27.400
对吧

12:27.400 --> 12:29.400
然后输入esc

12:30.400 --> 12:31.400
esc的时候出了问题

12:31.400 --> 12:32.400
esc的时候呢

12:32.400 --> 12:33.400
我再把它输出一下

12:34.400 --> 12:35.400
我要直接输出一下

12:35.400 --> 12:36.400
arrange

12:36.400 --> 12:37.400
title

12:37.400 --> 12:38.400
把这个地方取消掉

12:40.400 --> 12:41.400
慢慢调是吧

12:43.400 --> 12:44.400
esc

12:45.400 --> 12:46.400
这个只是正确的

12:47.400 --> 12:48.400
只是正确的

12:48.400 --> 12:50.400
然后我现在要把这个to do点

12:50.400 --> 12:52.400
明白了

12:53.400 --> 12:56.160
哪里的问题呢

12:56.160 --> 12:58.160
是在这里的问题

12:58.160 --> 13:00.160
我这里要调用它对吧

13:00.160 --> 13:01.160
要调用它

13:01.160 --> 13:02.160
调用它

13:02.160 --> 13:03.160
调用它呢

13:03.160 --> 13:04.160
把那个什么团进去了

13:04.160 --> 13:05.160
把这个to do团进去了

13:06.160 --> 13:07.160
它有一个参数

13:08.160 --> 13:09.160
然后呢

13:09.160 --> 13:10.160
删除掉

13:10.160 --> 13:12.160
删除掉esc

13:12.160 --> 13:13.160
esc

13:13.160 --> 13:14.160
就回到之前了

13:14.160 --> 13:15.160
对吧

13:15.160 --> 13:17.160
删除掉esc

13:17.160 --> 13:19.160
其实我们看这个IPK

13:19.160 --> 13:20.160
已经看得非常清楚

13:20.160 --> 13:21.160
这里

13:22.160 --> 13:23.160
改动它

13:23.160 --> 13:24.160
改动它

13:24.160 --> 13:25.160
你看下面是不是一遍了

13:25.160 --> 13:26.160
然后按esc

13:26.160 --> 13:27.160
又回到之前了

13:27.160 --> 13:28.160
就这么个意思

13:29.160 --> 13:31.160
那么这是cancel

13:32.160 --> 13:33.160
还有啥呢

13:34.160 --> 13:35.160
还有啥呢

13:35.160 --> 13:36.160
还有就这玩意

13:37.160 --> 13:38.160
全部完成

13:38.160 --> 13:39.160
和全部不完成

13:40.160 --> 13:41.160
对吧

13:41.160 --> 13:42.160
好那么这里呢

13:42.160 --> 13:43.160
我们需要提供一个函数

13:43.160 --> 13:44.160
就这个函数呢

13:44.160 --> 13:45.160
就是

13:45.160 --> 13:47.160
把全部的任务

13:47.160 --> 13:48.160
设置为

13:48.160 --> 13:49.160
某一个状态值

13:49.160 --> 13:50.160
它的完成状态

13:51.160 --> 13:54.160
表示set all

13:55.160 --> 13:59.160
set all complete

14:00.160 --> 14:01.160
completed

14:02.160 --> 14:03.160
那么你给我一个

14:04.160 --> 14:05.160
是否完成的状态

14:05.160 --> 14:06.160
completed

14:08.790 --> 14:09.790
你给我这么一个值

14:09.790 --> 14:11.790
那么我要做的事情就是

14:12.790 --> 14:13.790
把全部的状态呢

14:14.790 --> 14:15.790
设置为

14:15.790 --> 14:16.790
它传递的状态

14:16.790 --> 14:17.790
比较要传递一个true

14:17.790 --> 14:18.790
那么

14:18.790 --> 14:19.790
所有的任务呢

14:19.790 --> 14:20.790
要全部设为true

14:20.790 --> 14:21.790
那么这个时候

14:21.790 --> 14:22.790
就要用到这个东西了

14:22.790 --> 14:23.790
to do is live

14:23.790 --> 14:24.790
value是不是用for each

14:25.790 --> 14:26.790
对吧

14:26.790 --> 14:27.790
一个个循环呢

14:27.790 --> 14:28.790
所有的任务拿出来

14:28.790 --> 14:29.790
然后呢

14:29.790 --> 14:30.790
每一个任务的to do的值呢

14:30.790 --> 14:31.790
设置为completed

14:31.790 --> 14:32.790
设置为completed

14:32.790 --> 14:33.790
就这么简单

14:34.790 --> 14:35.790
好

14:35.790 --> 14:36.790
set all completed

14:37.790 --> 14:38.790
这样子写

14:39.790 --> 14:40.790
那么这个玩意

14:40.790 --> 14:41.790
写了之后呢

14:41.790 --> 14:42.790
我们怎么来用呢

14:42.790 --> 14:43.790
好在这边来

14:43.790 --> 14:44.790
其实就是一个

14:44.790 --> 14:45.790
这个地方

14:45.790 --> 14:47.790
其实也是个复选框

14:47.790 --> 14:48.790
我们找一找在

14:48.790 --> 14:49.790
印面上在这个位置

14:50.790 --> 14:51.790
这个位置

14:51.790 --> 14:52.790
这么一个input

14:52.790 --> 14:54.790
这个input呢

14:55.790 --> 14:56.790
我们给它设置什么

14:56.790 --> 14:57.790
change

14:58.790 --> 15:00.790
当改变的时候

15:00.790 --> 15:01.790
改变的时候

15:01.790 --> 15:02.790
我们去调用什么函数

15:02.790 --> 15:03.790
调用这个

15:04.790 --> 15:05.790
set all completed

15:08.680 --> 15:09.680
值是什么呢

15:09.680 --> 15:10.680
值就是event

15:10.680 --> 15:11.680
当前的事件

15:11.680 --> 15:12.680
事件参数

15:12.680 --> 15:13.680
然后点target

15:13.680 --> 15:14.680
就是找到

15:14.680 --> 15:15.680
找到一个input

15:15.680 --> 15:16.680
门框

15:16.680 --> 15:17.680
门框里边的什么text

15:18.680 --> 15:19.680
对吧

15:19.680 --> 15:20.680
那么他选中了

15:20.680 --> 15:21.680
所有的任务都要完成

15:21.680 --> 15:22.680
他没有选中

15:22.680 --> 15:23.680
所有的任务都不完成

15:23.680 --> 15:24.680
就这么个意思

15:24.680 --> 15:25.680
好 小心

15:25.680 --> 15:26.680
你看一下

15:27.680 --> 15:29.680
这个地方就完成了

15:29.680 --> 15:30.680
对吧

15:31.680 --> 15:33.680
好 那么现在还有一个

15:33.680 --> 15:34.680
还有一个小的问题

15:34.680 --> 15:35.680
就是我们刷新

15:35.680 --> 15:36.680
刷新过后

15:36.680 --> 15:37.680
你看这个地方没有

15:37.680 --> 15:39.680
它不是一个完成状态

15:39.680 --> 15:40.680
对吧

15:40.680 --> 15:41.680
是不是不是一个完成状态

15:41.680 --> 15:42.680
如果说是完成状态的话

15:42.680 --> 15:43.680
应该是一个

15:43.680 --> 15:44.680
深色的

15:44.680 --> 15:45.680
他一开始不是个完成状态

15:45.680 --> 15:46.680
为什么呢

15:46.680 --> 15:48.680
因为他当前的选中值

15:48.680 --> 15:50.680
他的当前的选中值

15:50.680 --> 15:51.680
当前这个属相

15:51.680 --> 15:52.680
切个这个属相

15:53.680 --> 15:55.680
他跟这个不一样

15:55.680 --> 15:56.680
他跟这个玩意

15:56.680 --> 15:57.680
跟这个玩意

15:57.680 --> 15:58.680
是不是

15:58.680 --> 15:59.680
是

15:59.680 --> 16:00.680
不一样的

16:00.680 --> 16:01.680
就是说如果说

16:01.680 --> 16:02.680
全部选中的话

16:02.680 --> 16:04.680
他也应该是选中状态

16:04.680 --> 16:06.680
明儿意思吧

16:06.680 --> 16:07.680
好 那么这个东西

16:07.680 --> 16:08.680
又在怎么做呢

16:08.680 --> 16:09.680
我们这里呢

16:09.680 --> 16:10.680
其实可以把改造一下

16:10.680 --> 16:11.680
怎么改造呢

16:11.680 --> 16:13.680
我们用一个vmode

16:13.680 --> 16:14.680
当然

16:14.680 --> 16:15.680
你用这个自己

16:15.680 --> 16:16.680
在写个函数学判断

16:16.680 --> 16:17.680
也行不行

16:17.680 --> 16:18.680
也可以

16:18.680 --> 16:19.680
几个计算属性判断

16:19.680 --> 16:20.680
也可以

16:20.680 --> 16:21.680
那么我们这里干脆用个vmode

16:21.680 --> 16:23.680
vmode能连接到一个值

16:23.680 --> 16:24.680
连接到什么值呢

16:24.680 --> 16:26.680
就是order

16:26.680 --> 16:28.680
是否全部完成

16:28.680 --> 16:29.680
就有一个这个值

16:29.680 --> 16:30.680
这个值为true

16:30.680 --> 16:31.680
那么这个文明关税选中的

16:31.680 --> 16:33.680
切个boss去选中的

16:33.680 --> 16:34.680
同样的

16:34.680 --> 16:36.680
切个boss改变的时候

16:36.680 --> 16:38.680
也会改变这个值

16:38.680 --> 16:39.680
好 我们看一下

16:39.680 --> 16:40.680
这个东西怎么做

16:40.680 --> 16:43.120
那么这个时候

16:43.120 --> 16:44.120
我们的代码

16:44.120 --> 16:45.120
需要稍微的改造一下

16:45.120 --> 16:46.120
我们把这个东西

16:46.120 --> 16:48.120
改造成一个order

16:48.120 --> 16:50.120
Ref

16:50.120 --> 16:52.120
因为他其实是一个

16:52.120 --> 16:53.120
计算属性

16:54.120 --> 16:56.120
改造成orderRef

16:56.120 --> 16:57.120
那么这是一个

16:57.120 --> 16:58.120
计算属性

16:58.120 --> 16:59.120
所以说

17:00.120 --> 17:02.120
它根据什么来算呢

17:02.120 --> 17:03.120
慢慢来

17:03.120 --> 17:04.120
computed

17:04.120 --> 17:05.120
一个是get

17:07.120 --> 17:08.120
它的get值

17:08.120 --> 17:09.120
等于什么呢

17:09.120 --> 17:11.120
只要全部的任务完成

17:11.120 --> 17:12.120
它就是true

17:13.120 --> 17:14.120
否则它就是force

17:15.120 --> 17:16.120
对不对

17:17.120 --> 17:18.120
好 所以说

17:18.120 --> 17:19.120
我们这里的怎么来写呢

17:19.120 --> 17:20.120
全部

17:20.120 --> 17:21.120
我们这里写法

17:21.120 --> 17:22.120
其实很简单

17:22.120 --> 17:23.120
就是toduceRef

17:24.120 --> 17:25.120
这个数组

17:26.120 --> 17:28.120
我们找一找fielders

17:29.120 --> 17:30.120
fielders

17:30.120 --> 17:31.120
用fielders去找

17:32.120 --> 17:33.120
找什么呢

17:33.120 --> 17:35.120
找它的completed

17:41.690 --> 17:43.690
找它所有完成的任务

17:44.690 --> 17:46.690
所有未完成的任务

17:46.690 --> 17:48.690
数量是不是等于0

17:50.690 --> 17:51.690
原来的意思吧

17:51.690 --> 17:53.690
如果说数量等于0

17:53.690 --> 17:55.690
就是没有未完成的任务

17:55.690 --> 17:56.690
没有未完成的任务

17:56.690 --> 17:57.690
是不是全部完成了

17:57.690 --> 17:58.690
那么这种情况下

17:58.690 --> 18:00.690
就是应该被选中的状态

18:01.690 --> 18:02.690
所有的都完成了

18:02.690 --> 18:04.690
那它就是true

18:04.690 --> 18:06.690
只要有一个任务没有完成

18:06.690 --> 18:07.690
那么它就是force

18:07.690 --> 18:08.690
对吧

18:08.690 --> 18:09.690
那么注意

18:09.690 --> 18:10.690
这里面是用的是vmode

18:10.690 --> 18:11.690
那么vmode

18:11.690 --> 18:12.690
是不是还有可能会给它复制

18:12.690 --> 18:13.690
双向绑定

18:13.690 --> 18:15.690
既要读取它的值

18:15.690 --> 18:16.690
我们这里改变选中状态

18:16.690 --> 18:17.690
也会给它重新复制

18:17.690 --> 18:18.690
重新复制的时候

18:18.690 --> 18:20.690
是不是复制为true和force

18:20.690 --> 18:21.690
对不对

18:21.690 --> 18:22.690
那么也就是说

18:22.690 --> 18:23.690
我们这里还要写个set

18:23.690 --> 18:24.690
setter

18:25.690 --> 18:26.690
切个字

18:27.690 --> 18:28.690
如果说它够传递到true的话

18:28.690 --> 18:29.690
我怎么样

18:29.690 --> 18:30.690
它够传递到force的话

18:30.690 --> 18:31.690
又怎么样

18:31.690 --> 18:32.690
其实我们就是

18:32.690 --> 18:33.690
把刚才那个函数

18:33.690 --> 18:34.690
在这里重新写一遍

18:34.690 --> 18:35.690
你看

18:35.690 --> 18:36.690
就是to do strip

18:37.690 --> 18:38.690
the value for each

18:41.260 --> 18:42.260
to do

18:42.260 --> 18:43.260
把每一个

18:43.260 --> 18:44.260
把每一个to do

18:44.260 --> 18:46.260
它的completed状态

18:46.260 --> 18:47.260
改为什么set

18:48.260 --> 18:49.260
对不对

18:49.260 --> 18:50.260
其实就是把刚才的函数写一下

18:50.260 --> 18:51.260
那么这样子

18:51.260 --> 18:52.260
你看

18:52.260 --> 18:53.260
这个文明方式

18:53.260 --> 18:54.260
都进行双向绑定了

18:54.260 --> 18:55.260
它目前的选中状态

18:55.260 --> 18:56.260
取决于它

18:56.260 --> 18:57.260
同时呢

18:57.260 --> 18:58.260
它改变选中状态的时候

18:58.260 --> 18:59.260
又会运行这个set

19:00.260 --> 19:01.260
对不对

19:01.260 --> 19:02.260
我们就使用这种模式

19:02.260 --> 19:03.260
来去完成

19:04.260 --> 19:05.260
我们来看一下

19:06.260 --> 19:07.260
这里还有问题

19:07.260 --> 19:09.260
这里还有问题

19:09.260 --> 19:12.020
这里写错了

19:15.020 --> 19:16.020
你看

19:16.020 --> 19:17.020
还是有问题

19:17.020 --> 19:18.020
它目前没有

19:18.020 --> 19:19.020
不是选中的状态

19:19.020 --> 19:20.020
还是有问题

19:20.020 --> 19:22.020
咱们在这边看一下吧

19:22.020 --> 19:24.580
输出一下

19:25.580 --> 19:29.940
是force

19:29.940 --> 19:30.940
不退

19:30.940 --> 19:31.940
不对

19:31.940 --> 19:32.940
因为目前呢

19:33.940 --> 19:34.940
没有任何东西完成了

19:34.940 --> 19:35.940
对吧

19:35.940 --> 19:36.940
没有任何东西

19:36.940 --> 19:37.940
没有完成

19:37.940 --> 19:38.940
看一下

19:38.940 --> 19:39.940
Value Filter

19:40.940 --> 19:43.940
它没有完成

19:43.940 --> 19:44.940
我这写错了

19:45.940 --> 19:46.940
没有完成

19:46.940 --> 19:47.940
Dialins

19:47.940 --> 19:48.940
对吧

19:48.940 --> 19:49.940
Dialins的命令

19:49.940 --> 19:50.940
长度的命令

19:50.940 --> 19:51.940
对吧

19:51.940 --> 19:52.940
你看

19:52.940 --> 19:53.940
目前是不是选中状态了

19:53.940 --> 19:54.940
对吧

19:54.940 --> 19:55.940
如果说有一个没完成

19:55.940 --> 19:56.940
现在我们再刷新

19:56.940 --> 19:57.940
就是目前的状态

19:57.940 --> 19:58.940
对吧

19:58.940 --> 20:00.940
这个功能也是OK的

20:00.940 --> 20:01.940
好的

20:01.940 --> 20:02.940
这就是

20:03.940 --> 20:06.940
全选完成和不完成

20:07.940 --> 20:08.940
哎呀

20:08.940 --> 20:09.940
想一想还有啥呢

20:09.940 --> 20:10.940
没啥了

20:10.940 --> 20:12.940
这一块是不是就搞定了

20:12.940 --> 20:13.940
各位同学

20:13.940 --> 20:14.940
我对本节课里面

20:14.940 --> 20:15.940
其中一个点的

20:15.940 --> 20:16.940
做一个说明

20:16.940 --> 20:17.940
就是在这一块

20:17.940 --> 20:19.940
我们使用了一个计算属性

20:19.940 --> 20:22.940
来得到它的全局的选中状态

20:22.940 --> 20:24.940
以及同时可以

20:24.940 --> 20:26.940
设置全局的全中状态

20:26.940 --> 20:28.940
那么在维尤3的官方文档里面

20:28.940 --> 20:30.940
在计算属性里面

20:30.940 --> 20:31.940
有一个最佳实践

20:31.940 --> 20:32.940
在最佳实践里面

20:32.940 --> 20:34.940
他提到了这么一段话

20:34.940 --> 20:35.940
这段他的整体意思

20:35.940 --> 20:36.940
就是说

20:36.940 --> 20:37.940
你这个计算属性

20:37.940 --> 20:39.940
应该是指读的

20:39.940 --> 20:41.940
就是只有概子

20:41.940 --> 20:42.940
它不能写set

20:43.940 --> 20:44.940
那么这样子一来

20:44.940 --> 20:45.940
维尤3跟维尤2

20:45.940 --> 20:47.940
在计算属性这一块

20:47.940 --> 20:48.940
就产生了一些

20:48.940 --> 20:51.940
细微的概念上的一个差别

20:52.940 --> 20:53.940
在维尤2里面

20:53.940 --> 20:54.940
我们认为计算属性

20:54.940 --> 20:57.940
它是可以把一系列的原始值

20:57.940 --> 20:59.940
给它一个门户入口

20:59.940 --> 21:00.940
比方说这里

21:00.940 --> 21:01.940
firstName对吧

21:01.940 --> 21:02.940
性和名

21:02.940 --> 21:04.940
然后我们用一个

21:04.940 --> 21:06.940
forName一个全名

21:06.940 --> 21:08.940
给它做一个访问路入口

21:08.940 --> 21:10.940
我们可以把这些数据

21:10.940 --> 21:11.940
收集起来

21:11.940 --> 21:13.940
提供一个统一的访问入口

21:13.940 --> 21:14.940
通过计算属性

21:14.940 --> 21:16.940
就可以访问到

21:16.940 --> 21:18.940
forName就全名

21:18.940 --> 21:19.940
同时我们也可以

21:19.940 --> 21:21.940
对计算属性进行修改

21:21.940 --> 21:23.940
修改结果

21:23.940 --> 21:24.940
那么在set里面

21:24.940 --> 21:27.940
它就会去影响这两个原始的值

21:27.940 --> 21:28.940
也就是说

21:28.940 --> 21:30.940
我们可以通过计算属性

21:30.940 --> 21:31.940
不去操作原始的值

21:31.940 --> 21:34.940
就能够完成读取和修改

21:34.940 --> 21:35.940
这是我们过去对

21:35.940 --> 21:37.940
计算属性的看法

21:37.940 --> 21:39.940
那么在现在有点不一样了

21:39.940 --> 21:42.940
既然它有这么一个官方的提示

21:42.940 --> 21:43.940
那么计算属性

21:43.940 --> 21:44.940
它变成了一个快招

21:44.940 --> 21:45.940
它只是指读的

21:45.940 --> 21:48.940
它收集到了一些原始数据

21:48.940 --> 21:49.940
把这些原始数据

21:49.940 --> 21:50.940
通过计算

21:50.940 --> 21:51.940
来得到一个

21:51.940 --> 21:53.940
更加简洁的一个数据访问

21:53.940 --> 21:55.940
因此我们可以直接通过

21:55.940 --> 21:56.940
计算属性

21:56.940 --> 21:58.940
就拿到想访问的数据

21:58.940 --> 21:59.940
比方说全名

21:59.940 --> 22:01.940
但是我们要修改的时候

22:01.940 --> 22:03.940
不能去修改计算属性了

22:03.940 --> 22:06.940
而要去修改它的原始值

22:06.940 --> 22:08.940
就这么一个细微的差别

22:08.940 --> 22:10.940
因为它做了这么一个说明

22:10.940 --> 22:11.940
但是对这个说明

22:11.940 --> 22:15.940
我其实是有一些疑问的

22:15.940 --> 22:16.940
不过这个疑问

22:16.940 --> 22:18.940
我目前没办法解答

22:18.940 --> 22:19.940
什么疑问的

22:19.940 --> 22:22.940
就是说一个成熟的框架

22:22.940 --> 22:24.940
它如果说做得

22:24.940 --> 22:26.940
有这么一个最佳实践存在

22:26.940 --> 22:28.940
而且建议大家

22:28.940 --> 22:30.940
永远不要去更改这个计算属性

22:30.940 --> 22:31.940
它正确的做法

22:31.940 --> 22:32.940
应该是什么呢

22:32.940 --> 22:33.940
正确的做法

22:33.940 --> 22:36.940
要么就去掉这个API

22:36.940 --> 22:37.940
它没有存在的意义了

22:37.940 --> 22:39.940
因为整个VU3

22:39.940 --> 22:41.940
它是一个阶段式更新

22:41.940 --> 22:43.940
就是它跟VU2是不兼容的

22:43.940 --> 22:45.940
既然你都不兼容了

22:45.940 --> 22:47.940
那么你又认为

22:47.940 --> 22:49.940
它这个点上不应该有set

22:49.940 --> 22:51.940
但你应该去掉这个API

22:51.940 --> 22:53.940
如果说它考虑到一些情况

22:53.940 --> 22:56.940
不像不想去去掉API的话

22:56.940 --> 22:57.940
正确的做法

22:57.940 --> 22:59.940
应该是去给它做个标记

22:59.940 --> 23:00.940
标记为过期

23:00.940 --> 23:02.940
比方说你写个函数

23:02.940 --> 23:04.940
ABC吧

23:04.940 --> 23:06.940
然后你这个函数

23:06.940 --> 23:08.940
是一些老的API

23:08.940 --> 23:10.940
但是你现在因为一些情况

23:10.940 --> 23:12.940
不建议大家去使用这个函数了

23:12.940 --> 23:14.940
又为了避免兼容性问题

23:14.940 --> 23:16.940
还希望保留一段时间

23:16.940 --> 23:17.940
应该怎么做呢

23:17.940 --> 23:19.940
应该给函数标记一个

23:21.940 --> 23:23.940
叫做deprecated

23:23.940 --> 23:27.830
表示过期

23:27.830 --> 23:29.830
以后可能会移除

23:30.830 --> 23:31.830
那么这样子一来

23:31.830 --> 23:34.830
一旦开发者去使用这个函数的时候

23:34.830 --> 23:36.830
它就会爆出一个警告

23:36.830 --> 23:37.830
这个警告告诉你

23:37.830 --> 23:39.830
这个签名已经过期了

23:39.830 --> 23:40.830
未来可能会移除

23:40.830 --> 23:41.830
但是这两件算了

23:41.830 --> 23:42.830
VU都没有做

23:42.830 --> 23:44.830
所以说这就是我的疑惑点

23:44.830 --> 23:46.830
它有没有什么我还没有考虑到的东西

23:46.830 --> 23:48.830
还有它背后的生成字含义

23:48.830 --> 23:50.830
我并不清楚了

23:50.830 --> 23:52.830
所以我这个情况

23:52.830 --> 23:53.830
给它同学们说明

23:53.830 --> 23:55.830
既然目前官方它有这个建议

23:55.830 --> 23:57.830
那么我们按照官方的来

23:57.830 --> 23:59.830
那么背后到底是什么原因

23:59.830 --> 24:00.830
造成的

24:00.830 --> 24:02.830
还是它直接就忽略了小信息了

24:02.830 --> 24:03.830
我不得而知

24:03.830 --> 24:05.830
如果将来的同学知道的话

24:05.830 --> 24:06.830
可以给我们反馈

24:06.830 --> 24:08.830
那么现在我们把带码的改造一下

24:08.830 --> 24:10.830
这个计算属性

24:10.830 --> 24:13.830
我们把它只需要guide

24:13.830 --> 24:15.830
然后单独大家去写一个函数

24:15.830 --> 24:17.830
叫做set

24:17.830 --> 24:19.830
or checked

24:19.830 --> 24:21.830
你给我一个

24:21.830 --> 24:23.830
不而知吧

24:23.830 --> 24:25.830
checked

24:25.830 --> 24:27.830
把这个粘贴过来

24:27.830 --> 24:29.830
那么把这个函数

24:29.830 --> 24:31.830
也该保护出去

24:31.830 --> 24:33.830
好 这样子一来的话

24:33.830 --> 24:35.830
那么这边就改造一下

24:35.830 --> 24:38.830
再与全选这一块

24:38.830 --> 24:40.830
搜索一下vmode

24:40.830 --> 24:44.210
那么这里就不能全选了

24:44.210 --> 24:45.210
应该是怎么样呢

24:45.210 --> 24:47.210
应该是checked

24:47.210 --> 24:49.210
选中

24:49.210 --> 24:50.210
然后呢

24:50.210 --> 24:53.210
当我改变的时候

24:53.210 --> 24:54.210
input

24:54.210 --> 24:56.210
换糖补汉腰了

24:56.210 --> 24:58.210
它的checked

24:58.210 --> 25:00.210
传进去

25:00.210 --> 25:02.210
好 再来

25:02.210 --> 25:05.210
走

25:05.210 --> 25:07.210
刷新

25:07.210 --> 25:09.210
刷新

25:09.210 --> 25:11.210
目前都没问题了

25:11.210 --> 25:13.210
这就是

25:13.210 --> 25:15.210
这个全选状态的一个改造

25:15.210 --> 25:16.210
那么之后呢

25:16.210 --> 25:18.210
我们会在这个完整的暗地

25:18.210 --> 25:20.210
以及后边的代码里边

25:20.210 --> 25:22.210
都会完成这个代码的修改

25:22.210 --> 25:23.210
同学们 后边看的时候呢

25:23.210 --> 25:24.210
这一块注意一下

25:24.210 --> 25:25.210
其他都没啥了

25:25.210 --> 25:26.210
那么以后呢

25:26.210 --> 25:27.210
同学们开发的时候

25:27.210 --> 25:28.210
在做计算属性的时候

25:28.210 --> 25:29.210
就不要去checked了

25:29.210 --> 25:30.210
情况了

25:30.210 --> 25:31.210
目前这一块

25:31.210 --> 25:32.210
我还不知道它具体是什么情况

25:32.210 --> 25:33.210
但是呢

25:33.210 --> 25:34.210
按照官方文档来吧

25:34.210 --> 25:35.210
就不要去checked了

25:35.210 --> 25:36.210
把它当成一个

25:36.210 --> 25:37.210
指读的东西就可以了

25:37.210 --> 25:38.210
好 那么如果说

25:38.210 --> 25:39.210
你都不checked了

25:39.210 --> 25:40.210
拿这个get

25:40.210 --> 25:42.210
你可以减写说

25:42.210 --> 25:45.210
你可以把减写为这种格式

25:45.210 --> 25:46.210
对不对

25:46.210 --> 25:48.210
好 这样子的代码能更简洁

25:48.210 --> 25:50.210
好 其他没啥了

