WEBVTT

00:00.300 --> 00:02.940
好 我们来接着上节课来做

00:02.940 --> 00:04.820
上节课我们做了新增对不对

00:04.820 --> 00:08.180
我们在这里调试的时候呢

00:08.180 --> 00:10.980
我们在这个地方看到新增的结果

00:10.980 --> 00:15.020
我们现在需要把这个列表给它显示出来

00:15.020 --> 00:17.540
因为这个列表目前是静态页面

00:17.540 --> 00:19.220
都是显示静态内容

00:19.220 --> 00:22.020
我们把个列表要显示到这儿

00:22.020 --> 00:26.100
那么这个列表它是不是就是显示的所有任务

00:26.100 --> 00:28.220
实际上是不是的

00:28.380 --> 00:30.020
它是要根据筛选的

00:30.020 --> 00:31.540
我们来好好分析一下

00:31.540 --> 00:33.900
就是它有可能显示所有

00:33.900 --> 00:36.540
有可能显示这个Active

00:36.540 --> 00:39.100
有可能显示这个Completed

00:39.100 --> 00:42.860
就是未完成的 还有已完成的 还有所有

00:42.860 --> 00:45.660
那么这三个到底是哪一个呢

00:45.660 --> 00:48.700
它又取决于这个哈希

00:48.700 --> 00:51.180
我们看一下最终的效果吧

00:51.180 --> 00:53.740
最终的效果我把这个停掉

00:53.740 --> 00:57.540
把这边我们按一里边这个地方打开

00:57.580 --> 01:00.260
观察一下啊 首先分析一下功能

01:00.260 --> 01:04.060
N片装定

01:04.060 --> 01:05.780
打开看一下啊

01:05.780 --> 01:08.960
诶 我的东西呢

01:08.960 --> 01:10.960
我都想把这边删了

01:10.960 --> 01:13.440
删了 随便加一个吧 加一些吧

01:13.440 --> 01:14.520
还会

01:14.520 --> 01:20.420
到这边

01:20.420 --> 01:21.780
C

01:21.780 --> 01:22.580
就这样

01:22.580 --> 01:23.780
那么你看一下啊

01:23.780 --> 01:25.100
默认情况下呢

01:25.100 --> 01:27.060
如果说这里没有哈希值的话

01:27.060 --> 01:29.060
它显示的是全部

01:29.060 --> 01:30.700
那如果说有哈希值的话

01:30.700 --> 01:32.260
它是这样子

01:32.260 --> 01:33.140
哈希

01:33.140 --> 01:35.780
我们比方说有一个Completed

01:35.780 --> 01:37.180
一回车 你看

01:37.180 --> 01:38.860
显示是不是已完成的

01:38.860 --> 01:41.700
那么如果说这边是这个Active呢

01:41.700 --> 01:44.060
显示的就是未完成的 看没

01:44.060 --> 01:48.300
也就是说我们的逻辑关系啊 是这样

01:48.300 --> 01:51.500
以后哈希来决定

01:51.500 --> 01:55.100
目前的筛选方式

01:55.100 --> 01:55.860
对不对

01:55.860 --> 01:57.820
然后再有筛选方式

01:57.820 --> 02:01.060
决定最终的筛选列表

02:01.100 --> 02:02.100
我们要把逻辑

02:02.100 --> 02:03.340
遇到一个问题啊

02:03.340 --> 02:04.780
你先不要着急写

02:04.780 --> 02:06.780
你写出来都是乱的

02:06.780 --> 02:10.620
一定要把那个逻辑关系分析清楚

02:10.620 --> 02:11.740
好 因此呢

02:11.740 --> 02:13.780
我们把这个逻辑关系分析清楚过后呢

02:13.780 --> 02:15.300
我们还是按照上理节课

02:15.300 --> 02:17.820
我们的诗路来进行书写

02:17.820 --> 02:20.260
把这边都停掉了啊

02:20.260 --> 02:21.860
这边重新打开

02:21.860 --> 02:26.530
NPM不装

02:26.530 --> 02:28.730
好 这是我们的啊

02:28.730 --> 02:29.450
然后呢

02:29.450 --> 02:30.890
我们在Completed这个文件夹

02:30.890 --> 02:32.130
这边新建一个文件啊

02:32.170 --> 02:35.690
叫做UseFilter

02:35.690 --> 02:37.370
就是用来筛选的啊

02:37.370 --> 02:40.450
跟筛选所有相关的数据啊

02:40.450 --> 02:43.210
还有那个啊

02:43.210 --> 02:44.730
函数啊这些东西

02:44.730 --> 02:46.410
我们都把它写到这里面啊

02:46.410 --> 02:48.130
同样的我们这里导出啊

02:48.130 --> 02:49.330
export

02:49.330 --> 02:51.330
default方形

02:51.330 --> 02:53.330
一个UseFilter啊

02:53.330 --> 02:54.330
当然这里呢

02:54.330 --> 02:55.330
因为是默认导出嘛

02:55.330 --> 02:58.050
也可以不写方法迷啊

02:58.050 --> 02:59.130
好

02:59.130 --> 03:00.490
那么既然要筛选的话

03:00.490 --> 03:01.170
是不是同样的

03:01.210 --> 03:03.290
你要把那个所有的任务给我

03:03.290 --> 03:03.530
对吧

03:03.530 --> 03:06.730
我要在所有任务基础上来进行筛选

03:06.730 --> 03:08.730
就跟我们新增的时候是一样的

03:08.730 --> 03:10.050
你把所有任务传给我

03:10.050 --> 03:10.930
我新增的时候呢

03:10.930 --> 03:13.410
我给他铺写一个啊

03:13.410 --> 03:14.730
通过这个的方式呢

03:14.730 --> 03:16.490
大家可以体会一下

03:16.490 --> 03:19.410
我们的这个completion API啊

03:19.410 --> 03:21.250
是怎么去提取出绪的

03:21.250 --> 03:22.850
我们这里呢

03:22.850 --> 03:23.970
toduce

03:23.970 --> 03:24.370
review

03:24.370 --> 03:25.970
你需要给我传一个参数

03:25.970 --> 03:27.010
那么自然而然

03:27.010 --> 03:28.050
这边

03:28.050 --> 03:29.450
按回这里

03:29.450 --> 03:30.130
那同样的道理

03:30.130 --> 03:32.010
是不是在这里直接写一下就完事了

03:32.010 --> 03:32.250
对吧

03:32.250 --> 03:33.930
你给我返回一个对象啊

03:33.930 --> 03:37.300
我们这里导入啊

03:37.300 --> 03:42.540
UseFilter

03:42.540 --> 03:44.420
UseFilter

03:44.420 --> 03:45.220
那么这边呢

03:45.220 --> 03:47.380
我们使用UseFilter

03:47.380 --> 03:50.060
还是把toducereview传进去

03:50.060 --> 03:50.220
好

03:50.220 --> 03:51.620
剩下的事情交给你了啊

03:51.620 --> 03:52.620
你给我返回的东西呢

03:52.620 --> 03:54.580
我等你把展开就完事了

03:54.580 --> 03:54.740
好

03:54.740 --> 03:59.300
那么现在我们就专心来写这么一个函数

03:59.300 --> 03:59.540
好

03:59.540 --> 04:00.700
这个函数呢

04:00.740 --> 04:01.940
你看啊

04:01.940 --> 04:03.260
决定筛选列表

04:03.260 --> 04:05.460
筛选列表是不是要循环展示的

04:05.460 --> 04:07.060
是要在这边循环展示的

04:07.060 --> 04:08.140
对吧

04:08.140 --> 04:09.500
这边有每一个li

04:09.500 --> 04:09.820
对不对

04:09.820 --> 04:11.140
循环这个li

04:11.140 --> 04:13.620
一个li就是一个

04:13.620 --> 04:14.660
一个任务

04:14.660 --> 04:16.460
就这里的一个任务

04:16.460 --> 04:16.740
好

04:16.740 --> 04:17.860
因此呢

04:17.860 --> 04:19.780
我们要得到一个筛选列表

04:19.780 --> 04:22.860
就要取决于筛选方式

04:22.860 --> 04:24.020
那么这个筛选方式呢

04:24.020 --> 04:26.580
我们可以用一个响应数据啊

04:26.580 --> 04:27.980
比方说我们这里

04:27.980 --> 04:29.300
导入

04:30.140 --> 04:30.500
from

04:30.500 --> 04:31.900
will

04:31.900 --> 04:33.900
筛选方式其实我们就可以用一个字乎串

04:36.100 --> 04:36.620
这里呢

04:36.620 --> 04:39.220
我们定一个visibility

04:41.020 --> 04:44.020
就是可以显示的是什么东西

04:44.020 --> 04:45.420
到底显示的是所有

04:45.420 --> 04:47.300
还是显示的是未完成

04:47.300 --> 04:49.020
还是显示的是已完成

04:49.020 --> 04:50.460
我们用一个字乎串来表示

04:50.460 --> 04:52.660
那么它的默认值呢

04:52.660 --> 04:54.780
我们可以用or

04:54.780 --> 04:57.340
默认值可以用or来表示

04:57.340 --> 04:59.100
表示显示的是所有

04:59.140 --> 04:59.780
一会儿呢

04:59.780 --> 05:00.780
变成了什么呢

05:00.780 --> 05:01.580
变成了

05:03.780 --> 05:05.020
已完成的

05:05.020 --> 05:08.100
那么就把它设置为completed

05:08.100 --> 05:08.700
对吧

05:08.700 --> 05:10.140
我们用一个字乎串来表示

05:10.140 --> 05:11.380
当然用数字也可以啊

05:11.380 --> 05:12.740
总之是个筛选方式而已

05:13.860 --> 05:14.580
好了

05:14.580 --> 05:15.780
那么这个东西

05:15.780 --> 05:16.900
我们首先搞定啊

05:16.900 --> 05:18.620
就这个玩意啊

05:18.620 --> 05:20.060
它到底是怎么变化的

05:21.220 --> 05:22.620
它怎么变化的呢

05:22.620 --> 05:24.940
它是根据哈希变化的

05:24.940 --> 05:25.980
那么哈希变的

05:25.980 --> 05:27.340
是不是它要跟着变

05:27.340 --> 05:27.780
对不对

05:27.820 --> 05:29.620
它是要根据取决于哈希的

05:29.620 --> 05:30.980
哈希值啊

05:30.980 --> 05:32.740
我这里又关掉了

05:32.740 --> 05:33.860
就是哈希这里一变

05:33.860 --> 05:35.620
比方说哈希变成这个

05:35.620 --> 05:36.620
completed

05:36.620 --> 05:39.060
那么它就变成completed

05:39.060 --> 05:40.980
这个参选方式要跟着变

05:40.980 --> 05:41.460
所以说呢

05:41.460 --> 05:42.020
我们这里呢

05:42.020 --> 05:43.180
就涉及到一个问题就是

05:43.180 --> 05:46.460
我们要去监控哈希值的变化

05:46.460 --> 05:49.060
那么监控哈希值的变化的话

05:49.060 --> 05:50.940
我们是不是可以用了一个什么

05:50.940 --> 05:53.220
window.add event listener

05:53.220 --> 05:53.660
对吧

05:53.660 --> 05:55.500
哈希change

05:55.540 --> 05:56.300
这个事件

05:56.300 --> 05:57.820
它就可以监控我们网页中

05:57.820 --> 05:58.860
哈希值的变化

06:00.180 --> 06:00.300
好

06:00.300 --> 06:03.260
那么这个事件什么时候注册呢

06:03.260 --> 06:05.380
什么时候注册这个事件呢

06:05.380 --> 06:07.580
你可以在组件加载完成之后

06:07.580 --> 06:09.060
来进行注册

06:09.060 --> 06:11.140
也可以在那个

06:11.140 --> 06:11.700
同时呢

06:11.700 --> 06:13.260
要在组件销毁过后

06:13.260 --> 06:15.380
要把这个事件取消掉

06:15.380 --> 06:15.940
对吧

06:15.940 --> 06:18.060
因为我这里写的时候

06:18.060 --> 06:20.340
我们目前倒是这个组件不会销毁啊

06:20.340 --> 06:21.900
如果说将来你们写的一些

06:21.900 --> 06:22.460
组件的话

06:22.460 --> 06:23.780
还有可能就不用它了

06:23.820 --> 06:25.020
比如切换页面啊

06:25.020 --> 06:27.940
或者是切换组件显示啊

06:27.940 --> 06:29.420
它可能就没有用到这个组件了

06:29.420 --> 06:30.580
那么它就会被销毁

06:30.580 --> 06:32.940
销毁的时候是不是有个事件得去掉

06:32.940 --> 06:34.460
那就它干嘛呢

06:34.460 --> 06:34.860
所以说呢

06:34.860 --> 06:35.820
我们这里呢

06:35.820 --> 06:37.180
就涉及到两个问题

06:38.700 --> 06:40.340
第一个问题

06:40.340 --> 06:42.540
组件挂载完成

06:42.540 --> 06:45.540
组件挂载完成的事件

06:46.740 --> 06:47.980
不是事件啊

06:47.980 --> 06:49.140
的生命周期函数

06:50.860 --> 06:53.580
我们在这种setup函数里边

06:53.580 --> 06:56.580
如何来设置生命周期函数呢

06:56.580 --> 06:58.100
比方说monty的

06:58.100 --> 06:59.060
对吧

06:59.060 --> 07:00.420
那个什么

07:00.420 --> 07:01.580
unmonty的

07:01.580 --> 07:02.860
updated

07:02.860 --> 07:03.100
对吧

07:03.100 --> 07:05.100
像这一生命周期函数怎么在设置

07:05.100 --> 07:07.180
还有一个生命周期函数就是

07:07.180 --> 07:09.900
组件销毁过后的生命周期函数

07:09.900 --> 07:13.980
销毁过后的生命周期函数

07:13.980 --> 07:16.380
以前我们用option api的时候

07:19.260 --> 07:20.620
当时我们是配置式的

07:20.620 --> 07:21.540
配置式的很简单

07:21.700 --> 07:23.500
你直接设置这个函数就完事了

07:23.500 --> 07:24.900
那么现在不是配置式的

07:24.900 --> 07:26.220
而且你都把提出来了

07:26.220 --> 07:27.140
你到哪里去配置呢

07:27.140 --> 07:28.300
没法配置

07:28.300 --> 07:30.620
那么在5u3里边呢

07:30.620 --> 07:32.620
它把这些生命周期函数啊

07:32.620 --> 07:35.220
都给我们提成了一个普通函数

07:36.500 --> 07:37.860
也这里可以导注

07:37.860 --> 07:39.380
我们比方说要用到两个函数

07:39.380 --> 07:41.300
一个是unmonty的

07:41.300 --> 07:46.180
一个是unmonty的

07:46.180 --> 07:48.780
一个是挂载完成之后

07:48.780 --> 07:51.060
一个是销毁之后

07:51.620 --> 07:52.740
说跟以前是对应的

07:52.740 --> 07:53.820
就是加上一个单词un

07:53.820 --> 07:55.900
它变成一个普通函数了

07:55.900 --> 07:57.540
它不是配置式的了

07:57.540 --> 07:58.820
那么我们怎么来用呢

08:03.220 --> 08:05.020
这里边要传入一个函数

08:06.660 --> 08:08.340
输出unmonty

08:10.260 --> 08:12.940
好 这边unmonty

08:14.860 --> 08:17.780
输出unmonty

08:17.780 --> 08:21.060
好 看一下啊

08:21.220 --> 08:22.020
你就先检查

08:23.700 --> 08:24.660
你看 是不是运行的

08:24.660 --> 08:25.300
monty的

08:25.300 --> 08:26.620
那么现在主线没有销毁

08:26.620 --> 08:27.580
没有销毁自然

08:27.580 --> 08:28.860
它不会运行这个monty的

08:28.860 --> 08:29.860
我们写到这

08:29.860 --> 08:31.100
它肯定是

08:31.100 --> 08:32.260
如果主线销毁了

08:32.260 --> 08:33.380
它肯定是会运行的

08:34.980 --> 08:36.020
没问题吧

08:36.020 --> 08:37.900
那么在这个地方我们写什么呢

08:37.900 --> 08:40.980
我们就要去监听哈希子的变化

08:40.980 --> 08:42.660
我们这里是用Windows

08:42.660 --> 08:44.020
ADD Immersed National

08:45.740 --> 08:46.540
哈希Change

08:47.780 --> 08:49.580
那么这边该负责为一个函数

08:49.580 --> 08:50.180
对不对

08:50.180 --> 08:51.180
那么这个函数你可以

08:51.180 --> 08:53.020
如果说你直接写到这的话

08:53.020 --> 08:54.060
倒是没什么问题啊

08:54.060 --> 08:56.100
主要说我到时候销毁的时候

08:56.100 --> 08:57.580
我是不是要把这个函数去掉

08:58.420 --> 08:58.980
Windows

09:01.720 --> 09:04.040
WindowsRemove

09:04.040 --> 09:05.680
Add Immersed National

09:05.680 --> 09:06.480
哈希Change

09:06.480 --> 09:08.000
这把函数去掉

09:08.000 --> 09:10.160
因此这个函数我们是不是可以提出来

09:10.160 --> 09:10.680
对吧

09:10.680 --> 09:12.280
提到外边就行了

09:12.280 --> 09:13.200
提到这里

09:13.200 --> 09:17.040
比较说unharschange

09:17.800 --> 09:19.440
当哈希子变化的时候

09:19.440 --> 09:20.640
我的处理函数

09:24.660 --> 09:25.940
哈希

09:25.940 --> 09:26.940
值

09:26.940 --> 09:28.420
变化了

09:28.420 --> 09:30.980
那么这样子的我把这个函数放在这

09:30.980 --> 09:32.020
到时候销毁的时候

09:32.020 --> 09:32.860
我们把它放到这

09:32.860 --> 09:33.860
对吧

09:33.860 --> 09:35.180
把销毁掉就行了

09:35.180 --> 09:37.220
把它移除掉就行了

09:37.220 --> 09:37.420
好

09:37.420 --> 09:40.210
咱们来看一下

09:40.210 --> 09:41.250
放心

09:41.250 --> 09:42.890
一开始这个函数没有运行

09:42.890 --> 09:44.170
这个函数运行了

09:44.170 --> 09:45.890
于是它注册了一个事件

09:45.890 --> 09:48.250
但是哈希子目前没有变化

09:48.250 --> 09:49.130
没有变化的话

09:49.130 --> 09:50.730
那就没有输出

09:50.730 --> 09:52.570
那我们把哈希子变化一下

09:52.570 --> 09:54.970
比较说我们把它变成active

09:55.010 --> 09:57.010
你看哈希子变化了

09:57.010 --> 09:58.770
能够坚定到这个函数了

09:58.770 --> 09:59.170
对吧

09:59.170 --> 10:00.610
能好好看一下

10:00.610 --> 10:02.170
就很简单的

10:02.170 --> 10:04.090
那么哈希子变化的时候

10:04.090 --> 10:05.010
变化了之后

10:05.010 --> 10:07.010
我们是不是要读取到哈希子

10:07.010 --> 10:08.970
因为我们要根据哈希子来设置

10:08.970 --> 10:10.290
筛选方式

10:10.290 --> 10:12.730
所以说我们这里需要一个读取

10:12.730 --> 10:14.050
读取哈希子其实很简单

10:14.050 --> 10:16.050
就是location

10:16.050 --> 10:18.650
哈希就读取了

10:18.650 --> 10:19.850
我们来看一下

10:21.450 --> 10:23.450
就把设为completed

10:23.490 --> 10:25.290
你看是不是读取到哈希子的

10:25.290 --> 10:26.290
这是哈希子

10:26.290 --> 10:27.450
A

10:28.450 --> 10:29.450
B

10:29.450 --> 10:30.850
你看是不是读取到哈希子的

10:30.850 --> 10:32.970
那么读取到哈希子过后

10:32.970 --> 10:35.450
前面这个锦号和这个鞋杠

10:35.450 --> 10:36.450
是不是可能不要

10:36.450 --> 10:37.450
我们就不需要了

10:37.450 --> 10:41.450
有的时候它可能没有这个鞋杠

10:41.450 --> 10:42.650
我们都考虑进去吧

10:42.650 --> 10:44.450
就无论你有没有这个鞋杠

10:44.450 --> 10:46.570
肯定是有锦号开头的对不对

10:46.570 --> 10:50.010
然后我们读取锦号之后的东西

10:50.010 --> 10:50.770
那么怎么来读呢

10:50.770 --> 10:52.770
我们可以用一个

10:53.770 --> 10:56.770
政治表达式来进行替换吧

10:56.770 --> 10:57.770
这是哈希对吧

10:57.770 --> 10:58.770
这是自无窗吧

10:58.770 --> 11:00.770
我们用replace替换

11:00.770 --> 11:01.770
替换掉什么呢

11:01.770 --> 11:03.770
替换掉以锦号开头

11:05.770 --> 11:06.770
然后呢

11:08.770 --> 11:09.770
后面是一个鞋杠

11:09.770 --> 11:12.770
因为鞋杠是一个特殊制服

11:12.770 --> 11:13.770
我们转移一下

11:13.770 --> 11:14.770
一个鞋杠

11:14.770 --> 11:16.770
这个鞋杠有可能出现

11:16.770 --> 11:17.770
有可能不出现

11:17.770 --> 11:18.770
它有可能是

11:19.770 --> 11:20.770
对吧

11:20.770 --> 11:21.770
那我们来测试一下

11:21.770 --> 11:22.770
这个政治表达式

11:26.210 --> 11:27.210
鞋杠

11:28.210 --> 11:30.210
锦号你看是不是可以匹配到

11:31.210 --> 11:32.210
对吧

11:32.210 --> 11:33.210
是不是可以匹配到这个位置

11:34.210 --> 11:35.210
如果说锦号鞋杠的话

11:35.210 --> 11:36.210
它也可以匹配

11:36.210 --> 11:37.210
对吧

11:37.210 --> 11:38.210
有没有鞋杠都可以匹配

11:39.210 --> 11:40.210
好匹配到这个

11:40.210 --> 11:41.210
匹配到这个位置过后

11:41.210 --> 11:42.210
我们把这个位置

11:42.210 --> 11:44.210
替换成一个空置服穿

11:44.210 --> 11:45.210
对吧

11:45.210 --> 11:46.210
那么相当于就是

11:47.210 --> 11:50.580
相当于是就把前面

11:50.580 --> 11:51.580
去掉了

11:51.580 --> 11:52.580
对吧

11:52.580 --> 11:53.580
就把前面去掉了

11:53.580 --> 11:54.580
就这么简单

11:54.580 --> 11:56.580
那么这样子得出来的一个结果了

11:56.580 --> 11:57.580
是不是就是哈西

11:57.580 --> 11:58.580
对吧

11:58.580 --> 11:59.580
我们要的哈西

12:01.580 --> 12:02.580
这个插键

12:02.580 --> 12:04.580
就是这个政治表达式的插键

12:04.580 --> 12:05.580
叫啥名字来着

12:10.540 --> 12:12.540
我找不到了

12:12.540 --> 12:13.540
我可能有点想问

12:15.540 --> 12:16.540
这个

12:16.540 --> 12:17.540
试试这个吧

12:18.540 --> 12:19.540
好像是这个

12:20.540 --> 12:21.540
不是

12:25.620 --> 12:26.620
我找不到了

12:26.620 --> 12:27.620
找不到了

12:27.620 --> 12:28.620
网上去搜一下吧

12:28.620 --> 12:29.620
就是vscode里面

12:29.620 --> 12:30.620
政治表达式相关插键

12:31.620 --> 12:32.620
这是什么小问题

12:32.620 --> 12:33.620
好

12:33.620 --> 12:34.620
我们把这个东西再输出一下

12:34.620 --> 12:35.620
试一下

12:35.620 --> 12:36.620
慢一点

12:36.620 --> 12:37.620
不着急

12:37.620 --> 12:40.950
你不用做

12:40.950 --> 12:41.950
好

12:41.950 --> 12:42.950
现在我们写个

12:43.950 --> 12:44.950
dc

12:44.950 --> 12:45.950
得到c

12:45.950 --> 12:46.950
对吧

12:46.950 --> 12:47.950
然后写个ctl

12:48.950 --> 12:49.950
得到ctl

12:49.950 --> 12:50.950
对不对

12:50.950 --> 12:51.950
就这么一个意思

12:51.950 --> 12:52.950
好

12:52.950 --> 12:53.950
到哈西过后呢

12:55.950 --> 12:57.950
我们现在要通过这个哈西纸

13:00.460 --> 13:01.460
我们要把这个哈西

13:01.460 --> 13:02.460
我通过这个哈西纸

13:02.460 --> 13:04.460
来给他复制

13:04.460 --> 13:05.460
对不对

13:05.460 --> 13:06.460
给他复制

13:06.460 --> 13:07.460
来改变他

13:07.460 --> 13:08.460
好

13:08.460 --> 13:09.460
慢慢来啊

13:10.460 --> 13:11.460
现在一个问题就是

13:11.460 --> 13:13.460
他的哈西纸有可能是错误的

13:13.460 --> 13:14.460
因为这个地址哪嘛

13:14.460 --> 13:15.460
用户可以输入的

13:15.460 --> 13:16.460
对吧

13:16.460 --> 13:17.460
我们

13:17.460 --> 13:18.460
虽然说这个案例很小

13:18.460 --> 13:20.460
但是我们还是尽量多考虑一些

13:20.460 --> 13:21.460
那么比方说

13:21.460 --> 13:22.460
用户输入这个玩意

13:22.460 --> 13:23.460
这个是不是无效的呀

13:24.460 --> 13:25.460
对吧

13:25.460 --> 13:26.460
无效的我怎么处理呢

13:26.460 --> 13:27.460
那里看你怎么处理的

13:27.460 --> 13:28.460
我这里的处理方式呢

13:28.460 --> 13:31.460
如果说你输的是一个无效的哈西纸

13:31.460 --> 13:33.460
我就认为你输的就是o

13:33.460 --> 13:35.460
就相当于是o

13:35.460 --> 13:36.460
所有的

13:36.460 --> 13:37.460
得到所有

13:38.460 --> 13:39.460
是这么个意思

13:39.460 --> 13:40.460
那么如果说你输

13:40.460 --> 13:41.460
如果说是无效的话

13:41.460 --> 13:43.460
那么我就给你

13:43.460 --> 13:44.460
给你怎么样了

13:45.460 --> 13:46.460
给你

13:46.460 --> 13:48.460
把哈西纸去掉

13:48.460 --> 13:49.460
默认就是o

13:49.460 --> 13:50.460
原来的意思吧

13:50.460 --> 13:51.460
那我怎么样知道

13:51.460 --> 13:53.460
他是有效还是无效呢

13:53.460 --> 13:55.460
因为有效和无效

13:55.460 --> 13:57.460
就只有这么几种情况

13:57.460 --> 13:58.460
哪几种情况呢

13:58.460 --> 13:59.460
o

13:59.460 --> 14:00.460
actu

14:00.460 --> 14:01.460
completed

14:01.460 --> 14:02.460
对吧

14:02.460 --> 14:03.460
无非就是这么几种情况

14:04.460 --> 14:07.470
好

14:07.470 --> 14:08.470
那么

14:08.470 --> 14:09.470
这种情况下呢

14:10.470 --> 14:11.470
我就

14:11.470 --> 14:12.470
确定三个纸嘛

14:12.470 --> 14:13.470
我们这里

14:13.470 --> 14:14.470
我也会在上面写个

14:14.470 --> 14:16.470
写个数组都可以

14:16.470 --> 14:17.470
就是

14:17.470 --> 14:18.470
Vanity

14:18.470 --> 14:20.470
哈西

14:20.470 --> 14:22.470
有效的哈西是哪些

14:22.470 --> 14:23.470
就一个数组

14:23.470 --> 14:24.470
o

14:25.470 --> 14:26.470
然后呢

14:27.470 --> 14:28.470
actu

14:28.470 --> 14:30.980
completed

14:30.980 --> 14:31.980
为什么写到上面

14:31.980 --> 14:32.980
因为是

14:32.980 --> 14:33.980
这个东西是一定的

14:33.980 --> 14:34.980
对吧

14:34.980 --> 14:35.980
它跟组件没有关系

14:36.980 --> 14:37.980
好

14:37.980 --> 14:38.980
然后这边呢

14:38.980 --> 14:39.980
如果说你的哈西

14:39.980 --> 14:40.980
我们这里判断一下

14:40.980 --> 14:42.980
如果说Vanity的

14:42.980 --> 14:43.980
哈西

14:43.980 --> 14:44.980
includes

14:44.980 --> 14:45.980
哈西

14:45.980 --> 14:46.980
是不是有效了

14:46.980 --> 14:48.980
这个时候是有效的

14:48.980 --> 14:49.980
有效的

14:49.980 --> 14:51.980
l 是不是无效的

14:51.980 --> 14:53.980
无效的哈西怎么办呢

14:53.980 --> 14:54.980
我就把这个location

14:54.980 --> 14:55.980
哈西

14:55.980 --> 14:57.980
设置为

14:57.980 --> 14:59.980
设置为空

14:59.980 --> 15:01.980
设置为空

15:01.980 --> 15:02.980
那么设置为空之后呢

15:02.980 --> 15:06.740
我同时把这个东西

15:06.740 --> 15:07.740
Value

15:07.740 --> 15:08.740
设置为什么

15:08.740 --> 15:09.740
o

15:09.740 --> 15:10.740
对吧

15:10.740 --> 15:11.740
当哈西为空的时候

15:11.740 --> 15:12.740
我们就认为它是o

15:12.740 --> 15:14.740
查询所有的

15:14.740 --> 15:15.740
列表

15:15.740 --> 15:16.740
好

15:16.740 --> 15:17.740
咱们来试一下

15:17.740 --> 15:19.740
我们这里再输出一下

15:19.740 --> 15:21.740
哈西无效

15:21.740 --> 15:24.690
好

15:24.690 --> 15:29.020
这边我们

15:29.020 --> 15:30.020
d

15:32.020 --> 15:34.020
输出了两次

15:34.020 --> 15:36.020
怎么输出了两次呢

15:37.020 --> 15:38.020
对了

15:38.020 --> 15:39.020
因为

15:39.020 --> 15:41.020
它第一次的时候

15:41.020 --> 15:43.020
第一次的时候

15:43.020 --> 15:45.020
我们刚才说的滴滴滴滴

15:45.020 --> 15:46.020
然后它这里

15:46.020 --> 15:47.020
哈西无效

15:47.020 --> 15:48.020
把它设置为空

15:48.020 --> 15:49.020
设置为空是不是

15:49.020 --> 15:50.020
又出发了哈西变化

15:50.020 --> 15:51.020
它又运行了一次

15:51.020 --> 15:52.020
这个函数

15:52.020 --> 15:53.020
又运行了一次过后

15:53.020 --> 15:54.020
因为它是空

15:54.020 --> 15:56.020
所以说也是哈西无效

15:56.020 --> 15:57.020
我再把同时为空

15:57.020 --> 15:58.020
那么这个时候

15:58.020 --> 15:59.020
哈西就没有变化了

15:59.020 --> 16:01.020
第一次从滴滴滴滴

16:01.020 --> 16:03.020
变成了空

16:03.020 --> 16:04.020
是不是出发

16:06.020 --> 16:08.020
第一次输滴滴滴滴的时候

16:08.020 --> 16:10.020
那么它出发了哈西无效

16:10.020 --> 16:12.020
然后我手动把它变成空

16:12.020 --> 16:14.020
它说又出发了一次哈西无效

16:14.020 --> 16:16.020
空也是哈西无效

16:16.020 --> 16:18.020
那么空再变成空

16:18.020 --> 16:20.020
它就没有再出发哈西迁迹了

16:20.020 --> 16:21.020
这个正常的

16:21.020 --> 16:22.020
好

16:22.020 --> 16:23.020
那么现在呢

16:23.020 --> 16:25.020
这个地方是不搞定的

16:25.020 --> 16:26.020
你看

16:26.020 --> 16:28.020
哈西如果说你输入了一些无效的指

16:28.020 --> 16:30.020
它就变成这个样子

16:30.020 --> 16:32.020
目前这个地方就搞定了

16:33.020 --> 16:35.020
好那么如果说是有效的

16:35.020 --> 16:36.020
那就很简单了

16:36.020 --> 16:37.020
有效的话

16:37.020 --> 16:38.020
我们就把这个

16:38.020 --> 16:39.020
vizability

16:39.020 --> 16:40.020
vizability

16:40.020 --> 16:41.020
設置为什么

16:41.020 --> 16:42.020
設置为哈西

16:42.020 --> 16:43.020
是我们之前

16:43.020 --> 16:44.020
结束过的这个哈西

16:45.020 --> 16:46.020
好那么有了

16:46.020 --> 16:47.020
这个玩意过后

16:47.020 --> 16:48.020
我们把这个玩意返回

16:49.020 --> 16:50.020
return

16:50.020 --> 16:51.020
你看这些东西就不用返回了

16:51.020 --> 16:53.020
这些致命责序

16:53.020 --> 16:54.020
还说都不用返回了

16:54.020 --> 16:55.020
它已经生效了

16:55.020 --> 16:56.020
我们把

16:56.020 --> 16:57.020
需要用到的

16:57.020 --> 16:59.020
外面需要用到的东西返回

16:59.020 --> 17:00.020
就返回这个

17:00.020 --> 17:01.020
好有了

17:01.020 --> 17:02.020
这个东西过后

17:02.020 --> 17:03.020
我们回到这边来

17:03.020 --> 17:04.020
我们是不是可以

17:04.020 --> 17:05.020
设置这个了

17:06.020 --> 17:07.020
设这个了

17:07.020 --> 17:08.020
你下面一个filters

17:08.020 --> 17:09.020
这个UOL

17:09.020 --> 17:10.020
这个UOL是啥呢

17:10.020 --> 17:11.020
就这个

17:12.020 --> 17:13.020
就这个玩意

17:14.020 --> 17:15.020
到底有三个东西

17:15.020 --> 17:16.020
对吧

17:16.020 --> 17:17.020
到底哪一个

17:17.020 --> 17:19.020
到底哪一个

17:19.020 --> 17:20.020
是

17:20.020 --> 17:22.020
选中状态

17:22.020 --> 17:23.020
那么这个地方

17:23.020 --> 17:24.020
是不是应该

17:25.020 --> 17:26.020
动态绑定

17:27.020 --> 17:28.020
那么这个class里边

17:28.020 --> 17:29.020
有一个东西

17:29.020 --> 17:30.020
叫selected class

17:31.020 --> 17:32.020
那么它到底是不是

17:32.020 --> 17:34.020
选中取决于什么呢

17:34.020 --> 17:35.020
取决于这个

17:37.020 --> 17:38.020
verability

17:38.020 --> 17:39.020
review

17:39.020 --> 17:40.020
是不是等于

17:40.020 --> 17:41.020
all

17:41.020 --> 17:42.020
对吧

17:42.020 --> 17:43.020
等于all的时候

17:43.020 --> 17:44.020
那么就显示

17:44.020 --> 17:45.020
这个就是选中状态

17:46.020 --> 17:47.020
那么同样的道理

17:47.020 --> 17:48.020
这个边也是一样

17:49.020 --> 17:50.020
它等于

17:50.020 --> 17:51.020
active的时候

17:51.020 --> 17:52.020
就这个选中

17:52.020 --> 17:53.020
然后这边也是一样

17:54.020 --> 17:55.020
它等于

17:55.020 --> 17:57.020
completed的时候

17:57.020 --> 17:58.020
它就选中

17:58.020 --> 17:59.020
看没

17:59.020 --> 18:00.020
我们把这个地方

18:00.020 --> 18:01.020
动态绑定一下

18:01.020 --> 18:02.020
那么这个玩意

18:02.020 --> 18:03.020
就可以直接写

18:03.020 --> 18:04.020
写实在这

18:04.020 --> 18:05.020
好

18:05.020 --> 18:06.020
先让我们来看一下

18:06.020 --> 18:09.400
现在我们

18:09.400 --> 18:10.400
这里手动改一下

18:10.400 --> 18:12.400
改成active

18:13.400 --> 18:14.400
你看变成active了

18:14.400 --> 18:16.400
这里改成completed

18:16.400 --> 18:17.400
改成completed

18:17.400 --> 18:19.400
同样我们点它说也可以

18:19.400 --> 18:20.400
点它过后

18:20.400 --> 18:21.400
这里变成

18:21.400 --> 18:22.400
那么哈细一遍

18:22.400 --> 18:23.400
触发事件

18:23.400 --> 18:24.400
然后我们数据变了

18:24.400 --> 18:25.400
数据是享用式的

18:25.400 --> 18:27.400
因此这里的那一样是变了

18:27.400 --> 18:29.400
这个地方搞定了

18:30.400 --> 18:31.400
那么这个东西

18:31.400 --> 18:33.400
哈细到筛选方式

18:33.400 --> 18:34.400
这一步

18:34.400 --> 18:35.400
是不是已经完成了

18:36.400 --> 18:37.400
今天我们继续

18:37.400 --> 18:38.400
还有很多事情要做

18:38.400 --> 18:40.400
还有就是筛选列表

18:40.400 --> 18:42.400
我们要根据不同的筛选方式

18:43.400 --> 18:45.400
来得到最终的一个数据

18:45.400 --> 18:46.400
筛选过后的数据

18:46.400 --> 18:48.400
那么这个玩意怎么做呢

18:48.400 --> 18:50.400
这个数据的处理

18:50.400 --> 18:52.400
我们可以把它放到

18:52.400 --> 18:53.400
这

18:53.400 --> 18:56.840
把它放到这个

18:59.540 --> 19:00.540
UTO里面

19:00.540 --> 19:02.540
这里不是在玩数据吗

19:02.540 --> 19:03.540
那么我们在这里

19:03.540 --> 19:04.540
导出一个

19:07.040 --> 19:09.040
导出一个

19:09.040 --> 19:10.040
方法吧

19:10.040 --> 19:12.040
导出一个方法

19:12.040 --> 19:13.040
就field

19:13.040 --> 19:14.040
field方法

19:14.040 --> 19:17.040
你给我传递一个Vedability

19:17.040 --> 19:20.480
用显示的方式

19:20.480 --> 19:22.480
然后我给你返回

19:22.480 --> 19:23.480
结果

19:23.480 --> 19:24.480
给你返回结果

19:27.480 --> 19:28.480
好那么这边的

19:28.480 --> 19:29.480
显示方式呢

19:29.480 --> 19:30.480
你传o

19:30.480 --> 19:31.480
active

19:31.480 --> 19:33.480
还是还有completed

19:33.480 --> 19:34.480
那么这里呢

19:34.480 --> 19:36.480
我就根据不同的情况来做就行了

19:36.480 --> 19:37.480
如果说

19:37.480 --> 19:39.480
你给我传的Vedability

19:39.480 --> 19:41.480
是一个等于o

19:41.480 --> 19:43.480
然后给它个默认值

19:43.480 --> 19:46.860
默认值就是o

19:46.860 --> 19:48.860
如果是o的话

19:48.860 --> 19:49.860
那我很简单

19:49.860 --> 19:50.860
我就把那个什么返回

19:50.860 --> 19:51.860
我就

19:52.860 --> 19:53.860
还有这个toduce

19:53.860 --> 19:54.860
你把数据

19:54.860 --> 19:57.860
原来的所有的列表给我

19:57.860 --> 19:58.860
所有的数据给我

19:58.860 --> 19:59.860
然后

19:59.860 --> 20:00.860
删选方式

20:00.860 --> 20:01.860
那么我根据

20:01.860 --> 20:02.860
删选方式和所有的列表

20:02.860 --> 20:03.860
然后呢

20:03.860 --> 20:04.860
给你返回一个结果

20:04.860 --> 20:05.860
那么这里呢

20:05.860 --> 20:06.860
如果就返回toduce

20:06.860 --> 20:07.860
没什么好说的

20:08.860 --> 20:10.860
所有的情况我就返回toduce

20:10.860 --> 20:11.860
else

20:12.860 --> 20:14.860
如果说你的Vedability

20:14.860 --> 20:16.860
是等于active

20:18.860 --> 20:19.860
那么这边呢

20:19.860 --> 20:21.860
我就返回了是

20:21.860 --> 20:22.860
toduce

20:23.860 --> 20:24.860
filter

20:24.860 --> 20:28.510
对吧

20:28.510 --> 20:29.510
好这边

20:30.510 --> 20:32.510
每一个toduce里面不是一个属性吗

20:32.510 --> 20:34.510
叫做completed属性

20:34.510 --> 20:36.510
那么它表示

20:36.510 --> 20:37.510
未完成的对吧

20:37.510 --> 20:39.510
active表示未完成的任务

20:40.510 --> 20:41.510
filter一下

20:41.510 --> 20:42.510
删选一下

20:42.510 --> 20:43.510
for else

20:44.510 --> 20:45.510
if

20:46.510 --> 20:47.510
Vedability

20:47.510 --> 20:48.510
等于

20:49.510 --> 20:50.510
completed

20:52.510 --> 20:54.510
所有的未完成的

20:54.510 --> 20:55.510
已完成的

20:55.510 --> 20:56.510
那么这边呢

20:56.510 --> 20:57.510
我就返回

20:57.510 --> 20:58.510
已完成的

20:59.510 --> 21:00.510
好最终呢

21:00.510 --> 21:01.510
如果说这三种情况都不是

21:01.510 --> 21:02.510
那你说明

21:02.510 --> 21:03.510
你给我传的Vedability

21:03.510 --> 21:04.510
有问题啊

21:04.510 --> 21:05.510
我就抛出一个异常的

21:05.510 --> 21:06.510
是吧

21:06.510 --> 21:07.510
有一个

21:07.510 --> 21:08.510
toduce

21:09.510 --> 21:11.510
invalid

21:11.510 --> 21:13.510
Vedability

21:13.510 --> 21:15.510
value

21:16.510 --> 21:17.510
无效的这个

21:17.510 --> 21:18.510
这个

21:18.510 --> 21:19.510
删选的姿

21:19.510 --> 21:21.510
我们这里写个辅助函数啊

21:21.510 --> 21:22.510
然后回到这边来

21:23.510 --> 21:25.510
接下来我们要搞定一个列表了

21:25.510 --> 21:26.510
我们要根据

21:26.510 --> 21:27.510
删选方式

21:27.510 --> 21:28.510
来得到删选列表

21:29.510 --> 21:30.510
是不是删选列表

21:30.510 --> 21:31.510
它仍然是一个

21:32.510 --> 21:33.510
数据

21:33.510 --> 21:35.510
而且这个数据是根据什么变化的

21:35.510 --> 21:37.510
根据删选方式

21:37.510 --> 21:38.510
和

21:40.510 --> 21:41.510
这个玩意

21:41.510 --> 21:42.510
进行变化

21:42.510 --> 21:44.820
能想到

21:46.820 --> 21:47.820
能想到什么吗

21:48.820 --> 21:50.820
我要根据它

21:50.820 --> 21:52.820
和删选方式

21:53.820 --> 21:55.820
共同得到这个删选列表

21:55.820 --> 21:57.820
那么这个删选列表是啥呀

21:57.820 --> 21:59.820
是不是一个计算属性啊

21:59.820 --> 22:00.820
它是通过这个

22:00.820 --> 22:02.820
删选方式和这两这个东西

22:02.820 --> 22:03.820
来删出来的

22:03.820 --> 22:04.820
对吧

22:05.820 --> 22:06.820
那么

22:06.820 --> 22:07.820
我们在这里怎么来写

22:07.820 --> 22:08.820
计算属性的

22:09.820 --> 22:10.820
差不多的方式

22:11.820 --> 22:12.820
它这里提供了一个函数啊

22:12.820 --> 22:13.820
叫computed

22:14.820 --> 22:15.820
这个函数

22:15.820 --> 22:16.820
通过这个函数

22:16.820 --> 22:17.820
来得到一个计算属性

22:18.820 --> 22:19.820
好怎么弄呢

22:21.820 --> 22:22.820
computed

22:22.820 --> 22:23.820
它不要求你这些函数

22:23.820 --> 22:24.820
写到什么位置

22:24.820 --> 22:25.820
无所谓的

22:25.820 --> 22:26.820
反正这个函

22:26.820 --> 22:27.820
整个东西只运行一次

22:28.820 --> 22:29.820
里面呢你写的什么呢

22:29.820 --> 22:30.820
有两种写法

22:31.820 --> 22:33.820
一个写法呢是完整写法写个对象

22:33.820 --> 22:34.820
对象里面写getter

22:34.820 --> 22:36.820
计算属性不就是getter吗

22:36.820 --> 22:37.820
有什么set吗

22:37.820 --> 22:38.820
对吧

22:38.820 --> 22:39.820
你写这两个

22:40.820 --> 22:42.820
然后得到的结果就是一个计算属性

22:43.820 --> 22:44.820
其实个计算属性

22:44.820 --> 22:45.820
跟Ref一样

22:45.820 --> 22:46.820
仍然是包装起来的啊

22:46.820 --> 22:48.820
你可以仍然是一个对象

22:48.820 --> 22:49.820
对象里面一个value

22:49.820 --> 22:50.820
它仍然是一样的

22:51.820 --> 22:52.820
那么同样的呢

22:52.820 --> 22:54.820
也就是简化的写法呢

22:55.820 --> 22:56.820
如果说你只有get

22:56.820 --> 22:57.820
很多计算属性只有get

22:58.820 --> 22:59.820
那么你直接在这里写个函数

22:59.820 --> 23:00.820
这个函数就是get

23:01.820 --> 23:02.820
它反过来的结果

23:02.820 --> 23:03.820
注意啊

23:03.820 --> 23:04.820
它反过来的结果

23:04.820 --> 23:05.820
仍然是用Ref

23:05.820 --> 23:06.820
包装过后的

23:06.820 --> 23:08.820
它内部用Ref包装过后的

23:08.820 --> 23:10.820
所以说对于计算属性而言

23:10.820 --> 23:11.820
你还是得用Ref

23:13.820 --> 23:14.820
什么

23:14.820 --> 23:15.820
field

23:15.820 --> 23:16.820
的

23:16.820 --> 23:18.820
筛选过后的

23:18.820 --> 23:19.820
to do's

23:20.820 --> 23:22.820
加上一个后追Ref

23:23.820 --> 23:25.820
那么用计算属性好处在于

23:25.820 --> 23:26.820
它可以缓存

23:26.820 --> 23:27.820
跟以前一样啊

23:27.820 --> 23:28.820
可以缓存

23:28.820 --> 23:29.820
那它的遗难相辨的过后了

23:29.820 --> 23:30.820
它会重新计算

23:31.820 --> 23:32.820
重新计算的它的数据

23:32.820 --> 23:33.820
会自动变化

23:34.820 --> 23:35.820
好了

23:35.820 --> 23:36.820
现在呢

23:36.820 --> 23:38.820
我们找到这个计算属性啊

23:38.820 --> 23:39.820
那里面怎么写呢

23:39.820 --> 23:40.820
其实很简单

23:40.820 --> 23:41.820
就是雕用我们刚才

23:41.820 --> 23:43.820
那个写好的方法

23:45.820 --> 23:46.820
from

23:47.820 --> 23:48.820
u2

23:49.820 --> 23:50.820
to do's storage

23:50.820 --> 23:52.820
里面不是有一个factor吗

23:52.820 --> 23:53.820
对吧

23:53.820 --> 23:54.820
factor方法

23:54.820 --> 23:55.820
好那么这边

23:55.820 --> 23:56.820
我们去调一个方法

23:56.820 --> 23:57.820
factor方法

23:57.820 --> 23:59.820
这里边有一个to do's

23:59.820 --> 24:00.820
那么就通过to do's

24:00.820 --> 24:02.820
Ref里面的value传进去

24:02.820 --> 24:03.820
这个数组对吧

24:03.820 --> 24:04.820
所有的列表

24:04.820 --> 24:05.820
这个数组

24:05.820 --> 24:06.820
vizability呢

24:06.820 --> 24:07.820
就是我们这里的

24:07.820 --> 24:09.820
vizabilityRef.value

24:09.820 --> 24:10.820
传进去

24:10.820 --> 24:11.820
返回去外

24:12.820 --> 24:13.820
这就是一个

24:13.820 --> 24:15.820
通过计算得到

24:15.820 --> 24:18.820
根据当前的所有任务

24:18.820 --> 24:19.820
以及筛选方式

24:19.820 --> 24:21.820
来得到筛选过后的任务

24:21.820 --> 24:25.860
保存

24:25.860 --> 24:29.240
那么有了这个东西过后

24:29.240 --> 24:30.240
你看一下这边

24:31.240 --> 24:33.240
我在这里是不可以循环了

24:33.240 --> 24:35.240
v4循环

24:35.240 --> 24:37.240
to do in

24:37.240 --> 24:38.240
什么

24:40.240 --> 24:41.240
这边是

24:41.240 --> 24:43.240
feel to the to do's

24:43.240 --> 24:45.240
循环这个列表

24:45.240 --> 24:46.240
对吧

24:46.240 --> 24:47.240
筛选过后的列表

24:48.240 --> 24:49.240
循环错了

24:49.240 --> 24:50.240
循环错了

24:50.240 --> 24:51.240
应该在这

24:51.240 --> 24:52.240
上边

24:53.240 --> 24:54.240
这个循环

24:54.240 --> 24:55.240
对吧

24:56.240 --> 24:57.240
循环这个

24:58.240 --> 24:59.240
好

24:59.240 --> 25:00.240
每循环一次

25:00.240 --> 25:02.240
要去绑定一个key

25:02.240 --> 25:03.240
对不对

25:03.240 --> 25:04.240
绑定一个key

25:04.240 --> 25:05.240
绑定key的时候

25:05.240 --> 25:06.240
绑定什么

25:06.240 --> 25:07.240
to do的id

25:07.240 --> 25:08.240
我们不是有id吗

25:08.240 --> 25:09.240
每个认为有id

25:10.240 --> 25:11.240
好

25:11.240 --> 25:12.240
那么下面的li

25:12.240 --> 25:13.240
我就给它去掉了

25:14.240 --> 25:15.240
保存

25:15.240 --> 25:16.240
你现在看一下

25:16.240 --> 25:18.240
数量那些都是正确了

25:18.240 --> 25:20.240
咱们看一下这个application

25:20.240 --> 25:22.240
数量什么都正确了

25:22.240 --> 25:23.240
对不对

25:23.240 --> 25:24.240
一个个来

25:24.240 --> 25:26.240
现在里边的东西

25:26.240 --> 25:27.240
这里边的东西

25:27.240 --> 25:29.240
现在这些可能还做不完

25:29.240 --> 25:30.240
把这些可能做得做了

25:31.240 --> 25:33.240
其中一个有个checkbox

25:33.240 --> 25:35.240
这checkbox是啥呢

25:35.240 --> 25:36.240
就这么一个玩意

25:36.240 --> 25:37.240
就这个玩意

25:37.240 --> 25:38.240
它怎么把checkbox

25:38.240 --> 25:39.240
做成这个样子的呢

25:39.240 --> 25:40.240
简单说一下

25:40.240 --> 25:41.240
因为这个样式

25:41.240 --> 25:42.240
不是我们的重点

25:42.240 --> 25:43.240
简单说一下

25:43.240 --> 25:44.240
它这个checkbox

25:44.240 --> 25:46.240
实际上是一个

25:46.240 --> 25:47.240
opacity

25:47.240 --> 25:48.240
等于0

25:48.240 --> 25:50.240
也就是说它完全透明的

25:50.240 --> 25:51.240
你把这个勾了

25:51.240 --> 25:52.240
还有这个

25:52.240 --> 25:53.240
application

25:53.240 --> 25:54.240
啥都不显示

25:54.240 --> 25:55.240
你看

25:55.240 --> 25:56.240
无非就是个checkbox

25:57.240 --> 25:58.240
它的宽

25:58.240 --> 25:59.240
它在这

26:00.240 --> 26:02.240
现在就是

26:02.240 --> 26:03.240
把这个加上

26:03.240 --> 26:05.240
它变成这么一个尺寸的

26:06.240 --> 26:07.240
相当于是

26:07.240 --> 26:09.240
它一个透明的

26:09.240 --> 26:10.240
checkbox

26:10.240 --> 26:11.240
该在这上面的

26:11.240 --> 26:12.240
没意思吧

26:12.240 --> 26:13.240
然后呢

26:13.240 --> 26:14.240
它实际上

26:14.240 --> 26:15.240
这里看

26:15.240 --> 26:16.240
我们看到的

26:16.240 --> 26:17.240
实际上是一个背景图

26:17.240 --> 26:18.240
就是个label的背景图

26:18.240 --> 26:19.240
你看

26:19.240 --> 26:21.240
这个label

26:21.240 --> 26:22.240
它就是个背景图

26:22.240 --> 26:23.240
一个圈圈

26:23.240 --> 26:24.240
背景图是个透明的

26:24.240 --> 26:25.240
一个圈圈

26:25.240 --> 26:26.240
看到这个

26:26.240 --> 26:27.240
好

26:27.240 --> 26:28.240
你点一下过后

26:28.240 --> 26:29.240
是不是checkbox

26:29.240 --> 26:30.240
就选中了

26:30.240 --> 26:31.240
选中过后

26:31.240 --> 26:32.240
你看一下这个label

26:37.240 --> 26:38.240
这边

26:38.240 --> 26:39.240
你看

26:39.240 --> 26:40.240
选中了过后

26:40.240 --> 26:41.240
你看是不是checked

26:41.240 --> 26:42.240
如果说

26:42.240 --> 26:43.240
前面这个checkbox

26:43.240 --> 26:44.240
选中了

26:44.240 --> 26:45.240
那么它之后的label

26:45.240 --> 26:46.240
它就是另外一张背景图了

26:46.240 --> 26:47.240
你看

26:47.240 --> 26:48.240
是个勾勾

26:48.240 --> 26:49.240
非常简单

26:49.240 --> 26:50.240
大家也可以学习一下

26:50.240 --> 26:51.240
这种央视的设置方式

26:52.240 --> 26:53.240
好

26:53.240 --> 26:55.240
那么这个checkbox

26:55.240 --> 26:57.240
这个checkbox

26:57.240 --> 26:59.240
它的改变

26:59.240 --> 27:01.240
是不是会影响到

27:01.240 --> 27:03.240
当前这个to do的

27:03.240 --> 27:04.240
这个对象的

27:04.240 --> 27:05.240
什么属性

27:05.240 --> 27:07.240
completive的属性

27:07.240 --> 27:09.550
是不是会影响到

27:09.550 --> 27:10.550
这个completive的属性

27:10.550 --> 27:11.550
它选中了过后

27:11.550 --> 27:12.550
它就委屈

27:12.550 --> 27:13.550
它选中

27:13.550 --> 27:14.550
它没有选中

27:14.550 --> 27:15.550
它就委force

27:15.550 --> 27:17.550
那就也就是说

27:17.550 --> 27:18.550
这边的是什么呢

27:18.550 --> 27:20.550
vmode

27:21.550 --> 27:23.550
to do的completive

27:23.550 --> 27:25.550
就这么简单

27:25.550 --> 27:26.550
好保存

27:26.550 --> 27:27.550
你看一下

27:27.550 --> 27:35.280
没有反应

27:35.280 --> 27:39.360
再来

27:39.360 --> 27:43.020
勾选

27:43.020 --> 27:44.020
你看

27:44.020 --> 27:45.020
就变成去了

27:45.020 --> 27:46.020
第一个

27:46.020 --> 27:48.020
就变成去了

27:49.020 --> 27:50.020
force

27:50.020 --> 27:51.020
看到没

27:51.020 --> 27:52.020
对不对

27:52.020 --> 27:53.020
非常简单

27:53.020 --> 27:54.020
把这个地方做了

27:54.020 --> 27:55.020
然后这个label

27:55.020 --> 27:56.020
label里面就显示的是

27:56.020 --> 27:58.020
to do的文本

27:58.020 --> 28:00.020
to do的title

28:00.020 --> 28:01.020
对吧

28:01.020 --> 28:02.020
这个删除

28:02.020 --> 28:03.020
我们先不着急做

28:03.020 --> 28:04.020
人在这

28:04.020 --> 28:05.020
下面一个文本框

28:05.020 --> 28:06.020
文本框是做编辑的

28:06.020 --> 28:07.020
目前是隐藏的

28:07.020 --> 28:08.020
不着急做

28:08.020 --> 28:09.020
我们后边再说

28:09.020 --> 28:10.020
那么先把这个

28:10.020 --> 28:11.020
三个弄了

28:12.020 --> 28:15.100
看一下

28:15.100 --> 28:16.100
那么目前

28:16.100 --> 28:17.100
还有一个小的问题

28:17.100 --> 28:18.100
就是

28:18.100 --> 28:20.100
打了勾之后

28:20.100 --> 28:21.100
打了勾之后

28:21.100 --> 28:22.100
那么它目前

28:22.100 --> 28:23.100
它没有把它一个

28:23.100 --> 28:25.100
横杠消除的状态

28:25.100 --> 28:26.100
那么怎么来做

28:26.100 --> 28:27.100
这个横杠消除了

28:27.100 --> 28:28.100
实际上它是一个内样式

28:28.100 --> 28:30.100
在li上面有个内样式

28:30.100 --> 28:32.100
只要给它加上一个completive

28:33.100 --> 28:34.100
你看

28:34.100 --> 28:36.100
是不是自然就变成这个样式了

28:36.100 --> 28:37.100
那也就说这个li

28:37.100 --> 28:38.100
要不要加这个completive

28:38.100 --> 28:39.100
是不是取决于

28:39.100 --> 28:41.100
这个to do的状态

28:41.100 --> 28:42.100
对不对

28:42.100 --> 28:43.100
也就说它有个内样式的

28:43.100 --> 28:44.100
绑定

28:44.100 --> 28:46.790
class

28:46.790 --> 28:48.790
completed

28:48.790 --> 28:49.790
有没有这个内样式

28:49.790 --> 28:50.790
取决于什么呢

28:50.790 --> 28:52.790
这个to do的

28:52.790 --> 28:54.790
是不是completed

28:54.790 --> 28:55.790
它如果是completed

28:55.790 --> 28:56.790
那么它就有这个内样式

28:56.790 --> 28:58.790
就这么简单

28:58.790 --> 28:59.790
你看

28:59.790 --> 29:00.790
现在呢

29:00.790 --> 29:01.790
是不是出现

29:01.790 --> 29:02.790
这个样子的效果了

29:02.790 --> 29:03.790
对吧

29:03.790 --> 29:05.790
好好体会一下

29:06.790 --> 29:07.790
然后我们来看一下

29:07.790 --> 29:08.790
能不能筛选呢

29:08.790 --> 29:09.790
点击这个

29:09.790 --> 29:11.790
completed

29:11.790 --> 29:13.790
completed

29:13.790 --> 29:15.790
点这个

29:15.790 --> 29:16.790
你看

29:16.790 --> 29:17.790
是不是已经能筛选了

29:17.790 --> 29:18.790
为什么

29:18.790 --> 29:19.790
就是我们刚才这个逻辑

29:19.790 --> 29:20.790
已经打通了

29:20.790 --> 29:21.790
它细变化

29:21.790 --> 29:22.790
它改变了筛选方式

29:22.790 --> 29:24.790
而我们的筛选列表

29:24.790 --> 29:25.790
是依赖筛选方式的

29:25.790 --> 29:26.790
它的依赖相变化了

29:26.790 --> 29:27.790
它会重新计算

29:27.790 --> 29:28.790
对吧

29:28.790 --> 29:29.790
整个筛选列表

29:29.790 --> 29:30.790
会重新计算

29:30.790 --> 29:32.790
并不复杂

29:32.790 --> 29:33.790
然后还有什么问题呢

29:33.790 --> 29:35.790
还有其实还有一个

29:35.790 --> 29:36.790
两个小问题

29:36.790 --> 29:37.790
第一个小问题在这

29:39.790 --> 29:41.790
还有多少项

29:41.790 --> 29:42.790
没有完成

29:42.790 --> 29:43.790
对吧

29:43.790 --> 29:44.790
我这里是静态的东西

29:44.790 --> 29:45.790
那么这个地方

29:45.790 --> 29:46.790
应该把它变成动态

29:46.790 --> 29:48.790
还有多少项没有完成

29:48.790 --> 29:49.790
那么这个地方

29:49.790 --> 29:50.790
其实很简单

29:50.790 --> 29:51.790
我们同样的

29:51.790 --> 29:52.790
再造一个计算俗秀

29:54.790 --> 29:56.790
就是remaning

30:00.640 --> 30:01.640
还有多少

30:01.640 --> 30:02.640
没有完成的东西

30:03.640 --> 30:04.640
好

30:04.640 --> 30:05.640
那么现在

30:05.640 --> 30:06.640
我们这里

30:06.640 --> 30:07.640
还是个ref

30:07.640 --> 30:08.640
它是计算俗秀

30:10.640 --> 30:11.640
它的值是什么呢

30:12.640 --> 30:13.640
其实就是

30:15.640 --> 30:16.640
这个很好很简单

30:16.640 --> 30:18.640
to do is ref.value

30:18.640 --> 30:20.640
在所有的任务当中

30:21.640 --> 30:23.640
我们还未完成的

30:23.640 --> 30:24.640
就是active 状态的

30:25.640 --> 30:26.640
对吧

30:26.640 --> 30:27.640
正在运行的任务

30:27.640 --> 30:28.640
正在执行的任务

30:28.640 --> 30:29.640
那么这些任务

30:29.640 --> 30:30.640
点nance

30:30.640 --> 30:31.640
不是它的数量吗

30:33.640 --> 30:34.640
扔回去

30:34.640 --> 30:35.640
它也是个计算俗秀

30:35.640 --> 30:36.640
这个玩意一遍

30:36.640 --> 30:37.640
或者是

30:37.640 --> 30:38.640
这个东西当然不会一遍

30:38.640 --> 30:39.640
就这个东西一遍

30:39.640 --> 30:40.640
那么它会重新计算

30:41.640 --> 30:42.640
好

30:42.640 --> 30:43.640
那么现在呢

30:43.640 --> 30:44.640
我们在这边

30:44.640 --> 30:45.640
这个位置

30:45.640 --> 30:46.640
就可以写上

30:46.640 --> 30:49.530
这个

30:49.530 --> 30:50.530
保存

30:50.530 --> 30:51.530
你看

30:51.530 --> 30:52.530
目前还有四个

30:52.530 --> 30:53.530
你完成一个

30:53.530 --> 30:54.530
是不是还有三个

30:54.530 --> 30:55.530
再完成一个

30:55.530 --> 30:56.530
再完成一个

30:56.530 --> 30:57.530
是不是一个

30:57.530 --> 30:58.530
这样子是不是没了

30:58.530 --> 30:59.530
对不对

30:59.530 --> 31:00.530
好

31:00.530 --> 31:01.530
那么现在

31:01.530 --> 31:02.530
还有个很小很小的问题

31:02.530 --> 31:03.530
就是这个

31:03.530 --> 31:04.530
那么这个玩意呢

31:04.530 --> 31:06.530
它到底要不要加 s

31:06.530 --> 31:07.530
对吧

31:07.530 --> 31:08.530
我们把这些细节弄一下

31:08.530 --> 31:10.530
到底要不要加 s

31:10.530 --> 31:11.530
是不是一个复数形态

31:11.530 --> 31:12.530
要这个玩意呢

31:12.530 --> 31:13.530
也是可以计算出来的

31:13.530 --> 31:14.530
如果说目前

31:14.530 --> 31:15.530
只有一个任务

31:15.530 --> 31:16.530
没有完成

31:17.530 --> 31:18.530
那么它就是单数形态

31:19.530 --> 31:20.530
否则的话

31:20.530 --> 31:21.530
它就是复数形态

31:21.530 --> 31:22.530
这个玩意呢

31:22.530 --> 31:23.530
我们其实

31:23.530 --> 31:24.530
可以在这里

31:24.530 --> 31:25.530
用三目运算俯

31:25.530 --> 31:26.530
都可以

31:26.530 --> 31:27.530
这个地方

31:28.530 --> 31:29.530
这个地方

31:29.530 --> 31:31.530
我们就是 remain

31:31.530 --> 31:32.530
是不是

31:33.530 --> 31:35.530
不等于

31:35.530 --> 31:37.530
等于一

31:37.530 --> 31:39.530
等于一的话

31:39.530 --> 31:40.530
那么就是空置五串

31:40.530 --> 31:42.530
否则的话就是

31:42.530 --> 31:43.530
加个 s

31:43.530 --> 31:44.530
对吧

31:44.530 --> 31:45.530
后面就是

31:45.530 --> 31:46.530
后面要不要加 s

31:46.530 --> 31:47.530
要写上这么一个东西

31:47.530 --> 31:49.530
保存

31:49.530 --> 31:50.530
一看一个

31:50.530 --> 31:51.530
它就没有

31:51.530 --> 31:52.530
两个它就有

31:52.530 --> 31:54.530
零个它也有

31:54.530 --> 31:55.530
对吧

31:55.530 --> 31:56.530
这是符合这个

31:56.530 --> 31:57.530
单复数形式

31:58.530 --> 31:59.530
好了

31:59.530 --> 32:00.530
还有啥呢

32:00.530 --> 32:01.530
也就没啥了

32:01.530 --> 32:02.530
也就没啥

32:02.530 --> 32:03.530
这个

32:03.530 --> 32:04.530
其实还有一个这个

32:04.530 --> 32:06.530
这里有个按钮

32:06.530 --> 32:07.530
这个按钮

32:07.530 --> 32:08.530
到底要不要显示

32:08.530 --> 32:09.530
就是这个按钮

32:09.530 --> 32:11.530
如果说不显示的话

32:13.530 --> 32:14.530
显示的话

32:14.530 --> 32:15.530
它就是这个

32:15.530 --> 32:17.530
清空所有已完成的

32:17.530 --> 32:18.530
就把所有已完成的东西

32:18.530 --> 32:19.530
删掉

32:19.530 --> 32:20.530
删除我们现在不做

32:20.530 --> 32:22.530
不是我们这几颗的范围

32:22.530 --> 32:23.530
就是我们用了

32:23.530 --> 32:25.530
comparation API之后

32:25.530 --> 32:27.530
每一个

32:27.530 --> 32:28.530
功能点

32:28.530 --> 32:29.530
就说那个功能点

32:29.530 --> 32:30.530
相关的

32:30.530 --> 32:31.530
就把一些复杂逐渐

32:32.530 --> 32:33.530
那么这个

32:33.530 --> 32:34.530
我们现在只关系

32:34.530 --> 32:35.530
这个东西

32:35.530 --> 32:36.530
要不要显示的问题

32:36.530 --> 32:37.530
那他到底

32:37.530 --> 32:38.530
要不要显示呢

32:38.530 --> 32:39.530
取决于什么呢

32:39.530 --> 32:41.530
有没有完成的

32:41.530 --> 32:42.530
所以一个完成都没有

32:42.530 --> 32:43.530
它显示啥

32:43.530 --> 32:44.530
这显示也没有意义

32:44.530 --> 32:45.530
对吧

32:45.530 --> 32:46.530
我们要清空已完成的嘛

32:46.530 --> 32:47.530
所以说呢

32:47.530 --> 32:49.530
这个地方呢

32:49.530 --> 32:50.530
我们要得到的是

32:50.530 --> 32:52.530
到底有没有完成的

32:52.530 --> 32:54.530
到这么一个东西

32:54.530 --> 32:55.530
好来

32:55.530 --> 32:56.530
我们这里是不是

32:56.530 --> 32:57.530
又可以写一个

32:57.530 --> 32:58.530
计算属性

32:58.530 --> 32:59.530
在这里

32:59.530 --> 33:01.530
其实我们就可以

33:01.530 --> 33:02.530
这里不用认识了

33:02.530 --> 33:03.530
不用认识

33:03.530 --> 33:05.530
就表示所有

33:05.530 --> 33:06.530
对

33:06.530 --> 33:08.530
还有一个Completed

33:08.530 --> 33:11.530
CompletedRef

33:11.530 --> 33:18.300
再来一个计算属性

33:18.300 --> 33:19.300
复制一下

33:19.300 --> 33:27.220
CompletedRef

33:27.220 --> 33:29.220
这边

33:29.220 --> 33:31.220
就是Completed

33:31.220 --> 33:32.220
表示我目前

33:32.220 --> 33:34.220
已经完成的数量

33:34.220 --> 33:35.220
有多少

33:35.220 --> 33:36.220
对吧

33:36.220 --> 33:37.220
把这东西扔出去

33:37.220 --> 33:38.220
好了那么这边

33:38.220 --> 33:40.220
我们可以得到

33:40.220 --> 33:42.220
在这

33:42.220 --> 33:43.220
V秀

33:43.220 --> 33:45.220
它要不要显示呢

33:45.220 --> 33:48.220
取决于CompletedRef

33:48.220 --> 33:50.220
它的值

33:50.220 --> 33:52.220
是不是大于0的

33:52.220 --> 33:53.220
大于0它就显示

33:53.220 --> 33:55.220
等于0它就不显示

33:55.220 --> 33:56.220
对吧

33:56.220 --> 33:57.220
给大家加上这个

33:57.220 --> 33:59.220
好 刷新

33:59.220 --> 34:00.220
没有显示对吧

34:00.220 --> 34:01.220
然后我们完成

34:01.220 --> 34:03.220
是不是有显示的

34:03.220 --> 34:04.220
完成有显示的

34:04.220 --> 34:05.220
如果说

34:05.220 --> 34:06.220
没有完成的

34:06.220 --> 34:07.220
它就不显示

34:08.220 --> 34:09.220
OK

34:09.220 --> 34:11.220
目前我们搞定了哪些了

34:11.220 --> 34:13.220
搞定了所有跟筛选相关的

34:13.220 --> 34:14.220
你看这些玩意

34:14.220 --> 34:16.220
是不是都是跟筛选相关的

34:16.220 --> 34:17.220
我们介面上

34:17.220 --> 34:19.220
凡是跟筛选相关

34:19.220 --> 34:20.220
要用到的东西

34:20.220 --> 34:22.220
我们在这个EOS Filter里边

34:22.220 --> 34:24.220
就全部给它聚合好了

34:24.220 --> 34:25.220
包括生命周期

34:25.220 --> 34:26.220
包括事件

34:26.220 --> 34:27.220
然后我们把你需要的东西

34:27.220 --> 34:28.220
给你返回

34:28.220 --> 34:29.220
这样子

34:29.220 --> 34:30.220
在我们的组建内部

34:30.220 --> 34:32.220
用起来就非常方便了

34:32.220 --> 34:33.220
我们只需要

34:33.220 --> 34:34.220
你要

34:34.220 --> 34:36.220
我们要用到哪些东西

34:36.220 --> 34:37.220
你给我就行了

34:37.220 --> 34:39.220
其他的你具体怎么处理的

34:39.220 --> 34:40.220
我完全不用管

34:40.220 --> 34:41.220
对吧

34:41.220 --> 34:42.220
这样的聚合的思维

34:42.220 --> 34:44.220
是不是有应用到

34:44.220 --> 34:45.220
completion API

34:46.220 --> 34:47.220
OK

34:47.220 --> 34:48.220
那么大家跟着做一下

34:48.220 --> 34:50.220
这一块东西有点多

34:50.220 --> 34:51.220
好好去照一照

34:51.220 --> 34:53.220
通过这个入门案例

34:53.220 --> 34:54.220
希望大家对这个

34:54.220 --> 34:56.220
completion API的这种做法

34:56.220 --> 34:57.220
要有所体会

34:57.220 --> 34:58.220
好了

34:58.220 --> 34:59.220
大家去把它完成

