WEBVTT

00:00.050 --> 00:03.050
目前呢 伍佑3已经出来了

00:03.050 --> 00:05.650
所以同学们呢 学了伍佑2之后呢

00:05.650 --> 00:08.650
需要花一点时间 把伍佑3看一下啊

00:08.650 --> 00:12.050
那有人要说 既然伍佑3出来了

00:12.050 --> 00:14.250
干嘛我就不直接学伍佑3

00:14.250 --> 00:16.650
我还要去学这个伍佑2呢

00:16.650 --> 00:19.050
是因为啊 伍佑3啊

00:19.050 --> 00:21.850
它不是一个兼容性的升级

00:21.850 --> 00:23.250
它大部分是兼容

00:23.250 --> 00:25.450
但是呢 有些地方是不兼容的

00:25.450 --> 00:29.850
也就是说呢 你如果说过去使用的是伍佑2做开发的话

00:29.850 --> 00:32.850
那么过去的项目 也要升级到伍佑3

00:32.850 --> 00:34.850
是需要花一点成本的啊

00:34.850 --> 00:37.850
成本不是说钱啊 是说的是时间

00:37.850 --> 00:39.850
那么在一些公司里边

00:39.850 --> 00:42.850
以前很多项目都是用伍佑2做的

00:42.850 --> 00:44.850
那么在一段相当长的时间内呢

00:44.850 --> 00:48.850
那么这些项目呢 要升级到伍佑3 是需要一个过程的

00:48.850 --> 00:51.850
而且呢 有些公司呢 是没有动力去升这个级的

00:51.850 --> 00:54.850
大家呢 也要有这么一个概念

00:54.850 --> 00:57.850
就说咱们的技术呢 不是说越新越好

00:57.850 --> 01:00.850
如果说紧从技术层面来说的话

01:00.850 --> 01:02.850
大部分技术呢 确实是越新越好

01:02.850 --> 01:05.850
但是呢 在公司的具体的操作过程中

01:05.850 --> 01:08.850
它会遇到一些麻烦的问题

01:08.850 --> 01:10.850
比方说举个例子啊 像以前的京东

01:10.850 --> 01:12.850
京东是用什么开发的呢

01:12.850 --> 01:14.850
以前是用Doret开发的

01:14.850 --> 01:17.850
那么后来呢 发现了这个伏气环境呢

01:17.850 --> 01:20.850
已经不太适合这门技术了

01:20.850 --> 01:22.850
但是它花了很长很长的时间

01:22.850 --> 01:23.850
慢慢升级到家了

01:23.850 --> 01:25.850
那么到现在为止呢

01:25.850 --> 01:28.850
还有部分的功能是使用的是原来Doret的技术

01:28.850 --> 01:31.850
说这个升级啊 是一个比较漫长的过程

01:31.850 --> 01:33.850
特别是在大公司 大项目里边

01:33.850 --> 01:35.850
你要去完成整个项目的升级

01:35.850 --> 01:37.850
成本是非常非常高的

01:37.850 --> 01:39.850
所以有些公司呢 它是没有这个动力的

01:39.850 --> 01:42.850
因为它觉得原来的项目呢 虽然说

01:42.850 --> 01:45.850
没有新的项目呢 有这些

01:45.850 --> 01:48.850
新的改进 没有新的项目这些改进

01:48.850 --> 01:51.850
但是呢 过去的项目仍然能用

01:51.850 --> 01:53.850
而且呢 效果我们做的优化呢 也不错

01:53.850 --> 01:55.850
所以说它没有这个强大的动力去升级

01:55.850 --> 01:56.850
也那意思吧

01:56.850 --> 01:58.850
只有到了公司 只有到了那种

01:58.850 --> 02:00.850
没办法的时候

02:00.850 --> 02:01.850
迫不得已的时候

02:01.850 --> 02:04.850
它才会愿意去花这个成本去升级

02:04.850 --> 02:06.850
大部分情况是这个样子的

02:06.850 --> 02:07.850
这是一个原因啊

02:07.850 --> 02:10.850
所以说5月2 5月3还会长时间的共存

02:10.850 --> 02:12.850
这是一个原因 还有第二个原因呢

02:12.850 --> 02:14.850
就是5月3升级到过后呢

02:14.850 --> 02:16.850
它有一些生态需要建立

02:16.850 --> 02:19.850
比方说我们之前在5月2里面

02:19.850 --> 02:21.850
用到了那个组建库

02:21.850 --> 02:23.850
在5月3里面就不能用了

02:23.850 --> 02:25.850
那么后边有没有什么新的组建库

02:25.850 --> 02:28.850
去支持5月3 那么我们还要拭目以待

02:28.850 --> 02:30.850
它的生态建立也需要一段时间

02:30.850 --> 02:32.850
因此在至少一年吧

02:32.850 --> 02:34.850
在过程至少一年

02:34.850 --> 02:36.850
多的话可能就成两三年了

02:36.850 --> 02:37.850
甚至一年以后

02:37.850 --> 02:40.850
可能还会遇到一些公司还在用5月1

02:40.850 --> 02:42.850
因此这个情况就这么个情况

02:42.850 --> 02:45.850
就是说5月2跟5月3还会长期的共存

02:45.850 --> 02:47.850
这个大家要有一个心理准备

02:47.850 --> 02:49.850
所以说我们在学习的时候呢

02:49.850 --> 02:51.850
5月2肯定要学的 跑不掉的

02:51.850 --> 02:53.850
然后5月3也要学习

02:53.850 --> 02:55.850
那么其实5月2里学习到过后

02:55.850 --> 02:57.850
学习5月3其实蛮快的

02:57.850 --> 02:59.850
花不了多少时间

02:59.850 --> 03:01.850
可能花下来的话一共就

03:01.850 --> 03:03.850
如果说入门阶段的话

03:03.850 --> 03:05.850
那么可能一天就完了

03:05.850 --> 03:07.850
进阶 就是就业部分的

03:07.850 --> 03:09.850
可能要花个两三天

03:09.850 --> 03:11.850
时间也就差不多结束了

03:11.850 --> 03:13.850
没有那么多东西的

03:13.850 --> 03:15.850
好 然后这里面呢

03:15.850 --> 03:17.850
我们入门这一块讲什么呢

03:18.850 --> 03:20.850
我们要学习5月3

03:20.850 --> 03:23.850
我们讲5月3里面最重要的一个变动

03:23.850 --> 03:25.850
就是

03:25.850 --> 03:31.400
comparation API

03:31.400 --> 03:33.400
都是5月3里面

03:33.400 --> 03:35.400
最激动人心的变动

03:35.400 --> 03:37.400
那么这个有点类似于

03:37.400 --> 03:39.400
什么呢 类似于reacted hooks

03:39.400 --> 03:41.400
有点类似

03:41.400 --> 03:43.400
但是实现方式是完全不一样的

03:43.400 --> 03:45.400
而且使用的体验

03:45.400 --> 03:47.400
也是完全不一样的

03:47.400 --> 03:49.400
那么这个谁好谁坏呢

03:49.400 --> 03:51.400
各说分运

03:51.400 --> 03:53.400
我个人觉得呢

03:53.400 --> 03:55.400
维尤山的comparation API

03:55.400 --> 03:57.400
是比reacted hooks要好用一些

03:57.400 --> 03:59.400
这就是大概怎么的情况

03:59.400 --> 04:01.400
我们在入门阶段

04:01.400 --> 04:03.400
主要是学习这个

04:03.400 --> 04:05.400
那么具体的学习方式呢

04:05.400 --> 04:07.400
我们使用的方式是这样子

04:07.400 --> 04:09.400
就是咱们用一个案例

04:09.400 --> 04:11.400
把它贯穿起来

04:11.400 --> 04:13.400
我们把这个案例完成了之后

04:13.400 --> 04:15.400
差不多你对comparation API

04:15.400 --> 04:17.400
就至少在使用层面

04:17.400 --> 04:19.400
我们的案例在这个文件夹里边

04:19.400 --> 04:21.400
这个文件夹里边有两个文件夹

04:21.400 --> 04:23.400
这两个文件夹呢

04:23.400 --> 04:25.400
都是完全一模一样的案例

04:25.400 --> 04:27.400
只是两种实现方式

04:27.400 --> 04:29.400
一个是用维尤山的comparation

04:29.400 --> 04:31.400
API实现的

04:31.400 --> 04:33.400
另外一个呢 其实也用的是维尤山

04:33.400 --> 04:35.400
不过呢 它的鞋跟维尤是一样的

04:35.400 --> 04:37.400
你用维尤山的效果也完全相同

04:37.400 --> 04:39.400
并没有什么区别

04:39.400 --> 04:41.400
就是用传统的方式

04:41.400 --> 04:43.400
和用新的方式来实现

04:43.400 --> 04:45.400
两个效果是完全一样的

04:45.400 --> 04:47.400
就是找它嘛 点击右键

04:47.400 --> 04:49.400
综装中打开

04:49.400 --> 04:51.400
当然你要先安装一代

04:51.400 --> 04:53.400
这里的npm装 队伍

04:53.400 --> 04:55.400
使用这个命令 因为你看一下这个拍景的阶盛

04:55.400 --> 04:57.400
是个队伍命令

04:57.400 --> 04:59.400
队伍命令呢就启动一个开发服务器

04:59.400 --> 05:01.400
如果说你要打包的话

05:01.400 --> 05:03.400
就使用beaut

05:03.400 --> 05:07.160
没了意思吧 我们就用队伍

05:07.160 --> 05:10.730
运行出来

05:10.730 --> 05:12.730
这就是一个todos这么一个效果

05:12.730 --> 05:14.730
虽然说这个效果呢很小

05:14.730 --> 05:16.730
就是很多的新的技术

05:16.730 --> 05:18.730
它的练习项目

05:18.730 --> 05:20.730
我们一般都会用这个todos

05:20.730 --> 05:22.730
这个todos呢 项目虽然小的是里边

05:22.730 --> 05:24.730
基本上的大部分

05:24.730 --> 05:26.730
我们常用的功能都包含进去了

05:26.730 --> 05:28.730
比方说我们这里新建一个

05:28.730 --> 05:30.730
新建一个什么 开会

05:30.730 --> 05:32.730
好 又回车

05:32.730 --> 05:34.730
那么这就加了一个新的

05:34.730 --> 05:36.730
清单

05:36.730 --> 05:38.730
我们要做的事情的清单

05:38.730 --> 05:40.730
那么如果说你完成了

05:40.730 --> 05:42.730
你就这里勾选一下

05:42.730 --> 05:44.730
表示完成了

05:44.730 --> 05:46.730
那么几个选项 就是所有的任务

05:46.730 --> 05:48.730
这边显示的是

05:48.730 --> 05:50.730
还剩几个任务

05:50.730 --> 05:52.730
目前还有剩几个任务没完成

05:52.730 --> 05:54.730
还有4个任务没完成

05:54.730 --> 05:56.730
这里有个active

05:56.730 --> 05:58.730
那么表示的是任务已经

05:58.730 --> 06:00.730
正在进行时的任务

06:00.730 --> 06:02.730
表示还没有完成的任务

06:02.730 --> 06:04.730
点击一下 它就进行一下筛选

06:04.730 --> 06:06.730
那么这个表示的是complete

06:06.730 --> 06:08.730
表示的是已经完成的任务

06:08.730 --> 06:10.730
那么这个东西呢

06:10.730 --> 06:12.730
表示的是清空

06:12.730 --> 06:14.730
目前已完成的任务

06:14.730 --> 06:16.730
就把已完成的任务删除掉

06:16.730 --> 06:18.730
点击一下就删除掉了

06:18.730 --> 06:20.730
就这么简单

06:20.730 --> 06:22.730
那么点这个是可以完成所有的任务

06:22.730 --> 06:24.730
再点一下就取消完成所有的任务

06:24.730 --> 06:26.730
就这么简单 点这个就是

06:26.730 --> 06:28.730
可以删除一个任务

06:28.730 --> 06:30.730
就这么一个基本功了

06:30.730 --> 06:32.730
其实看上去还是

06:32.730 --> 06:34.730
该有的都有对吧

06:34.730 --> 06:36.730
麻粹碎小 武藏俱全

06:36.730 --> 06:38.730
这个效果其实也是

06:38.730 --> 06:40.730
五幼官方提供的一个暗地

06:40.730 --> 06:42.730
一个势力

06:42.730 --> 06:44.730
那么咱们入门阶段

06:44.730 --> 06:46.730
就把这个势力完成给它做一遍

06:46.730 --> 06:48.730
做一遍之后 大家主要是让大家

06:48.730 --> 06:50.730
体会一下五幼三立表的complete API

06:50.730 --> 06:52.730
对给我们的开发带来的变动

06:52.730 --> 06:54.730
好吧

06:54.730 --> 06:56.730
那么这些可能我们做一件事就行了

06:56.730 --> 06:58.730
这些可能我们的任务就是搭建工程

06:58.730 --> 07:00.730
来吧 搭建工程

07:00.730 --> 07:02.730
在五幼三立表的搭建工程

07:02.730 --> 07:04.730
有两种方式 其实有很多的方式

07:04.730 --> 07:06.730
那么其他我们真实开发项目里边

07:06.730 --> 07:08.730
不会用到的方式

07:08.730 --> 07:10.730
包括直接引用一个五幼介石

07:10.730 --> 07:12.730
对吧 在页面上直接引用一个五幼介石

07:12.730 --> 07:14.730
这种方式我们就不讨论了

07:14.730 --> 07:16.730
就是我们用较受搭建工程的话

07:16.730 --> 07:18.730
一般来说有两种方式

07:18.730 --> 07:20.730
第一种方式就是用

07:20.730 --> 07:22.730
传统的五幼CD

07:22.730 --> 07:26.680
可以吧

07:26.680 --> 07:28.680
五幼CD 就是用这个

07:28.680 --> 07:30.680
当然你首先来安装一下

07:30.680 --> 07:32.680
你需要把五幼CD升级到最新版本

07:32.680 --> 07:34.680
那么升级到最新版本之后

07:34.680 --> 07:36.680
你使用全聚API

07:36.680 --> 07:38.680
五幼CREATE 比方说我们这里

07:39.680 --> 07:41.680
五幼3

07:42.680 --> 07:44.680
表示用五幼CD建的

07:44.680 --> 07:46.680
创建了一个五幼3工程

07:46.680 --> 07:48.680
我们来创建一个

07:48.680 --> 07:50.680
回车的时候他就会问你

07:50.680 --> 07:52.680
创建工程的一些导航

07:54.680 --> 07:56.680
默认的就是五幼2

07:56.680 --> 07:58.680
还有就是用五幼3

07:58.680 --> 08:00.680
那也可以自己手动选择

08:00.680 --> 08:02.680
比方我们手动选择吧

08:02.680 --> 08:04.680
手动选择的时候要把第一个勾选上

08:04.680 --> 08:06.680
表示Choose五幼Virtual

08:06.680 --> 08:08.680
选择五幼的版本

08:08.680 --> 08:10.680
后边的东西没什么好说的了

08:10.680 --> 08:12.680
我们把这些东西都去掉吧

08:12.680 --> 08:14.680
背部加上

08:14.680 --> 08:16.680
回车

08:16.680 --> 08:18.680
他问你选择五幼哪个版本

08:18.680 --> 08:20.680
选择三这个版本

08:20.680 --> 08:22.680
配置文件到一个单独的文件

08:22.680 --> 08:24.680
跟过去差不多的

08:24.680 --> 08:26.680
要不要保存预设不用保存

08:26.680 --> 08:28.680
创建就行了

08:28.680 --> 08:30.680
这就是五幼CD来搭建工程

08:30.680 --> 08:32.680
搭建的就是一个五幼3的工程

08:32.680 --> 08:34.680
他使用的是五幼3

08:35.680 --> 08:40.400
让他搭建一下吧

08:40.400 --> 08:42.400
那么让他等了

08:42.400 --> 08:44.400
我们这里总在打开一个新的双口

08:44.400 --> 08:46.400
这里我说一下

08:46.400 --> 08:48.400
另外一种方式

08:48.400 --> 08:50.400
就是由于他在

08:50.400 --> 08:52.400
更新了这个五幼CD之后

08:52.400 --> 08:54.400
他其实还专门

08:54.400 --> 08:56.400
做了一个角色加

08:56.400 --> 08:58.400
那个角色加

08:58.400 --> 09:00.400
不仅可以搭建五幼工程

09:00.400 --> 09:02.400
还可以搭建React

09:02.400 --> 09:04.400
还可以搭建其他多叶应用程序

09:04.400 --> 09:06.400
他搞了一个构建工具出来

09:06.400 --> 09:08.400
那么那个构建工具

09:08.400 --> 09:10.400
叫做Vit

09:10.400 --> 09:12.400
这个玩意儿挺有意思的

09:12.400 --> 09:14.400
它的速度

09:14.400 --> 09:16.400
要比过去的Vitpack

09:16.400 --> 09:18.400
要快得多

09:18.400 --> 09:20.400
快得多得多

09:20.400 --> 09:22.400
我们以后就可以体验一下

09:22.400 --> 09:24.400
你看这个安逸里面

09:24.400 --> 09:26.400
我就是用Vit搭建的工程

09:26.400 --> 09:28.400
我觉得这个玩意儿

09:28.400 --> 09:30.400
是一个巨大的进步

09:30.400 --> 09:32.400
对于我们传统的构建工具来说

09:32.400 --> 09:33.400
据它的原理

09:33.400 --> 09:35.400
它的实现方式是什么样子的

09:35.400 --> 09:37.400
我们在就业部分再慢慢去说

09:37.400 --> 09:39.400
我们这里只是关心它如何使用一下

09:39.400 --> 09:41.400
使用就够了

09:41.400 --> 09:43.400
那咱们来

09:43.400 --> 09:44.400
这边

09:44.400 --> 09:45.400
刚才一个五幼CD

09:45.400 --> 09:46.400
已经答应出来了

09:46.400 --> 09:48.400
做法还是一样

09:48.400 --> 09:50.400
进入这个五幼3

09:50.400 --> 09:53.400
然后我们NPM装设

09:53.400 --> 09:54.400
跟过去是一样的

09:54.400 --> 09:55.400
你只不过你看一下

09:55.400 --> 09:56.400
它的依赖

09:56.400 --> 09:57.400
依赖用的是什么依赖的

09:57.400 --> 09:58.400
3.0这个依赖

09:58.400 --> 10:00.400
用的就不是2.0了

10:01.400 --> 10:03.400
我们这里装一下

10:03.400 --> 10:04.400
过去的五幼CD里面

10:04.400 --> 10:06.400
内部还是使用的是VIP

10:06.400 --> 10:08.400
来进行搭建工程的

10:08.400 --> 10:09.400
出来了

10:09.400 --> 10:10.400
跟过去一样

10:10.400 --> 10:11.400
你看

10:11.400 --> 10:13.400
是不是跟过去是一样的

10:13.400 --> 10:14.400
对吧

10:14.400 --> 10:16.400
不过它换成了五幼3了

10:16.400 --> 10:18.400
然后除了用五幼CD

10:18.400 --> 10:19.400
搭建工程之外

10:19.400 --> 10:21.400
尤其还专门

10:21.400 --> 10:23.400
做了一个新的角色加出来

10:23.400 --> 10:25.400
它为什么要做一个新的角色加呢

10:25.400 --> 10:26.400
是因为它觉得

10:26.400 --> 10:28.400
过去的五幼CD里面

10:28.400 --> 10:29.400
内部是使用的是什么

10:29.400 --> 10:32.400
内部使用的是VIP

10:32.400 --> 10:33.400
对不对

10:33.400 --> 10:34.400
它觉得VIP

10:34.400 --> 10:35.400
做一个

10:35.400 --> 10:38.400
构建工具的效率太低了

10:38.400 --> 10:39.400
倒不是说

10:39.400 --> 10:40.400
它打包的效率低

10:42.400 --> 10:45.400
不是说它打包结过的效率低

10:45.400 --> 10:46.400
指的是

10:46.400 --> 10:48.400
它打包过程太慢了

10:48.400 --> 10:49.400
大家有没有发现

10:49.400 --> 10:50.400
我们再来看一下

10:50.400 --> 10:54.030
我们现在是一个

10:54.030 --> 10:55.030
原始的项目

10:55.030 --> 10:56.030
最初的项目

10:56.030 --> 10:57.030
什么都没有

10:57.030 --> 10:59.030
就一个Hello World的逐渐

10:59.030 --> 11:01.030
那么我们这里运行一下

11:01.030 --> 11:02.030
它是不是要打包

11:02.030 --> 11:04.030
在开发阶段要打包

11:05.030 --> 11:06.030
你看

11:06.030 --> 11:07.030
是不是要等半天

11:07.030 --> 11:08.030
然后构建

11:08.030 --> 11:09.030
通过VIP拍个构建

11:09.030 --> 11:10.030
然后打包完成

11:10.030 --> 11:11.030
然后启动开发服务器

11:11.030 --> 11:12.030
那么这个过程

11:12.030 --> 11:14.030
由于觉得太慢了

11:15.030 --> 11:17.030
如果说你在公司里面开发的是

11:17.030 --> 11:19.030
一个大雄项目的话

11:19.030 --> 11:21.030
它的组建非常非常多

11:21.030 --> 11:23.030
成百上千的组建

11:23.030 --> 11:25.030
有些同学都给我反应

11:25.030 --> 11:26.030
那VIP拍个太慢了

11:26.030 --> 11:28.030
每一次改动一块代码

11:28.030 --> 11:29.030
重新每天闹公司

11:29.030 --> 11:32.030
要去运行一个NPM装设物命令

11:32.030 --> 11:34.030
它可能要等上几分钟

11:34.030 --> 11:35.030
就这么夸张

11:35.030 --> 11:36.030
所以有些公司

11:36.030 --> 11:38.030
他们到了公司地件上

11:38.030 --> 11:40.030
先运行一下NPM装设物

11:40.030 --> 11:41.030
然后去开会

11:41.030 --> 11:42.030
开完会过后

11:42.030 --> 11:43.030
它打包好了

11:43.030 --> 11:45.030
然后改动一次代码

11:45.030 --> 11:46.030
它不是有热替换吗

11:46.030 --> 11:47.030
对不对

11:47.030 --> 11:48.030
它改动一次代码过后

11:48.030 --> 11:49.030
不好意思

11:49.030 --> 11:53.970
我把这里关一下

11:53.970 --> 11:55.970
空气进化金的声音

11:57.970 --> 11:58.970
改动一次代码过后

11:58.970 --> 11:59.970
不是有热更新吗

11:59.970 --> 12:00.970
热更新也很慢

12:00.970 --> 12:01.970
可能要十几秒

12:01.970 --> 12:03.970
然后一面才有反应

12:03.970 --> 12:06.970
所以说这个VIP拍可能太慢了

12:06.970 --> 12:08.970
那么目前也没有什么好的方式

12:08.970 --> 12:11.970
于是大神干脆自己搞

12:11.970 --> 12:13.970
与他搞出一个新的构建工具

12:13.970 --> 12:14.970
叫做VIT

12:14.970 --> 12:17.970
VIT它是一个构建工具

12:17.970 --> 12:18.970
它是个构建工具

12:18.970 --> 12:20.970
它还不仅仅是个教授家

12:20.970 --> 12:22.970
构建工具

12:22.970 --> 12:24.970
就类似于VIP拍这种

12:24.970 --> 12:26.970
但它原理跟VIP拍完全不一样

12:26.970 --> 12:28.970
它的速度就会快很多很多

12:29.970 --> 12:30.970
那么至于它速度

12:30.970 --> 12:32.970
为什么快这么多

12:32.970 --> 12:33.970
然后呢

12:33.970 --> 12:36.970
它用什么方式来处理的

12:36.970 --> 12:38.970
那么我们在就业课程里面

12:38.970 --> 12:39.970
再慢慢去讲

12:39.970 --> 12:40.970
讲它的原理

12:40.970 --> 12:42.970
我们这里就去体验一下

12:42.970 --> 12:43.970
VIT怎么来用就行了

12:43.970 --> 12:45.970
我们这里看到

12:45.970 --> 12:46.970
看这

12:46.970 --> 12:47.970
我们怎么使用呢

12:47.970 --> 12:48.970
我们可以使用

12:48.970 --> 12:50.970
NPM Inlet这个命令

12:50.970 --> 12:52.970
临时的下载这个

12:52.970 --> 12:54.970
脚手加工具叫做VIP

12:54.970 --> 12:55.970
VIT AG

12:55.970 --> 12:56.970
这是个法语

12:56.970 --> 12:59.970
名字叫意识就是快的意识

12:59.970 --> 13:01.970
临时去下载这个工具

13:01.970 --> 13:03.970
让它去搭建我们的工程

13:03.970 --> 13:04.970
工程的名字那里

13:04.970 --> 13:05.970
后边取一个名字

13:05.970 --> 13:06.970
比如说5U3

13:06.970 --> 13:09.970
这个是用VIT大件的

13:09.970 --> 13:12.970
我们取这么一个工程名字

13:12.970 --> 13:14.970
这是角色下工具

13:14.970 --> 13:15.970
那么这个Inlet命令

13:15.970 --> 13:16.970
它会把它下载下来

13:16.970 --> 13:17.970
然后呢

13:17.970 --> 13:19.970
通过它去搭建我们的工程

13:19.970 --> 13:20.970
搭建完了过后呢

13:20.970 --> 13:21.970
它会自动的

13:21.970 --> 13:23.970
把这个东西给它卸载掉

13:23.970 --> 13:24.970
这样保证了

13:24.970 --> 13:25.970
每一式运行这个命令

13:25.970 --> 13:27.970
都使用的是最新的VIT

13:27.970 --> 13:28.970
来搭建工程

13:28.970 --> 13:30.970
它不是选举安装

13:30.970 --> 13:31.970
可以选举安装

13:31.970 --> 13:32.970
但是没必要

13:32.970 --> 13:34.970
好 这里我们回车看一下

13:34.970 --> 13:36.970
好 首先安装

13:36.970 --> 13:37.970
安装也很快

13:37.970 --> 13:38.970
然后呢

13:38.970 --> 13:39.970
我们进入这个目录

13:39.970 --> 13:40.970
进入这个VIT

13:40.970 --> 13:44.970
VU3 AG VIT

13:44.970 --> 13:45.970
进入这个目录

13:45.970 --> 13:46.970
进去过后呢

13:46.970 --> 13:47.970
我们去看一下

13:47.970 --> 13:48.970
这个文件夹

13:48.970 --> 13:49.970
是不是多一个文件夹

13:49.970 --> 13:50.970
对不对

13:50.970 --> 13:52.970
它这里边没有默认安装依赖

13:52.970 --> 13:53.970
没有安装依赖

13:53.970 --> 13:54.970
然后我们看一下

13:54.970 --> 13:55.970
里边用的是VU3

13:55.970 --> 13:56.970
对不对

13:56.970 --> 13:57.970
好 接下来

13:57.970 --> 13:58.970
我们在这里安装依赖

13:58.970 --> 13:59.970
NPMI

13:59.970 --> 14:01.970
当你用一二也可以

14:01.970 --> 14:03.970
一二的话就是一二Create

14:03.970 --> 14:04.970
对吧

14:04.970 --> 14:05.970
然后呢

14:05.970 --> 14:06.970
运行个一二命令

14:06.970 --> 14:07.970
它就自动安装依赖了

14:07.970 --> 14:09.970
好 安装依赖完成

14:09.970 --> 14:10.970
接下来我们来启动一下

14:10.970 --> 14:13.970
主要是看一下启动的差异

14:13.970 --> 14:15.970
好 看一下这边

14:15.970 --> 14:16.970
启动的命令呢

14:16.970 --> 14:17.970
是用DEV这个命令

14:17.970 --> 14:18.970
可以看到我们在安定里边

14:18.970 --> 14:21.970
两个都是用VIT来搭建的

14:21.970 --> 14:22.970
打包的话

14:22.970 --> 14:23.970
也是用一样的

14:23.970 --> 14:24.970
Build

14:24.970 --> 14:26.970
好 我们来运行一下

14:26.970 --> 14:29.970
NPM装DEV

14:29.970 --> 14:30.970
回车

14:30.970 --> 14:34.410
好 第一次呢

14:34.410 --> 14:35.410
稍微要慢一点

14:35.410 --> 14:37.410
因为它又有一个缓存的过程

14:37.410 --> 14:39.410
那么其实你会发现

14:39.410 --> 14:41.410
第一次景观要慢一点

14:41.410 --> 14:43.410
它也比这个WiPack快很多

14:43.410 --> 14:46.410
好 我们再启动一下第二次停止

14:46.410 --> 14:47.410
启动一下第二次

14:47.410 --> 14:48.410
NPM装DEV

14:48.410 --> 14:49.410
一回车

14:49.410 --> 14:51.410
顺秒启动

14:51.410 --> 14:52.410
对吧

14:52.410 --> 14:53.410
跟WiPack是不是形成了

14:53.410 --> 14:54.410
鲜明的对比

14:54.410 --> 14:58.410
我来对比一下

14:58.410 --> 14:59.410
这边

14:59.410 --> 15:01.410
左边是WiPack停止

15:01.410 --> 15:07.910
右边是VIT

15:07.910 --> 15:10.910
NPM装射

15:10.910 --> 15:12.910
NPM装DEV

15:12.910 --> 15:13.910
好

15:13.910 --> 15:14.910
不欺负它

15:14.910 --> 15:16.910
我们先启动这个VIT

15:16.910 --> 15:18.910
我们先启动WiPack

15:18.910 --> 15:20.910
这个就是原始的VOCD

15:20.910 --> 15:21.910
这种方式

15:21.910 --> 15:22.910
回车

15:22.910 --> 15:24.910
这边启动

15:24.910 --> 15:25.910
直接对比一下

15:25.910 --> 15:28.910
这还是主键比较少的情况

15:28.910 --> 15:30.910
主键越多

15:30.910 --> 15:31.910
这个差异越明显

15:31.910 --> 15:32.910
因为像这边

15:32.910 --> 15:33.910
用VIT来启动的话

15:33.910 --> 15:36.910
它跟主键多少没有关系

15:36.910 --> 15:38.910
你主键哪怕有一万个

15:38.910 --> 15:39.910
它还是这个速度

15:39.910 --> 15:41.910
那么这边就不一样了

15:41.910 --> 15:42.910
这边的话

15:42.910 --> 15:43.910
你主键多了

15:43.910 --> 15:45.910
就越来越慢

15:45.910 --> 15:46.910
而且这个玩意

15:46.910 --> 15:47.910
它也是支持热替换的

15:47.910 --> 15:49.910
就是你改动了代码过程

15:49.910 --> 15:51.910
它马上能够体现在页面上

15:51.910 --> 15:52.910
而且热替换的速度

15:52.910 --> 15:53.910
会非常非常快

15:53.910 --> 15:55.910
那么至于它的内部的原理

15:55.910 --> 15:57.910
我们留到后边来讲

15:57.910 --> 15:59.910
我们现在是管它的用法

15:59.910 --> 16:00.910
那么它启动的端口

16:00.910 --> 16:01.910
默认是3000端口

16:01.910 --> 16:03.910
不过3000端口的目前

16:03.910 --> 16:05.910
我刚才已经启动了一个了

16:05.910 --> 16:06.910
所以刚才已经启动了一个

16:06.910 --> 16:08.910
启动了这个暗地里边的

16:08.910 --> 16:09.910
所以3000端口被占用了

16:09.910 --> 16:11.910
它就会默认了往后加

16:11.910 --> 16:12.910
加到这个3000

16:12.910 --> 16:13.910
你要

16:13.910 --> 16:14.910
我们来看一下吧

16:14.910 --> 16:15.910
打开

16:16.910 --> 16:17.910
是一样的

16:17.910 --> 16:18.910
对不对

16:18.910 --> 16:20.910
那么我们这门客学习的时候

16:20.910 --> 16:22.910
我们都会用新的这个工具

16:22.910 --> 16:23.910
它进行搭建工程

16:24.910 --> 16:25.910
好

16:25.910 --> 16:27.910
然后我们来看一下

16:27.910 --> 16:29.910
为什的工程结构搭建出来了

16:29.910 --> 16:30.910
其实差不多

16:30.910 --> 16:32.910
SRC目录就是我们的原代码目录

16:32.910 --> 16:34.910
协法跟过去一样的

16:34.910 --> 16:36.910
只不过要注意的一个点就是

16:36.910 --> 16:40.910
我们在引用别的东西的时候

16:40.910 --> 16:42.910
比方我们引用这个App.view

16:42.910 --> 16:44.910
要把它的后维名加上

16:44.910 --> 16:46.910
除了底儿介式的后维名

16:46.910 --> 16:47.910
不需要加后维名之外

16:47.910 --> 16:48.910
其他都要加上后维名

16:48.910 --> 16:50.910
把这个后维名加上

16:50.910 --> 16:51.910
不然的话它识别不了的

16:51.910 --> 16:53.910
那么在ViewCD里边

16:53.910 --> 16:54.910
它是不用的

16:54.910 --> 16:56.910
就这么一点小差异

16:56.910 --> 16:57.910
其他都差不多

16:58.910 --> 16:59.910
然后还有一个差异就是

16:59.910 --> 17:01.910
它的页面文件

17:01.910 --> 17:03.910
我们不是单页运用程序吗

17:03.910 --> 17:05.910
它的页面文件不是放到Public目录的

17:06.910 --> 17:08.910
它是放到Index的ITM

17:08.910 --> 17:11.910
页面文件是放到根目录下面的

17:12.910 --> 17:13.910
你看这个ViewCD里边

17:13.910 --> 17:15.910
是放到Public里边的

17:15.910 --> 17:16.910
对不对

17:17.910 --> 17:18.910
那么它是放到根目录的

17:18.910 --> 17:20.910
然后其他的静态资源

17:20.910 --> 17:21.910
那就是说

17:21.910 --> 17:22.910
如果说远方不动的

17:22.910 --> 17:23.910
生成了打包结果的话

17:23.910 --> 17:24.910
你可以放到Public

17:24.910 --> 17:26.910
比方说像这个文件

17:26.910 --> 17:28.910
就这么一些差异

17:28.910 --> 17:29.910
当然打包的话

17:29.910 --> 17:30.910
都是差不多的

17:30.910 --> 17:31.910
打包的话我们来看一下

17:31.910 --> 17:32.910
两个打包

17:32.910 --> 17:33.910
这个是使用

17:33.910 --> 17:34.910
NpnZoomView的

17:34.910 --> 17:35.910
对吧

17:35.910 --> 17:36.910
那么这边也是一样

17:37.910 --> 17:38.910
NpnZoomView的

17:39.910 --> 17:40.910
好 这边

17:41.910 --> 17:42.910
打包的话

17:42.910 --> 17:44.910
速度也要快一些

17:44.910 --> 17:48.760
其实

17:48.760 --> 17:49.760
好 这边打包完成了

17:49.760 --> 17:50.760
都打包完成了

17:50.760 --> 17:52.760
好 咱们这边看一下

17:52.760 --> 17:53.760
你可以看到

17:53.760 --> 17:54.760
顺便看一下

17:54.760 --> 17:56.760
它打包的结果里边

17:56.760 --> 17:58.760
GS的尺寸是不是有

17:58.760 --> 17:59.760
巨大的差异 对吧

17:59.760 --> 18:01.760
Vu30做了很多的优化

18:01.760 --> 18:03.760
把打包尺寸进行的优化

18:03.760 --> 18:05.760
我们这里看一下这边

18:05.760 --> 18:08.760
这是位置工程打包的结果

18:08.760 --> 18:09.760
那么这个玩意

18:09.760 --> 18:10.760
是可以直接运行的

18:10.760 --> 18:12.760
那么这边也是

18:12.760 --> 18:14.760
分的目录不一样而已

18:15.760 --> 18:16.760
这是打包

18:16.760 --> 18:17.760
然后评论

18:17.760 --> 18:18.760
我们开发现状的

18:18.760 --> 18:19.760
一般不会使用这个名字

18:19.760 --> 18:20.760
开发现状我们就使用

18:20.760 --> 18:21.760
NpnZoomView

18:21.760 --> 18:24.760
和这边就使用NpnZoomDev

18:24.760 --> 18:25.760
就可以了

18:25.760 --> 18:26.760
这就使用5u3

18:26.760 --> 18:29.760
搭建一个5u3的工程

18:29.760 --> 18:30.760
我们体验一下

18:30.760 --> 18:33.760
这个外Width怎么去使用

18:33.760 --> 18:34.760
我们之后

18:34.760 --> 18:35.760
这门可能都会使用

18:35.760 --> 18:36.760
Width来搭建工程

18:36.760 --> 18:38.760
好了 这就可以到这里了

