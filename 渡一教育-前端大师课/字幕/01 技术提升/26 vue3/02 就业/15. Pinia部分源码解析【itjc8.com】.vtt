WEBVTT

00:00.050 --> 00:05.050
这节课的话 咱们来稍微谈一点比较深入的部分

00:05.050 --> 00:09.050
咱们来看一下拼鸭它部分原码的一个解析

00:09.050 --> 00:14.050
当然这边的话不可能把整个这个拼鸭的原码全部把它看完

00:14.050 --> 00:18.050
然后这边会带着看那么两个方法

00:18.050 --> 00:22.050
这边实际上 与其说讲这个原码的解析

00:22.050 --> 00:29.050
实际上更多的就是让大家就是养成就是阅读原码的这个习惯

00:29.050 --> 00:32.050
为什么要阅读这个原码呢

00:32.050 --> 00:36.050
实际上我觉得就是你阅读原码的话 实际上有这么几个好处

00:36.050 --> 00:42.050
养成阅读原码的这个习惯

00:42.050 --> 00:45.050
有如下的好处

00:45.050 --> 00:48.050
什么好处呢 首先第一点

00:48.050 --> 00:51.050
就是你阅读原码的话 实际上可以帮助我们

00:51.050 --> 00:54.050
拓宽我们自己的这个视野

00:54.050 --> 00:58.050
你可以看到就是优秀的这个程序员 他是如何书写这个代码的

00:58.050 --> 01:01.050
从而提升你自己的这个编码水平

01:01.050 --> 01:04.050
对吧 阅读这个原码

01:04.050 --> 01:14.490
可以帮助我们拓宽自己的视野

01:14.490 --> 01:18.490
然后这个可以看到什么呢 看到这个优秀

01:18.490 --> 01:24.490
优秀的这个程序员是如何书写代码的

01:24.490 --> 01:30.490
从而提升我们自己的编码水平

01:30.490 --> 01:32.490
这是首先第一点

01:32.490 --> 01:35.490
第二点的话就是知其然之

01:35.490 --> 01:38.490
就是知其然之其所以然

01:38.490 --> 01:41.490
就你如果阅读过这个原码的话

01:41.490 --> 01:44.490
你知道他背后的这个API他是如何实现的

01:44.490 --> 01:47.490
那么你就自然而然的话可以避免一些bug

01:47.490 --> 01:51.490
然后你会有一些自己独特的一些优化心得

01:51.490 --> 01:54.490
这种心得的话不是说谁能够告诉你的

01:54.490 --> 01:58.490
是你自己看到原码之后你自己就是总结出来的

01:58.490 --> 02:04.490
ok 知其然然后知其所以然

02:04.490 --> 02:09.490
对吧 如果你阅读过原码

02:09.490 --> 02:13.490
那么你自然能够知道

02:13.490 --> 02:20.490
能够知道某一个这个API是如何实现的

02:21.490 --> 02:28.490
实现的啊背后的这个实现原理是什么对不对啊

02:28.490 --> 02:42.490
那么你那么你也就能够自然的避免在使用使用该API时

02:42.490 --> 02:49.490
可能可能会遇到的一些这个bug

02:49.490 --> 02:57.490
然后会有一些什么呢会有一些自己独特的独特的这个优化心得

02:57.490 --> 03:01.490
因为你都知道他背后是怎么实现的了对不对

03:01.490 --> 03:04.490
那你自然而然的话你就会有些这个自己的一些心得

03:04.490 --> 03:08.490
好然后接下来最后一点最后一点的话也是这个

03:08.490 --> 03:11.490
绝大多数同学学习这个原码的一个原因

03:11.490 --> 03:16.490
或者说就是养成阅读原码这个习惯他最大的一个好处

03:16.490 --> 03:20.490
就是有助于你这个冲击大厂对不对

03:20.490 --> 03:22.490
如果你要冲击大厂的话

03:22.490 --> 03:25.490
那你就不能仅仅停留在这个API层面啊

03:25.490 --> 03:29.490
那个大厂的话他一般不会考虑这个API怎么用的

03:29.490 --> 03:32.490
没有太大意义这个API经常在变啊

03:32.490 --> 03:37.180
所以他一般考察的是什么呢考察的是原理

03:37.180 --> 03:41.180
最后一点最后一点就是

03:41.180 --> 03:46.180
呃阅读原码阅读原码能够

03:46.180 --> 03:52.940
这个冲击大厂冲击大厂啊大厂

03:52.940 --> 03:57.940
在面试的时候不会考察

03:57.940 --> 04:02.940
某个API如何使用对不对啊

04:02.940 --> 04:05.940
没有什么没有什么意义

04:05.940 --> 04:11.940
因为API经常也也在变化

04:11.940 --> 04:14.940
啊一般都是什么呢一般都是

04:14.940 --> 04:19.940
考察这个API背后的这个原理

04:19.940 --> 04:24.940
啊说这个的话也是咱们这个阅读原码的一个好处啊

04:24.940 --> 04:26.940
说了这个阅读原码的好处之后

04:26.940 --> 04:29.940
然后接下来的话要说一下就是关于这个

04:29.940 --> 04:31.940
阅读原码时

04:31.940 --> 04:37.640
阅读原码时的这个一些注意事项

04:37.640 --> 04:40.640
啊阅读原码的话有些什么注意事项呢

04:40.640 --> 04:42.640
首先第一个就是你阅读原码的时候

04:42.640 --> 04:48.640
你一定要基于你这个用过这个库或者用过这个框架啊

04:48.640 --> 04:51.640
你已经对这个框架或者这个库非常非常熟悉了

04:51.640 --> 04:54.640
啊你已经用他写过就是一些项目了

04:54.640 --> 04:57.640
对吧啊实际上的话就是你阅读原码的话

04:57.640 --> 05:00.640
其实我觉得应该是一种自发的行为

05:00.640 --> 05:02.640
因为你已经用过很多次了啊

05:02.640 --> 05:05.640
你自发的想要知道他背后他是如何实现的

05:06.640 --> 05:11.640
阅读原码基于什么呢

05:11.640 --> 05:21.640
基于你已经使用过了这个该库或者该框架

05:21.640 --> 05:27.640
OK对里面的这个API已经很熟悉了

05:27.640 --> 05:31.640
是一种这个自发的行为

05:31.640 --> 05:35.640
当有的同学阅读原码是逼不得已是吧

05:35.640 --> 05:39.640
啊因为这个去面试的时候别人要问啊说这边逼不得已

05:39.640 --> 05:41.640
其实我觉得啊我觉得学习的话

05:41.640 --> 05:44.640
其实应该是一种自发的行为对不对

05:44.640 --> 05:47.640
你自发的想要了解他背后他是如何实现的

05:47.640 --> 05:50.640
哎为什么他这个API可以实现这样的功能

05:50.640 --> 05:52.640
对吧我想要了解他为什么

05:52.640 --> 05:54.640
所以我去阅读他的这个原码

05:54.640 --> 05:59.640
OK还有些同学呢他是那种比较心急的

05:59.640 --> 06:02.640
他比如说他比如说阅读这个view或者阅读这个react

06:02.640 --> 06:06.640
这个原码他连这个view和react用的用的不熟

06:06.640 --> 06:10.640
对吧啊某个API就一些API他都不知道用的都很不熟悉

06:10.640 --> 06:13.640
他就直接急着去看这个原码啊

06:13.640 --> 06:16.640
这个的话其实也是这个四倍共办的

06:16.640 --> 06:19.640
对吧啊这是首先第一点

06:19.640 --> 06:21.640
第二点第二点的话就是阅读原码

06:21.640 --> 06:28.640
阅读原码啊一定要什么呢一定要耐心

06:28.640 --> 06:31.640
这点的话其实是非常重要的

06:31.640 --> 06:33.640
就你阅读原码的话要非常耐心

06:33.640 --> 06:37.640
阅读原码的话和你平时阅读这种业务啊

06:37.640 --> 06:40.640
业务逻辑的这种代码不一样

06:40.640 --> 06:43.640
原码的话他往往就是包含一种思想啊

06:43.640 --> 06:46.640
比如一个好的库或者一个好的这个框架

06:46.640 --> 06:48.640
他背后的话会有些这种思想在里面啊

06:48.640 --> 06:50.640
一些设计模式在里面

06:50.640 --> 06:54.640
说你这边让你可以先去了解一下他背后的一些思想

06:54.640 --> 06:56.640
还有就是这个一般这个原码

06:56.640 --> 06:58.640
他的这个对应的这个代码量

06:58.640 --> 07:00.640
他实际上是比较大的啊

07:00.640 --> 07:02.640
特别是你看那个react

07:02.640 --> 07:04.640
react那个原码的话那个真的是

07:04.640 --> 07:08.640
你要阅读那个原码的话真的是以年为单位

07:08.640 --> 07:11.640
以年为单位这个一点都不夸张啊

07:11.640 --> 07:14.640
比我今年一年啊阅读这个react原码

07:14.640 --> 07:16.640
而且不是说一次性读完啊

07:16.640 --> 07:18.640
阅读原码的话也不是说一次性读完

07:18.640 --> 07:20.640
就每天看一点每天看一点

07:20.640 --> 07:23.640
像那种就是react那种级别的这种原码

07:23.640 --> 07:25.640
真的就是要耐心

07:25.640 --> 07:27.640
一定要耐心要把心沉下来

07:27.640 --> 07:29.640
然后接下来每天剖析一点

07:29.640 --> 07:31.640
每天剖析一点

07:31.640 --> 07:33.640
说这边的话这个阅读原码啊

07:33.640 --> 07:35.640
其中有一点就是要耐心啊

07:35.640 --> 07:37.640
把这个给你加粗

07:37.640 --> 07:39.640
这个是非常重要的

07:39.640 --> 07:41.640
好那么我们接下来的话

07:41.640 --> 07:43.640
我们就来看一下这个评价中啊

07:43.640 --> 07:45.640
部分原码的一些这个实现啊

07:45.640 --> 07:47.640
我这边实际上是一个拨穿引玉

07:47.640 --> 07:48.640
对吧

07:48.640 --> 07:51.640
与其说我这边的话带着大家解析这个原码

07:51.640 --> 07:52.640
倒不说这边呢

07:52.640 --> 07:55.640
带着大家就是养成这个看原码的这个习惯

07:55.640 --> 07:58.640
我们这边一点一点该如何去看啊

07:58.640 --> 07:59.640
好我这边呢

07:59.640 --> 08:01.640
会带着大家看两个

08:01.640 --> 08:05.640
一个是就是我们用的很多的叫做define store

08:06.640 --> 08:08.640
ok一个是这个方法啊

08:08.640 --> 08:10.640
这个方法的话我们这边一开始

08:10.640 --> 08:12.640
诶我那个评价我关了

08:12.640 --> 08:13.640
好我们这边呢

08:13.640 --> 08:15.640
一开始是不是这边就会用这个

08:15.640 --> 08:17.640
它是不是创建一个这个仓库的

08:17.640 --> 08:18.640
对不对

08:18.640 --> 08:20.640
这边这个define store

08:20.640 --> 08:21.640
啊另外一个是什么呢

08:21.640 --> 08:24.640
另外一个是你这边在创建仓库的时候

08:24.640 --> 08:27.640
啊他这边给你说你在使用仓库的时候

08:28.640 --> 08:30.640
啊你这边拿数据不要直接这样子拿

08:30.640 --> 08:31.640
对不对

08:31.640 --> 08:32.640
这样子拿的话他会干嘛

08:32.640 --> 08:35.640
他是不是会break reactivity

08:35.640 --> 08:37.640
是不是会破坏这个响应式啊

08:37.640 --> 08:38.640
对不对他让你干嘛

08:38.640 --> 08:42.640
他让你使用这个store to riffs

08:42.640 --> 08:45.640
啊说我们这边呢可以看一下这个方法

08:45.640 --> 08:47.640
store riffs这个方法

08:47.640 --> 08:48.640
ok

08:48.640 --> 08:50.640
好了那接下来的话这边这边的话

08:50.640 --> 08:51.640
我们首先干嘛呢

08:51.640 --> 08:53.640
首先我们先回过啊

08:53.640 --> 08:57.640
先回过define store

08:57.640 --> 09:00.640
方法的这个使用

09:00.640 --> 09:02.640
ok好这个方法的话

09:02.640 --> 09:04.640
是不是支持两种风格

09:04.640 --> 09:05.640
对不对

09:05.640 --> 09:07.640
define store方法

09:07.640 --> 09:11.640
支持两种变成风格

09:11.640 --> 09:15.640
两种呢一种是option

09:15.640 --> 09:17.640
option store

09:17.640 --> 09:21.640
另一种是什么呢是这个setup store

09:21.640 --> 09:25.460
啊那我们首先的话

09:25.460 --> 09:28.460
先来回顾这个option store

09:28.460 --> 09:30.460
option store的话他这边的话

09:30.460 --> 09:31.460
他的这个语法

09:31.460 --> 09:33.460
他的语法是这个样子的

09:33.460 --> 09:35.460
把这儿拿过来

09:35.460 --> 09:39.220
他的语法是这样子的对不对

09:39.220 --> 09:40.220
这边首先第一个参数

09:40.220 --> 09:42.220
第一个参数是你仓库的这个id

09:42.220 --> 09:44.220
那这个就我们之前写的代码啊

09:44.220 --> 09:45.220
直接拿过来的

09:45.220 --> 09:47.220
首先第一个的话就是你仓库的id

09:47.220 --> 09:48.220
好人家这边第二个

09:48.220 --> 09:49.220
第二个他这边的话

09:49.220 --> 09:51.220
是首先你的state

09:51.220 --> 09:52.220
他第二个他是个对象

09:52.220 --> 09:53.220
对吧

09:53.220 --> 09:54.220
他是个对象

09:54.220 --> 09:55.220
里面有你的state

09:55.220 --> 09:56.220
有你的getters

09:56.220 --> 09:57.220
有你的actions

09:57.220 --> 09:58.220
对吧

09:58.220 --> 10:02.980
这个是option store风格

10:02.980 --> 10:03.980
好

10:03.980 --> 10:04.980
另外你注意一下

10:04.980 --> 10:06.980
就是option store风格的话

10:06.980 --> 10:07.980
他可以干嘛呢

10:07.980 --> 10:11.870
他可以把这个id写到选项里面

10:11.870 --> 10:14.870
option store风格

10:14.870 --> 10:17.870
可以将这个id

10:17.870 --> 10:18.870
写到什么呢

10:18.870 --> 10:21.870
写到选项里面

10:21.870 --> 10:22.870
就你这边的话

10:22.870 --> 10:23.870
你这边第一个参数

10:23.870 --> 10:24.870
是不是一个致富串

10:24.870 --> 10:26.870
致富串对应的是什么

10:26.870 --> 10:28.870
对应的是你仓库的id

10:28.870 --> 10:29.870
对不对

10:29.870 --> 10:32.870
他这边的话他还支持这种写法

10:32.870 --> 10:34.870
拿过来

10:34.870 --> 10:37.870
他这边还支持这种写法

10:37.870 --> 10:39.870
他这边直接就接受一个

10:39.870 --> 10:41.870
直接接受一个对象

10:41.870 --> 10:42.870
接受一个对象之后

10:42.870 --> 10:43.870
这边id

10:43.870 --> 10:45.870
对应了container

10:45.870 --> 10:47.870
他是不是把这个写到里面了

10:47.870 --> 10:48.870
对不对

10:48.870 --> 10:49.870
写到里面了

10:49.870 --> 10:52.870
这个是option这种风格

10:52.870 --> 10:53.870
好

10:53.870 --> 10:54.870
接下来还有一种什么呢

10:54.870 --> 10:57.870
还有一种是setup

10:57.870 --> 11:00.870
setup store风格

11:00.870 --> 11:05.680
setup

11:05.680 --> 11:06.680
setup的话

11:06.680 --> 11:07.680
我们这边回顾一下

11:07.680 --> 11:08.680
setup的话

11:08.680 --> 11:13.590
他这边的话是这样子来写的

11:13.590 --> 11:14.590
setup

11:14.590 --> 11:15.590
他是这样子来写的

11:15.590 --> 11:16.590
首先第一个的话

11:16.590 --> 11:17.590
是你的id

11:17.590 --> 11:18.590
第二个的话

11:18.590 --> 11:19.590
他是一个什么

11:19.590 --> 11:21.590
他是个函数

11:21.590 --> 11:22.590
对不对

11:22.590 --> 11:23.590
第二个的话

11:23.590 --> 11:24.590
是函数

11:24.590 --> 11:25.590
函数里面的话

11:25.590 --> 11:27.590
你这边创建一个小意思数据

11:27.590 --> 11:28.590
大家这边是你的

11:28.590 --> 11:30.590
相当于就是你的action

11:30.590 --> 11:31.590
方法

11:31.590 --> 11:32.590
大家这边把它return出去

11:32.590 --> 11:34.590
这我们之前是不是也讲过了

11:34.590 --> 11:35.590
对不对

11:35.590 --> 11:36.590
我们首先的话

11:36.590 --> 11:37.590
你首先第一步

11:37.590 --> 11:39.590
你先回顾一下他的这个用法

11:39.590 --> 11:40.590
你针对这个方法

11:40.590 --> 11:42.590
首先你是非常熟悉的

11:42.590 --> 11:43.590
对不对

11:43.590 --> 11:44.590
然后接下来

11:44.590 --> 11:45.590
我们再去看

11:45.590 --> 11:47.590
他的这个原码实现

11:47.590 --> 11:51.590
define store

11:51.590 --> 11:52.590
store

11:55.590 --> 11:56.590
原码

11:56.590 --> 11:58.590
如下

11:58.590 --> 11:59.590
好

11:59.590 --> 12:00.590
然后接下来

12:00.590 --> 12:01.590
我们这边就在

12:01.590 --> 12:02.590
我们这里看一下

12:02.590 --> 12:03.590
这是我们之前

12:03.590 --> 12:04.590
我们写的这个penia

12:04.590 --> 12:05.590
我们写的那个应用

12:05.590 --> 12:06.590
好

12:06.590 --> 12:08.590
你这边找到这个loaded modules

12:08.590 --> 12:09.590
找到这个penia

12:09.590 --> 12:10.590
找到penia之后

12:10.590 --> 12:11.590
然后接下来

12:11.590 --> 12:12.590
他这边

12:12.590 --> 12:13.590
这边是penia

12:13.590 --> 12:15.590
我们找到这个dist

12:15.590 --> 12:16.590
dist

12:16.590 --> 12:17.590
他这边

12:17.590 --> 12:18.590
有好几个版本

12:18.590 --> 12:19.590
对吧

12:19.590 --> 12:20.590
我们就直接看一个

12:20.590 --> 12:22.590
ESM browser这个版本

12:22.590 --> 12:23.590
OK

12:23.590 --> 12:24.590
要看这个版本

12:24.590 --> 12:25.590
里面的话

12:25.590 --> 12:27.590
在这边你可以搜一下

12:27.590 --> 12:30.590
define store

12:30.590 --> 12:31.590
我们这边找一下

12:31.590 --> 12:33.590
define store

12:33.590 --> 12:34.590
在这里

12:34.590 --> 12:35.590
是不是就这里

12:35.590 --> 12:36.590
对不对

12:36.590 --> 12:37.590
整个这个

12:37.590 --> 12:40.590
1659到1730

12:40.590 --> 12:42.590
代码航数其实倒不多

12:42.590 --> 12:43.590
对吧

12:43.590 --> 12:44.590
OK

12:44.590 --> 12:45.590
我们这边把拿过来

12:45.590 --> 12:46.590
拿过来之后

12:46.590 --> 12:50.100
然后接下我们这边来看一下

12:50.100 --> 12:51.100
OK

12:51.100 --> 12:52.100
这边整体来看一下

12:52.100 --> 12:53.100
你看他这边的话

12:53.100 --> 12:54.100
就接收什么

12:54.100 --> 12:55.100
他这边的话

12:55.100 --> 12:57.100
是不是就是接收一个这个id

12:57.100 --> 12:58.100
or option

12:58.100 --> 13:00.100
这是他第一个参数

13:00.100 --> 13:01.100
这是第二个参数

13:01.100 --> 13:02.100
这是第三个参数

13:02.100 --> 13:03.100
这边的话

13:03.100 --> 13:05.100
接收这么三个参数

13:05.100 --> 13:06.100
OK

13:06.100 --> 13:07.100
接收这么三个参数之后

13:07.100 --> 13:08.100
然后在这边

13:08.100 --> 13:09.100
nate

13:09.100 --> 13:10.100
indate

13:10.100 --> 13:11.100
好

13:11.100 --> 13:12.100
然后加这边

13:12.100 --> 13:13.100
const

13:13.100 --> 13:14.100
setup store

13:14.100 --> 13:15.100
然后接下来

13:15.100 --> 13:16.100
这边看你的这个setup

13:16.100 --> 13:18.100
是否是function

13:18.100 --> 13:19.100
好来

13:19.100 --> 13:20.100
这边一点一点来看

13:20.100 --> 13:21.100
setup是什么

13:21.100 --> 13:22.100
setup是不是

13:22.100 --> 13:23.100
第二个参数

13:23.100 --> 13:24.100
第二个参数的话

13:24.100 --> 13:26.100
如果你是option风格的话

13:26.100 --> 13:27.100
如果是option风格

13:27.100 --> 13:28.100
它是一个对象

13:28.100 --> 13:30.100
如果是setup风格的话

13:30.100 --> 13:31.100
它是一个什么

13:31.100 --> 13:32.100
它是不是它是个函数

13:32.100 --> 13:33.100
对不对

13:33.100 --> 13:34.100
说他这边的话

13:34.100 --> 13:35.100
他就干嘛呢

13:35.100 --> 13:37.100
他就看你是否是一个function

13:37.100 --> 13:38.100
因此这边的话

13:38.100 --> 13:40.100
这个issetup store

13:40.100 --> 13:42.100
这个值

13:42.100 --> 13:43.100
这个变量

13:43.100 --> 13:45.100
它会是一个什么呢

13:45.100 --> 13:48.100
会是一个bord

13:48.100 --> 13:49.100
对不对

13:49.100 --> 13:53.100
如果是setup函数

13:53.100 --> 13:56.100
那么这个issetup

13:56.100 --> 13:58.100
v2

13:58.100 --> 13:59.100
然后接下来的话

13:59.100 --> 14:01.100
这边否则

14:01.100 --> 14:03.100
v4

14:03.100 --> 14:04.100
对不对

14:04.100 --> 14:05.100
OK

14:05.100 --> 14:06.100
首先这边

14:06.100 --> 14:07.100
issetup store

14:07.100 --> 14:08.100
这个是个bord

14:08.100 --> 14:09.100
好

14:09.100 --> 14:10.100
然后接下来的话

14:10.100 --> 14:12.100
这边是不是有个efls

14:12.100 --> 14:13.100
对不对

14:13.100 --> 14:14.100
这边有个efls

14:14.100 --> 14:15.100
那我们来看这个efls

14:15.100 --> 14:16.100
他是干嘛

14:16.100 --> 14:17.100
他说看这个id

14:17.100 --> 14:18.100
oroption

14:18.100 --> 14:19.100
是否等于stream

14:19.100 --> 14:20.100
什么意思

14:20.100 --> 14:21.100
就如果你这边

14:21.100 --> 14:22.100
第一个参数

14:22.100 --> 14:24.100
你看这边

14:24.100 --> 14:26.100
这个idoroption

14:26.100 --> 14:27.100
它是什么

14:27.100 --> 14:28.100
它是传入这个函数的

14:28.100 --> 14:29.100
第一个参数

14:29.100 --> 14:30.100
第一个参数的话

14:30.100 --> 14:31.100
你看这边

14:31.100 --> 14:32.100
如果它是个实坠

14:32.100 --> 14:33.100
如果是实坠的话

14:33.100 --> 14:34.100
说明什么

14:34.100 --> 14:35.100
是不是说明

14:35.100 --> 14:37.100
它是参户的这个id

14:37.100 --> 14:38.100
对不对

14:38.100 --> 14:41.790
如果进入此ef

14:41.790 --> 14:46.790
如果进入此ef

14:46.790 --> 14:47.790
说明什么呢

14:47.790 --> 14:50.790
说明这个idoroption

14:50.790 --> 14:51.790
是什么

14:51.790 --> 14:56.790
是该参户的id

14:56.790 --> 14:57.790
对不对

14:57.790 --> 14:58.790
否则的话

14:58.790 --> 14:59.790
这边是什么

14:59.790 --> 15:01.790
否则它就是这种情况

15:01.790 --> 15:02.790
是不是就这种情况

15:02.790 --> 15:04.790
那它的第一个参数就是什么

15:04.790 --> 15:05.790
是不是它的第一个参数

15:05.790 --> 15:07.790
是不是就是配置对象

15:07.790 --> 15:08.790
对不对

15:08.790 --> 15:10.790
那么这个id

15:10.790 --> 15:13.790
这个idoroption是参数

15:13.790 --> 15:14.790
为什么呢

15:14.790 --> 15:16.790
为配置对象

15:16.790 --> 15:17.790
对不对

15:17.790 --> 15:18.790
你看这边

15:18.790 --> 15:19.790
是不是就一点一点

15:19.790 --> 15:20.790
再看着走了

15:20.790 --> 15:21.790
首先看第一个

15:21.790 --> 15:22.790
第一个

15:22.790 --> 15:23.790
如果它是street的情况

15:23.790 --> 15:24.790
这个的话

15:24.790 --> 15:25.790
实际上是更常见的情况

15:25.790 --> 15:26.790
对不对

15:26.790 --> 15:27.790
这边它第一个参数

15:27.790 --> 15:28.790
是一个street

15:28.790 --> 15:29.790
然后是street的话

15:29.790 --> 15:30.790
然后接下来它看这一步

15:30.790 --> 15:31.790
这一步呢

15:31.790 --> 15:32.790
它这一步呢

15:32.790 --> 15:33.790
是不是就是把这个id

15:33.790 --> 15:34.790
付给这个id

15:34.790 --> 15:35.790
对不对

15:35.790 --> 15:36.790
那接下来

15:36.790 --> 15:37.790
这边这个id

15:37.790 --> 15:38.790
id

15:38.790 --> 15:39.790
就这个id

15:39.790 --> 15:40.790
这个id

15:40.790 --> 15:41.790
它是什么

15:41.790 --> 15:42.790
sir

15:42.790 --> 15:44.790
这个define

15:44.790 --> 15:46.790
defineStore

15:46.790 --> 15:47.790
函数

15:47.790 --> 15:51.170
内部的这个变量

15:51.170 --> 15:52.170
它存储了什么

15:52.170 --> 15:54.170
是不是存储了

15:54.170 --> 15:55.170
倉库id

15:55.170 --> 15:58.540
是不是存储了倉库id

15:58.540 --> 15:59.540
你看这边

15:59.540 --> 16:00.540
第一个参数

16:00.540 --> 16:01.540
对不对

16:01.540 --> 16:02.540
第一个参数

16:02.540 --> 16:03.540
传进来

16:03.540 --> 16:04.540
传进来之后

16:04.540 --> 16:05.540
它这边是否复制给id

16:05.540 --> 16:06.540
那目前我这个id

16:06.540 --> 16:07.540
是不是就存储了倉库id

16:07.540 --> 16:08.540
存储了倉库id之后

16:08.540 --> 16:10.540
然后接下来这边

16:10.540 --> 16:12.540
这边它就看你什么

16:12.540 --> 16:13.540
看你这边

16:13.540 --> 16:14.540
是否是setup

16:14.540 --> 16:15.540
如果是setup的话

16:15.540 --> 16:17.540
它这边就把setup option

16:17.540 --> 16:18.540
setup option是什么

16:18.540 --> 16:20.540
是不是第三个参数

16:20.540 --> 16:21.540
对不对

16:21.540 --> 16:22.540
我们说了

16:22.540 --> 16:24.540
如果你是这种setup风格

16:24.540 --> 16:25.540
在这里

16:25.540 --> 16:26.540
如果是setup风格

16:26.540 --> 16:27.540
它这边是不是接受

16:27.540 --> 16:28.540
第三个参数

16:28.540 --> 16:29.540
第三个参数是不是就是

16:29.540 --> 16:30.540
插进选项

16:30.540 --> 16:32.540
我上节可讲过的

16:32.540 --> 16:33.540
对不对

16:33.540 --> 16:34.540
就插进选项

16:34.540 --> 16:38.620
这边如果是

16:38.620 --> 16:42.620
如果是setup风格

16:42.620 --> 16:46.620
就将第三个参数

16:46.620 --> 16:48.620
但这边如果有

16:48.620 --> 16:50.620
就将第三个参数

16:50.620 --> 16:55.580
复制给这个options

16:55.580 --> 16:56.580
复制给options

16:56.580 --> 16:57.580
options是不是同样是

16:57.580 --> 16:59.580
defy store

16:59.580 --> 17:00.580
内部的变量

17:00.580 --> 17:01.580
对不对

17:01.580 --> 17:04.950
否则就将什么呢

17:04.950 --> 17:06.950
就将setup

17:06.950 --> 17:07.950
setup是什么

17:07.950 --> 17:08.950
setup是不是第二个参数

17:08.950 --> 17:09.950
对不对

17:09.950 --> 17:10.950
否则的话

17:10.950 --> 17:11.950
你这边不是setup风格

17:11.950 --> 17:13.950
不是setup风格的话

17:13.950 --> 17:14.950
你这边的话

17:14.950 --> 17:15.950
setup它就是什么

17:15.950 --> 17:17.950
是不是就是这个对象

17:17.950 --> 17:19.950
是不是就是这个对象

17:19.950 --> 17:20.950
对不对

17:20.950 --> 17:21.950
就整个对象

17:21.950 --> 17:24.950
就将这个配置对象

17:24.950 --> 17:31.120
复制给options

17:31.120 --> 17:32.120
是不是这样子了

17:32.120 --> 17:33.120
对不对

17:33.120 --> 17:34.120
好

17:34.120 --> 17:35.120
然后jlc

17:35.120 --> 17:36.120
jlc的话

17:36.120 --> 17:37.120
这边的话

17:37.120 --> 17:38.120
这个id or options

17:38.120 --> 17:39.120
它是这个配置对象

17:39.120 --> 17:40.120
配置对象的话

17:40.120 --> 17:41.120
它直接复制给options

17:41.120 --> 17:42.120
然后加这边

17:42.120 --> 17:43.120
id or options

17:43.120 --> 17:44.120
变id

17:44.120 --> 17:46.120
复给这个id

17:46.120 --> 17:47.120
这边

17:47.120 --> 17:48.120
你看它这边有个id

17:48.120 --> 17:49.120
对不对

17:49.120 --> 17:50.120
复制给这个id

17:50.120 --> 17:51.120
你看这边

17:51.120 --> 17:52.120
是不是就一点一点

17:52.120 --> 17:53.120
看起走了

17:53.120 --> 17:54.120
对不对

17:54.120 --> 17:55.120
好

17:55.120 --> 17:56.120
然后接下来的话

17:56.120 --> 17:57.120
这边有个function

17:57.120 --> 17:58.120
user store

17:58.120 --> 18:00.120
有个function user store

18:00.120 --> 18:01.120
好

18:01.120 --> 18:02.120
然后接下来你看最后

18:02.120 --> 18:03.120
最后了

18:03.120 --> 18:04.120
这边整个这个方法

18:04.120 --> 18:05.120
这个方法

18:05.120 --> 18:06.120
稍微长一点

18:06.120 --> 18:07.120
这个function

18:07.120 --> 18:08.120
我们直接跳跳跳跳到最后

18:08.120 --> 18:09.120
跳到最后

18:09.120 --> 18:10.120
好你看它这边

18:10.120 --> 18:12.120
是不是就返回这个user store

18:12.120 --> 18:13.120
对不对

18:13.120 --> 18:14.120
返回这个user store

18:14.120 --> 18:15.120
那这个呢

18:15.120 --> 18:16.120
时间就是在干嘛

18:16.120 --> 18:19.120
是不是再向外部返回这个方法

18:19.120 --> 18:23.120
再向

18:23.120 --> 18:26.120
外部返回这个方法

18:26.120 --> 18:28.750
ok

18:28.750 --> 18:29.750
还记得我们之前

18:29.750 --> 18:31.750
我们在用这个defy

18:31.750 --> 18:33.750
在用这个这个

18:33.750 --> 18:34.750
defy store的时候

18:34.750 --> 18:35.750
我们这边的话最终

18:35.750 --> 18:37.750
这边调用它对吧

18:37.750 --> 18:38.750
调用它之后

18:38.750 --> 18:39.750
它这边会跟我返回一个

18:39.750 --> 18:40.750
我们这边用这个user

18:40.750 --> 18:42.750
比如user content store

18:42.750 --> 18:43.750
接收了之后

18:43.750 --> 18:44.750
然后接下来

18:44.750 --> 18:45.750
我们这边还要干嘛

18:45.750 --> 18:46.750
我们这边是不是

18:46.750 --> 18:47.750
还需要这个user content store

18:47.750 --> 18:48.750
然后这样我们这边

18:48.750 --> 18:49.750
是不是要调用一下

18:49.750 --> 18:51.750
我们这边看代码吧

18:51.750 --> 18:55.320
看我们这边的代码

18:55.320 --> 18:58.320
比如说

18:58.320 --> 19:02.700
这边container

19:02.700 --> 19:04.700
这里

19:04.700 --> 19:06.700
把这个关了

19:06.700 --> 19:07.700
我们这边的话

19:07.700 --> 19:08.700
这里的话

19:08.700 --> 19:09.700
我们从这个store

19:09.700 --> 19:10.700
拿到这个user content store

19:10.700 --> 19:11.700
这个函数

19:11.700 --> 19:12.700
然后这样我们这边

19:12.700 --> 19:13.700
是不是要执行一下

19:13.700 --> 19:14.700
对不对

19:14.700 --> 19:15.700
那你这边的话

19:15.700 --> 19:16.700
这个很明显

19:16.700 --> 19:17.700
这玩意是个函数吗

19:17.700 --> 19:19.700
这个函数究竟是什么

19:19.700 --> 19:20.700
这个函数

19:20.700 --> 19:22.700
实际上就是怎么了

19:22.700 --> 19:24.700
实际上就是这个

19:24.700 --> 19:27.700
你执行的实际上就是它

19:27.700 --> 19:28.700
知道吧

19:28.700 --> 19:30.700
执行的就是它

19:30.700 --> 19:32.700
大家这边还有个细节

19:32.700 --> 19:33.700
什么是细节

19:33.700 --> 19:34.700
这边呢

19:34.700 --> 19:35.700
你在向外部返回这个

19:35.700 --> 19:37.700
返回这个函数

19:37.700 --> 19:39.700
返回这个函数的时候

19:39.700 --> 19:40.700
你在这个函数上面

19:40.700 --> 19:41.700
还挂了一个什么

19:41.700 --> 19:43.700
挂了一个downer id属性

19:43.700 --> 19:44.700
对不对

19:44.700 --> 19:48.700
在user store

19:48.700 --> 19:50.700
函数上面

19:50.700 --> 19:53.700
还挂了一个downer id

19:54.700 --> 19:56.700
然后存储了什么呢

19:56.700 --> 20:00.700
存储了该

20:00.700 --> 20:03.700
倉库的这个id

20:03.700 --> 20:04.700
对不对

20:04.700 --> 20:05.700
你看这些细节的话

20:05.700 --> 20:06.700
你通过阅读源码

20:06.700 --> 20:07.700
你是不是就知道了

20:07.700 --> 20:08.700
对不对

20:08.700 --> 20:09.700
好

20:09.700 --> 20:10.700
那接下来来到这里

20:10.700 --> 20:12.700
来到这个user store

20:12.700 --> 20:13.700
那这个函数的话

20:13.700 --> 20:14.700
就是什么

20:14.700 --> 20:18.260
就是最终返回给外部的函数

20:18.260 --> 20:19.260
这个函数

20:19.260 --> 20:23.260
就是最终返回给

20:23.260 --> 20:25.260
外部的函数

20:25.260 --> 20:28.260
大家外部

20:28.260 --> 20:31.580
外部通过什么呢

20:31.580 --> 20:34.580
通过执行这个函数

20:34.580 --> 20:35.580
拿到什么呢

20:35.580 --> 20:39.580
拿到store藏库

20:39.580 --> 20:40.580
对不对

20:40.580 --> 20:41.580
拿到store藏库

20:41.580 --> 20:42.580
好

20:42.580 --> 20:43.580
大家这里面的话

20:43.580 --> 20:44.580
会有一些这个

20:44.580 --> 20:45.580
一些其他的

20:45.580 --> 20:46.580
一些其他的代码

20:46.580 --> 20:47.580
这边的话

20:47.580 --> 20:48.580
我们这边

20:48.580 --> 20:49.580
我们主要看重点

20:49.580 --> 20:50.580
看这里

20:50.580 --> 20:51.580
看这里

20:51.580 --> 20:52.580
你看那这边的话

20:52.580 --> 20:53.580
有一个

20:53.580 --> 20:55.580
creating the store

20:55.580 --> 20:56.580
registers it

20:56.580 --> 20:58.580
因这个pn

20:58.580 --> 20:59.580
点这个下滑线s

20:59.580 --> 21:00.580
这个什么意思

21:00.580 --> 21:01.580
它这边是不是

21:01.580 --> 21:08.220
就会创建一个倉库

21:08.220 --> 21:10.220
创建一个倉库

21:10.220 --> 21:12.220
并且把这个倉库

21:12.220 --> 21:16.220
并且将这个倉库

21:16.220 --> 21:18.220
注册到什么

21:18.220 --> 21:20.220
注册到pn

21:20.220 --> 21:22.220
下滑线s这个属性上面

21:22.220 --> 21:23.220
对不对

21:23.220 --> 21:24.220
好

21:24.220 --> 21:25.220
大家你看这里

21:25.220 --> 21:26.220
这里这个efls

21:26.220 --> 21:27.220
就在根据什么

21:27.220 --> 21:28.220
根据你的这个

21:28.220 --> 21:29.220
is setup store

21:29.220 --> 21:30.220
is setup store

21:30.220 --> 21:31.220
是什么

21:31.220 --> 21:32.220
是不是就刚才我们说的

21:32.220 --> 21:33.220
这个它是个布尔兹

21:33.220 --> 21:34.220
对不对

21:34.220 --> 21:36.220
根据你这个不同的风格

21:36.220 --> 21:41.780
根据不同的风格

21:41.780 --> 21:42.780
开始

21:42.780 --> 21:44.780
创建倉库

21:44.780 --> 21:46.780
如果是什么

21:46.780 --> 21:48.780
如果是setup风格

21:48.780 --> 21:55.780
如果是setup风格

21:55.780 --> 21:57.780
调用的是什么

21:57.780 --> 21:58.780
是这个

21:58.780 --> 22:02.310
调用的是这个

22:02.310 --> 22:04.310
created setup store

22:04.310 --> 22:05.310
好

22:05.310 --> 22:06.310
ls那就是什么

22:06.310 --> 22:07.310
这边那就是

22:07.310 --> 22:08.310
如果是

22:08.310 --> 22:10.310
是option风格

22:10.310 --> 22:11.310
option风格

22:11.310 --> 22:13.310
调用的是

22:13.310 --> 22:14.310
是不是这个

22:14.310 --> 22:15.310
你看这些话

22:15.310 --> 22:16.310
都是你

22:16.310 --> 22:17.310
如果不读圆满的话

22:17.310 --> 22:18.310
你不知道

22:18.310 --> 22:19.310
对不对

22:19.310 --> 22:20.310
它内部的话

22:20.310 --> 22:22.310
在创建这个倉库的时候

22:22.310 --> 22:23.310
它这边会调用

22:23.310 --> 22:24.310
不同的这个方法

22:24.310 --> 22:26.310
那回头你在面试的时候

22:26.310 --> 22:27.310
你这些话

22:27.310 --> 22:29.310
你是不是就可以说出来

22:29.310 --> 22:30.310
对不对

22:30.310 --> 22:31.310
比如说普通人

22:31.310 --> 22:32.310
如果没有阅读过圆满

22:32.310 --> 22:33.310
它只会说

22:33.310 --> 22:34.310
通过define store

22:34.310 --> 22:36.310
可以创建倉库

22:36.310 --> 22:37.310
但你这边的话

22:37.310 --> 22:38.310
你越读过圆满了

22:38.310 --> 22:39.310
你就可以说的更多一些

22:39.310 --> 22:40.310
你就可以说

22:40.310 --> 22:41.310
通过define store

22:41.310 --> 22:43.310
它这边可以创建这个倉库

22:43.310 --> 22:45.310
这边它支持不同的风格

22:45.310 --> 22:47.310
如果是setup风格的话

22:47.310 --> 22:49.310
它内部实际上调用的是

22:49.310 --> 22:50.310
created setup store

22:50.310 --> 22:52.310
如果是option风格

22:52.310 --> 22:54.310
它背后调的是

22:54.310 --> 22:55.310
created option store

22:55.310 --> 22:56.310
好

22:56.310 --> 22:57.310
接下来的话

22:57.310 --> 22:58.310
你这边还可以继续来追

22:58.310 --> 23:01.690
还可以继续来追

23:01.690 --> 23:02.690
我们这边

23:02.690 --> 23:06.130
来到刚才那个

23:06.130 --> 23:08.130
这边拼呢

23:08.130 --> 23:09.130
来到这边

23:09.130 --> 23:11.130
这边你可以继续的来搜索

23:11.130 --> 23:12.130
这个created

23:12.130 --> 23:15.440
比如我们这边created option

23:15.440 --> 23:17.440
先看created option

23:17.440 --> 23:18.440
created option的话

23:18.440 --> 23:20.440
你这边你可以大致看一下

23:20.440 --> 23:22.440
把它折起来

23:22.440 --> 23:23.440
大致看一下

23:23.440 --> 23:24.440
你看它这边的话

23:24.440 --> 23:25.440
它创建了一个什么

23:25.440 --> 23:28.440
创建了一个setup韩束

23:28.440 --> 23:29.440
对不对

23:29.440 --> 23:30.440
setup韩束之后

23:30.440 --> 23:32.440
然后接下来你看这边

23:32.440 --> 23:33.440
它实际上它背后

23:33.440 --> 23:34.440
在调用什么

23:34.440 --> 23:37.440
这边也在调用created setup store

23:37.440 --> 23:38.440
对不对

23:38.440 --> 23:40.440
说说你看这里

23:40.440 --> 23:42.440
我们这边注释一下

23:42.440 --> 23:44.440
在这里

23:44.440 --> 23:45.440
这里我们写一下

23:45.440 --> 23:46.440
就你这个created option

23:46.440 --> 23:48.940
方法

23:48.940 --> 23:50.940
created option store

23:50.940 --> 23:52.940
这个方法

23:52.940 --> 23:53.940
背后

23:53.940 --> 23:55.940
实际上

23:55.940 --> 23:57.940
也是在调用什么

23:57.940 --> 23:58.940
也是在调用

23:58.940 --> 24:04.280
created setup store

24:04.280 --> 24:05.280
对不对

24:05.280 --> 24:06.280
它内部的话会创建

24:06.280 --> 24:09.280
内部会创建

24:09.280 --> 24:11.280
一个名为什么呢

24:11.280 --> 24:13.280
名为这个setup

24:13.280 --> 24:15.280
setup的韩束

24:15.280 --> 24:19.490
然后将什么呢

24:19.490 --> 24:21.490
将选项

24:21.490 --> 24:23.490
将选项

24:23.490 --> 24:25.490
转为

24:25.490 --> 24:27.490
转为setup

24:27.490 --> 24:29.490
这个setup韩束

24:29.490 --> 24:31.490
内部的项目

24:31.490 --> 24:34.490
内部的项目

24:34.490 --> 24:36.490
然后调用什么呢

24:36.490 --> 24:41.180
调用这个

24:41.180 --> 24:42.180
对不对

24:42.180 --> 24:43.180
你这边可以把它展开

24:43.180 --> 24:44.180
看一下这边这个setup

24:44.180 --> 24:45.180
你看它这边

24:45.180 --> 24:46.180
是不是就是把你的这个选项

24:46.180 --> 24:48.180
转成这个refs

24:48.180 --> 24:49.180
我看在这里

24:49.180 --> 24:50.180
看不看

24:50.180 --> 24:51.180
是不是就是转成refs

24:51.180 --> 24:52.180
转成refs之后

24:52.180 --> 24:53.180
然后完事之后

24:53.180 --> 24:54.180
最终的话调用什么呢

24:54.180 --> 24:57.180
调用这个created setup store

24:57.180 --> 24:58.180
大家这边的话

24:58.180 --> 24:59.180
把这个setup这个韩束

24:59.180 --> 25:00.180
就这个韩束

25:00.180 --> 25:02.180
作为第二个韩束

25:02.180 --> 25:03.180
传过去

25:03.180 --> 25:04.180
对不对

25:04.180 --> 25:06.180
然后调用这个

25:06.180 --> 25:07.180
这个方法

25:08.180 --> 25:10.180
将这个setup韩束

25:10.180 --> 25:14.010
将setup韩束

25:14.010 --> 25:17.010
作为第二个参数

25:17.010 --> 25:19.010
传递过去

25:19.010 --> 25:20.010
ok

25:20.010 --> 25:21.010
所以你这边

25:21.010 --> 25:22.010
你如果不阅读原码的话

25:22.010 --> 25:24.010
你这边你是不知道的

25:24.010 --> 25:25.010
对不对

25:25.010 --> 25:28.010
所以说这边因此

25:28.010 --> 25:31.010
因此理论上来讲

25:31.010 --> 25:33.010
这个setup

25:33.010 --> 25:35.010
setup实际上

25:35.010 --> 25:37.010
要更加

25:37.010 --> 25:40.580
高效一些

25:40.580 --> 25:41.580
对不对

25:41.580 --> 25:43.580
因为option

25:43.580 --> 25:45.580
option store

25:45.580 --> 25:47.580
背后也是

25:47.580 --> 25:50.580
转为这个setup

25:50.580 --> 25:52.580
这些

25:52.580 --> 25:53.580
是你什么呢

25:53.580 --> 25:55.580
是你这个不阅读原码

25:55.580 --> 25:57.580
不阅读

25:58.580 --> 26:00.580
不阅读原码

26:00.580 --> 26:02.580
无法知道的

26:02.580 --> 26:03.580
对不对

26:03.580 --> 26:04.580
这个是你不阅读原码

26:04.580 --> 26:05.580
无法知道的

26:05.580 --> 26:06.580
他这个

26:06.580 --> 26:07.580
手册

26:07.580 --> 26:08.580
这个这个官方网站

26:08.580 --> 26:09.580
他是不会给你写的

26:09.580 --> 26:11.580
把这个切换成中文吗

26:11.580 --> 26:13.580
他只会告诉你什么

26:13.580 --> 26:14.580
只会告诉你

26:14.580 --> 26:15.580
有两种风格

26:15.580 --> 26:17.580
这边有option风格

26:17.580 --> 26:18.580
接下来有什么

26:18.580 --> 26:20.580
有这个setup风格

26:20.580 --> 26:21.580
至于他背后

26:21.580 --> 26:22.580
他这个怎么实现

26:22.580 --> 26:23.580
他是不会讲的

26:23.580 --> 26:24.580
对不对

26:24.580 --> 26:25.580
这个就只有靠你自己

26:25.580 --> 26:26.580
去阅读原码

26:26.580 --> 26:28.580
自己去发掘

26:28.580 --> 26:29.580
明白没有

26:29.580 --> 26:30.580
ok

26:30.580 --> 26:31.580
好

26:31.580 --> 26:32.580
然后关于这个

26:32.580 --> 26:33.580
create setup store

26:33.580 --> 26:35.580
这个的话就不展开了

26:35.580 --> 26:36.580
这个代码就挺多的

26:36.580 --> 26:38.580
ok 这几百行代码

26:38.580 --> 26:39.580
看到没有

26:39.580 --> 26:40.580
挺多的

26:40.580 --> 26:41.580
ok

26:41.580 --> 26:42.580
你看

26:42.580 --> 26:43.580
整个这个

26:43.580 --> 26:44.580
挺多的

26:44.580 --> 26:45.580
都还没完

26:45.580 --> 26:46.580
都还没完

26:46.580 --> 26:47.580
到这就完了

26:47.580 --> 26:48.580
ok

26:48.580 --> 26:49.580
这个就挺多的

26:49.580 --> 26:50.580
这个你有兴趣的话

26:50.580 --> 26:51.580
你下去的话

26:51.580 --> 26:52.580
可以自己研究一下

26:52.580 --> 26:53.580
好吧

26:53.580 --> 26:55.580
这是关于这个

26:55.580 --> 26:57.580
关于这个define

26:57.580 --> 26:59.580
关于这个define store

26:59.580 --> 27:00.580
这核心的话

27:00.580 --> 27:01.580
实际上就是这里

27:01.580 --> 27:02.580
核心就这里

27:02.580 --> 27:04.580
其他的话就没什么了

27:04.580 --> 27:05.580
其他没什么

27:05.580 --> 27:06.580
这些环境的判断

27:06.580 --> 27:07.580
表示这边的话

27:07.580 --> 27:08.580
它是否是

27:08.580 --> 27:09.580
这个适合那个

27:09.580 --> 27:11.580
适合调试工具相关的

27:11.580 --> 27:12.580
看到没有

27:12.580 --> 27:15.580
div tools和调试工具相关的

27:15.580 --> 27:16.580
好

27:16.580 --> 27:18.580
这是关于这个define store

27:18.580 --> 27:19.580
好

27:19.580 --> 27:21.580
这边我们再来看个简单的

27:21.580 --> 27:22.580
再来看个简单的

27:22.580 --> 27:23.580
我们再来看一下

27:23.580 --> 27:25.580
这个store to refs

27:25.580 --> 27:26.580
首先的话

27:26.580 --> 27:27.580
我们还是回顾下它的用法

27:27.580 --> 27:31.210
还是回顾

27:31.210 --> 27:33.210
该方法的用法

27:33.210 --> 27:38.850
好

27:38.850 --> 27:39.850
该方法的用法的话

27:39.850 --> 27:40.850
这边

27:40.850 --> 27:41.850
我们当时的话

27:41.850 --> 27:42.850
是不是这样子来用的

27:42.850 --> 27:45.220
我们当时

27:45.220 --> 27:46.220
是不是这样子来用的

27:46.220 --> 27:49.920
把它改成view吧

27:49.920 --> 27:50.920
OK

27:50.920 --> 27:51.920
首先从pnr里面

27:51.920 --> 27:52.920
引入这个方法

27:52.920 --> 27:53.920
引入这个方法之后

27:53.920 --> 27:54.920
然后接下来这边

27:54.920 --> 27:55.920
从store里面

27:55.920 --> 27:56.920
这边把它传入什么呢

27:56.920 --> 27:57.920
传入这个

27:57.920 --> 28:00.920
就是这边使用store to refs

28:00.920 --> 28:01.920
它是个方法

28:01.920 --> 28:02.920
那传入什么呢

28:02.920 --> 28:03.920
传入你的仓库

28:03.920 --> 28:04.920
那结构出什么呢

28:04.920 --> 28:05.920
结构出你的

28:05.920 --> 28:06.920
响应式数据

28:06.920 --> 28:07.920
对不对

28:07.920 --> 28:08.920
好

28:08.920 --> 28:09.920
来我们来看一下原码

28:09.920 --> 28:12.740
原码

28:12.740 --> 28:16.820
我们这边来看一下

28:16.820 --> 28:18.820
我们这边还是到这里来

28:18.820 --> 28:19.820
到这里来

28:19.820 --> 28:20.820
我们来搜一下

28:20.820 --> 28:27.080
这里

28:27.080 --> 28:29.080
这个方法就比较短

28:29.080 --> 28:30.080
那这边的话

28:30.080 --> 28:31.080
你来看一下

28:31.080 --> 28:37.120
把它过来看一下

28:37.120 --> 28:38.120
它这边呢

28:38.120 --> 28:39.120
首先接收一个store

28:39.120 --> 28:40.120
你看和字是对应的

28:40.120 --> 28:41.120
对吧

28:41.120 --> 28:42.120
这边传入一个store

28:42.120 --> 28:43.120
这边接收一个store

28:43.120 --> 28:44.120
好那这边

28:44.120 --> 28:45.120
这边e4ls

28:45.120 --> 28:46.120
首先有个e4ls

28:46.120 --> 28:47.120
喷卵

28:47.120 --> 28:48.120
这个的话一看就是什么

28:48.120 --> 28:49.120
一看是不是就是

28:49.120 --> 28:51.120
针对这个v2版本的处理

28:51.120 --> 28:54.560
针对

28:54.560 --> 28:56.560
针对v2

28:56.560 --> 28:58.560
版本的这个处理

28:58.560 --> 29:00.560
OK

29:00.560 --> 29:02.560
那这个我们就不管它了

29:02.560 --> 29:03.560
主要看一下什么呢

29:03.560 --> 29:04.560
主要看一下这边

29:04.560 --> 29:05.560
这边的话

29:05.560 --> 29:06.560
这边这个图肉

29:06.560 --> 29:07.560
图肉的话

29:07.560 --> 29:08.560
到时候你得去看一下

29:08.560 --> 29:09.560
这个的话

29:09.560 --> 29:10.560
它是什么方法

29:10.560 --> 29:11.560
这个我记得好像是

29:11.560 --> 29:12.560
vue里面的方法

29:12.560 --> 29:13.560
OK

29:13.560 --> 29:14.560
我们看下一步

29:14.560 --> 29:15.560
下一步的话

29:15.560 --> 29:16.560
它这边是不是

29:16.560 --> 29:17.560
创建了一个空对象

29:17.560 --> 29:19.560
创建了一个空对象

29:19.560 --> 29:21.560
创建了空对象之后

29:21.560 --> 29:22.560
然后接下来

29:22.560 --> 29:23.560
它这边在干嘛

29:23.560 --> 29:25.560
这边它是不是在便利这个store

29:25.560 --> 29:26.560
对不对

29:26.560 --> 29:29.560
便利

29:29.560 --> 29:31.560
便利倉库

29:31.560 --> 29:33.560
便利这个倉库对象

29:33.560 --> 29:34.560
那接下来这边

29:34.560 --> 29:35.560
什么拿到这个key

29:35.560 --> 29:36.560
拿到key之后

29:36.560 --> 29:37.560
然后接下来这边storekey

29:37.560 --> 29:38.560
storekey的话

29:38.560 --> 29:39.560
是不是就拿到

29:39.560 --> 29:41.560
这个对应的这个值

29:41.560 --> 29:44.560
拿到倉库对象

29:44.560 --> 29:46.560
倉库对象

29:46.560 --> 29:49.560
对应的每一项

29:49.560 --> 29:52.560
每一项的这个值

29:53.560 --> 29:54.560
拿到这个值之后

29:54.560 --> 29:55.560
然后接下来

29:55.560 --> 29:56.560
这边进行一个判断

29:56.560 --> 29:57.560
如果这个值

29:57.560 --> 30:01.560
它是响应式的

30:01.560 --> 30:04.560
如果这个值

30:04.560 --> 30:05.560
本身是什么呢

30:05.560 --> 30:07.560
是响应式的

30:07.560 --> 30:13.640
本身是响应式的

30:13.640 --> 30:14.640
这个也是

30:14.640 --> 30:15.640
我记得也是

30:15.640 --> 30:16.640
vue里面的方法

30:16.640 --> 30:17.640
isRef

30:17.640 --> 30:18.640
isRaptive

30:18.640 --> 30:19.640
这两个都是

30:19.640 --> 30:20.640
vue里面的方法

30:20.640 --> 30:21.640
就判断它

30:21.640 --> 30:22.640
是否是响应式的值

30:22.640 --> 30:23.640
如果是响应式的值

30:23.640 --> 30:24.640
然后接下来

30:24.640 --> 30:25.640
我们这边就干嘛

30:25.640 --> 30:26.640
这边就是

30:26.640 --> 30:27.640
把它添加到

30:27.640 --> 30:29.640
Ref是对象上面

30:29.640 --> 30:30.640
对不对

30:30.640 --> 30:32.640
将这个值

30:32.640 --> 30:36.640
以原本的这个key

30:36.640 --> 30:38.640
添加到什么呢

30:38.640 --> 30:43.640
添加到Ref对象上面

30:43.640 --> 30:44.640
对吧

30:44.640 --> 30:47.640
整个 FOR 循环完了之后

30:47.640 --> 30:52.640
整个 FOR 循环完了之后

30:52.640 --> 30:53.640
然后所有

30:53.640 --> 30:55.640
响应式的值

30:55.640 --> 30:57.640
响应式的这个值

30:57.640 --> 31:01.640
被添加到了什么呢

31:01.640 --> 31:06.640
添加到了这个Ref对象上面

31:06.640 --> 31:07.640
对不对

31:07.640 --> 31:08.640
然后接下来这边

31:08.640 --> 31:09.640
向外部

31:09.640 --> 31:14.640
向外部返回这个Ref对象

31:14.640 --> 31:15.640
对不对

31:15.640 --> 31:16.640
然后接下来

31:16.640 --> 31:17.640
你外部就可以干嘛

31:17.640 --> 31:18.640
外部拿这边

31:18.640 --> 31:19.640
是不是就可以通过这个结构

31:19.640 --> 31:20.640
对不对

31:20.640 --> 31:21.640
结构

31:22.640 --> 31:23.640
这个的话就是这个

31:23.640 --> 31:24.640
Store to Rifts

31:24.640 --> 31:27.640
它的一个这个实现

31:27.640 --> 31:29.640
这个方法比较简单

31:29.640 --> 31:31.640
我们这边帮它看一下

31:31.640 --> 31:32.640
那整个这边的话

31:32.640 --> 31:33.640
这个月度圆满的话

31:33.640 --> 31:34.640
实际上就是这样子的

31:34.640 --> 31:37.640
首先就还是我强调的那个

31:37.640 --> 31:38.640
一定要耐心

31:38.640 --> 31:39.640
再吧

31:39.640 --> 31:40.640
还有一点

31:40.640 --> 31:41.640
还有一点我说漏了

31:41.640 --> 31:44.640
就是不要距离于这个细节

31:44.640 --> 31:46.640
不要这个

31:46.640 --> 31:50.640
我想想这个词该怎么说呢

31:50.640 --> 31:53.640
就是不要陷入于

31:53.640 --> 31:59.020
不要陷入于这个细节

31:59.020 --> 32:02.020
在月度圆满的时候

32:02.020 --> 32:07.020
在月度圆满的时候

32:07.020 --> 32:11.020
往往需要你站在一个什么呢

32:11.020 --> 32:18.030
站在一个更高的角度

32:18.030 --> 32:19.030
就有的同学的话

32:19.030 --> 32:20.030
他去月度圆满的话

32:20.030 --> 32:22.030
他就是会陷入某个细节

32:22.030 --> 32:23.030
比如说

32:23.030 --> 32:25.030
刚才我们这边介绍这个

32:25.030 --> 32:26.030
define store的时候

32:26.030 --> 32:27.030
你让他这边

32:27.030 --> 32:28.030
我们这边主要介绍什么

32:28.030 --> 32:29.030
主要介绍这边

32:29.030 --> 32:30.030
这个创建仓库

32:30.030 --> 32:31.030
对不对

32:31.030 --> 32:32.030
他如何创建仓库的

32:32.030 --> 32:34.030
但有的同学他就会陷入细节

32:34.030 --> 32:36.030
比如你这个U store点

32:36.030 --> 32:37.030
下方先评养这个又是什么

32:37.030 --> 32:39.030
这边这个hot又是什么

32:39.030 --> 32:41.030
hot id又是什么

32:41.030 --> 32:42.030
那你这样子看圆满的话

32:42.030 --> 32:45.030
实际上就是比较痛苦的

32:45.030 --> 32:46.030
你知道吧

32:46.030 --> 32:47.030
你这边看圆满的话

32:47.030 --> 32:48.030
你一定要什么呢

32:48.030 --> 32:49.030
站在一个比较高的角度

32:49.030 --> 32:51.030
一个比较宏观的角度

32:51.030 --> 32:52.030
比如说这边

32:52.030 --> 32:53.030
比如这边

32:53.030 --> 32:54.030
这边你看这个衣服

32:54.030 --> 32:55.030
衣服这个

32:55.030 --> 32:57.030
e is view2

32:57.030 --> 32:58.030
那你这边

32:58.030 --> 32:59.030
你猜的猜的

32:59.030 --> 33:00.030
这边就是做一个什么

33:00.030 --> 33:02.030
是不是做一个版本的判断

33:02.030 --> 33:04.030
判断你是view2还是view3

33:04.030 --> 33:05.030
那接下来

33:05.030 --> 33:06.030
是不是这边就是

33:06.030 --> 33:07.030
针对这个view2的这个处理

33:07.030 --> 33:08.030
对不对

33:08.030 --> 33:09.030
那我暂时的话

33:09.030 --> 33:10.030
我这边我看都不用看

33:10.030 --> 33:11.030
对不对

33:11.030 --> 33:12.030
我直接跳过这边

33:12.030 --> 33:13.030
这边我看都不用看

33:13.030 --> 33:14.030
我直接就看下面

33:14.030 --> 33:16.030
包括这上面也是

33:16.030 --> 33:17.030
对不对

33:17.030 --> 33:18.030
上面的话你看到这边

33:18.030 --> 33:19.030
这边的话

33:19.030 --> 33:20.030
他这边

33:20.030 --> 33:22.030
and and current instance

33:22.030 --> 33:25.030
and current instance.proxy

33:25.030 --> 33:26.030
对不对

33:26.030 --> 33:27.030
这边上面写了个注释

33:27.030 --> 33:28.030
这边是什么呢

33:28.030 --> 33:29.030
这个就是为了

33:29.030 --> 33:31.030
你的这个

33:31.030 --> 33:33.030
就开发者工具

33:33.030 --> 33:34.030
view2

33:34.030 --> 33:35.030
能够访问他们

33:35.030 --> 33:36.030
那这一块的话

33:36.030 --> 33:37.030
那很明显就是什么

33:37.030 --> 33:38.030
很明显什么就是和

33:38.030 --> 33:39.030
view2相关的

33:39.030 --> 33:40.030
对不对

33:40.030 --> 33:42.030
那我直接就跳过就可以了

33:42.030 --> 33:43.030
没有吧

33:43.030 --> 33:44.030
这个也是就是

33:44.030 --> 33:45.030
月度圆满的时候

33:45.030 --> 33:46.030
一个注意思想

33:46.030 --> 33:49.030
就千万不要陷入于细节

33:49.030 --> 33:52.030
要站在一个更高的角度去看

33:52.030 --> 33:54.030
看这个比较整体的这个方法

33:54.030 --> 33:56.030
他在做什么事情

33:56.030 --> 33:57.030
整体这一块

33:57.030 --> 33:58.030
他在做什么

33:58.030 --> 34:00.030
不用去看他一行一行的

34:00.030 --> 34:02.030
看一行一行他有些比如说

34:02.030 --> 34:03.030
这个函数里面

34:03.030 --> 34:04.030
他这个变量又来自于

34:04.030 --> 34:05.030
另外一个地方

34:05.030 --> 34:07.030
你一点一点去追

34:07.030 --> 34:08.030
有些时候你就忘了

34:08.030 --> 34:10.030
你最初其实是想看什么

34:10.030 --> 34:12.030
渺渺

34:12.030 --> 34:13.030
好

34:13.030 --> 34:15.030
这就是关于这个批详

34:15.030 --> 34:17.030
带着大家看了部分圆满

34:17.030 --> 34:19.030
看了一部分

34:19.030 --> 34:20.030
因为这个批详他

34:20.030 --> 34:22.030
本身的话他这个圆满

34:22.030 --> 34:23.030
所以说比起这个

34:23.030 --> 34:24.030
react那种级别的话

34:24.030 --> 34:25.030
还是少很多

34:25.030 --> 34:27.030
这边不到2000行

34:27.030 --> 34:29.030
比起那种react那种级别

34:29.030 --> 34:30.030
少很多

34:30.030 --> 34:31.030
但我这边也不可能就是

34:31.030 --> 34:32.030
专门开个课

34:32.030 --> 34:33.030
然后接下来

34:33.030 --> 34:35.030
一点一点带着来看

34:35.030 --> 34:36.030
主要就是

34:36.030 --> 34:37.030
给大家讲一下

34:37.030 --> 34:39.030
如何来看这个圆满

34:39.030 --> 34:40.030
OK

34:40.030 --> 34:41.030
剩下的话

34:41.030 --> 34:42.030
你这边如果你有兴趣的话

34:42.030 --> 34:44.030
因为不见得所有同学有兴趣

34:44.030 --> 34:45.030
对不对

34:45.030 --> 34:47.030
这个也是一个事实

34:47.030 --> 34:48.030
不见得所有同学

34:48.030 --> 34:49.030
对这个圆满有兴趣

34:49.030 --> 34:51.030
有同学就是想知道

34:51.030 --> 34:53.030
这个东西怎么用就可以了

34:53.030 --> 34:54.030
所以剩下的话

34:54.030 --> 34:55.030
你这边有兴趣的话

34:55.030 --> 34:56.030
你就可以自己的

34:56.030 --> 34:57.030
自己下来一点点

34:57.030 --> 34:59.030
自己看一下耐心

34:59.030 --> 35:02.030
还是我说说的那个耐心

35:02.030 --> 35:03.030
不要期望着什么

35:03.030 --> 35:05.030
就是一天就把它看完

35:05.030 --> 35:07.030
看圆满一定要耐心

35:07.030 --> 35:08.030
OK

35:08.030 --> 35:10.030
这些课的话就到这里

35:10.030 --> 35:11.030
再见

