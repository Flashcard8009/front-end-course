WEBVTT

00:00.750 --> 00:04.190
这些课呢 我们来讲一讲这个script set up

00:04.190 --> 00:07.550
这个玩意儿呢 应该是我们5u3里边

00:07.550 --> 00:10.190
现在经常使用的开发方式

00:10.190 --> 00:12.710
它这个玩意儿其实是一个语法堂

00:12.710 --> 00:14.830
它可以减化我们的代码

00:14.830 --> 00:17.990
其实它本身不带来什么样的新功能

00:17.990 --> 00:19.830
它只是为了减化代码的

00:19.830 --> 00:23.990
因此由于它减化的还是比较

00:23.990 --> 00:26.430
怎么说 还是比较出色的

00:26.430 --> 00:29.630
所以我们现在用5u3来做开发的话

00:29.910 --> 00:31.630
因为现在作为5u3开发的话

00:31.630 --> 00:34.390
基本上使用的是comparation API

00:34.390 --> 00:37.510
那么如果说你使用comparation API的话

00:37.510 --> 00:38.990
都可以使用这个语法堂

00:38.990 --> 00:40.830
来对代码的进行惊艰

00:40.830 --> 00:44.110
因为我们在使用comparation API的时候呢

00:44.110 --> 00:45.750
还是得用老方式

00:45.750 --> 00:48.430
过去还是得用老方式去写这么一个导出对象

00:48.430 --> 00:50.230
然后去写这么一个函数

00:50.230 --> 00:51.470
很函数

00:51.470 --> 00:52.670
因此有了它之后呢

00:52.670 --> 00:54.790
代码可以得到非常大的减化

00:54.790 --> 00:56.190
我们这里可怎么讲呢

00:56.190 --> 00:59.190
我们用一个实力效果为例

00:59.230 --> 01:03.390
来讲解我们如何把一个传统的代码形式

01:03.390 --> 01:05.350
转换成这种格式

01:05.350 --> 01:08.390
已经来分析一下它里面带来的哪些变化

01:09.190 --> 01:10.630
我这里做了一个效果

01:10.630 --> 01:12.830
就非常简单的一个轮波图

01:12.830 --> 01:14.830
我们来认识一下这一块代码吧

01:15.430 --> 01:17.430
首先它看一下这个轮波图组件

01:17.430 --> 01:19.550
它的介绍部分

01:19.550 --> 01:20.470
代码很简单

01:20.470 --> 01:21.790
它接收一个属性

01:21.790 --> 01:25.910
这个属性里面接收一个制服刺的数组

01:25.950 --> 01:29.190
表示说我有哪些图片需要展示

01:29.190 --> 01:30.310
你给我一个数组就完事了

01:30.310 --> 01:31.710
它有个默认值

01:31.710 --> 01:33.270
然后定义了这么一个事件

01:33.270 --> 01:34.150
而劝举

01:34.150 --> 01:37.310
就当我去改变这个图片的时候

01:37.310 --> 01:38.910
它会触发这个事件

01:38.910 --> 01:42.870
以便让副组件知道我这个图片变化了

01:42.870 --> 01:44.510
它可能会显示一些别的东西

01:44.510 --> 01:45.950
比方说像这里

01:45.950 --> 01:49.310
副组件它就显示了这么一个状态

01:49.310 --> 01:51.510
目前到了第几张图了

01:51.510 --> 01:52.790
需要让副组件知道

01:52.830 --> 01:55.750
因此我定义了这么一个事件

01:56.990 --> 01:58.310
然后就是CETA把函数了

01:58.310 --> 01:59.630
函数里面有啥呢

01:59.630 --> 02:04.670
就一个index表示目前显示的第几张轮波图

02:04.670 --> 02:05.950
然后提供了一个方法

02:05.950 --> 02:06.790
可以切换

02:06.790 --> 02:09.590
切换我也做的也非常非常的简单

02:09.590 --> 02:12.390
就是给我一个新的值

02:12.390 --> 02:16.630
我给它替换为index.value就完事了

02:16.630 --> 02:17.990
然后出发了一个事件

02:17.990 --> 02:19.470
其实这个函数一定要说

02:19.470 --> 02:21.390
再把它写好一点的话

02:21.390 --> 02:22.470
还可以继续写一下

02:22.510 --> 02:24.830
比方说像这个i如果说小于等于0

02:24.830 --> 02:26.630
那么就把i负值为0

02:26.630 --> 02:30.350
如果说l是如果说i大于了

02:30.350 --> 02:31.110
什么呢

02:31.110 --> 02:35.310
就是这个probs里面的img是

02:35.310 --> 02:38.150
点lence-1

02:38.150 --> 02:39.350
大于的最大下标

02:39.350 --> 02:41.270
那么就把它负值为最大下标

02:41.270 --> 02:41.670
对吧

02:41.670 --> 02:44.190
稍微再处理一下

02:44.190 --> 02:47.910
如果说算出来的i呢

02:47.910 --> 02:51.190
跟我们目前的index.value是一样的

02:51.230 --> 02:52.470
就点击到当前图片

02:52.470 --> 02:54.310
那就没有必要做任何操作了

02:54.310 --> 02:55.510
反过去完事了

02:55.510 --> 02:56.990
你稍微控制一下

02:56.990 --> 02:57.830
那么否则的话

02:57.830 --> 02:59.750
我就把index.value

02:59.750 --> 03:00.790
负值为一个新的值

03:00.790 --> 03:01.950
然后出发一个实现

03:01.950 --> 03:02.630
完事了

03:02.630 --> 03:03.830
然后把我们的index.value

03:03.830 --> 03:06.790
和这个switch2函数导出

03:06.790 --> 03:07.830
然后到模板里面去

03:07.830 --> 03:09.350
模板里面也没啥东西

03:09.350 --> 03:11.590
就是首先判断一下

03:11.590 --> 03:13.430
这个整个dav要不要显示

03:13.430 --> 03:15.230
如果说这个输出是空的

03:15.230 --> 03:16.990
那我没必要显示了

03:16.990 --> 03:18.590
然后里面有两块

03:18.590 --> 03:21.150
一个是显示图片的dav

03:21.510 --> 03:23.710
这个dav里面包含了所有的图片

03:23.710 --> 03:25.470
你看用一个v4循环

03:25.470 --> 03:26.470
这个没问题吧

03:26.470 --> 03:29.710
图片的路径就是这个数组里面来支付串

03:29.710 --> 03:31.390
然后这个dav呢

03:31.390 --> 03:32.350
它可以做一个样式

03:32.350 --> 03:34.510
就是transform

03:34.510 --> 03:38.070
当我们它这个transform的偏移量呢

03:38.070 --> 03:40.830
就按照这个当前显示的图片来进行偏移

03:40.830 --> 03:43.150
比方说当前图片显示的第二张图片

03:43.150 --> 03:43.590
对吧

03:43.590 --> 03:44.670
那么这里就是1

03:44.670 --> 03:46.390
那么就是负的1%

03:46.390 --> 03:48.390
它就往左边移动了一个升位了

03:48.390 --> 03:48.750
是吧

03:48.750 --> 03:49.750
是这个意思吧

03:49.790 --> 03:53.190
根据当前的图片下标

03:53.190 --> 03:55.830
来决定我该怎么来偏移

03:55.830 --> 03:57.230
然后下边的是个指示器

03:57.230 --> 03:59.030
就是一些偏远数

03:59.030 --> 04:00.550
就是下边的一个小圈圈

04:00.550 --> 04:02.310
就这一块

04:02.310 --> 04:04.350
如果说你看过我的一些基础课程的话

04:04.350 --> 04:06.910
这一块都太简单了

04:06.910 --> 04:07.110
好

04:07.110 --> 04:09.350
这个偏远数就是一个小圈圈

04:09.350 --> 04:12.510
有几张图片就有几张小圈圈

04:12.510 --> 04:14.190
然后它有一个样式

04:14.190 --> 04:17.230
就当前如果说下标

04:17.230 --> 04:18.150
圈圈的下标

04:18.190 --> 04:20.710
跟我们目前显示的图片的下标是一致的

04:20.710 --> 04:22.190
给它加一个Activ的样式

04:22.190 --> 04:23.350
所以说你会看到

04:23.350 --> 04:24.790
这里有一个Activ的样式

04:24.790 --> 04:26.390
是不太一样的

04:26.390 --> 04:27.670
其他的没了

04:27.670 --> 04:28.870
点击这个span的话

04:28.870 --> 04:31.510
我们可以调用这个switch2函数

04:31.510 --> 04:35.430
它全面给我是那个VALOR

04:35.430 --> 04:37.230
这个我以前说过没有

04:37.230 --> 04:38.670
就现在用5u3开发的话

04:38.670 --> 04:42.070
推荐大家使用这个vsc的插件

04:42.070 --> 04:45.700
VALOR

04:45.700 --> 04:47.060
就是这个

04:47.060 --> 04:48.700
就这个

04:48.740 --> 04:50.060
把插件按上

04:50.060 --> 04:51.740
前面这个玩意

04:51.740 --> 04:52.860
它其实不是代码

04:52.860 --> 04:54.420
是这个插件给我提示的

04:54.420 --> 04:55.380
就是说

04:55.380 --> 04:57.340
你可以通过

04:57.340 --> 04:59.380
你在这里的代码

04:59.380 --> 05:01.100
是可以通过这个东西

05:01.100 --> 05:02.980
来访问到事件参数的

05:02.980 --> 05:04.180
它就给我一个提示

05:04.180 --> 05:06.300
其他没啥

05:06.300 --> 05:06.540
好了

05:06.540 --> 05:07.900
这个组件就解释清楚了吧

05:07.900 --> 05:08.780
没问题吧

05:08.780 --> 05:08.900
好

05:08.900 --> 05:10.420
咱们来看一下APP组件的

05:11.780 --> 05:13.340
先看GS

05:13.340 --> 05:14.380
GS里边看上去

05:14.380 --> 05:15.060
代码挺多的

05:15.060 --> 05:16.540
其实很简单的

05:16.540 --> 05:17.140
GS里边

05:17.180 --> 05:19.180
首先我定义了一个数据

05:19.180 --> 05:20.860
表示我要得到目前

05:20.860 --> 05:22.140
显示的是第几章

05:22.140 --> 05:23.820
目前一开始默认为0

05:25.860 --> 05:27.460
然后定义好了一个数组

05:27.460 --> 05:29.740
这个数组里面包含了多张图片

05:29.740 --> 05:31.420
这里有个小细节

05:31.420 --> 05:33.820
就是图片的路径

05:33.820 --> 05:37.140
你千万不要直接用这个制服串来书写

05:37.140 --> 05:38.340
你这样玩意是不行的

05:38.340 --> 05:39.700
你直接用制服串的话

05:40.940 --> 05:41.340
刷新

05:44.380 --> 05:45.460
它居然可以

05:45.460 --> 05:45.940
不可能

05:47.140 --> 05:50.900
怎么可能

05:50.900 --> 05:51.860
先看一下元素

05:53.740 --> 05:55.820
应该是不可能能显示出来的

05:59.780 --> 06:01.300
这个图片路径能显示出来吗

06:01.300 --> 06:07.020
能显示出来就乖了

06:07.020 --> 06:08.660
这个路径应该是显示不出来的

06:14.170 --> 06:14.770
对了的

06:14.770 --> 06:15.570
没有显示出来

06:15.570 --> 06:17.050
第一章图片肯定是没有显示出来的

06:17.050 --> 06:18.210
第一章图片

06:18.210 --> 06:20.970
我们把它opened为是NewTab

06:20.970 --> 06:22.690
你看是找不到的

06:22.690 --> 06:24.050
因为第一章图片没有显示的话

06:24.050 --> 06:26.250
这里实际上是显示的第二章

06:26.250 --> 06:26.970
是这章图片

06:26.970 --> 06:28.330
看到没

06:28.330 --> 06:29.690
所以第一章图片没有显示出来

06:29.690 --> 06:30.530
为什么呢

06:30.530 --> 06:31.570
就不用说了是吧

06:31.570 --> 06:34.490
因为打包之后的路径是不一样的

06:34.490 --> 06:36.810
因此利用这个路径显示放进去的话

06:36.810 --> 06:39.770
它是目前开发管理里面的目录

06:39.770 --> 06:41.690
打包之后就完全不一样了

06:41.690 --> 06:43.770
所以说你要用一个6URIO

06:43.770 --> 06:46.570
这一块是一个跟本节课无关的知识

06:46.570 --> 06:47.610
大家注意一下

06:48.890 --> 06:50.770
那么只有一个6URIO的时候

06:50.770 --> 06:51.650
它会进行分析

06:52.650 --> 06:55.490
当它分析到这个6URIO的代码之后

06:55.490 --> 06:58.250
它会把这个图片相对于当前

06:58.250 --> 07:01.690
这个玩意是表示的是当前模块的路径

07:01.690 --> 07:03.970
当前这个APP模块的路径

07:03.970 --> 07:06.450
那么它会相对于当前路径去找到这个图片

07:06.450 --> 07:09.450
同时把它转换成最终的打包路径

07:09.450 --> 07:11.450
也就是说这一块得到的路径呢

07:11.450 --> 07:12.610
是得到的是打包路径

07:12.610 --> 07:14.250
我们可以去打印一下这个data

07:15.250 --> 07:16.890
这个关机样的知识啊

07:16.890 --> 07:17.770
表现一下就可以了

07:18.810 --> 07:22.370
你看得到的是一个UIL地址

07:22.370 --> 07:23.010
是吧

07:23.010 --> 07:26.010
这个UIL地址是得到了它的完整路径

07:26.010 --> 07:28.130
就是这个就是打包之后的路径

07:28.210 --> 07:31.090
如果说你我们现在还在开发模式

07:31.090 --> 07:33.530
用npm装带舞运行的

07:33.530 --> 07:35.770
如果说你用npm装bio的运行之后

07:35.770 --> 07:37.010
这个路径还会变

07:37.010 --> 07:38.610
它会自动的给你处理

07:38.610 --> 07:41.090
所以说如果说你要做动态的路径的话

07:41.090 --> 07:42.450
你将用这种方式

07:42.450 --> 07:44.210
但是这里有一个小点

07:44.210 --> 07:45.490
就是这种方式的话

07:45.490 --> 07:47.090
你这一块不能放变量

07:47.090 --> 07:48.890
就这一块不能放变量

07:48.890 --> 07:50.650
你只能放制服器

07:50.650 --> 07:52.250
模板制服器是可以的

07:52.250 --> 07:53.250
如果说你要动态的话

07:53.250 --> 07:55.290
在某一个地方可以拼接上变量

07:55.290 --> 07:56.290
这是可以的

07:56.290 --> 07:57.850
它会给你进行分析

07:57.850 --> 07:59.970
但是你不能直接把一个变量放到这个位置

07:59.970 --> 08:01.330
那它分析不出来了

08:01.330 --> 08:02.650
因为它在变异的时候

08:02.650 --> 08:04.330
是还没有运行的状态

08:04.330 --> 08:05.410
没有运行的状态的话

08:05.410 --> 08:07.730
它是不知道这个变量的值是多少的

08:07.730 --> 08:09.730
但是如果说你在这个地方

08:09.730 --> 08:11.890
用一个变量来替换的话

08:11.890 --> 08:13.370
它为什么就可以呢

08:13.370 --> 08:15.010
是因为它就这样处理的

08:15.010 --> 08:17.450
它把这个目录下边的所有的接匹机文件

08:17.450 --> 08:19.250
全部给你生成到打包目录

08:19.250 --> 08:20.930
这样子它就能处理的

08:20.930 --> 08:22.530
就这么个意思

08:22.530 --> 08:23.930
就说回来

08:23.930 --> 08:27.050
因为这个块不是我们这里刻的重点

08:27.130 --> 08:29.090
总之生成一个图片的素组

08:29.090 --> 08:30.090
没问题吧

08:30.090 --> 08:31.570
然后呢

08:31.570 --> 08:35.130
得到

08:35.130 --> 08:36.690
这个下面这个玩意是啥呢

08:36.690 --> 08:40.130
下面的玩意是我要给它设置个Rave

08:40.130 --> 08:41.410
给这个Carousel组件

08:41.410 --> 08:44.130
就刚才我们编写的组件设置一个Rave

08:44.130 --> 08:47.130
因为我以后要调整它里面的一个方法

08:47.130 --> 08:49.250
这是生命这个Rave

08:49.250 --> 08:51.810
以后它是跟这里关联的

08:51.810 --> 08:54.010
然后下面那个是提供两个函数

08:54.010 --> 08:56.570
一个函数是处理一个事件

08:56.570 --> 08:58.490
就它不是一个事件嘛 对吧

08:58.490 --> 09:01.050
当它改变之后它会调用这个函数

09:01.050 --> 09:03.610
那么这个函数要做的事情其实很简单

09:03.610 --> 09:05.490
就是把这个玩意给它重新复制

09:05.490 --> 09:07.410
因为它因为植住件它告诉我

09:07.410 --> 09:09.090
目前新的下标是啥

09:09.090 --> 09:10.490
那么我把记录一下

09:10.490 --> 09:11.610
记录这个下标的目的呢

09:11.610 --> 09:14.290
其实就是为了在这里显示一下

09:14.290 --> 09:16.930
我在这里把这个下标显示了出来

09:16.930 --> 09:18.970
就在副组件里面

09:18.970 --> 09:22.570
在这个位置显示了它的下标

09:22.570 --> 09:24.810
然后下来有个函数

09:24.810 --> 09:28.890
这个函数呢是来处理事件的

09:28.890 --> 09:31.730
就是当我们点击左有两个按钮的时候

09:31.730 --> 09:34.090
点击左按钮和右按钮的时候呢

09:34.090 --> 09:35.210
它会触发这个函数

09:35.210 --> 09:36.290
你看点击的时候

09:36.290 --> 09:38.010
券举它会传一个参数进来

09:38.010 --> 09:39.610
就是上一张图片的下标

09:39.610 --> 09:41.410
下一张图片的下标传进来

09:41.410 --> 09:43.570
那么这个函数要做的事情特别简单

09:43.570 --> 09:47.010
我就是把Rave里面通过Value

09:47.010 --> 09:49.970
是不是可以拿到这个组件的实力

09:49.970 --> 09:52.850
这个组件里面是不是提供了一个方法

09:52.890 --> 09:54.450
叫做switch to方法

09:54.450 --> 09:56.210
切换到某一张

09:56.210 --> 09:57.770
所以说我交用那个方法

09:57.770 --> 09:58.730
切换到某一张

09:58.730 --> 10:00.050
完事了这就是介绍

10:00.050 --> 10:01.250
全部导出

10:01.250 --> 10:02.610
模板里面也非常简单

10:02.610 --> 10:04.850
就是一个carousel组件

10:04.850 --> 10:06.050
有一个Rave

10:06.050 --> 10:07.850
绑进了它不是要属性吗

10:07.850 --> 10:09.890
把它所有的图片数据给它

10:09.890 --> 10:11.170
然后做出一个事件

10:11.170 --> 10:12.970
当它切换了之后呢

10:12.970 --> 10:14.210
它会运行这个事件

10:14.210 --> 10:18.290
我就会改变它的这里面的current index

10:18.290 --> 10:19.170
就完了

10:19.170 --> 10:20.570
下边有两个按钮

10:20.570 --> 10:21.650
一个是左

10:21.650 --> 10:22.530
一个是右

10:22.530 --> 10:23.170
对吧

10:23.170 --> 10:24.090
刚才看到过了

10:24.090 --> 10:25.530
点击的时候呢

10:25.530 --> 10:27.530
切换到上一张和下一张

10:27.530 --> 10:29.210
然后我顺便的给这个按钮

10:29.210 --> 10:31.850
设置了一下一个disable

10:31.850 --> 10:32.890
就当第一张的时候

10:32.890 --> 10:34.370
左边不能点击了

10:34.370 --> 10:35.410
当最后一张的时候

10:35.410 --> 10:37.450
右边不能点击了

10:37.450 --> 10:38.490
中间显示一个下标

10:38.490 --> 10:39.130
没了

10:39.130 --> 10:40.530
这就是全部的代码

10:42.330 --> 10:43.970
想完了个代码之后呢

10:43.970 --> 10:45.050
我就来说一说

10:45.050 --> 10:49.650
它如何来把它变成script setup格式

10:49.650 --> 10:51.570
就是这个按钮呢

10:51.570 --> 10:52.570
虽然小

10:52.570 --> 10:53.250
但是呢

10:53.250 --> 10:56.650
就足以说明几乎99%

10:56.650 --> 11:00.930
你要用到的这个script setup里面

11:00.930 --> 11:02.010
注意到各种问题

11:03.250 --> 11:06.050
那么我们首先去改造一下这个APP吧

11:06.050 --> 11:08.530
这个组件我们如何把它改造成

11:08.530 --> 11:09.610
setup格式呢

11:09.610 --> 11:10.930
非常简单啊

11:10.930 --> 11:12.450
你只需要把这个元素呢

11:12.450 --> 11:13.770
给它加上一个setup

11:15.170 --> 11:15.810
完了

11:15.810 --> 11:16.210
然后呢

11:16.210 --> 11:18.010
如果说你是type scripts呢

11:18.010 --> 11:19.530
你给它加上一个node

11:19.530 --> 11:20.890
ts

11:20.890 --> 11:21.170
不过呢

11:21.170 --> 11:22.690
这一块我们补设你的ts

11:23.970 --> 11:25.890
然后加上这个之后啊

11:25.890 --> 11:29.170
同学们你就不再需要去导出这个对象了

11:29.170 --> 11:30.330
没必要了

11:30.330 --> 11:32.650
你这里边写的所有代码

11:32.650 --> 11:34.410
除了导入代码之外

11:34.410 --> 11:36.010
写的所有的正式的代码

11:36.010 --> 11:40.890
其实它就是默认包含在setup函数里面去了

11:40.890 --> 11:42.730
也就说我们只需要

11:42.730 --> 11:46.220
把这一块代码

11:46.260 --> 11:49.660
给它弄出来

11:49.660 --> 11:52.380
组件的注册不需要你处理了

11:52.380 --> 11:54.260
它会自动帮你处理

11:54.260 --> 11:55.620
这一块不需要了

11:55.620 --> 11:56.020
然后呢

11:56.020 --> 11:57.620
这里返回也不需要了

11:57.620 --> 11:59.820
压根不需要你返回任何东西了

11:59.820 --> 12:02.980
你相当于是你在这里面定义的所有的顶层的东西

12:02.980 --> 12:04.620
全部会自动返回

12:04.620 --> 12:05.700
你这么理解啊

12:05.700 --> 12:07.420
current index

12:07.420 --> 12:08.540
data

12:08.540 --> 12:11.140
在这里面顶层定义的函数也好

12:11.140 --> 12:12.780
变量也好

12:12.780 --> 12:14.260
都算是返回结果

12:14.260 --> 12:15.380
模板里面直接用

12:16.420 --> 12:17.020
完了

12:17.060 --> 12:20.730
你看一下

12:20.730 --> 12:21.530
放心啊

12:21.530 --> 12:23.010
看下又没爆错

12:23.010 --> 12:24.770
没有任何错误是吧

12:24.770 --> 12:25.370
没有任何错

12:25.370 --> 12:26.650
我们来试一下

12:26.650 --> 12:29.490
右左右左右点击

12:29.490 --> 12:30.690
是不是都没问题了

12:30.690 --> 12:32.970
它其实就是一个语法堂

12:32.970 --> 12:34.410
它最终转换的结果呢

12:34.410 --> 12:36.970
其实就是我最开始写的那种格式

12:38.090 --> 12:40.330
我最后把最开始的格式

12:40.330 --> 12:41.130
保存一下

12:41.130 --> 12:44.150
保存一份吧

12:44.150 --> 12:44.790
我这个

12:46.230 --> 12:47.670
我这个复制一下啊

12:47.670 --> 12:50.150
这是普通的格式

12:50.150 --> 12:51.230
下边那个呢

12:51.230 --> 12:54.950
是把它变回了setup的格式

12:54.950 --> 12:55.510
setup

12:55.510 --> 12:56.310
再来一次啊

12:57.390 --> 12:58.510
把这一盒带吧

12:58.510 --> 12:59.430
扔出去

12:59.430 --> 13:04.490
完事了

13:04.490 --> 13:06.010
就完事了

13:06.010 --> 13:06.890
好

13:06.890 --> 13:08.770
这是对app的改造

13:08.770 --> 13:09.090
然后呢

13:09.090 --> 13:10.130
对这个carousel呢

13:10.130 --> 13:11.370
我们也进行一下改造

13:11.370 --> 13:12.570
那么这里边设计到问题呢

13:12.570 --> 13:13.410
比较多啊

13:13.410 --> 13:14.890
可能改造的时候呢

13:14.890 --> 13:15.930
也不算什么大问题啊

13:15.930 --> 13:16.650
非常简单

13:16.650 --> 13:17.890
来看一下吧

13:17.890 --> 13:19.130
模板都是不变的啊

13:19.130 --> 13:20.770
模板都是完全一样的鞋棒

13:20.770 --> 13:21.690
说不用去看模板

13:21.690 --> 13:22.690
不用去看CSS

13:22.690 --> 13:24.650
这些玩意儿没有什么变化

13:24.650 --> 13:25.890
就看个介绍

13:25.890 --> 13:27.490
我们首先要把它加上一个setup

13:28.970 --> 13:29.370
然后呢

13:29.370 --> 13:30.450
把这一坨带马了

13:30.450 --> 13:31.730
扔出来

13:31.730 --> 13:33.250
不用返回了

13:33.250 --> 13:34.250
它这都帮你处理了

13:36.330 --> 13:36.770
扔出来

13:37.810 --> 13:37.970
好

13:37.970 --> 13:38.650
扔出来之后呢

13:38.650 --> 13:39.970
有一些问题需要处理啊

13:39.970 --> 13:41.370
首先是这个probs

13:42.410 --> 13:43.610
这个probs怎么办呢

13:43.610 --> 13:44.770
因为你这个上下文里边

13:44.770 --> 13:46.290
是没有这个东西的呀

13:46.290 --> 13:47.450
哪有这个probs啊

13:47.450 --> 13:49.090
以后我就会把这个删除掉啊

13:50.130 --> 13:51.370
没有这个probs怎么办呢

13:51.410 --> 13:53.770
我们这里边有一个东西

13:56.620 --> 13:59.060
叫做defineprobs

14:00.420 --> 14:02.700
这个东西只能在这个scripts

14:02.700 --> 14:04.660
setup里边使用啊

14:04.660 --> 14:05.780
你不能在这个正式的

14:05.780 --> 14:07.220
这种环境里边使用的

14:07.220 --> 14:07.660
为什么呢

14:07.660 --> 14:08.860
因为它不是

14:08.860 --> 14:09.540
这个函数啊

14:09.540 --> 14:12.380
它不会到运行时

14:12.380 --> 14:14.700
就是真正的我们到运行带马的环境呢

14:14.700 --> 14:16.860
它是根本就没有这个函数的

14:16.860 --> 14:19.100
它只在编译时有效

14:19.100 --> 14:21.060
就是在打包的时候有效

14:21.060 --> 14:25.470
那么我们把这个函数叫做一个红

14:25.470 --> 14:26.270
红函数

14:27.270 --> 14:28.310
它其实呢

14:28.310 --> 14:32.230
它的作用就是把你这一块带马生成到

14:32.230 --> 14:32.950
因为打包的时候

14:32.950 --> 14:34.310
它会给你变化是吧

14:34.310 --> 14:36.270
变成这个种格式

14:36.270 --> 14:37.550
那么具体怎么写呢

14:37.550 --> 14:41.230
defineprobs里边你写一个对象

14:42.550 --> 14:44.790
这对象就是这里的对象

14:44.790 --> 14:45.190
对吧

14:45.190 --> 14:46.390
也就是说你这个扩号

14:46.390 --> 14:48.430
这个参数里边传的是啥

14:48.430 --> 14:50.150
它最后定义到这个probs里边

14:50.150 --> 14:50.950
这边就是啥

14:50.950 --> 14:51.630
就这么简单

14:51.670 --> 14:54.670
所以说你把这一块给它复制

14:55.990 --> 14:56.990
粘贴过去就完事了

14:58.430 --> 14:59.070
就这么简单

15:00.190 --> 15:03.390
然后呢你这一块呢是

15:03.390 --> 15:03.910
有的时候呢

15:03.910 --> 15:05.670
我们可能会不需要这么详细啊

15:05.670 --> 15:07.150
也可能会写个数组之类的

15:07.150 --> 15:08.270
也可以没问题

15:08.270 --> 15:09.550
没问题的

15:09.550 --> 15:11.190
你反正你之前那个写的是啥

15:11.190 --> 15:13.870
你把这个放到这个参数里边就完事了

15:13.870 --> 15:15.270
它就会帮你生成那个属性

15:16.430 --> 15:17.910
而且这个属性呢

15:17.910 --> 15:19.190
你不用做任何接收

15:19.190 --> 15:21.230
博伴里边就可以直接使用

15:21.270 --> 15:22.750
博伴里边是直接使用这个属性的

15:22.750 --> 15:23.710
没问题的啊

15:23.710 --> 15:25.390
在那里在那里在这里

15:25.390 --> 15:25.870
没问题

15:26.990 --> 15:28.430
如果说你在代码里边

15:28.430 --> 15:30.430
在GS代码里边要用这个属性的话

15:30.430 --> 15:31.750
也一样的啊

15:31.750 --> 15:32.670
接受一下probs

15:34.550 --> 15:35.630
没了

15:35.630 --> 15:37.030
没诱惑了

15:37.030 --> 15:37.870
你可以直接使

15:37.870 --> 15:38.750
你可以使用它了

15:40.790 --> 15:41.990
然后还有啥

15:41.990 --> 15:43.470
probs搞定了

15:43.470 --> 15:44.590
那么接下来是事件

15:45.270 --> 15:46.750
事件处理

15:46.750 --> 15:48.150
那么这个事件处理呢

15:48.150 --> 15:49.150
emmage

15:49.150 --> 15:50.430
我们也是使用一个红

15:52.030 --> 15:53.550
这个define

15:53.550 --> 15:54.710
emmage

15:54.710 --> 15:57.110
你看这些玩意是不需要导入的

15:57.110 --> 15:58.150
因为它不在运行时

15:58.150 --> 15:59.830
它只在编印时有效

15:59.830 --> 16:01.750
编印的时候它是自动给你处理的东西

16:01.750 --> 16:03.270
从下面的这种格式了

16:03.270 --> 16:05.510
那么这个define emmage也是完全一样的

16:05.510 --> 16:07.070
你这里配置的是啥

16:07.070 --> 16:08.110
你复制

16:08.110 --> 16:10.350
粘贴到这就完事了

16:10.350 --> 16:11.950
emmage

16:11.950 --> 16:13.550
那么后边就可以使用这个emmage

16:13.550 --> 16:14.710
来

16:14.710 --> 16:16.150
用的是emmage

16:16.150 --> 16:18.030
名字你自己随便学吧

16:18.030 --> 16:19.390
通过这个emmage

16:19.430 --> 16:21.150
来拨出事件了

16:21.150 --> 16:22.430
没了

16:22.430 --> 16:23.390
要取消掉

16:23.390 --> 16:24.230
取消

16:24.230 --> 16:25.230
保存

16:25.230 --> 16:26.470
试一下呢

16:30.470 --> 16:32.510
没有任何问题

16:32.510 --> 16:34.670
代码变得更加简洁了

16:34.670 --> 16:36.470
这里有问题了

16:36.470 --> 16:37.990
以后再说这些问题

16:37.990 --> 16:40.830
代码会变得更加简洁了

16:40.830 --> 16:42.870
那么就不需要你去导出

16:42.870 --> 16:43.750
导出个对象

16:43.750 --> 16:46.510
然后再setup里边再配置setup

16:46.510 --> 16:48.430
然后再去返回

16:48.430 --> 16:49.430
它就太繁琐了

16:49.430 --> 16:51.510
你看这边24到52

16:51.510 --> 16:54.350
那么这边的代码就会少很多

16:54.350 --> 16:56.270
24到47

16:56.270 --> 16:57.470
如果说你在复杂点的话

16:57.470 --> 17:00.110
这个代码会少很多的

17:00.110 --> 17:00.310
好

17:00.310 --> 17:01.990
然后说差别了

17:01.990 --> 17:04.310
差别是有的

17:04.310 --> 17:06.670
有什么样的差别呢

17:06.670 --> 17:07.590
首先说这边

17:07.590 --> 17:10.750
为什么现在点左右不好使呢

17:10.750 --> 17:17.620
我们先把它暂时替换为之前的格式

17:17.620 --> 17:19.820
为了让你们看得清楚

17:19.860 --> 17:21.540
我在这边

17:21.540 --> 17:25.100
去打印一下common rave

17:25.100 --> 17:26.780
当你要使用Rave的时候

17:26.780 --> 17:28.980
会有一些差别

17:28.980 --> 17:30.860
打印一下个Rave

17:30.860 --> 17:35.500
就是当指组件是这种原式格式的话

17:35.500 --> 17:37.340
用那种传统格式的话

17:37.340 --> 17:40.660
你的Rave会得到一个什么东西呢

17:40.660 --> 17:43.140
但是差不多

17:43.140 --> 17:44.380
刷新

17:44.380 --> 17:45.380
我们点击右

17:45.380 --> 17:47.380
打印这个Rave

17:47.420 --> 17:49.100
得到的当然就是个组件实力

17:49.100 --> 17:50.100
是吧

17:50.100 --> 17:51.980
你会发现这个组件实力里边

17:51.980 --> 17:53.340
看到这里面

17:53.340 --> 17:55.500
这里是来自于哪呢

17:55.500 --> 17:57.540
是不是来自于指组件

17:57.540 --> 18:00.500
那个setup函数返回的东西

18:00.500 --> 18:01.460
换句话说

18:01.460 --> 18:02.700
啥意思呢

18:02.700 --> 18:03.820
就是指组

18:03.820 --> 18:06.380
就是如果说用传统的方式来处理的话

18:06.380 --> 18:09.500
你这个setup返回的东西

18:09.500 --> 18:11.060
这个玩意

18:11.060 --> 18:16.300
它是会附着在当前这个组件实力里面的

18:16.300 --> 18:18.460
这也是传统做法

18:18.460 --> 18:20.220
所说的事

18:20.220 --> 18:23.540
当然现在的五六官方是不太推荐这种做法了

18:23.540 --> 18:28.260
他认为一个组件应该是自我管理他的那些实力成员

18:28.260 --> 18:31.620
不应该搞一大堆东西让外面去调用

18:31.620 --> 18:34.540
这些都是不对的

18:34.540 --> 18:37.220
甚至我都觉得

18:37.220 --> 18:38.180
不到万不得已

18:38.180 --> 18:41.140
你不要去使用这个对组件使用Rave

18:41.140 --> 18:42.500
你要去改啥呀

18:42.500 --> 18:45.500
你很快就会打破他的单向数据流

18:45.500 --> 18:48.900
一不小心有些同学就经常会使用这个组件的Rave里面

18:48.900 --> 18:51.300
直接去改他的数据了

18:51.300 --> 18:53.540
比方说这里边一个数据叫做index

18:53.540 --> 18:54.660
上内部的数据

18:54.660 --> 18:56.860
好万你就直接给我来了

18:56.860 --> 18:58.740
index加加

18:58.740 --> 19:01.140
这种特别容易犯错

19:01.140 --> 19:02.420
最好不要这样弄

19:02.420 --> 19:03.700
但是如果说你一定要弄的话

19:03.700 --> 19:04.900
你会发现

19:04.900 --> 19:08.860
在传统模式下面你是能得到这些函数的

19:08.860 --> 19:11.700
但是如果说你把它切换成为新的方式

19:11.700 --> 19:13.020
用setup的方式

19:13.020 --> 19:16.460
再把它切换回来

19:16.500 --> 19:18.740
好 然后咱们再点击

19:18.740 --> 19:21.260
你会发现不一样了

19:21.260 --> 19:25.340
打开看一下

19:25.340 --> 19:28.860
你会发现特别的干净

19:28.860 --> 19:31.140
干净到

19:31.140 --> 19:32.300
干净到里啥也没有

19:32.300 --> 19:33.420
干净到这里边

19:33.420 --> 19:34.900
什么都没有

19:34.900 --> 19:38.420
你就是休想去用它里面的任何东西

19:38.420 --> 19:40.140
它没有东西

19:40.140 --> 19:43.220
应该在这

19:43.220 --> 19:45.180
是吧 非常干净

19:45.180 --> 19:48.060
也就是说那如果说你使用那个setup

19:48.100 --> 19:50.100
setup这个命令的话

19:50.100 --> 19:51.860
那么它是不会把这些东西

19:51.860 --> 19:54.820
暴露到组建实力的

19:54.820 --> 19:56.300
你拿不到

19:56.300 --> 19:59.020
那么这也是伍佑推荐的方式

19:59.020 --> 20:02.060
伍佑它就现在官方去告诉大家

20:02.060 --> 20:05.460
就是你不要把那些乱七八糟的东西往实力上放

20:05.460 --> 20:06.260
这样子的话

20:06.260 --> 20:08.060
副主见你给它犯错的机会了

20:08.060 --> 20:08.540
对吧

20:08.540 --> 20:10.100
你给它犯罪的机会了

20:10.100 --> 20:11.900
它就会通过那个rave

20:11.900 --> 20:13.260
拿到它的实力

20:13.260 --> 20:16.300
然后从而去更改它的内部的一些状态

20:16.340 --> 20:18.540
如果说你现在的伍佑就告诉你

20:18.540 --> 20:21.100
如果说你一定要这样做

20:21.100 --> 20:23.020
它建议你怎么做呢

20:23.020 --> 20:25.940
看到我们现在回到之前的状态

20:25.940 --> 20:27.300
之前的状态虽然可以拿到

20:27.300 --> 20:29.460
但是都是不好的

20:29.460 --> 20:31.500
如果说你要这样做的话

20:31.500 --> 20:33.020
它建议你怎么做

20:33.020 --> 20:35.580
它建议你使用这个expose函数

20:37.420 --> 20:38.260
来进行暴露

20:38.260 --> 20:40.860
手动声明我要暴露哪些东西

20:40.860 --> 20:43.220
比方说我现在就要暴露这个switch2

20:43.220 --> 20:45.460
那我就使用这个expose函数

20:47.460 --> 20:49.300
告诉它

20:49.300 --> 20:50.620
我要暴露这个switch2

20:51.940 --> 20:53.060
switch2

20:54.980 --> 20:55.900
好 这样一来的话

20:55.900 --> 20:56.580
我们来看一下

20:58.500 --> 20:59.220
放下面了

21:01.780 --> 21:02.460
好 发现

21:07.940 --> 21:08.820
那个地方写错了

21:13.930 --> 21:15.970
这个expose函数是这样用的

21:15.970 --> 21:16.450
不好意思

21:16.450 --> 21:17.330
我查一下办法文的

21:21.240 --> 21:23.360
APIexpose

21:24.160 --> 21:27.360
它也可以通过选项的方式

21:27.360 --> 21:29.360
通过选项的方式来进行暴露

21:29.360 --> 21:31.360
也可以通过API的方式

21:31.360 --> 21:32.360
在setup函数里面进行暴露

21:32.360 --> 21:33.360
都是可以的

21:34.360 --> 21:36.360
它说现在我又建议你使用这种方式来做

21:38.360 --> 21:39.360
expose

21:39.360 --> 21:44.490
看一下setup

22:00.750 --> 22:01.750
是哪呢

22:04.510 --> 22:05.510
setup

22:05.510 --> 22:10.320
好 看一下第二个产数

22:11.320 --> 22:14.210
基本使用

22:14.210 --> 22:15.210
上下文

22:17.210 --> 22:18.210
expose

22:18.210 --> 22:20.210
通过它来暴露那个公共属性

22:20.210 --> 22:21.210
它也没有解释

22:25.500 --> 22:26.500
如果说你不传参数的话

22:26.500 --> 22:28.500
那么就相当于是完全关闭的

22:28.500 --> 22:30.500
这里面的所有东西

22:30.500 --> 22:33.500
它都不会生成到那个组建实力

22:33.500 --> 22:35.500
如果说你要传递的话

22:35.500 --> 22:36.500
那么就用这种方式

22:37.500 --> 22:38.500
里面的

22:38.500 --> 22:39.500
它传递到是一个对象

22:40.500 --> 22:44.930
就是

22:45.930 --> 22:46.930
什么呢

22:46.930 --> 22:47.930
pult

22:47.930 --> 22:48.930
switch2

22:49.930 --> 22:50.930
我们把这个玩意传出去

22:51.930 --> 22:52.930
好 这样一来过后

22:52.930 --> 22:53.930
你看你用了expose之后

22:53.930 --> 22:54.930
不用知道了

22:55.930 --> 22:57.930
给大家演示很听话的

22:58.930 --> 22:59.930
听懂了我的建议

22:59.930 --> 23:00.930
现在再看一下

23:00.930 --> 23:02.930
哪怕我用传统的方式

23:02.930 --> 23:03.930
拿到的数据呢

23:04.930 --> 23:06.930
你会发现非常的干净的

23:06.930 --> 23:07.930
看到没

23:07.930 --> 23:09.930
非常非常的干净的

23:09.930 --> 23:10.930
然后

23:11.930 --> 23:12.930
只有个switch2

23:12.930 --> 23:13.930
在这里

23:13.930 --> 23:15.930
其他都不会给你暴露任何东西

23:16.930 --> 23:17.930
所以说呢

23:17.930 --> 23:18.930
这样子也比较安全

23:18.930 --> 23:20.930
外边也不会给它犯触的机会了

23:20.930 --> 23:21.930
它就老老实实的

23:21.930 --> 23:22.930
给你暴露了它

23:22.930 --> 23:23.930
给你用上

23:24.930 --> 23:25.930
其实说回来

23:25.930 --> 23:26.930
我还是不建议大家

23:26.930 --> 23:27.930
去暴露任何东西

23:28.930 --> 23:29.930
一直入键就好好管理

23:29.930 --> 23:30.930
自己的状态就得了

23:30.930 --> 23:32.930
然后通过了个事件

23:32.930 --> 23:34.930
和属性与副主键通信

23:34.930 --> 23:35.930
这是最好的

23:35.930 --> 23:36.930
你暴露这些玩意干嘛呢

23:37.930 --> 23:38.930
到时候

23:38.930 --> 23:39.930
一旦出了问题

23:39.930 --> 23:40.930
会造成非常多的麻烦

23:41.930 --> 23:43.930
好 就当说这个吧

23:44.930 --> 23:45.930
这是推荐的方式

23:46.930 --> 23:47.930
所以说呢

23:47.930 --> 23:49.930
到了setup这个环境里边去

23:49.930 --> 23:53.370
我们把这个复试一下

23:54.370 --> 23:56.370
然后把这个setup展现过来

23:57.370 --> 23:59.370
好 到了setup这个环境

23:59.370 --> 24:02.370
那么我如何来暴露这个东西呢

24:02.370 --> 24:05.370
通过这个define expose

24:05.370 --> 24:06.370
它也是个红

24:07.370 --> 24:08.370
define expose

24:09.370 --> 24:11.370
那么这里的用法呢

24:11.370 --> 24:12.370
是一样的

24:14.370 --> 24:15.370
就这个用法

24:16.370 --> 24:17.370
好 就暴露出去了

24:17.370 --> 24:18.370
好 咱们来看一下吧

24:19.370 --> 24:20.370
使用了setup之后呢

24:21.370 --> 24:22.370
点击U

24:22.370 --> 24:23.370
你看 是不是可以点击了

24:24.370 --> 24:25.370
你看

24:25.370 --> 24:27.370
C2是不是也有了

24:27.370 --> 24:28.370
对吧

24:28.370 --> 24:29.370
用法其实它也是个红啊

24:29.370 --> 24:31.370
它最终的结果呢

24:31.370 --> 24:33.370
就跟刚才有个结果是一样的

24:33.370 --> 24:34.370
就变成这了

24:34.370 --> 24:35.370
变成这里的

24:36.370 --> 24:37.370
其他都没啥了

24:38.370 --> 24:41.370
如果说你一定要去

24:42.370 --> 24:43.370
分析他们的差异的话

24:43.370 --> 24:45.370
你可以通过这个玩意去分析

24:45.370 --> 24:47.370
你去下载一个

24:49.740 --> 24:52.740
Vis的插件叫做pluginspect

24:52.740 --> 24:53.740
然后呢

24:53.740 --> 24:55.740
把它加到那个配置里边

24:55.740 --> 24:56.740
这个插件呢

24:56.740 --> 24:58.740
其实你在分析这个

24:58.740 --> 25:00.740
代码转换的时候是特别好用的

25:00.740 --> 25:02.740
比方说你们我们来分析一下

25:02.740 --> 25:03.740
这样子呢

25:03.740 --> 25:07.250
你运行之后啊

25:07.250 --> 25:09.250
你看 会得到这么一个东西

25:09.250 --> 25:11.250
一个inspect的地址

25:11.250 --> 25:13.250
就查看地址

25:13.250 --> 25:14.250
进去之后呢

25:14.250 --> 25:15.250
它就会告诉你

25:15.250 --> 25:17.250
目前转换了哪些组件

25:17.250 --> 25:18.250
你看我们的打包部

25:18.250 --> 25:20.250
就是对代码进行转换

25:20.250 --> 25:21.250
对不对

25:21.250 --> 25:23.250
比方说对这个组件进行转换

25:23.250 --> 25:24.250
我们打开它

25:24.250 --> 25:26.250
它经过了这么一些东西

25:26.250 --> 25:27.250
来进行转换

25:27.250 --> 25:28.250
其中最重要的就是

25:28.250 --> 25:29.250
五右

25:29.250 --> 25:30.250
五右对它的转换

25:30.250 --> 25:31.250
那么前面

25:32.250 --> 25:33.250
这就是我们的原始代码

25:33.250 --> 25:34.250
对吧

25:34.250 --> 25:35.250
我们看一下这个插件

25:35.250 --> 25:36.250
点击它

25:36.250 --> 25:37.250
左边呢就是我们

25:37.250 --> 25:39.250
转换之前的代码

25:39.250 --> 25:41.250
是不是我们的原始格式

25:41.250 --> 25:42.250
script setup

25:43.250 --> 25:44.250
对吧 原始格式

25:44.250 --> 25:46.250
转换之后是个什么玩意呢

25:47.250 --> 25:49.250
就是对象啊 你看

25:50.250 --> 25:51.250
probs变成什么了

25:51.250 --> 25:52.250
变成这了

25:52.250 --> 25:53.250
看到没

25:53.250 --> 25:54.250
能看清楚吗

25:55.250 --> 25:56.250
这里

25:56.250 --> 25:57.250
你看我们的定义的

25:57.250 --> 25:58.250
define props

25:58.250 --> 26:00.250
它到了转换之后的代码

26:00.250 --> 26:01.250
就变成了

26:02.250 --> 26:03.250
这个样子

26:03.250 --> 26:04.250
它是不是一样的

26:04.250 --> 26:06.250
我们的define amaz

26:06.250 --> 26:07.250
就变成了什么了

26:07.250 --> 26:08.250
就变成了 amaz

26:09.250 --> 26:10.250
对吧

26:10.250 --> 26:11.250
就这么简单

26:11.250 --> 26:12.250
然后呢

26:12.250 --> 26:13.250
我们的

26:13.250 --> 26:15.250
这个 setup

26:15.250 --> 26:16.250
你看

26:16.250 --> 26:17.250
它在这里面

26:17.250 --> 26:18.250
我们的所有代码

26:18.250 --> 26:19.250
都是 setup

26:20.250 --> 26:21.250
define expose

26:21.250 --> 26:23.250
变成了这样了

26:23.250 --> 26:24.250
对吧 这里得到的

26:24.250 --> 26:25.250
得到的是 props

26:25.250 --> 26:26.250
为什么 因为我这里

26:26.250 --> 26:27.250
变的名字是 props

26:28.250 --> 26:29.250
就这么简单

26:29.250 --> 26:31.250
然后还有啥呢

26:31.250 --> 26:33.250
然后你看这里面

26:34.250 --> 26:35.250
这里面代码

26:35.250 --> 26:36.250
是不是就是我们

26:36.250 --> 26:37.250
刚才在个 setup 里面

26:37.250 --> 26:38.250
写的代码

26:38.250 --> 26:39.250
对吧

26:39.250 --> 26:40.250
然后它返回的结果

26:40.250 --> 26:41.250
是什么

26:41.250 --> 26:42.250
它返回的结果

26:42.250 --> 26:44.250
这个 setup 还说

26:44.250 --> 26:45.250
它返回的结果

26:45.250 --> 26:46.250
不就是这些东西吗

26:46.250 --> 26:48.250
probs, amaz, index

26:48.250 --> 26:49.250
把那些东西

26:49.250 --> 26:50.250
全部返回了

26:50.250 --> 26:51.250
全部返回了

26:51.250 --> 26:53.250
就没啥了呀

26:54.250 --> 26:55.250
就没啥了

26:55.250 --> 26:56.250
还有啥呀

26:56.250 --> 26:57.250
就没什么东西了

26:58.250 --> 26:59.250
所以呢

27:01.250 --> 27:02.250
就是这样子

27:02.250 --> 27:04.250
这个 setup 与发堂

27:04.250 --> 27:05.250
它可以减化我们的开发

27:05.250 --> 27:06.250
那么之后

27:06.250 --> 27:07.250
我们如果

27:07.250 --> 27:08.250
现在用 5u3 的话

27:08.250 --> 27:09.250
基本上都是使用

27:09.250 --> 27:10.250
completion API

27:10.250 --> 27:11.250
因此呢

27:12.250 --> 27:13.250
你只要铁定了

27:13.250 --> 27:14.250
新使用

27:14.250 --> 27:15.250
completion API的话

27:15.250 --> 27:17.250
就直接上去玩笑了

27:17.250 --> 27:18.250
也不用去倒出

27:18.250 --> 27:20.250
不用去配置这个 setup 了

27:20.250 --> 27:21.250
其他的就没啥了

27:21.250 --> 27:22.250
就关于这个 setup

