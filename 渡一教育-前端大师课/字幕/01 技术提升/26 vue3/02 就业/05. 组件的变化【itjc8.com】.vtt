WEBVTT

00:00.180 --> 00:03.780
这些课我们要讲的东西都在这个效果里边了

00:03.780 --> 00:06.780
效果做完了 我们要学的知识就学完了

00:07.280 --> 00:09.380
看吧 我们这里首先刷新

00:09.780 --> 00:12.980
页面它是有一个夹窄过程的 看没

00:13.380 --> 00:16.580
然后里边的一些组件也有夹窄过程

00:16.580 --> 00:18.980
有些组件可能会导致组件夹窄出错

00:18.980 --> 00:20.980
那么这些东西该怎么去处理

00:21.480 --> 00:23.480
包括我们这里切换页面

00:23.480 --> 00:25.780
是不是也有一个夹窄过程 是吧

00:25.780 --> 00:29.380
其实我们这几课的重点就是说的是异布组件

00:29.980 --> 00:31.980
异布组件其实在那个

00:33.780 --> 00:38.180
在那个5U2的时候本身也有

00:38.180 --> 00:41.780
对吧 5U3做了一些小小的变动

00:42.180 --> 00:43.780
我们这里把它说一下

00:44.680 --> 00:47.380
来吧 我们这里有一个空的工程

00:47.780 --> 00:48.380
把它打开

00:50.620 --> 00:51.520
MKM装

00:54.520 --> 00:55.920
啥都没有空的

00:57.420 --> 00:58.720
来看一下我们的工程里边带嘛

00:59.320 --> 01:02.420
以用一个跟组件然后这边有这么一个东西

01:03.220 --> 01:04.520
好 一个个来呗

01:06.020 --> 01:09.620
首先我们这里要用到的就是有路由

01:10.820 --> 01:12.020
我们先不着急写路由吧

01:12.020 --> 01:13.420
我们先把这个网上写出来

01:13.820 --> 01:15.320
那个Home组件写出来

01:16.420 --> 01:17.320
我们先到5U

01:17.820 --> 01:19.520
5U4 就是我们的页面

01:19.520 --> 01:21.420
页面有两个 一个是About

01:22.620 --> 01:24.420
About这个页面很简单

01:24.420 --> 01:25.520
就有一个

01:29.720 --> 01:31.520
就一个A7元素

01:32.020 --> 01:34.920
就是About page

01:35.720 --> 01:37.920
有这么一个页面 其他啥都没有

01:38.620 --> 01:41.120
然后有一个Home页面

01:41.120 --> 01:42.520
其实都是一个组件 对吧

01:42.820 --> 01:45.620
Home页面里面的东西有一点东西

01:45.620 --> 01:47.520
那么我们这里就做了一个模拟

01:47.620 --> 01:49.220
在Home这个页面里面

01:49.220 --> 01:50.620
它有很多的区域

01:50.620 --> 01:52.720
那么就相当于是有很多的组件

01:52.720 --> 01:54.720
共同组成了这个Home页面

01:55.220 --> 01:58.420
那么其中一些组件是直接加载出来的

01:58.720 --> 02:01.620
而有一些组件是需要一步加载的

02:01.620 --> 02:03.920
比方这个组件 还有这个组件

02:03.920 --> 02:05.220
它是需要一步加载的

02:05.220 --> 02:06.620
我们来看怎么来处理

02:07.720 --> 02:12.120
于是我们在这边写Home页面

02:12.120 --> 02:14.420
到这里客间里面有一个央视素材

02:14.420 --> 02:16.020
有一个Home页面的央视素材

02:16.020 --> 02:17.320
我们把央视素材拿过来

02:17.920 --> 02:20.220
这就是Home页面的模办

02:21.420 --> 02:23.920
区域1 区域2 区域3 区域4 区域5

02:23.920 --> 02:25.520
一直都一个区域6

02:25.520 --> 02:27.220
那么我们就模拟出这么一个

02:27.220 --> 02:28.620
这里有6个组件

02:29.020 --> 02:29.720
原来是吧

02:29.720 --> 02:31.120
然后它有相关的央视

02:31.120 --> 02:33.020
央视这一块大家不用去care

02:33.020 --> 02:34.220
不是我们的重点

02:34.220 --> 02:35.220
把复制过来就行了

02:35.920 --> 02:36.920
加上一个Scout

02:40.360 --> 02:41.860
这就是我们的Home页面

02:41.860 --> 02:43.160
然后我们在App主界

02:43.160 --> 02:44.860
App这里来去测试一下

02:46.360 --> 02:46.960
script

02:50.080 --> 02:50.780
干脆这样

02:51.080 --> 02:51.780
干脆这样

02:51.980 --> 02:55.380
我们直接就把路由扔进去

02:55.780 --> 02:56.580
顺便讲一讲

02:56.580 --> 02:58.480
无忧三立表的路由的一些变化

02:58.480 --> 03:00.180
我们就直接把路由扔进去

03:00.180 --> 03:02.480
在无忧三立表要使用路由的话

03:02.580 --> 03:05.780
我们需要去过去的路由最好不要用了

03:05.980 --> 03:07.280
在无忧三立表要用路由的话

03:07.280 --> 03:08.580
我们需要安装一个路由

03:08.580 --> 03:09.680
就是vue roter

03:11.180 --> 03:12.380
vue roter

03:12.380 --> 03:14.580
最版本的要用next

03:14.580 --> 03:15.580
要用这个版本

03:16.180 --> 03:17.980
那么也就是说现在还目前的

03:17.980 --> 03:20.780
还不是正式版还是beta版

03:21.780 --> 03:23.480
你看一下 roter还是beta版

03:23.780 --> 03:25.280
好 营用进来过后

03:25.280 --> 03:27.880
我们过去是怎么用的

03:27.880 --> 03:28.580
是不是在这里

03:28.580 --> 03:30.380
一般来说或者在这里建一个文件夹

03:30.580 --> 03:31.380
叫roter

03:31.380 --> 03:31.880
对吧

03:31.880 --> 03:35.280
然后文件夹里边有一个index.js

03:35.480 --> 03:37.780
然后在这个js里面导出一个路由

03:37.880 --> 03:38.880
那么以前怎么导出的

03:38.880 --> 03:43.280
是不是导入一个roter

03:43.880 --> 03:45.880
from什么vue roter

03:45.880 --> 03:46.280
对吧

03:46.280 --> 03:47.780
以前是不是这样干的

03:47.980 --> 03:49.180
但是不好意思

03:49.180 --> 03:51.580
在无忧三立表这个构造函数没了

03:52.580 --> 03:55.180
道理跟无忧的道理是一样的

03:55.380 --> 03:56.880
无忧是不是构造函数没了

03:57.080 --> 03:57.480
对吧

03:57.480 --> 04:00.080
那么在无忧roter里面构造函数给你干掉了

04:00.480 --> 04:02.680
全部变成一些居民导出

04:02.880 --> 04:04.980
这是为了更好的去做区些订

04:05.380 --> 04:07.380
于是你这里要怎么来导出呢

04:07.380 --> 04:08.780
叫createRoter

04:09.680 --> 04:11.380
你要用这种方式来

04:11.880 --> 04:14.180
使用这个函数来创建一个路由

04:14.680 --> 04:16.580
于是我们这里导出的时候

04:16.980 --> 04:19.180
default叫createRoter

04:19.880 --> 04:20.980
创建一个路由

04:20.980 --> 04:22.480
那么这里边会有一些配置

04:22.480 --> 04:23.380
路由的配置

04:23.580 --> 04:25.980
其中一个配置也会有一些变化

04:26.080 --> 04:28.380
我们之前配置的是不是配置一个mode

04:28.380 --> 04:28.780
对吧

04:28.780 --> 04:29.680
一个history

04:29.780 --> 04:30.680
是这样的配置的

04:30.780 --> 04:32.080
那么这个配置消失了

04:32.380 --> 04:33.980
mode history这种配置消失了

04:34.180 --> 04:35.080
它变成了什么呢

04:35.080 --> 04:36.080
变成了history

04:36.180 --> 04:38.580
就是我们用什么来记录我们的

04:40.080 --> 04:40.880
页面站

04:41.080 --> 04:41.580
对不对

04:42.080 --> 04:43.680
用花线来记录这个页面站

04:43.880 --> 04:44.980
还是用那个

04:45.180 --> 04:47.080
webhistory来记录页面站

04:47.180 --> 04:48.780
用什么来记录这个页面站

04:48.980 --> 04:49.880
那么这个history呢

04:49.880 --> 04:50.680
是一个对象

04:50.680 --> 04:51.880
你要给他提供一个对象

04:51.880 --> 04:52.480
这个对象呢

04:52.480 --> 04:53.880
他要能够记录页面站

04:54.980 --> 04:56.480
那么这个对象怎么来提供呢

04:56.480 --> 04:57.980
我们在无忧roter里边给你

04:58.180 --> 04:59.280
做了这么几个

04:59.280 --> 04:59.980
无忧roter对象啊

04:59.980 --> 05:01.680
叫create a memory history

05:01.680 --> 05:02.280
看到没

05:02.880 --> 05:05.480
create a weber hash history

05:06.180 --> 05:09.080
以及呢create a weber web history

05:09.380 --> 05:09.880
那么比方说

05:09.880 --> 05:12.680
我们要利用浏览器的history api

05:12.880 --> 05:14.280
那么就可以用这个函数

05:14.480 --> 05:15.180
通过这个函数

05:15.180 --> 05:17.180
就可以创建一个history对象

05:17.980 --> 05:18.780
那么这个对象呢

05:18.780 --> 05:20.980
他就用来记录我们的页面路由

05:21.280 --> 05:22.480
在这么写的啊

05:22.480 --> 05:26.180
就是把以前的那个mode history

05:26.280 --> 05:27.480
改成这种模式

05:27.780 --> 05:28.780
就是无忧roter里边

05:28.780 --> 05:30.180
他还有一些其他的变化啊

05:30.580 --> 05:31.680
我们这里不去申求了

05:31.680 --> 05:33.680
因为这些很多的变化

05:33.680 --> 05:35.380
我看了一下的前移文档

05:35.680 --> 05:36.780
我们平时都用不到

05:36.980 --> 05:37.980
用的就是我们

05:37.980 --> 05:40.280
我们会影响我们开发的

05:40.280 --> 05:41.280
也就这么一个东西了

05:41.380 --> 05:42.080
大家有兴趣的话

05:42.080 --> 05:42.880
可以去看一下

05:48.290 --> 05:49.190
大家往下找啊

05:49.190 --> 05:49.990
找到这个

05:50.390 --> 05:51.590
这个mageration

05:51.590 --> 05:52.790
mageration guide

05:53.990 --> 05:54.990
就是前移文档

05:54.990 --> 05:56.390
就是如何升级啊

05:56.390 --> 05:57.290
有哪些变化

05:57.290 --> 05:59.790
那么全部在这篇文档里面有说明

05:59.890 --> 06:00.490
我把这个地址呢

06:00.490 --> 06:01.290
给他放在那

06:01.890 --> 06:02.790
英文好的同学呢

06:02.790 --> 06:03.490
可以去看一下

06:03.690 --> 06:04.190
我看了一下

06:04.190 --> 06:05.790
其实跟我们平时开发相关的

06:05.790 --> 06:06.890
也就这么一个配置

06:07.690 --> 06:09.890
还包括那个bsurl没了啊

06:09.990 --> 06:10.890
这个玩意儿没了

06:11.190 --> 06:12.390
这个玩意儿放到哪去了

06:12.390 --> 06:13.190
放到这来了

06:13.190 --> 06:14.990
就你如果说有bassurl的话

06:14.990 --> 06:15.890
你可以起到这

06:16.590 --> 06:17.290
原来的意思吧

06:17.990 --> 06:20.190
那么就这里会有一些变化

06:20.190 --> 06:21.090
可以在这

06:21.390 --> 06:22.590
可以看看一下啊

06:22.990 --> 06:23.790
breaking changes

06:23.790 --> 06:25.990
就是不兼容的耿耿

06:26.090 --> 06:26.890
那么如果说

06:26.890 --> 06:28.890
你将来在用无忧roter的时候

06:28.890 --> 06:30.290
用了一些比较偏的东西

06:30.590 --> 06:31.590
那么这个时候呢

06:31.590 --> 06:33.390
你可以去查一查相关的章节

06:33.790 --> 06:35.990
或者是问一下达一老师也可以

06:36.390 --> 06:37.590
总之能够解决的

06:38.390 --> 06:38.790
好了

06:38.790 --> 06:39.890
这就创建了一个路由

06:39.890 --> 06:40.390
对不对

06:40.390 --> 06:41.990
那么路由里边是不是还有一个重要的配置

06:41.990 --> 06:42.590
叫rot

06:42.990 --> 06:44.090
是不是要有这么一个配置

06:44.090 --> 06:44.690
那么这个配置呢

06:44.690 --> 06:46.790
我打算新建一个js啊

06:46.790 --> 06:47.590
把它写进来

06:47.790 --> 06:48.390
rot

06:48.690 --> 06:49.390
js

06:49.590 --> 06:50.190
那么应这个时候

06:50.190 --> 06:51.790
js里边让我们去导入一下

06:51.890 --> 06:52.590
导入一下

06:52.590 --> 06:53.290
rot

06:55.190 --> 06:55.890
rot

06:56.490 --> 06:56.790
好

06:57.290 --> 06:57.990
那么这边呢

06:58.090 --> 06:59.490
这不直接把Rose配置到这了

06:59.490 --> 07:00.090
就完了

07:00.190 --> 07:00.490
对

07:00.490 --> 07:01.690
这就是一个路由

07:02.890 --> 07:03.290
好了

07:03.290 --> 07:04.990
那么在Rose里边怎么来配置呢

07:04.990 --> 07:06.590
其实它要导出的就是一个数组

07:06.590 --> 07:07.090
对不对

07:07.090 --> 07:07.990
跟过去一样的

07:07.990 --> 07:09.090
这个就没什么区别了

07:09.290 --> 07:11.190
我们比方说这里有两个页面

07:11.290 --> 07:12.990
是不是pass

07:13.990 --> 07:15.790
匹配的是什么一个鞋杠

07:15.890 --> 07:16.390
对吧

07:16.990 --> 07:18.290
然后component

07:18.590 --> 07:19.990
匹配的是什么组件呢

07:20.290 --> 07:21.390
导入组件啊

07:21.790 --> 07:22.990
tome组件

07:23.090 --> 07:23.990
from

07:25.090 --> 07:26.090
component

07:27.090 --> 07:28.690
will's home

07:29.190 --> 07:29.690
对吧

07:30.090 --> 07:30.490
然后呢

07:30.490 --> 07:32.090
还有一个about组件

07:32.590 --> 07:33.090
about

07:35.710 --> 07:37.010
一共有两个组件吗

07:37.110 --> 07:38.810
好如果说这个这个地址呢

07:38.810 --> 07:40.010
匹配home组件

07:40.110 --> 07:41.510
然后另一个地址呢

07:45.150 --> 07:45.750
匹配

07:46.350 --> 07:47.350
arbalt组件

07:49.250 --> 07:50.850
对不对啊非常简单

07:50.950 --> 07:52.450
所以这个路由配置就写好了

07:53.050 --> 07:53.650
arbalt

07:56.130 --> 07:57.430
好了写好了之后呢

07:57.430 --> 07:59.330
我们在app.will里边呢

07:59.330 --> 08:01.330
把这个导航给它加上吧

08:01.530 --> 08:03.130
首先加上一个导航啊

08:04.130 --> 08:05.130
好导航呢

08:05.130 --> 08:06.030
我这里有样式啊

08:06.030 --> 08:06.530
在这

08:08.030 --> 08:08.830
复制一下

08:10.130 --> 08:11.230
在这里再加上

08:11.830 --> 08:12.730
加上一个导航

08:12.830 --> 08:13.930
然后呢有样式

08:18.400 --> 08:20.100
导航的样式再加进来

08:25.820 --> 08:27.420
好那么我们的路由

08:27.420 --> 08:28.720
匹配到的组件放哪呢

08:28.720 --> 08:29.620
我们放到这下面

08:29.620 --> 08:30.820
跟过去是一样的啊

08:30.820 --> 08:31.620
rotor view

08:31.720 --> 08:32.520
对放这

08:33.520 --> 08:34.020
行了

08:34.620 --> 08:35.220
啊行了

08:35.620 --> 08:37.220
这里class该去的啊

08:37.420 --> 08:38.420
它自动回家的

08:38.520 --> 08:39.020
好了

08:39.120 --> 08:40.420
就这里应该用什么

08:40.520 --> 08:42.220
rotor link

08:42.520 --> 08:42.920
是吧

08:42.920 --> 08:43.620
应该用这个

08:44.920 --> 08:46.420
啊这里边把它变成2

08:49.480 --> 08:50.680
好了保存一下啊

08:50.680 --> 08:51.780
咱们来看一下效果

08:53.180 --> 08:54.080
刷新一样

08:55.280 --> 08:56.380
然后这里面启动啊

08:56.380 --> 08:57.680
npm装备

08:59.750 --> 09:00.350
好刷新

09:02.520 --> 09:04.620
这个样式好像有点问题是吧

09:05.020 --> 09:06.020
好像有点问题

09:07.120 --> 09:08.520
啊看一下吧

09:08.520 --> 09:09.420
点击右键

09:10.320 --> 09:12.020
这个保底样式

09:12.020 --> 09:14.420
好像是没有加上

09:15.020 --> 09:16.620
好像是没有把的样式加上

09:17.920 --> 09:18.320
那行了

09:18.320 --> 09:19.520
我把个scope去掉

09:20.220 --> 09:21.020
去掉就完事了

09:22.620 --> 09:23.120
好

09:23.120 --> 09:24.520
你看是不是样式出来了

09:25.020 --> 09:26.220
嗯点一下

09:26.220 --> 09:27.820
哎点一下没法用是吧

09:27.820 --> 09:28.520
没法用看一下

09:28.520 --> 09:29.820
这里有两个错误

09:31.020 --> 09:32.320
rotor link

09:32.920 --> 09:34.320
哦对还有一个问题啊

09:34.320 --> 09:35.320
还有一个问题就是

09:35.320 --> 09:37.420
我在Mate.js的时候启动的时候

09:37.420 --> 09:38.520
是不是要用一个

09:38.620 --> 09:40.020
用应用插件对不对

09:40.020 --> 09:41.620
use rotor

09:41.620 --> 09:43.620
那这里是不是要把rotor导入进来

09:43.720 --> 09:44.320
rotor

09:45.020 --> 09:46.120
跟过去是一样的啊

09:46.620 --> 09:47.520
rotor导入进来

09:47.720 --> 09:48.420
导入进来过后了

09:48.420 --> 09:49.720
我们现在怎么来用呢

09:49.720 --> 09:50.820
就不是用勾招函数了啊

09:50.820 --> 09:52.420
因为现在没有无忧的勾招函数了

09:52.420 --> 09:53.220
我们直接点

09:53.220 --> 09:54.620
又是之前讲过的

09:54.920 --> 09:55.420
rotor

09:55.820 --> 09:56.420
加进去

09:56.820 --> 09:57.920
好保存一下啊

09:58.020 --> 09:58.720
保存一下

10:00.530 --> 10:01.430
好这边刷新

10:01.430 --> 10:01.850
你看

10:01.930 --> 10:03.330
home 组件是不是显示出来了

10:03.330 --> 10:04.230
显示到下面去了

10:04.730 --> 10:05.830
然后了二报纸组件

10:05.830 --> 10:06.230
你看

10:06.330 --> 10:07.330
现在是不是可以切换了

10:07.830 --> 10:08.230
是吧

10:08.330 --> 10:10.530
那么这里的页面切换没问题的啊

10:10.730 --> 10:11.630
现在我们现在

10:11.730 --> 10:13.630
目前的专心来做这个

10:14.030 --> 10:14.830
home 组件

10:15.230 --> 10:16.030
一个个来吧

10:16.830 --> 10:18.030
home 组件里边呢

10:18.030 --> 10:19.530
你看这里还得打开盟城啊

10:19.530 --> 10:20.530
我们以后会说到

10:20.830 --> 10:21.630
关闭盟城

10:21.930 --> 10:23.430
这里呢有一些小的更改

10:24.330 --> 10:25.130
好一个个说

10:25.730 --> 10:26.230
首先呢

10:26.230 --> 10:29.030
这个home 组件里边有两个区域啊

10:29.530 --> 10:30.630
就这两个区域

10:31.630 --> 10:32.630
它是一步的

10:33.630 --> 10:34.630
啥意思呢

10:34.930 --> 10:37.030
就说这里呢对应的是两个组件

10:37.730 --> 10:38.930
我们比方说这个组件

10:38.930 --> 10:40.330
你名字叫做block3

10:40.530 --> 10:42.030
这个组件叫做block5

10:42.230 --> 10:43.230
有两个组件

10:43.630 --> 10:46.130
但是这两个组件里面的功能可能太多了

10:46.430 --> 10:47.930
如果说全部把它打不到

10:47.930 --> 10:49.330
打不到一个接视的话

10:49.330 --> 10:49.930
那么home

10:50.230 --> 10:52.130
home 这个页面的接视就会很大

10:52.530 --> 10:53.430
所以说有的时候呢

10:53.430 --> 10:56.130
我们可能会需要一步去加载这个接视

10:56.430 --> 10:57.730
就说我们先把home 组件

10:57.730 --> 10:59.730
home 的页面的其他组件显示出来

11:00.030 --> 11:01.730
然后这两个区域呢哪很夹展

11:02.230 --> 11:02.930
懂了的意思吧

11:03.630 --> 11:06.030
所以说那我们为了怎么来解决这种情况呢

11:06.330 --> 11:08.530
看着在五六三这里会有一些变化啊

11:09.030 --> 11:11.030
我们比方说在src 里边

11:11.030 --> 11:13.530
建议新建一个component 文件夹

11:14.130 --> 11:15.130
这个文件夹里边呢

11:15.130 --> 11:16.330
我们现在有两个组件

11:16.330 --> 11:17.230
一个是block3

11:18.930 --> 11:19.930
就区域3

11:21.630 --> 11:22.230
template

11:24.630 --> 11:25.330
怎么来

11:25.830 --> 11:26.830
生成一个template

11:29.090 --> 11:29.590
template

11:31.980 --> 11:35.580
就是一步区域3

11:35.980 --> 11:36.380
好

11:36.980 --> 11:38.080
比方说这个组件很简单

11:38.080 --> 11:40.280
但是实际开发状态可能个组件比较复杂

11:40.580 --> 11:40.980
五

11:41.980 --> 11:42.980
一个一步区域

11:43.080 --> 11:44.380
比方说有这么两个组件

11:44.680 --> 11:46.280
它是需要一步夹展的

11:46.780 --> 11:49.380
那么怎么办呢在home 里边我们可以这样做

11:49.980 --> 11:50.580
看着啊

11:51.580 --> 11:54.380
我们现在这里这里要是不是要显示那个block3

11:54.880 --> 11:56.280
这里是不是要显示block5

11:56.780 --> 11:59.280
如果说你直接把block3导入进来的话

11:59.880 --> 12:01.880
那是不是直接把block3夹展进来了

12:02.280 --> 12:02.780
对不对

12:02.980 --> 12:04.580
然后流量器请求的时候是不是

12:05.080 --> 12:06.280
要显示这个home 组件

12:06.280 --> 12:07.580
他首先要把block3

12:08.180 --> 12:08.880
导入进来

12:09.080 --> 12:09.380
对不对

12:09.380 --> 12:10.480
先把它夹展进来

12:10.680 --> 12:12.980
那么就不符合一步加载了

12:13.180 --> 12:14.680
那么在5u2是怎么做的

12:14.980 --> 12:15.580
5u2

12:16.080 --> 12:18.380
5u2的时候是不是要配置一个

12:18.680 --> 12:20.680
inport动态的inport

12:20.780 --> 12:21.080
对不对

12:21.080 --> 12:22.380
那么5u3是同理的

12:22.680 --> 12:24.280
在5u3里边是怎么处理的呢

12:24.380 --> 12:27.480
5u3里边你要通过一个函数来处理一步组件

12:27.880 --> 12:29.780
在5u里边提供的那个函数叫做define

12:30.280 --> 12:32.380
a-sync component

12:32.980 --> 12:34.980
定义一个一步组件

12:35.380 --> 12:36.680
那么这个函数怎么用呢

12:37.080 --> 12:37.680
define

12:38.680 --> 12:39.780
a-sync component

12:40.380 --> 12:41.380
这里的船上

12:41.680 --> 12:43.880
船的是一个函数

12:44.780 --> 12:47.080
这个函数要返回一个promise

12:48.180 --> 12:49.580
比方说我们返回什么

12:49.580 --> 12:50.480
返回一个inport

12:50.680 --> 12:50.880
对吧

12:50.880 --> 12:52.580
inport动态的inport

12:52.580 --> 12:53.680
是不是就是一个promise

12:53.880 --> 12:55.080
那么我们这里去导入

12:55.180 --> 12:56.980
component block3

12:59.380 --> 13:00.980
那么这里就是得到一个block3

13:01.480 --> 13:02.280
明儿的意思吧

13:04.180 --> 13:05.380
这里是block5

13:05.580 --> 13:07.180
我们先搞定block3

13:08.180 --> 13:10.180
然后我们这里注册component

13:10.480 --> 13:12.080
注册的组件是什么block3

13:12.480 --> 13:12.980
注意哦

13:13.080 --> 13:15.080
这个block3它不是这个block3

13:15.580 --> 13:17.780
它是由这个函数返回了一个block3

13:18.180 --> 13:19.480
那么这个组件呢

13:20.480 --> 13:22.180
它要等到什么

13:22.180 --> 13:24.880
等到它加载完成过后才会显示出来

13:25.480 --> 13:27.680
好我们在这里替换一下区域山

13:28.180 --> 13:29.880
把它替换成block3

13:31.280 --> 13:32.080
保存一下

13:32.280 --> 13:32.680
你看

13:32.980 --> 13:34.380
现在说把block3

13:34.780 --> 13:35.480
显示出来了

13:35.880 --> 13:38.680
但是由于目前的速度太快了

13:38.780 --> 13:40.280
因为我们毕竟是本地

13:40.380 --> 13:42.480
本地加载这个稳件速度非常非常快

13:42.780 --> 13:43.780
实际上是一步加载的

13:43.780 --> 13:44.480
你看一下吧

13:44.780 --> 13:45.480
点击检查

13:45.880 --> 13:46.680
看一下别错了

13:47.380 --> 13:47.880
刷新

13:48.480 --> 13:48.980
你看

13:49.680 --> 13:50.980
是不是在这里加载block3的

13:50.980 --> 13:52.680
是最后加载block3的看到没

13:53.280 --> 13:54.580
而报纸都被它先加载

13:54.780 --> 13:55.080
看到没

13:55.080 --> 13:56.480
都是这里加载block3的

13:56.780 --> 13:58.880
那么我们如何来

14:00.080 --> 14:00.780
掩饰这个

14:00.780 --> 14:03.080
因为我们本地它加载速度太快了

14:03.080 --> 14:04.780
我们如何来让它慢一点呢

14:04.980 --> 14:05.780
其实非常简单

14:05.780 --> 14:06.780
你看这个函数

14:07.080 --> 14:09.180
这个函数你只要返回Promise就行了

14:09.180 --> 14:10.980
因为我们知道这一块动态导入

14:10.980 --> 14:12.380
它返回来就是Promise

14:12.680 --> 14:13.180
对不对

14:14.080 --> 14:15.380
PromiseResolve的时候

14:15.380 --> 14:17.180
你干Resolve一个组件就完成了

14:17.180 --> 14:18.080
就这么简单

14:19.780 --> 14:21.180
意思就是说啥呢

14:21.680 --> 14:23.180
就是说你在这里呢

14:23.180 --> 14:24.580
你还可以自己写一个函数

14:24.580 --> 14:25.780
对不对自己写函数

14:26.480 --> 14:27.580
这个函数呢

14:27.780 --> 14:29.980
你只要能够返回一个Promise就行

14:30.480 --> 14:31.780
返回一个Promise就行

14:32.280 --> 14:33.380
无论你等待多久

14:33.480 --> 14:34.580
等待完了过后

14:34.580 --> 14:35.420
你Resolve的时候

14:35.420 --> 14:36.580
Resolve一个组件就行

14:37.280 --> 14:38.780
实际上我们平时开发的时候

14:38.780 --> 14:40.580
就用这种方式来写就OK了

14:40.980 --> 14:41.980
但是呢

14:42.480 --> 14:44.780
我们现在为了给大家掩饰这个效果

14:44.780 --> 14:46.380
我们希望它慢一点加载

14:46.580 --> 14:47.380
那怎么办呢

14:47.380 --> 14:48.280
我们可以这样子

14:48.580 --> 14:49.180
看着啊

14:50.680 --> 14:51.280
我们在这里呢

14:51.280 --> 14:52.580
这个函数我们这样子写

14:54.080 --> 14:56.380
我们先等待一个两三秒钟

14:56.580 --> 14:57.780
等待个两三秒钟

14:57.980 --> 14:58.580
然后呢

14:58.580 --> 15:01.380
我们再去用Import导入这个组件

15:01.380 --> 15:03.380
所以就达到一个延时的效果

15:03.480 --> 15:04.380
但是实际开发中

15:04.380 --> 15:05.280
你不要这样做哈

15:05.380 --> 15:06.880
因为莫名其妙的自己手动的

15:06.880 --> 15:08.080
把整个页面拖慢了

15:08.080 --> 15:08.580
没必要

15:08.580 --> 15:10.280
只是我们现在为了掩饰啊

15:10.880 --> 15:11.280
顺便呢

15:11.280 --> 15:13.280
可以大家大家大家深刻的去认识到

15:13.280 --> 15:14.780
这个函数里面到底啥意思啊

15:14.780 --> 15:16.180
就返回一个Promise就行了

15:16.880 --> 15:18.180
那么需要延时的话

15:18.180 --> 15:19.480
我这里可以写个Utl

15:21.180 --> 15:22.380
就是一个工具啊

15:23.080 --> 15:24.580
这里写个英德瑟的解释

15:24.780 --> 15:25.580
这里导出

15:26.780 --> 15:27.380
刚写

15:28.880 --> 15:29.480
delay嘛

15:29.480 --> 15:30.380
一个延迟

15:30.480 --> 15:32.680
啊你给我一个延迟的时间啊

15:32.680 --> 15:33.680
如果说你不给我的话

15:33.680 --> 15:35.480
我就给你生成一个随机的延迟时间

15:35.480 --> 15:37.280
那么我这里还需要个随机函数啊

15:38.080 --> 15:38.480
right

15:39.780 --> 15:40.380
min max

15:40.380 --> 15:41.380
啊这个东西不讲了吧

15:41.880 --> 15:42.380
max

15:43.080 --> 15:43.880
return

15:43.880 --> 15:44.380
man

15:45.080 --> 15:45.680
man

15:46.880 --> 15:47.380
floor

15:48.080 --> 15:49.580
man spread

15:50.080 --> 15:50.680
成译

15:50.680 --> 15:51.880
max-min

15:52.680 --> 15:53.680
然后呢加成min

15:53.880 --> 15:54.280
对

15:54.280 --> 15:55.180
得到一个随意数

15:56.280 --> 15:57.780
延时一段时间

15:57.780 --> 15:58.380
那么这边呢

15:58.480 --> 15:59.580
就返回一个new

15:59.580 --> 16:00.580
一个Promise

16:00.980 --> 16:02.280
最重要写的很熟了

16:02.880 --> 16:03.480
result

16:05.660 --> 16:06.660
set timeout

16:07.460 --> 16:08.260
delay

16:08.860 --> 16:09.760
那么result

16:10.560 --> 16:12.760
得到这么一个延迟函数返回一个Promise

16:13.160 --> 16:13.960
然后呢这边呢

16:13.960 --> 16:15.860
如果说你没有给我传递这个Promise

16:15.860 --> 16:17.860
没有给我传递这个delay

16:17.860 --> 16:19.560
那么我就给你一个随机的时间

16:19.960 --> 16:20.360
right

16:21.160 --> 16:22.460
给这么一个测扶住函数

16:22.460 --> 16:23.560
来帮助测试一下

16:23.560 --> 16:25.160
然后一秒到五秒钟

16:27.660 --> 16:28.160
好了

16:28.160 --> 16:29.860
有了这个函数的支持过后呢

16:29.860 --> 16:31.160
我们在这边再来写啊

16:31.560 --> 16:32.260
import

16:33.360 --> 16:33.760
是吧

16:34.560 --> 16:35.060
呃

16:35.060 --> 16:35.660
点这些钢

16:35.760 --> 16:36.360
uq

16:37.160 --> 16:38.360
这边我们要搞入这个函数啊

16:38.360 --> 16:38.960
delay

16:39.560 --> 16:40.460
那你看着啊

16:40.660 --> 16:42.260
接下来有了这个函数支持过后呢

16:42.260 --> 16:43.360
我们这里边传

16:43.360 --> 16:44.560
传一个erthink函数

16:44.560 --> 16:46.460
那么erthink函数返回来一定是Promise

16:46.460 --> 16:46.760
对吧

16:46.760 --> 16:47.760
这个没什么好说的

16:48.060 --> 16:48.760
好来吧

16:48.860 --> 16:49.560
这里delay

16:49.560 --> 16:52.260
我们得暂停一段时间await

16:52.760 --> 16:53.960
暂停一段时间

16:54.260 --> 16:55.760
暂停一段时间过后呢

16:55.760 --> 16:57.660
我再给你返回import这个东西

16:58.560 --> 16:58.860
对吧

16:58.860 --> 16:59.360
这样子呢

16:59.360 --> 17:01.060
得达到这个测试的效果

17:01.160 --> 17:02.460
布朗克山也不用

17:02.960 --> 17:03.560
看一下吧

17:04.160 --> 17:04.760
老存

17:06.060 --> 17:06.560
放心

17:07.960 --> 17:09.360
你看布朗克山是不是等一会

17:09.660 --> 17:10.460
才显示出来

17:10.560 --> 17:11.660
那么这就是一个异部区域

17:11.660 --> 17:12.360
看没放心

17:12.760 --> 17:13.960
等一会才显示出来

17:13.960 --> 17:14.860
一开始啥都不显示

17:14.860 --> 17:16.060
因为他不知道显示啥

17:16.460 --> 17:17.260
原来的意思

17:17.460 --> 17:19.160
他主见都没有导入进来

17:19.160 --> 17:20.160
都还在加载中

17:20.160 --> 17:21.460
说没不知道显示啥

17:22.160 --> 17:23.560
那么既然还有问题

17:23.560 --> 17:24.460
什么问题呢

17:24.460 --> 17:26.460
就是你看我们的追踪效果里边啊

17:26.760 --> 17:28.560
他有可能主见加载出错的

17:28.560 --> 17:30.360
那出错的时候又怎么去显示

17:31.960 --> 17:32.560
然后呢

17:32.560 --> 17:33.560
还就是还有一种情况

17:33.560 --> 17:35.060
就是主见加载成功

17:35.060 --> 17:36.360
就正在加载中

17:37.560 --> 17:38.060
你看啊

17:38.060 --> 17:39.960
正在加载中的时候又怎么去显示

17:41.260 --> 17:42.060
懂了意思吧

17:42.260 --> 17:43.560
那么现在呢我们呢

17:44.660 --> 17:46.260
还要进行进一步的配置

17:46.260 --> 17:47.860
那怎么来进行进一步的配置呢

17:48.260 --> 17:48.960
这个地方呢

17:48.960 --> 17:50.760
你除了可以配置这个样子

17:50.860 --> 17:52.460
你还可以配置为一个对象

17:53.160 --> 17:53.760
这个对象呢

17:53.760 --> 17:54.760
我们刚才那个配置呢

17:54.760 --> 17:56.460
就是在5月2里边的时候

17:56.560 --> 17:57.260
5月2的时候

17:57.260 --> 17:58.560
这里要配置一个component

17:58.560 --> 17:58.960
对吧

17:58.960 --> 18:00.560
其实这就是5月2的邪法啊

18:01.060 --> 18:02.060
那么现在5月3了

18:02.060 --> 18:03.560
他要把它配置成一个loader

18:03.560 --> 18:04.860
配置像变了

18:04.860 --> 18:05.760
变成这个样子了

18:06.160 --> 18:06.560
对吧

18:06.560 --> 18:07.560
你把刚才那个函数

18:07.560 --> 18:08.660
把它配置到loader里边

18:08.660 --> 18:09.660
实际上是一样的

18:09.860 --> 18:10.460
你看这边

18:11.560 --> 18:11.860
是不是

18:11.860 --> 18:13.860
还是要等待一段时间

18:13.860 --> 18:14.860
然后显示出来

18:15.260 --> 18:16.460
才加载完成

18:16.760 --> 18:17.560
那么现在呢

18:17.560 --> 18:19.660
我们除了配这个配置之外呢

18:19.660 --> 18:20.960
我们还可以做一些配置啊

18:20.960 --> 18:24.160
比方说做这个loading component

18:24.160 --> 18:25.960
就是正在加载中的时候

18:26.260 --> 18:26.760
啥意思呢

18:26.760 --> 18:29.660
就是当promise在

18:30.660 --> 18:32.060
pending状态时

18:33.960 --> 18:37.060
将显示这里的组件

18:37.760 --> 18:38.560
懂了意思吧

18:38.660 --> 18:40.460
他就会显示这里的组件

18:40.460 --> 18:41.760
那么这个组件呢

18:41.760 --> 18:43.860
我们可以写一个loading组件啊

18:44.660 --> 18:45.460
比方说吧

18:45.960 --> 18:47.260
我们在这component里面

18:47.260 --> 18:48.260
加一个loading组件

18:50.360 --> 18:51.160
这个loading组件呢

18:51.160 --> 18:51.760
我们这里呢

18:51.760 --> 18:53.060
是有这个样式素材的啊

18:53.060 --> 18:53.960
你直接打过来用就行了

18:53.960 --> 18:54.960
是一个svg

18:55.760 --> 18:56.260
loading

18:57.060 --> 18:57.760
有一个图片

19:00.050 --> 19:00.850
有一个图片

19:00.950 --> 19:02.150
然后它有一个样式啊

19:03.150 --> 19:04.450
把样式直接复制过来

19:09.360 --> 19:09.860
stare

19:16.380 --> 19:17.280
好加进去啊

19:17.480 --> 19:17.980
就完了

19:17.980 --> 19:19.380
那么这是个loading组件啊

19:19.380 --> 19:20.380
你可以再

19:21.080 --> 19:21.780
继续测试一下

19:21.780 --> 19:22.480
没什么好测试的

19:22.480 --> 19:23.480
就是一个svg

19:23.780 --> 19:24.080
然后呢

19:24.080 --> 19:25.080
在home里边

19:25.180 --> 19:26.380
我们这里导入这个组件

19:27.080 --> 19:27.580
loading

19:28.080 --> 19:28.580
from

19:32.820 --> 19:33.620
component

19:33.720 --> 19:34.220
loading

19:35.620 --> 19:36.020
好

19:36.220 --> 19:38.620
当我们正在加载中的时候

19:38.620 --> 19:40.120
就是还没有resolve的时候

19:40.120 --> 19:40.920
这个promise

19:41.220 --> 19:42.720
那么我们就显示这个组件

19:42.720 --> 19:44.020
它就会自动帮我们显示

19:44.520 --> 19:46.520
最终我们把它合并到这个blog3里面

19:46.520 --> 19:47.320
那么blog3

19:47.320 --> 19:49.220
当正还没有加载完成的时候

19:49.220 --> 19:50.120
它就会显示它

19:50.620 --> 19:51.520
加载完成了过后了

19:51.520 --> 19:52.420
就会显示这个组件

19:52.420 --> 19:53.920
以resolve的组件

19:54.020 --> 19:54.720
懂我的意思吗

19:54.820 --> 19:54.920
好

19:54.920 --> 19:55.820
咱们来看一下吧

19:56.720 --> 19:56.920
好

19:56.920 --> 19:57.420
刷新

19:58.020 --> 19:58.520
你看

19:58.620 --> 19:59.820
我这是不是有这个效果了

20:00.220 --> 20:00.920
loading组件

20:00.920 --> 20:01.820
是不是可以出来了

20:03.120 --> 20:03.320
好

20:03.320 --> 20:05.120
那么如果说错误怎么办呢

20:05.420 --> 20:05.620
哎

20:05.620 --> 20:06.720
我们这里比方说啊

20:06.720 --> 20:08.320
来给它增加一个错误的场景

20:08.620 --> 20:10.920
如果说慢是点软等

20:10.920 --> 20:13.320
小于一个0.5的话

20:13.320 --> 20:15.120
那我就不是resolve了啊

20:15.120 --> 20:16.020
就就是regex了

20:16.020 --> 20:16.420
regex

20:16.420 --> 20:17.720
我相当于是在这里报个错

20:17.820 --> 20:18.420
就一个arrow

20:18.420 --> 20:19.520
随便什么arrow吧

20:19.920 --> 20:20.620
啊有个错

20:21.520 --> 20:22.020
对吧

20:22.220 --> 20:22.820
没问题吧

20:23.020 --> 20:24.520
那么这就是regex的状态

20:24.820 --> 20:26.420
这个promise进入了regex

20:26.620 --> 20:28.220
这就是promise进入了resolve

20:28.520 --> 20:29.120
那么总之呢

20:29.120 --> 20:29.620
还有

20:29.620 --> 20:31.520
还有可能会是一个出错的状态

20:31.520 --> 20:32.420
那么来看一下啊

20:35.840 --> 20:37.040
现在是正常的啊

20:37.040 --> 20:38.140
多刷新几次

20:39.140 --> 20:41.340
啊你看是不是出错了

20:41.540 --> 20:42.440
那么出错了过后呢

20:42.440 --> 20:45.240
这个promise永远不会进入resolve状态

20:45.240 --> 20:45.740
因此呢

20:45.740 --> 20:47.540
他不知道显示啥了啊

20:47.640 --> 20:48.340
那么怎么办呢

20:48.340 --> 20:48.840
这个时候呢

20:48.840 --> 20:49.940
可以告诉他啊

20:49.940 --> 20:50.740
arrow

20:51.140 --> 20:51.740
compoilance

20:51.740 --> 20:52.740
他还有一个配置啊

20:52.740 --> 20:53.640
当出错的时候

20:53.640 --> 20:55.240
你要显示什么组件啊

20:55.240 --> 20:56.740
比方说我们这里出错的时候呢

20:56.740 --> 20:57.840
要显示这个组件

20:57.840 --> 20:58.640
arrow组件

20:59.340 --> 21:00.140
啊这个arrow组件

21:00.140 --> 21:01.140
让我简单写一下吧

21:01.140 --> 21:02.040
非常简单的啊

21:03.240 --> 21:04.240
就随便写一个吧

21:04.240 --> 21:05.440
随便写个就是一个

21:06.340 --> 21:06.940
h3

21:08.240 --> 21:09.140
啊然后呢

21:09.140 --> 21:10.240
我再加个样式

21:10.240 --> 21:10.940
style

21:12.040 --> 21:12.740
sculpt

21:16.580 --> 21:18.280
啊那么h3里边的内容呢

21:18.280 --> 21:19.680
我给他设一个color啊

21:19.980 --> 21:20.680
f10

21:21.480 --> 21:23.080
然后这里边就是一个错误文本

21:23.080 --> 21:23.280
对吧

21:23.280 --> 21:25.180
我们可以用slot来替代

21:25.380 --> 21:26.280
一共传到所有东西

21:26.280 --> 21:27.480
我就放到这个h3里边

21:27.780 --> 21:28.280
什么意思啊

21:28.280 --> 21:30.780
好我就建立一个非常简单的arrow组件啊

21:30.980 --> 21:31.580
那么这边呢

21:31.580 --> 21:33.180
我们就导入这个arrow

21:34.180 --> 21:35.080
arrow组件

21:35.080 --> 21:35.580
from

21:36.780 --> 21:37.680
compoilance

21:38.580 --> 21:39.080
arrow

21:40.580 --> 21:42.280
好那么现在我们要显示arrow组件

21:42.280 --> 21:42.780
对不对

21:43.580 --> 21:44.980
但是现在有个问题就是

21:45.180 --> 21:45.980
我如何

21:47.580 --> 21:49.380
我如何来得到一个

21:50.980 --> 21:53.480
我是把个组件的整个对象给他了

21:53.480 --> 21:53.880
对吧

21:53.880 --> 21:55.880
但是我如何来得到一个就是

21:55.980 --> 21:56.680
渲染一个

21:57.380 --> 21:59.280
有属性的组件呢

22:00.380 --> 22:00.780
懂不懂意思啊

22:00.780 --> 22:03.180
就是我要传递他的内容怎么传递呢

22:04.280 --> 22:05.080
那怎么传递呢

22:05.180 --> 22:05.880
哎我们这里呢

22:05.880 --> 22:06.880
可以配置一个组件吧

22:06.880 --> 22:08.080
配置一个新的组件

22:08.180 --> 22:08.480
对吧

22:08.480 --> 22:10.480
我们知道的5u里边组件就是个对象吗

22:10.480 --> 22:11.680
我给他配置一个组件

22:12.180 --> 22:12.980
那么这个组件呢

22:12.980 --> 22:14.380
我给他提供一个render函数

22:14.480 --> 22:15.480
过去是不是这样的写的

22:15.480 --> 22:15.680
对吧

22:15.680 --> 22:17.280
我们这样的写没有简单一点啊

22:17.980 --> 22:19.380
生成一个什么组件呢

22:19.580 --> 22:21.880
他里边要渲染的是一个arrow组件

22:21.880 --> 22:23.580
arrow组件的内容呢是一个

22:24.280 --> 22:25.380
要出错了

22:27.680 --> 22:28.480
出错了

22:30.080 --> 22:31.480
出错了

22:33.080 --> 22:33.780
好保存

22:33.780 --> 22:34.680
咱们来看一下啊

22:35.280 --> 22:35.780
刷新

22:39.480 --> 22:40.680
看能不能保存啊

22:40.680 --> 22:41.080
好

22:41.180 --> 22:42.480
那么这里又爆错了

22:42.980 --> 22:44.980
他已经触发了这个这个组件了

22:44.980 --> 22:46.580
他要他正在显示这个组件

22:46.580 --> 22:47.180
这个组件呢

22:47.180 --> 22:48.980
是要通过render来渲染出来的

22:49.580 --> 22:50.680
那么这个组件呢

22:50.680 --> 22:52.580
有一个问题就是他告诉的h呢

22:52.680 --> 22:53.680
他不是一个方形

22:54.280 --> 22:55.480
所以有变又变化

22:55.580 --> 22:57.480
在5u2里边这个h不就是一个方形吗

22:57.480 --> 22:59.780
生成一个创建一个虚的节点的方形

22:59.980 --> 23:01.280
但是在5u3里边

23:01.480 --> 23:02.580
h不在这了啊

23:02.580 --> 23:05.580
这里不这里就是给我们渲染组件那个函数啊

23:05.680 --> 23:07.780
渲染那个vlog的函数不在这了

23:07.780 --> 23:08.580
他在哪呢

23:08.880 --> 23:10.480
在5u3里边跑了这来了

23:10.880 --> 23:13.380
他变成了一个全绝的保存函数了

23:13.580 --> 23:15.780
因为他觉得创建一个虚的节点

23:16.780 --> 23:17.780
为什么一定要在这呢

23:17.780 --> 23:19.580
你在任何时候任何地方

23:20.180 --> 23:22.580
甚至不在组件里边都可以创建一个虚的节点

23:22.580 --> 23:24.480
虚的节点就是一个普通对象啊

23:25.280 --> 23:25.680
对不对

23:25.680 --> 23:26.480
所以说呢他把个

23:26.980 --> 23:28.180
从逻辑上来讲呢

23:28.180 --> 23:30.080
他应该是提成一个普通的函数

23:30.080 --> 23:30.980
通了个普通的函数

23:30.980 --> 23:33.780
可以在任意你想要的地方来创建一个虚的节点

23:33.880 --> 23:35.380
所以说呢我们一起在这了啊

23:36.380 --> 23:37.580
这里个小的变化

23:37.980 --> 23:38.780
好保存

23:39.280 --> 23:39.780
刷新

23:44.350 --> 23:44.950
一步去啊

23:44.950 --> 23:45.750
这是正常的状态

23:45.750 --> 23:46.150
再来

23:48.770 --> 23:49.170
再来

23:49.470 --> 23:50.670
总得出错吧

23:53.960 --> 23:55.160
这一步不出错了

23:55.660 --> 23:56.260
再来啊

23:58.240 --> 23:59.340
哎是不是出错了

23:59.840 --> 24:00.240
对吧

24:01.340 --> 24:03.040
Azure is not a constructor

24:03.140 --> 24:03.740
哦哦哦

24:03.740 --> 24:05.740
这个Azure跟这个重复了

24:05.740 --> 24:07.340
没关系我就加个太快Azure吧

24:07.540 --> 24:08.340
就这么个意思

24:08.340 --> 24:09.640
你看现在是不是显示出来了

24:10.340 --> 24:10.540
啊

24:10.540 --> 24:13.340
这就是在5u3里边这种一步组件

24:13.340 --> 24:16.040
夹载中夹载完成和出错了

24:16.040 --> 24:17.240
该如何来处理

24:17.240 --> 24:18.340
就这么方式来处理

24:18.340 --> 24:19.540
跟过去是不是差不多的

24:19.840 --> 24:20.740
那么我们这里呢

24:20.740 --> 24:22.040
对blog5

24:22.240 --> 24:24.140
是不是也可以用同样的方式啊

24:24.140 --> 24:24.740
我们这里呢

24:24.740 --> 24:26.340
为了避免重复代码

24:26.340 --> 24:27.140
我们可以把这个

24:27.940 --> 24:29.740
定义一步组件写到哪呢

24:29.740 --> 24:31.740
写到这个utl里面去啊

24:32.940 --> 24:36.540
export function getersync component

24:38.540 --> 24:39.440
你给我一个什么呢

24:39.440 --> 24:40.740
组件的路径啊

24:40.740 --> 24:42.440
你要一步加载的组件路径

24:46.000 --> 24:46.600
得到

24:47.600 --> 24:48.400
得到

24:49.200 --> 24:50.900
一个一步组件

24:51.600 --> 24:53.200
这个pass是组件加载的路径

24:53.200 --> 24:55.000
那么我们把刚才的代码扔过来

24:56.300 --> 24:58.400
这一串代码全部扔过来

25:02.960 --> 25:04.460
这扔过来

25:06.160 --> 25:06.460
好

25:06.460 --> 25:07.260
这边呢

25:07.260 --> 25:08.860
我们指令是这样子发挥

25:13.010 --> 25:13.610
这一串

25:15.390 --> 25:16.390
这个去掉啊

25:16.390 --> 25:17.390
来检查一下啊

25:17.790 --> 25:20.390
Azure loading都没问题啊

25:20.390 --> 25:21.090
定内

25:21.290 --> 25:22.590
定内的话我们直接有了

25:22.590 --> 25:22.990
对吧

25:23.590 --> 25:24.690
这里本身就有定内

25:24.990 --> 25:25.190
好

25:25.190 --> 25:25.990
来看一下啊

25:26.990 --> 25:27.790
夹载的是什么呢

25:27.790 --> 25:28.590
夹载的是pass

25:29.190 --> 25:29.990
pass帮助

25:30.490 --> 25:31.890
来理下这个逻辑啊

25:31.890 --> 25:32.890
你给我一个pass

25:32.890 --> 25:35.290
然后给你返回的是一个一步组件

25:35.390 --> 25:37.490
那么这个一步组件是怎么来给夹载状态呢

25:37.490 --> 25:38.590
它怎么来夹载的

25:38.990 --> 25:40.590
就通过这么一个函数来夹载的

25:40.890 --> 25:43.090
这个函数race off的时候就表示夹载完成

25:44.190 --> 25:46.490
好有可能夹载出错出错了过后

25:46.490 --> 25:47.190
它会运行

25:47.190 --> 25:48.290
它会使用这个组件

25:49.390 --> 25:51.790
好正在夹载中它会使用这个组件

25:51.990 --> 25:52.390
对吧

25:53.190 --> 25:53.890
最后写完了

25:54.290 --> 25:55.090
好那么这边呢

25:55.090 --> 25:57.190
有了有了这个辅助函数的过后呢

25:58.090 --> 25:59.290
这边就写下简单一点

25:59.790 --> 26:01.090
这边我们可以这样写啊

26:02.190 --> 26:03.890
你这些东西都这些东西全部不要

26:04.690 --> 26:06.090
这些东西都不要了

26:07.090 --> 26:08.890
导入导入一个

26:10.290 --> 26:12.490
从utl里边utl里边

26:13.290 --> 26:16.590
导入那个get async component

26:17.190 --> 26:18.390
得到一个blog3

26:19.390 --> 26:20.790
get async component

26:20.790 --> 26:22.290
所以把一个blog3写进去

26:23.490 --> 26:25.090
component block3

26:25.490 --> 26:25.990
对不对

26:26.390 --> 26:27.590
好保存啊你看一下

26:29.090 --> 26:31.090
是吧效果一样的啊效果一样的

26:32.090 --> 26:35.290
好接下来我们同样的方式来做一个blog5

26:38.540 --> 26:39.840
把blog5加进去

26:40.640 --> 26:42.240
好那么这边显示blog5

26:47.980 --> 26:48.880
好保存啊

26:49.280 --> 26:50.280
刷新你看看

26:52.520 --> 26:55.320
有些能够加载成功有些能够会加载失败

26:55.320 --> 26:57.220
对吧我这里是随机的啊

26:57.220 --> 26:59.020
当然呢在实际的开发中啊

26:59.020 --> 27:01.020
实际开发中你要把这些弄起来去了

27:01.620 --> 27:03.320
实际开发中你要把这个

27:04.320 --> 27:06.320
这个玩意去了啊把这个玩意去了

27:06.420 --> 27:07.720
直接就返回一个import

27:08.120 --> 27:08.920
这才是正确

27:09.220 --> 27:10.420
其他都没有什么变化

27:11.520 --> 27:13.220
我们这里呢主要是为了看到效果

27:13.220 --> 27:14.520
给他进行那个delay

27:15.520 --> 27:18.120
好那么组建一部组建搞定了对不对

27:18.220 --> 27:20.020
然后让我们来看一下一部页面

27:21.120 --> 27:22.020
你看这边啊

27:22.720 --> 27:25.320
刷新的时候这页面也是在一部加载

27:26.120 --> 27:26.620
可不

27:27.320 --> 27:30.020
现在我们其实在这边里可以非常清楚的看到这个

27:30.220 --> 27:31.020
网络通信

27:31.520 --> 27:32.020
没错了

27:32.620 --> 27:33.120
刷新

27:33.620 --> 27:34.520
一看一开始

27:35.020 --> 27:36.020
是没有那个

27:36.720 --> 27:40.020
没有blog3的对吧没有通信blog3和blog5的对不对

27:40.120 --> 27:42.020
是后边才进行通信的是不是一个异部的

27:42.020 --> 27:44.120
看一下一开始是不是没有blog3blog5

27:44.120 --> 27:45.220
这个才这个时候才有

27:46.320 --> 27:46.620
看

27:48.430 --> 27:49.030
等待啊

27:50.330 --> 27:51.730
blog5已经出错了对吧

27:52.030 --> 27:53.030
是这么个意思啊

27:54.430 --> 27:57.330
好那么现在我们来搞定这个异部页面

27:57.630 --> 27:58.530
那到底是一样的

27:58.530 --> 28:01.130
因为页面本质上就是一个组建对不对

28:01.330 --> 28:02.530
所以本质上就是一个组建

28:02.630 --> 28:04.030
现在我们来搞定异部页面

28:05.530 --> 28:06.930
那么我们现在在哪里搞定呢

28:06.930 --> 28:08.430
我们来回到这个路由这里

28:08.830 --> 28:10.630
路由这里我们就不能这样配置的

28:11.030 --> 28:12.830
这样配置是不是就有一个同步的组建了

28:12.830 --> 28:14.830
是吧先把导入进来加载完了过后

28:15.030 --> 28:16.630
就直接放到这个组建里面去了

28:17.030 --> 28:20.230
那么现在我们要搞定的我要做的是一个异部组建

28:20.630 --> 28:22.230
所以说这里是不是还是一样的

28:22.330 --> 28:24.730
要定义一个异部组建放了招

28:24.830 --> 28:27.730
这里也是一样的要通过definersinkcomponent

28:27.930 --> 28:29.430
定一个异部组建放招

28:29.930 --> 28:32.430
那么道理跟刚才的道理是本质上是一样的

28:33.330 --> 28:35.930
所以说呢我们在这个uql.js里面

28:35.930 --> 28:37.630
我们再来一个吧再导出一个函数

28:38.030 --> 28:40.530
方式getersink

28:41.330 --> 28:42.530
配置是一样的

28:42.530 --> 28:44.930
你给我个pass就页面组建

28:45.830 --> 28:47.330
得到一个

28:47.730 --> 28:50.030
得到一个异部页面

28:51.330 --> 28:52.130
那么同样的道理

28:52.130 --> 28:53.330
我再把复制一下

28:53.330 --> 28:54.330
大概都差不多

28:55.130 --> 28:56.230
loader也是一样

28:57.130 --> 28:58.930
延迟一个随机的时间

28:59.130 --> 29:00.730
然后这里不出错了吧

29:00.730 --> 29:01.930
页面我就不出错了

29:02.130 --> 29:05.130
然后直接返回导入这个组建

29:05.130 --> 29:06.730
但是这里只是为了测试

29:07.330 --> 29:09.130
实际的开发中它本身就有延迟

29:09.130 --> 29:10.730
因为远程通信

29:10.830 --> 29:13.330
远程要加在这个介面的相应介面

29:13.330 --> 29:14.930
所以说本身就有延迟

29:15.730 --> 29:18.130
那么loadingcomponent成呢

29:18.830 --> 29:19.930
也是一样loading

29:20.730 --> 29:24.130
我们用这个东西来暂时替换掉组建的位置

29:24.930 --> 29:26.530
组建位置先暂时显示这个

29:26.830 --> 29:27.930
如果出错了

29:27.930 --> 29:29.730
因为我这里倒是不可能出错

29:29.730 --> 29:30.530
我把出错了

29:31.530 --> 29:32.130
对不对

29:32.730 --> 29:35.330
做一个差不多的函数得到一个异部页面

29:36.030 --> 29:36.330
行了

29:36.330 --> 29:37.730
那咱们看一下吧

29:37.730 --> 29:38.730
我们在这里打写

29:39.530 --> 29:40.130
一样的

29:40.730 --> 29:42.730
我们这里的Home就不是这样子来了

29:42.730 --> 29:43.730
Home哪来的

29:43.730 --> 29:44.530
这个Home

29:45.630 --> 29:48.330
我们首先导入通过UTO导入

29:51.820 --> 29:52.820
有点UTO

29:53.320 --> 29:55.420
导入get or sync page

29:58.920 --> 30:00.820
得到的是come

30:01.420 --> 30:03.420
views home

30:04.220 --> 30:05.620
那么about是一样的

30:09.910 --> 30:10.110
对吧

30:10.110 --> 30:12.510
我们通过这种方式来导入异部组建

30:13.110 --> 30:13.210
对吧

30:13.210 --> 30:15.110
这两只是不是这里面是有异部组建的

30:15.510 --> 30:16.410
来看一下效果

30:17.410 --> 30:17.910
刷新

30:18.510 --> 30:18.910
你看

30:19.110 --> 30:20.110
在这边

30:20.310 --> 30:20.710
刷新

30:20.710 --> 30:22.110
你看Home这里是不是要加载

30:22.710 --> 30:24.310
动态加载Home组建

30:24.310 --> 30:25.210
好加载完了过后

30:25.210 --> 30:26.810
然后Home组建里面又是异部加载

30:26.810 --> 30:28.610
有进一步加载它里面的异部组建

30:28.910 --> 30:29.310
对吧

30:29.310 --> 30:31.310
所以说整个流程变成这个样子的

30:31.310 --> 30:33.010
首先我们访问这个地址

30:33.210 --> 30:34.510
请求这个地址的时候

30:34.710 --> 30:35.910
得到的是什么呢

30:35.910 --> 30:37.310
得到其实就是一个APP

30:37.310 --> 30:38.710
一定要围绕里面的东西

30:38.710 --> 30:39.710
里面啥都没有

30:39.910 --> 30:41.110
然后这个时候

30:41.710 --> 30:42.710
异部加载

30:42.710 --> 30:45.310
异部加载Home组建

30:45.310 --> 30:45.910
对不对

30:45.910 --> 30:47.910
当然如果说你Home组建不需要异部的话

30:47.910 --> 30:49.910
那么你Home组建就不需要用这种方式

30:49.910 --> 30:51.310
用同步组建的方式就可以了

30:51.910 --> 30:52.310
好

30:52.510 --> 30:54.510
然后Home组建加载完成了过后

30:54.510 --> 30:55.510
又进一步

30:55.510 --> 31:02.110
异部加载区域3和区域5

31:02.110 --> 31:03.710
看没变成这么一种模式了

31:04.710 --> 31:05.710
这是这一块

31:05.710 --> 31:06.310
那么同样的

31:06.310 --> 31:07.210
而包车也是一样

31:07.210 --> 31:08.510
你看是不是要异部加载

31:09.510 --> 31:10.710
当然加载完成过后了

31:10.710 --> 31:12.310
后边就不需要再异部加载了

31:12.310 --> 31:12.910
为什么

31:12.910 --> 31:14.310
因为浏览器里边

31:14.910 --> 31:15.510
一营迫的

31:15.510 --> 31:17.110
是不是只需要搞定一次的就行了

31:17.110 --> 31:17.310
对吧

31:17.310 --> 31:18.110
它有缓存的

31:18.510 --> 31:20.110
所以说就不需要再异部加载了

31:20.510 --> 31:20.710
OK

31:20.710 --> 31:23.110
那么这就是这一块的方式

31:24.110 --> 31:25.110
当然之前出错的组建

31:25.110 --> 31:26.110
它需要重新加载

31:26.910 --> 31:27.710
它没倒入进来

31:28.910 --> 31:30.310
它只到加载正确为止

31:32.490 --> 31:33.690
怎么反复的出错了

31:34.490 --> 31:35.690
就不能成功一下了

31:36.890 --> 31:38.290
总之它出错的组建

31:38.290 --> 31:39.290
还会重新加载

31:39.290 --> 31:40.090
就这么个意思

31:44.550 --> 31:45.150
好

31:45.950 --> 31:47.350
那么现在还用一个小的问题

31:47.350 --> 31:48.150
就是这边

31:48.350 --> 31:49.750
其实它是有个这个东西

31:49.950 --> 31:50.950
还有一个进度条

31:51.150 --> 31:51.950
那么这个进度条

31:52.150 --> 31:53.950
实际上我用的是一个第三方的裤

31:54.150 --> 31:55.550
这个第三方裤特别简单

31:55.950 --> 31:57.950
叫做improgress

31:58.550 --> 32:03.960
叫做improgress

32:03.960 --> 32:04.560
就这个玩意

32:05.560 --> 32:06.760
YouTube就用的是它

32:07.360 --> 32:07.960
improgress

32:07.960 --> 32:09.760
大家可以去它上面搜一下

32:10.160 --> 32:10.960
那么这个组建

32:10.960 --> 32:12.560
这个插件其实用起来非常非常简单

32:12.560 --> 32:13.160
给大家看一下

32:14.160 --> 32:14.760
这个停止

32:15.360 --> 32:19.160
improgress

32:21.360 --> 32:21.960
安装一下

32:22.560 --> 32:22.760
好

32:22.760 --> 32:23.360
然后启动一下

32:24.560 --> 32:25.760
这个玩意儿咋用呢

32:26.360 --> 32:27.160
这个玩意儿是这样用的

32:27.160 --> 32:28.960
我们在Made.js 再试一下吧

32:30.160 --> 32:31.960
首先你要导入一个css

32:32.760 --> 32:34.760
css叫做improgress

32:34.760 --> 32:37.160
里边有一个improgress.css

32:37.160 --> 32:37.960
导入进来

32:38.160 --> 32:39.360
然后再导入一个

32:39.360 --> 32:40.960
它提供了一个这么一个东西

32:41.560 --> 32:43.360
一个对象progress

32:45.760 --> 32:46.560
improgress

32:47.160 --> 32:47.960
导入进来

32:47.960 --> 32:49.560
然后为了测试方便

32:49.560 --> 32:51.360
我们把它放到Windows里面

32:52.960 --> 32:54.360
这样测试不起来方便一点

32:54.560 --> 32:55.360
看一下怎么用

32:55.360 --> 32:55.960
非常简单

32:56.960 --> 32:58.160
就你们平时看的那个进度条

32:58.160 --> 32:58.960
全是假的

32:59.960 --> 33:00.760
就是一个假货

33:01.760 --> 33:02.360
看一下咋用

33:02.960 --> 33:04.760
其实就是improgress

33:04.760 --> 33:06.360
里边有一个函数叫starts

33:07.360 --> 33:07.960
看吧

33:07.960 --> 33:09.760
一般上就是这么一个东西就出现了

33:10.360 --> 33:11.160
慢慢增长

33:11.960 --> 33:13.160
如果说你觉得它增长

33:13.160 --> 33:14.360
显得它增长得太慢

33:15.560 --> 33:16.960
你可以先进行配置

33:16.960 --> 33:18.360
我们来这里配置吧

33:18.960 --> 33:19.960
可以先进行配置

33:20.360 --> 33:22.160
它里边可以提供一个configure

33:22.360 --> 33:22.760
方法

33:23.160 --> 33:24.160
你可以看它的文档

33:25.160 --> 33:27.360
然后里边有这么一些东西可以配置

33:27.360 --> 33:29.560
比方说我们配置一下这个speed

33:30.360 --> 33:31.360
就这个speed

33:32.360 --> 33:34.560
stackle speed

33:34.560 --> 33:35.360
stackle什么意思

33:35.360 --> 33:36.760
好像是增长的意思

33:37.760 --> 33:38.960
增长的往前进

33:41.360 --> 33:41.960
细流

33:43.960 --> 33:44.960
就增长速度

33:44.960 --> 33:47.160
就是每个多号毫秒它增长一点

33:47.160 --> 33:48.560
每个多号毫秒我们把它设短一点

33:48.560 --> 33:49.560
设存50毫秒

33:49.960 --> 33:50.560
保存

33:50.560 --> 33:51.960
你看一下这边重新来

33:52.960 --> 33:54.360
improgress start

33:55.360 --> 33:56.560
是不是稍微快一点了

33:56.560 --> 33:56.960
是吧

33:56.960 --> 33:58.560
间隔的时间毫秒变短了

33:58.560 --> 33:59.560
然后这个圈圈

33:59.960 --> 34:01.160
圈圈可以把它去掉的

34:02.160 --> 34:03.160
圈圈咋去的

34:03.960 --> 34:04.760
圈圈咋去

34:04.960 --> 34:05.760
我看一下配置

34:06.760 --> 34:07.360
看一下配置

34:07.760 --> 34:08.960
improgress

34:10.760 --> 34:11.360
这东西呢

34:11.360 --> 34:12.160
谁也记得住

34:12.160 --> 34:12.960
结果就去看配置

34:14.160 --> 34:16.160
找一找configuration

34:17.360 --> 34:17.960
找一找

34:17.960 --> 34:19.160
总归有一个配置的

34:19.760 --> 34:21.160
总归有一个配置的

34:25.660 --> 34:26.460
配置的

34:27.660 --> 34:28.860
snipe

34:31.460 --> 34:32.260
读出来

34:33.460 --> 34:34.060
就这个玩意

34:35.060 --> 34:37.060
这个应该是个圆的意思

34:37.060 --> 34:39.060
一个圆的意思

34:41.660 --> 34:42.660
就是旋转的指正

34:42.660 --> 34:43.460
就这个意思

34:44.060 --> 34:45.460
把设为forrest不显示

34:46.260 --> 34:47.860
那么这边就没有这个指正了

34:48.260 --> 34:48.860
试一下

34:49.460 --> 34:49.860
start

34:50.860 --> 34:52.260
这么一个进度条

34:52.660 --> 34:52.860
好

34:52.860 --> 34:54.260
你觉得夹材完成过后

34:54.260 --> 34:57.060
你可以把它随时随地的把它当

34:57.260 --> 34:58.260
表示完成

34:59.060 --> 34:59.660
凭什么用的话

34:59.660 --> 35:01.660
就一般使用这两个海水就够了

35:02.460 --> 35:02.860
来吧

35:02.860 --> 35:03.860
那怎么用呢

35:04.260 --> 35:05.460
有了这个东西我怎么来用呢

35:05.460 --> 35:06.460
我们把这里就不要了

35:07.260 --> 35:09.260
把剪切到音这个设里边

35:09.860 --> 35:10.460
有调里边

35:11.660 --> 35:12.660
为啥剪切到这

35:13.660 --> 35:16.260
因为我们在夹材页面的时候

35:16.460 --> 35:17.460
是在这里夹材

35:17.460 --> 35:17.860
对吧

35:17.860 --> 35:20.660
那我在夹材页面之前是不是显示进度条

35:20.860 --> 35:21.660
improgress

35:22.260 --> 35:22.860
然后呢

35:23.460 --> 35:24.060
start

35:24.260 --> 35:24.860
开始

35:25.460 --> 35:26.460
把进度条开始

35:27.460 --> 35:28.860
什么时候进度条结束了

35:28.860 --> 35:29.260
夹材

35:29.260 --> 35:30.460
组建夹材完成过后

35:30.460 --> 35:31.660
是不是进度条结束

35:31.660 --> 35:32.860
那么这里我们等待

35:32.860 --> 35:35.060
等待它夹材把个组建夹材完成

35:36.460 --> 35:37.860
那么这里等待结束过后

35:37.860 --> 35:39.060
组建是不是跑出来了

35:39.060 --> 35:40.660
最后我们返回这个组建

35:40.860 --> 35:42.460
那么得到这个组建之后

35:42.460 --> 35:43.860
我这里是不是该停止了

35:43.860 --> 35:44.860
improgress

35:44.860 --> 35:45.460
棒

35:45.460 --> 35:46.260
停止

35:47.260 --> 35:48.260
就这么简单

35:48.260 --> 35:49.260
多复杂

35:49.660 --> 35:50.260
保存

35:50.260 --> 35:51.060
看看这边

35:51.260 --> 35:52.460
你看耳报是一面

35:52.860 --> 35:53.460
夹材

35:53.860 --> 35:54.660
夹材完了

35:54.660 --> 35:55.060
Home

35:55.060 --> 35:55.660
这个页面

35:56.660 --> 35:58.260
这个进度条的进度是假的

35:58.260 --> 35:59.060
是假的

35:59.060 --> 36:00.260
并不是真的进度

36:01.260 --> 36:04.060
这里有个区域爆错了

36:04.060 --> 36:05.260
有区域夹材出错了

36:05.860 --> 36:06.860
它是假的进度

36:06.860 --> 36:09.060
就是没有谁可以说真的进度的

36:09.060 --> 36:10.460
因为真的进度毫无意义

36:10.460 --> 36:12.460
而且真的进度还做不出来

36:12.460 --> 36:14.260
因为真的进度

36:14.260 --> 36:15.460
你应该去读取什么

36:15.460 --> 36:17.660
读取它下载的

36:17.660 --> 36:19.460
包括目前下载的数据

36:19.660 --> 36:21.460
比方我们现在要夹载这个介石

36:21.460 --> 36:21.860
对吧

36:21.860 --> 36:23.260
整个后面介石

36:23.260 --> 36:24.660
这个介石一共有多大

36:24.860 --> 36:26.260
目前下载的多大

36:26.260 --> 36:27.860
那么这些数据的浏览器

36:27.860 --> 36:28.660
不会给你的

36:28.860 --> 36:29.460
拿不到的

36:29.460 --> 36:31.060
所以说你没法做真正的进度条

36:31.060 --> 36:33.060
也没有必要去做一个真正的进度条

36:33.660 --> 36:35.260
进度条就是一个心理安慰

36:35.260 --> 36:35.660
对吧

36:37.830 --> 36:39.230
那么这是这么一回事

36:39.430 --> 36:41.030
就把个进度说完了

36:41.030 --> 36:43.230
那么最后就说一下打开蒙层

36:43.830 --> 36:46.030
蒙层我们这里做一个蒙层组建

36:47.230 --> 36:49.030
这里在五右山里边

36:49.030 --> 36:50.830
有个小的地方改进

36:51.030 --> 36:52.230
改进的挺不错的

36:52.630 --> 36:53.230
来吧

36:53.630 --> 36:55.830
蒙层组建Template

36:56.830 --> 36:57.830
我把这个mod

36:58.230 --> 36:59.430
静态的东西拿过来

36:59.630 --> 37:00.830
这就是个蒙层组建

37:00.830 --> 37:02.030
你看一下这静态页面

37:02.430 --> 37:04.230
就是一个班头明的蒙层

37:04.230 --> 37:06.030
把整个页面折照组

37:06.430 --> 37:07.230
有个蒙层

37:07.630 --> 37:09.030
蒙层里边

37:10.030 --> 37:11.230
这是它的样式

37:11.230 --> 37:12.230
样式也拿过来

37:18.230 --> 37:18.430
好

37:18.430 --> 37:20.230
那么这边我们把它做成个插槽

37:21.430 --> 37:22.030
行了

37:22.030 --> 37:22.830
这是个蒙层

37:24.030 --> 37:24.230
好

37:24.230 --> 37:26.630
接下来我们回到这个Home组建里边去

37:26.830 --> 37:28.430
Home组建这里有个按钮

37:28.430 --> 37:29.230
打开蒙层

37:29.830 --> 37:30.430
看这

37:30.830 --> 37:31.830
一个打开蒙层

37:32.230 --> 37:32.430
好

37:32.430 --> 37:32.830
来吧

37:32.830 --> 37:33.430
我们打开

37:34.030 --> 37:35.630
我们这里提供一个数据吧

37:36.430 --> 37:37.430
提供一个

37:38.030 --> 37:39.030
详硬式数据

37:41.630 --> 37:43.430
这里还是用completion API

37:44.830 --> 37:45.430
Rave

37:45.830 --> 37:47.630
一开始是不显示的

37:48.230 --> 37:48.830
这个很好写

37:48.830 --> 37:49.430
对吧

37:49.830 --> 37:54.430
就是VmodelVisibleRave

37:55.230 --> 37:56.030
Return

37:56.630 --> 37:58.230
modelVisible

37:59.630 --> 38:01.430
modelVisibleRave

38:02.030 --> 38:02.430
好

38:02.830 --> 38:03.230
行了

38:03.230 --> 38:04.230
那么这边

38:05.030 --> 38:05.630
打开蒙层

38:05.630 --> 38:06.430
我们干嘛呢

38:06.430 --> 38:07.230
点击的时候

38:07.230 --> 38:10.030
就把个modelVisible设为去

38:11.430 --> 38:11.830
好

38:11.830 --> 38:12.830
那么蒙层我们写到哪

38:12.830 --> 38:13.430
那就写到这

38:13.430 --> 38:14.830
蒙层它不用异步的

38:14.830 --> 38:15.830
我们这里直接倒入

38:16.630 --> 38:17.230
model

38:18.230 --> 38:19.430
这是另外一个知识了

38:19.830 --> 38:20.630
components

38:20.630 --> 38:21.230
model

38:21.430 --> 38:22.030
w

38:22.830 --> 38:23.430
注册一下

38:25.410 --> 38:25.710
好

38:25.710 --> 38:26.810
蒙层我们写到这吧

38:27.210 --> 38:29.210
因为它逻辑上跟这里是相关的

38:29.610 --> 38:30.210
model

38:31.610 --> 38:33.010
给它一个内容

38:33.010 --> 38:34.010
内容是一个button

38:34.510 --> 38:36.010
关闭蒙层

38:37.210 --> 38:37.410
好

38:37.410 --> 38:38.810
这边我们写个vif

38:40.010 --> 38:40.610
vif

38:40.610 --> 38:42.410
什么时候显示这个model呢

38:42.410 --> 38:45.610
就是modelVisible的时候要显示它

38:46.310 --> 38:47.210
好看一下吧

38:47.810 --> 38:48.410
刷新

38:52.530 --> 38:52.830
好

38:52.830 --> 38:53.630
打开蒙层

38:53.630 --> 38:54.230
说出来了

38:54.230 --> 38:55.030
蒙层出来了

38:55.430 --> 38:55.930
对吧

38:55.930 --> 38:57.630
接下来我们要关闭蒙层怎么办呢

38:57.630 --> 38:59.230
关闭蒙层就是按钮啊

38:59.230 --> 39:00.130
点击过后

39:00.130 --> 39:00.830
非常简单

39:00.830 --> 39:03.930
把这个modelVisible设为force

39:03.930 --> 39:04.130
对吧

39:04.130 --> 39:06.130
这是我们以前平时就这样用了

39:06.130 --> 39:06.530
对不对

39:06.930 --> 39:08.130
打开关闭

39:08.930 --> 39:10.330
那么这样子会有什么问题的

39:10.330 --> 39:11.830
我们点击右线检查

39:11.830 --> 39:13.330
它的元素结构啊

39:14.030 --> 39:14.930
不是很合理

39:15.130 --> 39:16.430
它的主键结构合不合理

39:16.430 --> 39:17.130
非常合理

39:17.730 --> 39:19.630
主键结构表示它的逻辑结构

39:19.630 --> 39:19.930
对吧

39:19.930 --> 39:21.130
逻辑结构非常合理

39:21.430 --> 39:24.230
但它的真实的动物结构是不合理的

39:24.430 --> 39:27.130
蒙层的这个vif最好在什么地方

39:27.830 --> 39:29.530
是不是最好出现在

39:30.030 --> 39:31.930
body里边的最后

39:31.930 --> 39:32.530
对不对

39:33.530 --> 39:34.930
这边比较合理一点

39:35.530 --> 39:36.930
那么以前是没办法

39:37.430 --> 39:39.630
以前主键的逻辑结构

39:39.830 --> 39:42.130
就是它最终的真实动物结构

39:42.930 --> 39:44.430
但是现在viu3里边呢

39:44.430 --> 39:46.030
有这有了这么一个东西

39:46.030 --> 39:48.430
它可以让你改动真实的动物结构

39:48.930 --> 39:50.330
用法极其简单

39:50.330 --> 39:50.930
怎么用

39:50.930 --> 39:52.930
你只需要比较的这个主键

39:53.930 --> 39:55.730
它我要把它扔到别的地方去

39:55.730 --> 39:57.830
它的真实的动物要扔到别的地方去

39:57.830 --> 39:58.930
但是它的逻辑

39:59.530 --> 40:01.130
逻辑的结构还在这

40:01.230 --> 40:01.630
怎么办呢

40:01.630 --> 40:03.130
你在外面给它套一个东西叫做

40:03.430 --> 40:04.130
telliport

40:06.930 --> 40:07.630
一般来说我们

40:07.630 --> 40:09.430
这其实它是它的内置主键

40:09.430 --> 40:11.430
主键的话我们一般手这么大起

40:11.430 --> 40:13.030
其实这里的大小鞋都可以

40:14.930 --> 40:17.230
一个是大头风命迷法

40:17.230 --> 40:19.330
一个是短横线命迷法

40:19.330 --> 40:19.730
对吧

40:20.530 --> 40:22.330
其实把它套到这个里边

40:22.430 --> 40:24.630
有把这一部分作为插槽放到这里边

40:25.030 --> 40:26.430
然后这里边有一个属性

40:26.430 --> 40:27.130
叫做tu

40:28.530 --> 40:29.030
属性

40:29.030 --> 40:30.030
tu里边写的什么呢

40:30.030 --> 40:31.730
其实是CSC是选择器

40:32.330 --> 40:34.330
那么这个选择器选中的元素

40:34.330 --> 40:35.830
它就会把里边的这些东西

40:35.830 --> 40:38.030
生成了真实的动物元素扔到这里边去

40:38.230 --> 40:39.630
那么比方我们选择Body

40:40.230 --> 40:40.830
Body

40:41.030 --> 40:42.630
那么这样子它又会把这里边生成的

40:42.630 --> 40:44.630
所有的真实的动物扔到Body里边去

40:44.830 --> 40:45.630
就这么简单

40:46.030 --> 40:46.930
好 现在我们来看一下

40:52.260 --> 40:53.460
打开盟撑

40:53.460 --> 40:53.860
你看

40:54.060 --> 40:55.160
摩托车跑这儿来了

40:55.360 --> 40:56.460
真实的动物跑这儿来了

40:56.460 --> 40:59.160
但是元素我们的逻辑结构是不是还在这

40:59.660 --> 41:02.460
它就把逻辑结构和真实的动物结构分开了

41:02.760 --> 41:03.760
通过这个Teleport

41:04.760 --> 41:05.460
就这么简单

41:05.760 --> 41:06.460
所以这就好了

41:06.460 --> 41:07.560
我们就讲了两个东西

41:07.860 --> 41:09.460
一个是Teleport

41:09.960 --> 41:10.960
非常简单的用法

41:11.960 --> 41:12.960
另外一个呢

41:13.660 --> 41:15.160
就是异部组件

41:15.160 --> 41:16.760
跟过去的用法也差不多

41:18.360 --> 41:20.460
我担心的过去的同学们可能对它不熟

41:20.460 --> 41:21.760
所以说这里拿出来讲一讲

41:22.260 --> 41:22.660
差不多

41:22.660 --> 41:24.760
也就是说把之前的配置

41:24.760 --> 41:26.460
之前那个component变成楼段了

41:26.860 --> 41:27.460
都差不多

41:27.960 --> 41:28.560
这就可能

41:28.860 --> 41:30.660
如果说以前你没有做这样的效果

41:30.760 --> 41:31.960
这就可以一定要去做一下

41:32.660 --> 41:34.260
异部组件是一定要掌握的

41:34.760 --> 41:34.960
好吧

41:34.960 --> 41:35.960
这是这节课的内容

