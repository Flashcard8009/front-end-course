WEBVTT

00:00.110 --> 00:05.610
上节课就是评价的一个快速入门

00:05.610 --> 00:10.810
那么这节课我们来看一下评价里面如何添加这个插件

00:10.810 --> 00:16.410
这边有道面是提他问你是否给这个评价添加过这个插件

00:16.410 --> 00:19.110
具体添加的这个方式是什么

00:19.110 --> 00:22.610
这边关于这个插件这一块

00:22.610 --> 00:25.610
对应的在官方文档的话对应在这一小节

00:25.610 --> 00:26.810
这边有个插件

00:27.010 --> 00:31.110
你看这里由于有了底层API的这个支持

00:31.110 --> 00:35.310
这个拼压STORE现在完全支持扩展

00:35.310 --> 00:39.310
你看这个的话是不是也是相比之前views的一个优势

00:39.310 --> 00:42.310
对不对以前views的话你是没有办法去扩展它

00:42.310 --> 00:43.910
但现在的话就拼了

00:43.910 --> 00:48.310
你可以完全就是可以通过插件的方式来进行这个扩展

00:48.310 --> 00:50.710
好那接下来你扩展的话扩展的内容

00:50.710 --> 00:54.310
大致有这么一些可以给STORE添加新的属性

00:54.310 --> 00:56.710
添加新的选项添加新的方法

00:56.810 --> 00:58.810
包装现有的方法之类的

00:58.810 --> 01:01.010
OK罗列出来了这么几条

01:01.010 --> 01:03.010
我们这边笔记里面记一下

01:03.010 --> 01:06.610
在评价中在评价中

01:06.610 --> 01:09.410
我们可以添加什么呢

01:09.410 --> 01:15.710
可以就是可以为仓库添加插件

01:15.710 --> 01:20.210
通过添加插件添加插件

01:20.210 --> 01:26.340
能够扩展以下的内容

01:26.340 --> 01:27.340
好哪些内容呢

01:27.340 --> 01:31.040
大致就是这么一些

01:31.040 --> 01:32.040
OK

01:32.040 --> 01:35.540
好然后接下来这边这个插件这一块

01:35.540 --> 01:38.040
插件这一块的话你大致可以分成两大类

01:38.040 --> 01:42.490
一个就是你自定义插件

01:42.490 --> 01:45.490
你如何就是创建一个自定义的插件

01:45.490 --> 01:47.490
然后添加到你的这个仓库里面

01:47.490 --> 01:48.490
另外一个就是什么呢

01:48.490 --> 01:50.990
另外一个就是第三方

01:50.990 --> 01:55.310
添加第三方插件

01:55.310 --> 01:57.310
OK更多的时候的话

01:57.310 --> 02:00.310
我们可能就是使用直接使用别人写好的插件

02:00.310 --> 02:03.310
对吧直接使用然后添加进去直接用就可以了

02:03.310 --> 02:05.310
这个可能是更多的时候

02:05.310 --> 02:08.310
但你这边你也要知道就是我自定义一个插件

02:08.310 --> 02:10.310
然后就要如何进行一个自定义

02:10.310 --> 02:12.310
好来我们一个一个来看

02:12.310 --> 02:15.310
首先我们来看这个自定义插件

02:15.310 --> 02:18.310
自定义插件的话他实际上这边的话其实蛮简单的

02:18.310 --> 02:22.310
他这边的话一个插件实际上就是一个函数

02:22.310 --> 02:25.310
OK他一个插件其实就是一个函数

02:25.310 --> 02:27.310
一个函数然后加这边的话他返回一个什么的

02:27.310 --> 02:28.810
返回那个对象对不对

02:28.810 --> 02:29.810
返回那个对象之后

02:29.810 --> 02:32.810
然后加这个对象里面有这么一个叫做secret的属性

02:32.810 --> 02:34.810
好当你这边返回了之后

02:34.810 --> 02:36.810
然后接下来你这个插件

02:36.810 --> 02:39.810
但你这边的话创建好插件之后

02:39.810 --> 02:41.810
然后加你这边要使用

02:41.810 --> 02:44.810
这边要使用通过拼家点誉使用这个插件

02:44.810 --> 02:46.810
好然后接下来使用之后

02:46.810 --> 02:50.810
所有的这个仓库就都有这个属性了

02:50.810 --> 02:52.810
OK就都有这个属性了

02:52.810 --> 02:54.810
好来我们这边我们来看一下吧

02:54.810 --> 02:56.810
我们来到这里

02:57.810 --> 02:59.810
到我们之前的这个例子

03:00.810 --> 03:02.810
这边这个是我们上几颗写的

03:02.810 --> 03:05.810
上几颗写的这个对不对

03:05.810 --> 03:08.810
好然后我们这边的话我们来创建一个插件

03:08.810 --> 03:10.810
我们这边新建一个文件家

03:10.810 --> 03:12.810
叫做progress

03:12.810 --> 03:14.810
好progress然后下面的话

03:14.810 --> 03:18.810
我们新建一个叫做index.js

03:18.810 --> 03:20.810
好在这边这边的话

03:20.810 --> 03:22.810
我就可以这个的话就是

03:22.810 --> 03:24.810
这是我们的这个插件

03:27.890 --> 03:29.890
好那我这边让我写一个方形

03:29.890 --> 03:34.400
方形比如叫做mypnya

03:34.400 --> 03:37.400
mypnya the plugin

03:38.400 --> 03:39.400
one

03:39.400 --> 03:41.400
因为我们一会会写好几个

03:41.400 --> 03:42.400
所以这个叫做one

03:42.400 --> 03:44.400
好你看它就是一个什么

03:44.400 --> 03:45.400
所以就是个函数

03:45.400 --> 03:47.400
对不对然后这个函数的话

03:47.400 --> 03:48.400
我可以把它干嘛

03:48.400 --> 03:50.400
我是不可以把它导出出去

03:50.400 --> 03:52.400
export

03:52.400 --> 03:54.400
对不对导出出去

03:54.400 --> 03:56.400
好然后现在在这个函数里面我干嘛呢

03:56.400 --> 03:58.400
我这边return

03:58.400 --> 04:02.030
return一个对象

04:02.030 --> 04:04.030
好这个对象的话

04:04.030 --> 04:06.030
我们就直接把这儿拿过来吧

04:06.030 --> 04:08.030
这个对象就是这边

04:08.030 --> 04:10.030
有个secret

04:10.030 --> 04:12.030
有个secret

04:12.030 --> 04:14.030
好那你这边的话相当于是在做什么动作呢

04:14.030 --> 04:16.030
你这边的话相当于是在添加

04:16.030 --> 04:19.030
给所有的仓库

04:19.030 --> 04:22.030
给所有的这个仓库

04:22.030 --> 04:25.030
添加了一条

04:25.030 --> 04:28.470
全局属性

04:28.470 --> 04:30.470
你这边相当于是在做这个事情

04:30.470 --> 04:32.470
实际上就和他刚才他的这个说明

04:32.470 --> 04:33.470
这边是一样的

04:33.470 --> 04:36.470
是with store添加新的属性

04:36.470 --> 04:37.470
对不对

04:37.470 --> 04:39.470
好那接下来的话你这边的话

04:39.470 --> 04:40.470
这边写好了之后

04:40.470 --> 04:42.470
然后接下来还有一步要做

04:42.470 --> 04:43.470
哪一步呢

04:43.470 --> 04:45.470
接下来的话你需要去这个

04:45.470 --> 04:47.470
这边

04:47.470 --> 04:49.470
就是你们闷点结实这里

04:49.470 --> 04:51.470
在这边的话你就引入

04:51.470 --> 04:54.470
你自定义的这个插件

04:54.470 --> 04:57.470
引入

04:57.470 --> 04:59.470
引入自定义插件

04:59.470 --> 05:03.230
那接下来这边就通过

05:03.230 --> 05:04.230
import

05:04.230 --> 05:06.230
我们这边这个插件的名字叫做

05:06.230 --> 05:08.230
my pinion

05:08.230 --> 05:10.230
prugin1

05:10.230 --> 05:11.230
对吧

05:11.230 --> 05:12.230
那叫这边from

05:12.230 --> 05:13.230
这边呢就是

05:13.230 --> 05:16.230
应该是当前目录下面

05:16.230 --> 05:20.230
当前目录下面的prugins

05:20.230 --> 05:21.230
OK

05:21.230 --> 05:24.230
因为他这边名字叫做index.js

05:24.230 --> 05:25.230
所以这边就直接就

05:25.230 --> 05:27.230
他默认就是找这个index.js

05:27.230 --> 05:30.230
所以我们这边就prugins

05:30.230 --> 05:31.230
就OK了

05:31.230 --> 05:32.230
这边是不是引入

05:32.230 --> 05:33.230
引入了之后

05:33.230 --> 05:35.230
然后接下来你这边

05:35.230 --> 05:36.230
这边你不是创建了

05:36.230 --> 05:38.230
这个pinion的实力吗

05:38.230 --> 05:39.230
对不对

05:39.230 --> 05:40.230
然后接下来的话

05:40.230 --> 05:43.230
这边就是通过pinion

05:43.230 --> 05:45.230
实力

05:45.230 --> 05:49.950
实力

05:49.950 --> 05:50.950
来什么呢

05:50.950 --> 05:52.950
来注册

05:52.950 --> 05:54.950
注册插件

05:54.950 --> 05:56.950
那我这边就是pinion

05:56.950 --> 05:57.950
点什么呢

05:57.950 --> 05:59.950
通过use方法

05:59.950 --> 06:00.950
怎么样

06:00.950 --> 06:01.950
通过use方法

06:01.950 --> 06:03.950
然后把这个my pinion

06:03.950 --> 06:04.950
prugin1

06:04.950 --> 06:05.950
把它拿过来

06:05.950 --> 06:06.950
就完了

06:06.950 --> 06:07.950
就完了

06:07.950 --> 06:08.950
那你这个插件的话

06:08.950 --> 06:10.950
就已经就生效了

06:10.950 --> 06:11.950
来我们这边保存一下

06:11.950 --> 06:12.950
我们看一下

06:12.950 --> 06:14.950
这个咋看呢

06:14.950 --> 06:15.950
对吧

06:15.950 --> 06:16.950
有东西说你这个咋看呢

06:16.950 --> 06:17.950
这个的话你可以看呀

06:17.950 --> 06:18.950
你这边的话

06:18.950 --> 06:20.950
现在我们这里

06:20.950 --> 06:22.950
你是不是给这个

06:22.950 --> 06:23.950
所有仓库

06:23.950 --> 06:24.950
来到这边

06:24.950 --> 06:25.950
你这边是不是给

06:25.950 --> 06:26.950
所有的仓库

06:26.950 --> 06:28.950
添加了这么一个属性

06:28.950 --> 06:29.950
叫做secret

06:29.950 --> 06:30.950
对不对

06:30.950 --> 06:31.950
好那我们这边

06:31.950 --> 06:32.950
我们就打一下

06:32.950 --> 06:33.950
对不对

06:33.950 --> 06:34.950
我们这边打一下

06:34.950 --> 06:35.950
我们看一下是不是

06:35.950 --> 06:37.950
我们这边来到component

06:37.950 --> 06:39.950
component这边是container

06:39.950 --> 06:41.950
container我们来到哪里呢

06:41.950 --> 06:43.950
来到这个位置

06:43.950 --> 06:44.950
这个位置

06:44.950 --> 06:46.950
你这个位置的话

06:46.950 --> 06:48.950
你这边说得拿到这个仓库

06:48.950 --> 06:49.950
对不对

06:49.950 --> 06:50.950
好那像我们这边

06:50.950 --> 06:51.950
我们就在这里

06:51.950 --> 06:52.950
我们来检验

06:52.950 --> 06:53.950
检验

06:53.950 --> 06:55.950
这个插件

06:55.950 --> 06:57.950
添加

06:57.950 --> 06:59.950
添加

06:59.950 --> 07:03.950
添加上去的这个属性

07:03.950 --> 07:05.950
全局属性

07:05.950 --> 07:07.950
是否

07:07.950 --> 07:09.950
已经添加上去

07:09.950 --> 07:11.950
就是

07:11.950 --> 07:13.950
能够看一下检验插件

07:13.950 --> 07:14.950
添加上去的这个

07:14.950 --> 07:15.950
全局属性

07:15.950 --> 07:17.950
是否成功

07:17.950 --> 07:21.160
添加上去

07:21.160 --> 07:22.160
OK

07:22.160 --> 07:23.160
我们这边打印象

07:23.160 --> 07:25.160
console.log

07:25.160 --> 07:27.160
这边就是store

07:27.160 --> 07:28.160
点什么呢

07:28.160 --> 07:31.600
点secret

07:31.600 --> 07:32.600
secret

07:32.600 --> 07:33.600
secret

07:33.600 --> 07:35.600
secret

07:35.600 --> 07:36.600
对吧

07:36.600 --> 07:37.600
你后面的话

07:37.600 --> 07:38.600
你最好加一下

07:38.600 --> 07:39.600
这个当前

07:39.600 --> 07:40.600
这个是什么组件

07:40.600 --> 07:42.600
这个是我们这边放到

07:42.600 --> 07:43.600
这边打印放到后面

07:43.600 --> 07:45.600
前面加一个标识

07:45.600 --> 07:47.600
当前这个是什么组件

07:47.600 --> 07:48.600
什么container

07:48.600 --> 07:49.600
对吧

07:49.600 --> 07:50.600
container

07:50.600 --> 07:51.600
OK

07:51.600 --> 07:53.600
我们这边的话

07:53.600 --> 07:56.680
在这边

07:56.680 --> 07:58.680
在这边也加一个

07:58.680 --> 07:59.680
store

07:59.680 --> 08:01.680
在这里

08:01.680 --> 08:04.680
我们这个是list的组件

08:04.680 --> 08:06.680
list

08:06.680 --> 08:08.680
保存

08:08.680 --> 08:09.680
保存之后

08:09.680 --> 08:11.680
然后加这边来看一下

08:11.680 --> 08:12.680
上去没有

08:12.680 --> 08:13.680
是不是你看这边的话

08:13.680 --> 08:15.680
这边是不是就挂在上去了

08:15.680 --> 08:16.680
对不对

08:16.680 --> 08:17.680
让我这边切换

08:17.680 --> 08:18.680
这边list

08:18.680 --> 08:20.680
这个唱功是不是也有呢

08:20.680 --> 08:21.680
对不对

08:21.680 --> 08:22.680
你看

08:22.680 --> 08:23.680
是不是就挂在上去了

08:23.680 --> 08:25.680
你看这个是一个插件

08:25.680 --> 08:27.680
一个最简单的实力

08:27.680 --> 08:29.680
这个的话实际上也是他这个官方的例子

08:29.680 --> 08:30.680
OK

08:30.680 --> 08:31.680
官方的例子

08:31.680 --> 08:32.680
好

08:32.680 --> 08:33.680
然后接下来

08:33.680 --> 08:34.680
咱们继续

08:34.680 --> 08:35.680
继续往后面

08:35.680 --> 08:36.680
这边的话

08:36.680 --> 08:37.680
这个插件的话

08:37.680 --> 08:38.680
它实际上

08:38.680 --> 08:40.680
它是接收这么一个参数的

08:40.680 --> 08:41.680
这边呢

08:41.680 --> 08:43.680
会有一个这个context的参数

08:43.680 --> 08:45.680
你通过这个context参数的话

08:45.680 --> 08:46.680
你可以拿到什么

08:46.680 --> 08:47.680
你可以拿到比如说

08:47.680 --> 08:48.680
可以拿到这个pn

08:48.680 --> 08:49.680
这边呢

08:49.680 --> 08:50.680
就是这个pn

08:50.680 --> 08:52.680
就是用这个createpn

08:52.680 --> 08:53.680
创建了这个pn

08:53.680 --> 08:54.680
可以拿到这个app

08:54.680 --> 08:55.680
拿到这个应用

08:55.680 --> 08:56.680
拿到store

08:56.680 --> 08:57.680
拿到options

08:57.680 --> 08:59.680
但我们平时最多的话

08:59.680 --> 09:00.680
我们拿到什么

09:00.680 --> 09:02.680
使用的是这个store

09:02.680 --> 09:03.680
OK

09:03.680 --> 09:04.680
我们这边来试一下

09:05.680 --> 09:07.680
我们回到我们这边

09:08.680 --> 09:09.680
回到这边

09:09.680 --> 09:10.680
然后我们这里

09:10.680 --> 09:11.680
我们再来创建一个

09:12.680 --> 09:13.680
这个插件1

09:13.680 --> 09:14.680
对吧

09:14.680 --> 09:15.680
我们这边export

09:15.680 --> 09:16.680
function

09:16.680 --> 09:18.990
function

09:18.990 --> 09:20.990
mypnia

09:20.990 --> 09:21.990
mypnia

09:21.990 --> 09:23.990
然后pragin2

09:24.990 --> 09:25.990
OK

09:25.990 --> 09:26.990
好了

09:26.990 --> 09:27.990
这个的话

09:27.990 --> 09:28.990
我们这里的话

09:28.990 --> 09:30.990
就把这个context

09:30.990 --> 09:31.990
我把拿到

09:31.990 --> 09:32.990
拿到之后

09:32.990 --> 09:33.990
然后将我们这边

09:33.990 --> 09:34.990
打印一下

09:34.990 --> 09:35.990
我们看一下这个context

09:35.990 --> 09:36.990
好吧

09:36.990 --> 09:37.990
好

09:37.990 --> 09:38.990
那接下来的话

09:38.990 --> 09:39.990
这边这个pragin2

09:39.990 --> 09:40.990
我们同样在这边

09:41.990 --> 09:42.990
把它引入进来

09:43.990 --> 09:44.990
引入进来之后

09:44.990 --> 09:45.990
然后加这边

09:45.990 --> 09:46.990
是不是註册一下

09:46.990 --> 09:47.990
OK

09:47.990 --> 09:48.990
保存一下

09:48.990 --> 09:49.990
保存了之后

09:49.990 --> 09:50.990
然后接下来

09:50.990 --> 09:51.990
来到这边

09:51.990 --> 09:52.990
我们来看一下

09:53.990 --> 09:54.990
你看

09:54.990 --> 09:55.990
这边是不是就打印出来了

09:56.990 --> 09:57.990
对不对

09:57.990 --> 09:58.990
有人说

09:58.990 --> 09:59.990
这边为什么打印出两次呢

10:00.990 --> 10:01.990
大家思考一下

10:01.990 --> 10:03.990
为什么这里会打印出两次

10:04.990 --> 10:05.990
因为你这边的话

10:05.990 --> 10:06.990
它这个插件

10:07.990 --> 10:08.990
它在挂载的时候

10:08.990 --> 10:09.990
它是不是针对的是

10:09.990 --> 10:10.990
所有的这个倉库

10:11.990 --> 10:12.990
对不对

10:12.990 --> 10:13.990
就好比你看我们这边

10:13.990 --> 10:14.990
我们刚才使用

10:14.990 --> 10:16.990
这个pragin1的时候

10:16.990 --> 10:18.990
它是针对哪个倉库

10:18.990 --> 10:20.990
它难道说就是只针对

10:20.990 --> 10:21.990
它难道说就只针对

10:21.990 --> 10:22.990
这个倉库挂载全局属性吗

10:23.990 --> 10:24.990
不是

10:24.990 --> 10:25.990
我们刚才看到这个的话

10:25.990 --> 10:26.990
是不是针对这个倉库

10:27.990 --> 10:28.990
是不是也挂载了

10:28.990 --> 10:29.990
对不对

10:29.990 --> 10:30.990
所以你这边的话

10:30.990 --> 10:31.990
究竟有多少个倉库

10:31.990 --> 10:32.990
它这些插件的话

10:32.990 --> 10:34.990
它就都会对这些倉库

10:34.990 --> 10:35.990
是不是都会生效

10:35.990 --> 10:36.990
对不对

10:36.990 --> 10:37.990
也就是说你这边的话

10:39.990 --> 10:40.990
这边的话

10:40.990 --> 10:41.990
你所有的这个倉库

10:41.990 --> 10:42.990
都会执行什么

10:42.990 --> 10:44.990
是不是都会执行这个韩说

10:44.990 --> 10:45.990
说白了

10:45.990 --> 10:46.990
是不是就这个道理

10:46.990 --> 10:47.990
对不对

10:47.990 --> 10:48.990
所以这边会打印两次

10:48.990 --> 10:49.990
注意

10:49.990 --> 10:50.990
好

10:50.990 --> 10:51.990
这边我们把它这个打印的

10:51.990 --> 10:52.990
这个

10:52.990 --> 10:53.990
我们来看一下

10:53.990 --> 10:54.990
那这边就有什么

10:54.990 --> 10:55.990
是不是有APP

10:55.990 --> 10:56.990
有拼鸭

10:56.990 --> 10:57.990
有这个options

10:57.990 --> 10:59.990
还有这个store

10:59.990 --> 11:00.990
就这几个

11:00.990 --> 11:01.990
对不对

11:01.990 --> 11:02.990
这个store

11:02.990 --> 11:03.990
其实一般来讲

11:03.990 --> 11:04.990
我们用的最多的就是store

11:04.990 --> 11:06.990
一般就是用store

11:06.990 --> 11:07.990
store的话就是拿到什么

11:07.990 --> 11:09.990
什么拿到当前的这个倉库

11:09.990 --> 11:10.990
对不对

11:10.990 --> 11:12.990
拿到当前的倉库

11:12.990 --> 11:13.990
倉库你可以看到这边

11:13.990 --> 11:14.990
你看

11:14.990 --> 11:16.990
我们刚才挂载的这个secret

11:16.990 --> 11:17.990
这边是不是能够看到

11:17.990 --> 11:18.990
对不对

11:18.990 --> 11:19.990
除了secret以外

11:19.990 --> 11:20.990
大家这边还有就是

11:20.990 --> 11:21.990
我们之前写的这些方法

11:21.990 --> 11:23.990
什么sync decrement

11:23.990 --> 11:25.990
sync increment

11:25.990 --> 11:26.990
这个increment

11:26.990 --> 11:27.990
对吧

11:27.990 --> 11:28.990
decrement

11:28.990 --> 11:29.990
double count increment

11:29.990 --> 11:30.990
对不对

11:30.990 --> 11:31.990
这是这个倉库

11:31.990 --> 11:32.990
好

11:32.990 --> 11:34.990
然后这边

11:34.990 --> 11:36.990
这边的这个store

11:36.990 --> 11:37.990
这边这个store

11:37.990 --> 11:38.990
我们把它展开

11:38.990 --> 11:39.990
展开之后

11:39.990 --> 11:40.990
你看这边仍然是

11:40.990 --> 11:41.990
看到的这个secret

11:41.990 --> 11:42.990
对不对

11:42.990 --> 11:43.990
大家这个的话

11:43.990 --> 11:44.990
它是数据

11:44.990 --> 11:45.990
这个list数据

11:45.990 --> 11:46.990
还记得吧

11:46.990 --> 11:47.990
看到没有

11:47.990 --> 11:48.990
最多的话

11:48.990 --> 11:49.990
就是拿这个store

11:49.990 --> 11:50.990
所以我们经常的话

11:50.990 --> 11:52.990
我们这边其实是这样子的

11:52.990 --> 11:55.990
就通过解构

11:55.990 --> 11:56.990
拿store

11:56.990 --> 11:58.990
就更多的实际上是这样子来写

11:58.990 --> 11:59.990
但你这边

11:59.990 --> 12:00.990
你要拿完整的这个context

12:00.990 --> 12:01.990
也可以

12:01.990 --> 12:02.990
拿了之后

12:02.990 --> 12:04.990
然后将你在这里面来解构

12:04.990 --> 12:05.990
这边也可以

12:05.990 --> 12:06.990
对不对

12:06.990 --> 12:07.990
const

12:07.990 --> 12:08.990
通过这个解构

12:08.990 --> 12:09.990
把这个store

12:09.990 --> 12:11.990
把它拿到

12:11.990 --> 12:12.990
OK

12:12.990 --> 12:13.990
拿到之后

12:13.990 --> 12:14.990
然后接下来

12:14.990 --> 12:16.990
我针对这个store

12:16.990 --> 12:17.990
我挂一个属性

12:17.990 --> 12:18.990
等于一个什么

12:18.990 --> 12:19.990
等于一个比如

12:19.990 --> 12:20.990
this

12:21.990 --> 12:24.990
this is a test

12:24.990 --> 12:26.990
针对每一个这个store

12:26.990 --> 12:27.990
挂了一个这个

12:27.990 --> 12:28.990
全局属性

12:28.990 --> 12:30.990
全局的属性上去

12:30.990 --> 12:31.990
对不对

12:31.990 --> 12:32.990
接下来测试

12:32.990 --> 12:34.990
看挂上去没有

12:34.990 --> 12:36.990
这边的话是

12:36.990 --> 12:37.990
test

12:38.990 --> 12:39.990
这边也是

12:40.990 --> 12:41.990
这边也是

12:41.990 --> 12:42.990
test

12:43.990 --> 12:44.990
OK

12:44.990 --> 12:45.990
我们保存

12:45.990 --> 12:46.990
保存之后

12:46.990 --> 12:47.990
我们这边来看一下

12:48.990 --> 12:49.990
我们现在是在代办实相

12:49.990 --> 12:50.990
这边

12:50.990 --> 12:51.990
这个是刚才

12:51.990 --> 12:52.990
插件1挂的属性

12:52.990 --> 12:54.990
这是插件2挂的属性

12:54.990 --> 12:55.990
挂上去了

12:55.990 --> 12:56.990
这边

12:56.990 --> 12:57.990
这边

12:57.990 --> 12:58.990
这边挂上去了

12:58.990 --> 12:59.990
OK

12:59.990 --> 13:00.990
没任何问题

13:00.990 --> 13:02.990
这边就挂上去了

13:02.990 --> 13:03.990
好

13:03.990 --> 13:04.990
然后接下来

13:04.990 --> 13:05.990
这边你注意

13:05.990 --> 13:06.990
这边的话

13:06.990 --> 13:07.990
实际上

13:07.990 --> 13:08.990
这边的话

13:08.990 --> 13:09.990
你看他这边在介绍的时候

13:09.990 --> 13:10.990
他这边有这么一句话

13:10.990 --> 13:11.990
仅应用

13:11.990 --> 13:12.990
插件于

13:12.990 --> 13:14.990
特定的这个store

13:15.990 --> 13:16.990
OK

13:16.990 --> 13:17.990
这边的话就是我想

13:17.990 --> 13:18.990
比如说我要挂一个属性

13:18.990 --> 13:19.990
但是我不想

13:19.990 --> 13:21.990
就是所有的插件

13:21.990 --> 13:23.990
所有的仓库都生效

13:23.990 --> 13:24.990
我只想针对

13:24.990 --> 13:26.990
其中的某一个仓库

13:26.990 --> 13:29.990
我给他挂一个属性上去

13:29.990 --> 13:31.990
那这一步该怎么做呢

13:31.990 --> 13:32.990
这一步该怎么做

13:32.990 --> 13:33.990
你想想

13:33.990 --> 13:34.990
就刚才我们这边

13:34.990 --> 13:35.990
在打印的时候

13:35.990 --> 13:36.990
把刚才那个

13:36.990 --> 13:37.990
助手打开

13:41.360 --> 13:42.360
接下来你在这边

13:42.360 --> 13:43.360
你看一下

13:43.360 --> 13:44.360
这边的话

13:44.360 --> 13:45.360
这个store

13:45.360 --> 13:46.360
你仔细看一下

13:46.360 --> 13:48.360
这边他有个什么

13:48.360 --> 13:50.360
他是不是有一个downer ID

13:50.360 --> 13:51.360
对不对

13:51.360 --> 13:52.360
他有个downer ID

13:52.360 --> 13:53.360
downer ID

13:53.360 --> 13:54.360
这边拿到的就是什么

13:54.360 --> 13:56.360
拿到的就是你

13:56.360 --> 13:59.360
仓库的特殊的ID

13:59.360 --> 14:01.360
这个ID是在哪个地方

14:01.360 --> 14:02.360
在哪个地方定义的

14:02.360 --> 14:05.360
是不是就是我们在这里

14:05.360 --> 14:06.360
是不是在这里定义的

14:06.360 --> 14:08.360
这个在我们最开始讲的时候

14:08.360 --> 14:09.360
我们就说过

14:09.360 --> 14:10.360
你这边的话

14:10.360 --> 14:11.360
要给他一个特定的ID

14:11.360 --> 14:12.360
对不对

14:12.360 --> 14:14.360
那我通过这个的话

14:14.360 --> 14:16.360
是不是就可以给特定的这个仓库

14:16.360 --> 14:18.360
来扩展这个属性

14:18.360 --> 14:19.360
或者扩展方法

14:19.360 --> 14:21.360
方法我们一会会写

14:21.360 --> 14:22.360
好

14:22.360 --> 14:23.360
来我们这边来试一下

14:23.360 --> 14:26.360
接下来再来一个插件

14:26.360 --> 14:29.360
export function

14:29.360 --> 14:31.360
my pinia

14:31.360 --> 14:33.360
pinia plugin

14:33.360 --> 14:36.870
这个store

14:36.870 --> 14:39.870
我们这边就直接拿到这个store

14:39.870 --> 14:41.870
我们这个我们要演示什么

14:41.870 --> 14:42.870
这边我们要演示

14:42.870 --> 14:46.880
就是给特定的

14:46.880 --> 14:49.880
给特定的仓库

14:49.880 --> 14:51.880
来扩展

14:51.880 --> 14:53.880
扩展这个内容

14:53.880 --> 14:54.880
ok

14:54.880 --> 14:55.880
好了接下来我这边就可以干嘛

14:55.880 --> 14:57.880
我这边是不是就可以写个判断

14:57.880 --> 15:02.880
if store.downerID

15:02.880 --> 15:04.880
全等于什么呢

15:04.880 --> 15:07.880
全等于比如说container

15:07.880 --> 15:08.880
container的话

15:08.880 --> 15:10.880
是不是就是我这个

15:10.880 --> 15:11.880
对不对

15:11.880 --> 15:12.880
这个仓库

15:12.880 --> 15:13.880
如果等于container

15:13.880 --> 15:14.880
好

15:14.880 --> 15:16.880
这边为当前

15:16.880 --> 15:19.880
为当前ID

15:19.880 --> 15:21.880
为这个container

15:21.880 --> 15:24.880
为container的这个仓库

15:24.880 --> 15:26.880
来扩展

15:26.880 --> 15:27.880
扩展什么

15:27.880 --> 15:29.880
扩展属性

15:29.880 --> 15:30.880
ok

15:30.880 --> 15:32.880
好来我们这边return

15:32.880 --> 15:33.880
return一个

15:33.880 --> 15:35.880
这边随便写个嘛

15:35.880 --> 15:37.880
随便写个比较name

15:37.880 --> 15:42.880
这边写个比较叫myname is pinia

15:42.880 --> 15:43.880
ok

15:43.880 --> 15:44.880
扩展了之后

15:44.880 --> 15:46.880
然后接下来我们在这里

15:46.880 --> 15:48.880
同样这边一样的步骤

15:48.880 --> 15:52.880
把它引入一下my pinia

15:52.880 --> 15:55.320
然后加这边

15:55.320 --> 15:56.320
ok

15:56.320 --> 15:57.320
使用这个

15:57.320 --> 15:58.320
使用这个之后

15:58.320 --> 16:00.320
然后接下来来到container这边

16:00.320 --> 16:01.320
container这边

16:01.320 --> 16:02.320
然后像我们这边来打印一下

16:02.320 --> 16:03.320
这边刚才有个什么

16:03.320 --> 16:04.320
这边有个name

16:04.320 --> 16:05.320
对不对

16:05.320 --> 16:06.320
好同样

16:06.320 --> 16:07.320
然后接下来这边

16:07.320 --> 16:08.320
这边我们一样打印一下

16:08.320 --> 16:09.320
我们看这边的话

16:09.320 --> 16:10.320
会不会添加上去

16:10.320 --> 16:12.320
这边一个name

16:12.320 --> 16:13.320
保存

16:13.320 --> 16:14.320
保存之后

16:14.320 --> 16:17.320
接下来这边来看一下

16:17.320 --> 16:18.320
我们把那个

16:18.320 --> 16:21.320
这个把它做掉

16:21.320 --> 16:23.760
这个不要了

16:23.760 --> 16:24.760
ok

16:24.760 --> 16:26.760
好你看这里

16:26.760 --> 16:27.760
这里的话

16:27.760 --> 16:30.760
首先这边myname is pinia

16:30.760 --> 16:31.760
对不对

16:31.760 --> 16:32.760
myname is pinia

16:32.760 --> 16:33.760
然后加你这边过来

16:33.760 --> 16:34.760
你看这边的话

16:34.760 --> 16:35.760
是不是indefine

16:35.760 --> 16:36.760
对不对

16:36.760 --> 16:37.760
这边就是indefine

16:37.760 --> 16:38.760
你看

16:38.760 --> 16:39.760
是ok的

16:39.760 --> 16:40.760
那我现在是不是

16:40.760 --> 16:42.760
针对特定的倉库

16:42.760 --> 16:44.760
是不是去扩展了属性

16:44.760 --> 16:45.760
当然这个

16:45.760 --> 16:47.760
你也可以扩展这个方法

16:47.760 --> 16:48.760
反正就是针对这个

16:48.760 --> 16:49.760
特定的这个倉库

16:49.760 --> 16:51.760
去扩展这个内容

16:51.760 --> 16:52.760
ok

16:52.760 --> 16:54.760
这一步也就做到了

16:54.760 --> 16:55.760
好

16:55.760 --> 16:56.760
然后接下来

16:56.760 --> 16:57.760
我们这边再来写一个

16:57.760 --> 16:58.760
接下来我们来写一个

16:58.760 --> 16:59.760
这个方法

16:59.760 --> 17:00.760
我们这边的话

17:00.760 --> 17:02.760
来解决一个实际的问题

17:02.760 --> 17:03.760
什么问题呢

17:03.760 --> 17:04.760
就是我们这边

17:04.760 --> 17:06.760
在使用这个

17:06.760 --> 17:08.760
这边代表事项

17:08.760 --> 17:09.760
就在这边

17:09.760 --> 17:11.760
这边使用代表事项的时候

17:11.760 --> 17:12.760
这边的话

17:12.760 --> 17:14.760
这边是使用的是

17:14.760 --> 17:15.760
composition API

17:15.760 --> 17:16.760
对不对

17:16.760 --> 17:17.760
composition API的话

17:17.760 --> 17:18.760
这边的话

17:18.760 --> 17:20.760
会存在一个问题

17:20.760 --> 17:21.760
什么问题呢

17:21.760 --> 17:22.760
它这边的话

17:22.760 --> 17:23.760
就是你比如说

17:23.760 --> 17:24.760
你想要这个重置之类的

17:24.760 --> 17:25.760
你想使用这个

17:25.760 --> 17:27.760
downer reset

17:27.760 --> 17:28.760
这边它这个

17:28.760 --> 17:29.760
downer reset

17:29.760 --> 17:30.760
它是不生效的

17:30.760 --> 17:31.760
ok

17:31.760 --> 17:32.760
来我们这边

17:32.760 --> 17:33.760
我们可以来看一下

17:33.760 --> 17:34.760
好

17:34.760 --> 17:35.760
我们来到

17:35.760 --> 17:37.760
我们的代码里面

17:37.760 --> 17:38.760
来到代码

17:38.760 --> 17:40.760
我们来到这边

17:40.760 --> 17:41.760
这边

17:41.760 --> 17:42.760
前写的是吧

17:42.760 --> 17:43.760
我们在这边

17:43.760 --> 17:44.760
在它的上面

17:44.760 --> 17:45.760
我们添加一下

17:45.760 --> 17:46.760
添加一下这边是什么呢

17:46.760 --> 17:47.760
重置

17:48.760 --> 17:51.760
重置代办事项

17:51.760 --> 17:53.760
代办事项的

17:53.760 --> 17:54.760
这个参考状态

17:54.760 --> 17:58.420
ok

17:58.420 --> 17:59.420
好

17:59.420 --> 18:00.420
我这边添加一个

18:00.420 --> 18:01.420
div

18:01.420 --> 18:03.420
div.input

18:04.420 --> 18:05.420
container

18:05.420 --> 18:06.420
好

18:06.420 --> 18:07.420
然后这里面

18:07.420 --> 18:08.420
这里面的话一个button

18:08.420 --> 18:09.420
button叫我们这边

18:09.420 --> 18:11.420
这边叫做还原

18:11.420 --> 18:14.880
还原

18:14.880 --> 18:16.880
还原初始状态

18:16.880 --> 18:22.090
还原初始状态

18:22.090 --> 18:23.090
ok

18:23.090 --> 18:24.090
好

18:24.090 --> 18:25.090
这边给它一个

18:25.090 --> 18:26.090
样式列

18:26.090 --> 18:27.090
class

18:27.090 --> 18:29.090
等于一个button

18:29.090 --> 18:30.090
好

18:30.090 --> 18:31.090
然后接下来这边

18:31.090 --> 18:32.090
稍微设置一下样式

18:32.090 --> 18:34.090
这边我给了一下这个margin

18:34.090 --> 18:36.090
margin bottom

18:36.090 --> 18:38.720
ok

18:38.720 --> 18:39.720
给了个二次相处

18:39.720 --> 18:40.720
好

18:40.720 --> 18:41.720
然后接下来这边

18:41.720 --> 18:42.720
绑定一个时间

18:42.720 --> 18:43.720
ture click

18:43.720 --> 18:46.720
等于一个reset handle

18:46.720 --> 18:47.720
好

18:47.720 --> 18:49.720
然后接下来在你的下面

18:49.720 --> 18:50.720
下面的话是不是需要

18:50.720 --> 18:52.720
有这么一个方法

18:52.720 --> 18:53.720
对不对

18:53.720 --> 18:54.720
好

18:54.720 --> 18:56.720
这边是还原

18:56.720 --> 18:57.720
还原

18:57.720 --> 19:02.740
这个仓库的数据状态

19:02.740 --> 19:03.740
好

19:03.740 --> 19:06.560
方形

19:06.560 --> 19:08.560
方形

19:08.560 --> 19:09.560
方形

19:09.560 --> 19:10.560
reset handle

19:10.560 --> 19:11.560
ok

19:11.560 --> 19:12.560
好

19:12.560 --> 19:13.560
那以前的话

19:13.560 --> 19:14.560
我们这边还原是怎么写的

19:14.560 --> 19:15.560
来你这边参照一下

19:15.560 --> 19:16.560
这个container这边

19:16.560 --> 19:17.560
这边的话

19:17.560 --> 19:18.560
我们之前还原

19:18.560 --> 19:20.560
我们这里找一找

19:20.560 --> 19:22.560
直接调这个store.downerreset

19:22.560 --> 19:23.560
就可以

19:23.560 --> 19:24.560
对你甚至的话

19:24.560 --> 19:25.560
你这边的话

19:25.560 --> 19:26.560
其实没有必要

19:26.560 --> 19:28.560
没有必要这边写个方法

19:28.560 --> 19:29.560
你这边直接就是什么

19:29.560 --> 19:31.560
直接就是store

19:31.560 --> 19:36.560
store.downerreset

19:36.560 --> 19:37.560
直接这样写

19:37.560 --> 19:38.560
对吧

19:38.560 --> 19:39.560
我们保存一下

19:39.560 --> 19:40.560
我们来看一下

19:40.560 --> 19:41.560
下面这个就不要了吧

19:41.560 --> 19:42.560
下面这个就不要了

19:42.560 --> 19:43.560
先留着

19:43.560 --> 19:44.560
先留着

19:44.560 --> 19:45.560
一会我们回头要调用

19:45.560 --> 19:46.560
好

19:46.560 --> 19:47.560
然后将我们这边来看一下

19:47.560 --> 19:48.560
行不行

19:49.560 --> 19:50.560
好

19:50.560 --> 19:51.560
这边这个按钮

19:51.560 --> 19:52.560
按钮我们干脆

19:52.560 --> 19:53.560
我们把这个宽度给他

19:53.560 --> 19:54.560
我看到这边

19:54.560 --> 19:55.560
好像设了个宽度

19:55.560 --> 19:56.560
宽度不要了

19:56.560 --> 19:57.560
ok

19:57.560 --> 19:58.560
这样子

19:58.560 --> 19:59.560
好来我们这边

19:59.560 --> 20:00.560
我们来试一下

20:00.560 --> 20:01.560
保存了之后

20:01.560 --> 20:02.560
大家这边

20:02.560 --> 20:03.560
我们这边

20:03.560 --> 20:04.560
随便弄一点

20:04.560 --> 20:05.560
比较复习

20:05.560 --> 20:06.560
随便写吧

20:06.560 --> 20:07.560
所谓

20:07.560 --> 20:08.560
ok

20:09.560 --> 20:10.560
好

20:10.560 --> 20:11.560
随便新增一些

20:11.560 --> 20:12.560
对吧

20:12.560 --> 20:13.560
ok

20:13.560 --> 20:14.560
好

20:14.560 --> 20:15.560
然后将我这边点击还原

20:15.560 --> 20:16.560
你会发现这边的话

20:16.560 --> 20:17.560
报错了

20:17.560 --> 20:18.560
ok

20:18.560 --> 20:19.560
报错了

20:19.560 --> 20:20.560
报什么错

20:20.560 --> 20:21.560
store list

20:21.560 --> 20:22.560
is built

20:22.560 --> 20:23.560
using the

20:23.560 --> 20:25.560
set up syntax

20:25.560 --> 20:26.560
什么意思

20:26.560 --> 20:27.560
就是你这边

20:27.560 --> 20:28.560
你这个list

20:28.560 --> 20:29.560
它是使用什么呢

20:29.560 --> 20:30.560
使用的是set up

20:30.560 --> 20:31.560
这个语法

20:31.560 --> 20:32.560
set up 语法是什么

20:32.560 --> 20:33.560
set up 语法

20:33.560 --> 20:34.560
是不是就是我们的

20:34.560 --> 20:35.560
composition API

20:35.560 --> 20:36.560
对不对

20:36.560 --> 20:37.560
就是组合式风格

20:37.560 --> 20:38.560
然后接下来这边

20:38.560 --> 20:40.560
and does not

20:40.560 --> 20:41.560
implement

20:41.560 --> 20:42.560
downer reset

20:42.560 --> 20:44.560
这种风格的话

20:44.560 --> 20:45.560
你是没有办法

20:45.560 --> 20:46.560
使用这个

20:46.560 --> 20:47.560
downer reset

20:48.560 --> 20:49.560
看到没有

20:49.560 --> 20:50.560
你是没有办法使用

20:50.560 --> 20:51.560
downer reset

20:51.560 --> 20:52.560
那怎么办呢

20:52.560 --> 20:53.560
这个时候的话

20:53.560 --> 20:54.560
我们就可以通过

20:54.560 --> 20:55.560
这个插件

20:55.560 --> 20:57.560
是不是自己来扩展

20:57.560 --> 20:58.560
是不是自己来完善

20:58.560 --> 20:59.560
这个功能

20:59.560 --> 21:00.560
对不对

21:00.560 --> 21:01.560
好来到我们的

21:01.560 --> 21:03.560
这边回到我们的代码

21:03.560 --> 21:05.560
回到我们这个插件这边

21:05.560 --> 21:07.560
插件这边的话

21:07.560 --> 21:08.560
然后接下来我们这边

21:08.560 --> 21:10.560
我们再来定义一个插件

21:11.560 --> 21:12.560
这个我们就

21:12.560 --> 21:14.560
不是扩展这个属性的

21:14.560 --> 21:16.560
我们这边要扩展一个方法了

21:16.560 --> 21:18.560
好这边function

21:18.560 --> 21:20.560
my pinia

21:20.560 --> 21:22.560
my pinia

21:22.560 --> 21:23.560
prouding

21:23.560 --> 21:27.640
这个for

21:27.640 --> 21:28.640
好然后这个的话

21:28.640 --> 21:29.640
它是要干嘛呢

21:29.640 --> 21:30.640
这个的话它是

21:30.640 --> 21:34.340
我们这个是重置

21:34.340 --> 21:36.340
重置仓库状态

21:36.340 --> 21:40.340
重置仓库状态

21:40.340 --> 21:43.340
好重置仓库状态

21:43.340 --> 21:44.340
这边可以怎么写呢

21:44.340 --> 21:45.340
我们首先的话

21:45.340 --> 21:46.340
可以把这个

21:46.340 --> 21:47.340
初始的状态

21:47.340 --> 21:49.340
是不是拷贝一方

21:49.340 --> 21:52.340
我们首先

21:52.340 --> 21:54.340
可以将什么呢

21:54.340 --> 21:56.340
将这个初始

21:56.340 --> 21:58.340
初始状态

21:58.340 --> 21:59.340
生拷贝

21:59.340 --> 22:01.340
注意你一定要生拷贝

22:01.340 --> 22:04.340
生拷贝

22:04.340 --> 22:07.340
生拷贝一分

22:07.340 --> 22:08.340
OK

22:08.340 --> 22:09.340
好那接下来

22:09.340 --> 22:10.340
我们这边的话

22:10.340 --> 22:12.340
我还得写个生拷贝的这个方法

22:12.340 --> 22:13.340
这边这个

22:13.340 --> 22:14.340
这个方法我就拿过来吧

22:14.340 --> 22:15.340
这个不是什么知识点

22:15.340 --> 22:16.340
对吧

22:16.340 --> 22:18.340
这个是属于解释基础了

22:18.340 --> 22:20.340
我这边简单写了一个

22:20.340 --> 22:22.340
这边叫做deep clone

22:22.340 --> 22:24.340
接受一个这个对象

22:24.340 --> 22:25.340
对象如果

22:25.340 --> 22:26.340
不是object

22:26.340 --> 22:27.340
不是这个nau

22:27.340 --> 22:28.340
这边就直接返回

22:28.340 --> 22:29.340
否则的话

22:29.340 --> 22:30.340
这边判断一下

22:30.340 --> 22:31.340
判断了之后这边便利

22:31.340 --> 22:32.340
便利之后人家这边

22:32.340 --> 22:33.340
通过低规

22:33.340 --> 22:34.340
通过低规这边便利

22:34.340 --> 22:35.340
便利之后

22:35.340 --> 22:36.340
然后这边

22:36.340 --> 22:37.340
进行个拷贝

22:37.340 --> 22:38.340
OK

22:38.340 --> 22:39.340
这个是属于解释的知识

22:39.340 --> 22:41.340
这个不是这边的知识

22:41.340 --> 22:43.340
从直接拿过来

22:43.340 --> 22:44.340
好然后接下来

22:44.340 --> 22:45.340
这里

22:45.340 --> 22:46.340
这里我们首先解构

22:46.340 --> 22:47.340
拿到store

22:47.340 --> 22:48.340
拿到store之后

22:48.340 --> 22:49.340
人家我这边

22:49.340 --> 22:51.340
可以通过store的什么呢

22:51.340 --> 22:53.340
可以通过store的点

22:53.340 --> 22:55.340
downer state

22:55.340 --> 22:56.340
拿到什么呢

22:56.340 --> 22:59.340
拿到它原始的这个状态

22:59.340 --> 23:01.340
拿到这个原始的状态之后

23:01.340 --> 23:02.340
然后接下来

23:02.340 --> 23:04.340
我这边让我拷贝一份

23:04.340 --> 23:05.340
deep clone

23:05.340 --> 23:07.340
生拷贝一份

23:07.340 --> 23:08.340
生拷贝一份之后

23:08.340 --> 23:10.340
然后接下来这边

23:10.340 --> 23:13.340
constate等于

23:13.340 --> 23:14.340
那首先我是不是就把它

23:14.340 --> 23:16.340
就是初始的这个状态

23:16.340 --> 23:18.340
是不是生拷贝了一份

23:18.340 --> 23:19.340
生拷贝了一份之后

23:19.340 --> 23:21.340
然后接下来的话

23:21.340 --> 23:22.340
我这边

23:22.340 --> 23:23.340
我就可以考虑什么呢

23:23.340 --> 23:25.340
我这边就可以考虑给这个store

23:25.340 --> 23:26.340
添加一个什么呢

23:26.340 --> 23:28.340
添加一个方法

23:28.340 --> 23:30.340
这边reset

23:30.340 --> 23:31.340
等于一个

23:31.340 --> 23:33.840
看到没有

23:33.840 --> 23:35.840
我针对你当前的这个store

23:35.840 --> 23:36.840
我这边是不是就添加了一个叫做

23:36.840 --> 23:38.840
reset的方法

23:38.840 --> 23:39.840
对不对

23:39.840 --> 23:40.840
reset的方法

23:40.840 --> 23:41.840
然后在这里面

23:41.840 --> 23:42.840
我们要做什么呢

23:42.840 --> 23:43.840
在这里面的话

23:43.840 --> 23:46.840
我们这边就调用这个store

23:46.840 --> 23:47.840
调用store的什么呢

23:47.840 --> 23:51.840
调用store的downer patch

23:51.840 --> 23:52.840
通过这个

23:52.840 --> 23:53.840
好

23:53.840 --> 23:54.840
这样你要

23:54.840 --> 23:55.840
你这边的话

23:55.840 --> 23:56.840
你是要就是还原吗

23:56.840 --> 23:57.840
还原的话

23:57.840 --> 23:58.840
那接下来你这边的话

23:58.840 --> 23:59.840
就是把这个state

23:59.840 --> 24:00.840
把它传进去

24:00.840 --> 24:01.840
但是你要注意

24:01.840 --> 24:02.840
你这边在patch的时候

24:02.840 --> 24:04.840
也要生拷贝

24:04.840 --> 24:05.840
如果你不生拷贝的话

24:05.840 --> 24:06.840
这边是会出问题的

24:06.840 --> 24:07.840
你这边

24:07.840 --> 24:09.840
我先不生拷贝吗

24:09.840 --> 24:10.840
不生拷贝

24:10.840 --> 24:11.840
这边大家看一下

24:11.840 --> 24:12.840
这边是有问题的

24:13.840 --> 24:14.840
好

24:14.840 --> 24:15.840
这边这个插件写好了

24:15.840 --> 24:16.840
写好了之后

24:16.840 --> 24:17.840
然后加我们这边

24:17.840 --> 24:18.840
pn

24:18.840 --> 24:19.840
这个parking for

24:19.840 --> 24:22.840
我们这边把它引入一下

24:22.840 --> 24:23.840
引入了之后

24:23.840 --> 24:25.840
然后加这边使用一下

24:25.840 --> 24:27.840
把格式化一下

24:27.840 --> 24:28.840
好

24:28.840 --> 24:30.840
然后完事之后

24:30.840 --> 24:33.840
然后回到你的to do list

24:33.840 --> 24:34.840
回到这边

24:34.840 --> 24:35.840
这边的话

24:35.840 --> 24:36.840
我们这里就直接可以什么了

24:36.840 --> 24:39.840
直接就可以调用这个store

24:39.840 --> 24:41.840
我们这边就直接可以调store

24:41.840 --> 24:42.840
reset

24:42.840 --> 24:43.840
应该就直接

24:43.840 --> 24:44.840
这边就确实

24:44.840 --> 24:45.840
应该不需要这个了

24:45.840 --> 24:48.220
不需要这个

24:48.220 --> 24:49.220
我们这边保存一下

24:49.220 --> 24:51.220
保存了之后

24:51.220 --> 24:52.220
然后加我这边

24:52.220 --> 24:53.220
我们来看一下

24:53.220 --> 24:54.220
我刷新一下

24:54.220 --> 24:55.220
我们这边

24:55.220 --> 24:57.220
把这个增加一点

24:57.220 --> 24:59.220
这边增加一点

24:59.220 --> 25:00.220
好

25:00.220 --> 25:02.220
大家这边还原

25:02.220 --> 25:04.220
看上去好像生效了

25:04.220 --> 25:05.220
对不对

25:05.220 --> 25:06.220
看上去好像生效了

25:06.220 --> 25:08.220
但是你再看

25:08.220 --> 25:09.220
这边的话

25:09.220 --> 25:10.220
这边稍微改了一点

25:10.220 --> 25:11.220
对不对

25:11.220 --> 25:12.220
大家这边

25:12.220 --> 25:14.220
听见

25:14.220 --> 25:15.220
好

25:15.220 --> 25:16.220
走

25:16.220 --> 25:17.220
你会发现只有什么呢

25:17.220 --> 25:19.220
只有这个counter还原了

25:19.220 --> 25:22.220
但是这边没有还原

25:22.220 --> 25:23.220
为什么

25:23.220 --> 25:25.220
为什么这边没有还原

25:25.220 --> 25:26.220
问题的话

25:26.220 --> 25:29.220
实际上就是出在这里

25:29.220 --> 25:30.220
同学们

25:30.220 --> 25:32.220
问题就是出在这里

25:32.220 --> 25:33.220
你这边在patch的时候

25:33.220 --> 25:35.220
你这边patch的是state

25:35.220 --> 25:36.220
state它后面的话

25:36.220 --> 25:39.220
是不是它是同一个对象

25:39.220 --> 25:40.220
始终是同一个对象

25:40.220 --> 25:41.220
对不对

25:41.220 --> 25:42.220
它这边的话

25:42.220 --> 25:43.220
你就需要再什么呢

25:43.220 --> 25:45.220
再生考备

25:45.220 --> 25:47.220
通过这个Deep Chrome

25:47.220 --> 25:49.220
再生考备一份

25:49.220 --> 25:50.220
注意哦

25:50.220 --> 25:52.220
这边也要生考备

25:52.220 --> 25:53.220
这样子可以解决

25:53.220 --> 25:55.220
刚才的那个问题

25:55.220 --> 25:57.220
我们这边刷新一下

25:57.220 --> 25:59.220
首先这边增加

25:59.220 --> 26:00.220
增加

26:00.220 --> 26:01.220
OK

26:01.220 --> 26:02.220
还原

26:02.220 --> 26:03.220
OK还原了对吧

26:03.220 --> 26:04.220
增加

26:04.220 --> 26:06.220
这边增加

26:06.220 --> 26:08.220
增加

26:08.220 --> 26:09.220
还原

26:09.220 --> 26:10.220
没问题

26:10.220 --> 26:11.220
对不对

26:11.220 --> 26:12.220
这边就回

26:12.220 --> 26:13.220
这边就没问题了

26:13.220 --> 26:15.220
你看这边就是有关这个插件

26:15.220 --> 26:17.220
一个具体的一种

26:17.220 --> 26:18.220
就是使用

26:18.220 --> 26:20.220
一个具体的应用场景

26:20.220 --> 26:22.220
这个实际上就是它官方这边

26:22.220 --> 26:23.220
所写的

26:23.220 --> 26:26.220
是with store增加新的方法

26:26.220 --> 26:27.220
对不对

26:27.220 --> 26:29.220
增加新的方法

26:29.220 --> 26:31.220
这是关于这个

26:31.220 --> 26:33.220
自定义插件

26:33.220 --> 26:34.220
很多时候的话

26:34.220 --> 26:36.220
我们这边实际上就是

26:36.220 --> 26:37.220
我们会用一些

26:37.220 --> 26:39.220
第三方的插件

26:39.220 --> 26:40.220
就我们这边

26:40.220 --> 26:41.220
不会自己去写插件

26:41.220 --> 26:42.220
我们现在用一些

26:42.220 --> 26:43.220
第三方插件

26:43.220 --> 26:44.220
好

26:44.220 --> 26:45.220
比如说我这边举个例子

26:45.220 --> 26:46.220
我们以什么为例呢

26:46.220 --> 26:48.220
以这个为例

26:48.220 --> 26:49.220
比如说我现在的话

26:49.220 --> 26:50.220
我添加了一些

26:50.220 --> 26:52.220
比如复习view

26:52.220 --> 26:53.220
添加

26:53.220 --> 26:56.220
大家这边学习react

26:56.220 --> 26:57.220
添加

26:57.220 --> 26:58.220
好

26:58.220 --> 26:59.220
现在的话我这边

26:59.220 --> 27:00.220
这边也可以增加一下

27:00.220 --> 27:01.220
我现在的话

27:01.220 --> 27:02.220
我一刷新

27:02.220 --> 27:03.220
一刷新之后

27:03.220 --> 27:04.220
它这边是不是就还原了

27:04.220 --> 27:05.220
对不对

27:05.220 --> 27:06.220
让我这边的话

27:06.220 --> 27:10.220
我想做一个数据的这个持久化

27:10.220 --> 27:12.220
那我想做一个数据的持久化的话

27:12.220 --> 27:14.220
很多同学第一反应就是什么呢

27:14.220 --> 27:15.220
第一反应就是

27:15.220 --> 27:16.220
把你这个新的这个

27:16.220 --> 27:17.220
仓库数据

27:17.220 --> 27:18.220
写入到什么呢

27:18.220 --> 27:22.220
写入到那个local storage里面

27:22.220 --> 27:23.220
对不对

27:23.220 --> 27:24.220
写入到local storage里面

27:24.220 --> 27:25.220
这个方法行不行呢

27:25.220 --> 27:27.220
当然是可以的

27:27.220 --> 27:28.220
当然是可以的

27:28.220 --> 27:29.220
你这边完全就是干嘛呢

27:29.220 --> 27:30.220
完全就是可以自己

27:30.220 --> 27:32.220
再来扩展一个插件

27:32.220 --> 27:34.220
来做这个事情

27:34.220 --> 27:35.220
但你这边的话

27:35.220 --> 27:36.220
你自己写的话

27:36.220 --> 27:37.220
麻烦了

27:37.220 --> 27:38.220
对不对

27:38.220 --> 27:41.220
这边会有一些现成的这个插件

27:41.220 --> 27:43.220
你这边搜一下npm

27:43.220 --> 27:47.220
npm他这边的话

27:47.220 --> 27:49.220
有一个插件叫做pina

27:49.220 --> 27:51.220
pina

27:51.220 --> 27:55.240
然后prugin

27:55.240 --> 27:57.240
prugin

27:57.240 --> 27:58.240
然后叫做什么呢

27:58.240 --> 27:59.240
叫做这个

27:59.240 --> 28:01.240
就这个

28:01.240 --> 28:03.240
就这个

28:03.240 --> 28:04.240
ok

28:04.240 --> 28:07.240
就这个

28:07.240 --> 28:08.240
你看他这边

28:08.240 --> 28:10.240
他是一个pina的插件

28:10.240 --> 28:11.240
pina插件

28:11.240 --> 28:12.240
那这边的话

28:12.240 --> 28:13.240
有具体的用法

28:13.240 --> 28:14.240
用法也很简单

28:14.240 --> 28:16.240
基本就是你这边把引入

28:16.240 --> 28:17.240
引入了之后

28:17.240 --> 28:18.240
然后接下来你这边

28:18.240 --> 28:19.240
通过use

28:19.240 --> 28:21.240
就和你这边是一样的

28:21.240 --> 28:23.240
和你这边

28:23.240 --> 28:24.240
和你这边是一样的

28:24.240 --> 28:25.240
对不对

28:25.240 --> 28:26.240
你看这边

28:26.240 --> 28:27.240
是第三方的

28:27.240 --> 28:28.240
我们这边

28:28.240 --> 28:30.240
首先你要安装一下

28:30.240 --> 28:36.470
我们这边把它安装一下

28:36.470 --> 28:38.470
我们这边把它安装一下

28:38.470 --> 28:40.470
走

28:40.470 --> 28:41.470
是不是装好了

28:41.470 --> 28:42.470
对吧

28:42.470 --> 28:43.470
关了

28:43.470 --> 28:44.470
关了之后

28:44.470 --> 28:45.470
然后接下来的话

28:45.470 --> 28:46.470
这边在这个

28:46.470 --> 28:47.470
闷点解释里面

28:47.470 --> 28:49.470
你这边是不是叫引入

28:49.470 --> 28:50.470
对不对

28:50.470 --> 28:53.040
引入

28:53.040 --> 28:54.040
引入

28:54.040 --> 28:56.040
第三方插件

28:56.040 --> 28:57.040
好

28:57.040 --> 28:58.040
那接下来的话

28:58.040 --> 28:59.040
这边你就直接通过这个

28:59.040 --> 29:00.040
import

29:00.040 --> 29:02.040
把引入就可以了

29:02.040 --> 29:05.040
我们这边就import

29:05.040 --> 29:06.040
import

29:06.040 --> 29:08.040
这边就叫做

29:08.040 --> 29:09.040
Progging

29:09.040 --> 29:10.040
然后拼了

29:10.040 --> 29:12.040
叫做拼了

29:12.040 --> 29:13.040
拼了

29:13.040 --> 29:14.040
然后Progging

29:14.040 --> 29:16.040
就把它那个

29:16.040 --> 29:19.040
就把这个拿过来就可以了

29:19.040 --> 29:21.040
直接这边

29:21.040 --> 29:22.040
对吧

29:22.040 --> 29:23.040
把引入

29:23.040 --> 29:24.040
引入了之后

29:24.040 --> 29:25.040
然后接下来这边

29:25.040 --> 29:27.600
这边让它是不是使用

29:27.600 --> 29:28.600
对不对

29:28.600 --> 29:29.600
但你现在的话

29:29.600 --> 29:30.600
还不生效的

29:30.600 --> 29:31.600
你现在是不生效的

29:31.600 --> 29:32.600
OK

29:32.600 --> 29:33.600
我们来看一下

29:33.600 --> 29:34.600
你现在的话

29:34.600 --> 29:35.600
这边走

29:35.600 --> 29:36.600
随便添加一点

29:37.600 --> 29:38.600
刚才点了两次

29:38.600 --> 29:39.600
好

29:39.600 --> 29:40.600
你现在说心

29:40.600 --> 29:41.600
这不生效

29:41.600 --> 29:42.600
对不对

29:42.600 --> 29:43.600
那接下来的话

29:43.600 --> 29:44.600
你这边的话

29:44.600 --> 29:45.600
还需要配置一个东西

29:45.600 --> 29:46.600
OK

29:46.600 --> 29:47.600
这哪儿配置呢

29:47.600 --> 29:49.600
你看看它的这个文档

29:49.600 --> 29:50.600
这边

29:50.600 --> 29:51.600
这边有个

29:51.600 --> 29:52.600
documentation

29:52.600 --> 29:54.600
看看它的文档

29:54.600 --> 29:56.600
文档里面有写

29:56.600 --> 29:58.600
这边首先是安装

29:58.600 --> 29:59.600
安装了之后

29:59.600 --> 30:01.600
然后接下来在这边

30:01.600 --> 30:03.600
这边它会有第三个参数

30:03.600 --> 30:04.600
注意

30:04.600 --> 30:05.600
这边会有第三个参数

30:05.600 --> 30:07.600
如果你是这个

30:07.600 --> 30:08.600
option

30:08.600 --> 30:09.600
如果是这种选项式的

30:09.600 --> 30:10.600
选项式的话

30:10.600 --> 30:11.600
你就直接在这儿添加

30:11.600 --> 30:13.600
这边叫做Persist

30:13.600 --> 30:14.600
V2

30:14.600 --> 30:15.600
OK

30:15.600 --> 30:17.600
如果你是这个setup

30:17.600 --> 30:18.600
如果是那个

30:18.600 --> 30:19.600
就是组合式API

30:19.600 --> 30:20.600
那接下来的话

30:20.600 --> 30:21.600
它这边接收什么呢

30:21.600 --> 30:23.600
接收这个第三个参数

30:23.600 --> 30:25.600
第三个参数是一个对象

30:25.600 --> 30:26.600
对象里面

30:26.600 --> 30:27.600
大家这边你可以设置

30:27.600 --> 30:28.600
这个Persist

30:28.600 --> 30:29.600
它V2

30:29.600 --> 30:32.600
你这边直接把拿过来就可以了

30:32.600 --> 30:33.600
拿过来之后

30:33.600 --> 30:35.600
大家到我们的这个仓库

30:35.600 --> 30:36.600
仓库的话

30:36.600 --> 30:37.600
这边

30:37.600 --> 30:39.600
我们整体是在这里

30:39.600 --> 30:40.600
对不对

30:40.600 --> 30:41.600
这里的话

30:41.600 --> 30:42.600
这个是第一个参数

30:42.600 --> 30:43.600
这个是什么

30:43.600 --> 30:44.600
这个是第二个参数

30:44.600 --> 30:45.600
然后接下来我们这边

30:45.600 --> 30:47.600
再来添加第三个参数

30:47.600 --> 30:48.600
对不对

30:48.600 --> 30:50.600
添加第三个参数

30:50.600 --> 30:51.600
Persist

30:51.600 --> 30:52.600
Q

30:52.600 --> 30:53.600
添加了之后

30:53.600 --> 30:54.600
让它在这边保存

30:54.600 --> 30:55.600
保存了之后

30:55.600 --> 30:57.600
让它在我们这边来看一下

30:57.600 --> 30:59.600
好保死了

30:59.600 --> 31:01.600
我们这边添加

31:01.600 --> 31:02.600
好这边的话

31:02.600 --> 31:04.600
就复习

31:04.600 --> 31:06.600
复习

31:06.600 --> 31:07.600
添加

31:07.600 --> 31:10.600
好让它加我们这边刷新一下

31:10.600 --> 31:11.600
等一下

31:11.600 --> 31:14.600
应该是生效了的

31:14.600 --> 31:16.600
应该是生效了的

31:16.600 --> 31:17.600
我们看一下

31:17.600 --> 31:20.600
这边是怎么回事

31:20.600 --> 31:21.600
刷新

31:21.600 --> 31:22.600
是不是OK了

31:22.600 --> 31:23.600
对不对

31:23.600 --> 31:24.600
OK了

31:24.600 --> 31:25.600
你看

31:25.600 --> 31:26.600
现在刷新了

31:26.600 --> 31:27.600
它这边这个

31:27.600 --> 31:28.600
是不是就保存下来了

31:28.600 --> 31:29.600
你在这边实际上

31:29.600 --> 31:30.600
可以看到的

31:30.600 --> 31:32.600
用的是那个local storage

31:32.600 --> 31:33.600
在这里

31:33.600 --> 31:34.600
看不看

31:34.600 --> 31:35.600
这边list

31:35.600 --> 31:36.600
保存下来了

31:36.600 --> 31:38.600
OK

31:38.600 --> 31:39.600
这个content

31:39.600 --> 31:41.600
应该是之前测试的

31:41.600 --> 31:42.600
OK

31:42.600 --> 31:44.600
这边它就保存下来了

31:44.600 --> 31:46.600
不用这边

31:46.600 --> 31:48.600
你看这边是不是就有了

31:48.600 --> 31:51.600
这边的话添加一个

31:51.600 --> 31:53.600
这边刷新

31:53.600 --> 31:54.600
对不对

31:54.600 --> 31:55.600
你如果是这里

31:55.600 --> 31:56.600
这里的话

31:56.600 --> 31:57.600
现在你这个没有添加

31:57.600 --> 31:58.600
没有添加它

31:58.600 --> 31:59.600
这边一刷新

31:59.600 --> 32:02.600
那你这边那就是在

32:02.600 --> 32:04.600
这里

32:04.600 --> 32:06.600
这里的话你就可以添加一个

32:06.600 --> 32:07.600
这边action

32:07.600 --> 32:08.600
action后面

32:08.600 --> 32:10.600
你可以添加一个

32:10.600 --> 32:13.600
Persist

32:13.600 --> 32:15.600
对应的是

32:15.600 --> 32:16.600
对不对

32:16.600 --> 32:18.600
通过这种方式

32:18.600 --> 32:19.600
保存

32:19.600 --> 32:22.600
保存了之后刷新一下

32:22.600 --> 32:23.600
这边

32:23.600 --> 32:24.600
刷新

32:24.600 --> 32:25.600
是不是OK了

32:25.600 --> 32:26.600
对不对

32:26.600 --> 32:27.600
这边也就有了

32:27.600 --> 32:28.600
OK

32:28.600 --> 32:29.600
这个就是如何使用

32:29.600 --> 32:32.600
这个第三方的这个插件

32:32.600 --> 32:35.600
回头来到我们这个笔记这边

32:35.600 --> 32:36.600
来我们来记一下吧

32:36.600 --> 32:37.600
来回顾一下

32:37.600 --> 32:38.600
当时复习

32:38.600 --> 32:39.600
这就可以所讲的东西

32:39.600 --> 32:41.600
首先自定义插件

32:41.600 --> 32:42.600
自定义插件的话

32:42.600 --> 32:46.170
首先

32:46.170 --> 32:51.180
首先

32:51.180 --> 32:53.180
首先建议什么呢

32:53.180 --> 32:55.180
建议这个插件

32:55.180 --> 32:58.180
单独拿一个目录

32:58.180 --> 33:00.180
拿一个目录

33:00.180 --> 33:02.180
来存放

33:02.180 --> 33:03.180
对不对

33:03.180 --> 33:05.180
一个插件

33:05.180 --> 33:06.180
就是一个什么

33:06.180 --> 33:08.180
是不是就是一个喊说

33:08.180 --> 33:10.180
或者说就是一个方法

33:10.180 --> 33:11.180
对不对

33:11.180 --> 33:12.180
这边

33:12.180 --> 33:13.180
把对应的代码

33:13.180 --> 33:17.070
把他过来

33:17.070 --> 33:18.070
对应的

33:18.070 --> 33:20.070
我们就把这个拿过来吧

33:20.070 --> 33:21.070
这一份

33:21.070 --> 33:24.510
到这里

33:24.510 --> 33:25.510
OK

33:25.510 --> 33:26.510
你这边一个插件对应的

33:26.510 --> 33:27.510
就是一个方法

33:27.510 --> 33:28.510
那我们这边就有几个插件

33:28.510 --> 33:30.510
是不是就有四个插件

33:30.510 --> 33:31.510
对不对

33:31.510 --> 33:32.510
然后接下来

33:32.510 --> 33:34.510
每一个插件

33:34.510 --> 33:36.510
每个插件

33:36.510 --> 33:38.510
对应

33:38.510 --> 33:39.510
这边应该我想想

33:39.510 --> 33:41.510
这边该怎么描述

33:41.510 --> 33:42.510
就你这边插件的话

33:42.510 --> 33:44.510
他是拿来扩展内容的

33:44.510 --> 33:45.510
对不对

33:45.510 --> 33:46.510
所以每个插件

33:46.510 --> 33:48.510
在

33:48.510 --> 33:51.510
扩展内容时

33:51.510 --> 33:53.510
会对这个

33:53.510 --> 33:55.510
所有的仓库

33:55.510 --> 33:57.510
会对所有的仓库

33:57.510 --> 34:01.510
进行内容的扩展

34:01.510 --> 34:02.510
如果

34:02.510 --> 34:03.510
想要

34:03.510 --> 34:04.510
针对

34:04.510 --> 34:06.510
某一个仓库

34:06.510 --> 34:10.510
进行内容扩展

34:10.510 --> 34:11.510
可以

34:11.510 --> 34:12.510
通过什么呢

34:12.510 --> 34:14.510
可以通过这个store.

34:14.510 --> 34:15.510
这边我写全嘛

34:15.510 --> 34:16.510
这边

34:16.510 --> 34:18.510
应该是通过context的

34:18.510 --> 34:19.510
所以我可以拿到这个store

34:19.510 --> 34:20.510
拿到store之后

34:20.510 --> 34:22.510
通过这个downer id

34:22.510 --> 34:23.510
对不对

34:23.510 --> 34:24.510
可以通过这个

34:24.510 --> 34:27.510
context.store.downer id

34:27.510 --> 34:30.510
来指定

34:30.510 --> 34:31.510
某一个仓库

34:31.510 --> 34:34.510
某一个仓库

34:34.510 --> 34:37.510
来扩展内容

34:37.510 --> 34:40.080
对不对

34:40.080 --> 34:41.080
OK

34:41.080 --> 34:43.080
这是关于这个

34:43.080 --> 34:44.080
定义插件

34:44.080 --> 34:46.080
然后这个插件

34:46.080 --> 34:48.080
插件

34:48.080 --> 34:51.080
书写完毕后

34:51.080 --> 34:53.080
需要

34:53.080 --> 34:54.080
需要在什么呢

34:54.080 --> 34:55.080
需要在这个地方

34:55.080 --> 34:56.080
需要在这个

34:56.080 --> 34:57.080
闷点解释这边

34:57.080 --> 34:58.080
就是通过

34:58.080 --> 34:59.080
需要通过这个

34:59.080 --> 35:00.080
拼一下实力

35:00.080 --> 35:02.080
进行这个插件的注册

35:02.080 --> 35:07.080
需要通过拼一下实力

35:07.080 --> 35:15.030
对插件进行一个注册操作

35:15.030 --> 35:16.030
对不对

35:16.030 --> 35:17.030
对应了这个代码

35:17.030 --> 35:20.340
对应了代码这里

35:20.340 --> 35:23.360
那前提的话

35:23.360 --> 35:24.360
你要先引入

35:24.360 --> 35:25.360
这个引入就不用说了

35:25.360 --> 35:26.360
你首先你这边

35:26.360 --> 35:28.360
肯定要把你这个

35:28.360 --> 35:29.360
自定义插件

35:29.360 --> 35:30.360
你要把它引入

35:30.360 --> 35:32.360
它就是一个一个的这个函数

35:32.360 --> 35:33.360
对不对

35:33.360 --> 35:35.360
这是关于这个自定义

35:35.360 --> 35:36.360
关于这个添加

35:36.360 --> 35:37.360
添加这个

35:37.360 --> 35:38.360
第三方插件

35:38.360 --> 35:40.360
这个也非常简单

35:40.360 --> 35:43.360
就是有一些

35:43.360 --> 35:46.920
有一些第三方插件

35:46.920 --> 35:49.920
第三方插件

35:49.920 --> 35:51.920
直接通过

35:51.920 --> 35:52.920
什么呢

35:52.920 --> 35:53.920
直接通过npm

35:53.920 --> 35:57.920
安装使用即可

35:57.920 --> 35:58.920
对不对

35:58.920 --> 35:59.920
然后具体

35:59.920 --> 36:03.920
具体的使用方法

36:03.920 --> 36:04.920
一定要什么呢

36:04.920 --> 36:06.920
一定要参与文档

36:07.920 --> 36:08.920
一定要参与文档

36:08.920 --> 36:09.920
人家文档

36:09.920 --> 36:10.920
看人家文档是怎么写的

36:10.920 --> 36:11.920
经常有的同学就是

36:11.920 --> 36:13.920
直接拿这个插件

36:13.920 --> 36:15.920
然后用的话

36:15.920 --> 36:16.920
比如说一个插件

36:16.920 --> 36:17.920
或者一个第三方库

36:17.920 --> 36:18.920
用的话

36:18.920 --> 36:19.920
然后说错了

36:19.920 --> 36:20.920
直接跑来问我

36:20.920 --> 36:21.920
这怎么回事

36:21.920 --> 36:22.920
这怎么回事

36:22.920 --> 36:23.920
你帮我看一下这怎么回事

36:23.920 --> 36:24.920
你这个第三方库

36:24.920 --> 36:25.920
我没用过

36:25.920 --> 36:26.920
我也不知道怎么回事

36:26.920 --> 36:27.920
对不对

36:27.920 --> 36:28.920
所以说你一定要

36:28.920 --> 36:30.920
你要去参与这个文档

36:30.920 --> 36:31.920
知道吧

36:31.920 --> 36:32.920
你既然在用人家的东西

36:32.920 --> 36:33.920
那你就是

36:33.920 --> 36:34.920
一定要去看别人

36:34.920 --> 36:35.920
所提供的文档

36:35.920 --> 36:36.920
是怎么写的

36:36.920 --> 36:37.920
比如说

36:37.920 --> 36:39.920
比如说我们这个客堂上

36:39.920 --> 36:41.920
用到了这个插件

36:41.920 --> 36:42.920
用了这个插件

36:42.920 --> 36:43.920
对不对

36:43.920 --> 36:45.920
你这边你就一定要去看他的文档

36:45.920 --> 36:46.920
这个文档也没多少

36:46.920 --> 36:48.920
一定要习惯去看这个英语

36:48.920 --> 36:50.920
有的人一看到这个英语

36:50.920 --> 36:51.920
就头皮发麻

36:51.920 --> 36:52.920
一定要去习惯

36:52.920 --> 36:53.920
我看这个能不能切换

36:53.920 --> 36:54.920
这个还能切换

36:54.920 --> 36:55.920
还好

36:55.920 --> 36:56.920
这个能够切换

36:56.920 --> 36:57.920
对不对

36:57.920 --> 36:58.920
可以切换成中文

36:58.920 --> 36:59.920
OK

37:00.920 --> 37:02.920
一定要去看他的文档

37:02.920 --> 37:06.490
这个第三方插件

37:06.490 --> 37:07.490
就没什么好说的了

37:09.490 --> 37:10.490
然后接下来这里

37:10.490 --> 37:11.490
这里的话

37:11.490 --> 37:13.490
是否给评价添加过插件

37:13.490 --> 37:15.490
具体的添加方式是什么

37:15.490 --> 37:17.490
这边我就直接把这个答案

37:17.490 --> 37:18.490
拿过来

37:20.490 --> 37:21.490
把这个拿过来

37:22.490 --> 37:23.490
在评价中

37:23.490 --> 37:25.490
可以非常方便的添加插件

37:25.490 --> 37:27.490
一个插件就是一个函数

37:27.490 --> 37:28.490
函数的话

37:28.490 --> 37:29.490
接受一个什么

37:29.490 --> 37:30.490
接受一个context

37:30.490 --> 37:31.490
上下文对象

37:31.490 --> 37:32.490
对吧

37:32.490 --> 37:33.490
它可以拿到就是

37:33.490 --> 37:34.490
像什么store

37:34.490 --> 37:35.490
App

37:35.490 --> 37:36.490
OK

37:36.490 --> 37:38.490
如果你想要针对某一个

37:38.490 --> 37:40.490
这个倉库进行内容扩展

37:40.490 --> 37:42.490
因为他默认是对针对所有倉库

37:42.490 --> 37:43.490
对不对

37:43.490 --> 37:45.490
针对所有倉库进行内容扩展

37:45.490 --> 37:47.490
如果你想针对某一个

37:47.490 --> 37:48.490
倉库进行扩展

37:48.490 --> 37:49.490
你可以通过什么

37:49.490 --> 37:52.490
可以通过这个context.store.downloaded

37:52.490 --> 37:54.490
什么来进行一个指定

37:54.490 --> 37:55.490
对吧

37:55.490 --> 37:57.490
插件这个书写完毕之后

37:57.490 --> 37:59.490
你需要通过这个拼压实力

37:59.490 --> 38:01.490
对这个插件进行一个注册操作

38:01.490 --> 38:03.490
就像这边一样

38:03.490 --> 38:04.490
OK

38:04.490 --> 38:05.490
另外的话

38:05.490 --> 38:07.490
也可以使用一些第三方的这个插件

38:07.490 --> 38:09.490
你直接通过这个npm

38:09.490 --> 38:10.490
或者其他的工具

38:10.490 --> 38:11.490
什么压纹

38:11.490 --> 38:12.490
pnpm

38:12.490 --> 38:13.490
这些都可以

38:13.490 --> 38:15.490
反正你这边直接安装就可以了

38:15.490 --> 38:16.490
安装完了之后

38:16.490 --> 38:18.490
使用方法和这个自定义插件

38:18.490 --> 38:19.490
实际上是一样的

38:19.490 --> 38:20.490
对不对

38:20.490 --> 38:21.490
你看我们这边

38:21.490 --> 38:22.490
这边引入

38:22.490 --> 38:23.490
引入了之后

38:23.490 --> 38:24.490
大家这边

38:24.490 --> 38:25.490
这是一样的

38:25.490 --> 38:26.490
OK

38:26.490 --> 38:27.490
好

38:27.490 --> 38:28.490
大家这边

38:28.490 --> 38:29.490
具体的这个方法

38:29.490 --> 38:30.490
一定要参与这个文档

38:30.490 --> 38:31.490
好吧

38:31.490 --> 38:32.490
你要参与文档

38:32.490 --> 38:33.490
OK

38:33.490 --> 38:35.490
这是关于这个插件这一块

38:35.490 --> 38:36.490
这个动画

38:36.490 --> 38:37.490
大家可以下去再看一下

38:37.490 --> 38:39.490
自己把这些颗的代码

38:39.490 --> 38:40.490
自己敲一下

38:40.490 --> 38:41.490
试一下

38:41.490 --> 38:42.490
好吧

38:42.490 --> 38:43.490
OK

38:43.490 --> 38:44.490
这些颗就先到这里

38:44.490 --> 38:45.490
再见

