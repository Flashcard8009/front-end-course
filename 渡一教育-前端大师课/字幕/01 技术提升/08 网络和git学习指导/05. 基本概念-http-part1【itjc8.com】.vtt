WEBVTT

00:00.000 --> 00:03.840
好 那么接下来就是ATB协议了

00:03.840 --> 00:11.040
学这一部分东西的时候 同学们可能你听完之后还是有很多东西比较模糊

00:11.040 --> 00:12.960
想得不是很清楚

00:12.960 --> 00:18.600
实际上是这样子 整个网络课程的学习 你只有把网络课全部学完之后

00:18.600 --> 00:21.240
你才知道它到底是怎么回事了

00:21.240 --> 00:26.360
那么对于每一节课的学习 只有一个要求 你能完成作业

00:26.360 --> 00:29.200
你只要能完成作业 那就没问题

00:29.400 --> 00:31.960
因为我们这个作业都是精心设置的

00:31.960 --> 00:35.320
你能完成作业就表示你后边下一节课就能听懂

00:35.320 --> 00:37.720
下一节课作业能完成 下一节课就能听懂

00:37.720 --> 00:39.480
所以要报成这样的心态

00:39.480 --> 00:41.440
因为这一块的东西就像拼图一样

00:41.440 --> 00:47.320
你图没有拼完的时候 你总觉得看得不是很明确啊这东西

00:47.320 --> 00:51.320
现在是这样 我们现在学习了UIL地址

00:51.320 --> 00:55.440
那么就意味着 我能够找到服务器了

00:55.440 --> 00:58.040
能够找到服务器上的某一个服务

00:58.040 --> 01:00.440
比方说我要获取一个新闻列表

01:00.440 --> 01:03.120
比方说我要获取一个省市区

01:03.120 --> 01:05.720
这有点像闻到银行里边去办事

01:05.720 --> 01:08.400
我们找到了银行计算机

01:08.400 --> 01:13.040
找到了那个银行的第几号窗口那个端口号

01:13.040 --> 01:15.760
然后呢找到了那个就是那个工作人员

01:15.760 --> 01:18.160
我要给他说我要办一个什么服务呢

01:18.160 --> 01:19.240
他有很多服务啊

01:19.240 --> 01:21.440
有取钱存钱还要办卡

01:21.440 --> 01:23.800
比方说我要来个办卡吧

01:23.800 --> 01:25.560
那么这个服务已经找到了

01:25.600 --> 01:28.080
这通过UIL地址完成的

01:28.080 --> 01:31.480
那接下来呢 这个工作人员他就会问你

01:31.480 --> 01:33.680
呃来填章表吧

01:33.680 --> 01:35.960
对吧你要填一些信息进去

01:35.960 --> 01:40.640
那么填章表这个行为就是ATTP

01:40.640 --> 01:42.840
这ATTP到底是什么东西呢

01:42.840 --> 01:46.080
他就说我们千辛万苦的找到了这个服务器

01:46.080 --> 01:47.480
你要跟他对话

01:47.480 --> 01:49.000
对吧有一些细节的东西

01:49.000 --> 01:50.840
我们还要商量还要对话

01:50.840 --> 01:51.680
那么这个对话呢

01:51.680 --> 01:54.720
大家就必须要使用一种同样的语言

01:54.760 --> 01:56.640
就好像现实生活中人一样

01:56.640 --> 01:59.040
你千辛万苦的去给别人见了面

01:59.040 --> 02:01.200
结果对方是一个外国人

02:01.200 --> 02:05.640
你说你好 你好 别人听不懂

02:05.640 --> 02:06.880
那你要说Hello

02:06.880 --> 02:10.560
对吧说双方要约定好一种同样的语言来交流

02:10.560 --> 02:12.800
那么这个就是协议要做的事

02:12.800 --> 02:15.680
协议呢其实就是标准

02:15.680 --> 02:17.200
大家该怎么说话

02:17.200 --> 02:19.120
说话的格式是什么

02:19.120 --> 02:21.800
这些就是协议要规定的内容

02:22.800 --> 02:26.400
好 那么这个我们学习的是ATP协议

02:26.400 --> 02:29.800
那如果我们之前还接触过一个东西叫ATPS

02:29.800 --> 02:32.000
那这个玩意是不是有很大的差别呢

02:32.000 --> 02:35.400
并不是 几乎是完全一样的

02:35.400 --> 02:37.400
特别是对于我们写代码而言

02:37.400 --> 02:39.800
几乎是没有区别的

02:39.800 --> 02:42.400
所以说我们只需要学ATP就行的

02:42.400 --> 02:44.000
ATPS这个东西呢

02:44.000 --> 02:46.000
对我们没有什么影响

02:46.000 --> 02:48.400
对这个运维是有影响的

02:48.400 --> 02:51.400
那么这个玩意可能面试体会问到

02:51.400 --> 02:53.400
我们在第三个阶段去完成它

02:53.400 --> 02:54.400
去学习它

02:54.400 --> 02:56.400
好吧 一节课就可以搞定了

02:56.400 --> 02:58.400
好 那么现在我们学习ATP

02:58.400 --> 03:01.400
那么ATP协议里面有哪些规定呢

03:01.400 --> 03:02.400
就双方子怎么来对话呢

03:02.400 --> 03:04.400
它有两个层面的规定

03:04.400 --> 03:06.400
第一个层面它规定

03:06.400 --> 03:10.400
每一次请求和响应都是独立的

03:10.400 --> 03:12.400
互不干扰的

03:12.400 --> 03:14.400
那么这个该怎么理解呢

03:14.400 --> 03:17.400
就可以理解为我们到银行里面去办事

03:18.400 --> 03:20.400
办了张卡了对吧

03:20.400 --> 03:21.400
那么处理完了

03:21.400 --> 03:23.400
那么一次请求响应就结束了

03:23.400 --> 03:25.400
你给了它一个单子

03:25.400 --> 03:28.400
然后它给了一张卡 结束了

03:28.400 --> 03:30.400
你本来出去了

03:30.400 --> 03:31.400
走到门口你突然发现

03:31.400 --> 03:33.400
我要不要再存个钱啊

03:33.400 --> 03:34.400
存点钱吧

03:34.400 --> 03:36.400
那么这个时候你应该怎么样

03:36.400 --> 03:38.400
重新取号

03:38.400 --> 03:40.400
重新到那个柜台

03:40.400 --> 03:42.400
重新那个走一遍完整流程

03:42.400 --> 03:44.400
就是存钱的流程

03:45.400 --> 03:47.400
它还会让你输入卡的密码

03:47.400 --> 03:49.400
你说你给工作人员说

03:49.400 --> 03:50.400
不用输入了吧

03:50.400 --> 03:52.400
我刚才来办的卡呀

03:52.400 --> 03:54.400
它会理你吗

03:54.400 --> 03:55.400
它不会理你

03:55.400 --> 03:57.400
它说我不认识你啊

03:57.400 --> 03:58.400
你这个流程必须

03:58.400 --> 03:59.400
流程是必须要走的

03:59.400 --> 04:01.400
所以你还得重新来一次

04:01.400 --> 04:02.400
我不认识你

04:02.400 --> 04:06.400
就每一次的处理都是独立的

04:06.400 --> 04:07.400
那么这个玩意呢

04:07.400 --> 04:09.400
我们把存之为

04:09.400 --> 04:11.400
无状态协议

04:11.400 --> 04:13.400
就不认识你了对吧

04:13.400 --> 04:15.400
我之前来办卡的时候

04:15.400 --> 04:17.400
我倒是看了

04:17.400 --> 04:18.400
我们把卡办完了

04:18.400 --> 04:19.400
你下一次带来的时候

04:19.400 --> 04:20.400
我不认识你了

04:20.400 --> 04:22.400
我不保留之前的状态

04:22.400 --> 04:24.400
那么这叫无状态协议

04:24.400 --> 04:27.400
或者叫断开始连接

04:27.400 --> 04:29.400
有很多种说法啊

04:29.400 --> 04:31.400
它说的都是一个意思

04:31.400 --> 04:38.570
断开始连接

04:39.570 --> 04:40.570
那么这个是什么意思呢

04:40.570 --> 04:42.570
就是我之前来了一次

04:42.570 --> 04:43.570
然后走了

04:43.570 --> 04:45.570
我们之间的所有联系

04:45.570 --> 04:46.570
阶段了

04:46.570 --> 04:47.570
不再有了

04:47.570 --> 04:48.570
当然这个玩意

04:48.570 --> 04:50.570
是有一些更深层似的含义

04:50.570 --> 04:51.570
我们将来再接触

04:51.570 --> 04:53.570
那么这个玩意有什么

04:53.570 --> 04:55.570
可能同学们想不到啊

04:55.570 --> 04:57.570
这样子做会有什么样的问题

04:57.570 --> 04:59.570
它会带来一些问题

04:59.570 --> 05:00.570
不过这些问题呢

05:00.570 --> 05:02.570
我们这节课不关注

05:02.570 --> 05:03.570
无所谓

05:03.570 --> 05:04.570
这节课我们不管它

05:04.570 --> 05:05.570
我们只需要

05:05.570 --> 05:06.570
知道有这么个现象就行了

05:06.570 --> 05:07.570
后边的课程呢

05:07.570 --> 05:08.570
就是我们接下来

05:08.570 --> 05:09.570
可能下节课

05:09.570 --> 05:10.570
可能下下节课

05:10.570 --> 05:11.570
我们就会发现

05:11.570 --> 05:13.570
这个地方是会带来一些问题的

05:13.570 --> 05:14.570
好

05:14.570 --> 05:16.570
这是第一个层面的规定

05:16.570 --> 05:17.570
好

05:17.570 --> 05:18.570
第二个层面的规定

05:18.570 --> 05:20.570
就是我们本节课的重点内容了

05:20.570 --> 05:21.570
就是

05:21.570 --> 05:23.570
你不是请求响应吗

05:23.570 --> 05:26.570
请求响应传递的是啥

05:26.570 --> 05:28.570
它的格式是啥

05:28.570 --> 05:29.570
那么这就是

05:29.570 --> 05:30.570
我们这几课

05:30.570 --> 05:32.570
重点聊的

05:32.570 --> 05:33.570
ATP里面东西

05:33.570 --> 05:35.570
你请求的时候

05:35.570 --> 05:37.570
传了一个东西过去

05:37.570 --> 05:38.570
这个东西是啥呢

05:38.570 --> 05:39.570
ATP协议规定

05:39.570 --> 05:40.570
是纯文本

05:40.570 --> 05:41.570
就是一个制服串

05:41.570 --> 05:42.570
你可以把它理解为

05:42.570 --> 05:43.570
就是一个技术本

05:43.570 --> 05:44.570
就是一个

05:46.570 --> 05:47.570
就是一个技术本

05:47.570 --> 05:48.570
就像这样的技术本

05:48.570 --> 05:50.570
你给它传了一些东西过去

05:50.570 --> 05:52.570
要传一些东西过去

05:52.570 --> 05:53.570
这里边到底怎么写

05:53.570 --> 05:54.570
技术本来怎么写

05:54.570 --> 05:56.570
内容它不做规定

05:56.570 --> 05:58.570
它不规定这里边

05:58.570 --> 05:59.570
你写什么内容

05:59.570 --> 06:01.570
但是它规定格式

06:01.570 --> 06:03.570
它的格式是什么

06:03.570 --> 06:04.570
哪个地方应该换行

06:04.570 --> 06:05.570
哪个地方

06:05.570 --> 06:07.570
应该是什么样的格式

06:07.570 --> 06:09.570
就像UAL地址一样

06:09.570 --> 06:11.570
它并不规定UAL地址

06:12.570 --> 06:13.570
具体该怎么写

06:13.570 --> 06:15.570
它规定了它的格式

06:15.570 --> 06:16.570
多内容是吧

06:16.570 --> 06:17.570
这就是ATP协议的

06:17.570 --> 06:19.570
重点规范里边的东西

06:19.570 --> 06:21.570
那么响应的时候

06:21.570 --> 06:23.570
它响应的也是一个技术本

06:23.570 --> 06:24.570
也是一个纯文本

06:24.570 --> 06:25.570
我说的技术本

06:25.570 --> 06:27.570
是边缘里面好理解

06:27.570 --> 06:29.570
它其实就是一个制服串

06:29.570 --> 06:30.570
那么这个响应

06:30.570 --> 06:32.570
它应该是一种什么样的格式

06:32.570 --> 06:33.570
它就规定这个

06:33.570 --> 06:34.570
我们来看一下

06:34.570 --> 06:36.570
规定到底是怎么说的

06:36.570 --> 06:38.570
首先是请求

06:38.570 --> 06:40.570
请求的格式

06:40.570 --> 06:42.570
它把它分为三个部分

06:42.570 --> 06:44.570
就你不管你是什么请求

06:44.570 --> 06:45.570
你说拿新闻也好

06:45.570 --> 06:46.570
你是

06:46.570 --> 06:48.570
你要做登录也好

06:48.570 --> 06:49.570
你要做注册也好

06:49.570 --> 06:51.570
反正你的格式都是这种格式

06:51.570 --> 06:52.570
三个部分

06:52.570 --> 06:53.570
一个是请求行

06:53.570 --> 06:54.570
第一行

06:54.570 --> 06:56.570
一个制服串

06:56.570 --> 06:58.570
我们之后再讲细的说

06:58.570 --> 06:59.570
一个是请求头

06:59.570 --> 07:00.570
就这个东西

07:00.570 --> 07:01.570
前面一个单词

07:01.570 --> 07:03.570
后面一个中间一个冒号

07:03.570 --> 07:04.570
左边一个右边一个

07:04.570 --> 07:05.570
你看

07:05.570 --> 07:06.570
这里有个冒号

07:06.570 --> 07:08.570
这边

07:08.570 --> 07:09.570
这里有个冒号

07:09.570 --> 07:10.570
左边一个右边一个

07:10.570 --> 07:11.570
这里有个冒号

07:11.570 --> 07:12.570
左边一个右边一个

07:12.570 --> 07:14.570
它就是这里有个冒号

07:14.570 --> 07:15.570
左边一个右边

07:15.570 --> 07:16.570
就一对像属性名

07:16.570 --> 07:17.570
属性值一样

07:17.570 --> 07:18.570
就是类似于这种

07:18.570 --> 07:19.570
叫请求头

07:19.570 --> 07:21.570
然后是请求体

07:21.570 --> 07:23.570
就是这三个部分

07:23.570 --> 07:25.570
那么先大开的了解一下

07:25.570 --> 07:26.570
这三个部分

07:26.570 --> 07:27.570
以后我们再详细说

07:27.570 --> 07:29.570
请求行是在做什么呢

07:29.570 --> 07:30.570
请求行就是一句话

07:30.570 --> 07:32.570
高度概括了

07:32.570 --> 07:33.570
科普都要干什么

07:33.570 --> 07:36.570
有点类似于文章的标题

07:37.570 --> 07:39.570
它是这个东西

07:39.570 --> 07:41.570
请求头呢

07:41.570 --> 07:43.570
是包含了一些额外的信息

07:43.570 --> 07:45.570
表演到银行那边

07:45.570 --> 07:47.570
去办卡的时候

07:47.570 --> 07:49.570
真正需要的信息是什么

07:49.570 --> 07:50.570
就是你的密码

07:50.570 --> 07:52.570
设置一个密码就完事了

07:52.570 --> 07:53.570
但是实际上

07:53.570 --> 07:54.570
你要填很多的额外信息

07:54.570 --> 07:55.570
跟办卡

07:55.570 --> 07:57.570
这个逻辑是没有关系的

07:57.570 --> 07:58.570
因为你只要

07:58.570 --> 07:59.570
给了密码的办卡

07:59.570 --> 08:00.570
是不是就可以完成了

08:00.570 --> 08:02.570
卡号随即生成吗

08:02.570 --> 08:03.570
那办卡就可以

08:03.570 --> 08:04.570
这个流程逻辑上

08:04.570 --> 08:05.570
就可以做了

08:05.570 --> 08:07.570
你还可以给很多额外的信息

08:07.570 --> 08:08.570
包括什么新民

08:08.570 --> 08:10.570
电话家庭住址

08:10.570 --> 08:12.570
我第一次小时候

08:12.570 --> 08:15.570
小时候我一次跟他父母去办卡

08:15.570 --> 08:17.570
我说办卡不就是个密码吗

08:17.570 --> 08:19.570
为什么要填这么多信息

08:19.570 --> 08:21.570
有啥用呢

08:21.570 --> 08:22.570
这些都是属于额外信息

08:22.570 --> 08:24.570
他一般放到请求头里边

08:24.570 --> 08:26.570
然后是请求体呢

08:26.570 --> 08:28.570
他一般放的就是

08:28.570 --> 08:30.570
必须需要的一些业务信息

08:30.570 --> 08:31.570
比方办卡

08:31.570 --> 08:33.570
你的密码就是必须需要的

08:34.570 --> 08:35.570
密码没有的话

08:35.570 --> 08:37.570
这个逻辑是整不通的

08:37.570 --> 08:39.570
所以说这里就是放到请求体里边

08:39.570 --> 08:40.570
但同学们注意

08:40.570 --> 08:42.570
一个请求体是可以省略的

08:42.570 --> 08:44.570
请求好像是不能省略的

08:44.570 --> 08:45.570
请求头是不能省略的

08:45.570 --> 08:47.570
但请求体可以省略

08:47.570 --> 08:48.570
为什么呢

08:48.570 --> 08:49.570
比方说我有时候

08:49.570 --> 08:50.570
请求是这样子请求

08:50.570 --> 08:52.570
我就拿一个新闻列表

08:52.570 --> 08:53.570
拿一个新闻列表

08:53.570 --> 08:54.570
你需要给我

08:54.570 --> 08:56.570
我告诉你什么信息

08:56.570 --> 08:57.570
对吧

08:57.570 --> 08:59.570
我通过一个UID

08:59.570 --> 09:01.570
去拿新闻列表

09:01.570 --> 09:02.570
ADP

09:02.570 --> 09:05.570
3w.we.com.news

09:05.570 --> 09:06.570
page1

09:06.570 --> 09:08.570
然后size10

09:08.570 --> 09:10.570
没想到是十条第五页吧

09:10.570 --> 09:11.570
那么这个信息

09:11.570 --> 09:13.570
是不是已经非常完整了

09:13.570 --> 09:15.570
我那个服务器觉得

09:15.570 --> 09:16.570
这个信息够了

09:16.570 --> 09:18.570
你不需要再给我交什么信息了

09:18.570 --> 09:19.570
那么这个时候

09:19.570 --> 09:20.570
你请求体里边放啥了

09:20.570 --> 09:21.570
你不需要放啥了

09:21.570 --> 09:23.570
所以请求体是可以省略的

09:23.570 --> 09:24.570
但有的时候

09:24.570 --> 09:25.570
比方说我要做登录

09:25.570 --> 09:26.570
登录的时候

09:26.570 --> 09:30.070
我请求这个例子

09:30.070 --> 09:31.070
we.com

09:31.070 --> 09:32.070
login

09:32.070 --> 09:33.070
登录的时候

09:33.070 --> 09:34.070
我要给它账号密码

09:34.070 --> 09:35.070
对吧

09:35.070 --> 09:36.070
那账号密码

09:36.070 --> 09:38.070
我们一般不会放到UID纸里边

09:38.070 --> 09:40.070
一般不会放这儿

09:40.070 --> 09:42.070
当然你一定要放这儿了

09:42.070 --> 09:43.070
也肯定是可以的

09:43.070 --> 09:45.070
但是会照来带来一些隐患

09:45.070 --> 09:46.070
我们一般不放这儿

09:46.070 --> 09:47.070
那么这个时候

09:47.070 --> 09:48.070
我要传递账号密码

09:48.070 --> 09:49.070
只能放到哪儿呢

09:49.070 --> 09:51.070
只能放到请求体里边去

09:51.070 --> 09:52.070
有些人说

09:52.070 --> 09:53.070
那我放请求头里边

09:53.070 --> 09:55.070
可不可以呢

09:55.070 --> 09:57.070
其实也可以

09:57.070 --> 09:58.070
只不过一般没有那么做

09:58.070 --> 10:00.070
一般没有那么去做

10:00.070 --> 10:01.070
好吧

10:01.070 --> 10:02.070
就那个

10:04.070 --> 10:05.070
请求

10:05.070 --> 10:06.070
这三个部分

10:06.070 --> 10:07.070
好 我们一个一个说

10:07.070 --> 10:09.070
这三个部分里边哪些

10:09.070 --> 10:10.070
我们是要重点关注的

10:10.070 --> 10:12.070
哪些我们就略过就行了

10:13.070 --> 10:14.070
第一个是请求行

10:14.070 --> 10:15.070
请求

10:15.070 --> 10:16.070
我们把这个地方举个图

10:22.110 --> 10:23.110
第一个请求行

10:23.110 --> 10:24.110
请求行

10:24.110 --> 10:26.110
就是第一句话

10:26.110 --> 10:28.110
第一句话里边包含三个部分

10:28.110 --> 10:30.110
一个是请求方法

10:31.110 --> 10:32.110
这个

10:32.110 --> 10:33.110
一个单词

10:33.110 --> 10:35.110
就是我们以后要重点关注的

10:35.110 --> 10:36.110
这个第二个部分

10:36.110 --> 10:38.110
就是你请求的那个路径

10:38.110 --> 10:39.110
包括参数

10:39.110 --> 10:40.110
包括哈希

10:40.110 --> 10:41.110
第三个部分

10:41.110 --> 10:42.110
协议和版本

10:42.110 --> 10:43.110
就这个

10:43.110 --> 10:45.110
协议和版本没什么好说的

10:45.110 --> 10:46.110
现在普遍

10:46.110 --> 10:47.110
就请求过去的时候

10:47.110 --> 10:49.110
都是使用了1.1

10:49.110 --> 10:50.110
但是目前的

10:50.110 --> 10:51.110
ADP版本是2

10:52.110 --> 10:53.110
2的个版本

10:53.110 --> 10:55.110
对我们开发的额言

10:55.110 --> 10:56.110
没有什么影响

10:56.110 --> 10:58.110
该砸钱还砸钱

10:58.110 --> 11:00.110
但是对于运为人员额言

11:00.110 --> 11:02.110
它有影响

11:02.110 --> 11:03.110
这个玩意是属于

11:03.110 --> 11:04.110
我们第三个阶段

11:04.110 --> 11:06.110
面试的时候的课程

11:06.110 --> 11:08.110
现在不用去管它

11:08.110 --> 11:10.110
这个玩意你直接忽略的

11:10.110 --> 11:11.110
反正知道这个地方发一个协议

11:11.110 --> 11:12.110
和版本就完事了

11:12.110 --> 11:13.110
然后中间这个部分

11:13.110 --> 11:15.110
我大概简单说一下

11:15.110 --> 11:16.110
非常简单

11:17.110 --> 11:19.110
中间这个版本是这样

11:19.110 --> 11:21.110
就是比方你请求这个地址

11:22.110 --> 11:23.110
那么这个地方

11:23.110 --> 11:25.110
它就会填写的是什么呢

11:25.110 --> 11:26.110
就这个地方

11:26.110 --> 11:27.110
它会填写的是什么呢

11:27.110 --> 11:28.110
它会填写这个

11:28.110 --> 11:30.110
news

11:31.110 --> 11:33.110
s

11:34.110 --> 11:36.110
就是除掉前边的这一部分

11:36.110 --> 11:38.110
之后的所有东西

11:38.110 --> 11:39.110
它都会写到这

11:39.110 --> 11:40.110
懂了意思吧

11:41.110 --> 11:42.110
这个中间部分

11:42.110 --> 11:44.110
这个第一个单词

11:44.110 --> 11:45.110
是我们的重点

11:45.110 --> 11:46.110
第一个单词叫做

11:46.110 --> 11:48.110
请求方法

11:48.110 --> 11:50.110
它叫做请求方法

11:50.110 --> 11:52.110
请求方法是一个单词

11:52.110 --> 11:53.110
它就是一个单词

11:54.110 --> 11:57.110
它表达了客户端

11:57.110 --> 11:59.110
一个基本动作

11:59.110 --> 12:01.110
所以它往往是一个动词

12:01.110 --> 12:02.110
比方说这里

12:02.110 --> 12:03.110
我们常写的两个单词

12:03.110 --> 12:05.110
一个是get

12:05.110 --> 12:06.110
表示我来干嘛呀

12:06.110 --> 12:07.110
我来请求

12:07.110 --> 12:09.110
我要来获取一些东西

12:09.110 --> 12:11.110
有的时候我们会填一个post

12:11.110 --> 12:13.110
表示我来干嘛呀

12:13.110 --> 12:15.110
我来提交一些东西

12:15.110 --> 12:17.110
它就做一个表达而已

12:17.110 --> 12:18.110
听好了

12:18.110 --> 12:20.110
接下来这句话很重要

12:21.110 --> 12:23.110
在ATP写意中

12:23.110 --> 12:25.110
没有规定

12:25.110 --> 12:28.110
只能使用这两个单词

12:29.110 --> 12:31.110
你用啥单词都可以

12:31.110 --> 12:32.110
你用abc

12:32.110 --> 12:33.110
你用凳格都可以

12:33.110 --> 12:35.110
不能用中文

12:35.110 --> 12:37.110
因为是拼命凳格

12:37.110 --> 12:38.110
成格都可以

12:38.110 --> 12:40.110
随便你用啥

12:40.110 --> 12:42.110
因为在ATP写意里面

12:42.110 --> 12:44.110
没有规定

12:44.110 --> 12:47.110
它们有什么样的区别

12:47.110 --> 12:50.810
那有时候就玩了

12:50.810 --> 12:51.810
那就是玩的

12:51.810 --> 12:53.810
它就是相当于一个文章的标题

12:53.810 --> 12:55.810
你写啥子标题

12:55.810 --> 12:57.810
都不影响文章的内容

12:57.810 --> 12:59.810
只不过我们不要

12:59.810 --> 13:01.810
搞得太离谱就行了

13:01.810 --> 13:03.810
你太离谱其实也没事

13:03.810 --> 13:04.810
因为它没有区别

13:04.810 --> 13:06.810
它就是一个含义不同而已

13:06.810 --> 13:08.810
我来干嘛我来获取

13:08.810 --> 13:10.810
我来干嘛我来提交

13:10.810 --> 13:13.810
你如果说你一定要在提交的时候使用

13:13.810 --> 13:14.810
get也可以

13:14.810 --> 13:16.810
它没有规定区别

13:17.810 --> 13:18.810
但是

13:18.810 --> 13:21.810
在我们实际开发中

13:21.810 --> 13:24.810
我们有一些约定熟成的规范

13:24.810 --> 13:25.810
你不要乱来对吧

13:25.810 --> 13:27.810
因为毕竟我们网络部分

13:27.810 --> 13:28.810
两个人的事

13:28.810 --> 13:30.810
前端和后端一起在做的事

13:30.810 --> 13:31.810
大家要正常一点

13:31.810 --> 13:33.810
做一个正常人

13:33.810 --> 13:35.810
你获取的时候你进用get

13:35.810 --> 13:37.810
你要提交的时候你用post

13:37.810 --> 13:38.810
大家就有一些规范

13:38.810 --> 13:39.810
那么这规范里面

13:39.810 --> 13:41.810
我们比方常用的这个地方的单词呢

13:41.810 --> 13:43.810
一般不会乱写

13:43.810 --> 13:45.810
写什么呢一般就写了这么几个

13:45.810 --> 13:46.810
一个是get

13:46.810 --> 13:48.810
获取资源

13:48.810 --> 13:49.810
一个是post

13:49.810 --> 13:50.810
提交消息

13:50.810 --> 13:51.810
比如说东陆

13:51.810 --> 13:53.810
驻车

13:53.810 --> 13:55.810
这些是提交一些消息过去

13:55.810 --> 13:56.810
get要获取资源

13:56.810 --> 13:58.810
比如说获取新闻列表

13:58.810 --> 13:59.810
获取一篇文章

13:59.810 --> 14:00.810
获取一个图片

14:00.810 --> 14:02.810
获取一个CSS代码

14:02.810 --> 14:03.810
这些都是获取

14:03.810 --> 14:04.810
put

14:04.810 --> 14:05.810
修改数据

14:05.810 --> 14:06.810
delete

14:06.810 --> 14:07.810
删除数据

14:07.810 --> 14:08.810
这个不用什么说

14:08.810 --> 14:09.810
没什么好说的

14:09.810 --> 14:10.810
对吧

14:10.810 --> 14:11.810
这是我们开发中

14:11.810 --> 14:13.810
约定熟成的规范

14:13.810 --> 14:16.810
它并并不是ATP协议规定的

14:16.810 --> 14:18.810
这个要记住

14:18.810 --> 14:21.180
然后呢

14:21.180 --> 14:23.180
我们在平时开发中

14:23.180 --> 14:26.180
有约定熟成的还有一个东西

14:26.180 --> 14:28.180
就是我们当我们使用

14:28.180 --> 14:29.180
get和delete的时候

14:29.180 --> 14:30.180
我们一想

14:30.180 --> 14:31.180
你看

14:31.180 --> 14:33.180
我们要获取一些东西的时候

14:33.180 --> 14:35.180
其实我给你提交

14:35.180 --> 14:36.180
什么请求体呢

14:36.180 --> 14:37.180
没有什么好请求的

14:37.180 --> 14:38.180
请求体那边

14:38.180 --> 14:40.180
没有什么东西好给你的

14:40.180 --> 14:42.180
比方说我要获取一张图片

14:42.180 --> 14:43.180
你说我请求体一边放啥

14:43.180 --> 14:45.180
我还要给你啥信息

14:45.180 --> 14:46.180
你给我图片不就完了吗

14:46.180 --> 14:47.180
对吧

14:47.180 --> 14:48.180
我给你一个

14:48.180 --> 14:49.180
我通过URO地址

14:49.180 --> 14:51.180
就可以获取一张图片了

14:51.180 --> 14:52.180
我通过一个URO地址

14:52.180 --> 14:54.180
就可以获取一个新闻列表了

14:54.180 --> 14:55.180
说获取呢

14:55.180 --> 14:57.180
和删除也是一样

14:57.180 --> 14:58.180
比方说

14:58.180 --> 15:01.180
我要删除

15:01.180 --> 15:03.180
举个例子

15:03.180 --> 15:05.180
我用delete请求

15:05.180 --> 15:06.180
我删除什么呢

15:06.180 --> 15:07.180
删除这个地址

15:07.180 --> 15:09.180
我给他一个URO地址

15:09.180 --> 15:21.180
3W-1.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0的一条新闻

15:21.180 --> 15:23.180
使用delete请求

15:23.180 --> 15:25.180
你说我还要给你啥

15:25.180 --> 15:27.180
我们不需要给你啥了吧

15:27.180 --> 15:28.180
那么这个时候呢

15:28.180 --> 15:31.180
是不需要请求体的

15:31.180 --> 15:36.180
但是post和put请求是可以有请求体的

15:36.180 --> 15:37.180
比方说我登录

15:37.180 --> 15:39.180
我登录不得有账号密码吗

15:39.180 --> 15:41.180
你看账号密码就要小帮到请求体里面

15:41.180 --> 15:45.180
不然你咋知道你验证哪个账号哪个密码呢

15:45.180 --> 15:46.180
那我要修改数据

15:46.180 --> 15:47.180
我要修改密码

15:47.180 --> 15:49.180
那我把修改的密码是不是要放到这儿

15:49.180 --> 15:52.180
就密码新密码我都要放到这儿

15:52.180 --> 15:57.180
这就是我们平时开发中约定俗称的规范

15:57.180 --> 16:02.180
并不是说他这两个在HDP协议里面

16:02.180 --> 16:03.180
不能有请求体

16:03.180 --> 16:04.180
HDP协议没有无所谓的

16:04.180 --> 16:06.180
这个地方随便你咋写都可以

16:06.180 --> 16:08.180
它不影响后边

16:08.180 --> 16:09.180
跟后边没关系的

16:09.180 --> 16:10.180
只不过我们在开发中

16:10.180 --> 16:12.180
有一些约定俗称的规范

16:12.180 --> 16:13.180
懂得意思吗

16:13.180 --> 16:14.180
就这么意思

16:18.180 --> 16:21.180
不仅我们平时开发中

16:21.180 --> 16:22.180
约定俗称的规范

16:22.180 --> 16:23.180
浏览器呢

16:23.180 --> 16:26.180
它其实也遵循上面的规范

16:26.180 --> 16:29.180
浏览器作为一个常见的刻骨段

16:29.180 --> 16:31.180
它也遵守在上面

16:31.180 --> 16:32.180
它也不会给你乱来

16:32.180 --> 16:35.180
这里随便它也不会给你瞎写

16:35.180 --> 16:36.180
浏览器里面

16:36.180 --> 16:39.180
这里边就是写的是Gate and Post

16:39.180 --> 16:41.180
那么它也遵循说

16:41.180 --> 16:42.180
Gate请求我没有请求体

16:42.180 --> 16:45.180
Post请求我可以有请求体

16:45.180 --> 16:50.180
于是才造成了Gate and Post的诸多区别

16:51.180 --> 16:53.180
那么Gate和Post更多的区别

16:53.180 --> 16:55.180
在我们后面面时刻成

16:55.180 --> 16:57.180
再来细说

16:57.180 --> 16:59.180
那么现在我们来看一下

16:59.180 --> 17:01.180
由于Gate请求没有请求体

17:01.180 --> 17:03.180
它会带来一个比较直观的区别

17:03.180 --> 17:05.180
就是如果说要传递数据

17:05.180 --> 17:07.180
只有一种办法

17:07.180 --> 17:10.180
把数据放到UIL参数中

17:10.180 --> 17:12.180
好 那我们来举个例子

17:12.180 --> 17:14.180
比方说我们刚才

17:14.180 --> 17:17.180
要做获取新闻

17:17.180 --> 17:21.140
第五页

17:21.140 --> 17:24.140
那么像这是一个Gate请求

17:24.140 --> 17:26.140
Gate请求我们要获取数据

17:26.140 --> 17:27.140
获取新闻列表

17:27.140 --> 17:29.140
我们要获取第五页的新闻

17:29.140 --> 17:30.140
那么这个时候

17:30.140 --> 17:32.140
我们第五页这个信息

17:32.140 --> 17:34.140
我只有一种做法

17:34.140 --> 17:36.140
就是把它放到地址南参数里面

17:36.140 --> 17:39.140
只能放到这儿

17:39.140 --> 17:41.140
因为它没有请求体

17:41.140 --> 17:43.140
但是如果说我们用Post的请求

17:43.140 --> 17:45.140
来获取新闻列表

17:45.140 --> 17:46.140
它一般不会这样做

17:46.140 --> 17:48.140
这个含意就觉得很奇怪

17:48.140 --> 17:49.140
你获取新闻列表的

17:49.140 --> 17:50.140
为什么要提交呢

17:50.140 --> 17:52.140
如果说用Post请求的话

17:52.140 --> 17:53.140
就有两种做法了

17:53.140 --> 17:55.140
我可以把第五页这个信息

17:55.140 --> 17:56.140
放到这儿

17:56.140 --> 17:58.140
也可以把它放到

17:58.140 --> 18:01.140
请求体里面

18:01.140 --> 18:03.140
我们通常用body

18:03.140 --> 18:05.140
来表示一个消息体

18:05.140 --> 18:07.140
那么我们可以把它放到这儿

18:07.140 --> 18:09.140
配级等于5

18:09.140 --> 18:10.140
懂这意思吗

18:10.140 --> 18:12.140
就说的是这么一个意思

18:12.140 --> 18:14.140
Post请求它有更多的选择

18:14.140 --> 18:16.140
我可以把信息放到这儿

18:16.140 --> 18:18.140
也可以把信息放到这儿

18:19.140 --> 18:21.140
那么那具体选择哪一个呢

18:21.140 --> 18:23.140
那要看服务器跟客户端之间的约定

18:23.140 --> 18:24.140
一般来说

18:24.140 --> 18:26.140
Post请求的这些消息

18:26.140 --> 18:27.140
一般就放到这儿

18:27.140 --> 18:28.140
放到保底地边

18:28.140 --> 18:29.140
Gate的请求消息

18:29.140 --> 18:32.140
它的额外消息就放到这儿

18:33.140 --> 18:34.140
明白了意思吗

18:37.140 --> 18:38.140
那么我们在

18:38.140 --> 18:41.140
实际的应用互联网

18:41.140 --> 18:43.140
这些网站的时候

18:43.140 --> 18:45.140
在浏览器里面一般获取数据

18:45.140 --> 18:47.140
都是用的skate请求

18:47.140 --> 18:49.140
那这个请求太多了

18:49.140 --> 18:50.140
比方说在地址南中

18:50.140 --> 18:52.140
中区输入一个地址

18:52.140 --> 18:53.140
按下回车

18:53.140 --> 18:55.140
说它有点百多亿按回车

18:55.140 --> 18:57.140
就是自动发出一个Gate请求

18:57.140 --> 18:59.140
点击某一个A元素

18:59.140 --> 19:01.140
点了一个超链接

19:01.140 --> 19:03.140
发出一个Gate请求

19:03.140 --> 19:05.140
获取图片 音频 视频

19:05.140 --> 19:07.140
获取CSSGS 字体等文件

19:07.140 --> 19:09.140
都是Gate请求

19:09.140 --> 19:11.140
实际上你们学到现在

19:11.140 --> 19:12.140
你们接触到的浏览器

19:12.140 --> 19:15.450
各种效果全是Gate请求

19:15.450 --> 19:16.450
目前来讲

19:16.450 --> 19:18.450
你们的知识里边

19:18.450 --> 19:20.450
能发出Post请求的场景

19:20.450 --> 19:22.450
只有一个

19:22.450 --> 19:24.450
你们基本上没有怎么接触的

19:24.450 --> 19:26.450
是什么场景呢

19:26.450 --> 19:28.450
是这个场景

19:28.450 --> 19:31.950
就是你这里有个form表单

19:31.950 --> 19:33.950
表单里面我们随便写一个吧

19:33.950 --> 19:35.950
比方说帐号

19:35.950 --> 19:37.950
Input

19:37.950 --> 19:39.950
然后下边一个按钮提交

19:41.950 --> 19:42.950
那么这个场景里边

19:42.950 --> 19:44.950
你还要做一些事

19:44.950 --> 19:46.950
要受制个表单的Messor

19:46.950 --> 19:48.950
为Post

19:48.950 --> 19:50.950
表示说什么意思呢

19:50.950 --> 19:52.950
我点提交过后

19:52.950 --> 19:54.950
发出一个Post请求

19:54.950 --> 19:56.950
请求哪个地址呢

19:56.950 --> 19:58.950
要给他写个请求地址

19:58.950 --> 20:00.950
你随便下写个地址

20:00.950 --> 20:02.950
无所谓吧

20:02.950 --> 20:04.950
你就请求到百度吧

20:04.950 --> 20:06.950
我把我的消息提交给百度

20:06.950 --> 20:08.950
我们保证一下看一下吧

20:08.950 --> 20:12.260
打开

20:12.260 --> 20:14.260
那么这个时候就会发出Post请求

20:14.260 --> 20:16.260
随便写个点击提交

20:16.260 --> 20:18.260
他就会一个Post请求发到百度

20:18.260 --> 20:20.260
百度里面就直接给你报错了

20:20.260 --> 20:22.260
你要干嘛

20:22.260 --> 20:24.260
你为什么突然百度的服务器

20:24.260 --> 20:26.260
有没有收到我们的消息

20:26.260 --> 20:28.260
他收到了一个Post请求

20:28.260 --> 20:30.260
到了百度的服务器

20:30.260 --> 20:32.260
百度的服务器看这什么玩意

20:32.260 --> 20:34.260
哪个学生也给我发消息过来

20:34.260 --> 20:36.260
没理我

20:36.260 --> 20:38.260
他说给我报了一个错误的页面

20:38.260 --> 20:40.260
不理我的

20:40.260 --> 20:42.260
这些网络一定是两个人的事

20:42.260 --> 20:44.260
这边做的再也好把消息发过去了

20:44.260 --> 20:46.260
对方如果说不接收

20:46.260 --> 20:48.260
不处理那也没办法

20:48.260 --> 20:50.260
所以说你们以后在公司里面

20:50.260 --> 20:52.260
是要经常跟后端开发人员协调这个接口的

20:52.260 --> 20:54.260
我到底应该用什么样的方法

20:54.260 --> 20:56.260
请求什么样的地址

20:56.260 --> 20:58.260
我要传递什么样的消息

20:58.260 --> 21:00.260
数据我才能得到我想要的信息

21:00.260 --> 21:02.260
叫约定的

21:02.260 --> 21:07.750
不是说一方说了算的

21:07.750 --> 21:09.750
后边我们看到那个

21:09.750 --> 21:11.750
接客文档我们就知道

21:11.750 --> 21:13.750
知道的更多了

21:13.750 --> 21:15.750
我们只需要关注这个

21:15.750 --> 21:17.750
这个请求方法

21:17.750 --> 21:19.750
好

21:19.750 --> 21:21.750
然后接下来请求投

21:21.750 --> 21:23.750
请求投呢

21:23.750 --> 21:25.750
它里面包含了全市建值队

21:25.750 --> 21:27.750
贸号前边是建

21:27.750 --> 21:29.750
贸号后边是指

21:29.750 --> 21:31.750
建

21:31.750 --> 21:33.750
指

21:33.750 --> 21:35.750
这也是指

21:35.750 --> 21:37.750
上一行没写完

21:37.750 --> 21:39.750
放不下了方航了

21:39.750 --> 21:41.750
还没写完

21:41.750 --> 21:43.750
这是一个建

21:43.750 --> 21:45.750
后边三行都是指

21:45.750 --> 21:47.750
因为它这里排不下了

21:47.750 --> 21:49.750
这是建

21:49.750 --> 21:51.750
这是指

21:51.750 --> 21:53.750
全市建值队

21:53.750 --> 21:55.750
就像属性民属性指一样

21:55.750 --> 21:57.750
那么这个地方放的是一些

21:57.750 --> 21:59.750
额外的信息

21:59.750 --> 22:01.750
流浪器每一次请求服务器的时候

22:01.750 --> 22:03.750
都会自动的附带

22:03.750 --> 22:05.750
很多的请求投

22:05.750 --> 22:07.750
其实这些请求投的

22:07.750 --> 22:09.750
大部分服务器是不需要的

22:09.750 --> 22:11.750
就是说

22:11.750 --> 22:13.750
我把我的各种身份信息

22:13.750 --> 22:15.750
我的姓名 年龄 家庭 住址

22:15.750 --> 22:17.750
家里几头牛 家里几某地

22:17.750 --> 22:19.750
全部告诉你服务器

22:19.750 --> 22:21.750
你爱用就用

22:21.750 --> 22:23.750
你可以说你不用

22:23.750 --> 22:25.750
但是你不能说我没给

22:25.750 --> 22:27.750
请求投去放这些信息的

22:27.750 --> 22:29.750
我们来看一下吧

22:29.750 --> 22:31.750
顺便教大家调试浏览器

22:31.750 --> 22:33.750
别忘了说我们现在呢

22:33.750 --> 22:37.060
就去这个地址吧

22:37.060 --> 22:39.060
就这个网页

22:39.060 --> 22:41.060
这里有个检查

22:41.060 --> 22:43.060
会打开浏览器的调试工具

22:43.060 --> 22:45.060
这个网友你们一定要学会用

22:45.060 --> 22:47.060
跟着大老师可以做一点

22:47.060 --> 22:49.060
这里有个network

22:49.060 --> 22:51.060
表示网络 点一下

22:53.060 --> 22:55.060
其他的 把这个勾选上吧

22:55.060 --> 22:57.060
这个勾选上

22:57.060 --> 22:59.060
其他的倒无所谓

22:59.060 --> 23:01.060
这果然都无所谓

23:01.060 --> 23:03.060
这个网友是清除缓存的

23:03.060 --> 23:05.060
一般调试的时候不需要缓存

23:05.060 --> 23:07.060
这个是持久化日日的

23:07.060 --> 23:09.060
就有之前的日子还在

23:09.060 --> 23:11.060
把这个勾去掉过后

23:11.060 --> 23:13.060
每一次刷新之后

23:13.060 --> 23:15.060
就有之前的日子就没了

23:15.060 --> 23:17.060
勾选上吧

23:17.060 --> 23:19.060
接下来我们来刷新一下

23:19.060 --> 23:21.060
刷新

23:21.060 --> 23:23.060
这里要选择个O

23:23.060 --> 23:25.060
你会发现这里发出了三个请求

23:25.060 --> 23:27.060
其他的请求我们不用管

23:27.060 --> 23:29.060
我们就看这个

23:29.060 --> 23:31.060
请求的是谁

23:31.060 --> 23:33.060
请求的是1.1天秒

23:33.060 --> 23:35.060
说明我们这里

23:35.060 --> 23:37.060
但是通过UIL地址

23:37.060 --> 23:39.060
发出了一个请求

23:39.060 --> 23:41.060
请求的是这个

23:41.060 --> 23:43.060
那么请求这个的时候

23:43.060 --> 23:46.500
我们选动它

23:46.500 --> 23:48.500
下面有一个概述

23:48.500 --> 23:50.500
这个是响应

23:50.500 --> 23:52.500
我们现在不管

23:52.500 --> 23:54.500
这是我们的请求头

23:54.500 --> 23:56.500
这里有一个view source

23:56.500 --> 23:58.500
点击它

23:58.500 --> 24:00.500
就看到它的原始格式

24:00.500 --> 24:02.500
原始格式发出了什么请求

24:02.500 --> 24:04.500
介绍请求

24:04.500 --> 24:06.500
榴弹器的调词工具

24:06.500 --> 24:08.500
把请求行也归到

24:08.500 --> 24:10.500
请求头里面去了

24:10.500 --> 24:12.500
然后后面全是建置队

24:12.500 --> 24:14.500
建

24:14.500 --> 24:16.500
指

24:16.500 --> 24:18.500
属性名 属性指

24:18.500 --> 24:20.500
它全是榴弹器给你自动的

24:20.500 --> 24:22.500
勾建了很多的建置队

24:22.500 --> 24:24.500
这全是这些东西

24:24.500 --> 24:26.500
懂得意思吗

24:26.500 --> 24:28.500
你不需要做任何事情

24:28.500 --> 24:30.500
它自己给你加了

24:30.500 --> 24:32.500
那当然你要自己手动加的话

24:32.500 --> 24:34.500
加了很多的建置队

24:34.500 --> 24:36.500
然后我们也可以这里

24:36.500 --> 24:38.500
view post

24:38.500 --> 24:40.500
它以一种更好的格式来看

24:40.500 --> 24:42.500
点击它

24:42.500 --> 24:44.500
这样子看的是不是更清楚

24:44.500 --> 24:49.670
建置队

24:49.670 --> 24:51.670
然后呢

24:51.670 --> 24:53.670
我们比方再看Pose Man

24:53.670 --> 24:55.670
Pose Man里面我们之前不是一个热门的电影列表吗

24:55.670 --> 24:57.670
热门电影列表里面

24:57.670 --> 24:59.670
我们看这里是不是

24:59.670 --> 25:01.670
介绍请求 这里可以选择请求方法

25:01.670 --> 25:03.670
用介绍请求

25:03.670 --> 25:05.670
这个地址

25:05.670 --> 25:10.710
请求这个地址

25:10.710 --> 25:12.710
然后我们这里可以看这里选择的时候

25:12.710 --> 25:14.710
可以选择Headers

25:14.710 --> 25:16.710
看到没

25:16.710 --> 25:18.710
这里面是不是建置队

25:18.710 --> 25:20.710
你也是一样

25:20.710 --> 25:22.710
不管是榴弹器也好

25:22.710 --> 25:24.710
还是别的工具也好

25:24.710 --> 25:26.710
你只要发出请求

25:26.710 --> 25:28.710
你就要给它设置请求头

25:28.710 --> 25:30.710
那个请求头你可以一个都不设置

25:30.710 --> 25:32.710
也可以随便设置一些

25:32.710 --> 25:34.710
这要跟服务器之间约定

25:34.710 --> 25:36.710
不要让服务器说你随便吧

25:36.710 --> 25:38.710
请求头我倒是无所谓

25:38.710 --> 25:40.710
你要给就给不给就算了

25:40.710 --> 25:42.710
那里就无所谓

25:42.710 --> 25:44.710
如果服务器明确要求

25:44.710 --> 25:46.710
你这个地方必须要给我一个请求头

25:46.710 --> 25:48.710
你就必须要给

25:48.710 --> 25:50.710
这个东西要约定的

25:50.710 --> 25:52.710
不能说一方说了算的

25:52.710 --> 25:54.710
那么建议发送

25:54.710 --> 25:56.710
那么这个请求头就发出去了

25:56.710 --> 25:58.710
就这么简单

26:00.710 --> 26:02.710
那么这个请求头

26:02.710 --> 26:04.710
我们要关注啥呢

26:04.710 --> 26:06.710
我们关注一些常见的请求头

26:06.710 --> 26:08.710
就可以了

26:08.710 --> 26:10.710
一个是host

26:10.710 --> 26:12.710
这个请求头表示UIL地址中的主机

26:12.710 --> 26:14.710
这是啥意思

26:14.710 --> 26:16.710
你看host

26:16.710 --> 26:18.710
就表示我这一次请求

26:18.710 --> 26:20.710
请求的主机就是这一部分

26:20.710 --> 26:22.710
如果说有端口的话还包含端口

26:22.710 --> 26:24.710
比方说我们把端口加上

26:24.710 --> 26:26.710
来这

26:26.710 --> 26:36.420
来这变成5500嘛

26:36.420 --> 26:38.420
好 再来 放心

26:38.420 --> 26:42.310
点进去

26:42.310 --> 26:44.310
这个host是啥

26:44.310 --> 26:46.310
是不是就是这一部分

26:46.310 --> 26:48.310
主机名家端口

26:48.310 --> 26:50.310
了解就行了

26:50.310 --> 26:52.310
一个是user agent

26:52.310 --> 26:54.310
表示客户端语信息描述

26:54.310 --> 26:56.310
浏览器一般会带这个

26:56.310 --> 27:00.310
就是User agent

27:00.310 --> 27:02.310
就这个玩意

27:04.310 --> 27:06.310
User agent

27:06.310 --> 27:08.310
这个玩意是什么呢

27:08.310 --> 27:10.310
就表示我是谁

27:10.310 --> 27:12.310
我发出气这个请求的人到底是谁

27:12.310 --> 27:14.310
是谁呢

27:14.310 --> 27:16.310
浏览器发出这个东西的时候

27:16.310 --> 27:18.310
User agent他就填写的是浏览器

27:18.310 --> 27:20.310
postman的话这个User agent

27:20.310 --> 27:22.310
他就写的是postman

27:22.310 --> 27:24.310
我是用postman来发出的

27:24.310 --> 27:26.310
一般来说大家都比较规矩

27:26.310 --> 27:28.310
说

27:28.310 --> 27:30.310
比较规矩什么意思呢

27:30.310 --> 27:32.310
就是来做个自我介绍

27:32.310 --> 27:34.310
是谁在发出这个请求

27:34.310 --> 27:36.310
那这个玩意能不能改呢

27:37.310 --> 27:39.310
比方说你要骗浏览器

27:39.310 --> 27:41.310
骗浏览器说我就是一个浏览器

27:41.310 --> 27:43.310
你说我是一个cron浏览器

27:45.310 --> 27:46.310
能不能骗浏览器

27:46.310 --> 27:47.310
可以啊

27:47.310 --> 27:53.020
它不让我改

27:53.020 --> 27:54.020
也不让我改

27:54.020 --> 27:56.020
我关了浏览器设置一个浏览器

27:56.020 --> 27:58.020
那个都简单

27:58.020 --> 27:59.020
它不能改的

27:59.020 --> 28:00.020
这个都是可以改的

28:00.020 --> 28:01.020
cron

28:01.020 --> 28:03.020
就感觉改了有什么大不了

28:03.020 --> 28:05.020
浏览器是不是骗了浏览器

28:05.020 --> 28:06.020
它就骗了浏览器

28:06.020 --> 28:07.020
浏览器怎么呢

28:07.020 --> 28:09.020
不受骗的它没法不受骗

28:09.020 --> 28:11.020
这个玩意是没办法的

28:11.020 --> 28:13.020
就看大家自觉

28:13.020 --> 28:14.020
真的就看大家自觉

28:14.020 --> 28:15.020
你不要不相信

28:15.020 --> 28:16.020
就是这样子的

28:16.020 --> 28:17.020
你看这个浏览器里边

28:17.020 --> 28:19.020
它怎么在骗浏览器呢

28:19.020 --> 28:21.020
我这是个谷歌浏览器

28:21.020 --> 28:22.020
它说

28:22.020 --> 28:23.020
它告诉浏览器说

28:23.020 --> 28:24.020
我是啥呀

28:24.020 --> 28:25.020
我是Mozeta

28:25.020 --> 28:26.020
我是火骨的

28:27.020 --> 28:28.020
然后呢

28:28.020 --> 28:29.020
我还是那个

28:29.020 --> 28:31.020
移动端的Apple Webkit

28:32.020 --> 28:33.020
然后呢

28:33.020 --> 28:35.020
我还是Safari

28:36.020 --> 28:37.020
你看是不是还骗了

28:37.020 --> 28:38.020
以前还骗得更凶

28:38.020 --> 28:39.020
以前还骗它

28:39.020 --> 28:40.020
它说我是iE

28:41.020 --> 28:42.020
现在

28:42.020 --> 28:44.020
iE好像没什么人用了

28:44.020 --> 28:45.020
所以说不用再骗了

28:47.020 --> 28:48.020
你以为我给你开玩笑

28:48.020 --> 28:49.020
它就是在骗

28:50.020 --> 28:51.020
所有浏览器都在骗

28:52.020 --> 28:53.020
为什么呢

28:53.020 --> 28:54.020
这有些历史的原因在里边

28:54.020 --> 28:55.020
因为

28:55.020 --> 28:56.020
顺便说两句吧

28:56.020 --> 28:58.020
就是在早期的时候

28:59.020 --> 29:01.020
浏览器的差异特别大

29:01.020 --> 29:02.020
特别特别大

29:02.020 --> 29:03.020
不要现在有标准的

29:03.020 --> 29:05.020
大家遵守标准

29:05.020 --> 29:06.020
以前差异不要大

29:07.020 --> 29:08.020
不要大呢

29:08.020 --> 29:09.020
那个浮览器

29:09.020 --> 29:10.020
就是写浮览器的人

29:10.020 --> 29:11.020
就很烦

29:11.020 --> 29:13.020
我要兼容这个浏览器

29:13.020 --> 29:14.020
要兼容那个浮览器

29:14.020 --> 29:15.020
就特别特别的烦

29:16.020 --> 29:17.020
后来呢

29:17.020 --> 29:18.020
浮览器就想了一个办法

29:18.020 --> 29:19.020
老子不兼容了

29:19.020 --> 29:20.020
我就针对其中一个

29:20.020 --> 29:21.020
比方说我就针对

29:21.020 --> 29:22.020
我就兼容iE

29:22.020 --> 29:23.020
其他的原来

29:23.020 --> 29:24.020
我都不兼容了

29:24.020 --> 29:26.020
以前iE市场份额大

29:27.020 --> 29:28.020
那么怎么办呢

29:28.020 --> 29:29.020
我就怎么来

29:29.020 --> 29:30.020
知道它是哪个浮览器呢

29:30.020 --> 29:31.020
浮览器

29:31.020 --> 29:32.020
它就看这个iE的A进程

29:33.020 --> 29:34.020
你iE的iE的

29:34.020 --> 29:35.020
iE的A进程

29:35.020 --> 29:36.020
是一个东西

29:36.020 --> 29:37.020
一开始大家还比较规矩

29:38.020 --> 29:40.020
都是写了自己的浮览器的

29:40.020 --> 29:41.020
那个

29:41.020 --> 29:43.020
版本和名字

29:43.020 --> 29:45.020
我看到你是iE浮览器

29:45.020 --> 29:46.020
我就给你发送一个

29:46.020 --> 29:47.020
正常的内容

29:47.020 --> 29:48.020
你不是iE浮览器

29:48.020 --> 29:49.020
我就给你发一个

29:49.020 --> 29:50.020
另外一个页面

29:50.020 --> 29:51.020
那个页面让你去下载iE

29:52.020 --> 29:54.020
以前就是这么玩的

29:54.020 --> 29:55.020
不想做起兼容

29:55.020 --> 29:56.020
太麻烦了

29:56.020 --> 29:57.020
那后来呢

29:57.020 --> 29:58.020
这些浮览器

29:58.020 --> 29:59.020
就想了一个办法

29:59.020 --> 30:00.020
就不行

30:00.020 --> 30:01.020
你必须要兼容我

30:01.020 --> 30:02.020
他就骗浮览器

30:02.020 --> 30:04.020
把所有的那些浮览器

30:04.020 --> 30:05.020
的名字和版本

30:05.020 --> 30:06.020
全部写进去

30:06.020 --> 30:07.020
写了一大堆

30:07.020 --> 30:08.020
而浮览器不知道了

30:08.020 --> 30:10.020
根本就一点办法都没有

30:10.020 --> 30:11.020
根本就不知道

30:11.020 --> 30:12.020
你是到底是用什么琴球的

30:14.020 --> 30:15.020
所以呢

30:15.020 --> 30:17.020
这种历史的问题

30:17.020 --> 30:18.020
就一律下来了

30:18.020 --> 30:19.020
其实官员没啥用

30:19.020 --> 30:20.020
真没啥用

30:20.020 --> 30:21.020
现在的浮览器

30:21.020 --> 30:22.020
一般也不去判断这个玩意了

30:22.020 --> 30:23.020
反正知道这个玩意

30:23.020 --> 30:24.020
判断也没什么用

30:25.020 --> 30:27.970
这是那个

30:27.970 --> 30:28.970
第三个才是重点

30:28.970 --> 30:29.970
第三个

30:29.970 --> 30:31.970
content type

30:32.970 --> 30:34.970
这个表示什么意思呢

30:34.970 --> 30:35.970
这个表示

30:35.970 --> 30:38.970
我琴球体的消息格式

30:39.970 --> 30:41.970
是什么格式

30:42.970 --> 30:43.970
我们的琴球里面

30:43.970 --> 30:45.970
不是有三段东西吗

30:46.970 --> 30:48.970
航,头,体

30:49.970 --> 30:50.970
有的时候没有体

30:50.970 --> 30:51.970
没有体的话

30:51.970 --> 30:52.970
这个东西就没意义了

30:52.970 --> 30:53.970
没有琴球体

30:53.970 --> 30:54.970
这个东西就没有意义

30:54.970 --> 30:55.970
比方说像Gate琴球

30:55.970 --> 30:57.970
Gate琴球还没有琴球体

30:57.970 --> 30:58.970
你看

30:58.970 --> 30:59.970
Gate琴球里面有content type吗

30:59.970 --> 31:00.970
你找吧

31:00.970 --> 31:01.970
没有

31:02.970 --> 31:04.970
它不需要这个东西

31:05.970 --> 31:06.970
但Pose的琴球有琴球体

31:06.970 --> 31:08.970
比方说我这里提交

31:08.970 --> 31:09.970
提交过Pose的琴球

31:09.970 --> 31:10.970
是有琴球体的

31:10.970 --> 31:11.970
点提交

31:11.970 --> 31:12.970
你看这里提交到了

31:12.970 --> 31:14.970
你看这里是不是一个Pose的琴球

31:14.970 --> 31:15.970
提交到百度了

31:15.970 --> 31:16.970
对吧

31:16.970 --> 31:17.970
好,我们看一下百度

31:17.970 --> 31:18.970
在这

31:18.970 --> 31:20.970
你看这里是不是有content type

31:21.970 --> 31:22.970
对吧

31:22.970 --> 31:23.970
表示什么意思呢

31:23.970 --> 31:26.970
表示我的琴球体里面的数据

31:26.970 --> 31:27.970
我带马稍微写一下

31:27.970 --> 31:29.970
就可以看到这个琴球体了

31:31.970 --> 31:32.970
LOCKING ID

31:32.970 --> 31:33.970
给它登录了当号

31:37.940 --> 31:38.940
再来

31:52.160 --> 31:53.160
好,点提交

31:54.160 --> 31:55.160
好,你看

31:55.160 --> 31:57.160
Pose的琴球到了百度

31:57.160 --> 31:58.160
然后呢

32:01.160 --> 32:02.160
下面这个

32:05.560 --> 32:07.560
我的提交的消息呢

32:11.150 --> 32:13.150
我提交的消息跑了去了

32:13.150 --> 32:15.980
再来一次

32:15.980 --> 32:20.460
把这个琴红

32:21.460 --> 32:22.460
提交

32:24.460 --> 32:25.460
这里一个Pose的

32:25.460 --> 32:26.460
它给我

32:27.460 --> 32:28.460
在这

32:28.460 --> 32:29.460
现在在谷歌里面

32:29.460 --> 32:30.460
升级了过

32:30.460 --> 32:32.460
它把琴球体放这了

32:32.460 --> 32:33.460
Pose的

32:33.460 --> 32:34.460
边域你查看

32:35.460 --> 32:37.460
你看,是不是有个LOCKING ID

32:37.460 --> 32:38.460
对吧

32:38.460 --> 32:39.460
我的提交的消息

32:39.460 --> 32:40.460
那么现在大家知道了吧

32:40.460 --> 32:42.460
这个Name到底是啥

32:42.460 --> 32:45.460
就是那个琴球体里面的

32:45.460 --> 32:46.460
属性

32:46.460 --> 32:48.460
它会形成琴球体里面的属性

32:48.460 --> 32:49.460
它就是这个东西

32:50.460 --> 32:52.460
原式格式是这样子的

32:52.460 --> 32:53.460
LOCKING ID等于

32:53.460 --> 32:55.460
那么这种消息格式呢

32:55.460 --> 32:56.460
它就在这里

32:56.460 --> 32:58.460
写了Request Header里边

32:58.460 --> 32:59.460
它告诉我

32:59.460 --> 33:00.460
诶,说这个

33:00.460 --> 33:01.460
Counting Type什么意思呢

33:01.460 --> 33:04.460
就是我的琴球体里边的

33:04.460 --> 33:05.460
那个消息格式

33:05.460 --> 33:06.460
是这种格式

33:06.460 --> 33:08.460
这是一个固定的字符创

33:08.460 --> 33:09.460
表示一个

33:09.460 --> 33:10.460
格式的名字

33:11.460 --> 33:12.460
好,那么我们来看一下

33:12.460 --> 33:14.460
我们常见有哪些格式

33:14.460 --> 33:15.460
一种是这种格式

33:15.460 --> 33:16.460
就是我们刚才看到的

33:17.460 --> 33:18.460
这种格式呢

33:18.460 --> 33:19.460
表示说

33:19.460 --> 33:20.460
我琴球体里边的数据格式呢

33:20.460 --> 33:21.460
是这种的

33:21.460 --> 33:23.460
有点像URO地址参数

33:23.460 --> 33:24.460
你看URO

33:24.460 --> 33:26.460
有点像URO地址参数的样子

33:26.460 --> 33:27.460
LOCKING ID

33:27.460 --> 33:28.460
等于Erdman

33:28.460 --> 33:30.460
然后用End符号来分割

33:30.460 --> 33:32.460
LOCKING password等于12323

33:32.460 --> 33:34.460
它是用这种格式的

33:35.460 --> 33:36.460
这种格式呢

33:36.460 --> 33:38.460
我们现在已经很少很少使用了

33:38.460 --> 33:39.460
以前很

33:39.460 --> 33:41.460
一些旧的网站

33:41.460 --> 33:42.460
很喜欢用这种格式

33:42.460 --> 33:44.460
现在我们一般用接生格式

33:45.460 --> 33:46.460
Application接生

33:48.460 --> 33:49.460
然后这里写的就是接生格式

33:49.460 --> 33:50.460
接生格式一看就懂了

33:50.460 --> 33:51.460
对吧

33:51.460 --> 33:52.460
就是这种格式

33:52.460 --> 33:53.460
下面还有种格式呢

33:53.460 --> 33:55.460
一般是用来上传文件的

33:55.460 --> 33:57.460
现在我们还不涉及上传文件

33:57.460 --> 33:58.460
所以说先暂时不用管

33:59.460 --> 34:00.460
懂了意思吗

34:00.460 --> 34:01.460
现在我们现在要明白

34:01.460 --> 34:02.460
琴球头里边我们要关注什么

34:02.460 --> 34:03.460
关注这个

34:03.460 --> 34:04.460
content type

34:05.460 --> 34:07.460
表示我的琴球体里边的什么

34:07.460 --> 34:08.460
是什么消息格式

34:08.460 --> 34:10.460
格式的名字是啥

34:10.460 --> 34:12.460
这个东西叫

34:12.460 --> 34:14.460
这个东西叫MIME

34:17.860 --> 34:19.860
网络这一部分概念非常非常多

34:20.860 --> 34:21.860
当你熟悉之后

34:21.860 --> 34:22.860
就发现非常简单

34:22.860 --> 34:23.860
跟你学CSS一样

34:24.860 --> 34:25.860
CSS学了半天

34:25.860 --> 34:26.860
觉得这个东西

34:27.860 --> 34:28.860
太多了

34:28.860 --> 34:30.860
现在就还觉得CSS复杂

34:30.860 --> 34:31.860
就非常简单了

34:31.860 --> 34:32.860
网络这部分也是一样

34:32.860 --> 34:34.860
有很多的概念和数语

34:34.860 --> 34:36.860
你慢慢熟悉了之后

34:36.860 --> 34:37.860
你就觉得很简单了

34:37.860 --> 34:39.860
就这种制服串的名字

34:39.860 --> 34:40.860
叫做MIME

34:41.860 --> 34:43.860
它是用一个制服串

34:43.860 --> 34:45.860
一个标准格式的制服串

34:45.860 --> 34:50.520
来表达

34:50.520 --> 34:51.520
格式

34:52.520 --> 34:53.520
内容格式

34:54.520 --> 34:55.520
啥意思呢

34:55.520 --> 34:56.520
比方说

34:56.520 --> 34:58.520
我们说这个网络上传说

34:58.520 --> 34:59.520
我们传说一个什么格式

34:59.520 --> 35:00.520
传说一个接证格式

35:00.520 --> 35:02.520
那么我怎么来描述

35:02.520 --> 35:03.520
接证格式

35:03.520 --> 35:04.520
这句话呢

35:04.520 --> 35:05.520
就用这句话

35:05.520 --> 35:06.520
这个制服串

35:06.520 --> 35:07.520
IPTK型接证

35:07.520 --> 35:08.520
它就表示

35:08.520 --> 35:10.520
我的格式是一个接证格式

35:10.520 --> 35:11.520
其实这种东西

35:11.520 --> 35:12.520
大家是看到过的

35:12.520 --> 35:14.520
我们以前写一个另一个元素的时候

35:14.520 --> 35:15.520
有一个地方Type

35:15.520 --> 35:16.520
等于什么

35:17.520 --> 35:19.520
Text-CSS

35:19.520 --> 35:20.520
对吧

35:20.520 --> 35:21.520
是不是见过这种东西

35:21.520 --> 35:22.520
这就是MIME

35:22.520 --> 35:23.520
它表示我这个另一个元素

35:23.520 --> 35:25.520
达到的内容是什么格式呢

35:25.520 --> 35:26.520
是一个CSS

35:26.520 --> 35:28.520
文本的CSS格式

35:28.520 --> 35:30.520
比方说我网络上有一些图片

35:30.520 --> 35:32.520
这是一个JPG图片

35:32.520 --> 35:34.520
那我们在网络传说中

35:34.520 --> 35:35.520
我如何来表达

35:35.520 --> 35:37.520
我这个内容是一个JPG图片

35:37.520 --> 35:39.520
就是IMEG-JPG

35:40.520 --> 35:42.520
就这么个意思

35:42.520 --> 35:43.520
这么个东西

35:43.520 --> 35:44.520
没有什么复杂的

35:44.520 --> 35:46.520
我用它这个格式来表达

35:46.520 --> 35:48.520
就是我的内容是这个样子的

35:48.520 --> 35:50.520
我用这个制服串来表达

35:50.520 --> 35:52.520
我的内容是这个格式的

35:52.520 --> 35:54.520
我用这个东西来表达

35:54.520 --> 35:57.520
我的内容里面是一个大文件格式

35:57.520 --> 35:58.520
那大数据格式

35:58.520 --> 36:00.520
这个东西以后我们再说

36:00.520 --> 36:01.520
好了吧

36:01.520 --> 36:02.520
这是请求头

36:03.520 --> 36:04.520
我还有时间

36:05.520 --> 36:06.520
又花了这么多时间了

36:06.520 --> 36:08.520
我们这期课把请求讲完吧

36:08.520 --> 36:10.520
下期课去讲这个想用

36:10.520 --> 36:12.520
请求体

36:12.520 --> 36:14.520
请求体的话

36:14.520 --> 36:16.520
就是自局地铁的内容了

36:16.520 --> 36:17.520
那么这个请求体的格式

36:17.520 --> 36:18.520
大家要注意

36:18.520 --> 36:20.520
一定要跟这个请求头里面

36:20.520 --> 36:23.520
content type的格式要一致

36:24.520 --> 36:26.520
就是content type是这种格式

36:26.520 --> 36:27.520
你要用这种写法

36:27.520 --> 36:29.520
content type是这种格式

36:29.520 --> 36:30.520
你要用这种写法

36:30.520 --> 36:32.520
这种格式我们现在暂时不用管

36:33.520 --> 36:35.520
那么请求体里面到底写啥

36:35.520 --> 36:36.520
我们一般来说

36:36.520 --> 36:38.520
要看那个接口文档

36:38.520 --> 36:39.520
要看文档的

36:40.520 --> 36:41.520
好比方说

36:41.520 --> 36:43.520
我们来举个例子

36:43.520 --> 36:45.520
我们到那个这里边

36:46.520 --> 36:47.520
我们来一个poster请求吧

36:47.520 --> 36:49.520
之前我们都有玩的是get请求

36:49.520 --> 36:50.520
来一个poster请求

36:50.520 --> 36:51.520
请求啥呢

36:51.520 --> 36:52.520
我们看一下吧

36:52.520 --> 36:53.520
来请求一个

36:53.520 --> 36:55.520
之前的接口文档打开一下

36:58.280 --> 37:00.280
来请求一个登录吧

37:06.300 --> 37:08.300
这里我们找个登录

37:08.300 --> 37:09.300
登录是一个

37:09.300 --> 37:10.300
你看这里

37:10.300 --> 37:11.300
看的文档

37:11.300 --> 37:12.300
这是什么意思

37:12.300 --> 37:13.300
表示我的请求

37:13.300 --> 37:14.300
应该是poster请求

37:14.300 --> 37:15.300
对吧

37:15.300 --> 37:16.300
那于是我们在这里怎么写

37:16.300 --> 37:18.300
首先把这里选中为poster

37:21.680 --> 37:22.680
把这个复制一下

37:22.680 --> 37:24.680
请求的路径复制一下

37:24.680 --> 37:28.380
好poster的请求

37:28.380 --> 37:29.380
那么我们这里

37:29.380 --> 37:30.380
要给他就是提交吧

37:30.380 --> 37:32.380
一般会有一些提交消息

37:33.380 --> 37:34.380
好首先他要求

37:34.380 --> 37:35.380
我的head里面

37:35.380 --> 37:36.380
有一个content type

37:36.380 --> 37:37.380
为这个指

37:37.380 --> 37:38.380
说明啥

37:38.380 --> 37:40.380
说明我请求的消息格式

37:40.380 --> 37:43.380
就请求的请求体里面的格式

37:43.380 --> 37:45.380
应该是接上格式

37:45.380 --> 37:47.380
那么请求头里面

37:47.380 --> 37:51.380
是不是可以加上content type

37:51.380 --> 37:53.380
等于什么IP的K型

37:53.380 --> 37:54.380
节省

37:54.380 --> 37:55.380
不过这个玩意了

37:55.380 --> 37:56.380
一般来说

37:56.380 --> 37:58.380
poster卖的工具

37:58.380 --> 37:59.380
它会根据你的请求体

37:59.380 --> 38:01.380
自动给你加

38:01.380 --> 38:02.380
自动给你加

38:02.380 --> 38:03.380
让手动加上也可以

38:03.380 --> 38:05.380
不加的话会自动给你加

38:07.380 --> 38:08.380
好然后呢

38:08.380 --> 38:09.380
包底里看

38:09.380 --> 38:10.380
要看懂接口文档啊

38:10.380 --> 38:12.380
我们学这些东西的

38:12.380 --> 38:13.380
最终的目的

38:13.380 --> 38:14.380
都是为了看懂这个文档

38:14.380 --> 38:15.380
包底是什么意思

38:15.380 --> 38:16.380
表示请求体里面

38:16.380 --> 38:18.380
你应该传递啥

38:18.380 --> 38:19.380
传递两个数据

38:19.380 --> 38:20.380
一个是login id

38:20.380 --> 38:21.380
账号一个是密码

38:21.380 --> 38:23.380
好那我怎么来传递呢

38:23.380 --> 38:24.380
我的格式是接上格式

38:24.380 --> 38:26.380
那么我的有两个数据

38:26.380 --> 38:27.380
需要传递

38:27.380 --> 38:28.380
那我怎么传递

38:28.380 --> 38:29.380
这里看

38:29.380 --> 38:30.380
这里有包底

38:30.380 --> 38:31.380
那么这里呢

38:31.380 --> 38:32.380
我们选中

38:32.380 --> 38:33.380
你看有很多种格式啊

38:33.380 --> 38:35.380
不同的格式的包底

38:35.380 --> 38:36.380
那么这里选中

38:36.380 --> 38:37.380
row原式格式

38:37.380 --> 38:39.380
这里选择接上

38:41.380 --> 38:42.380
然后我们在这里

38:42.380 --> 38:43.380
就可以写了

38:43.380 --> 38:44.380
因为接上格式

38:44.380 --> 38:45.380
大家都知道怎么写的吧

38:45.380 --> 38:46.380
login id

38:46.380 --> 38:47.380
属性名

38:47.380 --> 38:49.380
全部加上双引号

38:49.380 --> 38:51.380
账号随便写个账号吧

38:51.380 --> 38:53.380
二的密码

38:53.380 --> 38:55.380
login password

38:56.380 --> 38:57.380
一二三一二三

38:57.380 --> 38:58.380
随便下写吧

38:58.380 --> 38:59.380
我也不知道这么正确啊

38:59.380 --> 39:02.380
然后发送请求

39:02.380 --> 39:04.380
哎我还登录成功了啊

39:04.380 --> 39:05.380
下面就表示我登录成功了

39:05.380 --> 39:08.380
如果说账号密码不正确的话

39:08.380 --> 39:10.380
他就告诉我密码不正确

39:11.380 --> 39:12.380
懂了意思吗

39:12.380 --> 39:13.380
就这么个意思啊

39:13.380 --> 39:14.380
那么这个请求发出去了

39:14.380 --> 39:15.380
其实呢

39:15.380 --> 39:16.380
我们也可以在那个

39:16.380 --> 39:18.380
postman里面可以查看啊

39:18.380 --> 39:19.380
点击上面的view

39:19.380 --> 39:22.380
view下边有一个

39:22.380 --> 39:23.380
这个

39:23.380 --> 39:24.380
这个

39:24.380 --> 39:26.380
show postman console

39:26.380 --> 39:31.900
这有点像浏览器的调试控制台

39:31.900 --> 39:36.110
你看我们刚才发出了几个请求

39:36.110 --> 39:37.110
这里就出现了

39:37.110 --> 39:38.110
我们最后一次

39:38.110 --> 39:40.110
请求的是一个post的请求

39:42.110 --> 39:44.110
他会能看清楚吗

39:44.110 --> 39:47.940
放大一点

39:47.940 --> 39:49.940
最后一个是个post的请求

39:49.940 --> 39:50.940
我们请求头里面

39:50.940 --> 39:51.940
是没有content type

39:51.940 --> 39:52.940
aptk性节省

39:52.940 --> 39:53.940
他自动给我们加的

39:53.940 --> 39:54.940
因为他发现了

39:54.940 --> 39:55.940
我们的请求体里面

39:55.940 --> 39:56.940
是那个

39:56.940 --> 39:58.940
是一个阶层格式

39:58.940 --> 39:59.940
然后呢这下边你看

39:59.940 --> 40:01.940
request body

40:01.940 --> 40:02.940
是不是请求体

40:02.940 --> 40:03.940
请求体里面

40:03.940 --> 40:04.940
这是我们是不是

40:04.940 --> 40:05.940
我们发出的数据

40:06.940 --> 40:07.940
对吧

40:07.940 --> 40:08.940
他给你格式画了一下

40:08.940 --> 40:10.940
但是实际上

40:11.940 --> 40:12.940
他给你格式画

40:12.940 --> 40:13.940
为了方便你查看

40:13.940 --> 40:14.940
他实际上就是一个

40:14.940 --> 40:16.940
完整的字图串

40:16.940 --> 40:18.940
然后呢就是请求行

40:18.940 --> 40:19.940
然后呢下面是请求头

40:19.940 --> 40:20.940
有各种兼职队

40:20.940 --> 40:21.940
一大堆

40:21.940 --> 40:22.940
然后呢换一行

40:22.940 --> 40:24.940
然后这里是请求体

40:25.940 --> 40:27.940
他其实最终是连在一起的

40:27.940 --> 40:29.940
整个一起发到服务器了

40:29.940 --> 40:30.940
他只是在这里调试的时候

40:30.940 --> 40:32.940
为了便于你查看

40:32.940 --> 40:33.940
给你分开了

40:33.940 --> 40:34.940
他实际上是一起的

40:34.940 --> 40:35.940
实际上是一起的

40:35.940 --> 40:37.940
其实我们可以点这

40:37.940 --> 40:39.940
也可以看到他这里是一起的

40:39.940 --> 40:41.940
点哪呢

40:41.940 --> 40:42.940
看一下

40:42.940 --> 40:44.940
现在改版过了过后

40:45.940 --> 40:46.940
我还真不适应了

40:50.080 --> 40:51.080
你看

40:51.080 --> 40:52.080
这里选中adp

40:53.080 --> 40:54.080
你看

40:54.080 --> 40:56.080
是不是请求行

40:57.080 --> 40:58.080
请求头

40:58.080 --> 40:59.080
请求体

40:59.080 --> 41:00.080
他给你省略了

41:00.080 --> 41:01.080
他这里显示的时候

41:01.080 --> 41:02.080
给你省略了一些请求头

41:04.080 --> 41:05.080
那么意思吧

41:05.080 --> 41:06.080
好我们这一刻就讲到这吧

41:06.080 --> 41:08.080
我们把请求讲得很细

41:08.080 --> 41:09.080
讲完了

41:09.080 --> 41:10.080
下来之后

41:11.080 --> 41:12.080
第一件事

41:12.080 --> 41:13.080
在postman里边

41:13.080 --> 41:14.080
试一试

41:14.080 --> 41:15.080
给登录内里发一个

41:15.080 --> 41:16.080
post请求

41:17.080 --> 41:18.080
试一试

41:18.080 --> 41:20.080
随便传个招号密码

41:20.080 --> 41:21.080
主要是

41:21.080 --> 41:22.080
你要去阅读一下

41:22.080 --> 41:23.080
它的结构文档

41:23.080 --> 41:24.080
你看能不能读动

41:24.080 --> 41:25.080
下面那个备注

41:25.080 --> 41:26.080
我们先暂时不用管

41:26.080 --> 41:27.080
这是之后再说

41:27.080 --> 41:28.080
但是这里也得要能读懂

41:28.080 --> 41:29.080
header body

41:29.080 --> 41:30.080
要能读懂

41:31.080 --> 41:32.080
反回数据

41:32.080 --> 41:33.080
我们是想应的内容

41:33.080 --> 41:34.080
不用去管

41:34.080 --> 41:35.080
现在还不着急

41:35.080 --> 41:36.080
这是第一件事

41:36.080 --> 41:37.080
第二件事

41:37.080 --> 41:38.080
在postman里边去用一下

41:38.080 --> 41:39.080
用一下

41:39.080 --> 41:40.080
然后通过这个

41:41.080 --> 41:43.080
能不能在postman里边发送

41:43.080 --> 41:44.080
一个post请求

41:44.080 --> 41:45.080
我们打开那个

41:46.080 --> 41:47.080
postman的控制台

41:47.080 --> 41:48.080
来调试一下

41:48.080 --> 41:49.080
来观察一下

41:49.080 --> 41:50.080
它的请求头

41:50.080 --> 41:51.080
请求题

41:51.080 --> 41:52.080
好吧

41:52.080 --> 41:53.080
这就是这几颗的内容

41:53.080 --> 41:54.080
想应的话

41:54.080 --> 41:55.080
我们下几颗再说吧

41:55.080 --> 41:56.080
时间太长了

