WEBVTT

00:00.180 --> 00:07.140
好 这节课看这个目录就有点吓人之类

00:07.140 --> 00:11.860
实际上那种没有那么吓人 放松 首先放松

00:11.860 --> 00:16.660
因为这节课绝大部分东西是怎么说

00:16.660 --> 00:20.180
是属于凑个热闹 要了解

00:20.180 --> 00:24.020
其实对我们开发的影响的话 我这里总结了一下

00:24.020 --> 00:26.500
对我们开发的影响的话 就这么一二三四五

00:26.660 --> 00:30.500
一二三四五学会了也就ok了 不影响后边的工程

00:30.500 --> 00:34.100
不影响后边框架的学习 但是其他东西你一定要了解

00:34.100 --> 00:37.700
你完全不了解的话 你之后学习框架的时候

00:37.700 --> 00:40.660
很多东西搞不清楚位上 你只知道可以这样写

00:40.660 --> 00:43.460
但是不知道位上 所以说很多东西我们还是要了解

00:44.500 --> 00:50.100
工程化是一个很大的一个课题 但是这一次咱们的教学呢

00:50.100 --> 00:53.140
我们不会讲那么复杂 真正复杂的东西

00:53.140 --> 00:56.340
你看咱们玩正课程里边有一个课 叫做WAPI

00:56.340 --> 01:00.820
对不对 那个课里面呢 就会详细的介绍工程化

01:00.820 --> 01:03.940
所以我们不会讲那么复杂 但是呢 很多核心的东西呢

01:03.940 --> 01:09.620
你需要了解 我们上一节课呢 去讲了这个CSSS的工程化

01:09.620 --> 01:11.780
但是没有讲完 只是开了一个头

01:12.660 --> 01:16.740
应该说是摸到了一个工程化的尾巴 就是一个net代码

01:17.540 --> 01:20.980
我们可以舒舒服服的写net代码 写起来比CSSS要爽一些

01:21.620 --> 01:25.220
但是呢 这个代码呢 牛郎习不认识 所以说我们需要通过一个小工具

01:25.220 --> 01:30.020
把它编译成为纯正的CSSS 对吧 就是我们上一课学习的东西

01:30.020 --> 01:33.540
你会发现我们今天这个课啊 学下来

01:33.540 --> 01:36.100
好多东西呢 都跟这个差不多 原理都差不多

01:36.100 --> 01:40.980
你写舒舒服服写代码 然后呢 交给一个工具 还给你进行转换

01:42.100 --> 01:46.100
这就是什么工具呢 就是我们今天要讲的构建工具

01:46.180 --> 01:48.340
webpack 以后我们就会说stop

01:49.700 --> 01:53.220
之前呢 我是打算把类似讲完了之后呢

01:53.860 --> 01:56.660
再把这个工程化补充完 CSSS工程化补充完

01:56.660 --> 02:01.460
然后呢 再讲这个GS工程化 然后呢 再讲构建工具啊 一步一步推进

02:02.100 --> 02:04.180
后来我想了又想啊 我久久了很久

02:05.540 --> 02:10.100
与其这样子炖刀子割热 我还不如给里面来个痛快 直接一下子全部结束

02:10.100 --> 02:13.300
反正就是一天嘛 一天再怎么痛苦也全部结束

02:14.180 --> 02:16.580
然后呢 就可以过度到 直接过度到我们的框架了

02:16.580 --> 02:18.820
来做一些练习啊 明天我们再做一些练习

02:18.820 --> 02:21.780
然后就可以直接过度到框架了 我打算这么来弄

02:22.340 --> 02:26.580
试下来呢 我把这个文档写下来了 觉得这是可行的 没问题的

02:26.580 --> 02:29.620
好 我们就用这种方式来弄 里面学习要简单一点

02:30.820 --> 02:32.740
好 接下来我们来看第一句话

02:33.780 --> 02:36.660
工程化为复杂应用而生

02:37.620 --> 02:43.060
有的同学觉得 工程化给我们的开发带达到好多麻烦啊

02:43.060 --> 02:46.340
你看我之前 本来生活挺幸福的

02:46.340 --> 02:51.700
就写一个HMA页面 然后引用一个CSS 引用一个GSS 开始写代码

02:51.700 --> 02:55.380
挺舒服的 对不对 突然搞出来这么一大堆东西

02:56.180 --> 02:59.140
首先我告诉大家 你可能理解反了

02:59.140 --> 03:02.900
工程化呢 它不是来把问题变复杂的

03:02.900 --> 03:06.340
是因为问题本身就复杂 只是你看不见而已

03:06.820 --> 03:10.020
因为我们过去写的东西很简单 应用于简单

03:10.020 --> 03:13.140
很多东西就掩盖下去了 很多问题呢你就看不见

03:13.700 --> 03:16.900
但是问题一复杂了过后呢 很多东西就冒出来了

03:17.460 --> 03:21.780
一大堆问题就冒出来了 而工程化的目的是为了解决这些问题的

03:22.820 --> 03:24.820
所以说有的同学可能对工程化有误解

03:24.820 --> 03:28.420
好像是他把事情搞复杂了 不是 是因为事情本来就复杂

03:29.220 --> 03:31.540
他在尝试着去解决这些复杂的问题

03:32.660 --> 03:35.780
那么其中我们工程化这一块呢 主要就是学习这个位派

03:36.820 --> 03:37.300
就学习它

03:38.420 --> 03:41.940
有一些同学觉得为派个工程看上去看着他不懂

03:41.940 --> 03:43.460
然后里边内容也很多

03:44.100 --> 03:48.660
实际上呢 是过去的很多问题呢 我们前段开发者装作看不见

03:49.220 --> 03:50.740
也没有人去解决

03:50.740 --> 03:53.460
所以说呢 我们以前前段的就走不远

03:53.460 --> 03:55.300
他只能开发一些简单的应用

03:55.300 --> 03:57.220
当然呢 这个样子的前段工程师呢

03:57.220 --> 03:58.980
他的薪水待遇也不会太高

03:59.540 --> 04:01.300
因为他只能做一些简单的事情

04:01.300 --> 04:02.580
他的复杂问题解决不了

04:03.140 --> 04:05.460
所以很多前段开发者他装作看不见

04:05.540 --> 04:07.220
其实这些问题本来就是存在的

04:07.780 --> 04:10.020
只是呢 后来出了一些勾件工具

04:10.020 --> 04:11.220
其中就包括为派个

04:11.620 --> 04:12.740
他不能适合不见了

04:12.740 --> 04:13.620
你们都散开

04:14.740 --> 04:17.460
你们就天天当妥了 装作看不见问题

04:17.860 --> 04:19.380
我就把这些问题给你暴露出来

04:19.380 --> 04:20.500
这些问题是存在的

04:20.500 --> 04:21.940
只是你们不解决而已

04:21.940 --> 04:22.980
好 我就来解决

04:22.980 --> 04:24.020
你们都不懂 那我来动

04:24.500 --> 04:25.620
就出来这么一个东西

04:26.340 --> 04:28.340
好 我们今天这个课程里边学习的过程中

04:28.340 --> 04:29.460
那里面可以体会到

04:29.460 --> 04:30.900
他到底解决了哪些问题

04:31.380 --> 04:31.940
所以大家要

04:33.300 --> 04:34.660
心里边要有这么一个认识

04:35.380 --> 04:37.700
不是工程化把事情变复杂了

04:38.100 --> 04:39.780
是因为事情本身就复杂

04:39.780 --> 04:40.660
问题本来就多

04:40.660 --> 04:42.100
只是我们以前不解决

04:42.100 --> 04:43.460
看不见 装作看不见

04:44.740 --> 04:46.580
所以说把这个问题掩盖了

04:47.140 --> 04:48.420
但是一旦项目复杂了

04:48.420 --> 04:50.100
这些问题就越来越严重

04:50.100 --> 04:50.740
越来越严重

04:51.220 --> 04:52.180
你没有工程化

04:52.180 --> 04:53.380
这些问题很难解决

04:54.100 --> 04:55.220
好 所以第一句话

04:55.540 --> 04:57.220
工程化是为复杂应用的生

04:57.540 --> 04:58.260
有简单应用

04:58.260 --> 04:59.380
就你像做一个轮波图

04:59.380 --> 05:00.100
你要工程化吗

05:00.420 --> 05:02.020
你写个哈勒沃尔的要工程化吗

05:02.020 --> 05:02.580
不需要

05:02.900 --> 05:03.860
对吧 直接解决完事了

05:04.100 --> 05:05.620
但是事情一旦复杂了就麻烦了

05:07.140 --> 05:08.100
然后第二个点

05:08.100 --> 05:10.100
就是我们在今天的讲课的过程中

05:10.420 --> 05:11.220
为了保证

05:12.180 --> 05:13.460
你们学习的比较简单

05:13.460 --> 05:14.100
好理解

05:14.500 --> 05:15.940
所以说我牺牲了一些

05:15.940 --> 05:17.140
语言的准确性

05:17.140 --> 05:18.980
我没有那么在意准确性

05:20.260 --> 05:22.100
就是有些表达没有那么准确

05:22.100 --> 05:22.820
给大家说一下

05:22.820 --> 05:24.100
但是不影响大家的学习

05:24.340 --> 05:26.020
不影响大家后边框架的学习

05:26.260 --> 05:28.900
如果说你要获得更加准确的表述

05:30.100 --> 05:31.060
那就变得复杂了

05:31.060 --> 05:32.100
你可以去看一下咱们

05:32.820 --> 05:35.060
就是完整课程里边的

05:35.060 --> 05:35.700
vipack

05:36.420 --> 05:37.700
那我就讲了很多

05:37.700 --> 05:38.980
你可能学到要一个月

05:39.620 --> 05:40.660
好 我们这里呢

05:40.900 --> 05:41.620
一个个说

05:42.340 --> 05:43.540
我们这一课学到啥

05:43.540 --> 05:45.380
其实学的就是vipack构建工具

05:45.380 --> 05:46.580
就学的是这个构建工具

05:46.820 --> 05:49.540
它里边就涵盖了所有的工程化的东西

05:50.580 --> 05:52.260
它是一个工程化极大成者

05:52.740 --> 05:54.340
我们通过学习构建工具呢

05:54.340 --> 05:55.140
就能知道

05:55.140 --> 05:57.460
原来在复杂的项目里边

05:57.460 --> 05:58.500
原来有这么多问题

05:58.500 --> 05:59.860
我们以前的装作没看见

05:59.860 --> 06:01.460
或者是根本就不知道

06:01.780 --> 06:02.660
那么这个构建工具

06:02.660 --> 06:03.620
它把它提出来

06:03.620 --> 06:04.500
然后解决掉了

06:06.780 --> 06:08.540
好 首先我要知道这个vipack

06:08.540 --> 06:10.620
这个构建工具是用来干码的

06:10.620 --> 06:11.980
其实构建工具特别简单

06:11.980 --> 06:13.180
它就是来搭工程的

06:13.820 --> 06:15.260
搭出来一个什么样的工程呢

06:15.260 --> 06:15.980
我给大家看一下

06:17.100 --> 06:18.380
桌面上有个文件夹

06:18.380 --> 06:19.020
这个文件夹呢

06:19.020 --> 06:20.060
会到头回发给你们

06:20.700 --> 06:22.140
我们把它用vscode打开

06:23.580 --> 06:24.460
这就是一个工程

06:25.820 --> 06:26.300
看呗

06:27.100 --> 06:28.460
有一些乱七八糟的文件对吧

06:28.460 --> 06:29.900
这些文件慢慢给你解释

06:30.620 --> 06:31.500
我们这节课呢

06:31.580 --> 06:33.740
不需要学习你怎么去搭工程

06:34.300 --> 06:35.100
因为这以后呢

06:35.100 --> 06:35.900
里面在公司里边

06:36.540 --> 06:37.660
也不会有什么公司

06:37.660 --> 06:38.460
很少有公司

06:39.660 --> 06:41.340
让一个新手去搭工程

06:41.340 --> 06:42.380
这是很危险的事情

06:42.780 --> 06:43.740
他也不敢这样做

06:43.740 --> 06:44.300
所以说呢

06:44.300 --> 06:45.420
你们以后到的公司

06:45.420 --> 06:47.420
工程一定是先帮你打好的

06:48.380 --> 06:49.100
或者是以后呢

06:49.100 --> 06:50.780
我们用一些比较简洁的工具

06:50.780 --> 06:51.820
他自动帮你搭工程

06:51.820 --> 06:53.180
所以工程呢不需要你搭

06:53.740 --> 06:55.820
但是我们一定要会用这个工程

06:55.820 --> 06:57.180
那搭好了你不会用

06:57.180 --> 06:58.060
那就麻烦了

06:58.060 --> 06:59.260
你代码都不知道往哪里写

06:59.900 --> 07:00.940
怎么写代码都不知道

07:01.260 --> 07:02.140
所以我们这节课呢

07:02.140 --> 07:03.260
主要的学习

07:03.260 --> 07:05.580
就是这个工程已经给你打好了

07:05.580 --> 07:06.300
通过什么打的

07:06.300 --> 07:07.260
通过这个webpack

07:08.300 --> 07:09.340
通过这个玩意来打的

07:10.540 --> 07:11.420
打好了工程之后

07:11.420 --> 07:13.500
我们要学习怎么使用它

07:14.220 --> 07:15.740
这是我们这节课学习的重点

07:17.340 --> 07:18.140
我们再回到这

07:19.500 --> 07:20.140
webpack呢

07:20.140 --> 07:21.340
它是用来搭工程的

07:23.100 --> 07:23.500
它呢

07:23.500 --> 07:24.140
还有个特点

07:24.140 --> 07:25.980
它是运行在露的环境里边

07:26.940 --> 07:29.100
我们知道露的环境有什么样的特点

07:29.100 --> 07:30.300
它是不是可以读写文件

07:31.260 --> 07:31.660
所以说呢

07:31.660 --> 07:32.220
webpack呢

07:32.220 --> 07:34.380
它在为什么要运行在露的环境里边

07:34.380 --> 07:35.900
它就是为了读写文件

07:35.900 --> 07:38.140
就跟我们上节课学习的类似是一样的

07:38.140 --> 07:38.540
对吧

07:38.540 --> 07:39.260
一个小工具

07:39.260 --> 07:40.540
它在露的环境里边运行

07:40.540 --> 07:41.900
它可以把我们的类似代码

07:41.900 --> 07:42.860
转换成事业的代码

07:43.420 --> 07:44.700
那么露的要做的事情

07:44.700 --> 07:46.300
那个webpack要做的事情呢

07:46.300 --> 07:46.860
它更多

07:47.340 --> 07:48.140
它要做什么事呢

07:48.140 --> 07:48.860
下面一张图

07:49.420 --> 07:52.140
可以比较那个简洁的表达

07:52.140 --> 07:53.100
它在做的事情

07:53.740 --> 07:55.100
它就是把我们工程中

07:55.100 --> 07:56.780
一大堆的文件

07:56.780 --> 07:58.060
各种各样的文件

07:58.940 --> 07:59.740
进行压缩

08:00.220 --> 08:02.940
合并形成一扫量的文件

08:03.660 --> 08:04.940
那么整个过程呢

08:04.940 --> 08:05.500
叫做打包

08:06.940 --> 08:08.540
这个玩意儿就是webpack

08:08.540 --> 08:09.340
它的logo

08:09.900 --> 08:11.260
它可以把我们一大堆文件

08:11.260 --> 08:12.620
你看这里边包含GS

08:12.620 --> 08:13.900
包含GS

08:13.900 --> 08:14.700
包含MP3

08:15.340 --> 08:16.380
各种支援文件

08:16.380 --> 08:17.500
包含图片

08:17.500 --> 08:18.300
包含列室

08:18.300 --> 08:19.260
包含CSS

08:19.260 --> 08:19.980
包含NTM

08:20.460 --> 08:22.140
包含各种各样的东西

08:22.140 --> 08:23.100
然后把这一坨

08:24.540 --> 08:25.180
进行打包

08:25.820 --> 08:26.940
打包结果呢

08:26.940 --> 08:28.700
就变成了扫量的

08:28.780 --> 08:30.300
经过压缩的文件

08:30.300 --> 08:31.100
就这么简单

08:31.820 --> 08:32.940
这是webpack做的事情

08:33.340 --> 08:34.620
那么我们这一课呢

08:34.620 --> 08:35.420
学习的就是

08:35.420 --> 08:36.860
它怎么去打包的

08:36.860 --> 08:38.380
哪些会给我们开发

08:38.780 --> 08:39.420
造成影响

08:41.260 --> 08:42.620
好那么具体来说的话

08:42.620 --> 08:43.660
它怎么来打包呢

08:43.660 --> 08:44.380
具体来说

08:44.380 --> 08:47.100
它是以某个模块

08:48.060 --> 08:48.940
作为入口

08:49.820 --> 08:50.460
啥意思呢

08:50.460 --> 08:51.020
比方说

08:51.020 --> 08:52.300
也计这个GS

08:52.780 --> 08:53.580
作为一个入口

08:54.620 --> 08:56.220
然后根据入口呢

08:56.220 --> 08:58.380
分析出模块的依赖关系

08:58.460 --> 08:59.340
我们先看一下

08:59.340 --> 09:00.300
然后给它演示

09:01.100 --> 09:02.300
然后依赖关系分析出来了

09:02.300 --> 09:03.340
就变成这样子了

09:03.340 --> 09:04.140
你看

09:04.140 --> 09:06.460
我这个GS依赖一个图片

09:07.100 --> 09:08.620
有一种觉得很奇怪

09:08.620 --> 09:10.220
GS怎么能依赖图片呢

09:10.220 --> 09:10.700
不着急

09:10.700 --> 09:11.260
我们一会看

09:11.740 --> 09:12.140
然后呢

09:12.140 --> 09:14.140
这个NTM又依赖这个图片

09:14.140 --> 09:14.460
然后呢

09:14.460 --> 09:16.060
这个GS又依赖这个GS

09:16.460 --> 09:17.180
然后这个GS呢

09:17.180 --> 09:18.300
又依赖各种各样的东西

09:18.300 --> 09:19.420
是不是形成了一大堆东西

09:19.900 --> 09:20.860
然后把这些东西呢

09:20.860 --> 09:21.740
进行合并打包

09:22.940 --> 09:24.140
合并压缩

09:24.700 --> 09:26.460
形成最终的打包结果

09:27.420 --> 09:29.500
有的人可能会有疑问啊

09:29.500 --> 09:32.060
就是说我们这个图片怎么是模块呢

09:32.620 --> 09:34.620
这个央视文件怎么是模块呢

09:34.620 --> 09:35.100
对吧

09:35.100 --> 09:36.620
我们之前说的模块都是GS模块

09:36.620 --> 09:37.340
对不对

09:37.340 --> 09:38.140
注意

09:38.140 --> 09:39.740
在WIPIKE的世界里边

09:39.740 --> 09:41.740
一切都是模块

09:41.740 --> 09:43.260
随便的啥东西

09:43.260 --> 09:45.100
你一个MP3

09:45.100 --> 09:45.980
你一个MP4

09:45.980 --> 09:46.540
你一个视频

09:46.540 --> 09:47.180
一个音频

09:47.180 --> 09:48.060
一个央视文件

09:48.060 --> 09:48.860
一个图片

09:48.860 --> 09:49.900
全都是模块

09:49.900 --> 09:51.500
它把一切视为模块

09:52.700 --> 09:54.860
那模块在WIPIKE的世界里边

09:55.180 --> 09:57.180
它表达的是什么意思呢

09:57.180 --> 09:58.300
表达的就是

09:58.300 --> 10:00.140
我一个项目里边要用到了一个东西

10:00.780 --> 10:02.540
它无论是介绍代码还是ATM

10:02.540 --> 10:04.060
还是CS都上的模块

10:04.700 --> 10:04.940
好

10:04.940 --> 10:06.380
咱们来体验一下

10:07.500 --> 10:08.460
体验一下WIPIKE

10:08.460 --> 10:09.660
它是怎么来打包的

10:11.660 --> 10:12.140
这里呢

10:12.140 --> 10:14.860
我给大家看到这个工程

10:14.860 --> 10:16.380
这工程里边有很多的依赖

10:16.860 --> 10:18.380
它是运行在漏洞环境里边的

10:19.020 --> 10:19.580
有很多依赖

10:19.580 --> 10:21.020
所以说我们第一步要做什么呢

10:21.020 --> 10:22.460
第一步要安装依赖

10:23.420 --> 10:23.660
好

10:23.660 --> 10:24.140
大家呢

10:24.140 --> 10:25.180
跟着我做

10:25.180 --> 10:25.900
我做一步呢

10:25.900 --> 10:27.180
你们跟着做一步

10:27.180 --> 10:28.220
打开控制台

10:28.220 --> 10:30.220
然后在这里输入NPMI

10:31.180 --> 10:31.820
安装依赖

10:32.940 --> 10:33.900
这边依赖特别多

10:39.040 --> 10:39.360
好了

10:40.240 --> 10:40.960
安装好了

10:40.960 --> 10:41.520
依赖过后

10:41.520 --> 10:42.240
让我们这里刷新一下

10:42.240 --> 10:43.520
你看这一个漏洞环境

10:44.000 --> 10:45.120
你看这里边东西特别多

10:45.120 --> 10:45.920
一大堆东西

10:46.560 --> 10:47.440
那么这些东西呢

10:48.080 --> 10:50.560
都是运行在漏洞环境里边的

10:51.120 --> 10:52.400
它做什么来做打包的

10:52.400 --> 10:54.160
因为只有漏洞环境才能读写文件

10:54.880 --> 10:55.120
好

10:55.200 --> 10:56.560
接下来我们来给它演示一下

10:56.880 --> 10:57.840
它怎么来打包的

10:59.200 --> 11:01.840
这里我们需要属一的编写多个模块

11:01.840 --> 11:02.640
怎么编写

11:02.880 --> 11:03.920
大家看到这个漏洞没

11:04.400 --> 11:06.960
SRC表示什么

11:08.720 --> 11:11.600
表示Source Code原代嘛

11:12.480 --> 11:12.880
它会

11:12.880 --> 11:14.480
这个SRC它会对应什么呢

11:14.480 --> 11:15.280
它就会对应这个

11:17.570 --> 11:17.970
看前面

11:18.850 --> 11:19.730
它就会对应这个

11:22.860 --> 11:23.180
这里

11:24.220 --> 11:25.660
这个SRC这个漏洞

11:27.340 --> 11:28.620
这里边的所有东西

11:29.260 --> 11:29.980
就对应到

11:30.780 --> 11:32.140
我们的这一块东西

11:32.620 --> 11:34.860
就是我们需要进行打包的东西

11:35.180 --> 11:36.380
不管你是图片啊

11:36.380 --> 11:37.260
还是GS啊

11:37.260 --> 11:38.780
还是各种资源文件

11:38.780 --> 11:39.740
还是样式

11:39.740 --> 11:41.580
全部放到这个SRC目录里边

11:42.140 --> 11:43.020
原来的意思吧

11:43.020 --> 11:43.980
这是这一点

11:43.980 --> 11:44.620
大家要知道

11:47.340 --> 11:48.140
好那么接下来

11:48.140 --> 11:49.260
我们来写一些模块

11:49.580 --> 11:51.260
这里边SRC里边有一个

11:51.900 --> 11:53.420
GS已经给你们放好了

11:53.420 --> 11:54.060
这个GS呢

11:54.060 --> 11:55.340
叫做Made.GS

11:57.100 --> 11:58.060
那么这个GS呢

11:58.060 --> 11:59.340
就是我们说的入口

12:00.860 --> 12:01.420
这个入口

12:01.420 --> 12:03.900
它会以这个GS作为入口来进行打包

12:04.300 --> 12:04.860
啥意思呢

12:04.860 --> 12:05.820
给大家看一下啊

12:05.820 --> 12:07.340
我们这里随意的编写一些模块

12:07.340 --> 12:09.100
比方说我们这里写个A点GS

12:11.260 --> 12:11.740
这里边呢

12:11.740 --> 12:13.340
我们导出一个Export

12:13.740 --> 12:14.300
Defort

12:17.810 --> 12:18.290
A

12:19.490 --> 12:19.810
然后呢

12:19.810 --> 12:20.930
再写一个B点GS

12:22.690 --> 12:23.010
然后呢

12:23.010 --> 12:26.130
这里我们导出一个B

12:27.330 --> 12:27.650
好

12:27.650 --> 12:29.250
接下来我们再写Made.GS

12:29.250 --> 12:29.810
Made.GS呢

12:29.810 --> 12:33.470
我们导入A

12:33.470 --> 12:34.030
Front

12:35.870 --> 12:36.910
ImportB

12:39.470 --> 12:39.630
好

12:39.630 --> 12:42.670
我们输出A和B

12:43.230 --> 12:44.110
就这么简单

12:44.110 --> 12:44.830
几句代吧

12:44.830 --> 12:45.230
写完

12:45.870 --> 12:47.630
那么现在我们这里是不是有三个模块

12:48.190 --> 12:50.350
它会以这个Made.GS作为入口

12:51.310 --> 12:52.510
找到一代关系

12:52.510 --> 12:53.550
这个GS一代谁

12:53.550 --> 12:54.670
一代A和B

12:54.670 --> 12:55.550
那么A和B

12:55.550 --> 12:56.590
没有其他一代了

12:56.590 --> 12:56.990
对吧

12:56.990 --> 12:58.190
那么它就会发现

12:58.590 --> 12:59.550
以这个为入口

12:59.550 --> 13:00.990
它会找到三个模块

13:01.070 --> 13:01.790
A和B

13:02.990 --> 13:03.950
和Made.GS

13:04.510 --> 13:05.550
然后接下来就是打包

13:07.470 --> 13:07.790
好

13:07.790 --> 13:08.590
接下来打包的话

13:08.590 --> 13:09.710
我们打开我们的控制台

13:10.350 --> 13:11.950
只需要输入这么一个命令

13:11.950 --> 13:14.270
叫做npmronbuild

13:14.270 --> 13:15.070
那么也就是说

13:15.070 --> 13:15.710
那这个命令呢

13:15.710 --> 13:17.230
我是在Packy点接上里面

13:17.230 --> 13:18.350
给大家配置好的

13:19.550 --> 13:19.950
在这

13:20.670 --> 13:21.470
build

13:21.470 --> 13:22.510
它实际上运行的是

13:22.510 --> 13:23.230
Webpack的命令

13:23.790 --> 13:23.950
好

13:23.950 --> 13:24.910
我们来运行这个命令

13:26.270 --> 13:26.670
运行

13:29.360 --> 13:29.680
好

13:29.680 --> 13:30.400
打包完成

13:31.440 --> 13:32.800
打包完成过后呢

13:33.040 --> 13:34.400
大家看一下这个dash目录

13:35.040 --> 13:36.240
dash什么叫什么意思

13:36.240 --> 13:37.440
叫destination

13:37.440 --> 13:38.160
叫做目标

13:38.880 --> 13:39.840
这里边你看

13:40.480 --> 13:41.520
我们多了一个页面

13:42.320 --> 13:43.200
它自动生存的

13:44.160 --> 13:45.440
多了这么一个图标

13:45.440 --> 13:46.320
它自动生存的

13:46.880 --> 13:48.480
然而多了一个GS文件夹

13:49.760 --> 13:51.360
这个GS文件夹里边

13:51.360 --> 13:52.160
有一个GS

13:52.160 --> 13:53.120
这个东西不用看

13:53.120 --> 13:54.000
我一会会解释

13:54.640 --> 13:56.000
多了这么一个GS

13:56.000 --> 13:59.360
这个GS就是我们的打包结果

13:59.360 --> 14:00.480
你看打包结果

14:00.960 --> 14:01.680
它变成这样子

14:02.400 --> 14:03.520
它直接给你合并了

14:03.520 --> 14:04.880
变成了输出A合并

14:04.880 --> 14:06.000
因为我们这个运行出来

14:06.000 --> 14:06.800
不就是A合并

14:08.400 --> 14:09.440
导出A导出B

14:09.440 --> 14:10.560
然后输出A合并

14:10.560 --> 14:11.920
然后这边是导出A导出B

14:11.920 --> 14:13.440
所以说最终输出的就是A合并

14:13.440 --> 14:14.240
它是给你合并的

14:15.120 --> 14:16.800
那么整个过程来体验一下

14:17.520 --> 14:18.320
再回到这张图

14:18.320 --> 14:20.000
脑袋里边一定要有这张图

14:20.720 --> 14:22.000
这张图在做什么呢

14:22.000 --> 14:23.760
我们编写的原代码在哪

14:24.240 --> 14:25.840
我们编写的原代码在这

14:28.560 --> 14:29.920
在src目图

14:29.920 --> 14:30.400
对吧

14:30.400 --> 14:31.280
那么对应到这边

14:32.640 --> 14:34.640
然后呢通过Waypack的打包

14:34.640 --> 14:37.040
怎么打包的npmronbuild

14:39.460 --> 14:40.100
换个颜色

14:40.740 --> 14:42.100
npmronbuild

14:42.100 --> 14:43.060
所以通过这个来打包

14:43.780 --> 14:45.620
然后打包完成之后

14:45.620 --> 14:46.660
它就变成了这个目录

14:49.890 --> 14:51.490
它就变成了这个dash目录

14:52.210 --> 14:53.570
dash就是我们打包的结果

14:54.210 --> 14:55.250
你看看整个过程

14:56.210 --> 14:57.890
简单理解就是这么一个回双

14:57.890 --> 14:59.330
我们在src目录里边

14:59.330 --> 15:00.450
写我们的原代码

15:00.450 --> 15:01.970
这代码写写的都非常舒服

15:01.970 --> 15:04.610
可以用进各种我们先进的东西

15:04.610 --> 15:05.410
随便写

15:05.490 --> 15:07.490
不用考虑谁怎么兼容性问题

15:07.490 --> 15:08.050
随便写

15:08.690 --> 15:10.370
写完了过后交回Waypack

15:10.370 --> 15:11.410
它打包完了过后

15:11.410 --> 15:13.330
就是一个非常非常干净的

15:13.970 --> 15:15.570
一个非常非常传统的

15:16.530 --> 15:17.810
页面解释

15:18.930 --> 15:19.650
明儿的意思吧

15:19.650 --> 15:19.890
好

15:20.450 --> 15:21.330
大家体验一下

15:21.330 --> 15:22.050
跟着我做一次

15:22.050 --> 15:23.250
随便写几个模块

15:23.250 --> 15:24.450
然后来运行打包命令

15:24.450 --> 15:25.650
观察一下这个dash目录

15:27.170 --> 15:27.570
好了没

15:28.130 --> 15:29.410
好那么我们接着来

15:29.410 --> 15:30.130
多体验一下

15:31.890 --> 15:32.770
好接下来

15:32.770 --> 15:33.970
我们现在再来做一些

15:33.970 --> 15:35.170
有意思的事情

15:35.570 --> 15:36.530
有同学说

15:36.530 --> 15:37.570
那没有样式

15:37.570 --> 15:38.930
那我样式写哪呢

15:39.330 --> 15:40.690
好接下来我们在src里边

15:40.690 --> 15:41.570
建一个样式

15:41.970 --> 15:43.410
这个样式我们直接用ness

15:43.970 --> 15:45.330
好这边我们写一个

15:45.330 --> 15:46.530
index.ness

15:47.170 --> 15:48.210
我们这里写个body

15:49.490 --> 15:50.210
background

15:51.490 --> 15:53.330
来一个008c8c

15:53.810 --> 15:55.330
或者我们来测试一下

15:55.330 --> 15:56.530
这个ness的变量

15:57.410 --> 15:58.850
好了c就来

15:58.850 --> 16:02.210
随便来一个008c8c

16:02.770 --> 16:04.130
好这边我们使用这个变量

16:04.850 --> 16:06.050
这是个ness代码对不对

16:07.010 --> 16:08.450
好然后接下来我们写个color

16:08.450 --> 16:13.820
好接下来我们有了一个样式了

16:13.820 --> 16:14.940
我们再来打包一下

16:14.940 --> 16:16.460
看一下这个样式会不会过来呢

16:17.340 --> 16:18.780
大家试一下

16:18.780 --> 16:19.420
我先不做

16:19.420 --> 16:20.380
你们试一下

16:20.380 --> 16:21.660
建一个ness代码

16:21.660 --> 16:23.420
然后再重新打包

16:23.420 --> 16:24.700
看一下样式会不会过去

16:26.380 --> 16:26.780
好了没

16:27.500 --> 16:28.380
发现什么

16:28.380 --> 16:30.220
所以发现这个样式没有过去

16:32.900 --> 16:34.020
所以没有过去

16:34.020 --> 16:35.300
为什么没有过去

16:35.380 --> 16:37.460
是因为它没有形成依赖关系

16:37.460 --> 16:38.340
它的入口是什么

16:38.340 --> 16:39.700
入口是MediaJS

16:39.700 --> 16:40.740
MediaJS依赖谁

16:40.740 --> 16:41.540
依赖A和B

16:42.340 --> 16:43.300
A和B没有依赖了

16:43.300 --> 16:44.980
所以说它最终打包的就是

16:44.980 --> 16:45.540
它

16:45.540 --> 16:46.020
它

16:46.020 --> 16:46.500
它

16:46.500 --> 16:47.220
是不是没有它

16:47.700 --> 16:49.140
因为它没有形成依赖关系

16:49.700 --> 16:50.660
比较的意思吧

16:50.660 --> 16:51.620
那我们怎么办呢

16:51.620 --> 16:52.740
我们只需要给它形成

16:52.740 --> 16:53.940
依赖关系就行了

16:53.940 --> 16:55.540
比方说MediaJS里面可以导入它

16:56.100 --> 16:57.700
B.JS里面也可以导入它

16:57.700 --> 16:58.740
比方说我们随便导入吧

16:58.740 --> 17:00.340
我们就在MediaJS里面导入

17:00.340 --> 17:01.060
导入这个

17:01.620 --> 17:03.060
是不是感觉有点奇怪

17:03.060 --> 17:03.460
对不对

17:05.810 --> 17:06.850
因为这个是Dialese

17:08.530 --> 17:10.450
看来CSS代码也可以当成模块

17:10.450 --> 17:10.850
导入

17:11.410 --> 17:12.610
有时候就很奇怪了

17:12.610 --> 17:13.650
哎老师啊

17:13.650 --> 17:16.770
你之前讲那个CommonJS也好

17:16.770 --> 17:18.850
还有就是ES module也好

17:19.490 --> 17:21.170
都是JS代码

17:21.170 --> 17:22.210
难道央视代码

17:22.210 --> 17:23.970
它们也支持作为模块吗

17:24.770 --> 17:25.890
实际上是不支持的

17:26.610 --> 17:28.210
无论是Node环境

17:28.210 --> 17:29.730
还是浏览器环境

17:29.730 --> 17:30.530
它都不支持

17:30.530 --> 17:32.370
它央视文件作为模块

17:32.370 --> 17:33.410
都不支持

17:33.410 --> 17:34.530
但是你要知道

17:35.170 --> 17:37.490
这个代码是不是我们最终运行的代码

17:38.610 --> 17:39.330
不是哦

17:39.890 --> 17:42.290
这个代码就跟我们上节课学校的Nese是一样

17:42.290 --> 17:43.650
我们写的Nese要运行吗

17:43.650 --> 17:44.370
不运行啊

17:45.250 --> 17:46.290
它是用来打包

17:46.290 --> 17:47.650
它是用来编译的

17:47.650 --> 17:49.810
它编译成的结果是CSS

17:49.810 --> 17:51.170
那个CSS才会运行

17:51.650 --> 17:53.090
也就是我们这里的代码

17:53.090 --> 17:55.730
整个SRC这个目录啊

17:55.730 --> 17:57.170
它是不参与运行的

17:57.970 --> 17:58.770
它是会交

17:58.770 --> 18:00.130
整个目录会交给什么

18:00.130 --> 18:01.410
交给这个Webpack

18:01.410 --> 18:02.690
让它进行打包

18:02.690 --> 18:04.450
打包了结果了就是这个

18:04.530 --> 18:06.610
那么这个就相当于是在这个Nese目录

18:06.610 --> 18:07.970
最终我们运行的是它

18:09.010 --> 18:10.050
明白这个意思吧

18:10.050 --> 18:11.570
所以说你这个代码

18:11.570 --> 18:12.930
在最终的这个Nese目录里的

18:12.930 --> 18:14.130
肯定是变化了

18:14.130 --> 18:15.330
不存在了

18:15.330 --> 18:16.450
我们在原代码里

18:16.450 --> 18:18.130
只是来表明它的一代关系

18:18.770 --> 18:19.970
好好体会一下

18:19.970 --> 18:21.650
我们运行的不是这个目录

18:21.650 --> 18:22.290
运行的是它

18:23.490 --> 18:25.170
好 接下来我们再来看

18:25.890 --> 18:26.930
NTM装备

18:27.570 --> 18:28.290
打包看一下吧

18:30.980 --> 18:32.260
哎 这样打包完了过后

18:32.260 --> 18:34.020
你看是被多了个CSS

18:34.660 --> 18:35.300
看一下吧

18:35.460 --> 18:37.540
里边是不是一个Made这个CSS

18:37.540 --> 18:40.180
那么这个CSS里边是不是变成那个纯粹的CSS代码

18:40.820 --> 18:42.020
然后我们再看GS

18:42.020 --> 18:43.620
GS里边还有这个代码吗

18:43.620 --> 18:44.260
就没了

18:44.660 --> 18:46.260
它又是不是给你消除掉了

18:46.660 --> 18:46.980
对不对

18:46.980 --> 18:48.660
它发现你这个导入的CSS

18:48.660 --> 18:49.940
它只是表明一代关系

18:49.940 --> 18:51.780
你并不会怎么样的

18:52.340 --> 18:54.420
所以说这个代码在最终的打包结果里边

18:54.420 --> 18:55.140
是不存在的

18:55.140 --> 18:55.940
所以说不用担心

18:56.340 --> 18:58.820
打包结果里边是一个非常非常传统的

19:00.020 --> 19:03.140
我们的样式GS然后页面

19:03.140 --> 19:04.260
非常传统的工程

19:04.340 --> 19:06.260
那么我们可以运行一下打包结果

19:06.260 --> 19:07.460
你比如说我们在

19:08.260 --> 19:09.940
在这里边通过VSCode打开

19:11.060 --> 19:11.860
先开个窗口

19:12.580 --> 19:14.260
然后这里边我们用DV-12来运行

19:17.140 --> 19:17.460
你看

19:18.020 --> 19:19.940
就是一个非常非常传统的工程

19:19.940 --> 19:21.540
所以说我们这里可以体验到

19:21.540 --> 19:23.140
这个VPAC它在做什么呀

19:23.140 --> 19:26.020
它就是让我们写代码写得更加舒服

19:26.580 --> 19:28.580
用它的这种方式来书写代码

19:29.540 --> 19:31.220
可以更加细分模块

19:31.860 --> 19:34.820
然后它最终会根据我们的ASRC目录进行打包

19:34.820 --> 19:36.180
打包成了一个最终的结果

19:36.340 --> 19:37.540
而这个最终结果呢

19:38.500 --> 19:39.940
就是一个已经压缩了

19:39.940 --> 19:41.300
你看那代码全部压缩过后了

19:41.860 --> 19:43.140
这代码全都是压缩过后的

19:43.140 --> 19:44.500
刚才我已经格式化了

19:44.500 --> 19:46.100
没格式化的话就是压缩过后的

19:47.140 --> 19:48.980
它把这些代码压缩合并

19:48.980 --> 19:51.540
然后形成一个非常非常传统的工程

19:52.020 --> 19:54.340
于是呢将来我们只需要

19:54.340 --> 19:56.820
舒舒服服的在ASRC目录里边写原代码

19:57.540 --> 19:59.060
写完了过后一打包

19:59.060 --> 20:00.500
就是我们最终需要的东西了

20:01.140 --> 20:02.100
明儿的意思吧

20:02.100 --> 20:03.140
这就是VPAC做的事情

20:03.940 --> 20:06.100
好刚才我们是不是来体验一下

20:06.100 --> 20:07.380
写个样式文件

20:07.380 --> 20:08.660
那么来看一下最终打包

20:08.660 --> 20:09.940
来看一下最终的输出结果

20:11.860 --> 20:14.420
好 接下来我们还有一些可以跟玩的东西更多

20:14.420 --> 20:15.780
比如说我们可以有一个图片

20:16.580 --> 20:17.220
图片放哪儿了

20:17.220 --> 20:18.820
比方说我们这里找一个图片吧

20:18.820 --> 20:19.620
就这张图片吧

20:20.260 --> 20:21.860
你们可以在网上找任何一张图片

20:23.540 --> 20:24.980
随便找一个把Adder PNG

20:26.100 --> 20:28.420
好 我们把Adder PNG放到我们的工程里边

20:30.580 --> 20:32.180
好 接下来图片你看

20:32.180 --> 20:33.380
它也是一个模块

20:33.380 --> 20:34.900
我们只需要导入图片

20:38.130 --> 20:39.170
Adder PNG

20:40.050 --> 20:42.050
然后呢 再来运行NPM装

20:46.430 --> 20:47.950
好 你看我们的输出目录

20:47.950 --> 20:49.550
是不是多了一个RCS文件夹

20:49.950 --> 20:51.950
这个文件夹里边是不是有一张我们的图片

20:52.510 --> 20:53.070
对不对

20:53.070 --> 20:55.070
所以图片它也会形成一代关系

20:55.070 --> 20:56.510
它也会生存到打包结果

20:57.150 --> 20:59.230
所以我们只需要将来我们开发

20:59.230 --> 21:01.470
只需要关心这个SRC目录就行了

21:01.470 --> 21:02.910
打包直接运行这个名领

21:02.910 --> 21:04.270
剩下的事情它全部给你搞定

21:04.990 --> 21:06.270
好 我们这几刻来再学习

21:06.270 --> 21:08.030
它打包的时候帮我们搞定哪些事情

21:08.910 --> 21:09.710
好 刚才体验

21:10.510 --> 21:12.350
看到了整个打包结果

21:12.350 --> 21:13.870
完成了整个编写代码

21:13.870 --> 21:15.070
然后打包的过程

21:15.070 --> 21:16.590
然后呢 我们接下来总结一下

21:17.150 --> 21:18.990
通过我们刚才的这个体验呢

21:18.990 --> 21:20.190
我们可以发现呢

21:20.190 --> 21:21.950
WePike至少

21:22.510 --> 21:25.630
我们目前能看到的给我们带来的以下的好处

21:26.350 --> 21:26.910
什么好处呢

21:26.910 --> 21:30.830
第一个可以大胆的使用任意模块化标准

21:31.470 --> 21:32.110
这啥意思

21:32.990 --> 21:35.630
我们这里呢可以用ES6的模块化

21:35.630 --> 21:36.510
也可以用什么

21:36.510 --> 21:38.510
也可以用CommonJS的模块化

21:38.590 --> 21:39.070
都可以

21:40.110 --> 21:40.990
有意思吧

21:40.990 --> 21:41.790
我们来试一下

21:43.710 --> 21:44.110
打包

21:45.870 --> 21:47.070
你看没爆错吧

21:47.070 --> 21:48.190
然后第三模组里边

21:48.190 --> 21:49.470
CSS过来了吧

21:49.470 --> 21:50.750
CSS过来了吧

21:50.750 --> 21:51.070
对不对

21:51.710 --> 21:54.510
为什么我们可以两种模块化都可以使用呢

21:54.510 --> 21:56.990
当然我还是强烈建议你们使用ES模久

21:56.990 --> 21:57.950
毕竟是官方标准

21:59.070 --> 22:01.150
为什么两种模块化标准都可以使用呢

22:01.150 --> 22:04.030
是因为难道浏览器它就支持这个require吗

22:05.630 --> 22:06.830
是浏览器支持吗

22:06.830 --> 22:07.390
不是

22:08.830 --> 22:10.990
因为这个代码到最打包过后

22:11.550 --> 22:13.950
这些模块化语句全都没了

22:13.950 --> 22:15.550
全都被合并了

22:15.550 --> 22:16.430
你看这个介石

22:17.230 --> 22:19.390
里边多了一些代码啊

22:19.390 --> 22:21.550
你就看它里边有没有require就行了

22:21.550 --> 22:22.350
有没有require了

22:23.070 --> 22:23.550
没有吧

22:24.350 --> 22:25.230
说明啥

22:25.230 --> 22:26.990
说明我们做一个require

22:27.950 --> 22:28.750
这个东西

22:28.750 --> 22:30.670
它只在我们的元代里边有

22:31.470 --> 22:33.950
以打包过后就变成那个非常纯正的

22:33.950 --> 22:35.070
非常传统的

22:35.070 --> 22:36.670
就跟你们入门的时候

22:36.670 --> 22:38.030
觉得一些介石是一样的

22:39.070 --> 22:39.790
意思吧

22:39.790 --> 22:40.670
所以它可以

22:41.310 --> 22:42.110
无论浏览器

22:42.110 --> 22:44.430
它跟浏览器支不支持根本没有关系

22:44.430 --> 22:45.950
连这个代码都没了

22:45.950 --> 22:47.870
连这个ES6的模块化标准都没了

22:47.870 --> 22:49.470
到这个结果里边都没了

22:49.470 --> 22:50.190
它就合并了

22:51.390 --> 22:53.150
所以说我们这里大胆的使用

22:53.150 --> 22:54.190
任何的模块化标准

22:54.190 --> 22:55.950
不用担心任何接种性问题

22:55.950 --> 22:58.110
因为打包过后就根本就没有模块化语句了

22:58.910 --> 23:00.830
这第一个我们能够体验到的

23:00.830 --> 23:01.870
因为有些浏览器呢

23:01.870 --> 23:03.230
它版本比较旧的话

23:03.230 --> 23:05.870
因为模块化也是2015年出来的吧

23:05.870 --> 23:07.310
2015年之前的浏览器的话

23:07.470 --> 23:08.750
根本就不支持模块化

23:09.150 --> 23:09.630
所以说呢

23:10.350 --> 23:12.270
那这个如果说你直接的浏览器里边

23:12.270 --> 23:13.390
用这个ES module的话

23:13.390 --> 23:14.430
那肯定有些东西问题

23:14.990 --> 23:16.510
那更不要说这个康门介石了

23:17.070 --> 23:18.110
所以我们通过微拍

23:18.110 --> 23:18.910
可能就可以大胆的用

23:18.910 --> 23:20.110
因为它打包过后全没了

23:21.950 --> 23:22.590
第二个点呢

23:22.590 --> 23:24.510
我们可以将一些非介石代码

23:24.510 --> 23:25.790
也可以视为模块

23:25.790 --> 23:27.390
比方说像那个图片啊

23:27.390 --> 23:28.350
像那个NES啊

23:28.350 --> 23:29.950
看什么都可以视为模块

23:30.910 --> 23:31.630
那么这样子

23:31.630 --> 23:32.990
难道像这些文件

23:32.990 --> 23:35.310
我们也可以进行吸引力度的划分

23:35.310 --> 23:36.590
比方说像这些是文件

23:37.390 --> 23:39.310
我们比方说做一个顶部的菜单栏

23:39.310 --> 23:40.590
我们专门来写个CSS

23:41.470 --> 23:43.230
做一个中间的那个什么

23:44.510 --> 23:45.150
轮波图

23:45.150 --> 23:46.830
我们也可以专门来写个CSS

23:47.390 --> 23:48.350
当然也可以写NES

23:50.190 --> 23:51.390
以前不敢这样做

23:51.390 --> 23:52.430
因为以前这样

23:52.430 --> 23:54.030
现在CSS文件多了

23:54.030 --> 23:54.990
会导致这个什么结果

23:55.630 --> 23:57.550
会导致我们浏览器的传输次数

23:57.550 --> 23:58.990
会变多

23:58.990 --> 23:59.470
对吧

23:59.470 --> 24:00.270
有东西多了吗

24:00.270 --> 24:01.230
我每次要去拿一趟

24:01.230 --> 24:02.110
每次要去拿一趟

24:02.590 --> 24:04.590
这个传输效率就会变低

24:05.550 --> 24:07.470
但是我们现在有了WePackle之后

24:07.470 --> 24:08.590
不存在这样的问题了

24:08.590 --> 24:09.550
你随便分

24:09.550 --> 24:10.510
你随便切分多少个

24:10.510 --> 24:12.190
比方说我们占了一个NES代码

24:12.190 --> 24:13.310
AdderLess

24:13.310 --> 24:14.350
随便来一个啊

24:14.350 --> 24:17.630
这我们就写个Decoration

24:18.510 --> 24:19.310
随便写个

24:19.310 --> 24:20.990
然后呢媒体的监视里面去导入它

24:20.990 --> 24:22.590
当然也可以在别的监视里面导入

24:24.190 --> 24:25.550
AdderLess

24:26.590 --> 24:28.110
好再打包你看一下

24:28.110 --> 24:30.830
打包结果里面会有两个CSS文件吗

24:30.830 --> 24:31.470
不会

24:31.470 --> 24:32.750
它会进行合并

24:33.710 --> 24:36.860
你看还是只有一个

24:36.860 --> 24:38.300
你看这里边是两两

24:38.300 --> 24:38.860
对吧

24:38.860 --> 24:40.860
随说我们这里的就可以尽量的细分

24:40.860 --> 24:42.220
不用担心文件过多

24:42.220 --> 24:43.900
因为它最终打包过来过后了

24:43.900 --> 24:44.700
就没有几个文件

24:45.740 --> 24:46.860
那都是这个好处对吧

24:46.860 --> 24:48.140
所以我们可以对CSS

24:48.140 --> 24:49.980
甚至于图片的小资源

24:49.980 --> 24:51.900
进行更加细腻度的发动

24:53.340 --> 24:53.900
好

24:53.900 --> 24:54.940
然后第三个

24:54.940 --> 24:56.780
在前端开发中

24:56.780 --> 24:57.340
这个也很

24:57.340 --> 24:58.460
这个是超级厉害的

24:58.460 --> 25:00.220
在前端开发中

25:00.220 --> 25:01.900
我们也可以使用NPM

25:03.100 --> 25:04.220
啥意思

25:05.180 --> 25:07.180
以前我们要用解

25:07.180 --> 25:08.540
那个解query

25:08.540 --> 25:09.820
是不是要在页面上去写

25:09.820 --> 25:11.020
下载的节也是

25:11.020 --> 25:12.060
要在页面上去引用

25:12.060 --> 25:12.540
对吧

25:12.540 --> 25:14.060
后来学了NPM过后

25:14.060 --> 25:15.180
但是NPM下载的东西

25:15.180 --> 25:16.540
只能在漏的环境里面使用

25:17.260 --> 25:19.340
有的微派可就没问题了

25:19.340 --> 25:20.540
比方说我给他举个例子

25:21.020 --> 25:22.700
我这里去安装一个解query

25:23.820 --> 25:24.460
NPM

25:24.460 --> 25:24.940
解query

25:25.740 --> 25:27.820
解query肯定是放在NPM上的

25:28.460 --> 25:29.500
安装好了之后

25:29.500 --> 25:30.140
我怎么用呢

25:30.780 --> 25:32.140
我可以用这种方式

25:32.140 --> 25:33.020
保录解query

25:33.980 --> 25:35.900
把他放到一个变量里面

25:35.900 --> 25:36.860
叫做Dollar

25:36.860 --> 25:37.420
因为我们

25:37.420 --> 25:38.940
但是这个变量名字可以随便去

25:38.940 --> 25:40.380
我们只是习惯上

25:40.380 --> 25:41.820
把解query当作Dollar

25:41.820 --> 25:43.020
因为他现在

25:43.020 --> 25:44.540
他变成模块之后

25:44.540 --> 25:46.860
他就不会污染任何权娱变量了

25:48.220 --> 25:48.860
所以说呢

25:48.860 --> 25:50.540
我们这里的通过权娱变量去拿

25:50.540 --> 25:51.340
他肯定拿不到的

25:51.340 --> 25:52.700
我们只能保住他

25:52.700 --> 25:54.060
好我们来试着用这个Dollar

25:55.420 --> 25:57.100
去创建一个SE元素

25:57.980 --> 25:59.180
创建一个SE元素

25:59.180 --> 26:00.380
然后呢给他设置一个text

26:01.420 --> 26:02.060
Hello

26:02.060 --> 26:02.940
我也派

26:03.180 --> 26:04.140
大家跟着写一下

26:06.140 --> 26:07.260
安装解query

26:07.260 --> 26:07.900
创建一个

26:07.900 --> 26:09.500
通过解query创建一个SE元素

26:09.500 --> 26:10.380
给他设置一个文本

26:10.380 --> 26:11.580
然后夹到包点里面去

26:12.140 --> 26:12.620
Append

26:13.340 --> 26:13.660
To

26:15.980 --> 26:16.700
Balcumence

26:17.980 --> 26:18.940
Balcumence

26:20.140 --> 26:21.100
把夹到里面去

26:23.100 --> 26:23.660
好接下来

26:23.660 --> 26:24.220
我们来

26:24.220 --> 26:25.260
当中好像可以

26:25.260 --> 26:26.380
这里也可以蹲给这个

26:28.300 --> 26:29.820
好我们来试一下

26:29.820 --> 26:31.020
看一下行不行

26:31.020 --> 26:32.220
我们NPM装

26:33.420 --> 26:34.140
必有的达包

26:37.380 --> 26:38.420
好这里要稍微等一下

26:40.260 --> 26:41.620
好打包完了过后

26:42.740 --> 26:43.700
形成了个电视目录

26:43.700 --> 26:44.420
对吧

26:44.420 --> 26:45.140
有这么一个目录

26:45.860 --> 26:47.060
好这个目录里边

26:47.060 --> 26:48.340
我们看一下一个GS

26:48.340 --> 26:49.540
代码就超级多了

26:50.900 --> 26:52.420
对吧为什么代码变那么多了呢

26:53.940 --> 26:54.980
看着啊看这句话

26:55.700 --> 26:56.660
WeiPike呀

26:56.660 --> 26:58.420
他不会运行你的原代码

26:58.420 --> 26:59.700
所以说这个就这就解释了

26:59.700 --> 27:01.380
为什么我们可以写这样的语句

27:01.380 --> 27:02.820
这个语句是不会运行的

27:03.780 --> 27:06.180
因为无论你是自己写的模块

27:06.180 --> 27:07.700
你看刚才写的ADLGS

27:07.700 --> 27:09.380
还是BLGS那么自己写的模块

27:09.860 --> 27:11.540
还是用的是第三方模块

27:11.540 --> 27:12.580
也就是在load module

27:12.580 --> 27:13.780
使这个目录下面的模块

27:14.500 --> 27:16.740
都会被WeiPike一视同仁

27:16.740 --> 27:18.180
他认为从这个出发

27:18.180 --> 27:20.020
你依赖了他合并

27:20.020 --> 27:21.380
你依赖了他合并

27:21.380 --> 27:22.580
哎你依赖了他

27:22.580 --> 27:23.780
WeiPike就会

27:23.780 --> 27:24.980
就会从这里边去找

27:24.980 --> 27:26.260
把那个接query找到

27:26.820 --> 27:28.420
然后把这个接query里边的东西

27:28.420 --> 27:30.500
代码也跟你这个媒体解释合并

27:31.460 --> 27:33.220
通通视为一代

27:33.220 --> 27:34.740
我们ADLGS是一代

27:34.740 --> 27:35.460
他也是一代

27:35.460 --> 27:36.020
他也是一代

27:36.020 --> 27:36.580
他也是一代

27:36.580 --> 27:37.700
通通合并

27:37.700 --> 27:38.580
合并完了过后

27:38.580 --> 27:39.700
也就是我们那个GS为代码

27:39.700 --> 27:40.660
为什么变那么多

27:40.660 --> 27:42.420
就是因为这里边还有接query代码

27:42.420 --> 27:43.540
全部跟你合并在一起了

27:44.260 --> 27:46.020
因此我们到时候运行的时候

27:46.020 --> 27:47.940
运行的时候还需要这些东西吗

27:47.940 --> 27:49.380
我问一下大家一个问题

27:49.380 --> 27:51.060
运行的时候还需要这一坨吗

27:53.540 --> 27:54.420
还需要吗

27:54.420 --> 27:55.220
不需要了

27:55.220 --> 27:56.180
你怕是安排都可以

27:56.180 --> 27:57.140
那三段过后我们后面

27:57.140 --> 27:58.820
就没办法改代码了

27:58.820 --> 27:59.940
也不用说安排

27:59.940 --> 28:01.380
跟他就没关系了

28:01.380 --> 28:03.940
他就是一个非常普通的这个文件夹

28:03.940 --> 28:04.900
我们把它复制一下吧

28:04.900 --> 28:05.780
把它放到桌面上去

28:07.060 --> 28:08.900
我们再在通过杯子后的打开

28:09.620 --> 28:10.900
非常普通的一个文件夹

28:10.900 --> 28:12.180
然后运行

28:13.620 --> 28:15.380
你看是不是有了一个H1元素

28:15.380 --> 28:15.940
对吧

28:15.940 --> 28:17.140
所以他VPAC也生销了

28:17.140 --> 28:20.420
那个接query也生销了

28:20.420 --> 28:22.100
这是VPAC的作用

28:22.900 --> 28:23.460
能理解吧

28:24.580 --> 28:25.140
好所以说了

28:25.140 --> 28:27.060
我们之后开发是不是更加舒服了

28:27.060 --> 28:28.260
我们要用一些第三方库

28:28.260 --> 28:29.460
直接拼命下载下载关了

28:29.460 --> 28:30.740
过后直接导入用就完事了

28:31.540 --> 28:31.940
对不对

28:31.940 --> 28:34.340
就不用到处去找借也是带嘛

28:34.340 --> 28:35.700
到处去在页面上去引用了

28:35.700 --> 28:36.340
是不是舒服多

28:37.540 --> 28:38.900
然后到下一个点

28:38.900 --> 28:41.860
他非常适合开发单页应用

28:43.220 --> 28:43.940
什么叫单页应用

28:43.940 --> 28:45.140
给大家解释一下

28:45.140 --> 28:48.660
单页应用是目前前端的大趋势

28:48.660 --> 28:49.300
跑不了的

28:49.300 --> 28:51.140
你们以后99%的情况

28:51.140 --> 28:52.260
一定是开发单页应用

28:53.220 --> 28:54.020
什么叫单页应用

28:54.740 --> 28:57.460
单页应用是前端用户体验最好的外部应用

28:57.460 --> 28:58.740
你看我们以前那些应用

28:58.740 --> 28:59.540
好多应用都是

29:00.500 --> 29:01.860
有很多个页面对不对

29:01.860 --> 29:02.900
我点一下要刷

29:02.900 --> 29:03.940
把这个页面丢弃

29:03.940 --> 29:05.300
重新请求服务器

29:05.300 --> 29:06.420
重新刷新整个页面

29:07.060 --> 29:08.420
这是以前的做法

29:08.420 --> 29:09.300
什么叫单页应用呢

29:09.300 --> 29:10.260
就不刷新

29:10.260 --> 29:11.300
我只有一个页面

29:11.300 --> 29:12.500
从头到尾都只有一个页面

29:13.060 --> 29:14.500
因为他们所有东西

29:15.620 --> 29:16.980
全靠借也是生成

29:18.660 --> 29:19.700
比方说像这样子

29:19.700 --> 29:20.180
举个例子

29:20.180 --> 29:20.980
简单的例子就是

29:20.980 --> 29:21.940
因为他们啥东西没有

29:21.940 --> 29:23.380
我通过生成一个SE元素

29:23.940 --> 29:24.820
给它加进去

29:24.820 --> 29:26.340
就全靠借也是生成

29:26.820 --> 29:28.420
当然要实现单页应用的

29:28.420 --> 29:30.740
最好的是要依托于前端方向

29:31.300 --> 29:32.740
利用结构二的话就很麻烦了

29:33.700 --> 29:35.220
利用原设动物就更麻烦了

29:35.780 --> 29:37.060
比方说像VOR React

29:37.060 --> 29:38.260
他们都是来做单页应用的

29:38.260 --> 29:38.900
就通过他们

29:39.940 --> 29:41.060
页面上啥东西都没有

29:41.060 --> 29:42.340
全部有借也是来生成

29:43.700 --> 29:44.740
你要切换页面

29:44.740 --> 29:47.140
全就是借也是把这一坨动物扔掉

29:47.140 --> 29:48.820
来给你创建一堆新的动物

29:48.820 --> 29:49.460
也加上去

29:50.020 --> 29:50.820
就这么一回事

29:52.100 --> 29:52.500
好

29:52.500 --> 29:53.860
当然这个vpy可能

29:53.860 --> 29:54.820
它给我们带来的

29:54.820 --> 29:57.140
开发带来的变化远不止于此

29:57.140 --> 29:58.180
我们接下来一一体验

29:58.260 --> 30:00.260
那么到现在大家可以做一下练习

30:00.980 --> 30:02.500
首先导入几个GS模块

30:02.500 --> 30:05.380
导入一些CSS或者NES都可以

30:05.380 --> 30:06.500
导入一些图片

30:06.500 --> 30:08.020
然后导入一个第三方库

30:08.020 --> 30:08.900
比方说接垮位

30:08.900 --> 30:10.740
然后使用一下第三方库

30:10.740 --> 30:11.380
最后来打包

30:11.860 --> 30:13.700
打包完了过后形成一个打包结果

30:13.700 --> 30:14.580
把这个打包结果

30:15.140 --> 30:16.900
复制粘贴到任何其他地方

30:16.900 --> 30:18.180
然后用VS后的打开

30:18.180 --> 30:19.620
当成一个普通工程来运行

30:20.580 --> 30:20.900
好

30:20.900 --> 30:21.460
大家试一下

30:22.420 --> 30:23.540
试一下体验一下整个过程

30:23.540 --> 30:24.100
它在做什么

30:27.730 --> 30:28.210
好了没

30:29.170 --> 30:29.410
好

30:29.410 --> 30:29.890
接下来

30:29.890 --> 30:30.370
下一个点

30:31.810 --> 30:32.770
页面模板

30:33.410 --> 30:35.330
这点每个点其实都很简单

30:35.890 --> 30:37.250
我给它依然说

30:37.250 --> 30:38.290
这个VPAC还有哪些

30:39.250 --> 30:40.370
我们需要了解的事情

30:41.090 --> 30:41.890
一个页面模板

30:42.610 --> 30:44.050
因为对于单页应用而言

30:44.050 --> 30:45.330
它只有一个空白的页面

30:46.690 --> 30:48.690
所有的内容都靠GS来创建

30:49.330 --> 30:51.730
所以VPAC它会自动给你生成一个页面

30:51.730 --> 30:53.650
你看打包结果里面是不是有个页面

30:53.650 --> 30:55.330
这页面是VPAC自动生成的

30:55.330 --> 30:56.530
我们来看一下这个页面

30:56.530 --> 30:57.330
我们要格式画一下

30:58.210 --> 30:59.890
你看这个页面里面有啥东西

30:59.890 --> 31:00.530
啥都没有

31:01.490 --> 31:02.930
然后就一个DIV空的

31:03.330 --> 31:06.130
我们所有东西都是靠GS创建

31:06.130 --> 31:07.410
给它加到这个DIV里面去

31:08.850 --> 31:09.730
然后在页面里边

31:09.730 --> 31:11.970
VPAC会自动的去引用GS

31:11.970 --> 31:13.570
你看它引用了什么GS

31:13.570 --> 31:14.930
引用了是这个GS文件夹

31:14.930 --> 31:17.330
下面的APP调这个GS

31:17.330 --> 31:18.930
这是VPAC生成的

31:18.930 --> 31:20.290
然后它自动在页面上引用

31:20.930 --> 31:22.290
然后这个另可元素

31:22.290 --> 31:24.130
它也是在这里使用

31:24.610 --> 31:25.730
就是CSS

31:25.730 --> 31:27.250
你看引用这个CSS

31:27.250 --> 31:28.290
它会自动给你加进的

31:28.930 --> 31:29.890
页面自动生成

31:29.890 --> 31:31.970
页面中的CSS和GS自动引用

31:32.530 --> 31:34.930
那么剩下的就是你在GS里边好好写

31:35.570 --> 31:36.770
怎么去生成各种元素

31:37.330 --> 31:38.450
全部用GS来生成

31:39.170 --> 31:40.210
这它也拥有了特点

31:41.170 --> 31:43.490
这就是VPAC做的事情

31:43.490 --> 31:45.330
那么在这里有一个小的细节

31:45.330 --> 31:47.490
就是它在生成这个页面的时候

31:47.490 --> 31:48.610
是参考一个模办

31:49.490 --> 31:50.370
参考什么模办了

31:50.370 --> 31:51.170
参考这个模办

31:51.810 --> 31:53.570
看这个模组叫Public模组

31:54.290 --> 31:57.010
这个模组下面有一个index的ATM

31:57.970 --> 32:00.210
这个页面它会以这个页面为模办

32:01.250 --> 32:02.130
来生成

32:02.130 --> 32:03.410
比方这个页面你可以随便写

32:03.410 --> 32:04.690
比方这里我们再写一个

32:09.900 --> 32:11.180
现在我们再来打包

32:12.460 --> 32:13.980
你们可以跟着测试一下

32:18.980 --> 32:19.700
打包完成

32:19.700 --> 32:20.500
我们再来看一下

32:21.220 --> 32:23.060
这个模组下面的index的ATM

32:23.860 --> 32:24.660
格式化一下

32:24.660 --> 32:25.860
它也多了一个ATM

32:26.260 --> 32:27.060
所以说呢

32:27.060 --> 32:28.500
VPAC在生成页面的时候

32:28.660 --> 32:31.300
是基于Public模组下面的这个文件

32:31.300 --> 32:31.940
作为模办

32:32.900 --> 32:33.620
来生成的

32:33.620 --> 32:35.220
当然我不建议这个文件里面写

32:35.220 --> 32:36.500
怎么拉起来到的元素

32:36.500 --> 32:38.420
我们所有的元素都用GS来生成

32:38.420 --> 32:40.500
那这是我们将来一致的做法

32:41.380 --> 32:43.860
你可能觉得这GS生成元素太麻烦了

32:43.860 --> 32:45.300
将来我们有框架来解决这个问题

32:47.060 --> 32:48.020
然后这个页面里面

32:48.020 --> 32:49.380
你不需要去引用GS

32:49.380 --> 32:50.340
引用C也是

32:50.340 --> 32:51.460
这些都不需要

32:51.460 --> 32:53.140
因为它最终生成了这个ATM里面

32:53.140 --> 32:54.260
它会自动给你加进来

32:56.740 --> 32:58.420
因为它说为什么它把GS

32:58.420 --> 32:59.540
为什么不写到最后

32:59.620 --> 33:00.500
写到Body

33:00.500 --> 33:01.140
后边

33:01.140 --> 33:02.260
为什么要写到前面

33:02.260 --> 33:03.700
注意它先加了这个东西的

33:03.700 --> 33:04.980
是加到Deeper的

33:04.980 --> 33:05.940
Deeper叫什么意思

33:05.940 --> 33:06.820
延迟执行

33:06.820 --> 33:07.860
怎么叫延迟执行

33:07.860 --> 33:09.060
这个GS我先加载

33:09.700 --> 33:11.700
先把GS文件加载进来

33:11.700 --> 33:13.140
然后等于页面完了不后

33:13.140 --> 33:14.260
我再运行这个GS

33:14.820 --> 33:16.740
所以说它现在不用把它放到最后了

33:16.740 --> 33:18.020
只要加上这个就行了

33:18.740 --> 33:19.860
好就是页面模办

33:20.660 --> 33:21.940
好接下来很简单吧

33:22.580 --> 33:23.860
这个没什么好说的吧

33:23.860 --> 33:24.980
对我们开发也不需要

33:24.980 --> 33:25.780
造成什么影响

33:25.780 --> 33:27.460
平时我们也不需要改动它

33:27.460 --> 33:27.860
对不对

33:28.020 --> 33:28.900
写好了过后就

33:28.900 --> 33:30.500
比你们以后到公司里边

33:31.620 --> 33:33.540
一般做一个大工程的这件事

33:33.540 --> 33:34.820
一般要么就是加构师

33:34.820 --> 33:36.980
要么就是项目经理

33:36.980 --> 33:38.260
要么就是技术总监

33:38.260 --> 33:39.460
总会有一个人来做这个事

33:40.180 --> 33:41.540
或者要么就是前端的地道

33:42.100 --> 33:42.660
都行

33:42.660 --> 33:44.260
反正就是来做一个事

33:44.260 --> 33:45.300
那么做这个事的时候

33:45.300 --> 33:46.980
还会把PublicMoodle给你写好

33:47.700 --> 33:48.820
给你配置好

33:48.820 --> 33:49.940
你不需要去动

33:51.060 --> 33:52.420
很多时候也不需要让你动

33:52.420 --> 33:52.980
不能让你动

33:54.180 --> 33:56.020
好这东西你只要了解就行了

33:56.100 --> 33:58.020
接下来我们看一下一个PublicMoodle

33:58.020 --> 33:59.620
这个Moodle我们刚才已经认识到了

33:59.620 --> 34:01.380
这个Index的ATM

34:01.380 --> 34:03.700
除了这个文件之外

34:04.740 --> 34:06.900
其他在这里边的所有内容

34:07.460 --> 34:08.980
它都会原封不动的

34:09.460 --> 34:10.420
放到打包Moodle

34:10.980 --> 34:12.580
比方说你看这里是不是有一个Five icon

34:14.340 --> 34:15.620
我就是随便找那个豆瓣的

34:15.620 --> 34:16.900
那个图标

34:16.900 --> 34:18.020
网页图标

34:18.020 --> 34:19.300
然后你打包完了过后

34:19.300 --> 34:20.580
它就会把这个文件

34:20.580 --> 34:21.940
原封不动的给你放到这儿

34:22.500 --> 34:23.220
就这么简单

34:23.220 --> 34:24.900
比方说你在这里随便写一个吧

34:24.980 --> 34:26.980
随便我们写一个1.TSD

34:27.940 --> 34:29.060
就随便写一个吧

34:29.060 --> 34:30.980
然后我们NPM装

34:30.980 --> 34:31.780
比较的

34:37.950 --> 34:39.230
好你看一下电视目录

34:39.230 --> 34:40.430
说多了个1.TSD

34:40.430 --> 34:40.750
对吧

34:40.750 --> 34:41.790
原封不动的复制

34:41.790 --> 34:42.830
就这个Moodle的特点

34:42.830 --> 34:43.550
但这个Moodle呢

34:43.550 --> 34:45.470
我们也通常都不需要去动它

34:46.350 --> 34:48.110
它里面就保留一个Index的

34:48.110 --> 34:48.990
一个它就完事了

34:49.710 --> 34:51.390
你拿一张图片啊

34:51.390 --> 34:51.950
摄影师怎么办

34:51.950 --> 34:52.750
全部放这里边

34:53.790 --> 34:54.670
全部作为依赖

34:54.670 --> 34:55.630
就这里边就

34:55.630 --> 34:57.070
这里边的东西我们一般不去动它

34:57.550 --> 34:58.270
了解就行了

34:58.270 --> 34:59.870
这里边的东西会远风不动的复制

35:00.590 --> 35:01.070
好

35:01.070 --> 35:01.870
爬不里头Moodle

35:01.870 --> 35:02.910
跟我们开发有什么关系呢

35:02.910 --> 35:03.870
没有什么关系

35:03.870 --> 35:05.470
这个跟它都没有什么关系

35:05.470 --> 35:06.510
我们抽个热了

35:06.510 --> 35:07.150
了解就行了

35:07.870 --> 35:08.190
好

35:08.190 --> 35:08.910
接下来我们看下一个

35:09.950 --> 35:11.710
叫做开发服务器

35:11.710 --> 35:13.150
开发服务器跟我们之后的开发

35:13.150 --> 35:14.510
有那么一点点关系

35:14.510 --> 35:15.950
关系也没有那么大

35:15.950 --> 35:16.750
但是你要了解

35:25.700 --> 35:26.180
你看啊

35:26.180 --> 35:28.100
我们刚才做了一些事

35:28.100 --> 35:29.380
就是我们在原码

35:29.380 --> 35:30.660
这是我们的原代码Moodle

35:30.980 --> 35:31.460
这里边可以写

35:31.460 --> 35:32.340
都各种各样的东西

35:33.220 --> 35:34.420
我们写了一段代码了

35:34.420 --> 35:35.860
比方说我现在写的代码了

35:35.860 --> 35:36.980
又来加一个H2

35:37.860 --> 35:38.420
比方说吧

35:39.220 --> 35:40.180
又来加一个H2

35:41.220 --> 35:42.900
又给它加上一个text

35:43.940 --> 35:44.580
你好

35:44.580 --> 35:45.380
我也拍过

35:46.580 --> 35:47.460
又把它加到

35:47.940 --> 35:49.060
然后open to

35:49.700 --> 35:50.340
加完了

35:50.340 --> 35:52.580
也到加到document body里边

35:52.580 --> 35:53.860
就多了一代码了

35:53.860 --> 35:54.820
那么现在呢

35:56.660 --> 35:57.460
我想运行

35:57.460 --> 35:59.380
我是不是要经过打包运行

35:59.460 --> 36:00.660
npm装必用的运行

36:00.660 --> 36:01.140
然后呢

36:01.140 --> 36:02.100
再把这个电视目楼

36:02.100 --> 36:02.980
拖到vscode里面

36:02.980 --> 36:04.500
你不能在这里直接用

36:04.900 --> 36:05.860
不能在这里打开啊

36:06.660 --> 36:08.180
因为这个跟路径有些关系

36:08.180 --> 36:09.300
因为他用的是绝对路径

36:10.900 --> 36:11.780
所以会找不到

36:11.780 --> 36:12.740
也要把它作为跟目楼

36:12.740 --> 36:13.620
在vscode打开

36:14.260 --> 36:14.660
然后呢

36:14.660 --> 36:15.460
我们再去运行

36:15.460 --> 36:16.180
太麻烦了

36:16.180 --> 36:16.500
对不对

36:17.220 --> 36:17.780
所以说呢

36:17.780 --> 36:18.900
在开发阶段呢

36:18.900 --> 36:21.380
我们其实可以更加简单的

36:21.380 --> 36:22.020
来看效果

36:23.620 --> 36:24.820
怎么做呢

36:24.820 --> 36:26.260
运行另一个名叫做

36:26.260 --> 36:27.140
npm装

36:27.140 --> 36:27.460
so

36:28.420 --> 36:29.540
这个命令呢

36:29.540 --> 36:31.700
也是我在拍点节色里面配置好的

36:31.700 --> 36:32.900
实际上是运行的

36:32.900 --> 36:33.860
他这个命令

36:35.140 --> 36:35.540
好

36:35.540 --> 36:36.420
我们来运行看一下

36:38.850 --> 36:39.170
好

36:39.170 --> 36:40.610
那么他这里会有个提示

36:41.890 --> 36:42.530
这个提示呢

36:42.530 --> 36:43.170
他告诉你

36:43.810 --> 36:44.450
有这么一个

36:44.450 --> 36:45.490
有这么一个网址

36:45.490 --> 36:46.770
你通过这个地址

36:46.770 --> 36:48.130
就可以看到你目前的

36:49.010 --> 36:49.570
页面

36:49.970 --> 36:51.490
我们按住康处键

36:52.290 --> 36:52.770
点一下

36:54.690 --> 36:55.170
你看

36:55.170 --> 36:55.730
这就可以了

36:56.130 --> 36:57.010
看到效果了

36:57.010 --> 36:58.450
而且还有更加舒服的

36:58.450 --> 36:59.730
就是我这边一改

37:01.250 --> 37:01.890
比方说

37:01.890 --> 37:03.810
我们这里改成三个感叹号

37:05.170 --> 37:05.970
多来几个吧

37:05.970 --> 37:06.610
一保存

37:07.330 --> 37:08.210
这边自动刷新

37:08.930 --> 37:09.330
看到没

37:09.970 --> 37:12.210
所以我们之后就再把开发就更加舒服了

37:12.210 --> 37:14.210
我没有必要去写了原代码

37:14.210 --> 37:15.330
然后打包

37:15.330 --> 37:16.370
然后再运行

37:17.010 --> 37:19.330
我就直接运行个npm装设物

37:19.330 --> 37:20.610
然后这里改代码

37:20.610 --> 37:21.170
改完代码了

37:21.170 --> 37:22.290
他这边一保存

37:22.290 --> 37:23.170
他这边就看到效果了

37:24.290 --> 37:24.610
对吧

37:25.490 --> 37:26.850
就开发就方便多了

37:26.850 --> 37:28.210
那么他是怎么做到的呢

37:28.370 --> 37:29.650
当然这个服务器一直在运行

37:29.650 --> 37:30.690
这里一直在运行

37:31.570 --> 37:32.690
如果说你不需要运行

37:32.690 --> 37:35.250
那你就停止按康处加C来进行停止

37:35.890 --> 37:36.530
停止过后

37:36.530 --> 37:37.250
那你不行了

37:37.250 --> 37:38.370
你这里再刷新一倍了

37:39.490 --> 37:41.170
那么他到底是怎么回事呢

37:41.490 --> 37:42.130
给他看一下

37:43.410 --> 37:44.210
这个命令

37:44.210 --> 37:46.450
这个npm装设物这个命令呢

37:46.450 --> 37:48.370
它一般是在开发阶段使用

37:49.330 --> 37:50.370
你在开发过程中

37:50.370 --> 37:52.530
你用这种方式太麻烦了

37:52.530 --> 37:54.690
说开发阶段可以使用这个命令

37:54.690 --> 37:55.810
开发阶段使用的时候

37:55.810 --> 37:56.770
以运行这个命令

37:56.770 --> 37:57.650
它会启动一个东西

37:57.730 --> 37:59.250
叫做开发服务器

37:59.250 --> 38:00.370
它会启动一个服务器

38:01.650 --> 38:02.530
我们先大概了解

38:02.530 --> 38:04.210
然后下面看看土格拉解释

38:04.210 --> 38:04.930
在这个阶段呢

38:04.930 --> 38:06.930
未拍的并不会形成打包结果

38:06.930 --> 38:08.290
你看这个打包结果是没有的

38:08.290 --> 38:08.690
空的

38:09.250 --> 38:11.090
它并不会形成打包结果文件

38:11.090 --> 38:12.210
那它有没有打包呢

38:12.210 --> 38:12.450
就

38:13.330 --> 38:15.650
它是把打包的内容放到内存里边

38:16.370 --> 38:16.850
然后呢

38:16.850 --> 38:18.450
我们请求服务器的时候呢

38:18.450 --> 38:20.610
服务器从内存里边给运行打包结果

38:20.610 --> 38:21.090
啥意思

38:22.610 --> 38:23.010
你看啊

38:23.570 --> 38:26.690
我们这里的npm装设物这个命令运行

38:26.690 --> 38:27.490
这是我们的电脑

38:27.570 --> 38:28.690
这些东西全在我们的电脑上

38:29.490 --> 38:30.210
这个时候呢

38:31.730 --> 38:34.130
我们这里不是有个src目录吗

38:34.130 --> 38:35.090
是不是有个它这个目录

38:35.650 --> 38:36.930
好那么它就会是不会打包

38:37.490 --> 38:38.690
打包的时候呢

38:38.690 --> 38:40.290
它就会把跟打包结果呢

38:40.290 --> 38:41.250
放到内存里边

38:41.890 --> 38:42.530
它会放到这

38:43.250 --> 38:44.370
看没看我鼠标啊

38:44.370 --> 38:44.850
放到这

38:48.060 --> 38:49.660
同时它会启动一个东西

38:49.660 --> 38:51.260
叫做开发服务器

38:51.260 --> 38:52.380
我们知道服务器是什么

38:52.380 --> 38:53.500
根本提供服务的对不对

38:54.460 --> 38:55.260
我们访问页面啊

38:55.260 --> 38:56.220
访问GS啊

38:56.220 --> 38:57.340
或者是访问一些API

38:57.340 --> 38:58.300
都可以通过这个服务器

38:58.860 --> 39:00.060
这种开发服务器

39:01.180 --> 39:02.620
然后呢这里开发服务器

39:02.620 --> 39:04.300
监听的端口是8080

39:04.300 --> 39:05.980
你看这里端口号是不是8080

39:06.700 --> 39:07.980
这个时候点责

39:07.980 --> 39:09.500
是不是我们会启动浏览器

39:10.620 --> 39:11.740
启动浏览器的时候

39:11.740 --> 39:12.460
我们带来看啊

39:14.640 --> 39:16.000
我们一启动浏览器

39:16.000 --> 39:16.960
是不是访问这个

39:16.960 --> 39:17.920
访问这个8080

39:17.920 --> 39:18.720
你看这条线

39:21.540 --> 39:22.980
是不是会请求到这个服务器

39:25.060 --> 39:25.700
是不是会请求

39:26.340 --> 39:27.060
请求服务器

39:27.060 --> 39:28.100
请求什么服务器

39:28.100 --> 39:29.620
请求我们刚才启动的

39:29.780 --> 39:31.700
为派一个帮我们启动的开发服务器

39:32.500 --> 39:33.380
而开发服务器呢

39:33.380 --> 39:34.100
他就会从

39:34.100 --> 39:35.460
我们刚才打包结果

39:35.460 --> 39:36.740
在内存里边打包结果

39:36.740 --> 39:37.860
不在文件里边

39:37.860 --> 39:38.900
还没有形成打包文件

39:39.540 --> 39:40.740
他在内存里边打包结果

39:40.740 --> 39:42.420
会取出相应的资源

39:44.100 --> 39:44.980
他这一步

39:44.980 --> 39:45.300
不要动

39:45.300 --> 39:46.180
我们访问这个地址

39:46.180 --> 39:48.180
他就会取出这里打包结果的页面

39:48.180 --> 39:50.100
就这个英德格式的Atemian页面

39:50.100 --> 39:51.300
然后给我响应过来

39:51.780 --> 39:52.980
所以浏览器看到页面了

39:53.540 --> 39:54.820
浏览器看到页面里边

39:54.820 --> 39:55.700
不是有GS吧

39:55.700 --> 39:56.100
对不对

39:56.100 --> 39:57.220
是不是有各种样的GS

39:58.180 --> 40:00.980
于是又去请求开发服务器

40:00.980 --> 40:02.260
我要现在拿GS的

40:02.260 --> 40:03.060
我们来看一下吧

40:07.330 --> 40:07.890
看网络

40:08.290 --> 40:09.890
然后你看是不是请求到GS的

40:09.890 --> 40:11.810
我们这个页面里边是包含GS的

40:13.090 --> 40:14.050
所以就包含GS

40:14.050 --> 40:15.970
那么他这里是不是要请求GS

40:15.970 --> 40:17.570
这个GS我们看一下请求的地址

40:17.570 --> 40:18.530
是不是还是这个地址

40:23.090 --> 40:24.530
那么这个请求GS是不是

40:27.810 --> 40:29.330
是不是可以拿到这个GS

40:29.330 --> 40:29.970
谁给我们的

40:31.250 --> 40:32.530
是不是开发服务器给我们的

40:33.090 --> 40:33.890
就这么简单

40:35.730 --> 40:37.890
那我们又如何来解释

40:37.890 --> 40:40.450
就是我们单一把更新了之后

40:40.450 --> 40:42.290
一保存他又重新刷新了呢

40:42.290 --> 40:45.090
是因为webpack一直在监控我们的原代码

40:45.090 --> 40:47.010
只要我们的src目录一变化

40:47.890 --> 40:49.810
src目录里边的东西一变化

40:49.810 --> 40:51.330
那么他会做两件事

40:51.330 --> 40:52.770
第一件事重新打包

40:54.290 --> 40:55.170
重新进行打包

40:55.170 --> 40:56.210
那么打包结果是不是更新

40:56.210 --> 40:57.090
在内存里边更新

40:58.050 --> 40:59.170
然后呢

40:59.170 --> 41:01.410
强制我们浏览器刷新界面

41:02.290 --> 41:03.970
让我们的浏览器强制刷新界面

41:03.970 --> 41:05.330
那我们浏览器刷新

41:05.330 --> 41:07.570
是不是又会重新请求我们的开发服务器

41:07.570 --> 41:09.010
一重新请求开发服务器

41:09.010 --> 41:11.490
开发服务器是不是从打包结果里边拿出新的内容

41:12.050 --> 41:13.250
然后再响应给我们

41:13.250 --> 41:13.650
对吧

41:13.650 --> 41:14.690
就形成了一个闭环

41:15.490 --> 41:16.290
因此我们就

41:16.290 --> 41:17.250
当然这个东西呢

41:17.250 --> 41:19.250
原理能简单认识一下就行了

41:19.250 --> 41:20.370
能理解就最好

41:20.370 --> 41:21.250
当然理解不了了

41:21.250 --> 41:22.050
实在理解不了了

41:22.050 --> 41:22.850
你至少知道

41:22.850 --> 41:23.730
你至少现在知道了

41:23.730 --> 41:25.090
有这么一个开发服务器

41:25.090 --> 41:26.690
我们现在在访问谁访问他

41:27.170 --> 41:28.930
在开发阶段访问他

41:28.930 --> 41:29.970
来查看我们的效果

41:30.610 --> 41:31.810
你至少知道这个

41:31.810 --> 41:33.650
然后呢至少知道怎么用

41:33.650 --> 41:33.970
对吧

41:33.970 --> 41:34.770
运行出来

41:34.770 --> 41:35.890
然后呢这里就是

41:37.170 --> 41:38.690
可以改动单码就可以看到效果

41:39.330 --> 41:39.490
好

41:39.490 --> 41:41.650
接下来这个东西是跟我们开发有影响的

41:42.450 --> 41:44.930
你对我们开发是有什么影响的

41:44.930 --> 41:46.530
你要会启动开发服务器

41:47.570 --> 41:48.850
我看我这里有没有总结啊

41:56.050 --> 41:58.450
要学会访问开发服务器查看效果

41:58.450 --> 42:00.290
这就是对我们开发的影响

42:00.450 --> 42:01.490
影响很少

42:01.490 --> 42:02.370
也很简单

42:04.210 --> 42:06.050
那么下面大家做个作业啊

42:06.050 --> 42:09.490
就是要学会用npm装设五启动开发服务器

42:10.050 --> 42:11.010
启动完了过后呢

42:11.010 --> 42:12.930
要学会在这里的能够打开页面

42:13.650 --> 42:14.530
然后呢要学会

42:15.330 --> 42:17.010
更改单码过后保存能够

42:18.370 --> 42:20.690
体验一下能够看到开发服务器重新刷新

42:21.410 --> 42:23.970
然后呢要学会停止开发服务器

42:23.970 --> 42:24.770
按康复加C

42:25.810 --> 42:27.810
当然这个命令呢可以在这里运行

42:27.890 --> 42:30.850
也可以在新的一个终端里面运行

42:30.850 --> 42:31.250
都可以

42:31.890 --> 42:32.610
好大家试一下

42:35.140 --> 42:36.820
好了那么接下来我们继续看啊

42:36.820 --> 42:38.900
这一块我们倒是不会做出什么样的效果

42:38.900 --> 42:41.460
我们主要是理解这些基本操作

42:42.740 --> 42:43.940
下面文件缓囤

42:51.040 --> 42:51.760
这一块呢

42:52.640 --> 42:54.080
跟我们开发就根本就没关系了

42:54.080 --> 42:55.200
但是你要知道啊

42:55.200 --> 42:56.160
不然的话就觉得

42:56.160 --> 42:58.480
有东西奇奇怪怪的也不太清楚为什么

42:59.680 --> 43:02.160
我们可以看到了这里打包结果里边

43:02.160 --> 43:03.040
现在我没有打包

43:04.560 --> 43:05.840
哦当然顺便说一句

43:05.840 --> 43:08.480
你开发完了过后你不能再用这种方式了啊

43:08.480 --> 43:11.200
你开发完了过后你要老老实实用庇护者来进行打包

43:13.040 --> 43:14.240
然后把个打包结果

43:15.280 --> 43:18.400
就上交啊就上传到服务器上去

43:19.040 --> 43:19.760
你把这个结果

43:19.760 --> 43:20.960
因为这个就是个纯粹的东西

43:20.960 --> 43:22.080
这些东西都不用上传

43:22.080 --> 43:23.600
你把这个玩意上传上去就行了

43:25.920 --> 43:27.600
然后我们可以看到打包结果里边呢

43:27.600 --> 43:29.040
有一些奇奇怪怪的名字

43:29.760 --> 43:31.360
哎这个GS就GS嘛

43:31.360 --> 43:34.160
为什么够加上什么六九三三九就是啥意思呢

43:34.800 --> 43:36.160
这个GS就是GS

43:36.160 --> 43:38.400
为什么够加上一个17919啥意思呢

43:38.960 --> 43:39.920
这个图片有图片吗

43:39.920 --> 43:40.960
为什么是这个名字呢

43:42.080 --> 43:44.720
那么像这种乱七八糟这个符号呢

43:44.720 --> 43:45.760
我们称之为哈希

43:46.800 --> 43:48.720
但那个哈希其实很长的啊

43:48.720 --> 43:50.480
我这里只是结取了五位

43:50.480 --> 43:52.320
这是可以配置的到底有多少位

43:53.360 --> 43:54.400
那么这个哈希纸呢

43:54.400 --> 43:55.680
你会发现一个特点

43:55.680 --> 43:58.640
它会随着模块内容的变化而变化

43:58.640 --> 43:59.040
啥意思

44:00.080 --> 44:01.520
我们先看这个介石

44:01.520 --> 44:02.640
六九三三九

44:03.520 --> 44:04.480
我们先重新打包

44:07.920 --> 44:08.400
什么意思

44:08.400 --> 44:10.560
就原代码不变重新打包

44:13.250 --> 44:14.850
因为发现这里还是六九三三九

44:15.570 --> 44:17.250
然后现在我要变一个制服

44:17.250 --> 44:20.050
加一个感叹号重新打包

44:26.380 --> 44:28.460
你看是变了变成这个了

44:29.100 --> 44:29.500
什么意思

44:30.060 --> 44:33.740
就是一个内容一个一个值

44:34.460 --> 44:35.340
感叹号删除掉

44:41.870 --> 44:43.150
所以变成六九三三九了

44:43.710 --> 44:46.030
就是一个内容内容是什么

44:46.030 --> 44:47.070
那么生存的值就什么

44:47.070 --> 44:48.030
它是一个对应关系

44:48.510 --> 44:49.710
内容不变值不变

44:50.350 --> 44:51.710
那么这样做为什么要这样做呢

44:52.590 --> 44:53.550
你看这些问题呢

44:53.550 --> 44:54.910
不是WePAC根本

44:54.910 --> 44:56.110
故意在恶心我们的

44:56.110 --> 44:56.590
不是了

44:57.310 --> 44:58.590
它是为了解决问题的

44:58.590 --> 44:59.150
这个问题呢

44:59.150 --> 45:00.910
是我们意识以来都是忽视掉的

45:01.790 --> 45:02.270
什么问题

45:02.270 --> 45:04.030
就是浏览器缓存的问题

45:04.030 --> 45:04.990
给他说一下这个问题啊

45:05.550 --> 45:07.150
我们多长一点见识

45:07.150 --> 45:08.830
这个东西跟我们开发没有什么关系

45:08.830 --> 45:11.070
因为这是WePAC自动完成的

45:11.070 --> 45:13.070
这个指导也不需要我们去记忆

45:13.070 --> 45:15.310
因为它会自动的在页面上引用

45:15.310 --> 45:16.430
你生存的是六九三三九

45:16.430 --> 45:17.550
还有引用六九三三九

45:17.710 --> 45:18.590
你生存的是别的玩意

45:18.590 --> 45:19.710
还有引用别的玩意

45:19.710 --> 45:21.230
所以说不需要我们去记忆

45:21.230 --> 45:22.510
但是你这个原理呢

45:22.510 --> 45:24.510
大家要长点见识

45:25.150 --> 45:25.710
了解一下

45:26.670 --> 45:28.110
如果说它不这样做

45:28.670 --> 45:29.870
假设它不需要这样做

45:30.430 --> 45:31.630
它所有的东西都打包成

45:31.630 --> 45:32.510
App掉介石

45:32.510 --> 45:33.790
或者是别的名字掉介石

45:33.790 --> 45:35.870
固定的名字会有什么问题呢

45:36.830 --> 45:37.950
你要知道啊

45:37.950 --> 45:39.710
浏览器它是有缓存的

45:41.230 --> 45:42.270
比方说看下面这个图

45:43.150 --> 45:44.990
第一次浏览器去访问这个介石

45:44.990 --> 45:46.590
如果说不这样做

45:46.670 --> 45:48.430
访问的是什么App叫介石

45:48.430 --> 45:50.030
服务器有这个介石就给它了

45:50.590 --> 45:52.910
给它过游戏期就会把这个介石缓存下来

45:53.710 --> 45:55.870
当我们后边再去访问这个页面

45:55.870 --> 45:57.710
这个页面中又要用到这个介石

45:58.110 --> 45:58.750
那么这个时候

45:58.750 --> 46:00.590
浏览器它就不会再从服务器去拿

46:00.830 --> 46:02.430
然后直接用这个缓存结果

46:02.910 --> 46:05.950
这样子就可以避免反复的请求服务器

46:06.270 --> 46:08.670
一般来说绝大部分的在生产环境里边

46:08.670 --> 46:09.390
什么叫生产环境

46:09.390 --> 46:13.230
就是把我们的页面部署到服务器上过后

46:13.230 --> 46:14.350
它都会做这个事情

46:14.910 --> 46:16.350
本地的话一般不会做

46:19.260 --> 46:21.660
那么这样一来我们就浏览器会减少请求

46:21.660 --> 46:22.700
这样是为了提高效率

46:22.700 --> 46:23.660
本来是个好事

46:24.540 --> 46:25.340
但是有一天

46:25.980 --> 46:26.860
比方说这个缓存

46:26.860 --> 46:28.300
缓存的让你缓存

46:28.860 --> 46:30.860
一般来说这种文件缓存的比较长

46:31.420 --> 46:33.020
都缓存的是一年两年

46:33.580 --> 46:34.460
甚至十年

46:34.460 --> 46:35.740
它让它缓存的比较长

46:36.940 --> 46:38.140
那么就比方说一两天

46:39.580 --> 46:41.340
然后就会导致这个服务器

46:41.980 --> 46:44.060
这一两天那日如果说更新了这个介石

46:44.060 --> 46:45.020
它的名字还是没变

46:45.020 --> 46:46.220
还是要App点介石

46:47.180 --> 46:49.500
余生的浏览器后面在刷新的时候

46:49.500 --> 46:51.260
他发现我的访问还是App的介石

46:51.260 --> 46:52.380
他又不知道服务器更新了

46:53.180 --> 46:54.860
余生的他还会用这个缓存

46:54.860 --> 46:56.780
就会导致我们新的单码

46:56.780 --> 46:57.900
用不到这个浏览器一般

47:00.140 --> 47:00.940
那怎么办呢

47:02.460 --> 47:02.940
哈希

47:03.980 --> 47:05.260
你看哈希怎么来解决的

47:06.700 --> 47:09.180
我们第一次请求的时候是请求这个介石

47:09.180 --> 47:10.620
比方说有一个哈希纸

47:10.620 --> 47:11.260
看没

47:11.260 --> 47:13.260
它是根据内容的变化来变化的

47:13.660 --> 47:15.900
而服务器有这个介石就给它了

47:16.060 --> 47:17.260
然后这个介石是不是给它了

47:17.740 --> 47:19.100
给它过它就要缓存下来

47:19.660 --> 47:20.540
后边如果说

47:20.540 --> 47:22.380
页面上还是访问这个介石的话

47:22.380 --> 47:23.260
它就用缓存结果

47:23.820 --> 47:26.540
有一天浏览器这个文件更新了

47:26.540 --> 47:28.220
文件就是我们代码更新了

47:28.220 --> 47:29.980
代码一更新是内容变动的

47:29.980 --> 47:31.180
内容一变动

47:31.180 --> 47:32.300
哈希纸就会变动

47:32.300 --> 47:33.660
它就会生存一个新的介石

47:34.540 --> 47:36.700
同时呢页面上就会引用这个新的介石

47:37.260 --> 47:39.260
当我们浏览器再去访问页面的时候

47:39.260 --> 47:41.100
页面上我现在用的不是它了

47:41.100 --> 47:42.860
我现在用的是这个介石的

47:42.860 --> 47:43.660
浏览器一看

47:43.660 --> 47:45.660
这个介石我的这边是没有的

47:45.820 --> 47:47.020
我只有以前这个东西

47:47.900 --> 47:49.100
这个介石我没有

47:49.100 --> 47:50.220
没有的话怎么办

47:50.220 --> 47:51.660
只能去重新寝求服务器

47:51.660 --> 47:54.460
这样就保证服务器那边介石一旦更新

47:54.460 --> 47:56.220
或者是一些CSS一旦更新

47:56.220 --> 47:57.820
浏览器就能够立刻

47:58.700 --> 48:00.220
不再使用之前的缓存

48:00.220 --> 48:01.500
而使用我们新的东西

48:02.140 --> 48:02.860
没什么意思吧

48:02.860 --> 48:04.460
大概意思就是这边回上

48:04.460 --> 48:06.940
然后这里边缓存这里边细节可多了

48:06.940 --> 48:08.620
我们这里大概了解一下就行了

48:08.620 --> 48:11.980
直到这个哈希纸是为了解决缓存问题的

48:11.980 --> 48:13.980
如果说也将来给别人吹牛

48:14.140 --> 48:16.780
所以为什么这个地方有这么一种乱七八糟东西呢

48:17.820 --> 48:19.020
它不是什么加密啊

48:19.020 --> 48:20.780
不要一看到什么乱七八糟东西就是加密

48:22.540 --> 48:24.460
前端特别是在浏览器端

48:25.420 --> 48:26.940
几乎你是见不到加密的

48:27.500 --> 48:29.980
这些一般都是一些有些特殊用处的

48:29.980 --> 48:31.420
比方说这里就是为了处理缓存

48:32.380 --> 48:34.300
这个地方根本开放没有任何影响

48:34.300 --> 48:35.740
只是要了解一下

48:36.940 --> 48:37.660
好就这一块

48:39.500 --> 48:41.100
好接下来是资源路径

48:41.820 --> 48:43.100
啥意思啊

48:45.180 --> 48:48.140
因为我们在外拍里边所有的模块

48:48.860 --> 48:51.260
都是所有的东西都会被视为模块

48:51.980 --> 48:53.580
那么有两个模块比较特殊

48:53.580 --> 48:55.260
一个是代码就是我们的介石代码

48:55.260 --> 48:56.860
一个模块叫做样式

48:56.860 --> 48:58.140
就是CSSNAS

48:58.940 --> 49:00.380
这两个模块比较特殊

49:00.380 --> 49:01.740
我们把它处开

49:01.740 --> 49:03.580
其他的模块像什么图片啊

49:04.140 --> 49:06.300
像什么一个TST纹本啊

49:06.300 --> 49:08.140
或者是像什么一些乱七八糟的网样

49:08.140 --> 49:10.060
都被视为资源模块

49:11.820 --> 49:13.980
资源模块在原代码中的路径

49:13.980 --> 49:15.660
和打包路径是不一样的

49:16.220 --> 49:17.820
我们来看一下把这个图片

49:17.820 --> 49:19.420
我们在原代码的路径是什么

49:24.340 --> 49:26.020
图片的原代码的路径是什么

49:26.020 --> 49:29.380
是.src a.png

49:30.020 --> 49:30.420
对不对

49:31.540 --> 49:32.980
打包之后的路径是啥

49:34.990 --> 49:36.030
是不是Dest

49:37.710 --> 49:38.430
OrSets

49:40.270 --> 49:42.430
F3ad 7.png

49:43.310 --> 49:44.110
就变成它了

49:45.230 --> 49:46.350
你看是不是不一样的

49:46.990 --> 49:48.510
那么会导致是一个什么问题呢

49:49.150 --> 49:49.950
我们比方说啊

49:50.350 --> 49:52.350
在这个CSSNAS里边

49:52.350 --> 49:53.230
我们做一件这么一件事

49:53.230 --> 49:54.190
我们设置一个背景

49:54.750 --> 49:55.390
我们找到

49:55.390 --> 49:56.110
我说在这吧

49:57.950 --> 49:59.070
背景颜色

49:59.070 --> 50:00.910
再来一个Url吧

50:01.710 --> 50:02.270
Url

50:03.390 --> 50:04.350
我们返回

50:04.350 --> 50:05.310
就当前目录啊

50:05.310 --> 50:07.630
当前目录的什么a.png

50:09.230 --> 50:09.870
Repeat

50:11.070 --> 50:11.550
一样

50:12.750 --> 50:13.630
这里的路径

50:13.630 --> 50:15.150
如果说它不追上处理的话

50:15.230 --> 50:16.830
打包结果这个路径还对不对

50:18.350 --> 50:18.990
还对不对

50:19.790 --> 50:20.990
肯定就不对了

50:21.790 --> 50:22.350
对吧

50:22.350 --> 50:23.150
我们来运行一下

50:23.150 --> 50:23.950
NPM装

50:31.440 --> 50:32.160
按你说的话

50:32.160 --> 50:32.800
这边用的是

50:32.800 --> 50:34.080
写的是a.png对吧

50:34.080 --> 50:35.520
那打包结果里边也应该是它

50:36.080 --> 50:36.960
但是你会发现

50:37.520 --> 50:38.640
神奇的现象就是

50:39.440 --> 50:40.480
它自动帮我们改

50:41.200 --> 50:42.960
它这个路径会自动帮我们更改

50:42.960 --> 50:45.040
更改成打包结果里边这个路径

50:45.840 --> 50:46.480
看没

50:46.480 --> 50:47.440
所以说这一块呢

50:47.440 --> 50:50.080
在CSS里边使用的是这种支援路径

50:50.160 --> 50:50.880
你不用担心

50:51.360 --> 50:53.200
VPEC呢会自动帮你完成

50:53.680 --> 50:55.120
当然我们可以看效果了

50:55.120 --> 50:56.000
也可以看得非常清楚

50:57.280 --> 50:58.960
把个电视目录拿过来运行

51:01.120 --> 51:02.320
当然我们现在可以直接使用

51:02.320 --> 51:03.280
那个dev-server来运行

51:03.760 --> 51:05.280
这个dev-server来运行

51:05.280 --> 51:06.320
你看是不是有个图片了

51:06.960 --> 51:08.080
当然我们也可以这样做啊

51:09.040 --> 51:10.480
我们学习了开发服务器了

51:10.480 --> 51:11.920
也可以用NPM的装设

51:12.800 --> 51:14.560
也可以看到这个特点

51:15.600 --> 51:17.280
因为这个东西呢

51:17.280 --> 51:18.320
它也是要打包的

51:18.320 --> 51:18.960
只是呢

51:18.960 --> 51:21.040
它没有打包成文件

51:21.040 --> 51:22.080
它打包了内存里面的

51:22.080 --> 51:22.720
我们来看一下吧

51:24.640 --> 51:27.520
好这个dev body

51:27.520 --> 51:29.280
你看是变成这个路径了

51:29.680 --> 51:30.560
路径是不是变了

51:31.760 --> 51:32.160
对不对

51:32.640 --> 51:32.960
好

51:34.560 --> 51:35.760
这是这么一个特点

51:36.320 --> 51:38.000
但是呢如果说的

51:38.000 --> 51:38.720
大家可以试一下

51:39.680 --> 51:40.160
试一下吧

51:40.160 --> 51:41.120
你们试一下

51:41.120 --> 51:42.320
随便引用一张图片

51:42.320 --> 51:43.280
引用一张外部支援

51:43.280 --> 51:44.240
在CSS里边

51:44.240 --> 51:45.440
你看它的路径有没有变化

51:47.440 --> 51:48.080
好了没

51:48.080 --> 51:48.400
好

51:49.200 --> 51:51.120
那如果说在CSS里面没问题

51:51.120 --> 51:52.080
那么站这呢

51:52.240 --> 51:53.440
那么在CSS里边呢

51:54.400 --> 51:54.960
比方说啊

51:54.960 --> 51:57.440
我这里去创建一个Email级元素

51:58.640 --> 51:59.760
我把这个样式删掉

52:00.640 --> 52:01.680
样式这一块删掉

52:03.440 --> 52:05.280
我去创建一个Email级元素

52:09.330 --> 52:10.530
然后给它设置一个属性

52:10.530 --> 52:11.170
叫SRC

52:11.730 --> 52:12.770
它的地址呢是什么

52:13.490 --> 52:15.490
当前目录下的A点png

52:18.510 --> 52:19.310
A点png

52:19.310 --> 52:19.790
对吧

52:19.790 --> 52:20.190
设置它

52:20.750 --> 52:21.950
你说我能设置它

52:21.950 --> 52:22.750
这里边的路径吧

52:22.750 --> 52:23.230
我不能啊

52:23.230 --> 52:24.830
我都不知道它生成的名字是什么

52:24.830 --> 52:25.470
根本你没发

52:25.470 --> 52:26.670
我不知道它的名字是什么

52:26.750 --> 52:27.470
所以我没发设置

52:28.030 --> 52:28.750
然后呢

52:28.750 --> 52:32.030
我再去把这个Email级呢加入到Append to

52:32.830 --> 52:33.950
加入到这个Document here

52:33.950 --> 52:34.590
Body里边

52:34.590 --> 52:35.150
看行不行

52:35.790 --> 52:36.430
我们看一面

52:37.070 --> 52:38.030
图片搭载出来了吗

52:38.030 --> 52:38.750
没有

52:38.750 --> 52:39.150
为什么

52:39.790 --> 52:40.990
然后我们看这个Email级

52:40.990 --> 52:42.110
它的路径SRC

52:42.110 --> 52:43.390
是不是还是第二写钢

52:43.390 --> 52:44.030
A点png

52:44.030 --> 52:45.310
这个这个png存在吗

52:45.870 --> 52:46.750
打包结果里边

52:46.750 --> 52:47.550
文件名啊

52:47.550 --> 52:48.750
路径说全变了

52:48.750 --> 52:49.550
它不存在了

52:50.510 --> 52:51.310
那怎么办

52:51.310 --> 52:52.110
说这种情况

52:52.110 --> 52:53.390
我也派个处理不了啊

52:53.390 --> 52:54.510
这个东西它没法处理

52:54.510 --> 52:55.870
它怎么知道这个字不错

52:56.030 --> 52:56.830
它就是路径呢

52:56.830 --> 52:57.470
根本就不知道

52:58.350 --> 52:58.990
那怎么办呢

52:59.710 --> 53:00.990
正确的写法

53:00.990 --> 53:01.710
之后啊

53:01.710 --> 53:02.990
如果说你要动态的

53:02.990 --> 53:04.190
就这一车里边不管

53:04.190 --> 53:05.390
它可以自动搞定

53:05.390 --> 53:07.310
但是如果说你在这里边

53:07.310 --> 53:07.950
自动的

53:08.670 --> 53:10.910
就是就是通过这个GS动态的

53:10.910 --> 53:13.150
给它加一些资源路径的话

53:13.150 --> 53:14.030
要用这种方式

53:14.590 --> 53:16.350
你这边是不是导入png啊

53:17.950 --> 53:19.550
你导入个png呢

53:19.550 --> 53:21.390
它会把它当成一个模块

53:22.110 --> 53:23.950
Webpack呢会给我们一个结果

53:23.950 --> 53:25.230
你可以用一个东西来接收

53:29.360 --> 53:31.520
这个url它就是

53:32.560 --> 53:33.680
输出啊

53:33.680 --> 53:34.880
你看那个url是啥

53:38.380 --> 53:38.780
看没

53:39.980 --> 53:41.500
所以我们通过这种方式

53:42.220 --> 53:43.980
就能得到这个资源

53:43.980 --> 53:45.500
在打包结果中的路径

53:46.380 --> 53:46.620
好

53:46.620 --> 53:47.980
我们这里是不是可以把它放这

53:48.700 --> 53:51.600
你看是不是就显示出来了

53:52.400 --> 53:52.720
对吧

53:52.720 --> 53:53.440
你们以后啊

53:53.440 --> 53:54.320
资源路径这一块

53:54.320 --> 53:55.600
如果说出了问题

53:55.600 --> 53:56.640
你要想到

53:56.640 --> 53:58.320
就这一块对我们开发是有影响的啊

54:05.680 --> 54:06.960
对我们的开发影响

54:07.040 --> 54:08.240
这一块是有影响的

54:08.240 --> 54:10.800
要学会动态的获取资源文件路径

54:10.800 --> 54:12.000
比方说你要

54:12.000 --> 54:13.600
导入一个资源啊

54:13.600 --> 54:15.120
4DS的GS图案啊

54:15.120 --> 54:16.560
那个玩意是不一样的

54:16.560 --> 54:17.840
就是普通的图片

54:17.840 --> 54:18.880
特别是图片那种资源

54:18.880 --> 54:20.240
最常见的就是图片了

54:20.240 --> 54:22.480
像这些资源像M3MP4啊

54:22.480 --> 54:23.600
这些外部资源

54:23.600 --> 54:24.720
这些资源呢

54:24.720 --> 54:27.120
你要得到动态的它的打包路径

54:27.120 --> 54:28.000
你要用这种方式

54:28.560 --> 54:29.840
当然这个名字可以随便取

54:30.640 --> 54:31.520
没了意思吧

54:31.520 --> 54:32.960
都是对我们开发有影响的啊

54:33.600 --> 54:34.560
好这资源路径

54:35.520 --> 54:38.320
好接下来大家这一块试一下啊

54:38.320 --> 54:40.480
就用导入一个图片

54:40.480 --> 54:43.360
然后呢用GS生成一个图片元素

54:43.360 --> 54:44.720
一辈几元素

54:44.720 --> 54:45.760
把夹到一边上去

54:45.760 --> 54:47.680
给SRCC这准备这个地址

54:47.680 --> 54:48.160
试一下

54:50.660 --> 54:51.060
好没

54:51.700 --> 54:52.980
好接下来我们继续讲啊

54:54.580 --> 54:55.380
如果说中途呢

54:55.380 --> 54:56.420
你听着就觉得

54:56.420 --> 54:57.380
信息量比较大的话

54:57.380 --> 54:58.260
你可以休息一下

54:58.260 --> 54:59.060
其实目前呢

54:59.060 --> 55:00.820
真正的我们开发有影响的

55:00.820 --> 55:01.540
就这么两块

55:01.540 --> 55:03.300
一个是学会启动开发服务器

55:03.300 --> 55:03.940
潘晓武

55:03.940 --> 55:05.140
一个呢是学会

55:05.460 --> 55:06.580
动态的过去资源路径

55:07.380 --> 55:07.860
其他的呢

55:07.860 --> 55:09.140
很多都是都需要了解

55:09.780 --> 55:11.620
啊因为这些这些知识呢

55:11.620 --> 55:13.620
都不是相对比较独立的啊

55:13.620 --> 55:15.380
他们之间感恼性比较低

55:16.500 --> 55:17.460
啊如果说觉得累的话

55:17.460 --> 55:18.180
可以休息一会啊

55:18.180 --> 55:19.860
反正我们今天一天就搞定这个事

55:19.860 --> 55:21.140
一天过去绝对能搞定

55:22.740 --> 55:24.180
好接下来看下一个

55:24.180 --> 55:26.740
缺省的文件和后罪名

55:27.460 --> 55:29.060
啊这个其实我们就非常简单了

55:29.060 --> 55:30.660
也就是什么意思呢

55:30.660 --> 55:32.180
就是你导入GS的时候

55:32.180 --> 55:34.020
你可以省略点GS

55:34.100 --> 55:35.380
你可以省略这个点GS

55:35.380 --> 55:36.340
就这么简单

55:37.700 --> 55:39.540
啊如果说你这里一个文件夹

55:39.540 --> 55:41.220
比方说这里有一个随便来一个吧

55:42.500 --> 55:42.820
Home

55:43.620 --> 55:46.260
这个Home文件夹里边有个index的GS

55:46.260 --> 55:48.740
那如果说我们要导入这个index的GS

55:51.980 --> 55:53.180
啊比方说这样写啊

55:53.180 --> 55:54.140
导出一个字

55:54.140 --> 55:56.380
那我如果说在Made.GS里边导入

55:58.140 --> 55:59.180
导入这个index

55:59.180 --> 56:00.780
Home里边的index我怎么导入呢

56:04.220 --> 56:04.700
说啊

56:05.660 --> 56:07.020
应该是DIR接纲Home

56:07.580 --> 56:07.900
对吧

56:07.900 --> 56:09.020
然后里边一个index

56:09.580 --> 56:10.220
DIRGS

56:10.220 --> 56:12.220
好首先我看一下这里边可以怎么简写

56:12.620 --> 56:14.140
DIRGS可以省略

56:14.140 --> 56:15.740
叫做缺省的后罪名

56:15.740 --> 56:16.940
也可以省略

56:16.940 --> 56:18.300
省略过后它自动就认为

56:19.100 --> 56:20.620
它自动就会去找DIRGS

56:21.100 --> 56:21.740
对吧

56:21.740 --> 56:22.700
以前呢在那个

56:23.740 --> 56:25.180
呃浏览器环境里边

56:25.180 --> 56:26.780
GS module里边是不能省略的啊

56:27.500 --> 56:28.940
好如果说这个

56:28.940 --> 56:30.140
如果说你导入这个文

56:30.140 --> 56:31.100
这个是个文件夹

56:31.900 --> 56:33.260
你连这个东西都可以省略

56:34.060 --> 56:36.140
当你省略文件名的时候

56:36.140 --> 56:38.140
它会自动的去文件夹里边找

56:38.140 --> 56:39.500
那个index.GS

56:39.500 --> 56:40.700
就这么简单

56:40.700 --> 56:41.740
好我们来输出一下这个Home

56:43.180 --> 56:44.060
好看一下流量器

56:45.420 --> 56:46.380
是不是找到了

56:46.380 --> 56:47.180
对吧

56:47.180 --> 56:48.300
是一样的

56:48.300 --> 56:49.740
就这么简单你看吧

56:49.740 --> 56:50.860
导入这个Home

56:50.860 --> 56:52.380
如果说存在Home.GS

56:52.380 --> 56:53.900
那么可以省略点GS

56:55.020 --> 56:55.980
导入这个Movie

56:55.980 --> 56:57.260
如果说Movie是一个目录

56:57.260 --> 56:58.380
比方说这里是个目录

56:58.380 --> 56:58.860
对吧

56:58.860 --> 56:59.820
那么它导入就是

56:59.820 --> 57:01.660
Movie下面的index.GS

57:01.660 --> 57:03.020
就这么就这么一回事

57:04.220 --> 57:05.180
简单吧

57:05.180 --> 57:07.500
这个网上跟我们写个代码是有相关的

57:07.500 --> 57:08.860
你要学会能够

57:08.860 --> 57:11.180
你要知道它可以省略后绝名

57:12.220 --> 57:13.660
甚至可以省略文件名

57:14.540 --> 57:16.860
只要你的文件名是index.GS

57:16.860 --> 57:18.620
你只需要导入它的目录就可以了

57:20.140 --> 57:20.860
好这一块

57:21.900 --> 57:22.620
好试一下啊

57:22.620 --> 57:23.420
都要去试一下

57:23.420 --> 57:24.220
不然没有印象

57:25.740 --> 57:26.940
好试一下就建个目录

57:26.940 --> 57:28.460
建个index.GS导入

57:28.460 --> 57:28.860
输出

57:28.860 --> 57:29.260
试一下

57:30.300 --> 57:30.700
好了没

57:31.340 --> 57:32.380
好咱们继续

57:33.420 --> 57:34.540
其实这些东西都很简单

57:34.540 --> 57:35.580
每一块都很简单

57:35.580 --> 57:36.140
比较多

57:37.340 --> 57:37.820
下一个

57:38.220 --> 57:39.260
路径别名

57:40.700 --> 57:42.220
因为我们这个工程化

57:42.220 --> 57:44.380
它是解决复杂项目的

57:45.100 --> 57:46.860
你要说那个简单项目里边

57:46.860 --> 57:48.620
你根本就用不到工程化

57:48.620 --> 57:49.580
而复杂项目呢

57:49.580 --> 57:50.540
有个特点就是

57:50.540 --> 57:51.660
它的文件夹呀

57:51.660 --> 57:53.020
嵌套层是那个织身

57:54.220 --> 57:56.060
堪称需要投入目悬

57:57.100 --> 57:57.820
就是

57:57.820 --> 57:59.820
因为它是很多开发的一起的开发

57:59.820 --> 58:02.060
都在这个src目度下面开发

58:02.220 --> 58:03.340
这是张商开发的文件夹

58:03.340 --> 58:04.620
这是李氏开发的文件夹

58:05.900 --> 58:07.420
这是邓哥开发的文件夹

58:08.300 --> 58:10.140
而且文件夹那边还要套文件夹

58:10.860 --> 58:12.300
文件夹那边还要套文件夹

58:12.940 --> 58:13.900
套的特别深

58:13.900 --> 58:15.260
那比方说在这个文件夹那边

58:15.260 --> 58:16.140
我要去用什么

58:16.140 --> 58:17.660
用这个index.GS

58:18.620 --> 58:20.140
或者说我要用这个a.png

58:20.700 --> 58:21.660
比方说来吧

58:21.660 --> 58:22.300
来一个吧

58:27.810 --> 58:28.690
我这边呢去

58:29.570 --> 58:30.210
写个函数吧

58:30.210 --> 58:30.930
导出一个函数

58:30.930 --> 58:31.970
随便下来一个

58:35.490 --> 58:37.090
然后这边呢

58:37.090 --> 58:38.530
我要去这个函数的作用呢

58:38.530 --> 58:39.330
去生成一个

58:39.330 --> 58:41.170
我这里面也要用一个些query

58:41.970 --> 58:43.490
要用节棍的时候导出现在的玩意

58:44.850 --> 58:45.250
好

58:45.250 --> 58:46.210
比方说我这个地方呢

58:46.210 --> 58:47.890
我就创建一个

58:47.890 --> 58:49.170
我这边不创建图片了

58:49.570 --> 58:51.010
我这边把这个代码扔过来

58:54.260 --> 58:54.820
创建一个

58:55.380 --> 58:56.180
创建一个东西

58:56.180 --> 58:57.380
这个图片地址呢

58:57.380 --> 58:58.020
我是不要从

58:58.420 --> 58:59.300
我从哪里拿呢

58:59.300 --> 59:00.340
我要做这样子写

59:01.460 --> 59:02.340
Url

59:02.340 --> 59:02.980
Front

59:02.980 --> 59:03.460
哪里的

59:03.460 --> 59:04.020
点儿的鞋杠

59:04.020 --> 59:04.820
也一开始可能

59:04.820 --> 59:06.020
这种开发方式呢

59:06.100 --> 59:06.900
大家不太习惯

59:06.900 --> 59:07.780
慢慢习惯啊

59:07.780 --> 59:09.220
这种方式你一旦习惯了

59:09.220 --> 59:10.180
你就再也受不了了

59:10.180 --> 59:11.060
那种传统开发的

59:12.180 --> 59:13.620
导出再返回

59:14.180 --> 59:15.220
找到A点儿png

59:15.940 --> 59:16.900
说什么意思呢

59:16.900 --> 59:17.540
就是

59:17.540 --> 59:18.420
比方说我来背掉

59:18.420 --> 59:19.140
当然这样子写完

59:19.140 --> 59:20.020
肯定是没问题的

59:20.020 --> 59:21.060
我们导入进来

59:21.060 --> 59:21.620
运行一下

59:23.780 --> 59:25.140
create image

59:28.510 --> 59:30.990
moviead

59:30.990 --> 59:32.190
因为它是index的节子

59:32.190 --> 59:33.230
所以说我可以省略这个

59:33.230 --> 59:33.950
我们建立

59:33.950 --> 59:34.110
好

59:34.110 --> 59:35.070
接下来我们调用这个函数

59:35.550 --> 59:36.510
调用这个函数

59:36.590 --> 59:37.710
帮我们来创建一张图片

59:39.310 --> 59:40.030
刷新

59:40.910 --> 59:41.470
刷新

59:41.470 --> 59:42.030
是不是没问题

59:43.470 --> 59:44.270
那么现在问题就是

59:44.270 --> 59:45.470
这边不好看

59:46.190 --> 59:47.070
就这么一个问题

59:47.710 --> 59:49.070
要点点点点点点

59:49.070 --> 59:49.790
往上返回

59:49.790 --> 59:50.110
对吧

59:50.110 --> 59:50.590
不好看

59:51.310 --> 59:52.590
那么怎么来让它好看呢

59:52.590 --> 59:53.230
非常简单

59:53.230 --> 59:54.430
因为我们路径别人又来这儿

59:55.710 --> 59:57.150
你看效果一模一样的

59:57.150 --> 59:58.270
这就是路径别人

59:58.270 --> 01:00:00.430
你说它名字觉得很高大上

01:00:00.430 --> 01:00:01.470
其实就这么简单

01:00:02.110 --> 01:00:03.150
你可以一般来说

01:00:03.150 --> 01:00:03.790
这个路径别人

01:00:03.790 --> 01:00:04.830
你可以自己设置的

01:00:05.470 --> 01:00:06.110
一般来说

01:00:06.270 --> 01:00:08.670
我们用ata来表示src目录

01:00:09.230 --> 01:00:09.870
当然这些东西

01:00:09.870 --> 01:00:11.310
在打包结果里边都不存在了

01:00:11.310 --> 01:00:12.110
全部都不存在了

01:00:12.110 --> 01:00:13.470
全部给你替换成真实的路径

01:00:14.590 --> 01:00:15.870
连这些导入语句都没有

01:00:16.990 --> 01:00:17.310
好吧

01:00:17.310 --> 01:00:19.070
这就是路径别名

01:00:19.470 --> 01:00:20.990
这个玩意对我们开发是有影响的

01:00:21.550 --> 01:00:24.990
要学会使用别名简化导入代码

01:00:26.590 --> 01:00:27.070
使用ata

01:00:28.110 --> 01:00:28.430
OK

01:00:28.430 --> 01:00:29.150
这是路径别名

01:00:29.630 --> 01:00:29.870
好

01:00:29.870 --> 01:00:31.070
下面这个GS兼容性

01:00:31.070 --> 01:00:32.990
那么这个玩意对我们开发没有影响

01:00:32.990 --> 01:00:35.070
我们就抽一抽一眼就完事了

01:00:36.190 --> 01:00:37.230
因为我们有的时候呢

01:00:37.230 --> 01:00:38.430
去写一些GS

01:00:38.430 --> 01:00:40.270
我们把这个全部注释掉

01:00:42.030 --> 01:00:43.630
当然这样的意味着就啥都没了

01:00:44.590 --> 01:00:46.910
有的时候我们要去写一些GS

01:00:46.910 --> 01:00:47.950
那么这些GS呢

01:00:47.950 --> 01:00:49.470
可能会有一些兼容性问题

01:00:50.430 --> 01:00:50.990
比较

01:00:54.110 --> 01:00:55.470
看一下随便来写一个吧

01:00:56.830 --> 01:00:57.950
写一个async

01:00:59.790 --> 01:01:00.270
方形

01:01:02.980 --> 01:01:03.460
test

01:01:04.580 --> 01:01:04.980
好

01:01:05.620 --> 01:01:06.340
我们调一个函数

01:01:07.780 --> 01:01:09.140
那如果说遇到一些ES

01:01:09.140 --> 01:01:11.220
就是一些不兼容的流量器

01:01:11.220 --> 01:01:13.860
就是版本比较旧的流量器

01:01:13.860 --> 01:01:15.220
它是不是这个关键是它的不兼容

01:01:16.340 --> 01:01:18.020
或者说一些API promise

01:01:19.540 --> 01:01:21.220
或者是一些素组的一些新的API

01:01:21.780 --> 01:01:24.420
那么这些都可能会造成一些兼容性问题

01:01:25.140 --> 01:01:26.660
所以说我们以前呢

01:01:26.660 --> 01:01:28.340
要自己人工的去处理

01:01:28.340 --> 01:01:29.540
那挺麻烦的

01:01:30.180 --> 01:01:31.460
有了未拍过之后呢

01:01:31.460 --> 01:01:33.300
它会自动帮我们处理兼容性问题

01:01:33.300 --> 01:01:33.540
好

01:01:33.540 --> 01:01:34.180
我们来看一下

01:01:34.580 --> 01:01:35.540
它怎么来处理的

01:01:38.960 --> 01:01:40.960
npm说必须打包

01:01:44.160 --> 01:01:45.360
看一下我们打包结果

01:01:45.840 --> 01:01:46.560
GS里边

01:01:49.600 --> 01:01:50.960
怎么有这么多东西呢

01:01:51.520 --> 01:01:52.080
有没有发现

01:01:53.040 --> 01:01:54.720
怎么会有这么多东西呢

01:01:54.720 --> 01:01:55.840
我就这么一行带

01:01:56.720 --> 01:01:58.160
你要说用到结块儿了吗

01:01:58.160 --> 01:01:59.280
我没有用结块儿啊

01:01:59.280 --> 01:02:00.640
你看我把这两行带一注释掉

01:02:01.360 --> 01:02:02.800
再打包就是空的GS

01:02:03.840 --> 01:02:04.480
GS都没了

01:02:05.680 --> 01:02:06.640
空的了对吧

01:02:06.640 --> 01:02:08.000
也就是我们就这两行带

01:02:08.880 --> 01:02:10.880
它为什么会出来这么多东西呢

01:02:10.960 --> 01:02:12.240
它就在做兼容性处理

01:02:13.200 --> 01:02:14.320
它里边把这个

01:02:14.320 --> 01:02:16.080
它发现这个东西有兼容性问题

01:02:16.080 --> 01:02:17.520
那么它就会把它去掉

01:02:17.840 --> 01:02:19.040
然后用一些别的方式

01:02:19.040 --> 01:02:20.560
把我们带码转换过后

01:02:20.560 --> 01:02:22.240
使能够实现一样的效果

01:02:22.240 --> 01:02:23.280
一模一样的效果

01:02:24.400 --> 01:02:25.520
所以它多了这么多的带码

01:02:25.520 --> 01:02:27.200
就在做兼容性问题处理

01:02:27.760 --> 01:02:28.560
所以我们不用担心

01:02:28.560 --> 01:02:29.680
这些是兼容性问题的

01:02:29.680 --> 01:02:32.800
只需要想到什么新的带码

01:02:32.800 --> 01:02:33.360
随便用

01:02:34.800 --> 01:02:35.520
随便用

01:02:35.520 --> 01:02:38.080
然后兼容性问题交给它来处理

01:02:38.720 --> 01:02:39.440
就这么简单

01:02:40.960 --> 01:02:42.160
我再举个例子

01:02:42.160 --> 01:02:44.240
比方说现在新版本的GS

01:02:44.240 --> 01:02:45.040
ES标准里面

01:02:45.040 --> 01:02:46.000
它允许你这样子写

01:02:47.040 --> 01:02:48.480
比方说我这里有个变量

01:02:50.480 --> 01:02:51.600
team就随便来一个

01:02:51.600 --> 01:02:52.080
一

01:02:53.920 --> 01:02:54.640
输出T

01:02:56.000 --> 01:02:56.320
二

01:02:58.580 --> 01:02:59.300
啥意思呢

01:02:59.300 --> 01:03:00.820
就T有值

01:03:00.820 --> 01:03:02.100
这个表达式的意思就是

01:03:02.100 --> 01:03:03.220
T如果说有值

01:03:03.220 --> 01:03:03.780
我就用T

01:03:04.420 --> 01:03:05.220
T没有值

01:03:05.220 --> 01:03:06.180
我就用后边的值

01:03:06.900 --> 01:03:08.100
就有点像货者

01:03:08.100 --> 01:03:08.500
对吧

01:03:08.500 --> 01:03:09.620
我们来运行打包

01:03:14.140 --> 01:03:14.940
好来看一下

01:03:16.220 --> 01:03:19.500
当然它更加粗暴一点

01:03:19.500 --> 01:03:20.860
它直接跟我们输出一了

01:03:20.860 --> 01:03:21.980
那么这些兼容性问题

01:03:21.980 --> 01:03:22.860
它都会给你处理

01:03:23.420 --> 01:03:23.820
对吧

01:03:23.820 --> 01:03:24.860
它自动处理的

01:03:24.860 --> 01:03:25.420
那么这里呢

01:03:25.420 --> 01:03:26.140
又有两个文件

01:03:26.140 --> 01:03:27.580
设计到两个文件给大家

01:03:27.580 --> 01:03:28.380
简单说一下

01:03:28.380 --> 01:03:29.180
你不需要去了解

01:03:29.180 --> 01:03:31.340
你不需要去写配里面的东西

01:03:31.340 --> 01:03:32.220
简单说一下

01:03:32.220 --> 01:03:33.180
一个是babel的

01:03:33.180 --> 01:03:34.140
config的GS

01:03:34.540 --> 01:03:35.660
这个GS呢

01:03:35.660 --> 01:03:36.540
它就是在未拍的

01:03:36.540 --> 01:03:37.420
在打包过程中

01:03:38.540 --> 01:03:39.420
它会指

01:03:39.420 --> 01:03:41.260
通过这个GS来进行配置

01:03:41.260 --> 01:03:42.620
告诉未拍

01:03:42.620 --> 01:03:43.500
要对哪些

01:03:44.460 --> 01:03:45.260
语法呀

01:03:45.260 --> 01:03:46.380
API进行兼容

01:03:47.020 --> 01:03:48.940
它主要是起这么一个目的

01:03:48.940 --> 01:03:50.620
告诉未拍要对哪些东西

01:03:50.620 --> 01:03:51.740
进行兼容性处理

01:03:51.740 --> 01:03:52.780
这个东西一般来说

01:03:52.780 --> 01:03:53.900
打工程的时候给你配置好

01:03:53.900 --> 01:03:54.540
你不需要管

01:03:55.100 --> 01:03:56.140
另外一个文件呢

01:03:56.140 --> 01:03:57.740
叫做browserless RC

01:03:58.300 --> 01:03:59.820
这个文件就告诉他

01:03:59.820 --> 01:04:00.860
我兼容性的范围

01:04:00.860 --> 01:04:01.900
比方说这个文件

01:04:01.900 --> 01:04:02.380
我告诉他

01:04:02.380 --> 01:04:03.100
告诉未拍

01:04:03.100 --> 01:04:03.980
你注意要

01:04:03.980 --> 01:04:05.180
你要对这个erthink

01:04:05.180 --> 01:04:07.180
这个语法要进行兼容性处理

01:04:07.740 --> 01:04:08.940
其他可以不用管

01:04:08.940 --> 01:04:10.540
但是要对他来进行兼容性处理

01:04:10.540 --> 01:04:11.020
举个例子

01:04:11.180 --> 01:04:15.180
然后这个文件呢

01:04:15.180 --> 01:04:16.380
他就告诉未拍

01:04:16.380 --> 01:04:18.060
说你在

01:04:18.060 --> 01:04:19.580
比方对他要进行兼容性处理

01:04:19.580 --> 01:04:21.020
那我要兼容哪些流量器的

01:04:21.020 --> 01:04:22.780
兼容的流量器版本越低

01:04:22.780 --> 01:04:24.620
那我兼容性的代码可能就越多

01:04:24.620 --> 01:04:25.580
所以说呢

01:04:25.580 --> 01:04:27.020
这个是告诉他一个流量器范围

01:04:27.020 --> 01:04:29.180
你看这个代码这个配置什么意思

01:04:29.180 --> 01:04:29.900
告诉你

01:04:29.900 --> 01:04:30.780
告诉那个未拍

01:04:30.780 --> 01:04:31.500
我这边

01:04:31.500 --> 01:04:35.100
你要把市场分额大于1%的

01:04:35.100 --> 01:04:37.580
流量器都要进行兼容

01:04:37.580 --> 01:04:39.180
这些流量器里边

01:04:39.180 --> 01:04:40.780
最近三个版本

01:04:41.100 --> 01:04:42.780
要进行兼容性处理

01:04:42.780 --> 01:04:44.780
在老的版本里不用管

01:04:44.780 --> 01:04:46.140
然后还有一个条件就是

01:04:46.140 --> 01:04:47.980
这些流量器的还存在

01:04:47.980 --> 01:04:49.900
还没有被官方放弃

01:04:49.900 --> 01:04:51.020
没死

01:04:51.020 --> 01:04:52.460
lost dead

01:04:52.460 --> 01:04:54.700
存在就这么个意思

01:04:54.700 --> 01:04:56.620
这是告诉你

01:04:56.620 --> 01:04:58.060
兼容的流量器范围

01:04:58.060 --> 01:05:00.540
这个是对哪些语法进行兼容

01:05:00.540 --> 01:05:01.580
简单了解一下就行了

01:05:01.580 --> 01:05:03.420
你不需要去写了

01:05:03.420 --> 01:05:06.220
你无需至少具体的配置方式

01:05:06.220 --> 01:05:07.580
直到他会做兼容性处理

01:05:07.580 --> 01:05:09.580
然后再知道一点

01:05:09.660 --> 01:05:10.700
就是说

01:05:10.700 --> 01:05:12.380
你兼容性越好

01:05:12.380 --> 01:05:15.020
你最终生存的打包结果代码就越多

01:05:15.020 --> 01:05:16.380
来自一定的

01:05:16.380 --> 01:05:18.700
你兼容性越好

01:05:18.700 --> 01:05:22.540
你打包结果的代码就越多

01:05:22.540 --> 01:05:23.580
因为他要做兼容性处理

01:05:23.580 --> 01:05:27.040
他肯定要加入一些额外的代码

01:05:27.040 --> 01:05:29.680
打包结果就越多

01:05:29.680 --> 01:05:31.200
好 接下来这是兼容性

01:05:31.200 --> 01:05:33.120
对我们开发也没有什么影响

01:05:33.120 --> 01:05:35.200
打包压缩

01:05:35.200 --> 01:05:36.640
这个也是了解一下就行了

01:05:36.640 --> 01:05:38.000
他对我们的开发也没有影响

01:05:38.000 --> 01:05:40.560
就是他在打包的时候

01:05:40.640 --> 01:05:42.240
他会进行把文件进行压缩

01:05:42.240 --> 01:05:43.600
你看压缩一些乱七八糟的玩意

01:05:43.600 --> 01:05:44.320
你看这个东西

01:05:44.320 --> 01:05:46.160
是不是压成这样子

01:05:46.160 --> 01:05:48.400
有点像你们用了一些第三方库

01:05:48.400 --> 01:05:49.040
对不对

01:05:49.040 --> 01:05:50.960
他说代码压缩过后就是这样子

01:05:50.960 --> 01:05:52.000
那他怎么压缩的

01:05:52.000 --> 01:05:55.280
他就是利用一些构建工具来进行压缩的

01:05:55.280 --> 01:05:57.360
除了压缩之压缩的好处

01:05:57.360 --> 01:05:59.120
还有什么肯定是显而易见

01:05:59.120 --> 01:06:00.800
他把那些换行服

01:06:00.800 --> 01:06:02.720
注释给你全部去掉了

01:06:02.720 --> 01:06:04.160
来缩减打包体积

01:06:04.160 --> 01:06:05.440
因为介绍的体积越大

01:06:05.440 --> 01:06:06.640
说明到时候

01:06:06.640 --> 01:06:07.920
传输的量就越大

01:06:07.920 --> 01:06:08.400
对吧

01:06:08.400 --> 01:06:09.600
所以说他会把个体积的

01:06:09.600 --> 01:06:11.920
尽量跟你缩减去掉换行服去掉空格

01:06:13.040 --> 01:06:15.040
然后除了除了就是压缩之外

01:06:15.040 --> 01:06:16.080
还会进行混淆

01:06:16.080 --> 01:06:17.040
什么叫混淆了

01:06:17.040 --> 01:06:18.880
就是把一些变量的名字给你改了

01:06:20.080 --> 01:06:20.960
比方说我这里

01:06:24.560 --> 01:06:26.240
我这里有一个函

01:06:26.240 --> 01:06:28.720
我这里来吧

01:06:28.720 --> 01:06:29.760
我这里写一个变量

01:06:30.960 --> 01:06:32.000
然后就写个函数

01:06:33.360 --> 01:06:33.920
increase

01:06:36.560 --> 01:06:37.120
a加加

01:06:38.080 --> 01:06:40.320
cxinterval

01:06:44.220 --> 01:06:44.780
increase

01:06:46.540 --> 01:06:47.900
比方说我写这么一个函

01:06:47.900 --> 01:06:48.940
写这么一个代码

01:06:48.940 --> 01:06:49.900
接下来我们再打打包

01:06:50.860 --> 01:06:51.820
这个把变量名

01:06:52.860 --> 01:06:53.500
弄长一点

01:06:56.620 --> 01:06:57.020
打包

01:07:01.360 --> 01:07:01.920
好看一下

01:07:04.080 --> 01:07:05.280
他那些变量都给我去掉了

01:07:05.280 --> 01:07:06.480
因为他觉得这个变量没用

01:07:06.480 --> 01:07:07.520
因为这个increase

01:07:07.520 --> 01:07:08.560
以为要增加了变量

01:07:08.560 --> 01:07:10.480
但这个变量好像别的地方也没有什么用

01:07:10.480 --> 01:07:11.040
对吧

01:07:11.120 --> 01:07:13.200
大家那我再来写个increase interval

01:07:15.360 --> 01:07:16.480
这个每个一秒钟

01:07:17.680 --> 01:07:18.800
增加一下变量

01:07:18.800 --> 01:07:19.760
那么这边呢

01:07:19.760 --> 01:07:20.800
我在每个

01:07:21.760 --> 01:07:24.000
一秒钟输出一下这个变量

01:07:24.000 --> 01:07:24.800
输出number

01:07:24.800 --> 01:07:26.160
那他把变量给我保留

01:07:27.360 --> 01:07:27.920
好打包

01:07:28.960 --> 01:07:30.800
主要是关于他那个变量名字是不是变了

01:07:31.840 --> 01:07:33.200
你看那个变量名字是不是变了

01:07:35.040 --> 01:07:35.760
对不对

01:07:35.760 --> 01:07:38.080
而且这个1000变成了什么1,1,3

01:07:38.080 --> 01:07:39.520
这知道一个1,1,3吗

01:07:39.600 --> 01:07:42.800
其实就是1000的那种数字说写方式

01:07:42.800 --> 01:07:45.120
1就表示10的10为底

01:07:45.120 --> 01:07:46.160
3为密

01:07:46.160 --> 01:07:46.720
对吧

01:07:46.720 --> 01:07:48.080
1的10的3次方

01:07:48.080 --> 01:07:49.280
1乘110的3次方

01:07:49.280 --> 01:07:50.400
他就这样子写了

01:07:50.400 --> 01:07:52.160
他为什么要这样的变化呢

01:07:52.160 --> 01:07:53.200
有两个好处

01:07:53.200 --> 01:07:54.240
第一个好处

01:07:54.240 --> 01:07:55.440
进一步缩减

01:07:56.880 --> 01:07:58.240
我们的包体移

01:07:58.240 --> 01:07:59.520
你看我们这么长的变量

01:07:59.520 --> 01:08:00.800
如果到处要用这个变量的话

01:08:00.800 --> 01:08:01.760
这里要几个字符

01:08:01.760 --> 01:08:02.720
1,2,3,4,5,6

01:08:02.720 --> 01:08:03.680
6个字符对吧

01:08:03.680 --> 01:08:05.280
他把它缩减成这个变量过后了

01:08:05.920 --> 01:08:06.480
是不是就

01:08:06.960 --> 01:08:08.880
制服就数量就减少很多了

01:08:09.040 --> 01:08:09.680
那你会说

01:08:09.680 --> 01:08:10.720
那这样子一变的话

01:08:10.720 --> 01:08:12.400
那可阅读性是不是降低了

01:08:12.400 --> 01:08:14.640
谁让你去阅读这个代码呀

01:08:14.640 --> 01:08:15.440
我们阅读的是什么

01:08:15.440 --> 01:08:16.720
阅读的是元代嘛

01:08:16.720 --> 01:08:18.960
操作的改变的也是元代嘛

01:08:18.960 --> 01:08:20.960
打包结构谁让你去阅读啊

01:08:20.960 --> 01:08:21.280
对吧

01:08:21.280 --> 01:08:21.920
打包结构就是

01:08:21.920 --> 01:08:23.200
尽量越小越好

01:08:24.080 --> 01:08:26.160
所以他可以做这么一个混淆

01:08:26.160 --> 01:08:27.040
把变量名字啊

01:08:27.040 --> 01:08:27.680
喊数名字啊

01:08:27.680 --> 01:08:28.560
都必须进行加书

01:08:29.840 --> 01:08:30.720
然后除此之外

01:08:30.720 --> 01:08:31.840
混淆还有个好处

01:08:31.840 --> 01:08:33.200
由于这个打包结构

01:08:33.200 --> 01:08:34.240
它们不好阅读

01:08:35.200 --> 01:08:36.640
就会让什么

01:08:36.720 --> 01:08:39.840
那些想查看我们元代码的人呢

01:08:39.840 --> 01:08:41.120
就不是那么好查看的

01:08:41.120 --> 01:08:42.960
看那个元代码也很难看得懂

01:08:42.960 --> 01:08:43.280
对吧

01:08:43.280 --> 01:08:44.560
那个名字已经被压缩过了

01:08:44.560 --> 01:08:45.680
被混淆小过了

01:08:45.680 --> 01:08:47.200
他就看不懂这个元代码

01:08:47.200 --> 01:08:48.720
也可以保护我们的知识产权

01:08:49.440 --> 01:08:50.240
有这么一个好处

01:08:50.240 --> 01:08:51.360
这里混淆

01:08:51.360 --> 01:08:52.720
都是自动完成的

01:08:52.720 --> 01:08:54.080
你看这些问题以前存在存在

01:08:54.080 --> 01:08:54.640
存在

01:08:54.640 --> 01:08:55.520
只是我们不管

01:08:55.520 --> 01:08:56.640
没有人管这个问题

01:08:58.400 --> 01:08:59.520
好接下来看下一个

01:08:59.520 --> 01:09:00.640
这个东西跟我们开发

01:09:00.640 --> 01:09:01.200
没有什么影响

01:09:01.200 --> 01:09:03.040
你老老实实写元代码就像

01:09:04.160 --> 01:09:05.120
元码地图

01:09:05.120 --> 01:09:05.760
什么意思呢

01:09:06.480 --> 01:09:07.360
这个问题是

01:09:09.120 --> 01:09:10.640
为了帮助我们调试的

01:09:11.360 --> 01:09:11.840
啥意思

01:09:12.800 --> 01:09:13.120
你看

01:09:14.000 --> 01:09:15.920
比方说我举个例子

01:09:16.880 --> 01:09:18.560
我这边如果说

01:09:18.560 --> 01:09:21.600
Number加加加到一定程度了

01:09:21.600 --> 01:09:23.840
我这边去做了一件事

01:09:25.360 --> 01:09:26.880
做啥事可以让他报夺我呢

01:09:29.600 --> 01:09:31.760
如果Number大于10

01:09:33.680 --> 01:09:34.480
或者大于5

01:09:36.720 --> 01:09:37.440
大于5

01:09:37.440 --> 01:09:38.480
我们就Slow

01:09:39.760 --> 01:09:41.120
扔一个错误

01:09:46.420 --> 01:09:48.020
随便扔一个错误出来

01:09:48.580 --> 01:09:49.300
魔力什么

01:09:49.300 --> 01:09:50.260
魔力我们代码中

01:09:50.260 --> 01:09:51.300
有的时候报错了

01:09:52.500 --> 01:09:53.540
这个时候有点麻烦

01:09:53.540 --> 01:09:54.820
因为你报错了

01:09:54.820 --> 01:09:55.780
现在谁在报错

01:09:55.780 --> 01:09:57.060
是这个代码在报错吗

01:09:57.060 --> 01:09:57.780
不是

01:09:57.780 --> 01:09:58.580
是这个代码

01:10:00.820 --> 01:10:02.500
因为我们最终运行的是打包结果

01:10:03.220 --> 01:10:04.980
无论你是用开发服务器

01:10:04.980 --> 01:10:07.220
还是用Rombill的

01:10:07.220 --> 01:10:08.660
运行的最终都是打包结果

01:10:09.620 --> 01:10:10.340
对吧

01:10:10.340 --> 01:10:11.860
它会在这里报错

01:10:11.860 --> 01:10:12.820
那么在这里报错

01:10:12.820 --> 01:10:14.420
你能看得懂这个代码

01:10:15.220 --> 01:10:15.780
看得懂吗

01:10:15.780 --> 01:10:16.180
看不懂

01:10:17.380 --> 01:10:18.340
所以我们来看一下

01:10:19.060 --> 01:10:20.020
NPM装

01:10:20.740 --> 01:10:21.060
射

01:10:22.020 --> 01:10:24.020
我们在一个开发环境里面看一下

01:10:28.700 --> 01:10:29.100
二

01:10:29.100 --> 01:10:29.660
一个

01:10:29.660 --> 01:10:30.060
四

01:10:30.620 --> 01:10:30.860
五

01:10:31.740 --> 01:10:32.140
报错

01:10:33.980 --> 01:10:34.300
好

01:10:34.300 --> 01:10:35.020
报错了

01:10:35.020 --> 01:10:36.060
然后我们来看一下

01:10:36.780 --> 01:10:37.900
这里报错的位置

01:10:37.900 --> 01:10:38.540
点进去

01:10:39.980 --> 01:10:41.180
你会发现很神奇

01:10:42.060 --> 01:10:44.380
它为什么会显示到这儿来呢

01:10:44.940 --> 01:10:46.380
不是运行在这个代码吗

01:10:46.380 --> 01:10:49.180
它不是应该在这里给我显示错误吗

01:10:49.740 --> 01:10:52.460
它为什么给我显示的是我们原代码的错误呢

01:10:52.460 --> 01:10:54.540
这就是归功于原码地图

01:10:55.580 --> 01:10:57.660
由于我们最终运行的是这种代码

01:10:57.660 --> 01:10:58.620
所以说这种代码的话

01:10:58.620 --> 01:10:59.980
看上去叫吐

01:11:00.540 --> 01:11:01.420
你根本就看不懂一个代码

01:11:01.420 --> 01:11:02.460
它到底在做啥

01:11:02.940 --> 01:11:04.620
所以说它就出现了原码地图

01:11:04.620 --> 01:11:05.660
我们再来打包一次

01:11:05.660 --> 01:11:07.420
NPM装

01:11:07.420 --> 01:11:08.220
Build

01:11:08.860 --> 01:11:10.620
原码地图就好必是一个地图

01:11:11.580 --> 01:11:12.940
这个地图上就记录了

01:11:12.940 --> 01:11:15.980
你目前真实代码里面爆出了一个位置

01:11:15.980 --> 01:11:17.820
对应到原代码是哪个位置

01:11:18.380 --> 01:11:19.820
就处于这么一个目的

01:11:19.820 --> 01:11:21.100
有真实代码这句话

01:11:21.100 --> 01:11:22.700
它要对应到原代码的哪一句话

01:11:23.180 --> 01:11:24.140
这个原码地图是啥

01:11:24.540 --> 01:11:26.620
就是这个后续名为Map的文件

01:11:27.820 --> 01:11:28.940
这个文件你不用去看

01:11:28.940 --> 01:11:29.580
你看不懂的

01:11:32.060 --> 01:11:33.660
那你其实看一下

01:11:33.660 --> 01:11:34.300
其实也差不多

01:11:34.860 --> 01:11:37.020
你看SourcesContent

01:11:37.020 --> 01:11:39.660
就是原码的内容在这

01:11:40.780 --> 01:11:41.660
可以显成字符创了

01:11:43.660 --> 01:11:45.500
到时候有了原码地图过后

01:11:45.500 --> 01:11:47.660
冤流烂器是支持原码地图的

01:11:48.300 --> 01:11:49.660
当它发现爆出的时候

01:11:49.660 --> 01:11:51.180
同时你又有原码地图

01:11:51.660 --> 01:11:53.260
它就不会把错误给你显示到

01:11:53.260 --> 01:11:54.380
真实代码的一个位置

01:11:54.380 --> 01:11:55.500
它会给你选择显示到

01:11:55.500 --> 01:11:56.940
原码地图的一个位置

01:11:56.940 --> 01:11:58.540
这样子帮助你调试错误

01:11:58.940 --> 01:11:59.900
因为我们最终是要看

01:11:59.900 --> 01:12:00.860
原码到底哪里错了

01:12:00.860 --> 01:12:01.100
是吧

01:12:01.100 --> 01:12:02.300
谁看这个大宝结果呢

01:12:02.300 --> 01:12:02.940
就看不懂

01:12:03.420 --> 01:12:04.300
就起这么一个作用

01:12:04.700 --> 01:12:06.140
它是帮助我们调试的

01:12:08.460 --> 01:12:09.580
好这是原码地图

01:12:09.900 --> 01:12:11.020
给我们看看有什么关系

01:12:11.020 --> 01:12:11.820
没有什么关系

01:12:11.820 --> 01:12:13.340
你直接用就行了

01:12:13.340 --> 01:12:14.300
你直接写原码就行了

01:12:14.300 --> 01:12:15.420
你就会发现很神奇的

01:12:15.420 --> 01:12:16.700
它就能报道原码的位置

01:12:16.700 --> 01:12:17.340
就行了

01:12:17.340 --> 01:12:18.300
它就完成了

01:12:21.100 --> 01:12:21.420
下一个

01:12:22.540 --> 01:12:23.580
CSS工程化

01:12:24.780 --> 01:12:27.100
前面我们说的都是GS工程化

01:12:27.820 --> 01:12:29.020
都是GS工程化

01:12:29.740 --> 01:12:31.740
然后接下来把CSS工程化

01:12:31.740 --> 01:12:33.900
之前上节课说了这个劣势

01:12:33.900 --> 01:12:35.020
先把它补充完

01:12:35.020 --> 01:12:35.580
就两个

01:12:36.220 --> 01:12:37.660
一个是自动厂商前罪

01:12:38.620 --> 01:12:41.260
除了能够它转换内饰之外

01:12:41.260 --> 01:12:42.780
它其实不仅可以转换内饰

01:12:42.780 --> 01:12:43.740
还可以转换SARS

01:12:43.740 --> 01:12:45.100
还可以转换Stanus

01:12:45.100 --> 01:12:47.100
各种预编一期都可以转换

01:12:47.100 --> 01:12:49.180
我们目前就学了内饰对吧

01:12:50.140 --> 01:12:50.940
其他都差不多

01:12:51.420 --> 01:12:52.780
它除了可以转换这个

01:12:52.780 --> 01:12:54.380
因为我们刚才已经看到过这样的能力了

01:12:54.380 --> 01:12:55.420
不再重复演示了

01:12:55.420 --> 01:12:56.060
除此之外

01:12:56.060 --> 01:12:57.660
它还有具备一些别的能力

01:12:59.340 --> 01:13:00.620
因为有一些试验式代码

01:13:00.620 --> 01:13:01.820
它是有兼容性问题的

01:13:01.820 --> 01:13:03.100
比方说文举个例子

01:13:04.780 --> 01:13:05.580
就这个代码吧

01:13:06.300 --> 01:13:09.020
它就有一个兼容性问题

01:13:09.020 --> 01:13:10.540
就是这样

01:13:10.540 --> 01:13:15.550
导入index.ness

01:13:15.550 --> 01:13:16.670
or edginess

01:13:21.020 --> 01:13:21.980
最好的写法

01:13:21.980 --> 01:13:24.140
就是如果说我们要获得更好的兼容性

01:13:24.140 --> 01:13:25.420
我们要把它解成

01:13:25.420 --> 01:13:26.460
带一些厂商前罪

01:13:26.460 --> 01:13:27.340
比方说有些流量器

01:13:27.340 --> 01:13:30.060
在Flex标准出来之前

01:13:31.340 --> 01:13:33.100
它同时又支持弹性和

01:13:33.100 --> 01:13:34.700
但是要带上厂商前罪

01:13:34.700 --> 01:13:36.780
这个东西应该大概大概

01:13:36.780 --> 01:13:38.220
虽然说没见过这个东西

01:13:38.380 --> 01:13:39.020
没写过

01:13:39.020 --> 01:13:41.100
但是大概见过最有厂商前罪

01:13:41.740 --> 01:13:43.900
比方说谁请它是CSS3的

01:13:43.900 --> 01:13:45.260
我们最好加上一个厂商前罪

01:13:45.260 --> 01:13:46.940
以兼容更多的流量器

01:13:46.940 --> 01:13:48.940
那如果说我们平时写代码的话

01:13:48.940 --> 01:13:49.820
都要这样子写的话

01:13:49.820 --> 01:13:50.460
那就类似了

01:13:51.420 --> 01:13:53.260
因此我们就最希望的就是

01:13:53.260 --> 01:13:54.140
这些厂商前罪的

01:13:54.140 --> 01:13:55.100
我们不用管

01:13:55.100 --> 01:13:56.140
你自动把我搞定

01:13:56.860 --> 01:13:57.980
它能不能搞定呢

01:13:57.980 --> 01:13:59.020
打包看一下就知道了

01:14:03.360 --> 01:14:03.680
好

01:14:03.680 --> 01:14:04.880
我们来看一下最终的CSS

01:14:06.960 --> 01:14:09.040
好像没有变化

01:14:09.040 --> 01:14:09.760
对吧

01:14:09.920 --> 01:14:11.360
你看CSS也有研发地图

01:14:12.000 --> 01:14:12.800
没有什么变化

01:14:14.960 --> 01:14:16.320
像这种情况下

01:14:16.320 --> 01:14:17.280
它是怎么回事呢

01:14:17.280 --> 01:14:18.320
它是要读这个

01:14:18.320 --> 01:14:20.080
你看CSS也要读这个

01:14:20.080 --> 01:14:21.200
这个是浏览器范围

01:14:21.200 --> 01:14:21.760
对吧

01:14:21.760 --> 01:14:22.960
兼容的浏览器范围

01:14:23.600 --> 01:14:24.640
因为我们这个范围

01:14:24.640 --> 01:14:25.760
因为现在很多浏览器

01:14:25.760 --> 01:14:28.160
它都支持弹性和布局了

01:14:28.160 --> 01:14:28.560
所以说

01:14:29.200 --> 01:14:30.960
它觉得这一块没有必要这样处理的

01:14:30.960 --> 01:14:33.040
处理的反而把代码变多了

01:14:33.040 --> 01:14:34.080
让打包体积增加

01:14:34.640 --> 01:14:35.680
这没有必要处理的

01:14:35.680 --> 01:14:38.160
那如果说我把浏览器的范围改一下

01:14:38.160 --> 01:14:39.280
比方说改成33

01:14:40.240 --> 01:14:43.040
你要先用过去33个版本的浏览器

01:14:43.840 --> 01:14:44.160
好

01:14:44.160 --> 01:14:45.360
我们来看一下现在打的结果

01:14:45.920 --> 01:14:46.480
一旦不够

01:14:51.020 --> 01:14:51.420
你看

01:14:52.540 --> 01:14:53.900
是不是就建筑了

01:14:53.900 --> 01:14:55.340
就是给你加上常常潜水了

01:14:56.060 --> 01:14:57.100
就这么简单

01:14:57.100 --> 01:14:58.060
这是自动完成的

01:14:58.060 --> 01:14:58.940
跟我们没关系

01:14:58.940 --> 01:15:00.860
我们只需要配置浏览器范围就行了

01:15:00.860 --> 01:15:01.900
其实范围也不用配置

01:15:01.900 --> 01:15:02.860
别人用的配置好的

01:15:04.300 --> 01:15:04.540
好

01:15:04.540 --> 01:15:05.260
都是这一块

01:15:06.620 --> 01:15:06.860
好

01:15:06.860 --> 01:15:07.500
另外一个了

01:15:07.500 --> 01:15:09.180
CSS工程化里边还有一个点

01:15:09.180 --> 01:15:10.780
就是叫CSS module

01:15:11.500 --> 01:15:12.380
这个问题是

01:15:13.260 --> 01:15:14.540
解决我们一个大问题的

01:15:14.540 --> 01:15:15.580
超级大的问题

01:15:17.500 --> 01:15:18.060
什么问题

01:15:18.060 --> 01:15:20.460
你们写CSS代码里面觉得最恶心的地方在哪

01:15:24.220 --> 01:15:25.740
最恶心的地方

01:15:25.740 --> 01:15:28.780
就在于那样是容易冲突

01:15:31.150 --> 01:15:31.550
是不是

01:15:32.510 --> 01:15:33.950
特别是页面力多了

01:15:33.950 --> 01:15:34.590
东西也多了

01:15:34.590 --> 01:15:35.630
不要说复杂页面了

01:15:35.630 --> 01:15:36.750
就是单个页面

01:15:37.550 --> 01:15:38.270
东西也多了

01:15:38.270 --> 01:15:39.790
那样是特别容易冲突

01:15:40.350 --> 01:15:41.390
我们以前咋解决的

01:15:41.950 --> 01:15:44.430
是不是要写很多的成绩选择器

01:15:44.430 --> 01:15:46.430
然后通过命名规范去命名

01:15:46.430 --> 01:15:46.830
对不对

01:15:47.470 --> 01:15:48.590
通过这种方式去命名

01:15:49.550 --> 01:15:51.470
那么这样子好不好呢

01:15:51.470 --> 01:15:52.190
第一个

01:15:52.190 --> 01:15:53.470
我们要写很多代码

01:15:53.470 --> 01:15:54.350
那是一定的

01:15:54.350 --> 01:15:55.950
要多写一些很多成绩

01:15:55.950 --> 01:15:56.350
对不对

01:15:56.990 --> 01:15:57.790
第二个就是

01:15:58.750 --> 01:16:00.270
利用成绩选择器的话

01:16:01.070 --> 01:16:01.790
也会增加

01:16:03.070 --> 01:16:05.950
也会影响到CSS选中的效率

01:16:07.070 --> 01:16:08.350
CSS就希望的是

01:16:08.990 --> 01:16:10.590
CSS效率最高的是什么情况

01:16:10.590 --> 01:16:12.190
就是你尽量使用那些人的器

01:16:13.710 --> 01:16:16.510
然后不要有成绩

01:16:16.590 --> 01:16:18.110
但是没有成绩的话

01:16:18.110 --> 01:16:18.750
就会导致

01:16:19.310 --> 01:16:20.590
特别容易导致央视冲突

01:16:21.870 --> 01:16:22.750
这些都是问题

01:16:22.750 --> 01:16:24.430
这根本就是那样是容易冲突

01:16:26.350 --> 01:16:27.070
那怎么办呢

01:16:27.710 --> 01:16:29.150
就是靠CSS module

01:16:29.150 --> 01:16:30.670
有了这个玩意过后

01:16:30.670 --> 01:16:31.310
我告诉你

01:16:32.030 --> 01:16:34.350
以后再也不用写任何成绩了

01:16:34.350 --> 01:16:35.390
所有的内容都是顶层的

01:16:35.870 --> 01:16:36.910
不会有任何冲突

01:16:38.190 --> 01:16:39.230
也不用去导在那边

01:16:39.230 --> 01:16:39.950
也不用去想

01:16:39.950 --> 01:16:41.070
应该用什么样的命名规范

01:16:41.070 --> 01:16:41.870
就随便命名

01:16:41.870 --> 01:16:42.670
怎么舒服怎么来

01:16:43.470 --> 01:16:44.750
它不会有任何冲突

01:16:44.750 --> 01:16:45.550
怎么回事呢

01:16:48.220 --> 01:16:48.860
看着

01:16:51.010 --> 01:16:53.330
比方说我这里再写个CSS

01:16:53.330 --> 01:16:54.370
用NESS也可以

01:16:54.370 --> 01:16:55.170
都小

01:16:55.170 --> 01:16:56.610
比方说我们写个B

01:16:57.650 --> 01:16:58.530
这个CSS文件

01:16:58.530 --> 01:16:59.810
我们用一个特别的名字

01:16:59.810 --> 01:17:01.570
叫做Multi-Dness

01:17:02.610 --> 01:17:04.450
你看我在这里面写一些那样式

01:17:05.410 --> 01:17:06.050
A

01:17:07.250 --> 01:17:07.810
B

01:17:10.100 --> 01:17:10.580
C

01:17:11.140 --> 01:17:12.020
随便写个样式

01:17:13.220 --> 01:17:13.700
Colors

01:17:18.220 --> 01:17:19.020
随便下写

01:17:19.020 --> 01:17:19.820
随便写个样式

01:17:20.460 --> 01:17:22.220
好接下来我们来打包运行

01:17:22.220 --> 01:17:23.340
我们把这个包进来

01:17:28.720 --> 01:17:31.680
B.Multi-Dness

01:17:32.560 --> 01:17:33.840
当我们打包的时候

01:17:33.840 --> 01:17:35.040
我也派个一旦发现

01:17:35.040 --> 01:17:36.080
你依赖的是一个

01:17:36.080 --> 01:17:37.440
那个央视文件名

01:17:37.440 --> 01:17:39.360
叫做Multi-Dness

01:17:39.360 --> 01:17:41.680
Satasa.Multi-Dness

01:17:41.680 --> 01:17:42.960
是这样的一个样式

01:17:42.960 --> 01:17:43.920
那么它就会

01:17:43.920 --> 01:17:45.680
自动的开启CSS module

01:17:45.680 --> 01:17:47.440
你看一下开启到CSS module过后

01:17:47.440 --> 01:17:48.640
会有什么样的特点

01:17:50.480 --> 01:17:50.880
打包

01:17:52.560 --> 01:17:53.520
好打包完了

01:17:53.520 --> 01:17:54.480
我们来看一下CSS

01:17:55.200 --> 01:17:59.040
它会把我们的内名变成这个

01:17:59.920 --> 01:18:00.560
A

01:18:00.560 --> 01:18:01.040
B

01:18:01.040 --> 01:18:01.280
C

01:18:01.840 --> 01:18:02.800
是不是不认识了

01:18:02.800 --> 01:18:03.600
对吧

01:18:03.600 --> 01:18:05.360
它没有让你去阅读这个代码

01:18:05.360 --> 01:18:06.480
也不需要你认识

01:18:06.480 --> 01:18:08.080
它只是通过这种方式

01:18:08.080 --> 01:18:09.840
你就可以至少可以知道

01:18:09.840 --> 01:18:10.880
打包结果里面

01:18:10.880 --> 01:18:12.480
一定是没有内名冲突的

01:18:12.480 --> 01:18:13.520
因为这些内名

01:18:13.520 --> 01:18:14.640
到了打包结果里面

01:18:14.640 --> 01:18:15.520
全部会变化

01:18:15.520 --> 01:18:16.400
当然前的条件

01:18:16.400 --> 01:18:18.160
你必须要开启CSS module

01:18:18.160 --> 01:18:19.520
就是个文件名是这样子

01:18:20.400 --> 01:18:21.520
内名全部会变化

01:18:22.240 --> 01:18:23.920
这个变化过后是一个哈希子

01:18:24.080 --> 01:18:25.680
它不可能有内名冲突的

01:18:25.680 --> 01:18:26.560
它是一个唯一的字

01:18:27.920 --> 01:18:28.640
如果说你比方了

01:18:28.640 --> 01:18:29.280
你再来一个

01:18:30.080 --> 01:18:31.600
这里我们用Carry嘛

01:18:31.600 --> 01:18:32.240
换一个名字

01:18:32.800 --> 01:18:33.120
Blue

01:18:35.040 --> 01:18:35.520
ABC

01:18:35.520 --> 01:18:36.160
我们再来一个

01:18:37.520 --> 01:18:38.640
CSS

01:18:38.640 --> 01:18:39.120
再来一个

01:18:41.440 --> 01:18:42.000
C

01:18:42.000 --> 01:18:43.120
的Module

01:18:43.120 --> 01:18:44.000
ABC

01:18:44.000 --> 01:18:44.800
D

01:18:44.800 --> 01:18:45.840
E

01:18:45.840 --> 01:18:46.160
F

01:18:47.200 --> 01:18:48.000
Broad

01:18:48.000 --> 01:18:48.400
Night

01:18:50.240 --> 01:18:50.560
Red

01:18:51.440 --> 01:18:51.840
Night

01:18:51.840 --> 01:18:52.160
Blue

01:18:54.640 --> 01:18:55.120
Night

01:18:56.160 --> 01:18:56.480
Dream

01:18:57.680 --> 01:18:58.080
好

01:18:58.080 --> 01:18:58.560
那你看

01:18:59.840 --> 01:19:01.200
这来再来一个A和B

01:19:02.000 --> 01:19:02.720
你看

01:19:02.720 --> 01:19:04.080
你说这两个是不是冲突了

01:19:04.080 --> 01:19:04.320
对吧

01:19:05.200 --> 01:19:05.360
好

01:19:05.360 --> 01:19:06.160
我们来都倒入

01:19:06.400 --> 01:19:06.880
都倒入

01:19:07.440 --> 01:19:08.080
一个是B

01:19:08.080 --> 01:19:08.560
一个是C

01:19:09.600 --> 01:19:10.000
看一下

01:19:13.950 --> 01:19:14.190
好

01:19:15.150 --> 01:19:16.030
你看会有冲突吗

01:19:17.870 --> 01:19:18.350
不会吧

01:19:18.910 --> 01:19:19.950
不会有任何的冲突

01:19:19.950 --> 01:19:20.270
看得没

01:19:22.030 --> 01:19:22.510
好

01:19:22.510 --> 01:19:23.310
也就是说了

01:19:23.310 --> 01:19:24.350
我们之后

01:19:24.350 --> 01:19:26.350
只要担心有内名冲突的地方

01:19:26.430 --> 01:19:28.430
我们都可以用CSS的Module

01:19:28.430 --> 01:19:29.790
只要你把这这样

01:19:29.790 --> 01:19:31.550
只要在这种文件里面的内名

01:19:31.550 --> 01:19:32.350
当然像这种文件

01:19:32.350 --> 01:19:33.150
它不会变化的

01:19:33.790 --> 01:19:34.830
还有元素选择器

01:19:34.830 --> 01:19:35.790
它不会变化的

01:19:35.790 --> 01:19:37.550
就主要是内选择器

01:19:37.550 --> 01:19:38.590
内选择器

01:19:38.590 --> 01:19:39.630
如果说你担心有冲突

01:19:39.630 --> 01:19:40.830
你给它写成这种

01:19:40.830 --> 01:19:42.430
开启CSS的Module

01:19:42.430 --> 01:19:43.790
而且我强烈建议大家

01:19:44.670 --> 01:19:45.710
使用CSS的Module

01:19:46.830 --> 01:19:47.310
这样子呢

01:19:47.310 --> 01:19:48.110
除了内名

01:19:48.110 --> 01:19:48.750
大胆的用

01:19:48.750 --> 01:19:49.390
每个文件里面

01:19:49.390 --> 01:19:50.670
你只要保证一个文件里面

01:19:50.670 --> 01:19:51.790
没有冲民就行了

01:19:51.790 --> 01:19:53.390
一个文件它那样是又不多

01:19:53.390 --> 01:19:53.790
对吧

01:19:53.790 --> 01:19:54.910
你以后工程化之后

01:19:54.990 --> 01:19:56.590
你把它分成很多很多的小文件

01:19:57.150 --> 01:19:58.430
一个文件里面那样是又不多

01:19:58.430 --> 01:19:59.470
它不会有冲民的

01:20:00.350 --> 01:20:01.390
其他的不同的文件里面

01:20:01.390 --> 01:20:02.190
它不可能有冲民

01:20:03.470 --> 01:20:04.110
好那么这样子

01:20:04.110 --> 01:20:05.550
来就会设计到一个新的问题

01:20:05.550 --> 01:20:07.070
那我怎么用的问题是

01:20:07.710 --> 01:20:08.350
来吧

01:20:08.350 --> 01:20:08.750
来吧

01:20:08.750 --> 01:20:10.110
这个东西跟我们开发有影响的

01:20:11.230 --> 01:20:11.790
比方说吧

01:20:13.390 --> 01:20:15.950
我这边要创建一个

01:20:15.950 --> 01:20:16.830
到杰克瑞

01:20:18.110 --> 01:20:19.230
我要创建一个

01:20:23.150 --> 01:20:24.670
创建两个A7元素

01:20:24.990 --> 01:20:26.030
一个A7元素

01:20:26.030 --> 01:20:27.230
用这边的A

01:20:28.110 --> 01:20:28.910
一个A7元素

01:20:28.910 --> 01:20:29.630
用这边的A

01:20:30.590 --> 01:20:31.070
9个例子

01:20:31.790 --> 01:20:32.190
来吧

01:20:32.190 --> 01:20:33.630
我创建两个A7元素

01:20:36.670 --> 01:20:37.710
第一个A7元素

01:20:39.230 --> 01:20:39.550
然后呢

01:20:39.550 --> 01:20:40.430
给它设置一个文本

01:20:41.470 --> 01:20:42.750
文本是什么呢

01:20:42.750 --> 01:20:46.270
是B样式中的

01:20:47.150 --> 01:20:48.830
内样式A

01:20:50.670 --> 01:20:52.270
B叫Module的列式

01:20:54.700 --> 01:20:55.740
中的内样式A

01:20:55.740 --> 01:20:56.140
然后呢

01:20:56.140 --> 01:20:57.180
下面一个A7

01:20:57.180 --> 01:20:58.460
是C点

01:20:59.020 --> 01:20:59.420
也就是说

01:20:59.420 --> 01:21:00.380
我这个A7元素

01:21:00.380 --> 01:21:02.460
来用它里面的那个内样式A

01:21:02.460 --> 01:21:02.780
它呢

01:21:02.780 --> 01:21:04.060
要用它里面的A内样式A

01:21:04.060 --> 01:21:04.780
你看

01:21:04.780 --> 01:21:05.420
这个咋用了

01:21:05.420 --> 01:21:05.820
问题是

01:21:06.380 --> 01:21:07.260
我能不能这样子写

01:21:08.380 --> 01:21:09.260
我能不能这样子写

01:21:09.820 --> 01:21:10.300
不行啊

01:21:10.300 --> 01:21:11.100
你这样子写

01:21:11.100 --> 01:21:11.900
它最终的样式

01:21:11.900 --> 01:21:12.860
不是这个名字

01:21:12.860 --> 01:21:13.580
它不是这个名字

01:21:13.580 --> 01:21:14.860
它是一个乱七八糟的名字

01:21:14.860 --> 01:21:16.700
但是我怎么知道它是乱七八糟

01:21:16.700 --> 01:21:17.740
它到底生成的是哪个

01:21:17.740 --> 01:21:18.620
乱七八糟的名字呢

01:21:19.580 --> 01:21:20.300
非常简单

01:21:21.340 --> 01:21:21.900
看一下下面

01:21:24.980 --> 01:21:26.340
导入CSS的时候

01:21:26.340 --> 01:21:27.220
一旦它开启了

01:21:27.220 --> 01:21:28.180
CSS module

01:21:28.180 --> 01:21:30.100
它就会给你返回一个东西

01:21:30.100 --> 01:21:30.660
一个对象

01:21:32.420 --> 01:21:33.060
前条件啊

01:21:33.060 --> 01:21:34.340
你得开启CSS module

01:21:35.380 --> 01:21:36.180
你可以导入它

01:21:37.460 --> 01:21:38.900
我们把这两个对象输出一下

01:21:39.780 --> 01:21:40.820
输出Styles1

01:21:41.300 --> 01:21:42.020
Styles2

01:21:43.060 --> 01:21:43.540
好

01:21:43.540 --> 01:21:44.420
人品有装备

01:21:44.420 --> 01:21:44.980
装设

01:21:44.980 --> 01:21:45.460
看一下啊

01:21:54.100 --> 01:21:54.340
好

01:21:54.340 --> 01:21:54.980
你看

01:21:54.980 --> 01:21:55.300
第一个

01:21:56.500 --> 01:21:57.700
它是不是把我们那个

01:21:57.700 --> 01:22:00.100
我们圆骂里面的那个内样式名字

01:22:00.100 --> 01:22:01.620
它最终生成的内样式名字

01:22:01.620 --> 01:22:02.260
做了个硬设

01:22:02.980 --> 01:22:03.300
B

01:22:04.420 --> 01:22:04.900
C

01:22:04.900 --> 01:22:06.180
然后这个Object里面

01:22:06.180 --> 01:22:06.820
A

01:22:06.820 --> 01:22:07.860
B是不是做了硬设

01:22:07.860 --> 01:22:08.740
那就简单了呗

01:22:10.420 --> 01:22:11.780
我要添加哪个

01:22:11.780 --> 01:22:13.300
我要添加这个

01:22:13.300 --> 01:22:15.620
B这个模块里面的内样式A

01:22:16.340 --> 01:22:16.820
A

01:22:17.780 --> 01:22:19.540
所以找到了那个名字了

01:22:19.540 --> 01:22:20.500
它生成了那个名字了

01:22:21.140 --> 01:22:21.780
然后这个

01:22:23.940 --> 01:22:24.980
Styles2.A

01:22:25.620 --> 01:22:26.020
对吧

01:22:26.660 --> 01:22:27.940
这个代码也好阅读

01:22:27.940 --> 01:22:29.300
而且那个名字呢

01:22:29.300 --> 01:22:30.100
也非常的OK

01:22:30.660 --> 01:22:32.180
最后能把Apane2

01:22:33.140 --> 01:22:34.260
找出一个名字

01:22:34.260 --> 01:22:35.060
看一下吧

01:22:39.780 --> 01:22:40.420
你看是不是

01:22:41.540 --> 01:22:42.980
看一下最终的检查

01:22:44.020 --> 01:22:45.620
你看内样式并变成这样子了

01:22:45.620 --> 01:22:46.260
对吧

01:22:46.260 --> 01:22:47.540
你不需要去读这个内样式

01:22:47.540 --> 01:22:49.380
你只需要读圆骂就可以了

01:22:49.380 --> 01:22:50.500
圆骂能看懂就行

01:22:50.500 --> 01:22:50.900
对吧

01:22:51.540 --> 01:22:53.140
因为我们最终关心的是圆骂

01:22:53.140 --> 01:22:54.740
谁关心它出来是什么样子

01:22:54.740 --> 01:22:56.100
打包结果是什么样子

01:22:56.100 --> 01:22:57.620
它只要能跟正常运行有关系

01:22:58.580 --> 01:22:58.740
好

01:22:58.740 --> 01:22:59.860
这是StylesMotion

01:22:59.860 --> 01:23:01.060
我们讲Styles工程化

01:23:01.060 --> 01:23:02.500
就补充这么两个东西

01:23:05.730 --> 01:23:06.210
好

01:23:06.290 --> 01:23:07.090
那么至此

01:23:07.810 --> 01:23:09.410
我们整个WePack的学习

01:23:11.730 --> 01:23:12.370
高于断落了

01:23:13.490 --> 01:23:14.370
比说东西多吗

01:23:14.370 --> 01:23:14.530
多

01:23:15.090 --> 01:23:16.930
但是对我们开发的影响呢

01:23:17.650 --> 01:23:18.610
就这么一些东西

01:23:19.250 --> 01:23:21.010
学会开启动一个开发服务器

01:23:22.450 --> 01:23:23.010
看效果

01:23:24.050 --> 01:23:25.810
学会动态获取资源路径

01:23:27.090 --> 01:23:29.170
因为资源路径它打包结果会变化

01:23:29.170 --> 01:23:30.610
学会省略文件和后维名

01:23:31.250 --> 01:23:32.450
你这边后边的什么

01:23:32.450 --> 01:23:33.330
点击也是不用写

01:23:33.330 --> 01:23:35.410
后边的音这个时候点击也是不用写

01:23:35.490 --> 01:23:36.610
学会使用别名

01:23:37.170 --> 01:23:37.890
简化导入

01:23:39.090 --> 01:23:40.370
学会使用Styles module

01:23:41.090 --> 01:23:42.450
对我们开发就这么影响

01:23:42.450 --> 01:23:43.250
其他没什么影响

01:23:44.130 --> 01:23:45.970
但是这些东西你最好了解

01:23:45.970 --> 01:23:47.010
你知道它怎么回事

01:23:47.570 --> 01:23:49.650
你便于你理解整个程序

01:23:50.210 --> 01:23:51.410
你不用去知道

01:23:51.410 --> 01:23:52.450
它的工程怎么搭建出来的

01:23:52.450 --> 01:23:53.090
但是你要挥用

01:23:55.010 --> 01:23:56.210
最后呢给大家说一下

01:23:56.770 --> 01:23:57.490
看一个热闹

01:23:58.130 --> 01:23:59.330
实际上WePack

01:24:00.210 --> 01:24:01.170
它没有那么神奇

01:24:02.770 --> 01:24:04.130
很多我们刚才讲的

01:24:04.290 --> 01:24:05.490
这些乱七八糟的很多东西

01:24:06.850 --> 01:24:09.250
我们是把很多功劳

01:24:09.250 --> 01:24:09.890
全部规矩

01:24:09.890 --> 01:24:11.250
规矩于它身上了

01:24:11.250 --> 01:24:12.530
或者是很多怨念

01:24:12.530 --> 01:24:13.650
全部规矩到WePack身上了

01:24:13.650 --> 01:24:14.850
它其实没有做那么多事

01:24:15.650 --> 01:24:18.050
它只是站在巨人的肩膀上而已

01:24:18.050 --> 01:24:19.890
它是用到了很多技术

01:24:19.890 --> 01:24:20.610
凑在一起的

01:24:21.490 --> 01:24:22.290
下面看一张图

01:24:24.690 --> 01:24:25.810
然后我们刚才学到WePack

01:24:25.810 --> 01:24:27.890
好像这些是全是WePack做的

01:24:27.890 --> 01:24:28.770
实际上不是的

01:24:29.410 --> 01:24:30.690
你像这个东西

01:24:30.690 --> 01:24:31.330
叫Babel

01:24:32.210 --> 01:24:32.770
巴别塔

01:24:34.450 --> 01:24:36.450
巴别塔是历史上一个典故

01:24:36.450 --> 01:24:37.890
它是用来表示统一

01:24:37.890 --> 01:24:38.530
统一那个

01:24:39.330 --> 01:24:42.210
表示统一人类语言的象征

01:24:43.330 --> 01:24:45.090
然后我们有很多的纪业式版本

01:24:45.090 --> 01:24:47.330
那么我们能不能把统一通过这个babel

01:24:48.050 --> 01:24:50.210
它会对纪业式代码进行降级处理

01:24:50.210 --> 01:24:51.090
你写一些高级的纪业

01:24:51.090 --> 01:24:52.850
再把它转成低级的纪业式代码

01:24:52.850 --> 01:24:53.650
全部统一转换

01:24:54.290 --> 01:24:55.570
所以我们纪业式代码的先融性

01:24:55.570 --> 01:24:56.530
是靠它处理的

01:24:57.730 --> 01:24:59.090
然后CSS那一块呢

01:25:00.290 --> 01:25:01.730
什么开启CSS module

01:25:02.690 --> 01:25:05.010
还有就是这个厂商前维

01:25:05.010 --> 01:25:06.450
是靠PoseCSS

01:25:07.010 --> 01:25:09.170
然后还有就是压缩CSS

01:25:09.170 --> 01:25:10.530
它也是靠PoseCSS

01:25:10.530 --> 01:25:12.050
还包括Nest代码的转换

01:25:12.050 --> 01:25:13.650
是靠Nest我们学过的对吧

01:25:14.050 --> 01:25:16.130
WePack是用到了很多很多的技术

01:25:16.130 --> 01:25:18.050
当然我这个图还是画得非常简略的

01:25:18.530 --> 01:25:20.050
实际上它有哪些东西呢

01:25:20.690 --> 01:25:23.580
看一下这个安装依赖

01:25:25.420 --> 01:25:26.460
DevDependence

01:25:27.580 --> 01:25:29.420
为什么是开发依赖

01:25:29.420 --> 01:25:30.940
因为像这些工具

01:25:31.020 --> 01:25:34.220
像这些就是WePack用到了的一些工具

01:25:34.940 --> 01:25:37.100
这些工具都是只是在开发阶段使用

01:25:37.420 --> 01:25:38.540
打包完成过后

01:25:39.980 --> 01:25:41.340
不要说这些东西了

01:25:41.340 --> 01:25:43.820
连络的Module 90的这些玩意全部都不需要了

01:25:43.820 --> 01:25:45.500
打包完成过就只需要它就行了

01:25:46.780 --> 01:25:48.140
所以说这都是开发依赖

01:25:49.020 --> 01:25:50.700
但是我们Pace代码中用到的呢

01:25:50.700 --> 01:25:51.900
我们一般来说把它

01:25:51.900 --> 01:25:55.420
习惯上把它作为那个普通依赖

01:25:55.420 --> 01:25:58.060
就像结块我们在代码运行过程中要用到的

01:25:58.060 --> 01:26:00.380
一般习惯上把它作为普通依赖

01:26:01.020 --> 01:26:03.260
它用到的东西很多

01:26:04.700 --> 01:26:06.060
那么有个点大家需要了解

01:26:06.460 --> 01:26:08.300
它怎么样把这些技术整合在一起的呢

01:26:08.300 --> 01:26:09.260
它是通过两个东西

01:26:09.260 --> 01:26:09.900
一个是插件

01:26:10.700 --> 01:26:11.500
一个是夹展器

01:26:13.260 --> 01:26:15.340
其实WePack还没有做太多的事

01:26:15.340 --> 01:26:16.300
它就是分析

01:26:16.700 --> 01:26:18.540
它就是分析一个入口模块

01:26:18.860 --> 01:26:20.540
你这个入口模块用到了哪些东西

01:26:21.180 --> 01:26:22.540
你是一张图片对吧

01:26:22.540 --> 01:26:24.060
好兄弟那个兄弟过来

01:26:24.460 --> 01:26:25.420
你在负责转换图片

01:26:26.060 --> 01:26:27.500
你用到的是一个戒业式是吧

01:26:27.500 --> 01:26:28.460
好那个Babel

01:26:28.860 --> 01:26:29.260
你过来

01:26:29.340 --> 01:26:31.100
你再负责转换界式

01:26:31.100 --> 01:26:32.060
把它降级

01:26:32.540 --> 01:26:33.980
你用到的是一个NES对吧

01:26:33.980 --> 01:26:35.260
好你这个NES过来

01:26:35.260 --> 01:26:37.180
你来给我把它转换到CSS

01:26:37.500 --> 01:26:38.700
好转换到CSS过后

01:26:38.700 --> 01:26:39.260
你再来

01:26:39.260 --> 01:26:41.180
你把CSS给我进行压缩

01:26:41.180 --> 01:26:42.060
加入钱罪

01:26:42.300 --> 01:26:44.300
它其实就是在吩咐别的小弟

01:26:44.300 --> 01:26:45.420
来帮它完成这个事

01:26:46.860 --> 01:26:47.740
那么怎么来吩咐的

01:26:47.740 --> 01:26:48.540
它是通过两个

01:26:48.540 --> 01:26:49.100
一个是插件

01:26:49.100 --> 01:26:49.740
也是夹展器

01:26:49.740 --> 01:26:50.460
了解就行了

01:26:51.020 --> 01:26:52.140
所以说我们这个工程

01:26:52.140 --> 01:26:53.260
你们看到的这个工程

01:26:53.580 --> 01:26:55.500
并不是屏空冒出来的

01:26:56.220 --> 01:26:58.060
也不是WePack一个人的事情

01:26:58.540 --> 01:27:00.620
它是上图的技术

01:27:00.620 --> 01:27:01.500
就这些技术

01:27:01.820 --> 01:27:03.820
加上一些乱七报道的其他技术

01:27:03.820 --> 01:27:05.180
我就会具体展开说了

01:27:05.180 --> 01:27:06.300
还有很多很多东西

01:27:07.020 --> 01:27:08.140
然后加上老师的

01:27:08.140 --> 01:27:09.740
就是我给你们写的一些配置

01:27:09.740 --> 01:27:10.540
配置在哪呢

01:27:11.420 --> 01:27:12.540
以后我们再看一下吧

01:27:13.420 --> 01:27:14.620
最终完成的

01:27:14.620 --> 01:27:15.340
成像给你的

01:27:15.340 --> 01:27:16.220
就是这个整个工程

01:27:16.780 --> 01:27:18.140
只不过你不需要再关心

01:27:18.140 --> 01:27:19.340
你只需要用就行了

01:27:19.340 --> 01:27:20.300
你会用就ok

01:27:21.100 --> 01:27:22.060
好最后来我们来说一下

01:27:22.060 --> 01:27:23.500
这个工程中你看不懂的文件

01:27:24.220 --> 01:27:25.660
这个玩意就是我们讲过了

01:27:25.660 --> 01:27:27.100
是浏览器范围的

01:27:28.780 --> 01:27:30.300
那么这个玩意会被那个

01:27:30.700 --> 01:27:31.900
会被背部

01:27:33.580 --> 01:27:34.860
给GS出击兼容的

01:27:35.500 --> 01:27:37.580
会被Pose CSS

01:27:37.740 --> 01:27:39.180
处理CSS兼容性的

01:27:39.900 --> 01:27:41.660
或者是做CSS转换的

01:27:41.660 --> 01:27:43.260
会被这两工具所使用

01:27:45.100 --> 01:27:46.700
然后这个东西没有什么好说的

01:27:46.700 --> 01:27:48.300
这个东西有一个点

01:27:48.300 --> 01:27:49.020
给大家说一下

01:27:49.020 --> 01:27:52.620
它一定会去掉这个NodeMod 90

01:27:52.620 --> 01:27:54.380
一般来说也会去掉这个Dest

01:27:54.380 --> 01:27:56.220
打包结果

01:27:56.860 --> 01:27:57.260
为什么呢

01:27:57.260 --> 01:27:59.180
因为我们如果说需要这个工程的话

01:27:59.180 --> 01:28:00.380
我们拿到工程过后

01:28:00.380 --> 01:28:01.580
只需要运行个命令

01:28:01.580 --> 01:28:02.460
就可以重新打包

01:28:02.460 --> 01:28:02.780
对吧

01:28:02.780 --> 01:28:03.660
所以这个结果呢

01:28:03.660 --> 01:28:06.540
我们不需要进入仓库管理

01:28:08.620 --> 01:28:09.420
背部的Config

01:28:09.420 --> 01:28:10.860
那么这就是配置背部的

01:28:10.860 --> 01:28:12.220
配置那个GS降级的

01:28:13.100 --> 01:28:14.540
这两个文件没什么好说的

01:28:14.540 --> 01:28:15.580
Pose CSS Config

01:28:15.580 --> 01:28:17.260
这是配置那个Pose CSS的

01:28:18.540 --> 01:28:19.820
最后一个WeiPack Config

01:28:21.100 --> 01:28:22.700
老师在这里面写了很多的配置

01:28:22.700 --> 01:28:23.660
这就是配置WeiPack

01:28:23.660 --> 01:28:25.260
WeiPack功能很强大

01:28:25.420 --> 01:28:26.700
它可以做各种那样的事情

01:28:27.420 --> 01:28:28.860
你不同的配置又有不同的事情

01:28:28.860 --> 01:28:29.900
我随便看几个

01:28:29.900 --> 01:28:30.460
你不需要看懂

01:28:31.420 --> 01:28:32.460
比方说入口文件

01:28:32.460 --> 01:28:33.500
你看这里是可以配置的

01:28:34.140 --> 01:28:35.020
没有点解释

01:28:35.020 --> 01:28:35.740
是可以配置的

01:28:36.380 --> 01:28:37.500
你可以配置为别的玩意儿

01:28:38.380 --> 01:28:39.740
而打包的结果目录

01:28:40.300 --> 01:28:42.780
我这里使用的是电神目录

01:28:42.780 --> 01:28:44.700
这是比较常见的一种做法

01:28:44.700 --> 01:28:45.500
一个名字

01:28:45.500 --> 01:28:46.620
当然你可以用别的名字

01:28:47.500 --> 01:28:48.780
你看生成的文件名

01:28:49.180 --> 01:28:50.220
GS文件名

01:28:50.220 --> 01:28:51.420
APP橫杠

01:28:51.420 --> 01:28:53.180
后面是五味的哈希纸

01:28:53.180 --> 01:28:54.380
你看这都可以配置的

01:28:55.340 --> 01:28:57.100
包括要不要生成原码地图

01:28:57.660 --> 01:28:58.300
都可以配置的

01:28:58.300 --> 01:28:59.340
开发服务器的端口

01:29:00.140 --> 01:29:00.940
8080

01:29:00.940 --> 01:29:02.220
还有路径别名

01:29:03.260 --> 01:29:04.140
这是可以配置的

01:29:04.140 --> 01:29:05.500
我用的是ATA这个别名

01:29:06.060 --> 01:29:07.420
那么可以换成其他别名

01:29:07.420 --> 01:29:07.820
都可以

01:29:08.860 --> 01:29:09.100
你看

01:29:09.580 --> 01:29:10.300
很多都可以配置

01:29:10.300 --> 01:29:11.340
你看CSS

01:29:11.340 --> 01:29:12.700
当你遇到CSS的时候

01:29:12.700 --> 01:29:13.740
交给哪些东西来处理

01:29:14.380 --> 01:29:15.660
我交给了这么一些

01:29:15.660 --> 01:29:16.380
先交给Less

01:29:16.380 --> 01:29:16.860
再交给他

01:29:16.860 --> 01:29:17.420
再交给他

01:29:17.420 --> 01:29:18.380
这东西你都看不懂

01:29:18.380 --> 01:29:18.780
不用管

01:29:19.740 --> 01:29:21.100
你的MAP3 MAP4

01:29:21.100 --> 01:29:22.060
交给谁来处理

01:29:22.060 --> 01:29:23.660
你的图片交给怎么来处理

01:29:24.380 --> 01:29:26.300
你的GS怎么来处理

01:29:26.860 --> 01:29:27.420
你看这些

01:29:27.420 --> 01:29:28.460
还要包括一些插件

01:29:29.740 --> 01:29:30.780
这些需要配置的

01:29:31.340 --> 01:29:32.140
你不用去管

01:29:32.140 --> 01:29:33.340
但是你要知道

01:29:33.340 --> 01:29:33.900
这些东西

01:29:34.860 --> 01:29:35.500
它不是说

01:29:35.500 --> 01:29:36.860
外派的天生就有的

01:29:37.980 --> 01:29:38.700
外派给提供的

01:29:38.700 --> 01:29:39.980
给我们提供了很多的能力

01:29:39.980 --> 01:29:41.420
但是需要我们去

01:29:41.420 --> 01:29:42.700
写很多很多的配置

01:29:43.740 --> 01:29:44.940
这些东西你们不用管

01:29:44.940 --> 01:29:46.140
以后你们到了公司

01:29:46.140 --> 01:29:48.060
一定是一个给打好的工程

01:29:49.900 --> 01:29:50.220
好了

01:29:50.220 --> 01:29:51.820
我们本节课就讲完了

01:29:51.820 --> 01:29:52.620
那么这节课

01:29:52.620 --> 01:29:54.700
今天我们就不再讲别的课了

01:29:55.420 --> 01:29:56.140
慢慢去消化

01:29:56.140 --> 01:29:56.780
怎么消化

01:29:57.580 --> 01:29:58.140
作业

01:29:58.140 --> 01:29:58.540
听我讲

01:29:59.820 --> 01:30:00.220
第一个

01:30:01.100 --> 01:30:02.620
做回顾和总结

01:30:02.620 --> 01:30:03.980
分两个阶段来做

01:30:03.980 --> 01:30:05.340
第一个回顾和总结

01:30:07.180 --> 01:30:08.460
首先保证听懂课程

01:30:09.180 --> 01:30:10.700
该念的地方去念了

01:30:10.700 --> 01:30:11.180
然后

01:30:12.060 --> 01:30:13.180
不要看这边

01:30:13.180 --> 01:30:14.060
不要看这一部分

01:30:15.100 --> 01:30:15.660
看什么呢

01:30:15.660 --> 01:30:15.980
看这

01:30:17.420 --> 01:30:17.900
看目录

01:30:21.220 --> 01:30:21.860
第一个作业

01:30:22.420 --> 01:30:23.300
看着目录

01:30:23.300 --> 01:30:23.780
核心

01:30:25.300 --> 01:30:26.180
老师讲了啥呀

01:30:27.060 --> 01:30:27.860
说出来

01:30:27.860 --> 01:30:29.220
不要在心里边想

01:30:29.220 --> 01:30:30.580
一定要说出来

01:30:30.580 --> 01:30:31.940
核心人以后到面试的时候

01:30:31.940 --> 01:30:32.660
啥都说不出来

01:30:32.660 --> 01:30:33.860
就是平时说的少了

01:30:33.860 --> 01:30:34.660
一定要说出来

01:30:35.300 --> 01:30:36.260
不管说的再难听

01:30:36.980 --> 01:30:37.700
一定要说出来

01:30:38.500 --> 01:30:39.220
体验这部分

01:30:39.220 --> 01:30:40.260
老师讲了啥呀

01:30:40.260 --> 01:30:40.500
输

01:30:41.220 --> 01:30:42.500
页面模板讲了啥呀

01:30:42.500 --> 01:30:43.460
public目录讲了啥

01:30:43.460 --> 01:30:43.700
说

01:30:43.700 --> 01:30:44.660
如果说实在想不起来

01:30:44.660 --> 01:30:45.540
看一下我们的文档

01:30:46.100 --> 01:30:47.220
看文档就能想起来了

01:30:48.580 --> 01:30:50.900
保证自己能够脱离这个文档

01:30:51.460 --> 01:30:52.660
把每个目录说出来

01:30:53.380 --> 01:30:54.740
每个目录说出来

01:30:54.740 --> 01:30:55.620
能够说出来

01:30:55.620 --> 01:30:56.260
地道去做

01:30:57.300 --> 01:30:57.860
第二道题

01:31:00.740 --> 01:31:01.940
脱离整个文档

01:31:01.940 --> 01:31:02.660
文档关掉

01:31:03.700 --> 01:31:05.140
你能够说出我们这节课

01:31:05.140 --> 01:31:06.020
讲了什么内容

01:31:07.700 --> 01:31:09.140
第一个讲了首先讲核心

01:31:09.140 --> 01:31:10.340
然后讲了这个体验

01:31:10.340 --> 01:31:11.460
我们也讲了什么内容

01:31:11.460 --> 01:31:13.220
后面什么public目录啊

01:31:13.220 --> 01:31:13.620
这些东西

01:31:13.620 --> 01:31:14.580
我都记不清楚

01:31:14.580 --> 01:31:16.100
你们把它复述一遍

01:31:16.100 --> 01:31:16.820
你们以后忘记了

01:31:16.820 --> 01:31:17.460
没关系

01:31:17.460 --> 01:31:18.500
只要你复述一遍

01:31:18.500 --> 01:31:20.260
你头脑里面就形成了一些

01:31:20.260 --> 01:31:21.380
对一些很重要的东西

01:31:21.380 --> 01:31:22.340
形成了深刻的印象

01:31:22.900 --> 01:31:24.340
如果说你没有去做这件事

01:31:24.420 --> 01:31:25.300
一很快就会忘记

01:31:27.220 --> 01:31:30.340
我们至少要保证核心的东西不能忘记

01:31:30.340 --> 01:31:32.260
然后其他细致末节的可以忘

01:31:32.900 --> 01:31:33.620
那么怎么办

01:31:33.620 --> 01:31:35.380
就是把这两道题把它做完

01:31:36.020 --> 01:31:36.820
一定要去做

01:31:38.500 --> 01:31:39.540
一定要去做

01:31:39.540 --> 01:31:41.540
其他的没有别的了

01:31:41.540 --> 01:31:42.900
工程化学习了之后

01:31:42.900 --> 01:31:45.140
我们明天会利用我们今天学习的知识

01:31:45.540 --> 01:31:46.340
做一个练习

01:31:46.900 --> 01:31:48.020
把工程化结束了

01:31:48.020 --> 01:31:48.740
结束工程化

01:31:48.740 --> 01:31:51.060
我们就可以大胆的进入框架的学习

01:31:51.060 --> 01:31:51.940
就最后一个步骤了

01:31:52.820 --> 01:31:53.060
好

01:31:53.060 --> 01:31:53.620
朋友们加油

01:31:54.580 --> 01:31:55.460
这一会到此了

01:31:55.460 --> 01:31:55.940
拜拜

