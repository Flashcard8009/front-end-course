WEBVTT

00:01.070 --> 00:05.770
放松啊 先放轻松 放松 放松 不要紧张

00:06.270 --> 00:10.270
今天这个课呢 是很简单很简单的

00:10.770 --> 00:13.770
保管理器 它首先面试的时候也没什么好烤的

00:13.770 --> 00:16.270
这个晚上烤啥嘛 没什么好烤的啊

00:16.270 --> 00:18.270
因为这个东西天天都要用的

00:18.270 --> 00:21.770
你说这个文档呢 你可能前期呢 还有点用

00:21.770 --> 00:23.270
后边就直接可以扔掉了

00:23.270 --> 00:26.270
因为天天都要用 忘不掉的

00:27.770 --> 00:29.070
这个是个什么东西呢

00:29.070 --> 00:33.070
它是这样子 就是咱们前端不是有很多第三方库吗

00:33.070 --> 00:36.070
那些第三方库呢 在过去呢 都是

00:36.070 --> 00:39.070
每个第三方库有自己的官方网站

00:39.070 --> 00:43.070
你进去过后呢 你就去下载它的一个介石压缩包

00:43.070 --> 00:45.070
对吧 下载下来过后呢 解压

00:45.070 --> 00:47.070
然后在烤杯底的工程里边

00:47.070 --> 00:50.070
然后呢 在这页面上用一个元素

00:50.070 --> 00:52.070
script元素去引用它 对不对

00:52.070 --> 00:55.070
这是我们以前使用第三方库的东西

00:55.070 --> 00:58.070
它的具体做法 是不是很麻烦啊 对不对

00:58.070 --> 01:01.070
当我们的前端魔幻化出现之后啊

01:01.070 --> 01:04.070
第三方库就一下子多了很多很多了

01:04.070 --> 01:06.070
占用这种传统的方式去做

01:06.070 --> 01:09.070
可不可以呢 可以 只要你不嫌烦

01:09.070 --> 01:12.070
那烦的要死 而且呢 你像有一些第三方库

01:12.070 --> 01:15.070
你要升级 也挺麻烦的 你还要重新把这个流程走一遍

01:15.070 --> 01:18.070
总之这里面会遇到很多很多比较麻烦

01:18.070 --> 01:20.070
比较难处理的问题

01:20.070 --> 01:23.070
于是呢 就有一个公司站出来说

01:23.070 --> 01:27.070
停了 大家不要这样玩了 这样玩命都没了

01:27.070 --> 01:29.070
我们要怎么来玩 你们那边

01:29.070 --> 01:31.070
诶 张山 你不是出了一个第三方库吗

01:31.070 --> 01:33.070
来 给我放我这儿来

01:33.070 --> 01:36.070
诶 那个接框诶 你们不是有个第三方库吗

01:36.070 --> 01:38.070
对吧 接框诶 放我这儿来

01:38.070 --> 01:40.070
诶 这个摩托机也是放我这儿来 全部给我放我这儿来

01:40.070 --> 01:42.070
然后我提供一个小工具

01:42.070 --> 01:45.070
只要通过这个小工具一键下载

01:45.070 --> 01:47.070
一键卸载

01:47.070 --> 01:49.070
一键升级

01:49.070 --> 01:52.070
这样子呢 就不用去那些官方网站

01:52.070 --> 01:54.070
去下载那个机也是 然后再拷贝了

01:54.070 --> 01:57.070
就这么一个东西 这就是保管理器

01:57.070 --> 01:58.070
那么什么叫包

01:58.070 --> 02:00.070
一个工程就是一个包

02:00.070 --> 02:02.070
你接框诶不是个工程吗 那里就是个包

02:02.070 --> 02:05.070
我创建的一个项目 我不也是个工程吗

02:05.070 --> 02:06.070
那我也也是个包

02:06.070 --> 02:09.070
包就是一个介石 或者是多个介石形成了一个工程

02:09.070 --> 02:11.070
它共同来解决一个问题

02:11.070 --> 02:13.070
对吧 这就是个包

02:13.070 --> 02:15.070
当然包与包之间有一些一代关系

02:15.070 --> 02:19.070
比方说我这个包 我现在的工程我是个包

02:19.070 --> 02:22.070
然后你被用到了接框诶 那么我就一代接框诶

02:22.070 --> 02:25.070
当然那一些第三方部 他也有他的一代关系

02:25.070 --> 02:28.070
比方说 举个例子像不strap

02:28.070 --> 02:30.070
你们可能没学过 没关系

02:30.070 --> 02:33.070
那么他就可以依赖接框诶

02:33.070 --> 02:35.070
依赖别的东西

02:35.070 --> 02:38.070
那么他们会形成依赖关系 就是一个包的概念

02:38.070 --> 02:40.070
一个工程就一个包 就这么简单

02:40.070 --> 02:42.070
那什么叫保管理器

02:42.070 --> 02:45.070
就是我提供一个小工具 让你管理这些包

02:45.070 --> 02:48.070
可以非常方便的下载 可以非常方便的卸载

02:48.070 --> 02:50.070
可以非常方便的升级

02:50.070 --> 02:51.070
就这么一个东西

02:51.070 --> 02:53.070
说这个可以多复杂呢

02:53.070 --> 02:55.070
就来学习这个怎么来下载一个包

02:55.070 --> 02:57.070
怎么去下载安装

02:57.070 --> 03:00.070
怎么去卸载 就完事了 对不对

03:00.070 --> 03:02.070
好 带我们来看一下

03:02.070 --> 03:04.070
这个保管理器是一个什么东西呢

03:04.070 --> 03:06.070
它可能跟大家想象的不一样

03:06.070 --> 03:08.070
它不是一个可执行文件 双击可以打开的

03:08.070 --> 03:10.070
它是一个命令航工具

03:10.070 --> 03:13.070
常见的保管理器有这些东西

03:13.070 --> 03:15.070
不过我们只需要学些npm就行了

03:15.070 --> 03:18.070
其实像后面这些东西都是基于npm做出来的

03:18.070 --> 03:20.070
只需要学它就可以了

03:20.070 --> 03:22.070
那么这个东西怎么去下载安装呢

03:22.070 --> 03:24.070
打开你的控制台

03:24.070 --> 03:26.070
就是命令航空端

03:26.070 --> 03:28.070
随便几个目楼

03:29.070 --> 03:31.070
然后你看一下这个命令

03:31.070 --> 03:34.070
npm很刚微 看能不能打印出来

03:34.070 --> 03:36.070
如果说你那边能打印出来

03:36.070 --> 03:38.070
说明你的npm已经安装了

03:38.070 --> 03:41.070
我相信99%的同学都能够打印出来

03:41.070 --> 03:42.070
应该是没问题的

03:42.070 --> 03:44.070
为什么 因为你们安装逗得的时候

03:44.070 --> 03:46.070
它就自动的安装了npm

03:46.070 --> 03:48.070
就是一起搞得出来的

03:48.070 --> 03:50.070
所以说这一块你们肯定是没问题的

03:50.070 --> 03:52.070
可能版本好不一样 那无所谓

03:53.070 --> 03:55.070
如果说这一块你没有打印出来

03:55.070 --> 03:57.070
那不好意思 你要去下载一下load

03:57.070 --> 03:58.070
要重新下载一下

03:58.070 --> 04:01.070
这是关于npm已经安装好了

04:01.070 --> 04:03.070
那接下来就是怎么去用它

04:03.070 --> 04:04.070
怎么去用它呢

04:04.070 --> 04:05.070
它有这么几个命令呢

04:05.070 --> 04:06.070
需要我们去使用

04:06.070 --> 04:09.070
首先你安装好了load之后

04:09.070 --> 04:10.070
它会有个npm

04:10.070 --> 04:12.070
接下来要做的第一件事

04:12.070 --> 04:14.070
就是配置源

04:15.070 --> 04:17.070
什么叫配置源

04:17.070 --> 04:19.070
源就是这个包的下载地址

04:19.070 --> 04:21.070
就是你当时用那个工具去下载包

04:21.070 --> 04:22.070
从哪里下载

04:22.070 --> 04:24.070
它默认是这个地址

04:25.070 --> 04:27.070
这个地址就有点慢了

04:27.070 --> 04:28.070
为什么呢

04:28.070 --> 04:30.070
我们可以到它的官方网站去看一下

04:30.070 --> 04:32.070
npm介石 官方网站

04:33.070 --> 04:35.070
你会发现它是个国外的网站

04:36.070 --> 04:39.070
因此它的保存的一些接快率

04:39.070 --> 04:40.070
那一些第三方货

04:40.070 --> 04:42.070
全部是保存在国外的服务器的

04:42.070 --> 04:44.070
所以你下载起来比较慢

04:44.070 --> 04:45.070
经常会下载包错

04:45.070 --> 04:46.070
所以我们第一件事

04:46.070 --> 04:48.070
作为我们国内玩家

04:48.070 --> 04:50.070
第一件事是要配置源

04:50.070 --> 04:52.070
就是你不要从国外的服务器下载

04:52.070 --> 04:53.070
从国内的下载

04:53.070 --> 04:56.070
那么你首先输入这个命令

04:59.450 --> 05:02.450
看一下你目前的原地址是啥

05:02.450 --> 05:03.450
你目前的原地址

05:03.450 --> 05:04.450
我这里已经改过来了

05:04.450 --> 05:05.450
所以你目前的原地址

05:05.450 --> 05:06.450
应该是这个

05:07.450 --> 05:08.450
那么这就是国外的服务器

05:08.450 --> 05:09.450
然后官方的服务器

05:09.450 --> 05:10.450
它比较慢

05:10.450 --> 05:11.450
所以你要做的事情

05:11.450 --> 05:12.450
就是运行这个命令

05:14.450 --> 05:15.450
把运行一遍

05:16.450 --> 05:17.450
运行完了过后

05:17.450 --> 05:20.450
就把它的原地址改成了淘宝

05:20.450 --> 05:22.450
淘宝镜像园

05:22.450 --> 05:24.450
咱们再来用这个第一个命令

05:24.450 --> 05:25.450
再看一下

05:25.450 --> 05:26.450
变成淘宝了

05:27.450 --> 05:28.450
首先把这一步做了

05:28.450 --> 05:29.450
这一步你这一辈子

05:30.450 --> 05:31.450
不说这一辈子

05:31.450 --> 05:33.450
你这台电脑上只需要做一次

05:33.450 --> 05:34.450
那么这个原地址

05:34.450 --> 05:35.450
改了过后就OK了

05:35.450 --> 05:36.450
好 这第一件事

05:37.450 --> 05:38.450
那么除了这个之外

05:38.450 --> 05:39.450
这都不要去背

05:39.450 --> 05:41.450
就像他要改原的时候

05:41.450 --> 05:42.450
再复制粘贴就行了

05:44.450 --> 05:45.450
好 把这件事情

05:45.450 --> 05:46.450
准备好了之后

05:46.450 --> 05:47.450
我们就来说一下

05:47.450 --> 05:48.450
平时在我们开发中

05:48.450 --> 05:50.450
我们会怎么去使用这个命令

05:51.450 --> 05:53.450
好 我们现在就来模拟

05:53.450 --> 05:54.450
我们平时开发

05:54.450 --> 05:57.450
接下来我在桌面上

05:57.450 --> 05:58.450
建立一个文件夹

05:58.450 --> 05:59.450
因为我们以后开发

05:59.450 --> 06:00.450
肯定是有一个空文件夹

06:01.450 --> 06:02.450
这里顺便说一下

06:03.450 --> 06:05.450
NPM这个工具的

06:05.450 --> 06:08.450
目前只能在漏的环境里面使用

06:09.450 --> 06:10.450
现在我又跳到漏的环境了

06:10.450 --> 06:12.450
尽管我们现在现阶段

06:12.450 --> 06:14.450
不需要学新漏的

06:14.450 --> 06:15.450
但是呢

06:15.450 --> 06:16.450
我要跟你说清楚

06:16.450 --> 06:17.450
NPM这个东西

06:17.450 --> 06:18.450
只在漏的环境里面使用

06:18.450 --> 06:19.450
那有同学要问了

06:19.450 --> 06:21.450
那既然不学新漏的

06:21.450 --> 06:22.450
那将来我们开发不诱

06:22.450 --> 06:23.450
开发一些前端程序的时候

06:23.450 --> 06:24.450
怎么说我们

06:24.450 --> 06:25.450
你怎么说我们

06:25.450 --> 06:27.450
每天都要用这个NPM呢

06:27.450 --> 06:29.450
很快就知道了

06:29.450 --> 06:30.450
后边我们讲工程话之后

06:30.450 --> 06:31.450
你就明白了

06:31.450 --> 06:33.450
原来他会这样走完

06:33.450 --> 06:34.450
好 我们这里先告诉大家

06:34.450 --> 06:35.450
只能在漏的环境里面使用

06:35.450 --> 06:36.450
所以说我们这里的课呢

06:36.450 --> 06:37.450
建立一些魔力效果

06:37.450 --> 06:39.450
都是基于漏的

06:40.450 --> 06:41.450
我们建立一个文件夹

06:41.450 --> 06:42.450
给他取个名字吧

06:42.450 --> 06:43.450
DEMO

06:43.450 --> 06:45.450
你们跟着我做

06:45.450 --> 06:46.450
好了没

06:46.450 --> 06:47.450
那么接下来呢

06:47.450 --> 06:48.450
我们把这个

06:48.450 --> 06:50.450
托到VSCode里面去

06:50.450 --> 06:52.450
好 到了VSCode之后呢

06:52.450 --> 06:54.450
我们在VSCode里面点击右键

06:54.450 --> 06:57.450
这里再集成中端中打开

06:57.450 --> 06:58.450
那么这样子呢

06:58.450 --> 06:59.450
他进入这个中端的时候

06:59.450 --> 07:01.450
就直接进入了这个目录了

07:01.450 --> 07:03.450
当然你也可以用这种方式

07:03.450 --> 07:04.450
在这里用CD

07:04.450 --> 07:07.450
在桌面上的DEMO这个目录

07:07.450 --> 07:08.450
进入它

07:09.450 --> 07:11.450
我们就在VSCode里面吧

07:11.450 --> 07:12.450
比较方便一点

07:12.450 --> 07:14.450
首先我们要做的第一件事

07:14.450 --> 07:15.450
以后呢你建立工程之后

07:15.450 --> 07:17.450
要做的第一件事

07:17.450 --> 07:19.450
就是要用使用NPM音列车

07:19.450 --> 07:20.450
去初始化它

07:20.450 --> 07:22.450
这里有两种写法

07:22.450 --> 07:23.450
一种是使用音列车

07:23.450 --> 07:24.450
一种是横桿弯

07:24.450 --> 07:26.450
我们先来看音列车吧

07:26.450 --> 07:27.450
这个时候呢

07:27.450 --> 07:28.450
他会提示

07:28.450 --> 07:29.450
他问你

07:29.450 --> 07:30.450
你不是一个工程吗

07:30.450 --> 07:31.450
你工程就是个包啊

07:31.450 --> 07:33.450
你给你这个包取个名字

07:33.450 --> 07:35.450
如果说你直接回车的话

07:35.450 --> 07:36.450
他就使用默认名字

07:36.450 --> 07:38.450
默认名字呢就是文件夹的名字

07:38.450 --> 07:40.450
这个文件夹的名字要DEMO

07:40.450 --> 07:42.450
那么这个名字其实无所谓的

07:42.450 --> 07:43.450
无所谓的

07:43.450 --> 07:45.450
除非你要把你写的工程

07:45.450 --> 07:47.450
上传到NPM上面去

07:47.450 --> 07:49.450
否则的话就无所谓

07:49.450 --> 07:50.450
我们这里就保持默认吧

07:50.450 --> 07:51.450
所以这个名字

07:51.450 --> 07:52.450
你不能有中文

07:52.450 --> 07:53.450
不能有空格

07:53.450 --> 07:55.450
只能有英文字母

07:55.450 --> 07:56.450
数字和下滑线

07:56.450 --> 07:58.450
和那个短横桿

08:00.450 --> 08:01.450
全部回车

08:01.450 --> 08:02.450
其他都不用管

08:02.450 --> 08:04.450
那么这样子完成了初始化之后

08:04.450 --> 08:07.210
看一下

08:07.210 --> 08:08.210
它在工程里面

08:08.210 --> 08:10.210
就会多一个文件出来

08:10.210 --> 08:12.210
这个文件叫做PAC点接生

08:12.210 --> 08:14.210
这个文件很重要

08:14.210 --> 08:15.210
但是它这个文件有特别简单

08:15.210 --> 08:17.210
它里面没啥东西

08:17.210 --> 08:19.210
其实刚才我们输入的那个初始化命令

08:19.210 --> 08:21.210
在做啥呀

08:21.210 --> 08:23.210
它其实就是在帮你建这个文件

08:23.210 --> 08:25.210
这个文件是一个描述性质的文件

08:25.210 --> 08:28.210
它描述了我这个工程到底是个啥

08:28.210 --> 08:29.210
名字是个啥

08:29.210 --> 08:30.210
版本是个啥

08:30.210 --> 08:31.210
就给你做一些描述

08:31.210 --> 08:33.210
其他东西我们都不用看

08:33.210 --> 08:35.210
我们只需要看这个名字就行了

08:35.210 --> 08:36.210
名字其实都不用看

08:36.210 --> 08:37.210
就是一个描述

08:37.210 --> 08:38.210
我们先扔这之后

08:38.210 --> 08:40.210
这个东西是有用的

08:40.210 --> 08:41.210
好吧

08:41.210 --> 08:43.210
这是第一种初始化工程的方式

08:43.210 --> 08:44.210
第二种呢

08:44.210 --> 08:45.210
我们把删掉

08:47.210 --> 08:49.210
可以使用NPM音列乘Y

08:50.210 --> 08:53.210
那么就是直接使用默认值

08:53.210 --> 08:55.210
给你生成这个文件

08:57.210 --> 08:59.210
目的呢就是要生成这个文件

08:59.210 --> 09:01.210
这个名字的目的就是生成文件

09:01.210 --> 09:02.210
对吧

09:02.210 --> 09:03.210
你们以后建成工程之后

09:04.210 --> 09:05.210
做了第一件事

09:05.210 --> 09:07.210
就是把这个东西运行一遍

09:07.210 --> 09:08.210
好

09:08.210 --> 09:09.210
这第一步就完成了

09:09.210 --> 09:10.210
对不对

09:10.210 --> 09:11.210
特别简单

09:11.210 --> 09:12.210
跟着做一下

09:12.210 --> 09:13.210
新建一个工程

09:13.210 --> 09:17.540
然后来运行一下NPM初始化命令

09:17.540 --> 09:18.540
好

09:18.540 --> 09:19.540
第二步

09:19.540 --> 09:21.540
我们接下来叫安装依赖了

09:21.540 --> 09:22.540
就是我们这个工程里面

09:22.540 --> 09:24.540
要依赖哪些第三方库

09:24.540 --> 09:25.540
因为这个文件

09:25.540 --> 09:27.540
就是来帮你下载第三方库的

09:27.540 --> 09:28.540
我们从此以后

09:28.540 --> 09:29.540
不再去

09:30.540 --> 09:31.540
网上去下载戒业式了

09:31.540 --> 09:33.540
直接通过这个命令就可以完成

09:33.540 --> 09:35.540
那么怎么来用呢

09:35.540 --> 09:36.540
看下面安装

09:40.750 --> 09:41.750
下载

09:41.750 --> 09:42.750
就是安装

09:42.750 --> 09:43.750
好

09:43.750 --> 09:45.750
比方说我要下载一个

09:46.750 --> 09:47.750
努大戏

09:47.750 --> 09:48.750
举个例子

09:48.750 --> 09:49.750
我要下载一个努大戏

09:49.750 --> 09:50.750
很简单

09:50.750 --> 09:51.750
打开命令

09:51.750 --> 09:53.750
输入NPM Insta

09:53.750 --> 09:55.750
可以简写为i

09:56.750 --> 09:58.750
这个insta可以简写为i

09:59.750 --> 10:01.750
然后后边现在不包的名字

10:01.750 --> 10:02.750
怎么叫包的名字呢

10:02.750 --> 10:04.750
就是那个

10:04.750 --> 10:05.750
三方库的名字

10:05.750 --> 10:06.750
比方说努大戏

10:06.750 --> 10:07.750
就写努大戏

10:07.750 --> 10:08.750
就这么简单

10:08.750 --> 10:10.750
如果说你不确定努大戏

10:10.750 --> 10:12.750
是不是一个正确的包的名字

10:12.750 --> 10:13.750
那么你去他的官方网站

10:13.750 --> 10:14.750
收一下

10:14.750 --> 10:15.750
努大戏

10:16.750 --> 10:17.750
你看

10:17.750 --> 10:18.750
是不是出来了

10:18.750 --> 10:19.750
就是这个包的名字

10:19.750 --> 10:21.750
点进去他就有详细信息

10:21.750 --> 10:24.750
周下载量有3600多万

10:24.750 --> 10:26.750
目前的版本是这个

10:26.750 --> 10:27.750
包的体积

10:27.750 --> 10:28.750
然后他的官方网站

10:28.750 --> 10:29.750
都在这几百了

10:30.750 --> 10:31.750
好

10:31.750 --> 10:32.750
我们这里

10:32.750 --> 10:33.750
直接回车

10:34.750 --> 10:35.750
安装完成

10:36.750 --> 10:37.750
好

10:37.750 --> 10:38.750
同学们安装一下

10:38.750 --> 10:39.750
这个努大戏

10:39.750 --> 10:40.750
安装看一下

10:40.750 --> 10:41.750
好

10:41.750 --> 10:43.750
那么你会看到

10:43.750 --> 10:44.750
我们工程结构

10:44.750 --> 10:46.750
里面多了两个文件

10:46.750 --> 10:47.750
一个是这个文件

10:47.750 --> 10:48.750
这个文件你管都不要管

10:48.750 --> 10:49.750
这是个版本锁定文件

10:49.750 --> 10:50.750
你不要去动他

10:50.750 --> 10:51.750
也不要管他

10:51.750 --> 10:52.750
也不要去删他

10:52.750 --> 10:54.750
总之他扔罩了就行了

10:55.750 --> 10:56.750
第二个是一个文件夹

10:56.750 --> 10:58.750
叫做load modules

10:58.750 --> 11:00.750
这个文件夹不要去删他

11:00.750 --> 11:01.750
也不要去动他

11:01.750 --> 11:03.750
也不要去看里边的东西

11:03.750 --> 11:05.750
这里边是啥呢

11:05.750 --> 11:06.750
他就会把我们刚才下载的包

11:06.750 --> 11:08.750
放到这个文件夹里边

11:08.750 --> 11:09.750
不要去改名字

11:09.750 --> 11:10.750
你不要觉得一个名字不爽

11:10.750 --> 11:11.750
你要把它改一下

11:11.750 --> 11:12.750
不要去改

11:13.750 --> 11:14.750
看到没

11:14.750 --> 11:15.750
就下载到这了

11:15.750 --> 11:16.750
而且你会发现

11:16.750 --> 11:18.750
我们以前在页面上引用的时候

11:18.750 --> 11:19.750
只引用了一个解释

11:19.750 --> 11:20.750
对吧

11:20.750 --> 11:22.750
那是因为他给你压缩成一个解释了

11:22.750 --> 11:24.750
实际上里面有很多文件的

11:24.750 --> 11:25.750
你通过这个保管利息下载下来

11:25.750 --> 11:27.750
就是它的原始结构

11:27.750 --> 11:28.750
好吧

11:29.750 --> 11:30.750
好

11:30.750 --> 11:31.750
那么下载到这个文件夹里边

11:31.750 --> 11:32.750
接下来我们怎么用呢

11:32.750 --> 11:33.750
关键是怎么用

11:33.750 --> 11:35.750
我们这里新建一个模块

11:35.750 --> 11:36.750
您这个是不是要解释

11:37.750 --> 11:38.750
怎么用

11:38.750 --> 11:39.750
看着

11:39.750 --> 11:40.750
我们接下来直接使用require

11:40.750 --> 11:42.750
因为现在是load的环境

11:42.750 --> 11:44.750
所以我们直接使用require

11:45.750 --> 11:46.750
这个require里边

11:46.750 --> 11:47.750
我们之前说了

11:47.750 --> 11:49.750
这个路径的书写方式

11:49.750 --> 11:50.750
是底耳鞋杠

11:50.750 --> 11:52.750
和底耳底耳鞋杠开头

11:53.750 --> 11:54.750
那是因为我们之前用的是

11:54.750 --> 11:56.750
自己写的模块

11:56.750 --> 11:57.750
所以要用这种方式

11:57.750 --> 11:59.750
但是如果说你用的是

11:59.750 --> 12:00.750
第三方库

12:00.750 --> 12:01.750
就是通过npm下载下来的

12:01.750 --> 12:03.750
你直接写包的名字就可以了

12:03.750 --> 12:05.750
比方说我们写的是loader

12:05.750 --> 12:09.640
直接这样写

12:09.640 --> 12:11.640
那么到时候他会怎么去找呢

12:11.640 --> 12:12.640
我闻到里面有写

12:12.640 --> 12:14.640
他怎么去找loader的

12:14.640 --> 12:16.640
loader的查讨包的顺序

12:16.640 --> 12:18.640
他首先找一找

12:18.640 --> 12:19.640
是不是有内置模块

12:19.640 --> 12:20.640
因为loader的环境里边

12:20.640 --> 12:21.640
还有一些内置模块

12:21.640 --> 12:23.640
就是你不安装任何东西

12:23.640 --> 12:24.640
比方说像这个fs

12:24.640 --> 12:25.640
像这个pass

12:25.640 --> 12:26.640
都是内置模块

12:26.640 --> 12:28.640
你们现在不用学习

12:28.640 --> 12:29.640
因为到时候要学习loader的时候

12:29.640 --> 12:31.640
会去学习学习

12:31.640 --> 12:32.640
他首先找一找

12:32.640 --> 12:33.640
有没有内置模块

12:33.640 --> 12:34.640
如果说没有内置模块

12:34.640 --> 12:36.640
那些东西肯定是没有的

12:36.640 --> 12:37.640
那么于是

12:37.640 --> 12:39.640
他就会从当前目录的

12:39.640 --> 12:40.640
文件夹loader module

12:40.640 --> 12:41.640
里面去找

12:41.640 --> 12:42.640
所以说你把文件夹

12:42.640 --> 12:43.640
名字一改了

12:43.640 --> 12:44.640
结果就找不到了

12:44.640 --> 12:46.640
他会从这里自动去找

12:46.640 --> 12:47.640
就找到了

12:47.640 --> 12:48.640
就找到了

12:50.640 --> 12:51.640
如果说当前目录

12:51.640 --> 12:52.640
下面没有

12:52.640 --> 12:54.640
比方说你现在有一个指纹验夹

12:54.640 --> 12:55.640
比方说一个指纹验夹

12:55.640 --> 12:57.640
这里边有一个Made-in

12:58.640 --> 12:59.640
这里边去引用

13:01.640 --> 13:03.640
这个文件夹里边有没有

13:03.640 --> 13:04.640
没有的话就会返回

13:04.640 --> 13:05.640
上一级目录去找

13:05.640 --> 13:06.640
所以就找到了

13:06.640 --> 13:08.640
如果说上一级目录还没有

13:08.640 --> 13:09.640
那就继续返回上级

13:09.640 --> 13:11.640
直到找到跟目录

13:11.640 --> 13:12.640
就这么简单

13:12.640 --> 13:13.640
所以说你只需要

13:13.640 --> 13:15.640
把他安装到跟目录就OK了

13:15.640 --> 13:17.640
他其实就是安装到跟目录的

13:17.640 --> 13:18.640
你不用管他

13:21.640 --> 13:22.640
这就是为什么我上

13:22.640 --> 13:23.640
在昨天的时候

13:23.640 --> 13:25.640
不让你们在前面

13:25.640 --> 13:26.640
前面不能省略吊鞋杠

13:26.640 --> 13:27.640
因为省略吊鞋杠的话

13:27.640 --> 13:28.640
就会到这里去找

13:29.640 --> 13:33.940
找不到的

13:33.940 --> 13:34.940
好

13:34.940 --> 13:35.940
导入进来了过后

13:35.940 --> 13:36.940
因为它是魔化化的

13:36.940 --> 13:37.940
所以导入进来之后

13:37.940 --> 13:39.940
我们就可以直接使用了

13:41.940 --> 13:42.940
这里

13:42.940 --> 13:43.940
要取个名字

13:43.940 --> 13:44.940
随便取个名字都行

13:44.940 --> 13:46.940
我给他用习惯上

13:46.940 --> 13:48.940
给兜单型的取一个下滑线

13:50.940 --> 13:52.940
他就不再是暴露权具变量了

13:52.940 --> 13:53.940
他没有污染任何权具变量

13:53.940 --> 13:54.940
你导入进来用

13:55.940 --> 13:56.940
然后我们就可以

13:56.940 --> 13:57.940
用一下

13:57.940 --> 13:58.940
输出一下

13:58.940 --> 14:00.940
他的一个方法叫创可

14:00.940 --> 14:01.940
这个方法

14:02.940 --> 14:03.940
这个方法

14:03.940 --> 14:04.940
我们

14:06.940 --> 14:07.940
在这里

14:07.940 --> 14:08.940
给他写个输组

14:08.940 --> 14:09.940
二三四五

14:10.940 --> 14:11.940
写个二

14:11.940 --> 14:12.940
什么意思

14:12.940 --> 14:13.940
就是把这个输组

14:13.940 --> 14:14.940
每两位进行分割

14:14.940 --> 14:15.940
产生一个新输组

14:15.940 --> 14:16.940
来 我们来试一下

14:16.940 --> 14:17.940
这个不是重点

14:17.940 --> 14:18.940
我们来看一下

14:18.940 --> 14:19.940
关键是能不能用

14:19.940 --> 14:20.940
输入

14:20.940 --> 14:21.940
漏的in这个社交建设

14:21.940 --> 14:22.940
对吧 运行它

14:23.940 --> 14:24.940
你看是不是可以用

14:24.940 --> 14:25.940
对对

14:25.940 --> 14:26.940
没问题吧

14:26.940 --> 14:27.940
是不是非常方便

14:27.940 --> 14:28.940
我不需要去打开

14:28.940 --> 14:29.940
任何网站

14:29.940 --> 14:30.940
不需要去下载任何阶矢

14:30.940 --> 14:31.940
一个命令就搞定了

14:31.940 --> 14:32.940
对吧 就下载下载

14:33.940 --> 14:35.940
好 我们再来试一下

14:35.940 --> 14:36.940
比方说我们来下载一个

14:36.940 --> 14:37.940
漠可阶矢

14:37.940 --> 14:39.940
npm

14:39.940 --> 14:40.940
i

14:40.940 --> 14:41.940
漠可阶矢

14:46.100 --> 14:47.100
好 下载下载了

14:47.100 --> 14:48.100
接下来我们来看一下

14:48.100 --> 14:49.100
怎么来用

14:49.100 --> 14:50.100
看一下这里

14:51.100 --> 14:52.100
刷新一下

14:52.100 --> 14:53.100
就多了一个漠可阶矢

14:54.100 --> 14:55.100
不对

14:55.100 --> 14:56.100
那为什么会多这个东西

14:56.100 --> 14:58.100
又为什么会多这个东西

14:58.100 --> 15:00.100
是因为有些地三方库

15:00.100 --> 15:01.100
它本身有依赖

15:01.100 --> 15:02.100
它依赖别的库

15:02.100 --> 15:04.100
所以说下载它的时候

15:04.100 --> 15:05.100
就会同时把它的依赖

15:05.100 --> 15:07.100
也跟着下载下载

15:07.100 --> 15:08.100
这个东西你不用管的

15:08.100 --> 15:09.100
你不用管

15:09.100 --> 15:11.100
总之它会自己给你完成下载

15:11.100 --> 15:12.100
好 接下来我们来看一下

15:12.100 --> 15:13.100
怎么来用

15:13.100 --> 15:14.100
还不是一样的

15:15.100 --> 15:16.100
moke

15:18.100 --> 15:19.100
require

15:19.100 --> 15:20.100
moke.js

15:21.100 --> 15:22.100
包的名字

15:22.100 --> 15:23.100
然后可以直接使用了

15:23.100 --> 15:25.100
moke

15:25.100 --> 15:26.100
moke 方法

15:27.100 --> 15:28.100
随便来一个吧

15:29.100 --> 15:30.100
生成一个中文名

15:33.630 --> 15:34.630
vidoz

15:35.630 --> 15:36.630
输出vidoz

15:37.630 --> 15:38.630
好 试一下

15:38.630 --> 15:40.630
node index.js

15:40.630 --> 15:41.630
输出出来了

15:42.630 --> 15:44.630
好 接下来同学们暂停视频

15:44.630 --> 15:46.630
安装一个node

15:46.630 --> 15:47.630
用一下

15:47.630 --> 15:49.630
安装一个moke.js

15:49.630 --> 15:50.630
用一下

15:50.630 --> 15:51.630
体验一下这种安装

15:51.630 --> 15:52.630
爽不爽

15:53.630 --> 15:54.630
好了没

15:54.630 --> 15:56.630
好 那么接下来安装了

15:58.630 --> 15:59.630
最重要的地方就讲完了

15:59.630 --> 16:02.630
接下来我们来再讲一讲安装的一些细节

16:06.260 --> 16:08.260
首先我们看到这个地方

16:09.260 --> 16:10.260
这里面

16:10.260 --> 16:11.260
你会发现安装了

16:11.260 --> 16:13.260
当我们去安装一些包之后

16:13.260 --> 16:15.260
它这个地方会有变化

16:15.260 --> 16:16.260
就是这个配置文件里面

16:16.260 --> 16:18.260
它会 这个配置文件你不要去手动去改

16:18.260 --> 16:19.260
不要去

16:19.260 --> 16:20.260
除非有必要

16:20.260 --> 16:22.260
否则的话不要去改它任何东西

16:23.260 --> 16:25.260
当我们去安装一个包之后

16:25.260 --> 16:26.260
它会出现这个字段

16:26.260 --> 16:28.260
叫dependence.js

16:29.260 --> 16:30.260
依赖

16:30.260 --> 16:31.260
什么叫依赖

16:31.260 --> 16:35.260
就表示我这个工程要用到什么东西

16:35.260 --> 16:37.260
是不是要用到两个node.js

16:37.260 --> 16:38.260
moke.js

16:38.260 --> 16:39.260
对吧

16:39.260 --> 16:42.260
你每一次使用npm install安装的时候

16:42.260 --> 16:44.260
它就会给你

16:44.260 --> 16:46.260
自动给你写进去

16:46.260 --> 16:48.260
什么包 什么版本给你写好

16:48.260 --> 16:49.260
没意思吧

16:50.260 --> 16:51.260
会记录下来

16:51.260 --> 16:52.260
那么这种依赖呢

16:52.260 --> 16:54.260
叫做普通依赖

16:55.260 --> 16:57.260
一喷愣谁 这叫普通依赖

16:57.260 --> 16:59.260
我们刚才的安装呢

16:59.260 --> 17:01.260
叫做普通安装

17:04.260 --> 17:06.260
应该正确说法叫做

17:06.260 --> 17:07.260
安装分为两种

17:07.260 --> 17:09.260
一种叫做本地安装

17:09.260 --> 17:12.640
一种叫做

17:12.640 --> 17:13.640
全局安装

17:13.640 --> 17:14.640
以后再说

17:14.640 --> 17:16.640
先说本地安装

17:16.640 --> 17:17.640
本地安装分为两种

17:17.640 --> 17:18.640
一种叫普通安装

17:18.640 --> 17:20.640
一种叫做

17:21.640 --> 17:22.640
开发

17:22.640 --> 17:24.640
那个普通依赖

17:25.640 --> 17:27.640
这样说安装普通依赖

17:28.640 --> 17:30.640
一种叫做安装开发一代

17:31.640 --> 17:33.640
我们以后再说开发一代

17:33.640 --> 17:35.640
刚才我们演示的是什么呢

17:35.640 --> 17:37.640
演示的是安装普通依赖

17:37.640 --> 17:39.640
这种情况是最常见的

17:39.640 --> 17:43.140
最常见

17:43.140 --> 17:44.140
几乎呢

17:44.140 --> 17:46.140
我们平时开发90%

17:46.140 --> 17:49.140
都是使用的是安装普通依赖

17:50.140 --> 17:52.140
什么叫做普通依赖呢

17:52.140 --> 17:53.140
就是我这个程序

17:53.140 --> 17:54.140
运行起来

17:54.140 --> 17:56.140
需要用到的依赖

17:56.140 --> 17:57.140
就叫做普通依赖

17:57.140 --> 17:58.140
你看我这个

17:58.140 --> 18:00.140
这个是跑起来过后呢

18:00.140 --> 18:01.140
是不是可能要用到楼弹器

18:01.140 --> 18:03.140
要用到这个默克结石

18:03.140 --> 18:04.140
对不对

18:04.140 --> 18:05.140
那么这种情况下呢

18:05.140 --> 18:06.140
叫做普通依赖

18:07.140 --> 18:09.140
还有一种依赖叫做开发依赖

18:09.140 --> 18:11.140
那么这种情况下怎么安装呢

18:11.140 --> 18:12.140
首先什么叫开发依赖

18:12.140 --> 18:15.140
就是不是我运行的时候要用

18:15.140 --> 18:16.140
就是跟我写代码

18:16.140 --> 18:18.140
就是开发阶段写代码有相关的

18:18.140 --> 18:20.140
我代码一代写完

18:20.140 --> 18:21.140
它就没用了

18:21.140 --> 18:22.140
那么这就叫

18:22.140 --> 18:24.140
这个东西叫做开发依赖

18:25.140 --> 18:26.140
首先我们看一下

18:26.140 --> 18:27.140
开发一代怎么安装

18:30.990 --> 18:31.990
非常简单

18:31.990 --> 18:33.990
你加上一个横杠地

18:33.990 --> 18:34.990
就可以了

18:35.990 --> 18:36.990
好咱们来试一下

18:36.990 --> 18:38.990
比方说给大家安装这么一个开发依赖

18:39.990 --> 18:40.990
load

18:42.990 --> 18:43.990
npm i

18:43.990 --> 18:44.990
install安装

18:44.990 --> 18:46.990
加上一个横杠地

18:46.990 --> 18:48.990
后面还有这样的写

18:48.990 --> 18:49.990
taps load

18:49.990 --> 18:50.990
有这么一个包

18:50.990 --> 18:52.990
它的包的名字叫做taps load

18:52.990 --> 18:53.990
这个包是起什么作用呢

18:53.990 --> 18:55.990
它是用于在load的环境里边

18:55.990 --> 18:58.990
给我们可以加入一些智能提示的

18:59.990 --> 19:00.990
你只要安装了它

19:00.990 --> 19:01.990
那么我们在写代码的过程中

19:01.990 --> 19:03.990
就会获得一些智能提示

19:03.990 --> 19:04.990
你看这个玩意

19:04.990 --> 19:06.990
是不是只有在开发阶段有用

19:06.990 --> 19:07.990
运行的时候跟它有关系吗

19:07.990 --> 19:08.990
没有关系

19:08.990 --> 19:09.990
只是用来做提示的

19:10.990 --> 19:11.990
我们来安装一下

19:11.990 --> 19:12.990
这就是个开发依赖

19:13.990 --> 19:14.990
好安装完成了

19:14.990 --> 19:16.990
那么接下来我们来看一下

19:16.990 --> 19:17.990
console

19:19.990 --> 19:25.610
就要重新打开一下这个解释

19:25.610 --> 19:26.610
console

19:26.610 --> 19:27.610
这里你看

19:27.610 --> 19:29.610
有智能提示的

19:29.610 --> 19:31.610
你看各种各样的智能提示

19:31.610 --> 19:32.610
包括require

19:32.610 --> 19:34.610
刚才是没有require的智能提示的

19:35.610 --> 19:37.920
你看

19:37.920 --> 19:38.920
现在有智能提示的

19:39.920 --> 19:41.920
它就是用来做一些智能提示的

19:42.920 --> 19:43.920
像

19:43.920 --> 19:44.920
这种

19:44.920 --> 19:45.920
就是开发依赖

19:45.920 --> 19:46.920
能体会到吗

19:46.920 --> 19:48.920
它跟运行没有什么关系

19:48.920 --> 19:49.920
它只是来帮助

19:49.920 --> 19:50.920
让我们开发的时候

19:50.920 --> 19:51.920
更加爽一点

19:51.920 --> 19:52.920
更加舒服一点

19:52.920 --> 19:54.920
那么这种叫做开发依赖

19:54.920 --> 19:55.920
这种叫做普通依赖

19:55.920 --> 19:56.920
因为发现

19:56.920 --> 19:57.920
当我们使用开发依赖

19:57.920 --> 19:59.920
就加了横杠地之后

19:59.920 --> 20:00.920
它的依赖

20:01.920 --> 20:02.920
就在配置稳定里边

20:02.920 --> 20:03.920
它会给你加一个

20:03.920 --> 20:04.920
Development

20:05.920 --> 20:06.920
开发Dependence

20:06.920 --> 20:07.920
依赖

20:08.920 --> 20:10.920
这里会记录它依赖的包和版本

20:11.920 --> 20:12.920
OK

20:12.920 --> 20:13.920
这就是

20:13.920 --> 20:15.920
本地安装的两种方式

20:15.920 --> 20:17.920
普通依赖和开发依赖

20:17.920 --> 20:18.920
那么接下来

20:18.920 --> 20:20.920
请同学们暂停视频

20:21.920 --> 20:22.920
安装一个这样的包

20:22.920 --> 20:23.920
体会一下开发依赖

20:23.920 --> 20:25.920
它在对这个Packet点接受

20:25.920 --> 20:26.920
它的改变

20:33.180 --> 20:34.180
那么这一块

20:34.180 --> 20:35.180
是本地安装

20:35.180 --> 20:36.180
什么叫本地安装

20:36.180 --> 20:38.180
无论你是安装开发依赖

20:38.180 --> 20:39.180
还是普通依赖

20:39.180 --> 20:41.180
它都会把你下载的包

20:41.180 --> 20:43.180
下载到这个位置

20:43.180 --> 20:44.180
刷新

20:45.180 --> 20:46.180
下载到这个位置

20:47.180 --> 20:49.180
那么也就下载到我们工程下边

20:49.180 --> 20:51.180
这叫做本地安装

20:51.180 --> 20:52.180
还有一种安装

20:52.180 --> 20:54.180
它叫做全局安装

20:54.180 --> 20:55.180
全局安装

20:55.180 --> 20:57.180
非常非常的少见

20:57.180 --> 20:58.180
极其少见

20:58.180 --> 20:59.180
但是你们以后

20:59.180 --> 21:00.180
有的时候

21:00.180 --> 21:01.180
确实会用到

21:01.180 --> 21:02.180
偶尔用一下

21:03.180 --> 21:04.180
什么叫全局安装

21:04.180 --> 21:06.180
千万不要从字面上去理解

21:06.180 --> 21:08.180
好像是我这个工程

21:08.180 --> 21:10.180
要用这个的代洗

21:10.180 --> 21:12.180
另外一个工程也要用的代洗

21:12.180 --> 21:13.180
那我就全局安装

21:13.180 --> 21:14.180
千万不能这样子

21:14.180 --> 21:15.180
这样子你是打不到任何目的的

21:15.180 --> 21:17.180
你必须要本地安装

21:17.180 --> 21:20.180
什么情况下才能全局安装

21:20.180 --> 21:23.180
是我要使用某一个命令的时候

21:24.180 --> 21:26.180
那个命令我这里没有

21:26.180 --> 21:27.180
但是有一个第三方库

21:27.180 --> 21:29.180
给我提供了这样的命令

21:29.180 --> 21:31.180
我又想全局地去使用这个命令

21:31.180 --> 21:33.180
那么这个时候

21:33.180 --> 21:35.180
我才需要去进行全局安装

21:35.180 --> 21:36.180
啥意思

21:37.180 --> 21:39.180
我给举个简单例子

21:39.180 --> 21:41.180
你们打开里面的控制台

21:41.180 --> 21:43.180
中端

21:43.180 --> 21:44.180
随便进一个目的

21:44.180 --> 21:45.180
比方进到你的桌面

21:45.180 --> 21:47.180
或者是进到任何一个目的

21:47.180 --> 21:49.180
比方说你看一下你们那边

21:49.180 --> 21:54.470
有没有这个命令

21:54.470 --> 21:56.470
有没有这个命令

21:56.470 --> 21:58.470
有没有

21:58.470 --> 21:59.470
回车

21:59.470 --> 22:01.470
你们那边肯定没有

22:01.470 --> 22:03.470
我是找了一个非常非常偏的命令

22:03.470 --> 22:04.470
没有

22:04.470 --> 22:06.470
这个命令能不能来干嘛的

22:06.470 --> 22:07.470
这个命令是一个第三方库

22:07.470 --> 22:09.470
给我们提供的

22:09.470 --> 22:11.470
你只要安装了这个第三方库

22:11.470 --> 22:13.470
那么我就会多出这么一个命令

22:13.470 --> 22:15.470
有这个命令是用来

22:15.470 --> 22:19.470
查询货币之间的汇率的

22:19.470 --> 22:21.470
你们肯定没有

22:22.470 --> 22:24.470
那么这个命令我要全局使用

22:24.470 --> 22:26.470
就是我希望在任何部路上

22:26.470 --> 22:27.470
都会使用这个命令

22:27.470 --> 22:28.470
那怎么办

22:28.470 --> 22:29.470
这个时候

22:29.470 --> 22:30.470
只有在这个时候

22:30.470 --> 22:32.470
才需要进行全局安装

22:32.470 --> 22:34.470
那怎么来全局安装

22:34.470 --> 22:36.470
NPMI加上的参数

22:36.470 --> 22:37.470
很刚计小学的计

22:37.470 --> 22:39.470
都是区分大小写的

22:39.470 --> 22:40.470
然后呢

22:40.470 --> 22:42.470
逗打

22:42.470 --> 22:44.470
安装一下这个第三方库

22:44.470 --> 22:45.470
这个第三方库

22:45.470 --> 22:47.470
它就是给我们提供一个命令

22:47.470 --> 22:49.470
接下来再来看

22:49.470 --> 22:50.470
逗打

22:50.470 --> 22:52.470
就有这个命令

22:52.470 --> 22:54.470
那么它会把它下来哪

22:54.470 --> 22:56.470
它会把它下载到一个全局目录

22:56.470 --> 22:58.470
它会把它下载到一个全局目录

22:58.470 --> 23:00.470
那么不在你当前的目录里面

23:00.470 --> 23:02.470
那么就可以全局的使用这个命令

23:02.470 --> 23:03.470
那么我们来测试一下

23:03.470 --> 23:05.470
这个其实就是我们的地道联系题

23:09.620 --> 23:10.620
就地道联系题

23:10.620 --> 23:12.620
全局安装这个谋打

23:12.620 --> 23:14.620
那玩一玩的东西也没什么好用的

23:14.620 --> 23:16.620
它就是可以

23:16.620 --> 23:18.620
可以帮我们来查看汇率的

23:18.620 --> 23:20.620
它这个命令叫做谋打

23:20.620 --> 23:21.620
然后呢

23:21.620 --> 23:23.620
ECNY

23:23.620 --> 23:24.620
什么意思

23:24.620 --> 23:25.620
就查看

23:25.620 --> 23:27.620
ECNY表示的是人民币的

23:27.620 --> 23:29.620
一个一块钱的人民币

23:29.620 --> 23:31.620
它对应其他的汇率

23:31.620 --> 23:33.620
它这里给你列出来四个

23:33.620 --> 23:35.620
一个是对于美元的汇率

23:35.620 --> 23:36.620
一个是呢

23:36.620 --> 23:37.620
这个可能是啥玩意

23:37.620 --> 23:39.620
B2我也不知道

23:39.620 --> 23:41.620
这个应该是英镑

23:41.620 --> 23:43.620
这个是欧元

23:43.620 --> 23:45.620
这就是那个

23:47.620 --> 23:48.620
这个命令的用法

23:48.620 --> 23:49.620
其实没关系

23:49.620 --> 23:51.620
这个用一用玩一玩就行了

23:51.620 --> 23:53.620
于是那么现在就介绍了

23:53.620 --> 23:55.620
两种安装方式

23:55.620 --> 23:57.620
一种是本地安装是最常见的

23:57.620 --> 23:59.620
一种是全局安装

23:59.620 --> 24:01.620
只有要全局用一些命令的时候

24:01.620 --> 24:03.620
才需要全局安装

24:03.620 --> 24:05.620
本地安装又分为两种

24:05.620 --> 24:07.620
普通依赖最常见

24:07.620 --> 24:09.620
NPMI包的名字直接安装

24:09.620 --> 24:11.620
还一种叫做开发依赖

24:11.620 --> 24:13.620
这个少见一点

24:13.620 --> 24:15.620
我只有在开发阶段的要用

24:15.620 --> 24:17.620
运行起来也不需要了

24:17.620 --> 24:19.620
就开发依赖

24:19.620 --> 24:21.620
这是关于安装

24:21.620 --> 24:22.620
就讲完了

24:22.620 --> 24:23.620
那么有的时候

24:23.620 --> 24:27.120
其实这里还有一个小的细节

24:27.120 --> 24:29.120
有的时候

24:29.120 --> 24:31.120
我们的安装呢是基于

24:31.120 --> 24:33.120
某一个版本的

24:33.120 --> 24:35.120
比方说我现在要安装

24:35.120 --> 24:37.120
但是我不希望安装最新版

24:37.120 --> 24:39.120
我希望安装一些旧的版本

24:39.120 --> 24:41.120
那么这个时候呢

24:41.120 --> 24:42.120
你非常简单

24:42.120 --> 24:44.120
你再加上一个Ait

24:44.120 --> 24:46.120
那如何知道他有哪些版本呢

24:46.120 --> 24:48.120
我们可以使用下面这个命令

24:48.120 --> 24:50.120
查看包信息

24:50.120 --> 24:53.120
NPMI包的名字

24:53.120 --> 24:58.610
回到这来吧

24:58.610 --> 25:01.610
NPMI包的名字

25:01.610 --> 25:03.610
比方都大小

25:03.610 --> 25:05.610
或者是moments

25:05.610 --> 25:07.610
Versions

25:07.610 --> 25:09.610
你看他就列出来

25:09.610 --> 25:11.610
这个moments的包

25:11.610 --> 25:12.610
所有的版本

25:12.610 --> 25:14.610
比方说我要安装2.9.0

25:14.610 --> 25:15.610
这个版本

25:15.610 --> 25:19.610
那我就这样写NPMI moment

25:19.610 --> 25:21.610
可以给他一个Ait

25:21.610 --> 25:25.610
然后呢2.9.0

25:25.610 --> 25:26.610
安装

25:26.610 --> 25:27.610
那你看

25:27.610 --> 25:29.610
moments的版本号是不是2.9.0

25:29.610 --> 25:30.610
就这么简单

25:31.610 --> 25:32.610
这是安装

25:32.610 --> 25:34.610
说完了安装之后

25:34.610 --> 25:36.610
再来说卸载

25:36.610 --> 25:37.610
卸载的话

25:37.610 --> 25:39.610
我们也不用在这里去找

25:39.610 --> 25:40.610
去删除文件

25:40.610 --> 25:42.610
也不用去做这些事情

25:42.610 --> 25:43.610
我们只需要是

25:43.610 --> 25:44.610
使用一个命令就可以卸载

25:44.610 --> 25:45.610
非常简单

25:45.610 --> 25:46.610
NPMI

25:46.610 --> 25:48.610
install

25:48.610 --> 25:49.610
install是安装

25:49.610 --> 25:51.610
install就是卸载

25:51.610 --> 25:53.610
那么我们这里可以简单写

25:53.610 --> 25:55.610
后面跟上包的名字

25:55.610 --> 25:57.610
比方说我要卸载Loudash

25:57.610 --> 25:59.610
那我就卸载

26:01.610 --> 26:02.610
没了对吧

26:02.610 --> 26:03.610
他在这里给你删了

26:03.610 --> 26:05.610
然后呢在这里边也给你删掉了

26:05.610 --> 26:07.610
那都担心没了

26:07.610 --> 26:10.610
好如果说我要去卸载这个moments

26:10.610 --> 26:16.740
好看是不是卸载了

26:16.740 --> 26:18.740
那如果说我要全局卸载呢

26:18.740 --> 26:22.740
那么我们可以使用NPMI

26:22.740 --> 26:23.740
全局卸载

26:23.740 --> 26:25.740
刚才我们安装了一个叫moda

26:25.740 --> 26:26.740
卸载掉

26:27.740 --> 26:28.740
好现在要之后

26:28.740 --> 26:29.740
我们再看这个命令没了

26:29.740 --> 26:31.740
这个命令找不到了

26:31.740 --> 26:33.740
好那么接下来

26:33.740 --> 26:34.740
第一个作业

26:34.740 --> 26:36.740
就是全局安装这个moda

26:36.740 --> 26:39.740
来查看一下人民币的汇率

26:41.740 --> 26:42.740
就第一道题

26:42.740 --> 26:43.740
全局安装这个

26:43.740 --> 26:45.740
来查看一下人民币的汇率

26:45.740 --> 26:46.740
然后呢

26:46.740 --> 26:47.740
用完了之后呢

26:47.740 --> 26:48.740
你把卸载掉

26:48.740 --> 26:49.740
当然平时呢

26:49.740 --> 26:51.740
用完了之后你不用卸载

26:51.740 --> 26:52.740
人在那也无所谓

26:52.740 --> 26:53.740
但是我们这里练习一下吧

26:53.740 --> 26:54.740
然后把卸载掉

26:55.740 --> 26:57.740
好好了没

26:57.740 --> 27:04.440
好我们接下来

27:04.440 --> 27:05.440
来看一下最后一个知识

27:05.440 --> 27:07.440
其实就讲得差不多了

27:08.440 --> 27:09.440
一个安装一个卸载

27:09.440 --> 27:10.440
然后还有一个知识的

27:10.440 --> 27:11.440
就是这个脚本

27:11.440 --> 27:13.440
在拍景接式里边有一个东西

27:13.440 --> 27:14.440
叫做script

27:15.440 --> 27:17.440
对玩意儿挺有用的

27:17.440 --> 27:19.440
来看一下有什么用法

27:20.440 --> 27:21.440
比方说我们之前

27:21.440 --> 27:23.440
要运行一个loaded index的介式

27:23.440 --> 27:24.440
我们怎么运行

27:24.440 --> 27:26.440
我们可以这样运行

27:26.440 --> 27:28.440
loaded index的介式

27:28.440 --> 27:29.440
对这样可以运行吗

27:29.440 --> 27:30.440
可以

27:30.440 --> 27:32.440
其实我们还有一种方式

27:32.440 --> 27:33.440
就是配置脚本

27:33.440 --> 27:34.440
怎么配置呢

27:34.440 --> 27:35.440
找到这里边

27:35.440 --> 27:36.440
这里边是一个对象

27:36.440 --> 27:37.440
这对象的名字呢

27:37.440 --> 27:38.440
就是脚本的名字

27:38.440 --> 27:39.440
你可以给它随便取个名字

27:39.440 --> 27:41.440
比方说我们给它取个ABC

27:41.440 --> 27:42.440
随便加取个名字

27:42.440 --> 27:43.440
后边的制服创

27:43.440 --> 27:45.440
就表示脚本内容

27:45.440 --> 27:47.440
就是我运行这个ABC的时候

27:47.440 --> 27:48.440
它实际上在运行啥

27:48.440 --> 27:49.440
那么这里比方说

27:49.440 --> 27:51.440
写上一个loaded index的介式

27:51.440 --> 27:53.440
那么这样子一来呢

27:53.440 --> 27:54.440
我们将来可以

27:54.440 --> 27:55.440
直接运行这个脚本

27:55.440 --> 27:57.440
比方说npm装ABC

27:57.440 --> 27:58.440
啥意思

27:58.440 --> 28:00.440
npm运行一个脚本

28:00.440 --> 28:01.440
脚本的名字呢

28:01.440 --> 28:02.440
叫ABC

28:02.440 --> 28:03.440
运行这个

28:03.440 --> 28:05.440
实际上就在运行这个

28:05.440 --> 28:06.440
对吧

28:06.440 --> 28:07.440
它是一个对应关系

28:07.440 --> 28:08.440
你看

28:08.440 --> 28:09.440
是一样的

28:09.440 --> 28:10.440
它告诉你

28:10.440 --> 28:11.440
这个npm装

28:11.440 --> 28:13.440
它就实际上在运行这个

28:13.440 --> 28:15.440
有人觉得这个有什么意义呢

28:15.440 --> 28:16.440
好像没有什么意义

28:16.440 --> 28:17.440
对吧

28:17.440 --> 28:19.440
因为反正就是这么一点点

28:19.440 --> 28:20.440
你写这个东西

28:20.440 --> 28:21.440
各写的东西区别很大

28:21.440 --> 28:23.440
实际上是这样

28:23.440 --> 28:24.440
以后我们这个命令

28:24.440 --> 28:25.440
可能会写得很长

28:25.440 --> 28:26.440
一大堆

28:26.440 --> 28:27.440
那么这样子

28:27.440 --> 28:28.440
我们平时用它的

28:28.440 --> 28:29.440
就很不方便了

28:29.440 --> 28:30.440
所以说我们

28:30.440 --> 28:31.440
往往把它写成脚本

28:31.440 --> 28:33.440
我们只要有非常简洁的

28:33.440 --> 28:35.440
是用脚本来运行就可以了

28:35.440 --> 28:37.440
这是一种非常非常常见的做法

28:37.440 --> 28:38.440
然后呢

28:38.440 --> 28:39.440
这个表本的名字呢

28:39.440 --> 28:40.440
我们通常的

28:40.440 --> 28:42.440
把启动的名字叫做start

28:42.440 --> 28:44.440
当然也可以有别的名字

28:44.440 --> 28:47.440
名字可以自己写

28:47.440 --> 28:49.440
比方说

28:49.440 --> 28:50.440
我们这里的

28:50.440 --> 28:52.440
比方说下举个例子

28:52.440 --> 28:54.440
我这个就有两个

28:54.440 --> 28:56.440
妹的解释

28:56.440 --> 29:00.440
我们这里说出一个妹

29:00.440 --> 29:01.440
比方说我举个例子

29:01.440 --> 29:02.440
我这里配置两个脚本

29:02.440 --> 29:04.440
一个是start

29:04.440 --> 29:06.440
那么它就运行index的解释

29:06.440 --> 29:08.440
一个是妹

29:08.440 --> 29:10.440
我就运行

29:10.440 --> 29:13.440
src目的下面的妹的解释

29:13.440 --> 29:14.440
好

29:14.440 --> 29:15.440
接下来我们看怎么用

29:15.440 --> 29:16.440
如果说我们要运行

29:16.440 --> 29:17.440
index的时候

29:17.440 --> 29:19.440
我们就npmzone start

29:19.440 --> 29:21.440
如果说我们要运行妹

29:21.440 --> 29:23.440
npmzone 妹

29:23.440 --> 29:25.940
看呗

29:25.940 --> 29:26.940
就这么意思

29:26.940 --> 29:27.940
那么启动的

29:27.940 --> 29:28.940
如果说你的脚本名字

29:28.940 --> 29:30.940
叫做start的话

29:30.940 --> 29:32.940
你可以省略到这个状

29:32.940 --> 29:34.940
必须要潜力条件

29:34.940 --> 29:35.940
你的脚本名字

29:35.940 --> 29:36.940
如果说叫start

29:36.940 --> 29:37.940
你可以省略掉状

29:37.940 --> 29:39.940
直接start

29:39.940 --> 29:40.940
也可以

29:40.940 --> 29:42.940
但这个玩意就不能省略

29:42.940 --> 29:44.940
这就是一个脚本

29:44.940 --> 29:45.940
好了

29:45.940 --> 29:47.940
至此我们就讲完了

29:47.940 --> 29:48.940
包管理器

29:48.940 --> 29:49.940
我们平时开发中

29:49.940 --> 29:51.940
需要用到的所有指示

29:51.940 --> 29:53.940
它里边东西其实还有很多的

29:53.940 --> 29:54.940
前面有一个

29:54.940 --> 29:58.260
你可以看一下

29:58.260 --> 29:59.260
它的全命令

29:59.260 --> 30:00.260
其实命令特别多

30:00.260 --> 30:01.260
你看这么多命令

30:01.260 --> 30:02.260
但是我们不需要

30:02.260 --> 30:03.260
以后去看

30:03.260 --> 30:05.260
也不需要去记

30:05.260 --> 30:07.260
我们平时用到的就这么多

30:07.260 --> 30:08.260
好

30:08.260 --> 30:09.260
那么接下来

30:09.260 --> 30:10.260
来做一道练习题

30:10.260 --> 30:12.260
来加上一下印象

30:12.260 --> 30:13.260
看一下平时我们开发

30:13.260 --> 30:14.260
对一个工程

30:14.260 --> 30:16.260
到底有哪些

30:16.260 --> 30:18.260
常见的操作

30:18.260 --> 30:19.260
好 接下来

30:19.260 --> 30:20.260
我们打开这个练习题

30:20.260 --> 30:23.950
像练习已经做了

30:23.950 --> 30:25.950
接下来做练习2

30:25.950 --> 30:26.950
来

30:26.950 --> 30:28.950
一步跟着我走

30:28.950 --> 30:29.950
这里边记录了

30:29.950 --> 30:30.950
不要看着不得多

30:30.950 --> 30:31.950
其实每一步

30:31.950 --> 30:32.950
非常非常简单的

30:32.950 --> 30:33.950
这道练习题

30:33.950 --> 30:35.950
主要是练习一下

30:35.950 --> 30:36.950
我们平时开发中

30:36.950 --> 30:38.950
怎么样创建一个工程

30:38.950 --> 30:40.950
又怎么样跟他

30:40.950 --> 30:42.950
把他发布到的地址

30:42.950 --> 30:43.950
地址HUB上面去

30:43.950 --> 30:45.950
然后又如何把它拉取下来

30:45.950 --> 30:46.950
有哪些常见的操作

30:46.950 --> 30:47.950
来练习一下

30:47.950 --> 30:48.950
首先第一步

30:48.950 --> 30:49.950
创建一个工程

30:49.950 --> 30:50.950
名字叫做这个

30:50.950 --> 30:52.950
按照我来做就行了

30:52.950 --> 30:53.950
跟名字

30:54.950 --> 30:55.950
具体的工程不一样

30:55.950 --> 30:56.950
名字也不一样

30:57.950 --> 30:59.950
好 这里随便取个名字

30:59.950 --> 31:00.950
好 接下来

31:00.950 --> 31:01.950
第一步就完成了

31:01.950 --> 31:02.950
对吧

31:02.950 --> 31:03.950
每一步跟着做

31:03.950 --> 31:04.950
我后面就不重复了

31:04.950 --> 31:05.950
每一步跟着做

31:06.950 --> 31:07.950
打开了

31:08.950 --> 31:09.950
接下来我们要用

31:09.950 --> 31:10.950
Git初始化

31:10.950 --> 31:11.950
很简单对不对

31:12.950 --> 31:13.950
Git

31:13.950 --> 31:14.950
Init

31:14.950 --> 31:15.950
初始化

31:16.950 --> 31:17.950
好 第三步

31:17.950 --> 31:18.950
使用NPM初始化

31:19.950 --> 31:20.950
NPM

31:20.950 --> 31:21.950
Init

31:21.950 --> 31:22.950
很干歪

31:23.950 --> 31:24.950
直接初始化

31:25.950 --> 31:26.950
好 初始化完了过后

31:26.950 --> 31:27.950
每一步跟着做

31:27.950 --> 31:28.950
再重复一遍

31:28.950 --> 31:29.950
添加这个文件

31:29.950 --> 31:30.950
Git初一个诺文件

31:31.950 --> 31:35.220
这些都是工程

31:35.220 --> 31:36.220
一开始要做的事情

31:37.220 --> 31:39.220
好 把这个两行代码扔进去

31:40.220 --> 31:41.220
在以后的开发中

31:41.220 --> 31:42.220
这个文件那种

31:42.220 --> 31:44.220
远远不止这个东西

31:45.220 --> 31:46.220
目前我们只需要这两个

31:46.220 --> 31:47.220
这个玩意儿是跟

31:48.220 --> 31:50.220
苹果那个电脑上

31:50.220 --> 31:51.220
还需要的

31:51.220 --> 31:52.220
Windows电脑上

31:52.220 --> 31:53.220
是不需要的

31:53.220 --> 31:54.220
再加上吧

31:55.220 --> 31:56.220
这个玩意儿很重要

31:57.220 --> 31:58.220
再我解释一下

31:59.220 --> 32:01.220
我们平时开发的工程里边

32:01.220 --> 32:03.220
这个目录是一定不要

32:04.220 --> 32:05.220
把它放到Git上面去了

32:06.220 --> 32:08.220
为什么 因为这个目录会很大

32:09.220 --> 32:11.220
这个目录也没多少

32:11.220 --> 32:12.220
就一些第三方库

32:12.220 --> 32:13.220
也没多少

32:13.220 --> 32:14.220
你看走 随便给你安装

32:17.600 --> 32:18.600
微派

32:18.600 --> 32:19.600
我一会再把它卸在脚

32:28.180 --> 32:29.180
因为有一些库

32:29.180 --> 32:30.180
它的依赖很多

32:31.180 --> 32:32.180
A依赖B

32:32.180 --> 32:33.180
B依赖C依赖D

32:33.180 --> 32:34.180
一大堆依赖

32:34.180 --> 32:35.180
你安装一个

32:35.180 --> 32:36.180
实际上安装了很多很多

32:37.180 --> 32:38.180
千万不能把这个库

32:39.180 --> 32:40.180
加到版本控制

32:40.180 --> 32:41.180
那你这个版本控制

32:41.180 --> 32:43.180
会保持整个仓库

32:43.180 --> 32:44.180
变得无比巨大

32:44.180 --> 32:46.180
说这个一定要排除掉

32:47.180 --> 32:48.180
那排除掉怎么办

32:48.180 --> 32:49.180
我们一会就知道了

32:50.180 --> 32:51.180
一定要排除掉

32:51.180 --> 32:52.180
我们先把这个

32:53.180 --> 32:54.180
把这个还原回来

32:57.650 --> 32:58.650
好 这两步完成

32:58.650 --> 32:59.650
到了第四步了

32:59.650 --> 33:00.650
对吧 把它加到进去

33:01.650 --> 33:02.650
好 第五步提交

33:02.650 --> 33:03.650
提交技术

33:03.650 --> 33:06.650
我直接使用VSCO的工具来提交了

33:07.650 --> 33:09.650
提交一个初始化工程

33:10.650 --> 33:13.650
这就是一个非常干净的一个工程

33:15.650 --> 33:18.650
第六步把它关联推送到DT里边

33:18.650 --> 33:20.650
因为DT Hub 你们太卡了

33:20.650 --> 33:21.650
所以我们就换成马云

33:21.650 --> 33:23.650
其实用法是一样的

33:23.650 --> 33:24.650
DT

33:25.650 --> 33:26.650
这里加一个仓库

33:27.650 --> 33:30.650
给它取一个名字叫做QRQ2

33:32.650 --> 33:34.650
然后就把它变成

33:34.650 --> 33:36.650
反正这个仓库一会我要删掉的

33:36.650 --> 33:37.650
新创建一个

33:38.650 --> 33:39.650
然后关联

33:42.650 --> 33:43.650
这个东西没有必要

33:43.650 --> 33:44.650
没什么好说的

33:44.650 --> 33:45.650
直接复制命令过来

33:45.650 --> 33:46.650
关联就完成了

33:48.650 --> 33:50.650
然后推送上去

33:54.180 --> 33:55.180
推送上去了

33:55.180 --> 33:56.180
非常简单 对不对

33:57.180 --> 33:58.180
我们这边刷新一下

33:59.180 --> 34:01.180
这两个文件就出来了

34:03.180 --> 34:04.180
接下来我们继续往后做

34:05.180 --> 34:06.180
接下来我们要新建一个自己的模块

34:06.180 --> 34:08.180
叫Index.js

34:11.060 --> 34:12.060
随便写一句话吧

34:15.060 --> 34:17.060
然后接下来我们到拍点接上里边

34:17.060 --> 34:19.060
去设置一个脚本叫Start

34:21.570 --> 34:23.570
Index.js

34:24.570 --> 34:25.570
好 接下来我们来测试一下

34:26.570 --> 34:28.570
NPMstart

34:29.570 --> 34:33.030
运行

34:34.030 --> 34:35.030
就可以了 对吧

34:35.030 --> 34:36.030
好 走到这一步

34:38.030 --> 34:39.030
好 接下来我们就开始干活了

34:39.030 --> 34:40.030
那么接下来就是

34:40.030 --> 34:42.030
工程的准备结案就做完了

34:42.030 --> 34:43.030
接下来开始干活

34:43.030 --> 34:44.030
你要用什么第三方库

34:44.030 --> 34:45.030
你去安装

34:45.030 --> 34:46.030
弄NPM去安装

34:46.030 --> 34:48.030
然后在这里导入进来干活

34:48.030 --> 34:49.030
当然你也可以自己分成

34:49.030 --> 34:51.030
很多的模块来进行干活

34:51.030 --> 34:52.030
那么比方说

34:52.030 --> 34:54.030
我们这里就干这么一个活

34:54.030 --> 34:57.030
我要生成一个二维码

34:57.030 --> 34:58.030
你看Mode的环境里边

34:58.030 --> 35:00.030
可以搞出很多事情的

35:00.030 --> 35:02.030
这个二维码

35:02.030 --> 35:03.030
如果说我们自己写代码

35:03.030 --> 35:04.030
其实挺麻烦的

35:04.030 --> 35:05.030
非常麻烦

35:06.030 --> 35:07.030
那么我们但是

35:07.030 --> 35:08.030
我们可以用一个第三方库

35:08.030 --> 35:09.030
就很轻松的搞定

35:09.030 --> 35:11.030
叫做Qrcode

35:11.030 --> 35:12.030
好 我们来安装它

35:13.030 --> 35:14.030
第九步

35:15.030 --> 35:17.030
NPMIQrcode

35:17.030 --> 35:19.030
什么一代 肯定是本地安装

35:19.030 --> 35:20.030
肯定不是全局

35:20.030 --> 35:21.030
因为它不是提供命令的

35:21.030 --> 35:23.030
它是提供一个模块来

35:23.030 --> 35:24.030
给我们使用的

35:24.030 --> 35:26.030
所以说我们一定是本地安装

35:26.030 --> 35:29.030
另外呢 到底是开发还是普通呢

35:29.030 --> 35:31.030
因为我们代码中要用它

35:31.030 --> 35:33.030
所以说一定是普通安装

35:33.030 --> 35:34.030
普通一代

35:35.030 --> 35:36.030
以后你安装多了

35:36.030 --> 35:37.030
你自然就知道了

35:37.030 --> 35:39.030
绝大部分都是普通一代

35:40.030 --> 35:41.030
好

35:42.030 --> 35:43.030
安装好了之后

35:43.030 --> 35:44.030
我们这里就有了

35:45.030 --> 35:48.030
它是排除在个仓库里边去了

35:49.030 --> 35:50.030
不发送到仓库的

35:51.030 --> 35:52.030
好 接下来我们来用它

35:52.030 --> 35:53.030
用它非常简单

35:53.030 --> 35:54.030
你把代码复制过来就行了

35:56.030 --> 35:57.030
我简单解释一下

35:58.030 --> 35:59.030
它说导入Qrcode

35:59.030 --> 36:01.030
然后调用它的函数叫tosgin

36:02.030 --> 36:04.030
到底把什么东西变成二维码

36:04.030 --> 36:07.030
把这句话变成二维码

36:07.030 --> 36:08.030
当然你可以换一换

36:12.030 --> 36:13.030
load.js 争端

36:17.030 --> 36:20.660
把这个东西变成一个二维码

36:20.660 --> 36:22.660
然后内形是中端

36:22.660 --> 36:25.660
我们需要把它输出到中端上

36:25.660 --> 36:26.660
然后这边一个回调函数

36:26.660 --> 36:28.660
就是把中端的内容输出出来

36:28.660 --> 36:29.660
把二维码的内容输出出来

36:29.660 --> 36:30.660
你不用去管这个

36:30.660 --> 36:32.660
反正你直接看效果

36:32.660 --> 36:34.660
这个会对你们来说也没什么意义

36:35.660 --> 36:37.660
NpnRaw

36:38.660 --> 36:39.660
NpnStart

36:39.660 --> 36:41.660
这边运行这个index设计的介绍

36:41.660 --> 36:42.660
来看一下

36:42.660 --> 36:44.660
二维码就打出来了

36:44.660 --> 36:46.660
因为我这个手机跑下去了

36:46.660 --> 36:47.660
把手机打出来

36:47.660 --> 36:49.660
你们也可以拿出你们的手机

36:51.660 --> 36:53.660
用微信扫一扫

36:56.660 --> 36:57.660
怎么卡住了

36:57.660 --> 37:01.170
你看这边能看到这个结构

37:01.170 --> 37:03.170
你也可以给它设置成一个地址

37:03.170 --> 37:04.170
一个网址

37:04.170 --> 37:06.170
以方说给它设置成

37:06.170 --> 37:07.170
GDP

37:09.170 --> 37:10.170
S

37:12.170 --> 37:13.170
GDP

37:15.170 --> 37:17.170
我们又重新运行

37:17.170 --> 37:18.170
刷新一下控制台

37:18.170 --> 37:19.170
重新运行

37:21.170 --> 37:23.170
少一少

37:24.170 --> 37:25.170
你看是不是到京东了

37:27.170 --> 37:28.170
做到这一步

37:28.170 --> 37:30.170
它就是这个第三方裤了

37:30.170 --> 37:31.170
在邦尼生成二维码的

37:31.170 --> 37:33.170
简单用一下就行了

37:35.170 --> 37:37.170
运行这个脚本看效果

37:37.170 --> 37:40.170
比方说我们目前开发完成了

37:40.170 --> 37:41.170
我们开发的东西很简单

37:41.170 --> 37:42.170
就这么一个玩笑玩笑

37:43.170 --> 37:44.170
接下来我们把提交

37:44.170 --> 37:46.170
首先提交仓库

37:47.170 --> 37:48.170
开发完成了

37:48.170 --> 37:49.170
就是1.0

37:49.170 --> 37:50.170
1.0这个版本

37:50.170 --> 37:51.170
OK了

37:51.170 --> 37:53.170
然后把它推送到GDP里面去

37:53.170 --> 37:54.170
推送

37:55.170 --> 37:56.170
推送刚刚去了

37:56.170 --> 37:58.170
然后我们来看一下远程仓库

37:58.170 --> 38:01.990
注意看远程仓库里面

38:01.990 --> 38:03.990
是不是没有load modules

38:04.990 --> 38:05.990
对不对

38:05.990 --> 38:06.990
那么怎么办

38:06.990 --> 38:07.990
看着

38:08.990 --> 38:10.990
接下来我们来模拟一下

38:10.990 --> 38:12.990
你现在开发完了过后

38:12.990 --> 38:13.990
你回到了家

38:13.990 --> 38:14.990
公司里面开发完了

38:14.990 --> 38:15.990
你回家了

38:15.990 --> 38:16.990
然后回家了过后

38:16.990 --> 38:18.990
你这里是没有文件夹的

38:18.990 --> 38:19.990
你把文件夹删掉

38:19.990 --> 38:20.990
当然了

38:20.990 --> 38:22.990
没事删掉

38:22.990 --> 38:24.990
或者是别的同事

38:24.990 --> 38:26.990
你别的同事也要跟着开发

38:26.990 --> 38:28.990
他需要把拉取下来

38:28.990 --> 38:29.990
接下来我们来看

38:29.990 --> 38:30.990
怎么来弄

38:31.990 --> 38:33.990
接下来我们到中端里面

38:35.990 --> 38:38.990
进入到desk pop

38:38.990 --> 38:40.990
我就在桌面上

38:40.990 --> 38:41.990
我们输入命令

38:44.990 --> 38:46.990
从远程这个地方

38:46.990 --> 38:47.990
扶植一下

38:47.990 --> 38:49.990
把它克农下来

38:49.990 --> 38:50.990
好克农完成

38:50.990 --> 38:52.990
接下来我们进入这个目录

38:52.990 --> 38:53.990
qr sure

38:53.990 --> 38:55.990
然后在vscode里面打开

39:00.860 --> 39:01.860
看一下

39:01.860 --> 39:03.860
那么我们看到个工程

39:03.860 --> 39:04.860
是不是还原了

39:04.860 --> 39:05.860
还原了

39:05.860 --> 39:08.860
但是就是没有load modules

39:08.860 --> 39:09.860
看到没

39:09.860 --> 39:11.860
就是没有load modules

39:11.860 --> 39:12.860
这个东西是不是都有

39:12.860 --> 39:13.860
我有一代

39:13.860 --> 39:14.860
一代sr qr code

39:14.860 --> 39:15.860
但是我们没有下载下来

39:15.860 --> 39:17.860
这个时候非常的简单

39:17.860 --> 39:19.860
你只需要做一件事

39:20.860 --> 39:21.860
n t m i

39:21.860 --> 39:23.860
后边不要写包

39:23.860 --> 39:24.860
就可以了

39:24.860 --> 39:25.860
就这么简单

39:25.860 --> 39:27.860
这个命令的意思就是

39:27.860 --> 39:28.860
还原安装

39:28.860 --> 39:30.860
它会根据你这个工程里面的

39:30.860 --> 39:32.860
拍片介绍里面记录的一代

39:32.860 --> 39:35.860
把这个安装重新给你下一遍

39:36.860 --> 39:37.860
好

39:37.860 --> 39:38.860
运行过后你看

39:38.860 --> 39:39.860
刷新

39:39.860 --> 39:40.860
是不是有了

39:40.860 --> 39:41.860
这就是为什么

39:41.860 --> 39:43.860
我们可以把load modules排除在外

39:43.860 --> 39:44.860
因为我们可以通过n t m i

39:44.860 --> 39:45.860
还原安装

39:45.860 --> 39:46.860
将它们再运行

39:46.860 --> 39:47.860
n t m 装

39:47.860 --> 39:49.860
n t m start

39:49.860 --> 39:51.860
是不是仍然可以

39:51.860 --> 39:52.860
对不对

39:52.860 --> 39:53.860
这就是为什么

39:53.860 --> 39:55.860
这保管力性很方便

39:55.860 --> 39:57.860
你第三方库都不用发送

39:57.860 --> 39:59.860
都不用保存到仓库

39:59.860 --> 40:00.860
将来你只需要

40:00.860 --> 40:01.860
把这个东西保存到仓库

40:01.860 --> 40:02.860
就可以了

40:02.860 --> 40:03.860
它里面记录了一代

40:03.860 --> 40:04.860
我只需要通过它

40:04.860 --> 40:06.860
重新还原一代就可以了

40:06.860 --> 40:08.860
其实在还原一代的时候

40:08.860 --> 40:09.860
还有一个小的技巧

40:09.860 --> 40:11.860
如果说你使用这种方式

40:11.860 --> 40:12.860
n t m i

40:12.860 --> 40:14.860
两个很干 production

40:14.860 --> 40:15.860
什么意思呢

40:15.860 --> 40:17.860
它只还原普通一代

40:17.860 --> 40:18.860
开发一代就不还原了

40:18.860 --> 40:19.860
那么这个东西

40:19.860 --> 40:20.860
在部署的时候很有用

40:20.860 --> 40:22.860
不过跟里面也没什么关系

40:22.860 --> 40:23.860
将来到公司里面

40:23.860 --> 40:24.860
你们也不需要部署

40:24.860 --> 40:26.860
都是运为人员做的

40:26.860 --> 40:28.860
为什么它把区分开

40:28.860 --> 40:29.860
普通一代和开发一代区分开

40:29.860 --> 40:31.860
因为以后到服务系上

40:31.860 --> 40:32.860
我要还原一代

40:32.860 --> 40:34.860
我是不需要还原开发一代的

40:34.860 --> 40:35.860
已经开发完成了

40:35.860 --> 40:37.860
我只需要还原普通一代就可以了

40:38.860 --> 40:39.860
好

40:39.860 --> 40:41.860
这个过程一定要去体会一下

40:41.860 --> 40:43.860
就是我怎么去把东西还原

40:43.860 --> 40:44.860
所以你们将来

40:44.860 --> 40:46.860
学到后边的框架

40:46.860 --> 40:47.860
一些工程发的东西的时候

40:47.860 --> 40:48.860
老师给你们发代码

40:48.860 --> 40:50.860
一定是不会包含这个

40:50.860 --> 40:52.860
那个代码就不然的话体积太大了

40:52.860 --> 40:54.860
到时候那里面拿到之后

40:54.860 --> 40:57.860
要先用n t m i还原一代

40:58.860 --> 41:01.180
好了

41:01.180 --> 41:03.180
那么我们这节课就讲完了

41:03.180 --> 41:04.180
这个作业

41:04.180 --> 41:05.180
把它从头到尾做一遍

41:05.180 --> 41:07.180
其实我们讲了一个

41:07.180 --> 41:09.180
关系n t m非常简单

41:09.180 --> 41:11.180
就是来安装卸载

41:11.180 --> 41:12.180
可以非常方便的

41:12.180 --> 41:14.180
能够帮我们管理第三方依赖

41:14.180 --> 41:15.180
好

41:15.180 --> 41:16.180
这节课就到此结束了

41:16.180 --> 41:17.180
拜拜

