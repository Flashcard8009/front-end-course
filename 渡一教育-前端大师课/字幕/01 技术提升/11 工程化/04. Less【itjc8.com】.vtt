WEBVTT

00:00.750 --> 00:04.750
好 我们接下来继续来看一下咱们这个图

00:04.750 --> 00:08.250
这个图展示了我们目前学习的进度

00:08.250 --> 00:11.450
目前学到哪呢 我们把模块化学了

00:11.450 --> 00:13.750
把这个包管理细学了 对吧

00:13.750 --> 00:16.250
接下来我们就开始学习这个工程化了

00:16.250 --> 00:20.750
其实学这一坨的目的 不是来恶心的

00:20.750 --> 00:25.250
是为了 为接下来学框架做一些准备

00:25.250 --> 00:27.750
如果说你完全没有这一块的指使的话

00:27.750 --> 00:29.750
框架这一部分是很难学的

00:29.750 --> 00:31.750
你根本就看不懂它里边什么东西

00:31.750 --> 00:36.250
所以说我们很多指使是搭建在前人的基础上的

00:36.250 --> 00:39.250
我们是站在巨人的肩膀上 一步一步出来的

00:39.250 --> 00:42.750
所以说我们学习的还是要这样子 一步一步往下走

00:42.750 --> 00:45.750
当然我们这一块讲的不会很复杂

00:45.750 --> 00:48.250
虽然它东西多 但是我们讲的会很简单

00:48.250 --> 00:52.250
我们只讲你需要了解的东西 最核心的东西

00:52.250 --> 00:55.250
好 我们接下来开始进入这个工程化的学习

00:55.250 --> 00:58.250
工程化里边我们有两大块

00:58.250 --> 01:00.750
一个是CS工程化 一个是CS工程化

01:00.750 --> 01:04.750
还有一个是构建工具 把它们整合在一起

01:04.750 --> 01:09.250
首先我要给大家解释一下 什么叫工程化

01:09.250 --> 01:13.750
工程化它就是一套工具的集合

01:13.750 --> 01:16.750
用了很多很多的小的工具把它整合在一起

01:16.750 --> 01:20.250
这些小的工具都是整合在一起的过程

01:20.250 --> 01:23.750
是为了解决我们项目中的很多问题

01:24.250 --> 01:27.250
项目中如果说你只写一个Hollywood

01:27.250 --> 01:29.250
你需要工程化吗 不需要

01:29.250 --> 01:30.750
项目简单是不需要的

01:30.750 --> 01:33.750
然后你就做一个轮波图需要工程化吗 不需要

01:33.750 --> 01:35.750
所以说很多同学学到这以后

01:35.750 --> 01:38.750
它就会有一个感觉 感觉没啥用

01:38.750 --> 01:41.250
这个东西干嘛要这样搞

01:41.250 --> 01:44.750
但是实际上是因为你之前写的东西比较简单

01:44.750 --> 01:46.750
如果说你东西比较复杂了

01:46.750 --> 01:49.750
比方说你就做一个淘宝

01:49.750 --> 01:53.250
你做个淘宝 你看这里边有多少东西

01:53.250 --> 01:55.250
交互效果多的吓死人

01:55.250 --> 01:57.250
一边上东西也多的吓死人

01:57.250 --> 02:00.250
如果说一旦页面复杂了 你的应用复杂了

02:00.250 --> 02:03.250
很多事它就不是说你简单简单

02:03.250 --> 02:05.250
像以前那样子写的就能解决的

02:05.250 --> 02:09.250
你越写越乱 越写越复杂

02:09.250 --> 02:13.250
就好比说你邀请你的朋友打游戏

02:13.250 --> 02:16.250
晚上咱们八点钟来约一局

02:16.250 --> 02:18.250
那这个事情很简单 对不对

02:18.250 --> 02:20.250
你打个电话 找个网吧

02:20.250 --> 02:22.250
或者是直接在线 连起来就完事了

02:22.250 --> 02:24.250
这个事情很简单

02:24.250 --> 02:28.250
但是如果说你要去主办一场比赛

02:28.250 --> 02:30.250
比较说主办一场王者文化的比赛

02:30.250 --> 02:32.250
你看这个事就没有那么简单了

02:32.250 --> 02:35.250
你就不适合说打几个电话就能解决的了

02:35.250 --> 02:37.250
你要做官方网站吧

02:37.250 --> 02:39.250
你要去建立各种各样的群吧

02:39.250 --> 02:41.250
你要去联系媒体吧

02:41.250 --> 02:44.250
所以很多事情就变得复杂了

02:44.250 --> 02:46.250
当事情一旦复杂过后

02:46.250 --> 02:48.250
我们就需要很多的工具

02:48.250 --> 02:50.250
很多的东西来去做支撑

02:50.250 --> 02:51.250
不然的话这个事就干不下去

02:51.250 --> 02:53.250
就这么简单的一个问题

02:53.250 --> 02:56.250
所以说我们工程化是为了应对什么

02:56.250 --> 02:58.250
应对复杂的东西

02:58.250 --> 03:00.250
应对复杂的项目

03:00.250 --> 03:03.250
好 说到这点到极止

03:03.250 --> 03:04.250
你们在学习的过程中

03:04.250 --> 03:05.250
就慢慢能够感受到了

03:05.250 --> 03:07.250
有些东西它是怎么去处理的

03:07.250 --> 03:09.250
它到底去解决什么样的问题

03:09.250 --> 03:11.250
好 我们这就可能来学习

03:11.250 --> 03:13.250
CSS的工程化

03:13.250 --> 03:14.250
但这就可能学不完

03:14.250 --> 03:18.250
我们这里讲一个CSS工程化的过程中

03:18.250 --> 03:20.250
一个非常重要的一个指示点

03:20.250 --> 03:22.250
我们将来可能会用到的

03:22.250 --> 03:23.250
十四八九都会用到的东西

03:23.250 --> 03:25.250
叫做NAS

03:25.250 --> 03:27.250
那什么叫做NAS呢

03:27.250 --> 03:29.250
一句话解释清楚

03:29.250 --> 03:31.250
它是一种更加简洁的样式代码

03:31.250 --> 03:33.250
它就来写样式的

03:33.250 --> 03:35.250
它长得跟CSS差不多

03:35.250 --> 03:36.250
非常像

03:36.250 --> 03:38.250
甚至你完全用CSS代码写都可以

03:38.250 --> 03:40.250
你都可以把它当成NAS代码

03:40.250 --> 03:43.250
但是它又有一点

03:43.250 --> 03:44.250
不太一样的东西

03:44.250 --> 03:46.250
给你加了一点不太一样的东西

03:46.250 --> 03:47.250
主要的目的呢

03:47.250 --> 03:48.250
是让我们编写样式

03:48.250 --> 03:49.250
变得更加容易

03:49.250 --> 03:51.250
整个工程化

03:51.250 --> 03:53.250
它不是来恶心我们的

03:53.250 --> 03:55.250
它是让我们的开发变得更加容易

03:55.250 --> 03:57.250
我们来对比一下

03:57.250 --> 03:58.250
它怎么就更加容易了

03:58.250 --> 04:00.250
左边是NAS代码

04:00.250 --> 04:02.250
右边是CSS代码

04:02.250 --> 04:03.250
咱们来对比一下

04:03.250 --> 04:04.250
看一下有什么

04:04.250 --> 04:06.250
看上去好像代码量都差不多

04:06.250 --> 04:07.250
但是你仔细看了

04:07.250 --> 04:09.250
会有一些地方不太一样

04:09.250 --> 04:11.250
比方说你看到CSS里边

04:11.250 --> 04:13.250
我们用到了两个重复的样

04:13.250 --> 04:14.250
重复的颜色

04:14.250 --> 04:16.250
那么这样的重复颜色

04:16.250 --> 04:18.250
我们以前是很难处理的

04:18.250 --> 04:20.250
因为如果说将来颜色有变

04:20.250 --> 04:22.250
我们要到处去改

04:22.250 --> 04:23.250
对不对

04:23.250 --> 04:25.250
但是你看NAS代码里边就不一样

04:25.250 --> 04:27.250
NAS代码里边我们可以定一个变量

04:27.250 --> 04:29.250
给它定一个颜色

04:29.250 --> 04:30.250
2008C8C

04:30.250 --> 04:32.250
将来我们要使用到颜色的地方

04:32.250 --> 04:34.250
我们全部用变量来代替

04:34.250 --> 04:35.250
如果说一旦有一天

04:35.250 --> 04:36.250
要进行颜色的修改

04:36.250 --> 04:37.250
我们只需要去改这一块

04:37.250 --> 04:38.250
是不是就完事了

04:38.250 --> 04:39.250
对不对

04:39.250 --> 04:41.250
比方说我们要给整个网站

04:41.250 --> 04:42.250
换一个皮肤

04:42.250 --> 04:43.250
要改很多颜色

04:43.250 --> 04:44.250
那么我们只需要改

04:44.250 --> 04:46.250
一个变量就完事了

04:46.250 --> 04:48.250
好咱们继续我站往后看

04:48.250 --> 04:50.250
你看我们这个成绩

04:50.250 --> 04:52.250
我们在事业设施里边

04:52.250 --> 04:54.250
写这种成绩的选择器

04:54.250 --> 04:56.250
是不是都要分开来写

04:56.250 --> 04:58.250
而且要写很多重复的东西

04:58.250 --> 05:00.250
你看这一部分是不是要重复

05:00.250 --> 05:02.250
是不是要重复

05:02.250 --> 05:03.250
如果说你看

05:03.250 --> 05:04.250
再看这

05:04.250 --> 05:06.250
这一部分是不是要重复

05:06.250 --> 05:07.250
是不是要重复

05:07.250 --> 05:08.250
对不对

05:08.250 --> 05:09.250
那么这样子

05:09.250 --> 05:11.250
写了很多没有意义的重复代码

05:11.250 --> 05:12.250
而且全部都分开了

05:12.250 --> 05:13.250
很难联想到

05:13.250 --> 05:15.250
一眼看出它是一个整体

05:15.250 --> 05:17.250
再看内世代码

05:17.250 --> 05:19.250
它下边有Li

05:19.250 --> 05:20.250
后代元素

05:20.250 --> 05:21.250
Li下边呢

05:21.250 --> 05:23.250
用个N的符号连接

05:23.250 --> 05:24.250
Li的帽号

05:24.250 --> 05:26.250
你现在不用去特别关心

05:26.250 --> 05:27.250
这些语法

05:27.250 --> 05:28.250
我们就看一个大干就行了

05:28.250 --> 05:31.250
所以可能很容易看出

05:31.250 --> 05:32.250
这一块

05:32.250 --> 05:33.250
它是一个整体

05:33.250 --> 05:34.250
对不对

05:34.250 --> 05:35.250
整个在设置内世的

05:35.250 --> 05:36.250
这个内样式里边的东西

05:36.250 --> 05:37.250
对吧

05:37.250 --> 05:39.250
效果是完全一模一样的

05:39.250 --> 05:41.250
明白这个意思吗

05:41.250 --> 05:43.250
我们从这个代码结构

05:43.250 --> 05:44.250
就可以比较容易看出

05:44.250 --> 05:47.250
CSS和内世代码的一些差异点

05:47.250 --> 05:50.250
当然从可约度性来说的话

05:50.250 --> 05:52.250
这个内世代码肯定是要优于

05:52.250 --> 05:53.250
CSS代码

05:53.250 --> 05:55.250
这就是内世代码

05:55.250 --> 05:56.250
好

05:56.250 --> 05:57.250
接下来我们来看一下

05:57.250 --> 05:59.250
内世代码的一些问题

05:59.250 --> 06:00.250
它首先第一个问题就是

06:00.250 --> 06:02.250
你的代码看上去还不错

06:02.250 --> 06:03.250
还可以

06:03.250 --> 06:04.250
还OK

06:04.250 --> 06:05.250
但是呢

06:05.250 --> 06:07.250
它是不能被浏览起识别的

06:07.250 --> 06:08.250
你把这个代码写成CSS

06:08.250 --> 06:10.250
你去在页面上去引用

06:10.250 --> 06:11.250
你看一下能不能识别

06:11.250 --> 06:12.250
它不能识别的

06:12.250 --> 06:14.250
所以说我们这个时候呢

06:14.250 --> 06:16.250
但是这个代码写起来很舒服

06:16.250 --> 06:17.250
但浏览器不认识

06:17.250 --> 06:19.250
我们舒服了浏览器不舒服

06:19.250 --> 06:20.250
那怎么办呢

06:20.250 --> 06:21.250
其实我们很简单

06:21.250 --> 06:23.250
就给它一个工具呗

06:23.250 --> 06:25.250
我们需要的就是一个工具

06:25.250 --> 06:27.250
这个工具它可以把我们的内世代码

06:27.250 --> 06:31.250
转换成为血统存证的CSS

06:31.250 --> 06:33.250
它就需要个转换就完事了

06:33.250 --> 06:35.250
我们就写这一块

06:35.250 --> 06:38.250
我们就写这一块

06:38.250 --> 06:40.250
然后通过一个工具转换

06:40.250 --> 06:41.250
就转换成了这一块

06:41.250 --> 06:42.250
对不对

06:42.250 --> 06:43.250
就这么简单

06:43.250 --> 06:45.250
好 那么这个工具呢

06:45.250 --> 06:47.250
它是什么样子呢

06:47.250 --> 06:49.250
由于我们漏的环境

06:49.250 --> 06:51.250
我们之前不是学过漏的吗

06:51.250 --> 06:52.250
学到一点点的话

06:52.250 --> 06:53.250
学到一个Hello World的

06:53.250 --> 06:55.250
漏的环境呢

06:55.250 --> 06:57.250
它本身还有很多的能力

06:57.250 --> 06:58.250
是浏览器不具备的

06:58.250 --> 07:00.250
比方说它有一个很重要的能力

07:00.250 --> 07:02.250
就是读写文件的能力

07:02.250 --> 07:03.250
浏览器能读写文件吗

07:03.250 --> 07:04.250
这不能吧

07:04.250 --> 07:06.250
你保存一个制服串

07:06.250 --> 07:07.250
保存到一个文件里边

07:07.250 --> 07:08.250
它可以吗

07:08.250 --> 07:09.250
肯定不可以

07:09.250 --> 07:10.250
浏览器没有这样的API

07:10.250 --> 07:11.250
但是漏的环境有

07:11.250 --> 07:13.250
它可以把一个文件读出来

07:13.250 --> 07:14.250
然后呢

07:14.250 --> 07:16.250
内容读出来过后呢

07:16.250 --> 07:18.250
然后再保存到另外一个文件

07:18.250 --> 07:19.250
它是可以做到的

07:19.250 --> 07:21.250
所以说你利用这个特点的

07:21.250 --> 07:22.250
漏的环境里边

07:22.250 --> 07:24.250
就可以进行轻松的文件转换

07:24.250 --> 07:26.250
你看我这里不就是在文件转换吗

07:26.250 --> 07:28.250
我把这个文件的内容读出来

07:28.250 --> 07:29.250
然后呢

07:29.250 --> 07:31.250
做一些修改

07:31.250 --> 07:32.250
把它变成这个样子

07:32.250 --> 07:34.250
保存到另一个文件里边

07:34.250 --> 07:37.250
这就是文件的转换

07:37.250 --> 07:38.250
那么既然漏的

07:38.250 --> 07:39.250
它可以做文件转换的话

07:39.250 --> 07:42.250
那就可以玩的事情就非常多了

07:42.250 --> 07:43.250
你会发现

07:43.250 --> 07:45.250
后面的工程化的很多的工具

07:45.250 --> 07:47.250
它都是在做这种事情

07:47.250 --> 07:48.250
把一个文件读出来

07:48.250 --> 07:50.250
然后它转换成另外一个文件

07:52.250 --> 07:55.250
NPM上面有个包叫做NES

07:55.250 --> 07:56.250
这个包呢

07:56.250 --> 07:57.250
还有这么一个能力

07:57.250 --> 07:58.250
它是利用这个漏的环境的

07:58.250 --> 08:00.250
读写文件的能力

08:00.250 --> 08:02.250
它可以把这种文件读出来

08:02.250 --> 08:04.250
这个叫NES代码

08:04.250 --> 08:05.250
然后把它转换成为

08:05.250 --> 08:08.250
一个纯正的CS代码

08:08.250 --> 08:10.250
我们现在你看

08:10.250 --> 08:13.250
就把我们之前学的NPM

08:13.250 --> 08:16.250
跟我们目前的前端环境

08:16.250 --> 08:17.250
关联起来了

08:17.250 --> 08:18.250
之前你可能有疑问

08:18.250 --> 08:21.250
咱们学这个NPM干嘛呢

08:21.250 --> 08:23.250
它是在它下来的包

08:23.250 --> 08:25.250
只能在漏的环境里边使用

08:25.250 --> 08:26.250
我之前说过了

08:26.250 --> 08:27.250
对不对

08:27.250 --> 08:28.250
那我们学一下干嘛

08:28.250 --> 08:30.250
我们现在一步先漏着干嘛

08:30.250 --> 08:31.250
为什么要学一下

08:31.250 --> 08:33.250
就因为这个原因

08:33.250 --> 08:34.250
你看这下面一张图

08:34.250 --> 08:36.250
画得很清楚

08:36.250 --> 08:38.250
我们由于有这么一个

08:38.250 --> 08:39.250
原理的支撑

08:39.250 --> 08:41.250
所以说我们就可以

08:41.250 --> 08:42.250
舒舒服服的

08:42.250 --> 08:44.250
去写我们的NES代码

08:44.250 --> 08:46.250
然后我们通过NPM

08:46.250 --> 08:47.250
去下载一个包

08:47.250 --> 08:49.250
这个包的名字叫做NES

08:49.250 --> 08:50.250
它是在运行在

08:50.250 --> 08:51.250
漏的环境里边的

08:51.250 --> 08:53.250
但是这个NES的包

08:53.250 --> 08:55.250
它不是运行我们的NES代码

08:55.250 --> 08:56.250
它不是把我们的NES代码

08:56.250 --> 08:57.250
拿去运行

08:57.250 --> 08:59.250
它是进行转换

08:59.250 --> 09:00.250
它把我们的NES代码

09:00.250 --> 09:01.250
读出来

09:01.250 --> 09:03.250
然后转换成一个

09:03.250 --> 09:05.250
纯粹的CS代码

09:05.250 --> 09:06.250
这个代码是不是

09:06.250 --> 09:07.250
流浪器就认识了

09:07.250 --> 09:08.250
于是那流浪器

09:08.250 --> 09:10.250
去引用这个代码

09:10.250 --> 09:11.250
就完成了

09:11.250 --> 09:12.250
它就做这么一件事

09:12.250 --> 09:13.250
你看是不是跟我们的

09:13.250 --> 09:14.250
漏的环境关联起来

09:14.250 --> 09:15.250
本来这个流浪器

09:15.250 --> 09:16.250
跟这个漏的环境

09:16.250 --> 09:17.250
没有任何关系的

09:17.250 --> 09:18.250
但是那漏的环境

09:18.250 --> 09:19.250
可以帮助流浪器

09:19.250 --> 09:22.250
做一些代码的转换

09:22.250 --> 09:24.250
因此我们可以看出

09:24.250 --> 09:25.250
这个漏的环境

09:25.250 --> 09:27.250
在前端的工程画中

09:27.250 --> 09:28.250
它充当了一个

09:28.250 --> 09:30.250
輔助的角色

09:30.250 --> 09:31.250
也就是一个工具

09:31.250 --> 09:32.250
它不去运行

09:32.250 --> 09:33.250
我们的代码

09:33.250 --> 09:34.250
它不会去运行这个的

09:34.250 --> 09:35.250
这个代码漏的也不认识

09:35.250 --> 09:37.250
它只是把它读出来

09:37.250 --> 09:39.250
然后经过转换

09:39.250 --> 09:40.250
转换成流浪器

09:40.250 --> 09:42.250
看上去更加舒服的代码

09:42.250 --> 09:44.250
所以说之后

09:44.250 --> 09:45.250
我们就可以开开心心的

09:45.250 --> 09:46.250
去写NES代码

09:46.250 --> 09:48.250
让漏的环境里面的工具

09:48.250 --> 09:50.250
就能进行转换

09:50.250 --> 09:51.250
让流浪器去引用

09:51.250 --> 09:53.250
我们最终转换的结果

09:53.250 --> 09:55.250
这里有两个池

09:55.250 --> 09:57.250
大家需要记住

09:57.250 --> 09:58.250
一个池能叫做编译

09:58.250 --> 09:59.250
什么叫编译

09:59.250 --> 10:00.250
就是把一个代码

10:00.250 --> 10:01.250
转换成另一个代码

10:01.250 --> 10:02.250
叫编译

10:02.250 --> 10:03.250
你看这里

10:03.250 --> 10:05.250
NES转换成CSS

10:05.250 --> 10:06.250
就叫做编译

10:06.250 --> 10:08.250
转换代码的工具

10:08.250 --> 10:11.250
称之为编译器

10:11.250 --> 10:13.250
那么在这个环境里面

10:13.250 --> 10:15.250
NES就充装的是一个编译器

10:15.250 --> 10:16.250
它把这个代码

10:16.250 --> 10:18.250
转换成这个代码

10:18.250 --> 10:20.250
讲完了它的基本的

10:20.250 --> 10:21.250
这么一个原理

10:21.250 --> 10:23.250
我们来体验一下这个NES

10:23.250 --> 10:24.250
接下来

10:24.250 --> 10:25.250
希望大家能跟着我做

10:25.250 --> 10:26.250
我做一步

10:26.250 --> 10:27.250
你们就跟着做一步

10:27.250 --> 10:28.250
接下来

10:28.250 --> 10:29.250
我们就通过四个步骤

10:29.250 --> 10:32.250
来完成NES代码的编写

10:33.250 --> 10:35.250
首先我们找到我们的工程

10:35.250 --> 10:37.250
工程里边

10:37.250 --> 10:41.550
在工程里边

10:41.550 --> 10:44.550
我们去建立一个文件

10:44.550 --> 10:46.550
叫做index-des

10:46.550 --> 10:48.550
后续名为NES

10:48.550 --> 10:49.550
如果你的计算机上

10:49.550 --> 10:50.550
你的VSCode里边

10:50.550 --> 10:52.550
它不支持这个NES后续名

10:52.550 --> 10:53.550
那么希望大家

10:53.550 --> 10:55.550
都去检查一下

10:55.550 --> 10:57.550
安装一下这个插件

10:57.550 --> 10:59.550
叫做des

10:59.550 --> 11:00.550
就是这个插件

11:00.550 --> 11:02.550
它可以支持很多的

11:02.550 --> 11:04.550
一些比较特别的

11:04.550 --> 11:05.550
样式代码

11:05.550 --> 11:07.550
其中有包含NES

11:07.550 --> 11:08.550
安装上

11:08.550 --> 11:09.550
安装上了之后

11:09.550 --> 11:10.550
我们在这里边

11:10.550 --> 11:12.550
就可以写NES代码了

11:12.550 --> 11:13.550
好 咱们接下来写一下

11:13.550 --> 11:14.550
我就把这个代码

11:14.550 --> 11:15.550
直接复制一下

11:15.550 --> 11:16.550
复制粘贴过来

11:16.550 --> 11:17.550
里面那边

11:17.550 --> 11:18.550
可以直接复制粘贴

11:18.550 --> 11:19.550
好的 第一步

11:19.550 --> 11:21.550
等等做一下

11:21.550 --> 11:22.550
好了没

11:22.550 --> 11:23.550
好 那么这个是NES代码

11:23.550 --> 11:24.550
你可以看到

11:24.550 --> 11:25.550
这里边我们用到了

11:25.550 --> 11:26.550
一些变量

11:26.550 --> 11:28.550
我这里好像还没用变量

11:28.550 --> 11:30.550
用到了变量

11:30.550 --> 11:31.550
你看

11:31.550 --> 11:35.310
改一下

11:35.310 --> 11:37.310
你们把这边复制过去

11:37.310 --> 11:38.310
好 这是我们NES代码

11:38.310 --> 11:39.310
好

11:39.310 --> 11:40.310
NES代码写好了过

11:40.310 --> 11:41.310
和瀏覽器能用吗

11:41.310 --> 11:42.310
肯定不能用

11:42.310 --> 11:43.310
你写个页面

11:43.310 --> 11:44.310
你去用一下

11:44.310 --> 11:45.310
能用去过海了

11:45.310 --> 11:46.310
对不对

11:46.310 --> 11:47.310
我们这里去

11:47.310 --> 11:48.310
比如说

11:48.310 --> 11:49.310
去写个页面

11:49.310 --> 11:50.310
去引用一下

11:50.310 --> 11:52.310
index.des

11:52.310 --> 11:53.310
比方说引用它

11:53.310 --> 11:55.310
跟后续链没什么关系

11:55.310 --> 11:56.310
你只要这里边写的是

11:56.310 --> 11:57.310
纯正的CSS

11:57.310 --> 11:58.310
它就可以用

11:58.310 --> 11:59.310
你写的不是的话

11:59.310 --> 12:00.310
那就肯定用不了

12:00.310 --> 12:01.310
比方说我们这里

12:01.310 --> 12:02.310
再写个DIV

12:02.310 --> 12:03.310
DIV

12:03.310 --> 12:04.310
D2

12:04.310 --> 12:05.310
什么

12:05.310 --> 12:07.310
随便写个文字

12:08.310 --> 12:09.310
我们运行看一下

12:09.310 --> 12:11.310
看它字体颜色有没有变

12:11.310 --> 12:12.310
就完事了

12:12.310 --> 12:13.310
字体颜色有变吗

12:13.310 --> 12:14.310
没有

12:14.310 --> 12:15.310
因为我这里写到

12:15.310 --> 12:16.310
什么Color

12:16.310 --> 12:17.310
用这个颜色

12:17.310 --> 12:18.310
它没有变

12:18.310 --> 12:19.310
它不认识

12:19.310 --> 12:20.310
根本就不认识

12:20.310 --> 12:21.310
你是个啥玩意

12:21.310 --> 12:22.310
好 接下来我们来

12:22.310 --> 12:23.310
继续看

12:23.310 --> 12:24.310
这是第一步

12:24.310 --> 12:25.310
所以说我们需要转换

12:25.310 --> 12:27.310
通过一个包来进行转换

12:27.310 --> 12:28.310
那么这里是不是

12:28.310 --> 12:29.310
要下载安装这个包

12:29.310 --> 12:30.310
对不对

12:30.310 --> 12:31.310
它来帮我们转换代码

12:31.310 --> 12:32.310
那么怎么来下载安装呢

12:32.310 --> 12:34.310
我们当然可以使用NPM来下载

12:34.310 --> 12:36.310
那么这里有这么一句话

12:36.310 --> 12:37.310
大家看一下

12:37.310 --> 12:38.310
这个包来

12:38.310 --> 12:39.310
它提供了一个叫做

12:39.310 --> 12:40.310
颗粒的工具

12:40.310 --> 12:41.310
叫Less C

12:41.310 --> 12:42.310
这啥意思

12:42.310 --> 12:43.310
好像没有说人话

12:43.310 --> 12:44.310
这种语句

12:44.310 --> 12:46.310
你们以后会经常看到

12:47.310 --> 12:49.310
一个个解释

12:49.310 --> 12:51.310
什么叫颗粒工具

12:51.310 --> 12:53.310
颗粒工具其实就是非常简单

12:53.310 --> 12:54.310
就是命令行

12:54.310 --> 12:56.310
给我们提供了一个工具

12:56.310 --> 12:58.310
我们好像上节课的时候

12:58.310 --> 13:00.310
是不是用了一个叫做

13:03.310 --> 13:05.310
是不是用过这么一个工具

13:05.310 --> 13:06.310
那么这个是不是一个命令行

13:06.310 --> 13:08.310
我这里已经写来了

13:08.310 --> 13:09.310
那么这个工具

13:09.310 --> 13:10.310
其实就是一个颗粒工具

13:10.310 --> 13:11.310
颗粒什么意思

13:11.310 --> 13:12.310
非常简单

13:12.310 --> 13:14.310
就是一个命令行的命令

13:14.310 --> 13:16.310
把它叫做颗粒工具

13:16.310 --> 13:17.310
那么也就是说

13:17.310 --> 13:18.310
这个包

13:18.310 --> 13:20.310
它提供了一个命令行的命令

13:23.000 --> 13:24.000
那个命令是什么呢

13:24.000 --> 13:26.000
叫做Less C

13:26.000 --> 13:27.000
Less C

13:27.000 --> 13:28.000
谁什么意思

13:28.000 --> 13:29.000
谁叫做Compile

13:29.000 --> 13:30.000
叫做编译

13:32.000 --> 13:33.000
Less C

13:33.000 --> 13:35.000
也就是说什么意思呢

13:35.000 --> 13:36.000
你安装了那个包之后

13:36.000 --> 13:38.000
你就有多了一个命令行

13:38.000 --> 13:39.000
就是那个中端命令

13:39.000 --> 13:40.000
叫做Less C

13:40.000 --> 13:41.000
就这么个意思

13:42.000 --> 13:44.000
好那么我们怎么来去下这个Less

13:44.000 --> 13:45.000
有两种方式

13:45.000 --> 13:46.000
根据我们上节课的小学

13:46.000 --> 13:48.000
一种是全局安装

13:48.000 --> 13:49.000
那么全局安装

13:49.000 --> 13:51.000
它有一个好处在于什么呢

13:52.000 --> 13:53.000
安装一下Less

13:53.000 --> 13:55.000
大家跟着安装一下

13:57.000 --> 13:58.000
Less I

14:00.000 --> 14:01.000
全局安装

14:02.000 --> 14:03.000
安装好了

14:03.000 --> 14:04.000
它就会提供一个命令

14:04.000 --> 14:06.000
叫做Less C

14:07.000 --> 14:08.000
你看是不是有这么个命令

14:08.000 --> 14:09.000
你可以查看一下

14:09.000 --> 14:10.000
这个命令的版本

14:10.000 --> 14:11.000
Less C

14:11.000 --> 14:12.000
全局安装

14:12.000 --> 14:15.000
目前是4.1.1

14:15.000 --> 14:16.000
Less Compile

14:16.000 --> 14:18.000
是一个Less的编译器

14:19.000 --> 14:20.000
你们安装

14:20.000 --> 14:21.000
试一下

14:21.000 --> 14:22.000
这是全局安装

14:23.000 --> 14:24.000
全局安装的好处

14:24.000 --> 14:26.000
就是说你在任何一个目录

14:26.000 --> 14:27.000
你在任何一个目录

14:27.000 --> 14:29.000
你都可以使用Less C

14:29.000 --> 14:30.000
都可以

14:30.000 --> 14:31.000
没有任何问题

14:32.000 --> 14:34.000
但是全局安装不好的地方

14:34.000 --> 14:35.000
在哪呢

14:35.000 --> 14:36.000
在哪呢

14:36.000 --> 14:37.000
就在于这个命令

14:37.000 --> 14:38.000
它不好版本控制

14:38.000 --> 14:40.000
比方说你做这个项目的时候

14:40.000 --> 14:41.000
你要用的编译器的版本

14:41.000 --> 14:42.000
是4.1.1

14:42.000 --> 14:44.000
但是有一个老的项目

14:44.000 --> 14:45.000
它用的编译器版本

14:45.000 --> 14:46.000
可能是2.0

14:46.000 --> 14:48.000
那你现在是一个全局命令

14:48.000 --> 14:49.000
怎么来切换版本的

14:49.000 --> 14:50.000
你不好控制版本

14:51.000 --> 14:53.000
所以我们一般来说

14:53.000 --> 14:54.000
没有什么

14:55.000 --> 14:56.000
如果不是一些

14:56.000 --> 14:57.000
特别的情况

14:57.000 --> 14:59.000
我们一般不进行全局安装

14:59.000 --> 15:00.000
所以我这里呢

15:00.000 --> 15:01.000
把它卸下掉

15:01.000 --> 15:03.000
不使用这种方式

15:03.000 --> 15:06.440
Less C

15:06.440 --> 15:07.440
卸下掉

15:07.440 --> 15:08.440
现在就没了

15:15.280 --> 15:16.280
我看一下

15:17.280 --> 15:20.280
NTM Insta

15:20.280 --> 15:21.280
Hunger G

15:21.280 --> 15:22.280
Less

15:22.280 --> 15:23.280
我写错了

15:24.280 --> 15:25.280
卸下掉了

15:25.280 --> 15:26.280
Less C

15:26.280 --> 15:27.280
你看是没有这个命令

15:27.280 --> 15:28.280
好

15:28.280 --> 15:30.280
我们不进行全局安装

15:30.280 --> 15:32.280
那么我们该怎么来进行安装

15:32.280 --> 15:34.280
进行本地安装就可以了

15:34.280 --> 15:35.280
什么叫本地安装

15:35.280 --> 15:36.280
我们之前学过的

15:36.280 --> 15:37.280
就是到你这个工程里面

15:37.280 --> 15:38.280
你不是要用Less吗

15:38.280 --> 15:40.280
你在这里安装

15:40.280 --> 15:41.280
在这里安装

15:41.280 --> 15:42.280
到这个工程目录下面

15:42.280 --> 15:43.280
使用NTM I

15:43.280 --> 15:45.280
Hunger G大写的D

15:45.280 --> 15:46.280
Less

15:46.280 --> 15:47.280
为什么要写个

15:47.280 --> 15:48.280
Hunger G大写的D呢

15:48.280 --> 15:49.280
当然我们要

15:49.280 --> 15:50.280
就做一个初始化

15:50.280 --> 15:51.280
Innet

15:51.280 --> 15:55.720
就随便给个工程名字

15:55.720 --> 15:56.720
Debo

15:56.720 --> 15:57.720
最好不要跟Less

15:57.720 --> 15:58.720
重名

15:59.720 --> 16:00.720
好了

16:00.720 --> 16:01.720
那么接下来

16:01.720 --> 16:02.720
我们使用NTM I

16:02.720 --> 16:03.720
Hunger G

16:03.720 --> 16:04.720
Less

16:04.720 --> 16:05.720
为什么要加上这个

16:05.720 --> 16:06.720
Hunger G呢

16:06.720 --> 16:07.720
Hunger G啥意思

16:07.720 --> 16:09.720
是不是开发依赖

16:10.720 --> 16:11.720
什么叫开发依赖

16:11.720 --> 16:13.720
就是在开发阶段

16:13.720 --> 16:14.720
要使用的

16:14.720 --> 16:15.720
运行的时候

16:15.720 --> 16:16.720
跟它就没有关系了

16:16.720 --> 16:17.720
你看我

16:17.720 --> 16:18.720
你看一下我们

16:18.720 --> 16:19.720
现在是不是这样子

16:20.720 --> 16:21.720
看一下上面那个图

16:21.720 --> 16:23.720
我运行的时候

16:23.720 --> 16:24.720
跟它还有关系吗

16:24.720 --> 16:25.720
没关系了吧

16:25.720 --> 16:26.720
跟它还有关系吗

16:26.720 --> 16:27.720
没关系了吧

16:27.720 --> 16:28.720
我运行浏览器里边

16:28.720 --> 16:29.720
浏览器里边

16:29.720 --> 16:30.720
它只需要用到

16:30.720 --> 16:32.720
最终转换成功的代表

16:32.720 --> 16:33.720
就完事了

16:33.720 --> 16:34.720
所以我们只会在

16:34.720 --> 16:36.720
开发阶段

16:37.720 --> 16:38.720
这一部分

16:38.720 --> 16:39.720
去使用它

16:39.720 --> 16:40.720
对不对

16:40.720 --> 16:42.720
那么在运行的阶段

16:42.720 --> 16:43.720
我们是不是就是一个

16:43.720 --> 16:44.720
非常纯粹的浏览器

16:44.720 --> 16:46.720
引用一个CSS

16:46.720 --> 16:47.720
就完事了

16:47.720 --> 16:49.720
所以我们这里是开发依赖

16:49.720 --> 16:52.280
好

16:52.280 --> 16:54.280
我们安装好了之后

16:54.280 --> 16:55.280
那么它是提供了

16:55.280 --> 16:56.280
一个命令给我们使用

16:56.280 --> 16:57.280
对吧

16:57.280 --> 16:58.280
那我这里能用这个命令吗

16:58.280 --> 17:00.280
我们试一下

17:00.280 --> 17:02.280
因为发现这个命令不存在

17:02.280 --> 17:03.280
为什么呢

17:03.280 --> 17:04.280
因为你不在权

17:04.280 --> 17:06.280
你没有权局安装的话

17:06.280 --> 17:08.280
这个命令是找不到的

17:08.280 --> 17:09.280
那怎么办呢

17:09.280 --> 17:10.280
也很简单

17:10.280 --> 17:12.280
这里给大家说一个小知识

17:12.280 --> 17:14.280
你只要这样子写就可以了

17:14.280 --> 17:15.280
前面加上一个潜质

17:15.280 --> 17:17.280
叫做MPX

17:17.280 --> 17:18.280
后面跟上你的命令

17:18.280 --> 17:20.280
NSC

17:20.280 --> 17:21.280
看一下版本

17:21.280 --> 17:22.280
你们试一下

17:23.280 --> 17:24.280
是不是也可以

17:24.280 --> 17:26.280
那么这个MPX是什么东西呢

17:26.280 --> 17:29.280
就是NPM

17:29.280 --> 17:31.280
就是你安装那个load的时候

17:31.280 --> 17:33.280
它可以顺带安装一个NPM

17:33.280 --> 17:35.280
这个NPM安装的时候

17:35.280 --> 17:37.280
它就会顺带给你安装一个小工具

17:37.280 --> 17:38.280
叫做NPX

17:38.280 --> 17:40.280
这个工具的作用就是

17:40.280 --> 17:42.280
它可以让你在当前目录下

17:42.280 --> 17:45.280
去运行一个load modules

17:45.280 --> 17:47.280
目录里面的命令

17:47.280 --> 17:48.280
你看

17:48.280 --> 17:49.280
安装了这么多

17:49.280 --> 17:51.280
因为NSC本身有一些依赖

17:51.280 --> 17:52.280
它的命令在哪呢

17:52.280 --> 17:53.280
在这

17:54.280 --> 17:56.280
当你使用NPXNSC的时候

17:56.280 --> 17:57.280
它就会从这里边

17:57.280 --> 17:59.280
去给你找这个命令

17:59.280 --> 18:01.280
总之你不用管

18:01.280 --> 18:02.280
你本地安装的时候

18:02.280 --> 18:03.280
如果说你没有这个命令的话

18:03.280 --> 18:05.280
你要前面加上一个潜质

18:05.280 --> 18:06.280
叫NPX

18:06.280 --> 18:09.280
当然我们也可以利用这个脚本

18:09.280 --> 18:11.280
它可以接上脚本里边

18:11.280 --> 18:12.280
我们给它配这个脚本

18:12.280 --> 18:13.280
比如说

18:14.280 --> 18:16.600
就一个C

18:16.600 --> 18:18.600
就里面写一个

18:18.600 --> 18:19.600
然后这里边

18:19.600 --> 18:22.600
我们可以使用NPXNSC

18:22.600 --> 18:23.600
这样子我们写下来

18:23.600 --> 18:24.600
再简单一点

18:24.600 --> 18:26.600
NPXNSC

18:27.600 --> 18:29.600
一样的运行这个命令

18:29.600 --> 18:30.600
而且你会发现

18:30.600 --> 18:32.600
在脚本里边配置的时候

18:32.600 --> 18:34.600
你可以省略掉NPX

18:34.600 --> 18:36.600
是可以省略的

18:36.600 --> 18:37.600
好

18:37.600 --> 18:39.600
再看一下

18:39.600 --> 18:41.600
NPXNSC

18:41.600 --> 18:43.600
是没问题

18:43.600 --> 18:44.600
也就是在脚本里边

18:44.600 --> 18:45.600
是可以省略NPS的

18:45.600 --> 18:47.600
但是你来这里的是不能省略的

18:47.600 --> 18:49.600
这就是简单的说几句

18:49.600 --> 18:50.600
总之我们就是

18:50.600 --> 18:52.600
把NSC就安装成功了

18:52.600 --> 18:53.600
先到了哪一步了

18:53.600 --> 18:55.600
就到了这一步了

18:55.600 --> 18:56.600
这个安装成功了

18:56.600 --> 18:57.600
好这个代码有了

18:57.600 --> 18:58.600
对吧我们刚刚写了

18:58.600 --> 18:59.600
然后这个玩意也安装成功了

18:59.600 --> 19:02.600
接着就是通过它来进行转换了

19:02.600 --> 19:03.600
怎么转换呢

19:03.600 --> 19:05.600
转换的方式特别简单

19:05.600 --> 19:06.600
进入第三步

19:06.600 --> 19:08.600
刚才还不要跟着做

19:08.600 --> 19:11.600
我们只需要使用NSC这个命令

19:11.600 --> 19:13.600
写上两个文件

19:13.600 --> 19:16.600
一个是我要转换的原文件

19:16.600 --> 19:18.600
就我们自己写的NSC代码

19:18.600 --> 19:20.600
然后的第二个文件名呢

19:20.600 --> 19:22.600
是我转换的目标文件

19:22.600 --> 19:23.600
就是我转换之后

19:23.600 --> 19:24.600
保存了哪个文件中

19:24.600 --> 19:26.600
好我们只需要这样的写就行了

19:26.600 --> 19:28.600
好接下来我们在这里呢

19:28.600 --> 19:29.600
要配置一下这个命令

19:29.600 --> 19:32.600
NSC我们需要转换的代码呢

19:32.600 --> 19:34.600
是index的NSC

19:34.600 --> 19:36.600
我们转换的目标代码呢

19:36.600 --> 19:38.600
是index的CSS

19:38.600 --> 19:41.600
好把它转换成TAR

19:41.600 --> 19:43.600
好咱们接下来试一下这个命令

19:43.600 --> 19:46.600
MPM-ROUND-C

19:46.600 --> 19:47.600
好完成了转换

19:47.600 --> 19:49.600
你看多了两个文件了

19:49.600 --> 19:51.600
我们把这个两个文件

19:51.600 --> 19:53.600
隔一下

19:53.600 --> 19:54.600
一看一下

19:54.600 --> 19:56.600
是不是就是我们一开始说的

19:56.600 --> 19:59.600
这个代码被这个命令

19:59.600 --> 20:02.600
转换成了这个代码

20:02.600 --> 20:04.600
是不是特别清晰啊

20:04.600 --> 20:07.600
你看这个代码

20:07.600 --> 20:09.600
被这个命令一运行

20:09.600 --> 20:11.600
它又转换成了这个代码

20:11.600 --> 20:13.600
保存到了index的CSS

20:13.600 --> 20:15.600
刚才我们看到那张图就完事了

20:15.600 --> 20:18.600
那么这个代码里面你看有变量吗

20:18.600 --> 20:19.600
没有吧

20:19.600 --> 20:21.600
有这种牵套写法吗

20:21.600 --> 20:22.600
没有吧

20:22.600 --> 20:24.600
就是一个血统纯正的CSS

20:24.600 --> 20:26.600
但是这个CSS写起来太恶心

20:26.600 --> 20:27.600
我们喜欢写这个

20:27.600 --> 20:29.600
但是浏览器喜欢这个

20:29.600 --> 20:31.600
通过它的转换

20:31.600 --> 20:33.600
好我们再看一下这张图

20:33.600 --> 20:35.600
你看一下

20:35.600 --> 20:37.600
所以特别清晰了

20:37.600 --> 20:38.600
那么接下来我们要做的事情呢

20:38.600 --> 20:39.600
就特别简单了

20:39.600 --> 20:41.600
我们就可以怎么做呢

20:41.600 --> 20:43.600
就可以在浏览器里面去引用啥

20:43.600 --> 20:46.600
引用这个CSS代码

20:46.600 --> 20:47.600
转换了过后的目标代码

20:47.600 --> 20:49.600
接下来我们来看一下浏览器

20:49.600 --> 20:51.600
颜色是不是成功了

20:51.600 --> 20:52.600
那么将来呢

20:52.600 --> 20:54.600
我们开发的时候就特别简单了

20:54.600 --> 20:56.600
我就去开发什么nest代码

20:56.600 --> 20:58.600
这个写下来更加舒服一点

20:58.600 --> 21:00.600
然后写完了之后呢

21:00.600 --> 21:02.600
通过一个命令

21:02.600 --> 21:03.600
npm装C

21:03.600 --> 21:05.600
是可以转换成这个代码

21:05.600 --> 21:06.600
对不对

21:06.600 --> 21:07.600
我们就老老实写这个

21:07.600 --> 21:08.600
这个东西看着不用看

21:08.600 --> 21:09.600
让它去转换

21:09.600 --> 21:11.600
浏览器用的是这个

21:11.600 --> 21:12.600
对不对

21:12.600 --> 21:14.600
好这种做法

21:14.600 --> 21:16.600
你要体会一下

21:16.600 --> 21:18.600
我们后面你会发现很多东西

21:18.600 --> 21:19.600
包括戒严史

21:19.600 --> 21:20.600
甚至包括图片

21:20.600 --> 21:23.600
他们都用了很多类似的那种做法

21:23.600 --> 21:25.600
你舒服服写你的

21:25.600 --> 21:27.600
我帮你进行转换

21:27.600 --> 21:29.600
好那么接下来我们来看一下

21:31.600 --> 21:32.600
刚才我们就演示了

21:32.600 --> 21:34.600
整个nest的过程

21:34.600 --> 21:36.600
大家每一步跟着做一下

21:36.600 --> 21:37.600
当然目前呢

21:37.600 --> 21:39.600
会有一点点小的麻烦就是

21:39.600 --> 21:41.600
我们每一次写完nest过后了

21:41.600 --> 21:43.600
我都要去印写下一个命令

21:43.600 --> 21:44.600
它能不能自动帮我们转换了

21:44.600 --> 21:46.600
自动运行命令

21:46.600 --> 21:47.600
目前我们做不到

21:47.600 --> 21:49.600
后面我们很快就会做到了

21:49.600 --> 21:51.600
现在还做不到

21:51.600 --> 21:53.600
支持还欠缺一些

21:53.600 --> 21:55.600
好那么接下来我们来

21:55.600 --> 21:57.600
就来看一下nest

21:57.600 --> 21:58.600
就是我们这边的代码

21:58.600 --> 22:00.600
到底可以写什么

22:00.600 --> 22:02.600
其实nest里面的语法还是很多的

22:02.600 --> 22:04.600
但是基本上跟css也差不多

22:04.600 --> 22:05.600
也就是说我的nest代码

22:05.600 --> 22:07.600
可以完全支持css的

22:07.600 --> 22:09.600
就是你写一个纯对的css

22:09.600 --> 22:10.600
行不行呢

22:10.600 --> 22:11.600
可以没问题

22:11.600 --> 22:13.600
所以大家学新nest

22:13.600 --> 22:14.600
不要用

22:14.600 --> 22:16.600
看转换出来没有什么变化

22:16.600 --> 22:18.600
它是可以支持这个东西的

22:18.600 --> 22:19.600
所以大家学新nest

22:19.600 --> 22:21.600
不要有那么大的心理压力

22:21.600 --> 22:22.600
压力那么大干嘛呢

22:22.600 --> 22:24.600
它既然全部都支持css

22:24.600 --> 22:26.600
你就直接用css写就行了

22:26.600 --> 22:28.600
你之前砸写现在就砸写

22:28.600 --> 22:30.600
现在觉得恶心了觉得烦了

22:30.600 --> 22:32.600
那么你再去改造

22:32.600 --> 22:33.600
比方说你这个东西

22:33.600 --> 22:35.600
前面老师去写的东西

22:35.600 --> 22:37.600
烦死了我就可以这样子写

22:37.600 --> 22:39.600
按这个东西

22:39.600 --> 22:40.600
前面老师这样子写

22:40.600 --> 22:42.600
烦死了我就这样子写

22:43.600 --> 22:44.600
签套进来

22:44.600 --> 22:46.600
以后我会想起想起说

22:46.600 --> 22:47.600
你写烦了你就会这样

22:47.600 --> 22:49.600
你就会写成这样子

22:49.600 --> 22:51.600
你只要觉得这个代码

22:51.600 --> 22:52.600
ok那你就写

22:52.600 --> 22:54.600
所以它完全支持css

22:54.600 --> 22:55.600
没有任何问题

22:55.600 --> 22:56.600
好那咱们来看一下

22:56.600 --> 22:58.600
就是css代码

22:58.600 --> 23:00.600
给我们带来的哪些新的东西

23:00.600 --> 23:01.600
当然它新的东西比较多

23:01.600 --> 23:03.600
我们只需要了解

23:03.600 --> 23:05.600
一小部分最核心

23:05.600 --> 23:07.600
最能够帮助我们

23:07.600 --> 23:09.600
减少代码量的部分

23:09.600 --> 23:11.600
好这里有两个网站

23:11.600 --> 23:12.600
一个是它的官网

23:12.600 --> 23:14.600
它的官网是全英文的

23:14.600 --> 23:16.600
可能大绝大部分同学

23:16.600 --> 23:17.600
看上去比较老虎

23:17.600 --> 23:18.600
因为好的同学

23:18.600 --> 23:20.600
我肯定是推荐你看官网

23:20.600 --> 23:22.600
另外一个是民间中文网

23:22.600 --> 23:24.600
不过它这个版本比较之后

23:24.600 --> 23:26.600
少部分是有翻译错误

23:26.600 --> 23:28.600
不过影响不大也可以看

23:28.600 --> 23:29.600
往下拉

23:29.600 --> 23:31.600
它的就是劣势语法

23:31.600 --> 23:33.600
这里边我们学习哪几个呢

23:33.600 --> 23:35.600
简单的学习几个就行了

23:35.600 --> 23:37.600
非常非常的简单简单不得了

23:37.600 --> 23:39.600
第一个是辨量

23:39.600 --> 23:40.600
你看它都懒得给你说了

23:40.600 --> 23:42.600
直接看单法就行了

23:42.600 --> 23:44.600
它这里可以定义两个辨量

23:44.600 --> 23:46.600
一个是位置宽度是实相数

23:46.600 --> 23:47.600
一个是高度

23:47.600 --> 23:49.600
它可以进行运算的

23:49.600 --> 23:51.600
就实相数加上实相数

23:51.600 --> 23:52.600
就相当于是二实相数了

23:52.600 --> 23:55.600
然后我们有个IT选择器

23:55.600 --> 23:56.600
宽度就用这个辨量

23:56.600 --> 23:58.600
高度就用这个辨量

23:58.600 --> 24:00.600
那么最终辨议的结果

24:00.600 --> 24:02.600
你看辨议完了过后就变成这样子了

24:02.600 --> 24:04.600
辨量有没有没了

24:04.600 --> 24:06.600
它就直接把这个实就放这了

24:06.600 --> 24:08.600
把这个运算的结果

24:08.600 --> 24:09.600
这里相当于二实

24:09.600 --> 24:10.600
二实就放这了

24:10.600 --> 24:11.600
就这么简单

24:11.600 --> 24:12.600
还有什么东西要说呢

24:12.600 --> 24:13.600
没啥东西要说

24:13.600 --> 24:14.600
辨量

24:14.600 --> 24:17.600
辨量我们在平时开发中有什么用的

24:17.600 --> 24:19.600
我们把一些网站里边的

24:19.600 --> 24:21.600
一些常用的颜色啊

24:21.600 --> 24:23.600
尺寸啊这些东西都可以做成辨量

24:23.600 --> 24:25.600
你看一个网站里边

24:25.600 --> 24:27.600
它不可能有太多的颜色

24:27.600 --> 24:28.600
这个大家不知道

24:28.600 --> 24:29.600
大家有没有

24:29.600 --> 24:31.600
有些同学是学过设计的对不对

24:31.600 --> 24:33.600
一个网页设计的里边

24:33.600 --> 24:35.600
颜色是绝对不能太多的

24:35.600 --> 24:36.600
太多的话就花点不少

24:36.600 --> 24:38.600
就看上去特别的土

24:38.600 --> 24:39.600
想土气息

24:39.600 --> 24:41.600
就一定是颜色是比较少的

24:41.600 --> 24:42.600
就那么几种颜色

24:42.600 --> 24:43.600
搭配好

24:43.600 --> 24:44.600
那么我们可以把这些颜色

24:44.600 --> 24:45.600
就形成辨量

24:45.600 --> 24:47.600
之后用的时候直接定一个辨量

24:47.600 --> 24:49.600
一般来说我们网站上

24:49.600 --> 24:50.600
就会定义这么一些辨量

24:50.600 --> 24:53.600
比方说我们会定义一些

24:53.600 --> 24:55.600
什么Danger

24:55.600 --> 24:58.600
就是危险或者是错误的颜色

24:58.600 --> 25:00.600
比方说给它定一个F40

25:00.600 --> 25:02.600
然后我们会定义一些

25:02.600 --> 25:03.600
什么Success

25:03.600 --> 25:05.600
成功的颜色

25:05.600 --> 25:07.600
比方说

25:11.600 --> 25:13.600
就定义两个辨量

25:13.600 --> 25:15.600
辨量都是以A打开头

25:18.600 --> 25:19.600
就这么个意思

25:19.600 --> 25:21.600
然后我们定义一个

25:21.600 --> 25:22.600
就是普通的

25:22.600 --> 25:24.600
黑色的暗色的文字

25:24.600 --> 25:25.600
比方说Gray

25:25.600 --> 25:27.600
那大家定义一个就

25:30.600 --> 25:33.600
CCC比方说一个灰色

25:33.600 --> 25:34.600
就等等等等

25:34.600 --> 25:35.600
我们会把这些颜色定义好

25:35.600 --> 25:37.600
之后要用到那些颜色的时候

25:37.600 --> 25:38.600
直接使用名字就行了

25:38.600 --> 25:40.600
就不用使用具体的颜色代码

25:40.600 --> 25:41.600
将来我们要改颜色

25:41.600 --> 25:42.600
非常简单

25:42.600 --> 25:43.600
直接改辨量就完事

25:43.600 --> 25:44.600
明白了意思吗

25:44.600 --> 25:47.600
这是辨量给我们开发大的好处

25:47.600 --> 25:48.600
但是这个辨量

25:48.600 --> 25:49.600
辨议完了不会还有吗

25:49.600 --> 25:51.600
一个都没了

25:51.600 --> 25:52.600
你看有东西吗

25:52.600 --> 25:53.600
一个都没了

25:53.600 --> 25:54.600
辨议完了就没了

25:54.600 --> 25:55.600
你只有用到的时候

25:55.600 --> 25:57.600
比方说我这里有一个

25:57.600 --> 25:59.600
OK比方说随便写个

25:59.600 --> 26:00.600
Color

26:00.600 --> 26:02.600
比方说Ccess

26:02.600 --> 26:04.600
接下来运行

26:04.600 --> 26:06.600
它就变成这个样子了

26:06.600 --> 26:08.600
当然我们要改颜色

26:08.600 --> 26:09.600
只需要改这里

26:09.600 --> 26:10.600
比方说

26:10.600 --> 26:12.600
也是一遍

26:12.600 --> 26:16.480
接下来重新变异

26:16.480 --> 26:17.480
就变成这样子了

26:17.480 --> 26:18.480
对吧

26:18.480 --> 26:22.480
这是辨量

26:22.480 --> 26:23.480
很简单

26:23.480 --> 26:24.480
没有什么好说的

26:24.480 --> 26:25.480
然后是嵌套

26:25.480 --> 26:26.480
这个也很简单

26:26.480 --> 26:27.480
也没有什么好说的

26:27.480 --> 26:29.480
嵌套是什么意思呢

26:29.480 --> 26:30.480
就是说

26:30.480 --> 26:32.480
你以前的Ccess代码

26:32.480 --> 26:33.480
是这样子写的

26:33.480 --> 26:35.480
写上去不方便

26:35.480 --> 26:36.480
看上去好像每一块

26:36.480 --> 26:37.480
是分开的

26:37.480 --> 26:38.480
实际上联系是非常紧密的

26:38.480 --> 26:39.480
对不对

26:39.480 --> 26:40.480
而且这个写

26:40.480 --> 26:41.480
写起来不要写

26:41.480 --> 26:42.480
很多重复代码

26:42.480 --> 26:43.480
但是我们Nest

26:43.480 --> 26:44.480
有了Nest过后

26:44.480 --> 26:45.480
你可以把嵌套来写

26:45.480 --> 26:47.480
就这个玩意儿

26:47.480 --> 26:48.480
里面不是掏这个吗

26:48.480 --> 26:49.480
对吧

26:49.480 --> 26:50.480
你直接在这里面写就完事了

26:50.480 --> 26:51.480
它里面不是掏这个吗

26:51.480 --> 26:53.480
你直接在里面写就完事了

26:53.480 --> 26:54.480
它最终一编译

26:54.480 --> 26:55.480
就会变异成这个样子

26:55.480 --> 26:56.480
好 咱们来试一下

26:56.480 --> 26:57.480
把这个代码

26:57.480 --> 26:58.480
再复制粘贴过来

26:59.480 --> 27:00.480
里面那边其实

27:00.480 --> 27:01.480
可以跟着我

27:01.480 --> 27:02.480
来做这些事情

27:02.480 --> 27:03.480
来体会一下

27:03.480 --> 27:05.480
编量可以跟着我写一些

27:05.480 --> 27:06.480
这个嵌套也可以

27:06.480 --> 27:07.480
跟着我写一些

27:07.480 --> 27:08.480
好 咱们再看一下

27:10.480 --> 27:11.480
你看就变成这样子了

27:11.480 --> 27:12.480
变异完了

27:12.480 --> 27:14.480
我们写下来就非常舒服

27:14.480 --> 27:15.480
对不对 嵌套

27:15.480 --> 27:16.480
而嵌套里边

27:16.480 --> 27:17.480
还是可以进行

27:17.480 --> 27:18.480
成级嵌套

27:18.480 --> 27:19.480
比方说

27:19.480 --> 27:20.480
这里边我们可以

27:20.480 --> 27:21.480
嵌套一个A7E

27:21.480 --> 27:22.480
连述选择器

27:22.480 --> 27:23.480
比方说

27:23.480 --> 27:24.480
随便写一个卡

27:24.480 --> 27:26.480
方3眼

27:27.480 --> 27:28.480
一看

27:28.480 --> 27:29.480
转换过后就变成这样子了

27:30.480 --> 27:32.480
Header Live-A型下面的A7E

27:32.480 --> 27:33.480
对吧

27:34.480 --> 27:35.480
出来了

27:35.480 --> 27:36.480
我们这边看上去

27:36.480 --> 27:37.480
非常的舒服

27:38.480 --> 27:39.480
它有个嵌套关系

27:39.480 --> 27:40.480
但这边看上去

27:40.480 --> 27:41.480
又不是那么明显了

27:42.480 --> 27:44.480
好 这是嵌套

27:44.480 --> 27:45.480
嵌套里边

27:45.480 --> 27:47.480
还有一些小的一些细节

27:47.480 --> 27:48.480
比方说我要学一些

27:50.480 --> 27:51.480
就是我比方说

27:51.480 --> 27:52.480
像有一些Li

27:52.480 --> 27:53.480
像这种情况

27:54.480 --> 27:55.480
我随便举个例子

27:57.480 --> 27:58.480
比方说

27:58.480 --> 27:59.480
这里边有一个Live

28:00.480 --> 28:01.480
我写下面吧

28:05.010 --> 28:06.010
Live

28:07.010 --> 28:08.010
或者叫Nest

28:08.010 --> 28:09.010
Nest 车下面

28:09.010 --> 28:11.010
有很多的Li

28:12.010 --> 28:13.010
这些Li

28:13.010 --> 28:14.010
有一些样式

28:14.010 --> 28:15.010
比如说我们一个Color

28:18.010 --> 28:19.010
我这里没有用变量

28:19.010 --> 28:20.010
就拿着

28:20.010 --> 28:21.010
先不着急用变量

28:22.010 --> 28:23.010
用这个

28:23.010 --> 28:24.010
我们来编译一下看一下

28:27.800 --> 28:28.800
你看

28:28.800 --> 28:29.800
是变成这个样子了

28:29.800 --> 28:30.800
没问题吧

28:30.800 --> 28:31.800
说有些Li

28:31.800 --> 28:32.800
就是如果说

28:32.800 --> 28:33.800
我们要形成这种格式

28:34.800 --> 28:35.800
某一些Li

28:35.800 --> 28:36.800
它是一个选中状态

28:36.800 --> 28:37.800
选中状态

28:37.800 --> 28:39.800
我可能要把颜色变成F40

28:39.800 --> 28:40.800
比方说

28:40.800 --> 28:41.800
我们要做这么一件事

28:41.800 --> 28:42.800
那么这个代码怎么写

28:42.800 --> 28:44.800
如果说你用这种方式写的话

28:44.800 --> 28:45.800
直接写一个Item

28:46.800 --> 28:47.800
Color

28:47.800 --> 28:48.800
那是达不到要求的

28:48.800 --> 28:49.800
为什么

28:49.800 --> 28:50.800
我们来试一下

28:50.800 --> 28:51.800
运行

28:51.800 --> 28:54.430
这边

29:00.640 --> 29:02.640
好 你会看到是这个样子

29:02.640 --> 29:03.640
它中间多了一个空格

29:03.640 --> 29:05.640
你看这个千套关系数字都是这样子

29:05.640 --> 29:06.640
它空格

29:07.640 --> 29:08.640
然后再空格

29:09.640 --> 29:10.640
你看前面都是这样子

29:11.640 --> 29:13.640
它变成了什么厚带元素了

29:13.640 --> 29:14.640
但是我要的是厚带元素

29:14.640 --> 29:16.640
不是是一个并且关系

29:16.640 --> 29:20.640
它同时拥有active的时候

29:20.640 --> 29:21.640
那怎么办

29:21.640 --> 29:23.640
加上一个and符号

29:23.640 --> 29:25.640
这个语异也非常清晰

29:25.640 --> 29:26.640
Li

29:26.640 --> 29:27.640
同时and

29:27.640 --> 29:30.640
同时具有active的样式的

29:30.640 --> 29:31.640
加上一个and

29:31.640 --> 29:33.640
and的话它就没有这个空格了

29:33.640 --> 29:34.640
你看

29:34.640 --> 29:38.680
运行

29:38.680 --> 29:39.680
你看就变成这个样子

29:39.680 --> 29:40.680
对不对

29:40.680 --> 29:41.680
所以说我们通过这个and符号

29:41.680 --> 29:42.680
可以做很多事情

29:42.680 --> 29:44.680
比方说我要加一些违元素

29:44.680 --> 29:45.680
after

29:45.680 --> 29:47.680
所以我们可以加这样子写

29:49.680 --> 29:50.680
好 运行

29:50.680 --> 29:51.680
看一下

29:51.680 --> 29:52.680
是吧

29:52.680 --> 29:53.680
就是了

29:53.680 --> 29:54.680
如果说你加了

29:54.680 --> 29:55.680
你没有用这个and的话

29:55.680 --> 29:56.680
就变成这样子了

29:56.680 --> 29:57.680
它中间有个空格了

29:57.680 --> 29:59.680
就这个区别

29:59.680 --> 30:00.680
那如果说你要用指元素的话

30:00.680 --> 30:01.680
也非常简单

30:01.680 --> 30:03.680
比方说我这里的Li

30:03.680 --> 30:05.680
下面的a元素

30:05.680 --> 30:06.680
用个大语符号

30:06.680 --> 30:07.680
对吧

30:07.680 --> 30:08.680
对不对

30:08.680 --> 30:09.680
txt

30:09.680 --> 30:13.010
decorate

30:13.010 --> 30:14.010
看一下

30:15.010 --> 30:16.010
运行

30:16.010 --> 30:17.010
你看

30:17.010 --> 30:18.010
是不是有个大语符号了

30:18.010 --> 30:19.010
结果这么简单

30:19.010 --> 30:20.010
没有多少复杂的

30:20.010 --> 30:21.010
对吧

30:21.010 --> 30:22.010
它可以进行嵌炮

30:22.010 --> 30:23.010
嵌炮的时候

30:23.010 --> 30:24.010
如果说你要接着写

30:24.010 --> 30:25.010
那就用and

30:25.010 --> 30:26.010
不用接着写的话

30:26.010 --> 30:28.010
那就用大语

30:28.010 --> 30:29.010
或者是空格

30:29.010 --> 30:30.010
就是什么都是加

30:30.010 --> 30:31.010
那就空格

30:31.010 --> 30:32.010
都可以

30:32.010 --> 30:33.010
好

30:33.010 --> 30:34.010
再看

30:34.010 --> 30:35.010
还有一个

30:35.010 --> 30:36.010
都非常简单

30:36.010 --> 30:37.010
有什么复杂的呢

30:37.010 --> 30:38.010
就是混合

30:38.010 --> 30:39.010
混合

30:39.010 --> 30:40.010
它可以解决很多重复

30:40.010 --> 30:41.010
这些是里面

30:41.010 --> 30:42.010
重复代码的问题

30:42.010 --> 30:43.010
比方说

30:43.010 --> 30:44.010
我举个例子

30:44.010 --> 30:45.010
如果说

30:45.010 --> 30:46.010
我们

30:46.010 --> 30:47.010
经常会写一些

30:47.010 --> 30:48.010
圆角边框

30:48.010 --> 30:49.010
因为现在

30:49.010 --> 30:50.010
圆角边框用的

30:50.010 --> 30:51.010
还是非常的广泛的

30:51.010 --> 30:52.010
很多盒子

30:52.010 --> 30:53.010
你一个直

30:53.010 --> 30:54.010
直不勾的

30:54.010 --> 30:55.010
这个角

30:55.010 --> 30:56.010
看上去不算好看

30:56.010 --> 30:57.010
给它一个圆角

30:57.010 --> 30:58.010
要圆润一点

30:58.010 --> 30:59.010
你看那个

30:59.010 --> 31:00.010
小米这个nogo

31:00.010 --> 31:02.010
不就是加一个圆角吗

31:02.010 --> 31:03.010
对不对

31:03.010 --> 31:04.010
那么圆角

31:04.010 --> 31:05.010
一般来说

31:05.010 --> 31:06.010
网站里面

31:06.010 --> 31:08.010
它不会随意的给数字

31:08.010 --> 31:09.010
不过你一个相处

31:09.010 --> 31:10.010
这边两个相处

31:10.010 --> 31:11.010
这边三个相处

31:11.010 --> 31:12.010
这边五个相处

31:12.010 --> 31:13.010
这边二十个相处

31:13.010 --> 31:14.010
不太会有那么的

31:14.010 --> 31:15.010
随意的数字

31:15.010 --> 31:16.010
一般来说

31:16.010 --> 31:17.010
设计师

31:17.010 --> 31:18.010
给你设计出来的话

31:18.010 --> 31:19.010
很多合适的圆角

31:19.010 --> 31:20.010
它都是数字

31:20.010 --> 31:21.010
都是固定的

31:21.010 --> 31:22.010
比方说五个相处

31:22.010 --> 31:23.010
那么这样子

31:23.010 --> 31:24.010
你每一次都去

31:24.010 --> 31:25.010
加一个border radius

31:25.010 --> 31:26.010
非常麻烦

31:26.010 --> 31:27.010
对不对

31:27.010 --> 31:28.010
比方说有一个a

31:28.010 --> 31:29.010
这个样式

31:29.010 --> 31:31.010
加了一个border radius

31:31.010 --> 31:33.010
五个相处

31:33.010 --> 31:34.010
然后b这个样式

31:34.010 --> 31:36.010
又加了一个border radius

31:36.010 --> 31:37.010
有五个相处

31:37.010 --> 31:39.010
是不是特别麻烦

31:39.010 --> 31:40.010
很多样式里面

31:40.010 --> 31:41.010
有些其他样式

31:41.010 --> 31:42.010
其他样式代码

31:42.010 --> 31:43.010
然后它加了个圆角

31:43.010 --> 31:44.010
然后自己有些

31:44.010 --> 31:45.010
其他样式代码

31:45.010 --> 31:46.010
加个圆角

31:46.010 --> 31:47.010
是不是很麻烦

31:47.010 --> 31:48.010
而且是重复值

31:48.010 --> 31:49.010
将来这个数值一变

31:49.010 --> 31:50.010
是不是要出问题

31:50.010 --> 31:51.010
要到处去干

31:51.010 --> 31:52.010
当然你可以用变量

31:52.010 --> 31:53.010
可不可以用变量

31:53.010 --> 31:54.010
可以

31:54.010 --> 31:55.010
你这里可以用个变量

31:55.010 --> 31:56.010
比方说

31:56.010 --> 31:57.010
我们用个变量

31:57.010 --> 31:59.010
五个相处

31:59.010 --> 32:00.010
那么这里

32:00.010 --> 32:01.010
是不是可以用变量的

32:01.010 --> 32:02.010
但是你还是觉得不爽

32:02.010 --> 32:03.010
为什么不爽呢

32:03.010 --> 32:04.010
你每一次都要去

32:04.010 --> 32:06.010
写这么一场串态

32:06.010 --> 32:07.010
对不对

32:07.010 --> 32:08.010
那我们可以怎么做呢

32:08.010 --> 32:10.010
我们就可以用混合

32:10.010 --> 32:12.010
混合做法非常简单

32:12.010 --> 32:14.010
就是写上一个

32:14.010 --> 32:16.010
类似于函数的东西

32:16.010 --> 32:17.010
其实就是一个内样式

32:17.010 --> 32:19.010
比方说给它写个wrong的

32:19.010 --> 32:21.010
border radius

32:21.010 --> 32:22.010
五个相处

32:22.010 --> 32:23.010
好 接下来

32:23.010 --> 32:25.010
我a这个地方

32:25.010 --> 32:27.010
我要使用border radius

32:27.010 --> 32:28.010
我就直接这样写

32:28.010 --> 32:32.220
wrong的

32:32.220 --> 32:33.220
就这么简单

32:34.220 --> 32:35.220
这样子一来的话

32:35.220 --> 32:36.220
一编译

32:36.220 --> 32:37.220
它就会把这个样式里面

32:37.220 --> 32:38.220
代码直接复制

32:38.220 --> 32:39.220
暂停到这个位置

32:39.220 --> 32:41.220
好 咱们来试一下

32:41.220 --> 32:43.220
npmrongc

32:43.220 --> 32:44.220
你看

32:44.220 --> 32:45.220
a里边是不是有那个

32:45.220 --> 32:46.220
border radius

32:46.220 --> 32:47.220
b里边是不是有个

32:47.220 --> 32:48.220
border radius

32:48.220 --> 32:50.220
上面还有一个wrong的

32:50.220 --> 32:51.220
没了意思吧

32:51.220 --> 32:53.220
好 如果说你不希望

32:53.220 --> 32:54.220
不希望生成

32:54.220 --> 32:55.220
上面这个wrong的的话

32:55.220 --> 32:56.220
也非常简单

32:56.220 --> 32:57.220
你给这个那样式

32:57.220 --> 32:58.220
加上两个小过号

32:58.220 --> 33:01.220
你只要加上两个小过号

33:01.220 --> 33:02.220
这个就不是一个

33:02.220 --> 33:03.220
正常的css代

33:03.220 --> 33:04.220
css那样式

33:04.220 --> 33:05.220
它就是一个纯粹的

33:05.220 --> 33:07.220
列式混合

33:07.220 --> 33:08.220
就把它

33:08.220 --> 33:10.220
它就纯粹用来混合的

33:10.220 --> 33:12.220
好 咱们来试一下

33:12.220 --> 33:14.220
你看 上面这个wrong的没了

33:14.220 --> 33:16.220
就变成一个非常纯粹的ad

33:16.220 --> 33:17.220
对不对

33:17.220 --> 33:20.220
而且这个玩意还可以给参数

33:20.220 --> 33:21.220
比方说这里

33:21.220 --> 33:22.220
我可以给它一个参数

33:22.220 --> 33:23.220
a开头

33:23.220 --> 33:25.220
r 圆角半径

33:25.220 --> 33:26.220
你可以给我传

33:26.220 --> 33:28.220
比方说五个相处

33:28.220 --> 33:29.220
五个相处

33:29.220 --> 33:30.220
你可以给我传参

33:30.220 --> 33:31.220
那么这边呢

33:31.220 --> 33:32.220
我就使用这个r

33:32.220 --> 33:33.220
有参数的值

33:33.220 --> 33:35.220
看一下啊

33:35.220 --> 33:36.220
双c

33:36.220 --> 33:38.220
是不是一样的效果

33:38.220 --> 33:39.220
那么这样子就更加灵活了

33:39.220 --> 33:40.220
比方说有一天

33:40.220 --> 33:41.220
一个特别的一个c

33:41.220 --> 33:43.220
c比较特别

33:43.220 --> 33:44.220
它呢

33:44.220 --> 33:45.220
它不是五个相处

33:45.220 --> 33:46.220
它是十个相处

33:46.220 --> 33:47.220
那么这边呢

33:47.220 --> 33:48.220
我们就可以使用

33:53.110 --> 33:54.110
运行

33:54.110 --> 33:55.110
你看是不是十个相处

33:55.110 --> 33:57.110
而且它还可以给默认值

33:57.110 --> 33:58.110
比方说你加五个相处

33:58.110 --> 33:59.110
你可以不传

33:59.110 --> 34:00.110
不传的话

34:00.110 --> 34:01.110
我就使用默认值

34:01.110 --> 34:03.110
好 再来看

34:03.110 --> 34:05.110
是不是一样的效果

34:05.110 --> 34:07.110
对吧 这就是混合

34:07.110 --> 34:08.110
用混合的话

34:08.110 --> 34:10.110
可以让我们很多代码呀

34:10.110 --> 34:11.110
很多那种

34:11.110 --> 34:12.110
重复性的代码呢

34:12.110 --> 34:13.110
得到极大的减化

34:13.110 --> 34:16.110
比方说一个比较常见的做法

34:16.110 --> 34:17.110
就是

34:17.110 --> 34:18.110
居中

34:18.110 --> 34:19.110
我们有很多种居中方案

34:19.110 --> 34:21.110
比方说我们用弹性和居中

34:21.110 --> 34:23.110
我把一个容器呢

34:23.110 --> 34:24.110
变成弹性和

34:24.110 --> 34:26.110
然后给它设置居中效果

34:26.110 --> 34:28.110
比方说我们给它设置一个

34:29.110 --> 34:31.110
content center

34:31.110 --> 34:33.110
我给它设置这么一个混合

34:33.110 --> 34:34.110
它做的事情呢

34:34.110 --> 34:35.110
特别简单

34:35.110 --> 34:36.110
我把自己的变成弹性和

34:36.110 --> 34:37.110
flex

34:37.110 --> 34:38.110
然后呢

34:38.110 --> 34:40.110
我们给它写个justify content

34:40.110 --> 34:41.110
center

34:41.110 --> 34:42.110
对吧

34:42.110 --> 34:43.110
大家都写过

34:43.110 --> 34:44.110
然后呢

34:45.110 --> 34:46.110
是不是横向居中

34:46.110 --> 34:47.110
重向居中

34:47.110 --> 34:48.110
那么之后呢

34:48.110 --> 34:49.110
某一个容器

34:49.110 --> 34:50.110
它的里面

34:50.110 --> 34:51.110
只有一个元素

34:51.110 --> 34:52.110
它要把它

34:52.110 --> 34:53.110
内部的元素居中

34:53.110 --> 34:54.110
非常简单

34:54.110 --> 34:55.110
我这个容器呢

34:55.110 --> 34:56.110
写了一些其他样式

34:56.110 --> 34:57.110
然后我现在要居中了

34:58.110 --> 34:59.110
就完了

34:59.110 --> 35:00.110
凡是要居中的地方

35:00.110 --> 35:01.110
我们只需要用一句话

35:01.110 --> 35:02.110
就完事了

35:02.110 --> 35:03.110
那里看

35:03.110 --> 35:04.110
是不是这三句

35:04.110 --> 35:05.110
这三句单

35:05.110 --> 35:06.110
就直接复制3k过来

35:07.110 --> 35:09.110
混合非常有用

35:10.110 --> 35:11.110
那么我们就

35:11.110 --> 35:12.110
还有个什么

35:12.110 --> 35:13.110
还有一个注释

35:13.110 --> 35:14.110
给它说一下这个注释

35:14.110 --> 35:15.110
注释呢

35:15.110 --> 35:16.110
在net里面有两种注释

35:16.110 --> 35:17.110
一种呢

35:17.110 --> 35:18.110
就是纯粹的CSS注释

35:18.110 --> 35:19.110
一种呢

35:19.110 --> 35:20.110
就是

35:20.110 --> 35:22.110
双血缸注释

35:22.110 --> 35:23.110
我来看一下

35:23.110 --> 35:24.110
这两种注释

35:25.110 --> 35:26.110
比方说

35:26.110 --> 35:27.110
这里随便写个注释

35:28.110 --> 35:29.110
默认的是一个

35:29.110 --> 35:30.110
就是用

35:30.110 --> 35:31.110
仰倉加血缸

35:31.110 --> 35:32.110
默认打出来的就是

35:32.110 --> 35:33.110
双血缸

35:33.110 --> 35:34.110
因为这样的注释

35:34.110 --> 35:35.110
这样的注释

35:35.110 --> 35:37.110
只存在

35:37.110 --> 35:38.110
于

35:38.110 --> 35:41.420
NES

35:41.420 --> 35:42.420
元代码中

35:42.420 --> 35:43.420
这两个元代码

35:43.420 --> 35:44.420
元代码就是

35:44.420 --> 35:45.420
我们自己写的代码

35:46.420 --> 35:47.420
好

35:47.420 --> 35:48.420
来看一下

35:49.420 --> 35:50.420
它不是

35:50.420 --> 35:51.420
我们编译过后的代码

35:52.420 --> 35:53.420
你看这个要注释

35:53.420 --> 35:54.420
编译过后有吗

35:54.420 --> 35:55.420
是不是没有

35:55.420 --> 35:56.420
它就把注释去掉了

35:56.420 --> 35:57.420
因为我们平时

35:57.420 --> 35:58.420
读代码的时候

35:58.420 --> 35:59.420
只会读元代码

35:59.420 --> 36:00.420
谁去读这个代码呢

36:00.420 --> 36:01.420
编译结果

36:01.420 --> 36:02.420
你看

36:02.420 --> 36:03.420
现在还能读

36:03.420 --> 36:04.420
我将来根本就没法读

36:04.420 --> 36:06.420
因为这个代码会被压缩

36:06.420 --> 36:07.420
它把这些换行

36:07.420 --> 36:08.420
全部给你去掉

36:08.420 --> 36:09.420
它不需要你去读这个

36:10.420 --> 36:11.420
你只需要读元代码就行了

36:11.420 --> 36:12.420
然后一编译

36:12.420 --> 36:13.420
就形成最终的

36:13.420 --> 36:14.420
最终代码

36:15.420 --> 36:16.420
好

36:16.420 --> 36:17.420
所以说这个注释呢

36:17.420 --> 36:18.420
我们一般来说

36:18.420 --> 36:19.420
在NES里用的最多的

36:19.420 --> 36:20.420
就是这个注释

36:20.420 --> 36:21.420
如果说你要

36:21.420 --> 36:22.420
把注释写到

36:22.420 --> 36:23.420
就是

36:24.420 --> 36:25.420
深层到这里边的话

36:25.420 --> 36:26.420
你要用普通的

36:26.420 --> 36:27.420
就是CSS注释

36:28.420 --> 36:31.420
这是普通的CSS注释

36:31.420 --> 36:33.420
它会深层到

36:34.420 --> 36:35.420
编译结果

36:37.420 --> 36:38.420
再看

36:39.420 --> 36:40.420
你看这个注释又过来了

36:40.420 --> 36:41.420
简单说一下

36:41.420 --> 36:42.420
平时你们都用

36:42.420 --> 36:43.420
这种注释最好的

36:43.420 --> 36:45.420
因为没有人去读这个代码

36:46.420 --> 36:47.420
好

36:47.420 --> 36:48.420
咱们NES就讲完了

36:48.420 --> 36:49.420
特别简单

36:49.420 --> 36:50.420
你说这个玩意有什么多复杂呢

36:50.420 --> 36:51.420
你只要会CSS

36:51.420 --> 36:52.420
你就一定会NES

36:52.420 --> 36:53.420
因为你哪怕你

36:53.420 --> 36:55.420
一句NES的语法都不会

36:55.420 --> 36:56.420
一直用纯CSS

36:56.420 --> 36:57.420
它都是支持的

36:58.420 --> 36:59.420
好

36:59.420 --> 37:00.420
那么最后呢

37:00.420 --> 37:01.420
我来做两个练习

37:01.420 --> 37:02.420
第一个练习呢

37:02.420 --> 37:04.420
是编写一个NES混合

37:04.420 --> 37:05.420
让你写个混合

37:06.420 --> 37:08.420
实现绝对定位局中

37:08.420 --> 37:09.420
你看你怎么编

37:09.420 --> 37:10.420
你看咋编都可以

37:10.420 --> 37:11.420
你们去编一下

37:11.420 --> 37:13.420
然后你自己写个NES文件

37:13.420 --> 37:14.420
叫做

37:17.420 --> 37:18.420
研习E嘛

37:18.420 --> 37:19.420
P1

37:19.420 --> 37:20.420
叫NES

37:20.420 --> 37:21.420
写个文件

37:22.420 --> 37:24.420
当然你要去配置一下脚本

37:24.420 --> 37:25.420
我们再加一个脚本吧

37:26.420 --> 37:27.420
P1

37:27.420 --> 37:29.420
就是NES C

37:29.420 --> 37:30.420
P1点NES

37:30.420 --> 37:31.420
把它编译成为

37:31.420 --> 37:33.420
P1点CSS

37:33.420 --> 37:34.420
这样的写

37:36.420 --> 37:37.420
好

37:37.420 --> 37:38.420
那么我们来写一下这个NES

37:38.420 --> 37:40.420
让你去写一个混合

37:40.420 --> 37:41.420
你可以去测试一下

37:41.420 --> 37:43.420
查看一下它的编译结果市场

37:45.420 --> 37:46.420
运行一下

37:50.590 --> 37:51.590
好了没

37:51.590 --> 37:52.590
我不知道你们写啥样

37:52.590 --> 37:53.590
写啥样都可以

37:54.590 --> 37:56.590
这个CSS也不会爆错的

37:56.590 --> 37:57.590
实际上你写出来是正常的

37:57.590 --> 37:58.590
编译结果是正常的也可以

37:59.590 --> 38:01.590
我的话我就可以这样子来写

38:01.590 --> 38:03.590
叫做

38:03.590 --> 38:05.590
ABS Center

38:06.590 --> 38:08.590
表示决定定位局中

38:08.590 --> 38:10.590
因为我们决定定位局中也写过很多次

38:10.590 --> 38:12.590
每次都要写一长串代码

38:12.590 --> 38:14.590
那我们这里可以怎么写呢

38:14.590 --> 38:16.590
我就把这些东西写成混合

38:16.590 --> 38:18.590
混合了最好这样子写

38:18.590 --> 38:20.590
这样子写的还不会生成到编译结果

38:20.590 --> 38:22.590
它只会给别人用

38:22.590 --> 38:24.590
plation

38:24.590 --> 38:28.220
absolute

38:28.220 --> 38:29.220
决定位

38:29.220 --> 38:31.220
neft 50%

38:31.220 --> 38:33.220
pop 50%

38:33.220 --> 38:35.220
transform

38:35.220 --> 38:37.220
transnet

38:37.220 --> 38:39.220
-50%

38:40.220 --> 38:42.220
-50%

38:44.220 --> 38:47.220
好将来我们要用的时候就特别方便了

38:47.220 --> 38:49.220
比方说我们有一个

38:49.220 --> 38:51.220
container下面的有一个

38:51.220 --> 38:53.220
item

38:53.220 --> 38:54.220
item要决定定位局中

38:54.220 --> 38:55.220
那么我们只需要把container

38:55.220 --> 38:57.220
plation作为renative

38:57.220 --> 38:59.220
然后item作为

38:59.220 --> 39:02.220
比方说我给它一个宽度吧

39:02.220 --> 39:03.220
100个像素

39:03.220 --> 39:05.220
高度100个像素

39:05.220 --> 39:07.220
那么既然有两个重复值

39:07.220 --> 39:09.220
反正它是一个正方形嘛

39:09.220 --> 39:10.220
我就顺便说一下这个问题

39:10.220 --> 39:12.220
顺便一个正方形我就可以定一个辨量

39:12.220 --> 39:14.220
Size 100个像素

39:14.220 --> 39:15.220
好我们这里

39:15.220 --> 39:17.220
其实

39:17.220 --> 39:19.220
这个辨量不仅是可以有颜色

39:19.220 --> 39:20.220
可以有尺寸

39:20.220 --> 39:22.220
可以用任何事都可以

39:22.220 --> 39:24.220
那么这样子就避免了重复代了

39:24.220 --> 39:25.220
对不对

39:25.220 --> 39:27.220
而且这个辨量是不能在它外面使用的

39:27.220 --> 39:28.220
它是有作用欲的

39:28.220 --> 39:30.220
除了这个大功耗就用不了了

39:30.220 --> 39:32.220
如果说你要全部都用的话

39:32.220 --> 39:33.220
就定一方外面

39:33.220 --> 39:34.220
好

39:34.220 --> 39:35.220
然后它呢

39:35.220 --> 39:36.220
它要决定定位局中

39:36.220 --> 39:37.220
随便举个例子

39:37.220 --> 39:38.220
下举个例子

39:38.220 --> 39:40.220
你们咋也都可以

39:41.220 --> 39:43.220
这样就这样子

39:43.220 --> 39:44.220
就这样子

39:44.220 --> 39:45.220
对不对

39:45.220 --> 39:46.220
将来我们要决定定位局中

39:46.220 --> 39:48.220
是不是就直接用这个混合

39:48.220 --> 39:49.220
一下就完事了

39:49.220 --> 39:51.220
而且这个玩意我们是不是可以用参数

39:51.220 --> 39:52.220
比方有些东西呢

39:52.220 --> 39:54.220
它不一定是决定定位

39:54.220 --> 39:55.220
有可能是固定定位

39:55.220 --> 39:56.220
那我们就给它一个方式嘛

39:56.220 --> 39:57.220
Type嘛

39:58.220 --> 39:59.220
Type嘛

39:59.220 --> 40:00.220
默认是什么

40:01.220 --> 40:03.220
默认是Apple's Notes

40:03.220 --> 40:04.220
然后呢

40:04.220 --> 40:05.220
我可以给它传

40:05.220 --> 40:07.220
然后我给它传Fixed

40:07.220 --> 40:08.220
你看

40:08.220 --> 40:09.220
它出来就是Fixed

40:09.220 --> 40:10.220
对吧

40:10.220 --> 40:11.220
传的

40:11.220 --> 40:12.220
因为它传递了过来

40:12.220 --> 40:13.220
它就用你传递的

40:13.220 --> 40:14.220
跟函数差不多

40:14.220 --> 40:15.220
对不对

40:15.220 --> 40:16.220
第一题

40:16.220 --> 40:17.220
就随便做一做

40:17.220 --> 40:18.220
那就OK了

40:18.220 --> 40:20.220
然后的话是

40:20.220 --> 40:21.220
第二题

40:21.220 --> 40:22.220
找出

40:22.220 --> 40:25.220
将过去你做的某一个demo

40:25.220 --> 40:26.220
你们过去肯定写过

40:26.220 --> 40:27.220
很多小的练习

40:27.220 --> 40:28.220
跟CSS相关的

40:28.220 --> 40:31.220
跟做一些页面动销相关的练习

40:31.220 --> 40:34.220
把它的CSS代码的改造成类似

40:34.220 --> 40:35.220
做这么一件事

40:35.220 --> 40:37.220
我这里呢就

40:37.220 --> 40:38.220
拿出这个了

40:38.220 --> 40:39.220
你们就随便找一个

40:39.220 --> 40:41.220
改造特别简单

40:41.220 --> 40:43.220
没有什么复杂的

40:43.220 --> 40:45.220
我就用这个玩意了

40:45.220 --> 40:47.220
我就用这个王者荣耀

40:47.220 --> 40:49.220
英雄联盟官网查询

40:49.220 --> 40:51.220
就用这个玩意了

40:51.220 --> 40:52.220
好那么我这边

40:52.220 --> 40:54.220
以前是不是写过一个CSS

40:54.220 --> 40:55.220
对不对

40:55.220 --> 40:57.220
好那我这里边再加一个吧

40:57.220 --> 40:59.220
加一个什么

41:02.220 --> 41:03.220
加个缴笨

41:03.220 --> 41:06.220
就是demo吧

41:06.220 --> 41:08.220
Nest C

41:08.220 --> 41:09.220
或者叫P2

41:09.220 --> 41:10.220
第二道题

41:10.220 --> 41:12.220
Nest C

41:12.220 --> 41:14.220
把那个名字改一下

41:14.220 --> 41:15.220
这怎么用

41:15.220 --> 41:17.220
不能用中文

41:17.220 --> 41:20.220
叫做王者荣耀咋写的

41:20.220 --> 41:24.170
Hero

41:24.170 --> 41:29.250
把这个Hero下边的

41:29.250 --> 41:31.250
index社交Nest

41:31.250 --> 41:33.250
编译成为Hero下边的

41:33.250 --> 41:35.250
index社交CSS

41:35.250 --> 41:36.250
好那么接下来呢

41:36.250 --> 41:39.250
我把这个CSS改成Nest

41:39.250 --> 41:42.250
你看我一行代码不用改

41:42.250 --> 41:43.250
一行代码都不用改

41:43.250 --> 41:44.250
我直接运行这个名字

41:44.250 --> 41:47.250
MPM1P2

41:47.250 --> 41:48.250
就生成CSS吧

41:48.250 --> 41:49.250
一模一样的

41:49.250 --> 41:50.250
所以说Nest

41:50.250 --> 41:52.250
全支持CSS代码的

41:52.250 --> 41:53.250
哪怕你不是说

41:53.250 --> 41:54.250
今天学校那时候

41:54.250 --> 41:56.250
你一定要强迫自己

41:56.250 --> 41:57.250
必须要处处用变量

41:57.250 --> 41:59.250
到处必须要用签讨

41:59.250 --> 42:01.250
不要这么折磨自己

42:01.250 --> 42:02.250
你想到了就用

42:02.250 --> 42:03.250
没想到拿到

42:03.250 --> 42:05.250
轻松一点

42:05.250 --> 42:07.250
它是完全支持CSS的

42:07.250 --> 42:09.250
那我来稍微改造一下吧

42:09.250 --> 42:10.250
改造成什么样子呢

42:10.250 --> 42:11.250
就是水星了

42:11.250 --> 42:13.250
不是说一定要写成什么样子

42:13.250 --> 42:15.250
我就把那一签讨的地方

42:15.250 --> 42:16.250
然后这个radio对吧

42:16.250 --> 42:17.250
这里用个B4

42:17.250 --> 42:19.250
我就干脆这样子写

42:20.250 --> 42:21.250
B4

42:21.250 --> 42:23.250
这个玩意儿写进来

42:23.250 --> 42:25.250
可不可以

42:25.250 --> 42:29.400
这里有个after

42:29.400 --> 42:31.400
我就给它复制

42:31.400 --> 42:33.400
也给它写进来

42:33.400 --> 42:35.400
before

42:35.400 --> 42:37.400
after

42:37.400 --> 42:39.400
这个after我就不要了

42:39.400 --> 42:41.400
好 那么这个有个切个词

42:41.400 --> 42:43.400
那么我们这里就写进来

42:43.400 --> 42:44.400
切个词

42:44.400 --> 42:48.600
这里有个after

42:48.600 --> 42:53.520
那我就干脆这样呗

42:53.520 --> 42:54.520
after

42:54.520 --> 42:57.520
后边如果说你跟了一个切个词

42:57.520 --> 42:58.520
切个词

42:58.520 --> 43:03.240
就像这样

43:03.240 --> 43:04.240
对吧

43:04.240 --> 43:06.240
好 咱们来试

43:06.240 --> 43:09.740
对了

43:09.740 --> 43:13.820
再把它签讨一下

43:13.820 --> 43:14.820
签讨一下

43:14.820 --> 43:15.820
我们还可以把择列起来

43:15.820 --> 43:17.820
这就是一大块样式

43:17.820 --> 43:18.820
它里面有b4

43:18.820 --> 43:19.820
它里面有after

43:19.820 --> 43:20.820
after如果说选中的时候

43:20.820 --> 43:21.820
又是什么样子

43:21.820 --> 43:22.820
对吧

43:22.820 --> 43:24.820
那咱们来看一下吧

43:24.820 --> 43:25.820
编译

43:25.820 --> 43:29.580
MP1-ROM-P2

43:29.580 --> 43:31.580
看一下这个radio这里

43:31.580 --> 43:32.580
after 你看

43:32.580 --> 43:33.580
编译是这个样子的

43:33.580 --> 43:34.580
可不可以 当然可以

43:34.580 --> 43:35.580
没问题

43:35.580 --> 43:37.580
对吧

43:37.580 --> 43:38.580
yeah

43:38.580 --> 43:41.210
怎么会

43:41.210 --> 43:43.210
after

43:43.210 --> 43:45.210
after得带钱

43:45.210 --> 43:46.210
对不对

43:46.210 --> 43:47.210
after

43:47.210 --> 43:49.210
这个切个词不能拖到最后

43:49.210 --> 43:51.210
after一定在最后的

43:51.210 --> 43:52.210
那我就写出来吧

43:52.210 --> 43:54.210
也不用纠结

43:54.210 --> 43:56.210
after

43:56.210 --> 43:59.210
就是这个radio下边的after

43:59.210 --> 44:00.210
如果说

44:00.210 --> 44:04.160
这样子写

44:04.160 --> 44:05.160
这样子写

44:05.160 --> 44:06.160
就完成了

44:06.160 --> 44:08.160
编译

44:08.160 --> 44:09.160
这边 刷新

44:09.160 --> 44:10.160
一样的

44:10.160 --> 44:12.160
这都是一样的

44:12.160 --> 44:14.160
好 你们可以随意改造

44:14.160 --> 44:16.160
把这些可以签讨的地方

44:16.160 --> 44:17.160
就给它签讨一下

44:17.160 --> 44:19.160
然后像是像这个地方

44:19.160 --> 44:20.160
像这个地方

44:20.160 --> 44:22.160
就完全可以签讨

44:22.160 --> 44:23.160
对吧

44:23.160 --> 44:26.370
然后像这个地方

44:26.370 --> 44:28.370
我都还没有用编调

44:28.370 --> 44:29.370
来改造一下吧

44:29.370 --> 44:31.370
我就慢慢去改造一下吧

44:31.370 --> 44:32.370
稍微改造一下

44:32.370 --> 44:33.370
因为代码也不多

44:33.370 --> 44:35.370
类似的类似下面emag

44:36.370 --> 44:37.370
你改到过后

44:37.370 --> 44:38.370
你会看到一个代码

44:38.370 --> 44:40.370
其实可约度性就高很多了

44:42.370 --> 44:44.370
首先看这一块吧

44:44.370 --> 44:48.770
就我们刚刚改造的这一块

44:48.770 --> 44:51.770
这个内央是比之前要好多了

44:51.770 --> 44:52.770
之前是评仆直续的

44:52.770 --> 44:53.770
摊开的

44:53.770 --> 44:56.770
而且我这边签讨还用的不多

44:56.770 --> 44:57.770
然后看一下

44:57.770 --> 44:58.770
有没有颜色

44:58.770 --> 44:59.770
颜色重复

44:59.770 --> 45:00.770
这个颜色好像当时

45:00.770 --> 45:01.770
到处来重复

45:01.770 --> 45:02.770
那么这里的颜色

45:02.770 --> 45:04.770
我们给它写个

45:04.770 --> 45:06.770
定一个颜色的primary

45:10.470 --> 45:11.470
很好结束

45:11.470 --> 45:12.470
那么之后

45:12.470 --> 45:13.470
反而是出现这个颜色的地方

45:13.470 --> 45:15.470
我把它变成primary

45:15.470 --> 45:16.470
提款一下

45:16.470 --> 45:17.470
把这个颜色

45:17.470 --> 45:19.470
所有出现这个颜色的地方

45:19.470 --> 45:22.470
变成primary

45:22.470 --> 45:23.470
变

45:23.470 --> 45:30.170
这个地方不用做

45:30.170 --> 45:35.830
还有什么地方有一个颜色呢

45:35.830 --> 45:37.830
怎么有多了个这个颜色

45:37.830 --> 45:38.830
都用primary

45:38.830 --> 45:40.830
因为它们都是一个颜色

45:40.830 --> 45:44.400
看一下还有什么地方有颜色

45:44.400 --> 45:46.400
看一下几号

45:46.400 --> 45:51.370
这个地方也有

45:51.370 --> 45:53.370
primary

45:53.370 --> 45:56.370
一个主颜色

45:56.370 --> 45:57.370
其他的颜色

45:57.370 --> 45:59.370
其实我们也可以做类似的做法

45:59.370 --> 46:00.370
像文字颜色

46:00.370 --> 46:02.370
这个灰色

46:02.370 --> 46:03.370
对不对

46:03.370 --> 46:04.370
来看一下

46:04.370 --> 46:08.770
我们先编译一下

46:08.770 --> 46:09.770
然后我们看一下

46:09.770 --> 46:11.770
这颜色好像没什么问题对吧

46:11.770 --> 46:12.770
然后接下来

46:12.770 --> 46:14.770
我们把这个颜色一变

46:14.770 --> 46:15.770
F40

46:15.770 --> 46:17.770
随便变一个颜色

46:17.770 --> 46:18.770
只要改动一个地方

46:18.770 --> 46:19.770
其他的地方用了

46:19.770 --> 46:21.770
这个变让的地方全部被改了

46:21.770 --> 46:22.770
对不对

46:22.770 --> 46:24.770
非常方便

46:24.770 --> 46:25.770
好

46:25.770 --> 46:27.770
这就是这个nest

46:27.770 --> 46:28.770
我这边

46:28.770 --> 46:29.770
你们可以自行发挥

46:29.770 --> 46:31.770
这里边可以用哪些地方

46:31.770 --> 46:32.770
可以用混合

46:32.770 --> 46:34.770
比方说像有些地方Border Radius

46:34.770 --> 46:36.770
有些地方Border Radius

46:36.770 --> 46:38.770
都是五个相处的地方

46:38.770 --> 46:39.770
你可以用混合对不对

46:39.770 --> 46:40.770
都可以

46:40.770 --> 46:41.770
好

46:41.770 --> 46:42.770
我们就简单一个拋装颐域

46:42.770 --> 46:44.770
简单的改造一下就完事了

46:44.770 --> 46:45.770
好

46:45.770 --> 46:46.770
这是关于nest

46:46.770 --> 46:47.770
所以说我们以后

46:47.770 --> 46:48.770
在框架里边

46:48.770 --> 46:49.770
它肯定是支持nest的

46:49.770 --> 46:50.770
因此

46:50.770 --> 46:52.770
我们到时候就可以直接使用nest代码

46:52.770 --> 46:54.770
而不是以前的传统的CSS代码

46:54.770 --> 46:55.770
好

46:55.770 --> 46:57.770
最后我给大家说一下

46:57.770 --> 46:59.770
就是nest这个东西

46:59.770 --> 47:03.340
它称之为

47:03.340 --> 47:06.340
CSS预编意气

47:06.340 --> 47:09.340
就是先把CSS的编译完了过后

47:09.340 --> 47:11.340
编成一个传统的CSS代码

47:11.340 --> 47:13.340
把一些乱七八糟的

47:13.340 --> 47:14.340
像什么nest代码

47:14.340 --> 47:15.340
编一层CSS代码之后

47:15.340 --> 47:16.340
你再去运行

47:16.340 --> 47:18.340
它叫预编意气

47:18.340 --> 47:19.340
那么这个预编意气

47:19.340 --> 47:21.340
它不仅仅是有nest

47:21.340 --> 47:22.340
它有很多的

47:22.340 --> 47:23.340
比方说像那个nest

47:23.340 --> 47:24.340
是启动一个

47:24.340 --> 47:26.340
还有什么比较有名的

47:26.340 --> 47:27.340
是CSS

47:27.340 --> 47:28.340
它们都差不多

47:28.340 --> 47:29.340
都是边量

47:29.340 --> 47:30.340
千套

47:30.340 --> 47:31.340
混合都差不多

47:31.340 --> 47:33.340
有余法大同小异

47:33.340 --> 47:35.340
然后还有什么standards

47:35.340 --> 47:37.340
这些都是比较有名的

47:37.340 --> 47:39.340
大家可以有兴趣的

47:39.340 --> 47:41.340
但是nest还与放了比较

47:41.340 --> 47:43.340
比较特别一点

47:44.340 --> 47:46.340
可以去百度去搜索一下

47:46.340 --> 47:47.340
今天我们再加个作业

47:47.340 --> 47:48.340
去搜索一下

47:48.340 --> 47:50.340
看一下CSS长什么样子

47:50.340 --> 47:51.340
然后看一下standards

47:51.340 --> 47:52.340
长什么样子

47:52.340 --> 47:53.340
百度去搜索一下

47:53.340 --> 47:54.340
了解一下

47:54.340 --> 47:55.340
这个非常简单

47:55.340 --> 47:56.340
只要是混合的一个

47:56.340 --> 47:58.340
其他都基本上差不多了

47:58.340 --> 48:00.340
那么咱们今天的课呢就到这了

48:00.340 --> 48:01.340
拜拜

