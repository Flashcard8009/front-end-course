WEBVTT

00:00.370 --> 00:06.370
OK 前面的话 我们已经给大家介绍了就是关于这个wx 美尔

00:06.370 --> 00:12.370
啊 然后还有这个wx ss 啊 一个是负责结构 一个是负责样式 对吧

00:12.370 --> 00:19.370
然后接下来这个ges 啊ges的话没什么好说的啊ges的话就和原生的这个ges是一样的啊

00:19.370 --> 00:23.370
怎么我们看了一下 就是在小程序里面如何绑定世界

00:23.370 --> 00:29.370
对吧 好 那么这个看完了之后 然后接下来这节课 这节课我们来看一下什么呢

00:29.370 --> 00:39.370
我们来看一下这个 app.ges app.ges app.ges 你会发现这里面的话有个非常重要的叫做这个app 啊

00:39.370 --> 00:44.370
这个构造器啊 说这个以外的话 我们再来看什么呢 再来看就是每一个页面

00:44.370 --> 00:48.370
他的这个ges 文件里面有个什么呢 有个这个配置

00:48.370 --> 00:52.370
配置构造器啊 说这节课的话我们主要就看这两个东西

00:52.370 --> 00:56.370
一个是app.ges 这个是我们的入口 对吧 入口文件

00:56.370 --> 01:02.370
这边的这个app 构造器 以及每一个页面里面的这个配置这个构造器

01:02.370 --> 01:05.370
ok 好 我们这节课的话就是这边 这两个

01:05.370 --> 01:10.370
一个是app 一个是配置 啊 这边叫做构造器吧

01:10.370 --> 01:16.940
构造器 构造 构造器

01:16.940 --> 01:23.940
ok 好 一个是app 构造器

01:23.940 --> 01:29.940
一个是配置 构造器

01:29.940 --> 01:33.940
ok 好 我们首先先来看这个app

01:33.940 --> 01:37.940
对应的在这一块啊 就是官方文档的这一块

01:37.940 --> 01:40.940
程序与这个页面啊

01:40.940 --> 01:46.940
从逻辑组成来讲 一个小程序是由多个页面组成的这个程序

01:46.940 --> 01:49.940
你看我们的这个小程序啊 不要这边 这边呢

01:49.940 --> 01:51.940
我们一个文件家是不是就是一个页面

01:51.940 --> 01:56.940
这我们之前介绍过的 对不对 那我现在当前这个小程序的话就有几个页面

01:56.940 --> 02:00.940
是不是就有两个页面 对不对 一个index 一个noks

02:00.940 --> 02:05.940
好 然后这边的话区分一下这个小程序和程序 他这边小程序指的是什么呢

02:05.940 --> 02:10.940
小程序指的是产品侧面的这个程序 就是小程序就指的是微信小程序

02:10.940 --> 02:14.940
ok 这个程序 程序的话他指的是什么呢 他指的就是代码

02:14.940 --> 02:19.940
指的就是你这个代码 ok 好 然后为了避免误解

02:19.940 --> 02:25.940
他下面都用什么的都用这个app来代替这个代码层面的这个程序

02:25.940 --> 02:30.940
ok 好 那这边呢 首先第一个就是关于这个程序构造器啊

02:30.940 --> 02:34.940
这个app 这个app的话他其实主要就是两个知识点

02:34.940 --> 02:38.940
那两个知识点呢 一个的话是生命周期勾字函数

02:38.940 --> 02:45.940
生命周期勾字函数 还有一个是什么呢 还有一个是就是啊

02:45.940 --> 02:51.940
获取全局数据 获取全局数据

02:51.940 --> 02:54.940
好 我们一个知识点一个知识点来看

02:54.940 --> 02:57.940
首先的话关于这个生命周期勾字函数

02:57.940 --> 03:02.940
这个的话如果大家有这个view 或者这个react的这个开发经验的话

03:02.940 --> 03:06.940
这一块的话实际上也是比较熟悉的 对不对

03:06.940 --> 03:13.940
如果你有这个view 或者react的这个开发经验

03:13.940 --> 03:21.940
那么这个生命周期勾字函数也是非常熟悉的

03:21.940 --> 03:24.940
也是非常熟悉的 对不对

03:24.940 --> 03:29.940
当然有的同学的话可能没有使用过这个view 或者没有使用过这个react

03:29.940 --> 03:32.940
那简单解释一下 所谓生命周期勾字函数

03:32.940 --> 03:39.940
所谓生命周期勾字函数就是在一些什么

03:39.940 --> 03:43.940
固定的时间点 固定的时间点

03:43.940 --> 03:48.940
然后自动触发的这个函数 对不对

03:48.940 --> 03:53.940
说简单点的话其实就是这个 有点类似于事件

03:53.940 --> 03:56.940
事件的话你是就是你要主动去触发

03:56.940 --> 03:59.940
它这个的话它是自动的 自动的

03:59.940 --> 04:02.940
你到了那个时间点它就自动就触发了

04:02.940 --> 04:05.940
好 那我们来看一下这个整个APP里面

04:05.940 --> 04:08.940
它给我们提供了哪些这个生命周期函数呢

04:08.940 --> 04:11.940
我们来看一下 它这边的话有这个

04:15.940 --> 04:18.940
除了这个以外 还有什么呢 还有一个这个

04:18.940 --> 04:21.940
unerror 是这个出错的时候

04:21.940 --> 04:24.940
就小程序发生脚本错误 或者这个

04:24.940 --> 04:28.940
API调用失败的时候 这边会出发这个unerror

04:28.940 --> 04:32.940
整体来讲的话就这么几个 我们几个图

04:32.940 --> 04:40.710
几个图 放到笔记里面

04:41.710 --> 04:45.710
在这个APP构造器中

04:45.710 --> 04:50.710
我们能够书写的这个构造

04:50.710 --> 04:54.710
不是构造函数 能够书写的生命周期

04:54.710 --> 04:57.710
构指函数 如下

04:57.710 --> 05:00.710
OK 我把这个图片放在这里

05:00.710 --> 05:02.710
说放一下

05:02.710 --> 05:04.710
好 我们这边呢 主要来看一下前面三个

05:04.710 --> 05:07.710
前面三个的话也非常好理解

05:07.710 --> 05:10.710
来看一下 首先第一个是unlunch

05:10.710 --> 05:14.710
unlunch的话是小程序初始化完成之后

05:14.710 --> 05:16.710
它会触发一次这个unlunch

05:16.710 --> 05:20.710
这个你注意 全局只会触发一次

05:20.710 --> 05:23.710
看到没有 就整个你这个小程序加载好了之后

05:23.710 --> 05:25.710
它只会触发一次unlunch

05:25.710 --> 05:29.710
好 然后接下来的话 就是一个一对互斥的

05:29.710 --> 05:31.710
一个是unshow 一个是unhide

05:31.710 --> 05:33.710
你从这个名字 你就可以听出来

05:33.710 --> 05:35.710
unshow的话 是不是什么

05:35.710 --> 05:37.710
是不是就是你这个小程序

05:37.710 --> 05:40.710
当前处于这种显示状态的时候

05:40.710 --> 05:41.710
对不对 你看它这边

05:41.710 --> 05:42.710
就小程序启动

05:42.710 --> 05:45.710
或者从后台进入前台的时候显示

05:45.710 --> 05:47.710
它会触发这个unshow

05:47.710 --> 05:50.710
然后既然你如果从前台进入到这个后台

05:50.710 --> 05:53.710
比如说你回到桌面了

05:53.710 --> 05:56.710
对不对 那这个时候它会触发这个unhide

05:56.710 --> 05:59.710
它这个在官方文档这边也写的有

05:59.710 --> 06:02.710
在这里 在这里

06:02.710 --> 06:04.710
初次进入小程序的时候

06:04.710 --> 06:08.710
然后微信客户端初始化好这个数组环境

06:08.710 --> 06:11.710
然后接下来这边拿到这些代码包

06:11.710 --> 06:12.710
然后注入到数组环境

06:12.710 --> 06:16.710
总之就是什么呢 总之就是初始化完毕后

06:16.710 --> 06:19.710
它会干嘛呢 它会触发unlunch

06:19.710 --> 06:20.710
看到没有

06:20.710 --> 06:23.710
好 然后接下来这边进入小程序之后

06:23.710 --> 06:26.710
你可以点击什么呢 点击右上角的这个关闭

06:26.710 --> 06:28.710
我们这边是不是右上角有个关闭

06:28.710 --> 06:30.710
对不对 这个关闭啊你

06:30.710 --> 06:32.710
你点击这个关闭

06:32.710 --> 06:34.710
或者这个手机设备的这个空间

06:34.710 --> 06:36.710
离开这个小程序

06:36.710 --> 06:38.710
那这个时候小程序并没有直接的这个销毁

06:38.710 --> 06:41.710
它就是进入到了这个后台状态

06:41.710 --> 06:43.710
这个我们要记录一下

06:43.710 --> 06:46.710
什么叫做进入到后台状态

06:46.710 --> 06:52.710
什么叫做进入后台状态

06:52.710 --> 06:55.710
对不对 根据这个官方的这个话

06:55.710 --> 06:59.710
用户点击这个右上角的这个关闭按钮

06:59.710 --> 07:05.710
用户点击右上角的关闭按钮

07:05.710 --> 07:07.710
或者或者什么呢

07:07.710 --> 07:12.710
按手机设备的空间离开小程序

07:12.710 --> 07:19.710
对不对 此时小程序并没有被什么销毁

07:19.710 --> 07:22.710
对不对 并没有被销毁

07:22.710 --> 07:25.710
然后这种情况啊这种情况

07:25.710 --> 07:28.710
我们称之为什么呢 称之为进入后台

07:28.710 --> 07:32.540
这种情况

07:32.540 --> 07:33.540
这种情况

07:33.540 --> 07:36.540
我们称之为小程序进入到后台

07:36.540 --> 07:37.540
ok

07:37.540 --> 07:39.540
好 那接下来进入到后台的时候

07:39.540 --> 07:41.540
它就是暗害的

07:41.540 --> 07:43.540
然后从后台重新返回到前台

07:43.540 --> 07:45.540
就重新显示这个小程序的时候

07:45.540 --> 07:46.540
它是暗秀

07:46.540 --> 07:48.540
好 那我们这边我们来看一下吧

07:48.540 --> 07:50.540
好吧 来看一下

07:50.540 --> 07:51.540
我们首先来到这边

07:51.540 --> 07:53.540
app.js

07:53.540 --> 07:55.540
把其他的都关了啊

07:55.540 --> 07:57.540
关闭其他

07:57.540 --> 07:59.540
好 然后这边

07:59.540 --> 08:00.540
这个on launch

08:00.540 --> 08:01.540
它一开始的话

08:01.540 --> 08:02.540
这个势力里面

08:02.540 --> 08:03.540
它是不是就是有一段这个代码

08:03.540 --> 08:04.540
对不对

08:04.540 --> 08:07.540
它这边是展示本地存储能力

08:07.540 --> 08:08.540
然后还有就是登录

08:08.540 --> 08:10.540
这个我们不管它

08:10.540 --> 08:11.540
我们把它干掉

08:11.540 --> 08:13.540
好 我们这边就简单的打印

08:13.540 --> 08:15.540
console.log

08:15.540 --> 08:20.170
比如说on launch

08:20.170 --> 08:21.170
on launch

08:21.170 --> 08:22.170
对吧

08:22.170 --> 08:23.170
除了这个以外

08:23.170 --> 08:24.170
大家我们这边在分别的

08:24.170 --> 08:28.480
on show

08:28.480 --> 08:31.480
这边的话是console.log

08:32.480 --> 08:35.860
on show

08:35.860 --> 08:36.860
还有一个什么呢

08:36.860 --> 08:40.940
还有一个on hide

08:40.940 --> 08:42.940
on hide

08:42.940 --> 08:47.310
这边的话是hide

08:47.310 --> 08:49.310
好 我们这边就分别设置了

08:49.310 --> 08:52.310
这么三个生命周期构置函数

08:52.310 --> 08:54.310
好 来我们来看一下

08:54.310 --> 08:55.310
你看一开始

08:55.310 --> 08:56.310
一开始的话

08:56.310 --> 08:57.310
它会先触发什么

08:57.310 --> 09:00.310
会先触发on launch

09:00.310 --> 09:01.310
然后是什么

09:01.310 --> 09:03.310
然后是on show

09:03.310 --> 09:04.310
就是on launch

09:04.310 --> 09:06.310
它的这个时间点要找一些

09:06.310 --> 09:08.310
因为它是在整个就是你的小程序

09:08.310 --> 09:09.310
初始化之后

09:09.310 --> 09:11.310
这个初始化好之后

09:11.310 --> 09:12.310
它就会触发

09:12.310 --> 09:13.310
对吧

09:13.310 --> 09:14.310
然后接下来这个on show

09:14.310 --> 09:15.310
on show的话是你这边

09:15.310 --> 09:17.310
就是渲染出来这个小程序

09:17.310 --> 09:18.310
它显示的时候

09:18.310 --> 09:19.310
它是on show

09:19.310 --> 09:20.310
我们把它清除掉

09:20.310 --> 09:21.310
清除掉之后

09:21.310 --> 09:22.310
然后接下来我们比如说

09:22.310 --> 09:23.310
我们点一下这个关闭按钮

09:23.310 --> 09:25.310
当我们点击这个关闭按钮的时候

09:25.310 --> 09:26.310
你看这边触发了什么

09:26.310 --> 09:28.310
触发了这个on hide

09:28.310 --> 09:29.310
对不对

09:29.310 --> 09:30.310
on hide

09:30.310 --> 09:32.310
好 大家我们回到这个小程序

09:32.310 --> 09:33.310
回到之后重新触发什么

09:33.310 --> 09:35.310
重新触发这个on show

09:35.310 --> 09:36.310
对不对

09:36.310 --> 09:37.310
所以这边的话

09:37.310 --> 09:38.310
on show和on hide

09:38.310 --> 09:40.310
这两个其实是互次的

09:40.310 --> 09:41.310
那on launch

09:41.310 --> 09:42.310
on launch是启动的时候

09:42.310 --> 09:44.310
on launch就是启动的意思

09:44.310 --> 09:45.310
对吧

09:45.310 --> 09:46.310
所以这边on launch

09:46.310 --> 09:48.310
on launch就是启动的时候

09:48.310 --> 09:50.310
掉影式

09:50.310 --> 09:52.310
这个笔记就不用急了吧

09:52.310 --> 09:53.310
这个不用急了吧

09:53.310 --> 09:55.310
这个很简单

09:55.310 --> 09:58.310
这是首先这个生命周期

09:58.310 --> 09:59.310
勾字函数

09:59.310 --> 10:00.310
让on arrow的话

10:00.310 --> 10:01.310
就是出错的时候

10:01.310 --> 10:03.310
这个我们后面的时候

10:03.310 --> 10:04.310
我们再来说

10:04.310 --> 10:05.310
OK

10:05.310 --> 10:07.310
这是关于生命周期

10:07.310 --> 10:08.310
勾字函数

10:08.310 --> 10:09.310
我看一下这一小集

10:09.310 --> 10:10.310
还没有其他什么

10:10.310 --> 10:12.310
其他就没什么了

10:12.310 --> 10:14.310
哦 还有一个

10:14.310 --> 10:15.310
还有一个

10:15.310 --> 10:16.310
就是这边的话

10:16.310 --> 10:17.310
它是接收一个参数的

10:17.310 --> 10:19.310
你注意

10:19.310 --> 10:21.310
注意生命周期

10:21.310 --> 10:22.310
勾字函数

10:22.310 --> 10:25.820
生命周期

10:25.820 --> 10:27.820
勾字函数

10:27.820 --> 10:31.820
是接收一个参数的

10:31.820 --> 10:32.820
这个参数的话

10:32.820 --> 10:33.820
其实蛮重要的

10:33.820 --> 10:34.820
为什么呢

10:34.820 --> 10:35.820
因为经常我们需要

10:35.820 --> 10:37.820
通过这个参数来进行一个判断

10:37.820 --> 10:39.820
我们来看一下

10:39.820 --> 10:42.820
在微信客户段中

10:42.820 --> 10:45.820
打开小程序有很多的途径

10:45.820 --> 10:46.820
对吧

10:46.820 --> 10:48.820
我可能是这个群聊会话中

10:48.820 --> 10:49.820
别人分享我打开的

10:49.820 --> 10:51.820
也可能是我自己搜索

10:51.820 --> 10:52.820
对不对

10:52.820 --> 10:54.820
从小程序列表打开的

10:54.820 --> 10:55.820
也可能是什么呢

10:55.820 --> 10:56.820
也有可能是这个

10:56.820 --> 10:58.820
微信扫一扫

10:58.820 --> 11:00.820
通过这个二维码打开的

11:00.820 --> 11:02.820
或者是从这个另外一个小程序

11:02.820 --> 11:04.820
打开这个当前小程序

11:04.820 --> 11:08.820
那么根据这个不同的这个打开方式

11:08.820 --> 11:10.820
那我可能有些时候需要

11:10.820 --> 11:13.820
就是做一些不同的这个业务处理

11:13.820 --> 11:14.820
对不对

11:14.820 --> 11:19.820
打开小程序

11:19.820 --> 11:23.820
打开小程序的方式

11:23.820 --> 11:24.820
多种多样

11:24.820 --> 11:25.820
对吧

11:25.820 --> 11:27.820
有些时候

11:27.820 --> 11:33.820
我们需要根据不同的打开方式

11:33.820 --> 11:34.820
然后干嘛

11:34.820 --> 11:39.820
做一些不同的业务处理

11:39.820 --> 11:42.820
最简单的就是我要做一个这个

11:42.820 --> 11:43.820
登记对不对

11:43.820 --> 11:45.820
我登记就是哪种方式

11:45.820 --> 11:47.820
这个打开我这个小程序

11:47.820 --> 11:48.820
就我这个小程序的这个

11:48.820 --> 11:50.820
曝光率更高一些

11:50.820 --> 11:53.820
那我怎么知道就是哪种方式打开的呢

11:53.820 --> 11:55.820
就是通过这个参数

11:55.820 --> 11:56.820
OK

11:56.820 --> 11:57.820
就是通过这个参数

11:57.820 --> 12:01.130
好我们回到这边来看一下

12:01.130 --> 12:02.130
好

12:02.130 --> 12:05.130
所以小程序客户端会把这个打开方式

12:05.130 --> 12:06.130
带给什么呢

12:06.130 --> 12:08.130
带给安浪琪和安秀

12:08.130 --> 12:10.130
那现在他这边有个这个参数叫做

12:10.130 --> 12:11.130
Options

12:11.130 --> 12:12.130
OK

12:12.130 --> 12:13.130
那这个Options里面

12:13.130 --> 12:14.130
你看他这边的话

12:14.130 --> 12:16.130
就会有这么一些信息

12:16.130 --> 12:18.130
有你的pass

12:18.130 --> 12:20.130
有你的这个query

12:20.130 --> 12:21.130
对吧

12:21.130 --> 12:22.130
然后加这个sense

12:22.130 --> 12:23.130
share ticket

12:23.130 --> 12:25.130
那还有就是这边

12:25.130 --> 12:28.130
这个是referry info

12:28.130 --> 12:31.130
然后还有这个referry info.app id

12:31.130 --> 12:34.130
以及一些额外的一些这个数据

12:34.130 --> 12:35.130
OK

12:35.130 --> 12:38.130
他是只是在这个安浪琪和安秀的时候

12:38.130 --> 12:44.170
这边他应该说是安浪琪和安秀

12:44.170 --> 12:46.170
安浪琪

12:46.170 --> 12:48.170
安浪琪

12:48.170 --> 12:49.170
are

12:49.170 --> 12:51.170
然后

12:51.170 --> 12:52.170
安浪琪

12:52.170 --> 12:53.170
还有什么呢

12:53.170 --> 12:54.170
还有安秀

12:54.170 --> 12:55.170
对吧

12:55.170 --> 12:56.170
还有什么呢

12:57.170 --> 12:58.170
没有安浪琪

12:58.170 --> 12:59.170
安浪琪

12:59.170 --> 13:00.170
安秀

13:00.170 --> 13:02.170
这两个

13:02.170 --> 13:05.170
这两个生命周期

13:05.170 --> 13:06.170
勾字函数

13:06.170 --> 13:08.170
他是接受一个这个参数的

13:08.170 --> 13:10.170
因为

13:10.170 --> 13:12.170
因为打开小程序的方式

13:12.170 --> 13:13.170
多种多样

13:13.170 --> 13:14.170
有些时候我们需要根据这个

13:14.170 --> 13:15.170
不同的打开方式

13:15.170 --> 13:17.170
做一些不同的这个处理

13:17.170 --> 13:18.170
OK

13:18.170 --> 13:19.170
好

13:19.170 --> 13:20.170
那我们这边我们来看一下

13:20.170 --> 13:22.170
到这边来看一下

13:22.170 --> 13:23.170
这边的话

13:23.170 --> 13:25.170
我们就在安秀的时候

13:25.170 --> 13:27.170
我们这边接受这个参数

13:27.170 --> 13:28.170
他这个参数的话

13:28.170 --> 13:30.170
你取名字取什么名字都可以

13:30.170 --> 13:32.170
他官方取的名字叫做opkins

13:32.170 --> 13:34.170
那么就叫做opkins

13:34.170 --> 13:35.170
好

13:35.170 --> 13:37.170
这边console.log

13:37.170 --> 13:39.170
opkins

13:39.170 --> 13:41.170
打印一下

13:41.170 --> 13:42.170
好

13:42.170 --> 13:43.170
这边这样子

13:43.170 --> 13:45.670
前面还是加一个

13:45.670 --> 13:47.670
然后opkins

13:47.670 --> 13:48.670
OK

13:48.670 --> 13:49.670
保存

13:49.670 --> 13:50.670
保存之后

13:50.670 --> 13:51.670
然后加这边

13:51.670 --> 13:52.670
出出来了

13:52.670 --> 13:53.670
对不对

13:53.670 --> 13:55.670
我们这边把这个对象展开看一下

13:55.670 --> 13:57.670
那它里面是不是就是有

13:57.670 --> 13:58.670
有这个pass

13:58.670 --> 13:59.670
对不对

13:59.670 --> 14:00.670
pass

14:00.670 --> 14:01.670
这边是这里

14:01.670 --> 14:02.670
那加query

14:02.670 --> 14:03.670
然后还有些这些信息

14:03.670 --> 14:05.670
保存是1001

14:05.670 --> 14:07.670
至于这个究竟是什么意思

14:07.670 --> 14:09.670
那它是不是肯定你猜得猜得到

14:09.670 --> 14:12.670
官网一定会有一张表格

14:12.670 --> 14:14.670
告诉你这边不同的代码

14:14.670 --> 14:15.670
代表什么意思

14:15.670 --> 14:16.670
对不对

14:16.670 --> 14:18.670
肯定是有的

14:18.670 --> 14:22.110
把这个结个图

14:22.110 --> 14:26.060
把这个结个图

14:26.060 --> 14:28.060
放到那个笔记里面

14:28.060 --> 14:31.060
这边是打印opkins

14:31.060 --> 14:34.060
这边的话是打印出来的opkins

14:34.060 --> 14:38.360
好

14:38.360 --> 14:39.360
我们放到笔记里面

14:39.360 --> 14:42.860
势力如下

14:42.860 --> 14:44.860
势力如下

14:44.860 --> 14:45.860
这个我们后面

14:45.860 --> 14:46.860
后面我们做一些具体的

14:46.860 --> 14:47.860
一些案例的时候

14:47.860 --> 14:49.860
我们会用的

14:49.860 --> 14:51.860
OK

14:51.860 --> 14:53.860
这是关于这个生命周期

14:53.860 --> 14:54.860
勾字函数

14:54.860 --> 14:56.860
注意这两点

14:56.860 --> 14:57.860
好

14:57.860 --> 14:59.860
那其他的话就没什么了

14:59.860 --> 15:00.860
在这儿

15:00.860 --> 15:01.860
这儿是不是有

15:01.860 --> 15:02.860
对

15:02.860 --> 15:03.860
这边有

15:03.860 --> 15:04.860
如果是1020

15:04.860 --> 15:06.860
它是公众号打开的

15:06.860 --> 15:08.860
如果是1035

15:08.860 --> 15:09.860
它是这个

15:09.860 --> 15:11.860
这个是自定义菜单

15:11.860 --> 15:13.860
它反正这边有不同的

15:13.860 --> 15:14.860
这个是个场景值

15:14.860 --> 15:15.860
对吧

15:15.860 --> 15:16.860
它是那个圣识

15:16.860 --> 15:17.860
这是场景值

15:17.860 --> 15:18.860
OK

15:18.860 --> 15:19.860
但它这个应该是

15:19.860 --> 15:20.860
没有列举完

15:20.860 --> 15:21.860
应该是没有列举完

15:21.860 --> 15:23.860
因为我们刚才那个叫什么

15:23.860 --> 15:25.860
我们刚才那个是

15:25.860 --> 15:26.860
1001

15:26.860 --> 15:27.860
对不对

15:27.860 --> 15:28.860
1001

15:28.860 --> 15:29.860
它这边没有

15:29.860 --> 15:30.860
这边这个表格

15:30.860 --> 15:32.860
应该是没有列举完的

15:32.860 --> 15:33.860
这个你要去收一下

15:33.860 --> 15:35.860
看一下它这个就是

15:35.860 --> 15:38.860
场景值的一个完整的列表

15:38.860 --> 15:39.860
OK

15:39.860 --> 15:40.860
好

15:40.860 --> 15:42.860
这是关于生命周期勾字函数

15:42.860 --> 15:43.860
好

15:43.860 --> 15:44.860
那下一个

15:44.860 --> 15:45.860
下一个的话就是

15:45.860 --> 15:46.860
关于这个小程序的

15:46.860 --> 15:48.860
这个全局数据

15:48.860 --> 15:49.860
OK

15:49.860 --> 15:50.860
我们小程序的话

15:50.860 --> 15:51.860
有些时候

15:51.860 --> 15:53.860
我们需要就是不同的页面

15:53.860 --> 15:55.860
共享一些全局的数据

15:55.860 --> 15:58.860
就是小程序

15:58.860 --> 15:59.860
OK

15:59.860 --> 16:02.860
在微信小程序中

16:02.860 --> 16:05.860
我们有些时候

16:05.860 --> 16:06.860
需要什么呢

16:06.860 --> 16:08.860
需要就是

16:08.860 --> 16:09.860
不同的页面

16:09.860 --> 16:11.860
不同的页面

16:11.860 --> 16:13.860
共享一些

16:13.860 --> 16:15.860
就是公共的数据

16:15.860 --> 16:16.860
公共的数据

16:16.860 --> 16:17.860
OK

16:17.860 --> 16:19.860
你回忆一下在这个view

16:19.860 --> 16:21.860
或者这个react中

16:21.860 --> 16:22.860
我这边的话

16:22.860 --> 16:23.860
就是view和react

16:23.860 --> 16:24.860
它是不同的组件吗

16:24.860 --> 16:25.860
对吧

16:25.860 --> 16:26.860
它组件之间

16:26.860 --> 16:27.860
比如说我要拿

16:27.860 --> 16:28.860
这个传递这个数据

16:28.860 --> 16:30.860
是怎么做的

16:30.860 --> 16:31.860
所以它会有这个

16:31.860 --> 16:32.860
状态倉库

16:32.860 --> 16:34.860
对不对

16:34.860 --> 16:35.860
在

16:35.860 --> 16:38.860
在诸如这个view

16:38.860 --> 16:39.860
react

16:39.860 --> 16:41.860
这种

16:41.860 --> 16:44.860
这种框架中

16:44.860 --> 16:45.860
框架中

16:45.860 --> 16:46.860
有什么呢

16:46.860 --> 16:49.860
有这个专门的

16:49.860 --> 16:51.860
有专门的

16:51.860 --> 16:56.010
状态处理库

16:56.010 --> 16:57.010
对不对

16:57.010 --> 16:59.010
然后在微信小程序中

16:59.010 --> 17:00.010
通过的是什么呢

17:00.010 --> 17:02.010
通过的是

17:02.010 --> 17:04.010
这个global data

17:04.010 --> 17:07.010
global data

17:07.010 --> 17:09.010
来共享数据

17:09.010 --> 17:11.010
共享数据

17:11.010 --> 17:14.220
OK

17:14.220 --> 17:16.220
说你可以看到在这边

17:16.220 --> 17:18.220
在这边

17:18.220 --> 17:20.220
在这个app

17:20.220 --> 17:21.220
app这里

17:21.220 --> 17:24.220
这里是不是就有一个global data

17:24.220 --> 17:26.220
对不对

17:26.220 --> 17:29.220
global data

17:30.220 --> 17:32.220
global data

17:32.220 --> 17:35.220
位于这个app

17:35.220 --> 17:38.720
构造其中

17:38.720 --> 17:39.720
构造其中

17:39.720 --> 17:41.720
如下图

17:41.720 --> 17:43.720
这边解个图吧

17:43.720 --> 17:50.680
在这里

17:50.680 --> 17:54.820
在这里

17:54.820 --> 17:56.820
放到笔记里面

17:56.820 --> 17:57.820
好那这个就是

17:57.820 --> 17:59.820
我们要设置这个

17:59.820 --> 18:00.820
就是要共享的数据

18:00.820 --> 18:01.820
那这个很简单

18:01.820 --> 18:03.820
你就在这设置就可以了

18:03.820 --> 18:04.820
对不对

18:04.820 --> 18:05.820
我们回头那个就是

18:05.820 --> 18:06.820
第一章的这个综合练习

18:06.820 --> 18:07.820
我们到时候就会在这儿

18:07.820 --> 18:09.820
来设置这个公共的数据

18:09.820 --> 18:10.820
那关键是有个问题

18:10.820 --> 18:11.820
就是如何

18:11.820 --> 18:13.820
就是我其他页面

18:13.820 --> 18:15.820
其他页面

18:15.820 --> 18:17.820
如何获取

18:17.820 --> 18:20.820
公共的数据

18:20.820 --> 18:21.820
对不对

18:21.820 --> 18:22.820
我设置的话

18:22.820 --> 18:23.820
我在这儿进行设置

18:23.820 --> 18:25.820
那我其他页面怎么获取呢

18:25.820 --> 18:26.820
非常简单

18:26.820 --> 18:27.820
这边的话

18:27.820 --> 18:28.820
你其他页面想要

18:28.820 --> 18:29.820
获取的时候

18:29.820 --> 18:30.820
它有一个什么呢

18:30.820 --> 18:33.820
有一个函数叫做这个getapp

18:33.820 --> 18:34.820
通过getapp

18:34.820 --> 18:35.820
你可以获取到什么呢

18:35.820 --> 18:38.820
可以获取到整个app的这个实例

18:38.820 --> 18:39.820
然后接下来你看这边

18:39.820 --> 18:40.820
获取到实例

18:40.820 --> 18:43.820
然后通过实例点glob data

18:43.820 --> 18:45.820
就可以拿到这个

18:45.820 --> 18:46.820
这个数据

18:46.820 --> 18:48.820
比如说我们这边来看一下

18:49.820 --> 18:50.820
比如说我们这边

18:50.820 --> 18:52.820
这边我们有个userinfo

18:52.820 --> 18:53.820
对吧

18:53.820 --> 18:55.820
比如说我们这边写一个

18:55.820 --> 18:57.820
写一个叫做写节

18:57.820 --> 18:58.820
ok

18:58.820 --> 19:00.820
这是username

19:01.820 --> 19:02.820
username

19:02.820 --> 19:04.820
有一个写节

19:04.820 --> 19:05.820
好

19:05.820 --> 19:07.820
然后回头的话来到我们这边

19:07.820 --> 19:08.820
在这边

19:08.820 --> 19:09.820
这边的话

19:09.820 --> 19:11.820
我想要使用你这个数据

19:11.820 --> 19:12.820
怎么使用

19:12.820 --> 19:13.820
非常简单

19:13.820 --> 19:15.820
你这边通过getapp

19:15.820 --> 19:17.820
我可以拿到这个app实例

19:17.820 --> 19:18.820
也就是拿到谁

19:18.820 --> 19:20.820
拿到整个这个实例

19:20.820 --> 19:21.820
看到没有

19:21.820 --> 19:22.820
拿到整个实例

19:22.820 --> 19:23.820
拿到这个实例之后

19:23.820 --> 19:24.820
然后将我这边

19:24.820 --> 19:27.820
可以console.log

19:27.820 --> 19:32.820
app.glob data

19:32.820 --> 19:33.820
ok

19:33.820 --> 19:35.820
我们来看一下能不能打印出来

19:35.820 --> 19:40.160
我们在这边还是写个标识

19:40.160 --> 19:42.160
glob data

19:42.160 --> 19:43.160
ok

19:43.160 --> 19:45.160
好保存

19:45.160 --> 19:47.160
保存了之后

19:47.160 --> 19:48.160
大家这边你看一下

19:48.160 --> 19:49.160
拿到了没有

19:49.160 --> 19:50.160
就拿到了

19:50.160 --> 19:51.160
对吧

19:51.160 --> 19:52.160
他这边拿到的是个对象

19:52.160 --> 19:54.160
也就是说你整个这个glob data

19:54.160 --> 19:55.160
你这个本来就是个对象

19:55.160 --> 19:58.160
所以他这边拿到的是一个对象

19:58.160 --> 20:00.160
这边是不是就打印出来了

20:00.160 --> 20:01.160
对吧

20:01.160 --> 20:02.160
打印出来了

20:02.160 --> 20:03.160
好

20:03.160 --> 20:04.160
非常简单

20:05.160 --> 20:08.160
非常简单

20:08.160 --> 20:12.160
在各个页面的这个解释

20:12.160 --> 20:17.010
文件中

20:17.010 --> 20:18.010
文件中

20:18.010 --> 20:19.010
通过什么呢

20:19.010 --> 20:21.010
通过这个getapp

20:21.010 --> 20:23.010
getapp

20:23.010 --> 20:24.010
函数

20:24.010 --> 20:29.010
首先获取到app的实例

20:30.010 --> 20:31.010
对不对

20:31.010 --> 20:32.010
之后

20:32.010 --> 20:39.010
访问该实例的这个glob data

20:39.010 --> 20:41.010
数据即可

20:41.010 --> 20:43.010
你这边就直接

20:43.010 --> 20:45.010
像这边一样

20:45.010 --> 20:46.010
像这边一样

20:46.010 --> 20:47.010
对吧

20:47.010 --> 20:50.010
这里我把它放到笔记里面吧

20:50.010 --> 20:55.560
就像这样子

20:55.560 --> 20:57.560
这边这个官网也写的有

20:57.560 --> 20:59.560
官网写的其实也非常好懂

20:59.560 --> 21:01.560
它这个是在app.js里面

21:01.560 --> 21:03.560
这边是不是全局共享的数据

21:03.560 --> 21:05.560
然后在其他页面中

21:05.560 --> 21:07.560
你是不是这样子可以获取

21:07.560 --> 21:08.560
对不对

21:08.560 --> 21:10.560
下面说了就是

21:10.560 --> 21:11.560
要留意一点

21:11.560 --> 21:14.560
所有页面的脚本逻辑跑在

21:14.560 --> 21:16.560
同一个jscore

21:16.560 --> 21:17.560
同一个线程中

21:17.560 --> 21:21.560
所以你如果页面使用了setTimeout

21:21.560 --> 21:22.560
或者setInterval

21:22.560 --> 21:23.560
这种计时器

21:23.560 --> 21:25.560
然后接下来跳到

21:25.560 --> 21:26.560
其他页面的时候

21:26.560 --> 21:28.560
这些计时器并没有被清除

21:28.560 --> 21:31.560
你需要在离开页面的时候自行清除

21:31.560 --> 21:32.560
这个要注意

21:32.560 --> 21:34.560
这个是我经常遇到同学们

21:34.560 --> 21:35.560
犯的一个错误

21:35.560 --> 21:36.560
到后面的话

21:36.560 --> 21:38.560
就会发现这个计时器

21:38.560 --> 21:39.560
越绑越多

21:39.560 --> 21:40.560
越绑越多

21:40.560 --> 21:42.560
发现跑得越来越快

21:42.560 --> 21:43.560
究竟是为什么

21:43.560 --> 21:45.560
实际上就是这

21:45.560 --> 21:46.560
就是这

21:46.560 --> 21:47.560
来笔记记一下

21:49.560 --> 21:50.560
有一点

21:50.560 --> 21:53.260
有一点

21:53.260 --> 21:55.260
一定要注意

21:55.260 --> 21:57.260
一定要注意

21:57.260 --> 22:01.260
虽然在小程序中

22:01.260 --> 22:03.260
小程序中

22:03.260 --> 22:06.260
有多个页面

22:06.260 --> 22:11.260
但是多个页面的jscore

22:11.260 --> 22:12.260
跑在什么呢

22:12.260 --> 22:14.260
跑在一个线程中

22:15.260 --> 22:17.260
跑在一个线程中

22:18.260 --> 22:20.260
这也就

22:20.260 --> 22:22.260
这也就

22:22.260 --> 22:24.260
意味着

22:24.260 --> 22:28.260
你从一个页面

22:28.260 --> 22:31.260
跳到另外一个页面

22:32.260 --> 22:33.260
另外一个页面

22:33.260 --> 22:35.260
然后接下来

22:35.260 --> 22:36.260
假设

22:36.260 --> 22:38.260
你在这个

22:38.260 --> 22:41.260
你在当前页面

22:41.260 --> 22:44.260
设置了这个定时器

22:44.260 --> 22:46.260
定时

22:46.260 --> 22:48.260
定时器

22:48.260 --> 22:49.260
然后接下来的话

22:49.260 --> 22:50.260
你这边从一个页面

22:50.260 --> 22:53.760
跳到另外一个页面

22:54.760 --> 22:55.760
然后

22:55.760 --> 22:56.760
接下来的话

22:56.760 --> 22:57.760
从一个页面

22:57.760 --> 22:58.760
跳到另外一个页面

22:58.760 --> 22:59.760
之前

22:59.760 --> 23:02.760
所设置的这个计时器

23:02.760 --> 23:04.760
并不会被什么

23:04.760 --> 23:06.760
清除掉

23:06.760 --> 23:07.760
对不对

23:07.760 --> 23:08.760
所以

23:08.760 --> 23:10.760
需要我们

23:10.760 --> 23:12.760
手动的来

23:12.760 --> 23:14.760
就是手动的什么时候

23:14.760 --> 23:16.760
需要我们手动的

23:16.760 --> 23:17.760
手动的

23:17.760 --> 23:18.760
在

23:18.760 --> 23:19.760
离开

23:19.760 --> 23:21.760
页面的时候

23:21.760 --> 23:22.760
对不对

23:22.760 --> 23:23.760
我看一下

23:23.760 --> 23:24.760
需要我们

23:24.760 --> 23:26.760
在离开页面的时候

23:26.760 --> 23:28.760
手动来

23:28.760 --> 23:29.760
清理掉

23:29.760 --> 23:31.760
这些

23:31.760 --> 23:32.760
计时器

23:32.760 --> 23:36.030
对不对

23:36.030 --> 23:37.030
OK

23:37.030 --> 23:38.030
注意

23:38.030 --> 23:39.030
这边他这个官网

23:39.030 --> 23:40.030
专门写了的

23:41.030 --> 23:42.030
然后还有一点

23:42.030 --> 23:43.030
还有一点

23:43.030 --> 23:45.030
我看我觉得他官网说了的

23:45.030 --> 23:46.030
他说的好像是

23:46.030 --> 23:48.030
关于生命周期的

23:48.030 --> 23:50.030
生命周期

23:50.030 --> 23:51.030
我看一下

23:51.030 --> 23:52.030
这里

23:52.030 --> 23:53.030
这里

23:53.030 --> 23:54.030
这个刚才说漏了的

23:54.030 --> 23:55.030
就这个APP生命周期

23:55.030 --> 23:57.030
这些钩子函数

23:57.030 --> 23:58.030
它是什么

23:58.030 --> 24:00.030
是有根据用户的操作

24:00.030 --> 24:02.030
主动出发的

24:02.030 --> 24:03.030
比如用户我这边

24:03.030 --> 24:05.030
我把这个关闭了

24:05.030 --> 24:06.030
对不对

24:06.030 --> 24:07.030
他主动出发了一个暗害的

24:07.030 --> 24:09.030
然后接下来我这边回到

24:09.030 --> 24:10.030
主动出发了一个什么

24:10.030 --> 24:11.030
什么

24:11.030 --> 24:12.030
对不对

24:12.030 --> 24:13.030
你不要什么

24:13.030 --> 24:14.030
不要不应该在这个代码中

24:14.030 --> 24:17.030
去调用这些生命周期

24:17.030 --> 24:18.030
这个钩子函数

24:18.030 --> 24:19.030
因为你这边实力

24:19.030 --> 24:21.030
是可以获取到的

24:21.030 --> 24:22.030
对不对

24:22.030 --> 24:23.030
有的人说

24:23.030 --> 24:24.030
我这边获取到这个实力

24:24.030 --> 24:25.030
这样我获取到这个实力了

24:25.030 --> 24:27.030
我这个通过这个实力

24:27.030 --> 24:29.030
我拿到这个GlobalData

24:29.030 --> 24:31.030
那我能不能就直接去触发

24:31.030 --> 24:33.030
主动去触发他这些生命周期

24:33.030 --> 24:34.030
钩子函数呢

24:34.030 --> 24:35.030
不要

24:35.030 --> 24:36.030
这样子的话

24:36.030 --> 24:38.030
容易引起这个bug

24:38.030 --> 24:39.030
ok

24:39.030 --> 24:41.030
我们在毕竟面再记一下

24:41.030 --> 24:43.030
另外还有一点

24:43.030 --> 24:46.730
另外还有一点

24:46.730 --> 24:47.730
虽然

24:47.730 --> 24:48.730
我们

24:48.730 --> 24:49.730
通过什么

24:49.730 --> 24:51.730
通过get

24:51.730 --> 24:52.730
APP

24:52.730 --> 24:54.730
能够获取到什么

24:54.730 --> 24:56.730
获取到这个APP

24:56.730 --> 24:57.730
的实力

24:57.730 --> 24:58.730
但是

24:58.730 --> 25:00.730
一般

25:00.730 --> 25:02.730
一般仅仅是

25:02.730 --> 25:03.730
拿来干嘛呢

25:03.730 --> 25:05.730
拿来获取

25:05.730 --> 25:07.730
这个GlobalData

25:08.730 --> 25:10.730
GlobalData

25:10.730 --> 25:12.730
不要去什么

25:12.730 --> 25:14.730
不要去主动

25:14.730 --> 25:16.730
调用

25:16.730 --> 25:18.730
生命周期

25:18.730 --> 25:20.730
钩子函数

25:20.730 --> 25:21.730
不要吧

25:21.730 --> 25:22.730
不要去主动调用生命周期

25:22.730 --> 25:23.730
钩子函数

25:23.730 --> 25:25.730
生命周期钩子函数

25:25.730 --> 25:26.730
生命周期

25:26.730 --> 25:28.730
钩子函数

25:28.730 --> 25:30.730
应当是什么呢

25:30.730 --> 25:31.730
应当是

25:31.730 --> 25:33.730
在对应的

25:33.730 --> 25:35.730
时间点

25:35.730 --> 25:37.730
主动触发的

25:37.730 --> 25:39.730
主动触发的

25:39.730 --> 25:40.730
主动触发的

25:40.730 --> 25:41.730
ok

25:41.730 --> 25:42.730
好

25:42.730 --> 25:43.730
这是关于这个

25:43.730 --> 25:45.730
APP这个构造器

25:45.730 --> 25:47.730
其他的话就没什么了

25:48.730 --> 25:49.730
看一下

25:49.730 --> 25:50.730
其他有没有什么

25:50.730 --> 25:51.730
全级数据

25:51.730 --> 25:53.730
其他就没什么了

25:53.730 --> 25:55.730
关于这个APP构造器

25:55.730 --> 25:56.730
好

25:56.730 --> 25:57.730
然后接下来的话

25:57.730 --> 25:59.730
我们来看一下这个页面

25:59.730 --> 26:01.730
页面这一小节的话

26:01.730 --> 26:03.730
主要就说的是配级了

26:03.730 --> 26:04.730
说的是配级

26:04.730 --> 26:05.730
配级这个构造器

26:05.730 --> 26:07.730
我们来看一下

26:07.730 --> 26:09.730
一个小程序可以有很多页面

26:09.730 --> 26:10.730
每个页面不同的功能

26:10.730 --> 26:12.730
然后之间可以相互跳转

26:12.730 --> 26:14.730
这些都不用看了

26:14.730 --> 26:15.730
一个页面分什么呢

26:15.730 --> 26:16.730
分三个部分

26:16.730 --> 26:18.730
组成介面配置和逻辑

26:18.730 --> 26:20.730
介面的话是有什么呢

26:20.730 --> 26:23.730
有这个wxmer和wxss

26:23.730 --> 26:26.730
这两者共同构成了这个介面

26:26.730 --> 26:29.730
配置的话就是那个节省文件

26:29.730 --> 26:31.730
这个我们一直没讲

26:31.730 --> 26:32.730
对不对

26:32.730 --> 26:33.730
这个我们

26:33.730 --> 26:34.730
我想就后面

26:34.730 --> 26:36.730
后面我们用到的是在说

26:36.730 --> 26:38.730
这我们用用到的是在说

26:38.730 --> 26:39.730
我们现在这个第一张

26:39.730 --> 26:40.730
第一张的话

26:40.730 --> 26:42.730
我们尽量就是尽快的

26:42.730 --> 26:44.730
把这个基础支撑把它过一遍

26:44.730 --> 26:45.730
过一遍之后

26:45.730 --> 26:46.730
然后接下来

26:46.730 --> 26:47.730
我们后面的话

26:47.730 --> 26:49.730
给一些这个例子出来了

26:50.730 --> 26:51.730
这是介省

26:51.730 --> 26:53.730
然后加这边页面逻辑

26:53.730 --> 26:54.730
页面逻辑的话是这个

26:54.730 --> 26:56.730
js脚本负责的

26:56.730 --> 26:58.730
然后一个页面的文件

26:58.730 --> 27:01.730
需要放置在同一个目录下面

27:01.730 --> 27:03.730
其中这个wxmer文件

27:03.730 --> 27:05.730
和js文件是必须存在的

27:05.730 --> 27:07.730
这个是不是上几颗说过

27:07.730 --> 27:08.730
是上几颗还是上上几颗

27:08.730 --> 27:10.730
反正讲过的

27:10.730 --> 27:13.730
然后就是这个介省和wxss

27:13.730 --> 27:14.730
就样式和配置

27:14.730 --> 27:16.730
这个是可选的

27:17.730 --> 27:19.730
然后接下来的话

27:19.730 --> 27:21.730
我看一下他后面

27:21.730 --> 27:22.730
后面其实主要就是讲什么呢

27:22.730 --> 27:25.730
主要就是讲这个页面构造器配置

27:26.730 --> 27:28.730
我们整个应用的构造器是

27:28.730 --> 27:29.730
app

27:30.730 --> 27:32.730
整个应用的构造器是app

27:32.730 --> 27:33.730
位于什么呢

27:33.730 --> 27:35.730
位于这个app.js

27:35.730 --> 27:37.730
而这个配置构造器它是什么呢

27:37.730 --> 27:38.730
它是

27:38.730 --> 27:41.730
每个页面的js文件里面

27:41.730 --> 27:42.730
有一个

27:42.730 --> 27:44.730
我们这边补充一下

27:44.730 --> 27:45.730
app

27:46.730 --> 27:47.730
构造器

27:48.730 --> 27:50.730
位于什么呢

27:50.730 --> 27:53.730
位于app.js里面

27:53.730 --> 27:55.730
整个

27:55.730 --> 27:56.730
应用

27:56.730 --> 27:57.730
只有什么

27:57.730 --> 27:59.730
只有这一个

27:59.730 --> 28:00.730
对不对

28:00.730 --> 28:02.730
整个应用只有这一个

28:02.730 --> 28:04.730
而这个配置构造器

28:05.730 --> 28:07.730
配置构造器

28:07.730 --> 28:08.730
位于什么呢

28:08.730 --> 28:12.730
位于每个页面的这个js

28:12.730 --> 28:13.730
下面

28:13.730 --> 28:14.730
那它意味着什么

28:14.730 --> 28:16.730
意味着你每个页面的js文件

28:16.730 --> 28:18.730
是不是都有这个配置构造器

28:18.730 --> 28:19.730
对不对

28:19.730 --> 28:21.730
意味着这一点

28:21.730 --> 28:22.730
好

28:22.730 --> 28:23.730
然后这个配置这边的话

28:23.730 --> 28:24.730
主要是什么呢

28:24.730 --> 28:25.730
主要其实也就是

28:25.730 --> 28:27.730
一堆生命周期构造函数

28:27.730 --> 28:28.730
我们之前的话

28:28.730 --> 28:30.730
实际上已经接触过一个配置箱了

28:30.730 --> 28:31.730
就是什么呢

28:31.730 --> 28:32.730
就是data

28:32.730 --> 28:33.730
对不对

28:33.730 --> 28:34.730
我们之前

28:34.730 --> 28:36.730
我们之前

28:36.730 --> 28:38.730
实际上已经

28:38.730 --> 28:40.730
接触过

28:40.730 --> 28:42.730
一个配置

28:42.730 --> 28:45.730
构造器的这个配置箱

28:46.730 --> 28:47.730
是什么

28:47.730 --> 28:49.730
那就是data

28:49.730 --> 28:50.730
对不对

28:50.730 --> 28:52.730
通过

28:52.730 --> 28:54.730
配置data

28:54.730 --> 28:56.730
里面的数据

28:56.730 --> 28:58.730
可以指定什么呢

28:58.730 --> 29:00.730
指定就是

29:00.730 --> 29:03.730
在页面中

29:03.730 --> 29:06.730
渲染一些动态的数据

29:06.730 --> 29:09.170
对不对

29:09.170 --> 29:11.170
动态的数据

29:11.170 --> 29:12.170
好

29:12.170 --> 29:13.170
那配置

29:13.170 --> 29:14.170
除了什么呢

29:14.170 --> 29:16.170
除了就是配置

29:16.170 --> 29:18.170
data

29:18.170 --> 29:19.170
以外

29:19.170 --> 29:22.170
这个data配置箱

29:22.170 --> 29:23.170
配置箱

29:23.170 --> 29:25.170
以外

29:25.170 --> 29:27.170
还可以配置什么呢

29:27.170 --> 29:31.170
配置相应的生命周期

29:31.170 --> 29:33.170
构造函数

29:33.170 --> 29:35.170
你看它这边

29:35.170 --> 29:36.170
你看它的这个文档

29:36.170 --> 29:38.170
是不是也有一堆啊

29:38.170 --> 29:39.170
对不对

29:39.170 --> 29:41.170
也有一堆生命周期构造函数

29:41.170 --> 29:42.170
好

29:42.170 --> 29:43.170
大家这边呢

29:43.170 --> 29:44.170
我们主要来看什么呢

29:44.170 --> 29:45.170
主要来看这里

29:45.170 --> 29:46.170
看这几个

29:46.170 --> 29:47.170
啊

29:47.170 --> 29:48.170
一个是unload

29:48.170 --> 29:49.170
然后unready

29:49.170 --> 29:50.170
unshow

29:50.170 --> 29:51.170
然后unhide

29:51.170 --> 29:53.170
然后ununload

29:53.170 --> 29:54.170
那至于这些

29:54.170 --> 29:55.170
这些的话

29:55.170 --> 29:56.170
是就是

29:56.170 --> 29:57.170
对应一些行为的时候

29:57.170 --> 29:59.170
比如这个是破档的时候

29:59.170 --> 30:00.170
就下拉刷新的时候

30:00.170 --> 30:02.170
这个是你到底的时候

30:02.170 --> 30:05.170
这个是你分享那个app的时候

30:05.170 --> 30:06.170
这个是那个

30:06.170 --> 30:08.170
你页面滚动的时候

30:08.170 --> 30:09.170
OK

30:09.170 --> 30:11.800
那么这边来看一下

30:11.800 --> 30:13.800
整个这一块

30:15.800 --> 30:17.800
我把这个全屏一下

30:17.800 --> 30:21.560
能不能全屏

30:21.560 --> 30:23.560
好像没办法全屏

30:23.560 --> 30:24.560
这样子

30:24.560 --> 30:25.560
这样子

30:25.560 --> 30:26.560
OK

30:26.560 --> 30:27.560
好

30:27.560 --> 30:29.560
然后这边的话可以几个图

30:29.560 --> 30:30.560
哇

30:30.560 --> 30:31.560
这个几个图

30:31.560 --> 30:38.030
好

30:38.030 --> 30:40.030
把它退出全屏

30:40.030 --> 30:41.030
好

30:41.030 --> 30:43.030
放到我们的笔记里面

30:43.030 --> 30:45.030
能够配置的选项

30:45.030 --> 30:48.030
能够配置的选项

30:48.030 --> 30:50.030
选项如下表

30:50.030 --> 30:53.560
OK

30:53.560 --> 30:54.560
在这里

30:55.560 --> 30:56.560
好

30:56.560 --> 30:57.560
这边的话我们就着重看一下

30:57.560 --> 30:58.560
什么呢

30:58.560 --> 30:59.560
着重看一下这几个

30:59.560 --> 31:00.560
一个是unload

31:00.560 --> 31:01.560
unload

31:01.560 --> 31:02.560
然后unready

31:02.560 --> 31:03.560
然后unshow

31:03.560 --> 31:04.560
和unhide

31:04.560 --> 31:05.560
这个其实应该很熟悉

31:05.560 --> 31:06.560
对不对

31:06.560 --> 31:07.560
这个就是什么

31:07.560 --> 31:08.560
是不是当前页面

31:08.560 --> 31:09.560
被显示

31:09.560 --> 31:10.560
或者被隐藏的时候

31:10.560 --> 31:11.560
是不是会触发这两个

31:11.560 --> 31:12.560
对不对

31:12.560 --> 31:13.560
然后这个unload

31:13.560 --> 31:15.560
和这个unload

31:15.560 --> 31:17.560
这两个的话是一对相反的

31:17.560 --> 31:18.560
unload是什么

31:18.560 --> 31:19.560
是不是就是你页面

31:19.560 --> 31:20.560
加载好之后

31:20.560 --> 31:21.560
unload就是什么

31:21.560 --> 31:23.560
你页面是不是卸载的时候

31:23.560 --> 31:24.560
对不对

31:24.560 --> 31:25.560
那还有个什么呢

31:25.560 --> 31:26.560
还有一个unready

31:26.560 --> 31:27.560
unready的话就是什么呢

31:27.560 --> 31:30.560
就是你初次渲染完成之后

31:30.560 --> 31:32.560
他的话会比这个unload

31:32.560 --> 31:34.560
要晚一些

31:34.560 --> 31:36.560
你看他就写的有

31:36.560 --> 31:37.560
这边这个unload

31:37.560 --> 31:39.560
他的这个触发时机

31:39.560 --> 31:41.560
要找于unshow

31:41.560 --> 31:43.560
和这个unready

31:43.560 --> 31:44.560
对不对

31:44.560 --> 31:46.560
然后加这边unready

31:46.560 --> 31:47.560
unready是初次渲染完成的

31:47.560 --> 31:48.560
初次渲染完成的时候

31:48.560 --> 31:49.560
会触发

31:49.560 --> 31:50.560
这个有点类似于什么

31:50.560 --> 31:51.560
有点类似于那个view

31:51.560 --> 31:53.560
里面的那个monty的

31:53.560 --> 31:54.560
对不对

31:54.560 --> 31:55.560
如果学过view的同学

31:55.560 --> 31:56.560
应该知道

31:56.560 --> 31:58.560
有点类似于view里面的monty的

31:58.560 --> 31:59.560
还有就是react里面

31:59.560 --> 32:00.560
不是有一个

32:00.560 --> 32:03.560
component-mount

32:03.560 --> 32:04.560
对不对

32:04.560 --> 32:05.560
有点类似于那个

32:05.560 --> 32:06.560
好

32:06.560 --> 32:07.560
这个是unshow

32:07.560 --> 32:09.560
unshow的话要找于unready

32:09.560 --> 32:10.560
也就是他们之间的顺序

32:10.560 --> 32:11.560
是先触发unload的

32:11.560 --> 32:13.560
然后接下来unshow

32:13.560 --> 32:15.560
然后接下来unready

32:15.560 --> 32:16.560
对不对

32:16.560 --> 32:17.560
这个顺序

32:17.560 --> 32:18.560
好

32:18.560 --> 32:19.560
来我们这边来看一下

32:19.560 --> 32:21.560
来看一看

32:21.560 --> 32:23.560
这边的话是写的是

32:23.560 --> 32:25.560
之前的这个事件处理函数

32:25.560 --> 32:26.560
好

32:26.560 --> 32:29.450
然后接下来的话

32:29.450 --> 32:30.450
这边

32:30.450 --> 32:31.450
我们把这个app这边

32:31.450 --> 32:32.450
我们就不要了

32:32.450 --> 32:35.450
为了更加清晰的

32:35.450 --> 32:36.450
app这边

32:36.450 --> 32:37.450
我们就不要了

32:37.450 --> 32:38.450
我们到这边来

32:38.450 --> 32:39.450
这边的话

32:39.450 --> 32:44.400
我们就是unload

32:44.400 --> 32:51.220
对应的就是unload

32:51.220 --> 32:52.220
然后接下来是

32:52.220 --> 32:53.220
它过的是什么

32:53.220 --> 32:54.220
过的是unshow

32:54.220 --> 32:55.220
对不对

32:55.220 --> 32:57.220
我们就按照它的顺序

32:57.220 --> 32:59.220
然后console.log

32:59.220 --> 33:02.220
这边是unshow

33:02.220 --> 33:04.220
然后还有什么

33:04.220 --> 33:05.220
还有过的是什么

33:05.220 --> 33:06.220
unready

33:06.220 --> 33:09.300
对不对

33:09.300 --> 33:12.300
unready是我渲染完成的时候

33:12.300 --> 33:16.300
这边是unready

33:16.300 --> 33:17.300
好

33:17.300 --> 33:19.300
然后接下来的话是一个

33:19.300 --> 33:20.300
什么

33:20.300 --> 33:21.300
unhide

33:21.300 --> 33:23.300
这个是隐藏的时候

33:23.300 --> 33:26.300
这个也很好理解

33:26.300 --> 33:28.300
这边是unhide

33:28.300 --> 33:29.300
好

33:29.300 --> 33:30.300
然后接下来的话

33:30.300 --> 33:31.300
是一个

33:31.300 --> 33:32.300
还有个什么

33:32.300 --> 33:34.300
unload

33:34.300 --> 33:37.300
这是卸载的时候

33:37.300 --> 33:40.300
console.log

33:40.300 --> 33:42.300
unload

33:42.300 --> 33:43.300
OK

33:43.300 --> 33:45.300
然后把这几个写好

33:45.300 --> 33:46.300
这边load

33:46.300 --> 33:48.300
show ready hide

33:48.300 --> 33:49.300
unload

33:49.300 --> 33:50.300
好

33:50.300 --> 33:51.300
清空一下

33:51.300 --> 33:53.300
保存

33:53.300 --> 33:54.300
保存之后

33:54.300 --> 33:55.300
人家这边来看一下

33:55.300 --> 33:56.300
你看

33:56.300 --> 33:58.300
首先的话是unload

33:58.300 --> 33:59.300
对不对

33:59.300 --> 34:00.300
然后接下来的话是unshow

34:00.300 --> 34:02.300
unshow代表什么

34:02.300 --> 34:03.300
刚刚写的

34:03.300 --> 34:04.300
unshow

34:04.300 --> 34:06.300
代表就是你这边

34:06.300 --> 34:08.300
它应该是下面写的

34:08.300 --> 34:10.300
在这个位置

34:10.300 --> 34:11.300
unshow

34:11.300 --> 34:14.300
unshow是页面显示之后

34:14.300 --> 34:17.300
页面初次渲染完成之后

34:17.300 --> 34:18.300
接下来是

34:18.300 --> 34:19.300
unready

34:19.300 --> 34:20.300
unready

34:20.300 --> 34:21.300
OK

34:21.300 --> 34:22.300
好

34:22.300 --> 34:23.300
接下来我们比如说

34:23.300 --> 34:24.300
这边页面隐藏

34:24.300 --> 34:25.300
比如说我们这边的话

34:25.300 --> 34:27.300
去到nog页面

34:27.300 --> 34:28.300
但是我们现在

34:28.300 --> 34:30.300
还没讲跳转是吧

34:30.300 --> 34:31.300
还没讲跳转

34:31.300 --> 34:32.300
这边跳转的话

34:32.300 --> 34:34.300
这边就会触发这个unhide

34:34.300 --> 34:35.300
我看一下我这边

34:35.300 --> 34:37.300
比如说我把它这样子

34:37.300 --> 34:39.300
这样子也可以触发unhide

34:39.300 --> 34:40.300
对不对

34:40.300 --> 34:42.300
你看这边触发了这个unhide

34:42.300 --> 34:43.300
好

34:43.300 --> 34:45.300
接下来的话这个unload

34:45.300 --> 34:47.300
unload就是什么

34:47.300 --> 34:48.300
就卸载的时候

34:48.300 --> 34:50.300
整个这个小声区卸载的时候

34:50.300 --> 34:51.300
会触发

34:51.300 --> 34:52.300
OK

34:52.300 --> 34:54.300
你看这会儿就触发这个unshow了

34:54.300 --> 34:55.300
对不对

34:55.300 --> 34:56.300
因为我们刚才回来了

34:56.300 --> 34:58.300
回来他有触发这个unshow

34:58.300 --> 34:59.300
好

34:59.300 --> 35:02.300
这边的话关于触发的次数

35:02.300 --> 35:04.300
关于触发的次数

35:04.300 --> 35:05.300
这边要注意

35:05.300 --> 35:06.300
unload

35:06.300 --> 35:09.300
它是在页面没有被销毁之前

35:09.300 --> 35:10.300
就会触发一次

35:10.300 --> 35:12.300
你说整个的话只有什么

35:12.300 --> 35:13.300
整个只有一次

35:13.300 --> 35:14.300
OK

35:14.300 --> 35:15.300
我看一下

35:15.300 --> 35:17.300
在unload回调中

35:17.300 --> 35:19.300
这个是参数了

35:19.300 --> 35:21.300
就是只要你页面没有被销毁之前

35:21.300 --> 35:26.020
它就会触发一次

35:26.020 --> 35:27.020
那么这里的话

35:27.020 --> 35:29.020
自然而然就会有个问题

35:29.020 --> 35:30.020
什么问题呢

35:30.020 --> 35:32.020
什么叫做页面销毁

35:32.020 --> 35:33.020
对不对

35:33.020 --> 35:35.020
我们这边在笔记里面记录一下

35:35.020 --> 35:38.020
这边这个unload

35:38.020 --> 35:40.020
unload

35:41.020 --> 35:42.020
它是什么呢

35:42.020 --> 35:44.020
它是页面销毁之前

35:44.020 --> 35:46.020
页面销毁

35:46.020 --> 35:47.020
之前

35:47.020 --> 35:49.020
会掉用一次

35:49.020 --> 35:51.020
它掉用的时候表示什么

35:51.020 --> 35:54.020
表示就是你这边它已经夹仔好了

35:54.020 --> 35:55.020
对吧

35:55.020 --> 35:57.020
就是你这边小程序已经夹仔好了

35:57.020 --> 35:58.020
就当地

35:58.020 --> 35:59.020
不是小程序

35:59.020 --> 36:00.020
当前页面

36:00.020 --> 36:01.020
因为它是页面级别的

36:01.020 --> 36:07.020
当前页面已经夹仔好了

36:07.020 --> 36:08.020
好

36:08.020 --> 36:09.020
然后你这个un

36:09.020 --> 36:10.020
过了是什么

36:10.020 --> 36:11.020
过了是unshow

36:11.020 --> 36:13.020
unshow的话是每次这个页面

36:13.020 --> 36:14.020
被显示的时候

36:14.020 --> 36:16.020
每次

36:16.020 --> 36:18.020
这个当前页面

36:18.020 --> 36:21.020
当前页面被显示的时候

36:21.020 --> 36:24.720
被显示的时候

36:24.720 --> 36:26.720
会这个掉用

36:26.720 --> 36:27.720
对吧

36:27.720 --> 36:28.720
然后还有就是什么呢

36:28.720 --> 36:30.720
还有就是unready

36:30.720 --> 36:32.720
unready

36:32.720 --> 36:33.720
unready的话它是什么呢

36:33.720 --> 36:35.720
它也是就是

36:35.720 --> 36:37.720
会被掉用一次

36:37.720 --> 36:40.720
页面销毁

36:40.720 --> 36:41.720
之前

36:41.720 --> 36:43.720
我看一下

36:43.720 --> 36:46.720
这边unready在这里

36:46.720 --> 36:47.720
在这里

36:47.720 --> 36:50.720
它是在页面没被销毁前

36:50.720 --> 36:52.720
就是销毁之前

36:52.720 --> 36:54.720
出发一次

36:54.720 --> 36:55.720
页面销毁之前

36:55.720 --> 36:57.720
会掉用

36:57.720 --> 37:02.100
会掉用一次

37:02.100 --> 37:03.100
表示什么

37:03.100 --> 37:05.100
表示当前页面

37:05.100 --> 37:06.100
已经什么

37:06.100 --> 37:08.100
是渲染完毕

37:08.100 --> 37:09.100
对不对

37:09.100 --> 37:10.100
这个unshow

37:10.100 --> 37:11.100
unshow是每次

37:11.100 --> 37:13.100
当前页面被显示的时候

37:13.100 --> 37:14.100
会掉用

37:14.100 --> 37:15.100
OK

37:15.100 --> 37:16.100
好那这边的话

37:16.100 --> 37:17.100
自然就会有个问题

37:17.100 --> 37:18.100
什么问题呢

37:18.100 --> 37:23.100
什么算是页面销毁

37:23.100 --> 37:24.100
对不对

37:24.100 --> 37:25.100
或者说

37:25.100 --> 37:26.100
或者说

37:26.100 --> 37:29.100
什么时候页面

37:29.100 --> 37:32.100
会被销毁

37:32.100 --> 37:33.100
对不对

37:33.100 --> 37:35.100
自然而然就会有这个问题

37:35.100 --> 37:36.100
这个问题的话

37:36.100 --> 37:37.100
我们在这个官网里面

37:37.100 --> 37:39.100
能不能找到答案呢

37:39.100 --> 37:40.100
也是可以的

37:40.100 --> 37:42.100
在这里

37:42.100 --> 37:43.100
在这边

37:43.100 --> 37:45.100
当前页面使用

37:45.100 --> 37:46.100
微信点

37:46.100 --> 37:48.100
微Direct2

37:48.100 --> 37:49.100
或者什么呢

37:49.100 --> 37:50.100
或者微信点

37:50.100 --> 37:51.100
never get back

37:51.100 --> 37:53.100
返回到其他页的时候

37:53.100 --> 37:55.100
那当前页面

37:55.100 --> 37:57.100
就会被微信客户端

37:57.100 --> 37:59.100
销毁回收

37:59.100 --> 38:00.100
看到没有

38:00.100 --> 38:01.100
这种时候

38:01.100 --> 38:02.100
它就会被回收

38:02.100 --> 38:03.100
被回收的时候

38:03.100 --> 38:04.100
它还会出发什么

38:04.100 --> 38:06.100
还会出发这个unload

38:06.100 --> 38:07.100
这个时候

38:07.100 --> 38:09.100
刚才我们没有这个演示的

38:09.100 --> 38:10.100
对不对

38:10.100 --> 38:11.100
因为它这边

38:11.100 --> 38:12.100
设计到什么呢

38:12.100 --> 38:13.100
设计到路由的跳转

38:13.100 --> 38:15.100
我们下一个再来说

38:15.100 --> 38:17.100
我们在笔记里面记录一下

38:17.100 --> 38:19.100
就这句话

38:19.100 --> 38:21.100
当前页面使用

38:21.100 --> 38:23.100
这个redirect2

38:23.100 --> 38:25.100
或者这个never get back

38:25.100 --> 38:26.100
返回其他页的时候

38:26.100 --> 38:27.100
当前页面

38:27.100 --> 38:28.100
会被这个微信客户端

38:28.100 --> 38:30.100
销毁回收

38:30.100 --> 38:31.100
OK

38:32.100 --> 38:34.100
这是关于这几个

38:34.100 --> 38:36.100
生命周期勾字函数

38:36.100 --> 38:37.100
那接下来的话

38:37.100 --> 38:38.100
它这边呢

38:38.100 --> 38:39.100
仍然是什么

38:39.100 --> 38:41.100
仍然是就是会接受参数的

38:41.100 --> 38:43.100
仍然是会接受参数

38:43.100 --> 38:44.100
我们来看一下

38:44.100 --> 38:45.100
我们可以看到

38:45.100 --> 38:46.100
这个生命周期

38:46.100 --> 38:48.100
是这个用户主动出发的

38:48.100 --> 38:50.100
为了避免程序上的混乱

38:50.100 --> 38:51.100
不应该主动去调用

38:51.100 --> 38:53.100
这个和那个app

38:53.100 --> 38:54.100
那个生命周期

38:54.100 --> 38:55.100
勾字函数是一样的

38:55.100 --> 38:56.100
对不对

38:56.100 --> 38:57.100
你记住

38:57.100 --> 38:58.100
只要是生命周期

38:58.100 --> 38:59.100
勾字函数

38:59.100 --> 39:01.100
你就不应该去调用

39:02.100 --> 39:04.100
这边记录一下

39:04.100 --> 39:05.100
同样

39:06.100 --> 39:08.100
和这个app

39:08.100 --> 39:12.100
勾造器中的生命周期

39:12.100 --> 39:13.100
勾字函数

39:16.180 --> 39:18.180
勾字函数

39:18.180 --> 39:19.180
相同

39:19.180 --> 39:23.180
不要去主动调用

39:24.180 --> 39:25.180
调用

39:25.180 --> 39:26.180
而是

39:26.180 --> 39:27.180
应该

39:28.180 --> 39:29.180
而是

39:29.180 --> 39:30.180
应该

39:30.180 --> 39:33.180
在这个对应的时间点

39:33.180 --> 39:35.180
对应的时间

39:36.180 --> 39:38.180
时间点

39:38.180 --> 39:40.180
自动出发

39:40.180 --> 39:42.180
自动出发

39:42.180 --> 39:43.180
对不对

39:43.180 --> 39:45.180
和这个app

39:45.180 --> 39:46.180
生命周期

39:46.180 --> 39:47.180
勾字函数相同

39:47.180 --> 39:48.180
不要去主动调用

39:48.180 --> 39:50.180
而是应该是在对应的时间点

39:50.180 --> 39:51.180
自动出发

39:51.180 --> 39:53.180
总之你记住

39:53.180 --> 39:55.180
总之你记住

39:55.180 --> 39:58.180
只要是生命周期

39:58.180 --> 40:00.180
勾字函数

40:00.180 --> 40:02.180
都应该是什么呢

40:02.180 --> 40:04.180
都应该是

40:04.180 --> 40:06.180
自动的出发

40:06.180 --> 40:07.180
就我到了那个时间点

40:07.180 --> 40:08.180
对不对

40:08.180 --> 40:09.180
我自动来出发

40:09.180 --> 40:11.180
而不应该

40:11.180 --> 40:15.180
而不应该去手动的调用

40:15.180 --> 40:16.180
这一点的话

40:16.180 --> 40:18.180
实际上在无论是在view里面

40:18.180 --> 40:19.180
还是在react里面

40:19.180 --> 40:21.180
这一点其实都是相同的

40:21.180 --> 40:22.180
都是相同的

40:22.180 --> 40:23.180
都是一样的

40:23.180 --> 40:25.180
你不要去主动去调用它

40:26.180 --> 40:27.180
好

40:27.180 --> 40:28.180
然后接下来

40:28.180 --> 40:29.180
后面我们刚才说了参数

40:29.180 --> 40:30.180
是吧

40:30.180 --> 40:31.180
我们来看一下

40:31.180 --> 40:32.180
这边

40:32.180 --> 40:33.180
下面他就在说参数了

40:33.180 --> 40:34.180
最后我们说一下

40:34.180 --> 40:36.180
印面打开的参数query

40:36.180 --> 40:37.180
像这么一个场景

40:37.180 --> 40:39.180
比如说我们现在是一个购物网站

40:39.180 --> 40:40.180
购物网站的话

40:40.180 --> 40:42.180
比如说他有这个商品列表

40:42.180 --> 40:43.180
把图画一下吧

40:43.180 --> 40:46.490
比如说你现在是一个购物网站

40:46.490 --> 40:47.490
对不对

40:47.490 --> 40:48.490
现在当前的话

40:48.490 --> 40:50.490
这个用户在你这个页面

40:50.490 --> 40:51.490
这个页面的话

40:51.490 --> 40:52.490
接下来的话

40:52.490 --> 40:53.490
你这边的话有很多的商品

40:53.490 --> 40:54.490
对不对

40:54.490 --> 40:55.490
这是第一件商品

40:55.490 --> 40:56.490
这是第二件商品

40:56.490 --> 40:58.490
大家这边是第三件

40:58.490 --> 41:00.490
然后第四件

41:00.490 --> 41:02.490
然后第五件

41:02.490 --> 41:03.490
画的比较抽象

41:03.490 --> 41:05.490
应该能够看得懂吧

41:05.490 --> 41:06.490
对不对

41:06.490 --> 41:07.490
就是你这边的话

41:07.490 --> 41:09.490
像现在比如说什么拼多多

41:09.490 --> 41:10.490
打开不都是这样的吗

41:10.490 --> 41:11.490
对不对

41:11.490 --> 41:12.490
这边就是你这边

41:12.490 --> 41:14.490
有各种各样的这种商品

41:14.490 --> 41:15.490
有商品的话

41:15.490 --> 41:16.490
然后接下来的话

41:16.490 --> 41:17.490
用户比如说他想买这个

41:17.490 --> 41:18.490
第一个

41:18.490 --> 41:19.490
想买第一个

41:19.490 --> 41:20.490
他是不是就会点啊

41:20.490 --> 41:21.490
点的话

41:21.490 --> 41:22.490
然后接下来就会跳到什么

41:22.490 --> 41:24.490
是不是跳到这个商品的

41:24.490 --> 41:26.490
商品详情过去

41:26.490 --> 41:27.490
对不对

41:27.490 --> 41:28.490
跳到当前这个商品的

41:28.490 --> 41:29.490
这个商品详情

41:29.490 --> 41:30.490
那这边的话

41:30.490 --> 41:31.490
一般就需要你什么

41:31.490 --> 41:34.490
是不是需要你把这个商品的这个

41:34.490 --> 41:35.490
id

41:35.490 --> 41:37.490
是把它带过去

41:37.490 --> 41:38.490
对不对

41:38.490 --> 41:40.490
需要你把当前商品这个id

41:40.490 --> 41:41.490
带过去

41:41.490 --> 41:42.490
带到这个详情页

41:42.490 --> 41:44.490
那详情页拿到这个id之后

41:44.490 --> 41:46.490
才好根据你的这个id

41:46.490 --> 41:48.490
是不是渲染出具体的这个

41:48.490 --> 41:50.490
商品信息

41:50.490 --> 41:51.490
对不对

41:51.490 --> 41:52.490
OK

41:52.490 --> 41:53.490
说这边的话

41:53.490 --> 41:54.490
就是需要我们有个什么呢

41:54.490 --> 41:56.490
需要有个这个传参

41:56.490 --> 41:57.490
我们传参

41:57.490 --> 41:59.490
那如何进行传参呢

41:59.490 --> 42:00.490
我们这边来看一下

42:00.490 --> 42:03.490
你这边在进行跳转的时候

42:03.490 --> 42:04.490
你这边的话

42:04.490 --> 42:06.490
可以就是像这个url

42:06.490 --> 42:09.490
这边可以传递这个参数

42:09.490 --> 42:10.490
OK

42:10.490 --> 42:15.720
我们这边把这儿记一下

42:15.720 --> 42:20.670
关于参数的传递

42:20.670 --> 42:26.670
在进行页面跳转的时候

42:26.670 --> 42:31.670
往往存在一种情况

42:31.670 --> 42:32.670
就是什么呢

42:32.670 --> 42:35.670
就是当前页面

42:35.670 --> 42:38.670
需要传递一个id

42:38.670 --> 42:42.670
给这个新的页面

42:42.670 --> 42:43.670
对不对

42:43.670 --> 42:45.670
然后新的页面

42:45.670 --> 42:49.670
就根据当前

42:49.670 --> 42:52.670
当前这个id

42:52.670 --> 42:53.670
然后接下来的话

42:53.670 --> 42:54.670
显示

42:54.670 --> 42:57.670
显示这个详情信息

42:57.670 --> 42:59.670
这是不是很常见的一个学校

42:59.670 --> 43:00.670
对不对

43:00.670 --> 43:01.670
好那接下来

43:01.670 --> 43:03.670
我们这边在跳转的时候

43:03.670 --> 43:07.670
在跳转的时候

43:07.670 --> 43:11.670
可以通过如下的方式

43:11.670 --> 43:15.670
来进行跳转

43:15.670 --> 43:17.670
比如说我们这边

43:17.670 --> 43:18.670
这里

43:18.670 --> 43:19.670
可以通过这种方式

43:19.670 --> 43:20.670
当然这边

43:20.670 --> 43:22.670
涉及到路由的这个操作

43:22.670 --> 43:24.670
我们下节课来讲路由

43:24.670 --> 43:25.670
这边你看

43:25.670 --> 43:26.670
我这边的话

43:26.670 --> 43:27.670
要跳到配级是

43:27.670 --> 43:29.670
下面的detail

43:29.670 --> 43:30.670
然后既然我这边

43:30.670 --> 43:31.670
传了一个什么

43:31.670 --> 43:33.670
是传了一个id等于e

43:33.670 --> 43:34.670
那还有一个这个参数

43:34.670 --> 43:36.670
r等于abc

43:36.670 --> 43:37.670
这个的话

43:37.670 --> 43:38.670
实际上就和什么

43:38.670 --> 43:39.670
实际上就和我们的

43:39.670 --> 43:40.670
get请求传参

43:40.670 --> 43:41.670
是不是是一样的

43:41.670 --> 43:42.670
对不对

43:42.670 --> 43:44.670
实际上

43:44.670 --> 43:48.690
实际上就和

43:48.690 --> 43:52.690
我们get请求

43:52.690 --> 43:54.690
传参

43:54.690 --> 43:56.690
传参

43:56.690 --> 44:00.690
传参是一样的

44:00.690 --> 44:01.690
对不对

44:01.690 --> 44:02.690
那接下来的话

44:02.690 --> 44:03.690
一个问题是什么

44:03.690 --> 44:04.690
接下来的问题就是

44:04.690 --> 44:05.690
那如何就新页面

44:05.690 --> 44:08.690
如何拿到这个参数

44:08.690 --> 44:11.690
接下来的问题

44:11.690 --> 44:12.690
就是

44:12.690 --> 44:14.690
这个新的页面

44:14.690 --> 44:18.690
如何拿到这个参数

44:18.690 --> 44:19.690
好来我们这边

44:19.690 --> 44:20.690
我们来看一下

44:20.690 --> 44:22.690
回到这个文档

44:22.690 --> 44:23.690
你看他这边

44:23.690 --> 44:24.690
是不一样的

44:24.690 --> 44:25.690
这边通过什么呢

44:25.690 --> 44:27.690
通过就是

44:27.690 --> 44:28.690
你这边生命周期

44:28.690 --> 44:29.690
勾字函数

44:29.690 --> 44:30.690
这边可以

44:30.690 --> 44:32.690
接受一个这个参数

44:32.690 --> 44:33.690
接受这个参数之后

44:33.690 --> 44:34.690
人家这边我就可以干嘛

44:34.690 --> 44:36.690
这就可以拿到

44:36.690 --> 44:37.690
对不对

44:37.690 --> 44:40.690
在生命周期

44:40.690 --> 44:42.690
勾字函数

44:42.690 --> 44:47.130
它是这个unkload是吧

44:47.130 --> 44:49.130
它是unkload的

44:49.130 --> 44:51.130
okunkload

44:51.130 --> 44:53.130
可以在这个unkload

44:53.130 --> 44:55.130
在unkload的生命周期

44:55.130 --> 44:57.130
勾字函数中

44:57.130 --> 45:00.130
可以接收

45:00.130 --> 45:03.130
接收一个参数

45:03.130 --> 45:06.130
该参数代表

45:06.130 --> 45:08.130
该参数

45:08.130 --> 45:09.130
该参数

45:09.130 --> 45:11.130
通过该参数

45:11.130 --> 45:13.130
通过该参数

45:13.130 --> 45:15.130
就能够

45:15.130 --> 45:18.130
就能够拿到

45:18.130 --> 45:21.130
就是前一个页面

45:21.130 --> 45:24.130
前一个页面

45:24.130 --> 45:27.130
传递过来的参数

45:27.130 --> 45:29.130
ok

45:29.130 --> 45:32.130
我们这边拿过来

45:32.130 --> 45:35.130
我们这边来看一下吧

45:35.130 --> 45:37.130
我们来看一下

45:37.130 --> 45:39.130
这边它是unkload的

45:39.130 --> 45:41.130
通过OPPING

45:41.130 --> 45:43.130
OPPING.ID,OPPING.Other

45:43.130 --> 45:44.130
就拿到了

45:44.130 --> 45:45.130
对不对

45:45.130 --> 45:47.130
我们这边来看一下

45:47.130 --> 45:48.130
我们这边的话

45:48.130 --> 45:49.130
这个样子

45:49.130 --> 45:50.130
说到路由的话

45:50.130 --> 45:52.130
本来是下几颗奖

45:52.130 --> 45:53.130
这几颗我们为了

45:53.130 --> 45:55.130
看这个参数

45:55.130 --> 45:57.130
我们这边加一个

45:57.130 --> 45:59.130
这个按钮

45:59.130 --> 46:01.130
我记得好像是有按钮的

46:01.130 --> 46:02.130
button

46:02.130 --> 46:03.130
ok

46:03.130 --> 46:05.130
那加这边的是跳转

46:05.130 --> 46:08.130
跳转LOG

46:08.130 --> 46:10.130
页面

46:10.130 --> 46:11.130
保存一下

46:11.130 --> 46:12.130
有的

46:12.130 --> 46:13.130
你现在点的话

46:13.130 --> 46:15.130
它这边这个按钮就是这样子的

46:15.130 --> 46:16.130
对不对

46:16.130 --> 46:17.130
然后接下来

46:17.130 --> 46:18.130
这边你需要给它

46:18.130 --> 46:19.130
干嘛呢

46:19.130 --> 46:20.130
需要绑定一个世界

46:20.130 --> 46:22.130
bound tab

46:22.130 --> 46:23.130
等于一个

46:23.130 --> 46:25.130
我们这边叫做go to

46:25.130 --> 46:27.130
LOG

46:27.130 --> 46:28.130
好

46:28.130 --> 46:29.130
然后接下来的话

46:29.130 --> 46:32.130
在这个index.js这边

46:32.130 --> 46:33.130
好

46:33.130 --> 46:35.130
我们这边就添加

46:35.130 --> 46:36.130
go to LOG

46:36.130 --> 46:37.130
go to LOG

46:37.130 --> 46:38.130
然后接下来

46:38.130 --> 46:39.130
我们这里

46:39.130 --> 46:40.130
这里的话

46:40.130 --> 46:44.620
我们就跳转

46:44.620 --> 46:45.620
跳转

46:45.620 --> 46:46.620
我们这边就是

46:46.620 --> 46:47.620
应该是pages

46:47.620 --> 46:49.620
下面的LOGS

46:49.620 --> 46:51.620
下面的LOGS

46:51.620 --> 46:52.620
对不对

46:52.620 --> 46:53.620
然后回头

46:53.620 --> 46:55.620
把这边这个参数id1

46:55.620 --> 46:56.620
和这个other

46:56.620 --> 46:57.620
把它传递过去

46:57.620 --> 46:58.620
先看一下跳转

46:58.620 --> 47:00.620
能不能跳转过去

47:00.620 --> 47:02.620
跳转

47:02.620 --> 47:04.620
这边好像抱错了

47:04.620 --> 47:07.180
看一下

47:07.180 --> 47:09.180
这边好像抱错了

47:09.180 --> 47:11.180
not found

47:11.180 --> 47:13.180
pages

47:13.180 --> 47:15.180
index

47:15.180 --> 47:16.180
我看一下

47:16.180 --> 47:19.820
这边它找不到

47:19.820 --> 47:20.820
你看它这边

47:20.820 --> 47:21.820
not found

47:21.820 --> 47:23.820
not found

47:23.820 --> 47:24.820
这边找不到

47:24.820 --> 47:26.820
我看这边是要用绝对路径吗

47:26.820 --> 47:28.820
试一下

47:28.820 --> 47:29.820
这边走

47:29.820 --> 47:30.820
可以了

47:30.820 --> 47:32.820
这边少打了一个

47:32.820 --> 47:33.820
少打了一个邪恶

47:33.820 --> 47:35.820
咱们这边用绝对路径

47:35.820 --> 47:36.820
跳过来了

47:36.820 --> 47:37.820
跳过来了之后

47:37.820 --> 47:38.820
然后接下来

47:38.820 --> 47:39.820
我们在这边

47:39.820 --> 47:41.820
在这个LOGS这边

47:41.820 --> 47:43.820
我们来这个接收

47:43.820 --> 47:44.820
来接收的话

47:44.820 --> 47:45.820
我们在这边

47:45.820 --> 47:47.820
这边onload

47:47.820 --> 47:48.820
这里的话

47:48.820 --> 47:49.820
我们就可以接收一个

47:49.820 --> 47:50.820
对不对

47:50.820 --> 47:51.820
options

47:51.820 --> 47:53.820
这边在设置啥

47:53.820 --> 47:54.820
不管它在设置啥

47:54.820 --> 47:56.820
这个这段代码忽略

47:56.820 --> 47:57.820
然后接下来

47:57.820 --> 47:58.820
我们这边来看一下

47:58.820 --> 48:00.820
能不能接收得到

48:00.820 --> 48:01.820
这边的话

48:01.820 --> 48:03.820
options.id

48:03.820 --> 48:05.820
以及一个什么呢

48:05.820 --> 48:12.900
以及一个options.other

48:12.900 --> 48:14.900
我们传的叫什么名字来着

48:14.900 --> 48:15.900
叫做

48:15.900 --> 48:17.900
就是other

48:17.900 --> 48:21.460
这边就叫做other

48:21.460 --> 48:22.460
OK

48:22.460 --> 48:23.460
保存

48:23.460 --> 48:24.460
好

48:24.460 --> 48:26.460
保存之后

48:26.460 --> 48:27.460
这边先不管它

48:27.460 --> 48:29.460
我们先回来

48:30.460 --> 48:31.460
回来

48:31.460 --> 48:32.460
OK

48:32.460 --> 48:33.460
好

48:33.460 --> 48:34.460
然后接下来

48:34.460 --> 48:35.460
我们在这边跳转过去

48:35.460 --> 48:36.460
拿到了没有

48:36.460 --> 48:37.460
是不是拿到了

48:37.460 --> 48:38.460
对不对

48:38.460 --> 48:39.460
这边eabc

48:39.460 --> 48:40.460
就拿到了

48:40.460 --> 48:41.460
所以我们回到

48:41.460 --> 48:42.460
回到这个笔记

48:42.460 --> 48:43.460
这边

48:43.460 --> 48:45.460
这边已经记录了

48:45.460 --> 48:46.460
记录了

48:46.460 --> 48:47.460
就是通过这边

48:47.460 --> 48:48.460
通过这边

48:48.460 --> 48:49.460
传入的参数

48:49.460 --> 48:50.460
那接下来

48:50.460 --> 48:51.460
这边这个参数

48:51.460 --> 48:52.460
就可以拿到你这边

48:52.460 --> 48:53.460
传的这个

48:53.460 --> 48:55.460
传的这边这个参数

48:55.460 --> 48:57.460
这边来加一个鞋

48:57.460 --> 48:58.460
OK

48:58.460 --> 48:59.460
保存

48:59.460 --> 49:01.460
这是关于这个

49:01.460 --> 49:02.460
参数的传递

49:02.460 --> 49:03.460
好

49:03.460 --> 49:04.460
然后接下来

49:04.460 --> 49:05.460
咱们继续

49:05.460 --> 49:06.460
继续

49:08.460 --> 49:09.460
这边它就是

49:09.460 --> 49:10.460
讲如何传参

49:10.460 --> 49:11.460
它说基本上就和什么

49:11.460 --> 49:12.460
基本上就和

49:12.460 --> 49:14.460
网页的url是类似的

49:14.460 --> 49:15.460
其实就是什么

49:15.460 --> 49:16.460
就和git请求是一样的

49:16.460 --> 49:17.460
你注意

49:17.460 --> 49:18.460
如果涉及到

49:18.460 --> 49:19.460
特殊的这个制服

49:19.460 --> 49:20.460
它会干嘛

49:20.460 --> 49:21.460
它会有一个

49:21.460 --> 49:23.460
编码的过程在里面

49:23.460 --> 49:25.460
就和网页端是一样的

49:26.460 --> 49:27.460
好

49:27.460 --> 49:28.460
然后接下来

49:28.460 --> 49:30.460
这边关于这个页面的数据

49:30.460 --> 49:31.460
这一块的话

49:31.460 --> 49:33.460
就讲的是这个data了

49:33.460 --> 49:34.460
讲的是data

49:34.460 --> 49:35.460
data的话

49:35.460 --> 49:37.460
你如果想要设置数据的话

49:37.460 --> 49:39.460
你需要通过什么呢

49:39.460 --> 49:42.460
需要通过这个z.zdata

49:42.460 --> 49:43.460
因为它这边的话

49:43.460 --> 49:44.460
有两个线程

49:44.460 --> 49:46.460
一个是这个逻辑程

49:46.460 --> 49:48.460
一个是渲染程

49:48.460 --> 49:49.460
这边的话

49:49.460 --> 49:50.460
当你雕用这个方法的时候

49:50.460 --> 49:52.460
你就会把这个新的数据

49:52.460 --> 49:54.460
传递给这个渲染程

49:54.460 --> 49:56.460
关于这个逻辑程和渲染程

49:56.460 --> 49:58.460
我们后面在那个讲架构的时候

49:58.460 --> 49:59.460
我们会说

49:59.460 --> 50:00.460
这边我们先暂时

50:00.460 --> 50:01.460
把这个知识点

50:01.460 --> 50:02.460
先把它屏蔽一调

50:02.460 --> 50:04.460
OK 先把它放一放

50:04.460 --> 50:05.460
好 这边你就知道

50:05.460 --> 50:06.460
反正你就

50:07.460 --> 50:08.460
反正你这边的话

50:08.460 --> 50:09.460
你就知道

50:09.460 --> 50:10.460
就是你这边要设置的话

50:10.460 --> 50:11.460
就通过什么呢

50:11.460 --> 50:12.460
通过这个z.zdata

50:12.460 --> 50:14.460
来更新这个数据

50:14.460 --> 50:15.460
OK

50:16.460 --> 50:17.460
好 然后这个的话

50:17.460 --> 50:18.460
它是一个什么呢

50:18.460 --> 50:19.460
它是一个异步的这个过程

50:19.460 --> 50:21.460
它是一个异步的过程

50:21.460 --> 50:22.460
它有一个

50:22.460 --> 50:23.460
这个第二个成熟

50:23.460 --> 50:24.460
是一个这个回调

50:24.460 --> 50:25.460
这个回调的话

50:25.460 --> 50:26.460
它是在什么呢

50:26.460 --> 50:28.460
是在页面渲染完毕之后

50:28.460 --> 50:29.460
出发的

50:29.460 --> 50:31.460
这个其实和什么很像

50:31.460 --> 50:33.460
如果学过这个react的同学

50:33.460 --> 50:35.460
对这个其实是比较熟悉的

50:35.460 --> 50:36.460
这个和什么很像

50:36.460 --> 50:38.460
是不是和react里面的这个

50:38.460 --> 50:40.460
set state很像啊

50:40.460 --> 50:41.460
对不对

50:41.460 --> 50:43.460
set state很像是

50:43.460 --> 50:44.460
然后这边呢

50:44.460 --> 50:45.460
举了一个例子

50:45.460 --> 50:46.460
举个例子

50:46.460 --> 50:48.460
比如这边z.zdata

50:48.460 --> 50:49.460
这边是去修改

50:49.460 --> 50:50.460
好 然后我们这边

50:50.460 --> 50:51.460
我们还是看一下吧

50:51.460 --> 50:53.460
我们回到我们这边

50:53.460 --> 50:54.460
来看个例子嘛

50:54.460 --> 50:55.460
啊

50:55.460 --> 50:57.460
我们先回到上一个页面

50:57.460 --> 50:58.460
回到上一个页面

50:58.460 --> 50:59.460
然后接下来在这边

50:59.460 --> 51:01.460
这边我们

51:01.460 --> 51:02.460
新来一个

51:02.460 --> 51:03.460
比如说我们这边

51:03.460 --> 51:05.460
有个这个view

51:05.460 --> 51:06.460
比如说我们这边

51:06.460 --> 51:07.460
就设置这个吗

51:07.460 --> 51:09.460
这边不是一个this

51:09.460 --> 51:10.460
this is a test

51:10.460 --> 51:11.460
对吧

51:11.460 --> 51:12.460
对应的是哪个数据

51:14.460 --> 51:16.460
对应的是

51:16.460 --> 51:18.460
这个this is a test

51:18.460 --> 51:19.460
是哪里来的

51:19.460 --> 51:20.460
看一下

51:20.460 --> 51:22.460
好像是在这里面写死的

51:22.460 --> 51:23.460
在这写死的

51:23.460 --> 51:24.460
好 那我们重新写一个

51:24.460 --> 51:25.460
重新写一个

51:26.460 --> 51:28.460
好 我们写到

51:28.460 --> 51:29.460
写到这下面吧

51:29.460 --> 51:30.460
这边有个view

51:31.460 --> 51:33.460
view 然后它的数据是什么呢

51:33.460 --> 51:35.460
它的数据是从这边来的

51:35.460 --> 51:36.460
从这边

51:36.460 --> 51:38.460
这边的话是一个

51:38.460 --> 51:39.460
test

51:39.460 --> 51:40.460
然后对应的数据是

51:40.460 --> 51:43.460
this is a test

51:43.460 --> 51:44.460
OK 我们的data里面

51:44.460 --> 51:45.460
有一个数据

51:45.460 --> 51:47.460
好 然后接下来这边

51:47.460 --> 51:49.460
好吧 这些关了

51:49.460 --> 51:51.460
好 然后这边

51:51.460 --> 51:53.460
这边就显示这个test

51:53.460 --> 51:55.460
这是不是第一节课就讲过的

51:55.460 --> 51:56.460
对不对

51:56.460 --> 51:57.460
保存

51:57.460 --> 51:58.460
保存之后

51:58.460 --> 51:59.460
然后接下这边

51:59.460 --> 52:00.460
this is a test

52:00.460 --> 52:01.460
出来了

52:01.460 --> 52:02.460
好 然后接下来

52:02.460 --> 52:03.460
我们再来一个按钮

52:03.460 --> 52:04.460
button

52:04.460 --> 52:05.460
这个是什么呢

52:05.460 --> 52:06.460
这个修改

52:06.460 --> 52:08.460
上面的数据

52:08.460 --> 52:09.460
OK

52:09.460 --> 52:10.460
好 我们这边

52:10.460 --> 52:12.460
bund type

52:13.460 --> 52:14.460
等于一个

52:15.460 --> 52:16.460
等于一个

52:16.460 --> 52:17.460
比较edit

52:17.460 --> 52:19.460
test

52:19.460 --> 52:20.460
handle

52:21.460 --> 52:23.460
好 然后接下来来到这边

52:24.460 --> 52:25.460
来到这边

52:25.460 --> 52:27.460
输写这么一个方法

52:27.460 --> 52:28.460
edit test

52:28.460 --> 52:29.460
handle

52:29.460 --> 52:30.460
好 在这边

52:30.460 --> 52:31.460
我们要做什么事情呢

52:31.460 --> 52:32.460
在这边的话

52:32.460 --> 52:33.460
我们是不是想修改它

52:33.460 --> 52:34.460
对不对

52:34.460 --> 52:35.460
想修改它

52:35.460 --> 52:36.460
想修改它的话

52:36.460 --> 52:37.460
通过什么呢

52:37.460 --> 52:39.460
通过this.set

52:39.460 --> 52:40.460
data

52:40.460 --> 52:42.460
通过这个

52:42.460 --> 52:43.460
通过这个

52:43.460 --> 52:44.460
然后接下来的话

52:44.460 --> 52:45.460
你在这里面

52:45.460 --> 52:46.460
你要修改哪个

52:46.460 --> 52:47.460
你要修改test

52:47.460 --> 52:48.460
你要把它修改成什么值

52:48.460 --> 52:49.460
随便无所谓

52:50.460 --> 52:51.460
OK 保存

52:51.460 --> 52:52.460
保存了之后

52:52.460 --> 52:53.460
然后加我们这边来看一下

52:53.460 --> 52:54.460
好 这边

52:54.460 --> 52:55.460
轻松掉

52:55.460 --> 52:57.460
当我点击之后

52:57.460 --> 52:58.460
这边是不是发生了修改

52:58.460 --> 52:59.460
对不对

52:59.460 --> 53:00.460
你这边的话

53:00.460 --> 53:01.460
你把这个数据

53:01.460 --> 53:03.460
你把这个数据修改了

53:03.460 --> 53:04.460
修改了之后

53:04.460 --> 53:05.460
然后它这边的话

53:05.460 --> 53:06.460
这个渲染成

53:06.460 --> 53:07.460
这边它就修改了

53:07.460 --> 53:08.460
实际上这个

53:08.460 --> 53:10.460
这个set data

53:10.460 --> 53:12.460
实际上就和那个set state

53:12.460 --> 53:14.460
react里面的set state

53:14.460 --> 53:15.460
很相似

53:15.460 --> 53:16.460
好 他这边还接受

53:16.460 --> 53:17.460
第二个参数

53:17.460 --> 53:18.460
第二个参数

53:18.460 --> 53:20.460
参数是一个回调喊数

53:20.460 --> 53:21.460
OK

53:21.460 --> 53:22.460
这个是在什么呢

53:22.460 --> 53:24.460
实在就是你修改完毕之后

53:24.460 --> 53:26.460
它会触发这个喊数

53:27.460 --> 53:28.460
这边

53:28.460 --> 53:30.460
console.log

53:30.460 --> 53:32.460
修改完毕

53:33.460 --> 53:35.460
修改完毕

53:35.460 --> 53:37.460
页面已经

53:37.460 --> 53:39.460
更新了

53:39.460 --> 53:41.460
OK 保存

53:41.460 --> 53:42.460
保存之后

53:42.460 --> 53:44.460
然后加我们这边

53:44.460 --> 53:45.460
走

53:45.460 --> 53:46.460
对吧

53:46.460 --> 53:47.460
这边变了

53:47.460 --> 53:49.460
页面已经更新了

53:49.460 --> 53:51.460
关于这个set data

53:51.460 --> 53:52.460
注意

53:52.460 --> 53:53.460
就以后的话

53:53.460 --> 53:55.460
你要修改data里面的数据

53:55.460 --> 53:56.460
都应该通过什么呢

53:56.460 --> 53:58.460
都应该通过set state

53:58.460 --> 54:00.460
这个set data

54:00.460 --> 54:02.460
之前用react用关了

54:02.460 --> 54:03.460
这边就是

54:03.460 --> 54:04.460
都应该通过什么呢

54:04.460 --> 54:05.460
set data

54:05.460 --> 54:07.460
在笔记里面记一笔

54:07.460 --> 54:10.840
最后

54:10.840 --> 54:12.840
就是关于

54:12.840 --> 54:13.840
设置

54:13.840 --> 54:14.840
配级

54:14.840 --> 54:16.840
构造器中

54:16.840 --> 54:17.840
data

54:17.840 --> 54:20.840
里面这个数据

54:20.840 --> 54:21.840
这个问题

54:21.840 --> 54:22.840
通过什么呢

54:22.840 --> 54:23.840
通过

54:23.840 --> 54:27.840
res.set data

54:27.840 --> 54:29.840
来进行

54:29.840 --> 54:31.840
设置

54:31.840 --> 54:32.840
对不对

54:32.840 --> 54:35.840
这边我们把这个笔记

54:35.840 --> 54:37.840
把它过来

54:37.840 --> 54:38.840
就这一块

54:38.840 --> 54:40.840
我就仔细这一块

54:40.840 --> 54:44.370
对不对

54:44.370 --> 54:46.370
通过这个来设置

54:46.370 --> 54:49.740
然后该喊数

54:49.740 --> 54:50.740
该方法

54:50.740 --> 54:52.740
该方法接收

54:52.740 --> 54:54.740
两个参数

54:54.740 --> 54:56.740
一个是什么

54:56.740 --> 54:58.740
新的数据

54:58.740 --> 55:00.740
然后另一个是什么呢

55:00.740 --> 55:02.740
另一个是就是

55:02.740 --> 55:04.740
数据

55:04.740 --> 55:06.740
更新

55:06.740 --> 55:08.740
数据更新后

55:08.740 --> 55:09.740
接下来这个页面

55:09.740 --> 55:11.740
应该是页面更新后

55:11.740 --> 55:13.740
就是页面

55:13.740 --> 55:15.740
随着

55:15.740 --> 55:17.740
数据

55:17.740 --> 55:18.740
随着数据

55:18.740 --> 55:19.740
更新

55:19.740 --> 55:22.740
然后重新渲染后

55:22.740 --> 55:25.740
重新渲染后的这个

55:25.740 --> 55:27.740
回调喊数

55:27.740 --> 55:29.740
它是在你数据更新

55:29.740 --> 55:31.740
数据更新完了之后

55:31.740 --> 55:32.740
你页面要重新渲染

55:32.740 --> 55:34.740
页面重新渲染之后的

55:34.740 --> 55:36.740
这个回调喊数

55:36.740 --> 55:38.740
就是在这个页面

55:38.740 --> 55:39.740
重新渲染之后

55:39.740 --> 55:41.740
它才会这个调用

55:41.740 --> 55:44.740
这是关于这点

55:44.740 --> 55:46.740
然后这边

55:46.740 --> 55:47.740
它说就是你可以

55:47.740 --> 55:48.740
就是这边设置的时候

55:48.740 --> 55:50.740
它是非常灵活的

55:50.740 --> 55:51.740
非常灵活的

55:51.740 --> 55:53.740
比如说你这边的话

55:53.740 --> 55:54.740
比如这边的话

55:54.740 --> 55:56.740
比如说你指是这个A

55:56.740 --> 55:57.740
它这边这个data有A

55:57.740 --> 55:58.740
有B

55:58.740 --> 55:59.740
有C

55:59.740 --> 56:00.740
然后有D

56:00.740 --> 56:02.740
D的话是一个这个数据

56:02.740 --> 56:03.740
数据里面还蛮复杂的

56:03.740 --> 56:04.740
让你在这个设置的时候

56:04.740 --> 56:05.740
你这边可以指

56:05.740 --> 56:07.740
设置这个A就可以了

56:07.740 --> 56:08.740
注意

56:08.740 --> 56:10.740
设置的时候

56:10.740 --> 56:12.740
设置的时候

56:12.740 --> 56:14.740
只需要

56:14.740 --> 56:17.740
这个更新的数据即可

56:17.740 --> 56:19.740
对不对

56:19.740 --> 56:20.740
这边只需要设置

56:20.740 --> 56:22.740
更新的数据即可

56:22.740 --> 56:23.740
好

56:23.740 --> 56:24.740
然后接下来的话

56:24.740 --> 56:25.740
这边有这么

56:25.740 --> 56:26.740
三个注意点

56:26.740 --> 56:28.740
哪三个呢

56:28.740 --> 56:30.740
你去直接修改

56:30.740 --> 56:32.740
data而不是这个

56:32.740 --> 56:34.740
去调用data来修改

56:34.740 --> 56:36.740
那这种方式是不行的

56:36.740 --> 56:37.740
这种方式的话

56:37.740 --> 56:38.740
它是无法修改

56:38.740 --> 56:40.740
这个页面的状态的

56:40.740 --> 56:42.740
还会造成这个数据的不一致

56:42.740 --> 56:43.740
就是你这边

56:43.740 --> 56:45.740
你不能直接这样子来

56:45.740 --> 56:46.740
中国这边要改数据

56:46.740 --> 56:47.740
是吧

56:47.740 --> 56:48.740
这边直接

56:48.740 --> 56:50.740
z点这个data

56:50.740 --> 56:52.740
等于一个这个BBB

56:52.740 --> 56:54.740
这样子是不行的

56:54.740 --> 56:55.740
我们这边来看一下

56:55.740 --> 56:56.740
保存

56:56.740 --> 56:57.740
好

56:57.740 --> 56:58.740
把轻空

56:58.740 --> 56:59.740
那加这边修改

56:59.740 --> 57:00.740
你看

57:00.740 --> 57:01.740
这样子是没用的

57:01.740 --> 57:02.740
而且它还会

57:02.740 --> 57:03.740
还会有bug

57:03.740 --> 57:04.740
就会造成你的数据不一致

57:04.740 --> 57:05.740
你现在这个数据

57:05.740 --> 57:06.740
其实已经改成BBB了

57:06.740 --> 57:07.740
但是这边的话

57:07.740 --> 57:10.740
是没有重新渲染的

57:10.740 --> 57:11.740
这是第一个点

57:11.740 --> 57:12.740
要注意

57:12.740 --> 57:13.740
第二个点

57:13.740 --> 57:14.740
由于这个set data

57:14.740 --> 57:16.740
它是需要两个线程之间

57:16.740 --> 57:18.740
进行通信消耗的

57:18.740 --> 57:20.740
就我们说过一个渲染程

57:20.740 --> 57:21.740
一个这个逻辑程

57:21.740 --> 57:23.740
它是有两个线程

57:23.740 --> 57:24.740
说为了提高性能

57:24.740 --> 57:26.740
每次设置的这个数据

57:26.740 --> 57:28.740
不应该超过这么多

57:28.740 --> 57:30.740
1024kb

57:30.740 --> 57:32.740
这边要注意

57:32.740 --> 57:33.740
好

57:33.740 --> 57:34.740
然后接下来第三个

57:34.740 --> 57:35.740
不要把data中

57:35.740 --> 57:36.740
任何一项的这个value

57:36.740 --> 57:38.740
设为这个unlify

57:38.740 --> 57:39.740
否则可能会引起一些

57:39.740 --> 57:41.740
不可预料的一些bug

57:41.740 --> 57:42.740
因为你这个unlify

57:42.740 --> 57:43.740
本身我们之前看了

57:43.740 --> 57:44.740
unlify的话

57:44.740 --> 57:45.740
它的这个页面

57:45.740 --> 57:46.740
它是不会

57:46.740 --> 57:48.740
它是没有什么显示的

57:48.740 --> 57:49.740
对不对

57:49.740 --> 57:52.740
说它这边可能会引起这个bug

57:52.740 --> 57:54.740
这是关于这个set data

57:54.740 --> 57:55.740
我们把这三点

57:55.740 --> 57:59.820
放到笔记里面吧

57:59.820 --> 58:02.820
同时

58:02.820 --> 58:07.820
同时还有如下的注意点

58:07.820 --> 58:09.820
这三点

58:09.820 --> 58:11.820
把放到笔记里面

58:11.820 --> 58:12.820
OK

58:12.820 --> 58:13.820
好

58:13.820 --> 58:14.820
这是关于set data

58:14.820 --> 58:16.820
第五个是用户行为

58:16.820 --> 58:18.820
用户行为这边就是这几个了

58:18.820 --> 58:20.820
就我们刚才看到这个配级

58:20.820 --> 58:21.820
它不是有一堆

58:21.820 --> 58:22.820
这个生命周期

58:22.820 --> 58:23.820
勾字函数吗

58:23.820 --> 58:24.820
我们刚才看的是什么

58:24.820 --> 58:25.820
我们刚才看的是不是这些

58:25.820 --> 58:26.820
对不对

58:26.820 --> 58:27.820
data不算吗

58:27.820 --> 58:28.820
data是它的这个数据

58:28.820 --> 58:29.820
然后我们刚才看的

58:29.820 --> 58:30.820
这个生命周期

58:30.820 --> 58:31.820
勾字函数是这些

58:31.820 --> 58:32.820
然后除此之外

58:32.820 --> 58:33.820
它这边还有这些

58:33.820 --> 58:34.820
这些的话

58:34.820 --> 58:36.820
就和这个用户的行为有关了

58:36.820 --> 58:39.820
比如这个pull down refresh

58:39.820 --> 58:40.820
它就是什么呢

58:40.820 --> 58:42.820
它就是用户在下拉页面的时候

58:42.820 --> 58:44.820
不是我们经常手机端有这个

58:44.820 --> 58:45.820
下拉更新吗

58:45.820 --> 58:46.820
对不对

58:46.820 --> 58:47.820
下拉刷新吗

58:47.820 --> 58:48.820
你这边在下拉的时候

58:48.820 --> 58:49.820
它会触发这个

58:49.820 --> 58:51.820
然后reach bottom

58:51.820 --> 58:53.820
这个就是页面触底的时候

58:53.820 --> 58:54.820
会触发这个

58:54.820 --> 58:57.820
然后share这个app message

58:57.820 --> 58:59.820
这个是点那个右上角

58:59.820 --> 59:00.820
右上角转发的时候

59:00.820 --> 59:02.820
还有这个页面滚动的时候

59:02.820 --> 59:03.820
这几个的话

59:03.820 --> 59:05.820
我们今天就不展开了

59:05.820 --> 59:07.820
我们这个在后面第五章

59:07.820 --> 59:09.820
我们写这个具体案例的时候

59:09.820 --> 59:11.820
我们这边用到哪个

59:11.820 --> 59:12.820
我们再来看哪个

59:12.820 --> 59:13.820
好吧

59:13.820 --> 59:17.710
这边那就不展开了

59:17.710 --> 59:20.710
这是关于这几个用户行为相关的

59:20.710 --> 59:23.710
然后下第六个就是页面的

59:23.710 --> 59:25.710
这个跳转和这个路由

59:25.710 --> 59:26.710
那这个的话

59:26.710 --> 59:27.710
涉及到什么呢

59:27.710 --> 59:29.710
涉及到这个路由相关

59:29.710 --> 59:32.710
我们下节课来讲这个路由相关的

59:32.710 --> 59:34.710
后面就没什么了

59:34.710 --> 59:36.710
你看这个是和路由相关的

59:36.710 --> 59:37.710
就完了

59:37.710 --> 59:38.710
OK

59:38.710 --> 59:40.710
所以说总结一下这节课

59:40.710 --> 59:43.710
这节课的话其实主要就是围绕着这两个展开的

59:43.710 --> 59:45.710
一个是app 构造器

59:45.710 --> 59:47.710
一个是配级构造器

59:47.710 --> 59:48.710
app 构造器的话

59:48.710 --> 59:50.710
其实里面知识点就是两个

59:50.710 --> 59:51.710
一个是什么呢

59:51.710 --> 59:53.710
一个是app 构造器里面

59:53.710 --> 59:55.710
它的这个生命周期构置函数

59:55.710 --> 59:56.710
然后另外一个是什么呢

59:56.710 --> 59:59.710
另外一个是获取全局数据

59:59.710 --> 01:00:00.710
对不对

01:00:00.710 --> 01:00:02.710
就这两个知识点

01:00:02.710 --> 01:00:04.710
所以整个app 构造器

01:00:04.710 --> 01:00:06.710
整个微信小程序

01:00:06.710 --> 01:00:07.710
它只有一个

01:00:07.710 --> 01:00:10.710
只有一个在app.js里面

01:00:10.710 --> 01:00:11.710
好

01:00:11.710 --> 01:00:13.710
然后接下来这个配级构造器

01:00:13.710 --> 01:00:15.710
配级构造器它是

01:00:15.710 --> 01:00:18.710
每个页面的这个js下面都有一个

01:00:18.710 --> 01:00:19.710
它里面的话

01:00:19.710 --> 01:00:21.710
这边其实实际上也就这两个

01:00:21.710 --> 01:00:22.710
一个是什么呢

01:00:22.710 --> 01:00:23.710
一个是这个data

01:00:23.710 --> 01:00:24.710
一个是什么

01:00:24.710 --> 01:00:26.710
一个是这个生命周期构置函数

01:00:26.710 --> 01:00:27.710
对不对

01:00:27.710 --> 01:00:28.710
我们这边首先看了下

01:00:28.710 --> 01:00:31.710
它相关的这个生命周期构置函数

01:00:31.710 --> 01:00:32.710
然后接下来看了下什么呢

01:00:32.710 --> 01:00:34.710
接下来看了下这个data

01:00:34.710 --> 01:00:37.710
data里面配置这个数据

01:00:37.710 --> 01:00:39.710
这个是data中

01:00:39.710 --> 01:00:46.150
data中配置数据

01:00:46.150 --> 01:00:51.980
这个是生命周期构置函数

01:00:51.980 --> 01:00:57.980
生命周期生命

01:00:57.980 --> 01:01:01.980
生命周期构置函数

01:01:01.980 --> 01:01:05.290
主要也就是这两个知识点

01:01:06.290 --> 01:01:07.290
好

01:01:07.290 --> 01:01:09.290
这是关于这期课的内容

01:01:09.290 --> 01:01:10.290
大家下来的话

01:01:10.290 --> 01:01:12.290
把这期课的内容可以再看一下

01:01:12.290 --> 01:01:15.290
把这个课堂上的这些代码

01:01:15.290 --> 01:01:17.290
自己把它敲一敲写写

01:01:17.290 --> 01:01:18.290
好吧

01:01:18.290 --> 01:01:19.290
ok

01:01:19.290 --> 01:01:20.290
好这期课就先到这里

01:01:20.290 --> 01:01:21.290
再见

