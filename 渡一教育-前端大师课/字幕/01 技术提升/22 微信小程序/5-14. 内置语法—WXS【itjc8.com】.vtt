WEBVTT

00:00.000 --> 00:05.560
ok 咱们这几课来看一下微信小程序里面所提供的这个wxs

00:06.840 --> 00:13.840
好这个wxs啊我首先的话这边我把这个他的这个官网放到这里了啊我这边是打开了的我们来看一下

00:14.480 --> 00:20.240
这边wxs啊语法这个参考让他这边的话这个官方也有个这个介绍

00:20.840 --> 00:24.400
wxs叫做什么的叫做微信script

00:24.920 --> 00:30.120
诶和前面那个wxmail wxss是对应上了

00:30.920 --> 00:39.280
对不对啊前面的话他有这个自己的这个标记语言有自己的这个css啊然后现在这边的话啊wxs

00:40.160 --> 00:47.160
有自己的这个脚本语言啊那你看他这个介绍啊他说这个的话可以结合wxmail

00:47.600 --> 00:50.720
可以构建出页面的这个结构啊

00:50.720 --> 00:54.840
然后接下来这个wxs与javascript是不同的这个语言

00:55.360 --> 00:59.120
有自己的这个语法啊并不和这个javascript的一致

01:00.040 --> 01:09.360
ok 那我们前面在学习这个微信小程序的时候我们都知道微信小程序里面我们当我们要书写这个业务逻辑的时候用的就是什么

01:09.960 --> 01:13.440
用的是不是就是json 对不对 你看我们这边

01:14.920 --> 01:18.080
新建这个表一个页面啊把这些都关了吧

01:19.080 --> 01:22.920
关闭一保存啊这边关闭一保存把这些关了

01:24.200 --> 01:30.400
好 比如说我们这边的话我们有个页面页面的话这边的话你看这边wxmailwxss

01:30.400 --> 01:34.800
然后加这边的话你写业务逻辑的时候用的就是什么用的是不是就是json

01:35.560 --> 01:38.480
对不对 就是用json来书写你的这个业务逻辑

01:38.920 --> 01:45.280
好 那接下来的话这边其实最重要的一个问题是什么呢 最重要的一个问题就是这个wxs

01:45.680 --> 01:47.840
他究竟要解决什么问题

01:49.040 --> 01:54.560
对不对 这个实际上是最重要的 你要说他这个比如说这个东西如何用这个东西一点都不难

01:55.120 --> 01:57.840
啊 你这边呢你点进去你可以看一下比如这边这个辩量

01:58.720 --> 02:07.360
啊 声明辩量使用这个哇 对吧 然后辩量名 然后标志符啊这些啊 然后接下来这边他这个注射 你看一下啊 这边这个注射

02:08.040 --> 02:11.480
云酸符 云酸符这边啊 然后语趣

02:12.280 --> 02:14.560
对不对 语趣 这你会发现这玩意就是什么

02:15.280 --> 02:21.400
这不就是json 对不对 就语法的话啊 和这个json是一模一样的 虽然他这个官方介绍他说的

02:21.960 --> 02:29.280
并不和javascript的一致啊 有自己的语法 但实际上你这边的话 你进去看一下 你会发现基本上就和json是一致的

02:30.080 --> 02:31.040
比如这边数据类型

02:31.680 --> 02:37.040
你看数据类型 是不是就是json里面的那些东西啊 对不对啊 然后还有这个基础内库

02:37.480 --> 02:40.920
基础内库的话 这边的话比如说有mess啊 这是数学相关的

02:41.440 --> 02:47.400
然后有json啊 我猜都猜得到 还有什么date啊之类的lumber 你看这边是吧 number

02:48.520 --> 02:52.240
number 肯定有date啊 global 然后

02:53.560 --> 02:58.360
没有date吗 有有有 在这里啊 在这里 是不是date

02:59.160 --> 03:03.400
对不对啊 基本上的话 这个语法上面的话 大家不用太担心

03:03.960 --> 03:07.880
基本上就是以前你json是怎么写的 那你现在的话就怎么写

03:08.600 --> 03:16.840
啊 那这个的话 我们主要要考虑的一个问题是什么 一个问题就是这个东西啊 这个wxs 究竟要解决什么问题

03:17.720 --> 03:19.720
这个实际上是我们需要关注的

03:20.920 --> 03:27.400
面吧啊 因为我们以前的话 我们在写那个小程序的业务逻辑的时候 我们就是用的是什么

03:27.560 --> 03:35.720
所以用的就是这个json啊 直接新建一个json文件 然后直接写就可以了 那他为什么又要搞出来一个这个wxs呢

03:36.280 --> 03:37.000
啊 原因很简单

03:37.800 --> 03:43.480
好 我们前面的话 我们讲了这个架构篇啊 不知道大家有没有听啊 在第四章的时候架构篇

03:43.960 --> 03:47.400
啊 我们当时讲过 微信小程序他的架构

03:48.040 --> 03:49.720
他是什么呢 他是双线程

03:50.520 --> 03:54.920
对不对 他有一个app service 还有一个pg frame

03:55.480 --> 03:59.080
那这个app service 他就是运行什么 他什么就是运行json

03:59.960 --> 04:01.560
而这个pg frame

04:02.360 --> 04:06.920
他就是就是运行这个wxmail和wxss

04:07.480 --> 04:11.720
他相当于每个页面有各自的这个pg frame 也就是说各自的这个vivo view

04:12.600 --> 04:17.160
好 那接下来两个线程之间 他们需要进行一个这个通信

04:17.800 --> 04:23.720
对不对 那通信的话 他是需要有一定的这个成本消耗的 需要花费时间的

04:24.520 --> 04:31.160
面吧啊 我们这边来看一下app service和这个pg frame之间 他们通过什么呢 通过这个桥协议

04:32.520 --> 04:39.320
啊 通过桥协议 通信啊 这个你听过那个第四章双线程架构的话 你对这个应该是很熟悉的

04:39.720 --> 04:43.640
啊 当时我们把那个架构图 我们这边再把那个架构图再把拿过来吧

04:45.660 --> 04:47.820
那个架构图 看一下是在哪里

04:48.700 --> 04:53.820
呃 是是在那个 是在他的那个第三章 他的教程里面 第三章

04:55.850 --> 04:57.050
呃 第三章这边

04:58.330 --> 04:58.970
双线程

05:00.170 --> 05:03.050
对吧啊 当时的话是这个图 我们把这个图了再把它拿过来

05:04.730 --> 05:10.950
把这个图啊 再次把它拿过来啊 我们放到我们的笔记里面

05:13.620 --> 05:16.900
放到这边啊 说放一下 okay

05:17.540 --> 05:22.100
啊 他这边呢 就是通过这个桥协议 说白了就是通过什么 是不是通过这个微信客户端

05:22.500 --> 05:28.900
然后两个线程之间进行一个这个通信 对不对 他本质上的话 他是这样子的一个架构啊

05:29.460 --> 05:36.020
好 那这样的架构的话 他首先他的好处 好处的话 就是分开了这个业务主线程和显示界面

05:36.580 --> 05:40.020
啊 即便你这个业务主线程 非常烦吗

05:40.900 --> 05:46.740
也不会主设这个用户在pg frame上啊 就是你的这个试图程啊 就这个渲染层啊

05:47.140 --> 05:54.900
就也不会主设用户在这个渲染层上面的这个交互啊 我们当时的话 我们讲那个双线程模型的时候 我记得我还写了个例子

05:55.780 --> 05:58.020
对不对啊 就是那个移动的那个小球

05:58.500 --> 06:04.740
那接下来我们写了一段接识 这个接识的话 他是一段耗时的这个操作 专门就是干嘛呢 会去主设

06:05.300 --> 06:12.260
主设5秒钟啊 如果是在这个浏览器里面 因为浏览器它是单线程 那么你按那个按钮

06:13.220 --> 06:21.940
啊 也按那个按钮 执行那个事件 那个小球的移动是不是就停止了 对不对 然后5秒之后才会继续移动 但是这个小程序由于它是双线程

06:22.740 --> 06:25.540
是不是就不存在这个问题啊 对不对啊

06:26.340 --> 06:31.460
好 一个小程序的话 可以有多个这个pg frame啊 就这个vivo view啊 就这个东西

06:31.860 --> 06:39.540
ok 所以页面间的这个切换动画啊 比这个单页应用 它更加流畅一些啊 这个我们也是讲了的

06:40.740 --> 06:43.700
但是呢 这样的这个架构的话 他不是说没有缺点

06:44.340 --> 06:52.180
他的缺点是什么呢 缺点就是你在这个pg frame上面 就是你的宣传上面 你无法调用业务这个js

06:53.140 --> 06:58.020
然后你的这个跨线程通信成本很高啊 这个是一个非常重要的原因

06:58.820 --> 07:03.540
你跨线程 你毕竟是两个线程 两个线程的话 你这个成本是很高的

07:04.020 --> 07:08.180
说他这边不适合需要什么呢 频繁通信的这个场景

07:09.300 --> 07:15.220
ok 啊 说说我们的这个业务接式的话 也无法直接控制这个多么接点啊

07:15.700 --> 07:21.700
说这边的话 针对这么一个问题 所以微信团队他推出了这个wxs

07:22.500 --> 07:28.580
他的作用是什么呢 他的作用实际上就是让你能够在pg frame里面运行这个js

07:29.140 --> 07:32.580
说白了就是这个 ok 就以前的话你在这边

07:34.660 --> 07:40.740
你在这边啊 这边呢 是你的wxmail 对不对 你想在这个页面里面直接写js

07:41.300 --> 07:47.060
运行js 以前的话是办不到的 对不对 以前的话你的js是写在这个文件里面 然后接下来的话

07:47.620 --> 07:53.780
这边比如说绑实践啊绑到这里 看上去的话 这边是在调用它 实际上这这是两个线程

07:54.900 --> 08:01.060
对不对 你脑子里一定要清晰 这个是两个线程 他们两个实际上是经过什么 是不是 经过通信之后

08:01.540 --> 08:04.420
才能得到这个对应的这个结果 对不对

08:04.980 --> 08:11.300
好了 现在的话这个wxs他就是解决这个问题 他让你能够直接在这个微信

08:11.860 --> 08:16.740
啊 然后这个mm里面啊 就是wxmail里面 直接输写这个js

08:17.620 --> 08:21.780
啊 所以他官方说了这个和js不一样啊 但其实呢和js基本是差不多的

08:23.860 --> 08:24.500
我们来看一下

08:25.380 --> 08:32.100
呃wxs就是在pg frame中运行这个js 可以对view数据做一些变化

08:32.580 --> 08:37.940
啊 他对这个他对性能的贡献就只有这么一点 什么呢 就是他们是在同一个线程里面

08:38.420 --> 08:41.780
避免了什么呢 避免了跨线程通信的开销

08:42.820 --> 08:45.700
没有吧 主要是为了做这个事情啊

08:46.900 --> 08:52.260
好 然后接下来的话 这边我把整个这个官方的这个文档啊 他这边这个链接我放到这里了

08:52.740 --> 08:57.460
啊 然后刚才的话 实际上我已经带着大家快速的过了一遍啊 你会发现的话基本上就是

08:57.700 --> 09:04.740
虽然他官方强调的是和js是什么 是不同的语 对不对 有自己的语法啊 并不和这个js一致

09:05.140 --> 09:08.020
但是我们刚才看了一下 基本上就是什么 就是js

09:08.740 --> 09:13.460
对不对啊 其实这样子也好 为什么呢 这样子就没有太多的这个学习成本

09:14.100 --> 09:19.940
对不对 你一个新的东西应该让就是现有的开发者学习成本越低越好

09:20.420 --> 09:27.140
而不是越高越好 对吧 你这个东西哪怕推出来啊 这个东西再好 但是呢 你对于这个

09:27.780 --> 09:33.460
就当前的这个开发者来讲啊 学习成本如果比较高的话 你这东西是比较难推广的

09:34.420 --> 09:44.100
明白吧啊 你如果你这个东西的话 本身就是东西首先推出来比较好 那同时呢 又没有什么学习成本啊 那大家的话就比较乐意用你这个东西

09:45.460 --> 09:53.300
ok 说他这边呢 和这个js一致其实也是一个好处啊 也是个好处 就我们没有什么学习成本

09:54.340 --> 10:00.180
好 那我们接下来我们来具体来看一下啊 其他的话就不用带着看了 就

10:00.500 --> 10:02.500
刚才那个

10:04.500 --> 10:09.140
我刚才刚才开的那个呢 wxs呢

10:10.900 --> 10:17.300
在框架这边是吧 这里啊 好 然后其他的话就不用带着大家看了啊 其他的这个什么变量

10:17.700 --> 10:25.940
你下去你自己看一下啊 然后加这个什么注射 注射有什么好看的吧 对吧 好 然后加这边运算服 运算服也就和js里面是一样的

10:26.340 --> 10:34.260
对不对啊 然后加这边的语句也是就这么几个e4switch4w 都是大家比较熟悉的啊 然后数据类型

10:35.380 --> 10:39.220
这边这边也是大家比较熟悉的 这边有个数据类型判断

10:40.260 --> 10:46.820
数据类型判断这边可以使用constructor啊 这边给你举了一个实力 你可以用constructor来判断数据类型

10:47.380 --> 10:51.300
好 然后还有一个这个基础内库 基础内库的话就是js里面的那些

10:51.620 --> 10:57.300
怎么lumber呀 mess呀对吧 data呀就这些啊 我们主要看一下这个 看一下模块

10:58.660 --> 11:07.300
就他这边的话 他可以把这个你的wxs这个js啊 他这边是以一个一个模块的形式 我们来看一下啊

11:08.580 --> 11:19.620
wxs代码可以编写在什么呢 可以编写在这个wxmail中的这个wxs标签内 也就说我比如说我现在我这边

11:20.340 --> 11:26.900
我这边 嗯 这边的话我这里这里的话我就可以啊写个标签wxs

11:30.140 --> 11:37.580
对吧 写个标签啊 在这个标签里面我就可以写什么 是不是写我的这个js啊 对不对 比如说我这边哇一个i等于一个e

11:38.140 --> 11:39.100
然后console

11:40.620 --> 11:41.100
console

11:43.020 --> 11:45.340
console.nog i

11:46.380 --> 11:47.260
对吧 保存一下

11:48.220 --> 11:52.440
嗯 这边爆错了 我们看一下他爆什么错

11:53.480 --> 11:54.120
model

11:54.840 --> 11:55.640
expect

11:56.600 --> 11:56.920
in

11:58.760 --> 12:04.060
呃 我看一下啊 我们去他的官方文档看一下

12:04.780 --> 12:12.860
官方文档的话 这边啊wxs标签 我们看一下啊 他这边的话是有一个model 看了没有 这个是必填之段

12:13.340 --> 12:19.340
必填之段啊 你看他下面的话有个实例 比如这边model等于full 我们把这个把这个给他加上啊

12:20.220 --> 12:20.780
好 这边

12:21.980 --> 12:24.460
给他这边model 他是个模块

12:25.260 --> 12:28.380
好 那保存啊 大家这边重新编一下

12:29.500 --> 12:35.180
ok 这边是不是出来了 打印出这个e 对吧 应该是这个啊 看一下

12:35.900 --> 12:44.700
给个100呢 保存啊 ok了 对不对 打出100啊 首先的话你可以这样子来用 就这边的话就是直接通过这个标签的形式

12:45.180 --> 12:50.940
啊 这个的话就类似于什么 类似于你以前写网页的时候 是不是插入一个这个script标签

12:51.660 --> 12:54.540
对不对 在script标签里面 然后接下来写你的这个js

12:55.500 --> 13:00.140
啊 但实际上更多的时候 我们是什么 更多的时候 实际上是单独建一个文件

13:01.580 --> 13:07.900
单独建一个文件啊 点wxs这个文件 好 然后接下来的话 这边写你的这个

13:08.620 --> 13:13.980
呃 就是业务代码 写了之后 然后加通过model.expose把它导出出去

13:14.780 --> 13:19.500
看了没有 他这个实际上就有点类似于什么 所以有点类似于那个load的那个模块

13:20.300 --> 13:24.060
对不对 你要load里面 我们导出一个模块 是不是通过model.expose啊

13:24.780 --> 13:29.180
对不对 所以他这边的话 就是类似于那个load的啊 就是用的是commod.s規范

13:30.140 --> 13:31.500
commod.s規范 ok

13:32.460 --> 13:38.140
好 然后我们来看个实际的例子啊 这个就不说了 我们来看个实际的例子 比如说现在

13:38.700 --> 13:43.980
啊 比如说我现在的话有这么一个这个需求 什么需求呢 就我这边这边的话是不是一看就是那个就是

13:45.180 --> 13:45.980
绘画的那种

13:46.860 --> 13:52.780
对不对啊 就是就是你的那个那个信息啊 就类似于那种微信啊 微信的那个消息那种啊

13:52.780 --> 13:56.460
好 然后接下来我有个需求 什么需求呢 就这边的话 比如说别人

