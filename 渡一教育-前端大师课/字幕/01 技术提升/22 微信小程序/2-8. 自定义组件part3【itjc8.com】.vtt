WEBVTT

00:00.000 --> 00:02.300
OK 咱们继续

00:02.560 --> 00:05.620
上节课的话 咱们讲到了这个Behaviours

00:05.880 --> 00:09.980
这个Behaviours的话 我说了 它就类似于这个view里面的这个mix in

00:10.240 --> 00:13.820
对吧 用来抽取这个公共的这个逻辑模块

00:14.600 --> 00:16.640
好 这节课的话 咱们把这四个

00:17.160 --> 00:20.480
这四个看一下 分别是这个组建间关系

00:20.740 --> 00:25.340
数据监听器 然后存数据之段 还有最后一个这个抽象节点

00:25.600 --> 00:29.960
把这四个看了 这四个看了之后 整个自定义组建也就差不多了

00:30.200 --> 00:35.080
OK 至于就是后面的章节的话 你有兴趣的话 你自己就是可以看一下

00:35.320 --> 00:40.200
那后面我们第五章 如果讲案例会就是有用到的话 我们回头再来说

00:40.960 --> 00:46.600
那这边的话 我们介绍这么多的话 你做一个这个自定义组建 完全就够用了

00:47.360 --> 00:49.400
OK 好 那我们这边来看

00:49.660 --> 00:54.280
首先的话是组建间的关系 我们这边还是把那个笔记拿过来

00:54.540 --> 00:55.040
这边

00:56.000 --> 00:56.720
组建

00:57.960 --> 01:00.400
组建间关系

01:01.480 --> 01:02.560
好 我们来看一下这个是什么

01:03.320 --> 01:09.000
这个的话 它这边说 定义和使用组建间关系 有些时候的话 你会有这样的组建

01:09.400 --> 01:12.920
这个的话是一个自定义组建 这个也是一个自定义组建

01:13.360 --> 01:18.160
OK 这两个都是自定义组建 它们有相互间的关系

01:18.680 --> 01:21.160
相互间通信的话往往比较复杂

01:21.680 --> 01:27.880
那这个时候的话 你可以加入什么呢 加入这个relations定义段 可以解决这样的问题

01:28.560 --> 01:31.320
也就是说 这边的话 你可以使用什么呢 使用这个relations

01:34.500 --> 01:39.260
在使用这个自定义组建的时候

01:40.740 --> 01:45.900
啊 然后可以使用什么呢 使用relations这个relations

01:46.540 --> 01:48.940
自断来指定

01:50.620 --> 01:56.100
来指定自定义组建之间的这个关系

01:57.060 --> 02:06.740
那指定了这个关系有什么好处呢 指定了关系之后的话 你回头的话就可以获取到 就是对应组建的一个实力

02:07.740 --> 02:14.020
指定了关系之后就可以获取到

02:15.540 --> 02:18.820
对应组建的实力

02:20.100 --> 02:22.580
OK 好 来我们这边继续往后面看啊

02:23.260 --> 02:29.260
好 他这边呢 举了个例子 举的是一个custom URL 你看他这边呢 是不是有一个relations自断

02:29.780 --> 02:35.620
对不对 那既然他这边指定的是另外一个例 例的话是什么呢 例的话是这个俏的

02:36.100 --> 02:43.300
就这个例 相对于这个 URL来讲 他是这个俏的好 然后接下来的话 那这边就会有这个三 三个

02:43.900 --> 02:49.180
生命周期勾字函数啊 然后这三个生命周期勾字函数的话 你看一下

02:50.300 --> 02:56.700
一个是在attach的生命周期之后啊 一个是在move的生命周期之后 一个是detach的

02:57.260 --> 03:02.260
这个生命周期啊 这个生命周期之后 OK 那我们这边我们就来看这个link的

03:02.740 --> 03:05.220
link的是什么呢 每次有这个例

03:05.620 --> 03:13.780
被插入的时候 他这边就会执行这个 执行这个 然后接下来你通过这个target 你就可以拿到什么呢 拿到这个例

03:14.420 --> 03:20.140
他的一个这个实例 OK 好 那我们来写个例子啊 写个例子给大家演示一下 大家就知道了

03:21.420 --> 03:25.780
啊 这个是我们上去可讲的 是吧 我回到这边 这个complete里面

03:26.620 --> 03:29.700
好 我们这边呢 新建两个 新建一个

03:30.300 --> 03:37.620
ur 啊 因为我们这边没有ur 吗 对吧 我们来自己来实现一个ur 啊 这边呢 是ur

03:39.540 --> 03:47.980
哦 这边怎么回事 啊 这边的话 已被代码忽略无法引用啊 这个这个的话 你这边啊 你看一下他这里

03:48.540 --> 03:50.460
他这里的话 给出了这个解决方案啊

03:51.580 --> 03:55.820
就官方的这个开放社区这边 OK 他这边的话 就是如果你某个

03:56.260 --> 04:02.340
ges文件啊 被静态分析显示是无依赖啊 这边他会爆错 爆错的话 你这边就是

04:03.300 --> 04:14.820
可以什么呢 可以关闭啊 关闭过滤这个无依赖文件 就是在这个project.config.json啊 这个settings里面啊 把这两项 把它添加上

04:16.020 --> 04:22.580
好 回到我们这边 你找到你的这个project.config.json 把这个加上就可以了

04:23.980 --> 04:24.940
好 加到这边后面

04:26.820 --> 04:29.140
ok啊 首先这个

04:30.260 --> 04:30.700
然后

04:32.260 --> 04:34.900
这个 ok 加上之后 要重新编一下

04:36.220 --> 04:41.420
所以搞定了 对吧 搞定了 然后我们之前是在哪打印的 我们把这个关掉啊

04:42.340 --> 04:49.420
我们把这个关掉 我们这个之前是上级课写的 上级课我们是在这边好像是写那个生命周期的时候 是吧

04:50.020 --> 04:53.780
哦 这里 这里 把他 把他干掉啊 这个先不要

04:54.540 --> 04:57.020
然后接下来这边 还有一个是behavior

04:58.260 --> 05:00.820
behavior 是这边 我们也把他关掉

05:02.700 --> 05:04.580
ok 好 这边 重新编一下

05:05.540 --> 05:12.340
ok 好了 好了 之后 然后接下来回到我们这边 我们这边呢 刚才创建了一个ur

05:12.940 --> 05:17.260
ur 里面是用来干嘛的 ur 里面是不是用来这个放这个力的

05:17.940 --> 05:23.300
对吧 啊 说说我们这边呢 我们就写一个view view 里面一个什么的view 里面一个snort

05:25.500 --> 05:32.220
view 里面一个插槽啊 这个插槽的话就是用来放这个力元素的啊 我这边我可以给这个

05:32.820 --> 05:34.060
这边 我们自己添加一个

05:35.260 --> 05:37.220
添加一个 比如这是一个ur元素

05:38.860 --> 05:41.100
这是一个ur

05:41.900 --> 05:52.300
元素啊 组件嘛 这是一个ur组件啊 然后接下来 这边呢 是这个snort 啊 这边 我们再给他添加一个力 一个吧 添加一个这个样式

05:53.220 --> 05:55.540
啊 这边呢 是ur container

05:57.220 --> 06:01.700
啊 ur container 然后加我们这边的话 给他添加一个边框

06:04.510 --> 06:05.590
这边呢 给个border

06:06.590 --> 06:10.190
border e rpx solid 警号 ccc

06:10.990 --> 06:15.710
ok 好 这是关于这个ur 好 然后接下来 我们这边再来创建一个

06:17.230 --> 06:23.550
再来创建一个啊 再来个文件加力啊 力元素啊 这边的话 新建

06:24.750 --> 06:24.910
力

06:26.510 --> 06:32.190
ok 好 力的话 然后接下来 我们在写的时候 写的时候 我们怎么写呢 写的时候 我们是这样子来写的

06:33.070 --> 06:33.910
啊 就和那个

06:34.870 --> 06:41.270
呃 html 里面是一样的 我们到时候就这样子来写ur 然后接下来这里面有这个力

06:43.510 --> 06:45.870
对吧 啊 我这边来几个 比较苹果

06:47.190 --> 06:51.590
苹果 香蕉 啊 然后西瓜

06:52.950 --> 06:58.870
对吧 啊 但是你直接用的话 你是没办法用的 我们说了这个 html 的标签是不生效的

06:59.150 --> 07:02.510
说我们这边是不是自定义了这个组件 对吧 我们自己来实现一套

07:03.310 --> 07:09.790
啊 那接下来这个力 力里面这边是不是也是写入这个 就是也需要写一个这个插槽

07:10.630 --> 07:16.310
对不对 回头啊 这边会插入这个元素啊 说说我们来到这边啊 这边的话 我们

07:17.390 --> 07:20.110
view 然后现在这边的话 给一个class

07:21.590 --> 07:25.550
力啊 大家这边也是snot 因为要插入什么内容 我不知道

07:26.430 --> 07:30.550
对吧啊 写一个这个力啊 然后接下来的话 这边这边的话 然后

07:31.430 --> 07:36.390
力的话 一般我们Ul他是无需列表 无需列表 我们需要给他一些样式

07:37.030 --> 07:42.830
啊 这个样式一会再来写吧 一会再来写 好 我们这边的话 现在就使用啊 到这边来

07:43.390 --> 07:52.310
接上这边来 我们这边把这两个组件 我把它加进去 把它加进去 一个是Ul

07:53.590 --> 07:55.750
啊 大家这边是Ul

07:57.310 --> 07:59.830
Ul 对吧 啊 这边是力

08:00.790 --> 08:01.950
然后力

08:03.550 --> 08:06.430
力 ok 好 那我们这边编译保存一下

08:08.070 --> 08:16.630
出来没有 出来啦 对了 苹果西瓜 苹果香蕉西瓜 对了 这个是哪里的 这个是你这个Ul资深的

08:18.070 --> 08:21.350
Ul资深的 你这个你也可以把它去掉啊 你这边把它注射掉

08:22.070 --> 08:26.550
ok 是没了 对吧 那你甚至你可以把这个 把这个这个样式

08:27.150 --> 08:32.590
你把它注射掉 他先是不是就这样子 这样子然后加你再给这个力 再给他添加这个样式

08:33.190 --> 08:37.790
啊 这个样子我直接拿过来吧 啊 这样子大家都会写 没必要浪费时间

08:38.390 --> 08:44.510
好 直接拿过来 保存一下 你看 是不是就和这个浏览器里面的一个这个无需列表一模一样

08:45.270 --> 08:47.750
对不对 这边呢是我每一项这个力啊

08:48.550 --> 08:56.150
好 我这边呢还是把这些加上啊 把这个border加上 然后我这个Ul 我这边资深有个标题 给他加上

08:57.190 --> 09:04.750
ok啊 这个稍微这个 为了让他特别一点 我们这边这样子吧 给他一个title啊 叫做Ultitle

09:06.350 --> 09:09.830
哎呦 突然想起我们那个H2里面是不是有一个这个代title的

09:10.630 --> 09:16.150
好像是那个dl 是吧 dl dl里面分为这个啊 这个dt和dd

09:16.710 --> 09:18.350
对吧 有点和这个有点类似

09:19.750 --> 09:25.430
好 我们这边给这个title 稍微设置一下 封的帅子 给他改小一点吧

09:27.150 --> 09:33.670
改小一点 然后这个颜色 颜色 警号 然后 警号多少 比较

09:35.910 --> 09:38.590
啊 这个这个也太小了吧 嗯 30

09:39.950 --> 09:42.670
30也比较小 34吧 ok 差不多

09:43.670 --> 09:49.150
好 那现在的话 我们这边就实现了一个UlUl里面是什么呢 是这个li

09:49.750 --> 09:57.590
ok 我们这边呢 是两个自定义组件 对吧 两个自定义组件 好 这两个自定义组件之间它是不是有关系的

09:58.230 --> 09:58.870
你看一下这里

10:00.030 --> 10:04.590
这边 我Ul和dd 是不是有关系 什么关系 是不是父子关系

10:05.350 --> 10:11.510
对不对 父子关系 而父子关系的话 然后接下来的话 我这边想要两个这个元素之间

10:11.990 --> 10:13.230
进行一个这个通信

10:14.030 --> 10:19.110
那你这个直接通信的话是比较麻烦的 说他这边给你提供了这么一种方式

10:20.070 --> 10:23.350
在这边 提供一种方式叫做relations

10:24.510 --> 10:30.670
relations 而relations的话 你注意 这边的话 他是需要你这个两个都得写

10:31.110 --> 10:39.430
看到没有 必须在两个组件定义中都加入relations制断 否则不会生效 笔记记一笔

10:40.430 --> 10:41.230
在使用

10:43.230 --> 10:47.590
在使用这个relations

10:48.950 --> 10:55.910
relations的时候 必须就是两个关联的组件

10:56.870 --> 11:00.830
关联的组件 都要加入使之断

11:02.390 --> 11:05.350
ok 这边要注意 好 回到我们这边

11:06.350 --> 11:13.510
这边都要加入那来呗 那我们首先在UAL这边 UAL这边我们把这个其他这些乱七八糟的先给他干掉

11:13.990 --> 11:19.590
回头要用到的时候再写 好 我们这边就加一个什么呢 加一个relations

11:20.510 --> 11:25.110
relations对应是个对象 对象里面有什么 首先这边有一个

11:26.990 --> 11:27.670
在这边

11:29.550 --> 11:34.830
UAL 这边是个对象 对象的话 首先就是你这个位置在哪里

11:35.750 --> 11:37.710
对吧 首先我们这边的对应

11:38.990 --> 11:46.550
首先 这里一个制服串 制服串的话 然后加这边的你对应的这个位置 我们这边是什么 我们这边是上一级

11:47.310 --> 11:49.470
下面的这个粒 下面的这个粒

11:51.390 --> 11:56.470
对不对 对应的是一个对象 对象里面 然后接下来这个type

11:57.430 --> 11:59.270
type的话是什么呢 就是这个粒

11:59.830 --> 12:07.870
那你关联的这个粒 对于你来讲是什么样的关系 那这个粒对于我们这个UAL来讲是什么 是不是这个chow的

12:09.270 --> 12:12.350
对不对啊 这边记录一下啊 关联

12:14.110 --> 12:19.430
关联的这个粒啊 这个组件

12:21.070 --> 12:25.550
关联的粒这个组件啊 这个制定义组件 制定义组件

12:26.350 --> 12:29.510
和你是什么关系

12:30.510 --> 12:38.310
什么关系啊 说他是我的chow的 对不对 好 首先先把这个指名好 指名完了之后 然后接下来这边有一个linked

12:38.910 --> 12:45.550
这个是一个生命周期 勾字函数 好 然后接下来在这边的话 他就会有一个什么呢 有一个target

12:46.870 --> 12:53.350
那这个linked在什么时候出发 过来看文档 什么时候出发 是没有一个这个粒被插入的时候

12:54.070 --> 12:55.430
对不对 每当

12:57.550 --> 13:00.470
每当有一个这个关联的

13:01.390 --> 13:08.030
关联的这个粒 这个制定义组件被插入到

13:08.750 --> 13:10.470
UAL的时候

13:11.510 --> 13:17.070
它会出发 并且它是在什么之后呢 它这边写的有 它是在该节点的这个attached

13:17.630 --> 13:23.750
因为我们这个制定义组件它是不是有自己的生命周期啊 对不对 这个我们上去是上去可以讲的吧 对 上去可以讲的

13:24.070 --> 13:29.070
对 它会有自己的生命周期啊 那这边它是在什么呢 是在attached的生命周期之后

13:29.710 --> 13:37.070
ok 它会出发 出发的话 它这边有一个什么呢 有一个这个target 这target是什么target就是你这个

13:37.710 --> 13:43.990
就是你这个元素 就这个粒 这个制定义组件 它的这个实力啊 来我们这边来打印一下嘛

13:44.670 --> 13:46.150
console.nog

13:47.670 --> 13:48.230
target

13:50.620 --> 13:53.300
ok 这边我们写个标识

13:54.820 --> 14:00.580
这边是我们是在哪里 是UAL 对不对 UAL 然后下面的这个target

14:01.780 --> 14:07.260
ok 写个标识 好 除了这个以外 然后你粒那边是不是也得写 我们来到粒这边

14:08.060 --> 14:11.220
粒这边的话是一样的 把这些先把它干掉

14:12.500 --> 14:17.780
好 干掉之后 然后接下来我们这边 你直接复制过来就可以了 复制过来是不是改一下就可以了

14:18.580 --> 14:20.220
对吧 我们直接复制过来

14:21.260 --> 14:25.060
拿过来 拿过来 然后接下来和他关联的是什么 是不是UAL

14:26.260 --> 14:29.620
对不对 UAL 那UAL啊 关联了这个UAL

14:30.500 --> 14:36.260
和我和我这个组件是什么关系 那UAL对于我来讲是什么 是不是Purrent

14:37.940 --> 14:39.020
对不对 Purrent

14:39.780 --> 14:44.780
ok 那有同学就有疑问了 那这个这个字段child和Purrent这个是

14:45.500 --> 14:53.140
有哪些字 是不是我随便写一个 不是 人家这边肯定给你写的有对不对 这边拆都拆了到 他肯定是规定了的

14:54.980 --> 15:03.180
再我找一下啊 我记得是有那么几个 这里看到没有 有Purrent有这个child 还有这个

15:03.740 --> 15:07.020
这个是什么用 这个你要查一下 我看他也没有解释

15:08.300 --> 15:10.700
他好像也没有解释 这边查一下呢

15:11.900 --> 15:14.060
一般常用的就是那个Purrent和child

15:15.020 --> 15:15.900
看看他这个是什么

15:17.500 --> 15:24.380
啊 这个是祖先 对不对啊 祖先元素啊 这些东西你查一下就知道了啊 即便他这个官网

15:25.260 --> 15:26.180
他没有这个说明

15:27.380 --> 15:35.100
啊 这个是祖先这个呢 啊 这是后代 对不对啊 后代元素 ok啊 稍微一查就知道了 ok

15:35.940 --> 15:37.460
好 然后接下来回到我们这边

15:38.460 --> 15:42.220
回到我们这边 好 然后在这边呢 也是啊 你这个UAR

15:42.820 --> 15:48.460
UAR 这边被这个插入的时候啊 这边有个target啊 我们这边就是AI

15:49.460 --> 15:57.740
对不对 当前的话这个粒 最后我们这边是在这个粒里面 ok 这粒里面啊粒 然后在这边他传入的这个target

15:58.260 --> 16:00.460
ok 好 那我们这边保存

16:02.860 --> 16:05.060
好 保存之后这边打 我们重新编一下

16:06.060 --> 16:11.860
ok 啊 这边UAR粒 UAR粒 UAR粒 为什么 因为我们这边是不是有三个

16:12.860 --> 16:15.460
对不对 有三个 我们这样 这样子啊 为了

16:17.020 --> 16:22.660
为了看的清楚 我们把这两个先注视掉 好吧 我们就先来一个苹果啊 走

16:24.100 --> 16:29.020
哎 这边 再来啊 他有些时候会抱错 好这边

16:30.020 --> 16:35.620
首先的话 打印出来的是UAR UAR的话 这边是什么 UAR是在这边

16:36.740 --> 16:43.300
对不对啊 UAR UAR target 大家这边拿到这边 打印出来的一个这个对象 这个对象是什么

16:43.700 --> 16:49.940
这个对象就是你这个 这个粒啊 这个自定义组建的一个实力对象

16:50.700 --> 16:56.180
ok 然后回头的话 这边打印出了这个粒 target 这个的话是在这边

16:56.740 --> 17:00.620
这个是什么 这个的话就是你的那个UAR UAR那个实力对象

17:01.060 --> 17:06.420
ok 那我这个怎么证明呢 我们看一下 他首先他搞这么一套是为了啥呀

17:07.620 --> 17:12.660
你想想 他搞这么一套是为了做什么 回到他的这个文档

17:13.420 --> 17:18.820
他主要是为了什么 是不是 你之前的话 你这个相互之间的这个通信

17:19.500 --> 17:23.860
比较复杂 对不对 我加入了这个组建间关系之后

17:24.340 --> 17:29.820
让我这两个有关系的自定义组建 他通信就比较方便了

17:31.060 --> 17:39.540
那我这边的话 我可以很方便的拿到另外一个和我有关系的这个组建的一些数据啊 之类的啊 这边我记录一下啊

17:41.460 --> 17:44.340
组建 组建间

17:46.620 --> 17:48.620
设定了这个relations

17:51.470 --> 17:51.870
使用

17:52.870 --> 18:06.310
使用relations设定了相互关系后 相互关系后 最大的好处在于什么呢 能够拿到

18:07.510 --> 18:14.670
就是能够和关联的组建 关联的组建进行通信

18:15.630 --> 18:20.110
那么如何通信的呢 如何通信的啊 主要

18:21.270 --> 18:31.430
啊 这边写错了啊 如何通信的啊 主要就是拿到关联组建的什么 是不是实力对象

18:32.710 --> 18:34.470
对不对啊 实力对象

18:35.510 --> 18:39.790
实力对象一拿到什么也就拿到了 是不是data

18:40.670 --> 18:50.150
这些数据也就拿到了 是不是这个道理啊 对不对啊 来我这边的话 我怎么证明一下呢 回到我们的代码

18:52.110 --> 18:54.950
比如说这边 这边的话 我在这个UAL

18:56.230 --> 19:00.310
UAL这边 UAL这边的话 我这边我加入一个data

19:03.420 --> 19:09.500
加入个data 啊data里面的话 然后加这边有一个name 啊 比如说我是UAL

19:10.500 --> 19:18.540
对吧 这个数据是什么 这个数据是在我这个UAL这个制定组建里面的 对不对啊 回头的话 我这边 我在这个例里面

19:19.340 --> 19:21.140
在这边 这边的话 我们来看一下

19:22.100 --> 19:30.780
console.log 我拿到这个target target是谁 target我刚说了 是不是就是拿到和他关联了这个UAL 对不对 UAL里面

19:31.540 --> 19:35.100
我们这边把它展开 里面的话就有什么 是不是就有data

19:36.100 --> 19:42.020
对不对 就data啊 所以我们这边的点data 然后点我们刚才是什么

19:43.100 --> 19:46.780
是name 对不对啊 我们这边看一下能不能拿得到

19:48.540 --> 19:49.740
啊 我们这边走

19:51.140 --> 19:53.060
拿到没有 是不是就拿到了

19:54.140 --> 19:59.580
对不对 就拿到了啊 所以他这边的话 就是通过添加这样的这种关联关系

20:00.100 --> 20:05.300
那我回头的话 我可以拿到什么呢 可以拿到和我关联了这个组建的一些这个信息

20:06.060 --> 20:08.380
啊 你看这边 首先的话就是data这个data

20:09.300 --> 20:13.860
首当其从就是这个data 除了data还有什么呢 看一下还有些什么

20:14.580 --> 20:17.780
一般来讲其实就是这个data 对不对 就是拿这个数据

20:18.820 --> 20:21.260
啊 然后接下来还有什么id啊之类的

20:22.180 --> 20:24.020
router 把这边还有个这个

20:24.940 --> 20:29.540
trigger event 这trigger event 来干嘛 这trigger event 我是不是就可以了

20:29.940 --> 20:34.300
触发和我关联的这个组建的一些这个事件啊

20:35.140 --> 20:37.380
对不对 好 来我们这边我们也来看一个例子嘛

20:39.180 --> 20:44.820
啊 比如说这边呢 我们给这个例 给这个例 然后接下来我们这边绑定一个自定义事件

20:45.780 --> 20:48.380
绑定一个叫做test

20:49.260 --> 20:51.700
ok 对应的这边有个这个test

20:52.340 --> 20:56.820
好 然后接下来的话 这边这边这个例啊 再加我们这边来写这个方法

20:57.700 --> 21:02.020
这边的话在message里面 啊 书写这个test

21:03.860 --> 21:07.140
啊 这个test的方法 再加这边cancel.log

21:08.700 --> 21:12.660
啊 这边这边的话就是输出啊 然后触发了

21:14.100 --> 21:15.060
触发了

21:16.540 --> 21:20.420
触发了这个例 然后例的这个自定义

21:21.620 --> 21:23.700
自定义事件

21:24.420 --> 21:27.140
事件这个test

21:28.540 --> 21:35.540
对吧 我们这边绑定的是这个自定义事件啊 test啊对应的事件处理函数 test 大家这边的话写到这里了

21:36.020 --> 21:37.740
好 然后回头的话 我们在这边

21:38.820 --> 21:45.740
在ur 这边啊 ur 这边的话我就可以去触发他的啊 我这边呢就可以这边target

21:47.300 --> 21:49.540
对吧 target 然后点

21:50.380 --> 21:50.820
trigger

21:53.770 --> 21:54.850
trigger event

21:55.810 --> 21:57.970
去触发哪个 是不是触发test

21:59.370 --> 22:06.740
对吧 好 来 我们这边编一下 编一下之后 这边好像没有触发

22:07.940 --> 22:14.300
让我想一想啊 这边的话他没有触发成功 看到没有 这边这个target target是

22:15.860 --> 22:21.180
target 这边是ur 应该是能够拿到例 我看一下呢

22:22.620 --> 22:25.300
我这边给这个例 加入一个数据

22:26.660 --> 22:27.220
比如data

22:28.980 --> 22:29.940
data 这边name

22:31.620 --> 22:32.100
我是

22:33.180 --> 22:37.780
立元 立元素 好 然后接下来在这个ur 这边

22:38.740 --> 22:40.060
打印一下target

22:41.300 --> 22:43.220
点data 点name

22:45.300 --> 22:45.620
编译

22:51.220 --> 22:58.740
啊 这边出来了 是吧 我是立元素 但这个事件好像没有触发 事件我看一下啊

22:59.540 --> 23:05.220
事件啊 事件我们这边好像没有绑定对 事件的话应该在哪里呢 应该是在这边

23:05.860 --> 23:11.380
这边你使用这个例的时候啊 我们这边给他绑定 这边绑的test

23:12.340 --> 23:13.140
等于一个

23:14.740 --> 23:20.900
test 是不是在这里 对不对绑定一个啊 绑定一个之后呢 接下来我们这边对应的这个test

23:21.940 --> 23:24.820
对应的这个test啊 应该是写到这边

23:27.070 --> 23:27.950
不应该是在这里面

23:29.070 --> 23:29.670
应该是在哪里

23:30.510 --> 23:35.230
你这边的话 绑到了一个这个test test 然后接下来的话写到这边

23:37.390 --> 23:40.510
这边在这里 对不对 好 让一下这边编一下

23:42.820 --> 23:46.660
啊 是不是出发了 对不对 触发了立的这个制定事件test

23:47.300 --> 23:51.460
可了没有啊 所以说我这边的话可以通过什么 通可以通过这个trigger event

23:52.100 --> 23:57.540
去获取了 去这个触发这个事件啊 他这边还介绍了什么呢 还介绍了就是

23:58.100 --> 23:59.140
除了这几个以外

23:59.780 --> 24:02.180
他这边还介绍了 我记得有一个那个叫做

24:03.460 --> 24:06.900
呃 到哪里去了 就是那个get

24:07.940 --> 24:10.820
啊 就这个啊 get relation nodes

24:11.140 --> 24:16.900
这个就是什么呢 这个就是获取所有这个所有的这个啊 关联的这个节点啊 这个应该好理解吧

24:17.700 --> 24:18.980
啊 我这边给大家看一下

24:20.900 --> 24:23.140
就这边我们来看这边这个uer

24:23.860 --> 24:27.460
uer 然后接下来我们这边来获取所有的

24:30.060 --> 24:32.060
啊 我们这边 这边的话 我们就是啊

24:32.940 --> 24:37.660
const一个nodes 等于一个什么呢 等于一个this点get

24:38.380 --> 24:41.100
然后relation relation nodes

24:42.780 --> 24:44.780
然后获取什么呢 这个立

24:47.170 --> 24:50.850
对不对啊 我现在的话是在uer uer的话他将我获取

24:50.850 --> 24:55.490
就是和我所有关联的这个力 好获取了之后再加我们这边

24:55.490 --> 24:59.170
我把它打印出来一下 console.log

25:01.090 --> 25:07.120
nodes 啊 这边nodes 啊 这边的话编一下

25:09.580 --> 25:15.580
这边是不是拿到了 对不对 他是个数组啊 是个数组 比如说我现在的话我在这边多来几个 我把这几个打开

25:16.620 --> 25:18.300
好 让大家这边重新编一下

25:19.420 --> 25:26.380
这个log 你看这边是不是拿到了就所有的对不对 就是你下面所有的这个力的这个实力对象啊 所有的

25:27.260 --> 25:33.740
ok 啊 这就是关于这个组件之间的关系啊 你记住吗 核心其实就是什么

25:33.980 --> 25:39.660
核心就是我和这两个自定义组件进行关这个关联了之后啊 我可以

25:40.380 --> 25:48.140
更加方便的获取到另外一个这个组件 就和我关联了这个组件啊 和我关联了这个组件获取了他的这个实力对象

25:48.780 --> 25:52.380
啊 获取到这个实力对象之后呢 接下来我就可以拿他的数据啊之类的

25:52.860 --> 25:53.580
就这个意思

25:54.220 --> 25:55.180
明白没啊

25:57.180 --> 25:57.980
啊 这是这个

25:58.780 --> 26:04.060
好 那下一个 下一个叫做数据监听啊 这个的话也很简单

26:04.620 --> 26:10.060
这个也很简单 这个就是什么 这个大家学过这个view的话 这个就和什么 就和watch是一样的

26:10.780 --> 26:13.180
ok 我们这边在笔记边记一下

26:20.500 --> 26:21.860
我们把这边记一下啊

26:24.590 --> 26:31.870
ok 这个的话是可以用于监听响应任何属性啊 数据制断的这个变化

26:32.350 --> 26:34.270
从2.6.1开始支持的

26:34.830 --> 26:35.710
啊 这个的话

26:37.070 --> 26:43.870
这个实际上就和什么呢 就和view里面的这个watch

26:44.910 --> 26:46.270
是类似的

26:47.390 --> 26:50.750
好 来我们这边还是写个例子啊 写个例子你就明白了

26:51.790 --> 26:58.430
回到这边啊 这边我们新创建一个组件吧 我们这边item 我们这边创建一个item2吧

26:59.710 --> 27:00.830
item2

27:02.930 --> 27:05.730
ok 好 然后加这边的话新建

27:06.370 --> 27:09.170
组件 扛item2

27:10.690 --> 27:14.770
ok 好 在这边 这边的话首先先把这个item

27:16.210 --> 27:18.610
item2 先把它加上去

27:20.860 --> 27:23.100
好 到到到到哪里 到

27:24.140 --> 27:26.460
配级index 下面的这边

27:27.260 --> 27:29.980
啊 这边对了 好 把它加上去

27:32.830 --> 27:35.390
这边是item2

27:36.830 --> 27:37.630
好 item2

27:40.460 --> 27:42.860
好 接下来我们在这边 我们来使用一下

27:44.540 --> 27:45.500
item2

27:48.140 --> 27:48.860
好 保存

27:50.460 --> 27:53.580
好 出来了 对不对 好 然后接下来在item2里面

27:54.140 --> 27:57.100
item2里面我们要演示什么呢啊 这边item2

27:57.660 --> 27:58.300
演示

28:00.620 --> 28:01.180
演示

28:01.660 --> 28:08.620
它就什么名字来着 数据监听器啊 演示数据监听器

28:09.100 --> 28:10.300
ok 这个

28:13.230 --> 28:14.590
稍等啊 把格式调一下

28:16.030 --> 28:17.070
啊 这边这个view

28:17.710 --> 28:19.150
啊 它现在默认它会给我

28:20.030 --> 28:24.110
这个更新了啊 它默认会会就是给我那个弄成两个

28:24.110 --> 28:24.990
就是分行的

28:25.870 --> 28:26.270
这个

28:27.630 --> 28:31.710
这个就和什么呢 就和vue中的

28:32.670 --> 28:33.150
watch

28:34.110 --> 28:34.430
是

28:35.310 --> 28:35.710
一样的

28:36.510 --> 28:39.710
ok 好 来我们来写个例子 写个例子你就懂了

28:40.270 --> 28:41.310
把这些先干掉

28:42.830 --> 28:44.110
我们越简单越好

28:44.990 --> 28:46.830
对吧 方法 方法以后会用的

28:47.790 --> 28:50.190
好 然后接下来这边 这边呢 我们有一个a

28:51.950 --> 28:52.430
有一个a

28:52.990 --> 28:55.390
a对应的值是多少呢 a对应的值是1

28:56.990 --> 28:58.350
啊 接下来有一个b

28:58.910 --> 29:00.590
b对应的值也是1

29:01.070 --> 29:03.630
好 然后加这边有个sum对应的值

29:03.630 --> 29:05.950
我们这边比如说1加1等于一个2

29:06.830 --> 29:09.550
ok 好 然后接下来的话在这里

29:10.910 --> 29:12.270
这里 这里这个view

29:14.030 --> 29:16.830
就这样子嘛 好 这边 这边的话我们就写什么呢

29:16.830 --> 29:17.950
我们这边就写a

29:19.710 --> 29:22.270
这边a加上什么

29:22.910 --> 29:23.950
加上b

29:24.510 --> 29:25.230
等于什么

29:25.790 --> 29:27.230
等于一个sum

29:28.030 --> 29:28.590
ok

29:28.590 --> 29:29.550
好 我们这边来看一下

29:31.150 --> 29:33.310
这里 是不是1加1等于2

29:33.950 --> 29:37.310
对不对 好 然后接下来在下面我们搞两个按钮

29:37.310 --> 29:38.110
barton

29:38.110 --> 29:39.710
这个是什么呢 这个是a加加

29:40.670 --> 29:43.310
好 这个这个是什么呢 这个是b 比如说b减减

29:44.270 --> 29:47.550
好吧 好 我们这边分别给他绑定这个事件

29:47.550 --> 29:50.350
比如我们这边绑的type等于

29:50.910 --> 29:55.630
好 这个的话就叫做比如说type handle1

29:56.270 --> 29:57.710
这个叫做type handle2

29:59.550 --> 30:00.190
type handle2

30:00.670 --> 30:02.270
好 来到这边我们来写事件

30:02.270 --> 30:05.230
message里面type handle1

30:07.550 --> 30:11.230
好 这边的话是type handle2

30:12.750 --> 30:14.590
ok 这边的话是a加加

30:14.590 --> 30:15.790
a加加很简单对吧

30:15.790 --> 30:16.670
set data

30:17.630 --> 30:20.190
然后接下来这边设置a 等于什么

30:20.190 --> 30:21.950
z点data点a

30:22.510 --> 30:23.390
所以加一个e

30:24.190 --> 30:26.990
对不对 下面 下面的话是b减减

30:26.990 --> 30:28.990
b减减的话这边对应的是b

30:29.070 --> 30:31.950
然后z点data b 干嘛 是不是减1

30:32.830 --> 30:34.430
ok 好 来看一下效果

30:35.950 --> 30:36.510
看一下效果

30:37.550 --> 30:38.190
我的按钮呢

30:41.950 --> 30:42.590
我的按钮呢

30:43.550 --> 30:44.190
barton

30:45.710 --> 30:47.790
这个对了呀 我再编一下呢

30:49.710 --> 30:50.750
好 有了 有了

30:50.750 --> 30:52.990
他这个有些时候就是有些问题

30:53.790 --> 30:55.310
好 来我们来看一下a加加

30:55.950 --> 30:57.710
好 a加加你看第一个数字是不是在加

30:58.270 --> 30:58.910
b减减

30:59.630 --> 31:01.310
对不对 第二个数字在减

31:01.310 --> 31:03.710
ok 但是呢 我们这边这个sum

31:04.350 --> 31:05.630
sum我们是干嘛呀

31:06.190 --> 31:09.630
sum我们这边是eisb a和b的这个值

31:10.350 --> 31:15.150
对不对 也就是说你a和b任意有一个发生变化

31:15.150 --> 31:17.230
让我这个sum是不应该重新计算

31:17.790 --> 31:19.470
对吧 好 那怎么办呢

31:19.470 --> 31:21.950
那你这边就可以用这个数据监听器

31:22.510 --> 31:23.630
他这边的话叫做什么呢

31:23.630 --> 31:24.830
叫做observers

31:25.550 --> 31:29.070
这个顾名思义就是这个观察者的这个意思

31:29.630 --> 31:31.710
对吧 你如果这个vue学过那个

31:32.270 --> 31:33.710
就他的响应式原理

31:34.110 --> 31:35.710
他里面有个这个观察者

31:37.070 --> 31:39.070
ok 那这个单词你其实是很熟悉的

31:40.830 --> 31:41.950
那他这边就观察什么呢

31:41.950 --> 31:42.910
你看他的这个例子

31:42.910 --> 31:45.070
就观察number a number b

31:45.630 --> 31:47.070
然后接下来这两个

31:47.070 --> 31:48.590
有一个发生变化的时候

31:48.590 --> 31:50.270
然后执行这个回调函数

31:50.670 --> 31:53.150
这个回调函数里面就会传入

31:53.550 --> 31:55.710
传入这个number a number b

31:56.110 --> 31:59.550
ok 让家这边你重新计算这个sum就可以了

31:59.950 --> 32:01.150
好 那我们这边我们来写一下

32:02.590 --> 32:04.510
对于我们这边来讲的话

32:04.510 --> 32:05.070
我们这边

32:06.190 --> 32:07.310
他是一个数据选项

32:07.790 --> 32:08.750
他这个整体来讲

32:08.750 --> 32:10.830
实际上和那个vue是不是很相似

32:11.470 --> 32:13.470
对不对 就那种选项式api

32:14.190 --> 32:14.670
很相似

32:15.230 --> 32:18.670
只不过现在vue3已经改成这种composition api了

32:18.670 --> 32:20.190
不知道微信小城区要不要改

32:21.150 --> 32:22.750
好 这边的话

32:22.750 --> 32:25.710
observice对应是一个对象

32:27.550 --> 32:29.470
好 然后接下来我们这边观察

32:29.470 --> 32:31.470
a 逗号 注意用逗号分隔

32:32.110 --> 32:33.630
观察这两个a和b

32:34.190 --> 32:37.070
好 人家这边a和b发生变化的时候

32:37.630 --> 32:39.470
请给我执行这个回调函数

32:40.190 --> 32:41.310
这个回调函数

32:41.310 --> 32:42.030
然后接下来的话

32:42.030 --> 32:44.990
这边就是会传入a和b

32:45.710 --> 32:47.470
ok 传入a和b之后

32:47.630 --> 32:48.430
然后接下来我们这边

32:48.430 --> 32:51.070
res.setdata

32:52.270 --> 32:53.790
我们重新计算谁呢

32:53.790 --> 32:55.070
重新计算sum

32:55.070 --> 32:56.990
sum的话就等于a加b

32:58.030 --> 32:59.310
ok 好 来看一下

33:01.890 --> 33:03.010
好 这边a加加

33:03.490 --> 33:03.970
搞定没有

33:04.850 --> 33:05.730
搞定了吧

33:05.730 --> 33:06.130
对不对

33:06.130 --> 33:07.570
sum是不是重新计算了

33:07.570 --> 33:08.050
b减减

33:09.570 --> 33:10.050
是不是这边

33:10.690 --> 33:11.970
9.90对的

33:12.930 --> 33:13.570
是不是ok了

33:14.450 --> 33:15.170
对不对

33:15.170 --> 33:15.970
就ok了

33:15.970 --> 33:17.890
这个就是这个数据观察

33:17.890 --> 33:18.930
很简单

33:19.010 --> 33:20.450
你如果学过那个挖器的话

33:20.450 --> 33:21.730
这个一看就懂了

33:22.370 --> 33:22.690
对不对

33:24.290 --> 33:26.290
这是关于这个数据监听器

33:27.090 --> 33:29.330
至于就是后面它的一些这个细节

33:29.330 --> 33:30.290
你就自己去看了

33:31.250 --> 33:32.530
这个我就不爱在这讲了

33:32.530 --> 33:33.970
我把这个东西大致是什么

33:33.970 --> 33:35.010
快速带着你过一遍

33:36.370 --> 33:37.170
好 然后下一个

33:38.290 --> 33:40.530
下一个叫做存数据之段

33:44.370 --> 33:45.970
存数据之段

33:45.970 --> 33:47.570
这个是什么意思呢

33:47.650 --> 33:49.410
就是我们在这个data里面

33:51.810 --> 33:53.570
在data里面

33:54.930 --> 33:57.410
所这个定义的这个数据

33:58.370 --> 33:59.010
一般来讲

33:59.650 --> 34:00.450
一般来讲

34:01.090 --> 34:02.050
在这个页面

34:03.010 --> 34:04.210
是会什么呢

34:04.210 --> 34:07.090
是会重新渲染的

34:07.970 --> 34:08.290
对不对

34:08.290 --> 34:09.330
就好比我们刚才这个一样

34:10.370 --> 34:12.370
我们刚才这边这个a和b

34:13.250 --> 34:14.610
a和b对应了就是什么

34:14.610 --> 34:15.650
对应了就这边

34:15.650 --> 34:16.610
a b

34:17.170 --> 34:17.570
对不对

34:17.570 --> 34:19.570
那加你这边这个a一发生变化

34:19.570 --> 34:21.090
你整个页面是不是要重新渲染

34:21.650 --> 34:22.210
对不对

34:22.210 --> 34:23.090
那这边的话

34:24.530 --> 34:26.530
它这个存数据之段

34:26.530 --> 34:27.570
是什么意思呢

34:27.570 --> 34:28.130
你看一下

34:29.410 --> 34:30.770
某些情况下

34:30.770 --> 34:32.210
有些情况下

34:32.210 --> 34:34.130
某些data中的制断

34:34.130 --> 34:37.410
既不会展示在页面上

34:37.410 --> 34:39.970
也不会传递给其他这个组件

34:40.530 --> 34:41.730
它仅仅是什么呢

34:41.730 --> 34:45.090
仅仅是在当前组件内部使用

34:45.650 --> 34:46.370
这种的话

34:46.370 --> 34:47.410
我们称之为什么呢

34:47.410 --> 34:49.810
称之为存这个数据之段

34:50.850 --> 34:52.770
但是这里的话就会有个问题

34:52.770 --> 34:56.530
你如果把这些制断记录在Z10.data里面

34:57.250 --> 34:58.610
那它就会参与什么呢

34:58.610 --> 34:59.810
参与这个渲染过程

35:00.370 --> 35:01.090
这边记一下

35:01.730 --> 35:02.450
就如果

35:04.690 --> 35:06.610
在data里面所定义的数据

35:06.610 --> 35:07.170
一般来讲

35:07.170 --> 35:08.530
这页面是会重新渲染的

35:09.170 --> 35:11.970
如果有一些数据

35:13.090 --> 35:14.210
它那句话怎么来说呢

35:15.250 --> 35:17.410
既不会展示在界面上

35:17.410 --> 35:19.090
也不会传递给其他组件

35:22.220 --> 35:25.260
仅仅是拿来什么呢

35:25.260 --> 35:27.740
拿来做数据计算的

35:29.900 --> 35:31.660
那么这个时候

35:33.020 --> 35:36.380
如果定义在这个data中

35:37.340 --> 35:40.620
data中就会参与什么呢

35:40.620 --> 35:42.700
参与重新渲染

35:44.380 --> 35:46.620
就会参与页面的重新渲染

35:47.740 --> 35:48.780
对不对

35:48.780 --> 35:50.460
或者说你这边这个制断

35:50.460 --> 35:51.500
只要你一变

35:51.500 --> 35:54.060
那我的页面就会重新渲染

35:54.060 --> 35:57.340
但是我们不需要

35:57.340 --> 35:57.740
什么呢

35:57.740 --> 35:59.180
不需要这些制断

36:00.700 --> 36:01.340
这些制断

36:01.340 --> 36:02.220
这些制断就是指的

36:02.220 --> 36:03.420
就是刚才说的这种

36:03.420 --> 36:05.740
就是仅仅是拿来做计算的这种制断

36:05.740 --> 36:07.580
但是我们不需要这些制断

36:07.580 --> 36:09.260
就这个存数据制断

36:09.260 --> 36:13.100
存数据制断

36:13.100 --> 36:17.820
发生改变时页面重新渲染

36:19.260 --> 36:21.180
重新渲染

36:21.180 --> 36:28.620
因此在微信小程序中提供了一种机制

36:30.540 --> 36:31.420
什么机制呢

36:31.420 --> 36:32.060
我们来看一下

36:33.020 --> 36:34.780
它这边呢提供了这么一种机制

36:36.060 --> 36:37.020
就这边

36:37.020 --> 36:40.380
指定这个存数据制断的方法是什么呢

36:40.380 --> 36:43.180
在这个component构造器里面

36:43.180 --> 36:45.020
首先在options里面

36:45.020 --> 36:47.420
定义一个这个pure data

36:47.500 --> 36:51.180
这个partn定义这么一个这个政则

36:51.180 --> 36:53.260
这个政则它是拿来干嘛呢

36:53.260 --> 36:55.340
它来指定

36:55.340 --> 36:58.380
只要符合这个政则表达式的制断

36:58.380 --> 37:00.460
就是存数据制断

37:00.460 --> 37:00.780
ok

37:06.000 --> 37:08.640
小程序中提供了一种机制

37:08.640 --> 37:10.960
首先在什么呢

37:10.960 --> 37:12.160
在这个component

37:15.230 --> 37:18.350
component中的这个options中

37:19.230 --> 37:20.430
options中

37:20.510 --> 37:23.630
输写一个政则

37:23.630 --> 37:24.990
这是首先第一步

37:24.990 --> 37:26.110
记录一下

37:26.110 --> 37:27.230
首先是第一步

37:27.230 --> 37:28.350
输写一个政则

37:28.350 --> 37:29.390
第二步

37:29.390 --> 37:31.150
在这个data中

37:31.150 --> 37:33.230
data中

37:33.230 --> 37:36.190
所定义的数据

37:36.190 --> 37:39.070
如果满足

37:39.070 --> 37:41.150
就是如果能够匹配上

37:41.150 --> 37:44.990
能够匹配上该政则

37:44.990 --> 37:46.990
该政则

37:46.990 --> 37:49.630
那么该数据制断

37:50.590 --> 37:53.710
就是一个存数据制断

37:54.990 --> 37:55.550
ok

37:55.550 --> 37:57.550
然后存数据制断

37:57.550 --> 38:00.670
存数据制断

38:00.670 --> 38:02.990
发生变化时

38:02.990 --> 38:04.270
就它的值

38:04.270 --> 38:07.950
发生变化时

38:07.950 --> 38:15.230
不会引起这个页面的重新渲染

38:15.230 --> 38:18.190
大致就是这么几个步骤

38:18.190 --> 38:19.390
实际上就一个步骤

38:19.550 --> 38:19.950
对不对

38:19.950 --> 38:21.950
就是让你定义一个这个政则

38:21.950 --> 38:22.190
好

38:22.190 --> 38:22.670
来我们来看看

38:22.670 --> 38:24.510
他怎么定义的

38:24.510 --> 38:25.870
他这边在options中

38:25.870 --> 38:27.790
定义了一个pure data

38:27.790 --> 38:28.750
parton

38:28.750 --> 38:29.550
指定什么呢

38:29.550 --> 38:32.270
指定所有下滑线开头的

38:32.270 --> 38:33.630
这个数据制断

38:33.630 --> 38:35.390
为存数据制断

38:35.390 --> 38:36.190
那接下来的话

38:36.190 --> 38:37.550
那这边定义了一个什么

38:37.550 --> 38:39.950
说定义了一个下滑线b

38:39.950 --> 38:40.830
理论上来讲

38:40.830 --> 38:42.990
你如果不写这个的话

38:42.990 --> 38:43.790
听清楚

38:43.790 --> 38:45.230
如果你不写这个的话

38:45.230 --> 38:46.990
让我这边这个下滑线b

38:46.990 --> 38:48.910
他也是定义在这个data里面的

38:48.990 --> 38:49.390
对不对

38:49.390 --> 38:51.230
那这个下滑线b发生变化

38:51.230 --> 38:54.110
是不是就会引起这个页面的重新渲染

38:55.470 --> 38:56.110
对不对

38:56.110 --> 38:56.270
好

38:56.270 --> 38:57.070
那我现在的话

38:57.070 --> 38:59.390
我这边定义了这个part data

38:59.390 --> 39:02.590
pure dataparton

39:02.590 --> 39:04.910
指定了以这个下滑线开头的

39:04.910 --> 39:05.950
这个数据制断

39:05.950 --> 39:07.950
为存数据制断

39:07.950 --> 39:08.590
那回头的话

39:08.590 --> 39:10.910
你这个下滑线b发生变化

39:10.910 --> 39:13.470
会不会引起这个界面的渲染

39:13.470 --> 39:14.510
这不会

39:14.510 --> 39:15.550
对不对

39:15.550 --> 39:16.910
不会

39:16.910 --> 39:18.030
好来我们这边我们来写一下

39:19.710 --> 39:20.830
来写一下

39:20.830 --> 39:22.670
来到我们这边

39:22.670 --> 39:24.510
这边我们再来建一个

39:24.510 --> 39:25.310
再来建一个

39:26.590 --> 39:28.830
这边item3

39:31.680 --> 39:32.240
这边的话

39:32.240 --> 39:35.840
新建组建item3

39:37.840 --> 39:38.080
好

39:38.080 --> 39:40.080
然后接下来在这边把它加进去

39:43.890 --> 39:45.010
把它加进去

39:45.010 --> 39:46.930
这边是3

39:49.090 --> 39:49.330
好

39:49.330 --> 39:50.450
然后接下来这边

39:50.450 --> 39:52.930
这边的话是一个view

39:53.970 --> 39:56.370
这边这个item3

39:58.370 --> 39:59.490
然后这个存

40:02.830 --> 40:04.110
存数据制断

40:05.150 --> 40:07.550
存数据制断

40:08.670 --> 40:09.150
也是

40:09.790 --> 40:10.030
OK

40:10.030 --> 40:10.990
好

40:10.990 --> 40:12.830
然后接下来在这边的话使用一下

40:14.590 --> 40:15.550
item3

40:20.690 --> 40:21.490
OK

40:21.490 --> 40:21.730
好

40:21.730 --> 40:22.050
编译

40:24.770 --> 40:25.010
好

40:25.010 --> 40:25.490
这边有了

40:26.210 --> 40:26.930
有了

40:26.930 --> 40:27.170
好

40:27.250 --> 40:27.890
有了之后

40:27.890 --> 40:28.530
然后接下来

40:28.530 --> 40:29.250
我们来到这边

40:30.530 --> 40:31.170
来到这边

40:31.170 --> 40:32.130
我们来举个例子

40:34.610 --> 40:34.770
好

40:34.770 --> 40:37.650
我们这边先来到这个js这边

40:37.650 --> 40:38.930
把这些先干掉

40:40.370 --> 40:41.650
先把这些先干掉

40:41.650 --> 40:41.970
干掉

40:41.970 --> 40:42.770
然后一会我们需要

40:42.770 --> 40:43.490
我们再来写

40:43.490 --> 40:44.290
好

40:44.290 --> 40:45.890
在这个component里面

40:45.890 --> 40:47.090
component里面

40:47.090 --> 40:48.450
我们首先先定义

40:48.450 --> 40:49.570
先把那个拿过来

40:50.370 --> 40:50.930
先把这个

40:52.130 --> 40:52.930
这个拿过来

40:52.930 --> 40:54.210
我们就采用这个规则

40:55.410 --> 40:56.610
怎么把尺点打开了

40:57.330 --> 40:57.890
把这个关了

40:59.730 --> 40:59.890
好

40:59.890 --> 41:01.410
我们就采用这个规则

41:01.410 --> 41:01.890
什么规则

41:01.890 --> 41:02.130
诶

41:02.930 --> 41:03.650
没复制到吗

41:04.370 --> 41:04.770
复制

41:05.730 --> 41:05.890
好

41:05.890 --> 41:07.810
我们这边就采用这个规则

41:07.810 --> 41:09.970
就是这边那这个下滑线

41:09.970 --> 41:12.370
下滑线开头的为存数据制断

41:12.370 --> 41:12.690
好

41:12.690 --> 41:13.570
然后接下来的话

41:13.570 --> 41:15.250
我们这边定义一个data

41:16.210 --> 41:16.850
data里面

41:16.850 --> 41:18.290
然后接下来下滑线

41:18.290 --> 41:19.170
RGB

41:20.610 --> 41:21.890
对应是一个对象

41:21.890 --> 41:23.330
而里面有这个R

41:24.130 --> 41:25.410
对应的是0

41:25.410 --> 41:27.650
然后g对应的是0

41:27.650 --> 41:30.450
然后接下来b对应的是0

41:30.450 --> 41:31.090
ok

41:31.090 --> 41:32.930
那这个就是一个什么

41:32.930 --> 41:34.930
这个是不是一个存数据制断

41:36.450 --> 41:37.410
对不对

41:37.410 --> 41:40.210
存数据制断

41:40.210 --> 41:41.410
不参与什么

41:42.610 --> 41:44.370
不参与

41:44.370 --> 41:45.330
页面的

41:46.210 --> 41:46.610
渲染

41:47.570 --> 41:48.370
对不对

41:48.370 --> 41:48.690
好

41:48.690 --> 41:50.290
然后接下来我们这边再来定一个什么呢

41:50.290 --> 41:51.890
再定一个这个full corner

41:53.970 --> 41:55.170
这边呢一开始是什么呢

41:55.170 --> 41:56.370
一开始是0

41:56.370 --> 41:57.010
0

41:57.010 --> 41:57.730
0

41:57.730 --> 41:59.170
这个的话是指定颜色

42:00.370 --> 42:02.690
指定颜色

42:02.690 --> 42:03.010
ok

42:03.010 --> 42:04.290
那这个的话是不要参与

42:05.010 --> 42:05.570
该制断

42:06.530 --> 42:11.490
该制断是一个普通的这个数据制断

42:13.410 --> 42:14.130
会什么

42:14.130 --> 42:17.890
是不是会参与页面的渲染

42:18.450 --> 42:19.010
对不对

42:19.010 --> 42:20.850
并且也会影响页面的渲染

42:20.850 --> 42:22.290
比如我这个指一遍

42:22.290 --> 42:23.730
页面是不是要重新渲染一次

42:24.690 --> 42:25.490
对不对

42:25.490 --> 42:25.810
ok

42:26.450 --> 42:26.850
好

42:26.850 --> 42:28.210
然后接下来的话

42:28.210 --> 42:29.650
来到我们的这个页面这边

42:31.330 --> 42:32.850
来到页面这边

42:32.850 --> 42:33.650
这边的话

42:36.300 --> 42:36.620
好

42:36.620 --> 42:37.020
这边

42:37.020 --> 42:38.140
这边让我写一个view

42:39.100 --> 42:40.940
view点这个class

42:42.540 --> 42:43.180
view点

42:43.180 --> 42:43.980
这边给了一个

42:44.540 --> 42:46.140
叫做这个item3

42:46.780 --> 42:47.660
然后container

42:51.870 --> 42:52.830
这个的话是一个

42:54.270 --> 42:55.790
空的一个这个盒子

42:55.790 --> 42:57.230
回头用来显示颜色的

42:59.230 --> 42:59.710
等一下

42:59.710 --> 43:00.190
我看一下

43:01.950 --> 43:02.670
这个这个这个

43:03.870 --> 43:05.310
用来显示颜色

43:05.310 --> 43:05.950
然后接下来

43:05.950 --> 43:06.670
我们这边

43:06.670 --> 43:07.230
这边的话

43:07.230 --> 43:08.990
我们给他设置他的这个style

43:09.710 --> 43:10.430
style的话

43:10.430 --> 43:11.470
这边就等于什么呢

43:11.470 --> 43:12.670
ban光的conner

43:13.310 --> 43:14.990
对应的就是我们的那个forconner

43:17.860 --> 43:19.700
forconner

43:21.900 --> 43:22.220
ok

43:22.860 --> 43:23.020
好

43:23.020 --> 43:23.420
然后在这边

43:23.420 --> 43:24.220
让我们设置一下

43:24.220 --> 43:25.100
他的这个样式

43:25.900 --> 43:26.700
到这边来

43:28.900 --> 43:30.340
设置他的这个样式

43:30.340 --> 43:31.060
这个样式的话

43:31.060 --> 43:32.340
我们这边设置宽

43:33.300 --> 43:34.980
宽是百分之百

43:35.700 --> 43:36.340
然后高

43:36.340 --> 43:36.820
高的话

43:36.820 --> 43:38.500
我们给个比如说150

43:39.380 --> 43:40.500
rpx

43:40.500 --> 43:40.660
好

43:40.660 --> 43:40.820
来

43:40.820 --> 43:41.620
我们这边我们来看一下

43:42.340 --> 43:42.740
编译

43:46.350 --> 43:47.550
这边怎么没出来呢

43:48.510 --> 43:49.070
看一下啊

43:49.950 --> 43:50.830
这边的话

43:50.830 --> 43:52.430
ban光的conner

43:52.430 --> 43:53.390
forconner

43:54.110 --> 43:55.470
这边是对的呀

43:56.510 --> 43:57.070
我看一下

43:57.790 --> 43:57.870
哦

43:57.870 --> 43:58.670
这边有一个什么

43:58.670 --> 43:59.390
有个rgb

44:00.670 --> 44:01.790
这边有个rgb

44:02.430 --> 44:02.750
好

44:02.750 --> 44:03.870
然后再这边有个扩号

44:04.990 --> 44:05.310
对吧

44:06.190 --> 44:07.310
有个扩号

44:07.310 --> 44:07.630
好

44:07.630 --> 44:07.950
保存

44:09.390 --> 44:09.550
好

44:09.550 --> 44:10.110
是不是出来了

44:10.750 --> 44:11.310
对不对

44:11.310 --> 44:12.110
出来了

44:12.110 --> 44:12.350
好

44:12.350 --> 44:12.990
出来了之后

44:12.990 --> 44:13.550
然后接下来

44:13.550 --> 44:14.590
我们这边再来什么呢

44:14.590 --> 44:15.230
再来这边

44:16.590 --> 44:16.910
view

44:17.870 --> 44:18.030
啊

44:18.030 --> 44:18.750
我们来显示

44:19.470 --> 44:20.350
显示一个什么呢

44:20.350 --> 44:22.510
显示首先显示这个存数据之段

44:24.350 --> 44:24.590
存

44:25.390 --> 44:25.550
好

44:25.550 --> 44:26.750
这边再来一个view吧

44:31.070 --> 44:32.030
存数据之段

44:34.030 --> 44:35.390
数据之段

44:36.030 --> 44:36.270
好

44:36.270 --> 44:37.230
我们这边的话是

44:38.670 --> 44:39.630
rgb

44:39.630 --> 44:40.750
下滑线

44:40.750 --> 44:41.790
rgb

44:41.790 --> 44:43.710
然后这边点r

44:45.630 --> 44:46.030
然后

44:47.550 --> 44:48.030
逗号

44:48.590 --> 44:49.710
然后g

44:51.070 --> 44:51.870
然后接下来

44:51.870 --> 44:52.590
这边这个b

44:54.030 --> 44:54.510
ok

44:54.510 --> 44:55.630
以及什么呢

44:55.630 --> 44:56.750
这边复制一份

44:56.750 --> 44:58.270
以及就是普通数据之段

44:59.310 --> 44:59.790
普通

45:01.710 --> 45:03.070
普通数据之段

45:03.070 --> 45:03.390
好

45:03.390 --> 45:04.270
这边就是什么

45:04.270 --> 45:05.310
所以这个那个for

45:06.670 --> 45:07.550
forconner

45:08.190 --> 45:08.670
对吧

45:08.670 --> 45:09.470
后面的这个不要

45:11.470 --> 45:12.270
ok

45:12.270 --> 45:13.390
接下来这边保存一下

45:14.190 --> 45:14.830
那你看一下

45:15.870 --> 45:16.190
好

45:16.190 --> 45:16.990
存数据之段

45:16.990 --> 45:17.470
你看这边

45:18.590 --> 45:19.390
能不能显示出来

45:19.950 --> 45:20.750
这不能显示出来

45:21.310 --> 45:21.630
对不对

45:21.630 --> 45:23.870
它是不会参与这个页面的这个渲染的

45:24.430 --> 45:24.750
ok

45:24.750 --> 45:25.790
它就是拿来什么呢

45:25.790 --> 45:27.950
拿来就是存作这个数据计算的

45:28.750 --> 45:29.870
而你的这个普通数据

45:29.870 --> 45:31.150
比如我们这个forconner

45:31.710 --> 45:32.510
这边是不是ok的

45:33.150 --> 45:33.870
对不对

45:33.870 --> 45:34.990
能够显示出来

45:35.790 --> 45:36.030
好

45:36.110 --> 45:36.750
来 我们下面呢

45:36.750 --> 45:37.870
我们再来加三个button

45:40.030 --> 45:40.750
三个button

45:40.750 --> 45:41.870
我们把刚才的那个

45:42.430 --> 45:42.990
就是那个

45:43.710 --> 45:44.270
observer

45:44.830 --> 45:46.110
数据监听那个

45:46.110 --> 45:47.550
顺便再把它巩固一下

45:48.990 --> 45:50.110
这边三个button

45:50.110 --> 45:51.070
这个分别是什么呢

45:51.070 --> 45:52.430
这个是分别是r

45:53.310 --> 45:54.990
这个增加

45:56.910 --> 45:57.790
r增加

45:57.790 --> 45:58.670
这个是g

46:00.270 --> 46:01.150
增加

46:01.150 --> 46:01.950
这个是b

46:03.950 --> 46:04.910
增加

46:05.070 --> 46:07.150
那分别让家这边绑定这个事件

46:08.990 --> 46:10.590
绑的type

46:11.150 --> 46:12.030
等于一个

46:12.990 --> 46:14.350
type handle

46:14.910 --> 46:15.310
对吧

46:15.310 --> 46:16.350
那对应了什么呢

46:16.350 --> 46:17.070
1

46:17.070 --> 46:17.630
2

46:17.630 --> 46:17.870
3

46:18.510 --> 46:19.710
好来到我们这边

46:19.710 --> 46:20.750
just这边

46:20.750 --> 46:22.030
这边的话来写

46:22.030 --> 46:23.230
相应的这个事件

46:25.810 --> 46:26.130
好

46:26.130 --> 46:27.330
在message里面

46:29.410 --> 46:30.610
这边的话type

46:31.570 --> 46:32.290
handle1

46:34.670 --> 46:35.230
handle1

46:36.990 --> 46:37.310
好

46:37.390 --> 46:38.830
让家这边还有2和3

46:40.430 --> 46:41.230
2

46:41.230 --> 46:41.550
3

46:44.770 --> 46:45.570
好

46:45.570 --> 46:47.010
我们这边这边就做什么事情呢

46:47.010 --> 46:48.290
我们这边那就修改

46:49.010 --> 46:51.090
z是点cdata

46:53.250 --> 46:54.130
修改谁呢

46:54.130 --> 46:56.050
修改这个下滑线

46:56.050 --> 46:56.770
rgb

46:57.490 --> 46:58.130
点r

46:59.090 --> 47:00.370
把它修改成什么呢

47:00.370 --> 47:01.570
我们这边那就是

47:01.570 --> 47:03.490
z是点data

47:03.490 --> 47:05.090
点下滑线rgb

47:05.650 --> 47:06.530
点这个r

47:07.170 --> 47:08.930
然后加一个5

47:09.970 --> 47:11.250
但你不能一直加

47:11.250 --> 47:12.530
加5之后你要判断

47:12.530 --> 47:14.050
它是否大于什么呢

47:14.050 --> 47:15.490
大于这个255

47:16.210 --> 47:17.250
如果大于

47:17.250 --> 47:18.210
那我们就取什么

47:18.210 --> 47:19.330
就取255

47:19.970 --> 47:21.410
否则的话就取多少

47:21.410 --> 47:23.170
就取你这个加5

47:26.030 --> 47:26.670
对不对

47:26.670 --> 47:26.990
好

47:26.990 --> 47:28.270
然后接下来下面的话也是

47:30.850 --> 47:31.890
下面也是

47:31.890 --> 47:32.690
这个是r

47:32.690 --> 47:33.730
这个是g

47:33.730 --> 47:35.330
然后这个是b

47:35.330 --> 47:36.130
对吧

47:36.130 --> 47:37.090
这边是g

47:37.810 --> 47:39.170
然后这边的话g

47:39.970 --> 47:41.010
这边是b

47:41.810 --> 47:42.770
然后b

47:43.330 --> 47:43.890
ok

47:43.890 --> 47:44.690
那你可以看到

47:44.690 --> 47:46.770
这边你的存数据制断

47:46.770 --> 47:47.890
它就是拿来什么

47:47.890 --> 47:49.810
就是拿来做计算的

47:50.530 --> 47:50.930
对不对

47:51.730 --> 47:52.130
可以

47:53.250 --> 47:54.290
可以看到

47:54.930 --> 47:57.570
存数据制断

47:58.530 --> 48:02.130
就是拿来做计算的

48:03.730 --> 48:04.210
对不对

48:04.210 --> 48:04.530
好

48:04.530 --> 48:05.250
比如说我现在

48:05.250 --> 48:06.370
我这边我点击

48:08.370 --> 48:09.010
r增加

48:09.810 --> 48:10.690
r增加

48:10.770 --> 48:12.050
这边的话这个

48:12.050 --> 48:13.170
r变没变了

48:13.170 --> 48:14.210
实际上已经变了

48:15.330 --> 48:16.450
实际上已经变了

48:16.450 --> 48:16.770
但是呢

48:16.770 --> 48:18.210
它就是拿来做这个计算的

48:18.210 --> 48:19.170
所以你在页面上

48:19.170 --> 48:20.610
你是看不到任何变化的

48:21.330 --> 48:21.890
对不对

48:21.890 --> 48:22.850
那我们这边的话

48:22.850 --> 48:23.970
我们可以怎么做呢

48:23.970 --> 48:25.410
我们这边可以来

48:25.410 --> 48:27.250
做一个这个数据监听

48:28.210 --> 48:30.210
这边做一个数据监听

48:31.010 --> 48:33.010
这个刚才才讲了的

48:33.010 --> 48:33.410
对不对

48:34.450 --> 48:35.170
observors

48:36.130 --> 48:36.690
监听谁

48:37.490 --> 48:39.250
监听这个下滑线

48:39.250 --> 48:40.450
RGB

48:40.530 --> 48:42.290
然后它下面的

48:42.290 --> 48:43.410
信号信号

48:43.410 --> 48:43.810
所有

48:44.610 --> 48:45.170
包含什么呢

48:45.170 --> 48:47.010
包含这个RGB

48:47.010 --> 48:48.290
就你不用一个一个去写了

48:49.010 --> 48:49.570
对不对

48:49.570 --> 48:51.010
这个是他提供的这个写法

48:51.730 --> 48:53.090
在数据监听器这边

48:55.250 --> 48:55.890
这里

48:56.770 --> 48:57.090
可不可以

48:57.570 --> 48:58.450
提供的这种写法

49:00.290 --> 49:00.530
好

49:00.530 --> 49:01.250
然后回到这边

49:02.370 --> 49:02.850
这边的话

49:02.850 --> 49:03.730
然后接下监听

49:03.730 --> 49:04.370
监听之后

49:04.370 --> 49:05.490
人家这边这个方形

49:07.330 --> 49:09.090
人家传进来一个对象

49:09.810 --> 49:10.290
对吧

49:10.370 --> 49:11.490
传进了一个对象之后

49:11.490 --> 49:12.930
然后接下来我们这边

49:12.930 --> 49:14.850
Z点set data

49:15.890 --> 49:17.330
当你发生变化之后

49:17.330 --> 49:18.850
我重新去设置什么

49:18.850 --> 49:20.370
是设置for color

49:21.250 --> 49:22.530
设置成多少

49:22.530 --> 49:24.290
是不是这边就是你的这个

49:24.290 --> 49:26.450
你传进来的这个下滑线

49:27.090 --> 49:27.970
RGB

49:27.970 --> 49:28.690
然后接下来

49:29.250 --> 49:30.290
点这个R

49:31.090 --> 49:31.570
对不对

49:31.570 --> 49:32.450
然后逗号

49:34.530 --> 49:35.410
逗号

49:35.410 --> 49:36.450
然后接下来这个

49:37.330 --> 49:37.570
G

49:38.450 --> 49:39.490
然后逗号

49:39.570 --> 49:40.930
然后接下来这个B

49:41.970 --> 49:42.530
对吧

49:42.530 --> 49:42.770
好

49:42.770 --> 49:43.890
来我们这边我们来看一下

49:43.890 --> 49:44.290
好不好

49:44.290 --> 49:44.530
4

49:46.610 --> 49:47.810
R2增加

49:47.810 --> 49:48.850
这边是我

49:48.850 --> 49:49.170
对不对

49:49.170 --> 49:50.690
当你这个颜色你看不出来

49:50.690 --> 49:51.890
因为你这个才增加5

49:51.890 --> 49:52.690
我们多增加点

49:53.650 --> 49:54.690
所以慢慢在变化了

49:55.890 --> 49:56.370
对不对

49:56.370 --> 49:57.490
慢慢变红了

49:57.490 --> 49:58.050
比如这个B

49:58.770 --> 49:59.570
我们慢慢增加

50:01.330 --> 50:02.050
你看

50:02.050 --> 50:03.250
是不是颜色在发生变化

50:04.130 --> 50:04.850
对吧

50:04.850 --> 50:05.570
OK

50:05.570 --> 50:05.810
好

50:05.810 --> 50:06.290
这边G

50:08.050 --> 50:08.770
OK

50:08.930 --> 50:09.490
慢慢增加

50:10.050 --> 50:10.850
是不是在发生变化

50:11.410 --> 50:11.650
OK

50:12.530 --> 50:14.690
这个的话就是这个存数据之段

50:15.330 --> 50:15.890
理解了没有

50:16.450 --> 50:17.250
这个也很简单

50:17.810 --> 50:18.450
说白了就是

50:19.250 --> 50:20.130
就是参与计算

50:20.690 --> 50:21.090
对不对

50:21.090 --> 50:22.370
他的作用就是参与计算

50:23.730 --> 50:24.450
他的作用

50:25.970 --> 50:28.050
他的作用

50:28.050 --> 50:31.650
就是拿来参与计算

50:32.290 --> 50:32.690
对吧

50:32.690 --> 50:34.050
不参与页面的渲染

50:34.050 --> 50:34.530
但这边

50:35.090 --> 50:35.890
渲染出来吧

50:35.890 --> 50:36.690
说渲染不出来

50:37.410 --> 50:38.050
对吧

50:38.050 --> 50:38.530
OK

50:39.490 --> 50:43.010
这是这个存数据之段

50:43.890 --> 50:45.170
我都讲了50分钟了

50:45.170 --> 50:46.450
再坚持一下

50:46.450 --> 50:47.490
坚持一下

50:47.490 --> 50:49.010
把这个抽象节点讲了

50:49.010 --> 50:50.530
讲了咱们就下课

50:51.570 --> 50:54.130
下一个抽象节点

50:54.130 --> 51:01.260
下一个抽象节点

51:01.260 --> 51:05.100
这个你如果学过那个react

51:05.100 --> 51:07.660
如果你学过react的话

51:07.660 --> 51:08.940
这个实际上也非常好理解

51:08.940 --> 51:11.740
它就类似于那个react的那个什么呢

51:12.460 --> 51:14.300
react它有个Render Pops

51:15.500 --> 51:22.860
这个就类似于react的Render Pops

51:24.060 --> 51:25.500
我不知道你学过react没有

51:25.500 --> 51:26.620
你如果学过react

51:26.620 --> 51:28.860
恰巧又学过这个Render Pops

51:28.860 --> 51:30.620
那你会发现这个抽象节点

51:30.620 --> 51:31.260
它就是

51:32.140 --> 51:34.140
就是这个react Render Pops

51:34.140 --> 51:35.260
它的核心是什么呢

51:36.620 --> 51:39.820
抽象节点的核心

51:40.540 --> 51:43.660
就是可以将

51:45.180 --> 51:47.180
将一个组件

51:47.180 --> 51:48.460
以什么呢

51:48.460 --> 51:51.100
以这个Pops的这个形式

51:51.100 --> 51:52.380
传递

51:53.340 --> 51:55.660
传递到这个制定义组件里面

51:57.500 --> 51:58.300
就是

51:58.300 --> 51:59.420
制定

51:59.420 --> 52:01.260
我想想这句话该怎么描述

52:01.260 --> 52:03.900
抽象节点的核心就是

52:04.940 --> 52:09.100
在使用制定义组件

52:09.660 --> 52:11.820
时可以将

52:12.540 --> 52:13.660
另一个组件

52:16.260 --> 52:17.220
另一个组件

52:17.220 --> 52:19.140
以Pops的形式

52:19.140 --> 52:22.740
传递到该制定义组件中

52:24.180 --> 52:24.820
ok

52:24.820 --> 52:25.620
那我这边的话

52:25.620 --> 52:26.980
我传的是什么组件

52:26.980 --> 52:28.020
那最终是不是渲染的

52:28.020 --> 52:29.300
就是什么组件

52:29.300 --> 52:30.100
对不对

52:30.100 --> 52:30.500
因此

52:32.100 --> 52:36.180
传递的是什么组件

52:36.820 --> 52:38.740
最终渲染的

52:39.460 --> 52:40.340
就是

52:40.340 --> 52:41.140
什么组件

52:42.740 --> 52:43.060
ok

52:43.940 --> 52:46.580
它就和那个RenderPops是一样的

52:46.580 --> 52:47.300
好来我们这边

52:47.300 --> 52:48.180
我还是看个例子

52:48.180 --> 52:48.900
好吧

52:48.900 --> 52:49.940
还是看个例子

52:49.940 --> 52:50.980
看个例子就懂了

52:52.100 --> 52:52.340
好

52:52.340 --> 52:52.900
我这边呢

52:52.900 --> 52:53.540
我首先的话

52:53.540 --> 52:55.460
我新建一个item4

52:56.900 --> 52:57.940
我们这边再来一个

52:59.940 --> 53:00.340
这边

53:01.300 --> 53:04.500
再来一个item4

53:06.580 --> 53:07.380
这边的话

53:07.380 --> 53:08.580
新建component

53:10.020 --> 53:11.220
item4

53:12.500 --> 53:12.820
对吧

53:13.700 --> 53:13.860
好

53:13.860 --> 53:14.660
item4

53:14.660 --> 53:15.700
然后加这边

53:15.700 --> 53:17.460
稍微写一下view

53:18.500 --> 53:19.460
item4

53:23.170 --> 53:23.970
item4

53:23.970 --> 53:25.170
然后接下来

53:25.170 --> 53:25.970
该例子

53:27.250 --> 53:28.210
该势力

53:29.890 --> 53:31.090
该势力

53:33.410 --> 53:35.170
演示了什么呢

53:35.170 --> 53:36.210
抽象节点

53:38.690 --> 53:38.850
好

53:38.850 --> 53:39.650
那么我们这边

53:39.650 --> 53:40.450
我们先就是

53:40.450 --> 53:41.330
因为你到时候了

53:41.330 --> 53:42.050
你要就是

53:42.050 --> 53:44.130
你在使用这个item4的时候

53:44.130 --> 53:46.050
我们要往这个item4里面

53:46.050 --> 53:48.610
传这个自定义组件

53:48.610 --> 53:49.330
所以我们这边呢

53:49.330 --> 53:50.450
再来定一点个

53:50.450 --> 53:51.730
这样我们先先使用吧

53:52.450 --> 53:53.890
先来到这边

53:54.450 --> 53:54.770
是吧

53:55.490 --> 53:56.610
先来到这边

53:58.050 --> 53:58.450
这边呢

53:58.450 --> 53:59.090
item4

54:00.610 --> 54:01.330
item4

54:01.970 --> 54:02.290
这边呢

54:02.290 --> 54:03.170
item4

54:03.170 --> 54:03.810
对吧

54:03.810 --> 54:04.370
回头的话

54:04.370 --> 54:04.930
你在这边

54:04.930 --> 54:05.330
这边呢

54:05.330 --> 54:05.970
你可以使用

54:07.650 --> 54:08.050
这边呢

54:08.050 --> 54:08.690
item4

54:09.250 --> 54:09.970
ok

54:09.970 --> 54:11.170
你在使用的时候

54:11.170 --> 54:11.570
这边呢

54:11.570 --> 54:12.130
你回头的话

54:12.130 --> 54:13.970
要传递这个自定义组件

54:13.970 --> 54:14.610
所以我们这边呢

54:14.610 --> 54:15.410
再来定义

54:16.770 --> 54:17.730
再来定义

54:17.730 --> 54:18.050
好

54:18.050 --> 54:19.170
然后随便许

54:19.170 --> 54:20.130
就这个叫做

54:20.130 --> 54:21.250
seal1

54:22.050 --> 54:23.090
然后接下来这边

54:23.090 --> 54:24.130
新建component

54:24.690 --> 54:26.850
seal1

54:27.890 --> 54:28.290
对了

54:28.290 --> 54:29.650
这是第一个组件

54:29.650 --> 54:29.970
好

54:29.970 --> 54:30.610
然后接下来

54:30.610 --> 54:31.650
这边再来创建一个

54:33.410 --> 54:34.610
seal2

54:35.730 --> 54:36.210
好

54:36.210 --> 54:37.090
然后接下来这边

54:37.890 --> 54:39.330
新建component

54:39.330 --> 54:40.850
seal2

54:41.970 --> 54:42.290
好

54:42.290 --> 54:42.770
我这边呢

54:42.770 --> 54:43.410
是不是又创建了

54:43.410 --> 54:44.210
两个组件

54:44.210 --> 54:44.610
对不对

54:44.610 --> 54:45.570
这两个组件的话

54:45.570 --> 54:46.850
然后你随便写点东西

54:48.130 --> 54:48.770
随便写一点

54:48.770 --> 54:50.850
比如说seal1

54:50.850 --> 54:52.050
我这边写个view

54:53.410 --> 54:53.730
view

54:54.450 --> 54:55.090
比如说这边

54:55.090 --> 54:58.130
这是seal1

54:58.930 --> 54:59.330
组件

54:59.970 --> 55:00.690
对吧

55:00.690 --> 55:02.050
随便给一个这个button

55:03.330 --> 55:03.650
button

55:03.650 --> 55:04.530
然后写个文字

55:04.530 --> 55:05.250
比如说a

55:06.130 --> 55:06.450
可不可以

55:07.010 --> 55:07.490
对不对

55:07.490 --> 55:08.050
好

55:08.050 --> 55:08.770
然后接下来

55:08.770 --> 55:10.530
这个是seal1

55:11.010 --> 55:11.170
好

55:11.170 --> 55:11.570
然后接下来

55:11.570 --> 55:12.530
这边让我们来个

55:12.530 --> 55:13.810
seal2

55:15.090 --> 55:15.730
这边view

55:18.640 --> 55:19.600
然后这是

55:21.040 --> 55:22.240
这是

55:22.240 --> 55:24.960
这个seal2

55:26.480 --> 55:27.280
组件

55:27.280 --> 55:27.840
OK

55:27.840 --> 55:29.040
seal2组件

55:29.040 --> 55:30.080
我们这边给个input

55:30.960 --> 55:31.360
可以吧

55:32.320 --> 55:33.200
这边这个text

55:33.840 --> 55:34.000
好

55:34.000 --> 55:35.200
大家这边稍微再给它

55:35.200 --> 55:36.240
设置一点样式

55:36.960 --> 55:38.320
class等于一个

55:39.920 --> 55:40.640
input

55:41.520 --> 55:42.000
container

55:44.320 --> 55:44.560
好

55:44.560 --> 55:46.080
inputcontainer

55:46.080 --> 55:48.160
这边点inputcontainer

55:48.160 --> 55:49.280
给它一个border

55:50.240 --> 55:51.200
border top

55:52.720 --> 55:53.440
border top

55:54.080 --> 55:55.760
所以arpx

55:55.760 --> 55:56.800
solid

55:56.800 --> 55:58.000
junho ccc

55:59.280 --> 55:59.680
好

55:59.680 --> 56:00.880
然后接下来这个button

56:03.150 --> 56:03.710
对吧

56:03.710 --> 56:03.950
好

56:03.950 --> 56:04.990
再给个这个pending

56:05.870 --> 56:06.590
pending

56:06.590 --> 56:06.990
然后

56:08.030 --> 56:08.750
上下

56:08.750 --> 56:09.870
上下给个20

56:10.350 --> 56:11.310
arpx

56:11.310 --> 56:11.950
左右是

56:12.750 --> 56:14.270
就上下左右嘛

56:14.270 --> 56:14.590
OK

56:15.310 --> 56:15.550
好

56:15.550 --> 56:15.950
这边呢

56:15.950 --> 56:17.470
我是不是又写了两个组件

56:17.470 --> 56:17.790
对不对

56:17.790 --> 56:18.510
这两个组件

56:18.510 --> 56:19.470
分别是这边

56:19.470 --> 56:21.310
seal1

56:22.190 --> 56:24.030
和这个seal2

56:24.030 --> 56:24.990
对吧

56:24.990 --> 56:26.430
稍微有些不同

56:26.430 --> 56:26.670
好

56:26.670 --> 56:27.870
然后接下来回头

56:27.870 --> 56:28.990
我在这边

56:28.990 --> 56:31.630
这边我在使用这个item的时候

56:31.630 --> 56:32.670
我这边就可以干嘛呢

56:32.670 --> 56:33.630
我这边的话就可以

56:34.750 --> 56:35.790
传递一个属性

56:36.750 --> 56:37.390
OK

56:37.390 --> 56:39.150
这边就可以传递一个属性

56:39.150 --> 56:39.310
好

56:39.310 --> 56:39.950
这边我们看一下

56:39.950 --> 56:40.670
它怎么传的

56:42.110 --> 56:43.870
它这边的话

56:43.870 --> 56:44.750
抽象节点

56:44.750 --> 56:45.790
它是使用的是这个

56:46.830 --> 56:47.790
看到没有

56:47.790 --> 56:48.750
generic

56:49.710 --> 56:51.390
然后接下来selectable

56:52.190 --> 56:53.070
把它拿过来

56:55.630 --> 56:56.910
把它过来

56:56.910 --> 56:57.710
放到这边

56:59.310 --> 56:59.870
OK

56:59.870 --> 57:00.110
好

57:00.110 --> 57:01.310
再加这边我们要传什么呢

57:01.310 --> 57:04.510
这边我们要传的是seal1

57:05.070 --> 57:05.470
对吧

57:05.470 --> 57:06.270
那复制一份

57:06.270 --> 57:08.270
这个传seal2

57:09.230 --> 57:10.110
对不对

57:10.110 --> 57:10.350
好

57:10.350 --> 57:11.790
然后接下来你这边要传递

57:11.790 --> 57:12.350
传递的话

57:12.350 --> 57:14.590
然后接下来你在item4这边

57:15.550 --> 57:16.830
item4这边的话

57:16.830 --> 57:17.870
你这边你要

57:17.870 --> 57:20.190
就要接受这个传递过来的

57:20.190 --> 57:21.230
这个组件

57:22.590 --> 57:24.030
这边的话首先第一步

57:24.030 --> 57:25.790
第一步你需要在这个json这边

57:26.430 --> 57:28.910
json这边新增一个配置项

57:28.910 --> 57:29.790
你看看它这边

57:30.510 --> 57:31.470
新增一个配置项

57:31.470 --> 57:32.030
叫做这个

57:32.590 --> 57:33.310
component

57:34.190 --> 57:34.910
generics

57:35.550 --> 57:36.270
表示什么呢

57:36.270 --> 57:37.870
表示我这边的话

57:37.870 --> 57:40.270
会接收一个selectable

57:40.990 --> 57:42.110
这个selectable的话

57:42.110 --> 57:42.910
它是一个什么呢

57:42.990 --> 57:44.670
它是一个抽象节点

57:45.230 --> 57:46.590
把这个设置为q

57:47.870 --> 57:48.190
OK

57:48.910 --> 57:50.270
把这个设置为q

57:54.060 --> 57:55.340
直接复制过来

57:55.340 --> 57:56.540
把这个设置为q

57:56.540 --> 57:58.140
把这个设置为q之后

57:58.140 --> 57:59.260
然后接下来下一步

57:59.820 --> 58:00.460
在这里面

58:01.820 --> 58:03.740
这个我们整体给它一个那个吧

58:03.740 --> 58:05.180
给它一个container好不好

58:06.060 --> 58:06.940
给它一个边框

58:08.060 --> 58:09.420
到时候就是两个组件

58:09.420 --> 58:10.380
我们看得清楚一些

58:12.460 --> 58:14.460
我们这边给一个class

58:14.540 --> 58:16.940
等于一个container

58:17.980 --> 58:20.460
然后这边给它写一个container

58:22.700 --> 58:23.740
好给个border

58:24.460 --> 58:26.540
ERP可以是收利的

58:27.180 --> 58:27.660
型号

58:28.380 --> 58:29.500
给个什么颜色呢

58:29.500 --> 58:30.620
给grate的吧

58:30.620 --> 58:31.900
好吧走

58:34.540 --> 58:35.740
啊这边说两份

58:35.740 --> 58:36.700
对不对两份

58:36.700 --> 58:37.740
好然后接下来

58:37.740 --> 58:38.540
关键的来了

58:38.540 --> 58:39.340
看这里

58:39.340 --> 58:40.300
好接下来的话

58:40.300 --> 58:41.500
这边我们就设置什么呢

58:41.500 --> 58:43.260
设置select

58:44.060 --> 58:44.780
selectable

58:50.430 --> 58:51.870
OK selectable

58:52.270 --> 58:55.150
selectable表示什么意思呢

58:55.150 --> 58:56.670
表示就是你这边

58:57.070 --> 58:58.030
我们这边分个屏吧

58:59.070 --> 59:01.470
然后把这个拿过来

59:02.190 --> 59:02.430
OK

59:03.150 --> 59:04.030
好你这边的话

59:04.030 --> 59:04.510
你这边

59:05.070 --> 59:06.590
generateselectable

59:06.590 --> 59:08.670
这边不是传的是一个select1吗

59:09.390 --> 59:10.510
select1是什么

59:10.510 --> 59:11.630
是不是这个组件

59:11.630 --> 59:12.350
对不对

59:12.350 --> 59:16.350
这个组件的话回头就会被渲染到这个位置

59:17.470 --> 59:18.430
明白这个意思吧

59:18.430 --> 59:19.950
好然后接下来这边

59:19.950 --> 59:21.310
这边你传递的是一个什么

59:21.390 --> 59:23.390
是传递的是一个select

59:23.390 --> 59:25.550
这个sel2

59:25.550 --> 59:27.710
它就会被渲染到什么

59:27.710 --> 59:30.430
所以会被渲染到这个位置

59:31.550 --> 59:32.190
没有没有

59:32.190 --> 59:33.550
好来我们这边我们来

59:33.550 --> 59:33.950
保存

59:35.150 --> 59:36.110
保存之后来看一下

59:37.950 --> 59:38.750
怎么一出来呢

59:39.630 --> 59:40.990
我看一下是我哪里写漏了

59:40.990 --> 59:41.790
我这边印象呢

59:42.510 --> 59:43.470
那这个有些时候

59:45.470 --> 59:46.830
这边没出来

59:46.830 --> 59:47.950
我看一下啊

59:47.950 --> 59:49.310
这边select

59:50.270 --> 59:51.390
这个写错了

59:51.390 --> 59:52.510
这个是selectable

59:57.580 --> 59:58.300
再编一下

59:59.260 --> 01:00:00.220
这边不应该

01:00:01.900 --> 01:00:02.460
稍等

01:00:02.460 --> 01:00:03.260
我看一下

01:00:03.260 --> 01:00:04.300
看一下这边怎么回事

01:00:05.420 --> 01:00:06.300
好我看一下

01:00:06.300 --> 01:00:07.100
看一下它这边

01:00:07.980 --> 01:00:09.500
这边的话

01:00:09.500 --> 01:00:10.380
看一下它的实力

01:00:12.380 --> 01:00:14.060
这边它是selectable

01:00:17.260 --> 01:00:18.140
抽象节点

01:00:18.140 --> 01:00:19.820
这个是指定默认节点了

01:00:19.820 --> 01:00:20.300
不是这个

01:00:21.260 --> 01:00:22.620
哦我们这边

01:00:22.620 --> 01:00:24.060
这边的话我们还少了一步

01:00:24.940 --> 01:00:25.900
还少了一步

01:00:25.900 --> 01:00:27.020
你看它这边还有一个

01:00:27.020 --> 01:00:29.020
using components这边

01:00:29.020 --> 01:00:30.460
是不是使用这两个

01:00:30.460 --> 01:00:30.940
对不对

01:00:30.940 --> 01:00:32.540
好这个是在哪里指定呢

01:00:32.540 --> 01:00:35.900
这个的话是在index

01:00:36.620 --> 01:00:37.180
就这边

01:00:38.780 --> 01:00:39.980
我们回到这边

01:00:39.980 --> 01:00:41.420
我们这边的话是什么

01:00:41.420 --> 01:00:43.580
我们这边是不是在index这个页面

01:00:44.780 --> 01:00:45.500
对不对

01:00:45.500 --> 01:00:46.380
index这个页面

01:00:46.380 --> 01:00:48.300
我们这边是不是使用了sele

01:00:48.300 --> 01:00:49.500
sel2

01:00:49.500 --> 01:00:50.060
对不对

01:00:50.140 --> 01:00:51.100
所以你在这边的话

01:00:51.100 --> 01:00:51.980
你还需要指定

01:00:54.400 --> 01:00:55.200
还需要指定

01:00:56.880 --> 01:00:57.680
ok

01:00:57.680 --> 01:01:00.080
这边是sele

01:01:01.840 --> 01:01:04.240
然后sele

01:01:05.920 --> 01:01:06.240
好

01:01:06.240 --> 01:01:07.760
然后接下来这边的话

01:01:07.760 --> 01:01:08.000
2

01:01:10.530 --> 01:01:11.170
这边2

01:01:13.410 --> 01:01:13.570
2

01:01:14.290 --> 01:01:15.090
ok

01:01:15.090 --> 01:01:15.890
这边编一下

01:01:16.770 --> 01:01:17.410
少了这一步

01:01:18.770 --> 01:01:19.570
有了吧

01:01:20.370 --> 01:01:21.330
是不是有了

01:01:21.330 --> 01:01:21.970
对不对

01:01:21.970 --> 01:01:23.490
这边这个这个按钮

01:01:23.570 --> 01:01:24.050
下面这个

01:01:24.050 --> 01:01:25.090
这个是输入框

01:01:25.730 --> 01:01:26.290
是不是就有了

01:01:26.930 --> 01:01:27.250
对不对

01:01:27.250 --> 01:01:27.570
来来来

01:01:27.570 --> 01:01:28.530
我们把步骤记录一下

01:01:29.250 --> 01:01:30.370
步骤还是有那么一些

01:01:31.730 --> 01:01:32.210
首先

01:01:34.700 --> 01:01:35.900
首先第一步

01:01:37.740 --> 01:01:38.220
需要什么

01:01:40.220 --> 01:01:42.300
我们这边从使用开始入手吧

01:01:42.300 --> 01:01:43.260
首先第一步

01:01:43.260 --> 01:01:44.380
我们在使用的时候

01:01:44.940 --> 01:01:45.340
我们

01:01:47.260 --> 01:01:50.700
我们在使用自定义

01:01:51.260 --> 01:01:52.940
主键的时候

01:01:53.660 --> 01:01:55.020
可以将什么

01:01:55.020 --> 01:01:57.420
是不是另外的自定义

01:01:58.140 --> 01:01:58.620
主键

01:01:59.500 --> 01:02:01.020
然后像什么呢

01:02:01.020 --> 01:02:02.300
像这个pops一样

01:02:02.940 --> 01:02:04.460
pops一样

01:02:04.460 --> 01:02:05.100
是传入

01:02:06.460 --> 01:02:07.180
对不对

01:02:07.180 --> 01:02:07.500
好

01:02:07.500 --> 01:02:08.300
我们把这个

01:02:08.300 --> 01:02:09.100
把他过来

01:02:09.980 --> 01:02:10.780
就这边

01:02:12.940 --> 01:02:13.660
把他过来

01:02:15.100 --> 01:02:16.060
放到笔记里面

01:02:16.860 --> 01:02:17.260
对不对

01:02:17.900 --> 01:02:20.060
然后在上面的代码中

01:02:21.020 --> 01:02:23.580
在上面的代码中

01:02:24.060 --> 01:02:25.820
我们使用了什么呢

01:02:25.820 --> 01:02:27.340
使用了item4

01:02:28.060 --> 01:02:29.820
这个自定义

01:02:29.820 --> 01:02:30.300
主键

01:02:31.020 --> 01:02:33.020
然后我们还干嘛呢

01:02:33.020 --> 01:02:34.540
还将这个

01:02:34.540 --> 01:02:35.180
还分别

01:02:35.740 --> 01:02:37.580
我们还分别

01:02:38.220 --> 01:02:43.260
将s1al1和s1al2

01:02:44.060 --> 01:02:44.780
作为什么呢

01:02:44.780 --> 01:02:45.900
作为pops

01:02:45.900 --> 01:02:46.940
就类似于pops

01:02:47.580 --> 01:02:48.540
pops

01:02:48.620 --> 01:02:49.900
传入到了

01:02:50.860 --> 01:02:52.860
传入到了item4

01:02:53.500 --> 01:02:53.900
里面

01:02:54.620 --> 01:02:55.100
对吧

01:02:55.100 --> 01:02:55.340
好

01:02:55.340 --> 01:02:55.660
注意

01:02:56.860 --> 01:02:59.260
这里需要在什么

01:02:59.260 --> 01:03:02.140
在这个对应的这个接触

01:03:02.860 --> 01:03:05.020
文件中注册

01:03:05.740 --> 01:03:06.700
s1al1

01:03:07.180 --> 01:03:08.780
然后s1al2

01:03:08.780 --> 01:03:09.740
包括什么

01:03:09.740 --> 01:03:10.940
包括这个item4

01:03:12.540 --> 01:03:13.420
这几个主键

01:03:16.620 --> 01:03:17.420
对不对

01:03:17.420 --> 01:03:19.660
要注册在对应的这个接触中

01:03:19.740 --> 01:03:20.940
我们这边的话是在

01:03:22.220 --> 01:03:22.700
在这里

01:03:23.260 --> 01:03:23.900
注册了的

01:03:24.460 --> 01:03:24.700
对不对

01:03:25.180 --> 01:03:25.420
好

01:03:25.420 --> 01:03:26.540
然后完事之后

01:03:26.540 --> 01:03:27.980
然后接下来的话在

01:03:29.260 --> 01:03:30.140
item4

01:03:31.180 --> 01:03:32.300
item4这边

01:03:32.700 --> 01:03:33.180
好

01:03:33.180 --> 01:03:34.540
然后在item4主键中

01:03:34.540 --> 01:03:35.340
然后写一个什么呢

01:03:35.340 --> 01:03:36.860
写一个这个selectable

01:03:37.580 --> 01:03:38.460
是不是用来接受

01:03:39.260 --> 01:03:39.580
对吧

01:03:41.020 --> 01:03:41.260
好

01:03:41.900 --> 01:03:42.380
接下来

01:03:44.300 --> 01:03:47.580
接下来在这个item4中

01:03:48.540 --> 01:03:51.180
是这个自定义

01:03:51.740 --> 01:03:52.940
主键中

01:03:52.940 --> 01:03:54.540
然后输写什么呢

01:03:54.540 --> 01:03:56.460
输写selectable

01:03:57.660 --> 01:03:58.060
来

01:03:59.020 --> 01:03:59.580
渲染

01:04:00.460 --> 01:04:02.540
传入的自定义

01:04:03.180 --> 01:04:03.580
主键

01:04:04.220 --> 01:04:04.620
ok

01:04:05.020 --> 01:04:06.540
这边的话对应的就是

01:04:06.540 --> 01:04:07.180
这个样子的

01:04:08.140 --> 01:04:08.620
对吧

01:04:08.620 --> 01:04:08.780
啊

01:04:08.780 --> 01:04:09.420
他回头的话

01:04:09.420 --> 01:04:09.820
你这边

01:04:10.300 --> 01:04:11.420
这个select1

01:04:11.420 --> 01:04:12.540
就会被渲染到

01:04:12.540 --> 01:04:13.580
这个selectable

01:04:13.580 --> 01:04:14.540
这个位置

01:04:14.540 --> 01:04:14.700
啊

01:04:14.700 --> 01:04:15.500
这边传入的

01:04:15.820 --> 01:04:17.020
s1al2

01:04:17.020 --> 01:04:18.300
就会也会渲染到

01:04:18.300 --> 01:04:19.260
这个位置

01:04:19.260 --> 01:04:19.820
对吧

01:04:19.820 --> 01:04:20.060
好

01:04:20.060 --> 01:04:20.700
那就这边的话

01:04:20.700 --> 01:04:21.820
然后还有一步是什么呢

01:04:21.820 --> 01:04:23.900
还有一步就是在你的这个

01:04:23.900 --> 01:04:24.860
这边这个接生

01:04:25.740 --> 01:04:26.460
接生中

01:04:26.460 --> 01:04:29.260
你需要开启selectable为true

01:04:29.820 --> 01:04:30.060
啊

01:04:32.370 --> 01:04:32.530
啊

01:04:32.530 --> 01:04:32.930
另外

01:04:35.330 --> 01:04:37.410
另外在接收

01:04:38.370 --> 01:04:39.490
渲染主键

01:04:39.490 --> 01:04:41.090
我们把这个称之为渲染主键

01:04:41.090 --> 01:04:41.570
啊

01:04:41.570 --> 01:04:43.090
把这个称之为渲染主键

01:04:43.090 --> 01:04:45.010
在接收渲染主键

01:04:45.570 --> 01:04:46.610
的自定义

01:04:47.570 --> 01:04:48.770
自定义

01:04:48.770 --> 01:04:49.730
主键中

01:04:49.730 --> 01:04:49.970
啊

01:04:49.970 --> 01:04:51.170
那我们本利中是什么

01:04:51.170 --> 01:04:52.530
所以本利中是items

01:04:53.250 --> 01:04:53.650
对不对

01:04:54.130 --> 01:04:54.690
啊

01:04:54.690 --> 01:04:55.330
得什么

01:04:55.330 --> 01:04:55.570
什么

01:04:55.570 --> 01:04:56.770
接生

01:04:56.770 --> 01:04:58.290
文件中

01:04:58.290 --> 01:04:58.930
需要什么

01:04:58.930 --> 01:05:01.650
是不是需要开启selectable

01:05:03.090 --> 01:05:03.410
对不对

01:05:04.210 --> 01:05:05.170
这边对应的是

01:05:06.450 --> 01:05:06.850
这个

01:05:07.330 --> 01:05:07.490
啊

01:05:07.490 --> 01:05:08.370
你需要把它开启

01:05:09.170 --> 01:05:09.410
好

01:05:09.410 --> 01:05:10.850
其他的话就没什么了

01:05:11.490 --> 01:05:11.650
啊

01:05:11.650 --> 01:05:12.690
其他的话就没什么了

01:05:12.690 --> 01:05:13.170
啊

01:05:13.170 --> 01:05:13.810
ok

01:05:13.810 --> 01:05:15.970
这个的话实际上就和这个react

01:05:15.970 --> 01:05:17.090
的这个RenderPops

01:05:17.810 --> 01:05:18.770
是一样的

01:05:18.770 --> 01:05:19.810
这个有什么作用呢

01:05:20.690 --> 01:05:20.770
啊

01:05:20.770 --> 01:05:21.730
有没有同学说

01:05:21.730 --> 01:05:23.730
这个东西和插槽很类似呀

01:05:24.370 --> 01:05:24.610
啊

01:05:24.610 --> 01:05:25.330
有没有这样的疑问

01:05:26.130 --> 01:05:26.690
啊

01:05:26.690 --> 01:05:28.050
如果有同学有这样的疑问的话

01:05:28.050 --> 01:05:28.930
很不错啊

01:05:28.930 --> 01:05:30.130
说明你在思考啊

01:05:30.770 --> 01:05:31.490
就这玩意儿

01:05:33.010 --> 01:05:36.130
这玩意儿和这个插槽

01:05:37.890 --> 01:05:38.210
啊

01:05:38.210 --> 01:05:38.930
非常类似

01:05:40.610 --> 01:05:41.410
非常类似

01:05:42.050 --> 01:05:42.770
对不对

01:05:42.770 --> 01:05:43.090
啊

01:05:43.090 --> 01:05:45.490
那这边我就用这个插槽就可以了呗

01:05:46.050 --> 01:05:48.370
我为什么这边还搞一个这个抽象节点啊

01:05:49.330 --> 01:05:50.210
为啥还搞一个这个

01:05:51.570 --> 01:05:55.410
首先第一个你这边传入的是一个完整的这个

01:05:55.410 --> 01:05:55.890
组件

01:05:56.930 --> 01:05:57.490
对不对

01:05:57.490 --> 01:05:59.410
你这边传的是一个完整的组件

01:05:59.410 --> 01:06:01.330
插槽的话一般是什么呢

01:06:01.330 --> 01:06:02.610
一般是一些这个

01:06:03.250 --> 01:06:05.810
wxml的一些这个代码片段

01:06:06.610 --> 01:06:07.010
对不对

01:06:07.010 --> 01:06:08.290
这是首先第一个区别

01:06:08.290 --> 01:06:08.530
啊

01:06:08.530 --> 01:06:09.650
但有的同学说不对啊

01:06:09.650 --> 01:06:10.370
你刚才那个

01:06:10.930 --> 01:06:11.970
就刚才你这边

01:06:14.050 --> 01:06:14.610
这边

01:06:14.690 --> 01:06:16.850
这边你这个uol和力

01:06:16.850 --> 01:06:17.090
啊

01:06:17.090 --> 01:06:18.530
这个不也是两个这个

01:06:19.490 --> 01:06:20.450
自定义组件吗

01:06:20.450 --> 01:06:22.930
不也是通过这个插槽的方式来做的吗

01:06:22.930 --> 01:06:23.010
啊

01:06:23.010 --> 01:06:23.650
这个

01:06:23.650 --> 01:06:24.850
倒也是啊

01:06:24.850 --> 01:06:26.370
它实际上它这边的话

01:06:27.330 --> 01:06:30.850
你如果听过解老师之前讲的这个react的这个RenderPops

01:06:31.410 --> 01:06:34.690
那我之前的话在讲这个react的RenderPops的时候

01:06:34.690 --> 01:06:37.170
那这个react这个RenderPops它是干嘛的

01:06:37.890 --> 01:06:41.330
它主要就是拿来是不是抽离公共的逻辑

01:06:42.290 --> 01:06:42.690
对不对

01:06:43.250 --> 01:06:43.490
啊

01:06:44.210 --> 01:06:45.730
这个抽象节点

01:06:46.690 --> 01:06:48.850
这个抽象节点

01:06:50.290 --> 01:06:51.650
抽象节点

01:06:52.690 --> 01:06:54.610
就前面已经说了和什么呢

01:06:54.610 --> 01:06:59.090
和react的这个RenderPops

01:06:59.810 --> 01:07:00.530
非常相似

01:07:01.970 --> 01:07:02.850
对不对

01:07:02.850 --> 01:07:03.730
主要作用

01:07:04.450 --> 01:07:07.410
主要作用是什么呢

01:07:07.410 --> 01:07:13.250
是用来抽离公共的这个逻辑

01:07:13.410 --> 01:07:14.370
就横向抽离

01:07:16.210 --> 01:07:19.170
横向抽离公共的逻辑

01:07:19.730 --> 01:07:19.890
啊

01:07:19.890 --> 01:07:24.530
因为我们是传入的一个组件

01:07:25.170 --> 01:07:25.570
对吧

01:07:25.570 --> 01:07:29.170
那组件里面是一套什么

01:07:29.170 --> 01:07:32.370
是不是是一套完整的功能

01:07:34.210 --> 01:07:34.770
对不对

01:07:34.770 --> 01:07:36.210
是一套完整的功能

01:07:36.210 --> 01:07:37.010
那回头的话

01:07:37.010 --> 01:07:40.370
我把就是有一些公共的这些逻辑

01:07:40.370 --> 01:07:41.890
单独拿一个这个组件

01:07:42.530 --> 01:07:42.770
啊

01:07:43.730 --> 01:07:44.370
回头

01:07:44.370 --> 01:07:49.490
我们可以将一些公共的这个逻辑

01:07:51.330 --> 01:07:53.250
公共的业务逻辑

01:07:53.890 --> 01:07:53.970
啊

01:07:53.970 --> 01:07:56.450
这个公共的业务逻辑就包含一套

01:07:56.450 --> 01:07:57.810
就是包含你的这个仕途

01:07:58.930 --> 01:08:00.130
包含你的这个仕途

01:08:00.130 --> 01:08:02.210
包含你的这个数据啊

01:08:02.210 --> 01:08:03.570
包含你的什么所行为

01:08:04.210 --> 01:08:04.770
这些东西

01:08:05.570 --> 01:08:05.970
对不对

01:08:05.970 --> 01:08:07.730
他就就全部封装在了

01:08:07.730 --> 01:08:08.050
什么

01:08:08.050 --> 01:08:09.730
是不是封装在这个组件里面了

01:08:09.730 --> 01:08:10.370
对不对

01:08:10.370 --> 01:08:10.530
啊

01:08:10.530 --> 01:08:12.610
我们可以把这个公共的业务逻辑

01:08:12.690 --> 01:08:13.650
是不是单独的

01:08:14.210 --> 01:08:15.330
单独的

01:08:15.330 --> 01:08:17.250
以这个组件的形式

01:08:18.370 --> 01:08:20.210
组件的形式

01:08:20.210 --> 01:08:21.170
是抽离出来

01:08:23.250 --> 01:08:23.890
对不对

01:08:23.890 --> 01:08:26.370
他主要是做这个事情用的

01:08:26.370 --> 01:08:26.850
啊

01:08:26.850 --> 01:08:28.290
主要是做这个用的

01:08:28.290 --> 01:08:29.090
ok

01:08:29.090 --> 01:08:29.250
啊

01:08:29.250 --> 01:08:31.090
这是关于抽象节点

01:08:33.330 --> 01:08:34.050
好

01:08:34.050 --> 01:08:34.610
呃

01:08:34.610 --> 01:08:35.490
抽象节点的话

01:08:35.490 --> 01:08:37.570
差不多也就给大家介绍的差不多了

01:08:37.570 --> 01:08:37.730
啊

01:08:37.730 --> 01:08:38.930
剩下的你就自己去看了

01:08:38.930 --> 01:08:39.970
什么这个默认组件

01:08:39.970 --> 01:08:41.570
这些都不是什么难事啊

01:08:41.650 --> 01:08:43.650
我这边主要就是给你讲清楚

01:08:43.650 --> 01:08:43.890
啊

01:08:43.890 --> 01:08:45.570
这个东西是什么

01:08:45.570 --> 01:08:46.050
对吧

01:08:46.050 --> 01:08:47.570
这个东西又是什么

01:08:47.570 --> 01:08:47.650
啊

01:08:47.650 --> 01:08:49.010
这个东西又是什么

01:08:49.010 --> 01:08:50.930
我只要把这个东西给你讲清楚

01:08:50.930 --> 01:08:52.450
后面你都可以自己看的

01:08:53.410 --> 01:08:54.050
对不对

01:08:54.050 --> 01:08:54.130
啊

01:08:54.130 --> 01:08:55.170
主要就害怕你这边的话

01:08:55.170 --> 01:08:56.530
你不知道这个东西是什么啊

01:08:56.530 --> 01:08:57.090
看了

01:08:57.090 --> 01:08:58.050
看了半天也没看懂

01:08:58.050 --> 01:08:59.250
这玩意是什么

01:08:59.250 --> 01:09:00.290
我这边给你讲了之后

01:09:00.290 --> 01:09:02.050
你是剩下的就都能看懂了

01:09:02.690 --> 01:09:03.090
好吧

01:09:03.570 --> 01:09:04.130
啊

01:09:04.130 --> 01:09:05.650
就是关于这个

01:09:05.650 --> 01:09:06.850
制定组件

01:09:06.850 --> 01:09:07.010
啊

01:09:07.010 --> 01:09:07.730
制定组件的话

01:09:07.730 --> 01:09:09.970
咱们介绍到这就差不多了

01:09:09.970 --> 01:09:10.130
啊

01:09:10.130 --> 01:09:11.090
后面的这些东西

01:09:11.090 --> 01:09:11.730
你有兴趣的话

01:09:11.730 --> 01:09:13.410
你自己去看一下啊

01:09:13.410 --> 01:09:14.850
实际上你一般来讲

01:09:14.850 --> 01:09:16.850
你写这个制定组件的话

01:09:16.850 --> 01:09:17.730
实际上前面的话

01:09:17.730 --> 01:09:19.490
就已经就够用了

01:09:19.490 --> 01:09:21.170
完全够用了

01:09:21.170 --> 01:09:21.730
OK

01:09:21.730 --> 01:09:22.930
完全够用了

01:09:22.930 --> 01:09:23.010
啊

01:09:23.010 --> 01:09:23.650
后面的话

01:09:23.650 --> 01:09:25.490
我们看就是第五章

01:09:25.490 --> 01:09:26.850
到时候写一些案例的时候

01:09:26.850 --> 01:09:27.890
会不会涉及到

01:09:27.890 --> 01:09:28.530
如果涉及到

01:09:28.530 --> 01:09:29.170
我们再反过来

01:09:29.170 --> 01:09:30.610
我们再看一下就可以了

01:09:30.610 --> 01:09:30.690
啊

01:09:30.690 --> 01:09:32.130
这些都不是问题

01:09:32.130 --> 01:09:33.010
是吧

01:09:33.010 --> 01:09:33.890
OK

01:09:33.890 --> 01:09:34.210
好

01:09:34.210 --> 01:09:34.930
那下几课的话

01:09:34.930 --> 01:09:36.690
咱们还是用这个制定组件

01:09:36.690 --> 01:09:38.290
咱们来写个案例吧

01:09:38.290 --> 01:09:38.850
啊

01:09:38.850 --> 01:09:39.570
写个这个

01:09:39.650 --> 01:09:41.170
图图list的这个案例

01:09:41.170 --> 01:09:42.130
OK

01:09:42.130 --> 01:09:42.450
好

01:09:42.450 --> 01:09:43.810
这一课就到这里

01:09:43.810 --> 01:09:43.970
好

01:09:43.970 --> 01:09:44.690
大家下去的话

01:09:44.690 --> 01:09:46.130
把这一课的这个代码

01:09:46.130 --> 01:09:47.650
自己把它过一过

01:09:47.650 --> 01:09:48.370
OK

01:09:48.370 --> 01:09:48.690
好

01:09:48.690 --> 01:09:49.970
这一课就到这里啊

01:09:49.970 --> 01:09:50.290
再见

