WEBVTT

00:00.000 --> 00:03.600
我们这节课来看一下小程序里面的这个分包

00:03.600 --> 00:05.720
而某些情况下的话

00:05.720 --> 00:10.400
开发者需要将小程序划分成不同的这个纸包

00:10.400 --> 00:13.920
在构建的时候就打包成不同的这个分包

00:13.920 --> 00:15.560
那这样做有什么好处呢

00:15.560 --> 00:18.160
这样做的好处就是用户在使用的时候

00:18.160 --> 00:21.120
可以进行一个按须的这个夹杂

00:21.120 --> 00:23.800
我们这边来看一下

00:23.800 --> 00:27.160
在小程序启动时 默认会下载什么呢

00:27.160 --> 00:28.920
默认会下载主包

00:29.040 --> 00:30.320
前提是你分了包的

00:30.320 --> 00:33.120
你分了包你有那个主包和纸包

00:33.120 --> 00:35.720
就默认你他会下载这个主包

00:35.720 --> 00:38.720
然后并启动主包内的这个页面

00:38.720 --> 00:42.120
好 当用户进行分包内的某个页面的时候

00:42.120 --> 00:45.320
那客户端的话才会把这个对应的这个分包

00:45.320 --> 00:46.720
把它下载下来

00:46.720 --> 00:50.320
那这个是不是就是我们之前所说的按须进行夹杂

00:50.320 --> 00:53.520
对不对 下载完成后再进行这个展示

00:53.520 --> 00:56.320
好 那么目前目前的话小程序的这个分包

00:56.320 --> 00:58.920
它大小的话它有这么一个限制

00:58.920 --> 01:00.120
我们来看一下

01:00.120 --> 01:04.920
整个小程序所有分包大小超过20兆

01:04.920 --> 01:07.120
因为它毕竟要保证它的这个程序

01:07.120 --> 01:08.720
它毕竟是个小程序

01:08.720 --> 01:12.320
对不对 好的 第二个单个分包

01:12.320 --> 01:14.520
就单个分包或者主包的大小

01:14.520 --> 01:15.720
反正就是单个包

01:15.720 --> 01:18.320
单个包的话不能超过两兆

01:18.320 --> 01:21.320
OK 整体来讲的话有这么一样的一个规定

01:21.320 --> 01:22.320
所以你看在小程序里面

01:22.320 --> 01:23.920
比如说你想展示图片

01:23.920 --> 01:25.720
一般那个图片都不是写在那个

01:25.720 --> 01:28.920
就是都不会打包在你的那个小程序里面的

01:28.920 --> 01:31.920
一般都是通过网络请求得到了这个图片

01:31.920 --> 01:33.320
OK 因为小程序

01:33.320 --> 01:35.320
我们一开始就讲过小程序小程序

01:35.320 --> 01:36.920
你必须要保证什么

01:36.920 --> 01:39.120
是不是你的这个程序足够的小

01:39.120 --> 01:40.920
对吧 好

01:40.920 --> 01:42.720
然后这边来看一下

01:42.720 --> 01:46.320
这边官方文档提供了这边这个内容

01:46.320 --> 01:50.320
使用分包独立分包分包预加展在这里

01:50.320 --> 01:52.720
刚刚我好像打开了的

01:52.720 --> 01:54.520
在这边

01:54.520 --> 01:58.520
看到没有 这边使用分包独立分包预加展一步化

01:58.520 --> 02:00.120
我们这边我们来看一下

02:00.120 --> 02:01.720
所以我们这边来看个例子

02:01.720 --> 02:03.120
使用我们来看一下以前

02:03.120 --> 02:06.320
比如说这个是我们之前讲的这个to do list

02:06.320 --> 02:08.920
之前的话我们没有做任何的分包

02:08.920 --> 02:09.520
对不对

02:09.520 --> 02:10.720
没有做任何分包的话

02:10.720 --> 02:13.920
然后接下来你在这边详情在这里

02:13.920 --> 02:14.920
这里你点开

02:14.920 --> 02:15.520
点开之后

02:15.520 --> 02:17.920
你看他这边有一个本地代码

02:17.920 --> 02:19.120
80kb

02:19.120 --> 02:20.920
OK 那这边的话就是什么

02:20.920 --> 02:22.520
是不是就整个代码

02:22.520 --> 02:22.720
对不对

02:22.720 --> 02:23.720
没有做任何的分包

02:23.720 --> 02:25.920
所以整个代码就是80kb

02:25.920 --> 02:26.120
好

02:26.120 --> 02:29.820
然后接下来的话你再来看这个

02:29.820 --> 02:30.820
再来看这个

02:30.820 --> 02:31.020
好

02:31.020 --> 02:33.620
这个的话就是做了这个分包的

02:33.620 --> 02:34.620
至于他怎么做的

02:34.620 --> 02:36.020
这个我们一会再看

02:36.020 --> 02:37.020
这个是做了分包的

02:37.020 --> 02:37.620
然后接下来的话

02:37.620 --> 02:38.620
你做了分包之后

02:38.620 --> 02:40.620
你在这边同样是详情

02:40.620 --> 02:42.420
这边本地代码

02:42.420 --> 02:44.220
你在这边你就可以看得到

02:44.220 --> 02:45.620
这边的话39kb

02:45.620 --> 02:47.220
大家看这边有个什么

02:47.220 --> 02:48.620
是不是有个箭头

02:48.620 --> 02:49.420
看到没有

02:49.420 --> 02:51.220
你做了分包之后

02:51.220 --> 02:52.220
那这边有个箭头

02:52.220 --> 02:53.820
大家你把这个箭头展开

02:53.820 --> 02:55.820
你看他这边就会告诉你

02:55.820 --> 02:58.220
你的主包有多大

02:58.220 --> 02:58.820
那接下来的话

02:58.820 --> 03:00.620
你这个分包有多大

03:00.620 --> 03:01.620
这个就是个纸包

03:01.620 --> 03:02.220
对不对

03:02.220 --> 03:04.620
大家这个纸包有多大

03:04.620 --> 03:05.220
看到没有

03:05.220 --> 03:07.020
这边你其实就看得到

03:07.020 --> 03:08.020
只要你做了分包

03:08.020 --> 03:10.020
这边就立马就看得到

03:10.020 --> 03:10.820
OK

03:10.820 --> 03:11.620
那接下来的话

03:11.620 --> 03:15.020
咱们看一下如何来做分包呢

03:15.020 --> 03:16.420
实际上非常简单

03:16.420 --> 03:18.520
你这边只需要在这个APP点接胜

03:18.520 --> 03:20.820
这边配置一下就可以了

03:20.820 --> 03:21.420
OK

03:21.420 --> 03:21.920
怎么配置

03:21.920 --> 03:22.920
你看以前的话

03:22.920 --> 03:24.720
我们这边是不是就是配置

03:24.720 --> 03:25.520
这个这里面是不是

03:25.520 --> 03:27.420
就是我们一个一个的页面

03:27.420 --> 03:27.920
对不对

03:27.920 --> 03:29.320
这个大家非常熟悉

03:29.320 --> 03:29.520
好

03:29.520 --> 03:31.620
如果我想要做分包

03:31.620 --> 03:33.620
那接下来我增加一项叫做

03:33.620 --> 03:36.320
sabpackages

03:36.320 --> 03:36.920
看到没有

03:36.920 --> 03:38.220
sabpackages

03:38.220 --> 03:38.420
好

03:38.420 --> 03:39.820
大家这边是一个数组

03:39.820 --> 03:40.620
数组里面

03:40.620 --> 03:43.520
一个包就是一个这个对象

03:43.520 --> 03:44.820
一个包就是一个对象

03:44.820 --> 03:45.020
好

03:45.020 --> 03:46.020
大家这边这个对象里面

03:46.020 --> 03:48.220
你看这边有这个root

03:48.220 --> 03:51.220
大家这边是配置的package2

03:51.220 --> 03:52.920
大家这边是你包的内幕

03:52.920 --> 03:53.820
然后接下来的话

03:53.820 --> 03:57.320
你这个包对应有哪些页面

03:57.320 --> 03:57.920
看到没有

03:57.920 --> 03:59.120
对应有哪些页面

03:59.120 --> 04:01.120
比如说我这个package是cat

04:01.120 --> 04:03.420
还有package是这个dog

04:03.420 --> 04:04.320
这两个是什么

04:04.320 --> 04:07.120
这两个的话是属于这个分包里面的

04:07.120 --> 04:07.920
然后接下来的话

04:07.920 --> 04:08.620
这两个页面

04:08.620 --> 04:10.120
ample和blana

04:10.120 --> 04:10.820
它是属于什么

04:10.820 --> 04:12.520
是属于package3

04:12.520 --> 04:13.720
这个分包里面的

04:13.720 --> 04:13.920
好

04:13.920 --> 04:16.020
其他的话这个package1

04:16.020 --> 04:18.320
这边那就是主帮

04:18.320 --> 04:19.120
我们这边我们来看一下

04:19.120 --> 04:20.020
先来看一下

04:20.020 --> 04:21.420
这边我们这个package是

04:21.420 --> 04:22.920
先看一下这边

04:22.920 --> 04:23.820
展开

04:23.820 --> 04:24.420
展开的话

04:24.420 --> 04:27.020
你可以看到这边是不是有这个package1

04:27.020 --> 04:27.620
2

04:27.620 --> 04:28.820
3

04:28.820 --> 04:29.420
对不对

04:29.420 --> 04:30.620
也就是说我这边的话

04:30.620 --> 04:32.220
package2里面的

04:32.220 --> 04:33.620
我是单独做了一个什么

04:33.620 --> 04:35.120
单独做了一个纸包

04:35.120 --> 04:37.420
把这个package2展开

04:37.420 --> 04:39.220
这边的package是不是有cat

04:39.220 --> 04:40.420
有dog

04:40.420 --> 04:41.120
对不对

04:41.120 --> 04:41.320
好

04:41.320 --> 04:42.620
那package3

04:42.620 --> 04:43.420
这边展开

04:43.420 --> 04:45.620
这边是有ample有blana

04:45.620 --> 04:47.020
是不是单独的一个包

04:47.020 --> 04:47.420
对不对

04:47.420 --> 04:48.920
然后接下来package1

04:48.920 --> 04:49.620
下面的

04:49.620 --> 04:50.320
这个就是什么了

04:50.320 --> 04:51.020
这个

04:51.020 --> 04:52.720
这个package是下面的这些

04:52.720 --> 04:54.320
这些的话就是在主帮里面

04:54.320 --> 04:55.920
一开始就会夹仔的

04:55.920 --> 04:56.620
ok

04:56.620 --> 04:56.820
好

04:56.820 --> 04:57.420
然后现在的话

04:57.420 --> 04:58.320
这个页面

04:58.320 --> 04:58.920
夹仔出来

04:58.920 --> 04:59.920
现在是这样子的

04:59.920 --> 05:00.520
你这边的话

05:00.520 --> 05:01.520
没有问题

05:01.520 --> 05:01.820
对不对

05:01.820 --> 05:02.420
这边下面的话

05:02.420 --> 05:04.420
可以正常的切换

05:04.420 --> 05:04.720
好

05:04.720 --> 05:05.320
然后接下来

05:05.320 --> 05:06.320
我到这时候

05:06.320 --> 05:07.320
你看点击这里

05:08.520 --> 05:09.620
点击这里

05:09.620 --> 05:10.520
点击这的话

05:10.520 --> 05:10.920
就是什么

05:10.920 --> 05:13.420
就是package2cat

05:13.420 --> 05:15.220
就我这边做的链接

05:15.220 --> 05:16.420
package2cat

05:16.420 --> 05:17.220
那这个时候

05:17.220 --> 05:18.120
它就会干嘛

05:18.120 --> 05:19.620
这个时候它是不是就会夹仔

05:19.620 --> 05:21.020
package2

05:21.020 --> 05:22.720
里面的这个cat

05:22.720 --> 05:23.320
对不对

05:23.320 --> 05:25.020
它应该是夹仔整个包

05:25.020 --> 05:26.920
把整个包就夹仔出来了

05:26.920 --> 05:28.820
我把那清空一下吧

05:28.820 --> 05:30.420
好走

05:30.420 --> 05:32.420
这边ok

05:32.420 --> 05:32.820
等一下

05:32.820 --> 05:34.920
我们重新重新来一下

05:34.920 --> 05:35.920
重新来一下

05:35.920 --> 05:36.420
首先的话

05:36.420 --> 05:37.220
这边这边的话

05:37.220 --> 05:38.520
是这个主帮

05:38.520 --> 05:39.220
然后接下来

05:39.220 --> 05:41.220
我这边到这个cat

05:41.220 --> 05:43.320
这边应该是我看下面配的table

05:45.120 --> 05:46.720
这边是package1

05:46.820 --> 05:48.520
配级下面的cat

05:48.520 --> 05:50.120
过来

05:50.120 --> 05:50.820
过来的话

05:50.820 --> 05:53.120
它这边就已经夹仔这个纸包了

05:53.120 --> 05:53.520
看到没有

05:53.520 --> 05:56.520
我这边有一个prayload subpackages

05:56.520 --> 05:57.320
pack2

05:57.320 --> 05:58.720
success

05:58.720 --> 05:59.020
看到没有

05:59.020 --> 05:59.720
到这边的话

05:59.720 --> 06:01.620
因为我这边要用到这个纸包

06:01.620 --> 06:01.920
对不对

06:01.920 --> 06:03.820
我这边会用到package2

06:03.820 --> 06:06.320
它这边就已经就夹仔了

06:06.320 --> 06:08.320
大家这个是多个

06:08.320 --> 06:09.320
把这个清空

06:09.320 --> 06:11.020
那后面两个

06:11.020 --> 06:11.620
后面两个的话

06:11.620 --> 06:12.620
它就会夹仔什么

06:12.620 --> 06:14.920
夹仔这个package3

06:14.920 --> 06:15.420
对不对

06:15.420 --> 06:16.520
走

06:16.520 --> 06:17.420
看到没有

06:17.420 --> 06:19.220
这边就夹仔了pack3

06:19.220 --> 06:20.220
success

06:20.220 --> 06:23.640
OK

06:23.640 --> 06:25.740
所以说整个这个分包的配置

06:25.740 --> 06:26.440
整体来讲的话

06:26.440 --> 06:27.940
其实也是比较简单的

06:27.940 --> 06:30.940
这边你就在这个subpackages里面

06:30.940 --> 06:32.340
配置一下就可以了

06:32.340 --> 06:33.340
OK

06:33.340 --> 06:33.640
好

06:33.640 --> 06:35.540
然后我们继续往下面看

06:35.540 --> 06:36.940
这个的话就是刚才那个

06:36.940 --> 06:37.940
就刚才那个项目

06:37.940 --> 06:39.440
这边做了一个简单的介绍

06:39.440 --> 06:41.340
这边在这个subpackages里面

06:41.340 --> 06:43.140
进行一个这个配置

06:43.140 --> 06:45.040
这边写了个文档

06:45.040 --> 06:46.240
好

06:46.240 --> 06:48.340
然后接下来这个subpackages里面

06:48.440 --> 06:50.940
它的这个对应的值是一个数组

06:50.940 --> 06:52.840
数组里面是一个对象

06:52.840 --> 06:53.240
对吧

06:53.240 --> 06:55.140
我们这边看看到

06:55.140 --> 06:58.340
subpackages对应的是一个数组

06:58.340 --> 06:59.740
这边对应的是一个数组

06:59.740 --> 07:00.840
数组里面是什么

07:00.840 --> 07:03.140
数组里面是不是一个一个的这个对象

07:03.140 --> 07:04.140
一个对象代表什么

07:04.140 --> 07:05.940
是不是代表一个分包

07:05.940 --> 07:07.040
代表一个纸包

07:07.040 --> 07:08.040
每个对象里面的话

07:08.040 --> 07:10.040
有这些有入程内幕

07:10.040 --> 07:10.940
然后配置

07:10.940 --> 07:12.740
还有这个independent

07:12.740 --> 07:14.240
我们这边来看一下

07:14.240 --> 07:15.140
入程

07:15.140 --> 07:17.340
这个是你分包的根木炉

07:17.340 --> 07:19.740
内幕的话是分包的这个别名

07:19.740 --> 07:21.340
预下载的时候可以使用

07:21.340 --> 07:22.340
配置式

07:22.340 --> 07:24.140
那就是你对应的这个包里面

07:24.140 --> 07:25.440
对应的这个页面了

07:25.440 --> 07:25.740
好

07:25.740 --> 07:27.140
然后independent

07:27.140 --> 07:30.340
是否是独立分包

07:30.340 --> 07:31.340
什么是独立分包

07:31.340 --> 07:32.840
我们后面会说

07:32.840 --> 07:33.340
那这边的话

07:33.340 --> 07:34.340
每个对象的话

07:34.340 --> 07:35.740
它就这么四个

07:35.740 --> 07:36.140
对吧

07:36.140 --> 07:37.040
就这么四个

07:37.040 --> 07:37.740
这么四个的话

07:37.740 --> 07:38.840
你看我这边

07:38.840 --> 07:40.740
第一个包就是这个package2

07:40.740 --> 07:42.840
我设置的是独立分包

07:42.840 --> 07:44.740
然后接下来这个package3

07:44.740 --> 07:46.040
这个的话就没有设置

07:46.040 --> 07:48.240
也就是说你是否要成为这个独立分包

07:48.240 --> 07:49.440
实际上也就是干嘛

07:49.440 --> 07:51.740
这配置一个之段就可以了

07:51.740 --> 07:52.140
对不对

07:52.140 --> 07:53.840
我配置成这个independent

07:53.840 --> 07:55.040
它就是独立分包

07:55.040 --> 07:55.640
那接下来的话

07:55.640 --> 07:57.040
这边不配置这个之段

07:57.040 --> 07:58.040
它就不是

07:58.040 --> 07:59.440
那什么是独立分包

07:59.440 --> 08:00.040
我们后面

08:00.040 --> 08:01.240
后面会说

08:01.240 --> 08:01.640
好

08:01.640 --> 08:03.640
继续往后面看

08:03.640 --> 08:03.940
好

08:03.940 --> 08:04.440
那现在的话

08:04.440 --> 08:07.240
我整个这个package下面

08:07.240 --> 08:10.040
有这个package1 2 3

08:10.040 --> 08:10.940
这三个包

08:10.940 --> 08:11.540
其中的话

08:11.540 --> 08:11.940
这边的话

08:11.940 --> 08:13.140
这个是主包

08:13.140 --> 08:14.140
这两个是什么

08:14.140 --> 08:15.540
这两个是纸包

08:15.540 --> 08:16.140
对不对

08:16.140 --> 08:17.440
ok

08:17.440 --> 08:17.640
好

08:17.640 --> 08:19.040
这是刚才那个例子

08:19.040 --> 08:20.540
啊

08:20.540 --> 08:21.640
然后接下来这边

08:21.640 --> 08:21.940
这边的话

08:21.940 --> 08:22.440
你可以看到

08:22.440 --> 08:25.040
这边就会显示出主包和这个纸包

08:25.040 --> 08:26.640
就是我们刚才这里

08:26.640 --> 08:27.240
刚才这边

08:27.240 --> 08:29.240
我们这个详情这里

08:29.240 --> 08:30.740
这边是不是就会显示出来

08:30.740 --> 08:31.140
对不对

08:31.140 --> 08:31.940
package3

08:31.940 --> 08:32.840
package1

08:32.840 --> 08:35.040
主包和两个纸包

08:35.040 --> 08:36.440
ok

08:36.440 --> 08:36.740
好

08:36.740 --> 08:37.940
然后继续往后面

08:37.940 --> 08:38.140
好

08:38.140 --> 08:38.540
那接下来

08:38.540 --> 08:39.040
我们来说一下

08:39.040 --> 08:40.640
这个独立分包

08:40.640 --> 08:41.840
独立分包的话

08:41.840 --> 08:43.340
顾名思义就是什么呢

08:43.340 --> 08:44.740
顾名思义就是这个包

08:44.740 --> 08:46.840
它是独立的啊

08:46.840 --> 08:48.740
那什么又叫做独立呢

08:48.740 --> 08:49.840
所谓独立的话

08:49.840 --> 08:52.740
它是指就不依赖于主包

08:52.740 --> 08:53.940
就能用

08:53.940 --> 08:54.540
ok

08:54.540 --> 08:55.540
当你把它

08:55.540 --> 08:58.640
把一个包设置成这个独立分包的时候

08:58.640 --> 09:00.540
我们从独立分包进入

09:00.540 --> 09:03.240
它不会去加载这个主包

09:03.240 --> 09:04.540
也就是如果比如说像这个

09:06.340 --> 09:07.440
比如说这边

09:07.440 --> 09:07.940
这边的话

09:07.940 --> 09:09.640
比如说我们的这个package3

09:09.640 --> 09:10.840
它是个纸包

09:10.840 --> 09:11.140
对不对

09:11.140 --> 09:12.040
它是个纸包的话

09:12.040 --> 09:12.840
比如说你一开始

09:12.840 --> 09:15.140
你直接进入到这个纸包

09:15.140 --> 09:16.340
进入到这个纸包的话

09:16.340 --> 09:16.740
然后接下来

09:16.740 --> 09:18.140
因为它不是独立分包

09:18.140 --> 09:20.140
它也会去加载什么

09:20.140 --> 09:22.240
它是不是也会去加载主包

09:22.240 --> 09:22.740
对不对

09:22.740 --> 09:23.840
但是比如说你一开始

09:23.840 --> 09:25.340
你进入的比如说就是package

09:25.340 --> 09:26.540
是cat cat

09:26.540 --> 09:27.440
进的是这个页面

09:27.440 --> 09:28.840
这个页面是属于

09:28.840 --> 09:30.440
是package2的这个包

09:30.440 --> 09:30.740
对不对

09:30.740 --> 09:32.740
然后它是个独立分包

09:32.740 --> 09:33.740
它是独立分包的话

09:33.740 --> 09:36.540
它就不会去加载这个主包

09:36.540 --> 09:37.940
就这个意思

09:37.940 --> 09:38.740
明白没有

09:38.740 --> 09:40.040
ok

09:40.040 --> 09:40.740
它只有什么呢

09:40.740 --> 09:43.040
只有在进入主包页面的时候

09:43.040 --> 09:46.040
你从这个独立分包的这个页面

09:46.040 --> 09:48.240
进入到主包页面

09:48.240 --> 09:51.240
或者是这个非独立分包页面

09:51.240 --> 09:51.940
才会什么呢

09:51.940 --> 09:53.440
加载主包

09:53.440 --> 09:54.140
ok

09:54.140 --> 09:56.040
这个就叫独立分包

09:56.040 --> 09:57.140
方法也很简单

09:57.140 --> 09:59.640
只需要把这个independent

09:59.640 --> 10:01.540
配置为q

10:01.540 --> 10:02.440
就ok了

10:02.440 --> 10:03.740
把这个配置为q

10:03.740 --> 10:04.040
ok

10:06.240 --> 10:07.940
这是关于独立分包

10:07.940 --> 10:08.640
独立分包

10:08.640 --> 10:10.140
这边有一些注意事项

10:10.140 --> 10:11.440
这边可以看一下

10:11.440 --> 10:13.040
从独立分包进入的时候

10:13.040 --> 10:14.840
由于没有加载主包

10:14.840 --> 10:16.240
因此你拿就是通过

10:16.240 --> 10:17.040
getapp

10:17.040 --> 10:20.140
方法拿到的是antify

10:20.140 --> 10:20.640
以前的话

10:20.640 --> 10:21.740
我们在每个页面通过

10:21.740 --> 10:22.540
getapp

10:22.540 --> 10:23.440
可以拿到什么

10:23.440 --> 10:24.540
可以拿到那个app

10:24.540 --> 10:25.940
对象的那个实列

10:25.940 --> 10:26.540
对不对

10:26.540 --> 10:28.440
但是你这边从独立分包进入的时候

10:28.440 --> 10:30.940
这边拿到的是antify

10:30.940 --> 10:31.140
好

10:31.140 --> 10:32.840
然后独立分包不能共享

10:32.840 --> 10:34.540
其他包的这个样式

10:34.540 --> 10:37.640
比如说这个app.wxss

10:37.640 --> 10:39.140
这个我们之前说的是什么

10:39.140 --> 10:41.340
是全局的这个样式

10:41.340 --> 10:41.740
对不对

10:41.740 --> 10:43.940
但是你作为一个独立分包

10:43.940 --> 10:47.140
这边就是无法共享这个样式

10:47.140 --> 10:49.140
独立分包不能使用插件

10:49.140 --> 10:51.640
然后低于这个6.7.2

10:51.640 --> 10:53.340
这个版本的这个小程序

10:53.340 --> 10:54.540
会把这个独立分包

10:54.540 --> 10:57.140
当成普通分包来对待

10:57.140 --> 10:58.340
也就是说它这个独立分包

10:58.340 --> 11:01.540
是从这个6.7.2之后开始支持的

11:01.540 --> 11:01.740
对吧

11:04.140 --> 11:06.340
然后为了兼容独立分包

11:06.340 --> 11:08.440
进入这个无法全局管理

11:08.440 --> 11:09.740
变量的这个能力

11:09.740 --> 11:12.340
然后官方在这个基础版本库

11:12.340 --> 11:15.740
2.4.4以后做了这个兼容

11:15.740 --> 11:17.840
你这边可以使用这个getapp

11:17.840 --> 11:20.040
再加这边alodefault2

11:20.040 --> 11:21.140
可以预现

11:21.140 --> 11:23.240
就是可以这样子可以获取到

11:23.240 --> 11:23.540
看到没有

11:23.540 --> 11:25.340
这边你就可以

11:25.340 --> 11:26.240
就是getapp

11:26.240 --> 11:27.840
这边传入一个这个对象

11:27.840 --> 11:30.240
对象里面再加这边是alodefault2

11:30.240 --> 11:31.940
这样子就可以获取到了

11:31.940 --> 11:32.840
也就是说现在的话

11:32.840 --> 11:34.240
你独立分包的话

11:34.240 --> 11:35.840
你也是能够拿到什么

11:35.840 --> 11:38.240
也是能够从这个getapp

11:38.240 --> 11:39.740
拿到这个全局参数的

11:39.740 --> 11:41.840
只不过你这边的话要这样子写

11:41.840 --> 11:43.140
OK要这样写

11:45.140 --> 11:47.940
好然后接下来我看一下啊

11:47.940 --> 11:48.740
所谓

11:48.740 --> 11:50.540
这边有一个分包预加载

11:50.540 --> 11:52.540
我们刚才应该是做了分包预加载的

11:52.540 --> 11:53.440
我看一下

11:53.440 --> 11:55.740
我就说他怎么直接就那个了

11:56.540 --> 11:58.140
我们这边我们来看一下啊

11:58.140 --> 11:59.340
你看现在是在主页

11:59.340 --> 12:00.240
对不对主页的话

12:00.240 --> 12:03.040
然后接下来我点这个cat

12:03.040 --> 12:04.240
我点这个cat

12:04.240 --> 12:05.240
点这个cat的话

12:05.240 --> 12:07.340
然后接下来他本质上他还是在什么

12:07.340 --> 12:08.340
是不是还是在这个页面

12:09.440 --> 12:10.740
对不对pg1

12:10.740 --> 12:12.240
然后cat在这个页面

12:12.240 --> 12:13.140
但在这个页面的话

12:13.140 --> 12:14.040
你看这边这边的话

12:14.040 --> 12:17.840
这个package2

12:17.840 --> 12:20.440
这个包是不是已经就夹载了

12:20.440 --> 12:21.340
下面是不是已经写的

12:21.340 --> 12:23.440
要已经就夹载了啊

12:23.440 --> 12:24.440
这边实际上理论上

12:24.440 --> 12:26.440
应该是不会夹载的

12:26.440 --> 12:27.340
我把这个删掉

12:27.340 --> 12:29.540
我就说这边怎么回事

12:29.540 --> 12:30.140
把他干掉

12:31.940 --> 12:32.340
重新来

12:33.340 --> 12:34.340
啊

12:34.340 --> 12:36.340
啊这边过来

12:36.340 --> 12:37.140
啊ok啊

12:37.140 --> 12:37.840
那必须要什么呢

12:37.840 --> 12:39.540
必须要进去

12:39.540 --> 12:41.640
进去之后再加这边夹载

12:41.640 --> 12:41.940
ok

12:43.440 --> 12:44.140
啊

12:44.140 --> 12:44.640
那这边的话

12:44.640 --> 12:47.140
刚才为什么就是点了这个cat

12:47.140 --> 12:48.040
这边就是那个

12:48.040 --> 12:48.640
第二个包

12:48.640 --> 12:50.540
那个就是纸包就已经开始夹载了

12:50.540 --> 12:51.340
就是因为这边的话

12:51.340 --> 12:52.440
做了那个

12:52.440 --> 12:54.340
做了这个prayload

12:54.340 --> 12:54.840
看到没有

12:54.840 --> 12:55.440
prayload

12:55.440 --> 12:56.940
这边这个也很简单哈

12:56.940 --> 12:57.940
大家一看就看得懂

12:57.940 --> 12:59.140
这边的话是什么意思啊

12:59.140 --> 13:01.240
就是你进到package1

13:01.240 --> 13:03.140
package1就是主包嘛

13:03.140 --> 13:03.840
对不对

13:03.840 --> 13:07.040
主包的这个cat cat

13:07.040 --> 13:08.640
这个时候就去干嘛呢

13:08.640 --> 13:09.840
就去夹载什么

13:09.840 --> 13:11.140
就把这个pack2

13:11.140 --> 13:12.540
就夹载出来

13:12.540 --> 13:12.840
对不对

13:12.840 --> 13:13.440
然后在这边

13:13.440 --> 13:15.440
这边让你进入到这个

13:15.440 --> 13:16.740
apple apple

13:16.740 --> 13:17.440
这边就把什么

13:17.440 --> 13:18.840
把pack3

13:18.840 --> 13:20.240
把他夹载出来

13:20.240 --> 13:20.940
那也就是说

13:20.940 --> 13:21.640
那我这边的话

13:21.640 --> 13:23.240
比如说我这边我看一下啊

13:23.240 --> 13:25.140
我们这边如果进入到cat

13:25.140 --> 13:26.640
这边是不是会把那个pack2

13:26.640 --> 13:27.940
这个纸包夹载

13:27.940 --> 13:29.640
啊我这边我如果进入多个呢

13:31.440 --> 13:32.640
啊多个就不会

13:32.640 --> 13:33.140
看到没有

13:33.140 --> 13:34.140
多个就不会啊

13:34.140 --> 13:35.540
大家这边让你这边进去

13:36.340 --> 13:38.440
啊这个时候他才会去干嘛

13:38.440 --> 13:39.640
这个时候他才会去夹载

13:39.640 --> 13:42.240
这个pack2的这个纸包

13:42.240 --> 13:43.140
看到没有啊

13:43.140 --> 13:44.940
这边是做了预夹载的啊

13:44.940 --> 13:46.340
这个prayloader

13:46.340 --> 13:47.240
ok

13:47.240 --> 13:48.140
好来回到这边

13:48.140 --> 13:49.940
文档这边看一下啊

13:49.940 --> 13:51.640
而所谓分包预夹载

13:51.640 --> 13:53.040
就是进入小程序

13:53.040 --> 13:54.240
某个页面时啊

13:54.240 --> 13:55.840
然后可以自动下载

13:55.840 --> 13:57.640
可能需要的这个分包啊

13:57.640 --> 13:58.840
就是为了提升这个

13:58.840 --> 13:59.840
夹载分包页面的

13:59.840 --> 14:01.640
这个启动速度啊

14:01.640 --> 14:03.040
配置规则也很简单

14:03.040 --> 14:04.940
这个大家应该一看就会啊

14:04.940 --> 14:05.340
这边的话

14:05.340 --> 14:07.740
他的那个那个这个little walk

14:07.740 --> 14:08.240
war

14:08.240 --> 14:09.040
这个是什么意思

14:09.040 --> 14:11.340
这个你要去看到文档啊

14:11.340 --> 14:15.290
就这边预夹载

14:15.290 --> 14:18.390
呃这里prayprayloader

14:18.390 --> 14:20.390
这边你看一下little walk

14:20.390 --> 14:20.890
看到没有

14:20.890 --> 14:21.390
他这边呢

14:21.390 --> 14:23.690
就是可以指定网络下

14:23.690 --> 14:24.590
这个预下载

14:24.590 --> 14:25.790
可选择是or

14:25.790 --> 14:26.990
不限制网络

14:26.990 --> 14:28.490
然后还有一个是wifi

14:28.490 --> 14:30.890
也就是这个wifi网络的时候

14:30.890 --> 14:32.590
才会进行一个预下载

14:32.590 --> 14:33.390
ok

14:33.390 --> 14:35.090
大家这个packages

14:35.090 --> 14:37.090
这个是进入页面后

14:37.090 --> 14:39.690
预下载分包的这个入册或者内幕

14:39.690 --> 14:41.990
这个时候内幕值是不是就有效了

14:41.990 --> 14:42.290
对不对

14:42.290 --> 14:43.790
如果你那个很长啊

14:43.790 --> 14:44.390
比如你这个

14:45.890 --> 14:47.590
呃packages

14:49.290 --> 14:49.990
就这边这边

14:49.990 --> 14:51.590
如果你那个很长啊

14:51.590 --> 14:53.090
你这边的话这个内幕

14:53.090 --> 14:54.490
我们这边是不是给了内幕的

14:54.490 --> 14:54.990
对不对

14:54.990 --> 14:56.090
这个packer

14:56.090 --> 14:57.690
这个内幕是pack3

14:57.690 --> 14:59.990
啊你如果这个这个入册对应的很长

14:59.990 --> 15:00.890
你不给内幕的话

15:00.890 --> 15:02.990
你这边是不是要写很长一串

15:02.990 --> 15:04.590
这边是不是要写很长一串

15:04.590 --> 15:04.890
对不对

15:04.890 --> 15:06.790
你看这个时候就体现出了这个

15:06.790 --> 15:08.090
内幕的好处

15:08.090 --> 15:08.390
对吧

15:08.390 --> 15:09.690
一个别名啊

15:11.190 --> 15:13.790
啊这是关于这个预加载啊

15:13.790 --> 15:16.190
哦我这边写的有little walk or

15:16.190 --> 15:17.790
代表这个预下载啊

15:17.790 --> 15:19.390
然后or是不限网络

15:19.390 --> 15:21.590
wifi是仅这个wifi啊

15:22.590 --> 15:22.990
ok

15:23.790 --> 15:24.190
好

15:24.190 --> 15:26.590
然后他现在官方还提供了一个什么

15:26.590 --> 15:27.090
预下载

15:27.090 --> 15:28.190
我们看一下呢啊

15:28.190 --> 15:29.590
以前的话只有三个啊

15:29.590 --> 15:30.790
以前只有这三个

15:30.790 --> 15:33.890
他现在还提高了一个分包一步化

15:33.890 --> 15:35.590
我们来看一下这个分包一步化

15:37.590 --> 15:39.590
啊在小程序中

15:39.590 --> 15:43.990
不同的分包对应不同的这个下载单元啊

15:43.990 --> 15:44.790
这个是重点

15:44.790 --> 15:45.190
ok

15:45.190 --> 15:47.090
我们这边还是把笔记记一下啊

15:47.090 --> 15:47.990
就寄到我们这边

15:49.990 --> 15:51.390
这边我们再加一个啊

15:51.390 --> 15:53.690
这边叫做分包

15:54.390 --> 15:55.790
叫做分包什么来着

15:55.790 --> 15:56.390
一步化

15:57.590 --> 15:58.690
一步化

16:01.490 --> 16:02.890
ok首先第一句

16:02.890 --> 16:04.490
在程序小程序中啊

16:04.490 --> 16:06.490
你这边现在你有不同的分包了

16:06.490 --> 16:06.790
对不对

16:06.790 --> 16:07.990
有一个一个的包了

16:07.990 --> 16:09.190
那不同的包

16:09.190 --> 16:12.490
对应不同的下载单元啊

16:12.490 --> 16:14.090
把这个化重点

16:14.090 --> 16:15.290
ok好

16:15.290 --> 16:17.590
然后因此除了这个非独立分包

16:17.590 --> 16:19.290
可以依赖主包外啊

16:19.290 --> 16:20.290
分包之间

16:20.290 --> 16:22.890
不能互相使用自定义组件

16:22.890 --> 16:24.390
或进行追快儿啊

16:24.390 --> 16:24.790
就是

16:25.690 --> 16:26.190
记一下啊

16:26.190 --> 16:28.090
就是不同的这个包

16:29.090 --> 16:33.090
之间啊无法使用什么呢

16:33.090 --> 16:35.090
无法就是相互使用

16:36.090 --> 16:39.090
相互使用这个

16:40.090 --> 16:41.090
制定义组件

16:41.090 --> 16:43.090
制定义组件

16:43.090 --> 16:44.090
或者什么呢

16:44.090 --> 16:45.090
或者require

16:47.090 --> 16:48.090
这抓什么意思啊

16:48.090 --> 16:49.090
这抓什么意思啊

16:49.090 --> 16:50.090
比如说现在哈

16:50.090 --> 16:52.090
我有这么几个包

16:52.090 --> 16:54.090
比如说我有这个sub pack

16:55.090 --> 16:56.090
sub pack a

16:56.090 --> 16:57.090
这个是一个包

16:57.090 --> 16:58.090
对不对

16:58.090 --> 17:00.090
那接下来这个sub pack

17:00.090 --> 17:02.090
sub pack b

17:02.090 --> 17:03.090
sub pack a

17:03.090 --> 17:05.090
他这边他会对应一组页面吗

17:05.090 --> 17:06.090
对不对

17:06.090 --> 17:07.090
那既然我在这个包里面

17:07.090 --> 17:09.090
我是不是也可以就是自定义组件

17:09.090 --> 17:10.090
对不对

17:10.090 --> 17:11.090
比如说我自定义一个

17:11.090 --> 17:14.090
比如说比如说叫做item

17:14.090 --> 17:16.090
比如这么一个组件

17:16.090 --> 17:18.090
这个是一个自定义组件

17:18.090 --> 17:22.040
自定义组件

17:22.040 --> 17:23.040
好

17:23.040 --> 17:25.040
那么你在这个sub pack b里面

17:25.040 --> 17:27.040
你又没有办法直接用它呀

17:27.040 --> 17:28.040
是没有

17:28.040 --> 17:29.040
对不对

17:29.040 --> 17:30.040
你是无法相互使用的

17:30.040 --> 17:31.040
ok

17:31.040 --> 17:32.040
那他这个分包一步化的话

17:32.040 --> 17:34.040
应该就是为了解决这个问题

17:34.040 --> 17:36.040
我们继续往下面看

17:36.040 --> 17:37.040
好

17:37.040 --> 17:39.040
分布这个分包一步化特性

17:39.040 --> 17:41.040
将允许你通过一些配置

17:41.040 --> 17:43.040
和新的这个接口

17:43.040 --> 17:44.040
就是

17:44.040 --> 17:45.040
其实也就是配置

17:45.040 --> 17:46.040
对不对

17:46.040 --> 17:47.040
通过配置就可以使用了

17:47.040 --> 17:48.040
到时候的话

17:48.040 --> 17:50.040
你可以来解决这个限制

17:50.040 --> 17:51.040
好

17:51.040 --> 17:52.040
这边的话

17:52.040 --> 17:53.040
然后有个这个兼容性

17:53.040 --> 17:54.040
兼容性他就规定了

17:54.040 --> 17:55.040
这个特性在基础库

17:55.040 --> 17:56.040
多少多少版本之上

17:56.040 --> 17:57.040
这个自己看一下

17:57.040 --> 17:58.040
我们首先来看一下

17:58.040 --> 18:00.040
他这边好像分成两个

18:00.040 --> 18:01.040
对的分成两个

18:01.040 --> 18:02.040
一个是什么呢

18:02.040 --> 18:03.040
一个是跨包

18:03.040 --> 18:04.040
跨包的这个

18:04.040 --> 18:07.040
这个自定义组件的这个引用

18:07.040 --> 18:12.590
一个是跨包

18:12.590 --> 18:14.590
自定义组件的这个引用

18:14.590 --> 18:16.590
我们来看一下怎么引用的

18:16.590 --> 18:17.590
好

18:17.590 --> 18:18.590
这边一个分包

18:18.590 --> 18:19.590
如果他使用

18:19.590 --> 18:22.590
其他分包的自定义组件

18:22.590 --> 18:23.590
那默认的话

18:23.590 --> 18:24.590
你这边的话

18:24.590 --> 18:25.590
能不能用是无法用

18:25.590 --> 18:26.590
对不对

18:26.590 --> 18:27.590
你看这边

18:27.590 --> 18:28.590
由于其他分包

18:28.590 --> 18:29.590
还未下载

18:29.590 --> 18:31.590
或者这个注入

18:31.590 --> 18:33.590
那么其他分包的这个组件

18:33.590 --> 18:36.590
是处于不可用的这个状态

18:36.590 --> 18:38.590
这不就是我们刚说讲的

18:38.590 --> 18:39.590
对不对

18:39.590 --> 18:40.590
你这边其实他上面也提了的

18:40.590 --> 18:42.590
这就是无法使用

18:42.590 --> 18:43.590
不能互相使用

18:43.590 --> 18:44.590
自定义组件

18:44.590 --> 18:45.590
ok

18:45.590 --> 18:46.590
那怎么办呢

18:46.590 --> 18:47.590
那这个时候

18:47.590 --> 18:48.590
你可以通过为

18:48.590 --> 18:50.590
其他分包的这个自定义组件

18:50.590 --> 18:52.590
设置一个站位组件

18:52.590 --> 18:54.590
我们可以先炫耳

18:54.590 --> 18:56.590
炫耳站位组件

18:56.590 --> 18:58.590
来做一个这个替代

18:58.590 --> 19:00.590
当你那个分包下载完成后

19:00.590 --> 19:02.590
再进行一个替换

19:02.590 --> 19:03.590
我们来看一下

19:03.590 --> 19:04.590
比如他这边

19:04.590 --> 19:05.590
他这边的话

19:05.590 --> 19:07.590
有一个using components

19:07.590 --> 19:08.590
这个我们之前学过的

19:08.590 --> 19:09.590
这个是什么

19:09.590 --> 19:11.590
是不是使用自定义组件

19:11.590 --> 19:12.590
好使用自定义组件

19:12.590 --> 19:14.590
你看他现在是在哪个包里面

19:14.590 --> 19:15.590
所以他是在这个

19:15.590 --> 19:16.590
package A这个包里面

19:16.590 --> 19:17.590
对不对

19:17.590 --> 19:19.590
但是你看他这个barter

19:19.590 --> 19:21.590
barter的话是一个common package

19:21.590 --> 19:23.590
一个这个叫做公共包

19:23.590 --> 19:24.590
大家这个list

19:24.590 --> 19:25.590
list的话是这个

19:25.590 --> 19:27.590
sub package B

19:27.590 --> 19:29.590
那你这边这个barter和list

19:29.590 --> 19:31.590
是不是其他包的东西

19:31.590 --> 19:32.590
对不对

19:32.590 --> 19:33.590
其他的包的东西

19:33.590 --> 19:35.590
他就处于一个不可用的这个状态

19:35.590 --> 19:36.590
那怎么办呢

19:36.590 --> 19:38.590
他这边通过一个叫做

19:38.590 --> 19:41.590
component placeholder

19:41.590 --> 19:43.590
这边他叫做这个站位组件

19:43.590 --> 19:45.590
设置这个barter为一个view

19:45.590 --> 19:48.590
list为一个symbol list

19:48.590 --> 19:49.590
这个的话

19:49.590 --> 19:50.590
肯定就是他自己包里面的

19:50.590 --> 19:52.590
这个view的话是那个

19:52.590 --> 19:53.590
本来就有的嘛

19:53.590 --> 19:54.590
对不对

19:54.590 --> 19:55.590
这个的话

19:55.590 --> 19:56.590
应该是他自己写的

19:56.590 --> 19:57.590
ok

19:57.590 --> 19:59.590
你看他下面有解释

19:59.590 --> 20:00.590
在这个配置中

20:00.590 --> 20:02.590
barter和list这两个自定义组件

20:02.590 --> 20:04.590
它是这个跨包

20:04.590 --> 20:06.590
跨分包应用的

20:06.590 --> 20:08.590
那么你这个barter在宣人的时候

20:08.590 --> 20:09.590
使用什么的

20:09.590 --> 20:11.590
使用类似组件view来替代

20:11.590 --> 20:13.590
list的话使用当前分包内的

20:13.590 --> 20:14.590
这个自定义组件

20:14.590 --> 20:16.590
symbol list来替代

20:16.590 --> 20:18.590
接下来当你这两个分包

20:18.590 --> 20:21.590
common package和这个sub package B

20:21.590 --> 20:24.590
当这两个分包下载完成后

20:24.590 --> 20:26.590
站位组件就会被替换成

20:26.590 --> 20:28.590
对应的跨分包组件

20:28.590 --> 20:29.590
ok

20:29.590 --> 20:31.590
他就是这么一个意思

20:31.590 --> 20:33.590
他其实有点类似于什么

20:33.590 --> 20:35.590
有点类似于

20:35.590 --> 20:37.590
有点类似于

20:37.590 --> 20:40.590
那个叫什么名字

20:40.590 --> 20:43.590
一个股价屏

20:43.590 --> 20:45.590
股价屏

20:45.590 --> 20:47.590
这个大家学过没有

20:47.590 --> 20:49.590
就你看有一些这个app

20:49.590 --> 20:51.590
比如说你一开始进入的时候

20:51.590 --> 20:52.590
他会有什么呢

20:52.590 --> 20:53.590
他会有这种一条一条的

20:53.590 --> 20:54.590
对不对

20:54.590 --> 20:55.590
一条一条的表示什么呢

20:55.590 --> 20:57.590
表示他正在夹展

20:57.590 --> 20:58.590
对不对

20:58.590 --> 20:59.590
再夹展

20:59.590 --> 21:00.590
好然后接下来完事之后

21:00.590 --> 21:01.590
数据到位之后

21:01.590 --> 21:03.590
再把那个股价屏替换成

21:03.590 --> 21:05.590
对应的这个数据

21:05.590 --> 21:06.590
对不对

21:06.590 --> 21:07.590
他这部分实际上就有点类似于

21:07.590 --> 21:08.590
这个意思

21:08.590 --> 21:10.590
有点类似于这个股价屏

21:10.590 --> 21:12.590
先用什么呢

21:12.590 --> 21:14.590
先用类似组件

21:14.590 --> 21:18.590
类似组件或者本包

21:18.590 --> 21:20.590
本包

21:20.590 --> 21:22.590
本包的这个组件

21:22.590 --> 21:25.590
进行一个站位

21:25.590 --> 21:28.590
站位渲染

21:28.590 --> 21:29.590
对不对

21:29.590 --> 21:30.590
先进行站位渲染

21:30.590 --> 21:32.590
好之后在这个

21:32.590 --> 21:34.590
其他包

21:34.590 --> 21:38.590
其他包加载之后

21:38.590 --> 21:39.590
加载之后

21:39.590 --> 21:42.590
再渲染为

21:42.590 --> 21:45.590
这个对应的这个组件

21:45.590 --> 21:47.590
是不是就这个意思

21:47.590 --> 21:48.590
对不对

21:48.590 --> 21:49.590
大家怎么做呢

21:49.590 --> 21:50.590
很简单

21:50.590 --> 21:51.590
直接就是在这个

21:51.590 --> 21:54.590
接受文件里面配置一下就可以了

21:54.590 --> 21:55.590
要使用

21:55.590 --> 21:59.590
要使用此特性

21:59.590 --> 22:03.590
此特性直接在这个

22:03.590 --> 22:05.590
当前

22:05.590 --> 22:07.590
这个他应该是当前

22:07.590 --> 22:09.590
我看配级配级是

22:09.590 --> 22:12.590
下面的这个index.json里面

22:12.590 --> 22:14.590
在当前包

22:14.590 --> 22:18.590
对应的这个接受文件中

22:18.590 --> 22:21.590
进行配置即可

22:21.590 --> 22:22.590
OK用的是什么呢

22:22.590 --> 22:24.590
用的是这个

22:24.590 --> 22:29.060
用的是这个

22:29.060 --> 22:31.060
这边的话是这个

22:31.060 --> 22:32.060
component

22:32.060 --> 22:34.060
在这边这个placeholder

22:34.060 --> 22:35.060
用的是这个

22:35.060 --> 22:36.060
一把配置下就可以了

22:36.060 --> 22:37.060
这是他首先

22:37.060 --> 22:38.060
第一个

22:38.060 --> 22:39.060
跨分包

22:39.060 --> 22:41.060
然后制定一组件的这个引用

22:41.060 --> 22:42.060
实际上就是做一个什么

22:42.060 --> 22:44.060
这就是做一个站位

22:44.060 --> 22:47.060
其实就叫做站位渲染

22:47.060 --> 22:48.060
站位渲染

22:48.060 --> 22:50.060
实际上就和那个骨架屏

22:50.060 --> 22:51.060
类似的

22:51.060 --> 22:52.060
对不对

22:52.060 --> 22:55.060
这个怎么在外面

22:55.060 --> 22:59.690
就和骨架屏是类似的

22:59.690 --> 23:00.690
OK

23:00.690 --> 23:01.690
这是他第一个

23:01.690 --> 23:03.690
好来我们来看第二个

23:03.690 --> 23:05.690
第二个的话是

23:05.690 --> 23:06.690
跨分包

23:06.690 --> 23:08.690
接使代码的引用

23:08.690 --> 23:09.690
这个什么意思

23:09.690 --> 23:10.690
我来看一下

23:10.690 --> 23:11.690
一个分包中的代码

23:11.690 --> 23:13.690
引用其他分包的

23:13.690 --> 23:14.690
代码时

23:14.690 --> 23:16.690
为了不让下载

23:16.690 --> 23:18.690
主设代码运行

23:18.690 --> 23:19.690
我们需要一步

23:19.690 --> 23:20.690
获取引用的这个结果

23:20.690 --> 23:22.690
这个也非常好理解

23:22.690 --> 23:23.690
对不对

23:23.690 --> 23:24.690
比如我现在的话

23:24.690 --> 23:25.690
你看我这边他在这个

23:25.690 --> 23:26.690
他这边举了个例子

23:26.690 --> 23:27.690
我现在在这个

23:27.690 --> 23:29.690
Supple Package A

23:29.690 --> 23:30.690
里面

23:30.690 --> 23:31.690
然后接下来

23:31.690 --> 23:32.690
我这边你看通过Require

23:32.690 --> 23:34.690
然后将我这边要去执行什么

23:34.690 --> 23:36.690
执行Supple Package B

23:36.690 --> 23:38.690
里面的这个节奏

23:38.690 --> 23:39.690
对不对

23:39.690 --> 23:40.690
我要执行这个

23:40.690 --> 23:41.690
我要把它引入

23:41.690 --> 23:42.690
引入了之后

23:42.690 --> 23:43.690
然后加这边

23:43.690 --> 23:45.690
使用他里面的这个Utl

23:45.690 --> 23:47.690
这边他是通过什么

23:47.690 --> 23:48.690
所以通过一步

23:48.690 --> 23:49.690
通过一步来获取的

23:50.690 --> 23:52.690
这个也很好理解

23:53.690 --> 23:55.690
在他提供了第二个

23:55.690 --> 23:59.320
这边我们记录一下

23:59.320 --> 24:00.320
就用自己的语言

24:00.320 --> 24:01.320
把它总结一下

24:01.320 --> 24:02.320
知道吧

24:02.320 --> 24:04.320
就是在当钱包

24:04.320 --> 24:06.320
在当钱包

24:06.320 --> 24:09.320
如果要使用

24:09.320 --> 24:12.320
这个其他包的这个代码

24:12.320 --> 24:15.320
首先通过什么呢

24:15.320 --> 24:17.320
通过这个Require

24:17.320 --> 24:20.320
Require来引入

24:20.320 --> 24:21.320
对不对

24:21.320 --> 24:23.320
然后注意

24:23.320 --> 24:24.320
然后注意

24:24.320 --> 24:28.320
这个过程是一步的

24:28.320 --> 24:30.320
这个过程是一步的

24:30.320 --> 24:32.320
所以他这边是Require

24:32.320 --> 24:33.320
这边引入

24:33.320 --> 24:34.320
引入了之后

24:34.320 --> 24:36.320
人家这边一步的进行处理

24:36.320 --> 24:39.320
或者你可以使用Promise风格

24:39.320 --> 24:41.320
然后在其他分包中的

24:41.320 --> 24:43.320
这个插件也是类似的

24:43.320 --> 24:44.320
这个方法

24:44.320 --> 24:45.320
也是这个一步的

24:45.320 --> 24:47.320
其他就没了

24:47.320 --> 24:48.320
其他就没了

24:48.320 --> 24:50.320
这是他新增加的一个

24:50.320 --> 24:52.320
就是分包易不化

24:52.320 --> 24:54.320
之前的话他只有这三个

24:54.320 --> 24:56.320
之前这个分包加载

24:56.320 --> 24:57.320
他只有这三个

24:57.320 --> 24:58.320
就是如何使用分包

24:58.320 --> 24:59.320
然后独立分包

24:59.320 --> 25:01.320
分包易下载

25:01.320 --> 25:02.320
现在的话多了一个

25:02.320 --> 25:04.320
易不化

25:04.320 --> 25:05.320
整体来讲的话

25:05.320 --> 25:07.320
整个分包的话也不难

25:07.320 --> 25:08.320
主要就是什么

25:08.320 --> 25:10.320
主要是不是就是做配置

25:10.320 --> 25:11.320
对不对

25:11.320 --> 25:12.320
主要就是做配置

25:12.320 --> 25:13.320
大家下去的话

25:13.320 --> 25:14.320
可以把这些小企业

25:14.320 --> 25:15.320
自己把它看一下

25:15.320 --> 25:16.320
自己的话

25:16.320 --> 25:18.320
然后当时我把这个带给大家

25:18.320 --> 25:19.320
OK

25:19.320 --> 25:20.320
大家这边的话可以看一下

25:20.320 --> 25:22.320
或者把之前的

25:22.320 --> 25:23.320
做到这个写的小程序

25:23.320 --> 25:24.320
自己分个包

25:24.320 --> 25:25.320
试一试

25:25.320 --> 25:26.320
对不对

25:26.320 --> 25:27.320
OK

25:27.320 --> 25:28.320
好

25:28.320 --> 25:29.320
这就是关于这些课

25:29.320 --> 25:31.320
这些课关于分包的内容

25:31.320 --> 25:33.320
这些课就到这里

25:33.320 --> 25:34.320
再见

