WEBVTT

00:00.000 --> 00:04.440
OK 这节课的话 我们来看一下这个Exparser的这个设计原理

00:05.040 --> 00:09.840
那这个Exparser是什么呢 这个的话在官方的第六章

00:10.760 --> 00:18.000
第六章然后底层框架这边 组建系统就这一小截 这边的话就介绍了Exparser

00:18.400 --> 00:20.760
我首先把这个在笔记里面记一下

00:23.200 --> 00:28.410
这一部分 这应该写到这下面

00:29.410 --> 00:32.450
写到这下面吧 因为我们下面这边会说这个Exparser

00:33.290 --> 00:38.810
看一下啊 哦 这边给了链接的啊 给了链接的 OK 行 那我们这边回去吧

00:39.650 --> 00:42.610
好 然后回到这边啊 这个Exparser 我们来看一下

00:43.330 --> 00:47.530
Exparser的话是微信小程序 组建主持框架

00:48.250 --> 00:53.930
类似在小程序基础库中 我们在写小程序的时候 他不是有个这个基础库吗

00:54.330 --> 01:01.250
还记得吧 他有那个不同的版本啊 我们经常的话 我们查阅那个API的时候 他会说就是你这个支持什么

01:01.450 --> 01:03.930
就是什么版本以上啊 支持这个API

01:04.810 --> 01:14.610
对吧啊 然后这个基础库 他里面的话 他就是类制了这个Exparser这个框架 这个框架的话 其实主要就是什么呢 主要就是那个组建的

01:15.050 --> 01:17.890
啊 就是这个组建的这个组织 OK 你看这边

01:18.410 --> 01:29.330
小程序内所有的组建啊 包括什么呢 包括类制组建和制定义组建都有谁来管理的 都有这个Exparser组织管理

01:30.050 --> 01:36.490
OK啊 那这个Exparser这个组建模型的话 他与什么呢 与这个微波component

01:37.010 --> 01:40.170
标准中的这个shadowdom高度相似

01:41.010 --> 01:47.770
说我们这边的话 既然我们要看这个exparser究竟是什么 说我们这边的话 首先先看一下微波component

01:48.690 --> 01:56.170
对吧啊 你把微波component搞懂了之后 回头的话 那这个exparser基本上也就搞定了啊 好 那我们来看一下

01:57.490 --> 02:03.890
什么是微波component啊 这个微波component 你这个汉语执意过来的话 就是什么呢 就是微波组建

02:04.810 --> 02:13.810
啊 他是什么 他是一套规则和一套这个API 就现在的话 我们这个前端开发啊 这个基本上都是组建化的

02:14.570 --> 02:20.410
对不对啊 我们把一个完整的功能 封装成一个组建啊 组建 组建里面就有这个

02:21.170 --> 02:23.490
结构 样式 以及这个功能

02:24.130 --> 02:30.450
你看现在的话 无论是view也好 还是react也好 啊 他们都是能够基于这个组建化进行开发

02:31.170 --> 02:36.050
啊 但是他们有个问题就是什么呢 他们的这个组建这个生态 他们是不互通的

02:36.610 --> 02:44.370
对吧 你没有办法把view的组建直接拿到这个react里面用啊 也没有办法直接把这个react的组建拿到view里面来用

02:44.770 --> 02:47.650
两个这个框架的这个生态啊 不互通

02:48.530 --> 02:57.010
ok 那我们这边呢 我们能不能脱离啊 像这个viewreact这样的框架 我们就用这个原生的结石 我们来开发这个组建了

02:57.330 --> 03:08.210
行不行呢 可以啊 说这个vivo component他其实本身他就是w3c所提出的一个概念啊 为了解决这样子的这个问题

03:09.010 --> 03:16.480
ok 其实通过这里的话 大家其实隐隐约约也可以看到一个规律啊 什么规律

03:16.960 --> 03:26.480
就是首先的话 你比如你原生语言啊 刚出来的时候会有一些不足啊 然后接下来的话会有一些这个第三方的框架呀 库啊来解决你的问题

03:27.040 --> 03:32.160
好 慢慢随着你这个原生语言的发展 他就会去希腊啊 希腊就是这个

03:33.360 --> 03:37.440
周围的这个第三方库或者这个框架 把他们的一些特性希腊进来

03:37.840 --> 03:43.520
那回头的话呢 接下来这些第三方的库也好 那框架也好 慢慢慢慢就不再用了

03:43.920 --> 03:46.160
对不对 最典型的就是什么呢 最典型的就是接query

03:46.880 --> 03:51.440
啊 以前的话使用这个接query来辅助我们的这个原生结石的这个开发

03:51.920 --> 03:58.720
那现在的话接query的很多特性 实际上已经被原生结石已经就吸纳进去了 对不对 原生结石就实现了

03:59.280 --> 04:03.600
啊 所以这个view和react啊 现在的话这个非常火的两大框架

04:04.080 --> 04:12.240
它其实的话 它最大的特点就是首先第一个响应式 第二个的话就是组建化开发 对不对 你看现在的话 慢慢慢慢这个随着这个

04:12.880 --> 04:18.720
技术的发展 那现在的话这个组建化啊w3c的话 原生就已经慢慢慢慢开始实现了

04:19.120 --> 04:21.760
ok 好 来我们来看一下啊

04:22.480 --> 04:29.120
啊 言归正传 这个vivo component实现的组建可以和html原生组建一起使用

04:29.520 --> 04:31.760
啊 这个的话 大家实际上应该是不陌生的

04:32.480 --> 04:38.880
对不对 你用过这个view 用过react 那你应该是不陌生的啊 这个的话实际上就是什么 是不是自定义的一个组建

04:39.760 --> 04:46.480
对不对 好 那接下来通过这个vivo component 我们如何来自定义组建的啊 我们来看一下

04:46.720 --> 04:53.040
关于vivo component 它首先它有三大规范 这三大规范的话 分别是这个custom elements

04:53.680 --> 04:58.160
啊 然后template和这个shadow dorm 这个shadow dorm 是不是就刚才这边所提的

04:59.280 --> 04:59.760
你看这里

05:00.400 --> 05:06.480
expressor组建模型与vivo components标准中的这个shadow dorm 高度相似

05:07.280 --> 05:11.920
对不对 ok 好 那这边我们顺便看一下 我把这个mone dn的这个地址给大家

05:12.880 --> 05:17.280
这边的话vivo components 然后后面加一个mdn

05:18.960 --> 05:19.680
啊 在这里

05:21.360 --> 05:23.440
这里你可以去mdn上面去看一下啊

05:24.160 --> 05:28.960
vivo components是一套不同的技术啊 允许你创建可从用的定制元素

05:29.200 --> 05:34.000
它的核心概念就这三个啊 首先是custom element 自定义元素

05:34.480 --> 05:40.000
然后shadow dorm 啊 影子 dorm 然后html template html的这个模板啊

05:40.800 --> 05:42.960
啊 把这个放到笔记里面

05:44.240 --> 05:50.190
呃 放到这边吧 这边是mdn

05:52.370 --> 05:53.010
mdn

05:55.250 --> 06:01.010
ok 好 然后接下来我们一个一个来看啊 首先的话是custom element

06:01.490 --> 06:07.730
这个说白了就是什么了 说白了就是你自定义一个组建啊 如何自定义组建 我们来看一下

06:09.170 --> 06:13.170
呃 所谓自定义元素啊 就是自定义组建啊 即内置元素

06:13.890 --> 06:18.610
呃 当内置元素无法为问题提供解决方案时啊 我就自己来

06:19.250 --> 06:21.890
自定义一个元素来解决啊 这个也非常好理解

06:22.370 --> 06:27.250
对吧啊 比如说原生的比如div span这些 这些其实你也可以把它看作是组建

06:28.290 --> 06:33.250
对不对 你也可以把它看作是组建啊 那这些组建的话没有办法满足你的需求的时候

06:33.410 --> 06:35.890
你是不是就可以自定义这个组建啊

06:36.530 --> 06:42.370
好 然后加这个组建啊 或者说这个元素它的这个状态 它是有状态的 我们来看一下内部有哪些状态

06:43.650 --> 06:50.530
首先的话有这个antify啊 这个是卫生级啊 它就是自定义元素还没有被div 就没有被定义

06:51.330 --> 06:56.610
呃 field field的话就是你div过了 也实力化过了啊 这边是过了啊

06:57.410 --> 07:03.810
也实力化过了啊 但是失败了 那这边它会按照这个 html unknown element 来实力化

07:04.530 --> 07:11.010
好 然后加这个是uncustomized啊 这个是未定制化 就是你没有div 但是是实力化了

07:11.250 --> 07:15.250
它也会按照这个 html unknown element 来实力化

07:15.810 --> 07:21.090
然后customer它这个是升级成功啊 就是你defy过了 并且已经实力化成功了

07:21.330 --> 07:24.770
它就有点类似于什么 有点类似于那个promise

07:25.730 --> 07:29.970
对不对 promise 然后接下来你那个一开始是未决的状态吗

07:30.210 --> 07:35.170
好 然后加这个一个promise 然后加你那个就是比如说re-suo5 或者re-jacked 之后

07:35.250 --> 07:37.970
你那个promise它是把它的那个状态就会发生改变

07:38.690 --> 07:45.330
对不对啊 要么是已决 要么是那个就是未决 那已决里面的又又会分为这个成功和失败

07:45.810 --> 07:47.250
啊 他就有点类似于这个意思

07:47.730 --> 07:56.290
ok 我们直接来看例子啊 直接来看例子啊 这边的话我举了一个这个制定义组件的例子啊 把这例子我们把它写一下

07:57.730 --> 08:04.130
啊 我们来到这边 我们把它写一下啊 我们这边的话现在我们要制定一个组件啊 我们这边首先script

08:04.850 --> 08:08.690
啊 我们这边通过什么呢 通过class 然后custom

08:10.210 --> 08:11.490
custom component

08:13.740 --> 08:16.940
component啊 然后接下来这边啊 extends

08:18.300 --> 08:22.060
extends 什么呢 extends html 然后element

08:22.860 --> 08:26.780
看到没有 首先的话我们定义了一个内 这个内的话叫做custom component

08:27.340 --> 08:32.380
它去继承什么呢 它是继承这个 html element 啊 继承这个内

08:32.860 --> 08:35.100
好 然后接下来的话 这边首先constructor

08:35.900 --> 08:38.220
构造函数 啊 这边这个super

08:39.740 --> 08:45.740
啊 调用flate的这个构造方法 对吧 好 然后接下来在这里面 在这里面的话 我们就开始来创建

08:47.860 --> 08:57.060
好 我们首先的话 这边const一个box 等于一个document 点created element 先创建一个div的动物元素

08:57.540 --> 09:04.100
好 然后加这边box 点class name 啊 给它设置一个类名 这边它叫做custom

09:04.900 --> 09:05.700
然后style

09:07.060 --> 09:10.900
ok 好 那接下来在这边 这边呢 我们就来写这么一个样式内

09:11.540 --> 09:21.950
style 然后这边呢 是custom style 点custom style 好 然后接下来的话 把那个 我把样式就直接拿过来了

09:23.390 --> 09:31.150
样式直接拿过来 好 然后接下来的话 下面 下面的话 我这边const一个text

09:31.870 --> 09:41.230
等于一个document 点created element p 啊 创建一个p元素 好 然后加这边text 点inner html

09:41.790 --> 09:45.070
比如说 这是一个自定义组件

09:47.230 --> 09:52.030
ok 好 完成之后 然后box 点append child

09:53.070 --> 09:58.430
把这个text 把它添加上去 好 然后完成之后 然后接下来这边

09:58.910 --> 10:00.990
z 点append child

10:02.910 --> 10:06.430
在当前的实力对象上面添加什么呢 添加这个box

10:07.070 --> 10:15.470
ok 那我整个这个类的话 我就写好了啊 在constructor 里面 我们创建了div 创建了p啊 最后的话 然后接下来把这个

10:16.190 --> 10:20.430
div 把这个p放到这个div里面 那把这个div的话 放到什么呢 放到这个

10:21.150 --> 10:26.910
自定义的这个元素里面 对不对 好 然后回头的话 这边调用什么呢 调用这个window

10:27.390 --> 10:30.350
window的话 它这边有一个叫做custom elements

10:31.390 --> 10:35.070
啊 有个这个属性 这个属性 然后加在这边 你调用它的defy 方法

10:36.510 --> 10:43.310
啊 调用defy 方法 和哪就联上了 和这儿是不是就联上了 对不对 你这边的话 就是有没有被defy 对不对

10:43.630 --> 10:49.470
defy过了 也被实力化了 defy过并且实力化成功了 是不是就联上了 对不对 这边defy 方法

10:49.870 --> 10:56.750
而defy 方法 然后加在这边 它接受两个参数 首先第一个是什么呢 第一个就是你这个自定义组建 它的这个名字

10:57.230 --> 11:03.630
你注意 它这个名字它是有讲究的 它这个名字的话是要求必须包含短横线

11:05.230 --> 11:12.110
看到没有啊 你的名称必须包含短横线 为什么呢 因为它可以确保就是html解析器能够区分

11:12.350 --> 11:18.590
你这个究竟是常规元素还是自定义元素 还能确保html标记的这个兼容性

11:19.310 --> 11:25.150
啊 就你正常的话html标记 比如什么di vip啊 这些啊 这些是不是就是没有短横线

11:25.790 --> 11:33.230
对不对 然后既然你这边的话 你就必须包含短横线 他可以做一个区分啊 说说我们这边呢 我们就叫做什么呢 叫做custom

11:34.750 --> 11:42.110
然后component 啊 然后接下来这个是你自定义组建的名字啊 人家这边呢 再把你这个内放过来

11:42.830 --> 11:51.390
啊 这个是你的组建 对吧 组建对应的结构啊 在这里 okay 好 那我们这边呢 就定义好了一个自定义的组建

11:51.950 --> 11:54.190
好 定义好了之后 然后将我们这边我们来用一下

11:56.110 --> 11:57.870
这边custom component

12:01.410 --> 12:06.530
ok 你看 我们这边就使用了自定义组建啊 保存 保存了之后 然后我们这边来看一下

12:09.100 --> 12:14.940
啊 这里出来没有 数就出来了 对不对 你看 我们这边呢 就成功的创建了一个

12:15.260 --> 12:22.300
自定义组建啊 整体来讲的话 这个代码的话 也不难 对吧 大家下去了 可以自己写一些试一试 okay

12:23.180 --> 12:25.020
好 然后我们这边继续往后面看啊

12:26.780 --> 12:33.980
啊 这边是这个名字啊 名字的这个规则 自定义元素只能什么 只能这个一次定义一个 一旦定义无法撤回

12:34.220 --> 12:38.860
然后既然这边 这自定义元素不能这个单标记啊 必须是这个

12:39.580 --> 12:46.060
双标记啊 好 然后它这边的话 还会有一些这个api啊 比如说这个是定义 通过这个

12:46.860 --> 12:54.380
custom element 调这个define方法 它就是定义 然后调这个get方法 它就是返回这个构造函数 好 来 我们这边来试一下嘛

12:55.900 --> 12:56.780
这边window

12:58.140 --> 13:01.820
window上面呢 应该是可以直接那个的 这边呢 我们直接get

13:03.660 --> 13:08.140
get 然后接下来这边 把这个主接名字 把它传进去

13:09.020 --> 13:11.420
对不对 然后就让我们这边 我打印一下它的返回值

13:12.780 --> 13:17.740
点log 打印一下啊 保存 保存了之后 然后就在这边来看一下

13:20.580 --> 13:28.100
控制台 你看这边是返回了它的构造函数啊 对不对 OK好 这边的话 是我们刚才的那个自定义

13:28.340 --> 13:33.620
主键啊 你把它展开 展开到你就可以就可以看到里面啊这个div 那叫这边这个p

13:34.580 --> 13:35.380
对吧啊

13:36.740 --> 13:39.220
好 这是这个自定义主键啊

13:39.940 --> 13:45.220
啊 还有些其他的这个API啊 什么windify 啊windify 接受一个promise对象

13:47.920 --> 13:52.800
好 关于这些API的话就不一失利了啊 好 然后我们继续进入到下一个

13:53.360 --> 13:59.520
就现在的话 我们这个demo里面的这个dorm结构 它比较简单 对吧 比较简单的话 让我们这边

13:59.920 --> 14:04.800
在创建它结构的时候 我们这边就是采用的最原始的document.createElement

14:05.040 --> 14:09.760
是不是一个一个来这样创建 那你遇到这个结构比较复杂的时候 你肯定就不可能这样子了

14:10.160 --> 14:13.040
对不对 所以他这边来给我提供了什么 提供了这个template

14:13.600 --> 14:21.440
template标记 那这个使用这个template的话 我们就可以干嘛呢 在template里面来书写我们的这个结构

14:21.920 --> 14:23.840
ok 好 来我们这边呢 我们把它改一下

14:24.880 --> 14:28.800
回到我们的这个代码 好 我们这边的话 在哪里呢 在这边

14:29.680 --> 14:33.280
在这下面吧 下面我们这边使用template

14:36.340 --> 14:39.300
使用template啊 这个template的话 我给他一个id

14:39.300 --> 14:43.460
id的话 这边比如说叫做customer

14:46.620 --> 14:49.020
customer 然后这个come

14:50.460 --> 14:51.180
然后id

14:51.820 --> 14:52.940
ok 给他一个id

14:53.420 --> 14:55.500
然后接下来这边 这里面div

14:56.300 --> 14:58.860
然后这边的话 class 等于一个

14:59.580 --> 15:02.220
这个customer style

15:03.260 --> 15:06.060
你看 这样子写起来是不是就更符合我们平时做开发的时候

15:06.620 --> 15:08.940
我们平时做开发的时候 是时候是不是就这样写了

15:09.980 --> 15:11.100
对不对啊 这边

15:11.820 --> 15:15.420
这是一个自定义组件 好 然后接下来的话把这个

15:16.060 --> 15:19.980
这个是不是就不需要了 对不对啊 这儿到这儿实际上都可以不要了

15:20.860 --> 15:24.940
好 然后接下来的话在这里 这里面的话 我们首先就获取到这个

15:25.740 --> 15:31.580
template啊 通过什么呢 你可以通过最传统的 document 点get element by id

15:32.300 --> 15:35.340
说获取到 那把这个id 把他过来

15:37.420 --> 15:39.900
ok 获取到之后再加这边const

15:41.980 --> 15:43.500
const一个template

15:43.820 --> 15:48.700
等于首先拿到这个模板 拿到这个模板之后 然后接下来把它复制一份

15:50.380 --> 15:51.820
template 点content

15:53.420 --> 15:54.940
点content 点krone

15:55.980 --> 16:00.700
为什么要复制一份呢 因为你这个组件最终的话 是不是要实力化多次的

16:01.980 --> 16:07.580
对不对 你是要实力化多次的 你这个你这个定义出来最终是个组件吧 组件我到时候可以是不是用多份啊

16:08.220 --> 16:10.620
对不对啊 所以我们这边呢 把它克容一份

16:11.180 --> 16:13.420
这边去 然后这边的话

16:14.140 --> 16:16.140
const一个content

16:17.420 --> 16:20.620
啊 拿到这个内容 拿到这个内容之后 然后接下来这边的话在

16:21.340 --> 16:23.900
z 点append child

16:25.340 --> 16:27.260
append child 把这个content

16:28.140 --> 16:33.660
把它拉上去 ok 好 那我们这边我们保存一下 保存了之后 然后下这边来看一下

16:34.460 --> 16:37.820
好 这边的话没有出来 是吧 没有出来 这边报了个错 我们看一下

16:38.780 --> 16:42.060
template content colon is not a function

16:42.380 --> 16:44.140
那我看看我这边是哪里写错了

16:44.860 --> 16:48.300
template 点content 啊 这边是clone node

16:51.420 --> 16:54.140
ok 是不是出来了 对不对 出来了

16:54.460 --> 16:58.940
啊 说这边的话 当你书写这个复杂结构的时候 我们一般来讲的话 会把这个结构

16:59.260 --> 17:03.420
写到这个template里面 啊 这就是他提供的这个template的这个语法

17:04.380 --> 17:08.460
他这个template的话 他这边还支持什么呢 还支持这个

17:09.020 --> 17:14.140
就是插槽啊 以及就是绑定时间这些都是ok的啊 来 我们这边来看一下

17:15.900 --> 17:20.060
啊 这个是template 啊 这边呢 需要考虑两个地方啊 首先第一个

17:20.540 --> 17:26.940
因为demo也是啊 所以把template标签写在一起了 但你实际上的话 你是可以用脚本把这个template

17:27.180 --> 17:32.140
注入到网页的 比如现在啊 现在我们这边的话 是不是这个主键template

17:32.700 --> 17:36.700
啊 这个主键的这个结构和这边使用是写在一起的

17:37.180 --> 17:43.020
但是我们做view开发和react开发我们都知道 一般来讲的话 你这个这个是单独是不是会提出来的

17:43.820 --> 17:48.220
对不对 单独提出来比较单独哪一个文件 这个文件名字就叫做customer

17:48.700 --> 17:52.380
component 在里面来定义这个结构啊 包括这一块代码

17:52.860 --> 17:59.420
对不对 然后回头的话 在这个htemplate里面 我把这个主键 我把它引进来再使用 这些都是小问题

18:00.140 --> 18:06.940
啊 第二个 这边你这个节点必须得通过什么呢 通过template.content

18:07.660 --> 18:12.300
返回这个节点来进行这个操作啊 并且的话你必须要复制一番

18:12.940 --> 18:19.100
我看这边写的有啊 或许template不是一个正常的dorm结构啊 他实际上是一个什么呢 实际上是个

18:19.740 --> 18:20.940
document fragment

18:21.500 --> 18:25.580
大家知不知道这个fragment 我之前在讲dorm的时候讲过很多次

18:26.060 --> 18:28.300
他就是一个什么 就是一个不口袋

18:28.940 --> 18:33.500
对不对 一般来讲我们创建了dorm节点之后 我会把它放到一个叫做fragment的这个

18:33.980 --> 18:41.100
dorm节点里面啊 把你所有创建的这个dorm节点把它装进去 然后最后的话在一次性的添加到页面上面

18:42.140 --> 18:46.060
他这边他其实就是一个document fragment这个节点啊

18:47.900 --> 18:55.340
好 然后你 然后这个这个模板还要留给其他实力使用啊 所以不能直接移动他的指援数啊 我们一边的话 这边反正要复制一份

18:55.660 --> 18:58.380
ok 好 那继续往后面看

18:59.340 --> 19:05.420
呃 在这个view和req中使用逐渐的时候 我们经常设计到什么呢 设计到这个props的这个传递

19:05.980 --> 19:11.580
对不对 好 那我们这边的话能不能传递这个props呢啊 也可以也可以 那我们这边我们来试一下

19:12.060 --> 19:17.260
比如说我们这边呢 用两份啊 第一份的话 这边就没有传递 第二份的话 这边就是传递了一个

19:17.740 --> 19:18.140
text

19:20.480 --> 19:23.360
啊 比如说 这是传递

19:24.160 --> 19:24.960
的props

19:25.920 --> 19:26.960
那传递的text

19:29.040 --> 19:34.480
ok 好 那接下来的话 我们这边的重点就是什么呢 这边重点就是我们要拿到这个text

19:35.520 --> 19:36.800
啊 就获取props

19:39.250 --> 19:44.450
获取props啊 获取props这边的话 我们就是通过什么呢 通过z

19:45.170 --> 19:46.050
点get

19:46.850 --> 19:47.970
这个attribute

19:49.090 --> 19:52.930
所以获取属性 对不对 获取什么属性 获取text

19:53.890 --> 19:59.890
啊 因为你这边的话是text嘛 对不对啊 先获取 获取了之后 然后接下来我们这边

20:00.290 --> 20:02.050
const一个text

20:02.690 --> 20:04.130
vl 等于这个

20:04.610 --> 20:08.130
ok 好 那接下来我们就进行一个判断 衣服

20:09.010 --> 20:09.570
text

20:11.730 --> 20:19.570
如果有这个字 有这个字说明什么 是不是说明就是用户在使用这个字定义组件的时候 是不是传递了text属性的

20:20.290 --> 20:22.850
对不对啊 进入此衣服

20:24.960 --> 20:32.160
进入此衣服 说明用户在使用该组件时

20:33.360 --> 20:35.840
传递了什么 是不是text

20:36.960 --> 20:37.360
属性

20:38.480 --> 20:42.560
对吧 啊 传递了之后 然后接下来你这边上就可以content

20:43.520 --> 20:43.840
点

20:44.640 --> 20:46.240
啊 比较query selector

20:47.280 --> 20:47.680
找到

20:48.640 --> 20:54.880
我们这边是要找这个p 是吧 啊 找这个p的话 这边query selector 你这边就可以这个style

20:57.440 --> 21:02.560
点style 下面的这个p啊 你看这些的话 以前只能在jquery里面使用

21:02.960 --> 21:06.560
你要现在的话 是不是原生这个query selector 是不是原生就可以使用了

21:07.120 --> 21:14.080
啊 这个其实就是我刚才给大家说的啊 随着你原生技术的发展 他慢慢慢慢就会把周边的啊 你这个什么

21:14.560 --> 21:21.600
第三方cool啊 第三方框架呀 这些特性慢慢就会吸纳进来的啊 然后慢慢然后第三方的这个cool慢慢也就

21:21.840 --> 21:24.960
不需要了啊 技术的发展都是这样子的 ok

21:25.680 --> 21:27.680
好 然后接下来哈 我们这边点

21:28.560 --> 21:31.760
inner edge teamer啊 等于一个这个text world

21:32.240 --> 21:39.760
ok 好来我们保存一下 保存了之后 大家这边来看一下 你看这边 这是一个自定义组件啊 这是传递的text

21:40.320 --> 21:43.520
哎 你看我们这边呢 是不是就是实现了这个pops的传递

21:44.400 --> 21:48.000
对不对啊 但虽然他现在这个pops的传递还显得比较智能

21:48.560 --> 21:52.000
对吧啊 我这边还需要就是比我们判断类型 然后将我这边还得

21:52.640 --> 21:58.640
单独的进行判断啊 如果有其他的属性 然后将我这边还得写 写很多啊 但这些的话 时间你都可以

21:58.880 --> 22:01.680
后期的话 慢慢来进行什么 是不是进行封装

22:02.560 --> 22:07.440
对不对啊 这些都是都是小事情啊 他这边的话 就是你可以看到这个雏形

22:07.920 --> 22:13.360
基本上已经出来了 对不对啊 你这边的话可以就是原生的 我不引入任何框架

22:14.320 --> 22:18.160
啊 不引入任何框架 我这边就可以做这个主键化的这个开发

22:18.720 --> 22:21.520
ok 好 然后这是这个

22:22.480 --> 22:23.680
关于pops啊

22:25.280 --> 22:31.520
好 然后这个snot snot的话 这边也是有的啊 snot的这个用法的话 基本上和这个view

22:32.000 --> 22:35.200
是比较相似的啊 这边的话 比如说我们这边来看一下

22:35.920 --> 22:42.240
比如说我在这边 我在第一个 第一个里面的话 我来插入一个内容啊插入一个什么呢 插入一个p

22:42.720 --> 22:43.600
比如说这是

22:47.040 --> 22:49.600
这是插入的内容

22:51.840 --> 22:56.160
啊 但你如果直接这样写的话 他是没效果的 对不对啊 他也也会炫出来

22:56.960 --> 22:58.880
也会炫出来 只不过他是炫在这个位置

22:59.520 --> 23:06.000
对 不是说把这个位置 不是说把这个这个你写在里面的啊 插入到了他的内部 不是

23:06.000 --> 23:10.320
ok 那如果你想要插入到内部 那这边怎么做呢 这边的话

23:11.280 --> 23:16.240
啊 这边的话 你这边首先 你需要给这个加一个snot属性

23:17.680 --> 23:24.240
表示什么呢 我这块内容是要插入到这个自定义组建内部的啊 然后既然这边你给他一个名字

23:24.720 --> 23:25.680
比如叫做这个

23:27.040 --> 23:29.280
取个什么名字呢 比如叫做mytext

23:30.560 --> 23:31.360
啊my snot

23:32.000 --> 23:33.360
随便取一个

23:33.360 --> 23:37.360
ok 好 然后接下来你在这边 这边是你的模板

23:37.840 --> 23:44.320
对不对啊 你在模板里面你就得设置一个这个插槽 那这个插槽的话 他就是用了什么呢 就是用了snot

23:45.200 --> 23:50.720
你看和viu是不是很像 对不对 你但凡学过viu的话呢 你看这个其实是很轻松的啊

23:51.120 --> 23:54.160
好 然后接下来的话 这边你给这个插槽 你给他一个名字

23:54.960 --> 23:56.800
name 等于一个

23:57.920 --> 23:58.960
这个my snot

24:01.120 --> 24:03.840
my snot啊 人家这边呢 你给他一个

24:04.560 --> 24:06.960
默认的 给他一个这个默认的这个

24:07.440 --> 24:09.280
内容啊插槽默认内容

24:11.390 --> 24:11.950
插槽

24:12.910 --> 24:14.670
默认内容

24:15.150 --> 24:16.830
ok好 来我们这边我们来看一下

24:18.830 --> 24:21.070
好 你可以看到现在的话是不生效的

24:21.870 --> 24:27.950
对不对 你看这边插槽默认内容 插槽默认内容啊 这边的话 目前来讲的话 这边就都是显示的插槽默认内容

24:28.270 --> 24:30.830
好 这边的话 我插住了内容 压根就没有进去

24:32.110 --> 24:36.270
对不对 压根就没有进去 好 这边的话 实际上就涉及到下一个指示点

24:36.590 --> 24:37.710
叫做什么呢 叫做这个

24:38.670 --> 24:39.310
shadowdom

24:40.030 --> 24:45.230
shadowdom 那我们这边提前用一下啊 你看这边如果你不用这个shadowdom的话 还会有个问题

24:45.710 --> 24:46.590
还会有什么问题呢

24:47.150 --> 24:53.550
比如说你看我这边 我这边使用这个自定义组件 对了 自定义组件里面其中有一个这个样式类叫做custom

24:54.510 --> 24:58.030
style 好的 既然我这边的话 我比如说单独的一个p

24:59.790 --> 25:01.630
啊 单独一个p 表示这是

25:03.470 --> 25:05.710
这是一个测试

25:06.750 --> 25:08.510
然后接下来的话 我把这个p

25:09.630 --> 25:11.070
我也给他设置这个样式类

25:14.030 --> 25:17.150
啊 你看这个样式类会不会影响到这个p 你看一下

25:18.190 --> 25:26.670
会不会影响 会影响 对不对 会影响 也就是说现在的话 我们没有用这个shadowdom的话 这边这两个问题 首先第一个你这边

25:27.070 --> 25:33.550
这个组件内部的这个样式 它会去影响什么 是不是 影响外部 对不对 第二个的话 就是你这边这个插槽

25:34.110 --> 25:35.630
压根就没法用啊

25:36.270 --> 25:41.390
好 来 我们这边的话 把这个shadowdom 把它加上 加上 然后我们一会再来讲 这个什么是shadowdom

25:42.830 --> 25:51.310
好 这边的话 我们要使用这个shadowdom啊 很简单 首先第一步 在这里 我们这边的话通过什么 通过 this 点attach

25:52.750 --> 26:00.830
attach shadow 调用这个方法啊 this 点attach shadow 调用这个方法 调用这个方法之后 然后加这边你给他传一个

26:01.230 --> 26:04.750
配置对象 这边呢是mode 对应的是closed

26:05.630 --> 26:17.330
closed 这个什么意思 我们一会讲那个shadowdom的什么 再说 反正这边的话 我们先创建好 创建完了之后 我们稍微保存一下啊看是的一个shadow

26:18.450 --> 26:18.770
等于

26:20.050 --> 26:29.570
ok 好 然后接下来 我们刚才在这个opener child的content的时候 我们是把它添加到哪里 是不是添加到z上面 z 是什么 z 是不是你的这个实力

26:30.370 --> 26:35.890
对不对 是你这个这个custom component的这个实力对象 好 人家我们这边就不在z

26:35.890 --> 26:37.890
上面了 而是在什么 而是在shadow 上面

26:38.850 --> 26:43.330
看到没有 shadow 点啊 喷的敲的 好 让大家保存一下 过来看一下

26:45.820 --> 26:49.660
呃 这边的话我看一下哪里出问题了啊 稍等我看一下

26:51.420 --> 26:56.140
哦 我知道了 我知道了 好 我们这边的话 现在的话 我们写的这个自定义组件

26:56.460 --> 27:02.140
那你现在的话 他这边这个shadowdom啊 我本来说一会再说的啊 他shadowdom的话 他就会有一个

27:02.700 --> 27:08.220
就特性 什么特性呢 就他内部的这个样式就不会再去影响外部了

27:08.940 --> 27:14.140
ok 内部样式就不会再去影响外部 好 人家这边的话 一般来讲的话 你这边就需要把这个style

27:15.660 --> 27:17.500
style 把它写进来

27:18.540 --> 27:25.820
ok 写进来 保存一下来看一下 是不是就搞定了 对不对啊 你看这个插槽也搞定了啊 包括这个p

27:26.300 --> 27:30.940
是不是也搞定了 对吧 那有同学可能会说你这边是不是因为你这边把这个

27:31.820 --> 27:35.420
style 写到这个template里面了 说说这边它不会影响

27:35.900 --> 27:38.940
就是外部啊 不是的 你看看我这边的话 我如果不用

27:40.140 --> 27:43.740
我这边如果仍然用 像刚才那样子 this 保存

27:44.620 --> 27:49.820
你看 是不是仍然会去影响外部啊 对不对 仍然会去影响外部的 ok

27:50.460 --> 27:51.660
好 把这边换圆啊

27:54.220 --> 27:56.060
这边shadow ok

27:56.940 --> 28:00.380
好 这是关于这个插槽啊 插槽也就ok了

28:00.940 --> 28:02.060
好 继续往后面看

28:03.580 --> 28:11.340
这是插槽 然后接下来事件 事件的话也很简单 事件的话你就正常绑定这个事件就可以了

28:11.340 --> 28:14.140
啊 我们这边呢 比如说给谁呢 比如我们给这个

28:15.420 --> 28:23.100
text 我看我这边需要获取一下吧 我这边text storm 这边query 我们这边获取一下 我们这边这样子

28:24.700 --> 28:28.540
我们这边的话获取props 这边的话获取

28:29.500 --> 28:33.260
获取啊 内部的这个p

28:37.090 --> 28:42.530
啊 我们这边的话 const 一个这个p storm ok

28:43.650 --> 28:45.810
p storm 感觉像在骂人一样是吧

28:47.490 --> 28:52.770
好 然后接下来这边啊 这边是给他这个改内容 然后叫我们下面来绑定事件

28:54.450 --> 28:58.050
绑定事件啊 然后这个p storm

29:00.560 --> 29:08.160
呃p storm 要怎么绑啊 就原生的 ok 就以前你怎么绑的 现在就这么绑就ok了啊 大家这边就是什么

29:09.120 --> 29:11.760
所以就是啊 and event listener

29:12.720 --> 29:14.800
对了 我们给他绑定一个点击事件

29:15.520 --> 29:18.160
click 啊对应的这个回调函数

29:19.760 --> 29:24.320
啊 这边拿到事件对象啊 这边呢你可以注释冒泡1点

29:25.200 --> 29:29.920
stop 啊这个propagation 然后接下来的话 这边我们比如说 alert

29:32.560 --> 29:34.000
啊 这是制定一

29:35.280 --> 29:39.440
啊 随随便写个吗 hello 对吧 hello 保存

29:40.240 --> 29:44.720
好 来看一下 这边比如说我点点这里 注意我鼠标在这里 走

29:45.280 --> 29:49.280
不搞定了 对不对 你点其他地方都不好使啊 大家点这

29:49.760 --> 29:53.040
什么 ok 了 对不对 这边就是关于这个绑定事件

29:53.520 --> 29:56.080
啊 更加接近于什么 是原生的这个写法

29:56.800 --> 30:00.480
对吧 他就不像view 啊view的话 里面给你提供了很多的黑魔法

30:01.200 --> 30:05.840
啊 比如说这边给你提供的那种options api 你可以把所有的这个事件

30:06.160 --> 30:11.200
写到这个message里面 那有给你提供这个榜事件 然后通过什么圈 click 这些

30:11.600 --> 30:14.080
啊 他这个的话就是更加接近于这个原生的

30:14.800 --> 30:17.920
对不对啊 全是原生ts的这个写法 ok

30:19.680 --> 30:21.360
好 然后回来 我们继续

30:24.340 --> 30:29.780
好 然后后面这些还有些这个细节之类的 这个就自己下去看了啊

30:29.860 --> 30:33.380
比如你这边在制定事件的时候 你这边可以进行一些这些的配置

30:33.620 --> 30:36.500
啊 我这边写的有注释 ok 下去自己看一下

30:36.980 --> 30:39.860
好 然后接下来我们这边 我们就来看一下这个shadow dorm

30:40.500 --> 30:43.940
shadow dorm是什么啊 我们刚才的话在这边是不是也是提到了

30:44.500 --> 30:50.900
在在在这里 这边也提到了对了这个shadow dorm对不对啊 来我们具体来看一下这个shadow dorm是什么

30:51.620 --> 31:02.660
shadow dorm 它允许将隐藏的动物数附加到常规的动物数中啊 它以什么呢 以这个shadow root 节点为骑士根节点

31:03.060 --> 31:08.820
在这个根节点的下方可以是任意元素啊 和普通的动物元素是一样的 你看这边

31:09.060 --> 31:16.900
这个是我的动物数啊 动物数好 然后这样我这边有个节点对吧 好 然后接下来的话 这个是一个shadow tree

31:17.220 --> 31:25.540
shadow tree的话 然后这样回头这边是shadow root啊 这边是shadow host 然后这样我就把这个shadow root 然后这样把它拿过来

31:26.420 --> 31:33.620
对不对 拿过来就就是这个根节点自然而然的啊 复制到了这个根节点 好 然后这样回头的话 这边就

31:34.180 --> 31:39.060
是不是最终形成了这样子的数 对不对啊 这个的话 它的原理其实也很简单

31:39.380 --> 31:43.540
什么意思啊 其实我给大家举个形象的例子 他就知道了 比如说我举个例子

31:43.940 --> 31:46.900
比如说我现在的话 我这边document

31:48.420 --> 31:54.820
document.createElementDIV 我这边是不是创建了一个DIV元素

31:56.340 --> 32:02.180
是不是创建了 但是你现在的话 你在这边 你在整个这个页面这里看得到吧

32:02.820 --> 32:06.260
看不到吧 对不对 然后接下来我这边呢 我比如说再创建一个p

32:07.140 --> 32:12.740
啊 创建了一个p之后 人家这边的话 我们这边稍稍微存储一下嘛 const这个DIV

32:13.460 --> 32:15.300
啊 然后加这边const

32:16.420 --> 32:20.340
const这个p ok 好 然后加这边它这个DIV

32:21.940 --> 32:26.660
DIV点这个openedchild把这个p添加上去

32:27.140 --> 32:32.740
ok 那你看我这边是不是也是创建了动物节点 对不对 动物节点DIV的动物节点p的动物节点

32:32.980 --> 32:36.500
人家这边他把它添加上去 然后这边是不是也是形成了数的结构

32:37.300 --> 32:40.820
对不对 但这个数的结构你在这个页面里面 你看得到吧

32:41.540 --> 32:47.620
看不到 直到什么时候 什么时候你才会看得到 是不是你这边document点body

32:48.100 --> 32:51.700
点openedchild 是不是只只有到这一刻的时候

32:52.260 --> 32:56.740
是最终在页面上面是不是才呈现出来 对不对 只要没到这一刻 那你这边的话

32:57.140 --> 33:01.940
是看不到的 但是这边的话他也是什么 是不是也是呈现出了一颗这个数的这个结构

33:02.500 --> 33:05.060
对不对 那你看这边和这张图是不是就是一样的吗

33:05.780 --> 33:09.780
看到没有 就一样的啊 我这边呢 这边呢 有呈现出了一个数的结构

33:10.340 --> 33:15.860
呈现出了一个数的结构之后 然后接下来直到我把它添加到真实动物 数上面内一刻

33:16.260 --> 33:21.060
啊 你这边的话才看得到 这是首先第一个啊 第二个的话就是这个shadow

33:21.780 --> 33:23.620
tree的话 他这边的话

33:24.660 --> 33:30.580
他还有一点比较特殊的 什么呢 就是他这边的话 他这个内部他是一块独立的区域

33:31.140 --> 33:31.940
啊 怎么理解呢

33:33.060 --> 33:34.420
就你看我们刚才那个样式

33:35.860 --> 33:40.820
你看我们刚才那个样式 你看我们这个刚才的这个样式 他是不是就只作用于

33:41.380 --> 33:45.460
这一块shadowdom 对不对 他会不会去影响外部的

33:46.100 --> 33:49.460
是不会 对不对 他不会去影响这个外部的啊

33:49.780 --> 33:54.180
这个的话 当然这边还有就是啊 这边要说一下 在这里啊 在这里

33:54.580 --> 33:58.500
就我们刚才在这个attachy shadow的时候 里面是不是有个mod

33:58.980 --> 34:03.460
对不对 mod的话有open和close 我们刚才选的是什么 是选的是close

34:03.940 --> 34:11.220
他这个代表什么意思 他这边close的话就代表就是你不可以从外部获取到shadowdom

34:11.940 --> 34:14.180
啊 那这个就是我刚才所说的 他就是独立的

34:14.900 --> 34:21.060
对不对 完全独立的一个空间啊 那你如果是open 那open的话 你就可以通过页面内的这个gs

34:21.060 --> 34:25.540
方法来获取啊 比如通过这个element点shadowroot来获取

34:26.020 --> 34:31.620
OK 好这个的话就是关于这个shadowdom 实际上的话 你不敢他离

34:31.620 --> 34:36.100
他这个就是 实际上就是字面意思啊 这个shadow什么影子的意思吗

34:36.820 --> 34:41.060
tree 影子数 影子数的话 我这边实际上也是有一个完整的这个

34:41.780 --> 34:47.300
这个dom的这个结构 怎么你看不到的 你在页面上也看不到啊 我这边就像一个影子一样

34:47.540 --> 34:51.220
然后但是呢 他确确实实是形成了一个dom数的这个结构

34:51.620 --> 34:54.980
然后回头呢 只有当我把这个影子数添加过来的时候

34:56.260 --> 34:59.060
那添加过来的时候 是不是最终你这边是不是才看得到

34:59.860 --> 35:04.020
对不对啊 然后加这边这个影子数 他这边让我可以设置成一个独立的这个区域

35:04.260 --> 35:07.940
我在这个影子数里面我写一些这个样式啊 他不会影响外部

35:08.660 --> 35:15.300
OK啊 这个shadow trade 这个shadowdom的话 实际上在html里面 实际上是非常常见的

35:16.020 --> 35:20.500
非常常见的 啊 比如说我给他举个例子啊 把这个代码就直接拿过来了

35:23.120 --> 35:24.640
嗯 我放到这吧

35:25.360 --> 35:29.760
这个不删吗 就放到这下面啊 不对 这是gs代码是吧

35:30.800 --> 35:32.960
啊 放到放到上面

35:33.680 --> 35:34.400
放到哪里

35:35.440 --> 35:37.040
放到这个p 下面吧

35:39.660 --> 35:40.540
OK 保存

35:42.380 --> 35:46.700
保存之后 然后加你看一下 看一下这边 这边呢 是不是就是一个视频

35:47.660 --> 35:52.860
对不对啊 一个视频啊 那这个视频的话 我这边的话 你看我这边在写的时候 我这边是一个video

35:53.580 --> 35:59.740
对吧 是个video 啊video的话 它是一个元素 元素的话 但是你看它这里面有什么

36:00.460 --> 36:06.780
这里面你看这些是不是都 就是这个 比如说这边这个播放按钮啊 时间呀 进度条呀

36:07.180 --> 36:09.100
你明明只写了一个这个video

36:09.740 --> 36:13.020
但是它这里面的话 包含的这个元素是非常丰富的

36:14.220 --> 36:18.700
对不对 它包含的元素是非常丰富的 那这个的话 它包含在哪里面的

36:18.780 --> 36:21.340
它实际上就是包含在这个shadowdom里面的

36:22.060 --> 36:23.500
OK 那我们这边我们来看一下

36:25.810 --> 36:30.450
嗯 我们把这个video 我们把它展开 展开的话 你可以看到这边的话 会有一个这个shadow root

36:31.010 --> 36:37.170
看到没有 和我们这边是一样的 我们这边刚是不是这个自定义组件 自定义组件 你看这边会有一个这个shadow root

36:37.650 --> 36:40.370
你把它展开 展开的话 这里面什么div style

36:41.170 --> 36:45.650
对不对 你看这边 我们刚写的style 那在这边这个div 下面这个p

36:46.050 --> 36:50.530
你看它这边呢 是一个shadow啊 是一个这个影子啊shadow

36:51.090 --> 36:57.170
OK 那这边的话也是一样 啊 但这个前提的话 你这边得把这个开一下 正常情况下 你们应该是看不到的

36:57.970 --> 37:01.570
这边的话 我看一下在哪里开 看一下我笔记里面记得有

37:04.270 --> 37:06.750
呃 在控制台的设置

37:07.550 --> 37:08.190
控制台

37:10.270 --> 37:14.430
控制台的设置 啊 这里 这里 这里的话 你要把这个勾选上

37:15.390 --> 37:17.550
就这边 这个你摸着它是没有勾的

37:18.270 --> 37:24.030
啊 某人是没有勾的 没有勾的话 你看到的话 看到的话 就是这个样子的 我把它展开一下 你看到的就是一个video

37:24.750 --> 37:30.510
对不对 就是一个video啊 video的话 但是你看这边啊 这个什么播放按钮对不对 音量这些

37:30.750 --> 37:37.230
进度调这些都有 但是你这个就是一个简单的这个video啊 然后既然我们这边正开 这边的话看得到

37:38.270 --> 37:39.870
这边看得到就是这个shadow root

37:40.190 --> 37:42.510
好了 接下来这个video 大家你把那个打开

37:43.230 --> 37:46.590
这个设置 大家这边显示

37:47.470 --> 37:53.230
显示之后 然后接下来 这边你看一下 实际上video的话 它这边也是用到了这个shadow多么 你把它展开

37:53.550 --> 37:56.110
展开之后你就会发现 哦 原来这边你看

37:56.510 --> 38:01.390
这个是 这个是选项啊 是不是也是用的是这个普通的这个div来做的

38:02.190 --> 38:06.990
对不对 看到没有 okay 说这个shadow多么 实际上早就在使用了

38:07.550 --> 38:11.870
啊 早就在使用了 比如说你这个原生的接 这个原生的html里面

38:12.990 --> 38:17.390
比如说像这个video啊 比如说像你的这个image这些 okay

38:17.870 --> 38:24.110
就这些空间啊 它实际上一直都在使用这个shadow多么 这shadow多么实际上本质上它不是个新的概念

38:24.670 --> 38:28.110
啊 不是新的概念 只不过之前的话是隐藏掉了的 okay

38:28.750 --> 38:31.470
就隐藏不让你看到 所以你这边也看不到啊

38:32.110 --> 38:33.950
这是关于这个shadow多么

38:35.310 --> 38:42.430
啊 因此像image Barton input text area这些啊 这些标签的话你是不能够作为这个数组的

38:43.070 --> 38:46.590
什么意思啊 就是我们这边 你看我们这边在做这个

38:49.630 --> 38:50.190
你看这里

38:51.870 --> 38:59.070
比如说我们这边刚才定义的这个custom component啊 他这边让他这个shadow root啊shadow root是这边

39:00.030 --> 39:05.790
影子数的根节点啊 我们称为影子根啊 然后影子根的这个复节点 我们称为数组 也就数组是谁

39:05.950 --> 39:07.950
是不是就是这个custom component

39:08.670 --> 39:14.270
对不对 这个就是我们的数组 然后家里面的话就是我们的这个shadow多么啊 它是数组

39:14.590 --> 39:17.310
好了 那接下来像vidio这些啊 像vidio

39:18.030 --> 39:26.190
像vidio啊 然后接下来这个image这些 他们能不能作为数组啊 不能为什么 因为他们本身是不是自己就内部已经有这个shadow多么了

39:26.590 --> 39:28.750
他们只 就是自己本身是不是就是数组

39:29.470 --> 39:35.710
对不对 okay 所以要注意这个问题啊 对吗 这个vidio他本身自己就是数组 他里面有一套什么

39:35.870 --> 39:39.150
这边有一套这个shadow多么 对不对 okay

39:40.590 --> 39:49.070
好 然后这个明白了之后 那我们整个这个vibocomponent啊 这三大件啊custom element template和shadow多么

39:49.310 --> 39:55.470
啊 就带着大家快速的过了一下啊 这个过完了之后 然后回头的话 你再去看这个exposer

39:55.950 --> 39:57.630
啊 很多东西就是类似的了

39:58.190 --> 40:02.590
ok 很多东西就是类似的了啊 所以这边的话 下来的话 大家再把这个

40:03.230 --> 40:04.750
官方等 我看我这边是不是

40:05.470 --> 40:11.950
是不是指的这啊 就是这就是这 okay 啊 下来的话 大家再把这个exposer这个框架

40:12.270 --> 40:18.830
你自己的话再把它看一下 他这里面的话 实际上就是通过什么的 就有点类似于那个vibocomponent的方式

40:19.150 --> 40:24.990
啊 只定义了这些组件啊 包括我们平时使用的 比如说小程序里面使用的什么view啊

40:25.630 --> 40:32.830
对吧 还有些什么啊 好像也有text 是吧 text呀 他类似不是类似的一套组件吗 实际上就是使用的

40:33.230 --> 40:36.670
类似于vibocomponent的这种方式啊 来自定义的

40:37.310 --> 40:37.550
ok

40:39.150 --> 40:44.030
好 下来的话 就自己把这个看一下 他这边就是提到了这个 虾兜萃的这个概念

40:44.590 --> 40:51.390
ok 下来把这个看一下吧 ok 这就是关于这节课 这节课其实主要是给大家介绍这个

40:52.350 --> 40:54.110
主要是给大家介绍这个vibocomponent

40:55.150 --> 40:58.110
你把这个了解了之后 回头你再看这个 这个就很简单了

40:58.110 --> 41:02.590
ok 好 这节课的话就到这里 再见

