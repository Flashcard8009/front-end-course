WEBVTT

00:01.260 --> 00:06.660
好了 终于进入到这个界面部分了

00:06.660 --> 00:12.660
好 界面部分呢 其实我们有一个专业数语啊 叫做WebAPI

00:12.660 --> 00:15.660
其实从这个数语里面可以看出啊

00:15.660 --> 00:20.260
界面这一套东西啊 无非就是API

00:20.260 --> 00:22.660
这API是啥 我讲过了 对吧

00:22.660 --> 00:27.660
就是给你提供了一大堆对象 然后呢 一些函数让你去使用

00:28.060 --> 00:32.060
所以说我们学界面 本质上学的是啥呀

00:32.060 --> 00:34.460
不就是学着的一套API吗

00:34.460 --> 00:38.760
那么面对API 无论是现在还是将来

00:38.760 --> 00:41.860
同学们始终记住 不需要理许背

00:41.860 --> 00:44.860
也不需要理许记忆

00:44.860 --> 00:48.960
你只需要能够查阅文档就可以了

00:48.960 --> 00:52.060
在开发的过程中呢 有些经常用到的

00:52.060 --> 00:54.860
看了几次文档之后呢 你就发现

00:54.860 --> 00:57.460
根本就没有必要看文档了 因为已经记住了

00:57.460 --> 00:59.760
已经自然而然的记住了

00:59.760 --> 01:03.460
有一些不太常见的经常忘了 非常正常

01:03.460 --> 01:05.360
到时候就查文档就完事了

01:05.360 --> 01:08.760
包括袁老师这么多年了 还是会忘记这里面的API

01:08.760 --> 01:11.060
非常正常

01:11.060 --> 01:15.160
这里给大家说一下 在我们具体讲之前

01:15.160 --> 01:19.860
首先同学们要对界面这一部分有一个整体的了解

01:19.860 --> 01:23.960
其实我们讲课的过程中 只要涉及到概念性的东西

01:23.960 --> 01:25.960
反而才是最重要的

01:25.960 --> 01:30.060
那具体的API 就调这个函数 产生什么样的效果

01:30.060 --> 01:32.260
调另外一个函数 产生什么样的效果

01:32.260 --> 01:34.760
那个函数其实不重要

01:34.760 --> 01:38.760
你只要了解一点点就行了 然后去查阅就可以了

01:38.760 --> 01:40.560
概念实际上是最重要的

01:40.560 --> 01:44.360
概念它决定了你对这个知识认识的 精不精准

01:44.360 --> 01:47.160
准不准确 深不深刻

01:47.160 --> 01:50.160
好 这个卫本API这一块 我给大家同学们说一下

01:50.160 --> 01:54.060
它首先它不是标准的 所以说我们跟标准库有区别

01:54.060 --> 01:58.260
标准库是官方说的 说这里边你应该有个对象

01:58.260 --> 02:02.060
然后应该有个函数等等等等

02:02.060 --> 02:05.760
但是WebAPI它不是官方的

02:05.760 --> 02:09.060
而是浏览器提供的一套API

02:09.060 --> 02:11.060
懂得意思吧

02:11.060 --> 02:13.960
它有没有标准 也有标准

02:13.960 --> 02:17.960
不过不同的浏览器多多少少会有一些细微的差异

02:17.960 --> 02:19.160
大体上差不多

02:19.160 --> 02:23.160
那么这些差异我们现在不用去做过多的解释

02:23.160 --> 02:26.760
将来有一些工具可以帮我们搞定这些问题

02:26.760 --> 02:30.960
而我们这几节课介绍的这些API

02:30.960 --> 02:34.960
都是所有浏览器都支持的 好吧

02:35.960 --> 02:39.160
首先WebAPI是浏览器提供的一套API

02:39.160 --> 02:40.960
不是官方的

02:40.960 --> 02:43.260
用于操作浏览器窗口

02:43.260 --> 02:48.160
就浏览器本身 比方说什么网络通信

02:48.160 --> 02:50.360
不过我们现在还不涉及网络通信

02:50.360 --> 02:53.960
可以网络通信 保存一些东西

02:53.960 --> 02:56.760
或者打开一个窗口 关闭一个窗口

02:56.760 --> 02:59.960
都是属于浏览器本身的操作

02:59.960 --> 03:02.360
和界面

03:02.360 --> 03:04.360
就除了操作浏览器本身之外

03:04.360 --> 03:05.860
它还可以操作界面

03:05.860 --> 03:07.860
就是我们页面上的一些东西

03:07.860 --> 03:10.360
一面上这个元素边一下

03:10.360 --> 03:12.360
左边这个元素跑右边去

03:12.360 --> 03:14.360
这个元素的背景颜色变一下

03:14.360 --> 03:16.160
这些属于界面的操作

03:16.160 --> 03:18.360
所以它有两部分组成

03:18.360 --> 03:20.360
一部分是操作浏览器窗口

03:20.360 --> 03:22.360
一部分是操作界面

03:22.360 --> 03:25.860
那么这两部分有一套专业的术语叫做BOOM

03:25.860 --> 03:27.360
BOOM叫做Browser

03:27.360 --> 03:28.860
什么 浏览器 对吧

03:28.860 --> 03:31.360
Browser Objects Model

03:31.360 --> 03:32.360
浏览器模型

03:32.360 --> 03:35.860
它提供与浏览器本身相关的操作

03:35.860 --> 03:38.360
还有一套东西叫做Dome

03:38.360 --> 03:41.360
它叫做Document Objects Model

03:41.360 --> 03:43.360
表示文档模型

03:43.360 --> 03:45.360
它提供与页面相关的操作

03:45.360 --> 03:47.360
就这两套东西

03:47.360 --> 03:48.360
那么可以想象到

03:48.360 --> 03:50.360
我们平时用的最多的是什么呢

03:50.360 --> 03:51.860
那肯定是Dome的 对吧

03:51.860 --> 03:53.360
我们操作的是页面

03:53.360 --> 03:54.360
就我们自己的页面

03:54.360 --> 03:56.360
把它做各种各样的特效变化

03:56.360 --> 03:58.360
那么操作的是文档模型

03:58.360 --> 04:01.360
浏览器模型我们会不会用的

04:01.360 --> 04:02.860
会用的不多

04:02.860 --> 04:04.360
里面有一些函数

04:04.360 --> 04:06.360
有一些方法比较常见

04:06.360 --> 04:07.860
其他的不太常见

04:07.860 --> 04:09.360
我们这些可能先快速的

04:09.360 --> 04:11.360
把BOOM过一遍

04:11.360 --> 04:12.360
就完事了

04:12.360 --> 04:13.360
就是一些对象的一些方法

04:13.360 --> 04:15.360
无非就是如此

04:15.360 --> 04:17.360
下边有一张图

04:17.360 --> 04:19.360
这张图同学们要牢牢的

04:19.360 --> 04:21.360
印在你的心里边

04:21.360 --> 04:23.360
这张图就解释了

04:23.360 --> 04:25.360
我们这一段时间

04:25.360 --> 04:26.360
学习的各种各样

04:26.360 --> 04:28.360
乱七八糟的属于

04:28.360 --> 04:30.360
与他们之间的关系

04:30.360 --> 04:31.360
我们平时说

04:31.360 --> 04:33.360
我们说这个文科学的是

04:33.360 --> 04:34.360
GS 对吧

04:34.360 --> 04:35.360
就JavaScript

04:35.360 --> 04:37.360
那么这个玩意呢

04:37.360 --> 04:39.360
它实际上

04:39.360 --> 04:41.360
分不清楚这个JavaScript

04:41.360 --> 04:42.360
有的时候我又听到了

04:42.360 --> 04:44.360
GS 还有ES

04:44.360 --> 04:46.360
那它有什么区别呢

04:46.360 --> 04:47.360
还有又出来什么

04:47.360 --> 04:49.360
WebAPI 有什么标准库

04:49.360 --> 04:50.360
它是这么一回事

04:50.360 --> 04:52.360
就是

04:52.360 --> 04:54.360
我们的GS

04:54.360 --> 04:56.360
是有很多部分组成的

04:56.360 --> 04:58.360
有大的两部分

04:58.360 --> 05:00.360
一个就是ES

05:00.360 --> 05:02.360
AkmaScript

05:02.360 --> 05:04.360
一个叫WebAPI

05:04.360 --> 05:06.360
我们首先说ES

05:06.360 --> 05:10.360
ES 是欧洲计算机制造商协会

05:10.360 --> 05:12.360
其实我们平时说的

05:12.360 --> 05:13.360
再习惯一点的话就是

05:13.360 --> 05:14.360
GS的官方

05:14.360 --> 05:16.360
官方就是指着它

05:16.360 --> 05:20.360
它出的一套语言标准

05:20.360 --> 05:22.360
什么叫标准

05:22.360 --> 05:24.360
回忆一下

05:24.360 --> 05:26.360
登革媳妇

05:26.360 --> 05:28.360
就说我不做

05:28.360 --> 05:29.360
我就说

05:29.360 --> 05:30.360
你写循环

05:30.360 --> 05:32.360
应该有一个for

05:32.360 --> 05:33.360
for

05:33.360 --> 05:35.360
for或者是while

05:35.360 --> 05:37.360
都可以写循环

05:37.360 --> 05:38.360
定义辩量

05:38.360 --> 05:39.360
应该用ver

05:39.360 --> 05:42.360
它就说这套语言规范

05:42.360 --> 05:44.360
你该怎么来说话

05:44.360 --> 05:46.360
什么叫函数

05:46.360 --> 05:48.360
它给你做定义

05:48.360 --> 05:51.360
这就是官方做的事情

05:51.360 --> 05:54.360
然后除了语言规范之外

05:54.360 --> 05:57.360
包括我们之前学的语言规范

05:57.360 --> 06:00.360
还包括核心概念

06:00.360 --> 06:03.360
它都是属于官方标准里边的

06:03.360 --> 06:05.360
除了语言规范之外

06:05.360 --> 06:07.360
它还给你出了一个标准库

06:07.360 --> 06:10.360
说我这里边应该有一个

06:10.360 --> 06:13.360
一个构造函数叫做array

06:13.360 --> 06:14.360
可以创建数组

06:14.360 --> 06:17.360
数组里边可以有哪些方法

06:17.360 --> 06:19.360
这就是语言式

06:19.360 --> 06:22.360
由于语言式是官方的

06:22.360 --> 06:25.360
所以说函是支持

06:25.360 --> 06:26.360
介石的东西

06:26.360 --> 06:28.360
它都应该支持语言式

06:28.360 --> 06:31.360
它至少必须要支持语言式

06:31.360 --> 06:33.360
像我们的漏德介石环境

06:33.360 --> 06:36.360
我们之前不是一直在漏德介石环境里面玩吗

06:36.360 --> 06:38.360
漏德介石环境里面为什么它

06:38.360 --> 06:40.360
能够支持各种各样的操作

06:40.360 --> 06:42.360
因为那些操作都是属于语言式

06:42.360 --> 06:44.360
官方标准它是肯定支持的

06:44.360 --> 06:47.360
它的写法跟浏览器里面都是一样的

06:47.360 --> 06:49.360
懂了意思吧 这叫语言式

06:49.360 --> 06:51.360
而另外一部分的就是

06:51.360 --> 06:53.360
官方它没有规定

06:53.360 --> 06:57.360
是那些具体的环境自己玩出来的

06:57.360 --> 06:59.360
比方浏览器环境里边

06:59.360 --> 07:02.360
它就今天玩了一些新的东西

07:02.360 --> 07:04.360
给你做了一些新的对象

07:04.360 --> 07:06.360
给你做了一些新的函数

07:06.360 --> 07:08.360
让你方便来操作浏览器

07:08.360 --> 07:10.360
或者是操作页面

07:10.360 --> 07:12.360
那么这一部分的叫做WebAPI

07:12.360 --> 07:14.360
WebAPI里面包含了BOM

07:14.360 --> 07:15.360
和DOM刚才说了

07:15.360 --> 07:17.360
一个是操作浏览器的窗口

07:17.360 --> 07:21.360
本身一个是操作页面的东西

07:21.360 --> 07:23.360
于是这一坨组成起来

07:23.360 --> 07:25.360
就是夹法script

07:25.360 --> 07:27.360
那么将来我们还会学习

07:27.360 --> 07:30.360
另外一个环境不是浏览器了

07:30.360 --> 07:32.360
是漏德介石

07:32.360 --> 07:34.360
这不是浏览器环境的

07:34.360 --> 07:36.360
那么可以想象得到

07:36.360 --> 07:38.360
在这个漏德介石里面

07:38.360 --> 07:40.360
它会不会支持这个呀

07:40.360 --> 07:42.360
所以一定会支持

07:42.360 --> 07:44.360
不然我们之前作业怎么写的呢

07:44.360 --> 07:46.360
它一定会支持这个

07:46.360 --> 07:48.360
但是漏德介石是不支持这个的

07:48.360 --> 07:50.360
因为这不是官方的

07:50.360 --> 07:52.360
那么漏德介石呢

07:52.360 --> 07:54.360
会给你提供另外一套东西

07:54.360 --> 07:56.360
叫做漏德API

07:56.360 --> 07:59.360
也就是漏德介石是什么

07:59.360 --> 08:01.360
ES加上漏德API

08:01.360 --> 08:03.360
介石是什么

08:03.360 --> 08:05.360
ES加上webAPI

08:05.360 --> 08:07.360
就这么简单

08:07.360 --> 08:09.360
当然那平时有的时候

08:09.360 --> 08:11.360
我们说习惯的也没有去

08:11.360 --> 08:13.360
刻意的区分介石和ES

08:13.360 --> 08:15.360
倒是没有去刻意的区分

08:15.360 --> 08:17.360
有的时候我们说ES介石都是一个东西

08:17.360 --> 08:19.360
我们说有的时候

08:19.360 --> 08:21.360
漏德里面也可以写介石代码

08:21.360 --> 08:23.360
也就是说把介石当成了ES代用

08:23.360 --> 08:25.360
没有那么严格的区分

08:25.360 --> 08:27.360
但是如果说要严格区分的话

08:27.360 --> 08:29.360
就应该是这种结构

08:29.360 --> 08:31.360
听懂了吧

08:31.360 --> 08:33.360
这是前面给大家介绍这个概念

08:33.360 --> 08:35.360
那么学的话

08:35.360 --> 08:37.360
其实前面都学完了

08:37.360 --> 08:39.360
这一块都学完了

08:39.360 --> 08:41.360
这一块是非常简单的

08:41.360 --> 08:42.360
为什么呢

08:42.360 --> 08:44.360
因为这一块不可能有新语法

08:44.360 --> 08:46.360
同学们记住除了官方之外

08:46.360 --> 08:48.360
像这些

08:48.360 --> 08:50.360
第三方的东西

08:50.360 --> 08:52.360
它是不可能给你出新语法的

08:52.360 --> 08:54.360
那除了新语法

08:54.360 --> 08:56.360
有的时候有没有这种可能性呢

08:56.360 --> 08:58.360
有这种可能性

08:58.360 --> 08:59.360
但是一般来说

08:59.360 --> 09:00.360
绝大部分情况下

09:00.360 --> 09:02.360
它都不会给你出新语法

09:02.360 --> 09:03.360
什么叫语法

09:03.360 --> 09:05.360
就是一种新的书写代码的格式

09:05.360 --> 09:06.360
比方说

09:06.360 --> 09:07.360
我们在介石里面

09:07.360 --> 09:08.360
哪些是新语法

09:08.360 --> 09:09.360
哪些是语法

09:09.360 --> 09:11.360
4 循环

09:11.360 --> 09:13.360
2 定义变量

09:13.360 --> 09:14.360
对象应该这么写

09:14.360 --> 09:15.360
两个大王号

09:15.360 --> 09:16.360
书主应该这么写

09:16.360 --> 09:18.360
就是语法

09:18.360 --> 09:20.360
什么叫API呢

09:20.360 --> 09:21.360
就是给你做了一个函数

09:21.360 --> 09:22.360
并没有语法产生

09:22.360 --> 09:23.360
对吧

09:23.360 --> 09:25.360
你调这个函数是这样调

09:25.360 --> 09:27.360
调另外一个函数还不是这样调

09:27.360 --> 09:29.360
并没有语法产生

09:29.360 --> 09:30.360
因为它不是标准

09:30.360 --> 09:32.360
只有官方才有权利

09:32.360 --> 09:34.360
去出语法规范

09:34.360 --> 09:35.360
所以说这一会

09:35.360 --> 09:37.360
我的就是一些对象一些函数

09:37.360 --> 09:38.360
所以说怕什么呢

09:38.360 --> 09:40.360
因此你只要前边学好了

09:40.360 --> 09:41.360
这一部分非常简单

09:41.360 --> 09:44.360
就查文档干活就完事了

09:44.360 --> 09:46.360
我们首先看第一部分

09:46.360 --> 09:47.360
就BOM

09:47.360 --> 09:48.360
BOM这一块呢

09:48.360 --> 09:50.360
它提供了一系列的对象和函数

09:50.360 --> 09:53.360
来让你操作流量器本身

09:53.360 --> 09:55.360
这里我介绍三个对象

09:55.360 --> 09:56.360
一个是Windows

09:56.360 --> 09:57.360
之前说过了是吧

09:57.360 --> 09:58.360
是个全局对象

09:58.360 --> 09:59.360
它里边有很多东西

09:59.360 --> 10:02.870
我们看流量器里边

10:02.870 --> 10:04.870
它里边有很多很多东西

10:04.870 --> 10:05.870
都在里边

10:05.870 --> 10:07.870
那么这里边的东西呢

10:07.870 --> 10:11.870
我们关注常用的就可以了

10:11.870 --> 10:12.870
常用里边呢

10:12.870 --> 10:14.870
我们再关注最常用的就可以了

10:14.870 --> 10:16.870
其他常用里边不太常用的

10:16.870 --> 10:18.870
就不太关注了

10:18.870 --> 10:19.870
像这个Open

10:19.870 --> 10:20.870
什么意思呢

10:20.870 --> 10:21.870
简单看一下

10:21.870 --> 10:24.870
打开一个新的流量器窗口

10:24.870 --> 10:26.870
返回一个新的温度对象

10:26.870 --> 10:28.870
再看一下吧

10:28.870 --> 10:31.870
我们这里Windows Open

10:31.870 --> 10:35.870
打开一个百度吧

10:35.870 --> 10:38.870
它就会打开一个新的标签

10:38.870 --> 10:41.870
然后地址是百度

10:41.870 --> 10:42.870
而且这个函数

10:42.870 --> 10:45.870
会返回一个对象

10:45.870 --> 10:46.870
还是Windows

10:46.870 --> 10:47.870
你用个辩量来接受一下

10:47.870 --> 10:48.870
不过那个Windows

10:48.870 --> 10:50.870
就是新窗口的Windows对象

10:50.870 --> 10:52.870
就不是这个窗口了

10:52.870 --> 10:53.870
你看

10:53.870 --> 10:54.870
打开这个百度了

10:54.870 --> 10:55.870
然后再看这边

10:55.870 --> 10:57.870
我们再看这个Windows

10:57.870 --> 10:58.870
是不是就是新窗口

10:58.870 --> 11:00.870
就这个窗口了

11:00.870 --> 11:02.870
然后这个对象里边

11:02.870 --> 11:03.870
我们就可以用别的东西了

11:03.870 --> 11:05.870
比方说像Close

11:05.870 --> 11:07.870
是不是可以关闭流量器窗口

11:07.870 --> 11:09.870
这个用的很少很少

11:09.870 --> 11:10.870
但它只能关闭什么呢

11:10.870 --> 11:13.870
只能关闭你打开的

11:13.870 --> 11:17.870
比方说你这里Windows Close

11:17.870 --> 11:19.870
是不是刚才打开的窗口

11:19.870 --> 11:21.870
一回车

11:22.870 --> 11:25.870
Windows Close

11:25.870 --> 11:27.870
它也关不了

11:27.870 --> 11:29.870
关不了也可能一直正常

11:29.870 --> 11:30.870
然后我们这里

11:30.870 --> 11:33.870
换一个

11:35.870 --> 11:37.870
换一个页面再打开

11:37.870 --> 11:39.870
实际上你在代码里边

11:39.870 --> 11:41.870
我们不太会使用

11:41.870 --> 11:43.870
这个Open的方式来打开窗口

11:43.870 --> 11:45.870
我们以后会换另一种方式

11:45.870 --> 11:47.870
如果说你要打开新标签页的话

11:47.870 --> 11:49.870
那么可能会使用Open

11:49.870 --> 11:51.870
如果说你在本窗口打开的话

11:51.870 --> 11:53.870
我们会使用另外一种方式

11:53.870 --> 11:54.870
关闭

11:54.870 --> 11:56.870
你看是不是后边关闭了

11:56.870 --> 11:57.870
刚才因为我是一个空白页

11:57.870 --> 11:59.870
它可能没有权限

11:59.870 --> 12:01.870
这是Close

12:01.870 --> 12:03.870
然后再看下边这四个

12:03.870 --> 12:05.870
下边这个四个是经常会使用的

12:05.870 --> 12:07.870
这叫计时器

12:07.870 --> 12:09.870
这个玩意是什么呢

12:09.870 --> 12:11.870
它是我们一个个看

12:11.870 --> 12:12.870
Set Timeout

12:12.870 --> 12:14.870
设置一个计时器

12:14.870 --> 12:16.870
在一段时间后

12:16.870 --> 12:18.870
会自动的运行某个函数

12:18.870 --> 12:20.870
就直接说

12:20.870 --> 12:22.870
那这个玩意是什么呢

12:22.870 --> 12:24.870
Set Timeout

12:24.870 --> 12:26.870
因为我们知道Window里边的东西

12:26.870 --> 12:27.870
是不是可以直接用

12:27.870 --> 12:28.870
因为它是全具对象

12:28.870 --> 12:30.870
它里边的东西可以直接使用的

12:30.870 --> 12:32.870
所以我们直接使用Set Timeout

12:32.870 --> 12:34.870
这里边传两个参数

12:34.870 --> 12:36.870
你看第一个参数的注释

12:36.870 --> 12:37.870
它的提示

12:37.870 --> 12:38.870
它可以传啥

12:38.870 --> 12:41.870
它告诉你要传一个毁掉函数

12:41.870 --> 12:43.870
所以第一个参数应该是啥

12:43.870 --> 12:45.870
应该是一个函数

12:45.870 --> 12:47.870
第二个参数是啥呢

12:47.870 --> 12:49.870
是好妙

12:49.870 --> 12:51.870
比方说你传一个1000

12:51.870 --> 12:53.870
就表示一秒

12:53.870 --> 12:55.870
那么这句话是什么意思呢

12:55.870 --> 12:56.870
告诉浏览器

12:56.870 --> 12:58.870
一秒钟之后

12:58.870 --> 13:00.870
因为浏览器本身就自带

13:00.870 --> 13:02.870
计时的功能

13:02.870 --> 13:04.870
因此告诉它一秒钟之后

13:04.870 --> 13:06.870
运行这个函数

13:06.870 --> 13:07.870
现在运不运行

13:07.870 --> 13:08.870
还不运行

13:08.870 --> 13:09.870
一秒钟之后再运行

13:09.870 --> 13:11.870
那么这里要传一个函数

13:11.870 --> 13:12.870
你可以写个函数

13:12.870 --> 13:13.870
把函数名字传进去

13:13.870 --> 13:15.870
也可以直接把函数表达

13:16.870 --> 13:17.870
这边也可以

13:17.870 --> 13:19.870
比方说我们这里

13:19.870 --> 13:22.870
console log123

13:22.870 --> 13:24.870
好一回车

13:24.870 --> 13:26.870
一秒钟之后

13:26.870 --> 13:28.870
得到一个123

13:28.870 --> 13:32.870
那前面这个895是啥东西呢

13:32.870 --> 13:35.870
这个895是函数的反回结果

13:35.870 --> 13:36.870
就是你调用这个函数

13:36.870 --> 13:38.870
是不是立即会有一个反回结果

13:38.870 --> 13:39.870
懂了意思吧

13:39.870 --> 13:40.870
就这个函数

13:40.870 --> 13:42.870
不是说这个函数要等一秒钟

13:42.870 --> 13:43.870
我这里给大家

13:43.870 --> 13:44.870
详细的介绍一下

13:44.870 --> 13:46.870
因为这里容易出现一些误解

14:01.430 --> 14:02.430
因为这个函数

14:02.430 --> 14:03.430
node结式也是支持的

14:03.430 --> 14:05.430
也不是那个

14:05.430 --> 14:06.430
web API吗

14:06.430 --> 14:07.430
这是web API的东西

14:07.430 --> 14:09.430
为什么node环境里面也支持的

14:09.430 --> 14:10.430
因为node环境里面

14:10.430 --> 14:11.430
给你做了一个

14:11.430 --> 14:13.430
一模一样的函数出来

14:13.430 --> 14:15.430
叫set timeout

14:15.430 --> 14:19.190
准备输出

14:19.190 --> 14:21.190
timeout

14:21.190 --> 14:23.190
一秒钟之后

14:23.190 --> 14:25.190
这里会形成一些误解

14:25.190 --> 14:27.190
有些同学觉得

14:27.190 --> 14:30.190
这个函数会在这里卡个一秒钟

14:30.190 --> 14:31.190
卡了一秒钟之后

14:31.190 --> 14:32.190
运行这个

14:32.190 --> 14:35.190
那么下面我们输出end

14:35.190 --> 14:37.190
有些人可能会认为

14:37.190 --> 14:39.190
等一秒钟先输出这个

14:39.190 --> 14:40.190
然后再输出end

14:40.190 --> 14:42.190
不是这样子的

14:42.190 --> 14:44.190
在戒业式里边

14:44.190 --> 14:45.190
它不会

14:45.190 --> 14:49.190
整个代码它永远不会卡住

14:49.190 --> 14:50.190
就是你这个函数

14:50.190 --> 14:52.190
它无非就是传了两个函数

14:52.190 --> 14:53.190
不要把它想复杂了

14:53.190 --> 14:56.190
它无非就是传了两个参数进去

14:56.190 --> 14:58.190
这个函数马上就运行结束了

14:58.190 --> 15:00.190
一定要就运行结束了

15:00.190 --> 15:03.190
然后就直接运行end了

15:03.190 --> 15:06.190
它是等到一秒钟之后

15:06.190 --> 15:09.190
又回过头来运行这个函数

15:09.190 --> 15:11.190
这种模式叫做一步

15:11.190 --> 15:12.190
我们之后

15:12.190 --> 15:14.190
在后续的学期中

15:14.190 --> 15:15.190
还会经常说这个概念

15:15.190 --> 15:17.190
叫一步

15:17.190 --> 15:19.190
什么叫一步呢

15:19.190 --> 15:21.190
同步是什么意思

15:21.190 --> 15:24.190
同步的话那就是刚才那个效果

15:24.190 --> 15:25.190
就要卡住

15:25.190 --> 15:27.190
前面的没有运行完

15:27.190 --> 15:29.190
后面的得等着

15:29.190 --> 15:31.190
就是我们的整个流程

15:31.190 --> 15:33.190
是一次一二三四

15:33.190 --> 15:36.190
这样子非常严格的遵守这个流程

15:36.190 --> 15:38.190
它不会跳于

15:38.190 --> 15:39.190
就要同步

15:39.190 --> 15:41.190
就前面的事情没做完

15:41.190 --> 15:44.190
后面的事情得等着

15:44.190 --> 15:47.190
如果说我们这里的函数

15:47.190 --> 15:49.190
这里要等卡个一秒钟

15:49.190 --> 15:50.190
然后运行它

15:50.190 --> 15:51.190
然后再运行它

15:51.190 --> 15:52.190
这叫同步

15:52.190 --> 15:53.190
非常规矩的

15:53.190 --> 15:55.190
那什么叫一步呢

15:55.190 --> 15:57.190
一步就是我不等

15:57.190 --> 15:58.190
我永远都不等

15:58.190 --> 15:59.190
就是我这个函数

15:59.190 --> 16:00.190
马上就运行完了

16:00.190 --> 16:02.190
然后接着往后运行

16:02.190 --> 16:03.190
只不过一秒钟之后

16:03.190 --> 16:05.190
回过头来运行这个函数

16:05.190 --> 16:06.190
这叫一步

16:06.190 --> 16:07.190
既也是

16:07.190 --> 16:09.190
它是一步性的理念

16:09.190 --> 16:11.190
所以它永远不会等待

16:11.190 --> 16:13.190
因此我们这里的函数

16:13.190 --> 16:15.190
因此先运行end

16:15.190 --> 16:16.190
再运行timeout

16:16.190 --> 16:17.190
我们来试一下

16:17.190 --> 16:18.190
先运行end

16:18.190 --> 16:19.190
马上运行出来了

16:19.190 --> 16:21.190
一秒钟之后再运行timeout

16:21.190 --> 16:22.190
原来的意思

16:22.190 --> 16:24.190
这个地方大家一定要区分一下

16:24.190 --> 16:25.190
所以我们回到这

16:25.190 --> 16:27.190
这个895是什么意思呢

16:27.190 --> 16:28.190
因为这个saytimeout函数

16:28.190 --> 16:30.190
是不是立即就运行结束了

16:30.190 --> 16:32.190
马上就运行结束了

16:32.190 --> 16:33.190
运行结束之后

16:33.190 --> 16:34.190
它会有个反而回结果

16:34.190 --> 16:35.190
在浏览器里边

16:35.190 --> 16:37.190
你输入一个函数也好

16:37.190 --> 16:39.190
输入一个表达式也好

16:39.190 --> 16:40.190
它会给你高速理

16:40.190 --> 16:41.190
你看这里

16:41.190 --> 16:44.190
高速理它的反而回结果是895

16:44.190 --> 16:46.190
那么895又是啥意思呢

16:46.190 --> 16:47.190
看下面

16:49.560 --> 16:51.560
刚才我们做了一个计时器

16:51.560 --> 16:53.560
然后有可能我们将来

16:53.560 --> 16:56.560
会清除这个计时器

16:56.560 --> 16:59.560
使用clearTimeout

16:59.560 --> 17:01.560
这个清除计时器的时候

17:01.560 --> 17:04.560
你就要传入计时器的id

17:04.560 --> 17:06.560
这个计时器的id在哪呢

17:06.560 --> 17:07.560
就在这

17:07.560 --> 17:10.560
就是这个函数的反而回结果

17:11.560 --> 17:13.560
所以说我们会经常这样的写

17:13.560 --> 17:15.560
比方说我们现在写一个

17:15.560 --> 17:17.560
10秒钟

17:17.560 --> 17:20.560
10秒钟之后输出123

17:20.560 --> 17:21.560
它给的反回一个id

17:21.560 --> 17:23.560
现在还没有到10秒的吧

17:23.560 --> 17:24.560
只有等到10秒之后

17:24.560 --> 17:25.560
它会输出123

17:25.560 --> 17:26.560
但是在10秒之前

17:26.560 --> 17:30.560
我就给它clearTimeout

17:32.560 --> 17:33.560
再来一次

17:33.560 --> 17:35.560
现在是2990

17:35.560 --> 17:39.560
我就clearTimeout2990

17:40.560 --> 17:42.560
我就把这个计时器给它清除掉了

17:42.560 --> 17:44.560
那么这个计时器

17:44.560 --> 17:46.560
它就不再是计时了

17:46.560 --> 17:48.560
相当于是中间被中断了

17:48.560 --> 17:49.560
有个闹钟10秒之后

17:49.560 --> 17:50.560
要运行这个函数

17:50.560 --> 17:51.560
现在我直接把闹钟人

17:51.560 --> 17:53.560
拿到垃圾桶里去了

17:53.560 --> 17:55.560
它就不会去做这个事了

17:55.560 --> 17:56.560
因此这些在等多久

17:56.560 --> 17:58.560
它就等不得123了

17:58.560 --> 17:59.560
懂了意思吧

17:59.560 --> 18:02.560
这就是清除计时器

18:02.560 --> 18:03.560
就这么个意思

18:03.560 --> 18:04.560
所以有的时候

18:04.560 --> 18:05.560
我们写这个代码

18:05.560 --> 18:06.560
有可能会这样子写

18:06.560 --> 18:08.560
就是如果说这个计时器

18:08.560 --> 18:10.560
有可能会被清除的话

18:10.560 --> 18:11.560
那么我们往往会这样子写

18:11.560 --> 18:13.560
Timeoutid

18:17.560 --> 18:19.560
然后这里写个函数

18:19.560 --> 18:21.560
这里函数做啥做啥

18:21.560 --> 18:22.560
然后后边写个时间

18:22.560 --> 18:24.560
多少时间过后

18:24.560 --> 18:25.560
你要去做啥

18:25.560 --> 18:26.560
然后中途我发现

18:26.560 --> 18:27.560
有一些情况

18:27.560 --> 18:28.560
我不希望有这个计时器了

18:28.560 --> 18:30.560
那我就把Timeoutid

18:30.560 --> 18:32.560
给它清除掉

18:32.560 --> 18:34.560
往往会这样去写代

18:34.560 --> 18:35.560
懂了意思吧

18:35.560 --> 18:36.560
好

18:36.560 --> 18:37.560
暂停视频

18:37.560 --> 18:38.560
把这个Timeoutid

18:38.560 --> 18:39.560
就在瀏覽器

18:39.560 --> 18:40.560
就在瀏覽器窗口里面

18:40.560 --> 18:41.560
给它练一下

18:41.560 --> 18:42.560
好吧

18:43.560 --> 18:45.560
好 接下来我们看下一个

18:46.560 --> 18:47.560
这Timeoutid

18:47.560 --> 18:50.560
它是时间到达之后运行函数

18:50.560 --> 18:53.560
那如果说我要不断的运行函数

18:53.560 --> 18:55.560
就是需要使用set interval

18:55.560 --> 18:57.560
这是设置一个计时器

18:57.560 --> 18:59.560
每隔一段时间

18:59.560 --> 19:01.560
自动的执行某一个函数

19:03.560 --> 19:04.560
用法跟它是一样的

19:04.560 --> 19:05.560
完全一样

19:05.560 --> 19:06.560
包括一会儿清除

19:06.560 --> 19:08.560
也是完全一样的

19:08.560 --> 19:09.560
函数的名字变了一下

19:09.560 --> 19:11.560
完全一样的

19:11.560 --> 19:13.560
那么我们

19:13.560 --> 19:14.560
所以说我们这里的

19:14.560 --> 19:16.560
只是含义上有区别

19:16.560 --> 19:18.560
一个是只运行一次函数

19:18.560 --> 19:19.560
这个只运行一次

19:19.560 --> 19:21.560
这个是不断运行

19:21.560 --> 19:22.560
好 咱们来看一下

19:22.560 --> 19:24.560
我们把这个玩意

19:24.560 --> 19:25.560
给它写一个

19:25.560 --> 19:26.560
换一个写法

19:28.560 --> 19:29.560
一秒钟

19:29.560 --> 19:31.560
一秒钟的这个函数里边

19:31.560 --> 19:34.560
我们输出一个

19:34.560 --> 19:35.560
输出一个咋

19:35.560 --> 19:36.560
输出一个1吧

19:37.560 --> 19:38.560
好 回头

19:38.560 --> 19:39.560
它告诉你这个id是

19:39.560 --> 19:42.560
这个计时器的id是3847

19:42.560 --> 19:44.560
我写成它冒测

19:44.560 --> 19:49.670
应该是set interval

19:49.670 --> 19:51.670
好 3952 1

19:51.670 --> 19:52.670
你看又是不是运行1

19:52.670 --> 19:54.670
不断的在执行这个函数

19:54.670 --> 19:55.670
不断的执行

19:55.670 --> 19:56.670
一秒钟执行一次

19:56.670 --> 19:57.670
一秒钟执行一次

19:57.670 --> 19:58.670
就这么意思

19:58.670 --> 19:59.670
那么这个id

19:59.670 --> 20:00.670
如果说你东主不想它

20:00.670 --> 20:01.670
继续执行

20:01.670 --> 20:04.670
那就用clear interval

20:04.670 --> 20:05.670
3952

20:05.670 --> 20:06.670
当然我们最好了

20:06.670 --> 20:08.670
是把它保存到一个变量里边

20:08.670 --> 20:10.670
把变量传进来

20:10.670 --> 20:12.670
所以就不再运行了

20:12.670 --> 20:13.670
对吧

20:13.670 --> 20:15.670
我们来做一个小地址

20:15.670 --> 20:16.670
我们在这里

20:16.670 --> 20:18.670
可以输出当前时间

20:19.670 --> 20:20.670
当前日期

20:20.670 --> 20:21.670
把它转换成字幕串

20:21.670 --> 20:26.670
to local stream

20:26.670 --> 20:27.670
每隔一秒钟

20:35.860 --> 20:36.860
我再看一下

20:42.860 --> 20:45.680
好 来吧

20:45.680 --> 20:47.680
把这句话替换成

20:48.680 --> 20:50.680
每隔一秒钟

20:50.680 --> 20:51.680
输出一个

20:53.680 --> 20:55.680
是不断的输出时间了

20:55.680 --> 20:57.680
每隔一秒钟输出一下

20:57.680 --> 20:58.680
其实我们这里

20:58.680 --> 21:00.680
还可以这样子来弄

21:00.680 --> 21:01.680
我先把它清除掉

21:01.680 --> 21:04.680
clear interval

21:05.680 --> 21:06.680
多少

21:09.680 --> 21:10.680
停止

21:10.680 --> 21:12.680
好 接下来我们再来玩一个

21:12.680 --> 21:14.680
我看在流量系控制台里边

21:14.680 --> 21:16.680
能不能清空控制台

21:16.680 --> 21:17.680
clear

21:17.680 --> 21:18.680
这个玩意是

21:18.680 --> 21:20.680
希望把控制台清空

21:20.680 --> 21:21.680
什么意思呢

21:21.680 --> 21:22.680
比方说控制台有些东西

21:22.680 --> 21:23.680
然后我们这里

21:23.680 --> 21:26.680
调用console clear

21:26.680 --> 21:28.680
你看 控制台被清空了

21:28.680 --> 21:30.680
这个玩意也起到什么作用

21:30.680 --> 21:32.680
就是调色的时候方便一点

21:32.680 --> 21:34.680
接下来我们每隔一秒钟

21:34.680 --> 21:36.680
先把控制台清空

21:36.680 --> 21:38.680
然后再输出时间

21:39.680 --> 21:42.680
把这个计时器放到time ID里边

21:43.680 --> 21:44.680
好 回上

21:44.680 --> 21:47.250
你看

21:47.250 --> 21:48.250
是不是感觉是一个时钟

21:48.250 --> 21:50.250
这样的不断的计时

21:50.250 --> 21:53.250
对吧 就是一个set interval

21:53.250 --> 21:54.250
如果说你要哪天

21:54.250 --> 21:55.250
不希望它继续了

21:55.250 --> 21:57.250
那就clear interval

22:00.250 --> 22:04.840
time ID

22:04.840 --> 22:05.840
好 这里呢

22:05.840 --> 22:06.840
同学们

22:06.840 --> 22:07.840
我给大家演示一个

22:07.840 --> 22:10.840
比较重要的一个例子

22:10.840 --> 22:13.840
这节课没有专门的作业题

22:13.840 --> 22:15.840
就是我在讲的过程中

22:15.840 --> 22:16.840
我觉得哪一部分比较重要

22:16.840 --> 22:19.840
我很让你暂停视频 马上练

22:19.840 --> 22:21.840
有一个比较重要的

22:21.840 --> 22:24.840
就是代码结构

22:24.840 --> 22:25.840
比方说我们就以刚才的

22:25.840 --> 22:27.840
一个例子为例

22:27.840 --> 22:30.840
就是我要去不断的输出时间

22:30.840 --> 22:31.840
这个例子

22:31.840 --> 22:34.840
好 那么在这个例子里边

22:34.840 --> 22:36.840
我要做这么一个功能

22:36.840 --> 22:38.840
一个是启动计时器

22:38.840 --> 22:39.840
不断的输出时间

22:39.840 --> 22:41.840
一个是暂停

22:41.840 --> 22:43.840
一个就是一个启动 一个暂停

22:43.840 --> 22:45.840
那么我们通常会写

22:45.840 --> 22:47.840
这么两个函数

22:47.840 --> 22:49.840
start

22:49.840 --> 22:51.840
开始

22:51.840 --> 22:53.840
不过是继续

22:53.840 --> 22:55.840
那么继续的时候做什么呢

22:55.840 --> 22:57.840
set interval

22:57.840 --> 22:59.840
set interval

22:59.840 --> 23:00.840
每隔一段时间比较多

23:00.840 --> 23:01.840
每隔一秒钟

23:01.840 --> 23:02.840
就刚才的一个例子

23:02.840 --> 23:04.840
然后我这里输出

23:04.840 --> 23:07.840
输出一个new date

23:07.840 --> 23:10.840
to local stream

23:10.840 --> 23:14.730
然后再清空控制台

23:14.730 --> 23:16.730
可以

23:16.730 --> 23:18.730
每隔一秒钟

23:18.730 --> 23:20.730
是不是就要打印一个日期

23:20.730 --> 23:22.730
跟刚才一样的

23:22.730 --> 23:23.730
我只要一调这个函数

23:23.730 --> 23:26.730
是不是就不断的计时了

23:26.730 --> 23:27.730
你看

23:27.730 --> 23:29.730
每隔一秒钟掉了一次

23:29.730 --> 23:32.730
因为这个code runner

23:32.730 --> 23:33.730
它是没法清空的

23:33.730 --> 23:35.730
输出的控制台是没法清空的

23:35.730 --> 23:37.730
我可以点击右键

23:37.730 --> 23:38.730
stop

23:38.730 --> 23:40.730
所以停止

23:40.730 --> 23:42.730
那么如果说你要在loader环境里边

23:42.730 --> 23:44.730
我们不说loader环境

23:44.730 --> 23:46.730
就说浏览器环境

23:46.730 --> 23:50.880
现在我们进入到浏览器

23:50.880 --> 23:52.880
就说浏览器环境

23:52.880 --> 23:54.880
一点解释

23:54.880 --> 23:56.880
那么我们写了一个函数

23:56.880 --> 23:57.880
这个函数

23:57.880 --> 23:58.880
我们一调这个函数

23:58.880 --> 23:59.880
一调这个start

23:59.880 --> 24:00.880
是不是就

24:00.880 --> 24:02.880
马上开始计时了

24:02.880 --> 24:03.880
来再看一下

24:03.880 --> 24:05.880
在浏览器环境里面看一下

24:05.880 --> 24:10.790
每隔一秒钟

24:10.790 --> 24:11.790
现在没调

24:11.790 --> 24:13.790
来调用一下

24:13.790 --> 24:17.420
就开始了

24:17.420 --> 24:19.420
我们就封装了这么一个函数

24:19.420 --> 24:20.420
好

24:20.420 --> 24:21.420
我们还需要提供一个函数

24:21.420 --> 24:23.420
就是停止

24:23.420 --> 24:25.420
停止

24:25.420 --> 24:27.420
那么停止怎么写呢

24:27.420 --> 24:29.420
是不是要把那个计时器清空

24:29.420 --> 24:30.420
那问题是我这里

24:30.420 --> 24:32.420
要clear interval

24:32.420 --> 24:34.420
id 传承的

24:34.420 --> 24:35.420
计时器是id传承的

24:35.420 --> 24:37.420
也说那这里我定一个边量

24:37.420 --> 24:38.420
他们id

24:38.420 --> 24:40.420
那这里是不是可以传他们id

24:40.420 --> 24:41.420
这样行吗

24:41.420 --> 24:42.420
同学

24:42.420 --> 24:43.420
学到现在了

24:43.420 --> 24:44.420
这样子行吗

24:44.420 --> 24:45.420
说不行

24:45.420 --> 24:46.420
为什么

24:46.420 --> 24:47.420
作用域都不一样

24:47.420 --> 24:48.420
这个作用域在什么

24:48.420 --> 24:49.420
在这个函数里面

24:49.420 --> 24:50.420
跟它有什么关系

24:50.420 --> 24:52.420
所以我们一般会怎么做呢

24:52.420 --> 24:53.420
我们一般会这样做

24:53.420 --> 24:54.420
把这个time id

24:54.420 --> 24:55.420
写外一边

24:55.420 --> 24:57.420
提升它的作用域

24:57.420 --> 24:59.420
写外一边

24:59.420 --> 25:00.420
这样子

25:00.420 --> 25:01.420
我们在这里边

25:01.420 --> 25:03.420
就给外一边的复制

25:03.420 --> 25:04.420
那我停止的时候

25:04.420 --> 25:05.420
是不是可以停止外边了

25:05.420 --> 25:06.420
这样就可以

25:06.420 --> 25:07.420
没问题了

25:07.420 --> 25:09.420
好 咱们再看

25:09.420 --> 25:10.420
start

25:10.420 --> 25:12.420
开始

25:12.420 --> 25:14.420
如果说我不想

25:14.420 --> 25:15.420
停止

25:15.420 --> 25:18.760
是不是停止了

25:18.760 --> 25:20.760
好 我又开始

25:20.760 --> 25:24.900
是不是又开始计时了

25:24.900 --> 25:25.900
然后又停止

25:25.900 --> 25:26.900
stop

25:26.900 --> 25:30.470
没问题吧

25:30.470 --> 25:31.470
好 我们再继续看

25:31.470 --> 25:33.470
这个程序还是有一些缺陷的

25:33.470 --> 25:34.470
什么缺陷呢

25:34.470 --> 25:35.470
就是如果说

25:35.470 --> 25:37.470
因为我们以后在程序里面

25:37.470 --> 25:38.470
可能会不断的

25:38.470 --> 25:39.470
雕用这个函数

25:39.470 --> 25:40.470
那你如果说

25:40.470 --> 25:41.470
我一不小心

25:41.470 --> 25:43.470
或者是因为种种原因吧

25:43.470 --> 25:44.470
我也搞不清楚什么原因

25:44.470 --> 25:46.470
反正就是雕这个函数

25:46.470 --> 25:48.470
如果说我雕用了两次

25:48.470 --> 25:49.470
会怎么样

25:50.470 --> 25:51.470
我雕用了三次

25:51.470 --> 25:53.470
我雕用了四次会怎么样

25:53.470 --> 25:54.470
我雕用了五次

25:54.470 --> 25:55.470
我雕用了六次会怎么样

25:55.470 --> 25:57.470
你看那个闪得多厉害

25:57.470 --> 25:59.470
这个时候是什么情况了

25:59.470 --> 26:01.470
每雕用一次

26:01.470 --> 26:03.470
是不是开一个新的计时期

26:03.470 --> 26:06.470
每雕用一次都会开一个新的计时期

26:06.470 --> 26:08.470
那么也就这个他们ID保存的

26:08.470 --> 26:10.470
永远是最后一个计时期的ID

26:10.470 --> 26:12.470
不断的覆盖嘛

26:12.470 --> 26:15.470
而我们在写代码的时候

26:15.470 --> 26:17.470
特别像这些计时期的程序的时候

26:17.470 --> 26:20.470
往往的需求是什么呢

26:20.470 --> 26:22.470
就是我最多只能开一个

26:22.470 --> 26:24.470
你不能给我重复的开

26:24.470 --> 26:26.470
那这个东西又怎么处理呢

26:26.470 --> 26:28.470
我们往往会这样子写

26:29.470 --> 26:30.470
我判断一下

26:30.470 --> 26:33.470
你这个摊板ID有没有值

26:33.470 --> 26:35.470
如果说有值的话

26:36.470 --> 26:37.470
说明啥

26:37.470 --> 26:41.470
说明当前已经有计时期了

26:42.470 --> 26:43.470
所以已经有了

26:43.470 --> 26:45.470
我就return结束

26:45.470 --> 26:48.470
就不再去重新开计时期了

26:48.470 --> 26:50.470
只有当前没有计时期

26:50.470 --> 26:51.470
比方一开始

26:51.470 --> 26:52.470
一开始它是undefend对吧

26:52.470 --> 26:54.470
它一开始没有计时期的时候

26:54.470 --> 26:56.470
那么这个判断进不去

26:56.470 --> 26:58.470
它才会去开这个计时期

26:58.470 --> 27:00.470
那开了之后它是不是有值的

27:00.470 --> 27:02.470
有值下一次再调用start的时候

27:02.470 --> 27:05.470
它是不是就不再进入后边的代码

27:05.470 --> 27:07.470
就进入这种判断了

27:07.470 --> 27:08.470
这代码一定要会写

27:08.470 --> 27:10.470
一个代码很重要的

27:10.470 --> 27:11.470
以后我们写计时期

27:11.470 --> 27:13.470
包含的是这种代码

27:13.470 --> 27:16.470
比方这里调用start

27:16.470 --> 27:17.470
开始

27:17.470 --> 27:18.470
没问题对吧

27:18.470 --> 27:20.470
然后我们再开始

27:20.470 --> 27:22.470
还是没问题

27:22.470 --> 27:23.470
其实你在这里

27:23.470 --> 27:26.470
我们打印一下就知道了

27:26.470 --> 27:29.470
新开计时期

27:29.470 --> 27:32.470
我们开始新开计时期

27:32.470 --> 27:34.470
然后再调用start

27:34.470 --> 27:36.470
是不是没有新开计时期了

27:36.470 --> 27:38.470
如果说你没有这个计判断

27:38.470 --> 27:39.470
那你肯定想象得到

27:39.470 --> 27:41.470
每一时当中它都新开计时期

27:42.470 --> 27:43.470
每一时当中新开计时期

27:43.470 --> 27:45.470
那个计时期开了很多很多

27:45.470 --> 27:47.470
所以一定要加上这个判断

27:47.470 --> 27:49.470
就把它封断成函数之后

27:49.470 --> 27:51.470
好 那另外一个停止

27:51.470 --> 27:54.470
停止的时候我除了把这个计时期

27:54.470 --> 27:56.470
就是它计时期里面不是一个ID吗

27:56.470 --> 27:58.470
我用这个ID来清空这个计时期

27:58.470 --> 28:00.470
清空之后不要忘记

28:00.470 --> 28:03.470
把它ID设为NOW

28:03.470 --> 28:05.470
或者是设为OND犯都行

28:05.470 --> 28:07.470
为什么要去设置这句话呢

28:07.470 --> 28:09.470
如果说你不设置这句话

28:10.470 --> 28:12.470
我们开始计时

28:12.470 --> 28:15.470
开始了一秒钟一次

28:15.470 --> 28:17.470
好 接下来我们停止

28:17.470 --> 28:19.470
停了 对吧

28:19.470 --> 28:21.470
有没有停 停了

28:21.470 --> 28:22.470
但是停了之后

28:22.470 --> 28:24.470
这个TimerID还是有值的

28:24.470 --> 28:26.470
这个TimerID还是记录了

28:26.470 --> 28:29.470
当之前那个计时期的ID

28:29.470 --> 28:30.470
还是有值的

28:30.470 --> 28:32.470
你只是把计时期

28:32.470 --> 28:33.470
把个NOW中扔了 对吧

28:33.470 --> 28:35.470
那个NOW中的名字

28:35.470 --> 28:38.470
NOW中的就是ID编号还在

28:39.470 --> 28:41.470
因此它编号还在

28:41.470 --> 28:42.470
会有一个什么样的结果呢

28:42.470 --> 28:43.470
你启动不了了

28:43.470 --> 28:46.470
在你这个代码里面就启动不了了

28:46.470 --> 28:47.470
为什么启动不了了

28:47.470 --> 28:48.470
因为你启动的时候

28:48.470 --> 28:49.470
它发现这个有值

28:49.470 --> 28:51.470
它就进入判断了

28:51.470 --> 28:54.470
因此你这里需要把它设置为NOW

28:54.470 --> 28:56.470
我现在讲的很细

28:56.470 --> 28:59.470
将这个代码就跟条件反摄一样

28:59.470 --> 29:00.470
就写出来

29:00.470 --> 29:01.470
因为这个代码要写多了

29:01.470 --> 29:03.470
写多了过就写麻了

29:03.470 --> 29:05.470
经常都要这样子写

29:05.470 --> 29:06.470
那么至于以后

29:06.470 --> 29:08.470
计时期每隔一秒钟

29:08.470 --> 29:09.470
还是每隔10毫秒

29:09.470 --> 29:11.470
还是每隔100毫秒

29:11.470 --> 29:12.470
那可能会有变化

29:12.470 --> 29:14.470
然后每隔一段时间过后

29:14.470 --> 29:15.470
会做什么有变化

29:15.470 --> 29:18.470
但是这个结构基本上都是结构

29:18.470 --> 29:20.470
开启一个计时期

29:20.470 --> 29:21.470
看一下之前有没有计时

29:21.470 --> 29:22.470
有计时就结束

29:22.470 --> 29:23.470
没有计时的话

29:23.470 --> 29:24.470
我就开始计时

29:24.470 --> 29:26.470
每隔多少时间去做一件事

29:26.470 --> 29:27.470
停止的时候

29:27.470 --> 29:30.470
就是TimerID

29:30.470 --> 29:32.470
先把计时期清空

29:32.470 --> 29:34.470
然后把TimerID设为NOW

29:34.470 --> 29:36.470
基本上都是这种写法

29:37.470 --> 29:39.470
这是关于这个

29:39.470 --> 29:40.470
当然其实我们这里

29:40.470 --> 29:42.470
其实还可以进一步封装

29:42.470 --> 29:43.470
成其他的结构

29:43.470 --> 29:45.470
然后我们不抽烟了

29:45.470 --> 29:46.470
这个结构一定要会写

29:46.470 --> 29:47.470
现在暂停视频

29:47.470 --> 29:49.470
你们马上写一下这个结构

29:49.470 --> 29:53.970
在浏览器控制台里面测试一下

29:53.970 --> 29:54.970
那么既然其实

29:54.970 --> 29:55.970
我们这几颗最核心的

29:55.970 --> 29:57.970
就是这四个东西

29:57.970 --> 29:58.970
就没了

29:58.970 --> 29:59.970
那剩下的

29:59.970 --> 30:00.970
我们看一看吧

30:00.970 --> 30:01.970
抽一抽吧

30:01.970 --> 30:02.970
既然它都弄出来

30:02.970 --> 30:03.970
都写到文档里边

30:03.970 --> 30:04.970
抽一眼吧

30:04.970 --> 30:06.970
有一定的印象就可以了

30:07.970 --> 30:10.970
这个是什么玩意

30:10.970 --> 30:12.970
我一运行你知道什么玩意了

30:12.970 --> 30:14.970
就这么一个玩意

30:14.970 --> 30:15.970
弹出一个提示

30:15.970 --> 30:16.970
这个玩意用不用了

30:16.970 --> 30:17.970
不用

30:17.970 --> 30:18.970
因为这种提示

30:18.970 --> 30:20.970
框框每个浏览器

30:20.970 --> 30:21.970
你不信你们那边弹一下

30:21.970 --> 30:23.970
跟我这边有可能不太一样

30:23.970 --> 30:24.970
不同的浏览器

30:24.970 --> 30:25.970
不同的操作系统

30:25.970 --> 30:26.970
可能都有差异

30:26.970 --> 30:27.970
所以说

30:27.970 --> 30:29.970
这个玩意基本不用

30:29.970 --> 30:30.970
了解就行了

30:30.970 --> 30:32.970
还有一个就是Confer

30:32.970 --> 30:35.970
Confer也不用

30:35.970 --> 30:36.970
这个玩意是啥了

30:36.970 --> 30:37.970
这个玩意是确认框

30:37.970 --> 30:39.970
包含取消和确定的

30:39.970 --> 30:42.970
你点确定的它就返回处

30:42.970 --> 30:44.970
你点取消了就返回Force

30:45.970 --> 30:47.970
这两个函数有一个特点

30:47.970 --> 30:50.970
他们是为数不多的

30:50.970 --> 30:52.970
会被卡住的函数

30:52.970 --> 30:53.970
Confer你看

30:53.970 --> 30:55.970
是不是个返回值没出来

30:55.970 --> 30:56.970
函数没运行完

30:56.970 --> 30:57.970
它会被卡住了

30:57.970 --> 30:58.970
点上确定过后

30:58.970 --> 30:59.970
函数才结束

30:59.970 --> 31:00.970
再返回处

31:00.970 --> 31:02.970
这两个函数基本不用

31:03.970 --> 31:04.970
好

31:04.970 --> 31:05.970
下边

31:05.970 --> 31:06.970
Location

31:06.970 --> 31:07.970
Windows里边有一个对象

31:07.970 --> 31:09.970
一个属性叫Location

31:09.970 --> 31:10.970
那么这个对象里边

31:10.970 --> 31:11.970
这是个对象

31:11.970 --> 31:12.970
对象里边有包含很多属性

31:12.970 --> 31:13.970
你看一下

31:14.970 --> 31:15.970
Location

31:17.970 --> 31:18.970
Location

31:18.970 --> 31:20.970
它是个对象

31:20.970 --> 31:23.970
那这个对象是做什么用的呢

31:23.970 --> 31:24.970
它是提供跟地址

31:24.970 --> 31:26.970
蓝相关的操作

31:26.970 --> 31:29.970
提供跟这里上相关的操作

31:29.970 --> 31:30.970
这个对象里边

31:30.970 --> 31:32.970
我们用的比较多的就是

31:32.970 --> 31:33.970
Rave

31:34.970 --> 31:35.970
这个玩意是啥呢

31:35.970 --> 31:36.970
来看一下吧

31:36.970 --> 31:37.970
Location

31:37.970 --> 31:38.970
Rave

31:38.970 --> 31:39.970
它的道理就是

31:39.970 --> 31:40.970
目前这个地址

31:40.970 --> 31:41.970
蓝的完整地址

31:41.970 --> 31:43.970
它就这么一个东西

31:43.970 --> 31:44.970
这个玩意是可以

31:44.970 --> 31:46.970
这些东西都可以重新复制的

31:46.970 --> 31:47.970
这些属性都可以重新复制

31:47.970 --> 31:49.970
比方我现在要给它复制

31:49.970 --> 31:50.970
复制为

31:52.970 --> 31:54.970
A D P S

31:54.970 --> 31:55.970
W 点

31:55.970 --> 31:56.970
百度

31:56.970 --> 31:57.970
点抗

31:58.970 --> 31:59.970
它就挑转页面了

31:59.970 --> 32:00.970
所以我们将来

32:00.970 --> 32:01.970
如果说要在GMS里面

32:01.970 --> 32:02.970
挑转页面

32:02.970 --> 32:03.970
通常都是使用这种方式

32:03.970 --> 32:04.970
来挑转页面

32:05.970 --> 32:07.970
这Location的Rave复制

32:07.970 --> 32:09.970
但它只能在本窗口打开

32:09.970 --> 32:10.970
如果说你要在

32:10.970 --> 32:11.970
其他窗口打开的话

32:11.970 --> 32:12.970
那你还是得用Open

32:14.970 --> 32:16.970
OK 这是关于Rave

32:16.970 --> 32:17.970
然后它里面

32:17.970 --> 32:19.970
其实Location里面

32:19.970 --> 32:20.970
还有一些东西

32:20.970 --> 32:21.970
把它打开

32:21.970 --> 32:22.970
我们来看一下吧

32:22.970 --> 32:23.970
大概瞅一瞅

32:24.970 --> 32:26.970
这个Local House

32:26.970 --> 32:28.970
就是这一部分

32:29.970 --> 32:31.970
关于Url地址

32:31.970 --> 32:32.970
是什么东西呢

32:32.970 --> 32:34.970
将来你们学网络的时候

32:34.970 --> 32:35.970
还会详细学习

32:35.970 --> 32:37.970
现在只需要有那么一丁点的印象就行了

32:37.970 --> 32:39.970
不要去使用硬碑

32:39.970 --> 32:41.970
更加不要去深究

32:41.970 --> 32:43.970
因为这些跟网络相关

32:43.970 --> 32:44.970
有关系

32:44.970 --> 32:45.970
House Name

32:46.970 --> 32:48.970
是这个东西

32:49.970 --> 32:52.970
然后Path Name

32:52.970 --> 32:54.970
是后边从鞋杠

32:54.970 --> 32:55.970
后边这一坨

32:56.970 --> 32:59.970
然后Port是这个东西

32:59.970 --> 33:03.970
Protocol是这个玩意儿

33:04.970 --> 33:06.970
然后还有什么

33:07.970 --> 33:09.970
还有设计

33:09.970 --> 33:10.970
设计我这里没有

33:10.970 --> 33:11.970
有的时候

33:11.970 --> 33:12.970
你的地址栏里面

33:12.970 --> 33:13.970
可能是这样子写的

33:13.970 --> 33:15.970
比方说看百度吧

33:15.970 --> 33:16.970
百度我们收一下ATM

33:17.970 --> 33:19.970
你看这里是个问号

33:19.970 --> 33:20.970
问号后边有一坨

33:20.970 --> 33:23.970
那么我们来看一下Location

33:23.970 --> 33:24.970
Location里边

33:24.970 --> 33:25.970
你看12起

33:25.970 --> 33:27.970
是不是就是问号后边的一坨

33:27.970 --> 33:28.970
从这里开始

33:28.970 --> 33:30.970
这些东西是啥

33:30.970 --> 33:32.970
你们学了网络就知道了

33:32.970 --> 33:35.970
然后还有一个Hash

33:35.970 --> 33:36.970
还有一个Hash

33:36.970 --> 33:38.970
Hash的话是这样子的

33:38.970 --> 33:40.970
比方说你后边有个警号

33:40.970 --> 33:41.970
ABC

33:41.970 --> 33:42.970
那么这个就是

33:42.970 --> 33:43.970
警号后边就是Hash

33:43.970 --> 33:45.970
我们也把它叫做

33:45.970 --> 33:46.970
毛链接

33:47.970 --> 33:48.970
OK就完了

33:48.970 --> 33:50.970
了解一下就行了

33:50.970 --> 33:52.970
然后它里边其实还有一个方法

33:52.970 --> 33:53.970
叫Renoad

33:53.970 --> 33:54.970
有的时候有点用

33:54.970 --> 33:56.970
它是可以刷新页面的

33:56.970 --> 33:58.970
强制刷新当前页面

33:58.970 --> 33:59.970
比方说我们这里

33:59.970 --> 34:00.970
在百度里边

34:00.970 --> 34:01.970
调个Location

34:01.970 --> 34:02.970
Renoad

34:05.970 --> 34:06.970
一回头

34:06.970 --> 34:07.970
你看是不是刷新页面了

34:08.970 --> 34:09.970
就这么起这么一个作用

34:09.970 --> 34:10.970
刷新当前页面

34:11.970 --> 34:12.970
好这种Location

34:12.970 --> 34:14.970
了解一下跟地址栏是相关的

34:14.970 --> 34:15.970
另外一个叫History

34:15.970 --> 34:17.970
它是跟历史记录相关的

34:17.970 --> 34:18.970
但是它的历史记录

34:18.970 --> 34:20.970
不是浏览器的历史记录

34:21.970 --> 34:22.970
你不要想多了

34:22.970 --> 34:23.970
你介绍是不可能

34:23.970 --> 34:25.970
获取到浏览器的历史记录的

34:26.970 --> 34:29.970
它只是提供当前窗口

34:29.970 --> 34:30.970
就是你这个窗口

34:30.970 --> 34:32.970
目前访问了哪些页面

34:32.970 --> 34:34.970
这个窗口是什么时候开始

34:34.970 --> 34:35.970
你打开一个新标签页

34:35.970 --> 34:37.970
这个时候窗口开始

34:37.970 --> 34:39.970
你一开始访问的是百度

34:39.970 --> 34:40.970
对吧

34:40.970 --> 34:42.970
然后再访问这个百度图片

34:43.970 --> 34:44.970
不是

34:44.970 --> 34:45.970
挑页面了

34:45.970 --> 34:47.970
然后我们再搜索吧

34:49.970 --> 34:50.970
是不是有搜索

34:50.970 --> 34:51.970
那又是一个页面

34:51.970 --> 34:52.970
然后再搜索

34:54.970 --> 34:55.970
又是一个页面

34:55.970 --> 34:56.970
然后再搜索

34:56.970 --> 34:57.970
又是一个页面

34:57.970 --> 34:58.970
对吧

34:58.970 --> 34:59.970
然后我们可以点后退

34:59.970 --> 35:01.970
可以退到之前的页面

35:01.970 --> 35:02.970
它只是这个窗口

35:02.970 --> 35:05.970
而且它都不让你获取

35:05.970 --> 35:06.970
这个窗口的历史记录

35:06.970 --> 35:08.970
它只让你能够操作

35:08.970 --> 35:10.970
历史记录是属于用户隐私

35:10.970 --> 35:12.970
你休想用记也是获取

35:12.970 --> 35:13.970
不可能的

35:13.970 --> 35:15.970
你除非去写一些浏览器插件

35:15.970 --> 35:16.970
或者是病毒之类的

35:17.970 --> 35:20.970
那么历史记录有哪些操作可以玩呢

35:20.970 --> 35:21.970
我们先看三个

35:21.970 --> 35:23.970
back forward go

35:24.970 --> 35:26.970
这个玩意很少用完的

35:26.970 --> 35:27.970
很少很少用

35:27.970 --> 35:29.970
但有的时候会有一点用

35:29.970 --> 35:30.970
用户做了一个操作

35:30.970 --> 35:31.970
你返回之前

35:31.970 --> 35:32.970
你就给它返回之前的页面

35:32.970 --> 35:34.970
然后页面上有一个按钮

35:34.970 --> 35:35.970
返回点一下

35:35.970 --> 35:36.970
你就返回之前的页面

35:36.970 --> 35:37.970
就需要用到这个

35:37.970 --> 35:39.970
history back

35:39.970 --> 35:40.970
后退

35:40.970 --> 35:41.970
注意看这儿

35:41.970 --> 35:43.970
就相对一点了一下这样

35:44.970 --> 35:45.970
一看不就后退了吗

35:45.970 --> 35:46.970
是吧

35:46.970 --> 35:49.970
然后history forward go

35:50.970 --> 35:51.970
前进

35:51.970 --> 35:53.970
就相当于是点了一下照

35:53.970 --> 35:54.970
就这么简单

35:55.970 --> 35:56.970
不就前进了吗

35:56.970 --> 35:59.970
还有history go

35:59.970 --> 36:00.970
-1

36:00.970 --> 36:02.970
等同于history back

36:02.970 --> 36:03.970
等同于后退

36:04.970 --> 36:05.970
0

36:05.970 --> 36:06.970
那就不动呗

36:06.970 --> 36:07.970
-1

36:07.970 --> 36:08.970
后退一步

36:08.970 --> 36:09.970
-2

36:09.970 --> 36:10.970
后退两步

36:11.970 --> 36:12.970
就这么简单

36:12.970 --> 36:13.970
然后呢

36:14.970 --> 36:15.970
go

36:15.970 --> 36:16.970
正一

36:16.970 --> 36:17.970
前进一步

36:17.970 --> 36:18.970
正二

36:18.970 --> 36:19.970
正一进两步

36:19.970 --> 36:20.970
当然如果说没有那么多步的话

36:20.970 --> 36:22.970
它就前进到最终就行了

36:23.970 --> 36:25.970
就这三个玩意儿

36:26.970 --> 36:27.970
其实历史记录

36:27.970 --> 36:29.970
就是在瀏覽器窗口的历史记录

36:29.970 --> 36:30.970
它是一个

36:30.970 --> 36:31.970
站

36:31.970 --> 36:33.970
一个站结构

36:34.970 --> 36:36.970
站结构是这么一种结构

36:36.970 --> 36:37.970
它底部

36:37.970 --> 36:38.970
书军的每一次

36:38.970 --> 36:39.970
站结构

36:39.970 --> 36:40.970
简单画一下吧

36:40.970 --> 36:42.970
后面大家还会接触

36:42.970 --> 36:43.970
是这么一个杯子

36:43.970 --> 36:45.970
有点像杯子一样

36:45.970 --> 36:46.970
然后呢

36:46.970 --> 36:48.970
在杯子里边放东西叫做入站

36:50.970 --> 36:51.970
再放一个东西就叫入站

36:51.970 --> 36:53.970
你会发现它有个特点

36:53.970 --> 36:55.970
后进来的在上面

36:55.970 --> 36:56.970
出的时候呢

36:56.970 --> 36:57.970
就是这样出去

36:57.970 --> 36:59.970
就这样出去

36:59.970 --> 37:00.970
叫做出站

37:01.970 --> 37:02.970
站结构

37:02.970 --> 37:03.970
写一下

37:03.970 --> 37:07.440
站结构

37:08.440 --> 37:09.440
那么历史记录

37:09.440 --> 37:10.440
它其实就是一个站结构

37:10.440 --> 37:11.440
以后我们还会接触

37:11.440 --> 37:12.440
一些别的东西

37:12.440 --> 37:13.440
也是站结构

37:13.440 --> 37:14.440
好 我们来看一下

37:14.440 --> 37:16.440
它是怎么玩的呢

37:16.440 --> 37:17.440
它是个站结构

37:17.440 --> 37:18.440
一开始呢

37:18.440 --> 37:19.440
你访问第一个页面的时候

37:19.440 --> 37:21.440
它就把这个页面

37:21.440 --> 37:22.440
记录到这儿

37:22.440 --> 37:23.440
访问第二个页面的时候

37:23.440 --> 37:24.440
就记录到这儿

37:24.440 --> 37:25.440
访问第三个页面的时候

37:25.440 --> 37:26.440
就记录到这儿

37:26.440 --> 37:27.440
懂得意思吗

37:27.440 --> 37:28.440
就这么个意思

37:29.440 --> 37:30.440
那么目前呢

37:30.440 --> 37:31.440
你访问的

37:31.440 --> 37:32.440
当前页面是这个页面

37:33.440 --> 37:34.440
好 如果说你后退的话

37:34.440 --> 37:35.440
它就把当前页面

37:35.440 --> 37:36.440
往下移动

37:36.440 --> 37:37.440
再后退就往下移动

37:37.440 --> 37:38.440
对吧

37:38.440 --> 37:39.440
前进就往上移动

37:40.440 --> 37:41.440
就这么个意思

37:41.440 --> 37:42.440
这就是这么个站结构

37:44.440 --> 37:45.440
然后下边有两个函数

37:45.440 --> 37:46.440
一个叫pussy state

37:47.440 --> 37:48.440
这个是什么呢

37:48.440 --> 37:50.440
在历史记录中添加一条记录

37:50.440 --> 37:51.440
刚才不是说了一个

37:51.440 --> 37:52.440
站结构吗

37:52.440 --> 37:53.440
这个了解就行了

37:53.440 --> 37:54.440
我都懒得去演示了

37:54.440 --> 37:55.440
因为现在没用

37:55.440 --> 37:56.440
完全没用

37:56.440 --> 37:57.440
将来你们要去到

37:57.440 --> 37:58.440
后边框架的时候

37:58.440 --> 38:00.440
理解框架那一块的

38:00.440 --> 38:01.440
原理的时候

38:01.440 --> 38:02.440
这两个函数才有用

38:03.440 --> 38:05.440
那么现在pussy state

38:05.440 --> 38:06.440
什么意思呢

38:06.440 --> 38:07.440
就是给你

38:07.440 --> 38:09.440
不刷新浏览器

38:09.440 --> 38:11.440
直接往站里边加一条记录

38:12.440 --> 38:14.440
然后表示当前记录

38:15.440 --> 38:17.440
是不刷新浏览器的

38:18.440 --> 38:19.440
咱们试一下

38:19.440 --> 38:20.440
还是试一下吧

38:20.440 --> 38:22.440
比方说我们现在

38:23.440 --> 38:25.440
把这个地址改一下

38:25.440 --> 38:26.440
history

38:27.440 --> 38:28.440
pussy state

38:29.440 --> 38:30.440
第一个传统

38:30.440 --> 38:31.440
第一个不错

38:31.440 --> 38:32.440
第二个

38:33.440 --> 38:34.440
随便传个空置不错吧

38:34.440 --> 38:36.440
第三个是url地址

38:36.440 --> 38:37.440
那么我们现在

38:37.440 --> 38:39.440
把url地址改一下

38:39.440 --> 38:42.440
改成写杠abc

38:43.440 --> 38:44.440
页面有没有变化

38:44.440 --> 38:45.440
没有

38:45.440 --> 38:46.440
但是地址变化了

38:46.440 --> 38:47.440
它是不会变化

38:47.440 --> 38:48.440
它是不会改变

38:48.440 --> 38:49.440
整个页面的

38:49.440 --> 38:50.440
它不会刷新浏览器

38:50.440 --> 38:52.440
它只是改变地址

38:52.440 --> 38:53.440
这个玩意以后有用

38:53.440 --> 38:54.440
现在没什么用

38:55.440 --> 38:56.440
那么就相当于

38:56.440 --> 38:57.440
刚才那种结果

38:57.440 --> 38:58.440
加了一条abc加二招了

39:00.440 --> 39:01.440
那么现在也说

39:01.440 --> 39:02.440
我们现在后退

39:02.440 --> 39:03.440
就后退到

39:03.440 --> 39:04.440
之前的这个地址了

39:05.440 --> 39:06.440
前进老招了

39:07.440 --> 39:08.440
前进的时候

39:08.440 --> 39:09.440
它会导致刷新

39:09.440 --> 39:11.440
然后还有一个叫replace state

39:11.440 --> 39:12.440
这个玩意是什么呢

39:12.440 --> 39:13.440
这个玩意呢

39:13.440 --> 39:15.440
刚才我们是往里边加一条

39:15.440 --> 39:17.440
这个玩意要替换一条

39:17.440 --> 39:20.440
就是把这个东西改一下

39:20.440 --> 39:21.440
或者把它移除掉

39:21.440 --> 39:24.440
然后再重新换一层abc

39:24.440 --> 39:26.440
把这个改一下改成abc

39:26.440 --> 39:27.440
就这么个意思

39:27.440 --> 39:28.440
了解就行了

39:28.440 --> 39:29.440
这一块

39:29.440 --> 39:30.440
现在基本上

39:30.440 --> 39:32.440
跟你们没有任何关系

39:32.440 --> 39:33.440
将来会有一件关系

39:34.440 --> 39:35.440
好就没了

39:35.440 --> 39:36.440
这几刻我们就把

39:36.440 --> 39:37.440
波母介绍完了

39:37.440 --> 39:38.440
波母里边其实东西

39:38.440 --> 39:39.440
很多很多

39:39.440 --> 39:40.440
只剩下我们

39:40.440 --> 39:42.440
绝大部分目前都用不到

39:42.440 --> 39:43.440
我们平时用到了就这么几个

39:43.440 --> 39:44.440
几个

39:44.440 --> 39:45.440
就这个

39:45.440 --> 39:46.440
这个

39:46.440 --> 39:47.440
这个

39:47.440 --> 39:48.440
这个

39:48.440 --> 39:49.440
ok 里边我们会

39:49.440 --> 39:50.440
有的很少

39:50.440 --> 39:51.440
其实都很少了

39:51.440 --> 39:53.440
有的时候我们会用到ref

39:53.440 --> 39:55.440
有的时候我们会刷新页面

39:55.440 --> 39:56.440
其他就没了

39:56.440 --> 39:58.440
这一块没有特别的作业

39:58.440 --> 40:00.440
就是把这些

40:00.440 --> 40:01.440
就是我们客厂上

40:01.440 --> 40:03.440
让大家暂停视频的地方

40:03.440 --> 40:04.440
念好就可以了

40:04.440 --> 40:05.440
其他没了

