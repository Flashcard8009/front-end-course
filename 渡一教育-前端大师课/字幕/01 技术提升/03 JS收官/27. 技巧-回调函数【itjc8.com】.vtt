WEBVTT

00:00.370 --> 00:04.770
同学们 这节课的东西呢 首先是有一点难度的

00:04.770 --> 00:08.370
既也是这门语言 你能不能玩得很溜

00:08.370 --> 00:13.770
关键就在于 你能不能玩得懂回调函数

00:13.770 --> 00:18.170
回调函数呢 这个玩意儿你说平时开发用的多不多呢

00:18.170 --> 00:20.370
它不多 很少

00:21.370 --> 00:25.370
就但是呢 一旦用到了 应该这么说吧

00:25.370 --> 00:29.170
回调函数呢 你平时都在用 但是呢 你没有感觉有难度

00:29.170 --> 00:32.170
比方说你像是用什么set timeout

00:32.170 --> 00:35.170
对吧 这一玩意儿就是回调函数啊

00:35.170 --> 00:39.170
你给它把函数作为一个参数 传的进去

00:39.170 --> 00:43.170
这个函数什么时候调用啊 是在那个

00:44.170 --> 00:47.170
这个函数里边调用 是在这个set timeout

00:47.170 --> 00:49.170
这个set timeout是那个浏览器给你写的

00:49.170 --> 00:54.170
它在运行这个函数 即时期的期间 它来帮你调用的

00:54.170 --> 00:56.170
应该这么说

00:57.170 --> 01:01.170
那么也就是说啊 这个回调函数它不是立即调用的

01:01.170 --> 01:05.170
它可能会通过一些形式传递给另外一个函数

01:05.170 --> 01:07.170
这个是回调

01:07.170 --> 01:11.170
这个玩意儿平时我们其实经常都在用 但是呢

01:11.170 --> 01:17.170
我们自己不会去写这么一个函数 比方我自己写一个方形set timeout

01:17.170 --> 01:20.170
然后呢 这里第一个函数给我传一个函数

01:20.170 --> 01:22.170
第二个函数给我传一个时间

01:22.170 --> 01:25.170
这种函数呢 就是我们自己写的函数里边

01:25.170 --> 01:28.170
一般不会把函数当成函数

01:29.170 --> 01:32.170
所以说我们这几个研究的就是这一点

01:32.170 --> 01:35.170
在自己写的函数里边 其中一个函数

01:35.170 --> 01:39.170
我是希望别人给我传一个函数进来

01:39.170 --> 01:41.170
我们要玩这种情况

01:41.170 --> 01:44.170
这种方式你玩了6的话

01:44.170 --> 01:46.170
那么介绍这么语言

01:46.170 --> 01:50.170
你会产生非常 非常丰富的效果

01:50.170 --> 01:53.170
有的时候可以有奇效

01:53.170 --> 01:57.170
有的时候 你看我们之前还用 还得用这个东西

01:57.170 --> 01:59.170
ADD event listener

02:02.480 --> 02:05.480
当时点击的时候 我们说该传了一个函数进去

02:05.480 --> 02:07.480
对不对 说该传了一个函数

02:07.480 --> 02:10.480
而且这个函数呢 还有一个 还有一个函数

02:10.480 --> 02:13.480
也就是这个函数是我们调用的吗

02:13.480 --> 02:15.480
不是 是谁调用的

02:15.480 --> 02:18.480
是这个函数里边 它监听点击

02:18.480 --> 02:21.480
当点击的时候 它会自动的调用我们这个函数

02:21.480 --> 02:24.480
同时还会给我传一个函数进来

02:24.480 --> 02:27.480
看到没 还会给我们绑定Z史

02:27.480 --> 02:31.480
Z史指向谁 指向这个世界的注册动

02:31.480 --> 02:33.480
那么这里边的Z史指向谁

02:33.480 --> 02:36.480
这边的Z史呢 还会给我们绑定成全局对象

02:36.480 --> 02:40.480
Window 这些都是毁掉

02:40.480 --> 02:43.480
只不过我们平时 自己写的函数里边

02:43.480 --> 02:45.480
并没有去这样做而已

02:45.480 --> 02:48.480
能不能这样做啊 当然可以这样做

02:48.480 --> 02:51.480
那么我们这就可能通过讲这个练习题

02:51.480 --> 02:56.480
就告诉大家 毁掉函数 它的强大之处

02:56.480 --> 02:58.480
现在我们来看一下这个练习题

02:58.480 --> 03:01.480
这个练习题呢 同学们现在都应该能做得出来

03:01.480 --> 03:03.480
得到所有的女生 对吧

03:03.480 --> 03:05.480
我现在这几刻没有见面

03:05.480 --> 03:07.480
就是来做 研究这个小的东西

03:07.480 --> 03:09.480
好 这里有个数组

03:09.480 --> 03:13.480
这个数组里边呢 我们每个学生都是一个对象

03:13.480 --> 03:15.480
那我要得到女生还不简单吗

03:15.480 --> 03:18.480
是不是就看一个姓别 等于女就可以了

03:18.480 --> 03:20.480
因此呢 我这里里面以前怎么做的

03:20.480 --> 03:23.480
是不是来一个新数组

03:23.480 --> 03:25.480
对吧 一个新的数组

03:25.480 --> 03:27.480
或者 result

03:27.480 --> 03:30.480
然后循环原数组

03:30.480 --> 03:35.620
循环的是丢电池

03:35.620 --> 03:41.620
每一次循环判断一下条件是否满足

03:41.620 --> 03:45.620
满足条件 我就把当前这个学生对象

03:45.620 --> 03:49.620
加到 result 里面去

03:49.620 --> 03:51.620
是不是就做这么一件事

03:51.620 --> 03:52.620
然后最终呢

03:52.620 --> 03:55.620
这个 result 不就是我们想要的结果吗

03:55.620 --> 03:57.620
好 条件是否满足 什么叫条件

03:57.620 --> 04:00.620
什么条件 就是当前这个学生对象的

04:00.620 --> 04:05.620
性别是女生

04:05.620 --> 04:06.620
是完事了

04:06.620 --> 04:07.620
好 来运行一下

04:07.620 --> 04:09.620
是不是得到所有的女生了

04:09.620 --> 04:11.620
好 这个没问题吧

04:11.620 --> 04:14.620
然后现在来看下一题

04:14.620 --> 04:17.620
得到二十岁以下的女生

04:17.620 --> 04:19.620
你看整个程序是不是一样的

04:19.620 --> 04:21.620
就只有哪有区别

04:21.620 --> 04:23.620
是不是这个条件这里有区别

04:23.620 --> 04:26.620
他不但要是女生 还要是什么呢

04:26.620 --> 04:31.620
还要是A级要小于二十岁

04:31.620 --> 04:33.620
无非就是条件感一下

04:33.620 --> 04:36.620
其他的基本上都不变

04:36.620 --> 04:38.620
那这里我们是不是可以想到

04:38.620 --> 04:40.620
包括后边所有新招的同学

04:40.620 --> 04:42.620
所有居住在黑龙江的同学

04:42.620 --> 04:45.620
是不是我们可以提一个函数出来

04:45.620 --> 04:47.620
来消除重复代码

04:47.620 --> 04:49.620
好 那我们来试一下

04:49.620 --> 04:50.620
试着来一下

04:50.620 --> 04:51.620
这个函数我该怎么写呢

04:51.620 --> 04:53.620
我就这样写 写个filter

04:53.620 --> 04:55.620
过滤

04:55.620 --> 04:56.620
你给我传什么呢

04:56.620 --> 04:58.620
传一个数组进来

04:58.620 --> 05:01.620
我来帮你进行过滤

05:01.620 --> 05:02.620
那我这里怎么来过滤呢

05:02.620 --> 05:04.620
不就是个代码吗

05:04.620 --> 05:05.620
定一个数组

05:05.620 --> 05:08.620
然后循环原来的这个数组

05:08.620 --> 05:10.620
看一下原来这个数组的条件

05:11.620 --> 05:12.620
是否满足

05:12.620 --> 05:14.620
满足的话就把这数组的这一项

05:14.620 --> 05:15.620
加到结果当中

05:15.620 --> 05:18.620
最后把这个结果返回

05:18.620 --> 05:21.620
就完了吗

05:21.620 --> 05:24.620
但是问题就在于这

05:24.620 --> 05:27.620
我咋写啊这里

05:27.620 --> 05:29.620
我要写这样子写的话

05:29.620 --> 05:31.620
那我这个数组就限定太实了

05:31.620 --> 05:33.620
我只能筛选

05:33.620 --> 05:34.620
我必须要要求

05:34.620 --> 05:35.620
这是一个学生数组

05:35.620 --> 05:36.620
而且学生数组里面

05:36.620 --> 05:38.620
必须要有个属性sax

05:38.620 --> 05:41.620
我这个函数只能是过滤

05:41.620 --> 05:44.620
只能是得到女生

05:44.620 --> 05:46.620
这就是这一块代码贵变化

05:46.620 --> 05:48.620
那么面对这个地方的变化

05:48.620 --> 05:51.620
我该咋写参数呢

05:51.620 --> 05:53.620
我这个参数没法写了

05:53.620 --> 05:55.620
咋写了一告诉我

05:55.620 --> 05:56.620
我怎么把这一段单一把

05:56.620 --> 06:00.190
给我传过来呢

06:00.190 --> 06:02.190
是不是就遇到问题了

06:02.190 --> 06:05.190
我想来想去我能不能这样子

06:05.190 --> 06:09.190
你啊给我传个函数吧

06:09.190 --> 06:10.190
你给我传一个函数

06:10.190 --> 06:11.190
或者我们有的时候

06:11.190 --> 06:14.190
就把它叫个callback回掉函数

06:14.190 --> 06:16.190
其他注是我们不管啊

06:16.190 --> 06:18.190
观看这个callback

06:18.190 --> 06:20.190
这是一个函数

06:20.190 --> 06:23.190
如果说你给我传的函数的话

06:23.190 --> 06:25.190
因为函数也是一个普通对象

06:25.190 --> 06:26.190
它也可以调用的

06:26.190 --> 06:30.190
那我在这是不是可以调用这个函数啊

06:30.190 --> 06:34.190
我希望了这个函数的反回结果为true

06:34.190 --> 06:35.190
就表示条件满足

06:35.190 --> 06:37.190
反回结果为force

06:37.190 --> 06:41.190
就表示条件不满足

06:41.190 --> 06:43.190
是不是就可以了

06:43.190 --> 06:44.190
那你给我反回的

06:44.190 --> 06:46.190
这个函数调用的结果是true

06:46.190 --> 06:47.190
那我就表示条件满足

06:47.190 --> 06:50.190
反回的是force条件不满足

06:50.190 --> 06:52.190
那具体什么时候满足

06:52.190 --> 06:55.190
什么时候不满足有你来定

06:55.190 --> 06:56.190
你要得到所有女生

06:56.190 --> 06:58.190
那这里的这个函数里边

06:58.190 --> 07:00.190
就应该是怎么写呢

07:00.190 --> 07:01.190
这个callback

07:01.190 --> 07:02.190
如果说

07:02.190 --> 07:03.190
比方说我们要得到

07:03.190 --> 07:05.190
所有的女生我就这样子写

07:05.190 --> 07:07.190
数组传进去

07:07.190 --> 07:08.190
那条件

07:08.190 --> 07:09.190
条件呢

07:09.190 --> 07:10.190
怎么条件呢

07:10.190 --> 07:12.190
我就传一个函数进去

07:12.190 --> 07:14.190
所有的女生说什么

07:14.190 --> 07:16.190
retard

07:16.190 --> 07:18.190
a

07:18.190 --> 07:19.190
students

07:19.190 --> 07:21.190
i

07:21.190 --> 07:22.190
等于女

07:22.190 --> 07:23.190
对吧

07:23.190 --> 07:24.190
所以反回一个布尔

07:24.190 --> 07:26.190
反回一个布尔

07:26.190 --> 07:28.190
表示条件反回的是true

07:28.190 --> 07:30.190
那么我这里的条件你通过

07:30.190 --> 07:32.190
我就继续往后运行

07:32.190 --> 07:33.190
懂了意思吗

07:33.190 --> 07:34.190
那么现在假设

07:34.190 --> 07:36.190
我们这个函数写出来了

07:36.190 --> 07:37.190
比方说吧

07:37.190 --> 07:39.190
我这里先来一个最简单的

07:39.190 --> 07:41.190
我直接反回一个true

07:41.190 --> 07:43.190
直接反回一个true

07:43.190 --> 07:44.190
我们来看一下

07:44.190 --> 07:45.190
这个函数的运行

07:45.190 --> 07:47.190
那么这个函数传了两个参数

07:47.190 --> 07:48.190
第一个参数

07:48.190 --> 07:50.190
是一个数组传给它了

07:50.190 --> 07:51.190
第二个参数

07:51.190 --> 07:54.190
是一个函数传给它了

07:54.190 --> 07:55.190
那么这个函数

07:55.190 --> 07:56.190
现在运行吗

07:56.190 --> 07:57.190
不运行

07:57.190 --> 07:58.190
接下来我们来看

07:58.190 --> 07:59.190
得到一个新数组

07:59.190 --> 08:01.190
然后便利元数组

08:01.190 --> 08:02.190
便利的元数就是

08:02.190 --> 08:03.190
便利的就是它

08:04.190 --> 08:06.190
便利一个学生

08:06.190 --> 08:08.190
然后每一次便利的

08:08.190 --> 08:10.190
看一下条件满足吗

08:10.190 --> 08:11.190
是不是这里就在

08:11.190 --> 08:13.190
这里就在雕用这个函数

08:13.190 --> 08:14.190
雕论是谁

08:14.190 --> 08:15.190
雕论就是它

08:15.190 --> 08:17.190
它给我反回true

08:17.190 --> 08:18.190
ok 那我就只表示

08:18.190 --> 08:19.190
这个条件满足

08:19.190 --> 08:20.190
我就把这一项

08:20.190 --> 08:22.190
加到新数组里面去

08:22.190 --> 08:23.190
好 下一次循环

08:23.190 --> 08:24.190
又来判断

08:24.190 --> 08:26.190
这一个学生满足吗

08:26.190 --> 08:27.190
是不是又在雕论函数

08:27.190 --> 08:28.190
雕论是谁

08:28.190 --> 08:30.190
反复地雕论它

08:30.190 --> 08:31.190
对吧

08:31.190 --> 08:33.190
它这个雕用的权利

08:33.190 --> 08:34.190
交给它

08:34.190 --> 08:35.190
它来控制雕用

08:35.190 --> 08:37.190
但是这个函数的定义

08:37.190 --> 08:39.190
交给这里

08:39.190 --> 08:41.190
对吧 分开

08:41.190 --> 08:43.190
那么这样子的灵活度

08:43.190 --> 08:44.190
就变得很高了

08:44.190 --> 08:46.190
我这里就不知道

08:46.190 --> 08:47.190
我无所谓

08:47.190 --> 08:49.190
反正你给我条件你来定

08:49.190 --> 08:51.190
条件反回true

08:51.190 --> 08:53.190
我就认为满足的满足

08:53.190 --> 08:54.190
我就加进去

08:54.190 --> 08:55.190
看懂了吗

08:55.190 --> 08:56.190
那么这样

08:56.190 --> 08:57.190
但是如果说

08:57.190 --> 08:58.190
我这样子一写的话

08:58.190 --> 08:59.190
你看这个函数运行完了

08:59.190 --> 09:00.190
新数组

09:00.190 --> 09:04.980
那我接受一下

09:04.980 --> 09:05.980
得到一个新数

09:05.980 --> 09:09.670
我们输出这个新数组

09:09.670 --> 09:10.670
是不是得到了所有的学生

09:10.670 --> 09:11.670
为什么

09:11.670 --> 09:12.670
因为它每一个条件

09:12.670 --> 09:13.670
都反回的是true

09:13.670 --> 09:16.670
所有的学生都满足条件

09:16.670 --> 09:17.670
那么问题是我这里

09:17.670 --> 09:18.670
如果说我只要得到

09:18.670 --> 09:20.670
所有女生怎么办呢

09:20.670 --> 09:21.670
我是不是

09:21.670 --> 09:22.670
我希望在这个函数里面

09:22.670 --> 09:25.670
因为我这里不能这样子写

09:25.670 --> 09:26.670
不能这样子写

09:26.670 --> 09:28.670
哪来的i

09:28.670 --> 09:30.670
所以没有这个i

09:30.670 --> 09:31.670
所以没有这个i

09:31.670 --> 09:32.670
这个函数的定义的位置

09:32.670 --> 09:33.670
哪有这个i

09:33.670 --> 09:35.670
所以说我希望在这里拿到

09:35.670 --> 09:38.670
当前那个学生对象

09:38.670 --> 09:41.670
你把那个学生对象告诉我

09:41.670 --> 09:43.670
然后我就知道

09:43.670 --> 09:44.670
该怎么来判断

09:44.670 --> 09:45.670
它条件是满足了

09:45.670 --> 09:47.670
因此我在调用函数的时候

09:47.670 --> 09:48.670
我有可能

09:48.670 --> 09:53.560
希望给你传一个参数过去

09:53.560 --> 09:54.560
把数组的当前项

09:54.560 --> 09:56.560
作为参数给你传过来

09:56.560 --> 09:57.560
那么也就是说

09:57.560 --> 09:58.560
我要调用这个函数的时候

09:58.560 --> 09:59.560
实际上调用谁

09:59.560 --> 10:00.560
调用他

10:00.560 --> 10:01.560
并且把这个参数

10:01.560 --> 10:03.560
给你传过来

10:03.560 --> 10:04.560
那你接不接收

10:04.560 --> 10:05.560
用不用那是你的事

10:05.560 --> 10:06.560
反正我传给你

10:06.560 --> 10:07.560
因此我如果说

10:07.560 --> 10:08.560
我这里需要用的话

10:08.560 --> 10:09.560
我们这里是不是可以

10:09.560 --> 10:11.560
拿到一个学生对象

10:11.560 --> 10:12.560
这个玩意是啥

10:12.560 --> 10:14.560
这个玩意就是学生对象

10:14.560 --> 10:15.560
就是这个东西

10:15.560 --> 10:18.560
就是数组的每一项

10:18.560 --> 10:20.560
那么我们现在的s

10:20.560 --> 10:21.560
第二

10:21.560 --> 10:22.560
我就可以写了

10:22.560 --> 10:24.560
这个是否等于你

10:24.560 --> 10:27.260
那么判断

10:27.260 --> 10:30.260
得到所有女生就完成了

10:30.260 --> 10:32.260
就全部都是女生了

10:32.260 --> 10:33.260
这个东西

10:33.260 --> 10:36.260
这个东西确实看上去很绕

10:36.260 --> 10:38.260
但是如果说

10:38.260 --> 10:39.260
我告诉你

10:39.260 --> 10:40.260
这个函数不是理解的

10:40.260 --> 10:41.260
你没有写这个函数

10:41.260 --> 10:42.260
你写了吗

10:42.260 --> 10:43.260
没有写

10:43.260 --> 10:44.260
浏览器天生

10:44.260 --> 10:45.260
给你提供了这个函数

10:45.260 --> 10:47.260
你会发现他特别好用

10:47.260 --> 10:48.260
Filter

10:48.260 --> 10:49.260
有一个

10:49.260 --> 10:50.260
浏览器给你提供了一个函数

10:50.260 --> 10:51.260
叫Filter

10:51.260 --> 10:52.260
他传入两个参数

10:52.260 --> 10:53.260
第一个参数传入数组

10:53.260 --> 10:54.260
第二个参数

10:54.260 --> 10:55.260
他传入一个函数

10:55.260 --> 10:59.890
他能够过滤这个数组

10:59.890 --> 11:01.890
哪些保留

11:01.890 --> 11:03.890
通过这个函数来指定

11:04.890 --> 11:05.890
这个函数

11:05.890 --> 11:06.890
他会给你一个参数

11:06.890 --> 11:09.890
这个参数是数组的每一项

11:09.890 --> 11:11.890
这个函数要做什么事情

11:11.890 --> 11:12.890
判断

11:12.890 --> 11:14.890
这一项满不满足条件就行了

11:14.890 --> 11:15.890
满足条件返回处

11:15.890 --> 11:16.890
他就给你保留了

11:16.890 --> 11:17.890
不满足条件返回Force

11:17.890 --> 11:19.890
他就不给你保留

11:19.890 --> 11:20.890
于是

11:20.890 --> 11:22.890
这个函数他就会自动从这个数组里边

11:22.890 --> 11:24.890
找到所有满足条件的

11:24.890 --> 11:26.890
保存到新数组里边

11:26.890 --> 11:28.890
如果说浏览器给你提供了这么一个

11:28.890 --> 11:30.890
就非常非常好用

11:30.890 --> 11:31.890
只不过现在

11:31.890 --> 11:32.890
如果说让你来书写的话

11:32.890 --> 11:34.890
这一块就会有难度

11:34.890 --> 11:36.890
因为你会绕几个圈

11:36.890 --> 11:37.890
第一次接触

11:37.890 --> 11:39.890
这个东西肯定会

11:39.890 --> 11:40.890
头大

11:40.890 --> 11:41.890
很正常

11:41.890 --> 11:43.890
现在我只是通过这节课

11:43.890 --> 11:45.890
给大家开个头

11:45.890 --> 11:47.890
不是说让你一节课

11:47.890 --> 11:48.890
怎么可能让你一节课

11:48.890 --> 11:50.890
就把这个东西搞得非常清楚

11:50.890 --> 11:52.890
但是你至少得知道

11:52.890 --> 11:54.890
原来介石还可以玩出

11:54.890 --> 11:56.890
这种花出来

11:56.890 --> 11:59.890
以后我们会逐渐的看到

11:59.890 --> 12:01.890
这些毁掉的模式

12:01.890 --> 12:02.890
包括我们后边

12:02.890 --> 12:04.890
一些经典案例里边会看到

12:04.890 --> 12:06.890
包括我们后边在那个

12:06.890 --> 12:08.890
介石语言提升那一块也会看到

12:08.890 --> 12:10.890
看多了也就熟悉了

12:10.890 --> 12:12.890
现在不只望你一节课

12:12.890 --> 12:14.890
怎么可能一节课

12:14.890 --> 12:16.890
几十分钟就把这么

12:16.890 --> 12:18.890
高端的内容就可以

12:18.890 --> 12:19.890
管权的吸收透

12:19.890 --> 12:20.890
不太可能的

12:20.890 --> 12:21.890
但是你要知道至于

12:21.890 --> 12:23.890
可以有这种玩法的

12:23.890 --> 12:24.890
就可以了

12:24.890 --> 12:27.890
你可以去体验一下

12:27.890 --> 12:29.890
那么有了这个函数之后

12:29.890 --> 12:30.890
你会看到

12:30.890 --> 12:32.890
后边代码那太简单了

12:32.890 --> 12:34.890
得到所有的女生

12:34.890 --> 12:35.890
完了

12:35.890 --> 12:37.890
得到所有20岁以下的女生

12:37.890 --> 12:39.890
那无非就是这里的代码

12:39.890 --> 12:41.890
改一下改成什么S点

12:41.890 --> 12:43.890
A级小于20

12:43.890 --> 12:45.890
得到所有新招的同学

12:45.890 --> 12:47.890
那么无非就是学生的名字

12:47.890 --> 12:50.890
第一个字等于招

12:51.890 --> 12:52.890
对吧

12:52.890 --> 12:53.890
那也可以用我们的

12:53.890 --> 12:54.890
数组里边的

12:54.890 --> 12:55.890
字无创里边的方法

12:55.890 --> 12:56.890
Starsways

12:56.890 --> 12:58.890
是不是以什么开头

12:58.890 --> 12:59.890
对吧

12:59.890 --> 13:01.890
以招开头

13:01.890 --> 13:02.890
也可以

13:02.890 --> 13:03.890
或者是

13:03.890 --> 13:05.890
第一个字符就是招

13:05.890 --> 13:06.890
都行

13:06.890 --> 13:07.890
反正就是给她个条件

13:07.890 --> 13:08.890
把这个条件具体写啥

13:08.890 --> 13:10.890
其实无所谓的

13:10.890 --> 13:11.890
好

13:11.890 --> 13:12.890
我们看一下

13:12.890 --> 13:13.890
所有新招的同学

13:13.890 --> 13:15.890
然后得到所有居住

13:15.890 --> 13:17.890
在黑龙江的女生

13:17.890 --> 13:21.390
那么这里是女生

13:21.390 --> 13:23.390
并且她的居住地

13:23.390 --> 13:24.390
Adris

13:24.390 --> 13:26.390
里边包含Includes

13:26.390 --> 13:28.390
黑龙江

13:31.220 --> 13:32.220
就这两个

13:32.220 --> 13:33.220
在黑龙江

13:33.220 --> 13:35.220
是不是非常方便了

13:35.220 --> 13:36.220
这就是毁掉寒暑

13:36.220 --> 13:37.220
给我们开发

13:37.220 --> 13:39.220
带来一个便利

13:39.220 --> 13:40.220
好吧

13:40.220 --> 13:41.220
这节课我再重申一次

13:41.220 --> 13:44.220
跟着老师学

13:44.220 --> 13:45.220
慢慢体会

13:45.220 --> 13:47.220
有那么一点感觉

13:47.220 --> 13:48.220
都算是进步

13:48.220 --> 13:50.220
不能要求你一节课

13:50.220 --> 13:51.220
就把这个毁掉模式

13:51.220 --> 13:52.220
搞得很透

13:52.220 --> 13:53.220
而现在开发中

13:53.220 --> 13:54.220
非常熟练

13:54.220 --> 13:55.220
随心所欲的使用

13:55.220 --> 13:56.220
哪里是天才

13:56.220 --> 13:57.220
目前没有见过

13:57.220 --> 13:58.220
这样的一个同学

13:59.220 --> 14:01.220
那么这里就结束了

14:01.220 --> 14:02.220
把这个毁掉

14:02.220 --> 14:03.220
跟着老师练一练

14:03.220 --> 14:04.220
就可以了

