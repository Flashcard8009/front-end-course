WEBVTT

00:00.000 --> 00:04.000
来聊一聊这个事件传播机制

00:04.000 --> 00:06.000
这一块啥意思呢

00:06.000 --> 00:08.000
就是说我们很多事件

00:08.000 --> 00:13.000
它其实不是说你给它注册到哪一个元素

00:13.000 --> 00:15.000
它就只看哪一个元素

00:15.000 --> 00:16.000
还真不是这样

00:16.000 --> 00:19.000
比方说有一个比较典型的例子

00:19.000 --> 00:22.000
这里我有一个页面

00:22.000 --> 00:23.000
给大家看一下这个页面

00:23.000 --> 00:24.000
这页面非常简单

00:24.000 --> 00:26.000
就是一个大DIV套小DIV

00:26.000 --> 00:28.000
小DIV里面套一个button

00:29.000 --> 00:32.000
其实大DIV也备一个东西包裹

00:32.000 --> 00:33.000
就是body

00:33.000 --> 00:37.000
body也备一个东西包裹就是document

00:37.000 --> 00:38.000
就是atmail

00:38.000 --> 00:41.000
atmail也备一个东西包裹就是document

00:41.000 --> 00:43.000
这是我们的文档模型

00:43.000 --> 00:46.000
其实document上面还有一个window

00:46.000 --> 00:48.000
因此你可以看到我们整个页面

00:48.000 --> 00:51.000
是一层一层包裹进来的

00:51.000 --> 00:53.000
那么当我们点击这个按钮的时候

00:53.000 --> 00:55.000
其实你可以想象得到

00:55.000 --> 00:56.000
我点这个按钮

00:56.000 --> 00:58.000
这个按钮是不是也相当于是

00:58.000 --> 01:00.000
我点了它的复原书

01:00.000 --> 01:03.000
因为它也是复原书的一部分

01:03.000 --> 01:06.000
然后我既然它点了复原书

01:06.000 --> 01:09.000
那是不是相当于我点了这个container呢

01:09.000 --> 01:11.000
也是它的一部分

01:11.000 --> 01:13.000
那是不是也相当于是我点了

01:13.000 --> 01:15.000
网页的body呢

01:15.000 --> 01:18.000
那也是相当于是点了atmail

01:18.000 --> 01:20.000
是不是也相当于是点了document

01:20.000 --> 01:23.000
是不是也相当于是点了window

01:24.000 --> 01:27.000
也就是说我们这个原书结构

01:27.000 --> 01:29.000
一层套一层下去

01:29.000 --> 01:31.000
当我们去点它的时候

01:31.000 --> 01:33.000
实际上也相当于点了它

01:33.000 --> 01:35.000
也相当于点了它

01:35.000 --> 01:37.000
是这么一个意思

01:37.000 --> 01:39.000
这件事倒不是说

01:39.000 --> 01:41.000
我们平时写代就一定要

01:41.000 --> 01:43.000
特别关注这个

01:43.000 --> 01:45.000
我反正平时没去关注这个

01:45.000 --> 01:47.000
就当我们有的时候

01:47.000 --> 01:50.000
我们可能可以利用这一个特点

01:50.000 --> 01:52.000
去完成一些事

01:52.000 --> 01:55.000
可能大部分时候你一年的开发中

01:55.000 --> 01:58.000
可能会用到那么几次不多

01:58.000 --> 02:00.000
但是遇到了它你得会

02:00.000 --> 02:03.000
因为这一块知识本身也不复杂

02:03.000 --> 02:07.000
它对我们代码的影响也比较简单

02:07.000 --> 02:09.000
但是你不能说你完全不知道

02:09.000 --> 02:11.000
你得知道

02:11.000 --> 02:13.000
虽然平时不怎么会用

02:13.000 --> 02:16.000
有的时候也确实有奇效

02:16.000 --> 02:20.000
那么什么叫做事件的传播机制呢

02:20.000 --> 02:22.000
是这样子的

02:22.000 --> 02:24.000
当用户做了一个操作

02:24.000 --> 02:26.000
就比方说是点击

02:26.000 --> 02:28.000
当用户点击了某一个按钮的时候

02:28.000 --> 02:30.000
比方说我们这里一个按钮

02:30.000 --> 02:32.000
用户点击了某一个按钮

02:32.000 --> 02:34.000
它的事件是从Windows开始

02:34.000 --> 02:36.000
上面还少一个Windows

02:36.000 --> 02:38.000
从Windows开始

02:38.000 --> 02:41.000
发现我的Windows被点击了

02:41.000 --> 02:43.000
然后Windows谁被点击了呢

02:43.000 --> 02:45.000
Documents被点击了

02:45.000 --> 02:46.000
Documents谁被点击了呢

02:46.000 --> 02:48.000
Atm被点击了

02:49.000 --> 02:52.000
所以从数的根部一直往下传递

02:52.000 --> 02:56.000
到DIV被点击了

02:56.000 --> 02:59.000
发现点击发现事件

02:59.000 --> 03:04.440
那么发现事件称之为事件补货阶段

03:04.440 --> 03:07.440
比方说你跟你的个注不注册

03:07.440 --> 03:10.440
处理函数没有什么关系

03:10.440 --> 03:14.440
比方说我没有去监听它被点击

03:14.440 --> 03:16.440
它实际上也会存在

03:16.440 --> 03:18.440
它只是没有运行函数而已

03:18.440 --> 03:20.440
没有运行理写的函数而已

03:20.440 --> 03:23.440
它有个事件补货阶段

03:23.440 --> 03:25.440
好了到了最终的元素

03:25.440 --> 03:28.440
就是最终我们点击了什么按钮

03:28.440 --> 03:31.440
那么这个叫做事件目标阶段

03:31.440 --> 03:33.440
好点了按钮过后

03:33.440 --> 03:36.440
按钮继续往上传递

03:36.440 --> 03:38.440
我发现被点击

03:38.440 --> 03:40.440
然后确实被点击了按钮

03:40.440 --> 03:42.440
然后按钮说我被点击了

03:42.440 --> 03:45.440
那DIV说那些相当于是我被点击了

03:45.440 --> 03:47.440
保利说也是相当于我被点击了

03:47.440 --> 03:49.440
这个叫做事件冒炮阶段

03:49.440 --> 03:51.440
所以说我们每一个事件

03:51.440 --> 03:54.440
当你用户在页面上做一个操作之后

03:54.440 --> 03:58.440
它都会经过这么三个阶段

03:58.440 --> 04:00.440
都会经过三个阶段

04:00.440 --> 04:02.440
一二三那就是事件补货阶段

04:02.440 --> 04:04.440
四就是事件目标阶段

04:04.440 --> 04:07.440
然后五六七事件冒炮阶段

04:07.440 --> 04:08.440
就这么个意思

04:08.440 --> 04:10.440
没了就这么意思

04:10.440 --> 04:13.440
那平时我们去写单一把

04:13.440 --> 04:14.440
写到市场了

04:14.440 --> 04:17.440
比方说假设我可以这个body

04:17.440 --> 04:19.440
监听body的点击事件

04:19.440 --> 04:20.440
比方说我怎么监听呢

04:20.440 --> 04:23.440
我监听doggy woman body

04:23.440 --> 04:25.440
然后unclick

04:25.440 --> 04:27.440
所以给他写个函数

04:27.440 --> 04:30.440
那么这个函数相当于是监听的

04:30.440 --> 04:33.440
body的冒炮阶段

04:33.440 --> 04:37.440
也就是说如果说我点击的是这个按钮

04:37.440 --> 04:40.440
那么按钮的点击事件先触发

04:40.440 --> 04:42.440
补货阶段我们没有

04:42.440 --> 04:43.440
按钮的点击事件先触发

04:43.440 --> 04:46.440
然后再触发它的复原数DIV的

04:46.440 --> 04:49.440
然后再触发body的再触发这个unclick

04:49.440 --> 04:51.440
它是有这么一个顺序

04:51.440 --> 04:54.440
那如果说我们平时用的是

04:54.440 --> 04:56.440
document body

04:56.440 --> 04:57.440
然后使用这种方式

04:57.440 --> 04:59.440
adge event listener

04:59.440 --> 05:01.440
然后给他写了一个click

05:01.440 --> 05:03.440
那么这个玩意也是一样

05:03.440 --> 05:05.440
也是事件冒炮阶段

05:05.440 --> 05:07.440
那么如果说用户点击到按钮

05:07.440 --> 05:09.440
按钮它先触发

05:09.440 --> 05:10.440
再触发它的复原数DIV

05:10.440 --> 05:12.440
再触发它的body

05:13.440 --> 05:16.440
那如果说我想监听body

05:16.440 --> 05:19.440
在补货阶段的事件呢

05:19.440 --> 05:21.440
那我这里要传入

05:21.440 --> 05:23.440
第二个参数传函数嘛对吧

05:23.440 --> 05:25.440
第三个参数要传入一个to

05:25.440 --> 05:27.440
第三个参数啥意思

05:27.440 --> 05:29.440
第三个参数表示的是

05:29.440 --> 05:33.440
要不要在补货阶段触发事件

05:33.440 --> 05:35.440
默认是force

05:35.440 --> 05:37.440
默认是在冒炮阶段触发

05:37.440 --> 05:39.440
那如果说你传了一个to

05:39.440 --> 05:41.440
于是这个点击事件会在哪里触发

05:41.440 --> 05:43.440
会在补货阶段触发

05:43.440 --> 05:45.440
就这么个意思

05:45.440 --> 05:47.440
unclick搞定必须要用这种方式

05:47.440 --> 05:49.440
那这样子一来的话

05:49.440 --> 05:51.440
如果说你点击到按钮

05:51.440 --> 05:53.440
那么它触发的时候

05:53.440 --> 05:55.440
先触发的是body的click

05:55.440 --> 05:57.440
然后再触发按钮的

05:57.440 --> 05:59.440
然后再冒炮

05:59.440 --> 06:01.440
冒炮发现没有了对吧

06:01.440 --> 06:03.440
那就没了

06:03.440 --> 06:05.440
就这么个意思

06:05.440 --> 06:07.440
其他的又啥了就没啥了

06:07.440 --> 06:09.440
这就是那个事件的传播机制

06:09.440 --> 06:11.440
会对我们开发

06:11.440 --> 06:13.440
有什么样的影响呢

06:13.440 --> 06:15.440
下面有例子

06:15.440 --> 06:17.440
传一个to表示补货阶段

06:17.440 --> 06:19.440
传入一个force表示冒炮阶段

06:19.440 --> 06:21.440
或者是你不传递force

06:21.440 --> 06:23.440
对我们开发有什么影响呢

06:23.440 --> 06:25.440
大家看下面那个代码

06:25.440 --> 06:27.440
我们可以在一个事件函数里边

06:27.440 --> 06:29.440
不是有个事件参数一吗

06:29.440 --> 06:31.440
对吧事件对象一

06:31.440 --> 06:33.440
里面一个属性叫talkage

06:33.440 --> 06:35.440
它是能够获取事件圆

06:35.440 --> 06:37.440
什么叫事件圆

06:37.440 --> 06:39.440
事件圆

06:39.440 --> 06:41.440
就是目标阶段

06:41.440 --> 06:43.440
它的那个元素

06:43.440 --> 06:45.440
就是事件圆

06:45.440 --> 06:47.440
以前的面试庭里边

06:47.440 --> 06:49.440
常常会问到

06:49.440 --> 06:51.440
在这个事件函数里边

06:51.440 --> 06:53.440
这个z和一点talkage

06:53.440 --> 06:55.440
有什么样的区别

06:55.440 --> 06:57.440
有什么区别呢

06:57.440 --> 06:59.440
从这张图里面就可以很容易

06:59.440 --> 07:01.440
说清楚它的区别

07:01.440 --> 07:03.440
比方说你在这个body里边

07:03.440 --> 07:05.440
注册事件它点的是按钮

07:06.440 --> 07:08.440
那么

07:08.440 --> 07:10.440
z指的是谁

07:10.440 --> 07:11.440
z指的就是body

07:11.440 --> 07:13.440
因为你给它注册的事件

07:13.440 --> 07:15.440
talkage它指的是谁

07:15.440 --> 07:17.440
talkage它指的是它

07:17.440 --> 07:19.440
事件目标阶段的

07:19.440 --> 07:21.440
元素

07:21.440 --> 07:23.440
懂了意思吗

07:23.440 --> 07:25.440
就这么个意思

07:25.440 --> 07:27.440
那如果说

07:27.440 --> 07:29.440
你点的是这个div

07:29.440 --> 07:31.440
不是点的button

07:31.440 --> 07:33.440
你点的是这个div

07:33.440 --> 07:35.440
body注册的事件

07:35.440 --> 07:36.440
那么z是相对于谁

07:36.440 --> 07:37.440
相对于还是body

07:37.440 --> 07:39.440
因为你给它注册的事件

07:39.440 --> 07:41.440
一点talkage是相对于什么呢

07:41.440 --> 07:43.440
相对于这个div

07:43.440 --> 07:45.440
所以说一点talkage指的是

07:45.440 --> 07:47.440
目标阶段的那个元素

07:47.440 --> 07:49.440
就是事件圆

07:49.440 --> 07:50.440
另外一个呢

07:50.440 --> 07:52.440
里边还提供一个方法叫做stop

07:52.440 --> 07:54.440
propagation

07:54.440 --> 07:56.440
这个propagation就是表示的是

07:56.440 --> 07:57.440
冒泡的意思

07:57.440 --> 07:59.440
阻止事件冒泡

07:59.440 --> 08:00.440
那么这个玩意儿

08:00.440 --> 08:01.440
只要一调这个函数

08:01.440 --> 08:02.440
再继续冒泡了

08:02.440 --> 08:03.440
那么什么意思呢

08:03.440 --> 08:05.440
比方说你在按钮的事件里边

08:05.440 --> 08:07.440
你给它阻止冒泡

08:07.440 --> 08:09.440
这些就没了

08:09.440 --> 08:11.440
那如果说你给

08:11.440 --> 08:13.440
比方说点的是按钮

08:13.440 --> 08:14.440
你在body里边

08:14.440 --> 08:15.440
阻止事件冒泡

08:15.440 --> 08:16.440
那这个就没了

08:16.440 --> 08:17.440
懂了意思吗

08:17.440 --> 08:19.440
好 咱们来看一下

08:19.440 --> 08:20.440
这边这个例子

08:20.440 --> 08:21.440
这个例子呢

08:21.440 --> 08:22.440
其实呢我已经在控制台里边

08:22.440 --> 08:23.440
把这些事件

08:23.440 --> 08:25.440
接上来给它打印出来了

08:25.440 --> 08:26.440
比方说我点按钮

08:26.440 --> 08:27.440
你看一下

08:27.440 --> 08:29.440
点按钮

08:29.440 --> 08:30.440
我还没写在吗

08:30.440 --> 08:32.440
那我们写一件代码吧

08:32.440 --> 08:34.440
写下代码

08:34.440 --> 08:36.440
来看一下这个这个这个例子

08:38.440 --> 08:39.440
我这里呢有

08:39.440 --> 08:40.440
外面的一个diva

08:40.440 --> 08:42.440
container里边一个inner

08:42.440 --> 08:43.440
里边一个button

08:43.440 --> 08:44.440
那么这里呢

08:44.440 --> 08:45.440
我就获取了这三个了

08:45.440 --> 08:46.440
看了没

08:46.440 --> 08:47.440
获取了这三个元素

08:47.440 --> 08:48.440
那比方说吧

08:48.440 --> 08:50.440
我给这个container

08:50.440 --> 08:51.440
添加一个事件

08:51.440 --> 08:53.440
处理函数

08:53.440 --> 08:54.440
click

08:54.440 --> 08:58.900
好 我在事件函数里边

08:58.900 --> 09:00.900
输出container

09:01.900 --> 09:02.900
click

09:02.900 --> 09:04.900
将来又是你点击的container

09:04.900 --> 09:06.900
然后呢我再给这个button

09:06.900 --> 09:08.900
注册事件处理函数

09:08.900 --> 09:10.900
我把这个拖破了一点

09:12.900 --> 09:13.900
事件处理函数

09:13.900 --> 09:15.900
然后呢我们输出button

09:15.900 --> 09:16.900
click

09:16.900 --> 09:17.900
因为我们之前说过

09:17.900 --> 09:18.900
这两个函数啊

09:18.900 --> 09:20.900
这种方式注册函数

09:20.900 --> 09:21.900
都是指的是冒泡阶段

09:21.900 --> 09:22.900
对吧

09:22.900 --> 09:23.900
那比方说吧

09:23.900 --> 09:24.900
我再来一个

09:24.900 --> 09:26.900
再来一个inner

09:26.900 --> 09:27.900
inner

09:28.900 --> 09:30.900
这里输出inner

09:30.900 --> 09:31.900
click

09:33.900 --> 09:34.900
好 那么这些都是冒泡阶段

09:34.900 --> 09:36.900
那我们来语一下

09:36.900 --> 09:38.900
如果说我点击的是按鈕

09:38.900 --> 09:40.900
点按钮的时候呢

09:40.900 --> 09:42.900
是不是按钮先触发

09:42.900 --> 09:43.900
看这个图

09:43.900 --> 09:44.900
因为补货阶段

09:44.900 --> 09:45.900
我没有注册函数

09:45.900 --> 09:46.900
对吧 那么到了这了

09:46.900 --> 09:47.900
按钮是不是先触发

09:47.900 --> 09:49.900
然后再触发div

09:49.900 --> 09:50.900
再触发

09:50.900 --> 09:51.900
上面的东西

09:51.900 --> 09:52.900
就一丝往上冒泡

09:52.900 --> 09:54.900
好 咱们看一下

09:54.900 --> 09:55.900
看是不是这样子

09:56.900 --> 09:58.900
我们把这个贴过来

09:59.900 --> 10:00.900
点按钮

10:00.900 --> 10:01.900
按钮先触发

10:01.900 --> 10:02.900
对吧

10:02.900 --> 10:03.900
然后它再触发

10:03.900 --> 10:04.900
它再触发

10:04.900 --> 10:05.900
尽管我注册的时候

10:05.900 --> 10:06.900
先注册的是它

10:06.900 --> 10:07.900
再注册的是它

10:07.900 --> 10:09.900
没关系

10:09.900 --> 10:11.900
它是按上阶段来触发的

10:11.900 --> 10:12.900
按钮先触发

10:12.900 --> 10:13.900
然后再出它的inner

10:13.900 --> 10:14.900
再触发container

10:14.900 --> 10:15.900
那如果说

10:15.900 --> 10:16.900
上面还加上一个

10:16.900 --> 10:17.900
atmr body的

10:17.900 --> 10:19.900
是不是一丝往上冒泡

10:19.900 --> 10:20.900
对吧

10:20.900 --> 10:21.900
但是如果说

10:21.900 --> 10:22.900
我把这里inner

10:22.900 --> 10:23.900
改成什么

10:23.900 --> 10:24.900
改成这里

10:24.900 --> 10:25.900
表示它在补货去触发

10:25.900 --> 10:26.900
那么同学们想一想

10:26.900 --> 10:27.900
它的输出顺序

10:27.900 --> 10:28.900
应该是什么

10:29.900 --> 10:30.900
是补货阶段

10:30.900 --> 10:31.900
只有一个踏段

10:31.900 --> 10:32.900
它先触发

10:32.900 --> 10:33.900
然后到了目标阶段

10:33.900 --> 10:34.900
再触发它

10:34.900 --> 10:35.900
再触发它

10:35.900 --> 10:36.900
所以说inner button

10:36.900 --> 10:37.900
container

10:41.900 --> 10:42.900
好 我们来看一下

10:42.900 --> 10:43.900
所以inner button

10:43.900 --> 10:44.900
container

10:44.900 --> 10:45.900
对吧

10:45.900 --> 10:46.900
是不是这个顺序

10:47.900 --> 10:48.900
好 那如果说

10:48.900 --> 10:49.900
我在button里边

10:49.900 --> 10:50.900
阻止事件冒泡

10:50.900 --> 10:52.900
那么我们就可以使用stop

10:52.900 --> 10:53.900
propagation

10:53.900 --> 10:54.900
有的时候

10:54.900 --> 10:56.900
主要是冒泡是有些作用的

10:57.900 --> 10:58.900
但是这种

10:58.900 --> 10:59.900
长期的不多

10:59.900 --> 11:01.900
好 我们这里点击按钮

11:01.900 --> 11:03.900
是不是只有补货阶段的inner触发了

11:04.900 --> 11:06.900
补货阶段的inner触发了

11:06.900 --> 11:08.900
它没有继续往后边冒泡了

11:08.900 --> 11:10.900
就是补货阶段inner

11:10.900 --> 11:11.900
这里触发了

11:11.900 --> 11:13.900
然后到了button触发了

11:13.900 --> 11:14.900
然后它不再冒泡了

11:14.900 --> 11:15.900
是不是

11:15.900 --> 11:16.900
后边的冒泡阶段就没了

11:16.900 --> 11:18.900
没有冒泡阶段的

11:18.900 --> 11:19.900
那么

11:19.900 --> 11:20.900
container是不是没了

11:20.900 --> 11:22.900
就这么个意思

11:22.900 --> 11:23.900
就是这个玩意儿

11:23.900 --> 11:25.900
其他没啥

11:25.900 --> 11:27.900
好 利用这种东西

11:27.900 --> 11:30.900
我们可以做什么事呢

11:30.900 --> 11:32.900
我们可以做啥事呢

11:32.900 --> 11:34.900
我们可以做出事件委托

11:34.900 --> 11:36.900
什么叫事件委托

11:36.900 --> 11:37.900
就好比说

11:37.900 --> 11:40.900
我们的页面上有很多的

11:40.900 --> 11:42.900
这个应该叫事件传播势力

11:42.900 --> 11:44.900
不叫事件委托势力

11:45.900 --> 11:49.900
事件传播势力

11:50.900 --> 11:53.900
什么叫事件委托呢

11:53.900 --> 11:55.900
我给他写个例子

11:59.560 --> 12:01.560
比方说我有一个元素

12:01.560 --> 12:04.560
元素里边有很多按钮

12:04.560 --> 12:07.870
事件委托有的时候

12:07.870 --> 12:08.870
会有些奇效

12:08.870 --> 12:13.210
比方说有100个按钮

12:13.210 --> 12:15.210
把它运行出来

12:16.210 --> 12:18.210
那么我希望点哪个按钮

12:18.210 --> 12:19.210
它就输出哪个数字

12:19.210 --> 12:20.210
再控制一下输出哪个数字

12:20.210 --> 12:22.210
比方说有这么一个需求

12:22.210 --> 12:25.210
那我怎么来玩这件事呢

12:25.210 --> 12:26.210
第一种方案

12:26.210 --> 12:28.210
就是得到所有的按钮

12:28.210 --> 12:30.210
用query connected all

12:30.210 --> 12:32.210
得到所有的按钮

12:32.210 --> 12:34.210
然后一次给它注册点击时间

12:34.210 --> 12:36.210
这是一种方案

12:36.210 --> 12:37.210
这种方案行不行呢

12:37.210 --> 12:38.210
当然可以

12:38.210 --> 12:39.210
没有什么问题

12:39.210 --> 12:41.210
要不然我们写一次

12:41.210 --> 12:43.210
bitense documents

12:43.210 --> 12:44.210
query connected all

12:44.210 --> 12:45.210
找到所有的button

12:45.210 --> 12:47.210
然后来循环

12:47.210 --> 12:48.210
是吧

12:48.210 --> 12:49.210
每循环一次

12:49.210 --> 12:51.210
i小于bitense

12:51.210 --> 12:53.210
i加加

12:53.210 --> 12:55.210
然后给它注册点击时间

12:55.210 --> 12:57.210
onclick

12:57.210 --> 12:58.210
当点击的时候

12:58.210 --> 12:59.210
我干嘛呀

12:59.210 --> 13:02.210
我输出这个按钮的文本认识

13:02.210 --> 13:03.210
是不是这个按钮

13:03.210 --> 13:05.210
当前注册时间的按钮

13:05.210 --> 13:06.210
都是什么文本

13:06.210 --> 13:08.210
inner text

13:08.210 --> 13:09.210
可以吗

13:09.210 --> 13:10.210
当然可以

13:10.210 --> 13:11.210
代码也不多

13:11.210 --> 13:12.210
也可以

13:12.210 --> 13:13.210
对吧

13:13.210 --> 13:14.210
点每个按钮

13:14.210 --> 13:15.210
它都会有一个时间

13:15.210 --> 13:16.210
但这样子

13:16.210 --> 13:17.210
做了不好的地方

13:17.210 --> 13:18.210
再有什么呢

13:18.210 --> 13:20.210
每个按钮的

13:20.210 --> 13:21.210
是不是都有一个函数

13:21.210 --> 13:22.210
给它对应

13:22.210 --> 13:23.210
第一个按钮

13:23.210 --> 13:24.210
给它注册的时间

13:24.210 --> 13:25.210
相当于给它一个函数

13:25.210 --> 13:28.210
函数是会不会占用那群空间

13:28.210 --> 13:29.210
是会

13:29.210 --> 13:30.210
那如果说

13:30.210 --> 13:32.210
一面上这个东西多了

13:32.210 --> 13:33.210
你看现在是不是注册了

13:33.210 --> 13:34.210
100个函数

13:34.210 --> 13:36.210
是有点影响效率的

13:37.210 --> 13:38.210
对吧

13:38.210 --> 13:39.210
这是一个原因

13:39.210 --> 13:40.210
那将来呢

13:40.210 --> 13:42.210
如果说我们这个

13:42.210 --> 13:43.210
还要动态的加按钮

13:43.210 --> 13:44.210
不要忘了

13:44.210 --> 13:45.210
下面我给它加一个101

13:45.210 --> 13:46.210
102

13:46.210 --> 13:47.210
一会又加一个

13:47.210 --> 13:48.210
一会又加一个

13:48.210 --> 13:49.210
那每一加一个

13:49.210 --> 13:50.210
我是不是还要

13:50.210 --> 13:52.210
来得去给它注册一个时间

13:52.210 --> 13:53.210
对吧

13:53.210 --> 13:54.210
有点麻烦

13:54.210 --> 13:55.210
说这一块

13:55.210 --> 13:56.210
我们可以使用视线委托

13:56.210 --> 13:58.210
怎么来做呢

13:58.210 --> 13:59.210
因为我们知道

13:59.210 --> 14:01.210
你点这个按钮

14:01.210 --> 14:03.210
是不是就会冒泡到

14:03.210 --> 14:04.210
复元素DIV

14:04.210 --> 14:06.210
是不是会冒泡到这

14:06.210 --> 14:07.210
也就是你点里边的

14:07.210 --> 14:08.210
任何东西

14:08.210 --> 14:09.210
它都会冒泡到这

14:09.210 --> 14:10.210
所以说

14:10.210 --> 14:11.210
我就直接给它注册时间

14:12.210 --> 14:13.210
我就这样子写

14:13.210 --> 14:15.210
找到它的康天那

14:16.210 --> 14:17.210
找到康天那

14:17.210 --> 14:18.210
然后呢

14:18.210 --> 14:20.210
我们点这个康天那

14:20.210 --> 14:21.210
来注册时间

14:21.210 --> 14:22.210
康天那

14:22.210 --> 14:24.210
on click

14:24.210 --> 14:26.210
因为整理上也行

14:26.210 --> 14:30.420
我们来输出

14:30.420 --> 14:31.420
click

14:33.790 --> 14:34.790
咱们试一下

14:34.790 --> 14:35.790
那么现在我只要点

14:35.790 --> 14:36.790
这个DIV里面

14:36.790 --> 14:39.550
里面的按钮

14:39.550 --> 14:41.550
康天那

14:41.550 --> 14:42.550
不是

14:45.990 --> 14:46.990
你看

14:46.990 --> 14:47.990
点在里面的按钮

14:47.990 --> 14:49.990
相当于是点了复元素DIV

14:50.990 --> 14:52.990
而且不只是点按钮

14:52.990 --> 14:53.990
比方点空隙的地方

14:53.990 --> 14:55.990
你看是不是也会出发点击

14:55.990 --> 14:56.990
对吧

14:56.990 --> 14:57.990
因为它也是DIV的一部分

14:58.990 --> 14:59.990
但是我关不关心空隙

14:59.990 --> 15:00.990
我不关心空隙

15:00.990 --> 15:01.990
我只希望关心按钮

15:02.990 --> 15:03.990
那怎么办呢

15:04.990 --> 15:05.990
是不是

15:05.990 --> 15:06.990
因为我们知道在这个世界里面

15:06.990 --> 15:08.990
是不是可以通过Z

15:09.990 --> 15:11.990
来获取它当前点击的

15:11.990 --> 15:12.990
那个东西

15:12.990 --> 15:13.990
是不是

15:15.990 --> 15:16.990
是不是

15:17.990 --> 15:18.990
Z是不是获取

15:18.990 --> 15:19.990
当前点击的

15:19.990 --> 15:20.990
事件源

15:20.990 --> 15:21.990
不是吧

15:21.990 --> 15:22.990
Z是获取啥

15:23.990 --> 15:24.990
是获取啥

15:25.990 --> 15:27.990
永远是获取注册的一个事件对象

15:27.990 --> 15:28.990
对吧

15:28.990 --> 15:29.990
你注册的是DIV

15:29.990 --> 15:30.990
它就获取的是DIV

15:31.990 --> 15:33.990
因此Z是打不到目标的

15:33.990 --> 15:35.990
我希望知道你到底点了啥

15:35.990 --> 15:36.990
是不是要用E点target

15:37.990 --> 15:38.990
对吧

15:39.990 --> 15:40.990
要用这个玩意

15:40.990 --> 15:41.990
好我们来看一下

15:42.990 --> 15:43.990
是不是这里我就知道

15:43.990 --> 15:44.990
原来点的是按钮

15:44.990 --> 15:45.990
那点空隙呢

15:45.990 --> 15:46.990
你点的是DIV

15:46.990 --> 15:48.990
因为这里没东西了

15:48.990 --> 15:50.990
你点这个就是按钮

15:51.990 --> 15:52.990
是不是我要通过

15:52.990 --> 15:54.990
E点target来获取

15:54.990 --> 15:55.990
所以我要判断

15:55.990 --> 15:56.990
其他地方我不关心

15:56.990 --> 15:58.990
我只关心你点的是不是按钮

15:58.990 --> 15:59.990
那怎么判断

15:59.990 --> 16:00.990
E点target

16:00.990 --> 16:01.990
是不是

16:01.990 --> 16:02.990
这是一个元素

16:02.990 --> 16:04.990
我看这个元素

16:05.990 --> 16:06.990
这是个洞吗

16:06.990 --> 16:08.990
洞里边有个属性叫taglame

16:08.990 --> 16:10.990
表示

16:10.990 --> 16:12.990
标圈的名字

16:12.990 --> 16:13.990
洞里边都有这个属性

16:13.990 --> 16:15.990
E点target

16:15.990 --> 16:16.990
点

16:16.990 --> 16:17.990
taglame

16:17.990 --> 16:19.990
因为前面是个洞吗

16:19.990 --> 16:21.990
你点的是哪一个洞

16:21.990 --> 16:23.990
那么它的标圈名字是啥

16:23.990 --> 16:25.990
你看这里是点的是button

16:25.990 --> 16:26.990
大写的

16:26.990 --> 16:27.990
全是大写的标签

16:27.990 --> 16:30.990
那么这里空隙表示的是DIV

16:30.990 --> 16:31.990
所以我只要判断一下

16:31.990 --> 16:32.990
特征

16:32.990 --> 16:34.990
看看点的到底是啥东西

16:34.990 --> 16:35.990
taglame

16:35.990 --> 16:40.880
是不是等于button

16:41.880 --> 16:43.880
如果说点的是按钮的话

16:43.880 --> 16:44.880
那么就是我们要的

16:44.880 --> 16:45.880
我要干嘛

16:45.880 --> 16:49.880
我要输出这个按钮的文本innerpace

16:50.880 --> 16:52.880
空隙地方我就不要了

16:52.880 --> 16:53.880
我们看

16:53.880 --> 16:55.880
这样子的好处在于

16:55.880 --> 16:56.880
效果一样

16:56.880 --> 16:59.880
好处在于我只注册了一个函数

16:59.880 --> 17:01.880
避免了产生多个函数

17:01.880 --> 17:03.880
而且江南里边

17:03.880 --> 17:04.880
你再去加一些按钮

17:04.880 --> 17:06.880
随便什么时候加

17:06.880 --> 17:07.880
都无所谓

17:07.880 --> 17:08.880
比方说我在这里

17:08.880 --> 17:10.880
document

17:10.880 --> 17:11.880
crease

17:11.880 --> 17:12.880
elements

17:12.880 --> 17:14.880
创建一个按钮

17:15.880 --> 17:16.880
然后呢

17:16.880 --> 17:18.880
给这个按钮设置一个文本

17:18.880 --> 17:19.880
等于

17:19.880 --> 17:20.880
1000

17:20.880 --> 17:22.880
或者是2000

17:22.880 --> 17:24.880
这个按钮出来了

17:24.880 --> 17:25.880
然后把这个按钮

17:25.880 --> 17:26.880
加到div里边去

17:26.880 --> 17:27.880
container

17:28.880 --> 17:32.260
加了一个2000进去

17:32.260 --> 17:34.260
我不需要给这个按钮注册时间

17:34.260 --> 17:35.260
如果说过去那种做法

17:35.260 --> 17:36.260
我还要在这里

17:36.260 --> 17:37.260
再给他注册一个时间

17:37.260 --> 17:38.260
我现在不需要了

17:38.260 --> 17:39.260
因为我有时间委托

17:39.260 --> 17:42.260
你点它就相当于点了复原数

17:42.260 --> 17:43.260
因此它肯定是

17:43.260 --> 17:44.260
能够接受到这个时间

17:44.260 --> 17:46.260
所以点2000

17:46.260 --> 17:48.260
就可以直接有了

17:48.260 --> 17:50.260
这就是时间委托

17:50.260 --> 17:52.260
时间委托应用的场景在哪呢

17:52.260 --> 17:53.260
主要在

17:54.260 --> 17:55.260
东西很多

17:55.260 --> 17:56.260
就原数特别多

17:56.260 --> 17:57.260
还不是几个

17:57.260 --> 17:58.260
可能几百个

17:58.260 --> 17:59.260
几千个

17:59.260 --> 18:00.260
原数特别多

18:00.260 --> 18:01.260
避免产生非常多的

18:01.260 --> 18:03.260
而且这些处理方式都是一样的

18:03.260 --> 18:05.260
避免产生太多的

18:07.260 --> 18:08.260
函数

18:08.260 --> 18:10.260
为了提高效率

18:10.260 --> 18:12.260
我们给它的复原数

18:12.260 --> 18:13.260
注册事件

18:13.260 --> 18:15.260
利用冒泡这种机制

18:15.260 --> 18:17.260
来完成事件的处理

18:17.260 --> 18:18.260
这样子事件

18:18.260 --> 18:19.260
函数只有一个了

18:19.260 --> 18:22.260
第二种场景就是出现在

18:22.260 --> 18:24.260
原数里面的内容是动态的

18:24.260 --> 18:25.260
它有可能会变化

18:25.260 --> 18:27.260
一会少一个一会多一个

18:27.260 --> 18:29.260
为了避免

18:29.260 --> 18:31.260
代码不好写

18:31.260 --> 18:32.260
东西可能不多

18:32.260 --> 18:33.260
但是它里面动态的

18:33.260 --> 18:34.260
代码不好写

18:34.260 --> 18:35.260
就是每一创建一个

18:35.260 --> 18:36.260
我都要重新注册事件

18:36.260 --> 18:38.260
为了避免这种场景

18:38.260 --> 18:41.260
我们可以使用事件委托

18:41.260 --> 18:42.260
直接给复原数注册事件

18:42.260 --> 18:43.260
管理多了少了

18:43.260 --> 18:46.260
反正都是会传到复原数来

18:46.260 --> 18:47.260
用这种方式来处理

18:47.260 --> 18:49.260
这里有一个作业题

18:49.260 --> 18:50.260
这个作业题就是

18:50.260 --> 18:56.260
我们之前做过的一个例子

18:56.260 --> 18:58.260
代办诗箱这一块

18:58.260 --> 19:01.260
当时我们这一块怎么做的呢

19:01.260 --> 19:03.260
主要是这个删除这里

19:03.260 --> 19:05.260
你看下边的元素是不是动态的

19:05.260 --> 19:08.260
下边的元素是不断变化的

19:08.260 --> 19:09.260
你加一个就多一个

19:09.260 --> 19:10.260
加一个多一个

19:10.260 --> 19:11.260
我们之前咋做的呢

19:11.260 --> 19:13.260
你们要接到之前的代码写

19:13.260 --> 19:15.260
之前怎么做的

19:15.260 --> 19:16.260
我写了一个函数

19:16.260 --> 19:17.260
创建一个li

19:17.260 --> 19:18.260
对吧

19:18.260 --> 19:20.260
下面每一项就是li

19:20.260 --> 19:22.260
那么生成了一些元素在这里边

19:22.260 --> 19:23.260
是不是

19:23.260 --> 19:25.260
这里有些元素

19:25.260 --> 19:26.260
对吧

19:26.260 --> 19:27.260
那么我当时呢

19:27.260 --> 19:28.260
是创建这个

19:28.260 --> 19:29.260
Batton之后

19:29.260 --> 19:30.260
我给他注册了一个事件

19:30.260 --> 19:31.260
可以一个事件

19:31.260 --> 19:32.260
点击事件

19:32.260 --> 19:33.260
点击事件呢

19:33.260 --> 19:34.260
点击的时候

19:34.260 --> 19:35.260
我来这里移除

19:35.260 --> 19:36.260
是什么意思呢

19:36.260 --> 19:40.260
就相当于是我创建li的时候

19:40.260 --> 19:44.260
给他加事件

19:44.260 --> 19:45.260
我现在要求呢

19:45.260 --> 19:47.260
使用事件委托的方式

19:47.260 --> 19:49.260
完成删除事件

19:49.260 --> 19:50.260
那怎么做呢

19:50.260 --> 19:52.260
我就不在这里写了

19:52.260 --> 19:53.260
删除就注册删除事件

19:53.260 --> 19:54.260
不在这里写了

19:54.260 --> 19:56.260
因为我知道你管理怎么样

19:56.260 --> 19:57.260
你点这个按钮了

19:57.260 --> 19:59.260
是不是会传播到他的复原数

19:59.260 --> 20:00.260
传播到li

20:00.260 --> 20:03.260
li是不是又会传播到

20:03.260 --> 20:06.260
传播到这个ul

20:06.260 --> 20:07.260
就传播到ul

20:07.260 --> 20:10.260
我就直接给这个ul注册事件

20:10.260 --> 20:12.260
里边都全是动态的

20:12.260 --> 20:13.260
他是静态的

20:13.260 --> 20:14.260
给他注册事件

20:14.260 --> 20:16.260
那么这个ul是

20:16.260 --> 20:18.260
这个ul是

20:18.260 --> 20:19.260
这个

20:19.260 --> 20:21.260
那么现在我在下边使用事件委托

20:21.260 --> 20:22.260
给他注册事件

20:22.260 --> 20:24.260
addemons listener

20:24.260 --> 20:25.260
click

20:25.260 --> 20:28.260
因为点里边就相当于是点到外边

20:28.260 --> 20:29.260
对吧

20:29.260 --> 20:30.260
ul click

20:30.260 --> 20:31.260
我们打印一下

20:31.260 --> 20:41.290
再打印一下e.pocket

20:41.290 --> 20:42.290
好我们来看一下

20:42.290 --> 20:44.290
新建一个新建一个新建一个

20:44.290 --> 20:46.290
你看我只要点这个li

20:46.290 --> 20:47.290
是不是相当于是点了ul

20:47.290 --> 20:48.290
他告诉我

20:48.290 --> 20:50.290
你现在点的是里边的li

20:50.290 --> 20:53.290
点这个相当于是你点了里边span

20:53.290 --> 20:55.290
点这个三图相当于是点里边的button

20:55.290 --> 20:56.290
那我现在判断啥

20:56.290 --> 20:58.290
判断你是不是点了button就行了

20:58.290 --> 21:00.290
判断e.pocket

21:00.290 --> 21:01.290
tiklin

21:02.290 --> 21:04.290
等于button

21:04.290 --> 21:06.290
是不是一个按钮

21:06.290 --> 21:07.290
而你只要是按钮

21:07.290 --> 21:08.290
那我就要删除了

21:08.290 --> 21:10.290
那我怎么来删除了

21:10.290 --> 21:11.290
我只需要去删除

21:11.290 --> 21:14.290
你这个按钮所在的li就行了

21:14.290 --> 21:15.290
你看

21:15.290 --> 21:16.290
按钮的复原数

21:16.290 --> 21:17.290
是不是li

21:17.290 --> 21:18.290
我把li删除就行了

21:18.290 --> 21:20.290
因此我要拿到这个按钮的复原数

21:20.290 --> 21:22.290
e.pocket是不是按钮

21:22.290 --> 21:23.290
按钮的复原数

21:23.290 --> 21:24.290
pairment

21:24.290 --> 21:26.290
忘了去查一下文档

21:26.290 --> 21:28.290
这就拿去一个原数的复原数

21:28.290 --> 21:30.290
把这个复原数给它干掉

21:30.290 --> 21:32.290
就可以了

21:32.290 --> 21:34.290
好我们来再试一下

21:34.290 --> 21:36.290
这就使用了视线委托的方式

21:36.290 --> 21:37.290
来处理这个

21:37.290 --> 21:39.290
哎这里出了问题

21:39.290 --> 21:41.290
看一没包错

21:41.290 --> 21:42.290
没包错没包错的话

21:42.290 --> 21:43.290
我这里要打印一下了

21:43.290 --> 21:46.290
哦这里大一些

21:46.290 --> 21:49.290
看出来就算了

21:49.290 --> 21:50.290
看不出来要调试

21:50.290 --> 21:52.290
看它进一步进判断

21:52.290 --> 21:53.290
有进了判断

21:53.290 --> 21:55.290
看这里面这个东西是啥

21:55.290 --> 21:56.290
调试

21:56.290 --> 21:57.290
说完了

21:57.290 --> 21:59.290
这样的好处在于我注册的事件

21:59.290 --> 22:01.290
就一次

22:01.290 --> 22:02.290
一开始注册一个

22:02.290 --> 22:04.290
给一个人注册一个就行了

22:04.290 --> 22:05.290
那里边的就没有时间了

22:05.290 --> 22:07.290
里边干干净净的代码

22:07.290 --> 22:09.290
而且有了这种方式之后

22:09.290 --> 22:12.290
你会发现这个代码还可以减写

22:12.290 --> 22:14.290
为什么之前我要在这里面写

22:14.290 --> 22:17.290
要一个元素一个元素去创建的

22:17.290 --> 22:19.290
就是因为我要给这个Botten注册时间

22:19.290 --> 22:22.290
现在我不需要给他注册时间了

22:22.290 --> 22:24.290
也就是说啥意思呢

22:26.290 --> 22:28.290
也就是说我只要在这儿

22:28.290 --> 22:31.290
给UL的Inner a Timel

22:31.290 --> 22:34.290
加一段不就完了吗

22:34.290 --> 22:37.290
加一个制服串出去玩了

22:37.290 --> 22:39.290
能理解吗

22:39.290 --> 22:41.290
比方说我这边

22:41.290 --> 22:44.290
我这个container里边的Inner

22:44.290 --> 22:45.290
A Timel是啥

22:45.290 --> 22:47.290
是这么一坨对吧

22:47.290 --> 22:48.290
是不是这么一坨

22:48.290 --> 22:50.290
那我只需要

22:50.290 --> 22:51.290
比方说我要加一个按钮

22:51.290 --> 22:53.290
是不是我只需要给他加一个制服串

22:53.290 --> 22:55.290
Botten

22:57.290 --> 23:01.620
所以玩完之后就加了个按钮了

23:01.620 --> 23:02.620
而这个视线需要注册吗

23:02.620 --> 23:03.620
不需要

23:03.620 --> 23:04.620
因为我没有时间委托

23:04.620 --> 23:07.620
点了他就相当于点了复元素

23:07.620 --> 23:08.620
所以说这一块时间

23:08.620 --> 23:10.620
也不需要重新注册了

23:10.620 --> 23:11.620
那么这里也是一样

23:11.620 --> 23:13.620
我只需要给他加一段就不就完了吗

23:13.620 --> 23:15.620
那当然如果说我要把清空的话

23:15.620 --> 23:17.620
我就直接收他为空制服串

23:17.620 --> 23:18.620
所以就要元素清空了

23:18.620 --> 23:20.620
加一段就行了

23:20.620 --> 23:21.620
加哪一段呢

23:21.620 --> 23:23.620
就是加一个Li

23:23.620 --> 23:25.620
Li里边有个span

23:25.620 --> 23:27.620
后边有个什么button

23:27.620 --> 23:29.620
button里边写的是什么山储

23:29.620 --> 23:31.620
span里边写的是啥

23:31.620 --> 23:33.620
凭结这个内容对吧

23:33.620 --> 23:40.390
但吧是不是简介多了

23:40.390 --> 23:42.390
好咱们再试一下

23:42.390 --> 23:43.390
不一样吗

23:43.390 --> 23:45.390
之前为什么必须要用那种方式写

23:45.390 --> 23:46.390
因为用这种方式

23:46.390 --> 23:49.390
我们没有办法给这个button注册时间

23:49.390 --> 23:51.390
是不是没有办法注册时间

23:51.390 --> 23:53.390
它是制服串了

23:53.390 --> 23:55.390
因此得用刚才那种方式写

23:55.390 --> 23:57.390
一个动物对象一个动物对象的创建

23:57.390 --> 23:58.390
现在不需要了

23:58.390 --> 23:59.390
因为我用的是时间委托

23:59.390 --> 24:00.390
他不需要给他注册时间

24:00.390 --> 24:01.390
反正点了他

24:01.390 --> 24:03.390
他就会冒泡到复元素

24:03.390 --> 24:06.390
再把回去变得更加简单

24:06.390 --> 24:07.390
再说一下

24:07.390 --> 24:09.390
我们今天就是这一节课

24:09.390 --> 24:12.390
主要对我们开发的影响

24:12.390 --> 24:13.390
就是那委托

24:13.390 --> 24:14.390
什么时候用时间委托

24:14.390 --> 24:16.390
第一种情况东西特别多

24:16.390 --> 24:19.390
我避免了浪费效率

24:19.390 --> 24:22.390
因此我给复元素注册一个时间就完事了

24:22.390 --> 24:25.390
第二有些东西是动态的

24:25.390 --> 24:27.390
为了方便我们写代

24:27.390 --> 24:30.390
我们不想在动态创建元素的时候

24:30.390 --> 24:31.390
给他注册时间

24:31.390 --> 24:33.390
这些动态元素注册时间

24:33.390 --> 24:35.390
那我就直接给复元素注册时间

24:35.390 --> 24:38.390
通过一些特征来去判断

24:38.390 --> 24:40.390
你到底点了啥

24:40.390 --> 24:41.390
然后我们再说一下

24:41.390 --> 24:43.390
前边

24:43.390 --> 24:44.390
不知道同学有没有印象

24:44.390 --> 24:46.390
我们在讲那个

24:46.390 --> 24:48.390
事件内情的时候

24:48.390 --> 24:50.390
遇到过这么一个时间

24:50.390 --> 24:52.390
叫做Mouse Enter

24:52.390 --> 24:53.390
Mouse Leave

24:53.390 --> 24:56.390
表示鼠标进入元素时触发

24:56.390 --> 24:58.390
鼠标离开元素时触发

24:58.390 --> 24:59.390
还有一个Mouse Over

24:59.390 --> 25:00.390
Mouse Out

25:00.390 --> 25:02.390
它是鼠标进入元素时触发

25:02.390 --> 25:04.390
鼠标离开元素时触发

25:04.390 --> 25:06.390
它们两个的区别在于

25:06.390 --> 25:08.390
上边这两个是不冒泡的

25:08.390 --> 25:10.390
下边这两个是冒泡的

25:10.390 --> 25:12.390
那么这个是什么意思呢

25:12.390 --> 25:13.390
就是有一些特殊的事件

25:13.390 --> 25:15.390
它本身就是不冒泡的

25:15.390 --> 25:17.390
比方说我们刚才这里

25:17.390 --> 25:21.540
视线委托 打开

25:23.540 --> 25:25.540
视线传播

25:26.540 --> 25:27.540
好 这里

25:27.540 --> 25:30.540
比方说我注册的不是点击事件

25:30.540 --> 25:31.540
我是什么呢

25:31.540 --> 25:32.540
我是那个

25:33.540 --> 25:36.540
我把视线名字写在这吧

25:36.540 --> 25:38.540
或者重新拿一个

25:38.540 --> 25:41.540
叫做Mouse Enter

25:41.540 --> 25:43.540
鼠标移入事件

25:44.540 --> 25:45.540
不是点击啊

25:45.540 --> 25:46.540
是鼠标移入

25:46.540 --> 25:48.540
那么我现在不去处理补货

25:48.540 --> 25:49.540
我就看冒泡

25:50.540 --> 25:51.540
那么这里呢

25:51.540 --> 25:53.540
把它换成这个

25:54.540 --> 25:55.540
现在冒泡

25:55.540 --> 25:57.540
这个事件它是不冒泡的

25:57.540 --> 25:58.540
什么意思啊

25:58.540 --> 26:00.540
我们来看一下

26:00.540 --> 26:01.540
工作台

26:01.540 --> 26:02.540
当我移入它的时候

26:02.540 --> 26:03.540
对吧

26:03.540 --> 26:04.540
康田的鼠标移入

26:04.540 --> 26:05.540
没问题吧

26:05.540 --> 26:07.540
然后在我当我移入

26:07.540 --> 26:08.540
红色的时候

26:08.540 --> 26:10.540
按理说有事件冒泡

26:10.540 --> 26:11.540
因为移入的红色

26:11.540 --> 26:12.540
就相当于是

26:12.540 --> 26:13.540
往上冒泡

26:13.540 --> 26:15.540
又移入了康田的

26:15.540 --> 26:16.540
但是

26:16.540 --> 26:18.540
它只运行了

26:18.540 --> 26:19.540
Inner Mouse Enter

26:19.540 --> 26:20.540
它没有运行康田的

26:20.540 --> 26:21.540
说明啥

26:21.540 --> 26:23.540
说明这个事件

26:23.540 --> 26:27.620
到这个位置就截止了

26:27.620 --> 26:28.620
比方说这里移入的是

26:28.620 --> 26:30.620
移入的是Inner

26:30.620 --> 26:32.620
那么它这里就没有冒泡了

26:32.620 --> 26:34.620
没有往上冒泡了

26:34.620 --> 26:35.620
所以说服务员说

26:35.620 --> 26:36.620
它就不会再继续监听这个事件

26:36.620 --> 26:38.620
它就不会反复出发

26:38.620 --> 26:39.620
这是Mouse Enter

26:39.620 --> 26:41.620
因此的像Mouse Enter

26:41.620 --> 26:42.620
Mouse Leave

26:42.620 --> 26:44.620
这种事件

26:44.620 --> 26:47.620
它是指的是进入整个区域

26:47.620 --> 26:49.620
离开整个区域

26:50.620 --> 26:51.620
它不会冒泡的

26:51.620 --> 26:53.620
所以说我们大部分时候

26:53.620 --> 26:54.620
用这个用的比较多一点

26:54.620 --> 26:55.620
另外一种事件

26:55.620 --> 26:57.620
就是Mouse Over和Mouse Out

26:58.620 --> 27:00.620
看一下Mouse Over

27:00.620 --> 27:01.620
Out是一样的

27:01.620 --> 27:02.620
一个是移入

27:02.620 --> 27:03.620
一个是移开

27:03.620 --> 27:05.620
这个玩意是要冒泡的

27:05.620 --> 27:06.620
所以说

27:06.620 --> 27:08.620
网上有好多好多的问题

27:08.620 --> 27:09.620
这一块的问题就关于

27:09.620 --> 27:10.620
就是Mouse Over

27:10.620 --> 27:12.620
为什么反复的再触发

27:12.620 --> 27:13.620
就是因为它有事件冒泡

27:13.620 --> 27:15.620
我们来看一下吧

27:15.620 --> 27:16.620
我们现在移入复原数

27:16.620 --> 27:17.620
没问题

27:17.620 --> 27:18.620
移入复原数

27:18.620 --> 27:19.620
现在我们再移入

27:19.620 --> 27:21.620
红色的一个Inner

27:21.620 --> 27:23.620
你看复原数是不是也触发了

27:23.620 --> 27:25.620
它会反复的触发这个事件

27:25.620 --> 27:27.620
再移入这个Botten

27:27.620 --> 27:28.620
Botten触发了

27:28.620 --> 27:29.620
复原数Inner触发了

27:29.620 --> 27:30.620
Container也触发了

27:30.620 --> 27:32.620
它是会冒泡的

27:32.620 --> 27:33.620
也就是说

27:33.620 --> 27:34.620
不是所有事件都会冒泡

27:34.620 --> 27:35.620
有些特殊的事件

27:35.620 --> 27:36.620
它就不冒泡

27:36.620 --> 27:37.620
像Mouse Enter和Mouse Leave

27:37.620 --> 27:38.620
它就不冒泡

27:38.620 --> 27:39.620
就这么个区别

27:39.620 --> 27:40.620
比如说我们用的话

27:40.620 --> 27:43.620
用的比较多的是Enter和Leave

27:43.620 --> 27:44.620
这种冒泡

27:44.620 --> 27:45.620
在鼠标移入这一块

27:45.620 --> 27:48.620
其实我们不希望它冒泡

27:48.620 --> 27:49.620
好吧

27:49.620 --> 27:50.620
就这一块

27:50.620 --> 27:51.620
再说一下

27:51.620 --> 27:52.620
现在没啥了

27:52.620 --> 27:53.620
把这个练习做一下就行了

27:53.620 --> 27:54.620
体会一下事件伪图带来的好处

27:54.620 --> 27:55.620
就可以了

