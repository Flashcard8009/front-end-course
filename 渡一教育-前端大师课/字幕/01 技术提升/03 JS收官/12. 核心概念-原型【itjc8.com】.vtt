WEBVTT

00:00.000 --> 00:07.000
原型 只要我们说这个原型是什么知识呢

00:07.000 --> 00:11.000
它其实也是属于数据表达方面的知识

00:11.000 --> 00:14.000
我们上节课不是说构造函数干嘛用的

00:14.000 --> 00:16.000
帮你来创建对象 对吧

00:16.000 --> 00:20.000
让你的数据表达变得更加简洁 有力

00:20.000 --> 00:23.000
像我们一个铺客牌程序或者是一个人

00:23.000 --> 00:25.000
我们都可以通过一个构造函数简单的溜一下

00:25.000 --> 00:27.000
就可以创建一个数据了 对吧

00:27.000 --> 00:29.000
所以数据表达变得更加简洁了

00:29.000 --> 00:34.000
这些知识其实很多知识不是说要来恶心你的

00:34.000 --> 00:36.000
绝对不是这个意思

00:36.000 --> 00:42.000
只是你刚刚开始学习的时候觉得好像有点陌生 有点不熟悉

00:42.000 --> 00:47.000
只要熟悉之后你会发现这些知识都是为了简化你的操作的

00:47.000 --> 00:49.000
我们这一块讲原型

00:49.000 --> 00:53.000
其实是接着上节课讲构造函数

00:53.000 --> 00:55.000
其实也是构造函数的延伸

00:55.000 --> 00:56.000
这是什么问题呢

00:56.000 --> 00:59.000
我们来先看一下原型到底要解决什么样的问题

00:59.000 --> 01:02.000
我们这里有个构造函数比方说就是一个人

01:02.000 --> 01:07.000
我们有个构造函数可以通过他New来创建很多个对象

01:07.000 --> 01:08.000
对不对

01:08.000 --> 01:10.000
一个构造函数可以创建很多个对象

01:10.000 --> 01:12.000
比方说我们这里能随便新建一个

01:12.000 --> 01:16.000
就一个构造函数给它取名为User

01:16.000 --> 01:20.000
然后你给我什么名字 给我年龄

01:20.000 --> 01:23.000
我就创建了这么一个用户

01:30.500 --> 01:32.500
然后给他加一个函数 叫say hi

01:32.500 --> 01:34.500
打个招呼

01:34.500 --> 01:36.500
这个函数非常简单 输出

01:36.500 --> 01:43.500
你好 我是啥 今年多少岁了

01:43.500 --> 01:45.500
好 我来拼接一下

01:45.500 --> 01:47.500
像直播肉拼接 我们往往用这种

01:47.500 --> 01:49.500
我先用问号站个位置

01:49.500 --> 01:50.500
然后再把问号去掉

01:51.500 --> 01:54.500
这个地方拼接this.name

01:54.500 --> 02:00.200
然后这个地方的拼接this.age

02:03.200 --> 02:05.200
就写了这么一个构造函数

02:05.200 --> 02:06.200
有了这个构造函数之后

02:06.200 --> 02:08.200
我们之后可方便了

02:08.200 --> 02:10.200
我们之后要创建一个用户

02:10.200 --> 02:12.200
U1来创建一个用户

02:12.200 --> 02:16.200
给他一个molec 17岁

02:16.200 --> 02:18.200
再来一个U2

02:18.200 --> 02:20.200
U2来创建一个用户

02:20.200 --> 02:25.200
来一个凳户 77岁

02:25.200 --> 02:28.200
然后来一个成户 18岁

02:34.540 --> 02:36.540
于是我可以创建三个对象

02:36.540 --> 02:39.540
我们来打印U1U2U3

02:39.540 --> 02:41.540
你会发现每一个对象的里面

02:41.540 --> 02:42.540
都会有这么一些属性

02:42.540 --> 02:46.540
新名年年 函数 新名年年 方法

02:48.540 --> 02:51.540
现在有一个什么样的问题

02:51.540 --> 02:53.540
你会发现每一个对象里面

02:53.540 --> 02:55.540
会有一个say hi方法

02:55.540 --> 02:56.540
对不对 新名年年

02:56.540 --> 02:57.540
这个没什么好说的

02:57.540 --> 02:59.540
每个对象是不一样的

02:59.540 --> 03:00.540
每个人的姓名可能不一样

03:00.540 --> 03:03.540
每个人的年龄也可能不一样

03:03.540 --> 03:07.540
但是say hi打招呼函数的一样

03:08.540 --> 03:09.540
函数运行结果不一样

03:09.540 --> 03:10.540
那是正常的

03:10.540 --> 03:12.540
但是函数本身的一样

03:12.540 --> 03:13.540
你说这个函数

03:13.540 --> 03:15.540
每个人的函数不都这样写吗

03:15.540 --> 03:17.540
对不对 那有什么区别呢

03:17.540 --> 03:19.540
但是现在一样吗

03:19.540 --> 03:20.540
现在肯定不一样

03:20.540 --> 03:22.540
我们来看一下U1.say hi

03:22.540 --> 03:25.540
是不是等于U2.say hi呢

03:25.540 --> 03:28.540
force 不一样

03:28.540 --> 03:30.540
对不对 但是他们运行结果

03:30.540 --> 03:31.540
都是那套逻辑

03:31.540 --> 03:34.540
逻辑是完全一样的

03:34.540 --> 03:36.540
所以说这一块就造成了

03:36.540 --> 03:39.540
一个内存空间的浪费

03:39.540 --> 03:42.540
我们知道函数它本身也是对象

03:42.540 --> 03:45.540
这件事我们之后还会强调

03:45.540 --> 03:46.540
现在我们只需要知道

03:46.540 --> 03:48.540
函数它本身也是对象

03:48.540 --> 03:52.540
一个用户里边有一个单独的函数

03:52.540 --> 03:54.540
其实是没有必要的

03:54.540 --> 03:56.540
这种情况发生的多不多呢

03:56.540 --> 03:58.540
到处都是

03:58.540 --> 04:01.540
以后函是对象里边的方法

04:01.540 --> 04:04.540
基本上他们就是同样一种对象

04:04.540 --> 04:06.540
不要用户啊 或者是铺盖啊

04:06.540 --> 04:08.540
都是一样的

04:08.540 --> 04:09.540
逻辑权一样的

04:09.540 --> 04:11.540
完全没有必要把

04:11.540 --> 04:13.540
在每个对象里边加一个函数

04:13.540 --> 04:14.540
完全没有必要

04:14.540 --> 04:16.540
你看现在就有三个函数了

04:16.540 --> 04:17.540
U1一个函数

04:17.540 --> 04:18.540
U2一个函数

04:18.540 --> 04:19.540
U3一个函数

04:19.540 --> 04:21.540
那我们的用户是100万个

04:21.540 --> 04:23.540
那里可以想而易见

04:23.540 --> 04:25.540
可以知道这里边

04:25.540 --> 04:27.540
得有多少个相同的函数

04:27.540 --> 04:30.540
完全是内存空间的浪费

04:30.540 --> 04:33.540
所以说我们要解决这样的一个问题

04:33.540 --> 04:34.540
就要使用圆形

04:34.540 --> 04:36.540
圆形就来解决每个对象

04:36.540 --> 04:38.540
就是这个问题的

04:38.540 --> 04:39.540
好 那么我们来看

04:39.540 --> 04:41.540
圆形是如何来解决这个问题的

04:41.540 --> 04:42.540
下边有一张图

04:42.540 --> 04:45.540
这张图要像一张照片一样

04:45.540 --> 04:48.540
深深的印在你的脑海里边

04:48.540 --> 04:49.540
说到圆形

04:49.540 --> 04:52.540
脑袋里边马上就要想到这张图

04:52.540 --> 04:54.540
说到对于勾招函数

04:54.540 --> 04:56.540
你脑袋里边马上就要想象成这张图

04:56.540 --> 04:58.540
这张图非常简单

04:58.540 --> 05:00.540
它就是一个三角关系

05:00.540 --> 05:01.540
我们来看一下

05:01.540 --> 05:03.540
你把这张图认识清楚了

05:03.540 --> 05:06.540
我们这一刻的所有东西迎刃而解

05:06.540 --> 05:07.540
勾招函数是什么

05:07.540 --> 05:08.540
不用说了

05:08.540 --> 05:09.540
我们上一课讲了

05:09.540 --> 05:10.540
就是一个函数

05:10.540 --> 05:11.540
它手这么大写

05:11.540 --> 05:12.540
然后里边有烈士

05:12.540 --> 05:14.540
就表示这个对象

05:14.540 --> 05:16.540
勾招函数我们知道了

05:16.540 --> 05:18.540
什么叫实力呢

05:18.540 --> 05:19.540
实力是什么

05:19.540 --> 05:21.540
实力就是我们通过勾招函数

05:21.540 --> 05:22.540
溜出来的对象

05:22.540 --> 05:23.540
比方说这个U1

05:23.540 --> 05:24.540
我们就可以这样说

05:24.540 --> 05:26.540
这是一种说法

05:26.540 --> 05:27.540
说法就是什么说呢

05:27.540 --> 05:28.540
来描述这个代码

05:28.540 --> 05:34.540
U1是U2这个勾招函数的实力

05:34.540 --> 05:36.540
其实就是它创建出来的对象

05:36.540 --> 05:38.540
实力就这个意思

05:38.540 --> 05:40.540
实力的名字叫Instance

05:40.540 --> 05:42.540
叫Instance

05:42.540 --> 05:43.540
叫实力

05:44.540 --> 05:45.540
以后我们说

05:45.540 --> 05:46.540
实力实力是什么意思

05:46.540 --> 05:48.540
就是只用勾招函数创建的对象

05:48.540 --> 05:49.540
但是由于GS里边

05:49.540 --> 05:52.540
所有的对象都是通过溜来产生的

05:52.540 --> 05:53.540
我们上一课说了

05:53.540 --> 05:54.540
因此严格来说

05:54.540 --> 05:57.540
GS里边所有对象都称为实力

05:57.540 --> 05:58.540
所有的对象

05:58.540 --> 05:59.540
包括我们这里

05:59.540 --> 06:00.540
随便写一个obj

06:00.540 --> 06:01.540
这个玩意也是实力

06:01.540 --> 06:03.540
一个对象实力

06:03.540 --> 06:05.540
我们严格来说就是

06:05.540 --> 06:07.540
一个op几个词的实力

06:07.540 --> 06:09.540
就是一种说法而已

06:09.540 --> 06:11.540
没有什么特别的

06:11.540 --> 06:13.540
有的时候我们也说

06:13.540 --> 06:15.540
Lame是实力的

06:15.540 --> 06:17.540
比方说U1.Lame

06:17.540 --> 06:20.540
叫做实力的属性

06:20.540 --> 06:23.540
U1.A级实力的属性

06:23.540 --> 06:25.540
U1.C Hi

06:25.540 --> 06:27.540
实力方法

06:27.540 --> 06:29.540
都指的是这个意思

06:29.540 --> 06:31.540
要听得懂这些话语

06:31.540 --> 06:33.540
我们不光学习开发

06:33.540 --> 06:35.540
我们还要学习跟别人沟通

06:35.540 --> 06:37.540
以后到公司里边跟你的同事之间

06:37.540 --> 06:38.540
不然他说一套

06:38.540 --> 06:39.540
你说一套就听不懂了

06:39.540 --> 06:40.540
忽然听不懂了

06:40.540 --> 06:42.540
所以我们得有一套

06:42.540 --> 06:43.540
统一的说辞

06:43.540 --> 06:45.540
就是实力方法

06:45.540 --> 06:46.540
就这么个意思

06:46.540 --> 06:48.540
我们也可以统称为

06:48.540 --> 06:50.540
Lame这个A级这个C Hi

06:50.540 --> 06:52.540
统称为实力的成员

06:52.540 --> 06:54.540
都是实力里边的东西

06:54.540 --> 06:56.540
就这么个意思

06:56.540 --> 06:58.540
这是实力的概念

06:58.540 --> 06:59.540
实力理解清楚了吧

06:59.540 --> 07:00.540
勾到函数什么叫勾到函数

07:00.540 --> 07:01.540
什么叫实力

07:01.540 --> 07:03.540
实力就是通过6来创建出来的

07:03.540 --> 07:04.540
对不对

07:04.540 --> 07:06.540
关键是这边两个

07:06.540 --> 07:07.540
这两个是啥玩意

07:07.540 --> 07:09.540
我来先说这个

07:09.540 --> 07:10.540
勾到Type叫什么意思呢

07:10.540 --> 07:12.540
叫做圆形

07:12.540 --> 07:13.540
它其实是啥

07:13.540 --> 07:16.540
它其实是函数的一个属性

07:16.540 --> 07:17.540
因为函数本身

07:17.540 --> 07:19.540
它其实就是对象

07:19.540 --> 07:21.540
只不过这个对象很特别

07:21.540 --> 07:23.540
它要通过这种方式来调用

07:23.540 --> 07:24.540
对吧

07:24.540 --> 07:25.540
不过它也是对象

07:25.540 --> 07:26.540
它可以往里边加东西的

07:26.540 --> 07:29.540
比方说我们这里先开一个文件

07:29.540 --> 07:31.540
有一个函数A

07:31.540 --> 07:33.540
然后我往这个函数里边

07:33.540 --> 07:35.540
加上一个A等于1

07:35.540 --> 07:36.540
可不可以可以

07:36.540 --> 07:37.540
真的是可以的

07:37.540 --> 07:39.540
只为打印的时候

07:39.540 --> 07:40.540
它告诉你它是一个函数

07:40.540 --> 07:42.540
它也是个对象

07:42.540 --> 07:44.540
对象里面有一个属性A等于1

07:44.540 --> 07:47.540
然后你还可以往里边加一个B等于2

07:47.540 --> 07:48.540
你还可以往里边加一个C

07:48.540 --> 07:49.540
还可以得用一个函数

07:49.540 --> 07:50.540
都可以

07:50.540 --> 07:53.540
你把它想象成一个对象就行了

07:53.540 --> 07:56.540
A等于1B等于2C是一个函数

07:56.540 --> 07:58.540
这函数本身它也是对象

07:58.540 --> 08:00.540
那么这里要说什么呢

08:00.540 --> 08:01.540
函数里边

08:01.540 --> 08:02.540
它有一个默认的属性

08:02.540 --> 08:03.540
这属性一写函数

08:03.540 --> 08:05.540
它马上就自带的

08:05.540 --> 08:06.540
什么属性呢

08:06.540 --> 08:08.540
叫做Prototype

08:08.540 --> 08:09.540
这里没有打印出来

08:09.540 --> 08:10.540
但实际上是存在的

08:10.540 --> 08:11.540
Prototype

08:11.540 --> 08:12.540
你看

08:12.540 --> 08:13.540
就这个属性

08:13.540 --> 08:15.540
每一个函数都有

08:15.540 --> 08:16.540
管理是不是构造函数

08:16.540 --> 08:18.540
只不过我们通常的原型

08:18.540 --> 08:19.540
这个叫原型

08:19.540 --> 08:20.540
这个原型属性

08:20.540 --> 08:23.540
我们往往是构造函数才用

08:23.540 --> 08:24.540
其他函数

08:24.540 --> 08:25.540
有没有一有

08:25.540 --> 08:26.540
但是我们不用它

08:26.540 --> 08:27.540
没它意义

08:27.540 --> 08:29.540
主要是构造函数用它

08:29.540 --> 08:30.540
这就是原型

08:30.540 --> 08:31.540
原型是啥

08:31.540 --> 08:33.540
原型就是函数里边一个属性

08:33.540 --> 08:34.540
它Protive

08:34.540 --> 08:35.540
它是一个空对象

08:35.540 --> 08:37.540
它是个对象

08:37.540 --> 08:38.540
这就是原型

08:38.540 --> 08:40.540
这一步复杂吗

08:40.540 --> 08:41.540
不复杂

08:41.540 --> 08:43.540
函数里边一个属性叫Prototype

08:43.540 --> 08:44.540
它就是一个对象

08:44.540 --> 08:45.540
一个空对象

08:45.540 --> 08:47.540
好

08:47.540 --> 08:49.540
这个是啥东西呢

08:49.540 --> 08:50.540
实际里边你会发现

08:50.540 --> 08:51.540
它也有一个属性

08:51.540 --> 08:53.540
叫两个下滑线Prototype

08:53.540 --> 08:54.540
两个下滑线

08:54.540 --> 08:57.540
这个叫做引式原型

08:57.540 --> 08:59.540
叫引式原型

08:59.540 --> 09:01.540
它指向谁呢

09:01.540 --> 09:03.540
它指向的是

09:03.540 --> 09:05.540
构造函数的原型

09:05.540 --> 09:07.540
这就是个三角关系

09:07.540 --> 09:08.540
把这当图

09:08.540 --> 09:10.540
深深的印在你的牢牌里边

09:10.540 --> 09:11.540
啥意思呢

09:11.540 --> 09:12.540
比方说我们这里

09:12.540 --> 09:13.540
一点页是里边

09:13.540 --> 09:15.540
你看这个U1是实力吧

09:15.540 --> 09:16.540
对不对

09:16.540 --> 09:17.540
是不是实力

09:17.540 --> 09:18.540
实力不是有一个属性

09:18.540 --> 09:19.540
叫Protive吗

09:19.540 --> 09:20.540
对不对

09:20.540 --> 09:22.540
是叫Protive

09:22.540 --> 09:23.540
好

09:23.540 --> 09:24.540
那么这个玩意

09:24.540 --> 09:26.540
其实就是User

09:26.540 --> 09:29.540
它的构造函数的Prototype

09:29.540 --> 09:31.540
它们两个是一样的

09:31.540 --> 09:33.540
输出

09:33.540 --> 09:36.540
你看是不是一样的

09:36.540 --> 09:38.540
就这个意思

09:38.540 --> 09:39.540
好

09:39.540 --> 09:40.540
那么这个玩意

09:40.540 --> 09:41.540
有啥用呢

09:41.540 --> 09:42.540
引式原型

09:42.540 --> 09:43.540
听清楚

09:43.540 --> 09:44.540
看下边这句话

09:44.540 --> 09:45.540
两句话很重要

09:45.540 --> 09:48.540
当访问实力成员的时候

09:48.540 --> 09:50.540
先找自身

09:50.540 --> 09:51.540
如果不存在

09:51.540 --> 09:52.540
则自动的

09:52.540 --> 09:54.540
从引式原型中寻找

09:54.540 --> 09:55.540
这啥意思啊

09:55.540 --> 09:57.540
啥意思

09:57.540 --> 09:58.540
比方说

09:58.540 --> 09:59.540
User

09:59.540 --> 10:00.540
它是不是还说

10:00.540 --> 10:01.540
是还说它就有原型

10:01.540 --> 10:02.540
Prototype

10:02.540 --> 10:04.540
只要是还说就有原型

10:05.540 --> 10:06.540
好

10:06.540 --> 10:07.540
我们来看一下

10:07.540 --> 10:08.540
是不是空对对象

10:08.540 --> 10:09.540
那既然它是空对对象

10:09.540 --> 10:10.540
我能不能往里边加东西

10:10.540 --> 10:12.540
就是我能不能

10:12.540 --> 10:15.540
我能不能把东西往这里边放

10:15.540 --> 10:16.540
对象肯定可以放

10:16.540 --> 10:17.540
放任何属性都可以

10:17.540 --> 10:18.540
对吧

10:18.540 --> 10:19.540
那我给它放一个A

10:19.540 --> 10:20.540
来看一下

10:20.540 --> 10:21.540
User

10:21.540 --> 10:22.540
Prototype

10:22.540 --> 10:23.540
它是对象吗

10:23.540 --> 10:24.540
对象里边是不是

10:24.540 --> 10:25.540
给它加个属性A

10:25.540 --> 10:26.540
再加个属性B

10:27.540 --> 10:28.540
我们来输出一下

10:30.540 --> 10:31.540
User.Prototype

10:32.540 --> 10:33.540
A等于B等于E

10:33.540 --> 10:34.540
那么现在就是

10:34.540 --> 10:35.540
往这个里边放了一个什么

10:35.540 --> 10:36.540
放了一个A

10:36.540 --> 10:37.540
再放了一个B

10:38.540 --> 10:39.540
然后我们再看实力

10:39.540 --> 10:40.540
那实力的

10:40.540 --> 10:42.540
通过实力的引式原型

10:42.540 --> 10:43.540
是不是也可以找到它

10:43.540 --> 10:44.540
那也就是说

10:44.540 --> 10:45.540
我们实力

10:46.540 --> 10:47.540
通过这个U1

10:50.540 --> 10:52.540
U1.2个下滑线Prototype

10:52.540 --> 10:53.540
是不是也可以找到它

10:53.540 --> 10:54.540
是一样的嘛

10:54.540 --> 10:55.540
对吧

10:56.540 --> 10:57.540
懂了意思吗

10:57.540 --> 10:58.540
你都可以想象

10:58.540 --> 11:00.540
这个网页就是里面存的是一个什么

11:00.540 --> 11:01.540
存的是个地址

11:01.540 --> 11:02.540
地址它指向这个对象

11:03.540 --> 11:04.540
User.Prototype

11:04.540 --> 11:05.540
也是一个地址

11:05.540 --> 11:06.540
这个地址指

11:06.540 --> 11:07.540
也是指向这个对象

11:07.540 --> 11:08.540
那么一个东西

11:09.540 --> 11:10.540
好那么接下来

11:10.540 --> 11:11.540
这句话很重要

11:11.540 --> 11:14.540
就是当访问实力成员的时候

11:14.540 --> 11:15.540
先找自身

11:15.540 --> 11:16.540
如果不存在

11:16.540 --> 11:19.540
则自动的从引式原型中寻找

11:19.540 --> 11:20.540
比方说

11:20.540 --> 11:23.540
我现在去访问U1.A

11:23.540 --> 11:24.540
啥意思

11:24.540 --> 11:27.540
我要从U1实力里面去找

11:27.540 --> 11:28.540
有没有A这个属性

11:28.540 --> 11:29.540
对吧

11:29.540 --> 11:30.540
如果说找到了

11:30.540 --> 11:31.540
那就找到了

11:31.540 --> 11:32.540
找不到的话

11:32.540 --> 11:35.540
它会自动的从引式原型上

11:35.540 --> 11:36.540
从这里去找

11:37.540 --> 11:38.540
懂了意思吧

11:38.540 --> 11:39.540
那么现在的同学们看一下

11:39.540 --> 11:40.540
这个U1.A

11:40.540 --> 11:41.540
我输出的话

11:41.540 --> 11:42.540
应该输出啥

11:43.540 --> 11:44.540
是输出undefined的呢

11:44.540 --> 11:45.540
还是输出E

11:47.540 --> 11:48.540
那肯定输出E嘛

11:48.540 --> 11:49.540
为啥呀

11:49.540 --> 11:51.540
U1里面有没有A这个属性

11:51.540 --> 11:52.540
没有

11:52.540 --> 11:53.540
它只有这三个属性

11:54.540 --> 11:55.540
对不对

11:55.540 --> 11:56.540
那自己没有

11:56.540 --> 11:57.540
自己没有怎么办

11:57.540 --> 11:58.540
到引式原型上找

11:58.540 --> 12:00.540
而引式原型上面是不是有

12:00.540 --> 12:01.540
在引式原型上面

12:01.540 --> 12:03.540
我说给它放了一个A

12:03.540 --> 12:05.540
于是它会输出E

12:05.540 --> 12:07.540
就这么个E是

12:08.540 --> 12:10.540
那又啥E呢

12:10.540 --> 12:12.540
看着问题就解决了

12:12.540 --> 12:13.540
这样一来

12:13.540 --> 12:15.540
我们可以把那些公共的成员

12:15.540 --> 12:17.540
放到函数的圆形中

12:17.540 --> 12:19.540
即可以被所有实力共享

12:19.540 --> 12:20.540
你看下面这张图

12:20.540 --> 12:22.540
还是那个U2

12:22.540 --> 12:23.540
我现在做了什么

12:23.540 --> 12:24.540
我把这个C high

12:24.540 --> 12:26.540
它就没有把它放到这里边

12:26.540 --> 12:29.540
就没有给每一个对象里边加一个C high

12:29.540 --> 12:31.540
而我是把它放到圆形上

12:31.540 --> 12:32.540
因为它们都一样的嘛

12:32.540 --> 12:33.540
对吧

12:33.540 --> 12:34.540
放到圆形上

12:34.540 --> 12:35.540
因此呢

12:35.540 --> 12:37.540
这样子通过这个勾造

12:37.540 --> 12:38.540
函数创建的每一个对象

12:38.540 --> 12:40.540
它不是有个引式原型吗

12:40.540 --> 12:41.540
自动的指向这个原型

12:41.540 --> 12:42.540
对吧

12:42.540 --> 12:44.540
所以说他们去用这个C high的时候

12:44.540 --> 12:45.540
发现自己没有

12:45.540 --> 12:47.540
自己没有它就会从这里边去找

12:47.540 --> 12:49.540
所以就共享一个成员了

12:49.540 --> 12:51.540
它就是用来做这个事情的

12:51.540 --> 12:52.540
因此呢

12:52.540 --> 12:54.540
我们这里要怎么来改这个代码

12:54.540 --> 12:56.540
我是把要把这个C high

12:56.540 --> 12:59.540
放到U字的Prototype里边

12:59.540 --> 13:00.540
C high

13:00.540 --> 13:02.540
就是把这个放过来就完事了

13:02.540 --> 13:04.540
放过来的ZS

13:04.540 --> 13:05.540
ZS没问题

13:05.540 --> 13:07.540
以后我们会专门来说ZS

13:07.540 --> 13:09.540
这里只需要知道没问题就行了

13:09.540 --> 13:11.540
跟这里的ZS是一样的

13:11.540 --> 13:12.540
好

13:12.540 --> 13:13.540
那么放过来了

13:13.540 --> 13:14.540
放过来过后你看一下

13:14.540 --> 13:15.540
现在呢

13:15.540 --> 13:17.540
每一个对象里边

13:17.540 --> 13:18.540
我们打印U1

13:18.540 --> 13:19.540
U2U3

13:19.540 --> 13:21.540
因为发现它没有那个方法了

13:21.540 --> 13:22.540
没有C high的方法了

13:22.540 --> 13:24.540
它方法在哪儿啊

13:24.540 --> 13:25.540
方法在哪儿

13:25.540 --> 13:27.540
在引式原型上边

13:27.540 --> 13:29.540
所以说我们能不能用C high

13:29.540 --> 13:30.540
可以

13:30.540 --> 13:32.540
你看是不是可以用U2.C high

13:32.540 --> 13:33.540
就是也可以用

13:33.540 --> 13:34.540
这样子我们就会

13:34.540 --> 13:37.540
节约大量的内存

13:37.540 --> 13:39.540
我们再看U1.C high

13:39.540 --> 13:41.540
是不是等于U2.C high呢

13:41.540 --> 13:43.540
肯定是相等的

13:43.540 --> 13:44.540
现在就相等的

13:44.540 --> 13:45.540
他们是一个东西

13:45.540 --> 13:46.540
为啥呢

13:46.540 --> 13:48.540
因为U1.C high

13:48.540 --> 13:50.540
U2.C high不都是这个玩意嘛

13:50.540 --> 13:51.540
对不对

13:51.540 --> 13:53.540
所以说现在问题就解决了

13:53.540 --> 13:54.540
因此呢

13:54.540 --> 13:55.540
我们这几课说了半天

13:55.540 --> 13:56.540
绕过来绕过去

13:56.540 --> 13:58.540
要出的事情其实非常简单

13:58.540 --> 13:59.540
你们将来在写

13:59.540 --> 14:01.540
这个构造函数的时候

14:01.540 --> 14:02.540
通常情况下

14:02.540 --> 14:04.540
对象里边的所有方法

14:04.540 --> 14:05.540
实力方法

14:05.540 --> 14:08.540
全部放到原型上边

14:08.540 --> 14:09.540
就做这件事

14:09.540 --> 14:10.540
它有一个方法放进去

14:10.540 --> 14:11.540
有两个方法呢

14:11.540 --> 14:12.540
先接着来呗

14:12.540 --> 14:13.540
对吧

14:13.540 --> 14:14.540
方法二

14:14.540 --> 14:15.540
它等于什么东西

14:15.540 --> 14:16.540
就是我们对象里边的

14:16.540 --> 14:19.540
所有方法都放到原型上边

14:19.540 --> 14:21.540
基本上我工作了

14:21.540 --> 14:23.540
我去开发有这么多年了

14:23.540 --> 14:25.540
有十年年了

14:25.540 --> 14:27.540
目前几乎

14:27.540 --> 14:29.540
不论说百分之百

14:29.540 --> 14:31.540
U2非常非常少

14:31.540 --> 14:34.540
基本上99.999%

14:34.540 --> 14:35.540
这个构造函数的方法

14:35.540 --> 14:36.540
就实力方法

14:36.540 --> 14:38.540
都是放到原型上边的

14:38.540 --> 14:39.540
其实呢

14:39.540 --> 14:40.540
我们在浏览期呢

14:40.540 --> 14:41.540
看这件事呢

14:41.540 --> 14:42.540
还看得更加清楚一点

14:42.540 --> 14:43.540
比方说我们把这段代码

14:43.540 --> 14:44.540
写到浏览期里边

14:44.540 --> 14:45.540
因为浏览期

14:45.540 --> 14:46.540
可以在控制台里边

14:46.540 --> 14:48.540
用结构化的方式来

14:48.540 --> 14:49.540
看这个对象

14:49.540 --> 14:50.540
好

14:50.540 --> 14:51.540
我们来看一下

14:51.540 --> 14:53.540
这个U1

14:53.540 --> 14:54.540
U1

14:54.540 --> 14:55.540
U1是不是一个U2

14:55.540 --> 14:56.540
它有两个属性

14:56.540 --> 14:59.540
A级Name放大一点

14:59.540 --> 15:00.540
你看

15:00.540 --> 15:01.540
下面是不是一个隐私原型

15:01.540 --> 15:03.540
它的隐私原型写出来是这样子

15:03.540 --> 15:04.540
如果说一些

15:04.540 --> 15:06.540
老一点的版本的浏览期

15:06.540 --> 15:07.540
它就是两个下发线

15:07.540 --> 15:08.540
现在它把这个名字

15:08.540 --> 15:09.540
改了一下

15:09.540 --> 15:10.540
不过两个下发线

15:10.540 --> 15:11.540
这样可以用

15:11.540 --> 15:12.540
放到这了

15:12.540 --> 15:13.540
你看是不是

15:13.540 --> 15:14.540
这是一个原型

15:14.540 --> 15:15.540
它里边有个C hi

15:15.540 --> 15:16.540
其他的不用管

15:16.540 --> 15:17.540
其他的不用管

15:17.540 --> 15:18.540
有个C hi

15:18.540 --> 15:19.540
就这么简单

15:19.540 --> 15:21.540
然后我们来看一下U字

15:21.540 --> 15:23.540
U字它打印出来是个对象

15:23.540 --> 15:25.540
我们要用这种方式

15:25.540 --> 15:27.540
Console DIR

15:27.540 --> 15:28.540
就是用对象的模式

15:28.540 --> 15:30.540
把函数打印出来

15:30.540 --> 15:32.540
把U字打印出来

15:32.540 --> 15:33.540
你看一下

15:33.540 --> 15:35.540
U字里边是不是一个Prototype

15:35.540 --> 15:36.540
这个玩意

15:36.540 --> 15:37.540
跟刚才的隐私原型

15:37.540 --> 15:38.540
是不是一样的

15:38.540 --> 15:39.540
对吧

15:39.540 --> 15:40.540
是不是一样的

15:40.540 --> 15:41.540
就这么个意思

15:41.540 --> 15:43.540
所以我们这几课说来说去

15:43.540 --> 15:45.540
这么一个简单的道理

15:45.540 --> 15:46.540
就是把一个对象

15:46.540 --> 15:47.540
新创建的对象的

15:47.540 --> 15:48.540
那些实力函数

15:48.540 --> 15:49.540
全部都放到

15:49.540 --> 15:50.540
原型上面

15:50.540 --> 15:51.540
让它们共享

15:51.540 --> 15:52.540
这样子可以解约

15:52.540 --> 15:53.540
很多的内存空间

15:54.540 --> 15:55.540
就说这个

15:56.540 --> 15:57.540
因此我们来看一下

15:57.540 --> 15:58.540
练习题

15:58.540 --> 15:59.540
练习题

15:59.540 --> 16:00.540
这就一道题

16:00.540 --> 16:02.540
就把之前上节课

16:02.540 --> 16:04.540
做了一个铺刻排程去

16:04.540 --> 16:06.540
使用原型重构

16:06.540 --> 16:07.540
用原型的方式

16:07.540 --> 16:08.540
来把它写好一点

16:08.540 --> 16:09.540
那怎么写呢

16:09.540 --> 16:10.540
就非常简单

16:10.540 --> 16:12.540
这里不是一个Print函数

16:12.540 --> 16:13.540
对吧

16:13.540 --> 16:14.540
你要做的事情

16:14.540 --> 16:15.540
就是把这个Poker

16:15.540 --> 16:17.540
Prototype

16:17.540 --> 16:19.540
因为最终结构是完全一样的

16:19.540 --> 16:20.540
最终结构是完全一样的

16:20.540 --> 16:22.540
在内存上

16:22.540 --> 16:23.540
获到了很多的优化

16:23.540 --> 16:25.540
我们把这个函数

16:25.540 --> 16:27.540
就直接复制一下吧

16:27.540 --> 16:29.540
给它写一个Print

16:29.540 --> 16:34.030
就这里去删了

16:34.030 --> 16:35.030
不要了

16:36.030 --> 16:37.030
看到没

16:37.030 --> 16:38.030
就是把代码

16:38.030 --> 16:39.030
改造一下就完事了

16:40.030 --> 16:41.030
好 下面一个Dec

16:41.030 --> 16:42.030
Dec这个函数

16:42.030 --> 16:43.030
这个函数不是

16:43.030 --> 16:44.030
也有个函数

16:44.030 --> 16:45.030
Print

16:45.030 --> 16:46.030
那么这个实力函数

16:46.030 --> 16:47.030
让我们把它加到Dec

16:47.030 --> 16:49.030
Prototype里边

16:49.030 --> 16:51.030
Print

16:51.030 --> 16:55.200
这就完了

16:55.200 --> 16:57.200
那最终结构是完全一样的

16:57.200 --> 16:59.200
不影响结构

16:59.200 --> 17:00.200
就是用过去那种写法

17:00.200 --> 17:02.200
不是说功能完不成

17:02.200 --> 17:03.200
功能是完全一样的

17:03.200 --> 17:04.200
只剩了不好

17:04.200 --> 17:05.200
就是原型

17:05.200 --> 17:07.200
就是在做这么一件事的

17:07.200 --> 17:08.200
因此

17:08.200 --> 17:10.200
对我们开发而言

17:10.200 --> 17:11.200
意义就在这了

17:11.200 --> 17:12.200
就是

17:12.200 --> 17:13.200
我们把一些公共成员

17:13.200 --> 17:14.200
往里边放

17:14.200 --> 17:16.200
不停的往里边放

17:16.200 --> 17:17.200
就这么简单

17:17.200 --> 17:19.200
他到时候找的时候

17:19.200 --> 17:20.200
先找自己

17:20.200 --> 17:21.200
自己没有就去找他

17:21.200 --> 17:23.200
这是关于这个原型

