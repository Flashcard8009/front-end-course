WEBVTT

00:00.110 --> 00:05.830
OK 从这就开始 我们会陆陆续续的介绍一些

00:05.830 --> 00:08.830
咱们开发中遇到了一些小问题

00:08.830 --> 00:12.070
其实我们到现在的知识已经学的差不多了

00:12.070 --> 00:16.710
就是有一些小问题我们需要一些小技巧才能解决

00:16.710 --> 00:19.310
这小问题它不涉及到新的知识

00:19.310 --> 00:22.710
但是如果说不讲的话 同学们遇到这样的问题的话

00:22.710 --> 00:24.350
也是束手无策的

00:24.350 --> 00:28.270
好 我们看第一个小问题也是一个非常非常经典的问题

00:28.430 --> 00:31.110
面试体冻也会经常出现

00:31.110 --> 00:36.030
比方说像这道题 我们要再做这么一件事

00:36.030 --> 00:43.830
我要写一个循环 每一次循环 比方说循环个三次

00:43.830 --> 00:47.030
每一次循环 我想做这么一件事

00:47.030 --> 00:49.270
我想开一个计时器

00:49.270 --> 00:54.910
这个计时器在一秒钟之后输出一个i

00:55.110 --> 00:56.190
我们来看一下

00:56.190 --> 00:58.750
这timeout 然后计时器

00:58.750 --> 01:02.350
我们开一个一秒钟 计时器

01:02.350 --> 01:06.470
我希望在一秒钟之后来输出这个变量i

01:06.470 --> 01:08.070
也就是我希望是什么呢

01:08.070 --> 01:12.350
我希望一秒钟之后输出一个零一二

01:12.350 --> 01:14.550
我想做这么一件事

01:14.550 --> 01:17.110
所以这里我们可以非常容易想到

01:17.110 --> 01:18.550
我们就输出i就可以了

01:18.550 --> 01:21.430
那真的能达到我们想要的效果吗

01:21.630 --> 01:22.590
我们这样子做的话

01:22.590 --> 01:24.150
它能输出零一二吗

01:24.150 --> 01:25.310
一秒钟之后

01:25.310 --> 01:27.310
好 我们来看一下

01:27.310 --> 01:29.310
运行你会发现一秒钟之后

01:29.310 --> 01:31.870
它输出了三个三

01:31.870 --> 01:33.350
那么这是怎么造成的呢

01:33.350 --> 01:36.310
其实我们之前的知识完全可以解释

01:37.510 --> 01:39.670
我们看一下 这里是有一个函数

01:39.670 --> 01:42.470
对吧 这个函数里面用到了一个i

01:42.470 --> 01:45.550
这个i是这个函 这个作用域

01:45.550 --> 01:47.350
它是属于这个函数的

01:47.350 --> 01:48.590
还是属于全局的

01:49.550 --> 01:51.310
是不是属于全局的

01:51.310 --> 01:53.750
对吧 那么这里实际上就有个b包

01:53.750 --> 01:57.790
就在这个函数里面用到了y部的东西

01:57.790 --> 02:00.910
它不是属于这个函数自己的东西

02:00.910 --> 02:02.350
而我们全局作用域里面

02:02.350 --> 02:03.150
就这个作用域里面

02:03.150 --> 02:05.430
它的y乘作用域里面有一个i

02:05.430 --> 02:07.590
那么这个i呢

02:07.590 --> 02:09.270
我们写到是循环里面

02:09.270 --> 02:10.950
但实际上我们知道

02:10.950 --> 02:12.590
在一个作用域里面

02:12.590 --> 02:15.350
所有的变量它都会有提升

02:15.350 --> 02:18.550
也就是这个i实际上是这样子的

02:18.590 --> 02:19.950
在这里定义了一个i

02:19.950 --> 02:22.990
然后在这里把它复制从零开始复制

02:22.990 --> 02:24.990
它相当于是这样的一个代码

02:24.990 --> 02:28.870
因此的y乘作用域里面只有一个i

02:28.870 --> 02:30.150
它不是每次循环一个i

02:30.150 --> 02:31.390
每次循环一个i

02:31.390 --> 02:33.230
如果说每次循环一个i的话

02:33.230 --> 02:35.230
这个问题就解决了

02:35.230 --> 02:36.190
就没有这样的问题了

02:36.190 --> 02:39.070
就是因为它只有一个i

02:39.070 --> 02:41.110
所以说我们再来读一下这个代码

02:41.110 --> 02:42.990
循环三次

02:42.990 --> 02:46.510
每一次循环开一个计时器

02:46.510 --> 02:48.070
开了几个计时器

02:48.110 --> 02:50.710
是不是开了三个计时器

02:50.710 --> 02:54.550
当这三个计时器时间到达之后

02:54.550 --> 02:56.470
是不是会运行这个函数

02:56.470 --> 02:57.710
输出哪个i

02:57.710 --> 02:59.430
输出外边这个i

02:59.430 --> 03:01.550
而外边这个i的值是多少呢

03:01.550 --> 03:04.790
这个代码你要这么理解

03:04.790 --> 03:07.470
马上开始运行代码定义了一个i

03:07.470 --> 03:09.150
然后循环

03:09.150 --> 03:11.430
循环这个i从零开始

03:11.430 --> 03:12.630
开了一个计时器

03:12.630 --> 03:14.230
计时器1

03:14.230 --> 03:15.590
然后马上它不会等了

03:15.590 --> 03:16.550
不会说等一秒钟

03:16.550 --> 03:17.790
我再去继续循环

03:18.750 --> 03:20.430
咱们戒指还记得吗

03:20.430 --> 03:21.790
说的是一步的

03:21.790 --> 03:23.150
一步语言

03:23.150 --> 03:24.750
那么这个一步语言呢

03:24.750 --> 03:25.870
它不会等待

03:25.870 --> 03:27.390
所以马上进行下一次循环

03:27.390 --> 03:28.390
i等于1

03:28.390 --> 03:31.790
然后又开了一个计时器2

03:31.790 --> 03:33.550
然后马上又进入下一次循环

03:33.550 --> 03:34.430
i等于2

03:34.430 --> 03:36.870
又开了一个计时器3

03:36.870 --> 03:38.270
然后既然马上进入下次循环

03:38.270 --> 03:39.070
i等于3

03:39.070 --> 03:39.910
等于3的时候

03:39.910 --> 03:41.430
是不是循环条件不满足

03:41.430 --> 03:43.110
整个程序结束了

03:43.110 --> 03:45.510
就是三个计时器还在那一计时

03:45.510 --> 03:46.870
一秒钟之后

03:46.910 --> 03:47.990
是不是时间到来了

03:47.990 --> 03:50.270
输出了i就全部输出了3

03:51.470 --> 03:53.550
所以说这个问题就造成这么一个问题

03:54.510 --> 03:56.230
那么这个问题如何解决呢

03:56.230 --> 03:57.590
如果说我们在希望

03:57.590 --> 04:00.510
在循环里边要做这么一件事

04:01.830 --> 04:02.790
怎么来解决这个问题

04:04.230 --> 04:05.430
那么我们要解决问题

04:05.430 --> 04:06.790
首先前提条件

04:06.790 --> 04:09.590
我们要知道这个问题产生的原因

04:09.590 --> 04:10.590
原因是什么

04:10.590 --> 04:13.230
是因为我这里使用了壁包

04:13.230 --> 04:13.510
对吧

04:13.510 --> 04:14.390
也不算使用的壁包

04:14.390 --> 04:15.470
就是这么一个现象

04:15.510 --> 04:17.190
我使用了歪层的东西

04:17.190 --> 04:18.430
而歪层的东西只有一个

04:19.870 --> 04:21.630
那这里有两种解决办法

04:22.550 --> 04:23.590
第一种解决办法

04:24.510 --> 04:27.350
就是不要让它没歪层的东西只有一个

04:27.350 --> 04:30.150
我希望每一次循环产生一个i

04:31.710 --> 04:32.310
懂了意思吧

04:32.310 --> 04:34.150
每一次循环是一个独立的i

04:34.150 --> 04:35.630
那这样就没问题了

04:35.630 --> 04:36.990
但这种解决办法呢

04:36.990 --> 04:40.270
你们以后要学的ES6之后才能做到

04:40.270 --> 04:41.030
目前做不到

04:41.030 --> 04:42.950
因为目前的作用率只有两个

04:42.950 --> 04:44.150
一个是全局

04:44.150 --> 04:45.230
一个是函数

04:45.430 --> 04:46.750
没有别的作用率了

04:46.750 --> 04:47.950
学的ES6之后

04:47.950 --> 04:49.390
这里其实解决办法很简单

04:49.390 --> 04:52.830
你只要把这个vark变成nets就可以了

04:52.830 --> 04:54.990
因为nets它支持快体作用率

04:54.990 --> 04:56.430
它多了一种作用率

04:56.430 --> 04:58.230
每一次循环它是一个独立的i

04:58.230 --> 04:58.710
那你看

05:00.190 --> 05:01.550
是不是就解决了这个问题

05:01.550 --> 05:03.550
这是最简单的解决办法

05:03.550 --> 05:04.590
同学们如果说

05:04.590 --> 05:06.270
在前期在学习的时候

05:06.270 --> 05:07.710
学习这一块的时候

05:07.710 --> 05:09.550
如果说实在不好理解

05:09.550 --> 05:11.510
我一会讲了第二种解决办法

05:11.510 --> 05:12.670
那么就可以使用这种

05:12.670 --> 05:14.950
这种办法是非常完美的

05:15.070 --> 05:17.030
当然这个东西以后也要学习

05:17.030 --> 05:17.830
那我想问了

05:17.830 --> 05:20.030
这个既然这么简单就可以解决了

05:20.030 --> 05:21.830
那为什么我还要学别的呢

05:21.830 --> 05:23.270
主要是面试题

05:23.270 --> 05:24.590
一是面试题

05:24.590 --> 05:28.310
二是这个玩意儿有些旧的

05:28.310 --> 05:29.550
非常老旧的系统中

05:29.550 --> 05:31.270
你可以看到别人这么写

05:31.270 --> 05:32.830
你要能看得懂

05:32.830 --> 05:34.790
你自己写的话肯定用这种方式了

05:34.790 --> 05:36.310
以后

05:36.310 --> 05:38.430
但是另一种写法你得看得懂

05:38.430 --> 05:39.030
好吧

05:39.030 --> 05:39.830
我们再来看

05:41.110 --> 05:42.910
那如果说我要用第二种解决办法

05:42.910 --> 05:44.230
怎么办呢

05:44.270 --> 05:46.590
那这个i就不能用外边的

05:46.590 --> 05:48.190
它就不能用外边的这个i了

05:48.190 --> 05:50.190
它必须要用自己的i

05:50.190 --> 05:54.510
也就是我要把这个i放到一个作用域里边

05:54.510 --> 05:56.190
它不能放到这里的

05:56.190 --> 05:56.830
放到这里的话

05:56.830 --> 05:57.990
这个就没法玩了

05:57.990 --> 05:58.670
这个事情

05:58.670 --> 05:59.910
我希望什么呢

05:59.910 --> 06:01.990
我希望每一次循环

06:01.990 --> 06:05.430
产生一个新的作用域

06:05.430 --> 06:08.550
这个作用域里边作用域中

06:08.550 --> 06:11.790
有一个变量

06:11.790 --> 06:12.950
或者是什么玩意儿

06:12.990 --> 06:13.910
或者是其他

06:15.350 --> 06:22.420
值和这一次循环的i相同

06:23.700 --> 06:24.820
比方说什么意思呢

06:24.820 --> 06:26.940
我就希望在每第一次循环的时候

06:26.940 --> 06:28.180
产生一个东西

06:28.180 --> 06:29.820
不管这个东西比方说是一个a

06:29.820 --> 06:31.540
然后它的值跟i相同

06:32.380 --> 06:34.700
然后第二次循环又产生一个a

06:34.700 --> 06:35.940
然后跟i相同

06:35.940 --> 06:37.460
第三次循环又产生一个a

06:37.460 --> 06:38.860
每次产生都不一样

06:38.860 --> 06:40.460
那你能定一个a吗

06:40.460 --> 06:40.980
肯定不行

06:40.980 --> 06:42.620
因为定一个a它又提升了

06:42.660 --> 06:44.620
它还是给你提到这儿来了

06:44.620 --> 06:46.540
所以说我这里不能使用

06:46.540 --> 06:47.580
当前这个作用域了

06:47.580 --> 06:49.500
我只能产生一个新的作用域

06:50.540 --> 06:52.380
那我们纪念室里边只用两种作用域

06:52.380 --> 06:54.740
除了产生新的作用域要用什么

06:54.740 --> 06:55.820
是不是要用函数

06:56.940 --> 07:00.220
于是我就想到这么一种办法

07:00.220 --> 07:02.220
我写一个函数

07:02.220 --> 07:04.620
help我就写个辅助函数

07:05.340 --> 07:06.980
传一个变量进来

07:06.980 --> 07:08.300
传一个变量进来

07:09.100 --> 07:10.420
那么比方说我每一次

07:10.420 --> 07:11.820
雕用一下这个函数

07:12.500 --> 07:13.940
把这个i传进去

07:13.940 --> 07:16.460
是不是相当于是把这个i给了这个a

07:16.460 --> 07:17.020
对吧

07:17.020 --> 07:18.420
第一次雕用

07:18.420 --> 07:19.420
那么就是help

07:20.140 --> 07:21.180
1对吧

07:21.180 --> 07:22.580
第二次雕用help2

07:23.300 --> 07:24.980
第三次雕用help3

07:24.980 --> 07:26.980
那么每一次雕用是不是这个a

07:26.980 --> 07:28.180
它都不一样啊

07:28.180 --> 07:28.540
对吧

07:28.540 --> 07:29.620
因为函数的执行期间

07:29.620 --> 07:32.180
每一次执行它里边的所有变量都不一样的

07:32.180 --> 07:33.540
都要重新来一次

07:33.540 --> 07:35.140
所以说这样子呢

07:35.140 --> 07:37.020
我就解决这个问题了

07:37.020 --> 07:37.980
把作用预改了

07:37.980 --> 07:38.380
对吧

07:38.380 --> 07:40.020
把这个我不再使用这个i了

07:40.020 --> 07:41.500
而使用这个a

07:41.540 --> 07:43.500
那么我这个函数里边写啥呢

07:44.500 --> 07:45.100
就写这个

07:46.220 --> 07:46.940
那么这样子呢

07:46.940 --> 07:48.220
我把它改成a

07:48.220 --> 07:49.260
这样子一来了

07:49.260 --> 07:50.180
是不是就

07:50.180 --> 07:51.180
我里边用的是啥

07:51.180 --> 07:52.940
用的就是这个东西了

07:52.940 --> 07:54.660
是不是用了这个函数的作用预了

07:54.660 --> 07:54.820
对吧

07:54.820 --> 07:56.860
就没有再用拳句这个i了

07:56.860 --> 07:57.660
懂了意思吧

07:57.660 --> 07:58.820
所以解决这个问题了

07:58.820 --> 07:59.380
你来看一下

08:00.620 --> 08:01.580
012就解决了

08:02.700 --> 08:05.060
那么这个写法是没问题的

08:05.060 --> 08:06.100
这也是一种解决办法

08:06.100 --> 08:08.660
当然我在这也是一样的

08:08.660 --> 08:09.220
完全一样的

08:09.220 --> 08:10.540
没有什么区别

08:10.540 --> 08:12.300
好好去梳理一下

08:12.300 --> 08:13.740
这样子每一次循环

08:14.380 --> 08:15.540
调用一次函数

08:16.420 --> 08:18.500
而每一次函数的a是不一样的

08:18.500 --> 08:18.700
对吧

08:18.700 --> 08:20.420
第一次那么a等于1

08:20.420 --> 08:21.860
就这个这一次调用a等于1

08:21.860 --> 08:23.660
这一次调用a等于2

08:23.660 --> 08:24.740
这一次调用a等于3

08:24.740 --> 08:26.140
三个a虽然是一样的

08:26.140 --> 08:26.780
名字影响

08:26.780 --> 08:29.180
但是他们是不同环境里边了

08:29.180 --> 08:30.940
我们学过那个什么

08:30.940 --> 08:32.580
执行上下文对不对

08:32.580 --> 08:34.460
那么每一个都是不同的上下文

08:34.460 --> 08:35.300
所以说他名字影响

08:35.300 --> 08:37.060
但是每一次a是不一样的

08:37.060 --> 08:38.260
那这里呢

08:38.260 --> 08:39.580
计时器里边要用到a

08:39.580 --> 08:40.500
那每一次用到的

08:40.500 --> 08:41.820
比方第一个计时器

08:41.820 --> 08:43.980
用到的是什么计时器

08:43.980 --> 08:44.700
输出的是什么

08:44.700 --> 08:45.940
输出的是e

08:45.940 --> 08:46.980
输出的是0

08:46.980 --> 08:48.220
对吧

08:48.220 --> 08:49.100
第二个计时器

08:50.140 --> 08:51.260
一哈输出

08:51.260 --> 08:53.020
应该是012

08:54.260 --> 08:55.220
那么第二个计时器

08:55.220 --> 08:56.420
它输出的是e

08:56.420 --> 08:58.740
第三个计时器输出的12

08:59.580 --> 09:00.580
就达成这么一个效果了

09:01.660 --> 09:02.380
有的时候呢

09:02.380 --> 09:04.060
我们觉得这个函数

09:04.060 --> 09:05.340
没有什么别的作用

09:05.340 --> 09:07.060
因为我们知道函数的作用是什么

09:07.100 --> 09:09.060
e是来降低我们系统的复杂度

09:09.980 --> 09:11.020
它降低复杂度吗

09:11.020 --> 09:11.460
没有

09:11.460 --> 09:13.260
它没有这个含义

09:13.260 --> 09:14.220
第二个作用呢

09:14.220 --> 09:15.380
是提取重复代码

09:15.380 --> 09:16.420
它提取重复代码嘛

09:16.420 --> 09:17.220
也没有

09:17.220 --> 09:18.500
它只是为了解决一个

09:18.500 --> 09:21.220
作用域产生的问题而已

09:21.220 --> 09:21.700
所以说呢

09:21.700 --> 09:23.100
我们没有必要单独的

09:23.100 --> 09:24.860
去定义一个函数

09:24.860 --> 09:26.700
我们往往会这么写

09:26.700 --> 09:29.300
我直接在这里写一个函数表达式

09:32.570 --> 09:34.490
直接写个函数表达式

09:34.490 --> 09:35.450
那么把这个表达式

09:35.450 --> 09:36.370
立即调用

09:36.530 --> 09:38.090
我们之前讲的立即执行函数

09:40.090 --> 09:40.930
无非就是改一个作用域

09:40.930 --> 09:42.290
一看我们之前

09:42.290 --> 09:43.170
全地级执行函数

09:43.170 --> 09:43.970
那里怎么说的

09:44.890 --> 09:46.650
我们为什么要用立即执行函数

09:46.650 --> 09:49.010
为了避免全球变成污染

09:49.010 --> 09:49.170
对吧

09:49.170 --> 09:50.210
这是一个方面

09:50.210 --> 09:52.250
那其实就是改变它的作用域

09:52.250 --> 09:54.970
函数我们以后需要改变作用域的地方

09:54.970 --> 09:56.570
我们都可以使用一个立即执行函数

09:57.810 --> 09:59.170
那么我们马上调用它

09:59.170 --> 09:59.570
对吧

09:59.570 --> 10:01.890
那么这个玩意就相当于是定义了一个

10:01.890 --> 10:03.170
HELP函数

10:03.170 --> 10:04.210
这个玩意把它扩一下

10:04.210 --> 10:05.490
当成一个表达式

10:05.570 --> 10:07.650
这个玩意就相当于是调用函数

10:07.650 --> 10:08.890
传一个参数进去

10:08.890 --> 10:09.450
i

10:09.450 --> 10:09.850
对吧

10:09.850 --> 10:12.290
那么就相当于是把这个i传递给了谁

10:12.290 --> 10:13.570
传递给了这个a

10:13.570 --> 10:13.730
对吧

10:13.730 --> 10:14.690
就一样的嘛

10:14.690 --> 10:17.290
也就是把函数定义直接放到这儿

10:17.290 --> 10:19.490
然后调用它传过来

10:19.490 --> 10:19.850
对吧

10:19.850 --> 10:21.650
那我们就把个代码放过来

10:23.530 --> 10:24.170
不要这个HELP

10:25.170 --> 10:26.210
这样子也可以

10:28.210 --> 10:34.170
有的时候我们保持代码的可阅读性

10:34.170 --> 10:36.690
或者是保持格式统一

10:36.690 --> 10:37.850
所以我们有的时候

10:37.850 --> 10:41.250
会把这个参数名跟改成跟i一样的参数名

10:42.650 --> 10:43.010
对吧

10:43.010 --> 10:43.810
因为我们知道

10:43.810 --> 10:45.050
这里桌用域里边

10:45.050 --> 10:45.930
这里用i

10:45.930 --> 10:46.810
这个函数有i吗

10:46.810 --> 10:47.130
没有

10:47.130 --> 10:48.050
它就从y成长

10:48.050 --> 10:49.690
y成长是不是找到这个i了

10:49.690 --> 10:51.330
那么这个i跟这个i也不一样

10:51.330 --> 10:52.610
都不一样

10:52.610 --> 10:52.770
对吧

10:52.770 --> 10:53.850
完全不一样

10:53.850 --> 10:55.530
这个i跟这个i也不一样

10:55.530 --> 10:56.530
也不一样

10:56.530 --> 10:57.890
这个i是传递的参数

10:57.890 --> 11:00.730
传递的把这个i的值传递过去

11:00.730 --> 11:01.930
是y成的i

11:01.970 --> 11:04.170
那么这里边的参数i

11:04.170 --> 11:06.210
是这个函数里边作用域的i

11:06.210 --> 11:08.530
就跟那个一把换成成a就一样的

11:08.530 --> 11:09.490
就是这么个道理

11:09.490 --> 11:11.490
是把名字给它换成同名的名字

11:12.610 --> 11:13.850
不说别的

11:13.850 --> 11:15.250
如果说这个写法

11:15.250 --> 11:17.010
你觉得很恶心

11:17.010 --> 11:18.330
不要说里面觉得很恶心的

11:18.330 --> 11:19.730
袁老师也觉得很恶心

11:19.730 --> 11:21.450
以前没办法

11:21.450 --> 11:25.770
不是我想起是没办法只能这样子弄

11:27.010 --> 11:28.090
但现在呢

11:29.050 --> 11:31.850
只要精神方面

11:31.850 --> 11:32.890
就是身体方面

11:32.890 --> 11:34.810
但凡有正常一点的本人

11:34.810 --> 11:36.610
他都不会许写这种代码了

11:36.610 --> 11:37.730
而会用这种方式

11:37.730 --> 11:40.690
以后你们学习es6就知道这个东西是啥了

11:40.690 --> 11:41.730
它就是定义辩量

11:41.730 --> 11:43.570
但是它会产生一个新的作用域

11:43.570 --> 11:44.650
就是跨地作用域

11:44.650 --> 11:46.010
每一次一个i

11:46.010 --> 11:47.210
那么你们现在只要知道

11:47.210 --> 11:47.970
遇到这种情况

11:47.970 --> 11:49.410
只要把这里干成nit

11:49.410 --> 11:50.530
就可以了

11:50.530 --> 11:52.490
现在都是用这种办法处理的

11:52.490 --> 11:54.010
不会再用这种办法了

11:54.010 --> 11:56.170
但是我们这一块学习

11:56.290 --> 11:58.570
主要是一是为了应对面试题

11:58.570 --> 12:01.570
第二是看到一些机务系统里面这种写法

12:01.570 --> 12:02.850
你要知道它在干嘛

12:02.850 --> 12:05.410
它为啥要这样子写

12:05.410 --> 12:07.130
其实你们以后写在吧

12:07.130 --> 12:09.850
不会用这种方式来写吧

12:09.850 --> 12:12.610
这是这个例子

12:12.610 --> 12:14.050
那么再来看一个例子

12:14.050 --> 12:16.130
刚才我只是开了一个计时器

12:16.130 --> 12:20.090
但是如果说我要做这么一件事

12:20.090 --> 12:21.130
我们第二个写了一篇

12:24.530 --> 12:30.330
这个DNA里面有很多的按钮

12:30.330 --> 12:32.330
我们来看一下

12:32.330 --> 12:34.250
我们这里写10个按钮

12:34.250 --> 12:38.290
每个按钮写上一个按钮

12:38.290 --> 12:47.250
就写出来了这么10个按钮

12:47.250 --> 12:49.770
这个按钮我想做这么一件事

12:49.770 --> 12:51.650
点第1个按钮输出0

12:51.770 --> 12:53.490
点第2个按钮输出1

12:53.490 --> 12:54.970
就一次内推

12:54.970 --> 12:56.210
那这个代码怎么写呢

12:56.210 --> 12:58.170
我们可以有两种写法

12:58.170 --> 13:01.090
这两种写法我都给大家演示一遍

13:01.090 --> 13:04.850
第1种写法使用事件委托

13:04.850 --> 13:05.370
对不对

13:05.370 --> 13:07.050
是不是可以使用事件委托

13:07.050 --> 13:08.290
那么我们可以拿到什么

13:08.290 --> 13:13.010
container document queries negative

13:13.010 --> 13:16.450
container

13:16.450 --> 13:17.370
这里没有换行

13:17.370 --> 13:18.770
只是我这里排不下了

13:18.770 --> 13:20.130
换行了

13:20.130 --> 13:21.290
拿到container过后

13:21.290 --> 13:23.410
我们是不是给他注册点击事件

13:23.410 --> 13:23.730
对吧

13:23.730 --> 13:27.110
unclick

13:27.110 --> 13:28.430
注册点击事件

13:28.430 --> 13:29.150
点击的时候

13:29.150 --> 13:32.430
我看你是不是点的按钮

13:32.430 --> 13:33.510
talking

13:33.510 --> 13:35.990
technique

13:35.990 --> 13:37.910
是不是等于button

13:37.910 --> 13:38.150
好

13:38.150 --> 13:40.110
如果说是按钮的话

13:40.110 --> 13:42.150
那么我们这里是不是可以拿到

13:42.150 --> 13:43.110
你当前的按钮

13:43.110 --> 13:43.510
对吧

13:43.510 --> 13:44.590
怎么拿1点talking

13:44.590 --> 13:45.830
特别

13:45.830 --> 13:46.030
好

13:46.030 --> 13:46.630
来看一下

13:48.630 --> 13:50.190
听过了

13:50.190 --> 13:50.950
我们点这

13:50.950 --> 13:51.750
是不是点DIV

13:51.750 --> 13:52.470
没问题

13:52.510 --> 13:54.990
点这个空隙是不是也点了DIV没问题

13:54.990 --> 13:56.070
但我们点了按钮之后

13:56.070 --> 13:56.630
你看

13:56.630 --> 13:58.550
是不是他知道点了是这个按钮

13:58.550 --> 13:59.950
那我点这个按钮

13:59.950 --> 14:01.950
他就知道你点了是这个按钮

14:01.950 --> 14:03.230
那么现在要达到一个效果

14:03.230 --> 14:05.310
就是你点第1个按钮输出0

14:05.310 --> 14:06.510
第2个按钮输出1

14:06.510 --> 14:08.510
第3个按钮输出2

14:08.510 --> 14:11.830
那这怎么做呢

14:11.830 --> 14:14.990
其实我是不是就要看你点的那个按钮

14:14.990 --> 14:18.750
在它的指援数中处于第几个

14:18.750 --> 14:19.230
对吧

14:19.230 --> 14:21.270
那这里需要一些想象力

14:21.270 --> 14:23.510
我怎么样知道你是第几个按钮

14:23.510 --> 14:24.310
我来点的是

14:25.470 --> 14:27.310
我这里有这么一个东西

14:27.310 --> 14:29.310
就是康天那里面不是一个q准吗

14:29.310 --> 14:29.710
对吧

14:29.710 --> 14:30.510
q准

14:30.510 --> 14:31.910
是不是它的指援数

14:32.750 --> 14:34.950
这个玩意拿到的是一个伪数组

14:35.950 --> 14:39.070
我现在是不是可以把它转换成数组

14:39.070 --> 14:39.590
对不对

14:40.310 --> 14:41.430
怎么转换成数组

14:41.430 --> 14:43.670
是不是用那个二位

14:44.750 --> 14:48.110
PortoTapSnessCore

14:48.750 --> 14:49.230
对吧

14:49.230 --> 14:50.550
把这个玩意儿放进去

14:50.550 --> 14:51.830
把伪数组放进去

14:51.950 --> 14:53.950
这样子它返回的就是一个帧数组

14:55.150 --> 14:56.830
就q准

14:56.830 --> 14:57.910
拿一个帧数组

14:57.910 --> 14:59.110
我们打印一下

14:59.110 --> 15:00.030
q准

15:03.020 --> 15:03.500
点按钮

15:03.500 --> 15:04.780
是不是拿到一个帧数组

15:04.780 --> 15:05.300
对吧

15:05.300 --> 15:06.260
有10个按钮

15:06.700 --> 15:08.500
那我要看我点的那个按钮

15:08.500 --> 15:10.380
在这个数组中施战第几个

15:10.380 --> 15:12.100
是不是就可以用index

15:12.100 --> 15:13.420
数组里面会有一个方法吗

15:13.420 --> 15:14.940
所以为什么要把它转成帧数组

15:14.940 --> 15:16.580
就像利用数组里面的方法

15:16.580 --> 15:17.700
index

15:18.380 --> 15:18.980
二

15:19.900 --> 15:20.220
是吧

15:20.220 --> 15:21.500
数组里面有这么一个方法

15:21.980 --> 15:24.380
你要看一下某一个元数

15:24.380 --> 15:26.060
它在这个数组中是第几个

15:26.060 --> 15:28.900
我要看它在这个数组里面是第几个

15:28.900 --> 15:30.020
是不是返回一个下标

15:30.620 --> 15:31.060
对吧

15:31.060 --> 15:31.700
好

15:31.700 --> 15:33.380
然后我们输出这个下标就可以了

15:33.380 --> 15:34.820
下标就是我们想要的值

15:36.500 --> 15:36.780
好

15:36.780 --> 15:38.660
这里点第一个0

15:38.660 --> 15:39.660
第二个1

15:39.660 --> 15:39.980
2

15:39.980 --> 15:41.700
你看是不是一式内推

15:41.700 --> 15:41.940
好

15:41.940 --> 15:43.740
这是一种解决办法

15:43.740 --> 15:44.860
用事件委托

15:45.820 --> 15:46.940
第二种解决办法

15:46.940 --> 15:49.340
就要运用到我们这节课学到新知识

15:50.220 --> 15:51.260
也不是新知识

15:51.300 --> 15:52.500
就小技巧

15:52.500 --> 15:54.220
就是我不用事件委托

15:54.220 --> 15:57.580
而是我要给每一个按钮去注册事件

15:57.580 --> 15:58.660
那我要说我们这里的

15:58.660 --> 15:59.660
拿到所有的按钮

16:00.660 --> 16:01.540
Documents 可以称

16:01.540 --> 16:02.500
snake.o

16:02.500 --> 16:02.940
bottom

16:04.500 --> 16:04.740
好

16:04.740 --> 16:07.500
于是我在这里循环注册事件

16:07.500 --> 16:08.700
小ebitance

16:08.700 --> 16:09.260
第二

16:10.020 --> 16:10.700
第二nance

16:12.700 --> 16:13.460
i加加

16:15.500 --> 16:15.740
好

16:15.740 --> 16:17.780
每一次循环我要干嘛呀

16:17.780 --> 16:20.460
我是不是要注册一个事件给这个按钮

16:20.620 --> 16:22.380
每一次循环是不是拿到一个按钮

16:22.380 --> 16:23.460
拿到按钮之后

16:23.460 --> 16:24.780
我要注册事件

16:24.780 --> 16:25.860
我可以用add

16:25.860 --> 16:26.500
ebitance

16:26.500 --> 16:27.500
也可以用onclick

16:27.500 --> 16:28.060
都想啊

16:28.060 --> 16:28.900
这个无所谓的

16:29.740 --> 16:31.060
反正注册事件过后

16:31.060 --> 16:32.380
我要干嘛

16:32.380 --> 16:33.660
点第一个按钮

16:33.660 --> 16:34.420
我就输出1

16:34.420 --> 16:38.220
那我这里是不是非常非常想手都不由自主的

16:38.220 --> 16:39.460
想输出这个i

16:39.460 --> 16:39.940
对吧

16:40.900 --> 16:42.420
但是能达到吗

16:42.420 --> 16:42.900
达不到

16:42.900 --> 16:44.220
就出问题了

16:44.220 --> 16:44.380
好

16:44.380 --> 16:45.620
我们来看一下

16:45.620 --> 16:46.740
点第一个按钮输出10

16:46.740 --> 16:47.540
第二个按钮输出10

16:47.540 --> 16:50.140
点所有的按钮都输出10

16:50.180 --> 16:51.980
那么这是怎么回事呢

16:51.980 --> 16:55.420
我们又用刚才的那个逻辑来梳理一下

16:55.420 --> 16:57.660
i的值是不是全局作用预的

16:57.660 --> 16:58.060
对吧

16:58.060 --> 16:59.420
反正是外层作用预嘛

16:59.420 --> 17:00.460
它的一开始的值呢

17:00.460 --> 17:01.140
是零

17:01.140 --> 17:02.100
它只有一个i

17:02.100 --> 17:02.940
它不是多个i

17:02.940 --> 17:04.620
不是每次循环一个i

17:04.620 --> 17:05.100
好

17:05.100 --> 17:07.060
i的用零的时候是不是循环一次

17:07.060 --> 17:07.940
说

17:07.940 --> 17:09.060
以第一个按钮呢

17:09.060 --> 17:11.060
我注册一个事件啊

17:11.060 --> 17:13.380
按钮1的事件

17:13.380 --> 17:14.780
注册的一个事件

17:14.780 --> 17:15.620
要输出什么

17:15.620 --> 17:16.620
输出i

17:16.620 --> 17:16.860
对吧

17:16.860 --> 17:17.820
点击后输出i

17:17.820 --> 17:18.460
现在输出吗

17:18.460 --> 17:19.540
现在不输出

17:19.580 --> 17:21.420
点击之后才输出i

17:21.420 --> 17:21.660
好

17:21.660 --> 17:22.620
一次内推

17:22.620 --> 17:24.420
然后接下来i等于1

17:24.420 --> 17:26.500
是不是按钮2的

17:26.500 --> 17:28.820
按钮2的事件也要输出i

17:28.820 --> 17:30.380
然后呢i等于2

17:30.380 --> 17:31.340
又循环一次

17:31.340 --> 17:34.460
按钮3的事件也要输出i

17:34.460 --> 17:35.860
是不是都是输出i啊

17:35.860 --> 17:37.100
那么一次内推一次

17:37.100 --> 17:37.940
到了多少

17:37.940 --> 17:39.020
到了10

17:39.020 --> 17:39.700
到了10

17:39.700 --> 17:41.940
是不是条件不满足了

17:41.940 --> 17:43.140
它一共就10个

17:43.140 --> 17:43.460
对吧

17:43.460 --> 17:44.220
i等于10的时候

17:44.220 --> 17:45.980
是不是条件不满足

17:45.980 --> 17:46.740
好i就

17:46.740 --> 17:48.220
那么程序就结束了

17:48.220 --> 17:48.980
程序结束过后

17:48.980 --> 17:52.660
当我有一天点击按钮1

17:52.660 --> 17:53.620
是不是输出i

17:53.620 --> 17:54.540
i是多少

17:54.540 --> 17:56.300
是10

17:56.300 --> 17:58.180
那就是产生了一个问题

17:58.180 --> 17:59.620
那么这个问题如何解决呢

17:59.620 --> 18:00.460
还是一样

18:00.460 --> 18:02.460
要么就把这个地方换成内置

18:02.460 --> 18:05.540
让每一次循环都不一样

18:05.540 --> 18:07.100
那么这样子怎么来解释呢

18:07.100 --> 18:09.220
就是一开始i为0

18:09.220 --> 18:10.420
对吧

18:10.420 --> 18:14.460
那么按钮1的事件就输出i等于0的

18:14.460 --> 18:15.780
这一次循环里面的i

18:15.780 --> 18:17.380
因为每一次循环i都不一样

18:17.420 --> 18:19.500
我们用一个

18:21.180 --> 18:22.060
我们这样子写吧

18:22.060 --> 18:22.500
输出i

18:22.500 --> 18:23.580
那i等于1的时候

18:23.580 --> 18:24.500
它不会改变i

18:24.500 --> 18:25.900
每一次循环都不一样的

18:25.900 --> 18:26.660
都是不同的i

18:26.660 --> 18:27.820
我用两个i嘛

18:27.820 --> 18:29.860
来表示第二次循环

18:29.860 --> 18:31.660
那么就输出的是这个

18:31.660 --> 18:33.300
第三次循环

18:34.500 --> 18:35.620
它输出的是这个

18:35.620 --> 18:37.140
每一次循环实际上是不一样的

18:37.140 --> 18:38.260
只不过名字一样

18:38.260 --> 18:39.580
它实际上是不一样的

18:39.580 --> 18:40.940
那么这就解决了这个问题了

18:40.940 --> 18:42.300
非常简单对吧

18:43.500 --> 18:44.900
好你看

18:44.900 --> 18:45.540
说就解决了

18:45.540 --> 18:47.020
非常轻松就可以搞定了

18:47.060 --> 18:48.100
这是第一种办法

18:48.100 --> 18:50.660
以后里面都是用这种办法来解决问题的

18:50.660 --> 18:52.100
好第二种办法呢

18:52.100 --> 18:54.940
就是使用立即执行函数

18:54.940 --> 18:57.460
在这里创造一个作用语

18:57.460 --> 18:59.100
也不是就是个作用语的问题嘛

18:59.100 --> 18:59.540
对吧

18:59.540 --> 19:01.300
这个作用语它只有一个

19:01.300 --> 19:03.540
那我每一次循环给你创建一个作用语

19:03.540 --> 19:05.180
那是不是就立即执行函数

19:05.180 --> 19:06.660
而且第二种解决了你写书了

19:06.660 --> 19:08.380
也并不复杂

19:08.380 --> 19:09.500
先给我拿两个小货号

19:09.500 --> 19:10.940
来两个小货号

19:10.940 --> 19:12.180
然后那第一个小货号里边

19:12.180 --> 19:13.220
立即执行函数嘛

19:13.220 --> 19:14.060
写上这么一个函数

19:15.060 --> 19:17.700
我这个函数里边要控制哪个月

19:17.700 --> 19:19.460
我要产生哪个东西

19:19.460 --> 19:20.620
是不是产生i的作用语

19:20.620 --> 19:22.100
那这里就写i

19:22.100 --> 19:23.100
或者写a的也行

19:23.100 --> 19:24.060
写别的别的也行

19:24.060 --> 19:26.980
那么那个函数里边就要交用a了

19:26.980 --> 19:28.700
你一般就写i

19:28.700 --> 19:29.820
跟那个外成了

19:29.820 --> 19:31.620
要封装的作用语是一样的

19:31.620 --> 19:34.140
然后把y成了i传进去

19:34.140 --> 19:35.580
那么之后在这个函数里边

19:35.580 --> 19:36.980
用的就是这个i了

19:36.980 --> 19:38.060
是这里边的i

19:38.060 --> 19:40.060
每一次循环都会产生一个函数

19:40.060 --> 19:42.820
每一个函数都会有一个新的作用语

19:42.980 --> 19:43.820
其实道理呢

19:43.820 --> 19:44.740
跟刚才的道理

19:44.740 --> 19:46.020
这里换成net

19:46.020 --> 19:47.380
道理是一样的

19:47.380 --> 19:49.140
都是为了产生一个新的作用语

19:49.140 --> 19:51.300
不然问题就解决不了

19:51.300 --> 19:52.540
好 我们来看一下

19:52.540 --> 19:55.020
0 1 2 3 4

19:55.020 --> 19:57.060
这就可以了

19:57.060 --> 20:00.060
这种写法我要要求你至少能看得懂

20:00.060 --> 20:01.420
懂得它的什么意识

20:01.420 --> 20:03.380
它写下来是有点恶心

20:03.380 --> 20:06.460
但是你得知道它什么意识能看得懂

20:06.460 --> 20:07.380
我们这节课呢

20:07.380 --> 20:08.500
遇到这一块的问题

20:08.500 --> 20:10.820
都会用这种写法

20:10.860 --> 20:12.820
后面我们肯定是用这种

20:12.820 --> 20:14.100
把这里看成net

20:14.100 --> 20:16.820
这节课我会用这种写法

20:16.820 --> 20:19.820
好 来我们看一下这里的练习题

20:19.820 --> 20:20.900
这个练习题呢

20:20.900 --> 20:22.500
同学们要拿出

20:22.500 --> 20:25.220
拿到你们之前

20:25.220 --> 20:28.180
ATM4SS做的那个项目

20:28.180 --> 20:29.460
就是小米商城

20:29.460 --> 20:31.540
这个项目

20:31.540 --> 20:31.980
这些课呢

20:31.980 --> 20:33.820
我们要完成用介石

20:33.820 --> 20:36.380
来完成这一块功能

20:36.380 --> 20:37.140
这个banner

20:37.140 --> 20:38.940
这个横幅区域

20:38.940 --> 20:41.340
可以切换可以点击切换

20:41.340 --> 20:42.980
我要做这么一件事

20:42.980 --> 20:44.620
好 这里做的过程中

20:44.620 --> 20:46.540
当然我们会用到之前的指使

20:46.540 --> 20:49.740
顺带就复习总结了

20:49.740 --> 20:50.740
我们做的过程中

20:50.740 --> 20:53.420
会遇到今天所说的问题

20:53.420 --> 20:55.300
好 我们来看一下这一块区域

20:55.300 --> 20:55.820
这一块区域呢

20:55.820 --> 20:57.420
我们再来认识一下

20:57.420 --> 20:58.780
我们的ATM在吗

20:58.780 --> 21:01.700
因为好久也没弄了

21:01.700 --> 21:02.620
好 我们来看一下

21:02.620 --> 21:04.460
横幅区域呢

21:04.460 --> 21:06.100
中间无非就是一个A元数

21:06.100 --> 21:07.060
对吧 一个A元数

21:07.060 --> 21:08.580
有一个图片

21:08.620 --> 21:09.740
对吧 中间就是个A元数

21:09.740 --> 21:10.820
一个图片

21:10.820 --> 21:13.340
然后呢 有一个nav

21:13.340 --> 21:14.420
一个right

21:14.420 --> 21:16.900
就这个 这个和这个

21:16.900 --> 21:17.580
对吧

21:17.580 --> 21:19.780
然后呢 下面有个banner dot

21:19.780 --> 21:21.500
这里有三个span元数

21:21.500 --> 21:23.940
三个span元数就在这

21:23.940 --> 21:24.860
对吧

21:24.860 --> 21:27.900
好 然后如果说某一个是选中的

21:27.900 --> 21:30.180
就表示这个状态

21:30.180 --> 21:31.900
选中的状态

21:31.900 --> 21:32.780
OK 这个区域呢

21:32.780 --> 21:34.140
ATM就很简单了

21:34.140 --> 21:35.500
左边的菜单不用管

21:35.500 --> 21:38.180
左边菜单跟我们这就可没关系

21:38.300 --> 21:39.420
它就完事了

21:39.420 --> 21:41.220
那么接下来我们怎么来玩这个事呢

21:42.820 --> 21:45.380
首先这种横幅区域啊

21:45.380 --> 21:48.540
到底要显示哪张图片

21:48.540 --> 21:50.100
图片的超链接地址是啥

21:50.100 --> 21:52.220
你看这个图片是不是有个超链接

21:52.220 --> 21:54.060
超链接的地址是啥

21:54.060 --> 21:55.940
实际上是动态的

21:55.940 --> 21:57.620
它不是说静态的摆在这了

21:57.620 --> 21:59.100
那将来如果说我要切换的话

21:59.100 --> 22:00.980
就不是很好切换

22:00.980 --> 22:02.660
所以它有可能是动态的

22:02.660 --> 22:04.380
有可能有三张

22:04.380 --> 22:05.340
有可能有四张

22:05.340 --> 22:07.180
比方说像我们今天

22:07.220 --> 22:08.660
当时做的时候只有三张

22:08.660 --> 22:10.380
你看今天就有四张了

22:10.380 --> 22:11.660
你看图片是不是变了

22:12.540 --> 22:14.300
对吧 图片都有变化

22:14.300 --> 22:15.620
就这么个意思

22:15.620 --> 22:19.300
因此这一块我们不能把它写死

22:19.300 --> 22:20.500
我们应该用什么

22:20.500 --> 22:24.060
用介石动态生成

22:24.060 --> 22:26.460
介石动态生成这个区域

22:26.460 --> 22:28.420
好 那么接下来我们来看一下介石

22:28.420 --> 22:30.020
我已经在页面上了

22:30.020 --> 22:31.460
去引用那个介石

22:32.700 --> 22:34.260
Banner叫介石

22:34.260 --> 22:35.020
在这里面

22:35.060 --> 22:37.060
你们拿到练习题之后也有这个介石

22:38.060 --> 22:40.340
好 我们打开这个介石看一下

22:40.340 --> 22:42.420
这个介石我用了一个立即执行函数

22:42.420 --> 22:43.700
因为我避免

22:43.700 --> 22:46.220
将来我们还会为这个页面写一些介石

22:46.220 --> 22:49.740
因此为了避免那个全局污染

22:49.740 --> 22:52.140
所以说我给它写了一个立即执行函数

22:52.140 --> 22:53.820
所以立即执行函数包一下

22:53.820 --> 22:57.140
这样子里面的所有辨量都不会污染全局了

22:57.140 --> 22:58.820
避免多个介石文件造成污染

23:00.180 --> 23:01.860
然后这个介石里边

23:01.860 --> 23:04.380
我已经给你写好了这么一个Data石

23:05.340 --> 23:07.460
这个数组里面就是三个对象

23:07.460 --> 23:09.100
每一个对象里边就告诉你

23:10.340 --> 23:15.420
我现在的一个数组就是有四个横幅圖

23:15.420 --> 23:17.580
横幅区域的图

23:17.580 --> 23:19.500
四个轮波图

23:19.500 --> 23:20.660
那么这四个轮波图

23:20.660 --> 23:24.260
第一个轮波图它的图片是这个地址

23:24.260 --> 23:25.860
是一个图片链接

23:25.860 --> 23:27.860
它的超链接是这个地址

23:27.860 --> 23:30.780
就是你点了过后要跳转到这个地址

23:30.780 --> 23:31.620
懂了意思吗

23:31.620 --> 23:33.140
第二张图的图片在这

23:33.180 --> 23:34.740
是图片的链接

23:34.740 --> 23:36.340
它点了过后要跳到这

23:36.340 --> 23:36.620
好

23:36.620 --> 23:38.140
这个是我告诉你的所有数据

23:39.260 --> 23:40.900
你拿到这个数据之后

23:42.260 --> 23:43.860
你要做什么事呢

23:43.860 --> 23:45.380
首先是这个区域

23:52.360 --> 23:56.420
上去的横幅

23:56.420 --> 23:57.580
在这

23:57.580 --> 24:00.700
这个区域的很多东西都要重新生成

24:01.580 --> 24:03.780
包括这个A元数的超链接

24:03.780 --> 24:06.140
都把这里要控制一下

24:06.140 --> 24:07.700
那么这里呢

24:07.740 --> 24:09.940
是不是也要控制一下

24:09.940 --> 24:10.900
还有很多

24:10.900 --> 24:12.780
包括这里边的四边元数

24:12.780 --> 24:13.820
是不是不一定是三个

24:13.820 --> 24:14.780
有可能是四个

24:15.860 --> 24:16.460
对吧

24:16.460 --> 24:18.260
因此这里的四边元数

24:18.260 --> 24:19.780
它是不是要动态生成

24:21.140 --> 24:22.220
好 这有很多的事

24:23.100 --> 24:24.460
那么我们这里来分析一下

24:24.460 --> 24:26.740
来罗列一下我们这里有哪些事情要做

24:30.340 --> 24:31.140
它就是

24:31.140 --> 24:33.780
事情一就是要生

24:33.780 --> 24:40.180
就是设置超链接的地址和图片的路径

24:41.820 --> 24:42.420
对吧

24:42.420 --> 24:44.140
设置超链接的地址

24:44.140 --> 24:46.020
比方说我现在显示的第一张图

24:46.020 --> 24:48.180
那我就要是不是要把这个超链接

24:48.860 --> 24:50.660
这个超链接设置进去

24:50.660 --> 24:51.900
我要显示第一张图片

24:51.900 --> 24:55.380
是不是我要把图片链接设置到这个src里面去

24:56.060 --> 24:57.500
如果说我要显示第二张图

24:57.500 --> 24:58.580
是不是要设置这个

24:58.580 --> 24:59.820
设置这个超链接

24:59.820 --> 25:00.780
对吧

25:00.820 --> 25:02.060
切花码要不停的赶

25:02.940 --> 25:03.820
这是第一件事

25:04.620 --> 25:05.660
好 第二件事

25:06.140 --> 25:06.980
我要做什么呢

25:06.980 --> 25:12.380
我要设置下面动态生成

25:14.020 --> 25:14.940
十边元数

25:15.660 --> 25:16.940
哪一块的十边元数

25:16.940 --> 25:18.140
就这里的小底

25:18.140 --> 25:18.620
对吧

25:18.620 --> 25:20.340
它有几张图片就要生成几个

25:21.540 --> 25:22.420
是这个意思吗

25:22.420 --> 25:24.900
还要去控制十般里边的内样式

25:25.540 --> 25:27.340
哪一个内样式是选中的

25:27.460 --> 25:32.060
还要控制十边元数的内样式

25:33.340 --> 25:34.540
比方说我要显示第一张图

25:34.540 --> 25:36.580
那就第一个十边它是选中的

25:36.940 --> 25:37.940
我要显示第二张图

25:37.940 --> 25:39.420
就第二个十边是选中的

25:40.620 --> 25:41.220
懂这意思吗

25:42.460 --> 25:43.940
那么这里边有三件事

25:43.940 --> 25:44.980
我们来分析一下

25:45.900 --> 25:48.180
哪些事我只需要做一次

25:48.500 --> 25:50.660
哪些事我是不停的要做的

25:53.010 --> 25:54.330
来想一想

25:56.410 --> 25:57.490
应该能想到吧

25:58.450 --> 25:59.490
哪些事我只需要

25:59.490 --> 26:01.170
一面上只需要做一次就可以了

26:02.410 --> 26:03.570
哪些事我要不停的

26:03.570 --> 26:05.330
一会要做一次

26:05.330 --> 26:06.330
一会要做一次

26:07.850 --> 26:08.410
哪一方

26:08.730 --> 26:11.130
是不是有动态生成十边元数

26:11.130 --> 26:12.290
只需要做一次

26:13.930 --> 26:14.650
做一次

26:15.290 --> 26:19.450
后边这个东西是不是要经常变化

26:20.450 --> 26:20.690
对吧

26:20.690 --> 26:22.650
朝链接合图片地址要经常变化

26:23.570 --> 26:28.210
因此我这里就打算开这两个函数来写

26:28.210 --> 26:30.770
一个函数我们把它叫做音列车

26:30.770 --> 26:32.370
音列车是什么意思的

26:32.370 --> 26:34.290
一般来称之为初始化

26:34.290 --> 26:36.490
初始化就是只需要做一次的

26:36.490 --> 26:37.810
初始化

26:39.050 --> 26:42.050
另外一个函数我称之为

26:45.050 --> 26:45.890
Change

26:46.890 --> 26:47.890
表示改变

26:47.890 --> 26:49.370
一个我传一个参数进来

26:49.370 --> 26:50.410
indexed

26:50.690 --> 26:51.410
indexed

26:55.880 --> 26:56.800
这是一个数字

26:56.800 --> 26:57.400
a number

26:59.860 --> 27:03.100
要设置的数据所应

27:04.300 --> 27:11.820
这是将当指定下标的数据显示到页面上

27:11.820 --> 27:13.540
好这两个函数我解释一下

27:13.540 --> 27:14.060
啥意思

27:14.580 --> 27:17.660
初始化其实这里要做的事情就一件事

27:18.500 --> 27:20.660
动态生成十边元数

27:21.140 --> 27:22.620
这个只需要做一次就可以了

27:23.460 --> 27:25.900
然后

27:26.580 --> 27:27.380
Change

27:27.580 --> 27:29.660
这个函数都要做什么事

27:29.860 --> 27:32.620
它是要把指定下标的数据显示到页面上

27:32.620 --> 27:33.620
比方说我这样调用

27:33.620 --> 27:34.940
Change0

27:34.940 --> 27:35.740
那是啥意思

27:36.020 --> 27:37.620
我给它传了一个0进去

27:37.620 --> 27:40.420
它就要把这个数据里面的0项

27:40.420 --> 27:41.340
就是第1项

27:42.020 --> 27:42.900
这个数据

27:43.140 --> 27:45.460
给a元数设置为这个link

27:45.460 --> 27:47.580
给图片设置为这个src

27:47.580 --> 27:49.980
然后给第1个十边元数设置这个东西

27:51.620 --> 27:52.300
懂了意思吧

27:53.500 --> 27:55.700
那如果说我传入的是一个e

27:55.700 --> 27:56.860
它就要把这个东西

27:57.460 --> 27:59.380
重新设置这个超链接

27:59.380 --> 28:00.580
重新设置图片粒子

28:00.580 --> 28:03.780
再设置这个第2个十边元数

28:03.780 --> 28:04.780
加上这个内容式

28:05.940 --> 28:06.500
明白吧

28:07.060 --> 28:08.100
那就要做这么一件事

28:09.020 --> 28:09.700
好来吧

28:10.660 --> 28:11.860
两个函数都写一下

28:12.500 --> 28:13.340
第1个函数

28:13.820 --> 28:14.780
第1个函数呢

28:15.220 --> 28:16.500
就领点初始化

28:16.500 --> 28:18.180
我要生成十边元数

28:18.180 --> 28:19.540
那这个玩意很简单

28:19.540 --> 28:21.140
因为你这个怎么做呢

28:21.860 --> 28:24.100
图片有数据里面有几项

28:24.100 --> 28:25.660
我就生成几个十边元数

28:25.660 --> 28:26.940
就非常简单

28:26.940 --> 28:29.020
因此这里的十边我是不能要的

28:30.180 --> 28:31.740
我这里需要一些动物元数

28:31.740 --> 28:33.180
只能找到banner.dots

28:33.900 --> 28:34.620
banner.dots

28:36.260 --> 28:36.900
找到这个

28:39.020 --> 28:39.740
拿到一些动物

28:42.260 --> 28:45.500
banner.documents

28:46.620 --> 28:48.220
curry.snegator

28:48.740 --> 28:50.740
这里因为我可能会经常使用

28:50.740 --> 28:51.580
一个curry.snegator

28:51.860 --> 28:52.540
我们可以

28:54.140 --> 28:55.260
把它封装成一个函数

28:58.620 --> 28:59.220
documents

28:59.220 --> 28:59.940
对于snegator

29:02.500 --> 29:02.700
好

29:02.700 --> 29:04.460
那么这边我就可以直接使用dots

29:06.140 --> 29:08.260
找到这个banner.dots

29:10.020 --> 29:10.620
找到这个

29:11.660 --> 29:12.380
找这个元数

29:12.940 --> 29:14.820
拿到这个元数之后呢

29:15.660 --> 29:17.260
我这里面不是没有东西吗

29:17.260 --> 29:18.380
一个十半元数都没有

29:19.020 --> 29:20.380
那我这个引力车要做什么

29:20.780 --> 29:22.140
我就循环

29:22.620 --> 29:23.740
循环几次呢

29:24.380 --> 29:26.060
这个数组有几项

29:26.060 --> 29:27.340
我就循环几次

29:29.260 --> 29:31.300
我不需要你数组的每一个元数

29:31.300 --> 29:32.460
我不需要你这些东西

29:32.460 --> 29:33.580
现在还不需要至少

29:34.300 --> 29:35.380
你有四项

29:35.380 --> 29:36.860
我到我就生成四个十半

29:36.860 --> 29:38.620
那每一次循环我要干嘛呀

29:38.620 --> 29:40.620
我就不就是生成一个十边元数吗

29:41.300 --> 29:42.340
还能还要做啥呢

29:42.340 --> 29:43.140
documents

29:43.140 --> 29:44.660
create elements

29:45.900 --> 29:46.820
生成一个十边元数

29:46.820 --> 29:47.260
对吧

29:47.260 --> 29:48.860
把这个十边元数加到哪儿去

29:48.860 --> 29:50.700
加到banner.dots里边去

29:52.620 --> 29:54.140
所以加到这里面去就可以了

29:55.740 --> 29:55.900
好

29:55.900 --> 29:57.020
那么现在的我加进去

29:57.020 --> 29:58.460
然后接下来我一个函数就写完了

29:59.460 --> 30:00.820
由于它是初始化函数

30:00.820 --> 30:01.860
一般来说初始化函数

30:01.860 --> 30:03.580
就是在一开始雕像一次就可以了

30:04.380 --> 30:05.100
好保存

30:05.740 --> 30:06.700
接下来我们看一下页面

30:08.060 --> 30:09.180
页面上出现这

30:09.180 --> 30:09.580
哦对

30:09.580 --> 30:10.620
还没有写内样式

30:11.100 --> 30:12.540
它内样式呢是fl

30:13.140 --> 30:14.060
好我们这里写一下

30:14.940 --> 30:16.220
给它写一下内样式

30:16.220 --> 30:16.860
class name

30:17.740 --> 30:18.460
vfl

30:20.300 --> 30:21.820
好你看是不是生成了四个

30:22.220 --> 30:23.580
我们目前有四张图

30:23.580 --> 30:24.500
那就生成了四个

30:24.940 --> 30:26.380
所以初始化很简单

30:26.620 --> 30:27.580
这一块就写完了

30:30.550 --> 30:31.270
好同学们

30:31.870 --> 30:33.390
可以先跟着写一写

30:33.390 --> 30:34.710
这一块理解之后

30:34.710 --> 30:36.390
暂停视频关掉视频最好

30:37.230 --> 30:37.790
写一写

30:39.230 --> 30:40.910
好初始化完成之后

30:40.910 --> 30:42.710
那么接下来一个中头戏函数

30:43.550 --> 30:46.110
就是我们要有一个改变的函数

30:46.110 --> 30:46.830
一吊它

30:46.830 --> 30:48.310
比方说我这里欠几零

30:48.310 --> 30:49.910
好马上就显示第一张图片

30:49.910 --> 30:51.270
好这里的第一个

30:51.710 --> 30:52.750
变成激活状态

30:53.070 --> 30:54.030
变成选动状态

30:54.310 --> 30:55.790
我给它写欠几一

30:55.790 --> 30:57.990
好马上显示第二张图片

30:57.990 --> 31:00.990
于是这一块变成了激活

31:00.990 --> 31:02.350
就是选动状态

31:02.350 --> 31:03.590
我要做这么一些事

31:03.590 --> 31:05.190
那一点要来吧

31:05.710 --> 31:07.470
那么传了一个index之后

31:07.470 --> 31:10.750
我是不是首先可以从这个数组那边拿到这个东西

31:11.110 --> 31:11.950
data

31:11.950 --> 31:13.750
所以index是不是能拿到这个数据

31:14.750 --> 31:16.350
这一点没什么好说了吧

31:16.350 --> 31:17.230
我们来输出一下

31:18.230 --> 31:19.190
输出这个d

31:19.830 --> 31:20.430
试一下

31:21.430 --> 31:22.430
我们这里

31:23.110 --> 31:25.910
调用欠几零

31:28.950 --> 31:29.710
好看一下

31:32.710 --> 31:33.790
是不是到一个object

31:33.790 --> 31:35.430
它有第一张图片

31:35.670 --> 31:36.590
第一个的图片了

31:36.590 --> 31:37.430
第一个超链接

31:37.430 --> 31:37.870
对吧

31:37.870 --> 31:39.270
那我给它写个欠几一

31:39.270 --> 31:40.350
像这种协访了

31:40.350 --> 31:41.230
你就没有办法

31:41.790 --> 31:43.150
你就没有办法在这里调用了

31:43.150 --> 31:44.030
为什么呢

31:44.270 --> 31:46.150
因为它已经没有污染全局了

31:46.150 --> 31:47.190
它不在window里边了

31:47.190 --> 31:48.350
不在window里边

31:48.550 --> 31:49.790
那就是个函数局部的

31:49.790 --> 31:51.550
函数局部的东西不能在这里调试

31:51.790 --> 31:53.590
那如果说你希望在这里调试

31:53.590 --> 31:54.750
减少一些小技巧

31:55.470 --> 31:56.870
如果说你还是希望在这里调试

31:56.870 --> 31:58.830
因为在这里调试确实很方便

31:59.390 --> 32:00.870
在这里调试的话怎么办呢

32:00.870 --> 32:01.910
那也简单

32:02.110 --> 32:03.830
你把这个函数返回

32:03.830 --> 32:04.390
对吧

32:04.390 --> 32:05.790
相当于是把暴露出去

32:05.990 --> 32:06.470
还记得吗

32:06.470 --> 32:07.870
我之前怎么来暴露的

32:08.030 --> 32:09.990
实际上相当于是这里写一个欠几

32:10.510 --> 32:11.990
得到函数的返回值

32:12.230 --> 32:14.270
得到这个立即执行函数的返回值

32:14.270 --> 32:14.790
它返回什么

32:14.790 --> 32:15.710
返回这个函数

32:15.710 --> 32:16.230
欠几

32:17.110 --> 32:18.710
反正这个欠几就可以了

32:18.710 --> 32:19.550
那现在就可以了

32:19.950 --> 32:21.270
我们现在调用欠几

32:21.950 --> 32:22.510
零

32:23.470 --> 32:24.790
所以得到这么一个

32:25.030 --> 32:25.790
第一个对象

32:25.790 --> 32:26.750
那欠几

32:27.870 --> 32:28.390
一

32:28.910 --> 32:30.750
所以得到第二个对象

32:31.990 --> 32:34.550
拿到对象之后还要干嘛呢

32:34.550 --> 32:36.870
我要把对象里面的属性一个来

32:36.870 --> 32:38.390
把它的m级属性

32:39.670 --> 32:40.430
放到这儿

32:41.230 --> 32:42.670
把它的link属性

32:43.750 --> 32:44.750
超链接

32:44.910 --> 32:45.630
这个属性

32:45.870 --> 32:46.590
放到这儿

32:47.190 --> 32:48.790
所以说我们这里是不是要得到

32:49.510 --> 32:51.350
a远数和这张图片

32:51.910 --> 32:53.670
于是我们这里还需要一些动物

32:53.910 --> 32:55.270
我们这里把需要的动物

32:57.510 --> 32:58.230
全部放这儿

32:58.750 --> 32:59.510
还有哪些呢

32:59.510 --> 33:00.750
还有就是cover

33:02.350 --> 33:04.030
就封面图的超链接

33:04.030 --> 33:05.310
那个a远数

33:06.870 --> 33:07.510
cover link

33:08.550 --> 33:09.070
对不对

33:09.750 --> 33:10.710
banner cover

33:13.630 --> 33:15.910
这是超链接banner cover

33:16.990 --> 33:18.510
好超链接里边的图片呢

33:18.510 --> 33:19.230
我们再来

33:21.990 --> 33:22.830
banner

33:23.590 --> 33:25.150
cover image

33:25.950 --> 33:27.950
是不是就在这里边找张图片就完事了

33:28.430 --> 33:29.910
这里边我们是不是这个动物元素里边

33:29.910 --> 33:31.230
继续用quarious negator

33:31.630 --> 33:32.950
来找他的图片

33:33.590 --> 33:34.310
它下面的图片

33:34.750 --> 33:37.430
结束了你这里可以输出一下这些变量

33:37.430 --> 33:39.030
看一下这么正确

33:39.830 --> 33:42.070
banner cover image

33:43.590 --> 33:44.550
一个是a远数

33:46.270 --> 33:47.430
一个是image

33:47.990 --> 33:48.790
image元素

33:49.230 --> 33:50.070
都可以了

33:51.310 --> 33:53.390
好拿到这些东西之后

33:53.750 --> 33:55.710
那么接下来我们要做的事情

33:55.710 --> 33:57.070
在千几里边要做啥呀

33:57.750 --> 33:58.870
是不是给那个图

33:58.870 --> 34:01.790
给那个banner cover就是这个超链接

34:01.790 --> 34:03.630
给他设置什么ref属性

34:03.870 --> 34:04.990
为什么d.link

34:05.590 --> 34:07.590
所以这个给他设置为这个对象的

34:10.660 --> 34:11.580
没打印啊

34:11.860 --> 34:13.460
设置这个对象的link属性

34:14.020 --> 34:16.780
然后给图片的src设置为他的image属性

34:17.180 --> 34:17.580
对吧

34:17.580 --> 34:20.860
因此呢给那个banner cover image

34:21.300 --> 34:25.180
他的src设置为d.image

34:26.260 --> 34:28.140
好保证我们再来看一下

34:28.140 --> 34:30.740
接下来我们来试试的千几零

34:32.740 --> 34:33.660
什么d张图

34:34.180 --> 34:35.140
千几一

34:35.860 --> 34:36.580
第二张图对吧

34:36.580 --> 34:37.940
而且超链接也跟着改了

34:37.940 --> 34:39.020
点击超链接你看

34:40.060 --> 34:41.420
他挑到的不同的页面

34:41.980 --> 34:42.300
对吧

34:42.300 --> 34:43.020
挑到这了

34:43.020 --> 34:44.420
挑到小米官网那边去了

34:44.940 --> 34:47.460
好千几二说第三张图

34:47.940 --> 34:50.260
千几三说第四张图

34:51.700 --> 34:52.140
对吧

34:52.140 --> 34:52.780
就可以了

34:53.780 --> 34:56.060
也就是说了我们这一块呢

34:56.060 --> 34:57.980
其实这里就是不是就没有必要要了

34:57.980 --> 34:59.460
我们是动态设置的

35:00.220 --> 35:01.500
这里没有必要要了

35:01.700 --> 35:03.140
那么在最开始的时候

35:03.140 --> 35:04.220
是不是显示第一张

35:04.220 --> 35:05.540
说最开始的时候

35:05.540 --> 35:06.380
我们要调用

35:08.220 --> 35:10.620
我们这里是自动调用千几零

35:10.620 --> 35:12.700
或者是我们在引力车里面调用也行

35:13.220 --> 35:14.060
引力车里面

35:14.660 --> 35:15.980
除了生产实验之外

35:15.980 --> 35:17.740
我们再来一个千几零

35:18.100 --> 35:19.180
使用第一张图

35:19.180 --> 35:20.740
短幕正一开始使用第一张图

35:20.740 --> 35:22.420
后面要可以切换的

35:22.820 --> 35:24.460
也要换到第二张就传个1

35:24.460 --> 35:25.620
换到第三张就传个2

35:26.580 --> 35:28.100
矛盾就是第一张对吧

35:28.100 --> 35:29.900
将来我们要换到第二张就传

35:30.340 --> 35:30.820
一

35:30.820 --> 35:32.300
换到第三张就传二

35:33.420 --> 35:34.620
换到第四张就传三

35:35.260 --> 35:36.380
他就没法传四了

35:36.380 --> 35:37.220
事情没有了

35:37.220 --> 35:38.020
没有这个东西了

35:38.500 --> 35:39.260
就保错了

35:40.860 --> 35:42.300
那么这个函数还写完吗

35:42.300 --> 35:43.300
还没有写完

35:43.300 --> 35:45.740
因为还有这里一个选中的样式

35:46.260 --> 35:47.420
是不是还有一个选中的样式

35:48.060 --> 35:50.260
好选中的样式又怎么做呢

35:56.820 --> 35:58.420
选中的样式有怎么做呢

35:59.860 --> 36:01.740
选中的样式部分就是找到

36:01.740 --> 36:03.020
比方说你这里传的是0

36:03.020 --> 36:03.900
那我就找到

36:04.780 --> 36:05.900
这个元素里面的

36:06.260 --> 36:07.620
第1个识变对吧

36:07.940 --> 36:09.260
你因这个识传的是0

36:09.260 --> 36:10.140
那我就找第1个

36:10.140 --> 36:11.380
传1我就找第2个

36:12.580 --> 36:14.180
是不是给他加上一个那样式

36:15.020 --> 36:15.700
就完事了

36:16.220 --> 36:16.820
因此呢

36:16.820 --> 36:18.220
我这里还要做这么一件事

36:19.660 --> 36:21.660
识变的选中效果

36:22.340 --> 36:23.900
那么我要找哪个识变元素

36:24.460 --> 36:25.940
BannerDots

36:26.060 --> 36:27.900
刚才那个就是副元素

36:27.900 --> 36:31.510
把这个分个屏

36:32.750 --> 36:33.430
是不是找他

36:33.430 --> 36:35.070
找这个DIV的BannerDots

36:35.990 --> 36:37.870
找他的什么q去

36:38.230 --> 36:39.630
他的所有识元素

36:39.950 --> 36:41.790
因为之前我们是不是生存了一些识变元素

36:41.790 --> 36:42.790
生存了很多的识变

36:43.950 --> 36:45.110
找哪一个识元素呢

36:45.110 --> 36:46.310
因这个识传进去

36:47.310 --> 36:49.150
那是不是就得到识变元素了

36:49.750 --> 36:50.670
那我要做的什么

36:50.910 --> 36:51.630
我要做的事情

36:51.630 --> 36:54.830
那就是给识变元素的className设字为

36:55.630 --> 36:58.590
BannerDotsSnekti的

36:58.870 --> 36:59.430
然后呢

36:59.430 --> 36:59.950
Fl

37:00.990 --> 37:02.670
是不是去设字为这个那样式就可以了

37:03.670 --> 37:03.990
好

37:03.990 --> 37:04.510
保存

37:04.950 --> 37:05.670
接下来我们再看

37:06.270 --> 37:08.630
那一开始看是不是第一张就没有选中了

37:09.070 --> 37:10.670
那如果说我来第二张的话

37:10.670 --> 37:11.510
就签几二

37:11.510 --> 37:12.310
一签几一

37:13.430 --> 37:14.430
是不是这个也选中了

37:14.830 --> 37:15.670
但是你会发现

37:15.670 --> 37:17.430
之前的那个没有被

37:17.670 --> 37:19.390
那样式没有被消除掉

37:19.670 --> 37:20.550
所以说我要

37:20.910 --> 37:21.510
我每

37:21.510 --> 37:23.790
比如说我加这一项的那样式

37:23.790 --> 37:25.590
我要在这之前

37:25.590 --> 37:27.070
我要把之前的

37:27.750 --> 37:29.550
有选中效果的

37:29.550 --> 37:31.270
全部给它移除掉

37:31.670 --> 37:33.670
然后我再去加选全中效果

37:34.030 --> 37:34.710
懂了意思吧

37:34.710 --> 37:35.510
我先把

37:35.510 --> 37:37.790
比方说我现在要弄个第三个

37:38.590 --> 37:39.350
签几三

37:40.550 --> 37:41.350
签几三

37:41.790 --> 37:42.590
签几二

37:42.590 --> 37:45.670
是不是我目前想要选中这个

37:46.510 --> 37:48.710
那我先把之前的全给它移除掉

37:49.830 --> 37:50.670
然后呢

37:50.670 --> 37:51.710
我在加新的

37:52.670 --> 37:53.950
说可以用这种逻辑

37:53.950 --> 37:56.790
因此这一块也是比较一个常见的做法

37:56.790 --> 37:59.710
我们在这一块加选中效果之前

37:59.710 --> 38:01.030
先移除

38:02.030 --> 38:04.950
移除之前的选中效果

38:04.950 --> 38:08.110
那我怎么样移除之前的选中效果呢

38:09.830 --> 38:10.350
这样子

38:11.110 --> 38:12.350
我可以使用

38:13.070 --> 38:14.110
或者就在这里

38:14.110 --> 38:15.190
班纳多斯

38:15.670 --> 38:16.910
Claris Negator

38:19.270 --> 38:21.710
我先来得到这个东西

38:22.110 --> 38:24.070
我看它的指元素里边

38:25.070 --> 38:27.390
带有这个内样式的实变元素

38:27.390 --> 38:28.030
先来

38:28.910 --> 38:29.550
是那个体的

38:29.550 --> 38:32.030
就目前选中的元素先拿到

38:32.030 --> 38:33.030
这个能理解吧

38:33.630 --> 38:36.270
我先把这一块它的指元素当中

38:36.270 --> 38:38.030
我再进一步Claris Negator

38:38.030 --> 38:39.070
进一步往后找

38:39.590 --> 38:41.790
找到有这个内样式的元素

38:44.030 --> 38:44.750
然后干嘛

38:44.750 --> 38:46.030
然后

38:46.030 --> 38:47.070
当然我先判断一下

38:47.070 --> 38:47.710
判断一下

38:47.710 --> 38:48.830
万一没找到呢

38:48.830 --> 38:49.670
万一一个都没有了

38:49.670 --> 38:50.830
没有的话就是那我

38:51.310 --> 38:52.110
什么时候没有

38:52.110 --> 38:52.950
一开始就没有

38:53.550 --> 38:54.270
一开始就争称了

38:54.270 --> 38:56.390
一边元素过后都还没有这个样式

38:57.390 --> 38:58.390
那反正就是我

38:58.670 --> 39:00.110
最好的判断一下

39:00.110 --> 39:01.070
万一他找出来

39:01.070 --> 39:01.990
一个都没找到

39:01.990 --> 39:02.830
找到了

39:02.830 --> 39:03.830
只要没有的话

39:04.310 --> 39:04.990
那不管

39:04.990 --> 39:06.390
只要有的话

39:06.750 --> 39:08.310
说明有这样的元素

39:08.310 --> 39:09.830
它里边已经有了这个样的

39:09.830 --> 39:10.790
一个内样式

39:10.790 --> 39:11.830
比较找到它了

39:11.830 --> 39:12.950
那我就干嘛

39:12.950 --> 39:15.790
给它的Claris Name设置为FL

39:15.790 --> 39:17.110
是不是就相当于是

39:17.110 --> 39:19.030
把这个样式给它清除掉了

39:19.510 --> 39:20.310
给它移除掉了

39:20.390 --> 39:21.750
那么只剩一个FL了

39:21.750 --> 39:23.590
就以这个例子为看来看吧

39:23.590 --> 39:25.630
比方说我目前选中的

39:26.630 --> 39:28.110
是不是通过它去找

39:28.110 --> 39:29.710
带有这个内样式的元素

39:29.710 --> 39:30.430
那如果都没有

39:30.430 --> 39:31.070
那就现在就

39:31.070 --> 39:32.470
这种情况是不是就没找到

39:33.030 --> 39:34.990
这种情况是不是就找不到这个

39:35.510 --> 39:36.310
内样式

39:36.310 --> 39:36.990
那就是闹

39:36.990 --> 39:38.310
那就不能继续操作了

39:38.870 --> 39:39.990
所以我只看什么

39:39.990 --> 39:40.790
只看

39:40.790 --> 39:42.350
有能找到的

39:42.350 --> 39:43.790
能找到的是不是最晚要

39:43.790 --> 39:44.230
我要干嘛

39:44.230 --> 39:45.190
我要把它删掉

39:45.550 --> 39:46.070
怎么删

39:46.070 --> 39:47.110
就把Claris Name给它

39:47.110 --> 39:48.590
复制为FL就不就删掉了

39:49.590 --> 39:50.190
好

39:50.190 --> 39:52.030
所以我们先把之前的移除

39:52.030 --> 39:53.670
这个玩意儿你只需要分析一次

39:54.670 --> 39:56.630
后边全是这种做法

39:57.030 --> 39:58.870
什么激活状态

39:58.870 --> 40:00.310
或者是选动状态

40:00.310 --> 40:01.270
都是这种做法

40:02.430 --> 40:02.630
好

40:02.630 --> 40:04.190
那么现在先把之前移除

40:04.190 --> 40:06.870
然后再给它加新的

40:07.390 --> 40:07.990
就没问题了

40:08.590 --> 40:08.750
好

40:08.750 --> 40:09.990
你看目前是第一个

40:09.990 --> 40:11.590
然后将来我要挑到第三个

40:13.190 --> 40:13.950
这出问题了

40:14.790 --> 40:18.070
它说无法设置属性给安迪范

40:18.790 --> 40:21.670
我在尝试给一个安迪范的设置属性

40:21.670 --> 40:22.870
我在给它设置什么属性呢

40:22.870 --> 40:23.710
设置Claris Name

40:23.710 --> 40:25.270
要学会看错误

40:25.270 --> 40:26.750
而且它还告诉你

40:26.750 --> 40:27.870
在哪一行爆出的

40:27.870 --> 40:28.590
66行

40:28.590 --> 40:29.790
你点一下

40:29.790 --> 40:31.470
它会给你挑到这

40:31.470 --> 40:32.750
你看就明白了

40:32.750 --> 40:32.950
对吧

40:32.950 --> 40:34.710
你这里明显这个玩意儿是NOW

40:34.710 --> 40:35.470
对吧

40:35.470 --> 40:37.790
这个玩意儿是安迪范的是在下边定义的

40:37.790 --> 40:39.070
所以说应该再给这个

40:39.070 --> 40:40.030
省了一个体的复制

40:43.680 --> 40:43.920
好

40:43.920 --> 40:44.880
保存

40:44.880 --> 40:45.840
那么接下来看一下

40:46.640 --> 40:47.680
我们现在

40:47.680 --> 40:48.480
选动第三个

40:49.640 --> 40:50.600
是不是没问题了

40:50.640 --> 40:51.360
选动第四个

40:52.480 --> 40:53.240
再选动第二个

40:54.560 --> 40:55.480
所以想选中哪一个

40:55.480 --> 40:56.120
选中哪一个

40:57.400 --> 40:57.960
是没问题的

41:00.040 --> 41:00.200
好

41:00.200 --> 41:00.960
那么接下来的

41:00.960 --> 41:03.240
就这个核心功能就已经写好了

41:03.240 --> 41:04.600
那么接下来我们再来看

41:04.600 --> 41:06.080
我们在这个页面中

41:06.080 --> 41:08.520
它还有一个向左翻

41:08.520 --> 41:09.320
向右翻

41:10.440 --> 41:10.720
对吧

41:10.720 --> 41:12.480
所以说我们再来写两个辅助函数

41:13.680 --> 41:14.920
一个是向左翻

41:14.920 --> 41:16.640
一个是向右翻

41:16.640 --> 41:17.800
那这一块一暂时不要了

41:18.400 --> 41:21.600
我这里写两个函数

41:21.600 --> 41:23.080
方形

41:23.080 --> 41:24.800
to

41:24.800 --> 41:26.320
prev

41:26.320 --> 41:27.240
向前

41:29.240 --> 41:29.840
方形

41:29.840 --> 41:30.640
to next

41:32.640 --> 41:36.230
这是向前

41:38.230 --> 41:38.710
翻

41:39.590 --> 41:40.630
这是向后翻

41:41.430 --> 41:42.310
也就是向右翻

41:43.590 --> 41:44.510
向后翻

41:45.710 --> 41:46.270
写两个函数

41:46.270 --> 41:47.990
为了一会儿变于挑事

41:48.070 --> 41:49.550
所以说我这里能用个对象

41:49.550 --> 41:51.030
把这两个函数返回出去

41:51.750 --> 41:52.470
to prev

41:52.470 --> 41:53.670
to prev

41:54.510 --> 41:55.470
to next

41:56.470 --> 41:57.270
to next

41:57.950 --> 41:59.350
把这两个函数返回出去

41:59.350 --> 42:01.270
这里我可以用一个

42:02.110 --> 42:03.070
电量来接收一下

42:03.070 --> 42:03.590
test

42:04.710 --> 42:05.550
主要是为了挑事

42:05.550 --> 42:07.590
一会儿我这个东西肯定是没用的

42:07.590 --> 42:08.550
不需要返回出去

42:09.470 --> 42:10.070
好

42:10.070 --> 42:11.870
为了变于在浏览器里边

42:11.870 --> 42:13.270
在这个地方进行挑事

42:13.270 --> 42:13.950
就txt

42:13.950 --> 42:14.630
第二

42:14.630 --> 42:15.110
to next

42:15.110 --> 42:16.070
就可以看一下这个方法

42:16.070 --> 42:17.230
有没有好不好用

42:17.230 --> 42:17.470
对吧

42:18.430 --> 42:19.790
看一下方法好不好用

42:20.990 --> 42:21.670
我要做什么

42:21.670 --> 42:22.430
这两个方法

42:22.430 --> 42:23.950
这两个方法要做这么一件事

42:23.950 --> 42:24.910
就是

42:24.910 --> 42:26.430
逼要用这个方法

42:26.430 --> 42:28.030
它就翻到上一张

42:28.030 --> 42:29.510
逼要用这个方法就翻到下一张

42:29.510 --> 42:30.550
就这么简单

42:30.550 --> 42:31.750
我就要做这么一件事

42:32.910 --> 42:36.270
那我是不是得知道目前在第几张

42:36.270 --> 42:38.630
是不是得知道目前在第几张

42:38.630 --> 42:39.230
对吧

42:39.910 --> 42:42.030
那我怎么知道目前在第几张呢

42:42.030 --> 42:43.430
那我只能收这个边量

42:43.430 --> 42:44.470
per index

42:44.470 --> 42:46.070
一开始的时候不是第几张

42:46.070 --> 42:46.630
对吧

42:46.750 --> 42:50.910
目前显示的是第几张

42:52.110 --> 42:53.350
一开始是不是零

42:53.350 --> 42:54.790
目前在第一张

42:54.790 --> 42:56.150
好像这些代码啊

42:56.150 --> 42:58.150
同学们第一次接触介石

42:58.150 --> 42:59.550
可能接触的代码有点多

42:59.550 --> 43:02.070
不是就第一次接触到这个

43:02.070 --> 43:03.630
比较多的介石代码

43:03.630 --> 43:05.310
然后同学们建议同学们呢

43:05.310 --> 43:06.070
学的过程中

43:07.190 --> 43:08.070
看一块

43:08.070 --> 43:09.030
你觉得差不多了

43:09.030 --> 43:09.670
再看一块

43:09.670 --> 43:10.750
脑袋要晕了

43:10.750 --> 43:11.670
跟着写一下

43:11.670 --> 43:13.110
加深一下印一下

43:13.110 --> 43:14.390
然后再继续往后听

43:14.390 --> 43:15.550
这样的效果好很多

43:16.910 --> 43:18.230
目前是第几张

43:18.230 --> 43:19.830
那么到上一张

43:19.830 --> 43:20.550
怎么做呢

43:20.550 --> 43:21.750
是不是就是curl index

43:21.750 --> 43:22.550
减减

43:24.630 --> 43:25.870
是不是就减减

43:25.870 --> 43:26.870
那减了之后

43:26.870 --> 43:29.590
是不是就有可能是小于零的

43:29.590 --> 43:31.110
判断一下

43:31.110 --> 43:33.750
如果说他小于零

43:33.750 --> 43:34.750
该怎么办呢

43:35.790 --> 43:36.750
该怎么办

43:36.750 --> 43:38.550
是不是就设置到最大下标

43:39.630 --> 43:40.670
最大下标是多少

43:41.910 --> 43:43.510
是不是delta是个数组

43:43.510 --> 43:44.670
这个数据的数组

43:44.670 --> 43:45.670
长度减1

43:46.670 --> 43:47.790
是吧

43:47.790 --> 43:49.950
是这个数组的长度减1吗

43:51.230 --> 43:51.790
好

43:51.790 --> 43:53.070
向前翻

43:53.070 --> 43:54.390
向前翻

43:54.390 --> 43:55.470
这个curl index

43:55.470 --> 43:56.830
减了之后

43:56.830 --> 43:57.990
是不是就得到一个正确的值

43:57.990 --> 43:58.190
对吧

43:58.190 --> 43:58.910
他如果说是零

43:58.910 --> 43:59.750
就变成了多少

43:59.750 --> 44:00.590
变成了3

44:00.590 --> 44:01.270
如果说是3

44:01.270 --> 44:01.870
变成了2

44:01.870 --> 44:02.350
如果说是2

44:02.350 --> 44:03.190
变成了1

44:03.190 --> 44:03.710
对吧

44:03.710 --> 44:06.150
那么给他复制完之之后

44:06.150 --> 44:07.230
是不是来个迁击

44:07.230 --> 44:08.750
把curl index传进去

44:08.750 --> 44:09.470
就完事了

44:09.470 --> 44:11.190
那他翻到这一张去

44:11.190 --> 44:12.910
向前翻就完事了

44:12.910 --> 44:14.030
来试一下

44:14.750 --> 44:17.030
test to probe

44:17.030 --> 44:17.950
向前翻一张

44:19.830 --> 44:20.390
好一看

44:21.710 --> 44:22.910
再向前

44:22.910 --> 44:23.870
再向前

44:23.870 --> 44:24.830
再向前

44:24.830 --> 44:25.390
再向前

44:26.750 --> 44:27.390
看没有

44:27.390 --> 44:28.190
那curl index

44:28.190 --> 44:29.230
是不是不断的变化

44:29.230 --> 44:30.670
每一次变化过后

44:30.670 --> 44:32.430
那他去这一张就行了

44:32.430 --> 44:32.630
对吧

44:32.630 --> 44:33.750
所以说这个函数很重要

44:35.030 --> 44:36.070
下一张就很简单了

44:36.070 --> 44:37.390
就curl index加加

44:38.950 --> 44:40.150
如果说curl index

44:40.150 --> 44:43.950
大于数组的长度

44:44.510 --> 44:45.070
减1

44:45.070 --> 44:47.230
是不是到超数据达下标

44:47.230 --> 44:47.710
那怎么办

44:47.710 --> 44:49.510
把他设置为0

44:49.510 --> 44:51.150
然后后边也一样

44:51.150 --> 44:53.550
券击curl index

44:53.550 --> 44:55.230
是不是向后翻就完事了

44:55.230 --> 44:55.510
再来

44:58.190 --> 45:00.390
test to next

45:00.390 --> 45:01.590
向后翻

45:01.590 --> 45:04.560
向后翻

45:04.560 --> 45:04.880
好了

45:04.880 --> 45:06.480
我觉得这个功能

45:06.480 --> 45:08.080
很多有些同学

45:08.080 --> 45:09.560
应该我不用往后写

45:09.560 --> 45:11.720
都应该知道咋写了

45:11.720 --> 45:13.280
后边是不是来一个事件

45:13.280 --> 45:14.520
各种乱七八糟的事件

45:14.560 --> 45:15.840
把他点一点就完成

45:15.840 --> 45:16.880
就连线一样的

45:18.200 --> 45:20.440
首先哪一个事件

45:21.800 --> 45:23.000
点这个的事件

45:23.000 --> 45:25.160
点这个箭头的事件

45:25.160 --> 45:27.040
那么这里的产有两个洞

45:27.040 --> 45:28.680
一个是left箭头

45:28.680 --> 45:30.120
pointer left

45:30.120 --> 45:31.800
我们这里把洞

45:31.800 --> 45:33.080
给他获取到

45:34.760 --> 45:40.850
pointer left

45:40.930 --> 45:42.010
那样是为

45:42.010 --> 45:46.850
banner pointer left

45:46.850 --> 45:50.320
还有一个是pointer right

45:50.320 --> 45:50.920
箭头

45:52.600 --> 45:53.240
好了

45:53.240 --> 45:56.820
来看一下

45:56.820 --> 45:58.500
那么现在我要注册事件了

45:58.500 --> 45:59.460
注册事件

46:00.740 --> 46:01.660
怎么玩呢

46:01.660 --> 46:06.460
就是找到pointer left

46:06.460 --> 46:07.900
给他添加一个事件

46:07.900 --> 46:08.740
unclick

46:08.740 --> 46:10.220
点他的时候干嘛

46:11.380 --> 46:13.100
我要往前翻

46:13.100 --> 46:14.020
是不是

46:14.020 --> 46:15.660
把这个函数直接复制给他就行了

46:15.660 --> 46:18.620
当然你要这样子写也行

46:18.620 --> 46:21.060
只是我觉得没有什么必要了

46:21.060 --> 46:22.620
to prove

46:22.620 --> 46:23.820
没有什么必要了

46:23.820 --> 46:24.020
对吧

46:24.020 --> 46:25.580
你给他复制一个函数

46:25.580 --> 46:26.620
我调用这个函数的时候

46:26.620 --> 46:27.740
实际上就调用这个函数

46:27.740 --> 46:30.660
你直接把这个函数给他不就完了吗

46:30.660 --> 46:34.060
然后还有一个就是pointer right

46:34.060 --> 46:35.660
点向右翻的时候

46:35.660 --> 46:39.220
调用那个to next

46:39.220 --> 46:39.460
对吧

46:39.460 --> 46:40.940
就跟用户事件就连线一样

46:40.940 --> 46:44.430
一个连过去了

46:44.470 --> 46:45.430
就可以翻了吗

46:46.430 --> 46:47.430
有时候没动画

46:47.430 --> 46:48.950
动画现在不是现在能考虑的

46:51.650 --> 46:53.090
不就翻了吗

46:53.090 --> 46:53.490
对吧

46:53.490 --> 46:54.170
都没问题了吧

46:54.170 --> 46:55.250
在这一块

46:55.250 --> 46:56.050
然后点下

46:56.050 --> 46:57.730
现在就是下边的小点

46:59.730 --> 47:02.810
下面的小点

47:02.810 --> 47:04.530
点下边的小点的时候也要冷判

47:04.530 --> 47:05.290
点第一个点

47:05.290 --> 47:06.330
我就翻到第一个

47:06.330 --> 47:06.970
点第三个点

47:06.970 --> 47:08.290
我就翻到第三个

47:08.290 --> 47:10.210
那这个玩意还有怎么玩

47:10.210 --> 47:10.970
点下边的小点

47:12.050 --> 47:12.210
好

47:12.210 --> 47:12.810
那么这里呢

47:12.810 --> 47:15.010
我们是不是要给这样注册事件

47:15.050 --> 47:17.530
他不是有个banner dots吗

47:17.530 --> 47:18.090
对吧

47:18.090 --> 47:19.210
是不是有这么一个东西

47:19.210 --> 47:21.290
我给他循环他的求据

47:21.290 --> 47:22.610
来注册事件

47:22.610 --> 47:23.210
循环

47:24.610 --> 47:26.210
按小语

47:26.210 --> 47:26.810
求据

47:27.890 --> 47:28.490
点links

47:29.370 --> 47:29.850
对吧

47:29.850 --> 47:31.250
循环这个伪术组

47:31.250 --> 47:32.970
每一次循环是不是拿到一个span

47:34.690 --> 47:35.930
banner dots

47:35.930 --> 47:36.410
求据

47:37.570 --> 47:38.210
按

47:38.210 --> 47:39.570
是不是拿到个span

47:39.570 --> 47:39.770
好

47:39.770 --> 47:42.130
我是不是要给这个span注册点击事件

47:42.130 --> 47:43.290
onclick

47:43.290 --> 47:44.010
点击的时候

47:44.050 --> 47:45.090
我要干嘛

47:45.090 --> 47:46.730
点的是第几个span

47:46.730 --> 47:50.700
我就要翻到第几页

47:50.700 --> 47:52.820
是不是给他传一个i

47:52.820 --> 47:53.860
当然不要忘记

47:53.860 --> 47:55.060
还要把这个curl index

47:56.900 --> 47:58.180
都改为i

47:58.180 --> 47:58.780
让他知道

47:58.780 --> 48:00.300
不然的话一会儿向前翻向后翻

48:00.300 --> 48:02.700
还记录的是之前的那个下标

48:02.700 --> 48:03.660
那就肯定不行了

48:03.660 --> 48:05.380
所以要把这个当前的下标更新

48:06.540 --> 48:08.940
这样才保证那个to pril

48:08.940 --> 48:10.380
和to next

48:10.380 --> 48:12.380
它的功能不出问题

48:12.380 --> 48:13.980
这个变量始终要记录

48:13.980 --> 48:15.020
当前是第几张

48:16.540 --> 48:17.420
不就完事了吗

48:18.780 --> 48:21.720
是不是就完事了

48:21.720 --> 48:23.680
那我们现在看一下能完事了吗

48:24.640 --> 48:25.600
点这个

48:25.600 --> 48:27.240
它直接爆错了

48:27.240 --> 48:28.440
它为什么会爆错呢

48:30.080 --> 48:31.680
我们在这里打印一下i

48:31.680 --> 48:34.760
你啥都明白了

48:34.760 --> 48:35.800
我点第二张

48:35.800 --> 48:37.400
打印i的指示

48:37.400 --> 48:38.360
是

48:38.360 --> 48:40.200
你们自己去梳理一下

48:40.200 --> 48:41.160
这个地方

48:41.160 --> 48:43.920
是不是就相当于是我刚才的第二个例子

48:43.920 --> 48:46.920
在循环里边注册事件

48:46.920 --> 48:48.360
事件里边要用到这个i

48:48.360 --> 48:49.960
就会出现这种情况

48:49.960 --> 48:51.240
那怎么处理的

48:51.240 --> 48:52.120
最简单的办法

48:52.120 --> 48:52.920
这里赶上net

48:52.920 --> 48:53.960
啥问题都没有了

48:55.000 --> 48:55.800
你看

48:56.680 --> 48:57.920
啥问题都没有了

48:57.920 --> 49:00.600
这也是我非常推荐大家的做法

49:00.600 --> 49:01.960
第二种做法

49:01.960 --> 49:03.840
杨龙做法你都得会

49:05.280 --> 49:07.480
你就在这里写一个立即执行函数

49:07.480 --> 49:09.880
其他都是固定的

49:11.880 --> 49:13.760
然后来把这一坨写进来

49:14.800 --> 49:15.720
就完事了

49:16.240 --> 49:17.760
这个种做法也可以

49:18.960 --> 49:20.080
你看这里就可以

49:20.080 --> 49:21.000
这里就实现了

49:21.560 --> 49:24.320
那么这个轮波图区域就实现了

49:26.950 --> 49:27.310
好了

49:27.310 --> 49:29.830
如果说你要做那个自动播放怎么办

49:30.350 --> 49:31.310
那还不简单吗

49:31.310 --> 49:33.310
自动播放是不是又涉及到这个东西

49:33.310 --> 49:35.030
一个开始函数

49:35.030 --> 49:36.030
自动播放的问题

49:38.170 --> 49:38.970
其他这些两个函数

49:38.970 --> 49:40.010
一个是开始

49:40.010 --> 49:42.250
一个是暂停

49:42.250 --> 49:42.890
是不是

49:42.890 --> 49:44.810
我们要写过很多次了

49:44.810 --> 49:46.530
然后这里有个time ID

49:48.170 --> 49:49.210
我就不再重复解释了

49:50.210 --> 49:51.330
现在又不是公开直播课

49:51.330 --> 49:52.050
是付费课程

49:52.050 --> 49:53.770
你们前面都是连续性的

49:53.770 --> 49:54.730
前面你学过了

49:54.730 --> 49:55.930
我就不再重复解释了

49:56.450 --> 49:58.210
如果说有值就结束

49:58.210 --> 49:59.210
没有值的话

49:59.210 --> 50:00.130
time ID

50:01.650 --> 50:03.770
这些单码写多了就写得快突兀了

50:04.210 --> 50:05.330
set interval

50:05.690 --> 50:06.610
每隔一段时间

50:06.610 --> 50:07.210
每隔多少时间

50:07.210 --> 50:10.210
比方说每隔1.5秒

50:10.770 --> 50:12.650
每隔1.5秒调用什么

50:12.650 --> 50:14.570
直接把这个tool那个车传进去玩

50:15.570 --> 50:17.330
直接帮我调用这个函数

50:17.330 --> 50:18.490
每隔1.5秒

50:18.650 --> 50:19.570
调用这个函数

50:20.170 --> 50:22.290
你千万不要在这里写两个小伙伴

50:22.810 --> 50:23.610
那就什么意思

50:23.610 --> 50:25.970
每隔1.5秒调用undefend

50:25.970 --> 50:27.810
因为这个函数的运行结果就是undefend

50:28.570 --> 50:31.130
每隔1.5秒先把这个函数运行出来

50:31.130 --> 50:32.090
是undefend

50:32.090 --> 50:34.770
然后告诉他每隔1.5秒调用undefend

50:34.770 --> 50:35.890
他不就神经病了吗

50:38.690 --> 50:40.890
这是开始自动播放

50:40.890 --> 50:42.730
那么停止了

50:42.730 --> 50:47.090
那就是clear interval time ID

50:48.090 --> 50:50.890
然后time ID

50:50.890 --> 50:51.690
然后运辆

50:52.690 --> 50:53.370
这两个函数

50:53.370 --> 50:53.970
一个start

50:53.970 --> 50:54.970
一个是stop

50:54.970 --> 50:55.770
一开始的时候

50:55.770 --> 50:57.490
我就刚刚开始自动放

50:58.570 --> 50:59.290
那一看一下

50:59.570 --> 51:01.130
就是1.5秒切换一次

51:03.340 --> 51:03.900
对吧

51:03.900 --> 51:05.700
如果说什么时候暂停呢

51:05.700 --> 51:08.500
一般人来说是鼠标移到这个区域的时候就暂停

51:08.500 --> 51:09.620
那么哪个区域呢

51:10.100 --> 51:11.540
就是移到这个banner区域

51:12.460 --> 51:14.460
所以说我们这里的或许这个banner区域

51:15.860 --> 51:16.620
dome里边

51:24.300 --> 51:24.820
好

51:25.300 --> 51:26.420
那么给他做这个事件

51:26.420 --> 51:28.260
鼠标移入的时间

51:29.020 --> 51:30.860
mouse enter

51:31.260 --> 51:32.980
或者add event listener

51:32.980 --> 51:33.460
都行

51:33.460 --> 51:35.820
啊反正就是鼠标移入的时候

51:36.020 --> 51:36.460
stop

51:39.330 --> 51:39.810
停止

51:40.570 --> 51:42.570
然后鼠标移开的时候又开始

51:43.730 --> 51:45.770
mouse leave

51:45.770 --> 51:47.770
鼠标离开他的时候又开始

51:49.730 --> 51:50.170
好保证

51:50.170 --> 51:50.610
你看一下

51:52.450 --> 51:52.890
变

51:53.890 --> 51:54.250
变

51:54.610 --> 51:55.290
鼠标移入

51:56.010 --> 51:56.690
所以暂停了

51:56.690 --> 51:58.090
就没有再没有再变了

51:58.250 --> 51:58.810
对吧

51:59.130 --> 52:00.010
鼠标移一开

52:01.010 --> 52:01.410
变

52:02.050 --> 52:02.490
变

52:02.930 --> 52:03.770
一一入

52:04.810 --> 52:05.570
就停止了

52:06.610 --> 52:07.290
就完事了

52:08.370 --> 52:10.530
这个玩意其实就是轮波图的

52:11.170 --> 52:12.690
核心逻辑就出来了

52:12.890 --> 52:13.730
只不过轮波图了

52:13.730 --> 52:15.450
我们也有给他加了一个动画

52:16.090 --> 52:17.090
那个动画呢

52:17.090 --> 52:19.490
其实无非就是代码多一点

52:19.490 --> 52:20.090
也能做

52:20.090 --> 52:21.410
有些同学啊

52:21.850 --> 52:23.170
学的很好的同学啊

52:23.410 --> 52:24.370
他也能做

52:25.050 --> 52:27.010
你看我们之前做那个什么小球

52:27.010 --> 52:28.610
飘来飘去不就是动画吧

52:29.290 --> 52:30.970
每个一小段时间

52:30.970 --> 52:32.410
一点一点的变过去

52:32.410 --> 52:33.530
不是瞬间变过去

52:33.530 --> 52:33.930
对吧

52:33.930 --> 52:35.450
一点一点的改变他的样式

52:35.810 --> 52:36.130
只不过呢

52:36.130 --> 52:37.050
我们的ATM

52:37.330 --> 52:40.530
CSS部分的都会涉及到一些相应的改动

52:40.530 --> 52:41.490
我们现在不处理

52:41.490 --> 52:43.170
后面我们会专门的练习轮波图

52:43.650 --> 52:44.010
好了

52:44.010 --> 52:45.210
现在我们先把做成这个样子

52:45.210 --> 52:45.730
OK了

