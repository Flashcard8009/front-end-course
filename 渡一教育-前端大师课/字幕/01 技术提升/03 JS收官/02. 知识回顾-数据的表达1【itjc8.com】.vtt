WEBVTT

00:00.300 --> 00:03.340
好了 同学们 我们从这里开始

00:03.340 --> 00:06.020
我们会花个两三天的时间

00:06.020 --> 00:08.300
对之前的知识做一个回顾

00:08.300 --> 00:10.300
一方面我们是

00:10.300 --> 00:13.460
房子有些同学就忘记了之前的介事知识了

00:13.460 --> 00:15.460
对吧 虽然我们之前学了一些

00:15.460 --> 00:19.300
另一方面是我们在通过这个回顾

00:19.300 --> 00:23.020
总结和加强某一方面的知识

00:23.020 --> 00:26.100
因为我们之前的练习量其实还是不够的

00:26.100 --> 00:27.300
不是很保险

00:27.300 --> 00:30.260
所以把之前学过的东西给它扫一遍

00:30.260 --> 00:32.260
这样子的比较稳妥一点

00:32.260 --> 00:34.260
就是我们学程序开发

00:34.260 --> 00:36.260
其实最重要的就是基础

00:36.260 --> 00:38.260
基础是要打牢了 后边学习就比较轻松了

00:38.260 --> 00:41.260
其实很多同学觉得后边的东西比较难

00:41.260 --> 00:43.260
其实并不是后边东西难

00:43.260 --> 00:45.260
是因为前面的基础没有打牢

00:45.260 --> 00:48.260
所以我们把基础刚刚进行扫一遍

00:48.260 --> 00:51.260
该加强的地方 该总结的地方总结

00:51.260 --> 00:53.260
该注意的地方的注意

00:53.260 --> 00:57.260
好吧 那么我们首先从这里开始说

00:57.260 --> 00:59.260
就我们现在进入到介事学习了

00:59.260 --> 01:01.260
介事学习跟ATMR-CSS

01:01.260 --> 01:03.260
首先就一个感觉上就不太一样

01:03.260 --> 01:05.260
对不对 我们之前说过

01:05.260 --> 01:07.260
有点像那个拼图 对不对

01:07.260 --> 01:09.260
你没有拼完之前

01:09.260 --> 01:11.260
你都不知道自己拼成什么

01:11.260 --> 01:13.260
看不出来什么样的效果

01:13.260 --> 01:14.260
有这么一个特点

01:14.260 --> 01:17.260
为什么呢 因为介事它是一个命令式编程语言

01:17.260 --> 01:20.260
这个命令式编程语言跟ATMR-CSS不同

01:20.260 --> 01:24.260
我这里来给大家做一个简单的扩展吧

01:24.260 --> 01:26.260
其实我们的编程语言

01:26.260 --> 01:28.260
市面上有这么多

01:28.260 --> 01:30.260
把它分解出来的话

01:30.260 --> 01:31.260
就是两个大类

01:31.260 --> 01:34.260
一个大类的叫做声明式语言

01:34.260 --> 01:39.260
这种语言比较有代表性的就是ATMR-CSS

01:39.260 --> 01:41.260
以及你们将来会接触到的射口

01:41.260 --> 01:43.260
这些都属于声明式语言

01:43.260 --> 01:45.260
声明式语言它有个特点

01:45.260 --> 01:47.260
就是学习起来特别轻松

01:47.260 --> 01:49.260
容易看到效果

01:49.260 --> 01:52.260
单码少一点的就效果就少一点

01:52.260 --> 01:54.260
单码多一点的效果就多一点

01:54.260 --> 01:55.260
非常非常止观

01:55.260 --> 01:57.260
而且声明式语言

01:57.260 --> 02:00.260
它不需要了解计算机底层的工作原理

02:00.260 --> 02:02.260
当然你不需要了解它

02:02.260 --> 02:04.260
你就写一点单码

02:04.260 --> 02:06.260
就像Color的Red

02:06.260 --> 02:08.260
你这样一写效果就出来了

02:08.260 --> 02:10.260
写一点就出来一点

02:10.260 --> 02:14.260
它比较符合人类的思维方式的声明式语言

02:14.260 --> 02:16.260
声明式语言的比较简单好学

02:16.260 --> 02:20.260
另外一种语言叫做命令式语言

02:20.260 --> 02:22.260
命令式编程语言那就很多很多了

02:22.260 --> 02:24.260
包括什么C

02:24.260 --> 02:25.260
C++

02:25.260 --> 02:26.260
Csharp

02:26.260 --> 02:28.260
PHP

02:28.260 --> 02:29.260
Python

02:29.260 --> 02:30.260
还包括Java

02:30.260 --> 02:32.260
这些等等等等

02:32.260 --> 02:35.260
绝大部分语言都是命令式语言

02:35.260 --> 02:38.260
包括我们的解释

02:38.260 --> 02:40.260
所以说同学们我相信这里不少同学

02:40.260 --> 02:42.260
接触到的第一个人生当中

02:42.260 --> 02:44.260
接触到的第一个命令式语言

02:44.260 --> 02:45.260
就是解释了

02:45.260 --> 02:46.260
你们学的是前端吧

02:46.260 --> 02:47.260
对吧

02:47.260 --> 02:48.260
那学后端的同学

02:48.260 --> 02:49.260
第一个接触的命令式语言

02:50.260 --> 02:52.260
就是这么一个特点

02:52.260 --> 02:55.260
反正不管你学的哪个方向

02:55.260 --> 02:59.260
只要是你第一次接触命令式语言

02:59.260 --> 03:01.260
那都是有些难度的

03:01.260 --> 03:02.260
为什么呢

03:02.260 --> 03:03.260
因为命令式语言

03:03.260 --> 03:04.260
它的特点是

03:04.260 --> 03:06.260
它是跟数据打交道的

03:06.260 --> 03:07.260
你看我们之前

03:07.260 --> 03:08.260
学业前面和Csharp

03:08.260 --> 03:09.260
跟数据打交道的吗

03:09.260 --> 03:11.260
不打交道对吧

03:11.260 --> 03:13.260
天板那部分不叫数据

03:13.260 --> 03:14.260
就是一个一个的标圈

03:14.260 --> 03:16.260
写一个写啥你就出来啥

03:16.260 --> 03:18.260
但是它没有什么数据逻辑的变化

03:18.260 --> 03:20.260
比方说今天用户登录了

03:20.260 --> 03:22.260
我应该显示什么样的数据

03:22.260 --> 03:23.260
用户没有登录

03:23.260 --> 03:24.260
该显示什么样的数据

03:24.260 --> 03:25.260
对吧

03:25.260 --> 03:29.260
用户经常看一些化妆品

03:29.260 --> 03:30.260
对不对

03:30.260 --> 03:31.260
到我手里是不是

03:31.260 --> 03:32.260
应该推送一些数据

03:32.260 --> 03:33.260
对吧

03:33.260 --> 03:34.260
像这些数据的表达

03:34.260 --> 03:36.260
其实在生命式语言里边

03:36.260 --> 03:38.260
基本上是没有的

03:39.260 --> 03:41.260
但命令式语言的话

03:41.260 --> 03:43.260
那么它对数据的处理

03:44.260 --> 03:45.260
就丰富得多

03:45.260 --> 03:47.260
所以说命令式语言和功能强大

03:48.260 --> 03:50.260
但是它一个不好的地方就是

03:50.260 --> 03:51.260
入门的时候

03:51.260 --> 03:53.260
命令式语言就是入门来

03:53.260 --> 03:55.260
入门的时候不是那么轻松

03:55.260 --> 03:57.260
当然是相对的

03:57.260 --> 03:58.260
相对于生命式语言来说

03:58.260 --> 04:00.260
它入门也没有那么轻松

04:01.260 --> 04:03.260
但是它难度也不算是很高

04:04.260 --> 04:06.260
它不是一种无限的难度

04:06.260 --> 04:08.260
比方说这不是什么造火箭

04:08.260 --> 04:10.260
又不是搞什么芯片

04:10.260 --> 04:12.260
也不是造核武器

04:13.260 --> 04:15.260
需要几十年如一日的

04:15.260 --> 04:16.260
甚至都还不行

04:16.260 --> 04:18.260
还需要灵光一线

04:18.260 --> 04:19.260
才能够突破

04:19.260 --> 04:21.260
这部分没有那么夸张

04:21.260 --> 04:22.260
它再难

04:22.260 --> 04:24.260
它也是难度有限的

04:24.260 --> 04:25.260
一天搞不定

04:25.260 --> 04:26.260
那就两天

04:26.260 --> 04:27.260
两天搞不定

04:27.260 --> 04:28.260
那就一周

04:28.260 --> 04:30.260
总归是在短时间内

04:30.260 --> 04:32.260
是可以搞得定的

04:32.260 --> 04:33.260
无非就是一个一个的小问题

04:33.260 --> 04:34.260
每一个小问题

04:34.260 --> 04:35.260
突破一个少一个

04:35.260 --> 04:36.260
突破一个少一个

04:36.260 --> 04:38.260
其实也没有那么夸张

04:38.260 --> 04:39.260
它有一定难度

04:39.260 --> 04:40.260
但是这个难度

04:40.260 --> 04:41.260
是绝对是可以接受的

04:41.260 --> 04:43.260
绝对是每一个同学都能够度过的

04:44.260 --> 04:45.260
而且咱们课程里边

04:45.260 --> 04:46.260
也是给同学们

04:46.260 --> 04:48.260
进行考虑到了有难度的地方

04:48.260 --> 04:50.260
进行的有难度的地方

04:50.260 --> 04:52.260
进行的深入细致的讲解

04:53.260 --> 04:55.260
然后又配合大量的练习

04:55.260 --> 04:57.260
总归是能够让同学们突破的

04:57.260 --> 04:59.260
这是命令是编程远的特点

04:59.260 --> 05:01.260
大家要有这么一个心理的准备

05:01.260 --> 05:02.260
我就怕什么

05:02.260 --> 05:03.260
我说这一点

05:03.260 --> 05:04.260
我就怕有同学觉得

05:04.260 --> 05:05.260
这也是说

05:05.260 --> 05:07.260
跟CSS应该是一样简单

05:07.260 --> 05:08.260
不是的

05:08.260 --> 05:09.260
它肯定是有些难度的

05:09.260 --> 05:11.260
它练习量也会多很多

05:11.260 --> 05:13.260
这是这么个特点

05:13.260 --> 05:14.260
简单介绍一下

05:15.260 --> 05:17.260
然后它是一个命令是缘

05:17.260 --> 05:18.260
命令是缘的本质

05:18.260 --> 05:20.260
无论是学到哪个方向

05:20.260 --> 05:22.260
只要是它是命令是缘

05:22.260 --> 05:24.260
它的本质就是处理数据

05:24.260 --> 05:26.260
什么叫数据

05:26.260 --> 05:28.260
这个世界上所有的

05:28.260 --> 05:30.260
有用的信息

05:30.260 --> 05:31.260
或者说

05:31.260 --> 05:33.260
所有的信息都是数据

05:34.260 --> 05:36.260
从人类起源之前

05:36.260 --> 05:37.260
这个世界上

05:37.260 --> 05:40.260
这个宇宙单身之日开始

05:40.260 --> 05:42.260
就有数据产生了

05:42.260 --> 05:44.260
宇宙单身的时间点

05:44.260 --> 05:45.260
宇宙大爆炸

05:45.260 --> 05:47.260
当时的基点是什么样子

05:47.260 --> 05:49.260
现在目前宇宙的半径

05:49.260 --> 05:51.260
然后有多少个星球

05:51.260 --> 05:52.260
每个星球里边

05:52.260 --> 05:53.260
是不是有各种各样的数据

05:53.260 --> 05:54.260
全都是数据

05:55.260 --> 05:56.260
包括每一个人

05:56.260 --> 05:58.260
身高体重 年龄姓名

05:58.260 --> 05:59.260
出生日期

05:59.260 --> 06:01.260
等等等等等等

06:01.260 --> 06:02.260
都是数据

06:02.260 --> 06:05.260
这个宇宙当中有无穷无尽的数据

06:05.260 --> 06:06.260
那么这些数据

06:06.260 --> 06:08.260
是不是都需要计算机来表达出来

06:08.260 --> 06:09.260
来进行处理呢

06:09.260 --> 06:10.260
也不是

06:11.260 --> 06:12.260
所以说我们计算机

06:12.260 --> 06:13.260
如果说要能够处理

06:13.260 --> 06:14.260
全宇宙的数据

06:14.260 --> 06:16.260
那整个爆炸了

06:17.260 --> 06:18.260
根本就装不下

06:18.260 --> 06:19.260
全世界的地区

06:19.260 --> 06:20.260
所有的计算机

06:20.260 --> 06:21.260
加起来都装不下

06:21.260 --> 06:22.260
所以说不可能处理

06:22.260 --> 06:23.260
全部的数据

06:23.260 --> 06:24.260
我们只是处理

06:24.260 --> 06:25.260
我们比较关心的数据

06:25.260 --> 06:27.260
比方说你做一个商城

06:27.260 --> 06:28.260
那你关心的数据

06:28.260 --> 06:30.260
那就是用户的商品

06:30.260 --> 06:31.260
物流

06:31.260 --> 06:32.260
就这些数据

06:32.260 --> 06:33.260
其他什么地球公传

06:34.260 --> 06:35.260
地球自转

06:35.260 --> 06:36.260
跟你没什么关系

06:37.260 --> 06:38.260
这就是那个数据

06:38.260 --> 06:39.260
就是我们计算机

06:39.260 --> 06:42.260
其实就是处理部分的

06:42.260 --> 06:43.260
需要关心的数据

06:44.260 --> 06:46.260
那么处理数据的过程是什么呢

06:46.260 --> 06:49.260
首先就是如何表达一个数据

06:49.260 --> 06:50.260
如何表达数据

06:51.260 --> 06:53.830
表达数据

06:53.830 --> 06:55.830
怎么样表达数据呢

06:55.830 --> 06:56.830
比方说你是一个人

06:56.830 --> 06:57.830
那你这个人身上

06:57.830 --> 06:58.830
有很多很多的数据

06:58.830 --> 06:59.830
邓哥有很多数据

07:00.830 --> 07:01.830
他有自己的全名

07:01.830 --> 07:02.830
邓序明

07:02.830 --> 07:03.830
他有自己的年龄

07:03.830 --> 07:04.830
81岁

07:04.830 --> 07:05.830
他有自己的性别

07:05.830 --> 07:06.830
男

07:06.830 --> 07:08.830
他有自己毕业的学校

07:08.830 --> 07:09.830
他有自己的出生日期

07:09.830 --> 07:10.830
他有邓少

07:10.830 --> 07:11.830
他邓少

07:11.830 --> 07:13.830
还有各种各样的数据

07:13.830 --> 07:15.830
那么这个人有很多很多的数据

07:15.830 --> 07:16.830
首先第一个问题就是

07:16.830 --> 07:19.830
那我怎么在程序里面

07:19.830 --> 07:20.830
描述出来的

07:20.830 --> 07:21.830
我在程序里面怎么来描述

07:21.830 --> 07:23.830
邓哥这个东西

07:23.830 --> 07:25.830
年龄我该怎么描述

07:25.830 --> 07:27.830
他的手机号我该怎么描述

07:27.830 --> 07:28.830
这是表达数据

07:28.830 --> 07:30.830
我们这里做知识回顾

07:30.830 --> 07:32.830
首先要做的回顾就是

07:32.830 --> 07:33.830
数据的表达

07:33.830 --> 07:34.830
我在程序里面

07:34.830 --> 07:35.830
该怎么来描述一个数据

07:36.830 --> 07:38.830
那么后边我们还会

07:38.830 --> 07:40.830
我们之前也学过了

07:40.830 --> 07:42.830
什么分支判断

07:42.830 --> 07:43.830
循环

07:43.830 --> 07:44.830
那都是

07:44.830 --> 07:47.830
都是比较像那个分支判断

07:47.830 --> 07:48.830
那什么意思呢

07:48.830 --> 07:50.830
就是说我不同的情况下

07:50.830 --> 07:51.830
我该对数据

07:51.830 --> 07:53.830
该进行怎么样的处理

07:53.830 --> 07:54.830
如果这样子

07:54.830 --> 07:55.830
我就怎么去处理数据

07:55.830 --> 07:56.830
如果另外一种方式

07:56.830 --> 07:57.830
我就该怎么去处理数据

07:57.830 --> 07:58.830
这不就是分支吗

07:58.830 --> 08:00.830
EVO ELSE

08:00.830 --> 08:01.830
对不对

08:01.830 --> 08:02.830
有的时候

08:02.830 --> 08:03.830
我们要反复的处理

08:03.830 --> 08:04.830
一些数据

08:04.830 --> 08:06.830
它的处理过程是一样的

08:06.830 --> 08:08.830
那么这就是循环

08:08.830 --> 08:09.830
有的时候我们程序里面

08:09.830 --> 08:11.830
出现了很多个地方

08:11.830 --> 08:12.830
它们隔开的

08:12.830 --> 08:13.830
有的时候

08:13.830 --> 08:14.830
我们要

08:14.830 --> 08:15.830
经过这么一个过程

08:15.830 --> 08:16.830
来处理一块数据

08:16.830 --> 08:17.830
有的时候我们要经过

08:17.830 --> 08:19.830
另外也是经过这个过程

08:19.830 --> 08:20.830
处理一次数据

08:20.830 --> 08:21.830
那么这个时候

08:21.830 --> 08:22.830
我们就提取一下

08:22.830 --> 08:23.830
处理过程

08:23.830 --> 08:24.830
就变成一个函数

08:24.830 --> 08:25.830
这都是

08:25.830 --> 08:27.830
其实我们玩的整个事情

08:27.830 --> 08:29.830
包括我们之后学习界面

08:29.830 --> 08:32.830
就操作这个浏览器的界面

08:32.830 --> 08:33.830
那也是在处理数据

08:33.830 --> 08:35.830
界面上每一个东西都是数据

08:35.830 --> 08:36.830
所以说我们

08:36.830 --> 08:38.830
整个的命令是语言

08:38.830 --> 08:39.830
玩的就是什么呢

08:39.830 --> 08:40.830
玩的就是数据

08:40.830 --> 08:42.830
你把数据玩会了

08:42.830 --> 08:43.830
玩通了

08:43.830 --> 08:44.830
玩溜了

08:44.830 --> 08:47.830
那后面的代码是非常非常轻松的

08:47.830 --> 08:49.830
就是需要这么一个过程

08:49.830 --> 08:50.830
来强化练习

08:50.830 --> 08:52.830
当然处理数据的过程中

08:52.830 --> 08:53.830
有很多很多的细节

08:53.830 --> 08:55.830
就像我们之前说的

08:55.830 --> 08:56.830
就是一个小问题

08:56.830 --> 08:57.830
一个小问题

08:57.830 --> 08:58.830
一个不起眼的问题

08:58.830 --> 08:59.830
一个不起眼的问题解决

08:59.830 --> 09:00.830
就能够完成整个效果

09:00.830 --> 09:02.830
就包括我们之前学的

09:03.830 --> 09:04.830
不仅是这样子吗

09:04.830 --> 09:05.830
一个小问题

09:05.830 --> 09:06.830
一个小问题解决

09:06.830 --> 09:07.830
也就完成了

09:07.830 --> 09:09.830
所以说大家也不用太害怕

09:10.830 --> 09:11.830
这是这一块

09:11.830 --> 09:13.830
本质就是处理数据

09:13.830 --> 09:14.830
那么这一块

09:14.830 --> 09:16.830
我们来回顾一下

09:16.830 --> 09:18.830
数据的在程序里面

09:18.830 --> 09:19.830
三种表现形式

09:19.830 --> 09:21.830
就这三种没别的了

09:21.830 --> 09:22.830
一个是辨量

09:22.830 --> 09:24.830
是不是来存出一些数据

09:24.830 --> 09:26.830
来存放一些数据

09:26.830 --> 09:27.830
存到哪里

09:27.830 --> 09:28.830
存到内存里面

09:28.830 --> 09:29.830
每个辨量

09:29.830 --> 09:30.830
就是一个箱子

09:30.830 --> 09:31.830
可以随便放

09:32.830 --> 09:34.830
另外一个就是质面量

09:34.830 --> 09:35.830
啥叫质面量呢

09:35.830 --> 09:37.830
质面量其实也很好理解

09:37.830 --> 09:39.830
同学们之前可能没有

09:39.830 --> 09:40.830
接触过这个词

09:40.830 --> 09:41.830
那么这里我把

09:41.830 --> 09:43.830
专业的词汇告诉大家

09:43.830 --> 09:44.830
毕竟你们是保着一行的

09:44.830 --> 09:46.830
有些专业词汇里得知道

09:46.830 --> 09:48.830
比方说我定一个辨量

09:48.830 --> 09:49.830
A等1

09:49.830 --> 09:50.830
这个玩意儿是辨量

09:50.830 --> 09:51.830
这个没什么好说的

09:51.830 --> 09:52.830
这个玩意儿是咋

09:52.830 --> 09:53.830
这个玩意儿叫质面量

09:53.830 --> 09:54.830
怎么叫质面量

09:54.830 --> 09:56.830
就是直接书写的数据

09:57.830 --> 09:58.830
叫质面量

09:58.830 --> 09:59.830
那一是质面量

09:59.830 --> 10:00.830
那这个ABC

10:00.830 --> 10:01.830
它也是质面量

10:01.830 --> 10:03.830
它是个字幅串的质面量

10:03.830 --> 10:05.830
NOW也是质面量

10:06.830 --> 10:08.830
Undefined也是质面量

10:09.830 --> 10:12.830
True Force也是质面量

10:12.830 --> 10:13.830
这些都是质面量

10:13.830 --> 10:14.830
就直接书写的

10:14.830 --> 10:15.830
包括对象

10:15.830 --> 10:16.830
你给它复制为一个对象

10:16.830 --> 10:18.830
对象这个玩意儿的写法

10:18.830 --> 10:20.830
就直接写个对象放在这

10:20.830 --> 10:21.830
那么这就是质面量

10:21.830 --> 10:23.830
直接用一个

10:23.830 --> 10:26.830
直接的值来表达

10:26.830 --> 10:27.830
一个数据

10:27.830 --> 10:28.830
这就是质面量

10:29.830 --> 10:31.830
那么接下来是表达式

10:31.830 --> 10:33.830
咋又叫表达式呢

10:33.830 --> 10:35.830
我们刚才不是说了很多数据吗

10:35.830 --> 10:36.830
有数字

10:36.830 --> 10:37.830
字不算步耳

10:37.830 --> 10:38.830
乱七八糟的大堆数据

10:38.830 --> 10:40.830
那么这些数据可能会降

10:40.830 --> 10:42.830
参与进来来进行运算

10:42.830 --> 10:43.830
那么这个比方

10:43.830 --> 10:45.830
我们这里写个1加3

10:45.830 --> 10:47.830
那这个1是不是数据

10:47.830 --> 10:48.830
是数据吗

10:48.830 --> 10:49.830
3是不是数据

10:49.830 --> 10:50.830
是数据吗

10:50.830 --> 10:51.830
那么这两个数据

10:51.830 --> 10:52.830
是不是在参与运算

10:52.830 --> 10:53.830
对不对

10:53.830 --> 10:54.830
那么这个玩意儿

10:54.830 --> 10:55.830
就是一个表达式

10:56.830 --> 10:57.830
表达式就是这个东西

10:58.830 --> 11:00.830
表达式的概念是特别重要的

11:00.830 --> 11:01.830
这个翻译的这个词

11:01.830 --> 11:02.830
它不是很好翻译

11:02.830 --> 11:04.830
它不是那么直观

11:04.830 --> 11:05.830
它的英文里面

11:05.830 --> 11:06.830
比较直观

11:06.830 --> 11:07.830
Expression

11:08.830 --> 11:09.830
一个prion

11:09.830 --> 11:11.830
就是一小段短语

11:11.830 --> 11:12.830
就是这个意思

11:12.830 --> 11:13.830
比方说吧

11:14.830 --> 11:16.830
我们有这么一个句式

11:16.830 --> 11:17.830
叫什么

11:17.830 --> 11:19.830
我爱你

11:19.830 --> 11:21.830
我爱你

11:21.830 --> 11:22.830
那么在中文里面

11:22.830 --> 11:24.830
这个玩意儿就是个表达式

11:24.830 --> 11:26.830
这个玩意儿就是个表达式

11:26.830 --> 11:27.830
因为你看

11:27.830 --> 11:28.830
这个地方是可以换的

11:28.830 --> 11:29.830
对吧

11:29.830 --> 11:30.830
邓哥爱你

11:30.830 --> 11:31.830
是可以换的

11:32.830 --> 11:33.830
诚哥爱你

11:34.830 --> 11:36.830
邓哥的邻居爱你

11:36.830 --> 11:37.830
是可以

11:37.830 --> 11:39.830
那么这个里是可以随着替换

11:39.830 --> 11:40.830
对吧

11:40.830 --> 11:41.830
所以前面那一块是一个数据

11:41.830 --> 11:43.830
后面那一块也是一个数据

11:43.830 --> 11:44.830
对吧

11:44.830 --> 11:45.830
邓哥的邻居爱邓哥

11:46.830 --> 11:47.830
是可以

11:47.830 --> 11:48.830
后面是可以替换的

11:48.830 --> 11:50.830
那么整个这个短语

11:50.830 --> 11:51.830
就是个表达式

11:51.830 --> 11:53.830
表达式还是有独立含意的

11:54.830 --> 11:55.830
这就是个表达式

11:55.830 --> 11:56.830
一加三可以

11:56.830 --> 11:58.830
二加四是个表达式

11:58.830 --> 11:59.830
二加二是个表达式

11:59.830 --> 12:00.830
都是表达式

12:00.830 --> 12:02.830
二加二乘一三是个表达式

12:02.830 --> 12:03.830
也是表达式

12:04.830 --> 12:06.830
那这个表达式又怎么理解呢

12:06.830 --> 12:07.830
我们看

12:07.830 --> 12:09.830
这一部分是一个表达式

12:09.830 --> 12:11.830
短语和短语之间又構成一个短语

12:11.830 --> 12:12.830
对吧

12:12.830 --> 12:13.830
是吧

12:13.830 --> 12:14.830
那些套玩意儿

12:14.830 --> 12:15.830
这个玩意儿是个表达式

12:15.830 --> 12:17.830
那整个这一块又是个表达式

12:17.830 --> 12:18.830
我们只程序里面

12:18.830 --> 12:20.830
大号目出都是表达式

12:23.830 --> 12:26.830
说表达式它也是数据

12:26.830 --> 12:27.830
这又怎么理解

12:27.830 --> 12:29.830
为什么表达式也是数据

12:29.830 --> 12:31.830
那表达式总得有个结果吧

12:31.830 --> 12:32.830
对吧

12:32.830 --> 12:33.830
是不是得有个结果

12:33.830 --> 12:34.830
那这个结果是啥

12:34.830 --> 12:35.830
比方说这个结果是多少

12:35.830 --> 12:37.830
这个结果就是七啊

12:39.830 --> 12:40.830
这个结果是八

12:42.830 --> 12:43.830
那这个八是不是结果

12:43.830 --> 12:44.830
是不是数据

12:44.830 --> 12:45.830
那就是数据

12:45.830 --> 12:47.830
我们说表达式它是一个数据

12:47.830 --> 12:48.830
说的是啥

12:48.830 --> 12:51.830
说的是表达式的结果

12:51.830 --> 12:52.830
是一个数据

12:52.830 --> 12:53.830
指的是这么个意思

12:54.830 --> 12:55.830
对吧

12:55.830 --> 12:57.830
所以程序里面有很多的表达式

12:57.830 --> 12:59.830
表达式的地方它会运算出来

12:59.830 --> 13:01.830
运算出来会成为一个结果

13:01.830 --> 13:02.830
这个结果就是数据

13:02.830 --> 13:03.830
那么这个结果

13:03.830 --> 13:04.830
还有一个专业的说法

13:04.830 --> 13:06.830
叫做返回值

13:06.830 --> 13:07.830
我们这个

13:07.830 --> 13:08.830
不用理解

13:08.830 --> 13:09.830
这个返回值

13:09.830 --> 13:10.830
就是它的结果的意思

13:10.830 --> 13:12.830
这个玩意儿就

13:12.830 --> 13:14.830
还是有一些翻译的问题吧

13:14.830 --> 13:16.830
大家这么说

13:16.830 --> 13:17.830
这是个表达式

13:17.830 --> 13:19.830
这个表达式的结果

13:19.830 --> 13:20.830
它称作返回值

13:20.830 --> 13:21.830
这个表达式我们说

13:21.830 --> 13:23.830
它返回值是八

13:24.830 --> 13:25.830
那么还有一个说法

13:25.830 --> 13:27.830
叫做返回内形

13:27.830 --> 13:28.830
返回内形是什么呢

13:28.830 --> 13:29.830
就是这个值的内形

13:29.830 --> 13:31.830
这个表达式返回内形

13:31.830 --> 13:32.830
返回值是八

13:32.830 --> 13:33.830
返回的内形是什么呢

13:33.830 --> 13:35.830
返回的内形是

13:35.830 --> 13:36.830
Number

13:36.830 --> 13:37.830
对吧

13:37.830 --> 13:38.830
数字

13:38.830 --> 13:39.830
懂的意思吧

13:39.830 --> 13:40.830
这个表达式

13:41.830 --> 13:42.830
好那么说了半天

13:42.830 --> 13:44.830
我们数据里面不就有三种形式吗

13:44.830 --> 13:45.830
边量

13:45.830 --> 13:46.830
字面量

13:46.830 --> 13:47.830
表达式

13:48.830 --> 13:49.830
那么这三种形式

13:49.830 --> 13:50.830
注意它

13:50.830 --> 13:52.830
有一个非常非常重要的一个点

13:52.830 --> 13:54.830
下面这句话好好看清楚

13:55.830 --> 13:56.830
程序中

13:56.830 --> 13:59.830
任何需要数据的地方

13:59.830 --> 14:00.830
都可以使用

14:00.830 --> 14:03.830
上边任意一种数据表达

14:04.830 --> 14:05.830
这说啥意思

14:05.830 --> 14:06.830
我给它举个例子

14:08.830 --> 14:09.830
比方说

14:10.830 --> 14:11.830
我们这个就来一个

14:11.830 --> 14:12.830
边量负值吧

14:14.830 --> 14:15.830
边量负值

14:15.830 --> 14:16.830
等于

14:16.830 --> 14:17.830
这个怎么的一件呢

14:17.830 --> 14:18.830
我们说

14:18.830 --> 14:19.830
边量定一个边量

14:19.830 --> 14:20.830
给它负值

14:20.830 --> 14:22.830
是不是这里要填数据

14:22.830 --> 14:23.830
负值为止

14:23.830 --> 14:24.830
把什么数据

14:24.830 --> 14:25.830
给这个边量

14:25.830 --> 14:26.830
是不是要这样的写

14:26.830 --> 14:27.830
对吧

14:27.830 --> 14:29.830
那这里就可以写法有很多了

14:29.830 --> 14:30.830
可以写字面量

14:30.830 --> 14:32.830
这是不是字面量的写法

14:32.830 --> 14:33.830
把数据负值给A

14:33.830 --> 14:34.830
也可以写什么

14:34.830 --> 14:36.830
也可以写边量

14:37.830 --> 14:38.830
数据的三种形式

14:38.830 --> 14:39.830
边量字面量表达式

14:39.830 --> 14:40.830
可以写字面量

14:40.830 --> 14:41.830
可不可以写边量

14:41.830 --> 14:42.830
可以

14:42.830 --> 14:44.830
比方说你之前有个边量B

14:44.830 --> 14:46.830
那我是不是可以把B放这

14:46.830 --> 14:47.830
对吧

14:47.830 --> 14:48.830
把B负值给A

14:48.830 --> 14:49.830
那没什么意思

14:49.830 --> 14:50.830
把B的数据读出来

14:50.830 --> 14:51.830
负值给A

14:51.830 --> 14:52.830
那除了写边量之外

14:52.830 --> 14:54.830
还是不是还可以写表达式

14:54.830 --> 14:55.830
B乘以二

14:55.830 --> 14:56.830
可不可以

14:56.830 --> 14:57.830
这是不是个表达式

14:57.830 --> 14:58.830
这是个表达式嘛

14:58.830 --> 15:00.830
那么这个把表达式

15:00.830 --> 15:01.830
有什么意思呢

15:01.830 --> 15:02.830
把这个表达式的运算结果

15:02.830 --> 15:04.830
也就是返回结果

15:04.830 --> 15:05.830
负值给A

15:05.830 --> 15:06.830
懂了意思吧

15:06.830 --> 15:07.830
任何可以填数据的地方

15:07.830 --> 15:09.830
都可以填表达式

15:10.830 --> 15:11.830
那比方说

15:11.830 --> 15:12.830
我这里还要输出

15:12.830 --> 15:13.830
输出一个1

15:13.830 --> 15:14.830
可不可以

15:14.830 --> 15:15.830
可以啊

15:15.830 --> 15:17.830
把边量值读出来输出

15:17.830 --> 15:19.830
那可不可以填表达式呢

15:19.830 --> 15:20.830
A乘以B

15:20.830 --> 15:21.830
可不可以

15:21.830 --> 15:22.830
可以

15:22.830 --> 15:24.830
把这个表达式的结果

15:24.830 --> 15:25.830
输出

15:25.830 --> 15:26.830
懂了意思吧

15:26.830 --> 15:28.830
就任何可以填数据的地方

15:28.830 --> 15:29.830
都可以填

15:29.830 --> 15:30.830
字边量

15:30.830 --> 15:31.830
边量

15:31.830 --> 15:32.830
表达式

15:32.830 --> 15:33.830
没有例外

15:33.830 --> 15:34.830
一点例外都没有

15:34.830 --> 15:35.830
所以说

15:35.830 --> 15:37.830
这里就是这么个特点

15:37.830 --> 15:38.830
那比方说

15:38.830 --> 15:39.830
当我这里可以

15:39.830 --> 15:41.830
输出什么数据

15:41.830 --> 15:43.830
那可不可以填个边量呢

15:43.830 --> 15:44.830
可以啊

15:44.830 --> 15:46.830
那我这里可以这样填吗

15:46.830 --> 15:47.830
也可以啊

15:47.830 --> 15:48.830
这也是个表达式

15:48.830 --> 15:49.830
把这个表达式

15:49.830 --> 15:50.830
运算结果

15:50.830 --> 15:51.830
输出

15:52.830 --> 15:53.830
这是这一块的

15:53.830 --> 15:54.830
需要大家理解的

15:54.830 --> 15:55.830
而且这一点

15:55.830 --> 15:57.830
不是说我这里讲了一两句话

15:57.830 --> 15:58.830
就完了

15:58.830 --> 16:00.830
后边我们会反复反复

16:00.830 --> 16:01.830
强调这一点

16:01.830 --> 16:03.830
因为这一点

16:03.830 --> 16:04.830
会让我们的程序

16:04.830 --> 16:05.830
变得极为凝活

16:05.830 --> 16:08.830
就是它写法千变万化

16:09.830 --> 16:10.830
有些东西

16:10.830 --> 16:11.830
我们不要

16:11.830 --> 16:12.830
这里可以这样子写

16:12.830 --> 16:13.830
我也可以把它

16:13.830 --> 16:15.830
保存一个边量里边

16:15.830 --> 16:17.830
然后把个边量放这

16:19.830 --> 16:20.830
是不是也可以

16:20.830 --> 16:21.830
对不对

16:21.830 --> 16:22.830
它写法就会出现

16:22.830 --> 16:23.830
非常非常多

16:24.830 --> 16:25.830
OK

16:25.830 --> 16:26.830
这就是关于这个

16:27.830 --> 16:28.830
三种形式

16:28.830 --> 16:29.830
老在这边一定要记住

16:29.830 --> 16:30.830
边量字面量表达式

16:30.830 --> 16:31.830
任何需要数据的地方

16:31.830 --> 16:32.830
都会写成三种

16:33.830 --> 16:34.830
好了

16:34.830 --> 16:35.830
我们前置的之

16:35.830 --> 16:36.830
这里的回顾就差不多了

16:36.830 --> 16:37.830
接下来我们来做练习

16:37.830 --> 16:39.830
就是我们这些

16:39.830 --> 16:40.830
支持回顾

16:40.830 --> 16:42.830
都是以提的方式

16:43.830 --> 16:44.830
这里只有两道题

16:44.830 --> 16:45.830
还得多了

16:45.830 --> 16:46.830
都是以提的方式

16:46.830 --> 16:47.830
发给大家

16:47.830 --> 16:48.830
然后我们在做提的过程中

16:48.830 --> 16:50.830
发现了有一些

16:50.830 --> 16:51.830
需要注意的点

16:51.830 --> 16:52.830
或者是我们需要

16:52.830 --> 16:53.830
强调的支持

16:53.830 --> 16:55.830
或者是我们需要补充的

16:55.830 --> 16:56.830
那么在文档里边

16:56.830 --> 16:57.830
我下面都写了的

16:57.830 --> 16:58.830
来给大家进一补充

16:59.830 --> 17:00.830
我们来做提

17:00.830 --> 17:01.830
这里只有两道题

17:01.830 --> 17:02.830
第一道题问题

17:04.830 --> 17:05.830
就数据的表达这一块

17:05.830 --> 17:06.830
其实我们玩的是什么

17:06.830 --> 17:07.830
玩的就是三个

17:08.830 --> 17:09.830
始终跟上这三个相关

17:09.830 --> 17:11.830
边量字面量表达式

17:11.830 --> 17:12.830
始终跟这三个有关系

17:12.830 --> 17:13.830
这三个里边

17:13.830 --> 17:14.830
有哪些细节支持

17:14.830 --> 17:15.830
有哪些需要注意的

17:15.830 --> 17:16.830
哪些我们平时开发

17:16.830 --> 17:18.830
需要经常遇到的

17:18.830 --> 17:20.830
我给大家进行统一的讲解

17:21.830 --> 17:22.830
首先是辨量这一块

17:22.830 --> 17:24.830
辨量这一块有一个地方

17:24.830 --> 17:26.830
是比较容易犯错误的地方

17:26.830 --> 17:28.830
所以说这里做到提

17:28.830 --> 17:30.830
下边的哪些辨量命名

17:30.830 --> 17:31.830
是合法的

17:32.830 --> 17:33.830
这些都是辨量的名字

17:34.830 --> 17:36.830
不知道同学们还记不记得

17:36.830 --> 17:37.830
可以看一下

17:37.830 --> 17:38.830
看自己写的对不对

17:39.830 --> 17:40.830
有这些辨量命名

17:40.830 --> 17:41.830
有这些辨量命名

17:41.830 --> 17:42.830
哪些是合法的

17:43.830 --> 17:44.830
这里就涉及到一个

17:44.830 --> 17:45.830
辨量命名的知识

17:45.830 --> 17:46.830
就给大家补充一下

17:46.830 --> 17:49.830
这个知识的名字

17:49.830 --> 17:50.830
叫做标识符

17:50.830 --> 17:51.830
那啥叫标识符

17:51.830 --> 17:52.830
不就是个辨量名字吗

17:52.830 --> 17:54.830
为什么叫标识符呢

17:54.830 --> 17:56.830
程序中所有

17:56.830 --> 17:58.830
可以自行命名的地方

17:58.830 --> 18:00.830
都称之为标识符

18:01.830 --> 18:02.830
比方哪些辨量的名字

18:03.830 --> 18:04.830
函数的名字

18:05.830 --> 18:06.830
参数的名字

18:06.830 --> 18:07.830
你们之前学过函数

18:07.830 --> 18:09.830
可能现在忘了差不多了

18:09.830 --> 18:10.830
没关系

18:10.830 --> 18:11.830
我们后边会附写函数

18:12.830 --> 18:13.830
一个函数

18:14.830 --> 18:15.830
那里看这里

18:15.830 --> 18:16.830
是不是有三个地方可以命名

18:16.830 --> 18:17.830
函数的名字

18:17.830 --> 18:18.830
是不是可以自己订

18:19.830 --> 18:20.830
参数的名字

18:20.830 --> 18:21.830
是不是可以自己订

18:21.830 --> 18:22.830
那么这些都是

18:22.830 --> 18:23.830
都是属于标识符

18:23.830 --> 18:24.830
不仅定是辨量

18:25.830 --> 18:26.830
那么标识符

18:26.830 --> 18:27.830
在届识里边

18:27.830 --> 18:28.830
有统一的命名规范

18:29.830 --> 18:31.830
第一条规则

18:31.830 --> 18:33.830
标识符里边允许哪些

18:33.830 --> 18:34.830
允许数字

18:34.830 --> 18:35.830
字母

18:35.830 --> 18:36.830
下滑线

18:36.830 --> 18:37.830
多了符号

18:38.830 --> 18:39.830
简单吧

18:39.830 --> 18:40.830
就允许这四个

18:41.830 --> 18:42.830
允不允许中文

18:43.830 --> 18:44.830
实际上是允许的

18:44.830 --> 18:45.830
但是

18:46.830 --> 18:47.830
不能这么去干

18:47.830 --> 18:48.830
不要给辨量的名字

18:48.830 --> 18:49.830
取个中文

18:49.830 --> 18:50.830
不要去这么干

18:50.830 --> 18:51.830
我们就认为

18:51.830 --> 18:52.830
它允许数字

18:52.830 --> 18:53.830
字母下滑线多了符号

18:54.830 --> 18:55.830
不得以数字开头

18:55.830 --> 18:56.830
这个不用怎么解释了吧

18:56.830 --> 18:58.830
不能和关键字重复

18:59.830 --> 19:00.830
有冲突

19:00.830 --> 19:01.830
怎么叫关键字冲突

19:01.830 --> 19:02.830
比方说你定一个辨量名字

19:02.830 --> 19:03.830
这个辨量名字就VAR

19:03.830 --> 19:04.830
那行不行

19:04.830 --> 19:05.830
那肯定不行

19:06.830 --> 19:08.830
其实这一点我们不要去

19:08.830 --> 19:09.830
有时候说

19:09.830 --> 19:10.830
是不是需要把关键字那些

19:10.830 --> 19:11.830
全部背下来

19:11.830 --> 19:12.830
不用

19:13.830 --> 19:14.830
为啥不用

19:14.830 --> 19:16.830
因为你如果说跟关键字

19:16.830 --> 19:17.830
冲突了

19:17.830 --> 19:18.830
你直接就抱错了

19:19.830 --> 19:20.830
它就会提示你

19:21.830 --> 19:22.830
你看到这个提示

19:22.830 --> 19:23.830
我就不相信你

19:23.830 --> 19:24.830
还反应不过来

19:24.830 --> 19:25.830
所以说

19:25.830 --> 19:26.830
比方说你这里写个方形

19:27.830 --> 19:28.830
它就直接抱错了

19:28.830 --> 19:30.830
所以说你不用担心这一点

19:30.830 --> 19:31.830
这种情况

19:31.830 --> 19:32.830
我们的开发中

19:32.830 --> 19:33.830
基本上是遇不到的

19:34.830 --> 19:35.830
然后呢

19:35.830 --> 19:37.830
最后一个不是强行规定

19:37.830 --> 19:38.830
建议

19:38.830 --> 19:40.830
那么建议的站在元老师这里

19:40.830 --> 19:41.830
就是强行规定

19:42.830 --> 19:43.830
所以说你如果说

19:43.830 --> 19:45.830
这第四条不满足

19:45.830 --> 19:47.830
虽然说程序不会把你怎么样

19:47.830 --> 19:49.830
元老师花个圈圈组这里

19:49.830 --> 19:50.830
不能这样去干

19:50.830 --> 19:51.830
所以说呢

19:51.830 --> 19:53.830
第四个也把它当成强行规定

19:53.830 --> 19:55.830
使用妥封命名法

19:55.830 --> 19:57.830
什么叫妥封命名法呢

19:57.830 --> 19:58.830
就是说

19:58.830 --> 19:59.830
如果说有一个单词

19:59.830 --> 20:01.830
比方说你定一个辨量

20:01.830 --> 20:02.830
叫做最大宽度

20:03.830 --> 20:04.830
那怎么写呢

20:04.830 --> 20:05.830
是不是有两个单词

20:05.830 --> 20:07.830
最大最大用什么max

20:07.830 --> 20:08.830
宽度

20:08.830 --> 20:10.830
宽度有什么位置

20:10.830 --> 20:11.830
两个单词

20:11.830 --> 20:12.830
两个单词

20:12.830 --> 20:13.830
从第二个单词开始

20:13.830 --> 20:14.830
手字母大写

20:14.830 --> 20:16.830
每个单词的手字母大写

20:16.830 --> 20:17.830
就这个意思

20:17.830 --> 20:18.830
就是妥封命名法

20:18.830 --> 20:19.830
像骆驼一样

20:19.830 --> 20:20.830
妥封一样的

20:20.830 --> 20:21.830
妥封那个地方

20:21.830 --> 20:23.830
就是打写的字母

20:23.830 --> 20:24.830
就是妥封命名法

20:24.830 --> 20:25.830
就这么简单

20:25.830 --> 20:26.830
就出现多个单词的时候

20:26.830 --> 20:27.830
从第二个单词开始

20:27.830 --> 20:29.830
手字母大写

20:29.830 --> 20:30.830
这是命名规范

20:30.830 --> 20:31.830
大家可以说

20:31.830 --> 20:32.830
我不懂英文

20:32.830 --> 20:33.830
不好

20:33.830 --> 20:34.830
那我能用拼音吗

20:34.830 --> 20:35.830
可以

20:35.830 --> 20:36.830
我允许用拼音

20:36.830 --> 20:37.830
但是呢

20:37.830 --> 20:38.830
不能一长时间

20:38.830 --> 20:39.830
用这个玩意儿

20:39.830 --> 20:40.830
比方说你用拼音

20:40.830 --> 20:43.830
最大宽度

20:43.830 --> 20:44.830
包括很多企业

20:44.830 --> 20:46.830
里边好像不少的开发者

20:46.830 --> 20:47.830
都要用拼音

20:47.830 --> 20:49.830
我可以允许你用拼音

20:49.830 --> 20:50.830
但是呢

20:50.830 --> 20:51.830
没必要嘛

20:51.830 --> 20:53.830
先都打一年了

20:53.830 --> 20:54.830
都2021年了

20:54.830 --> 20:56.830
马上就2022年了

20:56.830 --> 20:59.830
翻译软件了解一下

20:59.830 --> 21:00.830
电脑上安装一个

21:00.830 --> 21:01.830
翻译软件吧

21:01.830 --> 21:03.830
然后最大

21:03.830 --> 21:06.830
你看一下吧

21:06.830 --> 21:07.830
音量池点里边

21:07.830 --> 21:09.830
Maximum

21:09.830 --> 21:10.830
对不对

21:10.830 --> 21:12.830
哪怕你用MOS也行嘛

21:12.830 --> 21:14.830
其实那你多看老社代吧

21:14.830 --> 21:16.830
其实我们平时开发的时候

21:16.830 --> 21:17.830
用那些单词呢

21:17.830 --> 21:18.830
反正不去都差不多

21:18.830 --> 21:19.830
像宽度呢

21:19.830 --> 21:20.830
像CSS里边

21:20.830 --> 21:21.830
有很多单词

21:21.830 --> 21:22.830
基本上你都会的对吧

21:22.830 --> 21:23.830
所以说

21:23.830 --> 21:24.830
这也不是一个人

21:24.830 --> 21:25.830
很大的障碍

21:25.830 --> 21:26.830
基本上没什么障碍

21:26.830 --> 21:27.830
你用一下翻译软件

21:27.830 --> 21:28.830
就是麻烦一点吧

21:28.830 --> 21:29.830
都花个几秒钟

21:29.830 --> 21:30.830
慢慢的就熟悉这些单词

21:30.830 --> 21:32.830
这不是问题

21:32.830 --> 21:34.830
OK就是关于标识符

21:34.830 --> 21:35.830
那么现在我们再回到第一题

21:35.830 --> 21:37.830
看一下哪些标识符是合法的

21:37.830 --> 21:38.830
你们可以暂停视频

21:38.830 --> 21:39.830
自己看一下

21:39.830 --> 21:41.830
OK那我这里讲解了

21:41.830 --> 21:43.830
第一个合法合法

21:43.830 --> 21:44.830
OK

21:44.830 --> 21:46.830
因为可以允许多乐

21:46.830 --> 21:47.830
可以允许数字

21:47.830 --> 21:48.830
字母下发线都可以

21:48.830 --> 21:49.830
第二十个下发线

21:49.830 --> 21:50.830
可不可以

21:50.830 --> 21:51.830
这也是个标识符

21:51.830 --> 21:53.830
相当于是什么

21:53.830 --> 21:54.830
相当于是你在这

21:54.830 --> 21:55.830
定一个变量

21:55.830 --> 21:56.830
那个变量名字就是多乐

21:56.830 --> 21:57.830
可不可以可以

21:57.830 --> 21:58.830
一条问题都没

21:58.830 --> 22:00.830
我们再运行一下

22:00.830 --> 22:02.830
弄到右边来

22:02.830 --> 22:06.140
没问题的

22:06.140 --> 22:08.140
一多二行不行

22:08.140 --> 22:09.140
那就不行了

22:09.140 --> 22:10.140
为什么呢

22:10.140 --> 22:12.140
因为一多二它是一个数字开头的

22:12.140 --> 22:13.140
前两个都可以

22:13.140 --> 22:15.140
一多二是数字开头的

22:15.140 --> 22:16.140
有人说你在这

22:16.140 --> 22:18.140
那个一多二就不行了

22:18.140 --> 22:19.140
那就保存了

22:19.140 --> 22:21.140
不能以数字开头

22:21.140 --> 22:22.140
第四个

22:22.140 --> 22:23.140
中间有个横纲

22:23.140 --> 22:24.140
那个横纲是什么话

22:24.140 --> 22:25.140
还是不支持

22:25.140 --> 22:26.140
不认识

22:26.140 --> 22:28.140
下发线那么没问题

22:28.140 --> 22:29.140
这个可以的

22:29.140 --> 22:30.140
顺便说一下

22:30.140 --> 22:32.140
除了妥封命名法之外

22:32.140 --> 22:34.140
其实有些人的比较

22:34.140 --> 22:35.140
可能他喜欢这种命名法

22:35.140 --> 22:37.140
这不可能比较少一点

22:37.140 --> 22:38.140
但是也有

22:38.140 --> 22:39.140
在企业里边有些人

22:39.140 --> 22:41.140
他喜欢用这种方式来命名

22:41.140 --> 22:43.140
用下发线连接多个单词

22:43.140 --> 22:44.140
这也不是不能说错

22:44.140 --> 22:45.140
也是可以的

22:45.140 --> 22:47.140
这是一种命名风格的问题

22:47.140 --> 22:48.140
有些企业

22:48.140 --> 22:49.140
它统一命名风格

22:49.140 --> 22:51.140
我们就用妥封命名法

22:51.140 --> 22:52.140
不能用其他风格的

22:52.140 --> 22:54.140
那就按照企业的规定

22:54.140 --> 22:56.140
那么能不能有空格的话

22:56.140 --> 22:57.140
肯定不行

22:57.140 --> 22:58.140
空格这么出来了

22:58.140 --> 22:59.140
你两个多了可不可以呢

22:59.140 --> 23:01.140
你一万个多了都可以

23:01.140 --> 23:02.140
不能支持一万个

23:02.140 --> 23:03.140
多了开头

23:03.140 --> 23:04.140
然后没问题

23:04.140 --> 23:05.140
没问题

23:05.140 --> 23:06.140
这跟关键字重明

23:06.140 --> 23:07.140
对吧

23:07.140 --> 23:08.140
这个不行

23:08.140 --> 23:09.140
大家自己对照一下

23:09.140 --> 23:12.140
是不是自己有没问题

23:13.140 --> 23:14.140
那么没问题的话

23:14.140 --> 23:16.140
咱们翻篇

23:17.140 --> 23:19.140
第二题

23:19.140 --> 23:20.140
第二题

23:20.140 --> 23:21.140
当你做这么一件事

23:21.140 --> 23:23.140
一条语句

23:23.140 --> 23:24.140
输出下面的内容

23:24.140 --> 23:25.140
那么这个是跟

23:25.140 --> 23:27.140
制服串的字面量相关的

23:27.140 --> 23:28.140
对吧

23:28.140 --> 23:29.140
字面量是什么意思

23:29.140 --> 23:30.140
就是直接

23:30.140 --> 23:31.140
输写的字

23:31.140 --> 23:32.140
输写的内容

23:32.140 --> 23:33.140
比方我们现在要输出

23:33.140 --> 23:34.140
输出什么

23:34.140 --> 23:35.140
输出一个制服串

23:35.140 --> 23:36.140
这个制服串是这么一种格式

23:36.140 --> 23:38.140
那你输出呗

23:38.140 --> 23:40.140
制服串可以用单引号

23:40.140 --> 23:41.140
也可以用双引号

23:41.140 --> 23:42.140
对吧

23:42.140 --> 23:43.140
守卫

23:43.140 --> 23:44.140
那么我们把这句话

23:44.140 --> 23:45.140
复制一下

23:45.140 --> 23:46.140
粘贴过来

23:46.140 --> 23:48.140
你会发现到处的是错误

23:48.140 --> 23:49.140
那么我们一个个解决吧

23:49.140 --> 23:50.140
哪里有错误呢

23:50.140 --> 23:51.140
首先在制服串里边

23:51.140 --> 23:52.140
这个单引号

23:52.140 --> 23:53.140
这个制服串

23:53.140 --> 23:54.140
无论是单引号

23:54.140 --> 23:55.140
还是双引号

23:55.140 --> 23:56.140
你不能在制服串中间换

23:57.140 --> 23:58.140
另外一个错误呢

23:58.140 --> 24:00.140
是在单引号里边

24:00.140 --> 24:01.140
你看在这里

24:01.140 --> 24:02.140
单引号里边又出现了单引号

24:02.140 --> 24:03.140
那它就蒙了

24:03.140 --> 24:04.140
对吧

24:04.140 --> 24:05.140
你把它搞蒙了

24:05.140 --> 24:06.140
因为单引号

24:06.140 --> 24:07.140
既然你用单引号开头

24:07.140 --> 24:09.140
那就要用单引号结束

24:09.140 --> 24:11.140
那东京他发现了单引号

24:11.140 --> 24:13.140
那么制服串至少到这就结束了

24:13.140 --> 24:14.140
那后边又是咋玩意

24:14.140 --> 24:15.140
他就搞不清楚了

24:16.140 --> 24:17.140
懂了意思吧

24:17.140 --> 24:18.140
所以说这里

24:18.140 --> 24:19.140
我们涉及到另外一个指示

24:19.140 --> 24:20.140
叫做转衣服

24:24.480 --> 24:25.480
转衣服是什么意思呢

24:25.480 --> 24:26.480
就是

24:26.480 --> 24:28.480
我在制服串跟制服串相关的

24:28.480 --> 24:29.480
我们这几节课

24:29.480 --> 24:31.480
都讲的是数据的表达

24:31.480 --> 24:32.480
要么跟变量相关

24:32.480 --> 24:33.480
刚才的标示服

24:33.480 --> 24:34.480
要么跟制变量相关

24:34.480 --> 24:36.480
现在跟制变量相关了

24:36.480 --> 24:37.480
要么跟表达式相关

24:39.480 --> 24:40.480
好

24:40.480 --> 24:41.480
然后这个转衣服呢

24:41.480 --> 24:43.480
指的是在制服串里边

24:43.480 --> 24:46.480
有一些制服

24:46.480 --> 24:49.480
我们想改变它的含义

24:49.480 --> 24:50.480
就这个意思

24:51.480 --> 24:52.480
比方说

24:53.480 --> 24:55.480
我现在这里回抽

24:55.480 --> 24:56.480
对吧

24:56.480 --> 24:57.480
我现在要怎么来做回抽呢

24:57.480 --> 24:58.480
我们就可以加一个

24:58.480 --> 24:59.480
写杠N

24:59.480 --> 25:01.480
写杠N表示换行

25:01.480 --> 25:02.480
对吧

25:02.480 --> 25:03.480
那我们这里

25:03.480 --> 25:05.480
原代马里边就不能换行了

25:05.480 --> 25:06.480
我应该写一个

25:06.480 --> 25:08.480
写杠N来进行换行

25:08.480 --> 25:09.480
就这么个意思

25:10.480 --> 25:11.480
懂了意思吧

25:11.480 --> 25:13.480
N它本来就是一个普通制服的

25:13.480 --> 25:14.480
但是呢

25:14.480 --> 25:15.480
加了一个写杠之后

25:15.480 --> 25:16.480
它的含义变了

25:16.480 --> 25:17.480
就叫转衣

25:17.480 --> 25:18.480
对吧

25:18.480 --> 25:19.480
写杠表达转衣的意思

25:19.480 --> 25:20.480
N本来就是一个普通制服

25:20.480 --> 25:21.480
但是加了一个写杠

25:21.480 --> 25:23.480
过后它意思就变了

25:23.480 --> 25:24.480
变成了什么呢

25:24.480 --> 25:25.480
变成了

25:26.480 --> 25:27.480
换行

25:27.480 --> 25:28.480
就这个意思

25:29.480 --> 25:30.480
好我们再看

25:33.480 --> 25:35.480
好前边有双引号

25:35.480 --> 25:36.480
那么单

25:36.480 --> 25:37.480
因为我这个制服圈

25:37.480 --> 25:38.480
是以单引号开头的

25:38.480 --> 25:40.480
所谓说单引号里面写双引号

25:40.480 --> 25:41.480
没问题

25:41.480 --> 25:42.480
反之呢

25:42.480 --> 25:44.480
在双引号里面写单引号没问题

25:44.480 --> 25:45.480
对吧

25:45.480 --> 25:46.480
所以这个制服是没问题的

25:46.480 --> 25:48.480
但是在单引号的制服圈里面

25:48.480 --> 25:49.480
写单引号就出了问题了

25:49.480 --> 25:50.480
对吧

25:50.480 --> 25:51.480
它就认为这

25:51.480 --> 25:52.480
一看这个颜色就知道

25:52.480 --> 25:53.480
就认为这结束了

25:54.480 --> 25:56.480
后面出现了一个不可磨滅

25:56.480 --> 25:57.480
这是啥东西

25:57.480 --> 25:58.480
这就不认识了

25:59.480 --> 26:00.480
所以说呢

26:00.480 --> 26:01.480
我们这里需要怎么样呢

26:01.480 --> 26:03.480
需要对它进行转移

26:03.480 --> 26:04.480
就是你这个单引号

26:04.480 --> 26:06.480
本来是一个普通

26:06.480 --> 26:07.480
本来是一个表示

26:07.480 --> 26:08.480
表示有特殊含义的

26:10.480 --> 26:11.480
那么我现在

26:11.480 --> 26:12.480
让你变成一个普通制服

26:12.480 --> 26:13.480
加个写杠就行了

26:13.480 --> 26:14.480
就是转移

26:14.480 --> 26:15.480
改变它原本的含义

26:15.480 --> 26:16.480
它原本的含义是什么

26:16.480 --> 26:17.480
制服圈开始而结束

26:17.480 --> 26:19.480
现在表示什么含义

26:19.480 --> 26:20.480
表示一个普通的单引号

26:20.480 --> 26:21.480
那这里的单引号

26:21.480 --> 26:22.480
是不是一样的

26:23.480 --> 26:24.480
比如说不是制服圈

26:24.480 --> 26:25.480
里边不允许换行吗

26:25.480 --> 26:26.480
为什么我这里换行

26:26.480 --> 26:27.480
不是我这里换行了

26:27.480 --> 26:29.480
所以它显示不下了

26:29.480 --> 26:31.480
所以它显示不下了

26:31.480 --> 26:32.480
别换行

26:32.480 --> 26:33.480
那我现在输出

26:34.480 --> 26:35.480
就可以了

26:35.480 --> 26:36.480
对不对

26:36.480 --> 26:37.480
好那么这里

26:37.480 --> 26:39.480
我跟同学们说一下

26:39.480 --> 26:41.480
就是

26:41.480 --> 26:42.480
这个换行

26:42.480 --> 26:44.480
这里我们通常写的是

26:44.480 --> 26:46.480
杠R杠N

26:46.480 --> 26:47.480
当然你写杠N

26:47.480 --> 26:48.480
这里也可以显示

26:48.480 --> 26:49.480
也可以显示

26:49.480 --> 26:50.480
只是习惯上的

26:50.480 --> 26:52.480
我们写一个杠R杠N

26:52.480 --> 26:55.480
为什么杠R是什么意思

26:55.480 --> 26:56.480
杠R表示回车

26:56.480 --> 26:57.480
杠N表示换行

26:57.480 --> 26:59.480
那回车换行不一个意思

26:59.480 --> 27:00.480
回车也可以

27:00.480 --> 27:01.480
对吧

27:01.480 --> 27:02.480
只加杠N也可以

27:02.480 --> 27:04.480
加个杠R杠N也可以

27:04.480 --> 27:06.480
它有啥区别呢

27:06.480 --> 27:07.480
这个玩意

27:08.480 --> 27:10.480
做一个课外知识了解一下

27:10.480 --> 27:12.480
就很多人都不知道

27:12.480 --> 27:14.480
大家都是这样写换行的

27:14.480 --> 27:16.480
那么为什么这是一个习惯

27:16.480 --> 27:18.480
因为在早期

27:19.480 --> 27:21.480
电脑出现之前

27:21.480 --> 27:23.480
我们打字的话

27:23.480 --> 27:25.480
是用打字机

27:25.480 --> 27:27.480
同学们有没有见过打字机

27:27.480 --> 27:28.480
同学们也没有见过

27:28.480 --> 27:29.480
我都没见过

27:29.480 --> 27:31.480
我只看到电视

27:31.480 --> 27:32.480
一些老电影

27:32.480 --> 27:33.480
或者是一图片

27:33.480 --> 27:37.240
打字机

27:37.240 --> 27:39.240
打字机里边换行

27:39.240 --> 27:41.240
跟回车是有区别的

27:42.240 --> 27:46.000
这是个老式打字机

27:46.000 --> 27:48.000
那打字机里边

27:48.000 --> 27:50.000
换行是什么意思呢

27:50.000 --> 27:51.000
换行只是

27:51.000 --> 27:52.000
把这个滚轮

27:52.000 --> 27:54.000
直接往下移动

27:54.000 --> 27:55.000
比方说

27:55.000 --> 27:56.000
你这里写的是

27:56.000 --> 27:58.000
第二行写到这了

27:58.000 --> 27:59.000
我换行

27:59.000 --> 28:01.000
就是把这个滚轮移动到这

28:01.000 --> 28:03.000
从这里开始起

28:03.000 --> 28:04.000
但电脑上不是

28:04.000 --> 28:06.000
电脑上就直接换行了

28:06.000 --> 28:07.000
但是打字机里边

28:07.000 --> 28:09.000
是直接移动到这开始起

28:09.000 --> 28:11.000
移动到这又换行

28:12.000 --> 28:14.000
那么什么叫回车呢

28:14.000 --> 28:15.000
回车就是把滚轮

28:15.000 --> 28:17.000
比方说滚轮滚到这了

28:17.000 --> 28:19.000
那么现在把它拉回去

28:19.000 --> 28:20.000
拿到这

28:20.000 --> 28:21.000
拿到其事为止

28:22.000 --> 28:24.000
所以说我们以前

28:24.000 --> 28:25.000
不是我们

28:25.000 --> 28:26.000
我们的前辈

28:26.000 --> 28:28.000
以前在使用打字机的时候

28:28.000 --> 28:29.000
有这么一个习惯

28:29.000 --> 28:31.000
就是我要真正的换行

28:31.000 --> 28:32.000
就是新起一行

28:32.000 --> 28:33.000
从开头开始写的话

28:33.000 --> 28:35.000
我们的操作是这样子的

28:35.000 --> 28:37.000
我们先把滚轮

28:37.000 --> 28:39.000
推到最开始的位置

28:39.000 --> 28:41.000
然后再向下翻一个

28:41.000 --> 28:42.000
翻一个

28:42.000 --> 28:44.000
先回车再换行

28:44.000 --> 28:46.000
然后再开始从头到开始写

28:46.000 --> 28:47.000
懂了意思吧

28:47.000 --> 28:50.000
就是一个远古的习惯

28:50.000 --> 28:51.000
保留下来了

28:51.000 --> 28:52.000
所以说我们这里

28:52.000 --> 28:53.000
真从这个习惯

28:53.000 --> 28:54.000
刚儿刚儿

28:54.000 --> 28:56.000
就是这么来的

28:56.000 --> 28:57.000
这里了解一下就行了吧

28:57.000 --> 28:59.000
这个东西也没啥

28:59.000 --> 29:00.000
好了没了

29:00.000 --> 29:03.000
本节课就复习这么多吧

29:03.000 --> 29:04.000
同学们

29:04.000 --> 29:06.000
还是把题不要看的简单

29:06.000 --> 29:07.000
还是要去做一做

29:07.000 --> 29:08.000
练一练

