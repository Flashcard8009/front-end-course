WEBVTT

00:02.290 --> 00:05.530
好 咱们来看第五大题

00:05.530 --> 00:10.810
第五大题主要是说另外一种循环 叫做Fo-in 循环

00:10.810 --> 00:13.370
咱们来看第一题 讲第一题的过程中

00:13.370 --> 00:15.410
我就顺便把Fo-in 循环也讲了

00:15.410 --> 00:18.970
因为有些同学学过 有些同学没有学过

00:18.970 --> 00:20.530
我这里统计讲一下

00:20.530 --> 00:25.130
第一题是这样 它输出一个对象的所有的建值队

00:25.130 --> 00:27.050
比方说我们有一个对象

00:27.210 --> 00:28.050
OBG

00:28.690 --> 00:30.090
对象里面比较简单

00:30.090 --> 00:31.330
A等于1

00:32.770 --> 00:34.130
B等于2

00:34.130 --> 00:37.410
然后C等于ABC

00:37.410 --> 00:39.010
有这么三个属性

00:39.010 --> 00:40.810
那么现在我要拿到这个对象之后

00:40.810 --> 00:42.530
当然这个对象可以变化的

00:42.530 --> 00:46.410
之后可以随便的加属性和三属性都可以

00:46.410 --> 00:50.410
就我拿到这个对象之后我要输出这么一个东西

00:51.210 --> 00:53.570
就是输出A等于1

00:53.570 --> 00:56.290
D行B等于2

00:56.330 --> 00:59.330
C等于ABC

00:59.330 --> 01:01.090
我要输出这么一个玩意儿

01:01.090 --> 01:02.490
那么如何来输出呢

01:02.490 --> 01:06.130
我们就需要对这个对象的所有属性进行变立

01:06.130 --> 01:08.090
就像变立数组那样子

01:08.090 --> 01:09.890
去变立这个对象的所有属性

01:09.890 --> 01:11.290
那么如何来变立呢

01:11.290 --> 01:14.370
变立对象我们可以使用Fo-in 循环

01:14.370 --> 01:15.370
Fo-in

01:16.290 --> 01:17.170
这样打出来了

01:17.170 --> 01:18.410
给你生成这么一些玩意儿

01:18.410 --> 01:19.770
你可以自己手写

01:19.770 --> 01:21.290
是这样

01:21.290 --> 01:22.730
还是写个关键字Fo

01:22.730 --> 01:24.810
但是它不是Fo-in 还里边写的不一样

01:24.810 --> 01:26.170
里边的格式是这样子

01:27.170 --> 01:28.810
然后一个名称

01:28.810 --> 01:30.370
一个关键字印

01:30.370 --> 01:32.570
然后后边跟的是一个对象

01:32.570 --> 01:33.650
都理解

01:33.650 --> 01:35.250
这就是Fo-in 循环

01:35.250 --> 01:36.970
那么这个循环是什么意思呢

01:36.970 --> 01:38.410
只不过这个变量的名称

01:38.410 --> 01:40.570
这里是可以随便取名的

01:41.570 --> 01:42.570
我们随便给它取吧

01:42.570 --> 01:43.610
取个T字

01:44.490 --> 01:45.890
那么这是什么意思呢

01:45.890 --> 01:51.130
它表示说把这个对象的第一个属性拿出来

01:51.130 --> 01:54.250
把这个属性名属性的名字

01:54.330 --> 01:56.170
我们知道属性的名字是一个字符串

01:56.170 --> 01:56.810
对不对

01:56.810 --> 01:58.050
把第一个字符串

01:58.050 --> 02:01.690
属性的名字字符串复制给这个变量T

02:01.690 --> 02:03.490
然后执行一次循环T

02:04.930 --> 02:06.170
循环运行完了之后

02:06.170 --> 02:08.330
第二次有把第二个属性B

02:08.330 --> 02:10.850
字符串复制给这个T

02:10.850 --> 02:12.530
然后执行一次循环T

02:12.530 --> 02:13.930
然后再把C复制给T

02:13.930 --> 02:15.170
执行一次循环T

02:15.170 --> 02:17.130
也就是说这个东西其实就是变立

02:17.130 --> 02:20.730
这个对象里边的所有的属性的名字

02:20.730 --> 02:22.250
我们这里输出一下T

02:23.250 --> 02:24.970
是不是得到ABC

02:24.970 --> 02:25.330
对吧

02:25.330 --> 02:27.690
而且这个C是一个字符串

02:27.690 --> 02:29.890
那么我们可以拿到属性的名字

02:29.890 --> 02:32.250
我们能不能拿到属性的值呢

02:32.250 --> 02:34.290
比较说我要拿到属性的值怎么拿呢

02:34.290 --> 02:35.410
是不是之前学过的

02:35.410 --> 02:37.450
通过对象去取属性的值

02:37.450 --> 02:39.690
但是注意这里不能写掉K

02:39.690 --> 02:40.810
我们之前说过

02:40.810 --> 02:42.930
这种写法相当于是怎么写的

02:42.930 --> 02:44.650
相当于是理智这样子写的

02:44.650 --> 02:45.730
你是读什么

02:45.730 --> 02:48.050
读这个对象的属性名

02:48.050 --> 02:50.170
哪个属性KEY

02:50.170 --> 02:52.810
有没有这个属性KEY没有

02:52.810 --> 02:54.090
而我要读的是什么

02:54.090 --> 02:56.690
我要读的是这个变量的值

02:56.690 --> 02:57.810
变量的值是A

02:57.810 --> 02:58.890
那我就读A这个属性

02:58.890 --> 02:59.770
变量的值是B

02:59.770 --> 03:01.010
我就读B这个属性

03:01.010 --> 03:01.690
懂得意思吗

03:01.690 --> 03:02.730
所以说我们这里要怎么写

03:02.730 --> 03:03.770
要这样子写

03:03.770 --> 03:05.570
这样子是不是把这个变量的值

03:05.570 --> 03:06.810
就不是字面亮了

03:06.810 --> 03:09.010
把变量的值放到这个位置

03:09.010 --> 03:13.410
来读这个对应的属性值

03:13.410 --> 03:14.530
是不是可以打倒了

03:14.530 --> 03:16.530
那最终我们要得到这么一个结果

03:16.530 --> 03:18.090
那还不简单吗

03:18.090 --> 03:19.130
我们要输出什么

03:19.170 --> 03:22.410
输出就是要制服说凭接

03:22.410 --> 03:24.370
啥等于啥

03:24.370 --> 03:25.290
制服说凭接的时候

03:25.290 --> 03:28.130
同学们可以按照这样的一个处理方式

03:28.130 --> 03:31.770
你先把不确定的位置写上一个问号

03:31.770 --> 03:34.970
然后再去把问号T换成为

03:34.970 --> 03:36.570
我们要改的东西

03:36.570 --> 03:37.770
然后第一个问号位置

03:37.770 --> 03:39.530
我们是把3的

03:39.530 --> 03:40.930
我们在前边凭接给我们了

03:40.930 --> 03:43.170
凭接一个T

03:43.170 --> 03:44.210
第二个问号位置

03:44.210 --> 03:44.850
我们把3的

03:44.850 --> 03:47.450
在后边凭接一个OB借K

03:49.930 --> 03:51.410
这不是出来了吗

03:51.410 --> 03:52.410
好 这是第一题

03:52.410 --> 03:55.050
就是练习向F1循环

03:55.050 --> 03:55.650
向F1循环

03:55.650 --> 03:57.050
我们都练习得差不多了

03:57.050 --> 03:59.130
后边还有一套综合练习

03:59.130 --> 04:01.490
好 这是这一个

04:01.490 --> 04:04.450
咱们做题要保持这么一种心态

04:04.450 --> 04:08.490
只要做不死就往死里做

04:08.490 --> 04:09.650
好 第二题

04:09.650 --> 04:13.130
计算对象中制服创属性的数量

04:13.130 --> 04:14.010
就是有一个对象

04:14.010 --> 04:15.770
一个对象随便写

04:15.770 --> 04:17.370
A等于1

04:17.370 --> 04:18.050
怎么保持出来

04:18.250 --> 04:19.050
B等于2

04:19.050 --> 04:20.490
C等于ABC

04:20.490 --> 04:23.610
B等于BCD

04:23.610 --> 04:25.610
不要随便拿一个对象来

04:25.610 --> 04:26.330
你要知道

04:26.330 --> 04:27.490
我要计算对象里面

04:27.490 --> 04:29.970
有多少个制服创的属性

04:29.970 --> 04:32.090
这不也是个计数的问题

04:32.090 --> 04:32.690
对吧

04:32.690 --> 04:33.650
累计的问题

04:33.650 --> 04:34.930
累计的问题怎么做

04:34.930 --> 04:38.050
是不是来一个COT等于0

04:38.050 --> 04:41.730
一开始一张纸上记录的数字是0

04:41.730 --> 04:43.610
看到一个满足条件就加1

04:43.610 --> 04:45.570
看到一个满足条件就加1

04:45.570 --> 04:46.410
对不对

04:46.850 --> 04:47.770
于是我用什么

04:47.770 --> 04:48.890
FORIN寻环

04:49.890 --> 04:51.650
用FORIN寻环

04:51.650 --> 04:54.690
FORIN寻环去寻环OB界的每一个属性

04:54.690 --> 04:57.050
但是我要判断的条件是什么呢

04:57.050 --> 04:58.610
只要条件满足就加1

04:58.610 --> 04:59.610
这个就加1

04:59.610 --> 05:00.890
什么条件

05:00.890 --> 05:03.370
就是这个属性是一个制服创

05:03.370 --> 05:04.530
是属性0是制服创

05:04.530 --> 05:06.890
还是属性的值是制服创

05:06.890 --> 05:08.530
那肯定是属性的值

05:08.530 --> 05:10.170
我肯定要看的是

05:10.170 --> 05:11.130
制服创属性

05:11.130 --> 05:12.970
因为属性的名字全都是制服创

05:12.970 --> 05:15.530
我们看的是属性的值是不是制服创

05:15.570 --> 05:17.250
所以说我们要判断什么

05:17.250 --> 05:21.090
判断的是OB界Key

05:22.090 --> 05:24.490
是不是制服创

05:25.650 --> 05:27.090
那么怎么来判断它是不是制服创

05:27.090 --> 05:28.970
我们是不是可以利用TypeL

05:28.970 --> 05:29.370
对不对

05:29.370 --> 05:30.570
OB界Key

05:32.050 --> 05:33.130
所以可以这样判断

05:33.130 --> 05:34.690
因为TypeL还有两种用法

05:34.690 --> 05:36.530
一种是使用关键字的使用法

05:36.530 --> 05:38.290
一种是使用韩束式的用法

05:38.290 --> 05:39.290
都行

05:39.290 --> 05:40.290
像我都一样的

05:40.890 --> 05:42.410
判断这个玩意的内形

05:42.410 --> 05:43.730
是不是一个制服创

05:43.730 --> 05:45.370
如果说它是一个制服创的话

05:45.370 --> 05:46.810
我们就把Cost加加

05:48.330 --> 05:49.210
那么就写完了

05:49.210 --> 05:50.730
最后我们输出一下

05:50.730 --> 05:53.890
纸上季度的继终的统计结果

05:53.890 --> 05:54.530
二

05:55.250 --> 05:56.050
没问题吧

05:57.730 --> 05:58.810
这是这道题

05:58.810 --> 05:59.490
第二题

06:00.290 --> 06:01.250
第三题

06:01.250 --> 06:04.730
将一个对象的所有的数字属性

06:04.730 --> 06:06.090
转换成制服创

06:06.090 --> 06:09.210
并在前面加上一个人民币的符号

06:09.210 --> 06:10.850
比方说有着每个对象

06:10.850 --> 06:12.730
对象拉克力的拉克力过后

06:12.730 --> 06:14.410
你要去找到对象里面的

06:14.450 --> 06:16.650
所有的数字属性

06:16.650 --> 06:17.490
你看这个玩意

06:17.490 --> 06:18.370
这个东西就不动

06:18.370 --> 06:19.770
看到没

06:19.770 --> 06:20.890
是不是数字属性

06:20.890 --> 06:22.090
数字属性

06:22.090 --> 06:22.890
拿到之后

06:22.890 --> 06:24.570
把它变成这个样子

06:24.570 --> 06:25.210
也就是说

06:25.210 --> 06:29.090
我们要把这个玩意变成这个玩意

06:29.090 --> 06:29.530
对吧

06:29.530 --> 06:30.690
只针对数字属性

06:31.690 --> 06:31.850
好

06:31.850 --> 06:33.810
那么这里我们就来一个对象

06:33.810 --> 06:34.850
比方就这个对象

06:34.850 --> 06:36.090
但是任何对象都可以

06:36.090 --> 06:39.620
有这么一个对象

06:39.620 --> 06:41.380
那么我们现在要把这些数字属性

06:41.380 --> 06:42.140
全部找到

06:42.140 --> 06:43.620
我都不知道它里面有多少属性

06:43.620 --> 06:44.460
因为这个对象

06:44.540 --> 06:47.740
可能我这里只是为了测试效果能写的

06:47.740 --> 06:48.860
可能将来这个对象里面

06:48.860 --> 06:50.900
我都不知道它里面是有啥

06:50.900 --> 06:52.700
所以说我们这里可以用什么

06:52.700 --> 06:53.500
缝印循环

06:53.500 --> 06:54.580
一个便利

06:54.580 --> 06:55.420
对吧

06:55.420 --> 06:56.220
一个便利

06:56.220 --> 06:58.860
T in OB借

06:58.860 --> 07:00.260
变成它的每一个属性

07:01.460 --> 07:03.740
然后我们要处理的是谁

07:03.740 --> 07:04.900
制服创我们处处理

07:04.900 --> 07:05.940
不处理

07:05.940 --> 07:07.100
我们不处理制服创

07:07.100 --> 07:08.300
我们处理的是啥

07:08.300 --> 07:10.340
仅处理数字属性

07:10.340 --> 07:10.980
也就是说

07:10.980 --> 07:12.740
我们要判断

07:12.740 --> 07:15.460
OB借T这个属性的值

07:15.460 --> 07:17.460
是不是数字

07:17.460 --> 07:19.460
我们判断一下OB借T

07:20.460 --> 07:21.260
用什么

07:21.260 --> 07:23.100
Type

07:23.100 --> 07:23.900
Type

07:23.900 --> 07:25.300
判断它是不是

07:25.300 --> 07:26.300
Number

07:27.300 --> 07:28.700
是不是数字

07:28.700 --> 07:30.460
如果是数字怎么办

07:31.620 --> 07:33.540
如果是数字怎么办

07:33.540 --> 07:34.500
是数字的话

07:34.500 --> 07:36.700
我们是不是要修改这个属性的

07:37.740 --> 07:39.340
修改这个属性的值

07:39.340 --> 07:40.860
是不是要给它重新复制

07:40.860 --> 07:41.780
给这个属性

07:41.900 --> 07:43.140
复制为什么

07:43.140 --> 07:44.100
复制为制服创

07:44.100 --> 07:45.980
复制为这种格式

07:45.980 --> 07:48.820
一个人民币的符号就是Dollar

07:48.820 --> 07:51.380
用中文输入法变成人民币的符号了

07:51.380 --> 07:53.460
后边跟上一个数字

07:53.460 --> 07:54.500
那么跟上什么数字呢

07:54.500 --> 07:55.540
就是它原来的数字

07:55.540 --> 07:58.260
那是不是这里就直接拼接这个玩意

07:58.260 --> 07:58.740
对吧

07:58.740 --> 08:01.540
把它之前的数字的值

08:01.540 --> 08:02.500
拼接上这个玩意

08:02.500 --> 08:03.580
不就成制服创了吗

08:03.580 --> 08:05.580
然后给它属性重新复制

08:05.580 --> 08:05.740
好

08:05.740 --> 08:06.980
这样子循环一结束

08:06.980 --> 08:08.100
是不是这个对象就变了

08:09.700 --> 08:11.260
你看对象是不是变成这样子

08:11.300 --> 08:13.540
所有的数字属性就全部加上这个东西了

08:13.540 --> 08:15.100
不管你有多少个数字属性

08:15.100 --> 08:16.780
你将来可能一个都没有

08:16.780 --> 08:17.620
那就什么都没变

08:17.620 --> 08:18.580
如果有多更的话

08:18.580 --> 08:20.380
全部数字属性都变成这样子

08:20.380 --> 08:21.580
就这么一个小需求

08:22.780 --> 08:23.820
这是一种做法

08:23.820 --> 08:27.180
这种做法就是我们改动了原有对象

08:27.180 --> 08:29.300
原来对象被我们更改了

08:29.300 --> 08:31.140
还有一种做法是比较流行的

08:31.140 --> 08:32.100
现在都比较流行

08:32.100 --> 08:33.860
就是不动原来的东西

08:33.860 --> 08:35.700
无论原来是数主还是对象

08:35.700 --> 08:37.580
就是我要改一些东西不动

08:37.580 --> 08:39.580
我们都是得到一个新的东西

08:39.580 --> 08:41.100
这是现在比较流行的做法

08:41.140 --> 08:43.100
这种做法叫做Immartable

08:43.100 --> 08:45.300
顺便给大家提前介绍一下

08:45.300 --> 08:46.100
Immartable

08:48.060 --> 08:49.180
叫不可变的

08:49.180 --> 08:50.380
我单词写对没有

08:50.380 --> 08:52.020
对不可改变的

08:52.020 --> 08:54.740
我们现在都追求的是不可变化的对象

08:54.740 --> 08:57.700
这个我还要是一些框架带来的一些思想

08:57.700 --> 09:00.340
那么如果说我们要追从这种流行的做法的话

09:00.340 --> 09:01.980
那如果说我们要得到一个新的对象

09:01.980 --> 09:05.460
是不是我们要这里要写一个6O脾气

09:05.460 --> 09:06.780
如果说我们要做新的做法

09:08.220 --> 09:09.700
我们看到一个属性

09:09.740 --> 09:11.540
如果说它是一个数字

09:12.780 --> 09:15.580
那么我是把属性的值变成这样子

09:15.580 --> 09:18.820
然后把这个表达是不是覆盖原来对象了

09:18.820 --> 09:21.860
而是给新的对象复制

09:21.860 --> 09:22.300
对吧

09:22.300 --> 09:23.300
属性名相同

09:24.220 --> 09:25.300
属性名相同

09:25.300 --> 09:28.100
然后把值变成一个制服串

09:28.100 --> 09:29.100
给它复过去

09:29.100 --> 09:30.500
给新的对象复制

09:30.500 --> 09:31.380
如果说你的

09:31.380 --> 09:33.580
当然我如果说现在就这样子写的话

09:33.580 --> 09:34.620
那么输出新的对象

09:35.780 --> 09:36.900
然后再来一个旧的对象

09:36.900 --> 09:38.100
前面我们输出旧的对象

09:39.100 --> 09:40.100
你会看到

09:41.100 --> 09:41.940
换一刷输出

09:46.490 --> 09:47.970
你会看到新的对象里面

09:47.970 --> 09:51.210
它只有远的数字属性夹了过来

09:51.210 --> 09:51.570
对吧

09:51.570 --> 09:52.810
原来的数字属性夹过来

09:52.810 --> 09:55.010
那不是数字属性的我就没有处理了

09:55.450 --> 09:57.210
因为不是数字属性

09:57.210 --> 09:58.170
它进不了这个判断案

09:58.170 --> 09:59.650
那新对象就啥都没处理

09:59.650 --> 10:01.050
所以说我们这里还要加个AOS

10:02.050 --> 10:04.210
如果其他情况就是你不是数字的话

10:04.210 --> 10:07.130
那我就原封不动的给你夹过来

10:08.810 --> 10:09.890
原封不动夹过来

10:10.890 --> 10:13.250
那这样子的就是蛮重的要求了

10:14.050 --> 10:15.890
当然你会看到这个代码里面

10:15.890 --> 10:16.690
我们会发现

10:17.090 --> 10:18.690
像这些地方这些表达是

10:18.690 --> 10:19.690
是不是经常出现

10:20.290 --> 10:20.530
对吧

10:20.530 --> 10:21.290
经常出现

10:21.290 --> 10:22.450
那么经常出现的话

10:22.450 --> 10:25.490
我们就可以把它用一个变量存一下

10:25.490 --> 10:26.930
这样子的可以减化代码

10:27.690 --> 10:28.130
你看

10:28.530 --> 10:29.170
把它存到

10:29.170 --> 10:30.130
表示这个属性的值

10:30.130 --> 10:30.450
对吧

10:30.450 --> 10:32.050
属性的件属性的值

10:32.050 --> 10:33.970
把这个判断的这个值

10:34.370 --> 10:36.330
这里也是直接拼接这个值

10:36.330 --> 10:38.250
这里直接把这个值复制过来

10:38.610 --> 10:40.490
这样子的后边代码稍微减接一些

10:42.250 --> 10:42.570
OK

10:42.570 --> 10:43.810
那么这是这道题

10:48.300 --> 10:49.020
第四题

10:49.020 --> 10:51.220
按照下面的要求进行转换

10:51.220 --> 10:52.820
就是这一整个地步大体的

10:52.820 --> 10:54.340
不仅练习佛应循环

10:54.340 --> 10:55.820
主要是练习对象

10:55.820 --> 10:58.340
输组跟对象跟输组配合这些东西

10:58.940 --> 11:01.060
按照下面的要求进行转换

11:01.060 --> 11:01.940
比方一个输组

11:02.740 --> 11:03.340
123

11:03.860 --> 11:06.420
然后我们要把它转换成这种格式

11:07.740 --> 11:09.460
这是一种典型的做法

11:09.460 --> 11:10.300
叫做硬设

11:12.340 --> 11:13.020
硬设

11:13.020 --> 11:14.180
什么叫硬设呢

11:14.540 --> 11:15.900
就是原来有一个数组

11:15.900 --> 11:19.420
这个数组里边有123

11:19.420 --> 11:21.900
三项得到一个新的数组

11:21.900 --> 11:23.900
新的数组里边也是三项

11:24.060 --> 11:26.660
123

11:26.660 --> 11:27.700
是不是也是三项

11:28.620 --> 11:30.100
数组的长度不变

11:30.540 --> 11:32.220
得到了新的数组跟原来的数组一样

11:32.820 --> 11:35.340
但是每一项的变化了

11:35.540 --> 11:38.580
而且每一项是根据之前的那一项变化过来的

11:38.580 --> 11:39.900
之前的一变成了这个

11:40.460 --> 11:41.380
变成一个对象了

11:41.460 --> 11:42.260
Number等于1

11:42.260 --> 11:44.460
DoubleNumber双数等于2

11:44.780 --> 11:45.980
2变成这个了

11:48.060 --> 11:48.740
Number等于2

11:48.740 --> 11:49.860
DoubleNumber等于4

11:50.900 --> 11:51.860
双数等于4

11:52.860 --> 11:53.500
不是双数

11:53.500 --> 11:54.540
翻倍等于4

11:54.860 --> 11:56.460
Number3变成这样子了

11:57.940 --> 12:00.460
那么也就是说我们新数组的每一

12:00.460 --> 12:01.220
数量不变

12:01.220 --> 12:02.220
新数的每一项

12:02.220 --> 12:05.100
是根据原数组的那一块变化过来的

12:05.300 --> 12:06.780
我们这里是变化成对象

12:06.780 --> 12:08.460
变化成任何东西都无所谓的

12:09.220 --> 12:10.660
那么这就是典型的硬设

12:10.700 --> 12:11.540
硬设什么意思

12:11.540 --> 12:14.340
就是把原来的一个东西变成一个新的东西

12:15.260 --> 12:15.740
对吧

12:15.740 --> 12:17.100
那么这种情况怎么做呢

12:17.100 --> 12:20.340
其实写的代码说起来好像很高端的样子

12:20.340 --> 12:21.540
其实写的代码很简单

12:22.740 --> 12:24.180
那无非就是得到一个新数组

12:24.180 --> 12:25.780
比方说我们现在有一个原数组

12:26.420 --> 12:27.500
Number1

12:27.500 --> 12:27.700
Number2

12:27.700 --> 12:28.220
Number3

12:29.060 --> 12:30.860
那么现在我们准备好一个新数组

12:32.820 --> 12:34.940
我们就要把原数组的每一项

12:35.060 --> 12:37.180
编一个东西往新数组里面加

12:37.180 --> 12:37.620
对不对

12:37.620 --> 12:39.340
所以说这里的就是一个护平环

12:39.580 --> 12:40.740
编递原数组

12:40.740 --> 12:42.340
把原数组一项一项拿出来

12:43.660 --> 12:45.740
然后按照某一个规则

12:46.500 --> 12:47.900
变化成一个新的东西

12:48.620 --> 12:49.220
往里面加

12:50.060 --> 12:50.180
好

12:50.180 --> 12:51.500
我们把原数组拿出来

12:51.500 --> 12:52.940
原数组我们得到一个变量

12:53.940 --> 12:54.900
表示数组的这一项

12:55.420 --> 12:56.140
这个没问题吧

12:56.580 --> 12:57.620
得到原数组的每一项

12:57.980 --> 12:58.140
好

12:58.140 --> 12:59.260
每一项拿到过后

12:59.620 --> 13:01.300
我们要把N变成什么呢

13:01.540 --> 13:03.060
变成一个对象

13:03.940 --> 13:04.740
变成一个对象

13:05.540 --> 13:05.700
好

13:05.700 --> 13:06.540
我们来变一下吧

13:06.540 --> 13:07.100
OBC

13:07.460 --> 13:08.060
等于什么呢

13:08.220 --> 13:10.620
等于Lambar

13:11.620 --> 13:12.300
值是多少

13:12.300 --> 13:13.140
不就是N吗

13:13.580 --> 13:14.180
N是多少

13:14.180 --> 13:14.940
这里就是多少

13:15.180 --> 13:16.260
那么doubleLambar

13:16.260 --> 13:17.580
不就是N成一二吗

13:18.740 --> 13:19.820
得到这么一个对象

13:19.980 --> 13:22.060
然后把对象加到新数组里面去

13:23.060 --> 13:23.820
你有Lambar

13:24.860 --> 13:25.340
PoC

13:25.780 --> 13:26.380
OBC

13:27.340 --> 13:28.420
那这样子最后

13:28.420 --> 13:29.260
新数组

13:29.260 --> 13:30.380
原数组是不会变的

13:30.380 --> 13:30.540
对吧

13:30.540 --> 13:31.180
我们要改它

13:31.420 --> 13:32.420
新数组不就是这样子了

13:32.420 --> 13:33.100
这个玩意儿了吗

13:34.100 --> 13:34.940
非常简单

13:35.020 --> 13:37.180
但是这里有这么一个场景

13:37.500 --> 13:38.740
主要是给它输这么一个场景

13:38.740 --> 13:39.900
叫做映射场景

13:40.660 --> 13:41.540
当然这个doubleLambar

13:41.540 --> 13:43.780
你还可以把它进行简化一下

13:43.780 --> 13:45.180
你会发现这个N

13:45.180 --> 13:47.420
我们其实可以完全在这里进行替换

13:47.420 --> 13:47.620
对吧

13:47.620 --> 13:48.620
替换成表达式

13:50.100 --> 13:51.460
这样子的双不双简化

13:51.620 --> 13:52.260
我也不知道

13:52.820 --> 13:55.180
其实你可以完全可以把它保存到N

13:55.180 --> 13:56.180
然后再这样子写

13:56.300 --> 13:57.740
把用N的替代也可以

13:58.220 --> 13:59.300
然后你会发现这里

13:59.300 --> 14:01.140
我就是一个字面量

14:01.140 --> 14:01.340
对吧

14:01.340 --> 14:02.180
对象字面量

14:02.180 --> 14:04.180
对象字面量的把它保存到变量里面

14:04.180 --> 14:05.300
再把变量放过来

14:05.300 --> 14:06.140
那这里放的是什么

14:06.140 --> 14:06.980
放的是数据

14:07.180 --> 14:08.980
那这个数据可以是字面量

14:08.980 --> 14:09.740
可以是变量

14:09.740 --> 14:10.580
可以是表达式

14:10.580 --> 14:13.860
那我这里是不是可以直接把个字面量写到这儿来

14:14.580 --> 14:14.860
对吧

14:14.860 --> 14:15.420
不一样了

14:16.980 --> 14:17.620
是一样的

14:17.900 --> 14:18.780
没什么区别吧

14:19.180 --> 14:22.660
我们这里运行还是一样的结果

14:23.620 --> 14:23.900
OK

14:23.900 --> 14:26.220
这是第五大题

14:26.940 --> 14:27.260
好了

14:27.260 --> 14:28.140
那么至此

14:29.140 --> 14:32.620
我们就把最核心最核心

14:32.620 --> 14:35.980
我们平时用的最普遍的各种循环

14:35.980 --> 14:40.220
加上什么变异对象的各种场景

14:40.220 --> 14:41.540
就全部走了一遍了

14:42.740 --> 14:43.740
走了一遍过后

14:44.380 --> 14:45.220
这不是目的

14:45.220 --> 14:47.620
我们的目标是要冲击第六题

14:48.620 --> 14:50.700
第六题才是真正的

14:51.260 --> 14:54.660
符合我们平时开发的场景的

14:54.660 --> 14:56.620
那为什么前面要练习1235呢

14:56.620 --> 14:59.220
如果说你不把1235练一遍

14:59.420 --> 15:01.540
你直接进入第六题的话

15:01.700 --> 15:02.740
你会有点晕

15:02.740 --> 15:03.740
你会很晕

15:03.940 --> 15:05.940
第六题是有很多现实意义的

15:06.900 --> 15:08.060
那么我们来看一下第六题

15:08.060 --> 15:10.140
我们这一节课能做多少

15:10.140 --> 15:10.500
做多少

15:10.500 --> 15:11.540
肯定是做不完

15:11.540 --> 15:12.140
做不完的话

15:12.140 --> 15:13.260
就要下几课再做

15:14.740 --> 15:16.020
这里有一个学生数组

15:16.020 --> 15:16.980
我们后边的所有题

15:16.980 --> 15:19.540
都是根据这个学生数组来

15:21.180 --> 15:22.620
来做操作的

15:22.980 --> 15:24.100
这里有个学生数组

15:24.220 --> 15:26.140
这个数组里面每一个就是一个学生

15:26.140 --> 15:27.260
一个学生对象

15:27.380 --> 15:29.300
每个学生里边有什么呢

15:29.300 --> 15:30.420
有学生的编号

15:31.260 --> 15:32.420
我这里用的是数字

15:32.540 --> 15:33.900
因为这是我自动生成的

15:33.900 --> 15:34.900
所以一生成的

15:35.100 --> 15:35.660
不管吧

15:35.700 --> 15:36.780
反正就是一个编号

15:36.780 --> 15:38.860
然后这里是学生的姓名

15:38.860 --> 15:40.020
这里是学生的姓别

15:40.020 --> 15:40.740
男和女

15:41.220 --> 15:42.980
这里是学生的年龄

15:43.980 --> 15:45.700
这里是学生的家庭住址

15:45.700 --> 15:46.780
这里是学生的电话

15:48.220 --> 15:48.620
好吧

15:48.620 --> 15:50.100
那我为了一会忘记了

15:50.100 --> 15:51.020
我就把这个

15:51.900 --> 15:52.700
几个图吧

15:53.380 --> 15:54.740
每个学生大概就这样子

15:57.090 --> 15:58.410
然后这边是个数组

15:58.410 --> 15:59.970
很多很多

15:59.970 --> 16:01.450
我是通过一些工具生成的

16:01.450 --> 16:03.290
这个工具里面以后也会学习

16:03.650 --> 16:05.290
我就把这个东西折起来了

16:05.530 --> 16:05.930
不看了

16:05.930 --> 16:07.170
我们就看后边的题

16:07.730 --> 16:08.650
现在第一个

16:09.450 --> 16:12.170
遍地输出学生的姓名

16:12.170 --> 16:13.370
像这道第六大题

16:14.370 --> 16:15.650
就是在综合训练

16:15.650 --> 16:17.450
我们之前学到了所有知识

16:17.890 --> 16:18.730
除了寒兽之外

16:19.610 --> 16:21.570
什么表达诗

16:21.890 --> 16:22.770
编辆

16:24.210 --> 16:24.970
那个什么

16:25.810 --> 16:26.730
字面辆

16:27.050 --> 16:28.050
对象

16:28.290 --> 16:29.050
数组

16:29.250 --> 16:30.090
循环

16:30.090 --> 16:30.690
判断

16:30.690 --> 16:31.290
等等等等

16:31.290 --> 16:32.650
我们就在综合训练了

16:33.890 --> 16:36.610
这种题是我们比较符合现实意义的

16:37.690 --> 16:38.010
好

16:38.010 --> 16:38.410
第一个

16:38.410 --> 16:40.210
遍地输出学生的所有姓名

16:40.210 --> 16:40.610
什么意思

16:40.610 --> 16:42.370
这里边有很多这样的一个学生

16:42.370 --> 16:43.730
一个一个学生组成的

16:43.730 --> 16:44.650
我们需要

16:45.330 --> 16:46.850
把输组里边一个学生

16:46.850 --> 16:47.690
一个学生拿出来

16:47.690 --> 16:48.410
输出什么

16:48.410 --> 16:49.610
输出他的名字

16:49.850 --> 16:50.930
就是一个遍地输组

16:50.930 --> 16:51.570
遍地输出的

16:51.570 --> 16:53.210
就像学法都是固定的

16:54.650 --> 16:56.450
连小渔这个输组

16:56.450 --> 16:57.650
小渔这个输组

16:57.650 --> 16:58.330
students

16:58.330 --> 16:59.290
dearLens

16:59.730 --> 17:00.850
叫挨家家

17:06.800 --> 17:07.320
放哪儿

17:07.320 --> 17:07.880
放这儿吧

17:09.440 --> 17:09.960
好

17:09.960 --> 17:10.760
是不是拿到

17:10.880 --> 17:12.880
拿到就遍地所有的学生

17:13.320 --> 17:14.440
那么每一次遍地

17:14.440 --> 17:17.120
我们之前是拿到这个输组的DI项

17:17.120 --> 17:17.680
对吧

17:17.880 --> 17:18.840
拿到输出其中一项

17:18.840 --> 17:19.840
i的运0的时候运行

17:19.840 --> 17:20.680
10就达到第1项

17:20.680 --> 17:21.640
i的运1的时候运行

17:21.640 --> 17:22.640
10就达到第2项

17:23.240 --> 17:23.800
然后这样子的

17:23.800 --> 17:25.000
是不是拿到所有的学生了

17:25.360 --> 17:27.240
当然你说我们这里输出达到的是什么

17:27.240 --> 17:28.680
这个表达是得到的是什么

17:29.000 --> 17:30.920
这个表达是得到的是一个对象

17:32.080 --> 17:33.480
是一个学生对象

17:33.880 --> 17:35.480
那我要输出什么了

17:35.480 --> 17:37.040
学生对象的名字

17:37.040 --> 17:38.800
那这个表达是一个对象

17:38.800 --> 17:40.600
那我是不是可以取这个对象的名字

17:40.880 --> 17:42.440
那我就后边接着写一遍

17:42.440 --> 17:43.000
点儿列

17:44.120 --> 17:45.520
所以可以拿到学生所有的名字了

17:45.520 --> 17:46.480
那地写就完成了

17:47.000 --> 17:47.880
我可以这样子写

17:47.880 --> 17:49.040
我能不能这样子写呢

17:49.840 --> 17:51.040
我能不能这样子写呢

17:51.640 --> 17:52.640
有什么不能的呢

17:53.000 --> 17:53.760
有什么不能的

17:53.760 --> 17:54.560
可当然可以

17:54.720 --> 17:55.920
点儿列不就是等

17:55.920 --> 17:57.080
相当于是这个吗

17:57.400 --> 17:58.680
前边那一坨

17:58.680 --> 17:59.880
不管它实是啥

17:59.880 --> 18:00.680
无所谓的

18:00.920 --> 18:02.080
你是一个边疆也好

18:02.080 --> 18:03.440
你是一个表达式也好

18:04.560 --> 18:06.320
你是一个字面疆也好

18:06.600 --> 18:07.440
都无所谓的

18:07.440 --> 18:08.320
只要你是个对象

18:08.320 --> 18:10.640
我就后边就可以接着取你的名字

18:11.000 --> 18:11.680
懂了意思吧

18:11.840 --> 18:13.360
我不要这个代码就看不懂了

18:13.760 --> 18:15.640
包括有些比较神奇的代码

18:15.640 --> 18:17.600
这个代码我们平时不怎么会写

18:17.600 --> 18:18.880
但是它确实挺神奇的

18:18.880 --> 18:19.880
比方说我们有一个

18:20.080 --> 18:21.480
你这里把扩起来

18:21.480 --> 18:22.600
扩起来变成一个表达式

18:22.600 --> 18:23.560
那么这里呢

18:23.720 --> 18:25.480
是不是说边是一个对象的字面量

18:25.480 --> 18:26.800
比方说我们这里一个名字

18:26.800 --> 18:27.760
属向ABC

18:28.680 --> 18:30.320
A级属向17

18:31.080 --> 18:32.960
那这个玩意儿我是不是可以点儿名字了

18:33.560 --> 18:34.280
是不是可以点儿

18:34.520 --> 18:36.000
我们来输出一下这个表达式

18:36.680 --> 18:39.320
尽管我们平时不会去写这样的一个代码

18:39.800 --> 18:41.200
这里他把个小块去了

18:41.200 --> 18:41.960
其实是一样的

18:41.960 --> 18:43.600
这里是个字面量对吧

18:43.600 --> 18:45.480
对象的字面前面不管是啥

18:45.480 --> 18:46.800
只要你是个对象

18:47.160 --> 18:48.840
后边是不是可以取对象的属向

18:48.840 --> 18:49.800
那我输出的是什么

18:49.800 --> 18:50.920
输出的就是ABC

18:51.240 --> 18:53.120
那我设计还是不可以这样的写

18:54.760 --> 18:55.840
输出的还是ABC

18:56.720 --> 18:57.080
对吧

18:57.080 --> 18:58.560
今后来的代码看上去好怪好怪

18:58.560 --> 18:59.560
其实还不一样的吗

18:59.800 --> 19:01.720
这是一个数据

19:02.280 --> 19:04.600
只要这个数据不管是什么形式的数据

19:04.680 --> 19:06.360
只要你是一个数据

19:06.360 --> 19:07.240
那么它是个对象

19:07.240 --> 19:08.440
我就可以取它的属性

19:10.660 --> 19:12.580
说表达式的值是很重要的

19:13.860 --> 19:16.980
那个数据的表达是很重要的

19:17.980 --> 19:19.300
得到所有的女生

19:20.220 --> 19:21.500
我要产生一个新宿主

19:22.100 --> 19:23.500
所以我要产生新宿主

19:25.300 --> 19:27.100
后边凡是要得到一个新的什么东西

19:27.100 --> 19:28.140
我都是产生新宿主

19:28.140 --> 19:29.220
就不再重复说了

19:29.660 --> 19:31.100
得到所有的女生

19:32.540 --> 19:34.540
要这个学生里面不是有性别吗

19:34.540 --> 19:35.820
有很多学生

19:35.820 --> 19:37.300
那我只需要女生就行了

19:37.820 --> 19:39.060
我不要改动元素主

19:39.140 --> 19:40.300
我要得到一个新宿主

19:40.300 --> 19:43.020
那么我们这里用一个新宿主来准备接收

19:43.540 --> 19:44.980
发现一个女生就往里边争议一个

19:44.980 --> 19:46.500
发现一个女生就往里边争议一个

19:46.900 --> 19:48.020
比方说news

19:49.940 --> 19:50.420
接收

19:50.420 --> 19:51.380
我往前边去了

19:52.980 --> 19:54.580
发现一个女生就往里边争议一个

19:54.980 --> 19:55.180
好

19:55.180 --> 19:58.980
那我们现在是不是要便利循环以前的学生

19:59.540 --> 19:59.940
对不对

19:59.940 --> 20:01.420
I小于student's means

20:03.580 --> 20:05.180
拿到每一个女生看一下

20:05.740 --> 20:07.300
我们这里可以

20:08.700 --> 20:09.180
大家注释

20:10.540 --> 20:12.540
判断student's

20:13.740 --> 20:14.180
I

20:14.700 --> 20:16.300
是不是女生

20:17.100 --> 20:17.580
对不对

20:18.540 --> 20:18.700
好

20:18.700 --> 20:19.180
那么判断

20:19.180 --> 20:20.620
Student's

20:20.860 --> 20:21.260
I

20:21.780 --> 20:23.060
那么怎么来判断她是不是女生

20:23.060 --> 20:23.900
有点同样这样子

20:25.900 --> 20:26.900
那你判断的是什么

20:27.060 --> 20:27.900
你比较的是什么

20:27.900 --> 20:29.500
你比较的是整个这个对象

20:29.500 --> 20:31.260
把整个这个对象跟一个制服串

20:31.260 --> 20:32.260
女的进行比较

20:32.260 --> 20:33.460
那能比较的同吗

20:34.060 --> 20:34.940
你要比较什么

20:35.020 --> 20:37.820
比较对象里边的一个属性sex

20:39.900 --> 20:40.940
要比较这个东西

20:41.740 --> 20:42.940
对象里边的一个属性

20:42.940 --> 20:43.860
把它取出来

20:43.860 --> 20:46.300
它只取出来跟女是不是相能的

20:46.540 --> 20:47.100
那是的话

20:47.100 --> 20:47.900
那就是女生

20:48.060 --> 20:48.860
女生我们要干嘛

20:48.860 --> 20:50.700
要把它放到这个新宿主里边

20:50.700 --> 20:52.060
是不是往新宿里边加一下

20:52.060 --> 20:52.620
破细

20:54.020 --> 20:55.020
我现在要做什么

20:55.020 --> 20:56.220
你就想要写什么带

20:56.580 --> 20:57.540
我要往这边加一下

20:57.540 --> 20:58.060
怎么加呢

20:58.060 --> 20:59.060
不就是一个破细吗

20:59.340 --> 20:59.540
好

20:59.540 --> 21:00.980
我们把加什么呢

21:00.980 --> 21:02.020
加这个学生对象

21:02.020 --> 21:02.940
不是加这个

21:03.660 --> 21:06.100
不是不是把这个性别这个制服串加进去

21:06.100 --> 21:07.620
就加这个学生对象

21:07.620 --> 21:09.100
整个这个学生加进去

21:10.380 --> 21:10.620
对对

21:10.620 --> 21:11.020
当然呢

21:11.020 --> 21:12.060
你也可以把这个

21:13.140 --> 21:14.820
学生先保存到一个变量里边

21:14.820 --> 21:15.740
19.1

21:15.740 --> 21:16.500
这样代码的

21:16.500 --> 21:18.180
后边的代码就看上去比较清爽了

21:18.180 --> 21:19.220
所以说这里变成了

21:19.220 --> 21:20.420
判断s

21:20.420 --> 21:21.460
是不是女生

21:21.580 --> 21:22.660
那就是s这样

21:22.660 --> 21:23.260
sex

21:23.660 --> 21:24.740
加的是s

21:25.380 --> 21:27.380
这样看代码后边就比较清爽一点

21:28.300 --> 21:30.180
最终循环结束之后

21:30.180 --> 21:31.460
那么这个新宿主里边

21:31.500 --> 21:33.460
是否保存了所有的女生了

21:33.820 --> 21:34.900
两选都是女生

21:36.460 --> 21:37.900
这就是一个筛选

21:38.140 --> 21:39.780
针对对象宿主的筛选

21:40.180 --> 21:41.340
这到底是一样的

21:42.740 --> 21:44.980
就有点像我们之前做的题

21:45.180 --> 21:46.380
得到所有的基数

21:46.380 --> 21:47.860
把他放到一个新宿主里面

21:47.860 --> 21:49.140
不道理不是一样的吗

21:50.620 --> 21:50.900
好

21:50.900 --> 21:51.460
再做一道题

21:51.460 --> 21:52.660
再做一道题

21:52.900 --> 21:53.540
就行了

21:55.300 --> 21:58.420
得到年龄在25岁以下的女生

21:59.940 --> 22:01.380
要不然你们先写一些吧

22:03.400 --> 22:06.600
我觉得你们可以尝试一下老板

22:07.280 --> 22:09.560
年龄在25岁以下的

22:09.800 --> 22:11.240
那我判断的就不是性别了

22:11.240 --> 22:12.840
判断的是什么

22:12.840 --> 22:16.120
判断的是年龄小于25岁

22:16.840 --> 22:19.280
那女生还要还算判断性别

22:20.200 --> 22:21.720
还不但要是女生

22:21.720 --> 22:25.480
而且并且她的年龄要小于25

22:25.880 --> 22:26.400
对吧

22:26.880 --> 22:28.760
这邓哥说过18都不要

22:29.360 --> 22:30.120
就这个意思

22:31.080 --> 22:33.400
那么我们把满足这一个条件的女生

22:33.400 --> 22:34.680
放到这个新宿主里边

22:34.680 --> 22:34.920
好

22:34.920 --> 22:35.960
咱们先说说一下

22:36.600 --> 22:37.000
对吧

22:37.000 --> 22:38.200
那就少了不少了

22:38.200 --> 22:38.600
对吧

22:40.600 --> 22:40.880
好

22:40.880 --> 22:42.320
那这就是

22:43.640 --> 22:44.600
这道题

22:45.040 --> 22:45.360
好了

22:45.360 --> 22:45.920
差不多了吧

22:45.920 --> 22:46.720
后边还有题

22:47.120 --> 22:49.120
我们留到下节课吧

22:49.880 --> 22:51.520
那么这里可能我们就先讲到这

22:51.520 --> 22:52.560
把他做到我这

