WEBVTT

00:00.300 --> 00:04.140
来好了 同学们 咱们来开始CSS3最后一小节只是点讲解

00:04.140 --> 00:06.980
这个性能优化部分 这一节还没那么复杂

00:06.980 --> 00:10.060
讲解起来比较容易 咱们来开始今天的课程了

00:10.060 --> 00:13.900
首先咱先来了解一下CPU跟GPU的问题 提一嘴

00:13.900 --> 00:17.020
这个说度说的是吧 CPU装处理器你了解

00:17.020 --> 00:19.620
GPU打游戏同学可能了解 俗称显卡是吧

00:19.620 --> 00:22.140
这两个都是咱们现在计算机不可缺少的一部分

00:22.140 --> 00:23.300
非常重要的组成部分

00:23.300 --> 00:27.660
那么CPU它擅长做一些基于逻辑的数学运算与过飞什么

00:27.660 --> 00:30.060
这是它擅长的 处理一些业务什么的可以

00:30.260 --> 00:33.300
这GPU它有它擅长的地方 它擅长做一些

00:33.300 --> 00:35.540
首先你应该明白了显卡 图像挥质是吧

00:35.540 --> 00:37.740
游戏什么的 主要靠它来取起来是吧

00:37.740 --> 00:40.060
然后它还擅长的一个部分 可能你不太了解

00:40.060 --> 00:40.980
我先给你扩展一下

00:40.980 --> 00:43.540
然后咱们再回归到主线知识里面 去了解 行吗

00:43.540 --> 00:49.060
GPU特别适合处理那种高精度的辅点数运算

00:49.060 --> 00:51.180
辅点数点 几点几 几点几是吧

00:51.180 --> 00:52.380
高精度的辅点运算

00:52.380 --> 00:56.580
这个CPU处理起来是非常 这个没有优势的

00:56.580 --> 00:58.660
GPU处理起来它是有优势的

00:58.740 --> 01:01.500
在哪块得以体现了呢 知道这个区块链技术吗

01:01.500 --> 01:03.220
区块链技术是不是比拼算力的

01:03.220 --> 01:06.140
来看看谁能增强到机帐的这样的权利

01:06.140 --> 01:07.940
实际上要挖到一个区块blog 是吧

01:07.940 --> 01:09.620
挖到一个区块blog就给你

01:09.620 --> 01:10.860
区块链这样的一个网络

01:10.860 --> 01:12.780
就会给你这样的一个比特币的奖励

01:12.780 --> 01:13.740
你就可以拿到比分币

01:13.740 --> 01:17.060
然后到这个虚拟市场去换取真实的钱 是吧

01:17.060 --> 01:18.100
你就可以挣钱了

01:18.100 --> 01:19.060
就这样的一个原理

01:19.060 --> 01:20.260
那么一开始在挖晃的时候

01:20.260 --> 01:21.460
大家都在比拼这个算力

01:21.460 --> 01:23.380
09年1月4号出中本村

01:23.380 --> 01:25.180
从用第一块CPU来处理的

01:25.180 --> 01:26.340
这样的一个辅典书运算

01:26.340 --> 01:27.820
挖到了这样的一个框

01:27.820 --> 01:29.100
09年1月4号

01:29.100 --> 01:30.860
我记得这是中本村

01:30.860 --> 01:32.460
它创办的区块链

01:32.460 --> 01:34.740
这样的一个区块链和比特币

01:34.740 --> 01:35.900
它是创始人 是吧

01:35.900 --> 01:37.420
然后它挖到了第一个区块

01:37.420 --> 01:39.020
得到了50个奖励 是吧

01:39.020 --> 01:40.060
50个比特币奖励

01:40.060 --> 01:41.740
放到现在的话好几十万

01:41.740 --> 01:44.020
还有上百万了

01:44.020 --> 01:44.700
那是好几十万

01:44.700 --> 01:48.860
然后后来CPU随着机器越来越多

01:48.860 --> 01:50.140
大家提供的算力越来越多

01:50.140 --> 01:52.300
你想增强到去挖到框的

01:52.340 --> 01:54.140
这样的一个概率是非常低的

01:54.140 --> 01:55.100
因为拼的就是算力

01:55.100 --> 01:55.940
比如说你的算力

01:55.940 --> 01:57.340
占到全网算力的1%的话

01:57.340 --> 01:58.620
你就有1%的概率

01:58.620 --> 01:59.820
去获得这样的一个区块

01:59.820 --> 02:00.340
知道吧

02:00.340 --> 02:02.340
然后每多少分钟一个

02:02.340 --> 02:02.740
是吧

02:02.740 --> 02:04.140
就区块 往帮忙出蹦

02:04.140 --> 02:05.660
然后每隔4年

02:05.660 --> 02:07.140
这个是不是区块的数量

02:07.140 --> 02:07.620
怎么着

02:07.620 --> 02:08.660
这内容就不给大家说了

02:08.660 --> 02:09.980
区块战斗一天负责了

02:09.980 --> 02:10.540
行了

02:10.540 --> 02:11.500
我就说算力的问题

02:11.660 --> 02:12.460
大家比拼算力

02:12.460 --> 02:14.940
然后来看看谁能增强到这样的一个

02:14.940 --> 02:16.420
谁更有可能增强到

02:16.420 --> 02:17.900
这样的一个机场的一个权利

02:17.900 --> 02:19.820
然后你就可以得到这样的一个奖励了

02:19.820 --> 02:20.540
挖的是什么

02:20.540 --> 02:21.540
挖的是

02:21.540 --> 02:23.740
比如说区块战系统

02:23.740 --> 02:24.940
抛出一个特别打算的数物

02:24.940 --> 02:25.620
大家一起去算

02:25.620 --> 02:26.460
提供算力去算

02:26.460 --> 02:27.940
谁算到这个东西就是谁的

02:27.940 --> 02:28.820
你算到完之后

02:28.820 --> 02:30.180
你就可以在区块链的

02:30.180 --> 02:32.180
整个大网络上增加一个区块

02:32.180 --> 02:34.460
这个区块是用来记账的

02:34.460 --> 02:35.980
一旦你这个区块

02:35.980 --> 02:38.220
因为区块它的长度是3M

02:38.220 --> 02:39.420
你可以记账了之后

02:39.420 --> 02:39.740
是吧

02:39.740 --> 02:41.300
就可以把一些大家交易的信息

02:41.300 --> 02:42.020
存到你这里面来

02:42.020 --> 02:43.300
然后区块链这个网络

02:43.300 --> 02:44.980
就会奖励你多少张比特币

02:44.980 --> 02:46.420
不会挖出来比特币的

02:46.420 --> 02:47.860
只能得到奖励比特币

02:47.860 --> 02:48.580
那东西是吧

02:48.620 --> 02:49.140
那行了

02:49.140 --> 02:51.340
一开始CPU在CPU处理下就不行

02:51.340 --> 02:53.460
很快到2010年的时候

02:53.460 --> 02:54.420
大家就发明了一种

02:54.420 --> 02:57.220
用GPU来挖矿的这样的一个

02:57.220 --> 02:59.140
这样的一个就是程序是吧

02:59.140 --> 03:00.660
拿GPU的算力来挖矿

03:00.660 --> 03:01.940
因为GPU的算力相当于

03:01.940 --> 03:05.460
一个GPU它的算力相当于

03:05.460 --> 03:08.980
好几十个CPU

03:08.980 --> 03:10.020
然后再到后来

03:10.020 --> 03:11.380
咱们发明这个矿机

03:11.380 --> 03:14.540
有专业的基于这种挖矿算法的

03:14.540 --> 03:16.180
这个芯片来诞生了

03:16.180 --> 03:19.180
这个最著名这样一个芯片

03:19.180 --> 03:22.740
这个BM1387BM1387芯片

03:22.740 --> 03:25.380
它是专门就是为了挖矿而诞生的芯片

03:25.380 --> 03:27.940
然后紧接着咱们就出现了一个矿机

03:27.940 --> 03:30.220
矿机就是基于这样的一个挖矿芯片

03:30.220 --> 03:32.580
而诞生的这样的一个整个机器

03:32.580 --> 03:34.100
它就是用来挖矿的

03:34.100 --> 03:34.900
一个矿机

03:34.900 --> 03:38.420
上面现在基本上最强大的蚂蚁矿机

03:38.420 --> 03:42.180
它上面搭载了200多张BM1387这样的芯片

03:42.180 --> 03:43.940
200多张BM1387的芯片

03:43.940 --> 03:45.700
相当于多少个成熟的GPU

03:45.700 --> 03:48.260
3万个成熟的GPU

03:48.260 --> 03:50.100
所以就知道比拼算力上

03:50.100 --> 03:51.540
其实还是一级一级升级的

03:51.540 --> 03:53.060
但是显然一见的说

03:53.060 --> 03:55.780
咱们GPU要比CPU这样的算力要强大一些

03:55.780 --> 03:56.420
那东西做吧

03:56.420 --> 03:57.700
这是GPU算力的一个问题

03:57.700 --> 03:59.540
然后GPU还分两位

03:59.540 --> 04:01.460
家用的和专业的

04:01.460 --> 04:02.980
家用的和专业的

04:02.980 --> 04:04.500
我们就俗称那一条家用的

04:04.500 --> 04:05.380
这叫专业的 是吧

04:05.380 --> 04:06.820
家用的也叫游戏显卡

04:06.820 --> 04:09.300
专业的叫专业绘图领域里面显卡

04:09.300 --> 04:10.740
这个家用和专业的

04:10.740 --> 04:12.580
它绘图的一个基本能力是不一样的

04:12.580 --> 04:13.860
家用的其实有点偷懒

04:13.940 --> 04:15.460
专业的就比较专业了

04:15.460 --> 04:17.060
专业的它绘图的方法

04:17.060 --> 04:18.980
就是用一个一个点去绘图

04:18.980 --> 04:20.260
具体的方法比较复杂

04:20.260 --> 04:21.060
我也不那么说了

04:21.060 --> 04:22.420
其实给你通俗的说

04:22.420 --> 04:24.020
就是用点来绘制的

04:24.020 --> 04:25.780
那诚哥 正常不是用点绘制的吗

04:25.780 --> 04:28.340
不是 家用的绘制图像的方法

04:28.340 --> 04:30.740
它的基础的一个绘制单位不是点

04:30.740 --> 04:31.940
基础的绘制单位

04:31.940 --> 04:33.380
它是一个多边形

04:33.380 --> 04:34.500
有可能是一个正方形

04:34.500 --> 04:35.940
有可能是一个六边形

04:35.940 --> 04:37.620
它通过多边形的旋转

04:37.620 --> 04:38.820
然后叠加

04:38.820 --> 04:40.420
旋转一次 旋转一次 旋转一次

04:40.420 --> 04:42.420
然后纵向叠加n到一起

04:42.420 --> 04:43.540
形成一个这样的一个圆

04:43.540 --> 04:44.580
能想象出来吧

04:44.580 --> 04:45.940
然后用这个为基础单位

04:45.940 --> 04:47.140
去绘制这样的一个图像

04:47.140 --> 04:48.340
所以说它绘制出来

04:48.340 --> 04:50.020
肯定没有专业的这样的一个

04:50.020 --> 04:50.900
好看 是吧

04:50.900 --> 04:52.340
但是家用的和专业的

04:52.340 --> 04:53.060
明显的一个区别

04:53.060 --> 04:54.260
就是贵和便宜的区别

04:54.260 --> 04:55.060
能弄一次吧

04:55.060 --> 04:57.140
所以说在一些专业的领域

04:57.140 --> 04:57.860
专业的程序

04:57.860 --> 04:59.540
还是用专业的显卡更好一些

04:59.540 --> 05:00.900
当然它相应的也贵一些

05:00.900 --> 05:03.140
因为它一点一点的 是吧

05:03.140 --> 05:04.420
但是 会不会出来

05:04.420 --> 05:05.620
我们的游戏

05:05.620 --> 05:06.980
肯定用家用显卡就足够了

05:06.980 --> 05:08.420
但是咱们的浏览器

05:08.420 --> 05:11.540
我们在设置这些CSS变换Transform的时候

05:11.540 --> 05:13.380
知道Transform的底层原理是什么吗

05:13.380 --> 05:15.220
是不是点正是

05:15.220 --> 05:16.820
是不是点正

05:16.820 --> 05:18.580
点正是 就是通过我们的点

05:18.580 --> 05:19.860
通过矩阵的变化来

05:19.860 --> 05:21.300
完成一个这样的一个

05:21.300 --> 05:22.820
元素的一个转变 对吧

05:22.820 --> 05:23.940
通过这样的一个点正的形式

05:23.940 --> 05:24.660
来完成转变的

05:24.660 --> 05:26.180
那也就是说我们

05:26.180 --> 05:28.260
浏览器给咱们提供的功能

05:28.260 --> 05:29.780
就默认我们的显卡

05:29.780 --> 05:31.220
或者说我们的CPU能

05:31.220 --> 05:32.420
办到这样的一个点正

05:32.420 --> 05:33.700
转换的一个功能 是吧

05:33.700 --> 05:34.820
但是家用的GPU

05:34.820 --> 05:35.780
是不是处理起来

05:35.780 --> 05:37.540
就限制和车轴

05:37.540 --> 05:41.220
所以这个时候你硬让家用的GPU

05:41.220 --> 05:43.460
来处理你这样点正式的功能的话

05:43.460 --> 05:45.700
转换的话其实是比较烧性能的

05:45.700 --> 05:48.260
所以说为什么不能在咱们的网页里面

05:48.260 --> 05:49.780
去构建那样的游戏

05:49.780 --> 05:52.900
就是咱们网页用CSS变换的东西

05:52.900 --> 05:54.740
才是会调用的这样的一个方法

05:54.740 --> 05:57.060
和启动的这样的一个效果

05:57.060 --> 05:58.500
是基于专业的

05:58.500 --> 06:00.900
怎么着 基于专业的我们的显卡

06:00.900 --> 06:02.260
是吧 而家用的我们客户团

06:02.260 --> 06:04.420
一般情况下都弄一个家用的显卡

06:04.420 --> 06:05.540
明白我意思吧

06:05.540 --> 06:07.140
所以说这是一个性能消耗的问题

06:07.140 --> 06:08.340
不管你用CPU和GPU

06:08.340 --> 06:10.340
只要你用性能肯定是消耗

06:10.340 --> 06:12.740
咱们今天也主要讲讲性能优化的问题

06:12.740 --> 06:14.260
所以第一个先靠大家的

06:14.260 --> 06:16.420
你能尽量少用GPU 也少了GPU

06:16.420 --> 06:17.940
GPU到一定程度的情况下

06:17.940 --> 06:19.780
在677上其实也不太实用

06:19.780 --> 06:21.220
太多的复杂的变化

06:21.220 --> 06:23.940
太多的这方面的一个动画什么的

06:23.940 --> 06:25.620
其实也会造成这样的性能的

06:25.620 --> 06:27.380
严重的消耗 能明白我意思吧

06:27.380 --> 06:29.300
所以说为什么说一些成熟的网站上

06:29.300 --> 06:30.980
动画效果都不是那么特别复杂

06:30.980 --> 06:32.500
很太复杂了 其实价不住

06:32.500 --> 06:33.380
能明白我意思吧

06:33.380 --> 06:34.740
你放到手机上是吧

06:34.740 --> 06:35.620
手机上你想想

06:35.620 --> 06:37.380
它的图像功能哪有那么强啊

06:37.380 --> 06:39.460
对吧 它的GPU哪有那么强的 是吧

06:39.460 --> 06:41.380
那OK了 说完这个GPU之后

06:41.380 --> 06:42.980
然后再往后说一说

06:42.980 --> 06:46.500
其实我们到后期优化的时候

06:46.500 --> 06:48.660
真的是能用GPU来做

06:48.660 --> 06:49.860
尽量就不用CPU来做

06:49.860 --> 06:50.820
做一些图像处理的做

06:50.820 --> 06:51.780
因为你没有GPU的话

06:51.780 --> 06:52.500
CPU就帮你做

06:52.500 --> 06:53.620
CPU还不用GPU了

06:53.620 --> 06:54.100
那弄一次吧

06:54.100 --> 06:55.460
那是不是就更满了 是吧

06:55.460 --> 06:57.140
你CPU刮一战全战红了

06:57.140 --> 06:58.660
那你的电脑基本上也快崩了

06:58.660 --> 07:00.900
对了 那这个问题咱先隔这

07:00.900 --> 07:02.500
咱先讲一讲下面这个问题

07:02.500 --> 07:04.020
我们先说一下

07:04.020 --> 07:05.620
浏览器是一个渲染顺序

07:05.620 --> 07:07.460
其实之前有的跟大家去提起

07:07.460 --> 07:08.820
今天再缝满一点

07:08.820 --> 07:10.100
我们浏览器一开始

07:10.100 --> 07:11.540
就是渲染引行怎么来工作呢

07:11.540 --> 07:12.500
一开始先加载

07:12.500 --> 07:14.580
像Download的这个html 是吧

07:14.580 --> 07:16.100
Download的html

07:16.100 --> 07:17.300
然后Download的html之后

07:17.300 --> 07:18.580
它会Download的

07:18.580 --> 07:20.980
Download怎么当CSS 是吧

07:20.980 --> 07:22.020
然后Download的

07:22.020 --> 07:24.340
Download我们的JS 是吧

07:24.340 --> 07:26.180
DownloadJS

07:26.180 --> 07:27.060
当这块有组色

07:27.060 --> 07:28.100
这我就不考虑了

07:28.100 --> 07:29.140
然后接着往下写

07:29.140 --> 07:32.500
CSS会构建一个CSS RulesTree

07:33.220 --> 07:35.140
它是一开始先构建一个规则数

07:35.140 --> 07:36.660
规则数不像正常的数

07:36.660 --> 07:38.660
它里面只有CSS的一些规则什么的

07:38.660 --> 07:40.340
它基本上先形成一个

07:40.340 --> 07:41.380
Construct

07:41.380 --> 07:43.060
先形成一个这样的一个结构

07:43.060 --> 07:44.660
把这个东西

07:44.660 --> 07:46.900
这个你就先看着

07:46.900 --> 07:50.260
然后JS这个Download的

07:50.260 --> 07:51.140
Download完之后

07:51.140 --> 07:53.300
它是不是会调用它的一些接口

07:53.300 --> 07:54.740
来形成这样的道目数

07:54.740 --> 07:57.460
调用它的DomAPI 是吧

07:57.460 --> 07:59.860
然后形成这样的道目锤 是吧

07:59.860 --> 08:01.460
让我们的页面这块

08:01.460 --> 08:03.060
先是不是形成一个DomTree

08:03.060 --> 08:04.740
DomTree里面包含啥

08:04.740 --> 08:05.860
是不是这个节点

08:05.860 --> 08:07.300
全都挂到那个Tree是吧

08:07.300 --> 08:08.500
然后节点里面有什么内容

08:08.500 --> 08:10.260
也统一的挂到这个Tree的下面

08:10.260 --> 08:11.060
能弄一次吧

08:11.060 --> 08:12.900
然后JS还会做一个事

08:12.900 --> 08:14.340
还会做啥事呢

08:14.340 --> 08:18.660
JS会结合着我们的CSS入锤

08:18.660 --> 08:22.260
我对CSS入锤 是吧

08:22.260 --> 08:23.300
入锤

08:23.300 --> 08:25.220
这是经纪版本

08:25.220 --> 08:26.660
CSS入锤规则数

08:26.660 --> 08:29.060
然后这块再来一个

08:29.060 --> 08:31.460
我们的JS里面还有一个接口

08:31.460 --> 08:33.460
叫CSSOM

08:33.460 --> 08:36.580
叫CSACSSOM

08:38.580 --> 08:40.180
我这么来写

08:40.180 --> 08:41.700
JS一块除了有Dom以外

08:41.700 --> 08:42.740
还有CSSOM

08:42.740 --> 08:44.340
叫CSS文档对象

08:44.340 --> 08:45.380
能明白我意思吗

08:45.380 --> 08:47.380
叫CSS文档对象

08:47.380 --> 08:51.620
然后我们这块给它加一个CSSAPI

08:51.620 --> 08:52.980
它也能处理

08:52.980 --> 08:54.020
就是通过JS

08:54.020 --> 08:56.340
其实我们也是能够处理CSS的

08:56.340 --> 08:57.620
只不过这一套方法接口

08:57.620 --> 08:58.820
我们不太常用

08:58.820 --> 09:00.180
这个方法接口的特点

09:00.180 --> 09:01.540
全都是StyleMap

09:01.540 --> 09:03.140
什么AttributeStyleMap

09:03.140 --> 09:06.500
什么ComputingStyleMap 是吧

09:06.500 --> 09:07.940
然后还有什么CSS style

09:07.940 --> 09:09.540
这个Decoration那个东西

09:09.540 --> 09:10.740
用出不大多

09:10.740 --> 09:13.300
但是JS也可以操作CSS的

09:13.300 --> 09:16.260
然后这块JS也会利用它的这个接口

09:16.260 --> 09:17.700
如果你真的调用的话

09:17.700 --> 09:20.180
它也会结合CSS这样的一个吹

09:20.180 --> 09:20.740
是吧

09:20.740 --> 09:23.140
形成一个新的一个吹 是吧

09:23.140 --> 09:24.820
形成一个新的一个吹

09:24.820 --> 09:27.860
然后形成一个CSSOM吹

09:27.860 --> 09:31.300
最后会形成一个CSSOM

09:31.300 --> 09:33.460
这是最终的CSSOM吹

09:33.460 --> 09:37.700
CSSOM吹 明白我意思吧

09:37.700 --> 09:39.620
CSSOM吹跟这个DOM吹

09:39.620 --> 09:41.460
其实差不多

09:41.460 --> 09:44.740
只不过CSSOM吹在DOM的节点上面

09:44.740 --> 09:47.700
比如说这块是一个DOM

09:47.700 --> 09:49.140
依然画一个图

09:49.140 --> 09:51.220
我就不画那个太那傻了

09:51.220 --> 09:51.780
好吧

09:51.780 --> 09:52.820
这是一个DOM结构

09:52.820 --> 09:53.700
这是一个DOM吹

09:53.700 --> 09:54.500
能弄我意思吧

09:54.500 --> 09:56.020
然后线嘎嘎一连

09:56.580 --> 09:58.020
连 连

09:58.020 --> 10:01.140
连 连

10:01.140 --> 10:02.580
连 是吧

10:02.580 --> 10:03.460
一顿连

10:03.460 --> 10:05.300
连完之后CSSOM吹

10:05.300 --> 10:06.500
就也是这个样子的

10:06.500 --> 10:07.300
每一个节点都有

10:07.300 --> 10:08.260
不管你这个节点

10:08.260 --> 10:09.860
是否是Display難的

10:09.860 --> 10:10.740
能弄我意思吧

10:10.740 --> 10:12.740
DOM吹和CSSOM这个吹

10:12.740 --> 10:14.260
它都是每个节点都有

10:14.260 --> 10:15.540
这比如说是DOM

10:15.540 --> 10:16.740
这块比如说是DOM

10:16.740 --> 10:20.020
这块可能是一个DIV标签

10:20.020 --> 10:21.540
这是一个P标签

10:21.540 --> 10:23.060
这可能是一个包袋

10:23.060 --> 10:23.940
实际上比这复杂

10:23.940 --> 10:25.060
上面一天包也有的

10:25.060 --> 10:25.540
能弄我意思吧

10:25.540 --> 10:26.500
上面还有一个

10:26.500 --> 10:27.620
下面这块可能说

10:27.620 --> 10:29.380
就是它的一个具体样

10:29.380 --> 10:32.580
比如说是Front Size

10:32.580 --> 10:33.940
有个啥 有个16

10:33.940 --> 10:34.340
是吧

10:34.340 --> 10:35.140
或者有个什么东西

10:35.140 --> 10:35.620
是吧

10:35.620 --> 10:37.060
然后慢慢往下做

10:37.060 --> 10:38.260
这个CSSOM吹

10:38.260 --> 10:39.540
它有一个特别强大的功能

10:39.540 --> 10:41.700
为什么它会具备数形结构呢

10:41.700 --> 10:42.580
你要明白

10:42.580 --> 10:44.420
为什么CSS也具备数形结构的话

10:44.420 --> 10:45.780
有一点你就很好理解

10:45.780 --> 10:46.980
你知道咱们的属性

10:46.980 --> 10:48.900
有一些属性是有继承性的

10:48.900 --> 10:49.860
像Front Size

10:49.860 --> 10:51.060
你给这个包袋之后

10:51.060 --> 10:52.900
是不是这些个DIV

10:52.900 --> 10:54.260
再没有设置这个属性的时候

10:54.260 --> 10:56.820
会先继承包袋的Front Size

10:56.820 --> 10:57.780
能弄我意思吗

10:57.780 --> 10:58.900
比如说这块包袋这块

10:58.900 --> 11:01.060
也有个Front Size的话

11:01.060 --> 11:02.500
我写的专业点

11:02.500 --> 11:05.540
比如说你这块也有一个Front Size

11:05.540 --> 11:07.380
那连条线

11:07.380 --> 11:07.940
这是你的

11:07.940 --> 11:09.460
你对它的线

11:09.460 --> 11:11.380
来你对它的线

11:11.380 --> 11:14.420
然后这块它也有一个

11:14.420 --> 11:16.020
它有一个Front Size

11:16.020 --> 11:17.940
这个Front Size肯定是16

11:17.940 --> 11:19.380
然后在它的紫元素

11:19.380 --> 11:20.660
没有设置Front Size数

11:20.660 --> 11:22.500
紫元素是不会立马会继承过去

11:22.500 --> 11:23.620
那它基于什么继承的

11:23.700 --> 11:25.380
基于就是这个数型结构来继承的

11:25.380 --> 11:25.940
明白我意思吧

11:25.940 --> 11:28.180
这是CSSOMTREK的一个功能

11:28.180 --> 11:29.700
然后这个TREK完事了

11:29.700 --> 11:30.660
TREK完事了之后

11:30.660 --> 11:32.500
这俩TREK光当一拼接是吧

11:32.500 --> 11:34.500
这俩DOMTREK是吧

11:34.500 --> 11:38.340
DOMTREK跟CSSOMTREK来互相影响一下

11:38.340 --> 11:38.740
对吧

11:38.740 --> 11:39.700
你是怎么组合呀

11:39.700 --> 11:42.420
怎么construct这个construct结构啊

11:42.420 --> 11:43.860
怎么这个构建是吧

11:43.860 --> 11:44.660
那看你的了

11:44.660 --> 11:46.740
光当形成一个咱们的RenderTREK

11:46.740 --> 11:47.220
是吧

11:47.220 --> 11:49.620
这个RenderTREK其实就比较简易了

11:49.620 --> 11:52.580
它比DOMTREK跟CSSOMTREK都简易

11:52.580 --> 11:54.420
比如说这个RenderTREK里面

11:54.420 --> 11:57.460
它其实也是跟咱们刚才CSSOMTREK差不多

11:57.460 --> 11:58.820
跟DOMTREK也都差不多

11:58.820 --> 12:01.700
比如说这块它有一些结构对吧

12:01.700 --> 12:02.580
有一些结构

12:02.580 --> 12:04.100
但是RenderTREK里面

12:04.100 --> 12:06.100
它会把一些我们看不到的结构

12:06.100 --> 12:07.380
比如说HIDE的

12:07.380 --> 12:08.100
HIDE的一个标杀

12:08.100 --> 12:08.580
你能看到吗

12:08.580 --> 12:09.060
说看不到

12:09.060 --> 12:10.100
它就不写了

12:10.100 --> 12:10.660
就没有了

12:13.740 --> 12:15.260
然后它们连起来

12:15.260 --> 12:16.620
这是一个TREK的一个结构

12:16.620 --> 12:17.580
ITREK

12:17.580 --> 12:18.140
TREK

12:18.140 --> 12:18.460
对吧

12:18.460 --> 12:22.300
TREK

12:23.020 --> 12:24.300
一顿TREK是吧

12:24.300 --> 12:26.860
然后每一个TREK上面

12:26.860 --> 12:28.060
你构建什么样式

12:28.060 --> 12:29.660
它都也会写到这里面去

12:29.660 --> 12:30.300
能跟我意思吧

12:30.300 --> 12:31.100
这是DOM结构

12:31.100 --> 12:32.540
这是CSS它都会这么写

12:32.540 --> 12:33.820
但是有一点不同的什么的

12:33.820 --> 12:34.860
看不到标杀都不写了

12:34.860 --> 12:36.540
比如Display对NAN的拉倒

12:36.540 --> 12:38.860
它就从RenderTREK上面砍掉了

12:38.860 --> 12:41.660
里面全是真正需要汇制的

12:41.660 --> 12:42.700
这种TREK型结构

12:42.700 --> 12:43.820
这是数型结构

12:43.820 --> 12:44.620
明白我意思吗

12:44.620 --> 12:45.420
这是RenderTREK

12:45.420 --> 12:48.140
也就是说RenderTREK比CSSOMTREK

12:48.140 --> 12:49.820
或者说DOMTREK要什么呢

12:49.820 --> 12:50.860
要减变吧

12:50.860 --> 12:51.500
明白我意思吗

12:51.660 --> 12:52.620
是不是要减变一些

12:52.620 --> 12:54.060
减变一些

12:54.060 --> 12:55.660
这个咱是不是就了解了

12:55.660 --> 12:57.340
然后RenderTREK完事之后

12:57.340 --> 12:59.340
RenderTREK进行两步操作

12:59.340 --> 13:00.140
第一步操作

13:02.140 --> 13:02.860
第一步操作

13:02.860 --> 13:04.380
咱们基于RenderTREK

13:04.380 --> 13:05.340
咱是不是要汇制了

13:05.340 --> 13:06.140
谁来汇制

13:06.140 --> 13:07.740
谁来汇制还不好说是吧

13:07.740 --> 13:08.780
先别管

13:08.780 --> 13:09.900
第一步先怎么到

13:09.900 --> 13:10.860
先Layout

13:10.860 --> 13:12.300
Layout是布局的意思

13:12.300 --> 13:14.140
先基于你RenderTREK

13:14.140 --> 13:15.420
是不是现在没汇制呢

13:15.420 --> 13:16.300
没真正汇制的

13:16.300 --> 13:16.940
先Layout

13:16.940 --> 13:18.060
先布局一下

13:18.060 --> 13:19.340
然后根据布局

13:19.340 --> 13:20.460
我们再怎么着

13:20.540 --> 13:22.380
我们再Paint

13:22.380 --> 13:23.260
再图吧

13:23.260 --> 13:25.020
把这个比如说你框架布局

13:25.020 --> 13:26.700
你的框膏结构了完事之后

13:26.700 --> 13:27.020
好

13:27.020 --> 13:28.620
喷色是不是Paint的一个过程

13:28.620 --> 13:29.100
对吧

13:29.100 --> 13:30.700
这是整个浏览器

13:30.700 --> 13:32.620
渲染引擎工作的一个流程

13:32.620 --> 13:33.260
明白我意思吗

13:33.260 --> 13:34.700
回去之后你自己画一个图了

13:36.060 --> 13:37.340
然后这个大家解释的时候

13:37.340 --> 13:38.300
比较清楚了

13:38.300 --> 13:39.100
然后给大家说一下

13:39.100 --> 13:39.820
这样一个过程

13:40.380 --> 13:42.780
我们到最后Paint的时候

13:42.780 --> 13:43.500
Paint完之后

13:43.500 --> 13:45.260
就是在逻辑层面上

13:45.260 --> 13:46.940
听好不是在直接浏览器上

13:46.940 --> 13:47.500
直接Paint的

13:47.500 --> 13:48.940
是在一个逻辑层面上

13:49.020 --> 13:50.700
我们Layout布局完之后

13:50.700 --> 13:52.700
然后Paint形成了一个

13:52.700 --> 13:54.700
我们多层的使量图

13:56.220 --> 13:58.460
因为我们在画这一大堆树

13:58.460 --> 13:59.260
一个树

13:59.260 --> 14:01.100
然后再构建再怎么着的时候

14:01.100 --> 14:03.100
会形成很多层的结构浏览器

14:03.100 --> 14:05.340
这个具体的我就不给你气讲了

14:05.340 --> 14:06.140
太复杂

14:06.140 --> 14:07.020
你理解就行了

14:07.020 --> 14:08.380
形成一个多层的结构

14:08.380 --> 14:09.420
然后每一层结构

14:09.420 --> 14:10.780
画的都是一个逻辑图

14:10.780 --> 14:13.100
比如说第一层结构画什么

14:13.100 --> 14:15.340
第一层这一个层

14:15.340 --> 14:16.380
画上你的布局

14:16.380 --> 14:18.700
第二层我根定的布局来喷色

14:18.700 --> 14:19.420
这是两个层

14:19.420 --> 14:20.540
目前来说两个层

14:20.540 --> 14:22.300
为了方便快速的去进行

14:22.300 --> 14:22.940
能弄一次吧

14:22.940 --> 14:24.380
所以出来多层

14:24.380 --> 14:25.260
到底怎么出来的

14:25.260 --> 14:26.140
先别过来

14:26.140 --> 14:27.580
然后出来多层之后

14:28.380 --> 14:30.940
现在我们已经出来多层了

14:30.940 --> 14:31.580
多层完之后

14:31.580 --> 14:32.220
然后干嘛

14:32.220 --> 14:34.700
然后是不是要把多层的这样的一个

14:34.700 --> 14:38.300
逻辑图来按到浏览器面上

14:38.300 --> 14:40.300
让它用实际的像素

14:40.300 --> 14:42.940
来展示我们逻辑的图像

14:42.940 --> 14:43.660
能弄一次吧

14:43.660 --> 14:45.100
逻辑图像比如说多层的

14:45.100 --> 14:45.660
使量的

14:45.660 --> 14:47.340
你知道使量图是怎么着

14:47.340 --> 14:48.300
是逻辑图像

14:48.380 --> 14:49.580
使量图是没有

14:49.580 --> 14:51.340
就是它是没有像素可言的

14:51.340 --> 14:52.860
因为它是电脑上

14:52.860 --> 14:54.460
帮咱们绘制出一个理想的一个图

14:54.460 --> 14:54.620
是吧

14:54.620 --> 14:55.740
所以它不用像素

14:55.740 --> 14:57.660
因为它不实际的落实在你的

14:57.660 --> 14:59.100
空间 纸上或者什么上是吧

14:59.100 --> 15:00.380
所以没有像素

15:00.380 --> 15:01.980
但是逻辑图始终你要是

15:01.980 --> 15:03.020
比如说想绘制出来的话

15:03.020 --> 15:03.980
必须要怎么到

15:03.980 --> 15:05.260
那就跟物理像素发勾了吧

15:05.260 --> 15:06.540
你是不是得绘制出来

15:06.540 --> 15:07.740
所以这一过程

15:07.740 --> 15:09.180
从什么的过程

15:09.180 --> 15:09.900
从最后

15:09.900 --> 15:11.340
从逻辑图的过程

15:11.340 --> 15:12.380
逻辑图的过程

15:12.380 --> 15:13.260
这是我起的字

15:13.260 --> 15:13.820
我起的名

15:13.820 --> 15:14.700
逻辑图的过程

15:14.700 --> 15:16.700
然后变成实际绘制

15:16.860 --> 15:18.300
实际绘制到

15:18.300 --> 15:19.900
这个逻辑图是我说的

15:19.900 --> 15:22.060
就是在逻辑上绘制一个多层的一个图面

15:22.060 --> 15:22.540
能弄一次吧

15:22.540 --> 15:23.180
它不管叫什么

15:23.180 --> 15:24.460
叫实量图

15:24.460 --> 15:25.100
叫实量图

15:25.100 --> 15:25.900
逻辑实量图

15:27.260 --> 15:28.140
多层实量图

15:30.250 --> 15:31.130
多层实量图

15:31.130 --> 15:32.810
到实际绘制这样的过程

15:32.810 --> 15:33.770
它是一个什么样的过程

15:33.770 --> 15:35.210
叫山格化

15:35.210 --> 15:36.730
山格化也就是像素化

15:36.730 --> 15:37.770
山格化是一个专业名词

15:37.770 --> 15:38.730
就是像素化

15:38.730 --> 15:39.610
也是让这个实量图

15:39.610 --> 15:41.130
真正的变成一个具体实际的图

15:41.130 --> 15:42.650
那是不是有点跟像素化勾了

15:42.650 --> 15:43.930
因为你但凡是一道设备

15:43.930 --> 15:44.970
你必然有像素不可

15:45.370 --> 15:46.570
实量图像素化

15:46.570 --> 15:48.490
把它多层按成一面

15:48.490 --> 15:49.450
然后来绘制

15:49.450 --> 15:50.410
这个绘制的过程

15:50.970 --> 15:52.010
看你去设不设置

15:52.010 --> 15:53.290
有的变乱器需要设置

15:53.850 --> 15:54.650
设置什么呢

15:54.650 --> 15:55.610
就是你不设置的话

15:55.610 --> 15:57.050
它拿CPU去帮你绘制

15:57.050 --> 15:58.090
那你想想走不走远

15:58.090 --> 15:59.290
是不是CPU不擅长画图

15:59.290 --> 15:59.450
是吧

15:59.450 --> 16:00.410
那让硬化里面画

16:00.410 --> 16:01.290
消化性明白

16:01.290 --> 16:01.770
对吧

16:01.770 --> 16:02.810
但是Google Chrome

16:06.810 --> 16:07.530
Google Chrome

16:07.530 --> 16:10.010
它天然的就会帮我们调动CPU

16:10.010 --> 16:11.450
来帮我们这样实现这样的

16:11.450 --> 16:12.490
山格化绘制

16:12.490 --> 16:13.050
明白我意思吧

16:13.050 --> 16:14.090
但是其他变乱器

16:14.170 --> 16:15.290
据说可以去设置

16:15.290 --> 16:16.090
但现在的绘乱器

16:16.090 --> 16:17.050
基本上已经很先进了

16:17.050 --> 16:17.690
都可以设置了

16:18.170 --> 16:18.730
没有问题吧

16:18.730 --> 16:19.210
同学们

16:19.210 --> 16:20.330
那这就是绘乱器

16:20.330 --> 16:21.930
整个的一个渲染过程

16:21.930 --> 16:22.970
那渲染过程里面

16:22.970 --> 16:24.090
有两个至关重要的一步

16:24.090 --> 16:24.810
一个是Layout

16:24.810 --> 16:25.450
一个是布局

16:26.010 --> 16:26.890
Layout

16:26.890 --> 16:28.970
如果说你打破这样的一个布局

16:28.970 --> 16:30.810
你打破这样一个Layout的话

16:30.810 --> 16:32.410
比如说你让它的布局

16:32.410 --> 16:34.090
或者说你通过JS

16:34.090 --> 16:34.810
后天的

16:34.810 --> 16:35.850
就是你它渲染完之后

16:35.850 --> 16:36.650
你通过JS

16:36.650 --> 16:38.250
非得改变一个道目的结构

16:38.250 --> 16:39.130
改变个长捆高

16:39.130 --> 16:40.170
改变个位置什么的

16:40.170 --> 16:41.930
就会出发它Layout的改变

16:42.010 --> 16:42.890
什么Layout的改变

16:42.890 --> 16:44.090
上面的全都改变了

16:44.090 --> 16:45.770
所以这个改变设计到什么

16:45.770 --> 16:46.650
设计到什么

16:46.650 --> 16:47.690
Reflow

16:47.690 --> 16:49.290
是不是咱之前讲的

16:49.290 --> 16:50.010
叫重购

16:50.010 --> 16:50.570
是吧

16:50.570 --> 16:52.410
然后如果你只设计到

16:52.410 --> 16:54.490
一个结构的颜色的改变

16:54.490 --> 16:55.690
文本颜色的改变

16:55.690 --> 16:57.210
或者边框颜色的改变

16:57.210 --> 16:58.330
是不是这块只是一个

16:58.330 --> 17:00.090
Repand一个问题

17:00.090 --> 17:00.650
对吧

17:00.650 --> 17:01.370
Repand

17:01.370 --> 17:02.730
所以说你设计修改

17:02.730 --> 17:03.530
肯定设计到

17:03.530 --> 17:04.570
不是Reflow

17:04.570 --> 17:05.210
就是Repand

17:05.210 --> 17:06.410
如果你设计到Reflow的话

17:06.410 --> 17:07.450
必然跟着Repand

17:07.450 --> 17:08.250
能动意思吧

17:08.250 --> 17:09.130
结构都改了

17:09.130 --> 17:10.170
那干嘛不Repand

17:10.170 --> 17:10.970
这个东西是不是给大家

17:11.050 --> 17:11.930
之前讲过

17:11.930 --> 17:12.890
所以说论性能的话

17:12.890 --> 17:13.770
是不是单是Repand

17:13.770 --> 17:15.050
要比Reflow要强多了

17:15.050 --> 17:15.450
是吧

17:15.450 --> 17:16.650
所以说一会来说的时候

17:16.650 --> 17:17.130
跟你们说

17:17.130 --> 17:18.330
哪些会触发Repand

17:18.330 --> 17:19.370
哪些会触发Reflow

17:19.370 --> 17:20.730
你尽量少触发Reflow

17:20.730 --> 17:21.690
明白我意思吧

17:21.690 --> 17:23.610
这是一个汇制的一个问题

17:24.090 --> 17:25.690
然后一会再讲汇制的时候

17:25.690 --> 17:27.610
尽量让它调用GPU来汇制

17:27.610 --> 17:28.250
那一会来说

17:29.210 --> 17:30.090
我们先说Reflow

17:30.090 --> 17:31.050
跟Refand的事

17:31.050 --> 17:32.250
具体说一下

17:32.250 --> 17:33.770
什么样的一个改变

17:33.770 --> 17:35.050
会触发Reflow呢

17:35.050 --> 17:35.850
当然了第一次

17:35.850 --> 17:36.730
渲染页面的时候

17:36.730 --> 17:38.330
你这个Layout跟Refand

17:38.330 --> 17:40.810
就是你这个Layout跟Pand

17:40.810 --> 17:41.930
第一次渲染页面的时候

17:41.930 --> 17:43.050
Layout跟这个Pand

17:43.050 --> 17:44.650
你必须要触发一次Reflow

17:44.650 --> 17:45.290
明白我意思吧

17:45.290 --> 17:46.090
和这个Repand

17:46.090 --> 17:46.730
这是必须的

17:47.130 --> 17:48.090
当然剩下的时候

17:48.090 --> 17:49.770
如果换成就是给交给用户了

17:49.770 --> 17:50.570
用户怎么来操作

17:50.570 --> 17:51.850
或者是交给咱们编程人员了

17:51.850 --> 17:52.490
汇制完之

17:52.490 --> 17:53.290
第一次汇制完之后

17:53.290 --> 17:54.010
交给编程人员了

17:54.010 --> 17:55.450
什么样会触发Reflow呢

17:55.930 --> 17:56.810
改变窗口大小

17:56.810 --> 17:57.450
你必然的

17:57.450 --> 17:58.650
改变文字大小必然的

17:58.650 --> 17:59.610
改变内容是吧

17:59.610 --> 18:01.290
说说话什么这个激活伪类

18:02.010 --> 18:04.050
就是但凡对我们的

18:04.050 --> 18:06.410
道目结构进行影响了

18:06.410 --> 18:09.210
肯定会产生Reflow的

18:09.210 --> 18:10.090
明白我意思吧

18:10.090 --> 18:11.450
Reflow就意味着

18:11.450 --> 18:12.090
你要怎么着

18:12.090 --> 18:13.050
重新进行一下

18:13.050 --> 18:14.170
这样的环节吧

18:14.170 --> 18:15.210
重新进行环节

18:15.210 --> 18:15.850
恶不恶尖

18:15.850 --> 18:16.650
消耗性能吧

18:16.650 --> 18:17.930
你要不嫌烧倒也可以

18:18.090 --> 18:19.210
但是在公司里面说

18:19.210 --> 18:20.250
人经常说的

18:20.250 --> 18:22.250
有的用户买不起那么好的显卡

18:22.250 --> 18:23.370
别让人家那么烧

18:23.370 --> 18:24.010
明白我意思吧

18:26.970 --> 18:28.250
然后脚本划DOM

18:28.250 --> 18:30.250
脚本划DOM增山改查

18:30.250 --> 18:30.970
当然选中

18:31.450 --> 18:33.450
选中这块众说分远

18:33.450 --> 18:34.330
有的人说这个

18:34.330 --> 18:34.970
当选中的时候

18:35.050 --> 18:36.570
会形成一个Shape切片

18:36.570 --> 18:38.490
会触发这样Reflow

18:38.490 --> 18:39.290
有的人说没事

18:39.290 --> 18:41.290
但是这个根据不同的机器

18:41.290 --> 18:42.650
它不同乱七的类型

18:42.650 --> 18:44.490
这个东西会有不同的说法

18:44.490 --> 18:46.410
这块咱们也就不过多去探究了

18:46.410 --> 18:47.450
明白我意思吧

18:47.450 --> 18:48.490
你记住

18:48.490 --> 18:50.250
增山改查肯定是那傻的

18:50.250 --> 18:50.570
是吧

18:52.090 --> 18:53.770
然后我们

18:55.130 --> 18:56.170
剩下的就没傻了吧

18:56.170 --> 18:56.970
设施要什么

18:56.970 --> 18:57.450
是不是没傻了

18:57.450 --> 18:58.490
这就会触发Reflow

18:58.490 --> 18:59.610
你只改变颜色

18:59.610 --> 19:00.330
不改变结构什么

19:00.330 --> 19:01.050
就是Refend

19:01.050 --> 19:01.850
然后性能的问题

19:01.850 --> 19:02.970
然后基于它俩

19:02.970 --> 19:03.850
跟大家多说一句

19:04.010 --> 19:05.050
之前虽然说也说过

19:05.050 --> 19:05.770
性能优化的问题

19:05.770 --> 19:06.890
我相信你们也都懂

19:06.890 --> 19:08.170
咱们这块最重要的一点

19:08.170 --> 19:10.090
就是你尽量能少改Dom

19:10.090 --> 19:11.050
就少改Dom

19:11.050 --> 19:12.010
然后改Dom的时候

19:12.010 --> 19:14.810
千万别点Style什么操作

19:14.810 --> 19:15.850
恶心死了是吧

19:15.850 --> 19:17.610
比如说你点Style点了Color

19:17.610 --> 19:18.650
点Style点个

19:19.290 --> 19:21.690
点个这个白光的Color是吧

19:21.690 --> 19:23.290
然后点Style再点

19:23.530 --> 19:24.730
再点个什么Hide

19:24.730 --> 19:26.010
再点点点一顿点

19:26.330 --> 19:27.770
你要真想对一个元素

19:27.770 --> 19:28.570
一顿点Style的话

19:28.570 --> 19:29.930
你赶紧加一个Class

19:29.930 --> 19:31.050
你把你想改的东西

19:31.050 --> 19:32.570
你统一都设定去一次改

19:32.570 --> 19:33.130
好不好

19:33.210 --> 19:34.010
明白我意思吧

19:34.010 --> 19:35.130
一次重购

19:35.130 --> 19:36.250
虽然说你改它Class

19:36.250 --> 19:37.930
也是针对它的Reflow一下

19:37.930 --> 19:39.770
但一次是不是比十次要强

19:39.770 --> 19:40.570
明白我意思吗

19:40.570 --> 19:41.290
这是一个最简单

19:41.290 --> 19:42.090
性能优化的问题

19:42.090 --> 19:43.290
上面的东西怎么触发

19:43.290 --> 19:43.770
都告诉你了

19:43.770 --> 19:45.130
那你就少这么来做

19:45.130 --> 19:46.410
是不是就是节约性能了

19:46.410 --> 19:47.210
明白我意思吗

19:47.210 --> 19:47.690
然后这块

19:47.690 --> 19:48.410
有个Class的问题

19:48.410 --> 19:49.130
是不是已经反复

19:49.130 --> 19:49.930
大家强调了

19:49.930 --> 19:50.810
这块没问题吧

19:50.810 --> 19:52.250
Reflow和这块片的这块

19:52.250 --> 19:53.370
仔细强调一下

19:53.370 --> 19:55.210
然后说一下咱们C3优化的问题

19:55.210 --> 19:57.450
C3咱们会最牛逼的一点

19:57.450 --> 19:58.970
是进行了一个Transform操作

19:58.970 --> 19:59.210
是吧

19:59.210 --> 20:00.090
点针式操作

20:00.170 --> 20:01.450
但是一阵是不是阵蒙了

20:01.450 --> 20:02.170
给阮远期是吧

20:02.170 --> 20:02.650
阮远期一看

20:02.650 --> 20:03.210
我的天

20:03.210 --> 20:04.170
你这么来变化的话

20:04.170 --> 20:05.050
那我该出发啥

20:05.050 --> 20:05.690
全给你出发了

20:06.250 --> 20:07.770
是不是咱不想让它一下出发

20:07.770 --> 20:08.490
一大堆衣是吧

20:08.490 --> 20:09.850
而且每次出发一下的话

20:09.850 --> 20:10.890
是不是特别特别噁心

20:10.890 --> 20:11.370
是吧

20:11.370 --> 20:12.250
所以说这一块

20:12.970 --> 20:14.170
这个Transform这一块

20:14.170 --> 20:16.090
我们最好让它交给什么

20:16.090 --> 20:17.450
交给GPU来做

20:17.450 --> 20:18.570
交给GPU来做

20:18.570 --> 20:20.330
虽然说平时可能也交给GPU来做

20:20.330 --> 20:21.610
但是现在你交给GPU

20:21.610 --> 20:22.570
并且提醒一下

20:22.570 --> 20:23.210
说GPU

20:23.210 --> 20:25.370
能不能给我在另一个层面上

20:25.370 --> 20:26.250
去操作这样的事

20:26.250 --> 20:27.610
不要在原来的渲染层

20:27.610 --> 20:28.490
来操作这样的事

20:28.490 --> 20:29.210
所以说

20:29.210 --> 20:30.650
在另一个层面操作的话

20:30.650 --> 20:32.330
是不是触发的这样的次数

20:32.330 --> 20:33.370
会少很多

20:33.370 --> 20:33.770
是吧

20:33.770 --> 20:35.130
性能优化是不是少很多

20:35.130 --> 20:36.730
让它在另一个层面上

20:36.730 --> 20:37.770
在GPU的层上

20:37.770 --> 20:39.370
GPU给咱们提供一个新的层

20:39.370 --> 20:41.210
来处理这种Transform来操作

20:41.210 --> 20:42.250
是不是能好一些

20:42.250 --> 20:44.570
那哪些功能或者说

20:44.570 --> 20:46.090
哪些指令能让它触发

20:46.090 --> 20:47.290
GPU这个层呢

20:47.290 --> 20:49.930
你改变Obscity可以触发

20:49.930 --> 20:50.650
啊

20:50.650 --> 20:55.690
你用Transform的Translate3D

20:56.410 --> 20:58.250
或者TranslateZ

20:58.250 --> 21:00.010
或者啊TranslateZ

21:00.010 --> 21:01.290
都可以触发

21:01.290 --> 21:01.530
啊

21:01.530 --> 21:02.970
这些是一些运用的小技巧

21:02.970 --> 21:03.370
比如说

21:03.370 --> 21:04.410
你现在变成了变完之后

21:04.410 --> 21:05.850
你必须用Transform吧

21:05.850 --> 21:06.410
实际呢

21:06.410 --> 21:08.730
你也没用TranslateXY什么的

21:08.730 --> 21:09.210
但是呢

21:09.210 --> 21:10.330
我最好就换了

21:10.330 --> 21:11.930
前面不管你添了啥啥啥东西

21:11.930 --> 21:12.730
能弄一次吧

21:12.730 --> 21:14.250
不管你添了啥啥啥

21:14.250 --> 21:14.890
你最好呢

21:14.890 --> 21:16.490
在后面加个TranslateZ0

21:16.490 --> 21:18.010
这个东西把天和没天没什么用

21:18.010 --> 21:18.890
但是你添了之后

21:18.890 --> 21:19.930
相当于一个小的Hack

21:19.930 --> 21:20.810
它就会告诉别人

21:20.810 --> 21:21.450
赶紧吧

21:21.450 --> 21:22.170
过几个层

21:22.170 --> 21:22.810
我要操作了

21:22.810 --> 21:23.850
要召唤了是吧

21:24.010 --> 21:24.330
这样呢

21:24.330 --> 21:25.370
能给你省点效率

21:25.370 --> 21:26.170
明白有意思吧

21:26.170 --> 21:26.810
最好加这个

21:26.810 --> 21:27.850
你说Obsc.D那边还不建议

21:27.850 --> 21:28.490
你改它

21:28.490 --> 21:30.250
就说一道这个一些

21:30.250 --> 21:31.450
很很这个什么

21:31.450 --> 21:32.650
其他麻烦的事了是吧

21:32.650 --> 21:33.290
一般情况下

21:33.290 --> 21:34.090
我们是不是拿它

21:34.090 --> 21:35.370
都当做实际操作的一个指示

21:35.370 --> 21:36.010
是吧

21:36.010 --> 21:37.130
就是一般情况下

21:37.130 --> 21:37.850
都会这个

21:37.850 --> 21:39.050
你用它你也不知道

21:39.050 --> 21:40.090
因为你Obsc.D

21:40.090 --> 21:41.050
TranslateZ也可以啊

21:41.050 --> 21:42.170
也可以你Obsc.D1什么的

21:42.170 --> 21:42.650
但那么写

21:42.650 --> 21:43.290
就没有这样的

21:43.290 --> 21:44.410
Hack写法更常见

21:44.410 --> 21:45.050
明白有意思吧

21:45.050 --> 21:45.610
啊

21:45.610 --> 21:46.810
没有这样的写法更常见啊

21:46.810 --> 21:48.010
要不就写个3D00

21:48.010 --> 21:48.810
要不就写个0

21:48.810 --> 21:49.610
难道我意思吧

21:49.610 --> 21:51.210
这是触发的一个手段

21:51.210 --> 21:52.010
但现在呢

21:52.010 --> 21:52.650
我们基本上

21:52.650 --> 21:53.850
我教大家一个新的方法

21:53.850 --> 21:55.770
你不要去拿它来触发

21:55.770 --> 21:56.810
有一个新的属性

21:56.810 --> 21:58.570
叫Wheel Change

21:58.570 --> 21:59.930
随着属性现在的兼容性

21:59.930 --> 22:00.730
它比较高

22:00.730 --> 22:02.570
至少谷歌在40.0以上的版本

22:02.570 --> 22:03.450
才兼容

22:03.450 --> 22:04.650
但是它这个

22:04.650 --> 22:07.610
Wheel Change属性

22:07.610 --> 22:08.490
怎么办这么写

22:08.490 --> 22:09.450
Wheel Change属性

22:09.450 --> 22:10.490
你后面可以写

22:10.490 --> 22:11.850
你要变换的这个

22:11.850 --> 22:12.730
你要接下来

22:12.730 --> 22:13.530
产生变化的

22:13.530 --> 22:14.090
这样的一个属性

22:14.090 --> 22:15.210
让它监听一下

22:15.210 --> 22:15.770
一般情况下

22:15.770 --> 22:16.730
我们写的一个Transform

22:16.730 --> 22:17.770
你也只有Transform

22:17.770 --> 22:18.890
只设一道那么复杂动画

22:18.890 --> 22:20.890
那东西是吧 点针吧

22:20.890 --> 22:22.650
那么这个Wheel Change怎么来用呢

22:22.650 --> 22:23.450
听我说

22:23.450 --> 22:25.610
Wheel Change是提前告诉卤卵器

22:25.610 --> 22:26.490
说哥们儿

22:26.490 --> 22:27.050
一会儿

22:27.050 --> 22:28.490
我要针对这个属性

22:28.490 --> 22:30.250
可能要进一点复杂的变化

22:30.250 --> 22:32.330
你最好把这个属性

22:32.330 --> 22:36.250
你最好把用到这个属性这个元素

22:36.250 --> 22:37.690
你把它单独拎到一个层面

22:37.690 --> 22:39.130
一会儿让它自个儿往儿去

22:39.130 --> 22:40.170
而是这个有告卤卵器

22:40.170 --> 22:40.890
说一会儿

22:40.890 --> 22:42.890
它要调这个属性要变化了

22:42.890 --> 22:44.090
赶紧起个层

22:44.090 --> 22:45.450
让它先泡过去

22:45.450 --> 22:46.890
以便于它一会儿

22:46.890 --> 22:48.090
进行这样变换的时候

22:48.090 --> 22:49.290
来浪费你性能

22:49.290 --> 22:50.250
卤卵器说那好

22:50.250 --> 22:51.610
我刚刚给你变一个层

22:51.610 --> 22:51.930
出来

22:51.930 --> 22:53.210
然后你再上面带下去吧

22:53.210 --> 22:53.770
那东西是吧

22:53.770 --> 22:55.050
这是Wheel Change

22:55.050 --> 22:56.970
这个Wheel Change是现在的一个

22:56.970 --> 22:58.890
专业的标准给出的

22:58.890 --> 23:01.450
处理这种GPU加速的问题

23:01.450 --> 23:02.410
GPU加速问题

23:02.410 --> 23:04.810
原来咱们Translate Z是Hack

23:04.810 --> 23:05.450
不专业的

23:05.450 --> 23:08.250
专业的标准的GPU加速

23:08.250 --> 23:09.850
利用GPU加速处理的

23:09.850 --> 23:11.450
标准就是这个

23:11.450 --> 23:13.610
就是这个Wheel Change标准

23:13.610 --> 23:15.050
这个标准

23:15.050 --> 23:16.410
标准方法

23:16.970 --> 23:18.170
Wheel Change

23:18.170 --> 23:19.610
当然这个坚重性不是特别好的

23:19.610 --> 23:20.570
未来肯定没有问题

23:20.570 --> 23:22.570
现在没有理由拒绝它的使用

23:22.570 --> 23:25.210
但是它的使用咱不能说因为用它

23:25.210 --> 23:26.250
那你说成个

23:26.250 --> 23:27.850
我靠 那这个那可好了

23:27.850 --> 23:28.890
成个那这样

23:28.890 --> 23:29.850
我Wheel Change

23:32.410 --> 23:33.530
外式打击吧 成哥

23:33.530 --> 23:34.330
任何一个元素

23:34.330 --> 23:34.890
只要你变化

23:34.890 --> 23:36.330
在新的层面之际

23:36.330 --> 23:37.530
不行 孩子

23:37.530 --> 23:38.890
你层弄太多了

23:38.890 --> 23:41.370
反倒弄巧成着消耗性能

23:41.370 --> 23:42.410
我为啥这么说呢

23:42.410 --> 23:44.010
你比如说现在一个层

23:44.010 --> 23:45.050
可能说节约了

23:45.050 --> 23:46.090
你一半个层

23:46.090 --> 23:47.450
你想想能节约吗

23:47.450 --> 23:48.170
说不可能节约

23:48.170 --> 23:49.370
而且有个问题

23:49.370 --> 23:49.770
它是什么

23:49.770 --> 23:52.010
让浏览器预备准备的

23:52.010 --> 23:53.770
浏览器内部就要有一个机制

23:53.770 --> 23:54.810
去等待着它

23:54.810 --> 23:55.530
时刻监听

23:55.530 --> 23:56.570
你值不值得行吗

23:56.570 --> 23:57.290
你值不值得行吗

23:57.290 --> 23:58.890
就像那个Event一样

23:58.890 --> 23:59.770
能弄一次吧

23:59.770 --> 24:01.130
就是告诉浏览器

24:01.130 --> 24:02.090
你预备出来

24:02.090 --> 24:03.130
它就时刻预防了

24:03.130 --> 24:04.650
你啥数之星 啥数之星

24:04.650 --> 24:06.090
你预防的层太多了

24:06.090 --> 24:07.130
它肯定消耗性能

24:07.130 --> 24:08.570
而且消耗的非常严重

24:08.570 --> 24:09.370
明白我意思吧

24:09.370 --> 24:10.810
虽然说是GPU跟CPU没关系

24:10.810 --> 24:11.930
但它消耗太多了

24:11.930 --> 24:13.850
但是比影响你其他图像的渲染

24:13.850 --> 24:14.650
明白我意思吧

24:14.650 --> 24:16.250
所以说最好是什么呢

24:16.250 --> 24:17.690
你针对性的去做

24:17.690 --> 24:19.210
你要改哪个属性

24:19.210 --> 24:22.330
你在这个属性真正要运动之前

24:22.330 --> 24:23.530
你把它加上

24:23.530 --> 24:25.770
现在推荐的方法是这样的

24:25.770 --> 24:26.570
比如说

24:26.570 --> 24:27.690
我就是在这写了

24:27.690 --> 24:28.890
这个没必要给大家演示了

24:28.890 --> 24:30.250
你也都懂

24:30.250 --> 24:31.530
因为那边写得挺复杂的

24:31.530 --> 24:32.490
我不想杀了

24:32.490 --> 24:33.450
因为这样的

24:33.450 --> 24:35.450
比如说现在我想给一个DIV

24:35.450 --> 24:36.330
我想给一个DIV

24:36.330 --> 24:39.450
当我这个DIVHarvard上去之后

24:39.450 --> 24:41.210
我这个DIVHarvard上去之后

24:41.210 --> 24:43.050
我要进行一个

24:43.050 --> 24:44.650
不是Harvard进去之后

24:44.650 --> 24:45.930
比如说我DIV

24:45.930 --> 24:47.050
我要这个点击之后

24:47.050 --> 24:48.170
Activ是吧

24:48.170 --> 24:48.810
点击之后

24:48.810 --> 24:50.490
但这个Activ不推荐用

24:50.490 --> 24:51.770
当我被点击之后

24:51.770 --> 24:53.210
或者说拿JS来用

24:53.210 --> 24:56.090
当我被点击之后Transform

24:56.090 --> 24:58.170
然后Scale 是吧

24:58.170 --> 24:59.770
122

24:59.770 --> 25:02.250
当这个被点击之后变成23

25:02.250 --> 25:04.490
然后现在我是最好是怎么来做呢

25:04.490 --> 25:06.890
就是当这个动作发生之前

25:06.890 --> 25:08.410
你提前告诉刘亚奇

25:08.410 --> 25:10.090
你别牢牢牢之前靠刘亚奇

25:10.170 --> 25:11.370
会等的弄一次吧

25:11.370 --> 25:13.450
然后你告诉完之后

25:13.450 --> 25:14.810
最好找时间给他消除

25:14.810 --> 25:15.450
给他清除

25:15.450 --> 25:17.370
然后最好怎么做呢

25:17.370 --> 25:18.730
点击在出发的时候

25:18.730 --> 25:20.170
是你必须先Harvard

25:20.170 --> 25:21.770
你在先Harvard的时候

25:21.770 --> 25:23.050
你先告诉刘亚奇

25:23.050 --> 25:23.850
你说刘亚奇

25:23.850 --> 25:24.650
一会儿啊

25:24.650 --> 25:26.010
这哥们 这哥们

25:28.490 --> 25:30.570
一会我身上的这哥们

25:30.570 --> 25:32.090
DIVHarvard之后说

25:32.090 --> 25:34.330
我身上的这哥们要运动了

25:34.330 --> 25:35.530
要转化了

25:35.530 --> 25:37.770
赶紧起出一个新的层GPU加速

25:37.770 --> 25:38.410
帮他运动

25:38.410 --> 25:39.290
然后一点击的时候

25:39.290 --> 25:39.770
他就运动

25:39.850 --> 25:42.090
他就帮他去加速了

25:42.090 --> 25:42.890
那么有意思吧

25:42.890 --> 25:43.930
然后你移除的时候

25:43.930 --> 25:44.890
Harvard就没了

25:44.890 --> 25:45.610
有没有意思吧

25:45.610 --> 25:46.810
最好是这么来写

25:46.810 --> 25:48.330
才能更符合

25:48.330 --> 25:49.930
咱们想优化的一个目的

25:49.930 --> 25:51.530
否则你是神

25:53.530 --> 25:54.970
意识形态到了是吧

25:54.970 --> 25:56.730
但是实际效果就没到

25:56.730 --> 25:57.530
那也不喜欢

25:57.530 --> 25:58.810
所以说一般情况是这样

25:58.810 --> 26:00.730
说那我想试试到Harvard上

26:00.730 --> 26:01.850
当Harvard的时候再怎么到

26:01.850 --> 26:03.530
那你就拿JS来判断吧

26:03.530 --> 26:04.650
反正最好的用法

26:04.650 --> 26:06.890
是当他在他提前一刻的时候

26:06.890 --> 26:08.090
你告诉他就可以了

26:08.090 --> 26:09.370
如果你实在没有办法的话

26:09.370 --> 26:10.410
也可以全局坚挺

26:10.410 --> 26:11.530
就是有点好性能

26:11.530 --> 26:12.170
明白我意思吗

26:12.170 --> 26:12.730
兄弟们

26:12.730 --> 26:13.850
是不是这块没问题

26:13.850 --> 26:15.370
然后再说一些GPU

26:15.370 --> 26:16.570
我们的一些常识的问题

26:17.450 --> 26:18.330
一般情况下

26:18.330 --> 26:20.330
我们的电脑GPU所提供的性能

26:20.330 --> 26:21.930
就是他刷新页面的

26:21.930 --> 26:22.810
就是浏览器

26:24.490 --> 26:28.570
浏览器刷新页面的频率是多少呢

26:28.570 --> 26:29.530
一秒钟64

26:30.570 --> 26:31.290
一般情况下

26:31.290 --> 26:32.810
浏览器刷新页面的频率是

26:32.810 --> 26:33.530
一秒钟64

26:33.530 --> 26:36.650
也就是说每多少秒刷新一次页面

26:36.650 --> 26:39.050
是每16.7毫秒左右

26:39.050 --> 26:39.690
刷新一次页面

26:39.690 --> 26:41.210
你回去自己乘一乘是吧

26:41.210 --> 26:43.690
每16.7毫秒刷新一次页面

26:43.690 --> 26:45.690
如果咱们的GPU足够强大

26:45.690 --> 26:48.090
或者说如果咱们的编码结构

26:48.090 --> 26:50.570
足够的节约效率是吧

26:50.570 --> 26:53.450
GPU可以在可以在

26:53.450 --> 27:00.090
可以在一帧里渲染好页面

27:00.090 --> 27:06.090
纳莫当你改动页面的元素

27:06.170 --> 27:10.810
或者实现动画动画的时候

27:10.810 --> 27:13.690
将会非常流畅

27:13.690 --> 27:14.970
明白我意思吧

27:14.970 --> 27:17.370
一帧如果你给他设置的操作

27:17.370 --> 27:18.250
一帧能完事

27:18.250 --> 27:19.450
那就会非常流畅

27:19.450 --> 27:21.530
那每一帧都会非常非常的好

27:21.530 --> 27:22.410
如果一帧做不了

27:22.410 --> 27:23.210
那就得两帧做

27:23.210 --> 27:25.210
两帧是不是感觉上就没那么好了

27:25.210 --> 27:26.570
明白我意思吗

27:26.570 --> 27:28.410
这是一个底层一个原理

27:28.410 --> 27:29.450
这浏览器啊

27:29.450 --> 27:31.530
真频的刷新频率啊

27:31.530 --> 27:33.290
这个16.7毫秒

27:33.290 --> 27:34.650
没问题吧同学们

27:34.650 --> 27:35.770
没问题的话

27:35.770 --> 27:39.050
咱们今天的性能课基本上就到这了

27:39.050 --> 27:40.170
其实也没啥玩意

27:40.170 --> 27:41.610
你直到一个过程之后

27:41.610 --> 27:43.290
剩下的你都学到这个份儿了

27:43.290 --> 27:44.410
你都懂关键是

27:44.410 --> 27:45.850
一开始我要在H1000脑里面

27:45.850 --> 27:46.410
给你讲这个

27:46.410 --> 27:47.530
那得费死劲了

27:47.530 --> 27:48.650
在现在给你讲这个

27:48.650 --> 27:50.650
应该是没那么复杂了是吧

27:50.650 --> 27:52.810
那今天的课咱就先到这了

27:52.810 --> 27:53.770
回来回去之后

27:53.770 --> 27:54.890
自己手别了

27:54.890 --> 27:56.410
给我绘制一个这样的一个图

27:56.410 --> 27:58.250
好吧自己保存起来

27:58.250 --> 27:59.530
当然了我再说一嘴

27:59.530 --> 28:00.650
每个浏览器呢

28:00.650 --> 28:02.970
进行渲染的这样的一个流程

28:02.970 --> 28:04.170
都稍稍有点一同

28:04.170 --> 28:05.770
但主流上基本上是这样

28:05.770 --> 28:06.490
没那么意思吧

28:06.490 --> 28:07.690
原来机构造不一样吗

28:07.690 --> 28:09.450
那不能说把每个构造咱都讲一遍

28:09.450 --> 28:10.090
没那个必要

28:10.090 --> 28:12.010
你了解到这个程度就可以了

28:12.010 --> 28:13.850
行了基本知识已经差不多了

28:13.850 --> 28:15.530
那这堂课咱们就先到这

28:15.530 --> 28:16.810
接下来还有一堂课

28:16.810 --> 28:18.250
也是咱们C3没完事

28:18.250 --> 28:18.970
只不过那堂课

28:18.970 --> 28:20.170
用我的电脑讲得起来

28:20.170 --> 28:21.290
不是很方便

28:21.290 --> 28:23.690
所以我也有请咱们的美丽的

28:23.690 --> 28:26.250
美琪老师带我去讲一下这节课

28:26.250 --> 28:27.530
就是咱们的一个

28:27.530 --> 28:28.810
显然是不绝对的一个课

28:28.810 --> 28:30.410
因为那个需要一些机器方面

28:30.410 --> 28:32.330
去调配我麦克显然是不适合的

28:32.410 --> 28:34.490
让它拿着它Windows的本

28:34.490 --> 28:36.810
也更契合你们的本来试验这样的效果

28:36.810 --> 28:37.850
省着我这块试完之后

28:37.850 --> 28:38.650
你这块试不好试

28:38.650 --> 28:39.210
这就麻烦了

28:39.210 --> 28:39.930
知道吧

28:39.930 --> 28:40.490
对吧

28:40.490 --> 28:42.090
那咱们这堂课就到这了

28:42.090 --> 28:43.850
回去之后好好复习复习

28:43.850 --> 28:44.490
好吧

