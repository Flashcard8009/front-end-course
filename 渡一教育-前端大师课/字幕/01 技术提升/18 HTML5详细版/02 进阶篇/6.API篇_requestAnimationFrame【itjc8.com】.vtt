WEBVTT

00:00.000 --> 00:06.000
Hello 大家好 这一集我们来说一个新的H5的接口

00:06.000 --> 00:11.000
Request Animation Frame

00:11.000 --> 00:15.000
前两集说了一个什么location定位 是吧

00:15.000 --> 00:20.000
然后一个传感器 涂落仪传感器

00:20.000 --> 00:24.000
我们判断东西南北 手机是立着还是测着 是吧

00:25.000 --> 00:32.000
然后又学了一个什么 检查设备加速度的 检查移动方向的

00:32.000 --> 00:34.000
我们可以做一些摇一摇 是吧

00:34.000 --> 00:40.000
那今天我们来学一个不容易看出效果的

00:40.000 --> 00:43.000
一个动画优化

00:43.000 --> 00:47.000
比如说有个man 还是div

00:47.000 --> 00:53.000
我给他加一个

00:53.000 --> 00:57.000
我给他加一个属性 我给他加一个样式

00:57.000 --> 01:02.000
给他加一个样式 警号

01:02.000 --> 01:07.760
宽度 我给他一个100px

01:07.760 --> 01:12.760
然后高度我给他一个100px 给他一个background

01:12.760 --> 01:17.760
background用一个我喜欢的颜色abcdef

01:20.760 --> 01:25.140
我们来看一下这个页面长啥样

01:25.140 --> 01:27.140
大概就是这个样

01:27.140 --> 01:29.140
然后我们在这里给他写一个动作

01:29.140 --> 01:33.140
放个声 moon

01:33.140 --> 01:40.140
给他写个动作 document.getElementByDman

01:40.140 --> 01:46.140
the style, the life等于

01:46.140 --> 01:48.140
把它取出来

01:48.140 --> 01:50.140
square

01:50.140 --> 01:56.240
把这个方块给它取出来

01:56.240 --> 02:01.240
square的life等于square的office set life

02:01.240 --> 02:08.240
加上50px 加上20px

02:08.240 --> 02:15.840
加上20

02:15.840 --> 02:18.840
这样的话我就是相当于调用一次 moon

02:18.840 --> 02:21.840
就可以让它向右一二十向速 是吧

02:21.840 --> 02:25.920
我看一下

02:25.920 --> 02:30.770
我调用一次 moon

02:30.770 --> 02:33.770
它不变 看一下

02:34.770 --> 02:36.770
position absolute

02:36.770 --> 02:44.580
我每调一次 moon 它就会向右一二十向速

02:44.580 --> 02:47.580
每调一次 moon 它就会向右一二十向速

02:47.580 --> 02:48.580
我想让它连弯起来

02:48.580 --> 02:51.580
咱们过去让它连弯的运动 是吧

02:51.580 --> 02:52.580
side interval 是吧

02:52.580 --> 02:54.580
然后调一下 moon

02:54.580 --> 02:56.580
然后每多少秒 多少时间间隔一下

02:56.580 --> 02:59.580
比每20 每10

02:59.580 --> 03:01.580
每10毫秒间隔一下

03:01.580 --> 03:03.580
每10毫秒间隔一下

03:03.580 --> 03:06.580
然后也别太过劲

03:06.580 --> 03:08.580
如果呢

03:08.580 --> 03:10.580
这个

03:10.580 --> 03:14.080
超过了多少就不移了

03:14.080 --> 03:16.080
给它设置一个这个

03:16.080 --> 03:20.080
如果square的office set life

03:20.080 --> 03:24.080
大于700

03:24.080 --> 03:29.120
就不移动了

03:29.120 --> 03:32.120
大于700就不移动了

03:32.120 --> 03:34.120
我们看一下这个效果

03:34.120 --> 03:37.580
是吧

03:37.580 --> 03:39.580
它是一个这样的方式移过来的

03:39.580 --> 03:41.580
这样的方式移过来的

03:41.580 --> 03:43.580
很快的速度移过来的

03:43.580 --> 03:45.580
但是这个时候有一个

03:45.580 --> 03:47.580
会有一些什么问题

03:47.580 --> 03:48.580
我们由于太快

03:48.580 --> 03:51.580
我们肉眼不好分辨

03:51.580 --> 03:54.580
你大概的能感觉到

03:54.580 --> 03:57.580
你看到的小方块的移动速度

03:57.580 --> 03:58.580
不是均匀的

03:58.580 --> 03:59.580
你仔细看看

03:59.580 --> 04:02.580
仔细看看方块左边的那个轮

04:02.580 --> 04:03.580
那种间距

04:03.580 --> 04:05.580
应该不是均匀的

04:05.580 --> 04:08.580
在你的视野里应该不是均匀的

04:08.580 --> 04:10.580
应该不是均匀的

04:10.580 --> 04:11.580
为什么

04:11.580 --> 04:12.580
为什么会有这种现象

04:12.580 --> 04:14.580
给大家来画一下

04:14.580 --> 04:16.580
还有我上次画的灵魂的话

04:16.580 --> 04:18.580
是吧

04:18.580 --> 04:21.580
大家知道一个概念

04:21.580 --> 04:23.580
你们知道屏幕

04:23.580 --> 04:25.580
就是你的显示器

04:25.580 --> 04:27.580
刷新的频率是多少吗

04:27.580 --> 04:31.580
屏幕刷新的频率

04:31.580 --> 04:36.580
屏幕刷新的频率

04:36.580 --> 04:38.580
是多少

04:38.580 --> 04:39.580
屏幕的刷新的频率

04:39.580 --> 04:42.580
刷新的频率叫做60Hz

04:42.580 --> 04:45.580
每秒钟它是闪60次

04:45.580 --> 04:47.580
每秒60次

04:47.580 --> 04:50.580
每秒60次

04:54.580 --> 04:57.580
屏幕每秒钟就闪60次

04:57.580 --> 04:58.580
也就是说

04:58.580 --> 05:00.580
每一次有一个变化

05:00.580 --> 05:01.580
就顶天了

05:01.580 --> 05:02.580
因为闪一下子

05:02.580 --> 05:04.580
屏幕亮一下子只会有一个状态

05:04.580 --> 05:07.580
屏幕亮一下子只会有一个状态

05:07.580 --> 05:09.580
也就是说超过了60次

05:09.580 --> 05:11.580
如果超过了60次

05:11.580 --> 05:14.580
你的眼睛就看不出来了

05:14.580 --> 05:16.580
那些效果是表达不出来的

05:16.580 --> 05:18.580
就是如果

05:18.580 --> 05:21.580
如果这个变化

05:21.580 --> 05:23.580
一秒钟

05:23.580 --> 05:27.960
一秒超过60次

05:27.960 --> 05:29.960
那就必然

05:29.960 --> 05:30.960
哎呦

05:30.960 --> 05:31.960
我老暗暴存了

05:31.960 --> 05:33.960
那就必然

05:33.960 --> 05:37.960
会有一些动画针

05:37.960 --> 05:39.960
会丢掉

05:39.960 --> 05:43.850
会被丢掉

05:43.850 --> 05:44.850
对吧

05:44.850 --> 05:46.850
因为我屏幕只闪60次

05:46.850 --> 05:48.850
屏幕没闪一次

05:48.850 --> 05:50.850
只是一个状态

05:50.850 --> 05:51.850
屏幕没闪一次

05:51.850 --> 05:52.850
是一个画面状态

05:52.850 --> 05:53.850
屏幕没闪一次

05:53.850 --> 05:55.850
是一个画面状态

05:55.850 --> 05:58.850
你说屏幕就最多闪60次

05:58.850 --> 05:59.850
你整个70帧

05:59.850 --> 06:02.850
那是不是最后有10帧被丢掉

06:02.850 --> 06:03.850
是吧

06:03.850 --> 06:04.850
所以就会在屏幕上

06:04.850 --> 06:06.850
会出现一个卡顿的效果

06:06.850 --> 06:08.850
最后有这种跳跃

06:08.850 --> 06:10.850
你看我这个10毫秒

06:10.850 --> 06:12.850
那像一秒钟闪多少次

06:12.850 --> 06:14.850
一秒钟有100个动作

06:14.850 --> 06:16.850
一秒钟有100个动作

06:16.850 --> 06:19.850
但是我需要这么多动作吗

06:19.850 --> 06:20.850
我需要这么多动作吗

06:20.850 --> 06:21.850
我根本就不需要是吧

06:21.850 --> 06:24.850
我一秒钟有60个动作就已经

06:24.850 --> 06:25.850
就已经顶天了是吧

06:25.850 --> 06:27.850
因为我屏幕就闪60次

06:27.850 --> 06:28.850
我来100个动作干嘛呢

06:28.850 --> 06:29.850
那就浪费了是吧

06:29.850 --> 06:31.850
所以

06:31.850 --> 06:33.850
我们要优化这种现象

06:33.850 --> 06:34.850
我们要优化这种现象

06:34.850 --> 06:36.850
无论是side interval也好

06:36.850 --> 06:37.850
还是side timeout也好

06:37.850 --> 06:38.850
side timeout也好

06:38.850 --> 06:41.850
都是

06:41.850 --> 06:42.850
怎么样都是怎么样

06:42.850 --> 06:44.850
他都

06:44.850 --> 06:46.850
他都是这个

06:46.850 --> 06:48.850
可以自己定义这个帧数的

06:48.850 --> 06:52.850
可以自己定义帧数的

06:52.850 --> 06:55.850
所以我们尽量的不要让用户

06:55.850 --> 06:56.850
自己定一个帧数

06:56.850 --> 06:58.850
因为用户开发人员

06:58.850 --> 06:59.850
可以定的帧数远远大于60是吧

06:59.850 --> 07:00.850
我定100

07:00.850 --> 07:01.850
我撑着我可以

07:01.850 --> 07:02.850
一毫秒刷新一次

07:02.850 --> 07:04.850
我让他一秒钟刷1000次

07:04.850 --> 07:05.850
根本都没有必要

07:05.850 --> 07:06.850
没有必要

07:06.850 --> 07:07.850
所以我们来

07:07.850 --> 07:10.850
我们就出现了一个新的接口

07:10.850 --> 07:12.850
我们就出现了一个新的接口

07:12.850 --> 07:14.850
就是我们的request animation frame

07:14.850 --> 07:17.850
request animation frame

07:17.850 --> 07:20.850
那request animation frame

07:20.850 --> 07:22.850
怎么用呢

07:22.850 --> 07:28.850
这个request req ust animation frame

07:28.850 --> 07:30.850
request animation frame

07:30.850 --> 07:32.850
类似于什么呢

07:32.850 --> 07:35.850
我们来写一下

07:35.850 --> 07:36.850
试试吧

07:36.850 --> 07:37.850
让你们来看一下

07:37.850 --> 07:38.850
就知道了

07:38.850 --> 07:39.850
我在这里面掉一下木

07:39.850 --> 07:40.850
看好了

07:40.850 --> 07:41.850
它没有别的残数

07:41.850 --> 07:43.850
它就只有一个残数

07:43.850 --> 07:44.850
它就只有一个残数

07:44.850 --> 07:46.850
我来刷新一下页面

07:46.850 --> 07:51.500
看上去啥了没

07:51.500 --> 07:52.500
它就移动了一次

07:52.500 --> 07:53.500
是吧

07:53.500 --> 07:55.500
它就移动了一次

07:55.500 --> 07:57.500
它只移动了一次

07:57.500 --> 07:58.500
所以说

07:58.500 --> 07:59.500
它相当于什么呢

07:59.500 --> 08:00.500
它相当于是一个

08:00.500 --> 08:02.500
side-timeout是吧

08:02.500 --> 08:06.500
它相当于是side-timeout

08:06.500 --> 08:10.500
所以说我们在这里

08:10.500 --> 08:11.500
我们在这里

08:11.500 --> 08:12.500
要是想让它移动的话

08:12.500 --> 08:13.500
我得持续的调用它

08:13.500 --> 08:14.500
我得持续的调用它

08:14.500 --> 08:17.500
我在这里面再调一次

08:17.500 --> 08:20.500
再调一次

08:20.500 --> 08:24.970
在这会儿就再调一次

08:24.970 --> 08:26.970
那就不能这么写了是吧

08:26.970 --> 08:27.970
我们获取到了

08:27.970 --> 08:28.970
这个东西了之后

08:28.970 --> 08:31.970
如果大于700就

08:31.970 --> 08:33.970
这样

08:33.970 --> 08:34.970
再它移了20相速了之后

08:34.970 --> 08:36.970
我们就再让它移一次

08:36.970 --> 08:37.970
再让它移一次

08:37.970 --> 08:39.970
最后我们来调用一下木

08:39.970 --> 08:43.970
让它有个最开始的启动

08:43.970 --> 08:45.970
你会看到这个时候

08:45.970 --> 08:47.970
这个时候绝对是均匀的

08:47.970 --> 08:48.970
你的眼睛看到的

08:48.970 --> 08:50.970
这个块的移动是均匀的

08:50.970 --> 08:54.560
这样的

08:54.560 --> 08:58.560
它这个块移动的速度是均匀的

08:58.560 --> 08:59.560
这个就是H5

08:59.560 --> 09:01.560
帮助我们来做的一个优化

09:01.560 --> 09:04.560
H5来帮助我们做的优化

09:04.560 --> 09:05.560
这个时候

09:05.560 --> 09:07.560
有的时候同学就问了

09:07.560 --> 09:09.560
它为什么会均匀

09:09.560 --> 09:11.560
因为

09:11.560 --> 09:12.560
记住

09:12.560 --> 09:20.560
因为request inamation frame share

09:20.560 --> 09:25.190
每秒60帧

09:25.190 --> 09:26.190
有的同学

09:26.190 --> 09:28.190
四维块的同学就会问了

09:28.190 --> 09:29.190
那老师

09:29.190 --> 09:30.190
我把side info

09:30.190 --> 09:31.190
也设成每秒钟60帧

09:31.190 --> 09:32.190
行不行

09:32.190 --> 09:33.190
我把side info

09:33.190 --> 09:34.190
设成每秒钟60帧

09:34.190 --> 09:35.190
行不行

09:35.190 --> 09:36.190
我们来写一下

09:36.190 --> 09:38.190
你看看

09:38.190 --> 09:39.190
我把这个住掉

09:41.190 --> 09:43.190
还是side info

09:43.190 --> 09:45.190
我这会传木

09:45.190 --> 09:46.190
然后我这时间

09:46.190 --> 09:49.190
我出个1000除以60

09:49.190 --> 09:50.190
1000除以60

09:50.190 --> 09:52.190
是不是就是每秒60帧

09:52.190 --> 09:54.190
好了

09:54.190 --> 09:56.190
是不是你感觉

09:56.190 --> 09:58.190
样子上没有什么

09:58.190 --> 09:59.190
额外的变化是吧

09:59.190 --> 10:00.190
样子上并没有什么

10:00.190 --> 10:01.190
特殊的变化

10:01.190 --> 10:03.190
并没有什么特殊的变化

10:03.190 --> 10:05.190
但是

10:05.190 --> 10:07.190
实际上

10:07.190 --> 10:08.190
层上是有变化的

10:08.190 --> 10:09.190
但是这种底层上的变化

10:09.190 --> 10:11.190
你很难很难的看得出来

10:11.190 --> 10:13.190
我来可以给你讲

10:13.190 --> 10:14.190
到了时候

10:14.190 --> 10:15.190
如果你在面试的时候

10:15.190 --> 10:16.190
如果要问到的话

10:16.190 --> 10:17.190
你可以这样说

10:17.190 --> 10:18.190
但是这种现象

10:18.190 --> 10:20.190
你是很难看得到的

10:20.190 --> 10:22.190
因为只有在特别复杂的动画的时候

10:22.190 --> 10:24.190
才会有一些影响

10:24.190 --> 10:26.190
什么现象呢

10:26.190 --> 10:29.190
就是side info

10:29.190 --> 10:30.190
你比如说我让他

10:30.190 --> 10:31.190
一秒钟执行60帧

10:31.190 --> 10:33.190
一秒钟执行60帧

10:33.190 --> 10:35.190
那是不是先执行第一帧

10:35.190 --> 10:37.190
先执行第一帧

10:37.190 --> 10:39.190
再执行第二帧

10:39.190 --> 10:41.190
再执行第三帧

10:41.190 --> 10:43.190
对吧

10:43.190 --> 10:45.190
然后他得有个前提

10:45.190 --> 10:46.190
他得有个前提

10:46.190 --> 10:47.190
什么前提

10:47.190 --> 10:49.190
每一帧的执行时间

10:49.190 --> 10:50.190
得怎么样

10:50.190 --> 10:53.190
得少约少约什么

10:53.190 --> 10:55.190
每一帧的执行时间

10:55.190 --> 10:57.190
得少约

10:57.190 --> 10:59.190
60分之一

10:59.190 --> 11:01.190
60分之一秒

11:01.190 --> 11:08.740
如果你这一帧的时间

11:08.740 --> 11:10.740
如果大于60分之一秒了

11:10.740 --> 11:11.740
那你这个东西

11:11.740 --> 11:13.740
是一秒钟是运行不完的

11:13.740 --> 11:14.740
你这个东西的一秒钟

11:14.740 --> 11:15.740
是运行不完的

11:15.740 --> 11:16.740
这就是side info

11:16.740 --> 11:18.740
他会让你的60帧

11:18.740 --> 11:20.740
排成2秒3秒去做

11:20.740 --> 11:21.740
如果你这一帧

11:21.740 --> 11:22.740
里面动画

11:22.740 --> 11:23.740
就是一个目

11:23.740 --> 11:24.740
假如说写的特别的长

11:24.740 --> 11:26.740
计算的特别的复杂

11:26.740 --> 11:28.740
你这一秒钟是执行不完的60帧

11:28.740 --> 11:32.740
但是我们requested animation

11:32.740 --> 11:37.170
requested animation

11:37.170 --> 11:40.170
requested animation frame

11:40.170 --> 11:42.170
它会有一个单特殊的对列

11:42.170 --> 11:44.170
它会有一个特殊的对列

11:44.170 --> 11:47.170
它是可以执行

11:47.170 --> 11:49.170
它是可以按时准时

11:49.170 --> 11:52.170
准时执行每一帧点

11:52.170 --> 11:57.700
它是可以准时执行每一帧的

11:57.700 --> 11:59.700
它就是在每一个机器的

11:59.700 --> 12:01.700
时间点上去执行

12:01.700 --> 12:02.700
每一帧的动画

12:02.700 --> 12:03.700
就是在每一个机器的

12:03.700 --> 12:04.700
时间点上执行

12:04.700 --> 12:05.700
每一个帧的动画

12:05.700 --> 12:07.700
这是它俩的底层的一些

12:07.700 --> 12:08.700
细小的区别

12:08.700 --> 12:09.700
一些细小的区别

12:09.700 --> 12:11.700
为什么我们在这个时候

12:11.700 --> 12:12.700
看不见的

12:12.700 --> 12:13.700
因为这一点

12:13.700 --> 12:14.700
这一点的操作

12:14.700 --> 12:16.700
远远小于60分之1

12:16.700 --> 12:18.700
远远小于60分之1

12:18.700 --> 12:19.700
这个秒

12:19.700 --> 12:21.700
因为就一两毫秒就结束了

12:21.700 --> 12:23.700
其实做一个这点的动作

12:23.700 --> 12:25.700
所以你根本就看不出来

12:25.700 --> 12:26.700
只有业务逻辑

12:26.700 --> 12:28.700
特别复杂的时候

12:28.700 --> 12:30.700
你才有可能能看出来

12:30.700 --> 12:32.700
set interval和requested animation

12:32.700 --> 12:34.700
set timeout和requested animation

12:34.700 --> 12:37.700
之间的区别

12:37.700 --> 12:39.700
所以说它是无论如何都会

12:39.700 --> 12:40.700
准时执行每一帧的

12:40.700 --> 12:43.700
set timeout或者set interval

12:43.700 --> 12:44.700
是上一帧不执行完

12:44.700 --> 12:46.700
是绝对不会执行下一帧的

12:46.700 --> 12:49.700
好 这就是它俩的区别

12:49.700 --> 12:51.700
所以说requested animation frame

12:51.700 --> 12:53.700
其实也就是相当于是一个

12:53.700 --> 12:56.700
你可以理解为一个set timeout

12:56.700 --> 12:58.700
但是它默认是一秒钟

12:58.700 --> 13:00.700
60帧

13:00.700 --> 13:02.700
就是用这种方式来进行优化

13:02.700 --> 13:05.700
这就是requested animation

13:05.700 --> 13:11.700
这一集咱们补充一个属性值

13:11.700 --> 13:13.700
补充一个属性值

13:13.700 --> 13:17.700
咱们上一集说了requested animation frame

13:17.700 --> 13:18.700
是吧

13:18.700 --> 13:20.700
requested animation frame

13:20.700 --> 13:22.700
很像set timeout

13:22.700 --> 13:24.700
我们说怎么能让它停住

13:24.700 --> 13:26.700
怎么能让它停住

13:26.700 --> 13:28.700
看好了

13:28.700 --> 13:29.700
可以给它怎么样

13:29.700 --> 13:30.700
给它定一个什么

13:30.700 --> 13:32.700
给你定一个timeout

13:32.700 --> 13:34.700
给它定一个timeout

13:34.700 --> 13:36.700
定一个

13:36.700 --> 13:38.700
在哪儿定义

13:38.700 --> 13:40.700
定一个timeout

13:40.700 --> 13:43.460
timeout

13:43.460 --> 13:48.050
等于空

13:48.050 --> 13:53.050
然后我们每一个东西都等于一个timeout

13:53.050 --> 13:56.050
然后我每一次来进行判断

13:56.050 --> 13:58.050
每一次来进行判断

13:58.050 --> 14:00.050
如果

14:00.050 --> 14:02.050
如果它要是大于700的时候

14:02.050 --> 14:04.050
我现在想的是不是return

14:04.050 --> 14:06.050
我想要把timeout给取消

14:06.050 --> 14:08.050
我想把timeout给取消怎么取消

14:08.050 --> 14:10.050
另一个方法

14:10.050 --> 14:13.050
cancel animation frame

14:13.050 --> 14:15.050
cancel animation frame

14:15.050 --> 14:17.050
把这个timeout

14:17.050 --> 14:19.050
传进来

14:19.050 --> 14:21.050
这样就可以取消

14:21.050 --> 14:23.050
这就相当于什么

14:23.050 --> 14:26.050
这就相当于clear timeout

14:26.050 --> 14:28.050
clear timeout

14:28.050 --> 14:30.050
我们来执行一下

14:32.050 --> 14:34.050
没好使是吧

14:34.050 --> 14:35.050
来看一下

14:35.050 --> 14:36.050
cancel了之后

14:36.050 --> 14:40.870
然后再return

14:40.870 --> 14:41.870
cancel了之后

14:41.870 --> 14:42.870
然后再return

14:42.870 --> 14:45.870
它就没有这个timeout

14:45.870 --> 14:47.870
没有这个timeout

14:47.870 --> 14:48.870
好了

14:48.870 --> 14:50.870
我们这个东西

14:50.870 --> 14:57.870
我们说cancel animation frame

14:57.870 --> 15:00.870
基本上是相当于

15:00.870 --> 15:05.870
相当于clear timeout

15:06.870 --> 15:08.870
什么clear timeout

15:09.870 --> 15:13.870
基本上是相当于clear timeout

15:13.870 --> 15:15.870
没什么我说了个基本上

15:15.870 --> 15:17.870
它的清除作用

15:17.870 --> 15:19.870
是相当于clear timeout的

15:19.870 --> 15:22.870
但是它的机制和clear timeout

15:22.870 --> 15:23.870
是不一样的

15:23.870 --> 15:25.870
因为它俩用的对列就不一样

15:25.870 --> 15:26.870
是吧

15:26.870 --> 15:28.870
咱刚才上一节课说了

15:28.870 --> 15:30.870
request animation frame

15:30.870 --> 15:32.870
可以准确的执行每一帧

15:32.870 --> 15:33.870
它就不是

15:33.870 --> 15:34.870
把每一个事情

15:34.870 --> 15:36.870
都压在标准的时间对列里面

15:36.870 --> 15:37.870
去执行了

15:37.870 --> 15:38.870
它是有一个中间插队的

15:38.870 --> 15:39.870
这样的一个机制的

15:39.870 --> 15:42.870
cancel animation frame

15:42.870 --> 15:43.870
表面上

15:43.870 --> 15:46.870
cancel是和clear timeout一样

15:46.870 --> 15:47.870
就给清除了

15:47.870 --> 15:48.870
但是实际上它清的

15:48.870 --> 15:49.870
不是同一个对列

15:49.870 --> 15:52.870
不是同一个对列里的东西

15:52.870 --> 15:53.870
你就暂时记着

15:53.870 --> 15:55.870
现象是跟它一样的就行

15:55.870 --> 15:56.870
其实这个东西

15:56.870 --> 15:58.870
没有人过意的强求

15:58.870 --> 15:59.870
为什么呢

15:59.870 --> 16:01.870
因为不同的浏览器

16:01.870 --> 16:02.870
它还有不同的实现方式

16:02.870 --> 16:03.870
因为不同的浏览器

16:03.870 --> 16:05.870
有不同的实现方式

16:05.870 --> 16:06.870
没准这一代浏览器这样

16:06.870 --> 16:07.870
下一代浏览器

16:07.870 --> 16:08.870
它就变了

16:08.870 --> 16:09.870
这个东西

16:09.870 --> 16:11.870
现在没有一个强行的标准

16:11.870 --> 16:13.870
没有一个强行的标准

16:15.870 --> 16:18.870
它从没有一个强行的标准里面

16:18.870 --> 16:20.870
我们可以再来说一个点

16:20.870 --> 16:22.870
再来说一个点

16:22.870 --> 16:23.870
什么点呢

16:23.870 --> 16:28.870
request animation frame

16:28.870 --> 16:30.870
这个方法

16:30.870 --> 16:35.870
兼容性极差

16:35.870 --> 16:36.870
兼容性极差

16:36.870 --> 16:37.870
这啥意思

16:37.870 --> 16:40.870
基本上没有多少浏览器支持

16:40.870 --> 16:43.870
基本上没有多少个浏览器的版本支持

16:43.870 --> 16:44.870
所以这个东西

16:44.870 --> 16:45.870
在我们实际的开发中

16:45.870 --> 16:47.870
用的基本上也不多

16:47.870 --> 16:48.870
在我们实际开发中

16:48.870 --> 16:49.870
用的基本上也不多

16:49.870 --> 16:51.870
为什么提到了这么个属性

16:51.870 --> 16:53.870
是因为它既然出现了

16:53.870 --> 16:54.870
未来浏览器

16:54.870 --> 16:56.870
就会逐渐的去来使用它

16:56.870 --> 16:57.870
接受它

16:57.870 --> 16:59.870
然后让这种性能

16:59.870 --> 17:00.870
提升

17:00.870 --> 17:01.870
但是我们现在

17:01.870 --> 17:02.870
依然是储存在一个

17:02.870 --> 17:04.870
兼容性极差的阶段

17:04.870 --> 17:06.870
所以我们不会特意的

17:06.870 --> 17:08.870
去讲属性

17:08.870 --> 17:10.870
而且它还在不同浏览器里面

17:10.870 --> 17:11.870
有不同的实现方式

17:11.870 --> 17:13.870
所以在正常的开发中

17:13.870 --> 17:14.870
我们几乎不会用

17:14.870 --> 17:15.870
在正常的开发中

17:15.870 --> 17:17.870
我们几乎不会用

17:17.870 --> 17:19.870
这就是request animation

17:19.870 --> 17:20.870
这档课也就

17:20.870 --> 17:22.870
这一集也就是简单的来

17:22.870 --> 17:25.870
说一下它的应用

17:25.870 --> 17:27.870
它的应用其实就相当于是

17:27.870 --> 17:28.870
没啥应用

17:28.870 --> 17:29.870
跟我们最开始说的

17:29.870 --> 17:30.870
这个标签是一样的

17:30.870 --> 17:31.870
是吧

17:31.870 --> 17:32.870
那个时候还记着

17:32.870 --> 17:33.870
我们说的那么多的

17:33.870 --> 17:36.870
H5的新标签吗

17:36.870 --> 17:37.870
有的时候我们不用一个东西

17:37.870 --> 17:38.870
往往就是因为

17:38.870 --> 17:40.870
它的兼容性极差

17:40.870 --> 17:42.870
这个时候我们说了

17:42.870 --> 17:43.870
兼容性极差

17:43.870 --> 17:44.870
老实我有的时候

17:44.870 --> 17:45.870
还就是想用它怎么办

17:45.870 --> 17:48.870
我兼容性极差我也想用

17:48.870 --> 17:49.870
怎么办

17:49.870 --> 17:51.870
那就得用一套代码

17:51.870 --> 17:52.870
来给它完善一下

17:52.870 --> 17:53.870
用一套代码给它完善一下

17:53.870 --> 17:55.870
我来写一下这套代码

17:55.870 --> 17:57.870
你们只做一个了解就可以

17:57.870 --> 17:58.870
不用非得技术

17:58.870 --> 18:00.870
因为我们本身就不怎么用

18:00.870 --> 18:02.870
我们来说点个外的

18:02.870 --> 18:04.870
这个Windows

18:04.870 --> 18:07.870
Windows

18:07.870 --> 18:09.870
比如说Casual Animation Frame

18:09.870 --> 18:11.870
Casual Animation Frame

18:11.870 --> 18:12.870
复制下来

18:12.870 --> 18:14.870
有可能它是没有东西的

18:14.870 --> 18:17.870
有可能它是没有寒树的

18:17.870 --> 18:20.870
所以我给它来个立即支援寒树

18:20.870 --> 18:22.870
我这立即支援寒树里面

18:22.870 --> 18:24.870
返回一个啥呢

18:24.870 --> 18:25.870
看好了

18:25.870 --> 18:30.870
返回一个Windows的Casual Animation Frame

18:30.870 --> 18:32.870
我看看这玩意儿存不存在

18:32.870 --> 18:33.870
我看看这玩意儿存不存在

18:33.870 --> 18:35.870
如果不存在我返回啥

18:35.870 --> 18:39.870
我返回一个Windows.ViborCate

18:39.870 --> 18:41.870
Casual Animation Frame

18:41.870 --> 18:42.870
是吧

18:42.870 --> 18:44.870
这种是什么火狐

18:44.870 --> 18:45.870
谷歌之类的

18:45.870 --> 18:46.870
谷歌类的浏览器

18:46.870 --> 18:47.870
是吧

18:47.870 --> 18:48.870
还有

18:48.870 --> 18:52.870
还有就是Windows.Mozela

18:52.870 --> 18:53.870
Moz

18:53.870 --> 18:54.870
Casual Animation Frame

18:55.870 --> 19:01.870
Casual Animation Frame

19:01.870 --> 19:03.870
这是火狐上的是吧

19:03.870 --> 19:06.870
最后你既不是通用的

19:06.870 --> 19:07.870
也不是谷歌类

19:07.870 --> 19:08.870
不是火狐类的

19:08.870 --> 19:09.870
那怎么办

19:09.870 --> 19:11.870
我给它返回一个方法

19:11.870 --> 19:16.850
Clear

19:16.850 --> 19:18.850
Clear Timeout

19:18.850 --> 19:23.440
类似于这样

19:23.440 --> 19:25.440
类似于这样

19:26.440 --> 19:28.440
我来给这个东西复制

19:28.440 --> 19:29.440
复完了直直之后我再用

19:29.440 --> 19:31.440
这是Casual Animation Frame

19:31.440 --> 19:33.440
我们也可以给谁复制

19:33.440 --> 19:36.440
也可以给Request Animation Frame复制

19:36.440 --> 19:37.440
是吧

19:37.440 --> 19:38.440
也是类似于这样

19:38.440 --> 19:39.440
然后这块

19:39.440 --> 19:41.440
如果是给Request Animation复制

19:41.440 --> 19:42.440
这块就是相当于什么

19:42.440 --> 19:44.440
给它复了一个Side Timeout

19:44.440 --> 19:45.440
是吧

19:45.440 --> 19:46.440
然后一个ID

19:46.440 --> 19:47.440
这块传啥

19:47.440 --> 19:49.440
传一个1000出以60

19:49.440 --> 19:51.440
就是60人

19:51.440 --> 19:52.440
是吧

19:52.440 --> 19:53.440
16.8是吧

19:53.440 --> 19:54.440
16.7还是16.8

19:54.440 --> 19:55.440
大概是这么个数

19:55.440 --> 19:57.440
这样我们就能保证

19:57.440 --> 19:59.440
在任何一种浏览器环境下

19:59.440 --> 20:00.440
都能支持是吧

20:00.440 --> 20:01.440
你有

20:01.440 --> 20:02.440
最好

20:02.440 --> 20:03.440
就给你复过去

20:03.440 --> 20:04.440
如果你没有

20:04.440 --> 20:05.440
什么都没有

20:05.440 --> 20:07.440
最后我就用Side Timeout

20:07.440 --> 20:08.440
再去代替

20:08.440 --> 20:09.440
虽然我们说了

20:09.440 --> 20:10.440
Side Timeout

20:10.440 --> 20:14.440
它的性能上比不上Request Animation Frame

20:14.440 --> 20:16.440
但是总不至于

20:16.440 --> 20:17.440
没得用是吧

20:17.440 --> 20:18.440
总不至于没得用

20:18.440 --> 20:20.440
所以你要强行要用这个的话

20:20.440 --> 20:22.440
尽量写一段这样的兼容

20:22.440 --> 20:24.440
尽量来写一段兼容

20:24.440 --> 20:25.440
比如说

20:27.440 --> 20:29.440
我这会儿改回去

20:29.440 --> 20:30.440
比如说

20:30.440 --> 20:31.440
还得再写一个这个是吧

20:31.440 --> 20:33.440
刚才我写的Cancel

20:33.440 --> 20:37.440
你最好还得再写一个Request Animation Frame

20:37.440 --> 20:40.440
也是一个这样的立即执行函数

20:42.440 --> 20:44.440
也是一个这样的立即执行函数

20:44.440 --> 20:49.440
Request Animation Frame

20:51.440 --> 20:53.440
Windows WebKit

20:54.440 --> 21:01.010
Request Animation Frame

21:01.010 --> 21:02.010
就类似于这样

21:02.010 --> 21:04.010
它也把这种东西都给复制上去

21:04.010 --> 21:05.010
最后

21:05.010 --> 21:06.010
如果实在没有

21:06.010 --> 21:07.010
那是个啥

21:07.010 --> 21:09.010
就返回一个ID

21:09.010 --> 21:15.010
然后Return是一个Windows Side Timeout

21:16.010 --> 21:18.010
然后ID

21:18.010 --> 21:20.010
1600

21:22.010 --> 21:23.010
有

21:23.010 --> 21:24.010
我就用

21:24.010 --> 21:26.010
我就把这个变成这个

21:26.010 --> 21:27.010
没有的话

21:27.010 --> 21:29.010
我就用Side Timeout去替代的

21:29.010 --> 21:30.010
你要是强行

21:30.010 --> 21:31.010
非得想用这个的话

21:31.010 --> 21:32.010
你就这么写

21:32.010 --> 21:33.010
这是一种兼容的写法

21:33.010 --> 21:35.010
这是一种兼容的写法

21:35.010 --> 21:36.010
但是我们还是

21:36.010 --> 21:38.010
现在暂时不建议使用这个

21:38.010 --> 21:41.010
大家仅作为了解和参考就可以

