WEBVTT

00:00.000 --> 00:03.740
好,我们开始写这个手风琴效果的代码

00:04.160 --> 00:06.200
老规矩,先来ATM

00:06.420 --> 00:09.860
来,评件有文件,应该是第二ATM

00:11.100 --> 00:15.240
然后呢,再把CSSA分开弄上吧

00:15.240 --> 00:17.880
CSSA,我这里没分文件夹了

00:18.320 --> 00:20.400
然后引用

00:21.200 --> 00:23.600
CSSA在这,另一个

00:24.480 --> 00:25.480
再

00:25.940 --> 00:27.440
CSSA

00:28.240 --> 00:30.640
然后是GS

00:31.140 --> 00:36.240
因为我们这里有动画,所以我把之前写的那个动画就放进去了

00:36.240 --> 00:37.640
动画那个插件

00:37.640 --> 00:43.180
然后还有一个我们这里的index的CS

00:43.180 --> 00:46.540
好,接下来我们来写这个ATM结构

00:46.540 --> 00:49.340
我们一边看页面中效果,一边来写

00:49.740 --> 00:52.540
我这里就用UL了,整个就是一个UL

00:53.140 --> 00:55.940
给它取的那样是Main New Container

00:55.940 --> 00:58.540
表示的是菜单的容器

00:59.040 --> 01:01.940
然后每个菜单下边有很多的项

01:01.940 --> 01:09.440
第一项,第二项,第三项,第四项

01:09.440 --> 01:11.540
所以说每一项就是一个Li

01:11.940 --> 01:14.340
这个Li给它一个那样是吧,叫做Main New

01:16.440 --> 01:17.540
乘一个4

01:18.340 --> 01:20.740
里边是什么呢?

01:20.740 --> 01:22.540
每个Li下边又是什么呢?

01:22.740 --> 01:24.840
每个Li下边是个指菜单

01:24.840 --> 01:28.240
那么这个指有一个H2元素,就这个

01:28.340 --> 01:29.940
当然你也可以用别的元素

01:29.940 --> 01:34.440
H2元素,H2元素下面的内容是菜单

01:34.440 --> 01:38.240
多了就是个站位符,它自动生成,于是就生成这么一种结构

01:38.840 --> 01:41.440
但是每一个Li下边除了H2之外

01:41.440 --> 01:43.640
其实这里还有一个这么UL,对吧

01:43.640 --> 01:44.440
还有一个UL

01:44.440 --> 01:47.240
因此我这边就直接来

01:48.040 --> 01:49.240
我把这个扩起来

01:50.140 --> 01:51.440
这是Mate 语法

01:51.440 --> 01:54.440
就是用于快速来生成,一定没代码的

01:54.840 --> 01:56.240
如果说你不太习惯这个

01:56.240 --> 01:58.840
你就老老实实一行一行,其实也没啥

02:00.040 --> 02:01.640
扩起来就是这是一个整体

02:01.640 --> 02:04.340
就是Li下面有4个

02:04.340 --> 02:06.140
每个Li下面有一个H2

02:06.740 --> 02:10.340
然后除了H2之外,H2还有个兄弟元素

02:10.540 --> 02:12.440
这个兄弟元素是一个UL

02:12.740 --> 02:14.740
那么如果说你写成这样子的话,一生成

02:14.740 --> 02:16.240
你看,就变成这种结构了

02:16.740 --> 02:21.040
好,每个UL下面又有4个指菜单

02:21.440 --> 02:24.040
这个指菜单呢,每个指菜单的内容呢

02:24.040 --> 02:26.540
是给这个UL一个样式,叫submenu

02:27.240 --> 02:30.040
表示指菜单,形成这么一种结构

02:31.040 --> 02:33.840
好,每个指菜单下面是有很多的Li

02:33.840 --> 02:34.640
有4个吧

02:34.840 --> 02:37.240
然后里边又是拆单

02:38.640 --> 02:41.040
生成一下,于是就生成出来了这么一种结构

02:41.240 --> 02:43.640
这就是咱们想要的一个ATM结构

02:43.640 --> 02:46.040
当然这个结构呢,我们还没有设置样式

02:46.040 --> 02:48.240
所以说看上去跟我们想像的不太一样

02:48.240 --> 02:49.640
来吧,慢慢设置样式

02:50.240 --> 02:53.000
首先呢,我给这个menu

02:53.000 --> 02:55.840
contain了就整个容器呢,设置一个背景颜色

02:56.040 --> 02:58.440
背景颜色就nice blue吧,这些都无所谓

02:59.240 --> 03:00.040
不是重点啊

03:00.840 --> 03:03.940
给它一个宽度吧,宽度的话300个像素

03:06.700 --> 03:07.600
200个像素

03:08.300 --> 03:08.900
差不多了

03:09.400 --> 03:13.600
然后Martin0L2

03:14.400 --> 03:15.000
好,过来

03:15.600 --> 03:17.200
这里边有很多的默认样式

03:17.200 --> 03:19.600
我说说我这里的干脆把默认样式给它清除掉吧

03:19.800 --> 03:22.600
然后H2里边有些默认样式,什么margin呢

03:23.200 --> 03:25.800
给它设为0,pending设为0

03:25.800 --> 03:27.000
对吧,这个东西

03:27.000 --> 03:29.600
然后方size,设为100%吧

03:29.800 --> 03:30.800
一个字体大调

03:31.200 --> 03:33.400
然后方之weight,normal

03:34.400 --> 03:35.200
好,差不多了

03:35.600 --> 03:38.200
然后呢,UL有些默认样式,什么margin呢

03:38.200 --> 03:41.000
给它设置为0,pending设置为0

03:41.800 --> 03:43.400
然后给它设置一个ness style

03:46.000 --> 03:46.800
好,差不多了

03:48.720 --> 03:52.520
好,接下来呢,我们来去设置细化列里边的每一块的样式

03:53.320 --> 03:56.320
首先呢,我们找到这个H2元素

03:57.120 --> 03:59.920
这个H2元素呢,给它设置一个pending嘛,左右的pending

04:00.920 --> 04:02.320
这些东西是随便弄一弄就差不多了

04:02.320 --> 04:03.520
我们主要是作戏也是

04:04.920 --> 04:08.320
MenuContainerShareBread的H2

04:08.320 --> 04:10.320
给它设置一个左右的pending

04:10.320 --> 04:14.120
上下为0,左右呢,为个25个像素吧

04:15.520 --> 04:16.120
差不多了

04:16.120 --> 04:18.120
然后给整个呢,设置一个航高

04:18.520 --> 04:21.520
因为每一个菜单像呢,其实就是30个像素的高度

04:21.520 --> 04:24.720
所以说我这里边呢,就给它设置一个整个的航高

04:25.520 --> 04:26.320
NanHeight

04:27.520 --> 04:28.120
30个像素

04:29.320 --> 04:29.920
差不多

04:31.720 --> 04:34.520
好,然后是里边的紫菜单

04:34.920 --> 04:39.120
紫菜单的话,我们给它MenuContainerShareBread的Submenu

04:39.520 --> 04:42.120
就是这个Submenu,我们就直接不用成绩了

04:43.120 --> 04:46.120
给它一个背景颜色,因为它背景颜色不太一样

04:47.120 --> 04:49.120
这个背景颜色是不太一样的,我们复制一下

04:49.120 --> 04:51.120
把这个颜色copy过来

04:52.120 --> 04:55.430
好,再设置个背景颜色

04:56.430 --> 04:59.430
然后这个Submenu呢,我们再去设置一下它的左右pending

04:59.430 --> 05:04.430
上下为0,左右呢,也是给它设置一个30个像素

05:05.430 --> 05:06.430
差不多这么个意思了

05:07.430 --> 05:09.430
而Submenu下面呢,有很多的Li

05:10.430 --> 05:12.430
那么这个Li呢,给它一个固定高度30

05:13.430 --> 05:15.430
每个摊单像30个高度

05:17.430 --> 05:18.430
差不多了吧

05:18.430 --> 05:21.430
然后还有什么呢,给这个A7加上一个鼠标样式吧

05:21.430 --> 05:22.430
PerserPointer

05:23.430 --> 05:24.430
差不多了

05:24.430 --> 05:27.430
不过呢,一开始呢,这个菜单是隐藏的

05:27.430 --> 05:29.430
这个隐藏是怎么做的呢

05:29.430 --> 05:30.430
我们之前演示过

05:30.430 --> 05:33.430
我们使用的方式呢,是给这个紫菜单

05:33.430 --> 05:35.430
设置一个高度为0

05:37.430 --> 05:39.430
高度为0,但是呢,因为高度为0之后

05:39.430 --> 05:41.430
它高度倒是没有了

05:41.430 --> 05:44.430
但是呢,它一出是显示的

05:44.430 --> 05:45.430
里边一出不会是显示的

05:45.430 --> 05:47.430
所以说给它一个overflow height

05:47.430 --> 05:48.430
就不显示了

05:48.430 --> 05:50.430
哦对,那个主菜单那边呢

05:50.430 --> 05:52.430
它的之间有一点空气

05:52.430 --> 05:54.430
那我就给它设置个空气吧

05:55.430 --> 05:57.430
主菜单是那个menu

05:57.430 --> 05:58.430
是那个Li

05:59.430 --> 06:02.430
就这个Li,每个Li之间是有一段空气的

06:02.430 --> 06:03.430
所以要给它设置一个,这个好说

06:03.430 --> 06:04.430
设置个mortin

06:04.430 --> 06:07.430
上下呢,为20个像素吧

06:07.430 --> 06:08.430
左右为0

06:12.430 --> 06:13.430
呵呵

06:17.570 --> 06:19.570
倒是有mortin的

06:19.570 --> 06:21.570
呃,这个H

06:22.570 --> 06:25.570
有mortin的,为什么是这样子的

06:25.570 --> 06:29.840
它mortin部分

06:29.840 --> 06:33.840
哦,我是给这个,我背景颜色设置错了

06:33.840 --> 06:35.840
我是给这个设置的背景颜色

06:35.840 --> 06:37.840
呃,不应该给这里设置

06:37.840 --> 06:40.840
应该给这个H2去设置,这个背景颜色

06:40.840 --> 06:41.840
这样对了

06:42.840 --> 06:43.840
这样对了

06:44.840 --> 06:45.840
ok

06:45.840 --> 06:47.840
好,那么接下来我们要用介

06:47.840 --> 06:49.840
就是CSS天板就写好了

06:49.840 --> 06:51.840
接下来呢,我要用介石来控制的

06:51.840 --> 06:53.840
其实就是这个UL

06:53.840 --> 06:55.840
这个UL呢,我们去设置它的高度

06:55.840 --> 06:57.840
比方说高度给它设置成

06:57.840 --> 06:59.840
一两半

06:59.840 --> 07:00.840
它弹出来了,对吧

07:00.840 --> 07:01.840
设置成0,它弹回去了

07:01.840 --> 07:03.840
就这么一个效果

07:03.840 --> 07:04.840
那么具体设置为多少呢

07:04.840 --> 07:05.840
我们到时候要去算

07:05.840 --> 07:07.840
你不能假设这个菜单就是4个

07:07.840 --> 07:08.840
这个菜单有可能会变弄的

07:08.840 --> 07:10.840
因为都是金人弹页

07:10.840 --> 07:11.840
那种都会变的

07:11.840 --> 07:12.840
主菜单不一定是4个

07:12.840 --> 07:14.840
主菜单有可能是200个

07:14.840 --> 07:15.840
只菜单可能是你

07:15.840 --> 07:16.840
可能是没有

07:16.840 --> 07:19.840
甚至有可能是100个

07:19.840 --> 07:20.840
都有可能啊

07:20.840 --> 07:21.840
所以说这里不能去假设

07:21.840 --> 07:22.840
到时候我们动态计算吧

07:22.840 --> 07:23.840
因为我们知道

07:23.840 --> 07:25.840
每一个菜单箱的高度是30

07:25.840 --> 07:26.840
所以我们到时候算就行了

07:26.840 --> 07:28.840
好,接下来我们到介石里面去

07:28.840 --> 07:30.840
那我们这里介石

07:30.840 --> 07:31.840
我们还是要到

07:31.840 --> 07:32.840
以前的思路延续的来

07:32.840 --> 07:33.840
一个是初始化

07:33.840 --> 07:35.840
就是我一开始不动

07:35.840 --> 07:37.840
人不动的时候

07:38.840 --> 07:39.840
他要做啥

07:39.840 --> 07:40.840
另外一个就是交互

07:40.840 --> 07:44.220
就是用户动了

07:44.220 --> 07:46.220
动了什么的时候

07:46.220 --> 07:47.220
他又要做啥

07:47.220 --> 07:48.220
无非就是这么两个点

07:48.220 --> 07:49.220
对吧

07:49.220 --> 07:50.220
那么这个效果里面

07:50.220 --> 07:51.220
可以很容易看出

07:51.220 --> 07:52.220
这个初始化

07:52.220 --> 07:53.220
好像是没有什么事情可以做

07:53.220 --> 07:54.220
你要做啥吗

07:54.220 --> 07:55.220
你今天又要做啥吗

07:55.220 --> 07:56.220
你没有啥事情可以做

07:56.220 --> 07:57.220
所以说

07:57.220 --> 07:58.220
那么这里

07:58.220 --> 08:00.220
我们重点落在这个交互里面

08:00.220 --> 08:01.220
那么这个交互

08:01.220 --> 08:02.220
我们要去做一些事

08:02.220 --> 08:03.220
做什么事呢

08:03.220 --> 08:04.220
就是说

08:04.220 --> 08:07.220
我们监听用户点击

08:07.220 --> 08:09.220
点击谁呀

08:09.220 --> 08:10.220
点击谁呀

08:10.220 --> 08:12.220
点击这个H2元数

08:12.220 --> 08:13.220
对不对

08:13.220 --> 08:15.220
所以我们监听点击这个H2元数

08:15.220 --> 08:16.220
好

08:16.220 --> 08:17.220
那么我们这里

08:17.220 --> 08:18.220
毫无疑问

08:18.220 --> 08:20.220
肯定要去监听H2

08:20.220 --> 08:21.220
那么监听过后

08:21.220 --> 08:22.220
点了过后要做啥

08:22.220 --> 08:23.220
我们再说

08:23.220 --> 08:24.220
但是我们肯定要去监听他

08:24.220 --> 08:25.220
对吧

08:25.220 --> 08:26.220
所以说我们这里的

08:26.220 --> 08:28.220
用户变量叫做titles

08:30.220 --> 08:32.220
这个地方来获取

08:32.220 --> 08:34.220
获取所有的

08:34.220 --> 08:35.220
标题元数

08:36.220 --> 08:37.220
就我们这里边

08:37.220 --> 08:38.220
所有的标题元数

08:38.220 --> 08:39.220
那这里边获取的

08:40.220 --> 08:41.220
对吧

08:41.220 --> 08:42.220
获取所有的

08:42.220 --> 08:43.220
用CSS选择器

08:43.220 --> 08:44.220
获取所有的

08:44.220 --> 08:45.220
获取什么呢

08:45.220 --> 08:47.220
获取menu下边的H2

08:48.220 --> 08:50.220
我这里写的还是比较谨慎

08:50.220 --> 08:51.220
虽然我们这个效果里面

08:51.220 --> 08:52.220
你直接用H2也行

08:53.220 --> 08:54.220
只不过呢

08:55.220 --> 08:56.220
写习惯了

08:56.220 --> 08:57.220
还是

08:57.220 --> 08:58.220
稳脱一点

08:58.220 --> 08:59.220
万一以后这个

08:59.220 --> 09:00.220
标的效果里边

09:00.220 --> 09:01.220
要考虑到以后

09:01.220 --> 09:02.220
那标的其他地方也会有H2

09:02.220 --> 09:03.220
那就把

09:03.220 --> 09:04.220
不相干的获取

09:04.220 --> 09:05.220
所以说我们只获取

09:05.220 --> 09:06.220
标题里边的H2元数

09:07.220 --> 09:09.220
然后循环注册事件

09:10.220 --> 09:12.220
循环注册事件

09:14.220 --> 09:15.220
titles

09:16.220 --> 09:17.220
是不是就这个H2元数

09:18.220 --> 09:19.220
然后给它注册什么事件呢

09:19.220 --> 09:21.220
unclick 点击事件

09:22.220 --> 09:23.220
点击的时候

09:23.220 --> 09:24.220
我们要去做解数

09:24.220 --> 09:25.220
对吧

09:25.220 --> 09:26.220
我们来输出一下

09:26.220 --> 09:27.220
这里我们先简单的输出一下

09:27.220 --> 09:28.220
点击

09:28.220 --> 09:29.220
点击的时候

09:29.220 --> 09:30.220
这个菜单的

09:31.220 --> 09:32.220
标题

09:32.220 --> 09:33.220
怎么输出呢

09:33.220 --> 09:34.220
this inner

09:35.220 --> 09:37.220
因为我们知道

09:37.220 --> 09:39.220
在事件函数里边

09:39.220 --> 09:40.220
Z指向谁啊

09:40.220 --> 09:41.220
什么指向

09:42.220 --> 09:43.220
触发事件的一个元数

09:43.220 --> 09:44.220
对不对

09:44.220 --> 09:45.220
我们来看一下

09:47.220 --> 09:48.220
点击

09:50.220 --> 09:51.220
那么这里呢

09:51.220 --> 09:52.220
我就说到这吧

09:52.220 --> 09:53.220
既然都说到这吧

09:54.220 --> 09:55.220
那我就要说一个

09:55.220 --> 09:56.220
经典问题了

09:56.220 --> 09:57.220
那里整不能这样子写

09:59.530 --> 10:00.530
这个问题是不是

10:00.530 --> 10:01.530
解释过的

10:02.530 --> 10:03.530
对吧

10:03.530 --> 10:04.530
在循环里边

10:04.530 --> 10:08.530
受到变量提升的影响

10:08.530 --> 10:10.530
导致了

10:10.530 --> 10:11.530
这个i

10:11.530 --> 10:12.530
在触发事件

10:12.530 --> 10:14.530
这事件真正运行的时候

10:14.530 --> 10:16.530
循环早就结束了

10:16.530 --> 10:18.530
这个i就是最终的那个i的值

10:19.530 --> 10:20.530
所以说这里呢

10:21.530 --> 10:23.530
如果说你写成这样

10:23.530 --> 10:24.530
这种代码的话

10:24.530 --> 10:25.530
你是拿不到的

10:26.530 --> 10:28.530
它得到的是undefined

10:28.530 --> 10:29.530
为什么是undefined呢

10:29.530 --> 10:31.530
你输出这个i你就明白了

10:35.380 --> 10:36.380
是全都是是

10:36.380 --> 10:37.380
为什么呢

10:37.380 --> 10:38.380
你把这个

10:38.380 --> 10:40.380
因为我们这里有变量提升

10:40.380 --> 10:41.380
你把这个变

10:41.380 --> 10:43.380
它最终形成的结果是这样子的

10:45.380 --> 10:46.380
它们违视循环

10:46.380 --> 10:47.380
用的是同一个i

10:47.380 --> 10:48.380
就导致了

10:48.380 --> 10:49.380
当点

10:49.380 --> 10:51.380
循环很快就结束了

10:51.380 --> 10:52.380
对吧

10:52.380 --> 10:53.380
循环注册事件很快就结束了

10:53.380 --> 10:55.380
当你用户真正点击的时候

10:55.380 --> 10:56.380
那么这个i

10:56.380 --> 10:57.380
由于循环早就结束了

10:57.380 --> 10:59.380
所以这个i的值就是4

10:59.380 --> 11:00.380
因为到了4

11:00.380 --> 11:02.380
就导致了循环结束

11:03.380 --> 11:05.380
所以这里就是我们在书书讲结束了

11:05.380 --> 11:06.380
循环结束

11:07.380 --> 11:08.380
顺便说一下

11:08.380 --> 11:09.380
都讲来了

11:09.380 --> 11:10.380
顺便说一下

11:10.380 --> 11:11.380
你看我们这里早就循环结束了

11:11.380 --> 11:13.380
说循环结束的时候i的值是多少

11:13.380 --> 11:15.380
i的值是4

11:16.380 --> 11:17.380
对吧

11:17.380 --> 11:18.380
所以后边你再点击

11:18.380 --> 11:19.380
就重复了使用的这个i的值

11:19.380 --> 11:21.380
它就始终是4

11:21.380 --> 11:22.380
那么如果说

11:22.380 --> 11:23.380
你一定要用这种写法的话

11:23.380 --> 11:24.380
你应该怎么办

11:24.380 --> 11:26.380
是不是用臂包的方式

11:26.380 --> 11:28.380
写一个立即执行函数

11:29.380 --> 11:30.380
把这个i传进去

11:30.380 --> 11:31.380
那么这样子呢

11:31.380 --> 11:32.380
就

11:32.380 --> 11:34.380
意思就是说

11:34.380 --> 11:36.380
我们在这个函数里边

11:36.380 --> 11:37.380
用的这个i

11:37.380 --> 11:39.380
不再是这个i了

11:39.380 --> 11:40.380
不再是外边这个i了

11:40.380 --> 11:42.380
是这个函数里边的i

11:42.380 --> 11:43.380
对吧

11:43.380 --> 11:44.380
这个函数里边的i

11:44.380 --> 11:46.380
它用臂包的方式把它固定下来了

11:46.380 --> 11:47.380
这是用这种写法

11:47.380 --> 11:48.380
以后学了es6之后

11:48.380 --> 11:50.380
有更好的做法

11:50.380 --> 11:51.380
这种做法以前

11:51.380 --> 11:53.380
确实是没有什么办法

11:53.380 --> 11:54.380
说到一大圈

11:54.380 --> 11:55.380
我们绕回来

11:55.380 --> 11:56.380
这里结束

11:56.380 --> 11:58.380
我们用z19完全可以得到当前元数

12:00.380 --> 12:01.380
好

12:01.380 --> 12:02.380
那么现在

12:02.380 --> 12:03.380
我给每一个标题

12:03.380 --> 12:04.380
出称的时间

12:04.380 --> 12:05.380
接下来我们要想

12:06.380 --> 12:07.380
要做啥

12:08.380 --> 12:10.380
问题是我们现在要做啥

12:11.380 --> 12:12.380
要想这个问题了

12:13.380 --> 12:14.380
要做啥呢

12:14.380 --> 12:16.380
其实我们就是点了

12:16.380 --> 12:17.380
这个标题过后

12:18.380 --> 12:19.380
我们要控制

12:19.380 --> 12:20.380
这个标题

12:20.380 --> 12:22.380
下边的菜单

12:22.380 --> 12:24.380
显示和隐藏

12:25.380 --> 12:26.380
所以就要做这么一个事

12:26.380 --> 12:28.380
控制这个标题

12:28.380 --> 12:29.380
下边的菜单

12:29.380 --> 12:32.380
显示或者是隐藏

12:32.380 --> 12:33.380
那么这里

12:33.380 --> 12:34.380
不仅是这个菜单

12:34.380 --> 12:36.380
一菜单二是不是也是一样的

12:36.380 --> 12:38.380
控制菜单二下边的

12:38.380 --> 12:39.380
这个指菜单

12:39.380 --> 12:40.380
显示和隐藏

12:40.380 --> 12:42.380
那么这里就涉及到一个功能

12:43.380 --> 12:46.380
显示和隐藏的功能

12:47.380 --> 12:48.380
于是

12:48.380 --> 12:49.380
这里标我们就

12:49.380 --> 12:51.380
最好是去写两个函数

12:51.380 --> 12:54.380
一个叫做OpenSubmenu

12:56.380 --> 12:57.380
这个函数是什么

12:58.380 --> 13:00.380
打开指菜单

13:01.380 --> 13:03.380
还有一个函数

13:03.380 --> 13:05.380
CloseSubmenu

13:05.380 --> 13:08.380
这个函数作用就是关闭指菜单

13:08.380 --> 13:09.380
一个是显示一个是隐藏

13:09.380 --> 13:11.380
道理都是一样的道理

13:12.380 --> 13:13.380
如果说以后我点它过后

13:13.380 --> 13:15.380
它要显示我就把

13:15.380 --> 13:16.380
调用这个

13:16.380 --> 13:18.380
点它过后我要隐藏就调用这个

13:18.380 --> 13:19.380
对不对

13:19.380 --> 13:20.380
我们显示函数

13:20.380 --> 13:21.380
显示函数的好处在什么呢

13:21.380 --> 13:23.380
一是降低复杂度

13:23.380 --> 13:25.380
把一块很复杂的代码

13:25.380 --> 13:26.380
把抽离出去

13:26.380 --> 13:29.380
形成一个一个的指代码

13:30.380 --> 13:31.380
到时候

13:32.380 --> 13:34.380
整个的整体复杂度就降低了

13:34.380 --> 13:36.380
这里边代码就变少了

13:36.380 --> 13:38.380
我们把代码进行切分了

13:38.380 --> 13:40.380
相当于是把一个复杂问题

13:40.380 --> 13:42.380
切分成一个一个小问题

13:42.380 --> 13:43.380
去解决每一个小问题

13:43.380 --> 13:45.380
解决完了过后复杂问题就解决了

13:45.380 --> 13:47.380
这是函数的一个好处

13:47.380 --> 13:48.380
另外

13:48.380 --> 13:50.380
我们也可以通过这个函数来

13:50.380 --> 13:51.380
单独进行测试

13:51.380 --> 13:53.380
测试它每一个指功的

13:53.380 --> 13:54.380
也比较好测试

13:55.380 --> 13:56.380
我们这里就写呗

13:56.380 --> 13:57.380
现在写打开指菜单

13:57.380 --> 13:59.380
那么这里需不需要参数

14:00.380 --> 14:01.380
肯定需要参数

14:01.380 --> 14:03.380
不然的话我打开哪个指菜单

14:03.380 --> 14:04.380
我电话这个函数是打开哪个指菜单

14:04.380 --> 14:05.380
我不知道

14:05.380 --> 14:08.380
所以你要把这个指菜单动物元素给我

14:09.380 --> 14:10.380
把这个指菜单的动物元素

14:10.380 --> 14:11.380
也就是说

14:11.380 --> 14:12.380
你要把这个东西给我

14:12.380 --> 14:15.380
你要把这个UL给我

14:16.380 --> 14:17.380
就这个玩意儿给我

14:18.380 --> 14:19.380
好来吧

14:20.380 --> 14:21.380
我们这边也是一样

14:21.380 --> 14:22.380
要把这个UL给我

14:23.380 --> 14:26.380
好那么打开指菜单的时候

14:26.380 --> 14:27.380
我们这里呢

14:27.380 --> 14:29.380
是不是可以拿到这个动物元素

14:29.380 --> 14:30.380
当时我们测试的时候

14:30.380 --> 14:31.380
我们怎么来测试呢

14:31.380 --> 14:32.380
非常简单

14:32.380 --> 14:34.380
我们就随便拿找一个指菜单

14:34.380 --> 14:36.380
我们就找第一个指菜单

14:37.380 --> 14:39.380
比方说我们测试

14:39.380 --> 14:40.380
测试

14:41.380 --> 14:43.380
随便找一个指菜单

14:43.380 --> 14:45.380
Test Menu

14:45.380 --> 14:46.380
找一个Document

14:46.380 --> 14:47.380
CreateSelect

14:47.380 --> 14:48.380
Submenu

14:48.380 --> 14:49.380
就找了第一个指菜单

14:50.380 --> 14:51.380
然后呢

14:51.380 --> 14:53.380
我们就调用这个OpenSubmenu

14:53.380 --> 14:54.380
去打开它

14:54.380 --> 14:56.380
当然也可以在控制台里边

14:56.380 --> 14:58.380
就你看学会这种

14:58.380 --> 15:00.380
写单码的这种做法

15:00.380 --> 15:01.380
慢慢去测试

15:01.380 --> 15:02.380
Submenu

15:02.380 --> 15:03.380
然后我们把这个Test

15:03.380 --> 15:04.380
Submenu传进去

15:04.380 --> 15:05.380
这样子是不可以调用

15:05.380 --> 15:06.380
来进行测试

15:07.380 --> 15:09.380
好当然我这个函数里边还没写

15:09.380 --> 15:11.380
现在我们来写

15:12.380 --> 15:13.380
打开指菜单

15:13.380 --> 15:14.380
我们要做啥呢

15:14.380 --> 15:15.380
其实

15:16.380 --> 15:18.380
无非就是把这个指菜单的高度

15:18.380 --> 15:19.380
从0

15:19.380 --> 15:21.380
变到多少

15:22.380 --> 15:23.380
说120

15:23.380 --> 15:24.380
不一定是120

15:24.380 --> 15:25.380
那是不是要看

15:25.380 --> 15:27.380
这个指菜单里面的菜单像是多少

15:27.380 --> 15:29.380
每个菜单像高度是30

15:29.380 --> 15:30.380
也就是说

15:30.380 --> 15:32.380
我们这里打开指菜单的做法

15:32.380 --> 15:36.380
就是将指菜单的高度

15:36.380 --> 15:39.380
从0变到多少呢

15:39.380 --> 15:41.380
那么这个多少是不是要算

15:42.380 --> 15:43.380
对不对

15:43.380 --> 15:44.380
那么0我们知道

15:44.380 --> 15:46.380
那么多少要算

15:46.380 --> 15:47.380
怎么算呢

15:47.380 --> 15:48.380
是不是就是

15:51.460 --> 15:54.460
指向数量乘以30

15:54.460 --> 15:56.460
当然个30是应变

15:56.460 --> 15:58.460
我们最好用个变量保存一下

15:58.460 --> 16:00.460
ItemTight30

16:00.460 --> 16:03.460
每个指菜单的高度

16:03.460 --> 16:04.460
那么就是

16:04.460 --> 16:05.460
是不是就乘以这个

16:07.460 --> 16:09.460
那么指向数量是怎么算的

16:09.460 --> 16:10.460
指向数量不就它吗

16:11.460 --> 16:12.460
它是指菜单的UL

16:12.460 --> 16:13.460
对吧

16:13.460 --> 16:14.460
那么这个UL

16:14.460 --> 16:17.460
是不是Submenu点Chill

16:18.460 --> 16:19.460
点Lens

16:19.460 --> 16:20.460
我就是指向数量

16:21.460 --> 16:22.460
咱们看一下

16:26.460 --> 16:29.460
Submenu我传进去了

16:29.460 --> 16:31.460
然后Chill

16:31.460 --> 16:33.460
我已经写错了

16:39.930 --> 16:40.930
指向是不是

16:40.930 --> 16:43.930
把动态算出来

16:43.930 --> 16:44.930
那么这就是指向数量

16:44.930 --> 16:46.930
因此我们可以算出

16:46.930 --> 16:48.930
它到来的目标值是多少

16:48.930 --> 16:49.930
从哪个值到哪个值

16:49.930 --> 16:51.930
从0到哪个目标值

16:51.930 --> 16:53.930
是不是ItemHeight

16:54.930 --> 16:59.500
于是2就算出来了

16:59.500 --> 17:00.500
那是不是就动画

17:00.500 --> 17:01.500
从一个指慢慢变到另一个指

17:01.500 --> 17:02.500
是不是动画

17:02.500 --> 17:03.500
来吧

17:03.500 --> 17:04.500
我们是用个Praise

17:04.500 --> 17:05.500
Animate

17:05.500 --> 17:06.500
是不是我们把个介石

17:06.500 --> 17:07.500
已经倒进来了

17:07.500 --> 17:08.500
对吧

17:08.500 --> 17:09.500
Animation

17:10.500 --> 17:11.500
那么这边

17:11.500 --> 17:12.500
从哪个值

17:12.500 --> 17:13.500
从0变到哪个值

17:13.500 --> 17:15.500
变到2这个值

17:15.500 --> 17:16.500
对吧

17:16.500 --> 17:17.500
变到这个变量的值

17:17.500 --> 17:18.500
然后你也可以把这个玩意

17:18.500 --> 17:19.500
写过来

17:19.500 --> 17:20.500
也行

17:22.500 --> 17:23.500
从这个值变到这个值

17:23.500 --> 17:24.500
然后呢

17:24.500 --> 17:25.500
总时间呢

17:25.500 --> 17:26.500
TotalMS

17:26.500 --> 17:27.500
总时间呢

17:27.500 --> 17:28.500
是

17:28.500 --> 17:30.500
我们就叫定义的吧

17:30.500 --> 17:31.500
500毫秒

17:32.500 --> 17:33.500
500毫秒的变动

17:34.500 --> 17:35.500
每一次变动

17:36.500 --> 17:37.500
每一次变动

17:37.500 --> 17:39.500
它就会运行这个函数

17:39.500 --> 17:41.500
它变动的中间的值

17:41.500 --> 17:42.500
会告诉我

17:42.500 --> 17:43.500
好

17:43.500 --> 17:44.500
咱们来试一下

17:44.500 --> 17:45.500
OpenMenu

17:45.500 --> 17:46.500
你看是不是

17:46.500 --> 17:47.500
它就一直变同0

17:47.500 --> 17:48.500
变到了多少

17:48.500 --> 17:49.500
变到了120

17:49.500 --> 17:50.500
那么每一次变动

17:50.500 --> 17:51.500
我只需要做的事情

17:51.500 --> 17:52.500
就是给这个Submenu

17:52.500 --> 17:54.500
去设置一个什么

17:54.500 --> 17:55.500
Style

17:55.500 --> 17:57.500
重新设置它的高度等于n

17:57.500 --> 17:59.500
你看有了之前的动画函数

17:59.500 --> 18:01.500
这个写起来太舒服了

18:04.260 --> 18:05.260
对吧

18:05.260 --> 18:06.260
是不是就变完了

18:06.260 --> 18:07.260
你看

18:07.260 --> 18:08.260
那么这里就

18:08.260 --> 18:09.260
设置到另外一个问题了

18:09.260 --> 18:11.260
它如果说已经打开了

18:11.260 --> 18:13.260
你还能再重新打开它吗

18:14.260 --> 18:15.260
所以就不能了

18:16.260 --> 18:17.260
如果说这个

18:17.260 --> 18:19.260
纸菜单已经被打开了

18:19.260 --> 18:20.260
你还能再重新打开它吗

18:20.260 --> 18:21.260
不能了

18:21.260 --> 18:22.260
对吧

18:22.260 --> 18:23.260
所以就这个道理

18:23.260 --> 18:25.260
还有一种情况就是

18:26.260 --> 18:27.260
你看

18:27.260 --> 18:28.260
还有一种情况

18:28.260 --> 18:29.260
比方说把时间射长一点

18:29.260 --> 18:30.260
3500

18:30.260 --> 18:31.260
好表

18:31.260 --> 18:32.260
这样我们看的薪水点

18:32.260 --> 18:34.260
正在打开的过程中

18:34.260 --> 18:36.260
你还能再打开吗

18:36.260 --> 18:37.260
不行

18:37.260 --> 18:38.260
你看就会导致

18:38.260 --> 18:40.260
设置到很多个计时期

18:40.260 --> 18:41.260
所以说

18:41.260 --> 18:42.260
这里面有一个问题

18:42.260 --> 18:43.260
就是

18:43.260 --> 18:44.260
它这个纸菜单像

18:44.260 --> 18:46.260
是有状态的

18:47.260 --> 18:50.260
纸菜单是有状态的

18:50.260 --> 18:51.260
什么状态呢

18:51.260 --> 18:52.260
一共就三种状态

18:52.260 --> 18:54.260
要么就是关闭

18:54.260 --> 18:56.260
目前是关闭的

18:56.260 --> 18:58.260
要么就是已经打开

18:59.260 --> 19:00.260
要么就是

19:00.260 --> 19:02.260
正在播放动画

19:02.260 --> 19:04.260
就正在动画过程中

19:04.260 --> 19:05.260
是不是

19:05.260 --> 19:06.260
是不是有状态的

19:06.260 --> 19:07.260
我们什么时候

19:07.260 --> 19:09.260
才能打开纸菜单

19:09.260 --> 19:10.260
只有它是关闭

19:10.260 --> 19:11.260
状态的时候

19:11.260 --> 19:13.260
就目前是关闭的时候

19:13.260 --> 19:15.260
那么才能打开它

19:15.260 --> 19:16.260
它如果说已经打开了

19:16.260 --> 19:17.260
或者是正在播放动画

19:17.260 --> 19:19.260
我是不能动的

19:19.260 --> 19:21.260
明儿的意思吧

19:21.260 --> 19:22.260
是不是这个道理

19:22.260 --> 19:23.260
如果说是关闭的

19:23.260 --> 19:24.260
我才能打开

19:24.260 --> 19:25.260
以后这个代码

19:25.260 --> 19:26.260
我们不是说

19:26.260 --> 19:27.260
所有情况都要运行

19:27.260 --> 19:29.260
而只有这种情况

19:29.260 --> 19:30.260
我才运行

19:30.260 --> 19:31.260
对吧

19:31.260 --> 19:32.260
我们把它写完上一点

19:32.260 --> 19:34.260
那么现在问题又转换成了

19:34.260 --> 19:35.260
我如何去知道

19:35.260 --> 19:37.260
纸菜单有的状态

19:37.260 --> 19:38.260
它目前到底是一个

19:38.260 --> 19:39.260
什么样的状态

19:39.260 --> 19:41.260
我怎么知道

19:41.260 --> 19:43.260
我怎么知道呢

19:43.260 --> 19:44.260
有些人说

19:44.260 --> 19:45.260
判断高度

19:45.260 --> 19:47.260
判断高度其实也可以

19:48.260 --> 19:49.260
高度为你

19:49.260 --> 19:50.260
那肯定是关闭的

19:50.260 --> 19:52.260
那高度为

19:52.260 --> 19:53.260
120就是

19:53.260 --> 19:54.260
它到达到目标高度

19:54.260 --> 19:56.260
它肯定是打开的

19:56.260 --> 19:57.260
如果说高度在

19:57.260 --> 19:58.260
监狱这个之间

19:58.260 --> 19:59.260
那肯定在播放动画

19:59.260 --> 20:00.260
倒不是不属于不属于

20:00.260 --> 20:01.260
不行也可以

20:01.260 --> 20:02.260
但是呢

20:02.260 --> 20:04.260
更好的更一越多的代码呢

20:04.260 --> 20:06.260
是我用这种方式

20:06.260 --> 20:09.260
我给它去写这么一个东西

20:09.260 --> 20:10.260
我给一面上的菜单

20:10.260 --> 20:11.260
每个菜单

20:11.260 --> 20:12.260
像比方说

20:12.260 --> 20:13.260
这个菜单

20:13.260 --> 20:14.260
我给它做一个自定义属性

20:14.260 --> 20:15.260
做一个标记

20:15.260 --> 20:16.260
自定义属性

20:16.260 --> 20:17.260
它对显示来说

20:17.260 --> 20:18.260
没有什么用

20:18.260 --> 20:21.260
是专门给GS来获取的

20:21.260 --> 20:22.260
比方说

20:22.260 --> 20:24.260
我给它写个自定义属性叫status

20:24.260 --> 20:26.260
它如果说是关闭的

20:26.260 --> 20:28.260
我就给它复制为closed

20:28.260 --> 20:29.260
关闭的

20:29.260 --> 20:30.260
如果说

20:30.260 --> 20:31.260
它是打开的

20:31.260 --> 20:32.260
我就给它复制为open的

20:32.260 --> 20:33.260
如果说

20:33.260 --> 20:34.260
它目前正在播放动画

20:34.260 --> 20:35.260
我就复制play

20:35.260 --> 20:36.260
是不是我就可以通过

20:36.260 --> 20:37.260
这个东西来进行

20:37.260 --> 20:39.260
判定它目前的状态了

20:39.260 --> 20:40.260
对吧

20:40.260 --> 20:41.260
这样子更加易读一点

20:41.260 --> 20:43.260
那么我就用这个自定义属性

20:43.260 --> 20:44.260
那么如果说

20:44.260 --> 20:46.260
一开始它没有自定义属性

20:46.260 --> 20:47.260
没有自定义属性

20:47.260 --> 20:48.260
是关闭的

20:48.260 --> 20:49.260
所以说

20:49.260 --> 20:51.260
我们可以通过自定义属性

20:51.260 --> 20:52.260
来判断它

20:52.260 --> 20:55.260
到底是在干嘛

20:55.260 --> 20:56.260
那么这个

20:56.260 --> 21:02.260
通过自定义属性status

21:02.260 --> 21:05.260
判定它的状态

21:05.260 --> 21:06.260
那怎么办呢

21:06.260 --> 21:07.260
我当然这里肯定要去

21:07.260 --> 21:08.260
拿到它的自定义属性

21:08.260 --> 21:09.260
对吧

21:09.260 --> 21:10.260
拿自定义属性

21:10.260 --> 21:11.260
要用GS attribute

21:11.260 --> 21:13.260
自定义属性的名字放置

21:13.260 --> 21:15.890
status

21:15.890 --> 21:17.890
拿到自定义属性status

21:17.890 --> 21:19.890
那么这里就有几种情况

21:19.890 --> 21:22.890
如果说它

21:22.890 --> 21:26.890
自定义属性不等于关闭

21:26.890 --> 21:28.890
它不是关闭

21:28.890 --> 21:30.890
不是关闭是什么情况呢

21:30.890 --> 21:35.890
就是不等于status

21:35.890 --> 21:37.890
或者是它有值

21:37.890 --> 21:42.890
或者是它有值

21:42.890 --> 21:43.890
有值

21:43.890 --> 21:44.890
但是不等于

21:44.890 --> 21:47.890
不等于closed

21:47.890 --> 21:49.890
是不是就不是关闭

21:49.890 --> 21:51.890
一看关闭是哪种情况

21:51.890 --> 21:52.890
它没有自定义属性

21:52.890 --> 21:54.890
没有自定义属性一开始就是关闭的

21:54.890 --> 21:55.890
没有自定义属性

21:55.890 --> 21:57.890
我就认为你是关闭的

21:57.890 --> 21:58.890
有自定义属性

21:58.890 --> 22:00.890
但是你的值不为closed

22:00.890 --> 22:02.890
那么我也认为你是关闭的

22:02.890 --> 22:04.890
那么如果说你是关闭的

22:04.890 --> 22:05.890
我就return 结束

22:05.890 --> 22:09.890
啥也不干

22:09.890 --> 22:10.890
好

22:10.890 --> 22:11.890
如果说你不是

22:11.890 --> 22:12.890
你是关闭的

22:12.890 --> 22:13.890
就是你不是关闭的

22:13.890 --> 22:18.890
目前这是不是关闭状态

22:18.890 --> 22:20.890
你的可能正在播放动画

22:20.890 --> 22:21.890
或者是已经打开了

22:21.890 --> 22:22.890
你不是关闭状态

22:22.890 --> 22:24.890
那我啥也不干

22:24.890 --> 22:26.890
后面的情况是不是就是

22:26.890 --> 22:28.890
目前是关闭状态了

22:28.890 --> 22:29.890
那么目前关闭状态

22:29.890 --> 22:30.890
我现在要打开

22:30.890 --> 22:31.890
是不是我首先要做这么一件事

22:31.890 --> 22:35.890
我首先把它的set attribute

22:35.890 --> 22:40.420
把它的自定义属性

22:40.420 --> 22:41.420
设为paying

22:41.420 --> 22:42.420
表示正在播放动画中

22:42.420 --> 22:45.420
因为我马上开始播放动画了

22:45.420 --> 22:46.420
把它设为播放动画中

22:46.420 --> 22:48.420
然后动画播放完了之后

22:48.420 --> 22:49.420
on end

22:49.420 --> 22:51.420
我再把它的自定义属性

22:51.420 --> 22:53.420
设置为opened

22:53.420 --> 22:56.990
目前是打开了

22:56.990 --> 22:59.990
第一次结束自定义属性

22:59.990 --> 23:01.990
在实战中的应用了

23:01.990 --> 23:03.990
可能有点懵懵的

23:03.990 --> 23:05.990
我们来看一下效果

23:05.990 --> 23:07.990
看效果就明白了

23:07.990 --> 23:08.990
看这个UL

23:08.990 --> 23:10.990
关它第1个

23:10.990 --> 23:12.990
我这里好像没注射时间

23:12.990 --> 23:14.990
我就把这个空采在这里打开

23:20.180 --> 23:21.180
下来

23:21.180 --> 23:24.180
好 接下来我来调用这个opened

23:24.180 --> 23:26.180
调用这个函数

23:26.180 --> 23:28.180
来测试第1个拆箱的打开

23:28.180 --> 23:30.180
你看 注意关上它的自定义属性

23:34.640 --> 23:36.640
出问题了

23:36.640 --> 23:42.040
我这里输出一下Status

23:42.040 --> 23:45.040
输出的结果是now

23:45.040 --> 23:48.040
get attribute

23:48.040 --> 23:49.040
Status now

23:49.040 --> 23:51.040
当然是now

23:52.040 --> 23:54.040
这里应该是没有值

23:56.040 --> 23:58.040
没有值

23:58.040 --> 23:59.040
不对

23:59.040 --> 24:01.040
不是关闭状态

24:01.040 --> 24:03.040
它有值

24:05.040 --> 24:09.890
它不等于closed

24:09.890 --> 24:11.890
应该是并且

24:11.890 --> 24:13.890
它有值 但是

24:13.890 --> 24:16.890
它的值不等于closed

24:16.890 --> 24:18.890
就是不是关闭状态

24:18.890 --> 24:19.890
因为关闭状态就两种情况

24:19.890 --> 24:20.890
一种是等于closed

24:20.890 --> 24:22.890
或者是它没有值

24:22.890 --> 24:25.890
那么相反的情况就是它有值

24:25.890 --> 24:27.890
它有值 但是它不等于closed

24:29.890 --> 24:31.890
好 然后

24:31.890 --> 24:33.890
再来

24:34.890 --> 24:36.890
运行

24:36.890 --> 24:37.890
你看

24:37.890 --> 24:39.890
高度这一块是不是在动画变化

24:39.890 --> 24:41.890
对吧 然后再刷新

24:41.890 --> 24:43.890
再注意看自定义属性

24:43.890 --> 24:45.890
是不是先把它变成paying

24:45.890 --> 24:47.890
然后玩了过后就变成opened

24:47.890 --> 24:48.890
对吧

24:48.890 --> 24:50.890
那么这个paying和opened有啥用呢

24:50.890 --> 24:53.890
我们关闭的时候是不是就会有用了

24:53.890 --> 24:54.890
对吧

24:55.890 --> 24:57.890
一开始是没有

24:57.890 --> 24:58.890
一开始是没有值

24:58.890 --> 25:00.890
一开始这个判断是进不去的

25:00.890 --> 25:02.890
因为它是没有属性的

25:02.890 --> 25:03.890
进不去

25:03.890 --> 25:05.890
所以它目前是关闭状态

25:05.890 --> 25:07.890
那么我现在开始播放动画了

25:07.890 --> 25:08.890
我就先把它作为paying

25:08.890 --> 25:09.890
再把它变

25:09.890 --> 25:10.890
对头播放完了过后

25:10.890 --> 25:11.890
再把它变成opened

25:11.890 --> 25:13.890
总之我的目的

25:13.890 --> 25:17.890
就是要始终保证自定义属性

25:17.890 --> 25:19.890
它能够表示它的状态

25:19.890 --> 25:20.890
目前到底是怎么回事

25:20.890 --> 25:21.890
目前是打开的

25:21.890 --> 25:22.890
那么通过是定属性的

25:22.890 --> 25:23.890
你看是不是打开的

25:24.890 --> 25:25.890
好 然后再来

25:25.890 --> 25:26.890
现在我们在意去调中

25:26.890 --> 25:27.890
调用这个函数你看

25:27.890 --> 25:28.890
还能打开吗

25:28.890 --> 25:29.890
打不开了

25:29.890 --> 25:30.890
为什么打不开了

25:30.890 --> 25:32.890
为什么不能重新打开了

25:32.890 --> 25:33.890
因为它在意是调用这个函数的时候

25:33.890 --> 25:35.890
它就判断它的自定义属性

25:35.890 --> 25:36.890
拿过来 目前是什么值啊

25:36.890 --> 25:38.890
目前是opened

25:38.890 --> 25:39.890
目前已经打开了

25:39.890 --> 25:40.890
对吧

25:40.890 --> 25:41.890
所以这个判断就进去了

25:41.890 --> 25:42.890
它有值

25:42.890 --> 25:44.890
并且它的值不是关闭

25:44.890 --> 25:45.890
那么说明

25:45.890 --> 25:47.890
目前肯定不是关闭

25:47.890 --> 25:48.890
它有可能是在不画动画

25:48.890 --> 25:49.890
有可能是别的情况

25:49.890 --> 25:50.890
反正它不是关闭

25:50.890 --> 25:52.890
所以说我就啥也不敢

25:52.890 --> 25:55.890
那么这个函数就写得非常稳妥了

25:55.890 --> 25:56.890
稳妥的好处就是

25:56.890 --> 25:57.890
你随便怎么调用

25:57.890 --> 25:58.890
它不会出问题

25:59.890 --> 26:00.890
刷新

26:00.890 --> 26:01.890
调用 你看

26:01.890 --> 26:02.890
正在不画动画

26:02.890 --> 26:03.890
它再调用了

26:03.890 --> 26:04.890
它不会出任何问题

26:04.890 --> 26:07.200
对不对

26:07.200 --> 26:10.200
好 这是打开子彩单的情况

26:12.200 --> 26:15.200
好 然后我们再看那个关闭子彩单

26:15.200 --> 26:17.200
是不是道理一样的

26:17.200 --> 26:18.200
逻辑都是一样的

26:18.200 --> 26:19.200
稍微修修改改

26:19.200 --> 26:20.200
也就完成了

26:21.200 --> 26:22.200
关闭子彩单

26:23.200 --> 26:24.200
关闭子彩单的话

26:24.200 --> 26:25.200
我们要把它关闭

26:25.200 --> 26:27.200
那么是不是它的状态

26:27.200 --> 26:29.200
就必须要不等于关闭

26:29.200 --> 26:30.200
不等于打开

26:32.200 --> 26:33.200
它状态就必须要是打开

26:33.200 --> 26:35.200
只要它的状态不是打开

26:36.200 --> 26:37.200
打开的状态是open的

26:37.200 --> 26:38.200
对吧

26:39.200 --> 26:40.200
如果它的状态不是打开

26:40.200 --> 26:41.200
那么就啥也不干

26:45.200 --> 26:46.200
这里就不用判断

26:46.200 --> 26:47.200
这个有没有值了

26:47.200 --> 26:48.200
它没有值的话

26:50.200 --> 26:51.200
它没有值的话

26:51.200 --> 26:52.200
它肯定也不是打开

26:52.200 --> 26:53.200
它没有值表示的是关闭

26:53.200 --> 26:54.200
对吧

26:54.200 --> 26:55.200
一开始就没有值

26:55.200 --> 26:56.200
不是打开状态

26:59.480 --> 27:00.480
好 那么怎么来打开呢

27:00.480 --> 27:01.480
还是先把它

27:01.480 --> 27:02.480
我们现在寄

27:02.480 --> 27:04.480
如果说单码刀到这儿了

27:04.480 --> 27:06.480
说明它之前一定是打开状态

27:06.480 --> 27:08.480
那么我们就干嘛呢

27:09.480 --> 27:11.480
把它的就是属性

27:11.480 --> 27:12.480
制定属性的设为

27:12.480 --> 27:13.480
正在不发动化

27:13.480 --> 27:15.480
然后它from从这个值

27:16.480 --> 27:18.480
变回到0

27:19.480 --> 27:20.480
对吧

27:20.480 --> 27:21.480
是不是

27:21.480 --> 27:22.480
然后呢

27:22.480 --> 27:23.480
完设之后呢

27:23.480 --> 27:24.480
它就不关闭了

27:24.480 --> 27:25.480
因为我们现在是关闭

27:25.480 --> 27:26.480
从打开到关闭

27:29.240 --> 27:30.240
好 那么其实这里的

27:30.240 --> 27:32.240
一个总的时间呢

27:32.240 --> 27:33.240
我们可以用个变量

27:34.240 --> 27:35.240
头脱

27:35.240 --> 27:36.240
我们

27:37.240 --> 27:38.240
500吧

27:39.240 --> 27:40.240
4000

27:41.240 --> 27:42.240
播放

27:42.240 --> 27:43.240
动画

27:43.240 --> 27:45.240
播放的总市场

27:46.240 --> 27:47.240
用这个变量

27:47.240 --> 27:48.240
变方便修改

27:51.190 --> 27:52.190
好 现在我们来看一下关闭

27:53.190 --> 27:54.190
当然这里也需要一个参数

27:57.190 --> 27:58.190
好 来看一下关闭

27:59.190 --> 28:00.190
打开

28:00.190 --> 28:01.190
你看注意它的制定属性

28:01.190 --> 28:02.190
从playin

28:02.190 --> 28:03.190
playin

28:03.190 --> 28:04.190
正在播放动画

28:04.190 --> 28:05.190
完了过后打开了

28:05.190 --> 28:06.190
那么现在打开就没用了

28:06.190 --> 28:07.190
因为它的状态

28:07.190 --> 28:08.190
判定

28:08.190 --> 28:09.190
目前不是关闭

28:09.190 --> 28:10.190
那就没法再打开了

28:10.190 --> 28:12.190
接下来我们close

28:12.190 --> 28:13.190
submenu

28:13.190 --> 28:14.190
testmenu

28:14.190 --> 28:15.190
传进去

28:15.190 --> 28:16.190
好 你看

28:16.190 --> 28:17.190
又变成播放动画

28:17.190 --> 28:18.190
又变成

28:20.190 --> 28:21.190
closed

28:21.190 --> 28:22.190
目前就变成关闭了

28:22.190 --> 28:24.190
那么下一次再去调用关闭

28:24.190 --> 28:25.190
还能关闭吗

28:25.190 --> 28:26.190
不能关闭了

28:26.190 --> 28:28.190
然后下一次就可以调用打开了

28:28.190 --> 28:30.190
因为这个时候它Status是closed

28:30.190 --> 28:32.190
所以说打开就可以生销了

28:33.190 --> 28:34.190
你看

28:34.190 --> 28:35.190
对不对

28:35.190 --> 28:37.190
是不是就可以了

28:38.190 --> 28:40.190
那么这是这一块

28:40.190 --> 28:41.190
有了这两个函数之后

28:41.190 --> 28:43.190
其实我们打开关闭就已经OK了

28:43.190 --> 28:44.190
但是有的时候

28:44.190 --> 28:46.190
我们需要就是切换

28:46.190 --> 28:47.190
它就是它目前是打开

28:47.190 --> 28:48.190
我就关闭

28:48.190 --> 28:49.190
目前是关闭

28:49.190 --> 28:50.190
我就打开

28:50.190 --> 28:52.190
我们也可以再写个辅助函数

28:52.190 --> 28:53.190
叫做偷狗

28:53.190 --> 28:55.190
偷狗就是切换的意思

28:55.190 --> 28:56.190
submenu

28:58.820 --> 28:59.820
关闭指差

28:59.820 --> 29:01.820
那么这里就是切换指差

29:01.820 --> 29:02.820
切换指差

29:02.820 --> 29:03.820
这个函数就是

29:03.820 --> 29:04.820
它目前是关闭

29:04.820 --> 29:05.820
就打开

29:05.820 --> 29:07.820
它目前是打开就关闭

29:07.820 --> 29:09.820
好 那我们来试一下这个函数

29:09.820 --> 29:10.820
那么

29:10.820 --> 29:11.820
接下来我们就还是一样

29:11.820 --> 29:12.820
先判断状态

29:12.820 --> 29:13.820
拿到状态

29:15.820 --> 29:16.820
submenu

29:16.820 --> 29:17.820
get attribute

29:17.820 --> 29:18.820
Status

29:19.820 --> 29:21.820
好 如果说

29:21.820 --> 29:23.820
目前的状态是正在

29:24.820 --> 29:28.710
正在什么播放动画

29:29.710 --> 29:32.710
正在播放动画

29:33.710 --> 29:34.710
那么应该怎么样呢

29:35.710 --> 29:36.710
是不是啥也不做

29:36.710 --> 29:37.710
对不对

29:37.710 --> 29:38.710
lcf

29:38.710 --> 29:41.710
如果说目前的状态是什么

29:41.710 --> 29:42.710
open的

29:44.710 --> 29:45.710
open的

29:45.710 --> 29:46.710
目前的状态是打开的

29:46.710 --> 29:47.710
那么应该干嘛

29:47.710 --> 29:48.710
应该关闭

29:49.710 --> 29:51.710
close submenu

29:51.710 --> 29:53.710
把这个菜单传进去

29:53.710 --> 29:54.710
所以关闭

29:54.710 --> 29:55.710
目前是打开就关闭

29:55.710 --> 29:56.710
lcf的剩下的就是

29:56.710 --> 29:57.710
只有是关闭的

29:57.710 --> 29:58.710
目前是关闭就打开

29:58.710 --> 29:59.710
open submenu

29:59.710 --> 30:01.710
对吧 稍微封装一下

30:01.710 --> 30:03.710
就像现在这么一个切换菜单

30:04.710 --> 30:05.710
对吧

30:05.710 --> 30:06.710
函数之前写的还说

30:06.710 --> 30:07.710
封装一下

30:07.710 --> 30:08.710
那我们现在试一下

30:08.710 --> 30:09.710
切换菜单

30:09.710 --> 30:10.710
togo

30:11.710 --> 30:12.710
cast menu

30:13.710 --> 30:14.710
目前是关闭就打开

30:14.710 --> 30:15.710
目前是播放动画

30:15.710 --> 30:16.710
啥也别做

30:17.710 --> 30:18.710
目前是打开

30:18.710 --> 30:19.710
它就关闭

30:20.710 --> 30:21.710
对不对

30:21.710 --> 30:22.710
是不是就好了

30:23.710 --> 30:24.710
那么接下来到这

30:24.710 --> 30:26.710
是不是就变得非常简单了

30:26.710 --> 30:27.710
到这

30:27.710 --> 30:29.710
我点击这个标题的时候

30:29.710 --> 30:30.710
无非就是调用啥

30:30.710 --> 30:31.710
调用切换菜单

30:31.710 --> 30:32.710
对不对

30:32.710 --> 30:33.710
调用它就完事了

30:33.710 --> 30:34.710
togo menu

30:34.710 --> 30:36.710
切换哪个菜单

30:37.710 --> 30:40.710
是不是当前你点的这个标题

30:41.710 --> 30:42.710
你点了它就切换它

30:43.710 --> 30:45.710
所以它是下一个兄弟元素

30:45.710 --> 30:48.710
那么如何来获取下一个兄弟元素呢

30:51.710 --> 30:52.710
叫做sablin

30:54.710 --> 30:55.710
这个东西我也记不清很清楚

30:55.710 --> 30:57.710
反正就用next的开头

30:57.710 --> 30:58.710
就在关

30:58.710 --> 30:59.710
下一个elements

30:59.710 --> 31:00.710
sablin

31:00.710 --> 31:02.710
sablin就是兄弟姐妹的意思

31:03.710 --> 31:06.710
下一个兄弟元素

31:06.710 --> 31:08.710
那么这里你只需要把我当前

31:08.710 --> 31:11.710
H2元素的下一个兄弟元素

31:11.710 --> 31:12.710
传进去

31:12.710 --> 31:13.710
是不是完事了

31:13.710 --> 31:15.710
那你点它的时候是不是打开了

31:15.710 --> 31:16.710
太慢了

31:16.710 --> 31:18.710
我这里把动作是快一点

31:22.360 --> 31:24.360
就还嫌一点慢了

31:24.360 --> 31:25.360
传在后面

31:25.360 --> 31:29.320
你看是不是可以切换了

31:30.320 --> 31:32.320
那么这里还有最后一个小问题就是

31:33.320 --> 31:34.320
我点它的时候

31:34.320 --> 31:36.320
其他菜单全部要收起来

31:37.320 --> 31:39.320
就是我在把我切换的

31:39.320 --> 31:40.320
切换我自己的时候

31:40.320 --> 31:41.320
我要收起

31:42.320 --> 31:45.320
收起其他所有菜单

31:46.320 --> 31:48.320
其实你不断的收起的话

31:48.320 --> 31:50.320
其他菜单只有一个会被打开

31:51.320 --> 31:52.320
你看

31:52.320 --> 31:53.320
点它 它打开了

31:53.320 --> 31:55.320
点它 它就收起了

31:55.320 --> 31:56.320
所以说这里边

31:56.320 --> 31:58.320
我们只需要去document

31:58.320 --> 32:02.320
去获取其他已经打开的菜单

32:02.320 --> 32:04.320
但我怎么来获取其他

32:04.320 --> 32:05.320
已经打开的菜单呢

32:05.320 --> 32:07.320
又可以利用自定义属性

32:08.320 --> 32:09.320
因为打开的菜单有个特点

32:09.320 --> 32:10.320
怎么特点呢

32:10.320 --> 32:12.320
它就有个standers等于什么open

32:13.320 --> 32:14.320
对吧

32:14.320 --> 32:15.320
是不等于open的

32:15.320 --> 32:16.320
有这么一个特点

32:16.320 --> 32:18.320
所以我们就可以利用这个自定义属性

32:21.910 --> 32:23.910
我这里打开它

32:23.910 --> 32:25.910
是不是它的一个open的

32:25.910 --> 32:26.910
打开它

32:27.910 --> 32:28.910
它也会一个open的

32:28.910 --> 32:30.910
所以我只要去获取

32:30.910 --> 32:32.910
Submenu带有这个open的

32:32.910 --> 32:34.910
这个自定义属性的就行了

32:34.910 --> 32:36.910
那么我们可以利用属性选择器

32:36.910 --> 32:37.910
Submenu

32:38.910 --> 32:40.910
它带了一个属性叫做standers

32:40.910 --> 32:42.910
等于什么open的

32:44.910 --> 32:45.910
对不对

32:45.910 --> 32:46.910
它有这么一个自定义属性

32:46.910 --> 32:48.910
那么这就是我想要的

32:48.910 --> 32:54.910
就是之前的打开的菜单

32:54.910 --> 32:55.910
这是过去

32:55.910 --> 32:56.910
之前打开的菜单

32:56.910 --> 32:57.910
我只需要判断一下

32:57.910 --> 32:59.910
有没有之前已经打开的

32:59.910 --> 33:00.910
因为一开始没有

33:00.910 --> 33:02.910
一开始是不是没有打开的

33:02.910 --> 33:04.910
所以说你最好判断一下

33:04.910 --> 33:05.910
如果说没有的话

33:05.910 --> 33:06.910
它这里过去出来就是那

33:06.910 --> 33:07.910
如果说有的话

33:07.910 --> 33:09.910
我就把之前的关闭掉

33:09.910 --> 33:10.910
close

33:10.910 --> 33:11.910
什么研究

33:11.910 --> 33:12.910
调用之前的函数

33:12.910 --> 33:13.910
写好了函数

33:13.910 --> 33:15.910
关闭之菜单

33:15.910 --> 33:17.910
好来看一下

33:17.910 --> 33:18.910
说不定可以了

33:18.910 --> 33:21.910
这样子的在我这个菜单打开

33:21.910 --> 33:22.910
打开的同时

33:22.910 --> 33:25.910
先关闭之前已经打开了

33:25.910 --> 33:26.910
我就形成了这么一个

33:26.910 --> 33:28.910
手工型效果

33:28.910 --> 33:30.910
好好去梳理一下

33:30.910 --> 33:31.910
其实这个

33:31.910 --> 33:32.910
这个效果本身

33:32.910 --> 33:33.910
那其实并不复杂

33:33.910 --> 33:34.910
就需要三个函数

33:34.910 --> 33:35.910
完事了

33:35.910 --> 33:36.910
一个是打开

33:36.910 --> 33:38.910
关闭一个是切换

33:38.910 --> 33:39.910
剩下的就做这个事件

33:39.910 --> 33:41.910
完事了

33:42.910 --> 33:44.910
这节课咱们

33:44.910 --> 33:46.910
实现手风琴

33:46.910 --> 33:48.910
还是比较简单的

33:48.910 --> 33:49.910
重点是那个

33:49.910 --> 33:51.910
是我们在讲效果的时候

33:51.910 --> 33:53.910
给大家做知识补充的时候

33:53.910 --> 33:57.910
讲的那个动画插件

33:57.910 --> 33:58.910
写的那个函数

33:58.910 --> 33:59.910
那个函数

33:59.910 --> 34:01.910
给大家第一次看到了

34:01.910 --> 34:03.910
一个毁掉模式

34:03.910 --> 34:05.910
在我们实战开发中的应用

34:05.910 --> 34:07.910
其实你们以后做开发

34:07.910 --> 34:10.910
只要你不是去写那种插件

34:10.910 --> 34:12.910
写那种公共模块

34:12.910 --> 34:13.910
这种搞难度的东西

34:13.910 --> 34:14.910
一般来说

34:14.910 --> 34:15.910
不需要

34:15.910 --> 34:17.910
你不太会去写那种毁掉模式

34:17.910 --> 34:18.910
你会用别人写好的

34:18.910 --> 34:19.910
但是你自己

34:19.910 --> 34:21.910
不会去写那种毁掉模式

34:21.910 --> 34:22.910
但是你一旦设计到

34:22.910 --> 34:23.910
写插件

34:23.910 --> 34:24.910
写模块

34:24.910 --> 34:25.910
写框架

34:25.910 --> 34:26.910
拿这个毁掉模式

34:26.910 --> 34:27.910
到处的事

34:27.910 --> 34:30.910
好 这是咱们这个效果

34:30.910 --> 34:32.910
下次好好去练一组

