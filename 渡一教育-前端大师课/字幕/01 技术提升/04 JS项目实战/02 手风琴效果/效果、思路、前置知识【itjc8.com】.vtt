WEBVTT

00:00.300 --> 00:02.300
这节课咱们来看一下

00:02.300 --> 00:05.300
我们前段开发里边一个非常经典的效果

00:05.300 --> 00:07.300
就是舍风琴效果

00:07.300 --> 00:09.300
先看效果就这么一个东西

00:09.300 --> 00:12.300
其实本质就是一个二级菜单

00:12.300 --> 00:14.300
那么我们通过点击

00:14.300 --> 00:16.300
一级菜单的标题可以切换

00:16.300 --> 00:18.300
这个二级菜单的显示

00:18.300 --> 00:21.300
这种场景一般用于菜单相比较多

00:21.300 --> 00:22.300
我们一个界面上

00:22.300 --> 00:24.300
如果说全部把它展示出来的话

00:24.300 --> 00:26.300
会导致这个界面非常雍重

00:26.300 --> 00:28.300
所以说我们可以通过拥护交互这种方式

00:28.300 --> 00:30.300
把它进行展开隐藏

00:30.300 --> 00:32.300
那么这个东西要实现

00:32.300 --> 00:33.300
其实本质并不难

00:33.300 --> 00:34.300
我们来看一下

00:34.300 --> 00:37.300
实现了一个整体的思路

00:37.300 --> 00:39.300
你看我这里一个UL元素

00:39.300 --> 00:43.300
这个UL元素其实就是整个菜单

00:43.300 --> 00:44.300
包含所有的

00:44.300 --> 00:46.300
然后里边有很多的LI

00:46.300 --> 00:50.300
其实每一个LI就是其中一个菜单

00:50.300 --> 00:54.300
那么这个菜单里边不仅包含

00:54.300 --> 00:55.300
菜单的标题

00:55.300 --> 00:57.300
还包含它里边的二级菜单

00:57.300 --> 00:59.300
二级菜单都在里边

00:59.300 --> 01:01.300
所以说每一个LI

01:01.300 --> 01:03.300
好,然后我们把它展开一个看一下

01:03.300 --> 01:04.300
展开一个可以看第一个

01:04.300 --> 01:07.300
是不是包含一级菜单的标题

01:07.300 --> 01:09.300
还包含二级菜单的目录

01:09.300 --> 01:11.300
那么我们展开这个LI里边

01:11.300 --> 01:14.300
到底事实上里边是有一个H2元素

01:14.300 --> 01:17.300
这个H2元素其实就是一级菜单的标题

01:17.300 --> 01:19.300
其实这些元素

01:19.300 --> 01:22.300
也不一定一定要是H2

01:22.300 --> 01:25.300
也不一定一定要是ULLI

01:25.300 --> 01:26.300
任何都可以

01:26.300 --> 01:27.300
你用DIV

01:27.300 --> 01:28.300
你用P元素

01:28.300 --> 01:30.300
你用A元素都行

01:30.300 --> 01:32.300
你用CRS的样式去控制一下

01:33.300 --> 01:34.300
这里是一个标题

01:34.300 --> 01:36.300
你看下边又是一个UL

01:36.300 --> 01:38.300
就嵌套了一个菜单

01:38.300 --> 01:41.300
那么这个菜单里边又是一项一项的LI

01:41.300 --> 01:44.300
这是整体的我们的ATM结构

01:44.300 --> 01:48.300
那么如何来实现这个手风琴效果呢

01:48.300 --> 01:50.300
我们的整体思路其实非常简单

01:50.300 --> 01:53.300
我们其实也就是控制

01:53.300 --> 01:59.300
它里边这个UL的显示和隐藏

01:59.300 --> 02:01.300
只不过这里的显示和隐藏

02:01.300 --> 02:04.300
是使用高度来控制的

02:04.300 --> 02:05.300
比方说它显示的时候

02:05.300 --> 02:07.300
这里有四个菜单

02:07.300 --> 02:09.300
每个菜单高度为30的话

02:09.300 --> 02:11.300
那么这里四个菜单就是120

02:11.300 --> 02:13.300
所以高度120

02:13.300 --> 02:15.300
当它隐藏的时候

02:15.300 --> 02:17.300
我们就从120变到0

02:17.300 --> 02:19.300
你看高度为0是不是就看不见了

02:19.300 --> 02:22.300
因为我这里设置了一个Overflow item

02:22.300 --> 02:24.300
是不是看不见了

02:24.300 --> 02:27.300
其实本质上就是这么一个逻辑

02:27.300 --> 02:28.300
逻辑并不复杂

02:28.300 --> 02:30.300
当我们点击这个的时候

02:30.300 --> 02:32.300
控制它下面这个元素

02:32.300 --> 02:34.300
它的高度就完成了

02:34.300 --> 02:36.300
这就是它整体的思路

02:36.300 --> 02:39.300
同学们先不着急自己说

02:39.300 --> 02:40.300
听我讲

02:40.300 --> 02:43.300
这里边我们要考虑一个问题

02:43.300 --> 02:45.300
啥问题呢

02:45.300 --> 02:46.300
我就问你

02:46.300 --> 02:48.300
这里边有没有动画

02:48.300 --> 02:49.300
有没有

02:49.300 --> 02:50.300
是不是有动画

02:50.300 --> 02:52.300
那么动画是不是又是

02:52.300 --> 02:53.300
把一个数值

02:53.300 --> 02:55.300
从某一个值

02:55.300 --> 02:58.300
不断的变到另一个值

02:58.300 --> 03:00.300
什么高度从0变到120

03:00.300 --> 03:01.300
那不一定是120

03:01.300 --> 03:02.300
有可能是

03:02.300 --> 03:03.300
这里有五个菜单

03:03.300 --> 03:04.300
有可能是150

03:04.300 --> 03:05.300
但是说不准

03:05.300 --> 03:06.300
那么一会呢

03:06.300 --> 03:07.300
又可能从150了

03:07.300 --> 03:10.300
又变到120

03:10.300 --> 03:12.300
总之是不是有动画

03:12.300 --> 03:14.300
肯定是有

03:14.300 --> 03:16.300
那么这个动画

03:16.300 --> 03:17.300
它的逻辑

03:17.300 --> 03:20.300
跟我们之前学过的那个

03:20.300 --> 03:22.300
文字滚动

03:22.300 --> 03:24.300
动画逻辑是不是一样的

03:24.300 --> 03:26.300
是不是都是从一个值

03:26.300 --> 03:28.300
变到另一个值

03:28.300 --> 03:30.300
之前只不过变的是什么

03:30.300 --> 03:31.300
滚动条的位置

03:31.300 --> 03:33.300
那么现在变的是什么呢

03:33.300 --> 03:34.300
高度

03:34.300 --> 03:35.300
所以本质上都是

03:35.300 --> 03:37.300
从一个值变到另一个值

03:37.300 --> 03:39.300
那么写这些东西

03:39.300 --> 03:40.300
反不反

03:40.300 --> 03:42.300
逻辑有比较多

03:42.300 --> 03:43.300
单码有比较多

03:43.300 --> 03:45.300
看上去有比较复杂

03:45.300 --> 03:47.300
但是反来复杂都是那么逃逻辑

03:47.300 --> 03:49.300
那么这个时候

03:49.300 --> 03:51.300
你就可以考虑

03:51.300 --> 03:53.300
把它抽离出来

03:53.300 --> 03:55.300
形成一个函数

03:55.300 --> 03:56.300
或者是一个对象

03:56.300 --> 03:57.300
之后遇到动画

03:57.300 --> 03:59.300
我直接使用这个函数

03:59.300 --> 04:01.300
只有这个对象就可以解决了

04:01.300 --> 04:02.300
对吧

04:02.300 --> 04:03.300
是不是我们就可以做这么一件事

04:03.300 --> 04:05.300
那么像这种东西

04:05.300 --> 04:07.300
在我们程序开发中

04:07.300 --> 04:08.300
我们有一个原则

04:08.300 --> 04:09.300
叫做 DRY

04:09.300 --> 04:10.300
叫转原则

04:10.300 --> 04:12.300
这个是什么呢

04:12.300 --> 04:17.300
repeat yourself

04:17.300 --> 04:19.300
不要老是去重复的去做一件事

04:19.300 --> 04:21.300
都还要学会偷懒

04:21.300 --> 04:23.300
我们既然已经写过了

04:23.300 --> 04:24.300
这个逻辑

04:24.300 --> 04:25.300
我们之前已经写过了

04:25.300 --> 04:26.300
我们就可以考虑

04:26.300 --> 04:28.300
把它抽离出来

04:28.300 --> 04:30.300
那么这个抽离的过程

04:30.300 --> 04:32.300
对于初学者而言

04:32.300 --> 04:35.300
是比较有难度的

04:35.300 --> 04:36.300
当你说不抽离

04:36.300 --> 04:37.300
能不能做

04:37.300 --> 04:38.300
能做

04:38.300 --> 04:40.300
但是我这里既然讲到这了

04:40.300 --> 04:41.300
就必须要带你们

04:41.300 --> 04:42.300
见识一下

04:42.300 --> 04:43.300
如何去抽离这种

04:43.300 --> 04:45.300
重复性的功能

04:45.300 --> 04:46.300
因为一旦抽离的时候

04:46.300 --> 04:48.300
你要考虑各种情况了

04:48.300 --> 04:49.300
你看

04:49.300 --> 04:51.300
如果说我们之前只考虑

04:51.300 --> 04:53.300
这个滚动条的位置

04:53.300 --> 04:54.300
你虽然代码多复杂

04:54.300 --> 04:56.300
也写就写了

04:56.300 --> 04:57.300
那么这里的只考虑高度

04:57.300 --> 04:58.300
也就写了

04:58.300 --> 05:00.300
大不了把之前的copy过来

05:00.300 --> 05:01.300
改一改

05:01.300 --> 05:02.300
但是如果说

05:02.300 --> 05:03.300
你要把抽离成一个函数

05:03.300 --> 05:05.300
抽离成一个对象

05:05.300 --> 05:07.300
那你就要考虑清楚了

05:07.300 --> 05:09.300
它到底是改变高度

05:09.300 --> 05:11.300
改变宽度

05:11.300 --> 05:12.300
改变坐标

05:12.300 --> 05:14.300
改变滚动条位置

05:14.300 --> 05:16.300
你都说不准

05:16.300 --> 05:17.300
所以说

05:17.300 --> 05:19.300
当我们在做抽离的时候

05:19.300 --> 05:21.300
我们就完全不考虑这些

05:21.300 --> 05:23.300
我管你是改变什么

05:23.300 --> 05:24.300
我就做一件事

05:24.300 --> 05:26.300
不管你是什么动画

05:26.300 --> 05:28.300
它一定是由一个值

05:28.300 --> 05:30.300
不断的变到另一个值

05:30.300 --> 05:32.300
这就是动画的本质

05:33.300 --> 05:35.300
动画的本质

05:35.300 --> 05:38.620
由一个值

05:38.620 --> 05:39.620
不管它是啥

05:39.620 --> 05:42.620
由一个值变动

05:42.620 --> 05:44.620
到另一个值

05:44.620 --> 05:46.620
如果说再完善一点

05:46.620 --> 05:48.620
在一段时间内

05:48.620 --> 05:50.620
由一个值变到另一个值

05:50.620 --> 05:52.620
不断的进行变化

05:52.620 --> 05:54.620
于是我现在脑袋里面

05:54.620 --> 05:56.620
就开始想象

05:56.620 --> 05:59.620
假设我有这么一个函数

05:59.620 --> 06:01.620
那就太棒了

06:01.620 --> 06:03.620
什么函数呢

06:03.620 --> 06:07.060
比方说我有这么一个函数

06:07.060 --> 06:09.060
叫做create

06:09.060 --> 06:12.060
animate

06:12.060 --> 06:14.060
创建一个动画

06:14.060 --> 06:16.060
这是一个函数

06:16.060 --> 06:19.060
那么我要告诉这个函数一些东西

06:19.060 --> 06:21.060
要告诉它很多东西

06:21.060 --> 06:23.060
那么这里我用对象的形式告诉它

06:23.060 --> 06:25.060
现在有没有这个函数没有

06:25.060 --> 06:27.060
我就想象

06:27.060 --> 06:28.060
假设我有什么

06:28.060 --> 06:30.060
我就特别舒服

06:30.060 --> 06:31.060
那么我有这么一个函数

06:31.060 --> 06:33.060
我给它一个对象

06:33.060 --> 06:34.060
这个对象里面

06:34.060 --> 06:36.060
我通过属性来告诉它一些东西

06:36.060 --> 06:39.060
说你从这个函

06:39.060 --> 06:41.060
变到100

06:41.060 --> 06:44.060
我假设说120

06:44.060 --> 06:46.060
从0变到120

06:46.060 --> 06:50.060
然后变化的总的毫秒数

06:50.060 --> 06:52.060
是500

06:52.060 --> 06:53.060
啥意思

06:53.060 --> 06:55.060
在500毫秒内

06:55.060 --> 06:58.060
从0变到120

06:58.060 --> 07:00.060
那么你去变

07:00.060 --> 07:02.060
你每一次发生变化

07:02.060 --> 07:03.060
先从0变到1

07:03.060 --> 07:04.060
再从1变到2

07:04.060 --> 07:07.060
你每一次发生变化的时候

07:07.060 --> 07:11.620
你运行一下这个函数

07:11.620 --> 07:15.620
你把你这一次变化的值告诉

07:15.620 --> 07:19.620
N为这一次变化的值

07:19.620 --> 07:20.620
你告诉

07:20.620 --> 07:21.620
这有啥意思

07:21.620 --> 07:23.620
你看就这么一个意思

07:23.620 --> 07:26.620
我让你从0变到120

07:26.620 --> 07:28.620
总时间是500毫秒

07:28.620 --> 07:30.620
在这个时间内

07:30.620 --> 07:33.620
你要从0变到120

07:33.620 --> 07:35.620
那么你可能第一次从0变到1.5

07:35.620 --> 07:37.620
那么你就运行一下这个函数

07:37.620 --> 07:38.620
传一个1.5进来

07:38.620 --> 07:40.620
我觉得函数就会运行一次

07:40.620 --> 07:42.620
一会从1.5变到3

07:42.620 --> 07:44.620
那么我又运行一次这个函数

07:44.620 --> 07:47.620
这个函数的N就是3

07:47.620 --> 07:49.620
一会又从3变到4.5

07:49.620 --> 07:51.620
那么又运行一次这个函数

07:51.620 --> 07:52.620
懂这意思吗

07:52.620 --> 07:53.620
现在有没有它

07:53.620 --> 07:54.620
没有

07:54.620 --> 07:56.620
我现在跟你说

07:56.620 --> 07:57.620
希望有这么一个函数

07:57.620 --> 07:59.620
我觉得很舒服

07:59.620 --> 08:00.620
那么有这个东西

08:00.620 --> 08:02.620
你看我是不是就可以

08:02.620 --> 08:03.620
我就可以怎么样了

08:03.620 --> 08:05.620
我就可以通过那个

08:05.620 --> 08:06.620
Document

08:06.620 --> 08:08.620
比方说刚才Ul

08:08.620 --> 08:09.620
假设Ul

08:09.620 --> 08:11.620
Ul的高度

08:11.620 --> 08:12.620
Style

08:12.620 --> 08:13.620
看一次

08:13.620 --> 08:14.620
是不是可以通过N

08:14.620 --> 08:16.620
拼接上px

08:16.620 --> 08:17.620
就可以通过这种方式

08:17.620 --> 08:19.620
不断的去改变它的高度

08:19.620 --> 08:20.620
对吧

08:20.620 --> 08:22.620
假设有这么一个函数就好了

08:22.620 --> 08:23.620
好

08:23.620 --> 08:25.620
当你变化完成之后

08:25.620 --> 08:26.620
Unend

08:26.620 --> 08:29.620
你帮我运行一下这个函数

08:29.620 --> 08:31.620
变化完成后

08:31.620 --> 08:34.620
运行改函数

08:34.620 --> 08:36.620
我就希望有这么一个效果

08:36.620 --> 08:38.620
如果说你给我提供这么一个函数

08:38.620 --> 08:39.620
那我就爽死了

08:39.620 --> 08:40.620
你觉得自己

08:40.620 --> 08:41.620
如果说有这么一个函数

08:41.620 --> 08:42.620
你说

08:42.620 --> 08:43.620
这动画是不是就简单了

08:43.620 --> 08:45.620
你稍微配置一下

08:45.620 --> 08:46.620
从哪个变到哪个

08:46.620 --> 08:47.620
多少时间内变动

08:47.620 --> 08:48.620
然后呢

08:48.620 --> 08:49.620
每变化一次

08:49.620 --> 08:50.620
它就会运行这个函数

08:50.620 --> 08:51.620
你要做什么事情

08:51.620 --> 08:52.620
你自己去做

08:52.620 --> 08:53.620
你要改变滚动条

08:53.620 --> 08:54.620
你就去改变

08:54.620 --> 08:56.620
比方说我要去改变滚动条

08:56.620 --> 08:58.620
我就把scutop设作为N

08:58.620 --> 08:59.620
对吧

08:59.620 --> 09:00.620
你要做什么操作

09:00.620 --> 09:01.620
你自己去做

09:01.620 --> 09:02.620
它不管

09:02.620 --> 09:03.620
变化完了之后

09:03.620 --> 09:04.620
你有什么样的操作

09:04.620 --> 09:06.620
你就运行这个函数

09:06.620 --> 09:08.620
是不是很舒服了

09:08.620 --> 09:09.620
那么有这个函数吗

09:09.620 --> 09:10.620
问题是

09:10.620 --> 09:12.620
那肯定是没有这个函数

09:12.620 --> 09:14.620
那咱们怎么会有这个函数

09:14.620 --> 09:15.620
那怎么吗

09:15.620 --> 09:17.620
没有我就自己行

09:17.620 --> 09:19.620
我给同学们再次提个行

09:19.620 --> 09:21.620
这个函数

09:21.620 --> 09:23.620
写起来

09:23.620 --> 09:25.620
不是那么容易的

09:25.620 --> 09:26.620
写动画

09:26.620 --> 09:27.620
我们之前写过

09:27.620 --> 09:29.620
但是一旦把它抽离成重复

09:30.620 --> 09:31.620
只要一个东西

09:31.620 --> 09:32.620
你在抽离它

09:32.620 --> 09:34.620
形成一个公共性的东西

09:34.620 --> 09:37.620
复杂度自成倍的中夹

09:37.620 --> 09:38.620
那么这结构呢

09:38.620 --> 09:40.620
我希望同学们认真听

09:41.620 --> 09:43.620
你能够把这个函数写出来

09:43.620 --> 09:45.620
就非常了不起了

09:45.620 --> 09:46.620
在对初学者而言

09:46.620 --> 09:48.620
如果说你实战写不出来

09:48.620 --> 09:52.620
你至少要能够学会使用它

09:52.620 --> 09:54.620
你把我的代码拿过去

09:54.620 --> 09:55.620
你至少要学会使用

09:55.620 --> 09:57.620
那个使用就这么使用

09:58.620 --> 10:00.620
好那么我们来写这个函数

10:00.620 --> 10:01.620
首先我们来观察这个函数的名字

10:01.620 --> 10:02.620
名字没什么问题

10:02.620 --> 10:04.620
然后呢是参数

10:04.620 --> 10:05.620
有没有参数呢

10:05.620 --> 10:07.620
是不是有一个参数啊

10:07.620 --> 10:08.620
传进来的一个什么

10:08.620 --> 10:09.620
一个对象

10:09.620 --> 10:10.620
那么对象呢

10:10.620 --> 10:11.620
我的取名为Obsins

10:11.620 --> 10:13.620
表示配置

10:13.620 --> 10:14.620
我们配置的有两个单词

10:14.620 --> 10:16.620
一个叫做Obsins

10:16.620 --> 10:18.620
一个叫做confined

10:18.620 --> 10:20.620
都是配置的意思

10:20.620 --> 10:22.620
那么我们这里用Obsins

10:23.620 --> 10:24.620
Obsins有点像啥呢

10:24.620 --> 10:26.620
有点像一些

10:27.620 --> 10:29.620
就是选项的意思

10:29.620 --> 10:31.620
就有点像你们家里边的一些

10:31.620 --> 10:33.620
家用电器上面有一排一排的

10:33.620 --> 10:35.620
那种操作按钮

10:35.620 --> 10:36.620
对吧

10:36.620 --> 10:38.620
那个东西就可以把它叫做Obsins

10:38.620 --> 10:40.620
那么它是一个对象

10:40.620 --> 10:41.620
我们是不是可以从对象里面

10:41.620 --> 10:43.620
取出来一些东西啊

10:43.620 --> 10:44.620
对不对

10:44.620 --> 10:45.620
那么我们取出来一些变量

10:45.620 --> 10:47.620
from来自于哪呢

10:47.620 --> 10:49.620
来自于Obsins

10:49.620 --> 10:51.620
to来自于哪呢

10:51.620 --> 10:53.620
来自于Obsins

10:53.620 --> 10:54.620
然后呢

10:54.620 --> 10:58.190
total MS

10:58.190 --> 11:00.190
Obsins

11:00.190 --> 11:01.190
total MS

11:01.190 --> 11:02.190
但是在这一块呢

11:02.190 --> 11:04.190
我给大家可以做一个小的技巧

11:04.190 --> 11:06.190
就是有可能像这两个东西

11:06.190 --> 11:07.190
你必须要传

11:07.190 --> 11:09.190
你必须要配置

11:09.190 --> 11:10.190
从哪个变到哪个

11:10.190 --> 11:11.190
我怎么知道呢

11:11.190 --> 11:12.190
你必须要配置

11:12.190 --> 11:13.190
但是像有些东西呢

11:13.190 --> 11:14.190
你可以不配置

11:14.190 --> 11:15.190
就像这个东西

11:15.190 --> 11:16.190
你可以不写

11:16.190 --> 11:17.190
不写的话

11:17.190 --> 11:18.190
我就有默症值

11:18.190 --> 11:19.190
比方说默症疫苗

11:19.190 --> 11:21.190
那么这个默症值

11:21.190 --> 11:22.190
怎么处理呢

11:22.190 --> 11:23.190
我就用这种写法

11:24.190 --> 11:25.190
100

11:25.190 --> 11:26.190
1000

11:26.190 --> 11:27.190
啥意思呢

11:27.190 --> 11:28.190
就是如果说

11:28.190 --> 11:29.190
这个判断为假

11:29.190 --> 11:30.190
就他不

11:30.190 --> 11:32.190
就这个东西他没有传

11:32.190 --> 11:34.190
没有传上立法的嘛

11:34.190 --> 11:35.190
或者传的一个零

11:35.190 --> 11:36.190
零也不合适啊

11:36.190 --> 11:37.190
怎么来领庙了一遍东的

11:37.190 --> 11:39.190
总之他没有传

11:39.190 --> 11:40.190
或者说零

11:40.190 --> 11:41.190
总之他判定为假

11:41.190 --> 11:42.190
判定为假的话

11:42.190 --> 11:43.190
是不是就取后面这个

11:43.190 --> 11:44.190
这是或者

11:44.190 --> 11:45.190
或者是什么

11:45.190 --> 11:47.190
必须要两个都为真

11:47.190 --> 11:48.190
才为真

11:48.190 --> 11:49.190
一个为假都不行

11:51.190 --> 11:52.190
对不对

11:52.190 --> 11:54.190
是不是如果说

11:56.190 --> 11:57.190
说完了

11:57.190 --> 11:59.190
必须要两个为假

11:59.190 --> 12:00.190
才为假

12:00.190 --> 12:01.190
一个为真

12:01.190 --> 12:02.190
他都为真

12:02.190 --> 12:03.190
所以说如果说他为假

12:03.190 --> 12:05.190
这个表达是没完的

12:05.190 --> 12:06.190
因为他要看

12:06.190 --> 12:08.190
后边的东西是不是为真

12:08.190 --> 12:10.190
那后边的东西

12:10.190 --> 12:11.190
他前面东西

12:11.190 --> 12:12.190
如果说为假

12:12.190 --> 12:13.190
他就必须要判断后边

12:13.190 --> 12:14.190
所以他会把

12:14.190 --> 12:15.190
这个表达是返回

12:15.190 --> 12:17.190
他就会返回1000

12:17.190 --> 12:19.190
这个应该是在前边

12:19.190 --> 12:21.190
应该是没问题的

12:23.190 --> 12:24.190
好 那么这就是一种

12:24.190 --> 12:26.190
常见的就是默认配置的写法

12:27.190 --> 12:28.190
如果他给我传了

12:28.190 --> 12:29.190
我就用他的

12:29.190 --> 12:30.190
因为他为真的话

12:30.190 --> 12:31.190
我就不用看后边的

12:31.190 --> 12:32.190
对吧 短路运算

12:32.190 --> 12:33.190
他为真就不用看后边的

12:33.190 --> 12:34.190
所以就把他返回了

12:35.190 --> 12:36.190
那如果他没传

12:36.190 --> 12:37.190
那我就用后边的

12:37.190 --> 12:39.190
那就是TotalMS

12:39.190 --> 12:42.190
那么这是起始值

12:44.820 --> 12:46.820
这是结束值

12:47.820 --> 12:48.820
这个是

12:51.820 --> 12:52.820
变化总时间

12:53.820 --> 12:54.820
那么我们回忆一下

12:54.820 --> 12:56.820
之前写那个

12:57.820 --> 12:58.820
写动画的时候

12:58.820 --> 13:00.820
除了总时间之外

13:00.820 --> 13:01.820
是不是还有一个

13:01.820 --> 13:03.820
每多少毫秒变化一次

13:03.820 --> 13:04.820
对吧

13:04.820 --> 13:05.820
是不是还有这么一个东西

13:05.820 --> 13:06.820
叫Diarration

13:06.820 --> 13:07.820
就是之前的代码

13:07.820 --> 13:08.820
一定要自己去写

13:08.820 --> 13:09.820
一定要彻底理解

13:09.820 --> 13:10.820
不然的话

13:10.820 --> 13:11.820
你后边听到

13:11.820 --> 13:12.820
之前的问题又没有解决

13:13.820 --> 13:14.820
那么这个玩意是什么

13:14.820 --> 13:16.820
每多少时间变化一次

13:17.820 --> 13:20.820
每多少时间变化一次

13:20.820 --> 13:21.820
这个玩意

13:21.820 --> 13:22.820
我们这里没有配置

13:22.820 --> 13:23.820
可不可以让用户来配置呢

13:23.820 --> 13:24.820
可以

13:24.820 --> 13:25.820
也可以了

13:25.820 --> 13:26.820
不让用户配置

13:26.820 --> 13:27.820
我自己加定时

13:27.820 --> 13:29.820
因为我为了让动画变得

13:29.820 --> 13:30.820
变得流畅

13:30.820 --> 13:31.820
我通常会定一个

13:31.820 --> 13:32.820
比较短的时间

13:32.820 --> 13:33.820
地方说15毫秒

13:36.820 --> 13:38.820
那么这里就有4个变样了

13:38.820 --> 13:40.820
是不是跟我们之前那个

13:40.820 --> 13:42.820
动画写起来是一样的

13:43.820 --> 13:44.820
从一个值变化到另一个值

13:44.820 --> 13:46.820
然后总时间是多少

13:46.820 --> 13:47.820
每个多少时间变化

13:47.820 --> 13:49.820
是不是就可以算出什么呢

13:49.820 --> 13:51.820
算出变化的次数

13:52.820 --> 13:53.820
变化的次数

13:55.820 --> 13:56.820
变化次数为多少呢

13:56.820 --> 13:59.820
是2减去

14:01.820 --> 14:02.820
totalms

14:02.820 --> 14:03.820
处于什么呢

14:03.820 --> 14:04.820
处于direction

14:04.820 --> 14:05.820
对吧

14:05.820 --> 14:07.820
你一共要变化这么多时间

14:07.820 --> 14:08.820
然后呢

14:08.820 --> 14:10.820
15毫秒变化一次

14:10.820 --> 14:12.820
那是不是变化的总次数

14:12.820 --> 14:14.820
就这么这么多次

14:14.820 --> 14:15.820
对吧

14:17.820 --> 14:18.820
好

14:19.820 --> 14:21.820
当然这个玩意也可以

14:21.820 --> 14:22.820
用户配置

14:22.820 --> 14:24.820
比方说你可以用户配置一个direction

14:24.820 --> 14:26.820
然后在这边你读取也可以

14:26.820 --> 14:27.820
配置吧

14:27.820 --> 14:29.820
比方说15毫秒变化一次

14:29.820 --> 14:30.820
那这里呢

14:30.820 --> 14:31.820
我就用这种写法了

14:31.820 --> 14:33.820
那就是option

14:33.820 --> 14:34.820
direction

14:34.820 --> 14:35.820
你有值吗

14:35.820 --> 14:36.820
你没给我传的话

14:36.820 --> 14:37.820
我就用15毫秒

14:37.820 --> 14:38.820
你给我传的就用你的

14:38.820 --> 14:39.820
你给我传的

14:39.820 --> 14:40.820
比方说你传的一个10

14:40.820 --> 14:41.820
那就用你的10

14:41.820 --> 14:42.820
你没给我传

14:42.820 --> 14:43.820
我就用15

14:43.820 --> 14:44.820
这是一种常见的写法

14:44.820 --> 14:46.820
动画剑格时间

14:47.820 --> 14:48.820
好

14:48.820 --> 14:49.820
这就是变化的次数

14:49.820 --> 14:51.820
变化的次数算出来了

14:51.820 --> 14:52.820
是不是就可以算出

14:52.820 --> 14:54.820
每一次变化

14:54.820 --> 14:56.820
改变的值

14:56.820 --> 14:57.820
对吧

14:57.820 --> 14:58.820
我们用dc

14:59.820 --> 15:00.820
或者用pc

15:00.820 --> 15:01.820
都可以

15:01.820 --> 15:02.820
dc

15:03.820 --> 15:05.820
每一次变化

15:06.820 --> 15:09.820
改变的值

15:09.820 --> 15:11.820
那么之前说算过

15:11.820 --> 15:13.820
就是目标值to

15:13.820 --> 15:14.820
点去from

15:14.820 --> 15:16.820
再除以times

15:16.820 --> 15:17.820
那有的人说

15:17.820 --> 15:19.820
那这里有可能是复数

15:19.820 --> 15:20.820
有没有可能是复数

15:20.820 --> 15:21.820
当然有可能

15:21.820 --> 15:22.820
比方说from

15:22.820 --> 15:23.820
120 to

15:23.820 --> 15:24.820
是0

15:24.820 --> 15:26.820
那复数就有什么大不了的呢

15:26.820 --> 15:27.820
复数就复数

15:27.820 --> 15:29.820
复数有什么大不了的吗

15:29.820 --> 15:31.820
比方说你要变化的是

15:31.820 --> 15:32.820
复120

15:32.820 --> 15:33.820
这是变化的总量

15:33.820 --> 15:35.820
你要从120变到0

15:35.820 --> 15:37.820
那肯定要变化复120

15:37.820 --> 15:38.820
变化的总量

15:38.820 --> 15:39.820
那一共有10次

15:39.820 --> 15:40.820
那每次是不是变化

15:40.820 --> 15:41.820
复12

15:42.820 --> 15:43.820
假设有10次

15:43.820 --> 15:44.820
复数就复数

15:44.820 --> 15:45.820
那有什么问题呢

15:45.820 --> 15:46.820
没有什么问题

15:47.820 --> 15:48.820
好

15:48.820 --> 15:49.820
那么接下来

15:49.820 --> 15:51.820
我们有了变化的次数

15:51.820 --> 15:53.820
有了每一次改变的值

15:53.820 --> 15:54.820
那么之前

15:54.820 --> 15:55.820
我们是用这种方式来做的

15:55.820 --> 15:57.820
就是set interval

16:00.820 --> 16:01.820
set interval

16:02.820 --> 16:03.820
方形

16:03.820 --> 16:05.820
后边写到duration

16:05.820 --> 16:06.820
对吧

16:06.820 --> 16:08.820
每一次运行这个函数

16:08.820 --> 16:09.820
来开始进行变化

16:09.820 --> 16:11.820
这边有个timer

16:11.820 --> 16:12.820
id

16:12.820 --> 16:15.820
每次兼给一段时间来进行变化

16:15.820 --> 16:16.820
我们之前是咋写的

16:17.820 --> 16:18.820
from

16:18.820 --> 16:20.820
加上this

16:21.820 --> 16:22.820
然后判断

16:22.820 --> 16:23.820
什么时候变化结束呢

16:23.820 --> 16:25.820
如果说from大雨了

16:26.820 --> 16:27.820
to

16:27.820 --> 16:28.820
大雨等于了to

16:28.820 --> 16:29.820
是不是变化结束了

16:29.820 --> 16:30.820
不能再变了

16:30.820 --> 16:31.820
达到目标了

16:31.820 --> 16:32.820
但是我们之前

16:32.820 --> 16:34.820
是这样子写的不好

16:34.820 --> 16:35.820
为什么不好呢

16:35.820 --> 16:37.820
因为之前那个倒是无所谓

16:37.820 --> 16:38.820
那现在我们要抽离出来就不好

16:38.820 --> 16:39.820
为什么不好呢

16:39.820 --> 16:42.820
因为我这种写法就是默认

16:42.820 --> 16:45.820
它变化的最终结果一定是

16:45.820 --> 16:47.820
从小变到大

16:47.820 --> 16:49.820
因为我真的用的是大雨等于

16:49.820 --> 16:50.820
对吧

16:50.820 --> 16:52.820
那如果说我从120变到0

16:55.820 --> 16:56.820
120变到0

16:56.820 --> 16:57.820
那是不是永远都是大雨等于

16:57.820 --> 16:58.820
对吧

16:58.820 --> 16:59.820
一开始就大雨等于了

16:59.820 --> 17:01.820
那我们之前的一个假设

17:01.820 --> 17:02.820
就是从小变到大

17:02.820 --> 17:03.820
但是我们现在把它抽离成

17:03.820 --> 17:05.820
公共的方法之后

17:06.820 --> 17:07.820
你就不能做到这个假设了

17:08.820 --> 17:10.820
它有可能从大变到小

17:11.820 --> 17:12.820
从0变到有负的1万

17:12.820 --> 17:14.820
那输不准的

17:14.820 --> 17:15.820
对吧

17:15.820 --> 17:16.820
那怎么办呢

17:18.820 --> 17:20.820
我们这里就可以换一种识录

17:20.820 --> 17:21.820
你看

17:21.820 --> 17:22.820
你变化的次数

17:22.820 --> 17:24.820
一共要变化这么多次

17:24.820 --> 17:26.820
然后我变化的次数一定是整个数

17:26.820 --> 17:28.820
就不能变化0.5次

17:28.820 --> 17:30.820
我就给它向下取整

17:31.820 --> 17:32.820
变化了次数

17:32.820 --> 17:33.820
然后我再定一个变量

17:33.820 --> 17:35.820
叫做当前的次数

17:36.820 --> 17:38.820
当前变化的次数

17:39.820 --> 17:40.820
那我怎么玩呢

17:40.820 --> 17:41.820
这件事情

17:41.820 --> 17:42.820
我每变化一次

17:42.820 --> 17:43.820
我这里就变化

17:44.820 --> 17:45.820
你看

17:45.820 --> 17:46.820
我每变

17:46.820 --> 17:47.820
这里变化了吗

17:47.820 --> 17:48.820
我每变化一次

17:48.820 --> 17:49.820
就curve times 加加

17:51.820 --> 17:54.820
表示当前变化的多了一次

17:54.820 --> 17:56.820
当前变化

17:57.820 --> 17:58.820
增加一次

18:00.820 --> 18:01.820
一共要变化这么多次

18:01.820 --> 18:03.820
你现在不断的变化

18:03.820 --> 18:04.820
每变化一次

18:04.820 --> 18:05.820
我就加加

18:05.820 --> 18:06.820
那么什么时候停止

18:06.820 --> 18:07.820
我就用这个东西来判断

18:08.820 --> 18:09.820
当我它

18:09.820 --> 18:11.820
当它大于 times

18:12.820 --> 18:15.820
是不是变化的次数

18:15.820 --> 18:16.820
达到了

18:17.820 --> 18:18.820
达到了变化的次数

18:19.820 --> 18:20.820
对不对 就不动了

18:20.820 --> 18:22.820
那么我就这里直接把

18:22.820 --> 18:25.820
把这个 from 就直接设为 to

18:25.820 --> 18:26.820
对吧

18:26.820 --> 18:27.820
变化完成了

18:28.820 --> 18:32.460
因为这里要考虑一些

18:32.460 --> 18:33.460
计算不精确的事情

18:33.460 --> 18:35.460
表示这里计算出来是一个小数

18:35.460 --> 18:37.460
1.0777777

18:37.460 --> 18:38.460
那么这样子加的话

18:38.460 --> 18:39.460
就一些不精确

18:39.460 --> 18:41.460
当我们变化到次数达到了

18:41.460 --> 18:43.460
所以已经变化完成了

18:43.460 --> 18:44.460
变化完成

18:44.460 --> 18:45.460
我就直接把你设置成目标值

18:46.460 --> 18:47.460
对吧

18:47.460 --> 18:48.460
那么这里我是不是要

18:48.460 --> 18:49.460
清除计时期了

18:49.460 --> 18:50.460
对吧

18:51.460 --> 18:52.460
清除计时期

18:53.460 --> 18:54.460
不再变化

18:56.900 --> 18:57.900
整个逻辑是不是

18:57.900 --> 18:58.900
跟之前的逻辑是一样的

18:58.900 --> 19:00.900
只不过我们把它抽离出来了

19:01.900 --> 19:02.900
对不对

19:03.900 --> 19:04.900
那么这里

19:04.900 --> 19:05.900
如果说我这里

19:05.900 --> 19:07.900
比方说我这里输出一下服务

19:08.900 --> 19:09.900
来 我们来看一下

19:09.900 --> 19:11.900
有没有这样的一个效果呢

19:13.900 --> 19:15.900
你看 是不是就在变化了

19:16.900 --> 19:18.900
对不对 从一开始是120嘛

19:18.900 --> 19:19.900
然后不断的变化

19:19.900 --> 19:21.900
你看 从变到117

19:21.900 --> 19:22.900
115

19:22.900 --> 19:23.900
112

19:23.900 --> 19:24.900
然后不断的变化变化到0

19:25.900 --> 19:26.900
变化到0

19:27.900 --> 19:28.900
但是

19:28.900 --> 19:30.900
现在有一个问题来了

19:30.900 --> 19:33.900
我每一次变化的时候

19:33.900 --> 19:35.900
我是要输出吗

19:37.900 --> 19:38.900
那不一定吧

19:38.900 --> 19:40.900
那我这里要干嘛呢

19:40.900 --> 19:42.900
每一次变化要干嘛呢

19:42.900 --> 19:43.900
那么这个位置

19:43.900 --> 19:45.900
你会发现很恼火了

19:45.900 --> 19:47.900
你不同的情况

19:47.900 --> 19:48.900
有不同的事情

19:48.900 --> 19:50.900
这里可能性是无数种

19:50.900 --> 19:52.900
无数的可能性

19:52.900 --> 19:53.900
那你看这里

19:53.900 --> 19:55.900
怎么来无数的可能性

19:55.900 --> 19:57.900
有可能我每一次变化

19:57.900 --> 19:58.900
我是要重新设置

19:59.900 --> 20:01.900
有可能我每一次变化

20:01.900 --> 20:03.900
我是要设置一个元素的宽度

20:03.900 --> 20:05.900
有可能我每一次变化

20:05.900 --> 20:08.900
我要设置一个元素的稳本

20:08.900 --> 20:10.900
有可能我每一次变化

20:10.900 --> 20:12.900
我要去设置一个元素的高度

20:12.900 --> 20:13.900
有可能我每一次变化

20:13.900 --> 20:15.900
要去设置一个元素的坐标

20:15.900 --> 20:16.900
有可能我每一次变化

20:16.900 --> 20:17.900
要去设置一个元素的

20:17.900 --> 20:19.900
其他什么东西

20:19.900 --> 20:21.900
是不是有无数种可能这里

20:21.900 --> 20:22.900
你没法写这个办法

20:22.900 --> 20:25.900
你写的其中任何一种可能性

20:25.900 --> 20:27.900
都会导致这个函数不再通用

20:27.900 --> 20:28.900
你这里写的滚动条

20:28.900 --> 20:29.900
哦哦

20:29.900 --> 20:31.900
这个函数只能用于滚动条

20:31.900 --> 20:32.900
不能做其他事

20:32.900 --> 20:34.900
那么怎么办

20:34.900 --> 20:35.900
我既然这里

20:35.900 --> 20:37.900
我不知道你要做什么

20:37.900 --> 20:38.900
但是我只知道什么

20:38.900 --> 20:41.900
数变化到了哪儿

20:41.900 --> 20:43.900
变化到了这儿

20:43.900 --> 20:44.900
那怎么办

20:44.900 --> 20:46.900
请你

20:46.900 --> 20:49.900
给我传一个函数进来

20:50.900 --> 20:52.900
我变化了

20:52.900 --> 20:55.900
我就会运行你这个函数

20:55.900 --> 20:56.900
我变化一次

20:56.900 --> 20:57.900
我就运行你这个函数

20:57.900 --> 21:00.900
这种场景叫做毁掉

21:00.900 --> 21:04.400
毁掉模式

21:04.400 --> 21:05.400
那么这个毁掉模式

21:05.400 --> 21:07.400
你当下其实看到很多的

21:07.400 --> 21:08.400
比如说你平时写的代码

21:08.400 --> 21:11.400
Domaddimensioner

21:15.970 --> 21:19.410
这里是不是一个毁掉

21:19.410 --> 21:21.410
这个函数是你写的吗

21:21.410 --> 21:22.410
不是吧

21:22.410 --> 21:24.410
这个函数是浏览器给你写好的

21:24.410 --> 21:25.410
那么你就想一想

21:25.410 --> 21:27.410
浏览器在写这个函数的时候

21:27.410 --> 21:31.380
它咋写

21:31.380 --> 21:33.380
浏览器在写这个函数的时候

21:34.380 --> 21:35.380
是不是它遇到

21:35.380 --> 21:37.380
跟我们刚才一样的问题

21:37.380 --> 21:41.380
我来帮你监听某一个事件

21:41.380 --> 21:42.380
事件发生了

21:42.380 --> 21:43.380
我知不知道

21:43.380 --> 21:44.380
我知道

21:44.380 --> 21:47.380
但是我不知道要干啥

21:47.380 --> 21:49.380
我知道它被点击了

21:49.380 --> 21:50.380
我咋知道你要干啥

21:50.380 --> 21:51.380
我不知道

21:51.380 --> 21:54.380
所以说你给我传一个函数进来

21:54.380 --> 21:56.380
我在事件发生的时候

21:56.380 --> 21:58.380
我就会去掉你这个函数

21:58.380 --> 21:59.380
于是你这个函数

21:59.380 --> 22:00.380
在事件发生过后

22:00.380 --> 22:01.380
就会运行

22:01.380 --> 22:02.380
对吧

22:02.380 --> 22:04.380
那这里是一样的问题

22:04.380 --> 22:05.380
变了吗

22:05.380 --> 22:06.380
变了

22:06.380 --> 22:07.380
变了多少

22:07.380 --> 22:08.380
变了值在这

22:08.380 --> 22:10.380
但是我不知道要干啥

22:10.380 --> 22:12.380
我可能有任何事情可以干

22:12.380 --> 22:15.380
所以说你就传一个函数进来

22:15.380 --> 22:16.380
你告诉我你要干啥

22:16.380 --> 22:17.380
我在这里

22:17.380 --> 22:19.380
帮你去运行这个函数

22:19.380 --> 22:21.380
M5

22:21.380 --> 22:22.380
我雕用它

22:22.380 --> 22:24.380
你看你传了个对象进来

22:24.380 --> 22:25.380
对象给谁的

22:25.380 --> 22:28.380
给的不就是一个Option是吗

22:28.380 --> 22:29.380
给的不就是它吗

22:29.380 --> 22:30.380
那么这个M5

22:30.380 --> 22:32.380
我雕用你

22:32.380 --> 22:34.380
你这个函数不是要接受一个函数吗

22:34.380 --> 22:35.380
这个函数是什么

22:35.380 --> 22:36.380
就是每一次变化的值

22:36.380 --> 22:37.380
那每一次变化的值

22:37.380 --> 22:38.380
我这里是不是知道

22:38.380 --> 22:39.380
我就传给你

22:40.380 --> 22:41.380
对吧

22:41.380 --> 22:42.380
也就是这个函数里边

22:42.380 --> 22:43.380
我能够知道

22:43.380 --> 22:46.380
什么时候要做事情

22:46.380 --> 22:47.380
但是我不知道要做啥

22:47.380 --> 22:49.380
而这边的恰恰相反

22:49.380 --> 22:50.380
我知道要做啥

22:50.380 --> 22:52.380
但是我不知道什么时候要做

22:52.380 --> 22:54.380
那就用回教模式

22:54.380 --> 22:55.380
好好体会

22:55.380 --> 22:57.380
这一块比较难的就是这里

22:58.380 --> 22:59.380
我雕一下

23:00.380 --> 23:01.380
好那么这里

23:01.380 --> 23:02.380
我们来试一下

23:02.380 --> 23:03.380
看一下能不能

23:03.380 --> 23:05.380
要这个结果

23:05.380 --> 23:06.380
回掉函数

23:06.380 --> 23:08.380
函数运行

23:08.380 --> 23:09.380
再传一个N

23:09.380 --> 23:10.380
我们来看一下

23:12.380 --> 23:14.380
你看是不是运行到回掉了

23:14.380 --> 23:16.380
就运行到这里的回掉函数了

23:16.380 --> 23:18.380
它每一次变化都会运行这个函数

23:18.380 --> 23:19.380
这就回掉

23:19.380 --> 23:21.380
当然这里要写得完善一点的话

23:21.380 --> 23:22.380
最好这样子写

23:22.380 --> 23:25.380
Option是M5有值吗

23:25.380 --> 23:26.380
有值的情况下

23:26.380 --> 23:28.380
我才去运行它

23:28.380 --> 23:30.380
这又是利用了这个短度运算

23:30.380 --> 23:32.380
外面的雨下大了

23:32.380 --> 23:34.380
这又是利用了这个短度运算

23:34.380 --> 23:36.380
前边如果说为真

23:36.380 --> 23:38.380
因为这是并且说必须要真真为真

23:38.380 --> 23:39.380
必须要两个都为真

23:39.380 --> 23:41.380
前边为真还没完

23:41.380 --> 23:43.380
我还在判断后边的

23:43.380 --> 23:45.380
所以后边的表达是也会运行

23:46.380 --> 23:48.380
前边如果说为假

23:48.380 --> 23:49.380
就没有传这个

23:49.380 --> 23:50.380
没有传这个判定为假

23:50.380 --> 23:51.380
由于是并且

23:51.380 --> 23:52.380
它一个为假就行了

23:52.380 --> 23:53.380
就不用判断后边了

23:53.380 --> 23:55.380
它就不会运行这个

23:55.380 --> 23:57.380
当然你如果说

23:57.380 --> 23:59.380
你如果说这个看不习惯

23:59.380 --> 24:01.380
你完全可以这样子写

24:01.380 --> 24:03.380
没有任何问题

24:03.380 --> 24:05.380
没有任何的问题

24:05.380 --> 24:06.380
没有哪个说

24:06.380 --> 24:07.380
哪个叫高端一些

24:07.380 --> 24:09.380
哪个叫low一些

24:09.380 --> 24:10.380
没有任何问题

24:10.380 --> 24:12.380
这样子写都行

24:12.380 --> 24:13.380
这下面写吧

24:13.380 --> 24:14.380
上面写吧

24:14.380 --> 24:15.380
都可以

24:15.380 --> 24:16.380
为什么我要写下面这种呢

24:16.380 --> 24:17.380
是因为

24:17.380 --> 24:20.380
我就怕你们以后看到这种代码

24:20.380 --> 24:21.380
不是很熟悉

24:21.380 --> 24:23.380
至少你要看懂别人写的东西

24:23.380 --> 24:25.380
这个代码就跟上面是一样的

24:25.380 --> 24:28.890
好 那么这个东西是不是解决

24:28.890 --> 24:29.890
那另一个呢

24:29.890 --> 24:31.890
如果说变化完成之后

24:31.890 --> 24:33.890
你可能有些别的事情要做

24:33.890 --> 24:35.890
所以变化完成在这儿

24:35.890 --> 24:37.890
变化完成的时候

24:37.890 --> 24:38.890
可能有一些别的事情要做

24:38.890 --> 24:40.890
那么这里怎么做呢

24:40.890 --> 24:42.890
那是不是也是一样的

24:42.890 --> 24:43.890
Option是on end的

24:43.890 --> 24:44.890
你给我传了一个函数进来

24:44.890 --> 24:45.890
我知道变化完成了

24:45.890 --> 24:47.890
但是我不知道要做啥

24:47.890 --> 24:48.890
那么如果说你给我传了一个函数进来

24:48.890 --> 24:50.890
我就帮你运行这个函数

24:50.890 --> 24:51.890
这个函数它不需要函数

24:51.890 --> 24:52.890
不需要算了

24:52.890 --> 24:54.890
于是就写出来这么一个代码

24:54.890 --> 24:56.890
代码二十毫不多

24:58.890 --> 25:00.890
但是里边包含了思想

25:00.890 --> 25:02.890
要慢慢去体会

25:02.890 --> 25:06.330
有了这个函数之后

25:06.330 --> 25:08.330
同学们

25:08.330 --> 25:11.330
这个世界一下子变得非常非常

25:11.330 --> 25:14.330
友好和舒适了

25:14.330 --> 25:16.330
怎么个舒适方

25:16.330 --> 25:18.330
我给大家随便写几个例子

25:18.330 --> 25:20.330
你又知道这个函数之强大

25:21.330 --> 25:23.330
我就来一个

25:26.330 --> 25:29.330
然后现在我们有搞活动商品活动

25:29.330 --> 25:31.330
活动下

25:34.790 --> 25:36.790
大甩卖

25:36.790 --> 25:38.790
那么后边我写个时间元素

25:38.790 --> 25:44.960
这里边显示活动的价格

25:44.960 --> 25:46.960
一开始是500

25:46.960 --> 25:48.960
我现在不要500

25:48.960 --> 25:51.960
不要298只要998

25:51.960 --> 25:53.960
所以说一开始是这个

25:53.960 --> 25:56.960
那么现在我要把500变成998

25:56.960 --> 25:59.960
变成998

25:59.960 --> 26:01.960
变成99

26:01.960 --> 26:03.960
那么我们怎么来做呢

26:03.960 --> 26:05.960
这里是不是就会有动画

26:05.960 --> 26:14.200
你看

26:15.200 --> 26:16.200
那么这里是不是

26:16.200 --> 26:18.200
我想的是把500变成99

26:18.200 --> 26:20.200
但是我不想瞬间变化

26:20.200 --> 26:22.200
我想的是把500这样子

26:22.200 --> 26:23.200
先变成400多

26:23.200 --> 26:24.200
然后变成300多

26:24.200 --> 26:25.200
变成200多

26:25.200 --> 26:26.200
变成100多

26:26.200 --> 26:27.200
变成99

26:27.200 --> 26:29.200
逐步变向

26:29.200 --> 26:31.200
这是不是又是动画

26:31.200 --> 26:33.200
那么这本质上就是一个数

26:33.200 --> 26:35.200
变成另一个数

26:35.200 --> 26:37.200
那么我们导入我们之前写的

26:37.200 --> 26:39.200
那个animate

26:39.200 --> 26:41.200
它给我们提供了一个函数叫

26:41.200 --> 26:43.200
craze animation

26:43.200 --> 26:45.200
它里面会传一个对象

26:45.200 --> 26:47.200
对象里面它会告诉

26:47.200 --> 26:49.200
你要告诉它从哪一个值变到哪一个值

26:49.200 --> 26:51.200
从哪一个值呢从500

26:51.200 --> 26:53.200
变到多少呢变到99

26:53.200 --> 26:56.200
总共变化的时间呢

26:56.200 --> 26:58.200
我就保持默正值

26:58.200 --> 27:00.200
不给它传

27:00.200 --> 27:02.200
然后每一次变动有个animate

27:02.200 --> 27:05.200
每一次变动你会给我传一个n进来

27:05.200 --> 27:07.200
这个n那就是每一次变化的值

27:07.200 --> 27:09.200
好你看一下

27:09.200 --> 27:10.200
那么现在呢刷新你看

27:10.200 --> 27:11.200
是不是在不断的变

27:11.200 --> 27:13.200
变到最终变到99

27:13.200 --> 27:15.200
那么这里边我就很轻松了

27:15.200 --> 27:17.200
我要做啥

27:17.200 --> 27:19.200
我要找到这个十变元素

27:19.200 --> 27:20.200
documents

27:20.200 --> 27:22.200
query snaggert

27:24.200 --> 27:26.200
这里这个给大家说一下

27:26.200 --> 27:28.200
query snaggert在诚哥的课程里面说

27:28.200 --> 27:30.200
这个函数呢尽量不要去使用

27:30.200 --> 27:31.200
对吧

27:31.200 --> 27:34.200
因为诚哥的课程还比较早期

27:34.200 --> 27:36.200
query snaggert过去呢

27:36.200 --> 27:37.200
确实有一些接动性问题

27:37.200 --> 27:38.200
现在不用怕了啊

27:38.200 --> 27:40.200
query snaggert随便用

27:40.200 --> 27:41.200
好用的很

27:41.200 --> 27:43.200
我跟你说了绝对没问题啊

27:43.200 --> 27:44.200
随便用

27:44.200 --> 27:46.200
不要怕

27:46.200 --> 27:49.200
当然有的担心这个玩意儿得到的是静态的

27:49.200 --> 27:50.200
不是动态的

27:50.200 --> 27:52.200
我跟你说变了所有东西

27:52.200 --> 27:54.200
放到变用里面的所有东西

27:54.200 --> 27:55.200
全是静态的

27:55.200 --> 27:56.200
没有动态的东西

27:56.200 --> 27:57.200
不用怕

27:57.200 --> 27:58.200
直接用

27:58.200 --> 27:59.200
这里边阿姆

27:59.200 --> 28:01.200
那么这里我们可以拿到

28:01.200 --> 28:03.200
每一步变化的这个n这个值

28:03.200 --> 28:04.200
那就简单了

28:04.200 --> 28:06.200
重新给这个十变重新复辱

28:06.200 --> 28:10.090
不完了吗

28:10.090 --> 28:11.090
是不是打成这个效果了

28:11.090 --> 28:13.090
因为那个小数点太多了

28:13.090 --> 28:16.460
那怎么办呢

28:16.460 --> 28:18.460
n是个数字嘛

28:21.460 --> 28:23.460
包含两个小数

28:23.460 --> 28:25.460
我就完了嘛

28:25.460 --> 28:26.460
如果说你觉得它变化太快了

28:26.460 --> 28:28.460
那么我们就可以通过这个东西来调整

28:28.460 --> 28:29.460
对吧

28:29.460 --> 28:30.460
你别也别一秒了

28:30.460 --> 28:31.460
三秒内变化完成

28:31.460 --> 28:33.460
是不是变化得很慢了

28:33.460 --> 28:34.460
对吧

28:34.460 --> 28:35.460
就很舒服

28:35.460 --> 28:36.460
然后呢

28:36.460 --> 28:38.460
如果说你觉得它变化的频率太快了

28:38.460 --> 28:39.460
总之间倒没有问题

28:39.460 --> 28:40.460
变化的频率太快了

28:40.460 --> 28:42.460
那么通过第二回形来调整

28:42.460 --> 28:47.100
你要说我只100毫秒变化一次

28:47.100 --> 28:48.100
就很舒服

28:48.100 --> 28:50.100
然后你希望变化完成之后

28:50.100 --> 28:51.100
把它变成红色

28:51.100 --> 28:52.100
那么on end

28:52.100 --> 28:55.100
当我们变化完成之后

28:55.100 --> 28:56.100
运行的函数

28:56.100 --> 28:57.100
变化完成之后呢

28:58.100 --> 28:59.100
要设置一个Color

28:59.100 --> 29:01.100
设置为红色

29:02.100 --> 29:04.100
这样子三秒内变化完成之后

29:04.100 --> 29:05.100
它就会运行这个函数

29:05.100 --> 29:06.100
on end

29:06.100 --> 29:08.100
你看有了这个函数之后

29:08.100 --> 29:10.100
动画是不是就特别简单了

29:10.100 --> 29:11.100
对吧

29:11.100 --> 29:12.100
这是启动一个例子

29:12.100 --> 29:14.100
那些后面的例子可以很多

29:14.100 --> 29:16.100
那么后面的例子

29:16.100 --> 29:17.100
比方说

29:17.100 --> 29:19.100
你要改变一个元素的高度

29:19.100 --> 29:21.100
那我就随便来一个吧

29:21.100 --> 29:23.100
来一个DV item

29:25.980 --> 29:27.980
比方说给它一个背景颜色

29:27.980 --> 29:28.980
AF40

29:28.980 --> 29:29.980
然后给它一个宽度

29:29.980 --> 29:30.980
100个像素

29:30.980 --> 29:31.980
高度呢

29:32.980 --> 29:33.980
300个像素

29:36.980 --> 29:38.980
那比方说我想点一下这个DV

29:38.980 --> 29:40.980
我就从300变到高度为100

29:40.980 --> 29:42.980
那你看我怎么玩啊

29:42.980 --> 29:43.980
先拿到这个DV

29:47.620 --> 29:48.620
拿这个DV

29:48.620 --> 29:50.620
然后呢给它注册点击事件

29:50.620 --> 29:51.620
on click

29:51.620 --> 29:53.620
点击事件里边我做什么呢

29:53.620 --> 29:54.620
我让它

29:54.620 --> 29:56.620
我给它创建一个动画

29:57.620 --> 29:58.620
创建一个动画

29:59.620 --> 30:00.620
从多少变到多少呢

30:00.620 --> 30:01.620
从300

30:01.620 --> 30:02.620
变到100

30:04.620 --> 30:05.620
总时间呢

30:05.620 --> 30:06.620
就3秒钟吧

30:06.620 --> 30:07.620
间隔时间

30:07.620 --> 30:08.620
间隔时间还是平化一点吧

30:08.620 --> 30:09.620
实物好妙

30:09.620 --> 30:11.620
然后每一次变化

30:11.620 --> 30:12.620
是不是拿到一个纸

30:12.620 --> 30:13.620
它从300变到100

30:13.620 --> 30:14.620
对吧

30:14.620 --> 30:15.620
每一次这个素质

30:15.620 --> 30:16.620
我就重新给它设置高度

30:16.620 --> 30:17.620
不就完了吗

30:17.620 --> 30:18.620
DV style

30:19.620 --> 30:20.620
非常非常灵活

30:20.620 --> 30:21.620
灵活的不得了

30:21.620 --> 30:22.620
这个还是变通用的

30:23.620 --> 30:24.620
变化完成之后

30:24.620 --> 30:26.620
我把它背景颜色改一下吧

30:26.620 --> 30:27.620
改成什么

30:32.620 --> 30:33.620
点一下

30:38.660 --> 30:39.660
这个失败

30:41.660 --> 30:42.660
点一下

30:47.020 --> 30:48.020
对吧

30:48.020 --> 30:49.020
没问题吧

30:51.020 --> 30:52.020
那么这就是

30:52.020 --> 30:54.020
这个动画这么一个函数

30:54.020 --> 30:55.020
一个通用的创建动画函数

30:55.020 --> 30:57.020
但是创建动画函数呢

30:57.020 --> 30:58.020
还是

30:58.020 --> 31:00.020
虽然功能很小

31:00.020 --> 31:01.020
但是呢

31:02.020 --> 31:03.020
我们平时开发

31:03.020 --> 31:04.020
很多时候也够用

31:05.020 --> 31:06.020
其实有一些

31:06.020 --> 31:07.020
公司

31:07.020 --> 31:08.020
或者是一些

31:08.020 --> 31:09.020
第三方

31:09.020 --> 31:10.020
一些个人

31:10.020 --> 31:11.020
他们也去写过

31:11.020 --> 31:12.020
这些函数

31:13.020 --> 31:14.020
写得更加完善一些

31:14.020 --> 31:15.020
我们以后

31:15.020 --> 31:16.020
学习第三方库的时候

31:16.020 --> 31:18.020
会有一定的接触

31:19.020 --> 31:20.020
包括有些动画

31:20.020 --> 31:21.020
我们以后学了

31:21.020 --> 31:23.020
这三个还有更好的做法

31:23.020 --> 31:24.020
不过现阶段

31:24.020 --> 31:25.020
我们用介石动画

31:25.020 --> 31:26.020
这个函数就非常够用

31:27.020 --> 31:28.020
好

31:28.020 --> 31:29.020
那么这里

31:29.020 --> 31:30.020
我就开了个头

31:31.020 --> 31:32.020
给大家说了一下

31:32.020 --> 31:33.020
这个

31:34.020 --> 31:35.020
咱们这个

31:37.020 --> 31:38.020
手风琴效果

31:38.020 --> 31:39.020
它的整体的一个思路

31:40.020 --> 31:41.020
这个手风琴效果里边

31:41.020 --> 31:42.020
由于涉及到动画

31:42.020 --> 31:43.020
我们不想去重复的

31:43.020 --> 31:44.020
去开发这些动画了

31:44.020 --> 31:45.020
你看这里不就是吗

31:45.020 --> 31:46.020
你看高度

31:46.020 --> 31:47.020
是不是还不断的变化

31:48.020 --> 31:49.020
对吧

31:49.020 --> 31:50.020
高度还不断的变化

31:50.020 --> 31:51.020
就是个动画

31:51.020 --> 31:52.020
我们不希望去重复

31:52.020 --> 31:53.020
去写这些动画代码

31:53.020 --> 31:54.020
包括我们后面

31:54.020 --> 31:55.020
还会做的

31:55.020 --> 31:56.020
很多效果里面都有动画

31:56.020 --> 31:57.020
你们都可以

31:57.020 --> 31:58.020
使用这个函数

31:58.020 --> 31:59.020
去完成动画

31:59.020 --> 32:00.020
对吧

32:01.020 --> 32:02.020
我们就是为了

32:02.020 --> 32:03.020
以后写的方便一点

32:04.020 --> 32:05.020
我更加希望了

32:05.020 --> 32:06.020
同学们是能够

32:06.020 --> 32:07.020
自己写出来这个函数

32:07.020 --> 32:08.020
听了我讲解之后

32:08.020 --> 32:09.020
如果你实战是搞不定

32:09.020 --> 32:10.020
因为确实有点难度

32:10.020 --> 32:12.020
特别是这个有回掉

32:12.020 --> 32:14.020
那么你至少要知道

32:14.020 --> 32:15.020
怎么去使用

32:16.020 --> 32:17.020
好了 同学们

32:17.020 --> 32:18.020
接下来

32:18.020 --> 32:19.020
加油

32:19.020 --> 32:21.020
把这个函数尽量写

32:21.020 --> 32:22.020
写不出来

32:22.020 --> 32:23.020
你就把我的Copy过去

32:23.020 --> 32:24.020
然后去用一下

32:24.020 --> 32:25.020
习惯一下

32:25.020 --> 32:26.020
看它是怎么去用的

32:27.020 --> 32:29.020
然后尽自己最大的努力

32:29.020 --> 32:31.020
完成这个首风情效果

32:33.020 --> 32:34.020
不管你做成什么样子

32:34.020 --> 32:35.020
都没关系

32:35.020 --> 32:36.020
然后尽了力之后

32:36.020 --> 32:37.020
再来听我讲

32:37.020 --> 32:39.020
你就会有很大的受过

