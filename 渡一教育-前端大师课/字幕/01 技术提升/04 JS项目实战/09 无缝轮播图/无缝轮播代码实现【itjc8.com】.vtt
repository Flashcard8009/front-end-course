WEBVTT

00:00.180 --> 00:04.740
好 那么有了想法 我们就要把想法变成大一码实现

00:06.240 --> 00:09.660
首先 我们来还是老过一曲啊 写这个atm

00:09.660 --> 00:12.660
这个atm呢 我们之前按照我们的示意图哈

00:12.660 --> 00:15.660
然后把它完成就可以了 这个比较简单

00:15.660 --> 00:18.660
用它的示意图找到

00:18.660 --> 00:22.660
在这个地方我给它截个图

00:22.660 --> 00:27.750
好了 我就看着这个截图来写

00:28.750 --> 00:31.750
这里边有一个DIV

00:31.750 --> 00:34.750
那样是为carousel container啊

00:34.750 --> 00:37.750
这个啊 纯粹是体力活了 没什么好说的了

00:37.750 --> 00:40.750
然后里边有三个部分组成 第一个部分的是carousel nest

00:44.750 --> 00:47.750
这个地方你可以用UL也可以用别的都行

00:47.750 --> 00:51.750
那这里边呢 我们是有三个图片 每个图片的那样是呢

00:51.750 --> 00:54.750
是carousel item

00:55.750 --> 00:58.750
有三张图片啊 我这里其实有五张 但这个玩意儿都无所谓

00:58.750 --> 01:01.750
因为我们现在只是写进它一面哈

01:01.750 --> 01:05.750
我们这里就写这个五张吧 每个图片的src地址呢

01:05.750 --> 01:08.750
是来自于img

01:08.750 --> 01:13.750
然后我paper

01:13.750 --> 01:17.750
我paper到了

01:17.750 --> 01:20.750
就生成了这么一些图片

01:20.750 --> 01:24.750
当然在实际的开发中 你们以后在公司里写轮波图的话

01:24.750 --> 01:27.750
那有可能外面会套一个A元数

01:27.750 --> 01:30.750
因为有些情况下轮波图是可以点击的

01:30.750 --> 01:33.750
但是可能会套一些A元数

01:33.750 --> 01:36.750
甚至还可能会套一个DIV

01:36.750 --> 01:40.750
除了有图片之外 可能还会有一些相关的描述性文字

01:40.750 --> 01:43.750
都可以 那本质上是一样的

01:43.750 --> 01:46.750
那么这里呢 我就单独只用一个图片就可以了

01:46.750 --> 01:48.750
好 那么这个区就写完了

01:48.750 --> 01:52.750
接下来下一个区 我就用指示器

01:52.750 --> 01:56.750
DIV Indicator

01:56.750 --> 01:59.750
这个指示器里边有三个小的DIV

01:59.750 --> 02:01.750
当然这里用ULLI也行

02:01.750 --> 02:06.750
我们就用IndicatorItem

02:06.750 --> 02:09.750
那么都是三个指示器

02:09.750 --> 02:12.750
当然这些 为什么前面是五个这里 这些三个呢

02:12.750 --> 02:14.750
无所谓 静态也免

02:14.750 --> 02:17.750
写完了这些东西全部会被删掉的

02:17.750 --> 02:19.750
删掉之后我们用GS创建

02:19.750 --> 02:22.750
我这里写出来只是为了方便我做样式

02:22.750 --> 02:24.750
那么其中有一个指示器呢

02:24.750 --> 02:26.750
我们给它加上一个样式

02:26.750 --> 02:28.750
表示激活的样式

02:28.750 --> 02:31.750
那么一会儿呢 我就顺便把它做出来

02:31.750 --> 02:34.750
除了指示器外呢 还有第三个区域就是箭头区域

02:34.750 --> 02:36.750
箭头区域呢 我干脆用一个容器来包一下吧

02:36.750 --> 02:38.750
一个Irel容器

02:38.750 --> 02:40.750
里边呢 有两个DIV

02:40.750 --> 02:42.750
一个是IrelNet

02:42.750 --> 02:45.750
一个呢 是IrelRight

02:45.750 --> 02:47.750
用这两个DIV包一下

02:47.750 --> 02:49.750
那么这个ATM就写完了

02:49.750 --> 02:51.750
就没啥东西了 还有啥 没啥了

02:51.750 --> 02:53.750
那么接下来我们就是

02:53.750 --> 02:57.750
根据这个ATM来书写它的样式

02:57.750 --> 02:59.750
来书写样式

02:59.750 --> 03:05.890
我们找到这个CSS文件

03:05.890 --> 03:07.890
来书写这个样式

03:07.890 --> 03:10.890
首先我们来搞定整个容器的样式

03:10.890 --> 03:13.890
就是Carousel Container

03:13.890 --> 03:15.890
整个容器的样式的话

03:15.890 --> 03:17.890
它这里是有个定宽高 宽高固定

03:17.890 --> 03:20.890
宽度的话那都是随便的

03:20.890 --> 03:23.890
如果说你要占个满屏的话 那就百分之半

03:23.890 --> 03:25.890
那如果说你只有一个固定宽度的话

03:25.890 --> 03:27.890
你自己设置 这个无所谓的

03:27.890 --> 03:30.890
我们比方说宽度给它设个500个相处吧

03:30.890 --> 03:34.890
然后高度给它设置一个300个相处吧

03:34.890 --> 03:35.890
宽高固定

03:35.890 --> 03:37.890
然后有一个艺术隐藏

03:37.890 --> 03:39.890
就是艺术部分我就不显示了

03:39.890 --> 03:41.890
艺术隐藏

03:42.890 --> 03:44.890
margin 0

03:44.890 --> 03:45.890
OK

03:45.890 --> 03:48.890
就是整个容器的样式

03:48.890 --> 03:53.200
这里边我就稍微放大一点

03:53.200 --> 03:57.200
好 接下来是下边这个Carolist

03:57.200 --> 03:59.200
Carolist它有什么样的特点呢

03:59.200 --> 04:01.200
经过我们之前的分析

04:01.200 --> 04:03.200
它是一个包裹图片的容器

04:03.200 --> 04:07.200
那么它的关键在于它要设置

04:07.200 --> 04:14.720
它关键要去设置它的宽度

04:15.720 --> 04:17.720
不设置的话宽度就是100%

04:17.720 --> 04:19.720
就导致里边的左浮动的话

04:19.720 --> 04:20.720
它就会换航

04:20.720 --> 04:22.720
所以它宽度一定要去设置

04:22.720 --> 04:23.720
那么这个设置多少呢

04:23.720 --> 04:25.720
我这里先随便设置一下

04:25.720 --> 04:27.720
为什么先随便设置一下呢

04:27.720 --> 04:29.720
因为它的宽度取决于它里面

04:29.720 --> 04:31.720
有多少张图片

04:31.720 --> 04:32.720
是不是有多少个图片

04:32.720 --> 04:34.720
那么它里面有多少个图片呢

04:34.720 --> 04:35.720
是要我们到时候

04:35.720 --> 04:37.720
我们要用介石来创建的

04:37.720 --> 04:39.720
所以它的宽度是由介石设置的

04:39.720 --> 04:40.720
那么我们这里呢

04:40.720 --> 04:42.720
就是做一个效果出来

04:42.720 --> 04:44.720
我这里呢就设置一个

04:44.720 --> 04:45.720
比方现在我们是5张旧

04:45.720 --> 04:46.720
500%

04:47.720 --> 04:48.720
就这里边的宽度

04:50.720 --> 04:51.720
然后呢它有个特点

04:51.720 --> 04:53.720
它的高度呢就100%

04:53.720 --> 04:54.720
高度100%

04:54.720 --> 04:56.720
就是把富龙器撑慢

04:56.720 --> 04:58.720
它的高度跟上面这个高度是不是一样的

04:59.720 --> 05:00.720
然后它里边的东西呢

05:00.720 --> 05:02.720
开了item

05:03.720 --> 05:05.720
那么这里边我们也给它定宽高

05:05.720 --> 05:07.720
宽度的话就是500%

05:07.720 --> 05:09.720
是不是跟这个一样的

05:09.720 --> 05:11.720
高度的话

05:11.720 --> 05:14.720
就是100%

05:14.720 --> 05:16.720
就是它的富龙器也是一样的

05:16.720 --> 05:18.720
你看这个图片是不是这个特点

05:19.720 --> 05:21.720
那宽度为什么不能用100%

05:21.720 --> 05:23.720
那它的宽度用100%

05:23.720 --> 05:25.720
那就是一个图片就这么宽了

05:25.720 --> 05:27.720
因为它富龙器这么宽

05:28.720 --> 05:30.720
好那么宽高设置好了过后

05:30.720 --> 05:31.720
这个图片呢有些地方会被

05:31.720 --> 05:32.720
感觉上被拉伸了

05:32.720 --> 05:33.720
所以说我给它设置一个

05:33.720 --> 05:35.720
object fit cover

05:35.720 --> 05:37.720
对吧我们补充过的

05:38.720 --> 05:40.720
好那么目前的一图片呢

05:40.720 --> 05:42.720
它肯定是

05:42.720 --> 05:44.720
我们还要把它进行左浮动

05:44.720 --> 05:46.720
对不对

05:46.720 --> 05:48.720
其实这个时候

05:48.720 --> 05:50.720
你把这个overflow heighten去掉

05:50.720 --> 05:52.720
就可以看到很清楚了

05:52.720 --> 05:54.720
我再给它加上一个outline边框吧

05:54.720 --> 05:56.720
两个像是solid

05:56.720 --> 05:57.720
看到没

05:57.720 --> 05:59.720
我给它加上一个

05:59.720 --> 06:03.220
nise blue

06:03.220 --> 06:04.220
看到没这个边框

06:04.220 --> 06:06.220
这是我们的富龙器

06:06.220 --> 06:07.220
整个龙器

06:07.220 --> 06:09.220
然后艺术部分是不是变成这个样子的

06:09.220 --> 06:10.220
对吧

06:10.220 --> 06:12.220
到时候我们就可以调整

06:12.220 --> 06:14.220
这个carolist margin left

06:14.220 --> 06:16.220
就可以来进行控制了

06:16.220 --> 06:18.220
好吧这是这一块

06:22.520 --> 06:24.520
好那么这个区域其实就没了

06:24.520 --> 06:26.520
然后接下来是指示器

06:26.520 --> 06:28.520
指示器的话indicator

06:28.520 --> 06:32.660
这个指示器的话

06:32.660 --> 06:33.660
我们把它进行绝对定位

06:33.660 --> 06:35.660
那么这个指觉负箱

06:35.660 --> 06:36.660
所以说它的复原数

06:36.660 --> 06:38.660
我们把它设为相对定位

06:43.280 --> 06:44.280
好它绝对定位之后呢

06:44.280 --> 06:46.280
我们它的它的宽度呢是100%

06:47.280 --> 06:49.280
我们把它定到它的

06:49.280 --> 06:51.280
下边于synapt0

06:51.280 --> 06:53.280
button0

06:54.280 --> 06:55.280
把它定到下边

06:55.280 --> 06:57.280
给它设置一个高度

06:59.280 --> 07:01.280
高度的话给它设置个30个相数

07:01.280 --> 07:03.280
然后给它设置个背景颜色

07:03.280 --> 07:04.280
你看一下啊

07:04.280 --> 07:08.890
看不见吗

07:09.890 --> 07:11.890
高度30个相数

07:11.890 --> 07:13.890
宽度100%

07:13.890 --> 07:15.890
看不见当我们这里要调试一下了

07:15.890 --> 07:17.890
这到底是怎么回事

07:18.890 --> 07:20.890
找到原数这一块

07:20.890 --> 07:22.890
然后找到这个indicator

07:22.890 --> 07:24.890
button0

07:24.890 --> 07:26.890
现在实际上是有的

07:26.890 --> 07:28.890
你看这是个容器

07:28.890 --> 07:29.890
容器里边有一个

07:29.890 --> 07:30.890
下边这个部分

07:30.890 --> 07:32.890
下面这个部分是不是盖住了

07:32.890 --> 07:33.890
只能它把图片遮住了

07:33.890 --> 07:34.890
好像是里边没有啊

07:34.890 --> 07:35.890
实际上是有的

07:35.890 --> 07:37.890
比方说给它一个红色吧

07:37.890 --> 07:41.330
你看是不是在这儿

07:41.330 --> 07:42.330
对不对

07:42.330 --> 07:44.330
然后它里边呢

07:44.330 --> 07:46.330
有很多的指示箱

07:46.330 --> 07:47.330
indicator

07:47.330 --> 07:48.330
byton

07:48.330 --> 07:49.330
指示箱

07:49.330 --> 07:50.330
指示箱的话

07:50.330 --> 07:52.330
我们就把每一个DIV

07:52.330 --> 07:53.330
设为一个航空块盒

07:53.330 --> 07:55.330
为什么要去设成航空块盒呢

07:55.330 --> 07:57.330
是因为我便于居中

07:57.330 --> 07:58.330
它在附容器里边

07:58.330 --> 07:59.330
我们只需要通过一个

07:59.330 --> 08:00.330
take12

08:00.330 --> 08:02.330
center就可以居中

08:02.330 --> 08:03.330
变成航空块盒之后

08:03.330 --> 08:05.330
我们给它设置一个宽度

08:05.330 --> 08:06.330
宽度的话就

08:06.330 --> 08:07.330
比较30个相数

08:07.330 --> 08:08.330
高度的话

08:08.330 --> 08:10.330
两个相数吧

08:10.330 --> 08:11.330
一个背景颜色白色

08:13.330 --> 08:14.330
你看不见在这儿了吗

08:14.330 --> 08:16.330
宽度好像有点宽

08:17.330 --> 08:18.330
20个相数

08:19.330 --> 08:20.330
就在这儿了

08:20.330 --> 08:22.330
然后给它设置一个cursor pointer

08:22.330 --> 08:23.330
这数标样式

08:23.330 --> 08:24.330
以上去的就是一个小手

08:26.330 --> 08:27.330
没问题吧

08:27.330 --> 08:28.330
好那么这里呢

08:28.330 --> 08:29.330
我们就

08:29.330 --> 08:30.330
做完了

08:30.330 --> 08:32.330
把这个红色背景去掉

08:32.330 --> 08:34.330
是不是这个就出来了

08:35.330 --> 08:36.330
然后这里边

08:36.330 --> 08:37.330
会有一个激活样式

08:37.330 --> 08:38.330
就是

08:38.330 --> 08:40.330
它有可能被选中的效果

08:40.330 --> 08:41.330
如果它同时

08:41.330 --> 08:43.330
带到这个那样式的话

08:43.330 --> 08:44.330
那么它的背景颜色

08:44.330 --> 08:45.330
稍微改一下就完事了

08:45.330 --> 08:47.330
改成

08:47.330 --> 08:48.330
改成啥呀

08:48.330 --> 08:49.330
随便

08:49.330 --> 08:50.330
这个我人不用去纠结

08:50.330 --> 08:51.330
改成

08:51.330 --> 08:52.330
调一下吧

08:52.330 --> 08:53.330
调一下这个颜色

08:57.180 --> 08:58.180
稍微偏红一点吧

09:01.520 --> 09:02.520
差不多了

09:02.520 --> 09:03.520
改成这个颜色

09:03.520 --> 09:04.520
好了那么

09:04.520 --> 09:05.520
指示器

09:05.520 --> 09:06.520
这个区域就做完了

09:06.520 --> 09:08.520
接下来是箭头区域

09:08.520 --> 09:09.520
箭头区域

09:09.520 --> 09:10.520
这两个区域

09:10.520 --> 09:12.520
其实有很多相似的样式

09:12.520 --> 09:13.520
对吧

09:13.520 --> 09:14.520
这左右两个箭头

09:14.520 --> 09:16.520
就这个左右两个箭头区域

09:16.520 --> 09:18.520
有很多相似的样式

09:18.520 --> 09:19.520
所以说我们这里

09:19.520 --> 09:20.520
把一个相同的样式

09:20.520 --> 09:21.520
来进行统一处理

09:21.520 --> 09:23.520
它们无非不同的就是

09:23.520 --> 09:24.520
一个里边是左箭头

09:24.520 --> 09:26.520
一个里边是右箭头

09:26.520 --> 09:27.520
然后一个在左边

09:27.520 --> 09:28.520
一个在右边

09:28.520 --> 09:29.520
其他都是一样的

09:29.520 --> 09:30.520
所以说它们有共同的样式

09:30.520 --> 09:32.520
也有自己特别的地方

09:32.520 --> 09:33.520
那么这里我们就找到

09:33.520 --> 09:36.520
这个I-ROR left

09:37.520 --> 09:41.520
找到一个I-ROR right

09:41.520 --> 09:42.520
就这两个样式

09:42.520 --> 09:44.520
它们有相同的

09:44.520 --> 09:46.520
同时它们也有不同的

09:46.520 --> 09:47.520
I-ROR left

09:49.830 --> 09:51.830
I-ROR right

09:51.830 --> 09:52.830
我们相同的和不同的

09:52.830 --> 09:53.830
都去设一下

09:53.830 --> 09:55.830
那么它们不同

09:55.830 --> 09:57.830
它们相同的地方在哪呢

09:57.830 --> 09:59.830
它们都是绝对进位

09:59.830 --> 10:03.800
然后的话

10:03.800 --> 10:05.800
它们都有一个宽度

10:05.800 --> 10:08.800
宽度的话比方说

10:08.800 --> 10:10.800
50个像素

10:10.800 --> 10:11.800
随便设一下吧

10:11.800 --> 10:12.800
它们都有一个高度

10:12.800 --> 10:14.800
高度是百分之百

10:15.800 --> 10:16.800
它们都有个坐标

10:16.800 --> 10:17.800
坐标的话

10:17.800 --> 10:18.800
top都是0

10:18.800 --> 10:19.800
但是呢

10:19.800 --> 10:20.800
一个靠左一个靠右

10:20.800 --> 10:21.800
说说这边呢

10:21.800 --> 10:22.800
它的left是0

10:22.800 --> 10:23.800
这边呢

10:23.800 --> 10:24.800
它的right是0

10:27.120 --> 10:28.120
然后它们都有

10:28.120 --> 10:29.120
同时有一个背景颜色

10:29.120 --> 10:30.120
背景颜色是一个

10:30.120 --> 10:31.120
半透明的黑色

10:36.390 --> 10:37.390
是不是

10:37.390 --> 10:38.390
这个区域就出来了

10:38.390 --> 10:39.390
然后它们一个

10:39.390 --> 10:40.390
鼠标样式

10:40.390 --> 10:41.390
就是鼠标样式

10:42.390 --> 10:44.390
只不过在区体的效果里边

10:44.390 --> 10:46.390
它们一开始是看不见的

10:46.390 --> 10:48.390
然后鼠标移上去

10:48.390 --> 10:49.390
过后才看得见

10:49.390 --> 10:50.390
那么这个玩意

10:50.390 --> 10:51.390
是怎么做的呢

10:51.390 --> 10:52.390
我是做了这么一个处理

10:52.390 --> 10:53.390
我给它设这个opacity

10:53.390 --> 10:54.390
就整体透明度

10:55.390 --> 10:56.390
刚才那个只是背景吗

10:56.390 --> 10:57.390
这是个整体透明度

10:57.390 --> 10:58.390
整体透明度呢

10:58.390 --> 10:59.390
一开始为0

11:00.390 --> 11:02.390
然后鼠标移上去之后呢

11:02.390 --> 11:04.390
再设置好玩的效果

11:07.280 --> 11:08.280
鼠标移上去过后呢

11:08.280 --> 11:09.280
把opacity设为1

11:11.840 --> 11:12.840
就出现这样的效果了

11:13.840 --> 11:15.840
那里边的那个箭头

11:15.840 --> 11:17.840
箭头我这里没有用图片

11:17.840 --> 11:18.840
我就用的是一个

11:19.840 --> 11:20.840
用的是一个文字

11:20.840 --> 11:21.840
那我这边呢

11:21.840 --> 11:22.840
就可以利用那个

11:23.840 --> 11:24.840
委员数吧

11:25.840 --> 11:26.840
b4

11:27.840 --> 11:28.840
它里边的委员数呢

11:28.840 --> 11:29.840
是一个

11:29.840 --> 11:31.840
左边的委员数是一个小鱼

11:31.840 --> 11:32.840
然后呢

11:32.840 --> 11:33.840
右边的委员数呢

11:33.840 --> 11:34.840
你看左边委员数

11:35.840 --> 11:37.840
把字体颜色给它设置一下

11:37.840 --> 11:38.840
字体设为白色吧

11:39.840 --> 11:40.840
你看说一个小鱼

11:40.840 --> 11:42.840
然后右边的委员数呢

11:42.840 --> 11:44.840
我给它设为大鱼

11:44.840 --> 11:51.230
左边小鱼大鱼

11:52.230 --> 11:53.230
为了让我们摄像师

11:53.230 --> 11:54.230
设的方便我先暂时

11:54.230 --> 11:56.230
把这个opacity为0去掉

11:57.230 --> 11:58.230
那现在就要去中了

11:58.230 --> 11:59.230
这个玩意要去中

11:59.230 --> 12:01.230
那这个玩意又怎么去去中呢

12:01.230 --> 12:03.230
我们可以利用绝对定位

12:03.230 --> 12:04.230
对吧

12:04.230 --> 12:05.230
把他这个玩意

12:05.230 --> 12:06.230
就是这个委员数

12:06.230 --> 12:07.230
变成绝对定位

12:07.230 --> 12:08.230
然后进行去中

12:09.230 --> 12:10.230
绝对定位元素

12:10.230 --> 12:11.230
在他的复合字里边

12:11.230 --> 12:12.230
去中

12:12.230 --> 12:14.230
这个玩意应该大家补陌生

12:14.230 --> 12:16.230
所以我们这里统一设置的

12:16.230 --> 12:17.230
因为这个文字

12:17.230 --> 12:18.230
跟这个文字

12:18.230 --> 12:19.230
都是要在复合字里边

12:20.230 --> 12:21.230
去中

12:21.230 --> 12:22.230
那么就统一设置

12:23.230 --> 12:25.230
统一设置一下这个b4

12:25.230 --> 12:26.230
和这个right b4

12:27.230 --> 12:29.230
他们都是绝对定位

12:32.240 --> 12:33.240
这个

12:33.240 --> 12:34.240
其实这个

12:35.240 --> 12:36.240
委员数

12:36.240 --> 12:37.240
他就是一个普通元素而已

12:37.240 --> 12:38.240
你看

12:38.240 --> 12:39.240
你把它当成

12:39.240 --> 12:40.240
当成外面合适的

12:40.240 --> 12:41.240
指引元素就可以了

12:43.240 --> 12:44.240
绝对定位

12:44.240 --> 12:45.240
然后

12:45.240 --> 12:47.240
neft为0

12:47.240 --> 12:50.940
宽度为100%

12:50.940 --> 12:51.940
这样子的话

12:51.940 --> 12:52.940
我们给他

12:52.940 --> 12:53.940
设置个背景

12:53.940 --> 12:54.940
就看得清楚了

12:54.940 --> 12:55.940
给他设置个背景

12:55.940 --> 12:56.940
f10吧

12:56.940 --> 12:58.940
然后他里边的文字

12:58.940 --> 13:00.940
影像局中

13:01.940 --> 13:02.940
center

13:02.940 --> 13:04.940
文字局中了

13:04.940 --> 13:06.940
然后他本身要垂直居中

13:06.940 --> 13:07.940
本身如何垂直居中呢

13:07.940 --> 13:08.940
我们给他设置

13:09.940 --> 13:10.940
top0

13:10.940 --> 13:12.940
然后button0

13:13.940 --> 13:15.940
这样子的话

13:15.940 --> 13:17.940
由于他一边要靠顶

13:17.940 --> 13:18.940
一边要靠到顶部

13:18.940 --> 13:20.940
一边又要靠到底部

13:20.940 --> 13:21.940
他逼不得已

13:21.940 --> 13:23.940
就把这个高度就拿上了

13:23.940 --> 13:24.940
懂得意思吧

13:24.940 --> 13:26.940
这应该大家都知道

13:26.940 --> 13:27.940
一边要靠顶

13:27.940 --> 13:28.940
一边又要靠底

13:28.940 --> 13:30.940
就导致他把高度就拿上了

13:30.940 --> 13:31.940
就拿上满了

13:31.940 --> 13:33.940
然后但是我这里

13:33.940 --> 13:35.940
做这么一件事

13:35.940 --> 13:37.940
把高度给他限制死

13:37.940 --> 13:39.940
比方说给他限制一个30的高度

13:39.940 --> 13:41.940
给他设置个男孩子

13:41.940 --> 13:42.940
30

13:42.940 --> 13:44.940
保证文字在他内部局中

13:44.940 --> 13:45.940
那么这又是什么情况呢

13:45.940 --> 13:47.940
你看他要靠顶

13:47.940 --> 13:48.940
又要靠底

13:48.940 --> 13:50.940
高度又不能拿升

13:51.940 --> 13:52.940
逼的他没办法了

13:52.940 --> 13:54.940
他只能忽略掉

13:54.940 --> 13:56.940
其中一个top有效

13:56.940 --> 13:57.940
很失效

13:57.940 --> 13:59.940
就这个东西就相当于失效了

13:59.940 --> 14:00.940
因为他没办法

14:00.940 --> 14:01.940
逼到绝路了

14:01.940 --> 14:02.940
你上边要靠顶

14:02.940 --> 14:03.940
下边又要靠顶

14:03.940 --> 14:05.940
又不准够拿升高度

14:05.940 --> 14:06.940
他没办法

14:06.940 --> 14:07.940
但是我现在给他一个出路

14:07.940 --> 14:08.940
就是margin

14:08.940 --> 14:10.940
给他设为out

14:10.940 --> 14:11.940
左右都无所谓

14:11.940 --> 14:13.940
主要是上下设为out

14:13.940 --> 14:14.940
那么他就有

14:14.940 --> 14:15.940
他这个时候他又有

14:15.940 --> 14:16.940
他又可以有出路了

14:16.940 --> 14:18.940
因为margin有out

14:18.940 --> 14:19.940
我们知道合模型里边

14:19.940 --> 14:21.940
是有多个部分组成的

14:21.940 --> 14:22.940
除了他内容部分

14:22.940 --> 14:23.940
盘点board之外

14:23.940 --> 14:25.940
那么他就可以用margin去填充

14:25.940 --> 14:27.940
这部分就是填充margin

14:27.940 --> 14:28.940
我们用这种方式

14:28.940 --> 14:29.940
用这种方式来看的话

14:29.940 --> 14:30.940
看得非常清楚

14:30.940 --> 14:31.940
你看

14:31.940 --> 14:32.940
黄色的部分

14:32.940 --> 14:34.940
是不是就是他的margin

14:34.940 --> 14:35.940
他上边是不是靠顶了

14:35.940 --> 14:37.940
下边是不是靠底了

14:37.940 --> 14:38.940
对不对

14:38.940 --> 14:39.940
高度也是固定的

14:39.940 --> 14:40.940
是不是都满足了

14:40.940 --> 14:41.940
一个margin设为out

14:41.940 --> 14:42.940
他就会用margin

14:42.940 --> 14:44.940
去填充上下

14:44.940 --> 14:46.940
这是一种居动方式

14:46.940 --> 14:47.940
当然还有一些

14:47.940 --> 14:48.940
别的居动方式

14:48.940 --> 14:50.940
比方说你可以用这种方式

14:50.940 --> 14:52.940
top50%

14:52.940 --> 14:53.940
button我不设置

14:53.940 --> 14:54.940
我也不去设置

14:54.940 --> 14:56.940
margin out

14:56.940 --> 14:57.940
那么这样子

14:57.940 --> 15:03.940
他这个边

15:03.940 --> 15:05.940
他这个边

15:05.940 --> 15:06.940
那么就是50%

15:06.940 --> 15:08.940
然后我再把用margin top

15:08.940 --> 15:09.940
往上移动

15:09.940 --> 15:11.940
他高度的一半

15:11.940 --> 15:14.940
那么我就再设置一个margin top

15:14.940 --> 15:15.940
高度的一半就是

15:15.940 --> 15:17.940
附的15个相处

15:17.940 --> 15:18.940
这样他也能去中

15:18.940 --> 15:19.940
最后我们把背景

15:19.940 --> 15:20.940
他去掉

15:20.940 --> 15:21.940
都行

15:21.940 --> 15:22.940
看你有哪种去中方式

15:22.940 --> 15:23.940
那么目前

15:23.940 --> 15:25.940
静态页面和

15:25.940 --> 15:26.940
样式代码

15:26.940 --> 15:27.940
我们就写完了

15:27.940 --> 15:28.940
怎么样

15:28.940 --> 15:29.940
朋友们可以去参考一下

15:29.940 --> 15:30.940
自己写的

15:30.940 --> 15:31.940
和我的

15:31.940 --> 15:33.940
去做一些对比

15:33.940 --> 15:35.940
接下来我们开始写

15:35.940 --> 15:36.940
这个js

15:36.940 --> 15:42.470
js

15:42.470 --> 15:43.470
在写js的时候

15:43.470 --> 15:45.470
我们打开这个示意图

15:45.470 --> 15:49.040
我给他写个图

15:49.040 --> 15:54.140
回到js

15:54.140 --> 15:55.140
js分的两个部分

15:55.140 --> 15:56.140
一个部分是初始化

15:56.140 --> 15:58.140
就是一开始要做的事情

15:58.140 --> 16:00.140
一个部分是交互

16:00.140 --> 16:01.140
就是我用户

16:01.140 --> 16:02.140
操作要做的事情

16:02.140 --> 16:04.140
那么我们首先来搞定初始化

16:05.140 --> 16:06.140
初始化的时候

16:06.140 --> 16:07.140
我刚才说

16:07.140 --> 16:08.140
我们之前分析的

16:08.140 --> 16:09.140
之前分析的我就

16:09.140 --> 16:11.140
不再一一重新分析了

16:11.140 --> 16:12.140
我们需要一个

16:12.140 --> 16:13.140
权具变量

16:15.140 --> 16:16.140
这个权具变量

16:16.140 --> 16:17.140
要记录

16:17.140 --> 16:20.140
当前显示的是

16:20.140 --> 16:22.140
第几张图片

16:22.140 --> 16:23.140
你看当前

16:24.140 --> 16:25.140
现在一开始

16:25.140 --> 16:26.140
要显示的是

16:26.140 --> 16:27.140
第一张图片

16:27.140 --> 16:29.140
这个东西在可视区域内

16:29.140 --> 16:31.140
就像目前这个图片

16:31.140 --> 16:32.140
在可视区域内

16:32.140 --> 16:33.140
目前又是显示的

16:33.140 --> 16:34.140
第一张图片

16:34.140 --> 16:35.140
那么这个

16:35.140 --> 16:36.140
Curring那个时候就等于零

16:36.140 --> 16:37.140
总的意思吧

16:37.140 --> 16:38.140
那么一会要显示到

16:38.140 --> 16:39.140
第二张的话

16:39.140 --> 16:40.140
那么这个Curring那个时候

16:40.140 --> 16:41.140
就会变化

16:41.140 --> 16:42.140
变化到一

16:42.140 --> 16:44.140
就是通过这个东西来记录

16:44.140 --> 16:45.140
当前显示的是

16:45.140 --> 16:46.140
第几张图片

16:47.140 --> 16:48.140
接下来我们需要一个

16:48.140 --> 16:50.140
函数叫做Innance函数

16:50.140 --> 16:51.140
这个函数

16:51.140 --> 16:52.140
它要做的一件事情

16:52.140 --> 16:53.140
就是初始化

16:53.140 --> 16:55.140
整个我们网页的

16:55.140 --> 16:56.140
就一开始要做的事情

16:56.140 --> 16:57.140
那么这里边

16:57.140 --> 16:58.140
我们之前分析

16:58.140 --> 17:00.140
是有这么四件事情要做

17:00.140 --> 17:01.140
而写到这的话

17:01.140 --> 17:03.140
我就想了一个小细节

17:03.140 --> 17:04.140
我想啊

17:04.140 --> 17:05.140
这个网页里边

17:05.140 --> 17:07.140
肯定要操作很多元素

17:07.140 --> 17:08.140
对不对

17:08.140 --> 17:10.140
包括这个容器啊

17:10.140 --> 17:11.140
包括这个什么

17:11.140 --> 17:12.140
左键头啊

17:12.140 --> 17:13.140
右键头啊

17:13.140 --> 17:14.140
包括这个指示器啊

17:14.140 --> 17:16.140
包括这个图片容器的

17:16.140 --> 17:17.140
这个元素啊

17:17.140 --> 17:19.140
我总是需要很多的元素

17:19.140 --> 17:21.140
那么这里一个小技巧

17:21.140 --> 17:23.140
如果说我用一个变量

17:23.140 --> 17:25.140
一个变量去得到这些元素

17:25.140 --> 17:27.140
就会产生很多的变量

17:27.140 --> 17:28.140
因为我们这里需要

17:28.140 --> 17:29.140
很多的元素嘛

17:29.140 --> 17:30.140
就会产生很多的变量

17:30.140 --> 17:32.140
那么这些变量多了呢

17:32.140 --> 17:33.140
一是呢

17:33.140 --> 17:34.140
我们不太记得

17:34.140 --> 17:36.140
清楚这些变量的名字

17:36.140 --> 17:37.140
第二呢

17:37.140 --> 17:39.140
又会导致

17:39.140 --> 17:41.140
有可能会产生命名冲突

17:41.140 --> 17:42.140
所以说呢

17:42.140 --> 17:43.140
我干脆就这样子

17:43.140 --> 17:44.140
用这种方式

17:44.140 --> 17:46.140
我把它写成一个对象

17:46.140 --> 17:48.140
变量的名字叫做DOM

17:48.140 --> 17:49.140
这里边会集了

17:49.140 --> 17:52.140
所有我们需要用到的DOM

17:52.140 --> 17:53.140
我就全部写到这儿

17:53.140 --> 17:54.140
每个DOM

17:54.140 --> 17:55.140
就它的一个属性

17:55.140 --> 17:56.140
到时候呢

17:56.140 --> 17:57.140
我要需要某一个DOM的时候

17:57.140 --> 17:59.140
我就不用去寄那么多名字

17:59.140 --> 18:00.140
我只需要去打出DOM

18:00.140 --> 18:02.140
里面就根据它的智能提示

18:02.140 --> 18:04.140
去找我们想要的元素就可以了

18:04.140 --> 18:06.140
这是一个小技巧

18:06.140 --> 18:08.140
DOM是里面我们找到

18:08.140 --> 18:10.140
可能会用到的元素

18:10.140 --> 18:11.140
比方说整个容器

18:11.140 --> 18:13.140
给它一个container

18:13.140 --> 18:15.140
Document

18:15.140 --> 18:17.140
Private Snaggert

18:17.140 --> 18:18.140
那么这里边呢

18:18.140 --> 18:20.140
又会涉及到一个小的技巧

18:20.140 --> 18:21.140
就是我们这边

18:21.140 --> 18:22.140
可能会用到

18:22.140 --> 18:24.140
很多个这么一个Document

18:24.140 --> 18:25.140
Private Snaggert

18:25.140 --> 18:26.140
就很烦的

18:26.140 --> 18:27.140
每次要写一大堆

18:27.140 --> 18:28.140
所以说呢

18:28.140 --> 18:29.140
我想把这个函数简化一下

18:29.140 --> 18:31.140
要简化的方式

18:31.140 --> 18:32.140
也特别简单

18:32.140 --> 18:34.140
我就自己封装这么一个函数

18:34.140 --> 18:36.140
这个函数名字就该取得多了

18:36.140 --> 18:37.140
为什么要取个名字

18:37.140 --> 18:38.140
这个名字

18:38.140 --> 18:39.140
但是我是随便取的

18:39.140 --> 18:40.140
我就取得多了

18:40.140 --> 18:41.140
然后里面呢

18:41.140 --> 18:42.140
给我传一个选择器

18:42.140 --> 18:45.140
我就帮你选中

18:45.140 --> 18:46.140
这些元素

18:46.140 --> 18:47.140
就是把这个函数

18:47.140 --> 18:48.140
稍微封装一下

18:48.140 --> 18:49.140
这样子呢

18:49.140 --> 18:50.140
我到时候用这个函数的时候

18:50.140 --> 18:52.140
就用得非常舒服方便的

18:52.140 --> 18:53.140
好

18:53.140 --> 18:54.140
这是container

18:54.140 --> 18:55.140
那么除了这个container之外呢

18:55.140 --> 18:56.140
还需要这个元素

18:56.140 --> 18:59.580
carolist

18:59.580 --> 19:04.210
arrow cell list

19:04.210 --> 19:05.210
这是这个

19:05.210 --> 19:06.210
然后除了它之外呢

19:06.210 --> 19:11.800
我们还需要这个indicator

19:11.800 --> 19:15.800
我们还需要

19:15.800 --> 19:17.800
arrow

19:17.800 --> 19:18.800
箭头

19:18.800 --> 19:19.800
这个箭头的话

19:19.800 --> 19:20.800
它的容器我倒是不需要

19:20.800 --> 19:22.800
我需要它的左箭头和右箭头

19:22.800 --> 19:23.800
所以说

19:23.800 --> 19:26.800
我这边直接

19:26.800 --> 19:28.800
arrow left

19:28.800 --> 19:29.800
arrow left

19:29.800 --> 19:30.800
我看这个结构里边

19:30.800 --> 19:32.800
这个东西好像没什么用的

19:32.800 --> 19:33.800
没什么用算了吧

19:33.800 --> 19:35.800
关它的

19:35.800 --> 19:38.800
arrow right

19:38.800 --> 19:41.240
arrow right

19:41.240 --> 19:42.240
好

19:42.240 --> 19:43.240
我需要这么一些动物

19:43.240 --> 19:44.240
还有吗

19:44.240 --> 19:46.240
好像没了

19:46.240 --> 19:47.240
OK

19:47.240 --> 19:48.240
那么这是我们需要的动物元素

19:48.240 --> 19:51.240
我们都把它过去到

19:51.240 --> 19:52.240
就是这里边

19:52.240 --> 19:54.240
跟它那样是对应的

19:54.240 --> 19:56.240
所以说我这里难得它出事了

19:56.240 --> 19:57.240
好 现在我们再回到这个函数里边

19:57.240 --> 19:59.240
这个函数要做啥事呢

19:59.240 --> 20:01.240
肯定要调用

20:01.240 --> 20:02.240
要做啥事呢

20:02.240 --> 20:03.240
这个函数

20:03.240 --> 20:05.240
一线一线来

20:05.240 --> 20:06.240
首先是创建图片

20:06.240 --> 20:07.240
也就是我们页面上

20:07.240 --> 20:09.240
这里实际上是没有图片的

20:09.240 --> 20:11.240
是没有这些元素的

20:11.240 --> 20:12.240
这只是戏也没有

20:12.240 --> 20:14.240
都需要靠介石来创建

20:14.240 --> 20:16.240
这些是我把这个

20:16.240 --> 20:20.710
我拍这里加上

20:20.710 --> 20:21.710
需要靠介石来创建

20:21.710 --> 20:22.710
那么这里设计了一个问题

20:22.710 --> 20:25.710
介石它要根据什么创建呢

20:25.710 --> 20:27.710
首先为什么要用介石来创建

20:27.710 --> 20:29.710
便于维护

20:29.710 --> 20:30.710
将来如果说不是四张图

20:30.710 --> 20:31.710
不是三张图

20:31.710 --> 20:32.710
是四张图

20:32.710 --> 20:33.710
是五张图

20:33.710 --> 20:34.710
我们只需要去改变介石

20:34.710 --> 20:35.710
一个数组就完成了

20:35.710 --> 20:37.710
因此我们这里就需要一个数组

20:37.710 --> 20:39.710
这个数组里边去记录了

20:39.710 --> 20:41.710
我们要显示的

20:41.710 --> 20:43.710
轮波图的图片

20:43.710 --> 20:45.710
对吧 我们用AMG 是吧

20:45.710 --> 20:47.710
这是

20:48.710 --> 20:50.710
或者叫URLS

20:51.710 --> 20:53.710
这是记录了

20:53.710 --> 20:54.710
要显示的

20:54.710 --> 20:58.710
所有轮波图的图片

20:58.710 --> 21:00.710
路径

21:00.710 --> 21:02.710
这就是个制伏刷数组

21:02.710 --> 21:04.710
我这个制伏刷数组稍微写一下

21:04.710 --> 21:05.710
AMG

21:05.710 --> 21:07.710
我

21:08.710 --> 21:10.710
paper

21:10.710 --> 21:11.710
一

21:11.710 --> 21:14.850
五张

21:15.850 --> 21:16.850
二

21:16.850 --> 21:17.850
三

21:17.850 --> 21:18.850
四

21:19.850 --> 21:22.850
将来如果说我要去改变轮波图的话

21:22.850 --> 21:23.850
我只需要去改这个数组

21:23.850 --> 21:24.850
其他啥都不用动

21:24.850 --> 21:25.850
我把这个数组一改

21:25.850 --> 21:27.850
整个轮波图就全部改完了

21:27.850 --> 21:28.850
那就非常的方便

21:28.850 --> 21:30.850
你也可以把这里替换成

21:30.850 --> 21:32.850
如果不想用我的图片

21:32.850 --> 21:33.850
你可以试一下

21:33.850 --> 21:34.850
最后写完之后

21:34.850 --> 21:37.850
你把这个图片替换成网络上的一些图片路径

21:37.850 --> 21:39.850
照样可以用

21:39.850 --> 21:42.850
那么回到这个音乐室函数

21:42.850 --> 21:44.850
接下来我们做的事情就更加明确了

21:44.850 --> 21:47.850
就一步一步就更加明确了

21:47.850 --> 21:48.850
我们要创建图片

21:48.850 --> 21:49.850
怎么来创建图片

21:49.850 --> 21:50.850
根据这个数组来创建的

21:50.850 --> 21:52.850
因此我们这里是要遍地数组

21:52.850 --> 21:54.850
数组里边有一项数据

21:54.850 --> 21:56.850
我就创建一张图片

21:57.850 --> 21:59.850
UiOS

22:03.160 --> 22:04.160
那么一是运行

22:04.160 --> 22:06.160
我们是不是可以拿到一个图片路径

22:06.160 --> 22:08.160
对吧

22:08.160 --> 22:09.160
拿到一个图片路径

22:09.160 --> 22:11.160
然后我们就可以根据这个图片路径

22:11.160 --> 22:12.160
来创建图片

22:12.160 --> 22:13.160
那如何创建图片呢

22:13.160 --> 22:17.120
Document

22:17.120 --> 22:19.120
CreateElement

22:19.120 --> 22:21.120
创建一个image元素

22:21.120 --> 22:24.810
然后可以给这个image元素

22:24.810 --> 22:26.810
设置一个src

22:26.810 --> 22:29.810
它的图片路径不就是这个UiOS吗

22:29.810 --> 22:31.810
然后把这个image元素加到哪去

22:31.810 --> 22:33.810
加到我们动物元素里边

22:33.810 --> 22:35.810
你看现在就很有智能提示了

22:35.810 --> 22:37.810
对吧

22:37.810 --> 22:39.810
KairosCelllist

22:39.810 --> 22:41.810
Append Child

22:41.810 --> 22:43.810
就加进去图片

22:43.810 --> 22:45.810
那么这里我们就加了很多图片进去

22:45.810 --> 22:48.810
不过我们目前加的图片是没有样式的

22:48.810 --> 22:51.810
所以我们这里要给图片加上一个class name

22:51.810 --> 22:52.810
一个内样式

22:52.810 --> 22:54.810
内样式是啥呢

22:54.810 --> 22:55.810
Kairos

22:55.810 --> 22:57.810
就是我们之前写的一个CSS里边的内样式

22:57.810 --> 22:59.810
KairosCell

22:59.810 --> 23:03.890
写错了

23:03.890 --> 23:05.890
好对了

23:05.890 --> 23:06.890
于是你看

23:06.890 --> 23:08.890
现在我们就利用了介石来

23:08.890 --> 23:11.890
创建了很多张图片加进去

23:11.890 --> 23:13.890
非常合理对不对

23:13.890 --> 23:16.890
好那么这里还又涉及到一个问题

23:16.890 --> 23:19.890
我除了把图片加进去之外

23:19.890 --> 23:21.890
我还要多加一张

23:21.890 --> 23:22.890
你看了没

23:22.890 --> 23:25.890
我这里说要多加一张图片最后

23:25.890 --> 23:27.890
是不是要多加一张

23:27.890 --> 23:28.890
那么这里呢

23:28.890 --> 23:31.890
我们就可以在循环结束之后

23:31.890 --> 23:35.890
再去创建多加一张额外的图片

23:35.890 --> 23:39.890
多加一张额外的图片

23:39.890 --> 23:41.890
额外的图片不就是

23:41.890 --> 23:43.890
这个输主的第一项吗

23:43.890 --> 23:44.890
根据输主的第一项

23:44.890 --> 23:47.890
再来创建一个图片加进去

23:47.890 --> 23:49.890
那么你想代码是不是又来一次

23:49.890 --> 23:50.890
这个代码

23:50.890 --> 23:52.890
是不是这里会有重复

23:52.890 --> 23:53.890
那么这里呢

23:53.890 --> 23:55.890
像这个函数内部的重复

23:55.890 --> 23:58.890
内部的单独去写这么一个指函数

23:58.890 --> 24:00.890
把这个指函数命名上了

24:00.890 --> 24:02.890
我们一般用一个下滑线开头

24:02.890 --> 24:03.890
就内部的函数

24:03.890 --> 24:06.890
来辅助完成功能

24:06.890 --> 24:07.890
那么这个函数

24:07.890 --> 24:09.890
应该取名字叫ChrisImage

24:09.890 --> 24:11.890
你给我传一个ULD纸

24:11.890 --> 24:13.890
我就把这个代码直接复制一下

24:13.890 --> 24:15.890
你给我传一个ULD纸

24:15.890 --> 24:17.890
然后我帮你创建一张图片

24:17.890 --> 24:18.890
夹到容器里边去

24:18.890 --> 24:20.890
有了这个函数帮忙之后

24:20.890 --> 24:22.890
那我这个代码就写下简单了

24:22.890 --> 24:24.890
你看是不是可以这样子写

24:24.890 --> 24:26.890
ULS

24:26.890 --> 24:27.890
是吧

24:27.890 --> 24:31.890
循环这个整个图片路径的数组

24:31.890 --> 24:34.890
然后每循环一次

24:34.890 --> 24:36.890
得到它的ULD纸传进去

24:36.890 --> 24:38.890
通过这个函数来创建图片

24:38.890 --> 24:39.890
夹到容器里边去

24:39.890 --> 24:40.890
有了这个函数帮忙

24:40.890 --> 24:42.890
我一会要额外创建一张图片

24:42.890 --> 24:43.890
那太简单了

24:43.890 --> 24:44.890
简单的不得了

24:44.890 --> 24:45.890
UL0

24:45.890 --> 24:46.890
对吧

24:46.890 --> 24:47.890
我就把这个

24:47.890 --> 24:49.890
第一个图片路径传进去

24:49.890 --> 24:50.890
根据第一个图片路径

24:50.890 --> 24:52.890
再重新创建一张图片

24:52.890 --> 24:53.890
对吧

24:53.890 --> 24:55.890
我们这里视觉上看不到效果

24:55.890 --> 24:57.890
但是我们看元素结构

24:57.890 --> 24:58.890
是不是出来了

24:58.890 --> 24:59.890
最后一张

24:59.890 --> 25:00.890
是不是

25:01.890 --> 25:02.890
而且非常方便

25:02.890 --> 25:05.890
这些都是开发的小细节小技巧

25:05.890 --> 25:07.890
那么图片创建其实就完了

25:07.890 --> 25:08.890
就没啥事了

25:08.890 --> 25:10.890
还要让它没啥事了

25:10.890 --> 25:13.890
还有一件事就是要设置容器宽度

25:13.890 --> 25:15.890
那么这边我来设置一下

25:15.890 --> 25:18.890
设置容器宽度

25:18.890 --> 25:21.890
就这个容器的宽度我要设置一下

25:22.890 --> 25:24.890
那么这个容器的宽度是多少呢

25:24.890 --> 25:26.890
目前它是用CSS设置的

25:26.890 --> 25:27.890
这个部分肯定不合理

25:27.890 --> 25:28.890
因为CSS里根本就不知道

25:28.890 --> 25:29.890
它有多少张图片

25:29.890 --> 25:31.890
那你看现在是不是有6张

25:31.890 --> 25:32.890
123456

25:32.890 --> 25:34.890
那么这个宽度应该6%

25:34.890 --> 25:36.890
所以说这个宽度设置其实非常简单

25:36.890 --> 25:38.890
我们只需要去设置DOM

25:38.890 --> 25:41.890
这个容器Style位置

25:41.890 --> 25:42.890
等于多少呢

25:42.890 --> 25:44.890
等于百分之多少

25:45.890 --> 25:46.890
百分之一百

25:46.890 --> 25:47.890
两百

25:47.890 --> 25:48.890
三百

25:48.890 --> 25:49.890
四百

25:49.890 --> 25:50.890
五百

25:51.890 --> 25:53.890
是不是就是

25:54.890 --> 25:56.890
英米奇元素的数量

25:57.890 --> 25:59.890
也就是它的指元素数量

25:59.890 --> 26:01.890
它指元素有多少个

26:01.890 --> 26:03.890
那么这里就写多少

26:03.890 --> 26:04.890
指元素是10个

26:04.890 --> 26:05.890
它这里就写10

26:05.890 --> 26:06.890
指元素是5个

26:06.890 --> 26:07.890
这里就写5

26:07.890 --> 26:09.890
前面就把图片都加完了

26:09.890 --> 26:10.890
所以说这里的问号位置

26:10.890 --> 26:11.890
我们去拼接

26:11.890 --> 26:12.890
怎么拼接

26:12.890 --> 26:13.890
就是DOMs

26:16.890 --> 26:17.890
分析出来了

26:17.890 --> 26:18.890
过后你就把它起成代

26:18.890 --> 26:19.890
那么现在问题就是

26:19.890 --> 26:20.890
怎么把它拨到

26:20.890 --> 26:22.890
指元素的数量呢

26:22.890 --> 26:23.890
就这个干嘛

26:23.890 --> 26:24.890
拼接上

26:24.890 --> 26:25.890
那么现在我们再来看

26:25.890 --> 26:27.890
它的宽度

26:29.890 --> 26:31.890
好像这里有点失效

26:33.890 --> 26:35.890
NAS加上百分之一百

26:36.890 --> 26:39.890
宽度设置无效

26:39.890 --> 26:40.890
这里报了一个错

26:40.890 --> 26:41.890
它说

26:41.890 --> 26:43.890
Carnature property

26:43.890 --> 26:44.890
NAS undefend

26:44.890 --> 26:46.890
这个错误也是经常看到的

26:46.890 --> 26:48.890
这个错误发生了根本远

26:48.890 --> 26:49.890
就是直接原因是

26:49.890 --> 26:50.890
因为你再尝试一个

26:50.890 --> 26:53.890
读一个undefend的认识属效

26:54.890 --> 26:55.890
那么我们看一下

26:55.890 --> 26:56.890
哪里在读认识

26:56.890 --> 26:57.890
不在这里读认识

26:58.890 --> 26:59.890
对不对

26:59.890 --> 27:00.890
那么这里读认识

27:00.890 --> 27:02.890
那么说明它这个东西是undefend

27:02.890 --> 27:03.890
那你就检查一下

27:03.890 --> 27:04.890
为什么是undefend

27:04.890 --> 27:05.890
原来是这里写错了

27:07.890 --> 27:09.890
这些错误都是非常正常的

27:09.890 --> 27:10.890
然后这里又报错了

27:10.890 --> 27:11.890
它还是说它是undefend

27:11.890 --> 27:12.890
那么这个时候呢

27:12.890 --> 27:16.890
你又可以打印一下

27:16.890 --> 27:18.890
打印一下这个东西到底是啥

27:18.890 --> 27:20.890
它为什么会变成undefend

27:22.890 --> 27:23.890
它倒是对的

27:23.890 --> 27:24.890
它是个动物元素

27:24.890 --> 27:25.890
那么再来检查一下

27:25.890 --> 27:27.890
敲下去还是写错了

27:27.890 --> 27:29.890
那么现在没问题了

27:30.890 --> 27:31.890
那边是里面

27:31.890 --> 27:32.890
你看是不是百分之六百

27:32.890 --> 27:33.890
就设置好了

27:34.890 --> 27:36.890
它会自己去设置宽度

27:37.890 --> 27:38.890
这个做完了

27:38.890 --> 27:39.890
第三个

27:39.890 --> 27:40.890
创建指示器

27:40.890 --> 27:42.890
就是下边这个东西了

27:42.890 --> 27:43.890
创建这个指示器

27:43.890 --> 27:45.890
那么这个指示器

27:45.890 --> 27:48.890
其实是不是有一个

27:48.890 --> 27:49.890
这个数组有多少像

27:49.890 --> 27:50.890
就有多少个指示器

27:51.890 --> 27:53.890
它跟那个图片的数量还不一致

27:53.890 --> 27:55.890
图片我要额外加一张

27:55.890 --> 27:57.890
但是指示器不会额外加一张

27:57.890 --> 27:58.890
不会额外加

27:58.890 --> 28:00.890
所以说我们就可以利用

28:00.890 --> 28:01.890
之前那个循环

28:01.890 --> 28:02.890
这里边我们第一步

28:02.890 --> 28:03.890
创建一个图片

28:03.890 --> 28:05.890
然后它同时创建一个指示器

28:06.890 --> 28:10.200
指示器无非也就是一个元素而已

28:11.200 --> 28:13.200
也就是个DIV

28:13.200 --> 28:15.200
所以我们创建一个DIV

28:15.200 --> 28:16.200
这个DIV

28:16.200 --> 28:18.200
内央式的名字叫做

28:18.200 --> 28:20.200
之前的内央式写的是啥

28:22.200 --> 28:24.200
indicator item

28:24.200 --> 28:28.480
然后把内央式

28:28.480 --> 28:30.480
把DIV加到哪儿呢

28:30.480 --> 28:32.480
加到DOMS

28:32.480 --> 28:34.480
indicator里边去

28:34.480 --> 28:35.480
加进去

28:35.480 --> 28:36.480
DOMS

28:36.480 --> 28:37.480
indicator

28:39.480 --> 28:41.790
指示器加进去了

28:41.790 --> 28:43.790
那么这里又出现一个问题

28:43.790 --> 28:44.790
刚才指示器里边

28:44.790 --> 28:45.790
之间是有建计的

28:45.790 --> 28:47.790
为什么现在没有建计的呢

28:48.790 --> 28:49.790
是因为刚才我们在

28:49.790 --> 28:50.790
静态一面这里

28:50.790 --> 28:52.790
就看有很多的细节

28:52.790 --> 28:54.790
就像我们整体的思路

28:54.790 --> 28:55.790
同了

28:55.790 --> 28:56.790
但是在做的过程中

28:56.790 --> 28:57.790
会遇到各种各样的

28:57.790 --> 28:58.790
小的一些困难

28:58.790 --> 28:59.790
那么也不用怕

28:59.790 --> 29:01.790
这些困难一个一个解决

29:01.790 --> 29:03.790
当你慢慢写代码写多了的话

29:03.790 --> 29:04.790
这些问题

29:04.790 --> 29:05.790
到时候一看就知道

29:05.790 --> 29:06.790
是什么回事了

29:06.790 --> 29:07.790
为什么它这里又没有建计呢

29:07.790 --> 29:08.790
是因为这里表

29:08.790 --> 29:10.790
我们之前写代码的时候

29:10.790 --> 29:11.790
是这样子写的

29:11.790 --> 29:14.790
indicator item

29:14.790 --> 29:15.790
成一个3

29:15.790 --> 29:16.790
之前是这样子写的

29:16.790 --> 29:17.790
这样子写的话

29:17.790 --> 29:18.790
在我们原代码里边

29:18.790 --> 29:19.790
是有换行的

29:19.790 --> 29:20.790
你看到没

29:20.790 --> 29:21.790
是有换行的

29:21.790 --> 29:23.790
就是DIV之间是有空白的

29:23.790 --> 29:24.790
那么在我们的

29:24.790 --> 29:25.790
CSS规则里边

29:25.790 --> 29:27.790
它有空白折叠

29:27.790 --> 29:28.790
就是你多个空白了

29:28.790 --> 29:30.790
它会被折叠成一个空格

29:30.790 --> 29:32.790
因此我们之前看到的

29:32.790 --> 29:34.790
它之所以有这些空隙

29:34.790 --> 29:35.790
是因为它中间

29:35.790 --> 29:37.790
它是一个空格

29:37.790 --> 29:38.790
懂得意思吗

29:38.790 --> 29:39.790
是一个空格造成的

29:39.790 --> 29:40.790
那我们现在用

29:40.790 --> 29:41.790
GS创建元素过后

29:41.790 --> 29:42.790
一个加进去

29:42.790 --> 29:43.790
它中间就没有空格了

29:43.790 --> 29:44.790
所以它就连成一片的

29:44.790 --> 29:46.790
这也是为什么

29:46.790 --> 29:49.790
很多时候我们都非常不推荐

29:49.790 --> 29:51.790
使用航河

29:51.790 --> 29:52.790
就是为了并排显示

29:52.790 --> 29:55.790
我们使用航河和航快河去布局

29:55.790 --> 29:56.790
我们不是很推荐

29:56.790 --> 29:57.790
然后跟妹妹就在这儿

29:57.790 --> 29:59.790
非常麻烦

29:59.790 --> 30:01.790
那怎么弄的这个事情

30:01.790 --> 30:03.790
将来我们以后学了CSS

30:03.790 --> 30:06.790
有非常非常舒服的布局方式

30:06.790 --> 30:07.790
要弹性和

30:07.790 --> 30:09.790
和网络布局

30:09.790 --> 30:10.790
那就到时就彻底抛弃

30:10.790 --> 30:11.790
什么航快河

30:11.790 --> 30:13.790
什么浮动布局都抛弃掉了

30:13.790 --> 30:14.790
但是一些早期的东西

30:14.790 --> 30:16.790
我们也要知道

30:16.790 --> 30:17.790
现在不用管它

30:17.790 --> 30:19.790
我们现在怎么解决

30:19.790 --> 30:20.790
我们就简单处理一下

30:20.790 --> 30:22.790
我们就当它没有换

30:22.790 --> 30:24.790
就当它没有空白这点

30:24.790 --> 30:25.790
当它没有换

30:25.790 --> 30:26.790
我们就这样处理

30:26.790 --> 30:27.790
那么我们就在

30:27.790 --> 30:30.790
indicatoritem这里写个margin

30:30.790 --> 30:31.790
上下来为0

30:31.790 --> 30:34.790
左右来为5个下数

30:34.790 --> 30:36.790
差不多

30:36.790 --> 30:38.790
那么这个指示器

30:38.790 --> 30:39.790
是不是创建完了

30:39.790 --> 30:41.790
第四步

30:41.790 --> 30:43.790
根据这个

30:43.790 --> 30:46.790
当前显示的是第几张图片

30:46.790 --> 30:50.790
设置指示器的激活状态

30:50.790 --> 30:54.480
啥意思

30:54.480 --> 30:56.480
比方说目前是

30:56.480 --> 30:58.480
第一张图片

30:58.480 --> 31:00.480
目前它等于0

31:00.480 --> 31:02.480
那么这个东西

31:02.480 --> 31:03.480
就应该是激活的

31:03.480 --> 31:05.480
以后让这个东西变成了1

31:05.480 --> 31:07.480
那么这个就应该是激活的

31:07.480 --> 31:09.480
之前这个叫取消掉

31:09.480 --> 31:11.480
激活状态状态就要取消掉

31:11.480 --> 31:14.480
这件事它不仅仅是初始化要做

31:14.480 --> 31:16.480
你看后面要不要做

31:16.480 --> 31:18.480
你看切换图片过后

31:18.480 --> 31:19.480
这个指示器的状态

31:19.480 --> 31:21.480
是不是要重新设置

31:21.480 --> 31:23.480
是不是要重新设置指示器的状态

31:23.480 --> 31:25.480
所以说这件事是不断的

31:25.480 --> 31:26.480
都要做的

31:26.480 --> 31:27.480
因此由于它会

31:27.480 --> 31:29.480
这是一件重复的工作

31:29.480 --> 31:31.480
我就单独把它开一个函数来写

31:31.480 --> 31:39.480
叫做setindicatorstatus

31:39.480 --> 31:41.480
那么这个函数打成一个注射

31:41.480 --> 31:47.480
设置指示器的状态

31:47.480 --> 31:48.480
根据什么设置

31:48.480 --> 31:54.480
根据per index来进行设置

31:54.480 --> 31:57.480
好那么这个函数怎么写呢

31:57.480 --> 31:59.480
这个函数其实要写的非常简单

31:59.480 --> 32:02.480
首先你第一步拿到目前

32:02.480 --> 32:04.480
就是两步完成

32:04.480 --> 32:09.480
第一步将目前指示器的状态

32:09.480 --> 32:16.480
就是将目前激活的指示器取消激活

32:16.480 --> 32:21.480
第二步激活当前的指示器

32:21.480 --> 32:22.480
啥意思

32:22.480 --> 32:24.480
比方说吧

32:24.480 --> 32:28.480
我们这里有这么几个指示器

32:28.480 --> 32:34.480
一二三四

32:34.480 --> 32:36.480
我目前激活的是它

32:36.480 --> 32:38.480
它是激活状态

32:38.480 --> 32:39.480
为什么它是激活状态

32:39.480 --> 32:40.480
因为我雕了一次这个

32:40.480 --> 32:42.480
它激活了

32:42.480 --> 32:44.480
一会我的ker index变成了

32:44.480 --> 32:48.480
ker index变成了

32:48.480 --> 32:50.480
1

32:50.480 --> 32:52.480
我又会重新调用这个方法

32:52.480 --> 32:54.480
重新设置状态

32:54.480 --> 32:55.480
那么它要做的事情

32:55.480 --> 32:57.480
把之前的激活给它干掉

32:57.480 --> 32:59.480
就第一步

32:59.480 --> 33:01.480
第二步根据ker index

33:01.480 --> 33:03.480
找到当前激活的位置

33:03.480 --> 33:05.480
把它加成一个激活

33:05.480 --> 33:07.480
就这么个意思

33:07.480 --> 33:10.480
所以说我们这里分成两步完成

33:10.480 --> 33:13.480
像这些事情

33:13.480 --> 33:16.480
真的是平时遇到太频繁了以后

33:16.480 --> 33:18.480
就是像这种设置激活状态

33:18.480 --> 33:19.480
干掉之前的

33:19.480 --> 33:20.480
然后重新设置当前的

33:20.480 --> 33:22.480
那么我们如何干掉之前的呢

33:22.480 --> 33:23.480
那非常简单

33:23.480 --> 33:24.480
我们可以用

33:24.480 --> 33:26.480
完全可以用选择器

33:26.480 --> 33:28.480
选中什么

33:28.480 --> 33:30.480
选中indicator item

33:30.480 --> 33:32.480
它那样是不就这个玩意吗

33:32.480 --> 33:34.480
然后它带有那样是active

33:34.480 --> 33:37.480
加到这个那样是不就是激活的吗

33:37.480 --> 33:38.480
之前已经激活了

33:38.480 --> 33:40.480
那么我们来判断一下这个元

33:40.480 --> 33:42.480
当然一开始是没有

33:42.480 --> 33:43.480
之前是没有的

33:43.480 --> 33:44.480
最好判断一下

33:44.480 --> 33:46.480
如果说之前有激活的话

33:46.480 --> 33:48.480
把激活样式给它干掉

33:48.480 --> 33:50.480
重新设置class name

33:50.480 --> 33:52.480
那么不加上这个active

33:52.480 --> 33:54.480
设置这个玩意就行了

33:54.480 --> 33:56.480
这是干掉之前的

33:56.480 --> 33:58.480
然后激活当前的

33:58.480 --> 34:00.480
这个太好说了

34:00.480 --> 34:01.480
当前是第1个

34:01.480 --> 34:03.480
那么也就是意味着

34:03.480 --> 34:04.480
它这个指示器的指援数

34:04.480 --> 34:05.480
我们自招

34:05.480 --> 34:06.480
这是一个指示器容器

34:06.480 --> 34:08.480
找它的第1个指援数

34:08.480 --> 34:09.480
把它激活

34:09.480 --> 34:10.480
颗音这个时候是第2个

34:10.480 --> 34:11.480
那么找第2个指援数

34:11.480 --> 34:12.480
把它激活

34:12.480 --> 34:13.480
所以说这里的带忙了

34:13.480 --> 34:14.480
就变成了

34:14.480 --> 34:16.480
doms indicator

34:18.480 --> 34:19.480
颗音这个

34:20.480 --> 34:22.480
就找到当前的第几个指援数

34:22.480 --> 34:24.480
然后给它设置激活class name

34:24.480 --> 34:26.480
等于indicator

34:39.480 --> 34:40.480
那么这个函数就写完了

34:40.480 --> 34:41.480
那这个函数我写完了之后

34:41.480 --> 34:42.480
我们写了一个函数

34:42.480 --> 34:43.480
就可以单独测试

34:43.480 --> 34:45.480
比方说怎么来测试呢

34:47.480 --> 34:48.480
我试一次

34:49.480 --> 34:50.480
调用一次

34:52.480 --> 34:53.480
没反应是吧

34:53.480 --> 34:54.480
没反应我看一下

34:55.480 --> 34:56.480
这里边有没有样式

34:56.480 --> 34:57.480
有没有加进去

34:58.480 --> 34:59.480
还加到这了

35:05.650 --> 35:06.650
这个地方看错了

35:07.650 --> 35:08.650
你看在这边

35:12.650 --> 35:14.650
你看是不是第1个激活了

35:14.650 --> 35:16.650
然后我们改变index

35:17.650 --> 35:18.650
改变它

35:18.650 --> 35:19.650
把它设成2

35:19.650 --> 35:20.650
来再重新调用这个函数

35:21.650 --> 35:22.650
它会根据新的

35:22.650 --> 35:23.650
currindex的时候

35:23.650 --> 35:24.650
重新设置激活

35:24.650 --> 35:25.650
你看

35:25.650 --> 35:26.650
是不是这里激活了

35:27.650 --> 35:28.650
这个函数就起这么一个作用

35:28.650 --> 35:29.650
那么有了这个函数过后

35:29.650 --> 35:31.650
一开始我们只需要去调用它一次

35:31.650 --> 35:32.650
就完成了

35:33.650 --> 35:34.650
设置

35:34.650 --> 35:35.650
指示

35:36.650 --> 35:38.650
起的激活状态

35:39.650 --> 35:41.650
一开始只要调用一次

35:41.650 --> 35:42.650
是不是就

35:42.650 --> 35:43.650
初始化就完成了

35:44.650 --> 35:45.650
没有什么别的事情可做了

35:46.650 --> 35:47.650
一开始就这么样子

35:48.650 --> 35:49.650
初始化完成

35:49.650 --> 35:50.650
那么

35:50.650 --> 35:51.650
朋友们如果说听到这呢

35:52.650 --> 35:54.650
我建议大家可以

35:54.650 --> 35:55.650
先不着急往后听

35:55.650 --> 35:56.650
可以先暂停视频

35:56.650 --> 35:58.650
自己把初始化这段东西

35:58.650 --> 35:59.650
根据我的思路

35:59.650 --> 36:00.650
把它完成

36:00.650 --> 36:02.650
如果说你之前做过的话

36:02.650 --> 36:03.650
可以稍微做一下对比

36:05.650 --> 36:06.650
初始化

36:07.650 --> 36:08.650
完成了过后

36:08.650 --> 36:09.650
接下来就是交互了

36:09.650 --> 36:13.920
交互效果呢

36:13.920 --> 36:14.920
我们

36:14.920 --> 36:15.920
根据之前的分析

36:15.920 --> 36:17.920
我们还是把示意图打开

36:17.920 --> 36:24.970
还是结个图

36:25.970 --> 36:30.050
我们有这么几个函数要实现

36:31.050 --> 36:33.680
一个函数叫做

36:33.680 --> 36:34.680
moo2函数

36:34.680 --> 36:36.680
这是一个非常非常核心的函数

36:37.680 --> 36:40.510
你不要喘一个新的说意

36:41.510 --> 36:42.510
这个函数是什么意思呢

36:43.510 --> 36:46.780
将

36:47.780 --> 36:48.780
轮波图

36:49.780 --> 36:51.780
从当前的位置

36:52.780 --> 36:53.780
不管你当前是什么位置

36:54.780 --> 36:56.780
切换到

36:57.780 --> 36:59.780
六index

37:00.780 --> 37:01.780
位置

37:01.780 --> 37:02.780
那么这个六index到底是啥呢

37:02.780 --> 37:03.780
表示的是

37:04.780 --> 37:05.780
新的

37:06.780 --> 37:08.780
位置的图片说意

37:09.780 --> 37:10.780
比方说

37:10.780 --> 37:11.780
我现在比方说

37:11.780 --> 37:12.780
有的这么一个函数过后

37:12.780 --> 37:14.780
我想切换到第三张图片

37:15.780 --> 37:18.780
比方说想切换到第三张0123

37:18.780 --> 37:19.780
那么就是下表为2

37:19.780 --> 37:20.780
我就这样调函数

37:20.780 --> 37:22.780
我就去调一下这个moo2函数

37:23.780 --> 37:24.780
moo2

37:24.780 --> 37:25.780
把它传一个2进去

37:25.780 --> 37:26.780
它就会从当前这个位置

37:26.780 --> 37:27.780
刷

37:28.780 --> 37:29.780
有一段动画

37:29.780 --> 37:30.780
变到了这个位置

37:30.780 --> 37:31.780
变到了这个位置

37:32.780 --> 37:33.780
就这么一回事

37:33.780 --> 37:35.780
这就是这个函数完成的事情

37:35.780 --> 37:36.780
有了这个函数过后

37:36.780 --> 37:37.780
我们后边很多事情

37:37.780 --> 37:38.780
就变得非常舒服了

37:39.780 --> 37:40.780
变得容易的

37:40.780 --> 37:42.780
关键是要写出来这么一个函数

37:42.780 --> 37:44.780
其实分析出来的话

37:44.780 --> 37:46.780
这个moo2函数

37:46.780 --> 37:47.780
它的本质就是

37:48.780 --> 37:51.780
调用我们之前写的那个animation

37:52.780 --> 37:54.780
是不是调用我们之前写的那个函数

37:54.780 --> 37:56.780
调用我们之前写的animate

37:56.780 --> 37:58.780
这里边可以是animation

37:59.780 --> 38:01.780
那么这里边要传一些东西

38:01.780 --> 38:02.780
from

38:02.780 --> 38:04.780
从哪一个值变到哪一个值

38:04.780 --> 38:05.780
to

38:05.780 --> 38:07.780
变到具体变到哪一个值

38:07.780 --> 38:08.780
总的时间

38:08.780 --> 38:10.780
total ms

38:10.780 --> 38:11.780
总的时间

38:12.780 --> 38:13.780
然后

38:13.780 --> 38:14.780
是什么

38:14.780 --> 38:15.780
每一次变化要做什么事情

38:15.780 --> 38:18.780
每一次变化不就是改变 margin left

38:18.780 --> 38:20.780
我们就是从当前的 margin left

38:20.780 --> 38:22.780
变到另一个 margin left

38:22.780 --> 38:23.780
对不对

38:23.780 --> 38:24.780
所以说我们每一次变化

38:24.780 --> 38:25.780
我们要做什么事情

38:25.780 --> 38:27.780
然后变化完成之后

38:27.780 --> 38:28.780
要做什么事情

38:28.780 --> 38:29.780
不就是这些事情吗

38:29.780 --> 38:32.780
所以我们只需要把这些参数设置好

38:32.780 --> 38:33.780
是不是就完事了

38:33.780 --> 38:35.780
那么一个一个来

38:35.780 --> 38:37.780
我们首先是from

38:37.780 --> 38:38.780
和to

38:38.780 --> 38:40.780
变化啥呀

38:40.780 --> 38:42.780
不就是变化 margin left

38:42.780 --> 38:43.780
那你看我们这里

38:43.780 --> 38:45.780
我们这里就是不断的去改变

38:45.780 --> 38:47.780
它的 margin left

38:47.780 --> 38:48.780
一开始是零

38:48.780 --> 38:50.780
然后呢减小减小减

38:50.780 --> 38:52.780
它就不就移动了吗

38:52.780 --> 38:53.780
对不对

38:53.780 --> 38:54.780
不就移动了吗

38:54.780 --> 38:56.780
就是改变它的 margin left

38:56.780 --> 38:57.780
那么这个

38:57.780 --> 38:59.780
一开始的 margin left 是多少呢

38:59.780 --> 39:00.780
一开始的

39:00.780 --> 39:02.780
是不是就是 from

39:02.780 --> 39:03.780
一开始是多少

39:03.780 --> 39:05.780
是不是就可以算一下

39:05.780 --> 39:07.780
post float

39:07.780 --> 39:09.780
doms

39:09.780 --> 39:11.780
carousel list

39:11.780 --> 39:13.780
staff margin left

39:13.780 --> 39:15.780
是不是可以得到它的目前的 margin left

39:15.780 --> 39:17.780
对吧

39:17.780 --> 39:18.780
那么这里呢

39:18.780 --> 39:21.780
目前的 margin left 有可能它一开始是没有设置的

39:21.780 --> 39:24.780
一开始它是没有设置这个 margin left

39:24.780 --> 39:25.780
是没有设置的

39:25.780 --> 39:26.780
刷新啊

39:26.780 --> 39:28.780
那么读出来就是一个 now

39:28.780 --> 39:30.780
now的话你转换成 float

39:30.780 --> 39:32.780
转换成数字过后就是 nan

39:32.780 --> 39:35.780
所以说我们这里加上一个或者

39:35.780 --> 39:37.780
如果说你转换不出来的话

39:37.780 --> 39:38.780
我就认为你是零

39:38.780 --> 39:40.780
一开始 margin left 就是零

39:40.780 --> 39:41.780
那么后续呢

39:41.780 --> 39:43.780
后续我们肯定是要不断的去

39:43.780 --> 39:44.780
设置它的 margin left

39:44.780 --> 39:45.780
后续是不是就可以拿到

39:45.780 --> 39:47.780
它当前的 margin left

39:47.780 --> 39:49.780
因为我们后续肯定是

39:49.780 --> 39:51.780
通过介石在这里去设置它的 margin left

39:51.780 --> 39:53.780
比如说我要切换到

39:53.780 --> 39:55.780
第二张图片就是负的500

39:55.780 --> 39:56.780
对吧

39:56.780 --> 39:58.780
那么后边是不是可以获取到

39:58.780 --> 39:59.780
负500px

39:59.780 --> 40:00.780
对吧

40:00.780 --> 40:01.780
然后把它转换成

40:01.780 --> 40:03.780
转换成那个数字

40:03.780 --> 40:05.780
Front 是不是可以拿到了

40:05.780 --> 40:07.780
Front 就是当前的 margin left

40:07.780 --> 40:09.780
那么 to

40:09.780 --> 40:11.780
不比 all the margin left 是多少呢

40:11.780 --> 40:12.780
就是我们要变到哪

40:12.780 --> 40:13.780
它的最终位置在哪

40:13.780 --> 40:18.800
那么这个东西就需要你去分析了

40:18.800 --> 40:19.800
这个交互

40:19.800 --> 40:21.800
你看哈

40:21.800 --> 40:22.800
这个其实也很好分析

40:22.800 --> 40:26.360
也并不负上

40:26.360 --> 40:28.360
如果说当前的

40:28.360 --> 40:32.360
就是你变的目标是0

40:32.360 --> 40:35.360
你的目标变得目标是0

40:35.360 --> 40:38.360
那么 margin left 就是0

40:38.360 --> 40:40.360
你的目标是1 下标为1

40:40.360 --> 40:42.360
你要切换到第二张图片

40:42.360 --> 40:46.360
那么 margin left 就是负的500

40:46.360 --> 40:48.360
负的宽度

40:48.360 --> 40:50.360
负的可见区域的一个宽度

40:50.360 --> 40:51.360
对吧

40:51.360 --> 40:52.360
所以我们这里可以总结一下

40:52.360 --> 40:54.360
总结一下这个规律

40:54.360 --> 40:55.360
这个规律其实很好

40:55.360 --> 40:56.360
总结

40:56.360 --> 40:58.360
我们用不到太高升的数学知识

40:58.360 --> 40:59.360
我们整个前段的学习

40:59.360 --> 41:03.360
不会用到一定点大学的数学知识

41:03.360 --> 41:05.360
大家请放心

41:05.360 --> 41:10.960
如果说你的下标是0

41:10.960 --> 41:12.960
margin left

41:12.960 --> 41:14.960
下标是0

41:14.960 --> 41:16.960
目标的位置肯定就是0

41:16.960 --> 41:18.960
你的下标是1

41:18.960 --> 41:21.960
margin left 就是负的一个宽度

41:21.960 --> 41:23.960
我们宽度的话用w吧

41:23.960 --> 41:25.960
负的一个可见区的宽度

41:26.960 --> 41:28.960
下标为2

41:28.960 --> 41:31.960
是不是负的两个可见区的宽度

41:31.960 --> 41:33.960
这个东西是不是去总结出来了

41:33.960 --> 41:35.960
无分就是它成一个宽度

41:35.960 --> 41:37.960
它的值去成一个宽度

41:37.960 --> 41:38.960
那么我们

41:38.960 --> 41:40.960
它的值我们是知道的

41:40.960 --> 41:41.960
它的值是什么呢

41:41.960 --> 41:48.040
就是这个6英点的表示负的

41:48.040 --> 41:52.760
然后成义宽度

41:52.760 --> 41:53.760
宽度是什么呢

41:53.760 --> 41:54.760
宽度也就是5半

41:54.760 --> 41:56.760
那么这样子写不好

41:56.760 --> 41:58.760
这样子写又是硬编

41:58.760 --> 42:01.760
我们尽量的把这些东西用成辨量

42:01.760 --> 42:03.760
你可以说是一个辨量

42:03.760 --> 42:05.760
container容器的宽度

42:05.760 --> 42:06.760
为500

42:06.760 --> 42:08.760
也可以这里动态获取

42:08.760 --> 42:09.760
因为我们知道

42:09.760 --> 42:10.760
我们可以在js里面

42:10.760 --> 42:12.760
可以获取到元素的宽度

42:12.760 --> 42:16.760
我们可以获取到container

42:16.760 --> 42:19.760
这个容器的client位置

42:19.760 --> 42:20.760
可以获取到它的宽度

42:20.760 --> 42:22.760
这就是可见区域

42:22.760 --> 42:27.760
容器可见区域的宽度

42:27.760 --> 42:29.760
那么这里等我用这个辨量

42:29.760 --> 42:30.760
替换掉这个位置

42:30.760 --> 42:32.760
那么from2是不是出来了

42:32.760 --> 42:33.760
接下来我们来输出一下

42:33.760 --> 42:34.760
来测试一下

42:34.760 --> 42:35.760
写慢一点

42:35.760 --> 42:37.760
像那种辅导的函数慢慢写

42:37.760 --> 42:39.760
接下来我们来看一下

42:39.760 --> 42:43.760
调用这个mode2

42:43.760 --> 42:47.760
我们要切换到第二章

42:47.760 --> 42:48.760
第三章

42:48.760 --> 42:51.760
是不是这个0到负的1

42:51.760 --> 42:52.760
1000

42:52.760 --> 42:55.760
那我们来看一下是不是对的

43:00.120 --> 43:01.120
切到第二章

43:01.120 --> 43:03.120
是不是切到这一章

43:03.120 --> 43:04.120
那么也就是说

43:04.120 --> 43:05.120
我们要到了

43:05.120 --> 43:06.120
是不是到这

43:06.120 --> 43:08.120
那么是不是负的两个宽度

43:08.120 --> 43:10.120
是没问题的

43:10.120 --> 43:12.120
那么这里from2我们都算出来了

43:12.120 --> 43:14.120
接下来我们继续算

43:14.120 --> 43:15.120
还有什么呢

43:15.120 --> 43:16.120
还有totalms

43:16.120 --> 43:19.120
这个表示什么总时间

43:19.120 --> 43:20.120
就是我们要经过多少时间

43:20.120 --> 43:21.120
从这变到这

43:21.120 --> 43:22.120
那么一个总时间

43:22.120 --> 43:24.120
我们可以把固定下来

43:24.120 --> 43:26.120
totalms

43:26.120 --> 43:28.120
比方说就500毫秒

43:28.120 --> 43:30.120
把它切换过来

43:30.120 --> 43:32.120
那么这个东西是不是也有了

43:32.120 --> 43:33.120
from

43:33.120 --> 43:35.120
我们就来自于

43:35.120 --> 43:36.120
变量from

43:36.120 --> 43:38.120
totalms

43:38.120 --> 43:40.120
totalms

43:40.120 --> 43:42.120
然后amu

43:42.120 --> 43:46.120
每一次变化

43:46.120 --> 43:48.120
它数值是不断变化过来的

43:48.120 --> 43:50.120
每一次变化是不是有个回调函数

43:50.120 --> 43:52.120
每一次变化我们干嘛

43:52.120 --> 43:54.120
我们之前是不是做过的

43:54.120 --> 43:55.120
每一次变化

43:55.120 --> 43:57.120
是不是我们要把marginave

43:57.120 --> 43:59.120
重新设置

43:59.120 --> 44:01.120
the carousel

44:01.120 --> 44:03.120
marginave

44:03.120 --> 44:04.120
重新设置

44:04.120 --> 44:05.120
设置为多少呢

44:05.120 --> 44:06.120
设置为n

44:06.120 --> 44:08.120
评计上px

44:09.120 --> 44:10.120
注意核心

44:10.120 --> 44:11.120
注意核心的代码

44:11.120 --> 44:12.120
就写完了

44:12.120 --> 44:13.120
好 咱们来试一下

44:13.120 --> 44:16.120
moo2

44:16.120 --> 44:18.120
切换到这

44:18.120 --> 44:23.920
这里来测试

44:23.920 --> 44:24.920
moo2

44:24.920 --> 44:26.920
比方说要切换到第1张

44:26.920 --> 44:28.920
第2张

44:28.920 --> 44:29.920
你看是不是切换过去了

44:29.920 --> 44:31.920
它从0变到-500

44:31.920 --> 44:35.920
现在我们要切换到第3张

44:35.920 --> 44:37.920
就切换过去了

44:37.920 --> 44:39.920
是不是很舒服

44:39.920 --> 44:41.920
当然这里边还有一些小的细节

44:41.920 --> 44:42.920
还没完成

44:42.920 --> 44:44.920
比方说一个一个来

44:44.920 --> 44:48.490
首先这个指示器

44:48.490 --> 44:50.490
是不是没变化

44:50.490 --> 44:51.490
对不对

44:51.490 --> 44:53.490
那指示器怎么变化呢

44:53.490 --> 44:54.490
指示器

44:54.490 --> 44:56.490
我们是不是可以用这个函数来重新设置

44:56.490 --> 44:58.490
这个函数是根据当前下标

44:58.490 --> 45:00.490
当前要分下标来设置的

45:00.490 --> 45:02.490
所以说我们这里还要去更改当前下标

45:02.490 --> 45:03.490
curring那个设

45:03.490 --> 45:04.490
等于什么

45:04.490 --> 45:06.490
newcurring

45:06.490 --> 45:10.490
更改当前显示的图片所应

45:10.490 --> 45:12.490
因为你要显示一个新的所应

45:12.490 --> 45:13.490
所以说我们这里呢

45:13.490 --> 45:15.490
需要更改当前的所应

45:15.490 --> 45:17.490
你切换到了一个新的位置

45:17.490 --> 45:18.490
那么当前的位置

45:18.490 --> 45:19.490
肯定变成新的位置

45:19.490 --> 45:20.490
对吧

45:20.490 --> 45:21.490
然后才重新调用这个set

45:21.490 --> 45:23.490
indicator status

45:23.490 --> 45:24.490
这样子就可以重新设置

45:24.490 --> 45:25.490
它的这个状态

45:25.490 --> 45:26.490
好

45:26.490 --> 45:27.490
咱们再用来看一下

45:27.490 --> 45:28.490
切换到第一张

45:28.490 --> 45:29.490
第二张

45:29.490 --> 45:30.490
切换过去了

45:30.490 --> 45:32.490
切换到第三张

45:32.490 --> 45:33.490
切换过去了

45:33.490 --> 45:36.490
如果说没有什么无缝轮波图的话

45:36.490 --> 45:37.490
没有无缝的话

45:37.490 --> 45:38.490
这个事情呢

45:38.490 --> 45:39.490
都住完一大半了

45:41.490 --> 45:42.490
对不对

45:42.490 --> 45:43.490
好

45:43.490 --> 45:44.490
那么这里呢

45:44.490 --> 45:45.490
就出现一个小的问题

45:45.490 --> 45:46.490
我们一点点

45:46.490 --> 45:47.490
一个一个解决

45:47.490 --> 45:48.490
问题很多

45:48.490 --> 45:50.490
但是不要怕

45:50.490 --> 45:52.490
我们解决一个就完一个

45:52.490 --> 45:53.490
接下来

45:53.490 --> 45:54.490
我们一会儿呢

45:54.490 --> 45:56.490
还要去切换到第五张

45:56.490 --> 46:00.490
第六张图片

46:00.490 --> 46:01.490
是不是切换到这

46:01.490 --> 46:02.490
这张图片的认识

46:02.490 --> 46:03.490
应该是多出来了

46:03.490 --> 46:04.490
对吧

46:04.490 --> 46:05.490
但是指示器

46:05.490 --> 46:06.490
你注意

46:06.490 --> 46:07.490
指示器是不是没有多

46:07.490 --> 46:08.490
指示器只有五个

46:08.490 --> 46:09.490
但是我们图片有六个

46:09.490 --> 46:10.490
接下来

46:10.490 --> 46:11.490
我们切换到第六张图片的时候

46:11.490 --> 46:12.490
你看指示器

46:12.490 --> 46:14.490
就会出问题

46:14.490 --> 46:16.490
因为它没有第六个指示器

46:16.490 --> 46:17.490
它设置不了

46:17.490 --> 46:18.490
这里是undefine

46:18.490 --> 46:19.490
它说

46:19.490 --> 46:21.490
你要读这个class name

46:21.490 --> 46:22.490
它从那个

46:22.490 --> 46:23.490
地方里面读就读不到

46:23.490 --> 46:25.490
在这里就出了问题

46:25.490 --> 46:27.490
因为它超出了下标范围了

46:27.490 --> 46:29.490
懂了意思吧

46:29.490 --> 46:32.490
那么你想一想这个道理

46:32.490 --> 46:34.490
如果说我切换到

46:34.490 --> 46:36.490
这一张图片的话

46:36.490 --> 46:40.490
指示器应该是第几个

46:40.490 --> 46:41.490
我切换到这张图片

46:41.490 --> 46:43.490
指示器应该是第几个

46:43.490 --> 46:46.490
是不是应该是第一个

46:46.490 --> 46:48.490
对不对

46:48.490 --> 46:49.490
所以说

46:49.490 --> 46:50.490
如果说你切换到

46:50.490 --> 46:51.490
最后一个图片的位置

46:51.490 --> 46:53.490
那么指示器有第1个

46:53.490 --> 46:54.490
那么当然

46:54.490 --> 46:55.490
这个怎么来处理

46:55.490 --> 46:56.490
你就重新修改一下

46:56.490 --> 46:57.490
之前我们没有考虑到

46:57.490 --> 46:58.490
那么你这里就可以

46:58.490 --> 46:59.490
重新修改一下这个函数

46:59.490 --> 47:01.490
把这个下标做个判断

47:01.490 --> 47:03.490
判断是不是已经超出了

47:03.490 --> 47:04.490
超出来就是第1个

47:04.490 --> 47:05.490
回到第1个

47:05.490 --> 47:08.490
当然这里还有一种更加

47:08.490 --> 47:10.490
好的 优雅的做法

47:10.490 --> 47:12.490
就是curl index

47:12.490 --> 47:18.490
除以url-dialins的余数

47:18.490 --> 47:19.490
把这个index放进去

47:21.490 --> 47:23.490
那么这又是怎么回事呢

47:23.490 --> 47:25.490
当然用判断也没有任何问题

47:25.490 --> 47:26.490
我就可以说一下

47:26.490 --> 47:27.490
可以有这种做法

47:27.490 --> 47:28.490
这种是什么意思呢

47:28.490 --> 47:31.490
比方说它一共有5张图

47:31.490 --> 47:34.490
5个图片要展示

47:34.490 --> 47:37.490
那么指示器的数量是5

47:37.490 --> 47:41.490
但是实际图片的数量是6

47:41.490 --> 47:42.490
对不对

47:42.490 --> 47:46.490
当我们curl index

47:46.490 --> 47:49.490
为小于等于5的时候

47:49.490 --> 47:54.490
小于5的时候没有任何问题

47:54.490 --> 47:56.490
就是0到4的时候

47:56.490 --> 47:57.490
是没有任何问题的

47:57.490 --> 48:00.490
图片切换到哪一张没问题

48:00.490 --> 48:01.490
然后指示器

48:01.490 --> 48:02.490
0到4的时候

48:02.490 --> 48:05.490
0除以5的余数是多少

48:05.490 --> 48:06.490
我们除了什么余数

48:06.490 --> 48:08.490
除了5张图片的余数

48:08.490 --> 48:10.490
0除以5的余数是多少

48:10.490 --> 48:11.490
是不是就是0

48:11.490 --> 48:13.490
那就指示器就在第1个

48:13.490 --> 48:14.490
那如果说curl index

48:14.490 --> 48:15.490
为1的时候

48:15.490 --> 48:16.490
1除以5的余数是多少

48:16.490 --> 48:17.490
是不是还是1

48:17.490 --> 48:20.490
0到4除以5的余数就是它本身

48:20.490 --> 48:21.490
所以说0到4

48:21.490 --> 48:23.490
它的指示器都是没有问题的

48:23.490 --> 48:25.490
就是1,2,3,4,5都没问题

48:25.490 --> 48:26.490
0到4一共有5个

48:26.490 --> 48:28.490
那么它关键是这个curl index

48:28.490 --> 48:30.490
是可以取到6的

48:30.490 --> 48:32.490
因为它实际图片有6

48:32.490 --> 48:33.490
它可以取到6

48:33.490 --> 48:34.490
可以取到6的时候

48:34.490 --> 48:37.490
那么就是6除以5的余数是多少

48:37.490 --> 48:41.490
可以取到5

48:41.490 --> 48:44.490
因为它的下标是0到5

48:44.490 --> 48:46.490
那么5除以5的余数

48:46.490 --> 48:48.490
是不是就变成0了

48:48.490 --> 48:50.490
对吧

48:50.490 --> 48:52.490
这就是这么一个方式

48:52.490 --> 48:53.490
如果说你这个方式

48:53.490 --> 48:55.490
实在是理解得太牢火了

48:55.490 --> 48:56.490
那你就用判断

48:56.490 --> 49:00.490
你定一个index就等于curl index

49:00.490 --> 49:01.490
就等于它

49:01.490 --> 49:02.490
判断一下

49:02.490 --> 49:05.490
如果说index超出了

49:05.490 --> 49:06.490
某一个范围

49:06.490 --> 49:07.490
超出了什么范围

49:07.490 --> 49:11.490
超出了图片

49:11.490 --> 49:15.490
就是超出了整个数组的长度减1

49:15.490 --> 49:17.490
就是超出它的最大下标

49:17.490 --> 49:18.490
一共有5张图片

49:18.490 --> 49:21.490
结果你给我来了一个下标为5

49:21.490 --> 49:22.490
超出它的最大下标

49:22.490 --> 49:24.490
那么你把它设置为0

49:24.490 --> 49:27.490
也可以也是没问题的

49:27.490 --> 49:28.490
都行

49:28.490 --> 49:31.490
总之你要把这个问题解决

49:31.490 --> 49:33.490
好,指示器的问题是不是解决了

49:33.490 --> 49:34.490
然后我们又来测试

49:34.490 --> 49:36.490
起单码就是这样子

49:36.490 --> 49:38.490
做一点发现点问题

49:38.490 --> 49:40.490
前进一点又发现点问题

49:40.490 --> 49:41.490
就跟你玩游戏

49:41.490 --> 49:43.490
一样闯关一样对吧

49:43.490 --> 49:44.490
总会有一些小怪

49:44.490 --> 49:47.490
总会有一些小暴使来瞒着你

49:47.490 --> 49:49.490
然后你去搞定它就完事了

49:49.490 --> 49:51.490
搞定它就爆点装备

49:51.490 --> 49:53.490
好,move to

49:53.490 --> 49:55.490
切换到第二张

49:55.490 --> 49:57.490
切换到第三张

49:57.490 --> 50:00.490
一下子切换到第第几张

50:00.490 --> 50:02.490
第五张

50:02.490 --> 50:04.490
然后切换到第六张

50:04.490 --> 50:06.490
你看,指示器正确了

50:06.490 --> 50:08.490
对不对

50:08.490 --> 50:09.490
现在没问题吧

50:09.490 --> 50:10.490
要继续切换了

50:10.490 --> 50:11.490
那后面就没东西了

50:11.490 --> 50:13.490
这个问题我们之后解决

50:14.490 --> 50:16.490
move to

50:16.490 --> 50:18.490
它本身要做的事情最核心的

50:18.490 --> 50:19.490
差不多了

50:19.490 --> 50:21.490
但这里面还有没有要搞定的呢

50:21.490 --> 50:22.490
还有

50:22.490 --> 50:24.490
只是大家不太容易想得到而已

50:24.490 --> 50:26.490
一点点来

50:26.490 --> 50:28.490
还有一些事情要解决

50:29.490 --> 50:31.490
还有什么事情要解决呢

50:37.150 --> 50:39.150
我们把动画时间射长一点

50:39.150 --> 50:42.150
五秒钟完成动画

50:42.150 --> 50:44.150
你看着

50:44.150 --> 50:46.150
如果说我这里move to

50:46.150 --> 50:48.150
切换到第二张

50:48.150 --> 50:50.150
正在切换五秒钟

50:50.150 --> 50:52.150
现在我又切换到第三张

50:54.150 --> 50:56.150
两个动画

50:56.150 --> 50:58.150
都在同时进行

50:58.150 --> 51:00.150
是不是有这么一个情况

51:00.150 --> 51:02.150
两个动画都在进行

51:03.150 --> 51:05.150
那么这里面就会出问题

51:07.150 --> 51:09.150
我们不希望有两个动画同时进行

51:09.150 --> 51:11.150
那怎么办呢

51:11.150 --> 51:13.150
我们可以这样子

51:13.150 --> 51:14.150
一个动画在进行的时候

51:14.150 --> 51:16.150
就不能再切换了

51:16.150 --> 51:18.150
不允许你再切换了

51:19.150 --> 51:20.150
那怎么办

51:20.150 --> 51:21.150
我们就说这个变量呗

51:21.150 --> 51:23.150
is playing

51:24.150 --> 51:27.150
是否有切换动画

51:28.150 --> 51:31.150
是否有正在进行的切换动画

51:31.150 --> 51:33.150
是否有动画正在进行

51:33.150 --> 51:34.150
那么我们在这个函数

51:34.150 --> 51:36.150
一开始就判断一下

51:36.150 --> 51:38.150
如果说is playing

51:38.150 --> 51:40.150
为去

51:41.150 --> 51:43.150
有动画进行

51:43.150 --> 51:45.150
不做任何事情

51:45.150 --> 51:47.150
要等那个动画完了之后

51:47.150 --> 51:48.150
你再说后边的事

51:48.150 --> 51:49.150
就是有动画进行

51:49.150 --> 51:51.150
你就不要做任何事情

51:51.150 --> 51:54.150
你只有没有动画的时候

51:54.150 --> 51:56.150
你才往后边运行

51:56.150 --> 51:57.150
那么往后边运行的时候

51:57.150 --> 51:59.150
我就先把那个变量设为去

52:00.150 --> 52:02.150
表示目前即将有动画了

52:02.150 --> 52:04.150
动画马上要来了

52:04.150 --> 52:06.150
动画来了

52:06.150 --> 52:08.150
动画结束之后

52:09.150 --> 52:11.150
我又把它设为force

52:12.150 --> 52:14.150
动画结束了

52:14.150 --> 52:15.150
你就用这种方式来处理

52:15.150 --> 52:17.150
通过这个变量来控制

52:17.150 --> 52:19.150
因为这个函数会被调用很多次

52:19.150 --> 52:20.150
每次调用看一下

52:20.150 --> 52:22.150
有没有动画就不去进行的

52:22.150 --> 52:23.150
没有动画

52:23.150 --> 52:24.150
没有动画现在开始动画了

52:24.150 --> 52:26.150
然后创建动画进行进行进行

52:26.150 --> 52:27.150
好动画结束了

52:27.150 --> 52:28.150
把它设为force

52:28.150 --> 52:29.150
现在又没有动画了

52:29.150 --> 52:31.150
那么这样就避免这个问题了

52:31.150 --> 52:33.150
这些问题都是一个一个解决的

52:33.150 --> 52:35.150
但马都是一点一点躲起来的

52:36.150 --> 52:38.150
你看现在我们在切换了第三章

52:38.150 --> 52:39.150
无效

52:39.150 --> 52:41.150
必须要等第二章切换完了过后

52:41.150 --> 52:43.150
再切换了第三章

52:43.150 --> 52:44.150
那么现在可以了

52:44.150 --> 52:45.150
懂了意思吧

52:45.150 --> 52:47.150
好这是个这个小细节问题

52:47.150 --> 52:49.150
好再来还有没有问题呢

52:49.150 --> 52:51.150
都还有

52:51.150 --> 52:53.150
还有什么问题

52:53.150 --> 52:55.150
比方说一开始就是第一章

52:55.150 --> 52:56.150
对吧

52:56.150 --> 52:57.150
那么现在呢

52:57.150 --> 52:59.150
我也再一次切换到第一章

52:59.150 --> 53:01.150
就今天把这个函数做完善一点

53:02.150 --> 53:03.150
然后呢

53:03.150 --> 53:05.150
现在呢我们又去切换到第二章

53:06.150 --> 53:08.150
你会发现他切换不了了

53:09.150 --> 53:10.150
为什么切换不了了

53:10.150 --> 53:11.150
我们再来一次

53:11.150 --> 53:12.150
先切换到第一章

53:12.150 --> 53:13.150
目前就是第一章对吧

53:13.150 --> 53:15.150
然后再切换到第二章

53:15.150 --> 53:17.150
这个无效了

53:17.150 --> 53:19.150
要等了很久过后

53:19.150 --> 53:20.150
我们再切换到第二章又有效了

53:20.150 --> 53:22.150
这又是怎么回事呢

53:22.150 --> 53:24.150
这就是因为我们在切

53:24.150 --> 53:26.150
切换到当前这一章的时候

53:26.150 --> 53:27.150
目前就是第一章

53:27.150 --> 53:28.150
你又要切换到第一章

53:28.150 --> 53:30.150
虽然说看上去没有没有变化

53:30.150 --> 53:33.150
但是这个代码是在运行的

53:34.150 --> 53:36.150
它从零变到零

53:36.150 --> 53:37.150
对吧

53:37.150 --> 53:38.150
是不是还是在运行

53:38.150 --> 53:40.150
它要运行个五秒钟

53:40.150 --> 53:42.150
五秒钟过后动画才结束

53:42.150 --> 53:44.150
那么也就是在运行期间

53:44.150 --> 53:46.150
就导致了你后边的切换是无效的

53:46.150 --> 53:48.150
因为他后边的切换就进了这个判断了

53:48.150 --> 53:50.150
他以为之前还有动画没完

53:51.150 --> 53:53.150
他就不会给你做任何事

53:53.150 --> 53:55.150
那这里我们怎么办呢

53:55.150 --> 53:56.150
其实也很简单

53:56.150 --> 53:58.150
我们在衣服里边加一个判断

53:58.150 --> 54:00.150
如果说你切换的时候

54:00.150 --> 54:03.150
你的切换的目标的应得格式

54:03.150 --> 54:05.150
跟当前的应得格式是一样的

54:05.150 --> 54:12.870
或切换目标和当前一致

54:12.870 --> 54:13.870
就不做任何事情

54:13.870 --> 54:15.870
那就有什么好切换的呢

54:15.870 --> 54:16.870
不要切换

54:16.870 --> 54:19.870
这样子你切换到当前位置的时候

54:19.870 --> 54:20.870
他就不会做任何事情了

54:20.870 --> 54:21.870
自然不会有任何的动画

54:21.870 --> 54:23.870
那么就不会影响后边的切换

54:24.870 --> 54:26.870
这些小的细节

54:26.870 --> 54:29.870
大家减少的话就不太容易考虑得到

54:30.870 --> 54:32.870
开发随着你们代码量的增加

54:32.870 --> 54:33.870
开发的东西越来越多

54:33.870 --> 54:35.870
你考虑的东西就越来越全面

54:35.870 --> 54:36.870
越来越细了

54:38.870 --> 54:40.870
当然了他切换没有那么慢

54:40.870 --> 54:43.870
我这里把他调回成三半

54:44.870 --> 54:46.870
这样子比较合适一点

54:50.820 --> 54:53.820
有了这个MOO2函数之后

54:53.820 --> 54:55.820
你会发现有些事情都可以做了

54:55.820 --> 54:57.820
比方说像这个指示器的点击事件

54:57.820 --> 54:59.820
是不是可以做了

54:59.820 --> 55:00.820
是不是可以做了

55:00.820 --> 55:01.820
好我们来处理

55:01.820 --> 55:03.820
处理指示器的点击事件

55:04.820 --> 55:08.280
非常简单的

55:08.280 --> 55:10.280
我们拿到所有的指示器循环他

55:10.280 --> 55:12.280
循环所有的指示器

55:12.280 --> 55:13.280
循环小鱼

55:13.280 --> 55:14.280
DOMS

55:14.280 --> 55:15.280
INDICATOR

55:15.280 --> 55:16.280
CHILD GUN

55:16.280 --> 55:17.280
DOLANCE

55:19.280 --> 55:21.280
所以循环所有的指示器

55:21.280 --> 55:24.280
点每一个指示器注册一个点击事件

55:28.960 --> 55:30.960
点击的时候干嘛呀

55:30.960 --> 55:32.960
点第一个指示器的时候

55:32.960 --> 55:34.960
我们是不是就调用MOO2

55:34.960 --> 55:36.960
切换到第一个

55:36.960 --> 55:37.960
点第二个指示器的时候

55:37.960 --> 55:38.960
你调用MOO2

55:38.960 --> 55:40.960
切换到第二个

55:40.960 --> 55:41.960
切换到第三个

55:41.960 --> 55:43.960
所以就把i传进去就行了

55:43.960 --> 55:47.280
大家看一下这个代码会出问题吗

55:47.280 --> 55:49.280
所以说哈

55:49.280 --> 55:52.280
为什么一定要让你们尽自己最大的努力

55:52.280 --> 55:53.280
去做一下

55:53.280 --> 55:55.280
你不做一下你就发现不了问题

55:55.280 --> 55:58.280
很容易觉得很害怕问题

55:58.280 --> 56:00.280
我希望我写代码就不要遇到问题

56:00.280 --> 56:01.280
那里我告诉你

56:01.280 --> 56:03.280
如果说你写代码没有遇到问题

56:03.280 --> 56:05.280
哪里的问题大的不得了

56:06.280 --> 56:09.280
将来你根本就学不下去了

56:09.280 --> 56:11.280
遇到问题是好的事

56:11.280 --> 56:13.280
因为一定会遇到的

56:13.280 --> 56:15.280
你逃是逃不掉的

56:15.280 --> 56:17.280
你只有遇到了过后

56:17.280 --> 56:20.280
你才能够认识到这里是有问题的

56:20.280 --> 56:22.280
就最恐怖的不是问题本身

56:22.280 --> 56:24.280
是你不知道有问题

56:24.280 --> 56:26.280
这是最害怕的

56:26.280 --> 56:28.280
就像如果说你不去自己写

56:28.280 --> 56:30.280
不去遇到问题光只在我听

56:30.280 --> 56:32.280
好像老师写的没有什么问题

56:32.280 --> 56:34.280
好像好多问题就引人而解了

56:34.280 --> 56:35.280
没得是没有问题

56:35.280 --> 56:37.280
问题多得不得了

56:37.280 --> 56:39.280
你只有不断的去遇到这些问题

56:39.280 --> 56:40.280
一个个解决

56:40.280 --> 56:42.280
那么逐渐的学着你代码量增加

56:42.280 --> 56:44.280
你会发现问题慢慢就变少了

56:46.280 --> 56:48.280
是因为你之前遇到过解决了

56:48.280 --> 56:50.280
不是因为它这些问题不存在

56:50.280 --> 56:52.280
一定要搞清楚

56:52.280 --> 56:53.280
所以一定要质疑一些

56:53.280 --> 56:54.280
我现在哭后破心

56:54.280 --> 56:56.280
给你们说这些

56:56.280 --> 56:57.280
因为我们是线上合成

56:57.280 --> 57:00.280
我没有办法在你旁边管着你

57:00.280 --> 57:02.280
所以一定要靠你自觉

57:02.280 --> 57:03.280
这里有没有问题

57:03.280 --> 57:05.280
你去写了你这里一定会有问题

57:07.280 --> 57:08.280
为什么会有问题

57:08.280 --> 57:09.280
又来了

57:09.280 --> 57:11.280
这个循环里边

57:11.280 --> 57:12.280
循环结束了

57:12.280 --> 57:13.280
早就结束了

57:13.280 --> 57:14.280
循环结束了

57:16.280 --> 57:17.280
我们看一下这个i

57:17.280 --> 57:18.280
早就结束了

57:18.280 --> 57:21.280
哪还要等到你点的时候循环才结束

57:21.280 --> 57:22.280
早就结束了

57:22.280 --> 57:24.280
循环结束的时候i等于5

57:24.280 --> 57:25.280
那从事以后你点的时候

57:25.280 --> 57:27.280
i所有的i都等于5

57:27.280 --> 57:29.280
都喜欢到最后一张

57:29.280 --> 57:30.280
都会出现这样的问题

57:30.280 --> 57:31.280
那这个问题怎么解决

57:31.280 --> 57:32.280
必报给

57:35.550 --> 57:37.550
以后我们学了ES-6过后

57:37.550 --> 57:38.550
有更好的解决方法

57:38.550 --> 57:39.550
这必报确实的

57:39.550 --> 57:40.550
这个代码

57:40.550 --> 57:41.550
很丑陋

57:41.550 --> 57:43.550
但是目前也只能这样子做

57:45.550 --> 57:46.550
这样子

57:46.550 --> 57:48.550
每次循环运行一个立即指引函数

57:48.550 --> 57:49.550
把这个i

57:51.550 --> 57:53.550
我现在发现的这两个i是相同的

57:53.550 --> 57:55.550
然后传给这个i

57:56.550 --> 57:58.550
这个i跟外面循环的i

57:58.550 --> 57:59.550
不是一个东西

58:00.550 --> 58:01.550
传给它

58:01.550 --> 58:03.550
然后在这个函数里面产生必报

58:03.550 --> 58:04.550
把这个东西保存下来

58:05.550 --> 58:07.550
当然你如果说看着云的话

58:07.550 --> 58:08.550
你可以把这个换成a

58:08.550 --> 58:09.550
这样子你可能不云了

58:10.550 --> 58:12.550
它用了根本就不是外面的i

58:12.550 --> 58:14.550
是当时循环的时候传

58:14.550 --> 58:15.550
固定下来这个值

58:16.550 --> 58:19.760
好 那么现在就不会有问题了

58:19.760 --> 58:21.760
你看 现在点击时间是不是有了

58:21.760 --> 58:22.760
那么

58:22.760 --> 58:24.760
如果说不做无缝轮波的话

58:24.760 --> 58:26.760
那么这个事情都已经做完了

58:27.760 --> 58:29.760
关键是我们现在要做无缝轮波

58:29.760 --> 58:31.760
那就还需要两个函数

58:31.760 --> 58:36.090
一个函数叫next

58:36.090 --> 58:38.090
一个函数叫prime

58:38.090 --> 58:43.960
还是解一下

58:43.960 --> 58:52.400
好 来吧

58:52.400 --> 58:53.400
需要两个函数

58:53.400 --> 58:54.400
这两个函数呢

58:54.400 --> 58:55.400
写起来的其实

58:55.400 --> 58:57.400
已经没有那么复杂了

58:57.400 --> 58:58.400
一个函数prime

58:58.400 --> 59:00.400
我希望调用next的时候呢

59:00.400 --> 59:02.400
就是一个无缝不断的向后切换

59:02.400 --> 59:04.400
调用一次切换到下一张

59:04.400 --> 59:05.400
调用一次切换到下一张

59:05.400 --> 59:07.400
就好像无穷无尽可以一直调一样

59:07.400 --> 59:08.400
就是next

59:09.400 --> 59:12.400
那么next这个函数要做什么事呢

59:12.400 --> 59:13.400
其实这个函数

59:13.400 --> 59:15.400
它的核心思想特别简单

59:15.400 --> 59:16.400
你不是有一个变量

59:16.400 --> 59:18.400
叫curl index是什么

59:19.400 --> 59:21.400
表示当前是第几张

59:21.400 --> 59:22.400
对吧

59:22.400 --> 59:24.400
你加一过后不就是下一张吗

59:24.400 --> 59:26.400
然后去调用这个mode

59:26.400 --> 59:28.400
不就切换到下一张了吗

59:29.400 --> 59:30.400
复杂吗

59:30.400 --> 59:31.400
不复杂

59:33.400 --> 59:34.400
或者你定个变量

59:34.400 --> 59:35.400
new index

59:35.400 --> 59:37.400
等于curl index是加一

59:39.770 --> 59:40.770
你把这个玩意放进去

59:40.770 --> 59:41.770
不就切换到下一张了吗

59:42.770 --> 59:43.770
好 咱们来试一下

59:44.770 --> 59:45.770
有没有问题

59:45.770 --> 59:46.770
肯定有问题

59:46.770 --> 59:48.770
但是我们一点点去疏利

59:49.770 --> 59:51.770
切换到那个next

59:51.770 --> 59:52.770
不用传删说了

59:52.770 --> 59:53.770
反正就下一张

59:53.770 --> 59:54.770
下一张 再下一张

59:54.770 --> 59:56.770
再下一张 再下一张

59:56.770 --> 59:57.770
再下一张

59:58.770 --> 59:59.770
目前到哪了

01:00:01.770 --> 01:00:02.770
目前到这了

01:00:02.770 --> 01:00:09.480
目前都没问题了

01:00:09.480 --> 01:00:12.480
但是你要继续切换就出问题了

01:00:13.480 --> 01:00:14.480
因为后面没了

01:00:16.480 --> 01:00:17.480
后面是真没了

01:00:18.480 --> 01:00:20.480
你要继续切换 说不就出问题了

01:00:22.480 --> 01:00:32.150
那怎么办

01:00:33.150 --> 01:00:34.150
你要继续切换 切换不了了

01:00:34.150 --> 01:00:35.150
怎么办

01:00:36.150 --> 01:00:38.150
按照我们之前的分析

01:00:38.150 --> 01:00:39.150
这要如何处理

01:00:39.150 --> 01:00:41.150
就如果说你再切换

01:00:41.150 --> 01:00:43.150
你的next index就变成了啥了

01:00:43.150 --> 01:00:46.150
所以变成了

01:00:47.150 --> 01:00:48.150
之前是适当图片

01:00:48.150 --> 01:00:50.150
那么你curl index就变成了4

01:00:50.150 --> 01:00:51.150
对不对

01:00:51.150 --> 01:00:52.150
也就是下边为4

01:00:52.150 --> 01:00:53.150
下边就是5了

01:00:53.150 --> 01:00:57.150
就是超出了图片的最大下标

01:00:59.150 --> 01:01:00.150
不是图片数据

01:01:00.150 --> 01:01:01.150
图片数据是有三个

01:01:02.150 --> 01:01:03.150
生成的图片有四个

01:01:03.150 --> 01:01:06.150
超出了图片的最大下标

01:01:06.150 --> 01:01:08.150
这种情况你要特殊处理

01:01:09.150 --> 01:01:10.150
这里的

01:01:12.150 --> 01:01:13.150
如果说

01:01:15.150 --> 01:01:17.150
new index

01:01:19.150 --> 01:01:22.150
超出了图片的最大下标

01:01:22.150 --> 01:01:24.150
我们只怎么知道图片的最大下标

01:01:24.150 --> 01:01:26.150
我们就是找到图片的数量

01:01:26.150 --> 01:01:27.150
-1

01:01:27.150 --> 01:01:29.150
不就是最大下标吗

01:01:29.150 --> 01:01:31.150
图片的数量有这么一些对吧

01:01:32.150 --> 01:01:34.150
然后-1就是最大下标

01:01:34.150 --> 01:01:36.150
那么也就是说

01:01:37.150 --> 01:01:42.150
已经超出了图片的最大下标

01:01:42.150 --> 01:01:43.150
就是你加1过后

01:01:43.150 --> 01:01:46.150
已经超出了图片的最大下标

01:01:47.150 --> 01:01:48.150
不对

01:01:48.150 --> 01:01:49.150
好像不太对

01:01:49.150 --> 01:01:50.150
应该是这

01:01:50.150 --> 01:01:51.150
应该是这

01:01:51.150 --> 01:01:54.150
就是从这里切换到这

01:01:54.150 --> 01:01:56.150
就是以到达最大下标的时候

01:01:56.150 --> 01:01:57.150
不是超出

01:01:57.150 --> 01:01:59.150
从这里切换到这

01:02:00.150 --> 01:02:02.150
你看一开始在这

01:02:02.150 --> 01:02:03.150
到处第二章

01:02:03.150 --> 01:02:05.150
然后切换切换到最后一章

01:02:06.150 --> 01:02:09.150
切换完了没关系

01:02:09.150 --> 01:02:10.150
切换完了过后

01:02:10.150 --> 01:02:11.150
我们之前分析了怎么样

01:02:11.150 --> 01:02:12.150
要刷

01:02:12.150 --> 01:02:13.150
变过来

01:02:14.150 --> 01:02:15.150
用户是感觉不到的

01:02:15.150 --> 01:02:16.150
就这里

01:02:16.150 --> 01:02:17.150
你看到处第二章

01:02:17.150 --> 01:02:19.150
慢慢切换慢慢切换

01:02:19.150 --> 01:02:21.150
动画动画动画动画

01:02:22.150 --> 01:02:23.150
切换完了

01:02:23.150 --> 01:02:24.150
刷

01:02:24.150 --> 01:02:25.150
变过来

01:02:25.150 --> 01:02:28.150
所以说不是要等到这个超出

01:02:28.150 --> 01:02:30.150
你切换到最后一章的时候

01:02:32.780 --> 01:02:33.780
等于

01:02:34.780 --> 01:02:36.780
你切换到最后一章的时候

01:02:37.780 --> 01:02:38.780
切换到

01:02:39.780 --> 01:02:42.780
切换到最后一章图片

01:02:43.780 --> 01:02:44.780
这个时候要做一件事

01:02:45.780 --> 01:02:47.780
等动画完成后

01:02:48.780 --> 01:02:52.860
要回到

01:02:52.860 --> 01:02:53.860
第一章图片

01:02:54.860 --> 01:02:59.280
到底是吧

01:03:00.280 --> 01:03:01.280
等动画完成之后

01:03:02.280 --> 01:03:04.280
要回到

01:03:04.280 --> 01:03:05.280
第一章图片

01:03:06.280 --> 01:03:07.280
那么我

01:03:07.280 --> 01:03:09.280
问题是我在代码到这

01:03:09.280 --> 01:03:12.280
我怎么知道动画完了

01:03:13.280 --> 01:03:16.620
我这里能知道动画

01:03:16.620 --> 01:03:17.620
什么时候玩吗

01:03:18.620 --> 01:03:19.620
我不知道

01:03:21.620 --> 01:03:22.620
那怎么办呢

01:03:23.620 --> 01:03:24.620
哪个函数知道

01:03:25.620 --> 01:03:26.620
这个函数知道

01:03:27.620 --> 01:03:29.620
这个函数非常清楚的知道

01:03:29.620 --> 01:03:30.620
什么时候动画完成

01:03:31.620 --> 01:03:33.620
因为它这里是不是运行的函数的

01:03:33.620 --> 01:03:35.620
运行到这动画就完成了

01:03:35.620 --> 01:03:37.620
但是问题是我这个函数不知道

01:03:38.620 --> 01:03:39.620
我怎么知道动画什么时候玩

01:03:40.620 --> 01:03:42.620
我这里用个set mouse可不可以

01:03:42.620 --> 01:03:44.620
那到时也可以

01:03:44.620 --> 01:03:46.620
我们动画是300毫秒

01:03:46.620 --> 01:03:47.620
你写设字这个偷偷

01:03:47.620 --> 01:03:48.620
也没事

01:03:49.620 --> 01:03:51.620
这段时间过后你再运行这个

01:03:51.620 --> 01:03:52.620
其实也可以

01:03:52.620 --> 01:03:54.620
但是这个弹码不是很好

01:03:56.620 --> 01:03:57.620
最好了

01:03:57.620 --> 01:03:59.620
就最准准确的时间是在这

01:03:59.620 --> 01:04:00.620
动画完成

01:04:01.620 --> 01:04:02.620
但是呢

01:04:02.620 --> 01:04:03.620
这是在这个函数里边

01:04:03.620 --> 01:04:04.620
它知道

01:04:04.620 --> 01:04:05.620
但是呢

01:04:05.620 --> 01:04:06.620
这个函数它不知道

01:04:06.620 --> 01:04:08.620
那么又形成了这样的一个局面

01:04:08.620 --> 01:04:09.620
尴尬的局面

01:04:10.620 --> 01:04:13.620
我知道事情发生了

01:04:13.620 --> 01:04:14.620
在这里发生了

01:04:15.620 --> 01:04:17.620
我不知道要做啥

01:04:18.620 --> 01:04:19.620
这边呢

01:04:19.620 --> 01:04:20.620
是我知道动画完成后要做啥

01:04:20.620 --> 01:04:21.620
但是我不知道

01:04:21.620 --> 01:04:23.620
什么时候动画完成

01:04:24.620 --> 01:04:26.620
又回到我的老问题了

01:04:27.620 --> 01:04:29.620
我知道变化结束了

01:04:29.620 --> 01:04:32.620
但我不知道变化结束要做啥

01:04:33.620 --> 01:04:35.620
我知道我这一次在变化

01:04:35.620 --> 01:04:36.620
变化完了过

01:04:36.620 --> 01:04:39.620
我不知道变化完了过要做啥

01:04:39.620 --> 01:04:41.620
怎么办 回掉

01:04:42.620 --> 01:04:44.620
我这个函数稍微改造一下

01:04:44.620 --> 01:04:45.620
加一个函数

01:04:45.620 --> 01:04:46.620
又来N

01:04:47.620 --> 01:04:49.620
你给我传一个函数进来

01:04:49.620 --> 01:04:52.620
我动画完了过后会掉用这个函数

01:04:52.620 --> 01:04:53.620
那么这边

01:04:54.620 --> 01:05:03.520
当你有一个传了

01:05:03.520 --> 01:05:04.520
我才会掉用

01:05:04.520 --> 01:05:05.520
里面传我就没法掉用了

01:05:05.520 --> 01:05:06.520
所以我加一个判断

01:05:07.520 --> 01:05:08.520
那这边来

01:05:09.520 --> 01:05:11.520
我最终都要运行动画的

01:05:12.520 --> 01:05:13.520
动画完了过后

01:05:13.520 --> 01:05:14.520
我可能什么都不做

01:05:14.520 --> 01:05:15.520
比方说正常切发的时候

01:05:15.520 --> 01:05:16.520
进不了这个判断

01:05:16.520 --> 01:05:17.520
我什么都不做

01:05:18.520 --> 01:05:19.520
进到这个判断

01:05:19.520 --> 01:05:20.520
动画完了过后

01:05:20.520 --> 01:05:21.520
我要轨到第一张图片

01:05:23.520 --> 01:05:24.520
所以说呢

01:05:24.520 --> 01:05:26.520
这里我们就吃这个边两边N的

01:05:27.520 --> 01:05:28.520
为OND犯的

01:05:28.520 --> 01:05:30.520
那么这里我就给OND负责

01:05:31.520 --> 01:05:33.520
那么把OND传出来不就完了吗

01:05:33.520 --> 01:05:36.350
那么传出来

01:05:36.350 --> 01:05:37.350
这里有可能是OND犯的

01:05:37.350 --> 01:05:38.350
有可能是函数

01:05:39.350 --> 01:05:40.350
如果它传的是OND犯的

01:05:40.350 --> 01:05:41.350
到这边

01:05:41.350 --> 01:05:42.350
由于它加了判断

01:05:42.350 --> 01:05:43.350
所以它什么都不做

01:05:43.350 --> 01:05:45.350
如果它传了一个函数

01:05:45.350 --> 01:05:47.350
那么这边就会运行这个函数

01:05:47.350 --> 01:05:48.350
来数数一二三

01:05:48.350 --> 01:05:49.350
看一下

01:05:49.350 --> 01:05:50.350
下一张

01:05:51.350 --> 01:05:54.240
下一张

01:05:54.240 --> 01:05:55.240
出了问题了

01:05:55.240 --> 01:05:58.890
看一下那些出了问题

01:05:58.890 --> 01:06:00.890
DOMS CARONESS CHILL

01:06:00.890 --> 01:06:01.890
怎么又写出了

01:06:03.890 --> 01:06:04.890
下一张

01:06:04.890 --> 01:06:05.890
下一张

01:06:05.890 --> 01:06:11.080
下一张

01:06:11.080 --> 01:06:12.080
下一张

01:06:12.080 --> 01:06:13.080
下一张

01:06:13.080 --> 01:06:14.080
在这里看吧

01:06:14.080 --> 01:06:15.080
好

01:06:15.080 --> 01:06:16.080
再下一张

01:06:17.080 --> 01:06:21.800
你看是不是说一二三

01:06:21.800 --> 01:06:22.800
到了最后一张

01:06:22.800 --> 01:06:23.800
它就会做一个处理

01:06:23.800 --> 01:06:24.800
虽然目前

01:06:25.800 --> 01:06:27.800
它只是触发了这个函数

01:06:27.800 --> 01:06:29.800
那么现在我们函数触发了

01:06:29.800 --> 01:06:30.800
接下来就是

01:06:31.800 --> 01:06:32.800
要做啥

01:06:33.800 --> 01:06:34.800
动画完成了

01:06:34.800 --> 01:06:35.800
最后一张图片

01:06:35.800 --> 01:06:36.800
动画完成了

01:06:36.800 --> 01:06:37.800
你要做啥

01:06:37.800 --> 01:06:38.800
我要刷

01:06:39.800 --> 01:06:42.630
变到这

01:06:43.630 --> 01:06:44.630
对吧

01:06:44.630 --> 01:06:45.630
要做啥

01:06:46.630 --> 01:06:47.630
就是设置

01:06:47.630 --> 01:06:50.960
DOMS

01:06:50.960 --> 01:06:51.960
CHARACEL

01:06:51.960 --> 01:06:52.960
Style

01:06:52.960 --> 01:06:53.960
Marginance

01:06:53.960 --> 01:06:54.960
社会利用

01:06:55.960 --> 01:06:56.960
然后不要忘记

01:06:56.960 --> 01:07:00.110
还有Current

01:07:00.110 --> 01:07:01.110
这个社

01:07:01.110 --> 01:07:02.110
要社会利用

01:07:03.110 --> 01:07:04.110
现在我们回到

01:07:04.110 --> 01:07:08.850
第一张图片

01:07:08.850 --> 01:07:10.850
它下表要回归到你

01:07:10.850 --> 01:07:11.850
好 咱们再看

01:07:12.850 --> 01:07:13.850
把

01:07:14.850 --> 01:07:15.850
时间调长一点吧

01:07:16.850 --> 01:07:17.850
调成一千三

01:07:18.850 --> 01:07:19.850
好 下一张

01:07:19.850 --> 01:07:20.850
变化变化

01:07:23.680 --> 01:07:24.680
下一张

01:07:25.680 --> 01:07:26.680
下一张

01:07:27.680 --> 01:07:28.680
下一张

01:07:29.680 --> 01:07:30.680
下一张

01:07:31.680 --> 01:07:32.680
好 看着

01:07:33.680 --> 01:07:34.680
目前还不是最

01:07:35.680 --> 01:07:36.680
现在我们再往

01:07:36.680 --> 01:07:37.680
现在切换到最后一张了

01:07:37.680 --> 01:07:38.680
我们继续往

01:07:38.680 --> 01:07:39.680
后边切换

01:07:39.680 --> 01:07:40.680
你看会发生什么事

01:07:40.680 --> 01:07:41.680
下一张切换

01:07:42.680 --> 01:07:43.680
切换完了过后

01:07:43.680 --> 01:07:44.680
是不是又回到第一张了

01:07:44.680 --> 01:07:46.680
拥护在界面上是感觉不到的

01:07:46.680 --> 01:07:47.680
因为最后一张

01:07:47.680 --> 01:07:48.680
跟这一张

01:07:48.680 --> 01:07:49.680
第一张是一模一样的

01:07:49.680 --> 01:07:50.680
切换回来他感觉不到

01:07:50.680 --> 01:07:51.680
但是是一张已经回来了

01:07:51.680 --> 01:07:52.680
这样子

01:07:52.680 --> 01:07:53.680
我们再往后切换

01:07:53.680 --> 01:07:54.680
是不是又重新开始了

01:07:54.680 --> 01:07:55.680
Current那个是从零开始的

01:07:55.680 --> 01:07:56.680
对吧

01:07:56.680 --> 01:07:57.680
又第一张

01:07:59.680 --> 01:08:00.680
再下一张

01:08:01.680 --> 01:08:02.680
再下一张

01:08:03.680 --> 01:08:04.680
再下一张

01:08:05.680 --> 01:08:06.680
又回到第一张了

01:08:07.680 --> 01:08:08.680
如果说你要再看着

01:08:08.680 --> 01:08:09.680
清楚一点的话

01:08:09.680 --> 01:08:11.680
我可以把这个给你打开

01:08:16.840 --> 01:08:17.840
把这个

01:08:19.840 --> 01:08:20.840
Overflow

01:08:20.840 --> 01:08:21.840
把这两个打开

01:08:21.840 --> 01:08:22.840
Overflow还能打开

01:08:23.840 --> 01:08:24.840
这样子看得非常清楚

01:08:25.840 --> 01:08:26.840
把缩小一点

01:08:27.840 --> 01:08:32.270
好 下一张

01:08:33.270 --> 01:08:34.270
下一张

01:08:35.270 --> 01:08:36.270
再下一张

01:08:37.270 --> 01:08:38.270
再下一张

01:08:39.270 --> 01:08:40.270
好 注意看着

01:08:40.270 --> 01:08:41.270
再下一张

01:08:43.270 --> 01:08:44.270
看到没

01:08:44.270 --> 01:08:45.270
再下一张

01:08:45.270 --> 01:08:46.270
这个是无缝

01:08:47.270 --> 01:08:48.270
这是那个时候的函数

01:08:48.270 --> 01:08:49.270
那么这个函数

01:08:49.270 --> 01:08:50.270
写完了过后

01:08:50.270 --> 01:08:51.270
再来写Private函数

01:08:51.270 --> 01:08:52.270
就不复杂了

01:08:52.270 --> 01:08:54.270
无缝切换到上一张

01:08:54.270 --> 01:08:55.270
到底是一样的

01:08:55.270 --> 01:08:57.270
新的下标等约

01:08:58.270 --> 01:08:59.270
Current那个时候

01:08:59.270 --> 01:09:00.270
减1

01:09:00.270 --> 01:09:01.270
对吧

01:09:03.270 --> 01:09:04.270
切换到新的下标

01:09:05.270 --> 01:09:06.270
这是上一张

01:09:06.270 --> 01:09:07.270
我们来看

01:09:07.270 --> 01:09:08.270
下一张

01:09:11.030 --> 01:09:13.030
我就把那个打开吧

01:09:13.030 --> 01:09:14.030
把那个打开

01:09:14.030 --> 01:09:20.950
下一张

01:09:21.950 --> 01:09:22.950
下一张

01:09:22.950 --> 01:09:23.950
好 上一张

01:09:25.950 --> 01:09:26.950
上一张

01:09:26.950 --> 01:09:27.950
目前都没有问题

01:09:27.950 --> 01:09:28.950
对吧

01:09:28.950 --> 01:09:29.950
So far so good

01:09:30.950 --> 01:09:31.950
再上一张

01:09:31.950 --> 01:09:32.950
好 这个时候

01:09:32.950 --> 01:09:33.950
再上一张怎么办

01:09:36.960 --> 01:09:37.960
上一张没了

01:09:37.960 --> 01:09:38.960
怎么办

01:09:40.960 --> 01:09:41.960
那怎么办呢

01:09:41.960 --> 01:09:42.960
我们又回到

01:09:42.960 --> 01:09:44.960
我们之前的逻辑示意图

01:09:45.960 --> 01:09:46.960
这个时候

01:09:46.960 --> 01:09:47.960
还要上一张怎么办

01:09:48.960 --> 01:09:50.960
我先不着急进行动画

01:09:50.960 --> 01:09:51.960
我先刷

01:09:51.960 --> 01:09:52.960
变到这个位置

01:09:53.960 --> 01:09:54.960
然后再上一张

01:09:56.960 --> 01:09:57.960
懂得意思

01:09:57.960 --> 01:09:59.960
我想给刷可以变到这个位置

01:09:59.960 --> 01:10:00.960
然后再上一张

01:10:01.960 --> 01:10:02.960
好 所以说

01:10:02.960 --> 01:10:04.960
这里的处理方式

01:10:04.960 --> 01:10:05.960
刚刚之前是在动画之后

01:10:05.960 --> 01:10:06.960
对吧

01:10:06.960 --> 01:10:07.960
现在我在动画之前进行处理

01:10:07.960 --> 01:10:10.960
如果说6 Index小鱼的0

01:10:10.960 --> 01:10:14.530
要切换到现在的前面一张

01:10:14.530 --> 01:10:15.530
就第一张的前面那一张

01:10:15.530 --> 01:10:16.530
就小鱼的0了

01:10:16.530 --> 01:10:17.530
对吧

01:10:17.530 --> 01:10:18.530
那么这个时候

01:10:18.530 --> 01:10:21.530
我先把它变到最后一张

01:10:21.530 --> 01:10:24.530
先把这个Cyrus Celesis

01:10:25.530 --> 01:10:28.530
Margin Left变到最后一个位置

01:10:28.530 --> 01:10:30.530
那么最后一个位置是最大下标

01:10:30.530 --> 01:10:31.530
最大下标是多少

01:10:32.530 --> 01:10:33.530
最大下标

01:10:33.530 --> 01:10:35.530
最大下标不是图片的数量吗

01:10:35.530 --> 01:10:36.530
数量减1吗

01:10:36.530 --> 01:10:37.530
所以说就是doms

01:10:37.530 --> 01:10:38.530
Cyrus Celesis

01:10:38.530 --> 01:10:39.530
Chill

01:10:41.530 --> 01:10:42.530
Nest减1

01:10:42.530 --> 01:10:43.530
就最大下标

01:10:43.530 --> 01:10:44.530
那么就是复物的

01:10:44.530 --> 01:10:45.530
最大下标

01:10:45.530 --> 01:10:46.530
乘以宽度

01:10:47.530 --> 01:10:50.530
我们先给他跑到最后一张再说

01:10:50.530 --> 01:10:51.530
然后再进行动画

01:10:51.530 --> 01:10:53.530
好 现在我们把动画取消掉

01:10:53.530 --> 01:10:55.530
看一下这个东西是不是跑到最后一张了

01:10:55.530 --> 01:10:57.530
现在我们上一张

01:10:57.530 --> 01:11:00.530
你看我先跑到最后一张的位置

01:11:00.530 --> 01:11:03.530
同时把Cyrus Celesis也设置一下

01:11:03.530 --> 01:11:05.530
当前的下标

01:11:05.530 --> 01:11:07.530
新的下标

01:11:07.530 --> 01:11:08.530
你要跑到哪去呢

01:11:08.530 --> 01:11:09.530
实际上你上一张

01:11:09.530 --> 01:11:10.530
下标是在这

01:11:10.530 --> 01:11:11.530
对不对

01:11:11.530 --> 01:11:12.530
是倒数第二张

01:11:13.530 --> 01:11:15.530
你的下标是倒数第二张

01:11:15.530 --> 01:11:16.530
所以说

01:11:16.530 --> 01:11:18.530
下标是最大下标减1

01:11:18.530 --> 01:11:19.530
就是我的目标下标

01:11:19.530 --> 01:11:20.530
不是小余凝

01:11:20.530 --> 01:11:22.530
现在已经搞到小余凝了

01:11:22.530 --> 01:11:24.530
现在我们要把它设置到

01:11:24.530 --> 01:11:25.530
最大下标减1

01:11:25.530 --> 01:11:27.530
就是这是我们的目标位置

01:11:28.530 --> 01:11:30.530
先把它切换到这个位置

01:11:30.530 --> 01:11:33.530
然后再把目标位置设置成这个

01:11:33.530 --> 01:11:35.530
然后再来调用这个

01:11:35.530 --> 01:11:36.530
Move to

01:11:36.530 --> 01:11:37.530
就完成了

01:11:38.530 --> 01:11:39.530
好 来看一下

01:11:39.530 --> 01:11:40.530
Cyrus

01:11:40.530 --> 01:11:43.360
Nest

01:11:45.730 --> 01:11:46.730
Cyrus

01:11:47.730 --> 01:11:50.730
好 接下来我们把这个Overflow加上

01:11:51.730 --> 01:11:52.730
它就不会闪烁

01:11:57.800 --> 01:11:58.800
上一张

01:11:59.800 --> 01:12:01.800
非常平滑 对吧

01:12:01.800 --> 01:12:02.800
下一张

01:12:02.800 --> 01:12:03.800
再下一张

01:12:05.800 --> 01:12:06.800
再上一张

01:12:07.800 --> 01:12:08.800
再上一张

01:12:08.800 --> 01:12:11.240
好 接下来

01:12:11.240 --> 01:12:13.240
接下来的事情还用说吗

01:12:14.240 --> 01:12:15.240
你看

01:12:15.240 --> 01:12:16.240
这些函数完成了

01:12:16.240 --> 01:12:18.240
我现在注册时间了吗

01:12:18.240 --> 01:12:19.240
基本上没有打注册时间

01:12:19.240 --> 01:12:20.240
对吧 注册时间

01:12:20.240 --> 01:12:21.240
之前注册个点击时间

01:12:21.240 --> 01:12:22.240
就这么几行

01:12:23.240 --> 01:12:24.240
现在要注册时间

01:12:24.240 --> 01:12:25.240
太简单了

01:12:26.240 --> 01:12:28.240
把这些功能都写完了

01:12:28.240 --> 01:12:30.240
就是把这个时间给它连上对吧

01:12:30.240 --> 01:12:32.240
就跟用户的交互一连

01:12:32.240 --> 01:12:33.240
把功能跟用户的交互一连

01:12:33.240 --> 01:12:34.240
就完事了

01:12:35.240 --> 01:12:36.240
Arrow

01:12:36.240 --> 01:12:37.240
Nest

01:12:37.240 --> 01:12:39.240
左边箭头点击的时候

01:12:39.240 --> 01:12:40.240
雕用什么

01:12:40.240 --> 01:12:41.240
雕用Prave

01:12:42.240 --> 01:12:44.240
右边箭头点击的时候

01:12:46.740 --> 01:12:47.740
雕用Nest

01:12:48.740 --> 01:12:49.740
把函数直接给它就完事了

01:12:49.740 --> 01:12:51.740
它不就是想要个函数吗

01:12:51.740 --> 01:12:52.740
给它就完事了

01:12:52.740 --> 01:12:56.500
把时间稍微调一下

01:13:05.280 --> 01:13:06.280
你看事件是最简单的

01:13:08.840 --> 01:13:09.840
然后还有自动呢

01:13:09.840 --> 01:13:11.840
自动我就写两个函数

01:13:11.840 --> 01:13:12.840
一个是自动开始

01:13:12.840 --> 01:13:13.840
一个是自动结束

01:13:14.840 --> 01:13:15.840
来了

01:13:15.840 --> 01:13:16.840
Out to start

01:13:16.840 --> 01:13:17.840
自动开始切换

01:13:17.840 --> 01:13:18.840
然后呢

01:13:18.840 --> 01:13:19.840
一个是自动结束切换

01:13:19.840 --> 01:13:20.840
Out to start

01:13:21.840 --> 01:13:25.600
要这个函数就自动开始

01:13:25.600 --> 01:13:26.600
那么这里要需要一个变量

01:13:26.600 --> 01:13:29.600
就是每个多少时间切换影视

01:13:29.600 --> 01:13:31.600
然后每个两秒钟切换影视

01:13:33.600 --> 01:13:35.600
自动切换的间隔

01:13:37.600 --> 01:13:40.600
好那么这里等我就是set interval

01:13:45.280 --> 01:13:47.280
每个多少时间

01:13:47.280 --> 01:13:49.280
每个多少时间的Duration

01:13:50.280 --> 01:13:52.280
雕用什么呢

01:13:52.280 --> 01:13:53.280
雕用Nest

01:13:54.280 --> 01:13:55.280
完了

01:13:56.280 --> 01:13:59.280
每个两秒钟雕用影视这个Nest函数

01:13:59.280 --> 01:14:00.280
就自动切换了

01:14:01.280 --> 01:14:02.280
Out to start

01:14:04.280 --> 01:14:06.280
每个两秒钟自动雕用Nest

01:14:07.280 --> 01:14:08.280
就切换了

01:14:08.280 --> 01:14:09.280
把功能写完了

01:14:09.280 --> 01:14:10.280
剩下这些事情简单的不得了

01:14:12.280 --> 01:14:14.280
但是现在要考虑到一个小细节

01:14:14.280 --> 01:14:17.280
就是如果说这个函数被反覆调用

01:14:17.280 --> 01:14:19.280
它就会变得越来越快

01:14:19.280 --> 01:14:20.280
越来越快

01:14:20.280 --> 01:14:21.280
越来越快

01:14:21.280 --> 01:14:22.280
因为它开了很多的计时器

01:14:22.280 --> 01:14:23.280
对吧

01:14:23.280 --> 01:14:25.280
它切换的计时器不停的开

01:14:25.280 --> 01:14:26.280
所以说呢

01:14:26.280 --> 01:14:27.280
这些小细节

01:14:28.280 --> 01:14:29.280
就写一些无论手写

01:14:29.280 --> 01:14:31.280
接SR还是写什么东西

01:14:32.280 --> 01:14:34.280
你只要把功能做完善了

01:14:34.280 --> 01:14:35.280
剩下的事情都简单

01:14:36.280 --> 01:14:38.280
就尽量把功能做完善一点

01:14:39.280 --> 01:14:40.280
那么我如何来避免这种情况呢

01:14:41.280 --> 01:14:42.280
那么是不是又可以说这个变量

01:14:42.280 --> 01:14:44.280
看一下之前有没有计时器

01:14:45.280 --> 01:14:48.240
每调用这个函数

01:14:48.240 --> 01:14:50.240
我就把一个计时器给它复制

01:14:51.240 --> 01:14:52.240
在复制之前我判断一下

01:14:52.240 --> 01:14:54.240
之前有没有计时器

01:14:54.240 --> 01:14:56.240
如果说有计时器

01:14:56.240 --> 01:15:01.240
已经有自动切换在进行了

01:15:01.240 --> 01:15:03.240
那么这个时候就不要做任何事情

01:15:04.240 --> 01:15:06.240
加上这么一个判断就完了

01:15:06.240 --> 01:15:09.930
好那么这样子你看

01:15:09.930 --> 01:15:10.930
自动切换开始

01:15:10.930 --> 01:15:11.930
两秒钟切换一次

01:15:11.930 --> 01:15:13.930
然后再不停的调用

01:15:13.930 --> 01:15:14.930
但无销了

01:15:14.930 --> 01:15:15.930
因为它目前已经有切换了

01:15:15.930 --> 01:15:17.930
这个计时器是有值的

01:15:17.930 --> 01:15:18.930
也不会出问题

01:15:20.930 --> 01:15:22.930
好来停止切换

01:15:22.930 --> 01:15:23.930
然后停止切换非常简单

01:15:23.930 --> 01:15:25.930
Clear 引头

01:15:25.930 --> 01:15:26.930
Timer ID

01:15:26.930 --> 01:15:28.930
把这个计时器ID传进去

01:15:28.930 --> 01:15:30.930
同时不要忘记把计时器ID设为NOW

01:15:30.930 --> 01:15:31.930
为什么要设为NOW呢

01:15:32.930 --> 01:15:34.930
你如果说不设为NOW

01:15:34.930 --> 01:15:35.930
一看会怎么样

01:15:36.930 --> 01:15:37.930
自动切换开始

01:15:38.930 --> 01:15:39.930
这倒是没什么问题

01:15:39.930 --> 01:15:40.930
停止切换

01:15:41.930 --> 01:15:42.930
Stop

01:15:44.930 --> 01:15:45.930
Stop

01:15:46.930 --> 01:15:47.930
好停止切换了

01:15:47.930 --> 01:15:49.930
那么这个也停止了

01:15:49.930 --> 01:15:51.930
然后我再要重新启动自动切换

01:15:51.930 --> 01:15:52.930
你发现启动不了

01:15:53.930 --> 01:15:54.930
为什么呢

01:15:55.930 --> 01:15:57.930
你只是把计时器停止了

01:15:57.930 --> 01:15:58.930
但是这个东西有没有值

01:15:58.930 --> 01:15:59.930
它还是有值的

01:15:59.930 --> 01:16:01.930
值还是没变

01:16:01.930 --> 01:16:03.930
然后它之前的计时器ID是1000

01:16:03.930 --> 01:16:05.930
你只是把计时器停了

01:16:05.930 --> 01:16:06.930
但是它值没有变

01:16:06.930 --> 01:16:08.930
就会导致在重新切换的时候

01:16:08.930 --> 01:16:09.930
发现它有值

01:16:09.930 --> 01:16:11.930
它以为还在切换

01:16:11.930 --> 01:16:12.930
所以说你停止的时候

01:16:12.930 --> 01:16:13.930
要把它切

01:16:13.930 --> 01:16:14.930
所谓NOW

01:16:14.930 --> 01:16:15.930
就保证这个变量

01:16:15.930 --> 01:16:17.930
它为空就没有计时器

01:16:17.930 --> 01:16:19.930
它不为空就有计时器

01:16:19.930 --> 01:16:21.930
保证它的逻辑的统一性

01:16:22.930 --> 01:16:23.930
这两个还是有切换

01:16:23.930 --> 01:16:24.930
那么现在就看

01:16:24.930 --> 01:16:25.930
自动切换

01:16:26.930 --> 01:16:29.310
停止切换

01:16:31.310 --> 01:16:32.310
不切换了

01:16:32.310 --> 01:16:33.310
自动切换

01:16:37.540 --> 01:16:38.540
停止切换

01:16:38.540 --> 01:16:39.540
不切换

01:16:39.540 --> 01:16:40.540
这两个还是有切换

01:16:40.540 --> 01:16:41.540
事情又没了

01:16:42.540 --> 01:16:44.540
一开始我们自动切换

01:16:44.540 --> 01:16:46.540
逻辑是一开始自动切换

01:16:46.540 --> 01:16:47.540
对吧

01:16:47.540 --> 01:16:48.540
最开始

01:16:48.540 --> 01:16:49.540
自动切换

01:16:50.540 --> 01:16:51.540
然后

01:16:51.540 --> 01:16:53.540
当我们鼠标移入到这个容器的时候

01:17:01.040 --> 01:17:04.040
当鼠标移入的时候停止切换

01:17:04.040 --> 01:17:08.740
然后以后我们鼠标又移出了

01:17:08.740 --> 01:17:10.740
移出了自动切换又开始了

01:17:10.740 --> 01:17:16.740
almost live out to start

01:17:17.740 --> 01:17:18.740
三行代码就写完

01:17:19.740 --> 01:17:21.740
所以说大家可以体会到

01:17:21.740 --> 01:17:22.740
咱们做这个

01:17:22.740 --> 01:17:23.740
这些效果的时候

01:17:25.740 --> 01:17:26.740
almost live

01:17:29.050 --> 01:17:30.050
almost

01:17:31.050 --> 01:17:32.050
对我写错了

01:17:33.050 --> 01:17:34.050
在做这些事情的时候

01:17:34.050 --> 01:17:36.050
关键就是把它分解成函数

01:17:36.050 --> 01:17:37.050
关键核心函数

01:17:37.050 --> 01:17:38.050
还不像函数一写完

01:17:38.050 --> 01:17:40.050
事情就变得非常简单

01:17:41.050 --> 01:17:42.050
鼠标移入

01:17:43.050 --> 01:17:44.050
不再切换

01:17:44.050 --> 01:17:45.050
鼠标移出

01:17:47.050 --> 01:17:48.050
又开始切换

01:17:49.050 --> 01:17:50.050
鼠标移入

01:17:50.050 --> 01:17:52.050
那么我们在这里可以控制

01:17:53.050 --> 01:17:55.050
这就是咱们的无缝轮波图

01:17:58.050 --> 01:18:00.050
这个还是有一定的难度

01:18:00.050 --> 01:18:01.050
下面来大家

01:18:01.050 --> 01:18:02.050
根据我的思维

01:18:02.050 --> 01:18:04.050
你可以比较长

01:18:05.050 --> 01:18:07.050
如果说你一边停下来

01:18:07.050 --> 01:18:08.050
比较懵的话

01:18:08.050 --> 01:18:09.050
那么我建议你可以这样走

01:18:09.050 --> 01:18:11.050
你可以回去

01:18:11.050 --> 01:18:13.050
先听初始化部分

01:18:14.050 --> 01:18:15.050
然后听完了过

01:18:15.050 --> 01:18:16.050
你先不着急往后听的

01:18:16.050 --> 01:18:18.050
先把这一块写出来

01:18:18.050 --> 01:18:19.050
消化

01:18:19.050 --> 01:18:20.050
消化清楚了过后

01:18:20.050 --> 01:18:21.050
继续往后听

01:18:21.050 --> 01:18:22.050
后边比较模糊的话

01:18:22.050 --> 01:18:23.050
你就看

01:18:23.050 --> 01:18:24.050
听一个函数

01:18:24.050 --> 01:18:25.050
一个函数写完了过后

01:18:25.050 --> 01:18:26.050
你就写出来

01:18:26.050 --> 01:18:28.050
然后单独对这个函数进行测试

01:18:28.050 --> 01:18:29.050
怎么测试我都演示过了

01:18:29.050 --> 01:18:31.050
直接在控制台里面吊就行了

01:18:32.050 --> 01:18:33.050
当然还要不要忘记

01:18:33.050 --> 01:18:35.050
最后写完了之后

01:18:36.050 --> 01:18:38.050
你把它放到一个立即执行函数里面去

01:18:38.050 --> 01:18:41.490
把避免权力变点无涨

01:18:41.490 --> 01:18:44.870
当然不会有任何问题

01:18:44.870 --> 01:18:47.180
OK

01:18:47.180 --> 01:18:49.180
那么这就是一个轮波图效果

