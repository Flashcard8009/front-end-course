WEBVTT

00:00.000 --> 00:17.290
这些课咱们来讲一讲关于GS里面的错误处理

00:18.390 --> 00:21.890
应该是我们GS基础部分的最后一节课了

00:22.390 --> 00:25.290
如果我之前还忘了讲一些东西的话以后再补充吧

00:25.490 --> 00:29.890
反正我们GS基础部分基本上这一课讲完了就没了

00:29.990 --> 00:31.990
后边我们就开始学习网页了

00:31.990 --> 00:33.690
在网页上各种各样的操作

00:33.790 --> 00:36.790
其实那一块都是非常非常简单的

00:37.090 --> 00:38.490
既有趣又简单

00:38.490 --> 00:39.790
而且又能看到效果

00:39.990 --> 00:41.390
学习起来是非常有意思的

00:41.590 --> 00:43.490
但是你必须要经过这么一个过程

00:43.490 --> 00:45.190
要把基础部分掌握牢固

00:45.590 --> 00:47.690
然后再去看网页的话就非常简单了

00:48.390 --> 00:50.990
咱们来说一下关于错误处理

00:51.290 --> 00:57.290
其实GS这一部分错误处理也是比较多的开发者容易忽视的地方

00:57.890 --> 00:59.790
因为在一些其他语言里边

00:59.790 --> 01:03.990
比方说C语言 加把语言 C sharp语言这些语言里边

01:04.190 --> 01:05.990
错误处理是非常非常重要的

01:06.190 --> 01:09.890
但是GS这个语言由于它历史的原因

01:10.290 --> 01:14.690
它本来出现的时候就是为了做一些简单的页面效果出现的

01:14.990 --> 01:18.790
并没有想到现在前端对GS语言依赖这么强烈

01:18.990 --> 01:21.690
而且GS语言现在可以开发一些大型应用了

01:21.990 --> 01:26.090
所以说错误处理越来越被开发者所重视起来了

01:26.290 --> 01:28.690
所以说我们这一块就讲一讲错误处理

01:28.990 --> 01:34.890
其实在很多年前错误处理在GS开发者之间是不太重视的

01:35.390 --> 01:36.590
但是现在要重视起来了

01:38.190 --> 01:40.390
虽然说我们后边写代码的时候

01:40.390 --> 01:43.890
关于错误处理这一块的知识可能不怎么会用

01:44.390 --> 01:47.590
后面我们会看到写页面效果 做各种处理

01:47.790 --> 01:49.790
都不太会用这个错误处理的知识

01:49.890 --> 01:51.390
但是这个知识仍然重要

01:51.590 --> 01:55.390
你们以后到公司里边去开发一些大型项目的时候

01:55.990 --> 01:57.190
都需要这一块知识

01:57.590 --> 02:00.090
只不过我们由于目前学习的时候

02:00.090 --> 02:02.590
我不可能给你一个大型项目来让你去开发

02:02.890 --> 02:06.690
开发一个大型项目整个半年就把GS搞清楚了

02:06.690 --> 02:07.490
有什么意义的

02:07.490 --> 02:10.490
而且开发大型项目是需要什么还需要框架的

02:10.490 --> 02:12.490
我们现在还没有框架的知识 对吧

02:12.590 --> 02:14.690
但是错误处理了我们先把讲了

02:14.990 --> 02:17.690
咱们以后你们以后到公司里边要用到的时候

02:17.890 --> 02:18.890
回过头来看一下

02:19.190 --> 02:20.990
因此到这些课没有什么作业

02:20.990 --> 02:23.590
作业也没有什么作业

02:23.590 --> 02:25.690
就是讲一讲知识 聊一聊

02:26.990 --> 02:29.090
首先我们说一下关于这个错误

02:29.090 --> 02:31.090
GS中的错误大概分为两种

02:33.000 --> 02:34.200
分为两种

02:34.500 --> 02:36.400
第一种错误叫做语法错误

02:37.400 --> 02:39.100
什么叫语法错误呢 给大家看一下吧

02:41.010 --> 02:41.510
TES

02:42.210 --> 02:42.910
这样一停秒

02:44.610 --> 02:45.410
看一下啊

02:46.610 --> 02:47.810
啥叫语法错误

02:48.210 --> 02:49.310
语法错误就是这种

02:49.910 --> 02:50.410
这种

02:52.390 --> 02:53.490
这种就是语法错误

02:53.690 --> 02:55.790
它语法都不满足协法

02:55.790 --> 02:56.790
都不满足要求

02:57.190 --> 02:59.290
这种错误它会怎么样呢

02:59.790 --> 03:03.790
它会它直接会让这个代码块无法执行

03:04.290 --> 03:05.390
比方说我们这里输出

03:05.690 --> 03:06.890
这是一个正确的语法

03:06.890 --> 03:08.290
上面这句语法是错的

03:08.490 --> 03:10.290
然后我们在这里上面再输出

03:10.290 --> 03:11.890
这里输出 1 这里输出 2

03:12.090 --> 03:12.890
我们看一下

03:13.090 --> 03:13.590
看一下

03:14.190 --> 03:14.690
运行

03:17.160 --> 03:18.160
看一下有没有输出

03:18.160 --> 03:19.660
咱们主要是看一下有没有输出

03:19.960 --> 03:20.860
刷新你看一下

03:21.160 --> 03:22.960
是不是没有输出 啥输出都没有

03:23.160 --> 03:25.160
所以说语法错误也可以看到这里

03:25.260 --> 03:25.960
它告诉你

03:26.160 --> 03:27.060
uncult

03:27.160 --> 03:27.860
uncult

03:28.060 --> 03:29.360
表示未捕获

03:29.360 --> 03:30.860
我们以后会讲捕获

03:31.160 --> 03:32.260
未捕获的

03:32.460 --> 03:33.260
什么东西呢

03:33.360 --> 03:34.160
sintax

03:34.460 --> 03:35.260
syntax

03:35.360 --> 03:36.460
表示的是语法

03:36.660 --> 03:37.860
error表示错误

03:38.560 --> 03:40.260
未捕获的语法错误

03:40.360 --> 03:42.160
就是这个语法错误你没有处理

03:42.660 --> 03:44.160
然后这里给你写了个什么

03:44.360 --> 03:45.060
给你写了个什么

03:45.360 --> 03:46.960
un-expected token

03:47.360 --> 03:48.360
表示的是什么意思

03:48.460 --> 03:49.560
表示的是就是

03:49.660 --> 03:50.860
你这个错误的信息

03:50.860 --> 03:52.160
什么问题导致的呢

03:52.160 --> 03:53.360
后面有一个行号

03:53.360 --> 03:54.260
十四行

03:54.660 --> 03:56.460
在ATM文件的十四行

03:56.460 --> 03:57.060
你点一下

03:57.060 --> 03:57.760
它会告诉你

03:57.860 --> 03:58.460
在这个地方

03:58.460 --> 03:59.760
你有一个语法错误

04:00.360 --> 04:00.760
好吧

04:00.760 --> 04:01.760
这是关于这个

04:02.660 --> 04:03.560
语法错误

04:03.860 --> 04:05.360
语法错误的特点是

04:05.660 --> 04:07.060
会导致

04:07.760 --> 04:08.560
整个

04:09.060 --> 04:09.960
脚本扩

04:11.960 --> 04:12.860
无法执行

04:12.960 --> 04:14.060
一行都执行不了

04:14.560 --> 04:15.860
这里就奇怪了

04:15.860 --> 04:17.960
因为我们之前说过借言是语言

04:17.960 --> 04:19.760
它是一个解释型的语言

04:19.960 --> 04:21.260
它看一句执行一句

04:21.260 --> 04:22.560
看一句执行一句

04:22.760 --> 04:23.760
那就奇怪了

04:23.760 --> 04:25.760
它现在十四行出现了错误

04:25.760 --> 04:27.560
但是十三行已经看过一遍了

04:27.560 --> 04:28.660
看过一遍是正确的

04:28.660 --> 04:29.960
它应该输出一彩队

04:30.160 --> 04:32.160
然后到了第十四行才输出错误

04:32.260 --> 04:34.960
那怎么为什么连这一行都没有输出呢

04:35.260 --> 04:37.760
是因为借言是在执行代码的时候呢

04:37.960 --> 04:40.060
它虽然说是看一行执行一行

04:40.160 --> 04:40.960
但是呢

04:41.060 --> 04:42.660
它在看一行之前

04:42.760 --> 04:44.760
首先它会对整个代码块

04:44.960 --> 04:45.760
浏览一遍

04:45.760 --> 04:46.560
瞄一眼

04:46.560 --> 04:48.660
瞄一眼你有没有语法错误

04:48.860 --> 04:50.260
如果你有语法错误的话

04:50.260 --> 04:51.460
整个代码块

04:51.560 --> 04:52.760
整个脚本块

04:52.860 --> 04:53.960
一行都不执行

04:54.960 --> 04:57.060
但是如果你写了其他的脚本块

04:57.060 --> 04:57.760
不影响

04:58.060 --> 04:59.360
然后其他脚本块里边

04:59.360 --> 05:00.760
你写了一个concent log

05:02.460 --> 05:03.160
A1

05:04.260 --> 05:05.360
这里写一个

05:05.960 --> 05:07.760
其他脚本块里边写了一个A2

05:07.860 --> 05:08.560
看一下啊

05:09.060 --> 05:09.760
保存看一下

05:10.660 --> 05:13.760
你看A1和A2是执行代的

05:13.960 --> 05:15.960
也就是它不会影响其他的脚本块

05:15.960 --> 05:18.060
它只会影响当前的脚本块

05:18.860 --> 05:20.560
导致整个脚本块无法执行

05:20.960 --> 05:21.360
而且呢

05:21.360 --> 05:22.060
语法错误呢

05:22.060 --> 05:22.960
还有一个特点就是

05:23.460 --> 05:24.960
非常容易发现

05:25.360 --> 05:26.560
你说你看这个玩意

05:26.560 --> 05:27.760
你看不出来有错吗

05:28.460 --> 05:28.960
啊

05:29.360 --> 05:30.460
你看不出来有错吗

05:30.660 --> 05:32.260
啊开发者不需要势力吗

05:32.260 --> 05:32.760
是吧

05:33.060 --> 05:34.460
你看这里已经在提示你了

05:34.460 --> 05:35.760
这个地方有错误啊

05:35.760 --> 05:37.460
你看这里也在提示你

05:37.460 --> 05:38.960
你看这个文件甲有错误

05:38.960 --> 05:40.060
看到没红色的

05:40.260 --> 05:41.460
这个文件甲有错误

05:41.460 --> 05:42.960
这个文件甲里边哪个地方有错误了

05:42.960 --> 05:44.060
这个文件里面有错误

05:44.060 --> 05:45.160
有三个语法错误

05:45.160 --> 05:46.660
这些地方都是语法错误

05:46.760 --> 05:48.660
你需要去处理啊需要去处理

05:49.060 --> 05:50.660
这个叫做语法错误

05:50.960 --> 05:51.760
明白这个意思吧

05:52.460 --> 05:53.660
好第二种错误

05:54.160 --> 05:55.660
第二种错误呢又分为两种

05:55.660 --> 05:57.760
把它都统称为运行错误

05:57.860 --> 05:59.060
它又分为两种

05:59.260 --> 06:01.160
第一种的是运行爆错

06:02.360 --> 06:03.360
运行爆错

06:03.360 --> 06:06.860
另一种的是运行结果不符合预期

06:08.830 --> 06:09.830
符合预期

06:10.130 --> 06:11.430
好我们看第一种啊

06:11.430 --> 06:13.530
第一种是运行爆错

06:13.730 --> 06:14.830
这是什么的情况呢

06:14.830 --> 06:16.130
就它没有语法错误

06:16.130 --> 06:17.630
比方说啊咱们这里呢

06:17.630 --> 06:18.630
写个abc

06:18.830 --> 06:19.630
abc

06:20.630 --> 06:21.730
输出一个abc

06:21.730 --> 06:23.430
比方说咱们输出一个abc

06:23.530 --> 06:24.830
它语法有没有错误

06:24.930 --> 06:25.930
语法没有错误

06:25.930 --> 06:27.830
你没有少写什么小括号

06:27.830 --> 06:29.030
也没有写中文符号

06:29.030 --> 06:30.430
它语法没有任何问题

06:30.630 --> 06:32.130
比方说你这里写个中文符号

06:32.230 --> 06:33.130
一个中文的句号

06:33.130 --> 06:34.530
你看这就是语法错误

06:34.530 --> 06:34.930
对吧

06:35.330 --> 06:36.930
你这里语法是没有问题的

06:37.130 --> 06:39.330
但是呢由于这个辩量不存在

06:39.330 --> 06:41.530
在运行的过程中发生错误了

06:41.730 --> 06:42.930
语法没问题的话

06:42.930 --> 06:44.030
它就会正常运行

06:44.330 --> 06:45.930
一句一句进行运行

06:46.030 --> 06:48.230
运行到猛一句发生问题的时候了

06:48.230 --> 06:49.230
它就不再运行了

06:49.430 --> 06:50.330
好看一下啊

06:51.230 --> 06:52.530
你看它这里会发生错误

06:52.530 --> 06:54.030
你看第一个意思不输出了

06:54.130 --> 06:54.330
对吧

06:54.330 --> 06:56.730
它不会影响之前代码的运行

06:57.230 --> 06:59.230
它告诉你这里出现了一个运行错误

06:59.230 --> 07:00.830
abc is not defend

07:01.630 --> 07:02.630
这种错误呢

07:02.730 --> 07:04.230
叫做运行错误

07:04.830 --> 07:05.830
运行爆错

07:06.130 --> 07:07.330
运行爆错呢

07:07.830 --> 07:08.630
它会怎么样的

07:08.630 --> 07:11.430
会导致当前脚本块

07:12.430 --> 07:14.630
后续代码无法执行

07:15.230 --> 07:17.030
它会导致后续代码无法执行

07:17.030 --> 07:19.230
也就是说这里如果后边我们再输出一个2

07:19.530 --> 07:20.830
这个2能不能输出呢

07:21.230 --> 07:22.030
它就不能输出了

07:22.030 --> 07:23.230
后面的代码就不执行的

07:23.230 --> 07:24.430
执行到这除了问题

07:24.430 --> 07:25.930
后边的全部不执行的

07:26.030 --> 07:27.230
一行都不执行的

07:28.030 --> 07:28.830
保存看一下

07:29.130 --> 07:31.130
你看2是不是没有输出

07:31.730 --> 07:32.430
没问题吧

07:32.630 --> 07:33.530
2没有输出

07:33.830 --> 07:34.830
它是这么回事

07:34.830 --> 07:35.530
这么回事

07:36.030 --> 07:37.730
这是运行爆错

07:38.630 --> 07:39.830
好下一个呢

07:40.130 --> 07:42.630
是运行结果不符合预期

07:42.630 --> 07:43.930
就它连错误都不爆

07:44.030 --> 07:44.830
没有错误

07:45.130 --> 07:47.130
整个程序像正常一样执行

07:47.230 --> 07:49.030
但是结果跟我想象的不一样

07:49.530 --> 07:51.030
这个是最牢火的

07:51.230 --> 07:52.130
最头痛的

07:52.230 --> 07:53.630
你不要认为它不爆错就

07:53.830 --> 07:55.830
不爆错了就是是好事

07:56.130 --> 07:57.130
其实不爆错

07:57.130 --> 07:58.630
发生的错误是最头痛的

07:58.830 --> 08:00.430
因为你不知道它问题出在哪

08:00.830 --> 08:02.730
比方说我们这里写个简单的例子

08:02.730 --> 08:04.930
把两个数相加求和

08:05.030 --> 08:07.230
返回一个a加b求和

08:07.830 --> 08:10.330
那我们这里让用户输入第1个数

08:10.930 --> 08:13.030
n1输入第1个数propt

08:14.130 --> 08:16.230
请输入第1个数

08:17.830 --> 08:20.030
然后n2propt

08:22.230 --> 08:24.530
请输入第2个数

08:26.930 --> 08:28.230
把两个数字相加

08:28.230 --> 08:29.330
两个数字相加

08:29.330 --> 08:30.230
然后我们输出

08:31.430 --> 08:32.230
n1

08:32.830 --> 08:33.430
sum

08:33.630 --> 08:34.330
n1

08:34.530 --> 08:35.030
n2

08:35.030 --> 08:36.330
我这里写个简单的意思

08:36.330 --> 08:38.030
但是实际情况可能更加复杂

08:38.130 --> 08:39.630
因为这个函数掉了另外一个函数

08:39.630 --> 08:41.230
另外一个函数掉了另外一个函数

08:41.330 --> 08:42.230
但是掉了下去

08:42.230 --> 08:44.430
你会发现结果出现问题了

08:44.630 --> 08:45.530
35

08:45.830 --> 08:46.930
它得出了35

08:47.530 --> 08:48.730
整个程序爆错了吗

08:48.730 --> 08:49.630
它没有爆错

08:49.730 --> 08:51.330
但是它这也算是错误

08:51.330 --> 08:54.130
因为它跟我们的想象的结果是不一样的

08:54.430 --> 08:55.730
不符合预期

08:55.830 --> 08:57.430
比方说我们以后做页面效果

08:57.530 --> 09:01.030
你本来希望有一个圆数从左边飘到右边

09:01.130 --> 09:02.430
结果它飘不见了

09:02.630 --> 09:03.530
瞬间就不见了

09:03.630 --> 09:05.630
这就是不符合预期

09:05.630 --> 09:06.430
它没有爆错

09:06.530 --> 09:07.730
但它不符合预期

09:08.130 --> 09:09.830
有的时候我想得到一个正确的结果

09:09.830 --> 09:11.330
结果它进入了一个死循环

09:11.730 --> 09:12.430
它没有爆错

09:12.430 --> 09:13.630
但是它不符合预期

09:13.830 --> 09:14.530
应该的意思吧

09:14.630 --> 09:17.530
这叫做不符合预期的运行错误

09:17.630 --> 09:18.830
这种错误是最痛苦的

09:19.130 --> 09:19.830
最痛苦的

09:20.930 --> 09:22.530
这是关于这么一些错误

09:22.630 --> 09:23.930
当然我们这里知道怎么回事了

09:23.930 --> 09:25.030
因为这里得到的是15串

09:25.630 --> 09:26.630
得到的是15串

09:26.630 --> 09:29.030
但是有些复杂的就是呆满里边

09:29.030 --> 09:30.930
这个函数的可能比较复杂

09:31.030 --> 09:32.230
这个函数调另外一个函数

09:32.230 --> 09:33.630
另外函数又调另外一个函数

09:33.630 --> 09:34.230
调来调去

09:34.230 --> 09:35.630
你也不知道哪一步出了问题

09:36.230 --> 09:37.630
这就是这些错误

09:37.930 --> 09:38.930
面对这些错误

09:38.930 --> 09:42.230
我们有很多的

09:42.230 --> 09:43.530
就是面对这些错误

09:43.530 --> 09:45.130
有很多的处理形式

09:45.130 --> 09:46.230
我们一个一个说

09:46.330 --> 09:48.430
首先是关于调式错误

09:50.430 --> 09:51.530
关于调式错误

09:51.730 --> 09:53.330
就是对于有些东西

09:53.930 --> 09:54.730
把这个去掉

09:56.910 --> 09:57.410
保留吧

09:57.410 --> 09:58.010
保留

09:58.110 --> 09:59.010
就是对于有些东西

09:59.510 --> 10:00.910
我是认为

10:01.010 --> 10:02.610
它不应该爆错的

10:03.310 --> 10:04.410
它不应该爆错

10:04.510 --> 10:05.610
但是它爆错了

10:06.110 --> 10:07.110
有可能它没有爆错

10:07.110 --> 10:08.610
它结果不符合预期

10:08.710 --> 10:09.410
那么这个时候

10:09.410 --> 10:12.610
我们就必须要找到错误的出现的位置在哪

10:12.910 --> 10:15.010
到底是哪一个位置出现了错误

10:15.710 --> 10:18.310
如果是运行爆错的话

10:18.310 --> 10:19.510
那么其实还简单一点

10:19.810 --> 10:20.810
如果是运行爆错

10:20.810 --> 10:21.410
咱们看一下

10:21.710 --> 10:23.610
之前我们不是写过一个运行爆错吗

10:24.010 --> 10:24.910
比方说一个变量

10:25.410 --> 10:26.410
你没有给它复制

10:26.410 --> 10:28.110
然后调用A里面的方法

10:28.510 --> 10:29.710
这就是个运行爆错

10:31.810 --> 10:32.310
看着

10:34.710 --> 10:35.110
小心

10:35.710 --> 10:36.710
这就是个运行爆错

10:36.710 --> 10:37.110
对吧

10:38.010 --> 10:39.610
这个运行爆错了其实还好

10:39.610 --> 10:41.010
因为你可以点击这里

10:41.010 --> 10:42.410
它这里在给你提示

10:42.410 --> 10:43.310
哪一行爆错

10:43.310 --> 10:45.010
23行这里爆错点击

10:45.210 --> 10:46.410
你看它会给你提示

10:46.510 --> 10:47.810
这一款爆了错误

10:48.110 --> 10:48.510
对吧

10:48.510 --> 10:49.010
这还好

10:49.010 --> 10:50.510
它告诉你哪一个地方爆了错

10:50.510 --> 10:52.310
而且爆错的信息会提示给你

10:52.310 --> 10:53.410
但是是英文的

10:53.410 --> 10:54.510
你要好好去读一下

10:54.610 --> 10:56.210
cannot read property

10:56.610 --> 10:57.810
不能读取属相

10:57.810 --> 11:00.210
这个从Andy Fan中读取属相

11:00.210 --> 11:02.110
也就是说你这句话为什么爆错了

11:02.110 --> 11:03.810
是因为你在用一个Andy Fan

11:03.810 --> 11:05.010
它里边的一个属相

11:05.810 --> 11:06.710
是这么个意思

11:07.710 --> 11:08.810
所以说它这里爆错了

11:09.310 --> 11:10.410
运行这个错误

11:10.410 --> 11:12.110
运行爆错了其实还好说

11:12.110 --> 11:13.810
如果运行还没有爆错

11:13.810 --> 11:15.610
它只是结果不符合预期

11:15.610 --> 11:16.810
那么面对这种情况

11:16.810 --> 11:18.210
我们怎么来得到错误

11:18.210 --> 11:19.510
发生在什么位置呢

11:20.710 --> 11:22.110
以后会经常遇到这样的问题

11:22.110 --> 11:23.110
大家开发的时候

11:23.910 --> 11:25.710
可能我讲课的时候

11:25.710 --> 11:26.510
遇到的错误不多

11:26.510 --> 11:27.610
但是一定会遇到错误的

11:27.610 --> 11:28.710
这个是避免不了的

11:28.710 --> 11:30.510
写程序怎么可能没错

11:30.510 --> 11:31.910
在强大的工程师

11:31.910 --> 11:34.110
而且出来的程序一定有bug

11:34.110 --> 11:35.610
特别是那种不爆错的bug

11:35.610 --> 11:37.010
是最对头痛的

11:37.010 --> 11:37.710
最不容易糟的

11:38.810 --> 11:40.210
那这里就出现了问题对吧

11:40.210 --> 11:42.110
那我们怎么来调试这样的问题呢

11:42.110 --> 11:44.310
有两种调试方式

11:44.310 --> 11:47.210
第一种调试方式是使用控制台

11:47.810 --> 11:48.610
控制台打印

11:49.610 --> 11:52.010
在控制台打印各个环节

11:53.310 --> 11:54.810
参数啊这些东西

11:54.810 --> 11:56.710
看一下它打印出来的结果

11:56.710 --> 11:58.310
是不是跟我们想象的一样的

11:59.010 --> 12:01.110
那么我们通过这种方式来进行调错

12:01.910 --> 12:02.710
比方说

12:02.710 --> 12:03.910
咱们这个这个例子里面

12:03.910 --> 12:05.610
我们就可以用控制台打印的方式

12:05.910 --> 12:07.510
为什么是34呢

12:07.510 --> 12:08.610
我们这里首先想

12:08.610 --> 12:10.010
我获取的值对不对

12:10.010 --> 12:11.510
我在这里去打印一下

12:11.510 --> 12:13.510
打印一下N1 N2

12:13.510 --> 12:14.810
看一下得到了值对不对

12:15.210 --> 12:15.710
保存

12:16.710 --> 12:17.510
3 4

12:17.510 --> 12:18.710
还原的错误场景

12:18.710 --> 12:19.510
得到的是3

12:19.510 --> 12:20.710
得到的是3和4

12:20.710 --> 12:21.110
对吧

12:21.110 --> 12:22.410
到3和4没问题啊

12:22.510 --> 12:23.910
它为什么夹出来是34呢

12:23.910 --> 12:24.810
好我们继续看

12:25.410 --> 12:26.010
那么

12:26.410 --> 12:27.210
这里边呢

12:27.210 --> 12:30.210
我们把这个N1 N2作为参数传进去了

12:30.210 --> 12:31.210
传到A和B里边

12:31.210 --> 12:31.910
我们去看

12:31.910 --> 12:33.510
那A和B是不是正确的呢

12:33.810 --> 12:34.910
A和B打印出来

12:36.610 --> 12:37.110
3

12:38.010 --> 12:38.510
4

12:38.510 --> 12:40.110
A和B也是正确的对吧

12:40.210 --> 12:41.610
A和B也是正确的

12:41.810 --> 12:43.010
那我们就要想到了

12:43.110 --> 12:44.810
哎这个A和B它都是正确的

12:44.810 --> 12:46.210
那拼接出来的就是

12:46.210 --> 12:47.810
相加的结果一定是34啊

12:47.810 --> 12:48.510
为什么是

12:49.610 --> 12:51.910
就已经相加的结果一定是7

12:52.010 --> 12:53.310
那为什么是34呢

12:53.310 --> 12:54.010
我们就要想到

12:54.010 --> 12:55.410
是不是制服出来拼接啊

12:55.510 --> 12:56.410
那我们再来看一下

12:56.510 --> 12:57.510
Type of A

12:57.910 --> 12:58.610
Type of B

12:58.610 --> 12:59.710
看它是不是制服串

13:01.610 --> 13:02.510
3和4

13:02.510 --> 13:04.010
你会发现他们两个是制服串

13:04.010 --> 13:04.310
于是呢

13:04.310 --> 13:05.510
他们是制服串拼接

13:05.610 --> 13:05.910
于是呢

13:05.910 --> 13:06.910
通过这种方式呢

13:07.110 --> 13:08.110
不断的去打印

13:08.210 --> 13:09.610
打印一些关键信息

13:09.610 --> 13:10.810
你就找到了这个错误

13:10.810 --> 13:11.710
哦原来是

13:11.810 --> 13:12.810
这两个是制服串

13:12.910 --> 13:14.010
这两个为什么是制服串呢

13:14.010 --> 13:15.110
因为这两个是制服串

13:15.210 --> 13:16.410
这两个为什么是制服串呢

13:16.410 --> 13:16.810
因为它

13:16.910 --> 13:18.310
你这里没有进行转换

13:18.410 --> 13:18.610
对吧

13:18.610 --> 13:19.710
忘了进行转换了

13:20.210 --> 13:20.610
你看

13:20.810 --> 13:21.710
是不是就可以搞定了

13:22.010 --> 13:22.410
对不对

13:23.410 --> 13:24.910
现在再看3和4就正确了

13:25.710 --> 13:27.610
就是我们可以用这种方式

13:27.610 --> 13:29.110
来来调试错误

13:29.310 --> 13:30.510
控制在打印的方式

13:30.610 --> 13:32.610
这也是一种非常经典的方式啊

13:32.710 --> 13:35.110
很多目前很多的前端开发者

13:35.110 --> 13:36.310
都使用的是这种方式

13:36.710 --> 13:37.010
但是呢

13:37.010 --> 13:37.610
这种方式呢

13:37.610 --> 13:38.710
显得有点兜

13:38.710 --> 13:39.710
显得有点兜

13:39.910 --> 13:42.110
就是你没有用到一些强大的工具

13:42.410 --> 13:43.210
所以我们要说一下

13:43.210 --> 13:44.010
第二种方式

13:44.010 --> 13:45.610
就是要断点调试

13:46.110 --> 13:48.210
断点调试

13:49.110 --> 13:50.710
好什么叫断点调试呢

13:50.810 --> 13:51.510
看着啊

13:52.110 --> 13:53.710
我们在谷歌榴弹器里边

13:54.910 --> 13:55.910
找到这个source

13:57.010 --> 13:57.710
source是什么

13:57.710 --> 13:58.810
就是我们的原代码

13:59.010 --> 13:59.710
原代码

14:00.310 --> 14:00.510
好

14:00.510 --> 14:01.910
我们这里不是我们写的代码

14:01.910 --> 14:02.410
对吧

14:02.510 --> 14:03.010
写的代码

14:03.010 --> 14:04.010
我们把这个去掉

14:04.610 --> 14:05.510
这个加号去掉

14:06.410 --> 14:07.810
看一下在这里来调试一下

14:09.880 --> 14:10.580
好这里的

14:10.680 --> 14:12.180
我们在谷歌榴弹器里边

14:12.280 --> 14:13.380
前边打上个断点

14:13.380 --> 14:15.480
比方说我觉得这一句话可能出了问题

14:15.880 --> 14:16.980
可能出了问题

14:17.280 --> 14:18.880
好我们就在这里打个断点

14:19.080 --> 14:20.380
你看打成断点了

14:20.380 --> 14:20.880
对吧

14:20.880 --> 14:21.880
好现在刷新

14:22.080 --> 14:22.880
刷新

14:23.880 --> 14:24.380
好你看

14:24.780 --> 14:26.880
当代码运行到这句话的时候停止的

14:26.980 --> 14:27.780
它没有运行的

14:28.080 --> 14:28.580
你看没有

14:28.780 --> 14:29.780
它是post

14:29.980 --> 14:30.580
表示的

14:31.080 --> 14:31.880
暂停了

14:32.380 --> 14:33.080
debug

14:33.080 --> 14:33.880
debug什么意思

14:33.980 --> 14:35.380
bug表示的是

14:35.780 --> 14:36.380
就是

14:37.280 --> 14:37.980
就是错误

14:37.980 --> 14:39.080
bug表示错误

14:39.080 --> 14:40.680
debug表示找错误

14:40.680 --> 14:41.480
找错误

14:42.080 --> 14:42.780
好ok啊

14:42.780 --> 14:44.580
咱们现在代码停在这一行了

14:44.780 --> 14:46.980
于是这一块我们可以来控制它

14:47.080 --> 14:48.380
控制它的执行

14:48.580 --> 14:50.280
你看看这下面有各种控制办法

14:51.580 --> 14:52.180
这里呢

14:53.780 --> 14:54.780
step over

14:54.780 --> 14:56.180
就是把这一行执行完

14:56.980 --> 14:57.880
按f10

14:57.880 --> 14:58.380
可以

14:58.380 --> 15:00.380
按f10也可以达到同样的效果

15:00.680 --> 15:01.580
好点击一下

15:02.180 --> 15:03.080
把这一行执行完

15:03.080 --> 15:04.380
好执行这一行代码

15:04.480 --> 15:05.480
执行这个代码的时候

15:05.480 --> 15:07.480
它会弹出一个请输入第1个书

15:07.480 --> 15:09.180
咱们来输入一个3

15:09.580 --> 15:10.380
一点确定

15:10.580 --> 15:11.080
你看

15:11.180 --> 15:12.580
现在我们只用鼠标指则N1

15:12.580 --> 15:13.580
你看它会告诉你

15:13.880 --> 15:14.880
N1的指是啥

15:15.280 --> 15:17.280
N1的指是一个制服错3

15:17.280 --> 15:17.880
看到没

15:18.380 --> 15:21.280
N1的指是一个制服错3

15:21.780 --> 15:22.580
所以一下就看到明

15:22.580 --> 15:23.280
看明白了

15:23.580 --> 15:24.780
现在运行第二个语句

15:24.780 --> 15:25.080
好

15:25.080 --> 15:25.480
第二个语句

15:25.580 --> 15:27.080
我们又点击按f10

15:27.280 --> 15:28.180
监判的f10

15:29.080 --> 15:30.080
然后运行这一代

15:30.480 --> 15:31.680
这里我们看一下

15:32.380 --> 15:33.680
这里我们输入一个4

15:34.680 --> 15:37.280
你看N1N2的指是不是出来了

15:37.280 --> 15:37.880
对吧

15:37.880 --> 15:38.680
我们把方小一点

15:38.680 --> 15:39.480
稍微方小一点

15:40.280 --> 15:40.580
这里

15:41.680 --> 15:42.980
我这里变化不了了

15:43.280 --> 15:44.180
稍微调小一点

15:44.880 --> 15:45.080
好

15:45.080 --> 15:46.280
然后咱们可以看右边

15:46.280 --> 15:46.980
看右边

15:47.280 --> 15:49.180
右边给你的很多的信息

15:49.780 --> 15:50.880
N1和N2的指

15:50.880 --> 15:51.780
我们在哪里看呢

15:52.080 --> 15:54.680
N1和N2是全局变量

15:54.680 --> 15:55.080
对吧

15:55.180 --> 15:55.680
全局变量

15:55.680 --> 15:56.680
我们在glob里边

15:57.280 --> 15:59.380
glob里边可以找到这个N1和N2

15:59.380 --> 16:00.480
它在glob里边

16:00.480 --> 16:02.280
你看N1N2是不是三合四

16:02.480 --> 16:02.780
对吧

16:02.780 --> 16:04.180
当然我们也可以用鼠标指则

16:04.180 --> 16:06.580
它来查看N1和N2的指

16:07.480 --> 16:08.080
没问题吧

16:08.580 --> 16:08.780
好

16:08.780 --> 16:11.180
于是到了现在代码执行到了第19行

16:11.580 --> 16:12.980
第19行是不是在调用函数

16:12.980 --> 16:13.480
对吧

16:13.480 --> 16:15.380
我们这里可以按f11

16:15.680 --> 16:17.180
叫做step into

16:17.180 --> 16:18.680
刚才的是step over

16:18.680 --> 16:20.480
就整个这个这一行执行完

16:20.580 --> 16:22.480
那么这里到了这一行

16:22.480 --> 16:23.280
它在调用函数

16:23.280 --> 16:24.680
我们可以按f11

16:25.180 --> 16:26.480
按f11看一下

16:26.680 --> 16:28.080
f11按一下过后

16:28.080 --> 16:29.480
它就会进入函数执行

16:29.980 --> 16:31.280
你看它传递的参数

16:31.280 --> 16:32.980
把N1和N2的指传递过来了

16:33.080 --> 16:34.480
A的指你看3

16:34.580 --> 16:36.080
B的指是制服出来的4

16:36.080 --> 16:36.580
看到没

16:37.280 --> 16:38.480
然后这个函数的返回

16:38.480 --> 16:39.880
自然是制服出来拼接

16:40.080 --> 16:40.480
看到没

16:40.480 --> 16:42.080
自然是制服出来拼接

16:42.880 --> 16:43.980
得到的结果就是34

16:43.980 --> 16:44.780
就拼接出来了

16:45.480 --> 16:46.580
这是端点调试

16:46.580 --> 16:47.480
端点调试

16:47.680 --> 16:48.880
端点调试是一种

16:48.880 --> 16:50.480
更加高大商的方式

16:50.480 --> 16:51.880
来帮助你找错误

16:52.280 --> 16:53.680
以后你们在公司里边

16:54.280 --> 16:55.080
我建议大家

16:55.080 --> 16:57.380
尽量不要用console点逗格的这种方式

16:57.380 --> 16:58.980
打印一些东西是没问题的

16:58.980 --> 16:59.980
是这是没问题的

17:00.380 --> 17:01.180
看一下结果

17:01.180 --> 17:01.980
这是没问题的

17:01.980 --> 17:03.180
但是你找错的话

17:03.180 --> 17:04.180
尽量不要用这种方式

17:04.180 --> 17:05.180
它显得比较low

17:05.180 --> 17:05.480
对吧

17:05.480 --> 17:06.580
它显得比较low而已

17:07.780 --> 17:10.480
这是用谷歌轮气的端点调试

17:10.780 --> 17:12.680
还有另外一种是用vscode的

17:12.680 --> 17:13.580
就是一个编辑器

17:13.580 --> 17:16.480
用这个工具来进行端点调试

17:16.780 --> 17:18.480
那么这个工具怎么来端点调试呢

17:18.580 --> 17:19.280
大家看一下

17:19.480 --> 17:20.880
给大家教一下怎么用

17:21.380 --> 17:22.880
首先你要安装一个插件

17:23.780 --> 17:26.380
这个插件的名字叫做debug

17:26.880 --> 17:27.380
debug

17:28.580 --> 17:29.180
debug

17:29.780 --> 17:31.280
就是for chrome

17:31.780 --> 17:32.680
bug什么意思

17:32.880 --> 17:34.080
bug是一个虫子

17:34.180 --> 17:35.280
bug是一个虫子

17:36.580 --> 17:38.680
以前在很早很早以前

17:39.280 --> 17:42.680
这个计算机还没有显示器

17:43.280 --> 17:44.480
它是用紫带输入

17:44.480 --> 17:45.280
紫带输出

17:45.280 --> 17:46.280
紫带上打孔

17:46.580 --> 17:48.080
然后把它输入到计算机

17:48.280 --> 17:50.780
然后计算机经过运算得到一个结果

17:50.780 --> 17:52.780
然后输出一个紫带

17:52.980 --> 17:53.880
就是一个紫带

17:55.080 --> 17:56.180
真的是紫带

17:57.080 --> 17:58.080
真的是一个紫带

17:59.080 --> 17:59.980
那个紫带输出

17:59.980 --> 18:01.880
这个输出的紫带上有打满了孔

18:02.480 --> 18:03.780
然后告诉你运行结果

18:03.780 --> 18:05.580
这个运行结果是一个二镜制的

18:05.780 --> 18:07.080
向下打孔为0

18:07.280 --> 18:09.180
比方说向下打孔为0

18:09.180 --> 18:10.480
向上打孔为1

18:10.880 --> 18:11.480
比方说

18:11.680 --> 18:13.080
那么这样子打孔出来过后

18:13.080 --> 18:14.180
你去翻那个字点

18:14.480 --> 18:16.480
二镜制这个得到的结果是什么

18:16.880 --> 18:18.480
不同的二镜制得到什么含义

18:18.580 --> 18:20.180
那么你可以看这个结果

18:20.180 --> 18:21.380
以前计算机是这样子的

18:21.780 --> 18:22.780
那有一次

18:22.980 --> 18:23.780
有一次

18:23.880 --> 18:25.780
他发现了这个计算机

18:26.180 --> 18:28.580
你怎么样输入一个正确的结果

18:28.680 --> 18:30.180
他出来的东西都不对

18:30.380 --> 18:31.680
出来的结果总是不对

18:32.080 --> 18:34.280
后来找了好几天

18:34.680 --> 18:36.280
都找不到问题的根源

18:36.280 --> 18:37.480
程序没有问题

18:37.780 --> 18:38.780
为什么就不对了

18:38.780 --> 18:40.180
他们就把计算机拆开

18:40.480 --> 18:41.980
拆开之后就发现了

18:42.180 --> 18:43.380
有一个飞鵝

18:43.380 --> 18:44.480
一个小虫子

18:44.980 --> 18:47.480
然后被这个计算机的发的热

18:47.480 --> 18:48.280
所吸引

18:48.480 --> 18:50.080
然后跑到计算机里边去了

18:50.180 --> 18:51.480
然后被烫死了

18:51.680 --> 18:53.580
然后就附着在二级管那边

18:53.880 --> 18:55.480
导致有一个地方短路了

18:55.480 --> 18:57.580
导致这个计算机运行出了问题

18:58.080 --> 18:59.780
后来小昆虫

18:59.780 --> 19:02.080
小飞鵝还把他做成了标本

19:02.080 --> 19:04.280
放到了就是美国的一个博物馆里边

19:04.780 --> 19:05.780
这就是为什么

19:05.880 --> 19:07.680
我们的程序错误叫做bug

19:07.680 --> 19:08.480
它的由来

19:08.680 --> 19:10.880
我们找错误就是debug

19:10.880 --> 19:12.280
把这个虫子给他去掉

19:12.680 --> 19:14.080
就是找错误debug

19:14.380 --> 19:16.080
debugger for Chrome

19:16.780 --> 19:17.780
为谷歌流浪期

19:17.780 --> 19:19.080
添加一个就是

19:19.880 --> 19:20.980
找错误的插件

19:21.280 --> 19:22.480
你先安装这个插件

19:23.080 --> 19:24.280
安装好这个插件过后

19:24.280 --> 19:25.680
我们再来说剩下的问题

19:27.480 --> 19:29.080
安装好这个插件之后

19:29.580 --> 19:31.080
然后我们找到这个

19:31.080 --> 19:32.580
左边这一块有这个东西

19:32.880 --> 19:33.780
调试看没

19:33.980 --> 19:34.780
有个调试

19:35.880 --> 19:37.780
这里如果有些同学没有这个东西

19:37.780 --> 19:38.580
没有这个图标

19:38.580 --> 19:39.280
没有这个图标的话

19:39.280 --> 19:40.480
你点这里右键

19:40.480 --> 19:42.380
你把这个调试勾选上就出来了

19:42.980 --> 19:43.780
调试这里

19:43.880 --> 19:44.580
我们点着

19:45.280 --> 19:47.180
一个打开down解而接受

19:47.180 --> 19:47.980
它是一个配置

19:48.280 --> 19:48.980
一个配置

19:48.980 --> 19:50.280
可以配置你怎么调试

19:50.380 --> 19:51.280
因为我bscode

19:51.280 --> 19:52.380
它是多语言的

19:52.380 --> 19:53.280
它支持多语言

19:53.280 --> 19:54.480
它可以写加把程序

19:54.680 --> 19:55.880
也可以写csharp程序

19:55.880 --> 19:56.980
也可以写php

19:57.180 --> 19:58.180
什么都可以写

19:58.280 --> 20:00.780
因此你要配置一下它的调试环境

20:01.280 --> 20:01.980
点这个

20:03.080 --> 20:04.280
这里选择一个环境

20:04.480 --> 20:05.780
这里能我们选择chrome

20:06.280 --> 20:07.380
浏浪期环境

20:08.280 --> 20:08.880
选择它

20:09.180 --> 20:09.980
于是这一块

20:09.980 --> 20:11.580
你看支援管理器里边

20:11.580 --> 20:13.180
它会多借新建一个目录

20:14.080 --> 20:15.280
叫做vscode

20:15.480 --> 20:16.780
vscode的这个目录

20:16.780 --> 20:19.480
这个目录是跟这个编辑器相关的一些配置

20:19.780 --> 20:21.280
跟这个编辑器相关的一些配置

20:21.280 --> 20:23.580
里边有个文件叫做nunch.json

20:23.580 --> 20:24.580
是一个配置文件

20:24.580 --> 20:25.780
抓来配置环境的

20:26.380 --> 20:28.280
这个文件里边让你啥都不用管

20:28.280 --> 20:29.080
啥都不用管

20:29.080 --> 20:30.380
你要做的是什么呢

20:30.480 --> 20:31.780
你要做的事情就是

20:31.880 --> 20:33.180
把这个端口

20:34.080 --> 20:35.580
有的人可能不知道什么要端口

20:35.580 --> 20:37.480
我以前讲etm和csh说过的

20:37.580 --> 20:38.980
你不知道也没关系

20:38.980 --> 20:40.780
你就把这个数字改一下

20:40.780 --> 20:41.880
改成啥了

20:42.180 --> 20:44.280
你不是现在在浏浪页面吗

20:44.280 --> 20:44.780
对吧

20:44.780 --> 20:45.680
浏浪页面

20:46.180 --> 20:46.880
我们看一下

20:46.880 --> 20:48.680
页面这里是不是有个端口

20:48.680 --> 20:49.480
能看见吗

20:50.280 --> 20:50.880
看见没

20:51.480 --> 20:52.680
你要看里面那边

20:52.680 --> 20:54.180
你要看里面那边的端口

20:54.380 --> 20:54.880
看到

20:54.880 --> 20:55.580
看到这个没

20:55.680 --> 20:56.880
这是它的端口

20:57.380 --> 20:58.680
你把它复制一下

20:59.380 --> 21:00.380
然后粘贴过来

21:01.380 --> 21:01.880
看没

21:02.280 --> 21:02.880
OK了

21:03.380 --> 21:05.380
这件事只用做一次

21:05.680 --> 21:06.780
只用做一次

21:07.080 --> 21:07.880
今后呢

21:07.880 --> 21:08.380
你会

21:08.780 --> 21:09.880
可以怎么来玩呢

21:09.880 --> 21:10.380
现在

21:12.880 --> 21:13.880
以后呢

21:13.880 --> 21:16.280
你就可以在vscode里面进行调试的

21:16.380 --> 21:16.880
但是呢

21:16.880 --> 21:17.580
vscode呢

21:17.580 --> 21:19.480
它目前的默认情况下

21:19.480 --> 21:22.680
是只支持js文件的调试

21:22.680 --> 21:23.580
像你这个页面

21:23.580 --> 21:24.480
它不支持的

21:24.780 --> 21:25.480
页面的调试

21:25.480 --> 21:26.480
它不支持的

21:26.680 --> 21:27.080
所以说呢

21:27.080 --> 21:27.480
你这里呢

21:27.480 --> 21:27.880
要不

21:27.880 --> 21:29.280
当然我们平时写项目的时候

21:29.280 --> 21:30.480
肯定是写的是文件

21:30.880 --> 21:31.680
比方说test

21:32.280 --> 21:32.880
jsc

21:33.580 --> 21:34.280
你把它写到

21:34.580 --> 21:35.780
这个文件里面来

21:36.080 --> 21:37.680
在页面上去引用这个文件

21:38.380 --> 21:38.880
script

21:39.080 --> 21:39.880
src

21:41.080 --> 21:41.780
tests.js

21:42.880 --> 21:43.780
比方说

21:43.780 --> 21:44.380
比方说

21:44.380 --> 21:45.480
我要判断一个数

21:45.480 --> 21:46.280
是不是自数

21:46.480 --> 21:47.280
是不是数数

21:47.280 --> 21:48.580
我们之前不是写过这个函数吗

21:48.580 --> 21:49.180
isprn

21:49.880 --> 21:50.480
isprn

21:51.280 --> 21:51.880
判断一个数

21:51.880 --> 21:52.680
是不是数数

21:52.880 --> 21:52.980
好

21:52.980 --> 21:53.280
这里呢

21:53.280 --> 21:53.780
我们这样子

21:53.780 --> 21:54.780
快速的写一遍

21:55.080 --> 21:55.580
就是

21:55.580 --> 21:56.380
4循环

21:56.480 --> 21:56.980
vr

21:56.980 --> 21:58.080
i等于2开始

21:58.080 --> 21:59.480
i小于n

21:59.580 --> 22:00.380
i加加

22:00.380 --> 22:00.880
对吧

22:01.080 --> 22:02.380
如果发现一个数

22:02.380 --> 22:03.980
能整除 n

22:04.080 --> 22:05.780
那么它就是一个

22:05.980 --> 22:07.180
它就不是一个数数

22:07.380 --> 22:07.880
否则的话

22:07.880 --> 22:08.780
就是是一个数数

22:08.780 --> 22:09.680
这个我不讲了

22:10.180 --> 22:10.280
好

22:10.280 --> 22:10.580
这里呢

22:10.580 --> 22:11.780
我输出测试一下

22:11.880 --> 22:12.980
我输出一个数

22:13.080 --> 22:13.880
isprn

22:13.880 --> 22:15.080
e是不是一个数数

22:15.080 --> 22:15.980
e肯定不是数数

22:15.980 --> 22:16.380
对吧

22:16.380 --> 22:17.580
e肯定不是数数

22:17.680 --> 22:18.680
咱们来看一下

22:19.480 --> 22:20.880
他这里输出的结果是多少

22:21.780 --> 22:23.380
他说他试一个数数

22:23.380 --> 22:24.580
这是不是运行结果

22:24.580 --> 22:26.080
跟我们的预期不相符

22:26.180 --> 22:27.780
于是是不是我们要调试

22:27.880 --> 22:28.180
对吧

22:28.180 --> 22:29.280
我们要调试

22:29.280 --> 22:29.480
好

22:29.480 --> 22:30.480
怎么调试呢

22:30.580 --> 22:32.080
我们可以在浏览器里边调

22:32.080 --> 22:33.280
也可以在谷歌里

22:33.280 --> 22:35.080
也可以在vscode里边调

22:35.580 --> 22:35.780
好

22:35.780 --> 22:36.580
在浏览器里边调

22:36.580 --> 22:37.080
我们讲过了

22:37.080 --> 22:37.380
对吧

22:37.380 --> 22:38.080
点这边

22:38.280 --> 22:39.080
点这边

22:39.180 --> 22:39.380
好

22:39.380 --> 22:39.880
这边呢

22:39.880 --> 22:40.880
它是一个介事文件

22:40.880 --> 22:41.380
看到没

22:41.480 --> 22:41.780
好

22:41.780 --> 22:42.780
我们这里说小一点

22:42.780 --> 22:43.480
说小一点

22:44.080 --> 22:44.680
介

22:44.680 --> 22:45.880
它是一个介事文件

22:45.880 --> 22:46.980
那么我们来找到

22:46.980 --> 22:48.080
他这个介事文件

22:48.980 --> 22:49.680
刷新一下

22:50.580 --> 22:51.480
这个介事文件

22:51.480 --> 22:53.480
我们可以找到的

22:53.480 --> 22:55.080
是可以找到的介事文件

22:55.080 --> 22:56.280
在这把这个打出

22:56.280 --> 22:58.080
把这个打开

22:58.480 --> 22:59.380
车边轮打开

22:59.580 --> 23:01.380
这里看一个介事文件看到没

23:01.880 --> 23:02.980
在这里去打断点

23:02.980 --> 23:03.580
调试错误

23:03.580 --> 23:04.180
看一下

23:04.580 --> 23:05.180
刷新

23:05.680 --> 23:06.480
是不是一样的

23:06.480 --> 23:06.980
对吧

23:07.280 --> 23:08.280
在运行到这里的

23:08.280 --> 23:09.480
然后f11转

23:09.580 --> 23:10.180
转到定义

23:10.180 --> 23:11.080
他又运行到函数

23:11.380 --> 23:12.180
是一样的

23:12.480 --> 23:13.180
把他去掉

23:13.180 --> 23:13.880
重新来

23:14.580 --> 23:14.780
好

23:14.780 --> 23:15.680
现在我们主要说一下

23:15.680 --> 23:17.280
在vscode里边怎么调试

23:17.980 --> 23:19.880
这是一种更加高落上的方式

23:20.280 --> 23:20.480
好

23:20.480 --> 23:21.480
怎么打断点呢

23:21.880 --> 23:22.080
好

23:22.080 --> 23:23.080
我们可以在函

23:23.180 --> 23:24.480
这肯定是函数出了问题

23:24.480 --> 23:24.880
对吧

23:24.880 --> 23:26.280
我们在函数里边打断点

23:26.280 --> 23:26.980
在这个地方

23:26.980 --> 23:27.380
你看

23:27.780 --> 23:28.680
在前边按一下

23:28.680 --> 23:29.280
一颗打个断点

23:29.280 --> 23:30.080
再按一下断点

23:30.080 --> 23:30.680
调试

23:30.880 --> 23:31.680
什么叫断点

23:31.780 --> 23:32.480
断点就是

23:32.480 --> 23:33.780
成讯运行到这的时候

23:33.780 --> 23:34.580
它会停止

23:35.180 --> 23:36.280
等待你操作

23:36.480 --> 23:37.480
等待你调试

23:38.080 --> 23:39.780
它为了方便你找出错误

23:40.480 --> 23:40.680
好

23:40.680 --> 23:42.180
接下来我们打个断点看一下

23:42.880 --> 23:44.480
然后现在我们干嘛呢

23:44.680 --> 23:47.380
现在我们按一下键盘的F5

23:47.680 --> 23:48.880
就是启动程序

23:49.280 --> 23:50.180
按一下F5

23:50.880 --> 23:51.080
好

23:51.080 --> 23:52.380
你看程序启动起来了

23:52.480 --> 23:54.080
它会自动给你打开一个浏览器

23:54.480 --> 23:55.480
这个浏览器的端口

23:55.480 --> 23:56.380
就是5501

23:56.380 --> 23:57.280
5501

23:57.380 --> 23:58.580
那么这里有些文件夹

23:58.580 --> 23:58.780
对吧

23:58.780 --> 23:59.680
我们选择一下

23:59.680 --> 24:00.980
当然前提条件

24:00.980 --> 24:02.280
你得安装这个插件

24:02.480 --> 24:03.280
一是这个插件

24:03.280 --> 24:05.280
而是我们之前介绍过的Leave Server

24:07.080 --> 24:07.880
Leave Server这个插件

24:07.880 --> 24:08.680
你得安装

24:10.680 --> 24:13.080
那么现在你要选择

24:13.280 --> 24:14.280
这个页面就不看了

24:14.280 --> 24:14.880
就不看了

24:15.480 --> 24:16.480
你有选择

24:16.780 --> 24:18.780
你要调试的页面

24:18.780 --> 24:19.380
哪个页面呢

24:19.380 --> 24:21.780
就是咱们是标准库

24:21.780 --> 24:22.280
对吧

24:22.980 --> 24:23.780
标准库

24:24.080 --> 24:26.580
然后是哪一个错误处理

24:26.580 --> 24:27.080
对吧

24:27.280 --> 24:28.080
然后这个页面

24:28.080 --> 24:28.380
对吧

24:28.380 --> 24:29.380
我要运行这个页面

24:29.480 --> 24:30.180
点击

24:30.280 --> 24:30.980
你看一下

24:31.880 --> 24:33.180
是不是整个程序暂停了

24:33.180 --> 24:33.580
你看一下

24:33.580 --> 24:34.380
这边在闪

24:34.980 --> 24:35.780
程序到这了

24:35.980 --> 24:37.480
你看一下这个N是E

24:37.480 --> 24:37.880
看没有

24:37.880 --> 24:38.880
你传入一个E

24:38.980 --> 24:40.380
好咱们就接着调试呗

24:40.580 --> 24:41.280
调试

24:41.580 --> 24:43.080
这里看是一样的

24:43.080 --> 24:44.480
单步跳过叫做

24:44.680 --> 24:45.480
step over

24:46.280 --> 24:47.180
一步一步执行

24:47.180 --> 24:49.080
这个是如果遇到一个函数的话

24:49.380 --> 24:51.280
f11进入函数

24:51.480 --> 24:52.880
这个的话跳出函数

24:52.880 --> 24:53.780
跳出函数

24:54.780 --> 24:55.380
这个是呢

24:55.580 --> 24:56.580
重新启动

24:56.980 --> 24:57.480
这个是呢

24:57.480 --> 24:58.780
直接运行到下一个段点

24:59.080 --> 25:00.380
直接运行到下一个段点

25:01.280 --> 25:01.980
下一个没段点

25:01.980 --> 25:03.180
它就直接执行完了

25:03.580 --> 25:04.480
好咱们来看一下

25:04.480 --> 25:06.280
按f10一步一步执行

25:06.680 --> 25:07.780
你看Idez

25:07.880 --> 25:08.680
现在是Nd犯

25:08.680 --> 25:08.980
对吧

25:08.980 --> 25:09.880
现在是Nd犯

25:09.880 --> 25:11.180
好执行f

25:11.480 --> 25:12.580
你看执行到这了

25:12.880 --> 25:13.480
Idez呢

25:13.480 --> 25:14.580
现在是2

25:14.580 --> 25:15.180
看到没

25:15.480 --> 25:16.380
N的值是多少

25:16.380 --> 25:16.980
1

25:16.980 --> 25:17.980
I是不是2

25:17.980 --> 25:19.180
是不是小于1的呢

25:19.280 --> 25:20.180
它不是

25:20.180 --> 25:20.680
于是呢

25:20.680 --> 25:22.080
它就直接没有进入循环

25:22.080 --> 25:23.180
它直接返回的处

25:23.380 --> 25:23.780
看到没有

25:23.780 --> 25:24.780
它没有进入循环

25:24.780 --> 25:25.880
它直接返回的处

25:25.980 --> 25:26.380
说明了

25:26.380 --> 25:27.580
我们找到问题的发生了

25:27.580 --> 25:28.180
根源了

25:28.180 --> 25:30.880
是因为我没有考虑N小于2的情况

25:31.480 --> 25:33.380
没有考虑N小于2的情况

25:33.380 --> 25:33.780
然后呢

25:33.780 --> 25:34.780
我们按f5

25:35.080 --> 25:35.780
继续按f5

25:35.780 --> 25:36.580
跳到下一个段点

25:36.580 --> 25:37.180
然后它结束

25:38.580 --> 25:38.780
好

25:38.780 --> 25:40.380
然后我们就再写这里

25:40.380 --> 25:41.380
我们重新改改一下

25:41.380 --> 25:44.180
判断一下N小于2的时候

25:45.080 --> 25:46.180
返回force

25:46.680 --> 25:47.380
加上这一代

25:47.780 --> 25:47.980
好

25:47.980 --> 25:48.480
保存

25:48.780 --> 25:49.380
保存

25:49.980 --> 25:50.180
好

25:50.180 --> 25:50.880
保存之后

25:50.880 --> 25:52.880
我们在这里打个段点

25:52.880 --> 25:53.580
来看一下

25:54.580 --> 25:55.980
你看是不是一刷新

25:55.980 --> 25:56.980
又运行到的段点

25:56.980 --> 25:57.380
看到没

25:57.580 --> 25:58.580
又运行到的段点

25:58.580 --> 26:00.180
N等于1小于2的时候

26:00.180 --> 26:01.580
你看它直接返回force了

26:01.680 --> 26:03.080
那么现在就不是数数了

26:03.080 --> 26:04.580
f5跳过

26:04.780 --> 26:06.980
f5指的是运行到下一个段点

26:06.980 --> 26:07.780
那后面没有段点

26:07.780 --> 26:08.780
就直接结束了

26:09.480 --> 26:09.880
好

26:10.380 --> 26:10.780
你看

26:11.680 --> 26:12.280
得到结果

26:12.280 --> 26:13.680
那么现在得到结果就正确了

26:14.180 --> 26:14.680
正确了

26:16.620 --> 26:17.220
看一下

26:17.520 --> 26:18.520
得到结果是force

26:18.620 --> 26:19.220
没问题吧

26:19.820 --> 26:20.220
好

26:20.220 --> 26:21.120
那么再测试一下

26:21.220 --> 26:22.020
再测试一下

26:22.020 --> 26:23.420
比方说这里写个

26:24.020 --> 26:24.620
写个6

26:24.620 --> 26:25.620
看一下这么正确的

26:25.920 --> 26:26.620
保存

26:26.920 --> 26:27.720
浏览器刷新

26:27.720 --> 26:28.920
你看这边又运行了

26:29.120 --> 26:29.920
浏览器刷新

26:29.920 --> 26:30.620
自动刷新的

26:31.620 --> 26:32.220
浏览器刷新

26:32.220 --> 26:33.220
这边又运行了

26:33.620 --> 26:34.420
这边运行的时候

26:34.420 --> 26:35.420
我们一个个来调

26:35.620 --> 26:36.220
n

26:36.620 --> 26:37.020
6

26:37.020 --> 26:37.520
对吧

26:37.720 --> 26:38.820
衣服判断进不了

26:38.820 --> 26:40.020
然后了这边

26:40.920 --> 26:41.420
i

26:41.620 --> 26:42.320
等于2

26:42.320 --> 26:43.520
2是不是小于n的

26:43.820 --> 26:44.720
2是小于n的

26:44.720 --> 26:45.420
看一下

26:45.820 --> 26:46.520
i除以

26:46.820 --> 26:48.420
6除以i的余数

26:49.220 --> 26:49.820
是不是等于0

26:49.820 --> 26:50.820
是就能不能长出

26:50.820 --> 26:52.220
能长出是不是不是数数

26:52.420 --> 26:52.620
对吧

26:52.620 --> 26:53.420
返回force

26:54.020 --> 26:54.820
看看f5

26:55.620 --> 26:57.620
这是段点调试的这种方式

26:57.920 --> 26:58.820
其实那边调试的

26:58.820 --> 27:01.120
它其实用的就是谷歌流量器的功能

27:01.420 --> 27:02.920
用的就是谷歌流量器

27:02.920 --> 27:03.920
这里调试的功能

27:04.120 --> 27:05.120
是这么个意思

27:06.120 --> 27:07.920
你在谷歌流量器里边调试

27:07.920 --> 27:09.820
和在你vscode里边调试都行

27:11.320 --> 27:14.120
但是你要一定要学会使用段点调试

27:14.220 --> 27:16.320
其实我发现很多同学很怕这个

27:16.520 --> 27:17.520
特别特别害怕

27:17.620 --> 27:19.020
看到段点调试手都在发抖

27:19.220 --> 27:20.520
我不知道有什么好怕的

27:20.620 --> 27:21.820
这不过是一个工具

27:22.120 --> 27:23.920
你一开始不太习惯而已

27:24.020 --> 27:25.420
你慢慢去用就习惯了

27:25.520 --> 27:28.320
特别是遇到一些复杂的应用场景里边

27:28.520 --> 27:30.220
函数的调用非常非常复杂

27:30.220 --> 27:31.020
连环调用

27:31.020 --> 27:33.020
这个叫函数调另外一个A调B

27:33.020 --> 27:34.220
B调CC调D

27:34.820 --> 27:36.720
它出现你调A函数的时候出了问题

27:36.720 --> 27:38.320
你估计知道是哪里的出了问题

27:38.620 --> 27:39.720
你只能用段点

27:39.720 --> 27:40.820
最好就是用段点

27:40.820 --> 27:41.720
挨在这看

27:41.720 --> 27:42.720
哪一步出了问题

27:42.920 --> 27:43.920
如果你用输出的话

27:43.920 --> 27:45.520
你要写好多好多的输出语剧

27:45.520 --> 27:46.620
你才能确定错误

27:46.620 --> 27:48.520
那是一种效率非常低的方式

27:49.220 --> 27:50.720
这是关于这个段点调试

27:50.920 --> 27:51.620
你调完了过

27:51.620 --> 27:52.720
如果你觉得调正确了

27:52.720 --> 27:54.020
你要停止点下这个

27:54.820 --> 27:56.420
或者叫shift加f

27:56.420 --> 27:57.720
就可以直接停止

27:58.320 --> 27:59.320
当然你可以不停止

27:59.320 --> 28:00.120
接着写带

28:00.120 --> 28:02.020
那就永远处于调试状态

28:02.220 --> 28:03.220
shift要调试

28:03.220 --> 28:05.620
重新按一下F就完事了

28:06.220 --> 28:06.820
你看这个意思

28:07.420 --> 28:10.220
这是关于调试错误

28:11.020 --> 28:11.820
这是这一块

28:12.620 --> 28:13.420
下一块

28:15.120 --> 28:15.620
下一块

28:16.020 --> 28:16.620
我们说一下

28:17.620 --> 28:19.220
就是抛出错误

28:20.420 --> 28:21.420
什么叫抛出错误

28:21.620 --> 28:22.620
就是有的时候

28:23.420 --> 28:24.620
我就是要让它爆错

28:25.120 --> 28:25.820
有些同学说

28:26.620 --> 28:27.420
这不扯淡吗

28:28.020 --> 28:28.720
我们尽量

28:28.720 --> 28:31.020
应该减少程序里边的发生错误

28:31.220 --> 28:33.820
但是你为什么要自己去招一些错误出来了

28:34.220 --> 28:35.220
有的时候你没办法

28:35.220 --> 28:36.220
你只能照错误

28:36.220 --> 28:38.020
让你只能去引发错误

28:38.220 --> 28:39.420
就比方说举个例子

28:40.220 --> 28:41.220
这个GS里边

28:42.820 --> 28:43.620
那假设

28:44.420 --> 28:46.220
假设你给我传了一个abc

28:46.220 --> 28:48.620
你告诉我我咋判断他是不是知书

28:49.720 --> 28:50.820
一个给我一个abc

28:50.820 --> 28:51.920
或者给我一个对象

28:52.420 --> 28:53.820
我来判断他是不是一个叔叔

28:53.820 --> 28:54.620
那不扯淡吗

28:54.620 --> 28:55.020
对吧

28:55.520 --> 28:56.320
那不是扯淡吗

28:56.920 --> 28:58.220
我这个判断叔叔的淡马

28:58.220 --> 28:59.620
是不是只能判断数字

29:00.120 --> 29:01.420
你不能给我其他玩意

29:01.420 --> 29:03.020
你给我只能判断数字

29:03.520 --> 29:05.220
所以说你给我的数字

29:05.220 --> 29:06.820
一定要是一个正常的数字

29:06.820 --> 29:08.520
你一定要是个正常的数字

29:08.520 --> 29:10.220
你给我父叔都想我都忍了

29:10.220 --> 29:11.220
他不是叔叔吗

29:11.620 --> 29:13.320
但是你一定要给我一个正常的数字

29:13.320 --> 29:14.520
abc他是不是

29:14.720 --> 29:15.720
他是不是叔叔

29:15.720 --> 29:17.220
这个就不符合逻辑

29:17.520 --> 29:19.120
这个话就有问题

29:19.420 --> 29:20.420
所以有的时候

29:20.420 --> 29:21.620
为了让你

29:21.920 --> 29:22.820
为了避免

29:23.420 --> 29:25.420
程序的就是函数的使用者

29:26.420 --> 29:27.620
在错误的道路上

29:27.820 --> 29:29.020
渐行渐远

29:30.120 --> 29:32.120
不要让他在错误的道路上继续走下去了

29:32.120 --> 29:33.220
就是要爆出

29:33.320 --> 29:34.320
不准令往下运行的

29:34.320 --> 29:35.320
你这个地方有问题

29:35.320 --> 29:36.320
马上给我改过来

29:37.020 --> 29:37.920
是这么个意思

29:38.120 --> 29:38.920
这种情况

29:38.920 --> 29:40.920
通常发生在写函数的时候

29:41.220 --> 29:42.620
有的时候你写一个函数

29:42.620 --> 29:45.720
希望这个函数能够在各种场景下面使用

29:46.020 --> 29:48.220
并且要防止开发者乱用

29:48.220 --> 29:50.820
他有的时候乱去给你掉一些东西

29:51.420 --> 29:52.420
该传参数的时候

29:52.420 --> 29:53.320
他不给你传

29:53.720 --> 29:55.320
参数的传递的数量也不对

29:55.620 --> 29:56.420
有的时候

29:57.420 --> 29:58.220
参数给你传

29:58.220 --> 29:59.620
传的过后

30:00.020 --> 30:01.020
他又不给你

30:01.020 --> 30:03.220
就是又不给你传一个正确的参数

30:03.220 --> 30:04.220
就是应该爆出

30:04.220 --> 30:05.020
凭什么不爆出

30:05.020 --> 30:06.620
你给我一雕用的函数

30:06.620 --> 30:07.820
是雕用错误的函数

30:07.820 --> 30:08.720
就应该爆出

30:09.620 --> 30:10.520
像这种其实

30:10.520 --> 30:11.320
像这种情况

30:11.320 --> 30:13.620
咱们之后在学网页这一端的时候

30:13.620 --> 30:14.920
会看到很多

30:15.120 --> 30:16.220
有的时候你该传参数

30:16.220 --> 30:16.720
你不传

30:16.720 --> 30:17.620
他就要给你爆出

30:17.720 --> 30:19.120
因为不要让你再错下去了

30:19.520 --> 30:20.320
你这里都没有

30:20.320 --> 30:21.420
这里都出了问题

30:21.420 --> 30:24.020
然后你后续十字八句都要出大问题

30:24.220 --> 30:24.920
所以说这里

30:25.020 --> 30:26.520
应该爆出来提示你

30:26.820 --> 30:28.120
应该马上来解决

30:28.520 --> 30:29.320
所以说爆出了

30:29.320 --> 30:30.620
他并不是一个坏事

30:30.720 --> 30:31.220
他有的时候

30:31.220 --> 30:32.820
可以起到一个提示的作用

30:33.120 --> 30:35.020
所以说有些函数在编写的时候

30:35.320 --> 30:37.120
通常发生在函数编写的时候

30:37.220 --> 30:39.120
你希望这个函数更加稳健

30:39.120 --> 30:40.820
能够适应各种情况

30:40.820 --> 30:41.720
如果你乱来

30:41.720 --> 30:43.020
我给你爆出一个错误

30:43.020 --> 30:44.620
所以说这里我们来学习一下

30:44.720 --> 30:46.120
如何来抛出错误

30:46.620 --> 30:47.120
好

30:47.120 --> 30:48.420
错误了本质

30:49.220 --> 30:50.520
错误的本质

30:50.920 --> 30:51.920
在介石中

30:52.620 --> 30:55.020
本质上是一个对象

30:55.120 --> 30:56.220
他其实就是一个对象

30:56.820 --> 30:58.620
抛出错误的语法

30:59.820 --> 31:00.620
语法为

31:02.220 --> 31:02.920
下面这个

31:03.420 --> 31:04.020
这个语法

31:04.820 --> 31:05.420
就是

31:06.020 --> 31:06.620
石肉

31:07.020 --> 31:08.020
石肉就是扔出

31:08.620 --> 31:09.620
扔出一个错误

31:09.820 --> 31:10.620
扔出一个错误

31:11.620 --> 31:12.120
对象

31:13.520 --> 31:14.320
错误对象

31:15.820 --> 31:16.320
当然

31:16.320 --> 31:18.620
其实介石里面没有严格要求

31:18.620 --> 31:20.120
你这里必须是一个错误对象

31:20.120 --> 31:21.020
你这里写个数字

31:21.020 --> 31:22.020
写个字无错都可以

31:22.120 --> 31:25.320
但是我们通常是要给他一个对象

31:25.720 --> 31:27.720
错误对象是什么构造函数

31:28.320 --> 31:29.620
错误对象的构造函数

31:30.220 --> 31:31.020
错误

31:31.020 --> 31:31.720
这里记一下

31:32.520 --> 31:34.520
错误对象的构造函数为AIROR

31:35.020 --> 31:36.320
错误对象的

31:37.420 --> 31:40.620
构造函数为AIROR

31:40.920 --> 31:41.620
AIROR是什么意思

31:41.620 --> 31:42.320
就是个错误

31:43.020 --> 31:43.220
好

31:43.220 --> 31:43.920
咱们来看一下

31:44.020 --> 31:44.520
看一下

31:46.520 --> 31:47.320
我们这里

31:48.120 --> 31:49.220
在这个介石里边

31:49.220 --> 31:50.220
我们这里比方说

31:50.320 --> 31:51.120
判断一下

31:51.220 --> 31:52.920
看一下一个N是不是一个数字

31:53.520 --> 31:54.820
看一下这个N是不是一个数字

31:54.820 --> 31:55.320
判断吧

31:55.720 --> 31:57.120
E是NAN

31:57.820 --> 31:58.620
看一下这个N

31:59.020 --> 32:00.420
如果它不是一个

32:00.920 --> 32:02.520
如果它是一个非数字的话

32:02.520 --> 32:03.420
这里是不是要爆错

32:03.620 --> 32:03.920
对吧

32:04.020 --> 32:04.620
爆错的话

32:04.620 --> 32:06.320
后面代码全部不会运行了

32:06.320 --> 32:07.120
都不会运行了

32:07.520 --> 32:09.020
整个程序终止

32:09.020 --> 32:10.220
这个函数先终止

32:10.620 --> 32:11.720
这个函数先终止

32:12.020 --> 32:13.120
把错误扔出去了

32:13.220 --> 32:14.720
然后这个函数的雕用者

32:14.720 --> 32:15.820
就它在雕用函数

32:16.020 --> 32:16.920
它也会终止

32:17.220 --> 32:18.020
就是这个错误呢

32:18.020 --> 32:19.420
一层一层传递出来

32:20.020 --> 32:20.820
我们这里写上

32:20.820 --> 32:21.420
实说

32:22.020 --> 32:23.020
扔出一个错误

32:23.420 --> 32:24.420
六一个什么

32:24.820 --> 32:25.220
Error

32:25.620 --> 32:26.420
Error是一个对象

32:26.620 --> 32:27.820
这个对象里边有个构造

32:27.820 --> 32:28.520
一个参数

32:28.520 --> 32:29.620
表示错误消息

32:30.120 --> 32:31.120
错误消息是一个字不错

32:31.120 --> 32:32.220
你可以传可以不传

32:32.820 --> 32:33.320
那么这里呢

32:33.320 --> 32:34.720
我可以传递一个错误消息

32:34.920 --> 32:36.320
比方说错误消息为

32:39.320 --> 32:39.720
N

32:40.220 --> 32:43.820
必须是一个正常的数字

32:44.120 --> 32:45.420
必须是一个正常的数字

32:46.620 --> 32:48.020
至少我要能够转换

32:48.120 --> 32:49.720
至少我要能够转换的数字

32:49.720 --> 32:50.920
如你得到的是NAN

32:50.920 --> 32:51.420
那不行

32:51.620 --> 32:53.020
N不是一个正常的数字

32:53.020 --> 32:53.320
不行

32:54.020 --> 32:55.220
保存看一下

32:55.620 --> 32:57.020
我们看一下目前的程序

32:57.020 --> 32:57.820
正常执行

32:57.920 --> 32:58.720
它没有爆错

32:58.820 --> 33:00.220
是因为它没有进入这个判断

33:00.220 --> 33:00.420
对吧

33:00.420 --> 33:01.420
没有进入这个判断

33:01.520 --> 33:02.320
那比如比方说

33:02.320 --> 33:03.720
我这里给它传了一个ABC

33:04.220 --> 33:04.920
ABCD

33:05.420 --> 33:06.020
我把判断

33:06.020 --> 33:06.820
它是不是数数

33:06.820 --> 33:07.320
你看一下

33:07.320 --> 33:07.820
爆穿

33:08.220 --> 33:08.920
是爆错了

33:09.020 --> 33:10.520
它告诉你错误消息是

33:11.020 --> 33:12.520
N必须是一个正常的数字

33:12.620 --> 33:13.620
咱们来看一下

33:13.820 --> 33:14.420
这里呢

33:14.420 --> 33:15.520
它是错误发生的

33:15.720 --> 33:16.320
时间点

33:16.320 --> 33:17.620
就错误发生的位置

33:17.620 --> 33:19.020
你看右边点一下

33:19.220 --> 33:21.020
你看它是在这一行爆错的

33:21.420 --> 33:21.820
看没有

33:22.020 --> 33:23.520
这就是我们自己拨出的错误

33:23.520 --> 33:23.820
对吧

33:23.820 --> 33:25.220
拨出了一个错误对象

33:25.620 --> 33:26.520
其实它就是一个对象

33:26.520 --> 33:27.620
就是一个普通对象而已

33:27.620 --> 33:28.520
我把扔出去了

33:28.820 --> 33:30.420
然后接下来发生什么事了

33:30.420 --> 33:32.820
它形成了一个一层一层的拨

33:33.020 --> 33:33.420
拨出

33:33.420 --> 33:34.820
你看它怎么拨出的

33:35.220 --> 33:36.620
先它说在这里

33:37.420 --> 33:39.120
在TES.GS第三行

33:39.120 --> 33:41.020
就这一行拨出了一个错误

33:41.520 --> 33:42.320
然后这个错误

33:42.320 --> 33:43.420
被谁捕获到了

33:43.420 --> 33:44.920
被16行捕获到了

33:44.920 --> 33:45.620
16行是哪

33:45.620 --> 33:47.020
16行是在调用还说

33:47.220 --> 33:47.520
对吧

33:47.520 --> 33:48.620
在这里捕获到了

33:48.820 --> 33:49.620
然后这里呢

33:49.620 --> 33:50.720
它没有处理这个错误

33:50.720 --> 33:51.620
它又拨出了

33:51.820 --> 33:52.720
是这么一回事

33:52.720 --> 33:54.420
它是一层一层拨出出来了

33:54.620 --> 33:56.320
也就是说我们在调用这个函数

33:56.320 --> 33:57.520
函数在执行

33:57.520 --> 33:58.020
对吧

33:58.020 --> 33:59.120
执行到这一块

33:59.320 --> 34:00.020
我们看一下吧

34:00.020 --> 34:00.920
我们来记录一下

34:01.520 --> 34:03.420
我们在全局环境里边

34:03.720 --> 34:05.120
去调用什么函数呢

34:05.120 --> 34:07.020
调用IsPrem这个函数

34:08.120 --> 34:10.020
这个函数是不是运行错误了

34:10.120 --> 34:12.220
运行错误的时候拨出一个错误

34:12.220 --> 34:14.020
于是这个函数立刻终止

34:14.420 --> 34:16.020
立刻终止执行

34:16.220 --> 34:16.920
函数没了

34:17.220 --> 34:19.820
把错误又扔还给全局对象

34:20.120 --> 34:20.920
全局环境

34:20.920 --> 34:22.320
于是错误跑到这来了

34:22.720 --> 34:23.420
跑到这来了

34:23.920 --> 34:25.020
这个地方错误

34:25.020 --> 34:25.920
我们现在有没有处理

34:25.920 --> 34:26.720
没有处理

34:26.720 --> 34:28.620
我们之后再说怎么来处理这个错误

34:29.220 --> 34:30.020
现在没有处理

34:30.020 --> 34:30.320
于是了

34:30.320 --> 34:32.720
这个全局环境又扔出一个错误

34:33.120 --> 34:35.420
于是就形成了一个错误的堆栈

34:36.220 --> 34:37.820
就形成了错误堆栈

34:37.920 --> 34:39.220
堆栈是怎么回事呢

34:39.420 --> 34:41.020
它最先发生的错误在哪呢

34:41.020 --> 34:42.420
是IsPrem这个函数

34:42.820 --> 34:45.120
然后这个函数又扔给了全局环境

34:45.620 --> 34:46.520
全局环境

34:46.920 --> 34:49.620
然后这个全局环境又扔给了浏览器

34:50.020 --> 34:50.720
浏览器

34:51.120 --> 34:52.520
它把错误显示出来了

34:53.120 --> 34:54.620
浏览器把错误显示出来了

34:55.020 --> 34:56.320
这是它的错误堆栈

34:56.620 --> 34:58.320
你看我们这里可以看得很清楚

34:58.620 --> 34:59.720
现在这一行发生错误

34:59.720 --> 35:01.120
然后又扔给了16行

35:01.620 --> 35:02.320
你要这一次

35:02.820 --> 35:04.520
好那比方说比方说

35:05.620 --> 35:06.920
我们这里再写个函数

35:07.620 --> 35:08.920
这里我们这样写

35:10.220 --> 35:11.820
就没它写的就是ABC

35:11.820 --> 35:13.320
函数A

35:13.820 --> 35:14.720
函数A

35:15.020 --> 35:16.020
然后呢

35:17.320 --> 35:20.320
直接调用函数B

35:20.320 --> 35:21.320
调用函数B

35:21.920 --> 35:23.020
函数B

35:23.720 --> 35:25.920
然后这里函数B调用函数C

35:26.720 --> 35:27.820
调用函数C

35:27.820 --> 35:29.220
然后再写个函数C

35:29.420 --> 35:31.320
函数C的话拋出一个错误

35:31.720 --> 35:32.920
New Azure

35:34.120 --> 35:35.620
随便写吧拋出一个错误

35:35.920 --> 35:37.520
这个IsPrem里面来去

35:37.620 --> 35:39.220
我们这里就这样调用

35:39.820 --> 35:40.820
调用函数A

35:41.120 --> 35:41.820
调用函数A

35:41.820 --> 35:42.720
咱们来看一下

35:42.820 --> 35:43.920
调用函数A的结果

35:45.320 --> 35:46.220
这里运行出来

35:46.820 --> 35:47.720
保证发信一下

35:47.920 --> 35:48.320
看一下

35:48.420 --> 35:49.720
你看错误对战是不是出来了

35:50.320 --> 35:51.320
先发生错误在这一行

35:51.320 --> 35:52.820
对吧函数C发生错误

35:53.020 --> 35:54.820
然后函数C没有处理

35:54.920 --> 35:56.120
然后呢交给函数B

35:56.420 --> 35:57.320
函数B也没有处理

35:57.320 --> 35:58.220
交给函数A

35:58.320 --> 36:00.020
然后函数A呢交给全局环境

36:00.120 --> 36:01.520
看没有 这个错误对战就出来了

36:01.720 --> 36:03.220
因为我们调用的次序呢

36:03.320 --> 36:04.520
它的对战的信息呢

36:04.520 --> 36:06.120
跟我们调用次序刚好相反

36:06.520 --> 36:08.620
我们调用的次序呢是全局环境

36:08.720 --> 36:09.920
然后去调用A

36:10.020 --> 36:11.320
A去调用B

36:11.520 --> 36:12.820
B去调用C

36:12.920 --> 36:14.120
然后C发生错误

36:14.220 --> 36:15.920
发生错误的时候一层一层退出

36:16.320 --> 36:17.520
C先中断执行

36:17.620 --> 36:18.920
中断执行交给B

36:19.320 --> 36:20.120
B发生错误

36:20.120 --> 36:21.820
它也没有 没法处理对吧

36:21.820 --> 36:22.820
没法处理这个错误

36:22.820 --> 36:24.120
于是它也中断执行

36:24.420 --> 36:25.920
它也中断执行交给A

36:26.720 --> 36:28.720
然后呢A也没有处理

36:28.720 --> 36:29.620
交给全局环境

36:30.220 --> 36:30.920
你看这意思吧

36:31.720 --> 36:33.520
就这里也就是说A里边了

36:33.520 --> 36:35.620
这里什么counsel no A

36:36.220 --> 36:37.220
没有执行对吧

36:37.920 --> 36:39.220
A1没有执行

36:39.420 --> 36:41.320
那么这个B1也没有执行

36:41.820 --> 36:42.720
都没有执行

36:42.920 --> 36:43.620
然后呢

36:44.120 --> 36:45.120
这个C1

36:45.820 --> 36:47.320
C1也没有执行

36:47.520 --> 36:49.320
因为都没有处理这些错误嘛

36:49.320 --> 36:50.820
还没有都没有处理这些错误

36:50.820 --> 36:52.820
你看这里给你显示的更加明显

36:52.820 --> 36:53.820
它这里变淡了

36:54.820 --> 36:56.220
这个文字变成灰色了

36:57.120 --> 36:58.320
变成暗淡的颜色

36:58.420 --> 36:58.820
为什么呢

36:58.820 --> 37:00.920
因为它告诉你看这里

37:01.020 --> 37:02.720
它说检测到无法访问的代码

37:02.720 --> 37:03.620
建议你删除

37:03.720 --> 37:05.020
这个代码是不可能访问到的

37:05.120 --> 37:06.120
因为你直接抛出了错误

37:06.120 --> 37:07.420
后面的代码是不会执行的

37:08.420 --> 37:09.720
这些代码都不会执行

37:09.920 --> 37:10.820
因为它遇到错误了

37:10.820 --> 37:11.920
你看再来一次

37:12.320 --> 37:13.320
运行这个玩意

37:14.220 --> 37:14.820
运行A

37:14.820 --> 37:15.820
A去运行B

37:15.920 --> 37:16.920
B还没有运行完

37:16.920 --> 37:17.920
B又去运行C

37:17.920 --> 37:18.820
C还没有运行完

37:18.820 --> 37:19.820
C抛出了错误

37:19.820 --> 37:20.820
后面没法执行的

37:20.820 --> 37:21.220
C

37:21.420 --> 37:22.120
C中断

37:22.420 --> 37:23.120
C中断

37:23.120 --> 37:24.620
然后一层一层返回过去

37:24.620 --> 37:25.720
C去掉

37:25.920 --> 37:26.620
C去掉

37:26.620 --> 37:27.420
对账信息

37:27.620 --> 37:28.420
对账信息

37:30.420 --> 37:31.020
C

37:31.020 --> 37:31.320
对吧

37:31.320 --> 37:32.020
C去掉

37:32.520 --> 37:33.220
然后没了

37:33.220 --> 37:33.920
C没了

37:34.020 --> 37:34.820
然后交给B

37:35.120 --> 37:36.820
B在运行这个代码出的问题

37:36.820 --> 37:37.720
B也没有处理

37:38.120 --> 37:39.020
B也中断了

37:39.120 --> 37:40.020
B也跟着中断

37:41.520 --> 37:41.920
B

37:42.120 --> 37:42.720
中断了

37:43.120 --> 37:44.020
后面没有执行的

37:44.320 --> 37:45.320
B也没了

37:45.720 --> 37:46.820
然后又回到A

37:47.320 --> 37:47.820
A

37:47.920 --> 37:49.420
它在运行B的时候出了问题

37:49.420 --> 37:49.820
对吧

37:50.420 --> 37:51.220
它也没有处理

37:51.220 --> 37:52.320
那么A也中断了

37:52.820 --> 37:53.920
对账信息就是A

37:54.120 --> 37:55.720
又交给全局环境

37:55.820 --> 37:57.520
全局环境它也处理不了

37:57.520 --> 37:59.020
比方说这里我们再输出一个

37:59.620 --> 38:00.120
G

38:00.120 --> 38:00.620
G1

38:00.620 --> 38:01.820
表示全局环境的E

38:01.820 --> 38:02.720
它也输出不了

38:02.720 --> 38:04.120
因为它没法处理这个错误

38:04.320 --> 38:04.920
没有处理

38:04.920 --> 38:06.420
于是全局环境的

38:07.120 --> 38:08.320
又到对账的底部了

38:08.620 --> 38:09.420
明白这个意思吗

38:09.620 --> 38:11.020
这就是托步的对账信息

38:11.120 --> 38:12.920
我们要会约读这个对账信息

38:12.920 --> 38:14.820
你就可以看得很清楚

38:14.920 --> 38:16.720
错误是怎么一层一层出来的

38:17.620 --> 38:18.220
再看一次

38:18.520 --> 38:19.220
看这个信息

38:19.420 --> 38:21.420
CBA

38:21.920 --> 38:22.920
这个全局环境

38:23.420 --> 38:23.820
看没

38:24.620 --> 38:25.920
它是一层一层出来的

38:26.520 --> 38:27.620
有些同学说下面这个是什么

38:27.620 --> 38:29.320
下面这个是文件的路径

38:29.320 --> 38:30.320
文件的路径

38:30.320 --> 38:31.120
中间这一坨

38:31.120 --> 38:33.120
是因为我这个文件路径里边有中文

38:33.320 --> 38:34.520
中文它可以进行的编码

38:34.620 --> 38:36.120
所以看上去的比较乱

38:36.320 --> 38:37.220
这个不用去看

38:37.420 --> 38:38.120
CBA

38:38.320 --> 38:38.620
看没有

38:38.620 --> 38:39.720
它有多错误对账信息

38:42.020 --> 38:43.420
这是Error对象

38:44.020 --> 38:45.120
Error对象里边

38:45.120 --> 38:46.720
它其实有一些属性

38:46.720 --> 38:48.520
实际上是有一些属性的

38:48.620 --> 38:49.420
咱们来看一下

38:50.420 --> 38:51.320
Error对象里边

38:51.320 --> 38:52.720
它有些属性可以访问的

38:53.120 --> 38:53.820
比方说

38:54.220 --> 38:54.620
e

38:56.120 --> 38:57.320
6一个Error

38:58.420 --> 38:59.320
我们随便写一把

39:00.120 --> 39:01.320
Error对象里面有哪些属性

39:01.320 --> 39:02.620
你看它有这么一些属性

39:02.620 --> 39:03.420
一个是message

39:04.020 --> 39:04.720
我们要输出

39:04.920 --> 39:05.920
输出这个对象看一下

39:06.320 --> 39:07.220
console.e

39:07.620 --> 39:08.220
输出一下

39:08.320 --> 39:08.820
保存

39:09.520 --> 39:09.920
你看

39:10.020 --> 39:11.520
它输出的是一个Error对象

39:11.520 --> 39:11.820
对吧

39:12.220 --> 39:13.720
它变成支付串了

39:13.920 --> 39:15.020
它的错误消息是这个

39:15.120 --> 39:16.920
并且它打印出了错误对象

39:17.020 --> 39:19.720
但是我们看不到对象的对象结构

39:19.920 --> 39:22.020
如果我们想看到一个对象的对象结构的话

39:22.120 --> 39:23.820
我们最好是用这种方式来输出

39:24.020 --> 39:24.920
dir

39:25.420 --> 39:29.420
dir表示查看对象的内部结构

39:29.820 --> 39:30.620
保存看一下

39:31.120 --> 39:32.120
看一下dir

39:32.920 --> 39:34.420
你看一下这里面有哪些东西

39:34.620 --> 39:35.620
有message对吧

39:35.620 --> 39:36.820
message就是错误消息

39:36.820 --> 39:37.920
我们给它付的值

39:38.220 --> 39:39.220
stake什么意思

39:39.320 --> 39:40.520
stake表示错误对战

39:40.520 --> 39:42.320
你看这里有错误对战

39:42.620 --> 39:43.420
错误对战

39:43.420 --> 39:44.620
它这里面有很多信息

39:44.620 --> 39:45.820
它还有换行

39:45.820 --> 39:46.020
对吧

39:46.020 --> 39:46.720
还有换行

39:47.720 --> 39:48.420
然后呢

39:49.320 --> 39:50.120
然后还有啥了

39:50.120 --> 39:50.720
也就没啥了

39:50.720 --> 39:51.020
对吧

39:51.020 --> 39:51.720
就没啥了

39:52.420 --> 39:54.320
我记得它里边还有一个属性叫困难

39:54.620 --> 39:55.220
我记得

39:56.120 --> 39:56.920
我现在没有了

39:56.920 --> 39:57.520
没有就算了吧

39:57.520 --> 39:58.220
没有就算了

39:58.720 --> 39:58.920
ok

39:58.920 --> 39:59.720
这就是错误

40:00.320 --> 40:00.720
看没

40:02.320 --> 40:03.820
错误本质上的就是个对象

40:03.820 --> 40:05.020
但是在介石里边

40:05.020 --> 40:08.020
它要求了没有那么的严格

40:08.120 --> 40:09.820
因此你抛出错误的时候

40:09.820 --> 40:12.020
实际上也可以抛出一个数字

40:12.920 --> 40:14.420
你看它也可以抛出一个数字

40:14.620 --> 40:15.620
一个数字作为错误

40:15.620 --> 40:16.520
但是不要这么去干

40:16.520 --> 40:17.420
不要这么去干

40:18.020 --> 40:18.720
然后呢

40:18.820 --> 40:19.620
还有什么呢

40:19.720 --> 40:20.920
还可以抛出一个制服串

40:22.020 --> 40:22.620
也可以

40:22.820 --> 40:23.620
但是不要这么干

40:23.620 --> 40:24.420
不要这么干

40:24.720 --> 40:26.420
最好是抛出一个错误对象

40:26.420 --> 40:27.820
六一个 error 对象

40:28.520 --> 40:30.020
其实除了 error 之外

40:30.020 --> 40:32.120
它还给你提供了一些错误对象

40:32.320 --> 40:32.820
来

40:38.020 --> 40:40.720
不同的就是不同的错误构造函数

40:40.720 --> 40:42.320
可以标识不同的错误类型

40:42.320 --> 40:44.320
它还可以提供了一些错误的构造函数

40:44.420 --> 40:46.020
就是我们现在刚看到一个 error 了

40:46.020 --> 40:46.520
对吧

40:46.620 --> 40:48.620
我们看一下还有没有其他的 mdn

40:50.630 --> 40:51.330
看一下啊

40:52.830 --> 40:53.030
好

40:53.030 --> 40:54.430
看一下还有没有其他的呢

40:54.430 --> 40:56.030
他告诉你还有这么一些错误

40:56.430 --> 40:57.130
这么一错误

40:57.130 --> 40:58.430
正常我们看几个

40:58.630 --> 41:00.030
一个是 range error

41:00.330 --> 41:00.930
这个错误呢

41:00.930 --> 41:02.030
什么时候发生的

41:02.030 --> 41:04.630
他往往是什么输出的参数

41:04.630 --> 41:06.830
超出有效范围的时候会发生这样的错误

41:06.930 --> 41:07.830
咱们来看一下吧

41:08.830 --> 41:10.230
他告诉你下面有例子

41:10.330 --> 41:11.930
会告诉你什么什么时候

41:11.930 --> 41:12.930
会发生这个错误

41:13.430 --> 41:15.230
他这里是自己抛出这个错误的

41:15.330 --> 41:16.030
你看他这里

41:16.330 --> 41:16.930
比方说啊

41:17.030 --> 41:19.530
他要他要去检查一个数字

41:19.530 --> 41:21.330
是不是有效的下标

41:21.630 --> 41:23.130
是不是一个有效的下标

41:23.130 --> 41:23.530
因此呢

41:23.530 --> 41:25.230
他可以用这种方式来进行判断

41:25.330 --> 41:27.230
如果不在有效的下标范围之内

41:27.230 --> 41:28.330
他抛出一个错误

41:28.530 --> 41:29.430
抛出一个错误

41:29.630 --> 41:31.030
你可以自己进行检查

41:31.930 --> 41:33.330
其实我们在用数组的时候

41:33.330 --> 41:34.630
他很少给你抛出错误的

41:34.730 --> 41:35.630
因为在介石里面

41:35.630 --> 41:37.230
数组的要求比较宽松

41:38.230 --> 41:40.230
哪怕你下标越界了

41:40.230 --> 41:41.230
超出了边界

41:41.230 --> 41:42.230
他也不会报错的

41:42.430 --> 41:43.330
也不会报错的

41:44.230 --> 41:44.730
好吧

41:46.530 --> 41:47.330
好下一个啊

41:47.530 --> 41:48.030
下一个

41:50.230 --> 41:51.430
reference error

41:51.630 --> 41:52.830
这个错误很常见

41:52.830 --> 41:54.330
他叫做无效引用

41:54.430 --> 41:56.130
就是你抛出这个错误的时候呢

41:56.430 --> 41:57.430
往往会告诉你

41:57.430 --> 41:58.530
有个东西呢

41:58.730 --> 41:59.530
他是空的

41:59.730 --> 42:00.430
你不能

42:00.630 --> 42:01.130
不是

42:01.130 --> 42:01.930
有个东西呢

42:01.930 --> 42:03.430
是没有定义的

42:03.430 --> 42:04.330
你不能去使用

42:04.330 --> 42:05.630
这就是reference error

42:05.830 --> 42:06.630
咱们来看一下吧

42:08.730 --> 42:09.930
就错误有很多类型

42:09.930 --> 42:10.930
就是你抛出错误的时候

42:10.930 --> 42:12.530
你不一定是不一定是error

42:12.530 --> 42:13.690
比方说你可以用这个

42:13.730 --> 42:14.530
这个构造函数

42:14.530 --> 42:15.830
这些都是构造函数啊

42:16.130 --> 42:17.430
你可以创建这些的对象

42:17.430 --> 42:18.930
来表示不同的错误

42:19.830 --> 42:20.830
reference error

42:21.330 --> 42:22.830
比方说你可以抛出这个错误

42:22.830 --> 42:24.030
可以写写错误消息

42:25.330 --> 42:26.130
有什么区别呢

42:26.130 --> 42:26.930
没啥区别

42:27.030 --> 42:28.330
就是错误的类型变了

42:28.330 --> 42:28.730
你看

42:28.930 --> 42:29.930
reference error

42:30.130 --> 42:31.130
你看到这个的时候呢

42:31.130 --> 42:32.230
表示引用错误

42:32.430 --> 42:33.230
引用错误

42:33.330 --> 42:35.530
引用错误通常表示什么意思呢

42:35.530 --> 42:37.030
他只是意识上的不同啊

42:37.230 --> 42:38.330
效果都是一样的

42:38.830 --> 42:40.330
比方说我们这里有个变量

42:40.530 --> 42:41.130
没有变量

42:41.130 --> 42:42.430
直接输出一个变量

42:42.430 --> 42:43.730
哎有这个变量吗

42:43.730 --> 42:44.530
没有对吧

42:44.630 --> 42:45.130
没有

42:45.230 --> 42:46.130
保存看一下

42:46.230 --> 42:47.630
你看是不是一个引用错误

42:48.030 --> 42:50.430
GS代码会自动给你抛出这个引用错误

42:50.430 --> 42:51.730
reference error

42:51.930 --> 42:53.230
啊这个根本不存在

42:53.230 --> 42:54.530
a is not defined

42:55.030 --> 42:55.930
is not defined

42:56.330 --> 42:56.930
了解是吧

42:57.530 --> 42:58.530
就是一些常见的错误

42:58.530 --> 42:59.430
了解一下就行了

42:59.730 --> 43:01.130
啊这个是语法错误啊

43:01.430 --> 43:02.630
syntax error

43:02.630 --> 43:03.530
是个语法错误

43:03.730 --> 43:05.330
啊这个type error

43:05.430 --> 43:06.330
type error

43:06.530 --> 43:07.530
是类型错误

43:07.630 --> 43:10.330
类型错误是咱们GS里面最常见的错误

43:10.530 --> 43:11.630
非常非常常见

43:12.030 --> 43:13.030
最常见的是啥呢

43:13.330 --> 43:14.030
你定一个变量

43:14.030 --> 43:14.330
哎

43:14.930 --> 43:16.830
你在调用他里面的函数

43:17.230 --> 43:17.830
abc

43:18.730 --> 43:19.330
abc

43:19.930 --> 43:21.230
比方说使用他的属性

43:21.430 --> 43:22.330
保存你看一下

43:23.430 --> 43:24.430
他就是个类型错误

43:24.430 --> 43:25.730
type error啊

43:25.730 --> 43:26.530
表示的是

43:26.830 --> 43:28.430
你这个类型是undefined

43:28.430 --> 43:30.530
undefined里面是没有这个属性的abc的

43:30.730 --> 43:32.230
啊他就告诉你这个错误

43:32.730 --> 43:33.930
啊这些呢我们都可以

43:34.030 --> 43:35.330
都可以被我们利用啊

43:35.330 --> 43:36.330
都可以被我们利用

43:36.430 --> 43:38.830
就是我们希望抛出错误的时候呢

43:39.030 --> 43:40.530
可以根据自己的情况

43:40.530 --> 43:42.830
来选择抛出什么类型的错误

43:43.030 --> 43:44.230
啊可以抛出这个错误

43:44.230 --> 43:46.230
可以抛出另外一个比方的抛出type error

43:46.530 --> 43:47.230
啊也可以

43:47.230 --> 43:48.830
你看我们自己现在自己来抛

43:48.830 --> 43:49.730
抛出type error

43:49.930 --> 43:51.930
可不可以可以啊可以

43:53.030 --> 43:53.730
那有啥区别呢

43:53.730 --> 43:55.830
没啥区别只是方便了

43:56.630 --> 43:58.230
啊就是调错的人了

43:58.230 --> 43:59.530
看到这个错误信息

43:59.730 --> 44:00.630
一是看到错误信息

44:00.630 --> 44:01.630
二是看到错误类型

44:01.630 --> 44:02.830
类型是type error

44:02.830 --> 44:03.430
他就知道了啊

44:03.430 --> 44:05.230
这里可能是跟类型相关的错误

44:05.330 --> 44:07.130
啊只是在告诉调错的人

44:07.330 --> 44:08.130
这些信息

44:08.530 --> 44:09.330
明白这个意思吗

44:10.330 --> 44:11.530
好这是抛出错误啊

44:11.530 --> 44:13.130
抛出错误有的时候还蛮重要的

44:13.130 --> 44:15.430
特别是以后里面做一些大型项目的时候

44:15.430 --> 44:17.030
公司有强制要求

44:17.430 --> 44:18.930
某些函数什么情况下

44:18.930 --> 44:20.830
你必须给我抛出抛出错误

44:20.830 --> 44:21.530
你不能再

44:21.730 --> 44:23.430
不能按照正常的逻辑执行

44:23.430 --> 44:26.030
他已经没有办法按照正常的逻辑执行了

44:26.830 --> 44:27.330
好吧

44:28.430 --> 44:29.430
好另外一个啊

44:29.730 --> 44:31.130
另外一个就最后一个支持了

44:31.930 --> 44:34.130
有抛出错误就有补货错误

44:34.730 --> 44:35.830
啊补货错误

44:36.730 --> 44:37.630
啊就是你

44:38.130 --> 44:40.530
调用你调用你调用你这个函数的时候

44:40.530 --> 44:41.530
你发生了一个问题

44:41.930 --> 44:43.030
你在告诉我什么问题

44:43.030 --> 44:43.830
你会告诉我

44:44.230 --> 44:45.630
好告诉我问题过后呢

44:45.630 --> 44:46.630
我可能

44:47.130 --> 44:48.330
会忽略这个问题

44:48.530 --> 44:50.430
也可能呢会解决这个问题

44:51.030 --> 44:53.030
当我要去对他进行处理的时候

44:53.030 --> 44:54.330
叫做补货错误

44:54.530 --> 44:57.730
就是我能知道他有可能会发生问题

44:58.230 --> 45:00.230
那么发生了问题的时候我要做什么

45:00.230 --> 45:01.830
这叫做补货错误啊

45:02.230 --> 45:03.230
这个有个前提条件啊

45:03.330 --> 45:06.330
补货错误跟处跟解决错误是两罢事啊

45:06.730 --> 45:07.830
解决错误是什么

45:07.830 --> 45:09.530
你根本就不应该有错

45:09.730 --> 45:10.830
比方说两个书相加

45:11.630 --> 45:13.430
啊我给你一个三给你一个四

45:13.430 --> 45:14.430
你必须要给我结果

45:14.430 --> 45:15.630
你不不应该有错

45:16.030 --> 45:18.230
这叫处理错误叫调式错误

45:19.130 --> 45:22.830
啊比方说呃我要从网上去下载一个文件

45:23.430 --> 45:24.630
有可能网断了对吧

45:24.630 --> 45:25.630
这个谁说的准了

45:25.730 --> 45:26.530
有可能网断了

45:26.530 --> 45:28.230
这个错误是不可避免的

45:28.230 --> 45:29.430
他有可能发生

45:29.530 --> 45:30.730
他有可能不发生

45:30.730 --> 45:32.630
你不能说这个错误一定不能发生

45:33.330 --> 45:33.830
你看这个意思吧

45:33.830 --> 45:35.130
你们这个这两个的区别吗

45:35.430 --> 45:36.330
两个书相加

45:37.030 --> 45:38.030
无论发生什么情况

45:38.030 --> 45:39.230
你必须要告诉我结果

45:39.230 --> 45:40.230
你不是告诉我结果

45:40.230 --> 45:41.530
那里程序有问题

45:41.630 --> 45:43.930
我必须要处理的程序问题

45:44.330 --> 45:45.030
你要这意思吧

45:45.430 --> 45:47.330
但是如果我要去下载一个文件

45:48.130 --> 45:49.930
比方说用程序去下载一个文件

45:50.330 --> 45:51.730
他有可能网络出了问题

45:51.730 --> 45:52.530
他下载不了

45:52.630 --> 45:53.830
这个是没法解决的

45:53.930 --> 45:55.830
我们只能说给他一个提示

45:55.830 --> 45:57.630
或者是等于或者再重新下载

45:58.130 --> 45:59.730
这种错误是没法解决的

46:00.230 --> 46:01.730
啊我们只能去处理

46:02.130 --> 46:03.130
只能去补货

46:03.530 --> 46:06.930
用一种折腾的方法去去完善他

46:07.030 --> 46:09.030
但是那你说是程序错误吗

46:09.030 --> 46:10.930
他不是程序错误是网络出了问题

46:10.930 --> 46:11.630
那怎么办呢

46:12.130 --> 46:14.330
对吧像有些像这种情况下

46:14.830 --> 46:17.330
我们认为了有些时候了

46:17.730 --> 46:19.530
他错误是无法避免的

46:19.730 --> 46:20.730
我们只需要知道

46:20.730 --> 46:22.730
当错误发生的时候

46:22.730 --> 46:24.530
我要做什么事情

46:24.930 --> 46:26.230
这叫做补货错误

46:26.830 --> 46:29.530
好补货错误的使用语法是他的语法

46:31.930 --> 46:33.730
叫做train

46:33.730 --> 46:34.730
train

46:35.730 --> 46:36.730
代码块

46:37.530 --> 46:38.530
1

46:38.730 --> 46:39.530
tash

46:40.330 --> 46:41.130
完整写法

46:41.130 --> 46:42.330
我写的是完整写法

46:42.730 --> 46:44.330
然后呢错误对象

46:47.440 --> 46:48.240
代码块

46:48.740 --> 46:49.240
2

46:49.540 --> 46:50.540
然后finally

46:51.240 --> 46:52.440
完整写法是这样子

46:53.440 --> 46:54.240
代码块

46:54.340 --> 46:54.840
3

46:55.340 --> 46:56.740
这是错误的补货

46:56.840 --> 46:57.740
如何补货

46:57.840 --> 46:58.540
什么意思呢

46:58.540 --> 46:59.740
他的意思是这样子

47:00.140 --> 47:00.640
当

47:01.640 --> 47:04.840
啊运行代码1的时候

47:08.710 --> 47:10.210
如果发生错误

47:10.310 --> 47:11.410
如果出现了问题

47:12.210 --> 47:13.710
立即停止

47:14.110 --> 47:16.010
代码1的执行

47:16.810 --> 47:20.310
转而执行代码2

47:20.810 --> 47:21.910
转而开启什么

47:22.010 --> 47:22.710
trace吗

47:22.810 --> 47:23.710
我试一下

47:23.710 --> 47:25.410
我试一下能不能成功执行

47:25.810 --> 47:27.010
如果执行中出了问题

47:27.010 --> 47:28.310
我马上进入开启

47:28.310 --> 47:29.410
开始补货

47:29.610 --> 47:30.410
补货错误

47:30.610 --> 47:32.010
转而执行代码2

47:32.610 --> 47:33.910
转而执行代码2

47:35.310 --> 47:36.310
代码2中

47:36.410 --> 47:37.610
就是这里的错误对象

47:37.910 --> 47:38.910
错误对象为什么

47:39.110 --> 47:40.210
错误对象为

47:41.010 --> 47:42.510
抛出的错误对象

47:45.350 --> 47:46.050
错误对象

47:46.150 --> 47:47.050
执行代码2

47:48.750 --> 47:49.550
无论

47:50.050 --> 47:52.850
无论代码1和代码2

47:54.550 --> 47:55.750
是否执行

47:56.550 --> 47:57.250
完成

47:57.650 --> 47:58.650
是否执行

47:59.250 --> 48:03.250
最终都将执行代码3

48:03.550 --> 48:04.550
就是翻了你这个块

48:06.550 --> 48:07.150
没有这个意思吧

48:07.450 --> 48:07.550
好

48:07.550 --> 48:08.350
咱们来举个例子

48:08.350 --> 48:09.350
举个例子来说明

48:10.750 --> 48:11.750
好不要坚持里边

48:12.350 --> 48:14.550
咱们这里调用C的时候是否抛出错误

48:14.550 --> 48:14.950
对吧

48:15.150 --> 48:16.350
对B这个函数而言

48:16.350 --> 48:17.850
调用C的时候抛出错误

48:17.850 --> 48:18.150
ok

48:18.150 --> 48:19.150
我们可以这样子写

48:19.850 --> 48:20.350
track

48:22.780 --> 48:23.280
看着啊

48:23.980 --> 48:24.580
catch

48:26.280 --> 48:26.680
e

48:26.680 --> 48:27.380
这里写个e

48:27.380 --> 48:28.980
e通常用来表示error

48:28.980 --> 48:29.780
用来表示error

48:29.780 --> 48:31.780
或者是arr表示error错误

48:31.780 --> 48:31.980
好

48:31.980 --> 48:33.780
这里我们把这个arr输出

48:34.980 --> 48:38.380
我们或者逗号前面写一个有错误发生了

48:39.580 --> 48:42.980
运行C的时候发生了问题

48:43.580 --> 48:44.580
发生了问题

48:44.580 --> 48:44.780
好

48:44.780 --> 48:45.880
后面我们再写个翻那里

48:46.580 --> 48:47.080
翻那里

48:48.780 --> 48:49.580
处理完成

48:50.080 --> 48:50.780
处理完成

48:50.780 --> 48:51.580
好看一下啊

48:52.180 --> 48:53.780
当B去调用C的时候

48:54.180 --> 48:55.280
C是不是抛出一个错误

48:55.280 --> 48:55.980
C没怕处理

48:55.980 --> 48:56.180
对吧

48:56.180 --> 48:57.180
C没有做任何处理

48:57.780 --> 48:59.180
那C就终止执行了

48:59.180 --> 49:00.380
然后又回到B这一块

49:00.380 --> 49:01.480
B这一块在处理

49:01.480 --> 49:01.780
看没

49:02.180 --> 49:03.180
B这一块在补货处理

49:03.180 --> 49:03.780
在处理

49:04.080 --> 49:05.480
我就把它处理了

49:05.480 --> 49:06.580
如果你发生了错误

49:06.580 --> 49:07.880
我就去执行这个代码

49:07.880 --> 49:08.080
好

49:08.080 --> 49:09.280
咱们来看一下执行结果

49:10.080 --> 49:10.580
你看一下

49:12.080 --> 49:12.280
好

49:12.280 --> 49:13.080
怎么来理解

49:13.080 --> 49:15.280
咱们来整个来捋一遍

49:15.280 --> 49:16.580
捋一遍它怎么回事

49:17.980 --> 49:18.180
好

49:18.180 --> 49:19.480
首先是调用堆站

49:19.880 --> 49:21.180
调用堆站是怎么会调用的呢

49:21.180 --> 49:22.180
我们调用的是e

49:22.180 --> 49:22.680
对不对

49:22.680 --> 49:23.880
调用的是e

49:23.880 --> 49:24.680
好

49:24.680 --> 49:25.780
我们调用e

49:26.780 --> 49:27.480
然后呢

49:27.480 --> 49:28.680
就是全局环境

49:28.680 --> 49:29.880
全局环境

49:30.380 --> 49:31.580
然后调用谁

49:31.580 --> 49:32.580
调用e

49:32.580 --> 49:33.480
e去调用谁

49:33.480 --> 49:34.280
调用b

49:34.280 --> 49:35.280
b去调用谁

49:35.280 --> 49:36.080
调用c

49:36.080 --> 49:36.280
好

49:36.280 --> 49:37.180
谁就没了啊

49:37.180 --> 49:37.680
好

49:37.680 --> 49:38.280
于是呢

49:38.280 --> 49:39.780
这里运行c

49:39.780 --> 49:41.480
谁是不是发生错误了

49:41.480 --> 49:43.080
看堆站信息啊

49:43.080 --> 49:43.980
调用堆站

49:43.980 --> 49:45.480
谁是不是发生错误了

49:45.480 --> 49:45.680
好

49:45.680 --> 49:46.280
发生了错误

49:46.280 --> 49:47.180
谁有没有处理

49:47.180 --> 49:47.980
他没有处理

49:47.980 --> 49:48.480
他怎么处理

49:48.480 --> 49:49.480
啥都没处理

49:49.480 --> 49:50.680
好

49:50.680 --> 49:51.680
于是谁完了

49:51.680 --> 49:52.180
谁没了

49:52.180 --> 49:52.880
对吧

49:52.880 --> 49:53.080
好

49:53.080 --> 49:54.680
又回到B这一块

49:54.680 --> 49:55.980
B有没有处理这个错误

49:55.980 --> 49:56.580
谁发生错误

49:56.580 --> 49:58.280
他又跑到B这里来了

49:58.280 --> 49:59.680
表示这句话出了问题

49:59.680 --> 49:59.980
好

49:59.980 --> 50:00.980
B有没有处理这个错误

50:00.980 --> 50:02.280
是不是有处理

50:02.480 --> 50:03.580
有处理的话

50:03.580 --> 50:04.680
这里终止

50:04.680 --> 50:05.380
在这里终止

50:05.380 --> 50:07.980
比如说康授这个B1显示不出来

50:07.980 --> 50:08.980
B1显示不出来

50:08.980 --> 50:10.680
他在这里处理这个错误

50:10.680 --> 50:10.980
好

50:10.980 --> 50:11.380
于是呢

50:11.380 --> 50:13.780
转而执行c

50:13.780 --> 50:14.680
B处理的错误

50:14.680 --> 50:16.380
于是他B正常执行了

50:16.380 --> 50:18.680
转而去执行这个c

50:18.680 --> 50:19.480
好

50:19.480 --> 50:20.180
开启执行完了

50:20.180 --> 50:21.680
你看一下输出

50:21.680 --> 50:22.380
你看一下输出

50:25.180 --> 50:25.780
堆站信息

50:25.780 --> 50:26.280
堆站信息

50:26.280 --> 50:27.780
他选出记录权的

50:27.780 --> 50:29.680
因为你调用的环境是

50:29.680 --> 50:30.380
环境

50:30.380 --> 50:31.780
全球环境abc

50:31.780 --> 50:34.080
他对战的信息一定是cba

50:34.080 --> 50:35.080
全球环境

50:35.080 --> 50:36.080
一定是这个环境

50:36.080 --> 50:36.980
但是他会

50:36.980 --> 50:39.380
他对后边的产生的影响是不一样的

50:39.380 --> 50:39.880
你看看

50:41.080 --> 50:42.580
这句话是不是运行了

50:42.580 --> 50:43.080
咱们来看一下

50:43.080 --> 50:44.380
这句话有没有运行

50:44.380 --> 50:45.680
第一次是不是运行的这个

50:45.680 --> 50:47.180
运行c的时候发生的问题

50:47.180 --> 50:49.080
然后输出了这个错误消息

50:49.080 --> 50:51.280
然后输出了这个调用对战

50:51.280 --> 50:53.480
调用对战就是函数的执行对战

50:54.480 --> 50:56.080
函数的执行对战

50:56.080 --> 50:57.980
从全球环境一直到c

50:57.980 --> 50:59.880
它是这么一个顺序

50:59.880 --> 51:00.080
好

51:00.180 --> 51:00.880
然后看一下

51:02.380 --> 51:03.380
这句话运行完了过后

51:03.380 --> 51:04.380
是不是要运行翻那里

51:04.380 --> 51:04.780
对吧

51:04.780 --> 51:05.680
处理完成

51:05.680 --> 51:06.580
看没有

51:06.580 --> 51:07.880
处理完成

51:07.880 --> 51:08.080
好

51:08.080 --> 51:09.280
这样子运行完了

51:09.280 --> 51:10.880
你看一下接下来往后看

51:11.780 --> 51:13.480
b是不是正常的运行完了

51:13.480 --> 51:14.380
他处理的错误

51:14.380 --> 51:15.980
他有错误没有有错误

51:15.980 --> 51:17.680
但是我已经处理了

51:17.680 --> 51:19.280
于是对a而言了

51:19.280 --> 51:20.480
b运行完了

51:20.480 --> 51:21.980
对a而言

51:21.980 --> 51:24.480
a好像b没有发生错误一样

51:24.480 --> 51:26.580
就好比说b没有发生这个错误

51:26.580 --> 51:26.880
看没

51:28.680 --> 51:29.580
a正常执行

51:30.580 --> 51:31.780
正常执行

51:31.780 --> 51:33.880
全球环境的正常执行记忆

51:34.780 --> 51:35.380
看没有

51:35.380 --> 51:37.980
只要你错误处理了之后

51:37.980 --> 51:39.580
就好像没有发生这个错误了

51:39.580 --> 51:41.180
这个错误就没有发生了

51:41.180 --> 51:42.480
就这么个意思

51:42.480 --> 51:43.780
如果你处理了这个错误

51:43.780 --> 51:44.480
那么这个错误的

51:44.480 --> 51:45.680
就好比是没有发生了

51:47.380 --> 51:48.880
就这么个意思

51:51.080 --> 51:51.880
比方说

51:51.880 --> 51:53.980
咱们再举个例子

51:56.480 --> 51:57.680
有一天那里朋友

52:00.480 --> 52:01.780
让你去修一下电脑

52:01.780 --> 52:02.680
对吧

52:02.680 --> 52:03.680
你朋友

52:03.680 --> 52:05.480
让你去修电脑

52:05.480 --> 52:08.480
然后你就接受了这个任务

52:08.480 --> 52:09.580
比方说一个美女

52:09.580 --> 52:10.380
一个女神

52:12.280 --> 52:13.580
让你去修电脑

52:13.580 --> 52:15.180
然后你接受了这个任务

52:15.180 --> 52:16.580
然后你不会修

52:16.580 --> 52:19.980
于是你转给了谁呢

52:19.980 --> 52:21.580
转给了你的背胎

52:21.580 --> 52:23.280
背胎一

52:23.280 --> 52:24.180
你的背胎一

52:24.180 --> 52:24.980
他也不会修

52:24.980 --> 52:27.080
他就转给了你的背胎二

52:27.080 --> 52:28.980
背胎二

52:29.080 --> 52:30.380
那么这个时候

52:30.380 --> 52:31.580
背胎二

52:31.580 --> 52:32.980
这个就是调用堆栈

52:32.980 --> 52:34.180
从这里到这里

52:34.180 --> 52:35.980
到这里就是调用堆栈

52:35.980 --> 52:36.980
这就是调用堆栈

52:36.980 --> 52:38.780
对堆栈你就已经出来了

52:38.780 --> 52:39.280
好

52:39.280 --> 52:41.480
如果你这里发生了错误

52:41.480 --> 52:42.680
你背胎二

52:42.680 --> 52:43.780
他修了电脑之后

52:43.780 --> 52:45.180
修得有问题

52:45.180 --> 52:45.780
出了问题

52:47.380 --> 52:48.580
然后爆炸了

52:48.580 --> 52:49.580
电脑爆炸了

52:49.580 --> 52:50.980
你女神的电脑爆炸了

52:50.980 --> 52:51.780
出了问题

52:51.780 --> 52:53.080
那这是不是个错误

52:53.080 --> 52:54.980
那么这个堆栈信息就已经出来了

52:54.980 --> 52:55.480
你看没有

52:55.480 --> 52:57.080
就是这个一串的信息

52:57.080 --> 53:00.080
背胎二背胎一你女神

53:00.080 --> 53:01.980
这个堆栈信息就出来了

53:01.980 --> 53:03.480
然后如果他出了问题

53:03.480 --> 53:05.780
这个问题是不是交给了背胎一了

53:05.780 --> 53:07.380
他没有解决这个问题

53:07.380 --> 53:09.380
那么就问题就拋给了他

53:09.380 --> 53:12.580
比方说他解决了这个问题

53:12.580 --> 53:13.880
他一把电脑给你弄好了

53:13.880 --> 53:16.580
你甭管他是怎么弄好的

53:16.580 --> 53:18.080
他又解决了问题

53:18.080 --> 53:18.780
解决了错误

53:18.780 --> 53:21.180
就是用tracket解决的错误

53:21.180 --> 53:22.180
好解决了之后

53:22.180 --> 53:23.480
对于你而言

53:23.480 --> 53:26.180
好像是不是好像他没有发生错误

53:26.180 --> 53:26.780
对吧

53:26.780 --> 53:28.280
他如果他解决这个错误

53:28.280 --> 53:30.680
就好像这个错误就没有发生过一样

53:30.680 --> 53:31.980
那么你又正常运行

53:31.980 --> 53:33.580
你把电脑交给女神

53:33.580 --> 53:34.680
他又正常运行

53:34.680 --> 53:36.280
就是什么回事

53:36.280 --> 53:36.880
这里的错误了

53:36.880 --> 53:38.480
跟现实实验员是一样的

53:38.480 --> 53:39.180
他发生错误

53:39.180 --> 53:40.080
扔出去

53:40.080 --> 53:40.680
他处理不了

53:40.680 --> 53:41.580
扔出去

53:41.580 --> 53:42.480
他来处理

53:42.480 --> 53:43.280
他处理过后了

53:43.280 --> 53:44.880
这个错误就没了

53:44.880 --> 53:46.280
如果他没有处理的话

53:46.280 --> 53:47.680
那么又扔给他来处理

53:47.680 --> 53:49.080
如果他也没有处理的话

53:49.080 --> 53:50.480
那就扔给全局来处理

53:50.480 --> 53:51.180
全局也没有处理

53:51.180 --> 53:53.480
就扔到浏览器里边去

53:53.480 --> 53:54.080
就这么回事

53:54.080 --> 53:56.480
错误是一层一层出来的

53:56.480 --> 53:57.780
这里我们大概了解一下

53:57.780 --> 53:59.980
因为我们后表写单码的话

53:59.980 --> 54:01.680
不太会去写这个单码

54:01.680 --> 54:03.780
不太会写

54:03.780 --> 54:05.180
但是我们要了解

54:05.180 --> 54:06.880
这是拆开启翻轮理

54:06.880 --> 54:07.980
这个我说一下

54:07.980 --> 54:10.180
这个单码结构

54:10.180 --> 54:11.380
翻轮理是可以省略的

54:11.380 --> 54:13.380
开启也可以省略

54:13.380 --> 54:15.180
开启如果省略的话

54:15.180 --> 54:16.580
如果省略的话

54:16.580 --> 54:17.580
就意味着啥呢

54:17.580 --> 54:19.780
就意味着圈里面发生问题

54:19.780 --> 54:21.380
他还是没有在做任何处理

54:21.380 --> 54:22.780
还是要扔出去

54:22.780 --> 54:24.180
比方说我这个开启省略了

54:25.180 --> 54:27.180
看一下

54:27.180 --> 54:28.180
这个错误又扔出去了

54:28.180 --> 54:30.180
他没有错误又扔出去了

54:30.180 --> 54:32.180
他只输出了一个翻轮理

54:32.180 --> 54:34.180
翻轮理是无论如何都要输出的

54:34.180 --> 54:36.180
翻轮理是无论如何都要输出的

54:36.180 --> 54:38.180
所以说他只输出

54:38.180 --> 54:39.180
运行那个翻轮理

54:39.180 --> 54:40.180
错误还是扔出去了

54:40.180 --> 54:43.180
就跟你没有补货是一样的

54:43.180 --> 54:45.180
那如果没有错误了

54:45.180 --> 54:46.180
如果没有错误

54:46.180 --> 54:48.180
他是不会执行开启的

54:48.180 --> 54:50.180
如果没有错误是不会执行开启的

54:50.180 --> 54:52.180
开启他只有发生错误的时候

54:52.180 --> 54:53.180
才会执行

54:53.180 --> 54:54.180
而且这里的对象是什么

54:54.180 --> 54:56.180
就是你抛出了错误这个对象

54:56.180 --> 54:59.180
这个对象就是抛出错误的这个对象

54:59.180 --> 55:01.180
就这么个意思

55:01.180 --> 55:03.180
翻轮理也可以省略

55:03.180 --> 55:04.180
翻轮理省略过后

55:04.180 --> 55:06.180
后边就没有什么后续的事情可以执行的

55:06.180 --> 55:08.180
翻轮理也可以省略

55:08.180 --> 55:09.180
注意

55:09.180 --> 55:11.180
翻轮理是一定要执行的

55:11.180 --> 55:13.180
哪怕你这里写到return

55:13.180 --> 55:14.180
哪怕你写到return

55:14.180 --> 55:15.180
结束整个函数都不行

55:15.180 --> 55:17.180
都必须要执行翻轮理

55:17.180 --> 55:18.180
看一下

55:18.180 --> 55:19.180
翻轮理仍然执行

55:19.180 --> 55:20.180
你看处理完成

55:20.180 --> 55:22.180
仍然要执行

55:23.180 --> 55:25.180
有的时候面试体可能会考虑

55:25.180 --> 55:26.180
可能会考虑

55:26.180 --> 55:28.180
比方这里return一个3

55:28.180 --> 55:29.180
翻轮理呢

55:29.180 --> 55:30.180
翻轮理呢

55:30.180 --> 55:31.180
return一个4

55:31.180 --> 55:33.180
return一个4看一下吧

55:33.180 --> 55:34.180
console log

55:34.180 --> 55:35.180
这个b

55:35.180 --> 55:36.180
输出这个b

55:36.180 --> 55:38.180
它return的结果问你是多少

55:38.180 --> 55:40.180
因为翻轮理是后续行

55:40.180 --> 55:42.180
所以说输出的结果是4

55:42.180 --> 55:43.180
看没有

55:43.180 --> 55:44.180
4

55:44.180 --> 55:45.180
哪怕你这里return了

55:45.180 --> 55:46.180
它还是要执行一次翻轮理

55:46.180 --> 55:47.180
跑不了的

55:47.180 --> 55:49.180
那如果翻轮理面没有return了

55:49.180 --> 55:50.180
没有return了

55:50.180 --> 55:51.180
它就得到的是3

55:51.180 --> 55:53.180
它会用之前的return值

55:53.180 --> 55:55.180
它不会用什么return undefined

55:55.180 --> 55:57.180
好像这里没有return就是undefined

55:57.180 --> 55:58.180
它不会

55:58.180 --> 56:00.180
它会用之前return的值

56:00.180 --> 56:02.180
但是如果你翻轮理重新return了过后

56:02.180 --> 56:03.180
它会得到新的值

56:03.180 --> 56:04.180
这里容易出面试体

56:04.180 --> 56:06.180
但是也不太会考

56:06.180 --> 56:07.180
不太会考

56:07.180 --> 56:09.180
因为可能会考得比较刁砖的话

56:09.180 --> 56:11.180
它可能会考虑这个点

56:11.180 --> 56:13.180
这是关于补货错误

56:13.180 --> 56:14.180
这一课最重要的是

56:14.180 --> 56:16.180
大家要学会如何调试错误

56:16.180 --> 56:18.180
就是有些错误不该发生

56:18.180 --> 56:21.180
我们要知道代码哪里写的有问题

56:21.180 --> 56:22.180
另外一个点

56:22.180 --> 56:24.180
我们要了解至少要心里面要清楚

56:24.180 --> 56:26.180
有的情况下

56:26.180 --> 56:29.180
它发生错误不是我们代码写的有问题

56:29.180 --> 56:31.180
我们代码一点问题都没有

56:31.180 --> 56:33.180
它就是应该发生错误

56:33.180 --> 56:35.180
你给的东西比较网络断的

56:35.180 --> 56:37.180
你说它不发生错误怎么办

56:37.180 --> 56:38.180
它怎么办

56:38.180 --> 56:39.180
它只能抱错

56:39.180 --> 56:40.180
只能抱错

56:40.180 --> 56:41.180
有的时候就该发生错误

56:41.180 --> 56:42.180
就是有的时候

56:42.180 --> 56:43.180
我们希望的是

56:43.180 --> 56:45.180
当它发生错误的时候

56:45.180 --> 56:48.180
我们程序应该做什么样的处理

56:48.180 --> 56:49.180
应该进一步怎么样的处理

56:49.180 --> 56:51.180
这叫补货错误

56:51.180 --> 56:52.180
好吧

56:52.180 --> 56:54.180
好理解一下

56:54.180 --> 56:55.180
ok 错误处理

56:55.180 --> 56:56.180
我们再说一次

56:56.180 --> 56:58.180
后边的东西不太会用得到

56:58.180 --> 56:59.180
但是以后保不齐

56:59.180 --> 57:00.180
你到公司里面

57:00.180 --> 57:01.180
可能会要求你

57:01.180 --> 57:02.180
在写个函数的时候

57:02.180 --> 57:03.180
会要求你

57:03.180 --> 57:04.180
什么情况下

57:04.180 --> 57:05.180
应该抛出错误

57:05.180 --> 57:08.180
那你就用这种方式去抛出

57:08.180 --> 57:09.180
去抛出

57:09.180 --> 57:10.180
你要学会怎么去抛出

57:10.180 --> 57:11.180
有的时候会要求你

57:11.180 --> 57:13.180
你应该去补货错误

57:13.180 --> 57:14.180
怎么去补货

57:14.180 --> 57:17.180
你应该用这种格式去补货错误

57:17.180 --> 57:19.180
你虽然知道这些语法就行了

57:19.180 --> 57:20.180
关于错误这里

57:20.180 --> 57:21.180
其实还有很多的模式

57:21.180 --> 57:23.180
什么结构 框架

57:23.180 --> 57:24.180
可以讲

57:24.180 --> 57:26.180
但是现在你们还比较遥远

57:26.180 --> 57:30.180
你先知道这么一些语法就行了

57:30.180 --> 57:32.180
ok 到目前为止

57:32.180 --> 57:34.180
咱们标准库这一块

57:34.180 --> 57:36.180
就是全部结束了

57:36.180 --> 57:38.180
介石基础部分全部结束

57:38.180 --> 57:39.180
那么现在

57:39.180 --> 57:42.180
大家就应该是一个

57:42.180 --> 57:43.180
什么

57:43.180 --> 57:45.180
应该是一个高中生了吧

57:45.180 --> 57:47.180
作为一个高中生

57:47.180 --> 57:48.180
说话应该没问题了吧

57:48.180 --> 57:50.180
我们会用这个语言来说话的

57:50.180 --> 57:52.180
来表达自己的想法了

57:52.180 --> 57:53.180
来告诉这个浏览器

57:53.180 --> 57:54.180
告诉这个计算机

57:54.180 --> 57:56.180
我们想要干嘛

57:56.180 --> 57:58.180
可以通过这个介石语言告诉他了

57:58.180 --> 57:59.180
ok

57:59.180 --> 58:01.180
那么接下来我们要学习的

58:01.180 --> 58:03.180
章节呢

58:03.180 --> 58:05.180
就是关于浏览器环境里边的

58:05.180 --> 58:06.180
就是专业领域了

58:06.180 --> 58:07.180
相当于你马上进入大学了

58:07.180 --> 58:09.180
在大学专业领域里边

58:09.180 --> 58:11.180
做播音主持

58:11.180 --> 58:13.180
说导演应该怎么去说话

58:13.180 --> 58:14.180
有哪些专业的术语

58:14.180 --> 58:16.180
我们要进入浏览器这个环境里边

58:16.180 --> 58:18.180
看浏览器这个环境里边

58:18.180 --> 58:20.180
给你提供了哪些东西可以让你用

58:20.180 --> 58:22.180
其实后边的东西很简单了

58:22.180 --> 58:23.180
后边东西学习的啥呢

58:23.180 --> 58:25.180
就类似于学习的标准库

58:25.180 --> 58:27.180
标准库呢是这个语言通用的

58:27.180 --> 58:29.180
无论什么环境都可以通用的

58:29.180 --> 58:31.180
那么我们后边学习的东西呢

58:31.180 --> 58:32.180
就是

58:32.180 --> 58:34.180
只在这个浏览器环境里边可以用

58:34.180 --> 58:36.180
其他环境不一定能用

58:36.180 --> 58:37.180
不一定能用

58:37.180 --> 58:39.180
就浏览器这个环境里边

58:39.180 --> 58:40.180
提供了哪些东西

58:40.180 --> 58:41.180
提供了哪些函数

58:41.180 --> 58:42.180
提供了哪些对象

58:42.180 --> 58:44.180
可以让你去操作这个网页

58:44.180 --> 58:45.180
学习就这个东西了

58:45.180 --> 58:46.180
就简单很多了

58:46.180 --> 58:47.180
至少了知识部分呢

58:47.180 --> 58:48.180
没有什么新东西了

58:48.180 --> 58:49.180
好吧

58:49.180 --> 58:51.180
OK 这是关于标准库这一块

58:51.180 --> 58:53.180
这一张标准库的作业

58:53.180 --> 58:55.180
一定要去好好地消化一下

58:55.180 --> 58:57.180
张建的知识和作业

58:57.180 --> 58:58.180
特别是作业

58:58.180 --> 59:00.180
如果有不理解的地方

59:00.180 --> 59:01.180
一定要多看视频

59:01.180 --> 59:02.180
反复地看

59:02.180 --> 59:03.180
然后自己把它完成一遍

59:03.180 --> 59:04.180
然后不要着急

59:04.180 --> 59:06.180
一定要把这些前面的知识

59:06.180 --> 59:07.180
基础打牢之后

59:07.180 --> 59:08.180
再往后边学习

59:08.180 --> 59:09.180
好吧

