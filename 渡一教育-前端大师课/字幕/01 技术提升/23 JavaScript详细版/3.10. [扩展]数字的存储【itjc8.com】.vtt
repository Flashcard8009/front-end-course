WEBVTT

00:00.000 --> 00:17.790
先说一下 这节课的东西是扩展课程

00:17.790 --> 00:24.670
而且这一节课的东西很难 难到什么程度呢

00:24.670 --> 00:31.350
相当于它的难度 应该说是我们这一门课里面最难得一节课了

00:31.350 --> 00:36.590
你别看这一节课解释的问题很简单 解释的就是一个数字

00:36.630 --> 00:41.790
在计算机里面是怎么去存储 以及解释里面数字的一些问题

00:42.590 --> 00:45.910
但是呢 这节课的难度是非常非常高的啊

00:46.990 --> 00:52.790
所以说我先给大家先吓唬大家一下 如果你还有兴趣看一下去的话 那么你就看

00:53.950 --> 00:59.830
我是从来没有在线下上课也好 线上上课也好 我是从来没有讲过这一块的知识

01:00.430 --> 01:05.550
包括讲以前讲加霸 讲c下 讲后端语言的时候呢

01:06.070 --> 01:10.470
我也是简单的提了一下这一块的知识 从来没有气质的去讲过

01:11.030 --> 01:13.070
因为这一块的知识呢 以后呢

01:13.830 --> 01:18.390
基本上啊 特别是对于我们前端开发者来说 基本上是不会用到的

01:19.390 --> 01:23.470
但是呢 他也会深 他也会深深的去影响我们的程序

01:24.110 --> 01:27.350
如果你知道这一块的知识 你看待这个程序呢

01:27.990 --> 01:34.950
你心里边就更加有数了啊 更加有底了 当你看到一些数字的运算的问题的时候呢 你就知道是什么回事了

01:35.670 --> 01:40.390
所以说如果你就很强的好奇心 如果你对这个技术呢很感兴趣

01:41.270 --> 01:43.190
ok 你可以看一下这块的知识

01:44.390 --> 01:46.230
这块的知识呢 你光看我的课程

01:46.950 --> 01:55.350
还不够 因为我的课程里边呢 我没有办法在这么短的时间内让你完全认识到这一块知识的所有东西

01:56.070 --> 02:00.470
你看了之后呢 你会对整个知识呢 有一个盖帽的了解

02:01.350 --> 02:06.790
而且呢 你会觉得很晕 没关系啊 如果你特别感兴趣的话 你好想下来好好去想一想

02:07.190 --> 02:12.710
多去做一些实验 肯定呢 我在这里讲的时候呢 会把他方方面面的东西都讲到

02:13.190 --> 02:18.550
但是呢 犹豫这一块知识很深 所以说呢 你会感觉有点晕 那么你下去要去多做一下实验

02:19.030 --> 02:23.990
好吧 首先我再重称一次啊 这是一个扩展课程 我们之前说了

02:24.390 --> 02:28.870
扩展课程呢 你不看完全不会影响你后边的学习

02:29.350 --> 02:33.270
也不会影响你后边做练习做项目都不会影响

02:33.910 --> 02:38.310
所以说大家不要有任何的心理压力 如果你觉得这一块课程

02:38.870 --> 02:43.990
嗯 学习起来非常劳惑 非常的困难 ok 我请你马上停止啊 不要

02:44.630 --> 02:48.790
过早的打击自己的学习热情啊 这一块东西肯定是很难的

02:49.750 --> 02:56.550
如果你对这些数字运算东的东西呢 有点兴趣啊 而且呢 比较想特别想了解这一块

02:56.870 --> 03:03.990
怎么数字运算 我们之前说过不精确对吧 特别想了解这一块 他到底是怎么回事的话 那么你可以看一看

03:04.470 --> 03:10.390
好吧 我先给大家大家去打一个预防针 当我说他很难的时候 他就是真的很难了啊

03:11.510 --> 03:13.350
好 首先呢 我先回答一下

03:14.070 --> 03:17.030
介石里边关于数字的一些问题啊

03:18.150 --> 03:22.150
这些问题呢 我先不解释什么原因造成的 我先直接回答就完事了

03:22.790 --> 03:27.350
好 第一个问题啊 是介石中的小数运算是精确的吗

03:28.150 --> 03:34.230
啊 我们之前说过了对吧 说过了小数运算这一块东西呢 是不一定的 他不一定是精确的

03:34.550 --> 03:38.870
他有可能是精确的 有可能不是精确的啊 看情况啊 看情况

03:39.830 --> 03:42.870
比方说吧 咱们就举个例子啊 这里见个页面

03:46.660 --> 03:51.300
我先回答这些问题啊 回答之后呢 我再去讲这些问题的发生的原因

03:52.100 --> 03:54.020
好 这里呢 有一个小n

03:54.980 --> 03:59.300
也别n了 我们就直接输出吧 也别输出了 我们直接在页面里面看吧

04:00.260 --> 04:01.460
直接在页面里面来看

04:04.310 --> 04:04.790
打开啊

04:05.750 --> 04:15.670
好 这里刷新啊 刷新啊 这里呢 我们直接看一下0.1加上0.2

04:16.790 --> 04:20.710
你看到这样的结果 对吧 不精确的 对吧 不精确的

04:20.950 --> 04:27.430
所以说如果以有一天去用0.1加0.2去跟这个0.3来比较 你会发现他是force

04:28.070 --> 04:31.670
他两个实际上是不相等的 这就是很神奇的现象啊

04:31.990 --> 04:36.710
所以说这些课的东西呢 虽然说啊 虽然说这一课这一课的东西呢 你没有必要了解

04:36.870 --> 04:40.310
但是你得知道什么 你得知道在GSE里面小数的运算

04:40.630 --> 04:43.590
他有的时候是不精确的啊 有的时候是不精确的

04:43.910 --> 04:48.550
但是呢 我们来看一下另外一个啊 0.5加上0.5

04:49.510 --> 04:52.550
是不是等于1呢 嘿嘿 他这个运算又精确了 你看到没

04:53.030 --> 04:56.470
他有的时候精确 他有的时候呢 他又不精确

04:57.110 --> 05:00.230
这个东西就很难说 比方说什么0.25

05:00.950 --> 05:03.910
加上0.5 你看 这个又是精确的

05:04.470 --> 05:07.270
所以说他不一定的啊 不一定的 所以说我们说不一定

05:08.710 --> 05:13.750
好 第二个 GSE中整数的运算是精确的吗

05:14.470 --> 05:18.470
他也不一定啊 整数的运算也不一定是精确的

05:19.270 --> 05:20.950
好 比方说啊 咱们举个例子啊

05:21.990 --> 05:26.070
GSE里边他的整数呢 我们随便写个啊 随便写个很长的整数啊

05:26.470 --> 05:29.430
很长的整数 好 加1 你看一下

05:29.910 --> 05:33.270
这个结构是精确的吗 他不是精确的 你看到没

05:33.910 --> 05:39.030
不是精确的 这是啥玩意啊 这是差了蛮多的 对吧 差了蛮多的 他也不一定是精确的

05:40.230 --> 05:44.550
这种现象呢 通常情况下不会造成太大的影响

05:45.190 --> 05:50.550
因为我们一般做的程序啊 对精度呢 要求的没有那么高

05:51.270 --> 05:57.830
比方说我们一个整数 一般就是一个两位数 一位数 三位数 对吧 最多一个五位数 六位数

05:58.070 --> 06:03.270
那么这些运算没有任何问题 比方说小数的话 我们一般就是两个小数点 三个小

06:03.910 --> 06:08.630
而不是两个小数点啊 小数点后面有两位 三位 四位 五位 对吧 就差不多了

06:09.510 --> 06:15.830
所以说一般呢 不会出现太大的问题 但是呢会影响到什么呢 会影响到我们去比较的时候

06:16.310 --> 06:21.590
就是我们写了一个数字之后啊 我们运算完了过后 去比较 跟另外一个数字去比较

06:21.910 --> 06:29.350
这个时候呢 容易出问题 比方说刚才这个啊 什么0.1 加上0.2 对吧 是不等于0.3 这个地方就容易出问题

06:29.830 --> 06:34.870
他明明是 按理说他的结果应该是正确的 啊 应该判定的结果呢 应该违真

06:35.190 --> 06:38.870
但是呢 他这里由于小数运算不精确 导致了判断结果为假

06:39.430 --> 06:42.950
那么这个问题以后怎么处理呢 以后呢 我们自然有处理办法

06:43.270 --> 06:48.870
比方说以后 以后呢 我们算了过后呢 要进行四手五入啊 精确到小数点后边几位

06:49.110 --> 06:54.630
啊 我们可以处理的这个问题都是 是可以处理的 所以说呢 我们这里呢 要得出一个结论啊

06:55.670 --> 06:58.470
就是 嗯应该这样说啊

06:59.510 --> 07:06.390
在 在对精度要求很高 很高的系统中

07:07.110 --> 07:12.310
或对 嗯 会 或要对 呃

07:13.430 --> 07:17.990
呃 什么小数的运算结果

07:18.710 --> 07:20.310
进行比较实

07:21.990 --> 07:25.670
需要特别谨慎啊 需要特别谨慎

07:25.990 --> 07:29.670
就有的时候呢 你们以后开发一些对精度要求很高的系统

07:30.470 --> 07:33.190
啊 比方说一些天文系统 当然 当然这些东西啊

07:33.670 --> 07:37.670
这些东西呢 你们往往是不快去 不太会去进这样的公司啊

07:38.070 --> 07:42.310
对精度要求非常非常高 比方说小数点后边有15位 16位 17位

07:42.630 --> 07:47.990
对吧 呃 或者呢 你做一些简单的数学运算的时候啊 不是对精度要求很高

07:47.990 --> 07:51.750
而是做一些简单运算 做完了之后呢 要把这个运算结过来来进行

07:52.070 --> 07:57.670
相等比较的时候 要特别谨慎 你得心里边的有一个有一个有个有个数啊

07:58.230 --> 07:58.470
呃

07:59.430 --> 08:05.110
你要知道 在结实里边 小数的运算呢 它不是啊 不一定是精确的啊 包括整数运算

08:05.190 --> 08:09.430
当然整数运算的话 一般是很大的整数进行运算的时候 它会有不精确

08:09.830 --> 08:10.950
小的整数都没有问题

08:11.990 --> 08:13.030
好 第三个

08:14.470 --> 08:17.270
结实中表示的整数是连续的吗

08:18.790 --> 08:19.190
啊 不是

08:20.230 --> 08:27.030
表示的整数是不一定是连续的 什么叫连续呢 就是一过了是二 二过了是三 三过了是四 对吧 这叫连续

08:27.830 --> 08:33.190
当数字很大的时候呢 它的整数就不再是连续的了 就不再是连续的了

08:33.510 --> 08:40.630
可能 去个例子吧 比方说三百亿 三百亿过了应该是三百亿零一 对吧 它可能就变成了三百亿零二

08:40.870 --> 08:42.870
它下一个数字 它没有 它少了一个数字

08:43.510 --> 08:46.790
啊 后边 它后边当结实的数字很大的时候啊

08:47.510 --> 08:51.030
当结实的数字很大的时候

08:52.070 --> 08:53.990
不再连续 不再连续

08:54.710 --> 08:57.190
它可能会跳跃 那到底是怎么回事呢

08:57.990 --> 09:02.950
我先暂时不着急啊 不着急 我后边慢慢讲啊 我们这里先把这个结论说出来

09:03.750 --> 09:04.390
好 第四个

09:05.030 --> 09:10.470
结实中能够表示的最大数字是多少啊 能够表示的最大数字是多少

09:11.670 --> 09:16.790
有两个是最大数字 一个是最大整数啊 最大连续整数

09:17.750 --> 09:22.710
如果一个是最大连续整数是什么呢 就从一开始一直能够一二三四五六七八九

09:22.710 --> 09:26.230
一直数 数到那个数字啊 都一直是连续的

09:26.630 --> 09:32.710
可以连续的数到这个数字 就是你最大的连续整数 并且这个数字下一个也是连续的

09:33.190 --> 09:36.310
叫做最大连续整数啊 我先解释清楚是怎么意思啊

09:36.550 --> 09:39.350
就是从一开始一直开始数 数到这个数字

09:39.750 --> 09:42.870
一直都是连续的 并且这个数字下一个也是连续的

09:43.270 --> 09:47.350
这个最大整数字多少呢 我记不住啊 我记不住 但是呢可以通过查看

09:47.670 --> 09:49.990
可以通过怎么来查看了 通过这种方式

09:50.630 --> 09:52.790
number是一个对象啊 number

09:53.110 --> 09:56.230
它是window里边一个对象 我们之前说过啊window是个权力对象 对吧

09:56.470 --> 10:01.590
它里边有很多的属性 number是其中一个属性啊 我们以后呢还会说到这个对象啊

10:02.310 --> 10:04.390
number这个对象里边呢 它有一个

10:04.790 --> 10:06.710
它也有一个属性 它本身又是个对象

10:07.110 --> 10:10.550
它里边有一个属性呢 叫做max save integer

10:11.350 --> 10:15.590
max 表示最大的意思 safe 表示安全的意思 就是连续的意思

10:16.390 --> 10:17.910
integer 表示整数的意思

10:18.790 --> 10:20.950
它的最大的连续整数是这个数

10:21.990 --> 10:24.710
大家可以看一下这个多少位啊

10:24.710 --> 10:27.750
有多少有多少位 123456789

10:28.070 --> 10:30.550
111213141516

10:30.790 --> 10:31.590
一共有16位

10:32.150 --> 10:32.630
16位

10:33.350 --> 10:35.430
好 这是它的最大连续整数

10:35.830 --> 10:38.550
最大连续整数 也就是说这个数字呢 它下一个

10:39.110 --> 10:42.950
它下一个数字也是连续的 比方说它加上1 你看

10:43.510 --> 10:44.870
连续的 对吧 连续的

10:45.510 --> 10:47.670
1过了12吧 对吧 它下一个也是连续的

10:47.670 --> 10:50.150
但它下一个数字就不再是一个连续的整数了

10:50.150 --> 10:53.830
因为它下一个数字就已经出问题了

10:54.310 --> 10:56.870
下一个数字如果再加1的话 叫出问题 你看

10:57.270 --> 10:59.030
加1过后没有反应 你看没

10:59.830 --> 11:03.830
所以说 我们这里说的连续 最大的连续整数啊 说的是

11:03.830 --> 11:06.230
从1开始数到它全是连续的

11:06.390 --> 11:08.790
并起来它的下一个也是连续的

11:08.790 --> 11:10.630
这才叫最大的连续整数

11:11.430 --> 11:14.070
它就不行了 从1数到它没问题

11:14.070 --> 11:17.670
但是它的下一个就已经不存在了 已经不再连续了

11:17.670 --> 11:20.470
所以说 最大的连续整数是它

11:21.110 --> 11:25.430
好吧 我后边会讲 为什么最大的连续整数是它

11:26.550 --> 11:29.670
好 第五个 第五个疑问 在介石里边

11:29.670 --> 11:33.030
能够表示的数字的有效位数是多少

11:33.750 --> 11:36.470
什么叫有效位数呢 就比方说

11:36.470 --> 11:38.470
比方说 像这个数字吧

11:39.030 --> 11:41.190
像这个数字 我后边给它写上

11:41.990 --> 11:44.390
123 123 4 5 你看

11:45.030 --> 11:47.910
是无效了 对吧 无效了 无效了

11:47.910 --> 11:50.950
后边的写的位数就无效了 就是我的精度已经太高了

11:50.950 --> 11:53.750
精度太高了 就这前边的就是有效位数

11:54.470 --> 11:55.910
前边的就是有效位数

11:56.550 --> 12:01.350
那么在介石里边有效位数是多少呢 是16到17

12:02.310 --> 12:05.030
16到17位 它不一定是个固定的字

12:05.670 --> 12:08.870
为什么它不发固定呢 为什么它无法固定呢

12:08.870 --> 12:11.510
因为16里边它有的时候可以表示17

12:11.510 --> 12:14.390
比方说某些小数的时候

12:14.390 --> 12:17.190
小数点后面有很多很多位 它可能会表示到17位

12:17.670 --> 12:20.710
就是加上小数点前面的那个数字

12:21.030 --> 12:23.830
然后加上小数点后边的这个数字可以表示到17位

12:24.150 --> 12:27.430
而表示整数的时候 表示整数的时候只有16位

12:27.990 --> 12:29.830
只有16位 明白这个意思吗

12:30.870 --> 12:33.590
你可以这样理解 所以它是16到17位

12:34.550 --> 12:37.910
好了 这是关于介石数字里边的一些问题

12:38.470 --> 12:41.750
我现在没有解释这些问题的发生的原因

12:41.750 --> 12:43.830
但是我先把这些问题的答案告诉你

12:44.550 --> 12:46.710
那么你知道这些答案了就已经ok了

12:46.710 --> 12:49.750
已经ok了 如果你到这还有兴趣看下去的话

12:50.310 --> 12:52.790
因为这几课了 我相信了很多同学

12:53.670 --> 12:55.910
有些同学看到一开头可能就关了 很正常

12:56.230 --> 12:59.750
很正常 有些同学可能能够看一半

12:59.750 --> 13:03.510
看三分之一关掉 能够看完的一定是聊聊无几

13:03.510 --> 13:06.070
所以说我一直在线下也好 线上也好

13:06.070 --> 13:07.910
几乎是不太愿意去讲这个课的

13:07.910 --> 13:09.670
讲这个课是费力不套好

13:09.670 --> 13:11.910
但是因为我这个录的是视频教程

13:11.910 --> 13:14.470
所以说我觉得无所谓 有兴趣的同学呢

13:14.470 --> 13:16.870
哪怕我这个课程能够帮到一两个同学

13:16.870 --> 13:18.310
我觉得都是很不错的

13:19.030 --> 13:21.350
所以说我把这个课程还是好好详细讲一下

13:21.350 --> 13:23.030
这个课程的时间肯定是比较长的

13:23.990 --> 13:26.470
这是关于结实里面数字的一些问题

13:26.470 --> 13:27.590
我先把解释清楚

13:29.190 --> 13:30.470
那么我们解释这个问题过后

13:30.470 --> 13:33.510
大家记住在最精度要求很高的系统里边

13:33.510 --> 13:36.710
或者是对小数的运算结果要进行比较的时候

13:36.710 --> 13:37.510
你要特别谨慎

13:38.150 --> 13:38.950
特别特别谨慎

13:40.710 --> 13:43.750
接下来我就开始来解释这些问题发生的原因了

13:44.550 --> 13:46.390
解释这些问题的原因

13:47.030 --> 13:48.550
并不是一件容易的事

13:49.110 --> 13:50.150
不是一件容易的事

13:50.470 --> 13:52.950
我们首先要了解一些基础知识

13:54.630 --> 13:55.510
就是二斤值

13:56.230 --> 13:57.750
首先我们来了解这个东西

13:58.630 --> 14:01.750
我们知道计算金它是一个电器

14:02.710 --> 14:06.550
它里边是不能存放什么文字

14:07.190 --> 14:11.270
什么声音什么视频这些东西完全没法存放

14:11.830 --> 14:14.790
它必须要把它转换成数字来存放

14:14.790 --> 14:16.790
所以说我们之前说有什么制服编码

14:17.270 --> 14:18.390
就是要把它对应到数字

14:19.190 --> 14:22.150
而数字我们先识世界里边

14:22.150 --> 14:23.510
先识世界中

14:24.550 --> 14:26.550
使用的数字是实净值

14:27.110 --> 14:28.470
就是缝实净1

14:29.590 --> 14:32.870
在实净值里边它能够表示10个数字

14:33.430 --> 14:33.830
想一想吧

14:34.470 --> 14:35.830
来 班子投降数一数

14:37.030 --> 14:37.350
0

14:37.910 --> 14:38.150
1

14:38.150 --> 14:38.390
2

14:38.390 --> 14:38.710
3

14:38.710 --> 14:39.030
4

14:39.030 --> 14:39.190
5

14:39.190 --> 14:39.430
6

14:39.430 --> 14:39.670
7

14:39.670 --> 14:39.830
8

14:39.830 --> 14:39.990
9

14:41.030 --> 14:41.350
对吧

14:41.350 --> 14:42.150
实不算

14:42.150 --> 14:43.750
实是两个数字的

14:43.750 --> 14:45.750
实是1和0来表示的

14:45.750 --> 14:46.790
两个数字的

14:46.950 --> 14:47.750
包括0

14:47.750 --> 14:48.390
0到9

14:48.390 --> 14:49.510
是不是一共10个数字

14:50.390 --> 14:51.270
实净值呢

14:51.270 --> 14:52.390
它有这么一个特点

14:52.390 --> 14:53.110
10个数字

14:54.150 --> 14:55.110
缝实净1

14:56.150 --> 14:56.630
缝实

14:58.630 --> 14:58.950
缝

15:00.310 --> 15:00.630
实

15:02.790 --> 15:03.270
也

15:04.710 --> 15:05.110
净1

15:06.310 --> 15:07.430
缝实净1

15:07.430 --> 15:08.870
这是现实世界

15:08.870 --> 15:10.470
但是在计算机里边

15:10.470 --> 15:12.070
它没有办法表示实净值

15:12.710 --> 15:13.590
它能表示数字

15:13.590 --> 15:15.510
但是它不能表示实净值的数字

15:15.990 --> 15:17.510
在计算机世界中

15:18.710 --> 15:19.270
世界中

15:19.910 --> 15:22.310
它能表示的数字只有两个

15:22.310 --> 15:22.870
为什么呢

15:22.870 --> 15:24.230
因为计算机是一个电器

15:24.710 --> 15:26.630
它只能识别电平的高低

15:27.590 --> 15:28.550
电压高的时候

15:28.550 --> 15:29.830
比方说2到5伏

15:29.830 --> 15:30.630
它认为是1

15:31.270 --> 15:31.990
0到2伏

15:31.990 --> 15:32.710
认为是0

15:32.710 --> 15:34.790
它只能识别电压的高低

15:35.430 --> 15:37.030
于是在计算机里边

15:37.030 --> 15:39.190
它只能表示两个数字

15:39.190 --> 15:40.950
因此在计算机世界里边

15:40.950 --> 15:42.070
它是2净值的

15:42.630 --> 15:43.750
是2净值的

15:43.750 --> 15:44.950
它只有两个数字

15:45.590 --> 15:46.710
就是零和1

15:46.710 --> 15:48.230
只有零和1

15:48.230 --> 15:49.830
那么它是缝2净1

15:51.110 --> 15:51.910
缝2净1

15:53.830 --> 15:55.430
我们首先搞清楚

15:55.430 --> 15:58.150
计算机世界里边是2净值的

15:58.150 --> 15:59.990
因此我们这节课里边

15:59.990 --> 16:01.510
什么这些问题的根源

16:01.510 --> 16:03.350
都是因为实净值和2净值之间

16:03.350 --> 16:04.390
转换转换过去

16:05.110 --> 16:05.990
造成了一些问题

16:06.870 --> 16:08.870
所以说我们首先要了解是什么呢

16:08.870 --> 16:13.910
了解是实净值和二净值之间的转换

16:16.230 --> 16:17.110
整数转换

16:17.830 --> 16:18.630
整数转换

16:19.670 --> 16:21.750
在实净值和二净值之间

16:21.750 --> 16:23.830
如何来进行整数转换了

16:23.830 --> 16:26.230
那么实净值转二净值

16:26.230 --> 16:27.670
我们先说二净值转实净值吧

16:28.470 --> 16:30.390
二净值转

16:31.830 --> 16:32.710
转实净值

16:34.390 --> 16:36.230
二净值转实净值很简单

16:36.790 --> 16:37.270
很简单

16:37.270 --> 16:37.910
怎么写呢

16:38.630 --> 16:41.670
比方说一个11001

16:42.230 --> 16:43.910
比方说这个数字

16:43.990 --> 16:45.670
转成实净值是什么呢

16:46.230 --> 16:48.390
转成实净值可以这样子来算

16:48.950 --> 16:50.070
这里我写个数学公式

16:50.470 --> 16:52.710
在mockdown里边写两个多乐符号

16:52.710 --> 16:54.470
可以表示里边有数学公式

16:54.470 --> 16:56.150
当然你需要安装一个插件

16:56.150 --> 16:57.910
这个插件我给大家介绍过的

16:57.910 --> 17:00.390
就是个mockdown preview enhanced

17:01.350 --> 17:02.150
按照这个插件

17:02.150 --> 17:03.350
这个插件我写了过后

17:03.350 --> 17:04.630
就可以表示数学公式了

17:05.670 --> 17:06.870
我们把这个右边打开

17:08.550 --> 17:09.990
这边我们就可以写数学公式

17:10.470 --> 17:10.950
你看着

17:10.950 --> 17:12.550
那么这里是怎么算的呢

17:12.950 --> 17:14.710
你看数一下有多少位

17:14.710 --> 17:16.470
零1

17:16.470 --> 17:18.070
我们再少写点吧

17:18.870 --> 17:19.750
11001

17:19.750 --> 17:21.190
一共有4位对吧

17:21.190 --> 17:22.150
一共有4位

17:22.150 --> 17:23.750
那么相当于是等于什么

17:23.750 --> 17:26.550
1乘1乘1啥呢

17:26.550 --> 17:31.750
乘12的2的3次方

17:31.750 --> 17:32.790
2的3次方

17:32.790 --> 17:33.910
看右边看右边

17:34.470 --> 17:46.870
然后加上1乘12的1乘2的2次方

17:46.870 --> 17:51.910
然后再加上0乘12的1次方

17:51.910 --> 17:56.710
再加上1乘2的0次方

17:58.710 --> 17:59.990
看一下右边

18:01.190 --> 18:02.470
这就是计算机里边

18:02.550 --> 18:04.710
2禁止转10禁止如何来算

18:04.710 --> 18:05.750
11001

18:05.750 --> 18:07.750
这一位乘12的3次方

18:07.750 --> 18:09.430
这一位乘12的2次方

18:09.430 --> 18:10.790
乘12的1次方

18:10.790 --> 18:11.750
乘22的0次方

18:11.750 --> 18:12.150
看没

18:12.950 --> 18:13.510
没问题吧

18:14.390 --> 18:16.550
这就是2禁止转10禁止

18:17.190 --> 18:17.670
看没

18:17.670 --> 18:18.630
它是这样转换的

18:19.590 --> 18:20.070
好

18:20.070 --> 18:21.110
那么这里

18:21.110 --> 18:22.070
为什么会这样子呢

18:22.070 --> 18:23.030
你看10禁制

18:23.030 --> 18:24.790
你去对比一下10禁制

18:24.790 --> 18:26.230
10禁制里边

18:26.230 --> 18:27.590
10禁制里边比方说

18:28.230 --> 18:29.110
10禁制里边

18:29.830 --> 18:31.030
11001

18:31.030 --> 18:32.070
假设它是10禁制

18:32.070 --> 18:33.270
它不是2禁制

18:33.270 --> 18:34.230
那么怎么算的

18:34.230 --> 18:36.230
是不是1乘110的多少次方

18:37.590 --> 18:39.670
乘110的3次方

18:39.670 --> 18:41.110
乘110的3次方

18:41.110 --> 18:45.190
加上1乘110的2次方

18:45.190 --> 18:48.870
再加上0乘110的1次方

18:48.870 --> 18:49.350
对吧

18:49.350 --> 18:54.710
再加上1乘110的多少次方

18:54.710 --> 18:55.830
0次方

18:56.870 --> 18:57.590
0次方

18:57.590 --> 18:58.390
你看一下

18:58.470 --> 18:59.270
是不是这样的规律

18:59.270 --> 18:59.830
对吧

18:59.830 --> 19:02.150
那么把它换成2禁制过后

19:02.150 --> 19:03.030
逢2禁1了

19:03.030 --> 19:04.470
不是逢10禁1了

19:04.470 --> 19:05.750
它就变成这样的算法了

19:06.630 --> 19:08.150
那么这个算出来等于多少呢

19:08.150 --> 19:08.870
这个算出来

19:09.910 --> 19:11.910
这一块它算出来等于的结果

19:12.470 --> 19:13.270
它的结果是

19:15.110 --> 19:15.430
13

19:16.150 --> 19:16.790
13

19:16.790 --> 19:17.670
你自己去算一下

19:18.550 --> 19:19.510
它的结果是13

19:20.230 --> 19:21.030
这里是多少

19:21.030 --> 19:21.670
8

19:21.670 --> 19:22.150
对吧

19:22.150 --> 19:23.430
8加上4

19:23.430 --> 19:24.310
加上多少

19:24.310 --> 19:24.950
加上0

19:24.950 --> 19:25.910
8加4等于12

19:25.910 --> 19:27.190
加上最后一个1

19:27.190 --> 19:27.510
13

19:28.230 --> 19:29.750
这是2禁制转10禁制

19:29.750 --> 19:32.950
我这里就一起把那个小数转换也说了吧

19:32.950 --> 19:34.310
把小数转换也说了

19:35.350 --> 19:36.630
在2禁制世界里边

19:36.630 --> 19:37.910
它可能会有小数

19:37.910 --> 19:39.270
可能会有小数

19:39.270 --> 19:42.070
比方说小数它怎么算的呢

19:42.070 --> 19:44.070
比方说11.01

19:44.710 --> 19:46.070
这是2禁制的小数

19:47.110 --> 19:48.870
2禁制的小数它是这么算的

19:50.790 --> 19:51.270
看着

19:51.270 --> 19:53.510
2禁制的小数实际上一样的道理

19:53.510 --> 19:54.310
1乘1

19:54.950 --> 19:55.350
2的

19:55.350 --> 19:56.470
我先这边写吧

19:57.190 --> 19:58.390
这边写应该能看懂吧

19:58.390 --> 19:59.030
应该能看懂

19:59.670 --> 20:04.710
乘12的1次方加上1乘12的多少次方

20:05.510 --> 20:08.230
乘12的0次方

20:08.230 --> 20:12.950
再加上0乘12的多少次方

20:13.590 --> 20:14.070
多少次方

20:14.630 --> 20:15.750
就是负1次方

20:16.150 --> 20:17.110
负1次方

20:17.110 --> 20:18.870
乘12的负1次方

20:18.870 --> 20:24.630
再加上1乘12的多少次方

20:24.710 --> 20:26.550
就是负2次方

20:27.350 --> 20:29.110
跟实际制是一样的

20:29.110 --> 20:31.430
实际制小数点后面的东西

20:31.430 --> 20:33.190
就是它的指数

20:33.190 --> 20:34.630
指数这一块就是负数

20:34.630 --> 20:35.110
对吧

20:35.110 --> 20:36.550
指数这一块就是负数

20:36.550 --> 20:38.310
那么在2禁制里边也是一样的

20:38.310 --> 20:39.750
看一下这个例子

20:40.790 --> 20:41.590
看一下这一块

20:42.230 --> 20:43.350
那么这个算出来

20:43.350 --> 20:45.670
这个数字对应实际制的数字多少了

20:45.670 --> 20:46.390
你自己算一下

20:46.950 --> 20:47.750
算一下是多少

20:48.230 --> 20:48.790
多少

20:48.790 --> 20:50.710
那么前面总数部分是3

20:50.710 --> 20:51.270
对吧

20:51.270 --> 20:52.870
你直接来吧

20:52.870 --> 20:53.590
直接来

20:55.350 --> 20:56.150
下面

20:56.710 --> 20:59.030
那么这个算出来就是1乘12

20:59.030 --> 21:01.430
你就2加上多少呢

21:01.990 --> 21:06.470
加上1再加上0.5对吧

21:06.470 --> 21:09.350
0.5再加上0.25

21:09.750 --> 21:10.070
看呗

21:11.350 --> 21:12.710
1的负2次方嘛

21:12.710 --> 21:14.470
负2次方就是1分之1

21:14.470 --> 21:16.470
1分之1就是0.25

21:16.470 --> 21:17.350
这里边是0

21:17.350 --> 21:18.070
这边是0

21:18.710 --> 21:20.150
这里有一是0对吧

21:20.150 --> 21:21.510
0乘12的负1次方

21:21.910 --> 21:23.270
那么这个算出来的是多少呢

21:23.670 --> 21:24.230
这个算出来

21:24.710 --> 21:27.190
这个算出来是不是3.25对吧

21:27.190 --> 21:28.070
3.25

21:28.070 --> 21:29.270
因此的这个数字呢

21:29.270 --> 21:30.710
在实际制的世界里边

21:30.710 --> 21:31.670
等于3.25

21:32.550 --> 21:33.030
看呗

21:33.510 --> 21:37.270
这是2禁制转实际制该怎么去转

21:37.590 --> 21:39.190
就这么用这种方式去转

21:40.390 --> 21:40.790
好了

21:42.150 --> 21:43.270
好另外一个呢

21:43.270 --> 21:47.270
是实际制转二禁制

21:48.870 --> 21:50.470
实际制转二禁制

21:51.030 --> 21:52.870
好比方说13

21:53.590 --> 21:55.270
13转成二禁制

21:55.270 --> 21:56.310
该怎么转呢

21:56.870 --> 21:58.230
要用这种方式来转

21:58.230 --> 21:59.590
要用这种方式来转

21:59.910 --> 22:01.670
好怎么用什么方式来转呢

22:01.670 --> 22:02.710
要用这种这样的啊

22:02.710 --> 22:03.270
这样来

22:03.270 --> 22:04.950
我这里要写快段一码才行啊

22:05.750 --> 22:07.110
13转二禁制

22:07.110 --> 22:08.150
要这样来转

22:08.390 --> 22:11.670
首先13来除12

22:12.550 --> 22:13.910
除12得到一个商

22:14.950 --> 22:15.750
商是多少

22:16.070 --> 22:17.430
商是7对吧

22:17.670 --> 22:18.630
余数是多少

22:19.430 --> 22:20.390
啊余数是多少

22:21.270 --> 22:22.630
啊13转二禁制

22:22.870 --> 22:24.470
商是7余数是多少呢

22:24.870 --> 22:25.910
余数是不是

22:27.110 --> 22:27.510
多少

22:27.510 --> 22:28.070
1对吧

22:28.870 --> 22:30.950
1余数为1没问题吧

22:31.350 --> 22:32.150
啊余数为1

22:32.470 --> 22:32.870
好

22:33.030 --> 22:34.550
然后把他的商拿出来

22:34.550 --> 22:35.910
把他的商拿出来

22:35.910 --> 22:37.590
7再来除12

22:38.790 --> 22:39.270
除12

22:39.750 --> 22:40.550
以后商多少

22:41.030 --> 22:41.590
是不是商

22:42.150 --> 22:42.870
为多少了

22:42.870 --> 22:44.150
3余数呢

22:45.910 --> 22:47.670
余1啊没问题吧

22:48.790 --> 22:49.190
嗯

22:50.550 --> 22:51.030
对不对啊

22:51.750 --> 22:53.190
我这里我写的写错了

22:53.190 --> 22:53.830
这里写错了

22:53.830 --> 22:54.390
哦6

22:54.390 --> 22:54.870
6余

22:54.870 --> 22:56.950
我说我说怎么有点不太对呢

22:56.950 --> 22:58.230
6啊6余1

22:58.230 --> 22:59.910
那么这里是用6除12

22:59.910 --> 23:00.630
6除12呢

23:00.630 --> 23:01.910
商为3余数呢

23:01.910 --> 23:03.110
为0对吧

23:03.110 --> 23:04.230
余数为0

23:04.230 --> 23:05.030
然后呢

23:05.030 --> 23:06.470
3再来除1多少呢

23:06.470 --> 23:07.030
除12

23:07.590 --> 23:08.230
商是多少

23:09.750 --> 23:11.670
商是不是1对吧

23:11.670 --> 23:12.230
余数呢

23:12.230 --> 23:12.630
为多少

23:13.190 --> 23:14.550
余数是不是为1

23:15.110 --> 23:15.750
好

23:15.750 --> 23:16.790
然后呢再把1

23:17.350 --> 23:18.870
再来除12啊

23:19.510 --> 23:20.230
商是0

23:20.310 --> 23:20.950
好商是0

23:20.950 --> 23:21.990
后面就不再除了

23:21.990 --> 23:22.870
不再继续了

23:22.870 --> 23:23.830
商是0了

23:23.830 --> 23:24.710
那么余数呢

23:25.430 --> 23:26.710
余数为多少

23:26.710 --> 23:27.190
为1

23:28.310 --> 23:28.870
没问题吧

23:29.750 --> 23:31.670
然后导则看

23:31.670 --> 23:32.870
从下往上看

23:32.870 --> 23:34.310
就是他的二进字

23:34.310 --> 23:35.830
1101

23:38.390 --> 23:39.270
1101

23:39.750 --> 23:40.070
看没

23:40.870 --> 23:41.110
好

23:41.110 --> 23:42.950
所以说13转成二进字

23:42.950 --> 23:44.470
是1101

23:45.270 --> 23:46.550
用这种方式

23:46.550 --> 23:47.510
从下往上看

23:48.070 --> 23:48.630
从下

23:51.270 --> 23:51.670
余数

23:52.390 --> 23:52.950
从下

23:53.990 --> 23:54.710
往上看

23:55.670 --> 23:56.550
就是他的二进字

23:57.830 --> 23:58.150
好

23:58.150 --> 23:58.790
这是关于

24:00.150 --> 24:01.190
实际字转二进字

24:01.190 --> 24:02.630
整数的转换方式

24:02.630 --> 24:03.670
然后再看小数

24:03.910 --> 24:04.550
再看小数

24:05.110 --> 24:06.710
小数这里3.25比方说

24:08.230 --> 24:10.390
3.25转换成二进字

24:10.390 --> 24:11.270
该怎么来转呢

24:12.230 --> 24:12.950
整数部分

24:14.150 --> 24:14.950
整数部分

24:15.670 --> 24:15.990
一样

24:16.790 --> 24:17.030
一样

24:17.590 --> 24:18.950
那么3转成二进字

24:18.950 --> 24:19.990
你可以自己去转一下

24:20.710 --> 24:22.310
就除一二

24:22.310 --> 24:23.670
转出来就是摇摇

24:24.310 --> 24:25.590
整数部分的一样

24:25.590 --> 24:26.070
摇摇

24:26.070 --> 24:26.950
你可以自己去转一下

24:27.830 --> 24:28.870
整数部分是摇摇

24:28.870 --> 24:29.670
你看这里摇摇

24:29.670 --> 24:30.150
没问题吧

24:30.950 --> 24:31.510
好

24:31.510 --> 24:32.870
然后小数部分

24:33.990 --> 24:34.790
小数部分

24:36.310 --> 24:37.190
用这种方式来转

24:38.870 --> 24:39.830
小数部分不太一样

24:40.230 --> 24:41.110
用这种方式来转

24:41.990 --> 24:44.470
首先小数部分拿出来是0.25

24:44.470 --> 24:45.030
对吧

24:45.030 --> 24:46.230
0.25

24:46.230 --> 24:47.430
0.25干嘛呢

24:47.990 --> 24:48.630
成一二

24:49.590 --> 24:50.230
成一二

24:50.230 --> 24:51.350
得到的结果是什么呢

24:51.350 --> 24:52.390
得到的结果

24:52.390 --> 24:54.630
得到的结果是0.5

24:54.630 --> 24:55.110
对吧

24:55.110 --> 24:56.310
是0.5没问题吧

24:56.790 --> 24:57.350
好

24:57.350 --> 24:59.110
那么0.5的整数部分

25:00.150 --> 25:00.950
整数部分

25:01.670 --> 25:02.310
是啥

25:02.310 --> 25:02.950
是不是1

25:03.750 --> 25:04.230
对吧

25:04.230 --> 25:04.710
哎呗

25:04.710 --> 25:05.910
整数部分是不是0

25:05.910 --> 25:06.550
对不对

25:06.550 --> 25:08.550
整数部分目前成完了之后

25:08.550 --> 25:09.350
仍然是0

25:09.750 --> 25:10.310
仍然是0

25:10.790 --> 25:11.110
好

25:11.110 --> 25:11.510
接下来

25:11.990 --> 25:12.390
又来

25:13.270 --> 25:14.950
0.5又拿出来

25:14.950 --> 25:15.990
0.5又拿出来

25:15.990 --> 25:16.790
又来成一二

25:17.350 --> 25:18.390
又来成一二

25:18.470 --> 25:19.830
整数部分就是1.0了

25:19.830 --> 25:20.470
对吧

25:20.470 --> 25:21.270
整数部分

25:21.750 --> 25:22.550
整数部分

25:23.510 --> 25:24.470
整数部分是多少

25:24.470 --> 25:25.110
是不是1

25:25.830 --> 25:26.470
好

25:26.470 --> 25:28.710
然后整数部分

25:28.710 --> 25:30.950
从上往下看

25:31.750 --> 25:31.990
啊

25:31.990 --> 25:32.870
你为什么停止呢

25:32.870 --> 25:34.070
因为小数部分是0的

25:34.630 --> 25:36.630
小数部分是0的时候停止

25:37.430 --> 25:37.830
停止

25:38.630 --> 25:39.910
小数部分只要不为0

25:39.910 --> 25:40.710
还得继续成

25:40.710 --> 25:41.830
不断的成不断的成

25:41.830 --> 25:44.070
一直要从到小数部分为0为止

25:44.790 --> 25:45.750
整数部分

25:45.750 --> 25:46.630
从上往下看

25:46.630 --> 25:47.590
是不是01

25:47.670 --> 25:49.430
所以就是11.01

25:50.630 --> 25:51.110
看没

25:52.070 --> 25:52.950
11.01

25:52.950 --> 25:53.670
就这么来的

25:55.270 --> 25:56.870
这是小数部分的方式

25:57.590 --> 25:58.390
小数部分的方式

25:58.390 --> 25:59.590
就是用这种方式来算的

26:00.950 --> 26:01.430
好了

26:01.430 --> 26:04.150
这就是实际制和二进之间

26:04.150 --> 26:05.990
之间相互转换

26:05.990 --> 26:07.190
相互转换

26:08.070 --> 26:08.310
好

26:08.310 --> 26:08.870
接下来

26:08.870 --> 26:09.990
我们再来看一个问题

26:09.990 --> 26:11.030
再来看这个问题

26:11.350 --> 26:13.270
就是有其中一个问题又解释出来了

26:14.950 --> 26:15.750
为什么

26:16.710 --> 26:21.270
解释的小数运算不精确

26:22.310 --> 26:24.230
为什么小数运算不精确

26:24.230 --> 26:24.950
为什么呢

26:24.950 --> 26:25.910
因为解释

26:26.550 --> 26:29.350
因为实际制的小数

26:30.230 --> 26:32.790
转换为二进之后

26:33.910 --> 26:35.110
转换为

26:37.750 --> 26:38.870
二进之后

26:39.590 --> 26:42.870
可能是无限小数

26:43.830 --> 26:45.110
可能是无限小数

26:45.910 --> 26:46.550
比方说

26:48.070 --> 26:49.030
比方说

26:49.030 --> 26:50.790
咱们随便举个例子吧

26:50.790 --> 26:51.670
就0.1

26:52.230 --> 26:53.110
就0.1

26:54.230 --> 26:54.790
实际制

26:55.910 --> 26:56.470
实际制

26:57.670 --> 26:58.710
也不别0.1了

26:58.710 --> 26:59.510
就0.3吧

27:00.230 --> 27:01.350
这是个实际制数

27:02.150 --> 27:03.350
实际制数

27:03.350 --> 27:05.510
当然二进制数里面不可能有三这个东西的

27:05.510 --> 27:06.230
对吧

27:06.230 --> 27:08.630
实际制数0.3转换成二进制

27:08.630 --> 27:09.590
来咱们来转一下

27:10.630 --> 27:12.230
整数部分是不是直接适0

27:12.230 --> 27:12.550
对吧

27:12.550 --> 27:13.750
整数部分直接适0

27:13.750 --> 27:14.550
没什么好说的

27:15.030 --> 27:15.990
看小数部分

27:16.790 --> 27:17.670
好小数部分

27:17.670 --> 27:18.230
我们刚才

27:19.670 --> 27:21.350
刚才是不是已经研究过了

27:21.350 --> 27:22.870
首先是干嘛呢

27:22.870 --> 27:25.670
首先是0.3乘12

27:25.670 --> 27:26.310
对吧

27:26.310 --> 27:27.590
等于0.6

27:27.590 --> 27:28.550
整数部分是不是0

27:29.270 --> 27:31.750
又来0.6乘12

27:31.750 --> 27:32.630
1.2

27:32.630 --> 27:33.590
整数部分是不是0

27:34.230 --> 27:34.470
对吧

27:35.670 --> 27:36.710
整数部分是不是1

27:36.710 --> 27:37.110
对吧

27:37.110 --> 27:38.390
整数部分是1

27:38.390 --> 27:40.310
然后这里要说一下

27:42.150 --> 27:44.070
乘的时候只管小数部分

27:44.150 --> 27:44.950
只管小数部分

27:44.950 --> 27:46.150
整数部分又去掉

27:46.150 --> 27:47.590
整数部分去掉

27:47.590 --> 27:50.150
去掉过后又是0.2乘12

27:50.150 --> 27:52.550
就是0.4是不是还是0

27:52.550 --> 27:55.190
0.4乘12

27:55.190 --> 27:57.110
0.8是不是还是0

27:57.110 --> 28:00.070
然后0.8乘12

28:00.070 --> 28:01.350
是不是1.6

28:01.350 --> 28:01.750
对吧

28:01.750 --> 28:03.430
1.6是不是1

28:03.430 --> 28:03.750
对吧

28:03.750 --> 28:05.830
又来0.6乘12

28:05.830 --> 28:07.430
你看一下是不是无穷无尽了

28:07.430 --> 28:08.310
现在后面

28:08.310 --> 28:11.270
0.6乘12是不是1.2

28:11.270 --> 28:11.910
对吧

28:11.910 --> 28:12.630
1.2

28:13.590 --> 28:14.790
然后是不是1

28:14.790 --> 28:15.350
对吧

28:15.350 --> 28:15.910
1

28:16.790 --> 28:20.230
然后0.2乘12

28:21.030 --> 28:22.470
这里就是0.4

28:22.470 --> 28:23.030
是不是0

28:23.750 --> 28:24.310
是不是0

28:24.310 --> 28:26.150
你看一下是不是再开始重复了

28:26.150 --> 28:27.350
再开始重复了

28:27.350 --> 28:28.550
实际上后面我就不写了

28:28.550 --> 28:29.750
后面就不写了

28:29.750 --> 28:32.790
然后它得到的小数应该是0100

28:33.670 --> 28:33.990
1

28:35.430 --> 28:35.910
看一下

28:35.910 --> 28:37.350
0100

28:37.990 --> 28:38.230
1

28:38.950 --> 28:41.270
然后是

28:41.990 --> 28:43.350
1001

28:43.350 --> 28:44.630
1001

28:44.630 --> 28:46.230
1001

28:46.230 --> 28:47.190
1001

28:47.190 --> 28:48.230
1001

28:48.230 --> 28:49.750
应该是这样的格式

28:49.750 --> 28:51.030
应该是这样的格式

28:51.030 --> 28:52.550
后面是无穷无尽的

28:53.590 --> 28:53.830
好

28:53.830 --> 28:54.630
咱们来看一下

28:54.630 --> 28:56.870
我们可以在程序里边验证这个结果

28:56.870 --> 28:58.470
就是0.3这个数字

28:58.470 --> 28:59.750
它转换成二净字

28:59.750 --> 29:00.630
是不是这个样子

29:00.630 --> 29:01.430
好

29:01.430 --> 29:02.390
怎么来看呢

29:02.390 --> 29:03.830
可以用这种方式

29:03.830 --> 29:05.270
这个我们现在还没有学过

29:05.270 --> 29:05.670
没关系

29:05.670 --> 29:06.550
我们以后会说

29:06.550 --> 29:07.430
以后会学的

29:07.750 --> 29:08.630
很简单

29:08.630 --> 29:09.350
定一个变量

29:09.350 --> 29:10.550
给它存放0.3

29:10.550 --> 29:11.590
存放0.3

29:12.310 --> 29:13.030
然后呢

29:13.030 --> 29:14.310
一个数字里边

29:14.310 --> 29:15.110
它有

29:15.110 --> 29:16.550
它有这么一个函数

29:17.110 --> 29:17.710
一个函数

29:17.710 --> 29:18.470
touston

29:18.470 --> 29:19.910
这里很奇怪啊

29:19.910 --> 29:20.790
这里很奇怪

29:20.790 --> 29:21.990
它为什么这个数字是

29:21.990 --> 29:22.710
把它变

29:22.710 --> 29:24.070
好像当成一个对象在用

29:24.070 --> 29:24.550
对吧

29:24.550 --> 29:25.030
数字呢

29:25.030 --> 29:26.710
我们说过是一个原始内象

29:26.710 --> 29:28.310
它怎么把它当成对象的用

29:28.310 --> 29:29.510
它里边好像有个属性

29:29.510 --> 29:30.550
叫做touston

29:30.550 --> 29:31.830
而且还是个函数

29:31.830 --> 29:32.630
那是怎么回事呢

29:32.630 --> 29:33.750
我们以后会讲

29:33.750 --> 29:34.390
以后会讲

29:34.390 --> 29:35.670
现在还没学到这一块

29:35.670 --> 29:36.390
现在别管

29:36.470 --> 29:38.150
我们总之可以用这种方式

29:38.150 --> 29:39.030
里边写一个2

29:39.750 --> 29:40.710
里边写一个2

29:40.710 --> 29:41.670
表示什么意思呢

29:41.670 --> 29:42.870
查看这个数字

29:43.910 --> 29:47.830
就是查看该数字的二净字

29:48.950 --> 29:51.510
二净字格式

29:51.510 --> 29:54.550
看一下是不是0.001

29:54.550 --> 29:55.990
1001

29:55.990 --> 29:57.030
是不是无线下去了

29:57.990 --> 29:58.390
好

29:58.390 --> 29:59.910
那么它后面为啥不写了呢

29:59.910 --> 30:00.950
它后面能写吗

30:00.950 --> 30:02.230
它是无线的

30:02.230 --> 30:03.670
它是一个无线的小数

30:03.670 --> 30:05.030
后面写不了了

30:05.030 --> 30:06.150
所以说这里还有一个问题

30:06.870 --> 30:07.990
转换在二净字之后

30:07.990 --> 30:09.350
可能是一个无线小数

30:10.550 --> 30:18.150
但是计算机对数字的存储能力有限

30:18.150 --> 30:19.110
它只能存这么多位

30:19.110 --> 30:20.550
它不可能无线存下去

30:20.550 --> 30:21.430
你内存扎一大

30:21.430 --> 30:23.430
也不能可能存一个无线的东西

30:23.430 --> 30:25.030
存储能力是有限的

30:25.030 --> 30:29.670
因此会丢失一些数据

30:29.670 --> 30:31.590
你看后边的数据是不是截断了

30:31.590 --> 30:31.990
对吧

30:31.990 --> 30:34.070
后边的数据又被截断了

30:34.070 --> 30:34.950
截断的时候

30:35.110 --> 30:36.550
它是按照四舍五入

30:36.550 --> 30:38.710
但是我们十净字里边是四舍五入

30:38.710 --> 30:40.550
二净字里边它是什么

30:40.550 --> 30:41.990
后边那一位是一

30:41.990 --> 30:43.190
就向前进一

30:43.190 --> 30:44.150
后边那一位是零

30:44.150 --> 30:45.190
就直接抛弃

30:45.190 --> 30:47.510
它总之会抛弃掉一些数据

30:47.510 --> 30:50.310
就导致了小数的存储

30:50.310 --> 30:52.070
本身就是不精确的

30:54.150 --> 30:55.670
由于它的小数存储

30:55.670 --> 30:57.510
它本身是不精确的

30:57.510 --> 30:59.830
那你想想运算是不是一定出问题的

30:59.830 --> 31:01.350
一定要出问题对吧

31:01.350 --> 31:04.230
它的本身存的东西就已经丢了一些数据了

31:04.230 --> 31:05.590
因此它运算就出问题了

31:05.670 --> 31:07.670
这就是为什么戒施的小数

31:07.670 --> 31:09.590
当然不管不光是戒施

31:09.590 --> 31:11.190
其他的语言都是这个问题

31:11.190 --> 31:12.550
都是这个问题

31:12.550 --> 31:14.550
戒施的小数运算不精确

31:14.550 --> 31:15.910
就是因为它存储的时候

31:15.910 --> 31:18.630
本身就是不精确的

31:18.630 --> 31:20.310
我们从这个地方就可以

31:20.310 --> 31:22.070
一保存它就重新刷新了

31:22.070 --> 31:23.190
就可以看到这个

31:23.190 --> 31:24.630
看到这个现象

31:24.630 --> 31:26.550
这就解释清楚了

31:26.550 --> 31:28.230
戒施的小数运算不精确

31:29.590 --> 31:31.030
好接下来我们继续看

31:31.990 --> 31:35.830
就是在戒施中

31:35.830 --> 31:37.830
如何存储数字

31:37.830 --> 31:40.150
这里边就要解释很多现象了

31:40.150 --> 31:43.110
戒施里边它是怎么来存数字的

31:43.110 --> 31:49.160
数字在计算机里面存法有很多

31:49.160 --> 31:50.600
有非常非常多

31:50.600 --> 31:52.600
在很多很多年前

31:52.600 --> 31:54.600
30多年前吧

31:54.600 --> 31:55.560
40多年前

31:55.560 --> 31:57.960
那个时候计算机世界里面很温暖

31:57.960 --> 32:00.600
就是每个计算机制造厂商

32:00.600 --> 32:03.080
虽然那个时候计算机还没有进入千家万户

32:03.160 --> 32:06.120
但是在有些机构里面已经开始在使用了

32:06.120 --> 32:08.200
不同的计算机厂商

32:08.200 --> 32:10.920
以及不同的语言

32:10.920 --> 32:13.160
它在存储数字的时候

32:13.160 --> 32:15.720
各有各的做法

32:15.720 --> 32:18.600
后来标准组织就出了几套标准

32:18.600 --> 32:20.040
你数字都按照这样来存

32:20.040 --> 32:21.800
你不要乱

32:21.800 --> 32:23.080
一会不要用这种存法

32:23.080 --> 32:24.120
一会用另外一种存法

32:24.120 --> 32:26.440
这个世界就没有标准了

32:26.440 --> 32:27.480
写代码也牢火

32:27.480 --> 32:29.480
而且兼容性也很差

32:29.480 --> 32:31.160
所以后来出了一些标准

32:31.240 --> 32:33.720
告诉每一个计算机制造厂商

32:33.720 --> 32:35.960
也告诉那些软件的开发者

32:35.960 --> 32:39.080
也告诉所有的语言开发者

32:39.080 --> 32:42.120
你应该怎么来存数字

32:42.120 --> 32:47.160
这里存数字一般有两种方式

32:47.160 --> 32:51.400
一种是整数

32:51.400 --> 32:52.440
整数

32:52.440 --> 32:54.280
整数法

32:54.280 --> 32:56.920
就是用整数的方式来存数字

32:56.920 --> 32:59.320
只存整数不存小数

32:59.320 --> 33:02.360
另外一个是伏点法

33:02.360 --> 33:04.120
就是用这种第二种方式

33:04.120 --> 33:06.040
主要用来存小数的

33:06.040 --> 33:06.920
不管整数

33:06.920 --> 33:08.760
它只用来存小数

33:08.760 --> 33:10.200
但是介石的语言

33:10.200 --> 33:12.040
它神奇的地方就是

33:12.040 --> 33:18.840
介石中存储的所有数字

33:18.840 --> 33:24.200
都按照伏点法存放

33:24.200 --> 33:25.880
也就是它的整数存放

33:25.880 --> 33:29.240
它也是按照小数的那种方式来存放的

33:29.320 --> 33:30.600
本来在很多语言里边

33:30.600 --> 33:31.800
比如在加坝里边

33:31.800 --> 33:33.160
有些同学学过加坝

33:33.160 --> 33:34.200
加坝里边有什么

33:34.200 --> 33:34.920
有int

33:34.920 --> 33:35.960
有整数

33:35.960 --> 33:37.000
还有float

33:37.000 --> 33:37.560
小数

33:37.560 --> 33:38.200
还有double

33:38.200 --> 33:39.400
也是小数

33:39.400 --> 33:41.240
有不同的数字内形

33:41.240 --> 33:43.000
整数和小数是分开的

33:43.000 --> 33:44.040
在很多内形

33:44.040 --> 33:44.920
很多语言里边

33:44.920 --> 33:46.840
整数和小数都是分开的

33:46.840 --> 33:48.680
但是在介石里边没有分开

33:48.680 --> 33:49.720
因为在介石里边

33:49.720 --> 33:52.840
它的整数也是按照小数的那种方式来存的

33:52.840 --> 33:56.440
它也是按照小数的那种方式来存的

33:56.520 --> 33:59.960
所以说我们在解释介石里边存储数字的时候

33:59.960 --> 34:02.040
会用一种统一的方式来解释

34:02.040 --> 34:03.880
因为它们都是存储的方式都是一样的

34:03.880 --> 34:05.000
都是一样的

34:05.720 --> 34:07.400
这也是介石里边

34:07.400 --> 34:10.120
整数它也会导致不精确

34:10.120 --> 34:11.560
当数字很大的时候

34:11.560 --> 34:13.640
也会导致不精确运算的根本原因

34:14.200 --> 34:15.240
因为它存放的方式

34:15.240 --> 34:17.240
用小数的那种存放方式来存的

34:18.360 --> 34:19.560
伏点法

34:19.560 --> 34:24.840
就是伏点法存放的数字

34:24.920 --> 34:26.920
叫做伏点数

34:26.920 --> 34:28.920
叫做伏点数

34:28.920 --> 34:30.440
这个该读怎么读

34:30.440 --> 34:32.040
读伏点数还是伏点数

34:32.040 --> 34:33.960
应该读伏点数是吧

34:33.960 --> 34:35.960
它叫做float

34:38.580 --> 34:41.140
伏点数又有很多种规范

34:41.140 --> 34:42.580
有很多种标准

34:42.580 --> 34:46.980
其中一种标准分为是单经度和双经度

34:46.980 --> 34:53.620
伏点数分为单经度和双经度

34:53.620 --> 34:55.620
简单来说有什么区别呢

34:55.620 --> 34:59.540
单经度它存放的数字要少一些

34:59.540 --> 35:01.460
能够存放的数字要少一些

35:01.460 --> 35:03.540
能够表示的精度

35:03.540 --> 35:05.220
什么叫精度就是有效位数

35:05.220 --> 35:06.500
小数点后面多少位

35:06.500 --> 35:07.540
就是有效位数

35:08.900 --> 35:12.020
能够表示的有效位数要少一些

35:13.220 --> 35:16.580
而双经度它能够表示的有效位数要多一些

35:16.580 --> 35:18.100
存放的数字要多一些

35:18.100 --> 35:20.500
当然它占用的内存空间也要多一些

35:21.220 --> 35:22.500
介石里边

35:22.500 --> 35:28.660
介石中使用双经度存放伏点数

35:30.020 --> 35:31.860
我先把这个概念给解释清楚

35:31.860 --> 35:36.100
它使用的是双经度这种标准来存放伏点数

35:36.100 --> 35:42.660
这个标准在它的编号是i111754

35:42.660 --> 35:43.940
应该被记错吧

35:43.940 --> 35:45.460
这个我应该不会记错

35:45.460 --> 35:46.820
查一下吧

35:46.820 --> 35:48.740
万一讲错了

35:49.700 --> 35:50.980
就是这个

35:52.020 --> 35:53.300
i111754

35:53.300 --> 35:55.780
使用的是这个标准来存放伏点数

35:57.300 --> 35:59.060
那么接下来我就在介绍

35:59.060 --> 36:00.340
在这个标准里边

36:00.340 --> 36:03.140
它到底是怎么来存放数字的

36:03.140 --> 36:05.860
因为它整数和小数都是用这种方式来存放的

36:05.860 --> 36:06.820
它怎么来存放的

36:06.820 --> 36:08.740
真正开始复杂的开始来了

36:08.740 --> 36:09.860
真正复杂的开始在这

36:10.900 --> 36:12.420
它怎么存放的呢

36:12.420 --> 36:13.380
它是这样的存放的

36:14.500 --> 36:15.860
它一共在计算机中

36:16.180 --> 36:18.580
存放方式

36:19.620 --> 36:22.260
开始存放方式

36:24.420 --> 36:26.340
一共有它在计算机中

36:26.340 --> 36:27.860
接使在计算机中

36:29.460 --> 36:30.260
计算机中

36:31.860 --> 36:37.460
给每个数字开辟一块内存空间

36:38.340 --> 36:39.220
一块内存空间

36:39.220 --> 36:41.140
因为我们的数据都是放到内存空间里面

36:41.140 --> 36:43.780
那么内存空间它是有固定尺寸

36:44.500 --> 36:47.860
尺寸固定为六十四位

36:48.820 --> 36:50.900
什么叫做六十四位呢

36:50.900 --> 36:52.900
我们实境制的数字里边

36:52.900 --> 36:54.660
比方说我们一个数字

36:54.660 --> 36:56.340
一个数字一二三对吧

36:56.340 --> 36:57.860
我们说它是三位数

36:57.860 --> 36:59.620
一二三四说它是四位数

36:59.620 --> 37:00.420
就是这个意思

37:01.140 --> 37:03.140
在二净字里边不是零一零一吗

37:03.140 --> 37:03.540
对吧

37:03.540 --> 37:04.980
这个东西几位数啊

37:04.980 --> 37:07.220
一二三四五六七就是七位数

37:07.220 --> 37:08.100
七位数

37:08.100 --> 37:08.980
那么也就是说

37:08.980 --> 37:11.780
在计算机里边给每个数字开辟一块内存空间

37:11.780 --> 37:13.220
尺寸固定为六十四位

37:13.860 --> 37:15.300
哪怕你存一个一

37:15.300 --> 37:16.100
那不好意思

37:16.100 --> 37:17.460
前边全部补上零

37:17.460 --> 37:18.660
都是六十四位

37:18.660 --> 37:19.860
都是六十四位

37:19.860 --> 37:20.660
明白这个意思吧

37:20.660 --> 37:22.580
它尺寸固定为六十四位

37:22.580 --> 37:24.020
它是定长的

37:24.020 --> 37:25.140
长度固定的

37:25.140 --> 37:25.620
实际上呢

37:25.620 --> 37:26.500
我们的计算机

37:26.500 --> 37:28.020
位就是最小的存储单位

37:28.020 --> 37:28.980
我这里顺便说一下吧

37:30.580 --> 37:31.540
在计算机中

37:32.180 --> 37:34.340
位也叫做bit

37:34.340 --> 37:34.820
bit

37:35.780 --> 37:36.340
叫字

37:36.340 --> 37:37.860
叫做不叫字节

37:37.860 --> 37:38.900
就叫做位

37:38.900 --> 37:39.700
就是一臂

37:39.700 --> 37:40.100
一臂

37:40.900 --> 37:43.220
位是最小的存储单位

37:43.860 --> 37:45.060
就是一位可以存什么呢

37:45.060 --> 37:45.940
可以存两个数字

37:45.940 --> 37:46.740
要么存零

37:46.740 --> 37:47.380
要么存一

37:47.380 --> 37:47.940
对吧

37:47.940 --> 37:48.980
只能存两种

37:48.980 --> 37:50.020
就是两种数字

37:50.020 --> 37:51.220
它的信息量为二

37:51.220 --> 37:51.540
对吧

37:51.540 --> 37:52.180
为二

37:52.180 --> 37:54.100
一位只能存这么点东西

37:54.100 --> 37:56.020
位实计算机的最小存储单位

37:56.020 --> 37:57.620
简称为

37:57.620 --> 37:59.220
简称为bit

38:01.140 --> 38:01.860
简称为bit

38:03.300 --> 38:04.260
bit

38:05.300 --> 38:05.940
就是有的时候呢

38:05.940 --> 38:07.700
我们看到就是网络

38:07.700 --> 38:08.340
网络

38:08.340 --> 38:09.380
它是多少照

38:10.260 --> 38:11.300
这里面显示了

38:11.300 --> 38:13.220
有的时候我们网上看在本地连接

38:13.540 --> 38:15.300
100兆每秒

38:15.300 --> 38:15.540
对吧

38:15.540 --> 38:16.340
100兆每秒

38:16.340 --> 38:17.260
它100兆每秒

38:17.260 --> 38:19.060
指的是什么bit

38:20.820 --> 38:21.700
指的是bit

38:21.700 --> 38:23.380
就十的六次方

38:23.380 --> 38:25.060
十的六次方bit

38:25.060 --> 38:25.620
每秒

38:25.620 --> 38:27.060
它指的是这么个意思

38:27.060 --> 38:27.860
简称为bit

38:28.740 --> 38:29.780
那么它的换算单位呢

38:29.780 --> 38:30.820
有这么一些

38:30.820 --> 38:31.620
一字节

38:34.900 --> 38:35.780
一字节

38:36.180 --> 38:37.220
一拜

38:37.220 --> 38:37.940
字节是拜

38:39.060 --> 38:39.940
等于多少呢

38:39.940 --> 38:42.420
等于1024位

38:42.500 --> 38:43.700
等于1024位

38:44.980 --> 38:45.860
等于8位

38:45.860 --> 38:46.740
等于8位

38:46.740 --> 38:47.700
怎么回事

38:47.700 --> 38:49.060
一字节等于8位

38:49.060 --> 38:49.540
然后呢

38:50.340 --> 38:51.460
一kbit

38:52.500 --> 38:53.460
等于多少呢

38:53.460 --> 38:55.940
1024字节

38:55.940 --> 38:57.540
1024字节

38:57.540 --> 38:58.340
1024bit

38:58.340 --> 38:58.900
有的时候呢

38:58.900 --> 38:59.780
字节也称为bit

39:01.700 --> 39:02.500
一招呢

39:03.380 --> 39:04.900
我还是把鞋权吧

39:04.900 --> 39:05.860
免得造成奇

39:06.740 --> 39:07.380
一招呢

39:07.380 --> 39:09.860
等于1024kbit

39:10.580 --> 39:11.460
1024kbit

39:12.500 --> 39:13.300
一gbit呢

39:13.860 --> 39:15.380
等于1024

39:15.780 --> 39:17.140
这大家都知道了

39:17.140 --> 39:17.940
对吧

39:17.940 --> 39:18.500
所以说

39:18.500 --> 39:19.220
v啊

39:19.220 --> 39:20.820
它是计算机里边

39:20.820 --> 39:22.900
最小的存储单位

39:22.900 --> 39:23.540
称之为位

39:24.260 --> 39:24.740
好

39:24.740 --> 39:26.500
那么在节词里边

39:26.500 --> 39:28.100
它给数字存东西

39:28.100 --> 39:29.140
存数字的时候

39:29.140 --> 39:29.860
一个数字

39:29.860 --> 39:31.780
甭管它数字是大是小

39:31.780 --> 39:32.740
无所谓

39:32.740 --> 39:33.540
是多是少

39:33.540 --> 39:34.100
有多少个

39:34.740 --> 39:35.540
有多少精度

39:35.540 --> 39:36.420
小数点有多少位

39:36.420 --> 39:37.300
无所谓

39:37.300 --> 39:38.900
全部固定为64位

39:40.260 --> 39:41.940
在这64位里边

39:41.940 --> 39:43.540
它是来这么来分配的

39:43.540 --> 39:45.380
在64位里数字里边

39:45.940 --> 39:46.660
它第一位

39:48.100 --> 39:48.820
重做到右吧

39:48.820 --> 39:50.180
我们就用重做到右的那种方式吧

39:51.140 --> 39:52.340
64位数字对吧

39:52.340 --> 39:53.220
64位数字

39:55.300 --> 39:55.860
第一位

39:56.820 --> 39:57.780
第一位

39:57.780 --> 39:58.580
它是这样来分的

39:59.620 --> 40:00.500
它分成几段

40:01.140 --> 40:01.860
这是第一位

40:02.420 --> 40:02.740
一

40:04.260 --> 40:04.820
然后呢

40:04.820 --> 40:05.620
第二到

40:05.620 --> 40:06.740
多少位呢

40:06.740 --> 40:07.300
第二到

40:07.300 --> 40:07.860
我想想啊

40:08.980 --> 40:09.940
64

40:09.940 --> 40:10.900
64解1

40:10.900 --> 40:11.460
63

40:11.460 --> 40:11.940
63

40:11.940 --> 40:13.220
减去52

40:13.220 --> 40:13.620
11

40:14.660 --> 40:15.300
11位

40:15.300 --> 40:16.660
就是第二到

40:17.460 --> 40:18.580
第二到12

40:19.380 --> 40:20.580
第二到12

40:20.580 --> 40:21.460
多少呢

40:21.460 --> 40:22.580
是不是11个数字

40:22.580 --> 40:22.980
对吧

40:22.980 --> 40:23.860
11个数字

40:23.860 --> 40:25.460
第二位到第12位

40:26.020 --> 40:26.500
是啥呢

40:27.380 --> 40:28.500
又把它分成一块

40:29.060 --> 40:29.540
然后呢

40:30.100 --> 40:30.980
第13位

40:31.540 --> 40:32.660
到多少呢

40:32.660 --> 40:33.940
到64位

40:33.940 --> 40:34.900
又是一块

40:34.900 --> 40:35.380
所以说

40:35.380 --> 40:38.100
它把这64位的分成了三段

40:38.100 --> 40:39.060
分成了三段

40:39.620 --> 40:40.660
第一段

40:40.740 --> 40:41.380
这是第一段

40:41.380 --> 40:42.100
我们这样说吧

40:42.100 --> 40:42.900
第一段

40:45.700 --> 40:46.500
第一段

40:47.780 --> 40:48.740
复杂的来了

40:48.740 --> 40:49.700
这是第二段

40:50.980 --> 40:52.020
它为什么要这样做呢

40:52.020 --> 40:52.820
这样做了

40:52.820 --> 40:54.820
这样做的好处可以表示更多的

40:54.820 --> 40:55.940
更大的数字

40:55.940 --> 40:56.900
这是第三段

40:58.740 --> 41:00.100
它用这种方式

41:00.660 --> 41:02.260
我这里还是放过来吧

41:02.260 --> 41:02.740
放到这点

41:03.700 --> 41:04.740
把它分成三段

41:04.740 --> 41:06.740
这64位里边把它分成三段

41:06.740 --> 41:06.900
好

41:06.900 --> 41:07.540
我们一个个说

41:08.100 --> 41:08.660
第一段

41:09.220 --> 41:09.780
第一段

41:12.650 --> 41:13.290
第一段

41:13.610 --> 41:14.250
只有一位

41:14.730 --> 41:15.370
只有一位

41:16.090 --> 41:17.290
这一位表示

41:18.090 --> 41:18.810
符号为

41:19.290 --> 41:20.170
表示符号为

41:20.570 --> 41:21.130
如果

41:21.930 --> 41:22.490
为1

41:22.970 --> 41:24.010
如果为1的话

41:24.890 --> 41:25.290
那么

41:26.410 --> 41:27.050
是复数

41:27.770 --> 41:28.410
表示复数

41:29.530 --> 41:30.650
如果为0

41:31.290 --> 41:32.170
如果为0

41:32.410 --> 41:32.970
表示

41:34.010 --> 41:34.410
正数

41:34.890 --> 41:35.850
你看这个意思吧

41:35.850 --> 41:37.130
这是表示符号为

41:37.130 --> 41:38.010
因为在计算机里边

41:38.010 --> 41:39.130
它要表示符号对吧

41:39.130 --> 41:40.330
我们现实世界里边

41:41.050 --> 41:42.010
表示复数很简单

41:42.010 --> 41:42.890
前面画一个纲

41:43.210 --> 41:44.090
在计算机里边

41:44.090 --> 41:45.130
哪有这个纲啊

41:45.130 --> 41:46.730
它不存在这个纲这个东西

41:47.050 --> 41:48.490
它只能用数字来表示

41:48.490 --> 41:50.890
所以说它第一位表示符号

41:50.890 --> 41:52.410
如果第一位写的是1

41:52.410 --> 41:53.450
那么就是复数

41:53.450 --> 41:54.490
如果写的是0

41:55.210 --> 41:56.250
就表示的是正数

41:56.570 --> 41:57.530
就表示的是正数

41:58.250 --> 41:58.490
好

41:58.490 --> 41:58.970
第二段

42:00.010 --> 42:00.490
第二段

42:01.050 --> 42:02.250
第二段一共有多少位呢

42:02.250 --> 42:03.210
一共有11位

42:04.090 --> 42:04.970
一共有11位

42:05.690 --> 42:06.410
它表示

42:06.890 --> 42:07.690
指数位

42:08.810 --> 42:09.450
指数位

42:11.050 --> 42:11.610
什么意思呢

42:11.610 --> 42:12.890
指数位表示的是

42:12.890 --> 42:14.170
2的多少次方

42:14.170 --> 42:15.450
这个数字

42:15.690 --> 42:18.010
前边就是我们向科学技术法对吧

42:18.010 --> 42:19.690
我们以前写科学技术法是吧

42:19.690 --> 42:22.330
1.54乘以10的

42:24.010 --> 42:26.570
乘以10的6次方

42:26.570 --> 42:28.010
这是不是科学技术法对吧

42:28.010 --> 42:30.410
1.54乘以10的6次方

42:30.410 --> 42:31.530
这里我看一下

42:31.530 --> 42:33.370
能不能打出来

42:33.370 --> 42:34.410
6次方

42:34.890 --> 42:35.690
打不出来

42:36.490 --> 42:37.530
只能这样写了

42:37.530 --> 42:38.490
这样这样写了

42:38.650 --> 42:40.490
表示乘以10的6次方

42:40.490 --> 42:41.130
当然也可以

42:41.130 --> 42:42.330
在介石里边可以这样写

42:42.330 --> 42:42.650
对吧

42:42.650 --> 42:43.610
也可以这样写

42:43.610 --> 42:44.330
10的6次方

42:45.210 --> 42:45.610
好

42:45.610 --> 42:46.810
这是科学技术法

42:46.810 --> 42:48.170
那么它这里表示的方式

42:48.170 --> 42:49.690
在二进制世界里边

42:49.690 --> 42:50.650
浮电数这一块

42:50.650 --> 42:52.890
它表示的方式也是科学技术法

42:53.850 --> 42:57.050
那么它在用11位的数字

42:57.610 --> 42:58.730
就是二进制位

42:58.730 --> 42:59.930
来表示指数

43:00.650 --> 43:01.130
指数

43:01.130 --> 43:01.930
就这里的数字

43:02.170 --> 43:02.970
就这里的数字

43:03.610 --> 43:04.570
它多少个指数

43:05.050 --> 43:05.850
指数是多少

43:06.570 --> 43:06.810
好

43:06.890 --> 43:08.410
那么真的但是你要知道

43:08.890 --> 43:09.690
这里的指数

43:10.250 --> 43:11.050
这里的指数

43:12.570 --> 43:14.090
4指是

43:15.690 --> 43:17.370
二为底的指数

43:20.820 --> 43:21.620
而不是

43:21.940 --> 43:23.140
而不是10

43:23.140 --> 43:23.940
这个要清楚

43:24.340 --> 43:26.340
这里说的指数是二的多少次方

43:26.340 --> 43:27.460
因为它是二进制

43:27.780 --> 43:28.900
它是二的多少次方

43:28.900 --> 43:30.100
而不是10的多少次方

43:30.580 --> 43:32.020
因为我们在石进制里边

43:32.020 --> 43:33.860
科学技术法都是10的多少次方

43:33.860 --> 43:34.340
对吧

43:34.340 --> 43:35.060
10的多少次方

43:35.060 --> 43:35.780
但是在这里的

43:36.340 --> 43:38.020
指的是二为底的指数

43:38.020 --> 43:38.980
二的多少次方

43:39.060 --> 43:39.700
而不是10

43:40.820 --> 43:41.620
好这是第二段

43:42.020 --> 43:42.980
表示指数位

43:43.780 --> 43:44.660
好第三段

43:45.940 --> 43:46.500
第三段

43:48.600 --> 43:50.040
第三段一共有多少位呢

43:50.280 --> 43:51.400
算一下还剩下多少位

43:51.400 --> 43:52.280
64位嘛

43:52.280 --> 43:53.400
现在占了12位了

43:53.400 --> 43:53.880
对吧

43:53.880 --> 43:55.560
是不是还剩下52位

43:56.120 --> 43:57.080
对吧52位

43:57.640 --> 43:58.760
它表示的是什么呢

43:58.760 --> 44:00.440
表示有效数字

44:01.080 --> 44:01.880
有效数字

44:03.320 --> 44:05.880
好那么这个有效数字

44:05.880 --> 44:07.400
这个有效数字

44:07.400 --> 44:07.880
就是

44:09.240 --> 44:10.120
我这里不好记了

44:10.200 --> 44:11.200
我这里取个例子吧

44:11.480 --> 44:12.120
取个例子

44:15.540 --> 44:18.500
比方说有这么一个二进制

44:18.980 --> 44:20.500
有这么一个二进制数

44:20.500 --> 44:20.980
看着啊

44:21.860 --> 44:23.540
第一位是零

44:24.180 --> 44:26.340
然后呢接下来11位是

44:27.380 --> 44:30.260
零零零零零零零零零零零零零

44:31.140 --> 44:31.860
这是多少位了

44:31.860 --> 44:32.740
8位了对吧

44:32.740 --> 44:34.580
还有三个零一一

44:35.620 --> 44:36.900
这是这11位的数字

44:37.380 --> 44:38.340
11位的数字

44:39.300 --> 44:40.100
然后接下来了

44:40.100 --> 44:44.740
后边啊 中间这11位 我要分开一点吧 中间这11位

44:45.940 --> 44:50.260
好 接下来呢 还有52位 对吧 52位啊 000

44:51.820 --> 44:58.900
你看 这样写吧 1111 000 8位嘛 8位 8位 16

45:00.220 --> 45:02.100
24 32

45:03.460 --> 45:08.500
32 还有多少 后边我就全卸零吧 后边我就全卸零啊

45:09.060 --> 45:15.060
后边我就全卸零 后面就就省略了啊 总之有52位 后边全是52位的零啊 后边全是零

45:15.940 --> 45:19.940
好 那么这个数字是什么呢 这个数字就相当于是啊

45:22.630 --> 45:25.030
相当于 它是正数嘛 首先

45:25.750 --> 45:29.510
首先它是一个正数 好 相当于是这样子的

45:30.390 --> 45:35.190
1111 这个1111呢 他要把它看成是小数部分

45:35.990 --> 45:41.270
他要把这个1111啊 看成是小数部分啊 看成是小数部分

45:41.990 --> 45:45.350
好 那么前边他会自动的给你加上一个1

45:46.390 --> 45:49.990
他会在前边自动给你加上一个1 1点多少多少多少

45:50.550 --> 45:52.470
1点多少多少多少 你看这个意思吧

45:53.590 --> 45:55.430
他会在前边给你加上一个1

45:57.720 --> 46:01.720
好好理解清楚 这个是小数部分啊 后边的全是小数部分的东西

46:02.120 --> 46:04.600
后边全是小数部分东西 前面自动给你加1

46:05.000 --> 46:08.280
因为前面的1反正是固定为1的 对吧 所以他不用写了

46:08.280 --> 46:11.240
不用理来表示了 不用理在前面再给我写个1来表示

46:11.240 --> 46:15.080
不需要 因为他前面固定为1 相当于是二进制里边小数

46:15.560 --> 46:21.160
1点1111然后是0000 后边当然全部是零 那就不用写了 对吧

46:21.400 --> 46:24.920
后边全部是零 那就不用写了 然后成义多少呢

46:25.640 --> 46:28.440
成义多少呢 成义二的

46:30.440 --> 46:34.200
相当于是 我们这里看一下能不能用那个来表示

46:40.220 --> 46:44.700
相当于是这个成义二的多少次方呢 成义二的三次方

46:45.340 --> 46:48.860
你看 这里是不是三 对吧 成义二的三次方

46:49.580 --> 46:53.260
没问题吧 这一坨的二进制它的结果就是三

46:53.580 --> 46:56.700
就是三 你可以自己去算一下 前面全部是零 可以忽略

46:56.700 --> 46:59.180
你就看11 11的二进制 那肯定是三

46:59.900 --> 47:03.660
那么就相当于是得到了数字 换成成十进制的话

47:03.900 --> 47:06.620
相当于这样子 相当于这个

47:07.340 --> 47:10.540
当然呢 你要把这个二进制 你得把这个二进制

47:10.940 --> 47:14.940
你得把这个二进制换算成十进制 这是二进制的表示法

47:15.100 --> 47:18.060
你得把这个东西换算成十进制 我们之前说过怎么去换算

47:18.860 --> 47:22.220
把它换算成十进制 然后再成义二的三次方

47:22.460 --> 47:24.220
这就是这个数字 它表示的东西

47:25.820 --> 47:28.940
但真的是这样子吗 还不一定是这样子

47:29.180 --> 47:31.740
还不一定是这样子 为什么不一定是这样子呢

47:32.700 --> 47:33.500
它有一个问题

47:35.020 --> 47:37.900
那如果我要表示零点几 咋办呢

47:39.420 --> 47:41.420
我咋表示零点几呢 问题是

47:41.820 --> 47:43.580
你这样子呢 你倒是表示什么

47:45.100 --> 47:47.580
怎么多少次方倒是没关系的

47:47.580 --> 47:50.300
那比方说我们有十进制里面是有小数的 对吧

47:50.300 --> 47:52.540
它这里可能是附六次方 对吧

47:52.540 --> 47:53.340
可能是附数

47:54.140 --> 47:57.180
它的指数可能是附数 来表示一个很小很小的数字

47:57.820 --> 47:59.900
但是这一块呢 它没法表示附数了

48:00.380 --> 48:03.820
你看 整个数字可以表示为附数

48:03.820 --> 48:07.420
但是指数部分是不是没法表示附数了

48:08.300 --> 48:10.300
因此呢 它做了一个偏营量

48:11.180 --> 48:12.540
它做了一个偏营量

48:13.260 --> 48:16.380
就这个位置是十一位

48:17.900 --> 48:18.540
十一位

48:19.820 --> 48:20.380
注意听哦

48:20.860 --> 48:23.740
这个地方是十一位 那我问大家一个问题啊

48:25.740 --> 48:27.420
十一位的二进制

48:28.380 --> 48:31.580
可以表示多少个数字

48:34.840 --> 48:36.280
十一位的二进制

48:38.700 --> 48:41.580
可以表示多少个数字

48:43.500 --> 48:44.380
可以表示多少个呢

48:45.340 --> 48:47.020
那我们看一位的二进制

48:47.580 --> 48:48.620
可以表示多少个数字

48:49.100 --> 48:51.500
可以表示零 可以表示一 两个

48:52.620 --> 48:54.540
两位的二进制可以表示多少个数字

48:55.020 --> 48:57.140
可以表示零 零零 零1

48:57.740 --> 48:59.340
1 0 11 四个

49:00.540 --> 49:02.220
三位的二进制可以表示多少个

49:03.340 --> 49:04.480
零零零零零零零零

49:05.660 --> 49:06.100
零11

49:07.180 --> 49:07.560
然后

49:08.940 --> 49:10.900
élililine

49:10.900 --> 49:12.140
11 啊总之许蜀吧

49:12.140 --> 49:13.180
八位 八个

49:15.500 --> 49:16.620
二的

49:16.620 --> 49:17.220
一次方

49:18.740 --> 49:19.740
二的一次方

49:20.820 --> 49:22.140
二的 二次方

49:22.140 --> 49:24.140
二的三次房

49:24.140 --> 49:25.140
看没

49:25.140 --> 49:28.140
那11位的二斤制可以表示多少

49:28.140 --> 49:30.140
11位的二斤制

49:30.140 --> 49:31.140
可以表示多少

49:31.140 --> 49:33.140
是不是二的11次房

49:33.140 --> 49:35.140
可以表示这么多个数字

49:35.140 --> 49:37.140
那么它的最大数字多少呢

49:37.140 --> 49:38.140
这个算出来

49:38.140 --> 49:40.140
你可以用计算器算一下

49:40.140 --> 49:43.140
二的11次房

49:43.140 --> 49:46.140
算出来2048个

49:46.140 --> 49:49.140
它算出来是有2048个

49:49.140 --> 49:50.140
2048个

49:50.140 --> 49:51.140
好

49:51.140 --> 49:53.140
那么2048个

49:53.140 --> 49:55.140
它就能够表示这么多数字

49:55.140 --> 49:57.140
能够表示这么多数字

49:57.140 --> 49:58.140
这是这一部分

49:58.140 --> 49:59.140
它能够表示的数字

49:59.140 --> 50:01.140
它可以表示0到2047

50:01.140 --> 50:02.140
对吧

50:02.140 --> 50:03.140
包括0嘛

50:03.140 --> 50:04.140
它表示不到2048

50:04.140 --> 50:05.140
因为它还包括0

50:05.140 --> 50:06.140
对不对

50:06.140 --> 50:07.140
它还一个0

50:07.140 --> 50:10.140
它表示的范围是0到2047

50:10.140 --> 50:12.140
这它表示的范围

50:12.140 --> 50:13.140
它能表示0

50:13.140 --> 50:14.140
全部都是0就是0

50:14.140 --> 50:16.140
全部都是1就是2047

50:16.140 --> 50:19.140
它能表示0到2047

50:19.140 --> 50:21.140
那如何来表示负数呢

50:21.140 --> 50:23.140
它这样子

50:23.140 --> 50:25.140
它规定一个规则

50:25.140 --> 50:26.140
规定一个规则

50:26.140 --> 50:27.140
你把这一块的数字

50:27.140 --> 50:28.140
算出来过后呢

50:28.140 --> 50:30.140
我减去一半

50:30.140 --> 50:32.140
我给你减去一半

50:32.140 --> 50:33.140
一半是多少呢

50:33.140 --> 50:34.140
它这里一半

50:34.140 --> 50:36.140
不是这个数字处理而

50:36.140 --> 50:38.140
它取得是2023

50:38.140 --> 50:40.140
也就是说

50:40.140 --> 50:42.140
这里指数这一部分

50:42.140 --> 50:45.140
它还要减去2023

50:45.140 --> 50:47.140
它减去个2023

50:48.140 --> 50:49.140
来表示

50:49.140 --> 50:50.140
来表示什么呢

50:50.140 --> 50:51.140
来表示的是

50:51.140 --> 50:54.140
如果你这个数字足够小

50:54.140 --> 50:56.140
比方说

50:56.140 --> 50:57.140
1023

50:57.140 --> 50:59.140
如果你这个数字足够小

50:59.140 --> 51:00.140
那你减去1023

51:00.140 --> 51:01.140
是不是就负数了

51:01.140 --> 51:02.140
好

51:02.140 --> 51:04.140
那么你这个数字本身就是1023

51:04.140 --> 51:05.140
比方说

51:05.140 --> 51:06.140
本身就是1023

51:06.140 --> 51:08.140
那么你转换出来

51:08.140 --> 51:09.140
转换出来

51:09.140 --> 51:10.140
是不是就是正数了

51:10.140 --> 51:11.140
正数了

51:11.140 --> 51:12.140
那比方说

51:12.140 --> 51:13.140
我这里写个1

51:13.140 --> 51:15.140
那么这个11位的二净字

51:15.140 --> 51:16.140
这个11位的二净字

51:16.140 --> 51:17.140
来看一下

51:17.140 --> 51:19.140
我们可以用计算器来看一下

51:19.140 --> 51:21.140
计算器里面有个程序员这一块

51:21.140 --> 51:23.140
这个就是二净字

51:23.140 --> 51:24.140
这个就是二净字

51:24.140 --> 51:26.140
我们把粘过来

51:26.140 --> 51:27.140
粘过来

51:27.140 --> 51:29.140
你看实净字

51:29.140 --> 51:31.140
1027

51:31.140 --> 51:33.140
那么这就是

51:33.140 --> 51:36.140
1027

51:36.140 --> 51:37.140
看到没

51:37.140 --> 51:39.140
1027

51:39.140 --> 51:40.140
这样子

51:40.140 --> 51:42.140
它用这种方式来处理

51:42.140 --> 51:43.140
用这种方式来处理

51:43.140 --> 51:44.140
那么这种方式

51:44.140 --> 51:45.140
这个地方

51:45.140 --> 51:47.140
它就既可以表示正数

51:47.140 --> 51:48.140
又可以表示负数了

51:48.140 --> 51:49.140
看到没

51:49.140 --> 51:51.140
它减去一个1023

51:51.140 --> 51:52.140
如果你的数字很小

51:52.140 --> 51:53.140
一减去1023

51:53.140 --> 51:54.140
就是负数了

51:54.140 --> 51:56.140
指数位置就是负数

51:56.140 --> 51:57.140
好好理解一下

51:57.140 --> 51:58.140
就这一块

51:58.140 --> 51:59.140
它为了

51:59.140 --> 52:01.140
它为了处理负数的指数

52:01.140 --> 52:03.140
所以说它做了一个偏一辆

52:03.140 --> 52:04.140
这个偏一辆

52:04.140 --> 52:05.140
刚刚差不多是一半

52:05.140 --> 52:06.140
差不多是一半

52:06.140 --> 52:08.140
1023

52:08.140 --> 52:09.140
好

52:09.140 --> 52:10.140
先把这一块理解清楚

52:10.140 --> 52:11.140
那么这个东西

52:11.140 --> 52:12.140
就相当于是

52:12.140 --> 52:13.140
要减制的

52:13.140 --> 52:14.140
摇点摇摇摇

52:14.140 --> 52:15.140
成义

52:15.140 --> 52:16.140
二的这么多释放

52:16.140 --> 52:17.140
那么当然

52:17.140 --> 52:18.140
你要把这个东西

52:18.140 --> 52:19.140
换算成实减制

52:19.140 --> 52:20.140
你要把这个碗

52:20.140 --> 52:21.140
换算成实减制

52:21.140 --> 52:22.140
那么换算成实减制

52:22.140 --> 52:23.140
我们来换算一下吧

52:23.140 --> 52:25.140
换算成实减制

52:27.140 --> 52:28.140
这里好像

52:28.140 --> 52:29.140
好像不能有小数点

52:29.140 --> 52:30.140
不能有小数点

52:30.140 --> 52:31.140
自己去换算一下

52:31.140 --> 52:32.140
自己去换算一下

52:32.140 --> 52:33.140
就是

52:33.140 --> 52:35.140
1加上多少

52:35.140 --> 52:36.140
2分之1

52:36.140 --> 52:37.140
4分之1

52:37.140 --> 52:38.140
16分之1

52:38.140 --> 52:40.140
然后32分之1

52:40.140 --> 52:41.140
你自己去加一下

52:41.140 --> 52:43.140
然后成一二的这么多释放

52:44.140 --> 52:45.140
好吧

52:46.140 --> 52:47.140
OK

52:47.140 --> 52:49.140
这是它的表示法

52:49.140 --> 52:51.140
我们先这里解释的是啥

52:51.140 --> 52:52.140
这里解释的是

52:52.140 --> 52:53.140
在介事里边

52:53.140 --> 52:55.140
如何来存出一个数字

52:55.140 --> 52:57.140
它一定是分为这三段来存储的

52:57.140 --> 52:59.140
一定是分为三段来存储的

53:00.140 --> 53:01.140
好 接下来

53:01.140 --> 53:02.140
我们再来说

53:02.140 --> 53:04.140
有这么几种特殊情况

53:04.140 --> 53:06.140
这里边还有

53:06.140 --> 53:08.140
还有这么几种特殊情况

53:08.140 --> 53:10.140
第一个叫做符号位

53:10.140 --> 53:12.140
这个叫做指数位

53:12.140 --> 53:14.140
就是叫做指数

53:14.140 --> 53:16.140
就这一部分

53:16.140 --> 53:18.140
这一部分叫做尾数

53:18.140 --> 53:19.140
叫做尾数

53:19.140 --> 53:20.140
尾巴上小数点

53:20.140 --> 53:21.140
后边的东西

53:21.140 --> 53:23.140
有这么几种特殊情况

53:23.140 --> 53:26.450
特殊情况

53:26.450 --> 53:28.450
特殊情况还有特殊处理

53:28.450 --> 53:29.450
第一种情况

53:29.450 --> 53:33.450
就是指数为0

53:34.450 --> 53:35.450
指数

53:35.450 --> 53:37.450
就是这个地方全是0

53:37.450 --> 53:38.450
全是0

53:38.450 --> 53:41.450
同时尾数为0

53:41.450 --> 53:43.450
后边的也全是0

53:43.450 --> 53:44.450
那么这个时候

53:44.450 --> 53:46.450
它就不是按照这种方式来算了

53:46.450 --> 53:47.450
按理说的话

53:47.450 --> 53:48.450
还是按照这个方式来算

53:48.450 --> 53:49.450
1.00000000

53:49.450 --> 53:50.450
乘以2.0次方

53:50.450 --> 53:54.450
0减去-1023次方

53:54.450 --> 53:55.450
按理说

53:55.450 --> 53:56.450
它是用这种方式来算的

53:56.450 --> 53:57.450
按理说

53:57.450 --> 53:58.450
是用这种方式来算的

53:58.450 --> 53:59.450
但是不是的

53:59.450 --> 54:01.450
这种是特殊情况

54:01.450 --> 54:02.450
表示0

54:02.450 --> 54:04.450
表示数字0

54:04.450 --> 54:05.450
这种情况

54:05.450 --> 54:07.450
就直接表示数字0

54:07.450 --> 54:09.450
好 第二个特殊情况

54:09.450 --> 54:11.450
是指数为

54:11.450 --> 54:12.450
为多少呢

54:12.450 --> 54:13.450
2047

54:13.450 --> 54:15.450
因为指数我们刚才说了

54:15.450 --> 54:17.450
它的取值范围是0-2047

54:17.450 --> 54:18.450
0-2047

54:18.450 --> 54:20.450
那么如果你指数真的

54:20.450 --> 54:21.450
取到2047了

54:21.450 --> 54:22.450
就这个地方

54:22.450 --> 54:24.450
你真的取到2047了

54:24.450 --> 54:25.450
OK

54:25.450 --> 54:27.450
尾数

54:27.450 --> 54:30.450
尾数不为0

54:30.450 --> 54:32.450
不为0

54:32.450 --> 54:33.450
不对不对

54:33.450 --> 54:35.450
尾数也为0

54:35.450 --> 54:36.450
尾数为0

54:36.450 --> 54:37.450
这个时候

54:37.450 --> 54:40.450
它用这种方式来表示

54:40.450 --> 54:43.450
正无穷

54:43.450 --> 54:45.450
就指数为这个

54:45.450 --> 54:46.450
尾数为0

54:46.450 --> 54:47.450
那么这个时候

54:47.450 --> 54:50.450
它表示正无穷

54:50.450 --> 54:51.450
那么当然

54:51.450 --> 54:53.450
还有符号

54:53.450 --> 54:55.450
符号为0

54:55.450 --> 54:56.450
指数为2047

54:56.450 --> 54:57.450
就指数为最大值

54:57.450 --> 54:58.450
尾数为0

54:58.450 --> 55:00.450
它用这种特殊的表示法

55:00.450 --> 55:01.450
它在表示正无穷

55:01.450 --> 55:02.450
就是我们那个

55:02.450 --> 55:03.450
特殊的单词

55:03.450 --> 55:04.450
infinity

55:04.450 --> 55:06.450
就是这样的表示的

55:06.450 --> 55:07.450
就这样表示的

55:07.450 --> 55:09.450
具体来说怎么表示的呢

55:09.450 --> 55:10.450
具体来说就这样子

55:10.450 --> 55:11.450
看着

55:11.450 --> 55:12.450
就是前面

55:12.450 --> 55:13.450
符号为0

55:13.450 --> 55:15.450
然后这里全是为1

55:15.450 --> 55:16.450
1234

55:16.450 --> 55:17.450
5678

55:17.450 --> 55:18.450
11

55:18.450 --> 55:19.450
11位

55:19.450 --> 55:20.450
后边全是0

55:20.450 --> 55:22.450
后边全是0

55:22.450 --> 55:23.450
这种方式

55:23.450 --> 55:24.450
来表示

55:24.450 --> 55:25.450
来表示正无穷

55:25.450 --> 55:27.450
这就是infinity

55:27.450 --> 55:29.450
infinity

55:30.450 --> 55:32.450
你看这个意思吧

55:32.450 --> 55:35.450
这就是infinity

55:35.450 --> 55:37.450
表示正无穷

55:37.450 --> 55:38.450
也就是说

55:38.450 --> 55:41.450
如果是一个正常的数字的话

55:41.450 --> 55:43.450
如果是一个正常的数字的话

55:43.450 --> 55:45.450
这个地方是不能全部取一的

55:45.450 --> 55:46.450
是不能全部取一的

55:46.450 --> 55:47.450
这个地方最大的

55:47.450 --> 55:48.450
只能取到这

55:48.450 --> 55:49.450
只能取到这

55:49.450 --> 55:51.450
如果是一个正常的数字的话

55:51.450 --> 55:52.450
这个地方只能取到

55:52.450 --> 55:53.450
相当于是就是

55:53.450 --> 55:55.450
2046

55:55.450 --> 55:56.450
只能取到2046

55:56.450 --> 55:58.450
它不能取到2047

55:58.450 --> 55:59.450
如果取到2047

55:59.450 --> 56:00.450
它就表示特殊值了

56:00.450 --> 56:02.450
它就表示一个特殊值

56:02.450 --> 56:03.450
infinity

56:03.450 --> 56:04.450
好

56:04.450 --> 56:05.450
第三种情况

56:05.450 --> 56:08.450
就是符号为1

56:08.450 --> 56:09.450
就是复数

56:09.450 --> 56:11.450
指数为什么呢

56:11.450 --> 56:12.450
2047

56:12.450 --> 56:15.450
伪数为0

56:15.450 --> 56:17.450
表示复无穷

56:17.450 --> 56:19.450
复无穷

56:19.450 --> 56:20.450
也就是说

56:20.450 --> 56:21.450
复无穷的时候

56:21.450 --> 56:23.450
实际上是这样的表示法

56:23.450 --> 56:24.450
复无穷

56:24.450 --> 56:25.450
它实际上这里是1

56:25.450 --> 56:26.450
其他都没变

56:26.450 --> 56:27.450
后边全是0

56:27.450 --> 56:28.450
伪数全部是0

56:28.450 --> 56:30.450
指数为2047

56:30.450 --> 56:32.450
说明了啥呢

56:32.450 --> 56:34.450
说明了指数为2047的时候

56:34.450 --> 56:36.450
一定是一种特殊情况

56:36.450 --> 56:37.450
一定是一种特殊情况

56:37.450 --> 56:39.450
指数是不能为2047的

56:39.450 --> 56:41.450
2047的话就表示infinity了

56:41.450 --> 56:43.450
无论是正常还是复

56:43.450 --> 56:45.450
还有一种特殊情况

56:45.450 --> 56:48.450
就是指数

56:48.450 --> 56:50.450
不看符号

56:50.450 --> 56:51.450
就不用看符号了

56:51.450 --> 56:53.450
指数为2047

56:53.450 --> 56:56.450
伪数不为0

56:56.450 --> 56:59.450
表示NAN

56:59.450 --> 57:02.450
它用这种方式来表示NAN

57:02.450 --> 57:04.450
只要你指数是2047

57:04.450 --> 57:06.450
只要你指数是2047

57:06.450 --> 57:08.450
伪数哪怕就随便写

57:08.450 --> 57:09.450
不能写3

57:09.450 --> 57:11.450
二镜子

57:11.450 --> 57:12.450
你伪数随便写

57:12.450 --> 57:16.450
那么表示的是NAN

57:16.450 --> 57:17.450
明白吧

57:17.450 --> 57:20.450
这就是这几个特殊指是怎么来的

57:20.450 --> 57:22.450
它是用这种特殊的表示方式

57:22.450 --> 57:23.450
再一次说明了啥

57:23.450 --> 57:25.450
指数这一块

57:25.450 --> 57:26.450
一个正常的数字

57:26.450 --> 57:28.450
最多能取到2046

57:28.450 --> 57:29.450
它不能取到2047

57:29.450 --> 57:31.450
2047它要么就是NAN

57:31.450 --> 57:33.450
要么就是infinity

57:33.450 --> 57:35.450
应该这意思吧

57:35.450 --> 57:36.450
这就是几种特殊情况

57:36.450 --> 57:38.450
因此我们这里打个重点

57:38.450 --> 57:40.450
但是浙解课的重点

57:40.450 --> 57:41.450
不是我们课程的重点

57:41.450 --> 57:43.450
就是指数部分

57:43.450 --> 57:45.450
一个正常的数字

57:45.450 --> 57:47.450
一个正常的数字

57:47.450 --> 57:49.450
指数部分

57:49.450 --> 57:51.450
最多是什么

57:51.450 --> 57:54.450
最多是2046

57:54.450 --> 57:56.450
最多只能是2046

57:56.450 --> 57:57.450
它不能是2047

57:57.450 --> 57:59.450
2047的话要么表示无穷

57:59.450 --> 58:01.450
要么表示的是NAN

58:01.450 --> 58:03.450
要么表示NAN

58:03.450 --> 58:04.450
好

58:04.450 --> 58:06.450
那么我们来举个例子吧

58:06.450 --> 58:07.450
举个例子

58:07.450 --> 58:09.450
比方说我们看前边

58:09.450 --> 58:12.450
前边让我们刚才的公式说到这

58:12.450 --> 58:14.450
就是指数部分

58:14.450 --> 58:16.450
这里是二的多少尺方

58:16.450 --> 58:17.450
二的多少尺方

58:17.450 --> 58:21.450
指数部分最多能够取到2046

58:21.450 --> 58:22.450
2046

58:22.450 --> 58:24.450
那么2046减去1023

58:24.450 --> 58:25.450
是不是

58:25.450 --> 58:26.450
刚好减一半

58:26.450 --> 58:27.450
刚好减一半

58:27.450 --> 58:29.450
那么就是1023

58:29.450 --> 58:31.450
2046减1023

58:31.450 --> 58:32.450
就是1023

58:32.450 --> 58:33.450
好

58:33.450 --> 58:35.450
因为指数部分最多取到2046吧

58:35.450 --> 58:36.450
对吧

58:36.450 --> 58:37.450
好

58:37.450 --> 58:39.450
那么我们在网页里边去看一下

58:39.450 --> 58:40.450
比方说这里

58:40.450 --> 58:43.450
我们写上一个二的

58:43.450 --> 58:45.450
1023尺方

58:45.450 --> 58:46.450
你看

58:46.450 --> 58:47.450
是不是可以正常表示

58:47.450 --> 58:48.450
对吧

58:48.450 --> 58:49.450
正常表示

58:49.450 --> 58:50.450
它这种由于数字太大了

58:50.450 --> 58:51.450
由于数字太大

58:51.450 --> 58:52.450
它用的是科学表示法

58:52.450 --> 58:54.450
那么这里的科学表示法

58:54.450 --> 58:55.450
它这个底数

58:55.450 --> 58:56.450
底数是10

58:56.450 --> 58:58.450
就是8.98

58:58.450 --> 59:01.450
然后乘以10的307尺方

59:01.450 --> 59:03.450
它把它变成十净之了

59:03.450 --> 59:04.450
把它变成十净之了

59:04.450 --> 59:05.450
好

59:05.450 --> 59:06.450
然后我们再看

59:06.450 --> 59:08.450
二的1024

59:08.450 --> 59:10.450
你看是不是Infinity

59:10.450 --> 59:11.450
对吧

59:11.450 --> 59:12.450
因为它的指数

59:12.450 --> 59:13.450
二的指数

59:13.450 --> 59:14.450
它只能取到2023

59:14.450 --> 59:15.450
取不到1024了

59:15.450 --> 59:16.450
取到1024

59:16.450 --> 59:18.450
它的指数已经撑满了

59:18.450 --> 59:20.450
指数部分撑满了过后

59:20.450 --> 59:21.450
它就是Infinity的

59:21.450 --> 59:23.450
它会自动的把尾数给你清空

59:23.450 --> 59:25.450
自动的把尾数给你清空

59:25.450 --> 59:26.450
清空过后

59:26.450 --> 59:28.450
就是Infinity

59:28.450 --> 59:29.450
有些同学想到

59:29.450 --> 59:30.450
那我能不能这样子

59:30.450 --> 59:33.450
这样子乘以1024

59:33.450 --> 59:35.450
是不是就是那个啥

59:35.450 --> 59:36.450
比方说

59:36.450 --> 59:42.450
1011乘以2.2的1024尺方

59:42.450 --> 59:43.450
那这个东西

59:43.450 --> 59:44.450
应该是NNN

59:44.450 --> 59:46.450
因为它有这个尾数

59:46.450 --> 59:47.450
对吧

59:47.450 --> 59:48.450
而不是的

59:48.450 --> 59:49.450
因为它数字太大过后

59:49.450 --> 59:51.450
它自动把尾数给你清空

59:51.450 --> 59:53.450
当它看到那个

59:53.450 --> 59:54.450
就是指数部分

59:54.450 --> 59:56.450
已经是2018过后

59:56.450 --> 59:57.450
看到指数部分

59:57.450 --> 59:59.450
2047

59:59.450 --> 01:00:00.450
已经看到指数部分

01:00:00.450 --> 01:00:01.450
是2047过后了

01:00:01.450 --> 01:00:03.450
它就直接把尾数给你清空了

01:00:03.450 --> 01:00:05.450
变成Infinity

01:00:05.450 --> 01:00:06.450
什么时候是NNN呢

01:00:06.450 --> 01:00:07.450
就当我们有一些

01:00:07.450 --> 01:00:08.450
特殊运算的时候

01:00:08.450 --> 01:00:09.450
算出来

01:00:09.450 --> 01:00:10.450
它不是一个数字

01:00:10.450 --> 01:00:11.450
它算法是有问题的

01:00:11.450 --> 01:00:12.450
比方说

01:00:12.450 --> 01:00:13.450
字不错

01:00:13.450 --> 01:00:14.450
ABCA转数字

01:00:14.450 --> 01:00:15.450
转不出来

01:00:15.450 --> 01:00:16.450
那么这个时候

01:00:16.450 --> 01:00:17.450
它会用一种特殊的表示法

01:00:17.450 --> 01:00:19.450
来表示NNN

01:00:19.450 --> 01:00:20.450
就用这种表示法

01:00:20.450 --> 01:00:21.450
来表示NNN

01:00:21.450 --> 01:00:22.450
NNN

01:00:22.450 --> 01:00:24.450
我们自己是算不出来的

01:00:24.450 --> 01:00:25.450
OK

01:00:25.450 --> 01:00:26.450
这就是关于

01:00:26.450 --> 01:00:27.450
它是怎么回事

01:00:27.450 --> 01:00:28.450
它这个存放方式

01:00:28.450 --> 01:00:30.450
是怎么回事

01:00:30.450 --> 01:00:31.450
OK

01:00:31.450 --> 01:00:33.450
先把这一块搞清楚

01:00:33.450 --> 01:00:35.450
搞清楚了之后

01:00:35.450 --> 01:00:36.450
咱们再来看

01:00:36.450 --> 01:00:38.450
这么一些问题

01:00:38.450 --> 01:00:40.450
就是

01:00:40.450 --> 01:00:42.450
最大数字

01:00:42.450 --> 01:00:44.450
能表示的

01:00:44.450 --> 01:00:46.450
能表示的最大数字

01:00:48.450 --> 01:00:50.450
能表示的最大数字

01:00:50.450 --> 01:00:51.450
是什么呢

01:00:51.450 --> 01:00:52.450
你想想是啥呢

01:00:52.450 --> 01:00:53.450
想想是啥

01:00:53.450 --> 01:00:55.450
能表示的最大数字

01:00:55.450 --> 01:00:57.450
是不是这个数字

01:00:57.450 --> 01:00:58.450
看一下

01:00:58.450 --> 01:01:00.450
就看二进字吧

01:01:00.450 --> 01:01:01.450
最大数字

01:01:01.450 --> 01:01:02.450
符号为为0

01:01:02.450 --> 01:01:03.450
对吧

01:01:03.450 --> 01:01:04.450
符号为为0

01:01:04.450 --> 01:01:05.450
然后呢

01:01:05.450 --> 01:01:06.450
指数部分

01:01:06.450 --> 01:01:07.450
是不是

01:01:07.450 --> 01:01:08.450
全是

01:01:08.450 --> 01:01:10.450
111111

01:01:10.450 --> 01:01:11.450
几个1

01:01:11.450 --> 01:01:15.450
12345678910

01:01:15.450 --> 01:01:17.450
注意这个地方是0

01:01:17.450 --> 01:01:18.450
注意啊

01:01:18.450 --> 01:01:19.450
这个地方是0

01:01:19.450 --> 01:01:20.450
这个地方是0

01:01:20.450 --> 01:01:22.450
因为它不能取到

01:01:22.450 --> 01:01:23.450
2047

01:01:23.450 --> 01:01:24.450
不能取到2047

01:01:24.450 --> 01:01:26.450
最多只能取到2046

01:01:26.450 --> 01:01:27.450
这个地方是0

01:01:27.450 --> 01:01:28.450
不能是1

01:01:28.450 --> 01:01:30.450
11的话就是无穷了

01:01:30.450 --> 01:01:31.450
然后呢

01:01:31.450 --> 01:01:33.450
在后边的指数是啥呢

01:01:33.450 --> 01:01:34.450
后边的尾数是啥呢

01:01:34.450 --> 01:01:35.450
是不是全是1

01:01:35.450 --> 01:01:36.450
对吧

01:01:36.450 --> 01:01:37.450
这一数全是最大的

01:01:37.450 --> 01:01:38.450
就是全是1

01:01:38.450 --> 01:01:40.450
这就是能表示的最大数字

01:01:40.450 --> 01:01:41.450
那么这个最大数字

01:01:41.450 --> 01:01:42.450
算出来是多少呢

01:01:42.450 --> 01:01:43.450
算出来是多少呢

01:01:43.450 --> 01:01:44.450
我们来看一下

01:01:44.450 --> 01:01:46.450
这个最大数字算出来

01:01:46.450 --> 01:01:47.450
那么按照这个公式

01:01:47.450 --> 01:01:48.450
前面这个公式

01:01:50.450 --> 01:01:51.450
按照这个公式

01:01:51.450 --> 01:01:52.450
相当于是多少呢

01:01:52.450 --> 01:01:54.450
相当于是1.1111

01:01:54.450 --> 01:01:55.450
是不是1只写

01:01:55.450 --> 01:01:56.450
对吧

01:01:56.450 --> 01:01:57.450
1只写

01:01:57.450 --> 01:01:58.450
省略了

01:01:58.450 --> 01:01:59.450
然后乘以2的

01:01:59.450 --> 01:02:00.450
多少次方呢

01:02:00.450 --> 01:02:01.450
2的

01:02:01.450 --> 01:02:03.450
2046

01:02:03.450 --> 01:02:04.450
这是它最大的指

01:02:04.450 --> 01:02:05.450
乘以2的2046

01:02:05.450 --> 01:02:06.450
减去1023

01:02:06.450 --> 01:02:07.450
是不是

01:02:07.450 --> 01:02:11.450
2乘以1023

01:02:11.450 --> 01:02:12.450
对吧

01:02:12.450 --> 01:02:13.450
是这个意思吧

01:02:13.450 --> 01:02:16.450
乘以2的1023

01:02:16.450 --> 01:02:17.450
1023次方

01:02:17.450 --> 01:02:18.450
就变成这个样子

01:02:18.450 --> 01:02:19.450
好

01:02:19.450 --> 01:02:20.450
那么这个东西

01:02:20.450 --> 01:02:21.450
算出来是多少呢

01:02:21.450 --> 01:02:22.450
算出来是多少呢

01:02:22.450 --> 01:02:23.450
算出来呢

01:02:23.450 --> 01:02:24.450
它是这个字

01:02:24.450 --> 01:02:25.450
算出来

01:02:25.450 --> 01:02:26.450
我们可以在number里边

01:02:26.450 --> 01:02:27.450
看一下

01:02:27.450 --> 01:02:30.450
number里边这个max value

01:02:30.450 --> 01:02:32.450
number里边有个属性

01:02:32.450 --> 01:02:33.450
叫做max value

01:02:33.450 --> 01:02:34.450
算出来是这个字

01:02:34.450 --> 01:02:35.450
1.79

01:02:35.450 --> 01:02:36.450
1.79

01:02:36.450 --> 01:02:37.450
多少多少

01:02:37.450 --> 01:02:39.450
然后308次方

01:02:39.450 --> 01:02:41.450
10到308次方

01:02:42.450 --> 01:02:43.450
好

01:02:43.450 --> 01:02:44.450
那么这个值

01:02:44.450 --> 01:02:45.450
可不可以加呢

01:02:45.450 --> 01:02:46.450
可不可以往上加呢

01:02:46.450 --> 01:02:47.450
比方说

01:02:47.450 --> 01:02:48.450
我们这个值

01:02:48.450 --> 01:02:49.450
给它乘以一个10

01:02:49.450 --> 01:02:51.450
就引肥了体了

01:02:51.450 --> 01:02:52.450
对吧

01:02:52.450 --> 01:02:53.450
引肥了体了

01:02:53.450 --> 01:02:54.450
你给它加了一个指数

01:02:54.450 --> 01:02:55.450
是不是指数就满了

01:02:55.450 --> 01:02:56.450
指数满了过后

01:02:56.450 --> 01:02:57.450
尾数清空

01:02:57.450 --> 01:02:58.450
变成无穷大

01:02:58.450 --> 01:02:59.450
无穷大

01:02:59.450 --> 01:03:00.450
就这么个意思

01:03:00.450 --> 01:03:01.450
这已经是它人表示的

01:03:01.450 --> 01:03:02.450
最大值的

01:03:02.450 --> 01:03:03.450
加一呢

01:03:03.450 --> 01:03:04.450
你加一有用吗

01:03:04.450 --> 01:03:05.450
你看一下有用吗

01:03:05.450 --> 01:03:06.450
它有效位数

01:03:06.450 --> 01:03:07.450
尾数的有效位数

01:03:07.450 --> 01:03:08.450
已经撑满了

01:03:08.450 --> 01:03:10.450
尾数的有效位数

01:03:10.450 --> 01:03:11.450
已经撑满了

01:03:11.450 --> 01:03:12.450
你没法再往上加了

01:03:12.450 --> 01:03:13.450
加了过后

01:03:13.450 --> 01:03:14.450
它后边的数字

01:03:14.450 --> 01:03:15.450
就直接给你抛弃掉了

01:03:15.450 --> 01:03:16.450
没法加了

01:03:16.450 --> 01:03:17.450
它已经是最大的数字了

01:03:17.450 --> 01:03:18.450
已经是最大的数字了

01:03:18.450 --> 01:03:19.450
然后加100

01:03:19.450 --> 01:03:20.450
加1000

01:03:20.450 --> 01:03:21.450
1万

01:03:21.450 --> 01:03:22.450
有用吗

01:03:22.450 --> 01:03:23.450
没用

01:03:23.450 --> 01:03:24.450
没用

01:03:24.450 --> 01:03:25.450
那么这个东西乘以2呢

01:03:25.450 --> 01:03:26.450
看能不能乘以2

01:03:26.450 --> 01:03:27.450
能不能乘以2

01:03:27.450 --> 01:03:28.450
所以也是无穷了

01:03:28.450 --> 01:03:30.450
也是无穷

01:03:30.450 --> 01:03:31.450
对吧

01:03:31.450 --> 01:03:32.450
能表示的最大数字

01:03:32.450 --> 01:03:33.450
就这么多了

01:03:33.450 --> 01:03:35.450
当然我们平时写程序

01:03:35.450 --> 01:03:37.450
哪会遇到这么大的数字

01:03:37.450 --> 01:03:39.450
这不是天文数字的

01:03:39.450 --> 01:03:40.450
这天文数字太恐怖了

01:03:40.450 --> 01:03:43.450
已经不能是天文数字了

01:03:43.450 --> 01:03:44.450
我们平时写程序的话

01:03:44.450 --> 01:03:46.450
不会遇到这么大的数字

01:03:46.450 --> 01:03:48.450
能表示的最大数字

01:03:48.450 --> 01:03:49.450
同样的呢

01:03:49.450 --> 01:03:51.450
能表示的最小数字

01:03:51.450 --> 01:03:52.450
是不是一样的

01:03:52.450 --> 01:03:53.450
我们就直接说了

01:03:53.450 --> 01:03:54.450
能表示的最小数字

01:03:54.450 --> 01:03:56.450
就是通过这个mean value

01:03:56.450 --> 01:03:57.450
mean value

01:03:57.450 --> 01:03:59.450
是5亿

01:03:59.450 --> 01:04:02.450
就是5乘以10的

01:04:02.450 --> 01:04:04.450
指的是最小整数

01:04:04.450 --> 01:04:05.450
指的是最小整数

01:04:05.450 --> 01:04:10.450
5乘以10的负的324尺方

01:04:10.450 --> 01:04:13.450
5乘以10的负的324尺方

01:04:13.450 --> 01:04:17.450
保持着最小整数

01:04:17.450 --> 01:04:18.450
OK

01:04:18.450 --> 01:04:21.450
这是能够表示的最大数字

01:04:21.450 --> 01:04:22.450
好

01:04:22.450 --> 01:04:23.450
然后再看

01:04:23.450 --> 01:04:28.450
能表示的最大的安全数字

01:04:28.450 --> 01:04:30.450
什么叫安全数字

01:04:30.450 --> 01:04:32.450
安全数字

01:04:32.450 --> 01:04:35.450
就是数字

01:04:35.450 --> 01:04:37.450
应该说什么意思呢

01:04:37.450 --> 01:04:41.450
从1开始到该数字

01:04:41.450 --> 01:04:45.450
均是连续的整数

01:04:45.450 --> 01:04:47.450
都是连续的整数

01:04:47.450 --> 01:04:48.450
最大的安全整数

01:04:48.450 --> 01:04:50.450
应该说安全整数

01:04:50.450 --> 01:04:52.450
从1开始到这个数字

01:04:52.450 --> 01:04:54.450
可以一直数到这个数字

01:04:54.450 --> 01:04:55.450
是连续的

01:04:55.450 --> 01:05:00.450
并且该数字的下一个数字

01:05:00.450 --> 01:05:04.450
下一个整数是存在的

01:05:04.450 --> 01:05:08.450
这才叫做安全数字

01:05:08.450 --> 01:05:11.450
比方说一二三四五六七八九

01:05:11.450 --> 01:05:12.450
九是个安全数字

01:05:12.450 --> 01:05:13.450
那么就意味着

01:05:13.450 --> 01:05:15.450
一可以数到九

01:05:15.450 --> 01:05:17.450
九的下一个十是存在的

01:05:17.450 --> 01:05:19.450
如果九的下一个不是十

01:05:19.450 --> 01:05:21.450
直接跳过十变成十一了

01:05:21.450 --> 01:05:23.450
那么九就不是一个安全数字

01:05:23.450 --> 01:05:24.450
那就是八

01:05:24.450 --> 01:05:25.450
八才是安全数字

01:05:25.450 --> 01:05:27.450
明白这个意思吧

01:05:27.450 --> 01:05:29.450
那么在这种表示法里边

01:05:29.450 --> 01:05:33.450
能够表示的最大的安全整数是啥呢

01:05:33.450 --> 01:05:36.450
能够表示的最大的安全整数是啥呢

01:05:36.450 --> 01:05:40.450
那么我们就可以这样子想

01:05:40.450 --> 01:05:42.450
你看着

01:05:42.450 --> 01:05:44.450
第一个符号位是零

01:05:44.450 --> 01:05:46.450
中间那个指数位

01:05:46.450 --> 01:05:48.450
我们先不写指数位

01:05:48.450 --> 01:05:50.450
尾数给它写满

01:05:50.450 --> 01:05:51.450
尾数给它写满

01:05:52.450 --> 01:05:54.450
那么这个东西出来的结果是啥呢

01:05:54.450 --> 01:05:55.450
出来的结果是不是

01:05:55.450 --> 01:05:57.450
就这样子

01:05:57.450 --> 01:05:59.450
出来的结果

01:05:59.450 --> 01:06:00.450
是啥呢

01:06:00.450 --> 01:06:03.450
就是这里是

01:06:03.450 --> 01:06:05.450
一的多少多少多少

01:06:05.450 --> 01:06:06.450
对吧

01:06:06.450 --> 01:06:07.450
一点多少多少多少

01:06:07.450 --> 01:06:10.450
然后乘以二的多少次方

01:06:10.450 --> 01:06:11.450
对吧 多少次方

01:06:11.450 --> 01:06:13.450
乘以一个二的多少次方

01:06:13.450 --> 01:06:16.450
那么关键取决于这个指数

01:06:16.450 --> 01:06:18.450
指数是多少

01:06:18.450 --> 01:06:20.450
那么这个指数的取决力看一下

01:06:20.450 --> 01:06:21.450
后边有多少位

01:06:21.450 --> 01:06:23.450
是不是52位

01:06:23.450 --> 01:06:25.450
是不是52位

01:06:25.450 --> 01:06:26.450
是不是52位吧

01:06:26.450 --> 01:06:27.450
要好好看一下

01:06:27.450 --> 01:06:29.450
后边是不是全是52位

01:06:29.450 --> 01:06:30.450
对不对

01:06:30.450 --> 01:06:31.450
全是52位

01:06:31.450 --> 01:06:33.450
好 那么这个地方呢

01:06:33.450 --> 01:06:35.450
我们只要是二的52次方

01:06:35.450 --> 01:06:37.450
是不是就把小数点去了

01:06:37.450 --> 01:06:39.450
就相当于是把小数点去了

01:06:39.450 --> 01:06:41.450
乘以二的52次方

01:06:41.450 --> 01:06:43.450
就相当于是把这个小数点去了

01:06:43.450 --> 01:06:44.450
你看这个意思吧

01:06:44.450 --> 01:06:46.450
你看一下实境字

01:06:46.450 --> 01:06:47.450
你看实境字

01:06:47.450 --> 01:06:49.450
1.3

01:06:49.450 --> 01:06:53.450
如果乘以10的1次方

01:06:53.450 --> 01:06:55.450
乘以10的1次方

01:06:55.450 --> 01:06:57.450
那么是不是把这个小数点去了

01:06:57.450 --> 01:06:58.450
因为小数点后面只有一位

01:06:58.450 --> 01:07:00.450
如果是1.333

01:07:00.450 --> 01:07:01.450
4位3呢

01:07:01.450 --> 01:07:03.450
我们乘以10的4次方

01:07:03.450 --> 01:07:04.450
是不是就把小数点去了

01:07:04.450 --> 01:07:06.450
那这里是二进字

01:07:06.450 --> 01:07:07.450
二进字的话

01:07:07.450 --> 01:07:08.450
乘以二的多少次方就行了

01:07:08.450 --> 01:07:10.450
乘以二的多少次方

01:07:10.450 --> 01:07:12.450
就把这个小数点去掉了

01:07:12.450 --> 01:07:14.450
那么这个东西就相当于是啥呢

01:07:14.450 --> 01:07:16.450
相当于是

01:07:16.450 --> 01:07:17.450
那么这里就是

01:07:17.450 --> 01:07:18.450
这里一定要取一个字

01:07:18.450 --> 01:07:19.450
让它算出来

01:07:19.450 --> 01:07:20.450
刚好等于52

01:07:20.450 --> 01:07:22.450
就可以把小数点去掉

01:07:22.450 --> 01:07:23.450
那么就是整数了

01:07:23.450 --> 01:07:24.450
整数

01:07:24.450 --> 01:07:25.450
这是最大的整数了

01:07:25.450 --> 01:07:27.450
好最大的整数是多少呢

01:07:27.450 --> 01:07:28.450
最大的整数是

01:07:28.450 --> 01:07:30.450
二的多少次方

01:07:30.450 --> 01:07:32.450
50

01:07:32.450 --> 01:07:33.450
就是这个

01:07:33.450 --> 01:07:34.450
就是把小数点去掉

01:07:34.450 --> 01:07:36.450
就是把小数点去掉

01:07:36.450 --> 01:07:38.450
小数点一去掉的话

01:07:38.450 --> 01:07:39.450
有多少位1

01:07:39.450 --> 01:07:41.450
看一下有多少个1

01:07:41.450 --> 01:07:42.450
多少个1

01:07:42.450 --> 01:07:43.450
是不是有53个1

01:07:43.450 --> 01:07:44.450
看一下刚才

01:07:44.450 --> 01:07:46.450
小数点后边有52个1

01:07:46.450 --> 01:07:48.450
现在把小数点去掉

01:07:48.450 --> 01:07:50.450
是不是53个1

01:07:50.450 --> 01:07:52.450
53个1

01:07:52.450 --> 01:07:54.450
相当于啥

01:07:54.450 --> 01:07:56.450
相当于啥

01:07:56.450 --> 01:07:57.450
来吧

01:07:57.450 --> 01:07:58.450
蒙了

01:07:58.450 --> 01:08:00.450
很多人应该有蒙了

01:08:00.450 --> 01:08:04.850
这里有53个1

01:08:04.850 --> 01:08:06.850
53个1

01:08:06.850 --> 01:08:07.850
53个1

01:08:07.850 --> 01:08:08.850
相当于啥呢

01:08:08.850 --> 01:08:11.850
咱们来看一个十进字的例子

01:08:11.850 --> 01:08:13.850
依旧相当于是十进字的9

01:08:13.850 --> 01:08:14.850
最后一个数字的

01:08:14.850 --> 01:08:15.850
99

01:08:15.850 --> 01:08:17.850
两个9

01:08:17.850 --> 01:08:19.850
相当于是啥呢

01:08:19.850 --> 01:08:22.850
相当于是十的平方减1

01:08:22.850 --> 01:08:24.850
十的二次方减1

01:08:24.850 --> 01:08:25.850
没问题吧

01:08:25.850 --> 01:08:26.850
三个9

01:08:26.850 --> 01:08:28.850
相当于是十的二次方

01:08:28.850 --> 01:08:29.850
三次方减1

01:08:29.850 --> 01:08:31.850
没问题吧

01:08:31.850 --> 01:08:32.850
四个9

01:08:32.850 --> 01:08:35.850
相当于是十的四次方

01:08:35.850 --> 01:08:37.850
十的四次方减1

01:08:37.850 --> 01:08:38.850
减1

01:08:38.850 --> 01:08:40.850
没问题吧

01:08:40.850 --> 01:08:41.850
没问题吧

01:08:41.850 --> 01:08:43.850
那么这里

01:08:43.850 --> 01:08:46.850
二进字里面53个1

01:08:46.850 --> 01:08:49.850
相当于是二的

01:08:49.850 --> 01:08:51.850
五十四次方

01:08:51.850 --> 01:08:53.850
五十三次方减1

01:08:53.850 --> 01:08:54.850
对吧

01:08:54.850 --> 01:08:57.850
二的五十三次方减1

01:08:57.850 --> 01:08:58.850
你看这个意思吧

01:08:58.850 --> 01:09:00.850
二的五十三次方减1

01:09:00.850 --> 01:09:01.850
也就是说这个数字

01:09:01.850 --> 01:09:02.850
就相当于是

01:09:02.850 --> 01:09:04.850
二的五十三次方减1

01:09:04.850 --> 01:09:07.850
它能表示的最大的整数

01:09:07.850 --> 01:09:09.850
最大的整数只能表示到这了

01:09:09.850 --> 01:09:11.850
这数字就有问题了

01:09:11.850 --> 01:09:12.850
就可能会丢失数字了

01:09:12.850 --> 01:09:13.850
因为它的

01:09:13.850 --> 01:09:14.850
后边只有五十二位

01:09:14.850 --> 01:09:16.850
后边只能取五十二位

01:09:16.850 --> 01:09:17.850
后边再加的话

01:09:17.850 --> 01:09:18.850
就会丢失数字了

01:09:18.850 --> 01:09:20.850
就不再是连续的了

01:09:20.850 --> 01:09:21.850
后边可以表示

01:09:21.850 --> 01:09:22.850
因为指数还有那么多

01:09:22.850 --> 01:09:23.850
可以表示

01:09:23.850 --> 01:09:25.850
但是就已经不是连续的了

01:09:25.850 --> 01:09:27.850
它最大的数字

01:09:27.850 --> 01:09:30.850
就只能是二的五十三次方减1

01:09:30.850 --> 01:09:31.850
咱们来算一下

01:09:31.850 --> 01:09:33.850
这个数字到底是多少

01:09:33.850 --> 01:09:34.850
这里呢

01:09:34.850 --> 01:09:36.850
二的

01:09:36.850 --> 01:09:38.850
五十三次方

01:09:38.850 --> 01:09:41.850
然后减去1

01:09:41.850 --> 01:09:42.850
就这个数字

01:09:42.850 --> 01:09:44.850
把它复制一下

01:09:44.850 --> 01:09:45.850
到浏览器里边来

01:09:45.850 --> 01:09:46.850
粘贴过来

01:09:46.850 --> 01:09:47.850
你看这个数字

01:09:47.850 --> 01:09:49.850
就是它本能表示的最大的整数

01:09:49.850 --> 01:09:51.850
就是安全整数

01:09:51.850 --> 01:09:52.850
你看这个数字

01:09:52.850 --> 01:09:54.850
下一位正常的

01:09:54.850 --> 01:09:55.850
下一位是正常的

01:09:55.850 --> 01:09:56.850
为什么下一位是可以正常的呢

01:09:56.850 --> 01:09:58.850
下一位就相当于是啥呢

01:09:58.850 --> 01:10:00.850
下一位的话就相当于是

01:10:00.850 --> 01:10:02.850
下一位

01:10:02.850 --> 01:10:04.850
就相当于是

01:10:04.850 --> 01:10:06.850
二的

01:10:06.850 --> 01:10:07.850
我写错了

01:10:07.850 --> 01:10:08.850
不是成义五十三

01:10:08.850 --> 01:10:10.850
五十三次方

01:10:10.850 --> 01:10:12.850
二的五十四次方

01:10:12.850 --> 01:10:15.850
下一位就是相当于是

01:10:15.850 --> 01:10:17.850
减1

01:10:17.850 --> 01:10:18.850
下一位就是相当于是

01:10:18.850 --> 01:10:20.850
二的五十三次方

01:10:20.850 --> 01:10:21.850
二的五十三次方

01:10:21.850 --> 01:10:22.850
那么就相当于是啥呢

01:10:22.850 --> 01:10:24.850
相当于是这个

01:10:24.850 --> 01:10:25.850
相当于是这样的写法

01:10:25.850 --> 01:10:26.850
零

01:10:26.850 --> 01:10:27.850
那么这边表示

01:10:27.850 --> 01:10:28.850
这边要能够减出来过后

01:10:28.850 --> 01:10:30.850
能够表示五十三

01:10:30.850 --> 01:10:32.850
就是多少呢

01:10:32.850 --> 01:10:34.850
五十三

01:10:34.850 --> 01:10:35.850
这边全部写零

01:10:35.850 --> 01:10:36.850
全部写零

01:10:36.850 --> 01:10:37.850
就是下一位

01:10:37.850 --> 01:10:38.850
但是再下一位

01:10:38.850 --> 01:10:39.850
要出问题了

01:10:39.850 --> 01:10:40.850
再下一位就要出问题了

01:10:40.850 --> 01:10:41.850
因为再下一位的话

01:10:41.850 --> 01:10:43.850
就是伪术就不够了

01:10:43.850 --> 01:10:44.850
伪术就要出问题了

01:10:44.850 --> 01:10:46.850
所以说如果再下一位的话

01:10:46.850 --> 01:10:47.850
我们加二

01:10:47.850 --> 01:10:48.850
你看

01:10:48.850 --> 01:10:50.850
加二的话是不是出了问题

01:10:50.850 --> 01:10:51.850
对吧 就出了问题

01:10:51.850 --> 01:10:53.850
这就是最大的

01:10:53.850 --> 01:10:54.850
有效整数

01:10:54.850 --> 01:10:55.850
安全整数

01:10:55.850 --> 01:10:56.850
我们也可以通过

01:10:56.850 --> 01:10:57.850
number

01:10:57.850 --> 01:10:58.850
他的max

01:10:58.850 --> 01:10:59.850
safe integer

01:10:59.850 --> 01:11:00.850
可以看到

01:11:00.850 --> 01:11:01.850
他的最大整数

01:11:01.850 --> 01:11:02.850
就是这个

01:11:02.850 --> 01:11:03.850
看没

01:11:03.850 --> 01:11:04.850
就这个

01:11:05.850 --> 01:11:06.850
这就是他为什么

01:11:06.850 --> 01:11:07.850
他的最大安全整数

01:11:07.850 --> 01:11:08.850
只能是这么多

01:11:08.850 --> 01:11:09.850
只能这么多

01:11:09.850 --> 01:11:12.160
好了

01:11:12.160 --> 01:11:14.160
我就解释得差不多了

01:11:14.160 --> 01:11:15.160
就解释得差不多了

01:11:16.160 --> 01:11:17.160
我们来看一下

01:11:19.160 --> 01:11:20.160
看问题解答完了没有

01:11:22.160 --> 01:11:23.160
为什么整数运算

01:11:23.160 --> 01:11:24.160
不是进去的呢

01:11:24.160 --> 01:11:26.160
当数字足够大的时候

01:11:26.160 --> 01:11:28.160
它的精度已经不够了

01:11:28.160 --> 01:11:29.160
它的伪术

01:11:29.160 --> 01:11:30.160
伪术已经不够了

01:11:30.160 --> 01:11:31.160
伪术不够了

01:11:31.160 --> 01:11:32.160
过后了

01:11:32.160 --> 01:11:34.160
你再往上去

01:11:34.160 --> 01:11:35.160
进行运算的时候

01:11:35.160 --> 01:11:36.160
就要出问题了

01:11:36.160 --> 01:11:37.160
它指数还够

01:11:37.160 --> 01:11:39.160
但是伪术已经不够了

01:11:39.160 --> 01:11:40.160
所以说表示整数

01:11:40.160 --> 01:11:42.160
一共就只能表示这么多位

01:11:42.160 --> 01:11:44.160
一共就那么16位

01:11:44.160 --> 01:11:45.160
再多的话就不行了

01:11:45.160 --> 01:11:46.160
再多就不行了

01:11:47.160 --> 01:11:49.160
然后就没啥问题了

01:11:49.160 --> 01:11:50.160
没啥问题了

01:11:51.160 --> 01:11:52.160
好 那么这就是

01:11:52.160 --> 01:11:54.160
关于计算机里边

01:11:54.160 --> 01:11:56.160
数字它的一些

01:11:57.160 --> 01:11:58.160
这些特点

01:11:59.160 --> 01:12:01.160
肯定很运

01:12:01.160 --> 01:12:02.160
这个没什么说的

01:12:02.160 --> 01:12:03.160
肯定很运

01:12:03.160 --> 01:12:04.160
没关系

01:12:04.160 --> 01:12:06.160
你了解了解吧

01:12:06.160 --> 01:12:07.160
这个东西面试体

01:12:07.160 --> 01:12:08.160
我可以告诉你

01:12:08.160 --> 01:12:09.160
保证不会遇到

01:12:09.160 --> 01:12:11.160
保证里面试体不会遇到

01:12:11.160 --> 01:12:12.160
你了解了解就行了

01:12:12.160 --> 01:12:14.160
知道有这么一块知识

01:12:14.160 --> 01:12:15.160
可以出去吹吹牛

01:12:15.160 --> 01:12:17.160
因为这一般的话

01:12:17.160 --> 01:12:18.160
不要说前端开发者了

01:12:18.160 --> 01:12:19.160
后端开发者这一块

01:12:19.160 --> 01:12:21.160
好多开发者都没有理解清楚

01:12:22.160 --> 01:12:23.160
了解就行了

01:12:23.160 --> 01:12:25.160
其实我还有一些东西都没讲

01:12:25.160 --> 01:12:26.160
还什么不骂烦

01:12:26.160 --> 01:12:27.160
因为我们在这个

01:12:27.160 --> 01:12:29.160
借识数字存出这一块

01:12:29.160 --> 01:12:30.160
它没有用不骂烦

01:12:30.160 --> 01:12:33.160
所以说我这一块也没有必要讲了

01:12:33.160 --> 01:12:34.160
可能在微运算的时候

01:12:34.160 --> 01:12:36.160
要稍微提一下

01:12:38.160 --> 01:12:39.160
这是关于数字的存出

01:12:39.160 --> 01:12:40.160
希望我这一块

01:12:40.160 --> 01:12:43.160
没有打击大家的学习热情

01:12:44.160 --> 01:12:45.160
如果你觉得这一块很难

01:12:45.160 --> 01:12:46.160
直接扔掉就完事了

01:12:46.160 --> 01:12:48.160
你把这个问题记住就行了

01:12:48.160 --> 01:12:50.160
这些问题的解答就记住就行了

01:12:50.160 --> 01:12:51.160
其他的不用管

01:12:51.160 --> 01:12:52.160
如果你想知道原因的话

01:12:52.160 --> 01:12:54.160
就听一下后边的东西

01:12:55.160 --> 01:12:57.160
因为这一块毕竟是扩展知识

01:12:58.160 --> 01:13:00.160
那么能听到现在的同学

01:13:00.160 --> 01:13:01.160
真的不简单

01:13:01.160 --> 01:13:02.160
很厉害

01:13:03.160 --> 01:13:04.160
给大家点个赞

01:13:04.160 --> 01:13:05.160
好了这一刻到这了

01:13:05.160 --> 01:13:06.160
拜拜

