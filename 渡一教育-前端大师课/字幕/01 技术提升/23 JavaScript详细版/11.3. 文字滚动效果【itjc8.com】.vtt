WEBVTT

00:00.000 --> 00:03.840
文字滚动效果

00:03.840 --> 00:16.340
好 这些课咱们来实现这么一个效果

00:16.340 --> 00:19.540
就是文字滚动效果

00:19.540 --> 00:22.700
这个文字滚动效果一般会出现在一些

00:22.700 --> 00:25.100
游戏里边 特别是一些网页游戏里边

00:25.100 --> 00:26.660
一般是喊个话 对吧

00:26.660 --> 00:29.540
然后会全屏滚动这个文字

00:29.540 --> 00:32.140
这个文字呢 它也有可能会出现在网站里边

00:32.140 --> 00:35.540
就是一些网站的通告 它会在这里出现

00:35.540 --> 00:37.660
它有可能是中向的滚动

00:37.740 --> 00:39.260
也有可能是横向的滚动

00:39.260 --> 00:41.620
那我们这些课就按照这个效果来

00:41.620 --> 00:44.100
做一个中向的滚动

00:44.100 --> 00:47.140
好吧 其实你把中向的滚动做好了之后

00:47.140 --> 00:49.740
横向的滚动是一样的道理

00:49.740 --> 00:51.900
所以说中向的滚动做好就行了

00:51.900 --> 00:53.580
好 首先我们把这个样式写好

00:53.580 --> 00:55.220
还先不考虑怎么去做

00:55.220 --> 00:57.340
因为我们写的 就是有的时候

00:57.340 --> 00:59.420
我们会写写插线 就通用的

00:59.420 --> 01:01.340
整个网站通用的插线

01:01.340 --> 01:03.820
有的时候我们只是写单独的一个页面

01:03.820 --> 01:05.540
效果 练习一下怎么去写

01:05.540 --> 01:07.060
断练一下程序的思路

01:07.060 --> 01:08.180
那么我们这些可能写的

01:08.180 --> 01:09.580
就是一个单独的页面效果

01:09.580 --> 01:10.820
所以说不存在插线

01:10.820 --> 01:12.860
因此我们先不用去考虑什么

01:12.860 --> 01:13.780
介绍怎么写

01:13.780 --> 01:15.420
先把页面的样式给它写出来

01:17.140 --> 01:18.500
这里我们就

01:18.500 --> 01:19.980
诶 是之前的

01:19.980 --> 01:21.180
完了

01:21.180 --> 01:27.140
这里我们建议这么一个页面

01:27.140 --> 01:29.740
这个页面我们首先写上一些元素

01:29.740 --> 01:30.540
一些元素

01:30.540 --> 01:32.340
整个这个块就是个DIV

01:32.340 --> 01:35.260
OK 一个抗天带 一个DIV

01:35.260 --> 01:36.660
我们样式的话

01:36.660 --> 01:38.660
我觉得这里也没多少样式

01:38.660 --> 01:40.420
所以说我把样式的就直接写出来

01:40.420 --> 01:41.700
反正是练习

01:41.700 --> 01:42.820
按理说的话

01:42.820 --> 01:45.420
在一个真正的网站项目里面

01:45.420 --> 01:48.260
你肯定要建立独立的事业写书文件

01:48.260 --> 01:48.460
对吧

01:48.460 --> 01:49.620
但是我们这里是练习

01:49.620 --> 01:51.500
就写出来就得了

01:51.500 --> 01:54.460
给它这个抗天带来设置一个背景颜色

01:54.460 --> 01:55.700
背景颜色

01:55.700 --> 01:57.740
咱们看一下这里的颜色是咋的

01:57.740 --> 01:58.740
这里的颜色

01:58.740 --> 01:59.860
右线查看

01:59.860 --> 02:01.340
看一下这里的颜色

02:01.340 --> 02:03.100
这啥颜色

02:03.100 --> 02:04.260
这个颜色

02:04.260 --> 02:05.060
复制一下

02:05.060 --> 02:08.150
随便吧 这个随便

02:08.150 --> 02:09.510
好 写上背景颜色之后

02:09.510 --> 02:11.510
我们看一下它这里边文字的话

02:11.510 --> 02:12.550
文字就保持黑色

02:12.550 --> 02:14.430
文字就保持黑色

02:14.430 --> 02:16.390
然后它有一个高度

02:16.390 --> 02:17.470
有一个panning 对吧

02:17.470 --> 02:18.550
有一个高度 一个panning

02:18.550 --> 02:19.990
高度 我就复制一下它的

02:19.990 --> 02:21.270
样式其实无所谓

02:21.270 --> 02:22.830
我们重点不再样式

02:22.830 --> 02:24.550
然后复制一下panning

02:24.550 --> 02:27.110
panning的话是多少

02:27.110 --> 02:28.310
panning

02:28.310 --> 02:29.950
panning不是设在这了

02:29.950 --> 02:30.950
panning是设在这了

02:30.950 --> 02:34.390
那行吧 我们的话就设置总panning

02:34.390 --> 02:35.270
设置这个panning

02:35.270 --> 02:36.590
左右为20

02:36.590 --> 02:37.950
然后上下

02:38.030 --> 02:39.790
看一下上下

02:39.790 --> 02:41.110
上下的panning跑哪去了

02:41.110 --> 02:42.870
我看一下

02:42.870 --> 02:44.830
左右为20

02:44.830 --> 02:46.830
上下的话

02:46.830 --> 02:47.830
它用的是弹性盒

02:47.830 --> 02:49.190
它用的是CSS3

02:49.190 --> 02:51.150
而耳耳耳耳TAS

02:51.150 --> 02:52.470
那么咱们不用弹性盒

02:52.470 --> 02:53.670
不用弹性盒

02:53.670 --> 02:55.070
那么上下为10

02:55.070 --> 02:56.670
上下为10 左右为20

02:56.670 --> 02:57.150
行吧

02:57.150 --> 02:59.470
上下为10 左右为20

02:59.470 --> 03:01.070
好 把panning写好

03:01.070 --> 03:01.790
看一下吧

03:01.790 --> 03:04.590
我们边做边看

03:04.590 --> 03:05.590
好 差不多了

03:05.590 --> 03:06.750
这东西就写出来了

03:06.750 --> 03:07.230
对吧

03:07.230 --> 03:08.230
就写出来了

03:08.230 --> 03:09.830
好 然后这里边有两个

03:09.830 --> 03:10.870
有两个DIV

03:10.870 --> 03:11.990
一个是最新战报

03:11.990 --> 03:13.430
另外一个DIV跑到右边去了

03:13.430 --> 03:15.150
对吧

03:15.150 --> 03:16.350
就是两个左浮动

03:16.350 --> 03:17.030
这个很简单

03:17.030 --> 03:18.070
两个左浮动

03:18.070 --> 03:19.510
一个DIV那Left

03:19.510 --> 03:20.710
左浮动

03:20.710 --> 03:22.070
最新就是标题

03:22.070 --> 03:22.950
标题

03:22.950 --> 03:25.470
这里写个最新战报

03:25.470 --> 03:26.390
最新公告

03:26.390 --> 03:27.270
最新公告

03:27.270 --> 03:28.830
我们随便写一个吧

03:28.830 --> 03:30.670
另外一个也是左浮动

03:30.670 --> 03:32.230
反而是具有Left的样子

03:32.230 --> 03:33.310
它都是左浮动的

03:33.310 --> 03:36.030
于是我们这里设置一下Left

03:36.110 --> 03:39.830
然后这里设置Left

03:39.830 --> 03:40.470
就行了

03:40.470 --> 03:41.470
我们看一下

03:41.470 --> 03:42.550
然后它在这里边

03:42.550 --> 03:44.870
我们看一下它这里边

03:44.870 --> 03:46.110
然后离上边有一段距离

03:46.110 --> 03:46.430
对吧

03:46.430 --> 03:47.310
离上边有一段距离

03:47.310 --> 03:48.910
我们设置一下Martin

03:48.910 --> 03:50.470
Martin Top

03:50.470 --> 03:52.510
Top的话是10个相处

03:52.510 --> 03:53.190
哎 不对

03:53.190 --> 03:55.150
不对不对

03:55.150 --> 03:56.510
我们直接设置高度就行了

03:56.510 --> 03:58.150
高度30个相处

03:58.150 --> 03:59.590
高度设置30个相处

03:59.590 --> 04:02.230
然后南亥尘的30个相处

04:02.230 --> 04:04.390
保存 保存看一下

04:04.470 --> 04:06.790
看一下我们这里的样式

04:06.790 --> 04:07.870
这里30个相处

04:07.870 --> 04:10.990
这边也是30个相处

04:10.990 --> 04:12.510
高度30个相处

04:12.510 --> 04:14.310
然后上下为10

04:14.310 --> 04:16.230
好像不太够吧

04:16.230 --> 04:17.630
50个相处

04:17.630 --> 04:19.510
上下为10个相处的话

04:19.510 --> 04:20.830
就是container

04:20.830 --> 04:22.550
上下的panning为10个相处的话

04:22.550 --> 04:23.870
中间就应该是30

04:23.870 --> 04:24.350
中间为什么

04:24.350 --> 04:26.070
哦 明白了明白了

04:26.070 --> 04:27.510
我这里没有设置啥

04:27.510 --> 04:30.430
没有设置Borx Sizing

04:30.430 --> 04:30.590
对吧

04:30.590 --> 04:31.190
Borx Sizing

04:31.190 --> 04:32.230
没有设置这个东西

04:32.230 --> 04:33.430
没有设置这个东西的话

04:33.470 --> 04:34.830
还会导致尺寸增加

04:34.830 --> 04:36.270
会导致尺寸增加

04:36.270 --> 04:37.830
我们这里把这个谁设置上

04:37.830 --> 04:38.430
设置上之后

04:38.430 --> 04:40.670
我们是之后设置的宽高

04:40.670 --> 04:42.030
它指的是包含边框

04:42.030 --> 04:42.910
包含panning

04:42.910 --> 04:45.470
包含那种部分一起的宽高

04:45.470 --> 04:46.910
好 这样子没问题了

04:46.910 --> 04:48.230
好 你看

04:48.230 --> 04:49.910
这样子 对吧

04:49.910 --> 04:51.590
好 这是这个东西

04:51.590 --> 04:52.990
然后中间还有一个

04:52.990 --> 04:53.990
一个竖线

04:53.990 --> 04:54.910
这个竖线

04:54.910 --> 04:56.190
这个竖线的话

04:56.190 --> 04:59.390
我们其实可以用一个尾元素

04:59.390 --> 05:01.030
尾元素选择器来做

05:01.110 --> 05:03.430
就左边这个title

05:03.430 --> 05:05.790
给它加一个尾元素after

05:05.790 --> 05:07.710
after的内容就是一个竖线

05:07.710 --> 05:08.990
就给它用一个文字

05:08.990 --> 05:10.670
当然你用图片也可以

05:10.670 --> 05:12.270
用一个文字给它加一个竖线

05:12.270 --> 05:13.190
看没

05:13.190 --> 05:14.030
加个竖线

05:14.030 --> 05:16.630
这个竖线我们你左边有段距离吧

05:16.630 --> 05:18.310
我们设置一下Martinapt

05:18.310 --> 05:19.230
你左边有段距离

05:19.230 --> 05:21.030
比方说30个像素

05:21.030 --> 05:23.270
保存多了

05:23.270 --> 05:24.830
多了吗

05:24.830 --> 05:25.630
有点多了

05:25.630 --> 05:26.790
有点多了

05:26.790 --> 05:28.550
我们这里呢

05:28.550 --> 05:29.790
看一下

05:29.830 --> 05:33.630
这里的话我们把它设置为20个像素

05:34.830 --> 05:36.190
20个像素差不多

05:36.190 --> 05:36.830
差不多吧

05:36.830 --> 05:37.510
差不多

05:37.510 --> 05:37.950
好

05:37.950 --> 05:39.230
然后这个竖线比较高

05:39.230 --> 05:39.470
对吧

05:39.470 --> 05:39.990
比较高

05:39.990 --> 05:41.510
然后我们给它设置自启大小为

05:41.510 --> 05:42.630
因为我们是用文字做的

05:42.630 --> 05:43.150
对不对

05:43.150 --> 05:43.830
设置自启大小

05:43.830 --> 05:46.910
自启大小的话为30个像素

05:46.910 --> 05:47.430
保存

05:50.110 --> 05:50.590
有点意思了

05:50.590 --> 05:50.910
对吧

05:50.910 --> 05:51.870
有点意思了

05:51.870 --> 05:52.990
这两个地方没对齐

05:52.990 --> 05:53.510
看没

05:53.510 --> 05:54.750
这两个地方没对齐

05:54.750 --> 05:55.350
没对齐的话

05:55.350 --> 05:56.190
我们调整一下

05:56.190 --> 05:58.590
就是杭河的垂直对齐方式

05:58.590 --> 06:00.310
比方调整什么Vertical or Line

06:00.310 --> 06:01.590
把它调成Middle

06:01.590 --> 06:03.190
Middle好像也有点没对齐

06:03.190 --> 06:03.310
对吧

06:03.310 --> 06:05.190
那我们就用像素来调

06:05.190 --> 06:06.630
用像素来调

06:06.630 --> 06:07.830
用像素来调

06:07.830 --> 06:08.750
-5个像素

06:08.750 --> 06:09.550
ok

06:09.550 --> 06:10.630
当然这里

06:10.630 --> 06:12.510
如果你用图片的话

06:12.510 --> 06:13.390
又不一样了

06:13.390 --> 06:14.470
Vertical or Line

06:14.470 --> 06:15.110
-5个像素

06:17.270 --> 06:18.590
总之就把这个东西做好

06:18.590 --> 06:19.150
这个东西做好

06:19.150 --> 06:20.710
这个东西没啥好说的

06:20.710 --> 06:22.070
东西没啥好说的

06:22.070 --> 06:22.830
好

06:22.830 --> 06:23.470
现在差不多了

06:23.470 --> 06:24.030
对吧

06:24.030 --> 06:24.150
好

06:24.150 --> 06:25.470
这个方尺S有点大了

06:25.470 --> 06:26.710
有点大了

06:26.710 --> 06:27.630
方尺S的话

06:28.630 --> 06:29.510
方尺S的话

06:29.510 --> 06:31.230
给它稍微调整一下

06:31.230 --> 06:32.110
稍微小一点

06:32.110 --> 06:33.350
小一点

06:33.350 --> 06:34.150
小点过后

06:34.150 --> 06:36.350
我们调整一下这个地方

06:38.430 --> 06:43.050
调整一下这个地方

06:43.050 --> 06:44.010
-2个像素

06:44.010 --> 06:45.850
-2个像素

06:45.850 --> 06:47.370
方尺S的话是多少

06:47.370 --> 06:49.010
27个像素

06:49.010 --> 06:50.090
稍微调整一下就行了

06:50.090 --> 06:51.530
这个样式不是重点

06:51.530 --> 06:52.890
总之把它做成那个样子

06:52.890 --> 06:54.210
然后有一个颜色

06:54.210 --> 06:55.770
颜色稍微浅一点

06:55.770 --> 06:57.330
Color 灰色

06:57.330 --> 06:58.690
CC

06:58.690 --> 06:59.170
保存

07:00.690 --> 07:01.770
有这么个意识就行了

07:01.770 --> 07:04.410
咱们重点是在后面

07:04.410 --> 07:04.650
好

07:04.650 --> 07:05.890
然后看右边这一块

07:05.890 --> 07:06.810
右边这一块

07:06.810 --> 07:08.250
右边这一块也是个DIV

07:08.250 --> 07:08.850
对吧

07:08.850 --> 07:09.810
也是个DIV

07:09.810 --> 07:11.970
这个DIV它也是左浮动的

07:11.970 --> 07:13.250
自然也是左浮动的

07:13.250 --> 07:13.450
好

07:13.450 --> 07:15.130
然后这个DIV里边有啥呢

07:15.130 --> 07:16.130
就是一个列表

07:16.130 --> 07:16.530
对不对

07:16.530 --> 07:17.650
就是一个列表

07:17.650 --> 07:18.450
一个Ul

07:18.450 --> 07:19.530
然后li

07:19.530 --> 07:20.250
li的话

07:20.250 --> 07:23.410
我们这里边就写这么5个li

07:23.410 --> 07:24.570
写这么5个li

07:24.570 --> 07:26.450
每个li下面有一段文字

07:26.450 --> 07:27.810
这叫做乱数假文

07:27.810 --> 07:29.850
它可以自动帮你生成一些文字

07:29.850 --> 07:31.770
因为我们只是做一些效果测试

07:31.770 --> 07:35.010
所以说不care这些文字到底是啥

07:35.010 --> 07:37.530
我们写这么一个Ulli

07:37.530 --> 07:37.730
好

07:37.730 --> 07:38.970
来调整一下样式

07:38.970 --> 07:41.410
首先这些Ul

07:41.410 --> 07:42.810
有margin

07:42.810 --> 07:43.530
pending

07:43.530 --> 07:44.490
什么这个点

07:44.490 --> 07:46.010
把它去掉

07:46.010 --> 07:47.570
找到怎么找到这个

07:47.570 --> 07:50.050
left下面的Ul

07:50.050 --> 07:51.930
给它设置什么margin

07:51.930 --> 07:53.170
pending

07:53.170 --> 07:55.850
然后设置什么列设style

07:55.850 --> 07:57.650
把设置为浪

07:57.690 --> 07:58.730
保存

07:58.730 --> 07:58.890
好

07:58.890 --> 07:59.890
看一下

07:59.890 --> 08:01.330
现在这个Ul就变这样子了

08:01.330 --> 08:01.970
对吧

08:01.970 --> 08:02.210
好

08:02.210 --> 08:04.010
然后我们离左边有一段距离吧

08:04.010 --> 08:05.930
单独设置一下margin

08:06.570 --> 08:07.570
margin

08:07.570 --> 08:08.570
neft

08:08.570 --> 08:09.530
单独设置一下

08:09.530 --> 08:10.930
为20个相处

08:10.930 --> 08:12.050
保存

08:12.050 --> 08:12.330
好

08:12.330 --> 08:13.050
ok

08:13.050 --> 08:14.090
有了一段距离的

08:14.090 --> 08:14.610
对吧

08:14.610 --> 08:15.690
没问题吧

08:15.690 --> 08:17.210
这一块应该差不多了

08:17.210 --> 08:18.490
应该差不多了

08:18.490 --> 08:18.730
好

08:18.730 --> 08:19.770
然后这是

08:19.770 --> 08:21.450
这个每一个li

08:21.450 --> 08:23.130
我们给它固定一个高度

08:23.130 --> 08:24.890
这个li每个li

08:24.890 --> 08:25.970
给它固定一个高度

08:25.970 --> 08:27.410
因为以后我们要滚动

08:27.450 --> 08:28.850
它高度了必须要固定

08:28.850 --> 08:30.250
以后要算尺寸的

08:30.250 --> 08:31.690
高度了30个相处

08:32.970 --> 08:34.210
保存

08:34.210 --> 08:34.890
差不多了

08:34.890 --> 08:35.850
差不多了

08:35.850 --> 08:36.130
好

08:36.130 --> 08:37.850
那么整个这个Ul

08:37.850 --> 08:38.810
整个这个Ul

08:38.810 --> 08:39.890
也给它设一个高度

08:39.890 --> 08:41.010
30个相处

08:41.010 --> 08:41.770
这样子的好

08:41.770 --> 08:43.170
这样子设置的目的是什么

08:43.170 --> 08:44.610
你看这个Ul

08:44.610 --> 08:46.170
你看这个Ul

08:46.170 --> 08:46.850
目的是什么

08:46.850 --> 08:47.330
目的

08:47.330 --> 08:47.890
这个Ul

08:47.890 --> 08:49.530
整个Ul只有30个相处

08:49.530 --> 08:50.090
那一会儿

08:50.090 --> 08:51.770
艺术部分是不是隐藏掉了

08:51.770 --> 08:53.170
我们把它隐藏掉就完成了

08:53.170 --> 08:54.530
艺术部分把它隐藏掉

08:54.530 --> 08:56.290
你看下面这个li是一次排列的

08:56.290 --> 08:57.370
但是整个Ul

08:57.370 --> 08:59.290
只有30个相处

08:59.290 --> 09:00.210
那么艺术部分

09:00.210 --> 09:01.650
我们就把它隐藏掉

09:01.650 --> 09:02.290
overflow

09:02.290 --> 09:03.010
还等

09:04.210 --> 09:05.810
央视这一块就写的差不多了

09:05.810 --> 09:06.690
就写完了

09:06.690 --> 09:07.610
这里有点不对写

09:07.610 --> 09:07.970
无所谓

09:07.970 --> 09:08.450
无所谓

09:08.450 --> 09:09.770
这央视我们不是重点

09:09.770 --> 09:10.890
不是重点

09:10.890 --> 09:13.210
央视我们应该好好调一下

09:13.210 --> 09:13.690
不是重点

09:13.690 --> 09:14.650
其实这一块的话

09:14.650 --> 09:16.570
应该用个图片比较合适一点

09:16.570 --> 09:17.210
无所谓

09:17.210 --> 09:17.850
就这样吧

09:20.250 --> 09:22.970
那么现在我们要滚动

09:22.970 --> 09:23.690
怎么滚动

09:23.690 --> 09:25.010
就看这一块

09:25.090 --> 09:26.210
它到底怎么滚动了

09:26.210 --> 09:27.730
它是这样子滚动的

09:27.730 --> 09:28.410
这是个Ul

09:28.410 --> 09:28.810
对吧

09:28.810 --> 09:30.290
它下面是不是还有东西

09:30.290 --> 09:30.770
对不对

09:30.770 --> 09:32.250
下面是不是还有东西

09:32.250 --> 09:34.690
那么其实我们设置的是它的啥呢

09:34.690 --> 09:36.170
我们如果这样子来写

09:36.170 --> 09:36.610
out to

09:36.610 --> 09:38.290
把overflow收为out to

09:38.290 --> 09:38.970
那么你会看到

09:38.970 --> 09:40.250
这边是不是滚动条

09:40.250 --> 09:41.050
滚动的时候

09:41.050 --> 09:42.410
实际上是干嘛

09:42.410 --> 09:44.730
实际上就是设置个滚动条的高度

09:44.730 --> 09:45.490
就是设置这个

09:45.490 --> 09:46.770
你看是不是滚动了

09:46.770 --> 09:47.410
手动滚动吧

09:47.410 --> 09:48.650
现在是

09:48.650 --> 09:49.530
是不是滚动了

09:49.530 --> 09:50.090
对不对

09:50.090 --> 09:51.330
再滚动滚动吧

09:51.330 --> 09:52.090
对不对

09:52.090 --> 09:53.730
其实滚动就是这个意思

09:53.770 --> 09:55.170
就是这个意思

09:55.170 --> 09:56.210
你要这个意思吧

09:56.210 --> 09:57.410
我们这里最好了

09:57.410 --> 09:58.290
为了看到你

09:58.290 --> 09:59.090
看到这个顺序

09:59.090 --> 09:59.930
我们这里最好

09:59.930 --> 10:01.210
就这样子写吧

10:01.210 --> 10:01.930
这样子写

10:03.930 --> 10:04.530
2

10:04.530 --> 10:05.290
3

10:05.290 --> 10:06.010
4

10:06.010 --> 10:06.730
5

10:06.730 --> 10:07.170
这样子写

10:07.170 --> 10:08.210
看得清楚一点

10:08.210 --> 10:09.330
这第一个

10:09.330 --> 10:09.810
滚动

10:09.810 --> 10:10.450
第二个

10:10.450 --> 10:11.290
滚动第三个

10:11.290 --> 10:12.890
所以说我们滚动控制的是啥

10:12.890 --> 10:15.730
控制的无非就是这个square top

10:15.730 --> 10:18.370
控制的就是个Ul的square top

10:18.370 --> 10:19.010
对不对

10:19.010 --> 10:19.290
好

10:19.290 --> 10:20.770
那么咱们这里来写

10:20.770 --> 10:22.730
我就直接在这里介绍文件了

10:23.930 --> 10:24.810
你这个是介绍

10:26.010 --> 10:28.130
我们这个页面去引用它

10:28.130 --> 10:30.330
通过介绍来控制它的滚动调高度

10:32.530 --> 10:32.970
就是这个

10:34.650 --> 10:36.970
然后我们在介绍里边怎么写

10:36.970 --> 10:37.530
比方说

10:37.530 --> 10:39.050
我们来做一个简单的滚动效果

10:39.050 --> 10:39.850
就怎么说

10:39.850 --> 10:41.490
就是一个Ul

10:41.490 --> 10:42.410
一个Ul

10:43.610 --> 10:44.930
然后得到这个Ul

10:44.930 --> 10:46.570
DocumentScraryLegatron

10:46.570 --> 10:47.210
得到什么

10:47.210 --> 10:49.010
这个DiVeneverLeft下面的Ul

10:50.570 --> 10:53.690
然后通过这个Ul去设置它的什么

10:53.690 --> 10:55.250
square top

10:55.250 --> 10:55.930
设置这个玩意

10:55.930 --> 10:56.930
是不是就完成滚动了

10:56.930 --> 10:57.530
对不对

10:57.530 --> 10:58.890
咱们写个最简单的

10:58.890 --> 11:00.050
一个非常简单的

11:00.050 --> 11:01.570
set interval

11:01.570 --> 11:02.850
然后怎么样

11:02.850 --> 11:03.730
方形

11:06.370 --> 11:08.130
每过100毫秒

11:08.130 --> 11:11.490
或者说每过30毫秒

11:11.490 --> 11:12.250
干嘛呢

11:12.250 --> 11:15.170
我得到这个Ul目前的滚动调高度

11:15.170 --> 11:16.530
top

11:16.530 --> 11:18.290
得到Ul目前的滚动调高度

11:18.290 --> 11:18.770
是什么

11:18.770 --> 11:20.650
square top

11:20.650 --> 11:21.890
得到它目前的滚动调高度

11:21.890 --> 11:23.010
然后干嘛呢

11:23.090 --> 11:24.170
是不是把高度加1

11:24.170 --> 11:24.570
对不对

11:24.570 --> 11:26.530
加1加2都行

11:26.530 --> 11:27.690
加2嘛

11:27.690 --> 11:28.530
然后怎么样了

11:28.530 --> 11:29.530
是不是又设置回去

11:29.530 --> 11:29.770
对吧

11:29.770 --> 11:31.410
square top

11:31.410 --> 11:32.450
又把它设置回去

11:32.450 --> 11:34.130
设置为top

11:34.130 --> 11:34.530
对吧

11:34.530 --> 11:36.090
这就完成滚动了

11:36.090 --> 11:36.970
对吧

11:36.970 --> 11:38.850
就是设置滚动调高度

11:38.850 --> 11:39.770
就是设置这个玩意

11:39.770 --> 11:40.250
看没

11:40.250 --> 11:41.370
就是设置这个玩意

11:41.370 --> 11:41.930
那么以后呢

11:41.930 --> 11:44.210
我把这个overflow

11:44.210 --> 11:46.250
就是把它重新设回为

11:46.250 --> 11:46.850
Hydome

11:46.850 --> 11:48.330
你就看不见这个滚动调了

11:48.330 --> 11:49.050
我们这里呢

11:49.050 --> 11:50.290
把滚动调显示出来

11:50.290 --> 11:51.290
变云你

11:51.290 --> 11:52.930
变云你就是能够理解

11:52.970 --> 11:53.730
它是怎么滚动的

11:53.730 --> 11:54.970
它其实就是设置这个玩意

11:55.970 --> 11:56.250
好

11:56.250 --> 11:57.450
接下来

11:57.450 --> 11:59.770
我们最终肯定不是这样的写的

11:59.770 --> 12:00.770
我们只是告诉大家

12:00.770 --> 12:02.450
是最终的最终的就是

12:02.450 --> 12:03.890
原理是这个样子

12:05.370 --> 12:05.570
好

12:05.570 --> 12:06.290
那么接下来了

12:06.290 --> 12:07.290
我们要研究一下

12:08.210 --> 12:09.450
我们这里的滚动了

12:09.450 --> 12:10.530
是一个无缝滚动

12:10.530 --> 12:11.090
你看了没

12:12.050 --> 12:12.730
是不是无缝滚动

12:12.730 --> 12:14.050
滚动到第四条

12:14.050 --> 12:15.890
是不是又滚回到第一条

12:15.890 --> 12:16.170
对不对

12:16.170 --> 12:17.810
是不是又滚回到第一条

12:17.810 --> 12:18.050
好

12:18.050 --> 12:19.850
也就是说啥了

12:19.850 --> 12:20.330
也就是说

12:20.330 --> 12:22.450
我们现在要实现无缝滚动

12:22.490 --> 12:23.610
是不是这个滚动调

12:23.610 --> 12:25.450
这里要加一箱

12:25.450 --> 12:26.930
如果你这里只有五箱的话

12:26.930 --> 12:28.010
我咋无缝滚动了

12:28.010 --> 12:29.170
你告诉我

12:29.170 --> 12:31.330
是不是一定要复制一个第一箱

12:31.330 --> 12:32.850
把第一箱复制一下

12:32.850 --> 12:33.890
复制到最后一个

12:33.890 --> 12:35.010
才能实现无缝滚动

12:35.010 --> 12:36.330
在最后一条后边

12:36.330 --> 12:37.170
出现了第一条

12:37.170 --> 12:38.050
看没

12:38.050 --> 12:38.930
看没

12:38.930 --> 12:39.490
对不对

12:39.490 --> 12:41.330
所以说我们一定要去设置一下

12:41.330 --> 12:43.010
就是把第一条复制一下

12:43.010 --> 12:45.970
复制到这才能实现无缝滚动

12:45.970 --> 12:46.170
好

12:46.170 --> 12:46.570
因此呢

12:46.570 --> 12:49.050
我们首先要做到第一件事情是什么了

12:49.050 --> 12:50.890
就是复制

12:50.890 --> 12:51.730
复制

12:51.770 --> 12:52.250
怎么

12:52.250 --> 12:53.170
li

12:53.170 --> 12:54.690
复制li

12:54.690 --> 12:55.890
复制怎么复制li

12:55.890 --> 12:57.970
就是把第一个li复制一遍

12:57.970 --> 12:59.610
加入到最后一个

12:59.610 --> 12:59.890
好

12:59.890 --> 13:00.290
因此呢

13:00.290 --> 13:02.450
我们这里专门来写个函数

13:02.450 --> 13:06.090
clone first li

13:06.090 --> 13:10.130
把第一个li复制第一个li

13:10.130 --> 13:11.330
第一个li

13:11.330 --> 13:12.130
那怎么复制呢

13:12.130 --> 13:12.770
这个很简单

13:12.770 --> 13:13.290
对吧

13:13.290 --> 13:15.450
UL里边找到child元素

13:15.450 --> 13:17.450
找到hasa第一个指元数

13:17.450 --> 13:18.210
然后怎么样

13:18.210 --> 13:20.010
clone load

13:20.050 --> 13:22.130
复制一下第一个指元数

13:22.130 --> 13:23.650
那么是不是得到第一个li了

13:23.650 --> 13:24.330
对不对

13:24.330 --> 13:26.170
复制了一个新的li出来

13:26.170 --> 13:27.410
当然还要加个true

13:27.410 --> 13:28.370
要是深度clone

13:29.370 --> 13:29.570
好

13:29.570 --> 13:31.170
加一个li之后呢

13:31.170 --> 13:33.850
咱们把li加到UL里面去

13:33.850 --> 13:34.850
Append child

13:34.850 --> 13:35.490
你看现在呢

13:35.490 --> 13:36.730
我们写的是啥呢

13:36.730 --> 13:38.050
写的不是插件的

13:38.050 --> 13:39.610
所以说我们写的轻松很多

13:39.610 --> 13:41.010
只要不是通用性的东西

13:41.010 --> 13:42.610
复杂度就一下就降低了

13:42.610 --> 13:43.370
我们就无所谓

13:43.370 --> 13:45.370
但不用担心什么全局的边量无缘

13:45.370 --> 13:46.050
就随便写

13:46.050 --> 13:47.930
反正就是这个页面的

13:47.930 --> 13:49.650
first就用在这个页面

13:49.650 --> 13:50.530
其他页面也不能用

13:50.530 --> 13:51.970
我这里写错了

13:51.970 --> 13:52.530
first

13:52.530 --> 13:56.770
Append child firstli

13:56.770 --> 13:57.090
对不对

13:57.090 --> 13:58.930
这个很简单就完成了一个复制

13:58.930 --> 14:00.050
保存看一下吧

14:00.050 --> 14:02.050
那现在一定会有两个i了

14:02.050 --> 14:02.450
看到没

14:02.450 --> 14:03.250
诶

14:04.530 --> 14:05.930
这么扯断吗

14:05.930 --> 14:06.530
刷新

14:06.530 --> 14:07.370
刷新

14:07.370 --> 14:08.370
没调用

14:08.370 --> 14:09.250
没调用函数

14:09.250 --> 14:11.170
clone firstli

14:11.170 --> 14:11.890
保存

14:11.890 --> 14:13.050
看一下

14:13.050 --> 14:14.410
那你看是不是两个i了

14:14.410 --> 14:15.210
那么这样子一来了

14:15.210 --> 14:16.130
到最后一条过后

14:16.130 --> 14:17.650
是不是再滚动就滚动到这了

14:17.650 --> 14:18.290
对不对

14:18.290 --> 14:19.090
就多了一个了

14:19.130 --> 14:20.410
你看这里多了一个了

14:20.410 --> 14:21.730
把第一个复制一下

14:21.730 --> 14:23.050
这是我们首相做的事情

14:24.050 --> 14:24.290
好

14:24.290 --> 14:26.530
接下来要实现滚动

14:26.530 --> 14:27.530
你看看这边

14:28.170 --> 14:29.770
是不是隔一段时间滚动一下

14:29.770 --> 14:31.050
隔一段时间滚动一下

14:31.050 --> 14:31.650
对吧

14:31.650 --> 14:32.250
它不是马

14:32.250 --> 14:33.850
它不是就是不停的滚动的

14:33.850 --> 14:36.330
它是隔一段时间滚动一下

14:36.330 --> 14:38.330
隔一段时间滚动一下

14:38.330 --> 14:40.090
所以说这里应该做什么

14:40.090 --> 14:41.250
我们写个函数

14:41.250 --> 14:42.490
写个函数

14:42.490 --> 14:44.370
就是开始滚动

14:44.370 --> 14:45.730
start

14:45.730 --> 14:47.170
screw

14:47.170 --> 14:50.400
开始滚动

14:50.440 --> 14:51.320
开始滚动

14:52.320 --> 14:53.320
这里干嘛呢

14:53.320 --> 14:54.960
是不是隔一段时间滚动一次

14:54.960 --> 14:56.000
隔一段时间滚动一次

14:56.000 --> 14:56.560
对不对

14:56.560 --> 14:56.760
好

14:56.760 --> 14:58.160
那这里做的事情很简单

14:58.160 --> 15:00.600
就是就有一个set interval

15:00.600 --> 15:02.600
它永远不会停止

15:02.600 --> 15:04.280
永远是隔一段时间滚动一次

15:04.280 --> 15:06.160
那比方说我们这里写个

15:07.600 --> 15:08.560
一秒钟

15:08.560 --> 15:09.400
一秒钟

15:09.400 --> 15:10.680
一秒钟滚动一次

15:10.680 --> 15:10.840
好

15:10.840 --> 15:11.680
我们这里输出

15:12.960 --> 15:14.040
console

15:14.040 --> 15:15.120
log

15:15.120 --> 15:16.720
就输出滚动

15:16.720 --> 15:17.920
一秒钟滚动一次

15:17.920 --> 15:19.040
咱们来看一下吧

15:19.080 --> 15:20.240
我们调整一下这个函数

15:20.240 --> 15:21.080
start

15:21.080 --> 15:22.480
screw

15:22.480 --> 15:23.600
保存

15:23.600 --> 15:23.760
好

15:23.760 --> 15:25.360
看一下这边

15:25.360 --> 15:26.640
控制台

15:26.640 --> 15:27.280
对吧

15:27.280 --> 15:28.440
隔一秒钟滚动一次

15:28.440 --> 15:29.800
一秒钟有点太短了

15:29.800 --> 15:30.560
两秒钟吧

15:30.560 --> 15:31.440
两秒钟

15:31.440 --> 15:32.040
保存

15:32.040 --> 15:33.480
你看

15:33.480 --> 15:35.400
两秒钟滚动

15:35.400 --> 15:36.000
又滚动

15:36.000 --> 15:37.400
看到没有

15:37.400 --> 15:38.200
又滚动

15:38.200 --> 15:38.760
看到没有

15:38.760 --> 15:41.680
每隔两秒钟滚动一次

15:41.680 --> 15:42.920
滚动一次

15:42.920 --> 15:45.080
那么现在关键点来了

15:45.080 --> 15:46.800
滚动的时候

15:46.800 --> 15:48.160
该干嘛

15:48.360 --> 15:49.080
该干嘛

15:49.080 --> 15:50.200
就这个干嘛干嘛

15:50.200 --> 15:51.960
那么为了方面处理

15:51.960 --> 15:52.840
我这里专门在写

15:52.840 --> 15:53.960
再写一个函数

15:53.960 --> 15:55.040
就是screw

15:55.040 --> 15:56.240
滚动

15:56.240 --> 15:57.240
滚动

15:57.240 --> 15:58.520
我们把这个地方

15:58.520 --> 15:59.240
复制过来

15:59.240 --> 16:01.080
复制过来

16:01.080 --> 16:01.720
我们这里

16:01.720 --> 16:02.960
直接去调用这个函数

16:02.960 --> 16:03.920
screw

16:03.920 --> 16:04.240
来

16:04.240 --> 16:05.080
滚动吧

16:05.080 --> 16:06.240
你来去滚动

16:06.240 --> 16:06.440
好

16:06.440 --> 16:07.640
每一次就是滚动一次

16:07.640 --> 16:08.840
每一次就是滚动一次

16:08.840 --> 16:11.640
或者我们这里就直接写一个screw

16:11.640 --> 16:12.160
这个地方

16:12.160 --> 16:13.760
它只是做一个很简单的事情

16:13.760 --> 16:15.040
就是启动一个计时器

16:15.040 --> 16:16.040
每一个计时器

16:16.040 --> 16:16.800
到达的时候

16:16.800 --> 16:17.960
去滚动这个函数

16:17.960 --> 16:19.440
调用于是

16:19.440 --> 16:20.800
在这个函数里边

16:20.800 --> 16:22.680
真正的去实现滚动

16:22.680 --> 16:24.400
滚动一次

16:24.400 --> 16:26.000
滚动一次

16:26.000 --> 16:28.720
那么咱们看一下怎么滚动

16:28.720 --> 16:30.280
滚动实际上是什么意思呢

16:30.280 --> 16:31.880
实际上就是一个动画效果

16:31.880 --> 16:33.600
滚动一次就是个动画效果

16:33.600 --> 16:35.160
怎么滚动呢

16:35.160 --> 16:36.320
无非就是啥

16:36.320 --> 16:37.640
无非就是

16:37.640 --> 16:39.160
把它screw top

16:39.160 --> 16:40.680
从一个纸

16:40.680 --> 16:43.120
变成另一个纸

16:43.120 --> 16:43.960
对不对

16:43.960 --> 16:45.400
无非就是做这么一件事

16:45.400 --> 16:47.160
把这个UL的screw top

16:47.200 --> 16:50.400
从一个纸变到另一个纸

16:50.400 --> 16:52.920
在一段时间内变到另一个纸

16:52.920 --> 16:55.080
那这个东西是不是可以用我们之前学的动画了

16:55.080 --> 16:57.000
之前写的动画插件是不可以用上了

16:57.000 --> 17:01.800
咱们首先引用之前我们所写的动画插件

17:01.800 --> 17:02.760
然后有了插件过后

17:02.760 --> 17:05.080
它的好处在于我们可以反复使用

17:05.080 --> 17:07.080
虽然写的时候很恼火

17:07.080 --> 17:10.000
但是写好了之后了就非常轻松了

17:10.000 --> 17:10.800
再引用一个解释

17:10.800 --> 17:11.640
因为这个插件

17:11.640 --> 17:15.040
它依赖于另外一个插件叫Happiness

17:15.040 --> 17:16.440
把这两个都引用进来

17:16.560 --> 17:21.520
那么现在要实现滚动就非常非常简单了

17:21.520 --> 17:22.680
怎么滚动了

17:22.680 --> 17:25.280
每一次滚动是不是创建一个动画对象

17:25.280 --> 17:25.880
对不对

17:25.880 --> 17:27.960
我这几刻的目的呢

17:27.960 --> 17:30.360
一是讲解这个文字滚动该怎么去做

17:30.360 --> 17:30.720
第二呢

17:30.720 --> 17:33.480
就是把我们之前用的插件再用一下

17:33.480 --> 17:36.040
创建一个animate对象

17:36.040 --> 17:41.040
new一个什么mypluginanimate

17:41.040 --> 17:41.440
对吧

17:42.880 --> 17:44.720
大小的animate

17:44.720 --> 17:46.280
创建一个动画对象

17:46.280 --> 17:47.480
然后这里边是不是要配置

17:47.480 --> 17:48.080
对吧

17:48.080 --> 17:49.280
什么deration

17:49.280 --> 17:50.080
deration就随便

17:50.080 --> 17:52.360
就让它保持默认之吧

17:52.360 --> 17:54.000
总时间

17:54.000 --> 17:56.400
就是在滚动的时间是多少

17:56.400 --> 17:57.440
就是每一次滚动

17:57.440 --> 17:58.240
每一次滚动

17:58.240 --> 17:59.640
从这个翻到另外一个

17:59.640 --> 18:01.160
它的滚动时间是多少

18:01.160 --> 18:03.040
滚动之间比方说是500毫秒

18:03.040 --> 18:05.240
偷偷压涉为500毫秒

18:05.240 --> 18:06.560
然后骑士值

18:06.560 --> 18:07.640
骑士值是个对象

18:07.640 --> 18:07.920
对吧

18:07.920 --> 18:09.040
我们上几课学的

18:09.040 --> 18:10.800
骑士值是一个对象

18:10.800 --> 18:13.120
对象里边我们就只有一个属性

18:13.120 --> 18:15.320
就是top值

18:15.440 --> 18:17.440
一开始为多少

18:17.440 --> 18:19.000
一开始是不是当前的top值

18:19.000 --> 18:19.640
对吧

18:19.640 --> 18:20.520
当前的top值

18:20.520 --> 18:22.040
就是当前的Ul的top值

18:22.040 --> 18:24.400
所以把Ul的scoretop拿进来

18:24.400 --> 18:26.040
就当前的top值

18:26.040 --> 18:26.280
好

18:26.280 --> 18:30.600
and 结束的值是多少

18:30.600 --> 18:31.040
好

18:31.040 --> 18:34.400
结束的值是不是要算

18:34.400 --> 18:36.360
是不是要算

18:36.360 --> 18:38.000
你当前是第几个

18:38.000 --> 18:40.120
你要滚动到第几个li

18:40.120 --> 18:41.960
那么是不是要经过计算的

18:41.960 --> 18:42.600
对不对

18:42.600 --> 18:44.280
比方说

18:44.280 --> 18:44.800
比方说

18:44.800 --> 18:46.000
我举个例子

18:46.000 --> 18:47.320
第一个li

18:47.320 --> 18:48.400
它的scoretop

18:48.400 --> 18:48.800
比方说

18:51.440 --> 18:51.920
找规律了

18:51.920 --> 18:53.040
现在找规律了

18:53.040 --> 18:55.080
第1个

18:55.080 --> 18:56.120
就是第0个

18:56.120 --> 18:58.080
下标为0的li

18:58.080 --> 19:00.080
那么它的滚动高度是不是0

19:00.080 --> 19:01.040
对不对

19:01.040 --> 19:01.360
好

19:01.360 --> 19:03.360
第1个li

19:03.360 --> 19:04.600
就是下标为1的

19:04.600 --> 19:05.760
就是第2个li

19:05.760 --> 19:07.040
它的滚动高度是多少

19:07.040 --> 19:09.280
是不是1乘以高度

19:09.280 --> 19:09.600
对吧

19:09.600 --> 19:10.600
一个li的高度

19:10.600 --> 19:12.200
一个li的高度是30

19:12.320 --> 19:14.160
我们可以把它写到一个变量里面

19:14.160 --> 19:16.840
一个li的高度是30

19:16.840 --> 19:18.520
那么这边

19:18.520 --> 19:19.560
第1个li

19:19.560 --> 19:21.560
那么你的滚动高度是不是30

19:21.560 --> 19:22.160
对吧

19:22.160 --> 19:23.040
就隐藏30

19:23.040 --> 19:24.560
向上滚动30

19:24.560 --> 19:26.720
那么第2个li

19:26.720 --> 19:27.880
第2个

19:27.880 --> 19:28.920
就是下标为21

19:28.920 --> 19:29.960
实际上是第3个

19:29.960 --> 19:31.120
实际上是第3个

19:31.120 --> 19:33.440
那么是不是2乘以多少

19:33.440 --> 19:34.560
2乘以多少

19:34.560 --> 19:37.240
2乘以害成

19:37.240 --> 19:37.680
对不对

19:37.680 --> 19:38.960
你看每一次滚动

19:38.960 --> 19:40.160
是不是高度

19:40.200 --> 19:42.040
地增一个高度

19:42.040 --> 19:42.560
对吧

19:42.560 --> 19:43.360
从0到1

19:43.360 --> 19:44.480
是不是地增一个高度

19:44.480 --> 19:45.200
从1到2

19:45.200 --> 19:46.360
是不是地增一个高度

19:46.360 --> 19:47.040
对不对

19:47.040 --> 19:47.720
所以说

19:47.720 --> 19:48.800
初始值是啥

19:48.800 --> 19:49.920
初始值是这个

19:49.920 --> 19:51.400
那么结束值是啥

19:51.400 --> 19:53.760
结束值是不是

19:53.760 --> 19:56.800
它加上一个高度

19:56.800 --> 19:57.480
对不对

19:57.480 --> 20:00.200
每一次滚动一个高度

20:00.200 --> 20:01.920
它加上这一块高度

20:01.920 --> 20:04.360
这就是结束值

20:04.360 --> 20:04.720
完了吗

20:04.720 --> 20:05.880
就完了

20:05.880 --> 20:07.200
就完了

20:07.200 --> 20:08.880
还有啥呢

20:08.880 --> 20:09.920
当然还有一个东西

20:10.000 --> 20:11.160
还有就是事件

20:11.160 --> 20:14.720
每一次动画变化的时候

20:14.720 --> 20:16.800
每一次动画效果变化的时候

20:16.800 --> 20:17.360
我要干嘛

20:17.360 --> 20:20.320
我要重新设置这个UEL的Scrolltop

20:20.320 --> 20:23.280
UEL的Scrolltop

20:23.280 --> 20:24.160
这结果的基础

20:24.160 --> 20:24.880
前提条件

20:24.880 --> 20:26.760
你的理解动画插件

20:26.760 --> 20:29.080
你至少得知道动画插件

20:29.080 --> 20:30.320
它怎么去使用

20:30.320 --> 20:31.760
哪怕你自己不知道它怎么写的

20:31.760 --> 20:33.760
但是你知道它怎么去使用

20:33.760 --> 20:35.560
这是每一次滚动的时候

20:35.560 --> 20:37.160
我要运行的函数

20:37.160 --> 20:38.080
运行函数的时候

20:38.080 --> 20:39.000
我就可以得到什么

20:39.040 --> 20:40.440
得到当前的数据

20:40.440 --> 20:42.760
当前的数据里边是不是一个top

20:42.760 --> 20:43.800
对吧

20:43.800 --> 20:45.360
一个top值

20:45.360 --> 20:45.720
好

20:45.720 --> 20:46.400
就完了

20:46.400 --> 20:47.560
就完了

20:47.560 --> 20:50.580
看一下吧

20:50.580 --> 20:51.460
这里

20:51.460 --> 20:52.660
等一下

20:54.660 --> 20:55.060
我看一下

20:55.060 --> 20:55.940
为什么

20:55.940 --> 20:57.860
还没启动动画

20:57.860 --> 20:58.980
没有启动动画

20:58.980 --> 21:01.300
animate start

21:01.300 --> 21:02.300
启动一个动画

21:02.300 --> 21:04.100
你看每一次滚动就启动一个动画

21:04.100 --> 21:06.920
看一下吧

21:06.920 --> 21:08.560
是不是完了

21:08.560 --> 21:09.280
对不对

21:09.280 --> 21:09.720
就完了

21:09.720 --> 21:10.560
你看没

21:10.560 --> 21:11.960
如果你觉得滚动的不够快

21:11.960 --> 21:14.080
那你调整一下时间

21:14.080 --> 21:16.560
300毫秒

21:16.560 --> 21:18.160
再看

21:18.160 --> 21:18.920
你看

21:18.920 --> 21:20.040
这就是个滚动

21:20.040 --> 21:21.840
看没

21:21.840 --> 21:24.520
如果你想停留的更长的时间的话

21:24.520 --> 21:25.920
你想停留更长的时间的话

21:25.920 --> 21:27.240
那你设置一下这个

21:27.240 --> 21:29.680
设置一下这个

21:29.680 --> 21:29.960
好

21:29.960 --> 21:32.120
那么现在关键是在这

21:32.120 --> 21:37.000
当我们滚动到这里的时候

21:37.000 --> 21:39.760
那么我们需要继续滚动

21:39.760 --> 21:40.760
那么怎么继续滚动呢

21:40.800 --> 21:42.040
其实很简单

21:42.040 --> 21:44.040
当我们滚到这个位置的时候

21:44.040 --> 21:45.680
我们只需要

21:45.680 --> 21:47.640
让它回去就行了

21:47.640 --> 21:49.120
让它回到0就行了

21:49.120 --> 21:50.160
对吧

21:50.160 --> 21:51.480
当这个动画完成之后

21:51.480 --> 21:52.480
我们让它回到0

21:52.480 --> 21:53.560
瞬间回到0

21:53.560 --> 21:55.200
那是不是又可以滚动了

21:55.200 --> 21:55.920
对不对

21:55.920 --> 21:56.120
好

21:56.120 --> 21:57.880
那么我们这里是不是可以注册事件

21:57.880 --> 21:58.200
你看

21:58.200 --> 21:59.920
我就把之前的东西用起来

21:59.920 --> 22:01.040
on over

22:01.040 --> 22:04.560
当动画结束之后

22:04.560 --> 22:06.280
当动画结束之后

22:06.280 --> 22:07.360
我们来判断一下

22:07.360 --> 22:09.440
是不是到底了

22:09.480 --> 22:11.800
怎么来判断是不是到底了

22:11.800 --> 22:12.520
你告诉我

22:12.520 --> 22:16.000
怎么来判断是不是到底了

22:16.000 --> 22:17.960
我们有这么一个东西

22:17.960 --> 22:20.120
UL的scrawl top

22:20.120 --> 22:21.120
目前的scrawl top

22:21.120 --> 22:21.840
对吧

22:21.840 --> 22:24.240
UL的目前的scrawl top

22:24.240 --> 22:25.840
还有什么呢

22:25.840 --> 22:26.960
还可以得到什么呢

22:26.960 --> 22:30.560
还可以得到UL的scrawl height

22:30.560 --> 22:32.000
就是包含滚动条

22:32.000 --> 22:34.320
就是包含所有滚动的高度

22:34.320 --> 22:35.000
就整个高度

22:35.000 --> 22:38.520
就整个UL里边所有那种加起来的高度

22:38.520 --> 22:39.040
好

22:39.040 --> 22:40.760
然后还可以得到height

22:40.760 --> 22:41.040
好

22:41.040 --> 22:42.680
咱们来看一下这三个字

22:42.680 --> 22:43.080
好

22:43.080 --> 22:46.280
看一下

22:46.280 --> 22:47.240
你看一下

22:47.240 --> 22:48.640
出问题了

22:48.640 --> 22:50.240
第一个scrawl top

22:50.240 --> 22:51.800
怎么变成这个样子了

22:51.800 --> 22:52.920
它一定应该是整数

22:52.920 --> 22:54.560
我们是3030相加的

22:54.560 --> 22:55.480
它从0开始

22:55.480 --> 22:56.600
每次加30

22:56.600 --> 22:58.560
第一个字是scrawl top的字

22:58.560 --> 23:00.960
它为什么变成这个样子了

23:00.960 --> 23:01.640
那怎么回事了

23:01.640 --> 23:03.080
这里

23:03.080 --> 23:04.920
是不是小数运算不精确了

23:04.920 --> 23:05.760
还真不是

23:05.760 --> 23:07.520
这里还真不是这个问题

23:07.520 --> 23:09.400
因为我们一直是把这个东西

23:09.400 --> 23:11.120
复制给它的

23:11.120 --> 23:12.840
之前我们做一个动画插线的时候

23:12.840 --> 23:14.920
最后一次一定是把它做成

23:14.920 --> 23:15.960
跟最后一次结果

23:15.960 --> 23:18.680
跟目标值的结果是一样的

23:18.680 --> 23:20.400
就是把这个cdata的字

23:20.400 --> 23:22.440
把它一定最后一次的时候

23:22.440 --> 23:24.280
是把它设置为目标值的

23:24.280 --> 23:26.640
所以说它不会存在什么不准精确的问题

23:26.640 --> 23:28.640
那么我们为了验证这一点

23:28.640 --> 23:32.400
我们这里把它的cdata的top打印出来

23:32.400 --> 23:35.160
看一下到底是谁的问题

23:35.160 --> 23:35.360
好

23:35.360 --> 23:36.960
你会发现一个神奇的现象

23:36.960 --> 23:39.080
cdata字第一次是正确的

23:39.120 --> 23:41.480
但是它一加复制过后

23:41.480 --> 23:43.160
它变成这个样子了

23:43.160 --> 23:44.080
这就很恐怖了

23:44.080 --> 23:45.960
我们再来看

23:45.960 --> 23:47.800
把这个动画去掉

23:47.800 --> 23:49.240
我们自己手动测试一下

23:49.240 --> 23:52.440
找这个UO给它的scorotop设置为30

23:52.440 --> 23:54.120
你看着

23:54.120 --> 23:56.640
然后我们去手动得到scorotop

23:56.640 --> 23:57.480
得到scorotop

23:57.480 --> 23:58.640
得到

23:58.640 --> 24:00.920
看一下得到是多少

24:00.920 --> 24:02.520
是不是30

24:02.520 --> 24:03.760
还不是

24:03.760 --> 24:06.080
它都还不是30

24:06.080 --> 24:07.640
是不是很恐怖这个东西

24:07.640 --> 24:08.680
很恐怖

24:08.720 --> 24:09.840
这是怎么回事

24:09.840 --> 24:11.760
这是因为在浏览器里边

24:11.760 --> 24:14.040
滚动条它没有那么精确

24:14.040 --> 24:18.240
滚动条的位置本身就是不精确的

24:18.240 --> 24:21.760
滚动条的位置它是一个散裂分布的

24:21.760 --> 24:23.320
它不是说从0到

24:23.320 --> 24:25.320
不要说这里从0到100

24:25.320 --> 24:26.520
假是从0到100

24:26.520 --> 24:28.200
它之间是均匀分布的数字

24:28.200 --> 24:28.840
不是

24:28.840 --> 24:30.440
它今天是一段一段的

24:30.440 --> 24:32.440
你看滚动条我们点这个下

24:32.440 --> 24:34.120
是一段一段的移动的

24:34.120 --> 24:36.040
就算我们鼠标拖动的话

24:36.080 --> 24:37.920
心情慢慢偷动

24:37.920 --> 24:38.800
慢慢偷动

24:38.800 --> 24:40.240
它也是一段一段的

24:40.240 --> 24:41.400
一段一段移动的

24:41.400 --> 24:44.200
所以说滚动条它本身的位置就是不精确的

24:44.200 --> 24:45.400
就不是精确的

24:45.400 --> 24:46.480
你给它复制为30

24:46.480 --> 24:49.240
它可能得到不是一个精确的字

24:49.240 --> 24:51.480
因此我们不能相信这个东西

24:51.480 --> 24:53.080
这东西是不能信任的

24:53.080 --> 24:54.760
不能信任这个东西

24:54.760 --> 24:56.000
那怎么办呢

24:56.000 --> 24:57.560
我们应该用变量

24:59.880 --> 25:02.640
一开始的scorotop为0

25:02.680 --> 25:10.400
由于流烂器中scorotop取直不精确

25:10.400 --> 25:12.080
所以说我们不能相信

25:12.080 --> 25:14.960
你得到scorotop的字

25:14.960 --> 25:16.080
不能相信它

25:16.080 --> 25:16.960
你只能给它复制

25:16.960 --> 25:18.240
你不要去取它的字

25:18.240 --> 25:19.760
取出来可能不精确

25:19.760 --> 25:21.840
所以我们应该用变量

25:21.840 --> 25:23.800
我们这里的top值一开始等于什么

25:23.800 --> 25:24.800
就等于这个变量

25:24.800 --> 25:25.720
每一次干嘛呢

25:25.720 --> 25:28.280
把这个变量值加上海测

25:28.280 --> 25:30.360
然后设置的时候可以设置scorotop

25:30.360 --> 25:32.480
设置完了过后你不要忘记了

25:32.520 --> 25:36.000
把这个变量再加上

25:36.000 --> 25:38.680
让这个变量最好换个名字

25:38.680 --> 25:40.160
最好换一个名字

25:40.160 --> 25:45.280
currtop换一个名字

25:45.280 --> 25:46.240
因为为什么要换呢

25:46.240 --> 25:49.080
避免跟window对象里面的scorotop冲突了

25:49.080 --> 25:51.280
换一个名字

25:51.280 --> 25:57.040
加上scorotop等于zcdtop

25:57.040 --> 25:58.720
然后把这个值复制过去

25:58.720 --> 26:00.160
所以说我们到时候判断的时候

26:00.200 --> 26:01.640
一定要得到它的值

26:01.640 --> 26:03.520
得到目前的滚动条高度

26:03.520 --> 26:05.160
一定要用cotop来得到

26:05.160 --> 26:06.680
一定要用这个东西来得到

26:06.680 --> 26:08.680
我们最终每一次动画完了过后

26:08.680 --> 26:09.840
输出cotop值

26:09.840 --> 26:13.160
每一次动画完成之后

26:13.160 --> 26:14.640
输出这个变量的值

26:14.640 --> 26:15.840
我们看一下

26:17.040 --> 26:18.160
你看现在是不是对了

26:18.160 --> 26:18.840
对吧

26:18.840 --> 26:19.560
我们用变量

26:19.560 --> 26:20.600
那变量肯定没问题了

26:20.600 --> 26:21.160
对不对

26:21.160 --> 26:23.280
因为牛奶气滚动条里边

26:23.280 --> 26:24.640
是不是它会有问题

26:25.480 --> 26:26.360
你看

26:26.880 --> 26:28.720
现在是不是又出问题了

26:28.720 --> 26:29.840
又出问题了

26:29.920 --> 26:30.880
这是不是到底了

26:30.880 --> 26:31.480
已经

26:31.480 --> 26:32.320
是不是已经到底了

26:32.320 --> 26:32.920
这个人

26:32.920 --> 26:33.560
对吧

26:33.560 --> 26:34.680
他就已经到底了

26:34.680 --> 26:35.840
那点还能运动吗

26:35.840 --> 26:36.560
没法运动了

26:36.560 --> 26:37.560
他已经到底了

26:38.280 --> 26:39.880
所以说我们现在把停止

26:39.880 --> 26:40.920
现在把停止

26:41.360 --> 26:42.520
我现在停不止不了

26:42.520 --> 26:43.400
我们就看这

26:43.400 --> 26:44.320
就看这

26:44.760 --> 26:46.840
这里就是这是最后一次运动了

26:46.840 --> 26:47.600
最后一次运动

26:47.600 --> 26:49.600
你看一下有什么样的特点

26:49.600 --> 26:50.680
这三个数字

26:51.240 --> 26:52.440
是不是第一个数字等于

26:52.440 --> 26:54.320
第二个数字减去第三个数字

26:54.320 --> 26:54.800
对吧

26:54.800 --> 26:56.120
它有这么一个样的一个特点

26:56.120 --> 26:57.200
第一个数字是啥

26:57.200 --> 26:59.160
是向上隐藏的高度

26:59.200 --> 27:00.800
就是你滚动了的高度

27:00.800 --> 27:03.400
你上飙隐藏了多少的高度

27:03.400 --> 27:04.760
就是这个第一个数字

27:04.760 --> 27:06.040
第二个数字是总高度

27:06.040 --> 27:08.160
就是包含那种部分的总高度

27:08.160 --> 27:10.000
就是这个第二个数字

27:10.000 --> 27:11.680
第三个数字是它自己的高度

27:11.680 --> 27:12.600
自身的高度

27:12.600 --> 27:13.800
那你想这个道理

27:13.800 --> 27:15.840
上飙隐藏的部分的高度

27:15.840 --> 27:16.880
加上这一部分高度

27:16.880 --> 27:18.160
是不是就是总高度

27:18.160 --> 27:19.960
所以说我们如何来判断

27:19.960 --> 27:21.320
是不是最后一次

27:22.400 --> 27:24.520
当动画完成之后

27:24.520 --> 27:26.200
来判断一下是不是最后一次

27:26.200 --> 27:27.160
就是什么

27:27.760 --> 27:35.010
Ul square height

27:35.010 --> 27:36.890
减去高度

27:36.890 --> 27:38.130
应该等于

27:38.130 --> 27:39.770
等于啥

27:39.770 --> 27:41.450
等于cotop

27:41.450 --> 27:42.570
是不是到底了

27:42.570 --> 27:43.450
对不对

27:43.450 --> 27:45.050
如果到底的话怎么办

27:47.050 --> 27:48.490
滚动条

27:48.490 --> 27:51.090
滚动条回到0

27:51.090 --> 27:52.570
这里做的事情很简单

27:52.570 --> 27:54.530
就是把这个变量值设为0

27:54.530 --> 27:57.250
然后同时把这个Ul square top值

27:58.250 --> 27:59.890
瞬间设为cotop

27:59.890 --> 28:01.170
瞬间一把设为0

28:01.170 --> 28:02.970
滚动条回到0

28:02.970 --> 28:04.130
看一下

28:04.130 --> 28:06.170
注意关注这里滚动条变化

28:06.170 --> 28:07.810
关注这里的变化

28:07.810 --> 28:09.050
看着

28:09.050 --> 28:10.410
关注这里的变化

28:10.410 --> 28:11.730
好到了最后一次了

28:13.330 --> 28:13.850
最后一次

28:13.850 --> 28:14.930
你看滚动条是不是

28:14.930 --> 28:15.690
瞬间回到0了

28:15.690 --> 28:16.490
再来看

28:16.490 --> 28:17.690
再仔细看一下

28:19.410 --> 28:20.850
三四

28:20.850 --> 28:21.650
看滚动条

28:21.650 --> 28:23.170
五

28:23.170 --> 28:25.170
最后你看是不是回到0了

28:25.170 --> 28:26.250
那么对于拥护而言

28:26.250 --> 28:27.050
它是感觉不到的

28:27.050 --> 28:28.130
因为它是瞬间回去的

28:28.130 --> 28:28.810
它感觉不到

28:28.810 --> 28:30.810
因为两者是一样的

28:30.810 --> 28:31.050
对吧

28:31.050 --> 28:32.130
两者的效果是一样的

28:32.130 --> 28:33.810
所以说拥护感觉不到的

28:33.810 --> 28:36.410
因此我们这里就可以用这种方式来处理

28:36.410 --> 28:39.210
最后我们把这个overflow还等

28:39.210 --> 28:40.130
overflow还等

28:40.130 --> 28:41.930
跑下去了

28:41.930 --> 28:43.690
把这个盖去掉

28:43.690 --> 28:45.850
把这个overflow还等盖加上

28:45.850 --> 28:46.050
好

28:46.050 --> 28:47.450
这样一出分隐藏了

28:47.450 --> 28:48.410
你看

28:48.410 --> 28:50.330
滚动就做完了

28:50.330 --> 28:52.130
隐藏之后还是可以滚动的

28:52.130 --> 28:53.570
不是说必须要有滚动条

28:53.610 --> 28:56.010
这就实现了一个无缝的自动滚动

28:57.250 --> 28:58.210
一

28:58.210 --> 28:58.450
二

28:58.450 --> 28:59.970
看没有

28:59.970 --> 29:01.410
就这么一个效果的实现

29:01.410 --> 29:02.250
我讲这个效果了

29:02.250 --> 29:03.130
一方面是讲

29:03.130 --> 29:04.250
以后你们在网站中

29:04.250 --> 29:06.690
遇到这种公告滚动是怎么来做

29:06.690 --> 29:08.370
如果是横向的是不是一样的

29:08.370 --> 29:09.370
横向滚动的话

29:09.370 --> 29:10.610
那你是不是还是一样的

29:10.610 --> 29:12.210
是不是一样是发生了变化

29:12.210 --> 29:13.210
然后滚动的高

29:13.210 --> 29:15.370
我是之前这里设置的是滚动高度

29:15.370 --> 29:16.370
scroll top

29:16.370 --> 29:17.490
那么横向滚动的话

29:17.490 --> 29:20.490
就设置什么scroll left

29:20.490 --> 29:22.930
滚就是向左边的滚动距离

29:23.610 --> 29:24.410
一样的道理

29:24.410 --> 29:25.450
道理是一样的

29:25.450 --> 29:27.090
另外我可以练习一下

29:27.090 --> 29:28.290
三点课做的动画插件

29:28.290 --> 29:29.890
让大家体会一下

29:29.890 --> 29:31.090
一个插件做好了之后

29:31.090 --> 29:34.250
会给我们后边的开发带来很多的便利

29:34.250 --> 29:34.850
好吧

29:34.850 --> 29:36.770
这是关于这个文字滚动效果

