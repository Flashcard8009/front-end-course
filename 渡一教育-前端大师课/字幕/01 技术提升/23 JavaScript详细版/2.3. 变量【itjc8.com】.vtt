WEBVTT

00:00.000 --> 00:18.700
编辑 编辑也是介石里面一个非常非常核心的概念

00:18.700 --> 00:22.500
可以说咱们这个章节就是介石语法基础这个章节

00:22.500 --> 00:25.700
讲的全是最核心最基础的概念

00:25.700 --> 00:30.300
就像我们学中文的时候要学 先学拼音 生母 孕母 对吧

00:30.300 --> 00:31.500
最基本的概念了

00:31.500 --> 00:34.100
好 编辑 编辑是什么东西呢?

00:34.100 --> 00:35.500
就什么是编辑?

00:36.700 --> 00:39.300
编辑是一块内存空间

00:39.500 --> 00:43.700
是一块内存空间

00:45.100 --> 00:47.300
用于保存数据

00:47.300 --> 00:48.900
上一节课咱们学到数据 对吧

00:48.900 --> 00:50.300
我们可有各种各样的数据

00:50.300 --> 00:52.900
什么制服串啊 什么数字啊

00:52.900 --> 00:54.300
布尔啊 undefine啊

00:54.300 --> 00:55.700
对吧 这些还有什么对象啊

00:55.700 --> 00:57.500
这些东西都是属于数据

00:57.500 --> 01:00.100
对吧 变量的就是专门哪一块空间

01:00.100 --> 01:01.400
来保存数据

01:01.400 --> 01:04.300
之前咱们是直接就把这个数据输出了

01:04.300 --> 01:06.100
但是有的时候呢

01:06.100 --> 01:08.400
我们很多时候不需要输出

01:08.400 --> 01:10.400
只是把这个数据先存起来

01:10.400 --> 01:13.400
存起来之后方便后边进行运算

01:13.400 --> 01:16.400
所以说我们需要找到一个东西来存放数据

01:16.400 --> 01:18.000
而变量就是这么个东西

01:18.000 --> 01:20.400
变量就是专门用来存放数据的

01:20.400 --> 01:22.000
把一块东西先存起来

01:22.000 --> 01:24.900
我们这个时候就需要个变量把它存进来

01:24.900 --> 01:27.500
好 为什么它是一块内存空间呢?

01:27.500 --> 01:30.200
首先我们要知道计算机的组成

01:30.200 --> 01:32.600
有哪些部分组成计算机

01:32.600 --> 01:35.400
我们比较说核心部分就是CPU 对吧

01:35.400 --> 01:38.600
还有内存 还有什么硬盘

01:38.600 --> 01:42.200
还有什么输入输出设备

01:42.200 --> 01:44.200
输入设备就键盘鼠标

01:44.200 --> 01:47.100
输出设备就是显示器 对吧

01:47.100 --> 01:50.000
就是这么一些部分组成的计算机

01:50.000 --> 01:51.800
而我们现在讨论的是什么呢?

01:51.800 --> 01:53.900
讨论的是内存

01:53.900 --> 01:56.000
为什么变量是一块内存空间

01:56.000 --> 01:57.400
而不是硬盘空间呢?

01:57.400 --> 02:00.800
首先我们要知道内存和硬盘的区别

02:00.900 --> 02:05.500
内存它的特点是存取速度快

02:05.500 --> 02:07.200
速度飞快

02:07.200 --> 02:09.700
就是你要从内存里边读一个东西

02:09.700 --> 02:12.400
把数据往内存里边去存

02:12.400 --> 02:13.900
速度是非常快的

02:13.900 --> 02:16.200
远远快过硬盘

02:16.200 --> 02:17.900
但是它的缺点就是什么呢?

02:17.900 --> 02:20.000
数据一丢失

02:20.000 --> 02:21.000
什么时候会丢失?

02:21.000 --> 02:23.400
一重启电了 数据就没了

02:23.400 --> 02:25.100
或者是我们在开发页面的时候

02:25.100 --> 02:27.000
我们写的代码 一刷新页面

02:27.000 --> 02:28.100
之前的东西就没了

02:28.100 --> 02:29.500
又得重新来一次

02:29.500 --> 02:31.000
这就是内存的特点

02:31.000 --> 02:33.600
存取速度快 让数据一丢失

02:33.600 --> 02:38.400
而硬盘它是存取速度慢

02:38.400 --> 02:41.500
数据的永久保存

02:41.500 --> 02:44.000
理论上的永久保存

02:44.000 --> 02:45.600
这是这两个的特点

02:45.600 --> 02:47.800
但是我们计算机程序

02:47.800 --> 02:55.000
计算机程序的运行

02:55.000 --> 03:02.100
仅与内存打交道

03:02.100 --> 03:04.000
就相当于是我们控制CPU

03:04.000 --> 03:05.800
CPU做什么? 做运算了对吧

03:05.800 --> 03:07.900
CPU它只跟内存打交道

03:07.900 --> 03:09.700
所以说我们计算机程序

03:09.700 --> 03:11.200
也只能跟内存打交道

03:11.200 --> 03:12.800
这就是为什么变量

03:12.800 --> 03:14.100
是一块内存空间

03:14.100 --> 03:15.600
而不是硬盘空间

03:15.600 --> 03:17.800
那么为什么计算机

03:17.800 --> 03:19.400
那我们的硬盘就要来做什么呢?

03:19.400 --> 03:20.900
硬盘可以存程序

03:20.900 --> 03:23.100
把我们的程待满了存到硬盘里边

03:23.100 --> 03:23.900
你看我们之前写的

03:23.900 --> 03:25.500
都是一个一个的文件

03:25.500 --> 03:27.700
文件是存到硬盘里边

03:27.700 --> 03:29.000
它是永久保存的

03:29.000 --> 03:30.500
这些文件我重启是电脑

03:30.500 --> 03:31.700
它还在

03:31.700 --> 03:34.000
但是只要把这些文件运行出来

03:34.000 --> 03:36.200
这些数据全到内存里边去了

03:36.200 --> 03:38.200
它会先从硬盘里边

03:38.200 --> 03:40.100
把这些东西加到内存里边

03:40.100 --> 03:41.200
然后再去运行

03:41.200 --> 03:42.500
你看这个意思

03:42.500 --> 03:44.300
它不是直接在硬盘里边运行的

03:44.300 --> 03:48.600
因为硬盘的运行速度实在是太慢了

03:48.600 --> 03:50.700
它会拖累整个程序的运行速度

03:50.700 --> 03:53.300
所以我们必须先把硬盘的东西拿到内存

03:53.400 --> 03:54.800
然后再来进行运行

03:54.800 --> 03:58.000
这样子我们CPU只跟内存之间打交道

03:58.000 --> 03:59.100
速度就很快了

03:59.100 --> 04:02.200
然后以后我们将来学习到一些其他程序过后

04:02.200 --> 04:03.700
我们可以在合适的位置

04:03.700 --> 04:05.800
需要永久保存一些数据的时候

04:05.800 --> 04:07.800
再把它存放到硬盘

04:07.800 --> 04:09.800
在合适的时候又把它堵到内存

04:09.800 --> 04:12.600
总之到目前我们不去管硬盘

04:12.600 --> 04:14.100
只管内存

04:14.100 --> 04:16.800
我们变量的就是一块内存空间

04:16.800 --> 04:17.600
它是一块区域

04:17.600 --> 04:19.300
就像一个房间一样开好房

04:19.300 --> 04:22.300
然后之后用来存放这个数据

04:22.400 --> 04:23.600
这就是什么是变量

04:23.600 --> 04:25.500
非常简单

04:25.500 --> 04:27.800
那么这里我再说第二个问题

04:27.800 --> 04:31.500
如何使用变量

04:31.500 --> 04:33.100
变量它有两个步骤

04:33.100 --> 04:34.800
使用变量有两个步骤

04:34.800 --> 04:37.100
第一步叫做声明变量

04:37.100 --> 04:38.300
也叫做定义

04:38.300 --> 04:39.400
说法不一样

04:39.400 --> 04:40.600
都是一个意思

04:40.600 --> 04:41.700
声明变量

04:41.700 --> 04:43.400
什么叫声明变量呢

04:43.400 --> 04:44.500
就是开房

04:44.500 --> 04:46.000
开好一个房间

04:46.000 --> 04:47.900
这个房间可以里边没有任何东西

04:47.900 --> 04:49.000
可以没有任何东西

04:49.000 --> 04:50.400
我以后再把东西存进去

04:52.300 --> 04:54.700
可以把变量比做是一个杯子

04:54.700 --> 04:55.900
拿一个空杯子

04:55.900 --> 04:57.900
先得有一个杯子

04:57.900 --> 04:59.700
这个杯子里边才能存放东西

04:59.700 --> 05:00.600
才能放东西

05:00.600 --> 05:01.700
就是一个箱子

05:01.700 --> 05:02.700
箱子也可以

05:02.700 --> 05:03.900
一个箱子能存东西

05:03.900 --> 05:05.500
都很好理解

05:05.500 --> 05:07.700
就是我们先得有一个箱子

05:07.700 --> 05:08.900
先得有一个房间

05:08.900 --> 05:10.500
才能往里边存东西

05:10.500 --> 05:12.100
那么如何来声明变量呢

05:12.100 --> 05:13.500
非常简单

05:13.500 --> 05:14.500
声明的方式

05:14.500 --> 05:18.110
写上这么一个代码就行了

05:18.110 --> 05:19.510
这里我说一下

05:19.510 --> 05:21.310
在马克当里边记笔记的时候

05:21.310 --> 05:22.910
如果加三个点

05:22.910 --> 05:23.610
三个点

05:23.610 --> 05:24.910
这个叫飘

05:24.910 --> 05:25.910
加三个飘

05:25.910 --> 05:28.010
开始以三个飘结尾

05:28.010 --> 05:29.310
开始这个飘的后边

05:29.310 --> 05:30.510
跟上一个GS

05:30.510 --> 05:31.710
就表示这一块区域

05:31.710 --> 05:33.210
我们写的是GS代码

05:33.210 --> 05:34.910
一会我们可以看一下效果

05:34.910 --> 05:35.410
看一下效果

05:35.410 --> 05:37.910
这个区域我们就可以看到一个代码的

05:37.910 --> 05:38.910
渲染效果

05:38.910 --> 05:39.910
比方说这里

05:39.910 --> 05:41.310
定义变量怎么定义呢

05:41.310 --> 05:42.310
一个VAR

05:42.310 --> 05:43.610
关键字 VAR

05:43.610 --> 05:44.510
必须要这样子写

05:44.510 --> 05:45.110
不能大写

05:45.110 --> 05:45.810
不能小写

05:45.810 --> 05:47.410
不能大写

05:47.410 --> 05:48.910
而且必须按照这种写法

05:48.910 --> 05:49.810
VAR

05:49.810 --> 05:51.110
它叫做Varable

05:51.210 --> 05:52.210
表示变量的意思

05:52.210 --> 05:53.810
它是Varable的说写

05:54.810 --> 05:58.110
它是Varable

05:58.910 --> 05:59.810
Varable的说写

06:01.310 --> 06:02.210
Varable的说写

06:02.210 --> 06:03.210
表示的是个变量

06:03.710 --> 06:04.710
表示的是变量

06:04.710 --> 06:06.110
后边写上一个空格

06:06.110 --> 06:07.510
然后写上变量名

06:08.010 --> 06:09.510
变量名就完了

06:10.610 --> 06:11.510
是不是很简单

06:11.510 --> 06:14.410
我们平时生活中要去开个房

06:14.410 --> 06:15.210
是不是还挺麻烦的

06:15.210 --> 06:16.510
要拿什么身份证

06:16.510 --> 06:17.610
还要填什么东西

06:17.610 --> 06:18.410
麻烦的要事

06:18.410 --> 06:19.510
还要先预定

06:20.110 --> 06:21.110
还要先预定

06:21.110 --> 06:21.710
很麻烦

06:21.710 --> 06:23.110
但是我们在计算机里面

06:23.110 --> 06:23.910
开一个房间

06:23.910 --> 06:24.910
非常非常简单

06:24.910 --> 06:26.310
就写这么一句话就开房了

06:26.310 --> 06:27.410
这是房间的名字

06:27.410 --> 06:28.410
我给他取个名字

06:28.910 --> 06:29.110
好

06:29.110 --> 06:29.710
咱们来看一下

06:29.710 --> 06:30.710
我们在马克当里面

06:30.710 --> 06:31.810
这样记笔记过后

06:31.810 --> 06:32.510
你看一下

06:32.510 --> 06:34.110
这边是不是宣展出来

06:34.110 --> 06:36.510
就是一个这样的一个效果了

06:36.510 --> 06:37.310
就非常好看

06:37.710 --> 06:39.110
主要是起这么一个作用

06:39.110 --> 06:40.210
就是变量的语法

06:40.210 --> 06:41.010
声明语法

06:41.010 --> 06:41.610
定义语法

06:41.610 --> 06:42.410
就这么一样子

06:43.310 --> 06:43.910
比方说

06:43.910 --> 06:45.110
咱们来举个例子

06:45.110 --> 06:46.510
这里我们新建个页面

06:46.510 --> 06:48.110
TES1点点天谱

06:48.610 --> 06:52.410
然后这里我写上一段代码

06:54.210 --> 06:54.910
比方说

06:54.910 --> 06:56.410
我们这里要声明一个变量

06:56.410 --> 06:56.910
对吧

06:56.910 --> 06:57.910
声明一个变量

06:58.410 --> 07:00.310
就用VAR空格

07:00.910 --> 07:01.910
后边写上啥呢

07:01.910 --> 07:03.010
变量的名字

07:03.210 --> 07:03.910
就给你自己

07:03.910 --> 07:05.310
你去给他取个名字就行了

07:05.310 --> 07:06.410
随便取啥名字

07:06.410 --> 07:07.310
比方说一个房间

07:07.710 --> 07:08.410
一个房间

07:08.410 --> 07:09.310
或者是身份证号

07:09.310 --> 07:10.310
身份证号

07:11.110 --> 07:13.210
PID表示身份证号

07:13.610 --> 07:14.510
随便取个名字

07:15.510 --> 07:17.310
那么这就是声明的一个变量

07:17.810 --> 07:19.910
声明了一个变量

07:20.910 --> 07:24.210
然后名称为PID

07:24.410 --> 07:25.710
该取的名字叫PID

07:26.310 --> 07:26.510
好

07:26.510 --> 07:27.610
变量里面存了什么东西

07:27.610 --> 07:29.210
我们知道变量是一块内存空间

07:29.210 --> 07:29.710
对吧

07:29.710 --> 07:30.910
里边可以存东西的

07:30.910 --> 07:32.210
它里面存了什么东西呢

07:32.610 --> 07:34.910
目前变量中

07:36.010 --> 07:37.810
没有存任何东西

07:38.610 --> 07:40.610
也就是说现在的变量存的东西

07:40.610 --> 07:41.310
是咋了

07:42.810 --> 07:44.310
为undefend

07:44.810 --> 07:45.910
就是未定义的

07:46.110 --> 07:47.010
未定义的

07:47.810 --> 07:49.110
但是实际上你要理解清楚

07:49.110 --> 07:50.810
这个变量实际上已经定义了

07:50.810 --> 07:51.710
已经声明了

07:51.710 --> 07:53.810
只它里面存的东西没有定义

07:54.110 --> 07:55.010
叫undefend

07:55.610 --> 07:57.910
这个时候变量它里面的数据

07:58.010 --> 07:59.210
就是undefend

07:59.210 --> 08:00.910
你看undefend就这么个用处

08:01.310 --> 08:02.510
有的时候我们要知道

08:02.510 --> 08:04.310
这个变量它到底有没有存东西

08:04.310 --> 08:06.210
就看一下它是不是undefend就完事了

08:06.910 --> 08:07.310
好

08:07.410 --> 08:09.510
那么接下来我们可以验证一下

08:09.510 --> 08:10.610
来验证一下

08:11.710 --> 08:12.710
可以来验证一下

08:12.710 --> 08:13.610
输出啥呢

08:13.810 --> 08:14.110
好

08:14.110 --> 08:15.310
现在我输出的时候

08:15.310 --> 08:16.110
就这样子写

08:16.110 --> 08:16.810
PID

08:17.010 --> 08:17.910
这样子来输出

08:18.310 --> 08:18.510
好

08:18.510 --> 08:20.310
你看一下这个写法跟之前不一样了

08:20.910 --> 08:22.510
之前有没有这种写法没有

08:22.710 --> 08:24.610
之前咱们直接输出的是啥

08:24.610 --> 08:26.010
全是字面量

08:26.110 --> 08:26.410
对吧

08:26.410 --> 08:27.210
1234

08:27.210 --> 08:28.310
数字字面量

08:28.410 --> 08:29.310
两个双引号

08:29.310 --> 08:30.110
两个单引号

08:30.110 --> 08:31.810
叫做制服串字面量

08:32.110 --> 08:32.810
或者是true

08:32.810 --> 08:33.710
或者是false

08:33.710 --> 08:34.610
表示的是

08:34.910 --> 08:35.710
布尔字面量

08:35.710 --> 08:36.510
或者是一个对象

08:36.510 --> 08:37.510
对象字面量

08:37.710 --> 08:39.310
但是现在不是字面量了

08:39.610 --> 08:41.010
现在是把这什么意思呢

08:41.010 --> 08:42.310
这句话指的是

08:42.610 --> 08:44.010
将变量

08:44.110 --> 08:45.710
PID的

08:46.910 --> 08:47.710
应该这样说

08:48.210 --> 08:50.010
输出变量

08:50.110 --> 08:51.710
PID的值

08:52.210 --> 08:53.310
这个值是什么意思

08:53.310 --> 08:56.810
就是PID中存放的数据

08:57.110 --> 08:59.810
把它存放的数据拿出来进行输出

09:00.010 --> 09:01.110
它里面存放的是啥

09:01.810 --> 09:02.510
啥都没存

09:02.510 --> 09:02.910
啥都没存

09:02.910 --> 09:03.710
就是undefend

09:04.310 --> 09:05.110
就是undefend

09:05.310 --> 09:06.510
那么把这个东西拿出来输出

09:06.510 --> 09:07.310
会输出什么呢

09:07.510 --> 09:07.710
好

09:07.710 --> 09:08.510
咱们来看一下

09:09.310 --> 09:10.110
它会输出啥

09:11.010 --> 09:11.610
F12

09:12.610 --> 09:13.110
你看

09:13.710 --> 09:14.810
是不是输出了undefend

09:14.810 --> 09:15.310
对吧

09:15.410 --> 09:16.510
输出了undefend

09:16.510 --> 09:17.010
看到没

09:17.610 --> 09:18.310
刷新是

09:18.710 --> 09:19.610
输出了undefend

09:20.410 --> 09:21.610
这就是它输出的结果

09:21.710 --> 09:22.910
说明了这个变量里边

09:22.910 --> 09:23.510
它的值

09:23.510 --> 09:25.910
目前的值存的数据就是undefend

09:26.210 --> 09:27.710
你没看它存东西吗

09:27.810 --> 09:28.610
只是声明了

09:28.610 --> 09:29.610
开了一个空房间

09:29.610 --> 09:30.710
它的值就是undefend

09:31.310 --> 09:32.610
我们可以进一步来

09:33.410 --> 09:34.410
使用上级课的知识

09:34.410 --> 09:35.510
我们还可以这样子写

09:35.910 --> 09:37.610
Type PID

09:37.610 --> 09:38.610
这就是什么意思呢

09:38.910 --> 09:39.910
它是输出

09:40.210 --> 09:41.010
变量

09:41.110 --> 09:43.210
PID的内型

09:44.010 --> 09:44.810
这个变量 PID

09:44.810 --> 09:46.010
里面存的数据

09:46.010 --> 09:47.210
它存的是什么数据

09:47.210 --> 09:48.110
它的内型是啥

09:48.210 --> 09:48.410
好

09:48.410 --> 09:49.410
大家想一想

09:50.010 --> 09:50.610
想一想

09:50.710 --> 09:51.510
这个输出啥

09:52.310 --> 09:53.010
输出啥

09:53.710 --> 09:54.610
它会输出啥呢

09:55.510 --> 09:56.810
是不是还是undefend

09:56.910 --> 09:59.110
因为它里面的数据就是undefend

09:59.210 --> 10:01.210
undefend的内型就是undefend

10:01.410 --> 10:02.210
保存看一下

10:02.510 --> 10:03.810
它输出的还是undefend

10:03.910 --> 10:04.810
还是undefend

10:05.010 --> 10:05.310
OK

10:05.310 --> 10:06.010
能理解吧

10:06.410 --> 10:07.710
这是一块就是变量

10:07.710 --> 10:09.010
如何来声明一个变量

10:09.010 --> 10:10.010
非常非常简单

10:10.510 --> 10:11.310
只是大家注意

10:11.310 --> 10:12.710
你要写变量的时候

10:12.710 --> 10:14.110
千万不能这样子写

10:14.610 --> 10:15.910
你要输出变量的时候

10:16.110 --> 10:18.510
千万不要给我前后加两个双一号

10:19.110 --> 10:20.110
千万不要这样子写

10:20.510 --> 10:22.410
这样子写还是不是输出变量

10:23.410 --> 10:24.410
是不是输出变量

10:24.410 --> 10:25.110
不是了

10:25.410 --> 10:26.310
输出的是啥

10:26.610 --> 10:28.510
输出的是一个制服串的

10:28.810 --> 10:29.910
字面量

10:30.610 --> 10:32.010
输出会输出什么呢

10:32.110 --> 10:33.210
这样子会输出什么呢

10:33.410 --> 10:34.410
保存咱们看一下

10:35.210 --> 10:37.410
这样子直接会输出PID是三个字母

10:38.110 --> 10:39.310
所以说一定要搞清楚

10:39.510 --> 10:41.410
这是制服串字面量

10:41.610 --> 10:43.210
你把两个双一号去掉

10:43.910 --> 10:45.110
这个时候才是变量

10:45.210 --> 10:46.210
直接使用这个名字

10:46.710 --> 10:48.210
这个点是容易犯触的

10:48.310 --> 10:49.710
特别是对于初学者

10:49.810 --> 10:50.510
特别容易犯触

10:50.510 --> 10:51.310
大家注意一下

10:52.010 --> 10:52.910
好这是第一步

10:53.210 --> 10:54.610
如何来声明一个变量

10:54.610 --> 10:56.510
这里大家要注意的就是

10:57.510 --> 10:58.810
变量声明后

10:59.410 --> 11:01.110
声明后会怎么样呢

11:02.310 --> 11:03.110
他的纸

11:03.510 --> 11:05.210
他的纸就是他里边存放的东西

11:05.210 --> 11:06.110
存放的数据

11:06.510 --> 11:08.510
为 undefend

11:08.810 --> 11:09.610
为 undefend

11:09.910 --> 11:11.410
好这是第一个大家要注意的

11:12.310 --> 11:13.110
好第二个

11:14.110 --> 11:15.010
第二个是什么

11:15.110 --> 11:17.310
就是给变量复职

11:17.910 --> 11:19.210
给变量复职

11:20.710 --> 11:21.810
好这是什么意思呢

11:22.010 --> 11:25.310
就是向变量的内存空间中存放数据

11:25.710 --> 11:31.810
向变量的内存空间中存放数据

11:32.010 --> 11:32.810
很简单

11:33.310 --> 11:35.310
它的用处不就是在存东西的吗

11:35.310 --> 11:37.110
好OK你把东西往里边存

11:37.610 --> 11:38.610
往里边存就完事了

11:39.010 --> 11:40.010
好咱们来看一下

11:40.210 --> 11:42.210
刚才我们有这么一个变量了

11:42.210 --> 11:44.110
接下来我们给这个变量的复职

11:44.210 --> 11:44.910
怎么复职呢

11:44.910 --> 11:47.510
pid用这个等号给它复职

11:48.310 --> 11:49.810
但是不能读作等号

11:49.810 --> 11:51.010
不能读作等号

11:51.110 --> 11:53.010
它要读作复职符号

11:53.510 --> 11:55.810
它自指的是把右边的东西

11:55.810 --> 11:57.510
右边的东西我们随便写

11:57.510 --> 11:58.210
随便写

11:59.210 --> 12:03.410
它指的是把右边的东西存到这个变量的内存空间里边去

12:03.910 --> 12:04.810
它应该这样读

12:05.510 --> 12:06.010
将

12:06.410 --> 12:07.010
将什么呢

12:07.510 --> 12:09.810
就像这个玩意

12:10.310 --> 12:12.810
存放到pid

12:13.310 --> 12:15.810
存放到变量pid中

12:16.110 --> 12:18.010
把存起来以后会用到

12:18.010 --> 12:19.010
以后可能会用

12:19.310 --> 12:21.010
它这么个意思

12:21.810 --> 12:24.310
好现在我们再来输出这个变量会输出啥呢

12:24.810 --> 12:26.210
会输出啥就会输出这个玩意

12:26.610 --> 12:27.510
咱们保存看一下

12:28.310 --> 12:29.610
你看是不是就输出这个玩意了

12:30.410 --> 12:31.710
好那么现在再想一想

12:31.810 --> 12:33.510
如果我再输出它的内形

12:33.810 --> 12:34.710
它输出什么内形

12:35.410 --> 12:36.210
输出什么内形

12:36.910 --> 12:37.310
保存

12:38.310 --> 12:39.310
它输出就是制服串了

12:39.310 --> 12:39.710
对吧

12:39.810 --> 12:40.910
输出就是制服串了

12:41.410 --> 12:42.410
非常简单

12:42.910 --> 12:44.210
这是变量的声明

12:44.310 --> 12:45.610
这是变量的复职

12:46.010 --> 12:46.610
复职

12:47.410 --> 12:47.710
ok

12:47.710 --> 12:51.510
我们先把这个最基本的要点了解清楚

12:52.310 --> 12:53.410
好了解清楚之后

12:53.410 --> 12:54.610
我们再来看一下

12:55.010 --> 12:57.010
看一下在应用层面的一些东西

12:57.910 --> 12:58.810
一个就是

12:59.310 --> 13:02.310
变量的值是可变的

13:02.810 --> 13:03.510
什么意思呢

13:04.210 --> 13:05.310
什么意思就指的是

13:05.410 --> 13:07.110
变量可以被重新复职

13:07.810 --> 13:10.710
变量可以被重新复职

13:11.310 --> 13:14.010
新的值会覆盖

13:15.010 --> 13:16.010
原来的值

13:16.410 --> 13:18.110
新的值会覆盖原来的值

13:18.610 --> 13:19.810
比方说咱们来看一下

13:20.710 --> 13:22.010
再建个一面

13:22.110 --> 13:22.710
TESTV2

13:23.010 --> 13:23.510
也听不了

13:27.510 --> 13:28.510
这里呢比方说

13:28.610 --> 13:30.410
比方说我们这里定个变量

13:31.510 --> 13:32.110
scripps

13:32.710 --> 13:33.310
定个变量

13:34.010 --> 13:34.610
比方说A

13:35.010 --> 13:35.310
A

13:35.810 --> 13:36.210
好

13:36.710 --> 13:37.410
然后呢

13:37.510 --> 13:39.310
先给他复职为一

13:40.210 --> 13:41.310
然后咱们输出

13:42.010 --> 13:42.710
输出啥呢

13:42.810 --> 13:43.810
输出A的值

13:44.510 --> 13:46.010
输出的时候还可以这样输出

13:46.310 --> 13:47.510
先输出一个值

13:47.610 --> 13:48.610
然后再用斗号

13:48.810 --> 13:49.510
再用斗号

13:49.610 --> 13:51.110
再输出Type of A

13:51.310 --> 13:52.510
这样子输出什么意思呢

13:52.710 --> 13:54.010
先把A的值输出

13:54.510 --> 13:56.310
然后再输出A的类型

13:56.910 --> 13:58.410
它会在一行内输出

13:58.810 --> 14:00.310
这样子看上去比较方便一点

14:00.510 --> 14:01.210
咱们来看一下吧

14:01.910 --> 14:03.410
这个也非常简单好理解吧

14:03.610 --> 14:04.710
用个斗号来隔开

14:04.810 --> 14:05.810
输出第一个值

14:06.110 --> 14:07.110
输出第二个值

14:08.510 --> 14:09.110
好看一下

14:11.210 --> 14:12.010
F12

14:13.010 --> 14:14.610
你看输出的是E

14:14.710 --> 14:15.810
然后第二个值输出啥呢

14:15.910 --> 14:16.410
Number

14:16.410 --> 14:16.710
对吧

14:16.710 --> 14:17.310
Number

14:18.010 --> 14:18.910
那么表示的是

14:18.910 --> 14:20.510
它的数据是E

14:20.510 --> 14:21.810
它的类型是Number

14:22.110 --> 14:22.610
ok

14:22.810 --> 14:24.810
接下来我们再给它重新复职

14:25.410 --> 14:27.410
比方说复职为ABC

14:28.210 --> 14:28.610
好

14:28.910 --> 14:29.610
再来一次

14:29.810 --> 14:31.910
再把这个东西放过来

14:32.110 --> 14:33.010
保存看一下

14:33.710 --> 14:34.210
你看

14:34.310 --> 14:36.610
它第二次输出的时候再看它代码

14:37.110 --> 14:39.910
第二次输出的时候它就输出了啥了

14:40.010 --> 14:41.610
A里边存放的就不再是E了

14:41.610 --> 14:43.010
它存放了ABC

14:43.110 --> 14:44.910
然后类型变成了制符串

14:45.610 --> 14:46.510
这说明了啥

14:46.810 --> 14:50.910
这说明了在GS里边量的类型是可以变化的

14:51.410 --> 14:52.110
在其他语言

14:52.110 --> 14:53.910
很多强类型语言里边是不会的

14:53.910 --> 14:56.510
我们之前讲过GS是弱类型语言

14:56.510 --> 14:58.210
为什么弱类型就是这个原因

14:58.710 --> 15:00.310
它里边存的数据是可以变的

15:00.610 --> 15:01.710
一会可以存数字

15:01.710 --> 15:03.910
一会可以存制符串

15:04.010 --> 15:05.910
但是在别的语言里边你存数字

15:06.110 --> 15:07.110
你数字可以变

15:07.110 --> 15:08.710
但是你只能还是数字

15:08.710 --> 15:09.810
你不能是变成制符串

15:10.110 --> 15:11.510
但是在GS里边是可以的

15:11.810 --> 15:12.410
是可以的

15:12.610 --> 15:14.710
甚至我们还可以把A变成什么了

15:14.710 --> 15:16.810
undefend都可以

15:17.410 --> 15:17.910
你看

15:19.890 --> 15:21.890
你看undefend的类型也是undefend的

15:22.890 --> 15:24.890
我们这里再来解释一下

15:24.890 --> 15:26.890
你看整个程序运行的过程

15:27.090 --> 15:28.890
先声明一个变量

15:29.090 --> 15:30.290
里边是啥都没有对吧

15:30.390 --> 15:32.290
比方说如果我们在这个时候再输出

15:32.990 --> 15:34.190
那么第一次输出啥

15:34.790 --> 15:35.990
是不是还是undefend的

15:36.290 --> 15:37.490
类型也为undefend的

15:37.890 --> 15:38.390
看一下

15:38.890 --> 15:40.490
undefend的类型也是undefend的

15:41.590 --> 15:43.690
先输出A

15:43.690 --> 15:44.990
那么A里边是undefend的

15:44.990 --> 15:45.990
类型是undefend的

15:46.190 --> 15:47.790
然后再把1存进去

15:48.890 --> 15:50.390
这个房间里边存了一个1

15:50.590 --> 15:51.490
一个数字1

15:51.490 --> 15:52.890
于是现在输出的是1

15:52.890 --> 15:53.890
类型是number

15:54.290 --> 15:56.090
然后再重新存一个制符串

15:56.090 --> 15:57.090
之前的1就没了

15:57.090 --> 15:57.690
就没了

15:57.690 --> 15:58.590
它不会重叠的

15:58.590 --> 15:59.290
不会重叠的

15:59.290 --> 16:00.490
之前的东西就直接扔掉了

16:00.490 --> 16:00.990
不要了

16:01.490 --> 16:02.690
重新存一个abc

16:02.890 --> 16:04.790
那么就现在输出制符串abc

16:04.790 --> 16:05.690
类型是制符串

16:06.290 --> 16:07.490
又存一个undefend

16:07.490 --> 16:08.890
那这些东西啥都没了

16:09.390 --> 16:11.590
那么现在的值是undefend的

16:11.790 --> 16:13.090
类型也是undefend的

16:13.290 --> 16:14.090
明白这个意思吗

16:14.290 --> 16:15.590
既然叫做变量

16:15.790 --> 16:17.590
它的值是可以变化的

16:17.790 --> 16:18.690
是可以变化的

16:18.790 --> 16:19.590
这是第一个点

16:19.690 --> 16:20.590
大家注意一下

16:22.190 --> 16:22.890
第二个点

16:23.390 --> 16:23.990
第二个点

16:24.490 --> 16:27.990
是变量的名称

16:28.590 --> 16:29.590
变量的名称

16:30.190 --> 16:31.590
这里我要说一下

16:32.290 --> 16:34.890
在开发中

16:35.690 --> 16:36.590
在开发中

16:37.890 --> 16:43.290
凡是需要自行命名的位置

16:44.490 --> 16:46.390
叫做标志符

16:47.090 --> 16:47.890
叫做标志符

16:47.890 --> 16:49.090
也叫做标识符

16:49.290 --> 16:50.090
标志符

16:50.290 --> 16:52.090
我们平时住的都是标志符

16:53.090 --> 16:54.090
那么标志符

16:54.090 --> 16:56.190
就是你要自己命名的位置

16:56.190 --> 16:57.090
叫做标志符

16:57.190 --> 16:58.290
标志符的命名

16:58.290 --> 16:59.290
你不能随便命的

16:59.490 --> 17:00.390
你不能随便写的

17:01.090 --> 17:02.490
标志符的命名

17:02.490 --> 17:04.090
它要符合一期的规范

17:04.490 --> 17:05.290
有哪些规范

17:05.990 --> 17:07.090
我们这里说一下

17:07.290 --> 17:08.890
标志符的规范

17:09.490 --> 17:10.290
有哪些呢

17:10.690 --> 17:11.490
第一个规范

17:11.690 --> 17:13.490
第一个规范是

17:14.090 --> 17:19.490
只能以英文字母

17:20.490 --> 17:21.590
下滑线

17:23.890 --> 17:25.390
或者是多乐符号

17:27.290 --> 17:28.490
多乐符号开始

17:29.190 --> 17:29.690
开头

17:31.090 --> 17:33.690
你这个就是变量

17:33.690 --> 17:34.690
变量是个标志符

17:34.690 --> 17:35.090
对吧

17:35.090 --> 17:35.890
你可以这样子写

17:36.390 --> 17:37.290
这样写没问题

17:37.290 --> 17:37.690
没问题

17:37.690 --> 17:38.890
一个多乐符号没问题

17:39.590 --> 17:40.890
一个下滑线开头

17:41.290 --> 17:42.090
一个下滑线

17:42.090 --> 17:43.390
下滑线在这

17:43.890 --> 17:44.790
英文的注意

17:44.790 --> 17:46.890
就是键盘上0

17:47.190 --> 17:48.090
上面这个0

17:48.090 --> 17:49.290
也算是567890

17:49.290 --> 17:51.290
后边那个按键

17:51.290 --> 17:52.190
按住Shift

17:52.290 --> 17:53.290
然后再按这个键

17:53.290 --> 17:54.290
就是个下滑线

17:54.490 --> 17:55.790
可以下滑线开头

17:55.790 --> 17:57.090
可以英文字母开头

17:57.090 --> 17:57.690
都没有问题

17:57.890 --> 17:58.690
都没有问题

18:00.390 --> 18:01.890
第二个第二个规则

18:05.090 --> 18:05.890
中间啊

18:05.890 --> 18:06.890
就其他位置

18:07.790 --> 18:08.990
就是除了开头之外

18:08.990 --> 18:11.290
其他位置可以出现

18:11.990 --> 18:14.290
数字英文字母

18:15.090 --> 18:15.890
下滑线

18:17.090 --> 18:17.790
下滑线

18:18.090 --> 18:19.390
其他位置可以出现这些东西

18:20.190 --> 18:20.690
比方说

18:20.790 --> 18:21.890
这后面出现一个

18:22.290 --> 18:23.290
下滑线没问题

18:23.590 --> 18:25.090
出现一个数字没问题

18:25.090 --> 18:26.590
出现个英文字母没问题

18:26.990 --> 18:27.690
出现多乐

18:27.890 --> 18:28.990
而且多乐也没问题

18:28.990 --> 18:29.890
多乐也没问题

18:30.390 --> 18:31.390
下滑线多乐

18:34.430 --> 18:36.130
在有些语言里面多的是不行的

18:36.230 --> 18:37.830
但是在GS里面是可以的

18:37.830 --> 18:39.330
像多了在这里也没问题的

18:40.430 --> 18:41.130
好这里

18:41.430 --> 18:43.030
就是你可以这样子许写

18:43.030 --> 18:43.930
变量的名称

18:44.130 --> 18:45.430
比方说我们这里把这个名字

18:45.430 --> 18:46.330
重新命名一下

18:46.330 --> 18:47.330
重新命名一下

18:47.530 --> 18:49.630
比方说我们这里按一下F2

18:49.830 --> 18:50.730
按一下F2

18:50.730 --> 18:51.430
看一下啊

18:52.030 --> 18:52.730
F2

18:53.430 --> 18:54.230
怎么不起作用了

18:54.230 --> 18:54.930
那这样吧

18:55.030 --> 18:55.530
这样吧

18:56.330 --> 18:57.830
concult加d

18:57.830 --> 18:59.330
来一次选中我们的

18:59.530 --> 19:00.330
这些名字

19:01.030 --> 19:02.330
这是选中多了

19:03.330 --> 19:04.830
点击右键我看一下

19:06.230 --> 19:06.930
F

19:07.230 --> 19:09.330
为什么不能直接重新名呢

19:12.040 --> 19:12.540
稍等

19:12.840 --> 19:13.240
稍等

19:14.840 --> 19:15.240
哎

19:15.740 --> 19:17.540
我不在介石文件里边

19:17.540 --> 19:18.940
我不在介石文件里边

19:18.940 --> 19:19.840
所以说不行啊

19:20.040 --> 19:20.740
所以不行

19:20.840 --> 19:22.140
那我们这里这样子吧

19:22.440 --> 19:22.940
这样子

19:24.440 --> 19:25.940
我们这里把这个选中

19:25.940 --> 19:27.140
按住concult加d

19:27.840 --> 19:28.840
这样子全部选中

19:28.840 --> 19:30.040
把这些A全部选中

19:30.240 --> 19:31.440
好选中过后一起命名

19:31.440 --> 19:32.240
一起命名

19:32.840 --> 19:34.140
这里呢书写个

19:34.740 --> 19:35.940
多罗开头

19:36.140 --> 19:38.040
abc下滑线

19:38.340 --> 19:40.540
321123

19:40.740 --> 19:42.140
然后呢在多罗

19:42.940 --> 19:44.040
把它变成这个名字

19:44.240 --> 19:45.440
把这个变量变成这个名字

19:45.440 --> 19:46.340
咱们来看一下啊

19:46.540 --> 19:46.940
保存

19:48.440 --> 19:50.140
你看一下是不是仍然可以得到结果

19:50.240 --> 19:51.240
刷新你看一下

19:51.740 --> 19:54.440
刷新的意思就是让整个程序重新运行

19:54.440 --> 19:56.140
之前的运行就直接丢漆掉了

19:56.240 --> 19:56.940
重新运行

19:57.340 --> 19:58.240
重新运行一遍

19:58.740 --> 20:00.240
你看是不是仍然可以啊

20:00.240 --> 20:00.940
仍然可以

20:01.040 --> 20:02.840
说这些呢都是有效制服啊

20:02.840 --> 20:04.140
都是有效制服

20:04.640 --> 20:05.840
但是呢你注意

20:06.640 --> 20:08.440
你是不能以数字开头的

20:08.640 --> 20:10.040
你不能以数字开头啊

20:10.040 --> 20:11.840
比方说你这里写个1啊

20:11.940 --> 20:12.540
那是不行的

20:12.540 --> 20:13.140
他要冒错的

20:13.140 --> 20:14.040
这是与法错误

20:14.140 --> 20:16.040
你不能以数字开头啊

20:16.040 --> 20:17.140
大家注意一下这个点

20:17.440 --> 20:19.940
但是平时我们命名变量真的是这样命名吗

20:20.540 --> 20:21.940
这样命名变量要封掉啊

20:21.940 --> 20:23.040
肯定要封掉

20:23.140 --> 20:24.940
所以说呢还有一些

20:25.740 --> 20:26.340
这是

20:26.840 --> 20:28.340
这是必须要满足的要求

20:29.040 --> 20:30.540
我们前面加个加个吃吧

20:30.640 --> 20:31.440
就必须

20:32.040 --> 20:32.540
必

20:33.640 --> 20:35.040
必须要满足要求

20:36.040 --> 20:36.940
后边呢

20:37.440 --> 20:39.140
后边有一些要求是可选的

20:40.640 --> 20:41.040
选

20:41.540 --> 20:42.340
是可选的

20:43.140 --> 20:45.440
但是呢也建议大家一定要满足这个要求

20:45.740 --> 20:46.940
可选的要求是什么呢

20:46.940 --> 20:48.240
是一些命名规范啊

20:48.240 --> 20:48.940
一些规范

20:49.440 --> 20:51.440
我们变量虽然是可以这样的命名

20:51.440 --> 20:51.740
他

20:51.940 --> 20:53.340
与法上并没有错

20:53.940 --> 20:55.740
你说这个代码能读吗

20:56.140 --> 20:56.840
能读这个代码

20:56.840 --> 20:58.140
论啥玩意这个东西

20:58.140 --> 20:58.840
根本读不住

20:58.840 --> 21:00.140
不知道什么意思啊

21:00.240 --> 21:01.840
所以说呢变量要用的

21:01.940 --> 21:02.640
变量

21:03.040 --> 21:04.140
啊就标志服

21:04.940 --> 21:06.440
应该做到

21:07.040 --> 21:08.840
汪文之义啊

21:09.240 --> 21:10.540
汪文之义

21:13.040 --> 21:17.040
汪文之道

21:18.240 --> 21:19.740
啊要做到汪文之义

21:19.740 --> 21:20.540
应该是这样子

21:20.540 --> 21:21.840
一一的一

21:22.940 --> 21:24.340
就是说你看到这个名字

21:24.340 --> 21:26.040
你就知道它是什么意思的啊

21:26.040 --> 21:27.740
最好是能打到这样的效果

21:27.840 --> 21:28.740
比方说这边啊

21:28.840 --> 21:30.240
这边pid什么意思

21:30.240 --> 21:32.740
我们平时开发的时候pid就表示身份证号

21:33.440 --> 21:35.740
好有些人说我哪记得住这么有单词啊

21:35.940 --> 21:37.440
没关系你跟着我写

21:37.440 --> 21:39.740
慢慢的有些常见的单词你又知道了啊

21:39.840 --> 21:41.340
一开始呢你不知道没关系

21:41.640 --> 21:42.840
你至少用拼音

21:43.240 --> 21:46.340
至少用拼音千万不要过来个什么abc 123

21:46.340 --> 21:48.940
啊我这里写abc是因为我自然讲语法

21:48.940 --> 21:50.140
它没有实际含义

21:50.240 --> 21:51.940
但是以后我们写程序的时候

21:51.940 --> 21:53.440
都是有实际含义的

21:53.540 --> 21:55.840
每个变量不要说存一个宽度啊

21:55.940 --> 21:57.740
宽度那么我们会写个变量啊

21:58.340 --> 22:00.140
我举个例子啊比如

22:01.640 --> 22:03.640
比如宽度啊宽度的话

22:03.640 --> 22:04.940
我会用变量的名字叫什么了

22:04.940 --> 22:06.340
叫位置啊

22:06.440 --> 22:08.440
你看这个这个时候单词是不是学过的

22:08.540 --> 22:08.940
对不对

22:08.940 --> 22:11.640
你写atima和css的时候是不是做过了啊

22:11.640 --> 22:13.740
高度我会用变量什么名字

22:13.840 --> 22:15.240
我会用height对吧

22:15.240 --> 22:16.640
height好

22:16.640 --> 22:18.840
比方说一个区域区域的话

22:18.840 --> 22:21.340
我们可以用areer对吧

22:21.440 --> 22:22.640
用一些常见的单词

22:22.740 --> 22:24.340
哪怕你不知道啊

22:24.340 --> 22:25.540
你不知道单词怎么办

22:25.540 --> 22:27.640
怎么办你可以写个拼音嘛

22:27.740 --> 22:29.840
区域这样也行

22:29.840 --> 22:31.240
但是拼音不要写错了啊

22:31.540 --> 22:32.440
拼音不要写错了

22:32.440 --> 22:33.240
你别说

22:33.640 --> 22:35.340
不少同学拼音都写错了

22:35.440 --> 22:37.540
我们是特别在线下授课的时候

22:37.540 --> 22:39.040
哎呀这个脑壳痛啊真的是

22:39.840 --> 22:40.640
拼音都写不对

22:40.640 --> 22:42.140
真的是非常非常老虎啊

22:42.140 --> 22:43.440
拼音至少得要写对吧

22:43.840 --> 22:44.340
一开始呢

22:44.340 --> 22:45.640
你不熟悉这单词都没事

22:45.640 --> 22:46.540
其实你很简单啊

22:46.540 --> 22:47.540
你去百度查一查

22:47.540 --> 22:48.440
不是有翻译吗

22:48.540 --> 22:50.240
因为查一查也单词就行了啊

22:50.640 --> 22:52.340
尽量做到忘文之意

22:52.540 --> 22:54.240
看到这个名字就知道这个变量表

22:54.240 --> 22:55.840
保存的是什么东西了啊

22:56.140 --> 22:57.140
保存的是什么东西

22:57.240 --> 22:59.240
这样子的好处在于在于什么呢

22:59.240 --> 23:01.240
我们不用把这个变量的数据拿出来

23:01.240 --> 23:02.540
我们看阅读代码的时候

23:02.540 --> 23:05.240
一看这个名字哦里面存的是宽度高度

23:05.440 --> 23:07.140
还有什么区域一下就知道了

23:08.340 --> 23:09.540
好这关于这一点

23:09.840 --> 23:10.840
好另外一个呢

23:10.840 --> 23:12.140
也是可选的规则啊

23:12.140 --> 23:13.640
那这个规则大家一定要满足啊

23:13.640 --> 23:15.140
在我这里不是可选的了啊

23:15.240 --> 23:16.640
我这里可以说清楚啊

23:17.140 --> 23:18.940
不是必须要满足的规则

23:18.940 --> 23:20.840
但是呢在我这里就是必须要满足的

23:20.940 --> 23:22.640
标志符呢要做到忘文之一

23:23.040 --> 23:24.340
好另外一点呢就是

23:25.340 --> 23:28.540
如果有多个单词啊

23:28.740 --> 23:30.040
有多个单词

23:31.040 --> 23:33.040
使用陀封命名法

23:33.440 --> 23:36.340
命名法好什么叫陀封命名法呢

23:36.440 --> 23:38.040
就是单词

23:38.640 --> 23:40.740
手字母大写

23:41.640 --> 23:42.140
大写

23:43.440 --> 23:44.940
单词的手字母大写

23:45.140 --> 23:46.140
好这里我要说一下

23:46.540 --> 23:48.540
陀封命名法里边有两种

23:49.240 --> 23:50.040
陀封命名法

23:50.340 --> 23:51.440
一个是大陀封

23:52.440 --> 23:53.040
啊

23:53.440 --> 23:55.740
这个大写单词呢就是要冒出来一节

23:55.740 --> 23:57.640
对吧就好像是骆驼的陀封一样

23:57.740 --> 23:59.940
成一个就是起伏不定的波浪线

23:59.940 --> 24:01.740
看上去好像是骆驼的陀封啊

24:01.840 --> 24:04.140
就是陀封命名法的这个名字的由来

24:04.440 --> 24:05.840
大陀封是什么意思呢

24:05.840 --> 24:06.540
指的是

24:06.940 --> 24:08.140
每一个单词

24:09.140 --> 24:11.340
哎每个单词手字母大写

24:12.540 --> 24:12.940
啊

24:13.340 --> 24:14.140
这大陀封

24:14.440 --> 24:15.540
小陀封呢

24:16.040 --> 24:17.040
小陀封呢

24:17.340 --> 24:20.140
是每除手个单词外啊

24:20.140 --> 24:22.240
除第一个单词外

24:23.040 --> 24:24.740
手字母大写

24:25.540 --> 24:25.840
啊

24:26.340 --> 24:29.940
目前我们用的陀封命名法全是小陀封

24:30.140 --> 24:30.540
啊

24:31.340 --> 24:34.540
目前使用的标志符

24:34.840 --> 24:36.440
就是变量吧目前我们只学的变量

24:36.440 --> 24:36.840
对吧

24:36.940 --> 24:38.840
使用标志符这个位置啊

24:38.840 --> 24:40.040
使用标志符

24:40.340 --> 24:43.240
的标志符都是小陀封命名法

24:45.410 --> 24:46.210
讲清楚了吧

24:46.710 --> 24:48.310
所以说那里这里该怎么命名

24:48.310 --> 24:49.010
比方说啊

24:49.010 --> 24:50.510
咱们这里再写个页面啊

24:51.210 --> 24:51.610
啊

24:52.210 --> 24:53.010
再写个页面

24:54.810 --> 24:55.310
啊

24:56.110 --> 24:57.610
比方说啊这里有个变量

24:57.710 --> 24:59.310
我要记录啥呢啊

25:00.010 --> 25:00.910
一个变量

25:01.710 --> 25:03.510
用于记录啊

25:03.610 --> 25:06.610
一个举行的宽度啊

25:06.610 --> 25:07.710
一个举行的宽度

25:07.810 --> 25:09.010
举行我单词告诉你

25:09.310 --> 25:10.410
举行单词我告诉你

25:10.510 --> 25:11.510
叫rectangle

25:11.910 --> 25:12.310
啊

25:12.310 --> 25:13.610
宽度的单词我告诉你

25:13.910 --> 25:15.610
叫做位置啊位置

25:16.110 --> 25:17.510
啊你怎么命名这个变量

25:18.310 --> 25:18.710
啊

25:18.910 --> 25:20.010
有什么可以这样命名啊

25:20.010 --> 25:21.110
rectangle

25:21.310 --> 25:21.710
你看

25:22.110 --> 25:23.510
后边是不是另一个单词了

25:23.610 --> 25:24.210
宽度

25:24.610 --> 25:25.910
宽度第一个字么是不大写

25:26.310 --> 25:27.110
位置

25:28.510 --> 25:28.710
啊

25:28.710 --> 25:30.110
就是这一句话

25:30.510 --> 25:31.710
你别说我给说

25:32.710 --> 25:34.210
你就把这一句话写出来

25:34.810 --> 25:36.310
你其他什么代表都不用写

25:36.510 --> 25:38.710
光这一句话你能把写出来

25:39.510 --> 25:41.710
看上去你看不出来你是个新手了

25:41.910 --> 25:43.210
你就看不出来一个新手了

25:43.610 --> 25:44.010
啊

25:44.410 --> 25:46.410
如果你够这样子写宽度

25:47.610 --> 25:50.210
一看就是新手毫无疑问的新手啊

25:50.310 --> 25:51.410
新的不能再新了

25:52.810 --> 25:54.210
然后你给我来个这个东西

25:55.010 --> 25:56.210
啊比方说啊

25:56.510 --> 25:57.910
比方说你的名字呢

25:58.410 --> 25:59.010
叫做

26:00.210 --> 26:02.910
棒棒鸡啊比方说你的名字叫棒棒鸡啊

26:02.910 --> 26:03.810
棒棒鸡

26:04.110 --> 26:04.510
1

26:05.110 --> 26:06.110
棒棒鸡2

26:06.410 --> 26:07.310
棒棒鸡3

26:07.510 --> 26:09.610
如果这样的命名那就不是新手的问题了

26:09.710 --> 26:11.010
那是傻不傻必的问题了

26:11.310 --> 26:12.110
你还这个意思吧

26:12.410 --> 26:13.410
啊以前呢

26:14.510 --> 26:15.710
以前我有一个同学啊

26:15.710 --> 26:17.410
一个同学他命名的时候

26:17.510 --> 26:18.710
登了特别牢火

26:18.810 --> 26:20.110
他就是用自己的名字啊

26:20.110 --> 26:21.810
他叫王杰他的名字权

26:21.810 --> 26:23.010
他的辩量名字权是

26:23.310 --> 26:25.210
王杰1王杰2王杰3王杰4

26:25.210 --> 26:26.310
到后边王杰100

26:26.910 --> 26:28.110
我靠我知我知道你的

26:28.310 --> 26:29.910
这些辩量是什么意思啊

26:29.910 --> 26:30.810
你就不要问我问题

26:30.810 --> 26:31.310
你问我问题

26:31.310 --> 26:33.310
我根本就不知道你这个代码怎么去阅读

26:33.610 --> 26:34.710
没法阅读你的代码

26:35.010 --> 26:36.810
不知道每个辩量里面存放什么东西

26:36.910 --> 26:38.210
到后来他自己都不知道了

26:38.510 --> 26:39.510
你写了这么多辩量

26:39.510 --> 26:41.310
你鬼知道之前是想的是啥呢

26:41.710 --> 26:43.810
一定要用用一个有意义的名字啊

26:44.110 --> 26:44.810
我刚才说了

26:44.910 --> 26:46.810
如果你哎你这样子写了

26:47.510 --> 26:48.210
这样子写了

26:48.310 --> 26:49.910
至少从这一代码上看不出来

26:49.910 --> 26:52.310
任何也是新手的迹象看不出来

26:53.110 --> 26:54.710
因为老手都就是这样命名的

26:54.710 --> 26:56.810
你看小陀峰命名法

26:57.010 --> 26:58.510
第一个单词手这么不大写

26:58.510 --> 27:00.110
第二单词开始手这么大写

27:00.810 --> 27:02.110
啊当然举行这个呢

27:02.110 --> 27:03.610
我们通常会缩写对吧

27:03.810 --> 27:06.110
通常会一些很长的单词会进行缩写

27:06.110 --> 27:08.210
比方说我们举行通常会缩写成这个

27:08.410 --> 27:08.910
rigs

27:09.310 --> 27:09.810
rigs

27:10.010 --> 27:11.010
表示举行的宽度

27:11.010 --> 27:11.910
你看一下这个

27:12.010 --> 27:13.710
我们以后现在你看的不熟悉吗

27:13.810 --> 27:14.910
以后我们看熟悉了

27:15.310 --> 27:17.310
是不是一下就看出来他是举行的宽度了

27:17.610 --> 27:19.210
都不用去去想啊

27:19.210 --> 27:20.710
不用去把他的内容打印出来

27:20.710 --> 27:22.110
都知道这是举行的宽度

27:22.310 --> 27:24.410
不用去看注释都可以清楚的知道

27:24.410 --> 27:25.510
这是举行的宽度了

27:25.810 --> 27:28.010
因为我们将来肯定要定义很多变量的

27:28.010 --> 27:28.610
比方说啊

27:28.910 --> 27:30.710
还要定义举行的高度对吧

27:30.910 --> 27:32.210
举行的高度啊

27:32.210 --> 27:34.610
举行的面积啊rigs a rear

27:34.610 --> 27:35.010
你看

27:35.410 --> 27:36.410
举行的面积

27:37.710 --> 27:38.110
对吧

27:38.110 --> 27:40.910
我们就可以用这种方式来命名变量啊

27:40.910 --> 27:42.410
所以大家命名变量的时候

27:42.910 --> 27:44.010
一开始麻烦一点

27:44.010 --> 27:45.910
查查单词不要紧

27:45.910 --> 27:47.210
后面就越写越快了啊

27:47.210 --> 27:48.710
因为常见的就那么一些

27:48.810 --> 27:49.710
什么姓名啊

27:49.710 --> 27:50.610
name对不对

27:50.610 --> 27:51.610
你看我上节课

27:51.910 --> 27:53.110
上节课写对象的时候

27:53.110 --> 27:54.010
大家看一下吧

27:54.010 --> 27:56.110
我写的对象的时候都是用标准命名法的

27:56.110 --> 27:56.610
你看

27:57.110 --> 27:58.110
小陀佛命名法

27:58.110 --> 28:00.410
name啊表示的是什么啊

28:00.410 --> 28:03.610
你称name啊表示的是名称

28:03.610 --> 28:05.910
a几年年间调性别而追视

28:06.010 --> 28:08.210
表示弟子girlfriend表示女朋友

28:08.210 --> 28:08.610
对吧

28:09.010 --> 28:09.810
都是这样子写的

28:09.810 --> 28:10.310
你看到没

28:11.110 --> 28:12.910
好都是关于命名这一块啊

28:12.910 --> 28:13.710
变量的名称

28:13.710 --> 28:14.710
大家一定要注意啊

28:14.710 --> 28:15.710
千万不要给我来个

28:16.010 --> 28:16.710
以后做开发

28:16.710 --> 28:18.810
就是做实有实际意义的开发

28:18.910 --> 28:19.910
不是练习语法

28:19.910 --> 28:21.010
练习语法无所谓

28:21.010 --> 28:22.210
因为abc都无所谓

28:22.210 --> 28:23.710
我们只是练习语法嘛

28:23.910 --> 28:26.110
如果你做实际有意义的开发的时候

28:26.110 --> 28:27.010
一定要注意

28:27.110 --> 28:28.410
变量的名字啊

28:28.410 --> 28:29.310
千万不要乱写

28:29.810 --> 28:30.210
好吧

28:30.210 --> 28:31.310
这是关于标志符啊

28:31.310 --> 28:32.210
不仅仅是变量啊

28:32.210 --> 28:33.310
不仅仅是变量

28:33.410 --> 28:34.610
实际上我们上节

28:34.610 --> 28:36.010
上节课讲到这个对象里边的

28:36.010 --> 28:37.010
这些属性的名字

28:37.010 --> 28:38.210
他也是标志符

28:38.710 --> 28:39.810
他也是标志符

28:40.010 --> 28:42.210
也应该使用小陀佛命名法

28:42.310 --> 28:42.710
看没

28:42.710 --> 28:43.510
这些属性

28:43.510 --> 28:44.710
也是标志符啊

28:44.710 --> 28:46.910
也应该使用小陀佛命名法

28:47.910 --> 28:48.810
讲清楚了吧

28:48.810 --> 28:49.010
好

28:49.010 --> 28:51.410
这是关于变量的名称

28:51.410 --> 28:51.910
好

28:52.110 --> 28:52.710
下面这个

28:53.910 --> 28:54.910
下面这个就是

28:55.210 --> 28:58.010
声明和负职合并

28:58.810 --> 28:59.510
啥意思呢

28:59.610 --> 29:01.610
就是变量的声明

29:02.510 --> 29:03.610
和负职

29:03.910 --> 29:05.710
可以一条语句

29:06.310 --> 29:07.410
书写啊

29:07.410 --> 29:08.910
在一条语句里边直接书写

29:08.910 --> 29:10.410
他是为了让你方便啊

29:10.410 --> 29:11.910
为了让你方便啊

29:12.010 --> 29:12.810
比方说啊

29:12.910 --> 29:14.210
咱们这里的定了三个

29:14.210 --> 29:14.710
对吧

29:14.710 --> 29:16.110
定了一个变量吧

29:16.110 --> 29:16.910
就一个变量

29:17.110 --> 29:17.410
好

29:17.410 --> 29:17.710
这里呢

29:17.710 --> 29:18.910
我们给大家负职啊

29:18.910 --> 29:19.610
负职

29:20.310 --> 29:21.410
负职为比方说啊

29:21.410 --> 29:21.910
宽度

29:21.910 --> 29:23.410
宽度肯定是一个数字吧

29:23.410 --> 29:24.110
肯定是一个数字

29:24.110 --> 29:24.610
对不对

29:24.610 --> 29:25.410
比方说一百

29:25.510 --> 29:26.610
给他完成负职

29:27.210 --> 29:27.410
好

29:27.410 --> 29:28.110
负职过后

29:28.410 --> 29:29.010
现在运行出来

29:29.010 --> 29:30.110
有没有能不能看到效果

29:30.110 --> 29:30.910
顺便问一句啊

29:30.910 --> 29:31.810
顺便问一句

29:32.610 --> 29:33.110
运行出来

29:33.110 --> 29:34.110
能不能看到效果

29:35.210 --> 29:36.710
看不到任何的效果

29:36.710 --> 29:38.010
看不到任何的效果

29:38.010 --> 29:38.910
为什么呢

29:39.210 --> 29:40.910
因为这个变量没有输出嘛

29:40.910 --> 29:43.210
我们只有输出过后才能看到效果

29:43.210 --> 29:45.010
但是数据已经存进去了啊

29:45.010 --> 29:46.510
数据肯定是存进去了

29:47.010 --> 29:47.510
好吧

29:47.610 --> 29:48.810
这是关于这一块啊

29:49.910 --> 29:50.110
好

29:50.110 --> 29:51.610
那么这两句话呢

29:51.610 --> 29:53.010
实际上是可以合并的

29:53.610 --> 29:54.510
合并怎么写呢

29:55.010 --> 29:55.910
合并就这样写

29:56.110 --> 29:57.210
就按了啊

29:57.610 --> 29:58.210
这就是

29:58.810 --> 29:59.610
声明

30:00.410 --> 30:02.910
并完成负职啊

30:02.910 --> 30:04.310
声明的同时开一个房间

30:04.310 --> 30:05.410
马上就进去了啊

30:05.410 --> 30:07.510
马上就放个东西进去啊

30:07.510 --> 30:09.110
就声明并完成负职

30:09.110 --> 30:11.010
这就是这句话的含义

30:11.210 --> 30:12.410
啊就可以合并的

30:12.510 --> 30:14.010
那么合并的时候呢

30:14.010 --> 30:15.410
实际上啊

30:15.710 --> 30:17.210
啊这是余法堂

30:18.710 --> 30:19.610
这是余法堂

30:19.710 --> 30:21.010
以后呢我会用这个词

30:21.010 --> 30:22.310
我一说到余法堂

30:22.310 --> 30:23.610
你要知道是什么意思

30:23.910 --> 30:25.510
余法堂的作用是什么呢

30:25.810 --> 30:26.910
余法堂

30:27.110 --> 30:29.910
仅仅是为了方便

30:30.010 --> 30:31.310
代码书写

30:31.810 --> 30:33.910
或方便你的记忆

30:34.410 --> 30:35.610
啊方便你的记忆

30:35.910 --> 30:36.910
并不会

30:37.310 --> 30:41.510
有实质性的改变

30:42.410 --> 30:43.110
举个例子吧

30:43.510 --> 30:46.410
比方说最近比较火的一个游戏

30:46.410 --> 30:48.910
叫做绝地求生

30:49.710 --> 30:51.610
刺激战场对吧

30:51.610 --> 30:53.910
很多同学都在玩啊

30:53.910 --> 30:55.310
我也玩了一段时间啊

30:55.310 --> 30:58.010
发现了我只能混啊只能混

30:58.310 --> 31:00.510
这个游戏呢就是一大堆人啊

31:00.510 --> 31:02.510
最后呢就伸出一组啊

31:02.510 --> 31:04.110
伸出一个或者是一组人

31:04.410 --> 31:05.310
胜利的之后呢

31:05.310 --> 31:06.510
他会有这么一句话啊

31:06.710 --> 31:07.710
大吉大利

31:07.710 --> 31:08.810
晚上吃鸡

31:09.010 --> 31:09.810
所以说呢

31:09.910 --> 31:12.010
这其实这句话是来自于拉斯维加斯的

31:12.010 --> 31:13.410
独场里边有句话啊

31:14.810 --> 31:15.910
那么这这句话呢

31:15.910 --> 31:17.710
我们就用这句话后边两个字叫做

31:17.710 --> 31:18.410
吃鸡

31:18.910 --> 31:20.910
来代表这个游戏本身

31:21.010 --> 31:24.310
于是呢我们晚上我就有邀请啊

31:24.310 --> 31:26.210
同邀请朋友来玩这个游戏呢

31:26.210 --> 31:27.810
就是晚上我们吃鸡对吧

31:27.810 --> 31:29.310
就不会不会去说

31:29.310 --> 31:31.410
晚上我们去玩绝地求生

31:31.410 --> 31:33.210
刺激战场这样说太麻烦了

31:33.510 --> 31:35.310
那么吃鸡这两个字

31:35.410 --> 31:36.610
其实就是余法堂

31:36.910 --> 31:40.210
他能够方便我们表达方便我们记忆的东西

31:40.410 --> 31:42.010
但是呢他并没有改变

31:42.110 --> 31:44.010
任何的实质性的内容啊

31:44.010 --> 31:45.110
游戏还是个游戏

31:45.110 --> 31:47.210
他没有改变他的实质啊

31:47.210 --> 31:49.710
只是为了方便书写或者是记忆

31:49.910 --> 31:51.810
那么这里就是为了方便书写对吧

31:52.710 --> 31:53.310
看这里

31:55.210 --> 31:55.810
这一块

31:56.910 --> 31:58.510
这一块就是为了方便书写对吧

31:58.610 --> 32:01.010
森林和父子本来是分开的

32:01.610 --> 32:03.510
但是呢你可以把合并到一起写

32:03.610 --> 32:05.310
实际上他运行的时候

32:05.310 --> 32:06.710
他一定是分开运行的

32:06.910 --> 32:09.410
他会把这个语句呢看成是两条语句

32:10.310 --> 32:11.410
他等效于

32:12.310 --> 32:13.310
等效于

32:13.810 --> 32:15.510
实际上啊就最终的效果

32:15.510 --> 32:16.610
他实际上是这样子的

32:17.010 --> 32:18.410
rigged width

32:18.910 --> 32:19.710
rigged width

32:20.110 --> 32:22.010
先声明然后再复制

32:23.710 --> 32:24.510
明白这个意思吧

32:24.810 --> 32:26.110
实际上等效于这个

32:26.310 --> 32:27.310
等效于这个

32:27.810 --> 32:29.110
只是个余法堂而已

32:29.710 --> 32:30.710
这是关于这一点

32:31.610 --> 32:33.110
这里边有很多注意事项啊

32:33.110 --> 32:34.710
大家要理清楚啊

32:35.510 --> 32:37.910
好这是关于这个合并书写啊

32:38.110 --> 32:39.510
合并声明于父子

32:40.110 --> 32:41.010
好下一个啊

32:42.810 --> 32:44.310
多个变量

32:44.810 --> 32:46.110
多个变量

32:46.510 --> 32:48.510
可以合并声明

32:49.610 --> 32:50.610
并父子

32:50.910 --> 32:53.210
当然这个东西也是余法堂

32:54.410 --> 32:55.610
好咱们举个例子啊

32:55.910 --> 32:57.510
比方说是

32:58.510 --> 33:00.110
啊这里边呢

33:00.310 --> 33:02.010
有一个接下来接下来吧

33:02.410 --> 33:04.110
好比方说我们声明四个变量啊

33:04.110 --> 33:04.810
三个变量吧

33:04.810 --> 33:05.810
四个难得写了啊

33:06.010 --> 33:06.710
三个变量

33:07.010 --> 33:07.510
a

33:08.310 --> 33:08.810
b

33:09.510 --> 33:10.110
c

33:10.410 --> 33:12.510
然后呢再给 f 值为一

33:12.810 --> 33:14.910
啊然后给 b 负责为二

33:15.210 --> 33:15.610
啊

33:16.210 --> 33:18.310
大家注意啊我的书写习惯你看到没

33:18.510 --> 33:19.910
这些符号啊

33:19.910 --> 33:21.110
这个不是等号啊再说一次

33:21.110 --> 33:22.810
这个不是等号不是 a 等于 b

33:22.810 --> 33:24.310
啊不是 a 等于 1

33:24.610 --> 33:25.710
啊不是 a 等于是吧

33:25.810 --> 33:28.210
一负责给 a 一定要这样读啊

33:28.210 --> 33:29.310
从右向左读

33:29.510 --> 33:31.110
把一负责给 a

33:31.510 --> 33:33.210
那么如果你把读人等号的话

33:33.210 --> 33:34.710
你这样就很难理解了

33:34.910 --> 33:36.910
a 等于 1 为什么又 a 等于 2 呢

33:36.910 --> 33:37.710
你理解不了

33:37.810 --> 33:38.610
应该这么读

33:38.810 --> 33:40.110
把一负责给 a

33:40.210 --> 33:42.610
然后呢又把 a 2 又负责给 a

33:42.810 --> 33:43.710
那么一是不是没了

33:43.710 --> 33:44.810
它变成二了啊

33:44.910 --> 33:45.910
应该这么来读啊

33:46.310 --> 33:47.610
好然后 c 呢

33:48.010 --> 33:50.010
负责为三啊负责为三

33:50.510 --> 33:51.910
好这是我们以前的写法对吧

33:51.910 --> 33:53.310
这是正常的写法

33:53.710 --> 33:55.410
好那之后我们可以减写

33:55.510 --> 33:56.410
怎么减写呢

33:57.410 --> 33:59.510
等效语下面语法堂出现了啊

34:00.210 --> 34:01.310
语法堂出现了

34:01.410 --> 34:03.210
语法堂并不会改变它的本质

34:03.210 --> 34:05.010
本质上还是上面这种书写方式

34:05.210 --> 34:06.710
它会等效于啥呢

34:06.910 --> 34:08.810
a b c 你看

34:10.010 --> 34:12.210
a 等于 f 进行格式化

34:12.210 --> 34:15.610
它就会把这些符号外面加个空格好看一点啊

34:15.710 --> 34:17.810
有些公司这里有强制要求的

34:17.810 --> 34:19.110
必须要要求你这么写

34:19.410 --> 34:20.310
大家注意一下

34:20.610 --> 34:21.910
好然后再负责对吧

34:21.910 --> 34:23.910
a 等负责为一

34:23.910 --> 34:26.510
b负责为二 c 负责为三

34:26.710 --> 34:27.110
对吧

34:27.410 --> 34:28.710
等效语下面这种格式

34:29.510 --> 34:33.010
同时也等效语啊等效语

34:34.110 --> 34:34.910
等效语啥呢

34:36.010 --> 34:40.410
va e b 2 c 3

34:41.010 --> 34:42.210
格式化一下啊

34:42.310 --> 34:43.810
格式化过后它就变成这种格式了啊

34:43.810 --> 34:45.110
这种格式不是更加好看一点

34:45.110 --> 34:47.110
对不对更加好看一点啊

34:47.110 --> 34:48.210
你看注意是斗号啊

34:48.210 --> 34:50.010
注意是斗号英文斗号啊

34:50.010 --> 34:51.410
当然你不换行也行啊

34:51.410 --> 34:52.610
只不过换行的书写出来

34:52.610 --> 34:54.110
起来呢更加好看一点

34:54.110 --> 34:55.210
没关系啊你就随便写

34:55.210 --> 34:57.410
然后利用这个 vs code 的格式化

34:57.410 --> 34:59.510
out 加 chef 加 f 格式化一下

34:59.510 --> 35:00.610
它就自动帮你排版

35:00.710 --> 35:01.410
排版了

35:01.910 --> 35:03.410
好这就是这种书写方式

35:03.410 --> 35:05.210
你看这种书写方式是不是简化很多了

35:05.210 --> 35:06.210
这就是余法堂

35:06.310 --> 35:08.310
但是它的实际上运行的时候

35:08.310 --> 35:10.210
还是以这种方式在运行啊

35:10.310 --> 35:11.710
还是以这种方式在运行

35:11.710 --> 35:12.610
明白这个意思吧

35:12.910 --> 35:15.010
好吧好当然我们还可以定义变量啊

35:15.010 --> 35:16.310
比方说还可以定义的d

35:16.610 --> 35:17.510
格式化一下啊

35:17.710 --> 35:19.110
你看d 我没有复制对吧

35:19.110 --> 35:20.410
那么我们输出 abcd

35:20.710 --> 35:21.610
console log

35:22.910 --> 35:25.010
输出 abcd

35:25.010 --> 35:25.810
可以这样写啊

35:25.810 --> 35:27.110
可以这样子写输出四个字

35:27.410 --> 35:28.710
abcd 咱们来看一下

35:29.410 --> 35:29.910
应该是什么

35:29.910 --> 35:30.810
你觉得应该是什么

35:31.610 --> 35:33.210
说123 还有一个是啥

35:33.510 --> 35:34.410
是 undefend

35:34.810 --> 35:35.310
对吧

35:36.810 --> 35:37.610
f123

35:38.310 --> 35:40.310
你看123 undefend

35:41.210 --> 35:44.210
好这就是变量的就是合并书写

35:44.210 --> 35:46.410
合并书写非常非常的简单

35:46.410 --> 35:47.510
非常非常简单

35:48.710 --> 35:50.210
然后下面这个啊下面这个

35:50.610 --> 35:52.310
好下面的就很重要了啊

35:52.510 --> 35:54.210
我给他加上个加出的吧

35:54.810 --> 35:58.310
任何可以输写数据的地方

36:00.110 --> 36:01.910
都可以输写变量

36:02.210 --> 36:03.610
非常非常重要了啊

36:03.910 --> 36:04.610
记住这一点

36:04.610 --> 36:07.110
后边很多很多就是地方的规律

36:07.110 --> 36:08.510
我都不用去详细解释了

36:08.810 --> 36:09.810
好大家看一个例子

36:10.410 --> 36:11.110
test 5

36:13.600 --> 36:14.400
好比方说啊

36:14.600 --> 36:15.100
咱们

36:15.600 --> 36:17.100
因为变量里面存的就是数据

36:17.100 --> 36:18.500
对不对存的就是数据

36:18.600 --> 36:20.300
所以说反而是可以放数据的地方

36:20.300 --> 36:21.200
都可以放变量

36:21.600 --> 36:22.700
好比方说这里一个 a

36:23.300 --> 36:24.400
这个a这个变量

36:24.700 --> 36:26.600
好变量里面存一个比方说啊

36:26.600 --> 36:28.000
一个制服串吧啊

36:28.400 --> 36:30.000
Hello啊存个制服串

36:30.300 --> 36:31.600
好这里能我们输出 a

36:31.800 --> 36:32.500
输出 a

36:32.600 --> 36:34.500
好输出的时候这里是不是放数据

36:34.500 --> 36:35.000
对不对

36:35.000 --> 36:36.000
我们之前说过啊

36:36.000 --> 36:36.700
输出的时候呢

36:36.700 --> 36:38.200
这个小货号里面放数据

36:38.400 --> 36:39.100
好数据的话

36:39.100 --> 36:40.300
我们可以写字变量

36:40.700 --> 36:41.600
制服串字变量

36:41.700 --> 36:43.200
也可以写数字字变量

36:43.700 --> 36:44.900
是不是还可以写变量

36:45.200 --> 36:45.700
对不对

36:45.700 --> 36:46.700
还可以写变量

36:47.000 --> 36:49.000
啊哦对对我这里说一下啊

36:49.800 --> 36:51.600
这里说一下之前还没有想到这个点

36:51.800 --> 36:53.400
就是变量的名字呢

36:53.700 --> 36:54.600
还有一个要求啊

36:54.600 --> 36:56.300
变量的名字还有一个要求

36:57.200 --> 36:57.600
啊

36:59.300 --> 36:59.700
b

37:00.600 --> 37:02.300
啊不可以与

37:03.000 --> 37:03.600
与什么呢

37:03.900 --> 37:05.100
关键字

37:05.400 --> 37:08.000
关键词和保留字

37:09.000 --> 37:10.600
重复啊

37:11.000 --> 37:11.800
啊应该是这样子

37:11.900 --> 37:13.900
关键字保留词

37:14.800 --> 37:15.800
啊保留词

37:16.400 --> 37:18.900
不可以与关键字保留词重复

37:19.000 --> 37:19.800
什么意思呢

37:19.900 --> 37:20.800
以这个变量名称

37:20.800 --> 37:22.400
你不能够给我命名一个wa

37:22.700 --> 37:24.100
啊你不能这样的命名啊

37:24.100 --> 37:25.100
因为wa是什么呢

37:25.100 --> 37:27.400
wa是一个有特殊含义的关键字

37:28.200 --> 37:30.300
啊什么叫保留词呢

37:30.500 --> 37:32.800
保留词就是有一些单词呢

37:33.000 --> 37:35.700
嗯它是将来可能会有特殊含义啊

37:35.900 --> 37:38.100
将来可能会有特殊含义啊

37:38.100 --> 37:40.400
比方说保留词啊

37:40.600 --> 37:42.000
保留词比方说啊

37:43.100 --> 37:44.800
promise promise

37:44.900 --> 37:46.500
虽然这样子写你目前不报处

37:46.500 --> 37:48.300
但是你今后会遇到问题

37:48.800 --> 37:52.200
好那么大家大家如何来规避关键词和保留

37:52.400 --> 37:54.800
保留保留关键字和保留词呢

37:54.800 --> 37:56.000
如何来规避这一点呢

37:56.800 --> 37:57.600
我觉得吧

37:57.600 --> 37:58.800
你不用去多想

37:58.900 --> 38:00.000
不用去多想

38:00.100 --> 38:02.000
因为你们一定写不出来这个玩意

38:02.300 --> 38:03.500
你能写出来这个玩意吗

38:03.500 --> 38:04.600
你写不出来的啊

38:04.600 --> 38:07.500
所以不用去多想关键字很好规避

38:07.500 --> 38:09.500
因为你写关键字的时候啊

38:09.500 --> 38:10.400
你写关键字的时候

38:10.400 --> 38:11.700
你看他颜色都变了

38:11.800 --> 38:13.200
他没颜色都变了啊

38:13.200 --> 38:14.700
比方说你写个处啊

38:14.700 --> 38:16.700
你去去不是关键字吗

38:16.700 --> 38:17.600
对吧关键字

38:17.600 --> 38:19.000
你是不是是不是这个

38:19.000 --> 38:20.400
他马上要报处提示你

38:20.400 --> 38:21.100
对不对啊

38:21.100 --> 38:22.600
这个地方没变颜色啊

38:22.600 --> 38:24.000
那么这个地方他是马上报

38:24.000 --> 38:25.100
报处提示你

38:25.100 --> 38:25.700
对不对

38:25.700 --> 38:26.900
所以说你不太会写

38:26.900 --> 38:28.000
不太会写错的啊

38:28.000 --> 38:28.400
而且呢

38:28.400 --> 38:29.500
你平时命名的时候

38:29.500 --> 38:31.600
跟着我按照我这种命名方式

38:31.600 --> 38:32.700
也不太会写错的

38:32.700 --> 38:34.300
就是用小头封命名法

38:34.300 --> 38:35.300
也不太会写错

38:35.300 --> 38:36.800
我自己说一下这个问题啊

38:37.600 --> 38:38.600
这里呢

38:38.600 --> 38:39.700
我们输出这个a啊

38:39.700 --> 38:40.600
输出这个a

38:40.600 --> 38:41.300
那么也就是说

38:41.300 --> 38:42.600
这里可以放数据

38:43.000 --> 38:44.500
同样的可以放辩量

38:44.500 --> 38:46.100
因为辩量里面存的就是数据

38:46.600 --> 38:47.500
好 再来

38:48.300 --> 38:50.100
定一个辩量b

38:50.600 --> 38:51.900
辩量b复制的时候

38:51.900 --> 38:53.000
是不是要给他一个数据

38:53.000 --> 38:53.400
对吧

38:53.400 --> 38:54.300
给他一个数据

38:54.300 --> 38:55.500
这里是不是要放数据

38:55.900 --> 38:57.200
那能不能放辩量呢

38:57.700 --> 38:58.600
可以的

38:58.900 --> 38:59.600
什么意思呢

38:59.600 --> 39:00.200
这句话

39:00.600 --> 39:03.400
将辩量a的数据

39:04.200 --> 39:05.400
应该这样子说啊

39:05.400 --> 39:08.500
复制到辩量b种

39:09.500 --> 39:10.200
你不能认为

39:10.200 --> 39:12.100
a里边把数据拿过去过后

39:12.100 --> 39:13.500
a里边就没数据了

39:13.500 --> 39:14.200
不是这个意思啊

39:14.200 --> 39:15.600
就是复制粘贴

39:15.700 --> 39:18.200
把a里边的数据复制粘贴到辩量b里边

39:18.200 --> 39:19.400
你可以这样理解

39:19.400 --> 39:20.600
a里边的东西

39:20.600 --> 39:21.900
把内存空间

39:21.900 --> 39:25.000
这个房间里面东西复制粘贴到辩量b里边

39:25.000 --> 39:25.700
好

39:25.700 --> 39:26.400
那么现在呢

39:26.400 --> 39:28.700
能输出a和输出b

39:28.700 --> 39:29.500
看一下啊

39:29.500 --> 39:30.100
看一下

39:33.360 --> 39:34.360
咱们来看一下啊

39:34.360 --> 39:34.960
你看

39:34.960 --> 39:35.660
两个都是哈喽

39:35.660 --> 39:35.960
对吧

39:35.960 --> 39:36.760
两个都是哈喽

39:37.460 --> 39:37.860
好

39:37.860 --> 39:38.760
那么接下来呢

39:38.760 --> 39:40.860
我对辩量b重新复制

39:40.860 --> 39:42.160
比方说复制为world

39:42.560 --> 39:43.960
辩量a会不会变呢

39:44.760 --> 39:45.760
想一想这句话

39:46.260 --> 39:47.560
辩量a会不会变

39:48.160 --> 39:49.260
它不会变

39:49.660 --> 39:51.460
变量a里边的东西是不会变的

39:51.460 --> 39:53.460
因为它是复制粘贴过去的

39:53.460 --> 39:55.760
所以它的a里边的东西是不会变的

39:55.760 --> 39:56.560
明白这个意思吧

39:57.260 --> 39:58.660
变量b不会影响到变量a

39:58.660 --> 39:59.760
他们是两个房间

39:59.760 --> 40:01.860
两个房间有各自各自的数据

40:01.860 --> 40:03.260
所以说不会影响到a

40:04.060 --> 40:06.060
不会影响

40:07.460 --> 40:08.960
不会影响a

40:09.360 --> 40:10.060
没有意思吧

40:10.460 --> 40:10.760
好

40:10.760 --> 40:11.660
保证看一下啊

40:12.260 --> 40:12.860
那你看

40:12.860 --> 40:13.560
没问题吧

40:14.160 --> 40:15.060
输出a和b

40:16.060 --> 40:16.260
好

40:16.260 --> 40:18.160
这是关于变量的这一点

40:18.160 --> 40:19.960
就是任何可以放数据的地方了

40:19.960 --> 40:20.960
都可以放变量

40:21.060 --> 40:22.760
包括我们后边还会学函数啊

40:22.760 --> 40:23.460
各种各样的

40:23.560 --> 40:24.460
只要能放数据

40:24.460 --> 40:24.760
ok

40:24.760 --> 40:25.660
那就能放变量

40:25.960 --> 40:27.560
因为变量本来就是数据

40:27.560 --> 40:29.760
它只是不是数据字面量而已

40:29.960 --> 40:31.760
数据字面量是我们直接书写的数据

40:31.760 --> 40:32.060
对吧

40:32.060 --> 40:34.260
变量是之前已经存了一点数据了

40:34.260 --> 40:35.460
现在把它拿出来用

40:36.160 --> 40:36.360
好

40:36.360 --> 40:38.460
这是关于这一点

40:38.460 --> 40:39.360
非常非常重要

40:40.160 --> 40:40.360
好

40:40.360 --> 40:41.060
下一个点

40:41.060 --> 40:42.660
下一个点是关于

40:43.660 --> 40:44.860
不可以

40:44.860 --> 40:45.460
不可以

40:45.460 --> 40:46.860
就是若使用

40:47.360 --> 40:51.160
若使用一个不存在的变量

40:51.360 --> 40:52.760
这个变量没有声明过

40:53.160 --> 40:54.560
就是未声明的变量

40:55.460 --> 40:56.060
未

40:56.860 --> 40:58.460
声明的变量

40:59.860 --> 41:01.460
会导致错误

41:01.860 --> 41:02.760
会导致错误

41:03.160 --> 41:03.360
好

41:03.360 --> 41:04.760
咱们来看一下这个例子

41:05.260 --> 41:05.960
非常简单

41:06.160 --> 41:06.760
test

41:07.460 --> 41:07.860
new

41:08.260 --> 41:08.860
哎 听没有

41:09.660 --> 41:09.960
好

41:09.960 --> 41:10.860
得关闭一下

41:10.860 --> 41:11.560
这些东西

41:12.260 --> 41:12.460
好

41:12.460 --> 41:13.360
比方说这里

41:13.360 --> 41:15.360
我们直接输出一个变量

41:15.560 --> 41:16.660
输出一个变量的字

41:16.760 --> 41:17.160
local

41:17.160 --> 41:17.460
a

41:17.660 --> 41:17.960
好

41:17.960 --> 41:18.960
a 有没有声明过

41:19.360 --> 41:20.260
有没有声明过

41:20.260 --> 41:20.960
没有吧

41:21.560 --> 41:23.760
哪怕你是一个空房间都行

41:23.760 --> 41:24.560
我都认了

41:24.560 --> 41:26.760
但是你压格就没有声明过这个a

41:26.760 --> 41:28.760
于是会怎么样呢

41:28.860 --> 41:30.160
运行出来看一下啊

41:32.060 --> 41:33.460
f12 转到定义啊

41:33.960 --> 41:34.960
运行出来看一下

41:34.960 --> 41:35.960
它不是爆错了

41:36.360 --> 41:37.360
这个错误以后呢

41:37.360 --> 41:38.760
你们会经常看到

41:38.860 --> 41:40.260
以后看到这个错误了

41:40.360 --> 41:41.760
你又知道要知道什么意思

41:41.760 --> 41:42.260
a

41:42.660 --> 41:43.560
你在用这个变量嘛

41:43.560 --> 41:43.860
对吧

41:43.860 --> 41:45.260
用这个变量啊

41:45.460 --> 41:45.660
哎

41:45.660 --> 41:46.260
这个变量呢

41:46.260 --> 41:47.260
is not defend

41:47.560 --> 41:48.760
没有被定义过

41:49.160 --> 41:50.060
他们不存在

41:50.060 --> 41:50.960
所以说爆错了

41:51.160 --> 41:51.860
爆错了

41:51.960 --> 41:53.860
并不会有任何的输出啊

41:53.860 --> 41:55.260
并不会有任何的输出

41:55.960 --> 41:56.460
但是呢

41:56.460 --> 41:57.460
这里有个例外啊

41:57.460 --> 41:58.160
有个例外

41:59.160 --> 41:59.960
例外是什么呢

42:00.460 --> 42:01.760
使用type

42:03.160 --> 42:04.860
得到内行识

42:05.960 --> 42:06.860
可以是

42:07.060 --> 42:08.360
卫生名的变量

42:09.360 --> 42:11.360
可以是没有生命的变量

42:11.360 --> 42:12.660
使用type of的时候

42:12.660 --> 42:13.560
可以没有生命

42:13.560 --> 42:15.560
比方说我这里输出type of

42:15.860 --> 42:16.260
a

42:16.360 --> 42:17.660
它会不会爆错

42:17.760 --> 42:18.860
这么不会爆错啊

42:18.860 --> 42:20.360
这个时候它就不会爆错了啊

42:20.460 --> 42:21.460
保存看一下啊

42:21.960 --> 42:23.060
得到的是undefend

42:24.060 --> 42:24.960
得到是undefend

42:24.960 --> 42:26.260
所以这个时候它不会爆错的啊

42:26.260 --> 42:27.360
这是一个例外啊

42:27.360 --> 42:27.960
一个例外

42:27.960 --> 42:28.760
因为type of呢

42:28.760 --> 42:29.760
我们往往就来判断

42:29.760 --> 42:30.960
这个东西存不存在

42:30.960 --> 42:32.260
如果这个地方都爆错了

42:32.260 --> 42:33.460
我这个程序就没法了

42:33.460 --> 42:34.060
就没法了

42:34.060 --> 42:35.560
有的时候我就是要判断

42:35.760 --> 42:36.760
一个东西存不存在

42:36.760 --> 42:37.460
它不存在的时候

42:37.460 --> 42:38.360
我要做一些事

42:38.360 --> 42:39.760
它存在的时候要做一些事

42:40.060 --> 42:41.260
那么如果type of都爆错了

42:41.260 --> 42:42.660
我确实找不到任何办法

42:42.660 --> 42:43.960
可以判断它存不存在了

42:44.660 --> 42:47.160
所以说它在用type of的时候呢

42:47.160 --> 42:49.860
是用了卫生名的变量是不会爆错的

42:49.860 --> 42:50.860
是不会爆错的

42:51.460 --> 42:52.460
可以是卫生名的变量

42:52.460 --> 42:53.360
得到了结果

42:53.560 --> 42:54.460
得到了结果

42:54.660 --> 42:55.960
是undefend

42:56.260 --> 42:57.060
未定义的

42:57.860 --> 42:58.160
好吧

42:58.160 --> 42:59.460
这是关于这一点啊

43:00.360 --> 43:00.660
好

43:00.660 --> 43:02.060
下边又是个重点来了啊

43:02.060 --> 43:02.760
反正重点的地方

43:02.760 --> 43:04.560
我打上一个就是加粗

43:05.260 --> 43:05.960
重点来了

43:06.960 --> 43:09.660
介石中存在

43:10.860 --> 43:13.560
存在变量提升

43:13.960 --> 43:14.360
好

43:14.360 --> 43:15.260
这是什么意思呢

43:15.660 --> 43:17.160
我们先简单了解一下

43:17.160 --> 43:17.660
以后呢

43:17.660 --> 43:19.360
我们要讲到很后边了

43:19.460 --> 43:21.360
讲到介石进阶部分

43:21.560 --> 43:23.160
再来详细说这个问题啊

43:23.160 --> 43:23.560
现在呢

43:23.560 --> 43:25.460
我们先简单的了解一下

43:26.360 --> 43:27.660
所有变量

43:28.360 --> 43:28.760
啊

43:28.760 --> 43:30.860
所有变量的声明

43:31.860 --> 43:34.560
会自动的提到

43:35.560 --> 43:37.960
代码的最顶部

43:37.960 --> 43:38.460
啊

43:38.460 --> 43:39.760
代码的最顶部

43:40.460 --> 43:41.560
什么意思呢

43:42.260 --> 43:43.060
看一下啊

43:43.460 --> 43:44.660
test 7

43:44.960 --> 43:45.660
哎听没有

43:48.400 --> 43:48.900
这里呢

43:48.900 --> 43:50.800
我们使用一个script啊

43:51.100 --> 43:51.300
好

43:51.300 --> 43:51.700
这里呢

43:51.700 --> 43:52.200
写个变量

43:52.200 --> 43:52.600
a

43:53.000 --> 43:54.300
等于1

43:54.500 --> 43:55.400
啊等于1

43:55.900 --> 43:56.200
好

43:56.200 --> 43:57.000
接下来了

43:57.500 --> 43:59.400
我们在这里console log

43:59.800 --> 44:00.200
哎

44:00.800 --> 44:01.700
啊看一下啊

44:01.700 --> 44:02.500
看一下console log

44:02.500 --> 44:02.900
哎

44:03.100 --> 44:03.800
他会怎么样啊

44:03.800 --> 44:04.800
比如说我们在这里

44:04.800 --> 44:05.800
在定个变量b

44:05.800 --> 44:06.000
啊

44:06.000 --> 44:06.800
定个变量b

44:07.000 --> 44:07.400
好

44:08.300 --> 44:09.900
我们在下面给变量b复职

44:09.900 --> 44:11.900
他会爆错吗

44:12.700 --> 44:13.600
他会爆错吗

44:14.500 --> 44:16.400
他不会爆错的啊

44:16.500 --> 44:17.800
按理说应该爆错对吧

44:17.800 --> 44:18.700
按理说应该爆错

44:18.700 --> 44:20.900
因为因为运行到这一局代码的时候

44:21.600 --> 44:23.100
运行到这一局代码的时候

44:23.400 --> 44:24.100
实际上呢

44:24.100 --> 44:25.200
还没有运行啥

44:25.400 --> 44:27.300
还没有运行这个声明变量对吧

44:27.400 --> 44:29.300
那么这个时候是无意声明的变量a和b

44:29.300 --> 44:30.300
应该要爆错的

44:30.500 --> 44:31.100
看一下呗

44:33.500 --> 44:34.300
所以没爆错

44:34.300 --> 44:35.300
并且输出的结果

44:35.300 --> 44:36.500
两个都是undefend

44:36.500 --> 44:37.300
他没有爆错

44:37.600 --> 44:38.600
那是怎么回事呢

44:38.600 --> 44:39.600
就是因为这个原因

44:39.600 --> 44:42.000
GS里边存在变量提升啊

44:42.000 --> 44:43.200
他为什么会存在变量提升

44:43.200 --> 44:44.300
我们以后会说啊

44:44.300 --> 44:45.100
以后会说

44:45.200 --> 44:47.100
现在的只需要记住这个规则就行了

44:47.400 --> 44:48.400
在GS里边

44:48.500 --> 44:49.400
你声明的变量

44:49.400 --> 44:50.400
他会变成这个样子

44:50.500 --> 44:51.200
给他看一下啊

44:51.200 --> 44:52.200
他会变成什么样子

44:52.700 --> 44:53.600
首先呢

44:54.200 --> 44:55.400
首先呢这一块

44:56.000 --> 44:57.000
他会把它变成

44:57.400 --> 44:58.400
最原始的格式

44:58.400 --> 44:59.700
这是余法堂嘛对吧

44:59.800 --> 45:01.900
他会把它变成最原始的格式

45:02.500 --> 45:03.400
变成这个格式

45:04.400 --> 45:05.500
也等于啊

45:05.600 --> 45:06.400
先这样理解啊

45:06.400 --> 45:07.200
先这样理解

45:07.300 --> 45:08.400
这是他原始的格式

45:08.400 --> 45:10.000
刚才的个写法呢是余法堂

45:10.400 --> 45:11.600
最终他会变成这个样子

45:12.100 --> 45:12.800
然后呢

45:12.800 --> 45:14.200
把变量的声明

45:14.700 --> 45:16.600
提到最顶部啊

45:16.600 --> 45:17.600
提到最顶部

45:18.300 --> 45:19.200
把变量的声明推掉

45:19.200 --> 45:19.900
最紧不

45:20.000 --> 45:21.300
那你看一下现在

45:21.800 --> 45:22.800
是不是没问题了

45:23.500 --> 45:24.200
是不是没问题了

45:24.200 --> 45:25.600
那变量是不是已经声明过了

45:25.600 --> 45:26.000
对吧

45:26.000 --> 45:26.800
已经声明过了

45:26.800 --> 45:27.700
那么这个时候呢

45:27.700 --> 45:29.000
只是还没有复制而已

45:29.000 --> 45:30.000
他里边没存东西

45:30.000 --> 45:30.500
但是呢

45:30.500 --> 45:31.400
已经声明过了

45:31.400 --> 45:32.200
他里边就可以存

45:32.200 --> 45:33.500
他存的就是undefend

45:33.700 --> 45:33.900
好

45:33.900 --> 45:34.500
所以说输出

45:34.500 --> 45:35.500
他不会爆错的

45:36.200 --> 45:36.900
两个undefend

45:36.900 --> 45:37.500
明白吧

45:37.900 --> 45:38.300
啊

45:38.300 --> 45:39.400
所以刚才的那种写法

45:39.400 --> 45:40.300
为什么不爆错

45:40.300 --> 45:42.200
因为他最终啊

45:42.200 --> 45:43.700
这种写法啊

45:44.900 --> 45:45.900
这样打个注释吧

45:46.100 --> 45:46.600
说一下

45:47.800 --> 45:48.800
等效于

45:49.300 --> 45:50.200
等效于啥呢

45:50.400 --> 45:52.300
等效于下边的那种写法啊

45:52.500 --> 45:53.500
var a

45:53.800 --> 45:54.800
var b

45:55.400 --> 45:57.800
console log a b

45:58.100 --> 46:00.700
然后 a 1 b 3

46:01.000 --> 46:02.400
最终程序运行的时候

46:02.400 --> 46:04.100
会把他变成这种写法

46:04.300 --> 46:05.400
你说他会不会爆错

46:05.400 --> 46:06.500
他肯定就不会爆错了

46:07.100 --> 46:07.900
你要这意思啊

46:08.900 --> 46:09.400
好

46:09.400 --> 46:10.700
咱们再来看啊

46:10.700 --> 46:11.600
再来看

46:12.000 --> 46:14.600
如果前边还有一个scripps的元素

46:14.900 --> 46:16.800
还有一个console log

46:17.400 --> 46:18.900
log a和b

46:19.900 --> 46:21.200
那这里会不会爆错呢

46:21.400 --> 46:22.500
保存我们看一下

46:23.100 --> 46:23.500
哎

46:23.500 --> 46:24.900
这里会爆错了啊

46:24.900 --> 46:25.900
这里会爆错了

46:26.000 --> 46:27.900
也就是说他这个提升啊

46:28.000 --> 46:28.700
提升

46:29.900 --> 46:30.600
但是

46:31.600 --> 46:32.900
这种提升

46:33.900 --> 46:35.500
不会超越

46:35.900 --> 46:36.300
啊

46:36.500 --> 46:38.000
叫做脚奔框啊

46:38.000 --> 46:38.700
脚奔框

46:40.500 --> 46:42.000
这就是一个就是个脚奔框

46:42.000 --> 46:43.500
看没一个就是个脚奔框

46:43.700 --> 46:46.300
这种提升他不会超越这个脚奔框啊

46:46.400 --> 46:47.600
不会超越这个脚奔框

46:47.800 --> 46:48.600
你来这意思吧

46:48.900 --> 46:49.300
啊

46:49.400 --> 46:51.500
他只会提升到这个脚奔框的顶部

46:51.800 --> 46:54.200
当然如果你把这个脚奔框写到前边

46:54.700 --> 46:56.200
把这个脚奔框写到前边

46:56.200 --> 46:57.300
那是不是没问题了

46:57.400 --> 46:57.700
对吧

46:57.700 --> 46:58.700
保存看一下啊

46:59.000 --> 46:59.900
这就没问题了

47:00.100 --> 47:01.200
啊就没问题了啊

47:01.900 --> 47:02.900
你来这意思吧啊

47:03.100 --> 47:04.100
你就这样去理解

47:04.100 --> 47:05.800
一把他等效的形式想出来

47:05.800 --> 47:06.000
哎

47:06.000 --> 47:07.100
又知道是怎么回事了

47:07.100 --> 47:09.900
他只是在这个脚奔框里边提升到最顶部

47:10.300 --> 47:10.900
ok啊

47:11.000 --> 47:11.800
这是关于

47:12.000 --> 47:13.800
介石中存在的变量提升

47:13.800 --> 47:15.700
这里面非常容易出面试题的哦

47:15.700 --> 47:16.800
非常容易出面试题

47:16.800 --> 47:17.900
出面试题的地方就

47:18.400 --> 47:18.500
啊

47:18.500 --> 47:19.000
当然

47:19.100 --> 47:20.600
这种面试题也太低端了

47:20.600 --> 47:21.500
也太低端了

47:21.800 --> 47:22.400
不过

47:22.600 --> 47:24.400
他可能会把这些知识呢

47:24.400 --> 47:25.700
混杂一下后边的知识

47:25.700 --> 47:27.000
来一起给你出啊

47:27.000 --> 47:27.800
一起给你出

47:28.000 --> 47:29.300
其实他考察力的是什么呢

47:29.300 --> 47:31.100
就是理解变量提升

47:31.200 --> 47:32.100
他会有个提升

47:32.100 --> 47:33.300
比方他就这个东西

47:33.300 --> 47:34.000
比方说啊

47:34.200 --> 47:35.700
就这么一道题啊

47:35.700 --> 47:37.500
你问你到底要不要报错

47:37.500 --> 47:38.900
报错还是输出undefend

47:38.900 --> 47:40.100
还是输出一和三

47:40.600 --> 47:41.300
怎么回答呢

47:41.300 --> 47:42.800
输出的是两个undefend

47:42.800 --> 47:44.200
他不会报错的啊

47:44.200 --> 47:45.100
不会报错的

47:45.400 --> 47:46.000
ok啊

47:46.100 --> 47:48.300
这是关于啊这一块

47:48.800 --> 47:49.600
变量提升

47:50.000 --> 47:51.000
那么这样子呢

47:51.000 --> 47:52.300
就得到一个推论啊

47:52.500 --> 47:53.300
得到一个推论

47:53.400 --> 47:54.200
什么推论呢

47:55.400 --> 47:56.200
就是下面这个

47:56.500 --> 47:57.500
介石中

47:58.500 --> 47:59.400
允许

48:00.000 --> 48:01.400
出现啊

48:01.600 --> 48:04.100
以允许定义多个

48:04.600 --> 48:06.300
同名变量啊

48:06.600 --> 48:09.600
允许定义多个同名变量

48:10.400 --> 48:10.800
但是呢

48:10.800 --> 48:12.700
我们通常不推荐大家这样做啊

48:12.700 --> 48:14.500
这样做了非常容易造成混淆啊

48:14.500 --> 48:16.600
不推荐大家去多定义多个同名变量

48:16.800 --> 48:18.200
因为同名变量

48:19.700 --> 48:21.600
提升后啊提升后

48:22.200 --> 48:24.100
会变成啊

48:24.100 --> 48:24.800
会变成

48:25.900 --> 48:26.500
一个啊

48:26.500 --> 48:27.300
会变成一个

48:27.900 --> 48:28.600
啥意思呢

48:29.000 --> 48:29.800
不要看一下啊

48:29.800 --> 48:30.400
test

48:31.000 --> 48:31.400
吧

48:33.280 --> 48:35.080
但是不推荐大家这么去做啊

48:35.180 --> 48:35.580
只是呢

48:35.580 --> 48:36.480
你理解这一点了

48:36.480 --> 48:36.880
以后呢

48:36.880 --> 48:38.680
你我们讲一些面试题的之后呢

48:38.680 --> 48:40.480
你就知道该怎么怎么回事了啊

48:40.780 --> 48:41.980
就是这里有个变量啊

48:41.980 --> 48:42.980
变量A

48:43.480 --> 48:44.880
等于1啊

48:44.880 --> 48:45.580
console

48:45.680 --> 48:46.580
console log

48:47.580 --> 48:47.980
a

48:49.180 --> 48:49.480
a

48:49.680 --> 48:50.080
注意啊

48:50.080 --> 48:50.980
区分大小写的啊

48:51.280 --> 48:52.280
然后再定一个变量

48:52.280 --> 48:53.680
A等于3啊

48:53.680 --> 48:54.580
console log

48:54.880 --> 48:55.080
啊

48:55.080 --> 48:55.480
a

48:56.680 --> 48:58.080
那么你怎么理解这个东西呢

48:58.080 --> 48:58.980
怎么理解呢

48:59.280 --> 48:59.680
啊

49:02.220 --> 49:03.120
应该这么理解啊

49:03.120 --> 49:04.020
应该这么理解

49:04.220 --> 49:05.120
这两个变量呢

49:05.120 --> 49:06.420
不是两个变量啊

49:06.420 --> 49:07.420
虽然他们名字相

49:07.420 --> 49:08.320
他名字相同

49:08.320 --> 49:10.020
他们他们是一个变量啊

49:10.020 --> 49:10.920
是一个变量

49:10.920 --> 49:11.820
怎么理解呢

49:11.920 --> 49:13.020
你要这样子理解啊

49:13.020 --> 49:14.320
不是有变量提升吗

49:15.020 --> 49:16.020
把它换一下

49:16.320 --> 49:18.020
换成这样子啊

49:18.420 --> 49:20.020
这样子是不是就能理解了

49:20.320 --> 49:20.820
对吧

49:20.920 --> 49:22.020
因为变量一提升过后

49:22.020 --> 49:23.220
同名变量就合并了

49:23.420 --> 49:24.620
提升到最顶部嘛

49:24.620 --> 49:26.020
所以他一下就合并了

49:26.020 --> 49:27.220
啊就变成了这个样子

49:27.920 --> 49:28.720
没有这个意思吧

49:29.020 --> 49:29.920
啊没问题吧

49:30.320 --> 49:30.920
没问题吧

49:32.420 --> 49:33.420
啊变量提升了

49:33.420 --> 49:34.420
其实会以后呢

49:34.420 --> 49:35.820
会导致一些问题啊

49:35.820 --> 49:38.020
我们以后再讲如何来去解决

49:38.020 --> 49:38.820
他导致的问题

49:38.820 --> 49:39.820
他导致什么问题

49:39.820 --> 49:41.020
以及如何解决啊

49:41.020 --> 49:41.920
我们以后再说

49:43.020 --> 49:43.620
ok啊

49:43.820 --> 49:46.320
这是关于变量提升这一块

49:46.820 --> 49:47.120
啊

49:47.120 --> 49:48.620
就以其他的推论啊

49:48.620 --> 49:50.720
不过可以可以定义多个同名变量

49:51.820 --> 49:52.020
好

49:52.020 --> 49:53.420
咱们再想想啊

49:53.420 --> 49:54.120
还有啥呢

49:54.320 --> 49:55.020
还有啥呢

49:55.620 --> 49:56.820
变量这一块

49:57.520 --> 49:58.820
其实目前就没啥了

49:58.820 --> 49:59.520
没啥了

49:59.620 --> 50:00.620
非常非常简单啊

50:00.620 --> 50:02.520
就是一块空间用来存东西的

50:02.520 --> 50:04.420
大家记住一下变量的一些特点啊

50:04.420 --> 50:06.920
就是首先是如何使用基本方式

50:06.920 --> 50:07.720
先声明

50:08.320 --> 50:08.920
然后呢

50:09.220 --> 50:11.220
再复制啊在我里面存东西

50:11.220 --> 50:13.820
他里面可以可以定义很多个变量来存东西

50:14.220 --> 50:15.820
好变量的名称啊

50:15.820 --> 50:18.020
就是哪些变量的值是可以变化的

50:18.020 --> 50:19.220
你可以重新复制

50:19.220 --> 50:19.820
重新复制

50:19.820 --> 50:21.320
不要把它读成等号啊

50:21.320 --> 50:22.320
是复制符号

50:22.320 --> 50:24.020
然后变量的名称的要符合规范

50:24.020 --> 50:26.020
大家注意一下个名称的规范就行了

50:26.620 --> 50:27.020
然后呢

50:27.020 --> 50:28.520
变量的声明和复制可以合并

50:28.520 --> 50:29.420
这是余法堂

50:29.520 --> 50:30.920
多个变量的声明也可以合并

50:30.920 --> 50:31.820
也是余法堂

50:32.820 --> 50:34.820
任何可以书写数据的地方都可以书写变量

50:34.820 --> 50:36.320
它可以放到输出语句里边

50:36.520 --> 50:37.220
也可以呢

50:37.420 --> 50:38.620
放到复制的语句

50:38.620 --> 50:40.620
输写到数据的位置都可以

50:40.620 --> 50:41.320
都可以

50:43.020 --> 50:43.420
好了

50:43.520 --> 50:44.220
就这些东西

50:44.220 --> 50:45.020
大家理解一下

50:45.420 --> 50:45.620
好

50:45.620 --> 50:47.020
这些后的作业啊作业

50:50.560 --> 50:52.260
作业做啥呢

50:52.660 --> 50:53.660
作业做啥呢

50:53.660 --> 50:54.760
就一个简单的作业吧

50:54.760 --> 50:55.860
这个作业我也不讲啊

50:55.860 --> 50:56.860
非常非常简单

50:57.660 --> 50:59.260
定义啊

50:59.760 --> 51:00.860
三个变量啊

51:00.860 --> 51:01.560
三个变量

51:02.160 --> 51:03.460
分别保存

51:04.160 --> 51:05.360
拥护新名

51:05.960 --> 51:07.460
拥护新名你随便写一个啊

51:07.860 --> 51:08.460
和是吧

51:08.660 --> 51:10.460
拥护年龄啊

51:10.460 --> 51:11.360
拥护年龄

51:11.760 --> 51:13.260
你随便写一个保存年龄

51:13.460 --> 51:14.460
然后再保存

51:14.760 --> 51:16.760
拥护的啊比方说

51:17.860 --> 51:21.160
拥护是否是 vip 拥护啊

51:21.160 --> 51:22.560
是否是 vip 拥护

51:22.660 --> 51:23.560
定义三个变量啊

51:23.560 --> 51:24.960
分别来保存这三个东西

51:25.360 --> 51:25.760
好

51:25.760 --> 51:26.460
然后

51:27.660 --> 51:29.860
然后输出他们

51:30.260 --> 51:31.160
非常非常简单

51:31.160 --> 51:32.060
你们自己去写吧

51:33.060 --> 51:34.460
主要是让你们熟悉一下

51:34.460 --> 51:35.660
变量的输写方式

51:35.760 --> 51:37.660
不要小瞧这些练习啊

51:37.760 --> 51:38.760
虽然很小很小

51:38.760 --> 51:40.060
但他们是有作用的

51:40.060 --> 51:40.860
作用是什么呢

51:40.860 --> 51:41.860
你至少能够达到

51:41.860 --> 51:43.460
你能够去签一个页面文件

51:43.460 --> 51:44.760
能够去协断接待吗

51:44.760 --> 51:45.660
把它运行出来

51:45.660 --> 51:47.060
这个流程里把走通了

51:47.460 --> 51:48.660
至少能够达到这么一个锻炼

51:48.660 --> 51:50.660
并且熟悉到整个语法规则

51:50.960 --> 51:51.660
很重要的啊

51:51.660 --> 51:52.560
不要小看他

51:52.660 --> 51:53.660
一定要去做一遍啊

51:53.660 --> 51:54.460
一定要去做一遍

51:54.860 --> 51:55.060
好

51:55.060 --> 51:56.860
这是关于变量这一块的知识啊

