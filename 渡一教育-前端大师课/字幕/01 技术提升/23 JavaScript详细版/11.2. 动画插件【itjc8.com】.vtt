WEBVTT

00:00.000 --> 00:14.960
这节课呢 咱们来做一个动画的插件

00:15.760 --> 00:18.960
嗯 这个插件呢 就是要做一个通用的东西

00:19.160 --> 00:21.560
因为我们的页面上呢 经常会出现动画

00:21.960 --> 00:25.560
呃 我们希望呢 用介石来实现一个通用的动画插件

00:25.560 --> 00:28.760
以后呢 反而是遇到动画的地方呢 都可以使用这个插件来完成了

00:28.960 --> 00:30.960
啊 就不用每次都去自己写 挺麻烦的

00:31.360 --> 00:33.160
包括我们前面啊 写不是写了一个换

00:33.460 --> 00:38.060
那个就是轮波图 对不对啊 也叫做也叫做换阵篇啊 轮波图

00:38.560 --> 00:42.560
它其实就要用到动画 对不对 我们当时写的非常非常痛苦

00:42.860 --> 00:45.760
就是因为没有插件来帮助我们去完成

00:46.160 --> 00:50.560
如果有一个插件的话 那么我们到当时写这个轮波图的时候 就会非常非常的方便

00:51.260 --> 00:54.860
哎 有人说我们之前上节课不是写了这么一个东西吗 叫做穿C型

00:55.060 --> 00:58.660
对吧 他不是挺好用的吗 你给他规定一个时间 对不对

00:59.260 --> 01:04.160
啊 零点五秒这个CSS又可以搞定这个效果了 从一个字变换到另一个字吗

01:04.560 --> 01:06.960
但是穿C型这个东西呢 他有有些缺陷啊

01:07.160 --> 01:11.460
第一个缺陷呢 就是他是CSS3的主性啊 有兼容性问题

01:12.860 --> 01:16.460
就是在一些旧版本的流量器里边 他不兼容 这是第一个问题啊

01:17.160 --> 01:23.860
第二个问题呢 是如果你使用穿C型的话 动画难以停止

01:23.960 --> 01:28.660
就是如果动画运行到一半 你想把它停止的很麻烦 非常非常麻烦

01:29.460 --> 01:34.160
而且呢 难以恢复 难以恢复 我的普通话呀 我的天呐

01:34.660 --> 01:36.460
难以恢复 嗯

01:37.160 --> 01:42.660
如果你可以想到一些办法把它停止啊 当这是CSS3的内容 不在我们讨论范围之列啊

01:43.460 --> 01:46.160
如果你想办法把它停止呢 也难以恢复

01:46.460 --> 01:49.660
所以说呢 我们这里呢 还是用介事来写个动画插件

01:50.160 --> 01:54.360
那么既然是插件的话 我们肯定是要把这个插件加到哪儿了 加到这里面

01:54.960 --> 01:56.960
animate 点介事

01:58.160 --> 02:02.860
好 我们这里首先研究一下啊 这个插件 他既然要通用的 那么问题就来了

02:03.860 --> 02:09.760
我怎么知道 把哪个元素 都哪个属性进行变化了

02:09.860 --> 02:14.060
因为我们动画插件 他一定是 啊 什么叫动画 啊 什么叫动画

02:15.060 --> 02:19.660
动画的本质就是 啊 一个元素啊 就是我们页面上的动画嘛

02:19.760 --> 02:23.860
一个元素的某些 CSS 属性

02:25.560 --> 02:29.970
在一段时间内 时间内

02:32.280 --> 02:39.980
从一个值 啊 一个值 一个值 变化到另一个值

02:41.780 --> 02:46.280
就是以某些啊 我说的是不某些 不是某个 啊 某个也算某些嘛

02:46.380 --> 02:48.780
对吧 他可能有很多的 CCC 属性都会发生变化

02:49.080 --> 02:52.480
在一段时间内 从一个值变化到另一个值

02:52.880 --> 02:55.480
这些就是 这个东西就是动画 你看这个是吧

02:56.280 --> 03:01.980
但是呢 一个问题就是 我如果写插件的话 我要写个通用的东西

03:02.280 --> 03:06.480
我怎么知道哪个元素呢 我怎么知道哪些 CCC 属性了

03:06.980 --> 03:11.380
对不对 这些是我是不知道的 而且呢 还有种可能是多个元素啊

03:11.480 --> 03:16.480
有可能是多个元素 我们这些是一个嘛 还有可能是某些 CCC

03:16.580 --> 03:20.480
某些元素 就是在某些元素都要一起发生变化

03:21.080 --> 03:23.680
那么这个东西怎么处理呢 就很麻烦了啊

03:23.680 --> 03:25.480
就这个东西比较麻烦了

03:25.880 --> 03:28.980
所以说呢 我们这里的写的动画插件啊

03:29.180 --> 03:33.480
它研究的不是元素啊 我们现在写的动画插件

03:33.680 --> 03:36.180
它研究的不是元素 研究的是数据

03:36.280 --> 03:41.680
它指的是某些数据在一段时间内

03:43.380 --> 03:50.480
从一个值变化到另一个值 对吧

03:50.680 --> 03:53.380
我们研究的插件实际上是研究的是数据

03:53.680 --> 03:57.080
就说白了就是数字 数字 严格来说应该是数字

03:57.180 --> 04:00.380
一般知不错怎么变化呢 对不对 布尔怎么变化呢 没法变化

04:00.880 --> 04:02.180
只有数字才能变化

04:02.480 --> 04:05.980
某些数字在一段时间内从一个值变化到另一个值

04:06.080 --> 04:07.280
这就是我们要做的动画插件

04:07.480 --> 04:09.080
我们不考虑什么动物元素

04:09.880 --> 04:12.880
动物元素是使用这个插件的人来考虑的

04:13.580 --> 04:15.880
我不考虑什么动物元素 你就把数字给我

04:16.080 --> 04:17.880
哪些数字从一个值变化到另一个值

04:18.780 --> 04:22.180
动物元素怎么去观念动物元素 你们自己去搞定

04:22.980 --> 04:25.580
好吧 所以说我们要做的插件目标却明确

04:25.980 --> 04:28.480
就是你做一件事的话 一定要先明确目标

04:28.580 --> 04:31.980
先不要着急做 目标是什么 就是研究数字的变化

04:32.180 --> 04:35.180
从一个值变化到另一个值 怎么变化 它会经过一段过程

04:36.380 --> 04:39.980
于是我们在这边就写出来一个初始的模型

04:40.480 --> 04:41.380
我们会这样子来写

04:42.880 --> 04:44.780
我们开始不是有这种东西吗 对不对

04:45.180 --> 04:47.380
判断一下还是一样的 对不对 还是一样的

04:47.780 --> 04:49.780
this my protein 什么呢

04:50.380 --> 04:51.980
由于我们研究的是数字 对吧

04:52.080 --> 04:55.580
它就会脱离什么 就是浏览器的数组环境

04:55.980 --> 04:57.580
跟浏览器的数组环境没什么关系了

04:57.780 --> 05:00.180
它可以在任何环境 因此我们这里使用this

05:01.180 --> 05:04.980
my protein 来写animate 给它加这么一个属性

05:05.580 --> 05:08.880
这个属性它是个构造函数 你看我这里用的是大写

05:08.980 --> 05:11.880
animate是什么意思 就是动画的意思 不是animate

05:11.980 --> 05:13.980
animate是动物 这是动画的意思

05:15.380 --> 05:18.880
那么这个我们手这么大写 表示它是一个构造函数

05:18.980 --> 05:21.780
那么到时候你使用的时候 到时候你使用的时候

05:21.880 --> 05:23.880
你这么使用 我们在这里测试

05:23.980 --> 05:26.280
6一个 比方说一个辨量 要接受一下

05:26.380 --> 05:27.880
它会新创立一个对象 对吧

05:27.980 --> 05:33.680
6一个this my protein animate

05:34.180 --> 05:36.380
6一个animate 你再这样去使用

05:36.980 --> 05:39.180
看没 那么到时候我们把打印出来

05:39.280 --> 05:41.080
这就是一个对象animate

05:42.280 --> 05:44.280
你看这个意思吧 我们先写出这么一种结构

05:44.780 --> 05:45.780
表示这是个动画

05:46.780 --> 05:49.180
动画 一个动画对象

05:49.280 --> 05:51.380
这样一溜的话 它就会创建一个动画对象了

05:53.180 --> 05:54.980
这里不要写这一次

05:55.680 --> 05:57.880
这里一溜的话 又会创建一个动画对象了

05:59.180 --> 06:00.380
我这里写的有哪些问题的

06:00.480 --> 06:02.380
这个颜色看上去好像不太对

06:02.480 --> 06:04.180
好像不太对 应该是没问题的

06:04.280 --> 06:06.980
我来测试一下吧 免得这一回就爆错了

06:09.240 --> 06:10.640
颜色看上去不太对

06:11.240 --> 06:12.840
给它链接一下

06:12.940 --> 06:15.740
我们这个页面上只是用来做测试的

06:15.840 --> 06:16.940
只是用来做测试的

06:18.240 --> 06:18.940
看一下

06:22.910 --> 06:23.510
运行

06:24.710 --> 06:25.710
没问题

06:26.310 --> 06:27.510
有什么问题 没问题

06:28.810 --> 06:30.110
那么接下来我们来研究啥呢

06:30.210 --> 06:31.110
研究这一块

06:31.310 --> 06:32.610
它肯定要传参数吧

06:32.710 --> 06:34.010
这个构造韩束肯定要有参数

06:34.110 --> 06:34.910
这个毫无疑问

06:35.210 --> 06:36.910
关键是参数应该传啥

06:37.610 --> 06:38.810
参数应该传啥

06:39.810 --> 06:41.710
那么既然它是一个动画

06:42.210 --> 06:43.410
既然它是一个动画

06:43.510 --> 06:46.210
那么它是不是一定有计时器对吧

06:46.510 --> 06:47.910
肯定得有计时器嘛

06:48.110 --> 06:48.610
对不对

06:48.810 --> 06:51.210
那么这个计时器是不是得有间隔时间

06:51.410 --> 06:51.710
对不对

06:51.710 --> 06:53.510
间隔时间没间隔多少时间

06:53.510 --> 06:55.210
多少毫秒运动一次

06:55.410 --> 06:56.710
因此我们第一个配置呢

06:56.710 --> 06:58.110
该写上Diarration

06:59.110 --> 07:00.310
为什么这里要写个对象

07:00.510 --> 07:02.010
因为跟我们之前一样

07:02.010 --> 07:03.410
因为这里配置肯定很多

07:03.710 --> 07:04.410
很多的话

07:04.410 --> 07:07.310
我们用一个一个的参数的话会比较麻烦

07:07.410 --> 07:09.410
而且有些参数是可以不传递的

07:09.410 --> 07:11.010
有些配置是可以不传递的

07:11.010 --> 07:11.810
还有默认值

07:12.010 --> 07:13.610
所以说我们这里用一个对象

07:14.210 --> 07:15.010
来表示一个对象

07:15.010 --> 07:16.410
这个参数打个注射

07:17.410 --> 07:18.510
这个参数呢

07:18.510 --> 07:19.910
它的类型是一个Objects

07:20.210 --> 07:21.410
参数的名字是Object

07:21.610 --> 07:24.010
它表示的是一个配置对象

07:24.810 --> 07:25.510
像这种情况了

07:25.510 --> 07:26.710
我们以后会经常写

07:27.610 --> 07:28.910
这个Diarration表示什么意思呢

07:28.910 --> 07:30.010
表示间隔时间

07:30.010 --> 07:31.210
间隔时间比方说

07:31.210 --> 07:32.710
我们这里写30毫秒

07:33.410 --> 07:35.510
同样的默认配置里边

07:35.710 --> 07:36.910
比方说这里写个默认配置

07:36.910 --> 07:38.410
default option

07:38.610 --> 07:40.310
那么默认配置里边

07:40.310 --> 07:42.110
是不是也有这个Diarration

07:42.110 --> 07:42.510
对吧

07:42.810 --> 07:43.710
这是默认配置

07:44.110 --> 07:45.910
默认配置比方说16毫秒

07:46.910 --> 07:50.010
这是默认间隔时间

07:50.210 --> 07:51.410
如果你没有配置这个的话

07:51.410 --> 07:53.210
我们就按照16毫秒来算

07:53.210 --> 07:54.010
什么个意思

07:54.010 --> 07:55.010
这是默认配置

07:56.210 --> 07:57.310
这里可以覆盖它

07:57.510 --> 07:58.510
那么怎么覆盖呢

07:58.510 --> 07:59.510
我们可以用这种方式

07:59.510 --> 08:00.510
我们之前写过的

08:01.110 --> 08:02.310
就是什么Objects

08:03.110 --> 08:03.710
Elsang

08:03.910 --> 08:04.310
对不对

08:04.310 --> 08:04.810
Elsang

08:05.910 --> 08:07.410
或者说我们之前是不是写了

08:07.410 --> 08:08.210
这个Happiness

08:08.210 --> 08:08.710
对吧

08:08.810 --> 08:09.610
写这个Happiness

08:09.610 --> 08:11.210
Happiness不是有这个Mixing吗

08:11.310 --> 08:11.810
对不对

08:12.710 --> 08:15.510
用什么把obj2混合到obj1

08:15.510 --> 08:15.910
对吧

08:15.910 --> 08:16.910
那我们要求

08:16.910 --> 08:18.310
比方说有这种情况

08:18.310 --> 08:19.510
我主要说一下这种情况

08:19.510 --> 08:20.510
我们以前还没遇到过

08:20.710 --> 08:23.110
就是我们使用一个插件的时候

08:23.210 --> 08:24.210
可能那个插件

08:24.310 --> 08:26.710
它依赖别的插件

08:26.910 --> 08:29.110
因此你得先引用别的插件

08:29.410 --> 08:30.010
这是可以的

08:30.010 --> 08:30.810
这是可以的

08:30.810 --> 08:32.710
就是让使用那个插件的人告诉他

08:32.710 --> 08:34.710
你可以在你的说明文档里面告诉他

08:34.910 --> 08:36.510
你要使用我这个插件的话

08:36.510 --> 08:38.310
你必须要先引用另外一个插件

08:38.310 --> 08:39.910
就是另外我们之前自己写的

08:40.010 --> 08:41.110
这个什么Happiness

08:41.510 --> 08:42.710
Happiness这个插件

08:44.110 --> 08:45.810
你得先引用这个插件

08:46.010 --> 08:46.410
可不可以

08:46.410 --> 08:46.910
当然可以

08:47.010 --> 08:47.610
当然可以

08:47.910 --> 08:50.010
所以说这一块我们就可以使用什么

08:50.310 --> 08:51.410
就可以使用那个

08:53.710 --> 08:54.510
myplugin

08:54.710 --> 08:55.410
myplugin

08:55.910 --> 08:56.910
他什么

08:57.010 --> 08:58.010
他的Mixing对吧

08:58.010 --> 08:59.210
我们之前写过的Mixing

09:00.210 --> 09:00.810
把什么

09:00.910 --> 09:01.610
defaults

09:01.610 --> 09:02.510
obj1传进去

09:02.510 --> 09:03.810
把obj1传进去对吧

09:04.010 --> 09:05.510
他可以来帮我们来进行混合

09:05.510 --> 09:06.910
把他混合到他里边

09:07.510 --> 09:09.010
然后会返回一个新的对象

09:09.110 --> 09:09.810
这个新的对象

09:09.810 --> 09:11.110
让我们用一个东西来接受

09:11.110 --> 09:11.710
比方说

09:11.710 --> 09:13.310
我就把这个配置保存到哪了

09:13.310 --> 09:14.910
保存到这个属性里边

09:14.910 --> 09:16.810
你不在6吗

09:17.110 --> 09:18.010
创建构造函数吗

09:18.010 --> 09:18.410
对吧

09:18.410 --> 09:19.510
创建一个对象吗

09:19.710 --> 09:21.710
我就把你这个配置的最终的配置

09:21.710 --> 09:23.110
保存到一个属性里边

09:23.610 --> 09:24.710
一共将来使用

09:25.510 --> 09:26.410
保存我们看一下

09:26.510 --> 09:27.910
看一下有没有正常的覆盖

09:28.810 --> 09:29.210
保存一下

09:29.210 --> 09:29.710
你看一下

09:29.910 --> 09:30.710
obj有了

09:30.910 --> 09:32.210
Diarration30对不对

09:32.610 --> 09:34.610
我们用的是他配置的值

09:34.810 --> 09:35.910
如果你没有写这个配置

09:35.910 --> 09:36.910
比方说我这里没写

09:37.110 --> 09:37.910
啥配置没写

09:38.010 --> 09:38.610
保存

09:38.810 --> 09:40.110
那么我们就使用的是什么

09:40.210 --> 09:42.410
使用的是默认值Diarration16

09:42.510 --> 09:43.910
总之我的一个值

09:44.410 --> 09:45.110
不要对吧

09:45.610 --> 09:46.410
这个很简单

09:46.410 --> 09:47.910
好

09:47.910 --> 09:48.910
我们来继续写配置

09:49.710 --> 09:51.510
比方说写了这个配置之后

09:51.510 --> 09:52.510
还有什么配置呢

09:53.310 --> 09:55.810
你要从一个值变化到另一个值

09:55.910 --> 09:58.110
那么你是不是得告诉我总时间

09:58.410 --> 09:59.110
你要变化

09:59.110 --> 10:00.910
在多少时间内完成变化

10:00.910 --> 10:01.910
你看我们刚才说的

10:02.210 --> 10:02.910
动画的本质

10:02.910 --> 10:04.510
就是在一段时间内

10:04.810 --> 10:06.310
从一个值变化到另一个值

10:06.410 --> 10:08.310
那么这一段时间是多长呢

10:08.710 --> 10:09.710
单位好妙

10:09.710 --> 10:10.810
这个单位也是好妙

10:11.810 --> 10:13.810
好这里的单位也是好妙

10:13.810 --> 10:15.110
比方说3000

10:15.110 --> 10:16.210
3秒钟

10:16.210 --> 10:17.410
那就是3000好秒

10:17.610 --> 10:19.210
当然他也有默认值

10:19.210 --> 10:20.210
这东西可以不传

10:20.210 --> 10:20.810
默认值的话

10:20.810 --> 10:21.910
比方说你就自行规定

10:21.910 --> 10:23.410
被默认值一秒钟

10:23.610 --> 10:24.710
默认值一秒钟

10:25.010 --> 10:26.810
默认总时间

10:27.210 --> 10:28.210
我一秒钟

10:28.710 --> 10:29.410
你要这意思吧

10:30.010 --> 10:31.210
好当然你可以配置

10:31.210 --> 10:32.110
你可以配置

10:32.110 --> 10:32.810
如果你配置的

10:32.810 --> 10:33.810
我就按照你配置来

10:33.810 --> 10:34.910
如果你没有配置的话

10:34.910 --> 10:36.010
我就按照默认值来

10:36.210 --> 10:37.110
这非常简单

10:38.410 --> 10:39.610
好这是总时间

10:40.010 --> 10:41.110
还有什么东西呢

10:41.410 --> 10:42.110
还有什么东西

10:42.110 --> 10:43.110
我们需要处理的

10:43.410 --> 10:45.510
还有就是我们这里呢

10:45.510 --> 10:46.910
还要既然要变化

10:46.910 --> 10:47.110
对吧

10:47.110 --> 10:48.910
你是不是要告诉我一个初始值

10:49.210 --> 10:51.110
还要告诉我一个什么结束值

10:51.110 --> 10:51.610
对不对

10:51.810 --> 10:53.010
初始值和结束值

10:53.110 --> 10:54.110
但是你要注意哦

10:54.710 --> 10:55.610
初始值

10:55.910 --> 10:57.410
值得不是一个数字

10:57.510 --> 10:59.010
值得是多个数字

10:59.310 --> 11:00.110
那么多个数字

11:00.110 --> 11:01.310
你这里可以用数组

11:01.510 --> 11:02.910
也可以用对象

11:03.110 --> 11:03.710
用对象

11:03.710 --> 11:04.610
比方说我们这里

11:05.610 --> 11:06.410
建议他

11:06.410 --> 11:08.710
不要让我们插件要求他使用一个对象

11:08.810 --> 11:09.610
一个对象

11:09.810 --> 11:10.710
你给我一个对象

11:10.910 --> 11:13.110
对象里边可以可以存放一些数字

11:13.310 --> 11:17.210
比方说a 100 b 150 c 40

11:17.510 --> 11:18.010
0

11:18.110 --> 11:19.510
比方说这是初始值

11:19.910 --> 11:20.610
结束值呢

11:20.610 --> 11:21.810
我们用end来表示

11:21.910 --> 11:22.810
end来表示

11:23.210 --> 11:24.710
你给我也是一个对象

11:24.710 --> 11:25.410
一个对象

11:25.410 --> 11:26.710
那如果只有一个数字的话

11:26.710 --> 11:27.710
那就写一个就完事了

11:27.710 --> 11:28.710
那就写一个就完事了

11:29.210 --> 11:30.510
结束值呢也是

11:30.510 --> 11:32.210
当然你当然肯定要对应嘛

11:32.210 --> 11:34.110
你这里写的A这里肯定得写A嘛

11:34.110 --> 11:35.110
不然的话我知道

11:35.110 --> 11:35.810
我怎么知道

11:35.810 --> 11:37.410
这个数字变了什么数字呢

11:37.410 --> 11:40.010
结束值就是你变化的最终目标

11:40.010 --> 11:41.810
变化到哪一个数字

11:42.010 --> 11:43.210
变化到哪一个数字

11:43.210 --> 11:44.210
这都是这么个意思

11:45.410 --> 11:46.410
好我们来看一下

11:46.710 --> 11:47.210
A呢

11:47.210 --> 11:48.210
我们比方说

11:48.210 --> 11:49.210
给他写上一个

11:49.610 --> 11:50.410
比方说1000嘛

11:50.410 --> 11:51.610
从100变到1000

11:51.810 --> 11:53.010
b 变到0

11:53.010 --> 11:53.310
对吧

11:53.310 --> 11:55.010
从150变到0

11:55.210 --> 11:56.810
c 从0变到

11:57.210 --> 11:58.510
-的3000

11:58.810 --> 12:00.010
三千无所谓啊

12:00.210 --> 12:01.110
你正向变化

12:01.110 --> 12:02.410
反向变化都无所谓

12:02.610 --> 12:03.710
这些都不重要啊

12:04.210 --> 12:05.810
总之从一个数变到另一个数嘛

12:06.410 --> 12:08.010
好这就是初始值和结束值

12:08.110 --> 12:10.110
这两个是没有办法写默认值的啊

12:10.310 --> 12:11.710
这两个是没有办法写默认值的

12:11.710 --> 12:12.310
你怎么写了

12:12.310 --> 12:12.910
这个默认值

12:12.910 --> 12:13.510
你咋写

12:13.810 --> 12:15.010
你咋知道初始值是多少

12:15.010 --> 12:15.810
结束值是多少呢

12:15.810 --> 12:16.510
你没法知道

12:16.510 --> 12:16.910
对吧

12:17.310 --> 12:19.110
你没法写这个东西啊

12:19.110 --> 12:20.510
这两个是没法写默认值的

12:20.510 --> 12:22.310
如果你一定要写默认值的话

12:23.110 --> 12:24.610
如果你一定要写默认值的话

12:24.610 --> 12:25.110
你咋写了

12:25.110 --> 12:26.310
只能写两个空对象

12:26.310 --> 12:27.110
那行吧

12:27.210 --> 12:27.710
行吧

12:28.010 --> 12:29.710
初始值呢是一个空对象啊

12:30.510 --> 12:32.110
初始值啊

12:32.210 --> 12:34.110
默认值的end是一个空对象

12:34.210 --> 12:35.210
当然肯定要对应啊

12:35.210 --> 12:36.010
肯定要对应

12:36.810 --> 12:38.010
就是终止值

12:39.410 --> 12:39.810
好

12:40.010 --> 12:40.510
就写好了

12:40.510 --> 12:41.410
这这四个配置的

12:41.410 --> 12:41.910
对吧

12:42.310 --> 12:43.110
还有啥呢

12:43.310 --> 12:45.010
目前的暂时想不到了啊

12:45.010 --> 12:46.410
暂时想不到其他的配置的

12:46.410 --> 12:46.710
但是呢

12:46.710 --> 12:47.110
以后呢

12:47.110 --> 12:48.410
肯定还会有新的配置啊

12:48.410 --> 12:49.410
我其实已经想到了

12:49.410 --> 12:50.910
但是只是你们想不到而已

12:51.010 --> 12:52.310
那么先暂时这样子啊

12:52.310 --> 12:53.310
先暂时这样子

12:53.510 --> 12:53.810
以后呢

12:53.810 --> 12:55.110
我们肯定还会加啊

12:55.110 --> 12:55.510
还会加

12:55.510 --> 12:55.710
哎

12:55.710 --> 12:56.410
我的这个

12:56.910 --> 12:58.310
他这个东西怎么没出来啊

12:58.310 --> 12:58.710
对吧

12:58.710 --> 13:00.110
这个折叠要出来啊

13:01.610 --> 13:01.810
好

13:01.810 --> 13:03.210
然后这里边写完了过后

13:03.310 --> 13:04.910
我们再回到这个构造函数里边

13:05.110 --> 13:05.510
现在呢

13:05.510 --> 13:07.310
我们已经处理好配置了啊

13:07.510 --> 13:08.610
配置已经处理好了

13:08.810 --> 13:10.510
那么接下来还要处理什么东西呢

13:10.710 --> 13:11.610
还要出什么东西呢

13:11.610 --> 13:13.410
肯定还要运算一些东西啊

13:13.510 --> 13:14.910
比方说我们以后要进行动画

13:14.910 --> 13:15.210
对吧

13:15.210 --> 13:16.510
我们先不着急什么

13:16.710 --> 13:17.410
启动计时器

13:17.410 --> 13:18.710
这东西先不着急啊

13:18.810 --> 13:20.610
我们先写上这么一些属性

13:20.610 --> 13:22.410
一先我们以后要用到的属性

13:22.810 --> 13:23.710
什么属性呢

13:23.710 --> 13:24.210
首先呢

13:24.210 --> 13:25.310
我们写一个这个

13:25.510 --> 13:26.010
台门

13:26.510 --> 13:27.410
这台门是啥

13:27.410 --> 13:28.810
表示计时器的id

13:29.410 --> 13:30.610
计时器的id

13:30.610 --> 13:31.710
我先把这东西写上

13:32.110 --> 13:33.510
一会肯定要用到这个东西的

13:33.510 --> 13:33.810
对吧

13:33.810 --> 13:36.510
我们先把该能想到的属性全把它写上

13:36.510 --> 13:38.210
因为一会要用啊

13:38.810 --> 13:39.910
不然的话一会用的时候

13:39.910 --> 13:42.810
或者说一会用的时候再回过头来写也行

13:42.810 --> 13:43.610
啊也行

13:44.510 --> 13:46.010
还有什么要属性要写呢

13:46.010 --> 13:49.010
还有什么就是变就是变化的次数

13:49.410 --> 13:50.410
这个什么可以算出来

13:50.410 --> 13:52.410
我们以前出过那个轮波图

13:52.610 --> 13:54.610
轮波图里边说也要算这个东西

13:54.710 --> 13:55.110
对吧

13:55.110 --> 13:56.710
高速的总时间

13:57.210 --> 13:59.210
每30毫秒运动一次

13:59.810 --> 14:01.410
总时间是3000毫秒

14:01.510 --> 14:02.610
那运动多好次呢

14:03.110 --> 14:04.410
总时间处理它

14:04.710 --> 14:05.210
对不对

14:05.810 --> 14:07.110
好那么就是来了啊

14:07.110 --> 14:10.610
就是ZS的Option的什么total

14:10.710 --> 14:11.210
对吧

14:11.310 --> 14:14.610
总时间处理啥ZS Option的

14:14.810 --> 14:15.910
delay型对吧

14:16.610 --> 14:18.610
这两个相处是不是运动的总次数

14:18.610 --> 14:20.210
对吧运动次数要算出来

14:20.410 --> 14:22.110
但是处出来是不是有可能是小数

14:22.110 --> 14:23.310
比方说2.8次

14:23.310 --> 14:25.010
2.8次我们就算三次

14:25.210 --> 14:26.110
就算三次

14:26.310 --> 14:27.710
所以说这里mess

14:28.110 --> 14:29.010
mess seal

14:29.410 --> 14:30.110
mess seal

14:30.610 --> 14:31.510
向上取整

14:31.710 --> 14:32.610
向上取整

14:33.910 --> 14:34.710
向上取整

14:35.010 --> 14:35.910
我们就算三次

14:36.410 --> 14:37.110
不要这意思吧

14:37.510 --> 14:39.310
好我们这里打算注释

14:39.510 --> 14:42.510
这里是运动总时间

14:42.910 --> 14:43.910
运动总时间

14:45.210 --> 14:46.910
运动总次数

14:46.910 --> 14:47.810
总次数

14:48.510 --> 14:49.510
运动总次数

14:51.010 --> 14:51.910
好是不是差不多了

14:51.910 --> 14:53.210
就写完了就写完了

14:54.310 --> 14:57.010
好运动总次数我们现在算出来了

14:57.510 --> 14:58.910
一共运动这么多次

14:59.910 --> 15:01.510
然后还要算啥呢

15:02.310 --> 15:03.210
还要算啥呢

15:03.710 --> 15:05.810
我们现在知道运动的总次数

15:06.010 --> 15:08.010
是不是还有一个当前运动的次数

15:08.110 --> 15:08.510
对吧

15:09.110 --> 15:12.410
当前运动的是不是要用一个属性来保存

15:12.610 --> 15:15.310
对吧我们之前跟说了个轮波图是一样的

15:15.510 --> 15:16.710
一共要运行这么多次

15:16.710 --> 15:18.210
你目前运行的多少次呢

15:18.210 --> 15:19.610
是不是要有一个当前次数

15:19.610 --> 15:19.910
对吧

15:19.910 --> 15:21.010
care number

15:21.710 --> 15:22.910
它一开始肯定等于0

15:23.110 --> 15:24.510
一开始肯定等于0

15:24.610 --> 15:26.810
就是当前运动的次数

15:27.210 --> 15:28.710
每30毫秒运动一次

15:29.310 --> 15:30.710
目前运动的次数是0

15:30.710 --> 15:31.910
当前运动次数

15:32.910 --> 15:33.310
对吧

15:33.710 --> 15:35.110
好这些东西你可能想不到

15:35.110 --> 15:35.910
想不到没关系

15:35.910 --> 15:37.410
你写这些就会发现问题了

15:37.410 --> 15:38.610
你会加这些属性吗

15:39.610 --> 15:41.010
还有什么东西呢

15:41.710 --> 15:42.710
还有一个东西

15:43.510 --> 15:44.910
再看一下

15:44.910 --> 15:46.310
确保理解之前的东西

15:47.710 --> 15:48.810
还有一个东西什么东西呢

15:48.810 --> 15:49.510
就是说

15:50.610 --> 15:52.210
你现在知道运动总次数

15:52.210 --> 15:54.410
还知道运动的当前运动次数

15:54.410 --> 15:57.410
还有当前的对象

15:57.810 --> 15:59.110
这是初始对象

15:59.310 --> 16:00.510
这是结束对象

16:00.510 --> 16:00.910
对吧

16:01.310 --> 16:03.710
那么目前这个对象可能运动到了一半

16:03.910 --> 16:05.610
那么目前的对象是什么样子呢

16:05.810 --> 16:06.210
对不对

16:06.210 --> 16:07.610
你得得到得到这么个东西

16:07.910 --> 16:09.610
目前那个对象是什么样子

16:10.410 --> 16:11.610
这是我们初始的对象

16:11.610 --> 16:13.210
这是我们变化的目标

16:13.210 --> 16:14.610
目标的事要变成这个样子

16:14.610 --> 16:15.010
对吧

16:15.210 --> 16:16.610
那么一定有一个过程

16:16.710 --> 16:18.310
那么我们必须要用个对象来嫉妒

16:18.310 --> 16:19.410
当前是什么样子

16:19.710 --> 16:20.710
当前是什么样子

16:20.810 --> 16:23.110
所以说我们得有一个当前

16:24.110 --> 16:27.510
当前就是状态

16:27.810 --> 16:28.710
当前状态

16:28.810 --> 16:29.710
当前状态怎么办

16:29.710 --> 16:31.610
一开始肯定是跟初始状态一样

16:31.610 --> 16:32.010
对吧

16:32.110 --> 16:33.110
当前状态

16:33.310 --> 16:34.110
care data

16:34.810 --> 16:35.810
表示当前状态

16:36.410 --> 16:37.910
跟这个初始状态一样

16:37.910 --> 16:38.710
那这里是不是

16:39.310 --> 16:41.510
能不能直接负这样子负责

16:42.010 --> 16:43.310
能不能直接这样子负责

16:43.410 --> 16:43.910
不行

16:43.910 --> 16:45.210
因为当前状态会变化的

16:45.210 --> 16:46.510
它的属性会变化的

16:46.810 --> 16:47.710
那一旦变化的话

16:47.710 --> 16:48.710
是不是把它也变化了

16:48.710 --> 16:49.210
变化了

16:49.310 --> 16:50.910
这是我们不希望看到的

16:51.410 --> 16:53.310
因为这个对象是别人传过来的

16:53.310 --> 16:54.710
已经是调用者传过来的

16:54.710 --> 16:56.010
我们这里只是在测试

16:56.210 --> 16:57.510
一定是调用者传过来的

16:57.610 --> 16:58.710
我们不希望

17:00.310 --> 17:02.510
把调用者给我传令的对象给它变了

17:02.710 --> 17:04.510
可能调用者还要做别的用了

17:04.610 --> 17:05.110
对不对

17:05.210 --> 17:06.510
所以说这里我们应该做什么

17:06.510 --> 17:07.810
应该做克浓

17:08.110 --> 17:09.510
我们之前不是写过克浓吗

17:09.910 --> 17:10.510
克浓

17:11.010 --> 17:11.510
对吧

17:11.710 --> 17:13.310
我们还写得非常非常完善

17:13.310 --> 17:14.310
既可以深度克浓

17:14.310 --> 17:15.310
也可以浅度克浓

17:15.310 --> 17:16.610
这里我没有给第二个参数

17:16.610 --> 17:17.510
没有给第二个参数的话

17:17.510 --> 17:18.510
就是浅度克浓

17:19.010 --> 17:19.710
浅度克浓

17:20.310 --> 17:21.810
因为我们这里只看这个属性

17:21.810 --> 17:23.510
如果这个属性还是个对象的话

17:23.510 --> 17:24.610
那我就不考虑了

17:24.610 --> 17:26.110
我就完全不考虑这种情况了

17:26.110 --> 17:28.310
我只考虑这些属性就是一个数字

17:28.910 --> 17:29.910
这是正常的情况

17:29.910 --> 17:30.310
对不对

17:31.110 --> 17:31.210
好

17:31.210 --> 17:32.310
这是当前状态

17:32.610 --> 17:33.110
对吧

17:33.510 --> 17:34.110
没问题吧

17:35.010 --> 17:35.410
好

17:35.910 --> 17:37.610
然后我们来输出一下吧

17:37.610 --> 17:38.310
输出一下

17:38.710 --> 17:40.510
这里我们把这个Ilimit输出了

17:41.310 --> 17:43.110
你看Ilimit里面就有很多属性了

17:43.110 --> 17:43.510
你看

17:43.710 --> 17:45.310
当前的运动次数

17:45.510 --> 17:47.510
当前的状态你看是不是克浓过来了

17:47.610 --> 17:48.210
然后呢

17:48.210 --> 17:49.610
总共运动的次数

17:49.610 --> 17:50.610
目前的配置

17:50.610 --> 17:51.710
你看计时器的id

17:51.710 --> 17:52.710
是不是全都有了

17:52.710 --> 17:53.110
对不对

17:53.110 --> 17:53.910
全都有了

17:54.410 --> 17:54.910
哎

17:55.810 --> 17:56.010
好

17:56.010 --> 17:57.710
接下来我们还要算一个东西

17:58.010 --> 17:59.910
我们先不着急启动计时器啊

17:59.910 --> 18:02.510
启动计时器其实是很简单很简单的一个事

18:02.510 --> 18:02.810
但是呢

18:02.810 --> 18:05.510
我们首先把这些需要用到的数据

18:05.810 --> 18:06.510
给他搞定

18:07.110 --> 18:09.110
我们之前写过了一个轮波图

18:09.210 --> 18:11.210
那所以说你有这么一个概念了

18:11.710 --> 18:12.810
写轮波图的时候呢

18:12.810 --> 18:15.910
我们是不是还要算每一次运动的距离啊

18:16.210 --> 18:16.710
对吧

18:16.810 --> 18:19.710
就就是算算了什么运动的总距离

18:19.710 --> 18:20.210
对不对

18:20.310 --> 18:22.010
算运动的总距离

18:22.810 --> 18:23.710
是不是要算出来

18:23.910 --> 18:26.110
运动的总距离要算出来啊

18:26.410 --> 18:27.910
所有属性

18:28.310 --> 18:30.110
运动的总距离

18:30.110 --> 18:32.010
就是每个属性他都有一个运动总距离

18:32.110 --> 18:33.710
要把这个总距离要算出来

18:34.110 --> 18:35.710
好这个总距离怎么算呢

18:36.110 --> 18:36.610
啊

18:37.010 --> 18:38.010
怎么距离怎么算呢

18:38.110 --> 18:39.710
比方说我们首先要想到

18:39.910 --> 18:41.710
我要得到一个什么东西

18:42.210 --> 18:45.210
你都不知道你要得到啥你怎么算的啊

18:45.310 --> 18:47.510
比方说他变化到他

18:47.710 --> 18:49.310
我要把总距离算出来

18:49.410 --> 18:50.810
那么也要得到一个什么东西呢

18:50.810 --> 18:52.710
我要得到这么一个对象啊

18:52.710 --> 18:53.710
要得到这么一个对象

18:54.010 --> 18:55.710
这个对象里边是这样记录的啊

18:55.710 --> 18:56.710
比方对象的

18:57.510 --> 18:58.810
变量的名字叫偷偷啊

18:58.810 --> 18:59.610
他是个对象

18:59.910 --> 19:01.110
表示总距离

19:01.510 --> 19:02.310
啊这偷偷不行

19:02.310 --> 19:03.410
偷偷的跟那个

19:03.610 --> 19:04.910
跟那个持终于造成混淆

19:05.010 --> 19:06.410
跟总时间用于造成混淆

19:06.710 --> 19:07.910
那么就是认识吧

19:08.110 --> 19:08.610
认识

19:09.910 --> 19:10.210
啊

19:10.710 --> 19:12.310
总距离就是长度啊

19:12.310 --> 19:13.710
运动的长度他是个对象啊

19:13.710 --> 19:14.410
所以他这个对象啊

19:14.410 --> 19:15.410
他不是个数字啊

19:15.410 --> 19:16.210
他是个对象

19:16.910 --> 19:17.310
好

19:17.610 --> 19:18.810
这个对象里边呢

19:18.810 --> 19:20.310
比方说a啊

19:20.310 --> 19:21.510
看a的距离是多少

19:21.510 --> 19:22.910
是不是1000减去100

19:23.010 --> 19:23.910
就是900

19:23.910 --> 19:25.210
他的总距离是900

19:26.010 --> 19:26.510
好

19:26.710 --> 19:27.510
然后呢

19:28.010 --> 19:28.610
b

19:28.710 --> 19:29.810
b的总距离是多少

19:30.310 --> 19:31.410
b的总距离是多少

19:32.210 --> 19:34.310
b的总距离是不是0减去150

19:34.310 --> 19:35.610
就是-150

19:36.410 --> 19:37.610
好c的总距离呢

19:37.610 --> 19:39.410
是不是-3000减去0

19:39.410 --> 19:40.310
就是-3000

19:40.310 --> 19:40.810
对不对

19:40.910 --> 19:42.210
我们要得到这么一个东西

19:42.210 --> 19:43.010
明白这个意思吧

19:43.410 --> 19:44.910
哎我们要得到这么一个东西

19:45.110 --> 19:46.510
好运动总距离

19:47.110 --> 19:47.710
好来吧

19:48.010 --> 19:50.410
我们就比方说负责呗啊负责

19:50.610 --> 19:51.710
好怎么负责呢

19:51.710 --> 19:53.110
我们首先建立一个对象啊

19:53.110 --> 19:54.010
就是nance

19:54.610 --> 19:55.710
注意他是对对象啊

19:55.710 --> 19:56.510
他是个对象

19:56.510 --> 19:57.810
不要平时用习惯了

19:57.810 --> 19:58.210
算了算了

19:58.210 --> 19:59.210
换个名字换个名字

19:59.310 --> 20:00.310
免得一用习惯了

20:00.310 --> 20:01.410
什么数组的nance

20:01.610 --> 20:02.410
一用习惯了

20:02.410 --> 20:03.710
你把它当成一个数字了

20:04.010 --> 20:05.110
啊那这么说

20:05.110 --> 20:05.710
distance

20:05.910 --> 20:06.710
distance

20:06.910 --> 20:07.810
总距离啊

20:07.810 --> 20:09.210
d30也是距离的意思啊

20:10.010 --> 20:10.410
好

20:10.510 --> 20:11.110
总距离呢

20:11.110 --> 20:12.010
他是一个对象

20:12.210 --> 20:13.610
这个对象里面有哪些属性的

20:13.610 --> 20:15.810
是不是跟begin和end的属性是一致的

20:16.010 --> 20:16.410
因此呢

20:16.410 --> 20:17.710
你这里是不是可以循环

20:17.910 --> 20:18.610
循环啥

20:18.910 --> 20:21.910
循环begin和end的所有属性啊

20:21.910 --> 20:22.610
循环呗

20:22.710 --> 20:23.010
in

20:23.010 --> 20:23.510
什么

20:23.610 --> 20:24.110
in

20:24.510 --> 20:25.010
begin

20:25.510 --> 20:25.910
z

20:25.910 --> 20:26.510
o

20:26.710 --> 20:27.210
begin

20:28.010 --> 20:28.410
啊

20:29.010 --> 20:29.910
来得到这个

20:30.110 --> 20:30.610
begin

20:30.710 --> 20:31.610
当然这件事呢

20:31.610 --> 20:33.310
你也可以专门用一个函数来做

20:33.510 --> 20:34.810
啊那我就顺便说一下吧

20:35.210 --> 20:36.910
顺便说一下算了算了算了算了

20:37.210 --> 20:38.310
也没必要啊也没必要

20:38.310 --> 20:39.410
也挺简单的对吧

20:39.410 --> 20:40.310
也挺简单的

20:40.610 --> 20:41.010
好

20:41.110 --> 20:43.110
循环这个begin对象里面的所有属性

20:43.310 --> 20:44.410
然后怎么样了

20:44.510 --> 20:46.410
是不是把这个z的distance

20:46.410 --> 20:47.710
给它加一个属性啊

20:47.710 --> 20:47.910
对吧

20:47.910 --> 20:48.610
这种鞋法呢

20:48.610 --> 20:49.710
应该非常非常属性

20:49.710 --> 20:51.310
应该要很熟练啊

20:51.310 --> 20:52.510
要非常非常熟练

20:52.610 --> 20:53.810
就是给它加一个属性

20:53.910 --> 20:55.410
属性的名字就是个变量的名字

20:55.410 --> 20:57.510
因为跟这个属性的名字是一样的嘛

20:57.810 --> 20:59.010
好给它加一个属性

20:59.210 --> 20:59.910
加一个属性

20:59.910 --> 21:01.110
这个属性等于啥呢

21:01.410 --> 21:03.110
是不是等于end的这个这个属性

21:03.110 --> 21:04.510
减去begin的这个属性

21:04.510 --> 21:05.010
对吧

21:05.110 --> 21:05.910
就是end

21:06.410 --> 21:07.210
啊就是这个

21:07.610 --> 21:08.210
啊

21:09.110 --> 21:09.610
z

21:11.010 --> 21:11.810
end的

21:12.610 --> 21:14.010
这个什么属性

21:14.110 --> 21:14.710
prob

21:15.210 --> 21:16.910
减去z option

21:17.010 --> 21:17.710
begin的

21:18.410 --> 21:19.910
这个属性prob

21:20.010 --> 21:20.410
对吧

21:20.610 --> 21:22.110
两个一相减是不是距离的

21:22.210 --> 21:22.710
对不对

21:22.810 --> 21:24.210
管它距离是正数还是复数呢

21:24.210 --> 21:25.010
复数就是

21:25.210 --> 21:26.910
复数就是在页面上就是往左边跑

21:26.910 --> 21:27.110
对吧

21:27.110 --> 21:29.110
复数的在数据里面就是减少

21:29.110 --> 21:29.610
对不对

21:29.710 --> 21:30.510
那管你呢

21:30.510 --> 21:31.810
总之这是距离

21:31.810 --> 21:33.410
那距离是可以是复数的啊

21:33.810 --> 21:34.410
啊你们

21:34.710 --> 21:36.110
不是小学还是初中书

21:36.110 --> 21:37.210
学过那个坐标系吗

21:37.210 --> 21:38.410
对不对啊

21:38.810 --> 21:39.710
坐标轴吗

21:39.810 --> 21:40.910
向右就是增加吗

21:40.910 --> 21:42.110
向左的就减少吗

21:42.710 --> 21:43.110
好

21:43.410 --> 21:44.610
我们这里啊不用不用

21:44.610 --> 21:45.610
这里不用打印了啊

21:45.610 --> 21:47.110
我们这里直接打印这个itimate

21:47.110 --> 21:47.910
我们来看一下啊

21:47.910 --> 21:49.410
这个总距离是不是可以算出来

21:50.010 --> 21:51.610
你看总距离就算出来了

21:52.310 --> 21:52.910
没问题吧

21:53.210 --> 21:55.310
每个属性运动的总距离就算出来了

21:55.710 --> 21:55.910
好

21:55.910 --> 21:58.010
总距离算出来的过后我们再算什么

21:58.210 --> 21:59.710
算所有属性

22:00.310 --> 22:01.410
所有属性

22:01.910 --> 22:03.910
每次运动的距离

22:04.410 --> 22:06.510
每次运动的距离是不是可以算了

22:07.110 --> 22:09.310
所有的属性每一次运动的距离

22:09.310 --> 22:10.110
就可以算了

22:10.410 --> 22:10.910
好

22:11.110 --> 22:11.810
怎么算了

22:12.610 --> 22:13.410
怎么算了

22:13.410 --> 22:14.610
好我们这里就这样子

22:15.910 --> 22:16.810
循环

22:18.210 --> 22:19.610
每一次运动的距离是啥

22:21.650 --> 22:22.850
总距离都出来了

22:22.850 --> 22:24.850
那运动的次数也告诉你了

22:24.850 --> 22:26.350
那每一次运动多少是不是

22:26.350 --> 22:27.250
直接就可以算出来了

22:27.250 --> 22:27.650
对吧

22:27.850 --> 22:29.250
所以说我们这里循环啥

22:29.450 --> 22:30.550
先先先建个对象啊

22:30.550 --> 22:31.550
肯定也是个对象

22:31.950 --> 22:33.150
建一个对象就是

22:33.750 --> 22:34.550
every

22:35.850 --> 22:36.350
this

22:36.850 --> 22:38.050
或者是once this

22:38.050 --> 22:39.150
一次运动的距离

22:39.650 --> 22:40.350
每一次运

22:40.550 --> 22:42.350
数所有的属性每一次运动的距离

22:42.450 --> 22:43.150
也是个对象

22:43.150 --> 22:44.250
那循环啥是不是循环

22:44.250 --> 22:45.250
this distance

22:45.450 --> 22:45.850
对吧

22:46.250 --> 22:47.250
是一样的啊

22:47.450 --> 22:48.550
this distance

22:49.350 --> 22:49.750
啊

22:50.050 --> 22:51.550
甚至到我们可以刚刚才

22:52.050 --> 22:54.250
就直接直接在一个循环里面写了啊

22:54.250 --> 22:54.850
也行

22:55.150 --> 22:56.350
在一个循环里面写完

22:57.050 --> 22:57.650
也行

22:58.050 --> 22:58.550
在这里

22:58.550 --> 22:59.950
这里不是算出来的总距离吗

22:59.950 --> 23:00.250
对吧

23:00.250 --> 23:01.650
总距离这个属性的总距离

23:01.650 --> 23:03.050
那么这里就接着来

23:03.650 --> 23:05.050
一个循环里面写完的了

23:06.050 --> 23:06.850
this什么

23:06.950 --> 23:08.450
every this

23:09.150 --> 23:09.550
啊

23:09.550 --> 23:10.350
这个属性

23:10.350 --> 23:11.150
等于啥呢

23:11.150 --> 23:12.550
等于这个总距离

23:13.150 --> 23:14.450
就是这个总距离的值

23:15.050 --> 23:16.250
除一啥

23:16.850 --> 23:17.550
除哎

23:17.550 --> 23:18.350
怎么百分好

23:18.350 --> 23:21.550
除一啥除以运动的次数啊

23:21.750 --> 23:22.350
number

23:22.850 --> 23:24.250
除以运动的次数

23:24.950 --> 23:25.650
没问题吧

23:25.750 --> 23:26.750
保存看一下啊

23:26.950 --> 23:27.950
那我们现在看一下

23:28.450 --> 23:30.350
每一次运动的距离是不是可以算出来的

23:30.350 --> 23:30.750
你看

23:30.950 --> 23:32.250
运动的次数知道

23:32.350 --> 23:33.850
每一次距离是不是就可以知道了

23:33.850 --> 23:34.750
它可以有小数啊

23:34.750 --> 23:35.850
为什么不能有小数呢

23:36.050 --> 23:36.950
可以有小数

23:37.450 --> 23:38.150
没问题吧

23:38.950 --> 23:40.350
那么这样子是不是就完事了

23:40.550 --> 23:40.950
对不对

23:40.950 --> 23:41.650
就完事了

23:41.850 --> 23:42.250
好

23:42.350 --> 23:43.550
现在我们知道了这些信息了

23:43.550 --> 23:45.450
你看我们通过你给我的参

23:45.450 --> 23:46.450
你给我的配置

23:46.750 --> 23:47.050
然后呢

23:47.050 --> 23:48.650
把这些东西全部都算出来了

23:48.850 --> 23:49.450
算出来了

23:49.450 --> 23:50.850
过后接下来就好办了

23:51.250 --> 23:52.050
就好办了

23:52.250 --> 23:53.550
我们就是说什么接下来

23:53.750 --> 23:55.750
就是为这个对象加一些方法

23:55.750 --> 23:57.250
比方说开始运动

23:57.450 --> 23:58.850
停止运动等等等等

23:58.850 --> 23:59.350
是吧

23:59.350 --> 24:00.650
加一些方法就完事了

24:00.950 --> 24:02.450
好关键是方法加哪的

24:02.450 --> 24:03.250
你想一想啊

24:03.250 --> 24:04.550
我们之前学过的知识

24:04.750 --> 24:06.050
能不能把方法写到这

24:06.550 --> 24:07.150
能不能

24:08.150 --> 24:10.250
如果仅仅从功能上来说的话

24:10.250 --> 24:11.450
也是没啥问题

24:11.650 --> 24:12.450
可以写到这

24:12.450 --> 24:13.450
可以写到这

24:13.750 --> 24:14.550
但是呢

24:14.550 --> 24:16.750
这样子的一个怀出在于什么了

24:16.850 --> 24:19.850
如果我的页面中创建了多个aliment对象

24:19.950 --> 24:21.450
那是不是有多个这个函数了

24:21.650 --> 24:24.150
每一次创建对象都产生一个这个start函数

24:24.650 --> 24:25.750
这样子的不太合理

24:25.750 --> 24:26.550
不太合理

24:26.650 --> 24:27.050
为什么呢

24:27.050 --> 24:28.650
因为这些函数是通用的

24:29.250 --> 24:29.750
你说

24:29.950 --> 24:31.450
你说这个aliment这个动画

24:31.450 --> 24:33.250
跟另一个动画的start启动

24:33.350 --> 24:34.350
代码有啥区别的

24:34.350 --> 24:35.250
没有啥区别

24:35.650 --> 24:36.850
所以说我们这里呢

24:37.250 --> 24:38.950
最好把他写到哪

24:39.250 --> 24:40.250
我们之前讲过了

24:40.350 --> 24:41.050
所以写到

24:41.450 --> 24:43.550
写到那个圆形里边

24:43.650 --> 24:44.050
对吧

24:44.350 --> 24:45.950
proto type

24:46.950 --> 24:49.050
往圆形里边加一个start

24:49.750 --> 24:50.750
启动对吧

24:50.950 --> 24:51.750
还再加一个什么

24:51.750 --> 24:52.750
再加一个stop

24:52.850 --> 24:53.550
停止

24:53.950 --> 24:54.550
停止

24:55.750 --> 24:56.650
启动停止

24:58.250 --> 24:58.750
stop

24:58.850 --> 24:59.350
停止

25:01.150 --> 25:02.150
停止很简单的

25:02.150 --> 25:03.550
停止非常非常简单

25:03.650 --> 25:05.050
就是clear interval

25:05.350 --> 25:06.050
interval

25:06.150 --> 25:06.850
什么timer

25:06.950 --> 25:08.050
z star timer

25:08.050 --> 25:08.550
对不对

25:09.250 --> 25:10.150
z star timer

25:10.450 --> 25:11.750
这对的z是不会出问题的

25:11.750 --> 25:13.450
因为我们后边调用的这个stop

25:13.450 --> 25:14.250
是怎么调用的

25:14.550 --> 25:15.050
怎么调用的

25:15.050 --> 25:16.350
是用animates

25:16.650 --> 25:17.550
第二stop

25:17.550 --> 25:18.750
用这种方式来调用的

25:18.750 --> 25:20.750
所以说他对象指向的是一个

25:21.250 --> 25:21.950
你的对象

25:21.950 --> 25:22.750
所以说不用

25:22.850 --> 25:23.750
不会出问题的

25:24.050 --> 25:25.850
然后再把这个timer设为now

25:26.650 --> 25:27.450
这就是停止

25:27.450 --> 25:28.350
这就是停止

25:28.750 --> 25:30.250
start就是开始

25:30.450 --> 25:31.050
开始

25:31.650 --> 25:32.550
开始动画

25:33.150 --> 25:34.550
这个就是停止动画

25:35.750 --> 25:37.150
停止动画

25:38.550 --> 25:39.050
好

25:39.750 --> 25:41.550
开始动画里边要做啥呢

25:41.650 --> 25:42.150
要做啥呢

25:42.150 --> 25:43.150
是不是设置计时器

25:43.150 --> 25:43.650
对吧

25:43.750 --> 25:44.950
但是你设置计时器之前

25:44.950 --> 25:46.050
你要考虑一个问题啊

25:46.150 --> 25:47.950
如果你仅仅这么简单的这样的写了

25:48.050 --> 25:49.250
这是timer等于

25:49.450 --> 25:50.150
这个timer是啥

25:50.150 --> 25:50.850
不要慌了啊

25:50.850 --> 25:53.250
我们之前设置了这个计时器id的

25:53.550 --> 25:55.250
所以这个timer就是计时器id

25:55.350 --> 25:56.650
好就是set interval嘛

25:56.650 --> 25:56.950
对吧

25:57.350 --> 25:58.450
比方说你直接这样子写

25:59.250 --> 26:00.050
直接这样子写

26:00.150 --> 26:01.350
然后这里呢是option

26:01.550 --> 26:02.550
什么duration

26:02.550 --> 26:03.250
你的配置

26:03.350 --> 26:04.350
间隔时间嘛

26:04.350 --> 26:04.850
对不对

26:04.850 --> 26:05.350
间隔时间

26:05.550 --> 26:06.850
如果你直接这样子写的话

26:06.950 --> 26:09.050
一旦他调用了多次这个start

26:09.250 --> 26:10.850
一旦调用了多次

26:11.550 --> 26:13.450
那是不是他要启动很多个计时器了

26:13.750 --> 26:14.250
对不对

26:14.650 --> 26:16.350
所以说你这里最好判断一下

26:16.750 --> 26:18.650
如果这个计时器已经存在了

26:18.650 --> 26:19.450
怎么样了

26:19.650 --> 26:20.850
有些人说清空

26:21.250 --> 26:21.850
清空啥呀

26:21.850 --> 26:23.250
不清空啊不清空

26:23.650 --> 26:24.250
干嘛呢

26:24.250 --> 26:26.550
就是已经之前已经有动画了

26:27.150 --> 26:28.250
之前已经有动画了

26:28.250 --> 26:29.050
就停止

26:29.350 --> 26:30.150
就停止

26:30.450 --> 26:31.450
是这么个意思啊

26:31.850 --> 26:32.950
之前已经有动画了

26:32.950 --> 26:33.450
我就停止

26:33.450 --> 26:34.550
就不再做任何事情了

26:34.950 --> 26:36.050
等之前动画运行完

26:36.050 --> 26:37.650
不然的话我会启动很多的动画

26:38.350 --> 26:39.050
明显的意思吧

26:39.450 --> 26:40.950
之前已经有动画的话

26:40.950 --> 26:41.750
就把它停止

26:41.950 --> 26:43.450
就是就不做任何事情

26:43.650 --> 26:44.550
这才是一个动画

26:44.550 --> 26:45.550
最标准的做法

26:46.750 --> 26:47.250
好

26:48.450 --> 26:49.850
打个住是吗

26:49.850 --> 26:51.950
如果有之前

26:53.050 --> 26:55.650
已经存在计时器

26:56.050 --> 26:57.350
则不做

26:58.150 --> 26:59.150
不做任何处理

26:59.550 --> 27:00.950
就计时器已经在计时了

27:00.950 --> 27:02.150
已经在做这个动画了

27:02.650 --> 27:03.450
任何处理

27:03.550 --> 27:05.050
那么我就不做任何处理了

27:05.050 --> 27:06.150
除非你先把它停止

27:06.350 --> 27:07.250
你把它停止过后

27:07.250 --> 27:08.050
我再做处理

27:10.050 --> 27:11.050
然后这里

27:12.050 --> 27:13.150
这里边写啥呢

27:13.250 --> 27:15.450
首先是你不能无休止的运行下去

27:15.550 --> 27:16.450
你得有一个

27:16.850 --> 27:18.250
就是你得有一个结束

27:18.250 --> 27:18.450
对吧

27:18.450 --> 27:19.550
有一个结束

27:19.950 --> 27:20.750
所以说这里呢

27:20.750 --> 27:22.950
我们这里判断怎么来判断结束了

27:23.050 --> 27:25.050
每一次运动是不是这个

27:25.150 --> 27:25.650
一个属性

27:25.650 --> 27:26.450
我们之前写的属性

27:26.450 --> 27:26.750
对吧

27:26.750 --> 27:28.050
把之前的属性写好

27:28.050 --> 27:29.050
是不是很简单了

27:29.750 --> 27:31.550
每次运动的时候属性加1

27:31.550 --> 27:32.050
对不对

27:32.150 --> 27:34.250
表示的是当前运动的次数

27:34.250 --> 27:35.850
当前运动的次数加1

27:36.150 --> 27:37.450
然后判断一下

27:37.650 --> 27:39.150
如果当前运动的次数

27:39.150 --> 27:40.150
等于了什么呢

27:40.150 --> 27:41.650
等于ZS的Number

27:41.750 --> 27:42.850
就是总次数

27:44.450 --> 27:45.150
要做什么

27:45.350 --> 27:47.450
当前运动次数加1

27:48.250 --> 27:48.750
加1

27:49.350 --> 27:49.750
好

27:49.850 --> 27:51.250
然后如果是

27:52.950 --> 27:53.850
等于了

27:54.350 --> 27:55.150
总次数

27:55.450 --> 27:56.450
那是不是不再运动了

27:56.650 --> 27:57.150
对不对

27:57.450 --> 27:58.550
它就不再运动了

27:58.650 --> 28:00.550
如果等于了总次数就不再运动了

28:00.550 --> 28:01.450
不再运动怎么办

28:01.550 --> 28:02.450
是不是ZS

28:02.650 --> 28:03.350
点Stop

28:06.230 --> 28:06.630
可以吗

28:06.630 --> 28:07.430
真的可以吗

28:08.130 --> 28:08.930
咱们试一下

28:09.330 --> 28:09.830
试一下

28:10.630 --> 28:11.430
这两个输出

28:11.630 --> 28:12.230
输出

28:13.230 --> 28:14.430
输出ZSNumber

28:15.230 --> 28:15.930
Number

28:17.740 --> 28:18.440
看一下

28:18.640 --> 28:20.840
看一下我们开始运动能不能得到正确的输出

28:20.940 --> 28:21.440
Start

28:25.140 --> 28:26.840
它输出的权是NAN

28:27.240 --> 28:29.540
而且好像没有什么停止的迹象

28:29.540 --> 28:30.140
你看到没

28:30.140 --> 28:31.440
我们总次数要运行多少

28:31.440 --> 28:32.740
总次数是运行

28:33.440 --> 28:34.840
总次数是运行100次

28:34.840 --> 28:36.140
你看它有停止的迹象

28:36.440 --> 28:36.940
没有

28:37.240 --> 28:38.740
而且它还输出了两个undefine

28:39.040 --> 28:40.040
怎么回事呢

28:40.540 --> 28:41.540
它是怎么回事呢

28:42.040 --> 28:44.140
它是因为这里的ZS出了问题

28:44.940 --> 28:45.640
这里的ZS

28:45.640 --> 28:46.540
看一下这个ZS

28:48.650 --> 28:49.850
你看ZS指向了谁

28:50.250 --> 28:51.550
指向的是温度对象

28:51.850 --> 28:53.150
所以说这个ZS出现了问题

28:53.150 --> 28:53.750
为什么

28:53.750 --> 28:55.650
因为这个ZS你一定要注意

28:56.050 --> 28:58.650
ZS你一定要看它写到哪个函数里边的

28:59.050 --> 29:00.850
它是写到G17这个函数里边的

29:01.150 --> 29:03.050
这个函数是不是我们调用的

29:03.050 --> 29:03.450
对吧

29:03.450 --> 29:05.150
它取决于函数怎么去调用

29:05.150 --> 29:06.650
它不是我们调用的这个函数

29:07.050 --> 29:09.550
是这个我们之前讲过那个什么事件循环

29:09.850 --> 29:10.350
是

29:10.750 --> 29:12.850
介是引擎在调用这个函数

29:13.350 --> 29:15.050
那么这个函数在调用的时候呢

29:15.050 --> 29:16.350
它是直接调用的

29:16.350 --> 29:17.750
所以说ZS指向温度

29:18.050 --> 29:18.850
那怎么办呢

29:19.050 --> 29:20.550
那我这里怎么去得到这些东西呢

29:20.750 --> 29:22.150
它全在当前对象里边

29:22.350 --> 29:23.050
怎么得到了

29:23.750 --> 29:24.750
告诉大家一个技巧

29:25.450 --> 29:26.150
说小说听啊

29:26.150 --> 29:27.450
这个很重要很重要

29:27.850 --> 29:28.750
什么技巧呢

29:29.350 --> 29:31.750
就是我这里的ZS指向出了问题

29:32.250 --> 29:34.050
那么我就在不出问题的地方

29:34.050 --> 29:35.050
就是它的外围

29:35.250 --> 29:37.650
外层给它定一个变量Z

29:38.050 --> 29:38.850
随便什么名字吧

29:38.850 --> 29:39.850
我们通常就Z

29:41.350 --> 29:43.750
把之前就这里的ZS是不会出问题

29:43.750 --> 29:43.950
对吧

29:43.950 --> 29:45.050
这里的ZS是正常的

29:45.450 --> 29:46.950
因为这个start函数呢

29:46.950 --> 29:48.850
是通过animate来调用的

29:49.050 --> 29:50.550
所以说ZS不会出问题

29:50.650 --> 29:53.050
我们先把ZS保存到一个变量里边

29:53.850 --> 29:55.850
由于必包的现象存在

29:55.850 --> 29:57.850
所以我们这里边是不是可以用这个变量

29:57.950 --> 29:58.450
对不对

29:58.650 --> 30:00.550
ZS它的特殊一点就是在于

30:00.550 --> 30:01.750
它是一个关键词

30:01.850 --> 30:02.750
这个函数里边用

30:02.850 --> 30:03.450
可以用

30:03.550 --> 30:05.250
外面的函数里边也可以用

30:05.350 --> 30:06.350
但这个函数里边用的时候

30:06.350 --> 30:07.250
它就指向温度了

30:07.550 --> 30:08.650
所以说我们可以用一个变量

30:08.650 --> 30:09.950
来保存一下这个ZS

30:09.950 --> 30:10.750
外面的ZS

30:10.750 --> 30:11.350
那么这边呢

30:11.350 --> 30:12.250
我们就用Z

30:12.550 --> 30:13.050
Z

30:14.150 --> 30:14.950
Consologue

30:15.150 --> 30:15.850
Z

30:16.450 --> 30:17.050
Columbar

30:17.850 --> 30:19.750
那么下面的ZS都替换成Z

30:21.450 --> 30:22.250
这样子替换

30:23.550 --> 30:24.550
保存看一下

30:25.650 --> 30:25.850
好

30:25.850 --> 30:26.850
现在我们再来运行

30:27.550 --> 30:28.150
你看一下

30:28.450 --> 30:29.250
这边没问题了

30:29.450 --> 30:29.750
对吧

30:29.750 --> 30:30.350
没问题了

30:30.650 --> 30:31.450
运行了100次

30:31.450 --> 30:31.850
对不对

30:31.850 --> 30:32.850
运行了100次

30:34.050 --> 30:35.250
这个地方undefine是

30:35.250 --> 30:36.550
整个表拉式的undefine

30:36.550 --> 30:37.850
整个表拉式返回undefine

30:38.950 --> 30:39.650
没问题了吧

30:39.750 --> 30:41.750
是不是刚好运行了100次

30:41.750 --> 30:42.050
对不对

30:42.050 --> 30:43.250
我们刚才算出来是100次

30:43.250 --> 30:43.850
对不对

30:44.050 --> 30:45.250
刚才我们算出来这里

30:46.050 --> 30:46.850
这个什么

30:47.450 --> 30:48.950
这个Lumbar是100次

30:49.150 --> 30:49.450
ok

30:49.450 --> 30:50.750
那它就运动100次

30:51.850 --> 30:52.050
好

30:52.050 --> 30:53.050
那么接下来再看

30:53.050 --> 30:53.650
再看

30:53.950 --> 30:55.250
每一次运动

30:55.250 --> 30:56.350
是不是要改变啥

30:56.750 --> 30:58.350
每次运动的目的是改变啥

30:58.450 --> 30:59.250
改变

31:00.250 --> 31:02.650
ZS.CurData

31:03.250 --> 31:04.150
改变这个东西

31:04.650 --> 31:04.850
对吧

31:04.850 --> 31:05.650
我们之前的状态

31:05.650 --> 31:06.150
对不对

31:06.450 --> 31:07.350
改变这个东西

31:07.650 --> 31:08.650
每次改变多少了

31:08.650 --> 31:09.850
是不是记住了这个里边的

31:09.950 --> 31:10.350
对不对

31:10.350 --> 31:11.350
记住到这里边的

31:11.650 --> 31:11.850
好

31:11.850 --> 31:12.850
我们再改变它就行了

31:13.350 --> 31:14.250
怎么来改变它呢

31:14.250 --> 31:15.150
是不是循环

31:15.350 --> 31:16.450
每一个属性都要改变

31:16.450 --> 31:16.850
对吧

31:16.850 --> 31:18.450
它每一个属性都要发生变化

31:18.650 --> 31:19.750
都要发生变化

31:19.850 --> 31:20.550
循环呗

31:21.050 --> 31:22.250
循环它的所有属性

31:22.350 --> 31:24.050
in ZS.CurData

31:25.250 --> 31:25.450
好

31:25.450 --> 31:26.750
每个属性都要发生变化

31:26.850 --> 31:28.450
ZS.CurData

31:28.550 --> 31:29.250
哪个属性

31:29.250 --> 31:30.250
Prob这个属性

31:30.550 --> 31:31.550
变化多少

31:31.750 --> 31:34.250
加等于加上一段距离

31:34.250 --> 31:35.250
加上一段数字

31:35.650 --> 31:35.750
好

31:35.750 --> 31:36.350
加上一个数字

31:36.350 --> 31:37.250
什么数字呢

31:37.750 --> 31:38.450
什么数字呢

31:38.650 --> 31:40.150
是不是跟这里是对应的

31:40.150 --> 31:42.350
跟这个Avery Distance是对应的

31:42.350 --> 31:42.850
你看吧

31:43.150 --> 31:44.150
看这个对象结构啊

31:44.350 --> 31:45.850
CurData这个A怎么变化

31:45.950 --> 31:48.350
是不是每一次加上 Distance里边的A

31:48.350 --> 31:48.850
对不对

31:48.950 --> 31:49.550
不不不

31:49.850 --> 31:51.650
加上这个Avery Distance里边的A

31:51.650 --> 31:51.950
对不对

31:51.950 --> 31:52.550
加上这一段

31:52.550 --> 31:52.950
对不对

31:53.750 --> 31:55.050
这不就在变化吗

31:55.650 --> 31:56.250
还能怎么样呢

31:56.350 --> 31:57.150
这就在变化

31:57.650 --> 31:58.050
好

31:58.050 --> 31:58.950
就是把这个属性

31:58.950 --> 32:00.550
加上一段对应的属性

32:00.650 --> 32:01.850
所以说我们加啥呢

32:01.850 --> 32:02.350
这里

32:03.450 --> 32:05.950
这里我们加的是ZS的

32:05.950 --> 32:06.450
什么

32:06.850 --> 32:09.250
就是Avery Distance

32:09.450 --> 32:10.650
对应的属性

32:11.050 --> 32:11.950
加上这一段

32:12.750 --> 32:13.350
你看吧

32:13.550 --> 32:14.950
我们每一次输出

32:15.150 --> 32:16.350
比方说咱们这里

32:16.450 --> 32:17.850
每一次输出一下

32:18.550 --> 32:21.550
这个ZS的CurData

32:21.850 --> 32:22.450
输出一下

32:22.450 --> 32:22.950
保存

32:24.450 --> 32:24.650
好

32:24.650 --> 32:25.650
这里开始

32:26.150 --> 32:26.550
你看

32:26.650 --> 32:27.650
是不是逐渐变化了

32:28.050 --> 32:29.550
我们腰的就是这种效果

32:29.950 --> 32:30.750
腰的就是这种效果

32:30.750 --> 32:31.250
看了没有

32:31.350 --> 32:32.350
最终变化完成

32:32.550 --> 32:33.350
变化完成

32:34.650 --> 32:36.550
但是这里有一个小的细节

32:36.550 --> 32:37.750
大家稍微注意一下

32:37.750 --> 32:38.550
稍微注意一下

32:38.750 --> 32:39.950
就是我们这里

32:40.750 --> 32:43.050
它是在进行小数运算

32:43.050 --> 32:44.550
因为算出来每一段距离

32:44.550 --> 32:45.250
可能是个小

32:45.250 --> 32:46.250
它是个小数

32:46.550 --> 32:48.150
只是这里抽巧了

32:48.150 --> 32:48.750
它不是小数

32:48.750 --> 32:49.050
对吧

32:49.150 --> 32:49.650
它不是小数

32:49.650 --> 32:50.550
然后我们写一个小数

32:51.750 --> 32:54.250
这里变化到997

32:54.650 --> 32:56.250
写一个不太容易除的数字

32:56.850 --> 32:57.850
81

32:58.650 --> 33:00.050
这里是3

33:00.850 --> 33:02.050
1003

33:02.650 --> 33:03.450
保存看一下

33:05.680 --> 33:06.180
你看

33:06.980 --> 33:08.880
小数运算它会遇到一个问题

33:08.880 --> 33:09.580
它不精确

33:09.580 --> 33:10.180
你看到没

33:10.680 --> 33:11.580
它不精确

33:11.980 --> 33:12.580
问题吧

33:12.780 --> 33:15.280
小数运算它是不太精确的

33:15.380 --> 33:16.380
不太精确的

33:16.880 --> 33:17.080
好

33:17.080 --> 33:18.780
那么这样子一来了

33:18.780 --> 33:20.780
我们希望到最后的结果

33:20.780 --> 33:21.980
它一定是最终的值

33:22.180 --> 33:23.180
到最后的结果的时候

33:23.180 --> 33:24.180
它一定是最终的值

33:24.380 --> 33:26.780
就当它运动次数完成之后

33:27.480 --> 33:29.480
当它运动次数完成之后

33:29.880 --> 33:31.280
我们再进行一下处理

33:31.680 --> 33:32.280
或者说

33:33.480 --> 33:34.080
我们这里

33:34.080 --> 33:34.880
我们看一下

33:36.080 --> 33:38.080
运动次数完成之后

33:38.080 --> 33:39.980
我们再进行一下处理

33:40.180 --> 33:41.080
就这里来处理

33:42.280 --> 33:42.680
处理

33:43.680 --> 33:44.480
处理什么呢

33:44.680 --> 33:45.480
处理就是

33:46.080 --> 33:48.480
把它的值全部变成精确的值

33:49.280 --> 33:51.080
把它的值全部变成精确的值

33:51.280 --> 33:52.080
什么精确的值呢

33:52.180 --> 33:53.480
就是把Rats克delta

33:53.480 --> 33:55.380
把克delta变成啥

33:55.580 --> 33:56.280
变成

33:56.580 --> 33:58.380
把这个proper直接变成最终的值

33:58.980 --> 33:59.480
Rats

33:59.580 --> 34:00.080
不行

34:00.780 --> 34:01.480
配置里边

34:01.480 --> 34:01.980
nd

34:01.980 --> 34:02.980
nd不是个对象吗

34:02.980 --> 34:03.380
对吧

34:03.480 --> 34:04.280
nd是个对象

34:04.280 --> 34:06.080
把它变成nd对应的值

34:06.680 --> 34:07.380
你要这意思吧

34:07.780 --> 34:09.580
如果已经是最后一次运动了

34:09.980 --> 34:11.380
如果已经是最后一次运动了

34:11.380 --> 34:12.780
把它变成最终的值

34:12.980 --> 34:14.380
或者说我们在这里写也行

34:14.580 --> 34:15.580
在这里写也行

34:16.380 --> 34:17.480
加加放前边

34:17.580 --> 34:18.380
每一次运动

34:18.380 --> 34:19.380
先加一次

34:19.380 --> 34:20.480
表示这是一次运动

34:21.080 --> 34:22.080
比方说一开始是0

34:22.080 --> 34:22.480
对吧

34:22.980 --> 34:24.380
加一次就表示1

34:24.580 --> 34:25.480
表示1

34:25.480 --> 34:26.280
第一次运动

34:26.280 --> 34:27.080
第一次运动

34:27.280 --> 34:28.080
那么这里

34:28.080 --> 34:29.480
我们在这里就直接判断

34:29.480 --> 34:30.780
在这里就直接判断

34:31.880 --> 34:34.580
如果Rats的克delta

34:35.080 --> 34:37.080
等于Rats的辣椒

34:37.380 --> 34:39.080
就是已经是最后一次运动了

34:39.480 --> 34:41.080
这里已经是最后一次运动了

34:43.250 --> 34:44.650
最后一次运动

34:44.750 --> 34:45.650
在这里写也行

34:45.650 --> 34:46.350
就随便

34:47.150 --> 34:48.850
这里如果是最后一次运动的话

34:48.850 --> 34:49.850
那么我们这里

34:50.450 --> 34:51.450
单独处理一下

34:51.950 --> 34:54.250
l是不是最后一次运动的情况下

34:54.250 --> 34:56.450
我们再直接这样子加

34:57.150 --> 34:58.050
就是最后一次

34:58.050 --> 34:59.350
因为误差肯定很小

34:59.350 --> 34:59.750
对吧

34:59.750 --> 35:01.050
误差肯定很小

35:01.050 --> 35:01.950
随从我们这里

35:02.450 --> 35:03.250
就在这里处理了

35:03.250 --> 35:04.250
复制的时候处理

35:04.850 --> 35:05.450
也行

35:05.450 --> 35:05.850
也行

35:05.850 --> 35:06.850
那么我们看一下

35:06.950 --> 35:07.950
这样子我们打印出来

35:08.050 --> 35:09.150
更加方便看到效果

35:09.950 --> 35:10.650
看最后

35:12.150 --> 35:13.350
不管中间是怎么回事

35:13.350 --> 35:14.050
最后一看

35:14.450 --> 35:15.750
是不是一定到最多的值了

35:15.950 --> 35:16.450
对不对

35:17.150 --> 35:18.550
因为它的误差本来就很小

35:18.550 --> 35:19.450
本来就很小

35:19.450 --> 35:20.850
它这里每次运动多少

35:20.850 --> 35:22.850
也是运动好像是10左右

35:22.850 --> 35:23.450
10左右

35:23.450 --> 35:24.150
你看这里

35:24.150 --> 35:24.850
差不多10左右

35:24.850 --> 35:25.350
对不对

35:26.150 --> 35:27.250
真的避免了

35:27.250 --> 35:28.850
最后的值得不精确

35:29.650 --> 35:30.450
就完了

35:30.750 --> 35:32.250
我们核心功能就全部写完了

35:32.650 --> 35:32.850
好

35:32.850 --> 35:33.850
咱们来试一下

35:33.850 --> 35:34.650
暂停

35:34.850 --> 35:35.950
暂停和启动

35:35.950 --> 35:37.150
再试一下暂停和启动

35:37.150 --> 35:38.350
我们这样子配置一下

35:38.550 --> 35:40.250
总时间比方说10秒

35:40.650 --> 35:41.350
10秒钟

35:41.750 --> 35:43.050
运动间隔30毫秒

35:43.050 --> 35:43.850
30

35:43.950 --> 35:45.050
运动间隔30毫秒

35:45.050 --> 35:45.450
行吧

35:47.150 --> 35:49.150
我们这里来输出一下

35:50.050 --> 35:51.150
来输出一下一个start

35:54.050 --> 35:54.650
开始了

35:54.750 --> 35:55.750
animate stop

35:56.450 --> 35:56.950
停止

35:57.950 --> 35:58.550
好 停止

35:58.550 --> 35:59.550
你看一下停止过后

35:59.550 --> 36:01.010
我们来看一下animate里边的

36:01.150 --> 36:01.750
clue data

36:01.950 --> 36:02.750
你看运动到这了

36:02.750 --> 36:03.150
看没

36:03.250 --> 36:03.850
它没动了

36:03.950 --> 36:04.750
看没 没动了

36:05.350 --> 36:06.450
为了让你们看得清楚

36:06.450 --> 36:06.950
还是

36:07.250 --> 36:08.250
还是把它

36:08.450 --> 36:09.550
还是打印个东西吗

36:09.550 --> 36:10.650
还是打印个东西

36:11.250 --> 36:11.750
这里呢

36:12.550 --> 36:13.650
console log

36:14.550 --> 36:15.050
log

36:15.250 --> 36:15.750
z

36:15.750 --> 36:16.550
clue number

36:17.150 --> 36:17.850
clue data

36:18.350 --> 36:19.050
clue data

36:19.550 --> 36:20.450
还是打印个东西

36:21.050 --> 36:21.550
这里

36:21.550 --> 36:22.150
这里打印

36:22.150 --> 36:22.950
在这里打印

36:23.350 --> 36:23.950
保存

36:23.950 --> 36:24.550
看一下

36:25.650 --> 36:26.550
start

36:26.550 --> 36:27.550
哎呀

36:27.550 --> 36:28.050
快快快

36:28.050 --> 36:28.550
stop

36:28.850 --> 36:29.750
你看是不是停了

36:29.750 --> 36:30.350
对吧

36:30.350 --> 36:30.950
停止了

36:30.950 --> 36:31.550
没动了

36:31.550 --> 36:32.750
没有运行计时器了

36:32.750 --> 36:32.950
好

36:32.950 --> 36:33.750
再开始start

36:33.750 --> 36:34.750
它又接着运行的

36:34.750 --> 36:36.550
因为我们都是保留到属性里面了

36:36.850 --> 36:38.050
保留到属性的好处

36:38.050 --> 36:40.050
有的人说可能一开始我没讲

36:40.050 --> 36:41.050
有的人可能想问

36:41.050 --> 36:42.150
它为什么不在这里

36:42.150 --> 36:44.150
为什么不在这里去计算这些东西

36:44.750 --> 36:46.750
因为你在这里计算这些东西的时候

36:46.950 --> 36:48.250
那么还没法保留现场

36:48.250 --> 36:49.550
下一次调用start的时候

36:49.550 --> 36:50.850
又从最开始计算了

36:50.850 --> 36:52.750
所以我们把它保留到属性里边

36:52.750 --> 36:53.550
每一次变化了

36:53.550 --> 36:54.950
在属性里边做记录

36:54.950 --> 36:55.650
所以说下一次呢

36:55.650 --> 36:57.050
就会接着来接着来

36:57.650 --> 36:57.850
好

36:57.850 --> 36:58.650
我们继续啊

36:59.150 --> 36:59.650
start

37:00.450 --> 37:01.550
你看是不是接着运动了

37:01.550 --> 37:01.850
好

37:01.850 --> 37:02.150
stop

37:02.150 --> 37:02.650
停止

37:02.950 --> 37:03.750
又start

37:04.750 --> 37:05.650
又停止

37:05.650 --> 37:06.650
你看啊

37:06.850 --> 37:07.550
调用start

37:08.150 --> 37:09.150
又接着运动了

37:09.550 --> 37:10.050
看到没有

37:10.050 --> 37:10.950
这数字的变化

37:10.950 --> 37:12.050
我们就可以看得到了

37:12.050 --> 37:13.450
最终运动运动结束

37:14.450 --> 37:14.950
好

37:14.950 --> 37:16.950
核心功能是不是就差不多写完了

37:16.950 --> 37:17.250
对吧

37:17.250 --> 37:18.250
就差不多写完了

37:18.250 --> 37:19.250
那么接下来了

37:19.250 --> 37:20.750
现在要考虑一个问题就是

37:21.750 --> 37:25.150
我这里怎么跟页面上挂钩呢

37:26.250 --> 37:27.650
怎么跟页面上挂钩呢

37:27.650 --> 37:29.650
比方说页面上有个div

37:29.750 --> 37:31.250
给他起个那样式

37:31.350 --> 37:32.450
我要让他运动

37:32.450 --> 37:32.850
对吧

37:32.850 --> 37:33.750
让他运动

37:34.050 --> 37:34.650
好

37:35.050 --> 37:35.850
比方说吧

37:37.050 --> 37:38.850
我们要让他运动啊

37:39.050 --> 37:40.850
就是给他个style

37:40.850 --> 37:41.750
给他个style

37:42.350 --> 37:42.850
没有

37:42.850 --> 37:44.650
给他一个样式啊

37:44.850 --> 37:46.550
宽高100个像素

37:46.550 --> 37:47.850
高度100个像素

37:48.150 --> 37:48.450
好

37:48.450 --> 37:49.350
然后呢

37:49.950 --> 37:50.850
还要干嘛呢

37:51.350 --> 37:52.350
还要做

37:52.350 --> 37:53.350
就是有一个

37:54.150 --> 37:54.550
啊

37:55.550 --> 37:56.150
play scene

37:56.550 --> 37:57.350
absolute

37:57.650 --> 37:58.650
然后neft呢

37:59.150 --> 38:00.250
100啊

38:01.050 --> 38:02.150
top 只能100

38:02.150 --> 38:02.850
我怎么

38:03.250 --> 38:03.850
比方说啊

38:03.850 --> 38:05.450
要让这个div来进行运动

38:05.450 --> 38:07.150
我怎么让让他来运动呢

38:07.850 --> 38:09.650
要跟页面挂钩对不对

38:09.750 --> 38:10.050
好

38:10.050 --> 38:11.050
那么这个时候呢

38:11.050 --> 38:12.750
看着很巧妙的方式来了

38:13.050 --> 38:13.750
这要多写

38:13.750 --> 38:14.750
要开始写配置了

38:15.750 --> 38:16.450
什么配置呢

38:16.850 --> 38:18.250
我写一些函数

38:18.250 --> 38:19.850
就是写毁掉函数

38:19.850 --> 38:21.150
就相当于是写事件

38:21.450 --> 38:22.650
相当于是写事件

38:23.150 --> 38:24.050
什么事件呢

38:24.550 --> 38:26.850
当开始的时候的事件啊

38:26.850 --> 38:29.250
当我们运动开始的时候的事件啊

38:29.250 --> 38:30.350
当这些事件你要用

38:30.350 --> 38:31.650
挨用就用不用就算了

38:31.650 --> 38:32.850
不用拿到啊

38:33.050 --> 38:33.350
是吧

38:33.350 --> 38:34.450
叫on start

38:35.350 --> 38:36.550
开始的时候事件

38:38.050 --> 38:38.950
运动开始的时候

38:38.950 --> 38:40.050
我就会触发这个事件

38:40.050 --> 38:41.350
我就会触发这个事件

38:41.750 --> 38:43.050
我就会运行这个事件

38:43.050 --> 38:44.050
你给我给我一个什么

38:44.050 --> 38:44.750
给我一个函数

38:44.750 --> 38:45.650
事件肯定是函数嘛

38:45.650 --> 38:46.150
对吧

38:46.350 --> 38:47.250
就是事件本质啥

38:47.350 --> 38:48.750
本质就是一个毁掉函数

38:48.750 --> 38:50.550
我在适当的时机给你运行

38:51.550 --> 38:52.250
那么给我配

38:52.250 --> 38:53.350
加一个这个东西进来

38:53.550 --> 38:54.150
于是呢

38:54.150 --> 38:55.250
我在这个处理的时候

38:55.250 --> 38:56.150
我就这么处理

38:56.550 --> 38:58.650
当你调用开始的时候啊

38:58.650 --> 39:00.650
当你调用开始的时候

39:01.450 --> 39:02.550
那么怎么样呢

39:02.850 --> 39:04.250
我这里判断一下啊

39:04.250 --> 39:05.050
判断一下

39:05.850 --> 39:07.250
当你调用开始的时候

39:07.750 --> 39:09.850
如果你在配置里边

39:09.850 --> 39:11.150
有这个on start

39:11.150 --> 39:12.250
如果有啊

39:12.250 --> 39:12.950
如果有

39:12.950 --> 39:14.250
我就调用一次

39:14.250 --> 39:14.450
对吧

39:14.450 --> 39:15.850
你给我传传那个函数进来嘛

39:15.850 --> 39:16.250
对吧

39:16.250 --> 39:17.450
我在这个时候调用

39:18.050 --> 39:19.350
调用一次这个开始

39:19.650 --> 39:21.250
那么你是不是就可以监听到

39:21.250 --> 39:21.850
这个

39:21.850 --> 39:23.050
这个就是

39:23.250 --> 39:24.350
动画是什么开始的

39:24.350 --> 39:24.850
对吧

39:25.150 --> 39:26.050
你可以监听了

39:26.350 --> 39:27.650
你可以对它进行监听了

39:28.450 --> 39:28.650
好

39:28.650 --> 39:28.950
保存

39:28.950 --> 39:29.750
我们看一下吧

39:30.050 --> 39:30.150
好

39:30.150 --> 39:31.350
我们把小这边啊

39:31.350 --> 39:32.250
把小这边

39:33.550 --> 39:33.750
好

39:33.750 --> 39:34.550
这边就不要了啊

39:34.550 --> 39:35.250
这边不要了

39:35.950 --> 39:36.050
好

39:36.050 --> 39:36.650
这边啊

39:36.650 --> 39:37.350
小这边来

39:40.720 --> 39:40.920
好

39:40.920 --> 39:41.420
这里

39:41.520 --> 39:42.320
我们这样子写

39:42.420 --> 39:42.720
好

39:42.720 --> 39:43.620
on start

39:44.120 --> 39:45.520
当开始的时候啊

39:45.520 --> 39:46.220
当开始的时候

39:46.220 --> 39:47.620
我们是不是可以监听到了啊

39:47.620 --> 39:48.720
尽管这个事件呢

39:48.720 --> 39:49.720
我们可能用不到

39:49.720 --> 39:50.220
但是呢

39:50.220 --> 39:51.020
是不是可以用了

39:51.020 --> 39:51.520
对不对

39:51.520 --> 39:52.220
可以用了

39:52.320 --> 39:52.620
保存

39:52.620 --> 39:53.320
我们看一下啊

39:56.900 --> 39:57.100
好

39:57.100 --> 39:57.600
那么这里呢

39:57.600 --> 39:59.100
我们就可以使用animate

39:59.100 --> 40:00.000
什么start

40:00.500 --> 40:01.100
start

40:01.200 --> 40:01.800
你看一下

40:02.000 --> 40:03.000
就运行到开始

40:03.100 --> 40:03.400
对吧

40:03.400 --> 40:04.400
就运行到开始了

40:05.100 --> 40:05.800
你看这个是吧

40:06.400 --> 40:08.100
我们就可以用这种方式来助理

40:08.100 --> 40:08.800
处理啊

40:08.800 --> 40:10.400
给它传一个毁掉函数

40:10.400 --> 40:11.700
就是我要做什么处理

40:11.700 --> 40:12.700
那我在这里处理

40:13.100 --> 40:14.700
当然不仅仅是有开始

40:15.300 --> 40:16.000
还有什么呢

40:16.400 --> 40:17.400
还有一些属性

40:17.400 --> 40:18.400
不要说on move

40:19.900 --> 40:21.300
当变化的时候

40:21.500 --> 40:22.500
变化事件啊

40:22.500 --> 40:23.400
这个事件是

40:23.700 --> 40:26.500
当每次发生变化时

40:26.800 --> 40:27.500
变化时

40:28.400 --> 40:29.900
它会运行这个时间

40:30.300 --> 40:30.400
好

40:30.400 --> 40:31.600
那么这边也是一样

40:31.900 --> 40:32.100
好

40:32.100 --> 40:33.000
每次发生变化

40:33.000 --> 40:34.300
我们这边非常清楚

40:34.300 --> 40:34.700
对吧

40:34.800 --> 40:35.500
什么时候发生变化

40:35.500 --> 40:36.200
是不是在这里

40:36.200 --> 40:36.600
对吧

40:36.700 --> 40:37.400
这个循环完了

40:37.400 --> 40:38.200
是不是变化了

40:38.400 --> 40:39.000
对不对

40:39.000 --> 40:39.800
这个循环完了

40:39.800 --> 40:40.700
是不是就变化了

40:40.800 --> 40:41.000
好

40:41.000 --> 40:42.100
我们这里判断一下

40:42.500 --> 40:42.800
好

40:42.800 --> 40:44.100
如果Rach里边

40:44.100 --> 40:44.900
Option里边

40:44.900 --> 40:46.000
你传了这个东西

40:46.000 --> 40:46.500
on move

40:47.500 --> 40:48.400
你传了这个东西

40:48.400 --> 40:49.700
说明你传了一个函数进来

40:50.100 --> 40:50.300
好

40:50.300 --> 40:51.300
传了一个函数进来的话

40:51.300 --> 40:53.000
我在这里去调用这个函数

40:53.100 --> 40:53.800
on move

40:54.100 --> 40:54.800
调用它

40:55.500 --> 40:56.500
调用这个函数

40:57.000 --> 40:57.400
保存

40:57.400 --> 40:58.200
我们看一下啊

40:59.100 --> 40:59.500
保存

40:59.500 --> 41:00.100
我们这里

41:00.900 --> 41:02.600
输出变化

41:04.300 --> 41:04.600
好

41:04.600 --> 41:05.200
于是这边呢

41:05.200 --> 41:06.000
我们看一下啊

41:06.000 --> 41:07.400
animate start

41:09.310 --> 41:10.010
你看

41:10.010 --> 41:11.110
不断的变化

41:11.110 --> 41:11.410
对吧

41:11.410 --> 41:12.410
不断的变化

41:13.110 --> 41:13.810
没问题吧

41:16.210 --> 41:16.610
你看

41:16.810 --> 41:17.510
还在继续变化

41:17.510 --> 41:18.010
因为看

41:18.010 --> 41:19.110
我这个时间比较长啊

41:19.110 --> 41:20.710
比方说我们这里写个

41:20.810 --> 41:21.710
一秒钟啊

41:22.010 --> 41:22.610
或者是

41:23.010 --> 41:24.310
或者是5秒钟啊

41:24.310 --> 41:25.510
5秒钟重新来啊

41:25.610 --> 41:26.610
5秒钟开始吧

41:26.610 --> 41:27.210
动画开始

41:27.210 --> 41:27.610
来

41:27.810 --> 41:28.610
你看每一次变化

41:28.610 --> 41:30.310
我们是不是可以监听到时间了

41:30.410 --> 41:30.910
对不对

41:31.210 --> 41:32.510
就可以监听到时间了

41:32.510 --> 41:33.410
5秒钟结束了

41:33.810 --> 41:34.710
你看变化结束

41:35.110 --> 41:35.810
每一次变化

41:35.810 --> 41:37.010
我们就可以监听到这个东西了

41:37.110 --> 41:38.410
但是每一次变化的时候

41:38.410 --> 41:39.610
我需要得到一些数据

41:39.610 --> 41:40.410
什么数据呢

41:40.410 --> 41:42.310
你当前变化的指示多少

41:42.310 --> 41:43.510
当前的数据是多少

41:43.810 --> 41:44.510
那怎么得到了

41:44.510 --> 41:46.410
我希望他给我传参数传进来

41:47.210 --> 41:48.510
把你当前的数据呢

41:48.510 --> 41:50.210
作为参数传进来

41:50.310 --> 41:51.110
传进来

41:51.910 --> 41:52.310
好

41:52.410 --> 41:53.510
当然呢也可以

41:53.510 --> 41:55.410
我们这里是这里说两种方式啊

41:55.410 --> 41:56.610
这里说两种方法

41:56.710 --> 41:57.310
第一种方法呢

41:57.310 --> 41:59.210
是你把它作为参数给我传进来

41:59.310 --> 42:00.210
给我传进来

42:00.410 --> 42:01.310
好传的时候呢

42:01.310 --> 42:02.010
我们这样子

42:02.710 --> 42:03.410
好这样子

42:03.810 --> 42:04.710
我们这里呢

42:05.310 --> 42:06.210
作为参数传进来

42:06.210 --> 42:07.610
那么这里是不是要传参数

42:07.610 --> 42:08.010
对吧

42:08.010 --> 42:09.310
传参数传什么参数

42:09.310 --> 42:10.610
是不是就是rat

42:10.610 --> 42:11.410
克尔德塔

42:11.510 --> 42:12.810
把克尔德塔传给你对吧

42:12.810 --> 42:14.010
作为参数传给你

42:14.210 --> 42:15.310
这是第一种方式啊

42:15.310 --> 42:16.710
那这边就是可以接收

42:16.910 --> 42:18.010
当前变化的数据

42:18.010 --> 42:18.910
是不是可以拿到了

42:19.010 --> 42:19.410
对吧

42:19.610 --> 42:21.910
我们就可以可以在这边去拿到这个数据了

42:22.210 --> 42:22.810
保存

42:23.110 --> 42:23.810
来看一下吧

42:25.690 --> 42:27.490
好你看是不是可以拿到数据了

42:27.490 --> 42:27.990
对不对

42:28.090 --> 42:29.390
好这是一种方式

42:30.090 --> 42:31.290
另外一种方式呢

42:31.290 --> 42:33.290
我是希望这边可以用这种方式来拿

42:33.590 --> 42:34.390
可以用这种

42:35.090 --> 42:36.490
Zs克尔德塔

42:36.890 --> 42:37.990
我们两种方式都说一下啊

42:37.990 --> 42:38.690
都说一下

42:39.390 --> 42:41.090
好第二种方式是使用这种

42:41.190 --> 42:43.790
就是我希望了你帮我绑定一下Zs

42:43.890 --> 42:44.890
这个Zs啊

42:45.490 --> 42:46.790
啊这个绑定一下Zs啊

42:46.790 --> 42:47.790
这个Zs呢

42:47.790 --> 42:49.190
就表示的是什么呢

42:49.290 --> 42:52.390
表示的是当前这个animate对象啊

42:52.790 --> 42:54.290
表示的是当前animate对象

42:54.290 --> 42:55.490
那么这个也很简单

42:55.590 --> 42:56.490
我们这样来调用

42:56.590 --> 42:58.390
啊目这个扣用扣来调用

42:58.690 --> 42:59.790
对吧用扣来调用

42:59.990 --> 43:01.190
把Zs加传进去

43:01.290 --> 43:03.190
Zs是啥Zs就是啥子对吧

43:04.190 --> 43:04.990
包括上面啊

43:04.990 --> 43:07.190
包括上面数也可以这样子啊扣

43:07.790 --> 43:09.190
这样子可以绑定Zs嘛

43:09.290 --> 43:09.790
对不对

43:09.790 --> 43:11.990
那么这样子这边或许学就很方便了

43:11.990 --> 43:14.390
我们直接可以通过Zs克尔德塔就可以获取

43:14.490 --> 43:15.890
并且他不仅可以获取他

43:15.890 --> 43:17.190
还可以获取很多什么配置

43:17.190 --> 43:18.690
新鲜的东西都可以获取了

43:19.090 --> 43:19.590
保存

43:20.090 --> 43:20.990
好我们来看一下啊

43:21.490 --> 43:22.590
你看是不是一样的效果

43:23.290 --> 43:23.690
对吧

43:24.690 --> 43:26.490
那接下来是不是就搞定了

43:26.490 --> 43:27.490
对吧就搞定了

43:27.490 --> 43:29.190
哎这个哦这个没有背景颜色啊

43:29.190 --> 43:30.190
是个背景颜色嘛

43:30.190 --> 43:31.690
红色啊红色

43:31.890 --> 43:32.690
你看着啊

43:33.490 --> 43:35.790
这个DIV我们就这样子可以这样子玩

43:36.390 --> 43:38.590
他的begin初始值是啥呢

43:38.790 --> 43:40.590
初始值是neft 100

43:41.890 --> 43:43.490
top 100

43:44.190 --> 43:45.290
对吧只有这两个

43:45.690 --> 43:48.890
好5秒钟之间5秒钟之内进行变化

43:48.990 --> 43:49.890
变化到哪呢

43:49.890 --> 43:51.290
under under的值

43:51.590 --> 43:53.690
under的值呢我让他变化到这

43:53.790 --> 43:56.090
你看我们以后学习动画是不是非常方便了

43:56.290 --> 43:56.890
变化到

43:58.490 --> 43:59.690
700个像素啊

43:59.890 --> 44:01.390
5秒钟之内变化到这个

44:01.490 --> 44:02.490
横坐标1000

44:02.590 --> 44:03.490
重坐标700

44:04.090 --> 44:06.590
好这个开始的时候没啥事情可做

44:06.590 --> 44:07.990
对吧开始的时候没啥事情可做

44:07.990 --> 44:08.990
我就说说开始呗

44:09.190 --> 44:11.190
好当每次当然我没啥事情可做

44:11.190 --> 44:12.190
就可以补写对吧

44:12.190 --> 44:14.490
我只是让你们看到他可以触发这个世界

44:14.690 --> 44:16.490
当每次发生变化的时候

44:16.890 --> 44:18.590
每次发生变化的时候我干嘛呢

44:18.590 --> 44:20.390
我是不是可以拿到这个东西对吧

44:20.590 --> 44:21.390
拿到这个东西

44:21.590 --> 44:23.190
我重新去设置啥

44:23.190 --> 44:24.090
这个DIV

44:24.390 --> 44:25.390
重新去设置个DIV

44:25.390 --> 44:26.490
我们先拿到这个DIV

44:26.690 --> 44:27.990
DIV documents

44:28.190 --> 44:28.790
query

44:29.390 --> 44:30.190
query selector

44:31.190 --> 44:31.890
这个DIV

44:32.390 --> 44:33.290
拿到这个DIV

44:33.490 --> 44:35.890
好然后每次发生变化的时候我们干嘛呢

44:36.090 --> 44:37.090
DIV

44:37.090 --> 44:37.690
什么

44:38.590 --> 44:39.290
style

44:39.590 --> 44:40.290
neft

44:40.490 --> 44:41.490
把它重新复制

44:41.490 --> 44:42.390
复制为啥

44:42.590 --> 44:45.290
z-curl-data-neft

44:45.290 --> 44:45.590
对吧

44:45.590 --> 44:46.990
它一定是堆硬的书箱

44:47.190 --> 44:47.990
你这里写到neft

44:47.990 --> 44:48.990
它这里一定是neft

44:49.790 --> 44:50.990
加上拼接上px

44:51.190 --> 44:53.990
然后DIV style-top-z

44:54.290 --> 44:58.090
z-curl-data-top-z

44:58.090 --> 44:59.290
拼接上px

45:00.390 --> 45:01.390
保存看一下吧

45:02.490 --> 45:03.790
我们这里没启动对吧

45:03.790 --> 45:04.290
没启动

45:04.290 --> 45:05.090
好这里启动嘛

45:05.790 --> 45:07.090
或者说写个按钮嘛

45:07.190 --> 45:08.190
点击按钮来启动

45:08.790 --> 45:09.690
下面几个P元数

45:09.790 --> 45:10.390
一个按钮

45:11.190 --> 45:11.690
开始

45:12.490 --> 45:12.990
开始

45:14.690 --> 45:15.190
开始

45:16.390 --> 45:17.290
好来吧

45:17.390 --> 45:18.390
给它一个ID

45:20.290 --> 45:21.390
btn-begin

45:21.490 --> 45:22.490
我这里负责了方便

45:22.490 --> 45:24.290
我直接直接用这种方式在起来

45:24.390 --> 45:25.290
反正是测试嘛

45:25.290 --> 45:26.390
测试这个动画插件

45:26.490 --> 45:27.090
on-click

45:27.490 --> 45:28.890
当我们点击的时候干嘛呢

45:29.490 --> 45:32.390
animate-start-开始

45:33.190 --> 45:33.890
动画开始

45:34.290 --> 45:35.190
保存看一下啊

45:35.490 --> 45:36.090
点开始

45:36.090 --> 45:36.990
你看是不是在运动了

45:37.090 --> 45:37.590
对吧

45:38.690 --> 45:39.390
是不是在运动了

45:40.390 --> 45:40.890
有问题吧

45:41.690 --> 45:42.090
啊

45:42.890 --> 45:44.090
这就完成了运动了

45:44.490 --> 45:44.890
对不对

45:45.290 --> 45:45.690
好

45:46.190 --> 45:46.590
然后呢

45:46.590 --> 45:47.690
我们再来再来个按钮啊

45:47.690 --> 45:48.890
希望中途能停止

45:49.290 --> 45:50.090
btn-stop

45:51.090 --> 45:53.090
以后开始停止就最简单了

45:53.890 --> 45:54.390
停止

45:54.890 --> 45:55.390
停止

45:55.690 --> 45:56.590
好比方说啊

45:56.990 --> 45:58.190
btn-stop

45:58.690 --> 45:59.090
stop

45:59.890 --> 46:00.390
on-click

46:00.690 --> 46:01.290
on-click

46:01.790 --> 46:03.690
好我们后边可能会用到这个插件的

46:03.690 --> 46:04.890
所以说下来一定要去写

46:04.890 --> 46:05.690
一定要去写

46:07.890 --> 46:08.290
stop

46:08.990 --> 46:09.590
好看着啊

46:09.890 --> 46:10.390
开始

46:10.790 --> 46:11.190
停止

46:11.590 --> 46:12.190
开始

46:12.290 --> 46:12.790
停止

46:12.990 --> 46:13.490
开始

46:13.590 --> 46:14.090
停止

46:14.190 --> 46:14.690
开始

46:14.790 --> 46:15.190
停止

46:15.190 --> 46:15.790
停止

46:15.790 --> 46:16.390
开始开始

46:16.390 --> 46:17.490
你点多时开始没用

46:17.490 --> 46:18.690
他只会有一个

46:18.990 --> 46:20.590
哦后边还会出现问题

46:21.090 --> 46:22.190
后边还会出现问题

46:22.190 --> 46:24.090
你后边右点开始的过后呢

46:24.590 --> 46:25.290
后边

46:25.490 --> 46:26.490
后边还会出现问题啊

46:26.490 --> 46:27.390
这个地方没处理

46:27.590 --> 46:29.490
就是后边他已经动画停止了

46:29.490 --> 46:30.890
就是已经达到总次数了

46:30.990 --> 46:32.490
已经达到了总次数

46:32.590 --> 46:33.790
那么这个时候呢

46:33.790 --> 46:34.690
你再一点

46:35.090 --> 46:36.190
再一点开始

46:36.490 --> 46:37.890
是不是他又他因为他发现了

46:37.890 --> 46:39.290
这个台门已经被清空了

46:39.290 --> 46:40.590
因为他又重新又来了

46:40.590 --> 46:41.290
又来了

46:41.490 --> 46:42.690
那么他就超过了这个值了

46:42.690 --> 46:42.990
对吧

46:42.990 --> 46:44.090
他超过了这个值了

46:44.290 --> 46:45.090
所以说这里呢

46:45.190 --> 46:47.690
这个判断的还得还得加上一个东西啊

46:47.890 --> 46:49.690
这他们有值

46:49.690 --> 46:51.090
如果已经有计时器了

46:51.490 --> 46:53.090
要结束就不要开始了

46:53.490 --> 46:54.690
或者什么情况下呢

46:54.690 --> 46:56.490
或者是这次的克尔男本

46:56.690 --> 46:58.190
已经已经等于了

46:58.290 --> 46:58.990
这次点

46:59.290 --> 47:00.390
男本了啊

47:00.390 --> 47:01.090
已经相等了

47:01.090 --> 47:02.190
就已经运动完了

47:02.190 --> 47:02.490
对吧

47:02.490 --> 47:03.790
已经运动结束了

47:03.890 --> 47:05.090
这两种情况下

47:05.090 --> 47:06.390
都不要再开始了

47:06.390 --> 47:07.890
都不要再不要再启动了

47:08.490 --> 47:09.090
好再看

47:09.390 --> 47:09.890
开始

47:10.190 --> 47:11.990
再多点多好吃都无所谓啊

47:12.090 --> 47:13.590
因为他不会再重新开始了

47:13.990 --> 47:14.690
啊结束了

47:14.690 --> 47:15.290
你看看

47:15.690 --> 47:16.590
啊结束了

47:16.690 --> 47:18.490
再点无销了啊再点无销了

47:19.690 --> 47:20.090
好

47:20.290 --> 47:21.890
那么我们动画查件就写完了

47:22.790 --> 47:22.990
好

47:22.990 --> 47:23.390
最后呢

47:23.390 --> 47:24.390
我们再加一个时间啊

47:24.390 --> 47:25.690
最后再再加一个时间

47:25.690 --> 47:27.490
就是结束的时候触发的时间

47:27.490 --> 47:29.390
我们当时有开始的时候触发的时间吗

47:29.590 --> 47:30.890
我们再再加一个啊

47:31.090 --> 47:32.490
结束的时候触发的时间

47:33.190 --> 47:33.690
啊你

47:33.690 --> 47:34.890
你可能要做一些事

47:34.890 --> 47:35.790
管理要做什么事呢

47:35.790 --> 47:36.790
跟我没什么关系啊

47:36.790 --> 47:37.490
你要做就去做

47:37.490 --> 47:38.290
不做就算了

47:38.590 --> 47:39.090
嗯

47:39.490 --> 47:40.090
不是结束啊

47:40.090 --> 47:40.990
不是暂停啊

47:41.090 --> 47:41.990
是啊

47:42.290 --> 47:43.890
over啊 over

47:44.590 --> 47:46.390
当结束的时候触发的时间

47:46.390 --> 47:48.590
其实开始的时间好像没啥意义

47:48.590 --> 47:48.990
对吧

47:49.090 --> 47:50.390
这个世界好像没啥意义

47:50.890 --> 47:51.390
啊扔着吧

47:51.390 --> 47:51.790
扔着吧

47:51.790 --> 47:52.190
无所谓

47:52.190 --> 47:53.090
他要用就用

47:53.290 --> 47:53.790
好

47:54.490 --> 47:56.490
当结束的时候触发的时间

47:56.590 --> 47:57.490
结束时间

48:01.100 --> 48:02.300
好结束的时候触发的时间

48:02.300 --> 48:03.700
我这就没啥事情可做

48:03.700 --> 48:04.200
对吧

48:04.200 --> 48:06.900
我们就直接啊直接输出

48:07.200 --> 48:08.400
当然你也可以结束的时候

48:08.400 --> 48:09.600
就可以启动一个新的动画

48:09.600 --> 48:10.400
也行啊

48:10.900 --> 48:11.500
console

48:11.700 --> 48:12.500
log

48:12.700 --> 48:13.300
结束

48:13.900 --> 48:14.500
啊结束

48:15.400 --> 48:16.500
啊这是结束时间

48:17.400 --> 48:17.700
好了

48:17.700 --> 48:18.500
那么这边来吧

48:18.800 --> 48:19.400
啊这边

48:19.800 --> 48:20.900
什么时候结束啊

48:20.900 --> 48:22.600
什么时候结束等于那种次数对吧

48:22.600 --> 48:23.200
就结束了

48:23.200 --> 48:24.300
这个时候结束啊

48:24.600 --> 48:25.500
不是这个时候啊

48:25.500 --> 48:27.200
这个时候可能是暂停啊

48:27.200 --> 48:28.400
可能是暂停

48:28.500 --> 48:29.400
这个时候是结束

48:29.600 --> 48:31.400
好结束的时候是不判断一下对吧

48:31.800 --> 48:32.300
rat

48:32.600 --> 48:33.600
啊不行

48:33.700 --> 48:35.800
如果你传了这个什么on over

48:35.800 --> 48:37.200
如果你传了这个时间的话

48:37.200 --> 48:38.900
那么我们这里雕容一下这个时间

48:40.300 --> 48:41.400
啊雕容一下这个时间

48:41.800 --> 48:42.200
耶

48:42.700 --> 48:43.100
耶

48:44.100 --> 48:45.100
这里哪些的问题啊

48:45.600 --> 48:46.300
无效之物

48:46.300 --> 48:47.400
这里写中文字符了

48:48.800 --> 48:49.200
啊

48:49.500 --> 48:50.900
雕用一下这个时间就完事了啊

48:50.900 --> 48:51.500
on over

48:52.300 --> 48:53.200
保存看一下吧

48:53.800 --> 48:54.400
开始

48:55.600 --> 48:56.600
啊等着啊

48:56.600 --> 48:57.600
我们看一下控制台

48:58.200 --> 48:58.700
稍等

48:59.300 --> 49:00.200
好停止了啊

49:00.200 --> 49:01.100
我们看一下控制台

49:01.100 --> 49:01.800
结束了

49:02.200 --> 49:02.600
对吧

49:03.000 --> 49:04.500
啊他会运行结束时间

49:05.700 --> 49:06.000
好了

49:06.000 --> 49:08.700
这里面以后就很很方便了啊

49:08.700 --> 49:09.800
非常非常方便的

49:09.800 --> 49:10.600
那比方说吧

49:10.600 --> 49:13.000
我们这里可以玩出很多很多花样出来啊

49:13.000 --> 49:14.200
很多很多花样出来

49:14.200 --> 49:16.700
比方说我们这里是红色对不对啊

49:16.700 --> 49:18.800
红色我们不断不但要运动啊

49:18.800 --> 49:20.600
不但要运动还要变颜色啊

49:20.600 --> 49:22.700
比方top为500啊

49:22.700 --> 49:25.100
不但要运动还要变颜色啊

49:25.100 --> 49:26.800
他目前是红色对吧啊

49:26.800 --> 49:28.500
目前是这样子吧

49:28.500 --> 49:29.700
我给他个边框啊

49:29.700 --> 49:30.800
给他个边框

49:30.800 --> 49:32.700
border两个项书稍立的

49:34.100 --> 49:35.700
啊给他个边框好

49:36.100 --> 49:38.500
这里呢背景颜色呢是00

49:38.700 --> 49:40.500
啊背景颜色是这样子

49:41.600 --> 49:42.900
00黑色的啊

49:42.900 --> 49:43.500
黑色的

49:43.900 --> 49:45.000
我要这样子变化啊

49:45.000 --> 49:46.000
我要这样子变化

49:46.600 --> 49:48.200
啊这里呢红绿蓝

49:48.200 --> 49:50.600
r0g0

49:50.800 --> 49:53.200
b0啊红红绿蓝吗

49:53.200 --> 49:53.800
红绿蓝

49:54.300 --> 49:54.800
好

49:54.800 --> 49:56.500
然后呢变化的结果呢

49:56.500 --> 49:57.600
颜色也可以变化啊

49:57.600 --> 49:58.600
颜色可以变化

49:58.600 --> 50:00.300
然后呢红了变成

50:01.000 --> 50:02.700
啊两百

50:03.300 --> 50:05.300
绿呢变成两百啊

50:05.600 --> 50:07.200
蓝呢变成两百对吧

50:07.200 --> 50:08.400
这些属性也要变化

50:08.400 --> 50:10.000
你看我们配置一下就完成了

50:10.200 --> 50:11.200
好每一只变化的时候

50:11.200 --> 50:12.500
是不是重新设置一下就完成了

50:12.500 --> 50:12.900
对不对

50:12.900 --> 50:13.900
重新设置一下

50:14.000 --> 50:14.800
style什么

50:15.400 --> 50:17.300
r就是呃

50:17.300 --> 50:18.200
by ground啊

50:18.200 --> 50:19.600
by ground重新设置一下

50:19.600 --> 50:20.400
设置为什么呢

50:20.600 --> 50:22.500
rgb啊rgb

50:22.600 --> 50:23.500
然后三个数字嘛

50:23.500 --> 50:23.900
对不对

50:23.900 --> 50:25.200
第一个数字啊

50:25.200 --> 50:25.900
z

50:26.100 --> 50:26.800
cdata

50:26.800 --> 50:27.900
然后r

50:28.000 --> 50:28.600
红

50:29.100 --> 50:29.500
绿

50:29.500 --> 50:30.000
蓝

50:30.000 --> 50:30.400
好

50:33.400 --> 50:34.400
这样子复制一下啊

50:35.700 --> 50:36.300
复制一下

50:36.700 --> 50:36.900
好

50:36.900 --> 50:37.800
这是绿

50:37.800 --> 50:38.500
这是蓝

50:38.600 --> 50:39.100
绿

50:39.400 --> 50:40.500
g啊

50:40.700 --> 50:41.200
蓝

50:41.400 --> 50:41.800
你看

50:42.300 --> 50:43.100
这样子也可以变化

50:43.100 --> 50:43.300
对吧

50:43.300 --> 50:44.400
我们只需要配置就行了

50:44.400 --> 50:45.600
它是因为这个插件

50:45.600 --> 50:47.000
它搞定的是数字变化

50:47.000 --> 50:48.500
它管理这个数字啥意思

50:48.700 --> 50:49.500
那么数字

50:49.500 --> 50:50.300
每次变化的时候

50:50.300 --> 50:51.400
会把数字给力啊

50:51.400 --> 50:52.300
给力这个数字

50:52.300 --> 50:53.700
给力之后你自己去处理

50:54.000 --> 50:55.100
好保存我们看一下

50:56.100 --> 50:56.900
好这样子

50:57.100 --> 50:58.200
更更有意思了

50:58.200 --> 50:58.700
来看

50:59.100 --> 51:00.200
颜色也发生了变化

51:00.200 --> 51:00.700
看到没

51:01.200 --> 51:02.300
颜色也发生了变化

51:03.300 --> 51:05.400
啊你可以玩输很多很多花样出来啊

51:05.400 --> 51:07.100
这是我们自己写的动画插件

51:07.400 --> 51:08.100
你们以后呢

51:08.100 --> 51:09.400
肯定还会接触别人

51:09.400 --> 51:10.800
别人写好的动画插件

51:10.800 --> 51:12.600
但是你会发现都类似啊

51:12.600 --> 51:14.700
它的基本理念是类似的

51:15.200 --> 51:15.600
好吧

51:15.600 --> 51:16.700
下来把它写一下啊

51:16.700 --> 51:17.900
有了这个动画插件之后呢

51:17.900 --> 51:18.700
我们以后做动画

51:18.700 --> 51:20.800
就会非常非常的方便

51:21.500 --> 51:21.700
好

51:21.700 --> 51:22.800
下来去把它写一下啊

