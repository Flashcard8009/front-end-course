WEBVTT

00:00.000 --> 00:03.000
数据内形

00:03.000 --> 00:13.990
首先回归一下

00:13.990 --> 00:18.990
以前我们学习了数据和数据内形

00:18.990 --> 00:21.990
在数据内形里边我们把它分为两种

00:21.990 --> 00:24.990
一种是原始内形

00:24.990 --> 00:26.990
原始内形 有哪些

00:26.990 --> 00:28.990
来 回忆一下

00:28.990 --> 00:31.990
有数字 囊本

00:31.990 --> 00:34.990
有字乎串 文本 数据

00:34.990 --> 00:36.990
还有啥呢

00:36.990 --> 00:37.990
还是布林 对吧

00:37.990 --> 00:40.990
还有个布林 表示的是布尔直

00:40.990 --> 00:42.990
有true和force

00:42.990 --> 00:43.990
还有啥呢

00:43.990 --> 00:45.990
还有是不是now

00:45.990 --> 00:47.990
now undefined

00:47.990 --> 00:48.990
now这个内形我之前说过

00:48.990 --> 00:52.990
有些教程里面直接把它归到对象的内形了

00:52.990 --> 00:54.990
但是我这个教程里面是单独拿出来

00:54.990 --> 00:56.990
单独拿出来做一个内形

00:56.990 --> 00:58.990
不去纠结 这个问题不去纠结

00:58.990 --> 01:01.990
这是一个纪念 是一个设计缺线

01:01.990 --> 01:03.990
除了原始内形之外

01:03.990 --> 01:04.990
还有什么内形呢

01:04.990 --> 01:06.990
说了 还有一个引用内形

01:06.990 --> 01:08.990
引用内形里边有什么

01:08.990 --> 01:10.990
有object就对象

01:10.990 --> 01:13.990
这个对象就可以组合原始内形

01:13.990 --> 01:16.990
或者是其他的对象内形形成一个

01:16.990 --> 01:18.990
复杂的结构 也不叫复杂的结构

01:18.990 --> 01:20.990
应该叫复合的结构

01:20.990 --> 01:22.990
里边可以有很多内形组合而成

01:22.990 --> 01:24.990
那么用对象内形就可以表示

01:24.990 --> 01:27.990
世界上任何一个东西都可以用它表示的

01:27.990 --> 01:29.990
这是对象内形

01:29.990 --> 01:30.990
然后还有一个啥呢

01:30.990 --> 01:33.990
还有一个就是函数 方式

01:33.990 --> 01:37.990
这是函数 函数内形

01:37.990 --> 01:40.990
函数我们之后再学习 它也是引用内形

01:40.990 --> 01:44.990
我们上节课讲了变量

01:44.990 --> 01:47.990
变量中可以存放一些数据

01:47.990 --> 01:49.990
用来存放数据的

01:49.990 --> 01:51.990
咱们变量里边除了

01:51.990 --> 01:54.990
当然我们上节课讲存放数据的时候

01:54.990 --> 01:58.990
只存放了什么 只存放了原始内形

01:58.990 --> 02:02.990
存一些字不算 存一些数字 存一些布尔

02:02.990 --> 02:05.990
但是变量里面能不能存放引用内形呢

02:05.990 --> 02:07.990
我们现在还没有学函数吧

02:07.990 --> 02:09.990
我们就先说对象

02:09.990 --> 02:11.990
变量里面能不能存对象呢

02:11.990 --> 02:13.990
当然没有任何问题

02:13.990 --> 02:17.990
变量里面它也可以存放一个对象

02:17.990 --> 02:18.990
所以说我们这些课呢

02:18.990 --> 02:20.990
首先来说一下

02:20.990 --> 02:26.990
在变量中存放对象

02:26.990 --> 02:29.990
先说一下这个问题

02:30.990 --> 02:32.990
如何在变量中存放对象呢

02:32.990 --> 02:34.990
非常非常简单

02:34.990 --> 02:35.990
我们之前呢

02:35.990 --> 02:36.990
我们这里举个例子

02:36.990 --> 02:39.990
我们之前存放原始内形怎么存

02:39.990 --> 02:40.990
那么现在呢

02:40.990 --> 02:41.990
存对象就怎么存

02:41.990 --> 02:43.990
一样的 没有什么区别

02:43.990 --> 02:48.990
比如说这里在变量中存放对象

02:48.990 --> 02:49.990
我举个例子

02:49.990 --> 02:54.390
这里个接下来

02:54.390 --> 02:55.390
之前呢

02:55.390 --> 02:57.390
我们在变量里面

02:57.390 --> 02:58.390
变量里面A

02:58.390 --> 03:00.390
里面存的是啥呢

03:00.390 --> 03:01.390
存的是原始内象

03:01.390 --> 03:03.390
我们直接书写的字面量

03:03.390 --> 03:05.390
直接书写的字面量看不来

03:05.390 --> 03:08.390
然后这样子写也可以

03:08.390 --> 03:09.390
这样子没问题

03:09.390 --> 03:10.390
然后下边呢

03:10.390 --> 03:12.390
我们再进定一个变量

03:12.390 --> 03:15.390
比如说给它取名为OBG

03:15.390 --> 03:18.390
表示的或者是一个用户吧

03:18.390 --> 03:20.390
user一个用户

03:20.390 --> 03:21.390
这里呢

03:21.390 --> 03:22.390
我们要存放一个对象

03:22.390 --> 03:23.390
能不能存呢

03:23.390 --> 03:24.390
当然可以

03:24.390 --> 03:26.390
你直接对象怎么写

03:26.390 --> 03:27.390
对象怎么写

03:27.390 --> 03:29.390
是不是两个大括号

03:29.390 --> 03:31.390
两个大括号表示一个对象

03:31.390 --> 03:32.390
这个对象里面呢

03:32.390 --> 03:33.390
有些属性对吧

03:33.390 --> 03:34.390
有些属性你可以写

03:34.390 --> 03:35.390
如果没有属性的话

03:35.390 --> 03:36.390
就什么都不写

03:36.390 --> 03:37.390
ok 那么我们这里呢

03:37.390 --> 03:38.390
先写一个属性

03:38.390 --> 03:39.390
先写个属性

03:39.390 --> 03:41.390
比方说用户的账号

03:41.390 --> 03:43.390
账号 account

03:43.390 --> 03:46.390
账号 abc

03:46.390 --> 03:48.390
用户的密码

03:48.390 --> 03:50.390
用 password

03:50.390 --> 03:51.390
也可以简写

03:51.390 --> 03:53.390
password也可以简写为pwd

03:53.390 --> 03:55.390
我们通常在程序里边

03:55.390 --> 03:56.390
反而是看到pwd呢

03:56.390 --> 03:58.390
往往代表的是一个密码

03:58.390 --> 04:00.390
然后密码呢

04:00.390 --> 04:02.390
就123456

04:02.390 --> 04:04.390
好 性别简单

04:04.390 --> 04:06.390
简单可以用

04:06.390 --> 04:08.390
也可以用6都可以

04:08.390 --> 04:09.390
我们可以用支付串

04:09.390 --> 04:10.390
也可以用2

04:10.390 --> 04:11.390
和force

04:11.390 --> 04:12.390
甚至可以用数字都行

04:12.390 --> 04:13.390
都行

04:13.390 --> 04:15.390
比方说我们这里用支付串

04:15.390 --> 04:16.390
难

04:16.390 --> 04:18.390
简单

04:18.390 --> 04:19.390
好 下面再来一个

04:19.390 --> 04:20.390
e is VIP

04:20.390 --> 04:22.390
是不是VIP用户

04:22.390 --> 04:23.390
是不是VIP用户

04:23.390 --> 04:25.390
那么这个属性呢

04:25.390 --> 04:27.390
最好就是使用什么

04:27.390 --> 04:28.390
使用的是布尔

04:28.390 --> 04:29.390
true

04:29.390 --> 04:30.390
或者是force

04:30.390 --> 04:33.390
我们这里呢可以用force

04:33.390 --> 04:35.390
好 然后再来一个吧

04:35.390 --> 04:37.390
ag年龄

04:37.390 --> 04:39.390
比方说18岁

04:39.390 --> 04:40.390
好 现在呢

04:40.390 --> 04:42.390
我们订了一个用户对象

04:42.390 --> 04:44.390
注意啊 注意看

04:44.390 --> 04:45.390
这是一个用户对象

04:45.390 --> 04:46.390
对吧

04:46.390 --> 04:47.390
我们之前学习过的

04:47.390 --> 04:48.390
这是一个对象

04:48.390 --> 04:49.390
然后呢

04:49.390 --> 04:50.390
把这个对象保存到

04:50.390 --> 04:52.390
变量user里边

04:52.390 --> 04:53.390
接下来

04:53.390 --> 04:54.390
我们来输出这个user

04:54.390 --> 04:55.390
看一下

04:55.390 --> 04:56.390
输出这个user

04:57.390 --> 04:59.390
看一下能否正常执行

04:59.390 --> 05:04.430
运行一下

05:06.430 --> 05:08.430
看一下空置台

05:08.430 --> 05:10.430
我们重新刷新一次

05:10.430 --> 05:11.430
你看到

05:11.430 --> 05:12.430
你看到

05:12.430 --> 05:13.430
这个对象呢

05:13.430 --> 05:14.430
就已经打印出来了

05:14.430 --> 05:16.430
说明啥呢

05:16.430 --> 05:17.430
说明这个对象

05:17.430 --> 05:19.430
是不是存到这个变量里边去了

05:19.430 --> 05:20.430
同时又说明啥呢

05:20.430 --> 05:21.430
变量里边

05:21.430 --> 05:23.430
是不是可以存对象

05:23.430 --> 05:24.430
它的存的方式

05:24.430 --> 05:25.430
跟之前

05:25.430 --> 05:27.430
跟之前那个存

05:27.430 --> 05:29.430
存什么存那个原始内象

05:29.430 --> 05:30.430
是不是一样的

05:30.430 --> 05:31.430
有啥区别呢

05:31.430 --> 05:32.430
以前呢

05:32.430 --> 05:33.430
这个位置直接写的是

05:33.430 --> 05:34.430
一个字不算

05:34.430 --> 05:35.430
一个数字

05:35.430 --> 05:36.430
那现在把它写成一个对象

05:36.430 --> 05:38.430
只不过代码多了一点

05:38.430 --> 05:40.430
语法上是不是没有任何区别

05:40.430 --> 05:42.430
你把它看成个整体啊

05:42.430 --> 05:44.430
就这一块代码看成个整体

05:44.430 --> 05:45.430
是不是没有任何区别

05:45.430 --> 05:46.430
对不对

05:46.430 --> 05:48.430
OK

05:48.430 --> 05:49.430
那么这就是在

05:49.430 --> 05:50.430
变量中存放对象

05:50.430 --> 05:51.430
好 这里边呢

05:51.430 --> 05:52.430
还有更多的地方要说的

05:52.430 --> 05:54.430
因为对象里边呢

05:54.430 --> 05:56.430
它跟原始内象还不一样

05:56.430 --> 05:58.430
原始内象是不能再拆分的

05:58.430 --> 06:00.430
但是对象是可以再拆分的

06:00.430 --> 06:01.430
你看到没

06:01.430 --> 06:03.430
对象是可以再拆分的

06:03.430 --> 06:04.430
这个对象里边

06:04.430 --> 06:06.430
可以拆分成一个一个的属性

06:06.430 --> 06:07.430
好 那么接下来

06:07.430 --> 06:10.430
第一个问题

06:10.430 --> 06:12.430
第一个问题

06:12.430 --> 06:15.430
读取对象中的某个属性

06:15.430 --> 06:16.430
读取

06:16.430 --> 06:18.430
通过变量

06:18.430 --> 06:21.430
读取对象中的

06:21.430 --> 06:23.430
某个属性

06:23.430 --> 06:24.430
如何来读

06:24.430 --> 06:26.430
非常非常简单

06:26.430 --> 06:27.430
咋读呢

06:27.430 --> 06:29.430
就是变量名

06:29.430 --> 06:31.430
我这里把它写成个代码格式

06:31.430 --> 06:40.880
就是变量名点一个小数点

06:40.880 --> 06:41.880
一个小数点

06:41.880 --> 06:42.880
或者叫英文句号

06:42.880 --> 06:45.880
变量名点上属性名

06:45.880 --> 06:46.880
就完了

06:46.880 --> 06:48.880
非常非常简单

06:48.880 --> 06:49.880
好 看一下

06:49.880 --> 06:51.880
看一下这边

06:51.880 --> 06:52.880
我们要比方说

06:52.880 --> 06:53.880
我们输出的时候

06:53.880 --> 06:55.880
输出的不是整个对象

06:55.880 --> 06:57.880
输出的不是整个对象

06:57.880 --> 06:58.880
我们现在输出的是整个对象

06:58.880 --> 06:59.880
对吧

06:59.880 --> 07:01.880
我们再来看一下这个

07:01.880 --> 07:02.880
这个

07:02.880 --> 07:03.880
复习之前的知识

07:03.880 --> 07:05.880
不要学了就忘了

07:05.880 --> 07:06.880
看一下这个

07:06.880 --> 07:07.880
打印啥

07:07.880 --> 07:09.880
这一部分打印啥

07:09.880 --> 07:10.880
打印啥呢

07:10.880 --> 07:11.880
是不是Objects

07:11.880 --> 07:13.880
表示的是对象

07:13.880 --> 07:14.880
你看

07:14.880 --> 07:15.880
打印的是Objects

07:15.880 --> 07:16.880
是个对象

07:16.880 --> 07:17.880
OK

07:17.880 --> 07:19.880
这是打印整个对象

07:19.880 --> 07:21.880
那么现在我要做这么一件事

07:21.880 --> 07:25.880
输出对象的

07:25.880 --> 07:27.880
对象的账号

07:27.880 --> 07:28.880
账号

07:28.880 --> 07:29.880
那怎么输出呢

07:29.880 --> 07:31.880
console log

07:31.880 --> 07:32.880
我们这样子来写

07:32.880 --> 07:33.880
user变量名

07:33.880 --> 07:35.880
对象的变量名

07:35.880 --> 07:37.880
它保存在有点变量里面了吧

07:37.880 --> 07:39.880
然后我们通过变量名点

07:39.880 --> 07:41.880
然后这里写上而抗着

07:41.880 --> 07:42.880
你看它有智能体式的一回车

07:42.880 --> 07:43.880
就可以了

07:43.880 --> 07:45.880
就这么简单

07:45.880 --> 07:46.880
这样子的表示什么呢

07:46.880 --> 07:47.880
是不是很好理解

07:47.880 --> 07:50.880
表示读取用户的账号

07:50.880 --> 07:52.880
用户的账号

07:52.880 --> 07:53.880
能理解吧

07:53.880 --> 07:54.880
好

07:54.880 --> 07:56.880
我们保存一下

07:56.880 --> 07:57.880
看一下

07:57.880 --> 07:59.880
这里都出了用户的账号

07:59.880 --> 08:00.880
abc

08:00.880 --> 08:01.880
它输出来就是abc

08:01.880 --> 08:02.880
好

08:02.880 --> 08:04.880
那么现在我再问你一个问题

08:04.880 --> 08:06.880
这一个代码

08:06.880 --> 08:07.880
我现在框住这一部分

08:07.880 --> 08:09.880
鼠标框住这一部分代码

08:09.880 --> 08:10.880
是什么类型

08:10.880 --> 08:14.190
大家告诉我

08:14.190 --> 08:16.190
鼠标框住这一部分代码

08:16.190 --> 08:17.190
是什么类型

08:17.190 --> 08:18.190
有一些同学说

08:18.190 --> 08:20.190
它是一个用户对象

08:20.190 --> 08:22.190
好好想一想

08:22.190 --> 08:24.190
这一部分表达的意思是什么

08:24.190 --> 08:25.190
用户的账号

08:25.190 --> 08:28.190
那么用户的账号是什么类型

08:28.190 --> 08:29.190
好

08:29.190 --> 08:31.190
咱们打印出来看一下吧

08:31.190 --> 08:33.700
好

08:33.700 --> 08:34.700
保存一下

08:34.700 --> 08:36.700
看一下这一部分是什么类型

08:36.700 --> 08:37.700
你看

08:37.700 --> 08:38.700
是不是蜘蛛串

08:38.700 --> 08:41.700
用户的账号是不是就是蜘蛛串

08:41.700 --> 08:42.700
没问题吧

08:42.700 --> 08:44.700
因此你这个地方

08:44.700 --> 08:46.700
使用的查看类型

08:46.700 --> 08:47.700
查看的是啥呢

08:47.700 --> 08:49.700
查看的是这个用户的账号

08:49.700 --> 08:51.700
就这个东西

08:51.700 --> 08:52.700
这个东西是不是蜘蛛串

08:52.700 --> 08:53.700
对不对

08:53.700 --> 08:54.700
好

08:55.700 --> 08:56.700
再来一个

08:56.700 --> 08:58.700
输出对象的

08:58.700 --> 08:59.700
比方说

08:59.700 --> 09:00.700
连领

09:00.700 --> 09:01.700
连领

09:01.700 --> 09:02.700
是不是一样的

09:02.700 --> 09:03.700
没啥区别

09:03.700 --> 09:05.700
log user.ag

09:05.700 --> 09:08.700
type of user.ag

09:08.700 --> 09:10.700
打印啥

09:10.700 --> 09:11.700
打印啥

09:11.700 --> 09:12.700
打印18

09:12.700 --> 09:13.700
然后呢

09:13.700 --> 09:14.700
就是

09:14.700 --> 09:15.700
number

09:15.700 --> 09:16.700
对吧

09:16.700 --> 09:17.700
number

09:17.700 --> 09:18.700
保存

09:18.700 --> 09:20.700
18 number

09:20.700 --> 09:21.700
没问题吧

09:21.700 --> 09:22.700
OK

09:22.700 --> 09:25.700
这是如何来读取

09:25.700 --> 09:28.700
对象的某个属性

09:28.700 --> 09:30.700
好 这里边有一个就是细节

09:30.700 --> 09:32.700
有一个细节

09:32.700 --> 09:34.700
就是当

09:34.700 --> 09:36.700
这里打个重点

09:36.700 --> 09:39.700
当读取的属性

09:39.700 --> 09:42.700
不存在时会怎么样

09:42.700 --> 09:43.700
以前呢

09:43.700 --> 09:44.700
我们说变量

09:44.700 --> 09:46.700
变量如果不存在

09:46.700 --> 09:48.700
没有定义过这个变量

09:48.700 --> 09:50.700
一再读它的时候会爆错对吧

09:50.700 --> 09:51.700
但是属性不是变量

09:51.700 --> 09:53.700
你不能把属性当成变量

09:53.700 --> 09:54.700
属性是不一样的

09:54.700 --> 09:56.700
当读取的属性

09:56.700 --> 09:58.700
不存在时

09:58.700 --> 10:00.700
会怎么样呢

10:00.700 --> 10:03.700
会得到undefend

10:03.700 --> 10:05.700
会得到undefend

10:05.700 --> 10:07.700
好 咱们再来看

10:09.700 --> 10:11.700
我们这里

10:11.700 --> 10:12.700
输出

10:12.700 --> 10:13.700
user.

10:13.700 --> 10:15.700
比方说

10:15.700 --> 10:16.700
用户的

10:16.700 --> 10:17.700
比方的性别

10:17.700 --> 10:19.700
性别我们写错了

10:19.700 --> 10:21.700
输出这个用户的性别

10:21.700 --> 10:22.700
6

10:22.700 --> 10:23.700
OK 我们再写一个

10:23.700 --> 10:24.700
后面写一个

10:24.700 --> 10:26.700
type of user.6

10:26.700 --> 10:28.700
没有这个属性对吧

10:28.700 --> 10:29.700
没有这个属性

10:29.700 --> 10:30.700
好 我们来看一下

10:30.700 --> 10:31.700
保存

10:31.700 --> 10:32.700
看一下

10:32.700 --> 10:34.700
是不是undefend

10:34.700 --> 10:35.700
它没有爆错吧

10:35.700 --> 10:36.700
没爆错

10:36.700 --> 10:37.700
它是undefend

10:37.700 --> 10:39.700
得到的指是undefend

10:39.700 --> 10:41.700
就这个

10:41.700 --> 10:42.700
这个地方要注意一下

10:42.700 --> 10:44.700
当读一个对象

10:44.700 --> 10:45.700
如果这个对象的属性

10:45.700 --> 10:46.700
不存在的时候

10:46.700 --> 10:48.700
会得到undefend

10:49.700 --> 10:51.700
然后还有一个点要注意

10:51.700 --> 10:53.700
还有一个点要注意

10:53.700 --> 10:54.700
这个点就是咱们

10:54.700 --> 10:55.700
JS写在里面

10:55.700 --> 10:56.700
经常出问题的

10:56.700 --> 10:58.700
经常爆错的一个点

10:58.700 --> 10:59.700
以后遇到这样的错误

10:59.700 --> 11:00.700
你要知道

11:00.700 --> 11:02.700
到底是什么原因导致的

11:02.700 --> 11:04.700
就是什么呢

11:04.700 --> 11:06.700
当对象

11:06.700 --> 11:07.700
当

11:07.700 --> 11:09.700
读取属性的

11:09.700 --> 11:11.700
对象不存在

11:11.700 --> 11:13.700
也就是为undefend

11:13.700 --> 11:14.700
或者是now

11:14.700 --> 11:15.700
undefend

11:15.700 --> 11:18.700
或nows

11:19.700 --> 11:20.700
程序

11:20.700 --> 11:21.700
爆错

11:21.700 --> 11:22.700
这啥意思呢

11:22.700 --> 11:23.700
什么意思

11:23.700 --> 11:24.700
我这里举个例子

11:24.700 --> 11:26.700
比方说

11:26.700 --> 11:27.700
咱们又有一个变量

11:27.700 --> 11:28.700
又有一个变量

11:30.700 --> 11:31.700
下面吧

11:31.700 --> 11:32.700
又有一个变量

11:32.700 --> 11:33.700
user2

11:33.700 --> 11:34.700
第二个用户

11:34.700 --> 11:35.700
第二个用户

11:35.700 --> 11:36.700
我没有复辞

11:36.700 --> 11:37.700
我忘了复辞了

11:37.700 --> 11:39.700
好 接下来

11:39.700 --> 11:41.700
我输出這個user2

11:41.700 --> 11:42.700
输出这个又

11:42.700 --> 11:44.700
第二个用户的账号

11:45.700 --> 11:47.700
那么现在不一样了

11:47.700 --> 11:49.700
现在的问题是

11:49.700 --> 11:50.700
这个user2

11:50.700 --> 11:51.700
是不是为空

11:51.700 --> 11:52.700
对不对

11:52.700 --> 11:53.700
它没东西吗

11:53.700 --> 11:55.700
它没东西

11:55.700 --> 11:57.700
user2为空

11:57.700 --> 11:59.700
就是它为undefend

11:59.700 --> 12:00.700
那么这个时候

12:00.700 --> 12:01.700
我去读它的属性

12:01.700 --> 12:03.700
读一个undefend的属性

12:03.700 --> 12:04.700
会怎么样呢

12:04.700 --> 12:06.700
保存看一下

12:06.700 --> 12:07.700
看一下

12:07.700 --> 12:08.700
就爆错了

12:08.700 --> 12:10.700
这个错误

12:10.700 --> 12:11.700
大家看一下

12:11.700 --> 12:12.700
以后我相信

12:12.700 --> 12:13.700
这个错误

12:13.700 --> 12:16.700
会实时出现在

12:16.700 --> 12:18.700
你们的视野里边

12:18.700 --> 12:19.700
经常出现

12:19.700 --> 12:20.700
我之前呢

12:20.700 --> 12:21.700
遇到过一个网站

12:21.700 --> 12:22.700
那个网站

12:22.700 --> 12:24.700
它统计了一下

12:24.700 --> 12:26.700
排名届实前实的错误

12:26.700 --> 12:28.700
第一个错误就是这个

12:28.700 --> 12:30.700
排名第一个错误就是这种

12:30.700 --> 12:32.700
connet rate property

12:32.700 --> 12:34.700
不能读取属性

12:34.700 --> 12:36.700
这个property表示属性的意思

12:36.700 --> 12:37.700
不能读这个

12:37.700 --> 12:38.700
这个account属性

12:38.700 --> 12:39.700
从哪里读呢

12:39.700 --> 12:41.700
从undefend里边读

12:41.700 --> 12:43.700
当你从undefend

12:43.700 --> 12:44.700
这个类型里边

12:44.700 --> 12:45.700
去读一个属性的时候

12:45.700 --> 12:46.700
它直接爆错

12:46.700 --> 12:47.700
直接爆错

12:47.700 --> 12:48.700
当然

12:48.700 --> 12:49.700
如果它是now的话

12:49.700 --> 12:50.700
也一样

12:50.700 --> 12:52.700
比方它是now

12:52.700 --> 12:54.700
我们看一下保存

12:54.700 --> 12:56.700
你看一样的

12:56.700 --> 12:58.700
connet rate property

12:58.700 --> 13:00.700
account of now

13:00.700 --> 13:01.700
你看这意思吧

13:01.700 --> 13:03.700
以后你看到这个错误

13:03.700 --> 13:04.700
就表示什么意思呢

13:04.700 --> 13:06.700
表示你其中一具代码

13:06.700 --> 13:09.700
再从一个空的对象里边

13:09.700 --> 13:11.700
空的变量里边去读东西

13:11.700 --> 13:12.700
读不出来

13:12.700 --> 13:13.700
所以爆错了

13:13.700 --> 13:15.700
大家注意一下

13:15.700 --> 13:17.700
好 我再问大家一个问题

13:17.700 --> 13:19.700
再问大家一个问题

13:19.700 --> 13:21.700
如果我这个地方这样子写

13:21.700 --> 13:23.700
给你们一点时间

13:23.700 --> 13:24.700
想一想

13:24.700 --> 13:26.700
这个地方如果这样子写

13:26.700 --> 13:28.700
它会怎么样

13:28.700 --> 13:29.700
它会怎么样

13:29.700 --> 13:30.700
它会输出啥

13:30.700 --> 13:31.700
或者是

13:31.700 --> 13:33.700
会不会爆错

13:33.700 --> 13:35.700
好好想想

13:35.700 --> 13:38.780
好好想想

13:38.780 --> 13:39.780
输出啥呢

13:39.780 --> 13:40.780
要不要爆错

13:40.780 --> 13:41.780
首先要不要爆错

13:41.780 --> 13:43.780
就不爆错

13:43.780 --> 13:44.780
我们之前说了

13:44.780 --> 13:46.780
只有什么undefend

13:46.780 --> 13:47.780
那我的时候

13:47.780 --> 13:48.780
你读它的属性

13:48.780 --> 13:49.780
它会爆错

13:49.780 --> 13:51.780
如果

13:51.780 --> 13:52.780
它不是undefend

13:52.780 --> 13:53.780
它是一个普通对象

13:53.780 --> 13:54.780
它不会爆错的

13:54.780 --> 13:56.780
它这里不会爆错的

13:56.780 --> 13:57.780
它会怎么样呢

13:57.780 --> 13:59.780
它会输出undefend

13:59.780 --> 14:00.780
为什么呢

14:00.780 --> 14:02.780
当读取的

14:02.780 --> 14:04.780
当读取的属性不存在的时候

14:04.780 --> 14:05.780
会得到undefend

14:05.780 --> 14:07.780
所以说这个时候

14:07.780 --> 14:09.780
你看到的是undefend

14:09.780 --> 14:10.780
搞清楚没

14:10.780 --> 14:11.780
这是第一点

14:11.780 --> 14:13.780
如何来读取某个属性

14:13.780 --> 14:14.780
以及在读的过程中

14:14.780 --> 14:16.780
有哪些特殊情况

14:16.780 --> 14:17.780
大家要记住

14:17.780 --> 14:18.780
好

14:18.780 --> 14:19.780
这是第一个点

14:19.780 --> 14:20.780
好

14:20.780 --> 14:21.780
第二个点

14:25.780 --> 14:26.780
如何

14:26.780 --> 14:28.780
就通过变量

14:29.780 --> 14:32.780
更改对象中的

14:32.780 --> 14:34.780
某个属性

14:34.780 --> 14:36.780
我们要给属性重新复制

14:36.780 --> 14:38.780
变化这个属性

14:38.780 --> 14:39.780
比方说

14:39.780 --> 14:40.780
比方说

14:40.780 --> 14:41.780
还是这一块

14:41.780 --> 14:42.780
还是这一块

14:42.780 --> 14:44.780
我们这里复制一下吧

14:46.780 --> 14:47.780
复制一下

14:47.780 --> 14:48.780
还是这一块

14:48.780 --> 14:50.780
还是同一个对象

14:50.780 --> 14:51.780
那么接下来

14:51.780 --> 14:53.780
我们先来输出对象的

14:53.780 --> 14:58.780
user.password 密码

14:58.780 --> 14:59.780
这个输出没什么问题

14:59.780 --> 15:00.780
对吧

15:00.780 --> 15:01.780
这个输出肯定输出

15:01.780 --> 15:02.780
123456

15:02.780 --> 15:03.780
您看一下

15:07.780 --> 15:09.780
123456

15:09.780 --> 15:10.780
好

15:10.780 --> 15:11.780
现在我们要做这件事

15:12.780 --> 15:15.780
就是将密码

15:15.780 --> 15:17.780
将密码改为

15:17.780 --> 15:20.780
654321

15:20.780 --> 15:21.780
怎么做呢

15:23.780 --> 15:25.780
你是不是给油热重新复制呢

15:25.780 --> 15:27.780
重新复制整个对象了

15:27.780 --> 15:28.780
重新复制整个对象

15:28.780 --> 15:30.780
你这样子写是不是太麻烦了

15:30.780 --> 15:31.780
对不对

15:31.780 --> 15:32.780
太麻烦了

15:32.780 --> 15:34.780
你要把整个属性全部写一遍

15:34.780 --> 15:36.780
实际上我只改啥了

15:36.780 --> 15:38.780
当然你可不可以重新写一遍

15:38.780 --> 15:39.780
你当然可以重新写一遍

15:39.780 --> 15:41.780
比方说这里把它改成654321

15:41.780 --> 15:42.780
对吧

15:42.780 --> 15:44.780
重新写一遍就完事了

15:44.780 --> 15:46.780
那么其他的属性保持不变

15:46.780 --> 15:47.780
保持不变

15:47.780 --> 15:49.780
但这样子写很麻烦

15:49.780 --> 15:50.780
第二个问题

15:50.780 --> 15:51.780
以后我们后面会讲

15:51.780 --> 15:53.780
后面会讲第二个问题

15:53.780 --> 15:55.780
至少现在看起来比较麻烦

15:55.780 --> 15:56.780
对吧

15:56.780 --> 15:58.780
那么我们有没有更好的方式呢

15:58.780 --> 15:59.780
可以

15:59.780 --> 16:02.780
我们不用给整user 辨量

16:02.780 --> 16:03.780
重新复制

16:03.780 --> 16:04.780
我们复制的是啥呢

16:04.780 --> 16:07.780
复制的是它的属性

16:07.780 --> 16:08.780
复制的是它的属性

16:08.780 --> 16:10.780
也就是说我们可以这样子写

16:10.780 --> 16:13.780
user.password

16:13.780 --> 16:15.780
这个东西是

16:15.780 --> 16:16.780
之前我们是不是说过

16:16.780 --> 16:19.780
这个东西表示的是用户的密码

16:19.780 --> 16:20.780
对吧

16:20.780 --> 16:21.780
用户的密码

16:21.780 --> 16:23.780
那么重新给这个用户对象的密码

16:23.780 --> 16:24.780
重新复制就完事了

16:24.780 --> 16:26.780
复制成654321

16:26.780 --> 16:28.780
就完事了

16:28.780 --> 16:29.780
好

16:29.780 --> 16:30.780
现在我们来输出

16:30.780 --> 16:31.780
来输出这个user

16:31.780 --> 16:33.780
看一下

16:33.780 --> 16:34.780
看一下整个用户

16:34.780 --> 16:36.780
保存

16:36.780 --> 16:37.780
打印出来

16:37.780 --> 16:38.780
你看

16:38.780 --> 16:39.780
对 刷新词

16:39.780 --> 16:40.780
你看

16:40.780 --> 16:42.780
一开始密码是123456

16:42.780 --> 16:44.780
然后运行完了之后

16:44.780 --> 16:46.780
就是654321了

16:46.780 --> 16:48.780
当然我们这里也可以直接输出

16:48.780 --> 16:50.780
user.password

16:50.780 --> 16:51.780
保存

16:51.780 --> 16:52.780
看一下

16:52.780 --> 16:54.780
是不是非常简单

16:54.780 --> 16:55.780
非常简单

16:55.780 --> 16:57.780
这里也有一个细节

16:57.780 --> 16:59.780
也有一个细节大家注意一下

16:59.780 --> 17:00.780
就啥呢

17:00.780 --> 17:02.780
就是

17:02.780 --> 17:04.780
当复制的属性

17:04.780 --> 17:06.780
当复制的

17:06.780 --> 17:08.780
复制的属性

17:08.780 --> 17:10.780
不存在时

17:10.780 --> 17:12.780
不存在时

17:12.780 --> 17:14.780
会怎么样呢

17:14.780 --> 17:17.780
会添加属性

17:17.780 --> 17:19.780
会添加属性

17:19.780 --> 17:21.780
当复制的属性不存在的时候

17:21.780 --> 17:23.780
会添加属性

17:23.780 --> 17:24.780
会添加属性

17:24.780 --> 17:25.780
好

17:25.780 --> 17:27.780
那么现在我们来看一下这里

17:27.780 --> 17:28.780
比方说

17:28.780 --> 17:31.780
我们这里再给它复制一个属性

17:31.780 --> 17:33.780
再给它复制一个属性

17:33.780 --> 17:37.090
这里

17:37.090 --> 17:39.090
user

17:39.090 --> 17:40.090
看

17:40.090 --> 17:42.090
帐号密码新别年

17:42.090 --> 17:44.090
你再来个啥呢

17:45.090 --> 17:48.090
再来一个验证码吧

17:48.090 --> 17:50.090
不能用

17:50.090 --> 17:51.090
里边大有验证码

17:51.090 --> 17:52.090
再来个啥呢

17:52.090 --> 17:53.090
就随便写一个吧

17:53.090 --> 17:54.090
我一说完会想不到了

17:54.090 --> 17:56.090
password2

17:56.090 --> 17:57.090
第二个密码

17:57.090 --> 17:58.090
不要交易密码

17:58.090 --> 17:59.090
交易密码

17:59.090 --> 18:00.090
这样子写吧

18:00.090 --> 18:02.090
trade password

18:02.090 --> 18:03.090
刚才那个是登入密码对吧

18:03.090 --> 18:05.090
再来个交易密码

18:05.090 --> 18:06.090
交易密码

18:06.090 --> 18:07.090
我们就随便写

18:07.090 --> 18:08.090
abcd

18:08.090 --> 18:09.090
好

18:09.090 --> 18:10.090
你看一下

18:10.090 --> 18:11.090
这个属性是不是不存在

18:11.090 --> 18:12.090
对吧

18:12.090 --> 18:13.090
不存在

18:13.090 --> 18:14.090
那么这里给它复制

18:14.090 --> 18:15.090
可不可以呢

18:15.090 --> 18:16.090
可以

18:16.090 --> 18:17.090
这句话就是

18:17.090 --> 18:20.090
相当于添加了属性

18:20.090 --> 18:23.090
trade password

18:23.090 --> 18:24.090
好

18:24.090 --> 18:25.090
这个时候

18:25.090 --> 18:26.090
复制完了过

18:26.090 --> 18:27.090
我们输出整个对象

18:27.090 --> 18:28.090
看一下

18:28.090 --> 18:29.090
输出整个用户对象

18:29.090 --> 18:31.090
保存

18:31.090 --> 18:32.090
你看一下

18:32.090 --> 18:33.090
整个用户对象里边

18:33.090 --> 18:34.090
它多了一个属性

18:34.090 --> 18:36.090
trade password

18:36.090 --> 18:37.090
没问题吧

18:37.090 --> 18:38.090
没问题

18:38.090 --> 18:39.090
好

18:39.090 --> 18:40.090
那么

18:40.090 --> 18:41.090
又回到之前的问题

18:41.090 --> 18:43.090
又回到之前的问题

18:43.090 --> 18:44.090
你自己想一想

18:44.090 --> 18:45.090
这个道理

18:45.090 --> 18:47.090
把这个道理

18:47.090 --> 18:49.090
现在呢

18:49.090 --> 18:50.090
我现在呢

18:50.090 --> 18:51.090
要做这么件事

18:51.090 --> 18:52.090
比方说又来了

18:52.090 --> 18:54.090
一个user2

18:54.090 --> 18:56.090
有一个辩量

18:56.090 --> 18:58.090
辩量user2

18:58.090 --> 19:00.090
第二个用户

19:00.090 --> 19:01.090
每个它复制

19:01.090 --> 19:02.090
每个它复制的话

19:02.090 --> 19:04.090
它是不是undefine

19:04.090 --> 19:05.090
没问题吧

19:05.090 --> 19:06.090
好

19:06.090 --> 19:07.090
OK

19:07.090 --> 19:08.090
我们给这个undefine

19:08.090 --> 19:10.090
这个辩量里边

19:10.090 --> 19:12.090
去加一个属性

19:12.090 --> 19:14.090
可不可以加呢

19:14.090 --> 19:16.090
可不可以加呢

19:16.090 --> 19:19.660
你自己想想这个道理

19:19.660 --> 19:21.660
好好想想这个逻辑道理

19:21.660 --> 19:25.480
可不可以加呢

19:25.480 --> 19:27.480
有些人觉得好像可以加

19:27.480 --> 19:28.480
那你想一想

19:28.480 --> 19:30.480
咱们来理一下

19:30.480 --> 19:31.480
我们理一下

19:31.480 --> 19:32.480
之前这一块

19:32.480 --> 19:33.480
它为什么要爆出

19:33.480 --> 19:34.480
undefine的话

19:34.480 --> 19:35.480
如果它是个undefine

19:35.480 --> 19:37.480
它为什么要爆出

19:37.480 --> 19:40.480
undefine是不是原始内象

19:40.480 --> 19:41.480
原始内象

19:41.480 --> 19:43.480
是不是不能再裁分

19:43.480 --> 19:44.480
原始内象里边

19:44.480 --> 19:46.480
存不存在属性

19:46.480 --> 19:49.480
原始内象存不存在属性

19:49.480 --> 19:50.480
不存在

19:50.480 --> 19:51.480
比方说

19:51.480 --> 19:52.480
一个数字里边

19:52.480 --> 19:54.480
能不能存在属性

19:54.480 --> 19:55.480
能不能包含其他东西

19:55.480 --> 19:57.480
不能了吧

19:57.480 --> 19:58.480
一个字母创意里边

19:58.480 --> 19:59.480
能不能存在属性

19:59.480 --> 20:00.480
不能吧

20:00.480 --> 20:02.480
我们存在属性的是什么

20:02.480 --> 20:03.480
是对象

20:03.480 --> 20:04.480
只有对象里边

20:04.480 --> 20:06.480
才会存在各种各样的属性

20:06.480 --> 20:07.480
我们可以组合

20:07.480 --> 20:08.480
可以用一些属性

20:08.480 --> 20:09.480
来组合不同的数据

20:09.480 --> 20:11.480
但是我们的原始内象里边

20:11.480 --> 20:14.480
是不存在属性的东西的

20:14.480 --> 20:16.480
因此它是undefine

20:16.480 --> 20:18.480
你在读undefine的属性

20:18.480 --> 20:19.480
这种做法行不行

20:19.480 --> 20:20.480
根本就不行

20:20.480 --> 20:21.480
根本就不行

20:21.480 --> 20:22.480
它不存在这个东西

20:22.480 --> 20:23.480
好

20:23.480 --> 20:24.480
然后再回过头来

20:24.480 --> 20:25.480
看这边

20:25.480 --> 20:26.480
这也是undefine的

20:26.480 --> 20:27.480
对吧

20:27.480 --> 20:28.480
也是undefine的

20:28.480 --> 20:30.480
那么这个undefine的里边

20:30.480 --> 20:32.480
这个属性

20:32.480 --> 20:33.480
能不能读它的属性

20:33.480 --> 20:34.480
能不能给它属性复制呢

20:34.480 --> 20:35.480
你想一想这个道理

20:35.480 --> 20:37.480
是不是还是不行

20:37.480 --> 20:38.480
undefine的里边

20:38.480 --> 20:39.480
根本就没有属性

20:39.480 --> 20:41.480
它根本就没有属性

20:41.480 --> 20:43.480
所以说你不能这样去做

20:43.480 --> 20:44.480
不能去这样做

20:44.480 --> 20:45.480
保存看一下

20:45.480 --> 20:47.480
看一下会得到什么东西

20:47.480 --> 20:48.480
是不是爆错了

20:48.480 --> 20:50.480
是不是还是一样的错误

20:50.480 --> 20:51.480
cannas says property

20:51.480 --> 20:53.480
就不是get了

20:53.480 --> 20:54.480
就不是read了

20:54.480 --> 20:55.480
之前说的是read

20:55.480 --> 20:56.480
read的

20:56.480 --> 20:57.480
读去属性

20:57.480 --> 20:58.480
现在是设置属性

20:58.480 --> 21:00.480
也不能去设置

21:00.480 --> 21:01.480
undefine的属性

21:01.480 --> 21:02.480
因为undefine的东西

21:02.480 --> 21:03.480
里边没有属性

21:03.480 --> 21:04.480
压根就没有属性

21:04.480 --> 21:06.480
应该这个意思吧

21:06.480 --> 21:07.480
好

21:07.480 --> 21:08.480
那么这个时候

21:08.480 --> 21:10.480
很多聪明的同学

21:10.480 --> 21:12.480
因为我之前也遇到过

21:12.480 --> 21:14.480
马上就想到另外一个问题

21:14.480 --> 21:15.480
那我给他

21:15.480 --> 21:17.480
他是一个数字呢

21:17.480 --> 21:19.480
按照你这样的说法

21:19.480 --> 21:20.480
说法的话

21:20.480 --> 21:22.480
数字是不是也会爆错

21:22.480 --> 21:23.480
因为数字里边

21:23.480 --> 21:24.480
是不是没有属性

21:24.480 --> 21:25.480
对不对

21:25.480 --> 21:26.480
数字里边

21:26.480 --> 21:27.480
它是原式内想

21:27.480 --> 21:28.480
原式内想里边哪有属性呢

21:28.480 --> 21:29.480
对不对

21:29.480 --> 21:30.480
不存在属性

21:30.480 --> 21:31.480
按理说的话

21:31.480 --> 21:33.480
那么这个数字

21:33.480 --> 21:34.480
它也会爆错

21:34.480 --> 21:35.480
那么我们看一下

21:35.480 --> 21:36.480
它数字会不会爆错

21:38.480 --> 21:40.480
会不会爆错呢

21:40.480 --> 21:41.480
它不爆错

21:41.480 --> 21:42.480
它为什么不爆错呢

21:42.480 --> 21:44.480
这个是我们后边的知识

21:44.480 --> 21:46.480
是在境界部分的知识

21:46.480 --> 21:48.480
数字、制服串、布尔

21:48.480 --> 21:50.480
它都有特殊处理

21:50.480 --> 21:51.480
有特殊处理

21:51.480 --> 21:52.480
我们现在不管

21:52.480 --> 21:53.480
现在不管

21:53.480 --> 21:54.480
总之你不要去这么干就行了

21:54.480 --> 21:56.480
谁会这么去写代码呢

21:56.480 --> 21:57.480
第一个二

21:57.480 --> 21:59.480
给二这个加个属性

21:59.480 --> 22:01.480
没有这样写代码的

22:01.480 --> 22:02.480
不会这样去写代码

22:02.480 --> 22:03.480
这里呢

22:03.480 --> 22:04.480
我们以后会介绍

22:04.480 --> 22:05.480
以后会讲

22:05.480 --> 22:06.480
现在我们只管

22:06.480 --> 22:07.480
undefend和nau

22:07.480 --> 22:09.480
这两个是原始内想

22:09.480 --> 22:10.480
它里边是不能再拆分了

22:10.480 --> 22:12.480
里边是没有任何属性的

22:12.480 --> 22:13.480
所以说

22:13.480 --> 22:15.480
你不能给大家加属性

22:15.480 --> 22:16.480
这句话呢

22:16.480 --> 22:17.480
会爆错

22:17.480 --> 22:18.480
爆错

22:20.480 --> 22:22.480
原始内想

22:22.480 --> 22:24.480
undefend

22:25.480 --> 22:27.480
不可以

22:27.480 --> 22:28.480
有属性

22:28.480 --> 22:31.180
好

22:31.180 --> 22:32.180
这是关于这一点

22:32.180 --> 22:33.180
我们再来个例子

22:33.180 --> 22:34.180
再来个例子

22:37.180 --> 22:39.180
还是这个玩意吧

22:39.180 --> 22:40.180
翻来翻去也用

22:40.180 --> 22:41.180
好

22:41.180 --> 22:43.180
这个例子里边

22:43.180 --> 22:45.180
我们再给它加一个属性

22:45.180 --> 22:47.180
再给它加一个属性

22:47.180 --> 22:48.180
比方说adrice

22:48.180 --> 22:49.180
它的

22:49.180 --> 22:50.180
住址

22:50.180 --> 22:51.180
住址

22:51.180 --> 22:52.180
我们之前说过

22:52.180 --> 22:54.180
住址也可以把它看做一个对象

22:54.180 --> 22:56.180
也可以看做一个对象

22:56.180 --> 22:58.180
那么这个住址里边

22:58.180 --> 22:59.180
有一个country

22:59.180 --> 23:00.180
国家

23:00.180 --> 23:01.180
中国

23:01.180 --> 23:02.180
然后

23:02.180 --> 23:03.180
city

23:03.180 --> 23:04.180
城市

23:04.180 --> 23:06.180
比方说成都

23:06.180 --> 23:07.180
比方说

23:07.180 --> 23:08.180
举个例子

23:08.180 --> 23:09.180
就这么回事了

23:09.180 --> 23:11.180
接下来

23:11.180 --> 23:12.180
考到大家一个问题

23:12.180 --> 23:14.180
看能不能就是举一反三

23:14.180 --> 23:16.180
我现在要输出

23:16.180 --> 23:17.180
输出

23:17.180 --> 23:19.180
用户的

23:19.180 --> 23:20.180
用户的

23:20.180 --> 23:23.180
所在城市

23:23.180 --> 23:24.180
该怎么输出

23:24.180 --> 23:26.180
我只输出城市

23:26.180 --> 23:27.180
不要给我输出国家的东西

23:27.180 --> 23:28.180
比方说还有省份

23:28.180 --> 23:29.180
对吧

23:29.180 --> 23:30.180
还有省份

23:30.180 --> 23:31.180
我就不写省份了

23:31.180 --> 23:32.180
就这样吧

23:32.180 --> 23:34.180
输出用户所在的城市

23:34.180 --> 23:35.180
怎么输出的

23:35.180 --> 23:37.180
接下来看着

23:37.180 --> 23:39.180
这么写

23:39.180 --> 23:41.180
首先我们拿到的是

23:41.180 --> 23:43.180
你不能直接给我来个CD

23:43.180 --> 23:44.180
直接来个CD

23:44.180 --> 23:45.180
为什么不能直接写个CD

23:45.180 --> 23:46.180
它这样子写

23:46.180 --> 23:48.180
这样子写会有什么结果

23:48.180 --> 23:49.180
会输出啥

23:49.180 --> 23:50.180
来

23:50.180 --> 23:51.180
告诉我

23:51.180 --> 23:52.180
商劫客的支持

23:52.180 --> 23:53.180
不要学它就忘了

23:53.180 --> 23:54.180
商劫客的支持

23:54.180 --> 23:55.180
这样子输出

23:55.180 --> 23:56.180
会输出啥

23:56.180 --> 23:57.180
会输出啥

23:57.180 --> 23:59.180
是不是undefined

23:59.180 --> 24:00.180
是undefined的吗

24:00.180 --> 24:01.180
好好想想

24:01.180 --> 24:02.180
来吧

24:02.180 --> 24:04.180
我们又来看一下这关

24:04.180 --> 24:07.680
要记住我们之前学的

24:07.680 --> 24:09.680
一些语法规则

24:09.680 --> 24:11.680
所以报错了

24:11.680 --> 24:12.680
为啥报错

24:12.680 --> 24:13.680
为啥报错

24:13.680 --> 24:15.680
这个错误之前是不是讲过的

24:15.680 --> 24:16.680
什么错误

24:16.680 --> 24:18.680
变量没有定义

24:18.680 --> 24:19.680
你在使用一个

24:19.680 --> 24:21.680
没有定义的变量

24:21.680 --> 24:22.680
这个变量从来没定义过

24:22.680 --> 24:23.680
没有声明过

24:23.680 --> 24:25.680
所以说它这里报的是这个错误

24:25.680 --> 24:26.680
那么也就是说

24:26.680 --> 24:27.680
它找的是啥呢

24:27.680 --> 24:28.680
它找的是变量名

24:28.680 --> 24:29.680
有没有这个变量名

24:29.680 --> 24:30.680
是没有

24:30.680 --> 24:31.680
没有这个变量名

24:31.680 --> 24:33.680
我把折叠起来了

24:33.680 --> 24:34.680
你这样子看

24:34.680 --> 24:36.680
是没有这个变量名

24:36.680 --> 24:37.680
所以只有报错了

24:37.680 --> 24:38.680
对吧

24:38.680 --> 24:39.680
你不能这样子写

24:39.680 --> 24:40.680
那你该怎么写呢

24:40.680 --> 24:41.680
通过这个变量user

24:41.680 --> 24:43.680
去找啥呢

24:43.680 --> 24:44.680
是不是找而坠死

24:44.680 --> 24:45.680
对吧

24:45.680 --> 24:46.680
找而坠死

24:46.680 --> 24:47.680
那么这一坨是啥

24:47.680 --> 24:48.680
这一坨是啥

24:48.680 --> 24:49.680
你告诉我

24:49.680 --> 24:51.680
这一坨的内情是啥

24:51.680 --> 24:53.680
这一坨的内情

24:53.680 --> 24:54.680
是不是还是对象

24:54.680 --> 24:55.680
是不是又是一个对象

24:55.680 --> 24:56.680
好

24:56.680 --> 24:58.680
这个对象里边是不是有两个属象

24:58.680 --> 24:59.680
一个是concrete

24:59.680 --> 25:00.680
一个是city

25:00.680 --> 25:02.680
继续来呗

25:02.680 --> 25:04.680
继续来呗

25:04.680 --> 25:05.680
city

25:05.680 --> 25:07.680
所以答应就得到了

25:07.680 --> 25:09.680
如果要得到它的就是concrete

25:09.680 --> 25:10.680
是不是得到了

25:10.680 --> 25:11.680
对不对

25:11.680 --> 25:12.680
是不是这样子

25:12.680 --> 25:13.680
没问题吧

25:13.680 --> 25:14.680
delcity

25:14.680 --> 25:17.680
反而是要从导找到对象里边的东西

25:17.680 --> 25:18.680
直接用del

25:18.680 --> 25:19.680
然后属性名

25:19.680 --> 25:20.680
看到没

25:20.680 --> 25:21.680
用这种方式

25:21.680 --> 25:22.680
保存

25:22.680 --> 25:23.680
好看一下

25:23.680 --> 25:24.680
全部都答应出来了

25:24.680 --> 25:25.680
好

25:25.680 --> 25:27.680
如果我直接答应这个而坠死呢

25:27.680 --> 25:28.680
直接答应这个呢

25:28.680 --> 25:29.680
是啥

25:29.680 --> 25:31.680
答应这个是啥

25:31.680 --> 25:32.680
说对象

25:32.680 --> 25:33.680
保存看一下

25:33.680 --> 25:34.680
答应这个就得到一个对象

25:34.680 --> 25:35.680
看没有

25:35.680 --> 25:36.680
city

25:36.680 --> 25:37.680
concrete

25:37.680 --> 25:38.680
能听懂吧

25:38.680 --> 25:39.680
这个没问题吧

25:39.680 --> 25:40.680
应该很简单

25:40.680 --> 25:41.680
这个没问题

25:41.680 --> 25:43.680
我讲到这里

25:43.680 --> 25:44.680
我顺便说一下

25:44.680 --> 25:45.680
顺便说一下

25:45.680 --> 25:46.680
就是在对象里边

25:46.680 --> 25:47.680
你看每个属性之间

25:47.680 --> 25:49.680
每个属性之间

25:49.680 --> 25:50.680
是用dou号分隔的

25:50.680 --> 25:51.680
看到没

25:51.680 --> 25:53.680
是用dou号分隔的

25:53.680 --> 25:55.680
那么最后一个属性后面

25:55.680 --> 25:56.680
可以加dou号

25:56.680 --> 25:57.680
可以不加

25:57.680 --> 25:59.680
你看最后属性

25:59.680 --> 26:01.680
是可以加可以不加

26:01.680 --> 26:02.680
这个呢

26:02.680 --> 26:04.680
每个公司的要求不一样

26:04.680 --> 26:05.680
每个公司的要求不一样

26:05.680 --> 26:06.680
有些公司呢

26:06.680 --> 26:07.680
他让你最后个属性呢

26:07.680 --> 26:09.680
最后个属性后面就不要加了

26:09.680 --> 26:11.680
有些公司那一边呢

26:11.680 --> 26:13.680
他为了就是对齐

26:13.680 --> 26:15.680
感觉上看上去就是更加

26:15.680 --> 26:16.680
怎么说

26:16.680 --> 26:17.680
他们自己规定

26:17.680 --> 26:18.680
就是符合美国

26:18.680 --> 26:19.680
他们自己的审美

26:19.680 --> 26:20.680
那么他可能会让你

26:20.680 --> 26:22.680
在最后一个属性后面加上dou号

26:22.680 --> 26:24.680
看不同公司的规定

26:24.680 --> 26:26.680
这个不用去纠结

26:26.680 --> 26:27.680
但是呢

26:27.680 --> 26:28.680
一定是有这么一套规则

26:28.680 --> 26:30.680
要加你就全部加

26:30.680 --> 26:31.680
要不加呢

26:31.680 --> 26:32.680
最后一个属性

26:32.680 --> 26:33.680
要么不加

26:33.680 --> 26:34.680
要加的话

26:34.680 --> 26:36.680
每一个地方最后一个属性都加

26:36.680 --> 26:38.680
要同意

26:38.680 --> 26:40.680
这是关于这一块

26:40.680 --> 26:42.680
好 再来个例子

26:42.680 --> 26:44.680
再来个例子

26:44.680 --> 26:46.680
我想想

26:46.680 --> 26:47.680
我想想

26:47.680 --> 26:53.020
这样子写

26:53.020 --> 26:55.020
这是一个用户

26:55.020 --> 26:57.020
一个用户

26:57.020 --> 26:59.020
然后呢

26:59.020 --> 27:01.020
这是第二个用户

27:01.020 --> 27:03.020
也是个对象

27:03.020 --> 27:04.020
第二个用户又是个对象

27:04.020 --> 27:06.020
第二个用户的

27:06.020 --> 27:10.030
这样子写

27:10.030 --> 27:12.030
account

27:12.030 --> 27:14.030
来自于

27:14.030 --> 27:16.030
第一个用户的account

27:16.030 --> 27:18.030
所以说能不能这样子写

27:18.030 --> 27:21.730
能不能这样子写

27:21.730 --> 27:22.730
好好想想

27:22.730 --> 27:23.730
我们都讲过的

27:23.730 --> 27:26.730
我问你的问题都是我们讲过的

27:26.730 --> 27:28.730
但是有些问题可能有些难度

27:28.730 --> 27:29.730
这个问题有些难度

27:29.730 --> 27:31.730
但是你要好好想一想

27:31.730 --> 27:33.730
按照我们之前讲过的知识

27:33.730 --> 27:35.730
当然我之前

27:35.730 --> 27:36.730
一定没有专门来说

27:36.730 --> 27:37.730
这个可以这样的复制

27:37.730 --> 27:38.730
或者是不可以这样的复制

27:38.730 --> 27:39.730
没有专门来说

27:39.730 --> 27:40.730
但是呢

27:40.730 --> 27:41.730
按照我之前讲的知识

27:41.730 --> 27:43.730
里面推导一下

27:43.730 --> 27:45.730
能不能这样子写

27:45.730 --> 27:46.730
你们不仅要说出

27:46.730 --> 27:47.730
能不能这样子写

27:47.730 --> 27:48.730
还要说出为什么

27:48.730 --> 27:50.730
是通过哪个知识推导出来的

27:50.730 --> 27:51.730
这就是逻辑

27:51.730 --> 27:53.730
在学生门口他是有计逻辑的

27:53.730 --> 28:00.620
好好想一想

28:00.620 --> 28:01.620
能不能

28:01.620 --> 28:03.620
是不是可以

28:03.620 --> 28:05.620
按照什么知识推导出来的

28:05.620 --> 28:08.620
首先读取属性能不能这样读

28:08.620 --> 28:10.620
这个是不是读属性

28:10.620 --> 28:11.620
对吧

28:11.620 --> 28:12.620
读属性

28:12.620 --> 28:13.620
属性

28:13.620 --> 28:15.620
这个属性是不是数据

28:15.620 --> 28:16.620
对不对

28:16.620 --> 28:18.620
它里面存了数据

28:18.620 --> 28:20.620
那么这个地方是不是数据

28:20.620 --> 28:22.620
说明这个帽号

28:22.620 --> 28:23.620
后面写的是什么

28:23.620 --> 28:24.620
写的是数据

28:24.620 --> 28:27.620
那么这个属性自然可以放到数据的位置

28:27.620 --> 28:29.620
这是我之前讲的哪个知识呢

28:29.620 --> 28:30.620
讲的当时讲辩量的时候

28:30.620 --> 28:31.620
对吧

28:31.620 --> 28:33.620
我说辩量可以放到

28:33.620 --> 28:35.620
任何需要数据的地方

28:35.620 --> 28:37.620
那这里的地方是不是数据

28:37.620 --> 28:38.620
这里不是辩量

28:38.620 --> 28:39.620
这里不是辩量

28:39.620 --> 28:40.620
这是属性

28:40.620 --> 28:42.620
这个问题好像不太加上

28:42.620 --> 28:43.620
sorry

28:43.620 --> 28:44.620
好像不太加上

28:44.620 --> 28:45.620
属性也是一样

28:45.620 --> 28:46.620
属性里面存的是数据

28:46.620 --> 28:47.620
对吧

28:47.620 --> 28:49.620
属性里面存的也是数据

28:49.620 --> 28:50.620
那么这个数据

28:50.620 --> 28:51.620
那么属性

28:51.620 --> 28:53.620
也可以放到任何出现数据的地方

28:53.620 --> 28:54.620
相当于是啥意思呢

28:54.620 --> 28:55.620
有一个

28:55.620 --> 28:56.620
第二个用户

28:56.620 --> 28:58.620
它有一个属性账号

28:58.620 --> 29:00.620
这个属性的值从哪里来了

29:00.620 --> 29:01.620
它的数据从哪里来了

29:01.620 --> 29:02.620
存什么数据呢

29:02.620 --> 29:05.620
它的数据来自于User1.account

29:05.620 --> 29:07.620
来自于这个数据

29:07.620 --> 29:08.620
原来这个意思

29:08.620 --> 29:10.620
好 那咱们来输出一下

29:10.620 --> 29:13.620
输出一下User1.account

29:13.620 --> 29:16.620
再输出一下User2.account

29:16.620 --> 29:17.620
你看

29:17.620 --> 29:19.620
两个账号是一样的

29:19.620 --> 29:20.620
保存

29:20.620 --> 29:25.090
这些写法非常非常灵活

29:25.090 --> 29:27.090
非常非常灵活

29:27.090 --> 29:28.090
好 你看

29:28.090 --> 29:29.090
两个都是ABC

29:30.090 --> 29:31.090
好 咱们再来

29:31.090 --> 29:32.090
再来

29:33.090 --> 29:35.090
那么现在我要输出

29:35.090 --> 29:36.090
我又继续输出了

29:36.090 --> 29:39.090
输出第二个用户的密码

29:39.090 --> 29:40.090
会输出啥

29:41.090 --> 29:42.090
会输出啥

29:43.090 --> 29:45.090
输出第二个用户的密码

29:45.090 --> 29:47.090
不要绕云了

29:48.090 --> 29:50.090
你刚才已经举过很多例子了

29:50.090 --> 29:51.090
输出啥

29:51.090 --> 29:52.090
输出undefend

29:52.090 --> 29:54.090
输出的是undefend

29:54.090 --> 29:56.090
第二个用户哪有密码

29:56.090 --> 29:57.090
没有密码这个属性

29:57.090 --> 29:59.090
密码属性只有第一个用户

29:59.090 --> 30:00.090
这个对象才有

30:00.090 --> 30:02.090
第二个用户是没有密码这个属性的

30:02.090 --> 30:04.090
没有密码这个属性

30:04.090 --> 30:07.090
好 这是关于这个点

30:07.090 --> 30:09.090
好 再来

30:09.090 --> 30:11.090
我能不能这样子写

30:11.090 --> 30:12.090
又来

30:13.090 --> 30:15.090
前面两个主持掉了

30:16.090 --> 30:17.090
比方说

30:17.090 --> 30:19.090
我能不能这样子写

30:19.090 --> 30:21.090
User2

30:21.090 --> 30:22.090
User2

30:23.090 --> 30:25.090
里边是一个空对象

30:25.090 --> 30:29.090
然后User2.adj

30:29.090 --> 30:32.090
等于User1.adj

30:32.090 --> 30:34.090
或者我换一个属性名字

30:34.090 --> 30:35.090
addr

30:36.090 --> 30:37.090
可不可以

30:37.090 --> 30:39.090
可不可以

30:39.090 --> 30:40.090
当然可以

30:40.090 --> 30:42.090
为什么不可以呢

30:42.090 --> 30:43.090
为什么不可以呢

30:43.090 --> 30:45.090
好 想一想这个道理

30:45.090 --> 30:47.090
User2是个空对象

30:47.090 --> 30:48.090
空对象

30:48.090 --> 30:50.090
能不能给他属性addr复制

30:50.090 --> 30:51.090
他没有这个属性

30:51.090 --> 30:53.090
但是这样子一复制

30:53.090 --> 30:55.090
是不是给他增加属性了

30:55.090 --> 30:56.090
给他增加属性了

30:56.090 --> 30:57.090
对吧

30:57.090 --> 30:58.090
给他添加了一个属性

30:58.090 --> 31:00.090
OK 那么就可以复制了

31:00.090 --> 31:01.090
就可以复制了

31:01.090 --> 31:02.090
然后呢

31:02.090 --> 31:03.090
他的指示啥呢

31:03.090 --> 31:04.090
给他复一个什么值呢

31:04.090 --> 31:05.090
什么数据呢

31:05.090 --> 31:07.090
把User1.adj

31:07.090 --> 31:08.090
拿出来

31:08.090 --> 31:10.090
把用户1.adj

31:10.090 --> 31:12.090
复制给User2.addr

31:12.090 --> 31:13.090
这个属性

31:13.090 --> 31:14.090
就这么简单

31:14.090 --> 31:15.090
就这么简单

31:15.090 --> 31:17.090
好 咱们来输出一下

31:17.090 --> 31:18.090
User2

31:18.090 --> 31:20.090
再输出一下User1

31:20.090 --> 31:21.090
看一下

31:21.090 --> 31:23.090
导致输出 反正输出

31:23.090 --> 31:25.090
保存看一下

31:25.090 --> 31:26.090
你看User2里面

31:26.090 --> 31:28.090
他只有一个属性

31:28.090 --> 31:30.090
addr

31:30.090 --> 31:31.090
下面这个不管

31:31.090 --> 31:32.090
下面这个不管

31:32.090 --> 31:33.090
以后你看属性里面

31:33.090 --> 31:34.090
反正看到那种浅

31:34.090 --> 31:36.090
这是个浅的红色对吧

31:36.090 --> 31:38.090
稍微有点就是

31:38.090 --> 31:39.090
单的红色

31:39.090 --> 31:40.090
稍微有点单的红色

31:40.090 --> 31:41.090
这种红色呢

31:41.090 --> 31:42.090
表示什么意思呢

31:42.090 --> 31:43.090
表示这个属性

31:43.090 --> 31:45.090
它是系统给你加的属性

31:45.090 --> 31:47.090
就是介绍这个

31:47.090 --> 31:49.090
浏览器环境给你加的属性

31:49.090 --> 31:50.090
你自己不用管

31:50.090 --> 31:52.090
这些属性就是一些

31:52.090 --> 31:53.090
深红色的属性

31:53.090 --> 31:54.090
才是我们自己写的属性

31:54.090 --> 31:55.090
看这个就行了

31:55.090 --> 31:56.090
你看

31:56.090 --> 31:57.090
整个addr

31:57.090 --> 31:58.090
这个对象里面

31:58.090 --> 31:59.090
只有一个属性

31:59.090 --> 32:00.090
addr

32:00.090 --> 32:02.090
整个User2对象里面

32:02.090 --> 32:03.090
它只有一个属性

32:03.090 --> 32:04.090
addr

32:04.090 --> 32:05.090
这个属性里面

32:05.090 --> 32:06.090
有两个属性

32:06.090 --> 32:08.090
City和Country

32:08.090 --> 32:09.090
然后另外一个对象

32:09.090 --> 32:10.090
User1对象里面

32:10.090 --> 32:12.090
它属性比较多

32:12.090 --> 32:14.090
是可以这样复制的

32:14.090 --> 32:16.090
这样子可以灵活使用

32:16.090 --> 32:17.090
可以灵活使用

32:17.090 --> 32:18.090
好

32:18.090 --> 32:19.090
咱们接下来

32:19.090 --> 32:21.090
拿一个小的练习

32:21.090 --> 32:22.090
练习来巩固一下

32:22.090 --> 32:23.090
这一块的知识

32:23.090 --> 32:24.090
这一块很重要

32:24.090 --> 32:25.090
这种对象各种各样的

32:25.090 --> 32:26.090
花式协法

32:26.090 --> 32:27.090
非常非常重要

32:27.090 --> 32:28.090
咱们首先来个练习

32:28.090 --> 32:29.090
好

32:29.090 --> 32:31.090
这里我先建个文件

32:33.090 --> 32:35.090
练习1

32:35.090 --> 32:37.460
别听没有

32:37.460 --> 32:38.460
好

32:38.460 --> 32:39.460
大家跟着做一遍

32:39.460 --> 32:41.460
把个需求说出来

32:41.460 --> 32:42.460
首先呢

32:42.460 --> 32:43.460
第一个

32:43.460 --> 32:44.460
定义一个

32:44.460 --> 32:45.460
定义一个

32:45.460 --> 32:47.460
就是

32:47.460 --> 32:48.460
变量

32:48.460 --> 32:49.460
存放

32:50.460 --> 32:51.460
存放对象

32:51.460 --> 32:52.460
存放对象

32:52.460 --> 32:54.460
对象里面包含哪些属性呢

32:54.460 --> 32:55.460
包含

32:55.460 --> 32:56.460
理称

32:56.460 --> 32:57.460
理称

32:57.460 --> 32:58.460
然后呢

32:58.460 --> 32:59.460
还有啥呢

32:59.460 --> 33:01.460
应该包含姓名吧

33:01.460 --> 33:02.460
姓名

33:02.460 --> 33:03.460
年龄

33:03.460 --> 33:04.460
姓别

33:04.460 --> 33:06.460
姓名年龄姓别

33:06.460 --> 33:07.460
然后呢

33:07.460 --> 33:08.460
还包含什么呢

33:09.460 --> 33:10.460
女朋友

33:10.460 --> 33:11.460
女朋友

33:11.460 --> 33:12.460
女朋友呢

33:12.460 --> 33:13.460
她里面又包含了

33:13.460 --> 33:14.460
姓名

33:14.460 --> 33:16.460
年龄

33:16.460 --> 33:17.460
姓别

33:17.460 --> 33:18.460
女朋友又包含了

33:18.460 --> 33:20.460
姓名年龄姓别

33:20.460 --> 33:21.460
这是一个变量

33:21.460 --> 33:22.460
定一个变量

33:22.460 --> 33:23.460
好

33:23.460 --> 33:24.460
再定一个变量

33:24.460 --> 33:26.460
定义一个变量

33:27.460 --> 33:28.460
然后呢

33:28.460 --> 33:30.460
她里面存放了对象

33:30.460 --> 33:32.460
又包含姓名

33:32.460 --> 33:35.460
年龄姓别

33:35.460 --> 33:37.460
然后也包含女朋友

33:37.460 --> 33:38.460
女朋友

33:39.460 --> 33:40.460
然后呢

33:40.460 --> 33:41.460
要求是

33:41.460 --> 33:43.460
当女朋友里边也有姓名

33:43.460 --> 33:44.460
年龄姓别对吧

33:44.460 --> 33:45.460
也有

33:45.460 --> 33:46.460
好

33:46.460 --> 33:47.460
两个变量

33:48.460 --> 33:49.460
女朋友

33:49.460 --> 33:51.460
和第一个

33:51.460 --> 33:53.460
变量的

33:53.460 --> 33:54.460
女朋友

33:56.460 --> 33:57.460
女朋友

33:57.460 --> 33:58.460
是一样的

33:58.460 --> 33:59.460
是一样的

33:59.460 --> 34:00.460
脚踏两只船嘛

34:00.460 --> 34:01.460
对吧

34:01.460 --> 34:02.460
背胎嘛

34:02.460 --> 34:03.460
云背 热背 冷背

34:03.460 --> 34:04.460
对吧

34:04.460 --> 34:05.460
背胎

34:05.460 --> 34:06.460
OK

34:06.460 --> 34:07.460
那两个女朋友是一样的

34:07.460 --> 34:08.460
好

34:08.460 --> 34:09.460
我们来如何来书写这个代码

34:09.460 --> 34:10.460
如何来书写

34:10.460 --> 34:11.460
好

34:11.460 --> 34:12.460
大家想一想

34:12.460 --> 34:13.460
最好是你先自己写一遍

34:13.460 --> 34:14.460
自己写一遍

34:14.460 --> 34:15.460
看你写出来什么样子

34:15.460 --> 34:16.460
然后再来听

34:16.460 --> 34:17.460
看一下我怎么写

34:17.460 --> 34:18.460
这样子效果是最好的

34:18.460 --> 34:19.460
就是我们有的时候

34:19.460 --> 34:21.460
在课堂上讲一些练习

34:21.460 --> 34:22.460
或者是

34:22.460 --> 34:24.460
出一些问题的话

34:24.460 --> 34:25.460
有两种形态

34:25.460 --> 34:27.460
一种是我给你写个代码

34:27.460 --> 34:28.460
让你告诉我

34:28.460 --> 34:30.460
它输出的结果是啥

34:30.460 --> 34:31.460
得到了结果是啥

34:31.460 --> 34:32.460
这个主要是考察你的

34:32.460 --> 34:35.460
与法理解和知识点的理解

34:35.460 --> 34:36.460
好 另外一种问题

34:36.460 --> 34:37.460
另外一种练习

34:37.460 --> 34:39.460
就是我给你出一个需求

34:39.460 --> 34:40.460
你把代码写出来

34:40.460 --> 34:42.460
这考验的是你的动手能力

34:42.460 --> 34:45.460
反而是考验动手能力的地方

34:45.460 --> 34:47.460
你最好了自己先写一遍

34:47.460 --> 34:48.460
不管你写成啥样

34:48.460 --> 34:49.460
写错都没关系

34:49.460 --> 34:51.460
但是你一定得写一遍

34:51.460 --> 34:52.460
写了一遍之后

34:52.460 --> 34:53.460
再来看我的

34:53.460 --> 34:54.460
我是怎么写的

34:54.460 --> 34:55.460
来对比一下

34:55.460 --> 34:56.460
好吧

34:56.460 --> 34:57.460
好 大家先写一遍

34:57.460 --> 34:58.460
暂停视频先写一遍

34:58.460 --> 35:00.460
然后我再给大家写

35:01.460 --> 35:03.460
好 那么接下来我来写

35:03.460 --> 35:04.460
第一个变量

35:04.460 --> 35:05.460
第一个变量

35:05.460 --> 35:06.460
比方说

35:06.460 --> 35:08.460
我们就用一个U字吧

35:08.460 --> 35:09.460
U字1

35:09.460 --> 35:10.460
定个变量名字

35:10.460 --> 35:11.460
第一个用户

35:11.460 --> 35:12.460
好 第一个用户

35:12.460 --> 35:14.460
我们给它定一个对象

35:14.460 --> 35:15.460
一个对象

35:15.460 --> 35:17.460
好 对象里边有哪些属性呢

35:17.460 --> 35:18.460
有姓名

35:18.460 --> 35:19.460
姓名的话

35:19.460 --> 35:20.460
我们可以用name

35:20.460 --> 35:21.460
name

35:21.460 --> 35:22.460
比方说成个

35:22.460 --> 35:23.460
对吧

35:23.460 --> 35:24.460
然后呢

35:24.460 --> 35:25.460
年纽

35:25.460 --> 35:27.460
年纽我们一般用 age

35:27.460 --> 35:28.460
表示年纽

35:28.460 --> 35:29.460
年纽 18岁

35:29.460 --> 35:30.460
年轻

35:30.460 --> 35:31.460
于是呢

35:31.460 --> 35:32.460
还有性别对吧

35:32.460 --> 35:33.460
尖刀

35:33.460 --> 35:34.460
蓝

35:34.460 --> 35:35.460
或者是用布尔都行

35:35.460 --> 35:36.460
都行

35:37.460 --> 35:38.460
好

35:38.460 --> 35:39.460
然后呢

35:39.460 --> 35:40.460
成个有个女朋友对吧

35:40.460 --> 35:42.460
女朋友

35:42.460 --> 35:44.460
注意单数

35:44.460 --> 35:45.460
这里还不是复苏

35:45.460 --> 35:46.460
还没有到复苏的时候

35:46.460 --> 35:47.460
以后呢我会说

35:47.460 --> 35:48.460
复苏的情况下

35:48.460 --> 35:50.460
如果成个有多个女朋友

35:50.460 --> 35:51.460
该怎么来表示

35:51.460 --> 35:52.460
以后我会说

35:52.460 --> 35:53.460
现在呢我们

35:53.460 --> 35:54.460
不考虑多个的情况

35:54.460 --> 35:55.460
只有一个

35:55.460 --> 35:56.460
只有一个

35:56.460 --> 35:57.460
还比较专一

35:57.460 --> 35:58.460
然后呢 后边呢

35:58.460 --> 35:59.460
女朋友是什么类型

35:59.460 --> 36:01.460
是什么类型

36:01.460 --> 36:03.460
女朋友是什么类型

36:03.460 --> 36:05.460
是不是还是一个对象

36:05.460 --> 36:06.460
对不对

36:06.460 --> 36:07.460
女朋友里边有这么多信息

36:07.460 --> 36:09.460
你用制服刷表示吗

36:09.460 --> 36:10.460
数字表示吗

36:10.460 --> 36:12.460
成个的女朋友是一个数字

36:12.460 --> 36:13.460
这怎么玩

36:13.460 --> 36:14.460
没法玩对吧

36:14.460 --> 36:15.460
所以说这里还得是一个对象

36:15.460 --> 36:17.460
还得是个对象

36:17.460 --> 36:19.460
成个的女朋友里边有哪些属性呢

36:19.460 --> 36:20.460
是不是有姓名

36:20.460 --> 36:22.460
还是有姓名

36:22.460 --> 36:23.460
还是有姓名

36:23.460 --> 36:24.460
姓名是咋呢

36:24.460 --> 36:26.460
比方说就随便写一个吧

36:26.460 --> 36:28.460
随便写个小花

36:29.460 --> 36:31.460
然后呢女朋友的年龄对吧

36:31.460 --> 36:33.460
女朋友的年龄比方说

36:33.460 --> 36:34.460
50岁

36:34.460 --> 36:35.460
好

36:35.460 --> 36:36.460
女朋友的性别

36:36.460 --> 36:37.460
性别

36:37.460 --> 36:38.460
当然是女对吧

36:38.460 --> 36:39.460
女

36:39.460 --> 36:40.460
OK

36:40.460 --> 36:41.460
是不是第一个对象就写好了

36:41.460 --> 36:42.460
对吧

36:42.460 --> 36:43.460
第一个对象就写好了

36:43.460 --> 36:44.460
当然我再说一次

36:44.460 --> 36:47.460
对象里边是可以签套很多的层次的

36:47.460 --> 36:49.460
那么这里边如果

36:49.460 --> 36:50.460
这girlfriend里边

36:50.460 --> 36:52.460
如果他还有别的男朋友

36:52.460 --> 36:53.460
比方说我们这里

36:53.460 --> 36:54.460
比方说地址吧

36:54.460 --> 36:55.460
家庭住址

36:55.460 --> 36:57.460
这里边是不是又可以签套一个对象

36:57.460 --> 36:58.460
对不对

36:58.460 --> 36:59.460
又可以签到一个对象

36:59.460 --> 37:01.460
可以签套很多的层次

37:01.460 --> 37:03.460
可以无限这样的签套

37:03.460 --> 37:04.460
好

37:04.460 --> 37:05.460
第一个对象就写好了

37:05.460 --> 37:06.460
接下来我们来写第二个对象

37:06.460 --> 37:07.460
第二个对象

37:07.460 --> 37:08.460
5

37:08.460 --> 37:09.460
User2

37:09.460 --> 37:10.460
User2

37:10.460 --> 37:12.460
Name

37:12.460 --> 37:13.460
Name

37:13.460 --> 37:14.460
比方说

37:14.460 --> 37:15.460
比方说邓哥

37:15.460 --> 37:16.460
邓哥

37:17.460 --> 37:18.460
邓哥

37:18.460 --> 37:19.460
A级

37:19.460 --> 37:20.460
A级

37:20.460 --> 37:21.460
比方说年龄

37:21.460 --> 37:22.460
对吧年龄

37:22.460 --> 37:23.460
53岁

37:24.460 --> 37:25.460
然后了金蛋

37:25.460 --> 37:26.460
金蛋

37:26.460 --> 37:27.460
男

37:27.460 --> 37:28.460
男

37:28.460 --> 37:29.460
好

37:29.460 --> 37:30.460
他也有女朋友

37:30.460 --> 37:31.460
他也有女朋友

37:31.460 --> 37:32.460
但是呢

37:32.460 --> 37:33.460
注意看

37:33.460 --> 37:34.460
他的女朋友

37:34.460 --> 37:35.460
和第一个变量的女朋友

37:35.460 --> 37:36.460
是一样的

37:36.460 --> 37:37.460
那你这里

37:37.460 --> 37:39.460
有没有必要全部重新写一遍呢

37:39.460 --> 37:40.460
有没有必要

37:40.460 --> 37:42.460
全部把这些属性重新写一遍呢

37:42.460 --> 37:44.460
没有这个必要

37:44.460 --> 37:45.460
其实呢也不能这样子

37:45.460 --> 37:46.460
重新写一遍

37:46.460 --> 37:47.460
我们下节课呢

37:47.460 --> 37:48.460
会详细的讲

37:48.460 --> 37:49.460
还会讲一下

37:49.460 --> 37:51.460
对象里边的一些东西

37:51.460 --> 37:52.460
这节课呢我们先了解

37:52.460 --> 37:53.460
这些语法规则

37:53.460 --> 37:54.460
我们没有必要

37:54.460 --> 37:55.460
再重新写一遍了

37:55.460 --> 37:56.460
我们可以怎么样呢

37:56.460 --> 37:58.460
可以直接把邓哥的女朋友

37:58.460 --> 37:59.460
拿过来对吧

37:59.460 --> 38:00.460
拿过来

38:00.460 --> 38:02.460
这样子形成一个

38:02.460 --> 38:03.460
三角关系对吧

38:03.460 --> 38:04.460
就完事了

38:04.460 --> 38:05.460
那么现在呢

38:05.460 --> 38:06.460
承哥的女朋友

38:06.460 --> 38:08.460
跟那个邓哥的女朋友

38:08.460 --> 38:09.460
是不一样的

38:09.460 --> 38:10.460
是不一样的

38:10.460 --> 38:12.460
我们这里换个变量名称吧

38:12.460 --> 38:13.460
承

38:13.460 --> 38:14.460
这是邓

38:14.460 --> 38:15.460
邓

38:15.460 --> 38:16.460
你看

38:16.460 --> 38:17.460
上课就有这个好处

38:17.460 --> 38:19.460
你随便举例对吧

38:19.460 --> 38:21.460
然后这里承

38:21.460 --> 38:22.460
承哥的女朋友拿过来

38:22.460 --> 38:24.460
给邓哥的女朋友复制

38:24.460 --> 38:25.460
就完事了

38:25.460 --> 38:26.460
对不对

38:26.460 --> 38:27.460
接下来我们来输出

38:27.460 --> 38:28.460
第三个

38:28.460 --> 38:30.460
输出

38:30.460 --> 38:31.460
输出啥呢

38:31.460 --> 38:32.460
输出

38:32.460 --> 38:35.460
承哥女朋友的

38:35.460 --> 38:37.460
姓名

38:37.460 --> 38:41.460
和邓哥女朋友的姓名

38:41.460 --> 38:42.460
好

38:42.460 --> 38:43.460
怎么来输出呢

38:43.460 --> 38:44.460
输出

38:44.460 --> 38:45.460
承

38:45.460 --> 38:46.460
点什么

38:46.460 --> 38:47.460
girlfriend

38:47.460 --> 38:48.460
然后什么呢

38:48.460 --> 38:50.460
点name

38:50.460 --> 38:52.460
输出的是承哥

38:52.460 --> 38:55.460
女朋友的姓名

38:55.460 --> 38:57.460
其实你在读代码的时候

38:57.460 --> 38:58.460
你完全可以把这个点

38:58.460 --> 38:59.460
读成常的

38:59.460 --> 39:00.460
读成

39:01.460 --> 39:03.460
他的什么什么的

39:03.460 --> 39:04.460
什么什么

39:04.460 --> 39:06.460
这样读就是很好理解了

39:07.460 --> 39:08.460
另一方面

39:08.460 --> 39:09.460
我们也可以输出

39:09.460 --> 39:11.460
邓哥的girlfriend

39:11.460 --> 39:13.460
name

39:13.460 --> 39:14.460
好

39:14.460 --> 39:15.460
您看一下

39:15.460 --> 39:19.930
F12

39:20.930 --> 39:21.930
你看是不是没问题

39:21.930 --> 39:22.930
没问题吧

39:23.930 --> 39:24.930
这是一种邪法

39:24.930 --> 39:25.930
当然还有另外一种邪法

39:25.930 --> 39:26.930
另外一种邪法

39:26.930 --> 39:28.930
而且就这里我先不复制

39:28.930 --> 39:29.930
这里我先不复制

39:29.930 --> 39:31.930
然后我在这边

39:31.930 --> 39:32.930
灯

39:32.930 --> 39:33.930
对

39:33.930 --> 39:35.930
就灯点girlfriend

39:35.930 --> 39:37.930
然后给他复制为

39:37.930 --> 39:39.930
承点girlfriend

39:39.930 --> 39:40.930
可不可以

39:40.930 --> 39:41.930
是不是也可以

39:41.930 --> 39:43.930
因为他没有这个属性

39:43.930 --> 39:44.930
没有这个属性

39:44.930 --> 39:45.930
你这样一复制

39:45.930 --> 39:46.930
是不是该加了这个属性了

39:46.930 --> 39:48.930
就该加了这个属性了

39:48.930 --> 39:49.930
你要的意思

39:49.930 --> 39:50.930
非常非常简单

39:50.930 --> 39:51.930
非常非常简单

39:51.930 --> 39:52.930
那么这样子

39:52.930 --> 39:53.930
这样子

39:53.930 --> 39:54.930
也可以完成复制

39:54.930 --> 39:56.930
也可以完成复制

39:56.930 --> 39:57.930
保存看一下

39:57.930 --> 39:59.930
是一样的效果

39:59.930 --> 40:01.930
一定要把这个程序理解

40:01.930 --> 40:02.930
一定要理解这个程序

40:02.930 --> 40:04.930
甭管这个对象写怎么复杂

40:04.930 --> 40:07.930
它的这些规则都不会变化的

40:07.930 --> 40:09.930
这是关于这一块

40:09.930 --> 40:10.930
就是

40:10.930 --> 40:13.930
如何来读取一个属性

40:13.930 --> 40:14.930
如何来更改一个属性

40:14.930 --> 40:15.930
还有一些

40:15.930 --> 40:16.930
当然属性不存在的时候

40:16.930 --> 40:18.930
会怎么样怎么样怎么样

40:18.930 --> 40:19.930
好 下一条

40:19.930 --> 40:20.930
下一条

40:21.930 --> 40:23.930
删除属性

40:23.930 --> 40:24.930
就有些属性

40:24.930 --> 40:26.930
可能将来不太需要了

40:26.930 --> 40:27.930
不太需要了

40:27.930 --> 40:28.930
想把它删除掉

40:28.930 --> 40:30.930
把这个属性删除掉

40:30.930 --> 40:31.930
怎么删除呢

40:31.930 --> 40:32.930
很简单

40:32.930 --> 40:33.930
使用这个语法

40:33.930 --> 40:35.930
一个新的语法了

40:35.930 --> 40:37.930
叫做Denet

40:37.930 --> 40:38.930
Denet

40:38.930 --> 40:40.930
就是属性

40:40.930 --> 40:42.930
编辆名

40:42.930 --> 40:44.930
第二属性名

40:44.930 --> 40:46.930
通过这个语法来删除属性

40:46.930 --> 40:48.930
前面写个关键字Denet

40:48.930 --> 40:50.930
Denet是单词什么意思

40:50.930 --> 40:51.930
就表示删除的意思

40:51.930 --> 40:53.930
删除一个属性就完事了

40:53.930 --> 40:55.930
比方说

40:55.930 --> 40:57.930
就这个地方

40:57.930 --> 41:00.930
后来他有了女朋友之后

41:00.930 --> 41:02.930
先第四部了

41:02.930 --> 41:04.930
女朋友

41:04.930 --> 41:07.930
然后就是

41:07.930 --> 41:09.930
与诚哥

41:09.930 --> 41:12.930
与邓哥分手了

41:12.930 --> 41:14.930
那么邓哥现在是不是没有女朋友了

41:14.930 --> 41:15.930
位置空出来了

41:15.930 --> 41:16.930
大家加油吧

41:16.930 --> 41:18.930
邓哥的女朋友现在位置空出来了

41:18.930 --> 41:20.930
女朋友与邓哥分手了

41:20.930 --> 41:21.930
那么这个时候怎么来操作呢

41:21.930 --> 41:22.930
是不是

41:22.930 --> 41:23.930
使用Denet

41:23.930 --> 41:25.930
把属性删掉了

41:25.930 --> 41:26.930
Denet

41:26.930 --> 41:28.930
邓哥的女朋友

41:28.930 --> 41:30.930
把属性删掉

41:30.930 --> 41:32.930
咱们再

41:32.930 --> 41:34.930
输出Denet

41:34.930 --> 41:36.930
Denet的对象

41:36.930 --> 41:38.930
删除属性之后再输出Denet的对象

41:38.930 --> 41:40.930
保存

41:40.930 --> 41:42.930
一开始两个都有女朋友都是小花

41:42.930 --> 41:44.930
后来

41:44.930 --> 41:46.930
破安了

41:46.930 --> 41:47.930
你怎么脚太凉

41:47.930 --> 41:48.930
你必须选一个

41:48.930 --> 41:50.930
然后就跟Denet分手了

41:50.930 --> 41:51.930
于是我们展开看一下

41:51.930 --> 41:53.930
邓哥里边是不是没有女朋友的属性了

41:53.930 --> 41:55.930
一开始是有的

41:55.930 --> 41:57.930
这属性就删除了

41:57.930 --> 41:59.930
当然你也可以这样来操作

41:59.930 --> 42:00.930
达到类似

42:00.930 --> 42:01.930
不是一样的效果

42:01.930 --> 42:03.930
达到类似的效果

42:03.930 --> 42:04.930
也可以这样操作

42:04.930 --> 42:05.930
Girlfriend

42:05.930 --> 42:07.930
把它设为Undefend

42:07.930 --> 42:08.930
所以也可以

42:08.930 --> 42:10.930
重新复制

42:10.930 --> 42:11.930
重新复制

42:11.930 --> 42:13.930
把它设作为Undefend

42:13.930 --> 42:14.930
那么看一下

42:14.930 --> 42:15.930
但是实际上是不一样的

42:15.930 --> 42:17.930
这两种做法是不一样的

42:17.930 --> 42:19.930
看一下

42:19.930 --> 42:20.930
那么邓哥里边

42:20.930 --> 42:21.930
你看

42:21.930 --> 42:22.930
是不是还有这个属性

42:22.930 --> 42:23.930
这个属性只不过它的值

42:23.930 --> 42:25.930
是Undefend

42:25.930 --> 42:26.930
只不过它的值

42:26.930 --> 42:28.930
是Undefend

42:28.930 --> 42:29.930
能理解吧

42:29.930 --> 42:30.930
这两种做法

42:30.930 --> 42:32.930
都能表示类似的意思

42:32.930 --> 42:33.930
但是不是完全一样

42:33.930 --> 42:35.930
一个是属性没了

42:35.930 --> 42:36.930
完全不存在了

42:36.930 --> 42:38.930
一个是属性还存在

42:38.930 --> 42:40.930
只是它的值变了

42:40.930 --> 42:41.930
那么我们以后

42:41.930 --> 42:43.930
比方说有些东西没了

42:43.930 --> 42:44.930
那么这个时候

42:44.930 --> 42:45.930
我们通常用啥呢

42:45.930 --> 42:47.930
通常用的是第二种

42:47.930 --> 42:48.930
就第一种了了解一下

42:48.930 --> 42:50.930
有这么个语法就行了

42:50.930 --> 42:52.930
但是我们通常用的是第二种

42:52.930 --> 42:53.930
第二种方式

42:53.930 --> 42:54.930
它的属性还存在

42:54.930 --> 42:55.930
只是它的值变了

42:55.930 --> 42:57.930
它们变得没有值了

42:57.930 --> 42:58.930
明白这个意思吧

42:58.930 --> 42:59.930
我们通常习惯上

42:59.930 --> 43:01.930
会使用第二种方式

43:01.930 --> 43:03.930
来表达

43:03.930 --> 43:04.930
这是关于这个

43:04.930 --> 43:06.930
如何来删除属性

43:06.930 --> 43:08.930
那么现在天家属性用啥

43:08.930 --> 43:09.930
天家属性呢

43:09.930 --> 43:10.930
就用这种方式

43:10.930 --> 43:12.930
就可以天家属性了

43:12.930 --> 43:13.930
然后删除属性呢

43:13.930 --> 43:14.930
用Delaise

43:14.930 --> 43:15.930
我们用的很少

43:15.930 --> 43:16.930
一般是重新更改属性值

43:16.930 --> 43:17.930
为Undefend

43:17.930 --> 43:19.930
读取属性没什么好说的

43:19.930 --> 43:21.930
那么

43:21.930 --> 43:23.930
下面还有一个点

43:23.930 --> 43:24.930
还有一个点

43:24.930 --> 43:28.430
就是

43:28.430 --> 43:31.430
特殊的

43:31.430 --> 43:33.430
属性

43:33.430 --> 43:35.430
属性读取方式

43:35.430 --> 43:37.430
刚才在说

43:37.430 --> 43:38.430
读取属性的时候

43:38.430 --> 43:40.430
其实我当时

43:40.430 --> 43:41.430
脑袋里面想了一下

43:41.430 --> 43:42.430
要不在当时讲

43:42.430 --> 43:43.430
算了算了

43:43.430 --> 43:45.430
我们后面还是单独打出来说吧

43:45.430 --> 43:47.430
就是特殊的属性读取方式

43:47.430 --> 43:49.430
这种方式叫做

43:49.430 --> 43:50.430
属性表达式

43:50.430 --> 43:51.430
我们后边会

43:51.430 --> 43:53.430
详细的讲表达式的概念

43:53.430 --> 43:54.430
现在有这么一个印象

43:54.430 --> 43:55.430
有这么个词就行了

43:55.430 --> 43:57.430
我们知道他怎么去写就行了

43:57.430 --> 43:59.430
就属性表达式

43:59.430 --> 44:00.430
它是什么意思呢

44:00.430 --> 44:02.430
它指的是这么一种读取

44:02.430 --> 44:04.430
读取

44:04.430 --> 44:05.430
就设置

44:05.430 --> 44:06.430
就复辞

44:06.430 --> 44:08.430
给属性复辞

44:08.430 --> 44:10.430
复辞

44:10.430 --> 44:12.430
或读取属性时

44:12.430 --> 44:14.430
读取属性时

44:14.430 --> 44:16.430
可以使用

44:16.430 --> 44:19.430
下面的格式

44:19.430 --> 44:20.430
来操作

44:20.430 --> 44:21.430
什么格式来操作呢

44:21.430 --> 44:22.430
就这种格式

44:22.430 --> 44:24.430
就是变量名

44:24.430 --> 44:25.430
变量名

44:25.430 --> 44:28.940
也叫做变量对象

44:28.940 --> 44:30.940
就是变量里面存了个对象

44:30.940 --> 44:34.380
我们可以把它叫做对象变量

44:34.380 --> 44:35.380
对象变量

44:35.380 --> 44:38.380
变量后面加上一个中扩号

44:38.380 --> 44:40.380
加上一个中扩号

44:40.380 --> 44:43.380
这个中扩号里面写上一个制服串

44:43.380 --> 44:46.380
这个制服串里面写上属性名

44:46.380 --> 44:48.380
也行

44:48.380 --> 44:50.380
这样子读取属性也好

44:50.380 --> 44:52.380
复辞属性也好

44:52.380 --> 44:53.380
也可以

44:53.380 --> 44:54.380
没有任何问题

44:54.380 --> 44:55.380
没有任何问题

44:55.380 --> 44:57.380
这叫做属性表达式

44:57.380 --> 44:59.380
用这种方式来读取属性

44:59.380 --> 45:01.380
叫做属性表达式

45:01.380 --> 45:02.380
比方说

45:02.380 --> 45:04.380
举个例子

45:04.380 --> 45:06.380
我们先开个一面吧

45:06.380 --> 45:08.380
再来一个

45:10.380 --> 45:11.380
比方说

45:11.380 --> 45:12.380
这里还是个用户吧

45:12.380 --> 45:13.380
还是个用户

45:13.380 --> 45:15.380
这个用户里面

45:15.380 --> 45:19.390
我们现在用属性

45:19.390 --> 45:21.390
用属性表达式

45:21.390 --> 45:23.390
读取

45:23.390 --> 45:25.390
用户的

45:25.390 --> 45:27.390
就是

45:27.390 --> 45:28.390
密码

45:28.390 --> 45:30.390
或者是性别属性

45:30.390 --> 45:32.390
好看怎么来读

45:32.390 --> 45:34.390
用属性表达式来读

45:34.390 --> 45:36.390
之前我们是怎么读的呢

45:36.390 --> 45:38.390
之前是User.jn

45:38.390 --> 45:39.390
对不对

45:39.390 --> 45:41.390
用这种方式来读的

45:41.390 --> 45:43.390
那么现在我们可以用属性表达式

45:43.390 --> 45:45.390
用另外一种方式来读

45:45.390 --> 45:47.390
达到一样的效果

45:47.390 --> 45:49.390
完全一样的效果

45:49.390 --> 45:51.390
下面我们把注射掉

45:51.390 --> 45:53.390
对比一下大家

45:53.390 --> 45:55.390
可以这样的写User.jn

45:55.390 --> 45:57.390
两个中扩号

45:57.390 --> 45:59.390
然后中扩号里边写上

45:59.390 --> 46:01.390
一个字幕串

46:01.390 --> 46:03.390
因为属性的名字

46:03.390 --> 46:05.390
它一定是字幕串

46:05.390 --> 46:07.390
你看它是一个文本

46:07.390 --> 46:09.390
属性的名字是一个文本

46:09.390 --> 46:11.390
你可以把它当成一个字幕串

46:11.390 --> 46:13.390
因此这里

46:13.390 --> 46:15.390
我们在字幕串里边

46:15.390 --> 46:17.390
写上属性的名字

46:17.390 --> 46:18.390
你看

46:18.390 --> 46:20.390
我们用这样的方式来读属性

46:20.390 --> 46:21.390
也可以

46:21.390 --> 46:23.390
这种读属性的方式

46:23.390 --> 46:25.390
叫做属性表达式

46:25.390 --> 46:27.390
属性表达式

46:27.390 --> 46:29.390
有的时候这个东西非常管用

46:29.390 --> 46:31.390
非常非常管用

46:31.390 --> 46:33.390
我们来看一下

46:34.390 --> 46:35.390
输出

46:35.390 --> 46:36.390
你看是不是读出来了

46:36.390 --> 46:37.390
对吧

46:37.390 --> 46:39.390
当然如果你读的属性不存在的话

46:39.390 --> 46:41.390
是不是一样的道理

46:41.390 --> 46:42.390
读的属性不存在的话

46:42.390 --> 46:43.390
是不是得到undefend的

46:43.390 --> 46:44.390
对吧

46:44.390 --> 46:45.390
得到undefend的

46:45.390 --> 46:46.390
是一样的

46:46.390 --> 46:48.390
只是写法上编的

46:48.390 --> 46:49.390
注意格式

46:49.390 --> 46:50.390
一定要注意格式

46:50.390 --> 46:51.390
注意

46:51.390 --> 46:52.390
这里是个字服串

46:52.390 --> 46:54.390
字服串

46:54.390 --> 46:57.390
这里就可以玩很多花样出来了

46:57.390 --> 47:00.390
这里填的是一个字服串

47:00.390 --> 47:02.390
那就意味着

47:02.390 --> 47:04.390
这里是不是数据

47:04.390 --> 47:06.390
填的是一个字服串数据

47:06.390 --> 47:09.390
我能不能把这个字服串

47:09.390 --> 47:13.390
保存到一个变量里边

47:13.390 --> 47:15.390
保存到一个变量里边

47:15.390 --> 47:17.390
然后把变量放过来了

47:17.390 --> 47:19.390
可不可以呢

47:19.390 --> 47:20.390
回忆一下我们之前咋说的

47:20.390 --> 47:22.390
商业课咋说的

47:22.390 --> 47:25.390
变量可以出现在任何

47:25.390 --> 47:27.390
需要数据的地方

47:27.390 --> 47:29.390
这是不是数据

47:29.390 --> 47:30.390
是不是数据

47:30.390 --> 47:31.390
当然是数据对吧

47:31.390 --> 47:32.390
当然是数据

47:32.390 --> 47:34.390
于是这里能不能放变量

47:34.390 --> 47:35.390
可以啊

47:35.390 --> 47:36.390
什么意思

47:36.390 --> 47:38.390
把这个变量的值

47:38.390 --> 47:40.390
把变量里边存的东西

47:40.390 --> 47:41.390
存到啥

47:41.390 --> 47:42.390
存到这个东西拿出来

47:42.390 --> 47:44.390
放到这个位置

47:44.390 --> 47:45.390
是这个意思吧

47:45.390 --> 47:47.390
保存看一下

47:47.390 --> 47:48.390
是不是还是读出来了

47:48.390 --> 47:49.390
还是读出来了

47:49.390 --> 47:51.390
明白这个意思吗

47:51.390 --> 47:52.390
好

47:52.390 --> 47:53.390
那么大家看一下啊

47:53.390 --> 47:55.390
看一下

47:55.390 --> 47:57.390
这里前后两表

47:57.390 --> 48:00.390
现在能不能加双引号

48:00.390 --> 48:03.390
现在能不能加双引号

48:03.390 --> 48:05.390
如果现在加了这个双引号

48:05.390 --> 48:07.390
就表示什么意思呢

48:07.390 --> 48:09.390
这是读取用户的属性

48:09.390 --> 48:10.390
哪个属性呢

48:10.390 --> 48:13.390
属性的名字叫做PROP

48:13.390 --> 48:15.390
属性的名字有没有PROP

48:15.390 --> 48:16.390
是没有

48:16.390 --> 48:17.390
对吧

48:17.390 --> 48:19.390
那么现在输出的是啥

48:19.390 --> 48:20.390
输出的是啥

48:20.390 --> 48:21.390
一定要注意哦

48:21.390 --> 48:23.390
这里容易出面识题哦

48:23.390 --> 48:25.390
我们在课程上一般不会讲面识题

48:25.390 --> 48:27.390
我们后边会专门拿时间

48:27.390 --> 48:29.390
专门的课程来讲面识题

48:29.390 --> 48:30.390
但是有的时候

48:30.390 --> 48:31.390
我在强调某个东西的时候

48:31.390 --> 48:33.390
就告诉你这个地方面识题容易考

48:33.390 --> 48:34.390
容易考

48:34.390 --> 48:36.390
这里容易出面识题哦

48:36.390 --> 48:38.390
像这样子输出的结果是undefine

48:38.390 --> 48:39.390
为什么

48:39.390 --> 48:41.390
用户里边读哪个属性

48:41.390 --> 48:43.390
这里是个字符串嘛

48:43.390 --> 48:45.390
读的是属性的名字叫做PROP

48:45.390 --> 48:47.390
这里边没有PROP这个属性

48:47.390 --> 48:49.390
prob表示property表示属性的意思

48:49.390 --> 48:51.390
没有PROP这个单词

48:51.390 --> 48:52.390
就是个属性

48:52.390 --> 48:54.390
所以说得到的是undefine

48:54.390 --> 48:56.390
但是如果我把双引号去了

48:56.390 --> 48:58.390
表示什么意思呢

48:58.390 --> 49:00.390
表示的是这里边使用的是变量

49:00.390 --> 49:01.390
使用的是变量

49:01.390 --> 49:03.390
把变量的值拿出来

49:03.390 --> 49:04.390
这个变量的值是什么

49:04.390 --> 49:05.390
jandar

49:05.390 --> 49:07.390
对吧 它的值是jandar

49:07.390 --> 49:08.390
读取的是啥呢

49:08.390 --> 49:11.390
读取的是用户jandar这个属性

49:11.390 --> 49:14.390
读取的是用户jandar这个属性

49:14.390 --> 49:15.390
你看

49:15.390 --> 49:16.390
读的是啥呢

49:16.390 --> 49:17.390
读的是这个属性的对吧

49:17.390 --> 49:18.390
读的是这个属性的

49:18.390 --> 49:20.390
所以说这个就能读出来

49:20.390 --> 49:22.390
好 这样子好处在哪呢

49:22.390 --> 49:23.390
这样子好处在于

49:23.390 --> 49:25.390
我们这一个代码可以保持不动

49:25.390 --> 49:27.390
我们只需要改这里就行了

49:27.390 --> 49:30.390
比方说我要改成ease VIP

49:30.390 --> 49:32.390
改这个属性

49:32.390 --> 49:33.390
保存一下

49:33.390 --> 49:35.390
它就变成了读取的是

49:35.390 --> 49:37.390
是否是VIP用户

49:37.390 --> 49:39.390
比方说我们把它改成

49:39.390 --> 49:41.390
而dress

49:41.390 --> 49:43.390
保存看一下

49:43.390 --> 49:45.390
变成这样子了

49:45.390 --> 49:47.390
变成了地址了

49:47.390 --> 49:48.390
变成地址了

49:48.390 --> 49:49.390
改成

49:49.390 --> 49:51.390
改成

49:51.390 --> 49:53.390
保存看一下

49:53.390 --> 49:54.390
变成了账号了

49:54.390 --> 49:55.390
你看

49:55.390 --> 49:56.390
就非常的灵活

49:56.390 --> 49:57.390
以后我们这种

49:57.390 --> 49:58.390
当然现在你可能体会不到

49:58.390 --> 50:00.390
这个灵活在什么地方

50:00.390 --> 50:02.390
以后我们再有些地方

50:02.390 --> 50:04.390
再有些地方就要用到这个地方

50:04.390 --> 50:05.390
就要用到这个知识

50:05.390 --> 50:06.390
现在一定要记住

50:06.390 --> 50:08.390
可以用这种属性的方式来读

50:08.390 --> 50:10.390
这要属性表达是

50:10.390 --> 50:12.390
那能不能用这个原来的方式

50:12.390 --> 50:14.390
来达到类似的效果了

50:14.390 --> 50:15.390
不能

50:15.390 --> 50:16.390
为什么不能

50:16.390 --> 50:18.390
我们来看一下吧

50:18.390 --> 50:20.390
如果用原来的方式来

50:20.390 --> 50:21.390
来做的话

50:21.390 --> 50:23.390
你看一下会怎么来写单

50:24.390 --> 50:26.390
看一下这里面

50:26.390 --> 50:28.390
这种格式就不一样了

50:28.390 --> 50:30.390
这种格式你是不能

50:30.390 --> 50:31.390
这样子写的

50:31.390 --> 50:33.390
这样子写不满足语法的

50:33.390 --> 50:34.390
不满足语法的

50:34.390 --> 50:35.390
这里不是字不错

50:35.390 --> 50:37.390
这里是直接输写属性名

50:37.390 --> 50:38.390
它也不是辩量

50:38.390 --> 50:39.390
也不是辩量的意思

50:39.390 --> 50:40.390
它就是属性的名字

50:40.390 --> 50:42.390
直接输写到后边

50:42.390 --> 50:43.390
所以说你咋写了

50:43.390 --> 50:44.390
你没法写

50:44.390 --> 50:46.390
你把PROP写过来行吗

50:46.390 --> 50:47.390
不行

50:47.390 --> 50:48.390
它表示啥意思呢

50:48.390 --> 50:49.390
这样子写

50:49.390 --> 50:51.390
表示的是读取用户的属性名

50:51.390 --> 50:53.390
为PROP的属性

50:53.390 --> 50:56.390
读取用户名字为PROP的属性

50:56.390 --> 50:57.390
它不是指的辩量

50:57.390 --> 50:58.390
这里是写的是

50:58.390 --> 50:59.390
直接写的是属性名

50:59.390 --> 51:00.390
你看之前这里

51:00.390 --> 51:02.390
有没有辩量间断吗

51:02.390 --> 51:03.390
是没有

51:03.390 --> 51:04.390
没有辩量间断吧

51:04.390 --> 51:06.390
它读的是属性的名字间断

51:06.390 --> 51:08.390
所以说你要用辩量

51:08.390 --> 51:10.390
来代表属性名字的话

51:10.390 --> 51:11.390
只能使用第二种方式

51:11.390 --> 51:13.390
属性表达式

51:13.390 --> 51:15.390
明白这个意思吗

51:15.390 --> 51:16.390
明白这个意思吗

51:16.390 --> 51:17.390
OK

51:17.390 --> 51:19.390
这是关于属性表达式

51:19.390 --> 51:21.390
这一块我们再多讲一点

51:21.390 --> 51:23.390
因为这一块很重要

51:23.390 --> 51:24.390
后边

51:24.390 --> 51:25.390
约往后边学

51:25.390 --> 51:26.390
我们这种做法

51:26.390 --> 51:28.390
可能用的就越频繁

51:29.390 --> 51:30.390
属性表达式

51:30.390 --> 51:31.390
当然我们平时

51:31.390 --> 51:32.390
一般来说

51:32.390 --> 51:33.390
直接读一个属性

51:33.390 --> 51:34.390
没有什么

51:34.390 --> 51:35.390
特别的稍稍做的话

51:35.390 --> 51:37.390
我们一般就是直接使用

51:37.390 --> 51:38.390
对象名

51:38.390 --> 51:39.390
属性名

51:39.390 --> 51:40.390
但是有的时候出现一些

51:40.390 --> 51:41.390
特殊的情况

51:41.390 --> 51:42.390
我们可能要用属性表达式

51:44.390 --> 51:45.390
我们一个个说

51:45.390 --> 51:46.390
哪些情况要会用到

51:46.390 --> 51:48.390
属性表达式呢

51:48.390 --> 51:49.390
我们一个个说

51:51.390 --> 51:52.390
属性表达式

51:52.390 --> 51:54.390
可能会遇到这么一些情况

51:54.390 --> 51:57.390
就是某些属性名

51:57.390 --> 51:58.390
属性名中

51:58.390 --> 51:59.390
包含

51:59.390 --> 52:01.390
特殊制服

52:01.390 --> 52:02.390
这啥意思呢

52:02.390 --> 52:03.390
属性名呢

52:03.390 --> 52:05.390
严格意义上来说

52:05.390 --> 52:06.390
它也是我们

52:06.390 --> 52:07.390
上节课讲的

52:07.390 --> 52:08.390
标志服

52:08.390 --> 52:10.390
它也是标志服

52:10.390 --> 52:11.390
它也要满足命名规范

52:11.390 --> 52:12.390
对吧

52:12.390 --> 52:13.390
属性名字呢

52:13.390 --> 52:14.390
它不能什么

52:14.390 --> 52:15.390
不能以跟他们

52:15.390 --> 52:16.390
关键字重复

52:16.390 --> 52:17.390
不能跟那个

52:17.390 --> 52:18.390
保留字重复

52:18.390 --> 52:19.390
不能跟那个

52:19.390 --> 52:20.390
什么

52:20.390 --> 52:21.390
不能以数字开头

52:21.390 --> 52:22.390
等等等等

52:22.390 --> 52:23.390
不能包含一些特殊制服

52:23.390 --> 52:25.390
规定要求外

52:25.390 --> 52:26.390
的一些特殊制服

52:26.390 --> 52:27.390
不能包含

52:27.390 --> 52:28.390
它有些要求

52:28.390 --> 52:29.390
但是呢

52:29.390 --> 52:31.390
属性这里比较特殊

52:31.390 --> 52:33.390
实际上

52:33.390 --> 52:36.390
介绍对属性名的

52:36.390 --> 52:39.390
就是取名

52:39.390 --> 52:42.390
属性名的命名

52:42.390 --> 52:44.390
命名

52:44.390 --> 52:48.390
并不严格

52:48.390 --> 52:49.390
命名要求

52:49.390 --> 52:51.390
并不严格

52:51.390 --> 52:52.390
不严格

52:52.390 --> 52:54.390
属性可以是

52:54.390 --> 52:57.390
任何形式的名字

52:57.390 --> 52:59.390
任何形式的名字

52:59.390 --> 53:01.390
哪怕是一个问号都可以

53:01.390 --> 53:02.390
都可以

53:02.390 --> 53:04.390
属性可以是任何形式的名字

53:04.390 --> 53:05.390
好 咱们来看一下

53:05.390 --> 53:06.390
再看一下

53:08.390 --> 53:09.390
这里

53:09.390 --> 53:11.390
好 这里我们新建个一面吧

53:11.390 --> 53:12.390
新建个

53:12.390 --> 53:13.390
比方说

53:13.390 --> 53:15.390
我这里就随便写个对象了

53:15.390 --> 53:18.700
OB界

53:18.700 --> 53:19.700
我们通常一个没有意义的对象

53:19.700 --> 53:21.700
我们就把它叫做OB界

53:21.700 --> 53:22.700
OB界个什么

53:22.700 --> 53:23.700
表示对象的意思

53:23.700 --> 53:24.700
好 比方说

53:24.700 --> 53:26.700
对象里边

53:26.700 --> 53:28.700
有一个属性名

53:28.700 --> 53:30.700
这个没问题吧

53:30.700 --> 53:31.700
没问题 对吧

53:31.700 --> 53:32.700
这个属性很简单

53:32.700 --> 53:34.700
这个名字是没问题的

53:34.700 --> 53:36.700
有另外一个属性

53:36.700 --> 53:37.700
有另外一个属性

53:37.700 --> 53:38.700
它那个属性名字

53:38.700 --> 53:40.700
叫做一个问号

53:40.700 --> 53:41.700
一个问号

53:41.700 --> 53:43.700
456

53:43.700 --> 53:45.700
这样子写属性名可不可以

53:45.700 --> 53:46.700
不不行

53:46.700 --> 53:48.700
你直接书写这样的属性名

53:48.700 --> 53:49.700
是不行的

53:49.700 --> 53:51.700
但是我们刚才说了

53:51.700 --> 53:52.700
在介事里边

53:52.700 --> 53:53.700
它对属性的要求

53:53.700 --> 53:54.700
没有那么严格

53:54.700 --> 53:55.700
它比较松散

53:55.700 --> 53:56.700
实际上属性

53:56.700 --> 53:58.700
是可以使任何形式的名字

53:58.700 --> 54:00.700
可以使任何形式的名字

54:00.700 --> 54:01.700
那如果你要对一些属性

54:01.700 --> 54:03.700
用特殊的名字来命名

54:03.700 --> 54:04.700
怎么办呢

54:04.700 --> 54:05.700
非常简单

54:05.700 --> 54:08.700
你给这个属性名字

54:08.700 --> 54:11.700
前后加上双一号

54:11.700 --> 54:12.700
把这个属性的名字

54:12.700 --> 54:13.700
变成一个制服创

54:13.700 --> 54:15.700
就完事了

54:15.700 --> 54:16.700
也就是说

54:16.700 --> 54:17.700
这个地方

54:17.700 --> 54:18.700
它不是一个合格的标志服

54:18.700 --> 54:20.700
不是一个合格的标志服

54:20.700 --> 54:21.700
但是呢

54:21.700 --> 54:23.700
介事它又很宽松

54:23.700 --> 54:24.700
对属性的名字

54:24.700 --> 54:25.700
要求很宽松

54:25.700 --> 54:26.700
如果你要另一些

54:26.700 --> 54:27.700
特殊的符号

54:27.700 --> 54:28.700
特殊的文字

54:28.700 --> 54:29.700
来进行命名的话

54:29.700 --> 54:30.700
那么

54:30.700 --> 54:31.700
请你给这个属性名

54:31.700 --> 54:32.700
前后加上双一号

54:32.700 --> 54:33.700
当然

54:33.700 --> 54:34.700
这个属性也可以

54:34.700 --> 54:35.700
前后加上双一号

54:35.700 --> 54:36.700
也可以加

54:36.700 --> 54:37.700
这样子呢

54:37.700 --> 54:38.700
我们就可以

54:38.700 --> 54:39.700
特殊的制服

54:39.700 --> 54:40.700
来给属性命名了

54:40.700 --> 54:41.700
以后呢

54:41.700 --> 54:42.700
我们这样做

54:42.700 --> 54:43.700
会有一些好处

54:43.700 --> 54:44.700
会有一些好处

54:44.700 --> 54:45.700
包括我们

54:45.700 --> 54:46.700
后面还会学到

54:46.700 --> 54:47.700
数组

54:47.700 --> 54:48.700
数组那一块

54:48.700 --> 54:49.700
比方说

54:49.700 --> 54:50.700
这里呢

54:50.700 --> 54:51.700
我们加上一个

54:51.700 --> 54:52.700
随便写

54:52.700 --> 54:53.700
详咋写就咋写

54:53.700 --> 54:54.700
随便写

54:55.700 --> 54:56.700
咱们来输出一下

54:56.700 --> 54:57.700
欧币界

54:57.700 --> 54:58.700
看一下

54:59.700 --> 55:00.700
保存

55:00.700 --> 55:01.700
这也是

55:01.700 --> 55:02.700
GS跟浅多其他

55:02.700 --> 55:03.700
远不太一样的地方

55:03.700 --> 55:04.700
保存

55:04.700 --> 55:05.700
我们运行出来看一下

55:05.700 --> 55:08.850
F12

55:09.850 --> 55:10.850
你看

55:11.850 --> 55:12.850
能读到这个属性

55:12.850 --> 55:13.850
仍然有这个属性

55:13.850 --> 55:14.850
你看呗

55:14.850 --> 55:15.850
仍然有这个属性

55:15.850 --> 55:16.850
你看它的字尾

55:16.850 --> 55:17.850
456

55:17.850 --> 55:18.850
这是它的属性名字

55:18.850 --> 55:19.850
别怪这个属性名字

55:19.850 --> 55:20.850
不奇怪吧

55:20.850 --> 55:21.850
它仍然有这个属性名字

55:21.850 --> 55:23.850
仍然有这个属性名字

55:23.850 --> 55:24.850
好

55:24.850 --> 55:25.850
那么你想一想

55:25.850 --> 55:26.850
我要读这个属性名字

55:26.850 --> 55:27.850
你咋读

55:27.850 --> 55:28.850
你咋读

55:28.850 --> 55:30.850
你能这样子写吗

55:30.850 --> 55:31.850
你还能这样子写吗

55:31.850 --> 55:32.850
这样子写

55:32.850 --> 55:33.850
语法都不对了

55:33.850 --> 55:34.850
对吧

55:34.850 --> 55:35.850
语法都不对了

55:35.850 --> 55:36.850
只有正确的

55:36.850 --> 55:37.850
属性的名字

55:37.850 --> 55:38.850
是一个正确的

55:38.850 --> 55:39.850
标志符的时候

55:39.850 --> 55:40.850
什么

55:40.850 --> 55:41.850
以什么Dollar

55:41.850 --> 55:42.850
下滑线

55:42.850 --> 55:43.850
字母开头

55:43.850 --> 55:44.850
对吧

55:44.850 --> 55:45.850
之前有同学在问

55:45.850 --> 55:46.850
就是说

55:46.850 --> 55:47.850
变量名字

55:47.850 --> 55:48.850
标志符

55:48.850 --> 55:49.850
英文

55:49.850 --> 55:50.850
实际上是可以写的

55:50.850 --> 55:51.850
实际上是可以写的

55:51.850 --> 55:53.850
比方说对象

55:53.850 --> 55:54.850
实际上是可以写的

55:54.850 --> 55:56.850
但是

55:56.850 --> 55:57.850
不准这样子写

55:57.850 --> 55:58.850
你不准给我这样子写

55:58.850 --> 56:00.850
全世界没有人这么去干的

56:00.850 --> 56:02.850
你不要给我当一朵奇葩

56:02.850 --> 56:03.850
不要去这样子写

56:03.850 --> 56:04.850
没有这么干的

56:04.850 --> 56:05.850
为什么呢

56:05.850 --> 56:06.850
因为全世界有个约定

56:06.850 --> 56:07.850
都用英文

56:07.850 --> 56:08.850
英文是每个国家

56:08.850 --> 56:09.850
都多多少少

56:09.850 --> 56:11.850
都有点都是普及的

56:11.850 --> 56:12.850
它的普及范围很广

56:12.850 --> 56:13.850
而且

56:13.850 --> 56:14.850
你就这样的好处在于什么呢

56:14.850 --> 56:15.850
你写的代码

56:15.850 --> 56:17.850
哪怕交给国外的人看

56:17.850 --> 56:18.850
他看不懂诸事吧

56:18.850 --> 56:19.850
你诸事可能用的中文

56:19.850 --> 56:20.850
但是他能代码

56:20.850 --> 56:21.850
他是能看懂的

56:21.850 --> 56:22.850
你刚写的中文

56:22.850 --> 56:23.850
他就完全看不懂了

56:23.850 --> 56:24.850
不要这样

56:24.850 --> 56:25.850
不要去写中文

56:25.850 --> 56:26.850
不能这样去干

56:27.850 --> 56:28.850
你看现在

56:28.850 --> 56:29.850
我们用正常的

56:29.850 --> 56:31.850
属性的读取方式

56:31.850 --> 56:32.850
是不是读不出来了

56:32.850 --> 56:33.850
这样子写

56:33.850 --> 56:34.850
语法都不满足了

56:34.850 --> 56:35.850
因此咋办呢

56:35.850 --> 56:38.850
这里只能用属性表达式

56:39.850 --> 56:40.850
只能用属性表达式的

56:40.850 --> 56:41.850
你看

56:41.850 --> 56:42.850
这个地方是不是

56:42.850 --> 56:43.850
只能用属性表达式

56:43.850 --> 56:44.850
还能用啥呢

56:44.850 --> 56:45.850
对不对

56:45.850 --> 56:46.850
就没办法了

56:46.850 --> 56:47.850
保存看一下

56:47.850 --> 56:48.850
读出来了

56:48.850 --> 56:49.850
456

56:49.850 --> 56:51.850
这就是属性表达式的

56:51.850 --> 56:52.850
一些应用场景

56:53.850 --> 56:54.850
有的时候

56:54.850 --> 56:55.850
比方说我给大家属性名字

56:55.850 --> 56:56.850
一样的道理

56:56.850 --> 56:57.850
给属性的名字

56:58.850 --> 57:00.850
属性的名字叫0

57:03.850 --> 57:05.850
属性名字这里写0

57:05.850 --> 57:07.850
倒是它允许

57:07.850 --> 57:08.850
在某些就是

57:08.850 --> 57:09.850
在现在的浏览器里边

57:09.850 --> 57:11.850
它都允许你这样子写了

57:11.850 --> 57:12.850
它都允许你这样子写了

57:12.850 --> 57:14.850
但是你心里边要知道

57:15.850 --> 57:16.850
这个属性的名字

57:16.850 --> 57:17.850
它不能是数字

57:17.850 --> 57:18.850
它一定不是数字

57:18.850 --> 57:19.850
属性的名字

57:19.850 --> 57:21.850
是不可能是数字的

57:22.850 --> 57:23.850
一定要记一笔

57:23.850 --> 57:24.850
记一笔

57:24.850 --> 57:25.850
因为这里容易出面是提

57:25.850 --> 57:27.850
属性的名字

57:27.850 --> 57:28.850
不可能

57:28.850 --> 57:30.850
只能是制服串

57:30.850 --> 57:31.850
只能是制服串

57:31.850 --> 57:33.850
如果你书写的是

57:33.850 --> 57:34.850
数字

57:34.850 --> 57:36.850
会自动

57:36.850 --> 57:38.850
转换为制服串

57:38.850 --> 57:39.850
它会把数字自动

57:39.850 --> 57:40.850
转换为制服串

57:40.850 --> 57:41.850
所以它现在没有爆错

57:41.850 --> 57:42.850
没有爆错

57:42.850 --> 57:44.850
那么这里

57:44.850 --> 57:46.850
我们这里写abc

57:46.850 --> 57:47.850
abc

57:47.850 --> 57:49.850
那么这里你这样子写

57:49.850 --> 57:51.850
就相当于是这样子写

57:51.850 --> 57:52.850
相当于是这样子写

57:52.850 --> 57:53.850
明白这个意思吗

57:53.850 --> 57:55.850
它只能是制服串

57:55.850 --> 57:57.850
它不可能是其他东西的

57:57.850 --> 57:58.850
包括这个a

57:58.850 --> 57:59.850
它也是个制服串

57:59.850 --> 58:00.850
对吧

58:00.850 --> 58:01.850
也是个制服串

58:01.850 --> 58:02.850
也就是说

58:02.850 --> 58:03.850
这里如果你写的

58:03.850 --> 58:04.850
不是制服串

58:04.850 --> 58:05.850
它会自动帮你

58:05.850 --> 58:06.850
转换成制服串

58:06.850 --> 58:07.850
这个a

58:07.850 --> 58:08.850
你这样写的过

58:08.850 --> 58:09.850
它就直接把它当成制服串了

58:09.850 --> 58:10.850
一个制服串

58:10.850 --> 58:11.850
作为数字

58:11.850 --> 58:12.850
好 那么接下来看一下

58:12.850 --> 58:14.850
如何来读取这个属性0呢

58:14.850 --> 58:16.850
console log

58:16.850 --> 58:18.850
obj0

58:18.850 --> 58:20.850
可以这样子写吗

58:20.850 --> 58:22.850
不符合要求

58:22.850 --> 58:24.850
因为0不是一个合格的

58:24.850 --> 58:26.850
不是一个就是正确的标志服

58:26.850 --> 58:27.850
对吧

58:27.850 --> 58:29.850
你说说语法上是不能这样子写的

58:29.850 --> 58:30.850
但是我们可以用属性表达

58:30.850 --> 58:31.850
是这样子写

58:31.850 --> 58:33.850
是不是可以这样子写

58:33.850 --> 58:35.850
可以这样子写的

58:35.850 --> 58:37.850
保存看一下

58:37.850 --> 58:38.850
是不是得到abc了

58:38.850 --> 58:39.850
对吧

58:39.850 --> 58:40.850
abc了

58:40.850 --> 58:41.850
0这一块还比较特殊

58:41.850 --> 58:43.850
还比较特殊

58:43.850 --> 58:44.850
你还可以这样子写

58:44.850 --> 58:46.850
obj0

58:46.850 --> 58:47.850
你还可以这样子写

58:47.850 --> 58:48.850
这样子写

58:48.850 --> 58:49.850
它表示什么意思呢

58:49.850 --> 58:50.850
还是一样的

58:50.850 --> 58:52.850
读取的属性的名字是0

58:52.850 --> 58:54.850
这里它会做一个特殊处理

58:54.850 --> 58:57.850
它会将自动浏览器

58:57.850 --> 59:00.850
会自动将

59:00.850 --> 59:02.850
应该不能说浏览器了

59:02.850 --> 59:04.850
应该叫数组环境

59:04.850 --> 59:05.850
因为别的环境里面

59:05.850 --> 59:06.850
它也有这个功能

59:06.850 --> 59:08.850
会自动将

59:08.850 --> 59:12.850
数字转换为自幅串

59:12.850 --> 59:14.850
也就是说你这样子写

59:14.850 --> 59:16.850
相当于是这样子写

59:16.850 --> 59:17.850
是一样的

59:17.850 --> 59:18.850
没有任何区别

59:18.850 --> 59:19.850
一点区别都没有

59:19.850 --> 59:21.850
因为它会自动进行转换

59:21.850 --> 59:22.850
包括这里也是

59:22.850 --> 59:23.850
你可以这样子写

59:23.850 --> 59:24.850
可不可以

59:24.850 --> 59:25.850
可以

59:25.850 --> 59:27.850
你看这里

59:27.850 --> 59:28.850
这样子写的过

59:28.850 --> 59:29.850
它会把它转换成自幅串

59:29.850 --> 59:30.850
比方说这里

59:30.850 --> 59:31.850
我用自幅串读去

59:31.850 --> 59:32.850
好像是不太对了

59:32.850 --> 59:33.850
内形不一样了

59:33.850 --> 59:34.850
你看一下

59:34.850 --> 59:35.850
保存看一下

59:35.850 --> 59:37.850
还是得到abc

59:37.850 --> 59:38.850
是一样的

59:38.850 --> 59:40.850
最终都是自幅串

59:40.850 --> 59:41.850
好了

59:41.850 --> 59:43.850
之前一道面词题

59:43.850 --> 59:44.850
这道面词题很简单

59:44.850 --> 59:45.850
所以我这里直接想到了

59:45.850 --> 59:46.850
直接拿出来说

59:46.850 --> 59:48.850
有道面词题它就这样的

59:48.850 --> 59:49.850
它问你

59:49.850 --> 59:50.850
这个ob界

59:50.850 --> 59:52.850
它一开始没有这个属性

59:52.850 --> 59:53.850
没有这个属性

59:53.850 --> 59:55.850
就是一个空的对象

59:55.850 --> 59:56.850
它问你啥呢

59:56.850 --> 59:58.850
问你这个ob界

59:58.850 --> 01:00:02.850
0给它复制为123

01:00:02.850 --> 01:00:03.850
123

01:00:03.850 --> 01:00:05.850
然后又把ob界的

01:00:05.850 --> 01:00:08.850
自幅串0复制为234

01:00:08.850 --> 01:00:09.850
最后问你

01:00:09.850 --> 01:00:15.850
输出ob界0和ob界

01:00:15.850 --> 01:00:16.850
这个

01:00:16.850 --> 01:00:17.850
问你

01:00:17.850 --> 01:00:19.850
输出的结果是啥

01:00:19.850 --> 01:00:21.850
输出的结果是啥

01:00:21.850 --> 01:00:25.220
来看一下

01:00:25.220 --> 01:00:27.220
结果是啥呢

01:00:27.220 --> 01:00:28.220
这两个玩意儿

01:00:28.220 --> 01:00:29.220
是不是一样的

01:00:29.220 --> 01:00:30.220
对不对

01:00:30.220 --> 01:00:31.220
有啥区别呢

01:00:31.220 --> 01:00:32.220
没有任何区别

01:00:32.220 --> 01:00:33.220
它有没有属性

01:00:33.220 --> 01:00:34.220
你而没有

01:00:34.220 --> 01:00:35.220
对吧

01:00:35.220 --> 01:00:36.220
没有复制

01:00:36.220 --> 01:00:38.220
添加了这个属性0

01:00:38.220 --> 01:00:40.220
而且这个0是不是自幅串

01:00:40.220 --> 01:00:41.220
属性都能

01:00:41.220 --> 01:00:42.220
只能是自幅串

01:00:42.220 --> 01:00:43.220
属性的名字只能是自幅串

01:00:43.220 --> 01:00:45.220
不可能是别的东西

01:00:45.220 --> 01:00:46.220
这样子复制为123

01:00:46.220 --> 01:00:47.220
它先复制为123

01:00:47.220 --> 01:00:49.220
然后再复制为234

01:00:49.220 --> 01:00:51.220
结果是不是都是234的

01:00:51.220 --> 01:00:52.220
都是234的

01:00:52.220 --> 01:00:54.220
保存看一下吧

01:00:54.220 --> 01:00:55.220
都是234

01:00:55.220 --> 01:00:56.220
是一样的

01:00:56.220 --> 01:00:57.220
没有什么区别

01:00:57.220 --> 01:00:58.220
你看

01:00:58.220 --> 01:00:59.220
第一句话完成了复制

01:00:59.220 --> 01:01:00.220
就相当于是

01:01:00.220 --> 01:01:02.220
这个对象变成了啥呢

01:01:02.220 --> 01:01:05.220
这个对象变成了0

01:01:05.220 --> 01:01:06.220
为123

01:01:06.220 --> 01:01:07.220
它就变成了这个对象

01:01:07.220 --> 01:01:08.220
对吧

01:01:08.220 --> 01:01:09.220
加了这个属性

01:01:09.220 --> 01:01:12.220
第二句话完成复制之后

01:01:12.220 --> 01:01:15.220
当然这里就相当于是自幅串

01:01:15.220 --> 01:01:17.220
第二句话完成之后

01:01:17.220 --> 01:01:19.220
因为它会把它转过来自幅串

01:01:19.220 --> 01:01:21.220
它是不是又把它重新复制了

01:01:21.220 --> 01:01:23.220
给这个属性重新复制了234

01:01:23.220 --> 01:01:24.220
是不是一样的

01:01:24.220 --> 01:01:25.220
没啥区别

01:01:25.220 --> 01:01:26.220
最后读

01:01:26.220 --> 01:01:27.220
都读的是属性0

01:01:27.220 --> 01:01:29.220
是不是读出来全是234

01:01:29.220 --> 01:01:30.220
OK

01:01:30.220 --> 01:01:31.220
这是关于

01:01:31.220 --> 01:01:33.220
关于这个

01:01:33.220 --> 01:01:34.220
就是

01:01:34.220 --> 01:01:35.220
属性秒拉式

01:01:35.220 --> 01:01:37.220
属性秒拉式

01:01:37.220 --> 01:01:39.220
这是一种场景

01:01:39.220 --> 01:01:40.220
后边还有场景

01:01:40.220 --> 01:01:41.220
后边的场景就是宿主

01:01:41.220 --> 01:01:42.220
我们后边会学习

01:01:42.220 --> 01:01:43.220
会学习

01:01:43.220 --> 01:01:44.220
OK

01:01:44.220 --> 01:01:47.220
这是关于在变量中

01:01:47.220 --> 01:01:48.220
如何来存放对象

01:01:48.220 --> 01:01:50.220
这关于这一点

01:01:50.220 --> 01:01:51.220
第二个点

01:01:51.220 --> 01:01:55.820
全局对象

01:01:55.820 --> 01:01:56.820
全局对象

01:01:56.820 --> 01:01:58.820
这什么意思呢

01:01:58.820 --> 01:02:00.820
大部分

01:02:00.820 --> 01:02:01.820
不能说所有的

01:02:01.820 --> 01:02:02.820
皆是

01:02:02.820 --> 01:02:05.820
大部分的宿主环境

01:02:05.820 --> 01:02:08.820
都会提供一个

01:02:08.820 --> 01:02:11.820
都会提供一个

01:02:11.820 --> 01:02:14.820
一个特殊的对象

01:02:14.820 --> 01:02:17.820
该对象

01:02:17.820 --> 01:02:20.820
可以直接在

01:02:20.820 --> 01:02:22.820
介石代码中访问

01:02:22.820 --> 01:02:24.820
可以直接在介石代码中

01:02:24.820 --> 01:02:26.820
直接访问的特殊对象

01:02:26.820 --> 01:02:28.820
每个宿主环境的对象不一样

01:02:28.820 --> 01:02:30.820
在浏览期中

01:02:30.820 --> 01:02:31.820
该对象叫做

01:02:31.820 --> 01:02:32.820
该对象

01:02:32.820 --> 01:02:34.820
叫做全局对象

01:02:34.820 --> 01:02:35.820
就是有一个对象

01:02:35.820 --> 01:02:36.820
他已经给你说好了

01:02:36.820 --> 01:02:38.820
就好必说我写了个对象

01:02:38.820 --> 01:02:40.820
写了个对象就这个玩意

01:02:40.820 --> 01:02:42.820
如果一个代码在什么任何情况下

01:02:42.820 --> 01:02:43.820
都可以访问这个对象

01:02:43.820 --> 01:02:44.820
OK

01:02:44.820 --> 01:02:46.820
那么他就是个全局对象

01:02:46.820 --> 01:02:47.820
那么在介石里边

01:02:47.820 --> 01:02:48.820
你可以理解为

01:02:48.820 --> 01:02:50.820
他先给你做了一个对象了

01:02:50.820 --> 01:02:51.820
这个对象里边有很多

01:02:51.820 --> 01:02:52.820
很多的属性

01:02:52.820 --> 01:02:53.820
有很多东西

01:02:53.820 --> 01:02:54.820
属性里边还可能

01:02:54.820 --> 01:02:56.820
属性可能还是个对象

01:02:56.820 --> 01:02:59.820
属性的属性可能还是个对象

01:02:59.820 --> 01:03:01.820
给你掏了一个很大的对象

01:03:01.820 --> 01:03:02.820
这些对象

01:03:02.820 --> 01:03:04.820
你可以在介石代码里边直接访问

01:03:04.820 --> 01:03:05.820
那么这个对象叫做

01:03:05.820 --> 01:03:06.820
全局对象

01:03:06.820 --> 01:03:08.820
全局对象往往只有一个

01:03:09.820 --> 01:03:11.820
那么在浏览期中

01:03:11.820 --> 01:03:12.820
浏览期

01:03:12.820 --> 01:03:14.820
环境中

01:03:14.820 --> 01:03:16.820
全局对象

01:03:16.820 --> 01:03:18.820
为温斗

01:03:18.820 --> 01:03:20.820
表示整个窗口

01:03:20.820 --> 01:03:22.820
窗口浏览期窗口

01:03:23.820 --> 01:03:25.820
咱们来看一下温斗对象

01:03:26.820 --> 01:03:30.900
全局对象

01:03:30.900 --> 01:03:32.900
好看一下

01:03:32.900 --> 01:03:33.900
在介石里边

01:03:33.900 --> 01:03:35.900
我们啥代码都不写

01:03:35.900 --> 01:03:37.900
直接输出温斗

01:03:37.900 --> 01:03:38.900
看一下能不能输出

01:03:38.900 --> 01:03:39.900
有没有这个变量

01:03:39.900 --> 01:03:40.900
没有吧

01:03:40.900 --> 01:03:41.900
没有这个变量吧

01:03:41.900 --> 01:03:42.900
对吧

01:03:42.900 --> 01:03:43.900
不是我们自己从来没定过这个变量

01:03:43.900 --> 01:03:45.900
让我们看一下能不能输出

01:03:45.900 --> 01:03:47.900
右键运行

01:03:47.900 --> 01:03:48.900
看一下

01:03:48.900 --> 01:03:49.900
F2

01:03:50.900 --> 01:03:51.900
是不是输出了

01:03:51.900 --> 01:03:53.900
这就是个全局对象

01:03:53.900 --> 01:03:54.900
我们展开一下

01:03:54.900 --> 01:03:56.900
你看这里

01:03:56.900 --> 01:03:57.900
你看一下这里

01:03:57.900 --> 01:04:00.900
是不是有超级多的属性

01:04:00.900 --> 01:04:01.900
有些属性是NOW

01:04:01.900 --> 01:04:02.900
对吧有些属性是NOW

01:04:02.900 --> 01:04:04.900
有超级多的属性

01:04:04.900 --> 01:04:05.900
而且这些属性里边

01:04:05.900 --> 01:04:07.900
还有什么

01:04:07.900 --> 01:04:09.900
还有一些属性对吧

01:04:09.900 --> 01:04:10.900
属性里边还要套了属性

01:04:10.900 --> 01:04:11.900
还套了属性

01:04:11.900 --> 01:04:12.900
你看

01:04:12.900 --> 01:04:14.900
属性里边还套了属性

01:04:14.900 --> 01:04:16.900
就超级多的属性在这里边

01:04:16.900 --> 01:04:18.900
这是温斗对象

01:04:18.900 --> 01:04:21.900
以后我们在具体的学浏览期的时候

01:04:21.900 --> 01:04:22.900
学习的是啥呢

01:04:22.900 --> 01:04:24.900
学习的就是温斗对象

01:04:24.900 --> 01:04:25.900
以后我们在学习浏览期

01:04:25.900 --> 01:04:27.900
输出环境的时候

01:04:27.900 --> 01:04:28.900
学习的就是温斗对象

01:04:28.900 --> 01:04:29.900
它里边有哪些东西

01:04:29.900 --> 01:04:30.900
哪些东西我们可以常见

01:04:30.900 --> 01:04:32.900
大家看到一个现象没有

01:04:32.900 --> 01:04:35.900
看一下第二个属性

01:04:35.900 --> 01:04:36.900
NOW

01:04:37.900 --> 01:04:38.900
用过没

01:04:38.900 --> 01:04:39.900
第二个属性用过没

01:04:39.900 --> 01:04:41.900
不要告诉我没用过

01:04:41.900 --> 01:04:42.900
不要告诉我没用过

01:04:42.900 --> 01:04:43.900
用过没

01:04:43.900 --> 01:04:44.900
是不是用过的

01:04:44.900 --> 01:04:45.900
这个属性

01:04:45.900 --> 01:04:47.900
是不是我们当时说

01:04:47.900 --> 01:04:49.900
NOW表示一个输出语句对吧

01:04:49.900 --> 01:04:51.900
谈一个框框罩的页面上

01:04:51.900 --> 01:04:53.900
我们用的是啥

01:04:53.900 --> 01:04:55.900
用的是温斗里边的这个属性

01:04:55.900 --> 01:04:56.900
看到没

01:04:56.900 --> 01:04:58.900
只不过这个属性是个函数

01:04:58.900 --> 01:04:59.900
我们现在还没有学习函数

01:04:59.900 --> 01:05:01.900
函数的用法就是加两个小括号

01:05:01.900 --> 01:05:02.900
好

01:05:02.900 --> 01:05:03.900
接下来了

01:05:03.900 --> 01:05:05.900
咱们来再来记一笔

01:05:05.900 --> 01:05:07.900
再来记一笔

01:05:07.900 --> 01:05:09.900
就是温斗

01:05:09.900 --> 01:05:10.900
应该这样说

01:05:10.900 --> 01:05:13.900
全局对象中的

01:05:13.900 --> 01:05:15.900
所有属性

01:05:15.900 --> 01:05:18.900
可以直接使用

01:05:18.900 --> 01:05:21.900
而不需要

01:05:21.900 --> 01:05:23.900
不需要写上

01:05:23.900 --> 01:05:26.900
全局对象名

01:05:26.900 --> 01:05:27.900
是可以直接使用的

01:05:27.900 --> 01:05:29.900
当然你可以写全局对象名

01:05:29.900 --> 01:05:30.900
也没问题

01:05:30.900 --> 01:05:32.900
是可以直接使用这个属性的

01:05:32.900 --> 01:05:34.900
比方说举个例子

01:05:34.900 --> 01:05:36.900
这里边我们平时用的都是啥

01:05:36.900 --> 01:05:39.900
console.log对吧

01:05:39.900 --> 01:05:42.900
实际上它的完整写法是啥呢

01:05:42.900 --> 01:05:45.900
window.console.log

01:05:45.900 --> 01:05:47.900
它的完整写法是这个

01:05:47.900 --> 01:05:49.900
也就是说console

01:05:49.900 --> 01:05:51.900
它是window对象的一个属性

01:05:51.900 --> 01:05:53.900
它是window对象的一个属性

01:05:53.900 --> 01:05:55.900
保存看一下

01:05:56.900 --> 01:05:58.900
我刚才已经打开页面了

01:05:58.900 --> 01:05:59.900
你看

01:05:59.900 --> 01:06:01.900
是不是仍然能够输出东西

01:06:01.900 --> 01:06:02.900
仍然能够输出东西

01:06:02.900 --> 01:06:04.900
你看一下我们这里输出abc

01:06:04.900 --> 01:06:06.900
输出abc

01:06:06.900 --> 01:06:07.900
是不是仍然可以输出

01:06:07.900 --> 01:06:08.900
对吧

01:06:08.900 --> 01:06:09.900
然后再来

01:06:09.900 --> 01:06:12.900
window里边不是有enlarge吗

01:06:12.900 --> 01:06:14.900
对不对enlargeabc

01:06:14.900 --> 01:06:15.900
我们随便来一个

01:06:15.900 --> 01:06:16.900
保存看一下

01:06:16.900 --> 01:06:18.900
是不是仍然可以弹出

01:06:18.900 --> 01:06:20.900
说明了啥

01:06:20.900 --> 01:06:22.900
enlarge是不是window对象的一个属性

01:06:22.900 --> 01:06:23.900
对吧

01:06:23.900 --> 01:06:25.900
我们之前还学过什么

01:06:25.900 --> 01:06:26.900
document

01:06:26.900 --> 01:06:27.900
对吧

01:06:27.900 --> 01:06:29.900
delightabc

01:06:29.900 --> 01:06:30.900
那这个document

01:06:30.900 --> 01:06:32.900
是不是也是window对象的一个属性

01:06:32.900 --> 01:06:34.900
window对象的document

01:06:34.900 --> 01:06:35.900
看一下

01:06:35.900 --> 01:06:36.900
点确定

01:06:36.900 --> 01:06:38.900
你看abc就出来了

01:06:38.900 --> 01:06:40.900
这说明这些东西

01:06:40.900 --> 01:06:42.900
说全是window对象的属性

01:06:42.900 --> 01:06:44.900
如果你还不相信的话

01:06:44.900 --> 01:06:46.900
咱们又来这样子

01:06:46.900 --> 01:06:48.900
console.log

01:06:48.900 --> 01:06:51.900
window.console

01:06:51.900 --> 01:06:53.900
看一下打印出来看一下

01:06:53.900 --> 01:06:55.900
又来console.log

01:06:55.900 --> 01:06:57.900
window.enlarge

01:06:57.900 --> 01:06:58.900
看一下

01:06:58.900 --> 01:07:00.900
console.log

01:07:00.900 --> 01:07:01.900
window.document

01:07:01.900 --> 01:07:02.900
看一下

01:07:02.900 --> 01:07:03.900
看这三个玩意儿

01:07:03.900 --> 01:07:04.900
是不是window对象的属性

01:07:04.900 --> 01:07:05.900
如果不是的话

01:07:05.900 --> 01:07:06.900
它一定会输出undefine

01:07:06.900 --> 01:07:07.900
对吧

01:07:07.900 --> 01:07:08.900
一定会输出undefine

01:07:08.900 --> 01:07:10.900
保存看一下

01:07:10.900 --> 01:07:11.900
是不是全是它的属性

01:07:11.900 --> 01:07:12.900
都输出结果了对吧

01:07:12.900 --> 01:07:13.900
都输出结果了

01:07:13.900 --> 01:07:15.900
全是它的属性

01:07:15.900 --> 01:07:17.900
并且我们可以看到

01:07:17.900 --> 01:07:19.900
console里边

01:07:19.900 --> 01:07:20.900
console它本身

01:07:20.900 --> 01:07:21.900
它本身又是个对象

01:07:21.900 --> 01:07:23.900
这是不是类似于我们的结构

01:07:23.900 --> 01:07:24.900
它是一个对象

01:07:24.900 --> 01:07:26.900
它对象里边有个属性

01:07:26.900 --> 01:07:27.900
这个属性又是个对象

01:07:27.900 --> 01:07:28.900
你看

01:07:28.900 --> 01:07:29.900
console里边又是个对象

01:07:29.900 --> 01:07:30.900
这个对象里边

01:07:30.900 --> 01:07:31.900
是不是有很多东西

01:07:31.900 --> 01:07:32.900
其中一个东西

01:07:32.900 --> 01:07:33.900
是不是log

01:07:33.900 --> 01:07:34.900
对不对

01:07:34.900 --> 01:07:37.900
我们平时使用的是console.log

01:07:37.900 --> 01:07:38.900
那么log是什么

01:07:38.900 --> 01:07:39.900
是console这个对象的

01:07:39.900 --> 01:07:40.900
一个属性

01:07:40.900 --> 01:07:41.900
一个属性

01:07:41.900 --> 01:07:43.900
这个属性的类型

01:07:43.900 --> 01:07:44.900
是一个函数

01:07:44.900 --> 01:07:45.900
是个函数而已

01:07:45.900 --> 01:07:47.900
我们之后会讲这个函数

01:07:47.900 --> 01:07:49.900
明白这个意思吧

01:07:49.900 --> 01:07:50.900
平时我们使用的这些东西

01:07:50.900 --> 01:07:52.900
全是全局

01:07:52.900 --> 01:07:54.900
全局对象里边的东西

01:07:54.900 --> 01:07:55.900
所以说

01:07:55.900 --> 01:07:56.900
我们平时为什么能使用那些东西

01:07:56.900 --> 01:07:57.900
就是因为

01:07:57.900 --> 01:07:59.900
第一个全局对象

01:07:59.900 --> 01:08:01.900
任何地方都可以访问

01:08:01.900 --> 01:08:02.900
接待码都可以访问

01:08:02.900 --> 01:08:03.900
就叫全局

01:08:03.900 --> 01:08:05.900
它覆盖了整个环境

01:08:05.900 --> 01:08:07.900
那为什么可以直接使用

01:08:07.900 --> 01:08:08.900
是因为温度对象里边

01:08:08.900 --> 01:08:09.900
全局对象里边的所有属性

01:08:09.900 --> 01:08:10.900
可以直接使用

01:08:10.900 --> 01:08:13.900
而不需要写上全局对象名

01:08:13.900 --> 01:08:14.900
名字是可以不写的

01:08:14.900 --> 01:08:15.900
是可以不写的

01:08:15.900 --> 01:08:16.900
这就是我们

01:08:16.900 --> 01:08:17.900
为什么可以直接用

01:08:17.900 --> 01:08:18.900
这些东西的原因

01:08:18.900 --> 01:08:19.900
明白吧

01:08:19.900 --> 01:08:21.900
我们后面学浏览器环境的时候

01:08:21.900 --> 01:08:22.900
还会讲更多的

01:08:22.900 --> 01:08:23.900
这些全局对象

01:08:23.900 --> 01:08:25.900
包括很重要的这个 document

01:08:25.900 --> 01:08:26.900
到底是什么意思

01:08:26.900 --> 01:08:27.900
后面里边有哪些东西

01:08:27.900 --> 01:08:28.900
我们后面会详细讲

01:08:28.900 --> 01:08:29.900
好吧

01:08:29.900 --> 01:08:31.900
这是全局对象

01:08:31.900 --> 01:08:33.900
还有一个点

01:08:33.900 --> 01:08:34.900
还有一个点

01:08:34.900 --> 01:08:37.590
全局对象这里

01:08:37.590 --> 01:08:40.590
定义的所有辩量

01:08:40.590 --> 01:08:43.590
定义的所有辩量

01:08:43.590 --> 01:08:44.590
但这个话说得不准确

01:08:44.590 --> 01:08:45.590
因为我现在知识不够

01:08:45.590 --> 01:08:46.590
我只能这样子说

01:08:46.590 --> 01:08:48.590
以后我们讲到函数的一块

01:08:48.590 --> 01:08:49.590
还会单独说明

01:08:49.590 --> 01:08:50.590
现在就这样理解

01:08:50.590 --> 01:08:51.590
没有任何问题

01:08:51.590 --> 01:08:52.590
现在这样理解

01:08:52.590 --> 01:08:53.590
没有任何问题

01:08:53.590 --> 01:08:57.590
定义的所有开发者

01:08:57.590 --> 01:09:01.590
定义的所有辩量

01:09:01.590 --> 01:09:05.590
实际上会成为

01:09:05.590 --> 01:09:06.590
成为啥呢

01:09:06.590 --> 01:09:10.590
成为温斗对象的属性

01:09:10.590 --> 01:09:13.590
实际上会成为温斗

01:09:13.590 --> 01:09:18.610
会成为温斗对象的属性

01:09:18.610 --> 01:09:20.610
这什么意思呢

01:09:20.610 --> 01:09:23.610
咱们再来看

01:09:23.610 --> 01:09:24.610
比方说

01:09:24.610 --> 01:09:27.610
我们这里定义一个辩量

01:09:27.610 --> 01:09:29.610
A

01:09:29.610 --> 01:09:31.610
给它写上123

01:09:31.610 --> 01:09:33.610
随便写吧

01:09:33.610 --> 01:09:36.610
现在我们直接输出

01:09:36.610 --> 01:09:38.610
输出温斗点A

01:09:38.610 --> 01:09:40.610
咱们来看一下

01:09:40.610 --> 01:09:41.610
神奇

01:09:41.610 --> 01:09:43.610
保存看一下

01:09:43.610 --> 01:09:45.610
输出123

01:09:45.610 --> 01:09:46.610
我们定义的是辩量A

01:09:46.610 --> 01:09:48.610
怎么跑到温斗的属性

01:09:49.610 --> 01:09:50.610
就是这个规则

01:09:50.610 --> 01:09:53.610
开发者定义的所有辩量

01:09:53.610 --> 01:09:57.610
实际上会成为温斗对象的属性

01:09:57.610 --> 01:09:59.610
温斗对象的属性

01:09:59.610 --> 01:10:01.610
这里还有一条规则

01:10:01.610 --> 01:10:02.610
大家把它记一下

01:10:02.610 --> 01:10:04.610
我这里先把它加出

01:10:04.610 --> 01:10:07.610
表示这个地方是一个非常非常重要的知识点

01:10:07.610 --> 01:10:08.610
还有一个规则就是

01:10:08.610 --> 01:10:13.610
它为了保护温斗对象的属性不被覆盖

01:10:13.610 --> 01:10:15.610
它为了保护属性不被覆盖

01:10:15.610 --> 01:10:17.610
所以它有这么一个规则

01:10:17.610 --> 01:10:22.610
如果辩量没有被复制

01:10:22.610 --> 01:10:23.610
没有被复制

01:10:23.610 --> 01:10:25.610
当然这些都是一些细节

01:10:25.610 --> 01:10:26.610
讲这些细节

01:10:26.610 --> 01:10:29.610
我们平时做开发不太会遇得到

01:10:29.610 --> 01:10:30.610
这些细节不太会遇得到

01:10:30.610 --> 01:10:33.610
但是有的时候面试体他容易考

01:10:33.610 --> 01:10:35.610
所以说我把这些细节要讲到

01:10:35.610 --> 01:10:37.610
如果辩量没有被复制

01:10:37.610 --> 01:10:39.610
哪怕你复制为undefine都行

01:10:39.610 --> 01:10:41.610
哪怕你复制为nau都行

01:10:41.610 --> 01:10:43.610
但是如果你没有复制

01:10:43.610 --> 01:10:52.610
则该辩量不会覆盖温斗对象上的同名属性

01:10:52.610 --> 01:10:54.610
不会覆盖它的同名属性

01:10:54.610 --> 01:10:57.610
怎么能理解这么两句话

01:10:57.610 --> 01:10:59.610
我这里举一些例子来理解

01:10:59.610 --> 01:11:01.610
比方说这里

01:11:01.610 --> 01:11:04.610
A没有复制

01:11:04.610 --> 01:11:06.610
我们来输出一下

01:11:06.610 --> 01:11:07.610
把整个温斗输出

01:11:07.610 --> 01:11:09.610
看里面有没有属性A

01:11:09.610 --> 01:11:11.610
看里面有没有属性A

01:11:12.610 --> 01:11:14.610
找到把温斗打印出来

01:11:14.610 --> 01:11:16.610
看里面有没有属性A

01:11:16.610 --> 01:11:17.610
展开

01:11:17.610 --> 01:11:18.610
你看这属性A是不是出来了

01:11:18.610 --> 01:11:19.610
A出来了

01:11:19.610 --> 01:11:20.610
这说明啥呢

01:11:20.610 --> 01:11:22.610
说明了A

01:11:23.610 --> 01:11:26.610
成为了温斗

01:11:27.610 --> 01:11:31.610
成为了温斗对象的属性

01:11:31.610 --> 01:11:33.610
它成为了温斗对象的属性

01:11:34.610 --> 01:11:39.610
但是温斗之前没有属性A

01:11:40.610 --> 01:11:41.610
不能说但是

01:11:41.610 --> 01:11:45.610
因为温斗对象之前没有属性A

01:11:45.610 --> 01:11:47.610
所以说A直接成为了温斗对象的属性

01:11:47.610 --> 01:11:48.610
应该这样说

01:11:48.610 --> 01:11:52.610
这样说

01:11:52.610 --> 01:11:54.610
因为温斗之前是没有属性A的

01:11:54.610 --> 01:11:56.610
所以说A成为了温斗对象的属性

01:11:56.610 --> 01:11:57.610
这个没问题吧

01:11:57.610 --> 01:11:58.610
这是我们之前的规则

01:11:58.610 --> 01:12:00.610
好 再来看

01:12:01.610 --> 01:12:04.610
如果我现在定一个console

01:12:04.610 --> 01:12:06.610
温斗对象里边

01:12:06.610 --> 01:12:08.610
有没有这个属性

01:12:08.610 --> 01:12:09.610
所以有

01:12:09.610 --> 01:12:11.610
给它重新复制

01:12:11.610 --> 01:12:13.610
给它重新复制

01:12:13.610 --> 01:12:15.610
ABC

01:12:15.610 --> 01:12:16.610
随便写吧

01:12:16.610 --> 01:12:17.610
随便写

01:12:17.610 --> 01:12:19.610
然后我再来console log

01:12:19.610 --> 01:12:22.610
输出温斗对象

01:12:22.610 --> 01:12:24.610
输出温斗对象

01:12:24.610 --> 01:12:26.610
你会觉得会怎么样

01:12:26.610 --> 01:12:28.610
你觉得会怎么样

01:12:28.610 --> 01:12:29.610
会怎么样呢

01:12:29.610 --> 01:12:31.610
保存看一下

01:12:31.610 --> 01:12:32.610
爆错了

01:12:32.610 --> 01:12:34.610
它说啥呢

01:12:34.610 --> 01:12:37.610
它说console.log is not a function

01:12:38.610 --> 01:12:39.610
not a function

01:12:39.610 --> 01:12:40.610
它说不是函数

01:12:40.610 --> 01:12:42.610
我们之前用的这个东西是函数

01:12:42.610 --> 01:12:43.610
输出这个东西是函数

01:12:43.610 --> 01:12:45.610
我们函数后面会讲

01:12:45.610 --> 01:12:46.610
它说这个东西不是函数

01:12:46.610 --> 01:12:47.610
啥意思呢

01:12:47.610 --> 01:12:49.610
console现在变成了啥了

01:12:49.610 --> 01:12:51.610
变成了制服创ABC了

01:12:51.610 --> 01:12:54.610
制服创ABC里边有没有这个属性

01:12:54.610 --> 01:12:55.610
没有

01:12:55.610 --> 01:12:57.610
但是它由于它把它当函数使用

01:12:57.610 --> 01:12:59.610
所以它爆出的东西变了

01:12:59.610 --> 01:13:01.610
爆出的东西变了

01:13:01.610 --> 01:13:02.610
它爆的是另外一个错了

01:13:02.610 --> 01:13:05.610
但是实际上你可以理解为

01:13:05.610 --> 01:13:06.610
不是函数

01:13:06.610 --> 01:13:08.610
是这个里边

01:13:08.610 --> 01:13:10.610
它是没有这个东西的

01:13:10.610 --> 01:13:11.610
没有这个东西的

01:13:11.610 --> 01:13:12.610
那么这个东西是函数

01:13:12.610 --> 01:13:13.610
这个函数不能当函数

01:13:13.610 --> 01:13:14.610
才使用

01:13:14.610 --> 01:13:15.610
因为没有这个函数

01:13:15.610 --> 01:13:16.610
明白这个意思吧

01:13:16.610 --> 01:13:18.610
那么现在我在想输出怎么输出

01:13:18.610 --> 01:13:19.610
没法输出了

01:13:19.610 --> 01:13:21.610
没法在控制台里边输出了

01:13:21.610 --> 01:13:24.610
因为你把温斗对象的属性给它改了

01:13:24.610 --> 01:13:25.610
改改了

01:13:25.610 --> 01:13:26.610
现在我们只能怎么输出呢

01:13:26.610 --> 01:13:27.610
只能这样子输出

01:13:27.610 --> 01:13:28.610
而log

01:13:28.610 --> 01:13:30.610
window.console

01:13:30.610 --> 01:13:31.610
window.console

01:13:31.610 --> 01:13:32.610
看一下

01:13:32.610 --> 01:13:33.610
这个属性是不是改了

01:13:33.610 --> 01:13:35.610
保存看一下

01:13:35.610 --> 01:13:36.610
你看

01:13:36.610 --> 01:13:37.610
打印了abc

01:13:37.610 --> 01:13:39.610
说明这个console变成了啥了

01:13:39.610 --> 01:13:40.610
变成了abc

01:13:40.610 --> 01:13:42.610
因此我们以后

01:13:42.610 --> 01:13:44.610
命名变量名的时候

01:13:44.610 --> 01:13:45.610
注意一下

01:13:45.610 --> 01:13:47.610
不要跟window的属性相冲突了

01:13:47.610 --> 01:13:49.610
我怎么知道跟window的属性

01:13:49.610 --> 01:13:50.610
有没有相冲突

01:13:50.610 --> 01:13:51.610
以一般携带

01:13:51.610 --> 01:13:53.610
根本就不会造成冲突的

01:13:53.610 --> 01:13:55.610
因为想不到window里边有哪些属性

01:13:55.610 --> 01:13:56.610
你想看呗

01:13:56.610 --> 01:13:57.610
我们来看一下

01:13:57.610 --> 01:13:59.610
window对象里边的属性吧

01:13:59.610 --> 01:14:01.610
看一下window对象的属性

01:14:01.610 --> 01:14:02.610
你能想到这些单词吗

01:14:02.610 --> 01:14:04.610
就其中有几个

01:14:04.610 --> 01:14:06.610
有一个好像是容易出问题

01:14:06.610 --> 01:14:08.610
你看这些单词你能想到吗

01:14:08.610 --> 01:14:09.610
你能想到吗

01:14:09.610 --> 01:14:10.610
你是不是想不到这些单词

01:14:10.610 --> 01:14:12.610
不用管

01:14:12.610 --> 01:14:13.610
好

01:14:13.610 --> 01:14:14.610
咱们再来看

01:14:14.610 --> 01:14:15.610
咱们再来看

01:14:15.610 --> 01:14:17.610
这个地方我打个注释

01:14:18.610 --> 01:14:22.610
由于window

01:14:22.610 --> 01:14:24.610
由于console

01:14:24.610 --> 01:14:27.610
console有负值

01:14:27.610 --> 01:14:28.610
有负值

01:14:28.610 --> 01:14:29.610
因此

01:14:29.610 --> 01:14:33.610
负盖了window的属性console

01:14:33.610 --> 01:14:34.610
属性console

01:14:34.610 --> 01:14:36.610
哪怕你负值为

01:14:36.610 --> 01:14:39.610
哪怕你负值为undefend都行

01:14:39.610 --> 01:14:41.610
哪怕你负值为undefend都行

01:14:41.610 --> 01:14:42.610
咱们打印一下

01:14:42.610 --> 01:14:43.610
保存

01:14:43.610 --> 01:14:45.610
打印出来是undefend

01:14:45.610 --> 01:14:47.610
我这个没放放大

01:14:47.610 --> 01:14:49.610
打印出来是undefend

01:14:49.610 --> 01:14:51.610
你负值为undefend都行

01:14:51.610 --> 01:14:54.610
但是我们来看一下下边的

01:14:54.610 --> 01:14:56.610
下边的

01:14:56.610 --> 01:14:57.610
console

01:14:57.610 --> 01:14:59.610
没有负值

01:14:59.610 --> 01:15:01.610
那么现在我们undefend

01:15:01.610 --> 01:15:05.610
window.console

01:15:05.610 --> 01:15:07.610
打印window.console

01:15:07.610 --> 01:15:08.610
看一下

01:15:08.610 --> 01:15:09.610
保存

01:15:09.610 --> 01:15:10.610
所以有值了

01:15:10.610 --> 01:15:11.610
有值了

01:15:11.610 --> 01:15:12.610
它是个对象

01:15:12.610 --> 01:15:13.610
它是个对象

01:15:13.610 --> 01:15:14.610
为什么显示成这个样子

01:15:14.610 --> 01:15:15.610
我们以后会说

01:15:15.610 --> 01:15:16.610
它是个对象

01:15:16.610 --> 01:15:18.610
我们在控制台里面打印

01:15:18.610 --> 01:15:20.610
console.log

01:15:20.610 --> 01:15:22.610
把这个window对象里

01:15:22.610 --> 01:15:24.610
把window全具对象里面的属性console打印出来

01:15:24.610 --> 01:15:25.610
看一下

01:15:25.610 --> 01:15:26.610
一个函数

01:15:26.610 --> 01:15:27.610
对吧

01:15:27.610 --> 01:15:28.610
一个对象

01:15:28.610 --> 01:15:29.610
对吧

01:15:29.610 --> 01:15:30.610
一个对象里面

01:15:30.610 --> 01:15:31.610
还有各种各样的函数

01:15:31.610 --> 01:15:32.610
有各种各样的属性

01:15:32.610 --> 01:15:33.610
有很多属性

01:15:33.610 --> 01:15:34.610
所以正常打印的

01:15:34.610 --> 01:15:36.610
所以这句话是

01:15:37.610 --> 01:15:39.610
由于console

01:15:39.610 --> 01:15:41.610
没有负值

01:15:41.610 --> 01:15:42.610
因此

01:15:42.610 --> 01:15:44.610
没有负盖

01:15:44.610 --> 01:15:46.610
window的属性

01:15:46.610 --> 01:15:47.610
console

01:15:47.610 --> 01:15:48.610
好

01:15:48.610 --> 01:15:49.610
那么有些同学说

01:15:49.610 --> 01:15:51.610
那我现在能不能访问到这个console

01:15:51.610 --> 01:15:52.610
能不能访问到

01:15:52.610 --> 01:15:53.610
对不起

01:15:53.610 --> 01:15:54.610
对不起

01:15:54.610 --> 01:15:55.610
你访问不到

01:15:55.610 --> 01:15:56.610
那么访问的话

01:15:56.610 --> 01:15:59.610
访问的还是window对象里面的属性console

01:15:59.610 --> 01:16:00.610
你看

01:16:00.610 --> 01:16:02.610
得到的还是window对象的属性console

01:16:02.610 --> 01:16:03.610
你可以这样理解

01:16:03.610 --> 01:16:06.610
如果你订了一个变量没有负值

01:16:06.610 --> 01:16:08.610
而刚好碰巧了

01:16:08.610 --> 01:16:09.610
这个变量的名字

01:16:09.610 --> 01:16:12.610
又跟window的属性名字重复了

01:16:12.610 --> 01:16:14.610
就相当于是没有定义这个变量

01:16:14.610 --> 01:16:16.610
你可以这样去理解

01:16:16.610 --> 01:16:17.610
你定义了这个变量

01:16:17.610 --> 01:16:18.610
当然有个变量提升

01:16:18.610 --> 01:16:19.610
变量提升这个没什么好说的

01:16:19.610 --> 01:16:20.610
你就放到第一行

01:16:20.610 --> 01:16:21.610
对吧

01:16:21.610 --> 01:16:22.610
是一样的

01:16:22.610 --> 01:16:23.610
没有任何区别

01:16:23.610 --> 01:16:24.610
那么这个变量没有负值

01:16:24.610 --> 01:16:25.610
没有负值的话

01:16:25.610 --> 01:16:28.610
它又跟window对象的属性重复了

01:16:28.610 --> 01:16:29.610
两个条件都要满足

01:16:29.610 --> 01:16:32.610
那么就相当于是这个变量就不存在

01:16:32.610 --> 01:16:33.610
根本就没有定义这个变量

01:16:33.610 --> 01:16:35.610
你用的还是window对象里面的属性

01:16:35.610 --> 01:16:36.610
能不能用到这个意思

01:16:36.610 --> 01:16:38.610
关于这里什么变量提升这些东西

01:16:38.610 --> 01:16:40.610
我们后边会详细讲

01:16:40.610 --> 01:16:41.610
进阶部分会详细讲

01:16:41.610 --> 01:16:43.610
我们先把这些规则记住

01:16:43.610 --> 01:16:44.610
好

01:16:44.610 --> 01:16:45.610
那么接下来

01:16:45.610 --> 01:16:47.610
有一道面试题

01:16:47.610 --> 01:16:49.610
也不叫面试题了吧

01:16:49.610 --> 01:16:51.610
我这里面试一下原题不是这样子

01:16:51.610 --> 01:16:53.610
它考察的是这个东西

01:16:53.610 --> 01:16:56.610
这里我给大家看一个代码

01:16:56.610 --> 01:17:00.370
大家来分析一下为什么

01:17:00.370 --> 01:17:02.370
console log

01:17:02.370 --> 01:17:03.370
输出内

01:17:03.370 --> 01:17:05.370
再输出type of内

01:17:05.370 --> 01:17:07.370
再输出type of内

01:17:07.370 --> 01:17:08.370
应该输出啥呢

01:17:08.370 --> 01:17:10.370
是不是应该输出undefend

01:17:10.370 --> 01:17:11.370
undefend

01:17:11.370 --> 01:17:12.370
然后这也是undefend的对吧

01:17:12.370 --> 01:17:13.370
它内存也是undefend

01:17:13.370 --> 01:17:14.370
它只是undefend

01:17:14.370 --> 01:17:15.370
内存也是undefend

01:17:15.370 --> 01:17:16.370
因为我们说过

01:17:16.370 --> 01:17:17.370
undefend的跟内存

01:17:17.370 --> 01:17:20.370
它只有一个曲子就是undefend

01:17:20.370 --> 01:17:22.370
保存看一下

01:17:22.370 --> 01:17:25.810
前边啥都没输出

01:17:25.810 --> 01:17:27.810
第二个位置输出了一个制服串

01:17:27.810 --> 01:17:28.810
我们把它写成两行吧

01:17:28.810 --> 01:17:31.810
写成两行你看得更加清楚一点

01:17:31.810 --> 01:17:34.810
console log

01:17:34.810 --> 01:17:36.810
type of内

01:17:36.810 --> 01:17:37.810
保存

01:17:37.810 --> 01:17:38.810
好看一下

01:17:38.810 --> 01:17:39.810
输出了两行

01:17:39.810 --> 01:17:40.810
第一行啥都没有

01:17:40.810 --> 01:17:41.810
第二行输出一个制服串

01:17:41.810 --> 01:17:42.810
实际

01:17:42.810 --> 01:17:44.810
你猜一下

01:17:44.810 --> 01:17:46.810
来你来分析一下

01:17:46.810 --> 01:17:49.250
为什么

01:17:49.250 --> 01:17:50.250
why

01:17:50.250 --> 01:17:52.250
它为什么会发生这样的现象

01:17:52.250 --> 01:17:55.250
你觉得有可能的原因是啥

01:17:55.250 --> 01:17:56.250
就是以后

01:17:56.250 --> 01:17:57.250
不是

01:17:57.250 --> 01:17:58.250
为什么要讲这个

01:17:58.250 --> 01:18:00.250
这个错误一开始有很多同学都在犯

01:18:00.250 --> 01:18:02.250
我相信看了我前几页的课程

01:18:02.250 --> 01:18:04.250
有些同学都可能遇到这个错误了

01:18:04.250 --> 01:18:05.250
都有可能遇到这个错误了

01:18:05.250 --> 01:18:06.250
这个问题了

01:18:06.250 --> 01:18:08.250
明明我定了个辩量

01:18:08.250 --> 01:18:09.250
没有复制

01:18:09.250 --> 01:18:10.250
没有复制不是undefend吗

01:18:10.250 --> 01:18:12.250
它为什么没有输出undefend

01:18:12.250 --> 01:18:14.250
结果它什么都没有输出

01:18:14.250 --> 01:18:15.250
什么都没有输出

01:18:15.250 --> 01:18:16.250
然后我得到它的内情

01:18:16.250 --> 01:18:18.250
居然是一个制服串

01:18:18.250 --> 01:18:21.250
为啥你觉得应该是为啥

01:18:21.250 --> 01:18:22.250
为啥

01:18:22.250 --> 01:18:24.250
还能有啥原因

01:18:24.250 --> 01:18:25.250
你看一下这个例子

01:18:25.250 --> 01:18:27.250
还能有啥原因呢

01:18:27.250 --> 01:18:28.250
说明啥呢

01:18:28.250 --> 01:18:31.250
说明window里边是不是有一个属性叫做name

01:18:31.250 --> 01:18:32.250
对吧

01:18:32.250 --> 01:18:35.250
window里边有一个属性叫做name

01:18:35.250 --> 01:18:37.250
那么现在你订了一个name属性

01:18:37.250 --> 01:18:38.250
订了一个name属性

01:18:38.250 --> 01:18:41.250
这个属性的名字跟window对象重复了

01:18:41.250 --> 01:18:43.250
并且你没有给这个属性复制

01:18:43.250 --> 01:18:45.250
你没有给它复制

01:18:45.250 --> 01:18:46.250
你没有给它复制的话

01:18:46.250 --> 01:18:48.250
就相当于是定义的属性

01:18:48.250 --> 01:18:50.250
定义的辩量就不存在

01:18:50.250 --> 01:18:52.250
你定义的辩量就不存在

01:18:52.250 --> 01:18:53.250
明白这个意思吧

01:18:53.250 --> 01:18:55.250
因为你定义的辩量都会

01:18:55.250 --> 01:18:56.250
附着到window对象上面

01:18:56.250 --> 01:18:58.250
那么你现在的定义的辩量

01:18:58.250 --> 01:18:59.250
就相当于是不存在

01:18:59.250 --> 01:19:00.250
好

01:19:00.250 --> 01:19:02.250
那么既然不存在的话

01:19:02.250 --> 01:19:04.250
既然不存在的话

01:19:04.250 --> 01:19:06.250
那么用的是不是还是

01:19:06.250 --> 01:19:08.250
window对象里边的属性name

01:19:08.250 --> 01:19:10.250
那么window对象的属性name

01:19:10.250 --> 01:19:11.250
臭巧了

01:19:11.250 --> 01:19:12.250
它就是一个制服串

01:19:12.250 --> 01:19:13.250
那为什么第一句话

01:19:13.250 --> 01:19:14.250
没有输出东西呢

01:19:14.250 --> 01:19:16.250
我们来输出一下

01:19:16.250 --> 01:19:18.250
输出一下window对象

01:19:18.250 --> 01:19:20.250
看一下吧

01:19:20.250 --> 01:19:22.250
window对象展开

01:19:22.250 --> 01:19:24.250
它里边有个属相

01:19:24.250 --> 01:19:25.250
name

01:19:25.250 --> 01:19:26.250
你看

01:19:26.250 --> 01:19:27.250
name这个属相

01:19:27.250 --> 01:19:28.250
它是一个啥

01:19:28.250 --> 01:19:30.250
一个空制服串

01:19:30.250 --> 01:19:31.250
什么叫空制服串

01:19:31.250 --> 01:19:33.250
空制服串指的不是now

01:19:33.250 --> 01:19:35.250
空制服串是这么写吧

01:19:35.250 --> 01:19:36.250
就是里边啥都不写

01:19:36.250 --> 01:19:37.250
啥都不写

01:19:37.250 --> 01:19:38.250
就是个空制服串

01:19:38.250 --> 01:19:39.250
连空格都没有

01:19:39.250 --> 01:19:40.250
就是个空制服串

01:19:40.250 --> 01:19:42.250
那么这个字服串有没有输出

01:19:42.250 --> 01:19:43.250
它有输出

01:19:43.250 --> 01:19:44.250
只是你看不见

01:19:44.250 --> 01:19:45.250
它没东西吗

01:19:45.250 --> 01:19:46.250
它没东西

01:19:46.250 --> 01:19:47.250
你看不见

01:19:47.250 --> 01:19:48.250
这个属性到底是啥意思

01:19:48.250 --> 01:19:49.250
我们以后会讲

01:19:49.250 --> 01:19:50.250
以后会讲

01:19:50.250 --> 01:19:51.250
OK

01:19:51.250 --> 01:19:53.250
这是关于这一块

01:19:53.250 --> 01:19:54.250
关于这一块

01:19:54.250 --> 01:19:55.250
那么之后

01:19:55.250 --> 01:19:56.250
就告诉我们什么了

01:19:56.250 --> 01:19:57.250
告诉我们

01:19:57.250 --> 01:20:00.250
尽量不要去定义这个name属性

01:20:00.250 --> 01:20:01.250
给它编一下名字

01:20:01.250 --> 01:20:02.250
比方说用户名称

01:20:02.250 --> 01:20:03.250
对吧

01:20:03.250 --> 01:20:04.250
用户名称UserName

01:20:04.250 --> 01:20:05.250
UserName

01:20:05.250 --> 01:20:06.250
利息权一点

01:20:06.250 --> 01:20:08.250
尽量不要用name这个属性

01:20:08.250 --> 01:20:10.250
因为它会跟window对象的属性重复

01:20:10.250 --> 01:20:11.250
它会导致把

01:20:11.250 --> 01:20:12.250
window对象的属性覆盖掉了

01:20:12.250 --> 01:20:14.250
这是一个常见的问题

01:20:14.250 --> 01:20:15.250
把这里说一下

01:20:15.250 --> 01:20:16.250
那有些同学又要说了

01:20:16.250 --> 01:20:17.250
那之前你定义

01:20:17.250 --> 01:20:18.250
定义这些东西的时候

01:20:18.250 --> 01:20:20.250
为什么要定义name呢

01:20:20.250 --> 01:20:21.250
我这里没写name

01:20:21.250 --> 01:20:22.250
比方说这里

01:20:22.250 --> 01:20:23.250
我可不可以写name呢

01:20:23.250 --> 01:20:25.250
这里可不可以写name

01:20:25.250 --> 01:20:26.250
这里可不可以写

01:20:26.250 --> 01:20:28.250
这里当然可以写

01:20:28.250 --> 01:20:29.250
这里不是变量

01:20:29.250 --> 01:20:31.250
我们只是定义变量的时候

01:20:31.250 --> 01:20:32.250
这个变量会覆盖

01:20:32.250 --> 01:20:33.250
window对象里面的

01:20:33.250 --> 01:20:34.250
相应的属性

01:20:34.250 --> 01:20:35.250
但是这里不是变量

01:20:35.250 --> 01:20:36.250
是我这个变量

01:20:36.250 --> 01:20:38.250
对象里面的属性

01:20:38.250 --> 01:20:39.250
这个是可以写的

01:20:39.250 --> 01:20:40.250
这个是可以写的

01:20:40.250 --> 01:20:41.250
要搞清楚

01:20:43.250 --> 01:20:44.250
也就是说

01:20:44.250 --> 01:20:45.250
这边的情况

01:20:45.250 --> 01:20:46.250
跟上面这个代码

01:20:46.250 --> 01:20:47.250
情况是不是一样的

01:20:47.250 --> 01:20:48.250
对吧

01:20:48.250 --> 01:20:49.250
是一样的

01:20:49.250 --> 01:20:50.250
好

01:20:50.250 --> 01:20:51.250
咱们再来个例子

01:20:51.250 --> 01:20:52.250
再来个例子

01:20:52.250 --> 01:20:53.250
比方说

01:20:53.250 --> 01:20:55.250
咱们定义一个变量

01:20:55.250 --> 01:20:56.250
变量

01:20:56.250 --> 01:20:57.250
alert

01:20:57.250 --> 01:20:58.250
是不是

01:20:58.250 --> 01:20:59.250
window对象的属性

01:20:59.250 --> 01:21:00.250
对吧

01:21:00.250 --> 01:21:01.250
没问题吧

01:21:01.250 --> 01:21:02.250
window对象里面

01:21:02.250 --> 01:21:03.250
是不是有个属性alert

01:21:03.250 --> 01:21:04.250
ok

01:21:04.250 --> 01:21:05.250
我们再输出

01:21:05.250 --> 01:21:06.250
alert

01:21:06.250 --> 01:21:07.250
好

01:21:07.250 --> 01:21:08.250
会不会输出值

01:21:08.250 --> 01:21:09.250
它输出的是 onD范

01:21:09.250 --> 01:21:11.250
还是有值

01:21:11.250 --> 01:21:12.250
有没有值

01:21:12.250 --> 01:21:13.250
肯定有值

01:21:13.250 --> 01:21:14.250
因为我没有负值

01:21:14.250 --> 01:21:15.250
它就没有覆盖掉

01:21:15.250 --> 01:21:17.250
没有把这个属性覆盖掉

01:21:17.250 --> 01:21:18.250
保存看一下

01:21:19.250 --> 01:21:20.250
你看

01:21:20.250 --> 01:21:21.250
是不是输出了值

01:21:21.250 --> 01:21:22.250
但是这个值我们看不懂

01:21:22.250 --> 01:21:23.250
对吧

01:21:23.250 --> 01:21:24.250
它是个函数

01:21:24.250 --> 01:21:25.250
是个函数

01:21:25.250 --> 01:21:26.250
我们后面会说

01:21:26.250 --> 01:21:28.250
输出这个 type of

01:21:28.250 --> 01:21:29.250
alert

01:21:29.250 --> 01:21:30.250
保存看

01:21:30.250 --> 01:21:31.250
是个方形

01:21:31.250 --> 01:21:32.250
是个函数

01:21:32.250 --> 01:21:33.250
我们后面会讲函数

01:21:34.250 --> 01:21:35.250
好

01:21:35.250 --> 01:21:36.250
那么现在我们这样子来写

01:21:37.250 --> 01:21:38.250
给alert负一个值

01:21:38.250 --> 01:21:39.250
负一个 onD范的

01:21:41.250 --> 01:21:42.250
那么得到什么

01:21:42.250 --> 01:21:43.250
得到是啥

01:21:43.250 --> 01:21:44.250
是不是 onD范的

01:21:44.250 --> 01:21:45.250
我们之前说了

01:21:45.250 --> 01:21:47.250
你只要有负值

01:21:47.250 --> 01:21:48.250
那么这个变量

01:21:48.250 --> 01:21:49.250
它就有意义了

01:21:49.250 --> 01:21:51.250
它就会直接把它覆盖掉

01:21:51.250 --> 01:21:52.250
温度对象的属性

01:21:52.250 --> 01:21:53.250
直接覆盖掉

01:21:54.250 --> 01:21:55.250
好

01:21:55.250 --> 01:21:56.250
我们保存看一下

01:21:56.250 --> 01:21:57.250
是不是得到 onD范的

01:21:57.250 --> 01:21:58.250
对吧

01:21:58.250 --> 01:21:59.250
这是关于这一块

01:21:59.250 --> 01:22:01.250
只要有负值就行

01:22:01.250 --> 01:22:02.250
这里还顺便说一下

01:22:03.250 --> 01:22:04.250
这边

01:22:04.250 --> 01:22:06.250
如果我们给Name属性负值

01:22:06.250 --> 01:22:08.250
给Name属性负值

01:22:08.250 --> 01:22:09.250
负值为 onD范的

01:22:10.250 --> 01:22:11.250
按理说

01:22:11.250 --> 01:22:12.250
Name属性这里比较特殊

01:22:12.250 --> 01:22:13.250
按理说的话

01:22:13.250 --> 01:22:15.250
应该也是得到 onD范的

01:22:15.250 --> 01:22:16.250
对吧

01:22:16.250 --> 01:22:17.250
然后是

01:22:17.250 --> 01:22:19.250
这里边Name属性的

01:22:19.250 --> 01:22:20.250
也是 onD范的

01:22:20.250 --> 01:22:22.250
但实际上不是的

01:22:22.250 --> 01:22:23.250
实际上不是的

01:22:23.250 --> 01:22:24.250
保存看一下

01:22:25.250 --> 01:22:26.250
你会发现

01:22:26.250 --> 01:22:29.250
Name这个属性给它负值为 onD范的

01:22:29.250 --> 01:22:31.250
这里倒是输出了 onD范的

01:22:31.250 --> 01:22:32.250
但是你会发现了

01:22:32.250 --> 01:22:33.250
以后我们可以看到

01:22:33.250 --> 01:22:35.250
这个 onD范的是支付串

01:22:35.250 --> 01:22:37.250
它是个支付串 onD范的

01:22:37.250 --> 01:22:38.250
你看下面的内向是支付串

01:22:39.250 --> 01:22:40.250
再往Windows对象里边看

01:22:40.250 --> 01:22:42.250
看一下Windows对象里边这个Name

01:22:42.250 --> 01:22:43.250
你看

01:22:43.250 --> 01:22:44.250
跑哪去了

01:22:44.250 --> 01:22:45.250
Name

01:22:45.250 --> 01:22:46.250
是啥呢

01:22:46.250 --> 01:22:48.250
是不是一个支付串的 onD范的

01:22:48.250 --> 01:22:49.250
对吧

01:22:49.250 --> 01:22:50.250
一个支付串的 onD范的

01:22:50.250 --> 01:22:52.250
它不是 onD范的

01:22:52.250 --> 01:22:53.250
它是一个支付串

01:22:53.250 --> 01:22:54.250
内容是 onD范的

01:22:54.250 --> 01:22:55.250
它变成这个样子了

01:22:55.250 --> 01:22:56.250
这是怎么回事呢

01:22:56.250 --> 01:22:58.250
这是Name属性比较特殊

01:22:58.250 --> 01:23:01.250
Name属性比较特殊

01:23:01.250 --> 01:23:03.250
你负值的

01:23:03.250 --> 01:23:05.250
负值的任何纸

01:23:05.250 --> 01:23:08.250
任何内容都会被

01:23:08.250 --> 01:23:12.250
都会被转换为支付串

01:23:12.250 --> 01:23:13.250
Name属性比较特殊

01:23:13.250 --> 01:23:15.250
当然你跟负值为NOW也是一样

01:23:15.250 --> 01:23:17.250
负值为NOW也是一样

01:23:17.250 --> 01:23:18.250
你看

01:23:18.250 --> 01:23:19.250
看上去是NOW

01:23:19.250 --> 01:23:20.250
是一个支付串的NOW

01:23:20.250 --> 01:23:22.250
它内向还是支付串

01:23:22.250 --> 01:23:24.250
你看Name属性里边

01:23:24.250 --> 01:23:26.250
Name属性里边有NOW

01:23:26.250 --> 01:23:28.250
它是有特殊处理

01:23:28.250 --> 01:23:29.250
我们之后其实会讲一讲

01:23:29.250 --> 01:23:31.250
在进阶部分会讲

01:23:31.250 --> 01:23:33.250
如何来控制一个属性的负值

01:23:33.250 --> 01:23:34.250
给它负值东西的时候

01:23:34.250 --> 01:23:35.250
我们来可以

01:23:35.250 --> 01:23:36.250
经过一段代码来控制

01:23:36.250 --> 01:23:37.250
我们以后会说

01:23:37.250 --> 01:23:38.250
这是关于Name属性

01:23:38.250 --> 01:23:39.250
它比较特殊

01:23:39.250 --> 01:23:40.250
这个有点超高

01:23:40.250 --> 01:23:41.250
但是其他属性

01:23:41.250 --> 01:23:42.250
绝大部分

01:23:42.250 --> 01:23:43.250
特殊处理的属性

01:23:43.250 --> 01:23:44.250
都是正常的

01:23:44.250 --> 01:23:45.250
你跟它负了值

01:23:45.250 --> 01:23:46.250
哪怕你负责为NOW

01:23:46.250 --> 01:23:47.250
它都会覆盖掉

01:23:47.250 --> 01:23:49.250
温度的同名属性

01:23:49.250 --> 01:23:50.250
好吧

01:23:50.250 --> 01:23:51.250
只关于这一块

01:23:51.250 --> 01:23:53.250
全经对象

01:23:53.250 --> 01:23:54.250
好了

01:23:54.250 --> 01:23:55.250
这就是我们本节课

01:23:55.250 --> 01:23:56.250
要讲的内容了

01:23:56.250 --> 01:23:57.250
本节课要讲的内容

01:23:57.250 --> 01:23:58.250
好

01:23:58.250 --> 01:23:59.250
本节课没有什么作业

01:23:59.250 --> 01:24:01.250
是需要大家理解的

01:24:01.250 --> 01:24:02.250
需要大家理解的

01:24:02.250 --> 01:24:03.250
这一块的知识

01:24:03.250 --> 01:24:05.250
会贯穿到我们后边的学习

01:24:05.250 --> 01:24:06.250
反正我们后边

01:24:06.250 --> 01:24:07.250
一想到

01:24:07.250 --> 01:24:08.250
一想到这一块的知识

01:24:08.250 --> 01:24:09.250
就想到一些

01:24:09.250 --> 01:24:10.250
常见的一些问题

01:24:10.250 --> 01:24:11.250
我就会拿个提出来

01:24:11.250 --> 01:24:12.250
考考你们

01:24:12.250 --> 01:24:13.250
看你们能不能做出来

01:24:13.250 --> 01:24:14.250
一想到就拿出来

01:24:14.250 --> 01:24:15.250
让你们做一下

01:24:15.250 --> 01:24:17.250
总之你记住

01:24:17.250 --> 01:24:18.250
全局对象这一块

01:24:18.250 --> 01:24:20.250
你定的所有变量

01:24:20.250 --> 01:24:23.250
都会成为温度的全局对象

01:24:23.250 --> 01:24:24.250
但是有一个点就是

01:24:24.250 --> 01:24:25.250
温度如果之前

01:24:25.250 --> 01:24:27.250
已经有这个变量了

01:24:27.250 --> 01:24:29.250
已经有这个变量了

01:24:29.250 --> 01:24:30.250
而你这个变量

01:24:30.250 --> 01:24:31.250
又没有负值

01:24:31.250 --> 01:24:32.250
那么它会忽略掉

01:24:32.250 --> 01:24:34.250
其他的情况都是正常的

01:24:34.250 --> 01:24:35.250
都会直接覆盖

01:24:35.250 --> 01:24:36.250
都会直接覆盖

01:24:36.250 --> 01:24:37.250
当然你想这个道理

01:24:37.250 --> 01:24:39.250
咱们平时开发的时候

01:24:39.250 --> 01:24:40.250
哪会去背这个东西

01:24:40.250 --> 01:24:42.250
根本不会去背

01:24:42.250 --> 01:24:43.250
不会去背

01:24:43.250 --> 01:24:44.250
因为我们平时开发的时候

01:24:44.250 --> 01:24:46.250
怎么可能写个变量

01:24:46.250 --> 01:24:47.250
不给它负值

01:24:47.250 --> 01:24:48.250
有什么意义呢这样子

01:24:48.250 --> 01:24:50.250
没有什么意义对吧

01:24:50.250 --> 01:24:51.250
变量是用来存东西

01:24:51.250 --> 01:24:52.250
你开好一个房

01:24:52.250 --> 01:24:54.250
你不去进去住

01:24:54.250 --> 01:24:55.250
不浪费吗对不对

01:24:55.250 --> 01:24:56.250
不是浪费吗

01:24:56.250 --> 01:24:57.250
所以说我们通常

01:24:57.250 --> 01:24:58.250
不会说

01:24:58.250 --> 01:24:59.250
定一个变量不给它负值的

01:24:59.250 --> 01:25:00.250
早晚

01:25:00.250 --> 01:25:01.250
可能负值一开始

01:25:01.250 --> 01:25:02.250
没有负值

01:25:02.250 --> 01:25:03.250
早晚都会给它负值的

01:25:03.250 --> 01:25:04.250
所以说

01:25:04.250 --> 01:25:05.250
不会存在这个问题

01:25:05.250 --> 01:25:07.250
不会存在这个问题

01:25:07.250 --> 01:25:08.250
不太会

01:25:08.250 --> 01:25:09.250
不能说完全不会

01:25:10.250 --> 01:25:11.250
然后呢

01:25:11.250 --> 01:25:12.250
第一个点就很重要了

01:25:12.250 --> 01:25:13.250
第一个点很重要

01:25:13.250 --> 01:25:15.250
在变量动作后来操作对象

01:25:15.250 --> 01:25:16.250
这些东西要去练书

01:25:16.250 --> 01:25:17.250
特别是我们

01:25:17.250 --> 01:25:19.250
课堂上举这个例子对吧

01:25:19.250 --> 01:25:20.250
这个练习

01:25:20.250 --> 01:25:22.250
这个练习一定要去把理解清楚

01:25:22.250 --> 01:25:23.250
自己要做一遍

01:25:24.250 --> 01:25:25.250
好了

01:25:25.250 --> 01:25:26.250
这就是本节课的知识

01:25:26.250 --> 01:25:28.250
关于变量和对象的东西

