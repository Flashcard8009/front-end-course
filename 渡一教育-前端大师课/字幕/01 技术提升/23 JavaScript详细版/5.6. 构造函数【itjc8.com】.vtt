WEBVTT

00:00.000 --> 00:18.070
简式函数这一块儿是一个非常非常大的一个知识点

00:18.870 --> 00:24.830
我们这一张呢肯定是讲不完啊 但是我们这一张能够把函数最核心的东西讲完

00:25.350 --> 00:31.190
讲到什么程度呢 就讲到我们后边学网页啊 学网页上的一些动呃动态效果

00:31.870 --> 00:35.670
可以用就行了啊 就是我们以后做网页开发的时候可以用就行了

00:36.150 --> 00:43.030
更多的函数的一些很复杂的东西呢 我们放到进节课程里面讲 好吧 这些可能我们讲构造函数

00:44.270 --> 00:50.190
好 构造函数这一块呢也是一个非常非常重要的知识啊 前边呢 其实我们不知不觉的

00:50.790 --> 00:55.430
用过这个构造函数 什么时候用过呢 给大家看一下一个代码

00:56.150 --> 01:01.870
只是呢 当时呢 我没有说这是啥 对吧 当时我没有去说这是啥 其实他就是一个构造函数

01:02.750 --> 01:12.030
好 定一个数组对吧 我当时讲数组的时候怎么说的 数值有两种创建方式 这是一种创建方式对吧 还有一种创建方式就是nu

01:12.710 --> 01:16.310
而为 这是数组的一种创建方式

01:17.430 --> 01:20.670
没问题吧 好 这就是数组的创建方式啊

01:22.470 --> 01:29.150
这是 这是把数组的所谓的相传进去对吧传进去 好 其实这就是一个构造函数

01:29.670 --> 01:36.550
我们来看一下这个而为到底是什么东西 我们打印一下而为 console log type of而为

01:37.310 --> 01:41.390
看一下这是什么东西 好 右键运行出来 看一下啊

01:44.240 --> 01:47.120
f12 刷新 你看

01:47.960 --> 01:54.120
这个而为是啥啊 这个而为就是一个函数啊 他就是一个函数 没有什么特别的

01:54.440 --> 02:00.280
只不过呢 既然是已经给你写好了这个函数啊 这就是个函数 并且呢 他是一个构造函数

02:00.600 --> 02:03.280
这几课我们就来研究构造函数是什么东西

02:04.240 --> 02:12.440
好 我们这里首先看这么一个 看这么一个东西啊 就是用于创建对象的函数

02:14.040 --> 02:20.080
好 有两种方式 就是函数呢 他可以创建对象 他有两种方式创建对象 第一种

02:20.640 --> 02:26.800
就是函数返回一个对象啊 函数本身他会返回 可以返回一个对象

02:27.080 --> 02:32.200
因为我们知道函数有返回值 对吧 这个返回值呢 可以是任何东西 你可以返回一个布尔

02:32.880 --> 02:39.480
判断一个数是不是自数 对吧 返回一个布尔 也可以返回一个数字 对一个数主求和 对吧 返回一个数字

02:40.120 --> 02:42.560
也可以返回自不错 也可以返回任何些东西

02:43.320 --> 02:48.600
甚至可以返回一个函数 他能不能返回一个对象呢 他当然可以返回一个对象 所以说我们

02:49.640 --> 02:56.200
函数呢 我们可以利用函数来返回一个对象啊 比方说该取个名字叫crazy user

02:56.920 --> 03:01.880
创建一个用户 创建一个用户 这个函数的作用 反正的注释啊

03:03.880 --> 03:11.640
表示 表示什么意思呢 我这里就写单行注释啊 因为在介石文件里边 他才有一个自动给你补权

03:12.440 --> 03:18.480
补权带嘛 这个没有 所以说直接写单行注释 创建一个用户 创建一个用户

03:19.520 --> 03:24.400
好 那么比方说啊 这个函数返回啥呢 返回就返回一个对象 对吧 能不能返回对象 当然可以

03:24.800 --> 03:31.200
你看我返回了一个对象 也可以呢 把这个对象呢 保存了一个变量里边 把这个变量返回 也行 都行啊 都一样

03:31.800 --> 03:40.640
比方说name name abc 就随便写吧 随便写a几10对吧 然后呢 gender 啊 蓝啊蓝

03:41.600 --> 03:46.840
啊 是吧 这个对象里边还可以有函数 还可以有怎么有一个函数 say hello

03:47.280 --> 03:52.760
啊 say hello 一个函数都行啊 对象里面可以有任何东西啊 可以有一个函数可不可以有

03:53.280 --> 04:01.360
当然可以有 凭什么不能有呢 啊 当然可以有 好 那这个函数的写法呢 我们可以按照用之前的race关键字啊 输出一个文本啊

04:02.360 --> 04:05.320
我叫叫什么呢 嗯 叫做

04:06.640 --> 04:13.240
race 点什么点 name啊 表示当前对象 然后呢 年龄年龄

04:14.240 --> 04:20.000
race 点 a几 多少岁啊 然后呢 性别啊 性别是

04:22.410 --> 04:25.730
race 点 点 gender 啊 你看

04:26.530 --> 04:31.130
好 注意这个race啊 注意这个race是在这个函数里边使用的啊 不是在这个函数里边使用的啊

04:31.490 --> 04:38.570
所以说他取决于这个函数的调用方式 那这个函数是在对象里边 对吧 是在对象里边 我们通常都是使用对象点

04:39.050 --> 04:40.730
属性名来调用 你看

04:41.330 --> 04:44.930
这个函 对于这个函数而言 他返回了是不是个对象 你看吧 折叠起来

04:45.730 --> 04:50.810
返回了是不是个对象 肯定是个对象 好那怎么用呢 你看crazy user 对吧crazy user

04:51.210 --> 04:55.570
好 然后呢 我们得到一个变量吧 就u啊 或者u1啊 u1

04:57.330 --> 05:00.650
得到一个用户对象 对吧 他返回了一个用户对象 我们再接受一下嘛 对吧

05:01.210 --> 05:06.370
我们之前返回了什么数字啊 这不错 我们是不是都可以接收 对吧 这里也可以接收啊

05:06.810 --> 05:09.490
得到他返回的结果 返回一个用户对象

05:10.090 --> 05:16.330
好 我们来调用用户对象里面的say hello 看一下 看能不能成功调用 看一下啊

05:18.290 --> 05:25.730
啊 你看 是没没问题 对吧 没问题 你看我怎么调用的 z 他取决于调用的方式 我是用这个东西来调用的

05:25.970 --> 05:30.850
那么这个东西调用的时候呢 这里边的z 他就指向u1 对吧 指向的是u1

05:31.970 --> 05:35.250
没问题吧 好好理解一下啊 你看这个函数是可以返回对象的

05:35.970 --> 05:43.050
好 同样的道理呢 我们能不能再返回一个了啊 能不能再返回个对象了啊 也可以啊 u2 say hello

05:44.250 --> 05:50.170
两个对象是一样的 对吧 是一样的 哎 但是呢 我现在问大家一个问题啊 看大家对之前的知识的理解

05:50.610 --> 05:53.290
u1跟u2是不是相等的 是不一样的

05:55.010 --> 05:59.330
第29行输出啥 输出True还是Force

06:00.730 --> 06:04.970
好 咱们看一下 输出Force 为什么会输出Force呢

06:05.850 --> 06:11.890
是因为每一次调用函数是不是创建了一个新的对象 我们之前说过啊 只要你看到大扩号就是一个新的对象

06:12.290 --> 06:16.610
哎 有些人说 按照这里只有一个大扩号啊 你只有一个对象啊 但是你要想的

06:17.130 --> 06:21.770
你要想啊 这个函数是不断的在运行 你运行一次 是不是叫运行是大扩号 对吧

06:22.330 --> 06:28.090
运行是叫运行是个新建对象 所以说每一次运行函数得到的都是一个新的对象啊

06:28.530 --> 06:33.330
得到了是一个新的对象 因此呢u1u2它的内容相同 但它对象是不一样的

06:33.890 --> 06:36.610
你在看这个函数的名字都看得出来 对吧 Crazy 表示吗

06:37.330 --> 06:40.090
创建新建一个用户

06:40.810 --> 06:45.290
u1 再新建一个用户 u2 你看 从这个名字都可以看得出来

06:46.130 --> 06:49.330
没问题吧 这是函数是可以反馈对象的

06:50.170 --> 06:54.850
好 我们要创建一个对象的 我们可以通过函数来创建 可以方便我们来创建对象

06:55.170 --> 07:00.730
因为我们每一次自己写的话 太麻烦了 对吧 又要写这些属性啊 比方说我们有很多个用户

07:01.010 --> 07:06.690
要不断的创建 那每次创建的我都要写这个属性名字 太麻烦了啊 所以说呢 我可以让函数来帮我完成

07:07.650 --> 07:12.930
当然了 这个函数的不太好 现在不太好 为什么不太好了 因为每次创建的对象是不是一样的

07:13.490 --> 07:16.130
对吧 是不是一样的 当然是一样的 你看面

07:17.210 --> 07:22.930
创建的 每次创建的这个对象啊 你看是一样的 我们能不能有些差异呢

07:23.450 --> 07:28.650
可以啊 差异是啥 差异不就是参数吗 你把名字传给我

07:29.370 --> 07:32.810
你把年龄传给我 你把性别传给我 够了

07:33.730 --> 07:38.130
好 那么这是属性名 属性名等于啥呢 等于来自于参数的值内

07:38.970 --> 07:43.450
属性值 属性名A级等于啥呢 等于来自于参数的值A级

07:43.930 --> 07:47.490
来自于参数间段 对吧 我可以这样子写 但是

07:48.250 --> 07:53.170
大家注意好 不要看晕了 这两个单词虽然一样 但是它的意思不一样啊 这表示属性名

07:53.730 --> 07:56.530
这表示属性的值 属性值来自于参数

07:57.570 --> 08:04.730
有的时候呢 你会发现 这如果这两个呢 写写 写的单词是一样的时候 有一个语法堂 就是可以简写

08:05.810 --> 08:08.730
简写成斗号 简写成斗号

08:09.690 --> 08:15.290
当然前提条件啊 就是属性的名字和这个变量 或者是参数的名字要相同

08:15.930 --> 08:19.970
你可以进行简写 那么 这样子显得就相当于是刚才这种写法

08:20.490 --> 08:24.090
完整的写法是这样写的 但是呢 你这样写的就相当于是这样的写法

08:24.370 --> 08:29.530
把这个参数的值拿过来 作为属性的值 把这个参数的名字拿过来 作为属性的名字

08:29.970 --> 08:35.930
这是语法堂 可以简写的啊 同样的道理啊 其实上级课 上级课讲作业的时候

08:36.690 --> 08:40.970
我没有注意啊 没注意 那就顺便说一下吧 这个地方其实也可以简写

08:41.890 --> 08:48.930
在对象里边的这个函数啊 对象里边的属性 如果是一个函数的话 你可以进行简写这样写

08:49.170 --> 08:54.490
把帽号去掉 把方刻形去掉 这样子写一样的 一模一样的啊 这也是个语法堂

08:55.170 --> 08:56.490
好吧 我们这里把讲一下啊

08:57.690 --> 09:02.930
就是对象里边如果有函数的话 那么 如果一个属性是函数的话 那么可以进行简写

09:03.370 --> 09:08.370
好 有的时候呢 我们会这样子说啊 顺便记一笔 顺便记一笔啊 就是说

09:09.450 --> 09:15.090
对象中的属性 如果是一个函数 也称

09:16.090 --> 09:21.650
称该属性为什么呢 为对象的方法

09:22.610 --> 09:28.090
有的时候我们会这样说 因为函数它是什么呢 它是一个动作 要做一件事啊 不要打招呼对吧

09:28.410 --> 09:33.690
往往是一个动词 要做一件事 所以说呢 我们通常的把这个事呢称之为方法

09:34.170 --> 09:38.490
那么我们这里可以说这个say hello啊 是个用户对象的一个方法啊 一个方法

09:39.330 --> 09:42.450
我们可以这样去说啊 这是一种说法啊 这是一种说法

09:42.850 --> 09:45.890
当然了 它也可以称之为一个属性 对吧 这个属性是个函数而已

09:46.770 --> 09:51.930
好 这就是创建一个函数 没什么问题吧 好 我现在写了参数之后 那么我就可以

09:52.370 --> 09:56.090
创建用户的时候 你看 创建第一个用户啊 比方说啊

09:56.850 --> 10:03.250
张三啊 第二个参数年年十八 性别了 蓝啊 第二个用户呢 比方说啊

10:03.850 --> 10:04.130
啊

10:06.130 --> 10:14.250
基层啊 基层 年龄的二十 性别的蓝 对吧 好 那么我们就创建了两个用户了 保存

10:15.650 --> 10:20.250
看一下 就创建两个用户了 那这样创建用户里是不是觉得方便了很多 对不对

10:20.770 --> 10:27.490
方便了很多 可以少写很多的属性 而且呢 这里边的方法呢 我不用去重新写了啊 他自动帮你创建完成了

10:28.050 --> 10:32.490
啊 这就是用函数来创建对象的好处 用函数创建对象的我们记一笔啊

10:33.810 --> 10:39.730
用函数创建对象 可以啊 减少啊

10:40.490 --> 10:43.650
繁琐的对象 创建流程

10:45.090 --> 10:49.490
创建对象的流程呢 要写个两个大括号 要写各种各样的属性 可能还会写一些方法

10:49.890 --> 10:54.890
那么我们用函数来创建 你只需要告诉我必须要知道的东西 就是我不知道东西你要告诉我

10:55.330 --> 11:00.450
我知道的东西呢 我就可以直接写了 比方说这个函数可以直接写 你看 这样的创建对象是不是方便很多

11:01.410 --> 11:06.050
好 这是第一种方式啊 用一个普通函数啊 返回一个对象

11:07.170 --> 11:09.890
第二种方式呢 就是使用构造函数

11:11.010 --> 11:18.930
好 构造函数呢 这个语法呢 大家没有接触过 像第一种方式呢 很简单啊 我们之前都是接触过这样的语法的 只是我们没有这样子去写过

11:19.490 --> 11:25.890
但是语法是肯定没问题的 好第二种的语法呢 我们没有怎么接触过 他是这样的语法 构造函数

11:26.850 --> 11:32.530
怎么语法呢 六 关键之六 然后函数名 函数名

11:33.650 --> 11:37.650
他是这样的语法 当然这里有参数 有参数

11:39.410 --> 11:41.650
好 如果使用 如果使用

11:43.490 --> 11:48.290
如果使用上面的格式 上面的格式

11:49.010 --> 11:51.010
啊 创建对象

11:52.450 --> 11:57.970
则该函数 叫做构造函数 也就是说构造函数 他天生

11:58.770 --> 12:06.850
就是用来 用这种方式来创建对象的啊 构造函数的作用是什么 就是能用来创建对象啊 构造函数专门用于

12:07.410 --> 12:10.850
创建对象啊 构造函数专门用于创建对象

12:11.650 --> 12:17.490
好 那么我们可以通过一个函数来创建对象 那如果通过前面 前面加个加上一个六关键字

12:18.130 --> 12:22.610
就表示 我对这个函数的用法呢 用的是构造函数的方式

12:24.290 --> 12:30.130
好 那么同样的这个函数 啊 同样的这个函数 现在呢 我们把它改造一下 改造成构造函数的格式

12:31.170 --> 12:33.890
这是特斯尔1 这是特斯尔2

12:38.050 --> 12:44.610
啊 把它改成构造函数 构造函数没有什么特别的 他也是一个函数啊 他也是一个函数 没有什么特别的

12:45.330 --> 12:47.330
只是在邪法上呢 是这样子写的

12:48.210 --> 12:54.210
首先呢 构造函数的函数名通常手字母大写 也就是使用大陀封命名法

12:55.730 --> 12:56.290
这第一个啊

12:57.970 --> 13:08.130
构造函数的函数名使用大陀封命名法 没有强制要求啊 没有强制要求 只是大家都这样做啊 全世界都要这样做

13:08.530 --> 13:15.810
这样子的好处在于 你看到这个函数的名字 只要它是一个函数 它的手这么大写 你马上反应过来了 它是个构造函数

13:16.770 --> 13:25.010
好 我们使用大陀封命名法 表示构造函数 构造函数要怎么用呢 你可不可以直接使用 可不可以直接调用 当然可以啊 当然可以

13:25.330 --> 13:32.770
但是通常情况下呢 构造函数不要直接调用 不要直接调用 而应该怎么用呢 应该使用关键字6

13:33.730 --> 13:35.330
关键字6来调用

13:36.530 --> 13:40.370
用这种方式来调用 你看颜色变了 对吧 颜色变成了绿色了

13:41.090 --> 13:44.130
表示呢 我的使用方式呢 是一个构造函数的使用方式

13:45.250 --> 13:52.850
构造函数不要直接调用啊 你可不可以直接调用 可以 不是说不行 只是我们通常没有这样去干的啊 不这样去干

13:53.570 --> 13:58.210
而是呢 是什么呢 而是用一个关键字6啊 关键字6来调用

13:59.090 --> 14:01.090
那么效果是不是一样的呢 保存看一下

14:02.050 --> 14:05.250
效果是一样的 那有啥区别呢 有啥意义呢

14:06.370 --> 14:09.810
构造函数的意义有在于 意在哪了

14:10.850 --> 14:13.570
构造函数 构造函数内部

14:14.690 --> 14:17.570
Z指向新创建的对象

14:18.850 --> 14:23.330
新创建的对象 前面再加上一句话啊 构造函数内部

14:24.290 --> 14:27.730
会自动创建一个新对象

14:28.450 --> 14:32.210
会自动创建 你不用写任何代吧 它会自动创建一个新的对象

14:32.690 --> 14:36.770
Z呢 它就指向这个新创建的对象 并且

14:38.290 --> 14:41.730
自动返回新对象 自动返回新对象

14:42.850 --> 14:49.490
怎么理解呢 你可以这样理解 这个构造函数内部呢 它是这样子写的啊 构造函数内部是这样子写的

14:50.130 --> 14:54.690
就是Z等于一个新对象啊 等于新对象 当然这个语法不对啊

14:55.090 --> 15:00.690
不能用这样的语法啊 这个语法肯定是不对的 它说那个Z是左边 副字符号左边不能出现Z是

15:01.330 --> 15:07.410
语法肯定不对 你可以这样理解啊 一个新建的一个空对象 然后呢把它复制给的Z是啊 你可以这样去理解

15:08.610 --> 15:13.810
好 也就是它自动完成了啊 自动完成了 也就是说啥呢 我再来打个比方

15:15.250 --> 15:17.890
再来打个比方 我现在把个代码啊

15:19.490 --> 15:22.450
空的你看 函数里边啥都没写 一行都没有写

15:23.010 --> 15:30.050
一行代码没写 然后呢 我们得到 如果我们直接是用这样的方式啊 直接用这样的方式嘛 什么 把参数传进去嘛

15:30.450 --> 15:37.170
它是函数嘛 肯定可以传参数嘛 直接用这样的方式 你看一下啊 这个U是啥 你告诉我一个U是啥

15:38.130 --> 15:42.690
U是啥呢 U是不是一个undefined 对吧 函数里边没返回的东西嘛 对吧

15:43.250 --> 15:48.370
U是undefined 但是我现在不这样做 我现在直接写个6在前面

15:49.330 --> 15:52.210
这个U是啥呢 看着 保存

15:53.330 --> 15:59.170
这个U是一个对象 看没 两个大括号是一个对象啊 并且呢 它在控制台里边给标注了

15:59.490 --> 16:05.650
它是由哪个构造函数创建的呢 是由create creator user啊 是由这个构造函数给你创建的

16:06.210 --> 16:11.650
于是呢 这个构造函数呢 就是用这种写法来用函数的话 你会得到一个对象

16:12.290 --> 16:17.410
哪怕这个函数里边一行代码都没写 哪怕这个函数里边没有返回任何东西 你都会得到一个对象

16:17.570 --> 16:22.610
为什么呢 因为你用6的话 相当于是你把它当成了构造函数

16:23.810 --> 16:29.170
所以说它是不是构造函数 关键是看你怎么用 看你怎么用 你不把它当成构造函数 它就是个普通函数

16:29.730 --> 16:33.730
你把它当成构造函数 用6的关键字来用的话 它就一定会给你返回一个对象

16:34.770 --> 16:39.730
构造函数一定会返回一个对象 因为在构造函数那一步会自动创建一个新的对象

16:40.290 --> 16:41.970
并且呢 这一次呢 指向新对象

16:43.010 --> 16:46.770
并且呢 自动返回新对象 所以说这里它会自动给你返回一个新对象

16:47.970 --> 16:51.650
你看这个意思吧 这是第一个对象 对吧 我们可以用它可以创建多个对象

16:52.530 --> 16:59.090
U2 U2 当然写不写参数 我们现在现在没有用这些参数 对吧 写不写谁都无所谓

17:00.610 --> 17:04.130
好 两个对象了 我们再输出U1是不是等于U2

17:05.490 --> 17:07.090
看一下U1是不是等于U2

17:08.210 --> 17:11.650
Force 因为两次是不同的对象啊 两次是不同的对象

17:12.530 --> 17:17.650
你看这个意思吧 所以说构造函数这一块呢 它会给你一个新的对象啊 它无论你写不写

17:18.210 --> 17:21.570
无论你自己写不写创建新对象的代码 它都会给你一个新对象

17:22.770 --> 17:27.730
好 并且呢 又这个构造函数呢 它的名字啊 名字上呢 我们最好做一些文章

17:28.130 --> 17:31.810
最好不要用动词啊 最好不要用动词 因为最好 因为这个

17:32.690 --> 17:36.370
构造函数呢 它本身要用溜来调用对吧 而不是直接调用的

17:36.850 --> 17:41.970
它是用溜来调用的 溜呢 就本来就包含了一个动作了 就是新建 对吧 就是新建的意思

17:42.290 --> 17:47.330
因此呢 我们这里的命名上 尽量简洁一点 就命名为U2 表示用户

17:48.130 --> 17:57.570
UU2 你看 这样子是不是新建一个用户 对吧 名字交上三 年龄十八 性别难 是不是更加好理解 对吧 这样更加好理解一点

17:59.170 --> 18:00.850
我再说一次啊 我再说一次

18:01.490 --> 18:04.130
构造函数 它取决于怎么调用它

18:04.450 --> 18:07.010
如果你这样子调用它的话 它就是一个普通函数

18:07.810 --> 18:10.210
如果你这样调用它的话 它就是一个构造函数

18:10.930 --> 18:16.930
所以说 你不要光写了一个函数过后 你就问我 它是不是构造函数 它不一定 看你怎么去调用它

18:17.890 --> 18:22.050
只不过呢 习惯上 我们如果把一个函数的手字母大写

18:23.010 --> 18:28.210
那么它就是个构造函数 希望调用者呢 能够使用关键字6来调用

18:29.170 --> 18:33.570
希望个调用者能使用关键字6来调用 你不要用普通函数的调用方式

18:34.690 --> 18:35.570
好了 这就是构造函数

18:36.770 --> 18:40.610
好 那这个函数里面怎么写的 比方说新创建的对象 好 OK

18:41.250 --> 18:46.210
新创建的对象有一个Ris关键字 它指向新创建的对象

18:46.930 --> 18:52.610
也就是说Ris关键字在构造函数里面 如果你使用了6关键字 那么这个Ris指向它不是全局

18:53.330 --> 18:58.770
它就是什么 新建的那个对象 这个对象里面啥都没有 你给它加呗 加东西呗

18:59.330 --> 19:05.970
Ris的name负责为name 对吧 Ris的A级负责为A级 Ris的Gender负责为Gender 你看

19:06.450 --> 19:13.890
是不是可以加东西 往对象里边加东西 并且它可以加啥 加函数呗 Say hello 给它负责为一个函数 可不可以

19:14.770 --> 19:18.050
可不可以 当然可以啊 把这个函数拿过来

19:19.250 --> 19:23.570
当然可以 你看 这不就可以对象加属性吗 对吧 加属性

19:24.130 --> 19:26.130
啊 就加完了 对不对

19:27.170 --> 19:32.130
好 然后呢 我们再来看啊 你看有没有返回 不需要返回啊 不需要返回

19:32.850 --> 19:41.730
好 它会自动返回 好 现在我们再来看 U1 U2 是不是就有东西了 保存看一下啊 U1看一下是不是有东西了

19:42.690 --> 19:47.170
啊 往Ris里面加的东西 对吧 往那个新对象里面加的东西 你看是不是有东西了

19:47.810 --> 19:51.890
对不对 我们之前说过啊 对象里面新增属性 你直接负责就完事了

19:52.610 --> 19:58.690
啊 这就有东西了 好 那么我们可以是不是可以就调用的吧 U1啊 点 Say hello

20:01.170 --> 20:10.770
U2 点 Say hello 啊 保存看一下啊 你看是不是也可以啊 这就是我们这几课学习的啊

20:11.650 --> 20:18.370
构造函数 两种方式都可以创建对象 我如果一个函数啊 如果一个函数

20:18.530 --> 20:25.730
呃 虚 如果它是专门用来创建对象的 我建议大家习惯上我们会把它写成一个构造函数

20:27.410 --> 20:28.770
这样子呢 更加容易阅读

20:29.890 --> 20:39.090
为什么呢 因为你看这个语法 6 新建用户啊 新建用户 当然还有一些其他好处 我们今后再说 今后再说 再进阶部分再说

20:39.490 --> 20:43.890
那么现在呢 你可以认为这两种方式呢 就TES2和TES1都可以创建对象

20:44.370 --> 20:49.090
只不过呢 我们常用构造函数的这种方式 如果一个函数它专门用来创建对象的

20:49.570 --> 20:54.290
那么就可以用这种方式啊 用构造函数 把它手这么大写 用这种方式来创建

20:56.290 --> 21:03.090
好 那么这个构造函数里边目前呢 是没有写返回值的 对吧 那如果写的返回值会怎么样呢 他是这么一个规则

21:04.850 --> 21:08.770
构造函数中 如果出现

21:09.330 --> 21:16.930
返回值 如果出现返回值 原则上构造函数里边 你不要写什么返回 原则上是不要写的啊

21:17.650 --> 21:19.650
如果出现了返回值 怎么样呢

21:20.930 --> 21:23.250
如果出现了怎么返回值 出现了返回值的话

21:23.970 --> 21:28.930
如果返回的是返回的是什么 原始内形

21:29.970 --> 21:34.450
则直接忽略 就跟看不见一样 你写的跟白写一样 跟没写一样

21:35.090 --> 21:37.410
好 比方说啊 我们这里返回一个123

21:38.530 --> 21:43.810
返回一个123 原始内形 对吧 数字 那这个U1是123吗 看一下

21:45.410 --> 21:49.730
还是对象 看没有 直接跟你忽略 就跟你看不见 就跟你没写一样

21:50.610 --> 21:56.290
因为我们说过构造函数是一定要返回什么 一定要返回对象的 一定要返回对象

21:57.410 --> 22:01.010
好 那如果你不是按照构造函数调用了 那就是123了

22:01.490 --> 22:07.410
如果你不是按照构造函数调用 比方说啊 你把个6去了 你是正常函数的调用 那就返回得得到的就是123

22:08.210 --> 22:10.690
你看123它里边没有这个数 没有这个

22:11.890 --> 22:20.290
数向cHello 当然如果你是用构造函数来调用的话 就正常调用的话 它返回的一定是一个对象 它不可能是原始内形的

22:21.810 --> 22:25.410
好 如果返回的啊 如果返回的是

22:26.210 --> 22:32.290
引用内象 就是对象或者是函数 则使用返回的结果

22:33.330 --> 22:39.250
如果返回的是引用内象 则使用返回的结果 什么意思呢 如果这里返回不是原始内象 返回的是一个

22:40.130 --> 22:42.690
对象啊 x 123

22:44.050 --> 22:46.130
再来写个cHello嘛 cHello

22:47.170 --> 22:51.120
看着啊 再来写个cHello 扛射LOG

22:52.080 --> 22:53.280
哈哈变了

22:54.000 --> 22:56.160
好 看一下

22:57.200 --> 23:00.400
如果我返回一个对象呢 那这个u12又变成什么了 保存

23:01.280 --> 23:04.160
啊 变成这个了 就变成你返回了对象了 看到没

23:04.800 --> 23:10.000
好 那如果你返回一个函数呢 返回的是一个函数了 能不能返回函数 当然可以 有什么不行呢

23:11.680 --> 23:14.800
啊 返回的是一个函数 你看一下又怎么样了 保存

23:15.440 --> 23:20.640
好 它说cHello一直拿着方形 怎么回事呢 你返回的是个函数

23:21.200 --> 23:25.520
函数里边有没有cHello啊 这个u1是函数 这个u1是函数

23:26.240 --> 23:29.360
函数里边没有这个cHello 你要把它当成函数来雕用 看到没

23:29.760 --> 23:31.200
你得把它当成函数来雕用

23:32.720 --> 23:35.360
看没 就正常了 没问题吧

23:36.720 --> 23:42.400
说明这一点啊 就怕面试的时候会考到 其实我们写构造函数的话 哪会去返回什么东西

23:42.640 --> 23:43.840
不要去返回任何东西啊

23:44.960 --> 23:48.240
好 现在呢我们再来看这个数组 是不是就好理解多了

23:48.960 --> 23:50.240
啊 一个那个数组

23:51.680 --> 23:52.160
看着啊

23:53.760 --> 23:56.160
再来看这个数组啊 new array

23:56.560 --> 24:03.280
所以好理解多了 无非呢 就是js给我们写了一个啥了 给我们写了一个构造函数 array

24:03.600 --> 24:09.520
我们通过这个构造函数来创建一个数组对象 对吧 我们刚才的创建的是用户对象

24:09.840 --> 24:14.080
那么我们这里呢 可以通过它来创建一个数组对象 对不对

24:14.480 --> 24:16.960
所以说数组本质上就是对象 他没有什么特殊的

24:17.120 --> 24:20.320
他无非就是写了个构造函数而已 写了个构造函数而已

24:20.960 --> 24:26.000
你完全可以自己假设啊 js里边他没有给你提供数组 你能不能自己写个数组

24:26.480 --> 24:30.640
当然可以啊 当然可以 自己写个数组就完事了 对吧 自己写一个

24:31.040 --> 24:33.680
啊 数组无非就是个对象而已 他里边有些属性 对不对

24:34.720 --> 24:37.840
好 你看这里就是个构造函数 没啥问题吧

24:38.400 --> 24:44.080
好 其实我们平时写的这个代码啊 a r r 等于这个数组啊 我们平时写这样这样的代码

24:44.320 --> 24:49.120
实际上什么了 这个东西叫做语法堂啊 他也是一个语法堂

24:50.000 --> 24:55.760
啊 就是给一颗唐诗 让你写的方便一点 本质上他还是通过他来创建的 看到没

24:56.400 --> 24:58.720
本质上通是通过他来创建的

24:59.760 --> 25:02.720
这里呢 我们甚至呢 可以上心病狂的记忆笔

25:03.840 --> 25:05.200
所有的对象

25:06.720 --> 25:13.360
最终都是通过构造函数创建的所有的对象

25:13.920 --> 25:19.760
都是通过构造函数创建的 你看这数组 数组是不是对象 你这样的写 他其实是语法堂

25:20.160 --> 25:24.960
他相当于是咋写的呢 相当于是你这里写的是new array 啊 这样子写

25:25.760 --> 25:28.960
没有意思啊 刚才那种写法的是语法堂而已

25:29.840 --> 25:35.200
好 再来 我们之前不是写过这个对象吗 对吧 ob 界啊 这样的对象 对不对

25:36.000 --> 25:37.920
不好意思 这个东西也是语法堂

25:38.640 --> 25:39.600
也是语法堂

25:40.400 --> 25:49.520
他相当于是什么呢 他是相当于下边这个代码 相当于下边才是他的真正的代码

25:50.240 --> 25:56.320
最终会被软化成真正的代码 他相当于是这样子写的 ob 界new object 词

25:57.600 --> 26:00.160
要不要看一下 object 词是啥 要不要看一下

26:00.800 --> 26:01.680
你觉得他是啥

26:02.640 --> 26:05.360
你觉得这个代码 type of object 词会输出啥

26:05.920 --> 26:06.640
他会输出啥

26:07.600 --> 26:08.640
他还能输出啥

26:09.120 --> 26:10.640
他不就是一个函数吗 对不对

26:12.080 --> 26:12.960
ob 这个词 你看

26:13.680 --> 26:14.880
他不就是一个函数吗

26:16.080 --> 26:20.720
说明他是啥 他是勾造函数 看到没 他是勾造函数 他用来创建对象的

26:21.360 --> 26:22.720
创建一个空对象

26:23.200 --> 26:30.880
然后ob 界.name 等于这个ob 界.ag 等于234

26:31.600 --> 26:33.280
ob 界.gender

26:34.320 --> 26:35.520
gender 等于男

26:36.480 --> 26:39.840
上边这个代码就相当于是下边的代码

26:40.320 --> 26:41.040
相当于是一个

26:42.080 --> 26:46.080
只不过了 上面写下来更加舒服一点 对吧 语法堂 这是语法堂

26:46.240 --> 26:48.480
他写下来更加舒服 更加简洁

26:48.800 --> 26:51.600
下面这个代码的写写有点繁琐 我们不太会用这种方式

26:52.000 --> 26:54.080
但是你要知道他的本质就是这种方式

26:54.480 --> 26:55.680
本质就是这种方式

26:56.400 --> 27:00.640
没有任何一个对象 他可以不通过勾造函数创建 不可能的

27:01.040 --> 27:03.200
不可能的一定是通过勾造函数创建的

27:03.920 --> 27:05.920
有人说要抬钢了 他说这个地方

27:06.400 --> 27:07.760
不就没有通过勾造函数创建吗

27:08.480 --> 27:11.600
sorry i'm sorry 这个地方也是通过勾造函数创建的

27:11.760 --> 27:16.160
因为你这里用的是大括号 大括号相当于是啥 相当于是溜了一个ob 界的车

27:17.360 --> 27:19.920
你这个对象就相当于是溜了一个ob 界的车

27:21.120 --> 27:21.520
对吧

27:21.920 --> 27:25.920
所以说这是语法堂而已 他这里相当于是一个新的对象溜了一个ob 界的车

27:26.240 --> 27:27.680
他还是通过勾造函数创建的

27:28.320 --> 27:29.280
好 继续抬钢呗

27:29.680 --> 27:31.280
那有些人突然说 这个东西就不是

27:31.520 --> 27:33.600
这个对象你不是通过勾造函数创建的

27:35.360 --> 27:35.840
看一下

27:36.960 --> 27:38.480
他调用的是这个函数

27:39.120 --> 27:41.280
他里边有没有新对象 不是新对象

27:41.760 --> 27:43.520
这才是创建对象

27:44.160 --> 27:47.360
这个返回呢 是把这个对象的地址返回

27:47.680 --> 27:50.000
把这个地址保存到这个变量里边

27:50.640 --> 27:52.640
这才是创建对象的代码

27:53.440 --> 27:54.000
你看这意思吧

27:54.480 --> 27:55.920
这才是创建对象

27:56.160 --> 28:00.320
这具代码是在把对象的地址保存到犹疑里边

28:00.320 --> 28:01.520
它不叫创建对象

28:02.160 --> 28:02.880
你看这意思吗

28:03.840 --> 28:06.240
所以说对象一定是通过勾造函数创建的

28:06.240 --> 28:07.600
你怎么抬钢都没用

28:08.560 --> 28:08.880
好吧

28:09.440 --> 28:10.640
这是关于对象

28:10.880 --> 28:12.000
我们的数组也好

28:12.320 --> 28:14.000
什么这个这些东西也好

28:14.240 --> 28:16.880
都是通过勾造函数创建的

28:18.320 --> 28:20.320
好 了解了勾造函数的作用

28:20.640 --> 28:22.240
它就是用来创建对象的

28:22.560 --> 28:23.760
了解了这个点之后呢

28:23.840 --> 28:24.720
我们以后啊

28:24.720 --> 28:26.800
就遇到一些创建对象的场景

28:26.800 --> 28:28.320
特别是对象的属性很多

28:28.320 --> 28:29.920
而且里边有很多函数的话

28:29.920 --> 28:31.440
我们就可以写个勾造函数

28:31.680 --> 28:32.720
写个勾造函数

28:32.960 --> 28:34.000
这个勾造函数的作用呢

28:34.000 --> 28:35.120
才来帮它创建对象

28:35.360 --> 28:36.000
那么之后呢

28:36.000 --> 28:37.200
创建对象就非常简单了

28:37.200 --> 28:38.240
就用这种方式来创建

28:38.240 --> 28:39.200
就非常舒服了

28:39.760 --> 28:40.240
好吧

28:41.360 --> 28:43.200
这里再说一个问题啊

28:43.360 --> 28:47.840
就是关于这个new target

28:48.640 --> 28:49.760
这个表达式啊

28:49.760 --> 28:51.280
这个是一个很特殊的表达式

28:51.680 --> 28:53.120
这个表达式我就直接说

28:54.480 --> 28:55.520
该表达式呢

28:56.640 --> 28:57.280
这样子说吧

28:58.560 --> 29:02.080
该表达式在函数中使用

29:02.080 --> 29:03.440
是在函数中使用的

29:04.320 --> 29:05.280
返回的是什么呢

29:05.920 --> 29:07.520
返回的是

29:08.400 --> 29:11.280
当前的勾造函数

29:12.160 --> 29:13.280
返回的是一个函数

29:13.280 --> 29:14.960
这个表达式返回的是一个函数

29:15.200 --> 29:16.720
得到的是当前的勾造函数

29:17.040 --> 29:18.240
那么这个表达式呢

29:18.240 --> 29:19.120
它有两种情况

29:19.440 --> 29:20.000
但是

29:20.720 --> 29:21.360
什么情况呢

29:21.360 --> 29:22.240
就是有个但是

29:22.720 --> 29:23.360
但是呢

29:23.360 --> 29:25.840
如果该函数

29:26.480 --> 29:29.440
是不是通过new

29:30.240 --> 29:31.040
调用的

29:31.040 --> 29:33.120
就是不是通过勾造函数的那种方式调用的

29:34.320 --> 29:35.680
则返回

29:35.680 --> 29:36.240
undefined

29:37.040 --> 29:38.640
所以说它的这个特点啊

29:39.040 --> 29:40.720
通常用于什么呢

29:42.000 --> 29:42.960
用于判断

29:43.280 --> 29:44.560
这个表达式通常用于判断

29:45.200 --> 29:46.240
某个函数

29:47.360 --> 29:49.280
是否是通过new

29:50.720 --> 29:51.280
再调用

29:52.400 --> 29:52.960
什么意思

29:52.960 --> 29:54.000
我举个例子就明白了

29:54.560 --> 29:55.440
比方说

29:56.160 --> 29:56.960
就第二个吧

29:56.960 --> 29:57.440
第二个

29:58.000 --> 29:59.440
这里有个勾造函数对吧

29:59.760 --> 30:00.880
有的时候呢

30:00.880 --> 30:01.920
我防止了

30:01.920 --> 30:03.600
我怕用户它这样调用

30:04.160 --> 30:05.600
你是不能这样调用的

30:05.920 --> 30:06.480
你这样调用

30:06.480 --> 30:08.000
大家想一想这个Race指向谁

30:08.400 --> 30:08.880
对吧

30:09.120 --> 30:10.320
想想这个Race指向谁

30:11.200 --> 30:11.920
指向谁啊

30:12.160 --> 30:13.040
是不是指向window

30:13.040 --> 30:13.360
对吧

30:13.360 --> 30:14.080
直接调用函数

30:14.080 --> 30:15.280
它的Race指向window

30:17.200 --> 30:19.280
你是不能直接这样调用的

30:19.280 --> 30:20.400
是要出问题的

30:20.880 --> 30:21.680
比方说优异

30:21.680 --> 30:22.960
咱们来输出这个优异

30:24.720 --> 30:26.000
保存看一下啊

30:28.400 --> 30:29.040
有的时候呢

30:29.040 --> 30:30.480
我为了防止这一点啊

30:30.480 --> 30:32.000
防止它直接调用

30:32.000 --> 30:33.120
你看得到的是undefined

30:33.120 --> 30:34.640
它就没有得到轻的对象了

30:34.880 --> 30:36.640
为了防止它这一点怎么办呢

30:36.640 --> 30:39.120
我可以在这个函数里边判断一下

30:39.520 --> 30:40.560
判断一下啥呢

30:40.560 --> 30:41.760
判断一下这个表达式

30:42.400 --> 30:45.280
console nog new target

30:45.760 --> 30:46.960
这个特殊的表达式

30:46.960 --> 30:48.000
这个怎么跑出来了

30:48.880 --> 30:49.280
好

30:49.440 --> 30:50.320
看一下这个表达式

30:50.320 --> 30:51.360
我把这个表达式输出

30:51.360 --> 30:51.760
你看

30:52.000 --> 30:54.080
我直接调用这个函数的时候

30:54.080 --> 30:55.120
这个表达式的值

30:56.160 --> 30:56.880
undefined

30:57.120 --> 30:57.680
看没

30:57.680 --> 30:59.120
这个表达式的值是undefined

30:59.680 --> 31:00.720
如果我是

31:02.000 --> 31:03.200
用6关键值

31:03.200 --> 31:04.880
把它当成勾罩函数来调用的话

31:04.880 --> 31:05.440
你看一下

31:06.560 --> 31:06.960
保存

31:07.680 --> 31:08.160
看一下

31:08.720 --> 31:09.440
它得到的是什么

31:10.080 --> 31:10.960
得到的是啥呢

31:10.960 --> 31:13.040
得到的是这个勾罩函数本身

31:13.680 --> 31:14.880
也就是得到的是啥呢

31:15.360 --> 31:16.480
这个6点它可以刷

31:16.480 --> 31:18.080
就相当于是等约什么

31:18.880 --> 31:20.240
等约这个优异

31:20.640 --> 31:21.680
这个优异是不是函数

31:22.400 --> 31:23.680
函数也是一个地址

31:23.680 --> 31:24.640
它里边存了一个地址

31:24.640 --> 31:25.840
这里边也存了一个地址

31:25.840 --> 31:27.040
这两个地址是相等的

31:27.680 --> 31:28.480
保存看一下

31:29.200 --> 31:29.840
你看

31:30.320 --> 31:30.640
看没

31:31.280 --> 31:32.720
它存的就是勾罩函数本身

31:33.520 --> 31:34.080
因此呢

31:34.080 --> 31:35.840
我们可以通过这个东西来判断

31:35.840 --> 31:38.320
你到底是不是通过6点关键值来创建的

31:38.960 --> 31:39.280
好

31:39.280 --> 31:40.720
我们这样子可以判断

31:41.280 --> 31:43.280
如果6点 target

31:43.920 --> 31:44.160
哎

31:44.160 --> 31:46.000
为什么老是跳出来

31:46.000 --> 31:46.480
我的天呐

31:48.080 --> 31:49.200
跟这个优异相等

31:50.160 --> 31:51.200
这就是什么

31:51.200 --> 31:54.320
正常的勾罩函数调用

31:54.320 --> 31:56.640
那么你调用方式是正常的

31:56.640 --> 31:57.200
ok

31:57.200 --> 31:58.000
那我怎么办呢

31:58.000 --> 31:58.720
我就这样子写

32:00.080 --> 32:01.680
正常的调用就是这样子

32:01.680 --> 32:02.000
对吧

32:02.000 --> 32:02.560
就这样子

32:03.280 --> 32:03.680
好

32:03.680 --> 32:05.120
l是不是不正常的

32:05.440 --> 32:06.640
不正常的调用

32:06.640 --> 32:07.920
你该怎么处理就怎么处理

32:07.920 --> 32:09.440
比方说就假设

32:09.920 --> 32:11.040
假设我这里

32:11.040 --> 32:12.240
哪怕你不正常

32:12.240 --> 32:14.000
我也要给你返回一个正常的用户

32:14.000 --> 32:15.440
我多写点代码

32:15.440 --> 32:16.880
让你用起来简单一点

32:17.200 --> 32:18.640
那么不正常的时候

32:18.960 --> 32:20.080
我就给你返回

32:20.080 --> 32:21.040
因为不正常的时候

32:21.040 --> 32:22.080
它要得到一个对象

32:22.080 --> 32:22.640
对吧

32:22.640 --> 32:23.760
我叫给你返回

32:23.760 --> 32:24.240
返回的时候

32:24.240 --> 32:25.840
name age

32:25.840 --> 32:26.880
简单对吧

32:26.880 --> 32:27.360
简单

32:27.760 --> 32:28.400
好

32:28.400 --> 32:29.040
然后呢

32:29.040 --> 32:30.240
把这个函数拿过来

32:30.240 --> 32:30.720
对吧

32:30.720 --> 32:31.840
把这个函数拿过来

32:32.640 --> 32:33.120
你看看

32:33.520 --> 32:34.480
把这个函数拿过来

32:35.200 --> 32:35.680
对吧

32:35.680 --> 32:36.640
我可以这样写吧

32:36.640 --> 32:37.360
没问题吧

32:37.360 --> 32:38.400
就是你是真

32:38.400 --> 32:40.240
如果你是正常的勾罩函数调用

32:40.240 --> 32:41.200
那么进这个判断

32:41.760 --> 32:42.480
进这个判断

32:43.120 --> 32:43.840
我给你一个

32:44.240 --> 32:45.920
就是正常的勾罩函数写法

32:46.400 --> 32:48.160
如果你不是正常的勾罩函数调用

32:48.240 --> 32:49.520
那我给你返回一个对象

32:50.400 --> 32:51.440
可以达到一样的效果

32:52.240 --> 32:53.360
这里有代码重复

32:53.360 --> 32:54.160
这里有代码重复

32:54.160 --> 32:54.880
就这一块重复了

32:54.880 --> 32:55.280
对吧

32:55.280 --> 32:55.920
这一块重复了

32:55.920 --> 32:57.280
那么我们可以这样子来处理

32:58.960 --> 32:59.680
这样子来处理

33:00.400 --> 33:01.840
我们是这里的定一个函数

33:02.320 --> 33:02.960
定一个函数

33:02.960 --> 33:03.280
temp

33:04.000 --> 33:04.640
定一个函数

33:06.000 --> 33:07.680
当这个函数的文法太多了

33:07.680 --> 33:08.640
定一个函数

33:08.640 --> 33:10.000
然后把这个函数放这

33:10.000 --> 33:10.480
对吧

33:10.480 --> 33:11.760
把函数复制过来

33:11.760 --> 33:12.880
因为引用传递嘛

33:12.880 --> 33:13.360
对吧

33:13.360 --> 33:14.800
地址传递是一样的

33:14.800 --> 33:15.520
那这边呢

33:15.520 --> 33:16.960
也是直接复制过来

33:17.360 --> 33:18.400
直接复制过来

33:18.400 --> 33:19.600
你看这样子没重复了

33:20.320 --> 33:20.640
好吧

33:21.200 --> 33:21.920
OK没问题吧

33:22.480 --> 33:23.040
没问题吧

33:23.520 --> 33:24.880
好那么这样子一来了

33:24.880 --> 33:27.440
我这个地方可以用6来调用

33:27.440 --> 33:28.880
你看6没问题

33:29.520 --> 33:31.280
也可以不加这个6

33:31.280 --> 33:32.560
也可以直接调用

33:32.560 --> 33:33.840
也可以得到一个对象

33:33.840 --> 33:34.240
保存

33:34.720 --> 33:36.240
你看也没问题

33:36.240 --> 33:36.880
看没有

33:36.880 --> 33:37.520
也没问题

33:38.000 --> 33:38.720
就都没问题

33:38.720 --> 33:40.240
加6也可以不加6也可以

33:41.200 --> 33:43.360
当然有没有区别还是有点点区别的

33:43.360 --> 33:44.240
我们以后会讲

33:44.720 --> 33:46.400
现阶段的对我们来说

33:46.480 --> 33:47.600
可以认为没有区别

33:48.720 --> 33:50.560
其实数组它就是这样子玩的

33:51.520 --> 33:52.000
数组

33:53.040 --> 33:54.400
数组就是这样子玩的

33:54.400 --> 33:55.200
看着啊

33:55.200 --> 33:56.160
看着我们这样子吧

33:57.200 --> 33:58.080
6一个二位

33:59.040 --> 34:00.000
写一个10

34:00.880 --> 34:02.400
得到一个长度为10的数组

34:02.400 --> 34:02.720
看没有

34:03.520 --> 34:04.320
返回一个对象

34:04.880 --> 34:05.680
长度为10

34:06.240 --> 34:07.200
没有属性嘛

34:07.200 --> 34:08.160
就是吸冲数组

34:09.120 --> 34:10.480
也可以不使用6

34:10.480 --> 34:11.840
数组给你处理过的

34:11.840 --> 34:12.480
不使用6

34:12.480 --> 34:13.520
你看是不是也可以

34:14.480 --> 34:15.760
得到效果是一样的

34:15.840 --> 34:16.960
因为它可以处理过的

34:16.960 --> 34:18.000
它怎么处理的

34:18.000 --> 34:19.200
它就用这种方式

34:19.200 --> 34:20.080
6点target

34:20.480 --> 34:21.280
6点target

34:22.560 --> 34:22.800
好

34:22.800 --> 34:23.680
这是关于这个

34:24.480 --> 34:24.880
OK

34:24.880 --> 34:26.960
这是这节课咱们学习的构造函数

34:27.280 --> 34:28.240
有了这个东西过后

34:28.240 --> 34:29.280
以后我们创建对象了

34:29.280 --> 34:30.400
就可以专门来写一个函数

34:30.400 --> 34:31.680
来帮助我们创建对象了

34:32.000 --> 34:33.200
来帮助我们创建对象了

34:33.680 --> 34:33.920
好

34:33.920 --> 34:36.080
这里我们这节课有个作业

34:39.600 --> 34:39.920
作业

34:43.520 --> 34:44.640
我们做这个作业吧

34:45.520 --> 34:47.120
这以前我在java的时候呢

34:47.120 --> 34:48.560
实际上java的时候呢

34:49.280 --> 34:51.200
就是学到函数的一块

34:51.200 --> 34:52.560
学到对象的一块的时候

34:52.560 --> 34:53.840
让同学们做到这个作业

34:54.160 --> 34:56.480
就是一个非常简单的一个

34:57.200 --> 34:58.880
叫做英雄打怪兽

34:59.440 --> 35:01.520
英雄打怪兽

35:03.440 --> 35:04.320
的小游戏

35:04.320 --> 35:05.200
小游戏

35:05.200 --> 35:06.480
其实没什么小游戏了

35:06.480 --> 35:07.200
都没法玩

35:07.200 --> 35:08.240
它就是看一个结果

35:08.240 --> 35:09.120
看一个结果

35:09.600 --> 35:10.400
什么意思呢

35:10.800 --> 35:13.680
就是英雄和怪兽

35:13.760 --> 35:15.200
他们是对象

35:15.200 --> 35:16.320
他们都是对象

35:16.320 --> 35:18.240
都可以认为是同一个对象

35:18.240 --> 35:19.760
他们都具有攻击力

35:20.880 --> 35:23.360
英雄和怪兽

35:24.080 --> 35:26.320
都具有攻击力

35:27.120 --> 35:29.040
防御力和

35:29.520 --> 35:30.240
和什么呢

35:30.560 --> 35:31.760
和暴击

35:32.080 --> 35:32.640
几率

35:32.640 --> 35:33.680
暴击几率

35:34.800 --> 35:35.120
好

35:35.120 --> 35:35.680
这是

35:36.640 --> 35:38.000
相当于是他们有属性的

35:38.000 --> 35:38.560
攻击力

35:38.560 --> 35:40.400
防御力和暴击几率

35:41.280 --> 35:42.880
然后暴击就翻倍吧

35:43.840 --> 35:44.960
暴击时

35:45.840 --> 35:46.800
伤害翻倍

35:48.400 --> 35:49.200
伤害翻倍

35:51.680 --> 35:52.480
攻击时

35:52.480 --> 35:53.600
就是攻击时

35:55.040 --> 35:56.720
攻击伤害等于什么呢

35:57.600 --> 35:58.080
伤害

35:58.800 --> 36:00.080
等于我这里干脆

36:00.640 --> 36:01.840
跟这个作业我就

36:01.840 --> 36:03.600
这节课课上他把做了吧

36:03.600 --> 36:04.960
因为我觉得这个作业

36:04.960 --> 36:06.480
对大家有可能会有点难度

36:06.480 --> 36:07.520
当然你可以暂停视频

36:07.520 --> 36:08.640
你自己先去做一遍

36:08.640 --> 36:09.840
肯定是有帮助的对比

36:10.400 --> 36:12.160
攻击伤害了等于攻击力

36:13.120 --> 36:14.400
减去防御力

36:16.000 --> 36:16.560
减去防御力

36:16.560 --> 36:17.600
但是不能为附属

36:17.600 --> 36:18.560
不能为附属

36:18.560 --> 36:20.240
不能至少为一

36:20.240 --> 36:21.520
攻击伤害至少为一

36:22.080 --> 36:23.120
减去防御力

36:23.120 --> 36:24.000
就是伤害

36:24.000 --> 36:24.800
暴击的时候

36:24.800 --> 36:25.520
伤害就翻倍

36:25.520 --> 36:25.840
对吧

36:25.840 --> 36:26.560
伤害翻倍

36:27.280 --> 36:27.440
好

36:27.440 --> 36:28.320
不是攻击力翻倍

36:28.320 --> 36:29.200
是伤害翻倍

36:29.760 --> 36:30.320
好

36:30.320 --> 36:31.280
攻击伤害

36:32.000 --> 36:32.640
注意少

36:33.440 --> 36:34.080
注意少

36:34.400 --> 36:34.800
唯一

36:35.280 --> 36:36.800
至少能够造成一点伤害

36:37.200 --> 36:37.920
一点伤害

36:38.720 --> 36:39.920
还有一个生命值对吧

36:39.920 --> 36:40.560
生命值

36:42.240 --> 36:42.960
生命值

36:45.280 --> 36:46.000
生命值

36:47.760 --> 36:48.320
好

36:48.320 --> 36:49.280
然后呢

36:49.280 --> 36:50.240
创建

36:50.240 --> 36:51.920
创建让你创建英雄

36:52.560 --> 36:54.320
和一个怪兽

36:54.320 --> 36:56.080
创建一个英雄和一个怪兽

36:57.920 --> 36:59.760
然后让他们互相攻击

36:59.760 --> 37:01.840
让他们互相攻击

37:02.400 --> 37:03.200
攻击

37:03.200 --> 37:05.360
直到一方死亡

37:06.000 --> 37:06.880
什么叫死亡

37:06.880 --> 37:08.480
就是生命没了

37:08.480 --> 37:09.280
生命没有了

37:09.280 --> 37:10.080
就是一方死亡

37:10.560 --> 37:12.000
直到一方死亡为止

37:12.560 --> 37:13.760
然后输出

37:13.760 --> 37:15.440
整个攻击

37:16.240 --> 37:16.640
过程

37:17.920 --> 37:18.800
就做这么一件事

37:19.840 --> 37:20.080
好

37:20.080 --> 37:21.120
我们该怎么来做呢

37:22.000 --> 37:23.120
大家可以自己想一想

37:23.120 --> 37:24.400
你会用什么方式来做

37:24.400 --> 37:25.600
当然做法非常非常多

37:26.160 --> 37:26.240
好

37:26.240 --> 37:26.720
这节课呢

37:26.720 --> 37:28.160
我们用构造函数来把它做一遍

37:28.560 --> 37:28.640
好

37:28.640 --> 37:29.440
这里我就直接说了

37:29.760 --> 37:30.240
直接说了

37:31.200 --> 37:31.520
好

37:31.520 --> 37:32.560
我这里就直接建一个

37:32.560 --> 37:33.200
建一个

37:34.000 --> 37:34.320
算了

37:34.320 --> 37:35.760
不建一个课程了

37:35.760 --> 37:37.040
直接在这里清建

37:37.040 --> 37:37.360
清建

37:37.920 --> 37:38.560
作业讲解

37:39.920 --> 37:40.720
因为这个作业呢

37:40.720 --> 37:41.760
我觉得很

37:41.840 --> 37:42.800
刚开始接触

37:42.800 --> 37:43.920
接触这个构造函数呢

37:43.920 --> 37:44.560
你们不一定

37:45.360 --> 37:46.720
有这个思维能写得出来

37:46.720 --> 37:47.840
我给大家写一遍吧

37:47.840 --> 37:48.320
写一遍

37:49.360 --> 37:49.600
好

37:49.600 --> 37:50.080
这里呢

37:50.080 --> 37:50.720
我们首先

37:51.360 --> 37:52.720
创建一个构造函数

37:52.720 --> 37:54.960
我们认为英雄和怪兽是一样的

37:54.960 --> 37:56.240
只是名字不一样而已

37:56.240 --> 37:56.480
对吧

37:56.480 --> 37:58.000
一个名字叫做英雄

37:58.000 --> 37:58.880
一个名字叫做怪兽

37:58.880 --> 38:00.080
其他都一样对吧

38:00.080 --> 38:00.880
其他都一样

38:00.880 --> 38:01.120
好

38:01.120 --> 38:02.240
我们就写一个构造函数

38:02.240 --> 38:02.960
给大家取名为

38:02.960 --> 38:04.000
character

38:04.720 --> 38:05.360
表示什么

38:05.360 --> 38:06.800
表示游戏角色

38:09.940 --> 38:11.460
游戏角色的构造函数

38:12.420 --> 38:14.020
我还是写个介石吧

38:14.020 --> 38:15.620
还是写个介石

38:15.620 --> 38:17.780
不然的话没有办法打那个

38:17.780 --> 38:18.500
文档注释

38:18.500 --> 38:20.100
我觉得挺不习惯的

38:20.100 --> 38:21.300
作业讲解

38:21.300 --> 38:22.100
叫介石

38:25.420 --> 38:25.580
好

38:25.580 --> 38:26.140
这个页面上

38:26.140 --> 38:27.180
去引用这个介石

38:28.220 --> 38:28.700
script

38:29.180 --> 38:29.820
src

38:30.620 --> 38:31.340
作业讲解

38:33.180 --> 38:33.420
好

38:33.420 --> 38:33.820
这里边呢

38:33.820 --> 38:35.340
我们写个构造函数

38:35.340 --> 38:36.220
叫character

38:37.500 --> 38:38.380
打个注释

38:38.380 --> 38:39.180
什么意思呢

38:39.180 --> 38:39.820
表示的是

38:40.940 --> 38:42.220
游戏角色

38:42.300 --> 38:44.620
游戏角色的构造函数

38:45.340 --> 38:45.580
好

38:45.580 --> 38:46.380
这个构造函数

38:46.380 --> 38:47.180
它就创

38:47.180 --> 38:47.740
六一个

38:47.740 --> 38:49.260
它就可以创建一个游戏角色

38:49.260 --> 38:50.380
当然我们可以创建英雄

38:50.380 --> 38:51.340
也可以创建怪兽

38:51.340 --> 38:51.820
对吧

38:51.820 --> 38:52.540
可以创建英雄

38:52.540 --> 38:53.660
可以创建怪兽

38:53.660 --> 38:53.820
好

38:53.820 --> 38:55.020
那么这个游戏角色里面

38:55.020 --> 38:56.620
是不是要告诉我们一些东西

38:56.620 --> 38:57.820
对不对

38:57.820 --> 38:59.500
角色的名称是不是要告诉我

39:00.060 --> 39:01.420
你是英雄还是怪兽

39:01.420 --> 39:02.700
名字要告诉我

39:02.700 --> 39:04.620
然后你的攻击力是不是要告诉我

39:04.620 --> 39:04.940
对吧

39:04.940 --> 39:05.980
攻击力要告诉我

39:05.980 --> 39:08.700
你的防御力defence要告诉我吧

39:08.700 --> 39:09.500
这是攻击力

39:09.500 --> 39:10.220
这是防御力

39:11.020 --> 39:11.900
防御力要告诉我

39:12.380 --> 39:13.980
对 单词你们可以自己查一下

39:13.980 --> 39:14.780
单词

39:14.780 --> 39:16.780
我们其实学编程的时候

39:16.780 --> 39:18.860
学的过程中也可以认识不少的单词

39:18.860 --> 39:20.060
像有些单词呢

39:20.060 --> 39:22.540
以前我在读大学的时候

39:22.540 --> 39:23.900
英语也不怎么样

39:23.900 --> 39:24.460
也不怎么样

39:24.460 --> 39:25.180
就过了个世纪

39:26.620 --> 39:28.940
后边慢慢好了很多了

39:28.940 --> 39:31.580
主要是在读英文文档的时候好了很多了

39:31.580 --> 39:32.060
为什么呢

39:32.060 --> 39:33.660
因为我们平时写代码的时候

39:34.700 --> 39:36.220
这把一些单词用的就差不多了

39:36.220 --> 39:37.500
就用的差不多了

39:37.500 --> 39:39.340
那样表示英雄的名字

39:39.340 --> 39:39.820
attack

39:39.820 --> 39:41.100
有的时候不知道就查一下

39:41.260 --> 39:42.540
查一下就记住了

39:42.540 --> 39:43.420
这是攻击力

39:43.420 --> 39:44.380
防御力

39:44.380 --> 39:45.020
防御力

39:45.020 --> 39:46.460
还有生命值对吧

39:46.460 --> 39:47.580
目前的生命值

39:47.580 --> 39:48.780
初始生命值HP

39:50.540 --> 39:51.580
然后还有什么呢

39:51.580 --> 39:52.860
还有暴击几率

39:52.860 --> 39:54.380
暴击几率

39:54.380 --> 39:54.940
暴击

39:55.820 --> 39:56.700
暴击

39:56.700 --> 39:59.180
我记得是一个C开口的单词

39:59.180 --> 39:59.980
我现在忘了

39:59.980 --> 40:02.140
因为用的少的话就勇于忘记

40:02.140 --> 40:02.620
暴击

40:03.900 --> 40:05.020
我记得是一个C

40:05.020 --> 40:06.700
CRETE是什么东西

40:06.700 --> 40:08.700
好像是CRETE

40:09.660 --> 40:11.340
CRETE

40:11.340 --> 40:11.980
RETE

40:11.980 --> 40:13.340
小写

40:13.340 --> 40:15.260
打上个注射吧

40:15.260 --> 40:16.380
还是把这些注射打好

40:16.380 --> 40:17.820
打上注射

40:17.820 --> 40:19.020
免得忘了

40:19.020 --> 40:22.540
这是创建一个游戏角色

40:22.540 --> 40:24.460
这是名字

40:24.460 --> 40:25.180
角色名

40:25.180 --> 40:26.300
角色名

40:26.300 --> 40:27.740
这是攻击力

40:27.740 --> 40:29.740
这是防御力

40:29.740 --> 40:31.500
这是生命值

40:31.500 --> 40:32.460
生命值

40:32.460 --> 40:35.820
这是暴击率

40:35.820 --> 40:36.700
暴击率

40:37.660 --> 40:39.820
暴击率的话

40:39.820 --> 40:42.460
我们可以用这样子打个注射

40:42.460 --> 40:44.060
0到100

40:44.060 --> 40:45.020
0到100

40:46.620 --> 40:47.020
OK

40:47.020 --> 40:47.820
我们就写好了

40:47.820 --> 40:48.940
就写好了

40:48.940 --> 40:50.300
接下来我们来创建

40:50.300 --> 40:51.100
创建这个对象

40:51.100 --> 40:52.620
因为我们清楚的知道

40:52.620 --> 40:54.700
这个函数的作用就是

40:54.700 --> 40:55.420
就是勾到函数

40:55.420 --> 40:56.380
我们就不考虑什么

40:56.380 --> 40:57.820
它直接调用的情况了

40:57.820 --> 40:58.620
我们就希望

40:58.620 --> 40:59.900
因为我是把手这么大写了

40:59.900 --> 41:01.420
我就希望它用6来

41:01.420 --> 41:02.860
6来调用这个勾到函数

41:02.860 --> 41:04.140
所以说我们这里就直接写了

41:04.140 --> 41:05.740
Z is their name

41:05.900 --> 41:07.580
Z is their attack

41:07.580 --> 41:09.260
等于attack

41:09.260 --> 41:11.020
就是极限性的劳动了

41:11.020 --> 41:11.500
defense

41:11.500 --> 41:12.940
等于defense

41:12.940 --> 41:14.940
给这个对象的一些属性负责

41:14.940 --> 41:16.380
HP等于HP

41:16.380 --> 41:17.820
Z is the crazy

41:19.100 --> 41:19.580
read

41:19.580 --> 41:20.940
等于crease read

41:20.940 --> 41:22.940
好属性负责

41:22.940 --> 41:24.460
好这个新创建的对象里边

41:24.460 --> 41:25.580
有没有函数呢

41:25.580 --> 41:27.100
我们先看一下吧

41:27.100 --> 41:27.900
好先看一下

41:27.900 --> 41:31.440
运行出来

41:31.440 --> 41:32.000
F12

41:33.840 --> 41:34.800
好看一下

41:34.800 --> 41:36.000
我们创建一个英雄

41:36.000 --> 41:37.920
创建一个怪兽

41:38.880 --> 41:39.920
6一个英雄

41:39.920 --> 41:41.200
character

41:41.200 --> 41:42.480
6一个英雄

41:42.480 --> 41:43.760
这里呢

41:43.760 --> 41:44.320
这样子

41:48.320 --> 41:49.200
6一个英雄

41:49.200 --> 41:50.000
创建一个英雄

41:50.000 --> 41:51.120
把个英雄输出

41:51.120 --> 41:52.400
然后再创建一个怪兽

41:52.400 --> 41:53.200
把怪兽输出

41:54.240 --> 41:55.040
monster

41:55.040 --> 41:57.760
你看我们以后创建的对象就非常方便了

41:58.480 --> 41:59.200
创建英雄

41:59.200 --> 42:00.080
创建怪兽

42:00.080 --> 42:01.680
英雄里边我们给它写上

42:01.680 --> 42:04.640
英雄攻击定了为100

42:04.720 --> 42:05.920
防御了20

42:05.920 --> 42:08.080
生命值了为500

42:08.080 --> 42:09.200
500

42:09.200 --> 42:09.520
好

42:09.520 --> 42:09.920
然后呢

42:09.920 --> 42:11.680
暴击率为30

42:11.680 --> 42:12.240
30

42:13.520 --> 42:13.760
好

42:13.760 --> 42:14.000
最后

42:14.000 --> 42:14.320
然后呢

42:14.320 --> 42:15.120
写一个怪兽

42:15.120 --> 42:15.600
怪兽

42:17.120 --> 42:17.520
怪兽

42:20.670 --> 42:21.310
好

42:21.310 --> 42:21.790
然后呢

42:22.830 --> 42:23.630
就这样子吧

42:23.630 --> 42:24.590
别英雄怪兽了

42:24.590 --> 42:25.790
就就什么

42:25.790 --> 42:27.870
就乘哥和邓哥吧

42:27.870 --> 42:28.510
乘哥邓哥

42:30.030 --> 42:30.510
然后呢

42:31.310 --> 42:33.070
乘哥的攻击力

42:33.070 --> 42:34.510
邓哥稍微重一点

42:34.510 --> 42:35.390
攻击力要高一点

42:36.270 --> 42:37.870
防御力要高一点

42:37.870 --> 42:38.430
事实

42:38.430 --> 42:39.470
事实的防御力

42:39.470 --> 42:39.710
好

42:39.710 --> 42:40.590
生命值呢

42:40.590 --> 42:42.430
这要弱一点

42:42.430 --> 42:43.230
要弱一点

42:43.230 --> 42:44.590
比方说300

42:44.590 --> 42:45.230
好

42:45.230 --> 42:45.710
然后呢

42:45.710 --> 42:46.430
暴击率呢

42:46.430 --> 42:47.230
要小一点

42:47.230 --> 42:48.110
比方暴击率呢

42:48.110 --> 42:49.710
只有5%

42:50.510 --> 42:51.230
好吧

42:51.230 --> 42:51.790
就写好了

42:51.790 --> 42:54.110
我们把这两个角色输出

42:54.110 --> 42:54.670
你看

42:54.670 --> 42:55.230
就输出了

42:55.230 --> 42:55.630
对吧

42:55.630 --> 42:56.190
就输出了

42:57.070 --> 42:57.390
好

42:57.390 --> 42:57.790
然后呢

42:57.790 --> 42:58.910
我们这里边呢

42:58.910 --> 42:59.470
这里边

42:59.470 --> 43:00.990
我们再写给这个对象的

43:00.990 --> 43:01.870
加一些函数

43:01.870 --> 43:03.070
可以方便调用

43:03.070 --> 43:03.230
好

43:03.230 --> 43:04.110
比方说函数

43:05.070 --> 43:06.830
首先加一个函数

43:06.830 --> 43:07.710
就 say hello

43:07.710 --> 43:08.750
打个招呼

43:08.750 --> 43:09.790
打个招呼

43:09.790 --> 43:10.830
或者叫做print

43:10.830 --> 43:11.630
打印

43:11.630 --> 43:13.070
把这个信息打印出来

43:13.070 --> 43:14.270
打印出来

43:14.270 --> 43:15.070
放个息

43:15.070 --> 43:16.670
打印信息

43:16.670 --> 43:17.950
给大家注释

43:19.230 --> 43:20.910
打印信息

43:20.910 --> 43:21.710
好

43:21.710 --> 43:22.990
那么有了这个东西过后呢

43:22.990 --> 43:23.390
我们这里

43:23.390 --> 43:24.670
here的就可以调用

43:24.670 --> 43:27.230
print打印这个英雄的信息

43:27.230 --> 43:27.630
对吧

43:27.630 --> 43:28.670
然后monster呢

43:28.670 --> 43:29.390
也可以调用

43:29.390 --> 43:30.590
monster print

43:30.590 --> 43:32.190
打印这个怪兽的信息

43:32.190 --> 43:32.590
对吧

43:32.590 --> 43:33.710
就可以打印信息了

43:34.670 --> 43:35.070
好

43:35.070 --> 43:35.470
然后呢

43:35.470 --> 43:36.590
这个函数里边写上了

43:36.590 --> 43:37.870
就是得到当前对象

43:37.870 --> 43:38.110
对吧

43:38.110 --> 43:38.670
谁调用他

43:38.670 --> 43:40.110
他就打印谁

43:40.110 --> 43:41.950
得到当前对象的什么了

43:41.950 --> 43:43.870
得到当前对象的这个

43:45.070 --> 43:46.350
一些属性把他打印出来

43:47.950 --> 43:48.510
打印

43:48.510 --> 43:49.710
直接输出console log

43:51.310 --> 43:52.110
好

43:52.110 --> 43:53.150
输出

43:53.150 --> 43:54.430
先是名字

43:54.430 --> 43:55.230
zster name

43:56.110 --> 43:56.990
然后写钢T

43:56.990 --> 43:57.630
写钢T

43:58.270 --> 43:59.550
然后攻击力

43:59.550 --> 44:00.270
攻击力

44:00.270 --> 44:00.670
冒号

44:02.750 --> 44:03.470
zster

44:03.630 --> 44:04.110
attack

44:04.910 --> 44:05.310
然后呢

44:05.310 --> 44:06.350
防御力

44:06.350 --> 44:06.910
写钢T

44:09.150 --> 44:09.870
防御

44:10.590 --> 44:11.310
防御力

44:12.190 --> 44:13.870
或者是防御攻击

44:13.870 --> 44:14.270
攻击

44:16.110 --> 44:16.910
防御

44:16.910 --> 44:19.550
防御的话是zs defense

44:20.270 --> 44:20.510
好

44:20.510 --> 44:20.990
然后呢

44:22.190 --> 44:22.750
写钢T

44:22.750 --> 44:23.550
写钢T是字表

44:23.550 --> 44:24.270
服务的对齐

44:24.910 --> 44:26.430
然后防御生命值

44:26.430 --> 44:28.190
我们生命值写前面吧

44:28.190 --> 44:28.590
生命

44:29.390 --> 44:30.910
生命值写前面

44:32.350 --> 44:32.830
zs

44:33.630 --> 44:34.830
zs叫HP

44:34.830 --> 44:35.710
写钢T

44:36.510 --> 44:37.390
接下来啊

44:37.390 --> 44:38.270
生命防御

44:38.270 --> 44:39.070
暴击

44:39.070 --> 44:39.710
暴击

44:40.510 --> 44:41.070
暴击

44:41.790 --> 44:42.190
力

44:42.670 --> 44:43.230
暴击力

44:44.350 --> 44:44.910
好

44:44.910 --> 44:45.630
等于多少呢

44:45.630 --> 44:46.510
对于zs点

44:47.230 --> 44:48.510
create rate

44:48.510 --> 44:49.390
加上个百分号

44:50.350 --> 44:50.910
好了

44:50.910 --> 44:51.550
我们这样子呢

44:51.550 --> 44:53.070
就写了一个打印的函数

44:53.070 --> 44:54.110
我们之后要打印的时候

44:54.110 --> 44:55.550
就没有必要重新去写一遍了

44:55.550 --> 44:55.790
对吧

44:55.790 --> 44:57.550
直接调用这个函数就可以打印了

44:57.550 --> 44:57.710
好

44:57.710 --> 44:58.350
保存看一下

44:59.070 --> 44:59.470
你看

45:00.110 --> 45:01.150
这样子是不是舒服多了

45:01.150 --> 45:01.630
对不对

45:01.630 --> 45:02.350
舒服很多了

45:02.830 --> 45:03.070
好

45:03.470 --> 45:04.190
两个对战嘛

45:04.190 --> 45:04.670
对战

45:05.310 --> 45:07.230
我们中间还可以加上一个

45:07.230 --> 45:07.870
加上一个什么

45:07.870 --> 45:09.310
加上一个vs

45:09.870 --> 45:10.350
vs

45:12.190 --> 45:13.550
乘个vs

45:13.550 --> 45:14.030
凳格

45:15.630 --> 45:15.950
好

45:15.950 --> 45:16.830
接下来

45:16.830 --> 45:18.350
我们是不是说开始攻击了

45:18.350 --> 45:19.150
不断的开始攻击

45:19.150 --> 45:19.550
于是呢

45:19.550 --> 45:20.190
我这里呢

45:20.190 --> 45:21.550
再给大家一个函数

45:21.550 --> 45:22.270
就是attack

45:23.390 --> 45:24.670
叫做hit吧

45:24.670 --> 45:24.990
hit

45:24.990 --> 45:25.950
attack已经变成

45:25.950 --> 45:26.830
已经是一个属性了

45:26.830 --> 45:26.990
对吧

45:26.990 --> 45:28.110
换一个名字

45:28.110 --> 45:28.750
hit

45:28.750 --> 45:29.230
打

45:29.230 --> 45:29.790
打谁呢

45:30.590 --> 45:31.150
一个函数

45:32.030 --> 45:32.830
好

45:32.910 --> 45:35.150
当前这个角色要攻击

45:35.150 --> 45:35.790
攻击谁呢

45:35.790 --> 45:37.550
是不是要给我另一个角色啊

45:37.550 --> 45:38.990
你要给我另一个角色

45:38.990 --> 45:39.630
我来打他

45:39.630 --> 45:39.950
对吧

45:39.950 --> 45:40.990
我不能打自己呗

45:40.990 --> 45:41.230
好

45:41.230 --> 45:42.270
打自己有什么用呢

45:42.270 --> 45:43.230
我打别人

45:43.230 --> 45:44.830
所以说你要给我一个东西

45:44.830 --> 45:45.470
给我一个东西

45:45.470 --> 45:46.430
我要打他

45:46.430 --> 45:46.910
好

45:46.910 --> 45:47.870
给我一个cavator

45:50.110 --> 45:51.710
或者是ctr吧

45:53.390 --> 45:53.630
好

45:53.630 --> 45:54.430
这里打个注释啊

45:55.230 --> 45:56.750
这个表示攻击

45:56.750 --> 45:57.310
攻击

45:57.950 --> 45:58.510
好

45:58.510 --> 45:59.230
这个地方呢

45:59.230 --> 45:59.550
pyrus

46:00.510 --> 46:04.270
ctl

46:05.550 --> 46:05.710
好

46:05.710 --> 46:06.590
这个表示了什么呢

46:06.590 --> 46:07.710
攻击对象

46:07.710 --> 46:08.350
攻击对象

46:08.350 --> 46:09.390
你要攻击谁

46:09.390 --> 46:10.030
你攻击他

46:10.830 --> 46:12.510
我去攻击他

46:12.510 --> 46:13.390
要这样理解啊

46:13.390 --> 46:14.430
这个函数的作用是

46:14.430 --> 46:15.470
我去攻击他

46:16.030 --> 46:16.990
写这么一个函数

46:16.990 --> 46:17.950
那到时候我调用的时候

46:17.950 --> 46:18.510
怎么调用呢

46:18.510 --> 46:19.230
你看着啊

46:19.230 --> 46:20.270
到时候就是

46:20.270 --> 46:21.390
乘鸽打凳鸽的时候

46:21.390 --> 46:22.030
就是hero

46:22.910 --> 46:23.150
hit

46:23.710 --> 46:24.670
凳鸽 monster

46:24.670 --> 46:25.390
对吧

46:25.390 --> 46:26.590
传心来就完事了

46:26.590 --> 46:27.550
他去打他

46:27.550 --> 46:27.870
对吧

46:27.870 --> 46:28.830
他去打他

46:28.830 --> 46:29.470
就完事了

46:30.270 --> 46:30.670
好

46:30.670 --> 46:32.030
那你这里面怎么打呢

46:32.590 --> 46:33.550
我要去攻击他

46:33.550 --> 46:34.910
怎么攻击呢

46:34.910 --> 46:36.110
就是当前

46:36.110 --> 46:37.070
我首先算伤害

46:37.070 --> 46:37.390
对吧

46:37.390 --> 46:37.950
算伤害

46:38.670 --> 46:39.230
伤害呢

46:39.230 --> 46:40.030
就是damage

46:40.990 --> 46:41.950
伤害

46:41.950 --> 46:43.070
伤害等于什么呢

46:43.070 --> 46:44.110
当前的

46:45.070 --> 46:45.870
就是我

46:45.870 --> 46:46.670
我要打他嘛

46:46.670 --> 46:47.230
对吧

46:47.230 --> 46:48.270
我的攻击力

46:49.230 --> 46:49.790
谁调用

46:49.790 --> 46:50.670
就是我就是谁

46:51.310 --> 46:52.270
英雄调用

46:52.270 --> 46:52.590
hit

46:52.590 --> 46:53.950
那么我就是英雄

46:53.950 --> 46:55.070
monster调用 hit

46:55.070 --> 46:55.230
呢

46:55.950 --> 46:56.590
就是比方说

46:56.590 --> 46:57.310
我们还会写

46:57.310 --> 46:57.790
monster

46:58.350 --> 46:59.150
调用 hit

46:59.230 --> 46:59.870
打英雄

46:59.870 --> 47:00.270
对吧

47:00.270 --> 47:01.150
反过来打

47:01.150 --> 47:02.030
你看这个

47:02.030 --> 47:03.230
用对象的这种

47:03.230 --> 47:03.870
方式来开发

47:03.870 --> 47:04.830
是不是简单多了

47:04.830 --> 47:06.350
英雄打怪兽

47:06.350 --> 47:07.390
monster打英雄

47:07.390 --> 47:07.950
你看

47:07.950 --> 47:08.910
读起来也很好读

47:10.590 --> 47:11.470
没问题吧

47:11.470 --> 47:12.510
没问题啊

47:12.510 --> 47:12.990
好

47:12.990 --> 47:13.790
然后我去

47:13.790 --> 47:14.750
我去打他

47:14.750 --> 47:15.870
那么我的攻击力

47:15.870 --> 47:16.750
去检查了

47:16.750 --> 47:18.030
减他的防御力

47:18.030 --> 47:18.750
对吧

47:18.750 --> 47:19.790
减他的防御力

47:19.790 --> 47:20.750
可以计算出伤害

47:21.550 --> 47:22.110
好

47:22.110 --> 47:22.990
那么看一下

47:22.990 --> 47:24.270
有没有暴击

47:24.270 --> 47:26.670
判断是否有暴击

47:26.670 --> 47:27.470
是否有暴击

47:28.430 --> 47:29.230
那么怎么来判断

47:29.230 --> 47:30.430
是否有暴击呢

47:30.430 --> 47:31.470
暴击

47:31.470 --> 47:33.470
他的取值是零到100

47:33.470 --> 47:34.030
对吧

47:34.030 --> 47:35.950
把它换成小数是什么

47:35.950 --> 47:37.230
把它换成小数

47:38.510 --> 47:38.910
Rate

47:38.910 --> 47:39.550
换成小数

47:39.550 --> 47:40.270
是不是

47:40.270 --> 47:41.950
当前的暴击率

47:41.950 --> 47:42.590
暴击率

47:43.470 --> 47:44.270
干嘛呢

47:44.270 --> 47:45.070
除以100

47:45.070 --> 47:46.430
是不是变成小数了

47:46.430 --> 47:46.990
变成小数

47:46.990 --> 47:48.190
更加容易计算

47:48.190 --> 47:49.390
因为它是百分比嘛

47:49.390 --> 47:50.590
所以说把它变成小数

47:51.870 --> 47:52.110
好

47:52.110 --> 47:53.070
把它变成小数过后

47:53.070 --> 47:53.550
假设

47:54.670 --> 47:55.150
假设

47:55.870 --> 47:57.710
假设它的暴击击率是30

47:57.710 --> 47:58.590
那么变成小数过后

47:58.590 --> 47:59.710
是不是零点三

47:59.710 --> 48:00.030
对不对

48:00.030 --> 48:01.230
零点三

48:01.230 --> 48:03.070
而我们之前学过这么一个东西

48:03.070 --> 48:04.510
Mask and write them

48:04.510 --> 48:06.590
他的取值范围是不是零到1

48:06.590 --> 48:06.910
对吧

48:06.910 --> 48:08.030
零到1之间的小数

48:08.830 --> 48:08.990
好

48:08.990 --> 48:10.110
接下来我们怎么玩呢

48:10.110 --> 48:10.590
这个事情

48:11.230 --> 48:12.350
怎么玩呢

48:12.350 --> 48:14.190
我就得到一个水积数

48:14.910 --> 48:15.950
得到一个水积数

48:16.750 --> 48:17.790
比方说得到的水积数

48:17.790 --> 48:18.750
是零点222

48:18.750 --> 48:21.070
假设得到这个水积数

48:21.070 --> 48:22.430
看一下这个水积数

48:22.430 --> 48:24.670
是不是小于等于零点三的

48:25.470 --> 48:26.910
如果小于等于零点三

48:26.910 --> 48:27.710
是不是就暴击了

48:27.710 --> 48:29.390
我们就用这种方式来看

48:30.030 --> 48:30.750
明白这个意思吧

48:31.550 --> 48:33.070
它的暴击击率是零点三

48:33.070 --> 48:34.590
那么我们得到一个水积数

48:34.590 --> 48:36.350
看一下是不是小于等于零点三的

48:36.350 --> 48:38.190
如果它的暴击击率是零点1

48:38.190 --> 48:39.070
我们得到一个水积数

48:39.070 --> 48:40.830
看它是不是小于等于零点1的

48:41.870 --> 48:43.070
你自己好去梳理一下

48:44.110 --> 48:45.630
这样的击率是不是刚好对上了

48:46.350 --> 48:46.510
好

48:46.510 --> 48:47.550
我们就用这种方式来做

48:48.030 --> 48:48.430
因此呢

48:48.430 --> 48:49.310
我们得到一个水积数

48:50.030 --> 48:51.310
得到一个水积数

48:51.310 --> 48:52.350
Mask and write them

48:53.470 --> 48:53.710
好

48:53.710 --> 48:54.510
判断一下

48:54.590 --> 48:55.470
这个水积数

48:56.190 --> 48:59.070
是不是小于等于暴击击率

49:00.910 --> 49:02.910
如果这个小于等于是不是有暴击

49:02.910 --> 49:03.310
对吧

49:03.310 --> 49:04.190
有暴击

49:04.190 --> 49:05.070
有暴击怎么办

49:05.070 --> 49:05.870
伤害翻倍

49:06.430 --> 49:07.230
伤害翻倍

49:07.230 --> 49:07.870
乘以二

49:08.910 --> 49:09.470
对吧

49:09.470 --> 49:10.110
伤害翻倍

49:12.590 --> 49:13.230
暴击的话

49:13.230 --> 49:13.790
伤害翻倍

49:14.670 --> 49:15.150
好

49:15.150 --> 49:16.270
这样子的就算出来的

49:16.270 --> 49:17.230
最终的伤害

49:17.230 --> 49:18.670
就是包含暴击的情况

49:18.670 --> 49:19.230
算出来了

49:19.790 --> 49:20.830
那么算出来之后呢

49:20.830 --> 49:21.870
可能会有一个问题

49:21.870 --> 49:22.670
就是

49:22.670 --> 49:23.710
伤害为附属

49:24.510 --> 49:25.710
因为它有可能防御很高

49:25.790 --> 49:26.430
对吧

49:26.430 --> 49:27.630
你攻击力减防御力

49:27.630 --> 49:28.830
伤害可能是附属

49:28.830 --> 49:30.190
但是附属的话

49:30.190 --> 49:30.990
我们这里说过的

49:31.550 --> 49:32.030
怎么样呢

49:33.390 --> 49:35.230
就是伤害至少为一

49:35.230 --> 49:36.110
就是伤害

49:36.110 --> 49:36.590
伤害

49:38.110 --> 49:39.550
我给大家开一个头

49:39.550 --> 49:41.070
其实看到这儿呢

49:41.070 --> 49:42.830
我相信有些同学都能自己写出来了

49:43.550 --> 49:44.670
大家可以自己去写一遍

49:45.550 --> 49:46.190
好

49:46.190 --> 49:47.470
伤害至少为一

49:47.470 --> 49:49.790
伤害至少为一

49:49.790 --> 49:50.590
为一

49:50.590 --> 49:51.550
所以判断一下

49:51.550 --> 49:53.790
如果damage小于一的话

49:53.790 --> 49:54.990
那么把它复制为一

49:55.870 --> 49:56.910
把它复制为一

49:57.470 --> 49:59.630
经过上面这一串的代码

49:59.630 --> 50:00.750
是不是把伤害算出来了

50:01.470 --> 50:02.510
伤害就算出来了

50:03.150 --> 50:03.790
算出来了

50:03.790 --> 50:04.590
伤害过后

50:05.230 --> 50:05.710
怎么办

50:06.270 --> 50:06.910
你打它

50:06.910 --> 50:08.350
它是不是血要减少

50:08.350 --> 50:08.830
对不对

50:08.830 --> 50:09.870
它血是不是得减少

50:10.430 --> 50:10.750
OK

50:12.590 --> 50:13.710
血得减少

50:13.710 --> 50:15.070
我们找到这个对象

50:15.070 --> 50:15.790
找到这个对象

50:17.470 --> 50:18.830
找到它的HP

50:18.830 --> 50:19.790
它的生命值

50:19.790 --> 50:21.150
是不是得减少

50:21.150 --> 50:21.790
减少多少

50:22.270 --> 50:23.630
减少这个伤害

50:23.630 --> 50:24.830
一刚造成的实践伤害

50:24.910 --> 50:26.190
它的血要减少实践

50:26.190 --> 50:27.390
减少实践

50:27.950 --> 50:28.670
明了这意思吧

50:29.310 --> 50:30.510
血减少了

50:31.630 --> 50:32.350
然后呢

50:33.390 --> 50:34.190
还有一个问题

50:34.190 --> 50:35.790
它血有没有可能减成复数

50:36.030 --> 50:36.750
有没有可能

50:37.310 --> 50:38.670
就它只剩一点血的时候

50:38.670 --> 50:39.630
你刚打了100的伤害

50:39.630 --> 50:40.590
是不是变成复数了

50:40.590 --> 50:41.870
但它血只能是0

50:41.870 --> 50:42.910
只能是0

50:44.350 --> 50:44.510
好

50:44.510 --> 50:45.950
如果小于0的话

50:46.430 --> 50:47.390
把它复制为0

50:49.860 --> 50:51.220
这是逻辑对吧

50:51.220 --> 50:54.260
血量至少为0

50:54.260 --> 50:55.220
至少为0

50:56.180 --> 50:56.740
好

50:56.740 --> 50:57.940
这把血杆复制了

50:58.820 --> 50:59.140
好

50:59.140 --> 51:00.340
完了之后呢

51:00.340 --> 51:02.020
我们最好是返回一个结果

51:02.020 --> 51:03.380
最好是返回一个结果

51:03.700 --> 51:05.300
有没有把它打死

51:05.300 --> 51:06.420
有没有把它打死

51:07.620 --> 51:08.260
对方

51:09.620 --> 51:11.380
对方是否死亡

51:11.380 --> 51:12.820
对方是否死亡

51:13.300 --> 51:13.860
好

51:13.860 --> 51:14.900
判断一下

51:14.900 --> 51:18.660
如果它的HP等于了啥呢

51:18.660 --> 51:19.780
等于了0

51:19.780 --> 51:20.740
是不是死亡了

51:20.740 --> 51:21.300
对吧

51:21.300 --> 51:22.020
就死亡了

51:22.020 --> 51:23.060
return to

51:23.060 --> 51:24.340
否则的话就没有死亡

51:24.420 --> 51:27.060
换句话说是不是返回这个表达式的结果

51:27.060 --> 51:29.300
直接返回这个表达式的结果

51:29.300 --> 51:30.500
对方是否死亡

51:30.500 --> 51:31.060
好

51:31.060 --> 51:32.100
打成个注释

51:32.100 --> 51:33.060
这个是

51:34.260 --> 51:37.300
返回对方是否死亡

51:38.660 --> 51:40.100
为了让我们看到效果

51:40.100 --> 51:42.100
我们最好还要输出一条语句

51:42.100 --> 51:43.300
输出一条语句

51:43.300 --> 51:44.420
我们这里输出

51:45.540 --> 51:47.220
这个语句怎么输出呢

51:47.220 --> 51:48.100
就是

51:49.940 --> 51:50.900
怎么输出呢

51:51.460 --> 51:52.340
就这样子

51:53.300 --> 51:57.140
谁对谁

52:00.660 --> 52:02.740
谁攻击了

52:02.740 --> 52:03.860
攻击谁

52:04.740 --> 52:07.460
造成多少点伤害

52:07.460 --> 52:08.740
造成多少点伤害

52:09.380 --> 52:09.940
然后呢

52:10.740 --> 52:12.340
对方血量

52:12.340 --> 52:13.540
对方血量

52:13.540 --> 52:14.500
当前血量为

52:16.180 --> 52:18.900
当前血量为多少

52:18.900 --> 52:19.940
为多少

52:20.100 --> 52:20.740
对吧

52:20.740 --> 52:22.660
把TD位置填好就行了

52:22.660 --> 52:23.780
谁攻击谁呢

52:23.780 --> 52:25.300
就是我攻击吧

52:25.300 --> 52:26.500
我攻击

52:26.500 --> 52:28.660
就是我的名字

52:28.660 --> 52:29.620
攻击谁呢

52:29.620 --> 52:30.660
攻击对方的名字

52:34.540 --> 52:35.820
还有一个条列

52:36.460 --> 52:37.660
造成多少点伤害了

52:37.660 --> 52:38.700
之前说删过的

52:38.700 --> 52:40.140
伤害了是damage

52:40.140 --> 52:41.260
damage

52:41.260 --> 52:43.340
你可以甚至可以前面写个爆击

52:43.340 --> 52:44.220
是否爆击对吧

52:45.100 --> 52:47.100
前面可以写个是否爆击

52:47.100 --> 52:47.260
好

52:47.260 --> 52:48.220
那么我们这里

52:48.220 --> 52:50.060
最好用个变量来表示

52:50.060 --> 52:51.100
是否爆击

52:51.180 --> 52:53.100
iscreate

52:54.540 --> 52:55.660
默认为forced

52:55.660 --> 52:57.100
是否爆击

52:57.100 --> 52:57.340
好

52:57.340 --> 52:58.300
如果爆击了过后

52:58.300 --> 52:59.420
把它设为true

52:59.420 --> 53:00.300
iscreate

53:00.300 --> 53:01.660
把它设为true

53:01.660 --> 53:02.780
做这么两件事

53:02.780 --> 53:03.580
如果爆击了过后

53:03.580 --> 53:04.220
把它设为true

53:04.220 --> 53:04.780
并且呢

53:05.660 --> 53:06.780
伤害翻倍

53:06.780 --> 53:06.940
好

53:06.940 --> 53:07.500
那么这里呢

53:07.500 --> 53:08.140
我们就可以知道

53:08.140 --> 53:09.580
它到底有没有爆击了

53:09.580 --> 53:10.380
有这个变量过后了

53:10.380 --> 53:11.100
我们就可以知道了

53:13.340 --> 53:13.580
好

53:13.580 --> 53:14.140
如果

53:15.420 --> 53:16.940
iscreate

53:16.940 --> 53:17.900
如果爆击了

53:17.900 --> 53:18.620
怎么样呢

53:18.620 --> 53:19.340
我来这个位置

53:19.340 --> 53:20.220
输出一个制服串

53:20.220 --> 53:20.620
否则的话

53:20.620 --> 53:21.580
输出另外一个制服串

53:21.580 --> 53:22.460
否则的话

53:22.460 --> 53:23.900
输出空制服串

53:23.900 --> 53:24.780
如果爆击了过后

53:24.780 --> 53:25.980
让我输出一个爆击

53:25.980 --> 53:27.340
加上个感叹号

53:27.340 --> 53:28.780
加上感叹号

53:28.780 --> 53:30.220
前面就输出一个制服串了

53:30.220 --> 53:31.340
就在这个位置

53:31.340 --> 53:31.980
就在这个位置

53:31.980 --> 53:33.420
就输出了一个制服串了

53:33.420 --> 53:34.300
如果没有爆击的话

53:34.300 --> 53:35.100
就是个空制服串

53:35.100 --> 53:37.100
就什么都没有输出

53:37.100 --> 53:38.540
前面该拼上一个这个东西

53:40.140 --> 53:41.100
造成多少点伤害

53:41.100 --> 53:42.140
它当前血量

53:42.140 --> 53:43.340
是不是得到

53:43.340 --> 53:44.380
得到什么

53:44.380 --> 53:46.060
对方的血量

53:46.060 --> 53:46.460
HP

53:47.900 --> 53:48.060
好

53:48.060 --> 53:48.620
看一下

53:48.620 --> 53:48.940
看一下

53:51.340 --> 53:52.300
你看一下

53:52.300 --> 53:53.900
攻击的时候你看

53:53.900 --> 53:54.860
是吧

53:54.860 --> 53:55.900
没问题吧

53:55.900 --> 53:57.020
这样子一打

53:57.020 --> 53:58.300
是不是就可以得到

53:58.300 --> 53:59.900
就可以得到这样的结果了

53:59.900 --> 54:01.500
我们有的时候还会爆击

54:01.500 --> 54:02.700
你看爆击了

54:03.660 --> 54:04.700
没问题吧

54:04.700 --> 54:05.740
没问题

54:06.700 --> 54:07.180
好

54:07.180 --> 54:08.220
那么我们其实还可以

54:08.220 --> 54:09.180
玩很多花样出来

54:09.180 --> 54:10.220
比如说这里名字

54:10.220 --> 54:11.580
名字看不太清楚对吧

54:11.580 --> 54:12.700
加上个中扩号

54:12.700 --> 54:13.660
看得清楚一点

54:14.300 --> 54:15.180
攻击了谁

54:16.220 --> 54:17.500
造成了多少伤害

54:17.500 --> 54:19.740
加上一个中文的中扩号

54:20.460 --> 54:21.500
看得清楚一点

54:21.500 --> 54:22.860
对方的当前血量

54:22.860 --> 54:23.340
为多少

54:23.340 --> 54:24.620
加上个中扩号

54:24.620 --> 54:25.420
看得清楚一点

54:26.540 --> 54:27.100
保存

54:27.820 --> 54:28.540
你看

54:28.540 --> 54:29.100
看得清楚一点

54:29.100 --> 54:29.340
对吧

54:31.020 --> 54:31.340
好了

54:33.340 --> 54:35.020
那么现在我们在玩这个游戏

54:35.020 --> 54:36.220
玩这个游戏

54:36.220 --> 54:37.420
然后让两个人打

54:37.420 --> 54:38.140
互打

54:38.140 --> 54:39.420
只到一方死亡

54:39.420 --> 54:40.460
只到一方死亡

54:40.460 --> 54:41.900
那就不极简单吧

54:41.900 --> 54:42.860
写个死循环

54:44.220 --> 54:45.020
写个死循环

54:45.900 --> 54:47.100
然后一个挨在那打

54:48.060 --> 54:49.980
他先去打

54:49.980 --> 54:51.660
英雄先去攻击怪兽

54:51.660 --> 54:52.220
对吧

54:52.220 --> 54:53.260
先去攻击怪兽

54:53.900 --> 54:54.860
然后呢

54:54.860 --> 54:56.220
怪兽了

54:56.220 --> 54:57.500
判断一下是否死亡

54:57.500 --> 54:58.300
是否死亡

54:59.820 --> 55:00.460
如果

55:01.580 --> 55:03.180
如果死亡了怎么办

55:03.180 --> 55:04.380
英雄攻击怪兽

55:04.380 --> 55:05.500
如果死亡了怎么办

55:06.460 --> 55:07.180
死亡了怎么办

55:08.540 --> 55:09.580
怪兽如果死亡了

55:09.580 --> 55:10.860
是不是游戏结束了

55:10.860 --> 55:11.580
游戏结束

55:13.820 --> 55:14.700
游戏结束

55:15.500 --> 55:16.220
然后怎么样

55:16.300 --> 55:17.500
break 结束

55:17.500 --> 55:18.460
结束这个循环

55:19.260 --> 55:20.460
else

55:20.460 --> 55:21.260
不是 else

55:22.140 --> 55:23.340
然后再来判断

55:23.340 --> 55:24.300
再来判断

55:24.300 --> 55:26.220
然后怪兽去攻击英雄

55:27.180 --> 55:28.300
怪兽去攻击英雄

55:29.420 --> 55:30.220
英雄攻击怪兽

55:31.180 --> 55:32.460
看一下有没有死亡

55:32.460 --> 55:33.980
如果死亡了游戏结束

55:33.980 --> 55:35.340
怪兽攻击英雄也是一样

55:35.340 --> 55:36.140
还有没有死亡

55:36.140 --> 55:37.660
死亡了就游戏结束

55:37.660 --> 55:39.020
用break来退出循环

55:39.020 --> 55:40.060
因为这个while循环

55:40.060 --> 55:41.100
他不知道什么时候结束

55:41.100 --> 55:41.340
对吧

55:41.340 --> 55:42.380
我们用break来控制

55:43.580 --> 55:43.820
你看

55:44.940 --> 55:45.980
有了对象之后

55:47.180 --> 55:48.940
整个程序就非常简单了

55:49.740 --> 55:51.580
因为这些东西都是对象里面的函数

55:51.580 --> 55:53.100
我们直接可以通过对象来调用它

55:54.300 --> 55:54.780
保存

55:55.500 --> 55:55.900
看一下

55:56.620 --> 55:57.580
你看谁赢了

55:58.140 --> 55:58.700
谁赢了

55:58.700 --> 55:59.820
乘哥攻击邓哥

56:00.940 --> 56:01.500
游戏结束了

56:01.500 --> 56:02.140
对吧

56:02.140 --> 56:04.140
我们也可以把这个游戏结束放到哪儿了

56:04.140 --> 56:05.900
放到循环外边去

56:05.900 --> 56:07.420
除了这个循环是不是游戏结束了

56:07.420 --> 56:08.780
在游戏结束之前

56:08.780 --> 56:10.460
是不是我们可以再次打印一次

56:10.460 --> 56:10.940
对吧

56:10.940 --> 56:11.660
再打印一次

56:12.700 --> 56:14.300
甚至我们还可以打印一个分割斧

56:15.100 --> 56:15.980
打印一个分割斧

56:16.700 --> 56:17.500
对吧

56:17.500 --> 56:18.540
没问题吧

56:18.540 --> 56:19.260
OK

56:19.260 --> 56:20.140
看一下

56:20.140 --> 56:21.100
保存

56:21.100 --> 56:22.380
谁赢了

56:22.380 --> 56:23.260
谁赢了

56:23.260 --> 56:24.300
乘哥赢了

56:24.300 --> 56:24.940
对吧

56:24.940 --> 56:25.580
乘哥赢了

56:25.580 --> 56:26.540
再刷新

56:28.540 --> 56:29.100
再刷新

56:29.100 --> 56:30.700
好像不太平衡对吧

56:30.700 --> 56:31.580
不太平衡

56:31.580 --> 56:33.180
邓哥给他400个血

56:33.900 --> 56:36.300
邓哥赢了

56:36.300 --> 56:36.940
对吧

56:36.940 --> 56:37.660
邓哥赢了

56:37.660 --> 56:39.660
现在比较平衡了

56:40.140 --> 56:40.780
OK

56:40.780 --> 56:42.300
就这么一个小的游戏

56:42.300 --> 56:43.020
小的游戏

56:43.020 --> 56:43.740
通过这个游戏

56:43.740 --> 56:46.300
我们可以去练习一下个构造函数

56:46.380 --> 56:47.260
构造函数

56:47.260 --> 56:48.460
你可以发现

56:48.460 --> 56:49.740
有了对象之后

56:49.740 --> 56:51.740
虽然我们写的对象比较麻烦

56:51.740 --> 56:52.940
写的对象比较麻烦

56:52.940 --> 56:54.140
但是有了这个对象过后

56:54.140 --> 56:56.220
我们后边的事情变得很简单了

56:56.220 --> 56:57.660
包括如果以后要做什么

56:57.660 --> 56:58.860
一个英雄打多个怪兽

57:00.540 --> 57:01.900
不用去怎么去改

57:01.900 --> 57:03.820
不用去怎么去改这个构造函数

57:03.820 --> 57:04.940
几乎不用动

57:04.940 --> 57:06.940
我们只需要给他加功能就行了

57:07.820 --> 57:08.540
明白这个意思了

57:09.900 --> 57:11.740
这是关于构造函数这个章节

57:11.740 --> 57:12.940
这个章节好好去理解一下

57:12.940 --> 57:15.580
我们后边也会用到不少的构造函数

57:16.380 --> 57:16.780
好吧

57:17.900 --> 57:19.180
这是构造函数这一块

