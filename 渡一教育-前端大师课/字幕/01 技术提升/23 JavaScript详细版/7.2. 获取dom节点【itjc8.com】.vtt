WEBVTT

00:00.000 --> 00:17.350
咱们了解了关于多姆的节点的基础的概念

00:17.350 --> 00:20.950
这些课我们来学习如何来获取一个多姆节点

00:20.950 --> 00:26.550
也就是获取多姆节点对象 简称获取多姆对象

00:26.550 --> 00:29.550
以这时我们说获取个多姆对象 指的就是这么个意思

00:29.550 --> 00:37.350
获取一个节点 这里的节点通常获取的是元素节点

00:37.350 --> 00:39.550
通常获取的都是元素节点

00:39.550 --> 00:43.950
所以说我们这几课终点讲的是如何来获取元素节点

00:43.950 --> 00:47.550
当然可能会顺带 稍带的获取一下其他节点

00:47.550 --> 00:51.950
比方说什么注释节点 文本节点 没啥用

00:51.950 --> 00:55.950
不过我们可以稍微了解一下 主要是获取元素

00:55.950 --> 01:00.750
这里我们首先说的是第一个部分 就是关于旧的

01:00.750 --> 01:05.750
就是最早的时候获取节点的方式

01:05.950 --> 01:10.950
最早的时候如何来获取元素节点 获取元素节点的方式

01:10.950 --> 01:14.350
就是在多姆零的时候 那个时候还没有形成标准

01:14.350 --> 01:19.350
那个时候就乱来了 咱们来看一下 了解一下这些历史

01:19.350 --> 01:24.150
咱们写个页面 这里先准备好一个页面

01:24.150 --> 01:26.350
然后把运行出来 边说边看

01:30.350 --> 01:35.350
把方过来 控制台 OK

01:35.350 --> 01:38.750
然后旧的获取元素节点的方式 有这么一些

01:38.750 --> 01:44.350
一个说 第一个是使用Documents对象

01:44.350 --> 01:48.150
我们的全局对象里面 就是全局对象是什么

01:48.150 --> 01:53.350
是Windows 全局对象中

01:53.350 --> 01:57.150
指的是浏览器环境 我们现在接下来说的都是浏览器环境

01:57.150 --> 01:59.550
以后到了其他环境 不要乱来

01:59.550 --> 02:04.550
全局对象Windows里面有一个属性

02:04.550 --> 02:08.750
有属性Documents 打字怎么回事

02:08.750 --> 02:12.950
属性Documents 这个Documents属性 它代表的就是

02:12.950 --> 02:18.150
代表的是整个文档 文档节点 还记得吗

02:18.150 --> 02:22.150
咱们上一节课说的是 说到这个节点类型里边

02:22.150 --> 02:24.550
是不是一个文档节点 表示整个文档

02:24.550 --> 02:28.950
而我们这里的Documents 就是表示整个文档类型

02:28.950 --> 02:32.350
它的节点类型就是整个文档 指的就是整个文档

02:32.550 --> 02:36.950
咱们来看一下 我们空置台里边输入Documents

02:36.950 --> 02:38.750
因为是Windows对象的属性 对吧

02:38.750 --> 02:41.350
Windows对象的属性 那就意味着是什么

02:41.350 --> 02:44.950
全局属性 我们可以直接使用的 看

02:44.950 --> 02:47.350
是不是可以得到 就整个文档 整个文档

02:47.350 --> 02:51.350
你看看 包含所有的东西 整个文档

02:51.350 --> 02:56.150
我们之后获取节点 很多时候都是通过这个属性

02:56.150 --> 02:58.750
来进行获取的 通过这个文档对象来获取

02:58.750 --> 03:01.750
获取这个文档里边的某一些节点

03:01.750 --> 03:06.350
好 这里边提供了一个属性 叫做Body

03:06.350 --> 03:08.550
这是旧的方式 旧的方式

03:08.550 --> 03:09.950
它表示的是什么意思呢

03:09.950 --> 03:16.350
表示获取Body元素节点

03:16.350 --> 03:19.750
获取Body元素节点 咱们来看一下

03:19.750 --> 03:21.550
比方说Body里面 我们随便写个节点

03:21.550 --> 03:23.950
随便写一个 比方说一个A节点

03:23.950 --> 03:27.750
A元素 白度 比方说这样子写

03:27.750 --> 03:30.750
咱们可以这样子获取DocumentsBody

03:30.750 --> 03:33.750
你看一下 获取的是不是Body节点

03:33.750 --> 03:36.350
里边有个A元素 对不对 有个A元素

03:36.350 --> 03:40.350
没问题吧 这种方式DocumentsBody

03:40.350 --> 03:45.350
来获取整个文档节点 就是整个Body元素节点

03:45.350 --> 03:48.950
好 然后再来DocumentsHead

03:48.950 --> 03:52.550
是获取什么 获取Head元素节点

03:52.550 --> 03:55.950
看一下 DocumentsHead

03:55.950 --> 03:58.250
你看 获取了什么Head元素节点

03:58.250 --> 04:00.850
没问题吧 你这样子在控制台里边

04:00.850 --> 04:02.650
在这样打印的时候 得到的是什么呢

04:02.650 --> 04:06.250
得到的是它的元素结构

04:06.250 --> 04:11.050
如果你用Consol.log来打印

04:11.050 --> 04:12.250
DocumentsHead

04:12.250 --> 04:14.650
你看一下 打印出来 这样是一样的

04:14.650 --> 04:17.850
用DIR看它的对象结构

04:17.850 --> 04:19.850
你可以得到 因为它是对象嘛 对吧

04:19.850 --> 04:22.850
每一个多目节点 它都是一个对象

04:22.850 --> 04:24.650
我们可以看到它的对象结构

04:24.650 --> 04:27.050
对象里面有很多的属性和方法

04:27.250 --> 04:29.650
我们后边会讲怎么来使用

04:29.650 --> 04:32.250
Head元素节点Body元素节点 对吧

04:32.250 --> 04:33.850
好 OK

04:33.850 --> 04:35.450
这是这两个节点

04:35.450 --> 04:38.250
还有 Documents

04:38.250 --> 04:40.650
Anchors

04:40.650 --> 04:42.850
叫什么 叫 Links

04:42.850 --> 04:44.650
它是获取页面上

04:44.650 --> 04:50.650
获取页面上所有的超链接元素节点

04:50.650 --> 04:52.450
就是A元素

04:52.450 --> 04:54.650
得到的是所有超链接元素的节点

04:54.650 --> 04:59.650
讲这里有个A元素 再来一个A乘以10里边有Lawry

04:59.650 --> 05:02.650
写这么多A元素 甭管这些A元素放到哪

05:02.650 --> 05:06.650
比方说再放一个UL Li乘以10

05:06.650 --> 05:09.650
下面每一个地方有个A元素

05:09.650 --> 05:11.450
看一下 有这么多A元素

05:11.450 --> 05:13.650
我们可以统一获取

05:13.650 --> 05:16.050
属下多少个 上面11个 下面10个

05:16.050 --> 05:17.850
21个对吧 把第1个去了

05:17.850 --> 05:20.850
20个 保存看一下

05:20.850 --> 05:23.650
这里我们可以通过 Documents

05:23.650 --> 05:24.450
Links

05:24.450 --> 05:27.650
你看 是不是获取了20个A元素

05:27.650 --> 05:29.950
对吧 获取了20个A元素

05:29.950 --> 05:33.050
好 看上去是不是个数组

05:33.050 --> 05:35.350
但是注意它不是一个数组

05:35.350 --> 05:36.650
注意不是一个数组

05:36.650 --> 05:38.650
你看它的内型它不是Array

05:38.650 --> 05:40.050
它是 Connection

05:40.050 --> 05:41.050
Atm Connection

05:41.050 --> 05:42.650
它是一个内数组

05:42.650 --> 05:44.450
是内数组

05:44.450 --> 05:45.650
这里记一笔

05:45.650 --> 05:48.050
其实大家心里面知道就行了

05:48.050 --> 05:49.650
就是伪数组

05:49.650 --> 05:55.450
我们在Web API里面获取到的绝大部分

05:55.450 --> 05:57.850
一坨东西 一大堆东西

05:57.850 --> 06:00.550
都是内数组 都不是真数组

06:00.550 --> 06:03.050
当然你要转换的真数组是不是讲过的

06:03.050 --> 06:05.650
ArrayFrom 进行转换

06:05.650 --> 06:06.850
转换成真数组

06:06.850 --> 06:08.650
我们来看一下 再来验证一下

06:08.650 --> 06:10.050
ArrayEase

06:10.050 --> 06:11.450
把以前的姿势用起来

06:11.450 --> 06:14.450
EaseArrayDocumentLinks

06:14.450 --> 06:16.650
看一下 是不是真数组

06:16.650 --> 06:18.050
它不是一个真数组

06:18.050 --> 06:19.450
这是Links

06:19.450 --> 06:21.250
再来看

06:21.250 --> 06:23.650
Document

06:23.650 --> 06:27.250
叫做 Anchors

06:27.250 --> 06:28.850
单词咋写的

06:28.850 --> 06:29.850
应该是这样写的

06:29.850 --> 06:33.050
Anchors

06:33.050 --> 06:34.650
这些都很少用

06:34.650 --> 06:35.450
它获取到什么呢

06:35.450 --> 06:39.350
获取页面上所有的

06:39.350 --> 06:41.550
某链接

06:41.550 --> 06:44.350
某链接元素接电

06:44.350 --> 06:45.650
你们学过ATM and CSS

06:45.650 --> 06:47.050
知道某链接

06:47.250 --> 06:48.750
某链接这里要说明一下

06:48.750 --> 06:50.250
我们之前写某链接的时候

06:50.250 --> 06:50.850
写的是什么

06:50.850 --> 06:52.150
写的是ID

06:52.150 --> 06:53.250
用的是ID

06:53.250 --> 06:54.950
实际上在追凿期的时候

06:54.950 --> 06:57.650
某链接使用的是Name数项

06:57.650 --> 06:58.550
是这个数项

06:58.550 --> 07:00.250
Name

07:00.250 --> 07:01.450
Name数项

07:01.450 --> 07:02.550
比方说ABC

07:02.550 --> 07:04.150
随便写吧 瞎写

07:04.150 --> 07:06.750
这里 随便写加个Name数项BCD

07:06.750 --> 07:07.750
在追凿的时候

07:07.750 --> 07:09.250
某链接使用的是Name数项

07:09.250 --> 07:11.050
现在变成ID了

07:11.050 --> 07:13.550
那么某链接元素接电

07:13.550 --> 07:14.650
我们这里指的是

07:14.650 --> 07:16.250
具有Name数项

07:16.250 --> 07:18.450
具有Name数项

07:18.450 --> 07:19.850
元素接电

07:19.850 --> 07:21.050
一个是超链接

07:21.050 --> 07:22.750
而且必须要具有Name数项

07:22.750 --> 07:23.950
咱们来看一下

07:23.950 --> 07:25.650
这些东西就了解就行了

07:25.650 --> 07:26.950
Anchors

07:26.950 --> 07:28.650
Document

07:28.650 --> 07:30.150
Anchors

07:30.150 --> 07:31.450
你看得到了什么两个

07:31.450 --> 07:32.050
对吧

07:32.050 --> 07:33.650
两个 只有两个A元素

07:33.650 --> 07:35.150
因为我们只有两个A元素

07:35.150 --> 07:35.950
有这个什么

07:35.950 --> 07:38.350
有这个Name数项

07:38.350 --> 07:38.850
好吧

07:38.850 --> 07:39.650
然后再下一个

07:39.650 --> 07:42.650
DocumentForms

07:42.650 --> 07:43.250
得到的是

07:43.250 --> 07:44.250
它也是类数主

07:44.250 --> 07:45.850
这些反而是加了S-复数的

07:45.850 --> 07:47.750
一看就知道是类数主

07:47.750 --> 07:49.250
获取页面上

07:49.250 --> 07:50.950
就整个页面中

07:50.950 --> 07:54.350
所有的Form元素接电

07:54.350 --> 07:55.350
我们知道Form是什么

07:55.350 --> 07:56.350
表单 对不对

07:56.350 --> 07:57.450
表单

07:57.450 --> 08:00.450
于是我们这里可以找到

08:00.450 --> 08:01.650
把它注射掉

08:01.650 --> 08:03.050
下面我们写个表单

08:03.050 --> 08:05.150
就把上面加到表单里面去

08:05.150 --> 08:06.350
这是一个表单

08:06.350 --> 08:07.550
Form

08:07.550 --> 08:09.250
一个表单

08:09.250 --> 08:10.950
下面有这些A元素

08:10.950 --> 08:12.750
当然也可能会有一些表单元素

08:12.750 --> 08:13.450
无所谓

08:13.450 --> 08:14.650
我们这里就测试一下

08:14.650 --> 08:17.050
主要是关于Form

08:17.050 --> 08:19.250
把这个放进来

08:19.250 --> 08:20.550
两个Form元素对吧

08:20.550 --> 08:22.550
然后我们在页面上去获取一下

08:22.550 --> 08:24.350
DocumentForms

08:24.350 --> 08:26.850
你看获取了两个Form元素

08:26.850 --> 08:27.850
无论它放在哪

08:27.850 --> 08:28.950
它只要在页面里边

08:28.950 --> 08:30.150
我们就可以把获取到

08:30.150 --> 08:31.950
这是获取整个页面的

08:31.950 --> 08:33.850
所有的Form接电

08:33.850 --> 08:34.550
好吧

08:34.550 --> 08:37.750
这是旧的获取元素接电的方式

08:37.750 --> 08:41.350
现在不太会这样子用

08:41.350 --> 08:43.050
不过现在这个东西还是有用的

08:43.150 --> 08:44.450
Document body

08:44.450 --> 08:45.650
这个东西还是有用的

08:45.650 --> 08:46.750
这个东西我们有的时候

08:46.750 --> 08:47.850
要获取一个body元素

08:47.850 --> 08:49.250
就可以用这种方式来获取

08:49.250 --> 08:50.450
你看这个是吧

08:50.450 --> 08:52.250
OK 这是旧的方式

08:52.250 --> 08:55.250
然后咱们再看新的方式

08:55.250 --> 09:00.950
新的获取元素接电的方式

09:00.950 --> 09:03.150
一个说

09:03.150 --> 09:06.650
首先是方法

09:06.650 --> 09:10.550
通过方法获取

09:10.550 --> 09:11.650
哪些方法获取呢

09:11.650 --> 09:12.650
一个个说

09:12.650 --> 09:14.650
首先是Document

09:14.650 --> 09:15.850
第二

09:15.850 --> 09:19.650
一个是GetAnimateByID

09:19.650 --> 09:21.750
通过ID

09:21.750 --> 09:24.650
通过ID获取

09:24.650 --> 09:27.850
对应ID的元素

09:27.850 --> 09:28.750
比方说

09:28.750 --> 09:29.750
咱们的页面上

09:29.750 --> 09:30.750
再签一个页面

09:30.750 --> 09:31.750
这都很简单

09:31.750 --> 09:32.750
就是告诉你怎么用就行了

09:32.750 --> 09:34.050
你只要知道什么叫节点

09:34.050 --> 09:35.450
什么叫元素

09:35.450 --> 09:36.950
什么叫dom

09:36.950 --> 09:38.150
这些概念你清楚过后

09:38.150 --> 09:40.250
这些东西就很简单了

09:40.350 --> 09:42.550
比方说我们这里随便写个下写

09:42.550 --> 09:44.250
就一个DIV

09:44.250 --> 09:45.250
它有一个ID

09:45.250 --> 09:45.850
有一个ID

09:45.850 --> 09:48.250
买DIV

09:48.250 --> 09:49.150
再来个DIV

09:49.150 --> 09:50.550
DIV

09:50.550 --> 09:52.050
买DIV2

09:52.050 --> 09:53.150
一个是myDIV1

09:53.150 --> 09:54.450
一个是myDIV2

09:54.450 --> 09:55.650
咱们来获取一下

09:55.650 --> 09:58.610
获取一下

09:58.610 --> 10:03.480
看一下

10:03.480 --> 10:04.880
用Document

10:04.880 --> 10:08.380
GetAnimateByID

10:08.380 --> 10:09.980
这里获取的时候

10:09.980 --> 10:12.480
ID就写到这个制服创里边

10:12.580 --> 10:14.380
比方说myDIV1

10:14.380 --> 10:15.080
你看

10:15.080 --> 10:16.680
这个表达是获取出来是什么

10:16.680 --> 10:18.080
就是一个动物对象

10:18.080 --> 10:19.680
你看上去这个控制台里边

10:19.680 --> 10:21.680
给打出了一个元素

10:21.680 --> 10:22.680
就打出这个标签

10:22.680 --> 10:23.280
对吧

10:23.280 --> 10:24.380
标签的属性给打出来了

10:24.380 --> 10:25.880
但是实际上

10:25.880 --> 10:27.380
它是一个动物对象

10:27.380 --> 10:32.080
如果你用console.dior

10:32.080 --> 10:33.680
来进行查看这个对象的话

10:33.680 --> 10:34.380
因为浏览器

10:34.380 --> 10:35.580
它为了你看的方便

10:35.580 --> 10:36.880
所以说直接把这个元素结构

10:36.880 --> 10:37.780
给你列出来

10:37.780 --> 10:38.880
但是实际上它是个对象

10:38.880 --> 10:39.980
你看

10:39.980 --> 10:41.080
实际上它是个对象

10:41.080 --> 10:42.580
它有很多的属性方法

10:42.580 --> 10:43.780
可以使用

10:43.780 --> 10:45.280
你看这个是吧

10:45.280 --> 10:46.380
这就是获取它的

10:46.380 --> 10:49.680
就是某一个ID的元素节点

10:49.680 --> 10:50.380
好吧

10:50.380 --> 10:52.580
那么ID它是不是唯一的

10:52.580 --> 10:54.180
因为它是ID是不是唯一的

10:54.180 --> 10:56.580
所以说这种方式获取到的

10:56.580 --> 10:58.180
获取到的什么

10:58.180 --> 10:59.280
就是元素

10:59.280 --> 11:00.780
它一定是一个

11:00.780 --> 11:02.880
哪怕你写成两个

11:02.880 --> 11:05.280
比方说123456

11:05.280 --> 11:06.180
哪怕你写成两个

11:06.180 --> 11:07.280
咱们来写一下

11:07.280 --> 11:07.580
写一下

11:07.580 --> 11:09.580
在这里写一下

11:09.680 --> 11:11.280
div1 document

11:11.280 --> 11:12.980
get element by id

11:12.980 --> 11:14.180
my div1

11:14.180 --> 11:15.480
把它保存到一个变量里边

11:15.480 --> 11:16.680
大家注意

11:16.680 --> 11:17.880
这个脚本

11:17.880 --> 11:20.180
你最好写到整个网页的下边

11:20.180 --> 11:21.280
也别最好了

11:21.280 --> 11:22.680
现在就必须要给我写到

11:22.680 --> 11:23.580
整个网页的下边

11:23.580 --> 11:24.780
以后我讲事件的时候

11:24.780 --> 11:25.380
会详细说

11:25.380 --> 11:26.980
为什么要这样做

11:26.980 --> 11:29.580
你就写到整个网页的最下边

11:29.580 --> 11:30.280
好吧

11:30.280 --> 11:31.480
写到这里边

11:31.480 --> 11:32.880
然后我们来输出

11:32.880 --> 11:35.080
输出这个div1

11:35.080 --> 11:35.780
div1

11:35.780 --> 11:37.380
我们看输出什么东西

11:37.380 --> 11:37.880
保存

11:37.880 --> 11:38.980
你看一下

11:39.080 --> 11:40.180
输出了是不是第一个

11:40.180 --> 11:40.680
对吧

11:40.680 --> 11:42.280
哪怕id我有多个

11:42.280 --> 11:43.580
它只获取到第一个

11:43.580 --> 11:44.880
因为id是唯一的

11:44.880 --> 11:46.380
你也不要给我写多个

11:46.380 --> 11:47.680
一定要只能写一个

11:47.680 --> 11:50.080
一个id就对应一个元素

11:50.080 --> 11:50.880
好吧

11:50.880 --> 11:53.080
那如果你这个id

11:53.080 --> 11:54.580
它不存在呢

11:54.580 --> 11:55.980
不存在会得到什么呢

11:55.980 --> 11:57.080
得到的是now

11:57.080 --> 11:58.280
得到是now

11:58.280 --> 11:59.280
它不是undefined

11:59.280 --> 12:00.580
是now

12:00.580 --> 12:00.780
好吧

12:00.780 --> 12:01.980
这里是关于id

12:01.980 --> 12:04.380
这个函数用的是非常非常频繁的

12:04.380 --> 12:05.980
用的是非常非常频繁的

12:05.980 --> 12:08.180
get element by id

12:08.180 --> 12:08.780
这个

12:08.780 --> 12:10.880
而且它兼容性最好

12:10.880 --> 12:13.080
它是在dom2的时候出现的

12:13.080 --> 12:13.980
dom1都没有

12:13.980 --> 12:14.880
dom2的时候出现的

12:14.880 --> 12:16.980
dom2已经很多年很多年了

12:16.980 --> 12:19.180
已经到现在应该快20年了吧

12:19.180 --> 12:20.880
所以说不用担心它兼容性问题

12:20.880 --> 12:22.380
兼容性是非常好的

12:22.380 --> 12:22.880
好

12:22.880 --> 12:26.280
下一个 document get elements

12:26.280 --> 12:27.780
看是不是加了复数了

12:27.780 --> 12:29.280
是不是得到类数组

12:29.280 --> 12:33.480
get elements by tag name

12:33.480 --> 12:34.680
tag name什么意思

12:34.680 --> 12:36.180
tag表示标签

12:36.180 --> 12:37.380
表示标记

12:37.380 --> 12:38.480
name表示名称

12:38.480 --> 12:39.780
通过标记名

12:39.780 --> 12:43.180
就是通过元素的名字来获取

12:43.180 --> 12:46.780
通过元素名称获取

12:46.780 --> 12:48.480
就是元素

12:48.480 --> 12:49.980
但它得到了肯定是类数组

12:49.980 --> 12:51.280
肯定是类数组

12:51.280 --> 12:53.080
咱们来看一下

12:53.080 --> 12:53.280
好

12:53.280 --> 12:57.780
还这里 document get elements by tag name

12:57.780 --> 12:58.680
这里写上什么

12:58.680 --> 13:00.280
div比方说

13:00.280 --> 13:01.980
你看获取了是不是两个

13:01.980 --> 13:03.280
两个div

13:03.280 --> 13:03.980
两个div

13:03.980 --> 13:04.680
一个div

13:04.680 --> 13:05.980
两个div

13:05.980 --> 13:06.880
它是一个类数组

13:06.980 --> 13:08.580
咱们能不能使用锁印

13:08.580 --> 13:09.980
类数组的特点是什么

13:09.980 --> 13:11.780
锁印作为属性

13:11.780 --> 13:13.980
然后有个类式属性

13:13.980 --> 13:15.180
那可不可以用循环

13:15.180 --> 13:15.980
是不是可以

13:15.980 --> 13:16.480
对吧

13:16.480 --> 13:17.580
复物循环

13:17.580 --> 13:18.480
可不可以用属性

13:18.480 --> 13:19.080
可以

13:19.080 --> 13:21.980
但是你要想使用数组里边的方法

13:21.980 --> 13:23.480
什么譜息

13:23.480 --> 13:24.580
什么 pop

13:24.580 --> 13:25.780
什么 slice

13:25.780 --> 13:26.680
什么 splice

13:26.680 --> 13:27.780
像使用数组里边的方法

13:27.780 --> 13:29.980
是不是要把它转换成数组才行

13:29.980 --> 13:30.580
对吧

13:30.580 --> 13:32.680
转换的数组没什么好说的

13:32.680 --> 13:35.580
于是我们比方说要获取

13:35.680 --> 13:36.880
第一个div元素

13:36.880 --> 13:38.280
我们可以怎么写的

13:38.280 --> 13:39.480
加上一个下标凝

13:39.480 --> 13:39.980
对吧

13:39.980 --> 13:41.380
这就可以获取了

13:41.380 --> 13:42.880
获取第二个div元素

13:42.880 --> 13:43.880
是不是这样子写

13:43.880 --> 13:44.380
对吧

13:44.380 --> 13:45.680
这可以获取了

13:45.680 --> 13:46.680
没问题吧

13:46.680 --> 13:47.680
我们先了解

13:47.680 --> 13:49.980
怎么来获取这些动物对象

13:49.980 --> 13:51.080
获取之后干嘛

13:51.080 --> 13:52.680
我们后边再说

13:52.680 --> 13:55.080
但是你首先得知道怎么来获取它

13:55.080 --> 13:55.480
好

13:55.480 --> 13:56.880
都是关于这一块

13:56.880 --> 13:59.680
通过元素名称来获取

13:59.680 --> 14:01.880
获取元素

14:01.880 --> 14:02.080
好

14:02.080 --> 14:03.180
然后再看下一个

14:03.180 --> 14:04.080
再看下一个

14:04.080 --> 14:11.580
document get element by class name

14:11.580 --> 14:16.680
它是通过元素的内样式获取元素

14:16.680 --> 14:18.280
通过它的样式名获取元素

14:18.280 --> 14:20.280
你看加的s都是内数组

14:20.280 --> 14:22.080
加的s都是内数组

14:22.080 --> 14:22.680
比方说

14:22.680 --> 14:27.680
这个第一个div有一个内样式abc

14:27.680 --> 14:29.880
第二个内有一个内样式abc

14:29.880 --> 14:30.980
第三个没有

14:30.980 --> 14:32.180
第三个没有

14:32.180 --> 14:32.280
好

14:32.280 --> 14:33.580
保存看一下

14:33.580 --> 14:34.780
咱们用这种方式来获取

14:34.780 --> 14:41.380
document get element by class name

14:41.380 --> 14:42.380
abc

14:42.380 --> 14:42.880
你看获取

14:42.880 --> 14:43.980
是不是两个

14:43.980 --> 14:44.880
获取到了两个

14:44.880 --> 14:45.380
你看

14:45.380 --> 14:47.280
都有内样式abc

14:47.280 --> 14:48.080
看没

14:48.080 --> 14:49.180
没问题吧

14:49.180 --> 14:50.580
获取到了这两个

14:50.580 --> 14:51.580
你兵情了

14:51.580 --> 14:53.080
你在控制台里边

14:53.080 --> 14:54.080
你在控制台里边

14:54.080 --> 14:54.880
你还可以指着它

14:54.880 --> 14:57.780
我们这两个divabc

14:57.780 --> 15:01.780
document get element by class name

15:01.780 --> 15:02.880
divabc

15:03.580 --> 15:04.680
把内样式传进去

15:04.680 --> 15:05.180
然后

15:05.180 --> 15:07.580
咱们输出这个divabc

15:07.580 --> 15:08.580
我们可以发现

15:08.580 --> 15:09.980
在控制台里边

15:09.980 --> 15:10.980
我们指着它的设

15:10.980 --> 15:12.780
你看是不是在页面上

15:12.780 --> 15:14.080
也有相应的效果

15:14.080 --> 15:15.480
告诉你这个div在什么位置

15:15.480 --> 15:16.380
这个动物对象

15:16.380 --> 15:19.080
它对应到页面的什么位置

15:19.080 --> 15:19.780
好吧

15:19.780 --> 15:21.080
看没问题吧

15:21.080 --> 15:22.480
OK

15:22.480 --> 15:24.980
这是关于用内样式来获取

15:24.980 --> 15:26.280
但是这个东西有兼容性

15:26.280 --> 15:28.180
就顺便说一下

15:28.180 --> 15:28.880
咱们上节课说了

15:28.880 --> 15:30.680
兼容性不用特别关注

15:30.780 --> 15:32.980
这个是i9e下无效

15:32.980 --> 15:36.580
i9e下有兼容性问题

15:36.580 --> 15:38.580
无效

15:38.580 --> 15:40.080
这个大家知道就行了

15:40.080 --> 15:41.080
i9e下无效

15:41.080 --> 15:42.980
i9才真正的符合了

15:42.980 --> 15:43.780
很多的标准

15:43.780 --> 15:46.280
i9e下很多标准都有问题

15:46.280 --> 15:46.780
了解一下

15:46.780 --> 15:48.580
所以兼容性最好的是前两个

15:48.580 --> 15:49.980
前两个

15:49.980 --> 15:51.180
好 下边这个

15:51.180 --> 15:58.380
document get element by name

15:58.480 --> 16:02.880
它是通过元素的Name属性值

16:02.880 --> 16:05.980
Name属性值获取元素

16:05.980 --> 16:07.580
它是通过这个属性值

16:07.580 --> 16:08.780
Name属性值

16:08.780 --> 16:10.280
就是有的元素可能没

16:10.280 --> 16:12.280
它可能不能写Name属性值

16:12.280 --> 16:13.480
但是它也可以获取

16:13.480 --> 16:15.180
好像div它写Name属性值

16:15.180 --> 16:15.980
没有什么意义

16:15.980 --> 16:18.280
不过它也能获取

16:18.280 --> 16:22.080
比方说N1N

16:22.080 --> 16:23.480
比方说N

16:23.480 --> 16:26.380
这个div和div有一个Name属性值

16:26.480 --> 16:29.180
我们可以通过divName

16:29.180 --> 16:33.080
divN document get element by name

16:33.080 --> 16:33.980
写个N

16:33.980 --> 16:36.780
输出这个divN

16:36.780 --> 16:37.580
看一下

16:37.580 --> 16:39.080
保存看一下

16:39.080 --> 16:40.280
获取的是不是还是两个

16:40.280 --> 16:40.580
对吧

16:40.580 --> 16:41.680
还是两个

16:41.680 --> 16:42.580
没问题吧

16:42.580 --> 16:43.380
获取的这两个

16:43.380 --> 16:44.980
它是通过Name属性值获取

16:44.980 --> 16:46.180
这个东西没啥用

16:46.180 --> 16:46.980
没啥用

16:46.980 --> 16:49.880
Name属性在以前很早很早的时候

16:49.880 --> 16:50.580
Name属性

16:50.580 --> 16:52.280
无论特别是i9e

16:52.280 --> 16:53.780
特别喜欢这个玩意

16:53.780 --> 16:55.180
特别喜欢这个玩意

16:55.180 --> 16:57.580
但是现在的

16:57.580 --> 16:59.380
我们很少去加这个Name属性了

16:59.380 --> 17:01.080
很少去加个Name属性了

17:01.080 --> 17:02.780
除非在一些表单元素里边

17:02.780 --> 17:04.180
它Name属性有用

17:04.180 --> 17:06.280
像其他元素加个Name属性没啥意义了

17:06.280 --> 17:07.880
所以说我们这种方式很少用

17:07.880 --> 17:09.580
用的非常少

17:09.580 --> 17:12.180
我们常用的就是前面两种方式

17:12.180 --> 17:14.480
好 下面还有

17:14.480 --> 17:18.980
下面还有通过这种方式

17:18.980 --> 17:21.780
query selector

17:21.780 --> 17:25.080
这种方式就非常舒服了

17:25.180 --> 17:26.280
以前没有这种方式

17:26.280 --> 17:27.580
也有它有兼容性问题

17:27.580 --> 17:29.680
但是现在有了这种方式过后

17:29.680 --> 17:31.580
用起来非常非常的舒服

17:31.580 --> 17:33.280
通过元素的

17:33.280 --> 17:37.480
就是通过CSS选择器获取元素

17:37.480 --> 17:38.680
超级霸道

17:38.680 --> 17:39.980
真的是超级霸道

17:39.980 --> 17:43.480
i19e下无效

17:43.480 --> 17:47.280
有i8和i7、i6这些都无效

17:47.280 --> 17:49.180
这是query selector

17:49.180 --> 17:52.680
好 咱们来看一下

17:52.680 --> 17:54.580
这个还不是i9一下无效

17:54.580 --> 17:58.180
这是i8、i7、i8以下无效

17:58.180 --> 17:59.480
i8以下无效

17:59.480 --> 18:01.380
i7、i6这些无效

18:01.380 --> 18:02.680
好 然后我们看一下

18:02.680 --> 18:04.580
这里我们比方说

18:04.580 --> 18:06.480
我们要获取这个id

18:06.480 --> 18:08.880
用id来获取

18:08.880 --> 18:09.880
query selector

18:09.880 --> 18:11.280
咱们来看一下

18:11.280 --> 18:15.680
这里 document query selector

18:15.680 --> 18:16.780
这里边写的是啥呢

18:16.780 --> 18:19.280
写的是CSS选择器

18:19.280 --> 18:20.680
CSS选择器是不是写过了

18:20.680 --> 18:21.780
大家每个同学都写过了

18:21.780 --> 18:22.180
对吧

18:22.180 --> 18:23.580
你再来学这门课了

18:23.580 --> 18:25.480
肯定是CSS这一块已经搞定的

18:25.480 --> 18:26.780
那id是怎么选中的

18:26.780 --> 18:29.580
是不是紧号买div1

18:29.580 --> 18:31.180
你看是不是获取到了

18:31.180 --> 18:32.180
id为这个

18:32.180 --> 18:34.480
好 我能不能使用内选择器呢

18:34.480 --> 18:36.280
你看一下第二abc

18:36.280 --> 18:37.680
看一下能不能获取到

18:37.680 --> 18:38.380
是不是也能获取到

18:38.380 --> 18:40.280
这个是不是非常舒服

18:40.280 --> 18:42.280
大家注意看没有

18:42.280 --> 18:44.780
内样是abc是不是有两个

18:44.780 --> 18:46.080
我们这里

18:46.080 --> 18:46.980
有两个

18:46.980 --> 18:49.080
内样是abc看没

18:49.080 --> 18:50.080
有两个吧

18:50.080 --> 18:51.080
好 我为什么现在

18:51.080 --> 18:52.280
应该是获取两个才对

18:52.280 --> 18:53.080
但是呢

18:53.080 --> 18:54.580
你使用这个函数的话

18:54.580 --> 18:57.680
它只会获取匹配的第1个

18:57.680 --> 18:59.380
它只会获取匹配的第1个

18:59.380 --> 19:00.380
如果它不能匹配的话

19:00.380 --> 19:01.880
得到了这个没什么好说的

19:01.880 --> 19:03.180
如果它能匹配的话

19:03.180 --> 19:05.480
它只会获取匹配的第1个

19:05.480 --> 19:05.980
好吧

19:05.980 --> 19:06.980
它没有加复数

19:06.980 --> 19:07.180
对吧

19:07.180 --> 19:08.080
没有加复数

19:08.080 --> 19:10.680
所以说获取元素的时候

19:10.680 --> 19:12.980
得到匹配的第1个

19:12.980 --> 19:14.580
得到匹配的第1个

19:14.580 --> 19:15.680
再下一个

19:15.680 --> 19:19.780
document query selector all

19:19.780 --> 19:20.880
这个是什么呢

19:20.880 --> 19:23.180
通过还是一样

19:23.180 --> 19:27.180
通过css选择器来获取元素

19:27.180 --> 19:31.680
得到所有匹配的结果

19:31.680 --> 19:32.780
同样的兼容性问题

19:32.780 --> 19:35.280
Ieba一下无效

19:35.280 --> 19:37.480
好 看一下

19:37.480 --> 19:43.280
比方说我们document query selector all

19:43.280 --> 19:44.380
第二 abc

19:44.380 --> 19:46.380
你看获取出来是不是两个

19:46.380 --> 19:48.080
对吧 是两个

19:48.080 --> 19:48.880
没什么问题吧

19:48.880 --> 19:49.780
好 比方说

19:49.780 --> 19:52.780
咱们我们还要得到

19:52.780 --> 19:54.780
比方说一个ul li

19:54.780 --> 19:56.380
里面有乘以10

19:56.380 --> 19:59.280
乘以10 li下面有什么

19:59.280 --> 20:00.080
有div

20:00.080 --> 20:02.580
div下面有lorry

20:02.580 --> 20:03.380
得到这些div

20:03.380 --> 20:04.680
我们要得到这些div

20:04.680 --> 20:05.980
好 我们可以怎么来选呢

20:05.980 --> 20:07.280
我们可以用这种方式

20:07.280 --> 20:10.380
document query selector all

20:10.380 --> 20:13.780
然后ul下面的li下面的div

20:13.780 --> 20:14.480
你看

20:14.480 --> 20:16.380
是不是跟css一样了

20:16.380 --> 20:17.980
是不是很舒服这样子

20:17.980 --> 20:18.780
非常非常舒服

20:18.880 --> 20:21.180
这两个虽然有兼容性问题

20:21.180 --> 20:23.380
但是这种兼容太久远了

20:23.380 --> 20:25.080
我们可以不用考虑

20:25.080 --> 20:26.480
Ie7 Ie6

20:26.480 --> 20:28.680
Ie7 Ie6都是什么时候的事了

20:28.680 --> 20:29.680
不用去考虑它

20:29.680 --> 20:31.080
我们直接可以使用

20:31.080 --> 20:32.580
可能是那个

20:32.580 --> 20:34.980
这是也是我后边在使用

20:34.980 --> 20:36.580
获取多蚊元素的时候

20:36.580 --> 20:39.180
经常使用的两个函数

20:39.180 --> 20:39.880
这两个

20:39.880 --> 20:41.280
以及了这一个

20:41.280 --> 20:42.080
by id

20:42.080 --> 20:43.380
其他的呢 我都不太会使用

20:43.380 --> 20:44.580
像这两个呢

20:44.580 --> 20:45.480
不太会使用

20:45.480 --> 20:46.980
像这个呢

20:46.980 --> 20:48.380
有的时候稍微用一下

20:48.380 --> 20:50.280
有的时候稍微用一下

20:50.280 --> 20:51.180
好 但是呢

20:51.180 --> 20:53.080
这里大家注意一下

20:53.080 --> 20:55.180
有几个细节

20:56.180 --> 20:57.580
一个个说

20:57.580 --> 20:59.980
就是get

20:59.980 --> 21:01.580
就是我们在所有的

21:01.580 --> 21:05.780
在所有的得到内束组

21:05.780 --> 21:09.080
得到内束组的方法中

21:09.080 --> 21:10.580
哪些是得到内束组的

21:10.580 --> 21:12.280
就这些得到内束组对吧

21:12.280 --> 21:13.880
这个是得到内束组对不对

21:13.880 --> 21:15.180
这个是得到内束组

21:15.180 --> 21:16.680
这个是得到内束组对吧

21:16.680 --> 21:19.580
在这些所有的到内束组方法中

21:19.580 --> 21:21.280
好 怎么样呢

21:21.280 --> 21:23.080
除了

21:23.080 --> 21:26.480
除了query selector

21:26.480 --> 21:28.080
or

21:28.080 --> 21:30.280
其他的方法

21:30.280 --> 21:32.680
都是实时

21:32.680 --> 21:35.080
实时更新的

21:35.080 --> 21:36.280
这什么意思

21:36.280 --> 21:36.880
这啥意思呢

21:36.880 --> 21:38.080
我给大家举个例子

21:38.080 --> 21:39.580
举个例子吧

21:39.580 --> 21:41.480
比方说

21:41.480 --> 21:46.580
我们这里得到 document

21:46.680 --> 21:48.080
得到给辨量

21:48.080 --> 21:49.580
辨量

21:49.580 --> 21:51.680
divs documents

21:51.680 --> 21:54.480
get elements by tag name

21:54.480 --> 21:56.080
不用得到 tag name

21:56.080 --> 21:57.080
div

21:57.080 --> 21:58.480
得到所有的div

21:58.480 --> 21:59.980
我们看一下div有多少

21:59.980 --> 22:01.180
有13个对不对

22:01.180 --> 22:01.880
13个

22:01.880 --> 22:02.480
ok

22:02.480 --> 22:03.380
你看着

22:03.380 --> 22:06.080
我在这里把其中一个div删掉

22:06.080 --> 22:06.980
随便找一个删吧

22:06.980 --> 22:08.280
就把这个删掉

22:08.280 --> 22:09.480
删掉

22:09.480 --> 22:10.480
删掉之后

22:10.480 --> 22:13.380
我们再来看一下这个div

22:13.380 --> 22:14.780
我没有重新获取

22:14.780 --> 22:16.380
我没有重新获取

22:16.480 --> 22:17.980
它是变成12个了

22:17.980 --> 22:19.380
也就是它这个集合

22:19.380 --> 22:22.080
它这个集合是实时的

22:22.080 --> 22:23.880
根据网页的变化

22:23.880 --> 22:25.180
而自动发生变化的

22:25.180 --> 22:26.780
它是实时的

22:26.780 --> 22:28.880
包括class name

22:28.880 --> 22:30.680
包括by name

22:30.680 --> 22:32.080
这些都是实时的

22:32.080 --> 22:33.380
当然单个对象就不存在了

22:33.380 --> 22:34.480
单个对象不存在

22:34.480 --> 22:36.780
我说的是这种内数组

22:36.780 --> 22:37.580
这种内数组

22:37.580 --> 22:39.580
它是实时更新的

22:39.580 --> 22:40.980
更新的

22:40.980 --> 22:42.580
好 那么我们来看一下另外一个

22:42.580 --> 22:45.080
另外一个

22:45.780 --> 22:47.980
div是2

22:47.980 --> 22:49.180
div是2 document

22:49.180 --> 22:51.780
get a query selector

22:51.780 --> 22:52.780
我们这样子

22:52.780 --> 22:54.180
选中元素选择器

22:54.180 --> 22:55.080
选中所有的div

22:55.080 --> 22:55.780
也可以对吧

22:55.780 --> 22:56.780
用这种方式

22:56.780 --> 22:58.280
divs

22:59.180 --> 23:00.180
写错了

23:00.180 --> 23:01.180
写错了

23:01.180 --> 23:02.280
应该是or对吧

23:02.280 --> 23:04.080
不然它得到的是第1个

23:04.080 --> 23:04.780
or

23:04.780 --> 23:05.880
好 看一下

23:05.880 --> 23:06.480
好

23:06.480 --> 23:07.480
我们来看一下

23:07.480 --> 23:09.580
divs

23:09.580 --> 23:10.480
12个对吧

23:10.480 --> 23:13.180
divs2

23:13.180 --> 23:14.580
你看是不是也是12个

23:14.580 --> 23:17.880
这个地方它是用的是什么来获取呢

23:17.880 --> 23:20.180
用的是query selector or

23:20.180 --> 23:23.880
这种是用的是get elements by tag name

23:23.880 --> 23:26.280
这两种获取方式得到了两个变量

23:26.280 --> 23:28.080
接下来我们再来上一个

23:28.080 --> 23:29.080
再来上一个div

23:29.080 --> 23:31.280
把第1个div删掉

23:31.280 --> 23:33.680
按一下键盘的delay设件就把删掉了

23:33.680 --> 23:35.380
好 删掉之后咱们再来看

23:35.380 --> 23:36.080
div2

23:36.080 --> 23:37.680
你看是不是还是12个

23:37.680 --> 23:40.280
然后divs or call

23:40.280 --> 23:41.080
有点重新来了

23:41.080 --> 23:42.180
我的天

23:42.180 --> 23:43.480
哎呀 我的天

23:43.480 --> 23:45.580
好 再来吧

23:45.580 --> 23:46.280
其实不用看了

23:46.280 --> 23:47.480
我们看到过的对吧

23:47.480 --> 23:49.380
看到过的get

23:49.380 --> 23:50.380
点错了

23:50.380 --> 23:52.680
点错了一把刷新的页面

23:52.680 --> 23:55.180
刷新的页面就得重新来一次了

23:55.180 --> 23:56.180
然后第二个

23:56.180 --> 23:58.380
divs2 documents

23:58.380 --> 24:02.780
query selector or div

24:02.780 --> 24:04.480
那么现在两个是一样的对吧

24:04.480 --> 24:05.880
divs13个

24:05.880 --> 24:07.480
divs2

24:07.480 --> 24:09.280
你看都是13个

24:09.280 --> 24:10.580
接下来我们来删除一个

24:10.580 --> 24:11.880
删除一个

24:11.880 --> 24:12.680
随便删一个吧

24:12.780 --> 24:13.480
删一个

24:13.480 --> 24:14.280
好 现在我们来看

24:14.280 --> 24:15.980
divs12个

24:15.980 --> 24:17.080
实施更新

24:17.080 --> 24:18.580
divs2

24:18.580 --> 24:19.980
13个 没变化 对吧

24:19.980 --> 24:22.080
也就是这种方式是静态的

24:22.080 --> 24:23.980
就是它或许的时候是什么样子

24:23.980 --> 24:25.380
它得到的数组就是什么样子

24:25.380 --> 24:27.080
它数组不会自动变化

24:27.080 --> 24:29.780
这个内数组不会根据网页自动变化

24:29.780 --> 24:30.780
这是这两个

24:30.780 --> 24:32.880
他们的区别

24:32.880 --> 24:35.480
但是这个东西是不是问题了

24:35.480 --> 24:36.680
也不能算是问题吧

24:36.680 --> 24:38.580
就是你自己要知道这么一点

24:38.580 --> 24:40.480
知道这么一个现象就行了

24:40.580 --> 24:41.680
那么你在开发的时候

24:41.680 --> 24:43.280
你要稍微注意一下

24:43.280 --> 24:44.280
以上通过它

24:44.280 --> 24:45.480
它是自动变化的

24:45.480 --> 24:46.380
根据网页

24:46.380 --> 24:48.280
实施的根据网页更新的

24:48.280 --> 24:49.480
它是没有根据变化

24:49.480 --> 24:51.880
没有发生变化的

24:51.880 --> 24:52.480
但是我告诉大家

24:52.480 --> 24:54.080
我后边用它比较多一点

24:54.080 --> 24:55.280
你只要你知道就行了

24:55.280 --> 24:56.080
这个点你知道

24:56.080 --> 24:58.580
你就不会造成问题了

24:58.580 --> 25:00.680
这一点

25:00.680 --> 25:02.180
另外细节上

25:02.180 --> 25:05.680
query selector

25:05.680 --> 25:07.680
应该说这样说吧

25:07.680 --> 25:09.880
get anyment

25:09.980 --> 25:13.080
by id

25:13.080 --> 25:14.980
得到元素

25:14.980 --> 25:16.880
执行效率最高

25:16.880 --> 25:18.380
效率最高

25:18.380 --> 25:20.080
因为我们要从文档里面

25:20.080 --> 25:21.180
去找到一个元素

25:21.180 --> 25:23.080
可能我们的文档很大

25:23.080 --> 25:25.180
可能有一千多个元素

25:25.180 --> 25:26.880
你要去寻找元素的话

25:26.880 --> 25:28.480
是需要花费时间的

25:28.480 --> 25:30.080
虽然你只需要写一句话

25:30.080 --> 25:31.180
他帮你来找

25:31.180 --> 25:32.080
但是他找的时候

25:32.080 --> 25:33.780
是需要花费时间的

25:33.780 --> 25:35.980
那么谁花费的时间最短呢

25:35.980 --> 25:36.880
就这个

25:36.880 --> 25:38.480
get anyment by id

25:38.480 --> 25:41.080
花费的时间是最短的

25:41.080 --> 25:42.580
因为他是id是唯一的

25:42.580 --> 25:44.480
他有一种特别的查照方式

25:44.480 --> 25:45.580
而且很多浏览器

25:45.580 --> 25:46.780
特别是谷歌浏览器

25:46.780 --> 25:49.380
他会优化这种查照方式

25:49.380 --> 25:52.080
会优化这种通过id的查照的方式

25:52.080 --> 25:53.280
因此

25:53.280 --> 25:55.680
这种方式执行的效率最高

25:55.680 --> 25:56.580
所以说

25:56.580 --> 25:58.480
单凡能够用这种方式

25:58.480 --> 25:59.780
就尽量用这种方式

25:59.780 --> 26:01.480
但是有的时候不太合适

26:01.480 --> 26:02.280
因为有的时候

26:02.280 --> 26:03.480
我要获取大队元素

26:03.480 --> 26:04.080
或者说

26:04.080 --> 26:06.980
我要获取的元素成绩结构很深

26:06.980 --> 26:08.280
等等等等

26:08.280 --> 26:10.580
不太适合用id来获取

26:10.580 --> 26:11.780
有的时候不太适合

26:11.780 --> 26:12.180
所以说

26:12.180 --> 26:13.680
也不能走火入魔

26:13.680 --> 26:15.480
说他效率高就疯狂的用他

26:15.480 --> 26:16.480
就是你还要考虑到

26:16.480 --> 26:18.280
写代码的方便程度

26:18.280 --> 26:19.080
最方便的是谁

26:19.080 --> 26:20.180
最方便的肯定是他

26:20.180 --> 26:20.680
对吧

26:20.680 --> 26:22.480
肯定是这两个是最方便的

26:22.480 --> 26:23.280
但是有的时候

26:23.280 --> 26:24.880
我们稍微考虑一下效率

26:24.880 --> 26:26.280
我们考虑的

26:26.280 --> 26:27.780
可以用id来获取

26:27.780 --> 26:28.080
好吧

26:28.080 --> 26:30.180
用id获取效率是最高的

26:30.180 --> 26:30.380
好

26:30.380 --> 26:31.080
再看下一个

26:31.080 --> 26:32.680
下一个细节

26:32.680 --> 26:34.080
就是

26:34.080 --> 26:37.080
输写了id的元素

26:37.180 --> 26:38.680
输写了id的元素

26:38.680 --> 26:42.080
会自动成为温斗

26:42.080 --> 26:45.180
会自动成为温斗

26:45.180 --> 26:48.180
温斗对象的属性

26:48.180 --> 26:49.680
会自动成为温斗对象的属性

26:49.680 --> 26:50.580
这个很神奇

26:50.580 --> 26:51.980
非常非常神奇

26:51.980 --> 26:52.980
我也不知道刘烂琪

26:52.980 --> 26:53.780
他为什么要这样搞

26:53.780 --> 26:54.880
但是这种方式

26:54.880 --> 26:57.280
已经被抨击的体屋玩复了

26:57.280 --> 26:58.280
所以大家不要用

26:58.280 --> 26:58.980
不要用

26:58.980 --> 26:59.680
就比较说

26:59.680 --> 27:00.580
maiDIV1

27:00.580 --> 27:03.180
咱们来看一下

27:03.180 --> 27:04.980
变成了温斗对象的一个全局属性

27:04.980 --> 27:06.080
maiDIV1

27:06.080 --> 27:07.780
你看一下

27:07.780 --> 27:08.880
居然可以

27:08.880 --> 27:09.880
也就是说我们可以

27:09.880 --> 27:11.680
甚至连方法都不需要

27:11.680 --> 27:12.380
我们直接

27:12.380 --> 27:13.480
因为它是温斗对象的属性

27:13.480 --> 27:14.980
是不是可以直接用

27:14.980 --> 27:16.180
是不是可以直接用

27:16.180 --> 27:20.280
但是大家千万不要这么干

27:20.280 --> 27:22.180
这个东西是个单对象

27:22.180 --> 27:23.180
因为id是单对象

27:23.180 --> 27:23.880
它不是输主

27:23.880 --> 27:24.180
对吧

27:24.180 --> 27:25.180
它不是输主

27:25.180 --> 27:27.380
它是一个单对象

27:27.380 --> 27:27.680
好

27:27.680 --> 27:28.480
那么单对象

27:28.480 --> 27:30.080
它也是实实的

27:30.080 --> 27:31.480
这就很可怕了

27:33.880 --> 27:34.980
对在这

27:34.980 --> 27:39.760
它是一个实实的

27:39.760 --> 27:41.360
如果是输主实实还好

27:41.360 --> 27:43.360
但是单对象实实很可怕的

27:43.360 --> 27:45.160
它是一个实实的单对象

27:45.160 --> 27:47.060
就是有的时候我讲公开课的时候

27:47.060 --> 27:48.160
就有同学在说

27:48.160 --> 27:49.960
为什么不去用这种方式

27:49.960 --> 27:51.660
这种方式实际上

27:51.660 --> 27:54.460
虽然说官方标准里面

27:54.460 --> 27:55.860
我确实找了半天都没找到

27:55.860 --> 27:57.760
它不是一个标准

27:57.760 --> 28:00.660
但是它是一个事实上的标准

28:00.660 --> 28:01.860
已经生命组成手犯了

28:01.860 --> 28:02.860
大家都这样子用

28:02.860 --> 28:04.260
每个绿态器它都支持

28:04.260 --> 28:06.760
所以它是一个事实上的标准

28:06.760 --> 28:08.060
我不知道我这个普通话

28:08.060 --> 28:09.160
大家普通话

28:09.160 --> 28:10.260
大家能不能听懂

28:10.260 --> 28:12.360
事实上的标准

28:15.060 --> 28:16.060
实际上都可以用

28:16.060 --> 28:17.160
确实可以用

28:17.160 --> 28:19.260
但是不推荐使用

28:19.260 --> 28:20.160
不推荐使用

28:20.160 --> 28:21.160
为什么不推荐使用呢

28:21.160 --> 28:22.860
因为它是一个实实的单对象

28:22.860 --> 28:28.300
实实的单对象会造成什么问题呢

28:28.300 --> 28:29.900
如果你有一天不小心

28:29.900 --> 28:31.200
给它重新复职了

28:34.100 --> 28:34.600
它第一个

28:34.600 --> 28:36.100
闻了对象的属性对吧

28:36.100 --> 28:39.460
重新复职了

28:39.460 --> 28:40.960
是不是要出问题

28:40.960 --> 28:41.860
是不是要出问题

28:41.860 --> 28:43.960
那么就意味着啥呢

28:43.960 --> 28:45.660
比方说一个页面中

28:47.760 --> 28:49.460
我好好说一下这一块吧

28:49.460 --> 28:51.060
因为之前有同学

28:51.060 --> 28:51.960
就是老师在证论这个

28:51.960 --> 28:53.160
为什么那么方便不能用

28:53.160 --> 28:54.160
你说我要说的话

28:54.160 --> 28:54.960
要讲一大堆

28:54.960 --> 28:56.860
我简单说一下吧

28:56.860 --> 28:57.760
比方说一个页面中

28:57.760 --> 28:59.460
有很多的介石代码

28:59.460 --> 29:00.660
对吧

29:00.660 --> 29:02.060
它肯定不是一个介石吧

29:02.060 --> 29:03.460
一点介石

29:03.460 --> 29:05.660
这是张三写的

29:05.660 --> 29:07.660
这是邓格写的

29:07.660 --> 29:09.560
这是成格写的

29:09.560 --> 29:11.560
比方说这个邓格写的

29:11.560 --> 29:14.160
我们用名字吧

29:14.160 --> 29:16.160
这是元

29:16.160 --> 29:18.960
这是邓

29:18.960 --> 29:20.460
这是鸡

29:20.460 --> 29:22.760
算了还是成吧

29:22.760 --> 29:24.160
这是成格写的

29:24.160 --> 29:26.560
比方说咱们来举个例子

29:26.560 --> 29:28.460
我在我这个介石里边

29:28.460 --> 29:30.260
我写的介石

29:30.260 --> 29:32.360
比方说我去用了这个玩意

29:32.360 --> 29:33.760
我去把它当成

29:33.760 --> 29:35.260
某一个元素来使用

29:35.260 --> 29:37.360
我在这里边使用了什么呢

29:37.360 --> 29:42.860
在这里边使用了温豆的属性

29:42.860 --> 29:43.660
就是权具变量

29:43.660 --> 29:45.660
买DIV1

29:45.660 --> 29:47.560
然后成格这里边

29:47.560 --> 29:48.760
比方说我也不去

29:48.760 --> 29:50.060
是用什么买DIV1了

29:50.060 --> 29:52.060
我们用一些比较常用的名字

29:52.060 --> 29:53.460
比较常用的名字

29:53.460 --> 29:55.960
就是比方score分数

29:55.960 --> 29:58.960
我使用了这个ID分数

29:58.960 --> 29:59.260
好

29:59.260 --> 30:01.460
然后登革这里边

30:01.460 --> 30:03.360
做了一件事

30:04.360 --> 30:09.660
定义了一个全局变量score

30:09.660 --> 30:11.860
那你看我的介石是不是全出问题了

30:11.860 --> 30:12.960
全部出问题了

30:12.960 --> 30:14.860
因为我把这个score当成什么

30:14.860 --> 30:16.560
当成了什么

30:16.560 --> 30:19.560
就是温豆对象的全局数

30:19.560 --> 30:22.960
就是DIV1元素来使用的

30:22.960 --> 30:24.360
当成元素来使用的

30:24.360 --> 30:27.960
但是后面它把这个名字改了

30:27.960 --> 30:30.560
改成了另外一个东西

30:30.560 --> 30:33.660
定了另外一个全局变量来表示一个分数

30:33.660 --> 30:35.160
那是不是我这边要出问题了

30:35.160 --> 30:36.860
那我就被它影响掉了

30:36.860 --> 30:37.760
明白这个意思吗

30:37.760 --> 30:40.460
这个说这是一个全局污染的问题

30:40.460 --> 30:42.660
另外一个是一个实时

30:42.660 --> 30:44.860
一个实时的单对象的问题

30:44.860 --> 30:46.860
比方说成格里边

30:46.860 --> 30:48.560
它又做了一件事

30:48.560 --> 30:52.360
删除了ID为abc的元素

30:52.360 --> 30:53.660
大家注意

30:53.660 --> 30:55.660
删除了元素

30:55.660 --> 30:57.760
不意味着

30:57.760 --> 30:59.360
我就不能操作这个元素了

30:59.360 --> 31:02.660
我可以展现它是对象吗

31:02.660 --> 31:03.560
兄弟

31:03.560 --> 31:07.260
我在这里建立一个对象

31:07.260 --> 31:09.060
会不会影响页面

31:09.060 --> 31:10.360
跟页面有啥关系呢

31:10.360 --> 31:11.160
我是GS代码

31:11.160 --> 31:12.860
我有个对象

31:12.860 --> 31:13.760
我要处理一个对象

31:13.760 --> 31:16.960
我可能要把对象里面的东西进行运算

31:16.960 --> 31:17.460
好

31:17.460 --> 31:21.460
如果成格把这个元素给我删掉了

31:21.460 --> 31:23.060
那我还能用这个属性吗

31:23.060 --> 31:23.660
是不是不能用了

31:23.660 --> 31:24.860
它变成了undefined了

31:24.860 --> 31:25.060
对吧

31:25.060 --> 31:26.260
这个属性会消失

31:26.260 --> 31:28.160
你看着

31:28.160 --> 31:30.960
如果我再刷新意思

31:30.960 --> 31:32.260
比方说score

31:32.260 --> 31:34.060
你看

31:34.060 --> 31:35.760
我这边没保存

31:35.760 --> 31:35.960
好

31:35.960 --> 31:37.960
这边重新刷新意思

31:37.960 --> 31:38.760
score

31:38.760 --> 31:39.160
你看

31:39.160 --> 31:40.360
是一个东西

31:40.360 --> 31:40.660
对吧

31:40.660 --> 31:41.460
是一个玩意

31:41.460 --> 31:41.660
好

31:41.660 --> 31:44.260
咱们把这个元素给我删了

31:44.260 --> 31:45.460
有一些成格把它删了

31:45.460 --> 31:47.560
它可能要做一些页面效果把它删了

31:47.560 --> 31:50.060
但是不能影响我这里处理

31:50.060 --> 31:51.160
我哥这里

31:51.160 --> 31:52.360
他要不要显示到页面上

31:52.360 --> 31:53.060
其实无所谓的

31:53.060 --> 31:54.060
对我来说无所谓的

31:54.060 --> 31:57.260
我可能只是把那个分数拿出来进行运算

31:57.260 --> 31:59.660
但是我再去访问他是不是就出问题了

31:59.660 --> 32:00.760
他说undefined

32:00.760 --> 32:01.660
闻到对象上没了

32:01.660 --> 32:05.760
他是实时的单对象出问题了

32:05.760 --> 32:07.760
你不能把对象给我弄消失

32:07.760 --> 32:08.160
对象消失

32:08.160 --> 32:10.060
我还要用这个里面的一些东西

32:10.060 --> 32:11.860
可能我将来还要把它

32:11.860 --> 32:12.860
把它处理一下过后

32:12.860 --> 32:14.260
我还要把它夹到页面上

32:14.260 --> 32:15.660
我还要继续用的

32:15.660 --> 32:17.660
你只是页面上看不见了而已

32:17.660 --> 32:18.560
页面上没了

32:18.560 --> 32:19.260
你把它删了

32:19.260 --> 32:20.960
但是我的对象应该还在

32:20.960 --> 32:23.460
但是他这样子把对象也给我弄没了

32:23.460 --> 32:25.160
这个属性获取不到这个对象的

32:25.260 --> 32:28.560
所以说不推荐大家使用这种方式

32:28.560 --> 32:30.360
这是他的原因

32:30.360 --> 32:32.760
尽管他可以使用很方便

32:32.760 --> 32:33.760
不推荐使用

32:33.760 --> 32:35.960
除非在一些非常非常小的系统里面

32:35.960 --> 32:37.460
全部单码都是你一个人写的

32:37.460 --> 32:38.560
那单码也不多

32:38.560 --> 32:39.560
用的变量也不多

32:39.560 --> 32:40.960
也不太出现什么

32:40.960 --> 32:42.760
能够出现混乱的情况

32:42.760 --> 32:43.660
哪里可以用

32:43.660 --> 32:43.960
但是呢

32:43.960 --> 32:44.560
尽量不要用

32:44.560 --> 32:46.660
不要养成这种错误的习惯

32:46.660 --> 32:47.260
好吧

32:47.260 --> 32:49.560
这是关于这一点

32:49.560 --> 32:50.660
下面这一点

32:50.660 --> 32:52.560
下一个点点很有意思

32:52.560 --> 32:55.860
它指的是这两个这几个方法

32:55.860 --> 32:56.260
复制吧

32:57.460 --> 32:59.960
get elements by tag name

32:59.960 --> 33:03.660
以及get elements by class name

33:03.660 --> 33:05.160
以及christ nectar

33:06.460 --> 33:07.960
这四个

33:07.960 --> 33:10.260
当然我平时写开发的时候

33:10.260 --> 33:11.460
不太会用前面两个

33:11.460 --> 33:13.060
不太会用前面两个

33:13.060 --> 33:13.860
看个人习惯

33:13.860 --> 33:15.660
其实这个东西没有什么好纠结的

33:15.660 --> 33:16.360
像成哥的话

33:16.360 --> 33:18.360
他比较习惯就用前面这个对吧

33:18.360 --> 33:19.660
看个人习惯

33:19.660 --> 33:21.360
我习惯用后面这两个

33:21.360 --> 33:22.060
没什么说的

33:22.060 --> 33:22.660
没什么

33:22.660 --> 33:24.260
就是这个东西没什么好说的

33:24.260 --> 33:24.960
看个人习惯

33:27.060 --> 33:29.160
这四个函数呢

33:29.160 --> 33:36.660
可以作为其他元素节点对象的方法使用

33:36.660 --> 33:37.360
啥意思

33:37.360 --> 33:38.460
我举个例子

33:38.460 --> 33:39.260
一下就明白了

33:39.260 --> 33:40.660
非常非常简单

33:40.660 --> 33:42.060
比方说咱们这个页面中

33:42.060 --> 33:42.960
有这么一些元素结构

33:42.960 --> 33:43.260
对吧

33:43.260 --> 33:43.960
把方小一点

33:45.960 --> 33:47.060
有这个eo对吧

33:47.060 --> 33:47.260
好

33:47.260 --> 33:48.760
我们来先来获取这个eo

33:48.760 --> 33:50.260
甭管你用什么样的方式来获取

33:50.260 --> 33:51.060
来获取这个eo

33:51.660 --> 33:52.260
document

33:52.260 --> 33:55.060
我们用query snector来获取这个eo

33:55.860 --> 33:56.960
好获取过后

33:56.960 --> 33:58.560
比方比方说

33:58.560 --> 34:00.660
咱们来获取这个eo下面的li

34:01.760 --> 34:03.260
这个eo下面的li

34:03.260 --> 34:04.160
怎么来获取呢

34:04.960 --> 34:06.360
我们可以这样子使用

34:06.360 --> 34:07.760
eo是不是个节点

34:07.760 --> 34:08.060
好

34:08.060 --> 34:09.160
节点是个对象

34:09.160 --> 34:11.060
它对象里边也有很多成员

34:11.060 --> 34:11.960
也有很多属性

34:11.960 --> 34:13.460
也有很多方法

34:13.460 --> 34:15.460
其中我也可以获取

34:15.460 --> 34:18.760
什么get element by什么 tag name

34:18.760 --> 34:19.760
看到没

34:20.760 --> 34:22.160
这样子获取什么

34:22.160 --> 34:23.460
获取li

34:23.460 --> 34:24.660
那么这里获取的是什么

34:24.660 --> 34:25.860
获取的是这个ul

34:25.860 --> 34:26.560
下面的

34:26.560 --> 34:27.360
就这个节点

34:27.360 --> 34:29.060
下面的li

34:29.060 --> 34:30.560
它的后代元素

34:30.560 --> 34:31.860
什么叫后代元素

34:31.860 --> 34:35.060
就指的是它的指元素的指元素的指元素

34:35.060 --> 34:36.660
都是后代元素

34:36.660 --> 34:38.560
像它这个指元素肯定可以获取

34:38.560 --> 34:39.960
没问题吧

34:39.960 --> 34:40.960
也可以怎么样

34:40.960 --> 34:43.560
也可以获取get element by tag name

34:43.560 --> 34:44.060
div

34:44.060 --> 34:45.260
或者它里边的div

34:45.260 --> 34:45.760
看到没有

34:45.760 --> 34:47.160
10个也可以获取

34:47.160 --> 34:49.060
它就不会获取外边的东西了

34:49.060 --> 34:50.260
你看这个意思吧

34:50.260 --> 34:51.460
当然也可以用什么

34:51.460 --> 34:52.960
get class name

34:52.960 --> 34:53.360
class name

34:53.360 --> 34:54.960
这个就不举例了

34:54.960 --> 34:55.760
不举例了

34:55.760 --> 34:57.160
这个我们平时不怎么用的

34:57.160 --> 34:58.160
当然也是一样的

34:58.160 --> 34:59.060
是一样的

34:59.060 --> 35:00.060
还可以用什么

35:00.060 --> 35:00.760
query

35:00.760 --> 35:02.960
继续用query selector

35:02.960 --> 35:04.160
或许单个

35:04.160 --> 35:05.060
用选择器

35:05.060 --> 35:06.460
选择这下边的

35:06.460 --> 35:07.860
这里边的东西

35:07.860 --> 35:09.860
选择div

35:09.860 --> 35:10.660
选择是什么

35:10.660 --> 35:12.160
选择是匹配到了第1个

35:12.160 --> 35:12.560
对吧

35:12.560 --> 35:14.060
匹配到了第1个

35:14.060 --> 35:15.160
也可以用什么

35:15.160 --> 35:18.160
query selector all

35:18.160 --> 35:18.960
div

35:18.960 --> 35:19.760
query selector是什么

35:19.760 --> 35:20.860
query selector是Ul

35:20.860 --> 35:24.360
下边的后代元素的div

35:24.360 --> 35:26.060
你看这个意思吧

35:26.060 --> 35:27.160
没问题吧

35:27.160 --> 35:29.460
就这些东西里边也可以用它

35:29.460 --> 35:31.460
在元素节点里边也可以用它

35:31.460 --> 35:33.760
不仅可以在文档节点里边使用

35:33.760 --> 35:35.260
我们刚才举例的时候

35:35.260 --> 35:37.360
都是把它当做文档节点的方法

35:37.360 --> 35:38.160
来举例的

35:38.160 --> 35:38.760
实际上

35:38.760 --> 35:41.960
它在元素节点里边也可以使用

35:41.960 --> 35:42.360
OK

35:42.360 --> 35:43.760
这是关于这些细节

35:43.760 --> 35:45.660
大家注意一下

35:45.660 --> 35:46.360
好了

35:46.360 --> 35:47.560
那咱们再来

35:47.560 --> 35:49.560
下一个

35:49.560 --> 35:50.760
我们要说的是什么

35:50.760 --> 35:52.560
就是你已经

35:52.560 --> 35:54.860
你已经获取到了某个元素了

35:54.860 --> 35:57.260
如何根据元素之间的关系

35:57.260 --> 35:59.860
就是根据多么对象数

35:59.860 --> 36:02.760
来获取其他的元素

36:02.760 --> 36:04.160
根据

36:04.160 --> 36:07.160
就是节点关系

36:07.160 --> 36:09.160
获取节点

36:09.160 --> 36:10.660
现在你看注意我的用词

36:10.660 --> 36:12.060
我现在用的是节点了

36:12.060 --> 36:14.160
没再用元素了

36:14.160 --> 36:15.560
我们刚才获取的是元素

36:15.560 --> 36:16.060
对吧

36:16.060 --> 36:17.160
元素是不是节点

36:17.260 --> 36:18.360
当然是节点

36:18.360 --> 36:20.960
那么接下来我要讲的是节点通用的一些东西

36:20.960 --> 36:22.360
你拿到一个节点了过后

36:22.360 --> 36:23.560
甭管它是元素节点

36:23.560 --> 36:25.060
还是其他什么玩意节点

36:25.060 --> 36:26.560
拿到节点之后

36:26.560 --> 36:27.560
你可以干嘛

36:27.560 --> 36:28.860
你可以干嘛

36:28.860 --> 36:29.060
好

36:29.060 --> 36:30.060
节点对象里边

36:30.060 --> 36:31.860
它提供了一些属性

36:31.860 --> 36:34.160
提供了一些属性

36:34.160 --> 36:34.860
第一部分属性

36:34.860 --> 36:35.560
我们一个说

36:35.560 --> 36:38.160
一个是parent load

36:38.160 --> 36:39.260
比较什么意思呢

36:39.260 --> 36:40.460
我这里刚才用张图

36:40.460 --> 36:42.760
用张图来描述这个东西

36:42.760 --> 36:43.960
看我的桌面

36:43.960 --> 36:45.960
我把这个图拖过来

36:46.060 --> 36:46.860
给大家看一下

36:46.860 --> 36:48.160
就这个图

36:48.160 --> 36:51.060
比方说你拿到这么一个节点

36:51.060 --> 36:52.860
你拿到这么一个节点对象

36:52.860 --> 36:54.960
那么你可以通过这些全是属性

36:54.960 --> 36:56.160
全是属性

36:56.160 --> 36:59.060
通过这些属性来获取其他的节点

36:59.060 --> 37:00.360
来再来看呗

37:00.360 --> 37:02.160
我们先说这个吧

37:02.160 --> 37:04.860
就这个parent load

37:04.860 --> 37:05.760
表示什么意思

37:05.760 --> 37:08.060
表示这个节点的副节点

37:08.060 --> 37:11.060
你看节点是不是一个数形结构

37:11.060 --> 37:12.360
节点是一个数形结构

37:12.360 --> 37:13.760
那它肯定有副节点

37:13.760 --> 37:14.560
对不对

37:14.660 --> 37:16.760
我们可以得到parent load

37:16.760 --> 37:17.660
没问题吧

37:17.660 --> 37:18.260
咱们来看一下

37:18.260 --> 37:20.560
第一个parent load

37:20.560 --> 37:24.360
这是获取副节点

37:24.360 --> 37:25.160
副节点是啥

37:25.160 --> 37:25.760
还能是啥呢

37:25.760 --> 37:28.460
副节点也就是副元素

37:28.460 --> 37:29.760
副节点还能是啥呢

37:29.760 --> 37:31.560
那么副节点就是一个元素节点

37:31.560 --> 37:32.060
对吧

37:32.060 --> 37:33.360
副节点就是一个元素节点

37:33.360 --> 37:34.660
咱们来看一下

37:34.660 --> 37:36.560
随便找一个吧

37:36.560 --> 37:39.560
这里就重新写个页面

37:39.560 --> 37:41.860
一个DIV container

37:41.860 --> 37:44.860
然后下边有一个UL list

37:44.860 --> 37:46.660
有个LI乘以10

37:46.660 --> 37:48.860
下面有一个DIV

37:48.860 --> 37:51.060
一个SPAN元素吧

37:51.060 --> 37:51.960
有个A元素吧

37:51.960 --> 37:53.460
A元素下面有个Norwin

37:53.460 --> 37:54.360
四个单词

37:54.360 --> 37:56.560
就随便写个结构

37:56.560 --> 37:57.360
印出来看一下

38:00.960 --> 38:02.760
现在我们来获取

38:02.760 --> 38:05.160
获取其中一个A元素

38:05.160 --> 38:06.760
就获取第一个A元素节点吧

38:06.760 --> 38:07.160
好吧

38:07.160 --> 38:08.960
我们获取第一个A元素节点

38:08.960 --> 38:10.260
咱们来看一下

38:10.360 --> 38:12.160
获取A document

38:12.160 --> 38:13.060
怎么样

38:13.060 --> 38:14.060
我们就可以用这种方式

38:14.060 --> 38:16.160
query selector

38:16.160 --> 38:17.260
A

38:17.260 --> 38:19.360
获取第一个A元素

38:19.360 --> 38:20.360
那这个A元素是不是这个

38:20.360 --> 38:21.260
你看我打出这个A

38:21.260 --> 38:23.860
它在网页上这里就看到了

38:23.860 --> 38:24.460
对吧

38:24.460 --> 38:25.560
打出这个A

38:25.560 --> 38:27.260
或者我们用这种方式

38:27.260 --> 38:28.460
都行

38:28.460 --> 38:30.860
用什么document

38:30.860 --> 38:31.860
我们这样子先吧

38:31.860 --> 38:32.860
直接写到这里

38:32.860 --> 38:34.260
免得你们看代码的时候

38:34.260 --> 38:36.260
你看不到

38:36.260 --> 38:37.260
得到这个A

38:37.260 --> 38:41.260
用document get element by tag name

38:41.260 --> 38:42.660
获取第二个A

38:42.660 --> 38:43.860
咱们来获取第二个A

38:43.860 --> 38:45.460
就下标唯一的A

38:45.460 --> 38:46.860
保存看一下

38:46.860 --> 38:48.160
那么现在我们这个A

38:48.160 --> 38:48.860
就是第二个A

38:48.860 --> 38:50.060
你看看一面

38:50.060 --> 38:51.160
就第二个A

38:51.160 --> 38:51.360
好

38:51.360 --> 38:53.160
接下来我们来看一下它的属性

38:53.160 --> 38:53.960
它属性里边

38:53.960 --> 38:56.360
我们使用parent load

38:56.360 --> 38:58.160
它的复原素是啥

38:58.160 --> 38:59.760
是不是li

38:59.760 --> 39:00.660
这个A元素

39:00.660 --> 39:01.860
它的复原素

39:01.860 --> 39:03.260
就是复节点是不是li

39:03.260 --> 39:04.060
还能是啥呢

39:04.060 --> 39:05.360
你告诉我还能是啥呢

39:05.360 --> 39:06.460
它就是li

39:06.560 --> 39:07.260
对不对

39:07.260 --> 39:07.760
好

39:07.760 --> 39:10.160
那么复原素是不是个节点

39:10.160 --> 39:11.160
复原素是不是个节点

39:11.160 --> 39:13.260
这个表达是不是个节点

39:13.260 --> 39:14.360
那肯定是节点

39:14.360 --> 39:15.160
节点里边是不是

39:15.160 --> 39:17.360
还是有这个属像parent load

39:17.360 --> 39:17.660
对吧

39:17.660 --> 39:18.360
还是有这个属像

39:18.360 --> 39:20.160
你看现在是不是Ua

39:20.160 --> 39:21.360
复原素是Ua

39:21.360 --> 39:21.760
看没有

39:21.760 --> 39:23.260
下面已经给你显示出来了

39:23.260 --> 39:23.460
好

39:23.460 --> 39:24.460
复原素的复原素

39:24.460 --> 39:25.960
它是不是还是一个节点

39:25.960 --> 39:28.160
是不是还是可以用这个属像parent load

39:28.160 --> 39:30.660
现在是divcontainer

39:30.660 --> 39:32.860
是不是还是有复原素的节点

39:32.860 --> 39:33.960
是什么body

39:33.960 --> 39:34.560
对吧

39:34.560 --> 39:36.060
还有复原素的节点

39:36.060 --> 39:37.560
是什么atmail

39:37.560 --> 39:38.360
还有没有

39:38.360 --> 39:40.260
还有parent load的

39:40.260 --> 39:41.160
是什么

39:41.160 --> 39:43.060
atmail跟节点外面就是document

39:43.060 --> 39:44.060
看没

39:44.060 --> 39:45.660
就是document

39:45.660 --> 39:46.660
没问题吧

39:46.660 --> 39:47.360
好

39:47.360 --> 39:49.360
document的复原素节点呢

39:49.360 --> 39:50.060
老

39:50.060 --> 39:50.560
没了

39:50.560 --> 39:51.160
没了

39:51.160 --> 39:52.660
没有复原素了

39:52.660 --> 39:53.960
你看这意思吧

39:53.960 --> 39:55.560
我们可以通过这个属像

39:55.560 --> 39:58.360
获取某一个节点的复节点

39:58.360 --> 39:59.560
通常就是一个元素

39:59.560 --> 40:01.160
就是个元素

40:01.160 --> 40:01.460
好吧

40:01.460 --> 40:02.760
这是关于这个

40:02.760 --> 40:04.760
下一个

40:05.060 --> 40:08.060
previous

40:08.060 --> 40:09.460
previous

40:09.460 --> 40:10.260
之前的

40:10.260 --> 40:11.660
单词是之前的

40:11.660 --> 40:13.360
我因为口语真的是差

40:13.360 --> 40:14.660
真的是差

40:14.660 --> 40:15.560
就看还行

40:15.560 --> 40:17.160
就是口语读写真的是差

40:17.160 --> 40:19.260
previous sublinks

40:19.260 --> 40:20.460
成功的口语很好

40:20.460 --> 40:21.060
非常非常好

40:21.060 --> 40:22.460
非常标准

40:22.460 --> 40:23.160
咱们看一下

40:23.160 --> 40:24.560
这个获取某一个节点

40:24.560 --> 40:26.860
之前的那个兄弟节点

40:26.860 --> 40:27.860
sublinks什么意思

40:27.860 --> 40:28.760
表示兄弟姐妹

40:28.760 --> 40:29.060
对吧

40:29.060 --> 40:30.460
兄弟姐妹的意思

40:30.460 --> 40:32.260
指的是兄弟节点

40:32.260 --> 40:34.260
之前的兄弟

40:34.360 --> 40:36.360
咱们来看一下

40:36.360 --> 40:38.360
还是个A元素

40:38.360 --> 40:39.060
这个A元素

40:39.060 --> 40:41.560
它有没有之前的兄弟呢

40:41.560 --> 40:42.460
我写错了

40:42.460 --> 40:43.360
不是个

40:43.360 --> 40:44.460
这个一货再说

40:44.460 --> 40:45.360
sublinks

40:45.360 --> 40:47.160
有没有之前的兄弟呢

40:47.160 --> 40:48.160
是没有

40:48.160 --> 40:50.160
你看一下这个元素结构

40:50.160 --> 40:51.660
元素结构里边

40:51.660 --> 40:52.760
A元素之前

40:52.760 --> 40:54.660
还有没有兄弟

40:54.660 --> 40:55.360
不是复原素

40:55.360 --> 40:55.960
是兄弟

40:55.960 --> 40:56.860
有没有没有了

40:56.860 --> 40:57.360
对吧

40:57.360 --> 40:59.160
前面没有任何东西了

40:59.160 --> 40:59.360
好

40:59.360 --> 41:00.160
但是

41:00.160 --> 41:00.760
大家看一下

41:00.760 --> 41:01.960
我这里回车

41:01.960 --> 41:03.460
给两个空行

41:03.460 --> 41:04.160
给两个空行

41:04.160 --> 41:06.360
你看一下现在

41:06.360 --> 41:07.360
A元素

41:07.360 --> 41:10.460
previous sublinks

41:10.460 --> 41:11.760
所以有了

41:11.760 --> 41:12.560
这是啥

41:12.560 --> 41:14.460
这是text文本节点

41:14.460 --> 41:14.960
看没有

41:14.960 --> 41:16.460
这是文本节点

41:16.460 --> 41:17.460
没问题吧

41:17.460 --> 41:18.460
这是文本节点

41:18.460 --> 41:19.360
文本节点是啥

41:19.360 --> 41:20.160
这个内容是啥

41:20.160 --> 41:20.960
这个内容是空的

41:20.960 --> 41:22.260
就几个换行服

41:22.260 --> 41:24.760
换行服也是文本

41:24.760 --> 41:26.560
换行服也是文本

41:26.560 --> 41:27.660
尽管它在页面上

41:27.660 --> 41:29.560
显示出来的时候

41:29.560 --> 41:30.960
变成了一个空白折叠

41:30.960 --> 41:31.560
对吧

41:31.560 --> 41:32.660
变成了一个空格

41:32.660 --> 41:34.260
但是它还是文本

41:34.260 --> 41:35.960
还是文本

41:35.960 --> 41:36.560
你看这里是吧

41:36.560 --> 41:37.860
这里都还没有空白折叠

41:37.860 --> 41:39.960
空白折叠是发生在航河内部

41:39.960 --> 41:41.060
和航河之间的

41:41.060 --> 41:41.460
对吧

41:41.460 --> 41:43.760
这个地方还没有空白折叠

41:43.760 --> 41:44.560
你看这里是吧

41:44.560 --> 41:44.760
所以说

41:44.760 --> 41:47.360
但是我们在对翼向上面

41:47.360 --> 41:48.760
这个动物对翼向树里边

41:48.760 --> 41:50.360
它是要把它记录下来的

41:50.360 --> 41:51.560
它仍然是一个节点

41:51.560 --> 41:52.360
那比方说

41:52.360 --> 41:53.660
它这里

41:53.660 --> 41:55.160
这里

41:55.160 --> 41:56.760
注释

41:56.760 --> 41:58.460
那么我们来看一下

41:58.460 --> 42:00.560
它之前的节点是啥

42:00.560 --> 42:01.760
这个A元素之前的节点是啥

42:01.760 --> 42:03.660
咱们再来看一下

42:03.660 --> 42:05.360
这个地方平时我们用不到

42:05.360 --> 42:07.660
但是可能会出面是题

42:07.660 --> 42:09.160
要把这个地方理解清楚

42:09.160 --> 42:11.060
Perviel Sablin是啥呢

42:11.060 --> 42:12.160
它还不是注释

42:12.160 --> 42:13.560
它还是文本节点

42:13.560 --> 42:14.160
因为我们知道

42:14.160 --> 42:15.260
节点是有不同类型的

42:15.260 --> 42:15.860
对吧

42:15.860 --> 42:17.360
节点是有不同类型的

42:17.360 --> 42:18.960
它还是一个文本节点

42:18.960 --> 42:19.760
看没

42:19.760 --> 42:20.260
为什么呢

42:20.260 --> 42:20.760
你看

42:20.760 --> 42:23.360
这个注释到这个元素之间

42:23.360 --> 42:24.560
是不是还是有文本

42:24.560 --> 42:24.960
对吧

42:24.960 --> 42:25.660
还是有文本

42:25.660 --> 42:26.560
所以说它这一块

42:26.560 --> 42:28.460
还是一个文本节点

42:28.460 --> 42:29.460
你看这意思吧

42:29.460 --> 42:30.460
那么比方说

42:30.460 --> 42:33.060
我这里写上这么一个东西

42:33.060 --> 42:33.860
大家看一下

42:33.860 --> 42:35.060
写上这么一个东西

42:35.060 --> 42:37.260
我们再来

42:37.260 --> 42:38.260
你看

42:38.260 --> 42:39.660
那么它就把这个文本节点打印出来了

42:39.660 --> 42:41.260
它还是一个文本节点

42:41.260 --> 42:43.160
这一块还是一个文本节点

42:43.160 --> 42:44.260
那么整个这一块

42:44.260 --> 42:45.760
你看从这到这

42:45.760 --> 42:48.260
都是属于一个文本节点

42:48.260 --> 42:49.760
你看这意思吧

42:49.760 --> 42:50.260
好

42:50.260 --> 42:51.360
都是这一块

42:51.360 --> 42:52.860
那如果我们这样子

42:52.860 --> 42:54.660
这样子来处理

42:54.660 --> 42:58.360
Adder Previous Sablin

42:58.360 --> 42:58.960
然后

42:58.960 --> 43:00.060
它是不是个节点

43:00.060 --> 43:01.460
文本节点它也是节点

43:01.460 --> 43:02.460
为什么不是节点

43:02.460 --> 43:03.460
它一定是节点

43:03.460 --> 43:03.660
好

43:03.660 --> 43:04.460
节点

43:04.460 --> 43:05.660
然后我们再节点

43:05.660 --> 43:07.260
它肯定还有这个属性

43:07.260 --> 43:07.960
我们再来看

43:07.960 --> 43:08.860
它之前的节点

43:08.860 --> 43:10.660
你看是不是变成了注释了

43:10.660 --> 43:12.460
注释节点了

43:12.460 --> 43:14.560
元素之前的文本节点是在这

43:14.560 --> 43:15.660
然后这个节点

43:15.660 --> 43:16.760
之前的节点是在这

43:16.760 --> 43:17.860
是不是注释节点

43:17.860 --> 43:17.960
好

43:17.960 --> 43:20.560
注释之前的节点是啥

43:20.560 --> 43:21.560
注释节点之前是啥

43:21.560 --> 43:23.260
是不是还是文本节点

43:23.260 --> 43:24.160
没问题吧

43:24.160 --> 43:25.260
能理解吗

43:25.260 --> 43:26.460
应该是很简单

43:26.460 --> 43:27.860
Previous Sablin

43:27.860 --> 43:29.360
是不是还是文本节点

43:29.360 --> 43:30.960
对吧 没问题吧

43:30.960 --> 43:32.960
然后在之前的是不是没了

43:32.960 --> 43:34.260
在之前就没有兄弟了

43:34.260 --> 43:35.560
我就是脑大了

43:35.560 --> 43:37.860
Previous Sablin

43:37.860 --> 43:39.160
是不是没了

43:39.160 --> 43:40.460
没问题吧

43:40.460 --> 43:41.760
应该没问题

43:41.760 --> 43:43.060
这就是文本节点

43:43.060 --> 43:43.760
那同样的道理

43:43.760 --> 43:45.960
大家如果你获取到Li

43:45.960 --> 43:47.360
比方说我们这样子

43:47.360 --> 43:49.860
Adder Parents Load

43:49.860 --> 43:51.360
它的复节点

43:51.360 --> 43:53.560
复节点的上一个节点是啥

43:53.560 --> 43:54.260
我现在不打完

43:54.260 --> 43:56.260
打完就出来了

43:56.260 --> 43:59.260
复节点Li的上一个节点是啥

43:59.260 --> 44:00.160
就这个Li

44:00.160 --> 44:03.560
这个Li的上一个就是Previous Sablin

44:03.560 --> 44:04.660
是啥

44:04.660 --> 44:05.560
是啥呢

44:05.560 --> 44:06.860
是不是还是文本节点

44:06.860 --> 44:08.260
你看文本节点

44:08.260 --> 44:09.460
除非它没有这个东西

44:09.460 --> 44:09.960
没有这个东西

44:09.960 --> 44:11.160
上一个就是Li了

44:11.160 --> 44:12.160
咱们来看一下

44:12.160 --> 44:15.160
Previous Sablin

44:15.160 --> 44:16.660
是不是还是文本节点

44:16.660 --> 44:17.860
那如果我把这个区了

44:17.860 --> 44:19.360
这个空白区了

44:19.360 --> 44:21.360
保存再看

44:21.360 --> 44:23.060
它就变成了Li了

44:23.060 --> 44:24.560
你看这个意思吧

44:24.560 --> 44:26.160
这文本节点也要算在内的

44:26.160 --> 44:27.460
不能说不算的

44:27.460 --> 44:28.460
也要算在内的

44:28.560 --> 44:31.660
比方说 18 m

44:32.860 --> 44:34.260
这排听我说一下

44:34.260 --> 44:35.260
这个At childhood

44:35.260 --> 44:36.380
你要獲取根远远远远远远远远远远远远远远远远远远远

44:36.380 --> 44:37.660
你可以用这种方式

44:37.660 --> 44:38.860
用这种方式来获取

44:38.860 --> 44:40.260
我们这里说一下

44:40.260 --> 44:47.460
获取根远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远远

44:47.460 --> 44:50.160
它是Dom1里面的东西

44:50.160 --> 44:51.460
dom1的时候就出来了

44:51.460 --> 44:53.460
第一代标准的时候就出来了

44:53.460 --> 44:54.860
它是获取

44:54.860 --> 44:59.860
就是更远处

44:59.860 --> 45:01.860
当然是单个

45:01.860 --> 45:02.660
获取更远处

45:02.660 --> 45:04.860
就是获取atm远处

45:04.860 --> 45:05.860
咱们来看一下

45:05.860 --> 45:08.860
看一下这里保存一下

45:08.860 --> 45:09.760
看一下

45:09.760 --> 45:13.060
咱们可以用document element

45:13.060 --> 45:14.860
来获取这个atm远处

45:14.860 --> 45:15.860
atm远处

45:15.860 --> 45:18.360
获取它了之后咱们来怎么样

45:18.360 --> 45:21.860
得到它的之前的节点

45:21.860 --> 45:25.860
Priorius Sablin

45:25.860 --> 45:26.860
是啥呢

45:26.860 --> 45:28.860
它之前的节点是啥呢

45:28.860 --> 45:29.860
是不是这个玩意

45:29.860 --> 45:31.860
这个玩意是啥

45:31.860 --> 45:34.860
这个玩意是不是文档说明节点

45:34.860 --> 45:36.860
文档说明节点

45:36.860 --> 45:37.860
没问题吧

45:37.860 --> 45:39.860
这是文档说明节点

45:39.860 --> 45:41.860
Priorius Sablin

45:41.860 --> 45:42.860
好

45:42.860 --> 45:44.860
然后我们再看

45:44.860 --> 45:46.860
下一个

45:46.860 --> 45:48.860
下一个是next Sablin

45:48.860 --> 45:51.860
就是下一个兄弟节点

45:51.860 --> 45:52.860
是不是一样的

45:52.860 --> 45:53.860
没啥好说的吧

45:53.860 --> 45:54.860
不说了吧

45:54.860 --> 45:57.860
next Sablin是下一个兄弟节点

45:57.860 --> 45:59.860
然后再看这个

45:59.860 --> 46:01.860
node下边有什么呢

46:01.860 --> 46:03.860
node下边它这里没有记录

46:03.860 --> 46:04.860
没有记录

46:04.860 --> 46:06.860
我们这里写一下

46:06.860 --> 46:08.860
node下边还有

46:08.860 --> 46:10.860
the parent 还有就是Priorius

46:10.860 --> 46:15.860
Priorius Sablin

46:15.860 --> 46:17.860
这是上一个

46:17.860 --> 46:21.860
获取上一个兄弟节点

46:21.860 --> 46:24.860
还有next Sablin

46:26.860 --> 46:30.860
这是获取下一个兄弟节点

46:30.860 --> 46:32.860
还有什么呢

46:32.860 --> 46:35.860
child nodes

46:35.860 --> 46:36.860
它是个复数

46:36.860 --> 46:38.860
它获取的是一个内数组

46:38.860 --> 46:41.860
获取

46:41.860 --> 46:42.860
指节点

46:42.860 --> 46:44.860
所有的指节点

46:44.860 --> 46:46.860
注意是指节点

46:46.860 --> 46:47.860
就例子

46:47.860 --> 46:49.860
比方说还是个页面

46:49.860 --> 46:51.860
这个页面我们来获取这个div

46:51.860 --> 46:53.860
获取这个ul

46:53.860 --> 46:55.860
看一下这个ul的指节点是什么

46:55.860 --> 46:57.860
得到这个ul

46:57.860 --> 47:00.860
ul documents query selector

47:00.860 --> 47:02.860
ul得到它

47:02.860 --> 47:03.860
然后得到它的指节点

47:03.860 --> 47:06.860
child nodes

47:06.860 --> 47:07.860
看一下

47:07.860 --> 47:08.860
是不是这么多

47:08.860 --> 47:09.860
本来只有10个li

47:09.860 --> 47:10.860
为什么多了这么多

47:10.860 --> 47:11.860
是不是多了一些文本节点

47:11.860 --> 47:12.860
对吧

47:12.860 --> 47:13.860
它的指节点里边

47:13.860 --> 47:15.860
多了一些文本节点

47:15.860 --> 47:17.860
这是child nodes

47:17.860 --> 47:18.860
好吧

47:18.860 --> 47:20.860
然后还有什么呢

47:20.860 --> 47:22.860
其实这些用的都比较少

47:22.860 --> 47:23.860
说实话用的比较少

47:23.860 --> 47:24.860
就一个用的比较多

47:24.860 --> 47:25.860
parent node

47:25.860 --> 47:26.860
用的比较多

47:26.860 --> 47:27.860
我把用的比较多的

47:27.860 --> 47:28.860
把它加出

47:28.860 --> 47:30.860
其他都用的比较少

47:30.860 --> 47:32.860
还有first child

47:32.860 --> 47:34.860
获取第一个指节点

47:34.860 --> 47:36.860
当然没有的话就是空

47:36.860 --> 47:37.860
last child

47:37.860 --> 47:41.860
这是获取最后一个指节点

47:41.860 --> 47:44.860
保存看一下

47:44.860 --> 47:48.860
这里使用ul

47:48.860 --> 47:49.860
没有得到ul

47:49.860 --> 47:52.860
我们这里先把ul得到吧

47:52.860 --> 47:56.860
ul documents query selector

47:56.860 --> 47:59.860
ul得到list

47:59.860 --> 48:02.860
得到这个ul

48:02.860 --> 48:03.860
咱们在这里使用

48:03.860 --> 48:05.860
first child

48:05.860 --> 48:06.860
你看是不是文本

48:06.860 --> 48:07.860
对吧

48:07.860 --> 48:08.860
它一开始就有一个文本节点

48:08.860 --> 48:10.860
在这儿

48:10.860 --> 48:12.860
在这儿

48:12.860 --> 48:13.860
一开始有个文本节点

48:13.860 --> 48:18.860
然后last child

48:18.860 --> 48:19.860
你看

48:19.860 --> 48:20.860
是不是还是文本节点

48:20.860 --> 48:21.860
最后还是文本节点

48:21.860 --> 48:23.860
看没

48:23.860 --> 48:24.860
好

48:24.860 --> 48:26.860
那比方说我得到li

48:26.860 --> 48:28.860
得到a元数

48:28.860 --> 48:29.860
第二个a元数

48:29.860 --> 48:30.860
你看在这儿

48:30.860 --> 48:31.860
第二个a元数

48:31.860 --> 48:33.860
a元数里边

48:33.860 --> 48:34.860
比方说问你

48:34.860 --> 48:35.860
我这样子写

48:35.860 --> 48:36.860
我就瞎写

48:36.860 --> 48:38.860
看一下你能不能告诉我答案

48:38.860 --> 48:39.860
这个第二个a元数

48:39.860 --> 48:40.860
你看

48:40.860 --> 48:41.860
页面上是第二个a元数

48:41.860 --> 48:43.860
a元数的pair

48:43.860 --> 48:44.860
ring to load

48:44.860 --> 48:45.860
的

48:45.860 --> 48:46.860
什么呢

48:46.860 --> 48:49.860
the previous sublin

48:49.860 --> 48:51.860
the previous sublin

48:51.860 --> 48:52.860
第二

48:52.860 --> 48:54.860
first

48:54.860 --> 48:55.860
我不写了

48:55.860 --> 48:56.860
我后面要写啥

48:56.860 --> 48:58.860
我后面要写first child

48:58.860 --> 48:59.860
算了

48:59.860 --> 49:00.860
它都出来了

49:00.860 --> 49:01.860
对吧

49:01.860 --> 49:02.860
它都出来了

49:02.860 --> 49:03.860
我解释一下吧

49:03.860 --> 49:04.860
我不知道怎么来设置

49:04.860 --> 49:05.860
让它不要出来

49:05.860 --> 49:07.860
让它不要出来

49:07.860 --> 49:09.860
一个

49:09.860 --> 49:10.860
是不是这个玩意

49:10.860 --> 49:11.860
看一下

49:11.860 --> 49:12.860
是不是这个玩意

49:12.860 --> 49:13.860
对

49:13.860 --> 49:14.860
现在它不出来了

49:14.860 --> 49:15.860
这样就好了

49:15.860 --> 49:16.860
那么

49:16.860 --> 49:18.860
你都知道了

49:18.860 --> 49:19.860
得到的什么呢

49:19.860 --> 49:21.860
得到的就是a元数

49:21.860 --> 49:23.860
得到的是a元数

49:23.860 --> 49:24.860
怎么得到了

49:24.860 --> 49:25.860
看一下

49:25.860 --> 49:26.860
我是从a元数出发

49:26.860 --> 49:28.860
找到a元数的

49:28.860 --> 49:29.860
复结点

49:29.860 --> 49:30.860
是不是li

49:30.860 --> 49:31.860
看一下

49:31.860 --> 49:33.860
找到a元数的复结点

49:33.860 --> 49:35.860
复结点是不是li

49:35.860 --> 49:37.860
li的之前的结点

49:37.860 --> 49:38.860
是不是文本

49:38.860 --> 49:39.860
对吧

49:39.860 --> 49:40.860
之前那个结点

49:40.860 --> 49:41.860
还没有

49:41.860 --> 49:42.860
之前那个结点是不是文本

49:42.860 --> 49:43.860
好

49:43.860 --> 49:44.860
文本之前那个结点

49:44.860 --> 49:45.860
是啥

49:45.860 --> 49:46.860
是不是这个li

49:46.860 --> 49:47.860
对不对

49:47.860 --> 49:48.860
这个li

49:48.860 --> 49:49.860
然后呢

49:49.860 --> 49:51.860
然后找到这个li的first child

49:51.860 --> 49:52.860
它第一个指结点

49:52.860 --> 49:53.860
是不是这个a元数

49:53.860 --> 49:54.860
对吧

49:54.860 --> 49:55.860
a元数嘛

49:55.860 --> 49:56.860
就拿到了

49:56.860 --> 49:57.860
好

49:57.860 --> 49:58.860
这是这一块

49:58.860 --> 50:00.860
就是根据结点关系

50:00.860 --> 50:01.860
来获取结点

50:01.860 --> 50:02.860
但是注意

50:02.860 --> 50:03.860
这一些东西

50:03.860 --> 50:04.860
获取的都是结点

50:04.860 --> 50:05.860
除了第一个

50:05.860 --> 50:06.860
第一个复结点

50:06.860 --> 50:07.860
它只能是元数

50:07.860 --> 50:08.860
它不能是啥的

50:08.860 --> 50:09.860
它不能是啥的

50:09.860 --> 50:10.860
对吧

50:10.860 --> 50:11.860
只能是元数

50:11.860 --> 50:12.860
除了第一个之外

50:12.860 --> 50:13.860
当然

50:13.860 --> 50:14.860
其中一个结点不要特殊

50:14.860 --> 50:15.860
就是document

50:15.860 --> 50:17.860
document它不是元数结点

50:17.860 --> 50:18.860
它叫做文档结点

50:18.860 --> 50:19.860
除了这个玩意之外

50:19.860 --> 50:21.860
其他都是元数结点

50:21.860 --> 50:22.860
但是其他的获取

50:22.860 --> 50:24.860
都是根据结点来获取

50:24.860 --> 50:25.860
这就会造成一些麻烦

50:25.860 --> 50:26.860
很多时候

50:26.860 --> 50:27.860
我获取结点干嘛

50:27.860 --> 50:28.860
你说我获取一个

50:28.860 --> 50:29.860
蛛式结点干嘛

50:29.860 --> 50:30.860
你说我获取一个

50:30.860 --> 50:31.860
文本结点干嘛

50:31.860 --> 50:32.860
一些全是回车

50:32.860 --> 50:33.860
获取它干嘛

50:34.860 --> 50:35.860
有的时候你会导致

50:35.860 --> 50:36.860
你用这种方式

50:36.860 --> 50:37.860
比方说

50:37.860 --> 50:38.860
我要获取这个A元数

50:38.860 --> 50:39.860
它上一个li的

50:39.860 --> 50:40.860
里边的A元数

50:40.860 --> 50:41.860
那我获取的时候

50:41.860 --> 50:42.860
你看我这样子写

50:42.860 --> 50:43.860
这样子写

50:43.860 --> 50:44.860
好像是没啥问题

50:44.860 --> 50:45.860
对吧

50:45.860 --> 50:46.860
我把它复制一下

50:46.860 --> 50:47.860
好像是没啥问题

50:47.860 --> 50:48.860
那将来比方说

50:48.860 --> 50:50.860
代码稍微动一下

50:50.860 --> 50:51.860
动一下空格

50:51.860 --> 50:53.860
把这个换行去掉

50:53.860 --> 50:54.860
有时候说

50:54.860 --> 50:55.860
我不去掉

50:55.860 --> 50:56.860
不就完了吗

50:56.860 --> 50:57.860
那以后呢

50:57.860 --> 50:58.860
我们可能有一些压缩工具

50:58.860 --> 51:00.860
把整个网页压缩成一行

51:00.860 --> 51:01.860
它会把这些元数之间的

51:01.860 --> 51:03.860
换行全部去掉

51:03.860 --> 51:04.860
那这个时候

51:04.860 --> 51:05.860
是不是马上就来了

51:05.860 --> 51:06.860
再马还能用吗

51:07.860 --> 51:08.860
就是你写的时候

51:08.860 --> 51:09.860
好像没啥问题

51:09.860 --> 51:10.860
这里是不是不能用了

51:10.860 --> 51:11.860
对吧

51:11.860 --> 51:12.860
不能用了

51:12.860 --> 51:13.860
所以说

51:13.860 --> 51:14.860
它会造成一些问题

51:14.860 --> 51:16.860
连这种改动都不行

51:17.860 --> 51:19.860
说明我这个程序

51:19.860 --> 51:21.860
不够坚壮

51:21.860 --> 51:22.860
坚壮性不够

51:22.860 --> 51:24.860
它不够稳定

51:24.860 --> 51:26.860
稍微变动一点点

51:26.860 --> 51:27.860
一些无关紧要的东西

51:27.860 --> 51:28.860
一些空格

51:28.860 --> 51:29.860
回车一变

51:29.860 --> 51:30.860
你都不行了

51:30.860 --> 51:31.860
不能用了

51:31.860 --> 51:32.860
所以说

51:32.860 --> 51:33.860
它会导致这个问题

51:33.860 --> 51:34.860
因此

51:34.860 --> 51:35.860
是不太会使用的

51:35.860 --> 51:37.860
不太会使用的

51:37.860 --> 51:38.860
于是呢

51:38.860 --> 51:39.860
我也把API里边

51:39.860 --> 51:41.860
又给我们提供了一组东西

51:41.860 --> 51:43.860
方便我们来获取

51:43.860 --> 51:45.860
跟元数相关的节点

51:46.860 --> 51:49.860
获取元数节点

51:49.860 --> 51:51.860
它只获取跟元数相关的节点

51:51.860 --> 51:52.860
一个个说吧

51:52.860 --> 51:53.860
好

51:53.860 --> 51:54.860
首先是

51:54.860 --> 51:56.860
Previous

51:56.860 --> 51:58.860
Previous

51:58.860 --> 51:59.860
Element

51:59.860 --> 52:00.860
Subly

52:00.860 --> 52:02.860
加上Element

52:02.860 --> 52:04.860
获取上一个

52:04.860 --> 52:06.860
兄弟元数

52:06.860 --> 52:08.860
获取的是元数节点

52:08.860 --> 52:09.860
好

52:09.860 --> 52:10.860
同样的

52:10.860 --> 52:11.860
它加了一个

52:11.860 --> 52:12.860
Next

52:12.860 --> 52:13.860
Element

52:13.860 --> 52:14.860
Subly

52:14.860 --> 52:16.860
获取下一个

52:16.860 --> 52:19.860
下一个兄弟元数

52:19.860 --> 52:21.860
还有

52:21.860 --> 52:23.860
我们就按照顺序写吧

52:23.860 --> 52:24.860
就按照顺序写

52:24.860 --> 52:26.860
Parent

52:26.860 --> 52:27.860
Element

52:27.860 --> 52:29.860
Element

52:29.860 --> 52:30.860
Parent

52:30.860 --> 52:31.860
Element

52:31.860 --> 52:33.860
获取副节点

52:33.860 --> 52:35.860
获取副元数

52:35.860 --> 52:37.860
因为上面这个

52:37.860 --> 52:38.860
它不一定是元数

52:38.860 --> 52:39.860
它绝大部分情况下都是元数

52:39.860 --> 52:41.860
还有一种情况下

52:41.860 --> 52:42.860
不是元数

52:42.860 --> 52:43.860
副元数

52:43.860 --> 52:44.860
副节点

52:44.860 --> 52:46.860
它有可能是元数

52:46.860 --> 52:47.860
有可能是什么

52:47.860 --> 52:48.860
文档

52:48.860 --> 52:49.860
文档节点

52:49.860 --> 52:50.860
因为Document

52:50.860 --> 52:51.860
那么这个东西

52:51.860 --> 52:53.860
只能获取元数节点

52:53.860 --> 52:55.860
只能获取元数节点

52:55.860 --> 52:56.860
Parent

52:56.860 --> 52:57.860
Element

52:57.860 --> 52:59.860
Previous

53:00.860 --> 53:01.860
这是获取

53:01.860 --> 53:02.860
指元数

53:02.860 --> 53:03.860
它只获取元数

53:03.860 --> 53:05.860
然后First

53:05.860 --> 53:07.860
Element

53:07.860 --> 53:08.860
Child

53:08.860 --> 53:10.860
获取

53:10.860 --> 53:11.860
第一个指元数

53:11.860 --> 53:12.860
这些东西

53:12.860 --> 53:13.860
才是我们比较常用的

53:13.860 --> 53:15.860
因为我们只关心元数

53:15.860 --> 53:17.860
我要其他东西干嘛呢

53:17.860 --> 53:19.860
获取最后一个指元数

53:20.860 --> 53:21.860
保存

53:21.860 --> 53:22.860
看一下

53:23.860 --> 53:25.860
比方说咱们还是个UL吧

53:25.860 --> 53:26.860
你看Parent

53:26.860 --> 53:27.860
Element

53:27.860 --> 53:28.860
是DIV

53:28.860 --> 53:29.860
对吧

53:29.860 --> 53:30.860
我们还是把这个打开吧

53:30.860 --> 53:31.860
打开方便一点

53:31.860 --> 53:32.860
就可以直接写了

53:32.860 --> 53:33.860
ParentElement

53:33.860 --> 53:34.860
你看是DIV

53:34.860 --> 53:35.860
对吧

53:35.860 --> 53:37.860
然后再来ParentElement

53:37.860 --> 53:39.860
BodyParentElement

53:39.860 --> 53:41.860
AntimalParentElement

53:41.860 --> 53:42.860
你看

53:42.860 --> 53:43.860
不再是文档节点了

53:43.860 --> 53:44.860
是什么

53:44.860 --> 53:45.860
Low

53:45.860 --> 53:47.860
它就没有什么文档节点在这

53:47.860 --> 53:48.860
明白这个意思吧

53:48.860 --> 53:49.860
好 再来

53:49.860 --> 53:51.860
ULChillGun

53:51.860 --> 53:53.860
ChillGun

53:53.860 --> 53:54.860
你看指节点

53:54.860 --> 53:56.860
它得到的全是元数节点

53:56.860 --> 53:57.860
看到没

53:57.860 --> 53:59.860
得到的全是元数节点

53:59.860 --> 54:00.860
然后

54:00.860 --> 54:02.860
FirstElementChill

54:02.860 --> 54:03.860
但是我再说一下

54:03.860 --> 54:05.860
FirstElementChill

54:05.860 --> 54:07.860
它是有兼容性问题

54:07.860 --> 54:09.860
像这两个都有兼容性问题

54:09.860 --> 54:10.860
这两个

54:10.860 --> 54:11.860
这两个

54:11.860 --> 54:13.860
就这些都有兼容性问题

54:13.860 --> 54:15.860
它是A9一下不能识别

54:15.860 --> 54:16.860
所以说这一块

54:16.860 --> 54:17.860
让大家注意一下

54:18.860 --> 54:19.860
其实也没啥注意的了

54:19.860 --> 54:21.860
我们后边有框架

54:21.860 --> 54:23.860
有库可以帮我们解决这个问题

54:24.860 --> 54:25.860
接下来让我们来看一下

54:25.860 --> 54:28.860
拿到这个节点之后

54:28.860 --> 54:31.860
我们可以得到节点里边哪些东西

54:31.860 --> 54:33.860
那么这里我们说的是通用的

54:33.860 --> 54:35.860
就是对任何一个节点而言

54:35.860 --> 54:37.860
都可以使用的

54:37.860 --> 54:40.860
如果光是针对元数的话

54:40.860 --> 54:42.860
那么有更多的操作方式

54:42.860 --> 54:43.860
但是

54:43.860 --> 54:46.860
如果说针对通用的节点的话

54:46.860 --> 54:47.860
没有那么多

54:47.860 --> 54:48.860
所以我现在就这一块

54:48.860 --> 54:49.860
就直接把它说了

54:49.860 --> 54:52.860
就节点获取

54:52.860 --> 54:54.860
节点信息

54:54.860 --> 54:56.860
就可以是任何节点

54:56.860 --> 54:57.860
任何节点都可以

54:58.860 --> 55:00.860
那么这里面它提供了一些属性

55:00.860 --> 55:02.860
一个是load

55:02.860 --> 55:04.860
load name

55:04.860 --> 55:07.860
表示获取节点名称

55:07.860 --> 55:08.860
获取节点名称

55:08.860 --> 55:09.860
比方说看一下

55:09.860 --> 55:11.860
这个document是不是个节点

55:11.860 --> 55:12.860
肯定是节点吗

55:12.860 --> 55:13.860
load name

55:13.860 --> 55:14.860
你看看

55:15.860 --> 55:16.860
你看

55:16.860 --> 55:17.860
这就它的节点名称

55:17.860 --> 55:18.860
它的名称是一个字母串

55:18.860 --> 55:19.860
一个警号

55:19.860 --> 55:20.860
一个document

55:20.860 --> 55:22.860
表示这是一个文档节点

55:22.860 --> 55:23.860
了解一下就行了

55:23.860 --> 55:25.860
这个节点名称我们也不太会用的

55:25.860 --> 55:26.860
再比方说

55:26.860 --> 55:28.860
这个document

55:28.860 --> 55:31.860
然后document

55:31.860 --> 55:32.860
跟节点

55:32.860 --> 55:33.860
元数节点

55:33.860 --> 55:35.860
它的节点名称load name

55:35.860 --> 55:37.860
大家注意到没

55:37.860 --> 55:38.860
元数节点

55:38.860 --> 55:40.860
它的节点名称

55:40.860 --> 55:42.860
全部是大写的

55:42.860 --> 55:43.860
就是这个元数

55:43.860 --> 55:44.860
在我们的GS里边

55:44.860 --> 55:46.860
它得到了名称全部大写

55:46.860 --> 55:47.860
全部是大写的

55:47.860 --> 55:50.860
这就是为什么我上节课的时候

55:50.860 --> 55:51.860
上节课用了多母数里边

55:51.860 --> 55:53.860
你看元数全是用的大写名称

55:53.860 --> 55:54.860
看没

55:54.860 --> 55:55.860
好吧

55:55.860 --> 55:56.860
这是关于这个

55:56.860 --> 55:57.860
再看

55:57.860 --> 55:58.860
再随便看一下吧

55:58.860 --> 55:59.860
然后

55:59.860 --> 56:00.860
首先是document

56:00.860 --> 56:02.860
它的first child

56:02.860 --> 56:03.860
first child

56:03.860 --> 56:04.860
是不是这个

56:04.860 --> 56:05.860
什么节点

56:05.860 --> 56:07.860
是不是文档说明节点

56:07.860 --> 56:08.860
对吧

56:08.860 --> 56:09.860
在哪

56:09.860 --> 56:11.860
就这个节点

56:11.860 --> 56:12.860
这个节点

56:12.860 --> 56:13.860
它的节点名称是啥呢

56:13.860 --> 56:15.860
它的节点名称叫做atm

56:15.860 --> 56:17.860
看上去好像是元数

56:17.860 --> 56:18.860
不是元数

56:18.860 --> 56:19.860
它是小写的

56:19.860 --> 56:21.860
这个小写的atm表示的是

56:21.860 --> 56:22.860
这个地方是一个

56:22.860 --> 56:24.860
文档类型节点

56:24.860 --> 56:25.860
这个文档类型

56:25.860 --> 56:27.860
它是atm的类型

56:27.860 --> 56:28.860
就是我们这个文档

56:28.860 --> 56:29.860
是atm的文档

56:29.860 --> 56:30.860
是这么个意思

56:30.860 --> 56:32.860
这么个意思

56:32.860 --> 56:33.860
好

56:33.860 --> 56:34.860
就这里我随便说一下吧

56:34.860 --> 56:35.860
就是如果你听过我的

56:35.860 --> 56:36.860
atm事业赛事课程的话

56:36.860 --> 56:37.860
应该知道

56:37.860 --> 56:38.860
我说以前

56:38.860 --> 56:40.860
咱们

56:40.860 --> 56:42.860
atm5这个标准出来之前

56:42.860 --> 56:43.860
我们使用的是标准

56:43.860 --> 56:44.860
是atm

56:44.860 --> 56:46.860
使用的是这个标准

56:46.860 --> 56:47.860
这个标准

56:47.860 --> 56:48.860
这个标准它是

56:48.860 --> 56:50.860
严格遵循

56:52.860 --> 56:54.860
严格遵循的是

56:54.860 --> 56:56.860
差妙的标准

56:56.860 --> 56:58.860
它是差妙的一个指级

56:58.860 --> 57:00.860
它在差妙的标准基础上

57:00.860 --> 57:01.860
扩展了自己的一些标准

57:01.860 --> 57:03.860
它是遵循这个标准的

57:03.860 --> 57:04.860
到了atm5之后

57:04.860 --> 57:05.860
它就抛弃了

57:05.860 --> 57:07.860
抛弃了这个差妙标准了

57:07.860 --> 57:08.860
没有严格遵循

57:08.860 --> 57:09.860
差妙的标准了

57:09.860 --> 57:10.860
有些像

57:10.860 --> 57:11.860
但是没有严格遵循了

57:11.860 --> 57:13.860
以前的时候

57:13.860 --> 57:14.860
它的文档声明

57:14.860 --> 57:15.860
不是这样子写的

57:15.860 --> 57:16.860
它不是这样子写的

57:16.860 --> 57:17.860
它是用别的写法

57:17.860 --> 57:19.860
我们看一下还能不能找到一些网站

57:19.860 --> 57:21.860
能不能找到一些网站

57:21.860 --> 57:22.860
看一下有没有

57:22.860 --> 57:23.860
看新浪

57:23.860 --> 57:24.860
新浪的网站比较古老一点

57:24.860 --> 57:27.860
看它的网站的就是

57:27.860 --> 57:28.860
第一个文档声明

57:28.860 --> 57:29.860
是不是这个

57:29.860 --> 57:31.860
是不是一种古老的

57:31.860 --> 57:32.860
不是了

57:32.860 --> 57:33.860
现在都变成新的了

57:33.860 --> 57:34.860
全部变成新的了

57:34.860 --> 57:36.860
我看一下这个什么体育

57:36.860 --> 57:37.860
体育这一块

57:37.860 --> 57:38.860
国际体育

57:38.860 --> 57:39.860
这个版面比较旧一点

57:39.860 --> 57:40.860
这是个旧版面的

57:40.860 --> 57:42.860
看一下这一块

57:42.860 --> 57:44.860
这一块它的文档声明

57:44.860 --> 57:45.860
没发了

57:45.860 --> 57:46.860
我不太找得到了

57:46.860 --> 57:47.860
不太找得到了

57:47.860 --> 57:48.860
就是旧的文档声明

57:48.860 --> 57:49.860
这里写了一长串

57:49.860 --> 57:51.860
我背是肯定背不住的

57:51.860 --> 57:53.860
你不要让我背肯定背不住的

57:53.860 --> 57:55.860
本来在VS Code里面

57:55.860 --> 57:57.860
是可以打出来的

57:57.860 --> 57:58.860
在VS Code里面

57:58.860 --> 58:00.860
但是现在更新了之后

58:00.860 --> 58:01.860
它打都打不出来了

58:01.860 --> 58:03.860
旧的写法都用不了了

58:03.860 --> 58:05.860
就已经完全抛弃掉了

58:05.860 --> 58:06.860
就不用管了

58:06.860 --> 58:07.860
就不用管了

58:07.860 --> 58:09.860
这里说一下这个问题

58:09.860 --> 58:10.860
就是说

58:10.860 --> 58:11.860
以前的标准

58:11.860 --> 58:12.860
它的文档声明

58:12.860 --> 58:13.860
它不是这样的声明

58:13.860 --> 58:15.860
所以说到以前

58:15.860 --> 58:16.860
我们得到的这个

58:16.860 --> 58:17.860
它的就是

58:17.860 --> 58:20.860
Document First Child

58:20.860 --> 58:22.860
这个文档声明

58:22.860 --> 58:24.860
文档类型的那个节点

58:24.860 --> 58:25.860
它的name

58:25.860 --> 58:26.860
它还不是ATM

58:26.860 --> 58:27.860
以前不是

58:27.860 --> 58:28.860
现在是

58:28.860 --> 58:29.860
现在能表示的是

58:29.860 --> 58:30.860
我们这个网页

58:30.860 --> 58:32.860
是一个ATM的网页

58:32.860 --> 58:33.860
原来这个意思

58:33.860 --> 58:35.860
但是它不是元素

58:35.860 --> 58:37.860
再来看一下

58:37.860 --> 58:39.860
再看一下这个文本节点

58:39.860 --> 58:41.860
找到这个A元素

58:41.860 --> 58:44.860
A元素的Privilege sublin

58:44.860 --> 58:45.860
找到这个文本节点

58:45.860 --> 58:47.860
看一下它的loading name

58:47.860 --> 58:48.860
看一下什么text

58:48.860 --> 58:49.860
对吧

58:49.860 --> 58:50.860
loading name

58:50.860 --> 58:51.860
还有了

58:51.860 --> 58:53.860
我们这里还没有看到什么

58:53.860 --> 58:54.860
还没有看到一个节点叫做

58:54.860 --> 58:55.860
就是属性节点

58:55.860 --> 58:56.860
对吧

58:56.860 --> 58:57.860
太多了

58:57.860 --> 58:58.860
讲了讲了就讲忘了

58:58.860 --> 58:59.860
太多了

58:59.860 --> 59:00.860
这里还有一个属性节点

59:00.860 --> 59:02.860
叫Iquibuse

59:02.860 --> 59:03.860
Iquibuse

59:03.860 --> 59:05.860
说到这里顺便说一下吧

59:05.860 --> 59:10.860
获取某个元素的属性节点

59:10.860 --> 59:12.860
它是一个内素组

59:12.860 --> 59:13.860
因为它有很多属性

59:13.860 --> 59:15.860
它是一个内素组

59:15.860 --> 59:17.860
比方说咱们看一下

59:17.860 --> 59:18.860
这个A元素吧

59:18.860 --> 59:19.860
就看一下这个A元素

59:19.860 --> 59:20.860
链接地址

59:20.860 --> 59:22.860
链接地址

59:22.860 --> 59:23.860
看一下

59:23.860 --> 59:25.860
然后这里

59:25.860 --> 59:26.860
Title属性

59:26.860 --> 59:27.860
随便写个

59:27.860 --> 59:28.860
随便写个

59:28.860 --> 59:29.860
Title属性

59:29.860 --> 59:30.860
保存看一下

59:30.860 --> 59:32.860
得到这个A元素的Iquibuse

59:32.860 --> 59:34.860
它的所有属性

59:34.860 --> 59:35.860
你看

59:35.860 --> 59:38.860
两个节点

59:38.860 --> 59:41.860
两个属性节点

59:41.860 --> 59:42.860
它是个内素组

59:42.860 --> 59:44.860
一个是Horif属性

59:44.860 --> 59:45.860
一个是Title属性

59:45.860 --> 59:46.860
咱们来看一下

59:46.860 --> 59:47.860
这个内素组里面

59:47.860 --> 59:48.860
是不是可以用锁印

59:48.860 --> 59:49.860
对吧

59:49.860 --> 59:50.860
可以用锁印

59:50.860 --> 59:52.860
Bute0

59:52.860 --> 59:53.860
你看一下

59:53.860 --> 59:54.860
这是不是个节点

59:54.860 --> 59:55.860
属性节点

59:55.860 --> 59:56.860
它的load name

59:56.860 --> 59:57.860
load name

59:57.860 --> 59:58.860
是属性的名称

59:58.860 --> 59:59.860
然后看一下

59:59.860 --> 01:00:01.860
第一个

01:00:01.860 --> 01:00:02.860
属性节点

01:00:02.860 --> 01:00:04.860
就第二个属性

01:00:04.860 --> 01:00:05.860
load name

01:00:05.860 --> 01:00:06.860
表示属性名称

01:00:06.860 --> 01:00:07.860
Title

01:00:07.860 --> 01:00:08.860
以后获取属性

01:00:08.860 --> 01:00:09.860
不是用这种方式

01:00:09.860 --> 01:00:10.860
给大家说一下

01:00:10.860 --> 01:00:11.860
不是用这种方式

01:00:11.860 --> 01:00:12.860
来获取属性的

01:00:12.860 --> 01:00:13.860
大家搞明白

01:00:13.860 --> 01:00:16.860
这是关于属性节点

01:00:16.860 --> 01:00:17.860
这些节点都是一样

01:00:17.860 --> 01:00:18.860
每个节点都有自己的名称

01:00:18.860 --> 01:00:20.860
聊一下就行了

01:00:20.860 --> 01:00:22.860
除了名称之外

01:00:22.860 --> 01:00:23.860
每个节点

01:00:23.860 --> 01:00:24.860
还有自己的值

01:00:24.860 --> 01:00:26.860
load value

01:00:26.860 --> 01:00:28.860
获取节点的值

01:00:28.860 --> 01:00:29.860
这个节点的值

01:00:29.860 --> 01:00:30.860
每个节点又不太一样

01:00:30.860 --> 01:00:31.860
咱们来看一下

01:00:31.860 --> 01:00:32.860
聊一下就行了

01:00:32.860 --> 01:00:34.860
我们不太会用这种方式

01:00:34.860 --> 01:00:36.860
Document

01:00:36.860 --> 01:00:37.860
它的load value

01:00:37.860 --> 01:00:38.860
看一下

01:00:38.860 --> 01:00:39.860
它的值是now

01:00:39.860 --> 01:00:40.860
好

01:00:40.860 --> 01:00:41.860
然后咱们再看一下

01:00:41.860 --> 01:00:43.860
first child

01:00:43.860 --> 01:00:45.860
文档内详

01:00:45.860 --> 01:00:46.860
文档声明

01:00:46.860 --> 01:00:47.860
它的load value

01:00:47.860 --> 01:00:48.860
是什么

01:00:48.860 --> 01:00:49.860
也是now

01:00:49.860 --> 01:00:50.860
好

01:00:50.860 --> 01:00:51.860
咱们再看一个元素

01:00:51.860 --> 01:00:52.860
A元素的load value

01:00:52.860 --> 01:00:53.860
看一下

01:00:53.860 --> 01:00:54.860
它也是now

01:00:54.860 --> 01:00:55.860
也是now

01:00:55.860 --> 01:00:56.860
A元素的load value

01:00:56.860 --> 01:00:57.860
也是now

01:00:57.860 --> 01:00:58.860
好

01:00:58.860 --> 01:00:59.860
咱们再看一下

01:00:59.860 --> 01:01:00.860
A元素的属性

01:01:00.860 --> 01:01:02.860
H value

01:01:02.860 --> 01:01:03.860
第一个属性

01:01:03.860 --> 01:01:05.860
它的load value

01:01:05.860 --> 01:01:07.860
就是它的属性值

01:01:07.860 --> 01:01:08.860
它的属性值

01:01:08.860 --> 01:01:09.860
它的load value

01:01:09.860 --> 01:01:10.860
它们不同的节点

01:01:10.860 --> 01:01:11.860
它解释起来

01:01:11.860 --> 01:01:12.860
是不太一样的

01:01:12.860 --> 01:01:13.860
是不太一样的

01:01:13.860 --> 01:01:14.860
了解就行了

01:01:14.860 --> 01:01:15.860
了解就行了

01:01:16.860 --> 01:01:17.860
这是关于这个

01:01:18.860 --> 01:01:19.860
再下一个

01:01:19.860 --> 01:01:21.860
就是load type

01:01:21.860 --> 01:01:22.860
load type

01:01:22.860 --> 01:01:24.860
就是节点内详

01:01:24.860 --> 01:01:25.860
是一个数字

01:01:25.860 --> 01:01:27.860
它的节点内详是一个数字

01:01:27.860 --> 01:01:28.860
它用数字来标识

01:01:28.860 --> 01:01:29.860
节点内详

01:01:29.860 --> 01:01:30.860
咱们再看一下

01:01:30.860 --> 01:01:31.860
Document

01:01:31.860 --> 01:01:32.860
load type

01:01:32.860 --> 01:01:33.860
节点内详

01:01:33.860 --> 01:01:34.860
它是9

01:01:34.860 --> 01:01:36.860
然后咱们的A元素

01:01:36.860 --> 01:01:37.860
load type

01:01:37.860 --> 01:01:38.860
它的内详是1

01:01:38.860 --> 01:01:39.860
我们的元素节点

01:01:39.860 --> 01:01:40.860
内详都是1

01:01:40.860 --> 01:01:41.860
这里有张表

01:01:41.860 --> 01:01:42.860
给它看一下

01:01:42.860 --> 01:01:43.860
节点内详

01:01:43.860 --> 01:01:44.860
放过来

01:01:45.860 --> 01:01:46.860
看一下

01:01:46.860 --> 01:01:47.860
你看吧

01:01:47.860 --> 01:01:48.860
元素节点

01:01:48.860 --> 01:01:49.860
内详

01:01:49.860 --> 01:01:50.860
它的值是1

01:01:50.860 --> 01:01:51.860
属性节点的内详

01:01:51.860 --> 01:01:52.860
值是2

01:01:52.860 --> 01:01:53.860
文闷节点是3

01:01:53.860 --> 01:01:54.860
这些节点不管

01:01:54.860 --> 01:01:55.860
这些节点不管

01:01:55.860 --> 01:01:56.860
跟我们没什么关系

01:01:56.860 --> 01:01:57.860
CDTAR节点

01:01:57.860 --> 01:01:58.860
都是官员

01:01:58.860 --> 01:01:59.860
差没有的

01:01:59.860 --> 01:02:00.860
里边的东西

01:02:00.860 --> 01:02:01.860
因为我们的多目

01:02:01.860 --> 01:02:03.860
这个文档对象模型

01:02:03.860 --> 01:02:05.860
它能既能支持atmail

01:02:05.860 --> 01:02:06.860
也能支持差没有

01:02:06.860 --> 01:02:07.860
什么实体引用

01:02:07.860 --> 01:02:08.860
实体名称

01:02:08.860 --> 01:02:09.860
处理指令

01:02:09.860 --> 01:02:10.860
不用管

01:02:10.860 --> 01:02:11.860
注释节点

01:02:11.860 --> 01:02:12.860
自8

01:02:12.860 --> 01:02:13.860
文档节点是9

01:02:13.860 --> 01:02:15.860
文档内详节点

01:02:15.860 --> 01:02:16.860
Document type

01:02:16.860 --> 01:02:17.860
是10

01:02:17.860 --> 01:02:18.860
文档片段是11

01:02:18.860 --> 01:02:20.860
现在我们没有讲到文档片段

01:02:20.860 --> 01:02:21.860
CDT不用管

01:02:21.860 --> 01:02:22.860
不用管

01:02:22.860 --> 01:02:23.860
这是差没有里面的东西

01:02:23.860 --> 01:02:24.860
好吧

01:02:24.860 --> 01:02:25.860
我们可以通过这张表

01:02:25.860 --> 01:02:26.860
不用去背

01:02:26.860 --> 01:02:27.860
千万别背

01:02:27.860 --> 01:02:28.860
你会死的

01:02:28.860 --> 01:02:29.860
我都不会背

01:02:29.860 --> 01:02:30.860
我一起不住

01:02:30.860 --> 01:02:31.860
所以说我们到时候

01:02:31.860 --> 01:02:33.860
万一要判断

01:02:33.860 --> 01:02:35.860
文档节点是什么内询的话

01:02:35.860 --> 01:02:36.860
我们可以使用

01:02:36.860 --> 01:02:37.860
在这张表里面去查

01:02:37.860 --> 01:02:39.860
找到它的load type

01:02:39.860 --> 01:02:40.860
找到某个东西的表

01:02:40.860 --> 01:02:41.860
Document

01:02:41.860 --> 01:02:42.860
Document element

01:02:42.860 --> 01:02:43.860
根元素

01:02:43.860 --> 01:02:45.860
它的load type

01:02:45.860 --> 01:02:47.860
找它的load type来进行判断

01:02:47.860 --> 01:02:49.860
看它到底是什么节点

01:02:49.860 --> 01:02:50.860
好吧

01:02:50.860 --> 01:02:51.860
OK

01:02:51.860 --> 01:02:52.860
这节课就差不多了

01:02:52.860 --> 01:02:53.860
这个东西了解一下就行了

01:02:53.860 --> 01:02:55.860
我们平时不太会用

01:02:55.860 --> 01:02:57.860
这节课的终点在哪呢

01:02:57.860 --> 01:03:00.860
主要在于如何来获取元素

01:03:00.860 --> 01:03:01.860
有这么多方式

01:03:01.860 --> 01:03:02.860
以及呢

01:03:02.860 --> 01:03:04.860
如何获取到元素过后

01:03:04.860 --> 01:03:07.860
跟元素相关的其他元素

01:03:07.860 --> 01:03:08.860
元素的子元素

01:03:08.860 --> 01:03:09.860
元素的夫元素

01:03:09.860 --> 01:03:11.860
元素的兄弟元素

01:03:11.860 --> 01:03:13.860
这些东西才是重点

01:03:13.860 --> 01:03:16.860
而不是在其他乱七八糟的节点上面

01:03:16.860 --> 01:03:18.860
因为元素本身也是节点嘛

01:03:18.860 --> 01:03:20.860
元素节点才是我们学习的重点

01:03:20.860 --> 01:03:21.860
好吧

01:03:21.860 --> 01:03:23.860
接下来一个作业

01:03:23.860 --> 01:03:24.860
以后作业呢

01:03:24.860 --> 01:03:25.860
我放了照了

01:03:25.860 --> 01:03:28.860
放到文件夹里边

01:03:29.860 --> 01:03:30.860
这个

01:03:30.860 --> 01:03:31.860
第一个作业

01:03:31.860 --> 01:03:33.860
作业呢是什么呢

01:03:33.860 --> 01:03:34.860
第一个作业是

01:03:34.860 --> 01:03:35.860
我这里给你写个网页

01:03:35.860 --> 01:03:37.860
你要帮我搞另一件事

01:03:37.860 --> 01:03:39.860
ULID

01:03:39.860 --> 01:03:41.860
ID就是list1

01:03:41.860 --> 01:03:44.860
这下面有10个Li

01:03:44.860 --> 01:03:46.860
10个Li

01:03:46.860 --> 01:03:48.860
lol

01:03:48.860 --> 01:03:49.860
下面元素

01:03:49.860 --> 01:03:50.860
lol

01:03:50.860 --> 01:03:51.860
是

01:03:51.860 --> 01:03:52.860
这是一个UL

01:03:52.860 --> 01:03:54.860
下面还有一个UL

01:03:54.860 --> 01:03:56.860
还有一个UL

01:03:56.860 --> 01:03:59.860
ID为list2

01:03:59.860 --> 01:04:00.860
Li

01:04:00.860 --> 01:04:02.860
然后下面有元素

01:04:02.860 --> 01:04:04.860
lol

01:04:04.860 --> 01:04:08.490
10

01:04:09.490 --> 01:04:11.490
接下来我这里有两个UL

01:04:11.490 --> 01:04:12.490
ULI

01:04:12.490 --> 01:04:14.490
我现在让你做这件事

01:04:14.490 --> 01:04:15.490
作业

01:04:15.490 --> 01:04:16.490
以后作业我都得这样解了

01:04:16.490 --> 01:04:18.490
因为包含页面了

01:04:18.490 --> 01:04:19.490
做什么作业呢

01:04:19.490 --> 01:04:20.490
我们要做的事情

01:04:20.490 --> 01:04:22.490
我这里用的多行注释吧

01:04:22.490 --> 01:04:23.490
多行注释咋写的

01:04:23.490 --> 01:04:25.490
我又忘了

01:04:25.490 --> 01:04:26.490
算了我们平时也省少用

01:04:26.490 --> 01:04:27.490
就用这个吧

01:04:27.490 --> 01:04:28.490
就是我要干嘛呢

01:04:28.490 --> 01:04:30.490
我要得到

01:04:30.490 --> 01:04:32.490
准备两个数组

01:04:32.490 --> 01:04:34.490
两个数组

01:04:34.490 --> 01:04:37.490
分别存放

01:04:37.490 --> 01:04:41.490
list1和list2

01:04:41.490 --> 01:04:47.490
所有超链接的内容

01:04:47.490 --> 01:04:48.490
你要做这件事

01:04:48.490 --> 01:04:49.490
自己去搞定

01:04:49.490 --> 01:04:50.490
自己去搞定

01:04:50.490 --> 01:04:51.490
要干嘛呢

01:04:51.490 --> 01:04:53.490
比方说我准备两个数组

01:04:53.490 --> 01:04:54.490
这几个例子

01:04:54.490 --> 01:05:01.490
一个是list1

01:05:02.490 --> 01:05:04.490
第1个列表里面的

01:05:04.490 --> 01:05:05.490
所有超链接内容

01:05:05.490 --> 01:05:07.490
放到这个数组里面

01:05:07.490 --> 01:05:08.490
就是这些东西

01:05:08.490 --> 01:05:10.490
把他放到数组里面

01:05:10.490 --> 01:05:11.490
没什么意思吧

01:05:11.490 --> 01:05:12.490
放到第1个数组

01:05:12.490 --> 01:05:14.490
然后还要准备一个数组

01:05:14.490 --> 01:05:15.490
我就直接在这里写了

01:05:15.490 --> 01:05:17.490
list2

01:05:17.490 --> 01:05:19.490
一个数组

01:05:19.490 --> 01:05:21.490
把这个UL下面的

01:05:21.490 --> 01:05:22.490
超链接内容

01:05:22.490 --> 01:05:23.490
全部放进来

01:05:23.490 --> 01:05:24.490
这是第1道题

01:05:24.490 --> 01:05:25.490
自己去完成

01:05:25.490 --> 01:05:26.490
下面给我讲

01:05:26.490 --> 01:05:30.490
第2道题

01:05:30.490 --> 01:05:34.590
第2题是这样子的

01:05:34.590 --> 01:05:35.590
container

01:05:35.590 --> 01:05:37.590
我就随便下写

01:05:37.590 --> 01:05:38.590
下写

01:05:38.590 --> 01:05:40.590
然后下边的UL Li乘以10

01:05:40.590 --> 01:05:41.590
下边的A元数

01:05:41.590 --> 01:05:43.590
Norwin 4个

01:05:43.590 --> 01:05:45.590
现在我们再来

01:05:45.590 --> 01:05:49.590
得到一个DIV

01:05:49.590 --> 01:05:50.590
里面直接是一个

01:05:50.590 --> 01:05:52.590
十半元数

01:05:52.590 --> 01:05:53.590
十半元数

01:05:53.590 --> 01:05:54.590
十状元数

01:05:54.590 --> 01:05:55.590
随便写

01:05:55.590 --> 01:05:56.590
I元数

01:05:56.590 --> 01:05:57.590
随便写

01:05:57.590 --> 01:05:58.590
然后P元数

01:05:58.590 --> 01:05:59.590
随便写

01:05:59.590 --> 01:06:01.590
然后下边的

01:06:01.590 --> 01:06:02.590
这个DIV

01:06:02.590 --> 01:06:03.590
给他个内容是吧

01:06:03.590 --> 01:06:06.590
container2

01:06:06.590 --> 01:06:09.590
然后这里给他一个DIV

01:06:09.590 --> 01:06:11.590
这里是class

01:06:11.590 --> 01:06:12.590
C3

01:06:12.590 --> 01:06:13.590
container3

01:06:13.590 --> 01:06:15.590
下边有一个P元数

01:06:15.590 --> 01:06:16.590
我就下写

01:06:16.590 --> 01:06:17.590
随便写

01:06:17.590 --> 01:06:18.590
现在我要干嘛呢

01:06:18.590 --> 01:06:21.590
我要要求你写一个函数

01:06:21.590 --> 01:06:22.590
写一个函数

01:06:22.590 --> 01:06:26.590
传入一个DOM对象

01:06:26.590 --> 01:06:28.590
一个节点对象

01:06:28.590 --> 01:06:29.590
这个函数有一个参数

01:06:29.590 --> 01:06:31.590
他需要得到一个节点对象

01:06:31.590 --> 01:06:33.590
然后这个函数要返回什么呢

01:06:33.590 --> 01:06:35.590
返回

01:06:35.590 --> 01:06:38.590
该对象的

01:06:38.590 --> 01:06:41.590
第一个DIV容器

01:06:41.590 --> 01:06:42.590
什么意思

01:06:42.590 --> 01:06:43.590
比方说我传入这个P元数

01:06:43.590 --> 01:06:46.590
你要给我返回这个DIV

01:06:46.590 --> 01:06:47.590
我传入这个P元数

01:06:47.590 --> 01:06:49.590
你要给我返回这个DIV

01:06:49.590 --> 01:06:51.590
我传入这个A元数

01:06:51.590 --> 01:06:53.590
你要给我返回这个DIV

01:06:53.590 --> 01:06:54.590
你看这意思吧

01:06:54.590 --> 01:06:55.590
找到第一个

01:06:55.590 --> 01:06:57.590
他的主线元数

01:06:57.590 --> 01:06:58.590
一次去找

01:06:58.590 --> 01:06:59.590
找副元数找副元数

01:06:59.590 --> 01:07:00.590
找到他第一个

01:07:00.590 --> 01:07:02.590
主线元数DIV

01:07:02.590 --> 01:07:03.590
你给我返回

01:07:03.590 --> 01:07:04.590
好吧

01:07:04.590 --> 01:07:05.590
写这么一个函数

01:07:05.590 --> 01:07:06.590
就这么两个练习

01:07:06.590 --> 01:07:07.590
这两个练习一练习的话

01:07:07.590 --> 01:07:08.590
基本上你对这个

01:07:08.590 --> 01:07:10.590
什么获取元数这一块

01:07:10.590 --> 01:07:11.590
就有印象了

01:07:11.590 --> 01:07:12.590
至少有印象了

01:07:12.590 --> 01:07:14.590
熟悉的话还不敢说

01:07:14.590 --> 01:07:15.590
熟悉的话

01:07:15.590 --> 01:07:16.590
我们要写很多很多的例子

01:07:16.590 --> 01:07:18.590
但现在我们做不了什么例子

01:07:18.590 --> 01:07:20.590
也看不到什么效果

01:07:20.590 --> 01:07:21.590
主要是练习一下

01:07:21.590 --> 01:07:23.590
如何来获取元数

01:07:23.590 --> 01:07:24.590
好吧

01:07:24.590 --> 01:07:25.590
这是这么讲的这一节课

01:07:25.590 --> 01:07:27.590
讲的是获取动物节点

01:07:27.590 --> 01:07:28.590
全部就讲完了

