WEBVTT

00:00.000 --> 00:12.220
数组

00:12.220 --> 00:20.700
数组这节课本来我是打算单独来个章节的

00:20.700 --> 00:26.220
但是借使这个语言 它数组比较简单

00:26.220 --> 00:30.340
所以说我们这一块就直接把数组放到流程控制在里边

00:30.340 --> 00:37.020
因为你学了数组之后 它经常跟循环判断了连着用

00:37.180 --> 00:39.780
所以说我们也把它放到流程控制在里边

00:39.780 --> 00:42.620
实际上它这个东西它不属于流程控制

00:43.180 --> 00:45.220
我来看数组是用来干嘛的呢

00:45.620 --> 00:50.780
数组它是用于存放多个数据的

00:51.140 --> 00:52.780
就是有的时候比方说

00:53.140 --> 00:55.780
我们一个班有30个同学

00:56.780 --> 00:59.300
那么这30个同学考试了之后

00:59.300 --> 01:01.380
每个同学都有一个分数 对吧

01:01.500 --> 01:04.620
那么我们可以把这个分数就放到数组里边

01:04.660 --> 01:08.620
因为有多个分数 有很多个这种类型的数据

01:09.020 --> 01:11.580
有很多个数据 我们就可以把它放到数组里边

01:12.020 --> 01:15.340
如果没有数组的话 你想一想 这个事情就麻烦了

01:15.860 --> 01:18.100
如果没有数组的话 你再把它存到哪了

01:18.340 --> 01:20.300
你再把它存到一个一个的变量里边

01:20.300 --> 01:23.940
30个同学你就得建30个变量 就非常麻烦

01:24.420 --> 01:26.420
所以说数组它有了这个东西之后

01:26.420 --> 01:28.540
我们就可以存放多个数据

01:29.180 --> 01:31.180
这就是数组的作用 非常非常简单

01:31.780 --> 01:33.580
那么我们来 首先来看一下

01:33.580 --> 01:35.020
数组和创建

01:35.660 --> 01:36.700
创建一个数组

01:37.980 --> 01:39.220
创建一个数组

01:39.700 --> 01:42.540
创建数组有两种方式

01:42.980 --> 01:45.860
哪两种方式呢 第一种方式 使用这种方法

01:46.820 --> 01:47.460
这种方式

01:48.140 --> 01:50.260
其实我们以后学到更多过后了

01:50.260 --> 01:53.020
你就会发现 数组还有很多很多的办法得到

01:53.540 --> 01:55.420
一个 6 一个 Array

01:56.660 --> 01:59.860
小括号里边写上数组的长度

02:00.340 --> 02:02.860
什么叫长度呢 长度指的是

02:04.140 --> 02:09.940
这个长度指的是数组里面的数据总数

02:11.020 --> 02:13.620
它指的是数据 数据里面数据的总数

02:13.620 --> 02:14.900
它不是来存放数据的吗

02:15.260 --> 02:16.580
它不是来存放多个数据的吗

02:16.860 --> 02:18.260
一共有多少个数据

02:18.260 --> 02:20.500
这就是数据的长度

02:20.980 --> 02:23.180
所以说长度它一定是一个

02:24.180 --> 02:26.580
一定是一个非负数 非负整数

02:27.340 --> 02:30.780
长度一定是一个非负整数

02:34.740 --> 02:35.700
也就是说什么呢

02:36.060 --> 02:38.700
也就是说 长度你是不能是负数的

02:38.700 --> 02:40.300
你可以是零 零都可以

02:40.300 --> 02:42.660
零表示这个数组里边什么都没有放

02:42.660 --> 02:43.620
什么都没有放

02:44.220 --> 02:45.580
但是它一定不能是负数

02:45.900 --> 02:47.140
它是一个非负整数

02:47.460 --> 02:49.220
这是第一种创建数组的方式

02:49.620 --> 02:50.940
比方说 咱们举个例子

02:52.340 --> 02:57.300
太捨一 看一下

02:58.180 --> 03:00.260
比方说 我有这么一个数组

03:00.580 --> 03:01.260
ARR

03:01.980 --> 03:03.980
然后我给它复制 复制为什么呢

03:03.980 --> 03:07.060
复制为创建一个数组

03:07.060 --> 03:08.860
6 这是个关键字

03:08.860 --> 03:11.860
我们后边还会专门来学习6这个关键字

03:11.860 --> 03:12.660
现在先别管

03:12.900 --> 03:14.260
6 一个R

03:14.980 --> 03:17.100
注意大小写

03:18.060 --> 03:19.900
然后创建这么一个数组

03:19.900 --> 03:21.500
长度这里我就写什么了

03:21.500 --> 03:23.580
比方说长度这里我就可以这样写

03:24.500 --> 03:25.340
比方说20

03:25.980 --> 03:27.100
长度为20

03:27.780 --> 03:29.420
于是我们这里就创建了一个什么

03:29.420 --> 03:34.020
创建了一个长度为20的数组

03:34.900 --> 03:36.500
创建一个长度为20的数组

03:36.900 --> 03:38.660
咱们把这个数组输出一下 看一下

03:39.180 --> 03:40.500
ARR 输出一下

03:41.580 --> 03:42.900
右键 看一下

03:46.670 --> 03:47.430
F12

03:49.960 --> 03:50.480
看一下

03:50.760 --> 03:52.280
那么得到了就这么一个东西

03:52.920 --> 03:54.240
长度为20

03:54.360 --> 03:55.960
它有个属性 长度为20

03:56.640 --> 03:59.440
那么长度为20的数组里面存了啥东西

03:59.440 --> 04:00.480
啥都没存

04:00.480 --> 04:01.520
因此它告诉你

04:01.600 --> 04:03.240
这个数组里面存放的是啥

04:03.240 --> 04:04.440
存放的是MD

04:04.440 --> 04:05.240
MD

04:05.440 --> 04:07.840
MD表示空的 空的啥都没有

04:08.040 --> 04:08.720
啥都没有

04:08.720 --> 04:10.320
有20个空的东西

04:10.680 --> 04:11.600
总之啥都没有

04:11.600 --> 04:12.400
啥都没有

04:13.200 --> 04:15.480
那么这就是一个数组就创建好了

04:15.880 --> 04:17.760
这是第一种创建数组的方式

04:18.280 --> 04:19.880
这种方式还可以

04:20.120 --> 04:20.960
还可以变种

04:20.960 --> 04:22.360
还可以有变化

04:22.480 --> 04:24.120
比方说如果你这样子写

04:24.520 --> 04:25.520
如果你这样子写

04:25.600 --> 04:27.480
ARR 这样子写

04:27.480 --> 04:28.720
这里写数据

04:28.800 --> 04:30.120
兜号数据

04:30.120 --> 04:32.520
兜号数据等等等等

04:32.920 --> 04:34.880
那么这样子创建的数组是什么呢

04:35.520 --> 04:37.080
这样子创建的数组就是

04:37.760 --> 04:38.200
用

04:39.800 --> 04:40.920
创建一个数组

04:41.360 --> 04:42.640
创建一个数组

04:43.160 --> 04:45.120
并且初始化

04:45.480 --> 04:49.080
初始化其每一项的值

04:49.480 --> 04:50.680
什么叫每一项

04:51.120 --> 04:52.320
每一项就是数组里面

04:52.320 --> 04:53.440
不是存多个数据吗

04:53.720 --> 04:54.840
第一个数据是啥

04:54.840 --> 04:55.960
第二个数据是啥

04:56.440 --> 04:58.000
其中某一个数据

04:58.000 --> 04:59.440
就是数组的一项

04:59.920 --> 05:00.640
说一下

05:01.000 --> 05:02.160
什么叫数组项

05:02.680 --> 05:07.480
数组项指的是数组其中的一项数据

05:08.120 --> 05:09.280
它不是存多的数据吗

05:09.280 --> 05:11.440
其中一个数据就叫做数组项

05:12.040 --> 05:14.120
那么这种方式是创建一个数据

05:14.120 --> 05:15.840
同时初始化

05:16.080 --> 05:17.320
每一项的数据

05:17.320 --> 05:18.320
同时初始化

05:18.320 --> 05:19.280
每一项的数据

05:19.600 --> 05:21.040
比方说

05:22.120 --> 05:23.520
咱们这里这样子写

05:24.360 --> 05:26.360
ar6一个耳锐

05:26.640 --> 05:27.560
6一个耳锐

05:28.400 --> 05:31.320
这里边我们用这种写法

05:31.320 --> 05:33.640
就是在这里边我们写上

05:33.640 --> 05:34.360
1

05:35.120 --> 05:36.000
5随便写

05:36.000 --> 05:36.760
就瞎写

05:36.760 --> 05:37.520
瞎写

05:38.520 --> 05:39.000
你看

05:39.520 --> 05:40.960
这样子创建了一个什么

05:40.960 --> 05:41.960
创建了一个

05:41.960 --> 05:42.880
我打个注释

05:43.120 --> 05:44.120
下面这个代码

05:44.240 --> 05:47.520
就创建了一个长度为多少

05:47.520 --> 05:49.000
长度为多少

05:49.000 --> 05:50.720
它会自动比你算出来长度

05:50.720 --> 05:52.120
长度为5

05:52.360 --> 05:54.160
就是这个数组里边一共有五项

05:54.160 --> 05:55.400
一共有五项

05:55.400 --> 05:56.520
有五个数据

05:56.800 --> 05:59.320
长度为5分别是

05:59.960 --> 06:00.560
1

06:00.560 --> 06:01.320
5

06:01.520 --> 06:02.120
3

06:02.120 --> 06:02.400
5

06:02.400 --> 06:02.800
4

06:02.800 --> 06:03.000
2

06:03.000 --> 06:03.200
3

06:03.200 --> 06:03.560
4

06:03.560 --> 06:03.600
1

06:03.600 --> 06:04.200
1

06:04.560 --> 06:05.960
数据分别是这些

06:07.360 --> 06:09.000
这就是数据创建好了

06:09.520 --> 06:10.520
咱们再来输出

06:10.520 --> 06:11.640
再来输出看一下

06:12.200 --> 06:12.760
你看

06:12.960 --> 06:13.880
就得到了一个数组

06:13.880 --> 06:14.960
得到了一个数组

06:14.960 --> 06:16.640
这个数组里边包含了什么

06:16.640 --> 06:17.640
就包含了这些东西

06:17.640 --> 06:18.720
包含了这些东西

06:19.920 --> 06:21.320
这就是数组的创

06:21.880 --> 06:23.040
这是第一种方式

06:23.200 --> 06:25.040
第二种方式更加常用一点

06:25.040 --> 06:27.440
第一种方式写起来不是很方便

06:27.440 --> 06:28.480
不是很方便

06:28.800 --> 06:31.480
但是我们平时一般都用第二种方式

06:31.680 --> 06:34.760
第二种方式就是直接两个中货号

06:35.080 --> 06:36.480
直接写两个中货号

06:36.640 --> 06:38.880
中货号里边写数组的数据

06:39.160 --> 06:40.120
直接写数据

06:41.080 --> 06:41.920
数组的数据

06:44.520 --> 06:45.800
看一下就这样子写

06:46.200 --> 06:48.560
那么这个东西就是创建

06:48.560 --> 06:49.880
咱们后面

06:50.040 --> 06:52.120
后面可以GP写

06:52.720 --> 06:54.080
创建一个数组

06:54.560 --> 06:59.000
并初始化起每一项的值

07:00.240 --> 07:01.400
达到类似的效果

07:01.400 --> 07:02.640
达到类似的效果

07:03.040 --> 07:04.680
我们来看一下第二种方式

07:06.940 --> 07:10.540
ARARARARREED的单词

07:10.540 --> 07:11.660
就是数组的意思

07:12.140 --> 07:14.180
咱们创建一个一模一样的数组

07:15.060 --> 07:17.300
两个中货号这样子写就完事了

07:17.300 --> 07:18.100
是不是很简单

07:18.460 --> 07:20.060
这样子的达到类似的效果

07:20.460 --> 07:22.940
创建一个长度为五的数据

07:22.940 --> 07:24.580
数据分别是这些

07:25.780 --> 07:26.540
看一下

07:26.860 --> 07:28.020
你看保存过后

07:29.220 --> 07:30.780
得到的效果是完全一样的

07:30.940 --> 07:31.820
完全一样的

07:33.020 --> 07:33.820
没看问题吧

07:34.220 --> 07:35.340
这就是创建数据

07:35.340 --> 07:36.300
数据用来干嘛的

07:36.300 --> 07:36.820
再说一次

07:36.820 --> 07:38.500
它用来保存多个数据的

07:38.500 --> 07:40.140
你看这里有很多个数据

07:40.140 --> 07:41.900
如果放在以前是不是得用什么

07:41.900 --> 07:43.140
得用变量对吧

07:43.140 --> 07:44.260
一个变量保存1

07:44.260 --> 07:45.180
一个变量保存5

07:45.180 --> 07:46.140
保存这些东西

07:46.940 --> 07:48.260
那么如果这些数据的含义

07:48.260 --> 07:49.060
都差不多的话

07:49.100 --> 07:50.180
那么我们的数据里边

07:50.940 --> 07:52.620
我们往往可以把它放到数据里边

07:52.620 --> 07:53.740
可以表示多个数据

07:54.580 --> 07:56.460
这是关于数据的创建

07:56.780 --> 07:57.380
创建

07:58.860 --> 07:59.380
说好了

07:59.380 --> 08:00.540
数据的创建之后

08:00.700 --> 08:02.380
我们这里再说一个点

08:02.700 --> 08:04.100
大家要注意的一个点

08:04.260 --> 08:05.900
就是数据里边的数据

08:06.220 --> 08:07.620
它不一定是数字

08:08.340 --> 08:09.740
比方我们这个章节

08:09.860 --> 08:12.740
可能用的数据大部分都是数字

08:12.860 --> 08:14.700
但是数据里边每一项

08:14.700 --> 08:15.660
它不一定是数字

08:15.660 --> 08:16.780
它可以是别的玩意

08:16.900 --> 08:18.340
比方说这个数据里边

08:19.060 --> 08:19.820
不要认为它

08:19.820 --> 08:21.860
我说的是里边存放的是数据

08:21.860 --> 08:22.340
对吧

08:22.340 --> 08:23.540
存放的是数据

08:23.540 --> 08:24.620
它不一定是数字

08:24.620 --> 08:26.380
比方说第一个是数字

08:26.500 --> 08:27.780
第二个是制服创

08:27.780 --> 08:28.420
可不可以

08:28.420 --> 08:29.300
当然没问题

08:29.300 --> 08:30.540
第三个是布尔

08:31.260 --> 08:32.860
第四个是NOW

08:33.300 --> 08:35.340
第五个是undefined的

08:35.340 --> 08:36.140
都可以

08:36.140 --> 08:37.660
第六个还可以是个对象

08:37.820 --> 08:38.900
还可以是个对象

08:39.380 --> 08:40.940
比方说X

08:41.980 --> 08:42.500
Y

08:42.500 --> 08:43.100
随便写吧

08:43.100 --> 08:43.860
就随便写

08:45.020 --> 08:46.660
你看这仍然是一个数据

08:46.820 --> 08:47.980
这仍然是一个数据

08:48.340 --> 08:50.060
你看第一项是一个数字

08:50.060 --> 08:51.340
然后一次是制不出来

08:51.340 --> 08:51.980
布尔

08:51.980 --> 08:52.500
NOW

08:52.500 --> 08:53.180
undefined

08:53.180 --> 08:54.260
然后是一个对象

08:55.020 --> 08:55.460
可以

08:55.460 --> 08:56.940
它可以存放任何东西

08:57.300 --> 08:58.820
可以存放任何东西

08:59.620 --> 09:00.660
保证看一下

09:01.300 --> 09:01.940
你看

09:02.500 --> 09:04.100
它里面存放可以是任何东西

09:04.100 --> 09:05.220
可以是任何东西

09:05.220 --> 09:06.900
它总之存放数据就完事了

09:07.820 --> 09:08.620
没什么意思

09:08.980 --> 09:09.900
这是第一个

09:09.900 --> 09:11.580
如何来创建一个数据

09:12.500 --> 09:12.740
好

09:12.740 --> 09:13.380
第二个点

09:13.620 --> 09:15.420
我们要认识数据的本质

09:16.220 --> 09:17.460
数据的本质

09:18.820 --> 09:20.020
顺便认识里面

09:20.020 --> 09:21.500
数据里面有哪些属性

09:22.620 --> 09:24.260
数据的本质

09:24.580 --> 09:25.700
是一个对象

09:26.420 --> 09:27.900
数据的本质是一个对象

09:27.900 --> 09:28.460
因此

09:28.940 --> 09:29.700
数据

09:29.700 --> 09:31.340
你别看它是邪法很怪

09:31.340 --> 09:33.020
平时我们创建对象是什么创建的

09:33.020 --> 09:33.740
就是两个大括号

09:33.740 --> 09:34.180
对吧

09:34.180 --> 09:36.460
两个大括号来创建一个对象

09:36.460 --> 09:37.380
其实数据

09:37.460 --> 09:39.500
它就是邪法上有点差异

09:39.500 --> 09:42.220
但它的本质仍然是一个对象

09:42.740 --> 09:43.900
所以说我们之前讲的

09:43.900 --> 09:45.420
什么对象的那些特征

09:45.420 --> 09:45.780
对吧

09:45.780 --> 09:47.380
什么引用

09:47.380 --> 09:49.220
里边存的是引用

09:49.220 --> 09:49.700
对吧

09:49.700 --> 09:50.980
存的是地址

09:50.980 --> 09:51.340
对吧

09:51.340 --> 09:52.140
对这样的

09:52.140 --> 09:53.820
辨量里边存的是地址

09:53.820 --> 09:56.460
并且数据传递的时候

09:56.460 --> 09:58.020
把一个辨量负责给另一个辨量

09:58.020 --> 09:59.180
传递的也是地址

09:59.180 --> 09:59.980
像这些特征

09:59.980 --> 10:00.940
全部都有

10:00.940 --> 10:02.060
对于数据而言

10:02.060 --> 10:02.820
都一样的

10:02.820 --> 10:03.860
都一样的

10:03.860 --> 10:05.580
数据的本质就是一个对象

10:05.580 --> 10:07.140
不信我们这样子来看一下

10:07.780 --> 10:09.100
我们这里输出数据

10:09.100 --> 10:11.620
然后输出它的Type AR

10:11.620 --> 10:12.500
看它是啥

10:12.500 --> 10:13.860
看它输出来是啥

10:13.860 --> 10:14.500
看一下

10:15.980 --> 10:17.020
输出的是啥

10:17.020 --> 10:18.140
arborjagd

10:18.140 --> 10:19.060
对吧

10:19.060 --> 10:19.660
说明啥

10:19.660 --> 10:20.860
说明输出的

10:20.860 --> 10:22.220
就是一个对象

10:22.220 --> 10:23.340
没啥特别的

10:23.340 --> 10:24.980
它就是一个对象

10:24.980 --> 10:25.380
好

10:25.380 --> 10:26.700
那既然它是对象的话

10:26.700 --> 10:27.980
它是不是有属性

10:27.980 --> 10:28.380
对吧

10:28.380 --> 10:30.020
我们之前说的对象

10:30.020 --> 10:30.980
它都是有属性的

10:30.980 --> 10:31.900
你看

10:31.900 --> 10:33.780
对象都是有属性的

10:33.780 --> 10:35.900
那么输出它本身是一个对象

10:35.900 --> 10:38.060
那么它里边肯定是有属性的

10:38.060 --> 10:39.420
肯定是有属性的

10:39.420 --> 10:41.020
咱们来展开看一下

10:41.020 --> 10:42.740
展开这个对象看一下

10:43.380 --> 10:44.900
你看一下这个对象展开之后

10:44.900 --> 10:46.500
它里边是不是有属性

10:46.500 --> 10:47.940
你看什么属性

10:47.940 --> 10:49.980
它是用数字做属性的

10:49.980 --> 10:51.340
好

10:51.340 --> 10:52.700
还记得吗

10:52.700 --> 10:54.740
我们讲对象的时候

10:54.740 --> 10:56.180
我们说过

10:56.180 --> 10:59.340
属性能不能是数字

10:59.340 --> 11:00.260
能不能是数字啊

11:00.260 --> 11:01.940
属性

11:01.940 --> 11:04.980
属性它可以是任何东西

11:04.980 --> 11:06.140
但它的类型

11:06.140 --> 11:07.700
它可能只能是制服串

11:07.700 --> 11:08.860
只能是制服串

11:08.860 --> 11:09.940
那就奇怪了

11:09.940 --> 11:11.900
那为什么这里是数字呢

11:11.900 --> 11:12.580
你看这个东西

11:12.620 --> 11:14.580
这个属性我们还能理解

11:14.580 --> 11:15.060
对吧

11:15.060 --> 11:15.860
这个nance

11:15.860 --> 11:16.860
这个nance这个属性

11:16.860 --> 11:18.020
表示数组的长度

11:18.020 --> 11:19.260
我们先看这个属性

11:22.180 --> 11:23.220
nance属性

11:24.220 --> 11:24.940
这样子

11:24.940 --> 11:26.340
nance属性

11:27.060 --> 11:29.540
表示数组的长度

11:29.540 --> 11:30.660
表示数组的长度

11:30.660 --> 11:32.460
就是目前数组有多长

11:32.460 --> 11:35.140
比方说我们来输出一个数组的长度

11:35.140 --> 11:36.340
输出

11:36.340 --> 11:37.180
输出这个数组

11:37.180 --> 11:38.500
再输出这个数组的长度

11:38.500 --> 11:39.220
nance

11:40.780 --> 11:42.460
这是对象对吧

11:42.620 --> 11:43.940
叫做数组对象

11:43.940 --> 11:45.980
数组本身本质上就是个对象

11:46.620 --> 11:47.580
这个对象里面的属性

11:47.580 --> 11:49.020
nance表示什么意思呢

11:49.020 --> 11:49.900
表示数组的长度

11:49.900 --> 11:51.060
那长度肯定是个数字

11:51.060 --> 11:51.500
对吧

11:51.500 --> 11:53.140
肯定是一个恢复的数字

11:53.140 --> 11:53.380
好

11:53.380 --> 11:54.140
看一下啊

11:56.060 --> 11:56.740
长度为6

11:56.740 --> 11:57.500
没问题吧

11:57.500 --> 11:58.740
长度为6

11:58.740 --> 11:59.900
输出的结果

11:59.900 --> 12:00.260
好

12:00.260 --> 12:01.460
咱们再看这个对象

12:01.460 --> 12:02.820
除了长度之外

12:02.820 --> 12:04.460
还有这么一些属性

12:04.460 --> 12:06.540
这些属性全部是数字

12:06.540 --> 12:08.020
但是我们之前说过

12:08.020 --> 12:10.220
属性可不可能是数字

12:10.220 --> 12:11.820
属性是不可能是数字的

12:11.900 --> 12:13.700
它只能是字符串

12:13.700 --> 12:14.140
哎

12:14.140 --> 12:15.220
如果你还记得的话

12:15.220 --> 12:17.340
我们当时还举过一个例子

12:17.340 --> 12:18.500
看一下啊

12:18.500 --> 12:19.900
我们当时还举过一个例子

12:19.900 --> 12:21.220
我先看一个页面来写吧

12:22.700 --> 12:24.300
我们再把这个例子拿出来看一下

12:25.780 --> 12:26.540
obj

12:26.540 --> 12:27.380
是一个对象

12:27.380 --> 12:28.460
这个对象里面呢

12:28.460 --> 12:30.140
有一些有一个属性

12:30.140 --> 12:31.500
它的属性名字叫这个

12:32.660 --> 12:33.420
是不是字符串

12:33.420 --> 12:34.220
当然是个字符串

12:34.220 --> 12:34.580
对吧

12:34.580 --> 12:35.900
那个字符串的内容是0

12:37.580 --> 12:39.740
把这个东西作为属性名

12:39.740 --> 12:40.780
给他付一个字

12:40.780 --> 12:41.420
随便写吧

12:41.900 --> 12:42.500
就随便写

12:43.860 --> 12:44.900
然后这个属性

12:45.980 --> 12:47.540
随便写

12:47.540 --> 12:49.620
然后写个内式属性

12:49.620 --> 12:51.060
然后写个2

12:51.060 --> 12:52.940
咱们来把这个obj打印出来看一下

12:53.700 --> 12:54.060
obj

12:55.340 --> 12:57.460
你会发现它这个东西呢

12:57.460 --> 12:59.460
跟数据就差不多了

12:59.460 --> 13:00.540
跟数据就差不多了

13:01.500 --> 13:03.260
你看一下跟数据是不是差不多的

13:03.260 --> 13:03.860
看一下这边

13:04.700 --> 13:05.820
是差不多的

13:05.820 --> 13:06.940
对吧

13:06.940 --> 13:07.820
没问题吧

13:07.820 --> 13:08.100
对吧

13:08.100 --> 13:08.820
没问题

13:08.820 --> 13:10.100
只是我这里只有两项

13:10.100 --> 13:10.460
对吧

13:10.460 --> 13:11.700
它这里有五项

13:11.740 --> 13:12.980
五项数据

13:12.980 --> 13:13.860
没问题吧

13:13.860 --> 13:14.460
你看

13:15.060 --> 13:16.460
是不是就就完了

13:16.460 --> 13:18.980
所以说数组这个对象里边

13:18.980 --> 13:19.980
这些数字

13:19.980 --> 13:21.820
先别管这些数字是啥

13:21.820 --> 13:23.060
数组里边这些数字

13:23.060 --> 13:24.300
它不是真的数字

13:24.300 --> 13:26.060
它还是一个字符串

13:26.060 --> 13:28.140
还是一个字符串

13:28.140 --> 13:30.220
那我们以前在对象里边

13:30.220 --> 13:31.460
它的属性名

13:31.460 --> 13:33.700
是一个数字的字符串

13:33.700 --> 13:34.860
你该怎么来访问呢

13:34.860 --> 13:35.580
访问你的属性呢

13:35.580 --> 13:37.820
比方说我要得到这个属性的字

13:37.820 --> 13:39.300
我要输出这个属性的字

13:39.300 --> 13:40.260
我怎么输出呢

13:40.980 --> 13:41.780
看着

13:42.780 --> 13:43.860
我能不能这样子写

13:43.860 --> 13:45.060
OB借点零

13:45.060 --> 13:46.460
能不能这样子写

13:46.460 --> 13:47.660
是不是不能这样写

13:47.660 --> 13:48.460
为啥呢

13:48.460 --> 13:50.260
因为你用这个数字开头的

13:50.260 --> 13:52.860
它不是一个合法的标志符

13:52.860 --> 13:54.740
它不是一个合法的标志符

13:54.740 --> 14:00.940
你不是合法的标志符

14:00.940 --> 14:02.460
我们说的合法不合法

14:02.460 --> 14:03.180
合法非法

14:03.180 --> 14:05.020
只得是那种语法

14:05.020 --> 14:06.540
是不是满足语法

14:08.100 --> 14:09.740
那应该怎么来访问呢

14:09.740 --> 14:10.620
应该怎么来访问

14:10.620 --> 14:11.420
还记得吗

14:11.420 --> 14:12.780
所以应该是用中课

14:12.780 --> 14:15.380
就是使用属性表达式来访问

14:15.380 --> 14:16.740
好用属性表达式的时候

14:16.740 --> 14:17.940
这里是不是写字不错

14:19.300 --> 14:19.860
写字不错

14:19.860 --> 14:20.660
对吧

14:20.660 --> 14:22.820
应该是用属性表达式来访问

14:22.820 --> 14:24.500
回忆一下之前的字是

14:24.500 --> 14:26.380
属性表达式

14:26.380 --> 14:28.180
用这种方式来访问这个属性

14:28.180 --> 14:29.020
保存看一下

14:30.060 --> 14:30.780
这边

14:30.780 --> 14:31.940
你看是不是得到了

14:31.940 --> 14:33.460
得到了这个属性的字

14:33.460 --> 14:34.820
这个属性的字

14:34.820 --> 14:35.300
没问题吧

14:36.820 --> 14:38.100
那么现在呢

14:38.100 --> 14:39.140
还是还有一种

14:39.140 --> 14:39.860
我们当时还说过

14:39.860 --> 14:40.860
还有这种方式

14:42.140 --> 14:42.980
这种方式

14:42.980 --> 14:44.100
ob界

14:44.100 --> 14:45.540
直接写一个数据

14:45.540 --> 14:47.220
我当时说了

14:47.220 --> 14:48.540
界识会怎么样呢

14:48.540 --> 14:53.500
会自动将0转换为字符创

14:53.500 --> 14:55.540
它自动将0转换为字符创0

14:55.540 --> 14:56.620
是一样的

14:56.620 --> 14:57.980
这样子写也可以

14:57.980 --> 15:00.100
它会自动把0转换成字符创0

15:00.100 --> 15:02.500
最终访问属性一定是字符创

15:02.500 --> 15:03.860
一定是字符创

15:03.860 --> 15:05.020
好保存

15:05.020 --> 15:06.340
你看是不是也得到了

15:06.340 --> 15:07.580
也得到这个数据

15:07.620 --> 15:08.340
虽然这个字

15:08.340 --> 15:10.100
虽然这个属性的名字是一个字符创

15:10.100 --> 15:11.740
我们使用的是数字来访问

15:11.740 --> 15:13.020
但是呢

15:13.020 --> 15:15.660
它会自动的把数字转换成字符创

15:15.660 --> 15:18.700
因为属性它只能是字符创

15:18.700 --> 15:19.980
它不可能是别的玩意

15:19.980 --> 15:21.220
它只能把它转换成字符创

15:21.220 --> 15:22.420
你甭管这里写的是啥

15:22.420 --> 15:24.340
它都会把它转换成字符创

15:24.340 --> 15:25.420
所以说是一样的

15:26.620 --> 15:26.780
好

15:26.780 --> 15:28.940
那么有了一些以前这个知识

15:28.940 --> 15:30.860
在书组这边

15:30.860 --> 15:33.580
要访问书组里边的这些东西

15:33.580 --> 15:35.220
存的东西

15:35.220 --> 15:36.620
你是不是知道该怎么访问的

15:37.700 --> 15:38.980
书组里边它无非就是

15:38.980 --> 15:40.900
自动的给你生成了一个对象

15:40.900 --> 15:41.980
这个对象里边

15:41.980 --> 15:43.340
有这么一些属性

15:43.340 --> 15:45.140
有个内视属性表示书组的长度

15:45.140 --> 15:45.900
自动生成的

15:45.900 --> 15:47.540
全是自动生成的

15:47.540 --> 15:48.140
好

15:48.140 --> 15:49.540
然后这个书组里边

15:49.540 --> 15:51.340
有这么一些属性

15:51.340 --> 15:52.980
这些数字属性

15:52.980 --> 15:54.100
它其实是字符创

15:54.100 --> 15:56.060
其实本质上是字符创

15:56.060 --> 15:58.420
那么这个数字是从零开始

15:58.420 --> 16:00.460
一式排列

16:00.460 --> 16:02.460
我们把这个数字这个属性叫什么

16:02.460 --> 16:04.540
在书组里边叫做下标

16:04.540 --> 16:05.300
叫做下标

16:06.300 --> 16:08.100
数字

16:08.100 --> 16:10.100
字符创属性

16:10.100 --> 16:11.100
在书组里边

16:11.100 --> 16:12.300
这个数字字符创属性

16:12.300 --> 16:13.580
叫做下标

16:13.580 --> 16:14.700
下标

16:17.380 --> 16:18.180
下标

16:18.700 --> 16:20.780
也叫做锁印

16:20.780 --> 16:21.780
都是一个意思

16:21.780 --> 16:22.700
是一个意思

16:22.700 --> 16:23.580
一个叫下标

16:23.580 --> 16:24.460
一个是锁印

16:24.460 --> 16:26.340
相当于

16:26.340 --> 16:27.500
数组中

16:27.500 --> 16:29.940
每个数据的编号

16:30.940 --> 16:32.820
其实它本质上没有啥特别的

16:32.820 --> 16:33.860
就是一个属性

16:34.020 --> 16:36.180
就是一个数字作为属性

16:36.180 --> 16:38.980
一个数字字不错作为属性

16:38.980 --> 16:40.300
没有什么特别的

16:40.300 --> 16:41.740
只是我们理解上

16:41.740 --> 16:43.580
可以把它理解为编号

16:43.580 --> 16:46.540
咱们可以把数组想象成一个火车

16:46.540 --> 16:48.580
火车有很多车厢

16:48.580 --> 16:50.220
火车的车厢的数量

16:50.220 --> 16:51.980
就是数组的长度

16:51.980 --> 16:54.300
一个火车有多长

16:54.300 --> 16:55.980
火车的每一届车厢里边

16:55.980 --> 16:57.500
是不是可以装数据

16:57.500 --> 16:58.780
每一届车厢可以有编号

16:58.780 --> 17:00.740
我们赶火车的时候

17:00.740 --> 17:01.460
上火车的时候

17:01.460 --> 17:03.460
是不是火车票上面

17:03.460 --> 17:04.460
有个编号

17:04.460 --> 17:05.780
你是哪节车厢的

17:05.780 --> 17:07.100
哪几号车厢

17:07.100 --> 17:09.060
那么这个编号就可以叫做下标

17:09.060 --> 17:10.060
叫做锁印

17:10.060 --> 17:11.380
就是叫做锁印

17:11.380 --> 17:12.900
所以说没有什么特别的

17:12.900 --> 17:14.220
真的没有什么特别的

17:14.220 --> 17:14.860
那比方说

17:14.860 --> 17:16.740
我问大家一个问题

17:16.740 --> 17:19.900
我要取出数组的第一项

17:19.900 --> 17:22.340
我要把这个数据取出来

17:22.340 --> 17:24.100
怎么取呢

17:24.100 --> 17:25.500
我要取第一个数据

17:25.500 --> 17:27.380
是不是就访问这个数组的

17:27.380 --> 17:28.940
属性凌

17:28.940 --> 17:29.300
对吧

17:29.300 --> 17:30.540
访问它的属性凌

17:30.540 --> 17:31.500
是不是取得过的

17:31.500 --> 17:33.300
全都是取得过的

17:33.340 --> 17:35.420
比方说得到数组的第一个数据

17:36.620 --> 17:37.460
得到

17:39.940 --> 17:44.340
得到数组第一项数据

17:44.340 --> 17:45.700
第一项数据

17:45.700 --> 17:46.820
那么怎么来写呢

17:46.820 --> 17:47.700
第一项数据

17:47.700 --> 17:48.660
它的下标

17:48.660 --> 17:51.060
它的属性的名字叫凌

17:51.060 --> 17:53.220
那么我们就输出

17:53.220 --> 17:54.820
这个数组的ARR

17:54.820 --> 17:55.300
什么呢

17:55.300 --> 17:56.900
能不能直接点凌

17:56.900 --> 17:57.300
不行

17:57.300 --> 17:57.900
刚才说过了

17:57.900 --> 17:58.020
对吧

17:58.020 --> 17:59.540
它不是一个合法的标志符

17:59.540 --> 18:00.900
应该两个中扩号

18:00.900 --> 18:02.220
里边写上一个字无创凌

18:02.220 --> 18:03.020
也可以

18:03.020 --> 18:04.420
写上一个这个凌也可以

18:04.420 --> 18:04.940
对吧

18:04.940 --> 18:06.380
其实访问数组的某一项

18:06.380 --> 18:09.020
就是得到数组对象的一个属性

18:09.020 --> 18:10.180
就是得到它一个属性

18:10.180 --> 18:11.620
没有什么特别的

18:11.620 --> 18:12.980
保存看一下

18:12.980 --> 18:14.060
暂时是

18:14.060 --> 18:15.140
没问题吧

18:15.140 --> 18:15.660
没问题

18:15.660 --> 18:16.980
怎么呢

18:16.980 --> 18:18.180
先把这个数据输出

18:18.180 --> 18:19.140
再看一下

18:19.140 --> 18:19.900
你始终要想到

18:19.900 --> 18:21.300
数据它没有什么特别的

18:21.300 --> 18:22.940
它就是一个对象而已

18:22.940 --> 18:24.140
就是一个对象而已

18:24.140 --> 18:26.820
它里边的属性自动给你排列好了

18:26.820 --> 18:28.540
那么下标这一块

18:28.540 --> 18:29.540
下标这一块

18:29.540 --> 18:30.780
大家要注意一下就是

18:30.820 --> 18:35.340
下标从零开始排列

18:36.340 --> 18:37.820
它不是从一开始排列的

18:37.820 --> 18:39.260
然后数组第一项它不是一

18:39.260 --> 18:40.540
它是零

18:40.540 --> 18:42.100
下标是从零开始排列的

18:42.100 --> 18:43.100
换句话说

18:43.100 --> 18:43.980
这个属性

18:43.980 --> 18:45.300
它自动生成的这个属性

18:45.300 --> 18:46.700
它是从零开始的

18:46.700 --> 18:47.860
然后一次生成

18:49.020 --> 18:49.460
好

18:49.460 --> 18:51.100
那么现在再问大家一个问题

18:51.100 --> 18:52.660
看大家有没有理解

18:52.660 --> 18:54.580
我要访问数组

18:54.580 --> 18:55.940
第五项

18:55.940 --> 18:56.420
不

18:56.420 --> 18:57.820
应该是第六项对吧

18:57.820 --> 19:00.700
就是属性名为五的这一项

19:00.980 --> 19:01.660
这是个对象

19:01.660 --> 19:02.020
对不对

19:02.020 --> 19:02.820
这是个对象

19:02.820 --> 19:04.220
它的Y的值

19:04.820 --> 19:05.780
我该怎么来得到

19:06.420 --> 19:08.540
我要得到Y的值

19:09.620 --> 19:10.500
怎么写呢

19:10.500 --> 19:10.900
好

19:10.900 --> 19:11.660
看着啊

19:13.300 --> 19:15.060
我们现在有了表达式的知识了

19:15.060 --> 19:16.980
这些写法就应该都知道了

19:17.220 --> 19:19.820
AR数组首先找到了一下

19:20.180 --> 19:21.260
找第几项

19:21.460 --> 19:22.260
是不是第

19:22.460 --> 19:24.020
下标为五的这一项

19:24.020 --> 19:24.340
对吧

19:24.340 --> 19:26.060
下标为五的这一项

19:26.060 --> 19:27.820
也就是属性名为五

19:28.020 --> 19:29.700
把五扔进去不玩了吗

19:30.420 --> 19:31.700
这是不是一个表达式

19:31.700 --> 19:32.900
当然是一个表达式

19:33.420 --> 19:36.500
它得到一个对象的属性

19:37.340 --> 19:39.020
这个表达式的内误是啥

19:39.540 --> 19:41.300
这个表达式内误是不是一个对象

19:41.300 --> 19:42.820
你看这个玩意儿是不是个对象

19:43.340 --> 19:45.020
第五项的值是不是个对象

19:45.340 --> 19:46.300
得到一个对象

19:46.300 --> 19:49.100
然后再去访问这个对象的Y的值

19:49.620 --> 19:50.260
就这么写

19:50.580 --> 19:51.300
就这么写

19:51.300 --> 19:52.500
用表达式的知识

19:52.740 --> 19:54.340
你把任何东西都看成表达式

19:54.460 --> 19:55.700
这玩意儿是一个对象吧

19:55.700 --> 19:56.220
对吧

19:56.220 --> 19:57.620
这个对象里面有个属性Y

19:57.620 --> 19:58.740
把它取出来就完事了

19:59.300 --> 20:00.620
非常非常简单

20:00.860 --> 20:01.740
保存看一下

20:06.100 --> 20:06.900
没有输出呢

20:08.140 --> 20:09.020
再看一下

20:10.140 --> 20:10.620
刷新

20:11.220 --> 20:12.260
得到了是34

20:12.260 --> 20:12.900
对了

20:12.900 --> 20:13.660
是34吗

20:13.660 --> 20:14.500
是34

20:14.500 --> 20:16.020
这个Y的值随便写的

20:16.020 --> 20:17.140
想写的34

20:18.260 --> 20:19.940
那么得到X的值也一样的

20:20.140 --> 20:21.260
X的值保存

20:22.380 --> 20:22.860
一

20:23.340 --> 20:23.940
没问题吧

20:24.540 --> 20:26.620
这是数组的下标

20:26.820 --> 20:28.020
这里有个面识体

20:28.180 --> 20:28.980
给大家看一下

20:28.980 --> 20:29.940
有道面识体

20:30.660 --> 20:31.860
这个面识体咋说的呢

20:31.860 --> 20:32.740
它这样子写的

20:34.380 --> 20:35.780
ARR是个数组

20:36.740 --> 20:37.340
它是个数组

20:37.340 --> 20:38.300
里边随便写一下

20:38.620 --> 20:39.140
随便写

20:42.420 --> 20:44.740
那么这个数组里边我这样子写

20:45.020 --> 20:47.300
AR0

20:47.860 --> 20:48.540
0

20:48.820 --> 20:50.340
等于10

20:51.460 --> 20:52.980
然后AR

20:54.180 --> 20:55.460
制服创20

20:55.700 --> 20:57.020
等于5

20:57.740 --> 20:59.140
最后输出

20:59.740 --> 21:01.500
AR0的值

21:01.900 --> 21:02.980
然后再输出

21:02.980 --> 21:04.780
AR制服创20的值

21:05.660 --> 21:08.100
它问你输出的结果是啥

21:09.060 --> 21:10.140
输出的结果是啥

21:10.140 --> 21:11.900
来你还告诉我输出的结果是啥

21:13.620 --> 21:14.220
兄弟

21:14.580 --> 21:15.820
有区别吗

21:16.260 --> 21:17.100
有区别吗

21:17.100 --> 21:17.580
这里

21:17.700 --> 21:19.020
你写这个0

21:19.260 --> 21:20.660
访问这个属性0

21:20.860 --> 21:23.460
和用访问一个制服创的属性0有区别吗

21:23.580 --> 21:24.620
是不是没有区别

21:24.620 --> 21:25.540
我们之前说过

21:25.580 --> 21:26.420
你写了个数字

21:26.420 --> 21:28.060
它会自动的转换成制服创

21:28.300 --> 21:30.500
最终你始终记住

21:30.700 --> 21:32.100
没有什么特别的

21:32.220 --> 21:33.980
就是一个普通的属性

21:34.100 --> 21:35.940
它的属性的名字叫做0

21:36.420 --> 21:37.740
你访问的是这个属性

21:38.020 --> 21:39.540
属性始终是制服创

21:39.540 --> 21:40.740
它不可能是什么

21:40.860 --> 21:42.220
不可能是什么数字的

21:42.220 --> 21:43.420
始终是制服创

21:43.580 --> 21:45.300
所以说你这个两个东西是不是一样的

21:45.300 --> 21:45.660
对吧

21:45.660 --> 21:46.420
一样的

21:46.580 --> 21:48.780
把这个属性的0改变成10

21:48.780 --> 21:50.380
那第一项是不是变成10了

21:51.060 --> 21:53.380
把这个属性0改变成5

21:53.380 --> 21:54.820
那第一项是不是又变成5了

21:54.940 --> 21:56.460
那随时输出两个第一项

21:56.460 --> 21:57.380
都是第一项

21:57.580 --> 21:59.220
得到的结果是一样的

21:59.220 --> 22:00.020
都是5

22:00.540 --> 22:02.220
然后再输出这个数组

22:02.220 --> 22:02.980
你看一下

22:03.180 --> 22:04.340
再输出这个数组

22:05.140 --> 22:06.060
保存看一下

22:06.260 --> 22:08.620
这个数组里面输出的第一项就变成了5了

22:08.620 --> 22:09.100
对吧

22:09.100 --> 22:09.900
变成了5了

22:09.900 --> 22:11.540
你改变了它这个属性的值

22:12.300 --> 22:13.500
没有什么特别的

22:13.500 --> 22:15.220
它就是普普通通的一个属性

22:15.380 --> 22:16.540
不要把它想太多了

22:16.540 --> 22:17.620
想得很复杂

22:18.060 --> 22:18.620
好吧

22:18.820 --> 22:19.940
这是这个

22:20.140 --> 22:20.900
当然你

22:20.900 --> 22:22.140
这个东西能不能这样子写

22:22.140 --> 22:23.620
有的人都看不懂这个呆

22:23.700 --> 22:26.060
这就是无非给了一个对象的属性负质呗

22:26.380 --> 22:27.820
给一个对象的属性负质

22:27.820 --> 22:29.820
因为输出里面我不能这样子写

22:29.980 --> 22:30.180
对吧

22:30.180 --> 22:31.380
这个不符合语法

22:31.380 --> 22:32.660
所以我只能这样子写

22:32.900 --> 22:34.820
看上去好像语法很特殊一样

22:34.820 --> 22:35.780
其实一点都不特殊

22:35.780 --> 22:37.420
我们之前都讲过的

22:37.540 --> 22:39.300
这是要属性的表达式

22:39.540 --> 22:41.140
属性表达式一点都不特殊

22:42.580 --> 22:44.180
那么我们想一想

22:44.340 --> 22:45.460
那既然它是一个对象

22:45.460 --> 22:47.140
我能不能往里面加属性

22:47.660 --> 22:48.820
能不能往里面加属性

22:48.820 --> 22:50.060
当然可以

22:50.060 --> 22:51.780
它不会就是个对象而已

22:51.780 --> 22:52.980
你怕它干嘛呢

22:53.380 --> 22:55.860
它里面加一个属性没abc

22:55.860 --> 22:57.140
随便加个属性

22:57.740 --> 22:58.660
好看一下

22:59.060 --> 23:00.180
保存看一下

23:01.260 --> 23:03.260
那它里面的属性是不是多了一个abc

23:03.260 --> 23:04.420
它无非一样的

23:04.420 --> 23:05.340
没有什么区别

23:05.340 --> 23:06.420
没有什么区别

23:07.340 --> 23:08.140
abc

23:08.580 --> 23:09.020
好

23:09.020 --> 23:09.940
那么这里边

23:11.060 --> 23:13.900
这里边我能不能加加索引了

23:14.500 --> 23:15.940
加这个下标呢

23:15.940 --> 23:16.780
当然可以

23:16.780 --> 23:18.020
它无非就是个属性嘛

23:18.020 --> 23:18.580
对吧

23:18.580 --> 23:20.100
它下标是0123

23:20.100 --> 23:20.340
对吧

23:20.340 --> 23:21.340
现在是0123

23:21.340 --> 23:22.820
我再给它加一个呗

23:23.100 --> 23:24.340
AR2-4

23:24.740 --> 23:26.180
因为我不能这样子写

23:26.180 --> 23:26.860
我不能这样子写

23:26.860 --> 23:27.220
对吧

23:27.220 --> 23:29.100
我只能用中货号加一个

23:29.100 --> 23:30.260
加一个

23:30.260 --> 23:30.820
随便写

23:30.820 --> 23:31.260
对吧

23:32.260 --> 23:33.580
保存

23:33.580 --> 23:34.740
你看一下

23:35.500 --> 23:36.420
加了一个下标了

23:36.420 --> 23:36.740
对吧

23:36.740 --> 23:37.940
就加了一个下标了

23:38.700 --> 23:39.860
你看会发

23:39.860 --> 23:42.500
你还会发现一个很特别的事

23:42.500 --> 23:44.420
这数组它比较特别的地方

23:44.860 --> 23:46.060
它能使会不会

23:46.060 --> 23:47.380
你看它会自动变化

23:47.380 --> 23:47.860
看到没

23:48.300 --> 23:50.220
它能使这个属性会自动变化

23:50.580 --> 23:51.980
一开始我们加之前

23:52.140 --> 23:53.140
加之前我们看一下

23:55.140 --> 23:56.500
我们把这些东西去掉吧

23:58.100 --> 23:59.340
加之前我们看一下

23:59.340 --> 24:00.460
Ns的指示3

24:00.460 --> 24:01.500
4对吧

24:01.500 --> 24:04.380
一共用4向4个长度为4

24:04.380 --> 24:05.220
有4个长度

24:05.980 --> 24:07.340
这个属性它就忽略了

24:07.340 --> 24:08.580
这个属性它忽略了

24:08.580 --> 24:09.900
它里面存了4个数据

24:09.900 --> 24:11.660
它用下标1,0,1,2,3

24:12.540 --> 24:13.300
来表示

24:13.300 --> 24:15.620
那么它认为数组里面存了4个数据

24:15.620 --> 24:17.540
这个数据它是不认的

24:17.540 --> 24:18.380
它只认数字

24:18.380 --> 24:19.340
只认数字

24:20.140 --> 24:21.740
那么它这里

24:21.980 --> 24:23.900
4个数据长度为4

24:23.900 --> 24:24.900
于是我们这里

24:24.900 --> 24:26.220
给它加了一个数据

24:26.740 --> 24:27.500
给它加了一个数据

24:27.500 --> 24:27.980
看到没

24:28.820 --> 24:29.580
R

24:30.420 --> 24:31.340
加了一个数据

24:31.980 --> 24:33.460
我们用这种方式来加的

24:33.460 --> 24:34.860
我们用这种方式来加的

24:34.860 --> 24:35.980
加了个数据过后

24:36.300 --> 24:37.940
你看长度它自动变成了5

24:39.180 --> 24:40.660
那如果我们再来试验一下

24:40.660 --> 24:43.020
我们要有那种试验精神

24:43.020 --> 24:43.700
就是有的时候

24:43.700 --> 24:45.500
我们做到都试验出一个点过后

24:45.500 --> 24:46.780
我们到多去试验一下

24:47.300 --> 24:47.500
好

24:47.540 --> 24:48.580
那么我们刚才加的

24:48.580 --> 24:49.460
还比较温柔

24:49.460 --> 24:49.900
对吧

24:49.900 --> 24:51.220
一开始是0,1,2,3

24:51.220 --> 24:52.140
它自动排列的

24:52.460 --> 24:52.660
好

24:52.660 --> 24:53.540
我们现在这样子

24:54.540 --> 24:55.260
咱们这样子

24:55.740 --> 25:00.500
我把这个属性的名字

25:00.500 --> 25:02.340
给它变成40

25:03.380 --> 25:05.220
而不是40

25:05.220 --> 25:05.940
我算了

25:06.460 --> 25:08.580
我换一个数字吧

25:08.580 --> 25:09.220
50

25:09.220 --> 25:11.180
因为我普通话实在说不出来

25:11.180 --> 25:12.260
是4和10

25:14.020 --> 25:14.260
好

25:14.260 --> 25:14.700
50

25:14.700 --> 25:15.420
50

25:15.420 --> 25:16.820
保存看一下

25:17.740 --> 25:18.340
看一下

25:19.020 --> 25:19.980
它告诉我

25:20.860 --> 25:22.380
它告诉我这个地方

25:22.980 --> 25:24.580
长度为51

25:25.700 --> 25:27.140
数据里面存了几项

25:27.140 --> 25:28.220
存了1

25:28.220 --> 25:28.740
2

25:28.740 --> 25:29.180
3

25:29.180 --> 25:29.860
4

25:29.860 --> 25:30.620
5

25:30.620 --> 25:31.460
存了5项

25:31.460 --> 25:31.860
对吧

25:31.860 --> 25:33.300
它告诉我长度为51

25:33.300 --> 25:33.980
这个不换

25:33.980 --> 25:34.620
这个不看

25:35.260 --> 25:36.620
它告诉我长度为51

25:36.620 --> 25:37.460
说明了啥

25:38.260 --> 25:39.580
数据的长度

25:40.580 --> 25:43.140
值为会自动变化

25:43.660 --> 25:44.620
会自动变化

25:46.060 --> 25:47.140
值为什么呢

25:47.260 --> 25:50.340
值为最大下标加1

25:51.420 --> 25:52.820
数据的认识属性

25:52.820 --> 25:55.940
这个长度值为最大下标加1

25:56.580 --> 25:56.900
你看

25:57.900 --> 25:59.660
它为最大的下标加上1

25:59.660 --> 26:01.180
那中间这一份是不是空着了

26:01.180 --> 26:01.740
这个数据

26:01.740 --> 26:03.340
它没有连续编号

26:03.340 --> 26:04.340
编号不连续

26:04.780 --> 26:06.260
你看它在显示上

26:07.340 --> 26:08.340
你打印这个数据的时候

26:08.340 --> 26:09.300
它会告诉你

26:10.140 --> 26:11.300
前面有四项

26:11.300 --> 26:13.580
中间空了46项

26:14.740 --> 26:15.820
空了46项

26:15.860 --> 26:17.660
其实啥叫空了46项

26:18.660 --> 26:21.300
它就是没有这些数项

26:21.300 --> 26:22.060
没有4

26:22.060 --> 26:22.500
没有5

26:22.500 --> 26:22.940
没有6

26:22.940 --> 26:23.540
没有7

26:24.140 --> 26:25.900
没有这些数字的属性而已

26:25.900 --> 26:27.660
所以说它就认为是空了46项

26:28.500 --> 26:30.220
然后最后一项是这个

26:30.220 --> 26:31.300
最后一项是这个

26:32.020 --> 26:33.340
没有什么特别的

26:33.340 --> 26:33.820
不用怕

26:33.820 --> 26:36.340
你看上面前面显示的是数据的长度51

26:37.380 --> 26:39.100
那既然长度是个数项

26:39.100 --> 26:40.740
那长度能不能复制呢

26:41.340 --> 26:42.900
长度能不能复制呢

26:42.900 --> 26:44.380
当然可以

26:44.580 --> 26:45.540
把这个ABC去了

26:45.540 --> 26:47.100
长度能不能复制

26:47.100 --> 26:50.340
ARNANCE等于5

26:50.340 --> 26:51.140
可不可以呢

26:51.140 --> 26:53.140
当然可以保存看一下

26:54.780 --> 26:57.540
长度为5

26:57.540 --> 27:00.220
但是那你给长度复制的时候

27:00.220 --> 27:02.060
你会发现它的属性变化了

27:02.860 --> 27:04.140
属性变化了

27:04.140 --> 27:06.140
长度离它复制的时候

27:06.140 --> 27:08.580
如果本来它是这样子

27:08.580 --> 27:09.300
本来是这样子

27:09.300 --> 27:10.340
你想象这个道理

27:12.100 --> 27:13.980
下标的取值范围

27:14.060 --> 27:15.500
如果是连续的

27:15.500 --> 27:19.540
连续下标的取值范围是多少

27:20.820 --> 27:22.780
连续下标的取值范围

27:22.780 --> 27:25.500
是不是从0开始到多少

27:25.500 --> 27:27.060
到长度减1

27:27.060 --> 27:27.540
对吧

27:27.540 --> 27:28.700
长度减1

27:28.700 --> 27:30.500
比方说它是从0开始

27:30.500 --> 27:31.580
012

27:32.580 --> 27:34.140
这样的数组长度为减

27:34.140 --> 27:35.620
长度为3吗

27:35.620 --> 27:37.380
下标的范围是012

27:38.180 --> 27:39.780
0123

27:39.780 --> 27:40.500
长度为减

27:40.500 --> 27:41.900
长度为4

27:41.900 --> 27:43.540
下标的范围是0到3

27:43.580 --> 27:45.540
那是不是0到长度减1

27:45.940 --> 27:46.540
对吧

27:46.540 --> 27:48.500
连续下标的取值范围

27:48.500 --> 27:48.900
注意

27:48.900 --> 27:51.180
我用的是连续下标的取值范围

27:51.180 --> 27:53.540
等于0到长度减1

27:53.540 --> 27:54.700
如果你给

27:56.500 --> 28:01.700
如果给NESS直接复制

28:02.540 --> 28:07.580
会导致数组可能被截断

28:07.580 --> 28:08.820
被截断

28:08.820 --> 28:10.220
就像刚才这个场景一样

28:11.420 --> 28:12.660
就像刚才这个场景一样

28:12.700 --> 28:14.540
本来我的数据是啥

28:14.540 --> 28:16.100
本来我的数据是这样子的

28:16.100 --> 28:17.420
第一个数据0

28:17.420 --> 28:18.380
045

28:18.380 --> 28:20.020
第二个属性是6

28:20.020 --> 28:22.060
第三个属性是23

28:24.060 --> 28:25.700
第四个属性是4

28:25.700 --> 28:27.060
然后

28:27.780 --> 28:28.540
这边

28:28.540 --> 28:30.980
然后第50个属性为50

28:30.980 --> 28:34.060
属性为50的时候是多少了

28:34.060 --> 28:35.340
是这个东西

28:35.340 --> 28:36.140
一个字幕串

28:36.140 --> 28:36.980
一个字幕串

28:37.380 --> 28:37.620
好

28:37.620 --> 28:39.580
那么本来的长度也多少了

28:39.580 --> 28:41.020
长度等于最大下标加1

28:41.020 --> 28:41.460
对吧

28:41.580 --> 28:42.940
长度本来是51

28:42.940 --> 28:44.500
本来是51的

28:44.500 --> 28:48.540
但是现在我把长度强行给它复制为了5

28:49.620 --> 28:51.580
强行给它复制为了5

28:51.580 --> 28:53.020
那么它会怎么认为

28:53.020 --> 28:54.780
它是这样子认为

28:54.780 --> 28:57.180
我数组里边保留五项

28:57.180 --> 28:58.500
保留五项

28:58.500 --> 28:59.420
第一项是5

28:59.420 --> 29:00.700
保留第二项是6

29:00.700 --> 29:02.220
第三项没问题

29:02.220 --> 29:03.540
第四项没问题

29:03.540 --> 29:07.060
第五项它认为是一个空的

29:07.060 --> 29:08.740
第五项的编号为4

29:08.740 --> 29:10.140
它认为是空的

29:10.180 --> 29:12.140
所以说它就没东西

29:12.140 --> 29:13.060
第五项就没东西

29:13.060 --> 29:14.580
第五项是空的

29:14.580 --> 29:17.060
因此它把剩下的东西全部给你截端了

29:17.060 --> 29:18.220
不要了

29:18.220 --> 29:20.140
强大于把这些属性删除了

29:20.140 --> 29:21.140
它是这么来处理的

29:22.260 --> 29:24.860
所以说我们在开发的时候

29:24.860 --> 29:26.260
大家注意

29:26.260 --> 29:29.740
实际开发中

29:29.740 --> 29:34.260
不要给NAS复制

29:34.260 --> 29:35.420
不要给NAS复制

29:35.420 --> 29:37.380
这个NAS你让它保持自动

29:37.380 --> 29:38.660
它会自动增长

29:38.700 --> 29:40.260
你给它加数据它会增加

29:40.260 --> 29:43.140
以后我们还会学习三数据

29:43.140 --> 29:45.100
三数据它会自动减少

29:45.100 --> 29:46.540
三数据会自动减少

29:47.340 --> 29:48.180
没问题吧

29:48.180 --> 29:49.060
实际开发里边

29:49.060 --> 29:50.460
你不要去给它化手天主

29:50.460 --> 29:51.500
给它复制

29:51.500 --> 29:52.700
不要给它复制

29:52.700 --> 29:55.540
那么给NAS复制会导致很多怪异的现象发生

29:57.540 --> 29:59.780
只不过有的时候面试体它可能会问到

29:59.780 --> 30:02.260
如果我给NAS复制的会怎么样

30:02.260 --> 30:03.020
它会怎么样

30:03.020 --> 30:04.500
那么它会按照这个

30:04.500 --> 30:06.500
它会按照火车的排列来排列

30:07.060 --> 30:08.620
一个数组里边

30:08.620 --> 30:10.860
一个复制为什么

30:10.860 --> 30:11.700
复制为5

30:11.700 --> 30:18.220
那么火车它只保留0,1,2,3,4

30:18.220 --> 30:20.740
编号为0到4的车厢保留

30:20.740 --> 30:22.620
当然编号为4不存在

30:22.620 --> 30:23.020
对吧

30:23.020 --> 30:24.980
我们这里的编号为4不存在

30:24.980 --> 30:26.860
就是属性名为4不存在

30:26.860 --> 30:28.700
那么它就视野不要了

30:28.700 --> 30:29.460
视野不要了

30:29.460 --> 30:30.060
视野没有

30:30.060 --> 30:30.620
本来就没有

30:30.620 --> 30:31.340
对吧

30:31.340 --> 30:32.820
其他的都全部去掉

30:32.820 --> 30:34.340
其他的全部去掉

30:34.340 --> 30:35.780
我再举个例子

30:35.820 --> 30:37.900
就是有可能面试的时候会考

30:37.900 --> 30:38.940
比方说这个数组

30:38.940 --> 30:39.820
一个简单的例子

30:39.820 --> 30:40.780
它可能会这样考虑

30:45.700 --> 30:47.700
可能会这样子考虑

30:47.700 --> 30:48.780
这样子写得过后来

30:48.780 --> 30:52.580
我们强行的把NAS变成2

30:52.580 --> 30:54.180
输出这个数组

30:54.180 --> 30:55.700
会输出啥了

30:55.700 --> 30:56.740
告诉我

30:56.740 --> 30:57.660
会输出啥

30:58.860 --> 30:59.620
输出啥

30:59.620 --> 31:01.020
输出3和6

31:01.020 --> 31:01.300
对吧

31:01.300 --> 31:02.180
3和6

31:02.180 --> 31:04.500
这个数组里边是不是两个下标了

31:04.500 --> 31:07.620
只要0和1两个下标

31:07.620 --> 31:08.740
看一下

31:08.740 --> 31:10.220
只有0和1两个下标

31:10.220 --> 31:11.180
这就是NAS

31:11.180 --> 31:12.220
就是NAS

31:12.220 --> 31:12.540
好

31:12.540 --> 31:14.020
那如果这个数组里边

31:14.020 --> 31:15.860
还有其他属性的ABC

31:15.860 --> 31:16.940
我随便写个其他属性

31:16.940 --> 31:18.420
当然我们不太会这样子写

31:18.420 --> 31:19.380
这个莫名其妙嘛

31:19.380 --> 31:20.820
这是

31:20.820 --> 31:22.500
看一下这个其他属性

31:22.500 --> 31:23.740
其他属性会保留

31:23.740 --> 31:25.460
非数字的属性会保留

31:25.460 --> 31:27.620
数字的属性它会被截断

31:27.620 --> 31:28.340
会被截断

31:29.700 --> 31:29.900
好

31:29.900 --> 31:32.300
那如果我给它复制一个很大的值

31:32.300 --> 31:34.300
比方说给它复制200

31:34.300 --> 31:35.860
NAS给它复制为200

31:35.860 --> 31:37.180
那又会怎么样呢

31:37.180 --> 31:38.740
保存咱们看一下

31:38.740 --> 31:40.260
NAS复制为200

31:40.260 --> 31:41.300
它不会出现

31:41.300 --> 31:42.460
就是如果多了

31:42.460 --> 31:44.300
NAS值多了

31:44.300 --> 31:46.500
它不会出现任何变化

31:46.500 --> 31:47.540
不会出现任何变化

31:47.540 --> 31:48.700
多的多了

31:48.700 --> 31:50.060
它认为后边的东西

31:50.060 --> 31:51.180
后边的东西都是空的

31:51.180 --> 31:52.460
没有这些属性

31:52.460 --> 31:54.740
它也不可能自动给你召出这些属性

31:54.740 --> 31:57.340
所以说不要给NAS复制

31:57.340 --> 31:58.660
给NAS复制就很怪异

31:58.660 --> 31:59.900
就很怪异

31:59.900 --> 32:01.420
NAS只能让它保持自动

32:01.420 --> 32:02.100
保持自动

32:02.100 --> 32:03.220
比方说我们后边

32:03.260 --> 32:04.740
再给数组加一项

32:04.740 --> 32:05.780
加一项数据

32:05.780 --> 32:06.580
这是几呢

32:06.580 --> 32:08.980
0123456

32:08.980 --> 32:09.580
对吧

32:09.580 --> 32:11.580
0123456

32:11.580 --> 32:12.220
6项

32:12.220 --> 32:13.820
然后呢

32:13.820 --> 32:16.220
我们这里下标为7

32:16.220 --> 32:17.300
下标为7

32:17.300 --> 32:18.060
给它加个数项

32:20.580 --> 32:21.980
你看加了属性过后

32:21.980 --> 32:22.900
加了属性过后

32:22.900 --> 32:24.140
那么多了一项了

32:24.140 --> 32:24.660
但是呢

32:24.660 --> 32:25.700
由于NAS

32:25.700 --> 32:27.460
现在就没法自动变化了

32:27.460 --> 32:29.620
之前是跟下标是齐平的

32:29.620 --> 32:31.020
现在它超过这个下标

32:31.020 --> 32:32.300
它就没法自动变化了

32:32.340 --> 32:33.380
总之这一块呢

32:33.380 --> 32:34.940
它会有很多这

32:34.940 --> 32:36.100
就是怪异的现象

32:36.100 --> 32:37.100
大家平时呢

32:37.100 --> 32:38.180
写代码的时候

32:38.180 --> 32:39.700
不要给NAS复制

32:39.700 --> 32:40.820
不要化舍天主

32:40.820 --> 32:41.260
NAS呢

32:41.260 --> 32:42.340
我们认为啊

32:42.340 --> 32:43.380
可以心里边认为

32:43.380 --> 32:44.460
它是指读的

32:44.460 --> 32:45.700
你只能把它读出来

32:45.700 --> 32:47.020
你不要给它复制

32:47.020 --> 32:48.260
让它保持自动

32:48.260 --> 32:49.260
让它保持自动

32:49.260 --> 32:49.940
这是很好的

32:51.220 --> 32:52.460
比方说这里不复制

32:52.460 --> 32:53.380
不复制的话

32:53.380 --> 32:54.620
它就是自动的了

32:54.620 --> 32:55.380
自动的

32:55.380 --> 32:56.820
它跟随着你的

32:56.820 --> 32:57.940
就是数据的变化

32:57.940 --> 32:59.580
而跟着变化

32:59.580 --> 32:59.700
好

32:59.700 --> 33:00.700
这是关于

33:00.700 --> 33:01.700
数据里边这些属性

33:01.700 --> 33:03.060
它一共就这么些属性

33:03.060 --> 33:03.380
对吧

33:03.380 --> 33:04.140
一个是下标

33:04.140 --> 33:04.860
一个是NAS

33:04.860 --> 33:05.540
没啥了

33:05.540 --> 33:06.540
数据里面就没啥了

33:06.540 --> 33:07.420
就这么一些属性

33:08.300 --> 33:10.740
这是关于数据里边这些属性

33:12.340 --> 33:13.260
那么这里呢

33:13.260 --> 33:14.500
也会告诉我们

33:15.540 --> 33:17.740
数据里边其实没有什么特殊的

33:17.740 --> 33:19.300
通常情况下了

33:19.300 --> 33:19.940
我们来说一下

33:19.940 --> 33:21.140
是数据的下标问题

33:22.020 --> 33:23.660
通常情况下了

33:23.660 --> 33:24.860
通常情况下

33:25.460 --> 33:27.860
下标是连续的

33:28.340 --> 33:29.420
是连续的

33:30.380 --> 33:31.420
从0开始

33:31.420 --> 33:31.660
对吧

33:31.660 --> 33:34.460
一直变化到长度减1

33:34.460 --> 33:35.180
通常情况下

33:35.180 --> 33:36.540
下标是连续的

33:36.540 --> 33:37.620
咱们举个例子

33:38.620 --> 33:40.540
就是你给一个数组复制的时候

33:42.060 --> 33:43.660
你给一个数组复制的时候

33:43.660 --> 33:44.460
随便咋写

33:44.460 --> 33:45.300
随便咋写

33:46.380 --> 33:47.220
这些数据呢

33:47.220 --> 33:48.020
你无所谓

33:48.020 --> 33:49.180
数据保存的是啥

33:49.180 --> 33:50.380
无所谓

33:50.380 --> 33:51.700
但这个数据的下标

33:51.700 --> 33:52.820
也就是它的属性

33:52.820 --> 33:54.580
它会自动给你生成这些属性

33:55.500 --> 33:57.340
它的属性是连续的

33:57.340 --> 33:58.140
看一下

33:58.860 --> 34:01.140
你看012345对吧

34:01.140 --> 34:02.380
这个属性的名字是不连续的

34:02.380 --> 34:03.100
这是不是下标

34:04.300 --> 34:05.020
这个属性的

34:05.540 --> 34:07.660
这个属性的指是连续的

34:07.660 --> 34:10.780
但是有没有可能将来不连续呢

34:10.780 --> 34:11.420
有可能

34:12.260 --> 34:13.420
什么情况下可能了

34:13.420 --> 34:14.940
那就情况太多了

34:14.940 --> 34:16.140
比方说我们这样子写

34:16.900 --> 34:17.500
这样子写

34:19.940 --> 34:21.940
比方说使下标为使

34:21.940 --> 34:22.940
给它复制一个制服串

34:23.700 --> 34:25.380
你看这样子下标是不不连续的

34:26.900 --> 34:27.940
下标是不不连续的

34:28.420 --> 34:29.340
012345

34:29.340 --> 34:30.420
中间是不是断了

34:30.420 --> 34:31.220
对吧

34:31.220 --> 34:32.420
下标就不连续了

34:32.420 --> 34:33.580
下标就不连续了

34:34.300 --> 34:35.580
有可能了

34:35.580 --> 34:36.740
我们还可能会这样子写

34:36.740 --> 34:37.980
也会导致下标不连续

34:37.980 --> 34:38.260
看着

34:41.020 --> 34:42.540
这里面的我们这样子写

34:43.860 --> 34:45.700
斗号

34:48.140 --> 34:48.500
3

34:49.340 --> 34:50.060
这是啥意思

34:50.580 --> 34:51.260
告诉我啥意思

34:52.140 --> 34:52.980
这是啥意思呢

34:52.980 --> 34:54.060
它表示的是

34:54.060 --> 34:55.820
数据的第一项啥都没有

34:56.780 --> 34:57.860
就是不是啥都没有

34:57.860 --> 34:58.740
不是on the final

34:58.740 --> 34:59.660
它不是on the final

34:59.660 --> 35:00.900
那还是两骂事

35:00.900 --> 35:02.380
还是两骂事

35:02.380 --> 35:04.220
啥都没有就是不生成

35:04.220 --> 35:05.060
第一项

35:05.060 --> 35:06.140
下标为1不存在

35:06.140 --> 35:07.260
下标为0不存在

35:07.260 --> 35:08.780
下标为2不存在

35:08.780 --> 35:10.660
只有一个下标为3的

35:10.660 --> 35:11.420
你看这一项

35:11.420 --> 35:13.020
看这个光标

35:13.020 --> 35:14.740
这是下标为0的这一项

35:14.740 --> 35:15.700
下标为1

35:15.700 --> 35:16.740
下标为2

35:16.740 --> 35:17.980
下标为3

35:17.980 --> 35:18.420
对吧

35:18.420 --> 35:20.220
下标为3的时候来存在

35:20.220 --> 35:21.540
3我就写个制服串吧

35:22.740 --> 35:24.420
下标为3的时候存在

35:24.420 --> 35:25.580
下标为012

35:25.660 --> 35:27.580
下标012是不存在的

35:27.580 --> 35:29.020
不存在的保存看一下

35:30.020 --> 35:31.620
得到结果你看

35:31.620 --> 35:32.780
它只有一个锁印3

35:32.780 --> 35:34.580
你看是不是也是不连续的

35:34.580 --> 35:36.380
你这样子写的话也是不连续的

35:36.380 --> 35:37.900
你看0

35:37.900 --> 35:40.540
本来是0123的012没了

35:40.540 --> 35:41.180
没了

35:41.180 --> 35:42.740
它只有一个下标为3

35:42.740 --> 35:43.780
它也是不连续的

35:44.620 --> 35:47.020
这种写法跟这种写法两骂事

35:47.540 --> 35:48.780
跟这种写法两骂事

35:50.660 --> 35:51.980
这种写法

35:51.980 --> 35:53.020
on the final是未定义

35:53.020 --> 35:53.300
对吧

35:53.300 --> 35:54.580
未定义

35:54.620 --> 35:56.820
那么给我们来看一下这种写法

35:56.820 --> 35:58.940
前面三项是on the final

35:58.940 --> 36:00.700
有的时候面试你还会问你

36:00.700 --> 36:02.460
输入里面你这种写法跟on the final

36:02.460 --> 36:03.100
有啥区别

36:03.100 --> 36:04.020
你看一下保存

36:05.460 --> 36:06.940
这种写法有没有这些属性

36:06.940 --> 36:07.940
属性存不存在

36:07.940 --> 36:08.980
属性是存在的

36:08.980 --> 36:11.060
要你看012的看

36:11.060 --> 36:12.620
这些属性都是存在的

36:12.620 --> 36:14.620
只差的值是on the final

36:15.620 --> 36:16.700
明白这意思吧

36:16.700 --> 36:18.620
只差的值是on the final

36:18.620 --> 36:20.780
那你如果是没有写这些on the final

36:21.700 --> 36:22.700
它连属性都没有

36:22.700 --> 36:23.540
你看

36:23.580 --> 36:25.020
它连属性都没有

36:25.020 --> 36:26.260
它这里显示的时候

36:26.260 --> 36:27.500
它用amity来表示

36:27.500 --> 36:28.980
amity乘以3

36:29.700 --> 36:30.660
啥都没有

36:31.260 --> 36:33.380
那么我们这里的一个专门的教法

36:33.380 --> 36:34.580
一个专门的教法

36:34.940 --> 36:36.140
下标

36:37.020 --> 36:38.340
不连续的

36:39.340 --> 36:40.660
不连续的

36:40.660 --> 36:41.540
宿主

36:41.980 --> 36:43.860
叫做西松宿主

36:44.580 --> 36:45.940
没有什么特别的

36:45.940 --> 36:46.740
别看到西松宿主

36:46.740 --> 36:47.020
哇

36:47.020 --> 36:48.660
是不是又有很多很多特征

36:48.660 --> 36:49.860
有啥特征吗

36:50.220 --> 36:51.020
有啥特征

36:51.020 --> 36:52.420
没有啥特征

36:52.540 --> 36:53.860
就是一种教法

36:53.860 --> 36:54.900
你也始终记住

36:54.900 --> 36:56.620
宿主的本质就是对象

36:56.620 --> 36:57.980
本质就是对象

36:58.260 --> 36:59.780
那么西松宿主是什么东西

36:59.780 --> 37:00.940
西松宿主指的是

37:00.940 --> 37:02.460
它的属性的名字

37:02.460 --> 37:03.100
就是属性

37:03.100 --> 37:04.140
它不是有下标吗

37:04.140 --> 37:05.340
这个下标不连续

37:05.340 --> 37:06.860
有些属性缺失了

37:06.860 --> 37:07.940
这就是西松宿主

37:07.940 --> 37:08.980
它其实没啥

37:08.980 --> 37:09.780
没啥

37:09.780 --> 37:11.300
你看这个宿主是西松宿主

37:11.300 --> 37:11.740
诶

37:13.180 --> 37:13.980
这里

37:14.980 --> 37:15.940
把这个关闭

37:16.460 --> 37:18.140
你看上面这个是不是西松宿主

37:18.500 --> 37:19.300
上面这个

37:19.620 --> 37:21.020
上面这个肯定是西松宿主

37:21.100 --> 37:23.260
它下标出了问题不连续了

37:23.260 --> 37:23.540
对吧

37:23.540 --> 37:24.620
下标不连续了

37:24.620 --> 37:25.620
你看这个玩意

37:25.620 --> 37:26.780
它是不是西松宿主

37:26.780 --> 37:28.140
肯定是西松宿主

37:28.140 --> 37:29.860
肯定是西松宿主

37:30.220 --> 37:31.620
这就是个西松宿主

37:32.060 --> 37:32.300
好

37:32.300 --> 37:33.060
再来

37:33.060 --> 37:34.700
比方说刚才这个

37:34.700 --> 37:35.460
刚才这个

37:35.460 --> 37:36.700
刚才这个还有很多梦邪法

37:36.700 --> 37:36.900
对吧

37:36.900 --> 37:37.980
还有很多梦邪法

37:37.980 --> 37:39.100
比方说

37:39.420 --> 37:40.340
比方说

37:40.340 --> 37:42.140
我们这里这样子写

37:43.060 --> 37:43.860
这样子写

37:43.860 --> 37:45.500
这样子写生成几项了

37:45.500 --> 37:48.260
大家可能会认为生成一二三四项

37:48.260 --> 37:48.620
对吧

37:48.620 --> 37:49.340
生成四项

37:49.340 --> 37:49.980
不对

37:50.020 --> 37:51.460
这个实际上是生成三项

37:51.460 --> 37:52.980
它最后一个斗号会忽略

37:52.980 --> 37:55.100
最后最后一个斗号会忽略

37:55.100 --> 37:56.860
因为在宿主的语法里边

37:56.860 --> 37:57.820
宿主的语法里边

37:57.820 --> 37:59.100
它是允许里这样子写的

37:59.100 --> 37:59.900
你看着

37:59.900 --> 38:00.820
三

38:00.820 --> 38:01.500
四

38:01.500 --> 38:04.020
它最后一个是允许里写斗号的

38:04.020 --> 38:06.060
因为它保证格式的统一

38:06.060 --> 38:06.620
对吧

38:06.620 --> 38:07.580
每个元素

38:07.580 --> 38:09.580
每个宿主的每一项后边

38:09.580 --> 38:11.180
有的时候我们把宿主的每一项了

38:11.180 --> 38:11.980
叫做元素

38:11.980 --> 38:13.340
宿主的每个元素

38:13.340 --> 38:15.260
宿主的每一项后边的

38:15.260 --> 38:16.940
每个元素后边的加个斗号

38:16.940 --> 38:17.780
它为了对齐

38:17.780 --> 38:18.460
对齐

38:18.580 --> 38:21.620
它允许里在最后一项后边再加个斗号

38:21.620 --> 38:23.420
不是说最后一项后边还有东西

38:23.420 --> 38:25.700
只是它允许的写法上这样子

38:25.700 --> 38:27.620
看上去格式统一一点

38:27.620 --> 38:30.020
格式统一一点就这么个区别

38:30.020 --> 38:31.380
所以说最后的斗号

38:31.380 --> 38:34.900
你如果这样子写的话

38:34.900 --> 38:37.100
它会把最后的斗号忽略掉

38:37.100 --> 38:38.700
就像刚才这样子也一样

38:38.700 --> 38:41.220
它会把最后一个斗号忽略掉

38:41.220 --> 38:43.340
所以这样子生成几个数捉几项

38:43.340 --> 38:44.300
有几项

38:44.300 --> 38:45.260
是不是有

38:45.260 --> 38:45.820
一

38:45.820 --> 38:46.180
二

38:46.180 --> 38:46.780
三项

38:46.780 --> 38:47.300
对吧

38:47.300 --> 38:48.220
三项

38:48.260 --> 38:50.260
那我现在又没给他写任何东西

38:50.260 --> 38:51.900
就得到一个吸冲数捉

38:51.900 --> 38:52.940
保存看一下

38:54.260 --> 38:55.260
长度为三

38:55.260 --> 38:55.540
对吧

38:55.540 --> 38:56.500
长度没问题

38:56.500 --> 38:57.420
长度为三

38:57.420 --> 38:58.700
但它的下标是没了

38:58.700 --> 39:00.860
它的对应的属性是没有的

39:00.860 --> 39:02.460
对应的属性是没有的

39:02.460 --> 39:03.700
这就是个吸冲数捉

39:03.700 --> 39:06.060
吸冲数捉我们平时也很少用到

39:06.060 --> 39:07.620
我之所以讲这些东西

39:07.620 --> 39:09.460
是为了应付面试

39:09.460 --> 39:10.900
我们平时用的是啥呢

39:10.900 --> 39:12.980
我告诉大家平时用我们用的是啥

39:12.980 --> 39:14.940
平时我们用的数捉就是这样子写

39:14.940 --> 39:16.020
一个数捉

39:16.020 --> 39:16.940
里面有哪些东西

39:17.020 --> 39:17.660
写上

39:17.660 --> 39:18.220
写上

39:19.380 --> 39:20.180
有哪些东西

39:21.180 --> 39:21.860
然后

39:22.580 --> 39:23.140
然后

39:24.380 --> 39:25.260
输出这个数捉

39:25.940 --> 39:27.420
然后输出这个数捉的长度

39:27.700 --> 39:29.340
不会去动它的长度

39:29.340 --> 39:31.180
也不会去给它遭什么

39:31.180 --> 39:32.980
遭什么吸冲数捉

39:32.980 --> 39:34.060
都不会这样处理

39:34.060 --> 39:35.020
都不会这样做

39:35.940 --> 39:36.740
不会这样做的

39:37.300 --> 39:37.820
你看

39:38.020 --> 39:38.980
这是一个正常的数捉

39:38.980 --> 39:39.300
对吧

39:39.300 --> 39:41.220
我们平时用的就是正常的数捉

39:41.220 --> 39:43.020
不会去做什么摇儿式出来

39:43.020 --> 39:45.380
只是面试体的时候有可能会问到

39:45.380 --> 39:45.940
没关系

39:45.980 --> 39:48.140
以后你要准备面试的时候

39:48.140 --> 39:49.860
你会问我来看一下数捉这个章节

39:49.860 --> 39:51.060
看一下这一块

39:52.380 --> 39:52.580
好

39:52.580 --> 39:54.140
那么刚才说到吸冲数捉

39:54.140 --> 39:56.140
吸冲数捉其实里面还有一种办法

39:56.140 --> 39:57.340
可以做吸冲数捉

39:57.820 --> 39:58.700
还有一种办法

39:59.020 --> 39:59.700
什么办法

39:59.700 --> 40:00.500
arr

40:01.100 --> 40:02.340
你有一个儿瑞

40:03.420 --> 40:04.420
给他写一个数字

40:04.780 --> 40:05.820
给他写一个数字

40:07.580 --> 40:08.260
比方说一百

40:08.700 --> 40:09.180
一百

40:10.180 --> 40:11.500
看一下这个数捉

40:11.500 --> 40:12.220
注意啊

40:12.220 --> 40:13.060
这个写法

40:13.060 --> 40:13.940
它指的是什么

40:13.940 --> 40:15.380
数捉的长度为一百

40:16.500 --> 40:17.980
你写一个数字的时候

40:17.980 --> 40:18.940
它指的是长度

40:18.940 --> 40:20.260
它不是数捉只有一项

40:20.260 --> 40:21.380
第一项就是一百

40:21.380 --> 40:22.340
它不是这个意思啊

40:23.220 --> 40:25.180
如果你只写一个东西

40:25.180 --> 40:26.580
里边只写一个东西的话

40:27.300 --> 40:28.100
那么表示的是

40:28.100 --> 40:30.340
意思是这个数捉的长度为一百

40:30.340 --> 40:31.860
数捉的长度为一百

40:31.860 --> 40:32.180
好

40:32.180 --> 40:32.660
看一下

40:33.180 --> 40:35.020
如果你写两个的话就不一样了

40:35.020 --> 40:35.780
你写两个的话

40:35.780 --> 40:37.620
表示这个数捉的长度为二

40:37.620 --> 40:38.620
第一项是一百

40:38.620 --> 40:39.900
第二项是二十二

40:40.500 --> 40:41.500
就这么个意思的

40:41.500 --> 40:42.860
但是如果你只写一个的话

40:42.860 --> 40:44.420
他认为你给的是长度

40:44.420 --> 40:45.580
长度为一百

40:45.820 --> 40:46.780
保存看一下

40:48.380 --> 40:48.900
你看

40:48.900 --> 40:50.060
是不是个吸冲数捉

40:51.060 --> 40:52.020
长度为一百

40:52.020 --> 40:53.540
它的下标本来是

40:53.540 --> 40:55.220
本来的下标的范围是多少

40:55.220 --> 40:56.300
是0到99

40:56.300 --> 40:56.820
对吧

40:56.820 --> 40:58.660
下标的本来的范围是0到99

40:58.660 --> 40:59.300
但是呢

40:59.700 --> 41:00.700
有没有0到99

41:00.700 --> 41:01.300
没有

41:01.620 --> 41:02.940
所以说它是个吸冲数捉

41:03.260 --> 41:04.700
那么这里可以显示的

41:04.700 --> 41:06.060
其实我们在谷歌流量器里边

41:06.060 --> 41:07.340
可以看得很清楚

41:07.340 --> 41:08.540
它在显示数捉的时候

41:08.540 --> 41:09.660
给你写了个MT

41:10.420 --> 41:11.220
倒是空的

41:11.220 --> 41:12.020
空的

41:12.020 --> 41:13.620
那么表示个数捉里边有

41:13.860 --> 41:14.940
有缺失的箱

41:14.980 --> 41:15.740
有些箱

41:15.740 --> 41:17.100
有些属性是缺失的

41:17.100 --> 41:18.380
那么这是个吸冲数捉

41:18.820 --> 41:19.780
吸冲数捉

41:20.220 --> 41:21.180
吸冲数捉以后

41:21.180 --> 41:23.900
我们再进行某些数捉便利的时候

41:23.900 --> 41:24.580
得不到东西

41:24.580 --> 41:25.380
我们以后再说

41:25.380 --> 41:26.180
以后再说

41:27.100 --> 41:28.060
没啥特别的

41:28.380 --> 41:29.700
不要认为它有多特别

41:29.700 --> 41:30.540
没啥特别的

41:31.380 --> 41:32.500
这就是

41:33.220 --> 41:34.140
数捉的

41:34.740 --> 41:36.140
就是吸冲数捉

41:36.340 --> 41:37.340
关于数捉的下标

41:38.380 --> 41:39.260
我想想

41:39.540 --> 41:41.540
还有什么值得注意一点的

41:42.540 --> 41:43.740
然后再说这个

41:45.420 --> 41:46.460
数捉的

41:47.220 --> 41:49.340
数捉的常见操作

41:49.940 --> 41:50.940
常见操作

41:52.260 --> 41:53.420
有哪些常见操作

41:53.980 --> 41:54.700
一个个说

41:54.940 --> 41:55.580
这里比较多

41:55.580 --> 41:56.340
比较多

41:56.940 --> 41:57.700
一个说

41:57.700 --> 41:58.900
第一个操作是

41:59.460 --> 42:03.540
给添加数捉箱

42:05.060 --> 42:06.260
添加数捉箱

42:06.580 --> 42:08.260
有哪些办法可以添加

42:08.260 --> 42:09.700
往数捉里边加东西呢

42:09.940 --> 42:11.620
当然我们刚才写了过后

42:11.780 --> 42:12.460
我们知道

42:12.460 --> 42:13.500
我加东西很简单

42:13.580 --> 42:15.060
给他给他给他给他个下标

42:15.060 --> 42:15.420
对吧

42:15.420 --> 42:16.420
给他一个下标

42:18.460 --> 42:19.260
这是第一项

42:19.460 --> 42:20.300
下标为0

42:20.300 --> 42:20.780
1

42:20.780 --> 42:21.300
2

42:21.300 --> 42:21.860
3

42:21.860 --> 42:22.500
4

42:23.060 --> 42:24.180
所以下标

42:24.340 --> 42:25.940
下标的取词范围是0到4

42:25.940 --> 42:26.380
ok

42:26.380 --> 42:27.380
我们这里写个5

42:27.980 --> 42:29.100
往里边加东西

42:29.100 --> 42:29.580
对吧

42:29.740 --> 42:30.900
往里边说加东西

42:31.220 --> 42:32.620
往莫伟加一个东西吧

42:33.780 --> 42:34.300
你看一下

42:35.540 --> 42:36.860
往莫伟加一个东西

42:37.300 --> 42:38.620
添加一项

42:40.100 --> 42:41.420
向莫伟添加一项

42:43.540 --> 42:44.420
保存看一下

42:45.540 --> 42:45.660
好

42:45.660 --> 42:45.980
这边

42:46.900 --> 42:47.300
好

42:47.460 --> 42:48.620
向莫伟添加一项

42:48.620 --> 42:49.020
你看

42:49.780 --> 42:50.780
加了一项了

42:50.780 --> 42:51.620
就这么简单

42:52.140 --> 42:53.460
以为他多复杂

42:53.620 --> 42:54.460
就这么简单

42:55.620 --> 42:56.060
好

42:56.500 --> 42:58.460
这种方式当然是可以

42:58.580 --> 42:59.340
当然是可以

42:59.340 --> 43:01.380
但是这种方式你是不是写死了

43:01.500 --> 43:02.580
如果将来有一天

43:02.580 --> 43:04.380
你不知道这个数据里面有多少项

43:04.900 --> 43:06.620
你不能每次都去数

43:06.940 --> 43:07.660
而且有的时候

43:07.660 --> 43:09.260
这个数据来自于用户输入的

43:09.260 --> 43:09.780
有可能

43:10.780 --> 43:12.300
这个数据目前有多少项

43:12.300 --> 43:13.020
你都不知道

43:13.180 --> 43:13.980
你都不知道

43:14.060 --> 43:15.140
那你这里写啥呢

43:15.620 --> 43:16.540
这里写啥呢

43:16.780 --> 43:18.140
你还是可以写

43:18.860 --> 43:20.460
拥有同学知道

43:20.780 --> 43:21.620
这里写啥

43:22.220 --> 43:23.460
不需要新知识

43:23.700 --> 43:25.260
不需要任何的新知识

43:25.420 --> 43:26.740
向莫伟添加一项

43:27.020 --> 43:28.020
这里可以写啥

43:32.700 --> 43:33.700
想一想可不可以

43:34.740 --> 43:35.460
可不可以

43:36.020 --> 43:38.060
用这种方式能不能向莫伟添加一项

43:38.540 --> 43:38.940
可不可以

43:38.940 --> 43:39.860
当然可以

43:39.860 --> 43:41.340
为什么不能

43:42.500 --> 43:44.460
他以前的最大下标是多少

43:44.860 --> 43:46.300
长度减1

43:47.260 --> 43:49.300
那么长度减1是以前的最大下标

43:49.500 --> 43:50.900
那么加一项

43:51.220 --> 43:53.340
那新的下标是不是长度了

43:53.540 --> 43:54.340
这来自于长度

43:54.340 --> 43:54.700
对吧

43:54.860 --> 43:56.220
这里可以写表达式的

43:56.580 --> 43:58.500
中国好理标可以写表达式的

43:58.820 --> 44:00.140
不是说只能写字面量

44:00.380 --> 44:01.380
他把表达式拿过来

44:01.380 --> 44:03.420
表达式的值作为这个属性的名

44:03.660 --> 44:04.700
作为这个属性的名字

44:04.700 --> 44:05.380
当然可以

44:05.380 --> 44:05.860
没问题

44:06.860 --> 44:07.260
看一下

44:09.140 --> 44:10.500
这向莫伟添加一项

44:10.500 --> 44:10.860
对吧

44:10.860 --> 44:12.220
而且这个代码是通用的

44:12.220 --> 44:12.700
你看没

44:13.460 --> 44:14.060
通用的

44:14.900 --> 44:16.100
1

44:16.100 --> 44:16.420
2

44:16.420 --> 44:16.900
3

44:17.460 --> 44:17.940
看一下

44:19.620 --> 44:21.020
他就不断的往数损摸一下

44:21.020 --> 44:22.220
夹到数据了

44:23.300 --> 44:24.420
当然这是一种邪法

44:24.420 --> 44:25.060
但这种情况

44:25.060 --> 44:25.860
我平时不咋

44:25.860 --> 44:26.980
不咋会用这种邪法

44:27.140 --> 44:28.900
因为这种选法看起来不是很好

44:28.900 --> 44:29.420
约度

44:29.700 --> 44:30.940
我不太会用这种邪法

44:30.940 --> 44:32.180
但是他也是一种方式

44:32.540 --> 44:33.460
也是一种方式

44:33.660 --> 44:34.180
就是

44:35.300 --> 44:35.860
数主

44:37.300 --> 44:37.980
长度

44:38.780 --> 44:39.420
长度

44:39.420 --> 44:40.060
负责

44:40.380 --> 44:40.900
数据

44:42.580 --> 44:43.580
这是第一种方式

44:43.620 --> 44:44.500
第一种方式

44:44.500 --> 44:45.460
向莫伟

44:46.140 --> 44:47.460
向数主莫伟

44:48.220 --> 44:48.660
向

44:49.580 --> 44:54.580
这是向数主莫伟添加一个数据

44:54.580 --> 44:55.180
一个数据

44:55.180 --> 44:56.340
随便什么数据都可以

44:57.780 --> 44:58.100
好

44:58.100 --> 44:58.740
另外一个

44:59.980 --> 45:00.740
另外一个

45:00.740 --> 45:02.020
是使用这种方式

45:02.220 --> 45:03.140
新知识了

45:03.140 --> 45:03.780
PUSH

45:04.620 --> 45:04.860
好

45:04.860 --> 45:05.660
这是一个函数

45:05.660 --> 45:07.220
我们后边会详细讲函数

45:07.220 --> 45:07.900
那么现在呢

45:07.900 --> 45:09.820
现在大家要知道怎么写就行了

45:10.140 --> 45:10.900
数据写字

45:11.140 --> 45:11.860
数据写字

45:12.180 --> 45:13.220
这个也是

45:14.140 --> 45:17.060
向数主莫伟添加一个数据

45:18.660 --> 45:19.540
用这个PUSH

45:19.780 --> 45:22.860
它也可以向数主莫伟添加一个数据

45:23.620 --> 45:24.420
咱们看一下

45:30.830 --> 45:31.670
这里呢

45:31.830 --> 45:33.430
我们ARR PUSH

45:33.710 --> 45:34.350
PUSH

45:34.870 --> 45:36.630
比方说ABC

45:37.190 --> 45:38.550
然后再PUSH

45:38.550 --> 45:39.270
PUSH是什么

45:39.270 --> 45:40.310
PUSH是推

45:40.510 --> 45:42.150
把一个数据推到莫伟去

45:42.630 --> 45:43.670
就像一个火车一样

45:43.670 --> 45:44.830
给它加一节车厢

45:44.830 --> 45:46.230
推一节车厢到莫伟去

45:46.830 --> 45:47.510
BCD

45:48.030 --> 45:49.510
这里写什么数据都可以

45:49.510 --> 45:50.590
什么数据都可以

45:50.790 --> 45:51.870
也可以是个对象

45:51.870 --> 45:52.710
也可以是个对象

45:52.710 --> 45:53.390
啥都可以

45:53.830 --> 45:55.350
这里面加入一个对象

45:55.750 --> 45:57.030
把一个对象加进去

45:57.390 --> 45:58.790
对象呢就随便写

45:58.790 --> 45:59.430
随便写

46:03.940 --> 46:04.820
保存看一下

46:05.540 --> 46:07.460
这样子就往数据里面加了三个东西了

46:07.460 --> 46:07.860
你看

46:09.100 --> 46:09.860
就加进去了

46:10.220 --> 46:11.420
数据里面啥都可以存

46:11.420 --> 46:12.340
啥都可以存的

46:13.540 --> 46:14.220
没问题吧

46:14.980 --> 46:17.380
通过这个PUSH也可以添加数据

46:17.740 --> 46:18.740
也可以添加数据

46:20.300 --> 46:20.580
好

46:20.580 --> 46:20.980
下一个

46:21.500 --> 46:23.100
下一个是数组

46:23.100 --> 46:24.140
还有些办法

46:24.820 --> 46:25.700
unshift

46:26.540 --> 46:27.100
数据

46:28.540 --> 46:29.500
这指的是什么呢

46:29.500 --> 46:32.260
指的是向数组

46:33.020 --> 46:34.380
起始位置

46:35.500 --> 46:36.940
添加一个数据

46:37.620 --> 46:39.100
这个函数

46:39.540 --> 46:41.220
就这种方式会导致

46:41.700 --> 46:43.540
会导致数组

46:44.220 --> 46:47.100
每一项的下标

46:47.980 --> 46:49.020
向后移动

46:49.300 --> 46:50.340
向后移动

46:50.860 --> 46:52.420
比方说

46:52.740 --> 46:53.860
咱们再

46:54.940 --> 46:55.860
把这个注射掉

46:57.180 --> 46:57.700
数组

46:57.900 --> 46:59.100
前面要加一个E

46:59.420 --> 47:00.940
但它第一项加一个E

47:01.380 --> 47:02.220
AR

47:02.540 --> 47:03.380
unshift

47:03.980 --> 47:04.700
unshift

47:05.420 --> 47:07.140
然后第一项加个E

47:07.420 --> 47:08.020
加个E

47:08.940 --> 47:10.140
保存看一下

47:11.460 --> 47:12.060
你看

47:12.740 --> 47:14.500
你看这些下标是不是移动了

47:14.500 --> 47:16.420
它本来这个35的下标

47:16.420 --> 47:17.380
在添加之前

47:17.380 --> 47:18.860
我们把添加之前也输出吧

47:19.220 --> 47:20.620
添加之前也输出

47:21.860 --> 47:22.860
AR

47:23.820 --> 47:24.300
保存

47:24.900 --> 47:26.500
你看添加之前

47:27.820 --> 47:28.820
我这里一展开

47:28.820 --> 47:29.740
一展开又不行了

47:29.740 --> 47:31.180
它是实时计算的

47:31.180 --> 47:32.060
一展开过后

47:32.060 --> 47:33.700
它又按照最新的

47:33.700 --> 47:35.740
就是那种来重新计算了

47:36.180 --> 47:37.180
所以说这里不能展开

47:37.180 --> 47:37.860
你看这里

47:38.460 --> 47:40.380
之前35的下标是不是0

47:40.380 --> 47:40.860
对吧

47:41.140 --> 47:42.460
35的下标是0

47:42.460 --> 47:43.820
那么这里变化之后

47:43.820 --> 47:45.100
35的下标变成了1

47:45.100 --> 47:46.260
你看后边1是移动

47:46.260 --> 47:47.340
它会自动完成

47:47.660 --> 47:48.620
只是unshift

47:49.580 --> 47:50.060
好

47:50.660 --> 47:52.620
那么其实PoC和unshift

47:52.620 --> 47:54.100
它可以添加多个数据

47:54.740 --> 47:55.500
这里说一下

47:55.780 --> 47:57.900
PoC和unshift

47:58.580 --> 48:01.220
可以添加多个数据

48:01.500 --> 48:02.700
可以添加多个数据

48:04.220 --> 48:06.220
怎么来添加多个数据

48:06.500 --> 48:07.900
你一次写就完事了

48:08.220 --> 48:09.340
一次写就完事了

48:09.460 --> 48:10.500
比方说PoC这里

48:11.460 --> 48:12.460
比方说unshift是吧

48:12.900 --> 48:13.860
我给它加个123

48:14.180 --> 48:14.820
123

48:14.820 --> 48:15.780
你一次写就完事了

48:15.780 --> 48:16.700
用兜号分割

48:17.060 --> 48:17.660
你看一下

48:17.820 --> 48:18.300
保存

48:19.340 --> 48:20.260
加完了过后你看

48:20.260 --> 48:21.180
里边说123

48:21.180 --> 48:21.660
前面

48:22.660 --> 48:24.820
在手字位加上123

48:25.300 --> 48:26.140
很简单对吧

48:26.420 --> 48:27.540
PoC也是一样

48:27.540 --> 48:28.780
PoC也是一样

48:29.820 --> 48:32.260
PoC这一块我们也可以写多个数据

48:33.020 --> 48:33.820
ABC

48:33.820 --> 48:35.220
兜号BCD

48:35.580 --> 48:36.060
看一下

48:36.540 --> 48:37.020
保存

48:38.540 --> 48:39.100
你看

48:39.540 --> 48:40.700
是不是可以写多个数据

48:40.700 --> 48:41.060
对吧

48:41.220 --> 48:41.780
很简单

48:41.900 --> 48:42.740
非常简单

48:42.980 --> 48:43.100
好

48:43.100 --> 48:45.540
这是PoC和unshift

48:46.180 --> 48:46.380
好

48:46.380 --> 48:47.940
那么一个是在摸尾添加

48:47.980 --> 48:49.540
一个是在什么

48:49.860 --> 48:55.030
一个是在手字位添加

48:55.270 --> 48:56.950
那如果要在中间添加怎么办

48:58.550 --> 49:02.430
如果你想在数组的中间位置加数据的话

49:02.430 --> 49:02.990
用这个

49:02.990 --> 49:03.870
用这个函数

49:04.630 --> 49:06.470
数组里边有很多的函数

49:06.710 --> 49:07.990
其实这些都是数据

49:08.150 --> 49:09.150
都是数组里边的数据

49:09.150 --> 49:09.790
我们以后

49:09.910 --> 49:11.270
讲了函数的一块就知道了

49:12.470 --> 49:14.070
这里我们使用Splice

49:15.910 --> 49:17.310
这个函数很强大

49:17.510 --> 49:19.230
它既可以删数据

49:19.550 --> 49:21.310
又可以加数据

49:21.630 --> 49:23.790
我们这里首先说加数据怎么加

49:24.270 --> 49:24.670
好

49:24.670 --> 49:26.230
这第一个位置

49:26.590 --> 49:28.750
这个小货号里边第一个位置写下标

49:30.390 --> 49:32.790
你要在哪个下标位置加数据

49:33.550 --> 49:34.030
好

49:34.030 --> 49:34.630
兜号

49:35.710 --> 49:37.910
第二个位置你直接写个0

49:38.390 --> 49:40.790
我之后讲三除数据的

49:40.910 --> 49:44.070
三除数据的时候会讲到凌是什么意思

49:44.190 --> 49:45.030
第二个数据

49:45.150 --> 49:46.990
第二个位置它是什么意思

49:46.990 --> 49:48.190
你现在是直接写个0

49:48.390 --> 49:50.070
加数据直接写个0就完事了

49:50.470 --> 49:52.470
后边你写要添加的数据

49:52.670 --> 49:53.630
添加的数据

49:54.630 --> 49:54.870
好

49:54.870 --> 49:55.350
就完了

49:55.750 --> 49:56.350
就完了

49:56.990 --> 49:58.030
这个是什么意思呢

49:59.630 --> 50:00.670
它其实是这个意思

50:01.230 --> 50:03.750
在指定下标位置

50:04.350 --> 50:05.990
从指定下标位置开始

50:06.470 --> 50:07.110
应该这样说

50:07.110 --> 50:09.030
从指定下标位置开始

50:09.870 --> 50:11.350
三除0个

50:11.710 --> 50:12.910
因为我们这里写的是0

50:12.910 --> 50:13.790
所以说三除0个

50:13.790 --> 50:15.670
其实它有三除的功能

50:15.670 --> 50:16.910
它有三除的功能

50:17.030 --> 50:17.750
三除0个

50:17.750 --> 50:19.990
如果你这里写的是依旧三除一个

50:19.990 --> 50:21.350
先把一个三除掉

50:21.590 --> 50:22.390
然后

50:23.070 --> 50:24.430
然后再

50:25.470 --> 50:26.390
该位置

50:27.350 --> 50:28.230
插入

50:29.230 --> 50:30.430
添加的数据

50:30.750 --> 50:32.190
就是把你的新的数据

50:32.190 --> 50:33.830
插入到这个下标位置

50:34.910 --> 50:35.590
同样的

50:35.590 --> 50:36.950
这里也可以写多个数据

50:36.950 --> 50:38.790
用兜号分割一是写就完了

50:38.790 --> 50:39.750
就铺写

50:40.550 --> 50:41.990
short和splice

50:42.990 --> 50:43.750
splice

50:44.230 --> 50:45.270
可以添加多个数据

50:45.270 --> 50:46.030
咱们来看一下

50:47.030 --> 50:47.950
比方说

50:47.950 --> 50:49.150
这里我们不用铺写了

50:49.150 --> 50:49.990
不用铺写

50:50.990 --> 50:51.470
输主

50:52.470 --> 50:53.750
输主我们这里先这样子写

50:53.750 --> 50:55.350
大家可以容易记一点

50:55.350 --> 50:57.550
1234写1234

50:57.550 --> 51:00.630
现在我要在二和三之间加一些数据

51:00.630 --> 51:02.590
在二和三之间加一些数据

51:02.590 --> 51:04.310
那么我们首先

51:04.590 --> 51:06.470
比方说我们首先要清楚

51:06.910 --> 51:09.830
我们新加的数据的骑士下标在哪

51:10.150 --> 51:11.630
你看一下他的下标是啥

51:11.910 --> 51:13.350
他的下标是0对吧

51:13.350 --> 51:14.470
他的下标是啥

51:14.470 --> 51:15.750
他的下标是1

51:15.870 --> 51:17.630
我们要在这个位置加数据

51:17.630 --> 51:19.190
那么下标是从什么开始

51:19.550 --> 51:20.550
是从几开始

51:20.790 --> 51:22.150
下标从2开始

51:22.910 --> 51:24.470
下标从2开始

51:24.670 --> 51:25.590
这是下标0

51:25.590 --> 51:26.270
下标1

51:26.270 --> 51:27.510
我们要在这个位置加数据

51:27.510 --> 51:28.710
下标是从2开始

51:28.910 --> 51:30.310
所以说我们这里可以这样写

51:30.550 --> 51:31.350
ar

51:31.590 --> 51:32.470
splice

51:32.710 --> 51:33.510
splice

51:33.950 --> 51:34.390
好

51:34.390 --> 51:35.110
第一个

51:35.630 --> 51:37.110
下标是2

51:37.390 --> 51:38.270
删除几个

51:38.270 --> 51:38.950
删除零个

51:38.950 --> 51:39.430
不删除

51:39.430 --> 51:40.470
我们现在不删除

51:40.470 --> 51:42.070
好后边写上加的数据

51:42.310 --> 51:43.150
abc

51:43.150 --> 51:43.910
bcd

51:43.910 --> 51:44.550
随便写吧

51:44.550 --> 51:45.230
把随便写

51:45.590 --> 51:45.790
好

51:45.790 --> 51:46.190
保存

51:46.190 --> 51:46.910
看一下

51:48.310 --> 51:48.510
好

51:48.510 --> 51:49.030
那结果了

51:49.030 --> 51:49.550
你看

51:49.790 --> 51:51.510
是不是在2和3之间加了一些数据了

51:52.390 --> 51:54.550
可以在指定位置加一些数据

51:55.230 --> 51:55.830
OK

51:55.950 --> 51:58.390
这是数组如何去添加数据

51:58.590 --> 51:59.710
如何去添加数据

51:59.830 --> 52:02.230
当然你这个地方写的下标

52:02.230 --> 52:03.710
我们通常都是写的是

52:03.710 --> 52:05.310
目前已存在的下标

52:05.430 --> 52:07.430
你给我写个不存在的下标会怎么样了

52:07.790 --> 52:08.630
又会怎么样了

52:08.630 --> 52:09.110
保存

52:09.110 --> 52:10.230
我们再来看一下

52:10.910 --> 52:12.070
写个不存在的下标

52:12.190 --> 52:14.350
他会把它当成最大下标来处理

52:14.710 --> 52:16.150
它不会造成吸冲数组

52:16.550 --> 52:17.870
不会造成吸冲数组

52:18.230 --> 52:19.150
我们这里说一下

52:19.310 --> 52:20.070
spotless

52:20.390 --> 52:21.150
如果

52:21.670 --> 52:22.870
如果下标

52:23.230 --> 52:24.230
超过

52:24.510 --> 52:25.630
超过范围

52:26.390 --> 52:27.950
折按照什么

52:27.950 --> 52:29.470
按照范围的

52:30.110 --> 52:31.630
范围的边界

52:32.230 --> 52:33.150
进行处理

52:34.150 --> 52:34.950
比方说超过了

52:34.950 --> 52:35.870
它最大下标

52:35.910 --> 52:36.230
OK

52:36.230 --> 52:37.910
我们就按照最大下标进行处理

52:38.430 --> 52:38.670
好

52:38.670 --> 52:40.670
那如果超过最小下标了

52:40.670 --> 52:41.790
比方说这里是附属

52:41.950 --> 52:42.830
附合12

52:43.030 --> 52:44.030
保存看一下

52:44.470 --> 52:46.590
它就按照零来处理

52:46.790 --> 52:47.950
就按照零来处理

52:48.390 --> 52:50.230
它这里是它比较安全的

52:50.510 --> 52:51.990
这个函数是比较安全的

52:52.030 --> 52:53.790
它不会造成什么吸收数组

52:53.790 --> 52:54.990
所以说spotless这个函数

52:54.990 --> 52:56.230
它不会造成吸收数组

52:57.230 --> 52:57.950
OK

52:57.990 --> 52:59.110
都是关于spotless

52:59.150 --> 53:00.350
添加数据像

53:00.670 --> 53:01.790
数据数据像

53:01.830 --> 53:02.870
就这么一些函数了

53:03.070 --> 53:04.510
就这么一些常用的操作

53:05.070 --> 53:05.550
就够了

53:05.550 --> 53:06.310
就完全够了

53:06.350 --> 53:07.710
我要在摸尾加数据

53:07.750 --> 53:08.990
要在开头加数据

53:09.030 --> 53:10.790
要在就是中间加数据都够了

53:10.790 --> 53:11.390
都够了

53:11.510 --> 53:13.030
其实我们平时用的比较多的

53:13.070 --> 53:14.630
就是在摸尾加数据

53:15.070 --> 53:16.670
这是添加数据像

53:17.310 --> 53:19.230
就把这些基本操作熟悉

53:19.230 --> 53:20.830
数据里面的操作还蛮多的

53:20.830 --> 53:21.710
还是蛮多的

53:22.230 --> 53:23.950
我们先把这些基本操作先熟悉了

53:23.950 --> 53:25.870
我们再说怎么去应用它

53:26.710 --> 53:28.510
这个添加数据搞定了

53:28.550 --> 53:29.270
现在

53:30.230 --> 53:31.110
删除数据

53:31.470 --> 53:32.430
删除数据

53:35.100 --> 53:35.380
好

53:35.380 --> 53:37.220
删除数据怎么删除了

53:38.180 --> 53:40.620
我不知道我之前有没有讲那个

53:40.860 --> 53:43.020
都一项的属性删除

53:43.460 --> 53:44.260
之前有讲吗

53:44.260 --> 53:45.140
我都忘了

53:45.460 --> 53:46.300
我忘了

53:46.460 --> 53:48.460
变量和对象

53:49.020 --> 53:49.980
我看一下

53:50.020 --> 53:51.180
数据内形这一块

53:51.180 --> 53:52.020
看有没有讲了

53:52.020 --> 53:53.820
那个就是对象

53:54.820 --> 53:55.380
没有

53:55.980 --> 53:57.260
这里我看一下

53:58.060 --> 53:58.940
属性

54:02.460 --> 54:03.500
讲过删除属性的

54:03.500 --> 54:03.860
对吧

54:03.900 --> 54:05.260
讲过删除属性的

54:05.300 --> 54:06.460
那输足里边

54:06.740 --> 54:09.260
删数据是不是可以用删除属性的那种方式

54:09.500 --> 54:10.220
可以的

54:10.220 --> 54:10.860
没问题

54:10.860 --> 54:11.820
没问题

54:12.500 --> 54:13.340
删除

54:13.660 --> 54:15.220
删除数据

54:15.220 --> 54:17.060
其实我们就可以把理解为

54:17.100 --> 54:18.540
把一个属性删除了

54:18.740 --> 54:19.700
一个属性删除了

54:19.700 --> 54:19.900
好

54:19.900 --> 54:20.860
咱们来看一下

54:22.140 --> 54:23.340
有个输足

54:23.740 --> 54:24.420
有个输足

54:24.420 --> 54:26.100
比方说我想把这个东西删除了

54:26.460 --> 54:27.860
他的属性名是啥

54:28.500 --> 54:29.740
也就是说属性名是什么

54:29.740 --> 54:31.180
属性名就是下标

54:31.340 --> 54:31.980
看一下

54:32.460 --> 54:33.100
再来看一下

54:33.100 --> 54:34.500
始终记住

54:34.500 --> 54:35.700
输足就是一个对象

54:35.700 --> 54:36.820
他没有什么特别的

54:37.020 --> 54:37.980
就是一个对象

54:38.860 --> 54:40.100
我要把这个二删除

54:40.100 --> 54:41.060
他的属性名是啥

54:41.060 --> 54:42.140
是一 对吧

54:42.140 --> 54:42.980
那我们怎么删

54:42.980 --> 54:44.420
我们可以用Denet

54:44.420 --> 54:45.380
AR

54:45.380 --> 54:45.940
什么

54:47.340 --> 54:47.820
一

54:47.820 --> 54:48.460
对不对

54:48.460 --> 54:49.700
把这个属性删掉

54:49.700 --> 54:50.660
保存看一下

54:50.660 --> 54:51.580
保存看一下

54:52.060 --> 54:52.260
好

54:52.260 --> 54:52.780
删掉过后

54:52.780 --> 54:54.100
你看这个位置是不是空出来了

54:54.100 --> 54:54.700
一就没了

54:54.700 --> 54:56.020
一这个属性就没了

54:56.020 --> 54:57.900
但是你会发现他长度没变

54:57.900 --> 54:59.500
他会变成稀松数组

54:59.500 --> 55:01.420
他有可能会变成稀松数组

55:01.420 --> 55:03.140
他长度不会变化

55:03.140 --> 55:04.260
长度不会变化

55:04.580 --> 55:05.540
那么也就是说

55:05.540 --> 55:06.820
删除数据

55:06.820 --> 55:08.100
我们可以用Denet

55:08.100 --> 55:09.020
输足

55:09.020 --> 55:10.180
然后下标

55:10.180 --> 55:10.940
但是这种方式

55:10.940 --> 55:12.700
我们平时都不会用这种方式的

55:12.700 --> 55:13.860
就怕面试体考

55:13.860 --> 55:15.580
这种做法

55:16.300 --> 55:17.380
这种做法

55:18.260 --> 55:20.700
不会导致数组

55:20.700 --> 55:23.340
其他的属性发生变化

55:23.940 --> 55:25.700
像什么Nense属性

55:25.700 --> 55:26.860
像什么就是

55:28.860 --> 55:31.300
像什么就是其他的数据的属性

55:31.300 --> 55:32.460
它都不会变化

55:32.460 --> 55:33.380
不会变化

55:33.380 --> 55:34.060
因此

55:34.060 --> 55:34.860
比方说

55:34.860 --> 55:35.540
咱们

55:36.260 --> 55:36.940
咱们这里

55:36.940 --> 55:38.100
删除它最后一项

55:38.100 --> 55:39.020
0123

55:39.020 --> 55:40.140
最后一项是3

55:40.140 --> 55:41.740
保存看一下

55:41.740 --> 55:42.660
最后一项是3

55:42.660 --> 55:44.380
你看Nense的属性没变

55:44.380 --> 55:44.980
没变

55:45.020 --> 55:46.740
最后一项变成空了

55:47.380 --> 55:48.940
所以说这种做法

55:49.340 --> 55:50.220
因此

55:50.220 --> 55:52.500
该做法会导致

55:53.300 --> 55:54.180
产生

55:54.460 --> 55:55.660
稀松数据

55:56.140 --> 55:56.860
数据

55:57.940 --> 55:59.660
所以我们平时不太用这种做法

55:59.660 --> 56:01.020
这个数据它又不连续了

56:01.020 --> 56:01.740
因为这个数据

56:01.740 --> 56:03.660
我们往往希望它连续

56:03.660 --> 56:05.060
为什么希望它连续

56:05.060 --> 56:05.900
我们后面讲

56:05.900 --> 56:06.900
这个数据的变力

56:06.900 --> 56:08.060
就是我们要用循环

56:08.060 --> 56:09.100
去得到这个数据的

56:09.100 --> 56:10.980
每一项的东西的时候会说

56:11.660 --> 56:12.980
它会导致稀松数据

56:13.420 --> 56:15.420
因此我们不太会用这种做法

56:16.300 --> 56:16.940
所以

56:17.460 --> 56:20.380
不推荐使用该做法

56:21.460 --> 56:22.100
第二个

56:22.580 --> 56:24.100
后面讲一下是正常的

56:24.100 --> 56:26.500
删除数据的正常姿势

56:27.860 --> 56:28.540
数据

56:28.900 --> 56:29.380
pop

56:30.980 --> 56:31.500
pop

56:32.220 --> 56:33.060
表啥意思呢

56:33.980 --> 56:34.660
表示

56:34.660 --> 56:36.740
删除数据

56:37.140 --> 56:38.940
数据的最后一项

56:39.660 --> 56:41.060
该表达是

56:41.380 --> 56:42.380
该表达是

56:43.340 --> 56:46.180
返回最后一项的数据

56:47.020 --> 56:48.180
这个表达式的值是什么

56:48.180 --> 56:48.940
整个表达式

56:48.940 --> 56:50.380
返回的是数据的最后一项

56:50.580 --> 56:53.180
同时它会把数据的最后一项删除掉

56:54.100 --> 56:54.660
看一下

56:55.460 --> 56:56.060
比方说

56:56.340 --> 56:58.300
咱们还是个数据

56:59.100 --> 57:00.220
我们可以用pop

57:00.860 --> 57:01.300
pop

57:02.740 --> 57:03.540
pop过后

57:03.540 --> 57:05.780
这个数据就没了

57:05.780 --> 57:06.780
就是最后一项就没了

57:06.780 --> 57:07.540
咱们来看一下

57:07.980 --> 57:08.780
pop是什么意思

57:08.780 --> 57:09.500
就弹出

57:09.500 --> 57:10.340
弹出

57:10.340 --> 57:11.860
刚才铺形的是推

57:12.660 --> 57:14.100
pop是弹出来

57:14.100 --> 57:14.980
你可以想象

57:14.980 --> 57:17.420
在火车后面推一节车箱就是铺形

57:17.420 --> 57:20.300
弹出火车最后一节车箱弹出来就是

57:20.300 --> 57:21.100
pop

57:21.100 --> 57:21.620
pop

57:21.620 --> 57:22.420
你看最后项没了

57:22.420 --> 57:22.820
对吧

57:22.820 --> 57:23.740
最后项没了

57:24.540 --> 57:25.540
那么这个表达式

57:25.540 --> 57:26.700
它会有一个返回结果

57:26.700 --> 57:28.100
它会有返回值的

57:28.100 --> 57:28.820
返回值是什么

57:28.820 --> 57:29.980
你可以接受一下

57:29.980 --> 57:30.940
接受一下

57:32.140 --> 57:32.740
n

57:32.740 --> 57:33.340
n

57:33.340 --> 57:34.780
我们来输出这个n

57:35.060 --> 57:35.660
看一下

57:36.500 --> 57:37.380
这个表达式

57:37.380 --> 57:39.140
因为函数它也是个表达式

57:39.140 --> 57:40.060
也是个表达式

57:40.060 --> 57:41.540
函数的要用也是表达式

57:41.620 --> 57:43.140
这个表达式返回的结果

57:43.140 --> 57:45.100
是这个三处的一项的值

57:45.100 --> 57:46.900
你看这个n应该等于多少

57:47.620 --> 57:48.620
这个n就是4

57:48.980 --> 57:50.660
就是刚刚三处的一项的值

57:51.460 --> 57:52.860
这是三处

57:52.860 --> 57:53.460
pop

57:53.460 --> 57:54.540
三处最后一项

57:54.540 --> 57:55.460
它不能三处多项

57:55.460 --> 57:56.580
只能一项一项三

57:57.540 --> 57:58.740
另外一个数组

57:58.740 --> 57:59.540
shift

58:00.180 --> 58:00.860
对应什么呢

58:00.860 --> 58:02.260
对应前面的onshift

58:02.740 --> 58:03.900
shift表示什么意思

58:03.900 --> 58:04.740
表示的是

58:04.740 --> 58:06.140
我们键盘上的shift

58:06.140 --> 58:06.540
对吧

58:06.540 --> 58:09.460
shift表示的是上边上档

58:09.580 --> 58:12.420
我们把个shift叫做上档键

58:12.420 --> 58:12.740
对吧

58:12.740 --> 58:13.820
上档键

58:15.460 --> 58:16.580
键盘的shift

58:17.860 --> 58:19.220
就是上档键

58:21.800 --> 58:23.040
就是上边这个东西

58:23.040 --> 58:23.360
对吧

58:23.360 --> 58:24.080
我们有的时候

58:24.080 --> 58:24.960
要打印键盘上

58:24.960 --> 58:25.760
上边的这个字符

58:25.760 --> 58:27.360
就按shift

58:27.800 --> 58:28.640
把打印出来

58:28.960 --> 58:29.600
打出来

58:29.600 --> 58:29.880
好

58:29.880 --> 58:32.120
这个shift在这里表示开头的意思

58:32.240 --> 58:33.160
开头的意思

58:36.240 --> 58:37.040
表什么意思呢

58:37.040 --> 58:38.280
onshift就是

58:38.600 --> 58:39.440
加入开头

58:39.440 --> 58:41.040
在开头加入一下

58:41.040 --> 58:41.360
好

58:41.360 --> 58:42.800
这个shift成的表示的是

58:42.800 --> 58:43.800
三处

58:43.800 --> 58:44.560
数组

58:44.560 --> 58:45.440
第一项

58:45.440 --> 58:46.520
第一项

58:46.920 --> 58:48.160
该表达是

58:48.480 --> 58:49.360
返回

58:49.720 --> 58:51.680
返回第一项的数据

58:51.920 --> 58:53.200
返回第一项的数据

58:54.320 --> 58:55.120
看一下

58:55.320 --> 58:56.880
那么我们现在的这一块

58:57.400 --> 58:58.280
换一种写法

58:58.960 --> 58:59.640
这个n

58:59.640 --> 59:00.760
等于ar

59:00.760 --> 59:01.360
shift

59:02.360 --> 59:03.720
它只能一项一项三

59:04.080 --> 59:05.400
三处数组的第一项

59:05.400 --> 59:07.120
然后得到第一项的值

59:07.120 --> 59:08.440
就三处的第一项的值

59:08.920 --> 59:09.080
好

59:09.080 --> 59:09.640
看一下

59:10.080 --> 59:10.800
第一项的值

59:10.800 --> 59:11.280
1

59:11.840 --> 59:12.840
然后三处的

59:12.840 --> 59:13.880
三处的第一项过后

59:13.880 --> 59:14.920
只剩下二三四的

59:14.920 --> 59:15.200
你看

59:15.200 --> 59:16.360
n是会变化

59:16.360 --> 59:17.840
下标也会变化

59:17.840 --> 59:19.280
所以说尽量用数组

59:19.280 --> 59:20.520
它给你提供的这些东西

59:20.520 --> 59:21.440
来进行三处

59:21.440 --> 59:22.960
而不要用这种方式来三处

59:24.560 --> 59:24.880
好

59:24.880 --> 59:26.640
那么还有一种三处方式

59:26.880 --> 59:27.920
就更加强大了

59:27.920 --> 59:29.320
就是splice

59:29.320 --> 59:30.280
splice

59:31.800 --> 59:33.080
那么我们刚才是不是说过的

59:33.080 --> 59:33.920
直接复制过来

59:33.920 --> 59:34.960
直接复制过来

59:35.720 --> 59:37.360
那么这里写上一个

59:37.400 --> 59:38.520
三处的数量

59:39.760 --> 59:41.320
三处的数量

59:42.520 --> 59:44.480
从指定下标位置开始

59:44.480 --> 59:45.680
三处几个

59:45.680 --> 59:47.480
三处指定数量

59:49.470 --> 59:50.310
指定数量

59:50.310 --> 59:51.390
然后在这个位置

59:51.390 --> 59:52.670
再加入一些数据

59:52.670 --> 59:54.230
如果你不想加任何数据的话

59:54.230 --> 59:55.110
后面可以不写

59:55.870 --> 59:56.510
不写的话

59:56.510 --> 59:57.550
就只管三处

59:57.550 --> 59:57.990
不加

59:57.990 --> 59:58.830
不添加

59:59.790 --> 59:59.990
好

59:59.990 --> 01:00:00.710
咱们来看一下

01:00:00.710 --> 01:00:01.350
再看一下

01:00:02.150 --> 01:00:03.190
现在我们继续三处

01:00:03.190 --> 01:00:04.150
继续三处

01:00:04.390 --> 01:00:05.270
ar

01:00:06.270 --> 01:00:07.030
splice

01:00:07.390 --> 01:00:08.150
splice

01:00:08.550 --> 01:00:09.390
三处什么

01:00:09.390 --> 01:00:10.470
三处的是

01:00:10.470 --> 01:00:12.990
从下标位一这个位置

01:00:12.990 --> 01:00:13.950
三处两个

01:00:13.950 --> 01:00:14.990
三处两个

01:00:16.310 --> 01:00:17.550
下标位一这个位置

01:00:17.550 --> 01:00:18.710
就从这个位置开始

01:00:18.950 --> 01:00:19.710
三处两个

01:00:19.710 --> 01:00:20.950
是不是把二和三就三了

01:00:20.950 --> 01:00:21.990
把这两个就三了

01:00:21.990 --> 01:00:22.230
好

01:00:22.230 --> 01:00:22.950
咱们来看一下

01:00:25.910 --> 01:00:26.750
我这里n

01:00:27.750 --> 01:00:28.790
我把n得到

01:00:28.790 --> 01:00:29.710
这个n是啥

01:00:29.710 --> 01:00:31.190
这个n返回的是什么

01:00:31.190 --> 01:00:32.270
返回的是

01:00:33.070 --> 01:00:35.150
返回一个新数组

01:00:35.150 --> 01:00:36.470
得到一个新的数组

01:00:36.710 --> 01:00:37.750
该数组

01:00:37.790 --> 01:00:38.470
记录

01:00:38.830 --> 01:00:40.390
被删除的数据

01:00:40.830 --> 01:00:42.150
哪些数据被删除了

01:00:42.950 --> 01:00:43.990
保存看一下

01:00:46.310 --> 01:00:47.510
我这边没保存

01:00:47.750 --> 01:00:48.190
保存

01:00:49.270 --> 01:00:49.950
你看

01:00:51.030 --> 01:00:52.710
这个数组是不是被删掉了

01:00:53.110 --> 01:00:54.670
二和三就被删掉了

01:00:54.790 --> 01:00:55.990
然后返回的这个东西

01:00:55.990 --> 01:00:56.950
返回的是啥了

01:00:57.030 --> 01:00:58.310
得到一个新的数组

01:00:58.470 --> 01:01:00.990
新的数组里边记录了哪些数据被删除了

01:01:00.990 --> 01:01:02.230
二和三被删除了

01:01:03.110 --> 01:01:03.790
没问题吧

01:01:04.030 --> 01:01:04.510
没问题

01:01:05.510 --> 01:01:05.790
好

01:01:05.790 --> 01:01:06.310
那么这里呢

01:01:06.310 --> 01:01:07.950
我再说一下这些特殊情况

01:01:07.950 --> 01:01:09.710
这些特殊情况也很好理解

01:01:09.710 --> 01:01:10.030
好

01:01:10.030 --> 01:01:11.030
这个splice

01:01:11.030 --> 01:01:12.470
如果你删了东西太多了

01:01:12.470 --> 01:01:13.670
比方说你删100个

01:01:13.670 --> 01:01:14.310
1000个

01:01:14.310 --> 01:01:15.390
有没有这么多数据

01:01:15.950 --> 01:01:17.190
有没有这么多数据

01:01:17.190 --> 01:01:18.190
他没有这么多数据

01:01:18.190 --> 01:01:20.310
所以说他就把三碗就完事了

01:01:20.310 --> 01:01:21.550
超过了数组的长度

01:01:21.550 --> 01:01:22.670
超过了范围

01:01:22.670 --> 01:01:23.630
所以说这个splice

01:01:23.630 --> 01:01:25.150
这个删除是非常安全的

01:01:26.150 --> 01:01:26.790
超过了东西

01:01:26.790 --> 01:01:28.510
他只能删出这么多

01:01:28.510 --> 01:01:28.830
对吧

01:01:28.830 --> 01:01:30.110
他只能删出三项

01:01:30.110 --> 01:01:31.830
在这个场景下边只能删出三项

01:01:31.830 --> 01:01:32.950
你超过了这个纸

01:01:32.950 --> 01:01:34.230
他也只能删出三项

01:01:34.710 --> 01:01:36.070
也只能删出三项

01:01:36.710 --> 01:01:36.870
好

01:01:36.870 --> 01:01:37.950
那么删出了二三四

01:01:39.470 --> 01:01:40.510
那如果

01:01:40.510 --> 01:01:42.350
如果是前边的这个shift

01:01:43.710 --> 01:01:44.510
shift

01:01:44.510 --> 01:01:46.350
如果这个数组一项都没有

01:01:47.190 --> 01:01:48.230
一个空的数组

01:01:48.230 --> 01:01:48.990
里边没东西

01:01:48.990 --> 01:01:49.430
你看

01:01:49.430 --> 01:01:50.950
这个数组里边是没有东西的

01:01:51.590 --> 01:01:52.550
一项都没有

01:01:52.550 --> 01:01:55.110
那么我们要删除第一项会怎么样了

01:01:55.110 --> 01:01:56.270
你看一下

01:01:56.270 --> 01:01:57.270
删除第一项

01:01:57.270 --> 01:01:58.750
他就没有做任何操作

01:01:58.750 --> 01:01:59.910
因为没有第一项

01:01:59.910 --> 01:02:01.430
然后返回的东西是啥呢

01:02:01.430 --> 01:02:02.710
返回的东西是undefend

01:02:03.510 --> 01:02:04.910
返回的东西是undefend

01:02:04.910 --> 01:02:06.910
这个都很好理解

01:02:06.910 --> 01:02:07.950
pop也是一样

01:02:08.590 --> 01:02:09.990
是不是一样了

01:02:09.990 --> 01:02:11.150
删不了最后一项

01:02:11.150 --> 01:02:12.430
返回的东西是undefend的

01:02:12.430 --> 01:02:13.070
因为他删不了

01:02:14.750 --> 01:02:16.030
这是关于数组的删除

01:02:16.550 --> 01:02:17.510
关于数组的删除

01:02:18.590 --> 01:02:19.430
非常简单

01:02:20.910 --> 01:02:21.510
接下来再看

01:02:23.270 --> 01:02:25.390
数组的其他操作

01:02:26.910 --> 01:02:28.430
其实数组的操作非常多

01:02:28.430 --> 01:02:29.590
我们这里只说一下

01:02:29.670 --> 01:02:31.150
它是基本的

01:02:31.150 --> 01:02:32.630
我们常用的一些操作

01:02:33.150 --> 01:02:33.350
好

01:02:33.350 --> 01:02:33.950
其他操作

01:02:34.750 --> 01:02:36.510
首先是这个函数

01:02:36.510 --> 01:02:37.670
也是数组的成员

01:02:37.670 --> 01:02:38.310
数组

01:02:40.710 --> 01:02:41.830
slic

01:02:41.830 --> 01:02:43.110
slic

01:02:43.110 --> 01:02:43.950
表示什么意思呢

01:02:45.430 --> 01:02:48.070
表示的是从

01:02:48.070 --> 01:02:48.870
应该这样子

01:02:48.870 --> 01:02:50.270
这个小货号里边摇填东西的

01:02:51.350 --> 01:02:52.710
骑士位置

01:02:52.710 --> 01:02:54.310
骑士位置

01:02:54.310 --> 01:02:56.030
然后英文豆号

01:02:56.030 --> 01:02:57.230
结束位置

01:02:58.470 --> 01:02:59.350
应该是下标

01:03:00.590 --> 01:03:01.430
应该这样说

01:03:01.990 --> 01:03:03.270
骑士位置下标

01:03:04.750 --> 01:03:05.590
结束位置下标

01:03:06.350 --> 01:03:07.670
这个slic这个函数

01:03:08.310 --> 01:03:09.670
它跟这个splice

01:03:10.270 --> 01:03:11.110
看上去很像

01:03:11.710 --> 01:03:12.950
splice多了一个p

01:03:12.950 --> 01:03:13.430
对吧

01:03:13.430 --> 01:03:15.190
但单词的意思是不一样的

01:03:15.750 --> 01:03:16.870
slic这个函数

01:03:16.870 --> 01:03:17.790
这个单词

01:03:17.790 --> 01:03:18.750
它表示一根绳

01:03:18.750 --> 01:03:20.390
一根绳子

01:03:21.030 --> 01:03:21.750
没读错吧

01:03:21.750 --> 01:03:22.430
绳子

01:03:22.990 --> 01:03:23.750
一根绳子

01:03:24.150 --> 01:03:26.590
这个绳子中间简断一截

01:03:26.990 --> 01:03:27.870
简断一截

01:03:28.750 --> 01:03:29.830
这就是slic

01:03:30.310 --> 01:03:31.990
splice表示的是

01:03:31.990 --> 01:03:33.990
这个绳子中间简断一截

01:03:33.990 --> 01:03:35.790
然后给它粘上一些东西

01:03:36.190 --> 01:03:38.190
所以说splice它有三处的功能

01:03:38.190 --> 01:03:40.070
同时可以添加数据

01:03:40.070 --> 01:03:41.390
可以添加数据

01:03:42.390 --> 01:03:44.590
因为粘上的东西就是添加数据

01:03:44.590 --> 01:03:45.030
对吧

01:03:45.030 --> 01:03:46.670
粘上的东西就是添加数据

01:03:47.030 --> 01:03:49.990
而slic它只简断这一截

01:03:49.990 --> 01:03:52.270
我只要简断这一截就行了

01:03:52.270 --> 01:03:53.350
其他的不要了

01:03:53.350 --> 01:03:54.870
我只要简断这一截

01:03:55.470 --> 01:03:56.910
这个东西它的作用是

01:03:58.430 --> 01:04:06.470
从歧视位置到结束位置之间的数据

01:04:07.590 --> 01:04:12.310
将应该说将歧视位置到结束位置之间的数据

01:04:12.790 --> 01:04:13.590
拿出来

01:04:14.670 --> 01:04:16.550
得到一个新的数据

01:04:17.830 --> 01:04:19.430
也就是它返回一个新的数据

01:04:20.390 --> 01:04:23.870
该含数不会改变原数据

01:04:23.870 --> 01:04:25.030
就原来的数据不会动

01:04:25.470 --> 01:04:27.550
它只是把原来的数据那一部分拿出来

01:04:28.630 --> 01:04:28.790
好

01:04:28.790 --> 01:04:29.790
我们来看一下这个含数

01:04:31.970 --> 01:04:33.810
比方说我们这里写个数据

01:04:35.370 --> 01:04:36.130
随便写吧

01:04:36.130 --> 01:04:37.250
随便写个数据

01:04:37.250 --> 01:04:39.330
就一二按照顺序写吧

01:04:39.330 --> 01:04:40.730
三四五六七

01:04:42.490 --> 01:04:42.730
好

01:04:43.770 --> 01:04:44.050
来吧

01:04:45.690 --> 01:04:49.130
这个数据里边我们比方说要拿到这个456

01:04:49.130 --> 01:04:50.130
要拿到这个456

01:04:50.130 --> 01:04:50.730
好

01:04:50.730 --> 01:04:51.770
我们怎么拿呢

01:04:51.770 --> 01:04:52.610
AR

01:04:53.410 --> 01:04:54.210
slic

01:04:55.050 --> 01:04:55.370
好

01:04:55.370 --> 01:04:57.130
看一下4的下标是多少

01:04:57.130 --> 01:04:58.010
4的下标是多少

01:04:58.050 --> 01:04:59.690
零一二三

01:04:59.690 --> 01:05:00.170
对吧

01:05:00.690 --> 01:05:01.170
三

01:05:01.810 --> 01:05:02.210
好

01:05:02.210 --> 01:05:03.570
6的下标是多少呢

01:05:03.930 --> 01:05:06.330
3455

01:05:07.170 --> 01:05:10.610
这样子就把下标为3的开始

01:05:10.610 --> 01:05:12.130
下标为5结束

01:05:12.130 --> 01:05:13.690
把这一段数据拿到

01:05:14.250 --> 01:05:15.530
得到一个新数据

01:05:15.890 --> 01:05:17.530
它会返回一个新数据

01:05:17.530 --> 01:05:18.650
我们用6AR

01:05:19.730 --> 01:05:21.290
AR通常用这个单词

01:05:21.290 --> 01:05:22.810
表示一个普通数据

01:05:22.970 --> 01:05:24.090
没什么意义的数据

01:05:24.650 --> 01:05:27.370
输出一个新数据

01:05:27.450 --> 01:05:28.530
再输出旧数据

01:05:28.530 --> 01:05:30.570
你看我现在输出了新数据

01:05:30.770 --> 01:05:31.810
又输出了旧数据

01:05:31.810 --> 01:05:32.930
我们来看一下输出什么

01:05:36.370 --> 01:05:36.890
这边

01:05:38.570 --> 01:05:39.370
你会看到

01:05:39.650 --> 01:05:40.730
第一个数据呢

01:05:40.730 --> 01:05:41.890
我们这里刷新

01:05:42.090 --> 01:05:42.850
第一个数据

01:05:43.370 --> 01:05:44.730
得到的结果是4和5

01:05:44.730 --> 01:05:45.130
对吧

01:05:45.130 --> 01:05:45.810
4和5

01:05:45.810 --> 01:05:47.330
里边只有两个4和5

01:05:47.570 --> 01:05:47.970
诶

01:05:48.810 --> 01:05:49.330
哦

01:05:49.330 --> 01:05:51.090
这里我忘了说了

01:05:51.090 --> 01:05:51.810
忘了说了

01:05:52.210 --> 01:05:53.130
结束下标

01:05:53.370 --> 01:05:54.330
结束下标

01:05:56.160 --> 01:05:56.720
注意

01:05:56.960 --> 01:05:58.080
我也经常忘这个

01:05:58.080 --> 01:05:59.480
结束下标

01:06:00.040 --> 01:06:00.760
取不到

01:06:00.760 --> 01:06:01.600
取不到

01:06:02.240 --> 01:06:03.840
它不会取到结束下标

01:06:04.240 --> 01:06:06.120
是结束下标之前的东西

01:06:06.120 --> 01:06:07.160
结束下标的位置

01:06:07.160 --> 01:06:07.960
它取不到

01:06:08.400 --> 01:06:09.320
看一下

01:06:09.360 --> 01:06:10.520
那么它得到了是什么了

01:06:10.560 --> 01:06:12.280
那如果我要得到345的话

01:06:12.280 --> 01:06:13.240
我这里得写6

01:06:13.240 --> 01:06:13.760
对吧

01:06:13.840 --> 01:06:15.080
结束下标得写这个

01:06:15.240 --> 01:06:16.600
因为结束下标它取不到

01:06:16.600 --> 01:06:18.640
所以说结束下标得写这个

01:06:18.800 --> 01:06:19.120
好

01:06:19.120 --> 01:06:20.040
那么就是456

01:06:20.280 --> 01:06:22.040
456保存看一下

01:06:23.320 --> 01:06:24.880
你看得到456了

01:06:24.880 --> 01:06:25.160
好

01:06:25.160 --> 01:06:27.320
你看一下原数组有没有变化

01:06:28.320 --> 01:06:30.440
原来的数组是不是没有变化

01:06:30.440 --> 01:06:31.560
没有任何变化

01:06:31.560 --> 01:06:34.040
所以说它不会改动原数组

01:06:34.040 --> 01:06:35.600
它会得到一个新的数组

01:06:35.600 --> 01:06:37.040
它不会改动原数组

01:06:37.640 --> 01:06:38.280
好吧

01:06:38.560 --> 01:06:38.840
好

01:06:38.840 --> 01:06:40.920
那这里其实还有一种写法

01:06:40.920 --> 01:06:43.480
比方说我们这里取得是这几项

01:06:43.480 --> 01:06:43.800
对吧

01:06:43.800 --> 01:06:45.080
我们还有一种写法

01:06:45.080 --> 01:06:47.320
就是个下标可以写复数

01:06:47.760 --> 01:06:50.320
下标可以写复数

01:06:51.320 --> 01:06:54.200
其实这个规则对Splice也适用

01:06:54.200 --> 01:06:56.400
Splice的下标也可以写复数

01:06:57.080 --> 01:06:59.240
如果下标写的是复数的话

01:06:59.360 --> 01:07:01.000
是从右向左

01:07:01.240 --> 01:07:02.600
从右向左来看

01:07:03.440 --> 01:07:04.600
如果是复数

01:07:05.200 --> 01:07:08.440
则从右向左

01:07:09.200 --> 01:07:11.720
向左进行选举

01:07:12.720 --> 01:07:13.600
应该这样说

01:07:13.760 --> 01:07:15.680
下标是复数的话怎么来描述

01:07:15.800 --> 01:07:17.720
以后举例子的话很好描述

01:07:17.720 --> 01:07:20.160
但是写语言的话不好描述

01:07:20.360 --> 01:07:21.880
如果是复数的话

01:07:22.000 --> 01:07:25.680
则从数组的莫为选举

01:07:25.960 --> 01:07:29.880
从数组的莫为开始计算

01:07:30.880 --> 01:07:31.600
什么意思呢

01:07:31.600 --> 01:07:32.480
我这里举例子吧

01:07:32.480 --> 01:07:34.320
还是举例子说明好说明一点

01:07:34.720 --> 01:07:36.240
好比方说这个下标

01:07:36.240 --> 01:07:37.240
这个下标是多少呢

01:07:37.240 --> 01:07:38.640
是0123对吧

01:07:38.640 --> 01:07:39.320
是3

01:07:39.520 --> 01:07:40.960
他也可以认为是

01:07:40.960 --> 01:07:42.040
复1

01:07:42.040 --> 01:07:43.040
复2

01:07:43.040 --> 01:07:43.880
复3

01:07:43.880 --> 01:07:44.720
复4

01:07:45.560 --> 01:07:46.960
刀数第4个

01:07:47.320 --> 01:07:49.240
从刀数第4个开始

01:07:49.520 --> 01:07:50.440
到多少呢

01:07:50.440 --> 01:07:51.960
到刀数第1个

01:07:52.920 --> 01:07:54.040
到刀数第1个

01:07:54.160 --> 01:07:55.840
这样子写也可以

01:07:56.240 --> 01:07:56.880
你看一下

01:07:57.040 --> 01:07:57.840
是一样的

01:07:58.320 --> 01:07:59.440
你看456

01:08:00.920 --> 01:08:02.360
最后一个取不到对吧

01:08:02.360 --> 01:08:03.360
最后一个取不到

01:08:04.200 --> 01:08:06.680
从复4到这个开始

01:08:06.680 --> 01:08:08.080
到刀数第1个

01:08:08.320 --> 01:08:08.560
好

01:08:08.560 --> 01:08:10.280
那如果这个位置写0呢

01:08:11.320 --> 01:08:12.360
保存看一下

01:08:12.600 --> 01:08:13.840
如果写0呢

01:08:13.840 --> 01:08:14.840
你可能会认为

01:08:14.840 --> 01:08:16.200
那是不是把后边取完

01:08:16.200 --> 01:08:16.880
不是的

01:08:17.520 --> 01:08:18.280
不是的

01:08:18.280 --> 01:08:19.760
不是把后边取完

01:08:19.880 --> 01:08:20.880
0的话

01:08:20.880 --> 01:08:22.480
那么就是从这个开始

01:08:22.600 --> 01:08:23.480
到这个

01:08:23.920 --> 01:08:24.640
是不是反了

01:08:24.640 --> 01:08:25.080
这个

01:08:25.080 --> 01:08:25.640
是不是反了

01:08:25.640 --> 01:08:26.160
他没法反

01:08:26.160 --> 01:08:27.600
他只能从左到右取

01:08:27.600 --> 01:08:29.040
只能从左到右取

01:08:29.040 --> 01:08:30.560
他没法从右到左取

01:08:30.560 --> 01:08:31.160
所以说

01:08:31.160 --> 01:08:32.880
从这个到这个是不存在的

01:08:32.880 --> 01:08:33.880
不存在的

01:08:33.880 --> 01:08:35.640
所以说他这个取出来是空数组

01:08:35.640 --> 01:08:36.680
取不出来

01:08:37.000 --> 01:08:37.680
明白这个意思吧

01:08:37.680 --> 01:08:40.360
他只能从左到右来进行选取

01:08:40.360 --> 01:08:42.680
他不能从右到左来进行选取

01:08:43.480 --> 01:08:43.960
好吧

01:08:43.960 --> 01:08:44.680
这是这个意思

01:08:45.920 --> 01:08:46.120
好

01:08:46.120 --> 01:08:48.120
那如果我要取后面4个怎么办

01:08:48.480 --> 01:08:50.360
如果要取后面是4个怎么办

01:08:51.320 --> 01:08:52.200
那你又写

01:08:52.360 --> 01:08:53.160
写啥了

01:08:53.280 --> 01:08:55.160
写ARRDL

01:08:55.840 --> 01:08:56.440
写这个

01:08:56.440 --> 01:08:57.960
一个不存在的下标对吧

01:08:57.960 --> 01:08:59.080
这个下标是多少

01:08:59.080 --> 01:09:01.240
这个下标是其的下一个下标

01:09:01.240 --> 01:09:02.840
其的下一个下标

01:09:02.840 --> 01:09:04.080
你就这样子取

01:09:04.800 --> 01:09:05.280
保存

01:09:05.280 --> 01:09:05.800
看一下

01:09:06.040 --> 01:09:06.880
就4567

01:09:08.000 --> 01:09:08.840
就最后一个了

01:09:08.840 --> 01:09:10.040
最后一个你就取什么了

01:09:10.040 --> 01:09:11.800
取它的长度

01:09:12.440 --> 01:09:12.920
好

01:09:12.920 --> 01:09:14.680
那我们不写第二个参数了

01:09:14.680 --> 01:09:15.640
不写第二个参

01:09:15.640 --> 01:09:16.440
就不叫参数

01:09:16.440 --> 01:09:17.920
你们现在还没有学过参数

01:09:17.920 --> 01:09:19.440
就不写第二个东西

01:09:19.440 --> 01:09:20.160
我们来看一下

01:09:20.640 --> 01:09:21.760
就是取到末尾

01:09:21.760 --> 01:09:22.680
取到末尾

01:09:22.880 --> 01:09:24.120
我们这里记录一下

01:09:25.120 --> 01:09:25.760
如果

01:09:26.280 --> 01:09:27.360
如果不写

01:09:27.600 --> 01:09:28.960
结束下标

01:09:29.760 --> 01:09:31.960
则直接取到末尾

01:09:33.360 --> 01:09:35.520
这是关于数字的这个操作是nice

01:09:35.640 --> 01:09:38.160
这些操作我们以后都可能会用到的

01:09:38.160 --> 01:09:39.720
现在我们先把它讲了

01:09:39.840 --> 01:09:40.560
你背不住

01:09:40.560 --> 01:09:41.600
肯定背不住现在

01:09:41.600 --> 01:09:43.240
因为我们现在没有应用

01:09:43.400 --> 01:09:44.480
只要没有应用的东西

01:09:44.480 --> 01:09:45.920
你只能有这么一个印象

01:09:45.920 --> 01:09:47.200
你没法把它记住

01:09:47.200 --> 01:09:48.080
没关系

01:09:48.080 --> 01:09:49.760
我们后面会有大量的应用

01:09:49.760 --> 01:09:50.880
让你们去做提

01:09:51.280 --> 01:09:52.240
忘了的话

01:09:52.240 --> 01:09:53.320
回过头来看一下

01:09:53.320 --> 01:09:54.760
你们不是能拿到这个笔记吗

01:09:54.760 --> 01:09:55.080
对吧

01:09:55.080 --> 01:09:57.120
为什么要把这些东西写到笔记里面

01:09:57.120 --> 01:09:58.520
就是房子里面忘记

01:09:59.640 --> 01:10:00.440
再说一次

01:10:00.560 --> 01:10:01.360
拿笔记

01:10:01.360 --> 01:10:02.080
怎么拿

01:10:03.080 --> 01:10:04.000
拿笔记

01:10:04.720 --> 01:10:05.840
扫这个二维码

01:10:05.840 --> 01:10:06.600
添加微信

01:10:06.760 --> 01:10:08.080
获取元旦码和笔记

01:10:08.840 --> 01:10:09.320
好吧

01:10:11.240 --> 01:10:12.320
这是关于这一块

01:10:12.920 --> 01:10:14.440
数组的snice

01:10:15.480 --> 01:10:16.040
咱们再来

01:10:18.280 --> 01:10:19.320
数组清空

01:10:20.280 --> 01:10:21.240
数组清空

01:10:22.600 --> 01:10:23.680
数组清空

01:10:23.680 --> 01:10:26.000
我们可以利用之前的这个函数

01:10:26.000 --> 01:10:26.520
对吧

01:10:26.520 --> 01:10:27.520
就是数组

01:10:27.840 --> 01:10:28.320
第二

01:10:28.320 --> 01:10:29.240
splice

01:10:30.240 --> 01:10:32.120
下标从0开始

01:10:32.280 --> 01:10:34.680
3多好个数据

01:10:34.920 --> 01:10:36.840
是不是删除数组的长度

01:10:36.840 --> 01:10:37.280
对吧

01:10:37.280 --> 01:10:38.160
数组的长度

01:10:38.160 --> 01:10:39.320
你看我们利用这个函数

01:10:39.320 --> 01:10:40.400
是不是就可以清空了

01:10:40.960 --> 01:10:42.040
这是一种清空方式

01:10:42.640 --> 01:10:42.960
看着

01:10:43.600 --> 01:10:44.600
数组清空

01:10:44.600 --> 01:10:45.520
我们可以

01:10:45.880 --> 01:10:46.840
AR

01:10:47.200 --> 01:10:48.400
这里没有6AR了

01:10:48.440 --> 01:10:49.240
把这个注释掉

01:10:51.830 --> 01:10:52.430
cancel

01:10:52.430 --> 01:10:53.190
node

01:10:53.190 --> 01:10:53.990
AR2

01:10:55.190 --> 01:10:55.790
清空

01:10:55.790 --> 01:10:56.430
splice

01:10:57.070 --> 01:10:57.710
零

01:10:57.710 --> 01:10:58.870
下标从0开始3

01:10:58.870 --> 01:10:59.670
3多好个了

01:10:59.670 --> 01:11:01.110
3这个数组的长度

01:11:01.110 --> 01:11:02.030
3这么多个

01:11:02.310 --> 01:11:03.190
是不是清空了

01:11:03.990 --> 01:11:04.590
保存

01:11:04.710 --> 01:11:05.310
看一下

01:11:05.590 --> 01:11:06.750
你看数组是不是清空了

01:11:06.750 --> 01:11:08.110
本管的一个数组有多好像

01:11:08.110 --> 01:11:08.470
我都给你

01:11:09.070 --> 01:11:10.030
都能给你清空

01:11:10.590 --> 01:11:11.710
这是一种方式

01:11:11.990 --> 01:11:12.830
另外一种方式

01:11:12.830 --> 01:11:14.110
是比较巧妙的

01:11:14.110 --> 01:11:15.430
就是数组第二nance

01:11:15.430 --> 01:11:17.510
虽然说我们平时不怎么去

01:11:17.510 --> 01:11:18.870
更改这个nance数向

01:11:18.950 --> 01:11:21.110
但是可以在数组清空这一块

01:11:21.110 --> 01:11:21.710
可以这样子用

01:11:21.710 --> 01:11:22.550
把它设为0

01:11:23.430 --> 01:11:23.950
对吧

01:11:24.110 --> 01:11:25.350
因为我们之前说过

01:11:25.350 --> 01:11:26.510
这个nance属性

01:11:26.550 --> 01:11:29.470
它始终等于最大的下标加1

01:11:30.070 --> 01:11:31.550
你把它设为0了过后

01:11:31.910 --> 01:11:32.630
那有些数据

01:11:32.630 --> 01:11:33.510
它就给你截断了

01:11:33.510 --> 01:11:33.950
对吧

01:11:33.990 --> 01:11:34.710
给你截断了

01:11:34.710 --> 01:11:35.350
你把它设为0

01:11:35.350 --> 01:11:36.990
是不是所有数据全部被截断了

01:11:37.270 --> 01:11:38.630
这些数据全部不存在了

01:11:39.750 --> 01:11:41.430
你把它nance设为0

01:11:41.990 --> 01:11:43.110
AR2nance

01:11:43.430 --> 01:11:44.190
设为0

01:11:44.310 --> 01:11:45.750
也可以达到清空的目的

01:11:46.390 --> 01:11:46.910
保存

01:11:47.910 --> 01:11:49.550
这是最快的清空方式

01:11:49.550 --> 01:11:50.950
那些属性就全部不要了

01:11:50.950 --> 01:11:51.910
全部不要了

01:11:52.190 --> 01:11:53.510
我们之前是不是演示过的

01:11:53.510 --> 01:11:54.790
演示过类似的方式

01:11:55.910 --> 01:11:57.350
这是关于数组清空

01:11:58.150 --> 01:11:59.150
再来

01:11:59.150 --> 01:12:00.670
看一下数组里边还有哪些东西

01:12:02.510 --> 01:12:05.110
数组里边我们还可以这样子来

01:12:06.910 --> 01:12:07.710
就是

01:12:09.830 --> 01:12:12.430
数组查找

01:12:13.390 --> 01:12:14.190
数组

01:12:14.470 --> 01:12:17.830
数组中某一项的下标

01:12:18.550 --> 01:12:20.390
查找数组中某一项的下标

01:12:20.390 --> 01:12:21.430
那么怎么写呢

01:12:21.590 --> 01:12:22.350
数组

01:12:22.910 --> 01:12:24.190
index

01:12:25.150 --> 01:12:25.870
数组

01:12:26.270 --> 01:12:26.990
就数据

01:12:27.870 --> 01:12:28.550
什么意思呢

01:12:28.550 --> 01:12:29.870
这个表达式的意思是

01:12:31.630 --> 01:12:32.790
从数组中

01:12:34.590 --> 01:12:36.630
一次查找

01:12:37.550 --> 01:12:38.270
查找

01:12:39.110 --> 01:12:40.310
对应的数据

01:12:41.350 --> 01:12:42.350
对应的数据

01:12:43.190 --> 01:12:44.070
查找的时候

01:12:44.070 --> 01:12:45.070
它使用相等

01:12:45.070 --> 01:12:46.830
严格相等来进行比较

01:12:46.950 --> 01:12:48.070
查找时

01:12:48.510 --> 01:12:50.630
使用严格相等

01:12:51.150 --> 01:12:52.270
进行比较

01:12:52.790 --> 01:12:53.990
使用严格相等

01:12:53.990 --> 01:12:54.950
我们之前讲过什么

01:12:54.950 --> 01:12:55.710
运算服那一块

01:12:55.710 --> 01:12:56.750
严格相等对吧

01:12:56.790 --> 01:12:58.790
内型和数据都得一样

01:12:59.430 --> 01:13:01.590
查找时使用严格相等比较

01:13:01.710 --> 01:13:05.630
找到第一个匹配的下标

01:13:06.430 --> 01:13:07.110
返回

01:13:07.910 --> 01:13:08.910
整个这个表达式

01:13:08.910 --> 01:13:10.550
找到的是第一个匹配的下标

01:13:10.550 --> 01:13:11.110
返回

01:13:11.430 --> 01:13:12.030
举例子

01:13:13.860 --> 01:13:14.460
再来一个

01:13:15.780 --> 01:13:16.740
就这个数组吧

01:13:16.980 --> 01:13:17.660
就这个数组

01:13:18.020 --> 01:13:18.820
咱们

01:13:19.420 --> 01:13:20.900
咱们我们去找

01:13:22.060 --> 01:13:23.540
vindex

01:13:24.020 --> 01:13:25.340
用个辨量来接收

01:13:25.980 --> 01:13:28.300
这里使用index.lv

01:13:28.300 --> 01:13:29.580
使用这个函数

01:13:29.580 --> 01:13:30.620
我们后边会讲函数

01:13:30.620 --> 01:13:31.820
现在我们大概了解一下

01:13:31.820 --> 01:13:33.220
一个函数就是个功能

01:13:34.060 --> 01:13:34.820
index.lv

01:13:34.820 --> 01:13:35.740
这里边前啥呢

01:13:35.740 --> 01:13:37.260
比方说我填一个3

01:13:37.900 --> 01:13:38.740
啥意思呢

01:13:39.100 --> 01:13:41.420
从这个数组里边去找这个3

01:13:41.660 --> 01:13:42.580
找这个3

01:13:42.940 --> 01:13:44.540
把这个3的下标

01:13:44.540 --> 01:13:46.100
第一个3的下标返回

01:13:46.740 --> 01:13:47.700
应该返回多少

01:13:48.340 --> 01:13:49.860
整个表达式应该返回多少

01:13:51.340 --> 01:13:52.180
所以返回2

01:13:52.660 --> 01:13:53.260
0

01:13:53.460 --> 01:13:54.020
1

01:13:54.020 --> 01:13:54.540
2

01:13:54.540 --> 01:13:55.740
第一个3是不是2

01:13:55.980 --> 01:13:57.300
我们输出这个index

01:13:58.100 --> 01:13:58.900
输出这个数组

01:13:59.020 --> 01:14:00.140
然后再输出index

01:14:00.380 --> 01:14:00.860
看一下

01:14:05.550 --> 01:14:06.070
刷新

01:14:06.390 --> 01:14:06.950
你看一下

01:14:07.190 --> 01:14:08.190
得到的结果是不是2

01:14:08.190 --> 01:14:08.550
对吧

01:14:08.550 --> 01:14:09.190
没问题吧

01:14:10.590 --> 01:14:12.150
这个找到的下标是2

01:14:12.510 --> 01:14:15.030
我们如果这里写的是一个制服圈

01:14:15.150 --> 01:14:16.710
一个制服圈的三回怎么样呢

01:14:16.870 --> 01:14:18.110
保存看一下

01:14:18.790 --> 01:14:19.990
它得到的是-1

01:14:19.990 --> 01:14:21.150
也有它没找到

01:14:21.150 --> 01:14:23.110
没找到的话得到的-1

01:14:23.110 --> 01:14:23.990
得到的是-1

01:14:23.990 --> 01:14:24.710
因为我们知道

01:14:24.710 --> 01:14:26.310
-1这个下标是不存在的

01:14:26.310 --> 01:14:26.670
对吧

01:14:26.670 --> 01:14:28.790
我们用它用-1来表示没有找到

01:14:29.110 --> 01:14:29.750
如果

01:14:32.870 --> 01:14:33.950
没有找到

01:14:34.510 --> 01:14:36.070
得到-1

01:14:36.390 --> 01:14:37.110
得到-1

01:14:42.520 --> 01:14:44.400
这也告诉我们了

01:14:44.400 --> 01:14:45.880
这个数据的查到方式

01:14:45.920 --> 01:14:47.960
它是用严格相等来比较的

01:14:48.200 --> 01:14:51.600
所以说如果用相等比较的话

01:14:51.680 --> 01:14:54.120
那么这个就3和制服圈3是可以相等的

01:14:54.120 --> 01:14:54.520
对吧

01:14:54.600 --> 01:14:56.800
但是如果用严格相等的话就不行了

01:14:56.800 --> 01:14:57.720
严格相等的话

01:14:57.720 --> 01:14:58.760
它必须要匹配内形

01:14:58.760 --> 01:14:59.960
内形必须要相同

01:15:01.040 --> 01:15:02.600
这是这种查状方式

01:15:02.600 --> 01:15:04.400
那如果这里面有多个3呢

01:15:05.160 --> 01:15:06.520
如果有多个3呢

01:15:07.520 --> 01:15:08.720
那么它会找到哪一个呢

01:15:08.720 --> 01:15:09.840
找到的是第1个

01:15:09.840 --> 01:15:11.360
我在这里也说明了

01:15:11.720 --> 01:15:13.240
找到第1个匹配的下标

01:15:13.640 --> 01:15:14.680
找到的是第1个

01:15:15.120 --> 01:15:16.200
保存看一下

01:15:16.600 --> 01:15:17.440
找到的是2

01:15:17.440 --> 01:15:17.960
看没

01:15:19.400 --> 01:15:19.680
好

01:15:19.680 --> 01:15:21.240
接下来我们再来看

01:15:22.600 --> 01:15:23.960
查到某一项的下标

01:15:23.960 --> 01:15:25.120
这是index-25

01:15:25.120 --> 01:15:27.080
还有一个对应的数组

01:15:27.360 --> 01:15:30.960
index 叫做 lastindex-25

01:15:31.600 --> 01:15:32.520
你觉得啥意思

01:15:32.520 --> 01:15:33.560
index是什么意思

01:15:33.560 --> 01:15:35.080
index是表示所引的意思

01:15:35.680 --> 01:15:36.640
找所引

01:15:36.840 --> 01:15:41.320
就是个数据中这个数据的所引是什么

01:15:41.520 --> 01:15:42.440
你看这个很好理解

01:15:42.760 --> 01:15:44.040
index-25

01:15:44.040 --> 01:15:46.080
什么什么的所引

01:15:46.080 --> 01:15:48.520
数据中这个数据的所引是什么

01:15:48.520 --> 01:15:50.000
那是index-25

01:15:50.000 --> 01:15:52.160
表示数据中这个数据的

01:15:52.160 --> 01:15:54.400
最后一个所引是什么

01:15:54.920 --> 01:15:56.520
它的用法就是

01:15:56.520 --> 01:15:59.720
功能和index-25

01:15:59.880 --> 01:16:00.760
类似

01:16:00.760 --> 01:16:02.240
只是变化了什么呢

01:16:02.240 --> 01:16:04.800
只是查找的是

01:16:05.000 --> 01:16:07.920
最后一个匹配的下标

01:16:09.240 --> 01:16:10.920
查到的是最后一个匹配的下标

01:16:11.600 --> 01:16:12.640
咱们来看一下

01:16:13.120 --> 01:16:15.720
如果这里换成index-nasa-index-so

01:16:17.040 --> 01:16:17.840
换成这个

01:16:18.400 --> 01:16:19.320
保存看一下

01:16:19.320 --> 01:16:20.080
得到的是什么

01:16:20.080 --> 01:16:20.960
是最后一个了

01:16:21.520 --> 01:16:22.120
看一下

01:16:22.240 --> 01:16:22.960
得到的是6

01:16:22.960 --> 01:16:23.320
对吧

01:16:23.320 --> 01:16:24.120
最大下标

01:16:24.120 --> 01:16:24.760
6

01:16:24.760 --> 01:16:26.040
它最后一个就是3

01:16:26.840 --> 01:16:28.120
这就是它们的区别

01:16:28.640 --> 01:16:30.920
这是在数组里边查找某一下

01:16:32.320 --> 01:16:34.040
常用操作就这么一些了

01:16:34.280 --> 01:16:35.000
东西很多

01:16:35.000 --> 01:16:36.800
但是每个东西都不复杂

01:16:36.800 --> 01:16:37.680
都很简单

01:16:37.680 --> 01:16:38.320
你记不住

01:16:38.320 --> 01:16:39.320
肯定记不住

01:16:39.320 --> 01:16:40.000
不要去记

01:16:40.240 --> 01:16:41.200
千万不要去记

01:16:41.720 --> 01:16:43.560
我们后边如果用到了过后

01:16:43.560 --> 01:16:44.360
你可以回来查

01:16:44.360 --> 01:16:45.720
可以去查一下这个笔记

01:16:46.920 --> 01:16:48.200
这是这一块

01:16:49.720 --> 01:16:52.440
那么数组的常见操作就讲完了

01:16:54.120 --> 01:16:56.960
然后我这里接下来介绍一些新语法

01:16:58.320 --> 01:17:00.640
它有可能我们在用这个数组的时候

01:17:00.640 --> 01:17:02.200
有可能会用到这些新语法

01:17:03.880 --> 01:17:05.840
这个新语法跟这个数组

01:17:06.400 --> 01:17:08.520
这个新语法不是说刚刚出来的语法

01:17:08.520 --> 01:17:08.960
不是

01:17:09.400 --> 01:17:10.960
是我们之前没讲过

01:17:11.600 --> 01:17:12.440
语法补充

01:17:12.440 --> 01:17:13.120
叫做

01:17:14.840 --> 01:17:16.080
这里补充两个

01:17:16.080 --> 01:17:18.000
一个是硬关键字

01:17:18.440 --> 01:17:19.440
硬关键字

01:17:20.400 --> 01:17:21.800
这个关键字判断的是什么

01:17:22.720 --> 01:17:26.160
判断的是判断某个属性

01:17:27.120 --> 01:17:30.480
在对象中是否存在

01:17:31.080 --> 01:17:32.320
判断某个属性

01:17:32.320 --> 01:17:33.720
在对象中是否存在

01:17:34.240 --> 01:17:35.320
它的写法是什么

01:17:35.840 --> 01:17:36.880
属性名

01:17:37.200 --> 01:17:38.040
属性名

01:17:38.200 --> 01:17:39.200
硬

01:17:39.640 --> 01:17:42.000
这个属性名当然要是个字无窜

01:17:42.000 --> 01:17:44.160
因为属性必须是个字无窜

01:17:44.160 --> 01:17:45.360
如果你不是字无窜的话

01:17:45.360 --> 01:17:46.800
它会把它转换成字无窜

01:17:46.800 --> 01:17:49.000
属性名硬对象

01:17:49.840 --> 01:17:50.440
对象

01:17:51.040 --> 01:17:52.760
咱们来看一下硬关键字

01:17:53.680 --> 01:17:55.320
硬关键字

01:18:00.070 --> 01:18:01.390
这里我们来看一下

01:18:04.430 --> 01:18:06.430
我们这里就写这么一个对象

01:18:06.430 --> 01:18:07.230
一个对象

01:18:08.750 --> 01:18:10.390
这个对象里面随便写一些属性

01:18:10.710 --> 01:18:11.390
A

01:18:11.750 --> 01:18:12.390
B

01:18:13.670 --> 01:18:14.270
C

01:18:15.590 --> 01:18:16.470
随便写个属性

01:18:17.030 --> 01:18:17.270
好

01:18:17.270 --> 01:18:18.590
最后我们来输出这个

01:18:19.030 --> 01:18:19.950
Consol Nog

01:18:21.670 --> 01:18:22.390
A

01:18:22.590 --> 01:18:23.230
In

01:18:23.430 --> 01:18:24.230
OB界

01:18:24.670 --> 01:18:25.550
啥意思呢

01:18:25.950 --> 01:18:28.190
表示的是看OB界里面

01:18:28.190 --> 01:18:30.950
有没有一个属性名字叫做A

01:18:31.350 --> 01:18:32.470
看的是这么个东西

01:18:32.470 --> 01:18:33.430
咱们运行看一下

01:18:33.590 --> 01:18:34.750
那这里输出了什么

01:18:35.350 --> 01:18:37.670
它输出的结果一定是true或者是false

01:18:38.070 --> 01:18:39.030
到结果是true

01:18:39.150 --> 01:18:41.670
表示OB界里面有这个属性A

01:18:41.870 --> 01:18:43.550
你千万别这样子写

01:18:44.190 --> 01:18:45.310
这样子写啥意思

01:18:45.950 --> 01:18:46.590
啥意思

01:18:47.070 --> 01:18:49.990
表示的是把辩量A的值取出来

01:18:49.990 --> 01:18:50.910
有这个辩量吗

01:18:51.670 --> 01:18:52.670
是不是没有这个辩量

01:18:52.790 --> 01:18:54.590
没有这个辩量是不是要报错了

01:18:54.830 --> 01:18:56.430
它说A is not defined

01:18:57.150 --> 01:18:57.830
报错了

01:18:57.830 --> 01:18:59.110
所以说必须要是制服true

01:18:59.270 --> 01:19:00.190
必须是制服true

01:19:00.910 --> 01:19:01.110
好

01:19:01.110 --> 01:19:02.110
那么同样的道理

01:19:02.270 --> 01:19:03.470
输出是不是对象

01:19:03.470 --> 01:19:04.710
输出当然是个对象

01:19:05.070 --> 01:19:06.190
输出当然是个对象

01:19:06.630 --> 01:19:07.390
当然是个对象

01:19:08.310 --> 01:19:09.510
那么现在问大家一个问题

01:19:09.510 --> 01:19:10.670
为什么我要讲这个

01:19:10.670 --> 01:19:11.670
因为面试的时候

01:19:11.670 --> 01:19:13.110
我们平时很少用这种方式

01:19:13.310 --> 01:19:14.310
只是面试的时候

01:19:14.310 --> 01:19:15.710
它有可能会考虑

01:19:16.550 --> 01:19:18.670
23inOB界

01:19:18.670 --> 01:19:19.190
你告诉我

01:19:19.190 --> 01:19:20.790
它得到的是true还是false

01:19:21.950 --> 01:19:22.230
告诉我

01:19:22.230 --> 01:19:23.350
它是true还是false

01:19:24.750 --> 01:19:26.430
它得到的是false

01:19:26.870 --> 01:19:27.390
false

01:19:27.750 --> 01:19:28.910
为什么是false呢

01:19:28.910 --> 01:19:29.750
我们把这个输出

01:19:29.750 --> 01:19:30.550
输出看一下

01:19:31.870 --> 01:19:32.670
输出看一下

01:19:34.910 --> 01:19:36.790
这不是OB界AR

01:19:37.470 --> 01:19:37.950
保存

01:19:38.950 --> 01:19:39.790
得到的是false

01:19:40.150 --> 01:19:41.230
为什么是false呢

01:19:41.550 --> 01:19:43.630
它是判断的属性名

01:19:43.630 --> 01:19:45.270
它不是判断的属性值

01:19:45.270 --> 01:19:45.590
注意

01:19:46.230 --> 01:19:47.190
判断的属性名

01:19:47.190 --> 01:19:48.190
属性名只有啥

01:19:48.190 --> 01:19:50.630
0,1,2,3,6

01:19:50.630 --> 01:19:51.150
对吧

01:19:51.150 --> 01:19:52.190
它只有这些东西

01:19:52.670 --> 01:19:54.270
它没有属性值

01:19:54.270 --> 01:19:55.750
它不是判断的属性值

01:19:56.190 --> 01:19:56.390
好

01:19:56.390 --> 01:19:58.270
那属性名里边有没有23

01:19:58.430 --> 01:19:59.150
有没有23

01:19:59.150 --> 01:19:59.630
没有

01:19:59.630 --> 01:20:00.670
所以说它是false

01:20:01.070 --> 01:20:01.670
我讲这个

01:20:01.670 --> 01:20:02.430
之所以讲这个

01:20:02.430 --> 01:20:04.670
是容易面试提到是容易考到这个

01:20:05.030 --> 01:20:06.030
这是关于in

01:20:06.710 --> 01:20:08.150
in其实也是个操作服

01:20:09.070 --> 01:20:09.870
in关键字

01:20:10.870 --> 01:20:11.070
好

01:20:11.070 --> 01:20:11.590
另外一个

01:20:12.590 --> 01:20:12.750
好

01:20:12.750 --> 01:20:13.630
另外一个就很重要了

01:20:14.030 --> 01:20:15.430
叫做forin循环

01:20:16.230 --> 01:20:17.230
forin循环

01:20:17.390 --> 01:20:18.950
又是一种新的循环格式了

01:20:19.470 --> 01:20:20.270
它循环的是什么

01:20:20.270 --> 01:20:21.150
它是这样子写的

01:20:23.700 --> 01:20:24.260
for

01:20:25.020 --> 01:20:26.460
然后这里有一个辩量

01:20:26.460 --> 01:20:27.380
一个辩量

01:20:29.460 --> 01:20:31.180
这里的辩量名字随便去

01:20:31.500 --> 01:20:32.140
随便去

01:20:32.420 --> 01:20:32.940
in

01:20:33.620 --> 01:20:34.180
对象

01:20:36.980 --> 01:20:38.060
这个循环循环的是啥

01:20:38.140 --> 01:20:39.020
这个地方随便写

01:20:39.020 --> 01:20:39.860
这个名字随便写

01:20:39.860 --> 01:20:40.900
有的时候写item

01:20:40.900 --> 01:20:41.820
有的时候写p

01:20:41.820 --> 01:20:42.620
有的时候写key

01:20:42.620 --> 01:20:43.220
随便你写

01:20:43.500 --> 01:20:44.140
随便你写

01:20:44.220 --> 01:20:45.100
这是个辩量名

01:20:45.300 --> 01:20:46.660
这无非是个辩量名而已

01:20:46.700 --> 01:20:47.620
没有什么特别的

01:20:49.140 --> 01:20:51.300
那么这个东西它循环的是啥呢

01:20:51.300 --> 01:20:52.020
循环的

01:20:52.340 --> 01:20:58.460
它是取出对象的所有属性名

01:20:59.780 --> 01:21:01.980
取出对象的所有属性名

01:21:02.900 --> 01:21:03.780
然后

01:21:04.220 --> 01:21:05.020
然后

01:21:06.020 --> 01:21:07.140
每次循环

01:21:07.780 --> 01:21:09.020
每次循环

01:21:09.740 --> 01:21:13.700
将其中一个属性名

01:21:13.940 --> 01:21:17.140
负值给辩量prob

01:21:17.540 --> 01:21:18.340
辩量prob

01:21:18.660 --> 01:21:20.300
prob表示属性的意思

01:21:20.300 --> 01:21:20.980
property

01:21:21.260 --> 01:21:22.740
当然你这个名字可以随便写

01:21:23.420 --> 01:21:25.820
把每一个属性名负值给辩量

01:21:26.140 --> 01:21:27.060
运行

01:21:27.700 --> 01:21:29.140
运行循环题

01:21:30.260 --> 01:21:31.500
这里边写的是循环题

01:21:31.860 --> 01:21:32.500
循环题

01:21:33.140 --> 01:21:34.220
这里边随便你做啥

01:21:34.860 --> 01:21:35.940
这是这么一个循环

01:21:36.540 --> 01:21:38.380
它叫做foring循环

01:21:38.380 --> 01:21:39.980
叫做foring循环

01:21:40.180 --> 01:21:42.380
有的时候也把它叫做for一起循环

01:21:44.500 --> 01:21:45.700
for一起循环

01:21:46.540 --> 01:21:47.180
都指着它

01:21:47.180 --> 01:21:48.700
我们把它叫做foring循环

01:21:49.020 --> 01:21:50.140
它循环的是

01:21:50.540 --> 01:21:53.020
这个对象的所有的属性的名字

01:21:53.020 --> 01:21:53.620
一定要注意

01:21:53.620 --> 01:21:55.420
循环的是属性的名字

01:21:55.540 --> 01:21:57.060
把名字负值给这个

01:21:57.060 --> 01:21:58.300
然后运行是循环题

01:21:58.300 --> 01:22:00.260
比方说我们这个举个例子

01:22:02.480 --> 01:22:03.320
foring循环

01:22:04.200 --> 01:22:04.760
foring

01:22:06.360 --> 01:22:07.040
循环

01:22:09.890 --> 01:22:10.970
这些可知识有点多

01:22:10.970 --> 01:22:11.810
但是

01:22:12.090 --> 01:22:13.170
知识都不复杂

01:22:13.170 --> 01:22:14.330
我们先把这些知识讲了

01:22:14.330 --> 01:22:15.090
然后再说运用

01:22:15.090 --> 01:22:16.450
后面我们会做大量的练习

01:22:16.450 --> 01:22:17.330
来练习输出

01:22:18.330 --> 01:22:19.770
这里我们看一下

01:22:23.050 --> 01:22:24.290
有一个对象

01:22:24.290 --> 01:22:25.210
有个对象

01:22:25.570 --> 01:22:26.290
随便写吧

01:22:26.810 --> 01:22:29.770
abc

01:22:29.890 --> 01:22:30.410
随便写

01:22:31.090 --> 01:22:32.050
有这么一个对象

01:22:32.330 --> 01:22:34.050
然后我写一个foring循环

01:22:34.410 --> 01:22:34.930
for

01:22:35.210 --> 01:22:35.650
硬

01:22:36.450 --> 01:22:37.770
其实我们按一下type键

01:22:37.770 --> 01:22:39.170
你打出foring按一下type键

01:22:39.210 --> 01:22:40.130
它会这种给你生成

01:22:40.130 --> 01:22:41.250
生成这种格式

01:22:41.250 --> 01:22:42.850
这个格式我们看着有点恼火

01:22:42.850 --> 01:22:43.930
现在看着有点恼火

01:22:43.930 --> 01:22:45.530
而且有些关键字我们不认识

01:22:45.690 --> 01:22:47.810
我们直接手写吧

01:22:48.850 --> 01:22:49.730
var

01:22:50.090 --> 01:22:50.610
prob

01:22:50.730 --> 01:22:51.290
in

01:22:51.490 --> 01:22:52.250
obj

01:22:52.650 --> 01:22:53.210
你看

01:22:53.730 --> 01:22:54.090
prob

01:22:54.090 --> 01:22:54.890
in一个对象

01:22:55.090 --> 01:22:56.370
把对象放过来

01:22:57.450 --> 01:22:59.250
那么这个循环它会怎么循环呢

01:22:59.290 --> 01:23:01.650
它会把对象的所有的属性拿出来

01:23:01.650 --> 01:23:02.450
有哪些属性

01:23:02.490 --> 01:23:04.010
abc

01:23:04.530 --> 01:23:06.410
这三个属性全部把拿出来

01:23:07.130 --> 01:23:09.850
首先把a复制给这个变量

01:23:09.890 --> 01:23:11.370
然后运行是循环题

01:23:11.530 --> 01:23:13.370
然后再把b复制给这个变量

01:23:13.370 --> 01:23:14.490
运行是循环题

01:23:14.530 --> 01:23:16.250
然后再把c复制给这个变量

01:23:16.250 --> 01:23:17.810
运行一次这个循环题

01:23:17.850 --> 01:23:20.490
所以说我们在循环题里面去打印这个prob

01:23:20.530 --> 01:23:21.650
打印出来是啥呢

01:23:22.250 --> 01:23:22.850
看一下

01:23:26.430 --> 01:23:27.750
打印出来就是abc

01:23:27.750 --> 01:23:28.310
看没

01:23:28.470 --> 01:23:30.030
就它的所有的属性名

01:23:30.550 --> 01:23:31.830
打印出来就是abc

01:23:33.270 --> 01:23:33.990
没问题吧

01:23:34.470 --> 01:23:35.910
那么这个循环运行了几次

01:23:35.910 --> 01:23:37.310
这个循环题运行了几次

01:23:37.310 --> 01:23:38.430
所以运行了三次

01:23:38.470 --> 01:23:39.310
它有三个属性

01:23:39.590 --> 01:23:40.670
它就运行了三次

01:23:40.670 --> 01:23:42.630
每一次第一次得到a

01:23:42.630 --> 01:23:43.590
把复制给它

01:23:43.590 --> 01:23:44.470
第二次得到b

01:23:44.470 --> 01:23:45.310
把它复制给它

01:23:45.310 --> 01:23:46.190
都是制服创

01:23:46.190 --> 01:23:47.350
属性名都是制服创

01:23:47.990 --> 01:23:48.710
没问题吧

01:23:49.150 --> 01:23:49.390
好

01:23:49.390 --> 01:23:50.670
我们可以利用这个特点

01:23:51.590 --> 01:23:53.470
就可以来实现数组的变利

01:23:53.670 --> 01:23:56.870
数组的对数组的变利

01:23:58.070 --> 01:23:59.710
利用该特点

01:24:00.430 --> 01:24:03.030
可以实现数组的变利

01:24:03.030 --> 01:24:03.750
什么叫变利

01:24:03.750 --> 01:24:05.710
就是把数组的一项一项全部拿出来

01:24:05.710 --> 01:24:06.390
就是变利

01:24:06.670 --> 01:24:06.910
好

01:24:06.910 --> 01:24:07.430
咱们来

01:24:07.430 --> 01:24:07.870
4

01:24:09.150 --> 01:24:10.470
有一个有一个数组

01:24:11.430 --> 01:24:12.190
ar

01:24:12.190 --> 01:24:12.910
随便写吧

01:24:13.390 --> 01:24:14.070
abc

01:24:14.710 --> 01:24:15.390
bcd

01:24:15.510 --> 01:24:16.190
然后了

01:24:16.750 --> 01:24:17.350
随便写

01:24:18.990 --> 01:24:19.830
随便写个数组

01:24:20.070 --> 01:24:20.310
好

01:24:20.310 --> 01:24:22.470
我们把这个数组的每一项一项拿出来

01:24:22.470 --> 01:24:23.230
怎么来变利呢

01:24:23.230 --> 01:24:24.030
可以用4

01:24:25.230 --> 01:24:25.670
in

01:24:25.670 --> 01:24:26.350
obj

01:24:27.230 --> 01:24:27.830
obj

01:24:28.190 --> 01:24:28.390
好

01:24:28.390 --> 01:24:29.750
我们这里输出prob

01:24:32.380 --> 01:24:33.020
ar

01:24:33.020 --> 01:24:33.860
ar

01:24:34.620 --> 01:24:35.540
注意大家看

01:24:35.780 --> 01:24:36.780
大家注意看一下

01:24:38.060 --> 01:24:39.820
这里输出的这个东西

01:24:40.540 --> 01:24:42.540
它到底是数组的值呢

01:24:42.540 --> 01:24:43.540
就是这些值

01:24:43.540 --> 01:24:45.260
这是数组的每一项的值

01:24:45.580 --> 01:24:49.140
还是说它是数组的下标

01:24:49.580 --> 01:24:50.380
这个prob

01:24:50.380 --> 01:24:51.300
是数组的下标

01:24:51.300 --> 01:24:52.340
还是数组的值

01:24:53.100 --> 01:24:53.780
搞清楚

01:24:55.060 --> 01:24:56.260
这个循环的是啥

01:24:56.260 --> 01:24:59.380
循环的是对象的属性名

01:25:00.860 --> 01:25:02.660
数组的属性名是不是下标

01:25:03.020 --> 01:25:03.940
是下标吧

01:25:04.180 --> 01:25:04.940
01234

01:25:05.500 --> 01:25:06.780
这才是它的属性名

01:25:06.940 --> 01:25:07.860
它是下标

01:25:07.860 --> 01:25:08.380
注意

01:25:08.380 --> 01:25:09.900
这里循环的是数组的下标

01:25:10.660 --> 01:25:12.220
得到了是012345

01:25:12.780 --> 01:25:13.700
有些同学说

01:25:13.900 --> 01:25:14.820
有些同学想的很细

01:25:15.420 --> 01:25:16.900
Ns不是属性名吗

01:25:16.900 --> 01:25:18.180
Ns怎么没出来呢

01:25:18.180 --> 01:25:19.620
Ns这个字不算没出来了

01:25:21.180 --> 01:25:22.140
因为数组这一块

01:25:22.140 --> 01:25:23.100
我们以后会讲

01:25:23.100 --> 01:25:24.820
以后会讲关于这个浮应循环

01:25:24.820 --> 01:25:26.140
它循环的到底是什么东西

01:25:26.300 --> 01:25:27.020
Ns这一块

01:25:27.020 --> 01:25:28.220
它做了特殊处理的

01:25:28.540 --> 01:25:29.700
它做了特殊处理

01:25:29.700 --> 01:25:30.780
所以说它不会循环到

01:25:31.020 --> 01:25:32.260
不会循环到Ns

01:25:32.620 --> 01:25:33.940
它只会得到它的下标

01:25:33.940 --> 01:25:35.220
所以我们可以通过这种方式

01:25:35.220 --> 01:25:36.940
能得到数组的所有下标

01:25:36.940 --> 01:25:38.380
因此在变量命名的时候

01:25:38.500 --> 01:25:39.460
我们循环

01:25:39.460 --> 01:25:41.060
如果循环的是一个数组的话

01:25:41.060 --> 01:25:43.260
我们往往会在这里写上一个index

01:25:43.620 --> 01:25:44.980
表示个数组的下标

01:25:46.540 --> 01:25:46.940
保存

01:25:46.940 --> 01:25:47.620
是一样的

01:25:47.620 --> 01:25:49.180
就把变量的名字改了一下

01:25:49.180 --> 01:25:50.060
012345

01:25:50.300 --> 01:25:50.780
你看

01:25:50.780 --> 01:25:52.940
我就可以把数组的下标全部得到了

01:25:53.660 --> 01:25:55.220
我能得到下标了

01:25:55.220 --> 01:25:56.780
我是不是又可以得到值了

01:25:57.540 --> 01:25:58.580
下标都给你了

01:25:58.580 --> 01:26:00.020
你是不是可以得到值了

01:26:00.020 --> 01:26:01.300
我要得到值怎么办

01:26:01.500 --> 01:26:02.300
得到值的话

01:26:02.300 --> 01:26:03.220
就是数组

01:26:03.220 --> 01:26:04.220
把下标扔进去

01:26:05.380 --> 01:26:06.180
把下标扔进去

01:26:06.180 --> 01:26:06.980
能看懂吗

01:26:07.380 --> 01:26:09.340
这个中国号里边写的是表达式

01:26:09.340 --> 01:26:10.780
表达式可以是任何东西

01:26:10.780 --> 01:26:13.620
它就把这个变量的值作为下标

01:26:13.620 --> 01:26:15.700
来取出数值对应的向了值

01:26:16.580 --> 01:26:17.460
保存看一下

01:26:18.100 --> 01:26:18.660
你看

01:26:18.820 --> 01:26:21.020
数的每一项每一项都得到了

01:26:22.140 --> 01:26:24.220
并且它可以从颜色可以看出

01:26:24.220 --> 01:26:25.540
这个下标是什么内形

01:26:25.820 --> 01:26:26.900
是不是制服串内形

01:26:27.820 --> 01:26:28.500
再来一个

01:26:28.500 --> 01:26:30.500
Type index

01:26:30.620 --> 01:26:31.420
看一下它啥内形

01:26:31.420 --> 01:26:32.940
你可能认为是数字内形

01:26:33.180 --> 01:26:33.940
它是制服串

01:26:33.940 --> 01:26:35.100
我们之前反复抢掉了

01:26:35.100 --> 01:26:36.820
属性的名字只能是制服串

01:26:36.940 --> 01:26:37.900
不能是其他玩意

01:26:38.780 --> 01:26:39.380
说完了

01:26:39.660 --> 01:26:39.980
对吧

01:26:39.980 --> 01:26:40.460
就完了

01:26:40.900 --> 01:26:41.340
OK

01:26:41.340 --> 01:26:42.260
这是否硬循环

01:26:42.340 --> 01:26:44.180
我们可以通过这种方式来便利数组

01:26:44.300 --> 01:26:46.140
当然便利数组能不能用之前的

01:26:46.140 --> 01:26:46.980
否循环了

01:26:47.260 --> 01:26:48.300
当然可以

01:26:48.780 --> 01:26:49.980
否循环怎么循环

01:26:50.180 --> 01:26:50.940
否循环的话

01:26:50.940 --> 01:26:53.380
我们就也是循环下标

01:26:54.020 --> 01:26:55.740
下标从零开始

01:26:56.020 --> 01:26:59.540
小约数组的长度

01:27:00.100 --> 01:27:01.100
那么下标的取

01:27:01.100 --> 01:27:02.620
这个I的取值范围是多少

01:27:03.060 --> 01:27:05.060
I的取值范围是不是0到

01:27:06.020 --> 01:27:08.060
数组长度减1

01:27:08.940 --> 01:27:09.740
能看懂吗

01:27:10.420 --> 01:27:13.860
I的取值范围是0到数组长度减1

01:27:13.860 --> 01:27:15.860
那是不是刚好是下标的范围

01:27:16.300 --> 01:27:17.780
是不是刚好是下标的范围

01:27:18.020 --> 01:27:19.860
那么I就是下标

01:27:19.860 --> 01:27:20.140
对吧

01:27:20.140 --> 01:27:20.820
I就是下标

01:27:20.820 --> 01:27:21.820
我们每次输出

01:27:21.820 --> 01:27:24.180
输出这个AR

01:27:24.340 --> 01:27:25.180
I就行了

01:27:25.540 --> 01:27:26.260
输出AR

01:27:26.260 --> 01:27:26.940
I就行了

01:27:27.300 --> 01:27:28.060
保存看一下

01:27:29.260 --> 01:27:29.740
你看

01:27:30.220 --> 01:27:31.860
这样子也可以得到数组的每一项

01:27:32.020 --> 01:27:33.500
也可以得到数组的每一项

01:27:34.300 --> 01:27:35.940
这里可能会出现面试题

01:27:36.780 --> 01:27:37.540
面试的时候

01:27:37.540 --> 01:27:38.940
它可能可能不是比试

01:27:39.060 --> 01:27:40.100
它可能直接就问你

01:27:41.460 --> 01:27:42.380
它问你啥呢

01:27:43.060 --> 01:27:46.300
用for循环来便利数组

01:27:47.060 --> 01:27:47.980
什么叫便利数组

01:27:47.980 --> 01:27:49.900
就是把数组的每一项一个一个拿出来

01:27:50.100 --> 01:27:50.780
就是便利

01:27:51.460 --> 01:27:53.420
用for循环来便利数组

01:27:53.620 --> 01:27:55.980
和用for硬有什么样的区别

01:27:56.900 --> 01:27:59.060
我以知识点影讲到了

01:27:59.060 --> 01:27:59.980
你能不能告诉我

01:27:59.980 --> 01:28:01.380
for循环和for硬循环

01:28:01.380 --> 01:28:02.900
便利数组有什么样的区别

01:28:05.900 --> 01:28:07.660
它最大的区别在哪呢

01:28:07.820 --> 01:28:10.100
最大的区别在于稀松数组

01:28:11.820 --> 01:28:13.500
最大的区别在于稀松数组

01:28:13.700 --> 01:28:14.220
你看

01:28:14.220 --> 01:28:16.020
现在这个数组变成了一个稀松数组

01:28:16.820 --> 01:28:18.780
你用for循环来便利的话

01:28:19.020 --> 01:28:21.340
你看下标是不是会取到这个位置

01:28:21.820 --> 01:28:23.500
因为它的范围固定

01:28:23.500 --> 01:28:25.780
我们把这个数组输出

01:28:26.460 --> 01:28:27.820
它的范围是固定的

01:28:28.340 --> 01:28:28.980
你看

01:28:29.140 --> 01:28:30.020
中间空了三项

01:28:30.020 --> 01:28:30.420
对吧

01:28:30.420 --> 01:28:31.180
空了三项

01:28:31.180 --> 01:28:31.740
你看没

01:28:31.740 --> 01:28:32.980
这数组里边中间空了三项

01:28:32.980 --> 01:28:34.980
012345就没了

01:28:35.380 --> 01:28:36.860
35这个下标就没了

01:28:36.860 --> 01:28:38.500
但是你用for循环的话

01:28:38.500 --> 01:28:40.580
是不是能循环到35这个下标

01:28:41.140 --> 01:28:42.860
i从0开始一次变化

01:28:42.860 --> 01:28:44.740
它能够循环到的这个下标

01:28:44.740 --> 01:28:47.620
因此你取出了某些项目是undefend

01:28:48.740 --> 01:28:50.220
因为它不存在这个属性

01:28:50.660 --> 01:28:52.580
比方说这个i等于3的时候

01:28:52.580 --> 01:28:53.540
它没有这个属性

01:28:53.540 --> 01:28:54.260
我们之前说过

01:28:54.260 --> 01:28:55.780
对象里面这个属性不存在

01:28:55.780 --> 01:28:57.180
那么得到的就是undefend

01:28:57.340 --> 01:28:58.340
它不会爆错的

01:28:58.340 --> 01:28:59.620
它得到的是undefend

01:28:59.620 --> 01:29:00.780
这是以前讲过的

01:29:01.620 --> 01:29:03.900
这样子它会把每一个项目都循环到

01:29:03.980 --> 01:29:05.340
哪怕是空向

01:29:05.340 --> 01:29:06.100
什么都没有

01:29:06.100 --> 01:29:07.180
它也会循环到

01:29:08.060 --> 01:29:10.380
但是你用for硬会不会

01:29:11.260 --> 01:29:13.180
你用for硬这个循环

01:29:13.180 --> 01:29:15.140
会不会循环到就是空向了

01:29:15.540 --> 01:29:16.700
它不会

01:29:16.700 --> 01:29:18.300
因为它循环的是啥

01:29:18.300 --> 01:29:20.220
它循环的是对象的属性

01:29:20.220 --> 01:29:21.900
这个对象根本就没有这个属性

01:29:21.900 --> 01:29:23.620
所以说用for硬循环

01:29:23.780 --> 01:29:24.900
它循环不到

01:29:24.900 --> 01:29:25.860
循环不到

01:29:25.860 --> 01:29:26.940
你看012过了

01:29:26.940 --> 01:29:27.980
属性就是6了

01:29:27.980 --> 01:29:28.780
7 8

01:29:28.780 --> 01:29:30.260
它没有35这个属性

01:29:30.260 --> 01:29:31.300
它循环不到

01:29:31.300 --> 01:29:32.660
这就是它们最大的区别

01:29:33.300 --> 01:29:34.900
在变利的数组的时候

01:29:34.900 --> 01:29:36.060
最大的区别就在这

01:29:37.700 --> 01:29:39.060
那么我们平时用哪一种呢

01:29:39.060 --> 01:29:39.460
随便

01:29:39.460 --> 01:29:42.620
如果一个数组本身就不可能是吸收数组的话

01:29:42.620 --> 01:29:43.340
那就随意

01:29:43.340 --> 01:29:43.860
随意

01:29:43.860 --> 01:29:44.620
用哪个都行

01:29:44.620 --> 01:29:45.580
用哪个都行

01:29:45.980 --> 01:29:46.860
这是关于

01:29:48.820 --> 01:29:51.300
for硬循环用来变利数组

01:29:51.300 --> 01:29:52.460
用来变利数组

01:29:53.300 --> 01:29:54.340
就是有的时候

01:29:55.100 --> 01:29:56.500
有的时候它可能会问

01:29:57.620 --> 01:29:59.300
可能会给你出这么一道题

01:30:00.420 --> 01:30:01.860
可能会给你出这么一道题

01:30:02.020 --> 01:30:03.300
它说了说啥呢

01:30:03.900 --> 01:30:04.700
它说这个意思

01:30:05.260 --> 01:30:05.860
它说让你

01:30:07.660 --> 01:30:09.060
创建一个

01:30:09.060 --> 01:30:12.460
创建一个长度为100的数组

01:30:13.380 --> 01:30:15.220
给数组的每一项

01:30:16.060 --> 01:30:17.180
复制为

01:30:18.620 --> 01:30:19.220
abc

01:30:19.540 --> 01:30:20.460
支付串abc

01:30:21.300 --> 01:30:22.900
让你去完成这么一道面试题

01:30:23.260 --> 01:30:24.420
这个面试题是出过的

01:30:24.420 --> 01:30:25.740
但是哪家公司我忘了

01:30:26.740 --> 01:30:28.580
之前有同学在说这个问题

01:30:28.580 --> 01:30:30.340
因为那个同学他作者作者

01:30:31.060 --> 01:30:32.220
他是用这种方式来做的

01:30:32.220 --> 01:30:32.900
那个同学

01:30:32.900 --> 01:30:33.980
他发现不行了

01:30:33.980 --> 01:30:34.820
为什么不行

01:30:35.300 --> 01:30:36.420
就是他回来

01:30:36.420 --> 01:30:37.380
因为面试的时候

01:30:37.380 --> 01:30:38.180
你是用笔

01:30:38.180 --> 01:30:39.140
只和笔在写

01:30:40.940 --> 01:30:41.620
有些公司

01:30:41.620 --> 01:30:43.420
他是给你提供电脑

01:30:43.420 --> 01:30:44.940
让你电脑上去做

01:30:44.940 --> 01:30:46.940
有些公司他是用只和笔来写的

01:30:46.940 --> 01:30:47.980
特别是有小公司

01:30:49.100 --> 01:30:50.780
因此他不知道自己写错没

01:30:50.780 --> 01:30:52.180
他回来自己去试验了一下

01:30:52.180 --> 01:30:53.100
发现有问题

01:30:53.100 --> 01:30:54.300
他想了半天都不知道

01:30:54.300 --> 01:30:55.300
为什么会有问题

01:30:55.300 --> 01:30:56.180
他是这样的写的

01:30:56.180 --> 01:30:56.820
大家看一下

01:30:57.700 --> 01:30:58.740
他定一个数组

01:30:58.900 --> 01:31:01.260
六而瑞长度为一百

01:31:01.260 --> 01:31:02.380
没问题吧

01:31:02.380 --> 01:31:03.140
是没问题

01:31:03.140 --> 01:31:04.740
长度为一百吗

01:31:04.740 --> 01:31:05.180
好

01:31:05.180 --> 01:31:07.140
然后给他每一项复制为ABC

01:31:07.140 --> 01:31:07.300
好

01:31:07.300 --> 01:31:08.380
他写了一个FORIN循环

01:31:10.380 --> 01:31:13.340
就IN这个数字每一项下标

01:31:13.340 --> 01:31:14.260
IN

01:31:14.260 --> 01:31:15.420
AR2

01:31:15.420 --> 01:31:16.620
循环数字每一个下标

01:31:16.620 --> 01:31:19.180
然后给这个数组的这一项复制

01:31:19.180 --> 01:31:21.100
复制为什么ABC

01:31:21.100 --> 01:31:21.900
他用循环复制

01:31:21.900 --> 01:31:24.180
他肯定不能用手动写一个100个

01:31:24.180 --> 01:31:26.220
肯定不会用手动写100个ABC

01:31:26.220 --> 01:31:27.860
那是太傻了

01:31:27.900 --> 01:31:29.900
他用这种方式来给数组复制

01:31:29.900 --> 01:31:30.860
找到他第一个下标

01:31:30.860 --> 01:31:32.460
给他的0复制为ABC

01:31:32.460 --> 01:31:33.220
找到第二个下标

01:31:33.220 --> 01:31:34.860
给他的1复制为ABC

01:31:34.860 --> 01:31:36.020
他用这种方式复制

01:31:36.020 --> 01:31:38.100
然后他打印出数字看了一下

01:31:38.100 --> 01:31:40.220
你发现数字不太对焦

01:31:40.220 --> 01:31:40.780
我们来看一下

01:31:42.140 --> 01:31:43.460
他发现那个数字根本就不太对焦

01:31:46.140 --> 01:31:46.780
一个都没有

01:31:46.780 --> 01:31:48.100
还是啥都没有

01:31:48.100 --> 01:31:49.460
这个数字还是啥都没有

01:31:49.460 --> 01:31:51.380
他是一个悉松数组

01:31:51.380 --> 01:31:53.780
为什么会造成这样的问题呢

01:31:53.780 --> 01:31:55.860
因为这样的创建的数组是一个悉松数组

01:31:55.860 --> 01:31:57.180
里边没东西

01:31:57.180 --> 01:31:59.820
你这样循环是循环不到任何东西的

01:31:59.820 --> 01:32:00.700
如果你要循环的话

01:32:00.700 --> 01:32:01.460
应该是怎么循环

01:32:01.460 --> 01:32:02.500
应该是用复循环

01:32:03.260 --> 01:32:04.100
应该是用复循环

01:32:05.660 --> 01:32:08.180
复I等于0

01:32:08.180 --> 01:32:10.100
I小于AR.nance

01:32:10.100 --> 01:32:11.700
对吧

01:32:11.700 --> 01:32:12.300
I++

01:32:13.740 --> 01:32:15.580
下来今天这节课下来

01:32:15.580 --> 01:32:18.780
熟悉复印循环和复循环

01:32:18.780 --> 01:32:20.740
熟悉复印循环和复循环

01:32:20.740 --> 01:32:22.380
这种格式你多去学几遍

01:32:22.380 --> 01:32:23.260
跟之前一样

01:32:23.260 --> 01:32:24.700
你先把用熟

01:32:24.700 --> 01:32:26.420
以后来说循环一个数组

01:32:26.420 --> 01:32:27.620
你马上就能想到这个

01:32:27.620 --> 01:32:28.220
或者是这个

01:32:30.300 --> 01:32:33.380
你看小于I的取得范围是0到数数长度减1

01:32:34.540 --> 01:32:37.340
然后ARI等于ABC

01:32:39.580 --> 01:32:41.180
保存看一下

01:32:41.180 --> 01:32:42.420
那么现在没问题了

01:32:42.420 --> 01:32:43.500
现在没问题了

01:32:43.500 --> 01:32:44.620
因为用复循环的话

01:32:44.620 --> 01:32:46.340
它的I它就能循环到

01:32:46.340 --> 01:32:48.020
它每一下就能循环到了

01:32:48.020 --> 01:32:49.900
用复印循环不行

01:32:49.900 --> 01:32:50.980
因为它没有这个属性

01:32:52.220 --> 01:32:54.700
其实数组里边它还给你提供了一个东西

01:32:54.740 --> 01:32:56.660
可以让你更加方便的做出这个效果

01:32:56.660 --> 01:32:57.740
什么叫feal

01:32:57.740 --> 01:32:58.380
feal

01:32:58.380 --> 01:32:59.340
填充

01:32:59.340 --> 01:33:00.580
填充

01:33:00.580 --> 01:33:02.140
填充为ABC

01:33:02.140 --> 01:33:05.060
把数组的所有项填充为ABC

01:33:05.060 --> 01:33:06.300
用这个函数也可以

01:33:06.300 --> 01:33:08.420
用这个函数也可以

01:33:08.420 --> 01:33:11.220
这个函数我们之后再讲吧

01:33:11.220 --> 01:33:12.020
现在把讲了吧

01:33:12.020 --> 01:33:12.780
都说到这了

01:33:12.780 --> 01:33:13.300
都说到这了

01:33:13.300 --> 01:33:14.420
把讲了

01:33:14.420 --> 01:33:14.860
也没啥

01:33:14.860 --> 01:33:15.700
这个函数也很简单

01:33:17.420 --> 01:33:18.340
比方说这个函数

01:33:18.340 --> 01:33:20.180
我们这里补充一个函数

01:33:20.180 --> 01:33:20.940
其他套处

01:33:20.940 --> 01:33:22.380
这里

01:33:22.380 --> 01:33:23.860
feal

01:33:23.860 --> 01:33:24.580
就是数组

01:33:26.500 --> 01:33:28.020
feal

01:33:28.020 --> 01:33:28.180
好

01:33:28.180 --> 01:33:28.940
这个函数里边

01:33:30.620 --> 01:33:31.260
怎么用

01:33:31.260 --> 01:33:32.180
它可以这样用

01:33:32.180 --> 01:33:32.660
数组

01:33:34.100 --> 01:33:37.060
数组feal

01:33:37.060 --> 01:33:38.020
数据

01:33:38.020 --> 01:33:38.380
什么意思

01:33:38.380 --> 01:33:40.980
将数组的所有项

01:33:40.980 --> 01:33:43.580
将数组的所有项

01:33:44.700 --> 01:33:46.700
填充为

01:33:46.700 --> 01:33:48.660
填充为指定的数据

01:33:48.660 --> 01:33:49.340
指定的数据

01:33:50.740 --> 01:33:50.940
好

01:33:50.940 --> 01:33:52.380
它还有其他用法

01:33:52.380 --> 01:33:54.620
数组feal

01:33:54.660 --> 01:33:55.140
数据

01:33:56.380 --> 01:33:57.580
逗号

01:33:57.580 --> 01:33:58.900
开始位置

01:33:58.900 --> 01:33:59.820
就开始下标

01:34:01.900 --> 01:34:02.700
就是什么呢

01:34:02.700 --> 01:34:07.660
将数组从开始下标起

01:34:07.660 --> 01:34:10.220
从指定的开始下标起

01:34:10.220 --> 01:34:13.020
然后到数组的莫为

01:34:13.020 --> 01:34:15.540
填充为指定的数据

01:34:16.860 --> 01:34:16.980
好

01:34:16.980 --> 01:34:18.660
我们来看一下这个第二种用法

01:34:18.660 --> 01:34:18.780
好

01:34:18.780 --> 01:34:19.340
第二种用法

01:34:19.340 --> 01:34:22.860
就比方说这里写一个3

01:34:22.860 --> 01:34:24.020
从这个下标开始

01:34:24.060 --> 01:34:24.900
从这个下标开始

01:34:24.900 --> 01:34:27.020
一直的填充ABC到莫为

01:34:27.020 --> 01:34:28.340
保存看一下

01:34:28.340 --> 01:34:28.940
那么你看

01:34:30.940 --> 01:34:33.100
它就从下标为3开始

01:34:33.100 --> 01:34:34.020
下标为3开始

01:34:34.020 --> 01:34:35.820
前面的012是不是没了

01:34:35.820 --> 01:34:37.980
012就没了

01:34:37.980 --> 01:34:40.020
这是用这个

01:34:40.020 --> 01:34:41.100
然后呢

01:34:41.100 --> 01:34:41.940
还有一种用法

01:34:41.940 --> 01:34:42.620
还有一种用法

01:34:44.220 --> 01:34:46.540
再写一个结束下标

01:34:46.540 --> 01:34:47.820
结束下标

01:34:47.820 --> 01:34:49.220
那么从开始下标起

01:34:49.220 --> 01:34:50.660
到数组的结束下标

01:34:51.660 --> 01:34:52.980
结束

01:34:53.020 --> 01:34:54.300
下标

01:34:54.300 --> 01:34:55.020
它取不到

01:34:55.020 --> 01:34:56.500
取不到就结束下标

01:34:56.500 --> 01:34:57.180
取不到

01:34:58.300 --> 01:34:58.540
好

01:34:58.540 --> 01:34:59.620
填充为指定的数据

01:35:00.620 --> 01:35:00.780
好

01:35:00.780 --> 01:35:02.500
看一下这种用法

01:35:02.500 --> 01:35:04.060
3到5

01:35:04.060 --> 01:35:05.340
那么就是把3和4

01:35:05.340 --> 01:35:06.660
下标为3和4的位置

01:35:06.660 --> 01:35:08.020
填充为ABC

01:35:08.020 --> 01:35:08.860
保存看一下

01:35:10.260 --> 01:35:11.020
3和4的位置

01:35:11.020 --> 01:35:11.660
填充为ABC

01:35:11.660 --> 01:35:12.900
其他的地方全是MT

01:35:12.900 --> 01:35:14.140
全是空的

01:35:14.140 --> 01:35:15.500
没东西

01:35:15.500 --> 01:35:15.900
好吧

01:35:15.900 --> 01:35:16.940
这是废物

01:35:16.940 --> 01:35:17.620
有的时候呢

01:35:17.620 --> 01:35:18.500
也蛮有用的

01:35:21.300 --> 01:35:21.620
好

01:35:21.660 --> 01:35:23.740
这是关于数组这一块

01:35:23.740 --> 01:35:24.180
好

01:35:24.180 --> 01:35:25.140
时间有点多

01:35:25.140 --> 01:35:27.500
因为它数组的里边常见操作太多了

01:35:27.500 --> 01:35:29.820
涉及到里边有很多的数组里边

01:35:29.820 --> 01:35:30.740
因为数组是个对象

01:35:30.740 --> 01:35:31.500
是吧

01:35:31.500 --> 01:35:32.900
对象里边还本来有属性的

01:35:32.900 --> 01:35:33.180
对吧

01:35:33.180 --> 01:35:34.580
还会给你加了很多的属性

01:35:34.580 --> 01:35:35.700
这都是属性

01:35:35.700 --> 01:35:37.940
只不过这些属性是函数而已

01:35:37.940 --> 01:35:39.500
通过使用这些属性

01:35:39.500 --> 01:35:41.980
我们可以对数组的去做一些操作

01:35:41.980 --> 01:35:43.060
那么添加一个数据

01:35:43.060 --> 01:35:44.540
删除一个数据

01:35:44.540 --> 01:35:46.060
然后还有什么

01:35:46.060 --> 01:35:46.900
添加

01:35:46.900 --> 01:35:47.940
删除查询

01:35:47.940 --> 01:35:48.780
我们就用循环

01:35:48.780 --> 01:35:49.660
就用遍地

01:35:49.660 --> 01:35:50.180
对吧

01:35:50.180 --> 01:35:51.300
修改的话

01:35:51.340 --> 01:35:51.860
修改的话

01:35:51.860 --> 01:35:52.860
你直接复制就完事了

01:35:52.860 --> 01:35:54.100
像这种就是修改

01:35:54.100 --> 01:35:55.100
直接复制就完事了

01:35:55.100 --> 01:35:56.340
这个没啥好说的

01:35:56.340 --> 01:35:59.460
我们就可以来控制数组的方方面面

01:35:59.460 --> 01:35:59.660
好

01:35:59.660 --> 01:36:00.500
有了数组过后

01:36:00.500 --> 01:36:04.380
我们就以后有很多相同意识的数据

01:36:04.380 --> 01:36:07.100
我们就可以把它放到一个数组里边

01:36:07.100 --> 01:36:07.860
那么下节课

01:36:07.860 --> 01:36:09.780
我们就来讲这个数组的应用

01:36:09.780 --> 01:36:11.580
通过一些练习

01:36:11.580 --> 01:36:14.140
来知道这个数组有哪些常用的方式

01:36:14.140 --> 01:36:17.020
我们先把这个知识有这么一个印象

01:36:17.020 --> 01:36:17.820
记不住没关系

01:36:17.820 --> 01:36:18.900
这里面很多东西记不住

01:36:18.900 --> 01:36:19.940
没关系

01:36:19.940 --> 01:36:21.180
你后边忘了

01:36:21.260 --> 01:36:22.660
只要你前面有这么一个印象

01:36:22.660 --> 01:36:25.100
不要说我们后面要删除数字的某一个东西

01:36:25.100 --> 01:36:26.700
忘了这数字怎么删除的了

01:36:26.700 --> 01:36:28.300
回过头来去看一下

01:36:28.300 --> 01:36:29.660
有的时候东西用多了

01:36:29.660 --> 01:36:30.540
你自然就记住了

01:36:30.540 --> 01:36:31.340
用的少了

01:36:31.340 --> 01:36:32.420
你自然记不住

01:36:32.420 --> 01:36:33.060
好吧

01:36:33.060 --> 01:36:33.380
OK

01:36:33.380 --> 01:36:34.380
这是关于数组的一会

