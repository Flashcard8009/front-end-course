WEBVTT

00:00.000 --> 00:16.150
按照惯例 咱们先还是想一下题

00:16.670 --> 00:23.590
作业2 作业1的答案我就讲过就算了 作业1的答案就没有了

00:23.830 --> 00:27.430
因为那个时候还没有写代码 直接在网上进行测试的

00:27.930 --> 00:30.750
咱们直接写作业2的答案 地道题

00:31.510 --> 00:34.850
书写个正的表达式 据匹配个字部刷得到匹配的次数和匹配的结果

00:34.850 --> 00:38.430
是做过的 咱们快速做一遍 地地题 快速做一遍

00:43.730 --> 00:45.330
好 随便写个正的表达式

00:45.330 --> 00:46.530
正的表达式

00:49.160 --> 00:50.520
嗯 就

00:52.040 --> 00:53.400
abc 或者是

00:53.880 --> 00:57.480
数字 数字 三次数字 匹配三次数字

00:57.920 --> 01:00.360
好 这里面写一个字部刷 写个字部刷

01:00.360 --> 01:06.760
s 来进行匹配吧 随便写个字部 数字 数字 数字 字部刷 数字

01:06.760 --> 01:07.400
好 OK

01:07.840 --> 01:12.400
好 写好了之后来进行匹配 我要得到匹配的次数和匹配的结果

01:12.840 --> 01:15.600
好 怎么匹配呢 我们就可以用这种方式 对吧 我们之前

01:16.280 --> 01:21.280
写过了 对不对 用一个变量 n 来记录次数 对不对 来记录次数 好 yl 循环

01:21.840 --> 01:25.840
yl 循环的话 这里我们写过的 result result 等于什么呢

01:26.320 --> 01:30.720
excute 然后这里写上什么 写上 s

01:31.360 --> 01:36.120
去匹配这个字部刷 然后这里进行全匹匹配 没匹配一次呢

01:36.720 --> 01:41.640
只要它有值 只要它有值呢 我们怎么样呢 n 加加次数加1

01:42.160 --> 01:47.480
然后呢 这里就直接输出 直接输出 匹配的结果 匹配的结果就是 result0 对吧

01:48.240 --> 01:52.520
这个输出的第1项是匹配的结果 最后呢 我们输出匹配多少次

01:55.480 --> 01:59.120
匹配 匹配多少次呢 这个 n 次

02:00.000 --> 02:02.560
n 次就完了啊 非常简单 这地道体

02:03.560 --> 02:04.360
好 运行看一下啊

02:10.290 --> 02:16.130
啊 匹配的三次 对吧 好 这是地道体啊 有些同学说 这个东西如何把这个东西写上来呢

02:16.690 --> 02:20.130
就是如何 如何先输出匹配的三次 再输出这个结果呢

02:20.810 --> 02:26.810
啊 如果你要这样子输出的话 那么你可以这样子来做啊 就是用一个字部刷拼借一下啊 拼借一下这个字部刷

02:27.490 --> 02:30.730
啊 每一次呢 拼借一个啊 拼借一个

02:33.250 --> 02:38.730
str 啊 拼借一个这个 result 这个匹配的结果 然后呢 再拼借一个

02:38.850 --> 02:48.930
就是写缸 n 就是换行服啊 拼借一个换行 然后呢 最后循环完了之后呢 再在前边 这个字部刷的前边 在拼借上这个东西

02:49.450 --> 02:55.130
拼借这个东西 匹配做了这么多次啊 换行啊 拼借这么个东西 他再拼借他本

02:55.410 --> 03:01.450
拼借他本身啊 就是你把拼借好 拼借好了 最后一次性输出 最后一次性输出

03:02.250 --> 03:05.770
啊 就这样子 就完事了啊 就完事了 保存看一下啊

03:06.890 --> 03:08.210
就完事了啊 非常简单啊

03:09.330 --> 03:11.010
好 这是第一题啊 第二题

03:13.050 --> 03:17.330
得到一个字部刷中中文字符的数量 好 第二题啊

03:18.170 --> 03:25.210
一个字部刷中中文字符的数量 比方是一个字部刷啊 它里面有一些中文文字啊 有些中文文字啊 有些字部刷啊 有字部刷

03:25.650 --> 03:31.650
好 我们要得到中文字符的数量 怎么得到了 首先我们要匹配中文字符 对吧 匹配中文字符

03:31.970 --> 03:42.330
ok 我们这里匹配中文字符呗 中文字符是什么啊 就是之前写的这个写钢EO对吧 4億零零到的话 写钢EO9FA5 对不对

03:43.170 --> 03:51.570
好 这是中文的字符啊 就是它的范围 好 那么在这个范围内进行匹配呗 对吧 全局匹配啊 看一下匹配多少次就完事了 对不对

03:52.050 --> 03:56.370
匹配多少次就完事了 这里呢 咱们就直接来呗 咱们直接来

03:57.050 --> 04:00.810
好 看一下啊 这就直接写test了啊 test 去匹配吧啊

04:01.210 --> 04:08.610
如果匹配成功的话就N加加啊 直到它不成功为止 那么最后呢输出这个次数N就完事了 非常简单

04:09.130 --> 04:12.530
保存看一下啊 这就是匹配的中文的数量

04:14.130 --> 04:22.370
好 刷新 七个中文 对吧 七个中文啊 数一下吧 七个中文啊 非常简单啊 这道题 好 下面这道题啊 郭立民干辞

04:23.410 --> 04:27.690
好 将字部刷到的民干辞呢 替换为四个星号啊 这个挺的稍微有点难度

04:28.010 --> 04:35.930
稍微都有个难度啊 首先呢 我们这里写个函数啊 叫做remove 民干辞

04:37.210 --> 04:43.370
哎 又得翻译了 这不不太常用的单词就挤不住

04:44.650 --> 04:49.210
敏干辞翻译一下啊sensitive

04:50.050 --> 04:55.290
sensitive words 好 这样子啊 我就这样子写remove sensitive words

04:56.290 --> 05:04.610
好 郭立民干辞 你给我一个制服创 我把它的名 我就是把它的敏干制服呢 进行替换

05:04.930 --> 05:13.730
返回一个新的制服创 打上个注射啊 将制服创中敏干辞会替换为啊 替换为

05:14.490 --> 05:22.490
后边给跟上一个吧 后边跟上一个你要替换的啊replace 你要替换的就值啊 你要替换值啊

05:23.490 --> 05:27.730
replace啊 几个显示 你要替换的值啊 替换为指定的

05:28.570 --> 05:33.450
制服创 那么到时候调用的时候怎么调用的 我这样写啊 到时候呢 我比方说

05:34.970 --> 05:43.010
我们这里调用那个函数remove sensitive words啊 给他一个制服创啊 给他一个制服创 这个制服创中有些敏干辞会啊 有些敏干辞会

05:43.410 --> 05:50.570
比方说什么啊 算了 政治的政治的指挥我就不写了啊 免得查水表 表示色情啊 比方说

05:51.210 --> 05:57.890
暴力啊 暴力 然后呢 再写一些啊 再写一些 我希望把这些敏干辞会呢替换成为

05:58.570 --> 06:03.450
就是这个指定的值 就第二个参数 第二个参数呢 我们指定啊 指定

06:04.490 --> 06:08.250
指定什么呢 指定我替换的结果替换为四个星号啊 四个星号

06:08.690 --> 06:15.770
只要出现敏干辞会 我就把它替换为四个星号 没问题吧啊 比方说 再来一个啊 如本为流鼻

06:16.610 --> 06:24.570
这个我不怕查水表啊 不所谓的啊 比方说啊 把它替换为这些东西啊 再来一个吧 猫一战

06:27.410 --> 06:37.530
那么这里呢 我们需要准备好一个敏干辞的词汇数组啊 需要准备好一个敏干辞的词汇数组啊 这个数组呢 我们最好就在外面写吧 写个数组啊

06:38.410 --> 06:39.130
sensitive words

06:40.090 --> 06:41.210
scent words

06:42.170 --> 06:45.850
准备好一个数组 这个数组里边记录的全是敏干辞 然后设情

06:47.210 --> 07:00.810
暴力 当然还可以其他东西啊 你就一次添加 以后呢 我们就可以用很多方式来得到这个数组了 比方说 我可以把它存到数据库啊 但是 但是呢 那是另外另外一块支持了啊 但是我们以以后肯定有各种办法来存放这个敏干辞会

07:02.490 --> 07:03.050
如本为

07:04.770 --> 07:05.370
猫一战

07:06.330 --> 07:17.210
对吧 最近不是有个端子吗 也不是端子啊 好像是真的 我没有去测试过啊 他们在说啊 说在微微信里边去发布发布这么一句话叫

07:17.770 --> 07:22.250
卢起袖子 卢起袖子

07:24.090 --> 07:24.570
袖子

07:25.450 --> 07:30.650
加油干 发现这里边有很多的敏感词汇 就这么一句话啊 挺有意思

07:31.450 --> 07:34.250
好 这里面啊 我们写四个吧 写四个 好吧

07:35.050 --> 07:45.690
写四个啊 敏感词汇啊 当然这里面可能很多啊 当然如果一个真实的网站里边 他要过滤敏干辞的话 这些东西是要存数据库的 但是最终呢 可能会一定会放到数组里边

07:46.170 --> 07:52.170
把它放到数组里边 总之我们得到这么一个数组 我要通过这个数组呢 来过滤一个制度创造中的敏感词汇

07:52.730 --> 07:53.690
好 怎么来过滤呢

07:54.650 --> 08:00.170
这里呢 我们可以用证则表达式 就看一下这个制度创造中有没有匹配到这些敏感词汇

08:00.650 --> 08:08.170
因此这个证则表达式该怎么写呢 虽然我们得到个证则表达式啊 这证则表达式该怎么写呢 看一下啊 当然要全居匹配

08:08.730 --> 08:17.530
啊 比方说啊 就这些这些敏感词汇 我们是不是应该这样子写啊 色情啊 然后暴力对吧 是不是应该这样子写

08:19.130 --> 08:19.610
没问题吧

08:20.730 --> 08:26.010
把这些敏感词汇这样子拼接来 拼接起来 那么这些都是全是规则 对不对 全是规则

08:26.570 --> 08:30.330
满足这些规则的任何一个 那么都表示匹配 都表示匹配

08:31.050 --> 08:35.210
没问题吧 这些都属于敏感词汇啊 都属于敏感词汇

08:36.010 --> 08:40.250
好了 那么我们问题是 我的敏感词汇在数组里边

08:40.730 --> 08:46.650
它不能直接这样子写死 你这样子写死过后呢 数组到时候一变 那你是不是这里又得变

08:47.050 --> 08:50.250
对吧 你不能写死 因此的我这里该怎么处理呢

08:50.810 --> 08:53.770
我这里呢 就不能用这种质面量的方式来创建了

08:54.330 --> 08:57.850
我要用这种方式来创建 看着啊 我要用一个new

08:59.370 --> 09:03.210
rigal expression 用这种方式来创建 把它放到制服创意里边

09:04.490 --> 09:08.810
把它放到制服创意里边 拳击匹配 于是呢 这个制服创意是不是可以拼接出来

09:09.370 --> 09:12.250
这个制服创意怎么拼接出来 是不是就是拿这个

09:12.890 --> 09:18.010
敏感词汇交引 交引什么 是不是这个玩意啊 没问题吧

09:18.570 --> 09:20.250
这样子呢 是不是拼接出来了一个

09:20.970 --> 09:23.370
郑者表达式 对吧 一个郑者表达式的制服创意

09:23.370 --> 09:30.490
就是这个地方呢 要灵活运用啊 你不能写字面量了 因为它不是直接书写出来的啊 是来自于这个数组

09:31.130 --> 09:32.810
好 有了这个郑者表达式之后呢

09:34.010 --> 09:35.530
咱们怎么样呢 我们是不是可以来

09:36.810 --> 09:43.610
匹配什么 匹配这个啊 就这个就这个东西 这个制服创意了 对吧 给你的这个制服创意来进行匹配

09:44.330 --> 09:47.770
然后呢怎么样呢 然后把匹配到了结果替换为

09:48.490 --> 09:55.530
这个东西 对吧 所以说我们这里怎么处理 就是s replace替换 郑者表达式传进去

09:56.410 --> 09:58.410
然后替换成什么了 替换成这个玩意啊

09:59.530 --> 10:04.490
所以完了 就完了呗 还要干嘛呢 对不对 直接把这个替换的结果返回

10:05.370 --> 10:10.360
好 保存看一下啊 好 看一下

10:11.160 --> 10:17.080
你看 是不是敏感词汇全部被替换掉了 对吧 全部被替换掉了 就这样就写完了

10:17.960 --> 10:24.280
好 那比方说啊 咱们假设有这么一个需求 你看这里 有两个敏感词汇挨在一起了

10:25.160 --> 10:31.000
如果两个敏感词汇挨在一起了 我希望呢 我希望怎么样呢

10:31.880 --> 10:38.280
把它替换为只有四个型号 就是替换只替换只替换一次啊 如果挨在一起的话只替换一次

10:39.480 --> 10:40.120
该怎么做呢

10:40.840 --> 10:49.080
比方说啊 这里有两个敏感词汇 社群暴力 两个敏感词汇挨在一起了 因此呢 我要把它替换成只替换一次

10:50.120 --> 10:52.360
那么我们就可以用这种方式来做看着啊

10:52.920 --> 10:55.480
咱们之前的写这种表达式是这样子写的 对吧

10:56.760 --> 11:02.920
这个玩意儿 然后呢 再加上 拼接这个玩意儿 再拼接这个玩意儿

11:03.160 --> 11:10.870
再拼接这个玩意儿 之前是这样子写的 对吧 好 我把这一坨呢全部扩起来

11:11.830 --> 11:20.070
啊 扩起来 整个这一坨啊 整个这一坨它出现多少次呢 出现一次或多次

11:20.470 --> 11:26.950
你看它是不是有贪婪匹配模式 对吧 贪婪匹配法 它就是尽量的多匹配啊 出现一次或多次

11:27.510 --> 11:30.710
没问题吧 好 那么我们就这样子写呗啊 我们这里

11:31.350 --> 11:37.350
用个模板制服串啊来做它的规则啊 这个这个部分呢 是连接的结果啊 连接的结果

11:37.750 --> 11:42.630
就中间这一部分 把连接起来啊 这这一部分 把连接起来 然后前面呢 加上一个扩号

11:43.350 --> 11:47.270
后面呢 加上一个扩号 然后再呢 加上个加号 你看 我这样子写

11:48.150 --> 11:54.710
保存看一下啊 你看这个地方 连着的这个地方 由于它贪婪匹配 它匹配了很多个 因此呢 它

11:55.350 --> 11:57.190
把整体上替换成了四个信号

11:58.150 --> 12:04.310
怎么样 这就是敏感词汇的匹配方式啊 非常简单啊 其实你只要想到了用这种方式来做

12:04.790 --> 12:10.950
代码就没有多少了 其实我们说提一道题的复杂还是简单 他不看代码量的多少

12:11.270 --> 12:17.670
他不是说代码写的越多也越复杂 那不一定的 有的时候一两行的代码 你反而不太容易想到 你就是想不到

12:19.510 --> 12:27.830
好 下一个啊 得到一个atm制服串 制服串中出现了章节数量 就这里面出现了多少章节啊 出现章节的数量

12:28.790 --> 12:31.430
好 那咱们呢来匹配这么一个制服串啊 把它复制一下

12:32.390 --> 12:36.070
把这个制服串复制一下 这是第几题啊

12:38.470 --> 12:45.190
第四题 无忧的重新复制了 看一下 重新复制一下啊 好 把方过来啊

12:46.950 --> 12:50.730
有这么一个制服串 也挺没有 粘贴过来

12:54.090 --> 12:59.850
复制 好 粘贴过来啊 有这么一个制服串啊 写好了 把这 我靠

13:00.330 --> 13:05.050
这个太多了啊 总之这个制服串写好了 现在我们要做的事情是

13:05.450 --> 13:09.610
在这个制服串里边去匹配 匹配有多少个章节 那么我们看一下章节有什么特征

13:09.930 --> 13:15.930
他是不是放到a72这个元素里面的 对吧 放到a72元素里面的 还有一个特征是什么 他前面一定有个d

13:16.410 --> 13:20.490
多少多少章 对吧 我按照这个规则来进行匹配啊 比方说

13:21.130 --> 13:25.450
我们写个这么的表达是他的规则呢 我们要把把它匹配出来 怎么来匹配呢

13:25.850 --> 13:35.930
匹配出啊 前边是啥呢 前边是一个肩扩号 对吧 h72元素 然后后边呢 是一个肩 是一个鞋杠啊 鞋杠

13:36.890 --> 13:37.770
h2

13:38.330 --> 13:43.610
结尾 但是鞋杠有特殊含义 看到没 鞋杠表示正转表达式的结束 因此呢你这里转移

13:44.170 --> 13:48.170
转移一下 一个普通的鞋杠 然后中间呢 写的是文字第

13:48.730 --> 13:52.810
第多少什么章 对不对 多少章 中间这一部分呢是

13:53.210 --> 13:58.170
数字 它数字呢可能会出现零个 出现一个或多个

13:58.810 --> 14:00.970
出现一个或多个数字 你看这就是正转的表达式

14:01.290 --> 14:07.690
你把这个正转表达式写出来了 是不是就完了 对不对 就完事了呗好 然后来匹配呗好 匹配什么呢

14:09.210 --> 14:11.050
test 什么啊 或者是

14:11.690 --> 14:17.130
excuse 哎 无所谓吧 我们直接哇 循环 rig test test 制服串 atml

14:17.930 --> 14:22.490
来去匹配 看匹配了多少次呗 对不对 或者说我们用这个制服串用什么呢

14:22.890 --> 14:33.690
用这个merge来进行匹配 匹配出来是不是个数组 对吧 是不是个数组啊 ok 我们得到一个结果啊 匹配出来一个结果

14:33.930 --> 14:37.610
它是个数组 我们就看这个数组长度不就完了吗 买输出这个数组啊

14:38.650 --> 14:41.450
看一下这个数组长度 当然如果没有匹配的话得到的就是 now

14:42.250 --> 14:50.820
看一下吧啊 你看一下这个数组 这边匹配出来了 对不对 这个数组长度是不是就章节的数量

14:51.300 --> 14:55.780
对不对啊 那如果没有匹配的话啊 如果没有匹配的话 得到就是 now

14:56.020 --> 15:04.580
所以说你判断一下呗 判断一下啊 如果result有值的话 那么输出啊 这个数组的长度就完事了啊

15:04.980 --> 15:09.940
如果没有值的话 那就输出0呗啊 就输出0啊 匹配的0次 0个章节

15:10.500 --> 15:12.500
保存看一下呗啊 四个章节嘛

15:14.420 --> 15:17.540
好 这是上上节课的就是作业题啊 讲解一下

15:18.500 --> 15:21.300
好 这节课啊 这节课是咱们真的表达是最后一块知识的

15:21.940 --> 15:25.860
就是竞节部分啊 竞节部分呢 这一块有点深度啊 它深度比较深

15:26.500 --> 15:33.780
这一部分呢 我们平时用的话倒是不怎么会用到这一块知识 有的事会用到啊 不一定会用到

15:34.020 --> 15:38.900
这说不好啊 说不好 有的时候呢 你用它啊 你用这种方式来做的话

15:39.780 --> 15:43.220
可以达到一些意想不到的效果 可以让你的代码的更加简洁

15:43.780 --> 15:47.460
有的时候呢 面试体里边会问到竞节部分的东西 他不会直接问你

15:47.540 --> 15:52.660
他会形成一道题 让你去解啊 而且这里面的东西是比较深的 我们来讲一讲吧

15:53.140 --> 15:56.340
其实也没多深啊 也没有多深 好 第一个补货组

15:56.980 --> 16:02.180
这什么意思呢 就是真的表达是里边用小扩号啊 用小扩号

16:04.100 --> 16:06.100
扩号包裹的部分

16:06.820 --> 16:09.380
叫做补货组啊 叫做补货组

16:10.020 --> 16:13.140
补货组呢 补货组会出现在

16:13.940 --> 16:15.940
啊 会出现在

16:16.580 --> 16:21.060
呃 什么 就是匹配结果中啊 匹配结果中

16:21.860 --> 16:25.140
好 什么意思啊 什么意思 我来解释一下 这里举个例子

16:25.860 --> 16:27.780
比方说 咱们来写一个例子啊

16:30.300 --> 16:32.300
关掉啊 重新来

16:33.580 --> 16:35.900
啊 这里有个规则啊 有个规则

16:36.860 --> 16:37.900
reg

16:39.180 --> 16:42.380
好 然后呢 这里边呢 我们写上这么一个东西啊

16:42.780 --> 16:45.900
呃 一个小扩号啊 一个小扩号

16:46.780 --> 16:49.580
小扩号里边呢 我们写这样子写 把它扩起来嘛

16:50.460 --> 16:54.860
斜杠地 一个数字 后边呢 跟上一个字母啊 后边跟上一个字母

16:55.340 --> 17:00.700
你看 这就是这就是小扩号 对吧 小扩号扩起来这一部分呢 叫做补货组

17:01.100 --> 17:03.900
好 小扩号这里呢 出现呃 比方说

17:04.780 --> 17:07.980
出现一次或多次啊一次或多次

17:08.620 --> 17:10.140
没问题吧

17:10.140 --> 17:12.140
好 然后咱们看一下啊

17:12.620 --> 17:13.620
我们有一个制服创

17:15.260 --> 17:21.500
s s 这个制服创呢 它是这样子写的啊 一些一个数字一些字母啊 加上一个横杠嘛

17:22.140 --> 17:24.940
然后呢 一个数字一些字母 加上一个横杠

17:25.660 --> 17:27.900
一个数字一些字母 加上一个横杠

17:29.020 --> 17:31.820
好 这是制服创 咱们来匹配一下啊 匹配一下

17:32.780 --> 17:38.220
我们这里呢 用这种方式来书写 result 等于reg xqt

17:38.460 --> 17:44.140
然后匹配 s 啊 匹配 s 当然我把它做成全句的啊 全句匹配

17:44.540 --> 17:48.780
匹配 s 好 匹配 s 过后呢 我们把这个匹配的结果输出

17:50.460 --> 17:53.260
匹配的结果输出 我们看一下输出一个什么样的东西

17:54.060 --> 17:59.100
以前呢 我们没有加小扩号啊 就是我们当时去测试这个东西的时候没有加小扩号

17:59.100 --> 18:01.740
那现在我们加了小扩号 我们看一下得到什么东西

18:04.220 --> 18:05.260
关闭其他表现件了

18:05.980 --> 18:06.620
好 看一下啊

18:07.020 --> 18:12.780
你会得到 你会看到 以前呢 我们会发现这个书组呢

18:13.340 --> 18:18.700
这个书组呢 第一项 它表示的是匹配的结果 对吧 匹配的结果

18:19.260 --> 18:21.580
但是现在你会发现书组里面多了一项了

18:22.060 --> 18:26.860
看没 它多了一项了 多了这项是啥呢 好像也是匹配结果

18:27.100 --> 18:29.420
好像也是匹配结果 但是实际上意思是不一样的

18:29.980 --> 18:32.780
第二项开始表示的是补货组

18:33.180 --> 18:37.340
补货组 它有几个补货组呢 是不是有一个 对吧 一个小扩号嘛

18:37.340 --> 18:40.860
它有一个补货组 表示这个小扩号里比较补货到了什么东西

18:41.580 --> 18:43.980
表示这个小扩号里比较补货到了什么东西

18:44.300 --> 18:46.140
它补货到了什么东西呢 补货到了2a

18:47.340 --> 18:51.900
好 这个你看这第二次匹配 第二次匹配这个支付出来 匹配到了5f 对吧

18:52.220 --> 18:53.260
匹配到了5f

18:53.900 --> 18:57.180
那么它补货的是什么呢 补货的是这个5f

18:58.060 --> 19:01.980
好 目前看上去好像跟这个一样的 那我稍微变一下吧 变一下你就明白了

19:02.540 --> 19:06.140
比方说这个部分呢 就是一个数字一个

19:08.140 --> 19:12.620
一个字母 一个字母 然后呢 这是一个小扩号 对吧 我这里不写加号

19:12.940 --> 19:16.140
然后后边呢 我们再写一个 再写一个就是

19:18.860 --> 19:19.580
还是一个

19:20.220 --> 19:22.220
A到Z 出现一次或多次

19:23.580 --> 19:27.340
我看一下啊 怎么要 怎么要 才必好理解 就这样写吧

19:28.220 --> 19:29.580
就是 什么意思呢

19:30.300 --> 19:32.700
前面有个数字 后边紧跟一个字母

19:33.980 --> 19:37.740
前面一个数字 后边紧跟一个字母 前面一个数字 后边紧跟一个字母

19:38.220 --> 19:40.220
然后呢 再后面呢 还有字母

19:40.780 --> 19:43.660
还有一次或多次的字母 我这样子匹配

19:44.220 --> 19:48.940
没问题吧 我只是把前面这一部分的 我什么都没有处理 我就是把它用小扩号扩起来

19:49.100 --> 19:51.020
你看看 就是把它用小扩号扩起来

19:51.500 --> 19:53.180
你看一下 现在不一样了

19:53.980 --> 19:59.180
第一个部分呢 表示真正的匹配结果 匹配结果是不是这个 对吧 没问题吧 一开始匹配

19:59.260 --> 20:04.300
你看 2 写钢D嘛 2 然后呢 后面一个字母 A对不对

20:05.340 --> 20:07.660
好 后边再继续匹配 匹配后面的东西 对吧

20:08.300 --> 20:11.980
加号嘛 匹配后面的东西 是不是 第一个就是 整个这一部分是第一次匹配的结果

20:12.540 --> 20:18.060
没问题吧 但是小扩号这一部分 是不是 补货的是什么 补货的是2A对不对

20:18.380 --> 20:22.460
这个地方的补货的是5F 没问题吧 这个地方补货的是9A

20:23.100 --> 20:23.580
看没

20:24.220 --> 20:28.780
你看小扩号里面的补货的东西 它就放到了这个数组里边了

20:28.940 --> 20:31.900
它就是 它为什么要用数组 数组里面还放多个

20:32.620 --> 20:36.620
也就是说 它还有可能用小扩号 还有可能有小扩号 别忘了 这一个部分

20:37.340 --> 20:43.100
这个部分又是个小扩号 又是个小扩号 你看 是不是两个小扩号了 好 两个小扩号你看一下

20:44.140 --> 20:49.740
数组的有三项的 你看 第一个小扩号里面补货的东西是这个 第二个小扩号里面补货的东西是这个 看到没

20:51.340 --> 20:53.820
一种小扩号的东西呢 叫做补货组

20:54.380 --> 21:00.380
补货组呢 它可以出现在哪呢 它可以出现在这个制服 就是补货结果的数组里边

21:00.860 --> 21:04.380
它会出现在这个补货结果的数组里边 看到没 它出现在这里

21:05.660 --> 21:07.660
好 出现在这里有什么用呢

21:08.700 --> 21:09.980
它到底有啥意义呢

21:11.420 --> 21:15.100
这个有的时候呢 会给我们的操作呢 带来一些方便

21:16.140 --> 21:16.620
看着啊

21:17.900 --> 21:18.540
举个例子啊

21:19.260 --> 21:25.740
比方说吧 我有这么一个制服串 这个制服串里边记录了一些日期啊 记录了一些日期

21:26.300 --> 21:29.100
啊 这个日期的格式呢 是这样子啊 比方说

21:30.220 --> 21:41.980
2015年5月1号啊 然后呢 斗号另外一个日期啊 2021 2019年6月19号啊 比方记录了一些日期嘛啊 比方说

21:42.860 --> 21:44.460
2000年零四

21:46.060 --> 21:47.580
28 对吧 好

21:48.780 --> 21:51.740
记录一些日期 然后呢 现在我要做这么一件事

21:52.300 --> 21:57.820
我不但要得到日期的每一个部分 还要分别得到日期里边的年月日

21:59.580 --> 22:01.740
得到每一个日期

22:02.620 --> 22:06.620
并得到每个日期的年月日

22:07.260 --> 22:08.780
好 我要分别得到这么些东西

22:09.260 --> 22:14.220
那怎么来做呢 我们可以写个正载表达式啊 我们之前要用循环 对吧 循环很麻烦

22:15.340 --> 22:17.660
我们用正载表达式 可以更好的处理动办法

22:18.860 --> 22:23.340
处理这个问题 好 怎么来做呢 这里写个记啊 表示权娱匹配

22:25.180 --> 22:29.900
好 这里匹配日期 怎么来匹配呢 日期就是前面有四个数字 对吧

22:30.460 --> 22:33.980
表示年啊 四个数字表示年 然后一个横杠

22:34.380 --> 22:40.460
然后呢 又有一个一个或两个数字来表示月啊 一个或两个数字表示月

22:41.180 --> 22:43.820
一个或两个数字表示月 再一个横杠

22:44.220 --> 22:48.140
然后呢 有一个或两个数字来表示日啊

22:48.700 --> 22:52.540
年四个数字 月一到两个数字 日呢一到两个数字

22:53.100 --> 22:58.140
好 这样子是不是写出来了 对吧 就写出来了 咱们来把这个代码来复制一下啊 把上面的代码复制一下

22:58.220 --> 23:01.180
我们看输出什么样的结果 是不是每次就可以学到结果了

23:01.660 --> 23:06.140
好 看一下啊 看一下页面 你看是不是得到了啊 每个日期都得到了

23:06.460 --> 23:10.620
好 每个日期拿到没关系 我还要分别去拿到这个日期里边的年月日

23:10.860 --> 23:14.860
好 有些同学说 我拿到这个拿到这个日期过处理年月日很简单 我分割嘛

23:15.260 --> 23:17.500
按照横杠来分割 当然这是一种办法

23:18.060 --> 23:23.020
但是呢 这种办法呢 就没有另外一种更好啊 更好 就是我把这个地方扩起来

23:23.740 --> 23:25.820
成为一个补货组 这是第一个补货组

23:26.380 --> 23:31.820
啊 补货组的顺序啊 是从左到右来进行看的 这是第二 第二个 这是第三个

23:32.060 --> 23:36.460
看没有 把它扩起来变成补货组 变成补货组过后 我们来看一下

23:36.700 --> 23:38.940
它可以分别得到补货组里边的东西 你看

23:39.500 --> 23:45.580
是不是分开得到了 补货组 第一个补货组 第二个补货组 第三个补货组 你看是不是全部得到了啊 这一个部分

23:45.980 --> 23:50.860
第一个补货组 第二个补货组 第三个补货组 这个地方 第一个 第二个 第三个 所以全部得到了

23:51.660 --> 23:57.340
ok 那这里就不十足就简单了 对不对 很简单了 那怎么做呢 这里呢 我们就可以输出什么了

23:57.660 --> 24:03.740
输出 整个日期是result0 对吧 整个补货的结果 好 然后补货组1

24:04.460 --> 24:07.820
啊 然后补货组2 result

24:08.460 --> 24:12.780
补货组2 补货组3 是吧 你看这样 这样子一输出

24:13.500 --> 24:18.620
是不是全部得到了 因此补货组有的时候呢 会给我们的开发带来很多的便利

24:19.260 --> 24:24.700
好吧 这是用补货组这种方式 好 另外呢 我要说说一下 就是关于这个补货组啊

24:25.260 --> 24:33.100
大家注意一下啊 关于补货组的话 那么它的顺序是从左到右进行的 你看 我们刚才再把打印出来啊

24:33.740 --> 24:38.460
打印出来的result 它的补货顺序呢 是个小货号啊 是从左到右运行的

24:38.780 --> 24:42.540
你看 第一个小货号是第一个补货组 第二个是第二个 第三个是第三个

24:43.260 --> 24:53.260
好 那么有的时候呢 会遇到小货号的嵌套 比方说比方说啊 当然这个邪法不对啊 邪法不符 不符合体义 但是我们有可能这样子写啊 比方就这样写了吧

24:53.980 --> 24:57.340
那么怎么来确定呢 是这样子 这是第一个补货组

24:57.980 --> 25:05.660
整个这个小货号呢 是第二个补货组 然后小货号里边呢 这是第三个补货组 它永远是从左到右进行的啊 它的顺序

25:06.140 --> 25:07.740
好 于是呢 我们可以看到这样的结果

25:08.700 --> 25:18.540
你看 补货组 补货组1补货组25-1 整个小货号补货组3 对吧 看到没 它是这样子运行的 补货组1补货组2补货组3

25:19.500 --> 25:25.660
你要这个意思吧 我要写回去啊 好 有的时候呢 我们还可以给补货组命名

25:27.900 --> 25:36.700
补货组 可以命名 可以命名 怎么给补货组命名呢 非常简单 在小货号里边加上一个

25:37.180 --> 25:47.180
问号 问号 可以放到很多地方 它代表不同的意思 这个这个地方的问号了 后面跟上一个两个坚阔号 表示给补货组命名

25:47.820 --> 25:52.780
给补货组命名 看一下啊 命名 这是补货组啊 补货组

25:53.740 --> 26:01.020
就是连嘛 一儿 给它命个名字 一儿 这是第一个补货组 它的名字叫做连 给它命个名字 好 给它命了名字过后 我们再看

26:01.820 --> 26:02.620
再看输出的结果

26:03.500 --> 26:06.060
给它命了名字过后 你会发现

26:07.100 --> 26:16.220
这个groups 他有值的 你看 之前是没有值的啊 之前我们没有这样的写 你看这个groups 他是undefined 他就这边一个属性叫groups 表示主

26:17.740 --> 26:23.900
你刚写到名字过后 这个groups里边 他有值的 他是个对象 你看呗 他的一儿属性等于2015

26:24.460 --> 26:32.060
看呗 这个groups是个对象的 他的一儿属性等于2015 所以说我们会发现他这个匹配结果里边有一个属性叫做groups

26:32.620 --> 26:40.060
表示主 这个主呢 是一个对象 他这个对象里边记录的是啥呢 记录的是命名的补货组

26:40.860 --> 26:47.020
补货组可以命名叫做叫做居名 就居有名字的补货组

26:48.340 --> 26:49.180
居名补货组

26:50.140 --> 26:55.740
好 那么同样道理呢 我们可以继续写啊 继续写 比方这个补货组的给他命个名字啊 这个是命名为Mounts

26:56.380 --> 27:04.740
Mounts这个地方的命名为什么呢 对 对 你看这样子命名过后 后边我获取的时候就非常方便了啊 我要获取补货

27:05.100 --> 27:13.500
我要获取就是原始的补货的字不错 整个字不错呢 用0对吧 就是匹配的结果 然后呢我要获取连就是groups

27:13.860 --> 27:19.300
一儿啊 就这样子过去 越读上了 更好理解了 越读上就不是他这一二三了 对吧

27:20.100 --> 27:25.700
Mounts Results Groups 对 你看这样子写出来就非常好理解了

27:26.260 --> 27:31.180
看没 好 咱们再把这个groups打印出来啊 再把这个groups打印出来

27:32.740 --> 27:39.140
看一下 打印出来是个对象 看没Mounts一儿 没问题吧 这是居名补货组

27:40.340 --> 27:45.140
好吧 这是关于补货组啊 还有一种情况叫做非补货组

27:46.980 --> 27:47.780
非补货组

27:48.780 --> 27:53.860
补货组 就是有的时候呢 我加小货号的目的呢 只是把它当成一个整体

27:54.580 --> 27:59.820
只是把它当成一个整体 不希望它真正的去补货啊 不希望它真正的被补货

28:00.220 --> 28:04.460
那么这种情况呢 我们可以利用非补货组啊 虽然这个东西用的很少啊 用的很少

28:04.740 --> 28:08.820
但是呢 我们可以这样做 就是有的时候小货号我仅仅是为了把它当成一个整体

28:09.140 --> 28:12.380
不希望补货 而且呢补货它是会浪费执行效率的

28:12.820 --> 28:16.100
会影响到执行效率的 因此呢 我们可以把它变成非补货组

28:16.420 --> 28:22.380
就是我写了小货号 但是你不要去补货它 你不要去补货它 那怎么写呢 写上个温号帽号

28:23.180 --> 28:27.060
温号帽号呢 表示非补货组 比如说我给这个年月

28:28.180 --> 28:34.020
我给这个年月写上一个温号帽号 那么表示 这是一个小货号 只是一个普通的小货号而已

28:34.020 --> 28:38.700
它只是把它当成一个整体 并没有把它当成补货组 保存看一下

28:39.420 --> 28:45.260
那么年月这里你会看到 年月这里呢 它就没有补货组了 它只补货了日期啊 日期部分

28:46.140 --> 28:49.700
你看这个意思吧 它就要非补货组 尽管这个用的很少 了解一下就行了

28:50.940 --> 28:57.860
好吧 这是关于补货组啊 补货组 好在补货组的时候呢 使用补货组的时候 我们还可以利用它

28:59.020 --> 29:07.180
因为我们在制服圈里面不是有个东西吗 叫做replace 对吧 replace这个函数里边呢 它也可以使用补货组 咱们来看一下啊

29:07.780 --> 29:14.100
嗯 就个例子啊 比方说还是这吧 还是这啊 咱们把复制下来

29:17.600 --> 29:24.960
啊 这里面呢 有两个补货组 对吧 有两个补货组啊 这是第一个补货组啊 这是第二个补货组啊 咱们还是用这个玩意儿吧

29:25.600 --> 29:30.080
上面那个确实确实不太容易看到 看得清楚 还是用这个玩意儿

29:31.200 --> 29:40.720
现在呢 我把它变成补货组啊 年月日啊 三个补货组 好 接下来呢 我用使用制服圈里边的replace函数啊 replace函数

29:41.440 --> 29:50.320
好 replace 第一个是正能表达式rig 好这个rig里面就是正能表达式里边 它包含有补货组 于是呢 第二个参数

29:51.360 --> 29:57.680
第二个函数啊 第二个函数 它里边的参数我们之前介绍过对吧 第一个参数表示匹配的结果

29:58.080 --> 30:04.240
march 匹配的结果 第二个参数和第三个参数和第四个参数就表示的是补货组

30:05.280 --> 30:10.560
补货组比方说我们正用gg1啊 补货的第一个组 补货的第二个组 补货的第三个组

30:10.800 --> 30:16.960
咱们来打印出来看一下march g1 g2 g3 看一下打印出来

30:19.520 --> 30:24.880
当然我这里没返回啊 没返回他替换的时候就替换成nd犯了 无所谓 无所谓

30:25.760 --> 30:35.940
好 看一下吧 好 你看 我不仅能每一次的函数运行 我不仅能够得到它的整个补货结果 就整个匹配结果

30:36.180 --> 30:40.580
我还能得到它的每一个补货组看到没 得到它每一个补货组的东西

30:41.220 --> 30:44.500
没问题吧 我还能得到它每一个补货组的东西

30:45.620 --> 30:53.620
好 然后呢 这里边呢 我们还可以返回什么 返回它补货组的东西 比方说我要把这个玩意儿

30:54.100 --> 30:59.540
把这个玩意儿变成了一个横杠变成鞋杠啊 假设吧 假设把横杠变成鞋杠

30:59.940 --> 31:05.460
把日期里边的横杠变成鞋杠啊 不是外面的 外面的横杠不能变的啊 外边的横杠是不能变的

31:05.940 --> 31:10.660
比如说我们要做这么一个 做这么一个处理 我只把日期部分的横杠变成鞋杠

31:11.060 --> 31:17.380
好 我们首先匹配日期 好日期里边我们使用补货组 对吧 补货到这些东西啊 补货到这些东西

31:17.700 --> 31:22.900
然后我们这里可以这样返回 return 什么呢 return 计 拼接呗啊

31:23.780 --> 31:28.580
计一 鞋杠 啊 计二 鞋杠 啊 计三

31:29.460 --> 31:34.420
看没 我把补货组重新拼接一下 然后再返回 这样就把横杠变成了鞋杠了

31:35.620 --> 31:42.660
你看 我这里没有得到 没有得到 重新重新输出s 最后输出s

31:44.500 --> 31:52.900
输出你看 我就把日期里边的鞋杠变成横杠变成鞋杠了 但是外面的横杠没有变化 看没 外面的横杠没变化 这可以利用补货组来完成

31:53.780 --> 31:56.740
对吧 没问题吧 没问题啊

31:57.060 --> 32:08.820
其实这里还有一种 还有一种方式 就是我们在这里 就这种鞋法 可以啊 这种鞋法是没问题的啊 可以是没问题的 看没 是没问题的

32:09.620 --> 32:14.500
还有一种方式的 我们这里不写函书 不写函书 直接写制服串来替换

32:15.220 --> 32:24.900
在制服串里边 他有一种特殊制服啊 在替换的时候 第二个残书的制服串里边有一种特 当然如果你不写特殊制服 比方说把他替换成et

32:25.460 --> 32:29.620
那么他就把整个替换成et好了 看没 他把整个匹配的结果替换成et好了

32:30.260 --> 32:34.260
好 那么这里边呢 我们还可以用这种方式来写多乐一

32:35.140 --> 32:40.740
多乐一表示第一个补货组 写杠多乐二多乐三 保存一看一下

32:41.540 --> 32:48.500
也可以完成替换 在这个制服串里边有一些特殊的制服啊 可以表示补货组 多乐一表示第一个补货组 多乐二表示第二个

32:48.740 --> 32:54.740
多乐三那表示第三个 用这种方式也可以表示补货组 可以非常方便的来处理这个问题

32:55.780 --> 32:59.460
明白这个意思吧 没问题吧 没问题啊

33:01.060 --> 33:10.180
ok啊 那咱们这一块就没上了啊就没上了 补货组这一块就搞定了 好下一个啊 下一个反向引用

33:10.980 --> 33:16.740
好 反向引用的跟补货组有关啊 反向引用指的是在争责表达适中

33:17.460 --> 33:25.700
表达适中 使用 使用某一个使用某个补货组

33:26.580 --> 33:31.620
补货组 具体的用法呢 是具体的用法是这样子的

33:32.500 --> 33:35.620
反斜杠 反斜杠 然后补货组编号

33:36.260 --> 33:41.220
补货组编号 就这样子写 好 咱们来看一下啊

33:41.940 --> 33:50.180
下面这个 比方说吧 咱们举一个例子啊 后面越来越不好举例子了 咱们这个争责表达适啊

33:51.460 --> 33:56.900
有前面呢 我补货什么呢 前面是一个补货组 这个补货组里边 我补货一个

33:57.700 --> 33:59.860
数字啊 数字出现

34:01.060 --> 34:04.980
出现什么 出现两次的数字啊 出现两次的数字

34:05.700 --> 34:10.820
然后呢 后边呢 我写上一个 写杠1

34:11.860 --> 34:14.740
啊 写杠1 这是啥意思呢

34:16.660 --> 34:19.220
我怎么解释呢 看着啊 他是这么个意思

34:19.940 --> 34:24.980
啊 这是一个补货组 他能补货两个数字 对吧 他能补货两个数字

34:25.460 --> 34:27.060
ok 但是我整个规则是

34:27.700 --> 34:34.100
啊 整个规则是 你不但要补货两个数字 还要把你补货的结果再重复一次 放到后面再重复一次

34:34.660 --> 34:40.340
什么意思 就是比方说 他不能匹配这个 a b a b 你看 不是a b a b啊

34:40.900 --> 34:44.980
1313 他能匹配这个玩意儿 你看这两个数字是不是被补货了

34:45.620 --> 34:50.740
是被补货了 没问题吧 他会被这个补货 被这个东西补货

34:51.140 --> 34:55.060
补货到13之后呢 后边还要重复这个补货的结果

34:55.540 --> 34:58.100
就是反向引用 引用之前的补货组

34:58.980 --> 35:00.100
引用第一个补货组

35:00.740 --> 35:03.860
那么这里就是必须要重复之前的 那后边如果写

35:04.500 --> 35:06.100
34 你看一下能不能匹配

35:07.140 --> 35:14.980
咱们输出啊 rig test s 你会发现他不能匹配啊 把这个继续掉嘛 继续掉看一下啊 能不能匹配

35:17.150 --> 35:22.270
你看 force 对吧 是不能匹配的 我只有写1313这样子才能匹配

35:22.750 --> 35:27.550
怎么样 才能匹配 他可以做一些非常特殊的这种效果出来

35:28.430 --> 35:32.750
好 咱们呢 这里呢 有一个例子啊 有一个例子看一下啊

35:34.850 --> 35:37.330
有一个制服串 他里边写就是那个面词题

35:41.520 --> 35:49.360
d e f gc 好有这么一种制服串 他要问你的是该制服串中啊

35:50.160 --> 35:58.640
找出该制服串中重复出现的制服啊 哪些制服在重

35:59.920 --> 36:02.720
连续重复出现的制服 制服串中

36:03.440 --> 36:08.720
连续的制服 也就是让你输出什么 输出abc g

36:09.280 --> 36:12.960
abc g 这些制服是连续重复的啊 连续的

36:13.840 --> 36:18.640
好 那这该怎么做呢 如果你用循环的话 脑壳痛 脑热痛

36:19.280 --> 36:26.000
但是你用争折表达式呢 脑热更痛 更痛 但是呢你可以很轻松的把它做出来 你可以

36:26.720 --> 36:32.640
至少呆马写书写上啊 很简洁 好怎么做呢 我可以这样子来处理啊 这样子来处理 看着

36:34.320 --> 36:40.960
我这里呢 写一个补货组 这个补货组呢 补货啥呢 补货任意制服

36:41.680 --> 36:46.640
补货任意制服或者说任意单词制服嘛 写个w 你看这些都单词制服嘛

36:47.120 --> 36:48.720
补货一个任意单词制服

36:49.600 --> 36:53.920
好 然后这个任意单词制服呢 他出现多少次呢

36:54.640 --> 37:02.560
啊 他至少要出现两次才叫连续嘛 对不对 至少要出现两次才叫连续 所以说呢 后边写上一个就是

37:03.040 --> 37:05.040
斜杠一出现一次或多次

37:06.320 --> 37:09.280
把前边这个补货的结果重复

37:10.480 --> 37:15.920
一次或多次 前边有一个补货的 后边再加上一个一次多次 是不是至少出现两次了

37:16.880 --> 37:18.320
对吧 至少出现两次了

37:19.040 --> 37:26.080
我们就用这种方式来进行补货 然后呢 我来看一下while result rig execute

37:28.000 --> 37:32.880
s 传进去 这样子我们看一下得到的结果 每次补货的结果

37:34.640 --> 37:35.680
运行看一下

37:38.780 --> 37:43.900
你看每一次补货的结果 第一次补货的是a 对吧 补货组里面补货的a 第二次补货的是b

37:44.380 --> 37:48.140
第三次补货的是c 第四次补货的是g 你看这些是不是都是在重复的

37:48.460 --> 37:55.500
对不对 好 我就可以输出重复的结果了 对不对 我就可以输出补货组嘛 第一个补货组 你看这些制服在重复

37:56.220 --> 38:01.500
所以变得非常非常简单了啊 如果你要用循环你真的是脑瓜子 脑瓜子痛啊

38:01.980 --> 38:06.460
不好处理 非常不好处理 但是用那个补货组的话就非常非常容易处理了

38:07.260 --> 38:15.900
你看这意思吧 这是官员反向引用啊 可以引用补货组 那如果你补货组具有名字啊 如果补货组有名字怎么办呢

38:16.140 --> 38:23.500
如果有名字的话 可以用名字来引用 当然也可以用数字啊 也可以用数字 但是也可以用名字来引用 比方说该取个名字

38:24.940 --> 38:28.140
c 啊 c 该取个名字 表示这个补货组的名字叫做c

38:29.100 --> 38:30.780
c 这个名字 或者叫做

38:31.980 --> 38:37.420
char 叫character 单词的缩写 表示这是一个制服补货道一个制服

38:38.060 --> 38:43.020
该取个名字 那后边引用的时候呢你可以这样引用 可以用数字啊 用数字没问题的

38:43.500 --> 38:44.300
用数字没问题的

38:44.700 --> 38:49.180
也可以用什么呢 加个写杠k 后边写上名字 名字叫char

38:49.740 --> 38:53.820
char 用这个写杠k 表示我要获取补货组的名字

38:54.860 --> 38:58.860
用这一部分呢 表示重复这个补货组char

38:59.740 --> 39:01.900
保存 是一样的 是一样的

39:03.580 --> 39:05.660
好 这是具名补货组 了解一下就行了

39:06.860 --> 39:09.820
好 OK 这是反向引用啊 反向引用

39:10.780 --> 39:15.740
好 下面的正向断言啊 也叫做正向预查 是一样的意思啊

39:16.380 --> 39:22.940
它指的是啊 对某一个规则啊 规则应该说这样子

39:24.380 --> 39:28.300
检查某个啊制服

39:29.580 --> 39:39.340
后面的制服 是否满足某个规则啊 该规则不进入补货组

39:40.060 --> 39:47.580
并且不成为 不是 应该这样说啊 该规则不成为

39:48.780 --> 39:52.860
就是匹配结果 什么意思啊 说的太抽象了

39:53.580 --> 39:55.980
我们这里举个例子 举个例子来说明

39:58.080 --> 40:03.920
好 比方说我有这么一个制服串啊 这个制服串里边呢 我们要得到啥了

40:04.640 --> 40:07.760
要得到啊 就是随便写个制服串嘛

40:08.400 --> 40:12.850
我们来看一下啊 随便写个制服串

40:13.330 --> 40:19.890
我要找到啥呢 找到那些就是后边是数字的字母

40:21.570 --> 40:26.930
我要找到后边是数字的字母 注意我找的是字母 我找的不是数字 但是对这个字母呢

40:27.330 --> 40:32.930
有前提条件 它后边的出现数字 然后这个F对吧 F就是我们想要的

40:33.570 --> 40:38.130
后边还有数字 没问题 你看后边是有数字的嘛 后边是有数字的 没问题吧

40:38.610 --> 40:44.690
好 然后呢 这个F也是 你看是不是也后边有数字啊 这个D 这里形成A嘛

40:45.250 --> 40:50.610
这个D后边也是数字嘛 对吧 也是没问题的 也说我们找出的结果应该是F

40:51.650 --> 40:55.090
A和这个D和这个D

40:56.050 --> 41:00.370
我不要后面的数字 你不要给我匹配后面的数字 但是你检查的时候

41:01.010 --> 41:02.850
你要去检查后边有没有数字

41:03.570 --> 41:11.970
这就叫做正向预查 正向断言 我推断后面有没有这个东西 我只是取一个推断作用 但是我并不会进入匹配结果

41:12.770 --> 41:15.490
好 那么郑德表老师该怎么写呢 郑德表老师是这样子写的

41:16.210 --> 41:20.770
你首先得是个字母嘛 对吧 字母啊 全具匹配啊 字母的话是不是

41:21.330 --> 41:24.690
A到Z啊 或者是大写的A到Z 对吧 前面是字母

41:25.330 --> 41:28.690
后边得出现数字 如果你后边这样子写了

41:29.170 --> 41:32.210
D加号 那么他会把数字一起匹配进去

41:32.930 --> 41:37.970
他会把这个数字一起匹配进去 我不希望发生这样的事 所以说我把这个地方扩起来

41:39.250 --> 41:43.330
这不是补货组啊 这叫正向预查 问号等号

41:43.970 --> 41:51.250
加上问号等号表示正向预查 检查后边有没有这个东西 但是他不会进入匹配结果 咱们来运行看一下

41:52.450 --> 41:53.810
复制 运行看一下

41:55.170 --> 41:57.890
把这个删掉 这个删掉 运行看一下啊

42:00.560 --> 42:04.640
运行出来 咱们来看一下 你会看到这个数组里边 有没有补货组啊

42:05.040 --> 42:10.240
没有补货组 好像这里加了扩号 他有没有成为补货组 他并没有成为补货组

42:10.560 --> 42:17.840
他叫做正向预查 他不叫补货组啊 虽然他是长得像扩号 对吧 长得像扩号 就该规则不匹配结果啊 并且

42:18.320 --> 42:20.480
刚才我为什么把删掉了 并且

42:21.360 --> 42:23.280
不成为补货组

42:24.240 --> 42:29.040
虽然他加了扩号 但是不成为补货组 咱们又可以看到 他补货的是什么 F

42:29.600 --> 42:33.120
A D 你看没有 补货的是这些字母

42:33.840 --> 42:39.520
他并没有把这个东西 并没有把这个东西形成匹配结果 这一部分他只是做检查

42:39.760 --> 42:46.320
只做检查 他不做结果 不成为结果 明白这个意思吧 他检查他后边有没有这个规则

42:47.360 --> 42:51.680
好 这就是这个这个东西 这里有当面试题啊 这里有当面试题

42:52.400 --> 42:58.400
我觉得是腾讯的还是哪 腾讯的面试题还是白肚的 我已经忘了啊 有当面试题

42:58.960 --> 43:03.440
哦 对 成哥都讲过这个面试题了 成哥的课程里面也讲过了 这个面试题还蛮经典的

43:04.080 --> 43:08.880
但是难度特别特别高 他指的是什么呢 他有一个字母圈啊 他全是数字啊 全是数字

43:09.440 --> 43:11.840
就这样的数字啊

43:12.480 --> 43:18.160
他要求你呢 我这么一个东西出来 你把这个数字呢 变成这么一种格式

43:18.640 --> 43:23.520
变成这么一种格式 我这写少了一点 写太多了

43:24.560 --> 43:29.680
变成这么一个种格式 从右向左每三位加上一个豆号

43:30.960 --> 43:37.360
就像那个国外的这种就是数字 就是金儿表示方式 对吧 每三个位置加上个豆号

43:37.600 --> 43:43.520
他让你做这个事 做这个事 你咋做了 这题还蛮有难度的啊 蛮有难度的

43:44.000 --> 43:48.080
蛮有难度的 他其实要用到这个 就是什么

43:49.600 --> 43:54.080
一个是就是正向预查 还有一个就是不获主的知识

43:55.600 --> 44:00.240
怎么做呢 看着啊 我们可以写这样的正的表达式

44:00.640 --> 44:03.840
当然你用循环能不能做出来 肯定能做出来 肯定能做出来

44:04.080 --> 44:08.320
但是呢 就没有这个方式巧妙啊 没有这个方式巧妙 当然你做出来就ok

44:09.040 --> 44:10.880
好 这个正的表达式呢 我们这样子写

44:11.440 --> 44:15.440
数字 是不是三个嘛 对吧 三个数字

44:16.000 --> 44:20.720
三个数字 三个数字呢 出现一次或多次

44:22.240 --> 44:25.680
三个数字 出现一次或多次

44:27.520 --> 44:31.120
然后呢 就是后边有三个数字

44:31.760 --> 44:36.160
这三个数字出现一次或多次 然后整个呢 是一个预查

44:36.880 --> 44:42.320
正向预查 什么意思呢 就是检查某一个空字符 前面我没有写任何东西 对吧

44:42.880 --> 44:48.320
没有写任何东西 是不是可以匹配 匹配所有的空字符 对不对 匹配所有的空字符

44:49.360 --> 44:52.640
这个空字符呢 有这么一个要求 就是啥都不匹配

44:53.280 --> 44:58.400
匹配的结果啥都没有 但是呢 他有一个要求 就是个空字符后边

44:59.040 --> 45:02.320
得是啥呢 得是三个数字的

45:02.800 --> 45:07.040
重复出现一次或多次 也就是说三个数字可以 六个数字可以

45:08.000 --> 45:13.600
九个数字可以 对吧 是不是这个道理啊 你看我们把这个数字写少一点啊

45:14.160 --> 45:17.920
你看这个位置 现在光标闪这个位置 他有没有满足要求

45:18.480 --> 45:21.680
不满足要求 对吧 不 我们这里这样子去吧

45:23.040 --> 45:28.400
好 这个第一个光标闪的位置有没有满足要求 不满足要求 因为他要求后边的数字是三的倍数

45:28.720 --> 45:32.160
出现三次 或者是再出现三次 就是出现六次

45:32.720 --> 45:35.280
那后边他出现了 目前的出现了七次不满足要求

45:35.680 --> 45:41.120
好 再看这个光标位置是满足要求 后边出现了六个字符满足要求 对吧 他就得到一个

45:41.440 --> 45:45.040
他就得到一个匹配结果了 然后这个位置是不是也满足要求

45:45.360 --> 45:50.080
对吧 后边出现三个字符 三个数字也满足要求 你看匹配道的结果就是这个和这个

45:50.320 --> 45:52.560
看没 匹配道结果就这个和这个

45:53.440 --> 45:56.880
好 然后再怎么样了 再用replace替换

45:57.600 --> 46:02.320
证则表是传进去 我们要找到这些位置 把它替换成什么 替换成一个兜号

46:04.160 --> 46:13.170
s 输出这个s 看一下运行 看一下啊

46:14.770 --> 46:17.490
哎 有问题啊 有问题 看一下哪里有问题啊

46:19.170 --> 46:22.850
哦 这里我少写了这个东西 一个是拳举匹配 一个是结束

46:23.490 --> 46:28.290
注意这个结束写到哪 写到小货号里边 写到这个争向预查里边

46:28.690 --> 46:33.890
就检查什么了 检查他后边是不是三的倍数个数字 然后就结束了

46:34.610 --> 46:42.290
然后就结束了 一定要检查他是不是结束 因为他可能数字很多 他出现了六个数字 比方说这个位置啊 他后边有没有六个数字 肯定有

46:42.770 --> 46:47.810
对吧 后面有没有三个数字 肯定有 也有六个数字 但是他不是结束 看没 这个位置没有结束

46:48.050 --> 46:53.330
一定要加上这个结束啊 这个结束呢也是预查的一部分 我并不匹配结束

46:54.210 --> 47:01.330
但是呢 我要检查是不是三个数字后面就结束了 三的倍数个数字后面就结束了 好你看一下 这样子一替换

47:02.450 --> 47:10.690
是不是一下就替换过来了 对吧 非常非常舒服了 这个代码写的很少就可以替换完成了 嗯 但是呢 这里还有一个问题啊 就是如果刚好九个数字

47:11.170 --> 47:14.370
刚好九个数字的话会导致一个结果 就是前边第一个会有斗号

47:15.490 --> 47:19.970
前边第一个会有斗号 于是呢 怎么办呢 你前面加上一个怎么

47:20.770 --> 47:26.530
单词边界 对吧 你要匹配非单词边界 大b 大b

47:27.330 --> 47:35.970
匹配一个非单词边界 你看这个位置是单词边界嘛 对不对啊 单词边界 那么你要匹配的是非单词边界 加上这个东西完事了

47:37.410 --> 47:42.690
那么第一个位置匹配不了了 因为它不是单词 因为它是一个单词边界 它匹配不了这个东西

47:43.570 --> 47:47.330
你看这样子就可以轻松处理的 好吧 这是一道面试题啊 挺有意思的

47:48.050 --> 47:49.490
当然你用循环做的话也可以做

47:50.370 --> 47:56.530
好吧 这是关于这个正向断言 还有另外一个叫互相断言啊 互相断言

47:57.490 --> 48:05.570
互相断言就是跟他正向断言的是相反的啊 相反的 检查某个制服 后边的制服 是否不满足某个规则

48:06.290 --> 48:11.410
不满足某个规则 该规则的不成为匹配结果

48:11.890 --> 48:16.690
也是一样的 只是看的 之前是看满足 现在那是看不满足啊 现在看不满足

48:17.170 --> 48:24.050
这些 我真的是想不到例子了啊 咱们再看一个例子吧 就随便写了啊 我就随便写了啊

48:25.810 --> 48:30.610
我要得到了制服了 是什么了 我要得到了是后边没有数字的

48:31.570 --> 48:37.170
我要得到后边没有数字的字母啊 我要得到后边没有数字的字母

48:38.050 --> 48:43.010
好 那么正常表达是呢 我们可以这样子写 我们只得到字母啊 只要这些字母后边没有数字就行

48:43.490 --> 48:54.180
只要你后边没有数字就行 好 这样子啊 那么我要得到字母是af和w 对吧w

48:54.660 --> 48:58.580
好 这里呢 我们可以这样子写 他是一个字母咩啊 a到z

48:59.540 --> 49:02.660
然后大写的a到z 字母嘛 然后后边呢

49:03.540 --> 49:11.860
我们用互相预查 问号 感叹号 就是取非 取否 对吧 他不满足某个规则 不满足什么规则呢 不满足

49:12.660 --> 49:22.660
多个数字啊 不满足多个数字 ok 这样写好了 这里咱们把它运行出来看一下吧 好 保存看一下啊

49:24.580 --> 49:30.180
哎哎哎 还在不停的输出 哎不对不对对 这里稍微稍微加个g啊 稍微加个g

49:32.400 --> 49:36.000
完了完了完了 新开一个啊 重新运行 把这个关了

49:36.880 --> 49:43.920
稍加个g啊 稍加个g我们会导致一个什么结果呢 我之前说过啊 就是没有全具匹配的时候呢 他每一次都是重新匹配的

49:44.160 --> 49:50.080
所以说他只要匹配到了就无限的循环了 加上个全具匹配 你看afw

49:50.720 --> 49:52.960
w 这是表示 互相预查

49:53.920 --> 49:59.280
好就没了啊 就没了 这是进阶部份的东西 这里呢其实还有个例子啊 我刚刚想到的是

49:59.840 --> 50:03.520
就是判断密码强度 判断密码强度

50:04.480 --> 50:11.120
啊 这也是一个比较常用的一个东西 以前呢 我发现很多的开发者啊 判断密码强度这一块呢 一般就是用的什么

50:11.600 --> 50:18.320
用那个啊 就是判断啊 循环啊 来做的 其实他可以用这种表达是来做啊 就比方说啊

50:19.120 --> 50:25.520
要求要求密码中必须出现出现什么呢 出现字母

50:26.880 --> 50:34.130
出现字母啊应该说出现小写字母 然后出现大写字母

50:35.090 --> 50:39.410
数字 还有什么 嗯 特殊制服

50:40.530 --> 50:49.570
特殊制服的话 我们这里可以取什么感叹号啊 啊 这些东西啊 就是就这些啊 感叹号 什么锦号啊 这些东西啊 加上一个

50:50.290 --> 50:52.050
下滑线嘛 下滑线

50:53.650 --> 51:02.130
加上一个兜号点啊 等等 总之呢 你自己可以自己去规定一些特殊制服啊 假设我们就这么一些啊 假设咱们就这么一些特殊制服

51:02.850 --> 51:08.450
好吧 ok啊 咱们来看一下 这个这个政策表是怎么写 他要求里必须出现什么

51:09.650 --> 51:18.850
怎么写呢 我们用这种方式来写 比方说一个密码 随便写个啊 随便写个密码 有小写字母 有数字啊 有大写字母

51:19.650 --> 51:25.170
然后呢 有什么 有点啊 有点啊 这是个密码

51:25.810 --> 51:32.050
看一下是不是符合强度的要求 密码强度的要求 那么写政策表拿是 这个政策表是比较长啊

51:32.210 --> 51:38.770
咱们再写一下 好 这个表是怎么写的 首先是开始结束 把写好 整体上满足要求

51:39.730 --> 51:46.770
好 我们找什么呢 我们要找啥呢 我们这里使用正向预查 检查某个空制服

51:47.650 --> 51:52.610
检查某个空制服后边 是不是出现了满足结果的东西

51:53.410 --> 51:59.170
满足条件的东西 检查某个空制服后边 是不是出现了满足条件的东西

51:59.890 --> 52:06.610
如果找不到的话 那个正向预查通不过 通不过的话 那肯定是匹配不到 对吧 前边我就让他留空 空制服

52:07.090 --> 52:11.570
开始过就留空制服 看一下后边的东西 是不是满足条件 我们再说剩下的事情

52:12.690 --> 52:16.210
好 然后看一下后边是不是满足条件的怎么判断了

52:17.330 --> 52:20.530
正向预查 第一个正向预查 问号等于

52:21.250 --> 52:28.050
必须出现小写字母 什么了 a倒z 对吧 至少出现一个嘛 至少出现一个

52:28.610 --> 52:31.650
甭管这个小写字母之前有什么制服 我不管

52:32.290 --> 52:38.930
我不管这个小写字母之前有什么制服啊 之前可能会出现多个任意制服 无所谓 但是你一定有一个小写制服

52:39.650 --> 52:44.290
你要这个意思吧 好 我再说一次啊 我再说一次 这个是什么意思啊

52:44.850 --> 52:51.730
就是制服说一开始的时候 我先做检查 我先不去补货 我就不去消耗任何制服

52:52.130 --> 52:55.570
我只是去检查 检查一下后边是不是满足这个条件

52:56.210 --> 52:57.890
检查啥呢 检查

52:58.850 --> 53:03.730
就是有没有一个小写字母出现在这个制服处的中间

53:04.450 --> 53:10.050
前面无所谓 前面你可以用任何东西 但是一定要有一个小写字母出现在中间 他只是做检查

53:10.210 --> 53:13.410
他并没有消耗 比方说啊 他检查到了这个小写字母 对吧

53:13.890 --> 53:19.010
他不是说下一次匹配就从这里开始匹配了 不是的 他还是从最开始 他并不消耗的

53:19.490 --> 53:24.370
并不消耗制服的 他还是从最开始来匹配 你看这个意思吧 他只是检查而已

53:24.930 --> 53:31.170
好 检查有没有小写字母 那你要理解这个规则的过后 后面就好写了 栽检查有没有大写字母

53:32.370 --> 53:33.890
栽检查有没有数字

53:35.650 --> 53:36.130
血缸滴

53:37.570 --> 53:42.370
栽检查有没有特殊制服 特殊制服有哪些呢 感叹号 按的

53:43.410 --> 53:49.570
警号 下滑线 兜号 第二 看没有 对吧 检查这些制服

53:50.530 --> 53:57.890
然后整个检查完了 如果检查都通过了 然后再来进行匹配 匹配啥了 匹配任意制服

53:58.370 --> 54:04.290
匹配任意制服出现什么了 比方说 比方说密码要求呢 是6到12位

54:05.890 --> 54:10.050
6到12位 这是一个 这是个真实需求 他不是说写着玩头

54:11.090 --> 54:13.170
出现多少次呢 6到12次

54:14.210 --> 54:18.690
前面检查完了 再从头开始匹配 匹配任意制服6到12次

54:19.410 --> 54:24.210
没问题吧 好你看 这样子呢 就写出了一个检查规则 当然最后一个多了结束

54:24.690 --> 54:28.050
还有多的结束 好 我们来看一下啊 来验证一下

54:28.530 --> 54:33.410
输出这个验证结果 这里就不用全具匹配了啊 因为我们直接匹配了 开始结束了

54:33.730 --> 54:36.050
就不用全具匹配了 一步不会匹配多次的

54:36.690 --> 54:43.730
看一下啊 你会看到这个制服出来满足要求 那如果我这里少写一个点呢

54:44.530 --> 54:48.130
少写个点你看就不满足要求了啊 他少了一个特殊制服 检查没有

54:48.450 --> 54:53.730
一开始的检查都没有通过 他后面肯定不看了 看的不看了 检查就没有通过

54:54.370 --> 55:00.450
明白这个意思吧 比方说啊 这里有没有什么只有字母 只有小写字母 数字和特殊制服

55:01.570 --> 55:03.410
你看也不行 他没有大写字母

55:04.530 --> 55:07.250
强度不够 强度不够 有了大写字母过后才会去

55:07.890 --> 55:15.410
这也是一种常见的一种方案 你用循环用判断来做的话都不是很舒服 但是用这种方式来做的话肯定是很好的

55:16.370 --> 55:20.290
好 另外呢 这里呢 我出一道题吧 出一道题我马上讲了啊

55:22.690 --> 55:25.970
啊 判断密码强度还是判断密码强度啊

55:27.090 --> 55:30.050
然后呢 有这么一个规则 如果出现

55:30.930 --> 55:37.570
都出现了这些东西啊 都出现密码长长度长度是密码长度密码长度

55:38.290 --> 55:43.250
必须是六到十二位啊 必须是六到十二位

55:43.890 --> 55:51.410
如果出现小写字母 大写字母特殊制服都出现了过后得到的结果是什么 强 这是个强 强安全性很强的密码

55:52.610 --> 55:59.090
好 他拆不出来 对吧 他拆不出来 好如果出现小写字母 大写字母 数字没有特殊制服的话

56:00.050 --> 56:05.650
或者说出现小写字母和大写字母没有特殊制服的话 那么这里是终密码强度为终

56:06.290 --> 56:12.450
好 如果出现小写字母啊 大写字母啊 然后呢 是

56:13.490 --> 56:16.450
如果出现这两种两种情况 小写字母或

56:17.650 --> 56:23.570
大写字母啊 应该说这样说吧 小写字母和大写字母 那么这个强度呢 是轻

56:27.810 --> 56:28.050
轻

56:28.930 --> 56:35.730
好 最后呢 是不满足要求 如果只出现了小写字母或者是大写字母或者是数字的话 不满足要求啊 其他

56:36.690 --> 56:37.490
不满足要求

56:39.170 --> 56:45.090
好 我们要用一个函数来判断这个密码强度密码强度 是不是满足要求啊 比方说

56:46.450 --> 56:49.010
加几名次 加几名次 password

56:50.850 --> 56:52.050
或者叫加几 password

56:53.330 --> 56:56.130
判断密码啊 给我一个密码 我来帮你进行判断

56:56.690 --> 57:00.930
好 那么这里怎么判断呢 我们就可以用这种类似的方式 对吧 用这种类似的方式

57:01.330 --> 57:10.050
写一个正则表达式 然后来测试一下这个密码 是不是满足要求 好 第一个正则表达式啊 咱们就直接拿过来了 是吧 直接拿过来了 看一下是不是强密码

57:11.170 --> 57:16.530
啊 password 原来看不懂这个玩意 是吧 这是不是个正则表达式对象 没问题吧 是个字面量嘛

57:16.930 --> 57:21.490
正则表达式的对象字面量来判断这个密码 是不是满足要求 如果满足要求的话就是强

57:22.610 --> 57:24.850
啊就强强密码 LCF

57:25.570 --> 57:31.650
所以又来判断 对吧 又来判断 那么终密码 终密码 是不是把那个什么特殊制服去掉

57:32.450 --> 57:37.090
特殊制服去掉 如果满足这个要求的话 就是return 强度为终

57:38.050 --> 57:39.250
好 LCF

57:41.570 --> 57:45.730
你只要把上面的理解了 这个东西就好做了 然后密码为轻呢 就是

57:46.530 --> 57:51.410
小解字母 大解字母 他出现了小解字母和大解字母 6到12位

57:52.370 --> 57:56.290
没有包含数字 那么这个情况下呢 就是强度为轻

57:57.010 --> 57:57.250
轻

57:58.690 --> 58:03.090
好 LC呢 是不满足要求 满足要求

58:04.050 --> 58:07.010
好了 就写好了 然后咱们来试一下啊 试一下

58:07.730 --> 58:13.010
输出加几 password 给他一个密码啊 123456 看一下这个密码

58:13.730 --> 58:14.130
保存

58:15.970 --> 58:20.690
得到得到是中 得到是中 我们看一下啊 哪里有问题 不太对啊 不应该得到是中

58:21.010 --> 58:28.210
我们来看一下啊 他这里边呢 是没有出现没有出现这个 哦 这里没写对吧 没有写test 我说吗

58:29.090 --> 58:31.410
我把正在表的是对象哪些当当成条件了

58:32.610 --> 58:37.090
看一下啊 不满足要求 看没光是数字不行 光是小解字母也不行

58:37.570 --> 58:40.930
啊 不满足要求 那光有小解字母有大解字母呢

58:41.490 --> 58:45.410
是什么呢 是轻对吧 密码强度为轻 多上一些数字呢

58:45.890 --> 58:48.850
密码强度了 哦 超过12位了啊 超过12位了

58:49.570 --> 58:50.930
啊 有了一些数字呢

58:52.130 --> 58:55.010
密码强度为中 对吧 加上一个特殊制服呢

58:55.810 --> 58:57.010
密码强度来为强

58:58.050 --> 59:04.770
你看我们网站上判断密码强度了 就是用类似的方式 对吧 说明就是用这种方式 当然不同的网站还是要求不一样 但是

59:05.410 --> 59:07.410
基本上操作呢 都是用这种方式操作的

59:08.050 --> 59:12.770
好吧 这是关于正则表的是的进阶部分啊 进阶部分呢 没有什么作业 没有什么作业 大家

59:13.330 --> 59:15.650
练习一下我这里讲过的这些例子就行了

59:16.370 --> 59:17.730
好吧 这是关于正则表的是

59:18.690 --> 59:23.250
好 那就差不多了啊 正则表的是终于把讲完了啊 花了一些时间 这一块再说一下

59:24.370 --> 59:29.330
不用去备啊 不用去备 这里面规则很多 但是你一定要有印象 有这么个印象就行了

59:29.650 --> 59:34.690
以后呢 遇到了正则表的是需要去处理一些问题的时候 因为发现啊 正则表的是处理某些问题的时候

59:35.010 --> 59:39.490
非常非常方便 他比我们用什么寻划呀判断啊方便太多了

59:40.050 --> 59:44.050
甚至呢 有些场景 你不用正则表的是真的很难很难处理

59:44.530 --> 59:48.690
比方说你判断有相可实的 不用正则表的是你怎么判断 我都不知道你怎么判断了

59:49.170 --> 59:51.730
非常非常劳惑的 但是用正则表的是的话就非常轻松

59:52.610 --> 59:59.090
这个东西是一个很强大的功能 但是呢 平时用的不多 但是一旦用上了 你要知道 至少你要知道怎么去查

59:59.570 --> 01:00:02.050
怎么去查文档 怎么去查我这个笔记

01:00:03.330 --> 01:00:03.890
把它的就是

01:00:04.610 --> 01:00:05.250
功能做出来

01:00:05.810 --> 01:00:07.250
好吧 这是关于正则表的是啊

