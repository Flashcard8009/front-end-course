WEBVTT

00:00.000 --> 00:18.420
从这一章开始 也不是从这一章开始 这就是最后一章了 最后一章了 案例实讯

00:19.260 --> 00:28.700
呃 之前呢 我是想的是 要不然哪一整个网站出来 把网站里边的凡是需要用介石实现的呢 都给他实现了

00:29.020 --> 00:35.460
就像我是打算这么做的 但是后来呢 我仔细的衡量了一下啊 因为我以前没有这么做过

00:36.460 --> 00:42.940
仔细的衡量一下 想来想 这样做还是不太好 因为介石这里的效果呢 他比较的杂

00:43.620 --> 00:49.460
他比如说 我要做一个换灯片 就是做做一个轮波图 对吧 我们之前做过的 那么这个轮波图呢

00:50.420 --> 01:00.860
这个网站可以用 另外一个网站也可以用 对吧 呃 比方说咱们要做一个 比方说这些课的吧 做一个图片瀑布流或者是以后呢 做一个歌舞车 那么这个歌舞车呢 东西呢

01:01.540 --> 01:11.060
这个网站可以用 另外一个网站也可以用 所以说他其实介石他的功能啊 他是关注于某一个功能的 而不是某一个网站的 是这么个意思啊

01:11.380 --> 01:21.020
所以说我们还是要以功能为目标来进行练习 比方说这一刻咱们做图片瀑布流 那么就以图片瀑布流这个功能为目标来进行练习

01:21.340 --> 01:28.020
那么以后呢 你在公司里边做到一个网站的时候 那他遇到了图片瀑布流 那么你可以用这样的思路来做

01:28.620 --> 01:43.580
好吧 所以说我们还是不再以网站为整体的目标来去完成了 而是以功能为目标啊 我们把这些功能啊 这一节 这一个章节会加入很多的 就是常见的一些功能啊 并且还加入了一些很有趣味的功能

01:44.500 --> 01:48.780
我们把一些功能完成之后呢 一些以后呢 遇到了类似的东西呢 你都可以完成了

01:49.260 --> 01:54.140
不过最重要的是什么呢 最重要的是通过这些实讯啊 来训练大家的

01:54.580 --> 02:01.180
程序思维 这才是最重要的 因为你要说让我去把所有的情况全部讲完吧 然后我估计吧

02:01.580 --> 02:08.220
讲个一两年都不一定讲得完 因为太多了 对吧 情况是无数的 所以说呢 我们这里的目标啊 还是以

02:08.860 --> 02:16.820
锻炼程序思维为目标 因此大家听课的时候呢 不要紧紧去学习 这一课功能怎么做 还要去学习 我是怎么去思考的

02:17.260 --> 02:22.620
这样子只能去感知 我没有办法用一个规定来告诉你怎么去思考 这个没办法的

02:23.340 --> 02:30.780
只能是大家自己去感受 然后下来自于训练 一定要练啊 每一个实讯部分的练习都要自己去练 把它做出来

02:31.100 --> 02:36.060
做出来的还算 你自己没有写出来 光听的懂 没有任何意义 没有任何意义的啊

02:36.780 --> 02:42.340
好 这一课咱们实现图片目不留 这里边很多效果呢 都是我在公开直播课的时候讲过的

02:42.700 --> 02:47.420
咱们把它 我精选了一些啊 把它讲 把它放到了咱们的这个课程里边

02:48.060 --> 02:50.180
好 图片目不留呢 是这么一个效果 再看一下啊

02:50.660 --> 02:58.900
就是呢 一刷新你看 有这么一些图片啊 一个东花怎么做的啊 这个东花的话 我们以后 我们之后做完了 之后会说啊 这个东花很简单

02:59.540 --> 03:05.300
啊 然后呢 我们这里 当我们改变窗口 你看一下 他重新排列 改变四口过后 他重新排列

03:05.780 --> 03:08.500
啊 就这么回事啊 这是一个图片的铺不留

03:09.300 --> 03:12.820
啊 没问题了吧 ok啊 那咱们呢 就来实现这么一个东西

03:13.700 --> 03:18.020
在实现它的时候呢 我们首先要想到啊 一个问题就是 我是要

03:18.500 --> 03:23.220
仅仅去把这个功能实现 还是要我要去做一个通用的东西

03:24.260 --> 03:32.180
啊 以后呢 每一个网页只要遇到了图片铺不留 我们都可以用类似的方式来做 我们到底用哪一种方式来做这个很关键

03:33.300 --> 03:36.740
就是说 如果我们仅仅考虑把这个页面

03:37.300 --> 03:40.180
东西完成了就行了啊 就把这个效果做出来就完事了

03:40.820 --> 03:44.100
那如果仅仅是这样的考虑的话 难度会降低非常非常多

03:44.820 --> 03:50.900
但是如果你考虑的是 我如果把这个东西不仅要把这个东西完成 而且呢 我要把它做成一个插件

03:51.860 --> 03:56.740
以后呢 任何一个页面只要遇到了图片铺不留 我们都可以使用这个插件来做

03:57.620 --> 04:02.500
都可以使用这个插件来完成这样的功能 那如果我们要这样子考虑的话 考虑的东西就会更多

04:02.740 --> 04:06.260
比方说什么 污染权具 变量啊 这些东西是不是都要考虑 对不对 都要考虑

04:06.740 --> 04:11.460
所以说呢 我们到底要用哪种方式 先要想清楚 那么我这里呢

04:11.860 --> 04:16.980
决定 咱们既然是视频课程 那肯定是要想个凹端的把它做成插件

04:17.540 --> 04:20.500
以后呢 所有的页面只要遇到的图片铺不留 我们都可以使用它

04:21.220 --> 04:26.340
好 于是呢 我们在这里新建个文件啊 插件这里新建个文件 给他取个名字叫做

04:28.500 --> 04:30.100
water

04:31.540 --> 04:36.980
解释 表示图片铺不留的一个插件 好 那么插件一开始的写法 是不是跟之前一样的 对吧

04:37.300 --> 04:40.260
我们把我们的所有的插件都放到这里面 放到这个对象里面

04:40.740 --> 04:46.420
好 当然也可以用 this 对吧 也可以用 this 不过这个东西呢 它是跟动物对象密写相关的

04:46.420 --> 04:51.700
所以说放到window里面也没有什么问题 好 这里呢 我比方说写上这么一个函数

04:51.700 --> 04:54.500
啊 写这么一个函数 叫什么函数呢 叫做create

04:55.300 --> 04:56.980
create water

04:57.780 --> 04:58.820
create water for

04:59.460 --> 05:04.980
创建一个图片铺不留 假设啊 我们写这么一个函数 创建一个图片铺不留

05:05.860 --> 05:06.980
好 这里打个注释嘛

05:07.940 --> 05:11.220
啊 创建一个图片铺不留

05:12.660 --> 05:17.860
好 那么有了这个函数之后呢 将来我使用的时候怎么使用呢 使用起来很简单

05:18.900 --> 05:23.060
看着啊 我们到时候就是其实这个怎么去使用你自己得想好

05:23.460 --> 05:29.780
就是你要满足一个什么样的就是感觉呢 就是用起来非常非常方便啊 非常非常方便 而且还很灵活

05:30.260 --> 05:32.660
啊 还有还非常非常灵活可以进行配置

05:33.140 --> 05:36.900
好 所以说了这一块呢 我们到时候怎么用呢 我决定啊 我个人决定

05:37.220 --> 05:40.100
决定这么用 好 这里呢有一个介石

05:42.020 --> 05:46.420
我这里呢 把它引用进来啊 我们的图片这个插图片铺不留这个插件引用进来

05:46.820 --> 05:53.060
当然这个插件我还没有写啊 我到时候写好之后呢 我希望能达到这么一个效果 就是my plunging

05:53.780 --> 05:57.060
好 里边呢 有一个函数叫做create啊 water

05:58.020 --> 06:04.020
water for water 就水嘛 water for就是铺不的意思啊 创建一个铺不留

06:04.660 --> 06:08.340
好 那么这个函数里边呢 他要传一个配置啊 一个配置对象

06:09.140 --> 06:14.580
这里传一个配置对象 就是我要传一个对象进去进行配置 有哪些东西可以配置呢 当然有很多

06:15.060 --> 06:20.980
那么这里就咱们就思考哪些东西是可以配置的啊 咱们现在思考哪些东西是可以配置的

06:21.780 --> 06:26.420
哪些东西是可以配置的呢 一个是图片之间的渐细

06:26.740 --> 06:32.900
对吧 图片之间的渐细这个渐细呢 我应该可以配置一个最小渐细这个渐细呢 指的是

06:33.380 --> 06:38.260
它横向的渐细 以及重向的渐细啊 有两个渐细 我们需要配置

06:38.660 --> 06:44.020
一个是横向的 配置的是最小渐细啊 因为到时候呢 它会影响那个图片的排列 对不对

06:44.340 --> 06:50.340
它会影响那个图片的排列 所以说因为尺寸不一样嘛 以后渐细的话 这个图片的尺寸

06:50.660 --> 06:55.780
是会不一样的 所以说呢 我们这里呢 最好要能够配置图片之间有个最小渐细

06:56.100 --> 07:00.660
不然的话 到了某一个点比方说啊 到了某一个点 你看渐细都没了 这样子也不太好

07:00.980 --> 07:08.100
它必须要有个最小渐细啊 你看这里做的不是很好 对吧 虽然这个东西也是我自己做的啊 之前公开直播客是要做的

07:08.260 --> 07:11.140
因为公开直播客的时间有限 我不可能讲那么细啊

07:11.940 --> 07:16.900
所以说 这里呢 视频要成了 我就慢慢讲了 那么这里呢 你看这个空隙到了某一个点是不是没了

07:17.300 --> 07:23.780
因此呢 我们可以希望呢 能够配置一个最小的渐细啊 最小的渐细啊 比方说我们这样配置

07:24.020 --> 07:27.620
命最小的嘛 最小的啊 叫做

07:29.700 --> 07:32.900
GaP 渐细的单词叫GaP 空隙啊

07:33.460 --> 07:38.580
然后呢 水平和垂直还不太一样啊 水平和垂直可以分开配置 比方说

07:39.540 --> 07:41.220
h h表示horizontal

07:41.620 --> 07:45.780
horizontal 表示水平方向上的最小渐细 比方说是

07:46.820 --> 07:51.300
有10个相处啊 举个例子嘛 我这个东西是可以配置的 我就是告诉你是可以配置的

07:51.780 --> 07:54.660
水平方向的最小渐细

07:55.780 --> 08:02.020
啊 这是第一个可以配置的 对吧 我们要创建一个图片互不流啊 这个东西是可以配置的 你看因为配置的东西很多

08:02.020 --> 08:03.860
所以说我决定用一个对象传过去

08:04.740 --> 08:11.780
如果你形成参数的话 那要写很多很多的参数 而且呢 有些参数是可以不传递的 对吧 有些参数是可以不传递的 他有默认值

08:12.420 --> 08:17.140
好 下面呢 我们还有个水中向的渐细 v GaP

08:17.860 --> 08:25.060
啊 中向的渐细 比方说以配置为比方说嘛 配置为实物嘛 垂直方向的

08:25.780 --> 08:29.780
最小渐细啊 这些东西都可以配置的啊 都可以配置的

08:30.740 --> 08:35.620
好 还有什么要配置的呢 当然是图片互不流 你是不是得把图片告诉他 对吧

08:36.180 --> 08:41.700
这些图片全是他来生存的啊 他来生存的 你不用在atm里面自己写啊 不用你自己写 是他来

08:42.020 --> 08:47.380
动态生存的 用GS生存的 所以说呢 你这里吧 需要把图片的地址配置给他

08:48.180 --> 08:49.860
有哪些图片 图片的路径是啥

08:51.060 --> 08:55.940
1米级 src s 加个s表示复数 他是一个数组

08:56.340 --> 09:02.100
这里面存放的是什么呢 存放的是图片的路径 比方说我们有哪些图片啊 把路径写到这儿 比方1.jpg

09:02.660 --> 09:07.380
2.jpg 就这样子 是这么个意思 好 那这里边呢 我们有很多图片来看到没

09:08.020 --> 09:15.780
有四十一张图片 好 那这里为了测试啊 为了测试 我这个页面其实因为我们写的是插件 是通用的

09:15.940 --> 09:19.460
所以说这个页面仅仅是起一个测试的作用 其他也没啥作用了

09:20.100 --> 09:28.100
好 我们这里呢 就比方说啊 我们这里建一个数组啊 src s 是一个数组

09:28.340 --> 09:32.020
然后呢 我们这里循环 循环多少次呢 循环41次

09:32.740 --> 09:41.220
小于等于是40 零到40之间 零到40之间 这个图片的名字呢 我也是专门处理过的啊

09:41.460 --> 09:45.620
当然不是说以后这个插件它只能这样的图片命名啊 不是这个意思啊

09:45.860 --> 09:50.100
因为我们这里只是测试为了方便啊 为了方便 所以说我们这里这样子写了

09:51.300 --> 09:57.140
好 然后呢 我们这里写上每一次循环 然后往这个数组里边加一下嘛 对不对 加一下

09:57.460 --> 10:08.260
加一个字符串 这个字符串 这个字符串呢 是什么呢 就是阴秘几些杠啊 然后呢 凭借上i 凭借上点接脾气啊 我们把这个数组放进去

10:09.060 --> 10:14.100
把这个数组放过来 对吧 这是图片 图片路径的数组

10:14.900 --> 10:17.540
然后还有什么东西要配置呢 怎么想想啊

10:18.980 --> 10:19.860
还有啥东西呢

10:20.820 --> 10:28.020
好像也没啥了吧 还有啥啊 没啥了啊 那么一会我想到了之后呢 我再说吧 好吧

10:28.580 --> 10:34.180
想到了之后 对 还有宽度 你看图片瀑布流里边 图片的宽度一定要固定

10:34.900 --> 10:39.140
一定要固定 甭管它的图片原式的宽度是多少 但它的宽度一定要固定

10:39.700 --> 10:45.460
图片的宽度是一定要固定的 你想啊 宽度不固定的话 这个瀑布流是对不起的 是不整齐的

10:45.780 --> 10:51.380
是弯的扭曲的 比方说这个图片宽度是1000个项数 那里说你怎么做瀑布流 你怎么做瀑布流

10:52.100 --> 10:58.740
啊 所以说宽度一定是固定的啊 图片的宽度一定固定 高度可以随便随意 但是宽度一定要固定

10:59.300 --> 11:01.700
好 你做下一个配置 就图片宽度

11:03.780 --> 11:10.580
image 位置 表示图片宽度 宽度的话 比方说是 我看一下这边是多少 这边还挺好看的

11:11.380 --> 11:19.540
我看一下这边图片宽度是多少 宽度是220 啊 行吧 那就配置为220吧 就是可以配置的啊 是可以配置的 这是单张

11:20.580 --> 11:23.700
单张图片的宽度

11:24.420 --> 11:32.260
好 先配置这么多吧 我们一会再想到了再说 好 我再说一次啊 这里配置的是一个对象 那么这个对象是有默认值的

11:33.380 --> 11:38.500
让你想起了啥 让你想起了啥 是不是我们之前学过的那个那个啥

11:39.220 --> 11:42.660
啊 就是对象的啊 那个叫什么

11:43.860 --> 11:48.180
就是对象的交啥 我的天 这个信息啊

11:49.220 --> 11:56.100
交啥了啊 对象的混合 对吧 Mixing 对象混合 那么这里呢 我们就要用对象混合 好 这里就是Options

11:57.140 --> 11:59.860
这里是一个配置 这是用户传进来的配置

12:00.260 --> 12:07.060
但是用户传进来的配置呢 他有些配置可能是缺失的啊 可能是缺失的 那么需要我们自己用默认值给他补上

12:08.020 --> 12:12.500
于是呢 我们这里写上这么一个默认配置 default option

12:14.340 --> 12:15.140
这里是Options

12:16.660 --> 12:21.620
这里是默认配置 好 默认配置呢 我们给他写一遍啊 写一遍默认配置 这里复制一下

12:23.220 --> 12:26.180
默认配置 默认配置呢 比方说这样子吧

12:27.060 --> 12:33.540
这个水平方向的最好建议为10 垂直方向最好建议为10 然后图片路径 图片路径就是一个空数组

12:34.260 --> 12:38.900
你不给我喘 那我怎么办呢 你告诉我怎么办呢 没办法了啊 图片路径我不能瞎猜

12:40.180 --> 12:43.300
单张图片的宽度呢 我就220 我给他个默认配置

12:43.620 --> 12:49.780
也就是说你这里呢 如果你没有填这些配置啊 我就用默认值 好 那么我们用什么对象混合 对不对

12:50.020 --> 12:53.780
好 来得到一个新的配置啊 得到一个新的配置 我们之前咋写的Options

12:53.780 --> 12:58.340
额3 对不对 额3 然后这里写个新对象啊 避免对原对象的造成

12:59.140 --> 13:08.740
造成影响啊 这里DefaultOptions 对吧 这样子啊 或者是我们给重新给Options复制嘛 重新给参数Options复制

13:09.620 --> 13:19.540
好吧 我们这里就是混合进行混合 就是默认配置和用户填件的配置 然后呢给参数Options复制 这里给Options复制会不会影响外边

13:20.420 --> 13:25.060
不会影响外边 怎么会影响这个对象呢 不会的啊 因为这里的复制呢 它是

13:25.460 --> 13:29.060
产生了一个新的地址 对吧 它相当于是把这个对象复制给它了

13:29.620 --> 13:36.420
混合出来 是不是混合到这个对象的 把这个对象的地址复制给它了 那么这个参数指向新的地址呢 跟原来的地址没什么关系了

13:36.740 --> 13:44.020
所以说不会影响外面的东西 总之让我们完成这个配置啊 这里我们输出一下啊 输出一下 看一下这个混合有没有成功

13:44.900 --> 13:46.900
好 保存 好 音乐上看一下

13:50.000 --> 13:55.120
好 运行啊 看一下 这里刷新 那你看配置是不是出来了 对吧 配置就出来了

13:55.680 --> 14:00.000
这是用户填的配置 那么有限的用户是可以不用配置的 比方说这个地方是可以不用配置

14:00.720 --> 14:06.000
比方说这个地方是不可以不用配置 保持默认值就行了 保存 你看一下 没问题吧

14:06.800 --> 14:13.040
好 这个配置是不是搞定了 哦 这里我还想到一个东西 还有一个东西是必须要配置的 什么东西呢 就是

14:13.600 --> 14:19.040
我要把图片往哪个元素里边扔 我要把这个图片往哪个元素里边扔 这个很重要啊

14:19.440 --> 14:24.960
不然的话我倒是把图片往哪个元素里面扔了 图片是用介石创建的 那我倒是往哪个元素里面扔呢 对不对

14:25.280 --> 14:32.800
所以说还得有个元素啊 还得有个div啊 当然我这里呢只是做测试啊 只是做测试 能不能往body里面扔可以

14:33.200 --> 14:38.480
能不能往form表达里面扔 可以 随便啊 随便你咋人 你只要把个dome对象给他就行了

14:38.800 --> 14:44.720
好 那么这里呢 我们比方说啊 比方说 我们把这个图片往哪里面扔呢 往这个div里边扔

14:45.120 --> 14:46.960
啊 往div里边扔 好 我们这里

14:47.920 --> 14:48.160
嗯

14:48.880 --> 14:53.680
dome就contain了容器 容器是哪一个呢 document query selector

14:54.400 --> 14:59.120
把这个divcontain了给他传进去 好 于是呢 这个配置里面 你看是不是多了一个容器了

14:59.440 --> 15:04.400
这边啊 一个contain了 看没一个容器了 总之那么把这些信息呢全部告诉他

15:04.640 --> 15:10.800
剩下的事情交给你了啊 我啥都告诉你了 剩下我不管了 你把他完成 那么剩下的这个函数要做很多很多的事情

15:11.440 --> 15:14.480
把这个图片铺铺留搞定啊 要搞定这个图片铺铺留

15:15.280 --> 15:21.200
好 比方说吧 我们这里呢 这里的默认配置里边啊 再给他加一个啊 再加一个

15:21.920 --> 15:26.800
默认配置里边还有一个就是contain的容器 对吧 如果你没有传进容器的话 我就认为是body

15:27.280 --> 15:30.400
啊 我往body里边扔 对吧 这是容器

15:31.040 --> 15:31.520
啊 容器

15:32.160 --> 15:37.680
好了 配置这一块搞定了 那么接下来我们就说根据不同的配置呢来做不同的 做很多很多的事情

15:38.640 --> 15:40.480
首先呢 我们最容易想到的就是

15:41.120 --> 15:49.760
创建图片元素 把它往哪里边扔 是不是往这个容器里边扔 这是最容易想到的对吧 好 我们这里就来创建图片元素

15:51.520 --> 15:55.280
创建图片元素 好 创建图片元素的时候

15:56.400 --> 16:00.720
待会注意啊 创建这个图片元素它是不是要经过很多的过程

16:01.200 --> 16:07.520
那么一会呢 还要还要做什么了 还要调整图片的位置 对吧 等等等等 他有很多事情要做

16:08.320 --> 16:15.040
所以说呢 这里边呢 我每一件事呢 最好写个函数 但是我不肯定不能写外表 写外面要污染全局辩量

16:15.520 --> 16:21.760
因为我只希望提供一个函数给他访问 因此我不能去污染全局辩量 所以说我们这里把函数写在里边

16:22.480 --> 16:25.680
可不可以 为什么不可以呢 当然可以 把函数写在里边

16:27.040 --> 16:30.320
然后呢 方形函数 函数呢 我们这里

16:31.440 --> 16:39.120
就是创建一米几十 创建图片 写这么一个函数 这个函数用于什么 创建图片

16:39.440 --> 16:43.520
我把函数写里边的好处在于 他不会污染全局辩量 就是他里边自己使用

16:43.840 --> 16:48.000
他自己使用 好 创建图片元素 然后呢 这里就是crazy images

16:48.800 --> 16:55.120
创建图片元素 就完事了 对吧 好 那么创建图片元素 这里面写啥呢

16:55.920 --> 17:03.120
这里有配置 是不是把所有的图片音告诉你了 一个数组 对不对 你就循环数组呗 循环数组去创建呗 i小于什么

17:04.000 --> 17:06.160
i小于option 第二什么

17:07.120 --> 17:17.680
image src 第二nance 小于他的数组的长度 然后每一循环意思干嘛 是不是创建一张图片 对不对 创建一张图片

17:18.320 --> 17:26.880
好 那么我们来创建吧 image create document create element 创建一张图片元素 创建个图片元素

17:27.680 --> 17:31.440
然后干嘛呢 然后干嘛呢 创建个图片元素 过后干嘛呢

17:32.160 --> 17:38.560
然后呢 我们还要设置这个图片的什么src 属性 对吧 设置他的src 属性 设置为啥

17:39.440 --> 17:41.600
设置为啥 src 是不是设置为

17:42.240 --> 17:42.800
当前

17:44.080 --> 17:48.800
这个这个数组 你看一下这个数组是啥 这个数组是不是这个数组 对吧 就这个数组

17:49.120 --> 17:55.200
这个数组呢 每一项是不是图片的路径 对不对 图片的路径 好 我们拿到这个图片的路径啊

17:56.560 --> 17:58.960
src s 当前那个图片的路径 是不是把它

17:59.280 --> 18:08.000
复制进去 所以一米级创建好了 创建好一米级过后了把它加到哪去 所以加到container里面去啊 对吧 我们配置里边一个啥container

18:09.360 --> 18:14.800
这是容器把它加到append child 把这个一米级加到里边去

18:15.760 --> 18:20.080
这个代码不用打注是吧 因为这个在简单的代码就不打注是了啊 就是循环这个

18:20.880 --> 18:22.880
外面打 这里打个注是吧 循环

18:24.000 --> 18:25.760
图片路径数组

18:26.480 --> 18:32.880
这个数组里面每一个项就保存的是一个图片路径 然后呢 循环他给他加src 然后给他加src过后呢

18:33.520 --> 18:35.680
加入到这个append里面去 就完成了

18:37.040 --> 18:37.760
好 保存

18:38.800 --> 18:47.280
现在我们看一下啊 图片有没有加进去 你看是不是加进去了 对吧 图片就加进去了 对吧 但是图片的宽度高度好像不太一样 对吧 宽高不太一样

18:47.600 --> 18:53.520
所以说是不是要设置图片的宽度 对吧 这里还要做一些初始化的操作 设置图片的宽度 style

18:53.840 --> 19:02.800
位置宽度为什么啊 我们之前配置了的啊 不行 配置了的宽度是多少了 宽度是不是就是以米级位置 对吧 图片的宽度

19:03.840 --> 19:07.280
拼接上px 对不对 把宽度控制一下 保存

19:09.040 --> 19:16.080
我这里放大的啊 好的 现在宽度搞定了啊 每张图片都是220的宽度 你看一下右键检查 我们来看一下这些图片啊

19:16.960 --> 19:20.880
你看每张图片是宽度是不是220 看没 好宽度也搞定了

19:21.840 --> 19:29.680
好 还要干嘛呢 还要干嘛呢 你看一下这个图片的排列 他目前是这样的排列的 他肯定这样的排列不然咋排列了

19:30.240 --> 19:39.520
他目前肯定是下边对齐 对吧 每一行的下底边对齐 就是极限对齐嘛 你们以前学atm和css的时候学过那个垂直对齐

19:39.760 --> 19:45.120
那么就是极限对齐 因为图片是行和 他是一式排列的 那上面就不管了 他就不管了

19:45.520 --> 19:55.520
但是我们这边是这种排列方式吗 肯定不是 我们这里一次用这种方式 我都不知道这种方式怎么叫 就是用瀑布流的方式来排列的 对吧 是用这种方式来进行排列的

19:56.320 --> 20:04.000
因此呢 这里那里的排列方式肯定不合理 因此我们该怎么办呢 我们需要把这个图片做成绝对定位

20:05.200 --> 20:09.280
需要把这些图片做成绝对定位 那么我们来来吧

20:10.000 --> 20:16.400
设置图片的style 因为我们以后要调整图片的 用用什么 用json来控制图片的left和top

20:16.800 --> 20:20.320
控制他的坐标 把他设置成什么绝对定位

20:21.600 --> 20:27.360
把他设为什么 abysmalute 好 设为了abysmalute过后 你是不是要想到复原书的问题

20:28.960 --> 20:34.240
他复原书 他复原书是不是应该相对定位 对吧 他复原书必须要是一个定位元素

20:34.960 --> 20:41.040
好 那么这个时候呢 就要出问题了 因为我并不知道你给我的复原书 他到底是不是一个定位元素

20:41.040 --> 20:44.720
你看呗 是别人传给你的 你咋知道这个复原书是不是定位元素了

20:45.040 --> 20:48.640
所以说我们这里要专门来写个函数来复原书

20:49.440 --> 20:57.280
复理复原书的handle 复理 函数就是复理的意思 复理 parent 复原书

20:58.240 --> 21:04.960
复原书 复理复原书 为什么要复理复原书呢 因为图片都是绝对定位

21:06.000 --> 21:11.280
复原书必须是一个定位元素 他必须要是一个定位元素

21:11.680 --> 21:16.080
所以说我们在创建图片之前呢 是不是要先复理一下复理复原书

21:16.720 --> 21:21.600
复理一下复原书 不然的话呢 我到时候相对于谁来谁来排列呢 对不对

21:21.920 --> 21:26.320
好 来复理一下复原书 好 怎么来复理复原书呢 其实复理复原书很简单

21:26.640 --> 21:37.920
就是如果复原书不是定位元素 它不是一个定位元素 则将其变为相对定位

21:38.320 --> 21:42.240
对吧 就做这么一件事 如果它已经是定位元素了 那就不管了 肯定是相对于它移动

21:43.200 --> 21:47.680
好 那怎么来判断复原书 是不是定位元素呢 是不是要用得到最终样式 对吧

21:48.000 --> 21:51.840
get component style 得到复原书的最终样式

21:52.800 --> 21:55.760
就是container 得到这个容器的最终样式

21:56.560 --> 22:00.560
这是它的style 对吧 我来输出什么 输出这个style的什么属性

22:01.040 --> 22:07.120
pration属性 对吧 我管理这个样式表写到哪儿的 它最终最终样式它一定有一个吧 保存看一下吧

22:08.160 --> 22:14.960
好 看一下输出 它输出 static static 是不是静态的 对吧 它不是一个定位元素 好 那么我们这里判判断一下

22:15.280 --> 22:25.120
如果style 的 pration 如果等于了啥 static 如果它是一个定位元素的话 它不是一个定位元素的话 那么我就把它变成定位元素

22:26.080 --> 22:27.920
把这个option container

22:29.040 --> 22:30.080
container

22:30.640 --> 22:35.040
the style 变成什么 pration 变成什么相对定位

22:35.360 --> 22:39.520
当然如果它已经是定位元素了 有人要说为什么不直接把它变成相对定位就完了呢

22:40.480 --> 22:45.520
因为你要考虑到一个问题 就是就是你要做插件 你要做通用的东西 你必须要考虑到各种情况

22:46.160 --> 22:52.400
因为这个服务员是吧 它有可能已经是绝对定位了 那你还又把它变成相对定位 是不是会把页面上其他东西影响到了

22:52.880 --> 22:57.840
别人已经把布局都写好了 已经把它设置成绝对定位了 或者是固定定位

22:58.320 --> 23:01.600
它又布局的要求了 然后你这里刷把它变成相对定位了

23:02.240 --> 23:05.760
啊 你不管三七二十一 就导致了别人用起来就非常非常困难

23:06.480 --> 23:11.280
所以说你这里要考虑到这些问题 只有它是没有是定位元素的时候再把它变成相对定位

23:11.360 --> 23:14.080
因为相对定位呢 是几乎是不会影响这个元素排列的

23:14.640 --> 23:16.800
好 应该是用这么来干啊 这么来干

23:17.760 --> 23:21.520
好 写好了啊 写好了 写好了之后呢 它图片全部重叠在一起了

23:22.080 --> 23:28.320
所有的图片全部重叠在一起了 因为它全是绝对定位嘛 对吧 它脱离的文档流于是全部重叠在一起

23:28.640 --> 23:29.120
看到没

23:30.160 --> 23:34.160
好 为了让你们看到效果了 我在测试的时候呢 我故意的给这个啊

23:34.800 --> 23:38.720
当然这些事情可以做 可以不做啊 我只是为了测试 让你们看着方便

23:39.280 --> 23:41.280
contain了呢 我给他写上一个

23:42.320 --> 23:42.960
写上个啥呢

23:44.480 --> 23:46.800
写上一个宽度嘛 宽度1000个像素

23:47.920 --> 23:52.800
嗯 或者是用百分比嘛 百分之九十嘛 百分之九十 然后marginin out

23:53.520 --> 23:58.880
marginin out 然后写个border border 然后我写两个像素啊 solid 让你们看得清楚一点啊

23:59.440 --> 24:03.920
保存 看一下吧 那么现在为什么变成一根线 是因为它高度摊塌了

24:04.000 --> 24:09.280
因为它里边的绝对定位元素是不会计算高度的 你看 这个div它变成一根线了在页面上

24:09.840 --> 24:13.360
啊 看到没 没关系啊 我们之后一定会解决这个问题的啊 不着急

24:14.240 --> 24:18.160
啊 一定会解决的 那么为了看到效果 我们先暂时的把高度给它设置一下吧

24:19.520 --> 24:22.800
1000个像素啊 1000好像不够 3000个像素啊

24:23.680 --> 24:28.240
好吧 先把高度给它设置一下 好 那么现在的图片设置成这个样子的

24:28.960 --> 24:35.840
接下来的问题就是图片的位置 是不是要重新设置图片的坐标 对不对 要重新设置

24:36.240 --> 24:41.600
图片的坐标 好 于是呢 我们这里专门来写一个函数来处理这个事 你看 一件事

24:42.480 --> 24:45.760
就是一个函数 你千万不要把这个单一把全部揉在一起 这要一起聊风

24:46.080 --> 24:53.280
就写到最后你真的要疯掉 好 写个函数来表set什么 image placing 这是核心

24:54.000 --> 25:04.880
啊 设置每一张图片的坐标啊 这个函数是核心 那这里肯定是创建完图片之后 是不是要设置坐标了

25:06.240 --> 25:10.560
设置图片元素的坐标 要设置坐标了

25:11.440 --> 25:16.880
好 怎么来设置坐标呢 是不是肯定要循环 对吧 要拿到每一张图片来进行循环

25:17.200 --> 25:22.160
要设置坐标 那么关键是怎么来设置这里一个思路必须要想通

25:22.720 --> 25:28.560
你没有想通这个思路的话 你手都下不了 你循环写好了 你不知道该咋写了 这坐标怎么来算 你不知道该咋算

25:29.360 --> 25:33.520
好 那么怎么来设置图片坐标呢 其实这里有很多方式

25:34.000 --> 25:37.760
其中有一种方式是以前有一个学生提供给我的

25:38.240 --> 25:41.280
以前我用的还不是这种方式 还用的比较复杂一点的方式

25:41.760 --> 25:44.320
那个学生给我提供的这种非常非常巧妙的方式

25:45.040 --> 25:52.080
我大为感动 然后以后我讲课 讲这个功能的时候就使用了这种方式了 我给大家看一下啊 他用的是什么样的方式

25:53.120 --> 25:56.560
所以他自己没把代码写出来 但是他的思路是非常非常不错的

25:56.720 --> 26:00.480
他就说老师我一个代码写不出来 但是我觉得我其实想的应该是没错的

26:00.960 --> 26:02.640
我听了一下我觉得非常非常好

26:03.360 --> 26:04.320
这是我们的容器

26:05.680 --> 26:09.680
好 然后图片是怎么排列的呢 我们先计算出

26:10.640 --> 26:14.800
一行能排几张图片 我们先把这个东西计算出来

26:15.360 --> 26:18.960
一行能够排几张图片啊 先把这个东西计算出来

26:19.520 --> 26:23.520
那么比方说吧比方说 一行能排

26:24.880 --> 26:30.560
能排五张啊 比方说一行能排五张做第一步啊 他的思路里的第一步是计算

26:32.160 --> 26:37.680
一行有几张图片啊 计算一行有几张图片

26:38.640 --> 26:41.520
然后比方说是五张 于是呢他建立一个数组

26:42.240 --> 26:43.680
这个数组的长度就是五

26:44.800 --> 26:49.680
数组里面每一个指是啥呢 每一项的指是啥呢 每一项的指呢就是零

26:50.720 --> 26:51.840
他是用这么一种思路

26:52.880 --> 26:56.480
他自己描述的时候不是这样描述啊 他自己是过画筒演示

26:57.040 --> 26:59.200
好 那么数组里面每一项就是零

27:00.240 --> 27:02.880
这个数组里面记录的是啥呢 他记录的就是

27:03.600 --> 27:07.840
每一列 对吧 一行有五张 那么是不是有五列 对不对

27:08.080 --> 27:09.120
他就一共有五列嘛

27:09.840 --> 27:12.640
这个能想象的出来吧 一行有五张是不是一共就有五列

27:13.040 --> 27:17.760
那么这个数组的记录的是啥呢 每一列下一张图片的

27:20.270 --> 27:20.830
每一列

27:22.510 --> 27:26.910
每一列下一张图片的top

27:29.790 --> 27:32.030
每一列下一张图片的top

27:32.430 --> 27:34.510
他主要是为了做top的啊

27:34.750 --> 27:36.190
Left的指呢 其实很简单

27:36.750 --> 27:39.790
Left的指很简单啊 我们以后说Left的指怎么来做

27:40.510 --> 27:42.510
主要是top指 主要的问题是top指

27:42.910 --> 27:44.910
下面那么这里呢 就是一个数组

27:45.070 --> 27:48.510
这个数组呢 记录的是每一列下一张图片的top

27:49.070 --> 27:53.150
一开始是不是零 对吧 下一只就顶到边上嘛 对吧 顶着边

27:53.310 --> 27:55.470
对不对 所以说一开始呢 就是零

27:55.710 --> 27:56.350
啊 就是零

27:56.910 --> 27:57.470
没问题吧

27:58.590 --> 27:59.310
哎 没问题吧

27:59.630 --> 28:00.190
说没问题

28:00.670 --> 28:01.070
好吧

28:02.350 --> 28:03.630
好 那么接下来了

28:04.270 --> 28:05.230
他开始来排列

28:05.550 --> 28:07.390
好 一张图片一张图片拿出来

28:07.790 --> 28:10.510
拿出来过后第一张图片他怎么来做呢

28:10.990 --> 28:13.550
当我要放置图片的时候 我做这么一件事情

28:14.430 --> 28:15.310
放置图片时

28:17.230 --> 28:20.430
放置啊 就是设置图片时

28:21.150 --> 28:22.030
这样子来设置

28:22.670 --> 28:23.550
图片位置时

28:24.590 --> 28:25.390
这样子来设置

28:25.790 --> 28:26.270
第一步

28:27.470 --> 28:32.190
得到啊 得到数组中最小的指

28:33.790 --> 28:37.470
最小的指 是不是 比方说啊 比方说 我们这里呢

28:39.550 --> 28:42.910
有这么一些图片了啊 这是一张啊 这是两张

28:44.510 --> 28:45.070
这样的话吧

28:45.630 --> 28:48.750
这是一张啊 这是两张比方说吧

28:49.230 --> 28:53.710
这是三张啊 这是四张啊 这是五张比方说吧 是这个样子

28:54.190 --> 28:55.550
好 那么下一张图片应该放哪

28:55.790 --> 28:56.510
你说应该放哪

28:57.390 --> 29:01.150
是放这 对吧 这里的高度不够嘛 对吧 往这里填充 对不对

29:01.310 --> 29:01.710
放这

29:02.350 --> 29:03.230
好 下一次放了

29:03.790 --> 29:04.350
下一次放了

29:04.670 --> 29:08.270
放这 对吧 高度不够嘛 再下一次放了 是不是放这 对不对

29:08.510 --> 29:11.710
好 再下一次放了 是不是放这 这是不符合逻辑的 对不对

29:12.110 --> 29:13.950
好 再下一次是不是放这 对不对

29:14.430 --> 29:17.230
好 那么我们得到的是什么呢 得到的是个数组中

29:17.950 --> 29:20.350
数组中最小的指 最小的指 是不是

29:21.070 --> 29:22.590
最矮的那一部分 对不对

29:23.070 --> 29:24.670
它的高 它下一个高度

29:25.230 --> 29:26.590
它下一个的top值最小

29:26.910 --> 29:28.110
那你看一下这个地方

29:28.350 --> 29:31.550
这个图片的下一个top值 就这一列的下一个top值 是不是最小的

29:32.110 --> 29:36.670
因为这个数组里面记录的是每一列下一张图片的top值

29:37.230 --> 29:40.030
所以说这个地方下一张图片的top值是不是最小的

29:40.350 --> 29:41.230
对不对 是最小的吧

29:42.030 --> 29:42.510
没问题吧

29:43.070 --> 29:46.270
这张图片的下一张图片的top值是最小 你看top值在这嘛

29:46.830 --> 29:50.190
左上角的坐标嘛 对吧 图片左上角的坐标top值

29:50.830 --> 29:52.990
好 于是呢我们找到数据中最小的指

29:53.390 --> 29:54.910
是不是就可以得到它的top值了

29:56.110 --> 29:56.990
设值top值

29:57.710 --> 29:58.350
就完事了

29:58.910 --> 29:59.790
好 第二步

30:00.670 --> 30:01.790
然后干嘛呢

30:02.510 --> 30:03.310
更新

30:04.750 --> 30:06.430
更新数组

30:07.310 --> 30:10.350
该项的top值

30:11.710 --> 30:12.350
比方说

30:12.750 --> 30:15.470
比方说现在数组 比方说现在数组变成这个样子

30:15.790 --> 30:18.430
变成了170

30:19.150 --> 30:19.710
50

30:20.990 --> 30:21.550
80

30:22.430 --> 30:22.830
30

30:22.990 --> 30:24.750
好 那么找到最小的指数是它 对吧

30:24.910 --> 30:26.350
于是呢我加了一张图片了

30:26.350 --> 30:28.430
我在这里行 这一列加了一张图片

30:28.750 --> 30:29.550
设值到top值

30:29.870 --> 30:31.070
那么这一列是不是要更新

30:31.070 --> 30:32.510
它下一张图不值是不是就变了

30:32.750 --> 30:33.230
对不对

30:33.230 --> 30:34.190
它一开始是30嘛

30:34.190 --> 30:35.150
然后加了一张图片过后

30:35.150 --> 30:37.070
你还要把图片高度传进去 对不对

30:37.230 --> 30:38.110
所以说这一块呢

30:38.350 --> 30:38.990
它又变了

30:39.150 --> 30:39.710
它又变了

30:39.710 --> 30:40.750
它的top值又变了

30:40.750 --> 30:41.710
就变成了多少了

30:41.790 --> 30:43.550
比方说比方说变成了120了

30:44.350 --> 30:46.430
好 那么下一次是不是最小的就变成它了

30:46.510 --> 30:46.990
对不对

30:46.990 --> 30:47.710
就变成它了

30:47.710 --> 30:49.310
所以说你要更新这个图片

30:49.310 --> 30:50.670
数据中该项的top值

30:51.630 --> 30:52.830
然后再干嘛呢

30:53.230 --> 30:54.350
再来设置什么

30:54.590 --> 30:55.870
设置left值

30:56.350 --> 30:57.230
设置left

30:58.110 --> 30:59.150
怎么来设置left呢

30:59.470 --> 31:06.270
得到该项是数组的第几项

31:06.910 --> 31:07.630
第几项

31:09.310 --> 31:10.750
得到该项是数组的第几项

31:10.750 --> 31:13.150
比方说刚才得到是这一项对不对

31:13.310 --> 31:14.590
好 把这个下标拿到

31:14.830 --> 31:15.790
这一项的下标拿到

31:15.950 --> 31:16.750
那么这是第

31:16.750 --> 31:18.750
我们就可以得到它是第五列对不对

31:18.990 --> 31:20.590
那么第五列的x軸

31:21.150 --> 31:22.670
就这个距离是不是可以得到

31:22.910 --> 31:25.310
那虽然算起来肯定有会有一些码反

31:25.310 --> 31:26.830
但是是不是可以一定可以算出来

31:27.310 --> 31:29.630
你是第几列确定的

31:30.430 --> 31:32.910
我又能确定整个的宽度对吧

31:32.910 --> 31:34.830
整个tfo的宽度我一定是能确定的

31:35.470 --> 31:36.910
然后我又能确定啥

31:36.910 --> 31:39.870
我又能确定每一张图片的宽度

31:40.030 --> 31:42.670
是不是我一定能算出来这个left值对吧

31:42.750 --> 31:44.190
你把某一列确定的下来了

31:44.190 --> 31:45.470
他的left值一定出来了

31:46.510 --> 31:50.430
那么来用于计算left值

31:50.430 --> 31:51.710
好 以后我们就计算

31:51.710 --> 31:53.150
它整体的思路就是这样子

31:53.710 --> 31:55.070
这样的思路非常非常好

31:56.030 --> 31:57.630
就可以非常轻松的做出来了

31:57.630 --> 31:59.630
当然对你们来说可能还不太轻松

31:59.630 --> 32:01.070
但是我当时听到我近代了

32:01.070 --> 32:02.830
因为之前用的不是这种方式

32:03.070 --> 32:04.430
非常非常复杂的方式

32:04.430 --> 32:06.190
我现在都一点忘了我之前用啥方式了

32:06.190 --> 32:08.670
反正这种之后来我就全是用这种方式了

32:09.470 --> 32:11.310
好 接下来我们来做

32:11.630 --> 32:12.510
好 怎么来做呢

32:12.510 --> 32:14.350
是不是我们首先要计算啥

32:14.350 --> 32:14.750
你看

32:14.910 --> 32:17.070
首先要计算一行有几张图片

32:17.070 --> 32:18.110
先要把这个东西搞定

32:18.750 --> 32:20.590
一行有几张图片

32:21.630 --> 32:23.470
好 那么怎么来算呢

32:23.470 --> 32:24.910
怎么来算这个东西呢

32:25.150 --> 32:27.390
一行有几张图片 是不是要计算的

32:28.110 --> 32:29.150
好 我们来看一下吧

32:29.710 --> 32:30.190
我们

32:30.750 --> 32:32.110
当然如果我们得到

32:32.110 --> 32:34.510
这个DIV的宽度一定是要得到的 对吧

32:34.990 --> 32:37.150
DIV的宽度是一定要得到的

32:37.150 --> 32:37.870
一定要得到的

32:37.870 --> 32:39.390
但这个宽度是不保喊什么

32:39.390 --> 32:40.670
不保喊边框的宽度

32:40.830 --> 32:42.110
是不保喊边框的宽度

32:42.830 --> 32:43.390
没问题吧

32:43.550 --> 32:46.590
因为我们之前写了个什么

32:47.230 --> 32:48.270
多么核心这里

32:48.590 --> 32:48.990
也不是

32:49.310 --> 32:50.510
这个多么事件这里

32:50.510 --> 32:53.070
我们讲到了这个就是关于补充知识

32:53.070 --> 32:53.950
在哪里

32:56.610 --> 32:57.650
在尺寸这里对吧

32:57.650 --> 32:59.090
尺寸这里我们当时讲了

32:59.090 --> 33:01.010
各个元素的宽度怎么来算

33:01.250 --> 33:04.050
不保喊边框的宽度

33:04.050 --> 33:05.490
因为我们设置Nav the top

33:05.490 --> 33:07.250
它只是在盘顶核

33:07.250 --> 33:09.010
就是填充核 包括填充区

33:09.010 --> 33:09.810
包括什么

33:09.810 --> 33:10.690
包括内容区

33:10.690 --> 33:11.890
在这个区里边设置

33:11.890 --> 33:13.170
所以说我们要得到它的什么

33:13.170 --> 33:14.450
Client Width

33:14.610 --> 33:17.250
得到它的不保喊边框部分

33:17.250 --> 33:18.930
不保喊滚动条部分的宽度

33:18.930 --> 33:20.050
我们要得到这个宽度

33:20.050 --> 33:21.970
这样子就可以把DIV的宽度达到了

33:21.970 --> 33:22.530
对不对

33:22.530 --> 33:23.010
好

33:23.010 --> 33:24.290
这样子我们这里有

33:24.450 --> 33:26.210
我怕这里会宣出来比较复杂

33:26.210 --> 33:27.730
所以说我再单独写个函数

33:27.730 --> 33:28.930
只要你觉得它复杂了

33:28.930 --> 33:30.290
马上单独写个函数

33:30.930 --> 33:31.730
得到什么

33:32.050 --> 33:34.850
得到图片的水平分布信息

33:34.850 --> 33:35.490
Get

33:35.490 --> 33:37.250
Horizontal

33:37.730 --> 33:38.130
完了

33:38.130 --> 33:38.930
完了完了

33:38.930 --> 33:39.970
单词又不回写了

33:39.970 --> 33:41.330
Horizontal

33:41.810 --> 33:43.170
幸好有提示

33:43.730 --> 33:45.250
Horizontal Info

33:45.490 --> 33:47.810
得到图片水平方向上的信息

33:48.690 --> 33:53.010
得到图片水平方向上的信息

33:53.570 --> 33:55.010
得到这个水平方向上的信息

33:56.850 --> 33:57.170
好

33:57.170 --> 33:57.970
那么这个信息

33:59.010 --> 33:59.810
有哪些信息

34:00.370 --> 34:02.530
这个信息里边肯定包含这么一些信息

34:02.930 --> 34:04.050
到时候我要返回的时候

34:04.050 --> 34:05.330
肯定要包含这么一些信息

34:05.650 --> 34:06.210
返回什么

34:06.770 --> 34:07.810
有多少张图片

34:07.810 --> 34:09.010
一行有多少张图片

34:09.410 --> 34:10.210
就是Lumber

34:10.850 --> 34:11.890
比方说5张

34:11.890 --> 34:13.170
当然肯定要计算出来

34:13.170 --> 34:13.650
对不对

34:13.650 --> 34:14.370
计算出来

34:14.370 --> 34:15.250
一共有5张

34:15.570 --> 34:17.570
然后水平方向上才有什么

34:17.890 --> 34:18.530
总宽度

34:18.930 --> 34:20.290
就是整个容器宽度

34:21.170 --> 34:21.970
container

34:21.970 --> 34:22.530
位置

34:23.250 --> 34:24.290
容器宽度

34:24.290 --> 34:24.850
比方说

34:24.850 --> 34:25.490
比方说

34:25.970 --> 34:26.450
1000

34:26.450 --> 34:27.730
我这就讲个举个例子

34:28.050 --> 34:29.250
这是容器宽度

34:29.250 --> 34:30.530
我把这些信息全部给你

34:31.170 --> 34:31.970
要怎么用去用

34:32.770 --> 34:34.050
然后水平的空气

34:34.610 --> 34:35.570
水平的空气

34:35.810 --> 34:36.450
比方说

34:36.610 --> 34:36.850
这里

34:38.850 --> 34:39.570
15个像素

34:39.570 --> 34:41.570
因为同学说水平空气不是已经配置的吗

34:41.970 --> 34:42.370
注意

34:42.370 --> 34:43.330
我配置的是啥

34:43.490 --> 34:45.490
配置的是最异小的水平空气

34:45.890 --> 34:47.250
它可能算出来一个空气

34:47.250 --> 34:47.810
比方说

34:48.290 --> 34:48.770
那这里

34:49.250 --> 34:49.890
那比方说

34:49.970 --> 34:50.450
这里

34:50.450 --> 34:51.490
我们这样子

34:52.850 --> 34:53.410
这样子吧

34:54.130 --> 34:54.610
这样

34:55.650 --> 34:57.250
你看空气是不是变大了

34:57.250 --> 34:58.850
因为它算出来必须要这样子排列

34:58.850 --> 34:59.810
所以它空气要变大

35:00.130 --> 35:01.170
它空气要变大

35:01.330 --> 35:02.610
所以说你这个没办法

35:02.610 --> 35:03.250
没办法

35:03.330 --> 35:05.730
我只能说配置的是最小空气

35:06.050 --> 35:07.330
配置的是最小空气

35:08.050 --> 35:08.770
不要这个意思吧

35:09.490 --> 35:11.890
于是我这里得到了水平方向信息

35:11.890 --> 35:13.490
就是它实际的空气算出来

35:13.490 --> 35:14.130
应该是多少

35:14.130 --> 35:15.090
这些都要算的

35:15.090 --> 35:16.930
我们先不着急说什么后续的东西

35:16.930 --> 35:18.130
我们先把这个东西搞定

35:18.130 --> 35:18.850
这个东西没搞定

35:18.850 --> 35:19.810
后面没法做

35:20.770 --> 35:22.370
然后呢

35:22.370 --> 35:23.010
还有啥呢

35:23.730 --> 35:24.210
还有啥呢

35:24.210 --> 35:24.850
没啥了对吧

35:24.850 --> 35:25.490
就没啥了

35:25.490 --> 35:25.650
好

35:25.650 --> 35:26.610
咱们把这些东西得到

35:26.850 --> 35:27.570
这些东西得到

35:28.690 --> 35:29.810
那今天来吧

35:30.130 --> 35:30.530
来吧

35:31.330 --> 35:33.170
这个玩意是很好得到的

35:33.650 --> 35:34.850
这个玩意是很好得到的

35:34.850 --> 35:35.090
好

35:35.090 --> 35:36.450
我们这里创建个对象吧

35:37.330 --> 35:38.130
创建个对象

35:38.130 --> 35:40.050
这个对象里边什么container

35:40.050 --> 35:40.450
wits

35:40.450 --> 35:41.490
这个东西很好得到

35:41.490 --> 35:42.050
怎么得到

35:42.530 --> 35:43.890
是不是我们之前去过了

35:43.890 --> 35:44.450
Obin

35:44.450 --> 35:45.650
什么container

35:45.650 --> 35:45.810
对吧

35:45.810 --> 35:46.370
我们的容器

35:46.370 --> 35:47.490
它给我配置里边的容器

35:47.490 --> 35:47.970
对吧

35:48.130 --> 35:49.410
得到容器的client

35:50.370 --> 35:51.410
这是容器的

35:52.130 --> 35:54.130
容器宽度

35:55.010 --> 35:56.050
这个玩意很好得到

35:56.930 --> 35:57.570
一下就得到了

35:58.130 --> 35:59.570
那最后就是把ob界返回

36:01.330 --> 36:01.970
还有什么呢

36:02.530 --> 36:03.090
还有就是

36:04.130 --> 36:05.330
一行有多少个

36:06.770 --> 36:07.730
一行有多少个

36:08.370 --> 36:11.090
那么这个一行有多少个怎么算了

36:11.570 --> 36:12.050
怎么算

36:13.010 --> 36:14.690
我们现在的假设

36:14.690 --> 36:16.450
这里有两种情况

36:16.450 --> 36:18.050
第一种情况的图片是这样的排列的

36:19.010 --> 36:21.090
水平方向是这样的排列的

36:21.810 --> 36:23.250
另外一种情况的是这样子

36:24.930 --> 36:26.050
另外一种情况是这样子

36:26.690 --> 36:27.730
就图片它可能是

36:27.730 --> 36:28.690
它是这样的排列的

36:28.690 --> 36:30.050
它左右两边顶着边

36:31.010 --> 36:32.130
左右两边顶着边排列

36:32.130 --> 36:33.410
就看用哪种方式

36:33.410 --> 36:34.690
比方说我们现在换一种方式

36:35.170 --> 36:36.530
尽管我们之前讲

36:37.490 --> 36:38.850
公开直播后的时候讲的是

36:39.650 --> 36:40.530
刚才的那种方式

36:40.530 --> 36:41.730
那么比较那种换一种方式

36:41.730 --> 36:42.530
是这样的排列的

36:43.490 --> 36:45.090
每张图片之间空气是一样的

36:45.090 --> 36:46.050
空气肯定是一样的

36:46.610 --> 36:47.730
空气一定是一样的

36:47.810 --> 36:49.170
图片的宽度也一样

36:50.610 --> 36:51.970
那么现在的问题

36:52.770 --> 36:54.530
一行能排多少张图片

36:55.730 --> 36:57.090
那么你首先要算一下

36:58.770 --> 37:00.850
如果一行排X个图片

37:02.690 --> 37:03.250
假设

37:04.290 --> 37:04.770
假设

37:05.170 --> 37:06.370
一行是

37:07.170 --> 37:08.290
图片的数量是X

37:09.730 --> 37:10.850
那么空气有多少

37:12.770 --> 37:13.650
这种排列方式

37:13.650 --> 37:14.290
空气有多少

37:14.290 --> 37:14.850
你数一下吧

37:15.650 --> 37:16.290
六张图片

37:16.530 --> 37:17.250
几个空气

37:17.250 --> 37:18.130
一二三四五

37:18.130 --> 37:18.930
五个空气对吧

37:19.490 --> 37:20.130
六张图片

37:20.130 --> 37:21.010
五个空气吗

37:21.010 --> 37:21.570
没问题吧

37:22.450 --> 37:23.330
没问题吧

37:23.330 --> 37:23.890
六张图片

37:23.890 --> 37:24.610
五个空气

37:24.610 --> 37:25.890
所以说空气的数量

37:25.890 --> 37:26.210
是不是

37:27.730 --> 37:28.690
X减1

37:28.690 --> 37:29.170
对不对

37:30.370 --> 37:30.930
对不对

37:30.930 --> 37:31.490
没问题吧

37:32.210 --> 37:32.450
好

37:32.450 --> 37:34.530
空气是不是有个最小值

37:34.530 --> 37:35.490
我们是不是配置过了

37:36.050 --> 37:37.330
之前我都没有配置这些东西

37:37.890 --> 37:38.770
那现在我们配置了

37:39.330 --> 37:40.530
空气有一个最小值

37:41.090 --> 37:42.370
min h gap

37:43.250 --> 37:44.370
随着方向的最小值呢

37:44.930 --> 37:46.290
随着方向最小值好像没啥用

37:46.770 --> 37:47.570
好像没啥用

37:48.610 --> 37:49.570
就是随着方向的

37:49.730 --> 37:50.610
方向上的间隙

37:51.570 --> 37:52.210
这个东西就是

37:52.210 --> 37:53.410
随着方向上的间隙

37:53.410 --> 37:54.130
好像没啥用

37:54.610 --> 37:55.250
那无所谓吧

37:55.650 --> 37:56.130
无所谓

37:57.650 --> 37:57.810
好

37:57.810 --> 37:58.370
我们再来

37:58.370 --> 37:58.850
再看

37:59.570 --> 38:01.650
那么空气的数量是X减1

38:01.650 --> 38:02.850
这是图片的

38:03.010 --> 38:03.810
图片的数量

38:04.290 --> 38:05.010
图片的数量

38:05.570 --> 38:06.290
我们这里呢

38:06.290 --> 38:07.090
这样子来算

38:07.410 --> 38:08.050
算这个X

38:08.050 --> 38:09.090
我们算的就是个X

38:09.410 --> 38:11.090
X表示的是图片的数量

38:11.730 --> 38:12.850
那么这个X怎么算呢

38:13.090 --> 38:14.050
我们有这么一个公式

38:15.090 --> 38:15.810
X

38:15.810 --> 38:16.930
假设图片的数量为X

38:16.930 --> 38:17.890
这是个数学问题

38:17.890 --> 38:19.090
乘以图片的宽度

38:20.050 --> 38:22.050
再加上X减1

38:22.290 --> 38:24.290
乘以最小间隙的宽度

38:24.290 --> 38:24.930
对吧

38:24.930 --> 38:26.050
min h gap

38:26.690 --> 38:27.970
最小间隙的宽度

38:28.450 --> 38:29.890
那么这个宽度加起来

38:29.890 --> 38:31.250
是不是要等于总宽度

38:31.250 --> 38:31.810
对不对

38:32.210 --> 38:33.490
是不是等于容器的宽度

38:33.730 --> 38:34.130
对吧

38:34.690 --> 38:35.490
等于容器的宽度

38:35.490 --> 38:36.050
没问题吧

38:36.530 --> 38:37.410
图片的数量

38:37.810 --> 38:38.930
乘以图片的宽度

38:38.930 --> 38:39.890
加上你看吧

38:40.450 --> 38:41.250
图片的宽度

38:41.250 --> 38:41.890
乘起来

38:42.210 --> 38:43.570
加上空气的宽度

38:43.730 --> 38:45.650
那么假设空气是最小宽度

38:45.650 --> 38:47.090
假设空气是最小宽度

38:47.090 --> 38:48.130
你不能再小了

38:48.770 --> 38:51.170
那么刚好要应该等于容器的宽度

38:51.170 --> 38:52.290
那么再算X

38:52.290 --> 38:53.970
这是个一元一式方程

38:53.970 --> 38:55.810
不会用到太高深的数学知识

38:56.050 --> 38:57.250
那这个是不是可以算

38:57.250 --> 38:58.050
咋算

38:58.450 --> 39:00.050
那么我们来解一下吧

39:00.290 --> 39:01.970
尽管我解这个E2方程

39:02.290 --> 39:03.330
一个口角的

39:03.810 --> 39:07.250
X乘以min h gap

39:07.970 --> 39:11.570
再减去min h gap

39:12.370 --> 39:13.410
那么等于啥

39:13.490 --> 39:14.210
等于这个

39:14.770 --> 39:15.970
容器的宽度

39:16.210 --> 39:17.250
这真的是口角

39:18.130 --> 39:19.810
然后这个

39:19.810 --> 39:20.530
怎么弄

39:21.170 --> 39:21.730
怎么弄

39:22.050 --> 39:24.370
然后这边就是把这个移过去

39:24.610 --> 39:25.250
移过去

39:25.570 --> 39:28.450
加上什么min h gap

39:29.570 --> 39:31.330
然后再来就是

39:31.810 --> 39:33.250
X就应该等于什么

39:33.490 --> 39:34.850
等于这个加上这个

39:35.410 --> 39:36.610
这个加上这个

39:36.850 --> 39:37.810
除以啥

39:37.970 --> 39:41.650
除以宽度加上min h gap

39:41.650 --> 39:42.130
对吧

39:42.450 --> 39:43.170
就这样子

39:43.490 --> 39:44.610
一个是不是算出来了

39:44.850 --> 39:46.610
每一行的图片数量是算出来了

39:46.850 --> 39:47.970
总之你去解一下吧

39:47.970 --> 39:49.330
这个东西解一下

39:49.330 --> 39:51.250
这个东西我就没法写成注射

39:51.250 --> 39:52.930
你告诉我怎么写注射这个东西

39:53.170 --> 39:55.010
我只能去看视频

39:55.010 --> 39:56.850
我是这样裂出来的

39:57.330 --> 39:57.650
好

39:57.650 --> 39:58.530
我们来算一下

39:58.850 --> 39:59.810
当然有些同学会想到

39:59.810 --> 40:01.170
它可能是小数

40:01.170 --> 40:03.010
那我们以后再说小数的情况

40:03.730 --> 40:03.890
好

40:03.890 --> 40:05.010
那么现在的计算

40:05.170 --> 40:06.290
计算图片

40:06.690 --> 40:09.330
一行图片的数量

40:10.130 --> 40:10.690
数量

40:10.930 --> 40:12.530
OBG数量的有多少呢

40:12.690 --> 40:13.730
就是Lumber

40:14.130 --> 40:15.090
数量的有多少呢

40:15.090 --> 40:15.890
就是这个值

40:16.690 --> 40:17.570
contain到位置

40:17.570 --> 40:19.570
当然OBG一定要contain到位置

40:19.570 --> 40:20.610
我们刚才算出来的

40:20.770 --> 40:21.570
加上这个什么

40:21.730 --> 40:24.290
OBG里边的min h gap

40:24.530 --> 40:25.170
加上什么

40:25.730 --> 40:26.770
OBG里边的

40:27.330 --> 40:28.930
OBG里边的图片宽度

40:29.970 --> 40:31.250
稍微改一下名字

40:31.890 --> 40:33.410
然后再加上一个什么

40:34.210 --> 40:34.930
OBG的

40:35.570 --> 40:36.290
就是

40:37.970 --> 40:38.850
刚才写的是

40:39.090 --> 40:39.970
刚才写的是啥

40:40.450 --> 40:41.810
min h gap

40:42.290 --> 40:42.770
对吧

40:43.810 --> 40:46.130
我们来算出一行有多少张图片

40:46.370 --> 40:48.210
那么这个算出来是不是有可能是小数

40:48.770 --> 40:49.730
是不是有可能是小数

40:50.450 --> 40:53.170
比方说算出来是4.5

40:53.730 --> 40:55.090
4.5张图片

40:55.250 --> 40:56.690
那是不是你只能是4张

40:56.850 --> 40:57.410
你不能

40:57.810 --> 40:59.410
硬给它几半张进去吧

40:59.730 --> 41:01.330
你不能也不能加1

41:01.330 --> 41:02.930
不能把它看成5张吧

41:03.170 --> 41:03.490
对吧

41:03.490 --> 41:04.690
它图片不能是半张

41:05.010 --> 41:07.090
我们只能取少不能取多

41:07.250 --> 41:07.970
应该就是吧

41:08.210 --> 41:09.890
比方说我们这里还留了一点空间

41:09.890 --> 41:11.090
可以放0.5张

41:11.170 --> 41:12.050
那我就不放

41:12.050 --> 41:13.010
我就不放

41:13.010 --> 41:13.890
不放这张图片

41:13.890 --> 41:14.850
我只能少

41:14.850 --> 41:15.810
它不能多

41:16.050 --> 41:16.850
明白我的意思吧

41:17.010 --> 41:18.450
所以说我们还要干嘛呢

41:18.450 --> 41:20.130
还要对它向下取整

41:20.770 --> 41:21.250
number

41:21.810 --> 41:23.570
用什么mass.flo

41:23.810 --> 41:25.330
对它进行向下取整

41:27.330 --> 41:30.050
每行的图片只能少

41:30.610 --> 41:31.170
不能多

41:31.170 --> 41:32.210
因为一多的话

41:32.370 --> 41:34.210
是不是就把最小宽度几枚了

41:34.210 --> 41:34.690
对吧

41:35.010 --> 41:35.730
不仅几枚了

41:35.730 --> 41:36.770
可能都还拍不下

41:36.770 --> 41:38.130
所以只能少不能多

41:39.090 --> 41:39.570
好吧

41:39.730 --> 41:41.010
好这图片的数量算出来了

41:41.410 --> 41:41.810
好

41:41.810 --> 41:43.410
图片的数量算出来过后

41:43.410 --> 41:44.450
再来计算什么

41:44.610 --> 41:45.570
计算空气

41:46.690 --> 41:47.970
计算水平空气

41:48.610 --> 41:50.210
为什么还要计算水平空气

41:50.210 --> 41:51.650
为什么还要计算水平空气

41:52.530 --> 41:53.410
因为水平空气

41:53.410 --> 41:55.570
我们刚才配置的是最小的空气

41:55.650 --> 41:57.170
就是理想状况下

41:57.170 --> 41:58.450
刚刚好成满

41:58.850 --> 42:00.210
但是如果图片少了

42:00.210 --> 42:01.010
比方说刚才

42:01.010 --> 42:02.450
本来还能容下半张的

42:02.450 --> 42:03.330
图片少了

42:03.730 --> 42:06.130
少了过后比方说是这种情况

42:07.890 --> 42:08.370
啊

42:08.450 --> 42:09.250
这种情况

42:09.410 --> 42:10.050
这一张

42:10.610 --> 42:10.930
啊

42:10.930 --> 42:12.450
这一张啊

42:12.610 --> 42:13.090
然后呢

42:13.090 --> 42:13.890
这一张啊

42:13.890 --> 42:15.090
比方说这里呢

42:15.090 --> 42:16.210
看来还多了一些空间

42:16.210 --> 42:16.450
对吧

42:16.450 --> 42:17.170
多的空间本来

42:17.170 --> 42:18.770
可以排排0.3个图片

42:18.770 --> 42:19.730
但是没法排

42:19.730 --> 42:21.010
所以就少了一张图片

42:21.010 --> 42:23.090
少了一张图片是不是要重新计算一下

42:23.170 --> 42:23.570
渐息了

42:23.570 --> 42:24.690
渐息是不是要变多

42:24.690 --> 42:25.250
对不对

42:25.250 --> 42:27.410
所以我们刚才说的是最小渐息

42:27.410 --> 42:28.850
渐息会变多

42:28.850 --> 42:30.610
因此的渐息是不是要重新算

42:30.770 --> 42:31.730
那重新算是不是

42:31.730 --> 42:33.250
这个算法就很简单了啊

42:33.490 --> 42:35.490
因为我们现在已知图片数量了

42:35.650 --> 42:37.010
也知道总宽度

42:37.330 --> 42:39.250
总宽度减去图片数量

42:39.250 --> 42:40.450
是不是剩余的空间

42:40.610 --> 42:41.250
对吧

42:41.650 --> 42:42.770
渐息很好算啊

42:42.770 --> 42:44.770
这个盖就很好算了

42:44.930 --> 42:45.410
就是什么

42:45.410 --> 42:46.290
总宽度

42:46.610 --> 42:47.650
Content的位置

42:47.650 --> 42:48.530
减去啥

42:48.610 --> 42:49.410
图片的

42:49.890 --> 42:50.610
数量

42:50.930 --> 42:51.730
乘以

42:52.530 --> 42:53.650
图片的宽度

42:54.050 --> 42:55.010
1米级位置

42:56.210 --> 42:56.530
是不是

42:56.530 --> 42:57.250
剩余的空间

42:57.250 --> 42:57.730
对吧

42:57.730 --> 42:58.690
剩余的空间

42:58.690 --> 42:59.890
然后处议上呢

43:00.050 --> 43:01.650
处议图片的数量减1

43:01.650 --> 43:02.770
因为我们刚才分析过

43:02.770 --> 43:03.570
四张图片

43:03.890 --> 43:05.250
应该有三个空隙啊

43:05.250 --> 43:06.050
因为这个要

43:06.130 --> 43:07.010
这个地方要

43:07.490 --> 43:08.610
要放到这儿对不对

43:08.610 --> 43:09.410
我们要放到这儿

43:09.410 --> 43:10.850
所以说有三个空隙

43:10.850 --> 43:11.970
因此处议是吗

43:11.970 --> 43:13.250
图片的数量减1

43:13.250 --> 43:14.050
当然如果

43:14.450 --> 43:16.290
如果你左右两半还要有一个空隙的话

43:16.610 --> 43:17.330
那怎么样了

43:17.330 --> 43:18.210
是不是要加以

43:18.210 --> 43:18.690
对不对

43:19.170 --> 43:19.890
就是你自己

43:19.890 --> 43:21.090
这个东西是很简单啊

43:21.810 --> 43:22.690
至于搞定就行了

43:23.010 --> 43:23.490
就是

43:23.570 --> 43:24.530
图片的数量

43:25.010 --> 43:25.570
减1

43:26.130 --> 43:27.810
就是每一个渐息的距离

43:28.450 --> 43:29.410
好是不是写完了

43:29.410 --> 43:29.890
对不对

43:30.210 --> 43:31.970
我们才把现在才把这个东西计算出来

43:32.290 --> 43:32.770
看没

43:32.770 --> 43:33.890
才把这个东西计算出来

43:34.290 --> 43:34.930
好我们来

43:35.090 --> 43:35.970
得到啊得到

43:36.930 --> 43:38.530
好我们这里设置元素的作标

43:38.530 --> 43:39.730
sys image depration

43:40.530 --> 43:40.930
好

43:41.170 --> 43:43.010
然后呢这里我们得到啊得到什么呢

43:44.050 --> 43:44.530
呃

43:46.290 --> 43:46.850
得到什么

43:46.850 --> 43:48.530
get horizontal info

43:48.530 --> 43:50.370
得到图片水平方向的信息

43:51.010 --> 43:51.570
啊信息

43:52.370 --> 43:52.850
info

43:53.090 --> 43:54.450
好咱们打印出来看一下啊

43:55.650 --> 43:57.010
console log info

43:58.610 --> 43:59.330
保存看一下

44:00.370 --> 44:01.730
放下来吧啊放下来

44:04.580 --> 44:05.700
控制台一看一下

44:06.100 --> 44:07.780
那么现在算出来的总宽度你看

44:07.860 --> 44:09.700
是10878

44:09.860 --> 44:11.380
渐息宽度是66

44:11.940 --> 44:13.300
图片数量是4张

44:13.460 --> 44:14.420
啊比方说没在

44:14.660 --> 44:15.300
全屏

44:15.540 --> 44:16.100
刷新

44:16.420 --> 44:19.060
好现在宽度计算出来是1353

44:19.060 --> 44:20.500
那么图片宽度是5张

44:20.660 --> 44:22.500
渐性的是63

44:22.500 --> 44:23.540
63.25

44:23.860 --> 44:26.100
好比方说啊我们再稍微拖动一下啊

44:27.300 --> 44:28.100
那么现在呢

44:28.900 --> 44:31.460
啊就是这样子5张图片渐性的十有点5

44:31.460 --> 44:31.940
对不对

44:32.260 --> 44:33.700
是不是可以计算出来这个种信息的

44:33.700 --> 44:35.300
这些信息全部是可以出来了对吧

44:35.700 --> 44:36.180
好

44:36.260 --> 44:37.460
我们拿到这个信息过后

44:37.460 --> 44:39.460
再回过头来看一下之前的

44:39.620 --> 44:40.660
是要设置数组

44:41.140 --> 44:42.340
这个数字有多好像

44:42.980 --> 44:44.100
这数字有多好像

44:44.500 --> 44:45.140
是不是

44:45.460 --> 44:47.940
一行有几张图片就有几项

44:47.940 --> 44:50.020
这个数字代表每一列的什么

44:50.420 --> 44:52.820
下一个图片的top值

44:53.060 --> 44:54.740
啊因此呢我们设置一个数组

44:55.700 --> 44:56.660
啊数组

44:57.220 --> 44:58.580
这个数组的它有多

44:58.580 --> 45:00.420
多好像呢数着长度是多少呢

45:00.420 --> 45:02.100
长度是info点number

45:02.420 --> 45:02.900
对吧

45:03.940 --> 45:04.580
设置

45:05.540 --> 45:08.660
这个数组啊存放什么存放

45:08.660 --> 45:09.700
每一列

45:10.500 --> 45:11.380
每一列

45:12.100 --> 45:15.060
下一张图片的top值

45:16.100 --> 45:17.060
啊写这么个数组

45:17.620 --> 45:19.780
好这个数组呢首先我们把它填充全部

45:19.780 --> 45:20.740
填充为0对吧

45:20.740 --> 45:21.620
我们认为第一张

45:22.020 --> 45:23.540
第一行的图片全是顶到

45:24.020 --> 45:26.020
顶边的啊全是顶到顶边的

45:26.020 --> 45:27.540
所以说把它每一项设置为0

45:28.100 --> 45:29.140
ar field对吧

45:29.140 --> 45:29.940
我们之前学过的

45:30.660 --> 45:32.900
把把这个数组里面每一项填充为0

45:32.900 --> 45:33.940
那么我们看一下这个数组

45:34.900 --> 45:35.700
保存看一下啊

45:36.100 --> 45:37.540
那你看数组现在是五张图片

45:37.540 --> 45:37.940
看吧

45:38.340 --> 45:39.300
好然后再刷新

45:39.860 --> 45:40.500
啊再刷新

45:40.500 --> 45:41.620
你看数还是五张

45:41.620 --> 45:42.900
好然后呢我们在这里

45:43.780 --> 45:45.060
在这里啊刷新

45:45.700 --> 45:46.420
啊00

45:46.420 --> 45:48.420
是吧还是五张对不对

45:48.420 --> 45:49.060
还是五张

45:49.860 --> 45:50.420
没问题吧

45:51.700 --> 45:53.540
啊啊不是还是三张啊

45:53.540 --> 45:54.180
就三张了

45:55.540 --> 45:56.900
好然后呢我们这里就搞定了

45:56.900 --> 45:57.860
对吧这里搞定了

45:59.140 --> 46:00.100
然后接下来呢

46:00.100 --> 46:01.380
我们再来看啊再来看

46:02.100 --> 46:03.300
接下来我们要干嘛呢

46:03.380 --> 46:05.620
就是要依次去设置图片的啊

46:05.620 --> 46:06.580
就是我们之前分析的

46:06.980 --> 46:08.100
设置图片位置的

46:08.100 --> 46:09.940
循环这里的每一张图片

46:09.940 --> 46:11.540
然后依次去设置图片

46:11.940 --> 46:13.380
那么怎么来得到图片呢

46:13.380 --> 46:14.980
怎么来得到每一张图片呢

46:14.980 --> 46:17.220
我们之前不是把图片夹进去了吗

46:17.220 --> 46:19.060
对吧夹到元素里边去了

46:19.060 --> 46:20.500
夹到元素里边去了过后

46:20.500 --> 46:21.620
是不是这个option

46:22.020 --> 46:24.100
contain那里边是不是有签入准数性

46:24.100 --> 46:26.100
对吧就可以拿到他的所有指元数

46:26.100 --> 46:27.300
就是图片的指元数嘛

46:27.300 --> 46:27.700
对不对

46:27.700 --> 46:28.900
就可以拿到他的指元数了

46:29.860 --> 46:32.340
当然你最好你可能会要防止

46:32.420 --> 46:32.980
防止什么的

46:32.980 --> 46:35.620
防止这个contain那里边还有别的东西

46:35.620 --> 46:36.900
万一他还有别的东西呢

46:36.900 --> 46:38.180
又会把别的东西拿到

46:38.180 --> 46:39.060
所以说干净这样吧

46:39.620 --> 46:40.820
之前创建图片的时候

46:40.820 --> 46:42.100
我就把图片夹到数组里边去

46:42.660 --> 46:44.260
我把图片夹到数组里边去

46:44.740 --> 46:46.100
好之前不再创建图片吗

46:46.100 --> 46:47.700
我把这个图片夹到数组里边去

46:48.340 --> 46:49.140
好我们这里呢

46:49.940 --> 46:50.340
这样子

46:52.100 --> 46:53.780
这里我们设置一下

46:53.780 --> 46:55.140
设置一个数组

46:55.700 --> 46:56.260
一米即适

46:58.420 --> 46:58.900
存放

47:00.580 --> 47:02.020
存放所有的

47:02.420 --> 47:03.060
图片对象

47:03.780 --> 47:04.900
而图片多么对象

47:06.180 --> 47:08.020
所有的图片元数全部往这个数组里面放

47:08.660 --> 47:10.660
好那么这里每一次循环

47:10.660 --> 47:12.020
刚才创建图片的时候

47:12.020 --> 47:13.540
每一次循环是不是把这个图片

47:14.020 --> 47:15.220
保存到数组里边去

47:15.220 --> 47:16.180
对吧一米即适

47:17.060 --> 47:17.620
一米即

47:17.940 --> 47:18.340
对吧

47:18.660 --> 47:19.460
保存到这里边去

47:19.940 --> 47:21.140
好那么有了这个数组过河

47:21.140 --> 47:22.180
这里是不是很好循环了

47:22.180 --> 47:23.380
对吧就很好循环了

47:24.020 --> 47:25.140
来吧循环吧

47:26.420 --> 47:28.100
好循环这个数组啊

47:28.100 --> 47:28.580
霍循环

47:29.140 --> 47:29.380
哎

47:30.260 --> 47:31.540
小小这么换动循环吧

47:31.940 --> 47:33.140
连个循环都经常用着

47:33.540 --> 47:34.340
不要忘了

47:34.340 --> 47:35.060
for each

47:35.460 --> 47:36.260
用这种循环

47:37.780 --> 47:38.260
一米即

47:38.740 --> 47:40.980
好每一次循环是不是拿到一张图片

47:40.980 --> 47:42.020
对吧拿到一张图片

47:42.020 --> 47:43.620
那么这里是不是要设置图片的作标

47:44.020 --> 47:45.620
设置图片的作标

47:46.100 --> 47:47.060
那么怎么来设置呢

47:47.060 --> 47:48.020
我们看刚才分析的

47:48.820 --> 47:51.060
得到数组中最小的值

47:51.620 --> 47:52.420
这里有个数组

47:52.820 --> 47:53.940
刚才我们已经打印出来了

47:53.940 --> 47:54.820
有个数组

47:54.820 --> 47:56.260
我们拿到这个数组里面最小的值

47:56.260 --> 47:57.060
当然有相同的

47:57.060 --> 47:58.020
有相同的就无所谓嘛

47:58.020 --> 47:58.260
他们

47:58.980 --> 48:00.100
都是最小的

48:00.100 --> 48:00.660
并列最小

48:00.740 --> 48:01.460
那么随便拿一个

48:01.460 --> 48:01.860
对不对

48:02.100 --> 48:02.820
随便拿一个

48:03.060 --> 48:04.580
所以我们找到这个数组里面

48:04.740 --> 48:06.180
最小的那个值

48:07.220 --> 48:08.100
最小的那个值

48:08.340 --> 48:10.180
那怎么来取最小值呢

48:10.340 --> 48:12.100
不是mess里面有个函数吗

48:12.340 --> 48:13.860
mess里面有个min这个函数

48:13.860 --> 48:14.900
是不是取就最小值

48:15.220 --> 48:15.940
但是他注意

48:15.940 --> 48:16.500
他得到了

48:16.500 --> 48:17.540
他传的不是数组

48:18.100 --> 48:19.460
mess里面这个函数min

48:19.940 --> 48:21.460
他传的不是数组

48:21.940 --> 48:22.900
他是这样传递的

48:23.940 --> 48:24.980
他是把

48:25.140 --> 48:27.300
就是这样子来传递的

48:28.580 --> 48:29.860
他是用这种方式来传递的

48:30.020 --> 48:30.820
得到最小值

48:31.300 --> 48:31.940
没有意思吧

48:32.180 --> 48:33.940
那么我们怎么样把数组

48:34.900 --> 48:35.780
利用这个功能

48:35.940 --> 48:36.900
来利用这个功能呢

48:36.900 --> 48:38.420
当然我们也可以自己写个函数

48:39.140 --> 48:39.540
不过呢

48:39.540 --> 48:40.420
我这里顺便说一下

48:41.300 --> 48:42.500
可以用这种巧妙的办法

48:42.820 --> 48:44.500
mess里面有个min这个函数

48:44.500 --> 48:46.180
函数里面是不是一个apply

48:46.180 --> 48:46.660
对吧

48:46.900 --> 48:48.180
apply里面是不固定res的

48:48.180 --> 48:48.500
对吧

48:48.500 --> 48:49.300
固定res的

48:49.620 --> 48:50.500
好固定res的

48:50.500 --> 48:51.220
第一个res

48:51.220 --> 48:52.100
res无所谓

48:52.340 --> 48:53.700
然后第二个函数是不是数组

48:54.020 --> 48:54.740
这个数组呢

48:54.740 --> 48:56.020
他就会把它变成这种

48:56.020 --> 48:56.900
贫富的方式

48:56.900 --> 48:57.780
传给这个函数

48:58.100 --> 48:59.060
我们之前说过

48:59.220 --> 49:00.020
这个第二个参数呢

49:00.020 --> 49:01.460
表示参数数组

49:01.460 --> 49:02.580
你有哪些参数

49:02.580 --> 49:03.940
那么我就把个

49:03.940 --> 49:06.100
我们这里不少得到数组里面最小值吗

49:06.100 --> 49:06.500
对不对

49:09.040 --> 49:10.080
得到它里面最小值

49:10.080 --> 49:11.600
那么把它站作为参数传递

49:11.600 --> 49:12.080
看没

49:12.080 --> 49:13.200
就搞定了

49:13.200 --> 49:13.840
对吧

49:13.840 --> 49:15.840
用这种方式就可以一下子搞定了

49:15.840 --> 49:17.120
它的就是最小值了

49:18.000 --> 49:18.960
拿到最小值

49:18.960 --> 49:20.400
这个最小值从哪里来

49:20.400 --> 49:21.440
是不是从数组里面来

49:21.440 --> 49:22.000
对吧

49:22.000 --> 49:23.680
从数组里面取出最小值

49:24.560 --> 49:25.120
min top

49:26.960 --> 49:28.000
那么这个top只有了

49:28.000 --> 49:29.200
是不是就已经出来了

49:29.360 --> 49:32.000
图片的座标style top值

49:32.000 --> 49:32.800
是不是已经出来了

49:32.800 --> 49:33.920
就等于min top

49:34.560 --> 49:35.600
拼接上啥

49:35.600 --> 49:36.640
拼接上px

49:36.640 --> 49:37.280
你看

49:37.280 --> 49:38.160
这就已经出来了

49:38.160 --> 49:39.280
top值就已经出来了

49:40.080 --> 49:40.720
没问题吧

49:41.760 --> 49:43.440
top值出来过后

49:43.440 --> 49:44.640
还要干嘛呢

49:44.640 --> 49:45.840
还要干嘛

49:45.840 --> 49:48.800
还要去设置更新数组

49:48.800 --> 49:49.760
这一项的top值

49:50.560 --> 49:51.600
首先就是说

49:51.600 --> 49:52.960
你这个数组里比方说

49:52.960 --> 49:54.480
一开始数组的是00

49:54.480 --> 49:54.880
对吧

49:54.880 --> 49:55.760
你把这一项

49:55.760 --> 49:57.680
这一第一列加了一张图片

49:57.760 --> 49:59.200
那第一列的数字是不是要改变

49:59.200 --> 49:59.520
对吧

50:00.160 --> 50:00.720
要改变

50:01.600 --> 50:03.120
那么怎么来改变了

50:03.120 --> 50:03.920
怎么来改变了

50:03.920 --> 50:06.000
首先你要找到数数组的哪一项

50:06.560 --> 50:07.680
就是你这个最小值是

50:08.560 --> 50:10.080
拿到这个数组的哪一项

50:10.080 --> 50:10.960
因为我们以后呢

50:10.960 --> 50:11.840
要改变这个数组

50:11.840 --> 50:13.040
肯定要用这种方式来改变

50:13.040 --> 50:13.600
对吧

50:13.600 --> 50:14.800
要用这种方式来改变

50:14.800 --> 50:16.000
那么关键是第一个问号

50:16.480 --> 50:18.080
它数组是哪一项了

50:18.080 --> 50:19.520
哪一项这个很简单

50:19.520 --> 50:20.800
我们得到index

50:20.800 --> 50:21.760
得到下标

50:21.760 --> 50:22.560
哪一项呢

50:22.560 --> 50:23.840
从数数组里面中

50:23.840 --> 50:24.960
取什么index

50:26.080 --> 50:27.200
把这个值传进去

50:27.680 --> 50:29.040
我们之前不是拿到最小值吗

50:29.040 --> 50:30.080
把这个值传进去

50:30.080 --> 50:32.240
那么看一下这个值在数组的里边

50:32.240 --> 50:34.240
第一个是哪一项

50:34.240 --> 50:35.680
就第一次匹配的是哪一项

50:36.560 --> 50:40.080
找到对应的列编号

50:40.880 --> 50:42.480
数组里边每一项就是个列

50:42.480 --> 50:43.200
对吧

50:43.200 --> 50:45.120
这个列的下一个top值

50:45.120 --> 50:46.160
找了个列的编号

50:47.200 --> 50:48.320
然后现在我们就可以设置了

50:48.320 --> 50:48.640
对吧

50:48.640 --> 50:49.440
设置啥

50:49.440 --> 50:50.560
设置这个图片

50:50.560 --> 50:51.840
设置这个数组的什么

50:52.400 --> 50:53.840
index就这一项的值

50:53.840 --> 50:54.320
为什么呢

50:55.280 --> 50:55.760
为什么

50:55.840 --> 50:57.280
是不是要加上一个啥

50:57.840 --> 51:00.160
加上一个图片的高度

51:00.160 --> 51:00.960
对不对

51:00.960 --> 51:03.200
加上一个图片的高度

51:03.200 --> 51:04.560
那么图片的高度是多少呢

51:05.280 --> 51:06.480
高度是多少

51:06.480 --> 51:07.760
是不是我们可以用什么

51:07.760 --> 51:08.960
client

51:08.960 --> 51:09.840
什么

51:09.840 --> 51:10.800
client

51:10.800 --> 51:12.000
height

51:12.000 --> 51:13.680
拿到图片的高度

51:13.680 --> 51:14.720
对不对

51:14.720 --> 51:15.520
加上图片的高度

51:17.120 --> 51:17.840
加上就行了

51:17.840 --> 51:19.440
当然还要加上一个东西是吗

51:19.440 --> 51:21.280
垂直方向上的渐细

51:21.920 --> 51:24.160
还要加上一个垂直方向上的渐细

51:25.120 --> 51:26.160
我们之前用这个

51:26.160 --> 51:27.440
minvgap

51:28.160 --> 51:29.360
垂直方向上的渐细

51:29.360 --> 51:30.160
这是配置的

51:30.160 --> 51:31.440
配置的东西对吧

51:31.440 --> 51:32.640
还要加上这个东西

51:32.640 --> 51:33.680
你看吧

51:33.680 --> 51:35.840
比方说我们这里加了一张图片

51:35.840 --> 51:37.760
那下一个座标是在这对吧

51:37.760 --> 51:39.440
下个座标是在这对不对

51:39.440 --> 51:41.120
top值的座标在这

51:41.120 --> 51:41.600
为什么呢

51:41.600 --> 51:43.440
还要加上一个垂直方向上的渐细

51:43.440 --> 51:45.040
除了加图片高度之外

51:45.680 --> 51:46.240
好了

51:47.280 --> 51:47.760
好

51:47.760 --> 51:48.400
是不是搞定了

51:48.400 --> 51:48.800
对不对

51:48.800 --> 51:49.440
就搞定了

51:50.480 --> 51:50.880
好

51:50.880 --> 51:52.240
然后是横座标

51:52.240 --> 51:53.200
横座标

51:54.880 --> 51:55.920
横座标的话

51:55.920 --> 51:56.640
我们又来看

51:57.920 --> 51:58.560
横座标

51:59.680 --> 52:00.800
设置横座标

52:00.800 --> 52:01.840
我们现在知道是

52:01.840 --> 52:03.280
我们现在能够知道的是

52:03.280 --> 52:04.720
你设置的是D几列

52:05.440 --> 52:07.760
就是index表示D几列对吧

52:07.760 --> 52:07.920
好

52:07.920 --> 52:08.800
那么D几列

52:08.800 --> 52:10.080
它的横座标是啥呢

52:11.120 --> 52:11.920
来找规律

52:14.880 --> 52:15.600
好比方说

52:16.160 --> 52:17.360
index等于0

52:19.660 --> 52:22.060
也就是说这个图片是D一列

52:22.060 --> 52:23.580
那么D一列的横座标

52:23.580 --> 52:24.860
你看横座标是不是0

52:24.860 --> 52:25.340
对吧

52:25.340 --> 52:26.620
这个很简单

52:26.620 --> 52:28.220
index等于0的情况下

52:28.220 --> 52:29.980
那么naps值等于多少呢

52:29.980 --> 52:30.780
是不是等于0

52:30.780 --> 52:31.500
对不对

52:31.500 --> 52:31.660
好

52:31.660 --> 52:32.060
等于0

52:33.660 --> 52:33.900
好

52:33.900 --> 52:35.660
然后index我们这样子写

52:35.660 --> 52:36.300
这样子写

52:36.300 --> 52:37.100
来找这个规律

52:38.300 --> 52:39.180
naps值等于0

52:39.900 --> 52:40.140
好

52:40.140 --> 52:42.540
那如果index等于的是1呢

52:42.540 --> 52:43.900
它是D一列的

52:43.900 --> 52:45.100
那么naps值等于多少

52:45.900 --> 52:46.780
等于多少

52:46.780 --> 52:48.860
是不是一个图片的宽度

52:49.980 --> 52:51.260
加上什么

52:51.260 --> 52:52.220
一个渐细

52:52.220 --> 52:53.180
对不对

52:53.180 --> 52:55.500
一个图片的宽度加上一个水平渐细

52:56.300 --> 52:56.780
对吧

52:56.780 --> 52:57.900
这第二列嘛

52:58.460 --> 52:58.700
好

52:58.700 --> 53:00.460
如果index等于2呢

53:00.460 --> 53:01.180
第三列呢

53:01.820 --> 53:03.100
那么就是我们平时啊

53:03.100 --> 53:04.140
就算一些东西的时候

53:04.140 --> 53:05.980
就尽量用这种方式

53:05.980 --> 53:06.700
就找一找规律

53:06.700 --> 53:07.980
一下就找出来了

53:07.980 --> 53:10.300
那就是两个图片的宽度

53:10.300 --> 53:12.460
加上两个渐细

53:13.020 --> 53:13.500
对不对

53:14.060 --> 53:14.460
对不对

53:15.900 --> 53:17.020
难计算吗

53:17.020 --> 53:17.420
难吗

53:18.540 --> 53:18.940
看一下

53:19.740 --> 53:21.500
那么index等于x

53:21.500 --> 53:21.980
那是什么

53:21.980 --> 53:25.100
x乘以宽度加上x乘以盖

53:25.820 --> 53:26.380
所以说

53:26.380 --> 53:28.620
或者是x乘以宽度加盖

53:28.620 --> 53:28.940
对吧

53:29.580 --> 53:30.460
所以说这里呢

53:30.460 --> 53:32.060
横坐标其实很好算啊

53:32.060 --> 53:33.660
就是img的什么style

53:33.660 --> 53:35.180
down left等于什么

53:35.180 --> 53:38.700
等于index乘以什么

53:38.700 --> 53:39.740
图片的宽度

53:39.740 --> 53:41.180
opening img位置

53:42.380 --> 53:44.460
加上什么渐细

53:44.460 --> 53:46.140
渐细了我们之前在info里边

53:46.140 --> 53:47.740
gap得到的渐细

53:47.740 --> 53:48.380
对吧

53:48.380 --> 53:49.180
横坐标就出来了

53:50.540 --> 53:51.180
完了

53:51.180 --> 53:52.140
没了

53:52.140 --> 53:52.780
保存看一下

53:56.060 --> 53:57.020
我是没调用吗

53:58.140 --> 53:58.700
我看一下

53:59.260 --> 54:00.940
看一下是不是没有调用

54:02.540 --> 54:04.780
这里我们把这打印出来

54:04.780 --> 54:05.260
看一下

54:05.260 --> 54:05.980
打印出来看一下

54:06.700 --> 54:07.580
这个1米几是

54:07.580 --> 54:07.900
看一下

54:07.900 --> 54:09.100
先看一下这个数组

54:09.100 --> 54:09.980
先看一下这个数组

54:09.980 --> 54:10.540
这么正常

54:11.260 --> 54:12.540
这个数组是正常的

54:12.540 --> 54:13.900
这个数组是正常的

54:13.900 --> 54:15.180
然后再看一下

54:15.180 --> 54:17.420
这里边每一次循环的时候

54:17.420 --> 54:18.460
每一次循环的时候

54:18.460 --> 54:19.900
找到这个index这么正常

54:21.420 --> 54:22.700
找到这个index

54:22.700 --> 54:24.060
好像是每一次找到index

54:24.060 --> 54:24.540
全是0

54:25.580 --> 54:26.540
index也是正常的

54:26.540 --> 54:27.820
也是正常的

54:27.820 --> 54:28.940
也是正常的话

54:28.940 --> 54:29.740
我们来看一下

54:29.740 --> 54:31.340
那就是nef只设置有问题了

54:31.340 --> 54:31.900
我知道了

54:31.900 --> 54:32.700
没加ps

54:33.980 --> 54:34.700
一顿稍稍做

54:34.700 --> 54:35.660
发现没有加ps

54:36.540 --> 54:37.420
保存看一下

54:39.900 --> 54:41.020
垂直方向出了问题

54:41.020 --> 54:42.700
但是横坐标是不是没问题了

54:43.420 --> 54:44.700
横坐标是不是没问题了

54:45.900 --> 54:48.060
垂直方向上为什么会出问题呢

54:49.260 --> 54:50.860
这里你调试半天

54:50.860 --> 54:52.540
调试来 调试去的话

54:52.540 --> 54:54.060
你只要把这个东西打印出来

54:54.060 --> 54:54.940
马上就明白了

54:55.500 --> 54:56.780
一米几克兰按车

54:56.780 --> 54:58.060
害致

54:58.060 --> 54:59.740
打印出这个图片的高度

54:59.740 --> 55:00.940
你看一下高度是多少

55:00.940 --> 55:02.860
你觉得高度应该是多少

55:02.860 --> 55:04.620
41个0

55:04.620 --> 55:07.020
为什么是0呢

55:07.020 --> 55:09.100
高度为什么是0呢

55:09.100 --> 55:10.700
这是我们讲过的回忆一下

55:12.700 --> 55:15.020
图片的夹仔是一步的

55:15.020 --> 55:16.460
它是属于外部支援

55:16.460 --> 55:18.060
它要去夹仔文件

55:18.060 --> 55:20.220
夹仔文件是不是需要时间

55:20.220 --> 55:21.100
对不对

55:21.100 --> 55:23.260
夹仔文件是不是需要时间

55:23.580 --> 55:25.340
那么夹仔完了之后

55:25.340 --> 55:26.140
它才有高度

55:26.140 --> 55:27.260
它文件都没有夹仔出来

55:27.260 --> 55:28.460
哪有高度呢

55:28.460 --> 55:30.860
其实夹仔文件是一个异步代码

55:30.860 --> 55:31.980
它是一个异步代码

55:31.980 --> 55:33.260
那么我们之前讲过

55:33.260 --> 55:34.380
事件循环

55:34.380 --> 55:36.060
异步代码它一定是等到

55:36.060 --> 55:37.820
我们目前没有东西执行的时候

55:37.820 --> 55:39.100
它才会执行

55:39.100 --> 55:40.780
它才会有这么一个高度

55:40.780 --> 55:42.060
所以说呢

55:42.060 --> 55:43.660
这里运行到这里的时候

55:43.660 --> 55:45.340
图片还没有高度

55:45.340 --> 55:46.140
那怎么办呢

55:47.500 --> 55:48.780
这很正常

55:48.780 --> 55:50.220
那应该怎么来做呢

55:50.220 --> 55:51.900
应该是每一张图片

55:51.900 --> 55:53.820
只要你夹仔完成之后

55:53.820 --> 55:56.140
我都要全部去重新设置一遍

55:56.140 --> 55:57.340
没办法必须这样子

55:58.220 --> 55:58.700
你想啊

55:58.700 --> 55:59.660
比方说一百张图片

56:00.860 --> 56:03.340
我们在网上浏览网页的时候

56:03.340 --> 56:04.140
这一百张图片

56:04.140 --> 56:05.340
它哪张图片先夹仔完

56:05.340 --> 56:06.300
我们是不是不知道

56:06.300 --> 56:07.660
那谁知道呢

56:07.660 --> 56:08.700
比方有张图片比较小

56:08.700 --> 56:09.980
可能先在家夹仔完

56:09.980 --> 56:10.940
在地张图片比较大

56:10.940 --> 56:13.100
可能后面很久都没有夹仔完

56:13.100 --> 56:14.540
那么每一张图片夹仔出来过后

56:14.540 --> 56:15.740
是不是尺寸变了

56:15.740 --> 56:16.860
它尺寸变了过后

56:16.860 --> 56:18.060
是不是要重新排列

56:18.060 --> 56:18.780
对吧

56:18.780 --> 56:20.620
其实我们的页面也是这样子

56:20.620 --> 56:22.780
一个地方宽度高度发生变化

56:22.780 --> 56:23.980
它肯定要整个页面

56:23.980 --> 56:25.500
很多地方都要重新排列

56:25.500 --> 56:26.860
那么我们这里也是

56:26.860 --> 56:28.300
也是一样的

56:28.300 --> 56:29.340
怎么来做呢

56:29.340 --> 56:31.100
说这个函数呢

56:31.100 --> 56:32.860
不是在这里调用的

56:32.860 --> 56:34.700
不是在这里调用的

56:34.700 --> 56:36.780
而是在什么时候调用的呢

56:36.780 --> 56:40.460
而是在图片的事件里边调用的

56:40.460 --> 56:42.140
在图片的事件里边

56:42.140 --> 56:44.140
我们创建好了图片之后

56:44.140 --> 56:46.540
可以给这个图片加一个事件

56:46.540 --> 56:47.740
加一个事件

56:47.740 --> 56:48.860
一米级有什么事件呢

56:48.860 --> 56:50.220
比方说在这

56:50.220 --> 56:51.820
一米级

56:51.820 --> 56:52.700
onload的事件

56:52.700 --> 56:52.940
对吧

56:52.940 --> 56:54.140
我们现在说过的

56:54.140 --> 56:56.860
就是它夹在完成之后

56:56.860 --> 56:57.980
干嘛呢

56:57.980 --> 56:59.100
调用那个函数

56:59.100 --> 57:01.180
sets一米级play型

57:01.180 --> 57:03.260
只要有一张图片夹仔完

57:03.260 --> 57:05.260
重新调用

57:05.260 --> 57:06.380
只要有一张图片夹仔完

57:06.380 --> 57:07.580
重新调用

57:07.580 --> 57:08.300
对吧

57:08.300 --> 57:09.820
是不是可以这样子

57:09.820 --> 57:10.540
保存

57:10.540 --> 57:11.580
再看一下

57:11.580 --> 57:13.020
你看位置数全部正确了

57:13.020 --> 57:13.500
对吧

57:13.500 --> 57:15.820
位置就全部正确了

57:15.820 --> 57:16.220
看呗

57:16.220 --> 57:17.100
是不是就这么简单

57:17.100 --> 57:17.420
对不对

57:17.420 --> 57:18.140
就这么简单

57:19.100 --> 57:19.580
当然呢

57:19.580 --> 57:21.180
如果这里看上去不太好看

57:21.180 --> 57:22.780
因为水平方向上的空隙

57:22.780 --> 57:23.900
跟垂直方向不太一样

57:23.900 --> 57:24.540
对吧

57:24.540 --> 57:26.140
跟垂直方向上不太一样

57:26.140 --> 57:26.700
那么这里呢

57:26.700 --> 57:27.740
我们可以这样处理吧

57:27.740 --> 57:29.260
我们水平方向上跟垂直方向上

57:29.260 --> 57:30.460
保持一样的空隙

57:30.460 --> 57:31.820
保持一样的空隙

57:31.820 --> 57:33.580
所以说我们就不要这个了

57:33.580 --> 57:34.380
不要这个了

57:34.380 --> 57:36.300
我们这里就直接写个min gap

57:36.300 --> 57:38.140
最小空隙是10

57:38.140 --> 57:41.980
我们水平方向和垂直方向全部统一

57:41.980 --> 57:42.860
全部统一

57:42.860 --> 57:44.300
最小先写为10

57:44.300 --> 57:44.460
好

57:44.460 --> 57:45.580
那么我们搜索一下

57:45.580 --> 57:47.260
搜索一下我们之前写的

57:47.340 --> 57:47.900
我们这样

57:47.900 --> 57:48.380
这样子吧

57:48.380 --> 57:49.420
我们干嘛要这样子

57:50.620 --> 57:51.820
看一下啊

57:51.820 --> 57:53.100
我们这样

57:53.100 --> 57:54.060
这里从命名就完事了

57:54.060 --> 57:54.300
对吧

57:54.300 --> 57:55.580
从命名就完事了

57:55.580 --> 57:56.460
好

57:56.460 --> 57:59.020
把从命名为min gap

57:59.020 --> 58:00.460
从命名为min gap

58:00.460 --> 58:01.740
这是最小先写

58:01.740 --> 58:01.900
好

58:01.900 --> 58:02.700
我们之前还有一个

58:02.700 --> 58:05.180
还写的一个就是min v gap

58:05.180 --> 58:06.140
那么这里呢

58:06.140 --> 58:07.100
直接使用什么

58:07.100 --> 58:10.060
使用我们之前计算过的真实的空隙

58:10.060 --> 58:11.420
就是我们之前不是计算了吗

58:11.420 --> 58:12.940
计算了个info里边

58:12.940 --> 58:14.460
info里边真实的空隙

58:14.460 --> 58:15.740
gap

58:15.740 --> 58:15.900
好

58:16.620 --> 58:16.700
好

58:16.700 --> 58:17.180
你看一下

58:17.180 --> 58:17.820
哎

58:17.820 --> 58:18.620
这出问题了啊

58:18.620 --> 58:19.100
出问题了

58:19.100 --> 58:19.980
看一下哪里出问题了

58:21.100 --> 58:21.740
他说什么

58:22.940 --> 58:23.660
啊

58:23.660 --> 58:24.860
arenance

58:24.860 --> 58:26.140
他的invalid arenance

58:26.140 --> 58:27.420
在26行出了问题

58:28.140 --> 58:29.020
然后个number

58:29.020 --> 58:29.660
爆错了啊

58:29.660 --> 58:30.700
number爆错了

58:30.700 --> 58:30.860
好

58:30.860 --> 58:31.900
number为什么会爆错呢

58:31.900 --> 58:32.540
我们看一下啊

58:33.740 --> 58:35.420
number为什么会爆错呢

58:37.420 --> 58:38.060
我看一下啊

58:41.650 --> 58:44.210
我们这里是得到得到一个信息啊

58:44.210 --> 58:45.490
应该是在这里计算的时候

58:45.490 --> 58:46.450
得到一个信息啊

58:46.450 --> 58:47.250
我这里这里

58:47.330 --> 58:48.930
他为什么没有帮我从命名呢

58:50.850 --> 58:51.970
这个地方

58:51.970 --> 58:53.410
要使用min gap

58:53.410 --> 58:54.050
min gap

58:54.050 --> 58:55.170
我们再收一下吧

58:55.170 --> 58:56.770
看哪个地方还在用H

58:56.770 --> 58:57.330
没有了

58:57.330 --> 58:58.210
没有了

58:58.210 --> 58:58.370
好

58:58.370 --> 58:59.010
那么这边呢

58:59.010 --> 58:59.970
也配置的时候呢

58:59.970 --> 59:01.170
也也不用配置这个了

59:01.170 --> 59:01.410
对吧

59:01.410 --> 59:02.130
也不用配置这个了

59:03.330 --> 59:03.490
好

59:03.490 --> 59:04.370
邦村

59:04.370 --> 59:04.610
好

59:04.610 --> 59:05.730
重来啊

59:05.730 --> 59:05.810
好

59:05.810 --> 59:06.770
你看

59:06.770 --> 59:07.490
是不是完成了

59:07.490 --> 59:08.130
对不对

59:08.130 --> 59:08.530
完成了

59:09.730 --> 59:09.890
好

59:09.890 --> 59:10.690
那么这里比方说

59:10.690 --> 59:11.730
有100张图片

59:11.730 --> 59:13.810
那是不是要运行100次这个setspration

59:13.810 --> 59:14.050
对吧

59:15.170 --> 59:16.530
是不是要运行100次这个函数

59:17.810 --> 59:18.370
那么这里呢

59:18.370 --> 59:20.370
我们可以再优化一下

59:20.370 --> 59:22.210
再进行再进行一下优化

59:22.210 --> 59:23.010
怎么来优化呢

59:23.010 --> 59:23.330
就是说

59:24.770 --> 59:25.410
有的时候呢

59:25.410 --> 59:27.010
可能会出现这么一种情况

59:27.010 --> 59:29.250
有两三张或者是四五张图片

59:30.210 --> 59:30.850
他们啊

59:31.970 --> 59:34.370
他们几乎是同一时间

59:35.250 --> 59:36.050
完成夹仔的

59:36.050 --> 59:37.090
就是夹仔完成的

59:37.890 --> 59:39.490
那么我们就调用这个函数

59:39.490 --> 59:41.170
所以调用的太频繁了

59:41.170 --> 59:41.810
该怎么办

59:43.250 --> 59:43.810
该怎么办

59:44.690 --> 59:45.730
函数防斗嘛

59:45.730 --> 59:46.050
对不对

59:46.690 --> 59:47.730
函数防斗嘛

59:47.730 --> 59:48.690
还能怎么办呢

59:48.690 --> 59:49.730
函数防斗就完成了

59:49.730 --> 59:50.050
对吧

59:50.050 --> 59:51.250
或者是函数节流

59:51.250 --> 59:51.490
是吧

59:51.490 --> 59:52.450
我们都有对吧

59:52.450 --> 59:53.570
之前都写过的

59:53.570 --> 59:54.530
对不对

59:54.530 --> 59:54.850
好

59:54.850 --> 59:56.130
那么我们这里再引用啊

59:56.130 --> 59:57.090
再引用script

59:58.290 --> 59:58.850
src

01:00:01.090 --> 01:00:02.130
plunging

01:00:02.130 --> 01:00:02.850
然后什么

01:00:02.850 --> 01:00:03.330
helps

01:00:03.330 --> 01:00:03.970
对不对

01:00:03.970 --> 01:00:04.050
好

01:00:04.050 --> 01:00:05.570
这里边有函数节流

01:00:05.570 --> 01:00:06.690
和函数防斗

01:00:06.690 --> 01:00:07.330
对不对

01:00:07.330 --> 01:00:07.490
好

01:00:07.490 --> 01:00:08.290
那么这里呢

01:00:08.290 --> 01:00:09.490
我们就这样子来处理

01:00:10.130 --> 01:00:11.010
这样子处理

01:00:11.010 --> 01:00:11.170
好

01:00:11.170 --> 01:00:12.210
我们这里可以使用

01:00:12.850 --> 01:00:13.650
可以使用就是

01:00:14.290 --> 01:00:15.570
myplunging

01:00:15.570 --> 01:00:16.450
myplunging

01:00:16.450 --> 01:00:17.330
然后呢

01:00:17.330 --> 01:00:18.130
什么

01:00:18.130 --> 01:00:19.330
函数节流

01:00:19.330 --> 01:00:19.730
缩头

01:00:22.590 --> 01:00:22.910
缩头

01:00:23.790 --> 01:00:25.470
我们要处理的函数是什么函数

01:00:25.470 --> 01:00:26.510
就是这个函数对吧

01:00:26.510 --> 01:00:27.710
我们要运行的是这个函数

01:00:28.830 --> 01:00:30.510
直接把这个东西复制过去嘛

01:00:30.510 --> 01:00:31.550
要运行的是这个函数

01:00:32.110 --> 01:00:32.590
好

01:00:32.590 --> 01:00:33.070
然后呢

01:00:33.070 --> 01:00:34.190
我们多少毫秒呢

01:00:34.190 --> 01:00:36.110
比方说50毫秒嘛

01:00:36.110 --> 01:00:37.310
如果50毫秒内

01:00:38.030 --> 01:00:39.150
如果50毫秒内

01:00:39.150 --> 01:00:40.270
又有函数进来了

01:00:40.270 --> 01:00:40.910
那就不管啊

01:00:40.910 --> 01:00:41.470
不管

01:00:41.470 --> 01:00:42.510
那么我们只运行一次

01:00:42.510 --> 01:00:44.270
保证50毫秒内只运行一次

01:00:45.070 --> 01:00:45.390
好吧

01:00:45.390 --> 01:00:46.590
我们这样子可以

01:00:46.670 --> 01:00:47.710
用个函数节流

01:00:48.670 --> 01:00:48.830
好

01:00:48.830 --> 01:00:50.670
那么这里得得得得到一个新的函数啊

01:00:50.670 --> 01:00:51.470
得到一个新的函数

01:00:51.470 --> 01:00:52.910
我们就用缩头吧

01:00:52.910 --> 01:00:53.710
缩头来接收

01:00:54.510 --> 01:00:54.990
那么这里

01:00:56.430 --> 01:00:57.150
调用这个函数

01:00:58.030 --> 01:00:58.350
onload

01:00:58.350 --> 01:01:00.030
调用这个函数就完事了

01:01:00.030 --> 01:01:00.430
或者说

01:01:00.430 --> 01:01:02.030
我们直接把这个函数直接放过来

01:01:02.030 --> 01:01:02.670
对吧

01:01:02.670 --> 01:01:03.710
直接放过来

01:01:03.710 --> 01:01:05.150
这是函数节流

01:01:06.430 --> 01:01:07.550
总之给他一个函数嘛

01:01:07.550 --> 01:01:07.870
对不对

01:01:07.870 --> 01:01:08.750
你怎么写都无所谓

01:01:09.470 --> 01:01:10.270
保存看一下啊

01:01:15.630 --> 01:01:16.270
哦

01:01:16.270 --> 01:01:18.110
函数节流是不行的啊

01:01:18.110 --> 01:01:18.990
函数节流的话

01:01:19.070 --> 01:01:20.750
它一段时间内只能运行一次

01:01:20.750 --> 01:01:21.390
只运行一次

01:01:21.390 --> 01:01:22.270
那后边组变加载

01:01:22.270 --> 01:01:22.910
瞬间加载完了

01:01:22.910 --> 01:01:23.790
它就没有运行了

01:01:23.790 --> 01:01:25.310
后边就不再运行了啊

01:01:25.310 --> 01:01:26.270
应该用函数防斗

01:01:26.910 --> 01:01:27.470
debounce

01:01:28.590 --> 01:01:29.310
debounce

01:01:29.310 --> 01:01:29.870
函数防斗

01:01:31.070 --> 01:01:32.030
这是debounce

01:01:35.730 --> 01:01:36.370
函数防斗

01:01:36.370 --> 01:01:37.810
以最后一次为准

01:01:37.810 --> 01:01:38.770
以最后一次为准

01:01:39.970 --> 01:01:40.210
好

01:01:40.210 --> 01:01:40.450
看没

01:01:41.330 --> 01:01:41.570
对吧

01:01:42.450 --> 01:01:42.930
没问题吧

01:01:43.730 --> 01:01:43.970
好

01:01:43.970 --> 01:01:45.250
那么这里就完事了

01:01:45.250 --> 01:01:45.970
这就完事了

01:01:46.610 --> 01:01:47.730
当然如果你觉得

01:01:47.730 --> 01:01:48.370
一开始呢

01:01:48.370 --> 01:01:49.970
还能看到一个这个东西的话

01:01:49.970 --> 01:01:51.490
那么你可以把这个时间呢

01:01:51.570 --> 01:01:52.610
再设置短一点啊

01:01:52.610 --> 01:01:53.410
比方30毫秒

01:01:54.610 --> 01:01:55.330
30毫秒

01:01:55.330 --> 01:01:56.770
那我们来验证一下吧

01:01:56.770 --> 01:01:58.770
验证一下这个函数运行的多少次

01:01:58.770 --> 01:02:00.530
验证一下这个sayspracing运行的多少次

01:02:01.890 --> 01:02:02.530
concept log

01:02:03.810 --> 01:02:04.210
好

01:02:04.210 --> 01:02:04.690
看一下啊

01:02:05.810 --> 01:02:06.850
看一下运行的几次呢

01:02:08.610 --> 01:02:08.770
好

01:02:08.770 --> 01:02:09.650
它就运行了一次

01:02:09.650 --> 01:02:10.130
看没有

01:02:10.130 --> 01:02:11.330
有了函数防斗之后

01:02:11.330 --> 01:02:12.130
它就运行了一次

01:02:13.410 --> 01:02:13.730
好吧

01:02:15.090 --> 01:02:15.250
好

01:02:15.250 --> 01:02:16.050
那么这里呢

01:02:16.050 --> 01:02:17.170
所以布局就完成了

01:02:17.810 --> 01:02:18.930
但是还没完啊

01:02:18.930 --> 01:02:19.890
还没完

01:02:19.890 --> 01:02:21.170
有可能呢

01:02:21.890 --> 01:02:22.850
它这个窗口呢

01:02:22.850 --> 01:02:24.450
会改变大小对吧

01:02:24.450 --> 01:02:26.130
当它改变大小的时候

01:02:26.930 --> 01:02:30.290
是不是有可能导致个div的宽度也发生变化

01:02:30.290 --> 01:02:31.490
那么是不是得重排

01:02:31.490 --> 01:02:31.810
对不对

01:02:31.810 --> 01:02:32.850
得重排

01:02:32.850 --> 01:02:33.330
所以说呢

01:02:33.330 --> 01:02:34.930
我们这里还要注册一个事件

01:02:34.930 --> 01:02:35.730
还要注册一个事件

01:02:37.490 --> 01:02:38.130
什么事件呢

01:02:38.130 --> 01:02:39.490
就是窗口改变

01:02:39.490 --> 01:02:40.530
改变尺寸的时候

01:02:41.810 --> 01:02:45.250
窗口尺寸变化事件

01:02:46.610 --> 01:02:46.770
好

01:02:46.770 --> 01:02:49.090
这个简单就是window on resize

01:02:49.090 --> 01:02:51.650
应该干嘛

01:02:51.650 --> 01:02:53.970
是不是函数函数函数防斗

01:02:53.970 --> 01:02:54.290
对不对

01:02:54.290 --> 01:02:55.730
函数防斗

01:02:55.730 --> 01:02:57.010
这个时候可以用函数防斗

01:02:57.010 --> 01:02:58.530
以最后一次为准

01:02:58.530 --> 01:02:59.170
好

01:02:59.170 --> 01:02:59.650
那么这里呢

01:02:59.650 --> 01:03:02.690
我们直接使用myplugin debounce

01:03:02.690 --> 01:03:05.570
要干嘛呢

01:03:05.570 --> 01:03:07.010
每一次做的事情

01:03:07.010 --> 01:03:08.130
就是还是一样的

01:03:08.130 --> 01:03:09.170
重新设置

01:03:09.170 --> 01:03:10.370
什么1mg配型

01:03:10.370 --> 01:03:11.890
我们要运行的是这个函数

01:03:11.890 --> 01:03:12.770
好

01:03:12.770 --> 01:03:16.770
比方说是300毫秒

01:03:16.770 --> 01:03:17.890
300毫秒

01:03:18.130 --> 01:03:19.410
300毫秒之后之内

01:03:19.410 --> 01:03:21.010
如果没有新的变化事件的话

01:03:21.010 --> 01:03:21.970
我们就运行这个函数

01:03:21.970 --> 01:03:23.490
就300毫秒之后运行

01:03:23.490 --> 01:03:23.730
好

01:03:23.730 --> 01:03:24.930
那么这里 debounce

01:03:25.730 --> 01:03:26.610
对吧

01:03:26.610 --> 01:03:29.250
我们利用函数防斗

01:03:29.250 --> 01:03:29.970
这样子来处理

01:03:31.170 --> 01:03:31.490
好

01:03:31.490 --> 01:03:31.970
保存

01:03:31.970 --> 01:03:32.450
看一下吧

01:03:33.490 --> 01:03:33.570
好

01:03:33.570 --> 01:03:35.010
接下来我们看看刷新

01:03:36.290 --> 01:03:36.610
好

01:03:36.610 --> 01:03:37.570
变化窗口

01:03:37.570 --> 01:03:38.530
你看是不是变了

01:03:38.530 --> 01:03:39.010
对吧

01:03:39.010 --> 01:03:39.650
变了吧

01:03:39.650 --> 01:03:40.130
没问题吧

01:03:41.010 --> 01:03:42.530
有人说没有动画效果

01:03:42.530 --> 01:03:42.850
好

01:03:42.850 --> 01:03:43.810
加上动画效果

01:03:43.810 --> 01:03:44.450
很简单

01:03:44.450 --> 01:03:45.170
就一句话

01:03:45.170 --> 01:03:46.210
一句话就写完了

01:03:46.290 --> 01:03:48.450
这是CSS3里面的属性

01:03:48.450 --> 01:03:49.970
你创建一个图片的时候

01:03:49.970 --> 01:03:51.810
你再加上这个属性就完成了

01:03:51.810 --> 01:03:53.010
叫做transition

01:03:54.050 --> 01:03:57.090
我们之前我的课程里面没有讲CSS3

01:03:57.090 --> 01:03:59.010
那因为那是一个单独的课程

01:03:59.010 --> 01:03:59.650
不过没关系

01:03:59.650 --> 01:04:01.410
我这里介绍这么一个属性就行了

01:04:01.410 --> 01:04:03.170
这是CSS3里面的一个属性

01:04:03.170 --> 01:04:04.770
叫做transition表示过渡

01:04:05.730 --> 01:04:05.890
好

01:04:05.890 --> 01:04:06.770
这里边传啥呢

01:04:06.770 --> 01:04:07.410
写啥呢

01:04:07.410 --> 01:04:09.650
给它复制为一个时间0.5秒

01:04:10.530 --> 01:04:11.090
这是什么

01:04:11.090 --> 01:04:12.530
实现过渡

01:04:12.530 --> 01:04:13.170
它指的是

01:04:13.730 --> 01:04:15.810
你只要有这个属性存在

01:04:15.890 --> 01:04:17.890
那么它的CSS属性值

01:04:17.890 --> 01:04:19.650
特别是什么尺寸

01:04:19.650 --> 01:04:20.850
颜色

01:04:20.850 --> 01:04:21.570
透明度

01:04:21.570 --> 01:04:22.450
这些属性值

01:04:23.010 --> 01:04:26.210
它会在0.5秒内完成

01:04:26.210 --> 01:04:28.610
从初始值到目标值的变化

01:04:28.610 --> 01:04:29.970
比方说它原来的

01:04:29.970 --> 01:04:33.010
原来的就是Left值是100

01:04:33.010 --> 01:04:34.610
比方说原来的Top值是100

01:04:35.410 --> 01:04:37.010
现在你要把它设置为1000

01:04:37.010 --> 01:04:38.770
它会在0.5秒内

01:04:38.770 --> 01:04:39.970
从100变到1000

01:04:39.970 --> 01:04:41.970
这就变成了一个过渡值变化了

01:04:41.970 --> 01:04:42.770
所以说很简单

01:04:42.770 --> 01:04:43.970
再加上传声就完事了

01:04:44.930 --> 01:04:45.410
保存

01:04:45.410 --> 01:04:45.810
看一下吧

01:04:47.650 --> 01:04:48.130
你看

01:04:48.130 --> 01:04:49.010
是不是动画了

01:04:49.010 --> 01:04:49.330
对吧

01:04:50.050 --> 01:04:50.610
动画了吧

01:04:51.730 --> 01:04:52.130
当然了

01:04:52.130 --> 01:04:52.770
有些图片

01:04:52.770 --> 01:04:53.490
一开始移动的时候

01:04:53.490 --> 01:04:54.530
你看有些图片有超出

01:04:54.530 --> 01:04:54.770
对吧

01:04:54.770 --> 01:04:55.170
有超出

01:04:55.170 --> 01:04:55.810
因为有防抖

01:04:55.810 --> 01:04:56.210
对吧

01:04:56.210 --> 01:04:56.930
还有超出

01:04:56.930 --> 01:04:58.370
那么这个东西跟我无关了

01:04:58.370 --> 01:05:00.210
那是你页面自己的事情

01:05:00.210 --> 01:05:01.570
你把它设置为Overflow Heighten

01:05:01.570 --> 01:05:02.050
你完成了吧

01:05:02.850 --> 01:05:04.050
Overflow Heighten

01:05:04.050 --> 01:05:04.690
保存

01:05:04.690 --> 01:05:05.650
跟我就什么关系呢

01:05:08.610 --> 01:05:08.930
对吧

01:05:09.810 --> 01:05:10.610
没问题吧

01:05:10.610 --> 01:05:11.010
是吧

01:05:11.010 --> 01:05:12.450
铺铺就做好了

01:05:12.450 --> 01:05:12.930
就做好了

01:05:14.770 --> 01:05:15.570
好

01:05:15.570 --> 01:05:16.530
还有一件事

01:05:16.530 --> 01:05:17.490
还有一件事

01:05:17.490 --> 01:05:19.170
就是这个容器高度

01:05:19.170 --> 01:05:20.370
这个容器高度

01:05:20.370 --> 01:05:20.930
这个容器高度

01:05:20.930 --> 01:05:22.290
我们现在是自己手动设置的

01:05:22.290 --> 01:05:23.090
对不对

01:05:23.090 --> 01:05:24.850
实际上这个容器是没有任何高度的

01:05:24.850 --> 01:05:25.570
是没有任何高度

01:05:25.570 --> 01:05:26.450
你看Overflow Heighten

01:05:26.450 --> 01:05:27.170
什么都看不见了

01:05:27.170 --> 01:05:27.890
对不对

01:05:27.890 --> 01:05:29.410
它实际上是没有任何高度的

01:05:29.410 --> 01:05:29.810
你看

01:05:29.810 --> 01:05:30.770
它是一根线

01:05:30.770 --> 01:05:32.210
上面是一根线

01:05:32.210 --> 01:05:34.450
那我们现在要用GS来设置

01:05:34.450 --> 01:05:36.610
就是设置这个区域的高度

01:05:36.610 --> 01:05:37.970
那么怎么来设置呢

01:05:37.970 --> 01:05:39.410
我们就在这里设置嘛

01:05:39.410 --> 01:05:40.690
设置每一张图片的坐标

01:05:40.690 --> 01:05:41.570
设置完坐标之后

01:05:41.570 --> 01:05:43.090
我们来设置高度

01:05:43.170 --> 01:05:45.410
设置容器高度

01:05:45.410 --> 01:05:46.850
容器高度怎么设置

01:05:46.850 --> 01:05:48.210
是不是你循环完了过后

01:05:48.210 --> 01:05:49.730
这不是一个数组吗

01:05:49.730 --> 01:05:53.250
数组里边是不是记录了下一个top值

01:05:54.450 --> 01:05:57.170
这个数组里边是不是记录的是下一个top值

01:05:57.170 --> 01:05:59.010
取它的最大的是不是就是它的高度

01:05:59.730 --> 01:06:00.530
对不对

01:06:00.530 --> 01:06:02.050
取它top值最大的那个top值

01:06:02.050 --> 01:06:03.410
是不是就是它的高度了

01:06:03.410 --> 01:06:04.290
没问题吧

01:06:04.290 --> 01:06:04.850
那最多

01:06:04.850 --> 01:06:06.690
如果你不希望有摆边的话

01:06:06.690 --> 01:06:09.010
你减去一个空隙就完成了

01:06:09.010 --> 01:06:09.170
好

01:06:09.170 --> 01:06:10.370
那么咱们来吧

01:06:10.370 --> 01:06:11.570
设置容器的高度

01:06:11.570 --> 01:06:12.610
取出它的最大值

01:06:12.690 --> 01:06:13.810
最大值怎么取

01:06:13.810 --> 01:06:14.610
max

01:06:14.610 --> 01:06:15.410
max

01:06:15.410 --> 01:06:15.730
是吧

01:06:15.730 --> 01:06:16.210
apply

01:06:17.410 --> 01:06:18.130
now

01:06:18.130 --> 01:06:18.850
好

01:06:18.850 --> 01:06:19.490
ar

01:06:19.490 --> 01:06:19.970
对吧

01:06:19.970 --> 01:06:20.850
取它的最大值

01:06:22.290 --> 01:06:23.250
max

01:06:23.250 --> 01:06:23.970
top

01:06:23.970 --> 01:06:24.370
好

01:06:24.370 --> 01:06:25.570
然后容器高度

01:06:25.570 --> 01:06:26.130
container

01:06:26.610 --> 01:06:26.770
啊

01:06:27.650 --> 01:06:28.610
opin

01:06:28.610 --> 01:06:30.050
配置里边的container

01:06:30.050 --> 01:06:30.690
就是容器

01:06:32.050 --> 01:06:33.330
container

01:06:33.330 --> 01:06:34.610
容器的什么

01:06:34.610 --> 01:06:35.090
height

01:06:35.090 --> 01:06:36.050
高度

01:06:36.050 --> 01:06:36.610
style

01:06:36.610 --> 01:06:37.570
style.height

01:06:39.010 --> 01:06:39.970
高度应该的意思吗

01:06:39.970 --> 01:06:40.610
max top

01:06:40.610 --> 01:06:41.250
最大值

01:06:41.250 --> 01:06:42.050
最大的top值

01:06:42.610 --> 01:06:43.810
然后再减去一个空隙嘛

01:06:43.810 --> 01:06:44.930
因为下面有个空隙

01:06:44.930 --> 01:06:45.970
不然画一个摆边

01:06:45.970 --> 01:06:47.250
减去一个什么

01:06:47.250 --> 01:06:48.530
info.gap

01:06:48.530 --> 01:06:49.250
减去空隙

01:06:49.250 --> 01:06:49.890
在凭借上

01:06:49.890 --> 01:06:50.930
撇个屎

01:06:50.930 --> 01:06:52.290
就是容器的高度了

01:06:52.290 --> 01:06:52.850
保存

01:06:52.850 --> 01:06:53.570
你看一下

01:06:54.210 --> 01:06:54.770
来

01:06:54.770 --> 01:06:55.490
刷新啊

01:06:58.290 --> 01:06:59.090
再看一下

01:06:59.810 --> 01:07:00.050
好

01:07:00.050 --> 01:07:01.250
容器的高度你看

01:07:01.250 --> 01:07:02.850
下面高度是正常了

01:07:02.850 --> 01:07:04.050
一切都正常了

01:07:04.050 --> 01:07:04.850
看没

01:07:05.570 --> 01:07:05.810
好

01:07:05.810 --> 01:07:06.690
没问题吧

01:07:07.170 --> 01:07:07.410
好

01:07:07.410 --> 01:07:08.130
这里就是

01:07:08.130 --> 01:07:09.490
这就搞定了啊

01:07:10.610 --> 01:07:10.930
好

01:07:10.930 --> 01:07:12.530
这是这个图片铺不留

01:07:12.690 --> 01:07:14.290
那么向来一定要完成啊

01:07:14.290 --> 01:07:16.290
我们既然专门拿了一张

01:07:16.290 --> 01:07:17.890
一张的节的时间

01:07:17.890 --> 01:07:18.050
来

01:07:18.930 --> 01:07:20.050
讲解这些案例

01:07:20.050 --> 01:07:20.850
那么每个案例

01:07:20.850 --> 01:07:21.730
希望大家都能下去

01:07:21.730 --> 01:07:22.370
自己把完成

01:07:22.370 --> 01:07:23.330
只有你自己做出来了

01:07:23.330 --> 01:07:24.850
才算是真的理解了

01:07:24.850 --> 01:07:25.730
你光听懂了

01:07:25.730 --> 01:07:27.010
听懂了的话

01:07:27.010 --> 01:07:27.810
也没有什么意义

01:07:28.530 --> 01:07:29.090
好

01:07:29.090 --> 01:07:29.490
注意啊

01:07:29.490 --> 01:07:30.370
我们做的是一个插件

01:07:30.370 --> 01:07:30.850
也就是说呢

01:07:30.850 --> 01:07:32.130
我们不仅是这个页面

01:07:32.130 --> 01:07:33.250
将来任何一个页面

01:07:33.250 --> 01:07:34.370
任何一个页面

01:07:34.370 --> 01:07:35.490
我们都可以这样子处理

01:07:35.490 --> 01:07:35.810
你看

01:07:35.810 --> 01:07:37.250
我们可以给他进行配置

01:07:37.250 --> 01:07:38.290
配置

01:07:38.290 --> 01:07:39.970
只要去配置好了过后

01:07:39.970 --> 01:07:40.530
他剩下的事情

01:07:40.530 --> 01:07:41.490
他就帮我们搞定了

01:07:42.210 --> 01:07:42.530
好了

01:07:42.530 --> 01:07:43.090
这是这一块

