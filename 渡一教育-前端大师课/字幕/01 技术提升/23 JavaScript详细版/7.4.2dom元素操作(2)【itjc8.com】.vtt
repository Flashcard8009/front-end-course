WEBVTT

00:00.000 --> 00:17.690
接着来 接下来是元素结构重构

00:17.690 --> 00:21.150
什么意思呢 就是我们页面中有各种元素 对吧

00:21.150 --> 00:24.370
元素是不是有结构的 把它结构打乱 重新来排列

00:24.370 --> 00:28.250
就是我们重新来设置元素结构 就这么个意思

00:28.250 --> 00:31.950
我这里一个个说吧 它里面设计到的就是

00:31.950 --> 00:39.250
还是这些我们这里说的什么属性 方法 都是元素节点的属性和方法

00:39.490 --> 00:43.090
这里我们第一个方法就是咱们注意常用的

00:43.090 --> 00:46.790
Append Child

00:46.790 --> 00:59.370
什么意思呢 它表示的是在某个元素 墨尾加入一个指元素

00:59.370 --> 01:03.810
就这么个意思 就是把一个元素加到另一个元素的指元素

01:03.810 --> 01:07.370
作为它的指元素墨尾里面去 说的比较抽象

01:07.370 --> 01:12.810
咱们来举个例子 元素结构 一 看着

01:14.810 --> 01:19.590
比方说咱们这里有一个DIV 对吧 这个加个ID

01:19.590 --> 01:26.610
DIV1 然后这里边有一个 怎么说 怎么说

01:26.610 --> 01:30.690
咱们用ULI 这样子看得清楚一点 ULI

01:30.690 --> 01:35.370
成一个十个 成一个五个

01:35.530 --> 01:41.370
然后每个LI下面有一个文本 4

01:43.370 --> 01:47.370
这个LI出来了 对吧 过来我们看得更清楚一点 几个中文嘛

01:47.370 --> 01:56.370
这里是选项多了 没问题吧 这是第一个UL 给它个ID ULI

01:56.370 --> 02:03.370
好 再来一个UL2 UL2 没问题吧

02:03.370 --> 02:10.370
咱们整理 这里咱们这样子写 这个UL写上选项1-多了

02:10.370 --> 02:15.370
选项1-多了 成一个5

02:15.370 --> 02:19.370
然后这里写上选项2-多了

02:19.370 --> 02:25.370
UL1-5 选项2-多了

02:25.370 --> 02:32.960
写好了 咱们来看一下这个页面

02:32.960 --> 02:34.960
接下来我要干嘛了 你都拆了 我要干嘛了 对吧

02:34.960 --> 02:37.960
我要干嘛了 我这里有个按钮

02:37.960 --> 02:40.960
或者不用按钮了 咱们就直接写了

02:40.960 --> 02:46.960
然后比方说我要把这个元素加到UL里面的墨尾去

02:46.960 --> 02:49.960
我要做这么一件事 就是我在结构上我要这样调整

02:49.960 --> 02:53.960
我把这个元素拿到 然后加到这里面的墨尾

02:53.960 --> 02:56.960
看一下怎么来处理 怎么来处理

02:56.960 --> 02:58.960
就是我们要改变元素结构了

02:58.960 --> 03:01.960
这里我们首先获取到这个元素

03:01.960 --> 03:04.960
这个元素怎么来获取呢 我们得到UL1

03:04.960 --> 03:06.960
可以直接用IT来获取 虽然不推荐

03:06.960 --> 03:08.960
但是我在测试的时候无所谓了

03:08.960 --> 03:12.960
UL1 然后通过它来得到它里面的第几个

03:12.960 --> 03:16.960
第四个元素

03:16.960 --> 03:20.960
Get elements by tag name

03:20.960 --> 03:24.960
得到啥 得到第四个下标尾3

03:24.960 --> 03:30.960
咱们得到这个Li 得到这个Li元素

03:30.960 --> 03:35.960
Get elements 它说啥 它说运行这个函数失败

03:35.960 --> 03:39.960
它说它有参数的 忘了 它有参数的

03:39.960 --> 03:43.960
这就是顺便我说一下 说到这 还记得吗

03:43.960 --> 03:47.960
我以前在讲标准库的时候讲到了这个错误处理

03:47.960 --> 03:51.960
当时我说了一个东西 就是有的时候就必须要报错

03:51.960 --> 03:53.960
就应该要报错的 你看它这里就报错了

03:53.960 --> 03:56.960
你该传一个参数 你没有传 它就要报错

03:56.960 --> 04:00.960
它告诉你 你这个错误是必须要传一个参数

04:00.960 --> 04:02.960
它说一个参数是required

04:02.960 --> 04:05.960
required什么意思 是必须的argument参数的意思

04:05.960 --> 04:09.960
至少得有一个参数 但是你现在给的是0个参数

04:09.960 --> 04:13.960
你提供的present是提供的 你提供的只有0个参数

04:13.960 --> 04:16.960
是这么个意思 所以说该报错的地方就要报错

04:16.960 --> 04:19.960
这里得到Li 对吧 Li

04:19.960 --> 04:21.960
然后我们得到第四个Li

04:21.960 --> 04:23.960
得到第四个 你看 所以得到第四个了

04:23.960 --> 04:26.960
接下来我把Li要加到哪里面去

04:26.960 --> 04:31.960
加到Ul里面去 Ul2里面去 很简单 看着怎么这么做

04:31.960 --> 04:39.960
Ul2 這個Ul2是谁 温豆Ul2是谁呢

04:39.960 --> 04:42.960
是不是就这个Ul 对吧 就这个Ul

04:42.960 --> 04:46.960
那么找到这个Ul 使用它的Append Child

04:46.960 --> 04:51.960
使用Append Child Li放进去 完了 没了

04:51.960 --> 04:54.960
回车里看 这个Li消失了 对吧

04:54.960 --> 04:57.960
这个Li进来了 为什么这边会消失

04:57.960 --> 05:00.960
因为我们这个对象只带的就是这个Li

05:00.960 --> 05:02.960
就是之前在这的Li 1-4

05:02.960 --> 05:04.960
但是现在把它加到这里面了

05:04.960 --> 05:06.960
它是这边是不是一定消失的

05:06.960 --> 05:08.960
如果这边不消失 你看是不是矛盾了

05:08.960 --> 05:11.960
如果这边不消失 那同一个对象

05:11.960 --> 05:14.960
它怎么可能寄出现在这儿 又出现在这儿了

05:14.960 --> 05:16.960
不合理 是有问题的这样子

05:16.960 --> 05:19.960
所以说它是同一个对象 是同一个对象

05:19.960 --> 05:22.960
因此它这边肯定要消失

05:22.960 --> 05:24.960
同一个对象 它要么出现在这个Ul

05:24.960 --> 05:27.960
要么出现在Ul1 要么出现在Ul2

05:27.960 --> 05:28.960
它不可能同时出现的

05:28.960 --> 05:29.960
因为它们是同一个对象

05:29.960 --> 05:31.960
它指向的是同一块粒子 你看这意思吧

05:31.960 --> 05:34.960
说这边消失了 它现在加入到这边来了

05:34.960 --> 05:36.960
咱们来看一下这个文档结构

05:36.960 --> 05:38.960
你看这边是不是只有四个了

05:38.960 --> 05:40.960
然后第二个Li里面是不是多了一下

05:40.960 --> 05:42.960
你看 通过这种方式

05:42.960 --> 05:45.960
就会调整它的元素结构

05:45.960 --> 05:47.960
看没有 非常非常简单

05:48.960 --> 05:52.960
它是负元素 应该这样子说

05:52.960 --> 05:55.960
负元素调用Append Child

05:55.960 --> 05:58.960
然后这里边填一个元素进来

05:58.960 --> 05:59.960
一个元素放进来

05:59.960 --> 06:03.960
那么它就会把这个元素加到负元素的墨尾

06:03.960 --> 06:04.960
Append什么意思

06:04.960 --> 06:05.960
Append就是追加

06:05.960 --> 06:09.340
追加的意思

06:09.340 --> 06:11.340
我的普通话也不太标准

06:11.340 --> 06:12.340
我只能打字给你们说明了

06:12.340 --> 06:14.340
追加Append

06:14.340 --> 06:15.340
就这么个意思

06:15.340 --> 06:16.340
追加到墨尾

06:16.340 --> 06:18.340
就完了

06:18.340 --> 06:21.340
好 咱们再看

06:21.340 --> 06:23.340
我现在还要它说的没有

06:23.340 --> 06:25.340
Append里面它还有一个东西

06:25.340 --> 06:26.340
叫做Append

06:26.340 --> 06:28.340
它没有这个child

06:28.340 --> 06:29.340
叫做Append

06:29.340 --> 06:31.340
Append跟Append Child是有点区别的

06:31.340 --> 06:34.340
Append可以填多个

06:34.340 --> 06:36.340
咱们比方说吧

06:36.340 --> 06:38.340
这里UL2

06:38.340 --> 06:41.340
Append

06:41.340 --> 06:45.340
这里面我们把加到UL1里面去

06:45.340 --> 06:46.340
Append

06:46.340 --> 06:48.340
一把加到UL1里面去

06:48.340 --> 06:50.340
是不是又跑到UL1里面去

06:50.340 --> 06:52.340
Append这里区别在于

06:52.340 --> 06:54.340
它这里可以填多个

06:54.340 --> 06:56.340
比方说我们这里豆号

06:56.340 --> 06:58.340
豆号可以填多个

06:58.340 --> 07:00.340
但是现在由于是同一个对象

07:00.340 --> 07:01.340
所以我只能加一个

07:01.340 --> 07:02.340
但是可以填多个的

07:02.340 --> 07:03.340
但是这个东西不要用

07:03.340 --> 07:05.340
尽量不要用

07:05.340 --> 07:06.340
为什么尽量不要用呢

07:06.340 --> 07:09.340
因为现在目前还没有成为正式的标准

07:09.340 --> 07:11.340
所以说不太推荐使用Append

07:11.340 --> 07:12.340
没有这个意思吧

07:12.340 --> 07:13.340
我们再测试一下吧

07:13.340 --> 07:15.340
Li2

07:15.340 --> 07:16.340
叫UL1

07:16.340 --> 07:18.340
Gate

07:18.340 --> 07:19.340
Gate

07:19.340 --> 07:20.340
Element

07:20.340 --> 07:22.340
by Technique

07:22.340 --> 07:25.340
ULi取它第四个

07:25.340 --> 07:27.340
取它第一个嘛

07:27.340 --> 07:29.340
取它第一个

07:29.340 --> 07:30.340
两个了对吧

07:30.340 --> 07:31.340
两个了

07:31.340 --> 07:32.340
Li2

07:32.340 --> 07:33.340
接下来我们UL2

07:33.340 --> 07:35.340
Append

07:35.340 --> 07:36.340
Append

07:36.340 --> 07:37.340
Li

07:37.340 --> 07:38.340
Li2看着

07:38.340 --> 07:40.340
你看什么两个都过来了

07:40.340 --> 07:41.340
是两个都过来了吧

07:41.340 --> 07:42.340
那如果用

07:43.340 --> 07:44.340
清楚

07:44.340 --> 07:46.340
如果用Append Child

07:46.340 --> 07:48.340
对不起你只能写一个

07:48.340 --> 07:50.340
比方说Li2

07:50.340 --> 07:52.340
你这样写对不起

07:52.340 --> 07:53.340
它只识别第一个参数

07:53.340 --> 07:55.340
第二个参数它不能识别

07:55.340 --> 07:57.340
它就是这个区别

07:57.340 --> 07:59.340
其他没啥区别了

07:59.340 --> 08:00.340
这是关于这一块

08:00.340 --> 08:01.340
不过不要使用那个

08:01.340 --> 08:03.340
这个还没有成为标准

08:03.340 --> 08:04.340
好吧

08:04.340 --> 08:06.340
这是关于第一个Append Child

08:06.340 --> 08:08.340
好下一个

08:08.340 --> 08:10.340
下一个也是复元素调用的

08:10.340 --> 08:11.340
是复元素调用的

08:11.340 --> 08:13.340
叫做Insert

08:13.340 --> 08:14.340
Insert表示什么

08:14.340 --> 08:15.340
插入

08:15.340 --> 08:16.340
插入到中间

08:16.340 --> 08:18.340
我们之前是把它加入到末尾

08:18.340 --> 08:20.340
对吧是用Append的单词

08:20.340 --> 08:21.340
那么Insert表示

08:21.340 --> 08:22.340
插入到中间

08:22.340 --> 08:23.340
在中间插入

08:23.340 --> 08:25.340
Insert before

08:25.340 --> 08:27.340
好这里边要传两个参数

08:27.340 --> 08:28.340
两个参数

08:28.340 --> 08:29.340
哪两个参数呢

08:29.340 --> 08:32.340
就是代插入的元素

08:32.340 --> 08:34.340
代插入的元素

08:34.340 --> 08:35.340
然后呢

08:35.340 --> 08:37.340
第二个参数是

08:37.340 --> 08:39.340
哪个元素之前

08:39.340 --> 08:40.340
什么意思呢

08:40.340 --> 08:42.340
它就话连切意思就是

08:42.340 --> 08:44.340
在这个复元素里边

08:44.340 --> 08:45.340
插入一个元素

08:45.340 --> 08:46.340
插入哪个元素呢

08:46.340 --> 08:47.340
插入这个元素

08:47.340 --> 08:50.340
然后在这个元素

08:50.340 --> 08:51.340
之前插入

08:51.340 --> 08:53.340
就这么个意思

08:53.340 --> 08:54.340
这么个意思

08:54.340 --> 08:56.340
当然它不一定是元素

08:56.340 --> 08:57.340
它也可能是

08:57.340 --> 08:58.340
节点

08:58.340 --> 08:59.340
其他节点都可以

08:59.340 --> 09:00.340
好

09:00.340 --> 09:01.340
咱们来看一下

09:01.340 --> 09:02.340
看一下这个例子

09:02.340 --> 09:04.340
元素结构2

09:04.340 --> 09:06.340
比方说

09:06.340 --> 09:07.340
现在这个一面

09:07.340 --> 09:10.340
咱们来举行例子

09:10.340 --> 09:14.780
我们这里打算

09:14.780 --> 09:15.780
打算干嘛呢

09:15.780 --> 09:16.780
比方说

09:16.780 --> 09:18.780
我要把这一项

09:18.780 --> 09:21.780
插入到这一项之前

09:21.780 --> 09:22.780
我要把这一项

09:22.780 --> 09:24.780
插入到这一项之前

09:24.780 --> 09:25.780
怎么做呢

09:25.780 --> 09:26.780
一钢4

09:26.780 --> 09:28.780
加入到2钢2之前

09:28.780 --> 09:29.780
我们首先获取

09:29.780 --> 09:32.780
一钢4 Li14

09:32.780 --> 09:33.780
Document

09:33.780 --> 09:35.780
就是UL1

09:35.780 --> 09:36.780
UL1

09:36.780 --> 09:39.780
然后

09:39.780 --> 09:42.780
GetElementByTechnique Li

09:42.780 --> 09:44.780
然后得到第几个

09:44.780 --> 09:45.780
一钢4

09:45.780 --> 09:46.780
第三个对吧

09:46.780 --> 09:48.780
第三个得到

09:48.780 --> 09:50.780
Li1钢4得到了

09:50.780 --> 09:51.780
然后我们要做什么呢

09:51.780 --> 09:52.780
把插入到这个之前

09:52.780 --> 09:55.780
于是是不是把这个东西获取到

09:55.780 --> 09:57.780
Li2钢2

09:57.780 --> 09:59.780
UL2

09:59.780 --> 10:02.780
GetElementByTechnique Li

10:02.780 --> 10:03.780
取几个

10:03.780 --> 10:04.780
去哪个

10:04.780 --> 10:05.780
去下表唯一的这一项

10:05.780 --> 10:06.780
对吧

10:06.780 --> 10:07.780
这一项拿到了

10:07.780 --> 10:08.780
你看

10:08.780 --> 10:09.780
Li1钢4

10:09.780 --> 10:10.780
你看是不是这一项

10:10.780 --> 10:11.780
没问题吧

10:11.780 --> 10:12.780
然后22

10:12.780 --> 10:13.780
是不是这一项

10:13.780 --> 10:14.780
对吧 拿到了

10:14.780 --> 10:15.780
这里两个拿到之后就好操作了

10:15.780 --> 10:16.780
怎么操作呢

10:16.780 --> 10:19.780
看着UL2

10:19.780 --> 10:20.780
拿到这个

10:20.780 --> 10:21.780
拿到这个UL

10:21.780 --> 10:22.780
拿到它之后

10:22.780 --> 10:26.780
使用InsertBefore

10:26.780 --> 10:27.780
在某个东西之前

10:27.780 --> 10:29.780
插入某个东西

10:29.780 --> 10:30.780
第一个参考点啥

10:30.780 --> 10:32.780
你要把哪个东西插入来

10:32.780 --> 10:33.780
哪个东西

10:33.780 --> 10:35.780
Li1钢4

10:35.780 --> 10:37.780
第二个参考点啥

10:37.780 --> 10:39.780
第二个参考点的是

10:39.780 --> 10:42.780
我们使用的是Li22

10:42.780 --> 10:43.780
把这个东西

10:43.780 --> 10:45.780
插入到它的指元数

10:45.780 --> 10:47.780
它的指元数

10:47.780 --> 10:49.780
Li22之前

10:49.780 --> 10:50.780
注意 都是指元数

10:50.780 --> 10:52.780
操作的都是指元数

10:52.780 --> 10:53.780
回车 你看

10:53.780 --> 10:55.780
就加不进来了

10:55.780 --> 10:56.780
没问题吧

10:56.780 --> 10:57.780
没问题

10:57.780 --> 10:58.780
那么这边还是一样的

10:58.780 --> 11:00.780
消失了

11:00.780 --> 11:02.780
好 接下来

11:02.780 --> 11:04.780
它并没有给你提供一个方法

11:04.780 --> 11:05.780
能够在之后插入

11:05.780 --> 11:06.780
没有

11:06.780 --> 11:08.780
它里边没有这个方法

11:08.780 --> 11:09.780
那你想一想

11:09.780 --> 11:11.780
能不能在之后插入呢

11:11.780 --> 11:13.780
可不可以在它之后插入呢

11:13.780 --> 11:15.780
是可以的

11:15.780 --> 11:16.780
可以的

11:16.780 --> 11:17.780
你想个办法

11:17.780 --> 11:18.780
想个办法

11:18.780 --> 11:19.780
比方说

11:19.780 --> 11:20.780
现在我又要来了

11:20.780 --> 11:21.780
又要来了

11:21.780 --> 11:22.780
我要把这一项

11:22.780 --> 11:24.780
插入到这一项之后

11:24.780 --> 11:26.780
这一项现在现在是咋了

11:26.780 --> 11:27.780
腰式 对吧

11:27.780 --> 11:28.780
你看 是这一项

11:29.780 --> 11:30.780
你看 是不是这一项

11:30.780 --> 11:31.780
没问题吧

11:31.780 --> 11:33.780
这两个对象都对应的

11:33.780 --> 11:35.780
然后接下来

11:35.780 --> 11:37.780
我又来一次

11:37.780 --> 11:39.780
insert before

11:39.780 --> 11:40.780
看着

11:40.780 --> 11:42.780
我要把它变到这个后边去

11:42.780 --> 11:43.780
加到这个后边去

11:43.780 --> 11:44.780
看怎么来加

11:44.780 --> 11:45.780
怎么来加

11:45.780 --> 11:47.780
我们这样子

11:47.780 --> 11:48.780
Li14

11:48.780 --> 11:49.780
这是我要插入的项

11:49.780 --> 11:50.780
插入这个元数

11:50.780 --> 11:51.780
插入到哪了

11:51.780 --> 11:53.780
这一项之后

11:53.780 --> 11:54.780
你想一想

11:54.780 --> 11:55.780
这一项之后

11:55.780 --> 11:56.780
是不是

11:56.780 --> 11:57.780
这一项的

11:57.780 --> 11:59.780
下一项之前

12:00.780 --> 12:01.780
能招得过来吗

12:01.780 --> 12:02.780
这个逻辑

12:02.780 --> 12:04.780
我要把它插入到这一项之后

12:04.780 --> 12:05.780
是不是这一项的

12:05.780 --> 12:07.780
下一项之前

12:07.780 --> 12:09.780
它下一项可能是文笨节链

12:09.780 --> 12:10.780
它不一定是这个节链

12:10.780 --> 12:11.780
不一定是这个节链

12:11.780 --> 12:12.780
可能是文笨节链

12:12.780 --> 12:13.780
但是无所谓

12:13.780 --> 12:14.780
比方说

12:14.780 --> 12:15.780
我就用元数节链来解释了

12:15.780 --> 12:17.780
是不是它有到下一项之前

12:17.780 --> 12:19.780
那么下一项怎么来获取

12:19.780 --> 12:21.780
是不是Li22的

12:21.780 --> 12:23.780
next element sibling

12:23.780 --> 12:25.780
下一个元数之前

12:26.780 --> 12:27.780
你看

12:27.780 --> 12:29.780
就插入到之后了

12:29.780 --> 12:30.780
你这样

12:30.780 --> 12:31.780
需要灵活处理

12:31.780 --> 12:32.780
需要灵活处理

12:32.780 --> 12:33.780
用我们之前学过的知识

12:33.780 --> 12:35.780
没问题吧

12:35.780 --> 12:36.780
那如果

12:36.780 --> 12:37.780
有些东西说

12:37.780 --> 12:38.780
这个样子可能不太稳当

12:38.780 --> 12:40.780
因为它有可能最后一项

12:40.780 --> 12:41.780
它如果

12:41.780 --> 12:42.780
如果这个东西是最后一项

12:42.780 --> 12:43.780
它下一项就是那无

12:43.780 --> 12:45.780
那无所谓

12:45.780 --> 12:46.780
那无所谓

12:46.780 --> 12:48.780
如果第二个参数是那我的话

12:48.780 --> 12:50.780
它就要最后一项了

12:50.780 --> 12:51.780
如果是那我的话

12:51.780 --> 12:52.780
就到最后一项了

12:52.780 --> 12:53.780
没有这个意思吧

12:55.780 --> 12:57.780
这是关于

12:57.780 --> 12:59.780
insert before

12:59.780 --> 13:00.780
很简单

13:00.780 --> 13:01.780
都很简单

13:01.780 --> 13:02.780
没有什么难的

13:02.780 --> 13:03.780
其实难的东西

13:03.780 --> 13:04.780
前面都讲完了

13:04.780 --> 13:05.780
咱们从第七章开始

13:05.780 --> 13:07.780
就是比较轻松了

13:07.780 --> 13:08.780
除了到后边

13:08.780 --> 13:09.780
学到进阶部分

13:09.780 --> 13:10.780
又有点难度

13:10.780 --> 13:11.780
就这几章比较轻松

13:11.780 --> 13:12.780
都是学习这种

13:12.780 --> 13:14.780
各种API怎么去使用

13:14.780 --> 13:16.780
好 副元数

13:16.780 --> 13:17.780
然后第二

13:17.780 --> 13:18.780
replace

13:18.780 --> 13:19.780
下一个了

13:19.780 --> 13:22.340
child

13:24.340 --> 13:26.340
被替换的元数

13:26.340 --> 13:27.340
它是做替换的

13:27.340 --> 13:28.340
替换的元数

13:28.340 --> 13:29.340
然后呢

13:29.340 --> 13:31.340
第二参数是被替换的元数

13:33.340 --> 13:34.340
replace什么意思

13:34.340 --> 13:35.340
就是替换的意思

13:35.340 --> 13:36.340
替换的意思

13:36.340 --> 13:37.340
child

13:37.340 --> 13:38.340
就替换指元数

13:38.340 --> 13:39.340
这些东西都是操作指元数

13:39.340 --> 13:41.340
都是操作指元数

13:42.340 --> 13:43.340
replace child

13:43.340 --> 13:44.340
知道什么意思呢

13:44.340 --> 13:46.340
把这个元数替换成这个元数

13:46.340 --> 13:47.340
没了

13:47.340 --> 13:48.340
简不简单

13:48.340 --> 13:49.340
很简单

13:49.340 --> 13:50.340
这个东西

13:50.340 --> 13:51.340
我们用的还不多

13:51.340 --> 13:52.340
平时用的不多

13:52.340 --> 13:53.340
我们来看一下吧

13:53.340 --> 13:54.340
还是这个

13:54.340 --> 13:55.340
因为这两个我都获取到了

13:55.340 --> 13:56.340
对吧

13:56.340 --> 13:57.340
Li1-4

13:57.340 --> 13:58.340
然后Li22

13:58.340 --> 13:59.340
开始获取到了

13:59.340 --> 14:00.340
对吧

14:00.340 --> 14:01.340
我现在把这个元数

14:01.340 --> 14:02.340
替换掉这个元数

14:02.340 --> 14:03.340
看着

14:03.340 --> 14:04.340
UL2

14:04.340 --> 14:05.340
因为是它的指元数

14:05.340 --> 14:06.340
replace

14:06.340 --> 14:07.340
child

14:09.340 --> 14:10.340
好

14:10.340 --> 14:11.340
然后呢

14:11.340 --> 14:12.340
被替换的

14:12.340 --> 14:13.340
替换的是哪一个

14:13.340 --> 14:14.340
Li14

14:14.340 --> 14:15.340
用它

14:15.340 --> 14:16.340
替换它

14:16.340 --> 14:17.340
所以说

14:17.340 --> 14:18.340
第一参数Li14

14:18.340 --> 14:19.340
第二参数Li22

14:20.340 --> 14:21.340
替换掉了

14:22.340 --> 14:23.340
这啥

14:23.340 --> 14:24.340
这啥

14:25.340 --> 14:26.340
点了啥

14:26.340 --> 14:27.340
发心

14:27.340 --> 14:28.340
我的天

14:28.340 --> 14:29.340
总之替换掉了

14:29.340 --> 14:30.340
总之替换掉了

14:30.340 --> 14:31.340
你们自己去试验一下

14:31.340 --> 14:32.340
我这个男的再写一遍

14:32.340 --> 14:33.340
没问题吧

14:33.340 --> 14:34.340
很简单

14:34.340 --> 14:35.340
很简单

14:35.340 --> 14:36.340
非常非常简单

14:36.340 --> 14:38.340
这是元数结构的重铸

14:38.340 --> 14:40.340
大家注意一下

14:40.340 --> 14:41.340
注意一下

14:41.340 --> 14:42.340
下面一个东西

14:42.340 --> 14:43.340
是个销率

14:43.340 --> 14:44.340
一个细节

14:45.340 --> 14:46.340
细节

14:46.340 --> 14:47.340
就是销率

14:47.340 --> 14:48.340
销率问题

14:49.340 --> 14:50.340
处理

14:50.340 --> 14:51.340
移动元素

14:52.340 --> 14:53.340
移动元素

14:53.340 --> 14:56.340
或者叫做更改元素结构

14:56.340 --> 14:58.340
哪些操作会更改元素结构

14:58.340 --> 14:59.340
上面的操作

14:59.340 --> 15:00.340
是不是都会更改元素结构

15:00.340 --> 15:02.340
整个元素的塑形结构改变了

15:02.340 --> 15:03.340
包括后边的

15:03.340 --> 15:05.340
下边的创建元素

15:05.340 --> 15:06.340
删除元素

15:06.340 --> 15:08.340
都会更改元素的结构

15:08.340 --> 15:10.340
更改元素结构

15:10.340 --> 15:12.340
效率较低

15:12.340 --> 15:14.340
因为页面它

15:14.340 --> 15:16.340
更改了一个元素过后

15:16.340 --> 15:18.340
可能会导致大面积的重新渲染

15:18.340 --> 15:20.340
因为我们的页面

15:20.340 --> 15:21.340
页面你看一下

15:21.340 --> 15:22.340
从上到下排列

15:22.340 --> 15:23.340
如果一个元素少了

15:23.340 --> 15:25.340
比方说咱们随便找个网站

15:25.340 --> 15:27.340
随便淘宝吧

15:27.340 --> 15:29.340
如果你把一个元素删了

15:29.340 --> 15:30.340
或者是你把一个元素移动了

15:30.340 --> 15:32.340
一个元素没了

15:32.340 --> 15:34.340
它会导致其他元素都可能会重新排列

15:34.340 --> 15:36.340
比方这个地方

15:36.340 --> 15:39.340
比方说随便下举写例子

15:39.340 --> 15:40.340
放小一点

15:41.340 --> 15:43.340
为什么这么卡

15:43.340 --> 15:44.340
然后把这一块

15:44.340 --> 15:46.340
这一块区域

15:46.340 --> 15:48.340
比方说

15:48.340 --> 15:50.340
把这个区域删除

15:50.340 --> 15:52.340
你看下边的元素是不是跟着移动了

15:52.340 --> 15:54.340
没问题吧跟着移动了吧

15:54.340 --> 15:55.340
下边这个

15:55.340 --> 15:56.340
删除

15:56.340 --> 15:58.340
你看下边的元素是不是跑上来了

15:58.340 --> 15:59.340
跑上来了

15:59.340 --> 16:00.340
也跟着移动了

16:00.340 --> 16:02.340
变成这样子了

16:02.340 --> 16:04.340
总之我们更改的元素结构过后

16:04.340 --> 16:07.340
这个页面会大面积的重新渲染

16:07.340 --> 16:09.340
渲染是比较耗时的

16:09.340 --> 16:10.340
比较耗时的操作

16:10.340 --> 16:12.340
所以说会影响自信效率

16:12.340 --> 16:13.340
但是有的时候没办法

16:13.340 --> 16:15.340
你必须要改变元素结构

16:15.340 --> 16:17.340
因为影响效率就不动了

16:17.340 --> 16:19.340
那有什么意义呢

16:19.340 --> 16:21.340
效率最高了就啥程序都不写

16:21.340 --> 16:23.340
就不要学习程序了

16:23.340 --> 16:24.340
这是效率最高的方式

16:24.340 --> 16:25.340
什么程序都不写

16:25.340 --> 16:28.340
一写程序肯定要有个执行时间

16:28.340 --> 16:29.340
无论写什么代码

16:29.340 --> 16:30.340
都有个执行时间

16:30.340 --> 16:32.340
你不要走火入魔

16:32.340 --> 16:33.340
因为它效率低

16:33.340 --> 16:34.340
所以说我们就完全不用它了

16:34.340 --> 16:35.340
那不是的

16:35.340 --> 16:36.340
我们经常会这样子用

16:36.340 --> 16:38.340
但是你要知道它效率比较低

16:38.340 --> 16:39.340
比较低

16:39.340 --> 16:43.340
所以说尽量少用

16:43.340 --> 16:45.340
能不改变元素结构

16:45.340 --> 16:47.340
就尽量的不要改变

16:47.340 --> 16:48.340
不是说你不能改变

16:48.340 --> 16:49.340
没了意思吧

16:49.340 --> 16:51.340
了解一下这个细节就够了

16:51.340 --> 16:52.340
包括我们后面讲的

16:52.340 --> 16:54.340
删除元素也是这样子

16:54.340 --> 16:56.340
好 接下来

16:56.340 --> 16:58.340
创建和删除元素

16:58.340 --> 17:00.340
我们首先说创建

17:00.340 --> 17:02.340
创建元素

17:02.340 --> 17:04.340
就是创建一个新的元素了

17:04.340 --> 17:06.340
这里要创建新的元素了

17:06.340 --> 17:07.340
创建元素呢

17:07.340 --> 17:10.340
一种方式使用document

17:10.340 --> 17:11.340
这个对象又来了

17:11.340 --> 17:13.340
整个文档对象里边

17:13.340 --> 17:14.340
它提供了一个方法

17:14.340 --> 17:17.340
叫crease

17:17.340 --> 17:19.340
来创建

17:19.340 --> 17:20.340
这样说吧

17:20.340 --> 17:22.340
crease elements

17:22.340 --> 17:25.340
这里边写的是元素名

17:25.340 --> 17:26.340
元素名

17:26.340 --> 17:27.340
就是标签的名字

17:27.340 --> 17:28.340
字不串

17:28.340 --> 17:29.340
就写到这

17:29.340 --> 17:31.340
字不串 写到这

17:31.340 --> 17:33.340
这是创建一个元素对象

17:33.340 --> 17:36.340
创建一个元素对象

17:36.340 --> 17:38.340
好 咱们来看一下

17:38.340 --> 17:43.940
新建一个创建元素

17:43.940 --> 17:45.940
比方说这里有个DIV

17:45.940 --> 17:46.940
或者是ULLI

17:46.940 --> 17:49.940
ULLI乘以10个

17:49.940 --> 17:53.380
好 咱们来

17:53.380 --> 17:54.380
给它个ID

17:54.380 --> 17:57.380
UL1

17:57.380 --> 17:59.380
好吧 运行出来

17:59.380 --> 18:01.380
咱们来看一下

18:01.380 --> 18:02.380
运行出来

18:02.380 --> 18:03.380
来调试一下

18:03.380 --> 18:05.380
接下来我们要做一个事情

18:05.380 --> 18:07.380
就是新建一个元素

18:07.380 --> 18:09.380
给它加进去

18:09.380 --> 18:10.380
加到这个UL里面去

18:10.380 --> 18:12.380
咱们首先来新建一个元素

18:12.380 --> 18:13.380
刚才我刚才说了

18:13.380 --> 18:16.380
新建一个元素用什么方法呢

18:16.380 --> 18:19.380
document create

18:19.380 --> 18:20.380
创建什么

18:20.380 --> 18:22.380
创建元素节点

18:22.380 --> 18:25.380
所以说它用的名字叫做crease element

18:25.380 --> 18:26.380
创建元素节点

18:26.380 --> 18:28.380
那么元素的名字就是什么呢

18:28.380 --> 18:29.380
元素的类型是什么呢

18:29.380 --> 18:30.380
LI

18:30.380 --> 18:31.380
这里不用大写

18:31.380 --> 18:32.380
大写都可以

18:32.380 --> 18:33.380
大小写都可以

18:33.380 --> 18:35.380
这里直接写小写就行了

18:35.380 --> 18:37.380
好 创建好了

18:37.380 --> 18:38.380
大家看

18:38.380 --> 18:41.380
我创建了一个新的元素

18:41.380 --> 18:43.380
页面上有变化吗

18:43.380 --> 18:44.380
有变化吗

18:44.380 --> 18:45.380
你不用找了

18:45.380 --> 18:46.380
你不用在这里面去找

18:46.380 --> 18:47.380
找不到的

18:47.380 --> 18:48.380
没有

18:48.380 --> 18:51.380
这个只是内存里面的对象

18:51.380 --> 18:53.380
它并不在页面上

18:53.380 --> 18:55.380
比方说我们之前创建一个OB接

18:55.380 --> 18:57.380
一个对象

18:57.380 --> 18:58.380
页面上有反应

18:58.380 --> 18:59.380
有啥反应

18:59.380 --> 19:00.380
我们之前不天天创建对象

19:00.380 --> 19:01.380
有啥反应

19:01.380 --> 19:02.380
没有任何反应

19:02.380 --> 19:03.380
对吧

19:03.380 --> 19:04.380
所以我们只是在内存里面

19:04.380 --> 19:05.380
多了一个对象而已

19:05.380 --> 19:06.380
它并没有在页面

19:06.380 --> 19:09.380
它并没有影响文档的结构

19:09.380 --> 19:11.380
文档的结构没有影响

19:11.380 --> 19:12.380
再说了

19:12.380 --> 19:14.380
你创建一个元素

19:14.380 --> 19:15.380
你都没有告诉他

19:15.380 --> 19:16.380
往哪里边加

19:16.380 --> 19:17.380
他怎么知道元素方哪呢

19:17.380 --> 19:18.380
对不对

19:18.380 --> 19:19.380
所以说

19:19.380 --> 19:20.380
你不用去想了

19:20.380 --> 19:21.380
这里只是在内存里面

19:21.380 --> 19:22.380
有一个对象

19:22.380 --> 19:24.380
但是对象跟之前说的

19:24.380 --> 19:27.380
元素的节点是一样的

19:27.380 --> 19:28.380
是一样的

19:28.380 --> 19:29.380
没有任何的区别

19:29.380 --> 19:31.380
它就是元素节点

19:31.380 --> 19:32.380
你看它能不能用

19:32.380 --> 19:33.380
InnerATML

19:33.380 --> 19:34.380
能不能

19:34.380 --> 19:35.380
我之前写过的这个

19:35.380 --> 19:37.380
给它设置InnerATML

19:37.380 --> 19:38.380
能不能设置

19:38.380 --> 19:39.380
当然可以设置

19:39.380 --> 19:40.380
然后我们来查看一下这个元素

19:40.380 --> 19:41.380
你看一下

19:41.380 --> 19:42.380
是不是可以查看

19:42.380 --> 19:43.380
没问题吧

19:43.380 --> 19:45.380
它除了不在页面上之外

19:45.380 --> 19:48.380
其他全部一切东西都是正常的

19:48.380 --> 19:49.380
一切东西都是正常的

19:49.380 --> 19:51.380
之前学的所有东西都可以用

19:51.380 --> 19:53.380
都可以跟它对它进行使用

19:53.380 --> 19:54.380
它除了在页面上看不见

19:54.380 --> 19:56.380
它没有在文档结构里面

19:56.380 --> 19:57.380
其他都一样

19:57.380 --> 19:58.380
那接下来

19:58.380 --> 19:59.380
要把它加到文档里面

19:59.380 --> 20:00.380
还不简单吗

20:00.380 --> 20:01.380
怎么做

20:01.380 --> 20:03.380
找这个ULE

20:03.380 --> 20:05.380
刚才学的ULE

20:05.380 --> 20:07.380
Append Child

20:07.380 --> 20:08.380
把它加进去

20:08.380 --> 20:10.380
是不是就完了

20:10.380 --> 20:11.380
是不是就完了

20:11.380 --> 20:12.380
没问题吧

20:12.380 --> 20:14.380
没问题吧

20:14.380 --> 20:15.380
如果我多加几次

20:15.380 --> 20:16.380
是不是没用

20:16.380 --> 20:17.380
我们之前说过的

20:17.380 --> 20:18.380
它是统一个对象

20:18.380 --> 20:19.380
统一个对象

20:19.380 --> 20:21.380
它没用的多加几次

20:21.380 --> 20:22.380
好吧

20:22.380 --> 20:25.380
这是关于Append Child

20:25.380 --> 20:27.380
关于CreateElement

20:27.380 --> 20:29.380
那么这里我就顺便说一下

20:29.380 --> 20:31.380
既然可以CreateElement

20:31.380 --> 20:32.380
是不是可以创建其他的东西

20:32.380 --> 20:34.380
是不是可以创建其他的

20:34.380 --> 20:36.380
还有什么呢

20:36.380 --> 20:38.380
这里顺便说一下

20:38.380 --> 20:43.540
还有什么呢

20:43.540 --> 20:45.540
Document就多了

20:45.540 --> 20:47.540
CreateText

20:47.540 --> 20:49.540
创建文本节点

20:49.540 --> 20:50.540
是不是可以

20:50.540 --> 20:51.540
我们来看一下

20:51.540 --> 20:53.540
DocumentCreateText

20:53.540 --> 20:55.540
Note

20:55.540 --> 20:56.540
因为这个评评很少用

20:56.540 --> 20:57.540
我也记不住

20:57.540 --> 20:59.540
创建一个文本节点

20:59.540 --> 21:00.540
那这里是不是写的是什么

21:00.540 --> 21:01.540
写的是文本

21:01.540 --> 21:02.540
对吧

21:02.540 --> 21:03.540
创建一个文本节点

21:03.540 --> 21:04.540
比方说

21:04.540 --> 21:06.540
咱们CreateText Note

21:06.540 --> 21:08.540
创建一个文本ABC

21:08.540 --> 21:09.540
我要干嘛呢

21:09.540 --> 21:11.540
就创建好了一个文本节点了

21:11.540 --> 21:13.540
txt

21:13.540 --> 21:14.540
创建好了

21:14.540 --> 21:15.540
这txt是什么

21:15.540 --> 21:17.540
就是一个文本节点

21:17.540 --> 21:18.540
它的节点类型

21:18.540 --> 21:19.540
note name

21:19.540 --> 21:21.540
你看节点名称是text

21:21.540 --> 21:22.540
比方说

21:22.540 --> 21:23.540
我要把文本节点

21:23.540 --> 21:25.540
加到之前创建的li里面去

21:25.540 --> 21:26.540
可不可以

21:26.540 --> 21:27.540
当然可以

21:27.540 --> 21:28.540
找到li之前的

21:28.540 --> 21:29.540
6li对吧

21:29.540 --> 21:30.540
我们创建的

21:30.540 --> 21:32.540
6li找到它

21:32.540 --> 21:33.540
你看它现在在页面上了

21:33.540 --> 21:34.540
对吧

21:34.540 --> 21:35.540
现在在页面上了

21:35.540 --> 21:36.540
当然

21:36.540 --> 21:37.540
它不在页面上

21:37.540 --> 21:39.540
我们能不能往里面加文本

21:39.540 --> 21:40.540
是不是还是可以

21:40.540 --> 21:41.540
把那结构加出来

21:41.540 --> 21:42.540
最后往页面上加

21:42.540 --> 21:43.540
都行

21:43.540 --> 21:44.540
它不一定

21:44.540 --> 21:47.540
它不是说非要在页面上

21:47.540 --> 21:48.540
然后我们使用什么

21:48.540 --> 21:50.540
append child

21:50.540 --> 21:52.540
这里边是不是可以填文本节点

21:52.540 --> 21:54.540
把这个节点加进去

21:54.540 --> 21:55.540
你看是不是多了一个ABC了

21:55.540 --> 21:57.540
它里边就多了一个文本节点了

21:57.540 --> 21:58.540
看一下这个li吧

21:58.540 --> 22:00.540
看这个li

22:00.540 --> 22:01.540
看这里边

22:01.540 --> 22:02.540
是不是有两个文本节点

22:02.540 --> 22:03.540
没问题吧

22:03.540 --> 22:04.540
没问题吧

22:04.540 --> 22:06.540
好 OK

22:06.540 --> 22:08.540
这就完了对不对

22:08.540 --> 22:09.540
所以说这里

22:09.540 --> 22:10.540
其实还可以做什么

22:10.540 --> 22:11.540
还可以创建注释

22:11.540 --> 22:12.540
了解就行了

22:12.540 --> 22:13.540
平时我们不会这样子干的

22:13.540 --> 22:15.540
然后create什么

22:15.540 --> 22:16.540
comment

22:16.540 --> 22:17.540
创建一个注释节点

22:17.540 --> 22:18.540
对吧

22:18.540 --> 22:19.540
这些我们了解一下就行了

22:19.540 --> 22:21.540
这些节点都可以创建的

22:21.540 --> 22:22.540
都是可以创建的

22:22.540 --> 22:24.540
好 这里我要说一个

22:24.540 --> 22:27.540
关于创建文本片段的

22:27.540 --> 22:28.540
是这个

22:28.540 --> 22:30.540
document create

22:30.540 --> 22:31.540
document fragment

22:31.540 --> 22:32.540
我们之前说过

22:32.540 --> 22:36.540
节点类型里边有一个叫做文档片段

22:36.540 --> 22:37.540
我之前还没说这个

22:37.540 --> 22:38.540
但是这个东西也很少用

22:38.540 --> 22:39.540
非常非常少用

22:39.540 --> 22:42.540
所以说了解一下就行了

22:42.540 --> 22:44.540
create

22:44.540 --> 22:45.540
create这个

22:45.540 --> 22:47.540
document

22:47.540 --> 22:51.540
创建文本片段

22:51.540 --> 22:55.430
这是创建文本片段

22:55.430 --> 22:56.430
不是文本片段

22:56.430 --> 22:59.430
创建文档片段

22:59.430 --> 23:00.430
什么意思呢

23:00.430 --> 23:02.430
我举个例子

23:02.430 --> 23:03.430
比方说

23:03.430 --> 23:06.430
咱们要创建多个li

23:06.430 --> 23:07.430
创建三个li

23:07.430 --> 23:10.430
然后添加进去

23:10.430 --> 23:11.430
可以有什么样的操作呢

23:11.430 --> 23:12.430
我们可以这样子来写

23:12.430 --> 23:13.430
我就在这里写

23:15.430 --> 23:16.430
因为这种比较少见

23:16.430 --> 23:17.430
我把记录来说

23:17.430 --> 23:18.430
像常见的话

23:18.430 --> 23:20.430
我们就直接写了

23:20.430 --> 23:21.430
这里我们比方说

23:21.430 --> 23:24.430
创建三个li

23:24.430 --> 23:27.430
假设我们循环三次

23:28.430 --> 23:31.430
创建十个

23:31.430 --> 23:33.430
创建100个

23:35.430 --> 23:36.430
创建100个li

23:36.430 --> 23:37.430
从一开始循环

23:37.430 --> 23:39.430
小于等于100

23:39.430 --> 23:40.430
每次循环干嘛呢

23:40.430 --> 23:41.430
每次循环

23:41.430 --> 23:43.430
创建一个li

23:43.430 --> 23:44.430
创建一个li

23:44.430 --> 23:46.430
document

23:46.430 --> 23:48.430
create

23:48.430 --> 23:49.430
endiment

23:49.430 --> 23:50.430
创建一个li

23:50.430 --> 23:52.430
然后给他设置一下内文本

23:52.430 --> 23:53.430
Inner

23:53.430 --> 23:55.430
ATM或者InnerTex都行

23:55.430 --> 23:57.430
然后给他写上一个中文

23:57.430 --> 23:59.430
选项

23:59.430 --> 24:00.430
选项多少呢

24:00.430 --> 24:03.430
选项拼接下li

24:03.430 --> 24:05.430
然后把li加到哪里去

24:05.430 --> 24:07.430
加到ULE里边去

24:07.430 --> 24:08.430
Append

24:08.430 --> 24:09.430
我再说一次

24:09.430 --> 24:10.430
不要这样子用

24:10.430 --> 24:12.430
算了我不给你们错误示范

24:12.430 --> 24:13.430
不给你们错误示范

24:13.430 --> 24:14.430
ULE

24:14.430 --> 24:16.430
应该用这种方式

24:16.430 --> 24:18.430
ULE

24:19.430 --> 24:21.430
那么把它加到ULE里边去

24:21.430 --> 24:23.430
Append Child

24:23.430 --> 24:24.430
加这个li

24:24.430 --> 24:25.430
对不对

24:25.430 --> 24:26.430
加这个li

24:26.430 --> 24:27.430
好咱们来看一下

24:27.430 --> 24:28.430
保存

24:28.430 --> 24:30.430
运行出来

24:30.430 --> 24:32.430
你看是不是里边加了100个选项了

24:32.430 --> 24:34.430
但这样做好不好了

24:34.430 --> 24:36.430
这样做实际上是不好的

24:36.430 --> 24:37.430
为什么不好

24:37.430 --> 24:40.870
更改元素结构

24:40.870 --> 24:41.870
效率较低

24:41.870 --> 24:43.870
尽量少用

24:43.870 --> 24:46.870
大家能不能理解什么叫少用

24:46.870 --> 24:48.870
少更改一点

24:48.870 --> 24:49.870
少更改一点

24:49.870 --> 24:50.870
你看一下

24:50.870 --> 24:52.870
这一下子你加了多

24:52.870 --> 24:53.870
更改的多好吃

24:53.870 --> 24:54.870
更改了100次

24:54.870 --> 24:56.870
如果页面比较丰富的话

24:56.870 --> 24:58.870
里边还有很多的其他元素

24:58.870 --> 24:59.870
每更改一次

24:59.870 --> 25:00.870
其他元素都要重新排列

25:00.870 --> 25:02.870
每更改一次重新排列

25:02.870 --> 25:04.870
你这样做实际上是不好的

25:04.870 --> 25:05.870
每更改一次

25:05.870 --> 25:06.870
它的页面元素都要重新排列

25:06.870 --> 25:07.870
都要重新渲染

25:07.870 --> 25:10.870
你这样子相当于导致页面上渲染了100次

25:10.870 --> 25:12.870
这样子效率是比较低的

25:12.870 --> 25:14.870
那么更好的办法是什么呢

25:14.870 --> 25:16.870
咱们先把这些元素创建好

25:16.870 --> 25:18.870
保存到一个地方

25:18.870 --> 25:20.870
一会一起把它加入到

25:20.870 --> 25:21.870
里边去

25:21.870 --> 25:22.870
比方说100项

25:22.870 --> 25:24.870
咱们把100项装到一个地方

25:24.870 --> 25:27.870
一会一起整体上加过去

25:27.870 --> 25:28.870
那么只更改一次

25:28.870 --> 25:30.870
一次把它更改全部完成

25:30.870 --> 25:31.870
而不要等到

25:31.870 --> 25:32.870
不是每一次更改一点

25:32.870 --> 25:33.870
每次更改一点

25:33.870 --> 25:34.870
那么现在我就是每次更改一点

25:34.870 --> 25:36.870
每次给它加一个

25:36.870 --> 25:37.870
那么这个时候

25:37.870 --> 25:38.870
为了更高的效率

25:38.870 --> 25:40.870
我们可以用这种文档片段

25:40.870 --> 25:42.870
文档片段不是一个元素

25:42.870 --> 25:43.870
它不是一个元素

25:43.870 --> 25:44.870
它只是片段

25:44.870 --> 25:45.870
这个片段

25:45.870 --> 25:46.870
只有在创建元素的时候

25:46.870 --> 25:47.870
才有点用

25:47.870 --> 25:48.870
其他的时候

25:48.870 --> 25:49.870
我们都获取不到

25:49.870 --> 25:50.870
他都获取不到他

25:50.870 --> 25:51.870
这个意思吧

25:51.870 --> 25:52.870
他只有在创建元素的时候

25:52.870 --> 25:53.870
才有点用

25:53.870 --> 25:54.870
咱们呢

25:55.870 --> 25:57.870
fragment

25:57.870 --> 25:58.870
fragment是什么意思

25:58.870 --> 25:59.870
就是片段

25:59.870 --> 26:00.870
片段frag嘛

26:00.870 --> 26:01.870
然后我们这里

26:01.870 --> 26:03.870
创建一个文档片段

26:03.870 --> 26:06.870
create document fragment

26:06.870 --> 26:07.870
创建一个片段

26:07.870 --> 26:08.870
它没有参数

26:08.870 --> 26:09.870
直接创建就行了

26:09.870 --> 26:10.870
你可以把它当

26:10.870 --> 26:11.870
它也是个节点

26:11.870 --> 26:13.870
我们之前介绍过

26:13.870 --> 26:14.870
它也是一个节点

26:14.870 --> 26:15.870
它节点比较特殊而已

26:15.870 --> 26:17.870
它里边不表现任何内容

26:17.870 --> 26:18.870
它只是一个容器

26:18.870 --> 26:19.870
你可以把它想

26:19.870 --> 26:20.870
成一个没有名字的div

26:20.870 --> 26:22.870
一个没有名字的容器

26:22.870 --> 26:24.870
然后你干嘛呢

26:24.870 --> 26:25.870
你每次创建的li

26:25.870 --> 26:27.870
你把它加到这里边去

26:27.870 --> 26:28.870
它既然是个容器

26:28.870 --> 26:29.870
它是不是也有这些东西

26:29.870 --> 26:30.870
对吧

26:30.870 --> 26:31.870
也有这些东西

26:31.870 --> 26:32.870
把加进去

26:32.870 --> 26:34.870
每一次的li把加进去

26:34.870 --> 26:35.870
好 加进去过后

26:35.870 --> 26:36.870
现在页面它能看到吗

26:36.870 --> 26:37.870
看不见

26:37.870 --> 26:38.870
它在内存里边

26:38.870 --> 26:40.870
它并没有在页面上

26:40.870 --> 26:41.870
它在内存里边

26:41.870 --> 26:42.870
跟这个li是一样的

26:42.870 --> 26:43.870
创建过后

26:43.870 --> 26:44.870
只在内存里边

26:44.870 --> 26:45.870
然后最后

26:45.870 --> 26:47.870
一起把这个片段

26:47.870 --> 26:49.870
加到EOL里边去

26:49.870 --> 26:50.870
而Panel Child

26:50.870 --> 26:51.870
Frag

26:51.870 --> 26:53.870
一起加过去

26:53.870 --> 26:54.870
看一下

26:54.870 --> 26:56.870
所以现在就可以了

26:56.870 --> 26:57.870
现在的效果

26:57.870 --> 26:58.870
跟之前一样

26:58.870 --> 26:59.870
但是现在的效果

26:59.870 --> 27:01.870
它的好处在于什么呢

27:01.870 --> 27:02.870
它是我是把这一坨

27:02.870 --> 27:04.870
全部放到一个文档片段里边

27:04.870 --> 27:05.870
一起添加的

27:05.870 --> 27:06.870
那么这样子

27:06.870 --> 27:07.870
改变整个文档结构

27:07.870 --> 27:09.870
只改变了一次

27:09.870 --> 27:11.870
那么有哪些处理一次完成

27:11.870 --> 27:12.870
不要每一次加一点

27:12.870 --> 27:13.870
每一次加一点

27:13.870 --> 27:14.870
这样子影响效率

27:14.870 --> 27:15.870
它就这么一点用

27:15.870 --> 27:16.870
其他的也没啥用

27:17.870 --> 27:19.870
这是关于创建文档片段

27:19.870 --> 27:20.870
那么创建注释哪些

27:20.870 --> 27:21.870
就不扯淡了

27:21.870 --> 27:22.870
简直是扯淡的

27:22.870 --> 27:23.870
没啥用

27:23.870 --> 27:25.870
这是创建元素

27:25.870 --> 27:26.870
有的时候

27:26.870 --> 27:28.870
我们不仅仅是要创建元素

27:28.870 --> 27:29.870
我们可能要根据

27:29.870 --> 27:31.870
其他元素复制元素

27:31.870 --> 27:35.180
这里说一下复制元素

27:35.180 --> 27:36.180
创建元素

27:36.180 --> 27:37.180
这里我想想

27:37.180 --> 27:38.180
还有啥了

27:38.180 --> 27:40.180
就没啥了

27:40.180 --> 27:41.180
真的没啥了

27:41.180 --> 27:43.180
来看一下另外一个

27:43.180 --> 27:44.180
复制元素

27:44.180 --> 27:47.180
也叫克龙元素

27:48.180 --> 27:49.180
就比方说

27:49.180 --> 27:51.180
我们拿第一个例子

27:51.180 --> 27:53.180
第一个例子

27:53.180 --> 27:54.180
来说明

27:54.180 --> 27:55.180
比方说

27:55.180 --> 27:56.180
我要把这个1-4

27:56.180 --> 27:58.180
加到这个元素的莫为

27:58.180 --> 28:00.180
但是

28:00.180 --> 28:01.180
我不是说

28:01.180 --> 28:02.180
把这个东西

28:02.180 --> 28:04.180
这个东西不能消失

28:04.180 --> 28:06.180
不能消失直接加过来

28:06.180 --> 28:07.180
不能消失直接加过来

28:07.180 --> 28:08.180
那怎么办

28:08.180 --> 28:09.180
看着

28:09.180 --> 28:10.180
我们可以用这种方式

28:10.180 --> 28:12.180
用笨办法

28:12.180 --> 28:15.180
我们可以用这种笨办法来做

28:15.180 --> 28:16.180
看一下这个页面

28:16.180 --> 28:17.180
一个UL1

28:17.180 --> 28:18.180
一个UL2

28:18.180 --> 28:19.180
笨办法就是

28:19.180 --> 28:20.180
把这个1-4

28:20.180 --> 28:21.180
先得到对吧

28:21.180 --> 28:23.180
Var1-4

28:23.180 --> 28:24.180
先得到

28:24.180 --> 28:25.180
来呗

28:25.180 --> 28:26.180
我们之前写过了

28:26.180 --> 28:27.180
代码直接

28:27.180 --> 28:28.180
放过来

28:28.180 --> 28:29.180
这个1-4

28:29.180 --> 28:30.180
是不是得到了

28:30.180 --> 28:31.180
接下来

28:31.180 --> 28:32.180
我们来创建一个新的Li

28:32.180 --> 28:33.180
Document

28:33.180 --> 28:34.180
Create

28:34.180 --> 28:35.180
Element

28:35.180 --> 28:36.180
然后Li

28:36.180 --> 28:38.180
创建一个新的

28:38.180 --> 28:40.180
然后新的Li的内容

28:40.180 --> 28:42.180
等于Li1-4的内容

28:42.180 --> 28:43.180
这样子写

28:43.180 --> 28:44.180
新的Li的内容

28:45.180 --> 28:48.180
等于Li1-4的内容

28:48.180 --> 28:49.180
对吧

28:49.180 --> 28:50.180
还有如果有属性的话

28:50.180 --> 28:52.180
再把属性复制过去

28:52.180 --> 28:53.180
如果有央视的话

28:53.180 --> 28:54.180
再把央视复制过去

28:54.180 --> 28:55.180
那么新的Li

28:55.180 --> 28:56.180
是不是出来了

28:56.180 --> 28:57.180
再把这个新的Li

28:57.180 --> 28:59.180
夹到UL2里面去

28:59.180 --> 29:00.180
而喷的Chill

29:01.180 --> 29:03.180
把这个新的Li夹进去

29:03.180 --> 29:04.180
你看一下

29:04.180 --> 29:05.180
现在是不是可以完成功能

29:05.180 --> 29:07.180
但是这样做好吗

29:07.180 --> 29:08.180
实际上不是很好

29:08.180 --> 29:10.180
很麻烦

29:10.180 --> 29:11.180
那如果你想象一下

29:11.180 --> 29:13.180
这个Li里面还有A元素

29:13.180 --> 29:15.180
A元素还有样式

29:15.180 --> 29:16.180
A元素里边

29:16.180 --> 29:17.180
还有一些东西

29:17.180 --> 29:18.180
这个Li本身

29:18.180 --> 29:19.180
还有各种各样的

29:19.180 --> 29:20.180
就是属性

29:20.180 --> 29:22.180
那这样子是不是很麻烦

29:22.180 --> 29:23.180
要I在那来

29:23.180 --> 29:24.180
I在那来

29:24.180 --> 29:25.180
虽然Intel AT面

29:25.180 --> 29:26.180
可以把它内容全部弄过去

29:26.180 --> 29:27.180
但是

29:27.180 --> 29:28.180
怎么说

29:28.180 --> 29:29.180
它如果它有自身

29:29.180 --> 29:30.180
还有属性的话

29:30.180 --> 29:31.180
它自身还有属性的话

29:31.180 --> 29:32.180
你是不是还要复制属性

29:32.180 --> 29:34.180
把属性一个个复制过去

29:34.180 --> 29:36.180
是不是很麻烦

29:36.180 --> 29:37.180
因此这种

29:37.180 --> 29:38.180
不是一种很好的方式

29:38.180 --> 29:40.180
我们的目标是把它

29:40.180 --> 29:41.180
把这个Li

29:41.180 --> 29:42.180
连锋不动的

29:42.180 --> 29:44.180
拷贝一下

29:44.180 --> 29:45.180
复制粘贴过来

29:45.180 --> 29:47.180
那么我介绍一种更好的方式

29:47.180 --> 29:49.180
叫做克浓

29:49.180 --> 29:51.180
克浓很简单

29:51.180 --> 29:52.180
就是多么对象

29:52.180 --> 29:54.180
贼简单简单不得了

29:54.180 --> 29:55.180
就是克浓

29:55.180 --> 29:56.180
克浓就是漏的

29:56.180 --> 29:58.180
就是克浓的意思

29:58.180 --> 29:59.180
漏的

30:01.180 --> 30:02.180
这里面

30:02.180 --> 30:03.180
传一个参数

30:03.180 --> 30:04.180
是否

30:04.180 --> 30:06.180
深度克浓

30:06.180 --> 30:08.180
是否是深度克浓

30:08.180 --> 30:10.180
比方说

30:10.180 --> 30:12.180
我们这里把它写上一下

30:12.180 --> 30:13.180
就是

30:13.180 --> 30:17.180
复制一个新的多么对象

30:17.180 --> 30:19.180
复制一个新的多么对象

30:19.180 --> 30:20.180
它返回的结果是什么

30:20.180 --> 30:21.180
返回的结果就是

30:21.180 --> 30:23.180
新的多么对象

30:23.180 --> 30:25.180
并返回

30:25.180 --> 30:26.180
这个函数

30:26.180 --> 30:28.180
它返回的是一个新的多么对象

30:28.180 --> 30:29.180
咱们再来

30:29.180 --> 30:31.180
Li

30:31.180 --> 30:32.180
Li

30:32.180 --> 30:33.180
1-4

30:33.180 --> 30:35.180
拿到Li1-4

30:35.180 --> 30:37.180
现在我不去创建了

30:37.180 --> 30:38.180
不去手动创建了

30:38.180 --> 30:39.180
让它自动帮我们创建

30:39.180 --> 30:42.180
就是使用Clone node

30:42.180 --> 30:43.180
这里有个参数

30:43.180 --> 30:44.180
这个参数如果不甜

30:44.180 --> 30:47.180
如果你不甜的话会怎么样呢

30:47.180 --> 30:49.180
产生一个新的Li

30:49.180 --> 30:50.180
克浓一个

30:50.180 --> 30:52.180
复制一个一模一样的

30:52.180 --> 30:54.180
根据它来复制一个一模一样的

30:54.180 --> 30:56.180
如果你这个参数不甜的话

30:56.180 --> 30:58.180
它是浅表克浓

30:58.180 --> 30:59.180
浅度克浓

30:59.180 --> 31:00.180
这个克浓是什么

31:00.180 --> 31:02.180
克浓只有它自身的属性

31:02.180 --> 31:03.180
它自身没有属性

31:03.180 --> 31:05.180
如果它自身有属性的话

31:05.180 --> 31:07.180
比方说有什么样式的话

31:07.180 --> 31:08.180
有什么class

31:09.180 --> 31:10.180
style

31:10.180 --> 31:12.180
或者是一些自定义属性的话

31:12.180 --> 31:13.180
如果有这些属性的话

31:13.180 --> 31:15.180
它会一起被克浓过来

31:15.180 --> 31:17.180
但它的内部不会克浓的

31:17.180 --> 31:18.180
内部是不会克浓的

31:18.180 --> 31:19.180
比方说

31:19.180 --> 31:20.180
我们该写上一些自定义属性

31:20.180 --> 31:21.180
abc

31:21.180 --> 31:22.180
123

31:22.180 --> 31:24.180
比方说写个样式

31:24.180 --> 31:26.180
red

31:26.180 --> 31:28.180
我们来写个样式

31:31.180 --> 31:32.180
red

31:32.180 --> 31:33.180
color

31:33.180 --> 31:34.180
red

31:34.180 --> 31:35.180
红色

31:35.180 --> 31:36.180
看一下

31:36.180 --> 31:38.180
再来克浓一次

31:40.180 --> 31:42.180
按光标上下

31:42.180 --> 31:43.180
可以得到之前的代码

31:43.180 --> 31:44.180
克浓一次

31:44.180 --> 31:45.180
6li

31:45.180 --> 31:46.180
看一下

31:46.180 --> 31:47.180
是吧

31:47.180 --> 31:48.180
这个东西是不是全部过来了

31:48.180 --> 31:49.180
但它内部不会克浓的

31:49.180 --> 31:51.180
内部是不管的

31:51.180 --> 31:53.180
如果你传一个参数

31:53.180 --> 31:54.180
传了一个q

31:54.180 --> 31:55.180
表示深度克浓

31:55.180 --> 31:56.180
深度克浓

31:56.180 --> 31:57.180
就是它内部的所有东西

31:57.180 --> 31:59.180
全部要一起克浓过来

31:59.180 --> 32:00.180
看一下

32:00.180 --> 32:01.180
传了一个参数出过后

32:01.180 --> 32:03.180
你看是不是全部克浓过来了

32:03.180 --> 32:04.180
注意哦

32:04.180 --> 32:05.180
这两个能不能

32:05.180 --> 32:06.180
是不是相等的

32:06.180 --> 32:08.180
是不是相等的

32:08.180 --> 32:09.180
你不要搞笑啊

32:09.180 --> 32:10.180
你不要搞笑

32:10.180 --> 32:11.180
这是两个对象

32:11.180 --> 32:12.180
一个是新对象

32:12.180 --> 32:13.180
一个是之前的对象

32:13.180 --> 32:14.180
地址都不一样

32:14.180 --> 32:15.180
怎么可能相等的

32:15.180 --> 32:16.180
两个不是一个对象

32:16.180 --> 32:17.180
所以说

32:17.180 --> 32:19.180
你一会儿把它加进去的时候

32:19.180 --> 32:20.180
不会影响它

32:20.180 --> 32:21.180
因为他们不是同一个对象

32:21.180 --> 32:22.180
所以说UL2

32:22.180 --> 32:23.180
Append

32:23.180 --> 32:24.180
child

32:24.180 --> 32:25.180
然后呢

32:25.180 --> 32:26.180
6li

32:26.180 --> 32:27.180
你看

32:27.180 --> 32:29.180
是不是完全克浓过去了

32:29.180 --> 32:30.180
没问题吧

32:30.180 --> 32:31.180
这就是克浓

32:31.180 --> 32:32.180
这就是两种

32:32.180 --> 32:33.180
创建

32:33.180 --> 32:35.180
创建新对象的方式

32:36.180 --> 32:37.180
没问题吧

32:38.180 --> 32:39.180
我想想还有啥呢

32:39.180 --> 32:40.180
想想还有啥

32:42.180 --> 32:43.180
这里再补充一下

32:43.180 --> 32:44.180
这个吧

32:44.180 --> 32:46.180
就是关于十十集合

32:46.180 --> 32:47.180
十十集合

32:47.180 --> 32:48.180
我们之前说过这个问题

32:48.180 --> 32:49.180
就是说

32:49.180 --> 32:51.180
之前说过是什么呢

32:51.180 --> 32:53.180
document

32:53.180 --> 32:55.180
就是get

32:55.180 --> 32:56.180
get

32:56.180 --> 32:57.180
animate

32:57.180 --> 32:58.180
by

32:58.180 --> 32:59.180
tag name

32:59.180 --> 33:00.180
还有什么

33:00.180 --> 33:01.180
get

33:01.180 --> 33:02.180
animate

33:02.180 --> 33:03.180
by

33:03.180 --> 33:04.180
什么

33:04.180 --> 33:05.180
那个

33:05.180 --> 33:07.180
看一下之前说的是啥

33:09.180 --> 33:11.180
十十集合

33:11.180 --> 33:12.180
在这里

33:14.180 --> 33:17.880
就这个地方

33:18.880 --> 33:19.880
get

33:19.880 --> 33:20.880
看一下

33:21.880 --> 33:22.880
tag name

33:22.880 --> 33:25.640
这里

33:25.640 --> 33:26.640
除了这个东西之外

33:26.640 --> 33:28.640
其他的都是十是更新的

33:28.640 --> 33:29.640
十是更新的

33:29.640 --> 33:30.640
我们说过这个问题

33:30.640 --> 33:31.640
我在这里不一一说了

33:31.640 --> 33:33.640
其中

33:33.640 --> 33:34.640
load

33:34.640 --> 33:36.640
就是child load

33:36.640 --> 33:38.640
上几颗的东西

33:38.640 --> 33:39.640
忘了讲了

33:39.640 --> 33:40.640
child load

33:40.640 --> 33:42.640
也是十是集合

33:42.640 --> 33:43.640
也是十是的

33:43.640 --> 33:44.640
就是你改变了

33:44.640 --> 33:45.640
这个内容结构过后

33:45.640 --> 33:46.640
它也会变化

33:46.640 --> 33:47.640
它也会变化

33:47.640 --> 33:48.640
咱们来看一下

33:50.640 --> 33:51.640
我们这里

33:52.640 --> 33:54.640
刚才做了一个这么一个东西

33:56.640 --> 33:58.640
然后把它克浓

33:58.640 --> 33:59.640
克浓看着

33:59.640 --> 34:01.640
我们首先获取到load

34:01.640 --> 34:03.640
获取到ul2下边的

34:03.640 --> 34:04.640
不用获取

34:04.640 --> 34:05.640
不用获取

34:05.640 --> 34:07.640
然后看一下ul2下边的

34:07.640 --> 34:09.640
child load

34:09.640 --> 34:10.640
看一下

34:10.640 --> 34:11.640
目前是11个

34:12.640 --> 34:13.640
目前是11个

34:13.640 --> 34:14.640
我们就看这个

34:14.640 --> 34:15.640
因为它有文本节点

34:15.640 --> 34:17.640
看这个elements

34:17.640 --> 34:18.640
elements

34:18.640 --> 34:19.640
child

34:20.640 --> 34:21.640
看一下有5个对吧

34:21.640 --> 34:22.640
有5个li

34:22.640 --> 34:23.640
然后我们给它加一个

34:23.640 --> 34:24.640
加一个

34:26.640 --> 34:27.640
nu

34:27.640 --> 34:28.640
nuli

34:28.640 --> 34:29.640
li14

34:29.640 --> 34:30.640
克浓

34:30.640 --> 34:31.640
克浓

34:32.640 --> 34:34.640
然后把这个nuli加进去

34:35.640 --> 34:36.640
nuli加进去

34:36.640 --> 34:37.640
ul2

34:37.640 --> 34:38.640
append

34:38.640 --> 34:39.640
child

34:39.640 --> 34:40.640
加进去

34:41.640 --> 34:43.640
nuli

34:43.640 --> 34:44.640
加进去

34:44.640 --> 34:45.640
好 加进去过后

34:45.640 --> 34:47.640
然后我们再看ul2的child

34:48.640 --> 34:49.640
你看看

34:49.640 --> 34:50.640
是不是6个了

34:50.640 --> 34:51.640
这个没啥好说的

34:51.640 --> 34:52.640
它是实时的

34:52.640 --> 34:53.640
就说一下这个

34:54.640 --> 34:55.640
好 OK

34:55.640 --> 34:56.640
这是创建元素

34:56.640 --> 34:57.640
创建元素

34:57.640 --> 34:59.640
它有直接创建和克浓

35:00.640 --> 35:01.640
和克浓

35:01.640 --> 35:02.640
这两个都可以

35:03.640 --> 35:04.640
这是关于实时机合

35:04.640 --> 35:05.640
我这顺便补充一下

35:05.640 --> 35:06.640
补充一下

35:06.640 --> 35:09.910
OK

35:09.910 --> 35:12.740
补充一下

35:12.740 --> 35:14.740
然后还有一个删除元素

35:14.740 --> 35:15.740
删除元素

35:15.740 --> 35:17.740
删除元素 这简单

35:18.740 --> 35:19.740
删除元素

35:19.740 --> 35:20.740
我觉得成功了

35:20.740 --> 35:22.740
成功了非常非常形象

35:22.740 --> 35:23.740
一个是谋杀

35:23.740 --> 35:24.740
一个是自杀

35:24.740 --> 35:25.740
什么叫谋杀呢

35:25.740 --> 35:26.740
就是别人把它

35:26.740 --> 35:27.740
它的副元素

35:27.740 --> 35:28.740
把它掐死了

35:29.740 --> 35:30.740
就是谋杀

35:30.740 --> 35:31.740
一种是自杀

35:31.740 --> 35:32.740
就自己死了

35:32.740 --> 35:33.740
就是自杀

35:34.740 --> 35:35.740
谋杀它使用

35:35.740 --> 35:36.740
就叫做

35:37.740 --> 35:38.740
child

35:38.740 --> 35:40.740
它是副元素调用的

35:40.740 --> 35:42.740
副元素调用

35:42.740 --> 35:44.740
副元素调用

35:46.740 --> 35:48.740
传入指元素

35:48.740 --> 35:49.740
传入一个指元素

35:49.740 --> 35:50.740
把它谋杀掉

35:50.740 --> 35:51.740
比方说

35:51.740 --> 35:53.740
这个li14又来了

35:53.740 --> 35:54.740
又来了

35:56.740 --> 35:57.740
li14

35:58.740 --> 35:59.740
拿到

35:59.740 --> 36:01.740
拿到这个li14过后

36:01.740 --> 36:02.740
li14过后

36:02.740 --> 36:04.740
然后我要把它删掉

36:04.740 --> 36:05.740
要把它删除掉

36:05.740 --> 36:06.740
不要了

36:06.740 --> 36:07.740
怎么删呢

36:07.740 --> 36:09.740
找了它的副元素ULE

36:10.740 --> 36:11.740
谋杀掉了

36:11.740 --> 36:13.740
remove child

36:14.740 --> 36:17.740
然后把li14传进去

36:17.740 --> 36:19.740
你看什么谋杀了

36:19.740 --> 36:21.740
并且你还可以看到

36:21.740 --> 36:24.740
它这个函数它反回来仍然是一个对象

36:24.740 --> 36:26.740
不是说谋杀了过后

36:26.740 --> 36:27.740
对象不存在

36:27.740 --> 36:28.740
对象还是存在

36:28.740 --> 36:30.740
只是在页面结构上没了

36:30.740 --> 36:31.740
我们再来看一次

36:32.740 --> 36:33.740
li14

36:33.740 --> 36:35.740
然后ULE

36:35.740 --> 36:37.740
remove child

36:37.740 --> 36:39.740
把li14移除掉

36:39.740 --> 36:40.740
移除掉过后

36:40.740 --> 36:41.740
我们来看一下

36:41.740 --> 36:42.740
页面上没有了

36:42.740 --> 36:44.740
那看一下li14还在不在

36:44.740 --> 36:45.740
是不是还在

36:45.740 --> 36:46.740
这对象是在的

36:46.740 --> 36:48.740
你当你觉得合适的时候

36:48.740 --> 36:50.740
你完全可以把它加回去

36:50.740 --> 36:51.740
比方说你把移除掉

36:51.740 --> 36:52.740
改了一些东西

36:52.740 --> 36:53.740
把它加回去

36:53.740 --> 36:54.740
改了一些东西

36:54.740 --> 36:55.740
比方说li14

36:55.740 --> 36:56.740
inner HTML

36:56.740 --> 36:57.740
改了

36:57.740 --> 36:58.740
改

36:58.740 --> 36:59.740
随便改

36:59.740 --> 37:00.740
改了东西

37:00.740 --> 37:01.740
我也可以把它加回去

37:01.740 --> 37:02.740
而喷的

37:02.740 --> 37:03.740
对象是在的

37:03.740 --> 37:04.740
对象在内存里边

37:04.740 --> 37:05.740
它不会消失的

37:05.740 --> 37:06.740
因为你还有引用

37:06.740 --> 37:07.740
我们之前说过

37:07.740 --> 37:09.740
对象什么时候消失

37:09.740 --> 37:10.740
对象是啥时候消失

37:10.740 --> 37:12.740
是你现在找不到对象了

37:12.740 --> 37:13.740
通过任何一个辩量

37:13.740 --> 37:14.740
都找不到对象了

37:14.740 --> 37:16.740
对象才会成内存里边

37:16.740 --> 37:17.740
成为垃圾

37:17.740 --> 37:18.740
一个垃圾回收器

37:18.740 --> 37:19.740
会把它移除掉

37:19.740 --> 37:20.740
我们之前讲过的

37:20.740 --> 37:22.740
那现在还可以找到对象

37:22.740 --> 37:23.740
通过这个辩量

37:23.740 --> 37:24.740
因此对象不会消失的

37:24.740 --> 37:26.740
只是在页面结构上没了

37:26.740 --> 37:28.740
要理解清楚

37:28.740 --> 37:29.740
好都是谋杀

37:29.740 --> 37:31.740
他父亲把他掐死了

37:31.740 --> 37:32.740
然后现在

37:32.740 --> 37:33.740
看另外一个

37:33.740 --> 37:34.740
自杀

37:34.740 --> 37:36.740
remove

37:36.740 --> 37:38.740
把自己删除

37:38.740 --> 37:40.740
自己删除

37:40.740 --> 37:41.740
神无可怜

37:41.740 --> 37:42.740
把自己删除掉

37:42.740 --> 37:43.740
来一次

37:45.740 --> 37:46.740
li14

37:46.740 --> 37:47.740
remove

37:49.740 --> 37:50.740
没了

37:50.740 --> 37:52.740
自己删除掉了

37:52.740 --> 37:53.740
没问题吧

37:53.740 --> 37:54.740
就这么简单

37:54.740 --> 37:56.740
就这么简单

37:56.740 --> 37:57.740
OK

37:57.740 --> 37:59.740
这是关于这里的一些

37:59.740 --> 38:00.740
常见操作

38:00.740 --> 38:02.740
我想想还有啥

38:02.740 --> 38:03.740
还有啥没讲到的

38:03.740 --> 38:05.740
没有讲到的

38:05.740 --> 38:07.740
这里再补充一下这个吧

38:07.740 --> 38:08.740
我之前好像忘了

38:08.740 --> 38:09.740
讲这个东西

38:09.740 --> 38:11.740
这东西平时也没有怎么用

38:11.740 --> 38:12.740
没有怎么用

38:12.740 --> 38:14.740
获取了设置元素属性

38:14.740 --> 38:15.740
这里我再说一个吧

38:15.740 --> 38:16.740
再说一个

38:16.740 --> 38:19.740
就是关于自定义属性的删除

38:21.740 --> 38:23.740
删除自定义属性

38:24.740 --> 38:26.740
删除自定义属性

38:26.740 --> 38:28.740
可识别属性你是不能删的

38:28.740 --> 38:29.740
你怎么删都没用的

38:29.740 --> 38:30.740
你怎么删都没用的

38:30.740 --> 38:32.740
可识别属性它是自带的

38:32.740 --> 38:33.740
自带的

38:33.740 --> 38:34.740
哪怕你不写

38:34.740 --> 38:35.740
它都可以出来

38:35.740 --> 38:36.740
你凭什么能删它

38:36.740 --> 38:37.740
不能删它的

38:37.740 --> 38:38.740
只是删除自定义属性

38:38.740 --> 38:39.740
删除自定义属性

38:39.740 --> 38:40.740
我们可以用这个

38:40.740 --> 38:42.740
remove

38:42.740 --> 38:43.740
删除

38:43.740 --> 38:44.740
itb

38:44.740 --> 38:46.740
这里把属性冥写进去

38:46.740 --> 38:47.740
它就可以删除

38:47.740 --> 38:49.740
删除它的自定义属性

38:49.740 --> 38:50.740
举个例子吧

38:50.740 --> 38:51.740
举个例子

38:51.740 --> 38:53.740
那添加属性没有什么好说的

38:53.740 --> 38:54.740
你直接添加就完事了

38:54.740 --> 38:56.740
比方说还是这个li

38:56.740 --> 38:57.740
li14

38:57.740 --> 38:58.740
加一个自定义属性

38:58.740 --> 38:59.740
加一个自定义属性

38:59.740 --> 39:00.740
加一个自定义属性

39:00.740 --> 39:02.740
看着data set

39:02.740 --> 39:03.740
这样子来加

39:03.740 --> 39:05.740
set attribute

39:05.740 --> 39:06.740
abc

39:06.740 --> 39:07.740
或者data

39:07.740 --> 39:09.740
橫杠abc

39:09.740 --> 39:10.740
123

39:10.740 --> 39:11.740
加一个自定义属性

39:11.740 --> 39:13.740
你看一下这个li

39:13.740 --> 39:15.740
你看是不是有个自定义属性了

39:15.740 --> 39:16.740
添加属性很简单

39:16.740 --> 39:17.740
你直接设置就完事了

39:17.740 --> 39:19.740
时间设置就完事了

39:19.740 --> 39:22.740
然后我们来看一下

39:22.740 --> 39:24.740
怎么来删除

39:24.740 --> 39:27.740
remove attribute

39:27.740 --> 39:30.740
data abc

39:30.740 --> 39:31.740
你看一下

39:31.740 --> 39:32.740
是不是删除了

39:32.740 --> 39:33.740
很简单

39:33.740 --> 39:35.740
remove删除了就完事了

39:35.740 --> 39:37.740
那能不能用data set来进行操作呢

39:37.740 --> 39:41.740
能不能可以的li14

39:41.740 --> 39:42.740
data set

39:42.740 --> 39:43.740
abc

39:43.740 --> 39:44.740
它没有这个属性先

39:44.740 --> 39:45.740
现在对吧

39:45.740 --> 39:46.740
看一下

39:46.740 --> 39:47.740
undefend

39:47.740 --> 39:48.740
没有这个属性

39:48.740 --> 39:49.740
这个东西也可以判断

39:49.740 --> 39:50.740
有没有这个自定属性

39:50.740 --> 39:51.740
哪怕比方说

39:51.740 --> 39:52.740
比方说

39:52.740 --> 39:54.740
我们来看一下这里

39:54.740 --> 39:55.740
元素结构这里

39:55.740 --> 39:59.740
li14

39:59.740 --> 40:01.740
我记得我写了一个样式的

40:01.740 --> 40:02.740
我的样式跑到去了

40:02.740 --> 40:03.740
我在这

40:03.740 --> 40:05.740
要加一个自定属性

40:05.740 --> 40:06.740
abc123

40:06.740 --> 40:07.740
ok 加二的

40:07.740 --> 40:08.740
加二的

40:08.740 --> 40:09.740
刷新词

40:09.740 --> 40:10.740
刷新词

40:10.740 --> 40:12.740
比方说我这样加的属性

40:12.740 --> 40:13.740
这样加的属性

40:13.740 --> 40:14.740
看到没

40:14.740 --> 40:15.740
这样加的

40:15.740 --> 40:16.740
就没有给它复职

40:16.740 --> 40:17.740
好

40:17.740 --> 40:19.740
咱们来看一下li14

40:20.740 --> 40:21.740
li14没有复职

40:21.740 --> 40:22.740
data set

40:22.740 --> 40:23.740
abc

40:23.740 --> 40:24.740
得到的是啥呢

40:24.740 --> 40:25.740
得到的是空置无串

40:25.740 --> 40:27.740
咱们来看一下这个data set

40:27.740 --> 40:28.740
没有给它复职的情况下

40:28.740 --> 40:30.740
得到了的是空置无串

40:30.740 --> 40:31.740
是空置无串

40:31.740 --> 40:32.740
它有这个属性

40:32.740 --> 40:33.740
但是它没有复职而已

40:33.740 --> 40:35.740
没有这个意思吧

40:35.740 --> 40:36.740
没问题吧

40:36.740 --> 40:37.740
就是这样子

40:37.740 --> 40:38.740
好

40:38.740 --> 40:39.740
如果你要把删除怎么办

40:39.740 --> 40:41.740
如果你要删除这个属性怎么办

40:41.740 --> 40:46.580
删除很简单

40:46.580 --> 40:49.580
跟之前你学的对象操作是一样的

40:49.580 --> 40:51.580
怎么来删除对象的属性

40:51.580 --> 40:53.580
data set

40:53.580 --> 40:54.580
abc

40:54.580 --> 40:55.580
你看一下

40:55.580 --> 40:56.580
这样子是不是可以删了

40:56.580 --> 40:57.580
这个属性就删除了

40:57.580 --> 40:58.580
你看

40:58.580 --> 40:59.580
现在就没有这个属性了

40:59.580 --> 41:01.580
所以说更加推荐使用这种方式

41:01.580 --> 41:02.580
使用这种方式

41:02.580 --> 41:05.580
就是使用dnet

41:05.580 --> 41:07.580
就是

41:07.580 --> 41:08.580
元素

41:08.580 --> 41:09.580
就dome

41:09.580 --> 41:10.580
data set

41:10.580 --> 41:12.580
第二属性名

41:12.580 --> 41:14.580
更加建议通过这种方式来删除

41:14.580 --> 41:16.580
没问题吧

41:16.580 --> 41:18.580
这个我们再多讲一句

41:18.580 --> 41:19.580
再多说一句

41:19.580 --> 41:20.580
那如果你的属性

41:20.580 --> 41:21.580
可能是这个样子

41:21.580 --> 41:22.580
abcabcd

41:22.580 --> 41:24.580
你看加了两个横杠

41:24.580 --> 41:26.580
加了两个横杠

41:26.580 --> 41:27.580
我们来看一下

41:27.580 --> 41:28.580
这个东西就是啥

41:28.580 --> 41:29.580
其实像这些东西

41:29.580 --> 41:30.580
我都没有必要去讲那么细

41:30.580 --> 41:32.580
大家自己来测试

41:32.580 --> 41:34.580
不要完全依靠老师

41:34.580 --> 41:36.580
之前有的时候去测试一下

41:36.580 --> 41:38.580
因为这些细节无限度

41:38.580 --> 41:39.580
data set

41:39.580 --> 41:40.580
这样你打印出来

41:40.580 --> 41:41.580
你看一下

41:41.580 --> 41:43.580
你看一下它变成啥了

41:43.580 --> 41:44.580
是不是把横杠去掉了

41:44.580 --> 41:45.580
你下去明白了

41:45.580 --> 41:46.580
对吧

41:46.580 --> 41:47.580
所以说我们知道

41:47.580 --> 41:48.580
属性里边它永远是

41:49.580 --> 41:51.580
哪怕你写的横杠

41:51.580 --> 41:52.580
这种叫做横杠命名法

41:52.580 --> 41:54.580
短横杠命名法

41:54.580 --> 41:56.580
它会把这个短横杠命名法

41:56.580 --> 41:58.580
转换成小坨风命名法

41:58.580 --> 42:00.580
你就用这种属性名字

42:00.580 --> 42:02.580
好那这个属性里边

42:02.580 --> 42:03.580
如果加这些东西

42:03.580 --> 42:04.580
加了一些什么

42:04.580 --> 42:06.580
加了abc123

42:06.580 --> 42:07.580
横杠123

42:07.580 --> 42:08.580
这样子吧

42:08.580 --> 42:09.580
一写前边

42:09.580 --> 42:11.580
一杠abc-1

42:11.580 --> 42:12.580
来看一下这个属性

42:12.580 --> 42:13.580
data set

42:13.580 --> 42:15.580
看没有

42:15.580 --> 42:16.580
得到

42:16.580 --> 42:18.580
看一下这个data set

42:18.580 --> 42:19.580
你自己去测试一下

42:19.580 --> 42:21.580
一下就明白了

42:21.580 --> 42:22.580
那么你会发现

42:22.580 --> 42:24.580
它还是把它变成小坨风命名法

42:24.580 --> 42:26.580
1abc

42:26.580 --> 42:28.580
但是你现在访问怎么访问

42:28.580 --> 42:30.580
全是学过的知识

42:30.580 --> 42:31.580
你现在还能这样的访问吗

42:31.580 --> 42:32.580
abc-1

42:32.580 --> 42:33.580
能不能

42:33.580 --> 42:34.580
这个标识符都不符合国医范

42:34.580 --> 42:35.580
对吧

42:35.580 --> 42:36.580
你不能这样访问的

42:36.580 --> 42:37.580
应该怎么访问

42:37.580 --> 42:38.580
是不是属性表达是

42:38.580 --> 42:39.580
对吧

42:39.580 --> 42:41.580
属性表达是

42:41.580 --> 42:43.580
1abc

42:43.580 --> 42:44.580
这样的访问

42:44.580 --> 42:45.580
没问题吧

42:45.580 --> 42:47.580
这些东西你去测试一下

42:47.580 --> 42:48.580
一下就明白了

42:48.580 --> 42:50.580
还有啥了

42:50.580 --> 42:51.580
没啥了

42:51.580 --> 42:53.580
肯定核心的东西我都讲完了

42:53.580 --> 42:55.580
可能还有一些细致末节的东西

42:55.580 --> 42:56.580
以前讲课的时候

42:56.580 --> 42:57.580
不可能想到那么多

42:57.580 --> 42:58.580
没关系

42:58.580 --> 43:00.580
如果遇到一些细致末节的东西

43:00.580 --> 43:01.580
像我刚才的样子

43:01.580 --> 43:02.580
去测试一下

43:02.580 --> 43:03.580
你肯定能解决

43:03.580 --> 43:04.580
因为大的方向上

43:04.580 --> 43:05.580
已经没问题了

43:05.580 --> 43:06.580
应该是讲完了

43:06.580 --> 43:07.580
好

43:07.580 --> 43:08.580
作业

43:08.580 --> 43:09.580
作业一共有五个

43:09.580 --> 43:11.580
咱们来看一下吧

43:11.580 --> 43:12.580
第一个

43:12.580 --> 43:13.580
删除列表

43:13.580 --> 43:14.580
说明一下

43:14.580 --> 43:15.580
一定要去完成一遍

43:15.580 --> 43:17.580
这里的练习极其重要

43:17.580 --> 43:18.580
什么意思呢

43:18.580 --> 43:19.580
我这里没有效果

43:19.580 --> 43:20.580
只有页面

43:20.580 --> 43:21.580
页面已经做出来了

43:21.580 --> 43:22.580
你把介石写上就完事了

43:22.580 --> 43:24.580
把介石功能加上

43:24.580 --> 43:25.580
看一下

43:25.580 --> 43:26.580
这里我要做什么

43:26.580 --> 43:27.580
点清空

43:27.580 --> 43:28.580
这个UOL里面全部清空

43:28.580 --> 43:29.580
一个都没

43:29.580 --> 43:30.580
全部清空

43:30.580 --> 43:31.580
把这个UOL里面全部清空

43:31.580 --> 43:33.580
这个很简单

43:33.580 --> 43:34.580
很简单

43:34.580 --> 43:35.580
大家可以想象

43:35.580 --> 43:36.580
怎么清空

43:36.580 --> 43:37.580
点删除

43:37.580 --> 43:38.580
就删除这一下

43:38.580 --> 43:39.580
点删除这一下

43:39.580 --> 43:41.580
点删除这一下

43:41.580 --> 43:43.580
再看

43:43.580 --> 43:44.580
再看

43:44.580 --> 43:46.580
下面这个

43:46.580 --> 43:48.580
下面这个

43:48.580 --> 43:51.580
图片切换器

43:51.580 --> 43:52.580
图片切换器

43:52.580 --> 43:53.580
我想想

43:53.580 --> 43:54.580
这一块的话

43:54.580 --> 43:57.580
有没有其他知识

43:57.580 --> 43:58.580
我想一想

43:58.580 --> 44:01.580
这一块会不会遇到其他知识

44:01.580 --> 44:03.580
有可能会遇到其他知识

44:03.580 --> 44:05.580
好 这里说一句

44:05.580 --> 44:06.580
我这里要说一句

44:06.580 --> 44:07.580
不说的话

44:07.580 --> 44:08.580
你可能做这道题的话

44:08.580 --> 44:09.580
会有一些问题

44:09.580 --> 44:10.580
说什么呢

44:10.580 --> 44:11.580
我主要说的是

44:11.580 --> 44:12.580
Z史关键制

44:12.580 --> 44:14.580
这里记录一笔

44:14.580 --> 44:16.580
虽然我们现在还没有讲事件

44:16.580 --> 44:18.580
但是我要做到这道题的话

44:18.580 --> 44:20.580
里面需要知道这个知识

44:20.580 --> 44:23.580
Z史关键制很重要的知识

44:23.580 --> 44:27.580
在事件处理程序中

44:27.580 --> 44:32.500
我们写到这上面

44:32.500 --> 44:33.500
因为这里

44:33.500 --> 44:34.500
我们还没有具体讲事件

44:34.500 --> 44:36.500
因此我这里讲的比较粗略

44:36.500 --> 44:39.500
Z史关键制在事件处理程序中

44:39.500 --> 44:45.500
指代当前发生的事件

44:45.500 --> 44:48.500
发生的事件元

44:51.500 --> 44:53.500
就发生的事件元素

44:53.500 --> 44:55.500
当前发生的事件元素这么个意思

44:55.500 --> 44:59.500
就哪个元素它注册的事件

44:59.500 --> 45:00.500
这个事件元素指的就是

45:00.500 --> 45:02.500
遗忘哪个元素里面注册的事件

45:02.500 --> 45:03.500
举个例子吧

45:03.500 --> 45:04.500
还是这里

45:04.500 --> 45:07.500
比方说我们这里打印出Z史

45:07.500 --> 45:09.500
再打印出Z史是不是等于

45:09.500 --> 45:11.500
等于BTN

45:11.500 --> 45:13.500
再打印出Z史是不是等于BTN

45:13.500 --> 45:15.500
运行看一下

45:15.500 --> 45:18.510
运行看一下

45:18.510 --> 45:19.510
点击

45:19.510 --> 45:20.510
你看是不是ture

45:20.510 --> 45:21.510
对吧

45:21.510 --> 45:22.510
Z史指向的是啥

45:22.510 --> 45:25.510
Z史指向的是这个东西

45:25.510 --> 45:26.510
这个东西

45:26.510 --> 45:28.510
就是你注册的事件元

45:28.510 --> 45:30.510
就是个事件对象

45:30.510 --> 45:31.510
能力些吧

45:31.510 --> 45:32.510
在这个函数里边

45:32.510 --> 45:33.510
因为我们之前说过

45:33.510 --> 45:35.510
Z史它指向谁

45:35.510 --> 45:37.510
取决于你怎么去调用它

45:37.510 --> 45:39.510
那么你可以想象成为

45:39.510 --> 45:41.510
这个函数是谁调用的

45:41.510 --> 45:43.510
是浏览器调用的

45:43.510 --> 45:44.510
浏览器调用这个函数的时候

45:44.510 --> 45:46.510
它就可以绑定了Z史

45:46.510 --> 45:48.510
把Z史绑定成为了这个东西

45:48.510 --> 45:49.510
绑定成为了这个东西

45:49.510 --> 45:50.510
以后我们讲事件的时候

45:50.510 --> 45:51.510
还会详细说

45:51.510 --> 45:53.510
你这里先理解这个东西

45:53.510 --> 45:55.510
在这里边是可以使用Z史

45:55.510 --> 45:57.510
Z史就指向这个元素

45:57.510 --> 45:58.510
以往哪个元素里边注册的事件

45:58.510 --> 46:00.510
Z史就指向谁

46:00.510 --> 46:02.510
这关于这一点

46:02.510 --> 46:03.510
因为这一点的话

46:03.510 --> 46:04.510
对做这道题的话

46:04.510 --> 46:06.510
至关重要

46:06.510 --> 46:07.510
那么我推荐大家

46:07.510 --> 46:09.510
在这个处理程序里边

46:09.510 --> 46:12.510
使用Z史

46:12.510 --> 46:13.510
先推荐大家这么用

46:13.510 --> 46:15.510
你们去做这道题的时候

46:15.510 --> 46:17.510
一定会遇到坑

46:17.510 --> 46:18.510
一定会遇到坑

46:18.510 --> 46:19.510
如果你不用Z史的话

46:19.510 --> 46:20.510
一定会遇到坑

46:20.510 --> 46:21.510
那么我们讲的时候

46:21.510 --> 46:22.510
再具体来讲

46:22.510 --> 46:23.510
好 下一个

46:23.510 --> 46:24.510
图片切换器

46:24.510 --> 46:25.510
这个很简单

46:25.510 --> 46:26.510
这个没有什么坑

46:26.510 --> 46:27.510
就是点下一张

46:27.510 --> 46:28.510
它就切换图片

46:28.510 --> 46:29.510
点上一张就切换图片

46:29.510 --> 46:31.510
一共就五张图片

46:31.510 --> 46:32.510
图片在这

46:32.510 --> 46:33.510
12345

46:33.510 --> 46:34.510
一共就五张图片

46:34.510 --> 46:35.510
点击过就切换

46:35.510 --> 46:37.510
这个没什么好说的

46:37.510 --> 46:39.510
库存变根器

46:39.510 --> 46:40.510
要多想

46:40.510 --> 46:42.510
做这一题的时候

46:42.510 --> 46:44.510
多想一想再动手

46:44.510 --> 46:46.510
库存变根器一开始做起来

46:46.510 --> 46:47.510
肯定很不习惯

46:47.510 --> 46:48.510
正常的

46:48.510 --> 46:49.510
虽然都是很简单的练习

46:49.510 --> 46:50.510
但是很不习惯

46:50.510 --> 46:51.510
正常的

46:51.510 --> 46:52.510
我到时候讲的时候

46:52.510 --> 46:53.510
慢慢给大家

46:53.510 --> 46:54.510
灌输这样的思维

46:54.510 --> 46:56.510
这里点加加1

46:56.510 --> 46:57.510
点减减1

46:57.510 --> 46:58.510
库存最小值为0

46:58.510 --> 46:59.510
不能是附属

46:59.510 --> 47:00.510
减10加10

47:00.510 --> 47:02.510
减100加100

47:02.510 --> 47:03.510
改变这个碗

47:03.510 --> 47:04.510
加1000

47:04.510 --> 47:05.510
减1000

47:05.510 --> 47:06.510
搞定它

47:06.510 --> 47:09.510
然后下边添加列表

47:09.510 --> 47:11.510
添加列表

47:11.510 --> 47:13.510
这个没有坑

47:13.510 --> 47:14.510
这里写东西

47:14.510 --> 47:15.510
写了过后点添加

47:15.510 --> 47:17.510
但是不能添加空的

47:17.510 --> 47:18.510
不能添加空的

47:18.510 --> 47:19.510
我这里说明一下

47:21.510 --> 47:22.510
这里说明一下

47:22.510 --> 47:23.510
这个是

47:24.510 --> 47:29.660
不能添加空的

47:30.660 --> 47:32.660
空的文本

47:32.660 --> 47:33.660
就是你给他提示

47:33.660 --> 47:35.660
如果你他添加了空的文本的话

47:35.660 --> 47:36.660
这样子

47:37.660 --> 47:38.660
找到P元素

47:38.660 --> 47:39.660
设置P元素

47:41.660 --> 47:43.660
央视都给你写好了

47:43.660 --> 47:44.660
总之不能添加空的文本

47:44.660 --> 47:45.660
你可以添加

47:45.660 --> 47:46.660
但是不能添加空的文本

47:46.660 --> 47:47.660
如果添加空的文本的话

47:47.660 --> 47:49.660
你想办法给他提示

47:49.660 --> 47:50.660
看你想什么办法

47:50.660 --> 47:51.660
随便你想怎么办法

47:51.660 --> 47:53.660
你给他提示就完事了

47:54.660 --> 47:55.660
这是这一块

47:56.660 --> 47:57.660
好像一个

47:57.660 --> 47:58.660
穿梭框

47:59.660 --> 48:00.660
穿梭框

48:01.660 --> 48:02.660
看一下

48:02.660 --> 48:03.660
这两边

48:03.660 --> 48:05.660
左右两边是两个下拉列表

48:05.660 --> 48:07.660
下拉列表有一个属性

48:07.660 --> 48:09.660
下拉列表有一个属性叫做

48:09.660 --> 48:10.660
Multiple

48:10.660 --> 48:11.660
Multiple

48:11.660 --> 48:12.660
表示可以多选

48:12.660 --> 48:13.660
Multiple多选的意思

48:14.660 --> 48:15.660
可以多选

48:15.660 --> 48:16.660
安住键盘的Control键

48:16.660 --> 48:17.660
你看可以多选的

48:18.660 --> 48:20.660
安住Shelf键可以

48:20.660 --> 48:21.660
框选

48:21.660 --> 48:22.660
Shelf键安住不动

48:22.660 --> 48:23.660
点一下框选

48:24.660 --> 48:25.660
然后点这边

48:25.660 --> 48:27.660
就是把这个选中的一项移过去

48:27.660 --> 48:28.660
移到这边来

48:28.660 --> 48:29.660
移动到最后一项

48:29.660 --> 48:30.660
点这边移过去

48:31.660 --> 48:32.660
没有这个意思吧

48:32.660 --> 48:33.660
没问题吧

48:34.660 --> 48:36.660
然后这边可以移过来

48:36.660 --> 48:37.660
这边全部移过去

48:37.660 --> 48:39.660
指着他他会告诉你

48:39.660 --> 48:40.660
右移动全部

48:40.660 --> 48:41.660
左移动全部

48:41.660 --> 48:43.660
左移动全中的

48:43.660 --> 48:44.660
搞定这些人

48:44.660 --> 48:45.660
搞定这些题

48:45.660 --> 48:46.660
这些题你做完了之后

48:46.660 --> 48:48.660
虽然是很简单的练习

48:48.660 --> 48:49.660
但是基础部分

48:49.660 --> 48:51.660
核心的东西你又挠到掌握了

48:51.660 --> 48:52.660
当然你可能有些题

48:52.660 --> 48:53.660
肯定是对你来说是有困难

48:53.660 --> 48:54.660
没关系

48:54.660 --> 48:55.660
正常的

48:55.660 --> 48:57.660
刚开始接触

48:57.660 --> 48:58.660
正常的

48:58.660 --> 48:59.660
你做了过后

48:59.660 --> 49:00.660
在我的作业讲剑

49:00.660 --> 49:01.660
我讲剑会告诉你

49:01.660 --> 49:03.660
很清楚用什么样的思路来解决

49:03.660 --> 49:04.660
然后自己再去

49:04.660 --> 49:05.660
再去做一遍

49:05.660 --> 49:07.660
不断的去训练这种东西

49:07.660 --> 49:09.660
像我们初学的时候

49:09.660 --> 49:11.660
要不厌其烦的去做这些练习

49:11.660 --> 49:12.660
你做的越多

49:12.660 --> 49:13.660
你想的越多

49:13.660 --> 49:15.660
就会理解得越深

49:15.660 --> 49:16.660
你就可以越快速的

49:16.660 --> 49:17.660
建立一些程序思维

49:17.660 --> 49:18.660
我告诉你

49:18.660 --> 49:21.660
程序思维一旦建立起来了

49:21.660 --> 49:22.660
真的你学程序

49:22.660 --> 49:23.660
就跟我而已

49:23.660 --> 49:24.660
真的特别特别好玩

49:24.660 --> 49:26.660
比你玩游戏还好玩

49:26.660 --> 49:27.660
你想做什么东西

49:27.660 --> 49:28.660
就可以把它做出来

49:28.660 --> 49:29.660
你总能找到一种合适的方式

49:29.660 --> 49:30.660
把它做出来

49:30.660 --> 49:32.660
一定要建立起程序思维

49:32.660 --> 49:33.660
这个程序思维没办法

49:33.660 --> 49:34.660
只能靠练

49:34.660 --> 49:35.660
好吧

49:35.660 --> 49:37.660
这是关于这一张的作业

49:37.660 --> 49:39.660
下去把它完成

