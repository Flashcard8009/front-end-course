WEBVTT

00:00.430 --> 00:03.030
好 大家好 我是你们的陈老师

00:03.030 --> 00:06.830
那咱这节课讲点跟之前不太一样的东西

00:06.830 --> 00:08.330
为什么说是不太一样呢

00:08.330 --> 00:10.730
因为我们之前在讲课的时候都是教大家

00:10.730 --> 00:13.230
如何以一个正确的姿势去录代码

00:13.230 --> 00:16.230
但是这节课恰恰有点相反

00:16.230 --> 00:18.830
但这个相反也不是说是教大家对吧

00:18.830 --> 00:21.430
去写一些bug 去写一些错误

00:21.430 --> 00:24.330
而是教大家如何去面对这些bug

00:24.330 --> 00:26.030
如何去调试这些bug

00:26.030 --> 00:28.030
如何以一种正确的姿势对吧

00:28.030 --> 00:30.230
来功课这样的bug

00:30.230 --> 00:34.030
那其实我想拿很多这种后面大型项目的例子

00:34.030 --> 00:35.730
拿来去讲 拿来去演示

00:35.730 --> 00:39.430
但是毕竟那种大型的项目逻辑链比较长

00:39.430 --> 00:43.030
我单独抽一块的话 不足以完成整个功能

00:43.030 --> 00:45.130
然后我给你去讲的时候的话

00:45.130 --> 00:47.830
有你不理解整个这样的逻辑链条的话

00:47.830 --> 00:50.530
所以说即使把这个错误调出来了

00:50.530 --> 00:53.330
你也不够舒服 我也不够通透

00:53.330 --> 00:54.230
那怎么办呢

00:54.230 --> 00:57.130
陈老师这个名思苦想想出了一个

00:57.130 --> 00:59.730
你们在前面供应课阶段

00:59.730 --> 01:01.630
经常会遇到的一些小问题

01:01.630 --> 01:03.530
我们拿来去说一说

01:03.530 --> 01:06.230
那在这一块的话

01:06.230 --> 01:09.230
我先把我这样简单的需求给你来描述一下

01:09.230 --> 01:10.430
你先听着

01:10.430 --> 01:12.130
那这个代码的话也不用你写的吧

01:12.130 --> 01:14.230
我已经时间都敲好了

01:14.230 --> 01:16.030
那把这样的需求描述完以后的话

01:16.030 --> 01:18.930
我们再来去看一下这个代码怎么来写的

01:18.930 --> 01:20.330
那我要做什么事呢

01:20.330 --> 01:22.130
就是在这儿有一堆li

01:22.130 --> 01:23.530
我点击某个li的时候

01:23.530 --> 01:26.530
我希望li你们的数字能发生变化

01:26.530 --> 01:27.330
怎么来变

01:27.330 --> 01:31.330
就是它这个数字本身加上它这样的一个自身的索引

01:31.330 --> 01:33.730
自身li在它兄弟中的这样的索引

01:33.730 --> 01:35.730
比如说li它应该是第一个

01:35.730 --> 01:37.230
那它这个索引应该是0

01:37.230 --> 01:38.330
那我希望点完它以后的话

01:38.330 --> 01:39.030
它1加0

01:39.030 --> 01:40.330
它还是1对不对

01:40.330 --> 01:41.130
那这呢

01:41.130 --> 01:42.230
它的索引是1对吧

01:42.230 --> 01:44.130
点完它以后它应该是2加1对吧

01:44.130 --> 01:45.730
那1死了一推

01:45.730 --> 01:46.830
那想做这样的功能的话

01:46.830 --> 01:49.730
你势必要先把这个一堆li获取到

01:49.730 --> 01:51.930
那我通过这种方式获取到

01:51.930 --> 01:52.730
获取完以后的话

01:52.730 --> 01:55.030
需要通通的循环给它进行这样的绑定

01:55.030 --> 01:56.330
绑定的时候

01:56.330 --> 01:58.830
你需要要获取到它这样的一个索引的话

01:58.830 --> 01:59.930
你是不是需要用什么

01:59.930 --> 02:01.930
需要用这种B包的形式谈写

02:01.930 --> 02:02.530
对吧

02:02.530 --> 02:03.030
那好了

02:03.030 --> 02:03.730
在这块的话

02:03.730 --> 02:06.530
通一个B包来给它进行这样的一个绑定

02:06.530 --> 02:07.430
绑定完以后

02:07.430 --> 02:07.830
好了

02:07.830 --> 02:10.030
绑定完以后

02:10.030 --> 02:11.530
那在这一块的话

02:11.530 --> 02:15.130
我让它能去执行一个函数叫update

02:15.130 --> 02:17.330
有时候当每个li被点进完以后的话

02:17.330 --> 02:17.530
好

02:17.530 --> 02:18.730
会执行这个实验处的函数

02:18.730 --> 02:20.430
然后在里面去执行这个update

02:20.430 --> 02:21.430
update一旦执行

02:21.430 --> 02:21.630
好

02:21.630 --> 02:23.730
它要接受两个参数

02:23.730 --> 02:27.630
这样这两个参数分别是这个dump和一个这样的索引

02:27.630 --> 02:29.730
那把它这个dump和索引的话

02:29.730 --> 02:31.130
在这块进行利用

02:31.130 --> 02:34.530
就是把这样你们的余药的文本变成数字再加过来

02:34.530 --> 02:35.330
附与它

02:35.330 --> 02:36.130
附与它

02:36.130 --> 02:36.530
那这样的话

02:36.530 --> 02:39.130
一个基本的功能是不是可以去搞定了

02:39.130 --> 02:40.930
那咱打开这个页面来看一下

02:40.930 --> 02:41.930
可不可以

02:41.930 --> 02:43.330
检查

02:43.330 --> 02:44.130
为何

02:44.130 --> 02:44.930
打开

02:44.930 --> 02:45.530
啊

02:45.530 --> 02:45.730
出来

02:45.730 --> 02:46.330
对吧

02:46.330 --> 02:47.430
那现在呢

02:47.430 --> 02:48.430
我在空台

02:48.430 --> 02:51.330
这给它放放到这

02:51.330 --> 02:53.130
就是我把空台给它先打开一下

02:53.130 --> 02:55.330
然后咱们把这块也扣大一次

02:55.330 --> 02:57.530
然后我点击一个1

02:57.530 --> 02:58.530
点击一个10

02:58.530 --> 02:59.330
你会发现

02:59.330 --> 02:59.930
诶

02:59.930 --> 03:01.730
点击1的时候

03:01.730 --> 03:02.730
没有反应对吧

03:02.730 --> 03:03.530
这是正常的

03:03.530 --> 03:04.130
我点击2的时候

03:04.130 --> 03:04.930
它有反应对不对

03:04.930 --> 03:05.330
点它

03:05.330 --> 03:05.730
有反应

03:05.730 --> 03:06.130
点它

03:06.130 --> 03:06.730
有反应

03:06.730 --> 03:07.930
那现在是一个正常的代码

03:07.930 --> 03:09.030
没问题

03:09.030 --> 03:10.630
但比如说我们在变成功能中的话

03:10.630 --> 03:11.730
可能会经常

03:11.730 --> 03:14.530
就是会出现一些守护的状况

03:14.530 --> 03:15.630
那不在这个帽号这

03:15.630 --> 03:16.530
比如说你就打错了

03:16.530 --> 03:17.930
你打成那个倒号

03:17.930 --> 03:18.930
打成倒号的话

03:18.930 --> 03:20.230
好了

03:20.230 --> 03:23.030
那可能说我们在进行这样的一个变成功能中的话

03:23.130 --> 03:25.430
尤其是你们现在这个阶段

03:25.430 --> 03:28.230
还没有说是进行大量的一个项目开发

03:28.230 --> 03:28.830
完了

03:28.830 --> 03:30.030
针对这种

03:30.030 --> 03:33.830
对键盘的一个感觉的

03:33.830 --> 03:35.330
你对这种键盘的一个感觉

03:35.330 --> 03:36.530
可能也没有那么的好

03:36.530 --> 03:39.230
但你在经常这种模拟老实战的代码

03:39.230 --> 03:40.930
或者说你在自己去编写一些时候的话

03:40.930 --> 03:43.230
难免会出现这种守护的状况

03:43.230 --> 03:45.430
那你就把这样的帽号写成那个倒号了

03:45.430 --> 03:46.630
那咱来看一下

03:46.630 --> 03:48.230
后面功能可能你都写对了

03:48.230 --> 03:49.230
但是现在

03:49.230 --> 03:50.730
确实会出现个错误

03:50.730 --> 03:53.130
那此时出现那个错误你要怎么办呢

03:53.130 --> 03:54.330
你不要慌

03:54.330 --> 03:54.930
你不要慌

03:54.930 --> 03:56.530
不是这个错误穿以后的话

03:56.530 --> 03:57.030
你指定了

03:57.030 --> 03:58.730
比如说你去做这样的一个功能的时候

03:58.730 --> 04:00.030
它是不好使的

04:00.030 --> 04:01.930
是说你要通过右键的方式

04:01.930 --> 04:04.130
先打开这个控制台

04:04.130 --> 04:04.730
打开控制台以后

04:04.730 --> 04:07.130
这块会提现一个这样的错误信息

04:07.130 --> 04:07.930
这个错误信息

04:07.930 --> 04:08.630
你看好了

04:08.630 --> 04:09.930
叫做什么叫做愚法错误

04:09.930 --> 04:10.030
对吧

04:10.030 --> 04:11.030
愚法错误

04:11.030 --> 04:12.030
那愚法错误

04:12.030 --> 04:13.030
它说的是什么

04:13.030 --> 04:13.930
说是这种

04:13.930 --> 04:16.530
什么没有被预料到了一个什么

04:16.530 --> 04:17.530
圆化的

04:17.530 --> 04:19.430
但这种错误信息往往都不是非常准

04:19.430 --> 04:20.230
那怎么办呢

04:20.230 --> 04:22.230
你要根据这个错误的航述

04:22.230 --> 04:24.930
来去找到出错的地方

04:24.930 --> 04:27.230
这个出错的航述还是蛮准的

04:27.230 --> 04:28.530
那定位到你这以后的话

04:28.530 --> 04:28.830
好了

04:28.830 --> 04:30.430
你会发现

04:30.430 --> 04:31.830
你仔细一瞅的话

04:31.830 --> 04:33.230
应该能瞅到哪里

04:33.230 --> 04:33.630
写的不对

04:33.630 --> 04:34.030
对不对

04:34.030 --> 04:35.430
比如说这个斗号有问题

04:35.430 --> 04:35.630
好了

04:35.630 --> 04:37.030
那就给大家分号

04:37.030 --> 04:41.230
现在争动于一种比较简单的一个错误的

04:41.230 --> 04:42.130
这种情况

04:42.130 --> 04:44.630
我们已经给它很好的调试出来了

04:44.630 --> 04:46.230
那这样把它调试完以后

04:46.230 --> 04:46.730
自然而然

04:46.730 --> 04:48.330
你再去重新刷一次的时候

04:48.330 --> 04:49.930
是好使的吧

04:49.930 --> 04:51.930
那这种错误其实很小而可了

04:51.930 --> 04:52.630
对吧

04:52.630 --> 04:54.930
只是你在编程的一个最前期阶段

04:54.930 --> 04:55.930
可能会犯的

04:55.930 --> 04:58.730
然后我们把这个错误稍微升级一点点

04:58.730 --> 04:59.930
怎么来升级呢

04:59.930 --> 05:02.030
比如说一开始这个页面

05:02.030 --> 05:02.930
它没爆错

05:02.930 --> 05:03.830
没爆错

05:03.830 --> 05:05.730
那你以为你写对了

05:05.730 --> 05:06.930
但是现在我刷新一下

05:06.930 --> 05:08.130
你看好了

05:08.130 --> 05:10.730
我在点击某个东西的时候

05:10.730 --> 05:11.030
怎么样

05:11.030 --> 05:11.630
它爆错了

05:11.630 --> 05:12.230
对吧

05:12.230 --> 05:12.930
那爆错以后的话

05:12.930 --> 05:14.430
我们还是要在空台里面

05:14.430 --> 05:16.430
去看一下这个错误的信息

05:16.430 --> 05:17.930
尽量跟你这个错误信息

05:17.930 --> 05:19.930
你先去明确的找到这样的一个错误

05:19.930 --> 05:20.930
是怎么一个事

05:20.930 --> 05:22.230
如果这个错误信息

05:22.230 --> 05:23.630
你看如果这个错误的信息

05:23.630 --> 05:24.730
不是很明确的话

05:24.730 --> 05:26.130
你要怎么办呢

05:26.130 --> 05:28.330
你要根据一有这样的错误信息

05:28.330 --> 05:29.630
沿着你这个逻辑

05:29.630 --> 05:32.130
沿着你这一块逻辑往上去找

05:32.130 --> 05:33.530
看看它有没有错误

05:33.530 --> 05:35.330
看这个往上找的过程中

05:35.330 --> 05:37.930
哪个逻辑链条是有错的

05:37.930 --> 05:39.030
那首先咱看这

05:39.030 --> 05:40.130
这怎么来说呢

05:40.130 --> 05:41.530
这说update

05:41.530 --> 05:41.930
对吧

05:41.930 --> 05:43.330
没有被定义

05:43.330 --> 05:43.930
对吧

05:43.930 --> 05:45.130
没有被定义

05:45.130 --> 05:46.630
那你看一下

05:46.630 --> 05:48.830
这个update没有被定义

05:48.830 --> 05:50.530
这个应该来讲的话

05:50.530 --> 05:52.230
就是你在写的功能中的话

05:52.230 --> 05:56.230
就是你应该一定不会犯这种低级的错误

05:56.230 --> 05:57.430
就是你用一个函数

05:57.430 --> 05:59.030
而不去怎么样

05:59.030 --> 06:01.030
而不去定义一个函数

06:01.030 --> 06:03.830
就说你直接从这一行来看的话

06:03.830 --> 06:05.030
怎么样

06:05.030 --> 06:08.130
你是没有办法去把这个错误给它盖回来了

06:08.130 --> 06:10.330
那你要沿着这个逻辑往上找

06:10.330 --> 06:11.630
既然它告诉你

06:11.630 --> 06:13.430
没有这个函数

06:13.430 --> 06:14.630
那是不是有可能

06:14.730 --> 06:16.230
就是你之前没定义

06:16.230 --> 06:17.230
对吧

06:17.230 --> 06:19.830
但是你却发现你之前真正定义了

06:19.830 --> 06:22.830
那是不是有可能你定义的时候就定义错了

06:22.830 --> 06:24.630
你看在这我写的function

06:24.630 --> 06:25.430
这边怎么样

06:25.430 --> 06:26.630
这个date

06:26.630 --> 06:27.430
写错了对吧

06:27.430 --> 06:28.630
应该写成date提议

06:28.630 --> 06:31.030
写成一个date提议update更新的意思

06:31.030 --> 06:32.130
当你改完它以后的话

06:32.130 --> 06:34.930
我们再来刷新次

06:34.930 --> 06:36.930
我再点击

06:36.930 --> 06:39.830
因为好像还是不好使

06:39.830 --> 06:41.730
那这种情况下的话你就头疼了

06:41.730 --> 06:42.230
对吧

06:42.230 --> 06:43.730
它没有报出错误

06:43.730 --> 06:47.830
但是跟你预想中的这种状态是不一样的

06:47.830 --> 06:48.830
它是不一样的

06:48.830 --> 06:50.730
我把它解开注释

06:50.730 --> 06:54.330
接下来我们难度再稍稍地去升级一下

06:54.330 --> 06:58.630
有时候当你写出了一个跟你预想不一样的一个代码的时候

06:58.630 --> 06:59.530
你要怎么办

06:59.530 --> 06:59.830
对吧

06:59.830 --> 07:00.830
你要怎么办

07:00.830 --> 07:02.330
这时候没有错误信息了

07:02.330 --> 07:02.530
对吧

07:02.530 --> 07:04.130
没有错误信息了

07:04.130 --> 07:04.730
刷新一下

07:04.730 --> 07:05.530
就是你

07:05.530 --> 07:05.930
对吧

07:05.930 --> 07:06.730
这是一个对的代码

07:06.730 --> 07:07.030
对吧

07:07.030 --> 07:07.230
好

07:07.230 --> 07:09.030
比如说这样

07:09.030 --> 07:09.330
哎呀

07:09.330 --> 07:10.130
全都告定

07:10.130 --> 07:11.230
凳凳错了对吧

07:11.230 --> 07:12.130
就是尴尬

07:12.130 --> 07:12.330
好

07:12.330 --> 07:12.730
刷新一下

07:12.730 --> 07:13.330
咱们来看一下

07:14.930 --> 07:15.530
点点点

07:15.530 --> 07:16.530
你看这回不好使对吧

07:16.530 --> 07:17.430
不好使啊

07:17.430 --> 07:18.030
那好了

07:18.030 --> 07:18.830
那现在呢

07:18.830 --> 07:20.130
这个代码就是

07:20.130 --> 07:21.530
你以为你完成这个功能

07:21.530 --> 07:22.130
但是呢

07:22.130 --> 07:23.230
其实一操作的时候

07:23.230 --> 07:23.930
它没报错

07:23.930 --> 07:25.430
它跟你预想中的不一样啊

07:25.430 --> 07:27.230
那此时你可以怎么办呢

07:27.230 --> 07:27.930
好了

07:27.930 --> 07:32.030
你要从这样一个最终的一个结果往上去倒

07:32.030 --> 07:33.630
那这个最终的结果什么意思呢

07:33.630 --> 07:36.130
是最终结果就是你期望它变成什么样

07:36.130 --> 07:36.430
对吧

07:36.430 --> 07:37.430
就比如说你点完它以后

07:37.430 --> 07:40.130
它应该去加上它这样的缩影

07:40.130 --> 07:40.430
对不对

07:40.430 --> 07:41.230
但是它没有去变

07:41.230 --> 07:41.830
对吧

07:41.830 --> 07:42.130
好了

07:42.130 --> 07:44.430
那我们从这个点开始来想啊

07:44.430 --> 07:46.430
那我期望它能变

07:46.430 --> 07:47.730
但是它却没有变

07:47.730 --> 07:49.330
那是不是可能说是

07:49.330 --> 07:50.830
我让它变的那个哎

07:50.830 --> 07:53.030
那句话它有问题啊

07:53.030 --> 07:54.430
比如说在这里吧

07:54.430 --> 07:54.830
你看好了

07:54.830 --> 07:57.030
这就是让它真正起到变的这样的功能

07:57.030 --> 07:58.530
它那一句话对吧

07:58.530 --> 08:01.730
我们看一下这句话有没有问题

08:01.730 --> 08:02.230
首先呢

08:02.230 --> 08:03.130
道目哎

08:03.130 --> 08:04.730
点inertest的吧

08:04.730 --> 08:06.630
没有一个单词是错的啊

08:06.630 --> 08:07.530
等于看了

08:07.530 --> 08:09.530
我已经把这个inertest

08:10.530 --> 08:12.530
转成了一个数字对吧

08:12.530 --> 08:13.730
然后再加这个缩影

08:13.730 --> 08:15.630
哎怎么样也都没问题对不对

08:15.630 --> 08:17.930
有时候这句话确实没有出错

08:17.930 --> 08:19.330
那没有出错怎么办呢

08:19.330 --> 08:21.630
我们要沿着这个逻辑往上找对吧

08:21.630 --> 08:22.930
可能这没错

08:22.930 --> 08:25.130
但是这个逻辑的上乘错了啊

08:25.130 --> 08:27.730
那它的上层是什么呢

08:27.730 --> 08:28.430
哎它的上

08:28.430 --> 08:29.930
它的逻辑的上层

08:29.930 --> 08:31.130
比如说是

08:31.130 --> 08:32.030
看好了

08:32.030 --> 08:33.730
比如说是执行它的这嘛对吧

08:33.730 --> 08:35.730
就执行它执行它的地方啊

08:35.730 --> 08:37.230
那执行它的地方是哪呢

08:37.230 --> 08:38.130
是不是就是这啊

08:38.130 --> 08:39.330
哎第65行

08:39.330 --> 08:41.330
那第65行你发现你在制成的时候

08:41.330 --> 08:43.030
是不是少传那个东西啊

08:43.030 --> 08:45.330
少什么少传了一个哎

08:45.330 --> 08:46.530
这种dece对吧

08:46.530 --> 08:47.930
少传这个dece

08:47.930 --> 08:49.330
那你在这传个dece的话

08:49.330 --> 08:51.730
就能解决这样一个小的问题啊

08:51.730 --> 08:52.330
当然呢

08:52.330 --> 08:54.630
也很可能在这种逻辑比较复杂的情况下的话对吧

08:54.630 --> 08:56.130
你一生一生往上走

08:56.130 --> 08:57.930
觉得哎很难对吧

08:57.930 --> 08:59.130
或者说是有点混乱啊

08:59.130 --> 08:59.730
那怎么办

08:59.730 --> 09:01.330
也没关系对吧

09:01.330 --> 09:03.430
假如你已经知道这不好使对吧

09:03.430 --> 09:04.530
那它不好使的话

09:04.530 --> 09:08.330
那一定是一定是哎某个地方它出错了啊

09:08.330 --> 09:10.230
那某个地方是什么意思的就是

09:10.230 --> 09:12.330
能让这一句话起到作用的时候啊

09:12.330 --> 09:13.830
能让这句话起到作用的

09:13.830 --> 09:16.130
这样那个代码或者说符号的话

09:16.130 --> 09:18.930
无非就那几个啊

09:18.930 --> 09:20.330
一个是这个dom

09:20.330 --> 09:21.430
一个是intest

09:21.430 --> 09:22.330
一个是procent

09:22.330 --> 09:23.030
一个是它

09:23.030 --> 09:23.630
一个是它

09:23.630 --> 09:24.430
一个是它对吧

09:24.430 --> 09:25.930
这个显然是内置的

09:25.930 --> 09:27.330
它不会出错对吧

09:27.330 --> 09:28.130
它呢啊

09:28.130 --> 09:30.330
这个pins这个单词拼接

09:30.330 --> 09:31.830
你也不会出错

09:31.830 --> 09:33.330
那出错的地可能是哪呢

09:33.330 --> 09:33.730
对吧

09:33.730 --> 09:36.430
可能是那些可变的量

09:36.430 --> 09:37.730
可变的量啊

09:37.730 --> 09:38.930
要说

09:38.930 --> 09:40.230
我们在这个开发过程中啊

09:40.230 --> 09:42.930
你要知道产生Bug一个最大的源头是啥啊

09:42.930 --> 09:44.530
就是这些可变的量

09:44.530 --> 09:45.730
比如说我们所谓的变量

09:45.730 --> 09:47.630
所以说在后面的这个es6中对吧

09:47.630 --> 09:49.630
它才推出一些coss的写法啊

09:49.630 --> 09:51.630
让你去定义一些不能变的量啊

09:51.630 --> 09:52.130
好

09:52.130 --> 09:53.330
那这些可能变的量

09:53.330 --> 09:56.330
你要知道它可能是你出错的一个最大的原因啊

09:56.330 --> 09:57.330
那你怎么办呢

09:57.330 --> 10:00.030
你可以在使用它的前面啊

10:00.030 --> 10:01.430
前面去输出一下

10:01.430 --> 10:04.430
通过cancel.log的方式去输出一下啊

10:04.430 --> 10:05.430
输出这两个东西

10:05.430 --> 10:06.230
我们来看一下

10:06.330 --> 10:08.130
它是不是我们想要的值对吧

10:08.130 --> 10:08.730
然后呢

10:08.730 --> 10:10.730
我稍微一次点击一下

10:10.730 --> 10:11.430
你会发现

10:11.430 --> 10:11.730
哎

10:11.730 --> 10:13.630
第一个居然是使不是dumb对吧

10:13.630 --> 10:15.130
第二个是没有的啊

10:15.130 --> 10:16.130
那是不是这么一点

10:16.130 --> 10:17.430
就是它在被拘的时候

10:17.430 --> 10:19.730
这个参数传递是有问题的

10:19.730 --> 10:20.230
对不对

10:20.230 --> 10:21.530
说刑参我希望

10:21.530 --> 10:23.330
我希望是一个dumb对象和一个什么

10:23.330 --> 10:25.230
和一个这样的一个index

10:25.230 --> 10:26.230
就是所谓的这个值对吧

10:26.230 --> 10:27.230
但是你

10:27.230 --> 10:28.730
最后在结果方面的话

10:28.730 --> 10:30.030
没有给我这样的一个值

10:30.030 --> 10:31.930
这时候我还是沿着这个逻辑去往上找

10:31.930 --> 10:33.230
说你又找到这了对吧

10:33.230 --> 10:33.930
然后你发现

10:33.930 --> 10:35.030
是不是只传这个i了

10:35.030 --> 10:36.330
没有传递的那个值对吧

10:36.330 --> 10:37.530
好了接下来我写个DS

10:38.530 --> 10:39.030
好

10:39.030 --> 10:40.130
那咱们再来看一下

10:40.130 --> 10:41.130
咱们再来看一下

10:41.130 --> 10:42.430
我刷新一次啊

10:42.430 --> 10:43.230
那现在的话

10:43.230 --> 10:43.830
是不是按理来讲

10:43.830 --> 10:45.530
我应该把这个bug调出成功了

10:45.530 --> 10:45.930
对不对

10:45.930 --> 10:46.830
比如说我点它

10:46.830 --> 10:47.230
点它点它

10:47.230 --> 10:48.630
等会有反应对吧

10:48.630 --> 10:49.830
但我点第一个的话

10:49.830 --> 10:50.730
是不是一加零对吧

10:50.730 --> 10:51.830
应该它不变对吧

10:51.830 --> 10:52.630
好我先点下

10:52.630 --> 10:53.430
我来看一下

10:53.430 --> 10:53.930
一点

10:53.930 --> 10:54.530
你会发现

10:54.530 --> 10:55.830
我会要和它变十一了

10:55.830 --> 10:56.330
对吧

10:56.330 --> 10:57.530
你点它呢

10:57.530 --> 10:58.130
二十了

10:58.130 --> 10:58.630
点它呢

10:58.630 --> 10:59.330
十八了

10:59.330 --> 11:01.030
好像发现每个都加什么

11:01.030 --> 11:01.930
十了啊

11:01.930 --> 11:03.030
那是怎么一回事呢

11:03.030 --> 11:05.330
显然还是跟你预料是不一样的

11:05.330 --> 11:06.330
所以说在这一块的话

11:06.330 --> 11:07.530
我们还要去怎么样

11:07.530 --> 11:09.530
沿着逻辑去往上推

11:09.530 --> 11:10.530
去往上推

11:10.530 --> 11:12.130
那我们首先还是来看这里吧

11:12.130 --> 11:12.830
还是来看这

11:12.830 --> 11:14.430
index

11:14.430 --> 11:15.630
那这个index的话

11:15.630 --> 11:16.430
你会发现呢

11:16.430 --> 11:19.130
每次我点击任何一个这样的li的时候

11:19.130 --> 11:20.530
最后它都是十的吧

11:20.530 --> 11:21.330
那都是十的话

11:21.330 --> 11:22.030
那证明

11:22.030 --> 11:22.530
诶

11:22.530 --> 11:23.930
传进来这个值啊

11:23.930 --> 11:25.730
它的逻辑上从这

11:25.730 --> 11:27.630
传进来值还是有问题

11:27.630 --> 11:29.230
为什么有问题呢对吧

11:29.230 --> 11:29.530
诶

11:29.530 --> 11:30.930
我们在这去输出一下啊

11:30.930 --> 11:33.030
看看这个i到底有没有问题

11:33.030 --> 11:34.330
你会发现

11:34.330 --> 11:34.930
首先词

11:34.930 --> 11:36.230
它确实有问题

11:36.230 --> 11:37.330
有问题对吧

11:37.330 --> 11:38.230
那有问题怎么办呢

11:38.230 --> 11:38.930
还是啊

11:38.930 --> 11:41.130
我们沿着这个逻辑再往上找啊

11:41.130 --> 11:42.530
那这个东西啊

11:42.530 --> 11:43.730
诶是谁

11:43.730 --> 11:44.830
诶在哪对吧

11:44.830 --> 11:45.730
诶有的它

11:45.730 --> 11:48.230
啊在哪去赋予它这个值啊

11:48.230 --> 11:50.830
那我们是不是想想在这去使用它啊

11:50.830 --> 11:52.330
好了我们往上看啊

11:52.330 --> 11:53.730
那这个i我想什么

11:53.730 --> 11:56.030
我想用的是这个每次啊

11:56.030 --> 11:58.930
谈出对应值的时候那个锁引啊

11:58.930 --> 12:00.030
但是那个锁引你会发现

12:00.030 --> 12:01.030
我在传的功能中

12:01.030 --> 12:02.630
其实我确实把i传进去对吧

12:02.630 --> 12:04.130
啊这个i是外层的i

12:04.130 --> 12:06.230
但是我在这写上了一个index

12:06.230 --> 12:06.830
啊

12:06.830 --> 12:07.530
也就是说我

12:07.530 --> 12:09.330
已经说我在这使用i的时候的话

12:09.330 --> 12:11.630
并不是使用你传进来这个对应的那个值

12:11.630 --> 12:12.330
而什么呢

12:12.330 --> 12:13.930
而是最外侧的这个i

12:13.930 --> 12:14.430
对吧

12:14.430 --> 12:16.930
那最外侧的这个i呢

12:16.930 --> 12:18.730
它在循环之后的话是不是就变什么

12:18.730 --> 12:20.130
就变成了

12:20.130 --> 12:21.430
诶最后那个实了

12:21.430 --> 12:22.230
所以在这一块的话

12:22.230 --> 12:23.230
无论你怎么写

12:23.230 --> 12:24.430
它都是有错的啊

12:24.430 --> 12:25.330
所以说呢

12:25.330 --> 12:27.630
我可以在这把它改成一个index

12:27.630 --> 12:28.730
保存一下啊

12:28.830 --> 12:30.030
这时候就没问题了

12:30.030 --> 12:31.130
就index

12:31.130 --> 12:32.930
啊它要index

12:32.930 --> 12:33.430
ok

12:33.430 --> 12:34.230
我再上一次啊

12:34.230 --> 12:34.830
来看一下

12:36.630 --> 12:37.230
怎么样

12:37.230 --> 12:37.630
诶

12:37.630 --> 12:39.130
现在是正确的这种

12:39.130 --> 12:40.630
诶状况了吧

12:40.630 --> 12:41.630
好

12:41.630 --> 12:44.130
那大家我们这种调出的方式啊

12:44.130 --> 12:45.630
一般还是以这种就是

12:45.630 --> 12:48.230
就是手动的方式它来去做的啊

12:48.230 --> 12:49.330
比如说我们先

12:49.330 --> 12:50.630
大概去定位道地吧

12:50.630 --> 12:52.730
或者说大概你通过感觉来发现

12:52.730 --> 12:53.430
哪有错

12:53.430 --> 12:54.630
然后通过这个cancel log

12:54.630 --> 12:57.230
去配合你来进行这样的一个调制啊

12:57.230 --> 12:57.830
那基本上呢

12:57.830 --> 12:58.930
你按照我们这个思路啊

12:58.930 --> 13:00.330
去对bug经营定位的话

13:00.330 --> 13:01.630
任何一种复杂的项目

13:01.630 --> 13:03.730
都可以去找到哪里出错啊

13:03.730 --> 13:04.930
但如果说你觉得这种

13:04.930 --> 13:06.430
诶这种方式很麻烦对吧

13:06.430 --> 13:07.130
或者说是

13:07.130 --> 13:08.030
你通过这种

13:08.030 --> 13:09.530
这个逻辑一层一层去往上推的话

13:09.530 --> 13:11.130
你怕一楼到某个点的话

13:11.130 --> 13:11.430
啊

13:11.430 --> 13:13.030
或者说你想不到某点的话

13:13.030 --> 13:13.530
那怎么办呢

13:13.530 --> 13:14.030
对吧

13:14.030 --> 13:16.530
你也可以使用我们下面这样的一个断点调制啊

13:16.530 --> 13:17.530
利用工具的方式

13:17.530 --> 13:20.130
辅助你去对bug经营上这个定位啊

13:20.130 --> 13:21.130
那首先我在这一块呢

13:21.130 --> 13:22.630
把这个注释给它解开啊

13:22.630 --> 13:23.430
解开以后的话

13:23.430 --> 13:24.330
你要知道一点啊

13:24.330 --> 13:26.930
它也是要完成我们上述的这个功能啊

13:26.930 --> 13:28.330
那现在我去打开这个页面

13:28.330 --> 13:29.130
我们来看一下

13:29.130 --> 13:29.730
稍息一下

13:29.730 --> 13:30.430
稍息一下

13:30.430 --> 13:31.130
好

13:31.130 --> 13:32.630
那稍息完以后的话

13:32.630 --> 13:33.530
我们来看啊

13:33.530 --> 13:35.630
现在这个功能确实还是没有

13:35.630 --> 13:36.130
怎么样啊

13:36.130 --> 13:37.530
完成我们预期的一个效果

13:37.530 --> 13:38.830
所以说它还是出问题对吧

13:38.830 --> 13:39.630
那这个出问题的话

13:39.630 --> 13:41.330
你会发现它也没有去包错啊

13:41.330 --> 13:42.330
那怎么办呢啊

13:42.330 --> 13:42.530
好

13:42.530 --> 13:43.630
比如说现在啊

13:43.630 --> 13:44.730
我想去订订这个错误

13:44.730 --> 13:45.830
我可以先点击右键

13:45.830 --> 13:46.330
检查

13:46.330 --> 13:46.730
然后呢

13:46.730 --> 13:47.930
在这你会发现呢

13:47.930 --> 13:48.430
诶

13:48.430 --> 13:49.330
它会

13:49.330 --> 13:51.230
有个sauce这样的一个选项对吧

13:51.230 --> 13:52.330
你点击完sauce以后的话

13:52.330 --> 13:54.330
这一块显示的是你这样的一个

13:54.330 --> 13:55.330
目录的一个

13:55.330 --> 13:56.530
目录的一个结构

13:56.530 --> 13:58.030
那这是你的一个代码对吧

13:58.030 --> 13:58.630
我点完它以后

13:58.630 --> 14:00.130
你会发现在这里吧

14:00.130 --> 14:03.030
会出现这个index.hml这个代码啊

14:03.030 --> 14:03.930
那这边代码的话

14:03.930 --> 14:05.730
其实我们还是要关注的是js啊

14:05.730 --> 14:07.830
因为毕竟我们js它出问题嘛

14:07.830 --> 14:09.630
那这个js怎么来去

14:09.630 --> 14:10.130
诶

14:10.130 --> 14:12.130
进行这样的一个就是错误这个定位呢

14:12.130 --> 14:12.430
好了

14:12.430 --> 14:14.630
我们接下来来说一下这个断点的调试啊

14:14.630 --> 14:16.230
断点是什么意思啊

14:16.230 --> 14:17.430
这是其实在我们这种

14:17.430 --> 14:19.030
其他的一些编意性语言

14:19.030 --> 14:19.730
比如说像sace

14:19.730 --> 14:21.630
像java这种编意性语言的话啊

14:21.630 --> 14:23.430
它都有一些这种编意工具啊

14:23.430 --> 14:24.230
编意工具呢

14:24.230 --> 14:26.730
就可以让你去打一些断点啊

14:26.730 --> 14:29.130
那程序再去编意执行的时候啊

14:29.130 --> 14:31.030
在编意执行的时候

14:31.030 --> 14:33.830
它就会在断点那去停止啊

14:33.830 --> 14:35.930
然后如果说你断点打的很多的情况下的话

14:35.930 --> 14:37.330
你可以按一些按钮

14:37.330 --> 14:39.730
让它在这个断点和断点之间来回跳跃

14:39.730 --> 14:41.330
或者说是点一些其他的按钮

14:41.330 --> 14:43.430
让它按照这个程序

14:43.430 --> 14:44.530
一步一步的方式的吧

14:44.530 --> 14:45.430
来一点点走

14:45.430 --> 14:46.030
那这样的话

14:46.030 --> 14:48.330
你可以清楚的跟这个断点啊

14:48.330 --> 14:49.630
来去

14:49.730 --> 14:51.130
大家就知道这个

14:51.130 --> 14:51.830
每一步啊

14:51.830 --> 14:52.830
这个程序在实现功能中

14:52.830 --> 14:54.030
每一步都发生了什么

14:54.030 --> 14:54.930
那再按的话

14:54.930 --> 14:57.330
我们能更精准的去定位到这样一个错误啊

14:57.330 --> 14:58.330
就是我们按照

14:58.330 --> 15:00.130
就用断点的方式我们来去看一下

15:00.130 --> 15:00.430
对吧

15:00.430 --> 15:02.330
如何来进行这样一个错误的定位啊

15:02.330 --> 15:04.430
首先你想去在我们这个控台中啊

15:04.430 --> 15:05.830
你想去在我们这样的一个乱七中

15:05.830 --> 15:06.630
去打断点的话

15:06.630 --> 15:07.830
怎么办呢啊

15:07.830 --> 15:08.230
我们可以这样

15:08.230 --> 15:09.830
我们可以先把断点先打到这儿

15:09.830 --> 15:10.630
不是

15:10.630 --> 15:12.030
因为它最后这个效果对吧

15:12.030 --> 15:13.030
没有展现出来

15:13.030 --> 15:13.630
我可能怀疑

15:13.630 --> 15:14.430
它这儿就出错了

15:14.430 --> 15:15.930
所以说把断点先打到这儿

15:15.930 --> 15:16.830
然后我希望呢

15:16.830 --> 15:17.930
我在刷新页面的时候

15:19.630 --> 15:21.230
你会发现程序没有停止

15:21.230 --> 15:22.930
这个断点没有起到任何作用

15:22.930 --> 15:23.730
因为什么呢

15:23.730 --> 15:25.430
因为你要知道

15:25.430 --> 15:26.530
这个函数什么时候只行啊

15:26.530 --> 15:28.430
一定是事件点击之后它才执行

15:28.430 --> 15:28.930
对吧

15:28.930 --> 15:30.130
那也就是我当

15:30.130 --> 15:31.330
当我去点击它以后的话

15:31.330 --> 15:32.230
它才可能

15:32.230 --> 15:33.530
怎么样走到这儿

15:33.530 --> 15:34.430
那走到这儿的话

15:34.430 --> 15:35.930
我可以断点才会起到作用

15:35.930 --> 15:36.930
但是现在你会发现

15:36.930 --> 15:37.730
我点完它

15:37.730 --> 15:39.330
怎么样也没暂时停

15:39.330 --> 15:40.830
那很有可能是啊

15:40.830 --> 15:42.630
它的上一层就出了错误

15:42.630 --> 15:43.230
就是你会发现

15:43.230 --> 15:44.530
你在打断点功能中的话

15:44.530 --> 15:46.930
你也需要按照逻辑去往上推

15:46.930 --> 15:48.130
并没有任何一个工具

15:48.130 --> 15:49.930
我们直接告诉你哪出问题了

15:49.930 --> 15:51.230
还是按照逻辑去往上找

15:51.230 --> 15:51.530
对吧

15:51.530 --> 15:53.130
所以说你使用Casar Log

15:53.130 --> 15:54.930
使用我们善意的方式来做的话

15:54.930 --> 15:56.530
它是种慢农的方法

15:56.530 --> 15:56.830
那好

15:56.830 --> 15:59.230
我们再回到这个断点调试来看一下

15:59.230 --> 16:00.830
那我现在可以在它的上一层

16:00.830 --> 16:02.830
哪在这我们去打个断焊点

16:02.830 --> 16:04.330
那我继续于

16:04.330 --> 16:06.830
我这个点击完某一个地方的话

16:06.830 --> 16:07.230
能怎么样

16:07.230 --> 16:09.030
能去在这先停一下

16:09.030 --> 16:10.030
但是也没有停

16:10.030 --> 16:10.530
对吧

16:10.530 --> 16:11.530
那么一点

16:11.530 --> 16:13.530
它这块出问题了

16:13.530 --> 16:15.630
那我们要怎么再往上层找

16:15.630 --> 16:16.630
再往上层找的话

16:16.630 --> 16:17.130
找哪呢

16:17.130 --> 16:19.130
我给你找这个放循环

16:19.130 --> 16:20.330
那放循环的话

16:20.330 --> 16:21.330
我来刷一次

16:21.330 --> 16:21.930
你会发现

16:21.930 --> 16:23.030
确实会在这停了

16:23.030 --> 16:24.130
有时候程序

16:24.130 --> 16:25.830
确实会执行到这个放循环

16:25.830 --> 16:26.530
在放循环这

16:26.530 --> 16:27.630
OK 卡住了

16:27.630 --> 16:28.730
卡住以后我们来看一下

16:28.730 --> 16:30.930
在这有个什么有按钮

16:30.930 --> 16:32.030
这个按钮有个作用

16:32.030 --> 16:33.030
你点完它以后的话

16:33.030 --> 16:36.130
它能从当前断点跳到下个断点

16:36.130 --> 16:37.030
然后我点一下

16:37.030 --> 16:37.330
你看好了

16:37.330 --> 16:39.030
能不能从这跳到这

16:39.030 --> 16:39.330
点完

16:39.330 --> 16:40.430
你会发现它没跳

16:40.430 --> 16:41.030
因为什么呢

16:41.030 --> 16:42.930
因为这根本就没有执行

16:42.930 --> 16:43.730
它这执行完以后

16:43.730 --> 16:45.630
直接程序就 over了

16:45.630 --> 16:48.330
有时候这和这都没有去执行

16:48.330 --> 16:49.730
有时候放循环根本就没进去

16:49.730 --> 16:50.330
对吧

16:50.330 --> 16:51.930
那放循环没进去是因为什么呢

16:51.930 --> 16:52.630
我们再来看一下

16:52.630 --> 16:54.630
重新刷一次

16:54.630 --> 16:56.930
OK 这下你用到它了

16:56.930 --> 16:57.930
那你要知道

16:57.930 --> 16:59.730
现在当前断点停到这的话

16:59.730 --> 17:00.330
是停到哪呢

17:00.330 --> 17:02.030
是停到这样的一句话

17:02.030 --> 17:02.830
我手表放到这的时候

17:02.830 --> 17:05.030
你会发现这个I是按你犯的对吧

17:05.030 --> 17:06.930
然后这句话执行完以后

17:06.930 --> 17:07.930
把别人付给它了

17:07.930 --> 17:09.230
那我在这点它对吧

17:09.230 --> 17:11.130
好让程序对吧

17:11.130 --> 17:13.330
按照一步一步去往下走

17:13.330 --> 17:14.030
往下一步走

17:14.030 --> 17:14.830
走哪呢

17:14.830 --> 17:16.530
这句话执行完一定是走这对不对

17:16.530 --> 17:20.030
去判断一下这个I是否小于O-L-I-O-R-A点

17:20.030 --> 17:21.630
那现在你看它

17:21.630 --> 17:23.630
你会发现O-L-I-O-R-A

17:23.630 --> 17:24.930
跟你之前想的是不一样的

17:24.930 --> 17:26.630
因为我们希望它是里面有执的

17:26.630 --> 17:27.930
但最后它没有执

17:27.930 --> 17:28.930
说在这一块的话

17:28.930 --> 17:29.830
你就出错了

17:29.830 --> 17:31.230
那这一块出错的话

17:31.230 --> 17:32.430
那指定不是它的事对吧

17:32.430 --> 17:32.930
是谁事呢

17:32.930 --> 17:34.330
是它上一层罗一的事

17:34.330 --> 17:36.130
所以我把断点再打到这

17:36.130 --> 17:36.730
我再刷一下

17:36.730 --> 17:37.530
你看一下

17:37.530 --> 17:39.030
怎么样 断点先停这对吧

17:39.030 --> 17:39.830
停这以后的话

17:39.830 --> 17:41.130
首先执行这对吧

17:41.130 --> 17:42.230
它应该是空对吧

17:42.230 --> 17:43.230
然后执行这的时候

17:43.230 --> 17:44.230
我们往这发一发

17:44.230 --> 17:45.030
你会发现的

17:45.030 --> 17:46.230
这个方法

17:46.230 --> 17:47.630
这个document我们有去写错对吧

17:47.630 --> 17:48.530
确实是document

17:48.530 --> 17:50.530
你看这显示它有些方法

17:50.530 --> 17:51.730
Gun elements也没问题

17:51.730 --> 17:52.830
它显示了它是个函数

17:52.830 --> 17:53.830
那可能这出问题对吧

17:53.830 --> 17:54.730
参数有问题

17:54.730 --> 17:56.230
参数确实出问题了

17:56.230 --> 17:57.530
L你们应该填个什么

17:57.530 --> 17:58.330
填个i

17:58.330 --> 17:59.530
填个i

17:59.530 --> 18:00.930
那现在这样的话

18:00.930 --> 18:02.130
整个这个代码就被我们

18:02.130 --> 18:04.230
整个这个bug就被我们定位出来了

18:04.230 --> 18:06.130
这个代码也改成功了对吧

18:06.130 --> 18:06.830
那我们再刷一次

18:06.830 --> 18:07.630
我们再走一走

18:07.630 --> 18:08.530
来看一看

18:08.530 --> 18:10.430
到底这个断点起到什么样的作用

18:10.430 --> 18:11.330
首先

18:11.330 --> 18:12.930
这个当你打断点的地方的话

18:13.030 --> 18:15.330
程序在运工中的话就会停到这对吧

18:15.330 --> 18:16.730
那一定是这个程序

18:16.730 --> 18:18.430
要执行到这的时候

18:18.430 --> 18:20.230
也是这个

18:20.230 --> 18:21.130
能停到断点这

18:21.130 --> 18:21.930
这样的一个前提

18:21.930 --> 18:24.230
就是这个程序一定能执行到这对吧

18:24.230 --> 18:25.630
如果说程序都执行不到这的话

18:25.630 --> 18:27.730
那有断点它也是无疑于事的

18:27.730 --> 18:28.630
就说在这打个断点

18:28.630 --> 18:29.230
你会发现怎么样

18:29.230 --> 18:29.830
停到这了

18:29.830 --> 18:30.630
然后那我想

18:30.630 --> 18:31.730
我想让它一步一步走

18:31.730 --> 18:32.130
怎么办

18:32.130 --> 18:32.830
你就按它就黑了

18:32.830 --> 18:33.430
对吧

18:33.430 --> 18:34.630
一步一步走

18:34.630 --> 18:35.430
那走到这以后的话

18:35.430 --> 18:35.630
好

18:35.630 --> 18:36.130
我再往下走

18:36.130 --> 18:36.430
对吧

18:36.430 --> 18:36.930
就走这的

18:36.930 --> 18:37.630
然后再往下走

18:37.630 --> 18:38.830
再往下走是装断呢

18:38.830 --> 18:39.930
是走下面的对吧

18:39.930 --> 18:40.430
好

18:43.230 --> 18:43.730
点它

18:43.730 --> 18:44.330
你会发现

18:44.330 --> 18:45.330
什么也没有对不对

18:45.330 --> 18:46.030
因为什么呢

18:46.030 --> 18:47.430
因为这个东西要向执行

18:47.430 --> 18:47.930
好了

18:47.930 --> 18:49.030
这东西要向执行

18:49.030 --> 18:50.230
必须得有实践触发

18:50.230 --> 18:50.730
我再点它

18:50.730 --> 18:51.530
你会发现怎么样

18:51.530 --> 18:52.630
实践触发成功了

18:52.630 --> 18:52.930
对吧

18:52.930 --> 18:53.630
它才会执行

18:53.630 --> 18:54.030
然后呢

18:54.030 --> 18:55.230
我再跳下一个断点

18:55.230 --> 18:55.830
就是从这

18:55.830 --> 18:56.530
你看它执行完

18:56.530 --> 18:57.930
应该是执行到这对吧

18:57.930 --> 18:58.930
就跳到这了

18:58.930 --> 19:00.030
好

19:00.030 --> 19:00.530
好

19:00.530 --> 19:02.430
那如果说把他们打到这了

19:02.430 --> 19:03.230
我再刷一次

19:03.230 --> 19:04.730
你看好了

19:04.730 --> 19:05.730
我先跳对吧

19:05.730 --> 19:06.630
再跳这对吧

19:06.630 --> 19:08.430
然后我再跳下一个

19:08.430 --> 19:08.730
哎

19:08.730 --> 19:10.030
你会发现还是在这

19:10.030 --> 19:11.030
这是因为什么呢

19:11.030 --> 19:11.830
这是因为循环

19:11.830 --> 19:12.830
要执行完十次

19:12.830 --> 19:13.330
对吧

19:13.330 --> 19:13.930
执行十次的话

19:13.930 --> 19:15.130
这么这个地方要走

19:15.130 --> 19:16.430
走十次

19:16.430 --> 19:19.030
那说这个断点相当于起到了十次的一个作用

19:19.030 --> 19:19.830
对不对

19:19.830 --> 19:21.430
只有说你把这个断点全部都走完

19:21.430 --> 19:22.230
跳跳跳跳跳跳

19:22.230 --> 19:23.030
跳完十次以后

19:23.030 --> 19:24.030
它才会

19:24.030 --> 19:24.530
哎

19:24.530 --> 19:25.130
最后怎么样

19:25.130 --> 19:26.030
跳到另外一个去对吧

19:26.030 --> 19:26.830
当然说

19:26.830 --> 19:28.730
如果说这个跳到另外一个去的时候

19:28.730 --> 19:29.830
另外再没有的话

19:29.830 --> 19:32.530
它就会整个这样的一个停止了

19:32.530 --> 19:33.830
那我们再来看一看

19:33.830 --> 19:34.630
就是

19:34.630 --> 19:35.230
这个断点的话

19:35.230 --> 19:37.730
我们就已经差不多能理了对吧

19:37.730 --> 19:38.830
那除了这个断点以外的话

19:38.830 --> 19:40.230
能扶着我们进行调试的话

19:40.230 --> 19:41.130
还有什么呢

19:41.230 --> 19:42.030
还有这个东西

19:42.030 --> 19:43.830
也可以去稍微的辅助一下

19:43.830 --> 19:45.230
有兴趣可以去研究一下

19:45.230 --> 19:46.830
这边我稍微来说说

19:46.830 --> 19:47.930
这个东西叫做scove

19:47.930 --> 19:48.730
scove记录什么呢

19:48.730 --> 19:50.130
scove记录一下

19:50.130 --> 19:51.730
就是我跳到这

19:51.730 --> 19:53.030
跳到这

19:53.030 --> 19:53.430
哎

19:53.430 --> 19:53.830
十次对吧

19:53.830 --> 19:54.430
十次

19:54.430 --> 19:54.730
先过去

19:54.730 --> 19:55.930
然后我点这

19:55.930 --> 19:56.230
哎

19:56.230 --> 19:56.830
跳这里吧

19:56.830 --> 19:57.030
好

19:57.030 --> 19:57.330
跳这里

19:57.330 --> 19:58.130
然后你要说

19:58.130 --> 19:58.330
哎

19:58.330 --> 19:59.330
这个函数啊

19:59.330 --> 20:00.530
这个世界处理函数

20:00.530 --> 20:02.430
在追求的时候啊

20:02.430 --> 20:03.930
就是这个会刷发它对吧

20:03.930 --> 20:04.630
那刷发它以后

20:04.630 --> 20:05.530
好断点

20:05.530 --> 20:06.430
停到这了

20:06.430 --> 20:06.830
然后呢

20:06.830 --> 20:08.030
我们关注的是断点

20:08.030 --> 20:09.530
指向了这个函数啊

20:09.530 --> 20:10.730
它会在右侧

20:10.730 --> 20:12.730
发现scove记录会怎么样

20:12.730 --> 20:13.330
嗯

20:13.330 --> 20:14.730
会显示你当前的综域

20:14.730 --> 20:15.030
以后

20:15.030 --> 20:16.630
以后说你这个函数在执行的时候

20:16.630 --> 20:17.730
它当前综域是啥啊

20:17.730 --> 20:18.930
是这个local里面

20:18.930 --> 20:20.230
指向了这个指li

20:20.230 --> 20:20.730
对吧

20:20.730 --> 20:21.530
是li

20:21.530 --> 20:23.430
有时候它可以去看一下

20:23.430 --> 20:25.330
你这个函数之前的当前综域是什么

20:25.330 --> 20:25.830
啊

20:25.830 --> 20:26.630
那一位时候可能说

20:26.630 --> 20:28.030
因为你的综域的一些问题

20:28.030 --> 20:29.530
你找不到一些别量对吧

20:29.530 --> 20:30.430
那此时你可以看一下

20:30.430 --> 20:30.830
你这个综域

20:30.830 --> 20:32.630
是不是你想要的这个综域啊

20:32.630 --> 20:33.130
好

20:33.130 --> 20:33.730
除了这一外的话

20:33.730 --> 20:34.430
我们可以再往下来

20:34.430 --> 20:35.430
我再往下跳

20:35.430 --> 20:36.730
啊跳跳这里吧

20:36.730 --> 20:37.730
跳跳跳这里的话

20:37.730 --> 20:38.630
你会发现这个

20:38.630 --> 20:38.830
哎

20:38.930 --> 20:39.630
在这个local里面

20:39.630 --> 20:40.630
也能显示这样的综域

20:40.630 --> 20:41.130
对吧

20:41.130 --> 20:42.030
那它综域谁啊

20:44.030 --> 20:45.230
这个这个这个

20:45.230 --> 20:45.830
它综域谁

20:45.830 --> 20:46.830
它的综域变成了

20:46.830 --> 20:47.230
看好了

20:48.830 --> 20:50.030
变什么变成了一个

20:50.030 --> 20:50.530
呃

20:50.530 --> 20:51.430
变成了一个window

20:51.430 --> 20:52.230
对吧

20:52.230 --> 20:52.830
window啊

20:52.830 --> 20:53.430
window

20:53.430 --> 20:53.830
好

20:53.830 --> 20:55.030
那既然是window的话

20:55.030 --> 20:55.530
嗯

20:55.530 --> 20:56.130
那可能说这一半

20:56.130 --> 20:56.930
你在输出dace

20:56.930 --> 20:57.430
dace的时候

20:57.430 --> 20:57.830
一定是

20:57.830 --> 20:58.730
一定是这个window的一下吧

20:58.730 --> 20:59.930
你看dace是window的一下

20:59.930 --> 21:00.430
啊

21:00.430 --> 21:00.630
好

21:00.630 --> 21:01.330
嗯

21:01.330 --> 21:02.030
那这样的话

21:02.030 --> 21:02.630
我们已经知道

21:02.630 --> 21:03.130
这个scove

21:03.130 --> 21:04.330
大概是怎么来用的吧

21:04.330 --> 21:04.930
我们再来看一下

21:04.930 --> 21:05.730
另外一个东西啊

21:05.730 --> 21:06.430
看这的

21:06.530 --> 21:08.130
现在你断点挺老是这对吧

21:08.130 --> 21:08.930
那我们关注的是

21:08.930 --> 21:09.530
这哎

21:09.530 --> 21:11.430
这个函数里面的功能啊

21:11.430 --> 21:12.130
那你要知道

21:12.130 --> 21:13.030
这个函数

21:13.030 --> 21:14.030
他调用的时候啊

21:14.030 --> 21:15.330
他的调用是因为什么

21:15.330 --> 21:16.130
是因为啊

21:16.130 --> 21:17.430
他的他的调用是因为什么的吧

21:17.430 --> 21:20.130
是因为前面他调用了啊

21:20.130 --> 21:20.630
也就是说

21:20.630 --> 21:20.730
也就是说

21:20.730 --> 21:21.430
这个函数的逻辑

21:21.430 --> 21:22.330
网上找是谁啊

21:22.330 --> 21:22.930
是他

21:22.930 --> 21:23.530
对吧

21:23.530 --> 21:24.430
那你会发现

21:24.430 --> 21:25.530
在这块有个callback

21:25.530 --> 21:27.330
叫叫做callstack对吧

21:27.330 --> 21:28.230
callstack什么意思

21:28.230 --> 21:29.130
叫做调用站啊

21:29.130 --> 21:29.730
比如说

21:29.730 --> 21:31.330
你这个update的这个函数

21:31.330 --> 21:32.830
他执行是因为什么呢

21:32.830 --> 21:33.530
是因为哎

21:33.530 --> 21:34.230
这个函数

21:34.230 --> 21:34.730
他执行

21:34.730 --> 21:34.830
对吧

21:34.830 --> 21:35.730
那这个函数是谁啊

21:35.730 --> 21:35.830
哎

21:35.830 --> 21:37.530
这个onclinic对我们的函数啊

21:37.530 --> 21:37.830
也就是说

21:37.830 --> 21:39.530
这个调用站里面会记录

21:39.530 --> 21:41.430
当前你执行的函数啊

21:41.430 --> 21:43.330
他上一个执行的函数是谁啊

21:43.330 --> 21:43.730
如果说

21:43.730 --> 21:45.030
这个层次非常深的情况下的话

21:45.030 --> 21:45.630
他在这

21:45.630 --> 21:47.330
会给你全部挪来出来啊

21:47.330 --> 21:47.730
那如果说

21:47.730 --> 21:48.830
你当前这个函数

21:48.830 --> 21:49.130
如果说

21:49.130 --> 21:50.430
你定位发现他没问题的话

21:50.430 --> 21:51.830
我们可以沿着这个函数去

21:51.830 --> 21:52.830
沿着这个调用站

21:52.830 --> 21:54.130
所展示的函数

21:54.130 --> 21:56.030
不停去网上找就可以了啊

21:56.030 --> 21:56.530
好

21:56.530 --> 21:56.930
那这样的话

21:56.930 --> 21:58.130
我们基本上已经了解了

21:58.130 --> 21:58.230
哎

21:58.230 --> 22:00.330
断点调试和一些辅助的功能啊

22:00.430 --> 22:01.830
如果说再出现一些错误的话

22:01.830 --> 22:02.630
我希望同学

22:02.630 --> 22:02.730
哎

22:02.730 --> 22:04.430
能按照这种正常的方式

22:04.430 --> 22:06.030
来去精准的定区

22:06.030 --> 22:07.430
来去精准的去定位到

22:07.430 --> 22:08.830
你所写的这个bug

22:08.830 --> 22:09.330
好

22:09.330 --> 22:10.430
那咱这小姐的话

22:10.430 --> 22:12.330
就暂时先到这啊

22:12.330 --> 22:13.830
那如果说你有这样的一个

22:13.830 --> 22:16.230
调试方面的一些问题和想法的话

22:16.230 --> 22:17.630
欢迎你来加我的微信啊

22:17.630 --> 22:18.430
咱们来聊一聊

22:18.430 --> 22:18.830
切磁切磋

