WEBVTT

00:00.000 --> 00:05.360
欢迎收看我们读义教育所提供的你不知道你不知道的GIS专题的内容

00:05.360 --> 00:09.600
我们这次讲的是接流接到上一课房斗的内容开始来讲

00:09.600 --> 00:12.000
那这个自我介绍的话就不用说了

00:12.000 --> 00:17.600
这个左侧上面这个图片就是特殊是我一看就是很帅气的那一种

00:17.600 --> 00:20.880
那现在呢读义技术开发有限公司的一个CTO

00:20.880 --> 00:23.680
当然呢减据另一家公司的一个CTO

00:23.680 --> 00:26.880
我也是咱们读义教育的前端技术主负责人

00:27.040 --> 00:30.800
那好了那咱上一课讲到房斗这次我们来讲接流

00:30.800 --> 00:34.800
那它俩呢本质上都是来处理同一列的一个事件

00:34.800 --> 00:37.360
来处理同同一类的这样一件事吧

00:38.000 --> 00:42.240
那就是当用户呢在这个对页面吧进行一个平凡的操作的时候

00:42.240 --> 00:45.200
它可能会平凡的去加载这样的资源

00:45.200 --> 00:48.240
或者说是平凡进行这样的一个道路操作

00:48.240 --> 00:50.640
那这都很有可能导致页面进行卡顿

00:50.640 --> 00:52.880
那本质呢是因为我们这样的一段期

00:52.880 --> 00:55.440
或者说我们GS吧是单线程的

00:55.440 --> 00:58.400
那具体它的这样一个执行的机制的话

00:58.400 --> 01:00.080
我们可以放到以后去来讲

01:00.080 --> 01:01.200
但你要知道

01:01.200 --> 01:04.480
就是如果说你平凡进行这种资源加载或者说道路操作的话

01:04.480 --> 01:07.520
必然会导致乱七卡顿甚至崩溃

01:07.520 --> 01:10.160
那我们这一次呢就要需要用一个

01:10.160 --> 01:13.040
就是另外一种方式来处理啊

01:13.040 --> 01:16.560
就是这类的一些呃下一项吧

01:16.560 --> 01:18.800
好那首先我们来看一下

01:18.800 --> 01:20.480
接流接流是什么意思呢

01:20.560 --> 01:22.800
呃函数接流就是预定一个函数

01:22.800 --> 01:26.080
啊只有在大于等于执行周期时才执行

01:26.080 --> 01:27.920
周期内调用不执行

01:27.920 --> 01:32.480
就好像这个水滴必须的积攒到一定重量以后才能落下

01:32.480 --> 01:36.640
那么这里面指的不是水滴积攒到一定的重量才可以落下

01:36.640 --> 01:39.520
而是是呃而是是时间啊

01:39.520 --> 01:42.240
是时间到了一定这样的一个秒

01:42.240 --> 01:44.560
到了一定这样的一个长度吧啊

01:44.560 --> 01:47.520
ok 它才可以去执行是这样的实践

01:48.400 --> 01:51.200
那用的场景其实也很多

01:51.200 --> 01:55.600
就比如说呃进行这个页面一个调整和滚动的时候呢

01:55.600 --> 01:58.400
比如说你要进行一个铺流的一个布局或者说是

01:58.400 --> 02:01.040
呃进行这样的一个动态的页面夹载的话

02:01.040 --> 02:04.240
啊那那个时候呢我们需要用到这样一个接流的一个操作

02:04.240 --> 02:07.520
我们这些班里们呢也确实用到这个接流操作进行这种

02:07.520 --> 02:11.600
啊亚克斯或者说这种一步加加载的这样一个布局啊

02:11.600 --> 02:14.160
那那这一般呢由于时间的问题呢

02:14.160 --> 02:16.000
我们举一个简单的例子啊

02:16.080 --> 02:19.600
就是呃强够时候的这样那个疯狂点击的行为

02:19.600 --> 02:22.080
我们如何对这样的行为进行接流啊

02:22.720 --> 02:25.920
那去年他出的一件事情啊

02:25.920 --> 02:27.920
应该是阿里巴巴的一个员工啊

02:27.920 --> 02:29.520
但是两个员工啊

02:29.520 --> 02:32.560
这个内部快到他们他们这样的

02:32.560 --> 02:34.080
到了中秋节的时候呢啊

02:34.080 --> 02:36.080
他们那边平台提提供了一次

02:36.080 --> 02:37.760
就是你可以抢优惠券

02:37.760 --> 02:38.720
抢优惠券呢

02:38.720 --> 02:41.840
你可以在这个阿里巴巴内部去买这样的一个月饼

02:41.840 --> 02:43.040
你自己去吃啊

02:43.040 --> 02:45.280
那当然这个券打的结果是比较大的

02:45.280 --> 02:48.640
那有一些全单工程师就利用脚本啊

02:48.640 --> 02:51.440
去进行这样的一个点击的一个操作

02:51.440 --> 02:53.520
疯狂去抢这样的购物券

02:53.520 --> 02:55.200
那抢完了很多很多很多

02:55.200 --> 02:56.960
因为人正常的话

02:56.960 --> 02:59.600
你一秒钟你不可能点个几百次对不对

02:59.600 --> 03:00.960
那他们如果脚本这些的话呢

03:00.960 --> 03:03.440
一秒钟可能就上上千张券啊

03:03.440 --> 03:04.640
他抢了很多券以后的话

03:05.440 --> 03:08.560
后来对吧呃被阿里巴巴呃给开除

03:08.560 --> 03:09.520
给开除了

03:09.520 --> 03:13.360
当然当然呢这个结结局并不是一个悲剧的一个结局

03:13.360 --> 03:14.960
因为他一旦被开除以后的话

03:14.960 --> 03:18.240
其实好多家公司都争心恐吓的去抢的去要他们啊

03:18.240 --> 03:20.720
那呢我们并不是鼓励这种想回啊

03:20.720 --> 03:22.560
而是你要知道一点啊

03:22.560 --> 03:26.800
如果你在啊你在对这种就是购物车的这个按钮上面

03:26.800 --> 03:30.240
没有进行这种啊就是揭露的一个操作的话

03:30.240 --> 03:33.840
那稍微懂点技术的人就可以通过这种

03:33.840 --> 03:38.480
呃就是脚本式的这种触发事件啊

03:38.480 --> 03:41.600
进行这种疯狂的一个点点击

03:41.600 --> 03:43.360
那点击的话好

03:43.440 --> 03:47.120
那你就可能像服务器端疯狂的去发送这样的一个弦球

03:47.120 --> 03:49.600
那你服务器里面他不崩溃的话对吧

03:49.600 --> 03:51.360
那质都很很难

03:51.360 --> 03:53.760
你更别说你前端这样一件事情了啊

03:53.760 --> 03:56.880
那我们必然呢需要一种方式来阻止啊

03:56.880 --> 04:00.000
这一类的啊算是恶意攻击吧对吧

04:00.000 --> 04:00.880
那怎么办呢

04:00.880 --> 04:04.640
好那我们可以用这接流这样的一个思想去来做啊

04:04.640 --> 04:06.640
好那接流怎么来写呢

04:06.640 --> 04:08.000
我也来写一下

04:08.000 --> 04:10.080
那比如说在这呢我给你来个div

04:10.160 --> 04:12.080
在div的下面呢

04:12.080 --> 04:13.360
我在div里面吧

04:13.360 --> 04:14.400
我写一个

04:15.120 --> 04:15.600
瘦

04:16.240 --> 04:17.440
这样吧我就在div

04:17.440 --> 04:18.800
这个地方来个id吧

04:18.800 --> 04:20.240
id他叫的瘦就行了

04:20.240 --> 04:22.160
啊好我再来个screw标签

04:22.720 --> 04:26.640
那我们正常的话就是再给这个div注册事件的时候呢

04:26.640 --> 04:29.040
首先呢我要获取到这样的一个div

04:29.040 --> 04:31.840
DocumentGashElementByD

04:31.840 --> 04:33.680
在这的话我要把这个瘦获取到

04:33.680 --> 04:34.640
获取到以后的话好

04:34.640 --> 04:36.160
我给他保证一个点击事件

04:37.600 --> 04:38.640
好在这呢

04:39.600 --> 04:41.760
我去比如说做一件事情

04:41.760 --> 04:43.120
我每次点完以后的话

04:43.120 --> 04:44.960
我都要他这个

04:45.920 --> 04:48.480
让this the inner test

04:49.520 --> 04:50.720
ts test

04:51.600 --> 04:52.080
等于

04:52.720 --> 04:54.080
当然一开始让他等于一个0

04:54.080 --> 04:56.320
你抢购的这样的一个纸

04:56.320 --> 04:57.600
抢购这样的货物是0

04:57.600 --> 04:59.440
好了那每次呢我都让他

05:00.080 --> 05:00.560
等于

05:03.840 --> 05:05.040
等于他自己

05:06.560 --> 05:07.600
press in一下

05:07.600 --> 05:09.280
给他转成一个这样的一个

05:10.080 --> 05:10.800
数数字

05:11.760 --> 05:14.080
让他自己加上一个e

05:14.080 --> 05:14.560
好

05:15.120 --> 05:17.360
那这样的话我们可以来看一下

05:18.160 --> 05:20.480
当我点击这个open browser的时候

05:23.040 --> 05:24.480
可以当这个按钮对吧

05:24.480 --> 05:25.040
当这个

05:25.600 --> 05:26.560
对是他

05:26.560 --> 05:29.840
当我点他的时候呢会不断进行这样的一个增加

05:29.840 --> 05:31.680
当然呢为了更生动一些吧

05:31.680 --> 05:32.240
我这样

05:32.240 --> 05:32.880
我这样

05:32.880 --> 05:33.520
我在这呢

05:34.400 --> 05:35.200
给你写个按钮

05:35.920 --> 05:36.800
b u t t o n

05:37.200 --> 05:37.680
八成

05:38.240 --> 05:39.520
好再来个id

05:40.240 --> 05:41.040
他叫btn

05:41.760 --> 05:42.480
ok

05:42.480 --> 05:44.800
那这呢写个叫做clink

05:45.840 --> 05:46.640
clink

05:46.640 --> 05:48.160
那我在这呢好

05:48.160 --> 05:49.440
我再来个叫做

05:49.440 --> 05:51.360
work obtn

05:51.360 --> 05:53.200
好我现在通过点击按钮的方式

05:53.200 --> 05:55.680
去让这个di里面所显示的货物对吧

05:55.680 --> 05:57.280
去进行这样的一个增加

05:57.280 --> 05:59.360
那这样的话就更形象一些了

05:59.360 --> 06:01.360
那在这的话我也是要写个btn

06:01.360 --> 06:04.640
好那我这呢改成一个obtn

06:06.160 --> 06:08.880
那我在这里面呢把这个desk给他换成一个

06:09.120 --> 06:10.880
o di v就ok了对吧

06:10.880 --> 06:11.120
好

06:11.680 --> 06:12.960
o di v o di v

06:12.960 --> 06:14.720
ok保存这回我们再来一下

06:14.720 --> 06:15.520
感应一下

06:15.520 --> 06:16.640
那你点他的时候

06:16.640 --> 06:18.160
你疯狂去点击他的时候

06:18.160 --> 06:21.280
当然这个数字就这样一个疯狂的一个增加对吧

06:21.280 --> 06:21.840
好

06:21.840 --> 06:22.320
那呢

06:23.440 --> 06:24.480
有些时候呢

06:25.280 --> 06:27.200
我们在点击

06:27.200 --> 06:29.040
也可以一系列一个操作的时候

06:29.040 --> 06:30.160
我们不希望

06:30.160 --> 06:31.760
就是你点的越快

06:31.760 --> 06:33.680
他就一定能变得越快

06:33.680 --> 06:34.400
或者说是呢

06:35.360 --> 06:38.880
我不希望他在这个固定的时间内对吧

06:38.880 --> 06:39.840
你点击多少次

06:39.840 --> 06:41.600
我都给你去累积上面去

06:41.600 --> 06:42.240
而是呢

06:42.240 --> 06:42.960
比如说

06:42.960 --> 06:45.200
在这个一秒钟或在这个两秒钟

06:45.200 --> 06:46.480
你甭管点击多少次

06:46.480 --> 06:47.440
我都算你一次

06:47.440 --> 06:50.160
那这也是个节流本质上的一个思想

06:50.160 --> 06:51.040
那如果是这样的话

06:51.040 --> 06:51.840
好了我们看一下

06:54.480 --> 06:55.680
如果我们没有啊

06:55.680 --> 06:57.440
如果我们没有这种思想你做的话

06:57.440 --> 06:58.080
你当然呢

06:58.080 --> 06:59.760
你一定是你点的越快对吧

06:59.760 --> 07:00.880
他长的就越快

07:00.880 --> 07:01.600
而且呢

07:01.600 --> 07:02.320
你在这

07:02.320 --> 07:03.360
比如说你用一个

07:03.440 --> 07:06.000
恶意的脚本来去

07:06.000 --> 07:08.240
这样的进行对按钮的一个分款的点击

07:08.240 --> 07:10.080
那我在这可以这么来写啊

07:10.080 --> 07:11.040
写个放寻环

07:12.880 --> 07:13.520
嗯

07:13.520 --> 07:14.640
那写个放寻环

07:14.640 --> 07:16.320
不过一个i等于一个零

07:16.320 --> 07:17.120
好了

07:17.120 --> 07:17.920
i小于

07:19.040 --> 07:19.600
小于100

07:20.320 --> 07:20.880
1000吧

07:20.880 --> 07:21.200
好了

07:21.200 --> 07:21.760
i加加

07:22.320 --> 07:22.800
ok

07:22.800 --> 07:23.280
在这呢

07:23.280 --> 07:24.960
我去不断的

07:24.960 --> 07:27.200
拿到这个obtn去触发

07:28.560 --> 07:29.680
他的unkling时间

07:30.800 --> 07:31.360
好

07:31.360 --> 07:32.240
我一回车

07:34.080 --> 07:34.560
好

07:34.560 --> 07:35.760
当然是clink

07:36.800 --> 07:37.360
一回车

07:37.920 --> 07:38.160
好

07:38.160 --> 07:38.960
看一下

07:38.960 --> 07:40.480
这个地方就长了吧

07:40.480 --> 07:40.880
对吧

07:40.880 --> 07:41.360
好

07:41.360 --> 07:41.920
再来一次

07:42.480 --> 07:43.360
再来一次

07:43.360 --> 07:44.160
再来一次

07:44.160 --> 07:45.120
再来一次对吧

07:45.120 --> 07:46.560
只要拿这种unkling脚本

07:46.560 --> 07:47.760
去支撑一次的时候

07:47.760 --> 07:49.360
当你不断的去通过这个代码

07:49.360 --> 07:51.120
来触发这样的一个按钮的话

07:51.120 --> 07:51.840
他必然

07:51.840 --> 07:54.160
这个地方是进行这样的一个增长的

07:54.160 --> 07:54.480
ok

07:55.280 --> 07:55.520
那

07:56.880 --> 07:57.760
如果说啊

07:57.760 --> 08:00.480
我在进行这种真正的一个

08:01.120 --> 08:03.120
购物的一个争产的时候

08:03.200 --> 08:04.240
我点完这个按钮

08:04.240 --> 08:05.760
他就会发送一次请求

08:05.760 --> 08:06.880
告诉服机团的话

08:06.880 --> 08:08.080
我抢到了一个货物

08:08.720 --> 08:09.840
那如果说有人拿这个

08:09.840 --> 08:10.800
a脚本去写

08:10.800 --> 08:11.200
对吧

08:11.200 --> 08:12.800
瞬间就抢了1000个

08:12.800 --> 08:14.000
或者说1万个

08:14.000 --> 08:14.880
那你这样的话

08:15.440 --> 08:16.880
服机团存在不了

08:16.880 --> 08:17.600
这是一点对吧

08:18.080 --> 08:18.480
第二点呢

08:18.480 --> 08:19.280
就是你在

08:19.840 --> 08:21.440
这么快的发送网络请求

08:21.440 --> 08:22.560
你的溜软器也会造成

08:22.560 --> 08:23.600
这样的一个崩溃

08:23.600 --> 08:24.960
那我们本质上是不允许

08:24.960 --> 08:26.400
这种情况出现的

08:26.400 --> 08:27.360
那怎么办呢

08:27.360 --> 08:27.920
这一边呢

08:27.920 --> 08:29.440
就需要使用我们这样

08:29.440 --> 08:30.880
这个接流的操作了

08:30.880 --> 08:32.000
那首先呢

08:32.080 --> 08:33.360
我还是要给你写个函数

08:33.360 --> 08:35.040
叫做t h r o t t l e

08:35.040 --> 08:35.360
so

08:35.360 --> 08:36.480
不叫soto

08:36.480 --> 08:37.120
啊

08:37.120 --> 08:38.400
那这个函数呢

08:38.400 --> 08:38.880
好

08:38.880 --> 08:40.720
他跟我们之前那个讲deboss

08:40.720 --> 08:41.440
差不多

08:41.440 --> 08:42.880
他也需要接受一个

08:42.880 --> 08:43.120
哎

08:43.120 --> 08:44.160
接受一个函数

08:44.160 --> 08:45.760
那我就要对这个函数呢

08:45.760 --> 08:47.680
通过这个soto这个函数进行包裹

08:47.680 --> 08:49.440
完对它产生一个节奏的一个效果

08:49.440 --> 08:50.240
那在这呢

08:50.240 --> 08:52.400
首先来个hand hunter啊

08:52.400 --> 08:52.960
好了

08:52.960 --> 08:53.840
那之后呢

08:53.840 --> 08:54.480
第二个拆出呢

08:54.480 --> 08:55.360
我写个vitch

08:55.360 --> 08:56.560
这个vitch是什么意思呢

08:56.560 --> 08:57.920
比如说接流不是说

08:57.920 --> 08:58.560
呃

08:58.560 --> 09:00.560
当水滤积攒到一定重量之后

09:00.560 --> 09:01.760
才能进行下落嘛

09:01.760 --> 09:02.160
对吧

09:02.160 --> 09:03.600
那换成成时间的

09:03.600 --> 09:05.040
那换成成这样的一个时间的话

09:05.040 --> 09:07.600
就是必须得等等待对吧

09:07.600 --> 09:09.280
等待一定时间

09:09.280 --> 09:09.600
啊

09:09.600 --> 09:10.080
ok

09:10.080 --> 09:11.440
一定时间到达以后的话

09:11.440 --> 09:12.160
才能啊

09:12.160 --> 09:14.240
进行下次就能有效的操作

09:14.240 --> 09:16.160
否则你在这个等待时间之内

09:16.160 --> 09:17.680
你甭管操作多少次对吧

09:17.680 --> 09:18.000
啊

09:18.000 --> 09:19.520
你甭管你再行急

09:19.520 --> 09:19.920
ok

09:19.920 --> 09:21.360
他也一次都不执行

09:21.360 --> 09:21.680
好

09:21.680 --> 09:22.240
那这样的话

09:23.520 --> 09:24.320
我们就这样下来

09:25.520 --> 09:25.840
啊

09:26.560 --> 09:27.440
那首先

09:27.440 --> 09:29.760
我们在进行这样的一个soto的操作的时候吧

09:29.760 --> 09:30.800
我可以这么做啊

09:30.800 --> 09:31.680
首先我在这

09:31.680 --> 09:32.800
我把这个函数呢

09:32.800 --> 09:34.960
给你变成了一个命名函数

09:34.960 --> 09:35.520
啊

09:35.520 --> 09:36.080
比如说

09:36.080 --> 09:37.040
它就叫做by

09:37.040 --> 09:38.000
呃

09:38.000 --> 09:38.400
当然呢

09:38.400 --> 09:38.800
以前呢

09:38.800 --> 09:41.600
我们不用这样的一个soto来进行这样的一个接流的时候呢

09:41.600 --> 09:43.200
我们直接就是这么来写的对不对

09:43.200 --> 09:43.600
啊

09:44.080 --> 09:45.520
把这个by直接放到这里面来

09:45.520 --> 09:47.840
让它直接作为这个实验那个处理函数

09:47.840 --> 09:48.400
那现在呢

09:48.400 --> 09:49.760
有了这个接流函数以后的话

09:49.760 --> 09:51.040
我就需要通过它

09:51.040 --> 09:52.640
tsrotl1

09:52.640 --> 09:54.800
通过它来把这样的一个by

09:54.800 --> 09:55.120
好

09:55.120 --> 09:55.760
包裹一下

09:55.760 --> 09:56.320
完了呢

09:56.320 --> 09:57.920
你规定一下等待的时间

09:57.920 --> 09:58.640
就比如说

09:58.640 --> 09:59.600
等待一秒钟

09:59.920 --> 10:01.120
也就是说你在一秒钟

10:01.120 --> 10:02.560
不管你在一秒钟之内

10:02.560 --> 10:03.840
不管你执行多少次

10:03.840 --> 10:04.240
我只

10:04.240 --> 10:06.240
我只算你一次啊

10:06.240 --> 10:06.640
然后可以

10:09.120 --> 10:09.360
好

10:10.240 --> 10:10.560
那

10:10.560 --> 10:10.960
而且呢

10:11.840 --> 10:12.560
就是在一秒钟

10:12.560 --> 10:13.920
你不用点你多少次了吧

10:13.920 --> 10:15.280
我只算你一次

10:16.080 --> 10:16.240
啊

10:16.240 --> 10:17.280
那之后呢

10:17.280 --> 10:18.640
再点下一次呢

10:18.640 --> 10:20.400
就必须再等待这一秒

10:20.400 --> 10:21.040
一秒钟

10:21.040 --> 10:21.840
换句话说就是

10:21.840 --> 10:22.160
啊

10:22.160 --> 10:24.080
就是咱们要想最后实验的效果

10:24.080 --> 10:25.120
是你第一次啊

10:25.120 --> 10:26.000
点击的时候

10:26.000 --> 10:27.760
它一定会成功出发对吧

10:27.760 --> 10:28.400
好了

10:28.400 --> 10:28.880
之后呢

10:29.840 --> 10:30.960
在这个一秒钟之内啊

10:31.200 --> 10:31.680
是这样的

10:31.680 --> 10:32.560
在这一秒钟之内

10:32.560 --> 10:34.000
你再点就不知道死了

10:34.000 --> 10:34.160
啊

10:34.160 --> 10:35.200
但是一秒钟以后的话

10:35.200 --> 10:35.600
好

10:35.600 --> 10:36.400
我再点你

10:36.400 --> 10:37.520
算你一次啊

10:37.520 --> 10:37.840
对

10:37.840 --> 10:38.400
这个时候啊

10:38.400 --> 10:40.320
它才对对对对对对

10:40.320 --> 10:40.720
就是

10:41.280 --> 10:42.080
呃

10:42.080 --> 10:43.680
你在点击的时候呢

10:43.680 --> 10:44.320
第一次点击

10:44.320 --> 10:45.520
我应该算上这样的一个

10:45.520 --> 10:47.520
正式的成功出发之后的话

10:47.520 --> 10:48.080
好

10:48.080 --> 10:49.040
再来这样的一个

10:49.040 --> 10:50.480
就是再等待这个一秒

10:50.480 --> 10:51.680
在这一秒钟之内呢

10:51.680 --> 10:52.720
不管你执行多少次的话

10:52.720 --> 10:54.080
我都不算你成功出发

10:54.080 --> 10:54.640
对吧

10:54.640 --> 10:55.520
必须的时间

10:55.520 --> 10:56.560
积攒到一秒以后的话

10:56.560 --> 10:58.000
你才能进行下一次的出发

10:58.720 --> 11:00.480
那你再点完一次以后的话

11:00.560 --> 11:00.960
ok

11:00.960 --> 11:01.760
比如说

11:01.760 --> 11:04.080
下次是到1200毫秒时候

11:04.080 --> 11:04.320
好

11:04.320 --> 11:05.440
你再点击一次

11:05.440 --> 11:05.840
ok

11:05.840 --> 11:07.280
你点击万一一次以后的话

11:07.280 --> 11:08.480
它算你成功一次

11:08.480 --> 11:08.880
之后呢

11:09.440 --> 11:11.600
再重新累积这个一秒钟

11:11.600 --> 11:12.880
也就是说这这一秒钟

11:13.440 --> 11:14.880
也就是说从这个1200毫秒

11:14.880 --> 11:16.880
到这个2200毫秒之内的话

11:16.880 --> 11:18.400
不管你点击多少次的话

11:18.400 --> 11:20.080
我都不算你成功的去

11:20.080 --> 11:20.720
臭发

11:20.720 --> 11:21.200
那好了

11:21.200 --> 11:22.880
在2200毫秒以后的话

11:22.880 --> 11:23.920
你再次点击

11:23.920 --> 11:25.200
我才算你成功出发

11:25.200 --> 11:27.120
那本质上是要做这样的一个需求啊

11:27.120 --> 11:27.360
好了

11:27.360 --> 11:28.800
那咱们看一下怎么来写呢

11:28.800 --> 11:29.120
首先

11:30.000 --> 11:30.960
我在这呢

11:30.960 --> 11:32.320
给你挖一个值

11:32.320 --> 11:33.120
它叫做

11:33.120 --> 11:34.720
last time

11:34.720 --> 11:36.000
让它等于一个0

11:36.000 --> 11:36.960
等于一个0

11:36.960 --> 11:37.280
之后呢

11:37.280 --> 11:38.080
你要照这个速度

11:38.080 --> 11:39.600
之后应该反反一个函数

11:39.600 --> 11:40.480
那这个函数

11:41.520 --> 11:42.160
啊

11:42.160 --> 11:42.800
ok

11:42.800 --> 11:44.720
其实是作为对这个

11:44.720 --> 11:46.720
clink的一个事件处理函数呗

11:46.720 --> 11:48.080
那在这的话

11:48.960 --> 11:49.760
首先呢

11:49.760 --> 11:50.880
我要明确一点

11:50.880 --> 11:52.000
这个里面的this

11:52.720 --> 11:53.280
应该是谁啊

11:53.280 --> 11:54.720
应该就是这个ob10

11:54.720 --> 11:55.440
对吧

11:55.440 --> 11:56.880
那以前我们把bite

11:56.880 --> 11:58.560
作为它的一个事件处理函数的时候

11:58.560 --> 11:59.840
那这个bite里面的this

11:59.840 --> 12:00.960
应该是个什么ob10

12:00.960 --> 12:01.440
对不对

12:01.440 --> 12:01.840
啊

12:01.840 --> 12:02.960
那如果是这样的话

12:02.960 --> 12:04.000
我们在真正啊

12:04.000 --> 12:05.120
真正拿到这个hander

12:05.120 --> 12:07.120
在soto里面去执行的时候

12:07.120 --> 12:08.160
我们必须得考虑到

12:08.160 --> 12:09.200
这样一个this

12:09.200 --> 12:10.160
那一会怎么来写

12:10.160 --> 12:11.520
我们一会说啊

12:11.520 --> 12:12.640
除此之外的话

12:12.640 --> 12:13.120
你要知道

12:13.120 --> 12:14.960
如果说它作为这样一个点击事件

12:14.960 --> 12:16.720
那个事件处理函数以后的话

12:16.720 --> 12:18.400
当这个我点击完以后的话

12:19.040 --> 12:19.680
这个事件

12:19.680 --> 12:20.720
这个函数一旦出发

12:20.720 --> 12:22.480
里面第一个函数

12:22.480 --> 12:23.600
应该是事件对象

12:23.600 --> 12:25.200
这是系统跟我们去传入的

12:25.760 --> 12:26.400
那当然呢

12:26.400 --> 12:27.360
现在我们通过它

12:27.360 --> 12:28.400
包裹住以后的话

12:28.400 --> 12:30.240
我们拿它作为这样一个

12:30.240 --> 12:33.200
事件的一个处理的函数去给它

12:33.200 --> 12:36.080
那它是真正被执行的那个函数

12:36.080 --> 12:37.920
那这个里面的e

12:37.920 --> 12:40.560
采取的系统传进来这样的一个事件对象

12:41.120 --> 12:43.440
那我怎么能保证这个hander对吧

12:44.000 --> 12:47.200
它在这个时候依旧拥有这个事件对象呢

12:47.200 --> 12:49.120
这个也是我们要考虑的一个问题啊

12:49.120 --> 12:49.520
当然呢

12:50.160 --> 12:51.280
一会我们来说

12:51.280 --> 12:51.520
啊

12:51.520 --> 12:52.720
现在我们先不用管它

12:52.720 --> 12:53.680
现在我们先来看一下

12:53.680 --> 12:55.920
这个等待时间的一个问题啊

12:55.920 --> 12:56.480
那我在这儿

12:56.560 --> 12:58.000
比如说我握了一个叫做

12:58.000 --> 12:58.640
now time

12:59.760 --> 13:00.400
now time

13:00.400 --> 13:01.360
现在的时间

13:01.360 --> 13:02.960
last time是上一次的时间

13:02.960 --> 13:04.080
那我们要这个

13:04.080 --> 13:05.600
现在的时间是来记录

13:05.600 --> 13:06.320
就是来记录

13:06.320 --> 13:08.080
当你点击这个按钮

13:08.080 --> 13:09.040
那一时刻对吧

13:09.040 --> 13:09.360
好

13:09.360 --> 13:10.240
它就这样的一个世界

13:10.240 --> 13:11.280
那我用什么来做呢

13:11.280 --> 13:13.520
我可以这样用new date

13:14.720 --> 13:15.920
穿进一个新的对象

13:15.920 --> 13:16.480
在这呢

13:16.480 --> 13:17.760
来get time一下

13:17.760 --> 13:19.600
来获取一下当前的时间

13:19.600 --> 13:20.640
这个new date点

13:20.640 --> 13:22.240
get time是什么意思呢

13:22.240 --> 13:23.040
它是从

13:23.040 --> 13:23.760
当你这样

13:23.760 --> 13:24.480
当你通过它

13:25.120 --> 13:26.240
来穿进一个对象以后

13:26.240 --> 13:27.200
get time一下

13:27.200 --> 13:29.280
它是获取从1970年

13:29.280 --> 13:30.320
1月1日到现在的

13:30.320 --> 13:31.040
这样一个

13:31.040 --> 13:32.800
所过去的一个时间

13:32.800 --> 13:33.040
啊

13:33.040 --> 13:35.120
但是这个时间是换成成好秒的

13:35.120 --> 13:36.080
咱们看一下

13:36.080 --> 13:37.040
它是这样的对吧

13:37.040 --> 13:37.280
啊

13:37.280 --> 13:38.000
我再来一次呢

13:38.000 --> 13:38.640
它是这样的

13:38.640 --> 13:39.520
我再来一次呢

13:39.520 --> 13:40.480
它是这样的

13:40.480 --> 13:41.280
也要说

13:41.280 --> 13:42.800
我每次在追求它的时候

13:42.800 --> 13:44.080
这个时间都是不定的

13:44.080 --> 13:44.240
啊

13:44.240 --> 13:45.680
但是它是会去哪家的

13:45.680 --> 13:46.160
啊

13:46.160 --> 13:46.480
好了

13:47.280 --> 13:48.960
还有说我每次点击时候呢

13:48.960 --> 13:50.320
我都用它来记录一下

13:50.320 --> 13:51.280
当前那个时间

13:51.280 --> 13:52.400
就很精准了

13:52.400 --> 13:53.040
好

13:53.040 --> 13:54.240
那回到这个会取这个时间

13:54.240 --> 13:54.880
它有什么用呢

13:54.880 --> 13:56.160
我可以来判断一下

13:56.400 --> 13:57.040
如果呢

13:57.040 --> 13:57.200
哎

13:57.200 --> 13:59.040
你这一次点击的

13:59.040 --> 14:01.920
就是你这一次点击时候的这个时间

14:02.560 --> 14:03.280
好

14:03.280 --> 14:05.120
减去你上一次的时间

14:05.120 --> 14:06.640
是你上一次点击的时间

14:06.640 --> 14:07.680
当然那一开始的时候

14:07.680 --> 14:08.560
第一次啊

14:09.120 --> 14:10.080
第一次的时候

14:10.080 --> 14:11.360
它这个上一次的时间

14:11.360 --> 14:12.400
我就让它吃个零

14:12.400 --> 14:12.800
啊

14:12.800 --> 14:13.520
那你要知道我这个

14:13.520 --> 14:14.320
now time

14:14.720 --> 14:16.000
你去获取的时候

14:16.000 --> 14:17.520
它是这么大的一个处对吧

14:17.520 --> 14:18.080
那当然呢

14:18.080 --> 14:20.080
你从通过它去减它的话

14:20.080 --> 14:21.360
我去判断一下

14:21.360 --> 14:22.240
你当前的时间

14:22.240 --> 14:24.000
减去上市的时间

14:24.000 --> 14:25.840
是否大约这个等待的时间

14:26.000 --> 14:26.880
但你等待的时间

14:26.880 --> 14:28.080
你不可能等待

14:28.080 --> 14:28.560
对吧

14:28.560 --> 14:29.520
等待这么多个

14:29.520 --> 14:30.240
比它还要大了

14:30.240 --> 14:31.200
这个好秒数吧

14:31.200 --> 14:31.520
是吧

14:31.520 --> 14:32.880
所以说你第一次的时候

14:32.880 --> 14:33.760
它减它的话

14:33.760 --> 14:34.160
对吧

14:34.160 --> 14:35.600
一个这么大数去减零的话

14:35.600 --> 14:36.560
一定会大于它的

14:36.560 --> 14:37.280
那第一次的时候

14:37.280 --> 14:38.240
无论如何对吧

14:38.240 --> 14:39.760
它都会去执行

14:39.760 --> 14:40.320
好

14:40.320 --> 14:40.720
好了

14:40.720 --> 14:42.000
那执行以后第二次呢

14:42.480 --> 14:43.120
第二次的话

14:43.120 --> 14:43.360
好了

14:43.360 --> 14:43.840
我们就要

14:43.840 --> 14:45.840
请这种重新清理的一个累积了

14:45.840 --> 14:48.000
就像我们刚才在这写诸事的时候

14:48.000 --> 14:49.040
觉得那个例子一样

14:49.200 --> 14:49.600
啊

14:50.320 --> 14:52.080
那当我去点击的时候

14:52.080 --> 14:52.720
就好

14:52.720 --> 14:54.240
这次时间我记录了

14:54.240 --> 14:55.760
那针对于下次的时候呢

14:55.920 --> 14:56.560
其实

14:57.040 --> 14:57.520
呃

14:57.520 --> 14:59.760
那now time需要进行重新的计算

14:59.760 --> 15:01.040
但是last time

15:01.040 --> 15:02.160
也需要进行更新

15:02.160 --> 15:03.520
它不能一直踏到水里了吧

15:03.520 --> 15:03.920
啊

15:03.920 --> 15:04.640
所以说在这的话

15:04.640 --> 15:05.600
我用这个last time

15:05.600 --> 15:06.160
等于那个

15:06.720 --> 15:07.360
now time

15:07.360 --> 15:09.120
有时候这次进行完以后的话

15:09.120 --> 15:10.480
为了下次做准备

15:10.480 --> 15:10.880
对吧

15:10.880 --> 15:12.160
我让last time

15:12.160 --> 15:14.160
等于你这次执行的时间

15:14.160 --> 15:14.720
对吧

15:14.720 --> 15:16.240
那从这个时间之后

15:16.240 --> 15:19.040
我们再进行这样的一个累积

15:19.040 --> 15:19.920
如果好

15:19.920 --> 15:21.200
它减它的时间呢

15:21.200 --> 15:22.960
又大于这个等待时间以后的话

15:22.960 --> 15:24.560
才能进行执行的执行

15:24.560 --> 15:25.120
OK

15:25.200 --> 15:26.880
那咱看一下好不好宝石呢

15:26.880 --> 15:27.360
现在

15:28.240 --> 15:29.360
我去输出一下

15:29.360 --> 15:30.240
去输出一下它的

15:31.360 --> 15:31.680
呃

15:33.120 --> 15:33.440
this

15:34.080 --> 15:36.000
和这样的一个e

15:36.240 --> 15:36.480
啊

15:37.040 --> 15:37.680
但是呢

15:37.680 --> 15:38.800
看它好不好使的话

15:38.800 --> 15:39.200
其实呢

15:39.200 --> 15:40.720
你只需要去看这啊

15:40.720 --> 15:41.040
就是

15:41.760 --> 15:43.360
我父皇的去点击它

15:43.360 --> 15:44.480
你看它是不是啊

15:44.480 --> 15:46.160
有这样一个接流的一个功能

15:46.160 --> 15:46.640
好

15:46.640 --> 15:47.520
那这一块呢

15:47.520 --> 15:49.680
是一会我要为这个hander对吧

15:49.680 --> 15:49.840
呃

15:49.840 --> 15:52.160
另外一种形式的执行来做准备的

15:52.160 --> 15:52.320
对吧

15:52.320 --> 15:53.760
因为咱们刚才提了两个问题

15:53.760 --> 15:54.400
一个是this

15:54.400 --> 15:55.840
一个是实现对象对不对

15:55.840 --> 15:56.080
好

15:56.080 --> 15:56.960
那咱看一下

15:56.960 --> 15:57.760
我们首先来看一下

15:57.760 --> 15:59.200
这个接流操作功能吧

15:59.200 --> 15:59.440
啊

15:59.440 --> 16:01.440
它有没有被成功的去执行

16:01.440 --> 16:02.080
那在这的话

16:02.080 --> 16:02.800
我刷新一次

16:02.800 --> 16:03.200
看一看

16:04.080 --> 16:04.640
好

16:04.640 --> 16:06.080
看我疯狂的去点击

16:06.080 --> 16:07.360
疯狂的去点击对吧

16:07.360 --> 16:08.080
但是呢

16:08.080 --> 16:09.840
它依旧是出发的比较慢

16:09.840 --> 16:10.400
好

16:10.400 --> 16:12.160
那说它必须的等待一秒对吧

16:12.160 --> 16:13.840
之后才可以进行下一次的出发

16:13.840 --> 16:14.480
那在这的话

16:14.480 --> 16:15.120
看好了

16:15.120 --> 16:16.000
我这么做

16:16.000 --> 16:17.280
我疯狂的对我通过一个

16:17.280 --> 16:17.920
放新环

16:17.920 --> 16:20.000
通过脚本的方式来去抓它

16:20.000 --> 16:21.040
看现在可不可以呢

16:21.040 --> 16:21.760
我会说

16:21.760 --> 16:22.320
发现

16:22.320 --> 16:23.120
还是凭

16:23.200 --> 16:24.560
只能进行一次对不对

16:24.560 --> 16:25.120
那这样的话

16:25.120 --> 16:26.000
它就能

16:26.000 --> 16:28.880
阻止这种恶意脚本的这样的一个攻击了

16:28.880 --> 16:29.280
对吧

16:29.280 --> 16:31.520
也真正进行这样的一个接流的一个操作了

16:31.520 --> 16:33.360
但是现在有两个小问题啊

16:33.360 --> 16:34.560
一个是这个this

16:34.560 --> 16:35.840
这个this的是window

16:35.840 --> 16:36.560
一个是这个e

16:36.560 --> 16:37.840
这个e它是一个空

16:37.840 --> 16:38.320
啊

16:38.320 --> 16:39.760
那为什么是window呢

16:39.760 --> 16:40.480
很容易啊

16:40.480 --> 16:41.600
就是因为这个

16:41.600 --> 16:42.640
binds在指引的时候呢

16:42.640 --> 16:43.600
没有人去调用它对吧

16:43.600 --> 16:45.760
你也没有去改变它的一个this指向

16:45.760 --> 16:47.040
那为什么这个地方

16:48.480 --> 16:49.440
踏进的时候

16:49.440 --> 16:51.520
这个参数一没有值呢

16:51.520 --> 16:52.080
也很简单

16:52.160 --> 16:53.040
因为它指引的时候

16:53.040 --> 16:54.480
是你自己手中去调用的对吧

16:54.480 --> 16:56.640
你没法怎么去传这样的一个实际参数

16:56.640 --> 16:57.440
那怎么办呢

16:57.440 --> 16:58.480
我可以在这直接写个

16:58.480 --> 16:59.760
第二apply

16:59.760 --> 17:01.600
apply

17:01.600 --> 17:03.280
我这让手先去改变一下

17:03.280 --> 17:04.960
它的这样一个this指向

17:04.960 --> 17:06.160
那你要知道

17:06.160 --> 17:07.920
这个还是说你们的this对吧

17:07.920 --> 17:09.840
其实就是这个ob

17:09.840 --> 17:10.640
那在这呢

17:10.640 --> 17:12.480
我把这个this传到你们来

17:12.480 --> 17:14.080
去改变一下你的this指向

17:14.080 --> 17:15.760
那第二个参数怎么来传的

17:15.760 --> 17:16.480
apply啊

17:16.480 --> 17:18.400
是要求这个地方放一个中号

17:18.400 --> 17:19.520
放一个数

17:19.520 --> 17:20.480
放一个数组

17:20.480 --> 17:21.760
那这个数组呢

17:21.840 --> 17:23.360
最后会被打散开来

17:23.360 --> 17:24.240
作为这个

17:24.240 --> 17:25.360
函数进行的一个

17:25.360 --> 17:27.440
实际的参数来传入

17:27.440 --> 17:28.560
那这样好了

17:28.560 --> 17:29.360
这样的话你看好了

17:29.360 --> 17:30.480
我可以往这啊

17:30.480 --> 17:31.040
传什么呢

17:31.040 --> 17:32.160
传一个acquamance

17:32.160 --> 17:33.920
prgum

17:33.920 --> 17:34.880
mnts

17:34.880 --> 17:35.680
对吧

17:35.680 --> 17:37.760
那这个acquamance你要知道

17:37.760 --> 17:40.080
它里面存在是实际参数对吧

17:40.080 --> 17:41.120
那我们这个方

17:41.120 --> 17:42.240
我们这个方式

17:42.240 --> 17:43.200
作为这个

17:43.200 --> 17:44.320
实际的一个实际的处理函数

17:44.320 --> 17:45.200
在执行的时候

17:45.200 --> 17:46.400
它这里面这个参数呢

17:46.400 --> 17:48.080
是由这个系统来调用的

17:48.080 --> 17:49.680
而且传入了这样的一个实际对象

17:49.680 --> 17:51.520
那也就是说这个acquamance的地灵位

17:51.840 --> 17:53.600
它就是这样的一个实际对象

17:53.600 --> 17:54.320
那我在这里的话

17:54.320 --> 17:56.480
直接把这个acquamance传到里面来就可以了

17:56.480 --> 17:57.600
咱们保存一下

17:57.600 --> 17:58.480
现在你看一下

18:00.080 --> 18:00.880
刷新次

18:00.880 --> 18:02.400
我再去疯狂的点击的时候

18:02.400 --> 18:02.560
好

18:03.760 --> 18:05.120
这个des

18:05.120 --> 18:06.240
就是button

18:06.240 --> 18:07.920
这样的一个好意呢

18:07.920 --> 18:09.760
确实有了这样的一个实验对象

18:09.760 --> 18:10.400
ok

18:10.400 --> 18:12.000
那到目前为止的话

18:12.000 --> 18:13.760
我们已经算把这个节流

18:13.760 --> 18:15.440
已经都搞定了

18:15.440 --> 18:16.320
那具体呢

18:16.320 --> 18:19.520
它能如何进行更好的一个应用呢

18:19.520 --> 18:19.920
当然呢

18:20.880 --> 18:22.160
你可以去

18:22.160 --> 18:22.800
哎

18:22.800 --> 18:24.000
去关注一下

18:24.000 --> 18:25.360
我们这样的一个群

18:25.360 --> 18:25.760
当然呢

18:25.760 --> 18:27.840
首先也需要加下我们这样的一个小度

18:27.840 --> 18:29.200
加完小度以后的话

18:29.200 --> 18:31.040
小度会淡进行这样的一个

18:31.040 --> 18:32.240
我们的供应群之中

18:32.240 --> 18:33.680
那我们供应群中呢

18:33.680 --> 18:35.280
有好多好多同学

18:35.280 --> 18:37.200
在进行这种问题的一个讨论

18:37.200 --> 18:38.480
而我们的老师呢

18:38.480 --> 18:40.800
只要是有时间的情况下

18:40.800 --> 18:41.840
都会全天后的

18:41.840 --> 18:43.760
为大家公行的进行一个答疑

18:43.760 --> 18:46.240
如果你想提高你的技术

18:46.240 --> 18:48.160
如果你对前端很热爱的话

18:49.120 --> 18:50.960
欢迎来加我们这样的一个群中

18:50.960 --> 18:52.240
好

18:52.240 --> 18:52.800
那当然呢

18:52.800 --> 18:55.200
如果说你对后续的这样的一个应用

18:55.200 --> 18:56.880
还有这样的一个需求的话

18:56.880 --> 18:57.280
对吧

18:57.280 --> 18:59.360
也依旧可以加过这样的一个群中

18:59.360 --> 19:02.160
跟我们的老师进行这样的一个讨论

19:02.160 --> 19:03.280
好

19:03.280 --> 19:03.760
拜拜

