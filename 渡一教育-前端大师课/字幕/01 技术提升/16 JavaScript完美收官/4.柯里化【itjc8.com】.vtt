WEBVTT

00:00.000 --> 00:02.640
欢迎收看 你不知道GS专题系列的课程

00:03.280 --> 00:07.080
我是独一教育的CPU 也是前段技术的主负的人

00:08.080 --> 00:11.040
那今天呢 我们带来一个内容呢 叫做

00:12.360 --> 00:15.880
韩束编程的一个核心啊 叫做科理化

00:16.640 --> 00:20.360
那韩束式编程呢 其实现在广泛用到这种什么

00:20.720 --> 00:24.520
react.js 和react.js这种高级的框架之中

00:25.280 --> 00:27.400
那我们今天呢 来开始啊 给你讲一下

00:27.400 --> 00:30.360
这样的一个韩束式编程科理化的一个概念

00:31.080 --> 00:33.800
当然呢 韩束式编程除了有科理化以外 还有很多

00:34.040 --> 00:36.760
比如说包括全韩束 包括韩束组合等等等啊

00:36.760 --> 00:38.680
那我们这一期呢 先讲这样的一个核心

00:39.640 --> 00:42.200
那好了 这一般上有个这样的微迪百科的一个解释啊

00:43.160 --> 00:45.640
一个英文版的 如果你能看懂英文版的话啊

00:45.800 --> 00:48.520
你可以自己去看看 对吧 那你看不懂的话呢 也没关系啊

00:49.000 --> 00:50.920
我在这呢 给你翻译了一下啊

00:51.240 --> 00:55.080
有时候在数学和计券计科学之中 科理化呢 是一种将使用多个

00:55.400 --> 01:00.440
参数的一个韩束啊 准完成成一系列使用一个参数的韩束技术

01:01.560 --> 01:01.800
那

01:02.440 --> 01:03.880
展现这就是一个韩束

01:04.120 --> 01:07.160
它 比如说它需要你传用固定的四个参数

01:07.400 --> 01:09.800
但是呢 从我们科理化以后的话 这个韩束呢

01:10.200 --> 01:14.760
它可以一个韩束啊 它可以一个参数一个参数一个参数那么进行这样的一个传递

01:15.560 --> 01:18.200
好 那具体形式什么样子的话 咱之后说

01:18.440 --> 01:22.760
那现在我们来看一下 为什么对吧 前端对吧 前端为什么要使用这样的科理化呢

01:23.720 --> 01:27.640
首先 第一点啊 就是前端使用科理化的用途 主要就是应该

01:28.120 --> 01:32.200
主要就是在这样的一个简化代码的结构上 提高性能 维护性上

01:32.760 --> 01:37.560
一个方法 如果说就有一个参数的话 它有说强制了整个功能的一个单一性

01:38.360 --> 01:42.280
很赞人就做到这种功能的内举 而且是降低了偶和

01:42.840 --> 01:47.320
但是呢 它的优点呢 就是在降低代码的这样的一个重复性

01:47.720 --> 01:49.720
提高代码的一个适用性

01:50.200 --> 01:56.360
当然 这一话呢 我光拿这样那个理论的说明给你去听的话 你指定是不太能理解的 对吧

01:56.680 --> 02:01.320
这时候呢 我们要从科理化的一个原理实现来开始讲起

02:01.720 --> 02:04.680
之后呢 再来进行这种科理化的一个应用

02:05.240 --> 02:10.680
应用完理后的话 我们再进行这样的回顾以后的话 人就完全能了解科理化是什么样的一个概念了

02:10.920 --> 02:16.040
好 那这样的话 首先看一下调用形式啊 就比如说一个函数 这样按的一个函数呢

02:16.120 --> 02:21.000
它需要接受三个函数 那经过我们这种科理化的函数 一包过以后 反回了一个新的函数

02:21.400 --> 02:23.160
那这个函数呢 就可以

02:24.280 --> 02:24.600
这种

02:25.560 --> 02:27.560
圆弓号 圆弯号 圆弯号

02:28.040 --> 02:31.800
连续紧这种链式的一个函数的一个传入

02:32.440 --> 02:32.840
那ok

02:33.480 --> 02:37.080
那这是它一个调用形式 那这种形式呢 如何来实现呢

02:37.480 --> 02:38.280
那首先呢

02:39.000 --> 02:39.800
我们要从这种

02:40.120 --> 02:42.760
额 科理化的一个前奏开始讲起

02:43.240 --> 02:47.480
那我们不能直接上来就讲它 直接上去讲它的话 可能我们就懵了对吧 ok

02:47.880 --> 02:53.640
那也就是说你现在只要知道科理化大概是这样的形式就ok了 那我们继续呢 再往下一点一点给你来进行

02:54.200 --> 02:55.480
呃 实用的一个讲解

02:55.960 --> 02:57.000
好 那在这的话

02:58.360 --> 02:59.240
啊 当然呢

03:02.870 --> 03:03.910
呃 这个地方

03:04.470 --> 03:04.950
我给你

03:07.900 --> 03:08.460
删除一下

03:09.500 --> 03:11.820
好 那在这呢 我给你重新创建一个

03:12.460 --> 03:14.540
页面叫做curry

03:15.260 --> 03:16.060
点smile

03:16.860 --> 03:19.660
好 那在这呢 把它放到里面来

03:21.100 --> 03:21.660
决定一下

03:25.540 --> 03:29.620
好 那首先呢 还是我来去创建一下这样的结构

03:30.180 --> 03:32.500
我等有个警告不用管 它也不用管

03:33.060 --> 03:34.500
呃 创建这样的一个结构

03:35.380 --> 03:37.460
那在这呢 给你写scrub标签

03:37.460 --> 03:40.100
ok 首先我在这写个函数啊 就是ad

03:42.740 --> 03:46.500
这样吧 外这个函数呢 写上四个函数吧 abcd

03:47.060 --> 03:53.860
ok 那最后这个函数呢 执行完后 返回a加b加c 再加上一个b

03:55.060 --> 04:00.500
哦 那我在这写个桌式啊 它是需要固定啊 参数的

04:01.620 --> 04:05.060
写个paramount 对吧 应该是参数 这么我就直接写个

04:06.580 --> 04:07.220
pr

04:08.020 --> 04:10.580
pr pr吧 起码 写个pr 写个pr

04:10.980 --> 04:16.020
那在这的话 呃 但是参数的名字好 我还给忘了对不对啊 比较尴尬 没关系啊

04:16.020 --> 04:20.260
在这呢 呃 我来查一下应该是pr ms啊 对吧 parmas

04:20.820 --> 04:24.420
ok啊 那没有错 pr ms啊

04:25.780 --> 04:31.700
呃 刚才刚才就是脑子一浑哈 人家猛着了 这根单词觉得忘了

04:31.700 --> 04:36.900
好 那它是需要一个固定参数的一个函数啊 那这个固定参数就是需要你四个别对不对

04:37.300 --> 04:40.180
那如果说我们直接去调这个函数的时候 当然我必须是

04:40.500 --> 04:46.500
呃 完美传一二三四对吧 传这种四个参数 如果说你少传一点是不行的对吧

04:46.500 --> 04:51.380
但你多传的话 呃 也ok 但你多传的那些值怎么样呢 它是没有用的对吧

04:51.380 --> 04:57.700
好 那有说这个函数呢 是需要对吧 是需要你传四个固定参数之后的话才能完成这种对吧

04:57.700 --> 05:01.540
真正的一个功能 ok 那我们进行一个克里化的一个浅重呢

05:01.540 --> 05:08.260
就是要对这样的固定参数做一个处理啊 就是我允许它第一次的时候可以传呃

05:08.820 --> 05:14.820
一到四个参数之间 那下次再执行的时候呢 你必须把这个参数给我

05:14.820 --> 05:19.540
臭 臭 臭 去臭起 那这样的话 我给你写一个函数吧 它叫做

05:20.820 --> 05:27.140
呃 FIST 呃 FIST 固定的呃 P-A-R-M-A-S-O-Permas

05:27.940 --> 05:32.820
Karin 好 那我让它呢 接受一个函数做一个参数啊

05:33.380 --> 05:37.780
那当然呢 最后 调一个形式应该什么样呢 啊 推迟

05:38.420 --> 05:42.580
啊 最后调一个形式它应该是这样的 我为个new ad

05:42.580 --> 05:43.540
在这里呢 使用这个FIST P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-R-M-A-S-O-P-A-S-O-P-A-R-M-A-S-O-P-A-R-M-

06:12.580 --> 06:16.980
在下次的这个执行中呢 必须把这个四个参数凑齐 那我要说我这儿

06:16.980 --> 06:19.080
必须怎么样 必须得再传两个参数 对吧

06:19.080 --> 06:22.220
那好了 那如果说你这儿 你只传一个参

06:22.220 --> 06:26.980
那我是不是就得传 什么了 传三个参数 能把这个四个参数来凑齐吧 对不对

06:26.980 --> 06:29.180
那如果说这儿 你干脆就不传参了呢

06:29.180 --> 06:33.580
好 你不传参的话 好 那我这儿怎么样 就必须得传四个参了呗 对吧

06:33.580 --> 06:41.180
好 那 呃 本身是要求经过我这样的一个固定参数课里话这个函数

06:41.380 --> 06:46.380
呃 包裹以后的话 好了 返回一个新的这样那个函数 新的函数在经过的时候呢

06:46.380 --> 06:49.580
你传的参数呢 必须跟这一次包裹的时候

06:50.580 --> 06:57.380
好 从按到后面你传入这个参数的个数 算起啊 你相加一下等于这样那个四啊 就ok了

06:58.380 --> 07:02.580
啊 这是强势规定鸟这么做的 那怎么来实现呢 再来看一下

07:02.980 --> 07:07.580
首先你要知道 它经完以后 返回的也是必然是一个函数 那在这

07:08.080 --> 07:09.080
ok 我返回一个函数

07:11.380 --> 07:21.380
好 那在这呢 我还要做一件事情啊 就是 你要知道我在这儿去传 去进行这样的一个函数以后

07:21.380 --> 07:29.880
你传个参数呢 不只是一个 ad 还有后续几个参数的可能 那我在这儿呢 怎么来去把你后续的参数拿到手呢

07:29.880 --> 07:35.380
这个时候其实我们就需要用到 arguments 了 叫实际参数列表 对不对 好 那我在这儿呢 我问一个

07:35.780 --> 07:44.180
grg 让它呢 等于这个 arguments 啊 arguments 当你这么直接给的话 一个是不行的 首先再来看一下

07:44.580 --> 07:52.980
arguments 本身就是一个类数 还并非是一个数组啊 那好了 那当你这么传递实际参数以后的话 实际上它里面应该是 ad 1 和 ad 2 对不对

07:53.480 --> 07:55.180
到我们现在呢 你要知道

07:56.180 --> 08:01.680
这个第一个值呢 对我们来说是没有 我们要什么用的 我们只需要后面两个值 因为后面两个值呢

08:02.080 --> 08:06.680
才要作为这个函数所执行的一个 这个真正的一个参数

08:07.180 --> 08:10.980
那我需要把这两个参数给解取一下 怎么来解呢 也很简单

08:12.080 --> 08:20.680
好 那在这儿的话 我们可以通过这个 array.procable 原形上的一个方法slash 通这个方法呢 我借助它的方法

08:21.480 --> 08:27.880
去 把这个 arguments 从第一个开始的吧 给了这样一个解取

08:28.880 --> 08:36.080
那当然呢 如果说你觉得这个写法太长的话 你可以直接用一个空数组对吧 来进行这个slash called 一个渐渐的一个调用

08:37.080 --> 08:42.080
那好 那这里边我可以给你举个例子 咱大概去看看吧 对吧 到底什么样的一个用用图

08:43.980 --> 08:46.380
这样 我给你open browser 一下

08:48.680 --> 08:52.880
在这呢 给你点击一下检查 在这呢 我写个

08:53.680 --> 09:00.280
cancel ok 比如说我先问一个 ar 等一个数组行吧 叫做 a b

09:02.480 --> 09:08.480
c 但呢最好是一个类数组 那就是一个对象没对吧 那0 比如说来一个 a

09:09.880 --> 09:12.200
啊 完了之后呢 1 来个

09:13.600 --> 09:20.080
b 好 2 来个 c 但类数组就要求你这个对象呢 还有一个长度 last

09:21.080 --> 09:23.400
他是一个3一回车 那这样的话

09:24.480 --> 09:29.800
如果说我用一个 a 数组的slash方法 借助于他的方法呢

09:30.200 --> 09:36.480
是把这个array 当他说传到里面来 并且里面传个e 他最后呢 就会从这个第一位开始去解取 最后返回一个

09:36.760 --> 09:45.080
数组给你 返回一个b和c吧 对吧 那这边呢 我也是要这么做 把这个12变成数组 还给到这边来 那有什么用呢 好 当然是有用的了

09:45.400 --> 09:53.400
你要知道 呃 整个这个函数 把它包装以后的话 你这里面传两个餐

09:54.080 --> 10:00.320
传完以后的话 你返回一个新的函数 只有这个新的函数在执行的时候呢 好 他要把之前的这个

10:00.720 --> 10:10.840
参数和这个参数累积一下 再传到这个 add 里面发生一个真正的执行啊 那也就是说 我必须得在这个里面 对吧

10:11.440 --> 10:22.600
在这个 呃 返回这个函数之前 在这儿 把他这个函数执行的时候 你所传入的一个实际的参数 对吧 给他怎么样 给他解决回来

10:22.880 --> 10:33.600
给他保存一下 形成一个b包方便你今后经济这样的一个调用啊 ok 那这一步我们确实已经做到了 那做到有后的话 我们来看这儿啊 这你该怎么来写呢 其实

10:34.360 --> 10:46.440
也不难啊 我在这儿的话 首先做第一件事呢 就是当这个函数在执行的时候 你是不是也要去传这样的一个参数啊 对吧 而且这个参数其实呢 跟他也是一样的 是不是也是不固定的参数 对不对

10:47.000 --> 10:57.680
那不固定的参数的话 其实呃 就是给老师们常常那个话题对吧 我们在这儿呢 其实也表明了我们这样一个态度 就是凡是用到不固定的参数的时候呢 都用ugmas 来进行作呗

10:57.920 --> 11:07.320
好 那在这的话 我有拿到一个ugmas 那这个ugmas 是不是就是呃 在这个里面啊 在这种情况的话 这个ugmas 是不是应该是二和三了 对吧 二和三 好

11:08.440 --> 11:08.600
那

11:09.720 --> 11:18.840
在这个函数中 其实我们已经知道了 呃 因为这个函数执行的以后的话 必须把整个四个参数凑齐 凑齐以后的话 我们就要来执行这样的一个i分了

11:19.200 --> 11:27.360
好 那进行i分的时候 你是不是都把这个参数 联合这个参数 四个参数一并传到这里面来 对不对啊 那怎么来做呢

11:28.240 --> 11:30.400
啊 首先我这样问一个new

11:31.600 --> 11:41.600
rg啊 我让他等于谁 让他等于一个gamrg 他点儿肯看一下 我让他和谁来连接呢 当然是和我

11:42.360 --> 11:45.080
这一次的ugmas来连接的 对不对 我让

11:46.120 --> 11:50.120
数组 啊 记住数组stress方法 往里面传个ugmas啊

11:50.760 --> 11:54.880
当然呢 这里面我再添一个零 我把这里面的值全部都接取过来

11:55.240 --> 12:02.720
拼接到这里面来 那最后拼接完事 这个new rg应该是一到二到二到二到三了 对吧

12:03.160 --> 12:11.080
那就是这样的一个数数组了 那然后他以后的话 你要知道这个数组是真正记录了 对吧 这个ok add方法

12:11.840 --> 12:16.720
的所有的全部的一个参数 那当然你不能直接把这个new arg放里面来

12:17.040 --> 12:22.400
因为这样的话 你只能传你一个参数 他是一个数组而已 那怎么办呢 有时候在这我还是要借助一下

12:22.880 --> 12:31.120
fm的apply 在这我首先base的话 就是直接是你这个baseok的 对吧 直接就是这个函数进行的这样的一个环境

12:32.080 --> 12:35.520
那好了 那第二个参数就很重要了 你要传这样的一个数据 arg

12:36.400 --> 12:41.040
因为我们apply的吧 还是那一换 他要求的是你传入第二个参数呢 是一个数组

12:41.400 --> 12:46.080
这个数组呢 你们所有的值就特别这个函数实行的时候 这样的一个实际参数 对吧

12:46.640 --> 12:51.840
那这样的话 重众我们的一个下怀 那ok 那这个函数进行完以后的话

12:52.480 --> 12:55.600
就是我们最后做一个操作 或者说最后做一个处理吧

12:56.400 --> 13:00.720
因为你看好了 我们这个和爱的函数在函数的时候 是不是要出来什么1234对吧

13:00.960 --> 13:03.760
进行完以后呢 他有个返回只是返回他们这样的一个盒

13:04.480 --> 13:10.800
那ok 那我们经过这种包装以后再执行他以后对吧 我们好了把这个参数累积操起以后再执行他

13:11.280 --> 13:14.560
ok 其实这是在函数这个爱的 也就是说他最后呢会变成

13:14.880 --> 13:19.680
整个四个参数的一个盒 但是这个函数如果说你不给的显示的一个返回值的话

13:20.080 --> 13:26.400
他模样的回忆应该什么应该是按你放的对不对 那不行啊对吧 那我们必须还是的按照之前对吧

13:26.720 --> 13:31.120
没有可以的话这样一个形式啊 去来看一下他这样的一个返回的一个结果

13:31.520 --> 13:34.080
那我就得要求这门呢 必须的许论一下

13:34.560 --> 13:39.600
这样的一个函数啊 那咱看一下如果我这么做以后的话 我来支撑一下这个

13:40.240 --> 13:40.720
new app

13:41.760 --> 13:43.360
他是否能满足我们这样的需求啊

13:44.400 --> 13:47.040
好 上一次 这边确实是一个

13:47.520 --> 13:53.040
哎 八对吧 那如果说我这么做呢 这呢我只传一个参数了 那这我说就得传多个参数了对吧

13:53.280 --> 13:58.240
好了 传三个了啊 传三个 必须得操起四个嘛 那一二三四一家应该是多少吧 一家45

13:58.320 --> 14:01.040
二家35是10的呗对吧 好 上线下开

14:01.760 --> 14:08.000
18 ok 那没问题啊 那这个呢作为我们一个颗里话的一个前奏 就是可以通过他

14:08.400 --> 14:11.840
来怎么样来传为一个需要固定参数的一个

14:12.720 --> 14:16.480
函数对吧 ok 那后面的参数你也可以传

14:16.720 --> 14:24.160
你传完以后的话 他作为一个 他整体反为一个新的需要固定参数一个函数的一个参数的累积

14:24.400 --> 14:30.400
这句话不叫奥口对吧 比如说他反方一个新的函数 那这个新的函数呢也是需要一个固定的参数

14:30.560 --> 14:36.800
那到底需要固定多少个呢 取决于他本身需要多少个固定的参数

14:36.880 --> 14:41.040
害取决于呢 你这一次包装时候传的几个参数 比如说你这次需要4个对吧

14:41.600 --> 14:45.520
比如说这个函数你需要4个固定的参数 这里面你传了一个那ok

14:45.840 --> 14:49.120
那下次的话 我在击的时候我必须得穿3个对吧 累积成4个

14:49.440 --> 14:53.200
好 那他咱搞定以后的话 我们继续往下来啊

14:54.320 --> 14:59.680
现在我们来真正实现这样的一个颗粒化 颗粒化必须得保证一点 就是你现在我有个new ad

15:00.560 --> 15:03.600
好 我通过一个颗粒化的话 我往里面去传一个

15:04.320 --> 15:10.160
哎 需要固定参数的一个函数 我这么一传完以后这个new ad 它的执行的一个形式

15:10.880 --> 15:17.600
那就基本上就是很很随意了 你可以一次性的把所有参数全传出来 你也可以

15:19.040 --> 15:26.240
啊 比如说第一次传一个 第二次传两个 第三次呢 传一个分三波来传啊 当然呢

15:26.640 --> 15:31.600
这个分三波来传的形式有很多种 比如说我第一次传两个 我第二次传一个

15:31.920 --> 15:35.280
第三次传一个对吧 好 那这样我下来呢 就是

15:36.160 --> 15:41.040
我说可以分的传的 一个一个传形名啊 这么传也是没问题的

15:42.000 --> 15:49.040
啊 当然呢 我也可以这么传new ad 比如说先传两个 好 再传两个

15:50.480 --> 15:57.680
对吧啊 那大家你可以先传三个对不对 比如说再来一个new ad 先传三个一二三

15:58.720 --> 15:59.040
四啊

15:59.760 --> 16:01.280
好 四

16:02.400 --> 16:08.960
或者说是先传一个 我最后再传三个对吧 怎么传都ok

16:09.520 --> 16:12.800
啊 那你不管怎么传 这样我给你把这个都号全部打开啊

16:13.840 --> 16:23.140
好 也就是说你不管怎么传必必须在这个最后一次传的时候 把四个参数给我凑齐

16:23.380 --> 16:25.700
它才能发挥执政的一个功能

16:26.260 --> 16:32.180
啊 那当然呢 这几个参数传的时候最常用的其实还是这一种啊 那不管是

16:32.500 --> 16:36.740
呃 常用的是哪一种 我们必须得让这个new ad 具备这样的一个功能

16:37.140 --> 16:41.380
那好了 那就得考虑到我们这个可以函数怎么来写了对吧

16:42.260 --> 16:44.340
ok 那首先呢 颗里函数

16:45.620 --> 16:50.500
好 他需要接受一个参数 呃 当然这个参数呢必须是你传用的一个

16:50.820 --> 16:54.340
哎 固定参数的一个函数对吧 固定参数的函数

16:54.900 --> 16:57.220
p a i m s 啊

16:57.220 --> 16:59.700
最后一分好了呢 那之后呢

17:00.180 --> 17:04.180
可谓呢 也必须得反问一个函数啊 那这个函数呢

17:04.740 --> 17:08.820
ok 其实就是他对吧啊 那么可以的话呢 你会发发现呢 就是

17:09.380 --> 17:11.940
呃 他不要求你执行的这样的一个就是

17:12.740 --> 17:19.540
色数 你一次执行完 ok 对吧 你三次执行完也ok 你两次执行完呢也ok 你四次执行完也没有问题对不对

17:19.780 --> 17:21.300
但你必须得保证啊

17:22.020 --> 17:26.180
最后一次执行完以后的话 这个参数达到四个 这样就可以了

17:26.900 --> 17:34.180
那说经过我们颗里画的一个函数以后的话啊 比如说他啊 经过我们颗里画的函数这个另外的对吧

17:34.900 --> 17:38.260
其实呢 他本身上是期望你啊 期望你

17:38.900 --> 17:42.900
哎 这一次在执行我的时候啊 你传四个参数当我凑吗

17:43.380 --> 17:46.500
但这个只是期望啊 并不像刚才这个

17:47.060 --> 17:51.700
呃 你反正跟他的话 就是你必须得在这一次执行的时候给我去凑齐

17:51.940 --> 17:54.100
这不是这样的对吧 我们可以画呢 只是期望对不对

17:54.420 --> 17:57.700
我只是期望你这一次一次给我执行来凑齐

17:58.100 --> 18:02.100
你要没凑齐呢 没关系对吧 我希望你下次给我凑齐

18:02.340 --> 18:07.940
你下次再没凑齐怎么办呢 我就再期望你下次凑齐 反正就一直期望你对不对

18:08.100 --> 18:13.540
你最后一次最后要去凑齐的啊 那好了 那在这呢 我要写上啊 他叫做

18:14.020 --> 18:14.420
look

18:15.380 --> 18:17.140
for forward

18:18.420 --> 18:22.020
啊 期望对不对 look forward to吧 期望这个

18:23.940 --> 18:27.380
你把这个参数啊 给我凑齐

18:27.940 --> 18:31.460
那ok 那在这的话 我看我怎么来写这样可以画的一个函数呢

18:31.860 --> 18:36.420
啊 当然这个最外在这个形式已经有了 接下来呢 我们开始试一下里面的一个功能啊

18:36.580 --> 18:36.980
首先

18:37.860 --> 18:41.460
在这呢 我要握一个lands 啊 但是呢 我这里面要求这个可以画

18:41.780 --> 18:46.420
有个形参啊 害我形参也叫做lands啊 这个lands具有什么用呢 咱一会说啊

18:46.820 --> 18:49.380
那好了 我一个lands要lands等于什么呢lands等于一个

18:50.820 --> 18:55.860
啊 等于一个lands加上一个fm.lands啊 这句话什么意思呢

18:56.260 --> 19:04.340
ok 其实我想用这个或这个lands啊来记录一下啊 当前就是可以画出出行的时候 你所传用的这个参数

19:05.220 --> 19:07.460
啊 或说你所传用的这个函数

19:07.940 --> 19:15.700
它是需要几个参数啊 或者说是呢 它是期待你几个参数能把我这个需要的参数给凑齐的

19:16.260 --> 19:20.420
那好了 比如说你这次传的是一个ad 你在进行的时候传的是这个ad

19:20.580 --> 19:24.100
ad这样一个形参 干出出四个对不对 ok 那你要知道

19:24.660 --> 19:30.740
拿到一个hands数的名字再点lands以后的话 它就只带了这个形参的一个个数 换句话说就是

19:31.300 --> 19:38.580
啊 你ad点lands的话 反而就是这个函 函数啊 它应该需要的这样的一个参数的一个个数

19:39.060 --> 19:41.220
ok 那咱好像还在看这啊

19:41.940 --> 19:47.540
首先你第一次在使用它来使用你并没有传这样的一个第二个参数的吧 那有时候这个lands应该是一个空的

19:47.620 --> 19:53.220
那它就是一个安理范的 如果这是个安理范的情况下的话好了 你要知道它的一个判断逻辑就是

19:53.380 --> 19:59.780
叫做一整折一整折整 全价采为价 那你安理范的话你是假的 我需要看你后面

19:59.940 --> 20:06.420
那就相当于把后面这个东西反方给它了 那有时候这个lands最后是在第一次执行之后啊 它的lands呢

20:06.500 --> 20:12.660
就是fn点lands 换句话说就应该是400对吧 就是这个ad它所真正需要的这样一个参数的一个个

20:13.300 --> 20:16.660
参数的一个个数啊 那拿到它也有什么用呢

20:18.420 --> 20:22.180
当然啊 不要不要急对吧 我们暂往下来

20:22.420 --> 20:26.820
然后它以后的话 当然有很大的用处啊 我们最后返回一个hands数呢好了 返回这个hands数呢

20:26.980 --> 20:29.780
是这个new add 那new add在执行的时候呢

20:30.420 --> 20:36.660
当然那可以的话是期待你在这一次执行的时候对吧 你能把所有的这样一个参数给我凑齐

20:37.060 --> 20:41.940
那ok 那比如说我在执行它的时候 我这么来执行啊 我这么来执行的话 如果你凑齐的话

20:42.260 --> 20:45.700
那好了 那怎么样呢 我就来直接去执行你这个

20:46.340 --> 20:53.540
new add的呗 是吧 如果你没凑齐的话 那就我就期待你下次呗 对不对

20:53.780 --> 20:59.140
那好了 那这一把怎么算 怎么能看得出来你这一次传扬的参数是否是我需要的呢

20:59.540 --> 21:02.980
那好了 那你在执行它的时候 你要知道你实际传扬的参数是不定的

21:03.060 --> 21:07.300
所以说在这里面呢 我也用arguments来进行这样的一个实际参数的一个记录

21:07.700 --> 21:12.100
我看一下你实际传扬的参数啊 是否小于对吧 我所需要的是

21:12.180 --> 21:14.020
我这个fn所需要的这样一个

21:14.900 --> 21:17.140
固定的一个参数啊

21:17.700 --> 21:18.100
如果

21:18.740 --> 21:21.540
哎 是如果你小于的话 证明怎么说 你不满足对吧

21:21.700 --> 21:25.700
但是否则呢 否则证明你俩是相等的对不对 要是你传的参数

21:25.860 --> 21:31.220
跟我这个需要的参数是一样的 那在这的话我就可以去怎么样了

21:31.380 --> 21:38.260
去执行一下你这个add对吧 但在今天的时候呢 你当然不能传一个arguments了

21:38.580 --> 21:41.940
还是要像之前那样 我通过这个fn

21:42.900 --> 21:44.820
但这不是new add的 刚才应该是个

21:45.860 --> 21:47.220
不是这个new add的啊

21:47.860 --> 21:49.380
应该是你传过来的这个add

21:50.180 --> 21:55.220
add 但那这边呢 是fn对吧 好了 我是在这写个apply对吧

21:55.380 --> 22:00.020
apply 我在这呢 第一个才说放dans 第二个才说来直接放arguments

22:00.420 --> 22:01.220
这样就可以了

22:02.100 --> 22:06.020
但呢 我最后还是像之前跟你反回这样的一个fn一点

22:06.100 --> 22:06.500
apply

22:07.220 --> 22:10.100
这样的话 当你第一次传四个参数以后的话

22:10.340 --> 22:14.420
哎 ok 就完全的没问题了 咱可以来看一下行不行啊 我保存一次

22:15.140 --> 22:18.500
刷新字看一下 是不是10啊 44行

22:18.980 --> 22:20.740
它是10啊对吧 ok

22:21.380 --> 22:24.980
那可以的话 我们来看一下 如果你这次传的参数的吧

22:24.980 --> 22:27.860
这你这次传的参数它不满足怎么办

22:28.740 --> 22:31.220
对不对啊 比如说你这一次你就传几个参数呢

22:31.700 --> 22:32.660
你就传的两个参

22:33.060 --> 22:34.660
我说你就传了一个参先吧

22:34.660 --> 22:35.620
就传一个参

22:35.620 --> 22:38.260
当然说我这个arguments11参数列表里面只有一个字对吧

22:38.260 --> 22:41.860
那那是一小一次的呗 一小次怎么办呢

22:41.940 --> 22:44.740
ok 你看好了 那我这么做生平啊 我这样

22:44.740 --> 22:46.180
我问一个combat

22:48.180 --> 22:50.020
我让它等于

22:51.620 --> 22:54.980
等于中号fn

22:55.780 --> 23:00.020
第二concash 连接谁呢 连接这个中号

23:00.740 --> 23:02.100
第二slice

23:05.000 --> 23:07.800
往这 啊那slice 点靠一下 点靠

23:08.360 --> 23:11.400
往里面呢 去传一个字 叫做arguments

23:11.960 --> 23:13.480
那里面传一个0

23:13.480 --> 23:17.000
这什么意思呢 咱看这 我在执行它以后

23:17.000 --> 23:18.600
反回面是这个函数对不对

23:18.600 --> 23:21.640
那这个函数在执行的时候 我往里面传了一个惨的arguments

23:21.640 --> 23:23.880
是不是应该是一样 一小一次是不是这个lans啊

23:23.880 --> 23:26.040
这个lans是上一次这个b8是不是4啊

23:26.040 --> 23:28.760
一小一次的话 好 我问一个combat

23:28.760 --> 23:32.200
让它 我期望它是一个数组

23:32.200 --> 23:35.320
这数组呢 第一个 第一个指呢

23:35.320 --> 23:36.920
放的是一个函数

23:36.920 --> 23:40.120
这个函数呢 就是你上次传进来这个add对不对

23:40.200 --> 23:42.360
好 你说是你传来这个add

23:42.360 --> 23:45.880
那你传来这个 就是你上上这个数组的第二位是什么呢

23:45.880 --> 23:51.800
上上数的第二位 我期待啊 我期待它是你这一次传的一个参数

23:51.800 --> 23:57.240
那你这次传的参数 我怎么来给它放到这个数组里面呢

23:57.240 --> 24:01.080
当然是通过它来进行这种一个合并了对不对

24:01.080 --> 24:03.160
那首先在这呢 你要知道

24:03.160 --> 24:05.720
你传来的e会变成这个函数的arguments

24:05.720 --> 24:09.640
那还是按照上面这个套路给它截取成一个数组

24:09.640 --> 24:12.520
这么一截完以后的话 它是不是就相当于什么呢

24:12.520 --> 24:17.560
呃 它框开了concpt 框开了一个中号 here对吧

24:17.560 --> 24:21.320
当然呢 一连接完之后就变成一个f1了吧对吧

24:21.320 --> 24:23.880
ok 那这么做有什么用呢

24:23.880 --> 24:26.200
看好 现在我反回一个东西

24:26.200 --> 24:30.390
反回这个叫做固定

24:30.390 --> 24:33.030
叫做f对吧

24:33.030 --> 24:35.190
把它还得再注入注释回来啊

24:35.190 --> 24:37.750
反回它 它就用到了对不对

24:37.750 --> 24:42.390
好 我反回了一个固定的参数的个例话

24:42.390 --> 24:46.070
那在这的话 我在第二个参数的时候 我也是apply一下

24:46.070 --> 24:48.390
这个d 你们让它传一个des 你不用管

24:48.390 --> 24:50.950
第二个呢 我传一个combat

24:50.950 --> 24:52.630
这个地方稍微有点难理解啊

24:52.630 --> 24:55.510
但是没有关系 我们来说一说啊

24:55.510 --> 24:58.070
它在这个时候你看好了 是不是需要你传什么

24:58.070 --> 25:02.230
是不是需要你传一个 看是不是需要传一个函数作为第一个函数

25:02.950 --> 25:05.990
后面第二个函或者说后面第二个函的话

25:05.990 --> 25:08.470
都作为它反回这个参数

25:08.470 --> 25:11.510
下次进行的时候一个参数的累积对吧

25:11.510 --> 25:13.270
也有时候它反回一个函数呢

25:13.270 --> 25:17.270
在进行的时候需要你怎么样去累积一下

25:17.270 --> 25:19.750
跟这个参数去累积一下形成四个对吧

25:19.750 --> 25:22.470
或者说形成一个它所需要的一个参数

25:22.470 --> 25:24.710
最后就可以完全的去执行了

25:24.710 --> 25:27.350
ok 那这样的话首先那你看好了

25:27.350 --> 25:29.430
我这边是有这样的一个数组的

25:29.510 --> 25:32.310
这个数组呢 第一个只是函数

25:32.310 --> 25:38.150
第二个是呢 其实就是你传过来的这个给爱的的一个参数

25:38.150 --> 25:41.830
那这样的话 如果说我这么一返回对吧

25:41.830 --> 25:45.350
它用apply的方式把这combat的一传

25:45.350 --> 25:47.590
实际上是不是相当于这么来进了它了

25:48.790 --> 25:50.470
好 这么来进了 把这放iS分

25:50.470 --> 25:53.670
把这呢放一个iG里面那个e 是吧

25:53.670 --> 25:56.310
那ok 那如果是这样的话

25:56.310 --> 25:57.910
它反回那个新的函数

25:57.990 --> 25:59.750
那这个新的函数你看好了

25:59.750 --> 26:01.830
但我这么去执行完对吧

26:01.830 --> 26:03.270
就是当我这么去执行完

26:03.270 --> 26:05.030
它反回了一个新的函数

26:05.030 --> 26:07.750
那这个新的函数我再执行它的数

26:07.750 --> 26:10.790
也说必须要求我下一次把参数去凑齐

26:12.070 --> 26:12.950
这边对吧

26:12.950 --> 26:14.630
因为它是怎么样

26:14.630 --> 26:16.950
它在处理一个函数以后的话

26:16.950 --> 26:20.550
它是需要下一次必须把参数给我凑齐的

26:20.550 --> 26:22.550
但是呢科理话它不是这样的

26:22.550 --> 26:24.070
科理话是我期待对吧

26:24.070 --> 26:27.510
我期待你下一次给我把一些参数来凑齐

26:27.590 --> 26:28.790
那怎么办呢

26:28.790 --> 26:31.030
那好了 我们在合团来看一下

26:31.030 --> 26:33.430
科理话这个函数在执行的时候呢

26:33.430 --> 26:36.310
首先需要你传进来一个固定的什么

26:36.310 --> 26:38.390
需要固定参数的一个函数

26:38.390 --> 26:40.550
那你通过它这么一直行的话

26:40.550 --> 26:42.470
它反回一个新的函数呢

26:42.470 --> 26:46.150
就是一个必须固定的一个参数的一个函数

26:46.150 --> 26:47.990
因为我这一次对吧

26:47.990 --> 26:49.110
传进去一个e

26:49.110 --> 26:50.150
那下次的时候呢

26:51.190 --> 26:54.070
就必须得传三个就别把参数给我去凑齐

26:54.070 --> 26:54.630
那ok了

26:55.510 --> 26:57.030
那如果是这样的话

26:57.030 --> 26:59.590
好了 我返回的时候我就不返回它了

26:59.590 --> 27:02.230
我返回这个自身career

27:02.230 --> 27:04.550
我这么一包裹行不行呢

27:04.550 --> 27:07.750
首先它是一个需要固定参数的一个函数

27:07.750 --> 27:10.150
之内我们当前这种情况呢

27:10.150 --> 27:12.230
那它返回这个函数呢

27:12.230 --> 27:15.030
是需要三个固定参数的一个函数

27:15.030 --> 27:16.630
那我们通过科理话以后的话

27:16.630 --> 27:19.670
也就是说不是要求你对吧

27:19.670 --> 27:22.630
不是像我们刚才不通过它包裹的时候呢

27:22.630 --> 27:25.270
就是你必须这一次传三个

27:25.830 --> 27:27.510
那我通过它包裹以后的话

27:27.510 --> 27:29.830
当然我是期待你传三个对不对

27:29.830 --> 27:31.590
但是你不传的话是不是也没问题啊

27:31.590 --> 27:32.310
对吧

27:32.310 --> 27:32.630
ok

27:33.590 --> 27:35.190
那我这样这么做的话

27:35.990 --> 27:37.830
其实我还需要去传一个东西

27:37.830 --> 27:41.030
我还需要去传一个第二个参数来传什么呢

27:41.030 --> 27:43.910
就是首先我们看这一行

27:43.910 --> 27:45.110
你传 ad 的时候

27:45.110 --> 27:46.390
由于这个 ad 呢

27:46.390 --> 27:50.310
它有它有这样的一个行参的一个声明对不对

27:50.310 --> 27:53.110
那你 add less 它是四这个问题

27:53.110 --> 27:54.230
但是你这一次呢

27:54.390 --> 27:56.150
你这种低规的方式去调用的话

27:56.150 --> 27:57.270
你把它对吧

27:57.270 --> 27:57.670
哎

27:57.670 --> 28:00.150
它确实是一个需要固定参数的一个函数

28:00.150 --> 28:01.990
但你看它的返回的形式是

28:01.990 --> 28:03.830
它返回的形式是这样的一个

28:03.830 --> 28:04.870
哎匿名函数

28:04.870 --> 28:07.190
而且没有形成的一个声明

28:07.190 --> 28:08.550
那如果是这样的话

28:08.550 --> 28:10.230
你再把它当参数一传

28:10.230 --> 28:10.630
对吧

28:10.630 --> 28:11.830
它是ifn

28:11.830 --> 28:13.750
它在点less的话必然是零

28:13.750 --> 28:14.710
但是你知道

28:14.710 --> 28:15.670
真的于这种情况

28:16.470 --> 28:18.550
你第一次已经放了一个一了对吧

28:18.550 --> 28:18.950
好了

28:18.950 --> 28:20.470
那它反而那个函数呢

28:20.470 --> 28:22.470
应该是需要三个固定参数的

28:22.470 --> 28:23.430
那我在这呢

28:23.430 --> 28:25.350
需要给你明确的传一下

28:25.350 --> 28:26.950
你需要三个参数

28:26.950 --> 28:28.150
那怎么来传呢

28:28.150 --> 28:28.790
看看呢

28:28.790 --> 28:31.430
有我这个 less

28:32.230 --> 28:32.710
对吧

28:32.710 --> 28:35.430
要说这一次这个 add

28:36.310 --> 28:37.670
是我需要的一个固定的参数

28:37.670 --> 28:41.270
或者说是真正需要执行功能的这个函数

28:41.270 --> 28:42.710
它说需要参数四

28:42.710 --> 28:43.510
减什么

28:43.510 --> 28:45.910
减去我这一次 argument

28:46.790 --> 28:48.230
第二 less

28:48.230 --> 28:48.550
对吧

28:48.550 --> 28:49.830
我只传了一个一对不对

28:49.830 --> 28:50.630
那一减的话

28:50.630 --> 28:51.430
那就是三

28:51.430 --> 28:53.430
正好是它

28:53.430 --> 28:55.510
它执行完所返回的那个

28:55.510 --> 28:58.710
需要固定三个参数那个函数的一个需求

28:58.710 --> 28:59.910
那ok

28:59.910 --> 29:01.110
那当我这么喜欢以后的话

29:01.110 --> 29:02.550
其实你会发现一点啊

29:02.550 --> 29:04.070
科理化的本质呢

29:04.070 --> 29:05.910
是期望这个函数

29:05.910 --> 29:07.430
就是把它包裹以后的话

29:07.430 --> 29:08.630
返回一个这个函数

29:08.630 --> 29:11.590
是期望它在这一次进行的时候呢

29:11.590 --> 29:13.350
把参数给我凑成四个

29:13.350 --> 29:15.350
但如果说你没凑成四个怎么办呢

29:15.350 --> 29:17.750
我就再一次期望

29:17.750 --> 29:19.990
你下次能够去凑齐

29:19.990 --> 29:21.750
就说真的于这样的一个需求的话

29:21.750 --> 29:23.270
我们进行这种啊

29:23.270 --> 29:24.550
这种这样的一个封装

29:24.550 --> 29:25.910
首先反复一个函数

29:25.910 --> 29:26.310
当然呢

29:26.310 --> 29:28.790
如果说你这次参数来凑齐了

29:28.790 --> 29:30.150
你就给我完全的执行

29:30.150 --> 29:30.710
对不对

29:30.710 --> 29:33.670
我把所有的参数给你放在里面来执行

29:33.670 --> 29:35.030
但是如果说

29:35.030 --> 29:38.230
你这次的参数没有给我凑齐的话

29:38.230 --> 29:39.030
怎么办呢

29:39.030 --> 29:39.670
好了

29:39.670 --> 29:41.270
我返回一个什么

29:41.270 --> 29:44.310
我再次期待一个新的一个函数

29:44.310 --> 29:45.990
但这个新的函数呢

29:45.990 --> 29:48.630
是一个需要三个固定参数的一个函数

29:48.630 --> 29:49.430
并且呢

29:49.430 --> 29:51.190
它实际上跟你爱爱的

29:51.190 --> 29:54.790
是有这样一个密切的一个累积的一个联系的

29:54.790 --> 29:56.710
那我再传一下这样的一个餐里吧

29:56.710 --> 29:57.830
你需要三个

29:57.830 --> 29:59.110
前幕生命完以后的话

29:59.110 --> 30:01.110
咱再来看一下

30:01.110 --> 30:03.670
我这么去执行

30:03.670 --> 30:05.670
咱看到底可不可以啊

30:05.670 --> 30:08.150
46行刷新一次

30:08.150 --> 30:09.350
但没有包错对吧

30:09.350 --> 30:10.790
好这样我握一个A啊

30:10.790 --> 30:12.710
握一个NAM等于一个TAR

30:12.710 --> 30:13.990
我在这去输出这个NAM

30:13.990 --> 30:17.330
看可不可以

30:17.330 --> 30:18.770
事实问题吧

30:18.770 --> 30:20.210
我连续四次这么传我的话

30:20.210 --> 30:21.250
也依旧可以

30:21.250 --> 30:21.970
好了

30:21.970 --> 30:24.210
那这有什么用呢

30:24.210 --> 30:26.450
也就是说回到我们

30:26.450 --> 30:27.890
这样就是实际上跟你话

30:27.890 --> 30:29.090
我们已经都发事了

30:29.090 --> 30:30.610
那回到我们来

30:30.610 --> 30:32.210
回回回回到我们这样的一个应用

30:32.210 --> 30:33.010
怎么想再来看啊

30:33.010 --> 30:33.250
对吧

30:33.250 --> 30:34.050
它到底有什么用

30:34.050 --> 30:34.370
对吧

30:34.370 --> 30:35.490
应用可理化

30:35.490 --> 30:36.370
好了

30:36.370 --> 30:37.250
有什么用的话

30:37.250 --> 30:38.210
咱来看一下

30:38.210 --> 30:40.290
首先我们先不看这个PAT

30:40.290 --> 30:42.210
我先来看一下这个地方

30:42.210 --> 30:44.290
如果说我在这

30:44.290 --> 30:46.530
我有个叫做

30:46.530 --> 30:48.450
叫做

30:48.450 --> 30:51.010
叫做NewA1

30:51.010 --> 30:52.850
它的有一个NewAd

30:52.850 --> 30:55.250
这我传一个1

30:55.250 --> 30:55.810
好了

30:55.810 --> 30:57.650
我再握一个NewA2

30:57.650 --> 30:59.410
这我传一个NewAd

30:59.410 --> 31:02.690
一个2

31:02.690 --> 31:03.250
好

31:03.250 --> 31:04.450
那现在的话

31:04.450 --> 31:05.170
你看好了

31:05.170 --> 31:06.130
那我这么做

31:06.130 --> 31:08.770
我说我这刷新一次了

31:08.770 --> 31:11.810
我拿这个NewA1对吧

31:11.810 --> 31:12.530
我在进行的时候

31:12.530 --> 31:14.210
都说我传一个2 3 4

31:14.210 --> 31:15.970
那也就是说

31:15.970 --> 31:17.650
由于我第一次进行的时候

31:17.650 --> 31:19.090
传一个3是1对不对

31:19.090 --> 31:19.570
好了

31:19.570 --> 31:21.010
那我返回这个函数了

31:21.010 --> 31:22.210
那这个函数再进行的时候

31:22.210 --> 31:22.930
我传234

31:22.930 --> 31:23.890
把参数凑齐

31:23.890 --> 31:24.610
或者说这样

31:24.610 --> 31:28.920
我再传一个3和4

31:28.920 --> 31:29.720
那这样的话

31:29.720 --> 31:30.840
它就是10

31:30.840 --> 31:32.280
那这个NewA2呢

31:32.280 --> 31:33.560
这个NewA2由于你第一次

31:33.560 --> 31:34.840
传的参数是2对不对

31:34.840 --> 31:36.520
那我再传这个234的话

31:36.520 --> 31:37.480
咱来看一下

31:37.480 --> 31:39.320
这回是不是11了

31:39.320 --> 31:40.200
对吧

31:40.200 --> 31:41.160
也就是说

31:41.160 --> 31:42.040
我们可以通过

31:42.040 --> 31:43.720
可以通过这个NewAd

31:43.720 --> 31:45.880
往里面放一个固定的参数

31:45.880 --> 31:47.800
并且能放在参数以后的话

31:47.880 --> 31:49.320
这个NewA1

31:49.320 --> 31:50.920
它就是

31:50.920 --> 31:54.360
它是可以去进行这样的一个累积来使用的

31:54.360 --> 31:55.720
那我们再进行一步

31:55.720 --> 31:57.640
进行生的一个测试

31:57.640 --> 31:58.360
我现在这样

31:58.360 --> 32:03.800
我来个NewA1等于一个NewAd

32:03.800 --> 32:04.040
好

32:04.040 --> 32:04.680
我这呢

32:04.680 --> 32:05.560
给你来传一个

32:05.560 --> 32:06.040
不是说

32:06.040 --> 32:06.920
先传一个1

32:06.920 --> 32:07.240
好了

32:07.240 --> 32:07.720
我再来一个

32:07.720 --> 32:10.200
就NewA1

32:10.200 --> 32:13.800
等于一个NewAd

32:13.800 --> 32:14.840
我再传个2

32:14.840 --> 32:15.160
好了

32:15.160 --> 32:17.320
我再来个NewA1

32:17.320 --> 32:17.960
2

32:17.960 --> 32:18.200
好

32:18.200 --> 32:21.800
我再来传个NewAd3

32:21.800 --> 32:22.440
好

32:22.440 --> 32:23.480
这什么意思呢

32:23.480 --> 32:25.240
现在就是由于NewAd

32:25.240 --> 32:26.360
进行完以后对不对

32:26.360 --> 32:27.720
这个NewA1

32:27.720 --> 32:28.600
我当然等会

32:28.600 --> 32:29.800
我这边我不这么写

32:29.800 --> 32:31.080
它好传NewA1

32:31.080 --> 32:32.760
它好传NewA1

32:32.760 --> 32:33.320
这样的

32:33.320 --> 32:34.840
有时候这个NewAd在进行完以后的话

32:34.840 --> 32:35.400
我传个1

32:35.400 --> 32:36.760
这个1反划一个新的函数

32:36.760 --> 32:38.120
那这个新的函数呢

32:38.120 --> 32:38.760
在进行的时候

32:38.760 --> 32:41.480
你只需要凑齐那三个参数对吧

32:41.480 --> 32:44.040
这就可以是真正的进行这样的一个执行了

32:44.120 --> 32:44.600
那现在呢

32:44.600 --> 32:46.120
我把它再进行一遍对吧

32:46.120 --> 32:47.160
我一个传2

32:47.160 --> 32:47.400
好

32:47.400 --> 32:48.360
我再进行它一遍呢

32:48.360 --> 32:49.800
我一个传3对不对

32:49.800 --> 32:51.240
那我本身上呢

32:51.240 --> 32:52.440
就是让它

32:52.440 --> 32:54.200
自己进行两次

32:54.200 --> 32:55.800
那它这次在进行的时候

32:55.800 --> 32:56.760
反划一个新的函数

32:56.760 --> 32:57.960
叫NewA1

32:57.960 --> 32:58.600
那好了

32:58.600 --> 32:59.880
那由于我们进行这种

32:59.880 --> 33:01.880
接力式的一个累积对不对

33:01.880 --> 33:03.080
那它在进行的时候呢

33:03.080 --> 33:09.440
你只要去传NewA1

33:09.440 --> 33:09.840
反正呢

33:09.840 --> 33:11.360
你只要把这个四个参数

33:11.360 --> 33:12.640
册码就ok了

33:12.640 --> 33:13.200
1对吧

33:13.200 --> 33:13.760
给它

33:13.840 --> 33:14.240
2呢

33:14.240 --> 33:14.480
好

33:14.480 --> 33:15.200
3

33:15.200 --> 33:15.520
4

33:15.520 --> 33:16.560
四个参数对不对

33:16.560 --> 33:16.720
好

33:16.720 --> 33:18.160
那这个册码以后的话

33:18.160 --> 33:19.040
再看一下

33:19.040 --> 33:20.560
你就可以去真正的来

33:20.560 --> 33:21.360
执行一下

33:21.360 --> 33:21.920
那个

33:21.920 --> 33:23.040
按的一个功能吧

33:23.040 --> 33:24.000
那在这咱们看一眼

33:24.000 --> 33:25.120
上线4

33:25.120 --> 33:26.160
是不是8对吧

33:26.160 --> 33:28.080
有时候1加2加2加3

33:28.080 --> 33:29.520
它接着是等一个8

33:29.520 --> 33:30.880
那这样你看这了

33:30.880 --> 33:31.920
由于你这个一开始

33:31.920 --> 33:33.920
NewA1已经击了一个参数是1了

33:33.920 --> 33:35.680
那我在这你看好了

33:35.680 --> 33:37.920
这个地方是在给的击了一个参数是2对吧

33:37.920 --> 33:38.960
那在这呢

33:38.960 --> 33:39.920
我只是给的

33:39.920 --> 33:41.920
重新再击了一个参数是3

33:41.920 --> 33:42.560
也就是说

33:44.000 --> 33:46.000
它进行完以后的话

33:46.000 --> 33:47.760
在这个NewA1里面对吧

33:47.760 --> 33:50.000
已经传了两个参数是1 2了

33:50.000 --> 33:51.040
那好了这个

33:51.040 --> 33:52.240
它进行完以后的话

33:52.240 --> 33:53.440
我跟你说

33:53.440 --> 33:56.400
应该是1和3对吧

33:56.400 --> 33:57.200
那你要说

33:57.200 --> 33:59.920
它俩们都是借了两个参数

33:59.920 --> 34:00.800
那在这块的话

34:00.800 --> 34:04.400
我再写这个NewA1 2的话

34:04.400 --> 34:06.320
我也是把这个参数都凑齐

34:06.320 --> 34:07.600
来个2来个3的话

34:07.600 --> 34:09.040
咱们再来看一眼

34:09.040 --> 34:10.320
现在

34:10.320 --> 34:11.760
咱们把我存一下

34:11.760 --> 34:12.720
刷新一次

34:12.800 --> 34:13.680
是不是就是

34:13.680 --> 34:15.200
一个是8

34:15.200 --> 34:16.000
一个是9吧

34:16.000 --> 34:16.880
对吧

34:16.880 --> 34:18.880
那这样的一个形式

34:18.880 --> 34:20.080
我拿代码给你写的话

34:20.080 --> 34:21.520
你可能会觉得稍微有点懵

34:21.520 --> 34:23.120
但没关系啊

34:23.120 --> 34:24.080
再来看一下

34:26.400 --> 34:27.680
再来先看一下

34:27.680 --> 34:29.600
这样的一种情况

34:29.600 --> 34:31.600
我们克里化很常用的

34:31.600 --> 34:33.200
就是很常见一个应用的

34:33.200 --> 34:34.480
就是利用这个

34:34.480 --> 34:36.160
就是使用这样的一个阿迦克斯

34:36.160 --> 34:38.240
把它进行这样的一个克里化的一个操作

34:38.240 --> 34:40.720
因为你要封装一个阿迦克斯的函数的时候

34:40.720 --> 34:42.480
基本上传了几个参数

34:42.480 --> 34:44.080
首先是一个tap对吧

34:44.080 --> 34:45.040
你要

34:45.040 --> 34:48.640
就是你要以什么样的方式来进行这样的一个

34:48.640 --> 34:50.480
或者说这是一个

34:50.480 --> 34:53.360
其实本质上这个tap应该是个master的

34:53.360 --> 34:55.280
就是你要根据什么样的一个方式

34:55.280 --> 34:57.120
发生这样的一个请求对不对

34:57.120 --> 34:57.840
那之后呢

34:57.840 --> 35:00.960
你要向哪个url进行这样的一个请求

35:00.960 --> 35:01.280
之后呢

35:01.280 --> 35:02.720
你要发生什么样的一个数据

35:02.720 --> 35:03.760
你看好了

35:03.760 --> 35:04.880
如果说我们

35:04.880 --> 35:06.240
真的于这种情况对不对

35:06.240 --> 35:08.880
要像这个通过同一种方式

35:08.880 --> 35:11.120
像三个这样的一个地址地址

35:11.120 --> 35:13.680
发生同一个数据的话

35:13.680 --> 35:16.240
那ok

35:16.240 --> 35:18.320
那如果是这样的情况下的话

35:18.320 --> 35:19.840
你就会决算

35:19.840 --> 35:22.880
我会重复的写很多是这个poss

35:22.880 --> 35:23.680
poss

35:23.680 --> 35:24.800
poss对吧

35:24.800 --> 35:25.680
重复的写

35:25.680 --> 35:26.000
而且呢

35:26.000 --> 35:27.200
我发生了一下克斯请求

35:27.200 --> 35:28.240
这样的一些操作

35:28.240 --> 35:29.520
在前的一面中呢

35:29.520 --> 35:31.040
实际上是很常用的

35:31.040 --> 35:32.080
那如果说

35:32.080 --> 35:33.920
我们用克里化给的进行这样的一个

35:33.920 --> 35:35.200
改进以后的话

35:35.200 --> 35:35.920
好了

35:35.920 --> 35:36.720
那

35:37.680 --> 35:39.040
把它对吧

35:39.040 --> 35:39.920
返回以后

35:40.000 --> 35:40.800
我通过它

35:40.800 --> 35:42.080
往里面传第一个参数

35:42.080 --> 35:43.360
反而一个poss的

35:43.360 --> 35:45.120
那这个poss这个函数呢

35:45.120 --> 35:47.120
可以被无限次的重复使用

35:47.120 --> 35:47.520
好

35:47.520 --> 35:48.160
而且呢

35:48.160 --> 35:50.240
每次重复使用的时候呢

35:50.240 --> 35:51.920
由于你之前已经累积了

35:51.920 --> 35:53.520
以第一个参数就poss的

35:53.520 --> 35:54.720
所以说每次使用的时候呢

35:54.720 --> 35:55.760
你只需要传

35:55.760 --> 35:57.360
额外的两个参数就ok了

35:57.360 --> 35:57.760
好

35:57.760 --> 35:58.560
那这样的话

35:58.560 --> 36:01.440
就大大的去缩减了你们之前的吧

36:01.440 --> 36:03.120
所调的这样的一个

36:03.120 --> 36:03.520
呃

36:03.520 --> 36:05.360
就所传用的这样的一个参数

36:05.360 --> 36:05.920
啊

36:05.920 --> 36:06.240
好了

36:06.240 --> 36:08.160
那我们来简单来模拟一下行吧

36:08.320 --> 36:09.920
但我这边不用ax了

36:10.800 --> 36:14.080
而是不用真正的这个ax来进行这个复习的请求

36:14.080 --> 36:15.280
只是大概的给你来

36:15.280 --> 36:17.040
进行这样的一个前半的一个模拟

36:17.040 --> 36:18.880
但安甲克斯这样的一个操作的话

36:18.880 --> 36:19.840
我们之后呢

36:19.840 --> 36:20.720
呃

36:20.720 --> 36:21.840
在我们这样的一个

36:21.840 --> 36:23.200
独一的后续的客用之中呢

36:23.200 --> 36:25.280
然后给你们进行这样的一个选用的讲解

36:25.280 --> 36:25.760
啊

36:25.760 --> 36:27.600
那主要是在这个我们就业班之中

36:27.600 --> 36:27.920
啊

36:27.920 --> 36:29.040
因为我们就业班呢

36:29.840 --> 36:30.400
呃

36:30.400 --> 36:32.080
讲的内容覆盖面比较广

36:32.080 --> 36:32.880
而且比较深

36:32.880 --> 36:34.800
主要是帮助同学去就业的

36:34.800 --> 36:35.760
在内呢

36:35.760 --> 36:37.040
会给大家普及

36:37.040 --> 36:39.600
和生物去讲解很多网络这样的一个知识

36:39.600 --> 36:40.880
当然还有什么前灯功能化

36:40.880 --> 36:41.680
还有ESO

36:41.680 --> 36:43.360
还有还有什么这样的一个

36:43.360 --> 36:44.240
呃

36:44.240 --> 36:45.040
JACQUERY

36:45.040 --> 36:45.520
啊

36:45.520 --> 36:47.280
H5 CS3等等等啊

36:47.280 --> 36:49.920
包括了基本上主流基础的所有的一个面

36:49.920 --> 36:50.480
嗯

36:50.480 --> 36:51.040
当然呢

36:51.040 --> 36:53.040
如果说业班你喜欢以后的话

36:53.040 --> 36:53.680
呃

36:53.680 --> 36:55.360
你还想继续再深造的话

36:55.360 --> 36:56.720
我们还有这样的一个进阶板

36:56.720 --> 36:58.960
进阶板里面就随着很多这种设计模式

36:58.960 --> 37:00.720
包括我们今天所这样讲的一些

37:00.720 --> 37:02.080
高级的一个编程

37:02.080 --> 37:02.320
啊

37:02.320 --> 37:03.520
当然还有什么VUE

37:03.520 --> 37:04.720
这种主流框架的一个应用

37:04.720 --> 37:05.600
VUE S

37:05.600 --> 37:06.080
啊

37:06.160 --> 37:09.040
包括这个它的实际理念和缺码的一个实用讲解

37:09.040 --> 37:11.040
但包括诺德GX这样的一个全站开发

37:11.040 --> 37:12.080
咱们都会去讲的

37:12.080 --> 37:12.720
啊

37:12.720 --> 37:13.040
ok

37:13.040 --> 37:14.400
那咱这样啊

37:14.400 --> 37:15.040
不说那么多

37:15.040 --> 37:17.040
咱再回到这个颗里话里面

37:17.040 --> 37:18.480
这样那个应用啊

37:18.480 --> 37:18.960
首先呢

37:20.000 --> 37:20.240
好

37:20.240 --> 37:20.880
我写一个哎呀

37:20.880 --> 37:22.160
可是这个韩诗啊

37:22.160 --> 37:22.560
好

37:22.560 --> 37:23.120
假如呢

37:23.120 --> 37:25.120
这门你需要穿三个层叫MASTER的

37:26.240 --> 37:27.040
MASTER的

37:27.040 --> 37:27.760
URL

37:27.760 --> 37:28.720
好像一个data对吧

37:29.520 --> 37:30.080
呃

37:30.080 --> 37:30.720
穿上它的话

37:31.440 --> 37:31.920
ok

37:31.920 --> 37:32.640
如果说

37:32.640 --> 37:33.440
我们要像啊

37:33.440 --> 37:35.920
我们要以POST的方式

37:36.000 --> 37:41.540
像3w.teste.com

37:41.540 --> 37:42.180
好

37:42.180 --> 37:42.820
发送数据

37:42.820 --> 37:43.700
比如说叫做

37:43.700 --> 37:44.660
name等于

37:44.660 --> 37:45.140
s7

37:46.180 --> 37:47.060
and

37:47.060 --> 37:47.380
呃

37:48.020 --> 37:48.660
呃

37:48.660 --> 37:49.780
code等于

37:49.780 --> 37:50.260
11

37:51.460 --> 37:51.940
好

37:51.940 --> 37:52.980
那之后呢

37:52.980 --> 37:53.300
好

37:53.300 --> 37:54.980
也要以POST的方式呢

37:54.980 --> 37:55.700
像它

37:55.700 --> 37:56.980
发送另外一个数据

37:56.980 --> 37:57.620
那叫做

38:01.010 --> 38:01.570
好

38:01.570 --> 38:02.610
比如叫做这个

38:02.610 --> 38:03.090
key

38:03.090 --> 38:03.970
等于

38:03.970 --> 38:04.370
22

38:04.930 --> 38:05.570
好

38:05.570 --> 38:06.370
那之后呢

38:06.370 --> 38:08.130
还要用一个POST请求呢

38:08.210 --> 38:11.010
像3w.testr

38:11.010 --> 38:11.970
去发送数据

38:12.610 --> 38:13.490
啊

38:13.490 --> 38:14.530
比如说

38:14.530 --> 38:15.010
也是

38:16.930 --> 38:17.970
这个值

38:17.970 --> 38:18.450
拉过来

38:20.880 --> 38:21.360
好

38:21.360 --> 38:23.360
那最后还是以POST的方式对不对

38:25.520 --> 38:26.480
来进行

38:26.480 --> 38:27.520
这样的一个处理

38:27.520 --> 38:27.680
啊

38:27.680 --> 38:28.080
叫做

38:28.800 --> 38:29.280
test

38:31.440 --> 38:32.160
testr

38:35.040 --> 38:35.360
好

38:35.360 --> 38:36.000
在这呢

38:36.000 --> 38:36.560
再来一个

38:37.520 --> 38:38.160
叫做key

38:40.400 --> 38:40.720
啊

38:40.720 --> 38:40.960
不

38:40.960 --> 38:41.760
当一个

38:41.760 --> 38:42.240
11

38:43.360 --> 38:43.760
好

38:45.120 --> 38:46.160
那如果是这样的情况下的话

38:46.160 --> 38:46.960
我们用andrex

38:46.960 --> 38:48.400
来进行这种发送请求的话

38:48.400 --> 38:50.000
假如这个请求已经

38:50.000 --> 38:50.960
假如这样的一个

38:50.960 --> 38:51.920
andrex

38:51.920 --> 38:53.280
含书已经复整好了

38:53.280 --> 38:53.840
那我们

38:53.840 --> 38:54.480
在调的时候

38:54.480 --> 38:55.680
是不是都平凡的去这么做呀

38:56.320 --> 38:57.680
传一个POST对吧

38:57.680 --> 38:57.920
好

38:57.920 --> 38:58.480
这呢

38:58.480 --> 38:59.200
再传一个

39:00.080 --> 39:00.320
啪

39:02.000 --> 39:02.480
这呢

39:02.480 --> 39:03.840
我再传一个参数对不对

39:08.020 --> 39:08.340
ok

39:08.980 --> 39:09.140
那

39:10.180 --> 39:12.020
第二次在发送请求的时候呢

39:12.180 --> 39:12.420
哎

39:12.420 --> 39:13.940
你依旧需要这么做

39:13.940 --> 39:15.460
只不过这个参数呢

39:15.460 --> 39:16.740
前面两个没变

39:16.740 --> 39:17.540
到这呢

39:17.540 --> 39:18.260
你却变了

39:19.780 --> 39:20.500
是吧

39:20.500 --> 39:20.900
好

39:20.900 --> 39:21.540
那之后呢

39:21.540 --> 39:22.900
再发送请求的时候呢

39:24.980 --> 39:26.180
基本上还是这样的

39:27.860 --> 39:28.180
嗯

39:28.980 --> 39:29.940
就是这呢

39:29.940 --> 39:30.420
写个2

39:31.060 --> 39:31.540
这样吧

39:31.540 --> 39:33.460
我这个参数你们要传11啊

39:33.460 --> 39:33.860
11

39:33.860 --> 39:35.380
这里面我要传11

39:35.380 --> 39:35.620
好

39:35.620 --> 39:37.300
这位传个11

39:38.660 --> 39:39.140
啊

39:39.140 --> 39:39.940
这就传2了

39:39.940 --> 39:40.820
就传2了

39:40.820 --> 39:41.460
那就传2

39:42.580 --> 39:42.980
嗯

39:43.620 --> 39:44.660
这传2

39:44.660 --> 39:45.300
好

39:45.300 --> 39:45.860
那这呢

39:46.580 --> 39:48.420
又后面和这样的一个call的

39:48.420 --> 39:48.820
call的对吧

39:48.820 --> 39:49.700
都应该是一样的

39:50.260 --> 39:50.740
好

39:50.740 --> 39:51.460
那比如说

39:51.460 --> 39:53.540
就只能于这样的一种请求

39:53.540 --> 39:53.860
啊

39:53.860 --> 39:55.460
只能于发送这样的四个请求

39:55.460 --> 39:56.820
你会发发现呢

39:56.820 --> 39:59.140
我用爱亚克斯来进行这样调用的时候呢

39:59.860 --> 40:00.900
参数

40:00.900 --> 40:02.660
尤其这个越往

40:02.660 --> 40:04.580
越往前的这种参数的重复力

40:04.580 --> 40:06.100
它就越高对不对

40:06.100 --> 40:08.180
你看这个POST重复了四遍

40:08.180 --> 40:10.180
TES呢重复了两遍

40:10.180 --> 40:10.900
对不对

40:10.900 --> 40:11.380
那好了

40:12.340 --> 40:13.220
那如果说

40:13.220 --> 40:14.740
我们不进行颗粒化的话

40:14.740 --> 40:15.940
当然我们这么显得的话

40:15.940 --> 40:17.540
也又可以使用这样一些功能

40:17.540 --> 40:19.220
但是我们使用颗粒化以后的话

40:19.220 --> 40:20.260
咱看一下

40:20.260 --> 40:21.780
颗粒化是可以

40:21.780 --> 40:24.420
可以这样低代码重复性的

40:24.420 --> 40:25.220
提高代码

40:25.220 --> 40:26.580
适用性的对不对

40:26.580 --> 40:27.540
那也就是说

40:27.540 --> 40:28.180
我在这里呢

40:28.180 --> 40:29.620
可以你进行这样一个操作啊

40:30.260 --> 40:31.300
我不去使用它

40:31.940 --> 40:33.300
我不去这么平凡的

40:33.300 --> 40:34.100
傻傻的对吧

40:34.100 --> 40:35.860
进行这个四次的一个调用

40:35.860 --> 40:37.940
还是我先握一个cu

40:37.940 --> 40:40.340
叫做爱亚克斯CURY

40:40.500 --> 40:42.580
然后它呢等于这个CURY

40:44.580 --> 40:45.940
啊往里面传爱亚克斯

40:47.220 --> 40:48.820
好那我可以这么做

40:49.700 --> 40:50.980
呃我这呢

40:50.980 --> 40:52.340
再握一个POST

40:52.980 --> 40:53.940
爱亚克斯

40:53.940 --> 40:54.980
我让它呢等于

40:56.740 --> 40:57.780
爱亚克斯Carry

40:58.340 --> 41:00.420
往里面先传一个POST

41:01.540 --> 41:02.820
那这样的话

41:02.820 --> 41:04.900
我这个POST爱亚克斯拿到手以后的话

41:05.940 --> 41:08.100
我每次在执行它的时候

41:08.180 --> 41:12.340
都是它已经先累计了一个这样的参数

41:12.340 --> 41:13.220
那比如说

41:13.220 --> 41:14.660
我再去执行它

41:14.660 --> 41:16.580
再去执行它的时候对不对

41:16.580 --> 41:18.340
我都可以直接只传后面两个参数

41:18.340 --> 41:19.220
就ok了对吧

41:19.220 --> 41:20.340
比如说首先来一个

41:25.250 --> 41:25.810
TEST

41:26.610 --> 41:27.410
1.COM

41:27.410 --> 41:28.370
在这呢

41:28.370 --> 41:29.810
来一个TEST2.COM

41:29.810 --> 41:30.370
但是呢

41:30.370 --> 41:31.810
它需要传一个参数啊

41:31.810 --> 41:33.010
比如说它叫做一个

41:34.210 --> 41:34.610
好

41:34.610 --> 41:36.050
那两参数成一样了吧

41:36.050 --> 41:37.010
比如说它是它

41:37.010 --> 41:38.290
好了它也是它

41:38.290 --> 41:39.090
OK

41:39.090 --> 41:39.890
那这样的话

41:39.890 --> 41:40.930
咱们来看一眼

41:40.930 --> 41:41.650
行不行呢

41:41.650 --> 41:42.130
当然呢

41:42.130 --> 41:42.770
我在这呢

41:42.770 --> 41:44.770
给你去输出一下它们几个

41:46.850 --> 41:47.730
Mysterd

41:47.730 --> 41:48.450
url

41:48.450 --> 41:49.250
ditch

41:49.250 --> 41:49.730
好

41:49.730 --> 41:50.770
三宝存下

41:50.770 --> 41:52.130
看可不可以刷新词

41:53.170 --> 41:53.730
ok

41:53.730 --> 41:54.610
没问题吧

41:54.610 --> 41:55.650
三个全部能输出

41:56.450 --> 41:57.410
那当然呢

41:57.410 --> 41:58.450
你这么做以后的话

41:59.410 --> 42:01.890
它实际就会省了我们很多能量的事情

42:01.890 --> 42:02.770
那再往后

42:02.770 --> 42:05.250
如果说我再去发送爱亚克斯气象球的话

42:05.250 --> 42:06.930
还是只能于这个TEST

42:06.930 --> 42:09.250
以这个预名来发来发送的话

42:09.410 --> 42:10.450
我是可以这么做

42:10.450 --> 42:13.250
e就写TEST.test.com

42:13.250 --> 42:13.650
对吧

42:13.650 --> 42:14.210
这呢

42:14.210 --> 42:15.650
比如说我再去写一个

42:15.650 --> 42:17.490
ok等于一个e

42:17.490 --> 42:19.090
是不是就把这个poss的

42:19.090 --> 42:19.410
对吧

42:19.410 --> 42:22.690
把poss这样的一个参数的传入给省了

42:22.690 --> 42:23.170
对不对

42:23.170 --> 42:25.330
那那如果说你想进行再一个

42:25.330 --> 42:27.010
一个再进行一次细分的话

42:27.010 --> 42:28.130
比如说就指示

42:28.130 --> 42:30.610
真正于这个预名叫做poss

42:33.090 --> 42:34.850
Test1

42:36.130 --> 42:37.410
发送一个爱亚克斯对吧

42:37.410 --> 42:38.450
等于一个它

42:38.450 --> 42:38.930
好了

42:39.090 --> 42:40.210
那我是不可以这么做啊

42:40.210 --> 42:40.850
在这呢

42:40.850 --> 42:42.610
我再去传入第二个参数

42:42.610 --> 42:43.890
反过这个韩语数

42:43.890 --> 42:46.530
那我再通过poss的testex

42:46.530 --> 42:48.050
去发送这个请求的时候

42:49.730 --> 42:51.810
是不是只需直接传入

42:51.810 --> 42:53.330
最后一个参数就ok了

42:53.330 --> 42:53.730
对吧

42:53.730 --> 42:54.690
那在这的话

42:54.690 --> 42:55.730
我直接传一个叫做

42:57.410 --> 42:59.170
namecstcode11

43:02.560 --> 43:03.280
好

43:03.280 --> 43:06.080
那我再去发送另外一个参数的时候呢

43:06.080 --> 43:06.720
是不是可以这样啊

43:07.600 --> 43:08.800
直接写一个叫做key

43:09.760 --> 43:11.760
key等于11

43:11.760 --> 43:12.560
ok

43:12.560 --> 43:14.560
那要说针对它来讲的话

43:14.560 --> 43:15.440
我也可以这么做对吧

43:15.440 --> 43:18.240
叫做poss的test

43:18.240 --> 43:19.680
一个R

43:19.680 --> 43:21.360
likeax

43:21.360 --> 43:23.840
我让它呢等于一个poss的ax

43:23.840 --> 43:25.680
这回呢我不是去传辑啊

43:25.680 --> 43:26.240
当然

43:26.240 --> 43:29.200
它呢是由于你传了一个第一个参数以后

43:29.200 --> 43:30.560
我再发送这个韩数

43:30.560 --> 43:31.600
那我要使用它的话

43:31.600 --> 43:33.520
我第一次再使用它的时候呢

43:33.520 --> 43:36.400
我去传这个参放一个新的韩数

43:36.400 --> 43:37.840
那我在使用它的时候呢

43:37.920 --> 43:39.040
我可以再次使用它

43:39.040 --> 43:40.400
它可以重复进行使用

43:40.400 --> 43:41.600
我再去传入

43:41.600 --> 43:42.000
哎

43:42.000 --> 43:42.960
额外的一个参

43:42.960 --> 43:44.720
它再发为一个新的韩数

43:44.720 --> 43:46.000
那这个新的韩数呢

43:46.000 --> 43:46.720
在进行的时候

43:46.720 --> 43:48.160
其实就已经传递了

43:48.160 --> 43:50.160
这个poss的和这个test.22

43:50.160 --> 43:51.200
这两个纸的

43:51.200 --> 43:52.720
那如果是这样的情况下的话

43:52.720 --> 43:53.200
好了

43:53.840 --> 43:56.400
那我们再进行发送一个强求的时候

43:56.400 --> 43:58.240
我们就可以不用那么麻烦了对吧

43:58.240 --> 43:58.960
直接

43:58.960 --> 44:00.880
如果说我们再想上这个test.22

44:00.880 --> 44:01.920
一边发送强求的时候

44:01.920 --> 44:03.120
我就直接这么写就行了呗

44:03.120 --> 44:03.680
对不对

44:03.680 --> 44:04.640
好那再来

44:04.640 --> 44:05.520
把它拿过来

44:07.940 --> 44:08.340
好

44:08.340 --> 44:09.140
拿过来

44:09.220 --> 44:11.140
我就改一下这个test.22

44:11.140 --> 44:12.580
这样我们可以改一个22

44:12.580 --> 44:12.820
好

44:12.820 --> 44:13.700
保存一下

44:13.700 --> 44:14.740
现在咱看呀

44:14.740 --> 44:16.260
四个纸能不能发送成功

44:17.460 --> 44:18.900
poss test.1这个纸

44:18.900 --> 44:20.100
poss test.1这个纸

44:20.100 --> 44:21.300
poss test.2这个纸

44:21.300 --> 44:23.060
poss test.2这个纸对不对

44:23.060 --> 44:24.260
让我们通过这一次

44:24.260 --> 44:24.820
颗粒化

44:24.820 --> 44:27.140
通过前面这次颗粒化的一个操作对吧

44:27.140 --> 44:27.700
好

44:27.700 --> 44:28.980
使得这个韩数呢

44:28.980 --> 44:29.460
呃

44:29.460 --> 44:30.900
具备这样的一个

44:30.900 --> 44:32.580
降低代码重性对吧

44:32.580 --> 44:34.820
而且提高了代码信用性的一个

44:34.820 --> 44:35.300
功能

44:35.300 --> 44:36.820
就比如说我们使用它的话

44:36.820 --> 44:40.020
就是要以poss的方式来发送请求

44:40.020 --> 44:41.460
我们使用它的话呢

44:41.460 --> 44:43.700
就是以poss的这样的一个形式

44:43.700 --> 44:45.140
像test.2

44:45.140 --> 44:47.620
像test.1这个域名来发送请求

44:47.620 --> 44:48.500
那么使用它呢

44:48.500 --> 44:50.100
就是用poss的形式

44:50.100 --> 44:50.820
并且呢

44:50.820 --> 44:53.060
像这个test.2这样的域名发送请求

44:53.060 --> 44:55.380
那也提高了这个代码这样的一个信用性

44:55.380 --> 44:55.860
好

44:56.500 --> 44:56.740
好

44:56.740 --> 44:58.580
那如果说看一下这样的一个

44:58.580 --> 45:00.500
我们实现的应用的一个流程的话

45:00.500 --> 45:01.300
那在这的话

45:01.300 --> 45:03.300
来看一下这样一个流程的那个

45:03.300 --> 45:04.100
抛吧

45:04.100 --> 45:04.820
啊

45:04.820 --> 45:06.500
有时候这个安甲克斯当你

45:06.500 --> 45:07.380
写完以后的话

45:07.380 --> 45:08.820
如果说通过颗粒化

45:08.820 --> 45:10.900
哎来进行这样的一个处理以后的话

45:10.900 --> 45:11.700
我们可以

45:11.700 --> 45:12.420
第一次呢

45:12.420 --> 45:13.220
传用一个参数

45:13.220 --> 45:14.340
比如说你传poss的

45:14.340 --> 45:15.540
或传gap对吧

45:15.540 --> 45:17.460
好比如说你传poss的

45:17.460 --> 45:18.820
或者说你传gap

45:21.160 --> 45:21.640
啊

45:21.640 --> 45:22.200
这呢

45:22.200 --> 45:24.120
传一个记忆题对吧

45:24.120 --> 45:25.880
好那这就叫做一个gap甲克斯

45:26.520 --> 45:26.760
啊

45:26.760 --> 45:27.720
传个gap

45:27.720 --> 45:28.440
那好了

45:28.440 --> 45:29.400
传完以后的话

45:29.400 --> 45:31.160
那变成一个新的韩数

45:31.160 --> 45:32.520
那这个新的韩数呢

45:32.520 --> 45:34.840
就是已经有了这个gap和poss的

45:34.840 --> 45:36.920
分别两个参数的一个累积

45:36.920 --> 45:38.520
你只需要继续去

45:38.520 --> 45:39.480
再执行他修

45:39.480 --> 45:41.880
把这个url和data来凑齐就ok了就变

45:41.880 --> 45:42.520
那好了

45:42.520 --> 45:43.640
那比如说

45:43.640 --> 45:46.200
我再次通过这个gap对吧

45:46.200 --> 45:47.720
我把你们传来一个url

45:47.720 --> 45:48.760
还有反过一个新的韩数

45:48.760 --> 45:50.360
那这个新的韩数呢

45:50.360 --> 45:51.640
只需要去

45:51.640 --> 45:54.040
呃再去传这个data

45:54.040 --> 45:55.080
啊或者说只只需要

45:55.080 --> 45:55.960
他执行的时候

45:55.960 --> 45:57.240
再去传一个data的话

45:57.240 --> 46:00.360
这样的话就能满足这一条下的一个功能了

46:00.360 --> 46:01.160
啊

46:01.160 --> 46:03.400
那有时候我们现在通一个颗粒化的方式了

46:03.480 --> 46:05.560
可以让整个这样一个代码

46:05.560 --> 46:06.680
再执行的时候

46:06.680 --> 46:07.960
这个重复度对吧

46:07.960 --> 46:10.680
传的参数这样一个重度下降很多

46:10.680 --> 46:11.400
并且呢

46:11.400 --> 46:13.800
可以把这样一个功能给它分化出

46:13.800 --> 46:15.640
很清醒的这条线路

46:15.640 --> 46:16.200
啊

46:16.200 --> 46:18.600
那这就是颗粒化的一个高级的应用

46:18.600 --> 46:19.240
当然呢

46:19.240 --> 46:22.600
它还可以用到很多框架的编写之中

46:22.600 --> 46:23.320
啊

46:23.320 --> 46:25.240
单纯呢颗粒化并不是说

46:25.240 --> 46:27.640
是只有优点没有缺点的

46:27.640 --> 46:28.280
因为呢

46:28.280 --> 46:29.960
既然有反颗粒化

46:29.960 --> 46:32.840
那证明颗粒化很多形象它是不适用的

46:33.720 --> 46:34.120
那ok

46:34.120 --> 46:34.920
那具体呢

46:34.920 --> 46:37.960
你想了解更多的一些高级编程对吧

46:37.960 --> 46:38.920
你想去

46:38.920 --> 46:41.000
真正的去扎实自己的功力

46:41.000 --> 46:42.200
把自己呢

46:42.200 --> 46:44.200
提高到很高的一个程度上的话

46:44.200 --> 46:45.000
我建议呢

46:45.960 --> 46:48.200
让可以来多听听我们这个前期

46:48.920 --> 46:51.240
这样一个GS的一个公益课程

46:51.240 --> 46:53.480
你可以在同一平台上去搜索都一

46:53.480 --> 46:54.280
啊

46:54.280 --> 46:55.240
呃

46:55.240 --> 46:56.280
在我们都一中呢

46:56.280 --> 46:58.360
有这样一个扎实课的一个精英课堂

46:58.360 --> 46:59.720
你去看它这样的课的话

47:00.120 --> 47:02.760
就能把这个GS功力扎实得非常好

47:03.320 --> 47:03.880
而且呢

47:03.880 --> 47:04.600
你对我们这个

47:04.600 --> 47:07.000
你不知道GS系列如果感兴趣的话

47:07.000 --> 47:08.520
你也可以去时常的来

47:08.520 --> 47:09.640
多去观众一下

47:09.640 --> 47:10.120
啊

47:10.120 --> 47:10.600
当然

47:10.600 --> 47:12.360
你在看我们对于搜的课

47:12.360 --> 47:12.840
课程之中

47:12.840 --> 47:14.440
搜的这样一个公益课程之中

47:14.440 --> 47:15.320
有任何问题的话

47:15.320 --> 47:16.120
你都可以啊

47:16.120 --> 47:16.920
去扫码

47:16.920 --> 47:18.440
扫码去加下我们的小度

47:18.440 --> 47:19.880
我们小的会把你带到我们这样的

47:19.880 --> 47:20.920
一个公益群之中

47:20.920 --> 47:21.720
啊

47:21.720 --> 47:22.920
那在这公益群之中呢

47:22.920 --> 47:24.280
很多同学就讨论这样的

47:24.280 --> 47:25.480
一系列的一个问题

47:25.480 --> 47:27.240
当然我们老师也会全天后的

47:27.240 --> 47:28.840
这样的公益性的给你们去解答

47:28.840 --> 47:29.640
啊

47:30.360 --> 47:30.840
OK

47:30.840 --> 47:32.040
那今天呢

47:32.040 --> 47:33.000
我已经把课里的话

47:33.000 --> 47:34.040
全部都讲完了

47:34.040 --> 47:35.960
那我们下次再见吧

