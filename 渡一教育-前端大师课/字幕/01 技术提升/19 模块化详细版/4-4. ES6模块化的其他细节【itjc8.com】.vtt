WEBVTT

00:00.430 --> 00:04.430
其实我们ES6的模块画其实就已经讲完了

00:04.430 --> 00:07.430
我们这些可能在敲定一些细节吧

00:07.430 --> 00:11.430
这些细节可能你们以后在使用模块画的时候

00:11.430 --> 00:14.430
绝大部分情况下都遇不到

00:14.430 --> 00:17.430
不讲的话你也不会产生这样的问题

00:17.430 --> 00:19.430
那么如果说你遇到了这样的问题

00:19.430 --> 00:22.430
或者是某一些特别的需求的时候

00:22.430 --> 00:25.430
可能会拥导这些细节的问题

00:25.430 --> 00:27.430
再来一个说

00:27.430 --> 00:30.430
第一个是说尽量的导出的时候

00:30.430 --> 00:33.430
尽量导出不可辨的值

00:33.430 --> 00:34.430
这什么意思呢

00:34.430 --> 00:36.430
就说我们这里写单码吧

00:36.430 --> 00:40.430
就说我们在导出的时候不是可以导出一些数据吗

00:40.430 --> 00:43.430
那么这些数据是尽量不可辨的

00:43.430 --> 00:45.430
我们这里建个文件

00:46.430 --> 00:48.430
这里写个路口文件

00:48.430 --> 00:50.430
index.js

00:50.430 --> 00:52.430
然后这里随便写个模块吧

00:52.430 --> 00:55.430
随便写个模块给它取名为A.js

00:56.430 --> 00:59.430
然后在页面上引用路口文件

00:59.430 --> 01:01.430
这些

01:01.430 --> 01:03.430
这个是module

01:03.430 --> 01:05.430
index.js

01:05.430 --> 01:07.430
还有一个type

01:07.430 --> 01:08.430
vmodule

01:08.430 --> 01:10.430
然后这是我们的路口文件

01:10.430 --> 01:14.430
路口文件里面我们导入的是A的模块

01:14.430 --> 01:16.430
那么这个模块在导出的时候

01:16.430 --> 01:17.430
你注意一下

01:17.430 --> 01:20.430
尽量导出是不可辨的值

01:20.430 --> 01:21.430
比方说什么意思呢

01:21.430 --> 01:24.430
比方说我们要导出一个字幕串

01:24.430 --> 01:26.430
导出一个字幕串

01:26.430 --> 01:28.430
比方说给它取名为ABC

01:28.430 --> 01:31.430
或者是给它取名为模块A

01:31.430 --> 01:32.430
那么什么意思呢

01:32.430 --> 01:35.430
就是说你导出的变量名字

01:35.430 --> 01:36.430
那肯定是不可辨的

01:36.430 --> 01:38.430
你怎么可能改变变量名字呢

01:38.430 --> 01:39.430
这个是不可能的

01:39.430 --> 01:42.430
另外你的数据应该是不可辨的

01:42.430 --> 01:43.430
就是你不能变化数据

01:43.430 --> 01:45.430
所以说你学了es6之后

01:45.430 --> 01:46.430
你导出的时候

01:46.430 --> 01:48.430
为了避免这个问题

01:48.430 --> 01:50.430
尽量的把它使用一个concert

01:50.430 --> 01:51.430
这样子就万无一失了

01:51.430 --> 01:53.430
因为你使用concert的话

01:53.430 --> 01:54.430
那么就表示的是这个变量

01:54.430 --> 01:56.430
它是不能重新被复制的

01:56.430 --> 01:57.430
是不可改变的

01:57.430 --> 01:58.430
就这么个意思

01:58.430 --> 02:01.430
就尽量导出一个不可辨的值

02:01.430 --> 02:03.430
为什么有这样的一个细节呢

02:03.430 --> 02:04.430
因为这个细节

02:04.430 --> 02:08.430
如果说你不小心发了一个错

02:08.430 --> 02:10.430
就是说你把这个变量的值

02:10.430 --> 02:12.430
在模块的运行过程中

02:12.430 --> 02:13.430
改了会导致什么现象呢

02:13.430 --> 02:15.430
我给大家说一下

02:15.430 --> 02:18.430
如果说你这个值有可能会变化

02:18.430 --> 02:20.430
什么情况下有可能会变化呢

02:20.430 --> 02:21.430
看着

02:21.430 --> 02:23.430
我们在这里导入的时候

02:23.430 --> 02:24.430
怎么导入

02:24.430 --> 02:25.430
这是基本导出

02:25.430 --> 02:26.430
对吧

02:26.430 --> 02:27.430
我们要用使用基本导入

02:27.430 --> 02:29.430
name from 哪个模块

02:29.430 --> 02:30.430
对吧

02:30.430 --> 02:32.430
说使用这种方式来导入

02:32.430 --> 02:34.430
那么导入的时候

02:34.430 --> 02:35.430
导入了之后

02:35.430 --> 02:36.430
我们导入了之后

02:36.430 --> 02:38.430
能不能给这个name重新复制

02:38.430 --> 02:39.430
能不能

02:39.430 --> 02:40.430
说出name

02:40.430 --> 02:41.430
好看吧

02:41.430 --> 02:42.430
我们之前讲过的

02:42.430 --> 02:43.430
不要忘了

02:43.430 --> 02:44.430
我们导入的时候

02:44.430 --> 02:45.430
能不能给它重新复制呢

02:45.430 --> 02:46.430
是不可以的

02:46.430 --> 02:47.430
对吧

02:47.430 --> 02:48.430
我们之前说过的

02:48.430 --> 02:49.430
怎么了

02:50.430 --> 02:51.430
他说

02:51.430 --> 02:52.430
找不到

02:52.430 --> 02:53.430
啥找不到

02:53.430 --> 02:55.430
什么东西找不到

02:55.430 --> 02:57.430
因这个是点gs

02:57.430 --> 02:58.430
这边

02:58.430 --> 03:00.430
A点gs

03:00.430 --> 03:02.430
忘了先后追了

03:02.430 --> 03:03.430
你看

03:03.430 --> 03:04.430
是不是抱错了

03:04.430 --> 03:06.430
他说不能给长量重新复制

03:06.430 --> 03:07.430
因为你导

03:07.430 --> 03:08.430
他导出的时候

03:08.430 --> 03:09.430
你用的是怎么变量

03:09.430 --> 03:10.430
无所谓

03:10.430 --> 03:11.430
但是导入的时候

03:11.430 --> 03:12.430
能

03:12.430 --> 03:14.430
这个地方他绑定的一定是长量

03:14.430 --> 03:16.430
这个地方绑定的一定是长量

03:16.430 --> 03:17.430
他会把这个的名字

03:17.430 --> 03:18.430
跟这边的名字

03:18.430 --> 03:19.430
能进行绑定

03:19.430 --> 03:21.430
但是到这边就一定是长量

03:21.430 --> 03:22.430
导入的时候他一定是长量

03:22.430 --> 03:23.430
不管你使用

03:23.430 --> 03:24.430
使用默认导入

03:24.430 --> 03:25.430
还是什么居民导入

03:25.430 --> 03:27.430
基本导入都无所谓

03:27.430 --> 03:28.430
它都是长量

03:28.430 --> 03:29.430
所以说

03:29.430 --> 03:30.430
你在导入的时候

03:30.430 --> 03:32.430
在导入的那个模块里边

03:32.430 --> 03:33.430
你想改变

03:33.430 --> 03:34.430
其他模块的东西

03:34.430 --> 03:35.430
就一句话

03:35.430 --> 03:36.430
你这个模块

03:36.430 --> 03:38.430
不可能去改其他模块的东西

03:38.430 --> 03:39.430
对吧

03:39.430 --> 03:40.430
就这么一句话

03:40.430 --> 03:41.430
所以说在这里

03:41.430 --> 03:42.430
是没什么问题的

03:42.430 --> 03:43.430
也不应该改

03:43.430 --> 03:44.430
能不能改

03:44.430 --> 03:45.430
也不应该改

03:45.430 --> 03:46.430
也不能去改

03:46.430 --> 03:47.430
因为那是别人模块的东西

03:47.430 --> 03:49.430
你怎么又权力改了

03:49.430 --> 03:50.430
但是

03:50.430 --> 03:52.430
它会出现这种情况

03:52.430 --> 03:54.430
会导致间接的更改

03:54.430 --> 03:55.430
比方什么意思呢

03:55.430 --> 03:56.430
比方说

03:56.430 --> 03:57.430
我们在这里导出的时候

03:57.430 --> 03:58.430
又导出了一个函数

03:58.430 --> 04:00.430
我们这里就顺便使用一下

04:00.430 --> 04:01.430
默认导出

04:01.430 --> 04:02.430
都来用一下

04:02.430 --> 04:04.430
当然不用默认导出也行

04:04.430 --> 04:06.430
导出了一个函数

04:06.430 --> 04:07.430
这个函数

04:07.430 --> 04:09.430
他把这个名字改了

04:09.430 --> 04:10.430
能不能改了

04:10.430 --> 04:11.430
这里就能改

04:14.430 --> 04:15.430
他把名字改了

04:16.430 --> 04:17.430
这里能不能改

04:17.430 --> 04:18.430
能改

04:18.430 --> 04:20.430
因为它是本模块的东西

04:20.430 --> 04:21.430
是自己模块的东西

04:21.430 --> 04:22.430
而且又是自己的变量

04:22.430 --> 04:23.430
它能不能改

04:23.430 --> 04:24.430
当然能改

04:24.430 --> 04:25.430
这里是能改

04:25.430 --> 04:26.430
这句话

04:26.430 --> 04:27.430
无非就定一个变量

04:27.430 --> 04:29.430
然后顺便把这个变量导出

04:29.430 --> 04:30.430
那么我们这边

04:30.430 --> 04:32.430
它会导致一个什么情况呢

04:32.430 --> 04:33.430
它会导致

04:33.430 --> 04:34.430
比方说把默认导入

04:34.430 --> 04:35.430
导出进来

04:35.430 --> 04:36.430
一个 method 一个方法

04:36.430 --> 04:37.430
这是默认导出

04:37.430 --> 04:38.430
当然默认导出

04:38.430 --> 04:39.430
其实还可以使用一种方式

04:39.430 --> 04:40.430
就那种方式

04:40.430 --> 04:41.430
它太少见了

04:41.430 --> 04:43.430
就是我们在这里

04:43.430 --> 04:45.430
默认导出的时候

04:45.430 --> 04:47.430
是不是可以把它当成 default

04:47.430 --> 04:48.430
因为默认导出的时候

04:48.430 --> 04:50.430
是不是可以用这种方式

04:50.430 --> 04:53.430
我们这里写个寒数

04:53.430 --> 04:56.430
写个寒数 method

04:56.430 --> 04:58.430
那么这导出的时候

04:58.430 --> 04:59.430
是不是可以这样子写

04:59.430 --> 05:00.430
我们之前说过了

05:00.430 --> 05:02.430
是不是可以把这个 default 去掉

05:02.430 --> 05:03.430
是不是可以这样子写

05:03.430 --> 05:05.430
当然了其实本质上

05:05.430 --> 05:08.430
这种写法

05:08.430 --> 05:09.430
这种写法

05:09.430 --> 05:11.430
跟相当于是下面的写法

05:11.430 --> 05:12.430
相当于是下面的写法

05:12.430 --> 05:13.430
下面这种写法

05:13.430 --> 05:15.430
实际上是上面这种写法的愚法堂

05:15.430 --> 05:16.430
只不过下面这种写法

05:16.430 --> 05:18.430
看上去更加舒服一点

05:18.430 --> 05:19.430
所以我们通常使用

05:19.430 --> 05:20.430
下面这种写法

05:20.430 --> 05:22.430
其实你可以这样子想象

05:22.430 --> 05:23.430
导出的时候

05:23.430 --> 05:25.430
实际上可以这样子想象

05:25.430 --> 05:27.430
把每一个导出

05:27.430 --> 05:29.430
封装到一个对象里边

05:29.430 --> 05:30.430
默认导出

05:30.430 --> 05:31.430
就是这个对象里边的

05:31.430 --> 05:33.430
特殊属性 default

05:33.430 --> 05:35.430
就是特殊属性 default

05:35.430 --> 05:38.430
你可以这样子去想象

05:38.430 --> 05:39.430
就相当于是

05:39.430 --> 05:40.430
我们刚才这种写法

05:40.430 --> 05:41.430
导出一个寒数

05:41.430 --> 05:42.430
那么就相当于是

05:42.430 --> 05:43.430
这导出的东西

05:43.430 --> 05:44.430
有name

05:44.430 --> 05:45.430
还有个什么呢

05:45.430 --> 05:46.430
还有个default属性

05:46.430 --> 05:47.430
有name这个属性

05:47.430 --> 05:48.430
它是某块

05:48.430 --> 05:49.430
这个字部串

05:49.430 --> 05:50.430
还有个default属性

05:50.430 --> 05:52.430
default属性那是一个寒数

05:52.430 --> 05:53.430
导入的时候

05:53.430 --> 05:55.430
你还可以使用这种方式

05:55.430 --> 05:56.430
default

05:56.430 --> 05:57.430
导入这个name属性

05:57.430 --> 05:58.430
导入default属性

05:58.430 --> 05:59.430
然后来给它重立名

05:59.430 --> 06:01.430
因为default是关键字

06:01.430 --> 06:02.430
你给它重立名

06:02.430 --> 06:04.430
重立名为比方说Mesh的

06:04.430 --> 06:05.430
也可以

06:05.430 --> 06:06.430
当然我们

06:06.430 --> 06:07.430
通常也不太会这样子写

06:07.430 --> 06:09.430
通常我们还是会这样子写

06:09.430 --> 06:10.430
这样子写的

06:11.430 --> 06:12.430
只是这种写法

06:12.430 --> 06:13.430
就是一个语法堂而已

06:15.430 --> 06:16.430
那么现在呢

06:16.430 --> 06:17.430
看着

06:17.430 --> 06:19.430
虽然说我这个模块

06:19.430 --> 06:20.430
是没有权利

06:20.430 --> 06:22.430
更改name属性的

06:22.430 --> 06:23.430
但是呢

06:23.430 --> 06:24.430
我可以通过

06:24.430 --> 06:26.430
调用这个Mesh的方法

06:26.430 --> 06:27.430
来达到

06:27.430 --> 06:29.430
改变这个name属性的目的

06:29.430 --> 06:31.430
改变这个name的

06:31.430 --> 06:32.430
这个值的目的

06:32.430 --> 06:33.430
保存

06:33.430 --> 06:34.430
你看一下

06:34.430 --> 06:35.430
就变了

06:35.430 --> 06:36.430
而不是我们最开始

06:36.430 --> 06:38.430
复制的模块

06:38.430 --> 06:39.430
那如果说

06:39.430 --> 06:40.430
这个方法之前

06:40.430 --> 06:42.430
调用这个方法之前

06:42.430 --> 06:43.430
去输出一下这个name

06:43.430 --> 06:44.430
你会发现

06:44.430 --> 06:45.430
name的值呢

06:45.430 --> 06:46.430
被改变了

06:46.430 --> 06:47.430
那么这样子一来了

06:47.430 --> 06:49.430
就容易造成混乱

06:49.430 --> 06:50.430
终于造成混乱

06:50.430 --> 06:51.430
为什么呢

06:51.430 --> 06:52.430
因为我们明确的知道

06:52.430 --> 06:53.430
这个东西

06:53.430 --> 06:55.430
不是我们模块的东西

06:55.430 --> 06:56.430
因此呢

06:56.430 --> 06:57.430
我心里面会想

06:57.430 --> 06:58.430
我在这个模块的

06:58.430 --> 06:59.430
运行过程中

06:59.430 --> 07:00.430
应该这个数据

07:00.430 --> 07:01.430
是保持不变的

07:01.430 --> 07:02.430
但是呢

07:02.430 --> 07:03.430
莫名其妙的

07:03.430 --> 07:04.430
它的数据变了

07:04.430 --> 07:05.430
是不是就可能会

07:05.430 --> 07:06.430
导致这个模块

07:06.430 --> 07:07.430
会出一些问题

07:07.430 --> 07:08.430
因为我认为

07:08.430 --> 07:09.430
它不会变的

07:09.430 --> 07:10.430
但是莫名其妙

07:10.430 --> 07:11.430
我鬼知道你这个模块

07:11.430 --> 07:12.430
里面的方法把它变了

07:12.430 --> 07:13.430
对吧

07:13.430 --> 07:15.430
所以这会导致一些混乱

07:15.430 --> 07:16.430
会导致一些混乱

07:16.430 --> 07:17.430
因此呢

07:17.430 --> 07:19.430
最好的是怎么做法呢

07:19.430 --> 07:21.430
最好就是我们这一条细节

07:21.430 --> 07:23.430
就是尽量导出的是

07:23.430 --> 07:24.430
导出的东西呢

07:24.430 --> 07:25.430
你不要让它变化

07:25.430 --> 07:26.430
就这里我们导出了

07:26.430 --> 07:27.430
一个东西对吧

07:27.430 --> 07:29.430
这个东西是作为导出的内容

07:29.430 --> 07:30.430
那么你尽量

07:30.430 --> 07:31.430
不要让它变化

07:31.430 --> 07:33.430
怎么样让它不要变化呢

07:33.430 --> 07:34.430
很简单的一种方式

07:34.430 --> 07:35.430
就是使用concept

07:35.430 --> 07:37.430
那么这样子一来的话

07:37.430 --> 07:38.430
变成常量了

07:38.430 --> 07:39.430
那么在这个模块里边

07:39.430 --> 07:40.430
是不是不可能改变它

07:40.430 --> 07:42.430
你一改变就爆错了

07:42.430 --> 07:43.430
就爆错了

07:43.430 --> 07:45.430
尽量这样子做

07:45.430 --> 07:47.430
然后这样子做的好处在于

07:47.430 --> 07:48.430
我们以后使用

07:48.430 --> 07:49.430
任何一个模块的时候

07:49.430 --> 07:50.430
我都可以认为

07:50.430 --> 07:52.430
坚定不移的认为

07:52.430 --> 07:53.430
这个模块导出的任何东西

07:53.430 --> 07:55.430
它都不会变化

07:55.430 --> 07:56.430
不会变化

07:56.430 --> 07:57.430
那么跟那个模块导入的时候

07:57.430 --> 07:59.430
它是常量的那种规则

07:59.430 --> 08:00.430
就比较相符了

08:00.430 --> 08:01.430
不然的话我写的

08:01.430 --> 08:02.430
莫名其妙

08:02.430 --> 08:03.430
这个东西明明是常量

08:03.430 --> 08:05.430
怎么莫名其妙变了呢

08:05.430 --> 08:06.430
就感觉很奇怪

08:07.430 --> 08:08.430
就感觉很奇怪

08:09.430 --> 08:11.430
其实我们绝大部分时候

08:11.430 --> 08:13.430
谁会去改这个导出的东西呢

08:13.430 --> 08:15.430
不要说我们这里导出了一个函数

08:15.430 --> 08:17.430
这个函数本身不会变吧

08:17.430 --> 08:19.430
你不可能把一个函数变成另外一个函数

08:19.430 --> 08:20.430
不可能变的

08:20.430 --> 08:22.430
所以说大家尽量注意这一点

08:22.430 --> 08:24.430
不要去改变模块导出的东西

08:24.430 --> 08:26.430
如果说你学了ES6

08:26.430 --> 08:28.430
你再使用基本导出的时候

08:28.430 --> 08:29.430
直接把它变成常量

08:29.430 --> 08:30.430
这样子就万无一失了

08:30.430 --> 08:32.430
你想改都改不了

08:32.430 --> 08:34.430
这是关于这一块

08:34.430 --> 08:35.430
大家注意一下

08:37.430 --> 08:39.430
第二个点

08:39.430 --> 08:41.430
是有的时候我们可能

08:41.430 --> 08:43.430
在导入一个模块的时候

08:44.430 --> 08:46.430
不需要绑定任何东西

08:46.430 --> 08:47.430
比方说什么叫绑定任何东西

08:47.430 --> 08:48.430
比方说像这个模块

08:48.430 --> 08:49.430
在导入M模块的时候

08:49.430 --> 08:51.430
是不是绑定了一个name

08:51.430 --> 08:52.430
绑定了一个method

08:52.430 --> 08:53.430
这个method对应什么

08:53.430 --> 08:55.430
对应这个模块的默认导出

08:55.430 --> 08:57.430
这个对应它模块的基本导出

08:57.430 --> 09:00.430
我们导入的时候一般会这样做

09:00.430 --> 09:02.430
但有的时候我们导入一个模块

09:02.430 --> 09:04.430
只是想把这个单码运行一遍

09:04.430 --> 09:05.430
之前我好像说过的

09:05.430 --> 09:07.430
那么这个时候我不需要

09:07.430 --> 09:08.430
导入任何东西

09:08.430 --> 09:09.430
那么这个时候

09:09.430 --> 09:10.430
我们可以使用这种运发

09:10.430 --> 09:11.430
举个例子

09:11.430 --> 09:13.430
比方说我们在

09:13.430 --> 09:14.430
做一个项目的时候

09:14.430 --> 09:15.430
它有这么一个功能

09:15.430 --> 09:16.430
为了方便后边操作

09:16.430 --> 09:18.430
我们可能会给一些数组

09:18.430 --> 09:20.430
给它的原型上

09:20.430 --> 09:21.430
来加一些方法

09:21.430 --> 09:22.430
举个例子

09:23.430 --> 09:24.430
比方说我们这里写个模块

09:24.430 --> 09:25.430
叫做array

09:28.430 --> 09:30.430
给这个数组打一个补定

09:30.430 --> 09:31.430
那么这个模块

09:31.430 --> 09:32.430
可能连导出都没有

09:32.430 --> 09:34.430
可能连导出都没有

09:34.430 --> 09:35.430
它里面做的就一件事

09:35.430 --> 09:37.430
proto type

09:37.430 --> 09:39.430
给这个array

09:39.430 --> 09:40.430
给这个数组里面的

09:40.430 --> 09:42.430
原型上加一个方法

09:42.430 --> 09:44.430
比方说什么方法呢

09:44.430 --> 09:47.430
比方说print

09:47.430 --> 09:49.430
把这个数组的内容

09:49.430 --> 09:50.430
输出

09:50.430 --> 09:52.430
给它写什么一个方法

09:52.430 --> 09:54.430
把这个数组的内容输出

09:54.430 --> 09:55.430
那么这里怎么写呢

09:55.430 --> 09:57.430
我们就可以直接

09:58.430 --> 10:00.430
console log

10:00.430 --> 10:01.430
console log

10:01.430 --> 10:03.430
然后这里写上z

10:03.430 --> 10:05.430
z就表示当前的数组

10:05.430 --> 10:06.430
就该加上这么一个方法

10:06.430 --> 10:07.430
就完成了

10:07.430 --> 10:09.430
打印这个数组

10:09.430 --> 10:10.430
好来吧

10:10.430 --> 10:11.430
我们只是希望

10:11.430 --> 10:12.430
这个模块里边的代码

10:12.430 --> 10:14.430
可能还要加一些别的原型

10:14.430 --> 10:15.430
对吧

10:15.430 --> 10:17.430
一些其他的代码

10:17.430 --> 10:19.430
下面是一些其他的代码

10:19.430 --> 10:20.430
给数组里面加强

10:20.430 --> 10:21.430
不同的原型方法

10:21.430 --> 10:22.430
我们只是希望

10:22.430 --> 10:24.430
这个函数运行一次就行了

10:24.430 --> 10:26.430
它不需要人和导出

10:26.430 --> 10:27.430
那么这个时候

10:27.430 --> 10:31.190
我们就可以用这种方式

10:31.190 --> 10:32.190
import

10:32.190 --> 10:34.190
直接来array parture

10:35.190 --> 10:36.190
对吧

10:36.190 --> 10:37.190
直接让它运行一遍

10:37.190 --> 10:38.190
运行一遍过后了

10:38.190 --> 10:40.190
是不是就把它那个

10:40.190 --> 10:41.190
原型上加上方法了

10:41.190 --> 10:42.190
对吧

10:42.190 --> 10:43.190
而且它有缓存

10:43.190 --> 10:44.190
它只会运行一次

10:44.190 --> 10:45.190
也不会运行多次

10:45.190 --> 10:46.190
那么这里呢

10:46.190 --> 10:47.190
我们后面

10:47.190 --> 10:48.190
比方说我们写个数组

10:50.190 --> 10:51.190
水边写个

10:52.190 --> 10:53.190
然后呢

10:53.190 --> 10:54.190
数组里面

10:54.190 --> 10:55.190
就退多了一个print方法

10:55.190 --> 10:56.190
咱们来看一下

10:56.190 --> 10:57.190
保存

10:57.190 --> 10:58.190
这边

10:58.190 --> 10:59.190
你看是不是打印出来了

10:59.190 --> 11:00.190
对吧

11:00.190 --> 11:01.190
数组里面

11:01.190 --> 11:02.190
就会多一个print方法

11:02.190 --> 11:03.190
有的时候

11:03.190 --> 11:04.190
我们可能会有这样的需求

11:04.190 --> 11:05.190
特别是一些初始化

11:05.190 --> 11:06.190
就让它执行一遍一个单

11:06.190 --> 11:07.190
就行了

11:07.190 --> 11:08.190
那么这种时候

11:08.190 --> 11:09.190
我们就可以

11:09.190 --> 11:11.190
写一个无绑定的导入

11:11.190 --> 11:12.190
导入的时候

11:12.190 --> 11:13.190
不需要绑定任何变量

11:13.190 --> 11:15.190
那么直接把导入运行持有完事了

11:15.190 --> 11:16.190
这是这种写法

11:17.190 --> 11:18.190
这个呢

11:18.190 --> 11:19.190
还稍微长见一点

11:19.190 --> 11:20.190
稍微长见一点

11:20.190 --> 11:21.190
好

11:21.190 --> 11:22.190
下面这个

11:22.190 --> 11:23.190
看上去有点复杂了

11:23.190 --> 11:24.190
但是呢

11:24.190 --> 11:25.190
不要担心

11:25.190 --> 11:26.190
这个东西呢

11:26.190 --> 11:27.190
用的非常非常少

11:27.190 --> 11:28.190
几乎是不用的

11:28.190 --> 11:29.190
如果说你将来

11:29.190 --> 11:30.190
可能有

11:30.190 --> 11:31.190
出现这么样的

11:31.190 --> 11:32.190
需求的时候

11:32.190 --> 11:33.190
你可以过来看

11:33.190 --> 11:34.190
再回过来看一下

11:34.190 --> 11:35.190
这里我们先了解一下

11:35.190 --> 11:36.190
它有这么一个功能

11:36.190 --> 11:37.190
ES6

11:37.190 --> 11:39.190
官方考虑的是非常非常全面的

11:39.190 --> 11:41.190
把各种情况的考虑到了

11:41.190 --> 11:42.190
它有的时候

11:42.190 --> 11:44.190
我们可能面对这么一个需求

11:44.190 --> 11:46.190
我有一大堆零散的模块

11:46.190 --> 11:49.190
这一大堆零散的模块

11:49.190 --> 11:50.190
它的每一个模块

11:50.190 --> 11:52.190
有每一个模块的小功能

11:52.190 --> 11:53.190
它提供了一些小功能

11:53.190 --> 11:54.190
来解决一方面的问题

11:54.190 --> 11:55.190
但是呢

11:55.190 --> 11:56.190
我们要完成

11:56.190 --> 11:57.190
一个整体的功能的时候

11:57.190 --> 11:59.190
这些零散的模块

11:59.190 --> 12:00.190
可能不太好用

12:00.190 --> 12:02.190
我们需要把这些零散的模块

12:02.190 --> 12:04.190
整合一下

12:04.190 --> 12:06.190
把它整合到一个大的模块里边

12:06.190 --> 12:07.190
然后大的模块

12:07.190 --> 12:08.190
再把它导出

12:08.190 --> 12:10.190
比方说有这么一个例子

12:10.190 --> 12:11.190
看下面这张图

12:11.190 --> 12:13.190
我们这里有两个小模块

12:13.190 --> 12:14.190
M1和M2

12:14.190 --> 12:15.190
只看这两个图

12:15.190 --> 12:16.190
不要去看箭头

12:16.190 --> 12:18.190
这两个小模块

12:18.190 --> 12:20.190
它们各自有各自的基本导出

12:20.190 --> 12:22.190
也有各自的默认导出

12:22.190 --> 12:23.190
模块2也是

12:23.190 --> 12:24.190
有各自的基本导出

12:24.190 --> 12:25.190
也有默认导出

12:25.190 --> 12:26.190
它们分别完成了一些

12:26.190 --> 12:27.190
小我的功能

12:27.190 --> 12:28.190
非常零碎的功能

12:28.190 --> 12:29.190
这些功能可能

12:29.190 --> 12:34.190
作为公共功能来使用的

12:34.190 --> 12:35.190
通用的功能来使用的

12:35.190 --> 12:37.190
比方说我们这里建一个文件

12:37.190 --> 12:38.190
M1

12:38.190 --> 12:39.190
这是一个模块

12:39.190 --> 12:40.190
这个模块

12:40.190 --> 12:41.190
我们导出了三个东西

12:41.190 --> 12:42.190
这里导出了多少

12:42.190 --> 12:43.190
ABC

12:43.190 --> 12:44.190
来吧

12:44.190 --> 12:46.190
我们用刚才的ES6的Const

12:46.190 --> 12:48.190
避免重复更改

12:48.190 --> 12:49.190
A

12:51.190 --> 12:52.190
我们这里用字不算

12:52.190 --> 12:55.190
这是M1模块里边的A

12:55.190 --> 12:58.190
这里我们用B

12:58.190 --> 13:00.190
这是M1模块的B

13:00.190 --> 13:02.190
然后这里是C

13:02.190 --> 13:05.190
M1模块的C

13:05.190 --> 13:06.190
来吧

13:06.190 --> 13:07.190
还有一个默认导出

13:07.190 --> 13:09.190
默认导出Default

13:09.190 --> 13:10.190
导出一个字不算就行了

13:10.190 --> 13:14.190
默认导出M1模块的Default

13:14.190 --> 13:15.190
导出

13:15.190 --> 13:16.190
其实我再说一次

13:16.190 --> 13:18.190
其实你可以把它想象成

13:18.190 --> 13:19.190
这样子一写

13:19.190 --> 13:23.190
就相当于是导出了什么东西

13:23.190 --> 13:25.190
相当于是导出了这么一个对象

13:25.190 --> 13:27.190
对象里边有S5像

13:28.190 --> 13:29.190
B属像

13:30.190 --> 13:31.190
C属像

13:31.190 --> 13:33.190
然后还有一个Default

13:33.190 --> 13:35.190
还有一个特殊的属像

13:35.190 --> 13:36.190
你可以这样子想象

13:36.190 --> 13:37.190
默认导出的其实就是

13:37.190 --> 13:39.190
对象里边的Default

13:39.190 --> 13:40.190
OK

13:40.190 --> 13:41.190
那么咱们

13:41.190 --> 13:43.190
这是模块1的

13:43.190 --> 13:47.270
那么模块2

13:47.270 --> 13:49.270
我把模块1代码复制一下

13:49.270 --> 13:50.270
过来了

13:50.270 --> 13:51.270
那么模块2

13:51.270 --> 13:53.270
它有这么一些东西

13:53.270 --> 13:54.270
这边

13:54.270 --> 13:55.270
AKT

13:55.270 --> 13:58.270
AKT

13:58.270 --> 14:02.220
这是模块2

14:02.220 --> 14:04.220
KT

14:04.220 --> 14:06.220
这是模块2的模型导出

14:06.220 --> 14:07.220
那么这里呢

14:07.220 --> 14:10.220
就相当于是导出了这么AKT

14:10.220 --> 14:12.220
导出这么一个东西

14:12.220 --> 14:14.220
那么这是两个小的模块

14:14.220 --> 14:15.220
这两个小的模块

14:15.220 --> 14:16.220
我们对于

14:16.220 --> 14:17.220
对于我们实现

14:17.220 --> 14:19.220
某一些大的功能的时候

14:19.220 --> 14:20.220
我们如果说

14:20.220 --> 14:21.220
分别去用这个小的模块

14:21.220 --> 14:22.220
里边的东西

14:22.220 --> 14:23.220
就非常繁熟

14:23.220 --> 14:24.220
一会要用到这个模块

14:24.220 --> 14:25.220
一会要用到别的模块

14:25.220 --> 14:26.220
这还只有两个模块

14:26.220 --> 14:28.220
而在实际的开发中

14:28.220 --> 14:29.220
可能这种小模块

14:29.220 --> 14:30.220
有几十个

14:30.220 --> 14:31.220
非常非常多

14:31.220 --> 14:32.220
那么我们要把它

14:32.220 --> 14:33.220
可能会需要

14:33.220 --> 14:34.220
我们要完成某一届

14:34.220 --> 14:35.220
特定的功能

14:35.220 --> 14:36.220
可能这些小模块

14:36.220 --> 14:37.220
用起来太繁熟了

14:37.220 --> 14:38.220
它灵不灵活

14:38.220 --> 14:39.220
肯定灵活

14:39.220 --> 14:40.220
每个模块管一部分

14:40.220 --> 14:41.220
肯定灵活

14:41.220 --> 14:42.220
但是我们需要把它整合一下

14:42.220 --> 14:43.220
当然你肯定不能

14:43.220 --> 14:44.220
把这些模块

14:44.220 --> 14:45.220
删了给我重新改了

14:45.220 --> 14:46.220
可能不行

14:46.220 --> 14:47.220
因为这些小模块

14:47.220 --> 14:48.220
可能有的时候

14:48.220 --> 14:51.220
又会发挥一些用场

14:51.220 --> 14:53.220
但是在某一些场景下边

14:53.220 --> 14:55.220
我直接用这个小模块

14:55.220 --> 14:56.220
就没那么方便了

14:56.220 --> 14:58.220
我就需要把它整合一下

14:58.220 --> 14:59.220
整合成一个大模块

14:59.220 --> 15:01.220
比方说这个M这个模块

15:01.220 --> 15:02.220
这个模块里边

15:02.220 --> 15:03.220
它有四个导出

15:03.220 --> 15:04.220
比方说这个粒子里边

15:04.220 --> 15:06.220
还有四个导出A、B、R

15:06.220 --> 15:07.220
K

15:07.220 --> 15:09.220
R是这个模块自己的东西

15:09.220 --> 15:11.220
R是个模块自己的东西

15:11.220 --> 15:12.220
导出的东西

15:12.220 --> 15:13.220
但是这个A和B

15:13.220 --> 15:15.220
是直接把M1

15:15.220 --> 15:17.220
这个模块里面的A和B导出了

15:17.220 --> 15:18.220
这个A你看

15:18.220 --> 15:20.220
直接就是M1这个模块的东西

15:20.220 --> 15:22.220
B就是M1模块的B这个东西

15:22.220 --> 15:24.220
那么K是M2这个模块的

15:24.220 --> 15:26.220
K这个东西

15:26.220 --> 15:27.220
它有自己的默认导出

15:27.220 --> 15:28.220
这个默认导出

15:28.220 --> 15:29.220
跟M1的默认导出

15:29.220 --> 15:31.220
跟M2的默认导出是一样的

15:31.220 --> 15:33.220
它只有自己的一个东西R

15:33.220 --> 15:35.220
那么面对这种情况

15:35.220 --> 15:36.220
我们该怎么来书写代码了

15:36.220 --> 15:37.220
其实

15:37.220 --> 15:38.220
如果说你直接书写的话

15:38.220 --> 15:39.220
也没有什么问题

15:39.220 --> 15:41.220
比方说我们这里写上一个M模块

15:41.220 --> 15:42.220
来吧

15:42.220 --> 15:43.220
我们来试一下

15:43.220 --> 15:44.220
试着写一下

15:46.220 --> 15:47.220
这里

15:47.220 --> 15:48.220
我们肯定有依赖

15:48.220 --> 15:50.220
M模块肯定要用到M1

15:50.220 --> 15:51.220
和M2里面的东西

15:51.220 --> 15:52.220
那么导杯

15:52.220 --> 15:53.220
导杯

15:53.220 --> 15:54.220
来吧

15:54.220 --> 15:55.220
我们用Import

15:55.220 --> 15:56.220
要用到M1里边

15:56.220 --> 15:57.220
拿两个东西

15:57.220 --> 15:58.220
A和B

15:58.220 --> 15:59.220
要用到A和B

15:59.220 --> 16:01.220
那么我们把A和B导入进来

16:01.220 --> 16:03.220
from来自于哪

16:03.220 --> 16:05.220
什么来自于M1

16:05.220 --> 16:06.220
对吧

16:07.220 --> 16:08.220
Import

16:08.220 --> 16:10.220
M2

16:10.220 --> 16:11.220
来自于哪

16:11.220 --> 16:13.220
来自于K

16:14.220 --> 16:15.220
对吧

16:15.220 --> 16:16.220
来自于K

16:16.220 --> 16:17.220
from

16:17.220 --> 16:18.220
第二写看

16:18.220 --> 16:19.220
M2

16:20.220 --> 16:21.220
对吧

16:21.220 --> 16:22.220
是不是吧

16:22.220 --> 16:23.220
我们要用到的M1

16:23.220 --> 16:24.220
和M2里面的东西

16:24.220 --> 16:25.220
导入

16:25.220 --> 16:26.220
现在我们M2里面

16:26.220 --> 16:28.220
还要用到默认导出

16:28.220 --> 16:29.220
用到默认导出

16:29.220 --> 16:30.220
当然我们可以在这里

16:30.220 --> 16:31.220
直接写

16:31.220 --> 16:32.220
M2的默认导出

16:32.220 --> 16:35.220
我们直接写一个M2

16:35.220 --> 16:36.220
或者

16:36.220 --> 16:37.220
我们也可以用

16:37.220 --> 16:38.220
Sonic

16:38.220 --> 16:39.220
我们没有讲到的那个语法

16:39.220 --> 16:41.220
Default

16:41.220 --> 16:42.220
Default

16:42.220 --> 16:43.220
M2

16:43.220 --> 16:44.220
对吧

16:44.220 --> 16:45.220
Earth

16:45.220 --> 16:46.220
M2

16:46.220 --> 16:47.220
都行

16:47.220 --> 16:49.220
我们不要说用这种方式

16:49.220 --> 16:50.220
用M2

16:50.220 --> 16:51.220
没问题吧

16:51.220 --> 16:52.220
我们要把两个模块

16:52.220 --> 16:53.220
我们要用到的东西导入

16:53.220 --> 16:54.220
A和B

16:54.220 --> 16:55.220
还有什么

16:55.220 --> 16:56.220
K

16:56.220 --> 16:57.220
还有什么

16:57.220 --> 16:58.220
M2的默认导出

16:58.220 --> 16:59.220
对不对

16:59.220 --> 17:01.220
然后我们来导出

17:01.220 --> 17:02.220
导出的时候

17:02.220 --> 17:03.220
怎么导出

17:03.220 --> 17:04.220
Export

17:04.220 --> 17:07.220
我们是不是要把A和B导出

17:07.220 --> 17:08.220
A和B导出

17:08.220 --> 17:09.220
这个A来自于M1的A

17:09.220 --> 17:10.220
不是M2的A

17:10.220 --> 17:11.220
你看M2的A

17:11.220 --> 17:12.220
我是不是没有导住

17:12.220 --> 17:13.220
没有导住

17:13.220 --> 17:14.220
好

17:14.220 --> 17:15.220
来吧

17:15.220 --> 17:16.220
我们这里

17:16.220 --> 17:18.220
导出A和B

17:18.220 --> 17:19.220
还要导出什么

17:19.220 --> 17:20.220
还要导出什么

17:20.220 --> 17:21.220
K

17:21.220 --> 17:23.220
还要导出K

17:23.220 --> 17:24.220
还要导出什么

17:24.220 --> 17:25.220
还要导出

17:25.220 --> 17:27.220
M2的默认导出

17:27.220 --> 17:29.220
M2的默认导出是什么

17:29.220 --> 17:30.220
M2

17:30.220 --> 17:31.220
把它Earth

17:31.220 --> 17:32.220
Default

17:32.220 --> 17:33.220
这样子就把它变成默认导出了

17:33.220 --> 17:34.220
对吧

17:34.220 --> 17:35.220
我们一句话就写完了

17:35.220 --> 17:37.220
那么还有一个东西是

17:37.220 --> 17:38.220
还有一个东西是R

17:38.220 --> 17:39.220
那么我们再重新导出

17:39.220 --> 17:40.220
我们自己的R

17:40.220 --> 17:41.220
对吧

17:41.220 --> 17:42.220
方可信

17:42.220 --> 17:44.220
不要说我们就一个变量

17:44.220 --> 17:45.220
R等于

17:45.220 --> 17:46.220
M

17:46.220 --> 17:47.220
R

17:48.220 --> 17:49.220
没问题吧

17:49.220 --> 17:50.220
那么这样子一来

17:50.220 --> 17:52.220
我们到时候

17:52.220 --> 17:53.220
把它整合了一下

17:53.220 --> 17:55.220
我当然真的写得比较简单

17:55.220 --> 17:56.220
我只是想说这个语法

17:56.220 --> 17:58.220
把它整合了一下过后

17:58.220 --> 17:59.220
我们在入口文件里边

17:59.220 --> 18:00.220
比方说

18:00.220 --> 18:01.220
咱们在入口文件里边

18:01.220 --> 18:03.220
就不用去繁硕的去使用小模块

18:03.220 --> 18:04.220
M1 M2的

18:04.220 --> 18:06.220
它的功能已经被整合过了

18:06.220 --> 18:07.220
我们可以直接使用什么

18:07.220 --> 18:08.220
M模块

18:08.220 --> 18:09.220
对吧

18:09.220 --> 18:10.220
我们可以直接使用M模块

18:10.220 --> 18:12.220
比方说我们可以用M模块里边的东西

18:12.220 --> 18:13.220
用信号

18:13.220 --> 18:14.220
Earth

18:14.220 --> 18:15.220
M模块

18:17.220 --> 18:18.220
M.js

18:18.220 --> 18:19.220
我们来看一下

18:19.220 --> 18:21.220
M模块保存的东西

18:21.220 --> 18:23.220
我就不用去直接找M1 M2了

18:23.220 --> 18:24.220
你看

18:24.220 --> 18:26.220
是不是导出了A来自M1的A

18:26.220 --> 18:27.220
B来自M1的B

18:27.220 --> 18:30.220
Default来自M2的Default

18:30.220 --> 18:32.220
K来自M2的K

18:32.220 --> 18:35.220
R来自M模块自己的东西

18:35.220 --> 18:36.220
R

18:36.220 --> 18:37.220
可以用这种模式

18:37.220 --> 18:38.220
这种模式应该看得懂吧

18:38.220 --> 18:39.220
对吧

18:39.220 --> 18:40.220
我们以前学的语法

18:40.220 --> 18:41.220
但这种模式可能

18:41.220 --> 18:42.220
稍显繁

18:42.220 --> 18:43.220
人说

18:43.220 --> 18:44.220
于是Es6

18:44.220 --> 18:45.220
非常贴心的为力

18:45.220 --> 18:46.220
考虑到了这一点

18:46.220 --> 18:48.220
如果说你有这样的需求的话

18:48.220 --> 18:50.220
那么你可以直接在导入的时候

18:50.220 --> 18:51.220
直接就导出了

18:51.220 --> 18:52.220
如果说

18:52.220 --> 18:54.220
我们把一些东西导入了过后

18:54.220 --> 18:55.220
没有什么别的用处

18:55.220 --> 18:57.220
我就是要把重新导出而已

18:57.220 --> 18:58.220
把它封装一下

18:58.220 --> 18:59.220
重新导出而已

18:59.220 --> 19:01.220
那么我们就直接在这里就写完了

19:01.220 --> 19:02.220
怎么写呢

19:02.220 --> 19:04.220
我们可以用这种方式来写

19:04.220 --> 19:05.220
你看

19:05.220 --> 19:06.220
我们要导出

19:06.220 --> 19:08.220
首先我们这一块注射掉了

19:08.220 --> 19:10.220
我们直接导出

19:10.220 --> 19:11.220
导出什么呢

19:11.220 --> 19:12.220
导出的东西

19:12.220 --> 19:14.220
来自于M1.js

19:14.220 --> 19:16.220
你看直接在export

19:16.220 --> 19:17.220
后面写上Front

19:17.220 --> 19:18.220
我们导出的东西

19:18.220 --> 19:20.220
来自于M1.js

19:20.220 --> 19:21.220
那么导出什么呢

19:21.220 --> 19:23.220
M1.里面的A和B

19:23.220 --> 19:24.220
对吧

19:24.220 --> 19:26.220
然后我们再导出export

19:26.220 --> 19:28.220
然后来自于

19:28.220 --> 19:30.220
M2.js里面的K

19:30.220 --> 19:32.220
还有一个就是默认值

19:32.220 --> 19:33.220
Front

19:33.220 --> 19:35.220
M2.js

19:35.220 --> 19:36.220
导出M2.js里面的K

19:36.220 --> 19:37.220
还有一个什么

19:37.220 --> 19:38.220
默认值

19:38.220 --> 19:39.220
对不对

19:39.220 --> 19:40.220
还有一个默认值

19:40.220 --> 19:41.220
default

19:41.220 --> 19:42.220
对吧

19:42.220 --> 19:44.220
是不是可以这样子写

19:44.220 --> 19:45.220
对不对

19:45.220 --> 19:46.220
没问题吧

19:46.220 --> 19:47.220
我们就把

19:47.220 --> 19:48.220
M2.js里面的东西

19:48.220 --> 19:50.220
一把作为默认值

19:50.220 --> 19:51.220
默认值

19:51.220 --> 19:52.220
我们还给他个名字

19:52.220 --> 19:53.220
给他个名字

19:53.220 --> 19:55.220
我们名字就是default

19:55.220 --> 19:56.220
对吧

19:56.220 --> 19:57.220
我们就是把M2.js

19:57.220 --> 19:58.220
默认值

19:58.220 --> 19:59.220
作为我们的默认值导出

19:59.220 --> 20:00.220
当然

20:00.220 --> 20:01.220
如果说你把M2.js的默认值

20:01.220 --> 20:03.220
作为自己的基本导出的话

20:03.220 --> 20:05.220
你又改名字就行了

20:05.220 --> 20:06.220
不要说A1

20:06.220 --> 20:07.220
改名字就行了

20:07.220 --> 20:08.220
随便你

20:08.220 --> 20:09.220
然后我们再导出自己的

20:09.220 --> 20:10.220
那么这样子的

20:10.220 --> 20:12.220
是不是代码更加简洁一些

20:12.220 --> 20:13.220
对不对

20:13.220 --> 20:14.220
就更加简洁一些

20:14.220 --> 20:15.220
保存

20:15.220 --> 20:16.220
你看一下这边

20:16.220 --> 20:17.220
完全一样的

20:17.220 --> 20:18.220
效果是完全一样的

20:18.220 --> 20:19.220
它只是给你提供了

20:19.220 --> 20:20.220
一个语法堂

20:20.220 --> 20:21.220
让你书写起来了

20:21.220 --> 20:23.220
更加方便一点

20:23.220 --> 20:25.220
如果说有的时候

20:25.220 --> 20:26.220
我们可能要把

20:26.220 --> 20:27.220
某一个模块里面的

20:27.220 --> 20:29.220
所有东西全部导出

20:29.220 --> 20:31.220
那又咋办呢

20:31.220 --> 20:32.220
如果说我们要把

20:32.220 --> 20:33.220
模块里面的所有东西

20:33.220 --> 20:34.220
全部导出

20:34.220 --> 20:35.220
不要说我们要把

20:35.220 --> 20:36.220
M1.js的所有东西

20:36.220 --> 20:37.220
全部导出

20:37.220 --> 20:38.220
一些信号

20:38.220 --> 20:39.220
那么M1.js里面的

20:39.220 --> 20:40.220
所有东西

20:40.220 --> 20:41.220
全部导出了

20:41.220 --> 20:42.220
M1.js里面看ABC

20:42.220 --> 20:43.220
是不是全部导出了

20:43.220 --> 20:44.220
对不对

20:44.220 --> 20:45.220
当然这个过程

20:45.220 --> 20:46.220
你要注意从名的问题

20:46.220 --> 20:48.220
你要注意从名的问题

20:48.220 --> 20:49.220
比方说你ML里面

20:49.220 --> 20:50.220
也写信号

20:50.220 --> 20:51.220
保存

20:51.220 --> 20:53.220
那么这个A

20:53.220 --> 20:54.220
我看一下

20:54.220 --> 20:56.540
为什么

20:56.540 --> 20:57.540
是不是少了一个东西

20:57.540 --> 20:58.540
是不是少了一个东西

20:58.540 --> 21:00.540
什么东西

21:00.540 --> 21:02.540
我看一下

21:02.540 --> 21:04.540
BC

21:04.540 --> 21:05.540
是不是少了一个

21:05.540 --> 21:06.540
少了一个A

21:06.540 --> 21:07.540
对吧

21:07.540 --> 21:08.540
是不是有名称冲突

21:08.540 --> 21:09.540
这里有名称冲突

21:09.540 --> 21:10.540
那么名称冲突

21:10.540 --> 21:11.540
没有处理

21:11.540 --> 21:12.540
它怎么办

21:12.540 --> 21:13.540
它没办法

21:13.540 --> 21:14.540
它就把名称冲突

21:14.540 --> 21:15.540
去掉了

21:15.540 --> 21:16.540
自己去

21:16.540 --> 21:17.540
如果说发现名称冲突的话

21:17.540 --> 21:18.540
自己去

21:18.540 --> 21:19.540
把名称冲突解决了

21:19.540 --> 21:21.540
比方说你要导入两个A

21:21.540 --> 21:22.540
这边要导入一个A

21:22.540 --> 21:24.540
那么这边也要导入一个A

21:24.540 --> 21:25.540
比方说这边也要

21:25.540 --> 21:27.540
ML里面也有A吗

21:27.540 --> 21:29.540
你看ML里面

21:30.540 --> 21:31.540
这边

21:31.540 --> 21:32.540
ML里面是不是也有A

21:32.540 --> 21:33.540
那么也有A的话

21:33.540 --> 21:34.540
那么这里面

21:34.540 --> 21:35.540
你肯定要给它重新命名

21:35.540 --> 21:37.540
比方说ML

21:37.540 --> 21:39.540
你看重新命名一下

21:39.540 --> 21:41.540
你肯定不能有重名吗

21:41.540 --> 21:42.540
ML

21:42.540 --> 21:43.540
当然这些东西

21:43.540 --> 21:44.540
可以灵活处理了

21:44.540 --> 21:46.540
你只要知道这个愚法规则就行了

21:46.540 --> 21:48.540
这种东西不太常见

21:48.540 --> 21:49.540
不太常见

21:49.540 --> 21:50.540
这要编写多大的项目

21:50.540 --> 21:52.540
你才会遇到这样的问题

21:52.540 --> 21:54.540
但是它可能会存在

21:54.540 --> 21:56.540
如果说你到时候

21:56.540 --> 21:58.540
忘了这样的愚法的话

21:58.540 --> 21:59.540
就可以回过头来看一下

21:59.540 --> 22:00.540
这个章节

22:00.540 --> 22:01.540
这个章节你不用去使用

22:01.540 --> 22:03.540
这就是我要说的

22:03.540 --> 22:06.540
三个ES6模块画的细节

22:06.540 --> 22:07.540
其他就没啥了

22:07.540 --> 22:08.540
就没啥了

22:08.540 --> 22:10.540
那么制成了ES模块画

22:10.540 --> 22:11.540
就讲完了

22:11.540 --> 22:12.540
我们整个模块画的

22:12.540 --> 22:13.540
课程也讲完了

22:13.540 --> 22:14.540
是不是东西很简单

22:14.540 --> 22:15.540
并没有什么复杂的

22:15.540 --> 22:16.540
咱们下节课

22:16.540 --> 22:17.540
还是来做一个练习

22:17.540 --> 22:19.540
因为CommonJS也好

22:19.540 --> 22:20.540
ES6模块画也好

22:20.540 --> 22:21.540
他们都是重点

22:21.540 --> 22:22.540
我们这门口的重点

22:22.540 --> 22:23.540
那么遇到重点的时候

22:23.540 --> 22:24.540
我们还做一个练习

22:24.540 --> 22:25.540
来恐怖一下

22:25.540 --> 22:27.540
ES6模块画的一些知识

