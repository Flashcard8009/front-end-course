WEBVTT

00:00.620 --> 00:05.620
我们从这节课开始来认识耶稣六的魔幻化标准

00:05.620 --> 00:08.620
首先我们这节课肯定一节课讲不完

00:08.620 --> 00:11.620
它东西比较多 因为它要适应各种场景

00:11.620 --> 00:14.620
毕竟是官方出的标准 它考虑的比较完善

00:14.620 --> 00:16.620
东西比较多 所以说我们要分几节课来讲

00:16.620 --> 00:21.620
不着急 我们这节课先来学习基本的导入导出

00:21.620 --> 00:26.620
再学习基本的导入导出之前 我们首先多说几句

00:26.620 --> 00:30.620
因为官方提供了一个魔幻化的规范出来

00:30.620 --> 00:34.620
它是不会给你实现的 它只是说你应该怎么做

00:34.620 --> 00:38.620
应该是什么样子 具体的实现要交给那些浏览器厂商

00:38.620 --> 00:44.620
比如说怎么来引入文件 文件怎么来夹载出来

00:44.620 --> 00:48.620
肯定要远程夹载 对吧 比如说你这个文件里边

00:48.620 --> 00:50.620
比如说魔幻化 对吧 肯定是要整个代码的

00:50.620 --> 00:54.620
都要隐藏起来 你不导出的部分 肯定是不能污染权

00:54.620 --> 00:57.620
去变亮的 那么这些东西都需要浏览器厂商

00:57.620 --> 01:00.620
去考虑怎么去实现它 那么浏览器厂商

01:00.620 --> 01:04.620
比如说你作为浏览器厂商 你肯定要想一个问题

01:04.620 --> 01:07.620
就说你这个魔幻化标准出来了之后

01:07.620 --> 01:11.620
我肯定跟以前的引入介事肯定不一样了

01:11.620 --> 01:15.620
如果说你还按照以前的介事的方式来引入的话

01:15.620 --> 01:18.620
那我是把你当成魔幻 还是不是魔幻的

01:18.620 --> 01:22.620
这就是一个问题了 如果说我把你当成一个魔幻的话

01:22.620 --> 01:26.620
那里面定义的权局变亮肯定是要把隐藏起来的

01:26.620 --> 01:29.620
不能让别人其他魔幻 不能让其他魔幻使用

01:29.620 --> 01:32.620
并且还不能污染权局变亮 对吧

01:32.620 --> 01:34.620
你定义的权局变亮是肯定要隐藏起来的

01:34.620 --> 01:38.620
但是如果说你这样子做了 如果说我其他都没变

01:38.620 --> 01:42.620
我把你所有的介事文件的权局变亮都把隐藏起来

01:42.620 --> 01:46.620
那么以前写的程序咋办呢 你还让不到以前写的程序运行呢

01:46.620 --> 01:49.620
所以就涉及到一个向后兼容的问题 对吧

01:49.620 --> 01:53.620
就涉及到一个就是兼容以前代码的问题

01:53.620 --> 01:55.620
所以榴弹器不能这么草率的解决

01:55.620 --> 01:58.620
但是官方它提出来的标准也不能不遵守

01:58.620 --> 02:00.620
因此它肯定要想一个办法出来

02:00.620 --> 02:03.620
也就是它就想出来这么一个办法

02:03.620 --> 02:07.620
目前大部分榴弹器它都使用这种办法来导出一个魔幻

02:07.620 --> 02:10.620
就是说你导入一个介事文件的时候

02:10.620 --> 02:13.620
你告诉我它到底是不是一个魔幻

02:13.620 --> 02:17.620
如果说你加了这么一个属相Type等于Maju

02:17.620 --> 02:19.620
它就表示榴弹器就认识了

02:19.620 --> 02:21.620
原来你是把它当成一个魔幻

02:21.620 --> 02:23.620
那我就把它当成一个魔幻来运行

02:23.620 --> 02:25.620
那我肯定有自己特殊的运行方式

02:25.620 --> 02:27.620
比方说就简单的

02:27.620 --> 02:30.620
我把它把整个魔幻的代码放到一个函数里面执行

02:30.620 --> 02:32.620
它就没有五展全局变亮的问题了

02:32.620 --> 02:34.620
通过特定的方式来导出

02:34.620 --> 02:35.620
没了意思吗

02:35.620 --> 02:40.620
所以说你之后要在榴弹器端要能够使用魔幻

02:40.620 --> 02:43.620
要能够使用ES6的魔幻号标准

02:43.620 --> 02:46.620
那么你就必须要损损它的这种方式

02:46.620 --> 02:48.620
虽然说这个方式

02:48.620 --> 02:50.620
官方就是ES官方

02:50.620 --> 02:52.620
它并没有说你必须要这么做

02:52.620 --> 02:54.620
它并没有说那是你具体实现的事情

02:54.620 --> 02:57.620
不过目前的榴弹器厂商的基本上都这么干

02:57.620 --> 03:00.620
比方说我们这里有一个文件夹GS

03:00.620 --> 03:02.620
或者我们把它叫做Maju

03:02.620 --> 03:04.620
我们的魔幻全部写到这里边

03:04.620 --> 03:06.620
那肯定要提供一个入口文件

03:06.620 --> 03:08.620
我们就写个英这个字叫GS吧

03:08.620 --> 03:10.620
比方说我们这里说出一句话

03:10.620 --> 03:12.620
这是一个入口文件

03:12.620 --> 03:15.620
我们这里在这个文件里边定一个变量

03:15.620 --> 03:17.620
等于1用2来定义的

03:17.620 --> 03:21.620
好,接下来我们如果说按照以前的方式

03:21.620 --> 03:24.620
按照以前的方式就这样的写

03:24.620 --> 03:26.620
那有没有污染的全局变量

03:26.620 --> 03:27.620
那肯定有,你看吗

03:27.620 --> 03:29.620
这个毫无疑问肯定有

03:29.620 --> 03:32.620
因为它的工作原理跟之前你们学习的

03:32.620 --> 03:34.620
GS基础是一样的

03:34.620 --> 03:36.620
是不是一定有值污染的全局变量

03:36.620 --> 03:38.620
那如果说它是一个魔幻的话

03:38.620 --> 03:39.620
它就不能污染全局变量了

03:39.620 --> 03:42.620
所以说你在通过一种方式来告诉榴弹器

03:42.620 --> 03:43.620
它是一个魔幻

03:43.620 --> 03:46.620
你就给它加上一个Type属性

03:46.620 --> 03:48.620
完了,没了

03:48.620 --> 03:50.620
只需要用一个解释就行了

03:50.620 --> 03:52.620
因为它就是一个入口文件

03:52.620 --> 03:54.620
保存,你看一下,现在给我们看一下

03:54.620 --> 03:56.620
你看是不是仍然运行的这个文件

03:56.620 --> 03:58.620
仍然运行的,看一下这个A

03:58.620 --> 04:00.620
是不是说A is not defend

04:00.620 --> 04:03.620
说明啥呀,说明榴弹器是把它当成一个魔幻来执行

04:03.620 --> 04:06.620
那么这里边的所有东西都不会污染全局的

04:06.620 --> 04:07.620
没了意思吗

04:07.620 --> 04:09.620
OK,这是关于这一点

04:09.620 --> 04:10.620
我顺便说一下

04:10.620 --> 04:13.620
我们在页面中先阶段如何去使用一个魔幻

04:13.620 --> 04:15.620
用这种方式

04:15.620 --> 04:17.620
好,我们就继续看

04:17.620 --> 04:21.260
接下来我们就开始进入正题了

04:21.260 --> 04:24.260
就是ES6魔幻化

04:24.260 --> 04:25.260
官方标准里边

04:25.260 --> 04:28.260
它怎么来约定导入导出的

04:28.260 --> 04:31.260
ES6把魔幻的导入导出

04:31.260 --> 04:34.260
分成两种,有两种不同的情况

04:34.260 --> 04:37.260
第一种是基本的导入导出

04:37.260 --> 04:39.260
我们通常也把它称之为就是导入导出

04:39.260 --> 04:42.260
第二种叫做默认的导出导出

04:42.260 --> 04:44.260
那么这两种情况

04:44.260 --> 04:46.260
我们分别要用两节课来说明

04:46.260 --> 04:48.260
下节课我们说默认的导出导出

04:48.260 --> 04:51.260
这节课咱们说基本的导出导出

04:51.260 --> 04:53.260
好,首先我们看一下下面这个图

04:53.260 --> 04:56.260
就是说你一个魔幻你有多种导出方式

04:56.260 --> 04:58.260
第一种方式就是左边的

04:58.260 --> 05:00.260
就这一部分

05:00.260 --> 05:03.260
这一部分叫做基本的导出

05:03.260 --> 05:06.260
第二部分叫做默认导出

05:06.260 --> 05:08.260
随便,你要么选择默认导出

05:08.260 --> 05:10.260
要么选择基本导出

05:10.260 --> 05:13.260
或者是两个都选择都没问题

05:13.260 --> 05:15.260
或者是两个都不选择

05:15.260 --> 05:17.260
那就没有导出任何东西

05:17.260 --> 05:18.260
都没问题

05:18.260 --> 05:20.260
它分为这么两种

05:20.260 --> 05:22.260
我们这节课只看左边这一部分

05:22.260 --> 05:27.260
就是基本的导出和基本的导入

05:27.260 --> 05:28.260
那么这一部分

05:28.260 --> 05:30.260
大家可以从图里边看得很清楚

05:30.260 --> 05:33.260
我们基本的导出它可以有多个

05:33.260 --> 05:35.260
就是我想导出多个东西

05:35.260 --> 05:36.260
一会儿导出一个寒树

05:36.260 --> 05:38.260
一会儿导出一个字布串

05:38.260 --> 05:41.260
一会儿导出一个对象

05:41.260 --> 05:43.260
如果说我要导出多个东西

05:43.260 --> 05:45.260
我可以选择使用基本的导出

05:45.260 --> 05:47.260
它就可以导出多个东西

05:47.260 --> 05:49.260
其实我们也可以利用下节课

05:49.260 --> 05:51.260
我们要学习的基本的导

05:51.260 --> 05:52.260
默认的导出

05:52.260 --> 05:54.260
它其实也可以导出多个东西

05:54.260 --> 05:56.260
比方说把它封装成一个对象

05:56.260 --> 05:57.260
把这些东西

05:57.260 --> 05:58.260
全部作为对象的属性

05:58.260 --> 06:00.260
也可以实现默认导出

06:00.260 --> 06:02.260
就有点类似于啥呢

06:02.260 --> 06:04.260
基本的导出就有点类似

06:04.260 --> 06:05.260
我们之前学的那个

06:05.260 --> 06:07.260
common.js里面的export

06:07.260 --> 06:10.260
它是不是可以导出多个export

06:10.260 --> 06:13.260
它是不是可以导出多个

06:13.260 --> 06:15.260
分别给它们复制就完事了

06:15.260 --> 06:16.260
分别给它们复制

06:16.260 --> 06:18.260
是不是可以导出多个

06:18.260 --> 06:19.260
而默认的导出

06:19.260 --> 06:20.260
有点类似于啥呢

06:20.260 --> 06:22.260
有点类似于common.js里面的这个东西

06:22.260 --> 06:24.260
那是不是只能写一次这个玩意儿

06:24.260 --> 06:25.260
因为它最终返回的就是这个玩意儿

06:25.260 --> 06:26.260
它只能写一次

06:26.260 --> 06:29.260
只不过在common.js里边

06:29.260 --> 06:32.260
它这两者是不是不能共存的

06:32.260 --> 06:33.260
如果说共存的话

06:33.260 --> 06:35.260
非常容易造成冲突

06:35.260 --> 06:36.260
原因我都给大家解释过了

06:36.260 --> 06:38.260
因为这两个东西是一个东西

06:38.260 --> 06:39.260
非常容易造成冲突

06:39.260 --> 06:41.260
但是在ES6里边

06:41.260 --> 06:42.260
它的模块化标准里边

06:42.260 --> 06:43.260
这两个东西是不冲突的

06:43.260 --> 06:45.260
它们可以同时存在

06:45.260 --> 06:46.260
没关系

06:46.260 --> 06:49.260
我们这节课只学习基本的导入

06:49.260 --> 06:50.260
和基本的导出

06:50.260 --> 06:52.260
我们下节课再来学习默认导出

06:52.260 --> 06:54.260
我们接着往下看

06:54.260 --> 06:56.260
首先我们来看基本的导出

06:56.260 --> 06:57.260
有导出才能有导入

06:57.260 --> 06:59.260
我们首先来看基本的导出

06:59.260 --> 07:01.260
基本的导出就类似于我们刚才说的

07:02.260 --> 07:04.260
common.js里边的export

07:06.260 --> 07:07.260
那么同志们也可以看出

07:07.260 --> 07:09.260
基本导出是不是可以有多个

07:09.260 --> 07:10.260
对吧

07:10.260 --> 07:13.260
并且每一个导出是不是得有名字

07:13.260 --> 07:14.260
你每个导出这里肯定要有名字

07:14.260 --> 07:16.260
名字还肯定得不一样

07:16.260 --> 07:17.260
对吧

07:17.260 --> 07:18.260
是不是肯定得不一样

07:18.260 --> 07:19.260
是不是得有名字

07:19.260 --> 07:21.260
那么在ES6的标准里边

07:21.260 --> 07:22.260
它怎么来写基本导出呢

07:22.260 --> 07:24.260
它是用这种方式来写

07:24.260 --> 07:25.260
有两种写法

07:25.260 --> 07:26.260
一个是export

07:26.260 --> 07:28.260
声明表达式

07:28.260 --> 07:29.260
好

07:29.260 --> 07:31.260
我们来看一下第种写法

07:31.260 --> 07:33.260
我们这里单独来写个模块

07:33.260 --> 07:35.260
比方说模块A

07:35.260 --> 07:36.260
模块A

07:36.260 --> 07:37.260
比方说模块A里边

07:37.260 --> 07:38.260
我们要导出一个什么呢

07:38.260 --> 07:40.260
导出一个东西

07:40.260 --> 07:41.260
用基本导出

07:41.260 --> 07:42.260
直接写export

07:42.260 --> 07:44.260
注意后面没有s

07:44.260 --> 07:45.260
export空格

07:45.260 --> 07:47.260
它变成语法层面的东西了

07:47.260 --> 07:48.260
需要浏览器支持

07:48.260 --> 07:50.260
浏览器目前都支持了

07:50.260 --> 07:51.260
export

07:51.260 --> 07:53.260
然后后面写上了什么呢

07:53.260 --> 07:54.260
声明表达式

07:54.260 --> 07:55.260
什么叫声明表达式呢

07:55.260 --> 07:57.260
声明一个变量会不会

07:58.260 --> 07:59.260
就声明一个变量

07:59.260 --> 08:00.260
不是声明表达式吗

08:00.260 --> 08:01.260
声明一个变量

08:01.260 --> 08:02.260
那么这句话

08:02.260 --> 08:03.260
什么意思

08:03.260 --> 08:05.260
导出A

08:05.260 --> 08:07.260
值为1

08:07.260 --> 08:08.260
就这么简单

08:08.260 --> 08:09.260
导出A值为1

08:09.260 --> 08:11.260
就有点类似于

08:11.260 --> 08:13.260
类似于

08:13.260 --> 08:15.260
common.js

08:15.260 --> 08:16.260
中的

08:16.260 --> 08:17.260
什么呢

08:17.260 --> 08:18.260
export

08:18.260 --> 08:19.260
A等于

08:19.260 --> 08:20.260
就这么个意思

08:20.260 --> 08:21.260
什么意思

08:21.260 --> 08:23.260
写声明表达式

08:23.260 --> 08:24.260
一定是声明表达式

08:24.260 --> 08:25.260
那么如果说

08:25.260 --> 08:26.260
我要导出一个函数

08:26.260 --> 08:27.260
你声明一个函数

08:27.260 --> 08:28.260
你直接声明一个函数

08:28.260 --> 08:29.260
就完成了

08:29.260 --> 08:30.260
比方说函数

08:30.260 --> 08:31.260
这些名字

08:31.260 --> 08:32.260
这些名字

08:32.260 --> 08:34.260
因为我们刚才说了

08:34.260 --> 08:35.260
这种基本的导出

08:35.260 --> 08:37.260
由于它可以导出多个

08:37.260 --> 08:38.260
那肯定得有名字

08:38.260 --> 08:39.260
名字来

08:39.260 --> 08:40.260
看你导出的是哪一个

08:40.260 --> 08:41.260
不然的话

08:41.260 --> 08:42.260
到时候我导入

08:42.260 --> 08:43.260
怎么知道导入哪一个呢

08:43.260 --> 08:45.260
所以每个必须要有名字

08:45.260 --> 08:47.260
比方说有一个test函数

08:48.260 --> 08:49.260
那么这个是相当于什么呢

08:49.260 --> 08:50.260
相当于是

08:50.260 --> 08:52.260
导出test

08:52.260 --> 08:55.260
值为1个函数

08:55.260 --> 08:57.260
类似于common.js

08:57.260 --> 09:01.260
类似于common.js中的

09:01.260 --> 09:03.260
exports

09:03.260 --> 09:05.260
test等于什么一个函数

09:05.260 --> 09:07.260
就这么个意思

09:07.260 --> 09:09.260
基本的导出

09:09.260 --> 09:10.260
没问题吧

09:10.260 --> 09:12.260
必须要写声明语决

09:12.260 --> 09:13.260
你能不能这样子写呢

09:13.260 --> 09:14.260
比方说我先定一个变量

09:14.260 --> 09:16.260
A等于2

09:16.260 --> 09:18.260
然后能不能这样子写呢

09:18.260 --> 09:19.260
不行

09:19.260 --> 09:20.260
这样子写是语法错误的

09:20.260 --> 09:21.260
因为

09:21.260 --> 09:24.260
以后是不是一个声明语决

09:24.260 --> 09:25.260
它不是一个声明语决

09:25.260 --> 09:27.260
它不是声明一个东西

09:27.260 --> 09:28.260
因此不能这样子写

09:28.260 --> 09:29.260
那能不能这样子写呢

09:29.260 --> 09:30.260
我给它复职

09:30.260 --> 09:32.260
复职它也不是声明语决

09:32.260 --> 09:33.260
也不是声明语决

09:33.260 --> 09:35.260
因此也不能这样子写

09:35.260 --> 09:36.260
没了意思吗

09:36.260 --> 09:38.260
那能不能写个长量呢

09:38.260 --> 09:39.260
我导出一个3

09:39.260 --> 09:40.260
导出一个3

09:40.260 --> 09:41.260
能不能写呢

09:41.260 --> 09:42.260
它没有名字啊

09:42.260 --> 09:43.260
问题是吧

09:43.260 --> 09:44.260
是不是没名字啊

09:44.260 --> 09:45.260
它为什么要让你写

09:45.260 --> 09:46.260
这个声明语决

09:46.260 --> 09:47.260
因为声明语决

09:47.260 --> 09:48.260
你不要是不是

09:48.260 --> 09:49.260
带着一个名字

09:49.260 --> 09:50.260
而且我们说

09:50.260 --> 09:51.260
基本导出

09:51.260 --> 09:52.260
它必须要带名字的

09:52.260 --> 09:53.260
因为它有区分不同的导出

09:53.260 --> 09:54.260
因为它可以导出多个

09:54.260 --> 09:55.260
所以说你必须要写名字

09:55.260 --> 09:57.260
那长量肯定不行

09:57.260 --> 09:58.260
肯定不行

09:58.260 --> 09:59.260
没了意思吗

09:59.260 --> 10:00.260
OK啊

10:00.260 --> 10:01.260
这是关于这个声明导出

10:01.260 --> 10:02.260
比方说你

10:02.260 --> 10:03.260
有的同学说

10:03.260 --> 10:04.260
ES6里面不是有个内吗

10:04.260 --> 10:05.260
对吧

10:05.260 --> 10:06.260
我怎么导出个内呢

10:06.260 --> 10:07.260
写呗

10:07.260 --> 10:08.260
一个内

10:08.260 --> 10:09.260
比方说我们

10:09.260 --> 10:10.260
一个person嘛

10:10.260 --> 10:11.260
一个person内

10:11.260 --> 10:12.260
导出呗

10:12.260 --> 10:13.260
一样的

10:13.260 --> 10:14.260
这也是个声明语决

10:14.260 --> 10:15.260
声明一个内

10:15.260 --> 10:16.260
都可以

10:16.260 --> 10:17.260
只要你是声明语决

10:17.260 --> 10:18.260
就行

10:18.260 --> 10:20.260
比方说你要导出个字步上

10:20.260 --> 10:21.260
也其实也挺简单的

10:21.260 --> 10:23.260
你要干声明一个名字

10:23.260 --> 10:24.260
名字肯定声明

10:24.260 --> 10:25.260
但是这个不一定写话

10:25.260 --> 10:26.260
你可以写net

10:26.260 --> 10:27.260
也可以写const

10:27.260 --> 10:28.260
其实这些都不所谓

10:28.260 --> 10:30.260
比方说我们这里导出一个

10:30.260 --> 10:31.260
net

10:31.260 --> 10:32.260
abc

10:32.260 --> 10:33.260
也行

10:33.260 --> 10:34.260
也行

10:34.260 --> 10:35.260
这些都是属于

10:35.260 --> 10:36.260
声明导出

10:36.260 --> 10:38.260
就基本导出

10:38.260 --> 10:39.260
这是第1种方式

10:39.260 --> 10:42.260
使用声明表达式

10:42.260 --> 10:44.260
第2种方式呢是

10:44.260 --> 10:45.260
如果说你

10:45.260 --> 10:46.260
你现在没

10:46.260 --> 10:47.260
不好写表达式

10:47.260 --> 10:48.260
但是呢

10:48.260 --> 10:49.260
你有了一个变量

10:49.260 --> 10:51.260
你希望那个变量的名字

10:51.260 --> 10:53.260
就是我们要导出的名字

10:53.260 --> 10:54.260
那么这个时候咋办呢

10:54.260 --> 10:56.260
比方说

10:56.260 --> 10:57.260
我们这里

10:57.260 --> 10:58.260
比方说

10:58.260 --> 10:59.260
我们这里有个变量

10:59.260 --> 11:00.260
ag

11:00.260 --> 11:01.260
10

11:01.260 --> 11:02.260
对吧

11:02.260 --> 11:03.260
我们有这么一个变量

11:03.260 --> 11:04.260
好

11:04.260 --> 11:05.260
那么这个变量

11:05.260 --> 11:06.260
我需要把导出

11:06.260 --> 11:07.260
这个变量哪来的

11:07.260 --> 11:08.260
别管

11:08.260 --> 11:09.260
总之我现在有这么一个变量

11:09.260 --> 11:10.260
我现在呢

11:10.260 --> 11:11.260
不好写声明语决了

11:11.260 --> 11:13.260
我不总不能写上这个东西

11:13.260 --> 11:14.260
ag等于ag

11:14.260 --> 11:15.260
这个

11:15.260 --> 11:16.260
也有问题

11:16.260 --> 11:17.260
ag重复定义了

11:17.260 --> 11:18.260
对不对

11:18.260 --> 11:19.260
我们用了var

11:19.260 --> 11:20.260
var的这个重复定义了

11:20.260 --> 11:21.260
到没啥问题

11:21.260 --> 11:22.260
但是用net的话

11:22.260 --> 11:23.260
是不是要爆错了

11:23.260 --> 11:24.260
所以说这里呢

11:24.260 --> 11:25.260
又出现问题了

11:25.260 --> 11:27.260
那我只能重新安定一个名字

11:27.260 --> 11:28.260
但是我又不想重新命名字

11:28.260 --> 11:30.260
我就想把这个变量导出

11:30.260 --> 11:31.260
变量的名字呢

11:31.260 --> 11:32.260
就是我导出的名字

11:32.260 --> 11:33.260
变量的值呢

11:33.260 --> 11:34.260
就是我导出的值

11:34.260 --> 11:35.260
没了意思吗

11:35.260 --> 11:36.260
所以说

11:36.260 --> 11:37.260
如果说遇到这种情况的话

11:37.260 --> 11:38.260
你怎么能写呢

11:38.260 --> 11:39.260
他可以

11:39.260 --> 11:40.260
他有

11:40.260 --> 11:41.260
他有这么一个规范

11:41.260 --> 11:42.260
他也可以这样的写

11:42.260 --> 11:43.260
写两个大过号

11:43.260 --> 11:44.260
注意啊

11:44.260 --> 11:45.260
这不是对象哦

11:45.260 --> 11:46.260
跟对象没关系啊

11:46.260 --> 11:47.260
不要把他去认为

11:47.260 --> 11:48.260
认为导出一个对象

11:48.260 --> 11:49.260
不是这个意思啊

11:49.260 --> 11:50.260
不是这个意思

11:50.260 --> 11:51.260
你把你的名字

11:51.260 --> 11:53.260
只是用大过号来约定一下

11:53.260 --> 11:55.260
表示说我这里不要写名字了

11:55.260 --> 11:56.260
名字是啥呢

11:56.260 --> 11:57.260
名字就是A级

11:57.260 --> 11:58.260
那么这个时候呢

11:58.260 --> 11:59.260
他会怎么做呢

11:59.260 --> 12:03.570
他就会将A级

12:03.570 --> 12:08.570
将A级变量的名称

12:08.570 --> 12:11.570
作为导出的名称

12:11.570 --> 12:15.570
A级变量的值

12:15.570 --> 12:17.570
作为导出的值

12:18.570 --> 12:20.570
他就这样理解了

12:20.570 --> 12:21.570
所以这个大过号

12:21.570 --> 12:22.570
不是对象啊

12:22.570 --> 12:23.570
你再搞清楚不是对象

12:23.570 --> 12:24.570
那如果说你

12:24.570 --> 12:26.570
如果说你有多个变量了

12:26.570 --> 12:29.570
A级比方说6等于1

12:29.570 --> 12:30.570
性别等于1

12:30.570 --> 12:31.570
那么如果说你要把

12:31.570 --> 12:32.570
这个导出呢都好

12:32.570 --> 12:33.570
对吧

12:33.570 --> 12:34.570
就这样写

12:34.570 --> 12:35.570
就这样写

12:35.570 --> 12:36.570
你别把他当成对象写

12:36.570 --> 12:37.570
我求求你了

12:37.570 --> 12:38.570
你千万别把他当成对象写

12:38.570 --> 12:39.570
一看当成对象写

12:39.570 --> 12:40.570
是不是有错

12:40.570 --> 12:41.570
他不是对象

12:41.570 --> 12:42.570
他只是一种与法

12:42.570 --> 12:43.570
特殊的与法

12:43.570 --> 12:44.570
你写两个大过号

12:44.570 --> 12:45.570
表示一个借定符

12:45.570 --> 12:46.570
你礼拜的东西

12:46.570 --> 12:47.570
当成名称

12:47.570 --> 12:48.570
这是变量的名称

12:48.570 --> 12:50.570
我们用这个名称来作为

12:50.570 --> 12:51.570
导出的名称

12:51.570 --> 12:52.570
用这个变量的值

12:52.570 --> 12:53.570
来作为导出的值

12:53.570 --> 12:54.570
那么这种写法

12:54.570 --> 12:55.570
就相当于是

12:55.570 --> 12:58.570
下边是两句话

12:58.570 --> 12:59.570
A级等于是吧

12:59.570 --> 13:00.570
相当于是

13:00.570 --> 13:02.570
下边的两句话

13:02.570 --> 13:03.570
6等于1

13:03.570 --> 13:04.570
对吧

13:04.570 --> 13:05.570
相当于是这么两句话

13:05.570 --> 13:06.570
没意思吗

13:06.570 --> 13:07.570
OK

13:07.570 --> 13:08.570
那么就是这两种写法

13:08.570 --> 13:10.570
基本的导出呢

13:10.570 --> 13:11.570
就是这两种写法

13:11.570 --> 13:12.570
一个是导出声明表达式

13:12.570 --> 13:14.570
一个是导出居民符号

13:14.570 --> 13:15.570
大过号里面写居民符号

13:15.570 --> 13:16.570
那么你想想

13:16.570 --> 13:17.570
这个模块里面

13:17.570 --> 13:18.570
导出了哪些东西

13:18.570 --> 13:19.570
来我们来看一下

13:19.570 --> 13:20.570
这个模块里面

13:20.570 --> 13:22.570
导出了哪些东西呢

13:22.570 --> 13:23.570
我如果说把

13:23.570 --> 13:24.570
把整个模块

13:24.570 --> 13:25.570
导出当成一个对象的话

13:25.570 --> 13:26.570
它当然

13:26.570 --> 13:27.570
不存在什么当成对象

13:27.570 --> 13:28.570
我们假设

13:28.570 --> 13:29.570
导出是整个对象的话

13:29.570 --> 13:30.570
导出了哪些东西呢

13:30.570 --> 13:31.570
导出了一个A

13:31.570 --> 13:32.570
是一个E

13:32.570 --> 13:33.570
对吧

13:33.570 --> 13:35.570
导出了一个Test

13:35.570 --> 13:36.570
Test是一个什么

13:36.570 --> 13:37.570
函数

13:37.570 --> 13:39.570
当然不是对象

13:39.570 --> 13:40.570
导出了整个不是对象

13:40.570 --> 13:42.570
它就是分开导出的

13:42.570 --> 13:43.570
然后呢

13:43.570 --> 13:44.570
一个Person

13:44.570 --> 13:45.570
一个Person

13:45.570 --> 13:46.570
也是一个函数

13:46.570 --> 13:47.570
对吧

13:47.570 --> 13:48.570
内也是个函数

13:48.570 --> 13:49.570
然后呢

13:49.570 --> 13:50.570
还有什么呢

13:50.570 --> 13:51.570
导出一个Name

13:51.570 --> 13:52.570
是一个ABC

13:52.570 --> 13:53.570
对不对

13:53.570 --> 13:54.570
然后呢

13:54.570 --> 13:56.570
导出一个A级

13:56.570 --> 13:57.570
是不是18

13:57.570 --> 13:58.570
导出一个什么呢

13:58.570 --> 14:00.570
导出了一个Sex

14:00.570 --> 14:01.570
是1

14:01.570 --> 14:02.570
你看

14:02.570 --> 14:03.570
这个模块里面

14:03.570 --> 14:04.570
导出了这么一些东西

14:04.570 --> 14:05.570
这些东西

14:05.570 --> 14:06.570
都是属于基本导出

14:06.570 --> 14:07.570
算了

14:07.570 --> 14:08.570
不把它形成对象了

14:08.570 --> 14:09.570
把形成函数

14:09.570 --> 14:12.570
就基本导出

14:12.570 --> 14:13.570
它不是一个对象

14:13.570 --> 14:14.570
它就是分开导出的

14:14.570 --> 14:15.570
就这么个意思

14:15.570 --> 14:16.570
就是规范规定的

14:16.570 --> 14:17.570
那怎么去实现

14:17.570 --> 14:18.570
瀏覽去自己去实现

14:18.570 --> 14:19.570
我不管

14:20.570 --> 14:21.570
就是基本导出

14:21.570 --> 14:22.570
是不是很简单

14:22.570 --> 14:23.570
所以说我们

14:23.570 --> 14:24.570
只要理解到基本导出

14:24.570 --> 14:26.570
每一个导出必须要有名字

14:26.570 --> 14:27.570
所以说他要求的基本导出

14:27.570 --> 14:28.570
必须要跟上一个

14:28.570 --> 14:29.570
声明的东西

14:29.570 --> 14:30.570
或者是一个

14:30.570 --> 14:31.570
大括号里面

14:31.570 --> 14:32.570
写个具名符号

14:32.570 --> 14:33.570
具名符号就是

14:33.570 --> 14:34.570
具有名字的东西

14:34.570 --> 14:35.570
比如说变量

14:35.570 --> 14:36.570
函数名

14:36.570 --> 14:37.570
这些东西都可以

14:37.570 --> 14:38.570
比如说函数Test

14:38.570 --> 14:39.570
要在这里面导出

14:39.570 --> 14:40.570
也可以

14:40.570 --> 14:41.570
对吧

14:42.570 --> 14:43.570
当然如果说有重名的话

14:43.570 --> 14:44.570
一定是后边

14:44.570 --> 14:45.570
覆盖前面

14:45.570 --> 14:46.570
这个没什么好说的

14:47.570 --> 14:49.570
那么这里就是

14:49.570 --> 14:53.570
基本的导出搞定了

14:53.570 --> 14:54.570
那么我们来看一下

14:54.570 --> 14:55.570
怎么来导入呢

14:55.570 --> 14:56.570
一个模块

14:56.570 --> 14:57.570
它有这么一些导出

14:57.570 --> 14:59.570
那么我怎么来导入它呢

15:00.570 --> 15:01.570
来吧

15:01.570 --> 15:02.570
我们在英这个社里面

15:02.570 --> 15:03.570
入口文件里面

15:03.570 --> 15:04.570
来导入

15:04.570 --> 15:05.570
那怎么来导入呢

15:05.570 --> 15:06.570
注意

15:06.570 --> 15:07.570
我这里忘了写了一句话

15:08.570 --> 15:10.570
我们商劫客说过

15:10.570 --> 15:12.570
在ES6标准里边

15:12.570 --> 15:13.570
它导入用的是什么呢

15:13.570 --> 15:15.570
导入机制

15:15.570 --> 15:17.570
导入依赖

15:17.570 --> 15:18.570
依赖就是欲加载

15:18.570 --> 15:20.570
用了这么一种机制

15:20.570 --> 15:23.570
由于使用的是

15:24.570 --> 15:26.570
依赖欲加载

15:26.570 --> 15:31.390
因此导入

15:31.390 --> 15:34.390
任何其他模块

15:34.390 --> 15:36.390
必须放置到

15:36.390 --> 15:38.390
导入代码

15:38.390 --> 15:39.390
必须放置到

15:39.390 --> 15:41.390
所有代码之前

15:41.390 --> 15:42.390
你不能再说

15:42.390 --> 15:43.390
你写到中途的时候

15:43.390 --> 15:44.390
导入一个东西

15:44.390 --> 15:45.390
不行

15:45.390 --> 15:46.390
你要依赖什么

15:46.390 --> 15:47.390
一开始就必须写好

15:47.390 --> 15:48.390
一开始就必须写好

15:48.390 --> 15:50.390
就写到代码的最开始的位置

15:50.390 --> 15:52.390
如果说你之前忘了导出了

15:52.390 --> 15:53.390
以后再加上就行

15:53.390 --> 15:54.390
但是你一定要写到

15:54.390 --> 15:56.390
最开始的位置

15:56.390 --> 15:57.390
把这句话加上

15:58.390 --> 15:59.390
你看

15:59.390 --> 16:00.390
由于使用了依赖欲加载

16:00.390 --> 16:02.390
因此导入其他任何模块

16:02.390 --> 16:03.390
导入代码必须放置到

16:03.390 --> 16:04.390
所有代码之前

16:04.390 --> 16:06.390
那么怎么来导入呢

16:06.390 --> 16:07.390
如果说一个模块

16:07.390 --> 16:08.390
它有很多的基本导出

16:08.390 --> 16:09.390
我们怎么来进行

16:09.390 --> 16:10.390
基本导入呢

16:10.390 --> 16:12.390
使用下面的代码

16:12.390 --> 16:13.390
Import

16:13.390 --> 16:14.390
什么意思

16:14.390 --> 16:15.390
这是愚法层面的改动了

16:15.390 --> 16:17.390
都不是说什么API的改动了

16:17.390 --> 16:18.390
愚法层面的改动

16:18.390 --> 16:19.390
Import

16:19.390 --> 16:20.390
两个大型号

16:20.390 --> 16:21.390
这大型号不是对象的意思

16:21.390 --> 16:22.390
不要理解成对象了

16:22.390 --> 16:23.390
当然你把想象的对象

16:23.390 --> 16:25.390
也无常不可

16:25.390 --> 16:27.390
想象对象也是挺好理解的

16:27.390 --> 16:28.390
你可以把基本导出

16:28.390 --> 16:30.390
想象成它合并成了一个对象

16:30.390 --> 16:31.390
合并成了一个对象

16:31.390 --> 16:32.390
但是它实际上不是对象

16:32.390 --> 16:33.390
你心面知道就行了

16:33.390 --> 16:34.390
你把想象对象

16:34.390 --> 16:35.390
其实也好理解一点

16:35.390 --> 16:36.390
基本导出

16:36.390 --> 16:37.390
你可以把想象成

16:37.390 --> 16:38.390
合并成了一个对象

16:38.390 --> 16:39.390
那么导入的时候

16:39.390 --> 16:41.390
从对象里面取东西

16:41.390 --> 16:42.390
如果说你学过ES6的话

16:42.390 --> 16:44.390
你可以把认识成解构

16:44.390 --> 16:46.390
但是这里实际上不是解构

16:46.390 --> 16:47.390
说清楚

16:47.390 --> 16:48.390
这个不是解构

16:48.390 --> 16:50.390
但是你可以把认识为解构

16:50.390 --> 16:52.390
从对象里面解构出一些东西

16:52.390 --> 16:54.390
你要导入哪些符号

16:54.390 --> 16:55.390
然后Front表示

16:55.390 --> 16:56.390
从哪里导入呢

16:56.390 --> 16:58.390
这里写模块路径

16:58.390 --> 17:00.390
好,咱们来试一下

17:00.390 --> 17:01.390
我们在index里边

17:01.390 --> 17:03.390
比方说我们要导入

17:03.390 --> 17:04.390
导入这个模块

17:04.390 --> 17:06.390
模块这个n里边的什么呢

17:06.390 --> 17:07.390
Test

17:08.390 --> 17:10.390
导入Name和Agg

17:10.390 --> 17:11.390
导入Name和Agg

17:11.390 --> 17:12.390
我们只导入这两个

17:12.390 --> 17:13.390
不想导入别的了

17:13.390 --> 17:14.390
怎么写呢

17:14.390 --> 17:15.390
Import

17:16.390 --> 17:17.390
两个大扩号

17:17.390 --> 17:18.390
里面写上啥

17:18.390 --> 17:19.390
Name

17:19.390 --> 17:20.390
豆号

17:20.390 --> 17:21.390
Agg

17:21.390 --> 17:22.390
导入两个

17:22.390 --> 17:23.390
后边空格

17:23.390 --> 17:24.390
Front

17:24.390 --> 17:25.390
后边写上模块

17:25.390 --> 17:26.390
模块应该是什么

17:26.390 --> 17:27.390
点儿鞋杠开头

17:27.390 --> 17:28.390
尽管让浏览器

17:28.390 --> 17:29.390
你不写点儿鞋杠

17:29.390 --> 17:30.390
你直接写A点儿鞋

17:30.390 --> 17:31.390
行不行呢

17:31.390 --> 17:32.390
可以

17:32.390 --> 17:33.390
但是最好不要

17:33.390 --> 17:34.390
这不是满足标准的写法

17:34.390 --> 17:36.390
把点儿鞋杠写上

17:36.390 --> 17:38.390
浏览器它容错比较高

17:38.390 --> 17:39.390
可以揭露一些

17:39.390 --> 17:40.390
不亏犯的代码

17:40.390 --> 17:42.390
我们然后我们输出Name

17:42.390 --> 17:43.390
Agg

17:43.390 --> 17:44.390
看一下吧

17:44.390 --> 17:45.390
保存

17:45.390 --> 17:47.390
你看是不是拿到了ABC18

17:47.390 --> 17:49.390
并且这种模式是

17:49.390 --> 17:50.390
不会给你加上

17:50.390 --> 17:51.390
任何乱七八糟的

17:51.390 --> 17:52.390
scripps元素的

17:52.390 --> 17:53.390
是不会加上的

17:53.390 --> 17:54.390
是浏览器在内部

17:54.390 --> 17:55.390
就给你搞定的

17:55.390 --> 17:57.390
因为我们AMD

17:57.390 --> 17:58.390
CMD的时候

17:58.390 --> 17:59.390
浏览器不管你

17:59.390 --> 18:00.390
它不甩你

18:00.390 --> 18:01.390
那里没办法

18:01.390 --> 18:02.390
你只能加Scripps元素

18:02.390 --> 18:03.390
来加载介石

18:03.390 --> 18:04.390
但是浏览器现在

18:04.390 --> 18:05.390
厂商都支持了

18:05.390 --> 18:06.390
加载介石

18:06.390 --> 18:07.390
它不会形成什么

18:07.390 --> 18:08.390
scripps元素的

18:08.390 --> 18:09.390
不可能的

18:09.390 --> 18:10.390
然后我们在

18:10.390 --> 18:11.390
deskwork里面看一下

18:11.390 --> 18:12.390
你看

18:12.390 --> 18:13.390
是不是把A

18:13.390 --> 18:14.390
它也引入进来了

18:14.390 --> 18:15.390
它怎么引入进来的

18:15.390 --> 18:16.390
因为你使用了

18:16.390 --> 18:17.390
浏览加载模式

18:17.390 --> 18:19.390
因此它发现

18:19.390 --> 18:20.390
你的入口文件在哪呢

18:20.390 --> 18:21.390
入口文件是

18:21.390 --> 18:22.390
in这个时候的介石

18:22.390 --> 18:23.390
那毫无疑问

18:23.390 --> 18:24.390
你要把in这个时候的介石

18:24.390 --> 18:25.390
拿出来

18:25.390 --> 18:26.390
拿出来过来

18:26.390 --> 18:27.390
它马上运行之前

18:27.390 --> 18:28.390
它马上要看一下

18:28.390 --> 18:29.390
前面几行

18:29.390 --> 18:31.390
前面几行有哪些模块

18:31.390 --> 18:32.390
导入

18:32.390 --> 18:33.390
它一带哪些模块

18:33.390 --> 18:34.390
一带A

18:34.390 --> 18:35.390
如果说A

18:35.390 --> 18:36.390
还一带别的

18:36.390 --> 18:37.390
比方说A在前面

18:37.390 --> 18:38.390
还要导入其他模块

18:38.390 --> 18:40.390
导入其他模块的东西

18:40.390 --> 18:41.390
它也把其他模块

18:41.390 --> 18:42.390
导入进来

18:42.390 --> 18:43.390
总之它把一些

18:43.390 --> 18:44.390
依赖关系

18:44.390 --> 18:45.390
全部导入进来之后

18:45.390 --> 18:46.390
才会开始来

18:46.390 --> 18:47.390
执行你的代码

18:47.390 --> 18:48.390
这是依赖

18:48.390 --> 18:49.390
浴加载的好处

18:49.390 --> 18:50.390
它可以

18:50.390 --> 18:51.390
就是一些执行引擎

18:51.390 --> 18:52.390
它可以轻松的发现

18:52.390 --> 18:54.390
每一个文件里边

18:54.390 --> 18:55.390
有哪些依赖

18:55.390 --> 18:56.390
我一下可以

18:56.390 --> 18:57.390
识别出来

18:57.390 --> 18:58.390
它不要等到

18:58.390 --> 18:59.390
运行的过程中

18:59.390 --> 19:00.390
才去识别

19:00.390 --> 19:01.390
一开始就识别出来

19:01.390 --> 19:02.390
这就是

19:02.390 --> 19:03.390
在入口文件里面

19:04.390 --> 19:05.390
比方说我们还有一个B

19:06.390 --> 19:07.390
B点解释

19:07.390 --> 19:09.390
B点解释也是一样

19:09.390 --> 19:11.390
也导出了一个B

19:11.390 --> 19:13.390
B等于123

19:13.390 --> 19:14.390
比方说

19:14.390 --> 19:16.390
那么我们在音这个声音

19:16.390 --> 19:17.390
怎么导出B呢

19:17.390 --> 19:19.390
你千万不要在这下面写

19:19.390 --> 19:20.390
千万不要在这下面写

19:20.390 --> 19:21.390
比方说导出了一个

19:21.390 --> 19:22.390
B里面导出一个B

19:22.390 --> 19:23.390
对吧

19:24.390 --> 19:25.390
B点解释

19:25.390 --> 19:26.390
能不能这样子写呢

19:26.390 --> 19:27.390
保存

19:29.390 --> 19:30.390
看一下

19:30.390 --> 19:32.390
我们这里输出B

19:32.390 --> 19:33.390
咱们来看一下

19:34.390 --> 19:36.390
你看到B是能输出的

19:36.390 --> 19:38.390
那不是跟你说的不一样吗

19:38.390 --> 19:39.390
不是说一开始

19:39.390 --> 19:40.390
要应该导入吗

19:40.390 --> 19:41.390
为什么我终于导入输出了

19:41.390 --> 19:44.390
这是因为浏览器给你处理了

19:44.390 --> 19:45.390
我们不信的话

19:45.390 --> 19:46.390
我们把这里

19:46.390 --> 19:48.390
把这个B放上边你看一下

19:48.390 --> 19:50.390
我们是先输出了B

19:50.390 --> 19:51.390
再导入了B

19:51.390 --> 19:52.390
我们来看一下

19:52.390 --> 19:53.390
能不能输出呢

19:53.390 --> 19:54.390
因为它还是能输出

19:54.390 --> 19:55.390
123

19:55.390 --> 19:56.390
我们再来看

19:56.390 --> 19:58.390
把这个A放下面

19:58.390 --> 19:59.390
你看A放下面

19:59.390 --> 20:00.390
能不能输出

20:00.390 --> 20:01.390
是不是还是能输出

20:01.390 --> 20:02.390
这是怎么回事呢

20:02.390 --> 20:04.390
是因为浏览器帮你处理的

20:04.390 --> 20:06.390
浏览器它发现了这样的语句之后

20:06.390 --> 20:08.390
我们知道浏览器它有预编意

20:08.390 --> 20:09.390
对吧

20:09.390 --> 20:10.390
它可以大概少一眼

20:10.390 --> 20:11.390
少一眼的代码

20:11.390 --> 20:12.390
发现你这里有一些

20:12.390 --> 20:13.390
Import语句

20:13.390 --> 20:14.390
那么它最自动的

20:14.390 --> 20:16.390
把这个Import语句提到最前面

20:17.390 --> 20:18.390
相当于是个变量提升

20:18.390 --> 20:19.390
提到最前面

20:20.390 --> 20:22.390
因此你自己写的时候

20:22.390 --> 20:24.390
其实按照规范来写是最好的

20:25.390 --> 20:26.390
更加不要去做什么了

20:26.390 --> 20:27.390
更加不要去把这个

20:27.390 --> 20:29.390
Import语句放到什么判断里面

20:29.390 --> 20:30.390
千万不要去这样做

20:30.390 --> 20:32.390
这要导致语法错误的

20:32.390 --> 20:33.390
Mass Writer

20:33.390 --> 20:34.390
比方说我们自己随便写个判断

20:34.390 --> 20:36.390
如果说满足某一条件的时候

20:36.390 --> 20:37.390
我再去做导入

20:37.390 --> 20:39.390
看想不想这样子

20:39.390 --> 20:40.390
保存

20:40.390 --> 20:41.390
你看语法错误

20:41.390 --> 20:42.390
语法错误

20:42.390 --> 20:43.390
语法都不扔了

20:43.390 --> 20:44.390
它不允许你这样子写

20:44.390 --> 20:45.390
不允许你这样子写

20:45.390 --> 20:46.390
导入语句

20:46.390 --> 20:48.390
你还是够牢牢实实的

20:48.390 --> 20:49.390
写到最前面

20:49.390 --> 20:50.390
因为这是规范

20:51.390 --> 20:52.390
它的规范就是

20:55.390 --> 20:56.390
依赖欲夹仔的机制

20:56.390 --> 20:58.390
所以说你必须要写到最前面

20:58.390 --> 20:59.390
就跟那个夹码代码一样的

20:59.390 --> 21:01.390
一开始要写出import

21:01.390 --> 21:02.390
导入那些东西

21:03.390 --> 21:04.390
那么这是关于导入

21:05.390 --> 21:06.390
一把导入代码全部写到前面

21:06.390 --> 21:07.390
导入多个模块

21:07.390 --> 21:08.390
导入就行了

21:08.390 --> 21:10.390
你想导入这个模块的哪些东西

21:10.390 --> 21:11.390
那么就写就行了

21:11.390 --> 21:12.390
然后这个B的模块

21:12.390 --> 21:13.390
它只导入一个东西

21:13.390 --> 21:14.390
它只导出了一个东西

21:14.390 --> 21:15.390
那就导入它

21:15.390 --> 21:17.390
这个模块导出了很多东西

21:17.390 --> 21:18.390
你要用哪些

21:18.390 --> 21:19.390
你就写

21:19.390 --> 21:20.390
没了意思吗

21:20.390 --> 21:21.390
特别简单

21:22.390 --> 21:23.390
那么接下来

21:23.390 --> 21:25.390
我们看一下导入的时候

21:25.390 --> 21:27.390
有哪些细节

21:27.390 --> 21:28.390
大家需要注意的

21:29.390 --> 21:30.390
第一个

21:31.390 --> 21:32.390
导入的时候

21:32.390 --> 21:34.390
你可以通过关键字

21:34.390 --> 21:36.390
对导入的符号

21:36.390 --> 21:38.390
进行重命名

21:38.390 --> 21:39.390
什么意思呢

21:39.390 --> 21:41.390
其实就有点

21:41.390 --> 21:43.390
像什么解构的重命名

21:43.390 --> 21:45.390
但是这不是解构

21:45.390 --> 21:46.390
一定要告诉大家

21:46.390 --> 21:47.390
不是解构

21:47.390 --> 21:49.390
比方说我不喜欢这个B的名字

21:49.390 --> 21:50.390
为啥呢

21:50.390 --> 21:51.390
因为这个B的名字

21:51.390 --> 21:52.390
我们以后可能还要用

21:52.390 --> 21:54.390
可能还要用一个B的名字

21:54.390 --> 21:55.390
那不是不造成冲突了

21:55.390 --> 21:56.390
这样子

21:56.390 --> 21:57.390
会造成冲突

21:57.390 --> 21:58.390
B已经被定义了

21:58.390 --> 21:59.390
对吧

21:59.390 --> 22:00.390
你不能重复定义了

22:00.390 --> 22:01.390
所以就造成冲突

22:01.390 --> 22:02.390
那么这个时候

22:02.390 --> 22:03.390
该怎么办呢

22:03.390 --> 22:04.390
那么这个时候

22:04.390 --> 22:05.390
你需要

22:05.390 --> 22:06.390
可能你需要

22:06.390 --> 22:07.390
希望的这个模块

22:07.390 --> 22:08.390
导出的这个名字

22:08.390 --> 22:09.390
进行重命名

22:09.390 --> 22:10.390
怎么重命名呢

22:10.390 --> 22:11.390
很简单

22:11.390 --> 22:13.390
其他个B2

22:13.390 --> 22:14.390
比方说

22:14.390 --> 22:15.390
改个名字B2

22:15.390 --> 22:16.390
那么这样子

22:16.390 --> 22:17.390
不冲突了

22:17.390 --> 22:18.390
对吧

22:18.390 --> 22:19.390
不冲突了

22:19.390 --> 22:20.390
那么如果说我要输出的话

22:20.390 --> 22:21.390
我要用这个模块

22:21.390 --> 22:22.390
导出的东西的话

22:22.390 --> 22:23.390
我就用B2

22:23.390 --> 22:24.390
B2

22:24.390 --> 22:25.390
E23

22:25.390 --> 22:26.390
没问题吧

22:26.390 --> 22:27.390
这个很简单

22:27.390 --> 22:28.390
比如说这个Name

22:28.390 --> 22:29.390
我们可以重命名

22:29.390 --> 22:30.390
Name1

22:30.390 --> 22:31.390
A级可以重命名

22:31.390 --> 22:32.390
A级1

22:32.390 --> 22:33.390
对吧

22:33.390 --> 22:34.390
都可以

22:34.390 --> 22:36.390
这是对导出的东西

22:36.390 --> 22:38.390
导出的名称进行重命名

22:38.390 --> 22:39.390
因为你毕竟

22:39.390 --> 22:40.390
我是用模块的人

22:40.390 --> 22:42.390
我用它的时候

22:42.390 --> 22:43.390
有可能它跟我

22:43.390 --> 22:44.390
这个模块里边的名字

22:44.390 --> 22:45.390
有冲突

22:45.390 --> 22:46.390
我需要可能

22:46.390 --> 22:47.390
给它重新命名印象

22:47.390 --> 22:48.390
是不是很简单

22:48.390 --> 22:50.390
这是关于这一块

22:50.390 --> 22:52.390
第二个是

22:52.390 --> 22:53.390
导入的时候

22:53.390 --> 22:54.390
使用的符号是长量

22:54.390 --> 22:55.390
不可修改

22:55.390 --> 22:57.390
如果说你学到ES6

22:57.390 --> 22:58.390
你就可以把它当成

22:58.390 --> 22:59.390
它是用Const

22:59.390 --> 23:00.390
生命的

23:00.390 --> 23:01.390
它是个长量

23:01.390 --> 23:02.390
总之不能改它

23:02.390 --> 23:03.390
改它就要爆出

23:03.390 --> 23:04.390
比方说像这个

23:04.390 --> 23:06.390
这是我们导入的模块

23:06.390 --> 23:08.390
我们这里

23:08.390 --> 23:09.390
重命名没问题吧

23:09.390 --> 23:10.390
重命名没问题吧

23:10.390 --> 23:12.390
我们把这个删了

23:12.390 --> 23:14.390
把这个删了

23:14.390 --> 23:15.390
Name

23:15.390 --> 23:16.390
A级

23:16.390 --> 23:17.390
那么如果说

23:17.390 --> 23:18.390
我来这里边

23:18.390 --> 23:19.390
还给Name重新复制

23:19.390 --> 23:20.390
那会不会影响

23:20.390 --> 23:22.390
这个模块导出呢

23:22.390 --> 23:23.390
告诉你根本就不能

23:23.390 --> 23:24.390
让你重新复制

23:24.390 --> 23:25.390
它说

23:25.390 --> 23:26.390
你想尝试

23:26.390 --> 23:28.390
给一个长量重新复制

23:28.390 --> 23:29.390
而Sement

23:29.390 --> 23:31.390
就是复制给什么呢

23:31.390 --> 23:32.390
Const

23:32.390 --> 23:33.390
长量

23:33.390 --> 23:34.390
你看

23:34.390 --> 23:35.390
这句话是不是爆错了

23:35.390 --> 23:36.390
它是不允许重新复制的

23:36.390 --> 23:37.390
一个模块

23:37.390 --> 23:38.390
它导出了什么东西

23:38.390 --> 23:39.390
它就是什么东西

23:39.390 --> 23:41.390
因为那是别人模块做的

23:41.390 --> 23:42.390
你凭什么去改

23:42.390 --> 23:43.390
别人的模块的东西

23:43.390 --> 23:44.390
你不允许改的

23:44.390 --> 23:45.390
改是毫无意义的

23:45.390 --> 23:46.390
所以说它不允许的修改

23:46.390 --> 23:47.390
这也是一个

23:47.390 --> 23:48.390
非常非常正确的

23:48.390 --> 23:50.390
防止犯错的一种机制

23:50.390 --> 23:51.390
也是不能模块

23:51.390 --> 23:53.390
规范化里边的东西

23:53.390 --> 23:54.390
第三个

23:54.390 --> 23:55.390
如果说一个模块

23:55.390 --> 23:57.390
它导出了很多东西

23:57.390 --> 23:58.390
那么如果说

23:58.390 --> 23:59.390
比方说A这个模块

23:59.390 --> 24:01.390
它是不是导出了很多东西

24:01.390 --> 24:02.390
我全要

24:02.390 --> 24:04.390
但是那我全要的话

24:04.390 --> 24:05.390
我就要一个一个写

24:05.390 --> 24:06.390
要凡是我

24:06.390 --> 24:07.390
比方说什么Test

24:07.390 --> 24:08.390
函数

24:08.390 --> 24:09.390
虽然它还有一些智能提示

24:09.390 --> 24:10.390
它能够提示

24:10.390 --> 24:11.390
像VSCode

24:11.390 --> 24:13.390
它能够智能检测出

24:13.390 --> 24:14.390
它有哪些导出

24:14.390 --> 24:16.390
这边你还得去记忆一下

24:16.390 --> 24:17.390
Person

24:18.390 --> 24:19.390
这些东西

24:19.390 --> 24:20.390
你是不是挨在这些

24:20.390 --> 24:21.390
特别麻烦

24:21.390 --> 24:22.390
我能不能一下子

24:22.390 --> 24:23.390
全部导入呢

24:23.390 --> 24:24.390
可以

24:24.390 --> 24:25.390
那么

24:25.390 --> 24:27.390
全部导入用这种写法

24:27.390 --> 24:29.390
我这里就注释掉了

24:29.390 --> 24:31.390
全部导入用这种写法

24:31.390 --> 24:32.390
信号

24:33.390 --> 24:35.390
把里面东西全部导入

24:35.390 --> 24:36.390
全部导入

24:36.390 --> 24:37.390
你用了信号过后

24:37.390 --> 24:38.390
就会形成一个问题

24:38.390 --> 24:39.390
你这里面变亮了

24:39.390 --> 24:41.390
你这里面有写名字

24:41.390 --> 24:42.390
那我知道你这里面

24:42.390 --> 24:43.390
名字是咋样

24:43.390 --> 24:45.390
那么这里必须要重命名

24:45.390 --> 24:46.390
你写到信号过后

24:46.390 --> 24:47.390
必须要重命名

24:47.390 --> 24:48.390
命名成一个东西

24:48.390 --> 24:49.390
不要说OBG

24:49.390 --> 24:50.390
随便你写

24:50.390 --> 24:51.390
或者说A

24:52.390 --> 24:53.390
随便你写个名字

24:53.390 --> 24:54.390
那么我们来输出一下A

24:54.390 --> 24:55.390
它就会把你

24:55.390 --> 24:56.390
所有导出的东西

24:56.390 --> 24:57.390
形成一个对象

24:58.390 --> 24:59.390
看一下

24:59.390 --> 25:00.390
你看

25:00.390 --> 25:01.390
是不是形成一个对象

25:01.390 --> 25:02.390
在对象里面有什么

25:02.390 --> 25:03.390
有Person

25:04.390 --> 25:05.390
一个A

25:05.390 --> 25:06.390
A级Name

25:06.390 --> 25:07.390
SexTest

25:07.390 --> 25:08.390
对吧

25:08.390 --> 25:09.390
全部在这里面了

25:09.390 --> 25:10.390
其他东西不用管

25:11.390 --> 25:12.390
那么我们不要

25:12.390 --> 25:13.390
用里面的东西

25:13.390 --> 25:14.390
你看

25:14.390 --> 25:15.390
用里面的A

25:15.390 --> 25:17.390
用里面的A级

25:17.390 --> 25:18.390
用里面的Name

25:18.390 --> 25:19.390
都可以用

25:19.390 --> 25:20.390
保存

25:20.390 --> 25:21.390
你看

25:21.390 --> 25:22.390
是不是都可以拿得出来

25:23.390 --> 25:24.390
就是如果说

25:24.390 --> 25:25.390
一个模块

25:25.390 --> 25:26.390
就是用基本导出的方式

25:26.390 --> 25:27.390
导出了很多东西

25:27.390 --> 25:29.390
那么你可以使用信号

25:29.390 --> 25:30.390
然后呢

25:30.390 --> 25:31.390
给它重新一个名字

25:31.390 --> 25:32.390
那么它所有东西

25:32.390 --> 25:33.390
都封装到一个对象里面

25:33.390 --> 25:34.390
放在这里面了

25:34.390 --> 25:35.390
这就跟那个什么

25:35.390 --> 25:36.390
跟那个用Export

25:36.390 --> 25:37.390
是不是一样的

25:37.390 --> 25:38.390
对吧

25:38.390 --> 25:39.390
导出一个对象

25:39.390 --> 25:40.390
OK

25:40.390 --> 25:41.390
这是关于

25:42.390 --> 25:43.390
关于这个就是

25:43.390 --> 25:44.390
基本的导入导出

25:44.390 --> 25:45.390
没问题吧

25:45.390 --> 25:46.390
是不是特别简单

25:46.390 --> 25:47.390
ES6

25:47.390 --> 25:48.390
这是ES6的基本导入导出

25:49.390 --> 25:50.390
先把这个学会

25:50.390 --> 25:51.390
下来之后

25:51.390 --> 25:52.390
先不要着急

25:52.390 --> 25:53.390
学后边的默认的

25:53.390 --> 25:54.390
你先把这些东西用一下

25:54.390 --> 25:55.390
我甭管你用什么例子

25:55.390 --> 25:57.390
你用什么例子无所谓

25:57.390 --> 25:58.390
就是你在这里

25:58.390 --> 25:59.390
就随便写个导

25:59.390 --> 26:01.390
随便写一些基本的导出

26:01.390 --> 26:02.390
用各种方式来写一遍

26:02.390 --> 26:03.390
然后呢

26:03.390 --> 26:04.390
在另外一个文件里面

26:04.390 --> 26:06.390
去用一个基本的导入

26:06.390 --> 26:07.390
导入

26:08.390 --> 26:09.390
这里呢

26:09.390 --> 26:10.390
我顺便多说一句吧

26:10.390 --> 26:11.390
多说一句

26:11.390 --> 26:12.390
就是说

26:12.390 --> 26:13.390
在ES6里面

26:13.390 --> 26:14.390
它还是可以提倡的

26:14.390 --> 26:15.390
就是一个缓存

26:15.390 --> 26:16.390
如果一个模块

26:16.390 --> 26:17.390
你得缓存起来

26:17.390 --> 26:18.390
把它导出了缓存起来

26:18.390 --> 26:19.390
缓存起来

26:19.390 --> 26:20.390
不要重复运行

26:20.390 --> 26:21.390
比方说这个B模块

26:21.390 --> 26:22.390
运行了

26:22.390 --> 26:23.390
为什么运行了

26:23.390 --> 26:25.390
因为我入口文件里面导出了

26:25.390 --> 26:26.390
导入了B

26:26.390 --> 26:27.390
B模块运行了

26:27.390 --> 26:29.390
那如果说A里面再导入B呢

26:29.390 --> 26:31.390
A里面再导入B

26:31.390 --> 26:33.390
比方说我们导入

26:33.390 --> 26:34.390
B

26:37.390 --> 26:38.390
这解释

26:38.390 --> 26:39.390
就写个

26:40.390 --> 26:41.390
保存

26:41.390 --> 26:42.390
你看

26:42.390 --> 26:43.390
是不是还只是运行的一次

26:43.390 --> 26:44.390
对吧

26:44.390 --> 26:45.390
还只是运行的一次

26:45.390 --> 26:46.390
OK

26:46.390 --> 26:47.390
这是关于模块的

26:47.390 --> 26:49.390
缓存的问题

26:49.390 --> 26:50.390
另外再说一点

26:50.390 --> 26:51.390
这些细致摸解的东西

26:51.390 --> 26:53.390
我们顺便说一下很简单的

26:53.390 --> 26:54.390
就是说

26:54.390 --> 26:55.390
如果说我只想

26:55.390 --> 26:56.390
导入一个模块

26:56.390 --> 26:57.390
我不想用它里面的东西

26:57.390 --> 26:59.390
我只想把这个模块运行一遍

26:59.390 --> 27:00.390
行不行

27:00.390 --> 27:01.390
不要说我们这里

27:01.390 --> 27:02.390
这个B模块

27:02.390 --> 27:03.390
它有导出

27:03.390 --> 27:04.390
可以没有

27:04.390 --> 27:05.390
可不可以没有导出

27:05.390 --> 27:06.390
可以没有导出

27:06.390 --> 27:08.390
如果说它有导出

27:08.390 --> 27:09.390
或者说没有导出

27:09.390 --> 27:10.390
总之呢

27:10.390 --> 27:11.390
我不想运行

27:11.390 --> 27:12.390
我不想用它导出的东西

27:12.390 --> 27:13.390
我只想把它运行一遍

27:13.390 --> 27:14.390
可不可以呢

27:14.390 --> 27:15.390
可以

27:15.390 --> 27:16.390
这样子写

27:16.390 --> 27:17.390
Import后边

27:17.390 --> 27:18.390
直接写你的模块

27:18.390 --> 27:19.390
录信

27:19.390 --> 27:20.390
那么它只是运行模块

27:20.390 --> 27:23.390
这条导入语句

27:23.390 --> 27:27.390
这条导入语句

27:27.390 --> 27:32.390
仅会运行模块

27:32.390 --> 27:33.390
当然又缓存

27:33.390 --> 27:34.390
就不会运行了

27:34.390 --> 27:39.390
不使用它内部的任何导出

27:39.390 --> 27:42.390
不使用它内部的任何导出

27:42.390 --> 27:43.390
你看

27:43.390 --> 27:44.390
当然我这里

27:44.390 --> 27:46.390
入口文件里边也导入了

27:46.390 --> 27:47.390
入口文件其实也可以

27:47.390 --> 27:49.390
也可以用这种方式来写

27:49.390 --> 27:50.390
保存

27:50.390 --> 27:51.390
你看

27:51.390 --> 27:52.390
是不是还是运行的

27:52.390 --> 27:53.390
那么这种机制呢

27:53.390 --> 27:54.390
我就顺便说一下

27:54.390 --> 27:55.390
这种机制呢

27:55.390 --> 27:56.390
一般就适用于啥呢

27:56.390 --> 27:58.390
就适用于有一些文件

27:58.390 --> 27:59.390
Inlet

27:59.390 --> 28:00.390
比如说初始化文件

28:00.390 --> 28:02.390
它要初始化整个项目的功能

28:02.390 --> 28:03.390
做一些初始化

28:03.390 --> 28:04.390
一开始要运行一次

28:04.390 --> 28:05.390
它也没有什么导出

28:05.390 --> 28:06.390
它就是纯粹的

28:06.390 --> 28:07.390
一开始运行一次

28:07.390 --> 28:08.390
有这么一个文件

28:08.390 --> 28:09.390
那么

28:09.390 --> 28:11.390
这是初始化

28:11.390 --> 28:12.390
初始化

28:12.390 --> 28:14.390
就运行一次就够了

28:14.390 --> 28:15.390
那么这个时候

28:15.390 --> 28:17.390
你就完全可以用这种模式

28:17.390 --> 28:18.390
一开始的时候

28:18.390 --> 28:19.390
Inport

28:21.390 --> 28:22.390
调鞋杠

28:22.390 --> 28:23.390
Inlet

28:23.390 --> 28:24.390
调解释

28:24.390 --> 28:25.390
这个路径要写完

28:25.390 --> 28:26.390
调解释要写完

28:26.390 --> 28:27.390
你不能省略的

28:28.390 --> 28:29.390
那么

28:29.390 --> 28:30.390
初始化代码也运行了

28:31.390 --> 28:33.390
这是关于这一点

28:33.390 --> 28:34.390
其他都没啥了

28:34.390 --> 28:35.390
这是咱们这一课

28:35.390 --> 28:36.390
讲的基本的导入导出

28:36.390 --> 28:37.390
下来大家练习一下

