WEBVTT

00:00.620 --> 00:04.620
这一张呢 咱们来学习CommonJets

00:04.620 --> 00:08.120
我们之前讲了那个模块画的发展历程对吧

00:08.120 --> 00:10.620
最先出现的那个模块画标准的就是CommonJets

00:10.620 --> 00:17.620
呃 要学习CommonJets呢 我们首先得安装一个东西叫做LoadJets

00:17.620 --> 00:19.120
因为我们之前讲过

00:19.120 --> 00:23.620
CommonJets这个模块画呢 它只在LoadJets里面实现了

00:23.620 --> 00:27.120
呃 后边呢 想把它搬到浏览器这一端

00:27.120 --> 00:28.620
但是呢 发现了有些问题啊

00:28.620 --> 00:32.620
我后边呢 会讲解啊 为什么会有这些问题

00:32.620 --> 00:34.620
呃 也就是说我们要学习CommonJets呢

00:34.620 --> 00:36.120
就必须要学习LoadJets

00:36.120 --> 00:39.120
但是呢 LoadJets呢 它是一个单独的课程

00:39.120 --> 00:42.120
它里边内容非常非常多啊

00:42.120 --> 00:47.120
呃 因此呢 我这门课呢 不会过多的去讲解LoadJets

00:47.120 --> 00:50.120
我们安装LoadJets啊 大概看一下怎么用

00:50.120 --> 00:52.620
然后呢 马上通过LoadJets啊

00:52.620 --> 00:54.620
然后来讲解CommonJets

00:54.620 --> 00:57.620
我们主要的目的呢 是讲解CommonJets啊

00:57.620 --> 01:00.120
我们周杰克呢 首先呢 安装这个LoadJets

01:00.120 --> 01:03.120
然后呢 给他写一个 写一个Hello World

01:03.120 --> 01:05.620
然后呢 把运行出来看一下啊

01:05.620 --> 01:08.120
安装LoadJets呢 我们可以进出它的官网

01:08.120 --> 01:10.620
安装免费的啊 不用去给任何的费用

01:10.620 --> 01:13.620
啊 这里呢 有一个官网 我们打开它

01:13.620 --> 01:16.620
这样打开吧

01:16.620 --> 01:20.620
好 呃 打开它 这右边呢 可以切换语言

01:20.620 --> 01:23.620
我这里选择的是中文

01:23.620 --> 01:25.620
好 这个LoadJets里边呢 怎么下载呢

01:25.620 --> 01:27.620
就在这里下载啊 就在首页里边下载

01:27.620 --> 01:31.620
这里有两个版本 一个版本呢 是叫做长期支持版

01:31.620 --> 01:33.620
这个版本呢 是比较稳定的

01:33.620 --> 01:36.620
另外一个版本呢 是当前发布版 就最新的版本

01:36.620 --> 01:40.620
这个最新的版本呢 可能里面包含了一些不太稳定的功能

01:40.620 --> 01:43.620
那么我们下载的话 一般下载啥呢

01:43.620 --> 01:45.620
呃 我们一般下载这个长期支持版

01:45.620 --> 01:48.620
包括呢 你们以后到公司里面使用LoadJets的话

01:48.620 --> 01:50.620
使用的一定是长期支持版

01:50.620 --> 01:51.620
好 我们就下载这个啊

01:51.620 --> 01:53.620
我这里不下载了啊 点击过后下载就行了

01:53.620 --> 01:56.620
我这里呢 已经下载完了 在桌面上 看一下啊

01:58.620 --> 02:00.620
在这 把这些东西删了

02:01.620 --> 02:04.620
嗯 这里一个LoadJets啊 就是我们刚才下载的那个

02:04.620 --> 02:07.620
然后我们双击安装 安装

02:09.620 --> 02:10.620
稍等一下啊

02:11.620 --> 02:14.620
然后点下一步 这里同意 下一步

02:14.620 --> 02:17.620
这里一个安装目录啊 我这里不管了啊

02:17.620 --> 02:21.620
直接把它安装到C盘 我的东西呢 比较习惯于安装C盘

02:21.620 --> 02:24.620
然后点下一步啊 什么都不选 呃 什么都不选啊

02:24.620 --> 02:26.620
直接点下一步啊 下一步

02:27.620 --> 02:29.620
啊 安装

02:29.620 --> 02:31.620
啊 点决定

02:31.620 --> 02:33.620
啊 让它安装就行了啊 很快就安装完成了

02:34.620 --> 02:36.620
为什么要安装LoadJets呢 我们说过啊

02:36.620 --> 02:38.620
我们现在呢 呃

02:38.620 --> 02:41.620
Jets呢 运行呢 它不仅可以在浏览器里边运行

02:41.620 --> 02:44.620
也可以在LoadJets里边运行啊

02:44.620 --> 02:46.620
它是一个环境 还记得我们之前讲的吗

02:46.620 --> 02:49.620
咱们之前不是讲过那个概述里边

02:49.620 --> 02:51.620
这一块啊 大家看一下

02:51.620 --> 02:55.580
呃 之前概述里边我们说过的吧

02:55.580 --> 02:58.580
呃 我们的Jets呢 只要有一个V8自行引擎

02:58.580 --> 03:00.580
那么它就可以自行啊 我们的浏览器呢

03:00.580 --> 03:02.580
里边签了一个V8自行引擎

03:02.580 --> 03:04.580
啊 当然这个V8自行引擎呢

03:04.580 --> 03:07.580
是那个谷歌浏览器的啊 其他浏览器的引擎呢不太一样

03:07.580 --> 03:10.580
呃 目前最流行的肯定是V8啊 最好的肯定是V8

03:10.580 --> 03:13.580
那么我们的Jets程序呢 交给这个V8引擎呢

03:13.580 --> 03:16.580
它就可以运行的啊 于是呢 我们Jets呢

03:16.580 --> 03:19.580
就可以运行在任何一个的 呃 任何一个就是

03:19.580 --> 03:21.580
环境里边 不仅是浏览器

03:21.580 --> 03:23.580
呃 漏了Jets里边 它打载了V8引擎

03:23.580 --> 03:26.580
所以说我们的Jets程序呢 也可以在漏了Jets里边运行

03:26.580 --> 03:28.580
好了 我们安装完成了啊

03:28.580 --> 03:30.580
安装完成之后呢 我们要测试一下啊

03:30.580 --> 03:32.580
是不是正常的 怎么测试呢

03:32.580 --> 03:34.580
呃 我们按住Windows键

03:34.580 --> 03:36.580
知道Windows键在哪吧 啊

03:36.580 --> 03:38.580
Windows键啊 Windows键R

03:38.580 --> 03:40.580
加R 打开这个运行对话框

03:40.580 --> 03:43.580
然后呢 这里边输入一个CMD

03:43.580 --> 03:45.580
打开我们的 就是命令行

03:45.580 --> 03:47.580
命令行里边让我们输入一个东西叫做load

03:47.580 --> 03:49.580
回车

03:49.580 --> 03:52.580
诶 看一下啊 有没有出现这么一个提示啊

03:52.580 --> 03:55.580
它说什么 欢迎你来到load.js啊

03:55.580 --> 03:58.580
12.31.1.1这个版本啊

03:58.580 --> 04:02.580
然后呢 进入一个提示啊 有没有出现这么一个窗口

04:02.580 --> 04:05.580
如果说有的话 说明你的load是安装成功了的

04:05.580 --> 04:08.580
啊 如果说你的没有出现那种窗口啊

04:08.580 --> 04:10.580
没有出现这个信息啊 报了一个错啊

04:10.580 --> 04:13.580
比方说什么 告诉你load的命令不存在的话

04:13.580 --> 04:15.580
啊 这种情况比较多啊

04:15.580 --> 04:18.580
现在可以在群里边问相应 我问相应的就是

04:18.580 --> 04:20.580
老师啊 来进行解决

04:20.580 --> 04:22.580
如果说你没有什么问题的话啊

04:22.580 --> 04:25.580
一般安装完了之后呢 就会出现这么一个窗口了

04:25.580 --> 04:28.580
好 那么表示呢 我们目前的load呢 就安装完成了

04:28.580 --> 04:32.580
安装完成load了之后呢 我们之后的写.js程序呢

04:32.580 --> 04:34.580
就不仅仅可以在浏览器执行了

04:34.580 --> 04:36.580
在load.js里边也可以执行

04:36.580 --> 04:39.580
那么我们比方说啊 咱们写这么一个load

04:39.580 --> 04:41.580
.js程序啊 写这么一个.js程序

04:41.580 --> 04:44.580
新建一个 比方说我们随便写一个吧

04:45.580 --> 04:47.580
随便写个 名字随便

04:47.580 --> 04:49.580
我们这里输出一个东西啊

04:49.580 --> 04:51.580
用console load 输出一个东西

04:51.580 --> 04:53.580
比方说我们输出一个就是

04:53.580 --> 04:56.580
Hello.load.js

04:56.580 --> 04:58.580
我们输出这么一句话

04:58.580 --> 05:00.580
那么这句话怎么运行呢

05:00.580 --> 05:01.580
以前怎么运行呢

05:01.580 --> 05:03.580
以前是不是要新建个页面

05:03.580 --> 05:05.580
页面中去引用这个.js

05:05.580 --> 05:07.580
然后在浏览器中运行页面对吧

05:07.580 --> 05:08.580
但是现在不用了

05:08.580 --> 05:09.580
因为现在呢

05:09.580 --> 05:12.580
我们可以脱离浏览器环境来运行.js

05:12.580 --> 05:13.580
怎么运行呢

05:13.580 --> 05:14.580
咱们来看一下啊

05:14.580 --> 05:16.580
我们这个.js在哪呢

05:16.580 --> 05:18.580
我们打开这个资源管理行动显示

05:18.580 --> 05:20.580
我们的.js是不是在这

05:20.580 --> 05:21.580
对吧 是不是在这

05:21.580 --> 05:23.580
我们就可以把这个目录呢

05:23.580 --> 05:25.580
复制一下 复制一下这个目录

05:25.580 --> 05:27.580
找到我们的.js文件所在的目录

05:27.580 --> 05:28.580
然后呢

05:28.580 --> 05:30.580
我们打开我们的命令行

05:30.580 --> 05:31.580
还是同样的方式

05:31.580 --> 05:33.580
cmd 打开命令行

05:33.580 --> 05:35.580
然后呢 这里输入cd

05:35.580 --> 05:37.580
然后呢 把这个粘贴过来

05:37.580 --> 05:39.580
点击右键 然后粘贴过来

05:39.580 --> 05:41.580
好 我们表示cd表示什么意思

05:41.580 --> 05:42.580
它是进入某一个目录

05:42.580 --> 05:44.580
这个跟漏的接是没关系

05:44.580 --> 05:47.580
这是我们命令行里边的特有的命令

05:47.580 --> 05:49.580
进入某一个目录

05:49.580 --> 05:51.580
好 回车

05:51.580 --> 05:53.580
我们先切换到地盘

05:53.580 --> 05:57.020
先切换到地盘

05:57.020 --> 05:58.020
哦 不对 不对

05:58.020 --> 06:00.020
不是切换到地盘的原因

06:00.020 --> 06:01.020
是因为我们这个目录里边呢

06:01.020 --> 06:02.020
有一些空格

06:02.020 --> 06:05.020
它把空格理解成为一些特殊制服了

06:05.020 --> 06:06.020
那我们这里这样子

06:06.020 --> 06:08.020
加个双硬好

06:08.020 --> 06:10.020
把它粘贴过来

06:10.020 --> 06:11.020
好 回车

06:12.020 --> 06:13.020
不行了

06:13.020 --> 06:15.020
我们把切换到地盘试一下

06:15.020 --> 06:18.020
哦 还得真的切换到地盘

06:18.020 --> 06:19.020
因为我这个是地盘的

06:19.020 --> 06:20.020
之前是c盘的

06:20.020 --> 06:22.020
好 没用这个字那么迷你

06:22.020 --> 06:24.020
好 这里我们把它切换到地盘

06:24.020 --> 06:25.020
那么切换到地盘

06:25.020 --> 06:27.020
如果说刚才没有

06:27.020 --> 06:29.020
我们再重新来一次

06:29.020 --> 06:30.020
切换到地盘

06:30.020 --> 06:32.020
然后我们使用cd

06:32.020 --> 06:33.020
粘贴过来

06:33.020 --> 06:34.020
ok 进入这个目录

06:34.020 --> 06:36.020
你看前面的提示 是不是这个目录了

06:36.020 --> 06:38.020
好 进入这个目录之后

06:38.020 --> 06:40.020
我们怎么来运行这个接使呢

06:40.020 --> 06:41.020
简单

06:41.020 --> 06:43.020
我们就使用load命令

06:43.020 --> 06:44.020
load就是个命令

06:44.020 --> 06:45.020
空格

06:45.020 --> 06:47.020
然后写上我们的ges

06:47.020 --> 06:49.020
相对路径

06:49.020 --> 06:51.020
因为我们目前就已经在这个目录了

06:51.020 --> 06:52.020
那么相对路径就是

06:52.020 --> 06:54.020
当前目录下的index.ges

06:54.020 --> 06:57.020
我们就直接写上index.ges

06:57.020 --> 06:58.020
回车

06:58.020 --> 07:00.020
你看 是不是输出结果了

07:00.020 --> 07:01.020
这个ges运行的结果

07:01.020 --> 07:02.020
输出出来了

07:02.020 --> 07:03.020
Hello

07:03.020 --> 07:04.020
load.ges

07:04.020 --> 07:05.020
这是一种运行方式

07:05.020 --> 07:07.020
其实还有一种运行方式

07:07.020 --> 07:08.020
更加简洁

07:08.020 --> 07:09.020
不太会用

07:09.020 --> 07:10.020
其实运行的话

07:10.020 --> 07:11.020
也不太会用这种方式

07:11.020 --> 07:12.020
太麻烦了

07:12.020 --> 07:13.020
还有一种方式更加简洁

07:13.020 --> 07:15.020
就是在我们的vscode里边

07:15.020 --> 07:16.020
vscode里面

07:16.020 --> 07:17.020
我们找到要运行的ges

07:17.020 --> 07:18.020
是在这

07:18.020 --> 07:19.020
对吧

07:19.020 --> 07:20.020
然后我们点击右键

07:20.020 --> 07:22.020
这里有个在中端中打开

07:22.020 --> 07:23.020
看没

07:23.020 --> 07:25.020
在中端中打开

07:25.020 --> 07:26.020
点击

07:26.020 --> 07:27.020
你看

07:27.020 --> 07:29.020
那么是不是就挑出一个命令行窗口

07:29.020 --> 07:30.020
对吧

07:30.020 --> 07:31.020
挑出一个命令行窗口

07:31.020 --> 07:32.020
那么这个中端介面

07:32.020 --> 07:34.020
其实也可以用ctrl加j

07:34.020 --> 07:35.020
ctrl加j

07:35.020 --> 07:37.020
来打开关闭

07:37.020 --> 07:38.020
看没

07:38.020 --> 07:39.020
那么这里我们

07:39.020 --> 07:40.020
这里点击右键

07:40.020 --> 07:41.020
中端中打开了

07:41.020 --> 07:42.020
过后你会发现

07:42.020 --> 07:44.020
这里前面的提示符

07:44.020 --> 07:46.020
就表示已经在目录下面了

07:46.020 --> 07:48.020
它会自动进入这个目录下面

07:48.020 --> 07:49.020
就是这个文件在那目录下面

07:49.020 --> 07:51.020
然后我们在这里直接输入命令

07:51.020 --> 07:54.020
load index.ges

07:54.020 --> 07:55.020
回车

07:56.020 --> 07:58.020
这里还不行

07:58.020 --> 08:00.020
这里vscode重新打开一次

08:00.020 --> 08:02.020
重新打开一次

08:02.020 --> 08:03.020
因为我们刚才安装的时候

08:03.020 --> 08:05.020
vscode已经打开了

08:05.020 --> 08:06.020
它的就是

08:06.020 --> 08:08.020
目前无法识别这个命令

08:08.020 --> 08:09.020
我们在这里重新打开一次

08:09.020 --> 08:10.020
点击右键

08:10.020 --> 08:11.020
中端中打开

08:12.020 --> 08:13.020
OK 我们在这里

08:13.020 --> 08:15.020
输入load index.ges

08:15.020 --> 08:16.020
对吧

08:16.020 --> 08:17.020
所以也可以得到结果

08:17.020 --> 08:19.020
Hello.load.ges

08:19.020 --> 08:21.020
所以说我们之后

08:21.020 --> 08:23.020
在学习这一个章节

08:23.020 --> 08:25.020
comment.ges这个章节

08:25.020 --> 08:27.020
我们运行介石

08:27.020 --> 08:28.020
代码的时候

08:28.020 --> 08:29.020
都是在load的环境里面运行

08:29.020 --> 08:30.020
因为我们comment.ges

08:30.020 --> 08:33.020
目前只支持load的环境

08:33.020 --> 08:34.020
没了意思吗

08:34.020 --> 08:37.020
这是咱们的load.ges的安装

08:37.020 --> 08:38.020
接下来我们给大家看一下

08:38.020 --> 08:40.020
load.ges里面的一些

08:40.020 --> 08:42.020
基本的概念

08:42.020 --> 08:43.020
基本的概念

08:43.020 --> 08:44.020
首先我们回顾一下

08:44.020 --> 08:46.020
之前浏览器要运行

08:46.020 --> 08:47.020
介石代码要怎么运行的

08:47.020 --> 08:49.020
我们就必须要把介石代码

08:49.020 --> 08:50.020
放到页面里面

08:50.020 --> 08:52.020
我们要写个页面

08:52.020 --> 08:53.020
然后在页面中

08:53.020 --> 08:55.020
使用什么scripps元素

08:55.020 --> 08:57.020
来引入相应的介石

08:57.020 --> 08:58.020
比方说这有个页面

08:58.020 --> 09:00.020
页面中有什么A.ges

09:00.020 --> 09:02.020
引入了B.ges

09:02.020 --> 09:03.020
C.ges都引入了

09:03.020 --> 09:06.020
让浏览器去运行这个页面

09:06.020 --> 09:07.020
去运行这个页面

09:07.020 --> 09:08.020
运行这个页面的过程中

09:08.020 --> 09:10.020
它看到页面元代码里面

09:10.020 --> 09:12.020
有A.ges B.ges C.ges

09:12.020 --> 09:13.020
那么这个浏览器

09:13.020 --> 09:15.020
又会去发送请求

09:15.020 --> 09:17.020
远程去夹载这个

09:17.020 --> 09:19.020
A.ges B.ges C.ges

09:19.020 --> 09:20.020
去把夹载进来

09:20.020 --> 09:22.020
夹载进来过后再执行

09:22.020 --> 09:24.020
以前我们是这么执行的

09:24.020 --> 09:26.020
但是现在就不一样了

09:26.020 --> 09:27.020
在load.ges里面

09:27.020 --> 09:29.020
要运行一个介石文件的话

09:29.020 --> 09:31.020
那么我们就直接运行的

09:31.020 --> 09:32.020
是用load的命令

09:32.020 --> 09:33.020
比方我们刚才写的

09:33.020 --> 09:35.020
load.index.ges

09:35.020 --> 09:37.020
直接运行某一个介石

09:37.020 --> 09:38.020
但是这种方式

09:38.020 --> 09:40.020
你会发现有这么一个特点

09:40.020 --> 09:42.020
它只能运行一个介石文件

09:42.020 --> 09:43.020
它能不能运行多个

09:43.020 --> 09:45.020
能不能load在这里面写多个

09:45.020 --> 09:47.020
不能运行多个

09:47.020 --> 09:49.020
一次运行一个介石文件

09:49.020 --> 09:52.020
一次运行一个介石文件

09:52.020 --> 09:54.020
那么介石文件

09:54.020 --> 09:55.020
运行的介石文件

09:55.020 --> 09:57.020
我们通常称之为

09:57.020 --> 09:59.020
入口文件

09:59.020 --> 10:01.020
那时候也把它叫做启动文件

10:01.020 --> 10:03.020
就是说我们一个程序

10:03.020 --> 10:05.020
你甭管你写了多少个介石文件

10:05.020 --> 10:07.020
但是我们运行的时候

10:07.020 --> 10:09.020
只运行其中一个

10:09.020 --> 10:10.020
其实很多程序

10:10.020 --> 10:12.020
比如加瓦C下巴

10:12.020 --> 10:14.020
这些写一些客户端程序的时候

10:14.020 --> 10:16.020
如果有同学接触过的

10:16.020 --> 10:17.020
也会发现都是这样子

10:17.020 --> 10:18.020
比方说C元

10:18.020 --> 10:19.020
有一个入口文件

10:19.020 --> 10:20.020
还有一个什么入口函数

10:20.020 --> 10:21.020
对吧

10:21.020 --> 10:22.020
都是某个意思

10:22.020 --> 10:23.020
只不过介石里面

10:23.020 --> 10:24.020
不存在什么入口函数

10:24.020 --> 10:25.020
就是一个文件

10:25.020 --> 10:27.020
它把运行出来就完事了

10:27.020 --> 10:29.020
这是露的介石的运行方式

10:29.020 --> 10:31.020
跟流烂器不太一样

10:31.020 --> 10:32.020
然后呢

10:32.020 --> 10:33.020
我们在露的介石

10:33.020 --> 10:34.020
既然安装了

10:34.020 --> 10:35.020
我们再简单说一下

10:35.020 --> 10:37.020
它遵循的是Akma script的标准

10:37.020 --> 10:39.020
就说我们之前学的什么

10:39.020 --> 10:40.020
ES5

10:40.020 --> 10:41.020
ES3

10:41.020 --> 10:42.020
ES6

10:42.020 --> 10:44.020
学的ES里面的所有东西

10:44.020 --> 10:46.020
在露的介石里面都能用

10:46.020 --> 10:48.020
都能用

10:48.020 --> 10:50.020
但是由于它脱离了

10:50.020 --> 10:51.020
流烂器环境

10:51.020 --> 10:52.020
因此呢

10:52.020 --> 10:53.020
露的介石呢

10:53.020 --> 10:54.020
还有这么两个特点

10:54.020 --> 10:55.020
第一个呢

10:55.020 --> 10:56.020
你在露的介石中

10:56.020 --> 10:58.020
可以使用ES标准的任何语法

10:58.020 --> 10:59.020
或者是API

10:59.020 --> 11:01.020
因为它是遵循的ES标准

11:01.020 --> 11:03.020
比方说你写什么循环

11:03.020 --> 11:04.020
循环是不是ES标准

11:04.020 --> 11:05.020
该怎么写

11:05.020 --> 11:06.020
比方说FOR循环啊

11:06.020 --> 11:08.020
定义边量VAR啊

11:08.020 --> 11:09.020
NES啊

11:09.020 --> 11:10.020
比方ES6的NES啊

11:10.020 --> 11:11.020
Const

11:11.020 --> 11:12.020
这些都可以用

11:12.020 --> 11:13.020
什么判断啊

11:13.020 --> 11:14.020
数组啊这些东西

11:14.020 --> 11:15.020
都可以用

11:15.020 --> 11:16.020
对象这些东西都可以用

11:16.020 --> 11:18.020
一样的没有什么区别

11:18.020 --> 11:19.020
但是呢

11:19.020 --> 11:21.020
由于它脱离了流烂器环境

11:21.020 --> 11:22.020
那么你就不能使用

11:22.020 --> 11:24.020
流烂器环境里边的东西了

11:24.020 --> 11:25.020
流烂器环境里边

11:25.020 --> 11:27.020
不是我们之前说过啊

11:27.020 --> 11:28.020
我们的流烂器里边

11:28.020 --> 11:30.020
除了遵循ES标准之外

11:30.020 --> 11:31.020
还有个什么了

11:31.020 --> 11:32.020
还有一个WebAPI

11:32.020 --> 11:33.020
看一下之前的一个图啊

11:33.020 --> 11:36.020
它除了只除了遵循ES标准

11:36.020 --> 11:37.020
一个V8引擎

11:37.020 --> 11:39.020
把ES的语法发行过来之后了

11:39.020 --> 11:40.020
还有一个可以提供了

11:40.020 --> 11:41.020
一些额外的API

11:41.020 --> 11:42.020
什么API呢

11:42.020 --> 11:44.020
比方说像DOM对象啊

11:44.020 --> 11:45.020
对吧

11:45.020 --> 11:46.020
像Window对象啊

11:46.020 --> 11:47.020
这些都是流烂器里边

11:47.020 --> 11:48.020
给给你的东西

11:48.020 --> 11:49.020
给你做出来的对象

11:49.020 --> 11:51.020
比方说算Documents对象啊

11:51.020 --> 11:52.020
这些东西

11:52.020 --> 11:53.020
比方说

11:53.020 --> 11:55.020
还像什么阿加克斯啊

11:55.020 --> 11:56.020
对不对

11:56.020 --> 11:57.020
像这些东西都是流烂器里边的东西

11:57.020 --> 11:58.020
那么这些东西呢

11:58.020 --> 12:00.020
在Note解释就不能用了

12:00.020 --> 12:01.020
就不能用了

12:01.020 --> 12:02.020
要注意一下啊

12:02.020 --> 12:03.020
比方说你在Note解释里面

12:03.020 --> 12:04.020
给我来一个什么

12:04.020 --> 12:06.020
比方说我们再输出一个Window

12:06.020 --> 12:07.020
有没有东西呢

12:07.020 --> 12:08.020
这个Window

12:08.020 --> 12:09.020
我们来看一下

12:09.020 --> 12:10.020
你看一下

12:10.020 --> 12:11.020
它说什么

12:11.020 --> 12:13.020
Window is not defend

12:13.020 --> 12:15.020
它的Window不存在

12:15.020 --> 12:16.020
不存在

12:16.020 --> 12:18.020
比方说你要输出一个什么Documents

12:18.020 --> 12:19.020
这些东西别来了啊

12:19.020 --> 12:20.020
就别来了

12:20.020 --> 12:21.020
没有

12:21.020 --> 12:22.020
它说Documents is not defend

12:23.020 --> 12:24.020
保错了

12:24.020 --> 12:25.020
原来的意思吗

12:25.020 --> 12:26.020
这些东西呢

12:26.020 --> 12:28.020
就在Note的环境里边就不能用了

12:28.020 --> 12:29.020
因为它已经脱离了

12:29.020 --> 12:31.020
流烂器的环境

12:31.020 --> 12:32.020
然后最后一部分呢

12:32.020 --> 12:33.020
我给大家说一下

12:33.020 --> 12:34.020
在Note解释里面呢

12:34.020 --> 12:35.020
实际上啊

12:35.020 --> 12:37.020
虽然我们目前这段呢

12:37.020 --> 12:38.020
不用去过

12:38.020 --> 12:39.020
可以关

12:39.020 --> 12:41.020
太过关心

12:41.020 --> 12:42.020
大概说一下吧

12:42.020 --> 12:43.020
就Note解释呢

12:43.020 --> 12:45.020
它也给你做了一些API出来

12:45.020 --> 12:46.020
因为Note解释给你做了一些API

12:46.020 --> 12:47.020
比方说

12:47.020 --> 12:48.020
什么Window对象

12:48.020 --> 12:49.020
Documents对象

12:49.020 --> 12:50.020
对吧

12:50.020 --> 12:51.020
什么叫API

12:51.020 --> 12:52.020
对象啊

12:52.020 --> 12:53.020
一些函数啊

12:53.020 --> 12:54.020
能够供应使用

12:54.020 --> 12:56.020
供应方便的去操作一些东西

12:56.020 --> 12:57.020
那么

12:57.020 --> 12:59.020
流烂器给你提供了一些API

12:59.020 --> 13:00.020
但是Note的环境里边

13:00.020 --> 13:01.020
脱离了流烂器环境了

13:01.020 --> 13:02.020
那么它没有这些API了

13:02.020 --> 13:03.020
但是它里边呢

13:03.020 --> 13:05.020
也有自己的一些API

13:05.020 --> 13:06.020
那么它的API呢

13:06.020 --> 13:07.020
就权限就比较丰富了

13:07.020 --> 13:09.020
比方说读取文件啊

13:09.020 --> 13:11.020
就是发送网络请求啊

13:11.020 --> 13:12.020
一个正常的网络请求

13:12.020 --> 13:13.020
不是阿加克斯

13:13.020 --> 13:14.020
发送一个正常的网络请求啊

13:14.020 --> 13:16.020
或者是监听某一个端口啊

13:16.020 --> 13:17.020
这些

13:17.020 --> 13:19.020
可以操纵整个电脑的

13:19.020 --> 13:20.020
所有的权限

13:21.020 --> 13:23.020
保采用的方式来处理

13:23.020 --> 13:24.020
你可以认为

13:24.020 --> 13:25.020
你用Note的解释的

13:25.020 --> 13:26.020
这个环境之后呢

13:26.020 --> 13:27.020
你就可以控制整个电脑了

13:27.020 --> 13:29.020
你可以这样子想象

13:29.020 --> 13:30.020
那么Note的解释里边

13:30.020 --> 13:31.020
它也给你提供了一些API

13:31.020 --> 13:32.020
不过这些API呢

13:32.020 --> 13:34.020
不在我们这门客的

13:34.020 --> 13:35.020
讨论范围之内

13:35.020 --> 13:36.020
因为我们这门客呢

13:36.020 --> 13:38.020
毕竟不是学习Note的解释

13:38.020 --> 13:39.020
是学习Note的解释

13:39.020 --> 13:42.020
环境下面的common解释

13:42.020 --> 13:43.020
那么我们这里简单说一下

13:43.020 --> 13:44.020
Note的里边

13:44.020 --> 13:45.020
它给你开发了一些API

13:45.020 --> 13:47.020
其中有一些API呢

13:47.020 --> 13:48.020
它为了让你学习起来

13:48.020 --> 13:49.020
方便一点

13:49.020 --> 13:50.020
因为很多的开发者呢

13:50.020 --> 13:52.020
都是从在浏览器端开发

13:52.020 --> 13:53.020
然后转向了

13:53.020 --> 13:55.020
学习Note的解释开发

13:55.020 --> 13:57.020
那么它针对这些开发者呢

13:57.020 --> 13:58.020
为了让这些开发者

13:58.020 --> 13:59.020
学习起来更加轻松

13:59.020 --> 14:01.020
因此它里边一些API呢

14:01.020 --> 14:03.020
它做的样子呢

14:03.020 --> 14:05.020
跟那个webAPI是一样的

14:05.020 --> 14:07.020
跟浏览器里边环境是一样的

14:07.020 --> 14:08.020
比方说它做了这么什么API

14:08.020 --> 14:09.020
比如说console

14:09.020 --> 14:11.020
控制台打印对吧

14:11.020 --> 14:12.020
在浏览器环境里边

14:12.020 --> 14:13.020
是不是也有控制台打印

14:13.020 --> 14:14.020
但是你要清楚啊

14:14.020 --> 14:16.020
这个控制台打印

14:16.020 --> 14:18.020
是不是ES标准

14:19.020 --> 14:21.020
它是不是ES标准

14:21.020 --> 14:24.780
就说我们acoposq里面

14:24.780 --> 14:25.780
是不是说

14:25.780 --> 14:26.780
我们标准里面呢

14:26.780 --> 14:27.780
有个对象

14:27.780 --> 14:28.780
它要在控制台打印

14:28.780 --> 14:29.780
有没有

14:29.780 --> 14:31.780
它不是ES标准

14:31.780 --> 14:32.780
它是浏览器里面

14:32.780 --> 14:33.780
给你做了这么一个对象出来

14:33.780 --> 14:34.780
方便你调

14:34.780 --> 14:35.780
我是

14:35.780 --> 14:37.780
在Note的解释里边

14:37.780 --> 14:38.780
它也给你做了一个

14:38.780 --> 14:41.780
几乎是一模一样的对象出来

14:41.780 --> 14:42.780
用法的差不多

14:42.780 --> 14:43.780
都一样

14:43.780 --> 14:44.780
那么你可以使用console的Note

14:44.780 --> 14:45.780
比方说呢

14:45.780 --> 14:46.780
它还给你提供了一些

14:46.780 --> 14:48.780
什么set timeouts

14:48.780 --> 14:49.780
set interval

14:49.780 --> 14:50.780
这些东西

14:50.780 --> 14:51.780
那么这些东西

14:51.780 --> 14:52.780
是不是ES标准

14:52.780 --> 14:53.780
也不是

14:53.780 --> 14:54.780
ES标准里面

14:54.780 --> 14:55.780
它没有说

14:55.780 --> 14:56.780
我必须要有个什么

14:56.780 --> 14:57.780
这些东西

14:57.780 --> 14:58.780
没有

14:58.780 --> 14:59.780
这是浏览器给你做出来的

14:59.780 --> 15:00.780
那么Note的解释里面

15:00.780 --> 15:01.780
它也给你做了

15:01.780 --> 15:02.780
也给你做了

15:02.780 --> 15:04.780
用法是完全一样的

15:04.780 --> 15:06.780
主要是为了降低血气成本

15:06.780 --> 15:07.780
如果说它能不能

15:07.780 --> 15:08.780
它是不是一定要

15:08.780 --> 15:09.780
做成这个样子呢

15:09.780 --> 15:10.780
也不是

15:10.780 --> 15:11.780
它完全可以做成别的APM

15:11.780 --> 15:12.780
但是呢

15:12.780 --> 15:13.780
它为了让你血气起来

15:13.780 --> 15:14.780
更加方便

15:14.780 --> 15:15.780
就用之前的浏览器的APM

15:15.780 --> 15:16.780
这样子呢

15:16.780 --> 15:17.780
你好理解一点

15:18.780 --> 15:19.780
我们不要

15:21.780 --> 15:23.780
最好你要学了ES6来听这个

15:23.780 --> 15:24.780
算了算了

15:24.780 --> 15:25.780
我还是尽量用这个吧

15:27.780 --> 15:28.780
这里呢

15:28.780 --> 15:29.780
一秒钟之后

15:29.780 --> 15:30.780
我们这里输出

15:34.780 --> 15:35.780
再来运行一下

15:35.780 --> 15:37.780
这个按光标上下

15:37.780 --> 15:39.780
可以切换之前的命令

15:39.780 --> 15:40.780
回车

15:41.780 --> 15:42.780
一秒钟之后运行好了

15:42.780 --> 15:43.780
对吧

15:43.780 --> 15:44.780
没问题吧

15:44.780 --> 15:45.780
包括什么set timeout

15:46.780 --> 15:47.780
这都可以用

15:47.780 --> 15:48.780
用法是一样的

15:48.780 --> 15:49.780
但是呢

15:49.780 --> 15:50.780
不代表说

15:50.780 --> 15:52.780
set timeout和set interval

15:52.780 --> 15:54.780
它就是浏览器的环境里面了

15:54.780 --> 15:55.780
不是这个意思

15:55.780 --> 15:56.780
它只是在load的环境里面

15:56.780 --> 15:58.780
给你做了一个一模一样的东西

15:59.780 --> 16:00.780
你看

16:00.780 --> 16:01.780
这个程序就结束不了了

16:01.780 --> 16:02.780
这个呢

16:02.780 --> 16:03.780
我们这个时候呢

16:03.780 --> 16:04.780
我们在这个控制台里面

16:04.780 --> 16:06.780
按ctrl加C

16:06.780 --> 16:08.780
强行停滞程序

16:08.780 --> 16:09.780
没问题吧

16:09.780 --> 16:11.780
这就是load的解释安装

16:11.780 --> 16:12.780
load的解释安装

16:12.780 --> 16:14.780
以及它的一些简单的介绍

16:14.780 --> 16:15.780
我们这一节课呢

16:15.780 --> 16:16.780
主要的

16:16.780 --> 16:17.780
主要的目的呢

16:17.780 --> 16:19.780
是需要你安装了load的解释之后呢

16:19.780 --> 16:20.780
能够认识到

16:20.780 --> 16:21.780
其中一个重要的点

16:21.780 --> 16:22.780
就是load的解释呢

16:22.780 --> 16:24.780
它是脱离了浏览器环境的

16:24.780 --> 16:25.780
浏览器环境里面

16:25.780 --> 16:26.780
很多东西你不能用了

16:26.780 --> 16:27.780
第二点呢

16:27.780 --> 16:29.780
就是load的解释呢

16:29.780 --> 16:31.780
它运行的文件

16:31.780 --> 16:32.780
只有一个

16:32.780 --> 16:33.780
它只有一个文件

16:33.780 --> 16:34.780
那么这个文件

16:34.780 --> 16:35.780
作为叫做启动文件

16:35.780 --> 16:37.780
或者叫做入口文件

16:37.780 --> 16:38.780
好吧

16:38.780 --> 16:40.780
OK 这是咱们这一节课的东西

16:40.780 --> 16:41.780
安装load的解释

