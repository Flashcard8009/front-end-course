WEBVTT

00:01.070 --> 00:04.270
上节课呢 咱们讲的一个模块呢

00:04.270 --> 00:07.370
它如果说可以需要导出多个东西的时候呢

00:07.370 --> 00:11.070
我们可以选择使用基本导出 对吧

00:11.070 --> 00:13.070
每个导出呢 给他取个名字啊

00:13.070 --> 00:17.870
你可以导直接导出一个声明 声明表达式

00:17.870 --> 00:21.270
或者是呢 你直接导出一个具名符号啊都可以

00:21.270 --> 00:23.270
总之你给他一个 给他一个名字啊

00:23.270 --> 00:25.270
给他一个名份 那么就可以导出了

00:25.270 --> 00:29.270
有的时候呢 我们可能只需要导出一个东西

00:29.470 --> 00:32.470
那么这个如果说我们只需要导出一个东西的时候呢

00:32.470 --> 00:35.870
就没有必要去使用基本导出了

00:35.870 --> 00:38.270
当然基本导出可不可以 当然可以 当然可以

00:38.270 --> 00:41.670
没有任何问题 那么我们也可以选择另外一种导出方式

00:41.670 --> 00:45.670
就是默认导出 我们这一课呢就来学习默认导出

00:45.670 --> 00:49.270
好 咱们去看这个笔记啊

00:49.270 --> 00:52.270
首先呢 我们这一课学习的是默认导出导出

00:52.270 --> 00:54.270
首先我们来看导出

00:54.270 --> 00:56.270
就说呢 每一个模块

00:56.270 --> 01:00.270
它除了允许有多个基本导出的之外啊

01:00.270 --> 01:03.270
基本导出了 因为它有多个 所以说它必须要取名字

01:03.270 --> 01:06.270
它允许 除了有允许有多个基本导出之外呢

01:06.270 --> 01:09.270
还允许有一个默认导出

01:09.270 --> 01:13.270
它是同时允许的 不能说你写了基本导出之外

01:13.270 --> 01:14.270
也不能写默认导出了

01:14.270 --> 01:17.270
也不是说你写了默认导出 你不能基本导出了

01:17.270 --> 01:20.270
它是可以同时存在的 可以同时存在的

01:21.270 --> 01:23.270
那么 默认导出了 它就类似于

01:23.270 --> 01:26.270
CommonJS里面的Major Export

01:26.270 --> 01:28.270
对吧 它就类似于这个

01:28.270 --> 01:31.270
你看 CommonJS里面 这个东西是不是只写一次

01:31.270 --> 01:34.270
对吧 它只导出一次就完事了 导出整个东西

01:34.270 --> 01:37.270
由于呢 它只有一个 默认导出它只有一个

01:37.270 --> 01:39.270
所以说呢 我们在默认导出的时候呢

01:39.270 --> 01:41.270
是不需要给它取名字的

01:41.270 --> 01:43.270
不像基本导出 因为基本导出它可能有多个

01:43.270 --> 01:45.270
你必须要取名字来区分

01:45.270 --> 01:47.270
但是那默认导出它只有一个

01:47.270 --> 01:49.270
因此呢 你无需取名字

01:49.270 --> 01:51.270
它具体的语法是这样子

01:51.270 --> 01:53.270
第一种语法 就是我们最常见的

01:53.270 --> 01:55.270
默认导出语法 就是这个 Export

01:55.270 --> 01:58.270
后面加上一个关键字 Default

01:58.270 --> 02:00.270
Default什么意思呢 就是默认的意思

02:00.270 --> 02:02.270
后面直接写上默认导出的数据

02:02.270 --> 02:04.270
咱们来看一下吧

02:04.270 --> 02:07.270
我这里呢 就写上这么一个

02:07.270 --> 02:11.270
还是新建个文件夹吧 新建个文件夹 Marge

02:11.270 --> 02:13.270
然后呢 我们这里写上一个页面

02:13.270 --> 02:15.270
index 评表

02:15.270 --> 02:18.270
这个文件夹里面让我们写上一个入口文件

02:18.270 --> 02:20.270
index.js

02:20.270 --> 02:22.270
然后呢 写上一个模块文件

02:22.270 --> 02:24.270
ad.js 随便写一个吧

02:24.270 --> 02:27.270
我们的页面上就去引用我们的就是入口文件

02:27.270 --> 02:29.270
script 知道怎么引用吧

02:29.270 --> 02:31.270
找到我们的入口文件index.js

02:31.270 --> 02:33.270
加上一个 Type 属性就完事了

02:33.270 --> 02:36.270
marge 因为这个浏览器本身是支持的

02:36.270 --> 02:39.580
运行出来啊

02:39.580 --> 02:41.580
那么现在呢 模块呢 就

02:41.580 --> 02:43.580
我们的入口文件呢 其实就已经运行了

02:43.580 --> 02:45.580
只不过呢 我这里没写东西

02:45.580 --> 02:47.580
那么我们来写下这个模块文件

02:47.580 --> 02:50.580
这个模块文件呢 虽然在入口文件里边还没有导入它

02:50.580 --> 02:53.580
对吧 我们一会再导入 我们先来写导出

02:53.580 --> 02:56.580
导出呢 除了有基本导出 比方说我们之前学过的

02:56.580 --> 02:58.580
这种方式 基本导出之外呢

02:58.580 --> 03:01.580
我们还可以写上默认导出

03:01.580 --> 03:03.580
然后怎么写呢 export

03:03.580 --> 03:05.580
空格 default

03:05.580 --> 03:08.580
后边直接写上你要导出的数据

03:08.580 --> 03:10.580
直接写数据就行了

03:10.580 --> 03:12.580
那么这个数据呢 可以是一个数字 没问题

03:12.580 --> 03:14.580
你看现在就不需要取名字了

03:14.580 --> 03:16.580
你不需要在这里写什么

03:16.580 --> 03:18.580
这个东西 这个东西反而要包错

03:18.580 --> 03:21.580
反而要包错 因为你这里不能写一个 就是

03:21.580 --> 03:23.580
不能写语句了 你得写表达式

03:23.580 --> 03:25.580
你得写一个数据

03:25.580 --> 03:27.580
这是一个语句 对吧 你得写一个数据

03:27.580 --> 03:30.580
总之呢 你给它把数据跟在那后边就行了

03:30.580 --> 03:32.580
数据大家都知道 对吧 可以是一个字面量

03:32.580 --> 03:35.580
像这种字面量 或者像这个对象

03:35.580 --> 03:37.580
字面量 对吧 可以用这种方式来写

03:37.580 --> 03:40.580
也可以呢 把一个变量作为导出

03:40.580 --> 03:42.580
也行 都可以 都可以

03:43.580 --> 03:45.580
比方说我们现在这样的写法 相当于是咋呢

03:45.580 --> 03:48.580
我有一个基本导出 名字为A 字为E

03:48.580 --> 03:50.580
对吧 基本导出

03:50.580 --> 03:52.580
也有一个默认导出 默认导出它没有名字

03:52.580 --> 03:54.580
就是把这个变量的值打过来

03:54.580 --> 03:56.580
值是什么呢 值就是E

03:56.580 --> 03:58.580
它没有名字 没有名字

03:58.580 --> 04:01.580
这就是默认导出 默认导出

04:01.580 --> 04:03.580
这是第一种写法

04:03.580 --> 04:05.580
另外还有一种不太常见的写法

04:05.580 --> 04:07.580
这种写法我基本上是没有看到过

04:07.580 --> 04:08.580
谁会这样写

04:08.580 --> 04:10.580
就是我们Export呢

04:10.580 --> 04:12.580
非常使用基本导出的语法

04:12.580 --> 04:14.580
只不过把它重命名

04:14.580 --> 04:17.580
我好像上一课忘了说了

04:17.580 --> 04:18.580
因为这个实在太少见了

04:18.580 --> 04:20.580
平时我们不太会这样写

04:20.580 --> 04:21.580
就是我们在导出的时候

04:21.580 --> 04:23.580
使用基本导出的时候

04:23.580 --> 04:26.580
可以使用二次关键字来进行重命名

04:26.580 --> 04:29.580
比方说我们这里有个变量

04:30.580 --> 04:32.580
我们要把它作为基本导出来导出

04:32.580 --> 04:34.580
我们本来是应该怎么写

04:34.580 --> 04:35.580
应该这样子写 对吧

04:35.580 --> 04:37.580
导出的名字是A

04:37.580 --> 04:40.580
导出的值是变量A的值

04:40.580 --> 04:42.580
有的时候我们可能希望换一下名字

04:42.580 --> 04:43.580
我们在这里

04:43.580 --> 04:45.580
我们当时好像上一课可以讲了

04:45.580 --> 04:47.580
导入的时候换名字 对吧

04:47.580 --> 04:49.580
导出的时候也可以换名字

04:49.580 --> 04:51.580
使用二次关键字给它换一个名字

04:51.580 --> 04:53.580
比方说换成ABC

04:53.580 --> 04:55.580
那么我们导出的名字就是ABC

04:55.580 --> 04:57.580
值呢 就是变量A的值

04:57.580 --> 05:00.580
那么导入的时候就要用ABC了

05:00.580 --> 05:02.580
当然了 这东西太少见了

05:02.580 --> 05:03.580
太少见了

05:03.580 --> 05:04.580
所以说我们这里

05:04.580 --> 05:07.580
只知道这么回事就行了

05:07.580 --> 05:10.580
然后我们这里再来说一下这个默正导出

05:10.580 --> 05:11.580
默正导出的时候

05:11.580 --> 05:13.580
我们也可以用这种类似的方式

05:13.580 --> 05:15.580
也可以用这种类似的方式

05:15.580 --> 05:17.580
比方说我们在这里写上什么呢

05:17.580 --> 05:20.580
写上A 导出一个变量A的值

05:20.580 --> 05:22.580
把它作为默正导出

05:24.580 --> 05:26.580
A 这里不要写Default

05:26.580 --> 05:28.580
把它作为默正导出

05:28.580 --> 05:30.580
那么这也是一种默正导出的方式

05:30.580 --> 05:32.580
只不过这种方式特别少见

05:33.580 --> 05:34.580
不用管了

05:34.580 --> 05:36.580
当然这里也可以写变量的值

05:36.580 --> 05:37.580
也可以写什么

05:37.580 --> 05:40.580
不行 不符合语法

05:40.580 --> 05:41.580
必须的一些变量值

05:41.580 --> 05:43.580
这种方式太少见了

05:43.580 --> 05:45.580
我们通常使用默正导出

05:45.580 --> 05:47.580
一般都是使用这种方式

05:47.580 --> 05:48.580
Default

05:48.580 --> 05:50.580
后边写上默正导出的值

05:50.580 --> 05:52.580
比方说我们这里导出个对象

05:52.580 --> 05:54.580
如果说你要默正导出多个东西的话

05:54.580 --> 05:56.580
那么你可以把它封装成一个对象

05:56.580 --> 05:58.580
这里边写上一个函数

05:58.580 --> 05:59.580
写上一个函数

05:59.580 --> 06:01.580
有很多属性

06:04.580 --> 06:06.580
都可以使用默正导出的方式

06:08.580 --> 06:10.580
这就是默正导出的

06:10.580 --> 06:12.580
语法格式

06:12.580 --> 06:14.580
我们刚才也看到了

06:14.580 --> 06:16.580
一个模块导出的时候

06:16.580 --> 06:18.580
除了有默正导出之外

06:18.580 --> 06:20.580
也可以同时存在多个基本导出

06:20.580 --> 06:21.580
都没有问题

06:22.580 --> 06:24.580
而且我们刚才也说了

06:24.580 --> 06:25.580
默正导出它只有一个

06:25.580 --> 06:26.580
因此每个模块

06:26.580 --> 06:28.580
它不能出现多个默正导出

06:28.580 --> 06:30.580
比方说你这里写了一个默正导出

06:30.580 --> 06:31.580
你后来再写一个

06:31.580 --> 06:32.580
它到时候是不行的

06:32.580 --> 06:33.580
是不行的

06:33.580 --> 06:35.580
默正导出是只能一个

06:35.580 --> 06:37.580
这是关于默正导出

06:37.580 --> 06:38.580
有了导出之后

06:38.580 --> 06:40.580
自然而它会存在一个对应的

06:40.580 --> 06:42.580
就是默正导入

06:42.580 --> 06:44.580
默正导入就使用下面的语法

06:44.580 --> 06:45.580
就完事了

06:45.580 --> 06:46.580
就是import

06:46.580 --> 06:49.580
之前我们导入基本导出

06:49.580 --> 06:51.580
我们要导入基本导出的东西

06:51.580 --> 06:52.580
那么怎么写

06:52.580 --> 06:53.580
加上两个大夸号

06:53.580 --> 06:55.580
然后在里边写上基本导出的

06:55.580 --> 06:57.580
里边的名字

06:57.580 --> 06:58.580
默正导出了

06:58.580 --> 06:59.580
还以为它没有名字

06:59.580 --> 07:01.580
所以说你随便取个边疆名

07:01.580 --> 07:02.580
然后边上Front

07:02.580 --> 07:03.580
然后模块路径就完事了

07:03.580 --> 07:04.580
它有点类似于

07:04.580 --> 07:06.580
common.js里面的这种写法

07:06.580 --> 07:07.580
就是把require

07:07.580 --> 07:09.580
我们这里导出的那一种

07:09.580 --> 07:10.580
直接放到一个边疆里面

07:10.580 --> 07:11.580
边疆名随便里去

07:11.580 --> 07:13.580
边疆名随便里去

07:13.580 --> 07:14.580
咱们来试一下

07:14.580 --> 07:16.580
在入口文件里面

07:16.580 --> 07:18.580
我们使用import

07:18.580 --> 07:20.580
我们就用data

07:20.580 --> 07:23.580
from.exe

07:23.580 --> 07:24.580
那么这样子

07:24.580 --> 07:25.580
就是把这个句话

07:25.580 --> 07:26.580
什么意思呢

07:26.580 --> 07:29.580
它是将adl.js

07:29.580 --> 07:31.580
adl.js模块中的

07:31.580 --> 07:33.580
默认导出

07:33.580 --> 07:36.580
放置到边疆

07:36.580 --> 07:37.580
当然这个是场量

07:37.580 --> 07:38.580
演个来说

07:38.580 --> 07:39.580
应该是场量

07:39.580 --> 07:41.580
算是不可更改的data中

07:41.580 --> 07:42.580
那就这么个意思

07:42.580 --> 07:43.580
输出data

07:43.580 --> 07:44.580
你看一下

07:44.580 --> 07:45.580
就这么简单

07:45.580 --> 07:46.580
保存

07:46.580 --> 07:47.580
这边能打印出来

07:47.580 --> 07:48.580
你看 是不是

07:48.580 --> 07:49.580
把这个默认导出的东西

07:49.580 --> 07:50.580
就放过来了

07:50.580 --> 07:51.580
当然什么缓存

07:51.580 --> 07:52.580
那些都是一样的

07:52.580 --> 07:53.580
没有什么区别

07:53.580 --> 07:55.580
这就是导入的方式

07:55.580 --> 07:58.580
怎么来导入一个默认导出

07:58.580 --> 08:00.580
将来你们在

08:00.580 --> 08:02.580
输写一个模块的时候

08:02.580 --> 08:04.580
到底使用默认导出

08:04.580 --> 08:06.580
还是使用基本导出

08:06.580 --> 08:07.580
还是使用默认导出

08:07.580 --> 08:09.580
基本导出并存的

08:09.580 --> 08:10.580
随便里

08:10.580 --> 08:11.580
随便里

08:11.580 --> 08:12.580
看个人的输写习惯

08:12.580 --> 08:13.580
一般来说

08:13.580 --> 08:15.580
一个比较大的模块

08:15.580 --> 08:16.580
东西比较多的话

08:16.580 --> 08:17.580
我们可能会

08:17.580 --> 08:18.580
既有默认导出

08:18.580 --> 08:19.580
又有基本导出

08:19.580 --> 08:20.580
一般来说

08:20.580 --> 08:21.580
默认导出

08:21.580 --> 08:22.580
导出那些

08:22.580 --> 08:23.580
经常要用的东西

08:23.580 --> 08:25.580
就是核心的功能

08:25.580 --> 08:26.580
基本导出

08:26.580 --> 08:28.580
可能导出一些

08:28.580 --> 08:30.580
雜七雜八一些辅助的函数

08:30.580 --> 08:31.580
辅助的函数

08:31.580 --> 08:32.580
或者是辅助的一些功能

08:32.580 --> 08:34.580
有的时候我们可以并存

08:34.580 --> 08:36.580
如果说一个比较简单的模块的话

08:36.580 --> 08:37.580
那就随便里了

08:37.580 --> 08:38.580
如果说你有多个东西

08:38.580 --> 08:39.580
要导出的时候

08:39.580 --> 08:41.580
你可以使用基本导出

08:41.580 --> 08:42.580
分别导出

08:42.580 --> 08:43.580
又可以使用默认导出

08:43.580 --> 08:44.580
把它封装到一个对象里面

08:44.580 --> 08:45.580
导出

08:45.580 --> 08:46.580
都行

08:46.580 --> 08:47.580
都行

08:47.580 --> 08:48.580
没有任何问题

08:48.580 --> 08:49.580
好吧

08:49.580 --> 08:51.580
这就是关于这个默认导出

08:51.580 --> 08:54.580
如果说一个模块里面

08:54.580 --> 08:56.580
如果说一个模块里面

08:56.580 --> 08:58.580
它同时有基本导出

08:58.580 --> 09:00.580
同时又有默认导出

09:00.580 --> 09:01.580
比方说像这种

09:01.580 --> 09:04.580
我这里导出一个辨量

09:04.580 --> 09:05.580
A

09:05.580 --> 09:08.580
再导出一个辨量B

09:08.580 --> 09:10.580
那么同时又存在

09:10.580 --> 09:11.580
有两个基本导出

09:11.580 --> 09:13.580
那么同时存在一个默认导出

09:13.580 --> 09:14.580
那么这个时候

09:14.580 --> 09:15.580
我导入的时候

09:15.580 --> 09:17.580
就看你想用啥

09:17.580 --> 09:20.580
如果你想用基本导出的话

09:20.580 --> 09:21.580
那么你就这样子写

09:21.580 --> 09:23.580
跟我们之前写的一样

09:23.580 --> 09:24.580
AB拿过来

09:24.580 --> 09:25.580
对不对

09:25.580 --> 09:26.580
可以这样子写

09:26.580 --> 09:28.580
也可以

09:28.580 --> 09:29.580
我们比方说不用B

09:29.580 --> 09:30.580
我们只用A

09:30.580 --> 09:31.580
那么就可以这样子写

09:31.580 --> 09:32.580
没问题吧

09:32.580 --> 09:34.580
这是我们之前的写法

09:34.580 --> 09:35.580
如果说

09:35.580 --> 09:37.580
如果说你要全部东西比较多

09:37.580 --> 09:39.580
你要把所有的基本导出

09:39.580 --> 09:40.580
全部导进来

09:40.580 --> 09:41.580
那么你就用这种方式

09:41.580 --> 09:43.580
新号定别名

09:43.580 --> 09:45.580
别名比方说

09:45.580 --> 09:47.580
比方说就是那个

09:47.580 --> 09:49.580
data

09:49.580 --> 09:50.580
保存

09:50.580 --> 09:51.580
就是我们之前说的

09:51.580 --> 09:52.580
你看

09:52.580 --> 09:54.580
是不是把那个A和B

09:54.580 --> 09:55.580
都导入进来了

09:55.580 --> 09:56.580
对吧

09:56.580 --> 09:57.580
都导入进来了

09:57.580 --> 09:59.580
并且如果说你定了别名之后

09:59.580 --> 10:00.580
这个别名里边

10:00.580 --> 10:02.580
还会包含一个default

10:02.580 --> 10:03.580
这个default就是默认导出

10:03.580 --> 10:04.580
所以说

10:04.580 --> 10:06.580
如果说你要得到默认导出的字

10:06.580 --> 10:07.580
你可以用这种方式

10:07.580 --> 10:08.580
data.default

10:08.580 --> 10:09.580
你看default

10:09.580 --> 10:10.580
是不是默认导出的那种

10:10.580 --> 10:11.580
对吧

10:11.580 --> 10:12.580
用新号

10:12.580 --> 10:13.580
总之你用新号

10:13.580 --> 10:15.580
就可以把所有的导出那种

10:15.580 --> 10:16.580
全部拿过来

10:16.580 --> 10:18.580
我们这里多寄一笔

10:18.580 --> 10:25.580
如果使用新号

10:25.580 --> 10:29.580
会将所有基本导出

10:29.580 --> 10:31.580
和默认导出

10:31.580 --> 10:36.580
聚合到一个对象中

10:36.580 --> 10:38.580
默认导出

10:38.580 --> 10:41.580
会作为关键

10:41.580 --> 10:45.580
作为属性default存在

10:45.580 --> 10:47.580
就像这种情况

10:47.580 --> 10:50.580
我们把它覆盖一下

10:50.580 --> 10:54.340
覆盖一下

10:54.340 --> 10:55.340
你看

10:55.340 --> 10:57.340
如果说我们

10:57.340 --> 10:58.340
如果说使用新号

10:58.340 --> 11:00.340
就像这边这样子

11:00.340 --> 11:02.340
它就会把这个模块里边

11:02.340 --> 11:03.340
所有的导出

11:03.340 --> 11:04.340
包括基本导出

11:04.340 --> 11:05.340
包括默认导出

11:05.340 --> 11:06.340
全部导进来

11:06.340 --> 11:08.340
你跟他定个别名

11:08.340 --> 11:09.340
形成一个对象

11:09.340 --> 11:10.340
那么对象里面

11:10.340 --> 11:11.340
默认导出在哪呢

11:11.340 --> 11:12.340
默认导出在它一个

11:12.340 --> 11:15.340
特殊的属性default里边

11:15.340 --> 11:16.340
那么我们可以看到

11:16.340 --> 11:17.340
这边一个default

11:17.340 --> 11:18.340
这里我们输出

11:18.340 --> 11:19.340
data.default

11:19.340 --> 11:21.340
就是我们的默认导出了

11:21.340 --> 11:22.340
没问题吧

11:22.340 --> 11:23.340
OK

11:23.340 --> 11:28.490
那如果说我们不想使用这种方式

11:28.490 --> 11:31.490
不想使用这种方式

11:31.490 --> 11:34.490
我们又要使用基本的导入

11:34.490 --> 11:35.490
比方说我们这个模块里边

11:35.490 --> 11:36.490
有很多东西

11:36.490 --> 11:38.490
不管基本导出

11:38.490 --> 11:39.490
不只是有A和B

11:39.490 --> 11:40.490
还有CD,E,F,G

11:40.490 --> 11:42.490
很多东西大堆

11:42.490 --> 11:44.490
我们又不想使用那么多

11:44.490 --> 11:47.490
我只想使用它的一个默认导出

11:47.490 --> 11:50.490
同时使用一个A和B

11:50.490 --> 11:51.490
使用A和B

11:51.490 --> 11:52.490
那么这个时候怎么办呢

11:52.490 --> 11:54.490
我们可以用这种方式

11:54.490 --> 11:55.490
import

11:55.490 --> 11:56.490
默认导出

11:56.490 --> 11:57.490
怎么默认导入的时候

11:57.490 --> 11:59.490
是不是直接写上变量名

11:59.490 --> 12:01.490
随便你给什么变量都行

12:01.490 --> 12:02.490
随便你给什么变量

12:02.490 --> 12:03.490
比方data

12:03.490 --> 12:04.490
data

12:04.490 --> 12:05.490
后边跟上两个大货号

12:05.490 --> 12:07.490
那么这里边写上基本的导出

12:07.490 --> 12:09.490
比方说我们只需要用到A和B

12:09.490 --> 12:12.490
from.adj

12:12.490 --> 12:13.490
那么这句话什么意思呢

12:13.490 --> 12:15.490
只能是把模块adj

12:15.490 --> 12:16.490
ES里面的默认导出

12:16.490 --> 12:18.490
放到变量data里边

12:18.490 --> 12:20.490
然后把它的基本导出

12:20.490 --> 12:22.490
分别放到变量A和B里边

12:22.490 --> 12:23.490
基本导出

12:23.490 --> 12:25.490
你是要对应名字的

12:25.490 --> 12:27.490
因为它要根据名字去对应

12:27.490 --> 12:28.490
它有多个

12:28.490 --> 12:29.490
那么默认导出

12:29.490 --> 12:30.490
你是不需要管名字的

12:30.490 --> 12:31.490
随便写

12:31.490 --> 12:32.490
我们来说出一下

12:32.490 --> 12:35.490
A,B

12:35.490 --> 12:36.490
你看都拿到了

12:36.490 --> 12:37.490
就这么简单

12:37.490 --> 12:39.490
其实特别简单

12:39.490 --> 12:42.490
这就是ES6的模块画标准里面

12:42.490 --> 12:44.490
如何来使用默认导出

12:44.490 --> 12:45.490
和默认导入

12:45.490 --> 12:47.490
那么具体里面以后写模块的时候

12:47.490 --> 12:48.490
到底用默认的

12:48.490 --> 12:52.490
还是你用基本的随便理

12:52.490 --> 12:54.490
我建议大家在学习阶段

12:54.490 --> 12:55.490
换着用呗

12:55.490 --> 12:57.490
一会儿你写这个项目的时候

12:57.490 --> 12:58.490
你多用基本导出

12:58.490 --> 13:00.490
一会儿你写别的项目的时候

13:00.490 --> 13:01.490
都用默认导出

13:01.490 --> 13:02.490
其实都不怎么影响

13:02.490 --> 13:04.490
因为他们都能实现相应的功能

13:04.490 --> 13:07.490
只是写法上不太一样而已

13:07.490 --> 13:11.490
OK 这是关于默认导出和默认导入

