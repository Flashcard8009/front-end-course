WEBVTT

00:00.000 --> 00:03.600
这节课呢咱们来写一下上节课没有完成的功能

00:03.600 --> 00:06.100
咱们这个肉组件和扣组件呢

00:06.100 --> 00:09.200
他们两个都接收了一个属性啊 叫做Tag

00:09.200 --> 00:10.400
这个Tag的功能呢

00:10.400 --> 00:12.600
就是可以去自定义元素的标签

00:12.600 --> 00:15.200
当我们去写这个扣组件和肉组件的时候

00:15.200 --> 00:18.500
我们都把它最外层的标签写成了一个DIV

00:18.500 --> 00:21.200
那实际上它是可以自定义的

00:21.200 --> 00:25.000
有时候你如果说我们去使用这个肉组件或者扣组件的时候呢

00:25.000 --> 00:27.600
给他们传递了一个Tag标签

00:27.600 --> 00:30.700
那这个Tag标签 比如说传递的值是一个自负创批

00:30.700 --> 00:33.700
ok 那最终这个组件的最外层的标签呢

00:33.700 --> 00:36.800
就会被渗染成为一个批元素

00:36.800 --> 00:38.400
对吧 那在上节课的最后呢

00:38.400 --> 00:39.200
我也给大家说了

00:39.200 --> 00:41.600
我们可以用这个Render函数来做哈

00:41.600 --> 00:44.700
也让大家下个课之后呢仔细的思考思考说

00:44.700 --> 00:47.600
哎 这个用Render该怎么去写 是吧

00:47.600 --> 00:50.200
那咱们今天这一课呢 就把它给写出来

00:50.200 --> 00:51.300
好吧

00:51.300 --> 00:54.100
ok 那咱们按照惯例哈

00:54.100 --> 00:56.100
先把这个在这个项目里面呢

00:56.100 --> 00:59.100
切换一下分支好 切换到咱们这节课的分支

00:59.100 --> 01:09.000
ok get check out 钢B 叫做2.B.自定义元素标签

01:09.000 --> 01:10.500
这节课的名字哈

01:10.500 --> 01:11.900
ok 那我们切换过来了

01:11.900 --> 01:15.400
我们再把在用边期把这个项目给打开哈

01:15.400 --> 01:18.600
打开了之后我们再来看哈

01:18.600 --> 01:19.700
ok 打开之后呢

01:19.700 --> 01:24.100
我们把这个写好的这两个组件给打开哈

01:24.100 --> 01:25.300
打开之后呢

01:25.300 --> 01:28.300
我们来想一想哈 来想一想

01:28.300 --> 01:30.800
哎 你说这个该怎么去写

01:30.800 --> 01:33.200
你看哈 我们这个是tamblet

01:33.200 --> 01:34.600
tamblet相当于什么

01:34.600 --> 01:37.700
相当于我们再去用有点component

01:37.700 --> 01:38.800
去写组件的时候

01:38.800 --> 01:42.100
里面那个tamblet的属性吧 是吧

01:42.100 --> 01:44.500
那咱们去写Render的时候我们也说了

01:44.500 --> 01:46.600
这个Render的权重要大于tamblet

01:46.600 --> 01:48.700
tamblet的权重大于EL 是吧

01:48.700 --> 01:50.600
也就是说你写的Render函数之后

01:50.600 --> 01:53.000
你tamblet里面再写什么都没用了

01:53.000 --> 01:54.400
它走的是Render

01:54.400 --> 01:59.100
走的是Render里面写的一些标签 是吧

01:59.100 --> 02:01.200
那你说咱们这个tamblet的还有用了吗

02:01.200 --> 02:03.400
是不是就没有必要要了呀 是吧

02:03.400 --> 02:05.200
直接注释掉就好了 是吧

02:05.200 --> 02:07.000
就不要了 对吧

02:07.000 --> 02:08.000
但咱们先放着哈

02:08.000 --> 02:10.800
注释的话它有一大堆薄红 好吧

02:10.800 --> 02:11.400
那你看

02:11.400 --> 02:14.500
那我们没有必要去写这个tamblet了

02:14.500 --> 02:17.900
那我们还有必要写这样的点v5文件吗

02:17.900 --> 02:19.500
是不是也没有必要了呀

02:19.500 --> 02:23.600
因为我们需要用到的就是一个对象 是吧

02:23.600 --> 02:25.400
我们只导出一个对象

02:25.400 --> 02:29.100
它就是一个组件 对吗

02:29.100 --> 02:29.400
是吧

02:29.400 --> 02:30.700
那所以说我们可以怎么办

02:30.700 --> 02:34.500
我们可以再去新建两个gs文件

02:34.500 --> 02:35.800
一个肉点js

02:35.800 --> 02:37.200
一个扣点js

02:37.200 --> 02:39.400
然后在这里面导出一个对象

02:39.400 --> 02:41.700
对象里面包含的信息是什么

02:41.700 --> 02:43.600
是这个组件里面的一些信息

02:43.600 --> 02:45.300
比如说组件结合的属性

02:45.300 --> 02:46.200
组件的名字

02:46.200 --> 02:48.900
组件的计算属性等等等等

02:48.900 --> 02:52.000
对吧 还包括这个Render函数 是吧

02:52.000 --> 02:53.600
那也说那我们在这个js里面

02:53.600 --> 02:56.100
把这个导出的对象

02:56.100 --> 02:58.500
写在那个js文件里面就可以 是吧

02:58.500 --> 03:00.200
怎么来写一下哈

03:00.200 --> 03:04.800
在这里面新建一个文件叫做肉点js

03:04.800 --> 03:08.000
然后再来建一个文件叫做扣点js

03:08.000 --> 03:08.600
OK

03:08.600 --> 03:12.820
然后咱们把这个还复制一下

03:12.820 --> 03:15.420
放到这个肉点js里面来

03:15.420 --> 03:16.020
OK

03:16.020 --> 03:19.220
然后咱们就先来写这个肉组件

03:19.320 --> 03:20.920
首先我们要写Tag

03:20.920 --> 03:21.920
Tag是一个什么

03:21.920 --> 03:22.720
是一个属性

03:22.720 --> 03:25.920
我们应该先对它进行一个注册以及教验 是吧

03:27.520 --> 03:28.020
OK

03:28.020 --> 03:30.020
那Tag的类型是什么

03:30.020 --> 03:31.420
是自付创 是吧

03:31.420 --> 03:33.920
那它有没有默认值 有默认值

03:33.920 --> 03:35.520
默认值是什么 是DIV

03:37.020 --> 03:37.520
好吧

03:37.520 --> 03:39.920
然后咱们再来写它的一个Render函数

03:39.920 --> 03:42.120
那Render函数可以帮助我们

03:42.120 --> 03:45.320
去生成这样一个虚拟的一个元素 是吧

03:45.320 --> 03:48.520
这个虚拟的元素最终会变成一个真实的元素

03:48.520 --> 03:50.220
放到我们的页面上 是吧

03:50.220 --> 03:52.620
那Render函数怎么样去写还记的吗

03:54.020 --> 03:55.720
怎么样去写还记的吗

03:55.720 --> 03:57.620
这Render里面建设了一个函数吧

03:57.620 --> 03:59.620
这个函数可以减写成为一个H

03:59.620 --> 04:02.020
那它实际上它有一个非常长的名字

04:02.020 --> 04:03.820
叫做CreateElement

04:03.820 --> 04:04.320
对吧

04:04.320 --> 04:08.420
那这个CreateElement的这个函数需要在这个Render函数里面去导出

04:09.220 --> 04:09.520
是吧

04:09.520 --> 04:10.820
去return回去

04:10.820 --> 04:12.020
return出去这样一个

04:12.020 --> 04:14.620
它的一个最终的执行了一个结果 是吧

04:14.620 --> 04:15.420
那这个H

04:15.420 --> 04:16.920
H函数在执行的时候

04:16.920 --> 04:19.020
你需要去给它传递一些参数吧

04:19.020 --> 04:21.220
有几个 有三个 是吧

04:21.220 --> 04:25.720
第一个参数是你的这个元素的一个标签的名字

04:25.720 --> 04:26.120
对吧

04:26.120 --> 04:27.220
那第二个参数呢

04:27.220 --> 04:30.620
是这个元素的一个属性 是吧

04:30.620 --> 04:32.020
那第三个参数呢

04:32.020 --> 04:35.320
是你这个元素里面的紫元素 是吧

04:35.320 --> 04:37.020
求质 是紫元素

04:37.020 --> 04:39.120
它有这样的一个三个参数 是吧

04:39.120 --> 04:39.820
那好了

04:39.820 --> 04:41.320
那第一个参数是标签

04:41.320 --> 04:42.420
那我们就清楚了

04:42.420 --> 04:43.320
它可以用什么

04:43.320 --> 04:45.320
它可以用我们这个传递过来

04:45.320 --> 04:46.920
这样的一个属性Tag

04:46.920 --> 04:47.320
是吧

04:47.320 --> 04:48.720
那在这块就直接用什么

04:48.720 --> 04:50.920
用Z点Tag就可以了

04:50.920 --> 04:52.320
Z点Tag最终指向的是

04:52.320 --> 04:53.520
它传递过来一个指

04:53.520 --> 04:54.020
没传

04:54.020 --> 04:56.320
就是就是字不传DIV传了

04:56.320 --> 04:57.920
就是你传的这样一个指

04:57.920 --> 04:58.420
是吧

04:58.420 --> 04:58.720
ok

04:58.720 --> 05:00.320
那第二个咱先补看

05:00.320 --> 05:01.220
怎么先看第三个

05:01.220 --> 05:02.320
求质

05:02.320 --> 05:03.120
那你说哈

05:03.120 --> 05:05.420
肉组件的紫组件

05:05.420 --> 05:07.320
肉组件的紫元素啊

05:07.320 --> 05:10.520
写在这个ER钢肉里面的这些元素

05:10.520 --> 05:14.920
都会被被放到这个肉组件的哪里啊

05:14.920 --> 05:17.120
是不是作为插槽放到这里面了

05:17.120 --> 05:17.620
是吧

05:17.620 --> 05:21.120
那所以说写在它的第三个参数上的这个东西

05:21.120 --> 05:23.120
这个值就应该是插槽

05:23.120 --> 05:25.820
那插槽里面的谁呀

05:25.820 --> 05:27.420
插槽有什么

05:27.420 --> 05:28.520
有默认插槽

05:28.520 --> 05:29.720
还有具名插槽

05:29.720 --> 05:30.920
那咱们现在使的是什么

05:30.920 --> 05:32.120
是默认插槽

05:32.120 --> 05:32.520
是吧

05:32.520 --> 05:35.520
那默认插槽它是不是实际上也有名字呀

05:35.520 --> 05:36.120
对吧

05:36.120 --> 05:37.420
它的名字叫做什么

05:37.420 --> 05:39.220
叫做default

05:39.220 --> 05:41.420
这个default

05:41.420 --> 05:42.520
对吧

05:42.520 --> 05:43.220
ok

05:43.220 --> 05:44.220
那我们在这块

05:44.320 --> 05:46.320
只要我把这个插槽拿到就可以了

05:46.320 --> 05:48.020
那怎么拿插槽呢

05:48.020 --> 05:49.420
那其实很简单哈

05:49.420 --> 05:51.020
在我们的view的实际上

05:51.020 --> 05:52.620
有一个实际上的属性

05:52.620 --> 05:54.620
叫做dollarslots

05:54.620 --> 05:55.920
通过这个dollarslots

05:55.920 --> 05:56.920
你就可以拿到

05:56.920 --> 05:57.920
你的默认插槽

05:57.920 --> 05:59.320
你的具名插槽

05:59.320 --> 05:59.920
好吧

05:59.920 --> 06:01.420
怎么去拿看一下哈

06:01.420 --> 06:03.720
就this.dollarslots

06:03.720 --> 06:04.620
顺带的拿到了哈

06:04.620 --> 06:05.420
哪里面谁呀

06:05.420 --> 06:06.520
哪里面default

06:06.520 --> 06:08.020
就这么简单

06:08.020 --> 06:08.420
好吧

06:08.420 --> 06:08.920
ok

06:08.920 --> 06:13.220
那现在标签名字和紫元素都已经有了

06:13.220 --> 06:13.520
是吧

06:13.520 --> 06:15.120
咱们来写下它的属性啊

06:15.120 --> 06:17.320
那它属性有什么呢

06:17.320 --> 06:18.020
一个class

06:18.020 --> 06:19.120
一个style

06:19.120 --> 06:19.420
是吧

06:19.420 --> 06:21.420
咱们写在这哈

06:21.420 --> 06:23.220
哎class

06:23.220 --> 06:24.420
是一个数组

06:24.420 --> 06:25.820
然后style呢

06:25.820 --> 06:26.820
是一个什么

06:26.820 --> 06:27.720
是一个先不管

06:27.720 --> 06:29.320
直接写这么一个东西好吧

06:29.320 --> 06:29.820
ok

06:29.820 --> 06:31.220
我们把它给粘贴过来哈

06:31.220 --> 06:31.720
你看

06:31.720 --> 06:33.520
这个style使用的是谁呀

06:33.520 --> 06:36.120
是使用的是计算属性里面的style

06:36.120 --> 06:36.520
是吧

06:36.520 --> 06:37.420
那在这里面

06:37.420 --> 06:39.820
在专门函数里面去拿计算属性

06:39.820 --> 06:41.020
就这么拿

06:41.020 --> 06:43.320
就通过this去拿呗

06:43.520 --> 06:46.120
等于this.style在这呢

06:46.120 --> 06:46.520
好吧

06:46.520 --> 06:46.820
然后呢

06:46.820 --> 06:48.720
咱们把这个class拿过来哈

06:48.720 --> 06:52.320
那这些class里面有这么几个哈

06:52.320 --> 06:55.030
站到这

06:55.030 --> 06:56.230
那同样的哈

06:56.230 --> 06:56.730
同样的

06:56.730 --> 06:57.330
你看啊

06:57.330 --> 06:59.230
在去拿计算属性的时候

06:59.230 --> 07:00.730
需要使用this.style

07:00.730 --> 07:02.530
那去拿这个属性的时候

07:02.530 --> 07:04.530
是不是也得需要用this去拿呀

07:04.530 --> 07:06.330
因为它现在不是写在模板里的

07:06.330 --> 07:07.830
写在模板里面的话

07:07.830 --> 07:08.330
ok

07:08.330 --> 07:09.830
它可以直接去

07:09.830 --> 07:11.730
不用写this直接去拿

07:11.730 --> 07:12.730
这样你有属性

07:12.730 --> 07:13.430
或者是数据

07:13.430 --> 07:14.830
或者计算属性

07:14.830 --> 07:15.230
是吧

07:15.230 --> 07:16.930
但是放到这个runner函数里面

07:16.930 --> 07:18.730
就必须在前面去放一个this了

07:18.730 --> 07:19.930
因为在这个作用运下

07:19.930 --> 07:21.830
根本就没有什么justify

07:21.830 --> 07:22.930
也没有erlan

07:22.930 --> 07:23.830
是吧

07:23.830 --> 07:24.930
ok

07:24.930 --> 07:29.260
那用this去拿

07:29.260 --> 07:30.160
没问题

07:30.160 --> 07:31.360
那现在这个组件呢

07:31.360 --> 07:33.560
我们就把它写好了

07:33.560 --> 07:35.060
实际上就是导出了一个对象

07:35.060 --> 07:36.660
这个对象就是一个组件

07:36.660 --> 07:36.960
对吧

07:36.960 --> 07:38.960
那其实正常在肉点位置里面

07:38.960 --> 07:41.060
它也是只是导出了一个

07:41.060 --> 07:42.160
一个对象而已

07:42.160 --> 07:43.560
就是对象上面包含了

07:43.560 --> 07:45.360
这样一个组件的信息

07:45.360 --> 07:45.860
是吧

07:45.860 --> 07:46.360
ok

07:46.360 --> 07:48.260
那咱们先来试一下

07:48.260 --> 07:48.860
试一下

07:48.860 --> 07:51.160
使用我们新写的这个组件

07:51.160 --> 07:53.260
能不能够进行一个正常的渲染

07:53.260 --> 07:53.660
好吧

07:53.660 --> 07:55.360
我们在app.vio里面呢

07:55.360 --> 07:56.560
不导入肉点

07:56.560 --> 07:56.860
vio

07:56.860 --> 07:58.860
我们导入肉点gs

07:58.860 --> 07:59.260
然后呢

07:59.260 --> 08:03.460
再运行一下这样的一个项目

08:03.460 --> 08:04.160
开启个服务

08:04.160 --> 08:05.260
哈

08:05.260 --> 08:06.260
就vio

08:06.260 --> 08:06.860
什么vio

08:06.860 --> 08:07.260
npm

08:07.260 --> 08:08.460
吗

08:08.460 --> 08:12.110
npm.so

08:12.110 --> 08:16.410
应该给我们打开的是8080端口是吧

08:16.510 --> 08:19.990
来说一下

08:19.990 --> 08:20.590
哦

08:20.590 --> 08:21.590
ok

08:21.590 --> 08:22.890
这个是不是就打开了

08:22.890 --> 08:24.490
我们来看一下

08:24.490 --> 08:25.290
大家可以看到

08:25.290 --> 08:26.990
现在样式肯定是没有了

08:26.990 --> 08:28.890
因为我们以为是肉点gs

08:28.890 --> 08:30.090
gs里面有样什么

08:30.090 --> 08:30.790
是不是没有

08:30.790 --> 08:32.390
那咱们只来关注一下

08:32.390 --> 08:33.590
它最终渲染的这个

08:33.590 --> 08:35.390
这样一个结果对不对

08:35.390 --> 08:35.990
好不好

08:35.990 --> 08:36.390
ok

08:36.390 --> 08:37.090
大家可以看到

08:37.090 --> 08:37.490
看看

08:37.490 --> 08:39.790
这个组件还是能够正常的渲染

08:39.790 --> 08:40.190
然后呢

08:40.190 --> 08:42.090
我们去来试一下

08:42.090 --> 08:43.790
咱们给第一个肉组件

08:43.790 --> 08:46.290
传的这样一个属性太太的呢

08:46.290 --> 08:47.390
传的一个p

08:49.090 --> 08:50.590
然后我们来看一下

08:50.590 --> 08:51.190
哈

08:51.190 --> 08:51.590
你看

08:51.590 --> 08:53.290
这块是不是就变成一个p元素了

08:53.290 --> 08:53.890
对吧

08:53.890 --> 08:54.590
再传一个哈

08:54.590 --> 08:55.190
玩一下哈

08:55.190 --> 08:56.990
传一个h4

08:56.990 --> 08:57.390
他先

08:58.790 --> 08:59.390
等着他哈

08:59.390 --> 08:59.690
你看

08:59.690 --> 09:00.890
这变成h4了

09:00.890 --> 09:01.290
是吧

09:01.290 --> 09:02.590
那这个功能就做好了

09:02.590 --> 09:03.190
对吧

09:03.190 --> 09:03.590
ok

09:03.590 --> 09:04.790
那好了哈

09:04.790 --> 09:06.190
这个结构完事了

09:06.190 --> 09:08.590
弄我们的这样一个css放哪呢

09:09.690 --> 09:10.290
你看

09:10.290 --> 09:13.290
用这个点vio文件去写组件的时候

09:13.290 --> 09:15.290
直接可以放到这个点vio文件里面

09:15.290 --> 09:16.790
但是你能把这个样式文件

09:16.790 --> 09:17.790
放到这样的一个肉点

09:17.790 --> 09:18.790
jss里面吗

09:18.790 --> 09:19.790
说不行啊

09:19.790 --> 09:20.590
那怎么办

09:20.590 --> 09:22.490
那我们就再建议一个

09:22.490 --> 09:24.290
放这样式的文件呗

09:24.290 --> 09:24.490
是吧

09:24.490 --> 09:25.690
有什么难的呢

09:25.690 --> 09:27.190
我们在这个summechalk里面

09:27.190 --> 09:29.490
再来先建一个文件叫做肉点

09:29.490 --> 09:29.890
sas

09:31.190 --> 09:32.390
我们直接

09:32.390 --> 09:32.690
哎

09:32.690 --> 09:35.490
把写在这个点vio文件里面的css

09:35.490 --> 09:36.390
给复制一遍

09:38.890 --> 09:41.600
复制一遍哈

09:41.600 --> 09:43.000
放到这个里面就可以了

09:44.300 --> 09:44.600
是吧

09:44.600 --> 09:45.700
放到这里面就可以了

09:45.700 --> 09:47.100
然后我们可以怎么做

09:47.100 --> 09:50.100
我们可以在这个min点jss里面

09:50.100 --> 09:51.600
去倒入谁呀

09:51.600 --> 09:54.600
去倒入这个里面的肉点sas

09:54.600 --> 09:57.010
是吧

09:57.010 --> 09:57.610
ok

09:57.610 --> 09:59.710
那现在我们再来看

09:59.710 --> 10:01.210
你看钥匙是不是就出来了

10:01.210 --> 10:02.510
就变成正常了了

10:02.510 --> 10:02.910
是吧

10:02.910 --> 10:04.910
那你看我们这个肉点vio还有用吗

10:04.910 --> 10:05.910
是不是有没有用了

10:05.910 --> 10:06.910
他就说空盒了

10:06.910 --> 10:08.110
那咱们把它给删掉

10:08.110 --> 10:08.710
好吧

10:08.710 --> 10:09.710
把它也删掉

10:09.710 --> 10:10.410
ok

10:10.410 --> 10:10.810
然后呢

10:10.810 --> 10:12.710
咱们写完这个肉组件之后呢

10:12.710 --> 10:14.910
再来写一下这个扣组件

10:14.910 --> 10:15.310
好吧

10:15.310 --> 10:17.510
那扣组件和这肉组件写下来就一样了

10:17.710 --> 10:18.610
复制一下就可以了

10:18.610 --> 10:18.810
哈

10:20.110 --> 10:20.410
a

10:21.210 --> 10:22.310
拉到对下面哈

10:26.660 --> 10:27.660
ctrl x

10:28.560 --> 10:30.360
xport default

10:33.640 --> 10:34.040
ok

10:34.840 --> 10:35.540
安排一下好了

10:35.540 --> 10:35.940
然后呢

10:35.940 --> 10:37.640
再来接受这样的一个tag属性

10:38.040 --> 10:38.740
那tag呢

10:38.740 --> 10:40.540
他的默认值也是一个

10:40.840 --> 10:42.440
呃div是吧

10:43.340 --> 10:44.440
default div

10:45.640 --> 10:46.540
ok没问题

10:46.640 --> 10:47.240
然后呢

10:47.240 --> 10:48.340
咱们来写一下

10:48.340 --> 10:50.040
他这样的一个render函数哈

10:54.410 --> 10:55.010
h

10:56.110 --> 10:57.710
return一个h

10:58.010 --> 10:59.510
zs.tag

10:59.710 --> 11:01.010
然后他的属性

11:01.010 --> 11:03.110
然后他的这个默认插槽是吧

11:03.310 --> 11:05.110
因为我们用这个呃

11:05.110 --> 11:07.510
扣组件的时候也是往他的这样的一个

11:07.610 --> 11:09.910
标签里面去写一些元素是吧

11:10.010 --> 11:10.710
所以说这块呢

11:10.710 --> 11:12.310
他的紫元素也是这个插槽

11:12.610 --> 11:13.110
ok

11:13.110 --> 11:15.110
那咱们再来写他的一些个呃

11:15.210 --> 11:16.310
这样的一个属性啊

11:16.310 --> 11:18.010
那属性就比较简单了是吧

11:19.010 --> 11:19.910
放到这哈

11:20.810 --> 11:21.910
ok感一下

11:23.210 --> 11:23.910
那这一块呢

11:23.910 --> 11:25.610
就是zs.classlist

11:27.620 --> 11:28.720
再来写一下style

11:29.220 --> 11:30.920
style呢就是zs.style

11:34.590 --> 11:35.590
ok没问题

11:36.390 --> 11:38.390
那咱们呢再把这样的一个

11:38.990 --> 11:40.390
再把这个嗯

11:40.490 --> 11:42.790
样式文件复制到这样的一个

11:42.990 --> 11:43.190
呃

11:43.990 --> 11:45.190
扣点sas里面哈

11:54.880 --> 11:55.780
放到这里面来

11:56.180 --> 11:58.180
ok那这个扣点v又没有用了

11:58.180 --> 11:59.480
我们把它也删掉哈

12:00.780 --> 12:02.580
ok删掉了之后呢

12:02.580 --> 12:04.680
哎我们再去在这个

12:04.680 --> 12:06.680
app.v里面去引入谁呀

12:06.780 --> 12:08.880
去引入这个扣点js

12:10.920 --> 12:13.020
然后呢在min.js里面

12:13.120 --> 12:15.120
去引入这个扣点sas

12:19.300 --> 12:20.200
来看一下

12:20.900 --> 12:21.600
好些哈

12:22.200 --> 12:24.300
你看能够正常的去显示了是吧

12:24.400 --> 12:26.300
那咱们仍然去测试一下哈

12:26.400 --> 12:28.400
我们去找到一个扣足键

12:28.400 --> 12:30.300
然后给他去传的一个

12:30.300 --> 12:31.500
让你一个tag标签

12:31.900 --> 12:33.000
传的一个ps

12:33.900 --> 12:35.000
哎就错了哈

12:35.300 --> 12:35.700
tag

12:36.900 --> 12:38.700
ok我们来看一下啊

12:39.700 --> 12:41.600
第一个里面的tag

12:41.800 --> 12:44.000
你看这个er刚扣这个元素

12:44.000 --> 12:45.500
是不是就是一个p元素了

12:45.700 --> 12:47.300
是吧这个时候就完事了

12:47.400 --> 12:49.400
就把这个自订标签给写完了

12:49.700 --> 12:51.700
好吧这个功能其实很好写

12:51.700 --> 12:53.800
是吧就是利用了一个软点函数

12:54.200 --> 12:56.300
然后呢我们去呃

12:56.400 --> 12:58.300
直接使用这样的一个对象

12:58.300 --> 12:59.700
作为一个自动键就可以了

12:59.800 --> 13:00.800
作为一个组件

13:01.000 --> 13:02.700
是吧它导出一个对象就是一个

13:02.700 --> 13:04.600
导出了一个组件就能去用了

13:04.600 --> 13:06.200
ok那怎么接下来呢

13:06.200 --> 13:07.800
再去做一些处理哈

13:07.800 --> 13:10.500
首先你不可能说是使用一个组件

13:11.100 --> 13:12.600
就去导入一个组件呢

13:12.600 --> 13:14.300
这样的一个文件是吧

13:14.300 --> 13:16.600
那正常我们去使用这个组件的时候

13:16.600 --> 13:18.000
我们是不是直接导入一个

13:18.300 --> 13:20.500
lm 他下面的一个index.css

13:20.500 --> 13:21.500
就可以了呀是吧

13:21.500 --> 13:22.200
那怎么呢

13:22.200 --> 13:23.200
就在这个

13:23.600 --> 13:24.800
4.chalk 里面呢

13:24.800 --> 13:26.400
再建一个张定文件

13:26.400 --> 13:27.700
叫做index.sass

13:28.700 --> 13:31.300
我们只导入这一个文件就可以了

13:31.300 --> 13:31.800
好吧

13:32.500 --> 13:33.800
那这会呢就不要了

13:34.400 --> 13:36.300
在这上面直接input一个

13:38.280 --> 13:39.740
index.css

13:41.870 --> 13:44.570
ok 那在这个index.css里面

13:44.570 --> 13:45.770
我们去导入谁呀

13:45.770 --> 13:48.970
去导入这个组组件和控组件的样式

13:48.970 --> 13:49.970
是不是就可以了

13:49.970 --> 13:51.770
那在sass里面去导入

13:51.970 --> 13:53.870
在sass里面去导入一个css

13:53.870 --> 13:55.870
是不是可以只用这个index.css

13:55.970 --> 13:56.470
对吧

13:57.770 --> 13:58.370
下一个

14:01.140 --> 14:02.140
ok导入谁呢

14:02.140 --> 14:03.540
导入当前目楼下的

14:03.640 --> 14:04.540
肉点sass

14:04.640 --> 14:06.240
再导入当前目楼下的

14:06.440 --> 14:07.240
扣点sass

14:07.940 --> 14:08.940
ok没有问题

14:09.340 --> 14:09.740
是吧

14:09.740 --> 14:11.240
现在同样是可以去使用

14:11.240 --> 14:13.140
是吧样式没有出现任何的问题

14:13.540 --> 14:13.940
好吧

14:14.040 --> 14:14.540
ok

14:14.640 --> 14:16.440
那咱们接下来再考虑一件事情

14:16.640 --> 14:17.540
再考虑一件事情

14:17.740 --> 14:19.040
我们去

14:19.340 --> 14:20.940
也如果这样的一个element

14:20.940 --> 14:22.240
这样的一个组件的时候

14:22.240 --> 14:23.540
我们可以怎么样去使用

14:24.640 --> 14:25.940
我们可以单独的去

14:26.240 --> 14:27.440
去引入是吧

14:28.440 --> 14:29.440
单独的去引入的话

14:29.440 --> 14:30.140
比如说

14:30.140 --> 14:31.140
我们举个例子哈

14:31.240 --> 14:32.440
再强点sass里面

14:32.740 --> 14:34.240
我们去引入了这样的一个

14:34.240 --> 14:36.040
嗯肉组件是吧

14:36.040 --> 14:37.440
from 哪里先不管哈

14:38.240 --> 14:39.240
from差差差

14:39.240 --> 14:39.640
好吧

14:39.640 --> 14:41.040
然后我们想要去使用这样的一个

14:41.040 --> 14:41.740
肉组件的话

14:41.740 --> 14:43.740
我们是不是可以利用viu.youse

14:43.740 --> 14:44.340
去使用

14:45.440 --> 14:46.840
是吧去使用这个肉组件

14:47.240 --> 14:49.540
那在最最开始的课程里面

14:49.540 --> 14:51.040
应该的跟大家有提过了哈

14:51.440 --> 14:53.340
呃利用viu.youse

14:53.340 --> 14:54.540
去使用一个

14:54.640 --> 14:55.740
这样一个组件的话

14:55.740 --> 14:57.440
他会去调用这个

14:57.440 --> 14:59.540
传入的参数里面的什么方法

15:01.040 --> 15:02.240
调用的传入参数里面

15:02.240 --> 15:03.140
in star 方法

15:03.940 --> 15:04.340
是吧

15:04.440 --> 15:05.540
然后呢让他去

15:05.540 --> 15:07.640
执行一些个程序

15:07.640 --> 15:07.940
是吧

15:07.940 --> 15:08.440
那好

15:08.440 --> 15:09.540
那大家再思考一下问题

15:09.540 --> 15:09.940
好

15:09.940 --> 15:10.440
你看

15:10.440 --> 15:13.140
我们想要去使用这样一个肉组件

15:13.640 --> 15:16.740
那我们应该让这个肉组件里面有什么呢

15:18.240 --> 15:19.640
他这个里面应该有什么呢

15:20.440 --> 15:20.840
嗯

15:22.340 --> 15:23.340
他做的功能

15:23.540 --> 15:24.040
是什么

15:24.040 --> 15:25.540
应该说他做的功能是什么

15:25.840 --> 15:26.740
他应该是说

15:26.740 --> 15:27.740
我们只要

15:27.940 --> 15:28.840
让这个viu.youse

15:28.840 --> 15:30.440
去使用这样一个肉组件之后

15:30.440 --> 15:31.940
我们在全局上

15:31.940 --> 15:34.640
就能够直接的去使用这个组件了吧

15:34.840 --> 15:35.740
那我们在这里面

15:35.740 --> 15:38.340
是不是就可以直接去注册一个全局组件

15:38.540 --> 15:39.340
坎坡能的

15:39.340 --> 15:41.340
调用这个viu上的坎坡能的方法

15:41.340 --> 15:42.540
去注册一个全局组件

15:42.540 --> 15:44.640
这样在这个项目的任何地方

15:44.740 --> 15:46.540
都能够去使用这个组件了

15:46.840 --> 15:47.240
是吧

15:47.240 --> 15:48.640
那咱们现在就来写一下

15:48.740 --> 15:49.240
好吧

15:50.040 --> 15:50.440
ok

15:50.940 --> 15:51.440
ok

15:51.540 --> 15:53.840
那你看我们这个每一个组件

15:53.840 --> 15:54.940
就不应该

15:55.040 --> 15:58.540
就不应该只写成这样一个单个的一个文件了

15:58.840 --> 16:01.240
应该把他们放到自己的文件夹当中去

16:01.240 --> 16:02.240
比如说肉组件

16:02.240 --> 16:03.840
就放到他肉组件里面去

16:03.840 --> 16:04.240
是吧

16:04.240 --> 16:05.140
那扣组件呢

16:05.240 --> 16:06.840
就放到扣组件里面去

16:07.240 --> 16:07.640
呀

16:08.240 --> 16:08.840
错了哈

16:09.940 --> 16:10.640
这块啊

16:10.740 --> 16:11.540
再建一个

16:12.240 --> 16:13.240
扣文件是吧

16:13.240 --> 16:14.840
把它移动到这里面来

16:15.240 --> 16:15.940
然后呢

16:15.940 --> 16:17.640
把这个肉移动到这里面来

16:17.740 --> 16:18.540
抱歉不用管哈

16:18.540 --> 16:19.740
因为这个文件目录不对

16:20.040 --> 16:21.840
因为我们在app.viu里面的时候

16:21.840 --> 16:23.940
我们更改一下的一个文件的一个路径

16:23.940 --> 16:25.440
那这块自然就引入不进来了

16:25.440 --> 16:26.640
这是咱们等会再说吧

16:27.040 --> 16:27.440
ok

16:27.640 --> 16:28.040
然后呢

16:28.040 --> 16:28.840
在这个里面

16:28.840 --> 16:30.040
在每一个组件里面

16:30.040 --> 16:32.440
我们是不是都应该去建一个index.js

16:33.840 --> 16:36.740
然后我们通过这个index.js

16:36.740 --> 16:39.040
去抖出一个组件

16:39.740 --> 16:40.140
是吧

16:40.140 --> 16:41.340
去抖出一个组件

16:41.540 --> 16:43.540
然后这个在这个index.js里面呢

16:43.640 --> 16:46.940
再给组件上去加上一个index

16:47.340 --> 16:48.440
install方法

16:48.940 --> 16:49.340
是吧

16:49.840 --> 16:50.640
没有问题吧

16:50.740 --> 16:51.240
ok

16:51.240 --> 16:51.940
那咱们呢

16:51.940 --> 16:52.940
就把这个

16:53.740 --> 16:55.840
组件的文件都放到这个

16:55.840 --> 16:57.740
他文件下的src下

16:58.440 --> 16:59.340
弄到这里面来

16:59.940 --> 17:00.340
然后呢

17:00.340 --> 17:01.340
在肉组件里面

17:01.340 --> 17:02.840
同样也是建一个src

17:03.040 --> 17:03.340
然后呢

17:03.340 --> 17:04.540
把肉弄进来

17:04.540 --> 17:04.940
然后呢

17:04.940 --> 17:07.040
在这个肉文件夹里面

17:07.140 --> 17:09.440
再去先建一个index.js

17:10.440 --> 17:10.740
好吧

17:10.740 --> 17:12.640
我们做一个目录的一个区分哈

17:12.640 --> 17:14.140
我们这个index.js

17:14.140 --> 17:16.940
就相当于是我们这个组件的一个

17:16.940 --> 17:17.740
入口文件

17:17.740 --> 17:18.940
主的一个入口文件

17:19.040 --> 17:20.740
那我们会把他里面的组件呢

17:20.740 --> 17:22.940
都放到src这个文件夹下

17:23.840 --> 17:25.840
就做这样的一个目录的一个区分

17:25.940 --> 17:26.440
好吧

17:26.440 --> 17:26.940
ok

17:26.940 --> 17:27.940
那咱们现在呢

17:27.940 --> 17:29.040
先打开

17:29.240 --> 17:30.240
这样的一个

17:30.240 --> 17:31.840
肉点js

17:32.140 --> 17:34.840
肉文件夹下的index.js

17:34.840 --> 17:35.340
好

17:36.340 --> 17:37.440
那在这个里面

17:37.440 --> 17:38.340
我们是不是

17:38.340 --> 17:41.040
就主要去导出一个组件就可以了

17:41.540 --> 17:41.940
对吧

17:41.940 --> 17:43.540
主要是导出一个组件

17:43.540 --> 17:44.040
ok

17:44.040 --> 17:45.840
那在这个index.js里面

17:45.840 --> 17:47.140
导出的是哪个组件

17:47.240 --> 17:49.540
导出的是这个肉点js组件吧

17:49.840 --> 17:50.140
是吧

17:50.140 --> 17:52.540
那我们首先需要把它引入进来吧

17:52.640 --> 17:53.140
比如说

17:53.140 --> 17:54.440
input一个什么

17:54.740 --> 17:56.140
input一个肉

17:57.440 --> 17:58.140
from

17:58.440 --> 18:02.140
当前目录下的src下的肉点js

18:02.640 --> 18:03.140
是吧

18:03.140 --> 18:03.740
然后呢

18:03.740 --> 18:05.140
我们再把它导出出去

18:05.840 --> 18:07.940
ex part的default一个肉

18:09.040 --> 18:10.040
这样没有问题吧

18:10.040 --> 18:10.440
是吧

18:10.440 --> 18:12.240
但是在导出去之前

18:12.340 --> 18:14.440
我们需要对它做一点点

18:14.440 --> 18:15.040
改动

18:15.140 --> 18:17.140
我们要让这个肉组线上

18:17.240 --> 18:19.540
有一个insult这样的一个属性

18:19.640 --> 18:21.240
就是肉点insult

18:21.740 --> 18:22.040
对

18:22.140 --> 18:23.340
等于一个函数

18:23.440 --> 18:26.540
那这个函数是不是接受了一个参数呢

18:27.040 --> 18:28.740
我们利用view点use

18:29.040 --> 18:31.040
去使用一个组件的时候

18:31.040 --> 18:33.640
这个组件会执行它的insult方法

18:33.740 --> 18:35.740
并且会将这个view

18:35.740 --> 18:37.340
作为它的第一个参数

18:37.340 --> 18:39.440
传入进这个函数里面来

18:39.540 --> 18:40.140
所以说这会呢

18:40.140 --> 18:41.840
它接受了一个参数view

18:42.740 --> 18:43.140
好吧

18:43.140 --> 18:45.040
那这个时候我们直接去调用view点

18:45.140 --> 18:46.840
可捧的是不是就ok了

18:47.640 --> 18:48.040
对吧

18:48.340 --> 18:50.340
view点可捧的第一个参数

18:50.340 --> 18:51.840
是这个组件的名字

18:51.940 --> 18:54.040
那这个组件的名字写在哪了

18:54.940 --> 18:55.840
是不是写在这了

18:56.440 --> 18:56.740
对吧

18:56.740 --> 19:01.220
那直接就用这个肉点

19:01.420 --> 19:01.920
那个

19:02.420 --> 19:02.820
是吧

19:02.920 --> 19:04.220
那它的第二个参数呢

19:04.220 --> 19:05.820
是这个组件的一些

19:05.820 --> 19:06.320
呃

19:06.320 --> 19:07.920
这样的一些个属性参数

19:07.920 --> 19:08.420
是吧

19:08.420 --> 19:09.020
那这个是谁啊

19:09.020 --> 19:09.820
就是这个肉

19:10.520 --> 19:12.120
因为你导入进来这个肉什么

19:12.120 --> 19:12.920
是一个对象吗

19:12.920 --> 19:14.220
这放在这里就可以了

19:14.920 --> 19:15.420
好吧

19:16.020 --> 19:16.520
ok

19:16.620 --> 19:18.220
这个肉的index.js

19:18.220 --> 19:18.920
就这样去写

19:18.920 --> 19:20.220
那其实

19:20.320 --> 19:21.520
code index.js

19:21.520 --> 19:23.220
是不是也这样写就可以了

19:23.620 --> 19:24.120
对吧

19:24.120 --> 19:26.020
只不过导入进来的是什么

19:26.020 --> 19:26.620
是code

19:26.920 --> 19:28.420
然后用的也是code是吧

19:30.220 --> 19:30.820
看一下

19:31.820 --> 19:32.520
呀呀呀

19:33.420 --> 19:33.920
ok

19:34.520 --> 19:35.620
这样是没什么问题的

19:36.320 --> 19:36.720
好吧

19:37.720 --> 19:39.120
那这样做了之后

19:39.120 --> 19:40.320
我们可以怎么样去

19:40.520 --> 19:41.220
去写呢

19:41.220 --> 19:42.120
我们试一下

19:42.120 --> 19:42.620
好吧

19:42.620 --> 19:43.420
我们现在啊

19:43.420 --> 19:45.720
不在这个app.vio里面去导入他们了

19:46.320 --> 19:47.220
也不去使了

19:47.720 --> 19:48.220
是吧

19:48.420 --> 19:50.420
我们在这个index.js里面

19:51.020 --> 19:51.920
去导入谁呢

19:52.720 --> 19:53.720
去导入一个

19:54.220 --> 19:54.920
肉组件

19:56.990 --> 19:57.490
from

19:57.490 --> 19:58.890
这个at element

20:01.320 --> 20:03.720
导入这个at element下面的谁呢

20:03.720 --> 20:05.420
下面的这样一个肉

20:06.620 --> 20:07.120
是吧

20:07.920 --> 20:08.620
就可以了

20:08.820 --> 20:10.620
你导入一个文件夹的时候

20:10.620 --> 20:11.620
他会去找谁呀

20:11.620 --> 20:14.120
找这个文件夹下的index.js

20:14.220 --> 20:14.520
是吧

20:14.520 --> 20:17.120
孙生只写到这个肉这个文件夹就可以了

20:17.120 --> 20:17.620
好吧

20:17.620 --> 20:17.920
ok

20:17.920 --> 20:19.520
那咱们再去导入一个code

20:24.440 --> 20:25.940
然后我们用这个vio

20:26.140 --> 20:27.640
去使用这个肉

20:28.540 --> 20:29.340
再用vio

20:29.740 --> 20:31.340
去使用这个code

20:34.530 --> 20:35.030
刷新

20:38.480 --> 20:39.880
好像给我们抱错了是吧

20:41.980 --> 20:42.480
呃

20:43.380 --> 20:44.080
indefine

20:44.080 --> 20:45.380
哪里来的错误呢

20:46.680 --> 20:47.780
刷新一下好像

20:48.780 --> 20:49.880
还是有问题是吧

20:49.880 --> 20:51.080
我们应该是

20:51.080 --> 20:53.380
导入的帐的一个文件是没有问题的

20:53.380 --> 20:54.380
我来检查一下

20:54.980 --> 20:55.280
ok

20:55.280 --> 20:55.580
哈

20:55.980 --> 20:56.380
呃

20:56.380 --> 20:57.580
这个问题是这样的

20:57.580 --> 20:58.480
是这样的

20:58.580 --> 20:59.180
你看哈

20:59.280 --> 21:01.680
他说不能去调用某一个

21:01.680 --> 21:03.880
indefine的这个这样的一个方法是吧

21:03.880 --> 21:04.780
我们来看一下

21:04.780 --> 21:06.780
其实在这个code组件里面

21:06.780 --> 21:08.080
哈在code组件里面

21:08.980 --> 21:09.480
来找一下

21:09.480 --> 21:10.480
他没有内幕

21:10.680 --> 21:11.080
是吧

21:11.080 --> 21:11.880
没有内幕的话

21:11.880 --> 21:13.080
怎么样去写他

21:13.080 --> 21:15.180
写到这个vio有点坑坑的里面呢

21:15.180 --> 21:15.580
是吧

21:15.580 --> 21:15.980
所以说呢

21:15.980 --> 21:16.680
咱们在这块

21:16.680 --> 21:17.980
在code.js里面

21:18.080 --> 21:19.480
去给他加上一个内幕

21:19.880 --> 21:21.280
内幕叫做什么叫做

21:21.280 --> 21:22.480
elcode

21:22.680 --> 21:23.180
对吧

21:24.580 --> 21:27.280
elcode

21:27.680 --> 21:27.980
ok

21:27.980 --> 21:29.380
这个时候我们再来看一下

21:29.980 --> 21:30.480
开信

21:31.080 --> 21:31.580
ok

21:31.680 --> 21:34.280
你看现在是不是就能够正常去使用了

21:34.580 --> 21:37.280
咱们并没有在这个app.vio里面去入他

21:37.380 --> 21:37.780
是吧

21:37.780 --> 21:39.280
只不过是在这个

21:39.380 --> 21:41.480
mint.js里面引入了这两个组件

21:41.480 --> 21:43.580
然后用vio去使用他们两个了

21:44.080 --> 21:44.680
是吧

21:44.980 --> 21:45.580
ok好

21:45.680 --> 21:46.480
这个就是

21:46.480 --> 21:48.980
还怎么样去利用这个vio点use

21:49.080 --> 21:50.380
去使用一个组件

21:50.380 --> 21:52.180
他其中的一个原理

21:52.180 --> 21:53.380
其实很简单是吧

21:53.480 --> 21:53.980
ok

21:53.980 --> 21:56.080
那其实这样写还不行

21:56.280 --> 21:58.980
我们正常还再去使用这样的一个

21:58.980 --> 22:00.480
aliment组件库的时候

22:00.480 --> 22:02.680
我们是不是直接导入了是这个库啊

22:03.080 --> 22:03.680
然后呢

22:03.680 --> 22:06.080
从这个库里面去导入一个肉或者

22:06.080 --> 22:07.980
也扣或者直接导入这个aliment

22:08.180 --> 22:09.280
比如说举个例子哈

22:09.780 --> 22:11.080
可以在这里面怎么去做

22:11.180 --> 22:13.680
在里面inpower的一个aliment

22:13.780 --> 22:15.580
from一个aliment

22:15.680 --> 22:16.180
是吧

22:16.180 --> 22:19.780
然后呢让这个vio去使用这个aliment

22:20.680 --> 22:20.980
是吧

22:20.980 --> 22:22.480
这是一种或者是怎么样

22:22.480 --> 22:24.280
或者是从这里面去导入什么

22:24.380 --> 22:26.280
导入这里面组件肉

22:26.580 --> 22:26.980
扣

22:27.880 --> 22:28.680
就这么写了哈

22:28.680 --> 22:30.380
然后呢去用vio点use

22:30.380 --> 22:31.480
这个肉或者扣

22:32.280 --> 22:32.780
是吧

22:32.880 --> 22:34.080
那我们也这样去做

22:34.180 --> 22:34.680
好吧

22:34.680 --> 22:35.680
那所以说哈

22:35.680 --> 22:37.680
我们就需要在这个aliment

22:37.680 --> 22:39.480
占了一个文件夹儿当中

22:40.280 --> 22:40.480
啊

22:40.480 --> 22:42.180
我把这个旋动关了哈

22:42.180 --> 22:43.480
然后再来写哈

22:43.480 --> 22:44.380
要不太乱了

22:45.080 --> 22:47.280
在这个aliment的这个文件夹儿当中哈

22:47.380 --> 22:50.580
去新建一个index.js

22:51.580 --> 22:52.980
那这个index.js

22:52.980 --> 22:54.080
做的事情是什么

22:54.180 --> 22:56.880
就是导出所有的组件

22:57.280 --> 22:58.580
导出所有的组件

23:00.280 --> 23:01.180
那怎么导呢

23:01.480 --> 23:02.080
怎么导

23:02.780 --> 23:03.680
思考思考哈

23:04.380 --> 23:06.080
那其实是不是也很简单啊

23:06.380 --> 23:07.280
你在这里面

23:07.280 --> 23:09.980
首先把这样的一个组件导入进来

23:10.480 --> 23:10.980
是吧

23:11.880 --> 23:12.880
把先导入哈

23:12.880 --> 23:13.980
inpower一个肉

23:15.980 --> 23:16.380
一样

23:17.480 --> 23:17.980
from

23:19.880 --> 23:21.780
from这个at

23:23.580 --> 23:25.980
aliment下面的肉

23:27.180 --> 23:28.580
同样的再导入一个扣

23:33.890 --> 23:34.290
是吧

23:34.990 --> 23:35.890
然后最终呢

23:37.090 --> 23:37.890
最终怎么样

23:37.890 --> 23:38.890
最终把这个

23:40.290 --> 23:41.090
导出出去

23:41.390 --> 23:41.790
是吧

23:41.790 --> 23:43.290
export的default一个

23:43.690 --> 23:45.190
让你一个肉

23:45.890 --> 23:46.690
让你一个扣

23:49.500 --> 23:49.900
是吧

23:49.900 --> 23:51.000
我们来看一下啊

23:51.100 --> 23:51.900
我们来看一下

23:52.100 --> 23:53.900
在这个min.js里面

23:54.000 --> 23:55.100
我们直接

23:56.300 --> 23:57.700
导入这个aliment

24:02.360 --> 24:03.560
直接导入这个aliment

24:04.160 --> 24:04.660
from

24:05.160 --> 24:06.660
这里一个at element

24:08.470 --> 24:08.970
是吧

24:09.170 --> 24:10.170
因为我们现在导入什么

24:10.170 --> 24:10.870
是一个文件夹

24:11.070 --> 24:11.870
导入文件夹的时候

24:11.870 --> 24:14.070
它会自动去找里面的index.js

24:14.270 --> 24:14.670
是吧

24:14.870 --> 24:15.270
ok

24:15.270 --> 24:15.670
然后呢

24:15.670 --> 24:16.670
我们再用这个view

24:16.670 --> 24:18.170
去youse这个aliment

24:20.050 --> 24:20.450
是吧

24:20.450 --> 24:21.550
所以说这样可以

24:21.550 --> 24:22.350
可以做到吗

24:22.350 --> 24:23.250
可以去使用吗

24:23.850 --> 24:25.050
是不是不能去使用啊

24:25.250 --> 24:26.550
虽然说我们在这个里面

24:26.550 --> 24:27.750
去把它给导出去了

24:27.850 --> 24:28.650
但是

24:28.950 --> 24:29.750
你这个时候

24:29.750 --> 24:30.650
你这个辨量

24:30.850 --> 24:32.050
它是一个对象

24:32.050 --> 24:34.550
在对象里面有insult方法吗

24:35.050 --> 24:35.950
是不是没有啊

24:36.850 --> 24:37.350
对吧

24:37.750 --> 24:39.850
那我们是不是得在它导出之前

24:40.350 --> 24:41.650
先写一个insult方法

24:41.650 --> 24:43.950
然后把这insult方法放到这里面来呀

24:44.250 --> 24:44.750
是吧

24:44.950 --> 24:45.350
ok

24:45.350 --> 24:46.850
那我们来写个insult方法

24:48.550 --> 24:49.750
等于这样的一个函数

24:49.750 --> 24:50.250
函数呢

24:50.250 --> 24:51.450
也去接受这样的一个view

24:52.750 --> 24:53.750
然后把它放到这

24:55.250 --> 24:55.750
ok

24:55.850 --> 24:56.750
那你说哈

24:56.750 --> 24:58.850
我们去使用一个aliment

24:59.550 --> 25:00.950
那它是不是把这个

25:00.950 --> 25:03.350
aliment组建库里面的所有组件

25:03.350 --> 25:05.250
都放到我们的权局上了呀

25:05.750 --> 25:06.250
对吧

25:07.050 --> 25:08.150
那我们可以怎么办

25:08.450 --> 25:10.250
我们在这insult方法里面

25:10.950 --> 25:13.050
让权局上拥有这么多个组件

25:13.050 --> 25:13.950
可以怎么去做

25:14.750 --> 25:17.050
那是不是可以把这样的一些个组件

25:17.150 --> 25:18.150
都放到

25:19.250 --> 25:19.950
放到哪里

25:19.950 --> 25:21.250
放到数组里面去

25:21.250 --> 25:23.250
然后对这个数组进行是变例

25:23.250 --> 25:24.350
在变例的时候

25:25.350 --> 25:28.150
让这样的一个权局组件拥有这个组件

25:28.150 --> 25:29.050
是不是就可以了

25:29.150 --> 25:29.650
对吧

25:29.850 --> 25:30.250
ok

25:30.250 --> 25:31.450
打一个components

25:32.150 --> 25:32.750
准数组

25:32.750 --> 25:33.750
数组里面有肉

25:34.450 --> 25:35.350
还有这个code

25:36.750 --> 25:37.050
ok

25:37.050 --> 25:37.850
然后在这个

25:37.850 --> 25:38.750
在这个时候呢

25:38.750 --> 25:41.250
我们去调用它的一个方式方法

25:42.350 --> 25:42.950
然后呢

25:43.450 --> 25:44.850
再一个component

25:46.350 --> 25:49.050
这个时候就调用为有点component

25:49.350 --> 25:50.050
然后呢

25:50.150 --> 25:52.550
这个第一个参数是component和dm

25:52.550 --> 25:54.250
第二个参数是component

25:54.650 --> 25:55.050
对吧

25:55.050 --> 25:57.850
这样是不是就把所有的组件都放到权局上了呀

25:58.150 --> 25:59.050
那这个时候

25:59.250 --> 25:59.650
这个

25:59.750 --> 26:01.950
那这个时候这里面是不是就有insult呢

26:02.050 --> 26:03.850
你看它现在就可以去使用了

26:04.250 --> 26:05.350
没有任何的问题

26:05.650 --> 26:06.150
是吧

26:06.150 --> 26:06.650
ok

26:06.650 --> 26:07.350
那咱们呢

26:07.350 --> 26:08.450
再来试一下哈

26:08.450 --> 26:10.850
你看我们现在是直接去

26:10.950 --> 26:12.150
yos的一个element

26:12.650 --> 26:15.050
有说直接导入一个element这样的一个变量

26:15.150 --> 26:15.550
对吧

26:15.550 --> 26:17.650
那我们再导入它里面的

26:18.150 --> 26:19.250
这样的一个肉组件

26:20.450 --> 26:21.550
和code组件呢

26:22.550 --> 26:25.650
让这个vio去yos一个肉

26:26.450 --> 26:29.950
然后让vio去yos一个code

26:32.580 --> 26:33.680
来看一下啊

26:34.580 --> 26:35.480
说这样行不行

26:35.780 --> 26:37.180
你看首先就抱错了

26:37.580 --> 26:38.280
他说啊

26:38.580 --> 26:41.180
他不能读安德范的install

26:41.480 --> 26:42.580
哎你说哎

26:42.580 --> 26:44.780
这个肉组件里面和这个code组件里面

26:44.780 --> 26:46.480
不是都已经有insult了吗

26:47.580 --> 26:48.780
他怎么还读不到呢

26:49.380 --> 26:50.080
他说什么

26:50.180 --> 26:52.880
他说他读不到安德范的insult

26:52.980 --> 26:54.580
也就是说肉或者code

26:54.780 --> 26:56.480
他们两个有一个是安德范的

26:56.480 --> 26:57.880
或者两个都是安德范的

26:57.880 --> 26:59.280
那咱们来打印一下好吧

27:04.550 --> 27:05.450
等他一会啊

27:05.550 --> 27:07.150
你看这两个是安德范的

27:07.250 --> 27:07.950
为什么呀

27:08.150 --> 27:09.750
因为这块是默认导出的

27:09.850 --> 27:10.850
默认导出的时候

27:10.850 --> 27:13.150
你能用这个这种形式去接吗

27:13.350 --> 27:14.350
是不是不能用啊

27:14.450 --> 27:16.050
你得用一个变量去接吧

27:16.350 --> 27:17.850
用这种形式去接的

27:18.150 --> 27:20.850
是什么接的是用xpart导出的

27:22.050 --> 27:22.450
对吧

27:22.450 --> 27:23.550
那所以说在这里面

27:23.550 --> 27:25.250
我们不能只用默认导出

27:25.250 --> 27:27.750
我们还得用xpart进行一个导出

27:27.850 --> 27:28.350
好吧

27:28.750 --> 27:29.950
所以这块我们写两个

27:31.150 --> 27:32.450
这个时候我们再来看啊

27:32.850 --> 27:34.050
哎把这一删掉

27:34.250 --> 27:34.750
ok

27:35.850 --> 27:36.750
发现一下啊

27:38.350 --> 27:39.750
哎还不够抱错了呢

27:39.850 --> 27:40.750
哪有问题了

27:42.550 --> 27:43.250
让我刷新

27:43.550 --> 27:44.950
ok又出来了

27:45.250 --> 27:45.750
是吧

27:46.050 --> 27:48.250
你看这样是不是就可以了

27:48.250 --> 27:49.250
有说导出的时候呢

27:49.250 --> 27:50.450
我们用两种方式喊

27:50.550 --> 27:51.850
一种是默认导出

27:51.850 --> 27:53.650
一种是xpart的导出

27:54.350 --> 27:55.550
有说你默认导出的时候

27:55.550 --> 27:57.050
就可以直接把这所有的里面

27:57.050 --> 27:58.450
都放到一个变量里面聚了

27:58.850 --> 27:59.250
是吧

27:59.350 --> 28:01.350
这个是一个全部的一个导入

28:01.350 --> 28:02.450
那用这个xpart呢

28:02.450 --> 28:04.950
就相当于是一个暗虚的一个导入

28:05.150 --> 28:05.650
对吧

28:05.850 --> 28:06.250
ok

28:06.850 --> 28:08.750
那怎么样去写这样的一个

28:09.550 --> 28:10.350
导怎么导入

28:10.350 --> 28:12.350
以及怎么样去给全局注册组件

28:12.350 --> 28:13.350
你们都清楚了是吧

28:13.450 --> 28:14.050
咱们呢

28:14.350 --> 28:16.150
呃再把这个代码结构改一下

28:16.150 --> 28:18.150
哈我们像正常的去使用这个

28:18.150 --> 28:20.750
呃使用这样的一个iLim的插件一样哈

28:20.750 --> 28:23.950
在这个src里面去新建一个plugins

28:24.050 --> 28:25.050
这样的一个

28:25.750 --> 28:26.250
文件

28:27.050 --> 28:28.050
文件加上

28:28.050 --> 28:29.950
然后在这里面再来新建一个iLim

28:31.050 --> 28:31.750
点js

28:33.150 --> 28:35.650
好首先在这个iLim的点js里面

28:35.650 --> 28:38.550
我们需要去导入这些个组件是吧

28:39.250 --> 28:40.450
把这些组件导入进来

28:41.350 --> 28:43.050
那我们为了节省时间

28:43.050 --> 28:44.050
哈以后呢

28:44.050 --> 28:47.350
我们就不再去挨个的去试这个组件了

28:47.350 --> 28:49.650
我们就直接去使用一个iLim

28:50.050 --> 28:51.250
就全部去使用

28:51.350 --> 28:51.750
好吧

28:51.750 --> 28:53.450
这样的话我们以后再写一个组件

28:53.450 --> 28:55.450
就不用再去操作这一步了

28:55.450 --> 28:58.350
这块大家应该都清楚怎么样去去使用了吧

28:58.350 --> 29:01.150
就不用说是以后再去总去重复了

29:01.250 --> 29:01.650
是吧

29:02.550 --> 29:03.050
ok

29:03.150 --> 29:04.550
然后导入这个之后呢

29:04.550 --> 29:06.250
我们再去用这个

29:06.250 --> 29:08.450
呃vio去youse一下

29:08.850 --> 29:10.650
vioyouse这样的一个element

29:11.850 --> 29:12.350
ok

29:12.350 --> 29:14.150
那这块呢还需要用到vio

29:16.700 --> 29:17.400
element

29:18.700 --> 29:19.300
from

29:20.300 --> 29:21.000
哎不对对

29:21.500 --> 29:22.300
干嘛呢

29:23.100 --> 29:24.500
impose一个vio是吧

29:26.440 --> 29:27.040
ok

29:27.040 --> 29:27.740
然后呢

29:27.840 --> 29:29.140
使用这个组件的时候

29:29.140 --> 29:30.740
我们还需要把他的样式也搞

29:30.840 --> 29:31.840
导入进来哈

29:33.740 --> 29:34.240
ok

29:34.240 --> 29:35.740
然后呢咱们在这块

29:35.940 --> 29:37.740
在这个里面直接去导入这个

29:37.740 --> 29:40.240
呃element这样的一个文件就可以了是吧

29:40.440 --> 29:41.840
impose它是这样的一个

29:41.940 --> 29:44.640
当前部落下的plagging 下的element

29:44.940 --> 29:45.340
ok

29:45.340 --> 29:46.140
没有问题

29:46.340 --> 29:47.140
再来看一下

29:48.280 --> 29:49.040
等他一会儿

29:49.340 --> 29:51.540
你看这个时候就没有任何的问题了

29:51.540 --> 29:52.040
是吧

29:52.140 --> 29:52.740
ok啊

29:52.740 --> 29:55.040
呃那咱们这一颗其实要做的功能呢

29:55.040 --> 29:57.440
就是说去给他添加一个自订与的约速标签

29:57.440 --> 29:59.040
然后呢把我们这样的一个

29:59.240 --> 30:01.240
项目的一个目标整理一下

30:01.240 --> 30:02.240
然后呢再去

30:02.340 --> 30:04.940
写一下注册这样的一个全聚组件是吧

30:04.940 --> 30:07.540
呃那咱们下解课能要做的事情

30:07.640 --> 30:10.840
就是去重新的写下我们的sys

30:10.840 --> 30:12.540
比如说重新去写我们的sys啊

30:12.540 --> 30:15.140
你看咱们现在写的这个sys是什么呀

30:16.040 --> 30:16.740
是什么呀

30:16.940 --> 30:19.540
根本就没有用上任何的sys的一些函数

30:19.740 --> 30:21.840
真正像写sys一样去写

30:22.140 --> 30:23.640
没有任何的这样的一个

30:24.040 --> 30:24.440
嗯

30:25.040 --> 30:27.040
体现出来sys的一个减变是吧

30:27.040 --> 30:27.740
那确实哈

30:27.740 --> 30:29.940
比只写sys有减变那么一点

30:30.040 --> 30:31.140
但是没有体现出来

30:31.140 --> 30:32.340
他的也功能的强大

30:32.540 --> 30:33.640
那咱们下解课呢

30:33.740 --> 30:36.640
就重新的来写下这个sys

30:37.040 --> 30:37.540
好吧

30:37.740 --> 30:38.340
ok好

30:39.040 --> 30:41.540
那咱们下解课再继续去写哈

30:41.640 --> 30:43.340
呃那咱们还要再干净事情是吧

30:43.340 --> 30:46.040
不要忘记去去去提交代码是吧

30:46.240 --> 30:46.740
ok

30:47.040 --> 30:48.640
这个二的第二

30:48.740 --> 30:50.540
然后这层command

30:51.840 --> 30:52.540
高m

30:53.640 --> 30:55.840
第二章的第二节是吧

30:56.740 --> 30:57.040
ok

30:57.040 --> 30:58.540
然后咱们再铺实一下哈

30:58.840 --> 30:59.940
铺实到orange

30:59.940 --> 31:02.740
上到这个2.b点

31:03.540 --> 31:05.140
自定义元素

31:05.440 --> 31:06.040
标签

31:08.330 --> 31:09.530
等他一会哈

31:11.530 --> 31:12.130
看一下

31:15.160 --> 31:16.360
给完事了是吧

31:16.360 --> 31:18.060
你看这个已经过来了是吧

31:18.360 --> 31:19.260
过来了之后呢

31:19.260 --> 31:21.660
咱们再回到这样的一个主分之上

31:24.280 --> 31:25.980
check out master

31:27.180 --> 31:28.280
然后murr指一下哈

31:28.680 --> 31:31.880
murr指这样的一个2.b点

31:32.080 --> 31:34.380
自定义元素标签

31:36.080 --> 31:36.380
ok

31:36.380 --> 31:39.380
然后呢我们再去呃提交一下

31:40.080 --> 31:40.780
orange

31:41.980 --> 31:42.580
master

31:50.890 --> 31:51.290
ok

31:51.390 --> 31:53.290
然后咱来刷新一下哈看一下

31:55.480 --> 31:57.780
检查一下这里面的这个文件哈

31:58.280 --> 31:59.380
有没有ok哈

32:02.640 --> 32:04.840
这个现在网速可能有点慢

32:05.240 --> 32:05.840
ok好了

32:05.840 --> 32:07.640
我们来看一下也多没多说的一个

32:07.740 --> 32:10.040
plugins这样的一个文件价哎多出来了

32:10.140 --> 32:10.440
是吧

32:10.440 --> 32:12.440
证明没有任何问题我们提交成功了

32:12.440 --> 32:12.840
是吧

32:13.280 --> 32:13.940
ok哈

32:14.540 --> 32:16.540
那咱们这一刻就正式的结束了哈

32:16.540 --> 32:18.740
咱们下节课呢去来重新的写一下

32:18.740 --> 32:19.940
这样的一个sass

32:20.040 --> 32:20.440
ok

