WEBVTT

00:00.940 --> 00:03.940
在这几颗具体做练习之前

00:03.940 --> 00:07.440
我们先来给大家讲一个补充一个知识

00:07.440 --> 00:09.440
上一颗忘讲了一个知识

00:09.440 --> 00:10.940
一个小的知识点

00:10.940 --> 00:11.940
就说什么呢

00:11.940 --> 00:13.940
上一颗我们说到这么一个点

00:13.940 --> 00:14.940
给大家看一下

00:14.940 --> 00:19.510
index.js

00:19.510 --> 00:21.010
上一颗我们说

00:21.010 --> 00:24.510
如果说我们用require来导入一个包的话

00:24.510 --> 00:27.510
那么如果你写底儿写杠开头

00:27.510 --> 00:29.510
或者是底儿的写杠开头

00:29.510 --> 00:30.510
那么就表示什么

00:30.510 --> 00:33.510
表示的是导入我们自己写的模块

00:33.510 --> 00:35.510
如果你没有写底儿写杠

00:35.510 --> 00:36.510
或者是底儿写杠的话

00:36.510 --> 00:38.510
那么你就导入的是什么

00:38.510 --> 00:40.510
load-module-module下面的模块

00:40.510 --> 00:41.510
对吧

00:41.510 --> 00:43.510
我们上一颗是这样子说过的

00:43.510 --> 00:46.510
这里还其实还有一种特殊情况

00:46.510 --> 00:48.510
如果说你导入的模块

00:48.510 --> 00:50.510
是一个特殊的名字

00:50.510 --> 00:52.510
那么什么特殊的名字呢

00:52.510 --> 00:54.510
这个东西需要你们

00:54.510 --> 00:56.510
后边学习load.js的时候

00:56.510 --> 00:58.510
给你们详细介绍

00:58.510 --> 01:01.510
比方说我们这几颗要用到的一个模块

01:01.510 --> 01:02.510
叫做fs

01:02.510 --> 01:04.510
这就是个特殊的名字

01:04.510 --> 01:06.510
如果说你遇到了一些特殊的名字

01:06.510 --> 01:08.510
那么它既不会

01:08.510 --> 01:10.510
它不是从底儿写杠和底儿写杠开头

01:10.510 --> 01:12.510
潜力条件不是底儿写杠

01:12.510 --> 01:14.510
和底儿写杠开头

01:14.510 --> 01:15.510
那么这种情况下

01:15.510 --> 01:17.510
它又是个特殊的名字

01:17.510 --> 01:18.510
那么这个时候

01:18.510 --> 01:21.510
它使用的是load.js

01:21.510 --> 01:23.510
它自带的模块

01:23.510 --> 01:25.510
也就是说你安装到load.js之后

01:25.510 --> 01:27.510
它会给你默认

01:27.510 --> 01:29.510
装了一些模块在里边

01:29.510 --> 01:31.510
便于你操作一些东西

01:31.510 --> 01:33.510
那么我们把它叫做内置模块

01:33.510 --> 01:35.510
就是里边它已经包含了模块

01:35.510 --> 01:37.510
内置模块

01:37.510 --> 01:39.510
如果说你的模块的名字

01:39.510 --> 01:42.510
就是跟内置的模块是一样的

01:42.510 --> 01:43.510
这个时候呢

01:43.510 --> 01:45.510
它既不会去找自己写的模块

01:45.510 --> 01:47.510
也不会去找load.majus

01:47.510 --> 01:48.510
目楼下的模块

01:48.510 --> 01:49.510
而去找什么

01:49.510 --> 01:51.510
而且直接把load.js

01:51.510 --> 01:53.510
内置的模块拿出来

01:53.510 --> 01:55.510
比方说我们这里拿到

01:55.510 --> 01:56.510
这个辨量名字

01:56.510 --> 01:58.510
这个辨量名字随便写

01:58.510 --> 01:59.510
输出fs

01:59.510 --> 02:01.510
好 咱们来看一下

02:01.510 --> 02:03.510
我们这里要用这种方式

02:03.510 --> 02:05.510
右键中端中打开

02:05.510 --> 02:08.510
load.index.js

02:08.510 --> 02:10.510
看一下 是不是能输出东西

02:10.510 --> 02:11.510
它里边又包含了

02:11.510 --> 02:13.510
它是个对象 包含了很多东西

02:13.510 --> 02:14.510
那么我们现在来试一下

02:14.510 --> 02:16.510
如果说我们在这里新建个文件夹

02:16.510 --> 02:18.510
load.majus

02:18.510 --> 02:20.510
然后在这个文件夹里边

02:20.510 --> 02:22.510
去新建一个文件

02:22.510 --> 02:24.510
fs.js

02:24.510 --> 02:26.510
我们这里用majus

02:26.510 --> 02:28.510
export

02:28.510 --> 02:29.510
一个对象

02:29.510 --> 02:30.510
一个空对象

02:30.510 --> 02:32.510
好 咱们来看一下

02:32.510 --> 02:34.510
我们现在requirefs

02:34.510 --> 02:35.510
按照我们上节课说的

02:35.510 --> 02:37.510
应该是导入了这个东西

02:37.510 --> 02:38.510
load.majus目楼下面的

02:38.510 --> 02:39.510
fs.js

02:39.510 --> 02:40.510
应该导入了这个东西

02:40.510 --> 02:41.510
那么我们来看一下

02:41.510 --> 02:42.510
是不是导入了这个东西

02:42.510 --> 02:43.510
我们再来运行一次

02:43.510 --> 02:45.510
是不是还是有这么多东西

02:45.510 --> 02:46.510
说明啥

02:46.510 --> 02:48.510
说明 如果说你的模块

02:48.510 --> 02:49.510
是内置模块的话

02:49.510 --> 02:51.510
那么它不会从load.majus

02:51.510 --> 02:52.510
里面去寻找

02:52.510 --> 02:54.510
直接把load.majus的模块

02:54.510 --> 02:55.510
拿出来就行了

02:55.510 --> 02:56.510
load.majus里面

02:56.510 --> 02:58.510
其实有很多的内置模块

02:58.510 --> 02:59.510
你们以后学新load.majus的时候

02:59.510 --> 03:01.510
会具体的学习

03:01.510 --> 03:03.510
这就是我给大家补充了一个点

03:03.510 --> 03:04.510
好 接下来

03:04.510 --> 03:06.510
我们再说回到这几课

03:08.510 --> 03:10.510
删除了

03:10.510 --> 03:11.510
说回到这几课

03:11.510 --> 03:13.510
这几课咱们要做什么呢

03:13.510 --> 03:15.510
做一个简单的数据划从

03:15.510 --> 03:17.510
通过做这么一个练习

03:17.510 --> 03:19.510
让大家体会到NPM

03:19.510 --> 03:21.510
给我们开发带来的便利

03:21.510 --> 03:22.510
因为我们的开发过程中

03:22.510 --> 03:23.510
肯定是少不了

03:23.510 --> 03:25.510
要用到很多的第三方库

03:25.510 --> 03:26.510
那么要用到第三方库的时候

03:26.510 --> 03:28.510
使用NPM来进行安装

03:28.510 --> 03:30.510
是非常非常方便的

03:30.510 --> 03:32.510
当然环境肯定是load.jus环境

03:32.510 --> 03:34.510
什么叫做数据划从呢

03:34.510 --> 03:36.510
大家都用过百度

03:36.510 --> 03:37.510
用过谷歌

03:37.510 --> 03:39.510
那么像这些搜索引擎

03:39.510 --> 03:40.510
他们的

03:40.510 --> 03:41.510
这些搜度的

03:41.510 --> 03:43.510
这些网站的数据哪来的呢

03:43.510 --> 03:45.510
他们是通过一个程序

03:45.510 --> 03:47.510
这个程序就叫做划从

03:47.510 --> 03:48.510
那么通过这个程序

03:48.510 --> 03:50.510
从互联网上

03:50.510 --> 03:52.510
去找到一个一个的页面

03:52.510 --> 03:54.510
把这些页面的信息提取出来

03:54.510 --> 03:56.510
把它抓取到

03:56.510 --> 03:58.510
然后放到自己的数据库文件里面去

03:58.510 --> 04:00.510
它是这么来操作的

04:00.510 --> 04:01.510
那么我们这就可能要

04:01.510 --> 04:03.510
实现类似于这么一个功能

04:03.510 --> 04:04.510
当然实现的比较简单

04:04.510 --> 04:06.510
真正的搜索引擎要复杂得多

04:06.510 --> 04:08.510
咱们来实现一个

04:08.510 --> 04:09.510
实现什么呢

04:09.510 --> 04:10.510
我们要把豆瓣电影

04:10.510 --> 04:12.510
以前我是给大家演示的

04:12.510 --> 04:14.510
抓取猫眼电影

04:14.510 --> 04:16.510
但是猫眼电影现在好像

04:16.510 --> 04:18.510
我刚才试了一下

04:18.510 --> 04:20.510
我们把那个数据抓取给屏蔽了

04:20.510 --> 04:21.510
所以说呢

04:21.510 --> 04:23.510
不是那么容易抓取得到了

04:23.510 --> 04:26.510
我们这里就换成豆瓣电影吧

04:26.510 --> 04:28.510
我们要把豆瓣电影的数据

04:28.510 --> 04:30.510
抓取下来保存到本地文件

04:30.510 --> 04:31.510
这个文件中

04:31.510 --> 04:33.510
也就是说我们要进入什么呢

04:33.510 --> 04:35.510
进入一个网站

04:35.510 --> 04:37.510
豆瓣

04:37.510 --> 04:38.510
进入哪个网站呢

04:38.510 --> 04:40.510
我们这里点电影

04:40.510 --> 04:42.510
电影里面一个排行吧

04:42.510 --> 04:43.510
OK

04:43.510 --> 04:45.510
我们就把这个页面里面的所有电影

04:45.510 --> 04:46.510
其实也不多

04:46.510 --> 04:48.510
也就这么几步

04:48.510 --> 04:50.510
把这个页面里面的所有电影

04:50.510 --> 04:51.510
抓取出来

04:51.510 --> 04:52.510
好,每一个电影

04:52.510 --> 04:53.510
它里面不是有些信息吗

04:53.510 --> 04:54.510
对不对

04:54.510 --> 04:55.510
不是有些信息

04:55.510 --> 04:57.510
我们还可以进入这个页面去

04:57.510 --> 04:59.510
详细看它的详细信息

04:59.510 --> 05:00.510
对吧

05:00.510 --> 05:02.510
那么我们可以把每一部电影

05:02.510 --> 05:04.510
全部抓取到

05:04.510 --> 05:05.510
好,那么首先呢

05:05.510 --> 05:07.510
我们来完成这个效果

05:07.510 --> 05:08.510
先不着急

05:08.510 --> 05:09.510
你们肯定是

05:09.510 --> 05:10.510
现在肯定是没有思路的

05:10.510 --> 05:11.510
以后呢

05:11.510 --> 05:12.510
我会给大家介绍一下

05:12.510 --> 05:13.510
怎么来做

05:13.510 --> 05:14.510
听就行了

05:14.510 --> 05:15.510
现在我们首先呢

05:15.510 --> 05:17.510
对这个工程进行初始化

05:18.510 --> 05:19.510
进行初始化

05:19.510 --> 05:20.510
npm init

05:25.080 --> 05:26.080
chapter2

05:27.080 --> 05:28.080
全部默认吧

05:29.080 --> 05:30.080
进行初始化

05:30.080 --> 05:32.080
生成一个配置文件

05:32.080 --> 05:33.080
然后呢

05:33.080 --> 05:35.080
接下来我们要做的事情是什么呢

05:35.080 --> 05:36.080
我们要干嘛呢

05:36.080 --> 05:38.080
我们要访问这个地址

05:39.080 --> 05:42.080
通过一段代码去访问这个地址

05:42.080 --> 05:43.080
访问这个地址过后

05:43.080 --> 05:44.080
能得到什么呢

05:44.080 --> 05:45.080
得到服务器

05:45.080 --> 05:46.080
得到斗办服务器

05:46.080 --> 05:47.080
给我们的响应结果

05:47.080 --> 05:48.080
响应结果就是这个

05:48.080 --> 05:50.080
就是个ATM代码

05:50.080 --> 05:51.080
对吧

05:51.080 --> 05:52.080
就是这个制服串

05:52.080 --> 05:53.080
这是个很大的制服串

05:53.080 --> 05:55.080
得到它这么一个响应结果

05:56.080 --> 05:57.080
那么有人说

05:57.080 --> 05:58.080
这个东西是不是阿加克斯

05:58.080 --> 05:59.080
它不是阿加克斯

05:59.080 --> 06:01.080
就是一个普通的网络琴球

06:01.080 --> 06:02.080
应该这样子说

06:02.080 --> 06:03.080
阿加克斯呢

06:03.080 --> 06:05.080
是在浏览器端

06:05.080 --> 06:08.080
进行的一种特殊的网络琴球

06:09.080 --> 06:10.080
那么现在呢

06:10.080 --> 06:11.080
我们不在浏览器端了

06:11.080 --> 06:12.080
是在漏的环境里边

06:12.080 --> 06:13.080
漏的环境

06:13.080 --> 06:14.080
就是整个计算机环境

06:14.080 --> 06:15.080
整个计算机环境

06:15.080 --> 06:17.080
肯定是可以做更多的事情

06:17.080 --> 06:19.080
那么它也可以自然而然

06:19.080 --> 06:21.080
也可以发送一个网络琴球

06:21.080 --> 06:23.080
我们请求这个地址

06:23.080 --> 06:24.080
请求这个地址

06:24.080 --> 06:25.080
得到这个地址

06:25.080 --> 06:27.080
给我们响应的这个元代码

06:27.080 --> 06:28.080
那么这个

06:28.080 --> 06:29.080
把这个ATM元代码

06:29.080 --> 06:30.080
里边的数据呢

06:30.080 --> 06:31.080
提取出来

06:31.080 --> 06:32.080
那么是不是就是

06:32.080 --> 06:34.080
我们的一些想要的信息了

06:34.080 --> 06:35.080
对吧

06:35.080 --> 06:36.080
我们就要

06:36.080 --> 06:37.080
实现这么一个操作

06:37.080 --> 06:39.080
明儿的意思吗

06:39.080 --> 06:40.080
好

06:40.080 --> 06:41.080
那么现在问题就

06:41.080 --> 06:42.080
转换成了什么呢

06:42.080 --> 06:45.080
我们怎么样去发送一个网络琴球呢

06:45.080 --> 06:46.080
你能不能直接在

06:46.080 --> 06:48.080
漏的监视里边写代码来发送呢

06:48.080 --> 06:49.080
可以

06:49.080 --> 06:50.080
只不过大家不会

06:50.080 --> 06:51.080
而且就算会的话

06:51.080 --> 06:52.080
大家也知道

06:52.080 --> 06:53.080
后边里面会学习

06:53.080 --> 06:54.080
也知道这东西

06:54.080 --> 06:55.080
是非常麻烦的一件事

06:55.080 --> 06:56.080
因此呢

06:56.080 --> 06:57.080
我们这里通常会

06:57.080 --> 06:59.080
使用一些第三方库

06:59.080 --> 07:00.080
那么这里呢

07:00.080 --> 07:01.080
给大家介绍一个第三方库

07:01.080 --> 07:02.080
叫做Axis

07:02.080 --> 07:03.080
那么使用这个库呢

07:03.080 --> 07:05.080
就可以非常非常轻松的

07:05.080 --> 07:07.080
发送网络琴球了

07:07.080 --> 07:08.080
那么并且的

07:08.080 --> 07:10.080
可以拿到服务的响应结果

07:10.080 --> 07:11.080
这个库呢

07:11.080 --> 07:12.080
好处在于

07:12.080 --> 07:14.080
它可以在各种环境中使用

07:14.080 --> 07:16.080
它可以在浏览器里边使用

07:16.080 --> 07:17.080
浏览器里边使用的

07:17.080 --> 07:18.080
它就是阿迦克斯

07:18.080 --> 07:19.080
它可以在漏的里边使用

07:19.080 --> 07:20.080
漏的里边使用的话

07:20.080 --> 07:22.080
它就是一个简单的网络琴球

07:22.080 --> 07:23.080
一个普通的网络琴球

07:23.080 --> 07:25.080
我们就可以使用这个库就行了

07:25.080 --> 07:26.080
那么怎么安装

07:26.080 --> 07:27.080
我都不用去进它

07:27.080 --> 07:28.080
不用去摆渡

07:28.080 --> 07:29.080
也不用去看什么官方网站

07:29.080 --> 07:31.080
直接NPM

07:31.080 --> 07:32.080
一个小时

07:32.080 --> 07:33.080
对吧

07:33.080 --> 07:34.080
就安装了

07:34.080 --> 07:35.080
有一个人说

07:35.080 --> 07:36.080
老老师

07:36.080 --> 07:37.080
我怎么知道有这么一个库呢

07:37.080 --> 07:38.080
我不知道

07:38.080 --> 07:39.080
你知道我不知道

07:39.080 --> 07:41.080
我不是在焦力吗

07:41.080 --> 07:42.080
我就在焦力

07:42.080 --> 07:43.080
像我们后边

07:43.080 --> 07:45.080
很多的一些练习

07:45.080 --> 07:47.080
我会给大家介绍一些常见的库

07:47.080 --> 07:48.080
那么这些库

07:48.080 --> 07:50.080
并不会专门拿课程来说

07:50.080 --> 07:52.080
不说说我专门拿个课程来介绍

07:52.080 --> 07:53.080
一个小时

07:53.080 --> 07:54.080
没这个必要

07:54.080 --> 07:56.080
这些库都很简单

07:56.080 --> 07:57.080
而且平时

07:57.080 --> 07:59.080
我们都是使用它最基本的功能

07:59.080 --> 08:01.080
让大家了解有这些库存在就行了

08:01.080 --> 08:04.080
因为NPM上有很多很多的库

08:04.080 --> 08:05.080
有几十万个库

08:05.080 --> 08:06.080
我不可能全部安装了讲完

08:06.080 --> 08:08.080
把每个库的细致没解决

08:08.080 --> 08:09.080
没有这个必要

08:09.080 --> 08:11.080
这样子学习的东西太长了

08:11.080 --> 08:12.080
我们只需要知道

08:12.080 --> 08:14.080
我们平时用的能够有哪些库

08:14.080 --> 08:16.080
每个库能解决什么样的问题

08:16.080 --> 08:17.080
将来你们在工作中

08:17.080 --> 08:19.080
如果说遇到了一些特殊的需求

08:19.080 --> 08:21.080
它的基本用法已经解决不了了

08:21.080 --> 08:23.080
那么你可以去那个库里边去查找

08:23.080 --> 08:24.080
看它的文档

08:24.080 --> 08:26.080
看它具体怎么去使用

08:26.080 --> 08:28.080
比方说这个X小时库

08:28.080 --> 08:30.080
那怎么去使用呢

08:30.080 --> 08:32.080
你可以看它的文档

08:32.080 --> 08:34.080
NPM的官网上来

08:34.080 --> 08:36.080
查询这个X小时

08:36.080 --> 08:37.080
进去

08:39.080 --> 08:41.080
一般来说

08:41.080 --> 08:44.080
它的在NPM介石上

08:44.080 --> 08:46.080
一般就有它的说明文档

08:46.080 --> 08:47.080
说明文档一般就在这

08:47.080 --> 08:49.080
如果说有些

08:49.080 --> 08:51.080
可能有些特殊的库

08:51.080 --> 08:53.080
它的说明文档可能要分目录

08:53.080 --> 08:54.080
很长很长

08:54.080 --> 08:56.080
那么这里可能它不会放

08:56.080 --> 08:57.080
那么它一般会给你一个链接

08:57.080 --> 08:58.080
让你进入那个链接

08:58.080 --> 08:59.080
进入它的官网

08:59.080 --> 09:01.080
或者是github地址

09:01.080 --> 09:03.080
来去查看它的

09:03.080 --> 09:04.080
详细说明

09:04.080 --> 09:06.080
比方说像这个X小时库

09:06.080 --> 09:07.080
这里是不是有Homepage

09:07.080 --> 09:08.080
对吧

09:08.080 --> 09:09.080
它的官网地址

09:09.080 --> 09:11.080
和它的仓库地址

09:11.080 --> 09:13.080
就是地址仓库地址在这

09:13.080 --> 09:14.080
这就是我提示我们说

09:14.080 --> 09:15.080
你要发布一个包

09:15.080 --> 09:17.080
是不是要填一些配置文件

09:17.080 --> 09:19.080
配置文件里面的一些信息要全

09:19.080 --> 09:21.080
什么官网地址

09:21.080 --> 09:23.080
什么就是github的地址

09:23.080 --> 09:24.080
是不是

09:24.080 --> 09:25.080
它都可以放在这

09:25.080 --> 09:26.080
那么它就会在NPM上

09:26.080 --> 09:28.080
这样子显示出来

09:28.080 --> 09:30.080
那么这里它本身就有说明

09:30.080 --> 09:31.080
对吧

09:31.080 --> 09:32.080
然后前面给你说明了

09:32.080 --> 09:33.080
怎么安装

09:33.080 --> 09:34.080
那么接下来

09:34.080 --> 09:35.080
我们来看一下

09:35.080 --> 09:36.080
怎么来用

09:36.080 --> 09:37.080
其实你看

09:37.080 --> 09:39.080
其实很多基本用法的话

09:39.080 --> 09:41.080
你看一下它这个

09:41.080 --> 09:43.080
例子也就明白了

09:43.080 --> 09:44.080
怎么用呢

09:44.080 --> 09:45.080
先导入进来

09:45.080 --> 09:46.080
看没

09:46.080 --> 09:47.080
所以先导入进来

09:47.080 --> 09:48.080
导入进来之后

09:48.080 --> 09:50.080
然后发送一个github请求

09:50.080 --> 09:51.080
你看这里就是

09:51.080 --> 09:52.080
如何来发送一个github请求

09:52.080 --> 09:53.080
是个例子

09:53.080 --> 09:55.080
发送一个github请求

09:55.080 --> 09:56.080
这里是不是请求地址

09:56.080 --> 09:57.080
对吧

09:57.080 --> 09:58.080
请求地址

09:58.080 --> 09:59.080
然后后面

10:01.080 --> 10:02.080
它使用了Rin

10:02.080 --> 10:03.080
说明啥

10:03.080 --> 10:04.080
说明这个玩意是啥

10:05.080 --> 10:06.080
这个玩意是啥

10:06.080 --> 10:08.080
是不是一个promise

10:08.080 --> 10:09.080
对不对

10:09.080 --> 10:11.080
那咱们就来试一下

10:11.080 --> 10:12.080
咱们就来试一下

10:12.080 --> 10:14.080
我们这里写个异步函数

10:14.080 --> 10:15.080
test

10:18.080 --> 10:19.080
比方说

10:19.080 --> 10:22.080
我们使用exus来发送一个请求

10:22.080 --> 10:24.080
exus

10:24.080 --> 10:26.080
require

10:26.080 --> 10:28.080
exus

10:29.080 --> 10:31.080
我们使用它来发送个请求

10:31.080 --> 10:32.080
github

10:32.080 --> 10:33.080
请求什么地址

10:33.080 --> 10:35.080
我们这里去请求一个豆瓣

10:35.080 --> 10:36.080
豆瓣这个地址

10:37.080 --> 10:38.080
请求这个地址

10:38.080 --> 10:39.080
好

10:39.080 --> 10:41.080
不存在跨域问题

10:41.080 --> 10:43.080
有同学说要不要存在跨域问题

10:43.080 --> 10:45.080
跨域问题是浏览其端的

10:45.080 --> 10:47.080
跟豆的环境没有任何关系

10:47.080 --> 10:48.080
不存在跨域问题

10:48.080 --> 10:49.080
就请求这个地址

10:49.080 --> 10:51.080
那么它得到的是一个promise

10:51.080 --> 10:53.080
那么promise是不是可以等待

10:53.080 --> 10:54.080
而wait

10:54.080 --> 10:55.080
等待

10:55.080 --> 10:56.080
等待完成之后

10:56.080 --> 10:58.080
是不是可以达到一个响应结果

10:58.080 --> 10:59.080
对吧

10:59.080 --> 11:01.080
它这里地址里面都已经可以说明了

11:01.080 --> 11:02.080
你看吧

11:02.080 --> 11:03.080
是不是可以拿到一个响应

11:03.080 --> 11:04.080
响应对象

11:04.080 --> 11:05.080
对吧

11:05.080 --> 11:06.080
这个响应对象

11:06.080 --> 11:07.080
那么

11:07.080 --> 11:08.080
如果说你下面

11:08.080 --> 11:09.080
会不会继续看文档的话

11:09.080 --> 11:10.080
还会告诉你

11:10.080 --> 11:11.080
这个响应对象里边

11:11.080 --> 11:13.080
有一个属性就是data

11:13.080 --> 11:14.080
包括响应头

11:14.080 --> 11:16.080
包括响应的状态码

11:16.080 --> 11:18.080
包括响应的状态文本等等

11:18.080 --> 11:19.080
都有很多的信息

11:19.080 --> 11:20.080
其中有一个数据

11:20.080 --> 11:22.080
有一个属性的就是data

11:22.080 --> 11:23.080
这个表示什么意思

11:23.080 --> 11:25.080
表示获取服务器的响应

11:25.080 --> 11:27.080
响应的消息体

11:27.080 --> 11:28.080
这个data属性表示

11:28.080 --> 11:30.080
服务器响应的消息体

11:30.080 --> 11:32.080
好 咱们拿到包底

11:32.080 --> 11:33.080
输出这个包底

11:33.080 --> 11:34.080
咱们来看一下

11:37.080 --> 11:38.080
这里呢

11:38.080 --> 11:39.080
我们看一下

11:39.080 --> 11:43.030
运行这个task

11:43.030 --> 11:46.030
我们这里loadindex.json

11:46.030 --> 11:48.030
好 你看一下

11:48.030 --> 11:49.030
仔细看

11:49.030 --> 11:51.030
拿到的是啥了

11:51.030 --> 11:52.030
拿到的是不是

11:52.030 --> 11:53.030
就是一个Atm元代

11:53.030 --> 11:54.030
对吧

11:54.030 --> 11:55.030
它把它形成一个字无串

11:55.030 --> 11:56.030
我们这里输出

11:56.030 --> 11:57.030
再输出一个这个

11:57.030 --> 11:59.030
再输出一个Type

11:59.030 --> 12:00.030
Type

12:00.030 --> 12:01.030
包底

12:01.030 --> 12:03.030
是不是就拿到一个字无串了

12:03.030 --> 12:04.030
你看看

12:04.030 --> 12:05.030
是不是拿到一个字无串

12:05.030 --> 12:06.030
对吧

12:06.030 --> 12:07.030
一个很长很长的字无串

12:07.030 --> 12:08.030
对不对

12:08.030 --> 12:09.030
就拿到这么个东西了

12:09.030 --> 12:10.030
拿到这么个东西

12:10.030 --> 12:12.030
里边是不是就有电影数据了

12:12.030 --> 12:13.030
对吧

12:13.030 --> 12:14.030
是不是就有电影数据了

12:14.030 --> 12:15.030
那么我们就可以分析

12:15.030 --> 12:16.030
这个字无串里边的东西

12:16.030 --> 12:17.030
把电影的数据拿到

12:17.030 --> 12:18.030
对不对

12:18.030 --> 12:19.030
没问题吧

12:19.030 --> 12:20.030
好

12:20.030 --> 12:21.030
那么我们来专门来写个

12:21.030 --> 12:22.030
我们自己来

12:22.030 --> 12:23.030
专门来写个模块

12:23.030 --> 12:24.030
来解决这样的问题

12:24.030 --> 12:25.030
比方说我们这里

12:25.030 --> 12:27.030
写个模块叫get movies

12:27.030 --> 12:29.030
叫json

12:29.030 --> 12:30.030
好

12:30.030 --> 12:31.030
我们这里边

12:31.030 --> 12:33.030
写上这么一个

12:33.030 --> 12:34.030
首先写这么一个函数

12:34.030 --> 12:37.030
来达到一个完整的atm

12:38.030 --> 12:41.030
get movie atm

12:41.030 --> 12:45.340
movies atm

12:45.340 --> 12:46.340
对

12:46.340 --> 12:48.340
我们打个数字

12:48.340 --> 12:49.340
这什么意思呢

12:49.340 --> 12:51.340
得到一个

12:51.340 --> 12:56.340
得到所有电影的atm

12:56.340 --> 12:57.340
字无串

12:57.340 --> 12:58.340
得到所有电影

12:58.340 --> 13:00.340
就这个页面

13:00.340 --> 13:01.340
就这个页面

13:01.340 --> 13:02.340
得到这个页面的

13:02.340 --> 13:03.340
整个atm字无串

13:03.340 --> 13:05.340
这边你把刚才代码写一遍

13:05.340 --> 13:06.340
我们再来一次吧

13:06.340 --> 13:07.340
再写一次

13:09.340 --> 13:10.340
首先我们这里

13:10.340 --> 13:11.340
用exus

13:12.340 --> 13:13.340
require

13:13.340 --> 13:14.340
exus

13:15.340 --> 13:16.340
然后我们这里

13:16.340 --> 13:18.340
用exus来请求

13:18.340 --> 13:19.340
发送一个get请求

13:19.340 --> 13:20.340
请求哪个地址呢

13:20.340 --> 13:21.340
请求这个地址

13:21.340 --> 13:23.340
请求这个地址

13:23.340 --> 13:24.340
那么他返回的是一个promise

13:24.340 --> 13:25.340
对吧

13:25.340 --> 13:26.340
所以说我们等待他

13:26.340 --> 13:28.340
来拿到这个服务器的响应对象

13:28.340 --> 13:29.340
响应对象里边

13:29.340 --> 13:31.340
有个数据叫data

13:31.340 --> 13:32.340
我们直接把个data返回

13:32.340 --> 13:33.340
是不是就是我们的

13:33.340 --> 13:34.340
整个电影的atm

13:34.340 --> 13:35.340
对吧

13:35.340 --> 13:36.340
我们刚才已经测试过了

13:36.340 --> 13:37.340
现在不再重新写了

13:37.340 --> 13:39.340
就是一个电影的atm

13:39.340 --> 13:41.340
整个电影的atm文档

13:41.340 --> 13:42.340
那就完事了

13:42.340 --> 13:43.340
这个函数很简单

13:43.340 --> 13:44.340
好

13:44.340 --> 13:46.340
那么接下来我们再来看

13:46.340 --> 13:49.340
拿到了整个atm文档之后

13:49.340 --> 13:50.340
那么接下来

13:50.340 --> 13:51.340
我怎么来提取这个数据

13:51.340 --> 13:52.340
这个数据怎么提取呢

13:52.340 --> 13:53.340
你看一下

13:53.340 --> 13:54.340
我们再来刁人一次

13:54.340 --> 13:56.340
getsmoviesatm

13:56.340 --> 13:57.340
那么比方说

13:57.340 --> 13:58.340
我们这里写个函数

13:58.340 --> 14:01.340
写个函数来测试一下

14:01.340 --> 14:02.340
test

14:02.340 --> 14:03.340
我们这个函数

14:03.340 --> 14:05.340
我们首先调用

14:05.340 --> 14:07.340
调用上面这个函数

14:07.340 --> 14:08.340
await

14:08.340 --> 14:11.340
getsmoviesatm

14:11.340 --> 14:13.340
这样子就可以拿到

14:13.340 --> 14:14.340
整个电影数据了

14:14.340 --> 14:15.340
对吧

14:15.340 --> 14:17.340
整个电影的atm文档

14:17.340 --> 14:18.340
输出atm

14:18.340 --> 14:20.340
我们test运行一下

14:20.340 --> 14:21.340
能看到吗

14:21.340 --> 14:22.340
这个是es6的知识

14:22.340 --> 14:24.340
不要把之前的东西丢了

14:24.340 --> 14:25.340
很重要的

14:25.340 --> 14:27.340
clear

14:28.340 --> 14:29.340
getsmovies运行一下

14:29.340 --> 14:30.340
你看

14:30.340 --> 14:31.340
是不是还是可以拿到这个数据了

14:31.340 --> 14:32.340
对吧

14:32.340 --> 14:33.340
拿到这个atm文档了

14:33.340 --> 14:34.340
那么关键是

14:34.340 --> 14:35.340
拿到这个atm文档之后

14:35.340 --> 14:36.340
我怎么来分析出

14:36.340 --> 14:37.340
电影数据了

14:37.340 --> 14:38.340
这是个问题

14:38.340 --> 14:40.340
因为它是一个很长的字无窗

14:40.340 --> 14:42.340
你要从字无窗里面

14:42.340 --> 14:43.340
如果说你要想办法的话

14:43.340 --> 14:44.340
肯定是有办法

14:44.340 --> 14:46.340
比方说用正的表达式

14:46.340 --> 14:47.340
对不对

14:47.340 --> 14:49.340
正的表达式就可以处理

14:49.340 --> 14:50.340
对不对

14:50.340 --> 14:51.340
但是是不是很麻烦

14:51.340 --> 14:52.340
要提去这个东西

14:52.340 --> 14:53.340
是不是很麻烦

14:53.340 --> 14:54.340
好

14:54.340 --> 14:55.340
那么接下来

14:55.340 --> 14:56.340
我又给大家介绍一个库

14:57.340 --> 14:58.340
就这么一个库

14:58.340 --> 14:59.340
这个库干嘛的呢

14:59.340 --> 15:00.340
喝口水

15:03.870 --> 15:04.870
大家想一想

15:05.870 --> 15:06.870
如果说

15:07.870 --> 15:09.870
我能够把这个atm的这个字无窗

15:11.870 --> 15:12.870
把它解析出来

15:12.870 --> 15:14.870
解析成一个Jquery对象

15:15.870 --> 15:16.870
你想一想

15:16.870 --> 15:17.870
那是不是就变得非常简单了

15:17.870 --> 15:19.870
因为Jquery对象里面

15:19.870 --> 15:20.870
有很多的提供了很多的方法

15:20.870 --> 15:22.870
能够把我们来处理这个

15:22.870 --> 15:24.870
来分析这个就是

15:24.870 --> 15:25.870
元素

15:25.870 --> 15:26.870
对不对

15:26.870 --> 15:27.870
那么这里呢

15:27.870 --> 15:28.870
但是Jquery

15:28.870 --> 15:30.870
它只能在浏览期段使用

15:30.870 --> 15:31.870
loader环境里边

15:31.870 --> 15:32.870
它没有多么元素

15:32.870 --> 15:33.870
它是用不了的

15:34.870 --> 15:35.870
但是有这么一个库

15:35.870 --> 15:36.870
叫做serial

15:36.870 --> 15:37.870
这个库呢

15:37.870 --> 15:38.870
它是把Jquery里面的

15:38.870 --> 15:39.870
核心逻辑

15:40.870 --> 15:41.870
提取的出来

15:41.870 --> 15:43.870
跟多无关的核心逻辑

15:43.870 --> 15:44.870
就不涉及到

15:44.870 --> 15:46.870
凡是不涉及到多么操作的

15:46.870 --> 15:48.870
比方说新建一个多么对象

15:48.870 --> 15:49.870
不涉及

15:49.870 --> 15:50.870
那么把它提取出来

15:50.870 --> 15:51.870
比方说

15:51.870 --> 15:53.870
把那个就是

15:53.870 --> 15:55.870
什么选择器这种

15:55.870 --> 15:57.870
就是从整个文档中

15:57.870 --> 15:59.870
通过选择器来获取的

15:59.870 --> 16:00.870
把这种跟多么对象

16:00.870 --> 16:02.870
相关的操作给它去掉

16:02.870 --> 16:04.870
只留下一些核心操作

16:05.870 --> 16:06.870
那么这样子呢

16:06.870 --> 16:07.870
它就可以支持各种环境了

16:07.870 --> 16:09.870
那么这个就是

16:09.870 --> 16:10.870
serial这个库

16:10.870 --> 16:11.870
那么这个库呢

16:11.870 --> 16:12.870
它就可以将一个

16:12.870 --> 16:13.870
atm制服串

16:13.870 --> 16:15.870
转换成一个Jquery对象

16:15.870 --> 16:16.870
给它一个atm制服串

16:16.870 --> 16:18.870
它把它转成Jquery对象

16:18.870 --> 16:19.870
然后通过Jquery对象

16:19.870 --> 16:20.870
来完成后期操作

16:20.870 --> 16:21.870
那么我们有了这个库

16:21.870 --> 16:22.870
就非常方便了

16:22.870 --> 16:23.870
好

16:23.870 --> 16:24.870
那么既然我们知道了

16:24.870 --> 16:25.870
有这么一个库

16:26.870 --> 16:27.870
好

16:27.870 --> 16:28.870
接下来安装

16:28.870 --> 16:29.870
MPMI

16:29.870 --> 16:30.870
安装哪个库呢

16:30.870 --> 16:31.870
serial

16:31.870 --> 16:34.310
安装它

16:34.310 --> 16:35.310
好

16:35.310 --> 16:36.310
让它安装

16:36.310 --> 16:37.310
安装好了

16:37.310 --> 16:38.310
其实你现在看一下

16:38.310 --> 16:39.310
loadable就是里面

16:39.310 --> 16:40.310
所以已经有很多了

16:40.310 --> 16:41.310
对吧

16:41.310 --> 16:42.310
它们就各自的依赖

16:42.310 --> 16:44.310
它们还依赖了一些别的库

16:44.310 --> 16:45.310
好

16:45.310 --> 16:46.310
安装好了之后

16:46.310 --> 16:48.310
我们怎么来使用呢

16:48.310 --> 16:49.310
怎么来使用呢

16:49.310 --> 16:50.310
我们这里是不是又查

16:50.310 --> 16:51.310
对吧

16:51.310 --> 16:52.310
又去查询

16:52.310 --> 16:54.310
查询这个serial

16:55.310 --> 16:56.310
回车

16:56.310 --> 16:57.310
好

16:57.310 --> 16:58.310
点进去

16:58.310 --> 16:59.310
就这个库呢

16:59.310 --> 17:00.310
用了也是蛮多的

17:00.310 --> 17:02.310
有三百多万的

17:02.310 --> 17:03.310
就下载量

17:03.310 --> 17:04.310
好

17:04.310 --> 17:05.310
看一下这个怎么用吧

17:05.310 --> 17:06.310
其实我们一般就看一下前面

17:06.310 --> 17:08.310
就知道它的基本用法了

17:08.310 --> 17:09.310
首先导入进来

17:09.310 --> 17:11.310
你看什么导入进来了

17:11.310 --> 17:12.310
导入进来了

17:12.310 --> 17:13.310
它应该是个对象

17:13.310 --> 17:14.310
对象里面

17:14.310 --> 17:16.310
有个提供了这么一个loader函数

17:16.310 --> 17:17.310
夹展

17:17.310 --> 17:18.310
loader函数

17:18.310 --> 17:19.310
你给它一个支部串

17:19.310 --> 17:20.310
你看

17:20.310 --> 17:21.310
它给它的是一个atm片段

17:21.310 --> 17:22.310
对吧

17:22.310 --> 17:23.310
给它一个atm片段的支部串

17:23.310 --> 17:24.310
那么返回的是什么呢

17:24.310 --> 17:25.310
返回的

17:25.310 --> 17:26.310
你看着这个符号就知道了

17:26.310 --> 17:27.310
返回了应该是什么

17:27.310 --> 17:28.310
一个接快率对象

17:28.310 --> 17:30.310
用个变量来接收就行了

17:30.310 --> 17:32.310
那么这个接快率对象里边

17:32.310 --> 17:34.310
它就可以使用这种模式

17:34.310 --> 17:35.310
是不是跟接快率是一样的

17:35.310 --> 17:36.310
对吧

17:36.310 --> 17:38.310
那么可以用这种模式来进行筛选

17:38.310 --> 17:40.310
来进行筛选

17:40.310 --> 17:41.310
没了意思吧

17:41.310 --> 17:42.310
好

17:42.310 --> 17:43.310
那么咱们来试一下吧

17:43.310 --> 17:44.310
好

17:44.310 --> 17:45.310
接下来我们再来写个函数

17:45.310 --> 17:46.310
就是把这个atm

17:46.310 --> 17:48.310
继续来进行分析

17:48.310 --> 17:49.310
我们再来写个函数

17:49.310 --> 17:51.750
继续来写函数

17:54.750 --> 17:55.750
sync

17:55.750 --> 17:56.750
方形

17:56.750 --> 17:58.750
这里我们写个函数

17:58.750 --> 18:00.750
叫做

18:02.750 --> 18:03.750
叫什么呢

18:03.750 --> 18:05.750
分析电影数据

18:05.750 --> 18:07.750
get movies

18:07.750 --> 18:08.750
data

18:08.750 --> 18:10.750
get movies data

18:10.750 --> 18:11.750
写上这么一个

18:11.750 --> 18:12.750
然后这个函数干嘛呢

18:12.750 --> 18:14.750
这个函数你给我一个atm

18:15.750 --> 18:17.750
你给我一个atm

18:17.750 --> 18:18.750
那么干嘛呢

18:18.750 --> 18:20.750
我要把这个atm分析成

18:20.750 --> 18:21.750
把它进行分析

18:21.750 --> 18:23.750
把它进行分析

18:23.750 --> 18:24.750
那么

18:24.750 --> 18:25.750
怎么来

18:25.750 --> 18:26.750
这个atm怎么来呢

18:26.750 --> 18:27.750
这个atm

18:27.750 --> 18:29.750
或者是我们这里不写atm

18:29.750 --> 18:30.750
我们直接调用这个函数

18:30.750 --> 18:31.750
是吧

18:31.750 --> 18:32.750
可以直接拿到这个atm

18:32.750 --> 18:33.750
对吧

18:33.750 --> 18:34.750
直接拿到了

18:34.750 --> 18:35.750
拿到之后干嘛呢

18:35.750 --> 18:36.750
是不是就把它分析出来

18:36.750 --> 18:37.750
那么我们是不是要用到

18:37.750 --> 18:39.750
这个chiril这个库

18:39.750 --> 18:40.750
对吧

18:40.750 --> 18:41.750
chiril

18:41.750 --> 18:42.750
require

18:43.750 --> 18:44.750
chiril

18:44.750 --> 18:45.750
用到这个库

18:45.750 --> 18:46.750
那么这个库怎么用呢

18:46.750 --> 18:47.750
看一下刚才写的

18:47.750 --> 18:48.750
这个库呢

18:48.750 --> 18:49.750
首先一个load

18:49.750 --> 18:50.750
load

18:50.750 --> 18:51.750
夹斩

18:51.750 --> 18:52.750
夹斩一个字母串

18:52.750 --> 18:53.750
那么我们夹在哪个字母串

18:53.750 --> 18:54.750
是不是夹在这个字母串

18:54.750 --> 18:55.750
对不对

18:55.750 --> 18:56.750
好我们来吧

18:56.750 --> 18:57.750
chiril

18:57.750 --> 18:58.750
load

18:58.750 --> 18:59.750
夹在这个atm

18:59.750 --> 19:00.750
字母串

19:00.750 --> 19:01.750
夹在网上过后

19:01.750 --> 19:02.750
是不是可以拿到一个

19:02.750 --> 19:03.750
接快乐对象

19:03.750 --> 19:04.750
对吧

19:04.750 --> 19:05.750
拿到一个接快乐对象

19:05.750 --> 19:06.750
那么接下来

19:06.750 --> 19:07.750
我们是不是可以用

19:07.750 --> 19:08.750
接快乐对象里面的选择器

19:08.750 --> 19:10.750
从这个里面去筛选

19:10.750 --> 19:12.750
筛选我们想要的内容

19:12.750 --> 19:13.750
对不对

19:13.750 --> 19:14.750
来吧

19:14.750 --> 19:15.750
我们来看一下

19:15.750 --> 19:16.750
我们能够筛选出啥

19:16.750 --> 19:17.750
多半电影排行

19:17.750 --> 19:18.750
我们来看一下这里边

19:18.750 --> 19:19.750
我们要许算一下

19:19.750 --> 19:21.750
出这里的一个一个的东西

19:21.750 --> 19:22.750
咱们来看一下

19:23.750 --> 19:24.750
这里是一个table

19:24.750 --> 19:26.750
一个tr

19:26.750 --> 19:28.750
一个tr class weight item

19:28.750 --> 19:30.750
class weight item

19:30.750 --> 19:32.750
然后呢这里有图片

19:32.750 --> 19:33.750
有这个什么什么玩意儿

19:33.750 --> 19:34.750
好那行

19:34.750 --> 19:35.750
那我们看一下

19:35.750 --> 19:36.750
是不是就可以拿

19:36.750 --> 19:37.750
我们要拿到的是啥

19:37.750 --> 19:39.750
拿到的不就是这个

19:39.750 --> 19:40.750
tr吗

19:40.750 --> 19:41.750
你看一下

19:41.750 --> 19:43.750
你看这是第一个电影

19:43.750 --> 19:46.510
这是第二个电影

19:46.510 --> 19:47.510
你看没

19:47.510 --> 19:48.510
是不是就是要拿到

19:48.510 --> 19:50.510
内名为item的

19:50.510 --> 19:51.510
这个tr

19:51.510 --> 19:52.510
是不是这个意思

19:52.510 --> 19:53.510
对吧

19:53.510 --> 19:54.510
那我们来试一下

19:54.510 --> 19:55.510
我们要拿啥

19:55.510 --> 19:58.510
拿tr内名为item

19:58.510 --> 19:59.510
是不是这样去拿

19:59.510 --> 20:01.510
那么它返回到一定是

20:01.510 --> 20:03.510
匹配到的所有结果对吧

20:03.510 --> 20:05.510
我们返回trs

20:05.510 --> 20:06.510
我们这里输出

20:06.510 --> 20:07.510
结款位里面

20:07.510 --> 20:08.510
它的nance

20:08.510 --> 20:09.510
它的长度是多少

20:09.510 --> 20:10.510
我们看一下

20:10.510 --> 20:11.510
这边的电影是多少

20:11.510 --> 20:12.510
这边的电影

20:12.510 --> 20:17.510
2 3 4 5 6 7 8 9 10

20:17.510 --> 20:18.510
10个电影

20:18.510 --> 20:19.510
那么如果说

20:19.510 --> 20:20.510
正常情况下呢

20:20.510 --> 20:21.510
测试一下

20:21.510 --> 20:23.510
那么它应该能够输出10

20:25.510 --> 20:27.510
获取所有电影数据

20:28.510 --> 20:30.510
它应该输出10

20:30.510 --> 20:33.460
运行

20:34.460 --> 20:35.460
是不是10

20:35.460 --> 20:36.460
对吧

20:36.460 --> 20:38.460
是不是把每一个tr拿到了

20:38.460 --> 20:39.460
没问题吧

20:39.460 --> 20:41.460
它就把每一个tr拿到了

20:41.460 --> 20:42.460
拿到之后呢

20:42.460 --> 20:43.460
它有这么多tr

20:43.460 --> 20:45.460
是不是现在可以循环了

20:45.460 --> 20:46.460
一个循环

20:46.460 --> 20:48.460
net

20:48.460 --> 20:50.460
循环str

20:50.460 --> 20:52.460
诶怎么写内次了

20:52.460 --> 20:54.460
这里应该写i

20:56.780 --> 20:58.780
循环每一个tr

20:58.780 --> 20:59.780
咱们拿

21:01.780 --> 21:03.780
是不是可以循环每一个tr

21:03.780 --> 21:05.780
trsi

21:05.780 --> 21:06.780
对吧

21:06.780 --> 21:07.780
好 咱们来输出这个tr

21:07.780 --> 21:08.780
看一下

21:18.330 --> 21:20.330
这样子应该不是输出

21:20.330 --> 21:21.330
得到的每一个

21:21.330 --> 21:22.330
这个每一个

21:22.330 --> 21:24.330
应该还是一个jQuery对象

21:24.330 --> 21:27.330
应该还是一个jQuery对象

21:27.330 --> 21:29.330
应该还是一个jQuery

21:29.330 --> 21:30.330
看一下

21:31.330 --> 21:33.330
好像是一个虚拟动物对象

21:33.330 --> 21:34.330
好像是一个虚拟动物对象

21:34.330 --> 21:35.330
没关系 没关系

21:35.330 --> 21:36.330
我们总之呢

21:36.330 --> 21:37.330
这样子循环

21:37.330 --> 21:39.330
是不是可以拿到每一个tr

21:39.330 --> 21:40.330
对不对

21:40.330 --> 21:42.330
是不是可以拿到每一个tr

21:42.330 --> 21:44.330
拿到了每一个tr之后

21:44.330 --> 21:46.330
我们现在就要做的事情就是

21:47.330 --> 21:51.330
分析每个tr的数据

21:51.330 --> 21:54.330
得到一部电影

21:54.330 --> 21:55.330
电影对象

21:55.330 --> 21:57.330
得到一部电影对象

21:57.330 --> 21:58.330
我们是不是要做这么一件事

21:58.330 --> 22:01.330
我们从jQuery里面

22:01.330 --> 22:02.330
相当于是

22:02.330 --> 22:03.330
我们就说jQuery吧

22:03.330 --> 22:06.330
大家知道是用cheryl就行了

22:06.330 --> 22:07.330
我们从jQuery对象里面

22:07.330 --> 22:09.330
拿到每一个tr

22:09.330 --> 22:10.330
那么我们现在要做的

22:10.330 --> 22:12.330
就是分析每一个tr数据

22:12.330 --> 22:13.330
得到一部电影对象

22:13.330 --> 22:14.330
对不对

22:14.330 --> 22:16.330
这件事我们也可以写成一个函数

22:16.330 --> 22:17.330
方个形

22:17.330 --> 22:20.330
不要说把它写成一部

22:20.330 --> 22:22.770
然后这里

22:26.770 --> 22:28.770
你给我一个tr

22:28.770 --> 22:30.770
我要做的事情是

22:30.770 --> 22:33.770
分析这个tr

22:33.770 --> 22:36.770
分析tr

22:36.770 --> 22:38.770
得到

22:38.770 --> 22:44.770
得到一部电影对象

22:45.770 --> 22:47.770
假设我们把函数写好了

22:47.770 --> 22:49.770
假设把它写好了

22:49.770 --> 22:50.770
我们把它写成一部

22:50.770 --> 22:52.770
因为这里肯定有些

22:52.770 --> 22:53.770
有些一部操作

22:53.770 --> 22:55.770
我们把假设把它写好了

22:55.770 --> 22:56.770
那么写好了过后

22:56.770 --> 22:57.770
怎么用呢

22:57.770 --> 22:58.770
你看一下这里是不是

22:58.770 --> 22:59.770
可以这样用了

22:59.770 --> 23:01.770
我们这里建立一个movement数组

23:01.770 --> 23:02.770
建立一个movement数组

23:02.770 --> 23:04.770
然后每循环一次

23:04.770 --> 23:05.770
是不是可以通过

23:05.770 --> 23:06.770
调用这个方法

23:06.770 --> 23:07.770
拿到一个电影对象

23:07.770 --> 23:08.770
对吧

23:08.770 --> 23:10.770
m await

23:10.770 --> 23:12.770
这个也成movie

23:12.770 --> 23:14.770
是不是把tr传进去

23:14.770 --> 23:16.770
拿到一个电影对象

23:16.770 --> 23:17.770
然后把这个电影对象

23:17.770 --> 23:19.770
加到这个数组里边

23:19.770 --> 23:21.770
m对吧

23:21.770 --> 23:22.770
然后最后

23:22.770 --> 23:23.770
返回这个电影对象

23:23.770 --> 23:25.770
你看这个结构是不是就出来了

23:25.770 --> 23:26.770
那么调用这个方法

23:26.770 --> 23:27.770
是不是就可以拿到

23:27.770 --> 23:28.770
所有的电影对象了

23:28.770 --> 23:29.770
没问题吧

23:29.770 --> 23:31.770
就可以写成这么一种结构了

23:31.770 --> 23:33.770
所以说现在的关键点

23:33.770 --> 23:34.770
就跑到这儿来了

23:34.770 --> 23:36.770
如何来根据tr

23:36.770 --> 23:38.770
tr来打到一部电影对象呢

23:38.770 --> 23:39.770
好

23:39.770 --> 23:40.770
我们要知道

23:40.770 --> 23:41.770
电影的

23:41.770 --> 23:42.770
我看一下我们拿什么东西

23:42.770 --> 23:44.770
我们就尽量简单一点

23:44.770 --> 23:45.770
尽量简单一点

23:45.770 --> 23:47.770
比方说我们这里

23:47.770 --> 23:48.770
要拿什么数据呢

23:48.770 --> 23:50.770
我们要拿他的

23:52.770 --> 23:53.770
拿他这个名字

23:53.770 --> 23:54.770
这个名字

23:55.770 --> 23:56.770
拿他这个名字

23:56.770 --> 23:57.770
这个名字里边

23:57.770 --> 23:58.770
我们只取第1个

23:58.770 --> 23:59.770
后边的我们不要

23:59.770 --> 24:00.770
比方说我们后边的不要

24:00.770 --> 24:01.770
我们就要用这个

24:01.770 --> 24:02.770
写抗分割

24:02.770 --> 24:03.770
只取第1个

24:03.770 --> 24:04.770
只取第1个名字

24:04.770 --> 24:05.770
那么这里呢

24:05.770 --> 24:07.770
我们要是不是都在tr里边

24:07.770 --> 24:08.770
对吧都在tr里边

24:08.770 --> 24:09.770
然后呢

24:09.770 --> 24:10.770
我们还要去拿什么呢

24:10.770 --> 24:11.770
拿这个图片

24:11.770 --> 24:12.770
我们还要去拿这个图片

24:13.770 --> 24:14.770
看一下啊

24:14.770 --> 24:16.770
我们还要去拿这个图片

24:16.770 --> 24:18.770
把这个图片也拿到

24:18.770 --> 24:20.770
也就把图片地址拿到

24:20.770 --> 24:22.770
把这个电影的名字拿到

24:22.770 --> 24:23.770
然后呢

24:23.770 --> 24:24.770
再去拿什么呢

24:24.770 --> 24:25.770
我看一下这个时间

24:25.770 --> 24:26.770
要不然去拿

24:26.770 --> 24:27.770
行吧啊

24:27.770 --> 24:28.770
这个时间

24:28.770 --> 24:29.770
要不然我们

24:29.770 --> 24:30.770
也去把拿

24:30.770 --> 24:31.770
把这一段拿

24:31.770 --> 24:32.770
拿到把这一段拿到

24:32.770 --> 24:34.770
我们把它当成电影的

24:34.770 --> 24:35.770
一些详情吧

24:35.770 --> 24:37.770
把电影的详情拿到

24:37.770 --> 24:38.770
我们就拿这3个

24:38.770 --> 24:39.770
就拿这3个

24:39.770 --> 24:40.770
一个是电影的名字

24:40.770 --> 24:41.770
一个是电影的图片

24:41.770 --> 24:42.770
一个是电影的详情

24:42.770 --> 24:43.770
其实呢

24:43.770 --> 24:44.770
按理说的话

24:44.770 --> 24:45.770
如果是真正的

24:45.770 --> 24:46.770
爬通的话

24:46.770 --> 24:47.770
它会进入这个链接

24:47.770 --> 24:48.770
它会再去请求

24:48.770 --> 24:49.770
这个链接

24:49.770 --> 24:50.770
在这个链接里边

24:50.770 --> 24:51.770
去拿具体的信息

24:51.770 --> 24:52.770
我们不用去做那么复杂了

24:52.770 --> 24:53.770
我们就简单的

24:53.770 --> 24:54.770
做一下就行了

24:54.770 --> 24:56.770
本来就是体验一下NPM

24:56.770 --> 24:57.770
不要走偏了

24:57.770 --> 24:58.770
我们就拿这3个

24:58.770 --> 24:59.770
那么我们现在

24:59.770 --> 25:00.770
是不是要分析这个tr

25:00.770 --> 25:01.770
对吧

25:01.770 --> 25:02.770
如果说只打这3个的话

25:02.770 --> 25:04.770
我倒是不用把它做成异部了

25:04.770 --> 25:06.770
我刚才把它做成异部的原因

25:06.770 --> 25:08.770
主要是为了

25:08.770 --> 25:09.770
主要的目的呢

25:09.770 --> 25:10.770
是为了还要进去

25:10.770 --> 25:12.770
进这个链接里边去拿

25:12.770 --> 25:14.770
那么没必要了

25:14.770 --> 25:15.770
不要去做那么复杂了

25:15.770 --> 25:17.770
我们就拿这个东西

25:17.770 --> 25:18.770
那么是不是要这个

25:18.770 --> 25:19.770
我们现在要去拿这些信息

25:19.770 --> 25:20.770
是不是要从这个tr

25:20.770 --> 25:21.770
开始分析

25:21.770 --> 25:22.770
对吧

25:22.770 --> 25:24.770
从tr开始分析

25:24.770 --> 25:25.770
那么这个tr

25:25.770 --> 25:26.770
我们可以认为是一个

25:26.770 --> 25:28.770
虚拟的动物对象

25:28.770 --> 25:29.770
它肯定不会是

25:29.770 --> 25:30.770
真正的动物对象

25:30.770 --> 25:31.770
对吧

25:31.770 --> 25:32.770
是结块位里面

25:32.770 --> 25:33.770
虚拟出来一个动物对象

25:33.770 --> 25:34.770
它不是结块位对象

25:34.770 --> 25:35.770
那么跟我们以前的

25:35.770 --> 25:36.770
逻辑是一样的

25:36.770 --> 25:37.770
是不是得把它

25:37.770 --> 25:39.770
转换成动物对象

25:39.770 --> 25:40.770
对不对

25:40.770 --> 25:41.770
是不是得把它

25:41.770 --> 25:42.770
转换成动物对象

25:42.770 --> 25:43.770
好

25:43.770 --> 25:44.770
那么咱们这里看一下

25:44.770 --> 25:45.770
看一下它这里边

25:45.770 --> 25:46.770
有没有什么

25:46.770 --> 25:49.770
方式能转换

25:49.770 --> 25:52.770
我看一下

25:52.770 --> 25:53.770
有没有什么

25:53.770 --> 25:58.850
方式能够转换

25:58.850 --> 26:01.850
我看一下这里

26:01.850 --> 26:03.850
load

26:03.850 --> 26:05.850
咱们试一下load

26:05.850 --> 26:06.850
如果不行的话

26:06.850 --> 26:07.850
我们到时候就试一下

26:07.850 --> 26:08.850
我先用这种方式来试一下

26:08.850 --> 26:09.850
我拿来去看文档了

26:09.850 --> 26:11.850
因为大部分时候

26:11.850 --> 26:13.850
它都是满足这种规范的

26:13.850 --> 26:14.850
我们在结块里面

26:14.850 --> 26:15.850
要把动物对象

26:15.850 --> 26:16.850
转换成结块对象

26:16.850 --> 26:17.850
是不是通过这种方式

26:17.850 --> 26:18.850
对吧

26:18.850 --> 26:19.850
通过这种方式

26:19.850 --> 26:20.850
就可以转换了

26:20.850 --> 26:21.850
对不对

26:21.850 --> 26:22.850
咱们来试一下

26:22.850 --> 26:23.850
把这种方式

26:23.850 --> 26:25.850
给它加进去

26:25.850 --> 26:26.850
把它转换成

26:26.850 --> 26:27.850
结块对象

26:27.850 --> 26:28.850
给它传过去

26:28.850 --> 26:29.850
那么这边

26:29.850 --> 26:30.850
我们就可以使用

26:30.850 --> 26:32.850
对象里面的fand

26:32.850 --> 26:34.850
继续往后边查找

26:34.850 --> 26:35.850
查找什么呢

26:35.850 --> 26:39.850
查找tr里面的

26:39.850 --> 26:41.850
首先找啥呀

26:41.850 --> 26:43.850
首先我们找电影名字吧

26:43.850 --> 26:44.850
看一下

26:44.850 --> 26:45.850
电影名字在哪

26:45.850 --> 26:49.540
把这个

26:49.540 --> 26:50.540
这样子

26:50.540 --> 26:51.540
放下来

26:51.540 --> 26:54.300
这样看得清楚一点

26:54.300 --> 26:55.300
放小一点

26:55.300 --> 26:57.300
这是tr

26:57.300 --> 26:59.300
我们要找tr

26:59.300 --> 27:01.300
下边的

27:01.300 --> 27:02.300
span

27:02.300 --> 27:04.300
span元素很多

27:04.300 --> 27:06.300
那么找tr

27:06.300 --> 27:07.300
下边的内名

27:07.300 --> 27:10.300
为pl2的

27:10.300 --> 27:15.300
span元素

27:15.300 --> 27:16.300
这个

27:16.300 --> 27:17.300
看一下

27:17.300 --> 27:18.300
找a元素的文本

27:18.300 --> 27:19.300
我们要找的是什么

27:19.300 --> 27:22.300
tr下面的

27:22.300 --> 27:24.300
这个

27:24.300 --> 27:25.300
pl2

27:25.300 --> 27:26.300
这个

27:26.300 --> 27:28.300
下面的a元素的文本

27:28.300 --> 27:29.300
好

27:29.300 --> 27:32.300
看到这个pl2下面的

27:32.300 --> 27:33.300
看一下有没有别的a元素

27:33.300 --> 27:35.300
不要引起混淆了

27:35.300 --> 27:36.300
没有了

27:36.300 --> 27:38.300
那么我们就找pl2下面的

27:38.300 --> 27:39.300
也就是我们找什么

27:39.300 --> 27:41.300
找的是pl2

27:41.300 --> 27:43.300
内名为pl2

27:43.300 --> 27:44.300
这个div

27:44.300 --> 27:45.300
下边的

27:45.300 --> 27:47.300
什么a元素

27:47.300 --> 27:49.300
它的什么文本

27:49.300 --> 27:50.300
咱们来得到一下

27:50.300 --> 27:51.300
看一下能不能得到

27:51.300 --> 27:54.300
这是电影的名称

27:54.300 --> 27:56.620
输出

27:56.620 --> 27:58.620
咱们来试一下

27:58.620 --> 28:04.910
看一下是不是能把所有的名字拿到

28:04.910 --> 28:06.910
解释

28:06.910 --> 28:07.910
是不是拿到了

28:07.910 --> 28:08.910
你看一下

28:08.910 --> 28:09.910
是不是能拿到

28:09.910 --> 28:10.910
对不对

28:10.910 --> 28:11.910
没问题吧

28:11.910 --> 28:13.910
你看是不是拿到了

28:13.910 --> 28:15.910
拿到了之后

28:15.910 --> 28:17.910
我们只取第1个

28:17.910 --> 28:19.910
就是按斜杠来分割

28:19.910 --> 28:20.910
分割出来过后

28:20.910 --> 28:22.910
只取第1个

28:22.910 --> 28:24.910
然后去掉

28:24.910 --> 28:25.910
换行空格

28:25.910 --> 28:26.910
这些东西全部去掉

28:26.910 --> 28:28.910
我们把换行空格

28:28.910 --> 28:30.910
空白制服全部去掉

28:30.910 --> 28:32.910
我们这里可以首先

28:32.910 --> 28:33.910
把name重新复制

28:33.910 --> 28:35.910
name replace

28:35.910 --> 28:37.910
去掉什么呢

28:37.910 --> 28:39.910
去掉

28:39.910 --> 28:44.180
真的表示

28:44.180 --> 28:46.180
把它替换成空白制服

28:46.180 --> 28:48.180
去掉所有的空白制服

28:48.180 --> 28:49.180
对不对

28:49.180 --> 28:51.180
去掉所有的空白制服

28:51.180 --> 28:52.180
应该是大写的s

28:52.180 --> 28:53.180
应该没记错

28:53.180 --> 28:54.180
去掉所有的空白制服

28:54.180 --> 29:00.120
咱们来试一下

29:00.120 --> 29:02.120
这个是去掉非空白

29:02.120 --> 29:04.120
小写的s

29:04.120 --> 29:05.120
你看

29:05.120 --> 29:07.120
我们把所有空白制服去掉了

29:07.120 --> 29:09.120
然后去掉空白制服之后

29:09.120 --> 29:11.120
去掉空白

29:11.120 --> 29:13.120
空白制服

29:13.120 --> 29:14.120
去掉空白制服之后

29:14.120 --> 29:16.120
我们把它按照来分割

29:16.120 --> 29:18.120
把name来进行分割

29:18.120 --> 29:20.120
split

29:20.120 --> 29:22.120
来分割

29:22.120 --> 29:23.120
按照什么分割

29:23.120 --> 29:24.120
按照斜杠的分割

29:24.120 --> 29:26.120
分割出来是不是取第1个

29:26.120 --> 29:28.120
分割出来的数组是不是取第1个

29:28.120 --> 29:29.120
作为它的名字

29:29.120 --> 29:33.070
咱们来试一下

29:33.070 --> 29:34.070
你看

29:34.070 --> 29:35.070
是吧

29:35.070 --> 29:36.070
名字拿到了

29:36.070 --> 29:37.070
对不对

29:37.070 --> 29:38.070
名字就拿到了

29:38.070 --> 29:39.070
好

29:39.070 --> 29:40.070
就拿到名字

29:40.070 --> 29:41.070
拿到名字之后

29:41.070 --> 29:42.070
我们还要做

29:42.070 --> 29:43.070
还要去拿什么

29:43.070 --> 29:44.070
拿图片对吧

29:44.070 --> 29:45.070
拿图片地址

29:45.070 --> 29:47.070
图片地址的话

29:47.070 --> 29:48.070
我们要去拿什么

29:48.070 --> 29:49.070
src

29:49.070 --> 29:50.070
我们看一下

29:50.070 --> 29:51.070
主要是看一下元代

29:51.070 --> 29:52.070
因为它图片有可能是兰家寨

29:52.070 --> 29:54.070
这些东西都是经验了

29:54.070 --> 29:55.070
它没有兰家寨

29:55.070 --> 29:56.070
OK

29:56.070 --> 29:57.070
而且直接拿src地址

29:57.070 --> 29:59.070
也就是我们在审核元素的时候

29:59.070 --> 30:00.070
它有可能会出现这种情况

30:00.070 --> 30:03.070
这些元素是用js给你加的

30:03.070 --> 30:04.070
这些元素是用js给你创建的

30:04.070 --> 30:06.070
所以说可能你在这里

30:06.070 --> 30:07.070
获取不到

30:07.070 --> 30:08.070
因为这里

30:08.070 --> 30:09.070
它只是能获取到

30:09.070 --> 30:10.070
页面上的元代码

30:10.070 --> 30:11.070
它不会运行js的

30:11.070 --> 30:12.070
所以说

30:12.070 --> 30:13.070
它这里

30:13.070 --> 30:14.070
我们

30:14.070 --> 30:15.070
既然它这里元代码里边有

30:15.070 --> 30:16.070
有这个东西

30:16.070 --> 30:17.070
OK

30:17.070 --> 30:18.070
我们就去拿

30:18.070 --> 30:19.070
src

30:19.070 --> 30:20.070
去拿这个地址

30:20.070 --> 30:22.070
这个图片在哪呢

30:22.070 --> 30:24.070
图片在下面的

30:24.070 --> 30:27.070
a元素的nbg

30:27.070 --> 30:29.070
这个内名

30:29.070 --> 30:30.070
好

30:30.070 --> 30:31.070
我现在拿图片

30:32.070 --> 30:34.070
imgsrc

30:35.070 --> 30:36.070
去找

30:36.070 --> 30:42.070
内名为a元素的nbg

30:42.070 --> 30:43.070
这个a元素

30:43.070 --> 30:45.070
a元素下面的img元素

30:46.070 --> 30:48.070
然后独取属性

30:48.070 --> 30:49.070
对吧

30:49.070 --> 30:51.070
独取属性src

30:51.070 --> 30:52.070
好

30:52.070 --> 30:53.070
保存

30:53.070 --> 30:54.070
再来试一下

30:54.070 --> 30:59.920
那么现在我们输出图片路径

30:59.920 --> 31:00.920
好

31:00.920 --> 31:01.920
你看

31:01.920 --> 31:02.920
图片路径是什么

31:02.920 --> 31:03.920
点击一下

31:03.920 --> 31:04.920
按住ctr键

31:04.920 --> 31:05.920
点击一下

31:05.920 --> 31:06.920
可以拿到图片路径的

31:06.920 --> 31:07.920
对吧

31:07.920 --> 31:08.920
图片路径

31:08.920 --> 31:09.920
我们是不是也拿到了

31:09.920 --> 31:10.920
10个图片

31:10.920 --> 31:11.920
好

31:11.920 --> 31:12.920
然后我们还差一个啥

31:12.920 --> 31:15.920
还差一个就是电影的详情

31:15.920 --> 31:20.920
那么内名为pl2下面的pl元素

31:20.920 --> 31:22.920
那么我们来

31:22.920 --> 31:24.920
detail

31:24.920 --> 31:25.920
等于什么呢

31:25.920 --> 31:27.920
trfand

31:27.920 --> 31:29.920
divpl2

31:29.920 --> 31:31.920
这个东西要去分析

31:31.920 --> 31:33.920
pl2下面的pl

31:33.920 --> 31:35.920
内名为pl的p元素

31:35.920 --> 31:36.920
然后它什么呢

31:36.920 --> 31:37.920
拿它的atm代吧

31:37.920 --> 31:38.920
或者是text

31:38.920 --> 31:40.920
它里面的文本

31:40.920 --> 31:41.920
ok

31:41.920 --> 31:43.920
或者是我们就拿text

31:43.920 --> 31:45.920
然后我们还是

31:45.920 --> 31:46.920
把空白制服去掉

31:46.920 --> 31:48.920
空白制服去掉

31:48.920 --> 31:50.920
什么空白制服

31:50.920 --> 31:51.920
算了不去了

31:51.920 --> 31:52.920
不去了

31:52.920 --> 31:53.920
拿着去了

31:53.920 --> 31:54.920
ok

31:54.920 --> 31:55.920
那么就这样子

31:55.920 --> 31:56.920
我们来拿

31:56.920 --> 31:59.920
我们把detail拿到

31:59.920 --> 32:00.920
运行

32:01.920 --> 32:02.920
拿到了

32:02.920 --> 32:03.920
好

32:03.920 --> 32:04.920
那么这三个东西拿到了

32:04.920 --> 32:06.920
最后我们把它组装成一个对象

32:06.920 --> 32:07.920
返回

32:07.920 --> 32:08.920
组装成一个对象

32:08.920 --> 32:09.920
对象的就是

32:09.920 --> 32:10.920
net

32:10.920 --> 32:11.920
image

32:11.920 --> 32:12.920
src

32:12.920 --> 32:13.920
detail

32:13.920 --> 32:14.920
什么拿到了

32:14.920 --> 32:16.920
把它组装成对象返回

32:16.920 --> 32:17.920
好

32:17.920 --> 32:18.920
最终我们这个模块

32:18.920 --> 32:19.920
这个模块

32:19.920 --> 32:20.920
我们只需要这个方法就行了

32:20.920 --> 32:21.920
get move a data

32:21.920 --> 32:22.920
对吧

32:22.920 --> 32:23.920
只需要这个方法就行了

32:23.920 --> 32:24.920
好

32:24.920 --> 32:26.920
我们把这个东西导出

32:26.920 --> 32:29.920
导出这个方法

32:29.920 --> 32:30.920
好

32:30.920 --> 32:31.920
就行了

32:31.920 --> 32:33.920
那么我现在回到index这里

32:33.920 --> 32:35.920
我们这里来测试一下

32:35.920 --> 32:36.920
测试一下

32:36.920 --> 32:37.920
require

32:37.920 --> 32:39.920
导入

32:39.920 --> 32:41.920
get movies

32:41.920 --> 32:44.920
那么get movies

32:44.920 --> 32:46.920
导入是不是一个方法

32:46.920 --> 32:47.920
对不对

32:47.920 --> 32:48.920
好

32:48.920 --> 32:49.920
咱们来测试一下这个方法

32:49.920 --> 32:50.920
get movies

32:50.920 --> 32:53.920
然后认

32:53.920 --> 32:54.920
认呢

32:54.920 --> 32:55.920
我们这里拿到了一个

32:55.920 --> 32:56.920
就是肯定是个movies

32:56.920 --> 32:57.920
电影输出

32:57.920 --> 32:59.920
我们

32:59.920 --> 33:00.920
询换一下

33:00.920 --> 33:01.920
询换一下输出一个电影

33:01.920 --> 33:03.920
输出一下这个输出的

33:03.920 --> 33:04.920
输出的长度

33:04.920 --> 33:05.920
nance

33:05.920 --> 33:08.490
看一下吧

33:08.490 --> 33:11.490
load index

33:11.490 --> 33:12.490
长度有10

33:12.490 --> 33:13.490
是不是拿到了

33:13.490 --> 33:14.490
然后我们看一下

33:14.490 --> 33:16.490
订换输出电影的名字

33:16.490 --> 33:18.490
订换输出电影的名字

33:18.490 --> 33:19.490
i等于0

33:19.490 --> 33:21.490
i小于movies.nance

33:21.490 --> 33:23.490
i加加

33:23.490 --> 33:26.490
输出movies

33:26.490 --> 33:27.490
i.net

33:27.490 --> 33:31.250
看一下吧

33:31.250 --> 33:32.250
是不是拿到了

33:32.250 --> 33:33.250
对吧

33:33.250 --> 33:34.250
这东西拿到了

33:34.250 --> 33:35.250
ok

33:35.250 --> 33:36.250
既然我们提供了这么一个模块

33:36.250 --> 33:37.250
这么一个方法

33:37.250 --> 33:38.250
它已经可以实现了

33:38.250 --> 33:40.250
那么就剩下最后一个问题了

33:40.250 --> 33:41.250
最后一个问题是什么

33:41.250 --> 33:43.250
我们要把它保存到文件里边

33:43.250 --> 33:44.250
对吧

33:44.250 --> 33:45.250
那么保存到文件的话

33:45.250 --> 33:47.250
我们要使用load的核心模块

33:47.250 --> 33:48.250
就不是第三方库了

33:48.250 --> 33:49.250
fs

33:49.250 --> 33:50.250
这个核心模块

33:50.250 --> 33:51.250
那么这个模块怎么用呢

33:51.250 --> 33:52.250
其实非常简单

33:52.250 --> 33:53.250
跟他看一下吧

33:53.250 --> 33:54.250
这个模块怎么用

33:54.250 --> 33:55.250
这里呢

33:55.250 --> 33:56.250
fs

33:56.250 --> 33:57.250
require

33:57.250 --> 33:58.250
fs

33:58.250 --> 33:59.250
我们导入核心模块

33:59.250 --> 34:00.250
直接写上模块名就行了

34:00.250 --> 34:02.250
如果说他有这么一个核心模块

34:02.250 --> 34:04.250
他就不会去在其他地方去找

34:04.250 --> 34:05.250
好了

34:05.250 --> 34:06.250
那么这个模块怎么用

34:06.250 --> 34:07.250
这个模块非常简单

34:07.250 --> 34:08.250
非常简单

34:08.250 --> 34:09.250
它里边呢

34:09.250 --> 34:10.250
就是有一个方法

34:10.250 --> 34:12.250
提供了一个方法叫writefile

34:12.250 --> 34:14.250
书写到一个文件里边去

34:14.250 --> 34:15.250
它有几个参数

34:15.250 --> 34:16.250
第一个参数的

34:16.250 --> 34:17.250
填什么呢

34:17.250 --> 34:18.250
填文件的名字

34:18.250 --> 34:19.250
比方说我们这里是文件

34:19.250 --> 34:20.250
movie.json文件

34:20.250 --> 34:21.250
对吧

34:21.250 --> 34:22.250
随便一个文件

34:22.250 --> 34:23.250
有没有这个文件

34:23.250 --> 34:24.250
没有

34:24.250 --> 34:25.250
没有的话还会自行创建

34:25.250 --> 34:26.250
这是文件名

34:26.250 --> 34:28.250
这样子写的话

34:28.250 --> 34:29.250
到当前目标

34:29.250 --> 34:31.250
如果你要输写到别的目标的话

34:31.250 --> 34:32.250
你不要说你要输写到

34:32.250 --> 34:33.250
后边的目标

34:33.250 --> 34:34.250
abc

34:34.250 --> 34:35.250
那么就是往abc这个文件夹里边

34:35.250 --> 34:37.250
写上这个文件

34:37.250 --> 34:39.250
那么这是文件名

34:39.250 --> 34:40.250
后边那些就是

34:40.250 --> 34:42.250
你要写什么数据

34:42.250 --> 34:43.250
写什么数据呢

34:43.250 --> 34:44.250
我们要写什么数据呢

34:44.250 --> 34:45.250
我们把它放下来

34:45.250 --> 34:46.250
下面来吧

34:46.250 --> 34:47.250
我们无非就是

34:47.250 --> 34:48.250
把它这个数组

34:48.250 --> 34:49.250
转换成json格式

34:49.250 --> 34:50.250
对吧

34:50.250 --> 34:51.250
书写进去

34:51.250 --> 34:52.250
好来吧

34:52.250 --> 34:54.250
jsonPose

34:54.250 --> 34:56.250
Pose

34:56.250 --> 34:58.250
jsonStringify

34:58.250 --> 35:00.250
那么我们把Movements

35:00.250 --> 35:01.250
传进去

35:01.250 --> 35:03.250
这就是我们要做的事情

35:03.250 --> 35:05.250
我们把这个电影

35:05.250 --> 35:06.250
我们分开写吧

35:06.250 --> 35:09.750
这样子我们把这个电影数据

35:09.750 --> 35:11.750
是不是转换成json支付创了

35:11.750 --> 35:12.750
转换成json支付创过后

35:12.750 --> 35:13.750
我们把这个支付创写进去

35:13.750 --> 35:15.750
就完成了

35:15.750 --> 35:16.750
好咱们来运行一下

35:19.750 --> 35:20.750
我们最后输出一下吧

35:20.750 --> 35:21.750
输出

35:22.750 --> 35:23.750
这里冒错了

35:23.750 --> 35:24.750
看一下什么错

35:26.750 --> 35:28.750
writeFile

35:29.750 --> 35:31.750
他还有这么一个参数

35:31.750 --> 35:32.750
这就是callback

35:32.750 --> 35:33.750
输写完了之后

35:33.750 --> 35:34.750
因为它是异步的

35:34.750 --> 35:35.750
它是异步的

35:35.750 --> 35:36.750
输写完了之后

35:36.750 --> 35:38.750
它会掉入一个函数

35:38.750 --> 35:39.750
你得把函数写好

35:40.750 --> 35:41.750
输写完了之后

35:41.750 --> 35:43.750
我们输出一个

35:43.750 --> 35:44.750
成功

35:44.750 --> 35:45.750
成功

35:47.750 --> 35:52.660
load index.json

35:54.660 --> 35:55.660
成功

35:55.660 --> 35:56.660
你看一下

35:56.660 --> 35:57.660
这里是不是多了一个文件

35:57.660 --> 35:58.660
movements.json

35:58.660 --> 35:59.660
看一下这个文件里边

35:59.660 --> 36:00.660
我们这里格式化一下

36:01.660 --> 36:02.660
看一下这个文件

36:03.660 --> 36:04.660
是不是把电影记录下来了

36:04.660 --> 36:05.660
那么这样子

36:05.660 --> 36:06.660
就把逗办电影的数据

36:06.660 --> 36:07.660
是不是爬下来了

36:07.660 --> 36:08.660
爬去下来了

36:09.660 --> 36:10.660
这就是一个简单的例子

36:10.660 --> 36:12.660
当然我通过这个例子

36:12.660 --> 36:14.660
不仅仅是说

36:14.660 --> 36:16.660
x是个第三方库

36:16.660 --> 36:17.660
和q-rail

36:17.660 --> 36:18.660
这个第三方库

36:18.660 --> 36:20.660
以及这个核心模块

36:20.660 --> 36:21.660
主要的目的不是说这个

36:21.660 --> 36:22.660
我是告诉大家

36:22.660 --> 36:24.660
哪怕是这种

36:24.660 --> 36:25.660
看上去比较复杂的功能

36:25.660 --> 36:26.660
我们可以利用

36:26.660 --> 36:27.660
一些第三方库

36:27.660 --> 36:28.660
可以轻松的完成

36:28.660 --> 36:29.660
就说明了什么

36:29.660 --> 36:30.660
第三方库的

36:30.660 --> 36:31.660
重要性

36:31.660 --> 36:32.660
可以减大

36:32.660 --> 36:34.660
极大的减化我们的开发

36:34.660 --> 36:35.660
那么我们

36:35.660 --> 36:36.660
要使用这些第三方库

36:36.660 --> 36:38.660
我们可以非常轻松的

36:38.660 --> 36:39.660
利用npm

36:39.660 --> 36:40.660
来进行完成安装

36:40.660 --> 36:41.660
你看

36:41.660 --> 36:42.660
如果说你没有npm的话

36:42.660 --> 36:43.660
让自己像这些

36:43.660 --> 36:44.660
第三方库

36:44.660 --> 36:45.660
与各种各样依赖

36:45.660 --> 36:46.660
如果说你要去自行

36:46.660 --> 36:47.660
管理这些东西的话

36:47.660 --> 36:48.660
光是管理

36:48.660 --> 36:49.660
这些第三方库

36:49.660 --> 36:50.660
都非常非常的麻烦

36:50.660 --> 36:51.660
是这个意思吧

36:51.660 --> 36:52.660
对吧

36:52.660 --> 36:53.660
那么大家想想

36:53.660 --> 36:54.660
去练习一下

36:54.660 --> 36:56.660
练习一下这个

36:57.660 --> 36:58.660
小练习

36:58.660 --> 36:59.660
也挺有意思的

36:59.660 --> 37:00.660
通过这个练习

37:00.660 --> 37:01.660
也可以体会到npm

37:01.660 --> 37:02.660
跟我们开发了

37:02.660 --> 37:03.660
带来的好处

37:03.660 --> 37:04.660
OK

37:04.660 --> 37:05.660
这是这么一个练习

