WEBVTT

00:01.070 --> 00:04.070
这一颗 咱们讲运行环境配置

00:05.070 --> 00:07.070
什么意思呢

00:07.070 --> 00:12.070
就是我们的代码可能它运行的环境一共有三种

00:12.070 --> 00:14.070
一般来说就在三种情况

00:14.070 --> 00:16.070
有没有可能有更多的情况呢

00:16.070 --> 00:19.070
如果有更多的情况的话 我们也能处理

00:19.070 --> 00:21.070
我们这一颗就来学习怎么来处理

00:21.070 --> 00:23.070
我们的代码有可能有三种运行环境

00:23.070 --> 00:25.070
一种是开发环境

00:25.070 --> 00:27.070
啥意思 就是我们在别写代码中

00:27.070 --> 00:29.070
代码的过程中要看一下效果

00:30.070 --> 00:32.070
那么我们这个时候会运行代码

00:32.070 --> 00:33.070
这是开发环境

00:33.070 --> 00:35.070
还一种是生产环境

00:35.070 --> 00:37.070
就是我们代码全部写完了

00:37.070 --> 00:39.070
把它放到服务器上去运行

00:39.070 --> 00:41.070
在真实的环境里面

00:41.070 --> 00:42.070
给用户去运行

00:42.070 --> 00:44.070
那么这是生产环境

00:44.070 --> 00:47.070
还一种环境大家现在肯定是见识不到的

00:47.070 --> 00:48.070
叫测试环境

00:48.070 --> 00:51.070
测试环境就是我们用一些测试工具

00:51.070 --> 00:53.070
来测试我们的代码

00:53.070 --> 00:57.070
这三种环境他们的代码的运行都差不多

00:57.070 --> 01:01.070
基本上可以说99.9%都是相同的

01:01.070 --> 01:03.070
都没有什么区别

01:03.070 --> 01:05.070
那你想如果区别太大的话

01:05.070 --> 01:07.070
那你写的代码在服务器上

01:07.070 --> 01:09.070
在测试环境里面都不一样

01:09.070 --> 01:11.070
你别写的时候考虑东西太多了

01:11.070 --> 01:13.070
所以说绝大部分代码的都是相同的

01:13.070 --> 01:15.070
但是保不齐

01:15.070 --> 01:19.070
以后这门可能倒是不会遇到这种情况

01:19.070 --> 01:21.070
以后你们学习了更多的技术过后

01:21.070 --> 01:23.070
可能会遇到这种情况

01:23.070 --> 01:25.070
保不齐有的时候

01:25.070 --> 01:27.070
可能需要在不同的环境里面

01:27.070 --> 01:29.070
运行不同的代码

01:29.070 --> 01:31.070
就是说我们现在遇到的问题就是

01:31.070 --> 01:33.070
我们可能需要在load代码中

01:33.070 --> 01:35.070
运行代码的时候

01:35.070 --> 01:37.070
要根据不同的环境

01:37.070 --> 01:39.070
做出不同的选择不同的处理

01:39.070 --> 01:41.070
那么这样子就造成一个问题

01:41.070 --> 01:43.070
我们在load代码里面怎么知道处于什么环境呢

01:43.070 --> 01:45.070
这个点是极其重要的

01:45.070 --> 01:47.070
特别是你们之后

01:47.070 --> 01:49.070
学了一些技术过后

01:49.070 --> 01:51.070
特别是vpec

01:51.070 --> 01:53.070
学了这个技术过后

01:53.070 --> 01:55.070
我们这里

01:55.070 --> 01:57.070
这一个index的点介绍

01:57.070 --> 01:59.070
优要安装更新的

01:59.070 --> 02:01.070
经常的更新

02:01.070 --> 02:03.070
点介绍

02:03.070 --> 02:05.070
比方说我们就随便一个例子吧

02:05.070 --> 02:07.070
有一个变量

02:07.070 --> 02:09.070
有一个变量

02:09.070 --> 02:11.070
这个变量A的值

02:11.070 --> 02:13.070
它要根据不同的环境

02:13.070 --> 02:15.070
取出不同的值

02:15.070 --> 02:17.070
比方说如果是

02:17.070 --> 02:19.070
开发环境

02:19.070 --> 02:21.070
如果我们目前代码运行

02:21.070 --> 02:23.070
是在开发环境里面运行

02:23.070 --> 02:25.070
A的值可能是一个

02:25.070 --> 02:27.070
测试的值

02:27.070 --> 02:29.070
我们就这样子写吧

02:29.070 --> 02:31.070
举个例子

02:31.070 --> 02:33.070
如果你是生产环境

02:33.070 --> 02:35.070
如果你是生产环境的话

02:35.070 --> 02:37.070
A的值

02:37.070 --> 02:39.070
可能要来自于数据库

02:39.070 --> 02:41.070
要来自于生产环境里面真实的数据

02:41.070 --> 02:43.070
那么就是

02:43.070 --> 02:45.070
这里写个生产环境

02:45.070 --> 02:47.070
如果你是那个

02:47.070 --> 02:49.070
测试环境

02:49.070 --> 02:51.070
如果你是测试环境

02:51.070 --> 02:53.070
那么A的值

02:53.070 --> 02:55.070
可能又要根据测试环境

02:55.070 --> 02:57.070
来产生一个比较特殊的值

02:57.070 --> 02:59.070
我们就这样子写

02:59.070 --> 03:01.070
就是我们现在肯定是

03:01.070 --> 03:03.070
遇不到这种情况

03:03.070 --> 03:05.070
以后会遇到

03:05.070 --> 03:07.070
我要根据我们的代码

03:07.070 --> 03:09.070
在哪个环境里面运行

03:09.070 --> 03:11.070
我要去做出不同的处理

03:11.070 --> 03:13.070
好那么这里的

03:13.070 --> 03:15.070
唯一的问题就在于哪呢

03:15.070 --> 03:17.070
我怎么来判断我的运行环境

03:17.070 --> 03:19.070
我怎么知道我是生产环境

03:19.070 --> 03:21.070
我怎么知道我是测试环境

03:21.070 --> 03:23.070
那么这个问题怎么来处理

03:23.070 --> 03:25.070
通常我们会使用下面的方式

03:25.070 --> 03:27.070
现在就是故意告诉你该怎么来处理的

03:27.070 --> 03:29.070
是这样子

03:29.070 --> 03:31.070
在load中它提供了一个

03:31.070 --> 03:33.070
全局变量Global

03:33.070 --> 03:35.070
它类似于啥呢

03:35.070 --> 03:37.070
类似于浏览器环境

03:37.070 --> 03:39.070
我们现在是load环境

03:39.070 --> 03:41.070
浏览器环境里面不是一个全局变量吧

03:41.070 --> 03:43.070
就是window对象

03:43.070 --> 03:45.070
其实load里面也有一个全局变量

03:45.070 --> 03:47.070
输出一下

03:47.070 --> 03:50.580
叫做Global

03:50.580 --> 03:52.580
来看一下输出

03:52.580 --> 03:54.580
不能这样子

03:54.580 --> 03:56.580
这里右键中端中打开

03:56.580 --> 03:58.580
load的

03:58.580 --> 04:00.580
这个事就要解释

04:00.580 --> 04:02.580
输出一大堆东西

04:02.580 --> 04:04.580
它里面有很多很多东西

04:04.580 --> 04:06.580
这个玩意我们以后讲load的时候

04:06.580 --> 04:08.580
再详细来说

04:08.580 --> 04:10.580
就是一个全局变量而已

04:10.580 --> 04:12.580
那么这个全局变量里面

04:12.580 --> 04:14.580
跟window对象一样

04:14.580 --> 04:16.580
这个属性都可以直接使用

04:16.580 --> 04:18.580
这啥意思

04:18.580 --> 04:20.580
比如我们window对象里面

04:20.580 --> 04:22.580
window对象里面不是有个console

04:22.580 --> 04:24.580
可以直接使用

04:24.580 --> 04:26.580
为啥

04:26.580 --> 04:28.580
window

04:28.580 --> 04:30.580
console

04:30.580 --> 04:32.580
是不是一个window对象的一个属性

04:32.580 --> 04:34.580
全局变量的属性是可以直接用的

04:34.580 --> 04:36.580
比方说

04:36.580 --> 04:38.580
window对象里面还可以使用document

04:38.580 --> 04:40.580
为什么可以使用document

04:40.580 --> 04:42.580
因为window里面有一个属性

04:42.580 --> 04:44.580
document

04:44.580 --> 04:46.580
所以说

04:46.580 --> 04:48.580
全局变量里面的属性

04:48.580 --> 04:50.580
你是可以直接用的

04:50.580 --> 04:52.580
load里面一个全局变量global

04:52.580 --> 04:54.580
那么它里面的属性

04:54.580 --> 04:56.580
都可以直接用

04:56.580 --> 04:58.580
这里面不是有setter

04:58.580 --> 05:00.580
这些属性是不是可以直接用

05:00.580 --> 05:02.580
当然它肯定还有console

05:02.580 --> 05:04.580
你直接去找一找

05:04.580 --> 05:06.580
肯定是有console的

05:06.580 --> 05:08.580
那么都可以直接使用

05:08.580 --> 05:10.580
那么其中有一个属性

05:10.580 --> 05:12.580
那么它就可以直接使用

05:12.580 --> 05:14.580
我们输出process

05:14.580 --> 05:16.580
看一下能不能直接写

05:16.580 --> 05:18.580
clear

05:18.580 --> 05:20.580
load in 运行

05:20.580 --> 05:22.580
是不是可以直接用

05:22.580 --> 05:24.580
为什么 因为process

05:24.580 --> 05:26.580
它就是全局变量global的一个属性

05:26.580 --> 05:28.580
它可以直接用

05:28.580 --> 05:30.580
那么我们要介绍的就是这个属性

05:30.580 --> 05:32.580
这个属性是什么意思呢

05:32.580 --> 05:36.530
process单词它表示的是进程

05:36.530 --> 05:38.530
它表示的是进程

05:38.530 --> 05:40.530
每一个程序启动的时候

05:40.530 --> 05:42.530
它可以开一个进程

05:42.530 --> 05:44.530
那么这种做法

05:44.530 --> 05:46.530
无论是windows操作系统

05:46.530 --> 05:48.530
还是Linux操作系统

05:48.530 --> 05:50.530
那么它们都是用这种方式来处理的

05:50.530 --> 05:52.530
就是一个程序启动了

05:52.530 --> 05:54.530
它会开一个进程

05:54.530 --> 05:56.530
比如说我们的浏览器

05:56.530 --> 05:58.530
打开浏览器就会开一个进程

05:58.530 --> 06:00.530
甚至有的程序还可以开多个进程

06:00.530 --> 06:02.530
那么这个process

06:02.530 --> 06:04.530
里面就保存了跟进程相关的信息

06:04.530 --> 06:06.530
原来的意思

06:06.530 --> 06:08.530
它就是保存了跟我们的

06:08.530 --> 06:10.530
跟进程的信息

06:10.530 --> 06:12.530
因为我们启动漏的

06:12.530 --> 06:14.530
它就会启动一个进程

06:14.530 --> 06:16.530
那么这个进程里边有哪些相关信息

06:16.530 --> 06:18.530
它就会保存在对象里面去

06:18.530 --> 06:20.530
那么以后讲漏的时候再相信说吧

06:20.530 --> 06:22.530
那么我现在只要介绍的是

06:22.530 --> 06:24.530
它启动有一个属性

06:24.530 --> 06:26.530
叫做env

06:26.530 --> 06:28.530
它的全程叫做environment

06:28.530 --> 06:30.530
就是环境的意思

06:30.530 --> 06:32.530
它里面有一个属性

06:32.530 --> 06:34.530
process里面有一个属性

06:34.530 --> 06:36.530
叫做env

06:36.530 --> 06:38.530
它就包含了

06:38.530 --> 06:40.530
所有的

06:40.530 --> 06:42.530
环境信息

06:42.530 --> 06:44.530
这个属性里面包含了所有的环境信息

06:44.530 --> 06:46.530
其中我们现在要用的

06:46.530 --> 06:48.530
就是它里面包含了有环境变量

06:48.530 --> 06:50.530
环境变量在哪

06:50.530 --> 06:52.530
看这里

06:52.530 --> 06:54.530
我的电脑点击右键属性

06:54.530 --> 06:56.530
这里呢

06:56.530 --> 06:58.530
高级系统设置

06:58.530 --> 07:00.530
我用的是温室电脑

07:00.530 --> 07:02.530
这里呢有个环境变量

07:02.530 --> 07:04.530
点击

07:04.530 --> 07:06.530
下面有一个系统变量

07:06.530 --> 07:08.530
看到没

07:08.530 --> 07:10.530
这里边

07:10.530 --> 07:12.530
这些变量就是属于

07:12.530 --> 07:14.530
环境变量

07:14.530 --> 07:16.530
那么这些环境变量有什么用呢

07:16.530 --> 07:18.530
它可以全局的

07:18.530 --> 07:20.530
这个东西你们是不是学过

07:20.530 --> 07:22.530
你们是不是应该在个

07:22.530 --> 07:24.530
计算机基础里面学过了

07:24.530 --> 07:26.530
那么这个环境变量

07:26.530 --> 07:28.530
它就是为所有的程序

07:28.530 --> 07:30.530
提供一些信息的

07:30.530 --> 07:32.530
非常简单

07:32.530 --> 07:34.530
计算机基础里面说一下

07:34.530 --> 07:36.530
这个环境变量就是所有的程序

07:36.530 --> 07:38.530
计算机里面运行的所有程序

07:38.530 --> 07:40.530
都可以从环境变量里面

07:40.530 --> 07:42.530
获得一些全局的信息

07:42.530 --> 07:44.530
比方说我们的文档目录在哪

07:44.530 --> 07:46.530
我们的就是那个

07:46.530 --> 07:48.530
下载的目录在哪等等等等

07:48.530 --> 07:50.530
我们的一些命令

07:50.530 --> 07:52.530
常见的目录在哪等等

07:52.530 --> 07:54.530
这些都是属于环境变量

07:54.530 --> 07:56.530
一些

07:56.530 --> 07:58.530
给所有的程序提供的信息

07:58.530 --> 08:00.530
那么这里边

08:00.530 --> 08:02.530
N5里边它就会有

08:02.530 --> 08:04.530
你看这里边有个TEMP

08:04.530 --> 08:06.530
我们看一下环境变量里边

08:06.530 --> 08:08.530
是不是有个TEMP

08:08.530 --> 08:10.530
那么这里是不是把读出来了

08:10.530 --> 08:12.530
看是不是把读出来了

08:12.530 --> 08:14.530
对不对就这么个意思

08:14.530 --> 08:16.530
当然了这里边还有一个很重要的环境变量

08:16.530 --> 08:18.530
就是PASS

08:18.530 --> 08:20.530
那你看一下PASS

08:20.530 --> 08:22.530
在这儿是不是把读出来了

08:22.530 --> 08:24.530
它就会把这个

08:24.530 --> 08:26.530
系统里边环境变量的东西读出来

08:26.530 --> 08:28.530
从这一点我们也可以看到

08:28.530 --> 08:30.530
漏的环境是不是跟流量器环境完全不一样

08:30.530 --> 08:32.530
流量器环境能读这个玩意吗

08:32.530 --> 08:34.530
它能够允许在流量器里边

08:34.530 --> 08:36.530
理解GS能够去读

08:36.530 --> 08:38.530
用户计算机上的环境变量

08:38.530 --> 08:40.530
肯定是不允许的

08:40.530 --> 08:42.530
漏的环境不一样了

08:42.530 --> 08:44.530
漏的环境是操作计算机的

08:44.530 --> 08:46.530
它可以得到计算机的里边

08:46.530 --> 08:48.530
所有你想要的信息都可以拿到

08:48.530 --> 08:50.530
那么环境变量

08:50.530 --> 08:52.530
那么我们这里的说到这儿了

08:52.530 --> 08:54.530
我们就基本上接近目标了

08:54.530 --> 08:56.530
我们要做的是啥呢

08:56.530 --> 08:58.530
不是说唯一的处理方式

08:58.530 --> 09:00.530
只是说我们基本上

09:00.530 --> 09:02.530
都是按照这种方式来处理的

09:02.530 --> 09:04.530
就是我们要判断在哪个环境里边

09:04.530 --> 09:06.530
我们单码运行在哪个环境里边

09:06.530 --> 09:08.530
基本上都是用这种方式来处理的

09:08.530 --> 09:10.530
我们怎么来处理呢

09:10.530 --> 09:12.530
我们是在环境变量

09:12.530 --> 09:14.530
系统变量里边去加一个值

09:14.530 --> 09:16.530
加一个东西

09:16.530 --> 09:18.530
这个名字叫做漏的N

09:18.530 --> 09:20.530
不是说必须要这个名字

09:20.530 --> 09:22.530
这个名字是随便定的

09:22.530 --> 09:24.530
只不过大家都约定熟成了这么一种习惯

09:24.530 --> 09:26.530
所以去加这么一个变量

09:26.530 --> 09:28.530
来判定漏的处理哪种环境

09:28.530 --> 09:30.530
那么我们现在先来加一个

09:30.530 --> 09:32.530
比方说我们这里新建一个

09:32.530 --> 09:34.530
我们现在的如果说我们现在的环境呢

09:34.530 --> 09:36.530
是开发环境

09:36.530 --> 09:38.530
我们就在这里写个load下滑线

09:38.530 --> 09:40.530
N

09:40.530 --> 09:42.530
然后来给它加一个值

09:42.530 --> 09:44.530
开发环境呢我们通常会使用单子

09:44.530 --> 09:46.530
这些都是习惯约定熟成的

09:46.530 --> 09:48.530
不是说一定要这样做

09:48.530 --> 09:50.530
development

09:50.530 --> 09:52.530
我们都会这样的写

09:52.530 --> 09:54.530
这个变量的值为这个点确定

09:54.530 --> 09:56.530
你看一下是不是加进去了

09:56.530 --> 09:58.530
那么就表示我们

09:58.530 --> 10:00.530
目前整个这个计算机

10:00.530 --> 10:02.530
它处于的环境呢是一个

10:02.530 --> 10:04.530
开发环境

10:04.530 --> 10:06.530
点确定

10:06.530 --> 10:08.530
那么现在呢

10:08.530 --> 10:10.530
这现在我们来看一下

10:10.530 --> 10:12.530
看一下N5

10:12.530 --> 10:14.530
那么这里面就可以获取loadN5了

10:14.530 --> 10:16.530
可以获取这个环境面量loadN5了

10:16.530 --> 10:18.530
这个环境面量是我们刚刚加的

10:18.530 --> 10:20.530
本来是没有的

10:20.530 --> 10:22.530
我们运行

10:22.530 --> 10:24.530
是不是可以达到development

10:24.530 --> 10:26.530
有的同学的计算机

10:26.530 --> 10:28.530
可能要重启一次

10:28.530 --> 10:30.530
才能生效

10:30.530 --> 10:32.530
我这里呢

10:32.530 --> 10:34.530
是不是可以达到了

10:34.530 --> 10:36.530
那么如果说你将来有一天

10:36.530 --> 10:38.530
将来有一天要变

10:38.530 --> 10:40.530
我们把这个变一下

10:40.530 --> 10:42.530
那么只需要改变环境变量就行了

10:42.530 --> 10:44.530
是不是不用动程序

10:44.530 --> 10:46.530
把环境变量一改

10:46.530 --> 10:48.530
比方说改成生产环境

10:48.530 --> 10:50.530
用proboxy

10:50.530 --> 10:52.530
proboxy

10:52.530 --> 10:54.530
点确定

10:54.530 --> 10:56.530
确定

10:56.530 --> 10:58.530
看一下

10:58.530 --> 11:00.530
没变

11:00.530 --> 11:02.530
可能我这里面也得重启一次

11:02.530 --> 11:04.530
改了过后我把vscode重启一次

11:04.530 --> 11:06.530
看行不行

11:06.530 --> 11:10.540
不想的话可能要重启电脑了

11:10.540 --> 11:12.540
再来

11:12.540 --> 11:14.540
一看重启了一下vscode

11:14.540 --> 11:16.540
是不是proboxy了

11:16.540 --> 11:18.540
那么现在就变成了生产环境了

11:18.540 --> 11:20.540
就明白这个意思了

11:20.540 --> 11:22.540
当然如果说你要改成测试环境的话

11:22.540 --> 11:24.540
你把它改成test就完事了

11:24.540 --> 11:26.540
这就是设置环境变量的方式

11:26.540 --> 11:28.540
以及如何在load程序里边

11:28.540 --> 11:30.540
去读取环境变量

11:30.540 --> 11:32.540
那么这样一直来的话

11:32.540 --> 11:34.540
前面是不是可以判定了

11:34.540 --> 11:36.540
前面是可以判定的

11:36.540 --> 11:38.540
我们怎么判定呢

11:38.540 --> 11:40.540
我就用这样的方式来判定

11:40.540 --> 11:42.540
这是常见的一种做法

11:42.540 --> 11:44.540
判断环境

11:44.540 --> 11:46.540
process

11:46.540 --> 11:48.540
load

11:48.540 --> 11:50.540
是不是等于

11:50.540 --> 11:52.540
开发环境development

11:52.540 --> 11:54.540
这个单词要记住

11:54.540 --> 11:56.540
这个单词我们以后会经常用的

11:56.540 --> 11:58.540
这个表示开发环境

11:58.540 --> 12:00.540
那么这个表示生产环境

12:00.540 --> 12:02.540
proboxy

12:02.540 --> 12:04.540
那么这个表示测试环境

12:04.540 --> 12:06.540
测试环境

12:06.540 --> 12:08.540
好我们这里

12:08.540 --> 12:10.540
lc就爆出了

12:10.540 --> 12:12.540
环境没有环境变量

12:12.540 --> 12:14.540
一个cp

12:14.540 --> 12:16.540
或者是我们默认一个字

12:16.540 --> 12:18.540
默认

12:18.540 --> 12:20.540
默认的话我们默认开发环境

12:20.540 --> 12:22.540
开发环境

12:22.540 --> 12:24.540
都行

12:24.540 --> 12:26.540
我们这里输出a

12:26.540 --> 12:28.540
总之我们现在是不是可以判断环境了

12:28.540 --> 12:30.540
来运行词

12:30.540 --> 12:32.540
那么现在是生产环境

12:32.540 --> 12:34.540
明儿这意思吗

12:34.540 --> 12:36.540
我们就可以通过这种方式来配置

12:36.540 --> 12:38.540
那么这种方式配置的环境变量

12:38.540 --> 12:40.540
我们在系统变量里面

12:40.540 --> 12:42.540
这样子设置的方式叫做永久设置

12:42.540 --> 12:44.540
永久生效的

12:44.540 --> 12:46.540
你只要不去动它你只要不手动去删它

12:46.540 --> 12:48.540
它就一直在这

12:48.540 --> 12:50.540
它就永久生效的

12:50.540 --> 12:52.540
永久生效的其实并不是常见的做法

12:52.540 --> 12:54.540
只是告诉大家可以这样做

12:54.540 --> 12:56.540
但是它不是

12:56.540 --> 12:58.540
一个常见的做法

12:58.540 --> 13:00.540
为什么呢

13:00.540 --> 13:02.540
第一个是我如果说我的note程序没有运行

13:02.540 --> 13:04.540
你这个环境面上有意义吗

13:04.540 --> 13:06.540
你放来说干嘛呢

13:06.540 --> 13:08.540
是没有意义

13:08.540 --> 13:10.540
第二个呢就是我改动起来的

13:10.540 --> 13:12.540
我要改这个环境是不是跑了车里边去改

13:12.540 --> 13:14.540
还要重启一下

13:14.540 --> 13:16.540
是不是特别不方便

13:16.540 --> 13:18.540
因此这种永久设置并不是一个

13:18.540 --> 13:20.540
常见的做法

13:20.540 --> 13:22.540
我们常见的做法设置这个东西的时候

13:22.540 --> 13:24.540
是临时设置

13:24.540 --> 13:26.540
环境面量是可以临时设置的

13:26.540 --> 13:28.540
怎么来设置呢

13:28.540 --> 13:30.540
我们设置环境面量的时候

13:30.540 --> 13:32.540
只是在note程序启动之前

13:32.540 --> 13:34.540
设置一下然后马上启动note程序

13:34.540 --> 13:36.540
启动完了过后

13:36.540 --> 13:38.540
然后干嘛呢

13:38.540 --> 13:40.540
启动完了note程序之后

13:40.540 --> 13:42.540
我们就那个

13:42.540 --> 13:44.540
note程序运行完了之后

13:44.540 --> 13:46.540
那么这个环境面量就被删除了

13:46.540 --> 13:48.540
那么这就是临时的设置

13:48.540 --> 13:50.540
临时的设置的话

13:50.540 --> 13:52.540
我们可以使用script

13:52.540 --> 13:54.540
我们上级课学的

13:54.540 --> 13:56.540
就是npm脚本

13:56.540 --> 13:58.540
我们在npm脚本里面

13:58.540 --> 14:00.540
因为这个命令很长

14:00.540 --> 14:02.540
命令很长直接写的话也麻烦

14:02.540 --> 14:04.540
一般的话会在命令行脚本里面

14:04.540 --> 14:06.540
来搞定这件事情

14:06.540 --> 14:08.540
永久设置的环境面量敢去除掉

14:08.540 --> 14:10.540
删除

14:10.540 --> 14:12.540
点确定

14:12.540 --> 14:14.540
那么现在我们再看一下

14:14.540 --> 14:18.690
vscode重启一下

14:18.690 --> 14:20.690
我们现在删除了环境面量了

14:20.690 --> 14:22.690
删除了环境面量了

14:22.690 --> 14:24.690
现在我们来这样子吧

14:24.690 --> 14:26.690
我们这里

14:26.690 --> 14:28.690
无论只为没有环境

14:30.690 --> 14:32.690
来看一下

14:32.690 --> 14:34.690
你看现在是不是没有环境面量了

14:34.690 --> 14:36.690
它既不是这个也不是这个

14:36.690 --> 14:38.690
还没有环境面量了

14:38.690 --> 14:40.690
然后我们怎么处理呢

14:40.690 --> 14:42.690
我们这样处理

14:42.690 --> 14:44.690
我们首先生成一个

14:44.690 --> 14:46.690
配置文件

14:46.690 --> 14:48.690
就是Chapter2

14:48.690 --> 14:50.690
Chapter2

14:50.690 --> 14:55.020
好

14:55.020 --> 14:57.020
生成了这个

14:59.020 --> 15:01.020
到最后一步

15:01.020 --> 15:05.300
Chapter2

15:05.300 --> 15:07.300
好

15:07.300 --> 15:09.300
然后在配置文件里面

15:09.300 --> 15:10.300
写上一个脚本

15:10.300 --> 15:11.300
比方说

15:11.300 --> 15:13.300
我们要在生产环境里面

15:13.300 --> 15:15.300
我们比方说要在

15:15.300 --> 15:17.300
开发环境里面运行

15:17.300 --> 15:19.300
比方说我们用start

15:19.300 --> 15:21.300
start的时候怎么办呢

15:21.300 --> 15:23.300
我们形式怎么写的

15:23.300 --> 15:25.300
是不是用load index的介绍

15:25.300 --> 15:27.300
在这句话之前

15:27.300 --> 15:29.300
我们加上一个命令

15:29.300 --> 15:30.300
什么命令呢

15:30.300 --> 15:32.300
就是设置环境面量的命令

15:32.300 --> 15:33.300
怎么来设置呢

15:33.300 --> 15:35.300
在Windows操作系统下面

15:35.300 --> 15:37.300
你要设置环境面量

15:38.300 --> 15:39.300
set

15:39.300 --> 15:40.300
环境面量

15:40.300 --> 15:41.300
名字

15:41.300 --> 15:42.300
load n

15:42.300 --> 15:43.300
这是Windows的命令

15:43.300 --> 15:45.300
Windows里面是这样的写的

15:45.300 --> 15:46.300
零时设置

15:46.300 --> 15:47.300
set的这个

15:47.300 --> 15:49.300
是零时设置环境面量

15:49.300 --> 15:51.300
零时设置load n

15:51.300 --> 15:53.300
为什么呢

15:53.300 --> 15:54.300
等于什么呢

15:54.300 --> 15:56.300
等于development

15:56.300 --> 15:58.300
对吧

15:58.300 --> 16:00.300
我们start表示的是

16:00.300 --> 16:01.300
使用那个什么

16:01.300 --> 16:03.300
使用那个开发环境来运行

16:03.300 --> 16:05.300
把它设置为development

16:05.300 --> 16:06.300
那么这是一个完整的命令

16:06.300 --> 16:07.300
对不对

16:07.300 --> 16:08.300
我们现在框住的一部分

16:08.300 --> 16:09.300
是个完整的命令

16:09.300 --> 16:10.300
然后呢

16:10.300 --> 16:12.300
我们这里使用两个end

16:12.300 --> 16:14.300
表示命令的连接

16:14.300 --> 16:16.300
把上一个命令运行成功

16:16.300 --> 16:17.300
成功之后呢

16:17.300 --> 16:18.300
马上运行下一个命令

16:18.300 --> 16:19.300
那么这两个呢

16:19.300 --> 16:21.300
就合并成了一个命令运行

16:21.300 --> 16:22.300
那么这样子

16:22.300 --> 16:25.300
由于前面这一句话的作用

16:25.300 --> 16:26.300
所以说

16:26.300 --> 16:27.300
我们首先把环境面量

16:27.300 --> 16:28.300
设置为这个

16:28.300 --> 16:30.300
然后再去运行这个

16:30.300 --> 16:31.300
明白的意思吧

16:31.300 --> 16:32.300
那么这样子呢

16:32.300 --> 16:34.300
它运行的环境就是

16:34.300 --> 16:36.300
那个就是开发环境了

16:36.300 --> 16:37.300
好

16:37.300 --> 16:38.300
咱们来看一下

16:38.300 --> 16:40.300
我们用npm

16:40.300 --> 16:42.300
当然start是可以不用装的

16:42.300 --> 16:43.300
start

16:43.300 --> 16:44.300
好

16:44.300 --> 16:45.300
你看

16:45.300 --> 16:48.300
这里在哪里写错了

16:48.300 --> 16:51.300
load and development

16:51.300 --> 16:55.440
这里是不是还有空格

16:55.440 --> 16:57.440
start

16:57.440 --> 17:00.440
这里哪里写错了

17:00.440 --> 17:02.440
我看一下

17:02.440 --> 17:04.440
是不是得

17:04.440 --> 17:05.440
刚才把环境变成3了

17:05.440 --> 17:06.440
是不是得重启一次

17:06.440 --> 17:08.440
好像重启了呀

17:08.440 --> 17:09.440
再来

17:09.440 --> 17:10.440
再来

17:10.440 --> 17:14.670
好

17:14.670 --> 17:16.670
然后npm start

17:16.670 --> 17:21.370
这里我看一下

17:21.370 --> 17:23.370
我这个单词是不是写错了

17:23.370 --> 17:25.370
这个单词

17:25.370 --> 17:27.370
看一下

17:27.370 --> 17:30.370
development

17:30.370 --> 17:32.740
这边呢

17:32.740 --> 17:33.740
写错了

17:33.740 --> 17:35.740
写错了单词

17:35.740 --> 17:36.740
development

17:36.740 --> 17:37.740
OK

17:37.740 --> 17:38.740
那么现在我们再运行

17:38.740 --> 17:40.740
再运行

17:41.740 --> 17:43.740
我们在这里直接输出吧

17:43.740 --> 17:44.740
我们在这里直接输出

17:44.740 --> 17:46.740
输出这个load and

17:46.740 --> 17:50.380
单词肯定是没错的

17:50.380 --> 17:54.650
你看

17:54.650 --> 17:55.650
对了的

17:55.650 --> 17:57.650
它怎么说没有环境变量的

17:57.650 --> 17:58.650
对了的

17:58.650 --> 18:00.650
我们得到的是development

18:03.650 --> 18:04.650
你看

18:04.650 --> 18:06.650
这个都已经得到的是development

18:06.650 --> 18:08.650
为什么它这里判断不进去呢

18:08.650 --> 18:10.650
development

18:10.650 --> 18:12.650
我把设置为开发环境了

18:12.650 --> 18:20.220
它这里输出的是没有环境变量

18:21.220 --> 18:24.220
这个地方输出的是development

18:24.220 --> 18:26.220
那么这个判断它没有进去

18:26.220 --> 18:27.220
看到没

18:27.220 --> 18:29.220
它没有进去这个判断

18:29.220 --> 18:30.220
load and

18:30.220 --> 18:33.660
这什么问题

18:33.660 --> 18:36.230
看一下

18:36.230 --> 18:38.230
是不是后面有个空格

18:38.230 --> 18:39.230
对了的

18:39.230 --> 18:41.230
刚才这里不应该给空格

18:41.230 --> 18:42.230
不应该给空格

18:42.230 --> 18:43.230
不然的话后面有个空格

18:43.230 --> 18:44.230
这样对了

18:44.230 --> 18:45.230
这样应该是对了的

18:45.230 --> 18:47.230
开发环境了

18:47.230 --> 18:48.230
刚才我是单词写错了

18:48.230 --> 18:49.230
最开始单词写错了

18:49.230 --> 18:51.230
我靠在这个地方

18:51.230 --> 18:53.230
浪费了半天的时间

18:53.230 --> 18:54.230
那么就是这样的写对吧

18:54.230 --> 18:57.230
我们可以通过这种方式来设置一个环境变量

18:57.230 --> 18:59.230
然后马上去运行load的程序

18:59.230 --> 19:01.230
load的程序

19:01.230 --> 19:02.230
就完事了

19:02.230 --> 19:05.230
那如果说你要使用生产环境这么慢呢

19:05.230 --> 19:06.230
生产环境的话

19:06.230 --> 19:07.230
我们是不是可以再写个脚本

19:07.230 --> 19:09.230
比较说我们一般用生产环境的话

19:09.230 --> 19:10.230
用build

19:10.230 --> 19:11.230
build的话

19:11.230 --> 19:13.230
我们用同样的方式复制一下

19:14.230 --> 19:15.230
同样的方式

19:15.230 --> 19:17.230
这么这里把改成produx型

19:17.230 --> 19:20.230
这样子就避免了我们之后的在环境变量改来改去

19:20.230 --> 19:21.230
对吧

19:21.230 --> 19:23.230
然后以后测试环境

19:23.230 --> 19:25.230
比方说我们再写一个测试环境

19:25.230 --> 19:26.230
测试环境的话

19:26.230 --> 19:27.230
我们用同样的方式

19:27.230 --> 19:28.230
对吧

19:28.230 --> 19:29.230
set

19:29.230 --> 19:30.230
test

19:30.230 --> 19:31.230
测试环境

19:31.230 --> 19:32.230
我们是不是用这种方式来运行

19:32.230 --> 19:33.230
不过测试环境以后

19:33.230 --> 19:34.230
里面这个地方

19:34.230 --> 19:35.230
可能要

19:35.230 --> 19:36.230
要换成用mocha

19:36.230 --> 19:38.230
或者一些测试工具

19:38.230 --> 19:39.230
这样这个

19:39.230 --> 19:40.230
部署环境就是生产环境的

19:40.230 --> 19:41.230
生产环境的

19:41.230 --> 19:43.230
可能要用一些别的东西来启动

19:43.230 --> 19:44.230
总之

19:44.230 --> 19:45.230
前面我们基本上

19:45.230 --> 19:46.230
就是用来设置环境变量

19:46.230 --> 19:48.230
然后后边来跟紧接着

19:48.230 --> 19:49.230
来运行程序

19:49.230 --> 19:50.230
程序运行完了过后

19:50.230 --> 19:51.230
这个东西就没了

19:51.230 --> 19:52.230
就抹去了

19:52.230 --> 19:53.230
原来是什么

19:53.230 --> 19:54.230
好

19:54.230 --> 19:55.230
那么咱们再来看一下

19:55.230 --> 19:57.230
以后我们再要用

19:57.230 --> 19:58.230
在运行程序的时候

19:58.230 --> 19:59.230
是变得很方便了

19:59.230 --> 20:01.230
我们不用去管什么环境变量了

20:01.230 --> 20:03.230
我们只需要在这个地方

20:03.230 --> 20:05.230
使用相应的方式来启动就行了

20:05.230 --> 20:07.230
你用这种方式来启动

20:07.230 --> 20:08.230
就是开发环境

20:08.230 --> 20:10.230
如果说你用bo的方式来启动

20:10.230 --> 20:12.230
这要用装

20:13.230 --> 20:15.230
如果用bo的方式来启动

20:15.230 --> 20:18.230
那么就是生产环境

20:18.230 --> 20:20.230
如果说你用TAS的方式来启动

20:20.230 --> 20:21.230
那么就是

20:23.230 --> 20:24.230
测制环境

20:24.230 --> 20:25.230
没人了意思吗

20:25.230 --> 20:26.230
那么之后

20:26.230 --> 20:28.230
我们运行程序非常方便

20:28.230 --> 20:29.230
OK

20:29.230 --> 20:30.230
咱们就说这个点

20:30.230 --> 20:32.230
这就是零时设置

20:33.230 --> 20:35.230
那么接下来有一个小的细节

20:35.230 --> 20:37.230
我顺便给大家介绍一个

20:37.230 --> 20:38.230
第三方库

20:38.230 --> 20:40.230
就是我们在Windows上面

20:40.230 --> 20:41.230
设置环境变量

20:41.230 --> 20:43.230
是用这种方式来设置的

20:44.230 --> 20:45.230
但是我们的程序

20:45.230 --> 20:47.230
它不一定在Windows

20:47.230 --> 20:49.230
可能你把你的程序

20:49.230 --> 20:51.230
考给别人

20:51.230 --> 20:52.230
别人是什么环境的

20:52.230 --> 20:53.230
别的开发者

20:53.230 --> 20:55.230
可能在用苹果电脑

20:55.230 --> 20:56.230
用Mac

20:56.230 --> 20:57.230
那怎么办呢

20:57.230 --> 20:58.230
Mac它的写法也不一样

20:58.230 --> 20:59.230
Mac的写法

20:59.230 --> 21:01.230
这个地方要写一个sport

21:01.230 --> 21:02.230
它要写这个

21:02.230 --> 21:03.230
它不能写set

21:04.230 --> 21:05.230
那如果说你这个程序

21:05.230 --> 21:07.230
要放到服务器上运行

21:07.230 --> 21:09.230
服务器它又不支持

21:09.230 --> 21:10.230
服务器又不支持set

21:10.230 --> 21:11.230
它也是一个sport

21:11.230 --> 21:12.230
也就是说

21:12.230 --> 21:14.230
不同的环境下边

21:14.230 --> 21:15.230
有不同的

21:15.230 --> 21:17.230
命令写法

21:17.230 --> 21:18.230
那么是不是造成了

21:18.230 --> 21:19.230
命令书写的差异

21:19.230 --> 21:21.230
那么如何来消除这个差异呢

21:21.230 --> 21:23.230
有专门的一个第三方库

21:23.230 --> 21:24.230
叫做Cross

21:24.230 --> 21:25.230
Cross是什么

21:25.230 --> 21:26.230
跨越

21:26.230 --> 21:28.230
跨越环境

21:28.230 --> 21:29.230
跨越环境

21:29.230 --> 21:31.230
就是有这么一个第三方库

21:31.230 --> 21:32.230
它可以对环境

21:32.230 --> 21:33.230
用它来对环境

21:33.230 --> 21:34.230
面量进行设置

21:34.230 --> 21:36.230
它可以跨越任何环境

21:36.230 --> 21:37.230
它用统一的

21:37.230 --> 21:39.230
一个命令的模式来书写

21:39.230 --> 21:41.230
它会根据你运行的

21:41.230 --> 21:42.230
程序的平台

21:42.230 --> 21:44.230
来把它转换成相应的命令

21:45.230 --> 21:47.230
那么怎么来用呢

21:47.230 --> 21:48.230
我们来复制一下

21:48.230 --> 21:50.230
看一下npm

21:50.230 --> 21:52.230
这些第三方库以后

21:52.230 --> 21:54.230
我们全部在npm上安装

21:54.230 --> 21:56.230
那么这个Cross M

21:56.230 --> 21:57.230
那么它这里

21:57.230 --> 21:58.230
告诉你怎么去安装

21:58.230 --> 22:00.230
就是npm install

22:00.230 --> 22:01.230
安装

22:01.230 --> 22:02.230
安装过后

22:02.230 --> 22:03.230
它告诉你

22:03.230 --> 22:05.230
就是在前面加上一个Cross M

22:05.230 --> 22:06.230
然后后面

22:06.230 --> 22:08.230
设置你的环境面量

22:08.230 --> 22:09.230
环境面量的名称

22:09.230 --> 22:10.230
环境面量的字

22:10.230 --> 22:11.230
然后后面跟上你的

22:11.230 --> 22:12.230
剩下的命令

22:12.230 --> 22:14.230
所以它用起来非常方便

22:14.230 --> 22:15.230
咱们也不用怕

22:15.230 --> 22:17.230
以后要用一些新的

22:17.230 --> 22:19.230
第三方库非常常见

22:19.230 --> 22:20.230
不用害怕

22:20.230 --> 22:21.230
都很简单

22:21.230 --> 22:23.230
好 咱们首先安装

22:23.230 --> 22:24.230
安装

22:24.230 --> 22:26.230
那么这个时候安装

22:26.230 --> 22:28.230
首先大家想一想

22:28.230 --> 22:29.230
想一想

22:29.230 --> 22:30.230
这个玩意安装

22:30.230 --> 22:33.230
应该是一个开发依赖

22:33.230 --> 22:35.230
还是一个就是

22:35.230 --> 22:37.230
普通的依赖

22:37.230 --> 22:40.230
就是生产环境里边的依赖

22:40.230 --> 22:42.230
还是说是开发依赖了

22:42.230 --> 22:44.230
这个地方

22:44.230 --> 22:46.230
你觉得应该是开发依赖

22:46.230 --> 22:48.230
还是生产环境依赖了

22:48.230 --> 22:50.230
像那种提供命令行的东西

22:50.230 --> 22:52.230
一般来说

22:52.230 --> 22:54.230
都是生产

22:54.230 --> 22:56.230
都是开发依赖

22:56.230 --> 22:58.230
一般来说都是开发依赖

22:58.230 --> 23:00.230
我们这里来给大家说明一下

23:00.230 --> 23:02.230
像那种提供命令行的东西

23:02.230 --> 23:04.230
一般来说都是开发依赖

23:04.230 --> 23:05.230
横杠地

23:05.230 --> 23:07.230
横杠地

23:07.230 --> 23:09.230
全些就是sale

23:09.230 --> 23:11.230
横杠地就行了

23:11.230 --> 23:13.230
然后安装什么呢

23:13.230 --> 23:15.230
安装那个就是

23:15.230 --> 23:17.230
cross

23:17.230 --> 23:20.230
安装

23:20.230 --> 23:22.230
安装好了

23:22.230 --> 23:23.230
安装好了过后

23:23.230 --> 23:24.230
它脚本里面

23:24.230 --> 23:25.230
它提供了一个命令行

23:25.230 --> 23:26.230
你看是不是cross and

23:26.230 --> 23:27.230
命令行

23:27.230 --> 23:29.230
如果说你要在这里用的话

23:29.230 --> 23:31.230
是比较用MPX启动

23:31.230 --> 23:33.230
但是我们在脚本里面

23:33.230 --> 23:34.230
是不用MPX的

23:34.230 --> 23:35.230
那么怎么用呢

23:35.230 --> 23:37.230
你直接使用这个命令

23:37.230 --> 23:38.230
cross and

23:38.230 --> 23:39.230
直接使用这个命令

23:39.230 --> 23:40.230
你看这里

23:40.230 --> 23:42.230
文档里面一般有说明

23:42.230 --> 23:43.230
cross and

23:43.230 --> 23:44.230
直接使用就行了

23:44.230 --> 23:45.230
那么它的要求就是

23:45.230 --> 23:47.230
不管你是什么环境

23:47.230 --> 23:48.230
不管你是什么系统

23:48.230 --> 23:49.230
你只要使用同样的命令就行了

23:49.230 --> 23:50.230
cross and

23:50.230 --> 23:51.230
空格

23:51.230 --> 23:52.230
会不会想到环境面量的名称

23:52.230 --> 23:53.230
环境面量的指

23:53.230 --> 23:54.230
后面不用浅and了

23:54.230 --> 23:55.230
直接空格

23:55.230 --> 23:56.230
就完事了

23:56.230 --> 23:57.230
好 咱们来试一下

23:57.230 --> 23:58.230
那么这样子写完了过后

23:58.230 --> 23:59.230
我们MPM start

24:00.230 --> 24:02.230
你看 是不是搞定了

24:02.230 --> 24:03.230
那么后边是一样的

24:03.230 --> 24:05.230
后边是一样的

24:05.230 --> 24:06.230
把前面

24:06.230 --> 24:07.230
复制粘贴

24:10.230 --> 24:11.230
复制粘贴

24:11.230 --> 24:13.230
然后这里and去掉

24:13.230 --> 24:15.230
变成空格

24:15.230 --> 24:16.230
空格

24:16.230 --> 24:17.230
就完事了

24:17.230 --> 24:19.230
那么start

24:19.230 --> 24:22.610
ROM build

24:22.610 --> 24:23.610
生产环境

24:23.610 --> 24:26.610
然后MPM test

24:26.610 --> 24:29.110
测试环境

24:29.110 --> 24:30.110
所以搞定了

24:30.110 --> 24:31.110
对吧

24:31.110 --> 24:32.110
咱们就说这个事情

24:33.110 --> 24:34.110
好 然后呢

24:34.110 --> 24:35.110
我们接着看

24:35.110 --> 24:37.110
这就可能东西不多

24:37.110 --> 24:38.110
所以说我们再补充一个东西吧

24:38.110 --> 24:40.110
因为我们这就和讲了

24:40.110 --> 24:41.110
就是漏的代码

24:41.110 --> 24:43.110
跟那个我们的配置文件

24:43.110 --> 24:45.110
这个package的介绍里面

24:45.110 --> 24:46.110
有哪些交互

24:46.110 --> 24:47.110
有哪些联系

24:47.110 --> 24:49.110
刚才说了环境面量

24:49.110 --> 24:50.110
我们可以在

24:50.110 --> 24:51.110
利用这个package联接上

24:51.110 --> 24:52.110
那个配置文件

24:52.110 --> 24:53.110
写上一些脚本

24:53.110 --> 24:54.110
在脚本里面

24:54.110 --> 24:55.110
去设置环境面量

24:55.110 --> 24:56.110
根据不同的命令

24:56.110 --> 24:58.110
去设置不同的环境面量值

24:58.110 --> 24:59.110
然后在这一边去读取

24:59.110 --> 25:01.110
那么大家注意的是

25:01.110 --> 25:02.110
这个东西它不是说

25:02.110 --> 25:03.110
一定要这样子写

25:03.110 --> 25:05.110
只是我们习惯上这样子写

25:05.110 --> 25:06.110
那么这里的纸

25:06.110 --> 25:07.110
也是习惯上给的纸

25:09.110 --> 25:10.110
然后我们这里说一下

25:10.110 --> 25:12.110
如果说你在load里面

25:12.110 --> 25:14.110
可能有的时候

25:14.110 --> 25:15.110
这门课我们不会遇到

25:15.110 --> 25:16.110
所以我们这门课

25:16.110 --> 25:18.110
主要是为后边的课程打击处

25:18.110 --> 25:20.110
我们这门课不太会遇到

25:20.110 --> 25:21.110
但是以后可能会遇到

25:21.110 --> 25:22.110
在load里面

25:22.110 --> 25:24.110
我们可能会读取一下

25:24.110 --> 25:25.110
这里面的配置

25:25.110 --> 25:26.110
比方说我们的load里面

25:26.110 --> 25:27.110
我们要读取

25:27.110 --> 25:28.110
我们的look文件是啥

25:28.110 --> 25:29.110
我们的version是啥

25:29.110 --> 25:30.110
我们的版本是啥

25:31.110 --> 25:32.110
比方说

25:32.110 --> 25:35.110
咱们再来一个

25:37.110 --> 25:43.110
读取package.json文件中的版本号

25:44.110 --> 25:45.110
比方说我们在load里面

25:45.110 --> 25:46.110
要读这个东西

25:46.110 --> 25:47.110
怎么读呢

25:47.110 --> 25:48.110
是不是要把这个东西

25:48.110 --> 25:49.110
导入新来

25:49.110 --> 25:51.110
非常简单

25:51.110 --> 25:53.110
load里面还支持这么一个

25:53.110 --> 25:54.110
稍操作

25:54.110 --> 25:55.110
就是如果说

25:55.110 --> 25:56.110
你有一个json文件

25:56.110 --> 25:57.110
就是里面那种是json格式

25:57.110 --> 25:58.110
不是后续名为json

25:58.110 --> 25:59.110
是你的文件的内容

25:59.110 --> 26:00.110
你的文件的内容

26:00.110 --> 26:02.110
是一个json格式

26:02.110 --> 26:03.110
那么如果说

26:03.110 --> 26:05.110
你要导入这么一个

26:05.110 --> 26:06.110
如果说你的文件内容

26:06.110 --> 26:07.110
是这么一个内容的话

26:07.110 --> 26:08.110
那么它会自动的

26:08.110 --> 26:10.110
把这个文件的内容

26:10.110 --> 26:12.110
把它变成json对象

26:12.110 --> 26:13.110
然后导出

26:13.110 --> 26:14.110
所以说你这里

26:14.110 --> 26:16.110
直接require就行了

26:16.110 --> 26:18.110
require什么呢

26:18.110 --> 26:20.110
package.json

26:20.110 --> 26:21.110
这样子你就拿到

26:21.110 --> 26:22.110
一个对象了

26:22.110 --> 26:23.110
看吧

26:23.110 --> 26:27.110
package.json

26:28.110 --> 26:30.110
说出

26:30.110 --> 26:32.110
就简单一些

26:32.110 --> 26:33.110
config

26:33.110 --> 26:35.110
我们的配置

26:35.110 --> 26:36.110
运行

26:36.110 --> 26:41.110
in这个是load test

26:41.110 --> 26:42.110
你看

26:42.110 --> 26:43.110
怎么拿到了

26:43.110 --> 26:44.110
怎么拿到整个

26:44.110 --> 26:45.110
package.json的所有配置了

26:45.110 --> 26:46.110
对吧

26:46.110 --> 26:48.110
你要拿到version还不简单吗

26:48.110 --> 26:49.110
第二version

26:49.110 --> 26:50.110
对吧

26:50.110 --> 26:51.110
说可以拿到了

26:52.110 --> 26:54.110
就这么简单

26:54.110 --> 26:55.110
所以说你以后

26:55.110 --> 26:56.110
在load的环境里

26:56.110 --> 26:57.110
你要使用一个

26:57.110 --> 26:58.110
json格式的文件

26:58.110 --> 26:59.110
你直接拿就行了

26:59.110 --> 27:01.110
包括我们之前一个练习

27:01.110 --> 27:02.110
练习里面不是拿到

27:02.110 --> 27:03.110
move.json吗

27:03.110 --> 27:04.110
同样的道理

27:04.110 --> 27:05.110
如果说你把它导入进来

27:05.110 --> 27:06.110
在load的在码里面

27:06.110 --> 27:07.110
把json格式导入进来

27:07.110 --> 27:09.110
它自动就形成了一个

27:09.110 --> 27:10.110
形成了一个就是

27:10.110 --> 27:12.110
介石对象了

27:12.110 --> 27:13.110
OK

27:13.110 --> 27:14.110
这就是关于如何

27:14.110 --> 27:15.110
来读取package.json

27:15.110 --> 27:17.110
也正是因为如此

27:17.110 --> 27:18.110
我们有的时候

27:18.110 --> 27:20.110
可能会在package.json里面

27:20.110 --> 27:22.110
加入一些自定义者之段

27:22.110 --> 27:23.110
它本身没什么意思

27:23.110 --> 27:25.110
但是只是为了让load

27:25.110 --> 27:26.110
来读取了

27:26.110 --> 27:28.110
我们以后会干这么这样的事情

27:28.110 --> 27:30.110
如果说你以后

27:30.110 --> 27:31.110
在这个配置文件里面

27:31.110 --> 27:33.110
刚见到了一些奇奇怪怪的之段

27:33.110 --> 27:34.110
一些自定义的之段

27:34.110 --> 27:35.110
不要奇怪

27:35.110 --> 27:36.110
它就是为了让load来读取

27:36.110 --> 27:38.110
比方说我们这里

27:38.110 --> 27:39.110
来加上一个

27:40.110 --> 27:41.110
加什么呢

27:41.110 --> 27:42.110
随便加一个吧

27:42.110 --> 27:43.110
等于123

27:43.110 --> 27:44.110
随便加一个之段

27:44.110 --> 27:45.110
这个之段

27:45.110 --> 27:46.110
对这个配置文件

27:46.110 --> 27:47.110
本身是没有什么意义的

27:47.110 --> 27:48.110
它的存在作用

27:48.110 --> 27:49.110
仅仅是为了让

27:49.110 --> 27:51.110
在load代码里面去读取

27:51.110 --> 27:52.110
比方说我们输出

27:52.110 --> 27:55.420
config.load

27:56.420 --> 27:58.420
那么这里是test

27:58.420 --> 28:00.420
你看是不是输出了

28:00.420 --> 28:01.420
OK

28:01.420 --> 28:02.420
我就想说这么一个颜色

28:02.420 --> 28:03.420
因为我们后边

28:03.420 --> 28:05.420
有可能会这么干

28:05.420 --> 28:06.420
这就是关于这些课

28:06.420 --> 28:07.420
我要说的

28:07.420 --> 28:09.420
这些课其实就是讲load

28:09.420 --> 28:11.420
跟配置文件的交互

28:11.420 --> 28:12.420
配置文件里面可以配置

28:12.420 --> 28:14.420
脚本来控制环境面量

28:14.420 --> 28:15.420
然后load

28:15.420 --> 28:16.420
也可以读取

28:17.420 --> 28:19.420
配置文件里面的东西

28:19.420 --> 28:20.420
OK

28:20.420 --> 28:21.420
这些代码

28:21.420 --> 28:22.420
下去都去练一下

28:22.420 --> 28:24.420
没有什么特别难的

28:24.420 --> 28:25.420
讲什么环境面量

28:25.420 --> 28:26.420
环境面量

28:26.420 --> 28:27.420
自己一定要去写一下

28:27.420 --> 28:28.420
一定要去写一下

28:28.420 --> 28:29.420
后面要用到的

28:29.420 --> 28:30.420
然后这里

28:30.420 --> 28:32.420
这个自定义的东西

28:32.420 --> 28:33.420
随便写一下

28:33.420 --> 28:34.420
也很简单

28:34.420 --> 28:35.420
OK

28:35.420 --> 28:36.420
这是这一块内容

